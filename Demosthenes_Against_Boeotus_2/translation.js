var translation={}
translation['31.1'] = ""
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSB0cmlhbCBhZ2FpbnN0IGhpbSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGRlY2lkZWQsIGFuZCBoZSBzYXcgd2hhdCB5b3VyIGF0dGl0dWRlIHdhcyB0b3dhcmQgdGhvc2Ugd2hvIHdlcmUgdG9vIGJyYXplbgogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIHdyb25nZG9pbmdzLCBoZSBjYW1lIHRvIGhpcyBzZW5zZXMsIGFuZCBjb25jbHVkZWQgdGhhdCBJIHNob3VsZCBhcHBlYXIKICAgICAgICAgICAgICAgICAgICB0byBiZSBzdWZmZXJpbmcgb3V0cmFnZW91cyB0cmVhdG1lbnQsIGlmLCBhZnRlciBiZWluZyByb2JiZWQgb2Ygc3VjaCBsYXJnZSBzdW1zLAogICAgICAgICAgICAgICAgICAgIEkgc2hvdWxkIGJlIHVuYWJsZSB0byByZWNvdmVyIGFueXRoaW5nIHdoYXRldmVyIGZyb20gQXBob2J1cywgd2hvIGhhZCBteQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGluIGhpcyBwb3NzZXNzaW9uLCBidXQgaXQgc2hvdWxkIGJlY29tZSBjbGVhciB0aGF0IEkgd2FzIHByZXZlbnRlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgZnJvbSByZWNvdmVyaW5nIGFueXRoaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoYXQsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgZG9lcyBoZSBkbz8gSGUgcmVtb3ZlcyB0aGUgcGlsbGFycyBmcm9tIHRoZSBob3VzZSwgYW5kIGRlY2xhcmVzIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UtcG9ydGlvbiB3YXMgYSB0YWxlbnQgb25seSwgd2hpY2ggc3VtIHdhcyBndWFyYW50ZWVkIGJ5IGEgbW9ydGdhZ2Ugb24KICAgICAgICAgICAgICAgICAgICB0aGUgbGFuZC4gWWV0LCBpZiB0aGUgaW5zY3JpcHRpb24gb24gdGhlIGhvdXNlIHdhcyBzZXQgdXAgYnkgaGltIGluIGZhaXJuZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIHNpbmNlcml0eSwgaXQgaXMgcGxhaW4gdGhhdCB0aGUgb25lIG9uIHRoZSBsYW5kIHdhcyBhbHNvLiBCdXQgaWYgaGUgc2V0IHVwIGEKICAgICAgICAgICAgICAgICAgICBmYWxzZSBpbnNjcmlwdGlvbiBpbiB0aGUgZm9ybWVyIGNhc2Ugd2l0aCB0aGUgaW50ZW50IHRvIGNvbW1pdCBmcmF1ZCwgaXQgaXMKICAgICAgICAgICAgICAgICAgICBwcm9iYWJsZSB0aGF0IHRoZSBsYXR0ZXIgb25lIHdhcyBmYWxzZSBhbHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWF0dGVyIHlvdSBzaG91bGQgY29uc2lkZXIsIG5vdCBpbiB0aGUgbGlnaHQgb2YgdGhlIHByb29mcyB3aGljaCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZCwgYnV0IGZyb20gdGhlIGNvbmR1Y3Qgb2YgT25ldG9yIGhpbXNlbGYuIE5vIG1hbiBvbiBlYXJ0aCBjb21wZWxsZWQgaGltOwogICAgICAgICAgICAgICAgICAgIGhlIHRvb2sgZG93biB0aGUgcGlsbGFycyBoaW1zZWxmOyBhbmQgdGh1cyBieSBoaXMgb3duIGFjdCBoZSBtYWtlcyBjbGVhciB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaXMgYSBsaWFyLiBUbyBwcm92ZSB0aGF0IHRoZXNlIHN0YXRlbWVudHMgb2YgbWluZSBhcmUgdHJ1ZSwgdGhhdCBoZSBldmVuIG5vdwogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVzIHRoYXQgdGhlIGxhbmQgaXMgbW9ydGdhZ2VkIGZvciBhIHRhbGVudCwgYnV0IHRoYXQgaGUgbGFpZCBjbGFpbSB0byB0d28KICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hZSBtb3JlIG9uIHRoZSBob3VzZSwgYW5kIHRvb2sgdGhlIHBpbGxhcnMgZG93biBhZnRlciB0aGUgc3VpdAogICAgICAgICAgICAgICAgICAgIHdhcyBkZWNpZGVkLCBJIHNoYWxsIGJyaW5nIGZvcndhcmQgd2l0bmVzc2VzIHdobyBrbm93IHRoZSBmYWN0cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgdGhlIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyBwbGFpbiwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGF0IE9uZXRvciBoYXZpbmcgcHV0IHVwIHBpbGxhcnMgb24gdGhlIGhvdXNlIGZvciB0d28gdGhvdXNhbmQgZHJhY2htYWUsCiAgICAgICAgICAgICAgICAgICAgYW5kIG9uIHRoZSBsYW5kIGZvciBhIHRhbGVudCwgaW50ZW5kZWQgdG8gcHVzaCBoaXMgY2xhaW0gYXMgdGhvdWdoIGhlIGhhZCBwYWlkCiAgICAgICAgICAgICAgICAgICAgZWlnaHR5IG1pbmFlLiBDb3VsZCB5b3UgaGF2ZSBzdHJvbmdlciBwcm9vZiB0aGF0IHRoZXJlIGlzIG5vdCBhIHdvcmQgb2YgdHJ1dGggaW4KICAgICAgICAgICAgICAgICAgICB3aGF0IGhlIG5vdyBzYXlzLCB0aGFuIHRoZSBmYWN0IHRoYXQgaGlzIHByZXNlbnQgc3RvcnkgaXMgZGlmZmVyZW50IGZyb20gdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIGhlIHRvbGQgYXQgZmlyc3QgYWJvdXQgdGhlIHNhbWUgbWF0dGVycz8gVG8gbWUgaXQgc2VlbXMgdGhhdCBubyBzdHJvbmdlciBwcm9vZgogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhpcyBjb3VsZCBiZSBmb3VuZC4gPC90cmFuc2xhdGlvbj4="
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgbm90ZSB0aGUgc2hhbWVsZXNzbmVzcyBvZiB0aGUgbWFuLiBIZSBoYWQgdGhlIGF1ZGFjaXR5IHRvCiAgICAgICAgICAgICAgICAgICAgc2F5IGJlZm9yZSB5b3UgdGhhdCBoZSBpcyBub3QgZGVwcml2aW5nIG1lIG9mIHdoYXQgdGhlIGxhbmQgaXMgd29ydGggYmV5b25kIGEKICAgICAgICAgICAgICAgICAgICB0YWxlbnQsIGFuZCB0aGF0LCB0b28sIHdoZW4gaGUgaGFzIGhpbXNlbGYgZml4ZWQgaXRzIHZhbHVlIGFzIG5vdGhpbmcgbW9yZS4gV2l0aAogICAgICAgICAgICAgICAgICAgIHdoYXQgZW5kIGluIHZpZXcsIE9uZXRvciwgZGlkIHlvdSBmaXggeW91ciBwaWxsYXJzIG9uIHRoZSBob3VzZSBmb3IgdGhlIHR3bwogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGV4dHJhIGRyYWNobWFlLCB3aGVuIHlvdSB3ZXJlIGRlbWFuZGluZyBlaWdodHkgbWluYWUsIGlmIHRoZSBsYW5kIHdhcwogICAgICAgICAgICAgICAgICAgIHJlYWxseSB3b3J0aCBtb3JlLCBpbnN0ZWFkIG9mIHNlY3VyaW5nIHRoZSB0d28gdGhvdXNhbmQgZHJhY2htYWUgYWxzbyBieSBhCiAgICAgICAgICAgICAgICAgICAgbW9ydGdhZ2Ugb24gdGhlIGxhbmQ/IDwvdHJhbnNsYXRpb24+"
translation['31.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9yLCB3aGVuIGl0IHN1aXRzIHlvdXIKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIHRvIHNhdmUgYWxsIG9mIHRoZSBwcm9wZXJ0eSBvZiBBcGhvYnVzLCBpcyB0aGUgbGFuZCB0byBiZSB3b3J0aCBhIHRhbGVudAogICAgICAgICAgICAgICAgICAgIG9ubHksIGFuZCBhcmUgeW91IHRvIGhvbGQgdGhlIGhvdXNlIG9uIGEgbW9ydGdhZ2Ugb2YgdHdvIHRob3VzYW5kIGRyYWNobWFlIG1vcmU7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtYXJyaWFnZS1wb3J0aW9uIGJlaW5nIGVpZ2h0eSBtaW5hZSwgd2lsbCB5b3UgY2xhaW0gdGhlIHJpZ2h0IHRvIGhvbGQKICAgICAgICAgICAgICAgICAgICBib3RoIHRoZSBsYW5kIGFuZCB0aGUgaG91c2U7IG9yIGFnYWluLCB3aGVuIHRoaXMgaXMgbm90IHRvIHlvdXIgaW50ZXJlc3QsIGlzIGFsbAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGRpZmZlcmVudDogdGhlIGhvdXNlIGlzIHRvIGJlIHdvcnRoIGEgdGFsZW50LCBiZWNhdXNlIG5vdyBpdCBpcyBJIHRoYXQKICAgICAgICAgICAgICAgICAgICBob2xkIGl0LCBhbmQgd2hhdCBpcyBsZWZ0IG9mIHRoZSBmYXJtIGlzIHRvIGJlIHdvcnRoIG5vdCBsZXNzIHRoYW4gdHdvIHRhbGVudHMsCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCBpdCBtYXkgc2VlbSB0aGF0IEkgYW0gd3JvbmdpbmcgQXBob2J1cywgbm90IG15c2VsZiBiZWluZyByb2JiZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSBzZWUgdGhhdCwgd2hpbGUgeW91IHByZXRlbmQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHBhaWQgdGhlIGRvd3J5LCB5b3UgYXJlIHNob3duIG5vdCB0byBoYXZlIHBhaWQgaXQgaW4gYW55IHdheSB3aGF0c29ldmVyPyBGb3IKICAgICAgICAgICAgICAgICAgICB0aGF0IGxpbmUgb2YgY29uZHVjdCBpcyBzaW5jZXJlIGFuZCBmcmVlIGZyb20gZ3VpbGUsIHdoaWNoIHJlbWFpbnMgdGhyb3VnaG91dAogICAgICAgICAgICAgICAgICAgIHN1Y2ggYXMgaXQgd2FzIGF0IHRoZSBmaXJzdCwgYnV0IHlvdSBhcmUgcHJvdmVuIHRvIGhhdmUgZm9sbG93ZWQgdGhlIGNvbnRyYXJ5CiAgICAgICAgICAgICAgICAgICAgY291cnNlLCBzbyBhcyB0byBmdWxmaWwgeW91ciBzZXJ2aWNlIGFzIGFuIHVuZGVybGluZyB0byBteSBkZXRyaW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['31.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyB3b3J0aCB3aGlsZSB0bwogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIGluIHRoZSBsaWdodCBvZiB0aGVzZSBmYWN0cyB3aGF0IHNvcnQgb2YgYW4gb2F0aCBoZSB3b3VsZCBoYXZlIHN3b3JuLAogICAgICAgICAgICAgICAgICAgIGlmIGFuIG9hdGggaGFkIGJlZW4gdGVuZGVyZWQgaGltLiBGb3IsIHdoZW4gaGUgZGVjbGFyZWQgdGhhdCB0aGUgZG93cnkgd2FzCiAgICAgICAgICAgICAgICAgICAgZWlnaHR5IG1pbmFlLCBpZiBvbmUgaGFkIGdyYW50ZWQgdGhhdCBoZSBzaG91bGQgcmVjb3ZlciB0aGF0IHN1bSBvbiBjb25kaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBoaXMgc3dlYXJpbmcgdGhhdCB0aGlzIHN0YXRlbWVudCBvZiBoaXMgd2FzIHRydWUsIHdoYXQgd291bGQgaGUgaGF2ZSBkb25lPyBJcyBpdAogICAgICAgICAgICAgICAgICAgIG5vdCBwbGFpbiB0aGF0IGhlIHdvdWxkIGhhdmUgdGFrZW4gdGhlIG9hdGg/IFdoYXQgY2FuIGhlIHNheSB0byBkZW55IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIHN3b3JuIGl0IHVuZGVyIHRob3NlIGNpcmN1bXN0YW5jZXMsIHdoZW4gaGUgZGVtYW5kcyB0aGUgcmlnaHQgdG8gZG8KICAgICAgICAgICAgICAgICAgICBzbyBub3c/IFdlbGwgdGhlbiwgaGlzIG93biB3b3JkcyBwcm92ZSB0aGF0IGhlIHdvdWxkIGhhdmUgcGVyanVyZWQgaGltc2VsZjsgZm9yCiAgICAgICAgICAgICAgICAgICAgaGUgbm93IGNsYWltcyB0aGF0IGhlIHBhaWQsIG5vdCBlaWdodHkgbWluYWUsIGJ1dCBhIHRhbGVudC4gV2hhdCByZWFzb24gaXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICB3aHkgb25lIHNob3VsZCBiZWxpZXZlIHRoYXQgaGUgaXMgZm9yc3dlYXJpbmcgaGltc2VsZiBpbiBvbmUgc3RhdGVtZW50IHJhdGhlcgogICAgICAgICAgICAgICAgICAgIHRoYW4gaW4gdGhlIG90aGVyPyBPciB3aGF0IG9waW5pb24gc2hvdWxkIG9uZSByaWdodGx5IGhvbGQgb2YgYSBtYW4gd2hvIHRodXMKICAgICAgICAgICAgICAgICAgICBsaWdodGx5IGNvbnZpY3RzIGhpbXNlbGYgb2YgcGVyanVyeT8gPC90cmFuc2xhdGlvbj4="
translation['31.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHBlcmhhcHMgbm90IGFsbCBvZiBoaXMgYWN0cyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIG5hdHVyZSwgbm9yIGlzIGhlIHByb3ZlbiBpbiBldmVyeSBpbnN0YW5jZSB0byBiZSBhIHRyaWNrc3Rlci4gWWV0IGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gc2hvd24gdGhhdCBoZSBzb3VnaHQgaW4gQXBob2J1cydzIGludGVyZXN0IHRvIGhhdmUgdGhlIGRhbWFnZXMgZml4ZWQgYXQgYQogICAgICAgICAgICAgICAgICAgIHRhbGVudCwgYW5kIGhpbXNlbGYgb2ZmZXJlZCB0byBhY3QgYXMgYmFpbCBmb3IgdGhlIHBheW1lbnQgdG8gbWUgb2YgdGhhdCBzdW0uCiAgICAgICAgICAgICAgICAgICAgWWV0IG9ic2VydmUgdGhhdCB0aGlzIGlzIGEgcHJvb2Ygbm90IG9ubHkgdGhhdCBoaXMgd2lmZSB3YXMgbGl2aW5nIHdpdGggQXBob2J1cwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IE9uZXRvciB3YXMgb24gaW50aW1hdGUgdGVybXMgd2l0aCBoaW0sIGJ1dCBhbHNvIHRoYXQgaGUgaGFkIG5vdCBwYWlkCiAgICAgICAgICAgICAgICAgICAgdGhlIGRvd3J5LiA8L3RyYW5zbGF0aW9uPg=="
translation['31.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdCBtYW4gd291bGQgYmUgc28gZm9vbGlzaAogICAgICAgICAgICAgICAgICAgIGFzLCBmaXJzdCwgdG8gcGF5IG91dCBzbyBsYXJnZSBhIHN1bSwgdGhlbiB0byB0YWtlIGFzIHNlY3VyaXR5IGEgc2luZ2xlIHBpZWNlIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIHRoZSB0aXRsZSB0byB3aGljaCB3YXMgdW5kZXIgZGlzcHV0ZSwgYW5kIGZpbmFsbHksIG5vdCBzYXRpc2ZpZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpcyBwcmV2aW91cyBsb3NzZXMgYW5kIGFzc3VtaW5nIHRoYXQgdGhlIG9uZSB3aG8gaGFkIHdyb25nZWQgaGltIHdhcyBub3cgZ29pbmcKICAgICAgICAgICAgICAgICAgICB0byBhY3QganVzdGx5LCB0byBiZWNvbWUgaGlzIGJhaWwgZm9yIHRoZSBkYW1hZ2VzIGFzc2Vzc2VkIGJ5IHRoZSBjb3VydD8gTm9ib2R5CiAgICAgICAgICAgICAgICAgICAgd291bGQsIHRvIG15IHRoaW5raW5nLiBUaGUgYXNzdW1wdGlvbiBpcyBub3QgZXZlbiByYXRpb25hbCwgdGhhdCBhIG1hbiB1bmFibGUgdG8KICAgICAgICAgICAgICAgICAgICByZWNvdmVyIGEgdGFsZW50IGZvciBoaW1zZWxmLCBzaG91bGQgcHJvbWlzZSB0byBwYXkgdGhhdCBzdW0gdG8gYW5vdGhlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgZnVydGhlciB0byBnaXZlIGJhaWwgZm9yIGl0LiBObzsgZnJvbSB0aGVzZSBmYWN0cyBhbG9uZSBpdCBpcyBjbGVhciB0aGF0IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIG5ldmVyIHBhaWQgdGhlIGRvd3J5LCBidXQgYXMgYSBjbG9zZSBmcmllbmQgb2YgQXBob2J1cyBoZSB0b29rIHRoaXMgbW9ydGdhZ2UgaW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yIG15IGxhcmdlIHByb3BlcnR5LCB3aXNoaW5nIHRvIG1ha2UgaGlzIHNpc3RlciBqb2ludGx5IHdpdGggQXBob2J1cyBhbgogICAgICAgICAgICAgICAgICAgIGluaGVyaXRvciBvZiBteSBlc3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['31.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHNlZWtzIG5vdyB0bwogICAgICAgICAgICAgICAgICAgIGRlY2VpdmUgYW5kIGJlZ3VpbGUgeW91IGJ5IGNsYWltaW5nIHRoYXQgaGUgc2V0IHVwIHRoZSBwaWxsYXJzIGJlZm9yZSBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICB3YXMgZ2l2ZW4gYWdhaW5zdCBBcGhvYnVzLiBBeWUsIE9uZXRvcjsgYnV0IG5vdCBiZWZvcmUgaXQgd2FzIGdpdmVuIGJ5IHlvdSwgaWYKICAgICAgICAgICAgICAgICAgICB3aGF0IHlvdSBub3cgc2F5IGlzIHRydWUuIEZvciBpdCBpcyBjbGVhciB0aGF0IHlvdSBhY3RlZCBhcyB5b3UgZGlkIGJlY2F1c2UgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSBjb252aW5jZWQgb2YgaGlzIGd1aWx0LiBBZ2FpbiwgdGhpcyBsYW5ndWFnZSBvZiB5b3VycyBpcyBhYnN1cmQsIGFzIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCBkaWQgbm90IGtub3cgdGhhdCBhbGwgdGhvc2Ugd2hvIGNvbW1pdCBmcmF1ZHMgb2YgdGhpcyBzb3J0CiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIHdoYXQgdGhleSBhcmUgZ29pbmcgdG8gc2F5LCBhbmQgdGhhdCBubyBvbmUgZXZlciBsb3N0IGEgc3VpdCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAga2VlcGluZyBxdWlldCwgb3IgYWRtaXR0aW5nIHRoYXQgaGUgd2FzIGluIHRoZSB3cm9uZzsgYnV0IGl0IGlzLCBJIHRoaW5rLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaGUgaGFzIGJlZW4gY29udmljdGVkIG9mIG1ha2luZyBhIGZhbHNlIHN0YXRlbWVudCwgdGhhdCBtZW4ga25vdyB3aGF0IG1hbm5lciBvZgogICAgICAgICAgICAgICAgICAgIG1hbiBoZSBpcy4gPC90cmFuc2xhdGlvbj4="
translation['31.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBpcyB3aGF0IGFwcGVhcnMgdG8gbWUgdG8KICAgICAgICAgICAgICAgICAgICBiZSBleGFjdGx5IHRoZSBwbGlnaHQgb2YgT25ldG9yLiBGb3IgdGVsbCBtZSwgaG93IGNhbiBpdCBiZSBqdXN0LCBpZiB5b3Ugc2V0IHVwCiAgICAgICAgICAgICAgICAgICAgcGlsbGFycyBmb3IgZWlnaHR5IG1pbmFlLCB0aGF0IHRoZSBkb3dyeSBzaG91bGQgYmUgZWlnaHR5IG1pbmFlOyBhbmQsIGlmIGZvcgogICAgICAgICAgICAgICAgICAgIG1vcmUsIG1vcmU7IGFuZCwgaWYgZm9yIGxlc3MsIGxlc3M/IE9yIGhvdyBpcyBpdCBqdXN0LCB3aGVuIHlvdXIgc2lzdGVyIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcyBwcmVzZW50IGRheSBoYXMgbmV2ZXIgbGl2ZWQgd2l0aCBhbnkgb3RoZXIgbWFuLCBvciBiZWVuIHNlcGFyYXRlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgQXBob2J1cywgd2hlbiB5b3UgaGF2ZSBuZWl0aGVyIHBhaWQgdGhlIGRvd3J5LCBub3IgYmVlbiB3aWxsaW5nIHRvIGhhdmUgcmVjb3Vyc2UKICAgICAgICAgICAgICAgICAgICB0byB0aGUgdG9ydHVyZSwgb3IgdG8gYW55IG90aGVyIGZhaXIgbWVhbnMgb2YgZGV0ZXJtaW5pbmcgdGhlIG1hdHRlcnMgYXQgaXNzdWUsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBiZWNhdXNlIHlvdSBjbGFpbSB0byBoYXZlIHNldCB1cCBwaWxsYXJzLCB0aGUgZmFybSBzaGFsbCBiZWxvbmcgdG8geW91PyBJCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbmx5IGRvIG5vdCBzZWUgaG93IGl0IGNhbiBiZS4gSXQgaXMgdGhlIHRydXRoIHRvIHdoaWNoIHdlIG11c3QgbG9vaywgbm90CiAgICAgICAgICAgICAgICAgICAgdG8gYXJndW1lbnRzIHdoaWNoIGEgbWFuIGhhcyBjb250cml2ZWQg77yIYXMgeW91IGFyZSBkb2luZ++8iSBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRvIHNlZW0gdG8gc3BlYWsgd2l0aCBzb21lIHBsYXVzaWJpbGl0eS4gPC90cmFuc2xhdGlvbj4="
translation['31.14'] = ""
translation['32.Intro'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJJbnRybyIgdW5pdD0icGFydCIgLz48L3RyYW5zbGF0aW9uPg=="
translation['32.Narr'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NZW4gb2YgdGhlIGp1cnksIGhhdmluZyBlbnRlcmVkIGEgcGxlYSB0aGF0IHRoZSBhY3Rpb24KICAgICAgICAgICAgICAgICAgICBpcyBub3QgYWRtaXNzaWJsZSwgSSB3aXNoIGZpcnN0IHRvIHNwZWFrIGNvbmNlcm5pbmcgdGhlIGxhd3MgaW4gYWNjb3JkYW5jZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIHBsZWEgd2FzIGVudGVyZWQuIFRoZSBsYXdzLCBtZW4gb2YgdGhlIGp1cnksIG9yZGFpbiB0aGF0IGFjdGlvbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgc2hpcG93bmVycyBhbmQgbWVyY2hhbnRzIHNoYWxsIGJlIHVwb24gbG9hbnMgZm9yIHNoaXBtZW50cyB0byBvciBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgY29uY2VybmluZyB3aGljaCB0aGVyZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gYWdyZWVtZW50czsgYW5kIGlmIGFueW9uZSBicmluZ3Mgc3VpdCBpbiB2aW9sYXRpb24gb2YgdGhpcyBwcm92aXNpb24sCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjdGlvbiBzaGFsbCBub3QgYmUgbWFpbnRhaW5hYmxlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iTmFyciIgdW5pdD0icGFydCIgLz48L3RyYW5zbGF0aW9uPg=="
translation['32.Proof'] = ""
translation['32.Concl'] = ""
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbGF3LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvcmRhaW5zIHRoYXQgYWN0aW9ucyBmb3IKICAgICAgICAgICAgICAgICAgICBtZXJjaGFudHMgYW5kIHNoaXBvd25lcnMgc2hhbGwgYmUgYmVmb3JlIHRoZSBUaGVzbW90aGV0YWU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFRoZXNtb3RoZXRhZSB3ZXJlIHRoZSBzaXggYXJjaG9ucyDvvIhvdGhlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBFcG9ueW11cywgdGhlIEJhc2lsZXVzLCBhbmQgdGhlIFBvbGVtYXJjaO+8iSwgYW5kIHdlcmUgZW1wb3dlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFkbWluaXN0ZXIganVzdGljZSBpbiBjYXNlcyBub3Qgc3BlY2lmaWNhbGx5IHdpdGhpbiB0aGUgcHJvdmluY2Ugb2YgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIG1hZ2lzdHJhdGUuPC9ub3RlPiBpZiB0aGV5IGhhdmUgYmVlbiBpbiBhbnkgd2F5IHdyb25nZWQgaW4gdGhlIG1hcmtldAogICAgICAgICAgICAgICAgICAgIGVpdGhlciBpbiBjb25uZWN0aW9uIHdpdGggYSB2b3lhZ2UgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gYW55IHBvaW50LCBvciBmcm9tIHNvbWUgb3RoZXIgcG9ydCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGFuZCBpdCBmaXhlcyBpbXByaXNvbm1lbnQgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVuYWx0eSBmb3Igd3Jvbmdkb2VycyB1bnRpbCBzdWNoIHRpbWUgYXMgdGhleSBzaGFsbCBoYXZlIHBhaWQgdGhlIGFtb3VudAogICAgICAgICAgICAgICAgICAgIGFkanVkZ2VkIGFnYWluc3QgdGhlbSwgc28gdGhhdCBubyBvbmUgbWF5IGxpZ2h0bHkgZG8gd3JvbmcgdG8gYW55IG1lcmNoYW50LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRob3NlLCBob3dldmVyLCB3aG8gYXJlIGJyb3VnaHQgaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0IGluIGNhc2VzIHdoZXJlIG5vIGNvbnRyYWN0IGhhcyBiZWVuIG1hZGUsIHRoZSBsYXcgZ2l2ZXMgdGhlIHJpZ2h0IHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICByZWNvdXJzZSB0byBhIHNwZWNpYWwgcGxlYSwgdGhhdCBubyBvbmUgbWF5IGJyaW5nIGEgYmFzZWxlc3Mgb3IgbWFsaWNpb3VzIHN1aXQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgYWN0aW9ucyBtYXkgYmUgY29uZmluZWQgdG8gdGhvc2UgYW1vbmcgdGhlIG1lcmNoYW50cyBhbmQgc2hpcG93bmVycyB3aG8KICAgICAgICAgICAgICAgICAgICBhcmUgcmVhbGx5IHdyb25nZWQuIE1hbnkgZGVmZW5kYW50cyBpbiBtZXJjYW50aWxlIHN1aXRzIGhhdmUgYmVmb3JlIG5vdyBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCBwbGVhcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhpcyBsYXcsIGFuZCBoYXZlIGNvbWUgYmVmb3JlIHlvdSBhbmQgcHJvdmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGVpciBhZHZlcnNhcmllcyB3ZXJlIG1ha2luZyB1bmp1c3QgY2hhcmdlcyBhbmQgYnJpbmdpbmcgYmFzZWxlc3Mgc3VpdHMKICAgICAgICAgICAgICAgICAgICB1bmRlciBwcmV0ZW5jZSBvZiBiZWluZyBlbmdhZ2VkIGluIGNvbW1lcmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldobyBpdCBpcyB0aGF0IGhhcyBjb25zcGlyZWQgd2l0aCB0aGlzIGZlbGxvdyBhZ2FpbnN0IG1lIGFuZCB3aG8gaGFzIGNvbmNvY3RlZAogICAgICAgICAgICAgICAgICAgIHRoaXMgc3VpdCwgd2lsbCBiZWNvbWUgY2xlYXIgdG8geW91IGFzIG15IHNwZWVjaCBnb2VzIG9uLiBTaW5jZSwgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICBBcGF0dXJpdXMgaGFzIG1hZGUgYSBmYWxzZSBjaGFyZ2UgYWdhaW5zdCBtZSwgYW5kIGlzIHN1aW5nIG1lIGNvbnRyYXJ5IHRvIGxhdywKICAgICAgICAgICAgICAgICAgICBzZWVpbmcgdGhhdCB0aGVyZSBoYWQgYmVlbiBhIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSBmcm9tIGFsbCBjb250cmFjdHMgbWFkZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gaGltIGFuZCBtZSwgYW5kIHRoZXJlIGV4aXN0cyBubyBvdGhlciBjb250cmFjdCBtYWRlIHdpdGggaGltIGJ5IG1lCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBmb3IgYnVzaW5lc3MgYnkgc2VhIG9yIG9uIGxhbmQsIEkgaGF2ZSBlbnRlcmVkIHRoZSBzcGVjaWFsIHBsZWEgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gaXMgbm90IG1haW50YWluYWJsZSwgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgbGF3cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXdzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IEFwYXR1cml1cywKICAgICAgICAgICAgICAgICAgICB0aGVuLCBoYXMgaW5zdGl0dXRlZCBzdWl0IGFnYWluc3QgbWUgY29udHJhcnkgdG8gdGhlc2UgbGF3cyBhbmQgdGhhdCBoaXMgY2hhcmdlcwogICAgICAgICAgICAgICAgICAgIGFyZSBmYWxzZSwgSSBzaGFsbCBzaG93IHlvdSBieSBtYW55IHByb29mcy4gSSwgbWVuIG9mIHRoZSBqdXJ5LCBoYXZlIGJ5IG5vdyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZm9yIGEgbG9uZyB0aW1lIGVuZ2FnZWQgaW4gZm9yZWlnbiB0cmFkZSwgYW5kIHVwIHRvIGEgY2VydGFpbiB0aW1lIHJpc2tlZCB0aGUKICAgICAgICAgICAgICAgICAgICBzZWEgaW4gbXkgb3duIHBlcnNvbjsgaXQgaXMgbm90IHF1aXRlIHNldmVuIHllYXJzIHNpbmNlIEkgZ2F2ZSB1cCB2b3lhZ2luZywgYW5kLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBhIG1vZGVyYXRlIGNhcGl0YWwsIEkgdHJ5IHRvIHB1dCBpdCB0byB3b3JrIGJ5IG1ha2luZyBsb2FucyBvbiBhZHZlbnR1cmVzCiAgICAgICAgICAgICAgICAgICAgb3ZlcnNlYXMuIDwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIEkgaGF2ZSB2aXNpdGVkIG1hbnkgcGxhY2VzIGFuZAogICAgICAgICAgICAgICAgICAgIHNwZW5kIG15IHRpbWUgaW4geW91ciBleGNoYW5nZSwgSSBrbm93IG1vc3Qgb2YgdGhvc2Ugd2hvIGFyZSBzZWFmYXJlcnMsIGFuZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+IEkgYW0gb24KICAgICAgICAgICAgICAgICAgICBpbnRpbWF0ZSB0ZXJtcyB0aHJvdWdoIGhhdmluZyBteXNlbGYgc3BlbnQgbXVjaCB0aW1lIHRoZXJlLiBNeSBwb3NpdGlvbiwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB3YXMgc3VjaCBhcyBJIGhhdmUgZGVzY3JpYmVkLCB3aGVuIHRoaXMgZmVsbG93IHB1dCBpbnRvIG91ciBwb3J0IHdpdGggYQogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jb3VudHJ5bWFuIG9mIGhpcywgbmFtZWQgUGFybWVubywgYSBCeXphbnRpbmUgYnkgYmlydGgsIHdobyB3YXMgYW4gZXhpbGUKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyBjb3VudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFpbnRpZmYgYW5kIFBhcm1lbm8KICAgICAgICAgICAgICAgICAgICBjYW1lIHVwIHRvIG1lIG9uIHRoZSBleGNoYW5nZSBhbmQgc3Bva2UgYWJvdXQgbW9uZXkuIEl0IGhhcHBlbmVkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW50aWZmIG93ZWQgZm9ydHkgbWluYWUgb24gaGlzIHNoaXAsIGFuZCBoaXMgY3JlZGl0b3JzIHdlcmUgcHJlc3NpbmcgaGltIGhhcmQKICAgICAgICAgICAgICAgICAgICB3aXRoIGRlbWFuZHMgZm9yIHRoZWlyIG1vbmV5LCBhbmQgd2VyZSBhYm91dCB0byBib2FyZCB0aGUgc2hpcCBhbmQgdGFrZQogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgaXQsIGFzIGhpcyBub3RlIHdhcyBvdmVyZHVlLiBXaGlsZSBoZSB3YXMgaW4gdGhpcyBlbWJhcnJhc3NtZW50LAogICAgICAgICAgICAgICAgICAgIFBhcm1lbm8gYWdyZWVkIHRvIGdpdmUgaGltIHRlbiBtaW5hZSwgYW5kIHRoZSBwbGFpbnRpZmYgYXNrZWQgbWUgdG8gY29udHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSBtaW5hZSwgY2hhcmdpbmcgdGhhdCB0aGUgY3JlZGl0b3JzIGluIHRoZWlyIGVhZ2VybmVzcyB0byBzZWN1cmUgdGhlIHNoaXAKICAgICAgICAgICAgICAgICAgICBoYWQgc2xhbmRlcmVkIGhpbSBvbiB0aGUgZXhjaGFuZ2UsIHRoYXQgdGhleSBtaWdodCBzZWl6ZSB0aGUgc2hpcCBieSBwdXR0aW5nIGhpbQogICAgICAgICAgICAgICAgICAgIGluIGEgcG9zaXRpb24gd2hlcmUgaGUgY291bGQgbm90IHBheS4gPC90cmFuc2xhdGlvbj4="
translation['33.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkkKICAgICAgICAgICAgICAgICAgICBoYXBwZW5lZCB0byBoYXZlIG5vIHJlYWR5IG1vbmV5IGluIGhhbmQsIGJ1dCBiZWluZyBhY3F1YWludGVkIHdpdGggSGVyYWNsZWlkZXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhbmtlciwgSSBwZXJzdWFkZWQgaGltIHRvIGxlbmQgdGhlIG1vbmV5LCBhbmQgdG8gdGFrZSBtZSBhcyBzdXJldHkuIEJ1dAogICAgICAgICAgICAgICAgICAgIHdoZW4gbm93IHRoZSB0aGlydHkgbWluYWUgaGFkIGJlZW4gcHJvY3VyZWQsIFBhcm1lbm8gaGFwcGVuZWQgdG8gZmFsbCBvdXQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFpbnRpZmYuIEhvd2V2ZXIsIHNlZWluZyB0aGF0IGhlIGhhZCBhZ3JlZWQgdG8gZnVybmlzaCBoaW0gd2l0aCB0ZW4gbWluYWUKICAgICAgICAgICAgICAgICAgICBhbmQgaGFkIGFscmVhZHkgZ2l2ZW4gaGltIHRocmVlIG9mIHRoZW0sIGhlIHdhcyBjb21wZWxsZWQgb24gYWNjb3VudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSBoZSBoYWQgZ2l2ZW4gdG8gcGF5IHRoZSByZW1haW5kZXIgYXMgd2VsbC4gPC90cmFuc2xhdGlvbj4="
translation['33.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdCB3aXNoaW5nLCBob3dldmVyLCBmb3IgdGhlIHJlYXNvbiBnaXZlbiwgdG8gbWFrZSB0aGUgbG9hbiBpbiBoaXMgb3duIG5hbWUsCiAgICAgICAgICAgICAgICAgICAgaGUgYmFkZSBtZSB0byBhcnJhbmdlIGl0IHNvIHRoYXQgdGhpbmdzIHNob3VsZCBiZSBhcyBzYWZlIGFzIHBvc3NpYmxlIGZvciBoaW0uCiAgICAgICAgICAgICAgICAgICAgU28gSSB0b29rIG92ZXIgdGhlIHNldmVuIG1pbmFlIGZyb20gUGFybWVubywgYW5kIGhhdmluZyBoYWQgdHJhbnNmZXJyZWQgdG8KICAgICAgICAgICAgICAgICAgICBteXNlbGYgdGhlIG9ibGlnYXRpb24gZm9yIHRoZSB0aHJlZSwgd2hpY2ggdGhlIHBsYWludGlmZiBoYWQgYWxyZWFkeSByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGZyb20gaGltLCBjYXVzZWQgYSBiaWxsIG9mIHNhbGUgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIHNoaXAgYW5kIHRoZSBzbGF2ZXMgdW50aWwKICAgICAgICAgICAgICAgICAgICBzdWNoIHRpbWUgYXMgaGUgc2hvdWxkIHJlcGF5IG1lIHRoZSB0ZW4gbWluYWUsIHdoaWNoIGhlIGhhZCByZWNlaXZlZCB0aHJvdWdoIG1lLAogICAgICAgICAgICAgICAgICAgIGFuZCBhbHNvIHRoZSB0aGlydHkgZm9yIHdoaWNoIGhlIGhhZCBtYWRlIG1lIGhpcyBzdXJldHkgd2l0aCB0aGUgYmFua2VyLiBJbgogICAgICAgICAgICAgICAgICAgIHByb29mIHRoYXQgbXkgd29yZHMgYXJlIHRydWUsIGhlYXIgdGhlIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGlzIHdheSwKICAgICAgICAgICAgICAgICAgICB0aGVuLCBBcGF0dXJpdXMgaGVyZSBnb3QgcmlkIG9mIGhpcyBjcmVkaXRvcnMuIE5vdCBsb25nIGFmdGVyIHRoaXMsIHRoZSBiYW5rCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGZhaWxlZCwgYW5kIEhlcmFjbGVpZGVzIGZvciBhIHRpbWUgaGF2aW5nIGdvbmUgaW50byBoaWRpbmcsIHRoZSBwbGFpbnRpZmYKICAgICAgICAgICAgICAgICAgICBzY2hlbWVkIHRvIHNlbmQgdGhlIHNsYXZlcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIHRvIHJlbW92ZSB0aGUgc2hpcCBmcm9tIHRoZSBoYXJib3IuIFRoaXMgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGNhdXNlIG9mIG15IGZpcnN0IHF1YXJyZWwgd2l0aCBoaW0uIEZvciBQYXJtZW5vLCBsZWFybmluZyBvZiB0aGUgZmFjdCwgbGFpZAogICAgICAgICAgICAgICAgICAgIGhhbmRzIG9uIHRoZSBzbGF2ZXMgYXMgdGhleSB3ZXJlIGJlaW5nIHRha2VuIGF3YXksIGFuZCBwcmV2ZW50ZWQgdGhlIHNhaWxpbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcDsgdGhlbiBoZSBzZW50IGZvciBtZSwgYW5kIHRvbGQgbWUgb2YgdGhlIGFmZmFpci4gPC90cmFuc2xhdGlvbj4="
translation['33.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgaGVhcmQgaGltLCB0aGlua2luZyB0aGlzIGZlbGxvdyBhIG1vc3QgaW1waW91cyB3cmV0Y2gKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG9mIGhpcyBhdHRlbXB0LCBJIHNldCBhYm91dCBjb25zaWRlcmluZyBob3cgSSBtaWdodCBteXNlbGYgZ2V0IGZyZWUgZnJvbQogICAgICAgICAgICAgICAgICAgIG15IGd1YXJhbnR5IHRvIHRoZSBiYW5rLCBhbmQgaG93IHRoZSBmb3JlaWduZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvcmVpZ25lciBpcywgb2YgY291cnNlLCBQYXJtZW5vLjwvbm90ZT4gbWlnaHQgYXZvaWQgdGhlIGxvc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgaGUgaGFkIGxlbnQgdGhpcyBmZWxsb3cgdGhyb3VnaCBtZS4gQWZ0ZXIgc3RhdGlvbmluZyBtZW4gdG8gZ3VhcmQgdGhlIHNoaXAKICAgICAgICAgICAgICAgICAgICBJIHRvbGQgdGhlIHdob2xlIHN0b3J5IHRvIHRoZSBzdXJldGllcyBvZiB0aGUgYmFuayBhbmQgdHVybmVkIHRoZSBzZWN1cml0eSBvdmVyCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlbSwgdGVsbGluZyB0aGVtIHRoYXQgdGhlIGZvcmVpZ25lciBoYWQgYSBsaWVuIG9mIHRlbiBtaW5hZSBvbiB0aGUgc2hpcC4KICAgICAgICAgICAgICAgICAgICBIYXZpbmcgYXJyYW5nZWQgdGhpcywgSSBhdHRhY2hlZCB0aGUgc2xhdmVzLCBpbiBvcmRlciB0aGF0LCBpZiBhbnkgc2hvcnRhZ2UKICAgICAgICAgICAgICAgICAgICBvY2N1cnJlZCwgdGhlIGRlZmljaWVuY3kgbWlnaHQgYmUgbWFkZSB1cCBieSB0aGUgcHJvY2VlZHMgb2YgdGhlaXIgc2FsZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSwgd2hlbiBJIGZvdW5kIHRoYXQgQXBhdHVyaXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIGEgcmFzY2FsLCBJIHNldCBtYXR0ZXJzIHJpZ2h0IGluIG15IG93biBpbnRlcmVzdCBhbmQgaW4gdGhlIGludGVyZXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcmVpZ25lci4gQnV0IEFwYXR1cml1cywgYXMgdGhvdWdoIHRoZSB3cm9uZyB3YXMgb24gbXkgc2lkZSwgYW5kIG5vdCBvbiBoaXMsCiAgICAgICAgICAgICAgICAgICAgbWFkZSBjb21wbGFpbnQgdG8gbWUsIGFuZCBhc2tlZCBpZiBpdCB3ZXJlIG5vdCBlbm91Z2ggZm9yIG1lIHRvIGJlIHJlbGVhc2VkIGZyb20KICAgICAgICAgICAgICAgICAgICBteSBndWFyYW50eSB0byB0aGUgYmFuaywgd2l0aG91dCBhbHNvIGF0dGFjaGluZyB0aGUgc2hpcCBhbmQgdGhlIHNsYXZlcyB0bwogICAgICAgICAgICAgICAgICAgIHNlY3VyZSBoaXMgbW9uZXkgZm9yIFBhcm1lbm8sIGFuZCB0aHVzIG1ha2luZyBhbiBlbmVteSBvZiBoaW1zZWxmIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyZXN0IG9mIG9uZSB3aG8gd2FzIGFuIGV4aWxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['33.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JIHJlcGxpZWQKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGVuIGEgbWFuIGhhZCBwdXQgaGlzIHRydXN0IGluIG1lLCBJIHdhcyBhbGwgdGhlIGxlc3MgaW5jbGluZWQgdG8gbGVhdmUKICAgICAgICAgICAgICAgICAgICBoaW0gaW4gdGhlIGx1cmNoLCBiZWNhdXNlLCB3aGlsZSBoZSB3YXMgYW4gZXhpbGUgYW5kIGluIG1pc2ZvcnR1bmUsIGhlIHdhcyBiZWluZwogICAgICAgICAgICAgICAgICAgIHdyb25nZWQgYnkgdGhlIHBsYWludGlmZjsgYW5kIGFmdGVyIEkgaGFkIGRvbmUgZXZlcnl0aGluZyBwb3NzaWJsZSwgYW5kIGhhZAogICAgICAgICAgICAgICAgICAgIGluY3VycmVkIHRoZSB1dG1vc3QgZW5taXR5IG9uIHRoZSBwYXJ0IG9mIHRoaXMgZmVsbG93LCBJIHdpdGggZGlmZmljdWx0eSBzZWN1cmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5LCB0aGUgc2hpcCBiZWluZyBzb2xkIGZvciBmb3J0eSBtaW5hZSwgdGhlIHByZWNpc2UgYW1vdW50IGZvciB3aGljaCBzaGUKICAgICAgICAgICAgICAgICAgICB3YXMgbW9ydGdhZ2VkLiBUaGUgdGhpcnR5IG1pbmFlIHRoZW4gaGF2aW5nIGJlZW4gcGFpZCBiYWNrIHRvIHRoZSBiYW5rLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVuIG1pbmFlIHRvIFBhcm1lbm8sIGluIHRoZSBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3Nlcywgd2UgY2FuY2VsbGVkIHRoZSBib25kCiAgICAgICAgICAgICAgICAgICAgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHRoZSBtb25leSBoYWQgYmVlbiBsZW50LCBhbmQgbXV0dWFsbHkgcmVsZWFzZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzY2hhcmdlZCBvbmUgYW5vdGhlciBmcm9tIG91ciBlbmdhZ2VtZW50cyBzbyB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBtb3JlIHRvIGRvIHdpdGggbWUsIG5vciBJIHdpdGggaGltLiBJbiBwcm9vZiB0aGF0IG15IHdvcmRzIGFyZSB0cnVlLCBoZWFyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2luY2UgdGhlbiBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBoYWQgbm8gYnVzaW5lc3MgdHJhbnNhY3Rpb24gd2l0aCB0aGUgZmVsbG93LCB3aGV0aGVyIGdyZWF0IG9yIHNtYWxsLCBidXQKICAgICAgICAgICAgICAgICAgICBQYXJtZW5vIHN1ZWQgaGltIGZvciBkYW1hZ2VzIGZvciB0aGUgYmxvd3Mgd2hpY2ggaGUgcmVjZWl2ZWQgZnJvbSBoaW0gd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGxhaWQgaGFuZHMgb24gdGhlIHNsYXZlcyBhcyB0aGV5IHdlcmUgYmVpbmcgY2FycmllZCBvZmYsIGFuZCBiZWNhdXNlIGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkIGJ5IGhpbSBmcm9tIG1ha2luZyB0aGUgdm95YWdlIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPi4gV2hlbiB0aGUgYWN0aW9uIGhhZCBiZWVuIGluc3RpdHV0ZWQsIFBhcm1lbm8gdGVuZGVyZWQKICAgICAgICAgICAgICAgICAgICBhbiBvYXRoIHRvIEFwYXR1cml1cyByZWdhcmRpbmcgc29tZSBvZiBoaXMgY2hhcmdlcywgYW5kIGhlIGFjY2VwdGVkIGl0LCBhbmQKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVybW9yZSBtYWRlIGEgZGVwb3NpdCB0byBiZSBmb3JmZWl0ZWQgaWYgaGUgZGlkIG5vdCBzd2VhciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgb2F0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gcHJvb2YgdGhhdCBteSB3b3JkcyBhcmUgdHJ1ZSwgdGFrZQogICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2aW5nIGFjY2VwdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGgsIHNpbmNlIGhlIHdhcyBhd2FyZSB0aGF0IG1hbnkgd291bGQga25vdyB0aGF0IGhlIGhhZCBwZXJqdXJlZCBoaW1zZWxmLAogICAgICAgICAgICAgICAgICAgIGhlIGRpZCBub3QgcHJlc2VudCBoaW1zZWxmIGZvciB0aGUgc3dlYXJpbmcsIGJ1dCwgYXMgdGhvdWdoIGhlIGNvdWxkIGdldCBmcmVlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGggYnkgYW4gYWN0aW9uLCBoZSBzdW1tb25lZCBQYXJtZW5vIGludG8gY291cnQuIFdoZW4gYm90aCBhY3Rpb25zIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gaW5zdGl0dXRlZCwgb24gdGhlIGFkdmljZSBvZiBwZXJzb25zIHByZXNlbnQgdGhleSBwcm9jZWVkZWQgdG8gYW4KICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdGlvbiwgYW5kIGFmdGVyIGRyYXdpbmcgdXAgYW4gYWdyZWVtZW50IHRoZXkgc3VibWl0dGVkIHRoZSBtYXR0ZXIgdG8gb25lCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIGFyYml0cmF0b3IsIFBob2NyaXR1cywgYSBmZWxsb3ctY291bnRyeS1tYW4gb2YgdGhlaXJzOyBhbmQgZWFjaCBvbmUKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgb25lIG1hbiB0byBzaXQgd2l0aCBQaG9jcml0dXMsIEFwYXR1cml1cyBjaG9vc2luZyBBcmlzdG9jbGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE9lYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBPZW5lw69zLjwvbm90ZT4gYW5kIFBhcm1lbm8gY2hvb3NpbmcgbWUuIDwvdHJhbnNsYXRpb24+"
translation['33.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGFncmVlZCBpbiB0aGUgYXJ0aWNsZXMgdGhhdCwgaWYgd2UgdGhyZWUgd2VyZSBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBtaW5kLCBvdXIgZGVjaXNpb24gc2hvdWxkIGJlIGJpbmRpbmcgb24gdGhlbSwgYnV0LCBpZiBub3QsIHRoZW4gdGhleSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byBhYmlkZSBieSB3aGF0IHRoZSB0d28gc2hvdWxkIGRldGVybWluZS4gSGF2aW5nIG1hZGUgdGhpcyBhZ3JlZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcHBvaW50ZWQgc3VyZXRpZXMgZm9yIG9uZSBhbm90aGVyIHRvIGd1YXJhbnRlZSBpdHMgZnVsZmlsbG1lbnQuIEFwYXR1cml1cwogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBBcmlzdG9jbGVzLCBhbmQgUGFybWVubyBBcmNoaXBwdXMgb2YgTXlycmhpbnVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGRlbWUgb2YgdGhlIHRyaWJlIFBhbmRpb25pcy48L25vdGU+IEF0IHRoZSBvdXRzZXQgdGhleQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRlZCB0aGVpciBhZ3JlZW1lbnQgd2l0aCBQaG9jcml0dXMsIGJ1dCB1cG9uIGhpcyBiaWRkaW5nIHRoZW0gdG8gZGVwb3NpdAogICAgICAgICAgICAgICAgICAgIGl0IHdpdGggc29tZW9uZSBlbHNlLCB0aGV5IGRlcG9zaXRlZCBpdCB3aXRoIEFyaXN0b2NsZXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHByb29mIHRoYXQgbXkgd29yZHMgYXJlIHRydWUsIGhlYXIgdGhlIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnRzIHdlcmUgZGVwb3NpdGVkIHdpdGggQXJpc3RvY2xlcywgYW5kIHRoYXQgdGhlIGFyYml0cmF0aW9uIHdhcyBsZWZ0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBQaG9jcml0dXMsIEFyaXN0b2NsZXMgYW5kIG15c2VsZiwgaGFzIGJlZW4gdGVzdGlmaWVkIHRvIHlvdSBieSB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICB3aG8ga25vdyB0aGUgZmFjdHMuIEFuZCBub3csIG1lbiBvZiB0aGUganVyeSwgSSBiZWcgb2YgeW91IHRvIGhlYXIgZnJvbSBtZSB3aGF0CiAgICAgICAgICAgICAgICAgICAgaGFwcGVuZWQgYWZ0ZXIgdGhpczsgZm9yIGZyb20gdGhpcyBpdCB3aWxsIGJlIGNsZWFyIHRvIHlvdSB0aGF0IHRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgQXBhdHVyaXVzIGlzIG1ha2luZyBhIGNsYWltIHVwb24gbWUgd2hpY2ggaXMgYmFzZWxlc3MgYW5kIG1hbGljaW91cy4gRm9yIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBzYXcgdGhhdCBQaG9jcml0dXMgYW5kIEkgd2VyZSBvZiBvbmUgbWluZCwgYW5kIHJlYWxpemVkIHRoYXQgd2Ugc2hvdWxkIGdpdmUKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgYWdhaW5zdCBoaW0sIHdpc2hpbmcgdG8gYnJlYWsgZG93biB0aGUgYXJiaXRyYXRpb24sIGhlIHNvdWdodCwgaW4KICAgICAgICAgICAgICAgICAgICBjb2xsdXNpb24gd2l0aCB0aGUgbWFuIHdobyBoZWxkIHRoZW0sIHRvIGRlc3Ryb3kgdGhlIGFydGljbGVzIG9mIGFncmVlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGUgcHJvY2VlZGVkIHRvIGNvbnRlbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIEFyaXN0b2NsZXMgd2FzIGhpcyBhcmJpdHJhdG9yLCBhbmQgZGVjbGFyZWQgdGhhdCBQaG9jcml0dXMgYW5kIEkgd2VyZSBlbXBvd2VyZWQKICAgICAgICAgICAgICAgICAgICB0byBkbyBub3RoaW5nIGVsc2UgdGhhbiBzZWVrIHRvIGJyaW5nIGFib3V0IGEgcmVjb25jaWxpYXRpb24uIEFuZ2VyZWQgYXQgdGhpcwogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCwgUGFybWVubyBkZW1hbmRlZCBvZiBBcmlzdG9jbGVzIHRoYXQgaGUgcHJvZHVjZSB0aGUgYWdyZWVtZW50LCBhZGRpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGlmIHRoZXJlIGhhZCBiZWVuIGFueSBjcmltaW5hbCBtZWRkbGluZyB3aXRoIHRoZSBwYXBlcnMsIHByb29mIG9mIHRoZSBmYWN0CiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IGJlIGZhciB0byBzZWVrLCBmb3IgaGlzIG93biBzbGF2ZSBoYWQgd3JpdHRlbiB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['33.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzdG9jbGVzIHByb21pc2VkIHRoYXQgaGUgd291bGQgcHJvZHVjZSB0aGUgYXJ0aWNsZXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIHVwIHRvIHRoaXMgZGF5IGhhcyBub3QgYnJvdWdodCB0aGVtIHRvIGxpZ2h0LiBIZSBkaWQgbWVldCB1cyBvbiB0aGUgYXBwb2ludGVkCiAgICAgICAgICAgICAgICAgICAgZGF5IGF0IHRoZSBIZXBoYWVzdGV1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHRlbXBsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBIZXBoYWVzdHVzOyBwZXJoYXBzIHRoZSB3ZWxsLXByZXNlcnZlZCBEb3JpYyBzdHJ1Y3R1cmUgY29tbW9ubHkgY2FsbGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaGVzZXVtLjwvbm90ZT4gYnV0IG1hZGUgdGhlIGV4Y3VzZSB0aGF0IGhpcyBzbGF2ZSB3aGlsZSB3YWl0aW5nIGZvciBoaW0gaGFkCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuIGFzbGVlcCBhbmQgbG9zdCB0aGUgZG9jdW1lbnQuIFRoZSBtYW4gd2hvIGNvbmNvY3RlZCB0aGlzIHBsb3Qgd2FzCiAgICAgICAgICAgICAgICAgICAgRXJ5eGlhcywgdGhlIHBoeXNpY2lhbiBmcm9tIFBlaXJhZXVzLCBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgQXJpc3RvY2xlcywgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIG91dCBvZiBlbm1pdHkgdG93YXJkIG1lIGhhcyBhbHNvIGdvdCB1cCB0aGlzIGFjdGlvbiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIG1lLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgaW4gcHJvb2YgdGhhdCBBcmlzdG9jbGVzIHByZXRlbmRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIGxvc3QgdGhlIGRvY3VtZW50LCBoZWFyIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcyB0aGUKICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdGlvbiB3YXMgZG9uZSBhd2F5IHdpdGgsIHRoZSBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQgaGF2aW5nIGRpc2FwcGVhcmVkIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBhdXRob3JpdHkgb2YgdGhlIGFyYml0cmF0b3JzIGJlaW5nIHF1ZXN0aW9uZWQuIFRoZXkgZGlkIGVuZGVhdm9yIHRvIGRyYXcgdXAKICAgICAgICAgICAgICAgICAgICBuZXcgYXJ0aWNsZXMgYWJvdXQgdGhlc2UgbWF0dGVycywgYnV0IGNvdWxkIGNvbWUgdG8gbm8gYWdyZWVtZW50LCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgaW5zaXN0ZWQgb24gaGF2aW5nIEFyaXN0b2NsZXMsIGFuZCBQYXJtZW5vIHRoZSB0aHJlZSB0byB3aG9tIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGluc3RhbmNlIHRoZSBhcmJpdHJhdGlvbiBoYWQgYmVlbiByZWZlcnJlZC4gTmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBubyBuZXcKICAgICAgICAgICAgICAgICAgICBhcnRpY2xlcyBoYWQgYmVlbiBkcmF3biwgYW5kIHRob3NlIG9yaWdpbmFsbHkgZHJhd24gaGFkIGJlZW4gbWFkZSBhd2F5IHdpdGgsIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gaGFkIG1hZGUgYXdheSB3aXRoIHRoZW0gY2FtZSB0byBzdWNoIGEgcGl0Y2ggb2Ygc2hhbWVsZXNzbmVzcyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgaGUgd291bGQgaW4gaGlzIG93biBzaW5nbGUgcGVyc29uIHByb25vdW5jZSB0aGUgYXdhcmQuIFBhcm1lbm8gY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRvIGJlIHByZXNlbnQsIGFuZCBmb3JiYWRlIEFyaXN0b2NsZXMgdG8gcHJvbm91bmNlIGFuIGF3YXJkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBoaW0sIHdpdGhvdXQgaGlzIGNvLWFyYml0cmF0b3JzLCBpbiBkZWZpYW5jZSBvZiB0aGUgYXJ0aWNsZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IZWFyIHRoZSBkZXBvc2l0aW9uIG9mIHRob3NlIGluCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgcHJlc2VuY2UgaGUgdGh1cyBmb3JiYWRlIGhpbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGJlZmVsbCBQYXJtZW5vLCBtZW4gb2YgdGhlIGp1cnksIGEgZGlyZSBtaXNmb3J0dW5lLiBIZSB3YXMgZHdlbGxpbmcgaW4KICAgICAgICAgICAgICAgICAgICAgICAgT3BocnluaXVtPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgY2l0eSBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjMzMSI+VHJvYWQ8L3BsYWNlTmFtZT4uPC9ub3RlPiBiZWNhdXNlIG9mIGhpcyBiZWluZyBhbgogICAgICAgICAgICAgICAgICAgIGV4aWxlIGZyb20gaG9tZSwgd2hlbiB0aGUgZWFydGhxdWFrZSBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjMzMSI+VHJvYWQ8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzNDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBvY2N1cnJlZDsgYW5kIGluIHRoZSBjb2xsYXBzZSBvZiBoaXMgaG91c2UgaGlzIHdpZmUKICAgICAgICAgICAgICAgICAgICBhbmQgY2hpbGRyZW4gcGVyaXNoZWQuIEltbWVkaWF0ZWx5IG9uIGhlYXJpbmcgb2YgdGhlIGRpc2FzdGVyIGhlIGRlcGFydGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgc2hpcCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gQXJpc3RvY2xlcywKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCB0aGUgbWFuIGhhZCBhZGp1cmVkIGhpbSBpbiB0aGUgcHJlc2VuY2Ugb2Ygd2l0bmVzc2VzIG5vdCB0byBwcm9ub3VuY2UKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgYWdhaW5zdCBoaW0gd2l0aG91dCBoaXMgY28tYXJiaXRyYXRvcnMsIHdoZW4gUGFybWVubyBoYWQgbGVmdCB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IGJlY2F1c2Ugb2YgdGhlIGRpc2FzdGVyLCBwcm9ub3VuY2VkIGFuIGF3YXJkIGFnYWluc3QgaGltIGJ5IGRlZmF1bHQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5QaG9jcml0dXMgYW5kIEksIHdobyB3ZXJlIG5hbWVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgYXJ0aWNsZXMsIHJlZnVzZWQgdG8gcGFydGljaXBhdGUgaW4gdGhlIGF3YXJkLCBiZWNhdXNlIHRoZSBwbGFpbnRpZmYgZGVuaWVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpbiBoaXMgdmlldyB3ZSB3ZXJlIGFyYml0cmF0b3JzOyBidXQgQXJpc3RvY2xlcywgd2hvc2UgYXV0aG9yaXR5IHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBvbmx5IGRpc3B1dGVkLCBidXQgd2hvIGhhZCBleHByZXNzbHkgYmVlbiBmb3JiaWRkZW4gdG8gYWN0LCBuZXZlcnRoZWxlc3MgbWFkZQogICAgICAgICAgICAgICAgICAgIHRoZSBkZWNsYXJhdGlvbuKAlGEgdGhpbmcgd2hpY2ggbm90IG9uZSBvZiB5b3UgYW5kIG5vdCBvbmUgb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIEF0aGVuaWFucyBjb3VsZCBoYXZlIGJlZW4gaW5kdWNlZCB0byBkby4gPC90cmFuc2xhdGlvbj4="
translation['33.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIGFsbCB0aGF0IEFwYXR1cml1cyBhbmQgdGhlIGFyYml0cmF0b3IKICAgICAgICAgICAgICAgICAgICBkaWQgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBkaXNhcHBlYXJhbmNlIG9mIHRoZSBhcnRpY2xlcyBhbmQgdGhlIHByb25vdW5jaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGF3YXJkLCB0aGUgbWFuIHdyb25nZWQsIGlmIGV2ZXIgaGUgY29tZXMgc2FmZWx5IGJhY2sgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aWxsIG9idGFpbiBzYXRpc2ZhY3Rpb24gZnJvbSB0aGVtLgogICAgICAgICAgICAgICAgICAgIEJ1dCBzaW5jZSBBcGF0dXJpdXMgaGFzIGNvbWUgdG8gc3VjaCBhIHBpdGNoIG9mIHNoYW1lbGVzc25lc3MgYXMgdG8gYnJpbmcgc3VpdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUgYWxzbywgY2hhcmdpbmcgdGhhdCBJIHVuZGVydG9vayB0byBwYXkgYW55IHN1bSB0aGF0IG1pZ2h0IGJlIGF3YXJkZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IFBhcm1lbm8sIGFuZCBzaW5jZSBoZSBkZWNsYXJlcyB0aGF0IG15IG5hbWUgd2FzIGVudGVyZWQgaW4gdGhlIGFydGljbGVzCiAgICAgICAgICAgICAgICAgICAgYXMgc3VyZXR5LCBJIHNoYWxsIGZyZWUgbXlzZWxmIGZyb20gc3VjaCBhIGNoYXJnZSBpbiB0aGUgcHJvcGVyIHdheTsgSSBzaGFsbAogICAgICAgICAgICAgICAgICAgIGZpcnN0IGJyaW5nIGZvcndhcmQgd2l0bmVzc2VzIHRvIHByb3ZlIHRoYXQgaXQgd2FzIG5vdCBJIHdobyBiZWNhbWUgc3VyZXR5IGZvcgogICAgICAgICAgICAgICAgICAgIFBhcm1lbm8sIGJ1dCBBcmNoaXBwdXMgb2YgTXlycmhpbnVzOyBhbmQgSSBzaGFsbCB0aGVuIHVuZGVydGFrZSwgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHRvIG1ha2UgbXkgZGVmZW5jZSBieSBjaXJjdW1zdGFudGlhbCBwcm9vZnMuIDwvdHJhbnNsYXRpb24+"
translation['33.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCBJIGhvbGQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB0aW1lIGlzIGEgd2l0bmVzcyBmb3IgbWUgdG8gcHJvdmUgdGhhdCB0aGUgY2hhcmdlIGlzIGdyb3VuZGxlc3MuIEZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBhZ3JlZW1lbnQgdG8gYXJiaXRyYXRlIG1hZGUgYnkgdGhpcyBmZWxsb3cgYW5kIFBhcm1lbm8gYW5kIHRoZSBhd2FyZCBvZgogICAgICAgICAgICAgICAgICAgIEFyaXN0b2NsZXMgdG9vayBwbGFjZSB0d28geWVhcnMgYWdvOyBidXQgbWVyY2hhbnRzIG1heSBicmluZyBhY3Rpb24gZXZlcnkgbW9udGgKICAgICAgICAgICAgICAgICAgICBmcm9tIEJvw6tkcm9taW9uIHRvIE11bmljaGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Um91Z2hseSwKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBTZXB0ZW1iZXIgdG8gQXByaWwsIHRoZSBwZXJpb2Qgd2hlbiB0aGUgc2VhcyB3ZXJlIGNsb3NlZCwgYW5kIHRoZSBzaGlwcwogICAgICAgICAgICAgICAgICAgICAgICBsYWlkIHVwIGluIHBvcnQuPC9ub3RlPiBpbiBvcmRlciB0aGF0IHRoZXkgbWF5IG9idGFpbiB0aGVpciByaWdodHMgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGRlbGF5IGFuZCBwdXQgdG8gc2VhLiBTbywgaWYgSSB3YXMgaW4gdHJ1dGggYSBzdXJldHkgZm9yIFBhcm1lbm8sIHdoeSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgQXBhdHVyaXVzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBhd2FyZCBwcm9jZWVkIHRvIGNvbGxlY3QgdGhlIHN1bSBndWFyYW50ZWVkPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3Qgb3BlbiB0byBoaW0gdG8gc2F5IHRoYXQgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBmcmllbmRzaGlwIGZvciBtZSBoZSB3YXMgbG90aCB0byBpbmN1ciBteSBlbm1pdHksIGZvciBoZSBoYWQgaGltc2VsZiBpbgogICAgICAgICAgICAgICAgICAgIHV0dGVyIHVuZnJpZW5kbGluZXNzIGJlZW4gZm9yY2VkIGJ5IG1lIHRvIHBheSB0aGUgb25lIHRob3VzYW5kIGRyYWNobWFlIGR1ZSB0bwogICAgICAgICAgICAgICAgICAgIFBhcm1lbm87IGFuZCB3aGVuIGhlIHdhcyB0cnlpbmcgdG8gZ2V0IGhpcyBzaGlwIG91dCBvZiB0aGUgcG9ydCBpbiBoaXMgcGxvdCB0bwogICAgICAgICAgICAgICAgICAgIHNuZWFrIGF3YXkgYW5kIHRvIGRlZnJhdWQgdGhlIGJhbmsgb2Ygd2hhdCB3YXMgZHVlLCBpdCB3YXMgSSB3aG8gcHJldmVudGVkIGhpbS4KICAgICAgICAgICAgICAgICAgICBTbywgaWYgSSBoYWQgYmVjb21lIGEgc3VyZXR5IGZvciBQYXJtZW5vLCBoZSB3b3VsZCBub3QgaGF2ZSB3YWl0ZWQgdW50aWwgdHdvCiAgICAgICAgICAgICAgICAgICAgeWVhcnMgYWZ0ZXJ3YXJkIHRvIGV4YWN0IHRoZSBzdW0gZ3VhcmFudGVlZCwgYnV0IHdvdWxkIGhhdmUgcHJvY2VlZGVkIHRvIGRvIHNvCiAgICAgICAgICAgICAgICAgICAgYXQgb25jZS4gPC90cmFuc2xhdGlvbj4="
translation['33.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWgsCiAgICAgICAgICAgICAgICAgICAgYnV0IGhlIHdhcyB3ZWxsIHByb3ZpZGVkIHdpdGggZnVuZHMsIHNvIHRoYXQgaXQgd2FzIG9wZW4gdG8gaGltIHRvIHByb2NlZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lIGxhdGVyIG9uLCBhbmQgYXQgdGhlIG1vbWVudCBoZSBoYWQgbm8gdGltZSwgYXMgaGUgd2FzIGFib3V0IHRvIHB1dCB0bwogICAgICAgICAgICAgICAgICAgIHNlYSEgT24gdGhlIGNvbnRyYXJ5LCBoZSB3YXMgaW4gc3VjaCBzdHJhaXRzIHRoYXQgaGUgaGFkIGxvc3QgYWxsIGhpcyBlZmZlY3RzLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgc29sZCBoaXMgc2hpcC4gQW5kLCBpZiB0aGVyZSByZWFsbHkgaGFkIGJlZW4gYW55dGhpbmcgdG8gcHJldmVudCBoaXMKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBicmluZ2luZyBzdWl0IGFnYWluc3QgbWUsIHdoeSwgd2hlbiBoZSB3YXMgaW4gdG93biBsYXN0IHllYXIsIGRpZCBoZQogICAgICAgICAgICAgICAgICAgIG5vdCBkYXJlLCBJIHdpbGwgbm90IHNheSB0byBicmluZyBzdWl0LCBidXQgZXZlbiB0byBtYWtlIGEgZGVtYW5kPyBJdCB3YXMgc3VyZWx5CiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3BlciBjb3Vyc2UgZm9yIGhpbSwgaWYganVkZ2VtZW50IGhhZCBiZWVuIGdpdmVuIGFnYWluc3QgUGFybWVubyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBmYXZvdXIsIGFuZCBpZiBJIHdhcyB0aGUgbGF0dGVyJ3Mgc3VyZXR5LCB0byBjb21lIHRvIG1lIGhpbXNlbGYgYWNjb21wYW5pZWQgYnkKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIGFuZCB0byBkZW1hbmQgdGhlIGFtb3VudCBndWFyYW50ZWVkLCBpZiBub3QgdGhlIHllYXIgYmVmb3JlIGxhc3QsIGF0CiAgICAgICAgICAgICAgICAgICAgYW55IHJhdGUgaW4gdGhlIHllYXIganVzdCBwYXN0OyBhbmQgdGhlbiwgaWYgSSBwcm9mZmVyZWQgcGF5bWVudCwgdG8gdGFrZSBoaXMKICAgICAgICAgICAgICAgICAgICBtb25leSwgYW5kLCBpZiBJIGRpZCBub3QsIHRvIGJyaW5nIHN1aXQuIDwvdHJhbnNsYXRpb24+"
translation['33.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBpbiBjbGFpbXMgb2YgdGhpcyBzb3J0IGV2ZXJ5b25lIG1ha2VzIGRlbWFuZCBiZWZvcmUgaGUgYnJpbmdzIHN1aXQuIFdlbGwsIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgaXNuJ3QgYSBwZXJzb24gbGl2aW5nIHdobyB3aWxsIHRlc3RpZnkgdGhhdCBoZSB3YXMgcHJlc2VudCBlaXRoZXIgbGFzdCB5ZWFyIG9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHllYXIgYmVmb3JlLCB3aGVuIHRoaXMgbWFuIGVpdGhlciBpbnN0aXR1dGVkIHByb2NlZWRpbmdzIGFnYWluc3QgbWUgb3IgbWFkZQogICAgICAgICAgICAgICAgICAgIGFueSBtZW50aW9uIHRvIG1lIHdoYXRldmVyIG9mIHRoZSBjbGFpbXMgZm9yIHdoaWNoIGhlIGlzIG5vdyBzdWluZyBtZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBoZSB3YXMgaW4gdG93biBsYXN0IHllYXIgd2hlbiB0aGUgY291cnRzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBvcGVuLCBwbGVhc2UgdGFrZSB0aGUgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBwbGVhc2UKICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBsYXcgd2hpY2ggZGVjbGFyZXMgdGhhdCBndWFyYW50aWVzIHNoYWxsIGJlIGZvciBhIHllYXIgb25seS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhleSBiZWNvbWUgaW52YWxpZCwgaWYgbm90IHJlbmV3ZWQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVuZCBvZiBhIHllYXIuPC9ub3RlPiBJIGRvIG5vdCBsYXkgc3RyZXNzIG9uIHRoZSBsYXcgdG8gc2hvdyB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IHBheSB3aGF0IGlzIGR1ZSwgaWYgSSBhY3R1YWxseSBiZWNhbWUgYSBzdXJldHksIGJ1dCBJIGRlY2xhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgaXMgYSB3aXRuZXNzIHRoYXQgSSBkaWQgbm90IGJlY29tZSBvbmUsIGFuZCBzbyBpcyB0aGUgZmVsbG93IGhpbXNlbGY7CiAgICAgICAgICAgICAgICAgICAgZm9yIG90aGVyd2lzZSBoZSB3b3VsZCBoYXZlIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IG1lIHdpdGhpbiB0aGUgdGltZSBzcGVjaWZpZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IHRoaXMsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgYmUgYW5vdGhlciBwcm9vZiB0byB5b3UgdGhhdCBBcGF0dXJpdXMgaXMgbHlpbmcuIElmIEkgaGFkIGJlY29tZSBzdXJldHkgdG8gaGltCiAgICAgICAgICAgICAgICAgICAgZm9yIFBhcm1lbm8sIGl0IGlzIGluY29uY2VpdmFibGUgdGhhdCBJIHNob3VsZCBoYXZlIG1hZGUgdGhlIHBsYWludGlmZiBteSBlbmVteQogICAgICAgICAgICAgICAgICAgIGZvciBQYXJtZW5vJ3Mgc2FrZSwgdGFraW5nIGV2ZXJ5IGNhcmUgdGhhdCB0aGUgbGF0dGVyIHNob3VsZCBub3QgbG9zZSB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGxlbnQgdGhlIHBsYWludGlmZiB0aHJvdWdoIG1lLCBhbmQgeWV0IGhhdmUgYWxsb3dlZCBteXNlbGYgdG8gYmUgbGVmdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBsdXJjaCBieSBoaW0gYXMgaGlzIHN1cmV0eSB0byB0aGUgcGxhaW50aWZmLiBGb3Igd2hhdCBncm91bmQgaGFkIEkgdG8gaG9wZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgbGVuaWVuY3kgd291bGQgYmUgc2hvd24gbWUgYnkgdGhlIG1hbiB3aG9tIEkgaGFkIGNvbXBlbGxlZCB0byBkbyBqdXN0aWNlIHRvCiAgICAgICAgICAgICAgICAgICAgUGFybWVubz8gQW5kIHdoZW4gSSBoYWQgbWFkZSBoaW0gbXkgZW5lbXkgYnkgZXhhY3RpbmcgZnJvbSBoaW0gd2hhdCB3YXMKICAgICAgICAgICAgICAgICAgICBndWFyYW50ZWVkIHRvIHRoZSBiYW5rLCB3aGF0IHRyZWF0bWVudCBjb3VsZCBJIG15c2VsZiBoYXZlIGV4cGVjdGVkIHRvIHJlY2VpdmUKICAgICAgICAgICAgICAgICAgICBhdCBoaXMgaGFuZHM/IDwvdHJhbnNsYXRpb24+"
translation['33.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgd29ydGggd2hpbGUgYWxzbyBmb3IgeW91IHRvIGJlYXIgdGhpcyBpbiBtaW5kLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQsIGlmCiAgICAgICAgICAgICAgICAgICAgSSBoYWQgYmVlbiBzdXJldHksIEkgc2hvdWxkIG5ldmVyIGhhdmUgZGVuaWVkIGl0LiBGb3IgbXkgYXJndW1lbnQgd2FzIG11Y2gKICAgICAgICAgICAgICAgICAgICBzdHJvbmdlciwgaWYgSSBhZG1pdHRlZCB0aGUgZ3VhcmFudHkgYW5kIGFwcGVhbGVkIHRvIHRoZSBhZ3JlZW1lbnQgaW4gYWNjb3JkYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggd2hpY2ggdGhlIGFyYml0cmF0aW9uIHdhcyB0byBiZSBoZWxkLiBUaGF0IHRoZSBtYXR0ZXIgd2FzIHJlZmVycmVkIHRvIHRocmVlCiAgICAgICAgICAgICAgICAgICAgYXJiaXRyYXRvcnMgaGFzIGJlZW4gc2hvd24gYnkgdGVzdGltb255LiBXaGVuLCB0aGVuLCB0aGVyZSBoYWQgYmVlbiBubyBkZWNpc2lvbgogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSB0aHJlZSwgd2h5IGluIHRoZSB3b3JsZCBzaG91bGQgSSBoYXZlIGRlbmllZCB0aGUgZ3VhcmFudHk/IEZvciwgaWYKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgaGFkIG5vdCBiZWVuIGdpdmVuIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgYWdyZWVtZW50LCBuZWl0aGVyIHNob3VsZCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIG9wZW4gdG8gYWN0aW9uIGZvciBteSBndWFyYW50eS4gVGhlcmVmb3JlLCBtZW4gb2YgdGhlIGp1cnksIGlmIEkgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IGJlY29tZSBhIHN1cmV0eSwgSSBzaG91bGQgbm90IGhhdmUgZ2l2ZW4gdXAgYSBkZWZlbmNlIHdoaWNoIHdhcyBhdCBoYW5kLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYXZlIHByb2NlZWRlZCB0byBkZW55IHRoZSBmYWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['33.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIHRoZSBmb2xsb3dpbmcgZmFjdCBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIHRlc3RpZmllZCB0byB5b3UgYnkgd2l0bmVzc2VzLCB0aGF0LCBhZnRlciB0aGUgYXJ0aWNsZXMgb2YgYWdyZWVtZW50IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgbWFkZSBhd2F5IHdpdGggYnkgdGhlc2UgbWVuLCB0aGUgcGxhaW50aWZmIGFuZCBQYXJtZW5vIHNvdWdodCB0byBoYXZlIG5ldwogICAgICAgICAgICAgICAgICAgIGFydGljbGVzIGRyYXduIHVwLCB0aHVzIGFkbWl0dGluZyB0aGF0IHRoZWlyIGZvcm1lciBhZ3JlZW1lbnQgd2FzIHdpdGhvdXQgZm9yY2UuCiAgICAgICAgICAgICAgICAgICAgWWV0LCB3aGVuIHRoZXkgc291Z2h0IHRvIGhhdmUgb3RoZXIgYXJ0aWNsZXMgZHJhd24gaW4gcmVnYXJkIHRvIHRoZSBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyB0byBiZSBnaXZlbiwgc2luY2UgdGhlIGV4aXN0aW5nIG9uZXMgaGFkIGJlZW4gbG9zdCwgaG93IHdhcyBpdCBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIG90aGVyIGFydGljbGVzIHdlcmUgbm90IGRyYXduLCB0aGVyZSBjb3VsZCBiZSBlaXRoZXIgYXJiaXRyYXRpb24gb3IKICAgICAgICAgICAgICAgICAgICBndWFyYW50eT8gSXQgd2FzIHRoZSBmYWN0IHRoYXQgdGhleSBkaXNhZ3JlZWQgdXBvbiB0aGlzIHZlcnkgcG9pbnQgdGhhdAogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCB0aGVpciB3cml0aW5nIG5ldyBhcnRpY2xlcywgQXBhdHVyaXVzIGRlbWFuZGluZyB0aGF0IHRoZXJlIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIG9uZSBhcmJpdHJhdG9yLCBhbmQgUGFybWVubyB0aGF0IHRoZXJlIHNob3VsZCBiZSB0aHJlZS4gQnV0LCBzaW5jZSB0aGUgb3JpZ2luYWwKICAgICAgICAgICAgICAgICAgICBhcnRpY2xlcyB3ZXJlIG1hZGUgYXdheSB3aXRoLCBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggaGUgYWxsZWdlcyB0aGF0IEkgYmVjYW1lCiAgICAgICAgICAgICAgICAgICAgYSBzdXJldHksIGFuZCBvdGhlciBhcnRpY2xlcyB3ZXJlIG5vdCB3cml0dGVuLCB3aGF0IHJpZ2h0IGhhcyBoZSB0byBicmluZyBzdWl0CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSwgYWdhaW5zdCB3aG9tIGhlIGlzIGFibGUgdG8gcHJvZHVjZSBubyBhZ3JlZW1lbnQ/IDwvdHJhbnNsYXRpb24+"
translation['33.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlciwgaXQgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZWQgdG8geW91IGJ5IHdpdG5lc3NlcyB0aGF0IFBhcm1lbm8gZm9yYmFkZSBBcmlzdG9jbGVzIHRvIGdpdmUganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaW0gd2l0aG91dCB0aGUgY29uY3VycmVuY2Ugb2YgaGlzIGNvLWFyYml0cmF0b3JzLiBXaGVuLCB0aGVyZWZvcmUsIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgc2hvd24gdGhhdCB0aGUgc2FtZSBwZXJzb24gaGFzIG1hZGUgYXdheSB3aXRoIHRoZSBkb2N1bWVudCBpbiBhY2NvcmRhbmNlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgdGVybXMgb2Ygd2hpY2ggdGhlIGFyYml0cmF0aW9uIHdhcyB0byBiZSBtYWRlLCBhbmQgZGVjbGFyZXMgdGhhdCBoZSBoYXMgbWFkZQogICAgICAgICAgICAgICAgICAgIHRoZSBkZWNpc2lvbiB3aXRob3V0IGhpcyBjby1hcmJpdHJhdG9ycywgYW5kIGluIGRlZmlhbmNlIG9mIHRoZSBub3RpY2UKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkaW5nIGhpbSB0byBkbyBzbywgaG93IGNhbiB5b3Ugd2l0aCBhbnkgZmFpcm5lc3MgY3JlZGl0IHRoZSBmZWxsb3cgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uZGVtbiBtZT8gQ29uc2lkZXIgdGhpcywgbWVuIG9mIHRoZSBqdXJ5OiA8L3RyYW5zbGF0aW9uPg=="
translation['33.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5zdXBwb3NlIGl0IHdhcyBub3QgYWdhaW5zdCBtZSwgYnV0IGFnYWluc3QgUGFybWVubywgdGhhdCB0aGlzIG1hbiBBcGF0dXJpdXMKICAgICAgICAgICAgICAgICAgICB3ZXJlIG5vdyB0YWtpbmcgYWN0aW9uLCBzZWVraW5nIHRvIHJlY292ZXIgdGhlIHR3ZW50eSBtaW5hZSBpbiByZWxpYW5jZSB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudCBvZiBBcmlzdG9jbGVzOyBhbmQgdGhhdCBQYXJtZW5vIHdhcyBwcmVzZW50IGFuZCBtYWtpbmcgaGlzIGRlZmVuY2UsCiAgICAgICAgICAgICAgICAgICAgY2FsbGluZyB3aXRuZXNzZXMgdG8gcHJvdmUgdGhhdCBoZSBoYWQgdHVybmVkIHRoZSBtYXR0ZXIgb3ZlciB0byBBcmlzdG9jbGVzLCBub3QKICAgICAgICAgICAgICAgICAgICBhcyBhIHNpbmdsZSBhcmJpdHJhdG9yLCBidXQgYXMgb25lIG9mIHRocmVlOyA8L3RyYW5zbGF0aW9uPg=="
translation['33.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IGhlIGhhZCBmb3JiaWRkZW4gaGltIHRvIGFubm91bmNlIGEgZGVjaXNpb24gYWdhaW5zdCBoaW0gd2l0aG91dCBoaXMKICAgICAgICAgICAgICAgICAgICBjby1hcmJpdHJhdG9yczsgYW5kIHRoYXQsIGFmdGVyIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiBoYWQgcGVyaXNoZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZWFydGhxdWFrZSwgYW5kIGhlIGluIHRoZSBmYWNlIG9mIGEgZGlzYXN0ZXIgc28gYXBwYWxsaW5nIGhhZCBzYWlsZWQgZm9yIGhvbWUsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbiB3aG8gaGFkIG1hZGUgYXdheSB3aXRoIHRoZSBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQgYW5ub3VuY2VkIGEganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaW0gYnkgZGVmYXVsdCBpbiBoaXMgYWJzZW5jZSwgaXMgdGhlcmUgYSBzaW5nbGUgb25lIG9mIHlvdSB3aG8sIHdoZW4KICAgICAgICAgICAgICAgICAgICBQYXJtZW5vIGhhZCBicm91Z2h0IG91dCB0aGVzZSBmYWN0cyBpbiBoaXMgZGVmZW5jZSwgd291bGQgaGF2ZSBjb25zaWRlcmVkIGFuCiAgICAgICAgICAgICAgICAgICAgYXdhcmQgc28gdW5qdXN0bHkgbWFkZSB0byBiZSB2YWxpZD8gPC90cmFuc2xhdGlvbj4="
translation['33.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGlzOyBzdXBwb3NlIHRoYXQgbm90IGV2ZXJ5IHBvaW50IHdhcyB1bmRlciBkaXNwdXRlOyB0aGF0IHRoZXJlIHdlcmUgaW4KICAgICAgICAgICAgICAgICAgICBleGlzdGVuY2UgYXJ0aWNsZXMgb2YgYWdyZWVtZW50OyB0aGF0IEFyaXN0b2NsZXMgd2FzIGFkbWl0dGVkbHkgYW4gYXJiaXRyYXRvcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBzb2xlIGF1dGhvcml0eTsgdGhhdCBQYXJtZW5vIGhhZCBub3QgZm9yYmlkZGVuIGhpbSB0byBtYWtlIHRoZSBhd2FyZDsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgY2FsYW1pdHkgaGFkIGJlZmFsbGVuIHRoZSBtYW4gYmVmb3JlIHRoZSBhbm5vdW5jZW1lbnQgb2YgdGhlIGF3YXJkOwogICAgICAgICAgICAgICAgICAgIHdoYXQgYWR2ZXJzYXJ5IG9yIHdoYXQgYXJiaXRyYXRvciB3b3VsZCBoYXZlIGJlZW4gc28gY3J1ZWwgYXMgbm90IHRvIHBvc3Rwb25lCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2UgdW50aWwgdGhlIG1hbiByZXR1cm5lZCB0byB0aGUgY291bnRyeT8gVGhlbiwgaWYgUGFybWVubywgY29taW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcGxlYWQgYmVmb3JlIHlvdSwgc2hvdWxkIGJlIGp1ZGdlZCBpbiBldmVyeSBwb2ludCB0byBzcGVhayB3aXRoIG1vcmUganVzdGljZQogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhlIHBsYWludGlmZiwgaG93IGNhbiB5b3UganVzdGx5IGdpdmUganVkZ2VtZW50IGFnYWluc3QgbWUsIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVseSBubyBjb250cmFjdCB3aXRoIHRoaXMgbWFuPyA8L3RyYW5zbGF0aW9uPg=="
translation['33.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBJLCBvbiBteSBwYXJ0LCBoYXZlIG1hZGUgbXkgc3BlY2lhbAogICAgICAgICAgICAgICAgICAgIHBsZWEgd2l0aCBnb29kIHJpZ2h0LCBhbmQgdGhhdCBBcGF0dXJpdXMgaGFzIGxvZGdlZCBhZ2FpbnN0IG1lIGEgY2xhaW0gdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIC5iYXNlbGVzcywgYW5kIGluc3RpdHV0ZWQgYSBzdWl0IGNvbnRyYXJ5IHRvIGxhdywgaGFzLCBJIHRoaW5rLCBiZWVuIHNob3duIHRvCiAgICAgICAgICAgICAgICAgICAgeW91LCBtZW4gb2YgdGhlIGp1cnksIGJ5IG1hbnkgcHJvb2ZzLiBUaGUgbWFpbiBwb2ludCBpcyB0aGlzOiBBcGF0dXJpdXMgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIGF0dGVtcHQgdG8gc2F5IHRoYXQgaGUgaGFzIGFueSBhcnRpY2xlcyBzaG93aW5nIGFuIGFncmVlbWVudCBiZXR3ZWVuIHVzLgogICAgICAgICAgICAgICAgICAgIFdoZW4gaGUgZmFsc2VseSBzdGF0ZXMgdGhhdCBteSBuYW1lIHdhcyB3cml0dGVuIGluIGFzIHN1cmV0eSBpbiB0aGUgYWdyZWVtZW50CiAgICAgICAgICAgICAgICAgICAgbWFkZSB3aXRoIFBhcm1lbm8sIGRlbWFuZCBvZiBoaW0gdGhlIGFydGljbGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['33.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5NZWV0IGhpbSBvbiB0aGlzIGdyb3VuZDogdGhhdCBhbGwgbWVuLCB3aGVuIHRoZXkgbWFrZSBhZ3JlZW1lbnRzIHdpdGggb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciwgc2VhbCB0aGUgYXJ0aWNsZXMgYW5kIGRlcG9zaXQgdGhlbSB3aXRoIHBlcnNvbnMgd2hvbSB0aGV5IGNhbiB0cnVzdCwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcyB2ZXJ5IHB1cnBvc2UsIHRoYXQsIGlmIGEgZGlzcHV0ZSBhcmlzZXMgYmV0d2VlbiB0aGVtLCB0aGV5IG1heSByZWZlciB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBkb2N1bWVudCBhbmQgc28gc2V0dGxlIHRoZSBwb2ludCBhdCBpc3N1ZS4gQnV0IHdoZW4gYSBtYW4sIGFmdGVyIGRvaW5nIGF3YXkKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBzb3VyY2Ugb2YgYWNjdXJhdGUga25vd2xlZGdlLCB1bmRlcnRha2VzIHRvIGRlY2VpdmUgeW91IHdpdGggd29yZHMsIGhvdwogICAgICAgICAgICAgICAgICAgIGNhbiB5b3Ugd2l0aCBqdXN0aWNlIHB1dCBhbnkgY29uZmlkZW5jZSBpbiBoaW0/IDwvdHJhbnNsYXRpb24+"
translation['33.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcGVyaGFwcyBzb21lIHdpdG5lc3Mg77yIZm9yIHRoaXMgaXMgdGhlIGVhc2llc3QgY291cnNlIGZvciB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGNob3NlbiB0byBkbyB3cm9uZyBhbmQgdG8gYnJpbmcgYmFzZWxlc3MgY2hhcmdlc++8iSB3aWxsIHRlc3RpZnkKICAgICAgICAgICAgICAgICAgICBmb3IgaGltIGFnYWluc3QgbWUuIElmIHRoZW4sIEkgdGFrZSBhY3Rpb24gYWdhaW5zdCB0aGUgd2l0bmVzcywgaG93IHdpbGwgaGUKICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IGhpcyB0ZXN0aW1vbnkgaXMgdHJ1ZT8gQnkgdGhlIGFydGljbGVzIG9mIGFncmVlbWVudD8gV2VsbCwgdGhlbiwgbGV0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYmUgbm8gZGVsYXkgYWJvdXQgdGhpczsgbGV0IHRoZSBvbmUgd2hvIGhhcyB0aGVtIGJyaW5nIGZvcndhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZXMgYXQgb25jZS4gQnV0IGlmIGhlIHNheXMgdGhleSBoYXZlIGJlZW4gbG9zdCwgaG93LCB0aGVuLCBzaGFsbCBJIGZpbmQKICAgICAgICAgICAgICAgICAgICBtZWFucyBvZiByZWZ1dGluZyB0aGUgZmFsc2UgdGVzdGltb255IGJyb3VnaHQgYWdhaW5zdCBtZT8gSWYgdGhlIGRvY3VtZW50IGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gZGVwb3NpdGVkIHdpdGggbWUsIGl0IHdvdWxkIGhhdmUgYmVlbiBvcGVuIHRvIEFwYXR1cml1cyB0byBjaGFyZ2UgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGFkIG1hZGUgYXdheSB3aXRoIGl0IGJlY2F1c2Ugb2YgbXkgZ3VhcmFudHk7IDwvdHJhbnNsYXRpb24+"
translation['33.38'] = ""
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgcmVxdWVzdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCBtYWtlIG9mIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCBpcyBhIGZhaXIgb25lLCB0aGF0IHlvdSBzaG91bGQgaGVhciB1cwogICAgICAgICAgICAgICAgICAgIHdpdGggZ29vZHdpbGwgYXMgd2Ugc3BlYWsgaW4gb3VyIHR1cm4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk90aGVycywKICAgICAgICAgICAgICAgICAgICAgICAgbGVzcyBwcm9iYWJseSwgcmVuZGVyLCDigJxhcyB3ZSB0YWtlIG91ciB0dXJucyBpbiBhZGRyZXNzaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHlvdS7igJ08L25vdGU+IGtub3dpbmcgd2VsbCB0aGF0IHdlIGFyZSB3aG9sbHkgd2l0aG91dCBleHBlcmllbmNlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGFydCBvZiBzcGVha2luZzsgYW5kIGxvbmcgYXMgd2UgaGF2ZSBiZWVuIGZyZXF1ZW50aW5nIHlvdXIgbWFydCwgYW5kIG1hbnkgYXMKICAgICAgICAgICAgICAgICAgICBhcmUgdGhlIG1lcmNoYW50cyB0byB3aG9tIHdlIGhhdmUgbWFkZSBsb2Fucywgd2UgaGF2ZSBuZXZlciB1bnRpbCBub3cgYXBwZWFyZWQKICAgICAgICAgICAgICAgICAgICBpbiBhbnkgc3VpdCBiZWZvcmUgeW91IGVpdGhlciBhcyBwbGFpbnRpZmZzIG9yIGFzIGRlZmVuZGFudHMuIDwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5b3UgbWF5IGJlIHN1cmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgd2Ugc2hvdWxkIG5vdCBldmVuIG5vdyBoYXZlIGJyb3VnaHQgdGhpcyBhY3Rpb24KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IFBob3JtaW8sIGlmIHdlIGJlbGlldmVkIHRoYXQgdGhlIG1vbmV5IHdoaWNoIHdlIGxlbnQgaGltIGhhZCBiZWVuIGxvc3QKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgc2hpcCB0aGF0IHdhcyB3cmVja2VkOyB3ZSBhcmUgbm90IHNvIHNoYW1lbGVzcyBub3Igc28gdW5hY2N1c3RvbWVkIHRvCiAgICAgICAgICAgICAgICAgICAgbG9zc2VzLiBCdXQgYXMgbWFueSBoYXZlIGtlcHQgdGF1bnRpbmcgdXMsIGFuZCBlc3BlY2lhbGx5IHRob3NlIHdobyB3ZXJlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IHdpdGggUGhvcm1pbywgd2hvIGtuZXcKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBub3QgbG9zdCB0aGUgbW9uZXkgdG9nZXRoZXIgd2l0aCB0aGUgc2hpcCwgd2UgdGhvdWdodCBpdCBhIGRyZWFkZnVsCiAgICAgICAgICAgICAgICAgICAgdGhpbmcgbm90IHRvIHNlZWsgcmVkcmVzcyBhZnRlciBiZWluZyB3cm9uZ2VkIGFzIHdlIGhhZCBiZWVuIGJ5IHRoaXMgbWFuLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaXRoCiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlIHRvIHRoZSBzcGVjaWFsIHBsZWEgbXkgYXJndW1lbnQgaXMgYSBicmllZiBvbmUuIEZvciBldmVuIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudHMgZG8gbm90IGFic29sdXRlbHkgZGVueSB0aGF0IGEgY29udHJhY3Qgd2FzIG1hZGUgb24geW91ciBleGNoYW5nZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd29yZCByZW5kZXJlZCDigJxleGNoYW5nZeKAnQogICAgICAgICAgICAgICAgICAgICAgICBvciDigJxtYXJrZXQs4oCdIG1heSB3ZWxsIGRlc2lnbmF0ZSBtZXJlbHkgdGhlIFBlaXJhZXVzLAogICAgICAgICAgICAgICAgICAgICAgICB3aGljaCB3YXMgaW4gYSB2ZXJ5IHJlYWwgc2Vuc2UgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM68z4DhvbnPgc65zr/OvTwvZm9yZWlnbj4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljwvbm90ZT47IGJ1dCB0aGV5IGNsYWltIHRoYXQgdGhlcmUgZXhpc3RzIG5vIGxvbmdlcgogICAgICAgICAgICAgICAgICAgIGFueSBvYmxpZ2F0aW9uIG9uIHRoZWlyIHBhcnQgZHVlIHRvIHRoZSBjb250cmFjdCwgZm9yIHRoZXkgaGF2ZSBkb25lIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGNvbnRyYXZlbmVzIHRoZSB0ZXJtcyBvZiB0aGUgYWdyZWVtZW50LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOvM+A4b25z4HOuc6/zr08L2ZvcmVpZ24+IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXdzLCBob3dldmVyLCBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggeW91IHNpdCBhcyBqdXJvcnMsIGRvIG5vdCB1c2UgdGhpcwogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlLiBUaGV5IGRvIGluZGVlZCBhbGxvdyB0aGUgcHJvZHVjdGlvbiBvZiBhIHNwZWNpYWwgcGxlYSB3aGVuIHRoZXJlIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gbm8gY29udHJhY3QgYXQgYWxsIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvcgogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgQXRoZW5pYW4gbWFya2V0OyBidXQgaWYgYSBtYW4gYWRtaXRzIHRoYXQgYSBjb250cmFjdCB3YXMgbWFkZSwgeWV0CiAgICAgICAgICAgICAgICAgICAgY29udGVuZHMgdGhhdCBoZSBoYXMgZG9uZSBldmVyeXRoaW5nIHRoYXQgdGhlIGNvbnRyYWN0IHJlcXVpcmVzLCB0aGV5IGJpZCBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGEgZGVmZW5jZSBvbiB0aGUgbWVyaXRzIG9mIHRoZSBjYXNlLCBhbmQgbm90IHRvIG1ha2UgdGhlIHBsYWludGlmZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXMgaGFwcGVuZWQsIG9mIGNvdXJzZSwgd2hlbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIHBsZWEgaW4gYmFyIG9mIGFjdGlvbiB3YXMgaW50cm9kdWNlZC48L25vdGU+IE5vdCBidXQgdGhhdCBJIGhvcGUgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBmYWN0cyBvZiB0aGUgY2FzZSBpdHNlbGYgdGhhdCB0aGlzIHN1aXQgb2YgbWluZSBpcyBhZG1pc3NpYmxlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBJIGJlZyB5b3UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIGNvbnNpZGVyIHdoYXQgaXMgYWRtaXR0ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4sIGFuZCB3aGF0IGlzIGRpc3B1dGVkOyBmb3IgaW4gdGhpcyB3YXkgeW91IHdpbGwgYmVzdCBzaWZ0IHRoZQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLiBUaGV5IGFkbWl0IHRoYXQgdGhleSBib3Jyb3dlZCB0aGUgbW9uZXksIGFuZCB0aGF0IHRoZXkgaGFkIGNvbnRyYWN0cwogICAgICAgICAgICAgICAgICAgIG1hZGUgdG8gc2VjdXJlIHRoZSBsb2FuOyBidXQgdGhleSBjbGFpbSB0aGF0IHRoZXkgaGF2ZSBwYWlkIHRoZSBtb25leSB0byBMYW1waXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlcnZhbnQgb2YgRGlvLCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPi4gV2UsIG9uCiAgICAgICAgICAgICAgICAgICAgb3VyIHBhcnQsIHNoYWxsIHByb3ZlLCBub3Qgb25seSB0aGF0IFBob3JtaW8gZGlkIG5vdCBwYXkgaXQsIGJ1dCB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGltcG9zc2libGUgZm9yIGhpbSB0byBwYXkgaXQuIEJ1dCBJIG11c3QgcmVjb3VudCB0byB5b3UgYSBmZXcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIHRoYXQgaGFwcGVuZWQgYXQgdGhlIG91dHNldC4gPC90cmFuc2xhdGlvbj4="
translation['34.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBsZW50IHRvIHRoaXMgbWFuLCBQaG9ybWlvLCB0d2VudHkgbWluYWUgZm9yIHRoZSBkb3VibGUKICAgICAgICAgICAgICAgICAgICB2b3lhZ2UgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYxOSI+UG9udHVzPC9wbGFjZU5hbWU+IGFuZCBiYWNrLCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSBvZiBnb29kcyBvZiB0d2ljZSB0aGF0IHZhbHVlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlZW1zIHRoZSBtb3N0IHByb2JhYmxlIG1lYW5pbmcgb2YgdGhlIGRpc3B1dGVkIHBocmFzZS48L25vdGU+IGFuZCBkZXBvc2l0ZWQKICAgICAgICAgICAgICAgICAgICBhIGNvbnRyYWN0IHdpdGggQ2l0dHVzIHRoZSBiYW5rZXIuIEJ1dCwgYWx0aG91Z2ggdGhlIGNvbnRyYWN0IHJlcXVpcmVkIGhpbSB0bwogICAgICAgICAgICAgICAgICAgIHB1dCBvbiBib2FyZCB0aGUgc2hpcCBnb29kcyB0byB0aGUgdmFsdWUgb2YgZm91ciB0aG91c2FuZCBkcmFjaG1hZSwgaGUgZGlkIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3Qgb3V0cmFnZW91cyB0aGluZyBwb3NzaWJsZS4gRm9yIHdoaWxlIHN0aWxsIGluIHRoZSBQZWlyYWV1cyBoZSwgd2l0aG91dCBvdXIKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2UsIHNlY3VyZWQgYW4gYWRkaXRpb25hbCBsb2FuIG9mIGZvdXIgdGhvdXNhbmQgZml2ZSBodW5kcmVkIGRyYWNobWFlCiAgICAgICAgICAgICAgICAgICAgZnJvbSBUaGVvZG9ydXMgdGhlIFBob2VuaWNpYW4sIGFuZCBvbmUgb2Ygb25lIHRob3VzYW5kIGRyYWNobWFlIGZyb20gTGFtcGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXBvd25lci4gPC90cmFuc2xhdGlvbj4="
translation['34.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgd2hlcmVhcyBoZSB3YXMgYm91bmQgdG8KICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYSBjYXJnbyB3b3J0aCBvbmUKICAgICAgICAgICAgICAgICAgICBodW5kcmVkIGFuZCBmaWZ0ZWVuIG1pbmFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGUgbG9hbnMgd2VyZSBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgbWFkZSBvbiB0aGUgc2FtZSBiYXNpcyDvvIhpLmUuIG9uIHRoZSBzZWN1cml0eSBvZiBnb29kcyBvZiBhIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHR3aWNlIGFzIGdyZWF0IGFzIHRoZSBsb2Fu77yJIHdlIHNob3VsZCBoYXZlIHRvIHJlYWQgb25lIGh1bmRyZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZnR5IGluc3RlYWQgb2Ygb25lIGh1bmRyZWQgYW5kIGZpZnRlZW4sIGFzIHRoZSBjb21iaW5lZCBsb2FucyBhbW91bnRlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBzZXZlbnR5LWZpdmUgbWluYWUuIEl0IGlzIHBvc3NpYmxlLCBob3dldmVyLCB0aGF0IFRoZW9kb3J1cyBhbmQgTGFtcGlzLAogICAgICAgICAgICAgICAgICAgICAgICB3aG9zZSBsb2FucyB3ZXJlIGZvciB0aGUgb3V0d2FyZCB2b3lhZ2Ugb25seSwgYW5kIHdobyBzYWlsZWQgd2l0aCBQaG9ybWlvLAogICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHRlZCBhIGxvd2VyIHJhdGUgdGhhbiB0aGF0IGRlbWFuZGVkIGJ5IENocnlzaXBwdXMgYW5kIGhpcyBwYXJ0bmVyLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljwvbm90ZT4gaWYgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdG8gcGVyZm9ybSBmb3IgYWxsIGhpcyBjcmVkaXRvcnMgd2hhdCB3YXMgd3JpdHRlbiBpbiB0aGVpciBhZ3JlZW1lbnRzLCBoZQogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlZCBvbmx5IGEgY2FyZ28gd29ydGggZml2ZSB0aG91c2FuZCBmaXZlIGh1bmRyZWQgZHJhY2htYWUsIGluY2x1ZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBwcm92aXNpb25zOyB3aGlsZSBoaXMgZGVidHMgd2VyZSBzZXZlbnR5LWZpdmUgbWluYWUuIFRoaXMgd2FzIHRoZSBiZWdpbm5pbmcgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZnJhdWQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBoZSBuZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgZnVybmlzaGVkIHNlY3VyaXR5LCBub3IgcHV0IHRoZSBnb29kcyBvbiBib2FyZCB0aGUgc2hpcCwgYWx0aG91Z2ggdGhlIGFncmVlbWVudAogICAgICAgICAgICAgICAgICAgIGFic29sdXRlbHkgYmFkZSBoaW0gZG8gc28uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UgdGhlIGFncmVlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgcGxlYXNlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFncmVlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFncmVlbWVudDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ3JlZW1lbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgdGFrZSBhbHNvIHRoZSBlbnRyeSBtYWRlIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGN1c3RvbXMtb2ZmaWNlcnMgYW5kIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJFbnRyeSBvZiB0aGUgQ3VzdG9tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVudHJ5IG9mIHRoZSBDdXN0b21zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVudHJ5IG9mIHRoZSBDdXN0b21zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIGhlIGNhbWUsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIGhhdmluZyBsZXR0ZXJzIGZyb20KICAgICAgICAgICAgICAgICAgICBtZSwgd2hpY2ggSSBoYWQgZ2l2ZW4gaGltIHRvIGRlbGl2ZXIgdG8gbXkgc2xhdmUsIHdobyB3YXMgc3BlbmRpbmcgdGhlIHdpbnRlcgogICAgICAgICAgICAgICAgICAgIHRoZXJlLCBhbmQgdG8gYSBwYXJ0bmVyIG9mIG1pbmUs4oCUaW4gd2hpY2ggbGV0dGVyIEkgaGFkIHN0YXRlZCB0aGUgc3VtCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBoYWQgbGVudCBhbmQgdGhlIHNlY3VyaXR5LCBhbmQgYmFkZSB0aGVtLCBhcyBzb29uIGFzIHRoZSBnb29kcyBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICB1bnNoaXBwZWQsIHRvIGluc3BlY3QgdGhlbSBhbmQga2VlcCBhbiBleWUgb24gdGhlbSzigJR0aGUgZmVsbG93IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBkZWxpdmVyIHRvIHRoZW0gdGhlIGxldHRlcnMgd2hpY2ggaGUgaGFkIHJlY2VpdmVkIGZyb20gbWUsIGluIG9yZGVyIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGtub3cgbm90aGluZyBvZiB3aGF0IGhlIHdhcyBkb2luZzsgYW5kLCBmaW5kaW5nIHRoYXQgYnVzaW5lc3MgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4gd2FzIGJhZCBvd2luZyB0byB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFkIGJyb2tlbiBvdXQgYmV0d2VlbiBQYWVyaXNhZGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBLaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPi48L25vdGU+IGFuZCB0aGUgU2N5dGhpYW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlcmUgd2FzIG5vIG1hcmtldCBmb3IgdGhlIGdvb2RzIHdoaWNoIGhlIGhhZCBicm91Z2h0LCBoZSB3YXMgaW4gZ3JlYXQKICAgICAgICAgICAgICAgICAgICBwZXJwbGV4aXR5OyBmb3IgaGlzIGNyZWRpdG9ycywgd2hvIGhhZCBsZW50IGhpbSBtb25leSBmb3IgdGhlIG91dHdhcmQgdm95YWdlLAogICAgICAgICAgICAgICAgICAgIHdlcmUgcHJlc3NpbmcgaGltIGZvciBwYXltZW50LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['34.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcG93bmVyIGJhZGUgaGltIHB1dCBvbiBib2FyZCBhY2NvcmRpbmcgdG8gdGhlIGFncmVlbWVudCB0aGUgZ29vZHMgYm91Z2h0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBteSBtb25leSwgdGhpcyBmZWxsb3csIHdobyBub3cgYWxsZWdlcyB0aGF0IGhlIGhhcyBwYWlkIHRoZSBkZWJ0IGluIGZ1bGwsCiAgICAgICAgICAgICAgICAgICAgc2FpZCB0aGF0IGhlIGNvdWxkIG5vdCBzaGlwIHRoZSBnb29kcyBiZWNhdXNlIGhpcyB0cmFzaCB3YXMgdW5zYWxhYmxlOyBhbmQgaGUKICAgICAgICAgICAgICAgICAgICBiYWRlIGhpbSBwdXQgdG8gc2VhLCBzYXlpbmcgdGhhdCBoZSBoaW1zZWxmIHdvdWxkIHNhaWwgaW4gYW5vdGhlciBzaGlwIGFzIHNvb24KICAgICAgICAgICAgICAgICAgICBhcyBoZSBzaG91bGQgZGlzcG9zZSBvZiB0aGUgY2FyZ28uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBsZWFzZSB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhpcyBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgZGVmZW5kYW50IHdhcyBsZWZ0IGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+LCB3aGlsZSBMYW1waXMgcHV0IHRvIHNlYSwKICAgICAgICAgICAgICAgICAgICBhbmQgd2FzIHNoaXB3cmVja2VkIG5vdCBmYXIgZnJvbSB0aGUgcG9ydDsgZm9yIGFsdGhvdWdoIGhpcyBzaGlwIHdhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgb3ZlcmxvYWRlZCwgYXMgd2UgbGVhcm4sIGhlIHRvb2sgb24gYW4gYWRkaXRpb25hbCBkZWNrLWxvYWQgb2Ygb25lIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgaGlkZXMsIHdoaWNoIHByb3ZlZCB0aGUgY2F1c2Ugb2YgdGhlIGxvc3Mgb2YgdGhlIHZlc3NlbC4gSGUgaGltc2VsZiBtYWRlIGhpcwogICAgICAgICAgICAgICAgICAgIGVzY2FwZSBpbiB0aGUgYm9hdCB3aXRoIHRoZSByZXN0IG9mIERpbydzIHNlcnZhbnRzLCBidXQgaGUgbG9zdCBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcnR5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBNUy4gcmVhZGluZyBpcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM+BzrnOsc664b25z4POuc6xPC9mb3JlaWduPiDvvIgzMDDvvIksIGJ1dCBpdCBpcwogICAgICAgICAgICAgICAgICAgICAgICBtb3N0IHVubGlrZWx5IHRoYXQgdGhlcmUgd2VyZSBzbyBtYW55IHBlcnNvbnMgb24gYm9hcmQsIHVubGVzcyB0aGlzIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlIHNoaXAuIFN1Y2ggYW4gYXNwaXJhdGlvbiwgaG93ZXZlciwgc2VlbXMgaW1wcm9iYWJsZSwgYW5kIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGFjY29yZCB3ZWxsIHdpdGggdGhlIHN0YXRlbWVudCB0aGF0IHRoZXJlIHdhcyBtdWNoIG1vdXJuaW5nIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IG92ZXIgdGhlIGRpc2FzdGVyLjwvbm90ZT4gbGl2ZXMKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzIHRoZSBjYXJnby4gVGhlcmUgd2FzIG11Y2ggbW91cm5pbmcgaW4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4TPgc65zrHOuuG9uc+DzrnOsTwvZm9yZWlnbj4g77yIMzAw77yJLCBidXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbW9zdCB1bmxpa2VseSB0aGF0IHRoZXJlIHdlcmUgc28gbWFueSBwZXJzb25zIG9uIGJvYXJkLCB1bmxlc3MgdGhpcyB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBzbGF2ZSBzaGlwLiBTdWNoIGFuIGFzcGlyYXRpb24sIGhvd2V2ZXIsIHNlZW1zIGltcHJvYmFibGUsIGFuZCBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgICAgICBhY2NvcmQgd2VsbCB3aXRoIHRoZSBzdGF0ZW1lbnQgdGhhdCB0aGVyZSB3YXMgbXVjaCBtb3VybmluZyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiBvdmVyIHRoZSBkaXNhc3Rlci48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiB3aGVuIHRoZXkgbGVhcm5lZCBvZiB0aGUgbG9zcyBvZiB0aGUgc2hpcCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlcnlib2R5IGRlZW1lZCB0aGlzIFBob3JtaW8gbHVja3kgaW4gdGhhdCBoZSBoYWQgbm90IHNhaWxlZCB3aXRoIHRoZSBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgbm9yIHB1dCBhbnkgZ29vZHMgb24gYm9hcmQgdGhlIHNoaXAuIFRoZSBzYW1lIHN0b3J5IHdhcyB0b2xkIGJ5IHRoZSBvdGhlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgYnkgUGhvcm1pbyBoaW1zZWxmLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIG1lLCBwbGVhc2UsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGFtcGlzIGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgdG8gd2hvbSBQaG9ybWlvIGRlY2xhcmVzIGhlIGhhZCBwYWlkIHRoZSBnb2xkIO+8iHByYXkgbm90ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2FyZWZ1bGx577yJLCB3aGVuIEkgYXBwcm9hY2hlZCBoaW0gYXMgc29vbiBhcyBoZSBoYWQgcmV0dXJuZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFmdGVyIHRoZSBzaGlwd3JlY2sgYW5kCiAgICAgICAgICAgICAgICAgICAgYXNrZWQgaGltIGFib3V0IHRoZXNlIG1hdHRlcnMsIHNhaWQgdGhhdCBQaG9ybWlvIGRpZCBub3QgcHV0IHRoZSBnb29kcyBvbiBib2FyZAogICAgICAgICAgICAgICAgICAgIHRoZSBzaGlwIGFjY29yZGluZyB0byBvdXIgYWdyZWVtZW50LCBub3IgaGFkIGhlIGhpbXNlbGYgcmVjZWl2ZWQgdGhlIGdvbGQgZnJvbQogICAgICAgICAgICAgICAgICAgIGhpbSBhdCB0aGF0IHRpbWUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb24gb2YgdGhvc2Ugd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aGVuIHRoaXMgbWFuIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICByZWFjaGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYWZ0ZXIgY29tcGxldGluZyBoaXMKICAgICAgICAgICAgICAgICAgICB2b3lhZ2UgaW4gc2FmZXR5IG9uIGFub3RoZXIgc2hpcCwgSSBhcHByb2FjaGVkIGhpbSBhbmQgZGVtYW5kZWQgcGF5bWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsb2FuLiBBbmQgYXQgdGhlIGZpcnN0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoZSBkaWQgbm90IGluIGFueSBpbnN0YW5jZSBtYWtlIHRoZSBzdGF0ZW1lbnQgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBub3cgbWFrZXMsIGJ1dCBhbHdheXMgYWdyZWVkIHRoYXQgaGUgd291bGQgcGF5OyBidXQgYWZ0ZXIgaGUgaGFkIGVudGVyZWQgaW50byBhbgogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCB3aXRoIHRob3NlIHdobyBhcmUgbm93IGF0IGhpcyBzaWRlIGFuZCBhcmUgYWR2b2NhdGVzIHdpdGggaGltLCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVuIGFuZCB0aGVyZSBkaWZmZXJlbnQgYW5kIG5vdCBhdCBhbGwgdGhlIHNhbWUgbWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['34.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgc2F3IHRoYXQgaGUgd2FzIHRyeWluZyB0byBjaGVhdCBtZSwgSSB3ZW50IHRvIExhbXBpcwogICAgICAgICAgICAgICAgICAgIGFuZCB0b2xkIGhpbSB0aGF0IFBob3JtaW8gd2FzIG5vdCBkb2luZyB3aGF0IHdhcyByaWdodCBub3IgcGF5aW5nIGJhY2sgdGhlIGxvYW47CiAgICAgICAgICAgICAgICAgICAgYW5kIGF0IHRoZSBzYW1lIHRpbWUgSSBhc2tlZCBoaW0gaWYgaGUga25ldyB3aGVyZSBQaG9ybWlvIHdhcywgaW4gb3JkZXIgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc3VtbW9uIGhpbS4gSGUgYmFkZSBtZSBmb2xsb3cgaGltLCBhbmQgd2UgZm91bmQgdGhlIGZlbGxvdyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwZXJmdW1lcnkgc2hvcHM7IGFuZCBJLCBoYXZpbmcgd2l0bmVzc2VzIHdpdGggbWUsIHNlcnZlZCB0aGUgc3VtbW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['34.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5MYW1waXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdhcyBjbG9zZSBhdCBoYW5kIHdoZW4gSSBkaWQgdGhpcywgeWV0IGhlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgdG8gc2F5IHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtb25leSBmcm9tIFBob3JtaW8sIG5vciBkaWQgaGUgc2F5LCBhcwogICAgICAgICAgICAgICAgICAgIGhlIG5hdHVyYWxseSB3b3VsZCBoYXZlIGRvbmUgc3VwcG9zaW5nIGhpcyBzdG9yeSB0byBiZSB0cnVlLAogICAgICAgICAgICAgICAgICAgIOKAnENocnlzaXBwdXMsIHlvdSBhcmUgbWFkLiBXaHkgZG8geW91IHN1bW1vbiB0aGlzIG1hbj8gSGUgaGFzIHBhaWQgbWUKICAgICAgICAgICAgICAgICAgICB0aGUgbW9uZXku4oCdIEFuZCBub3Qgb25seSBkaWQgTGFtcGlzIG5vdCBzYXkgYSB3b3JkLCBidXQgbmVpdGhlciBkaWQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGhpbXNlbGYgdmVudHVyZSB0byBzYXkgYW55dGhpbmcsIGFsdGhvdWdoIExhbXBpcyB3YXMgc3RhbmRpbmcgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgc2lkZSwgdG8gd2hvbSBoZSBub3cgZGVjbGFyZXMgaGUgaGFkIHBhaWQgdGhlIG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['34.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0IHdvdWxkIHN1cmVseSBoYXZlIGJlZW4gbmF0dXJhbCBmb3IgaGltIHRvIHNheSwKICAgICAgICAgICAgICAgICAgICDigJxXaHkgZG8geW91IHN1bW1vbiBtZSwgZmVsbG93PyBJIGhhdmUgcGFpZCB0aGUgbW9uZXkgdG8gdGhpcyBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaXMgc3RhbmRpbmcgaGVyZSDigJ3igJRhbmQgYXQgdGhlIHNhbWUgdGltZSB0byBjYWxsIHVwb24gTGFtcGlzCiAgICAgICAgICAgICAgICAgICAgdG8gY29ycm9ib3JhdGUgaGlzIHdvcmRzLiBBcyBpdCB3YXMsIGhvd2V2ZXIsIG5laXRoZXIgb2YgdGhlbSB1dHRlcmVkIGEgc3lsbGFibGUKICAgICAgICAgICAgICAgICAgICBvbiBhbiBvY2Nhc2lvbiBzbyBvcHBvcnR1bmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHByb29mIHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICB3b3JkcyBhcmUgdHJ1ZSwgdGFrZSwgcGxlYXNlLCB0aGUgZGVwb3NpdGlvbiBvZiB0aG9zZSB3aG8gd2l0bmVzc2VkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdW1tb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50IGluIHRoZSBhY3Rpb24gd2hpY2ggSSBjb21tZW5jZWQgYWdhaW5zdCBoaW0gbGFzdCB5ZWFyLCBmb3IgdGhpcyBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBzdHJvbmdlc3QgcG9zc2libGUgcHJvb2YgdGhhdCB1cCB0byB0aGF0IHRpbWUgUGhvcm1pbyBoYWQgbmV2ZXIgc3RhdGVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgcGFpZCB0aGUgbW9uZXkgdG8gTGFtcGlzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbXBsYWludCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGFjdGlvbiBJIGNvbW1lbmNlZCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYmFzaW5nIG15IGNvbXBsYWludCB1cG9uCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyBlbHNlIHRoYW4gdGhlIHJlcG9ydCBvZiBMYW1waXMsIHdobyBkZW5pZWQgdGhhdCBQaG9ybWlvIGhhZCBwdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZHMgb24gYm9hcmQgdGhlIHNoaXAgb3IgdGhhdCBoZSBoaW1zZWxmIGhhZCByZWNlaXZlZCB0aGUgbW9uZXkuIERvIG5vdAogICAgICAgICAgICAgICAgICAgIGltYWdpbmUgdGhhdCBJIGFtIHNvIHNlbnNlbGVzcywgc28gYWJzb2x1dGVseSBjcmF6eSwgYXMgdG8gaGF2ZSBkcmF3biB1cCBhCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50IGxpa2UgdGhpcywgaWYgTGFtcGlzIO+8iHdob3NlIHdvcmRzIHdvdWxkIHByb3ZlIG15IGNvbnRlbnRpb24KICAgICAgICAgICAgICAgICAgICBmYWxzZe+8iSBhZG1pdHRlZCB0aGF0IGhlIGhhZCByZWNlaXZlZCB0aGUgbW9uZXkuIDwvdHJhbnNsYXRpb24+"
translation['34.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZSB0aGFuIHRoaXMsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG5vdGUgYW5vdGhlciBmYWN0LiBUaGVzZQogICAgICAgICAgICAgICAgICAgIHZlcnkgbWVuIGVudGVyZWQgYSBzcGVjaWFsIHBsZWEgbGFzdCB5ZWFyLCBidXQgZGFyZWQgbm90IGFzc2VydCBpbiB0aGVpciBwbGVhCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGhhZCBwYWlkIHRoZSBtb25leSB0byBMYW1waXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgcHJheQogICAgICAgICAgICAgICAgICAgIHRha2UgdGhlIHBsZWEgaXRzZWxmLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlNwZWNpYWwgUGxlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNwZWNpYWwgUGxlYTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TcGVjaWFsIFBsZWE8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGVhciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gTm93aGVyZSBpbiB0aGUgcGxlYSBpcyBpdCBzdGF0ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IFBob3JtaW8gaGFkIHBhaWQgdGhlIG1vbmV5IHRvIExhbXBpcywgdGhvdWdoIEkgaGFkIGV4cHJlc3NseSB3cml0dGVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbXBsYWludCwgd2hpY2ggeW91IGhlYXJkIGEgbW9tZW50IGFnbywgdGhhdCBQaG9ybWlvIGhhZCBub3QgcHV0IHRoZSBnb29kcyBvbgogICAgICAgICAgICAgICAgICAgIGJvYXJkIHRoZSBzaGlwIG5vciBwYWlkIHRoZSBtb25leS4gRm9yIHdoYXQgb3RoZXIgd2l0bmVzcywgdGhlbiwgc2hvdWxkIHlvdQogICAgICAgICAgICAgICAgICAgIHdhaXQsIHdoZW4geW91IGhhdmUgc28gc2lnbmlmaWNhbnQgYSBwaWVjZSBvZiBldmlkZW5jZSBmcm9tIHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXM/IDwvdHJhbnNsYXRpb24+"
translation['34.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGUgc3VpdCB3YXMgYWJvdXQgdG8gY29tZSBpbnRvIGNvdXJ0LCB0aGV5IGJlZ2dlZCB1cyB0byByZWZlciBpdCB0byBhbgogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3I7IGFuZCB3ZSByZWZlcnJlZCBpdCBieSBhZ3JlZW1lbnQgdG8gVGhlb2RvdHVzLCBhIHByaXZpbGVnZWQKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHdvcmQgaXMgdXNlZCBvZiBvbmUgd2hvLCB0aG91Z2ggYW4KICAgICAgICAgICAgICAgICAgICAgICAgYWxpZW4sIHBhaWQgb25seSB0aGUgdGF4ZXMgcGFpZCBieSBjaXRpemVucyB3aXRob3V0IHRoZSBhZGRpdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCB0YXggb24gYWxpZW5zLjwvbm90ZT4gTGFtcGlzIGFmdGVyIHRoYXQsIHRoaW5raW5nIHRoYXQgaXQgd291bGQgbm93LAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBhbiBhcmJpdHJhdG9yLCBiZSBzYWZlIGZvciBoaW0gdG8gdGVzdGlmeSBqdXN0IGFzIGhlIHBsZWFzZWQsIGRpdmlkZWQgbXkKICAgICAgICAgICAgICAgICAgICBtb25leSB3aXRoIHRoaXMgZmVsbG93IFBob3JtaW8sIGFuZCB0aGVuIGdhdmUgdGVzdGltb255IHRoZSB2ZXJ5IG9wcG9zaXRlIG9mCiAgICAgICAgICAgICAgICAgICAgd2hhdCBoZSBoYWQgc3RhdGVkIGJlZm9yZS4gPC90cmFuc2xhdGlvbj4="
translation['34.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgbm90IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGhpbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIGdpdmUKICAgICAgICAgICAgICAgICAgICBmYWxzZSB0ZXN0aW1vbnkgd2hpbGUgZmFjZSB0byBmYWNlIHdpdGggeW91IGFuZCB0byBkbyBzbyBiZWZvcmUgYW4gYXJiaXRyYXRvci4KICAgICAgICAgICAgICAgICAgICBXaXRoIHlvdSBoZWF2eSBpbmRpZ25hdGlvbiBhbmQgc2V2ZXJlIHBlbmFsdHkgYXdhaXQgdGhvc2Ugd2hvIGJlYXIgZmFsc2UKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzOyBidXQgYmVmb3JlIGFuIGFyYml0cmF0b3IgdGhleSBnaXZlIHdoYXQgdGVzdGltb255IHRoZXkgcGxlYXNlIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICByaXNrIGFuZCB3aXRob3V0IHNoYW1lLiBXaGVuIEkgZXhwb3N0dWxhdGVkIGFuZCBleHByZXNzZWQgc3Ryb25nIGluZGlnbmF0aW9uLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGF0IHRoZSBlZmZyb250ZXJ5IG9mCiAgICAgICAgICAgICAgICAgICAgTGFtcGlzLCA8L3RyYW5zbGF0aW9uPg=="
translation['34.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgcHJvZHVjZWQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGVzdGltb255IGFzIEkgbm93IHByb2R1Y2UgYmVmb3JlIHlvdeKAlHRoYXQsIG5hbWVseSwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyB3aG8gYXQgdGhlIGZpcnN0IHdlbnQgdG8gaGltIHdpdGggbWUsIHdoZW4gaGUgc3RhdGVkIHRoYXQgaGUgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIHRoZSBtb25leSBmcm9tIFBob3JtaW8sIGFuZCB0aGF0IFBob3JtaW8gaGFkIG5vdCBwdXQgdGhlIGdvb2RzIG9uIGJvYXJkCiAgICAgICAgICAgICAgICAgICAgdGhlIHNoaXDigJRMYW1waXMsIGJlaW5nIHNvIHBsYWlubHkgY29udmljdGVkIG9mIGJlYXJpbmcgZmFsc2Ugd2l0bmVzcwogICAgICAgICAgICAgICAgICAgIGFuZCBvZiBwbGF5aW5nIHRoZSByb2d1ZSwgYWRtaXR0ZWQgdGhhdCBoZSBoYWQgbWFkZSB0aGUgc3RhdGVtZW50IHRvIG15IHBhcnRuZXIKICAgICAgICAgICAgICAgICAgICAgICAgaGVyZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SSB0YWtlIHRoZSBwaHJhc2UgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgeG9uM+CIM+Ezr/hv6bPhM6/zr08L2ZvcmVpZ24+IHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvLDPgc63zrrhvbPOvc6xzrk8L2ZvcmVpZ24+LCBhc3N1bWluZyB0aGF0IHRoZSByZWZlcmVuY2UgaXMgdG8gdGhlIHBhcnRuZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2hyeXNpcHB1cywgd2hvIGFwcGFyZW50bHkgdGFrZXMgdGhlIGxhdHRlcidzIHBsYWNlIGFzIHNwZWFrZXIgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBwYXJhZ3JhcGguPC9ub3RlPiBidXQgZGVjbGFyZWQgdGhhdCBoZSB3YXMgb3V0IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIG1pbmQgd2hlbiBoZSBtYWRlIGl0LiBOb3cgcmVhZCBtZSB0aGlzIGRlcG9zaXRpb24uPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgeG9uM+CIM+Ezr/hv6bPhM6/zr08L2ZvcmVpZ24+IHdpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvLDPgc63zrrhvbPOvc6xzrk8L2ZvcmVpZ24+LCBhc3N1bWluZyB0aGF0IHRoZSByZWZlcmVuY2UgaXMgdG8gdGhlIHBhcnRuZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2hyeXNpcHB1cywgd2hvIGFwcGFyZW50bHkgdGFrZXMgdGhlIGxhdHRlcidzIHBsYWNlIGFzIHNwZWFrZXIgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBwYXJhZ3JhcGguPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkl0IGlzIGNvbW1vbmx5IGFzc3VtZWQgdGhhdCB0aGUgc2Vjb25kIHNwZWFrZXIKICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5zIHdpdGggdGhpcyBwYXJhZ3JhcGguIEluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzQuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuMjM8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIENocnlzaXBwdXMgaXMgcmVmZXJyZWQgdG8gYXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zr/hvZfPhM6/z4I8L2ZvcmVpZ24+LCBzbyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmFjdCBvZiBhIGNoYW5nZSBvZiBzcGVha2VycyBpcyBwYXRlbnQuPC9ub3RlPiBUaGVvZG90dXMsIG1lbiBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjIzIiB2YWxpZD0ieWVzIj5EZW0uIDM0LjIzPC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICBDaHJ5c2lwcHVzIGlzIHJlZmVycmVkIHRvIGFzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6/4b2Xz4TOv8+CPC9mb3JlaWduPiwgc28gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3Qgb2YgYSBjaGFuZ2Ugb2Ygc3BlYWtlcnMgaXMgcGF0ZW50LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYWZ0ZXIgaGVhcmluZyB1cyBzZXZlcmFsIHRpbWVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWluZyBjb252aW5jZWQgdGhhdCBMYW1waXMgd2FzIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnksIGRpZCBub3QgZGlzbWlzcyB0aGUKICAgICAgICAgICAgICAgICAgICBzdWl0LCBidXQgcmVmZXJyZWQgdXMgdG8gdGhlIGNvdXJ0LiBIZSB3YXMgbG90aCB0byBnaXZlIGFuIGFkdmVyc2UgZGVjaXNpb24KICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHdhcyBhIGZyaWVuZCBvZiB0aGlzIG1hbiBQaG9ybWlvLCBhcyB3ZSBhZnRlcndhcmRzIGxlYXJuZWQsIHlldCBoZQogICAgICAgICAgICAgICAgICAgIGhlc2l0YXRlZCB0byBkaXNtaXNzIHRoZSBzdWl0IGxlc3QgaGUgc2hvdWxkIGhpbXNlbGYgY29tbWl0IHBlcmp1cnkuIDwvdHJhbnNsYXRpb24+"
translation['34.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBpbiB0aGUgbGlnaHQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZmFjdHMgdGhlbXNlbHZlcywgY29uc2lkZXIgaW4geW91ciBvd24gbWluZHMsIG1lbiBvZiB0aGUganVyeSwgd2hhdCBtZWFucwogICAgICAgICAgICAgICAgICAgIHRoZSBtYW4gd2FzIGxpa2VseSB0byBoYXZlIGZvciBkaXNjaGFyZ2luZyB0aGUgZGVidC4gSGUgc2FpbGVkIGZyb20gdGhpcyBwb3J0CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBoYXZpbmcgcHV0IHRoZSBnb29kcyBvbiBib2FyZCB0aGUgc2hpcCwgYW5kIGhhdmluZyBubyBhZGVxdWF0ZSBzZWN1cml0eTsKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgY29udHJhcnksIGhlIGhhZCBtYWRlIGFkZGl0aW9uYWwgbG9hbnMgb24gdGhlIGNyZWRpdCBvZiB0aGUgbW9uZXkgbGVudCBieQogICAgICAgICAgICAgICAgICAgIG1lLiBJbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiBoZSBmb3VuZCBubyBtYXJrZXQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGlzIHdhcmVzLCBhbmQgaGFkIGRpZmZpY3VsdHkgaW4gZ2V0dGluZyByaWQgb2YgdGhvc2Ugd2hvIGhhZCBsZW50IG1vbmV5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBvdXR3YXJkLXZveWFnZS4gPC90cmFuc2xhdGlvbj4="
translation['34.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5NeSBwYXJ0bmVyIGhlcmUgaGFkIGxlbnQgaGltCiAgICAgICAgICAgICAgICAgICAgdHdvIHRob3VzYW5kIGRyYWNobWFlIGZvciB0aGUgZG91YmxlIHZveWFnZSBvbiB0ZXJtcyB0aGF0IGhlIHNob3VsZCByZWNlaXZlIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0d28gdGhvdXNhbmQgc2l4IGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZTsgYnV0IFBob3JtaW8gZGVjbGFyZXMgdGhhdCBoZSBwYWlkIExhbXBpcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IEN5emljZW5lCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHN0YXRlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEN5emljdXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN5emljdXMiPkN5emljdXM8L3BsYWNlTmFtZT4g77yIYSB0b3duIG9uIHRoZSBzb3V0aAogICAgICAgICAgICAgICAgICAgICAgICBzaG9yZSBvZiB0aGUgUHJvcG9udGlzLCBvciBzZWEgb2YgTWFybW9yYe+8iSB3YXMgYSBjb2luIG1hZGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgZWxlY3RydW0sIGFuIGFsbG95IG9mIGFwcHJveGltYXRlbHkgdGhyZWUtcXVhcnRlcnMgZ29sZCBhbmQgb25lLXF1YXJ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgc2lsdmVyLiBJdCB3YXMgbmVhcmx5IHR3aWNlIGFzIGhlYXZ5IGFzIHRoZSBvcmRpbmFyeSBnb2xkIHN0YXRlciwgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHdvcnRoIHR3ZW50eSBkcmFjaG1hZSwgYW5kIGhhZCBhIHZhbHVlIO+8iGFzIHN0YXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dO+8iSBvZiB0d2VudHktZWlnaHQgZHJhY2htYWUuIFRoZSBhZGRpdGlvbiBvZiB0aGUgd29yZAogICAgICAgICAgICAgICAgICAgICAgICDigJx0aGVyZeKAnSBpbmRpY2F0ZXMgdGhhdCB0aGUgdmFsdWUgZGlmZmVyZWQgaW4gZGlmZmVyZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlcyBhY2NvcmRpbmcgdG8gdGhlIHJhdGUgb2YgZXhjaGFuZ2UuPC9ub3RlPu+8iG5vdGUgdGhpcwogICAgICAgICAgICAgICAgICAgIGNhcmVmdWxsee+8iSB3aGljaCBoZSBib3Jyb3dlZCBhdCB0aGUgaW50ZXJlc3QgcGFpZCBvbiBsb2FucyBzZWN1cmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgcmVhbCBwcm9wZXJ0eS4gTm93IGludGVyZXN0IG9uIHJlYWwgc2VjdXJpdHkgd2FzIHNpeHRlZW4gYW5kIHR3by10aGlyZHMgcGVyY2VudCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIEN5emljZW5lIHN0YXRlciB3YXMgd29ydGggdGhlcmUgdHdlbnR5LWVpZ2h0IEF0dGljIGRyYWNobWFlLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEN5emljdXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN5emljdXMiPkN5emljdXM8L3BsYWNlTmFtZT4g77yIYSB0b3duIG9uIHRoZSBzb3V0aAogICAgICAgICAgICAgICAgICAgICAgICBzaG9yZSBvZiB0aGUgUHJvcG9udGlzLCBvciBzZWEgb2YgTWFybW9yYe+8iSB3YXMgYSBjb2luIG1hZGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgZWxlY3RydW0sIGFuIGFsbG95IG9mIGFwcHJveGltYXRlbHkgdGhyZWUtcXVhcnRlcnMgZ29sZCBhbmQgb25lLXF1YXJ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgc2lsdmVyLiBJdCB3YXMgbmVhcmx5IHR3aWNlIGFzIGhlYXZ5IGFzIHRoZSBvcmRpbmFyeSBnb2xkIHN0YXRlciwgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHdvcnRoIHR3ZW50eSBkcmFjaG1hZSwgYW5kIGhhZCBhIHZhbHVlIO+8iGFzIHN0YXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dO+8iSBvZiB0d2VudHktZWlnaHQgZHJhY2htYWUuIFRoZSBhZGRpdGlvbiBvZiB0aGUgd29yZAogICAgICAgICAgICAgICAgICAgICAgICDigJx0aGVyZeKAnSBpbmRpY2F0ZXMgdGhhdCB0aGUgdmFsdWUgZGlmZmVyZWQgaW4gZGlmZmVyZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlcyBhY2NvcmRpbmcgdG8gdGhlIHJhdGUgb2YgZXhjaGFuZ2UuPC90cmFuc2xhdGlvbj4="
translation['34.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBuZWNlc3NhcnkgdGhhdCB5b3Ugc2hvdWxkIHVuZGVyc3RhbmQgaG93IGxhcmdlCiAgICAgICAgICAgICAgICAgICAgYSBzdW0gaGUgY2xhaW1zIHRvIGhhdmUgcGFpZC4gQSBodW5kcmVkIGFuZCB0d2VudHkgc3RhdGVycyBhbW91bnQgdG8gdGhyZWUKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCB0aHJlZSBodW5kcmVkIGFuZCBzaXh0eSBkcmFjaG1hZSwgYW5kIHRoZSBpbnRlcmVzdCBhdCB0aGUgbGFuZCByYXRlIG9mCiAgICAgICAgICAgICAgICAgICAgc2l4dGVlbiBhbmQgdHdvLXRoaXJkcyBwZXJjZW50IG9uIHRoaXJ0eS10aHJlZSBtaW5hZSBhbmQgc2l4dHkgZHJhY2htYWUgaXMgZml2ZQogICAgICAgICAgICAgICAgICAgIGh1bmRyZWQgYW5kIHNpeHR5IGRyYWNobWFlLCBhbmQgdGhlIHRvdGFsIGFtb3VudCBjb21lcyB0byBzbyBtdWNoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBvZiBjb3Vyc2UsIHRoZSBzdW0gb2YgdGhlIHR3byBpdGVtcywgb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWUgdGhvdXNhbmQgbmluZSBodW5kcmVkIGFuZCB0d2VudHkgZHJhY2htYWUuIFRoZSB0b3RhbCBpcyBub3QgbWVudGlvbmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmUsIGFzIGl0IGlzIGdpdmVuIGluIHRoZSBsaW5lcyBpbW1lZGlhdGVseSBmb2xsb3dpbmcuIE5vdGUgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3BlYWtlciBpbmV4YWN0bHkgc3BlYWtzIGFzIGlmIHRoZSB3aG9sZSBzdW0g77yIaW5jbHVkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdO+8iSBoYWQgYmVlbiBwYWlkIHRvIExhbXBpcyDvvIhhY2NvcmRpbmcgdG8gUGhvcm1pbydzCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWlt77yJLiBUaGUgYXJndW1lbnQgaXMsIGhvd2V2ZXIsIHZhbGlkLCBhcyB0aGUgc3VtIHJlcHJlc2VudHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvc3QgdG8gUGhvcm1pbyBvZiBwYXlpbmcgb2ZmIHRoZSBsb2FuLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG1lbiBvZiB0aGUganVyeSwgaXMgdGhlcmUgYSBtYW4sIG9yIHdpbGwKICAgICAgICAgICAgICAgICAgICB0aGUgbWFuIGV2ZXIgYmUgYm9ybiwgd2hvLCBpbnN0ZWFkIG9mIHR3ZW50eS1zaXggaHVuZHJlZCBkcmFjaG1hZSB3b3VsZCBwcmVmZXIKICAgICAgICAgICAgICAgICAgICB0byBwYXkgdGhpcnR5IG1pbmFlIGFuZCB0aHJlZSBodW5kcmVkIGFuZCBzaXh0eSBkcmFjaG1hZSwgYW5kIGFzIGludGVyZXN0IGZpdmUKICAgICAgICAgICAgICAgICAgICBodW5kcmVkIGFuZCBzaXh0eSBkcmFjaG1hZSBieSB2aXJ0dWUgb2YgaGlzIGxvYW4sIGJvdGggd2hpY2ggc3VtcyBQaG9ybWlvIHNheXMKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgcGFpZCBMYW1waXMsIGluIGFsbCB0aHJlZSB0aG91c2FuZCBuaW5lIGh1bmRyZWQgYW5kIHR3ZW50eSBkcmFjaG1hZT8gQW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSBtaWdodCBoYXZlIHBhaWQgdGhlIG1vbmV5IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgc2VlaW5nIHRoYXQgaXQgaGFkIGJlZW4gbGVudCBmb3IgdGhlIGRvdWJsZSB2b3lhZ2UsIGhhcwogICAgICAgICAgICAgICAgICAgIGhlIHBhaWQgaXQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIGFuZCB0b28gbXVjaCBieQogICAgICAgICAgICAgICAgICAgIHRoaXJ0ZWVuIG1pbmFlPyA8L3RyYW5zbGF0aW9uPg=="
translation['34.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdG8gdGhlIGNyZWRpdG9ycyB3aG8gbGVudAogICAgICAgICAgICAgICAgICAgIG1vbmV5IGZvciB0aGUgb3V0d2FyZCB2b3lhZ2UgeW91IGhhZCBkaWZmaWN1bHR5IGluIHBheWluZyB0aGUgcHJpbmNpcGFsLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICB0aGV5IHNhaWxlZCB3aXRoIHlvdSBhbmQga2VwdCBwcmVzc2luZyB5b3UgZm9yIHBheW1lbnQ7IHlldCB0byB0aGlzIG1hbiB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IHByZXNlbnQsIHlvdSBub3Qgb25seSByZXR1cm5lZCBib3RoIHByaW5jaXBhbCBhbmQgaW50ZXJlc3QsIGJ1dCBhbHNvIHBhaWQKICAgICAgICAgICAgICAgICAgICB0aGUgcGVuYWx0aWVzIGFyaXNpbmcgZnJvbSB0aGUgYWdyZWVtZW50PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlCiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXJuIGZyb20gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNC4zMyIgdmFsaWQ9InllcyI+RGVtLiAzNC4zMzwvYmlibD4gdGhhdCB0aGUgY29udHJhY3QgZW50YWlsZWQKICAgICAgICAgICAgICAgICAgICAgICAgYSBwZW5hbHR5IG9mIGZpdmUgdGhvdXNhbmQgZHJhY2htYWUgaW4gY2FzZSBhIHJldHVybiBjYXJnbyB3YXMgbm90IHNoaXBwZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBvZiBjb3Vyc2UgcGF5bWVudCBjb3VsZCBub3QgaGF2ZSBiZWVuIGV4YWN0ZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4uIFRoZSBzcGVha2VyIHNlZW1zIHRvIGlkZW50aWZ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvdmVycGF5bWVudCBvZiBvbmUgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBhbmQgdHdlbnR5IGRyYWNobWFlIHdpdGggdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwZW5hbHR5OyBidXQgdGhlIOKAnG92ZXJwYXltZW504oCdIHJlcHJlc2VudHMgYWxtb3N0IGV4YWN0bHkKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFtb3VudCBvZiB0aGUgbW9uZXkgTGFtcGlzIGhhZCBsb2FuZWQgdG8gUGhvcm1pbywgcGx1cyB0aGUgdGhpcnR5CiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgaW50ZXJlc3QuIEl0IGlzLCBvZiBjb3Vyc2UsIHBvc3NpYmxlIHRoYXQgdGhlIHBlbmFsdHkgb2YgZml2ZQogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hZSB3YXMgdG8gYmUgcGFpZCBpZiBQaG9ybWlvIG5laXRoZXIgc2hpcHBlZCB0aGUgZ29vZHMgbm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHBhaWQgTGFtcGlzLCBhbmQgdGhlIGxlc3NlciBzdW0gaWYgcGF5bWVudCB3YXMgbWFkZSB0byBMYW1waXMgd2l0aG91dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2hpcG1lbnQgb2YgYSByZXR1cm4gY2FyZ28uPC9ub3RlPiB0aG91Z2ggeW91IHdlcmUgdW5kZXIgbm8gbmVjZXNzaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgZG9pbmcgc28/IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzQuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuMzM8L2JpYmw+IHRoYXQgdGhlIGNvbnRyYWN0IGVudGFpbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGEgcGVuYWx0eSBvZiBmaXZlIHRob3VzYW5kIGRyYWNobWFlIGluIGNhc2UgYSByZXR1cm4gY2FyZ28gd2FzIG5vdCBzaGlwcGVkLAogICAgICAgICAgICAgICAgICAgICAgICBidXQgb2YgY291cnNlIHBheW1lbnQgY291bGQgbm90IGhhdmUgYmVlbiBleGFjdGVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+LiBUaGUgc3BlYWtlciBzZWVtcyB0byBpZGVudGlmeQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3ZlcnBheW1lbnQgb2Ygb25lIHRob3VzYW5kIHRocmVlIGh1bmRyZWQgYW5kIHR3ZW50eSBkcmFjaG1hZSB3aXRoIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGVuYWx0eTsgYnV0IHRoZSDigJxvdmVycGF5bWVudOKAnSByZXByZXNlbnRzIGFsbW9zdCBleGFjdGx5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhbW91bnQgb2YgdGhlIG1vbmV5IExhbXBpcyBoYWQgbG9hbmVkIHRvIFBob3JtaW8sIHBsdXMgdGhlIHRoaXJ0eQogICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50IGludGVyZXN0LiBJdCBpcywgb2YgY291cnNlLCBwb3NzaWJsZSB0aGF0IHRoZSBwZW5hbHR5IG9mIGZpdmUKICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgZHJhY2htYWUgd2FzIHRvIGJlIHBhaWQgaWYgUGhvcm1pbyBuZWl0aGVyIHNoaXBwZWQgdGhlIGdvb2RzIG5vcgogICAgICAgICAgICAgICAgICAgICAgICBwYWlkIExhbXBpcywgYW5kIHRoZSBsZXNzZXIgc3VtIGlmIHBheW1lbnQgd2FzIG1hZGUgdG8gTGFtcGlzIHdpdGhvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXBtZW50IG9mIGEgcmV0dXJuIGNhcmdvLjwvdHJhbnNsYXRpb24+"
translation['34.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeW91IGhhZCBubyBmZWFyIG9mIHRob3NlIG1lbiwgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHRoZWlyIGFncmVlbWVudHMgZ2F2ZSB0aGUgcmlnaHQgb2YgZXhhY3RpbmcgcGF5bWVudCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiwgYnV0IGRlY2xhcmUgdGhhdCB5b3UgaGFkIHJlZ2FyZCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgY2xhaW1zIG9mIG15IHBhcnRuZXIsIHRob3VnaCB5b3Ugd3JvbmdlZCBoaW0gYXQgdGhlIG91dHNldCBieSBub3QgcHV0dGluZyBvbgogICAgICAgICAgICAgICAgICAgIGJvYXJkIHRoZSBnb29kcyBhY2NvcmRpbmcgdG8geW91ciBhZ3JlZW1lbnQgaW4gc2V0dGluZyBvdXQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IEFuZCBub3cgdGhhdCB5b3UgaGF2ZSBjb21lIGJhY2sgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcG9ydCB3aGVyZSB0aGUgbG9hbiB3YXMgbWFkZSwgeW91IGRvIG5vdCBoZXNpdGF0ZSB0byBkZWZyYXVkIHRoZSBsZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHlvdSBjbGFpbSB0byBoYXZlIGRvbmUgbW9yZSB0aGFuIGp1c3RpY2UgcmVxdWlyZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIHdoZXJlIHlvdSB3ZXJlIG5vdCBsaWtlbHkgdG8gYmUKICAgICAgICAgICAgICAgICAgICBwdW5pc2hlZD8gPC90cmFuc2xhdGlvbj4="
translation['34.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgb3RoZXIgbWVuIHdobyBib3Jyb3cgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG91dHdhcmQgYW5kIGhvbWV3YXJkIHZveWFnZSwgd2hlbiB0aGV5IGFyZSBhYm91dCB0byBzZXQgc2FpbCBmcm9tIHRoZWlyIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICBwb3J0cywgdGFrZSBjYXJlIHRvIGhhdmUgbWFueSB3aXRuZXNzZXMgcHJlc2VudCwgYW5kIGNhbGwgdXBvbiB0aGVtIHRvIGF0dGVzdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGxlbmRlcidzIHJpc2sgYmVnaW5zIGZyb20gdGhhdCBtb21lbnQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgZnJvbSB0aGUgbW9tZW50IG9mIHNhaWxpbmcuPC9ub3RlPjsgYnV0IHlvdSByZWx5IHVwb24gdGhlIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBvZiB0aGUgdmVyeSBtYW4gd2hvIGlzIHlvdXIgcGFydG5lciBpbiB0aGUgZnJhdWQuIFlvdSBkaWQgbm90IGJyaW5nIGFzCiAgICAgICAgICAgICAgICAgICAgYSB3aXRuZXNzIG15IHNsYXZlIHdobyB3YXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBvciBteSBwYXJ0bmVyLCBub3IgZGlkIHlvdSBkZWxpdmVyIHRvIHRoZW0gdGhlIGxldHRlcnMgd2hpY2ggd2UgZ2F2ZSBpbnRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBjaGFyZ2UsIGFuZCBpbiB3aGljaCB3ZXJlIHdyaXR0ZW4gaW5zdHJ1Y3Rpb25zIHRoYXQgdGhleSBzaG91bGQga2VlcCBjbG9zZSB3YXRjaAogICAgICAgICAgICAgICAgICAgIG9uIHlvdSBpbiB3aGF0ZXZlciB5b3UgbWlnaHQgZG8hIDwvdHJhbnNsYXRpb24+"
translation['34.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoYXQgaXMgdGhlcmUgd2hpY2ggYQogICAgICAgICAgICAgICAgICAgIG1hbiBvZiB0aGlzIHN0YW1wIGlzIG5vdCBjYXBhYmxlIG9mIGRvaW5nLCB3aG8sIGFmdGVyIHJlY2VpdmluZyBsZXR0ZXJzLCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB0aGVtIGluIGR1ZSBhbmQgcHJvcGVyIGNvdXJzZT8gT3IgaG93IGNhbiB5b3UgZmFpbCB0byBzZWUgdGhhdCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYWN0cyBwcm92ZSBoaXMgZ3VpbHQ/IFN1cmVseSDvvIhPIEVhcnRoIGFuZCB0aGUgR29kc++8iSB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIHBheWluZyBiYWNrIHNvIGxhcmdlIGEgc3VtLCBhbmQgbW9yZSB0aGFuIHRoZSBhbW91bnQgb2YgaGlzIGxvYW4sIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGZpdHRpbmcgdGhhdCBoZSBzaG91bGQgbWFrZSBpdCBhIG11Y2ggdGFsa2VkIG9mIGV2ZW50IG9uIHRoZSBleGNoYW5nZSBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBpbnZpdGUgYWxsIG1lbiB0byBiZSBwcmVzZW50OyBidXQgZXNwZWNpYWxseSB0aGUgc2VydmFudCBhbmQgcGFydG5lciBvZgogICAgICAgICAgICAgICAgICAgIENocnlzaXBwdXMuIDwvdHJhbnNsYXRpb24+"
translation['34.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IGFsbCBrbm93LCBJIGZhbmN5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWVuIGJvcnJvdyB3aXRoIGZldyB3aXRuZXNzZXMsIGJ1dCwgd2hlbiB0aGV5IHBheSwgdGhleSB0YWtlIGNhcmUgdG8gaGF2ZSBtYW55CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHByZXNlbnQsIHRoYXQgdGhleSBtYXkgd2luIGEgcmVwdXRhdGlvbiBmb3IgaG9uZXN0eSBpbiBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgIGRlYWxpbmdzLiBCdXQgaW4geW91ciBjYXNlLCB3aGVuIHlvdSB3ZXJlIHBheWluZyBiYWNrIGJvdGggdGhlIGRlYnQgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyZXN0IG9uIGJvdGggdm95YWdlcywgdGhvdWdoIHlvdSBoYWQgdXNlZCB0aGUgbW9uZXkgZm9yIHRoZSBvdXR3YXJkIHZveWFnZQogICAgICAgICAgICAgICAgICAgIG9ubHksIGFuZCB3ZXJlIGFkZGluZyB0aGlydGVlbiBtaW5hZSBiZXNpZGVzLCBzaG91bGQgeW91IG5vdCBoYXZlIGNhdXNlZCBtYW55CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRvIGJlIHByZXNlbnQ/IEhhZCB5b3UgZG9uZSBzbywgdGhlcmUgaXMgbm90IGEgc2luZ2xlIG1lcmNoYW50IHdobwogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgYmVlbiBoZWxkIGluIGhpZ2hlciBlc3RlZW0gdGhhbiB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['34.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IHdhcywgaW5zdGVhZCBvZiBzZWN1cmluZyBtYW55IHdpdG5lc3NlcyB0byB0aGVzZSBhY3RzIHlvdSBkaWQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIHlvdSBjb3VsZCB0aGF0IG5vbmUgc2hvdWxkIGtub3csIGFzIHRob3VnaCB5b3Ugd2VyZSBjb21taXR0aW5nIHNvbWUKICAgICAgICAgICAgICAgICAgICBjcmltZSEgQWdhaW4sIGhhZCB5b3UgYmVlbiBtYWtpbmcgcGF5bWVudCB0byBtZSwgeW91ciBjcmVkaXRvciwgaW4gcGVyc29uLCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgYmVlbiBubyBuZWVkIG9mIHdpdG5lc3NlcywgZm9yIHlvdSB3b3VsZCBoYXZlIHRha2VuIGJhY2sgdGhlCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50IGFuZCBzbyBnb3QgcmlkIG9mIHRoZSBvYmxpZ2F0aW9uOyB3aGVyZWFzIGluIG1ha2luZyBwYXltZW50LCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBtZSwgYnV0IHRvIGFub3RoZXIgb24gbXkgYmVoYWxmLCBhbmQgbm90IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBidXQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIHdoZW4geW91ciBhZ3JlZW1lbnQgd2FzIGRlcG9zaXRlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIHdpdGggbWUsIGFuZCB3aGVuIHRoZSBtYW4gdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHlvdSBwYWlkIHRoZSBtb25leSB3YXMgbW9ydGFsIGFuZCBhYm91dCB0byB1bmRlcnRha2UgYSB2b3lhZ2Ugb3ZlciBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBzdHJldGNoIG9mIHNlYSwgeW91IGNhbGxlZCBubyBvbmUgYXMgYSB3aXRuZXNzLCB3aGV0aGVyIHNsYXZlIG9yIGZyZWVtYW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIGhlIHNheXMsIGZvciB0aGUgYWdyZWVtZW50IGJhZGUgbWUKICAgICAgICAgICAgICAgICAgICBwYXkgdGhlIGNhc2ggdG8gdGhlIHNoaXBvd25lci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBpcyBiZXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxhaW5lZCBieSBhc3N1bWluZyB0aGF0IHRoZSBjb250cmFjdCBnYXZlIFBob3JtaW8gdGhlIHJpZ2h0IHRvIHBheSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbW9uZXkgdG8gTGFtcGlzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+LCBpZiBoZQogICAgICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHNoaXAgYSByZXR1cm4gY2FyZ28gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+Ljwvbm90ZT4gQnV0IGl0IGRpZCBub3QgcHJldmVudCB5b3UgZnJvbSBzdW1tb25pbmcKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIG9yIGZyb20gZGVsaXZlcmluZyB0aGUgbGV0dGVycyEgVGhlIHBhcnRpZXMgaGVyZSBwcmVzZW50PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpZCBub3Qgc2hpcCBhIHJldHVybiBjYXJnbyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWZlcmVuY2UgaXMgbm90IHdob2xseSBjbGVhci4gSXQgbWF5IGJlIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzIHRoYW4gQ2hyeXNpcHB1cyBhbmQgaGlzIHBhcnRuZXIgaGFkIGNvbnRyaWJ1dGVkIHRvIHRoZSBzdW0gbGVudCB0bwogICAgICAgICAgICAgICAgICAgICAgICBQaG9ybWlvLjwvbm90ZT4gZHJldyB1cCB0d28gYWdyZWVtZW50cyB3aXRoIHlvdSBpbiB0aGUgbWF0dGVyIG9mIHRoZSBsb2FuLAogICAgICAgICAgICAgICAgICAgIHNob3dpbmcgdGhhdCB0aGV5IGdyZWF0bHkgZGlzdHJ1c3RlZCB5b3UsIGJ1dCB5b3UgYXNzZXJ0IHRoYXQgd2l0aG91dCBhIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3MgeW91IHBhaWQgdGhlIGdvbGQgdG8gdGhlIHNoaXBvd25lciwgYWx0aG91Z2ggeW91IHdlbGwga25vdyB0aGF0IGFuCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50IGFnYWluc3QgeW91cnNlbGYgd2FzIGRlcG9zaXRlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2l0aCBteSBjb2xsZWFndWUgaGVyZSEgPC90cmFuc2xhdGlvbj4="
translation['34.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgc2F5cyB0aGF0IHRoZSBhZ3JlZW1lbnQgYmlkcyBoaW0gcGF5CiAgICAgICAgICAgICAgICAgICAgYmFjayB0aGUgbW9uZXksIOKAnHdoZW4gdGhlIHNoaXAgcmVhY2hlcyBwb3J0IGluIHNhZmV0eS7igJ0gWWVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBpdCBiaWRzIHlvdSBhbHNvIHRvIHB1dCBvbiBib2FyZCB0aGUgc2hpcCB0aGUgZ29vZHMgcHVyY2hhc2VkLCBvciBlbHNlIHRvCiAgICAgICAgICAgICAgICAgICAgcGF5IGEgZmluZSBvZiBmaXZlIHRob3VzYW5kIGRyYWNobWFlLiBZb3UgaWdub3JlIHRoaXMgY2xhdXNlIGluIHRoZSBhZ3JlZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFmdGVyIGhhdmluZyBmcm9tIHRoZSBmaXJzdCB2aW9sYXRlZCBpdHMgcHJvdmlzaW9ucyBieSBmYWlsaW5nIHRvIHB1dCB0aGUKICAgICAgICAgICAgICAgICAgICBnb29kcyBvbiBib2FyZCwgeW91IHJhaXNlIGEgZGlzcHV0ZSBhYm91dCBhIHNpbmdsZSBwaHJhc2UgaW4gaXQsIHRob3VnaCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJ5IHlvdXIgb3duIGFjdCByZW5kZXJlZCBpdCBudWxsIGFuZCB2b2lkLiBGb3Igd2hlbiB5b3Ugc3RhdGUgdGhhdCB5b3UgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHB1dCB0aGUgZ29vZHMgb24gYm9hcmQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIGJ1dAogICAgICAgICAgICAgICAgICAgIHBhaWQgdGhlIGNhc2ggdG8gdGhlIHNoaXBvd25lciwgd2h5IGRvIHlvdSBzdGlsbCBnbyBvbiB0YWxraW5nIGFib3V0IHRoZSBzaGlwPwogICAgICAgICAgICAgICAgICAgIEZvciB5b3UgaGF2ZSBoYWQgbm8gc2hhcmUgaW4gdGhlIHJpc2ssIHNpbmNlIHlvdSBwdXQgbm90aGluZyBvbiBib2FyZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCBmaXJzdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGUgc2VpemVkIHVwb24gdGhpcyBleGN1c2UsCiAgICAgICAgICAgICAgICAgICAgcHJldGVuZGluZyB0aGF0IGhlIGhhZCBzaGlwcGVkIHRoZSBnb29kczsgYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlIGZhbHNpdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGNsYWltIHdhcyBsaWtlbHkgdG8gYmUgZXhwb3NlZCBpbiBtYW55IHdheXMs4oCUYnkgdGhlIGVudHJ5IGZpbGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaGFyYm9yLW1hc3RlcnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IHRoZSB0ZXN0aW1vbnkgb2YgdGhvc2Ugd2hvIHdlcmUgc3RheWluZyBpbiB0aGUgcG9ydCBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWXigJR0aGVuIGhlIGNoYW5nZXMgaGlzIHRhY2ssIGVudGVycyBpbnRvIGEgY29uc3BpcmFjeSB3aXRoIExhbXBpcywKICAgICAgICAgICAgICAgICAgICBhbmQgZGVjbGFyZXMgdGhhdCBoZSBoYXMgcGFpZCBoaW0gdGhlIG1vbmV5IGluIGNhc2gsIDwvdHJhbnNsYXRpb24+"
translation['34.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5maW5kaW5nIGEgc3VwcG9ydCBmb3IgaGlzIHBsZWEgaW4gdGhlIGZhY3QgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQgc28gb3JkZXJlZCwgYW5kIHRoaW5raW5nIHRoYXQgd2Ugc2hvdWxkIG5vdCBmaW5kIGl0IGVhc3kgdG8gZ2V0IGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoIHJlZ2FyZGluZyBhbGwgdGhhdCB0aGV5IGRpZCBieSB0aGVtc2VsdmVzIGFsb25lLiBBbmQgTGFtcGlzIGRlY2xhcmVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhhdCBoZSBzYWlkIHRvIG1lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkVpdGhlciB0aGUgc3BlYWtlciB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBDaHJ5c2lwcHVzIGF0IHRoZSB0aW1lIExhbXBpcyBtYWRlIHRoaXMgc3RhdGVtZW50LCBvciBlbHNlIENocnlzaXBwdXMKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm93IGFnYWluIHRoZSBzcGVha2VyLjwvbm90ZT4gYmVmb3JlIGhlIHdhcyBjb3JydXB0ZWQgYnkgdGhpcyBQaG9ybWlvIHdhcwogICAgICAgICAgICAgICAgICAgIHNwb2tlbiB3aGVuIGhlIHdhcyBvdXQgb2YgaGlzIGhlYWQ7IGJ1dCBhcyBzb29uIGFzIGhlIGdvdCBhIHNoYXJlIG9mIG15IG1vbmV5LAogICAgICAgICAgICAgICAgICAgIGhlIGRlY2xhcmVzIHRoYXQgaGUgaXMgaW4gaGlzIHJpZ2h0IG1pbmQgYW5kIHJlbWVtYmVycyBldmVyeXRoaW5nIHBlcmZlY3RseSEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgaWYgaXQgd2VyZSB0b3dhcmQgbXlzZWxmIG9ubHkgdGhhdCBMYW1waXMgd2VyZSBzaG93aW5nIGNvbnRlbXB0LCBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIG5vdGhpbmcgdG8gY2F1c2Ugc3VycHJpc2U7IGJ1dCBpbiByZWFsaXR5IGhlIGhhcyBhY3RlZCBmYXIgbW9yZQogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXNseSB0aGFuIFBob3JtaW8gdG93YXJkIHlvdSBhbGwuIEZvciB3aGVuIFBhZXJpc2FkZXMgaGFkIHB1Ymxpc2hlZCBhCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IHRoYXQgd2hvZXZlciB3aXNoZWQKICAgICAgICAgICAgICAgICAgICB0byB0cmFuc3BvcnQgZ3JhaW4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBtYXJrZXQgbWlnaHQgZXhwb3J0IGl0IGZyZWUgb2YgZHV0eSwgTGFtcGlzLCB3aG8gd2FzIGF0IHRoZSB0aW1lIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+LCBvYnRhaW5lZCBwZXJtaXNzaW9uIHRvCiAgICAgICAgICAgICAgICAgICAgZXhwb3J0IGdyYWluIGFuZCB0aGUgZXhlbXB0aW9uIGZyb20gZHV0eSBpbiB0aGUgbmFtZSBvZiB0aGUgc3RhdGU7IGFuZCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBsb2FkZWQgYSBsYXJnZSB2ZXNzZWwgd2l0aCBncmFpbiwgY2FycmllZCBpdCB0byBBY2FudGh1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHRvd24gaW4gQ2hhbGNpZGljw6ouPC9ub3RlPiBhbmQgdGhlcmUgZGlzcG9zZWQgb2YKICAgICAgICAgICAgICAgICAgICBpdCzigJRoZSwgd2hvIGhhZCBtYWRlIGhpbXNlbGYgdGhlIHBhcnRuZXIgb2YgUGhvcm1pbyBoZXJlIHdpdGggb3VyCiAgICAgICAgICAgICAgICAgICAgbW9uZXkuIDwvdHJhbnNsYXRpb24+"
translation['34.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgZGlkIHRoaXMsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggaGUgd2FzIHJlc2lkZW50IGF0IEF0aGVucywgYW5kIGhhZCBhIHdpZmUgYW5kIGNoaWxkcmVuIGhlcmUsIGFuZCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIGhhdmUgcHJlc2NyaWJlZCB0aGUgc2V2ZXJlc3QgcGVuYWx0aWVzIGlmIGFueW9uZSByZXNpZGVudCBhdCBBdGhlbnMKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdHJhbnNwb3J0IGdyYWluIHRvIGFueSBvdGhlciBwbGFjZSB0aGFuIHRvIHRoZSBBdGhlbmlhbiBtYXJrZXQ7IGJlc2lkZXMsCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIHRoaXMgYXQgYSBjcml0aWNhbCB0aW1lLCB3aGVuIHRob3NlIG9mIHlvdSB3aG8gZHdlbHQgaW4gdGhlIGNpdHkgd2VyZQogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0aGVpciBiYXJsZXktbWVhbCBtZWFzdXJlZCBvdXQgdG8gdGhlbSBpbiB0aGUgT2RldW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlIGxlYXJuIGZyb20gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvcGguIFdhc3BzIDExMDkiIHZhbGlkPSJ5ZXMiPkFyaXN0b3BoLiBXYXNwcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTEwOTwvYmlibD4sIHRoYXQgdGhlIE9kZXVtLCBidWlsdCBieSBQZXJpY2xlcyBhcyBhIG11c2ljIHNjaG9vbCwgbmVhcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ3JlYXQgdGhlYXRyZSwgd2FzIHNvbWV0aW1lcyB1c2VkIGFzIGEgbGF3LWNvdXJ0LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUG9sbC4gOC4zMyI+UG9sbHV4IDguMzM8L2JpYmw+LCBzdGF0ZXMgdGhhdCBzdWl0cyBjb25jZXJuaW5nIGdyYWluCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgZGVjaWRlZCB0aGVyZS4gQ29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU5LjUyIiB2YWxpZD0ieWVzIj5EZW0uIDU5LjUyPC9iaWJsPi4gSXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgZWFzeSwgdGhlcmVmb3JlLCB0byBhc3N1bWUgdGhhdCBkaXN0cmlidXRpb24gb2YgZ3JhaW4gbWF5IGhhdmUgYmVlbiBtYWRlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlLjwvbm90ZT4gYW5kIHRob3NlIHdobyBkd2VsdCBpbiBQZWlyYWV1cyB3ZXJlIHJlY2VpdmluZyB0aGVpciBsb2F2ZXMgYXQKICAgICAgICAgICAgICAgICAgICBhbiBvYm9sIGVhY2ggaW4gdGhlIGRvY2t5YXJkIGFuZCBpbiB0aGUgbG9uZy1wb3JjaCw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG9waC4gV2FzcHMgMTEwOSIgdmFsaWQ9InllcyI+QXJpc3RvcGguIFdhc3BzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMTA5PC9iaWJsPiwgdGhhdCB0aGUgT2RldW0sIGJ1aWx0IGJ5IFBlcmljbGVzIGFzIGEgbXVzaWMgc2Nob29sLCBuZWFyCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdCB0aGVhdHJlLCB3YXMgc29tZXRpbWVzIHVzZWQgYXMgYSBsYXctY291cnQsIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQb2xsLiA4LjMzIj5Qb2xsdXggOC4zMzwvYmlibD4sIHN0YXRlcyB0aGF0IHN1aXRzIGNvbmNlcm5pbmcgZ3JhaW4KICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBkZWNpZGVkIHRoZXJlLiBDb21wYXJlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTkuNTIiIHZhbGlkPSJ5ZXMiPkRlbS4gNTkuNTI8L2JpYmw+LiBJdCBpcwogICAgICAgICAgICAgICAgICAgICAgICBlYXN5LCB0aGVyZWZvcmUsIHRvIGFzc3VtZSB0aGF0IGRpc3RyaWJ1dGlvbiBvZiBncmFpbiBtYXkgaGF2ZSBiZWVuIG1hZGUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBsb25nLXBvcmNoIHdhcyBhIHdhcmVob3VzZSBmb3IgZ3JhaW4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlaXJhZXVzLjwvbm90ZT4gaGF2aW5nIHRoZWlyIG1lYWwgbWVhc3VyZWQgb3V0IHRvIHRoZW0gYSBnYWxsb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGl0ZXJhbGx5IGEgaGFsZi1zaXh0aCDvvIhpLmUuCiAgICAgICAgICAgICAgICAgICAgICAgIG9uZS10d2VsZnRo77yJIG9mIGEgbWVkaW1udXMsIGEgbWVhc3VyZSBjb250YWluaW5nIGFib3V0IHR3ZWx2ZQogICAgICAgICAgICAgICAgICAgICAgICBnYWxsb25zLjwvbm90ZT4gYXQgYSB0aW1lLCBhbmQgYmVpbmcgbmVhcmx5IHRyYW1wbGVkIHRvIGRlYXRoLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBwcm9vZiB0aGF0IG15IHdvcmRzIGFyZSB0cnVlLCB0YWtlLCBwbGVhc2UsIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gYW5kIHRoZSBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGhvcm1pbywgdGhlbiwKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBoZWxwIG9mIHRoaXMgZmVsbG93IGFzIGhpcyBhY2NvbXBsaWNlIGFuZCB3aXRuZXNzLCB0aGlua3MgcHJvcGVyIHRvIHJvYgogICAgICAgICAgICAgICAgICAgIHVzIG9mIG91ciBtb25leeKAlHVzLCB3aG8gaGF2ZSBjb250aW51YWxseSBicm91Z2h0IGdyYWluIHRvIHlvdXIgbWFya2V0LAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG8gaW4gdGhyZWUgY3Jpc2VzIHdoaWNoIGhhdmUgY29tZSB1cG9uIHRoZSBzdGF0ZSwgZHVyaW5nIHdoaWNoIHlvdSBwdXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgdGVzdCB0aG9zZSB3aG8gd2VyZSBvZiBzZXJ2aWNlIHRvIHRoZSBwZW9wbGUsIGhhdmUgbm90IG9uY2UgYmVlbiBmb3VuZAogICAgICAgICAgICAgICAgICAgIHdhbnRpbmcuIE5heSwgd2hlbiBBbGV4YW5kZXIgZW50ZXJlZCBUaGViZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM1NSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM1NSI+MzU1PC9kYXRlPiBCLkMuPC9ub3RlPiB3ZSBtYWRlIHlvdSBhIGZyZWUgZ2lmdCBvZiBhCiAgICAgICAgICAgICAgICAgICAgdGFsZW50IGluIGNhc2g7IDxkYXRlIGF1dGhuYW1lPSItMzU1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU1Ij4zNTU8L2RhdGU+IEIuQy48L3RyYW5zbGF0aW9uPg=="
translation['34.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiBncmFpbiBlYXJsaWVyCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQgaW4gcHJpY2UgYW5kIHJlYWNoZWQgc2l4dGVlbiBkcmFjaG1hZSwgd2UgaW1wb3J0ZWQgbW9yZSB0aGFuIHRlbgogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIG1lZGltbmkgb2Ygd2hlYXQsIGFuZCBtZWFzdXJlZCBpdCBvdXQgdG8geW91IGF0IHRoZSBub3JtYWwgcHJpY2Ugb2YKICAgICAgICAgICAgICAgICAgICBmaXZlIGRyYWNobWFlIGEgbWVkaW1udXMsIGFuZCB5b3UgYWxsIGtub3cgdGhhdCB5b3UgaGFkIHRoaXMgbWVhc3VyZWQgb3V0IHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBQb21wZWl1bS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgYSBoYWxsIG5lYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIERpcHlsb24sIGluIHdoaWNoIHRoZSBkcmVzc2VzIGFuZCBvdGhlciBwcm9wZXJ0aWVzIHVzZWQgaW4gdGhlIFBhbmF0aGVuYWljCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npb24g77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOv868z4DhvbU8L2ZvcmVpZ24+77yJIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAga2VwdC48L25vdGU+IEFuZCBsYXN0IHllYXIgbXkgYnJvdGhlciBhbmQgSSBtYWRlIGEgZnJlZSBnaWZ0IG9mIGEgdGFsZW50IHRvCiAgICAgICAgICAgICAgICAgICAgYnV5IGdyYWluIGZvciB0aGUgcGVvcGxlLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Azr/OvM+A4b21PC9mb3JlaWduPu+8iSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGtlcHQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQsIHBsZWFzZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMgd2hpY2ggZXN0YWJsaXNoIHRoZXNlIGZhY3RzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VyZWx5LCBpZiBhbnkKICAgICAgICAgICAgICAgICAgICBpbmZlcmVuY2UgbWF5IGJlIGJhc2VkIHVwb24gdGhlc2UgZmFjdHMsIGl0IGlzIG5vdCBsaWtlbHkgdGhhdCB3ZSBzaG91bGQgZnJlZWx5CiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBzdWNoIGxhcmdlIHN1bXMgaW4gb3JkZXIgdG8gd2luIGEgZ29vZCBuYW1lIGFtb25nIHlvdSwgYW5kIHRoZW4gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgYSBmYWxzZSBhY2N1c2F0aW9uIGFnYWluc3QgUGhvcm1pbyBpbiBvcmRlciB0byB0aHJvdyBhd2F5IGV2ZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBmb3IgaG9ub3JhYmxlIGRlYWxpbmcgd2hpY2ggd2UgaGFkIHdvbi4gSXQgaXMgcmlnaHQsIHRoZXJlZm9yZSwgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBzaG91bGQgY29tZSB0byBvdXIgYWlkLCBtZW4gb2YgdGhlIGp1cnkuIEkgaGF2ZSBzaG93biB5b3UgdGhhdCBQaG9ybWlvIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHBsYWNlIGRpZCBub3QgcHV0IG9uIGJvYXJkIHRoZSB2ZXNzZWwgZ29vZHMgdG8gdGhlIHZhbHVlIG9mIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBsb2FucyB3aGljaCBoZSBoYWQgc2VjdXJlZCBhdCBBdGhlbnMsIGFuZCB0aGF0IHdpdGggdGhlIHByb2NlZWRzIGZyb20gdGhlIGdvb2RzCiAgICAgICAgICAgICAgICAgICAgc29sZCBpbiBCb3Nwb3J1cyBoZSB3aXRoIGRpZmZpY3VsdHkgc2F0aXNmaWVkIGhpcyBjcmVkaXRvcnMgd2hvIGhhZCBsZW50IG1vbmV5CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBvdXR3YXJkIHZveWFnZTsgPC90cmFuc2xhdGlvbj4="
translation['34.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5mdXJ0aGVyLCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCB3ZWxsIG9mZiwgYW5kIG5vdCBzbyBmb29saXNoIGFzIHRvIHBheSB0aGlydHktbmluZSBtaW5hZSBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAgICAgdHdlbnR5LXNpeCBodW5kcmVkIGRyYWNobWFlOyBhbmQgYmVzaWRlcyBhbGwgdGhpcywgdGhhdCB3aGVuLCBhcyBoZSBzYXlzLCBoZQogICAgICAgICAgICAgICAgICAgIHBhaWQgdGhlIG1vbmV5IHRvIExhbXBpcyBoZSBzdW1tb25lZCBuZWl0aGVyIG15IHNsYXZlIG5vciBteSBwYXJ0bmVyLCB3aG8gd2FzIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRpbWUgaW4gQm9zcG9ydXMsIGFzIGEgd2l0bmVzcy4gQWdhaW4sIExhbXBpcyBoaW1zZWxmIGlzIHNob3duIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZWQgdG8gbWUsIGJlZm9yZSBoZSB3YXMgY29ycnVwdGVkIGJ5IFBob3JtaW8sIHRoYXQgaGUgaGFkIG5vdCByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leS4gPC90cmFuc2xhdGlvbj4="
translation['34.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzcGVha2VyIGlzIGFib3V0IHRvIHJldHVybiB0byB0aGUgYXJndW1lbnQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCBwbGVhIHdhcyBpbmFkbWlzc2libGUuIEhlIHNheXMsIGluIGVmZmVjdCwgSSBoYXZlIHNob3duIHRoYXQgUGhvcm1pbwogICAgICAgICAgICAgICAgICAgICAgICBpcyBndWlsdHkuIElmIGhlIGhhZCBiZWVuIGFibGUgdG8gcHJvdmUgaGlzIGNhc2UgYXMgY2xlYXJseSDvvIhpLmUuCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzdWl0IGFzIGluc3RpdHV0ZWTvvIkgaXQgd291bGQgaGF2ZSBiZWVuIGhpcyBiZXN0IGRlZmVuY2UuIEhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBkbyBzbywgYW5kIHRoZXJlZm9yZSBoYWQgcmVjb3Vyc2UgdG8gYSBzcGVjaWFsIHBsZWEsIGFyZ3VpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBteSBzdWl0IGNvdWxkIG5vdCBiZSBicm91Z2h0IGludG8gY291cnQuIFRoaXMsIGhvd2V2ZXIsIGlzIGluYWRtaXNzaWJsZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBjb3Vyc2UgaW4gZW50ZXJpbmcgaXQgcHJvdmVzIHRoYXQgaGUgaGFkIG5vIGRlZmVuY2UuPC9ub3RlPiBpZiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aHVzIHRvIHByb3ZlIGhpcyBjYXNlIHBvaW50IGJ5IHBvaW50LCBJIGRvIG5vdCBzZWUgd2hhdCBiZXR0ZXIgZGVmZW5jZSBoZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGhhdmUgbWFkZS4gQnV0IHRoYXQgdGhlIGFjdGlvbiBpcyBhZG1pc3NpYmxlIHRoZSBsYXcgaXRzZWxmIHNvbGVtbmx5CiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZXMsIHdoZW4gaXQgbWFpbnRhaW5zIHRoYXQgbWVyY2FudGlsZSBhY3Rpb25zIGFyZSB0aG9zZSBmb3IgY29udHJhY3RzIG1hZGUKICAgICAgICAgICAgICAgICAgICBhdCBBdGhlbnMgb3IgZm9yIHRoZSBBdGhlbmlhbiBtYXJrZXQsIGFuZCBub3Qgb25seSB0aG9zZSBtYWRlIGF0IEF0aGVucywgYnV0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQgYXJlIG1hZGUgZm9yIHRoZSBwdXJwb3NlIG9mIGEgdm95YWdlIHRvIEF0aGVucy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHRha2UgdGhlIGxhd3MuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFjdCBoYXMgYmVlbiBlbnRlcmVkIGludG8gYmV0d2VlbiBQaG9ybWlvIGFuZCBteXNlbGYgYXQgQXRoZW5zIGV2ZW4gb3VyCiAgICAgICAgICAgICAgICAgICAgb3Bwb25lbnRzIHRoZW1zZWx2ZXMgZG8gbm90IGRlbnksIGJ1dCB0aGV5IGVudGVyIGEgc3BlY2lhbCBwbGVhIGFsbGVnaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgYWN0aW9uIGlzIG5vdCBhZG1pc3NpYmxlLiBCdXQgdG8gd2hhdCB0cmlidW5hbCBzaGFsbCB3ZSBjb21lLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgaWYgbm90IHRvIHlvdSwgc2luY2UgaXQgd2FzIGhlcmUgaW4gQXRoZW5zIHRoYXQgd2UgbWFkZSBvdXIgY29udHJhY3Q/IEl0CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgaGFyZCBpbmRlZWQgdGhhdCwgaWYgYSB3cm9uZyBoYWQgYmVlbiBkb25lIG1lIGluIGNvbm5lY3Rpb24gd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgdm95YWdlIHRvIEF0aGVucywgSSBzaG91bGQgYmUgYWJsZSB0byBnZXQgc2F0aXNmYWN0aW9uIGZyb20gUGhvcm1pbyBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgY291cnQsIGJ1dCwgd2hlbiB0aGUgY29udHJhY3QgaGFzIGJlZW4gbWFkZSBpbiB5b3VyIG1hcmtldCwgdGhlc2UgbWVuIHNob3VsZCBzYXkKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2lsbCBub3QgYmUgdHJpZWQgYmVmb3JlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['34.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuCiAgICAgICAgICAgICAgICAgICAgd2UgcmVmZXJyZWQgdGhlIGNhc2UgdG8gVGhlb2RvdHVzIGZvciBhcmJpdHJhdGlvbiwgdGhleSBhZG1pdHRlZCB0aGF0IG15IGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlbSB3YXMgYWRtaXNzaWJsZTsgYnV0IG5vdyB0aGV5IHNheSB3aGF0IGlzIHRoZSBkaXJlY3Qgb3Bwb3NpdGUgb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZXkgaGF2ZSB0aGVtc2VsdmVzIGJlZm9yZSBhZG1pdHRlZDsgYXMgaWYsIGZvcnNvb3RoLCBpdCB3ZXJlIHByb3BlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBzaG91bGQgYmUgdHJpZWQgYmVmb3JlIFRoZW9kb3R1cywgdGhlIHByaXZpbGVnZWQgYWxpZW4sIHdpdGhvdXQgYSBzcGVjaWFsCiAgICAgICAgICAgICAgICAgICAgcGxlYSwgYnV0LCB3aGVuIHdlIGVudGVyIHRoZSBBdGhlbmlhbiBjb3VydCwgdGhlIGFjdGlvbiBzaG91bGQgbm8gbG9uZ2VyIGJlCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['34.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5JIGZvciBteSBwYXJ0IGFtIHRyeWluZyB0bwogICAgICAgICAgICAgICAgICAgIGNvbmNlaXZlIHdoYXQgaW4gdGhlIHdvcmxkIGhlIHdvdWxkIGhhdmUgd3JpdHRlbiBpbiB0aGUgc3BlY2lhbCBwbGVhLCBpZgogICAgICAgICAgICAgICAgICAgIFRoZW9kb3R1cyBoYWQgZGlzbWlzc2VkIHRoZSBzdWl0LCB3aGVuIG5vdywgYWZ0ZXIgVGhlb2RvdHVzIGhhcyBkZWNyZWVkIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgZ28gaW50byBjb3VydCwgaGUgZGVjbGFyZXMgdGhhdCB0aGUgYWN0aW9uIGlzIG5vdCBvbmUgdGhhdCBjYW4gYmUgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3UsIHRvIHdob20gVGhlb2RvdHVzIGJhZGUgdXMgZ28uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmLAogICAgICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgcHJlc2VudCBjaXJjdW1zdGFuY2VzLCBQaG9ybWlvJ3MgaW5zb2xlbmNlIGlzIHNvIGdyZWF0LCB3aG8gY2FuCiAgICAgICAgICAgICAgICAgICAgICAgIHNheSB3aGF0IGl0IHdvdWxkIGhhdmUgYmVlbiwgaGFkIHRoZSBhcmJpdHJhdG9yIGRlY2lkZWQgaW4gaGlzIGZhdm9yPzwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBTdXJlbHkgSSBzaG91bGQgc3VmZmVyIG1vc3QgY3J1ZWwgdHJlYXRtZW50IGlmLCB3aGVuIHRoZSBsYXdzIGRlY2xhcmUgdGhhdCBzdWl0cwogICAgICAgICAgICAgICAgICAgIGdyb3dpbmcgb3V0IG9mIGNvbnRyYWN0cyBtYWRlIGF0IEF0aGVucyBzaGFsbCBiZSBicm91Z2h0IGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBUaGVzbW90aGV0YWUsIHlvdSwgd2hvIGhhdmUgc3dvcm4gdG8gZGVjaWRlIGFjY29yZGluZyB0byB0aGUgbGF3cywgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZGlzbWlzcyB0aGUgc3VpdC4gPC90cmFuc2xhdGlvbj4="
translation['34.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB3ZSBsZW50IHRoZSBtb25leSBpcyBhdHRlc3RlZCBieSB0aGUgYWdyZWVtZW50LCBhbmQgYnkKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGhpbXNlbGY7IHRoYXQgaXQgaGFzIGJlZW4gcmVwYWlkIGlzIGF0dGVzdGVkIGJ5IG5vIG9uZSBleGNlcHQgTGFtcGlzLAogICAgICAgICAgICAgICAgICAgIHdobyBpcyBhbiBhY2NvbXBsaWNlIGluIHRoZSBjcmltZS4gUGhvcm1pbyBjbGFpbXMgdG8gcHJvdmUgdGhlIHBheW1lbnQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IG9mIExhbXBpcyBhbG9uZSwgYnV0IEkgYWRkdWNlIExhbXBpcyBhbmQgdGhvc2Ugd2hvIGhlYXJkIGhpbSBkZWNsYXJlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYWQgbm90IHJlY2VpdmVkIHRoZSBtb25leS4gRnVydGhlciwgUGhvcm1pbyBpcyBpbiBhIHBvc2l0aW9uIHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgbXkgd2l0bmVzc2VzIHRvIHRyaWFsLCBpZiBoZSBtYWludGFpbnMgdGhhdCB0aGVpciB0ZXN0aW1vbnkgaXMgZmFsc2UsIGJ1dCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBubyBtZWFucyBvZiBkZWFsaW5nIHdpdGggaGlzIHdpdG5lc3Nlcywgd2hvIHNheSB0aGV5IGtub3cgdGhhdCBMYW1waXMgdGVzdGlmaWVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgdGhlIG1vbmV5LiBJZiBMYW1waXMncyBvd24gZGVwb3NpdGlvbiBoYWQgYmVlbiBwdXQgaW50bwogICAgICAgICAgICAgICAgICAgICAgICBjb3VydCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2hlbiB0aGUgYXJiaXRyYXRvciBkZXRlcm1pbmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2UgYmVmb3JlIGhpbSBzaG91bGQgYmUgdHJpZWQgaW4gY291cnQsIGhlIHNlYWxlZCBpbiB0d28gamFycywgb3IKICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXMg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4fhv5bOvc6/zrk8L2ZvcmVpZ24+77yJLCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzIGJlYXJpbmcgdXBvbiB0aGUgY2FzZS4gT25lIG9mIHRoZXNlIHdhcyBhc3NpZ25lZCB0byBlaXRoZXIgcGFydHkKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHN1aXQsIGFuZCBvbmx5IHN1Y2ggZGVwb3NpdGlvbnMsIGNpdGF0aW9ucyBvZiBsYXdzLCBvciBjaGFsbGVuZ2VzLCBhcwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIGNvbnRhaW5lZCBpbiB0aGVtLCBtaWdodCBiZSBpbnRyb2R1Y2VkIGF0IHRoZSB0cmlhbC48L25vdGU+IHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIHdvdWxkIHBlcmhhcHMgaGF2ZSBzYWlkIHRoYXQgSSBvdWdodCB0byBwcm9zZWN1dGUgaGltIGZvciBnaXZpbmcgZmFsc2UKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnk7IGJ1dCwgYXMgaXQgaXMsIEkgaGF2ZSBub3QgdGhpcyBkZXBvc2l0aW9uLCBhbmQgUGhvcm1pbyB0aGlua3MgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgZ2V0IG9mZiB1bnNjYXRoZWQsIHNpbmNlIGhlIGhhcyBsZWZ0IG5vIHZhbGlkIHNlY3VyaXR5IGZvciB0aGUgdmVyZGljdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIHVyZ2VzIHlvdSB0byBwcm9ub3VuY2UuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4fhv5bOvc6/zrk8L2ZvcmVpZ24+77yJLCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzIGJlYXJpbmcgdXBvbiB0aGUgY2FzZS4gT25lIG9mIHRoZXNlIHdhcyBhc3NpZ25lZCB0byBlaXRoZXIgcGFydHkKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHN1aXQsIGFuZCBvbmx5IHN1Y2ggZGVwb3NpdGlvbnMsIGNpdGF0aW9ucyBvZiBsYXdzLCBvciBjaGFsbGVuZ2VzLCBhcwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIGNvbnRhaW5lZCBpbiB0aGVtLCBtaWdodCBiZSBpbnRyb2R1Y2VkIGF0IHRoZSB0cmlhbC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGhvcm1pbyByZWxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGUgdGVzdGltb255IG9mIExhbXBpcy4gVW5kZXIgdGhlIGNpcmN1bXN0YW5jZXMgaXQgaXMgaW1wb3NzaWJsZSBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgbWUgdG8gc3VlIExhbXBpcyBmb3IgcGVyanVyeSwgaW4gd2hpY2ggY2FzZSBQaG9ybWlvIG1pZ2h0IGJlIHByb3NlY3V0ZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGx1c2lvbi4gSGUgdGhlcmVmb3JlIGhvcGVzIHRvIGdldCBvZmYgc2NvdC1mcmVlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBpdCBub3QgaW5kZWVkIGJlIGFic3VyZCBpZiwgd2hlbiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgYWRtaXRzIHRoYXQgaGUgYm9ycm93ZWQsIGJ1dCBhbGxlZ2VzIHRoYXQgaGUgaGFzIG1hZGUgcGF5bWVudCwgeW91IHNob3VsZCBtYWtlCiAgICAgICAgICAgICAgICAgICAgb2Ygbm9uZSBlZmZlY3QgdGhhdCB3aGljaCBoZSBoaW1zZWxmIGFkbWl0cyBhbmQgYnkgeW91ciB2b3RlIGdpdmUgZWZmZWN0IHRvIHdoYXQKICAgICAgICAgICAgICAgICAgICBpcyB1bmRlciBkaXNwdXRlPyBBbmQgaWYsIHdoZW4gTGFtcGlzLCBvbiB3aG9zZSB0ZXN0aW1vbnkgbXkgb3Bwb25lbnQgcmVsaWVzLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGF0IGZpcnN0IGRlbnlpbmcgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgdGhlIG1vbmV5LCBub3cgdGVzdGlmaWVzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5LCB5b3Ugc2hvdWxkIGRldGVybWluZSB0aGF0IGhlIGhhcyByZWNlaXZlZCBpdCwgYWx0aG91Z2ggdGhlcmUgYXJlIG5vCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRvIHN1cHBvcnQgdGhlIGZhY3Q/IDwvdHJhbnNsYXRpb24+"
translation['34.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgcmVmdXNlIHRvIGFkbWl0IGFzIHByb29mcyBhbGwgdGhhdCBoZSB0cnV0aGZ1bGx5IHN0YXRlZCwgYW5kIHNob3VsZCBjb3VudCBtb3JlCiAgICAgICAgICAgICAgICAgICAgd29ydGh5IG9mIGJlbGllZiB0aGUgbGllcyB3aGljaCBoZSB0b2xkIGFmdGVyIGhlIGhhZCBiZWVuIGNvcnJ1cHRlZD8gVmVyaWx5LCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiBBdGhlbnMsIGl0IGlzIGZhciBtb3JlIGp1c3QgdG8gZHJhdyBjb25jbHVzaW9ucyBmcm9tIHN0YXRlbWVudHMgbWFkZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBpbnN0YW5jZSB0aGFuIGZyb20gdGhvc2Ugc3Vic2VxdWVudGx5IGZhYnJpY2F0ZWQ7IGZvciB0aGUgZm9ybWVyIGhlIG1hZGUKICAgICAgICAgICAgICAgICAgICB0cnV0aGZ1bGx5LCBhbmQgbm90IHdpdGggdWx0ZXJpb3IgcHVycG9zZSwgd2hpbGUgdGhlIGxhdGVyIG9uZXMgYXJlIGxpZXMKICAgICAgICAgICAgICAgICAgICBkZXNpZ25lZCB0byBmdXJ0aGVyIGhpcyBpbnRlcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['34.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVtZW1iZXIsIG1lbiBvZiBBdGhlbnMsIHRoYXQgZXZlbiBMYW1waXMgaGltc2VsZiBuZXZlcgogICAgICAgICAgICAgICAgICAgIGRlbmllZCBzYXlpbmcgdGhhdCBoZSBoYWQgbm90IHJlY2VpdmVkIHRoZSBtb25leTsgaGUgYWRtaXR0ZWQgdGhhdCBoZSBzbyBzdGF0ZWQsCiAgICAgICAgICAgICAgICAgICAgYnV0IGRlY2xhcmVkIGhlIHdhcyBub3QgaW4gaGlzIHJpZ2h0IG1pbmQgYXQgdGhlIHRpbWUuIEJ1dCB3b3VsZCBpdCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBhYnN1cmQgZm9yIHlvdSB0byBhY2NlcHQgYXMgd29ydGh5IG9mIGNyZWRpdCB0aGF0IHBhcnQgb2YgaGlzIHRlc3RpbW9ueSB3aGljaAogICAgICAgICAgICAgICAgICAgIGZhdm9ycyB0aGUgZGVmcmF1ZGluZyBwYXJ0eSwgYW5kIHRvIGRpc2NyZWRpdCB0aGF0IHdoaWNoIGZhdm9ycyB0aGUgcGFydHkKICAgICAgICAgICAgICAgICAgICBkZWZyYXVkZWQ/IDwvdHJhbnNsYXRpb24+"
translation['34.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIG1lbiBvZiB0aGUganVyeSwgSSBiZWcgeW91LCBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBkbyB0aGlzLiBZb3UgYXJlIHRoZSBzYW1lIHBlcnNvbnMgd2hvIHB1bmlzaGVkIHdpdGggZGVhdGgsIHdoZW4gaGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBpbXBlYWNoZWQgYmVmb3JlIHRoZSBhc3NlbWJseSwgYSBtYW4gd2hvIG9idGFpbmVkIGxhcmdlIGFkZGl0aW9uYWwgbG9hbnMgb24geW91cgogICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlLCBhbmQgZGlkIG5vdCBkZWxpdmVyIHRvIGhpcyBjcmVkaXRvcnMgdGhlaXIgc2VjdXJpdGllcywgdGhvdWdoIGhlIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBhbmQgdGhlIHNvbiBvZiBhIG1hbiB3aG8gaGFkIGJlZW4gZ2VuZXJhbC4gPC90cmFuc2xhdGlvbj4="
translation['34.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IGhvbGQgdGhhdCBzdWNoIHBlb3BsZSBub3Qgb25seSB3cm9uZyB0aG9zZSB3aG8gZG8KICAgICAgICAgICAgICAgICAgICBidXNpbmVzcyB3aXRoIHRoZW0sIGJ1dCBhbHNvIGRvIGEgcHVibGljIGluanVyeSB0byB5b3VyIG1hcnQ7IGFuZCB5b3UgYXJlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgaW4gaG9sZGluZyB0aGlzIHZpZXcuIEZvciB0aGUgcmVzb3VyY2VzIHJlcXVpcmVkIGJ5IHRob3NlIHdobyBlbmdhZ2UgaW4gdHJhZGUKICAgICAgICAgICAgICAgICAgICBjb21lIG5vdCBmcm9tIHRob3NlIHdobyBib3Jyb3csIGJ1dCBmcm9tIHRob3NlIHdobyBsZW5kOyBhbmQgbmVpdGhlciBzaGlwIG5vcgogICAgICAgICAgICAgICAgICAgIHNoaXBvd25lciBub3IgcGFzc2VuZ2VyIGNhbiBwdXQgdG8gc2VhLCBpZiB5b3UgdGFrZSBhd2F5IHRoZSBwYXJ0IGNvbnRyaWJ1dGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGxlbmQuIDwvdHJhbnNsYXRpb24+"
translation['34.52'] = ""
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgUGhhc2VsaXRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGhhc2VsaXMgd2FzIGEgdG93biBpbiBCaXRoeW5pYSwKICAgICAgICAgICAgICAgICAgICAgICAgb24gdGhlIHNvdXRoZXJuIGNvYXN0IG9mIEFzaWEgTWlub3IuPC9ub3RlPiBtZW4gb2YgdGhlIGp1cnksIGFyZSB1cCB0byBubwogICAgICAgICAgICAgICAgICAgIG5ldyB0cmlja3M7IHRoZXkgYXJlIG1lcmVseSBkb2luZyB3aGF0IGl0IGlzIHRoZWlyIHdvbnQgdG8gZG8uIEZvciB0aGV5IGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICBjbGV2ZXJlc3QgcGVvcGxlIGF0IGJvcnJvd2luZyBtb25leSBvbiB5b3VyIGV4Y2hhbmdlOyBidXQsIGFzIHNvb24gYXMgdGhleSBnZXQKICAgICAgICAgICAgICAgICAgICBpdCBhbmQgaGF2ZSBkcmF3biB1cCBhIG1hcml0aW1lIGNvbnRyYWN0LCB0aGV5IHN0cmFpZ2h0d2F5IGZvcmdldCB0aGUgY29udHJhY3QKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGxhd3MsIGFuZCB0aGF0IHRoZXkgYXJlIHVuZGVyIG9ibGlnYXRpb24gdG8gcGF5IGJhY2sgd2hhdCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZC4gPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgY29uc2lkZXIgdGhhdCwgaWYgdGhleSBwYXkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBkZWJ0cywgaXQgaXMgbGlrZSBoYXZpbmcgbG9zdCBzb21ldGhpbmcgb2YgdGhlaXIgb3duIHByaXZhdGUgcHJvcGVydHksIGFuZCwKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHBheWluZywgdGhleSBpbnZlbnQgc29waGlzbXMsIGFuZCBzcGVjaWFsIHBsZWFzLCBhbmQgcHJldGV4dHM7IGFuZAogICAgICAgICAgICAgICAgICAgIGFyZSB0aGUgbW9zdCB1bnByaW5jaXBsZWQgYW5kIGRpc2hvbmVzdCBvZiBtZW4uIEhlcmUgaXMgYSBwcm9vZiBvZiB0aGlzLiBPdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgaG9zdHMgb2YgcGVvcGxlLCBib3RoIEdyZWVrcyBhbmQgYmFyYmFyaWFucywgd2hvIGZyZXF1ZW50IHlvdXIgZXhjaGFuZ2UsIHRoZQogICAgICAgICAgICAgICAgICAgIFBoYXNlbGl0ZXMgYWxvbmUgaGF2ZSBtb3JlIGxhd3N1aXRzLCB3aGVuZXZlciB0aGUgY291cnRzIHNpdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNvdXJ0cyBmb3IgdGhlIHNldHRsZW1lbnQgb2YgbWFyaXRpbWUgY2FzZXMgc2F0IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgU2VwdGVtYmVyIHRvIEFwcmlsLCB0aGUgcGVyaW9kIHdoZW4gdGhlIHNlYSB3YXMgY2xvc2VkIHRvIG5hdmlnYXRpb24uIFNlZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMy4yMyIgdmFsaWQ9InllcyI+RGVtLiAzMy4yMzwvYmlibD4uPC9ub3RlPiB0aGFuIGFsbCBvdGhlcnMgcHV0CiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIuIFRoYXQgaXMgdGhlIHNvcnQgb2YgcGVvcGxlIHRoZXkgYXJlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMzLjIzIiB2YWxpZD0ieWVzIj5EZW0uIDMzLjIzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBJLCBtZW4gb2YgdGhlIGp1cnksIGxlbnQgbW9uZXkgdG8gQXJ0ZW1vLCB0aGlzIGZlbGxvdydzIGJyb3RoZXIsIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBjb21tZXJjaWFsIGxhd3MgZm9yIGEgdm95YWdlIHRvIFBvbnR1cyBhbmQgYmFjay4gQXMgaGUgZGllZAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoYXZpbmcgcmVwYWlkIG1lIHRoZSBtb25leSBJIGhhdmUgYnJvdWdodCB0aGlzIHN1aXQgYWdhaW5zdCBMYWNyaXR1cyBoZXJlCiAgICAgICAgICAgICAgICAgICAgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBzYW1lIGxhd3MgdW5kZXIgd2hpY2ggSSBtYWRlIHRoZSBjb250cmFjdCwgPC90cmFuc2xhdGlvbj4="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIGhlIGlzIHRoZSBicm90aGVyIG9mIEFydGVtbyBhbmQgaGFzIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiBhbGwgaGlzIHByb3BlcnR5LCBib3RoIGFsbCB0aGF0IGhlIGxlZnQgaGVyZSBhbmQgYWxsIHRoYXQgaGUgaGFkIGF0IFBoYXNlbGlzLAogICAgICAgICAgICAgICAgICAgIGFuZCBpcyB0aGUgaGVpciB0byBoaXMgd2hvbGUgZXN0YXRlOyBhbmQgc2luY2UgaGUgY2FuIHNob3cgbm8gbGF3IHdoaWNoIGdpdmVzCiAgICAgICAgICAgICAgICAgICAgaGltIHRoZSByaWdodCB0byBob2xkIGhpcyBicm90aGVyJ3MgcHJvcGVydHkgYW5kIHRvIGhhdmUgYWRtaW5pc3RlcmVkIGl0IGFzIGhlCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlZCwgYW5kIHlldCB0byByZWZ1c2UgdG8gcGF5IGJhY2sgbW9uZXkgd2hpY2ggYmVsb25ncyB0byBvdGhlcnMgYW5kIHRvIHNheQogICAgICAgICAgICAgICAgICAgIG5vdyB0aGF0IGhlIGlzIG5vdCB0aGUuIGhlaXIsIGJ1dCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHRoZSBkZWFkIG1hbidzIGFmZmFpcnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggaXMgdGhlIHJhc2NhbGl0eSBvZiB0aGlzIGZlbGxvdywKICAgICAgICAgICAgICAgICAgICBMYWNyaXR1czsgYnV0IEkgYmVnIG9mIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB0byBnaXZlIG1lIGEgZmF2b3JhYmxlIGhlYXJpbmcgaW4KICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhpcyBtYXR0ZXIgYW5kLCBpZiBJIHByb3ZlIHRvIHlvdSB0aGF0IGhlIGhhcyB3cm9uZ2VkIHVzLCB3aG8gbGVudAogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSwgYW5kIHlvdSBhcyB3ZWxsLCB0byByZW5kZXIgdXMgdGhlIGFpZCB0aGF0IGlzIG91ciBkdWUuIDwvdHJhbnNsYXRpb24+"
translation['35.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIG15c2VsZiwgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIGhhZCBub3QgdGhlIHNsaWdodGVzdCBhY3F1YWludGFuY2Ugd2l0aCB0aGVzZSBtZW47IGJ1dCBUaHJhc3ltZWRlcyB0aGUgc29uCiAgICAgICAgICAgICAgICAgICAgb2YgRGlvcGhhbnR1cywgdGhhdCB3ZWxsLWtub3duIFNwaGV0dGlhbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U3BoZXR0dXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWNhbWFudGlzLjwvbm90ZT4gYW5kIE1lbGFub3B1cywgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgYXJlIGZyaWVuZHMgb2YgbWluZSwgYW5kIHdlIGFyZSBvbiB0aGUgbW9zdCBpbnRpbWF0ZSB0ZXJtcyBwb3NzaWJsZS4KICAgICAgICAgICAgICAgICAgICBUaGVzZSBtZW4gY2FtZSB1cCB0byBtZSB3aXRoIExhY3JpdHVzIGhlcmUsIHdob3NlIGFjcXVhaW50YW5jZSB0aGV5IGhhZCBtYWRlIGluCiAgICAgICAgICAgICAgICAgICAgc29tZSB3YXkgb3Igb3RoZXLigJRob3csIEkgZG8gbm90IGtub3cs4oCUIDwvdHJhbnNsYXRpb24+"
translation['35.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhc2tlZCBtZSB0byBsZW5kIG1vbmV5IHRvIEFydGVtbywgdGhpcyBtYW4ncyBicm90aGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBBcG9sbG9kb3J1cyBmb3IgYSB2b3lhZ2UgdG8gUG9udHVzLCB0aGF0IHRoZXkgbWlnaHQgYmUgZW5nYWdlZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgdHJhZGluZyBlbnRlcnByaXNlLiBUaHJhc3ltZWRlcyBsaWtlIG15c2VsZiBrbmV3IG5vdGhpbmcgb2YgdGhlIHJhc2NhbGl0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHBlb3BsZSwgYnV0IHN1cHBvc2VkIHRoZW0gdG8gYmUgaG9ub3JhYmxlIG1lbiBhbmQgc3VjaCBhcyB0aGV5IHByZXRlbmRlZAogICAgICAgICAgICAgICAgICAgIGFuZCBkZWNsYXJlZCB0aGVtc2VsdmVzIHRvIGJlOyBhbmQgdGhhdCB0aGV5IHdvdWxkIGRvIGFsbCB0aGF0IHRoZXkgcHJvbWlzZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIGZlbGxvdyBMYWNyaXR1cyB1bmRlcnRvb2sgdGhhdCB0aGV5IHNob3VsZCBkby4gPC90cmFuc2xhdGlvbj4="
translation['35.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB1dHRlcmx5IGRlY2VpdmVkLCBhbmQgaGFkIG5vIGlkZWEgd2hhdCBtb25zdGVycyB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiB3ZXJlIHdpdGggd2hvbSBoZSB3YXMgYXNzb2NpYXRpbmcuIEkgYWxsb3dlZCBteXNlbGYgdG8gYmUgcGVyc3VhZGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgVGhyYXN5bWVkZXMgYW5kIGhpcyBicm90aGVyLCBhbmQgdXBvbiB0aGUgYXNzdXJhbmNlIGdpdmVuIG1lIGJ5IHRoaXMgTGFjcml0dXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgYnJvdGhlcnMgd291bGQgZG8gZXZlcnl0aGluZyB0aGF0IHdhcyByaWdodCwgSSwgd2l0aCB0aGUgaGVscCBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIENhcnlzdGlhbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2FyeXN0dXMgd2FzIGEgdG93biBpbgogICAgICAgICAgICAgICAgICAgICAgICBFdWJvZWEuPC9ub3RlPiB3aG8gd2FzIGEgZnJpZW5kIG9mIG1pbmUsIGxlbnQgdGhpcnR5IG1pbmFlIGluIHNpbHZlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkkgd2lzaCB5b3UgZmlyc3QsIG1lbiBvZiB0aGUganVyeSwgdG8gaGVhcgogICAgICAgICAgICAgICAgICAgIHRoZSBhZ3JlZW1lbnQgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHdlIGxlbnQgdGhlIG1vbmV5LCBhbmQgdGhlIHdpdG5lc3NlcyB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIHByZXNlbnQgd2hlbiB0aGUgbG9hbiB3YXMgbWFkZTsgYWZ0ZXIgdGhhdCBJIHNoYWxsIHRha2UgdXAgdGhlIHJlbWFpbmluZwogICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzIG9mIHRoZSBjYXNlLCBhbmQgc2hvdyB5b3UgaG93IGxpa2UgYnVyZ2xhcnMgdGhleSBhY3RlZCBpbiB0aGUgbWF0dGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBsb2FuLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBhZ3JlZW1lbnQsIGFuZCB0aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['35.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBZ3JlZW1lbnQiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFncmVlbWVudDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZHJvY2xlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBTcGhldHR1cyBhbmQgTmF1c2ljcmF0ZXMgb2YgQ2FyeXN0dXMgbGVudCB0byBBcnRlbW8gYW5kIEFwb2xsb2RvcnVzLCBib3RoIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBoYXNlbGlzLCB0aHJlZSB0aG91c2FuZCBkcmFjaG1hZSBpbiBzaWx2ZXIgZm9yIGEgdm95YWdlIGZyb20gQXRoZW5zIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmTDqiBvciBTY2lvbsOqLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Ub3ducwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHBlbmluc3VsYSBvZiBQYWxsZW7DqiwgaW4gQ2hhbGNpZGljw6ouIFdlYXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgd291bGQgZGV0ZXJtaW5lIHdoaWNoIHBvcnQgc2hvdWxkIGJlIGVudGVyZWQuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlbmNlIHRvIEJvc3BvcnVz4oCUb3IgaWYgdGhleSBzbyBjaG9vc2UsIGZvciBhIHZveWFnZSB0byB0aGUgbGVmdAogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cyBvZiB0aGUgUG9udHVzIGFzIGZhciBhcyB0aGUgQm9yeXN0aGVuZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtb2Rlcm4gRG5pZXBlci48L25vdGU+IGFuZCB0aGVuY2UgYmFjayB0byBBdGhlbnMsIG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0IGF0IHRoZSByYXRlIG9mIHR3byBodW5kcmVkIGFuZCB0d2VudHktZml2ZSBkcmFjaG1hZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQ7IGJ1dCwgaWYgdGhleSBzaG91bGQgc2FpbCBvdXQgZnJvbSBQb250dXMgdG8gSGllcm9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIGEgcGxhY2UsIGNhbGxlZCBIaWVyb24gZnJvbSBhIHRlbXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgWmV1cywgYXQgdGhlIGVudHJhbmNlIHRvIHRoZSBUaHJhY2lhbiBCb3Nwb3J1cyBvbiB0aGUgQXNpYXRpYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZS48L25vdGU+IGFmdGVyIHRoZSByaXNpbmcgb2YgQXJjdHVydXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFib3V0IHRoZSBtaWRkbGUgb2YgU2VwdGVtYmVyLiBUaGlzIHdhcyBjb25zaWRlcmVkIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlsb3VzIHNlYXNvbiBmb3IgbmF2aWdhdGlvbjsgaGVuY2UgdGhlIGhpZ2hlciByYXRlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdC48L25vdGU+IGF0IHRocmVlIGh1bmRyZWQgb24gdGhlIHRob3VzYW5kLCBvbiB0aGUgc2VjdXJpdHkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWUgdGhvdXNhbmQgamFycyBvZiB3aW5lIG9mIE1lbmTDqiwgd2hpY2ggc2hhbGwgYmUgY29udmV5ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICBNZW5kw6ogb3IgU2Npb27DqiBpbiB0aGUgdHdlbnR5LW9hcmVkIHNoaXAgb2Ygd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgSHlibGVzaXVzIGlzIG93bmVyLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdyZWVtZW50PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kcm9jbGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFNwaGV0dHVzIGFuZCBOYXVzaWNyYXRlcyBvZiBDYXJ5c3R1cyBsZW50IHRvIEFydGVtbyBhbmQgQXBvbGxvZG9ydXMsIGJvdGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGhhc2VsaXMsIHRocmVlIHRob3VzYW5kIGRyYWNobWFlIGluIHNpbHZlciBmb3IgYSB2b3lhZ2UgZnJvbSBBdGhlbnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgTWVuZMOqIG9yIFNjaW9uw6osPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvd25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcGVuaW5zdWxhIG9mIFBhbGxlbsOqLCBpbiBDaGFsY2lkaWPDqi4gV2VhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucyB3b3VsZCBkZXRlcm1pbmUgd2hpY2ggcG9ydCBzaG91bGQgYmUgZW50ZXJlZC48L25vdGU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGVuY2UgdG8gQm9zcG9ydXPigJRvciBpZiB0aGV5IHNvIGNob29zZSwgZm9yIGEgdm95YWdlIHRvIHRoZSBsZWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzIG9mIHRoZSBQb250dXMgYXMgZmFyIGFzIHRoZSBCb3J5c3RoZW5lcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1vZGVybiBEbmllcGVyLjwvbm90ZT4gYW5kIHRoZW5jZSBiYWNrIHRvIEF0aGVucywgb24KICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QgYXQgdGhlIHJhdGUgb2YgdHdvIGh1bmRyZWQgYW5kIHR3ZW50eS1maXZlIGRyYWNobWFlIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZDsgYnV0LCBpZiB0aGV5IHNob3VsZCBzYWlsIG91dCBmcm9tIFBvbnR1cyB0byBIaWVyb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgYSBwbGFjZSwgY2FsbGVkIEhpZXJvbiBmcm9tIGEgdGVtcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBaZXVzLCBhdCB0aGUgZW50cmFuY2UgdG8gdGhlIFRocmFjaWFuIEJvc3BvcnVzIG9uIHRoZSBBc2lhdGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlLjwvbm90ZT4gYWZ0ZXIgdGhlIHJpc2luZyBvZiBBcmN0dXJ1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWJvdXQgdGhlIG1pZGRsZSBvZiBTZXB0ZW1iZXIuIFRoaXMgd2FzIGNvbnNpZGVyZWQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyaWxvdXMgc2Vhc29uIGZvciBuYXZpZ2F0aW9uOyBoZW5jZSB0aGUgaGlnaGVyIHJhdGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0Ljwvbm90ZT4gYXQgdGhyZWUgaHVuZHJlZCBvbiB0aGUgdGhvdXNhbmQsIG9uIHRoZSBzZWN1cml0eSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aHJlZSB0aG91c2FuZCBqYXJzIG9mIHdpbmUgb2YgTWVuZMOqLCB3aGljaCBzaGFsbCBiZSBjb252ZXllZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmTDqiBvciBTY2lvbsOqIGluIHRoZSB0d2VudHktb2FyZWQgc2hpcCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBIeWJsZXNpdXMgaXMgb3duZXIuPC90cmFuc2xhdGlvbj4="
translation['35.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPlRoZXkgZ2l2ZSB0aGVzZSBnb29kcwogICAgICAgICAgICAgICAgICAgICAgICBhcyBzZWN1cml0eSwgb3dpbmcgbm8gbW9uZXkgdXBvbiB0aGVtIHRvIGFueSBvdGhlciBwZXJzb24sIG5vciB3aWxsIHRoZXkKICAgICAgICAgICAgICAgICAgICAgICAgbWFrZSBhbnkgYWRkaXRpb25hbCBsb2FuIHVwb24gdGhpcyBzZWN1cml0eTsgYW5kIHRoZXkgYWdyZWUgdG8gYnJpbmcgYmFjayB0bwogICAgICAgICAgICAgICAgICAgICAgICBBdGhlbnMgaW4gdGhlIHNhbWUgdmVzc2VsIGFsbCB0aGUgZ29vZHMgcHV0IG9uIGJvYXJkIGluIFBvbnR1cyBhcyBhIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICBjYXJnbzsgYW5kLCBpZiB0aGUgZ29vZHMgYXJlIGJyb3VnaHQgc2FmZSB0byBBdGhlbnMsIHRoZSBib3Jyb3dlcnMgYXJlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHBheSB0byB0aGUgbGVuZGVycyB0aGUgbW9uZXkgZHVlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgYWdyZWVtZW50IHdpdGhpbgogICAgICAgICAgICAgICAgICAgICAgICB0d2VudHkgZGF5cyBhZnRlciB0aGV5IHNoYWxsIGhhdmUgYXJyaXZlZCBhdCBBdGhlbnMsIHdpdGhvdXQgZGVkdWN0aW9uIHNhdmUKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHN1Y2ggamV0dGlzb24gYXMgdGhlIHBhc3NlbmdlcnMgc2hhbGwgaGF2ZSBtYWRlIGJ5IGNvbW1vbiBhZ3JlZW1lbnQsIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBtb25leSBwYWlkIHRvIGVuZW1pZXM7IGJ1dCB3aXRob3V0IGRlZHVjdGlvbiBmb3IgYW55IG90aGVyIGxvc3MuIEFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IHNoYWxsIGRlbGl2ZXIgdG8gdGhlIGxlbmRlcnMgaW4gdGhlaXIgZW50aXJldHkgdGhlIGdvb2RzIG9mZmVyZWQgYXMKICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHkgdG8gYmUgdW5kZXIgdGhlaXIgYWJzb2x1dGUgY29udHJvbCB1bnRpbCBzdWNoIHRpbWUgYXMgdGhleSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGhhdmUgcGFpZCB0aGUgbW9uZXkgZHVlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgYWdyZWVtZW50LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPkFuZCwgaWYgdGhleSBzaGFsbCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgcGF5IGl0IHdpdGhpbiB0aGUgdGltZSBhZ3JlZWQgdXBvbiwgaXQgc2hhbGwgYmUgbGF3ZnVsIGZvciB0aGUgbGVuZGVycyB0bwogICAgICAgICAgICAgICAgICAgICAgICBwbGVkZ2UgdGhlIGdvb2RzIG9yIGV2ZW4gdG8gc2VsbCB0aGVtIGZvciBzdWNoIHByaWNlIGFzIHRoZXkgY2FuIGdldDsgYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcm9jZWVkcyBmYWxsIHNob3J0IG9mIHRoZSBzdW0gd2hpY2ggdGhlIGxlbmRlcnMgc2hvdWxkIHJlY2VpdmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBhZ3JlZW1lbnQsIGl0IHNoYWxsIGJlIGxhd2Z1bCBmb3IgdGhlIGxlbmRlcnMsIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbGx5IG9yIGpvaW50bHksIHRvIGNvbGxlY3QgdGhlIGFtb3VudCBieSBwcm9jZWVkaW5nIGFnYWluc3QgQXJ0ZW1vIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cywgYW5kIGFnYWluc3QgYWxsIHRoZWlyIHByb3BlcnR5IHdoZXRoZXIgb24gbGFuZCBvciBzZWEsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlc29ldmVyIGl0IG1heSBiZSwgcHJlY2lzZWx5IGFzIGlmIGp1ZGdlbWVudCBoYWQgYmVlbiByZW5kZXJlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW0gYW5kIHRoZXkgaGFkIGRlZmF1bHRlZCBpbiBwYXltZW50LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPkFuZCwgaWYgdGhleSBkbyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXIgUG9udHVzLCBidXQgcmVtYWluIGluIHRoZSBIZWxsZXNwb250IHRlbiBkYXlzIGFmdGVyIHRoZSByaXNpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2dzdGFyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGVuIGRheXMgZm9sbG93aW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlzaW5nIG9mIFNpcml1c+KAlEp1bHkgMjUgdG8gQXVndXN0IDXigJR3ZXJlLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQsIGFwdCB0byBiZSBzdG9ybXkuPC9ub3RlPiBhbmQgZGlzZW1iYXJrIHRoZWlyIGdvb2RzIGF0IGEgcG9ydAogICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB0aGUgQXRoZW5pYW5zIGhhdmUgbm8gcmlnaHQgb2YgcmVwcmlzYWxzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiBzdWNoIHBvcnRzIEF0aGVuaWFuIHNoaXBzIHdvdWxkIGJlIHNhZmUuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVuY2UgY29tcGxldGUgdGhlaXIgdm95YWdlIHRvIEF0aGVucywgbGV0IHRoZW0gcGF5IHRoZSBpbnRlcmVzdAogICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGludG8gdGhlIGNvbnRyYWN0IHRoZSB5ZWFyIGJlZm9yZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgdGhlIHJldHVybiB2b3lhZ2UgaXMgZGVsYXllZCB1bnRpbCB0aGUgbGVnYWwgeWVhciBoYXMgZXhwaXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIYXQgdGhlIHN1bW1lciBzb2xzdGljZe+8iSB0aGUgcmF0ZSBvZiBpbnRlcmVzdCBpcyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluIHVuY2hhbmdlZC48L25vdGU+IEFuZCBpZiB0aGUgdmVzc2VsIGluIHdoaWNoIHRoZSBnb29kcyBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXllZCBzdWZmZXJzIGF1Z2h0IGJleW9uZCByZXBhaXIsIGJ1dCB0aGUgc2VjdXJpdHkgaXMgc2F2ZWQsIGxldAogICAgICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBpcyBzYXZlZCBiZSB0aGUgam9pbnQgcHJvcGVydHkgb2YgdGhlIGxlbmRlcnMuIEFuZCBpbiByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWF0dGVycyBub3RoaW5nIHNoYWxsIGhhdmUgZ3JlYXRlciBlZmZlY3QgdGhhbiB0aGUgYWdyZWVtZW50Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCB0aGUgdGVybXMgb2YgdGhlIGNvbnRyYWN0IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZS4gQ29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM1LjM5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNS4zOTwvYmlibD4uPC9ub3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaXRuZXNzZXM6IFBob3JtaW8gb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMsIENlcGhpc29kb3R1cyBvZiBCb2VvdGlhLCBIZWxpb2RvcnVzIG9mIFBpdHRodXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBpdHR1cyDvvIhQaXRodXPvvIkgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENlY3JvcGlzLjwvbm90ZT48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGVuIGRheXMgZm9sbG93aW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlzaW5nIG9mIFNpcml1c+KAlEp1bHkgMjUgdG8gQXVndXN0IDXigJR3ZXJlLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQsIGFwdCB0byBiZSBzdG9ybXkuPC9ub3RlPiBhbmQgZGlzZW1iYXJrIHRoZWlyIGdvb2RzIGF0IGEgcG9ydAogICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB0aGUgQXRoZW5pYW5zIGhhdmUgbm8gcmlnaHQgb2YgcmVwcmlzYWxzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiBzdWNoIHBvcnRzIEF0aGVuaWFuIHNoaXBzIHdvdWxkIGJlIHNhZmUuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVuY2UgY29tcGxldGUgdGhlaXIgdm95YWdlIHRvIEF0aGVucywgbGV0IHRoZW0gcGF5IHRoZSBpbnRlcmVzdAogICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGludG8gdGhlIGNvbnRyYWN0IHRoZSB5ZWFyIGJlZm9yZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgdGhlIHJldHVybiB2b3lhZ2UgaXMgZGVsYXllZCB1bnRpbCB0aGUgbGVnYWwgeWVhciBoYXMgZXhwaXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIYXQgdGhlIHN1bW1lciBzb2xzdGljZe+8iSB0aGUgcmF0ZSBvZiBpbnRlcmVzdCBpcyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluIHVuY2hhbmdlZC48L25vdGU+IEFuZCBpZiB0aGUgdmVzc2VsIGluIHdoaWNoIHRoZSBnb29kcyBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXllZCBzdWZmZXJzIGF1Z2h0IGJleW9uZCByZXBhaXIsIGJ1dCB0aGUgc2VjdXJpdHkgaXMgc2F2ZWQsIGxldAogICAgICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBpcyBzYXZlZCBiZSB0aGUgam9pbnQgcHJvcGVydHkgb2YgdGhlIGxlbmRlcnMuIEFuZCBpbiByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWF0dGVycyBub3RoaW5nIHNoYWxsIGhhdmUgZ3JlYXRlciBlZmZlY3QgdGhhbiB0aGUgYWdyZWVtZW50Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCB0aGUgdGVybXMgb2YgdGhlIGNvbnRyYWN0IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZS4gQ29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM1LjM5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNS4zOTwvYmlibD4uPC9ub3RlPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzUuMzkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM1LjM5PC9iaWJsPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0bmVzc2VzOiBQaG9ybWlvIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBlaXJhZXVzLCBDZXBoaXNvZG90dXMgb2YgQm9lb3RpYSwgSGVsaW9kb3J1cyBvZiBQaXR0aHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QaXR0dXMg77yIUGl0aHVz77yJIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDZWNyb3Bpcy48L25vdGU+PC90cmFuc2xhdGlvbj4="
translation['35.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcmNoZW5vbWlkZXMsIHNvbiBvZiBBcmNoZWRhbWFzLCBvZiBBbmFneXJ1cywKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NlcyB0aGF0IEFuZHJvY2xlcyBvZiBTcGhldHR1cywgTmF1c2ljcmF0ZXMgb2YgQ2FyeXN0dXMsIGFuZCBBcnRlbW8gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzLCBib3RoIG9mIFBoYXNlbGlzLCBkZXBvc2l0ZWQgYXJ0aWNsZXMgb2YgYWdyZWVtZW50IHdpdGggaGltLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYWdyZWVtZW50IGlzIHN0aWxsIGluIGN1c3RvZHkgaW4gaGlzIGhhbmRzLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFyY2hlbm9taWRlcywgc29uIG9mIEFyY2hlZGFtYXMsIG9mIEFuYWd5cnVzLAogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2VzIHRoYXQgQW5kcm9jbGVzIG9mIFNwaGV0dHVzLCBOYXVzaWNyYXRlcyBvZiBDYXJ5c3R1cywgYW5kIEFydGVtbyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMsIGJvdGggb2YgUGhhc2VsaXMsIGRlcG9zaXRlZCBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQgd2l0aCBoaW0sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBhZ3JlZW1lbnQgaXMgc3RpbGwgaW4gY3VzdG9keSBpbiBoaXMgaGFuZHMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgYWxzbyB0aGUgZGVwb3NpdGlvbiBvZiB0aG9zZSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVvZG90dXMsIHByaXZpbGVnZWQgYWxpZW4sIENoYXJpbnVzLCBzb24gb2YgRXBpY2hhcmVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBMZXVjb25pdW0sIFBob3JtaW8sIHNvbiBvZiBDdGVwaGlzb3Bob24sIG9mIFBlaXJhZXVzLCBDZXBoaXNvZG90dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQm9lb3RpYSBhbmQgSGVsaW9kb3J1cyBvZiBQaXR0aHVzIGRlcG9zZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgQW5kcm9jbGVzIGxlbnQgdG8gQXJ0ZW1vIHRocmVlIHRob3VzYW5kIGRyYWNobWFlIGluIHNpbHZlciwgYW5kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgICAgICBrbm93IHRoZXkgZGVwb3NpdGVkIHRoZSBhZ3JlZW1lbnQgd2l0aCBBcmNoZW5vbWlkZXMgb2YgQW5hZ3lydXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlb2RvdHVzLCBwcml2aWxlZ2VkIGFsaWVuLCBDaGFyaW51cywgc29uIG9mIEVwaWNoYXJlcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y29uaXVtLCBQaG9ybWlvLCBzb24gb2YgQ3RlcGhpc29waG9uLCBvZiBQZWlyYWV1cywgQ2VwaGlzb2RvdHVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEJvZW90aWEgYW5kIEhlbGlvZG9ydXMgb2YgUGl0dGh1cyBkZXBvc2UgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEFuZHJvY2xlcyBsZW50IHRvIEFydGVtbyB0aHJlZSB0aG91c2FuZCBkcmFjaG1hZSBpbiBzaWx2ZXIsIGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICAgICAga25vdyB0aGV5IGRlcG9zaXRlZCB0aGUgYWdyZWVtZW50IHdpdGggQXJjaGVub21pZGVzIG9mIEFuYWd5cnVzLjwvdHJhbnNsYXRpb24+"
translation['35.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYWNjb3JkYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhpcyBhZ3JlZW1lbnQsIG1lbiBvZiB0aGUganVyeSwgSSBsZW50IHRoZSBtb25leSB0byBBcnRlbW8sIHRoaXMgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCBhdCB0aGUgcmVxdWVzdCBvZiBMYWNyaXR1cywgYW5kIHVwb24gaGlzIGVuZ2FnaW5nIHRoYXQgSSBzaG91bGQgcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgbXkgZHVlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgYWdyZWVtZW50IHVuZGVyIHdoaWNoIHRoZSBsb2FuCiAgICAgICAgICAgICAgICAgICAgd2FzIG1hZGUuIExhY3JpdHVzIGhpbXNlbGYgZHJldyB1cCB0aGUgYWdyZWVtZW50IGFuZCBqb2luZWQgaW4gc2VhbGluZyBpdCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGl0IHdhcyB3cml0dGVuOyBmb3IgaGlzIGJyb3RoZXJzIHdlcmUgc3RpbGwgeW91bmdpc2gsIGluIGZhY3QgbWVyZSBib3lzLCBidXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgTGFjcml0dXMsIG9mIFBoYXNlbGlzLCBhIHBlcnNvbmFnZSBvZiBub3RlLCBhIHB1cGlsIG9mIElzb2NyYXRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG5vdGVkIG9yYXRvciwgZXNzYXlpc3QsIGFuZCB0ZWFjaGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHJoZXRvcmljLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgaGUgd2hvIG1hbmFnZWQgdGhlIHdob2xlIG1hdHRlciwgYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgYmFkZSBtZSBsb29rIHRvIGhpbTsgZm9yIGhlIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgaGltc2VsZiBkbyBldmVyeXRoaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgcmlnaHQgZm9yIG1lLCBhbmQgdGhhdCBoZSB3b3VsZCBzdGF5IGluIEF0aGVucywgd2hpbGUgaGlzIGJyb3RoZXIgQXJ0ZW1vCiAgICAgICAgICAgICAgICAgICAgd291bGQgc2FpbCBpbiBjaGFyZ2Ugb2YgdGhlIGdvb2RzLiBBdCB0aGF0IHRpbWUsIG1lbiBvZiB0aGUganVyeSwgd2hlbiBoZSB3YW50ZWQKICAgICAgICAgICAgICAgICAgICB0byBnZXQgdGhlIG1vbmV5IGZyb20gdXMsIGhlIGRlY2xhcmVkIHRoYXQgaGUgd2FzIGJvdGggdGhlIGJyb3RoZXIgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHBhcnRuZXIgb2YgQXJ0ZW1vLCBhbmQgc3Bva2Ugd2l0aCB3b25kcm91cyBwZXJzdWFzaXZlbmVzczsgPC90cmFuc2xhdGlvbj4="
translation['35.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQsIGFzIHNvb24gYXMgdGhleSBnb3QgcG9zc2Vzc2lvbiBvZiB0aGUgbW9uZXksIHRoZXkKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGl0LCBhbmQgdXNlZCBpdCBhcyB0aGV5IHBsZWFzZWQ7IHdoaWxlIGFzIGZvciB0aGUgbWFyaXRpbWUgYWdyZWVtZW50IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcm1zIG9mIHdoaWNoIHRoZXkgc2VjdXJlZCB0aGUgbW9uZXksIGluIG5vIG1hdHRlciBncmVhdCBvciBzbWFsbCBkaWQgdGhleQogICAgICAgICAgICAgICAgICAgIGNhcnJ5IG91dCBpdHMgcHJvdmlzaW9ucywgYXMgdGhlIGZhY3RzIHRoZW1zZWx2ZXMgbWFrZSBjbGVhci4gQW5kIGluIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB0aGlzIGZlbGxvdyBMYWNyaXR1cyB3YXMgdGhlIHByaW1lIG1vdmVyLiBJIHNoYWxsIHRha2UgdXAgdGhlIGNsYXVzZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY29udHJhY3Qgb25lIGJ5IG9uZSwgYW5kIHNoYWxsIHNob3cgdGhhdCBpbiBubyBzaW5nbGUgaW5zdGFuY2UgaGF2ZSB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBkb25lIHdoYXQgd2FzIHJpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['35.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0IHBsYWNlIGl0IHN0YW5kcyB3cml0dGVuIHRoYXQgdGhleSBib3Jyb3dlZCBmcm9tIHVzCiAgICAgICAgICAgICAgICAgICAgdGhpcnR5IG1pbmFlIG9uIHRocmVlIHRob3VzYW5kIGphcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66zrXPgeG9sc68zrnOv869PC9mb3JlaWduPiBoZWxkIGFib3V0IHNpeCBnYWxsb25zLjwvbm90ZT4gb2Ygd2luZSwKICAgICAgICAgICAgICAgICAgICBnaXZpbmcgb3V0IHRoYXQgdGhleSBwb3NzZXNzZWQgc2VjdXJpdHkgZm9yIHRoaXJ0eSBtaW5hZSBtb3JlLCBzbyB0aGF0IHRoZSBwcmljZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB3aW5lIHdvdWxkIGFtb3VudCB0byBhIHRhbGVudCBvZiBtb25leSwgaW5jbHVkaW5nIHRoZSBleHBlbnNlcyB0byBiZQogICAgICAgICAgICAgICAgICAgIGluY3VycmVkIGluIHRoZSBzdG93YWdlIG9mIHRoZSB3aW5lOyBhbmQgdGhhdCB0aGVzZSB0aHJlZSB0aG91c2FuZCBqYXJzIHdlcmUgdG8KICAgICAgICAgICAgICAgICAgICBiZSBjb252ZXllZCB0byBQb250dXMgaW4gdGhlIHR3ZW50eS1vYXJlZCBzaGlwLCBvZiB3aGljaCBIeWJsZXNpdXMgd2FzIG93bmVyLgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ous61z4HhvbHOvM65zr/OvTwvZm9yZWlnbj4gaGVsZCBhYm91dCBzaXggZ2FsbG9ucy48L3RyYW5zbGF0aW9uPg=="
translation['35.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBwcm92aXNpb25zLCBtZW4gb2YgdGhlIGp1cnksIHN0YW5kCiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiBpbiB0aGUgYWdyZWVtZW50IHdoaWNoIHlvdSBoYXZlIGhlYXJkLiBCdXQgaW5zdGVhZCBvZiB0aHJlZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGphcnMsIHRoZXNlIG1lbiBkaWQgbm90IHB1dCBldmVuIGZpdmUgaHVuZHJlZCBvbiBib2FyZCB0aGUgYm9hdDsgYW5kIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYm91Z2h0IHRoZSBxdWFudGl0eSBvZiB3aW5lIHdoaWNoIHRoZXkgc2hvdWxkIGhhdmUsIHRoZXkgdXNlZCB0aGUgbW9uZXkKICAgICAgICAgICAgICAgICAgICBpbiB3aGF0ZXZlciB3YXkgdGhleSBwbGVhc2VkOyBhcyBmb3IgdGhvc2UgdGhyZWUgdGhvdXNhbmQgamFycyB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQgY2FsbGVkIGZvciwgdGhleSBuZXZlciBtZWFudCBub3IgaW50ZW5kZWQgdG8gcHV0IHRoZW0gb24KICAgICAgICAgICAgICAgICAgICAgICAgYm9hcmQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgdGhlc2Ugc3RhdGVtZW50cyBvZiBtaW5lCiAgICAgICAgICAgICAgICAgICAgYXJlIHRydWUsIHRha2UgdGhlIGRlcG9zaXRpb24gb2YgdGhvc2Ugd2hvIHNhaWxlZCB3aXRoIHRoZW0gaW4gdGhlIHNhbWUgc2hpcC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RXJhc2ljbGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zZXMgdGhhdCBoZSB3YXMgcGlsb3Qgb2YgdGhlIHNoaXAgb2Ygd2hpY2ggSHlibGVzaXVzIHdhcyBvd25lciwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gaGlzIGtub3dsZWRnZSBBcG9sbG9kb3J1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QZXJoYXBzIGEgYml0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBjYXJlbGVzc25lc3Mgb24gdGhlIHBhcnQgb2YgdGhlIHdyaXRlciBvZiB0aGlzIHNwdXJpb3VzIGRlcG9zaXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjE2IiB2YWxpZD0ieWVzIj5EZW0uIDM0LjE2PC9iaWJsPiB3ZSBhcmUgdG9sZCB0aGF0IGl0IHdhcyBBcnRlbW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdG8gc2FpbCB3aXRoIHRoZSBjYXJnby48L25vdGU+IHdhcyBjb252ZXlpbmcgaW4gdGhlIHNoaXAgZm91cgogICAgICAgICAgICAgICAgICAgICAgICBodW5kcmVkIGFuZCBmaWZ0eSBqYXJzIG9mIE1lbmRhZWFuIHdpbmUsIGFuZCBubyBtb3JlOyBhbmQgdGhhdCBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXllZCBubyBvdGhlciBjYXJnbyBpbiB0aGUgc2hpcCB0byBQb250dXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpcHBpYXMsIHNvbiBvZiBBdGhlbmlwcHVzLCBvZiBIYWxpY2FybmFzc3VzLCBkZXBvc2VzIHRoYXQgaGUgdG9vIHNhaWxlZAogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2hpcCBvZiBIeWJsZXNpdXMgYXMgc3VwZXJjYXJnbyBvZiB0aGUgdmVzc2VsIGFuZCB0aGF0IHRvIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2UgQXBvbGxvZG9ydXMgb2YgUGhhc2VsaXMgd2FzIGNvbnZleWluZyBpbiB0aGUgc2hpcCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmTDqiB0byBQb250dXMgZm91ciBodW5kcmVkIGFuZCBmaWZ0eSBqYXJzIG9mIE1lbmRhZWFuIHdpbmUsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBubyBvdGhlciBjYXJnby48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYWRkaXRpb24gdG8gdGhlc2UsIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmlkYXZpdHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWZmaWRhdml0cywgdGFrZW4gZG93biBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGluZyBpbiB0aGUgcHJlc2VuY2Ugb2Ygd2l0bmVzc2VzIGFwcG9pbnRlZCBmb3IgdGhlIHB1cnBvc2UsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZpZWQgYnkgdGhlbSB1bmRlciBvYXRoLCB3ZXJlIGFjY2VwdGVkIGFzIGV2aWRlbmNlIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFscyBjb3VsZCBub3QgYmUgcHJlc2VudCBpbiBwZXJzb24uPC9ub3RlPiB3ZXJlIHN1Ym1pdHRlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBBcmNoaWFkZXMsIHNvbiBvZiBNbmVzb25pZGFzLG9mIEFjaGFybmFlLCBTb3N0cmF0dXMsIHNvbiBvZiBQaGlsaXAsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhpc3RpYWVhLCBFdW1hcmljaHVzLCBzb24gb2YgRXVib2V1cywgb2YgSGlzdGlhZWEsIFBoaWx0aWFkZXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBDdGVzaWFzLCBvZiBYeXBldMOqLCBhbmQgRGlvbnlzaXVzLCBzb24gb2YgRGVtb2NyYXRpZGVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hvbGxlaWRhZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNoYXJuYWUgd2FzIGEgZGVtZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlIE9lbmXDr3MsIFh5cGV0w6ogYSBkZW1lIG9mIHRoZSB0cmliZSBDZWNyb3BpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBDaG9sbGVpZGFlIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWVnZWlzLjwvbm90ZT48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FcmFzaWNsZXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NlcyB0aGF0IGhlIHdhcyBwaWxvdCBvZiB0aGUgc2hpcCBvZiB3aGljaCBIeWJsZXNpdXMgd2FzIG93bmVyLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICB0byBoaXMga25vd2xlZGdlIEFwb2xsb2RvcnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBlcmhhcHMgYSBiaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNhcmVsZXNzbmVzcyBvbiB0aGUgcGFydCBvZiB0aGUgd3JpdGVyIG9mIHRoaXMgc3B1cmlvdXMgZGVwb3NpdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzQuMTYiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuMTY8L2JpYmw+IHdlIGFyZSB0b2xkIHRoYXQgaXQgd2FzIEFydGVtbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyB0byBzYWlsIHdpdGggdGhlIGNhcmdvLjwvbm90ZT4gd2FzIGNvbnZleWluZyBpbiB0aGUgc2hpcCBmb3VyCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bmRyZWQgYW5kIGZpZnR5IGphcnMgb2YgTWVuZGFlYW4gd2luZSwgYW5kIG5vIG1vcmU7IGFuZCB0aGF0IEFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZleWVkIG5vIG90aGVyIGNhcmdvIGluIHRoZSBzaGlwIHRvIFBvbnR1cy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjE2IiB2YWxpZD0ieWVzIj5EZW0uIDM0LjE2PC9iaWJsPiB3ZSBhcmUgdG9sZCB0aGF0IGl0IHdhcyBBcnRlbW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdG8gc2FpbCB3aXRoIHRoZSBjYXJnby48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGlwcGlhcywgc29uIG9mIEF0aGVuaXBwdXMsIG9mIEhhbGljYXJuYXNzdXMsIGRlcG9zZXMgdGhhdCBoZSB0b28gc2FpbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzaGlwIG9mIEh5Ymxlc2l1cyBhcyBzdXBlcmNhcmdvIG9mIHRoZSB2ZXNzZWwgYW5kIHRoYXQgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBBcG9sbG9kb3J1cyBvZiBQaGFzZWxpcyB3YXMgY29udmV5aW5nIGluIHRoZSBzaGlwIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgTWVuZMOqIHRvIFBvbnR1cyBmb3VyIGh1bmRyZWQgYW5kIGZpZnR5IGphcnMgb2YgTWVuZGFlYW4gd2luZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIG5vIG90aGVyIGNhcmdvLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBhZGRpdGlvbiB0byB0aGVzZSwgd3JpdHRlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZmaWRhdml0czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZmZpZGF2aXRzLCB0YWtlbiBkb3duIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0aW5nIGluIHRoZSBwcmVzZW5jZSBvZiB3aXRuZXNzZXMgYXBwb2ludGVkIGZvciB0aGUgcHVycG9zZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZCBieSB0aGVtIHVuZGVyIG9hdGgsIHdlcmUgYWNjZXB0ZWQgYXMgZXZpZGVuY2Ugd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWxzIGNvdWxkIG5vdCBiZSBwcmVzZW50IGluIHBlcnNvbi48L25vdGU+IHdlcmUgc3VibWl0dGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hpYWRlcywgc29uIG9mIE1uZXNvbmlkYXMsb2YgQWNoYXJuYWUsIFNvc3RyYXR1cywgc29uIG9mIFBoaWxpcCwgb2YKICAgICAgICAgICAgICAgICAgICAgICAgSGlzdGlhZWEsIEV1bWFyaWNodXMsIHNvbiBvZiBFdWJvZXVzLCBvZiBIaXN0aWFlYSwgUGhpbHRpYWRlcywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEN0ZXNpYXMsIG9mIFh5cGV0w6osIGFuZCBEaW9ueXNpdXMsIHNvbiBvZiBEZW1vY3JhdGlkZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaG9sbGVpZGFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2hhcm5hZSB3YXMgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpYmUgT2VuZcOvcywgWHlwZXTDqiBhIGRlbWUgb2YgdGhlIHRyaWJlIENlY3JvcGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIENob2xsZWlkYWUgYSBkZW1lIG9mIHRoZSB0cmliZSBBZWdlaXMuPC9ub3RlPjwvdHJhbnNsYXRpb24+"
translation['35.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gcmVnYXJkLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHRvIHRoZSBxdWFudGl0eSBvZiB3aW5lIHdoaWNoIGl0IHdhcyB0aGVpciBkdXR5IHRvIHB1dCBvbiBib2FyZCB0aGUgc2hpcAogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FzIHdoYXQgdGhleSBjb250cml2ZWQgdG8gZG87IGFuZCBmcm9tIHRoaXMgcG9pbnQgdGhleSBiZWdhbiBmcm9tIGl0cyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZmlyc3QgY2xhdXNlIHRvIHZpb2xhdGUgdGhlIGFncmVlbWVudCBhbmQgdG8gZmFpbCB0byBwZXJmb3JtIHdoYXQgaXQgcmVxdWlyZWQuCiAgICAgICAgICAgICAgICAgICAgVGhlIG5leHQgY2xhdXNlIHRoYXQgc3RhbmRzIHdyaXR0ZW4gaW4gdGhlIGFncmVlbWVudCBzdGF0ZXMgdGhhdCB0aGV5IHBsZWRnZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIGdvb2RzIGZyZWUgZnJvbSBhbGwgZW5jdW1icmFuY2VzOyB0aGF0IHRoZXkgb3dlIG5vdGhpbmcgdG8gYW55b25lIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVtOyBhbmQgdGhhdCB0aGV5IHdpbGwgbm90IHNlY3VyZSBmdXJ0aGVyIGxvYW5zIHVwb24gdGhlbSBmcm9tIGFueW9uZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGV4cHJlc3NseSBzdGF0ZWQsIG1lbiBvZiB0aGUganVyeS4KICAgICAgICAgICAgICAgICAgICBCdXQgd2hhdCBoYXZlIHRoZXNlIG1lbiBkb25lPyBEaXNyZWdhcmRpbmcgdGhlIHRlcm1zIG9mIHRoZSBhZ3JlZW1lbnQgdGhleQogICAgICAgICAgICAgICAgICAgIGJvcnJvdyBtb25leSBmcm9tIGEgY2VydGFpbiB5b3V0aCwgd2hvbSB0aGV5IGRlY2VpdmVkIGJ5IHN0YXRpbmcgdGhhdCB0aGV5IG93ZWQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHRvIGFueWJvZHkuIFRodXMgdGhleSBjaGVhdGVkIHVzLCBhbmQgd2l0aG91dCBvdXIga25vd2xlZGdlIGJvcnJvd2VkCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgdXBvbiBvdXIgc2VjdXJpdHksIGFuZCB0aGV5IGFsc28gZGVjZWl2ZWQgdGhhdCB5b3VuZyBtYW4gd2hvIGxlbnQgdGhlbSB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSBieSBhbGxlZ2luZyB0aGF0IHRoZSBnb29kcyB1cG9uIHdoaWNoIHRoZXkgYm9ycm93ZWQgZnJvbSBoaW0gd2VyZQogICAgICAgICAgICAgICAgICAgIHVuZW5jdW1iZXJlZC4gU3VjaCBhcmUgdGhlIHJhc2NhbGl0aWVzIG9mIHRoZXNlIG1lbiwgYW5kIHRoZXkgYXJlIGFsbCBjbGV2ZXIKICAgICAgICAgICAgICAgICAgICBkZXZpc2luZ3Mgb2YgdGhpcyBtYW4gTGFjcml0dXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbQogICAgICAgICAgICAgICAgICAgIHNwZWFraW5nIHRoZSB0cnV0aCBhbmQgdGhhdCB0aGV5IGRpZCBib3Jyb3cgYWRkaXRpb25hbCBzdW1zIGNvbnRyYXJ5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCwgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZSBkZXBvc2l0aW9uIG9mIHRoZSBtYW4gaGltc2VsZiB3aG8gbWFkZQogICAgICAgICAgICAgICAgICAgIHRoZSBhZGRpdGlvbmFsIGxvYW4uIDwvdHJhbnNsYXRpb24+"
translation['35.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXJhdHVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhhbGljYXJuYXNzdXMgZGVwb3NlcyB0aGF0IGhlIGxlbnQgdG8gQXBvbGxvZG9ydXMgZWxldmVuIG1pbmFlIGluIHNpbHZlciBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbWVyY2hhbmRpc2Ugd2hpY2ggaGUgd2FzIGNvbnZleWluZyBpbiB0aGUgc2hpcCBvZiBIeWJsZXNpdXMgdG8gUG9udHVzLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgb24gdGhlIGdvb2RzIHB1cmNoYXNlZCB0aGVyZSBhcyBhIHJldHVybiBjYXJnbzsgYW5kIHRoYXQgaGUgd2FzIHVuYXdhcmUKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGVmZW5kYW50IGhhZCBib3Jyb3dlZCBtb25leSBmcm9tIEFuZHJvY2xlczsgZm9yIG90aGVyd2lzZSBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgICAgICBub3QgaGltc2VsZiBoYXZlIGxlbnQgdGhlIG1vbmV5IHRvIEFwb2xsb2RvcnVzLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFyYXR1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBIYWxpY2FybmFzc3VzIGRlcG9zZXMgdGhhdCBoZSBsZW50IHRvIEFwb2xsb2RvcnVzIGVsZXZlbiBtaW5hZSBpbiBzaWx2ZXIgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1lcmNoYW5kaXNlIHdoaWNoIGhlIHdhcyBjb252ZXlpbmcgaW4gdGhlIHNoaXAgb2YgSHlibGVzaXVzIHRvIFBvbnR1cywKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG9uIHRoZSBnb29kcyBwdXJjaGFzZWQgdGhlcmUgYXMgYSByZXR1cm4gY2FyZ287IGFuZCB0aGF0IGhlIHdhcyB1bmF3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGRlZmVuZGFudCBoYWQgYm9ycm93ZWQgbW9uZXkgZnJvbSBBbmRyb2NsZXM7IGZvciBvdGhlcndpc2UgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICAgICAgbm90IGhpbXNlbGYgaGF2ZSBsZW50IHRoZSBtb25leSB0byBBcG9sbG9kb3J1cy48L3RyYW5zbGF0aW9uPg=="
translation['35.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgcmFzY2FsaXRpZXMgb2YgdGhlc2UgbWVuLiBCdXQgYWZ0ZXIgdGhpcyBpdCBzdGFuZHMgd3JpdHRlbiBpbiB0aGUgYWdyZWVtZW50LCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgdGhhdCB3aGVuIHRoZXkgc2hvdWxkIGhhdmUgc29sZCBpbiBQb250dXMgdGhlIGdvb2RzIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRoaXRoZXIsIHRoZXkgc2hvdWxkIHB1cmNoYXNlIHdpdGggdGhlIHByb2NlZWRzIG90aGVyIGdvb2RzIGFzIGEgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgY2FyZ28sIGFuZCBzaG91bGQgYnJpbmcgdGhpcyByZXR1cm4gY2FyZ28gYmFjayB0byBBdGhlbnM7IGFuZCB0aGF0IHdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHJlYWNoZWQgQXRoZW5zLCB0aGV5IHNob3VsZCB3aXRoaW4gdHdlbnR5IGRheXMgcmVwYXkgdXMgaW4gY2VydGlmaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvaW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2VydGlmaWVkLCB0aGF0IGlzLCBhcyB0byB3ZWlnaHQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmVuZXNzLiBUYW1wZXJpbmcgd2l0aCBnb2xkIGFuZCBzaWx2ZXIgY29pbnMgc2VlbXMgbm90IHRvIGJlIGEgbWVyZWx5CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVybiBkZXZpY2UuPC9ub3RlPjsgYW5kIHRoYXQgcGVuZGluZyB0aGUgcGF5bWVudCB3ZSBzaG91bGQgaGF2ZSBjb250cm9sCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGdvb2RzLCBhbmQgdGhhdCB0aGV5IHNob3VsZCBkZWxpdmVyIHRoZW0gdG8gdXMgaW4gdGhlaXIgZW50aXJldHkgdW50aWwgd2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgZ2V0IGJhY2sgb3VyIG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['35.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB0ZXJtcyBzdGFuZAogICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gdGh1cyBwcmVjaXNlbHkgaW4gdGhlIGFncmVlbWVudC4gQnV0IHRoZXNlIHBlb3BsZSwgbWVuIG9mIHRoZSBqdXJ5LCBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGVyZSBzaG93biBtb3N0IHN0cmlraW5nbHkgdGhlaXIgb3duIGluc29sZW5jZSBhbmQgc2hhbWVsZXNzbmVzcywgYW5kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHBhaWQgbm90IHRoZSBzbGlnaHRlc3QgaGVlZCB0byB0aGUgdGVybXMgd3JpdHRlbiBpbiB0aGUgYWdyZWVtZW50OyBidXQgcmVnYXJkZWQKICAgICAgICAgICAgICAgICAgICB0aGUgYWdyZWVtZW50IGFzIG1lcmUgdHJhc2ggYW5kIG5vbnNlbnNlLiBGb3IgdGhleSBuZWl0aGVyIHB1cmNoYXNlZCBhbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBnb29kcyBpbiBQb250dXMgbm9yIHRvb2sgb24gYm9hcmQgYW55IHJldHVybiBjYXJnbyB0byBiZSBjb252ZXllZCB0byBBdGhlbnM7IGFuZAogICAgICAgICAgICAgICAgICAgIHdlIHdobyBoYWQgbGVudCB0aGUgbW9uZXksIHdoZW4gdGhlc2UgbWVuIHRoZW1zZWx2ZXMgcmV0dXJuZWQgZnJvbSBQb250dXMsIGhhZAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd2hpY2ggd2UgY291bGQgbGF5IGhvbGQgb2Ygb3Iga2VlcCBpbiBwb3NzZXNzaW9uIHVudGlsIHdlIHNob3VsZCByZWNvdmVyCiAgICAgICAgICAgICAgICAgICAgb3VyIG1vbmV5OyBmb3IgdGhlc2UgbWVuIGJyb3VnaHQgbm90aGluZyB3aGF0c29ldmVyIGludG8geW91ciBoYXJib3IuIE5heSwgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIHN1ZmZlcmVkIHRoZSBtb3N0IHVuaGVhcmQtb2YgdHJlYXRtZW50LCBtZW4gb2YgdGhlIGp1cnkuIDwvdHJhbnNsYXRpb24+"
translation['35.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBvdXIgb3duIGNpdHksIHdpdGhvdXQgb3Vyc2VsdmVzIGhhdmluZyBjb21taXR0ZWQgYW55CiAgICAgICAgICAgICAgICAgICAgd3JvbmcsIG9yIGhhdmluZyBoYWQganVkZ2VtZW50IHJlbmRlcmVkIGFnYWluc3QgdXMgaW4gdGhlaXIgZmF2b3IsIHdlIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHJvYmJlZCBvZiBvdXIgb3duIHBvc3Nlc3Npb25zIGJ5IHRoZXNlIG1lbiB3aG8gYXJlIFBoYXNlbGl0ZXMsIGp1c3QgYXMgaWYgcmlnaHRzCiAgICAgICAgICAgICAgICAgICAgb2YgcmVwcmlzYWwgaGFkIGJlZW4gZ2l2ZW4gdG8gUGhhc2VsaXRlcyBhZ2FpbnN0IEF0aGVuaWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T24gdGhlIHJpZ2h0IG9mIHJlcHJpc2FsLCBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNS4xMyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzUuMTM8L2JpYmw+IGFib3ZlLCBhbmQgc2VlIFNtaXRoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaWN0aW9uYXJ5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnRpcXVpdGllczwvdGl0bGU+LCBhcnQuIOKAnFN5bGFlLuKAnTwvbm90ZT4gRm9yIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGV5IHJlZnVzZSB0byBwYXkgYmFjayB3aGF0IHRoZXkgcmVjZWl2ZWQsIHdoYXQgb3RoZXIgbmFtZSBjYW4gb25lIGdpdmUgdG8gc3VjaAogICAgICAgICAgICAgICAgICAgIHBlb3BsZSwgdGhhbiB0aGF0IHRoZXkgdGFrZSBieSBmb3JjZSB0aGUgZ29vZHMgb2Ygb3RoZXJzPyBGb3IgbXkgb3duIHBhcnQsIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIG5ldmVyIGhlYXJkIG9mIGEgbW9yZSBhYm9taW5hYmxlIGFjdCB0aGFuIHRoYXQgd2hpY2ggdGhlc2UgbWVuIGhhdmUKICAgICAgICAgICAgICAgICAgICBjb21taXR0ZWQgaW4gcmVsYXRpb24gdG8gdXMsIGFuZCB0aGF0LCB0b28sIHdoaWxlIGFkbWl0dGluZyB0aGF0IHRoZXkgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgbW9uZXkgZnJvbSB1cy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNS4xMyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzUuMTM8L2JpYmw+IGFib3ZlLCBhbmQgc2VlIFNtaXRoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaWN0aW9uYXJ5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnRpcXVpdGllczwvdGl0bGU+LCBhcnQuIOKAnFN5bGFlLuKAnTwvdHJhbnNsYXRpb24+"
translation['35.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlcmVhcyBhbGwgY2xhdXNlcyBpbgogICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0cyB3aGljaCBhcmUgb3BlbiB0byBkaXNwdXRlIHJlcXVpcmUgYSBqdWRpY2lhbCBkZWNpc2lvbiwgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHRob3NlIG9uIHRoZSBjb250cmFyeSB3aGljaCBhcmUgYWRtaXR0ZWQgYnkgYm90aCB0aGUgY29udHJhY3RpbmcgcGFydGllcywKICAgICAgICAgICAgICAgICAgICBhbmQgY29uY2VybmluZyB3aGljaCB0aGVyZSBleGlzdCBtYXJpdGltZSBhZ3JlZW1lbnRzLCBhcmUgaGVsZCBieSBhbGwgbWVuIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZmluYWw7IGFuZCB0aGUgcGFydGllcyBhcmUgYm91bmQgdG8gYWJpZGUgYnkgd2hhdCBpcyB3cml0dGVuLiBUaGF0IHRoZXNlIG1lbiwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBoYXZlIGZ1bGZpbGxlZCBub3QgYSBzaW5nbGUgb25lIG9mIHRoZSBwcm92aXNpb25zIG9mIHRoZSBhZ3JlZW1lbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgZnJvbSB0aGUgdmVyeSBmaXJzdCB0aGV5IG1lZGl0YXRlZCBmcmF1ZCBhbmQgcHVycG9zZWQgZGlzaG9uZXN0IGFjdGlvbiBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHRodXMgY2xlYXJseSBwcm92ZW4gYWdhaW5zdCB0aGVtIGJ5IHRoZSBkZXBvc2l0aW9ucyBvZiB3aXRuZXNzZXMgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['35.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBub3cgaGVhciB0aGUgbW9zdCBvdXRyYWdlb3VzIHRoaW5nIHdoaWNoIHRoaXMgZmVsbG93IExhY3JpdHVzIGhhcyBkb25lOyBmb3IKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgaGUgd2hvIG1hbmFnZWQgdGhlIHdob2xlIGFmZmFpci4gV2hlbiB0aGV5IGFycml2ZWQgaGVyZSB0aGV5IGRpZCBub3QgcHV0CiAgICAgICAgICAgICAgICAgICAgaW50byB5b3VyIHBvcnQsIGJ1dCBjYW1lIHRvIGFuY2hvciBpbiBUaGlldmVzJyBIYXJib3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNvbWUgc21hbGwgaW5sZXQsIHdoaWNoIGNhbm5vdCBiZSBpZGVudGlmaWVkIHdpdGggY2VydGFpbnR5LAogICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGJ5IHRoaWV2ZXMgYW5kIHNtdWdnbGVycy4gU2VlIEp1ZGVpY2gsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRvcG9ncmFwaGllIHZvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW48L3RpdGxlPiwgcC4gNDUwLjwvbm90ZT4gd2hpY2ggaXMgb3V0c2lkZSBvZiB0aGUgc2lnbnMgbWFya2luZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgcG9ydDsgYW5kIHRvIGFuY2hvciBpbiBUaGlldmVzJyBIYXJib3IgaXMgdGhlIHNhbWUgYXMgaWYgb25lIHdlcmUgdG8gYW5jaG9yIGluCiAgICAgICAgICAgICAgICAgICAgQWVnaW5hIG9yIE1lZ2FyYTsgZm9yIGFueW9uZSBjYW4gc2FpbCBmb3J0aCBmcm9tIHRoYXQgaGFyYm9yIHRvIHdoYXRldmVyIHBvaW50CiAgICAgICAgICAgICAgICAgICAgaGUgd2lzaGVzIGFuZCBhdCBhbnkgbW9tZW50IGhlIHBsZWFzZXMuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRvcG9ncmFwaGllIHZvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW48L3RpdGxlPiwgcC4gNDUwLjwvdHJhbnNsYXRpb24+"
translation['35.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHZlc3NlbCBsYXkgYXQgYW5jaG9yIHRoZXJlIGZvciBtb3JlIHRoYW4gdHdlbnR5LWZpdmUgZGF5cywgYW5kIHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIHdhbGtlZCBhYm91dCBpbiB5b3VyIHNhbXBsZS1tYXJrZXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcGxhY2UgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1hcmtldCB3aGVyZSBzYW1wbGVzIG9mIGdvb2RzIGNvdWxkIGJlIGRpc3BsYXllZC4gQ29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwLjI0IiB2YWxpZD0ieWVzIj5EZW0uIDUwLjI0PC9iaWJsPi48L25vdGU+IFdlIG9uIG91ciBwYXJ0IHRhbGtlZCB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgYW5kIGJhZGUgdGhlbSBzZWUgdG8gaXQgdGhhdCB3ZSByZWNlaXZlZCBvdXIgbW9uZXkgYmFjayBhcyBzb29uIGFzIHBvc3NpYmxlOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFncmVlZCwgYW5kIHNhaWQgdGhleSB3ZXJlIHRyeWluZyB0byBhcnJhbmdlIHRoYXQgdmVyeSB0aGluZy4gV2hpbGUgd2UgdGh1cwogICAgICAgICAgICAgICAgICAgIGFwcHJvYWNoZWQgdGhlbSwgd2UgYXQgdGhlIHNhbWUgdGltZSBrZXB0IGFuIGV5ZSBvbiB0aGVtIHRvIHNlZSB3aGV0aGVyIHRoZXkKICAgICAgICAgICAgICAgICAgICBkaXNlbWJhcmtlZCBhbnl0aGluZyBmcm9tIHRoZSBzaGlwLCBvciBwYWlkIGFueSBoYXJib3ItZHVlcy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwLjI0IiB2YWxpZD0ieWVzIj5EZW0uIDUwLjI0PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGJvb2tzIG9mIHRoZSBoYXJib3ItbWFzdGVycyB3b3VsZCBzaG93IHdoZXRoZXIgdGhlIHRheCBvZgogICAgICAgICAgICAgICAgICAgICAgICAyIHBlcmNlbnQgaGFkIGJlZW4gY29sbGVjdGVkLCBhbmQgdGh1cyB3aGV0aGVyIGFueSBnb29kcyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBsYW5kZWQuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGV5IGhhZCBiZWVuIGluIHRvd24gYSBnb29kIG1hbnkKICAgICAgICAgICAgICAgICAgICBkYXlzLCBhbmQgd2UgZm91bmQgdGhhdCBub3RoaW5nIGhhZCBiZWVuIGRpc2VtYmFya2VkIGZyb20gdGhlIHNoaXAsIG5vciBoYWQgYW55CiAgICAgICAgICAgICAgICAgICAgaGFyYm9yLWR1ZXMgYmVlbiBwYWlkIGluIHRoZWlyIG5hbWUsIHdlIGJlZ2FuIGZyb20gdGhlbiBvbiB0byBwcmVzcyB0aGVtIG1vcmUKICAgICAgICAgICAgICAgICAgICBhbmQgbW9yZSB3aXRoIG91ciBkZW1hbmRzLiBBbmQgd2hlbiB3ZSBtYWRlIG91cnNlbHZlcyBidXJkZW5zb21lIHRvIHRoZW0sIHRoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3cgTGFjcml0dXMsIHRoZSBicm90aGVyIG9mIEFydGVtbywgYW5zd2VyZWQgdGhhdCB0aGV5IHdvdWxkIGJlIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHBheSB1cywgZm9yIGFsbCB0aGVpciBnb29kcyB3ZXJlIGxvc3Q7IGFuZCBMYWNyaXR1cyBkZWNsYXJlZCBoZSBjb3VsZCBtYWtlIG91dCBhCiAgICAgICAgICAgICAgICAgICAgZ29vZCBjYXNlIGluIHRoZSBtYXR0ZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgc2hhcnAgdGhydXN0IGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzb3BoaXN0LCBldmVyIHJlYWR5IOKAnHRvIG1ha2UgdGhlIHdvcnNlIHRoZSBiZXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uLuKAnTwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5XZSwgbWVuIG9mIHRoZSBqdXJ5LCB3ZXJlIGluZGlnbmFudCBhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHdvcmRzLCBidXQgd2UgZ2FpbmVkIG5vdGhpbmcgYnkgb3VyIGluZGlnbmF0aW9uLCBmb3IgdGhlc2UgbWVuIGNhcmVkIG5vdCBhIGZpZwogICAgICAgICAgICAgICAgICAgIGZvciBpdC4gTmV2ZXJ0aGVsZXNzIHdlIGFza2VkIHRoZW0gaW4gd2hhdCB3YXkgdGhlIGdvb2RzIGhhZCBiZWVuIGxvc3QuIFRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4sIExhY3JpdHVzLCBzYWlkIHRoYXQgdGhlIHNoaXAgaGFkIGJlZW4gd3JlY2tlZCB3aGlsZSBzYWlsaW5nIGFsb25nIHRoZSBjb2FzdAogICAgICAgICAgICAgICAgICAgIGZyb20gUGFudGljYXBhZXVtIHRvIFRoZW9kb3NpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGFudGljYXBhZXVtIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtb2Rlcm4gS2VydHNjaCwgYW5kIFRoZW9kb3NpYSB0aGUgbW9kZXJuIEthZmZhIGluIHRoZSBDcmltZWEuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHRoZSB3cmVjayBvZiB0aGUgdmVzc2VsIHRoZSBnb29kcyBvZiBoaXMgYnJvdGhlcnMgd2hpY2ggd2VyZSBhdCB0aGUgdGltZQogICAgICAgICAgICAgICAgICAgIG9uIGJvYXJkIHdlcmUgbG9zdDsgdGhlcmUgd2FzIG9uIGJvYXJkIHNhbHQgZmlzaCwgQ29hbiB3aW5lLCBhbmQgc3VuZHJ5IG90aGVyCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzOyB0aGlzLCB0aGV5IHNhaWQsIGhhZCBiZWVuIHB1dCBvbiBib2FyZCBhcyBhIHJldHVybiBjYXJnbywgYW5kIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gYnJpbmcgaXQgdG8gQXRoZW5zLCBoYWQgaXQgbm90IGJlZW4gbG9zdCBpbiB0aGUgc2hpcC4gPC90cmFuc2xhdGlvbj4="
translation['35.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIHdoYXQgaGUgc2FpZDsgYnV0IGl0IGlzIHdvcnRoIHlvdXIgd2hpbGUgdG8KICAgICAgICAgICAgICAgICAgICBsZWFybiB0aGUgYWJvbWluYWJsZSB3aWNrZWRuZXNzIG9mIHRoZXNlIG1lbiwgYW5kIHRoZWlyIG1lbmRhY2l0eS4gQ29uY2VybmluZwogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXNzZWwgd2hpY2ggd2FzIHdyZWNrZWQgdGhleSBoYWQgbm8gY29udHJhY3QsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzcGVha2VyJ3MgY29udGVudGlvbiBpcyB0aGF0IGV2ZW4gaWYgdGhlIHNoaXAgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHdyZWNrZWQsIHRoYXQgZmFjdCBkb2VzIG5vdCByZWxlYXNlIExhY3JpdHVzIGZyb20gaGlzIG9ibGlnYXRpb247IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbG9hbiBtYWRlIGJ5IEFuZHJvY2xlcyB3YXMgc2VjdXJlZCBub3QgYnkgdGhlIHNoaXAsIHdoaWNoIGFwcGVhcnMgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBiZWVuIG1vcnRnYWdlZCB0byBBbnRpcGF0ZXIsIGJ1dCB1cG9uIHRoZSBjYXJnbyBvZiBNZW5kYWVhbiB3aW5lIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhcmdvIHdoaWNoIHdhcyB0byBoYXZlIGJlZW4gYnJvdWdodCBmcm9tIFBvbnR1cy4gVGhlIHdhcmVzIGxvc3QKICAgICAgICAgICAgICAgICAgICAgICAg77yIYnkgamV0dGlzb24gd2hlbiB0aGUgc2hpcCB3YXMgZGFtYWdlZO+8iSB3ZXJlIG5vdCwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWFrZXIgaG9sZHMsIHRoZSByZXR1cm4gY2FyZ28uIFRoYXQgdGhlIHNoaXAgd2FzIG5vdCBhY3R1YWxseSBsb3N0IHNlZW1zIGEKICAgICAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IGluZmVyZW5jZSBmcm9tIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzUuMjgiIHZhbGlkPSJ5ZXMiPkRlbS4gMzUuMjg8L2JpYmw+LCB3aGVyZSBpdCBpcwogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZWQgdGhhdCBzaGUgcmV0dXJuZWQgdG8gQXRoZW5zLjwvbm90ZT4gYnV0IGl0IHdhcyBhbm90aGVyIG1hbiB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgbGVudCBmcm9tIEF0aGVucyB1cG9uIHRoZSBmcmVpZ2h0IHRvIFBvbnR1cywgYW5kIG9uIHRoZSB2ZXNzZWwgaXRzZWxmLgogICAgICAgICAgICAgICAgICAgIO+8iEFudGlwYXRlciB3YXMgdGhlIGxlbmRlcidzIG5hbWU7IGhlIHdhcyBhIENpdGlhbjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzUuMjgiIHZhbGlkPSJ5ZXMiPkRlbS4gMzUuMjg8L2JpYmw+LCB3aGVyZSBpdCBpcwogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZWQgdGhhdCBzaGUgcmV0dXJuZWQgdG8gQXRoZW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaXRpdW0gaXMgYSBwb3J0IGluIEN5cHJ1cy48L25vdGU+IGJ5IGJpcnRoLu+8iSBUaGUKICAgICAgICAgICAgICAgICAgICBDb2FuIHdpbmUg77yIZWlnaHR5IGphcnMgb2Ygd2luZSB0aGF0IGhhZCB0dXJuZWQgc291cu+8iSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FsdCBmaXNoIHdlcmUgYmVpbmcgdHJhbnNwb3J0ZWQgaW4gdGhlIHZlc3NlbCBmb3IgYSBjZXJ0YWluIGZhcm1lciBmcm9tCiAgICAgICAgICAgICAgICAgICAgUGFudGljYXBhZXVtIHRvIFRoZW9kb3NpYSBmb3IgdGhlIHVzZSBvZiB0aGUgbGFib3JlcnMgb24gaGlzIGZhcm0uIFdoeSwgdGhlbiwgZG8KICAgICAgICAgICAgICAgICAgICB0aGV5IGtlZXAgYWxsZWdpbmcgdGhlc2UgZXhjdXNlcz8gSXQgaXMgaW4gbm8gd2lzZSBmaXR0aW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['35.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHBsZWFzZSB0YWtlIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gZmlyc3QgdGhhdCBvZiBBcG9sbG9uaWRlcywgc2hvd2luZyB0aGF0IGl0IHdhcyBBbnRpcGF0ZXIgd2hvIGxlbnQKICAgICAgICAgICAgICAgICAgICBtb25leSB1cG9uIHRoZSB2ZXNzZWwsIGFuZCB0aGF0IHRoZXNlIG1lbiB3ZXJlIGluIG5vIHdpc2UgYWZmZWN0ZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2hpcHdyZWNrOyBhbmQgdGhlbiB0aGF0IG9mIEVyYXNpY2xlcyBhbmQgdGhhdCBvZiBIaXBwaWFzLCBzaG93aW5nIHRoYXQgb25seQogICAgICAgICAgICAgICAgICAgIGVpZ2h0eSBqYXJzIHdlcmUgYmVpbmcgdHJhbnNwb3J0ZWQgaW4gdGhlIHZlc3NlbC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcG9sbG9uaWRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBIYWxpY2FybmFzc3VzIGRlcG9zZXMgdGhhdCB0byBoaXMga25vd2xlZGdlIEFudGlwYXRlciwgYSBDaXRpYW4gYnkgYmlydGgsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlbnQgbW9uZXkgdG8gSHlibGVzaXVzIGZvciBhIHZveWFnZSB0byBQb250dXMgb24gdGhlIHNoaXAgb2Ygd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgSHlibGVzaXVzIHdhcyBpbiBjb21tYW5kLCBhbmQgb24gdGhlIGZyZWlnaHQgdG8gUG9udHVzLCBhbmQgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBwYXJ0LW93bmVyIG9mIHRoZSBzaGlwIHdpdGggSHlibGVzaXVzOyB0aGF0IHNsYXZlcyBvZiBoaXMgb3duIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VuZ2VycyBvbiB0aGUgc2hpcDsgYW5kIHRoYXQsIHdoZW4gdGhlIHNoaXAgd2FzIHdyZWNrZWQsIGhpcyBzZXJ2YW50cwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHByZXNlbnQgYW5kIHJlcG9ydGVkIHRoZSBmYWN0IHRvIGhpbSwgYW5kIGFsc28gdGhlIGZ1cnRoZXIgZmFjdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzaGlwLCBoYXZpbmcgbm8gY2FyZ28sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk5vIGZ1bGwgY2FyZ28sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGlzOyBtZXJlbHkgdGhlIHNhbHQgZmlzaCBhbmQgdGhlIENvYW4gd2luZSBtZW50aW9uZWQgYWJvdmUuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICB3YXMgd3JlY2tlZCB3aGlsZSBzYWlsaW5nIGFsb25nIHRoZSBjb2FzdCB0byBUaGVvZG9zaWEgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICBQYW50aWNhcGFldW0uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFwb2xsb25pZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhhbGljYXJuYXNzdXMgZGVwb3NlcyB0aGF0IHRvIGhpcyBrbm93bGVkZ2UgQW50aXBhdGVyLCBhIENpdGlhbiBieSBiaXJ0aCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVudCBtb25leSB0byBIeWJsZXNpdXMgZm9yIGEgdm95YWdlIHRvIFBvbnR1cyBvbiB0aGUgc2hpcCBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBIeWJsZXNpdXMgd2FzIGluIGNvbW1hbmQsIGFuZCBvbiB0aGUgZnJlaWdodCB0byBQb250dXMsIGFuZCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHBhcnQtb3duZXIgb2YgdGhlIHNoaXAgd2l0aCBIeWJsZXNpdXM7IHRoYXQgc2xhdmVzIG9mIGhpcyBvd24gd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzZW5nZXJzIG9uIHRoZSBzaGlwOyBhbmQgdGhhdCwgd2hlbiB0aGUgc2hpcCB3YXMgd3JlY2tlZCwgaGlzIHNlcnZhbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgcHJlc2VudCBhbmQgcmVwb3J0ZWQgdGhlIGZhY3QgdG8gaGltLCBhbmQgYWxzbyB0aGUgZnVydGhlciBmYWN0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoaXAsIGhhdmluZyBubyBjYXJnbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Tm8gZnVsbCBjYXJnbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaXM7IG1lcmVseSB0aGUgc2FsdCBmaXNoIGFuZCB0aGUgQ29hbiB3aW5lIG1lbnRpb25lZCBhYm92ZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyB3cmVja2VkIHdoaWxlIHNhaWxpbmcgYWxvbmcgdGhlIGNvYXN0IHRvIFRoZW9kb3NpYSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIFBhbnRpY2FwYWV1bS48L3RyYW5zbGF0aW9uPg=="
translation['35.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FcmFzaWNsZXMgZGVwb3NlcyB0aGF0IGhlIHNhaWxlZCB3aXRoIEh5Ymxlc2l1cyBhcyBwaWxvdCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcCB0byBQb250dXMsIGFuZCB3aGVuIHRoZSBzaGlwIHdhcyBzYWlsaW5nIGFsb25nIHRoZSBjb2FzdCB0bwogICAgICAgICAgICAgICAgICAgICAgICBUaGVvZG9zaWEgZnJvbSBQYW50aWNhcGFldW0gaGUga25vd3MgdGhhdCB0aGUgc2hpcCBoYWQgbm8gY2FyZ287IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzLCB0aGUgdmVyeSBtYW4gd2hvIGlzIG5vdyBkZWZlbmRhbnQgaW4gdGhpcyBzdWl0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGlzIGNsYXVzZSBpcyBub3QgYW4gaW50ZXJwb2xhdGlvbiwgd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11c3QgYXNzdW1lIHRoYXQgQXBvbGxvZG9ydXMgd2FzIGJlaW5nIHN1ZWQgYXMgY28tZGVmZW5kYW50IHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhY3JpdHVzLiBCdXQgdGhpcyB3aG9sZSBpbnNlcnRlZCBkb2N1bWVudCBtYXkgd2VsbCBiZSBzcHVyaW91cy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBubyB3aW5lIG9uIGJvYXJkIHRoZSB2ZXNzZWwsIGJ1dCB0aGF0IGFib3V0IGVpZ2h0eSBqYXJzIG9mIENvYW4gd2luZQogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIGJlaW5nIGNvbnZleWVkIGZvciBhIGNlcnRhaW4gbWFuIG9mIFRoZW9kb3NpYS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGlwcGlhcywgc29uIG9mIEF0aGVuaXBwdXMsIG9mIEhhbGljYXJuYXNzdXMsIGRlcG9zZXMgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBoZSBzYWlsZWQgd2l0aCBIeWJsZXNpdXMgYXMgc3VwZXJjYXJnbyBvZiB0aGUgc2hpcCwgYW5kIHRoYXQgd2hlbiB0aGUgc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgc2FpbGluZyBhbG9uZyB0aGUgY29hc3QgdG8gVGhlb2Rvc2lhIGZyb20gUGFudGljYXBhZXVtLCBBcG9sbG9kb3J1cyBwdXQKICAgICAgICAgICAgICAgICAgICAgICAgb24gYm9hcmQgdGhlIHNoaXAgb25lIG9yIHR3byBoYW1wZXJzIG9mIHdvb2wsIGVsZXZlbiBvciB0d2VsdmUgamFycyBvZiBzYWx0CiAgICAgICAgICAgICAgICAgICAgICAgIGZpc2gsIGFuZCBnb2F0LXNraW5z4oCUdHdvIG9yIHRocmVlIGJ1bmRsZXPigJRhbmQgbm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYWRkaXRpb24gdG8gdGhlc2UsIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmlkYXZpdHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgMTcgYWJvdmUuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHN1Ym1pdHRlZCBieSBFdXBoaWxldHVzLCBzb24gb2YgRGFtb3RpbXVzLCBvZiBBcGhpZG5hZSwgSGlwcGlhcywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFRpbW94ZW51cywgb2YgVGh5bWFldGFkYWUsIFNvc3RyYXR1cywgc29uIG9mIFBoaWxpcCwgb2YgSGlzdGlhZWEsCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hlbm9taWRlcywgc29uIG9mIFN0cmF0bywgb2YgVGhyaWEuIGFuZCBQaGlsdGlhZGVzLCBzb24gb2YgQ3Rlc2ljbGVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWHlwZXTDqi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXBoaWRuYWUgd2FzIGEgZGVtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIEFjYW50aXM7IFRoeW1hZXRhZGFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEhpcHBvdGhvbnRpczsgVGhyaWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIGRlbWUgb2YgdGhlIHRyaWJlIE9lbmXDr3M7IGFuZCBYeXBldMOqLCBhIGRlbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBDZWNyb3Bpcy48L25vdGU+PC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RXJhc2ljbGVzIGRlcG9zZXMgdGhhdCBoZSBzYWlsZWQgd2l0aCBIeWJsZXNpdXMgYXMgcGlsb3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoaXAgdG8gUG9udHVzLCBhbmQgd2hlbiB0aGUgc2hpcCB3YXMgc2FpbGluZyBhbG9uZyB0aGUgY29hc3QgdG8KICAgICAgICAgICAgICAgICAgICAgICAgVGhlb2Rvc2lhIGZyb20gUGFudGljYXBhZXVtIGhlIGtub3dzIHRoYXQgdGhlIHNoaXAgaGFkIG5vIGNhcmdvOyBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cywgdGhlIHZlcnkgbWFuIHdobyBpcyBub3cgZGVmZW5kYW50IGluIHRoaXMgc3VpdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgdGhpcyBjbGF1c2UgaXMgbm90IGFuIGludGVycG9sYXRpb24sIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXN0IGFzc3VtZSB0aGF0IEFwb2xsb2RvcnVzIHdhcyBiZWluZyBzdWVkIGFzIGNvLWRlZmVuZGFudCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYWNyaXR1cy4gQnV0IHRoaXMgd2hvbGUgaW5zZXJ0ZWQgZG9jdW1lbnQgbWF5IHdlbGwgYmUgc3B1cmlvdXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICBoYWQgbm8gd2luZSBvbiBib2FyZCB0aGUgdmVzc2VsLCBidXQgdGhhdCBhYm91dCBlaWdodHkgamFycyBvZiBDb2FuIHdpbmUKICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBiZWluZyBjb252ZXllZCBmb3IgYSBjZXJ0YWluIG1hbiBvZiBUaGVvZG9zaWEuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpcHBpYXMsIHNvbiBvZiBBdGhlbmlwcHVzLCBvZiBIYWxpY2FybmFzc3VzLCBkZXBvc2VzIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgaGUgc2FpbGVkIHdpdGggSHlibGVzaXVzIGFzIHN1cGVyY2FyZ28gb2YgdGhlIHNoaXAsIGFuZCB0aGF0IHdoZW4gdGhlIHNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIHNhaWxpbmcgYWxvbmcgdGhlIGNvYXN0IHRvIFRoZW9kb3NpYSBmcm9tIFBhbnRpY2FwYWV1bSwgQXBvbGxvZG9ydXMgcHV0CiAgICAgICAgICAgICAgICAgICAgICAgIG9uIGJvYXJkIHRoZSBzaGlwIG9uZSBvciB0d28gaGFtcGVycyBvZiB3b29sLCBlbGV2ZW4gb3IgdHdlbHZlIGphcnMgb2Ygc2FsdAogICAgICAgICAgICAgICAgICAgICAgICBmaXNoLCBhbmQgZ29hdC1za2luc+KAlHR3byBvciB0aHJlZSBidW5kbGVz4oCUYW5kIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIGFkZGl0aW9uIHRvIHRoZXNlLCB3cml0dGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZpZGF2aXRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIDE3IGFib3ZlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBzdWJtaXR0ZWQgYnkgRXVwaGlsZXR1cywgc29uIG9mIERhbW90aW11cywgb2YgQXBoaWRuYWUsIEhpcHBpYXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaW1veGVudXMsIG9mIFRoeW1hZXRhZGFlLCBTb3N0cmF0dXMsIHNvbiBvZiBQaGlsaXAsIG9mIEhpc3RpYWVhLAogICAgICAgICAgICAgICAgICAgICAgICBBcmNoZW5vbWlkZXMsIHNvbiBvZiBTdHJhdG8sIG9mIFRocmlhLiBhbmQgUGhpbHRpYWRlcywgc29uIG9mIEN0ZXNpY2xlcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFh5cGV0w6ouPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwaGlkbmFlIHdhcyBhIGRlbWUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBBY2FudGlzOyBUaHltYWV0YWRhZSwgYSBkZW1lIG9mIHRoZSB0cmliZSBIaXBwb3Rob250aXM7IFRocmlhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBkZW1lIG9mIHRoZSB0cmliZSBPZW5lw69zOyBhbmQgWHlwZXTDqiwgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpYmUgQ2Vjcm9waXMuPC9ub3RlPjwvdHJhbnNsYXRpb24+"
translation['35.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBzaGFtZWxlc3NuZXNzIG9mIHRoZXNlIG1lbi4gTm93LCBtZW4gb2YgdGhlIGp1cnksIHRha2UgdGhvdWdodCBpbiB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIG1pbmRzLCB3aGV0aGVyIHlvdSBldmVyIGtuZXcgb3IgaGVhcmQgb2YgYW55IHBlb3BsZSBpbXBvcnRpbmcgd2luZSBieSB3YXkgb2YKICAgICAgICAgICAgICAgICAgICB0cmFkZSBmcm9tIFBvbnR1cyB0byBBdGhlbnMsIGFuZCBlc3BlY2lhbGx5IENvYW4gd2luZS4gVGhlIHZlcnkgb3Bwb3NpdGUgaXMsIG9mCiAgICAgICAgICAgICAgICAgICAgY291cnNlLCB0aGUgY2FzZS4gV2luZSBpcyBjYXJyaWVkIHRvIFBvbnR1cyBmcm9tIHBsYWNlcyBhcm91bmQgdXMsIGZyb20KICAgICAgICAgICAgICAgICAgICBQZXBhcmV0aHVzLCBhbmQgQ29zLCBhbmQgVGhhc29zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBlcGFyZXRodXMsIENvcywKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFRoYXNvcyB3ZXJlIGFsbCBpc2xhbmRzIGluIHRoZSBBZWdlYW4uPC9ub3RlPiBhbmQgTWVuZMOqLCBhbmQKICAgICAgICAgICAgICAgICAgICBmcm9tIGFsbCBzb3J0cyBvZiBvdGhlciBwbGFjZXM7IHdoZXJlYXMgdGhlIHRoaW5ncyBpbXBvcnRlZCBoZXJlIGZyb20gUG9udHVzIGFyZQogICAgICAgICAgICAgICAgICAgIHF1aXRlIGRpZmZlcmVudC4gPC90cmFuc2xhdGlvbj4="
translation['35.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB3ZSByZWZ1c2VkIHRvIGxldCB0aGVtIG9mZiwgYW5kIHF1ZXN0aW9uZWQgdGhlbSBhcyB0byB3aGV0aGVyIGFueSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBnb29kcyB3ZXJlIHNhdmVkIGluIFBvbnR1cywgdGhlIGRlZmVuZGFudCwgTGFjcml0dXMsIGFuc3dlcmVkIHRoYXQgb25lIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICBDeXppY2VuZSBzdGF0ZXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIDExIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzQuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuMjM8L2JpYmw+Ljwvbm90ZT4gd2VyZSBzYXZlZDsgYW5kIHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBoYWQgbGVudCB0aGlzIHN1bSBpbiBnb2xkIGluIFBvbnR1cyB0byBhIGNlcnRhaW4gc2hpcG93bmVyIG9mIFBoYXNlbGlzLAogICAgICAgICAgICAgICAgICAgIGEgZmVsbG93LWNvdW50cnltYW4gYW5kIGZyaWVuZCBvZiBoaXM7IGFuZCB0aGF0IGhlIHdhcyB1bmFibGUgdG8gZ2V0IGl0IGJhY2ssIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIGFsc28gd2FzIGFzIGdvb2QgYXMgbG9zdC4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNC4yMyIgdmFsaWQ9InllcyI+RGVtLiAzNC4yMzwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['35.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzCiAgICAgICAgICAgICAgICAgICAgd2hhdCB3YXMgc2FpZCBieSB0aGlzIGZlbGxvdywgTGFjcml0dXM7IGJ1dCB0aGUgYWdyZWVtZW50LCBtZW4gb2YgdGhlIGp1cnksIGRvZXMKICAgICAgICAgICAgICAgICAgICBub3Qgc2F5IHRoaXMuIEl0IGJpZHMgdGhlc2UgbWVuIHRvIHRha2Ugb24gYm9hcmQgYSByZXR1cm4gY2FyZ28sIGFuZCBicmluZyBpdAogICAgICAgICAgICAgICAgICAgIGJhY2sgdG8gQXRoZW5zOyBub3QgdG8gbGVuZCBvdXIgcHJvcGVydHkgd2l0aG91dCBvdXIgY29uc2VudCB0byB3aG9tc29ldmVyIGluCiAgICAgICAgICAgICAgICAgICAgUG9udHVzIHRoZXkgcGxlYXNlZCwgYnV0IHRvIGRlbGl2ZXIgaXQgaW4gaXRzIGVudGlyZXR5IHRvIHVzIGF0IEF0aGVucywgdW50aWwgd2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgcmVjb3ZlciBhbGwgdGhlIG1vbmV5IHdoaWNoIHdlIGhhZCBsZW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIHBsZWFzZSByZWFkIHRoZSBhZ3JlZW1lbnQgYWdhaW4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQWdyZWVtZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdyZWVtZW50PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFncmVlbWVudDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG9lcyB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQsIG1lbiBvZiB0aGUganVyeSwgYmlkIHRoZXNlIG1lbiBsZW5kIG91ciBtb25leSwgYW5kIHRoYXQgdG8gYSBtYW4gd2hvbQogICAgICAgICAgICAgICAgICAgIHdlIGRvIG5vdCBrbm93LCBhbmQgaGF2ZSBuZXZlciBzZWVuPyBPciBkb2VzIGl0IGJpZCB0aGVtIHB1dCBvbiBib2FyZCB0aGVpciBzaGlwCiAgICAgICAgICAgICAgICAgICAgYSByZXR1cm4gY2FyZ28gYW5kIGNvbnZleSBpdCB0byBBdGhlbnMsIGFuZCB0aGVyZSBkaXNwbGF5IGl0IHRvIHVzLCBhbmQgZGVsaXZlcgogICAgICAgICAgICAgICAgICAgIGl0IHRvIHVzIGluIGl0cyBlbnRpcmV0eT8gPC90cmFuc2xhdGlvbj4="
translation['35.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYWdyZWVtZW50IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgcGVybWl0IGFueXRoaW5nIHRvIGhhdmUgZ3JlYXRlciBlZmZlY3QgdGhhbiB0aGUgdGVybXMgY29udGFpbmVkIGluIGl0LCBub3IKICAgICAgICAgICAgICAgICAgICB0aGF0IGFueW9uZSBzaG91bGQgYnJpbmcgZm9yd2FyZCBhbnkgbGF3IG9yIGRlY3JlZSBvciBhbnl0aGluZyBlbHNlIHdoYXRldmVyIHRvCiAgICAgICAgICAgICAgICAgICAgY29udHJhdmVuZSBpdHMgcHJvdmlzaW9uczsgeWV0IHRoZXNlIG1lbiBmcm9tIHRoZSB2ZXJ5IG91dHNldCBwYWlkIG5vIGhlZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGlzIGFncmVlbWVudCwgYnV0IG1hZGUgdXNlIG9mIG91ciBtb25leSBhcyBpZiBpdCBoYWQgYmVlbiB0aGVpciB2ZXJ5IG93bjsgc28KICAgICAgICAgICAgICAgICAgICByYXNjYWxseSBhcmUgdGhleSBhcyBzb3BoaXN0cyBhbmQgZGlzaG9uZXN0IGFzIG1lbi4gPC90cmFuc2xhdGlvbj4="
translation['35.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgb3duIHBhcnQsIEkgc3dlYXIgYnkgWmV1cyB0aGUga2luZyBhbmQgYnkgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGdvZHMsIEkgbmV2ZXIgbWFkZSBpdCBhIG1hdHRlciBvZiByZXByb2FjaCB0byBhbnlvbmUsIG1lbiBvZiB0aGUganVyeSwgbm9yCiAgICAgICAgICAgICAgICAgICAgYmxhbWVkIGhpbSwgaWYgaGUgY2hvc2UgdG8gYmUgYSBzb3BoaXN0IGFuZCB0byBwYXkgbW9uZXkgdG8gSXNvY3JhdGVzOyBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGJlIG1hZCBpZiBJIGNvbmNlcm5lZCBteXNlbGYgYWJvdXQgYW55dGhpbmcgb2YgdGhhdCBzb3J0LiBCdXQsIGJ5IFpldXMsIEkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgaXQgcmlnaHQgdGhhdCBtZW4sIGJlY2F1c2UgdGhleSBsb29rIGRvd24gb24gcGVvcGxlIGFuZCB0aGluayB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgY2xldmVyLCBzaG91bGQgY292ZXQgdGhlIHByb3BlcnR5IG9mIG90aGVycyBhbmQgc2VlayB0byBkZWZyYXVkIHRoZW0sIHRydXN0aW5nCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlaXIgcG93ZXIgb2Ygc3BlZWNoLiBUaGF0IGlzIHRoZSBwYXJ0IG9mIGEgcmFzY2FsbHkgc29waGlzdCwgd2hvIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIG1hZGUgdG8gc3VmZmVyIGZvciBpdC4gPC90cmFuc2xhdGlvbj4="
translation['35.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGZlbGxvdyBMYWNyaXR1cywKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIGhhcyBub3QgY29tZSBpbnRvIGNvdXJ0IHJlbHlpbmcgb24gdGhlIGp1c3RpY2Ugb2YgaGlzIGNhc2UsIGJ1dAogICAgICAgICAgICAgICAgICAgIHJlYWxpemluZyBwZXJmZWN0bHkgd2hhdCBoZSBhbmQgaGlzIGJyb3RoZXJzIGhhdmUgZG9uZSBpbiB0aGUgbWF0dGVyIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBsb2FuOyBhbmQgYmVjYXVzZSBoZSBjb25zaWRlcnMgdGhhdCBoZSBpcyBjbGV2ZXIgYW5kIHdpbGwgZWFzaWx5IHByb3ZpZGUKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgdG8gZGVmZW5kIGV2aWwgcHJhY3RpY2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgY2xvc2UKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYWxsZWwgYmV0d2VlbiB0aGlzIHBhc3NhZ2UgYW5kIHRoZSBwb3J0cmF5YWwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHNjaG9vbOKAnSBvZiBTb2NyYXRlcyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5BcmlzdG9waC4gQ2wuPC9iaWJsPiB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhhcmRseSBlc2NhcGUgdGhlIHJlYWRlci48L25vdGU+IGhlIHRoaW5rcyBoZSB3aWxsIGxlYWQgeW91IGFzdHJheSBqdXN0IGFzCiAgICAgICAgICAgICAgICAgICAgaGUgcGxlYXNlcy4gRm9yIGl0IGlzIHByZWNpc2VseSBpbiB0aGVzZSBtYXR0ZXJzIHRoYXQgaGUgcHJvZmVzc2VzIGhpbXNlbGYgdG8gYmUKICAgICAgICAgICAgICAgICAgICBjbGV2ZXIsIGFuZCBoZSBhc2tzIG1vbmV5LCBhbmQgY29sbGVjdHMgcHVwaWxzLCBwcm9taXNpbmcgdG8gaW5zdHJ1Y3QgdGhlbSBpbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHZlcnkgdGhpbmdzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5BcmlzdG9waC4gQ2wuPC9iaWJsPiB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhhcmRseSBlc2NhcGUgdGhlIHJlYWRlci48L3RyYW5zbGF0aW9uPg=="
translation['35.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIGhlCiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RlZCBoaXMgb3duIGJyb3RoZXJzIGluIHRoaXMgYXJ0LCB3aGljaCB5b3UsIG1lbiBvZiB0aGUganVyeSwgc2VlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZXZpbCBhbmQgdW5qdXN04oCUdGhlIGFydCBvZiBib3Jyb3dpbmcgb24geW91ciBleGNoYW5nZSBtb25leSBmb3IgYQogICAgICAgICAgICAgICAgICAgIG1hcml0aW1lIGFkdmVudHVyZSwgYW5kIHRoZW4gZGVmcmF1ZGluZyB0aGUgbGVuZGVycywgYW5kIHJlZnVzaW5nIHRvIHBheSB0aGVtLgogICAgICAgICAgICAgICAgICAgIEhvdyBjb3VsZCB0aGVyZSBiZSBtZW4gYmFzZXIgdGhhbiB0aGUgb25lIHdobyB0ZWFjaGVzIHN1Y2ggYW4gYXJ0LCBvciB0aGFuIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGxlYXJuIG9mIGhpbT8gU2luY2UsIHRoZW4sIGhlIGlzIHNvIGNsZXZlciwgYW5kIHRydXN0cyBpbiBoaXMgcG93ZXIgb2YKICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBhbmQgaW4gdGhlIG9uZSB0aG91c2FuZCBkcmFjaG1hZSB3aGljaCBoZSBoYXMgcGFpZCB0byBoaXMgdGVhY2hlciwKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5iaWQgaGltIHNob3cgeW91LCBlaXRoZXIgdGhhdCB0aGV5IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBib3Jyb3cgdGhlIG1vbmV5IGZyb20gdXMsIG9yIHRoYXQsIGhhdmluZyBib3Jyb3dlZCBpdCwgdGhleSBoYXZlIHBhaWQgaXQgYmFjazsKICAgICAgICAgICAgICAgICAgICBvciB0aGF0IGFncmVlbWVudHMgZm9yIG92ZXJzZWFzIHRyYWRlIG91Z2h0IG5vdCB0byBiZSBiaW5kaW5nOyBvciB0aGF0IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgZm9yIHBlb3BsZSB0byB1c2UgbW9uZXkgZm9yIHNvbWUgb3RoZXIgcHVycG9zZSB0aGFuIHRoYXQgZm9yIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBpdCB1bmRlciBhZ3JlZW1lbnQuIExldCBoaW0gcHJvdmUgdG8geW91IHdoYXRldmVyIG9uZSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2l0aW9ucyBoZSBjaG9vc2VzLiBJZiBoZSBjYW4gc28gcHJvdmUgaXQgdG8geW91IHdobyBzaXQgdG8gZGVjaWRlIGNhc2VzIG9mCiAgICAgICAgICAgICAgICAgICAgbWVyY2FudGlsZSBjb250cmFjdHMsIEkgY2VydGFpbmx5IGNvbmNlZGUgdGhhdCBoZSBpcyB0aGUgY2xldmVyZXN0IG9mIG1lbi4gQnV0IEkKICAgICAgICAgICAgICAgICAgICBrbm93IHdlbGwgdGhhdCBoZSB3b3VsZCBub3QgYmUgYWJsZSB0byBwcm92ZSBpdCB0byB5b3Ugb3IgaW5kdWNlIHlvdSB0byBiZWxpZXZlCiAgICAgICAgICAgICAgICAgICAgYW55IG9uZSBvZiB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['35.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGFwYXJ0IGZyb20gYWxsIHRoaXMsIHN1cHBvc2UsIGJ5IGhlYXZlbiwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgd2VyZSByZXZlcnNlZCzigJR0aGF0IGl0IHdhcyBub3QgdGhpcyBtYW4ncyBkZWFkIGJyb3RoZXIgd2hvIG93ZWQgbWUgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXksIGJ1dCB0aGF0IEkgb3dlZCBoaXMgYnJvdGhlciBhIHRhbGVudCwgb3IgZWlnaHR5IG1pbmFlLCBvciBtb3JlIG9yIGxlc3M7CiAgICAgICAgICAgICAgICAgICAgZG8geW91IGZhbmN5IHRoYXQgdGhpcyBmZWxsb3csIExhY3JpdHVzLCB3b3VsZCBlbXBsb3kgdGhlIHNhbWUgbGFuZ3VhZ2UgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIG5vdyBzbyBsYXZpc2hseSB1c2VzPyBPciB3b3VsZCBzYXkgdGhhdCBoZSBpcyBub3QgdGhlIGhlaXIgYW5kIGhhcyBub3RoaW5nIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXMgYnJvdGhlcidzIGFmZmFpcnM/IE9yIHRoYXQgaGUgd291bGQgbm90IGV4YWN0IHBheW1lbnQgZnJvbSBtZQogICAgICAgICAgICAgICAgICAgIG1lcmNpbGVzc2x5LCBhcyBoZSBoYXMgZnJvbSB0aGUgb3RoZXJzIHdobyBvd2VkIGFueXRoaW5nIHRvIHRoZSBkZWNlYXNlZCwKICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIGluIFBoYXNlbGlzIG9yIGFueXdoZXJlIGVsc2U/IDwvdHJhbnNsYXRpb24+"
translation['35.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGlmCiAgICAgICAgICAgICAgICAgICAgYW55IG9uZSBvZiB1cywgYmVpbmcgZGVmZW5kYW50IGluIGEgc3VpdCBicm91Z2h0IGJ5IGhpbSwgaGFkIGRhcmVkIHRvIGVudGVyIGEKICAgICAgICAgICAgICAgICAgICBzcGVjaWFsIHBsZWEgZGVjbGFyaW5nIHRoYXQgdGhlIGFjdGlvbiB3YXMgbm90IG9uZSB0aGF0IGNvdWxkIGJlIGJyb3VnaHQgaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0LCBJIGtub3cgd2VsbCB0aGF0IGhlIHdvdWxkIGhhdmUgd2F4ZWQgaW5kaWduYW50LCBhbmQgd291bGQgaGF2ZSBwcm90ZXN0ZWQKICAgICAgICAgICAgICAgICAgICB0byB5b3UsIGRlY2xhcmluZyB0aGF0IGhlIHdhcyBzdWZmZXJpbmcgdHJlYXRtZW50IHRoYXQgd2FzIG91dHJhZ2VvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgdG8gbGF3LCBpZiBhbnlvbmUgdm90ZWQgdGhhdCBoaXMgYWN0aW9uLCBiZWluZyBhIG1lcmNhbnRpbGUgb25lLCB3YXMKICAgICAgICAgICAgICAgICAgICBub3Qgb25lIHRoYXQgY291bGQgYmUgYnJvdWdodC4gVGhlbiwgTGFjcml0dXMsIGlmIHlvdSBjb25zaWRlciB0aGlzIGp1c3QgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYsIHdoeSBzaG91bGQgaXQgbm90IGJlIGp1c3QgZm9yIG1lPyBEbyBub3QgdGhlIHNhbWUgbGF3cyBzdGFuZCB3cml0dGVuCiAgICAgICAgICAgICAgICAgICAgZm9yIHVzIGFsbD8gQW5kIGhhdmUgd2Ugbm90IGFsbCB0aGUgc2FtZSByaWdodHMgaW4gcmVnYXJkIHRvIG1lcmNhbnRpbGUgc3VpdHM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgaXMgYSBtYW4gc28gdmlsZSwgc28gc3VycGFzc2luZyBhbGwKICAgICAgICAgICAgICAgICAgICBodW1hbiBraW5kIGluIGJhc2VuZXNzLCB0aGF0IGhlIHNlZWtzIHRvIGluZHVjZSB5b3UgdG8gdm90ZSB0aGF0IHRoaXMgbWVyY2FudGlsZQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBjYW5ub3QgYmUgYnJvdWdodCB3aGVuIHlvdSBhcmUgbm93IHNpdHRpbmcgdG8ganVkZ2UgbWVyY2FudGlsZQogICAgICAgICAgICAgICAgICAgICAgICBzdWl0cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBpcyBpdCB5b3Ugd291bGQgaGF2ZSwgTGFjcml0dXM/IElzCiAgICAgICAgICAgICAgICAgICAgaXQgbm90IGVub3VnaCB0aGF0IHdlIHNob3VsZCBiZSByb2JiZWQgb2YgdGhlIG1vbmV5IHdlIGxlbnQgeW91IGJ1dCBzaG91bGQgd2UKICAgICAgICAgICAgICAgICAgICBhbHNvIGJlIGdpdmVuIG92ZXIgdG8gcHJpc29uIGJ5IHlvdSwgaWYgd2UgZG8gbm90IHBheSB0aGUgY29zdHMgYWRqdWRnZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHVzPyA8L3RyYW5zbGF0aW9uPg=="
translation['35.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBpdCBub3QgYmUgb3V0cmFnZW91cywgYW5kIGNydWVsLCBhbmQKICAgICAgICAgICAgICAgICAgICBzaGFtZWZ1bCwgZm9yIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCBpZiB0aG9zZSB3aG8gaGF2ZSBsZW50IG1vbmV5IGluIHlvdXIgcG9ydAogICAgICAgICAgICAgICAgICAgIGZvciBhbiBhZHZlbnR1cmUgb3ZlcnNlYXMsIGFuZCBoYXZlIGJlZW4gZGVmcmF1ZGVkIG9mIGl0LCBzaG91bGQgYmUgbGVkIG9mZiB0bwogICAgICAgICAgICAgICAgICAgIHByaXNvbiBieSB0aG9zZSB3aG8gYm9ycm93ZWQgYW5kIGFyZSBzZWVraW5nIHRvIGV2YWRlIHBheW1lbnQ/IElzIGl0IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgTGFjcml0dXMsIHRoYXQgeW91IHdvdWxkIGhhdmUgdGhlc2UgZ2VudGxlbWVuIHNhbmN0aW9uPyBCdXQsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB3aGVyZSBhcmUgd2UgdG8gb2J0YWluIGp1c3RpY2UgaW4gdGhlIG1hdHRlciBvZiBjb21tZXJjaWFsIGNvbnRyYWN0cz8gQmVmb3JlCiAgICAgICAgICAgICAgICAgICAgd2hhdCBtYWdpc3RyYXRlcywgb3IgYXQgd2hhdCB0aW1lPyBCZWZvcmUgdGhlIEVsZXZlbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGJvYXJkIG9mIHBvbGljZSBjb21taXNzaW9uZXJzLCBoYXZpbmcganVyaXNkaWN0aW9uIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9mIGNhcGl0YWwgY3JpbWVzLCBhbmQgY2hhcmdlZCB3aXRoIHRoZSBjdXN0b2R5IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZC48L25vdGU+PyBCdXQgdGhleSBicmluZyBpbnRvIGNvdXJ0IGJ1cmdsYXJzIGFuZCB0aGlldmVzIGFuZCBvdGhlcgogICAgICAgICAgICAgICAgICAgIGV2aWwtZG9lcnMgd2hvIGFyZSBjaGFyZ2VkIHdpdGggY2FwaXRhbCBjcmltZXMuIEJlZm9yZSB0aGUgQXJjaG9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBhcmNob24g77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4Dhvb3Ovc+FzrzOv8+CPC9mb3JlaWduPu+8iSBoYWQgdGhlIGR1dHkgb2YgcGFzc2luZyBqdWRnZW1lbnQgdXBvbgogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnRzIG9mIHBhcmVudHMsIG9ycGhhbnMsIGFuZCB1bm1hcnJpZWQgZ2lybHMgd2hvIGhhZCBpbmhlcml0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTYuNiIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQXRoLiBQb2wuIDU2LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNi03PC9iaWJsPi48L25vdGU+PyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPgOG9vc69z4XOvM6/z4I8L2ZvcmVpZ24+77yJIGhhZCB0aGUgZHV0eSBvZiBwYXNzaW5nIGp1ZGdlbWVudCB1cG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsYWludHMgb2YgcGFyZW50cywgb3JwaGFucywgYW5kIHVubWFycmllZCBnaXJscyB3aG8gaGFkIGluaGVyaXRlZAogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiA1Ni42IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguIFBvbC4gNTYuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LTc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['35.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgaXMgZm9yCiAgICAgICAgICAgICAgICAgICAgaGVpcmVzc2VzLCBhbmQgb3JwaGFucywgYW5kIHBhcmVudHMgdGhhdCB0aGUgQXJjaG9uIGlzIGFwcG9pbnRlZCB0byBjYXJlLiBUaGVuCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBLaW5nLWFyY2hvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZnVuY3Rpb25zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBLaW5nLWFyY2hvbiB3ZXJlIGxhcmdlbHkgcmVsaWdpb3VzLCBhbmQgdGhlIGd5bW5lc2lhcmNocywgb3Igc3VwZXJpbnRlbmRlbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmZXN0YWwgZ2FtZXMsIHdlcmUgdW5kZXIgaGlzIGNvbnRyb2wuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTciIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLiA1NzwvYmlibD4uPC9ub3RlPj8gQnV0IHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIG5vdCBneW1uZXNpYXJjaHMsIG5vciBhcmUgd2UgaW5kaWN0aW5nIGFueW9uZSBmb3IgaW1waWV0eS4gT3Igd2lsbCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUG9sZW1hcmNoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDU3IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguIFBvbC4gNTc8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGhpcmQgYXJjaG9uLCBvcmlnaW5hbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmlzdGVyIG9mIHdhciwgcHJlc2lkZWQgb3ZlciB0aGUgY291cnQgaW4gd2hpY2ggY2FzZXMgcmVnYXJkaW5nIHRoZSByaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgb2YgYWxpZW5zIHdlcmUgc2V0dGxlZC4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiA1OCIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQXRoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9sLiA1ODwvYmlibD4uPC9ub3RlPiBicmluZyB1cyBpbnRvIGNvdXJ0PyBZZXMsIGZvciBkaXNyZWdhcmQgb2YgYQogICAgICAgICAgICAgICAgICAgIHBhdHJvbiwgb3IgZm9yIGhhdmluZyBubyBwYXRyb24uPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDU4IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb2wuIDU4PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSByZXNpZGVudAogICAgICAgICAgICAgICAgICAgICAgICBhbGllbiB3YXMgcmVxdWlyZWQgdG8gYmUgZW5yb2xsZWQgdW5kZXIgc29tZSBjaXRpemVuIGFzIHBhdHJvbi48L25vdGU+IFdlbGwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGUgR2VuZXJhbHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGVuIEdlbmVyYWxzIHdlcmUgYXBwb2ludGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGFubnVhbGx5LCBvbmUgb2Ygd2hvbSBoYWQganVkaWNpYWwgZnVuY3Rpb25zIGNvbm5lY3RlZCB3aXRoIHRoZSBhcHBvaW50bWVudAogICAgICAgICAgICAgICAgICAgICAgICBvZiB0cmllcmFyY2hzLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDYxLjEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMTwvYmlibD4uPC9ub3RlPiBhcmUgbGVmdC4gQnV0IHRoZXkgYXBwb2ludCB0aGUgdHJpZXJhcmNoczsgdGhleQogICAgICAgICAgICAgICAgICAgIGJyaW5nIG5vIG1lcmNhbnRpbGUgc3VpdHMgaW50byBjb3VydC4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDYxLjEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEuMTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['35.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5JLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIGFtIGEgbWVyY2hhbnQsIGFuZCB5b3UgYXJlIHRoZSBicm90aGVyIGFuZCBoZWlyIG9mIGEgbWVyY2hhbnQsIHdobyBnb3QKICAgICAgICAgICAgICAgICAgICBmcm9tIG1lIG1vbmV5IGZvciBhIG1lcmNhbnRpbGUgdmVudHVyZS4gQmVmb3JlIHdob20sIHRoZW4sIHNob3VsZCB0aGlzIHN1aXQgYmUKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkPyBUZWxsIG1lLCBMYWNyaXR1czsgb25seSBzYXkgd2hhdCBpcyBqdXN0IGFuZCBhY2NvcmRpbmcgdG8gbGF3LiBCdXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBsaXZlcyBubyBtYW4gY2xldmVyIGVub3VnaCB0byBiZSBhYmxlIHRvIHNheSBhbnl0aGluZyB0aGF0IGlzIGp1c3QgaW4KICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uIHdpdGggYSBjYXNlIGxpa2UgeW91cnMuIDwvdHJhbnNsYXRpb24+"
translation['35.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgbm90IGluIHRoZXNlIG1hdHRlcnMgb25seSwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHN1ZmZlcmVkIG91dHJhZ2VvdXMgd3JvbmdzIGF0IHRoZSBoYW5kcyBvZiB0aGlzIG1hbiBMYWNyaXR1czsgZm9yLCBiZXNpZGVzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgZGVmcmF1ZGVkIG9mIG15IG1vbmV5LCBJIHNob3VsZCBoYXZlIGJlZW4gYnJvdWdodCBpbnRvIHRoZSBncmF2ZXN0IGRhbmdlciwKICAgICAgICAgICAgICAgICAgICBzbyBmYXIgYXMgaGlzIHBvd2VyIHdlbnQsIGlmIHRoZSBhZ3JlZW1lbnQgbWFkZSB3aXRoIHRoZXNlIG1lbiBoYWQgbm90IGNvbWUgdG8KICAgICAgICAgICAgICAgICAgICBteSBhaWQgYnkgYmVhcmluZyB3aXRuZXNzIHRoYXQgSSBsZW50IHRoZSBtb25leSBmb3IgYSB2b3lhZ2UgdG8gUG9udHVzIGFuZCBiYWNrCiAgICAgICAgICAgICAgICAgICAgdG8gQXRoZW5zLiBGb3IgeW91IGtub3csIG1lbiBvZiB0aGUganVyeSwgaG93IHNldmVyZSB0aGUgbGF3IGlzLCBpZiBhbnkgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzIGNvcm4gdG8gYW55IG90aGVyIHBvcnQgdGhhbiB0aGUgcG9ydCBvZiBBdGhlbnMsIG9yIGxlbmRzIG1vbmV5IGZvcgogICAgICAgICAgICAgICAgICAgIHVzZSBpbiBhbnkgbWFya2V0IHNhdmUgdGhhdCBvZiBBdGhlbnM7IHlvdSBrbm93IHdoYXQgcGVuYWx0aWVzIHRoZXJlIGFyZSBpbiBzdWNoCiAgICAgICAgICAgICAgICAgICAgY2FzZXMsIGFuZCBob3cgc2V2ZXJlIGFuZCB0byBiZSBkcmVhZGVkIHRoZXkgYXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['35.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgcmVhZCB0aGVtIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBpdHNlbGYsIHRoYXQgdGhleSBtYXkgaGF2ZSBtb3JlIGV4YWN0IGluZm9ybWF0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgc2hhbGwgYmUgdW5sYXdmdWwKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGFueSBBdGhlbmlhbiBvciBhbnkgYWxpZW4gcmVzaWRpbmcgYXQgQXRoZW5zIG9yIGZvciBhbnkgcGVyc29uIG92ZXIgd2hvbQogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgY29udHJvbCwgdG8gbGVuZCBtb25leSBvbiBhbnkgdmVzc2VsIHdoaWNoIGlzIG5vdCBnb2luZyB0byBicmluZwogICAgICAgICAgICAgICAgICAgICAgICB0byBBdGhlbnMgZ3JhaW4gb3IgdGhlIG90aGVyIGFydGljbGVzIHNwZWNpZmljYWxseSBtZW50aW9uZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWFkZXIgZG9lcyBub3QgcXVvdGUgdGhlIGxhdyBpbiBmdWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0IGFicmlkZ2VzIGl0LCBhbmQgYWRkcyB0aGlzIGNsYXVzZSBhcyBhIHNvcnQgb2Yg4oCcZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNldGVyYS7igJ08L25vdGU+IEFuZCBpZiBhbnkgbWFuIGxlbmRzIG91dCBtb25leSBjb250cmFyeSB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGRlY3JlZSwgaW5mb3JtYXRpb24gYW5kIGFuIGFjY291bnQgb2YgdGhlIG1vbmV5IHNoYWxsIGJlIGxhaWQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBoYXJib3ItbWFzdGVycyBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgaXMgcHJvdmlkZWQgaW4gcmVnYXJkIHRvIHRoZSBzaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgZ3JhaW4uIEFuZCBoZSBzaGFsbCBoYXZlIG5vIHJpZ2h0IHRvIGJyaW5nIGFjdGlvbiBmb3IgdGhlIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGhhcyBsZW50IGZvciBhIHZveWFnZSB0byBhbnkgb3RoZXIgcGxhY2UgdGhhbiB0byBBdGhlbnMsIGFuZCBubwogICAgICAgICAgICAgICAgICAgICAgICBtYWdpc3RyYXRlIHNoYWxsIGJyaW5nIGFueSBzdWNoIHN1aXQgdG8gdHJpYWwuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBzaGFsbCBiZSB1bmxhd2Z1bAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgYW55IEF0aGVuaWFuIG9yIGFueSBhbGllbiByZXNpZGluZyBhdCBBdGhlbnMgb3IgZm9yIGFueSBwZXJzb24gb3ZlciB3aG9tCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBjb250cm9sLCB0byBsZW5kIG1vbmV5IG9uIGFueSB2ZXNzZWwgd2hpY2ggaXMgbm90IGdvaW5nIHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIEF0aGVucyBncmFpbiBvciB0aGUgb3RoZXIgYXJ0aWNsZXMgc3BlY2lmaWNhbGx5IG1lbnRpb25lZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHJlYWRlciBkb2VzIG5vdCBxdW90ZSB0aGUgbGF3IGluIGZ1bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgYWJyaWRnZXMgaXQsIGFuZCBhZGRzIHRoaXMgY2xhdXNlIGFzIGEgc29ydCBvZiDigJxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2V0ZXJhLuKAnTwvbm90ZT4gQW5kIGlmIGFueSBtYW4gbGVuZHMgb3V0IG1vbmV5IGNvbnRyYXJ5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZGVjcmVlLCBpbmZvcm1hdGlvbiBhbmQgYW4gYWNjb3VudCBvZiB0aGUgbW9uZXkgc2hhbGwgYmUgbGFpZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGhhcmJvci1tYXN0ZXJzIGluIHRoZSBzYW1lIG1hbm5lciBhcyBpcyBwcm92aWRlZCBpbiByZWdhcmQgdG8gdGhlIHNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBncmFpbi4gQW5kIGhlIHNoYWxsIGhhdmUgbm8gcmlnaHQgdG8gYnJpbmcgYWN0aW9uIGZvciB0aGUgbW9uZXkKICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgaGFzIGxlbnQgZm9yIGEgdm95YWdlIHRvIGFueSBvdGhlciBwbGFjZSB0aGFuIHRvIEF0aGVucywgYW5kIG5vCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGUgc2hhbGwgYnJpbmcgYW55IHN1Y2ggc3VpdCB0byB0cmlhbC48L3RyYW5zbGF0aW9uPg=="
translation['35.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGxhdywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGlzIHRodXMgc2V2ZXJlLiBCdXQgdGhlc2UgbWVuLCB0aGUgbW9zdCBhYm9taW5hYmxlIG9mIGh1bWFua2luZCwKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCBpdCBzdGFuZHMgZXhwcmVzc2x5IHdyaXR0ZW4gaW4gdGhlIGFncmVlbWVudCB0aGF0IHRoZSBtb25leSBzaG91bGQgY29tZQogICAgICAgICAgICAgICAgICAgIGJhY2sgdG8gQXRoZW5zLCBhbGxvd2VkIHdoYXQgdGhleSBib3Jyb3dlZCBmcm9tIHVzIGF0IEF0aGVucyB0byBiZSBjb252ZXllZCB0bwogICAgICAgICAgICAgICAgICAgIENoaW9zLiBGb3Igd2hlbiB0aGUgUGhhc2VsaXRlIHNoaXBvd25lciB3YW50ZWQgdG8gYm9ycm93IG90aGVyIG1vbmV5IGluIFBvbnR1cwogICAgICAgICAgICAgICAgICAgIGZyb20gYSBjZXJ0YWluIENoaWFuLCBhbmQgdGhlIENoaWFuIGRlY2xhcmVkIGhlIHdvdWxkIG5vdCBsZW5kIGl0IHVubGVzcyBoZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCByZWNlaXZlIGFzIHNlY3VyaXR5IGFsbCB0aGUgZ29vZHMgd2hpY2ggdGhlIHNoaXBvd25lciBoYWQgb24gYm9hcmQgb3IgaW4KICAgICAgICAgICAgICAgICAgICBoaXMga2VlcGluZywgYW5kIHVubGVzcyB0aG9zZSB3aG8gaGFkIG1hZGUgdGhlIGZvcm1lciBsb2FuIHNob3VsZCBjb25zZW50IHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhlc2UgbWVuIG5ldmVydGhlbGVzcyBwZXJtaXR0ZWQgdGhlc2UgZ29vZHMgb2Ygb3VycyB0byBiZWNvbWUgc2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIENoaWFuLCBhbmQgcHV0IHRoZW0gYWxsIGludG8gaGlzIGNvbnRyb2wuIDwvdHJhbnNsYXRpb24+"
translation['35.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGVzZSB0ZXJtcyB0aGV5IHNhaWxlZCBiYWNrIGZyb20gUG9udHVzIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgUGhhc2VsaXRlIHNoaXBvd25lciBhbmQgdGhlIENoaWFuIHdobyBoYWQgbWFkZSB0aGUgbG9hbiwgYW5kIHB1dCBpbnRvIFRoaWV2ZXMnCiAgICAgICAgICAgICAgICAgICAgSGFyYm9yLCB3aXRob3V0IGFuY2hvcmluZyBpbiB5b3VyIHBvcnQuIEFuZCBub3csIG1lbiBvZiB0aGUganVyeSwgbW9uZXkgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3YXMgbGVudCBmb3IgYSB2b3lhZ2UgZnJvbSBBdGhlbnMgdG8gUG9udHVzIGFuZCBiYWNrIGFnYWluIGZyb20gUG9udHVzIHRvIEF0aGVucwogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIGJyb3VnaHQgdG8gQ2hpb3MgYnkgdGhlc2UgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['35.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcywKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIGp1c3QgYXMgSSBhc3N1bWVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgbXkgc3BlZWNo4oCUeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHdyb25nZWQgbm8gbGVzcyB0aGFuIHdlIHdobyBsZW50IHRoZSBtb25leS4gQ29uc2lkZXIsIG1lbiBvZiB0aGUganVyeSwgaG93IHRoZQogICAgICAgICAgICAgICAgICAgIHdyb25nIHRvdWNoZXMgeW91IGFsc28uIFdoZW4gYSBtYW4gc2Vla3MgdG8gc2V0IGhpbXNlbGYgYWJvdmUgeW91ciBsYXdzLCBhbmQKICAgICAgICAgICAgICAgICAgICBtYWtlcyBvZiBubyBlZmZlY3QgbmF1dGljYWwgYWdyZWVtZW50cywgYnV0IGRvZXMgYXdheSB3aXRoIHRoZW0sIGFuZCBoYXMgc2VudAogICAgICAgICAgICAgICAgICAgIGF3YXkgdG8gQ2hpb3MgbW9uZXkgbGVudCBoZXJlIG9uIG91ciBleGNoYW5nZSwgaXMgaXQgbm90IGNsZWFyIHRoYXQgc3VjaCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdyb25ncyB5b3UgYXMgd2VsbCBhcyB1cyA8L3RyYW5zbGF0aW9uPg=="
translation['35.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgd29yZHMsIG1lbiBvZiB0aGUganVyeSwgYXJlIGFkZHJlc3NlZCB0byB0aGVzZSBwZW9wbGUgb25seSwKICAgICAgICAgICAgICAgICAgICBmb3IgaXQgd2FzIHRvIHRoZW0gdGhhdCBJIGxlbnQgdGhlIG1vbmV5LiBJdCB3aWxsIHJlbWFpbiBmb3IgdGhlbSB0byBkZWFsIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGF0IFBoYXNlbGl0ZSBzaGlwb3duZXIsIHRoZWlyIG93biBjb3VudHJ5bWFuLCB0byB3aG9tIHRoZXkgc2F5IHRoZXkgbGVudCB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSB1bmtub3duIHRvIHVzIGFuZCBjb250cmFyeSB0byB0aGUgYWdyZWVtZW50LiBGb3Igd2UgZG8gbm90IGtub3cgd2hhdAogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9ucyB3ZXJlIGVudGVyZWQgaW50byBieSB0aGVtIHdpdGggdGhlaXIgY291bnRyeW1hbjsgYnV0IHRoZXkga25vdwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['35.56'] = ""
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaG9ybWlvJ3MKICAgICAgICAgICAgICAgICAgICBpbmV4cGVyaWVuY2UgaW4gc3BlYWtpbmcsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgaXMgbm90IG1lcmVseSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVudGlvbmFsIHBsZWEgb2YgaW5leHBlcmllbmNlIO+8iGNvbXBhcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNC4xIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNC4xPC9iaWJsPu+8iTsgUGhvcm1pbyB3YXMgYnkgbm93IGFuIG9sZCBtYW4sIGFuZCBmdXJ0aGVyLCBzaW5jZQogICAgICAgICAgICAgICAgICAgICAgICBoZSB3YXMgYSBtYW51bWl0dGVkIHNsYXZlLCBoZSBjYW4gaGF2ZSBoYWQgbm8gdHJhaW5pbmcgd2hpY2ggd291bGQgZXF1aXAgaGltCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgdGFzaywgYW5kIGZ1cnRoZXJtb3JlLCBoZSB3YXMsIG9mIGNvdXJzZSwgb2YgYmFyYmFyaWFuIGJpcnRoLiBIaXMKICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kcywgdGhlcmVmb3JlLCBjYW1lIHRvIGhpcyBhaWQsIGFuZCBvbmUgb2YgdGhlbSBzcGVha3MgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlaGFsZi48L25vdGU+IGFuZCBoaXMgdXR0ZXIgaGVscGxlc3NuZXNzLCB5b3UgYWxsIHNlZSBmb3IgeW91cnNlbHZlcywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgQXRoZW5zLiBJdCBpcyBuZWNlc3NhcnkgZm9yIHVzLCBoaXMgZnJpZW5kcywgdG8gc3RhdGUgYW5kIHNldCBmb3J0aCBmb3IgeW91CiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzLCB3aGljaCB3ZSBrbm93IGZ1bGwgd2VsbCBmcm9tIGhhdmluZyBoZWFyZCBoaW0gb2Z0ZW4gcmVsYXRlIHRoZW07IGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCwgd2hlbiB5b3UgaGF2ZSBkdWx5IGxlYXJuZWQgZnJvbSB1cyBhbmQgaGF2ZSBjb21lIHRvIGtub3cgdGhlIHJpZ2h0cwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjYXNlLCB5b3UgbWF5IGdpdmUgYSB2ZXJkaWN0IHRoYXQgaXMgYm90aCBqdXN0IGFuZCBpbiBoYXJtb255IHdpdGggeW91cgogICAgICAgICAgICAgICAgICAgIG9hdGhzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjEiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM0LjE8L2JpYmw+77yJOyBQaG9ybWlvIHdhcyBieSBub3cgYW4gb2xkIG1hbiwgYW5kIGZ1cnRoZXIsIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlIHdhcyBhIG1hbnVtaXR0ZWQgc2xhdmUsIGhlIGNhbiBoYXZlIGhhZCBubyB0cmFpbmluZyB3aGljaCB3b3VsZCBlcXVpcCBoaW0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSB0YXNrLCBhbmQgZnVydGhlcm1vcmUsIGhlIHdhcywgb2YgY291cnNlLCBvZiBiYXJiYXJpYW4gYmlydGguIEhpcwogICAgICAgICAgICAgICAgICAgICAgICBmcmllbmRzLCB0aGVyZWZvcmUsIGNhbWUgdG8gaGlzIGFpZCwgYW5kIG9uZSBvZiB0aGVtIHNwZWFrcyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYmVoYWxmLjwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlIGhhdmUgcHV0IGluIGEgc3BlY2lhbCBwbGVhIGluIGJhciBvZgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwgbm90IHRoYXQgd2UgbWF5IGV2YWRlIHRoZSBpc3N1ZSBhbmQgd2FzdGUgdGltZSwgYnV0IHRoYXQsIGlmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHRlcm1zCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHBsYWludGlmZuKAnSBhbmQg4oCcZGVmZW5kYW50LOKAnSBhcyB1c2VkCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSB0cmFuc2xhdGlvbiBvZiB0aGlzIG9yYXRpb24sIGFwcGx5IHRvIHRoZSBzdWl0IGJyb3VnaHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBQaG9ybWlvLjwvbm90ZT4gc2hvd3MgdGhhdCBoZSBoYXMgY29tbWl0dGVkIG5vIHdyb25nIHdoYXRzb2V2ZXIsIGhlIG1heSB3aW4KICAgICAgICAgICAgICAgICAgICBpbiB5b3VyIGNvdXJ0IGFuIGFjcXVpdHRhbCB3aGljaCB3aWxsIGJlIGZpbmFsLiBGb3IgYWxsIHRoYXQgaW4gdGhlIG1pbmRzIG9mCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgcGVvcGxlIGJyaW5ncyBhYm91dCBhIGZpcm0gYW5kIGxhc3Rpbmcgc2V0dGxlbWVudCB3aXRob3V0IGVuZ2FnaW5nIGluIGEKICAgICAgICAgICAgICAgICAgICB0cmlhbCBiZWZvcmUgeW914oCUIDwvdHJhbnNsYXRpb24+"
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFsbCB0aGlzIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBoZXJlIGhhcyBkb25lOyBoZSBoYXMgZG9uZSBtYW55IGtpbmRuZXNzZXMgdG8gdGhpcyBtYW4gQXBvbGxvZG9ydXM7IGhlIGhhcyBkdWx5CiAgICAgICAgICAgICAgICAgICAgcGFpZCBhbmQgZGVsaXZlcmVkIHVwIHRvIHRoZSBwbGFpbnRpZmYgZXZlcnl0aGluZyBiZWxvbmdpbmcgdG8gaGltIG9mIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gbGVmdCBpbiBjb250cm9sLCBhbmQgaGFzIHNpbmNlIHJlY2VpdmVkIGEgZGlzY2hhcmdlIGZyb20gYWxsIGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICBjbGFpbXM7IG5ldmVydGhlbGVzcywgYXMgeW91IHNlZSwgYmVjYXVzZSBQaG9ybWlvIGNhbiBubyBsb25nZXIgc3VibWl0IHRvIGhpcwogICAgICAgICAgICAgICAgICAgIGRlbWFuZHMsIEFwb2xsb2RvcnVzIGhhcyBpbnN0aXR1dGVkIHRoaXMgdmV4YXRpb3VzIGFuZCBiYXNlbGVzcyBzdWl0IGZvciB0d2VudHkKICAgICAgICAgICAgICAgICAgICB0YWxlbnRzLiBGcm9tIHRoZSBiZWdpbm5pbmcsIHRoZXJlZm9yZSwgSSBzaGFsbCB0cnkgdG8gc2V0IGZvcnRoIGZvciB5b3UgYXMKICAgICAgICAgICAgICAgICAgICBicmllZmx5IGFzIHBvc3NpYmxlIGFsbCB0aGUgdHJhbnNhY3Rpb25zIFBob3JtaW8gaGFzIGhhZCB3aXRoIFBhc2lvIGFuZAogICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzLiBGcm9tIHRoZXNlLCBJIGFtIHN1cmUsIHRoZSBtYWxpY2lvdXMgY29uZHVjdCBvZiB0aGUgcGxhaW50aWZmIHdpbGwKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgY2xlYXIgdG8geW91LCBhbmQgYXQgdGhlIHNhbWUgdGltZSwgaGF2aW5nIGhlYXJkIHRoaXMgcmVjaXRhbCwgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmUgdGhhdCB0aGUgYWN0aW9uIGlzIG5vdCBtYWludGFpbmFibGUuIDwvdHJhbnNsYXRpb24+"
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5GaXJzdCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB0byB5b3UgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZXMgb2YgYWdyZWVtZW50LCBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggUGFzaW8gbGVhc2VkIHRvIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICB0aGUgYmFuayBhbmQgdGhlIHNoaWVsZC1mYWN0b3J5LiBUYWtlLCBwbGVhc2UsIHRoZSBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkl0IGlzIG5vdCBzdGF0ZWQgcHJlY2lzZWx5IHdoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBjaGFsbGVuZ2Ugd2FzOyBidXQgaXQgbWF5IHdlbGwgaGF2ZSBiZWVuIGEgZGVtYW5kIG1hZGUgdG8gQXBvbGxvZG9ydXMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gcHJvZHVjZSB0aGUgYXJ0aWNsZXMgaW4gcXVlc3Rpb24uPC9ub3RlPiBhbmQgdGhlc2UgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQXJ0aWNsZXMgb2YgQWdyZWVtZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJ0aWNsZXMgb2YgQWdyZWVtZW50PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFydGljbGVzIG9mIEFncmVlbWVudDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ2hhbGxlbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXNlLCBtZW4gb2YgQXRoZW5zLCBhcmUgdGhlIGFydGljbGVzIG9mCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50IGluIGFjY29yZGFuY2Ugd2l0aCB3aGljaCBQYXNpbyBsZWFzZWQgdGhlIGJhbmsgYW5kIHRoZSBzaGllbGQtZmFjdG9yeQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBkZWZlbmRhbnQsIGFmdGVyIHRoZSBsYXR0ZXIgaGFkIG5vdyBiZWNvbWUgaGlzIG93biBtYXN0ZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlIGhhZCBiZWVuIGdpdmVuIGhpcyBmcmVlZG9tIGJ5IFBhc2lvLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBCdXQgeW91IG11c3QgaGVhciBhbmQgdW5kZXJzdGFuZCBob3cgaXQgd2FzIHRoYXQgUGFzaW8gY2FtZSB0byBvd2UgdGhlIGVsZXZlbgogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgdG8gdGhlIGJhbmsuIDwvdHJhbnNsYXRpb24+"
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIG93ZWQgdGhhdCBhbW91bnQsIG5vdAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgcG92ZXJ0eSwgYnV0IGJlY2F1c2Ugb2YgaGlzIHRocmlmdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHdvcmQgbmF0dXJhbGx5IGRlbm90ZXMgaW5kdXN0cnksIGJ1dCB0aGUgY2xhdXNlIG1pZ2h0IHBvc3NpYmx5IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkIOKAnGJlY2F1c2UgaGUgZGlkIG5vdCB3aXNoIGNhcGl0YWwgdG8gbGllIGlkbGXigJ07CiAgICAgICAgICAgICAgICAgICAgICAgIHNvIERhcmVzdGUuIEluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4gNDUuMzM8L2JpYmw+LCBBcG9sbG9kb3J1cyBpbXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGRlYnQgd2FzIGR1ZSB0byBtaXNtYW5hZ2VtZW50IG9uIHRoZSBwYXJ0IG9mIFBob3JtaW8uPC9ub3RlPiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGUgcmVhbCBwcm9wZXJ0eSBvZiBQYXNpbyB3YXMgYWJvdXQgdHdlbnR5IHRhbGVudHMsIGJ1dCBpbiBhZGRpdGlvbiB0byB0aGlzIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIG1vcmUgdGhhbiBmaWZ0eSB0YWxlbnRzIGluIG1vbmV5IG9mIGhpcyBvd24gbGVudDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUuMzMiIHZhbGlkPSJ5ZXMiPkRlbS4gNDUuMzM8L2JpYmw+LCBBcG9sbG9kb3J1cyBpbXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGRlYnQgd2FzIGR1ZSB0byBtaXNtYW5hZ2VtZW50IG9uIHRoZSBwYXJ0IG9mIFBob3JtaW8uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFzIGVsZXZlbiB0YWxlbnRzIG9mIHRoaXMgbW9uZXkgYmVsb25nZWQgdG8gdGhlIGJhbmssIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlIGlzIG9wZW4gdG8gcXVlc3Rpb24uPC9ub3RlPiBvdXQgYXQgaW50ZXJlc3QuIEFtb25nIHRoZXNlIHdlcmUgZWxldmVuCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cyBvZiB0aGUgYmFuaydzIGRlcG9zaXRzLCBwcm9maXRhYmx5IGludmVzdGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgbXkgY2xpZW50IGxlYXNlZCB0aGUgYnVzaW5lc3Mgb2YgdGhlIGJhbmsKICAgICAgICAgICAgICAgICAgICBhbmQgdG9vayBvdmVyIHRoZSBkZXBvc2l0cywgcmVhbGl6aW5nIHRoYXQsIGlmIGhlIGhhZCBub3QgeWV0IG9idGFpbmVkIHRoZSByaWdodAogICAgICAgICAgICAgICAgICAgIG9mIGNpdGl6ZW5zaGlwIHdpdGggeW91LCBoZSB3b3VsZCBiZSB1bmFibGUgdG8gcmVjb3ZlciB0aGUgbW9uaWVzIHdoaWNoIFBhc2lvCiAgICAgICAgICAgICAgICAgICAgaGFkIGxlbnQgb24gdGhlIHNlY3VyaXR5IG9mIGxhbmQgYW5kIGxvZGdpbmctaG91c2VzLCBoZSBjaG9zZSB0byBoYXZlIFBhc2lvCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhcyBkZWJ0b3IgZm9yIHRoZXNlIHN1bXMsIHJhdGhlciB0aGFuIHRoZSBvdGhlcnMgdG8gd2hvbSBoZSBoYWQgbGVudAogICAgICAgICAgICAgICAgICAgIHRoZW0uIEl0IHdhcyBmb3IgdGhpcyByZWFzb24gdGhhdCBQYXNpbyB3YXMgc2V0IGRvd24gYXMgb3dpbmcgZWxldmVuIHRhbGVudHMsIGFzCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gc3RhdGVkIHRvIHlvdSBpbiB0aGUgZGVwb3NpdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['36.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB3aGF0IG1hbm5lciB0aGUgbGVhc2Ugd2FzIG1hZGUsIHlvdSBrbm93CiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZGVwb3NpdGlvbiBvZiB0aGUgbWFuYWdlciBvZiB0aGUgYmFuayBoaW1zZWxmLiBBZnRlciB0aGlzLCBQYXNpbyBiZWNhbWUKICAgICAgICAgICAgICAgICAgICBpbGw7IGFuZCBvYnNlcnZlIGhvdyBoZSBkaXNwb3NlZCBvZiBoaXMgZXN0YXRlLiBUYWtlIHRoZSBjb3B5IG9mIHRoZSB3aWxsLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGlzIGNoYWxsZW5nZSwgYW5kIHRoZXNlIGRlcG9zaXRpb25zIG1hZGUgYnkgdGhvc2UgaW4gd2hvc2UgY3VzdG9keSB0aGUgd2lsbCBpcwogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0ZWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2lsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpbGw8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2lsbDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ2hhbGxlbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIFBhc2lvIGhhZAogICAgICAgICAgICAgICAgICAgIGRpZWQsIGFmdGVyIG1ha2luZyB0aGlzIHdpbGwsIFBob3JtaW8sIHRoZSBkZWZlbmRhbnQsIHRvb2sgaGlzIHdpZG93IHRvIHdpZmUgaW4KICAgICAgICAgICAgICAgICAgICBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSB3aWxsIGFuZCB1bmRlcnRvb2sgdGhlIGd1YXJkaWFuc2hpcCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgc29uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBvZiBQYXNpY2xlcywgd2hvIHdhcyBhIG1pbm9yLgogICAgICAgICAgICAgICAgICAgICAgICBUaGF0IHRoZSBndWFyZGlhbiBzaG91bGQgbWFycnkgdGhlIHdpZG93IHdhcyBhIGNvbW1vbiBwcm92aXNpb24g77yIc28KICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNhc2Ugb2YgRGVtb3N0aGVuZXMnIG93biBtb3RoZXI7IFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMzIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDMzPC9iaWJsPu+8iS4gSW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NSIgdmFsaWQ9InllcyI+RGVtLiA0NTwvYmlibD4gQXBvbGxvZG9ydXMgZGVuaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIGJlZW4gY2hhbGxlbmdlZCB0byBwcm9kdWNlIHRoZSB3aWxsLCBvciB0aGF0IGhlIGhhZCBiZWVuIGxlZnQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGZhdGhlci48L25vdGU+IEluYXNtdWNoLCBob3dldmVyLCBhcyB0aGUgcGxhaW50aWZmIHdhcyByYXBhY2lvdXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHNlZW1lZCB0byB0aGluayBpdCByaWdodCB0aGF0IGhlIHNob3VsZCBzcGVuZCBsYXJnZSBzdW1zIG91dCBvZiB0aGUgZnVuZCB3aGljaAogICAgICAgICAgICAgICAgICAgIHdhcyBhcyB5ZXQgdW5kaXZpZGVkLCB0aGUgZ3VhcmRpYW5zLCBjYWxjdWxhdGluZyBpbiB0aGVpciBvd24gbWluZHMgdGhhdCwgaWYgaXQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgbmVjZXNzYXJ5IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgd2lsbCB0byBkZWR1Y3QgZnJvbSB0aGUgdW5kaXZpZGVkCiAgICAgICAgICAgICAgICAgICAgZnVuZCwgc2hhcmUgZm9yIHNoYXJlLCBhbiBlcXVpdmFsZW50IG9mIHdoYXQgdGhlIHBsYWludGlmZiBzcGVudCwgYW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRlIHRoZSByZW1haW5kZXIsIHRoZXJlIHdvdWxkIGJlIG5vdGhpbmcgbGVmdCB0byBkaXN0cmlidXRlLCBkZXRlcm1pbmVkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGludGVyZXN0IG9mIHRoZSBib3kgdG8gZGl2aWRlIHRoZSBwcm9wZXJ0eS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAzMzwvYmlibD7vvIkuIEluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUiIHZhbGlkPSJ5ZXMiPkRlbS4gNDU8L2JpYmw+IEFwb2xsb2RvcnVzIGRlbmllcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBiZWVuIGNoYWxsZW5nZWQgdG8gcHJvZHVjZSB0aGUgd2lsbCwgb3IgdGhhdCBoZSBoYWQgYmVlbiBsZWZ0IGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBmYXRoZXIuPC90cmFuc2xhdGlvbj4="
translation['36.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IGRpZCBkaXN0cmlidXRlIGFsbCB0aGUgZXN0YXRlIGV4Y2VwdCB0aGUgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICBvbiB3aGljaCB0aGUgZGVmZW5kYW50IGhhZCB0YWtlbiBhIGxlYXNlOyBhbmQgb2YgdGhlIHJldmVudWUgYWNjcnVpbmcgZnJvbSB0aGlzCiAgICAgICAgICAgICAgICAgICAgdGhleSBkdWx5IHBhaWQgb25lLWhhbGYgdG8gdGhlIHBsYWludGlmZi4gVXAgdG8gdGhhdCB0aW1lLCB0aGVuLCBob3cgaXMgaXQKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBmb3IgaGltIHRvIG1ha2UgY29tcGxhaW50IHJlZ2FyZGluZyB0aGUgbGVhc2U/IEZvciBpdCBpcyBub3Qgbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBzaG91bGQgc2hvdyBoaXMgaW5kaWduYXRpb247IGhlIHNob3VsZCBhdCBvbmNlIGhhdmUgZG9uZSBzbyB0aGVuLiBNb3Jlb3ZlciwKICAgICAgICAgICAgICAgICAgICBoZSBjYW5ub3Qgc2F5IHRoYXQgaGUgaGFzIG5vdCByZWNlaXZlZCB0aGUgcmVudHMgd2hpY2ggYmVjYW1lIGR1ZSBzdWJzZXF1ZW50bHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhhdCBjYXNlLCB3aGVuIFBhc2ljbGVzIGNhbWUgb2YKICAgICAgICAgICAgICAgICAgICBhZ2UgYW5kIFBob3JtaW8gcmVsaW5xdWlzaGVkIHRoZSBsZWFzZSwgeW91PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFkZHJlc3NlZCB0byB0aGUgdHdvIGJyb3RoZXJzLCBBcG9sbG9kb3J1cyBhbmQgUGFzaWNsZXMuPC9ub3RlPiB3b3VsZCBuZXZlcgogICAgICAgICAgICAgICAgICAgIGhhdmUgZnJlZWQgaGltIGZyb20gYWxsIGNsYWltcywgYnV0IHdvdWxkIHRoZW4gaW5zdGFudGx5IGhhdmUgZGVtYW5kZWQgcGF5bWVudCwKICAgICAgICAgICAgICAgICAgICBpZiBoZSBoYWQgb3dlZCB5b3UgYW55dGhpbmcuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBzcGVhawogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCBpbiB0aGlzIGFuZCB0aGF0IHRoZSBwbGFpbnRpZmYgZGlkIGRpdmlkZSB0aGUgcHJvcGVydHkgd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCB3aG8gd2FzIHN0aWxsIGEgbWlub3IsIGFuZCB0aGF0IHRoZXkgcmVsZWFzZWQgUGhvcm1pbyBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIGxpYWJpbGl0eSB1bmRlciB0aGUgbGVhc2UgYW5kIGZyb20gYWxsIG90aGVyIGNoYXJnZXMsIHRha2UgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgc29vbiwgdGhlbiwKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IGhhZCByZWxlYXNlZCB0aGUgZGVmZW5kYW50IGZyb20gdGhlIGxlYXNlLCBtZW4gb2YgQXRoZW5zLCB0aGV5IGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIGJldHdlZW4gdGhlbSB0aGUgYmFuayBhbmQgdGhlIHNoaWVsZC1mYWN0b3J5LCBhbmQgQXBvbGxvZG9ydXMsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHRoZSBjaG9pY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5IHJpZ2h0IG9mIHNlbmlvcml0eS48L25vdGU+IGNob3NlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNoaWVsZC1mYWN0b3J5IGluIHByZWZlcmVuY2UgdG8gdGhlIGJhbmsuIFlldCwgaWYgdGhlIHBsYWludGlmZiBoYWQgYW55CiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBjYXBpdGFsIGluIHRoZSBiYW5rLCB3aHkgaW4gdGhlIHdvcmxkIHNob3VsZCBoZSBoYXZlIGNob3NlbiB0aGUgZmFjdG9yeQogICAgICAgICAgICAgICAgICAgIGJ5IHByZWZlcmVuY2U/IFRoZSBpbmNvbWUgd2FzIG5vdCBncmVhdGVyOyBuYXksIGl0IHdhcyBsZXNzIO+8iHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3RvcnkgcHJvZHVjZWQgYSB0YWxlbnQsIGFuZCB0aGUgYmFuaywgb25lIGh1bmRyZWQgbWluYWXvvIk7IG5vciB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHkgbW9yZSBhZ3JlZWFibGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb25kdWN0IG9mIGEgbWFudWZhY3R1cmluZyBidXNpbmVzcyBlbnRhaWxlZCBtb3JlIGxhYm9yIGFuZCB0cm91YmxlIHRoYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZW1lbnQgb2YgYSBiYW5rLjwvbm90ZT4gYXNzdW1pbmcgdGhhdCBoZSBoYWQgcHJpdmF0ZSBjYXBpdGFsIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJhbmsuIEJ1dCBoZSBoYWQgbm8gc3VjaCBjYXBpdGFsLiBTbyB0aGUgcGxhaW50aWZmIHdhcyB3aXNlIGluIGNob29zaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3RvcnkuIEZvciB0aGF0IGlzIGEgcHJvcGVydHkgd2hpY2ggaW52b2x2ZXMgbm8gcmlzaywgd2hpbGUgdGhlIGJhbmsgaXMgYQogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIHlpZWxkaW5nIGEgaGF6YXJkb3VzIHJldmVudWUgZnJvbSBtb25leSB3aGljaCBiZWxvbmdzIHRvIG90aGVycy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWFueSBwcm9vZnMKICAgICAgICAgICAgICAgICAgICBtaWdodCBvbmUgYWR2YW5jZSBhbmQgc2V0IGZvcnRoIHRvIHNob3cgdGhhdCB0aGUgcGxhaW50aWZmJ3MgY2xhaW0gdG8gYSBzdW0gb2YKICAgICAgICAgICAgICAgICAgICBiYW5raW5nIGNhcGl0YWwgaXMgbWFsaWNpb3VzIGFuZCBiYXNlbGVzcy4gQnV0IHRoZSBzdHJvbmdlc3QgcHJvb2Ygb2YgYWxsIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIHJlY2VpdmVkIG5vIGNhcGl0YWwgaXMsIEkgdGhpbmssIHRoaXM6IHRoYXQgUGFzaW8gaXMgc2V0IGRvd24gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGVhc2UgYXMgZGVidG9yIHRvIHRoZSBiYW5rLCBub3QgYXMgaGF2aW5nIGdpdmVuIGJhbmtpbmcgY2FwaXRhbCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQuIFRoZSBzZWNvbmQgcHJvb2YgaXMgdGhhdCB0aGUgcGxhaW50aWZmIGlzIHNob3duIHRvIGhhdmUgbWFkZSBubwogICAgICAgICAgICAgICAgICAgIGRlbWFuZHMgYXQgdGhlIHRpbWUgb2YgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcHJvcGVydHkuIFRoZSB0aGlyZCBpcyB0aGF0IHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSBzdWJzZXF1ZW50bHkgbGVhc2VkIHRoZSBzYW1lIGJ1c2luZXNzIHRvIG90aGVycyBmb3IgdGhlIHNhbWUgc3VtLCBoZSB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgc2hvd24gbm90IHRvIGhhdmUgbGVhc2VkIGFueSBwcml2YXRlIGNhcGl0YWwgb2YgaGlzIG93biBhbG9uZyB3aXRoIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBpZiBoZSBoYWQgYmVlbiBkZWZyYXVkZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IG9mIGNhcGl0YWwgd2hpY2ggaGlzIGZhdGhlciBsZWZ0LCBoZSB3b3VsZCBoaW1zZWxmIG9uIHRoYXQgYXNzdW1wdGlvbgogICAgICAgICAgICAgICAgICAgIGhhdmUgaGFkIHRvIHByb3ZpZGUgaXQgZnJvbSBzb21lIG90aGVyIHNvdXJjZSBhbmQgZ2l2ZW4gaXQgdG8gdGhlIG5ldwogICAgICAgICAgICAgICAgICAgICAgICBsZXNzZWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiBpdCB3ZXJlIHRydWUgdGhhdCBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBkZWZyYXVkZWQgYnkgUGhvcm1pbyBvZiBjYXBpdGFsIHdoaWNoIFBhc2lvIGhhZCBpbnZlc3RlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYmFuaywgdGhlbiwgd2hlbiB0aGUgYmFuayB3YXMgbGV0IHRvIG5ldyBsZXNzZWVzIG9uIHRoZSBzYW1lIHRlcm1zIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSwgQXBvbGxvZG9ydXMgd291bGQgaGF2ZSBoYWQgdG8gbWFrZSB1cCB0aGUgbWlzc2luZyBjYXBpdGFsIGZyb20gc29tZQogICAgICAgICAgICAgICAgICAgICAgICBvdGhlciBzb3VyY2UuPC9ub3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgc3BlYWsgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggaW4gdGhpcywgYW5kIHRoYXQgQXBvbGxvZG9ydXMgc3Vic2VxdWVudGx5IGxlYXNlZCB0aGUgYmFuayB0byBYZW5vIGFuZAogICAgICAgICAgICAgICAgICAgIEV1cGhyYWV1cywgYW5kIEV1cGhybywgYW5kIENhbGxpc3RyYXR1cywgYW5kIHRoYXQgaGUgZGVsaXZlcmVkIG5vIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBjYXBpdGFsIHRvIHRoZW0gZWl0aGVyLCBidXQgdGhhdCB0aGV5IGxlYXNlZCBvbmx5IHRoZSBkZXBvc2l0cyBhbmQgdGhlIHJpZ2h0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb2ZpdHMgYWNjcnVpbmcgZnJvbSB0aGVtLCB0YWtlLCBwbGVhc2UsIHRoZSBkZXBvc2l0aW9uIHdoaWNoIHByb3ZlcyB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMsIGFuZCBwcm92ZXMgYWxzbyB0aGF0IGhlIGNob3NlIHRoZSBzaGllbGQtZmFjdG9yeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RXZpZGVuY2UgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzdWJtaXR0ZWQgdG8geW91LCBtZW4gb2YgQXRoZW5zLCB0aGF0IHRoZXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHBsdXJhbCBkZW5vdGVzIHRoZSB0d28gYnJvdGhlcnMsIEFwb2xsb2RvcnVzIGFuZCBQYXNpY2xlcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZ3JhbnRlZCBhIGxlYXNlIHRvIHRoZXNlIG1lbiBhbHNvLCBhbmQgZ2F2ZSBvdmVyIHRvIHRoZW0gbm8gcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGJhbmtpbmctY2FwaXRhbDsgYW5kIHRoYXQgdGhleSBnYXZlIHRoZW0gdGhlaXIgZnJlZWRvbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2UgbWVuIHdvdWxkIGFwcGVhciB0byBoYXZlIGJlZW4gc2xhdmVzIG9yaWdpbmFsbHksIGFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGlrZSBQaG9ybWlvIGhpbXNlbGYsIHdlcmUgcmV3YXJkZWQgd2l0aCBlbWFuY2lwYXRpb24uIFRoZSBhbHRlcm5hdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmcsIOKAnGZyZWVkIHRoZW0gZnJvbSBhbGwgY2xhaW1zLOKAnSBzZWVtcyBsZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JhYmxlLjwvbm90ZT4gYXMgaWYgaGF2aW5nIHJlY2VpdmVkIGdyZWF0IGJlbmVmaXRzIGZyb20gdGhlbTsgYW5kIGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aW1lIHRoZXkgd2VudCB0byBsYXcgbmVpdGhlciB3aXRoIHRoZW0gbm9yIHdpdGggUGhvcm1pby4gSW5kZWVkLCBhcyBsb25nIGFzIGhpcwogICAgICAgICAgICAgICAgICAgIG1vdGhlciB3YXMgbGl2aW5nLCB3aG8gaGFkIGFuIGFjY3VyYXRlIGtub3dsZWRnZSBvZiBhbGwgdGhlc2UgbWF0dGVycywKICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cyBuZXZlciBtYWRlIGFueSBjb21wbGFpbnQgYWdhaW5zdCBQaG9ybWlvLCB0aGUgZGVmZW5kYW50OyBidXQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBoZXIgZGVhdGggaGUgYnJvdWdodCBhIG1hbGljaW91cyBhbmQgYmFzZWxlc3Mgc3VpdCBjbGFpbWluZyB0aHJlZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIGluIG1vbmV5LCBpbiBhZGRpdGlvbiB0byB0d28gdGhvdXNhbmQgZHJhY2htYWUgd2hpY2ggc2hlIGhhZCBnaXZlbiB0bwogICAgICAgICAgICAgICAgICAgIFBob3JtaW8ncyBjaGlsZHJlbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2hpbGRyZW4sIHRoYXQgaXMsIHdob20gc2hlCiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBib3JuZSB0byBQaG9ybWlvLjwvbm90ZT4gYW5kIGEgYml0IG9mIHVuZGVyd2VhciBhbmQgYSBzZXJ2aW5nLWdpcmwuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgZXZlbiBoZXJlIGhlIHdpbGwgYmUgc2hvd24gdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHNhaWQgbm90aGluZyBvZiB0aGUgY2xhaW1zIHdoaWNoIGhlIG5vdyBtYWtlcy4gSGUgcmVmZXJyZWQgdGhlIG1hdHRlciBmb3IKICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdGlvbiB0byB0aGUgZmF0aGVyIG9mIGhpcyBvd24gd2lmZSwgYW5kIHRoZSBodXNiYW5kIG9mIGhpcyB3aWZlJ3Mgc2lzdGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBMeXNpbnVzIGFuZCBBbmRyb21lbmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdHdvIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVkIHJlcHJlc2VudGVkIEFwb2xsb2RvcnVzOyB0aGUgbGF0dGVyIHR3bywgUGhvcm1pby48L25vdGU+IGFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaW5kdWNlZCBQaG9ybWlvIHRvIG1ha2UgaGltIGEgcHJlc2VudCBvZiB0aGUgdGhyZWUgdGhvdXNhbmQgZHJhY2htYWUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWwgaXRlbXMsIGFuZCB0aHVzIHRvIGhhdmUgaGltIGFzIGEgZnJpZW5kIHJhdGhlciB0aGFuIGFzIGFuIGVuZW15CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBvZiB0aGlzLiBTbyB0aGUgcGxhaW50aWZmIHJlY2VpdmVkIGluIGFsbCBmaXZlIHRob3VzYW5kIGRyYWNobWFlLCBhbmQKICAgICAgICAgICAgICAgICAgICBnb2luZyB0byB0aGUgdGVtcGxlIG9mIEF0aGVuYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFBhcnRoZW5vbiwgYXMKICAgICAgICAgICAgICAgICAgICAgICAgaXQgaXMgc3RhdGVkIGJlbG93IHRvIGhhdmUgYmVlbiBvbiB0aGUgQWNyb3BvbGlzLjwvbm90ZT4gZ2F2ZSBQaG9ybWlvIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBzZWNvbmQgdGltZSBhIHJlbGVhc2UgZnJvbSBhbGwgZGVtYW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['36.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIGFzIHlvdSBzZWUsIGhlIGlzIHN1aW5nIGhpbSBhZ2FpbiwgaGF2aW5nIHRydW1wZWQgdXAgYWxsIHNvcnRzIG9mCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbnMsIGFuZCBnYXRoZXJlZCBmcm9tIGFsbCBwYXN0IHRpbWUgY2hhcmdlcyDvvIhhbmQgdGhpcyBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IG91dHJhZ2VvdXMgdGhpbmcgb2YgYWxs77yJIHdoaWNoIGhlIGhhZCBuZXZlciBtYWRlIGJlZm9yZS4gVG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIHRha2UsIHBsZWFzZSwgdGhlIGF3YXJkIHRoYXQgd2FzIG1hZGUgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgQWNyb3BvbGlzLCBhbmQgdGhlIGRlcG9zaXRpb24gb2YgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCwgd2hlbiBBcG9sbG9kb3J1cywKICAgICAgICAgICAgICAgICAgICBvbiByZWNlaXZpbmcgdGhpcyBtb25leSwgZ2F2ZSBhIHJlbGVhc2UgZnJvbSBhbGwgY2xhaW1zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkF3YXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXdhcmQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXdhcmQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgYXdhcmQsIG1lbiBvZiB0aGUganVyeSwgd2hpY2ggd2FzIHJlbmRlcmVkIGJ5IERlaW5pYXMsIHdob3NlIGRhdWdodGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiBoYXMgbWFycmllZCwgYW5kIE5pY2lhcywgd2hvIGlzIGh1c2JhbmQgdG8gaGVyIHNpc3Rlci4gSG93ZXZlciwgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBoYXMgcmVjZWl2ZWQgdGhpcyBtb25leSwgYW5kIGhhcyBnaXZlbiBhIHJlbGVhc2UgZnJvbSBhbGwgY2xhaW1zLCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyB0aGUgYXVkYWNpdHkgdG8gYnJpbmcgc3VpdCBmb3Igc28gbWFueSB0YWxlbnRzLCBqdXN0IGFzIGlmIGFsbCB0aGVzZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRlYWQsIG9yIGFzIGlmIHRoZSB0cnV0aCB3b3VsZCBub3QgYmUgYnJvdWdodCB0byBsaWdodC4gPC90cmFuc2xhdGlvbj4="
translation['36.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoZSBkZWFsaW5ncywgdGhlbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zIHdoaWNoIFBob3JtaW8gaGFzIGhhZCB3aXRoIEFwb2xsb2RvcnVzIHlvdSBoYXZlIGhlYXJkLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnMsIGZyb20gdGhlIGJlZ2lubmluZy4gQnV0IEkgZmFuY3kgdGhhdCBBcG9sbG9kb3J1cywgdGhlIHBsYWludGlmZiwgYmVpbmcKICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gYWR2YW5jZSBhbnkganVzdCBncm91bmRzIGluIHN1cHBvcnQgb2YgaGlzIGNsYWltLCB3aWxsIHJlcGVhdCB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHRoZSBhdWRhY2l0eSB0byBzYXkgYmVmb3JlIHRoZSBhcmJpdHJhdG9yLCB0aGF0IGhpcyBtb3RoZXIgbWFkZSBhd2F5IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgcGFwZXJzIGF0IFBob3JtaW8ncyBpbnN0aWdhdGlvbiwgYW5kIHRoYXQsIG93aW5nIHRvIHRoZSBsb3NzIG9mIHRoZXNlLCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBubyB3YXkgb2YgcHJvdmluZyBoaXMgY2xhaW0gc3RyaWN0bHkuIDwvdHJhbnNsYXRpb24+"
translation['36.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBpbiByZWdhcmQgdG8gdGhlc2Ugc3RhdGVtZW50cyBhbmQgdGhpcyBhY2N1c2F0aW9uLCBvYnNlcnZlIHdoYXQgY29udmluY2luZwogICAgICAgICAgICAgICAgICAgIHByb29mcyBvbmUgY291bGQgYWR2YW5jZSB0byBzaG93IHRoYXQgaGUgaXMgbHlpbmcuIEluIHRoZSBmaXJzdCBwbGFjZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgQXRoZW5zLCB3aGF0IG1hbiB3b3VsZCBoYXZlIGFjY2VwdGVkIGEgZGlzdHJpYnV0aW9uIG9mIGhpcyBpbmhlcml0YW5jZSwgaWYgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgbm90IHBhcGVycyBmcm9tIHdoaWNoIGhlIGNvdWxkIGRldGVybWluZSB0aGUgYW1vdW50IG9mIGVzdGF0ZSBsZWZ0IGhpbT8gTm8KICAgICAgICAgICAgICAgICAgICBtYW4sIGFzc3VyZWRseS4gWWV0IGl0IGlzIGVpZ2h0ZWVuIHllYXJzLCBBcG9sbG9kb3J1cywgc2luY2UgeW91IGFjY2VwdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiwgYW5kIHlvdSBjYW5ub3Qgc2hvdyB0aGF0IHlvdSBhdCBhbnkgdGltZSBtYWRlIGFueSBjb21wbGFpbnQgYWJvdXQKICAgICAgICAgICAgICAgICAgICB0aGUgcGFwZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCB3aGVuIFBhc2ljbGVzCiAgICAgICAgICAgICAgICAgICAgaGFkIGNvbWUgb2YgYWdlLCBhbmQgd2FzIHJlY2VpdmluZyB0aGUgcmVwb3J0IG9mIGhpcyBndWFyZGlhbnMnIGFkbWluaXN0cmF0aW9uLAogICAgICAgICAgICAgICAgICAgIHdoYXQgbWFuLCBldmVuIHRob3VnaCBoZSBzaHJhbmsgZnJvbSBhY2N1c2luZyBoaXMgbW90aGVyIHdpdGggaGlzIG93biBsaXBzIG9mCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGRlc3Ryb3llZCB0aGUgcGFwZXJzLCB3b3VsZCBoYXZlIGZhaWxlZCB0byByZXZlYWwgdGhlIGZhY3QgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgc28gdGhhdCB0aHJvdWdoIGhpbSBpdCBtaWdodCBoYXZlIGJlZW4gdGhvcm91Z2hseSBpbnZlc3RpZ2F0ZWQ/IEluIHRoZQogICAgICAgICAgICAgICAgICAgIHRoaXJkIHBsYWNlLCB3aGF0IHdlcmUgdGhlIHBhcGVycyB1cG9uIHdoaWNoIHlvdSBiYXNlZCB0aGUgYWN0aW9uIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQ/IEZvciB0aGUgcGxhaW50aWZmIGhhcyBicm91Z2h0IHN1aXRzIGFnYWluc3QgbWFueSBjaXRpemVucywgYW5kIGhhcwogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZCBsYXJnZSBzdW1zIG9mIG1vbmV5LCBjaGFyZ2luZyBpbiBoaXMgY29tcGxhaW50cywg4oCcU28gYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgaGFzIGluanVyZWQgbWUgYnkgbm90IHBheWluZyBiYWNrIHRvIG1lIHRoZSBtb25leSB3aGljaCBteSBmYXRoZXIncyBwYXBlcnMgc2hvdwogICAgICAgICAgICAgICAgICAgIGhlIG93ZWQgdGhlIGxhdHRlciBhdCBoaXMgZGVhdGgu4oCdIDwvdHJhbnNsYXRpb24+"
translation['36.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGlmIHRoZSBwYXBlcnMgaGFkIGJlZW4gbWFkZSBhd2F5IHdpdGgsIG9uIHRoZSBiYXNpcyBvZiB3aGF0IHBhcGVycyBkaWQgaGUKICAgICAgICAgICAgICAgICAgICBjb21tZW5jZSBoaXMgc3VpdHM/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHByb29mIHRoYXQgSSBhbSBzcGVha2luZwogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCBpbiB0aGlzLCB5b3UgaGF2ZSBoZWFyZCB0aGUgZGlzdHJpYnV0aW9uIHdoaWNoIGhlIGFjY2VwdGVkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgaW4gcHJvb2Ygb2YgaXQgaGFzIGJlZW4gcHJlc2VudGVkIHRvIHlvdS4gVGhlIGNsZXJrIHdpbGwgbm93IHJlYWQgeW91CiAgICAgICAgICAgICAgICAgICAgdGhlIGRlcG9zaXRpb25zIGhhdmluZyB0byBkbyB3aXRoIHRoZXNlIGFjdGlvbnMuIFBsZWFzZSB0YWtlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlc2UgY29tcGxhaW50cywgdGhlbiwgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgaGlzIGZhdGhlcidzIHBhcGVyczsgZm9yIGhlIHN1cmVseSB3b3VsZCBub3Qgc2F5CiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3YXMgYnJpbmdpbmcgYmFzZWxlc3MgY2hhcmdlcywgb3IgdGhhdCBoZSB3YXMgc3VpbmcgdGhlc2UgbWVuIGZvciB3aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBkaWQgbm90IG93ZS4gPC90cmFuc2xhdGlvbj4="
translation['36.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgYXJlIG1hbnkgc3Ryb25nIHByb29mcyBmcm9tIHdoaWNoIG9uZSBjYW4gc2VlIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IFBob3JtaW8gaXMgbm90IGluIHRoZSB3cm9uZzsgYnV0IHRoZSBzdHJvbmdlc3Qgb2YgYWxsLCBpbiBteSBvcGluaW9uLAogICAgICAgICAgICAgICAgICAgIGlzIHRoaXM6IHRoYXQgUGFzaWNsZXMsIHRob3VnaCBoZSBpcyB0aGUgYnJvdGhlciBvZiBBcG9sbG9kb3J1cywgdGhlIHBsYWludGlmZiwKICAgICAgICAgICAgICAgICAgICBoYXMgbmVpdGhlciBlbnRlcmVkIHN1aXQgbm9yIG1hZGUgYW55IG9mIHRoZSBjaGFyZ2VzIHdoaWNoIHRoZSBwbGFpbnRpZmYgbWFrZXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IHN1cmVseSB0aGUgZGVmZW5kYW50IHdvdWxkIG5vdCBoYXZlIGFic3RhaW5lZCBmcm9tIHdyb25naW5nIG9uZSB3aG8gaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBsZWZ0IGEgbWlub3IgYnkgaGlzIGZhdGhlciwgYW5kIG92ZXIgd2hvc2UgcHJvcGVydHkgaGUgaGFkIGNvbnRyb2wsIHNpbmNlIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gbGVmdCBhcyBoaXMgZ3VhcmRpYW4sIHlldCB3b3VsZCBoYXZlIHdyb25nZWQgeW91LCB3aG8gYXQgeW91ciBmYXRoZXIncwogICAgICAgICAgICAgICAgICAgIGRlYXRoIHdlcmUgbGVmdCBhIG1hbiBvZiBmb3VyIGFuZCB0d2VudHksIGFuZCB3aG8gb24geW91ciBvd24gYmVoYWxmIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgZWFzaWx5IGFuZCBpbW1lZGlhdGVseSBoYXZlIG9idGFpbmVkIGp1c3RpY2UsIGlmIGFueSB3cm9uZyBoYWQgYmVlbiBkb25lIHlvdS4KICAgICAgICAgICAgICAgICAgICBUaGF0IGlzIGltcG9zc2libGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZwogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCBpbiB0aGlzLCBhbmQgdGhhdCBQYXNpY2xlcyBtYWtlcyBubyBjb21wbGFpbnQsIHRha2UsIHBsZWFzZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiByZWdhcmRpbmcgdGhlIG1hdHRlci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHBvaW50cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBzaG91bGQgbm93IGNvbnNpZGVyIGluIHJlZ2FyZCB0byBteSBwbGVhIHRoYXQgdGhlIGFjdGlvbiBpcyBub3QKICAgICAgICAgICAgICAgICAgICBhZG1pc3NpYmxlLCBJIGJlZyB5b3UgdG8gcmVjYWxsIGZyb20gd2hhdCBoYXMgYWxyZWFkeSBiZWVuIHNhaWQuIFdlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnMsIGluYXNtdWNoIGFzIGFuIGFjY291bnRpbmcgaGFkIGJlZW4gbWFkZSBhbmQgYSBkaXNjaGFyZ2UgZ2l2ZW4gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzZSBvZiB0aGUgYmFuayBhbmQgb2YgdGhlIHNoaWVsZC1mYWN0b3J5OyBpbmFzbXVjaCBhcyB0aGVyZSBoYWQgYmVlbiBhbgogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3IncyBhd2FyZCBhbmQgYWdhaW4gYSBkaXNjaGFyZ2UgZnJvbSBhbGwgY2xhaW1zOyA8L3RyYW5zbGF0aW9uPg=="
translation['36.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5pbmFzbXVjaCBhbHNvIGFzIHRoZSBsYXdzIGRvIG5vdCBhbGxvdyBzdWl0cyB0byBiZSBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgaW4gY2FzZXMgd2hlcmUgYSBkaXNjaGFyZ2UgaGFzIG9uY2UgYmVlbiBnaXZlbjsgYW5kIGluYXNtdWNoIGFzIHRoZSBwbGFpbnRpZmYKICAgICAgICAgICAgICAgICAgICBtYWtlcyBhIGJhc2VsZXNzIGFuZCBtYWxpY2lvdXMgY2xhaW0sIGFuZCBicmluZ3Mgc3VpdCBjb250cmFyeSB0byB0aGUgbGF3czsgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIHB1dCBpbiBhIHNwZWNpYWwgcGxlYSBhcyBhbGxvd2VkIGJ5IHRoZSBsYXdzIHRoYXQgaGlzIHN1aXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaWJsZS4gSW4gb3JkZXIsIHRoZW4sIHRoYXQgeW91IG1heSB1bmRlcnN0YW5kIHRoZSBtYXR0ZXIgcmVnYXJkaW5nIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBnb2luZyB0byB2b3RlLCBoZSBzaGFsbCByZWFkIHlvdSB0aGlzIGxhdyBhbmQgdGhlIGRlcG9zaXRpb25zIGluCiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2Ugb2YgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCB3aGVuIEFwb2xsb2RvcnVzIGRpc2NoYXJnZWQgUGhvcm1pbyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGxlYXNlIGFuZCBmcm9tIGFsbCBvdGhlciBjbGFpbXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UgdGhlc2UKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucywgcGxlYXNlLCBhbmQgdGhlIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBtZW4gb2YgQXRoZW5zLCBzdGF0aW5nIG90aGVyIGNhc2VzIGluIHdoaWNoIHN1aXQgbWF5IG5vdCBiZSBicm91Z2h0LCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFyIHRob3NlIGluIHdoaWNoIGFueW9uZSBoYXMgZ2l2ZW4gYSByZWxlYXNlIG9yIGRpc2NoYXJnZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHR3byB2ZXJicyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhs654b2zzr3Osc65PC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOsc67zrvhvbHPhM61zrnOvTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgc2VlbSBhdCB0aW1lcyB0byBiZSB2aXJ0dWFsIHN5bm9ueW1zLCB1c2VkIGZyZWVseSB3aXRoIHRoZSByZWR1bmRhbmN5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2FsIHVzYWdlLiBJbiBzb21lIGNhc2VzLCBob3dldmVyLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhs654b2zzr3Osc65PC9mb3JlaWduPiByZWZlcnMgY2xlYXJseSB0byB0aGUgY3JlZGl0b3IncyBhY3QsIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPgM6xzrvOu+G9sc+EzrXOuc69PC9mb3JlaWduPiB0byB0aGUgZWZmZWN0IG9uIHRoZSBkZWJ0b3IuCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmFsbGVsIHBhc3NhZ2VzIGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM3LjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMzcuMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuMTkiIHZhbGlkPSJ5ZXMiPkRlbS4gMzcuMTk8L2JpYmw+OyBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzOC4xIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOC4xPC9iaWJsPi48L25vdGU+IEFuZCB3aXRoIGdvb2QgcmVhc29uLiBGb3IgaWYgaXQgaXMganVzdCB0aGF0IHN1aXQKICAgICAgICAgICAgICAgICAgICBtYXkgbm90IGJlIGJyb3VnaHQgYWdhaW4gZm9yIGNhc2VzIHdoaWNoIGhhdmUgb25jZSBiZWVuIHRyaWVkLCBpdCBpcyBmYXIgbW9yZQogICAgICAgICAgICAgICAgICAgIGp1c3QgdGhhdCBzdWl0IGJlIG5vdCBhbGxvd2VkIGZvciBjbGFpbXMgaW4gd2hpY2ggYSBkaXNjaGFyZ2UgaGFzIGJlZW4gZ2l2ZW4uCiAgICAgICAgICAgICAgICAgICAgRm9yIGEgbWFuIHdobyBoYXMgbG9zdCBoaXMgc3VpdCBpbiB5b3VyIGNvdXJ0IG1pZ2h0IHBlcmhhcHMgc2F5IHRoYXQgeW91IGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gZGVjZWl2ZWQ7IGJ1dCB3aGVuIGEgbWFuIGhhcyBwbGFpbmx5IGRlY2lkZWQgYWdhaW5zdCBoaW1zZWxmLCBieSBnaXZpbmcgYQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSwgd2hhdCBjb21wbGFpbnQgY2FuIGhlIGJyaW5nIGFnYWluc3QgaGltc2VsZiB0aGF0IHdpbGwKICAgICAgICAgICAgICAgICAgICBnaXZlIGhpbSB0aGUgcmlnaHQgdG8gYnJpbmcgc3VpdCBhZ2FpbiByZWdhcmRpbmcgdGhlIHNhbWUgbWF0dGVycz8gTm9uZQogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyLCBvZiBjb3Vyc2UuIFRoZXJlZm9yZSB0aGUgbWFuIHdobyBmcmFtZWQgdGhpcyBsYXcgcGxhY2VkIGZpcnN0IGFtb25nCiAgICAgICAgICAgICAgICAgICAgY2FzZXMgaW4gd2hpY2ggc3VpdCBtYXkgbm90IGJlIGJyb3VnaHQgYWxsIHRob3NlIGluIHdoaWNoIGEgbWFuIGhhcyBnaXZlbiBhCiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSBvciBkaXNjaGFyZ2UuIEJvdGggb2YgdGhlc2UgaGF2ZSBiZWVuIGdpdmVuIGJ5IHRoZSBwbGFpbnRpZmY7IGZvciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICByZWxlYXNlZCBhbmQgZGlzY2hhcmdlZCB0aGUgZGVmZW5kYW50LiBUaGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnMsIGhhcyBiZWVuIHByb3ZlZCB0byB5b3UgYnkgdGhlIGV2aWRlbmNlIHByZXNlbnRlZC4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4bOueG9s869zrHOuTwvZm9yZWlnbj4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM+AzrHOu8674b2xz4TOtc65zr08L2ZvcmVpZ24+CiAgICAgICAgICAgICAgICAgICAgICAgIHNlZW0gYXQgdGltZXMgdG8gYmUgdmlydHVhbCBzeW5vbnltcywgdXNlZCBmcmVlbHkgd2l0aCB0aGUgcmVkdW5kYW5jeSBvZgogICAgICAgICAgICAgICAgICAgICAgICBsZWdhbCB1c2FnZS4gSW4gc29tZSBjYXNlcywgaG93ZXZlciwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4bOueG9s869zrHOuTwvZm9yZWlnbj4gcmVmZXJzIGNsZWFybHkgdG8gdGhlIGNyZWRpdG9yJ3MgYWN0LCBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOsc67zrvhvbHPhM61zrnOvTwvZm9yZWlnbj4gdG8gdGhlIGVmZmVjdCBvbiB0aGUgZGVidG9yLgogICAgICAgICAgICAgICAgICAgICAgICBQYXJhbGxlbCBwYXNzYWdlcyBhcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNy4xIiB2YWxpZD0ieWVzIj5EZW0uIDM3LjE8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM3LjE5IiB2YWxpZD0ieWVzIj5EZW0uIDM3LjE5PC9iaWJsPjsgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzguMSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzguMTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['36.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBub3csIHBsZWFzZSwgdGhlIHN0YXR1dGUKICAgICAgICAgICAgICAgICAgICBvZiBsaW1pdGF0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGxhdywgbWVuIG9mIEF0aGVucywgaGFzIHRodXMgY2xlYXJseQogICAgICAgICAgICAgICAgICAgIGRlZmluZWQgdGhlIHRpbWUuIEJ1dCB0aGlzIG1hbiBBcG9sbG9kb3J1cywgd2hlbiBtb3JlIHRoYW4gdHdlbnR5IHllYXJzIGhhdmUKICAgICAgICAgICAgICAgICAgICBnb25lIGJ5LCBkZW1hbmRzIHRoYXQgeW91IHBheSBtb3JlIGhlZWQgdG8gaGlzIG1hbGljaW91cyBjaGFyZ2VzIHRoYW4gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggeW91IGhhdmUgc3dvcm4gdG8gZ2l2ZSBqdWRnZW1lbnQuIFlvdSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0byBhbGwgdGhlIGxhd3MsIGJ1dCB0byB0aGlzIG9uZSwgbWVuIG9mIEF0aGVucywgYWJvdmUgYWxsIG90aGVycy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGluIG15IGp1ZGdlbWVudCwgU29sb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgd2FzIHRoZSBjdXN0b20gYXQgQXRoZW5zIHRvIGVtcGhhc2l6ZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FuY3RpdHkgb2YgYSBnaXZlbiBsYXcgYnkgYXR0cmlidXRpbmcgaXRzIGVuYWN0bWVudCB0byB0aGUgZ3JlYXQgbGF3Z2l2ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNvbG9uLiBTbywgaW4gU3BhcnRhLCBsYXdzIHdlcmUgY29udmVudGlvbmFsbHkgYXNzdW1lZCB0byBoYXZlIGJlZW4gZW5hY3RlZAogICAgICAgICAgICAgICAgICAgICAgICBieSBMeWN1cmd1cy48L25vdGU+IGZyYW1lZCBpdCBmb3Igbm8gb3RoZXIgcHVycG9zZSB0aGFuIHRvIHByZXZlbnQgeW91cgogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0byBiZSBzdWJqZWN0ZWQgdG8gbWFsaWNpb3VzIGFuZCBiYXNlbGVzcyBhY3Rpb25zLiBGb3IgaW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gd2VyZSB3cm9uZ2VkLCBoZSB0aG91Z2h0IHRoYXQgYSBwZXJpb2Qgb2YgZml2ZSB5ZWFycyB3YXMgZW5vdWdoIHRvCiAgICAgICAgICAgICAgICAgICAgZW5hYmxlIHRoZW0gdG8gcmVjb3ZlciB3aGF0IHdhcyB0aGVpciBkdWU7IHdoaWxlIHRoZSBsYXBzZSBvZiB0aW1lIHdvdWxkIGJlc3QKICAgICAgICAgICAgICAgICAgICBzZXJ2ZSB0byBjb252aWN0IHRob3NlIHdobyBhZHZhbmNlZCBmYWxzZSBjbGFpbXMuIEF0IHRoZSBzYW1lIHRpbWUsIHNpbmNlIGhlCiAgICAgICAgICAgICAgICAgICAgcmVhbGl6ZWQgdGhhdCBuZWl0aGVyIHRoZSBjb250cmFjdGluZyBwYXJ0aWVzIG5vciB0aGUgd2l0bmVzc2VzIHdvdWxkIGxpdmUKICAgICAgICAgICAgICAgICAgICBmb3JldmVyLCBoZSBwdXQgdGhlIGxhdyBpbiB0aGVpciBwbGFjZSwgdGhhdCBpdCBtaWdodCBiZSBhIHdpdG5lc3Mgb2YgdHJ1dGggZm9yCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhZCBubyBvdGhlciBkZWZlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSwgZm9yIG15IHBhcnQsIGFtIHdvbmRlcmluZywgbWVuIG9mIHRoZSBqdXJ5LCB3aGF0IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmxkIHRoZSBwbGFpbnRpZmYsIEFwb2xsb2RvcnVzLCB3aWxsIHRyeSB0byBzYXkgaW4gcmVwbHkgdG8gdGhlc2UKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMuIEZvciBoZSBjYW4gaGFyZGx5IGhhdmUgbWFkZSB0aGlzIGFzc3VtcHRpb24gdGhhdCB5b3UsIGFsdGhvdWdoIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFzIHN1ZmZlcmVkIG5vIHdyb25nIGZpbmFuY2lhbGx5LCB3aWxsIGJlIGluZGlnbmFudCBiZWNhdXNlIFBob3JtaW8gaGFzCiAgICAgICAgICAgICAgICAgICAgbWFycmllZCBoaXMgbW90aGVyLiBGb3IgaGUgaXMgbm90IHVuYXdhcmUgb2YgdGhpc+KAlGl0IGlzIG5vIHNlY3JldCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSBvciB0byBtYW55IG9mIHlvdeKAlHRoYXQgU29jcmF0ZXMsIHRoZSB3ZWxsLWtub3duIGJhbmtlciwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzZXQgZnJlZSBieSBoaXMgbWFzdGVycyBqdXN0IGFzIHRoZSBwbGFpbnRpZmYncyBmYXRoZXIgaGFkIGJlZW4sIGdhdmUgaGlzCiAgICAgICAgICAgICAgICAgICAgd2lmZSBpbiBtYXJyaWFnZSB0byBTYXR5cnVzIHdobyBoYWQgYmVlbiBoaXMgc2xhdmUuIDwvdHJhbnNsYXRpb24+"
translation['36.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Bbm90aGVyLCBTb2NsZXMsIHdobyBoYWQgYmVlbiBpbiB0aGUgYmFua2luZyBidXNpbmVzcywgZ2F2ZQogICAgICAgICAgICAgICAgICAgIGhpcyB3aWZlIGluIG1hcnJpYWdlIHRvIFRpbW9kZW11cywgd2hvIGlzIHN0aWxsIGluIGJlaW5nIGFuZCBhbGl2ZSwgd2hvIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgaGlzIHNsYXZlLiBBbmQgaXQgaXMgbm90IGhlcmUgb25seSwgbWVuIG9mIEF0aGVucywgdGhhdCB0aG9zZSBlbmdhZ2VkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBsaW5lIG9mIGJ1c2luZXNzIHNvIGFjdDsgYnV0IGluIEFlZ2luYSBTdHJ5bW9kb3J1cyBnYXZlIGhpcyB3aWZlIGluIG1hcnJpYWdlIHRvCiAgICAgICAgICAgICAgICAgICAgSGVybWFldXMsIGhpcyBvd24gc2xhdmUsIGFuZCBhZ2FpbiwgYWZ0ZXIgaGVyIGRlYXRoLCBnYXZlIGhpbSBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdWdodGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JdCBpcyBwcm9iYWJsZSB0aGF0IHRoZSB3b3JkCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGdhdmXigJ0gcmVmZXJzIHRvIHByb3Zpc2lvbnMgaW4gdGhlIHdpbGwgb2YgU3RyeW1vZG9ydXMuCiAgICAgICAgICAgICAgICAgICAgICAgIFdlIG11c3QgdGhlbiBhc3N1bWUgdGhhdCB0aGUgd2lmZSBkaWVkIGFmdGVyIHRoZSB3aWxsIHdhcyBtYWRlLCBidXQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWF0aCBvZiBTdHJ5bW9kb3J1cy4gU28gU2FuZHlzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgb25lIGNvdWxkIG1lbnRpb24gbWFueSBvdGhlciBzdWNoIGNhc2VzOwogICAgICAgICAgICAgICAgICAgIGFuZCBubyB3b25kZXIuIEZvciBhbHRob3VnaCB0byB5b3UsIG1lbiBvZiBBdGhlbnMsIHdobyBhcmUgY2l0aXplbnMgYnkgYmlydGgsIGl0CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgYSBkaXNncmFjZSB0byBlc3RlZW0gYW55IGNvbmNlaXZhYmxlIGFtb3VudCBvZiB3ZWFsdGggYWJvdmUgeW91cgogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBkZXNjZW50LCB5ZXQgdGhvc2Ugd2hvIG9idGFpbiBjaXRpemVuc2hpcCBhcyBhIGdpZnQgZWl0aGVyIGZyb20geW91IG9yCiAgICAgICAgICAgICAgICAgICAgZnJvbSBvdGhlcnMsIGFuZCB3aG8gaW4gdGhlIGZpcnN0IGluc3RhbmNlLCB0aGFua3MgdG8gdGhpcyBnb29kIGZvcnR1bmUsIHdlcmUKICAgICAgICAgICAgICAgICAgICBjb3VudGVkIHdvcnRoeSBvZiB0aGUgc2FtZSBwcml2aWxlZ2VzLCBiZWNhdXNlIG9mIHRoZWlyIHN1Y2Nlc3MgaW4gbW9uZXktbWFraW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVpciBwb3NzZXNzaW9uIG9mIG1vcmUgd2VhbHRoIHRoYW4gb3RoZXJzLCBtdXN0IGhvbGQgZmFzdCB0byB0aGVzZQogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZXMuIFNvIHlvdXIgZmF0aGVyIFBhc2lv4oCUYW5kIGhlIHdhcyBuZWl0aGVyIHRoZSBmaXJzdCBub3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbGFzdCB0byBkbyB0aGlz4oCUd2l0aG91dCBicmluZ2luZyBkaXNncmFjZSB1cG9uIGhpbXNlbGYgb3IgdXBvbiB5b3UsCiAgICAgICAgICAgICAgICAgICAgaGlzIHNvbnMsIGJ1dCBzZWVpbmcgdGhhdCB0aGUgb25seSBwcm90ZWN0aW9uIGZvciBoaXMgYnVzaW5lc3Mgd2FzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmluZCB0aGUgZGVmZW5kYW50IHRvIHlvdSBieSBhIGZhbWlseSB0aWUsIGZvciB0aGlzIHJlYXNvbiBnYXZlIHRvIGhpbSBpbgogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlIGhpcyBvd24gd2lmZSwgeW91ciBtb3RoZXIuIDwvdHJhbnNsYXRpb24+"
translation['36.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB5b3UgZXhhbWluZSBoaXMgY29uZHVjdCBpbiB0aGUgbGlnaHQgb2YgcHJhY3RpY2FsIHV0aWxpdHkgeW91IHdpbGwgZmluZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCB3aXNlbHk7IGJ1dCBpZiBmcm9tIGZhbWlseSBwcmlkZSB5b3Ugc2Nvcm4gUGhvcm1pbyBhcyBzdGVwZmF0aGVyLCBzZWUKICAgICAgICAgICAgICAgICAgICBpZiBpdCBiZSBub3QgYWJzdXJkIGZvciB5b3UgdG8gc3BlYWsgdGh1cy4gRm9yLCBpZiBvbmUgd2VyZSB0byBhc2sgeW91IHdoYXQgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIGEgbWFuIHlvdSBkZWVtIHlvdXIgZmF0aGVyIHRvIGhhdmUgYmVlbiwgSSBhbSBzdXJlIHRoYXQgeW91IHdvdWxkIHNheSwKICAgICAgICAgICAgICAgICAgICDigJxhbiBob25vcmFibGUgbWFuLuKAnSBOb3csIHRoZW4sIHdoaWNoIG9mIHlvdSB0d28gZG8geW91IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgbW9yZSByZXNlbWJsZXMgUGFzaW8gaW4gY2hhcmFjdGVyIGFuZCBpbiBtYW5uZXIgb2YgbGlmZSwgeW91cnNlbGYgb3IgUGhvcm1pbz8gSQogICAgICAgICAgICAgICAgICAgIGtub3cgd2VsbCB0aGF0IHlvdSB0aGluayBQaG9ybWlvIGRvZXMuIFRoZW4gZG8geW91IHNjb3JuIHRoaXMgbWFuIHdobyBpcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgbGlrZSB5b3VyIGZhdGhlciB0aGFuIHlvdSBhcmUgeW91cnNlbGYsIGp1c3QgYmVjYXVzZSBoZSBoYXMgbWFycmllZCB5b3VyIG1vdGhlcj8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCB0aGlzIGFycmFuZ2VtZW50IHdhcyBtYWRlIGJ5IHlvdXIKICAgICAgICAgICAgICAgICAgICBmYXRoZXIncyBncmFudCBhbmQgc29sZW1uIGluanVuY3Rpb24gbWF5IG5vdCBvbmx5IGJlIHNlZW4gZnJvbSB0aGUgd2lsbCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgQXRoZW5zLCBidXQgeW91IHlvdXJzZWxmLCBBcG9sbG9kb3J1cywgYXJlIGEgd2l0bmVzcyB0byB0aGUgZmFjdC4gRm9yIHdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgY2xhaW1lZCB0aGUgcmlnaHQgdG8gZGlzdHJpYnV0ZSB5b3VyIG1vdGhlcidzIGVzdGF0ZSBzaGFyZSBieQogICAgICAgICAgICAgICAgICAgIHNoYXJl4oCUYW5kIHNoZSBoYWQgbGVmdCBjaGlsZHJlbiBieSB0aGUgZGVmZW5kYW50LAogICAgICAgICAgICAgICAgICAgIFBob3JtaW/igJR5b3UgdGhlbiBhY2tub3dsZWRnZWQgdGhhdCB5b3VyIGZhdGhlciBoYWQgZ2l2ZW4gaGVyIHdpdGggZnVsbAogICAgICAgICAgICAgICAgICAgIHJpZ2h0LCBhbmQgdGhhdCBzaGUgaGFkIGJlZW4gbWFycmllZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhd3MuIEZvciBpZiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgaGFkIHRha2VuIGhlciB0byB3aWZlIHdyb25nZnVsbHksIGFuZCBubyBvbmUgaGFkIGdpdmVuIGhlcuKAlHRoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gd2VyZSBub3QgaGVpcnMsIGFuZCBpZiB0aGV5IHdlcmUgbm90IGhlaXJzIHRoZXkgaGFkIG5vIHJpZ2h0IG9mIHNoYXJpbmcKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcHJvcGVydHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklsbGVnaXRpbWF0ZSBjaGlsZHJlbiBjb3VsZCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdDsgYW5kIHRoZSBmYWN0IHRoYXQgQXBvbGxvZG9ydXMgcmVjb2duaXplZCB0aGUgY2hpbGRyZW4gb2YgUGhvcm1pbwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgQXJjaGlwcMOqIGFzIGhlaXJzLCBwcm92ZXMgdGhhdCBoZSBhZG1pdHRlZCB0aGUgbGVnYWxpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlLjwvbm90ZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIGluIHRoaXMgZXZpZGVuY2UgaGFzIGJlZW4gc3VibWl0dGVkIHNob3dpbmcgdGhhdCBoZSByZWNlaXZlZCBhIGZvdXJ0aAogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSB3ZXJlIGZvdXIgY2hpbGRyZW46IEFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBQYXNpY2xlcywgYW5kIHRoZSB0d28gYm9ybiBvZiBQaG9ybWlvIGFuZCBBcmNoaXBww6ouPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICBnYXZlIGEgcmVsZWFzZSBmcm9tIGFsbCBjbGFpbXMuIDwvdHJhbnNsYXRpb24+"
translation['36.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2aW5nLCB0aGVuLCBvbiBubyBzaW5nbGUgcG9pbnQsIG1lbiBvZiBBdGhlbnMsIGFueQogICAgICAgICAgICAgICAgICAgIGp1c3QgY2xhaW0gdG8gYWR2YW5jZSwgaGUgaGFkIHRoZSBhdWRhY2l0eSB0byBtYWtlIGJlZm9yZSB0aGUgYXJiaXRyYXRvciB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IHNoYW1lbGVzcyBhc3NlcnRpb25zIHdoaWNoIGl0IGlzIGJlc3QgdGhhdCB5b3Ugc2hvdWxkIGhlYXIgaW4gYWR2YW5jZToKICAgICAgICAgICAgICAgICAgICBmaXJzdCB0aGF0IG5vIHdpbGwgd2FzIG1hZGUgYXQgYWxsLCBidXQgdGhhdCB0aGlzIGlzIGEgZmljdGlvbiBhbmQgZm9yZ2VyeSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYmVnaW5uaW5nIHRvIGVuZDsgYW5kLCBzZWNvbmRseSwgdGhhdCB0aGUgcmVhc29uIHdoeSBoZSBoYWQgbWFkZSBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBjb25jZXNzaW9ucyB1cCB0byBub3csIGFuZCBoYWQgYWJzdGFpbmVkIGZyb20gZ29pbmcgdG8gbGF3LCB3YXMgYmVjYXVzZSBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgd2FzIHdpbGxpbmcgdG8gcGF5IGhpbSBhIGxhcmdlIHJlbnQsIGFuZCBwcm9taXNlZCB0aGF0IGhlIHdvdWxkIGRvIHNvLiBCdXQgc2luY2UKICAgICAgICAgICAgICAgICAgICBoZSBkb2VzIG5vdCBkbyB0aGlzLCBub3csIGhlIHNheXMsIEkgZ28gdG8gbGF3LiA8L3RyYW5zbGF0aW9uPg=="
translation['36.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCBib3RoIG9mIHRoZXNlIHN0YXRlbWVudHMsIGlmIGhlIG1ha2VzIHRoZW0sIHdpbGwgYmUgZmFsc2UgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5jb25zaXN0ZW50IHdpdGggaGlzIG93biBjb25kdWN0LCBwcmF5IG9ic2VydmUgZnJvbSB0aGUgZm9sbG93aW5nCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbnMuIFdoZW4gaGUgZGVuaWVzIHRoZSB3aWxsLCBhc2sgaGltIHRoaXMsIGhvdyBpdCBjYW1lIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB0aGUgbG9kZ2luZy1ob3VzZSB1bmRlciB0aGUgd2lsbCBhcyBiZWluZyB0aGUgZWxkZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcmlnaHQgbm90IG9mdGVuIHJlY29nbml6ZWQgaW4gQXR0aWMgbGF3LiBDb21wYXJlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzkuMjkiIHZhbGlkPSJ5ZXMiPkRlbS4gMzkuMjk8L2JpYmw+Ljwvbm90ZT4gSGUgc3VyZWx5IHdpbGwgbm90IGNsYWltIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGNsYXVzZXMgd2hpY2ggaGlzIGZhdGhlciB3cm90ZSBpbiB0aGUgd2lsbCBpbiBoaXMgZmF2b3IgYXJlIHZhbGlkLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXJzIGludmFsaWQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzkuMjkiIHZhbGlkPSJ5ZXMiPkRlbS4gMzkuMjk8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['36.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBoZSBzYXlzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgbWlzbGVkIGJ5IHRoZSBkZWZlbmRhbnQncyBwcm9taXNlcywgcmVtZW1iZXIgdGhhdCB3ZSBoYXZlIGJyb3VnaHQgYmVmb3JlIHlvdQogICAgICAgICAgICAgICAgICAgIGFzIHdpdG5lc3NlcyB0aG9zZSB3aG8gZm9yIGEgbG9uZyB0aW1lLCBhZnRlciBQaG9ybWlvIGhhZCBnaXZlbiBpdCB1cCwgYmVjYW1lCiAgICAgICAgICAgICAgICAgICAgbGVzc2VlcyB1bmRlciB0aGUgdHdvIGJyb3RoZXJzIG9mIHRoZSBiYW5rIGFuZCB0aGUgc2hpZWxkLWZhY3RvcnkuIEFuZCB5ZXQgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgd2hlbiBoZSBncmFudGVkIHRoZSBsZWFzZSB0byB0aGVzZSBtZW4sIHRoYXQgaGUgc2hvdWxkIGF0IG9uY2UgaGF2ZSBtYWRlIGhpcwogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgYWdhaW5zdCB0aGUgZGVmZW5kYW50IGlmIHRoZXJlIHdlcmUgYW55IHRydXRoIGluIHRoZSBjbGFpbXMsIGZvciB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIHRoZW4gZ2F2ZSBhIHJlbGVhc2UsIGJ1dCBmb3Igd2hpY2ggaGUgbm93IGJyaW5ncyBzdWl0IGFnYWluc3QgaGltLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIHRoYXQgaGUgdG9vayB0aGUKICAgICAgICAgICAgICAgICAgICBsb2RnaW5nLWhvdXNlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgd2lsbCBhcyBiZWluZyB0aGUgZWxkZXIsIGFuZCB0aGF0IGhlIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhvdWdodCBpdCByaWdodCB0byBtYWtlIG5vIGNsYWltcyBhZ2FpbnN0IHRoZSBkZWZlbmRhbnQsIGJ1dCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSBwcmFpc2VkIGhpcyBjb25kdWN0LCB0YWtlIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB5b3UgbWF5CiAgICAgICAgICAgICAgICAgICAga25vdywgbWVuIG9mIEF0aGVucywgd2hhdCBsYXJnZSBzdW1zIGhlIGhhcyByZWNlaXZlZCBmcm9tIHRoZSByZW50cyBhbmQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVidHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGRlYnRzLCB0aGF0IGlzLCBkdWUgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlci48L25vdGU+4oCUaGUsIHdobyB3aWxsIHByZXNlbnRseSB3YWlsIGFzIHRob3VnaCBoZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZGVzdGl0dXRlIGFuZCBoYWQgbG9zdCBldmVyeXRoaW5n4oCUaGVhciBhIGJyaWVmIGFjY291bnQgZnJvbSBtZS4gVGhpcwogICAgICAgICAgICAgICAgICAgIG1hbiBoYXMgY29sbGVjdGVkIHR3ZW50eSB0YWxlbnRzIGluIGFsbCBvd2luZyB0byBkZWJ0cyBoZSBoYXMgcmVjb3ZlcmVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgcGFwZXJzIHdoaWNoIGhpcyBmYXRoZXIgbGVmdCwgYW5kIG9mIHRoZXNlIHN1bXMgbW9yZSB0aGFuIGhhbGYgaGUga2VlcHMgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbjsgZm9yIGluIG1hbnkgaW5zdGFuY2VzIGhlIGlzIGRlZnJhdWRpbmcgaGlzIGJyb3RoZXIgb2YgaGlzIHNoYXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZSBsZXNzZWUsIGZvciB0aGUgZWlnaHQgeWVhcnMKICAgICAgICAgICAgICAgICAgICBkdXJpbmcgd2hpY2ggUGhvcm1pbyBoYWQgdGhlIGJhbmssIGhlIHJlY2VpdmVkIGVpZ2h0eSBtaW5hZSBhIHllYXIsIGhhbGYgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgcmVudC4gVGhlc2UgaXRlbXMgbWFrZSB0ZW4gdGFsZW50cyBhbmQgZm9ydHkgbWluYWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZW50IG9mIHRoZSBmYWN0b3J5IHdhcyBhIHRhbGVudCBhIHllYXIsIGFuZCB0aGF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBiYW5rIGEgdGFsZW50IGFuZCBmb3J0eSBtaW5hZSwgbWFraW5nIGEgdG90YWwgb2Ygb25lIGh1bmRyZWQgYW5kIHNpeHR5IG1pbmFlCiAgICAgICAgICAgICAgICAgICAgICAgIGFubnVhbGx5LCBvciBlaWdodHkgbWluYWUgYXBpZWNlIGZvciBlYWNoIG9mIHRoZSB0d28gYnJvdGhlcnMsIG9yIHRlbgogICAgICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIGFuZCBmb3J0eSBtaW5hZSBmb3IgdGhlIGVpZ2h0LXllYXIgcGVyaW9kLjwvbm90ZT4gRm9yIHRlbiB5ZWFycwogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoYXQsIGR1cmluZyB3aGljaCB0aGV5IHN1YnNlcXVlbnRseSBsZWFzZWQgdGhlIGJhbmsgdG8gWGVubyBhbmQgRXVwaHJhZXVzCiAgICAgICAgICAgICAgICAgICAgYW5kIEV1cGhybyBhbmQgQ2FsbGlzdHJhdHVzLCBoZSByZWNlaXZlZCBhIHRhbGVudCBldmVyeSB5ZWFyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcmVudHMgdW5kZXIgdGhlIG5ldyBsZWFzZSByZW1haW5lZCB0aGUgc2FtZSBhcyBiZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBBcG9sbG9kb3J1cyByZWNlaXZlZCBvbmx5IHRoYXQgZnJvbSB0aGUgc2hpZWxkLWZhY3RvcnksIG9yIGEgdGFsZW50CiAgICAgICAgICAgICAgICAgICAgICAgIGFubnVhbGx5Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoaXMgaGUgaGFzIGhhZCBmb3IgYWJvdXQgdHdlbnR5IHllYXJzCiAgICAgICAgICAgICAgICAgICAgdGhlIGluY29tZSBvZiB0aGUgcHJvcGVydHkgb3JpZ2luYWxseSBkaXZpZGVkLCBvZiB3aGljaCBoZSBoaW1zZWxmIGhhZCBjaGFyZ2UsCiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIHRoaXJ0eSBtaW5hZS4gSWYgeW91IGFkZCBhbGwgdGhlc2Ugc3VtcyB0b2dldGhlcizigJR3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZ290IGZyb20gdGhlIGRpc3RyaWJ1dGlvbiwgd2hhdCBoZSByZWNvdmVyZWQgZnJvbSB0aGUgZGVidHMsIGFuZCB3aGF0IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZCBhcyByZW50LCBpdCB3aWxsIGJlIHBsYWluIHRoYXQgaGUgaGFzIHJlY2VpdmVkIG1vcmUgdGhhbiBmb3J0eQogICAgICAgICAgICAgICAgICAgIHRhbGVudHMsIHRvIHNheSBub3RoaW5nIG9mIHRoZSBwcmVzZW50IFBob3JtaW8gbWFkZSBoaW0sIGFuZCBoaXMgaW5oZXJpdGFuY2UKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyBtb3RoZXIsIGFuZCB3aGF0IGhlIGhhcyBoYWQgZnJvbSB0aGUgYmFuayBhbmQgZG9lcyBub3QgcGF5CiAgICAgICAgICAgICAgICAgICAgYmFja+KAlHR3byBhbmQgb25lLWhhbGYgdGFsZW50cyBhbmQgc2l4IGh1bmRyZWQgZHJhY2htYWUuIDwvdHJhbnNsYXRpb24+"
translation['36.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5BaCwgYnV0LCB5b3Ugd2lsbCB0ZWxsIHVzLCB0aGUgc3RhdGUgaGFzIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc3VtcywgYW5kIHlvdSBoYXZlIGJlZW4gb3V0cmFnZW91c2x5IHRyZWF0ZWQsIGhhdmluZyB1c2VkIHVwIHlvdXIgZm9ydHVuZQogICAgICAgICAgICAgICAgICAgIGluIHB1YmxpYyBzZXJ2aWNlcyEgTm87IHdoYXQgeW91IGV4cGVuZGVkIGluIHB1YmxpYyBzZXJ2aWNlIG91dCBvZiB0aGUgdW5kaXZpZGVkCiAgICAgICAgICAgICAgICAgICAgZnVuZHMsIHlvdSBhbmQgeW91ciBicm90aGVyIGV4cGVuZGVkIGpvaW50bHk7IGFuZCB3aGF0IHlvdSBnYXZlIGFmdGVyIHRoYXQgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBhbW91bnQgdG8gdGhlIGludGVyZXN0LCBJIHdpbGwgbm90IHNheSBvbiB0d28gdGFsZW50cywgYnV0IGV2ZW4gb24gdHdlbnR5CiAgICAgICAgICAgICAgICAgICAgbWluYWUuIERvIG5vdCwgdGhlbiwgYWNjdXNlIHRoZSBzdGF0ZSwgbm9yIHNheSB0aGF0IHRoZSBzdGF0ZSBoYXMgcmVjZWl2ZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHBvcnRpb24gb2YgeW91ciBwYXRyaW1vbnkgd2hpY2ggeW91IGhhdmUgc2hhbWVmdWxseSBhbmQgd2lja2VkbHkgc3F1YW5kZXJlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBtYXkga25vdywgbWVuIG9mIEF0aGVucywgdGhlIGFtb3VudCBvZiBwcm9wZXJ0eSB3aGljaCBoZSBoYXMgcmVjZWl2ZWQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgc2VydmljZXMgd2hpY2ggaGUgaGFzIGFzc3VtZWQsIHRoZSBjbGVyayBzaGFsbCByZWFkIHRvIHlvdSB0aGUgaXRlbXMgb25lCiAgICAgICAgICAgICAgICAgICAgYnkgb25lLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgdGFrZSB0aGlzIGxpc3QgYW5kIHRoaXMgY2hhbGxlbmdlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZXNlIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ikxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXN0PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpc3Q8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbW9uaWVzIGhlIGhhcyByZWNlaXZlZDsgaGUgaGFzIGRlYnRzIGR1ZSBoaW0gdG8gdGhlIHZhbHVlIG9mIG1hbnkgdGFsZW50cywgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBpcyBjb2xsZWN0aW5nLCBzb21lIGJ5IHZvbHVudGFyeSBwYXltZW50cywgc29tZSBieSBicmluZ2luZyBhY3Rpb24uIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgZGVidHMgd2VyZSBvd2luZyB0byBQYXNpb+KAlHF1aXRlIGFwYXJ0IGZyb20gdGhlIHJlbnQgb2YgdGhlIGJhbmsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIHByb3BlcnR5IHdoaWNoIGhlIGxlZnQ74oCUYW5kIHRoZXNlIHRoZSB0d28gYnJvdGhlcnMgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZC4gSGUgaGFzIGV4cGVuZGVkIHVwb24gcHVibGljIHNlcnZpY2VzIG1lcmVseSB3aGF0IHlvdSBoYXZlIGhlYXJkLCB0aGUKICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdCBmcmFjdGlvbiBvZiBoaXMgaW5jb21lLCBub3QgdG8gc2F5IG9mIGhpcyBjYXBpdGFsOyBhbmQgeWV0IGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBhc3N1bWUgYSBicmFnZ2luZyBhaXIsIGFuZCB3aWxsIHRhbGsgYWJvdXQgaGlzIGV4cGVuZGl0dXJlcyBmb3IgdHJpZXJhcmNoYWwgYW5kCiAgICAgICAgICAgICAgICAgICAgY2hvcmVnaWMgc2VydmljZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFzIGEgbWF0dGVyIG9mIGZhY3QKICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgaGFkIHNlcnZlZCBhcyB0cmllcmFyY2ggd2l0aCBkaXN0aW5jdGlvbiwgYW5kIGhhZCBiZWVuIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgbGliZXJhbCBpbiBoaXMgZXhwZW5kaXR1cmVzLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1MC4xMSIgdmFsaWQ9InllcyI+RGVtLiA1MC4xMSBmZi48L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgT3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1Ljc4IiB2YWxpZD0ieWVzIj5EZW0uIDQ1Ljc4PC9iaWJsPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1MC4xMSIgdmFsaWQ9InllcyI+RGVtLiA1MC4xMSBmZi48L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgT3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1Ljc4IiB2YWxpZD0ieWVzIj5EZW0uIDQ1Ljc4PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['36.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5JIGhhdmUgc2hvd24geW91IHRoYXQgdGhlc2UgYXNzZXJ0aW9ucyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGZhbHNlOyBob3dldmVyLCBldmVuIGlmIHRoZXkgc2hvdWxkIGFsbCBwcm92ZSB0byBiZSB0cnVlLCBJIHRoaW5rIGl0CiAgICAgICAgICAgICAgICAgICAgbW9yZSBob25vcmFibGUgYW5kIG1vcmUganVzdCB0aGF0IGhlIHNob3VsZCBjb250aW51ZSB0byByZW5kZXIgcHVibGljIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyBvd24gZnVuZHMsIHRoYW4gdGhhdCB5b3Ugc2hvdWxkIGdpdmUgaGltIHRoZSBkZWZlbmRhbnQncyBwcm9wZXJ0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgcmVjZWl2aW5nIHlvdXJzZWx2ZXMgYnV0IGEgc21hbGwgcG9ydGlvbiBvZiB0aGUgd2hvbGUsIHNob3VsZCBzZWUgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IHJlZHVjZWQgdG8gZXh0cmVtZSBwb3ZlcnR5LCBhbmQgdGhlIHBsYWludGlmZiBpbiB3YW50b24gaW5zb2xlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIHNwZW5kaW5nIGhpcyBtb25leSBpbiB0aGUgbWFubmVyIHRoYXQgaGFzIGJlZW4gaGlzIHdvbnQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNvbnRyYXN0IHdpdGggdGhpcyBwYXNzYWdlIHRoZSBzdGF0ZW1lbnRzIG9mIEFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgcmVnYXJkaW5nIGhpcyBtYW5uZXIgb2YgbGlmZSBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1Ljc3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NS43NzwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUuNzciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ1Ljc3PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['36.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgbm93CiAgICAgICAgICAgICAgICAgICAgdG8gUGhvcm1pbydzIHdlYWx0aCBhbmQgaGlzIGhhdmluZyBnb3QgaXQgZnJvbSB5b3VyIGZhdGhlcidzIGVzdGF0ZSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucyB5b3Ugc2FpZCB5b3Ugd2VyZSBnb2luZyB0byBhc2sgYXMgdG8gaG93IFBob3JtaW8gYWNxdWlyZWQgaGlzIGZvcnR1bmUsCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgdGhlIGxlYXN0IHJpZ2h0IG9mIGFueSBtYW4gaW4gdGhlIHdvcmxkIHRvIHNwZWFrIHRodXMuIEZvciBQYXNpbywgeW91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgZGlkIG5vdCBhY3F1aXJlIGhpcyBmb3J0dW5lLCBhbnkgbW9yZSB0aGFuIFBob3JtaW8gZGlkLCBieSBnb29kIGx1Y2sgb3IKICAgICAgICAgICAgICAgICAgICBieSBpbmhlcml0YW5jZSBmcm9tIGhpcyBmYXRoZXIsIGJ1dCBoZSBnYXZlIHByb29mIHRvIHRoZSBiYW5rZXJzLCBBbnRpc3RoZW5lcwogICAgICAgICAgICAgICAgICAgIGFuZCBBcmNoZXN0cmF0dXMsIHdobyB3ZXJlIGhpcyBtYXN0ZXJzLCB0aGF0IGhlIHdhcyBhIGdvb2QgbWFuIGFuZCBhbiBob25lc3QsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNvIHdvbiB0aGVpciBjb25maWRlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyByZW1hcmthYmxlCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhIHN0cmlraW5nIHRoaW5nIGl0IGlzIGluIHRoZSBleWVzIG9mIHBlb3BsZSB3aG8gYXJlIGFjdGl2ZSBpbiBjb21tZXJjaWFsCiAgICAgICAgICAgICAgICAgICAgbGlmZSBhbmQgaW4gYmFua2luZywgd2hlbiB0aGUgc2FtZSBtYW4gaXMgYWNjb3VudGVkIGluZHVzdHJpb3VzIGFuZCBpcwogICAgICAgICAgICAgICAgICAgICAgICBob25lc3QuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBvcmRlciBvZiB0aGUgd29yZHMgc3VnZ2VzdHMgYQogICAgICAgICAgICAgICAgICAgICAgICBzbGlnaHQgY29udHJhc3QgYmV0d2VlbiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtOG9uc6+zrHOuTwvZm9yZWlnbj4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs614by2zr3Osc65PC9mb3JlaWduPi48L25vdGU+IFdlbGw7IHRoaXMgcXVhbGl0eSB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgaW1wYXJ0ZWQgdG8gUGFzaW8gYnkgaGlzIG1hc3RlcnM7IGhlIHdhcyBoaW1zZWxmIGhvbmVzdCBieSBuYXR1cmU7IG5vciBkaWQgeW91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlciBpbXBhcnQgaXQgdG8gUGhvcm1pby4gSXQgd2FzIHlvdXJzZWxmLCByYXRoZXIgdGhhbiBQaG9ybWlvLCB3aG9tIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBtYWRlIGhvbmVzdCwgaWYgaGUgaGFkIGhhZCB0aGUgcG93ZXIuIElmIHlvdSBkbyBub3Qga25vdyB0aGF0IGZvcgogICAgICAgICAgICAgICAgICAgIG1vbmV5LW1ha2luZyB0aGUgYmVzdCBjYXBpdGFsIG9mIGFsbCBpcyB0cnVzdHdvcnRoaW5lc3MsIHlvdSBkbyBub3Qga25vdwogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIGF0IGFsbC4gQnV0LCBhcGFydCBmcm9tIGFsbCB0aGlzLCBQaG9ybWlvIGhhcyBpbiBtYW55IHdheXMgc2hvd24KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHVzZWZ1bCB0byB5b3VyIGZhdGhlciBhbmQgdG8geW91LCBhbmQgaW4gZ2VuZXJhbCB0byB5b3VyIGFmZmFpcnMuIEJ1dAogICAgICAgICAgICAgICAgICAgIHlvdXIgaW5zYXRpYXRlIGdyZWVkIGFuZCB5b3VyIGNoYXJhY3RlciwgSSB0YWtlIGl0LCBubyBvbmUgY291bGQgYWRlcXVhdGVseQogICAgICAgICAgICAgICAgICAgIGV4cHJlc3MuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs604b25zr7Osc65PC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvLbOvc6xzrk8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['36.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIHN1cnByaXNlZCB0aGF0IHlvdSBkbyBub3Qgb2YKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBtYWtlIHRoaXMgcmVmbGVjdGlvbiwgdGhhdCBBcmNoZXN0cmF0dXMsIHRvIHdob20geW91ciBmYXRoZXIgZm9ybWVybHkKICAgICAgICAgICAgICAgICAgICBiZWxvbmdlZCwgaGFzIGEgc29uIGhlcmUsIEFudGltYWNodXMsIHdobyBmYXJlcyBub3QgYXQgYWxsIGFzIGhlIGRlc2VydmVzLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aG8gZG9lcyBub3QgZ28gdG8gbGF3IHdpdGggeW91IGFuZCBzYXkgdGhhdCBoZSBpcyBvdXRyYWdlb3VzbHkgdHJlYXRlZCwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHlvdSB3ZWFyIGEgc29mdCBtYW50bGUsIGFuZCBoYXZlIHJlZGVlbWVkIG9uZSBtaXN0cmVzcywgYW5kIGhhdmUgZ2l2ZW4gYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGluIG1hcnJpYWdlIO+8iGFsbCB0aGlzLCB3aGlsZSB5b3UgaGF2ZSBhIHdpZmUgb2YgeW91ciBvd27vvIksIGFuZAogICAgICAgICAgICAgICAgICAgIHRha2UgdGhyZWUgYXR0ZW5kYW50IHNsYXZlcyBhYm91dCB3aXRoIHlvdSwgYW5kIGxpdmUgc28gbGljZW50aW91c2x5IHRoYXQgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBtZWV0IHlvdSBvbiB0aGUgc3RyZWV0IHBlcmNlaXZlIGl0LCB3aGlsZSBoZSBoaW1zZWxmIGlzIGluIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGVzdGl0dXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['36.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZG9lcyBoZSBmYWlsIHRvIHNlZSBQaG9ybWlvJ3MKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24uIEFuZCB5ZXQgaWYgb24gdGhpcyBncm91bmQgeW91IHRoaW5rIHlvdSBoYXZlIGEgY2xhaW0gb24gUGhvcm1pbydzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIGJlY2F1c2UgaGUgb25jZSBiZWxvbmdlZCB0byB5b3VyIGZhdGhlciwgQW50aW1hY2h1cyBoYXMgYSBzdHJvbmdlcgogICAgICAgICAgICAgICAgICAgIGNsYWltIHRoYW4geW91IGhhdmUuIEZvciB5b3VyIGZhdGhlciBpbiBoaXMgdHVybiBiZWxvbmdlZCB0byB0aG9zZSBtZW4sIHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICBib3RoIHlvdSBhbmQgUGhvcm1pbyBieSB0aGlzIGFyZ3VtZW50IGJlbG9uZyB0byBBbnRpbWFjaHVzLiBCdXQgeW91IGFyZSBzbyBsb3N0CiAgICAgICAgICAgICAgICAgICAgdG8gYWxsIHByb3BlciBmZWVsaW5nLCB0aGF0IHlvdSB5b3Vyc2VsZiBjb21wZWwgcGVvcGxlIHRvIHNheSB0aGluZ3Mgd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gaGF0ZSBhbnlvbmUgZm9yIHNheWluZy4gPC90cmFuc2xhdGlvbj4="
translation['36.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgZGlzZ3JhY2UKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBhbmQgeW91ciBkZWFkIHBhcmVudHMsIGFuZCB5b3UgY2FzdCByZXByb2FjaCB1cG9uIHRoZSBzdGF0ZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiBhZG9ybmluZyBhbmQgY2hlcmlzaGluZyB0aGlzIGdvb2QgZm9ydHVuZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBvZiBjb3Vyc2UsIHRoZSByaWdodCBvZiBjaXRpemVuc2hpcC48L25vdGU+IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91ciBmYXRoZXIsIGFuZCBhZnRlcndhcmQgUGhvcm1pbyBoYXZlIGNvbWUgdG8gZW5qb3kgdGhyb3VnaCB0aGUga2luZG5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4sIHNvIHRoYXQgaXQgbWlnaHQgaGF2ZSBhcHBlYXJlZCBhcyB0aGUgaGlnaGVzdCBvZiBob25vcnMgZm9yIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGdhdmUgaXQgYW5kIGZvciB5b3Ugd2hvIG9idGFpbmVkIGl0LCB5b3UgZHJhZyBpdCBpbnRvIHB1YmxpYyB2aWV3LCB5b3UgcG9pbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgZmluZ2VyIG9mIHNjb3JuIGF0IGl0LCB5b3UgY3JpdGljaXplIGl0OyB5b3UgYWxsIGJ1dCB0YXVudCB0aGUgQXRoZW5pYW5zIGZvcgogICAgICAgICAgICAgICAgICAgIGFkbWl0dGluZyB0byBjaXRpemVuc2hpcCBhIHBlcnNvbiBsaWtlIHlvdXJzZWxmLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQgeW91IGhhdmUgY29tZSB0byBzdWNoIGEgcGl0Y2ggb2YKICAgICAgICAgICAgICAgICAgICBpbnNhbml0eeKAlHdoYXQgb3RoZXIgbmFtZSBjYW4gb25lIGZpbmQgZm9yIGl0P+KAlGFzIG5vdCB0byBzZWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGF0IHRoaXMgbW9tZW50IHdlLCB3aG8gY2xhaW0gdGhhdCwgc2luY2UgUGhvcm1pbyBoYXMgcmVjZWl2ZWQgaGlzIGZyZWVkb20sCiAgICAgICAgICAgICAgICAgICAgaXQgc2hvdWxkIG5vdCBiZSByZW1lbWJlcmVkIGFnYWluc3QgaGltIHRoYXQgaGUgb25jZSBiZWxvbmdlZCB0byB5b3VyIGZhdGhlciwKICAgICAgICAgICAgICAgICAgICBhcmUgc3BlYWtpbmcgaW4geW91ciBpbnRlcmVzdDsgd2hpbGUgeW91LCBpbiBpbnNpc3RpbmcgdGhhdCBoZSBzaG91bGQgbmV2ZXIgYmUKICAgICAgICAgICAgICAgICAgICBvbiBhIGZvb3Rpbmcgb2YgZXF1YWxpdHkgd2l0aCB5b3Vyc2VsZiwgYXJlIHNwZWFraW5nIGFnYWluc3QgeW91cnNlbGY7IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHJ1bGUsIHdoaWNoIHlvdSBsYXkgZG93biBhcyBqdXN0IGZvciB5b3Vyc2VsZiBhZ2FpbnN0IFBob3JtaW8sIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZCBhZ2FpbnN0IHlvdSBieSB0aG9zZSB3aG8gYXQgdGhlIGZpcnN0IHdlcmUgdGhlIG1hc3RlcnMgb2YgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgUGFzaW8gYWxzbyB3YXMKICAgICAgICAgICAgICAgICAgICBzb21lYm9keSdzIHNsYXZlLCBhbmQgdGhhdCBoZSBhZnRlcndhcmRzIHdvbiBoaXMgZnJlZWRvbSBpbiB0aGUgc2FtZSBtYW5uZXIgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCBQaG9ybWlvIHdvbiBoaXMgZnJvbSB5b3UsIHRha2UsIHBsZWFzZSwgdGhlc2UgZGVwb3NpdGlvbnMsIHdoaWNoIHNob3cgdGhhdAogICAgICAgICAgICAgICAgICAgIFBhc2lvIGJlbG9uZ2VkIHRvIEFyY2hlc3RyYXR1cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIG1hbiwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB3aG8gYXQgdGhlIGZpcnN0IHNhdmVkIHRoZSBmYW1pbHkgZm9ydHVuZSwgYW5kIHJlbmRlcmVkIGhpbXNlbGYgdXNlZnVsIGluIG1hbnkKICAgICAgICAgICAgICAgICAgICB3YXlzIHRvIHRoaXMgbWFuJ3MgZmF0aGVyLCB0aGUgbWFuIHdobyBoYXMgY29uZmVycmVkIHVwb24gQXBvbGxvZG9ydXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgYmVuZWZpdHMgb2Ygd2hpY2ggeW91IGhhdmUgaGVhcmQsIGhlIGl0IGlzIGFnYWluc3Qgd2hvbSB0aGUgcGxhaW50aWZmCiAgICAgICAgICAgICAgICAgICAgc2Vla3MgYSBqdWRnZW1lbnQgd2l0aCBzdWNoIGhlYXZ5IGRhbWFnZXMsIGFuZCB0aGlua3MgcHJvcGVyIHRvIGNhc3Qgb3V0IGluIHJ1aW4KICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byBhbGwgcmlnaHQuIEZvciB0aGF0LCBBcG9sbG9kb3J1cywgaXMgYWxsIHRoYXQgeW91IGNvdWxkIHBvc3NpYmx5CiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaC4gRm9yLCBpZiB5b3UgbG9vayBjbG9zZWx5IGF0IHRoZSBwcm9wZXJ0eSwgeW91IHdpbGwgc2VlIHRvIHdob20gaXQKICAgICAgICAgICAgICAgICAgICBiZWxvbmdzLCBpbiBjYXNl4oCUd2hpY2ggaGVhdmVuIGZvcmJpZCHigJR0aGVzZSBqdXJ5bWVuIGFyZQogICAgICAgICAgICAgICAgICAgIG1pc2xlZCBieSB5b3UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBwcm9wZXJ0eSBvZiBQaG9ybWlvIGNvbnNpc3RlZAogICAgICAgICAgICAgICAgICAgICAgICBjaGllZmx5IGluIHRoZSBtb25leSBvZiB0aGUgZGVwb3NpdG9ycyB3aGljaCBoZSBoYWQgaW52ZXN0ZWQgaW4gZGl2ZXJzZQogICAgICAgICAgICAgICAgICAgICAgICB3YXlzLiBJZiBoZWF2eSBkYW1hZ2VzIHdlcmUgYXNzZXNzZWQgYWdhaW5zdCBoaW0sIHRoZSBkZXBvc2l0b3JzIHdvdWxkIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2UgZGVtYW5kIHRoZWlyIG1vbmV5LCBhbmQgc3VjaCBhIHJ1biBvbiB0aGUgYmFuayB3b3VsZCBiZSBydWlub3VzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3Ugc2VlIEFyaXN0b2xvY2h1cywgc29uIG9mIENoYXJpZGVtdXM/CiAgICAgICAgICAgICAgICAgICAgT25jZSBoZSBwb3NzZXNzZWQgc29tZSBsYW5kOyBub3cgbWFueSBwZW9wbGUgb3duIGl0OyBmb3IgaGUgYWNxdWlyZWQgaXQgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgaW4gZGVidCB0byBtYW55LiBBbmQgU29zaW5vbXVzIGFuZCBUaW1vZGVtdXMgYW5kIHRoZSBvdGhlciBiYW5rZXJzLCB3aG8sCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IGhhZCB0byBzZXR0bGUgd2l0aCB0aGVpciBjcmVkaXRvcnMsIGhhZCB0byBnaXZlIHVwIGFsbCB0aGVpciBwcm9wZXJ0eS4KICAgICAgICAgICAgICAgICAgICBCdXQgeW91IHRoaW5rIGl0IHVubmVjZXNzYXJ5IHRvIGhhdmUgcmVnYXJkIGV2ZW4gZm9yIHRoZSBwcmVjYXV0aW9ucyB3aGljaCB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCBhIGZhciBiZXR0ZXIgbWFuIHRoYW4geW91IGFuZCBhIHdpc2VyLCB0b29rIHRvIG1lZXQgYWxsIGNvbnRpbmdlbmNpZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5IZeKAlE8gWmV1cyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29kc+KAlGVzdGVlbWVkIFBob3JtaW8gdG8gYmUgc28gbXVjaCBtb3JlIHZhbHVhYmxlIHRoYW4geW91IGJvdGggdG8KICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBhbmQgdG8gaGltIGFuZCB0byB5b3VyIGJ1c2luZXNzLCB0aGF0LCBhbHRob3VnaCB5b3Ugd2VyZSBhIG1hbiBncm93biwKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgdG8gUGhvcm1pbywgbm90IHRvIHlvdSwgdGhhdCBoZSBsZWZ0IHRoZSBjb250cm9sIG9mIHRoZSBsZWFzZXMsIGFuZCBnYXZlCiAgICAgICAgICAgICAgICAgICAgaGltIGhpcyB3aWZlIGluIG1hcnJpYWdlIGFuZCBob25vcmVkIGhpbSBhcyBsb25nIGFzIGhlIGxpdmVkLiBBbmQganVzdGx5IHRvbywKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgQXRoZW5zLiBGb3Igb3RoZXIgYmFua2Vycywgd2hvIGhhZCBubyByZW50IHRvIHBheSwgYnV0IGNhcnJpZWQgb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBidXNpbmVzcyBvbiB0aGVpciBvd24gYWNjb3VudCwgaGF2ZSBhbGwgY29tZSB0byBydWluOyB3aGlsZSBQaG9ybWlvLCB3aG8gcGFpZCBhCiAgICAgICAgICAgICAgICAgICAgcmVudCBvZiB0d28gdGFsZW50cyBhbmQgZm9ydHkgbWluYWUsIHNhdmVkIHRoZSBiYW5rIGZvciB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['36.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyBQYXNpbyB3YXMgZ3JhdGVmdWwgdG8gaGltLCBidXQgeW91IG1ha2Ugbm8gYWNjb3VudAogICAgICAgICAgICAgICAgICAgIG9mIGl0LiBOYXksIGluIGRlZmlhbmNlIG9mIHRoZSB3aWxsIGFuZCB0aGUgaW1wcmVjYXRpb25zIHdyaXR0ZW4gaW4gaXQgYnkgeW91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgeW91IGhhcmFzcyBoaW0sIHlvdSBwcm9zZWN1dGUgaGltLCB5b3UgY2FsdW1uaWF0ZSBoaW0uIE15IGdvb2QKICAgICAgICAgICAgICAgICAgICBzaXLigJR5b3UgY2FuIGJlIGFkZHJlc3NlZCBieSB0aGlzIHRlcm3igJR3aWxsIHlvdSBub3QgZGVzaXN0LAogICAgICAgICAgICAgICAgICAgIGFuZCBrbm93IHRoaXPigJR0aGF0IHRvIGJlIGhvbmVzdCBwcm9maXRzIG1vcmUgdGhhbiBncmVhdCB3ZWFsdGg/IEluCiAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gY2FzZSwgYXQgYW55IHJhdGUsIGFsdGhvdWdoLCBpZiB5b3VyIHdvcmRzIGFyZSB0cnVlLCB5b3UgcmVjZWl2ZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtb25leSwgaXQgaGFzIGFsbCBiZWVuIGxvc3QsIGFzIHlvdSBzYXkuIEJ1dCwgaWYgeW91IGhhZCBiZWVuIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLCB5b3Ugd291bGQgbm90IGhhdmUgc3F1YW5kZXJlZCBpdC4gPC90cmFuc2xhdGlvbj4="
translation['36.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIG15IG93biBwYXJ0LCBieSBaZXVzIGFuZCB0aGUgZ29kcywKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggSSBsb29rIGF0IHRoZSBtYXR0ZXIgZnJvbSBldmVyeSBzaWRlLCBJIGNhbiBzZWUgbm8gcmVhc29uIHdoeSB0aGUganVyeQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBpbmR1Y2VkIGJ5IHlvdSB0byBnaXZlIGEgdmVyZGljdCBhZ2FpbnN0IHRoZSBkZWZlbmRhbnQuIFdoeSBzaG91bGQKICAgICAgICAgICAgICAgICAgICB0aGV5PyBCZWNhdXNlIHlvdSBtYWtlIHlvdXIgY2hhcmdlcyBzbyBzb29uIGFmdGVyIHRoZSBvZmZlbmNlPyBCdXQgeW91IG1ha2UgdGhlbQogICAgICAgICAgICAgICAgICAgIHllYXJzIGFuZCBhZ2VzIGxhdGVyLiBBaCwgYnV0IHlvdSBhdm9pZGVkIHRoZSB0cm91YmxlIG9mIGxhd3N1aXRzIGFsbCB0aGlzIHRpbWU/CiAgICAgICAgICAgICAgICAgICAgQnV0IHdobyBkb2VzIG5vdCBrbm93IG9mIGFsbCB0aGUgY2FzZXMgaW4gd2hpY2ggeW91IGhhdmUgYmVlbiBlbmdhZ2VkIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBjZWFzaW5nLCBub3Qgb25seSBwcm9zZWN1dGluZyBwcml2YXRlIHN1aXRzIG9mIG5vIGxlc3MgaW1wb3J0YW5jZSB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgb25lLCBidXQgbWFsaWNpb3VzbHkgdHJ1bXBpbmcgdXAgcHVibGljIGNoYXJnZXMsIGFuZCBicmluZ2luZyBtZW4gdG8KICAgICAgICAgICAgICAgICAgICB0cmlhbD8gRGlkIHlvdSBub3QgYWNjdXNlIFRpbW9tYWNodXM/IERpZCB5b3Ugbm90IGFjY3VzZSBDYWxsaXBwdXMsIHdobyBpcyBub3cKICAgICAgICAgICAgICAgICAgICBpbiBTaWNpbHk/IE9yLCBhZ2FpbiwgTWVubz8gb3IgQXV0b2NsZXM/IG9yIFRpbW90aGV1cz8gb3IgaG9zdHMgb2Ygb3RoZXJzPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaW1vbWFjaHVzLCBNZW5vLCBhbmQgQXV0b2NsZXMg77yIc2VlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwIiB2YWxpZD0ieWVzIj5EZW0gNTA8L2JpYmw+Lu+8iSB3ZXJlIHN1Y2Nlc3NpdmUgY29tbWFuZGVycyBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQXRoZW5pYW4gZmxlZXQgaW4gVGhyYWNpYW4gd2F0ZXJzLCB3aGVyZSBBcG9sbG9kb3J1cyBzZXJ2ZWQgYXMKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoLiBDYWxsaXBwdXMgaXMgYWxsIGJ1dCBjZXJ0YWlubHkgdG8gYmUgaWRlbnRpZmllZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2ggb2YgdGhhdCBuYW1lLCB3aG8gYXQgdGhlIGJpZGRpbmcgb2YgVGltb21hY2h1cywgYW5kIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzJ3Mgb3duIHJlZnVzYWwgdG8gZG8gc28sIGhhZCB0cmFuc3BvcnRlZCB0aGUgZXhpbGUgQ2FsbGlzdHJhdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gTWFjZWRvbmlhIHRvIFRoYXNvcy4gVGltb3RoZXVzIHdhcyB0aGUgd2VsbC1rbm93biBBdGhlbmlhbiBnZW5lcmFsLAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHdob20gQXBvbGxvZG9ydXMgYnJvdWdodCBhbHNvIGEgcHJpdmF0ZSBzdWl0IHRvIHJlY292ZXIgZnVuZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDkiIHZhbGlkPSJ5ZXMiPkRlbS4gNDk8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUwIiB2YWxpZD0ieWVzIj5EZW0gNTA8L2JpYmw+Lu+8iSB3ZXJlIHN1Y2Nlc3NpdmUgY29tbWFuZGVycyBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQXRoZW5pYW4gZmxlZXQgaW4gVGhyYWNpYW4gd2F0ZXJzLCB3aGVyZSBBcG9sbG9kb3J1cyBzZXJ2ZWQgYXMKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoLiBDYWxsaXBwdXMgaXMgYWxsIGJ1dCBjZXJ0YWlubHkgdG8gYmUgaWRlbnRpZmllZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2ggb2YgdGhhdCBuYW1lLCB3aG8gYXQgdGhlIGJpZGRpbmcgb2YgVGltb21hY2h1cywgYW5kIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzJ3Mgb3duIHJlZnVzYWwgdG8gZG8gc28sIGhhZCB0cmFuc3BvcnRlZCB0aGUgZXhpbGUgQ2FsbGlzdHJhdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gTWFjZWRvbmlhIHRvIFRoYXNvcy4gVGltb3RoZXVzIHdhcyB0aGUgd2VsbC1rbm93biBBdGhlbmlhbiBnZW5lcmFsLAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHdob20gQXBvbGxvZG9ydXMgYnJvdWdodCBhbHNvIGEgcHJpdmF0ZSBzdWl0IHRvIHJlY292ZXIgZnVuZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDkiIHZhbGlkPSJ5ZXMiPkRlbS4gNDk8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['36.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXMgaXQgcmVhc29uYWJsZSB0byBiZWxpZXZlIHRoYXQgeW91LCB3aG8KICAgICAgICAgICAgICAgICAgICBhcmUgQXBvbGxvZG9ydXMsIHdvdWxkIGRlZW0gaXQgeW91ciBkdXR5IHRvIHNlZWsgc2F0aXNmYWN0aW9uIGZvciBwdWJsaWMgd3JvbmdzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRvdWNoZWQgeW91IG9ubHkgaW4gcGFydCwgc29vbmVyIHRoYW4gZm9yIHRoZSBwcml2YXRlIHdyb25ncywgY29uY2VybmluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBub3cgYnJpbmcgY2hhcmdlcywgZXNwZWNpYWxseSB3aGVuIHRoZXkgd2VyZSBhcyBncmF2ZSBhcyB5b3Ugbm93CiAgICAgICAgICAgICAgICAgICAgY2xhaW0/IFdoeSwgdGhlbiwgZGlkIHlvdSBhY2N1c2UgdGhvc2UgbWVuLCBhbmQgbGVhdmUgUGhvcm1pbyBhbG9uZT8gWW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBzdWZmZXJpbmcgbm8gd3JvbmcsIGJ1dCBtZXRoaW5rcyB0aGUgY2hhcmdlcyB3aGljaCB5b3UgYXJlIG5vdyBicmluZ2luZyBhcmUKICAgICAgICAgICAgICAgICAgICBiYXNlbGVzcyBhbmQgbWFsaWNpb3VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['36.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoaW5rLCB0aGVuLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBBdGhlbnMsIHRoYXQgbm90aGluZyBjb3VsZCBiZSBtb3JlIHRvIHRoZSBwdXJwb3NlIHRoYW4gdG8gYnJpbmcgZm9yd2FyZAogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0byB0aGVzZSBmYWN0cy4gRm9yIGlmIG9uZSBpcyBjb250aW51YWxseSBtYWtpbmcgYmFzZWxlc3MgY2hhcmdlcywKICAgICAgICAgICAgICAgICAgICB3aGF0IGNhbiBvbmUgZXhwZWN0IGhpbSB0byBkbyBub3c/IEluIHRydXRoLCBtZW4gb2YgQXRoZW5zLCBJIHRoaW5rIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBzZXJ2ZXMgYXMgYW4gaW5kZXggb2YgUGhvcm1pbydzIGNoYXJhY3RlciwgYW5kIG9mIGhpcyB1cHJpZ2h0bmVzcyBhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgZ2VuZXJvc2l0eSwgSSBtYXkgcmlnaHRseSBicmluZyBiZWZvcmUgeW91IGFzIHNvbWV0aGluZyBxdWl0ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlLiBGb3Igb25lIHdobyBpcyBkaXNob25lc3QgaW4gYWxsIG1hdHRlcnMgbWlnaHQgcGVyaGFwcyBoYXZlIHdyb25nZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW50aWZmIGFtb25nIG90aGVyczsgYnV0IGEgbWFuIHdobyBoYXMgbmV2ZXIgd3JvbmdlZCBhbnlib2R5IGluIGFueXRoaW5nLAogICAgICAgICAgICAgICAgICAgIGJ1dCwgb24gdGhlIGNvbnRyYXJ5LCBoYXMgdm9sdW50YXJpbHkgZG9uZSBnb29kIHRvIG1hbnksIGhvdyBjb3VsZCBoZSByZWFzb25hYmx5CiAgICAgICAgICAgICAgICAgICAgYmUgdGhvdWdodCB0byBoYXZlIHdyb25nZWQgQXBvbGxvZG9ydXMgYWxvbmUgb2YgYWxsIG1lbj88bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB5b3UgaGF2ZSBoZWFyZCB0aGVzZSBkZXBvc2l0aW9ucywgeW91IHdpbGwga25vdyB0aGUKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb2YgZWl0aGVyLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlYWQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aGljaCBiZWFyIHVwb24gdGhlIGJhc2VuZXNzIG9mIEFwb2xsb2RvcnVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JcyB0aGlzIGZlbGxvdyBvZiBsaWtlIHN0YW1wPyBDb25zaWRlci4KICAgICAgICAgICAgICAgICAgICBSZWFkIG9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgcmVhZCBhbGwgdGhlIHNlcnZpY2VzIHdoaWNoIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBoYXMgcmVuZGVyZWQgdG8gdGhlIHN0YXRlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGhvcm1pbywgdGhlbiwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgQXRoZW5zLCB3aG8gaGFzIGluIHNvIG1hbnkgd2F5cyBwcm92ZWQgaGltc2VsZiBvZiBzZXJ2aWNlIHRvIHRoZSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGFuZCB0byBtYW55IG9mIHlvdSwgYW5kIGhhcyBuZXZlciBkb25lIGhhcm0gdG8gYW55b25lIGVpdGhlciBpbiBwdWJsaWMgb3IgaW4KICAgICAgICAgICAgICAgICAgICBwcml2YXRlLCBhbmQgd2hvIGlzIGd1aWx0eSBvZiBubyB3cm9uZyB0b3dhcmQgdGhpcyBtYW4gQXBvbGxvZG9ydXMsIGJlZ3MgYW5kCiAgICAgICAgICAgICAgICAgICAgaW1wbG9yZXMgYW5kIGNsYWltcyB5b3VyIHByb3RlY3Rpb24sIGFuZCB3ZSwgaGlzIGZyaWVuZHMsIGpvaW4gaW4gdGhlIHNhbWUgcGxlYQogICAgICAgICAgICAgICAgICAgIHRvIHlvdS4gT2YgYW5vdGhlciBmYWN0LCB0b28sIHlvdSBzaG91bGQgYmUgaW5mb3JtZWQuIERlcG9zaXRpb25zIGhhdmUgYmVlbiByZWFkCiAgICAgICAgICAgICAgICAgICAgdG8geW91LCBtZW4gb2YgQXRoZW5zLCBzaG93aW5nIHRoYXQgdGhlIGRlZmVuZGFudCBoYXMgc3VwcGxpZWQgeW91IHdpdGggZnVuZHMgaW4KICAgICAgICAgICAgICAgICAgICBleGNlc3Mgb2YgdGhlIHdob2xlIGFtb3VudCB0aGF0IGhlIG9yIGFueWJvZHkgZWxzZSBwb3NzZXNzZXM7IGJ1dCBQaG9ybWlvIGhhcwogICAgICAgICAgICAgICAgICAgIGNyZWRpdCB3aXRoIHRob3NlIHdobyBrbm93IGhpbSBmb3Igc28gZ3JlYXQgYW4gYW1vdW50IGFuZCBmb3IgZmFyIGxhcmdlciBzdW1zLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aHJvdWdoIHRoaXMgaGUgaXMgb2Ygc2VydmljZSBib3RoIHRvIGhpbXNlbGYgYW5kIHRvIHlvdS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SSBmb2xsb3cgU2FuZHlzIGluIHRoZSBpbnRlcnByZXRhdGlvbiBvZiB0aGlzIHBhc3NhZ2UuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QgdGhyb3cgdGhpcyBhd2F5LCBub3Igc3VmZmVyIHRoaXMKICAgICAgICAgICAgICAgICAgICBhYm9taW5hYmxlIGZlbGxvdyB0byBkZXN0cm95IGl0OyBkbyBub3QgZXN0YWJsaXNoIGEgc2hhbWVmdWwgcHJlY2VkZW50LCB0aGF0IGl0CiAgICAgICAgICAgICAgICAgICAgaXMgcGVybWl0dGVkIGJ5IHlvdSB0aGF0IHJhc2NhbHMgYW5kIHN5Y29waGFudHMgc2hvdWxkIHRha2UgdGhlIHByb3BlcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGFyZSBhY3RpdmUgaW4gYnVzaW5lc3MgYW5kIHdobyBsZWFkIHdlbGwtb3JkZXJlZCBsaXZlcy4gRmFyIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2UgYWNjcnVlcyB0byB5b3UgZnJvbSB0aGlzIHdlYWx0aCB3aGlsZSBpdCByZW1haW5zIGluIHRoZSBwb3NzZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudC4gRm9yIHlvdSBzZWUgZm9yIHlvdXJzZWx2ZXMsIGFuZCB5b3UgaGVhciBmcm9tIHRoZSB3aXRuZXNzZXMsIHdoYXQKICAgICAgICAgICAgICAgICAgICBhIGZyaWVuZCBoZSBzaG93cyBoaW1zZWxmIHRvIGJlIHRvIHRob3NlIGluIG5lZWQuIDwvdHJhbnNsYXRpb24+"
translation['36.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm90IG9uZSBvZiB0aGVzZSBhY3RzIGhhcyBoZSBkb25lIHdpdGggYSB2aWV3IHRvCiAgICAgICAgICAgICAgICAgICAgcGVjdW5pYXJ5IGFkdmFudGFnZSwgYnV0IGZyb20gZ2VuZXJvc2l0eSBhbmQga2luZGxpbmVzcyBvZiBkaXNwb3NpdGlvbi4gU28gaXQgaXMKICAgICAgICAgICAgICAgICAgICBub3QgcmlnaHQsIG1lbiBvZiBBdGhlbnMsIHRoYXQgeW91IHNob3VsZCBnaXZlIHVwIHN1Y2ggYSBtYW4gdG8gYmUgdGhlIHByZXkgb2YKICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cy4gRG8gbm90IHNob3cgUGhvcm1pbyBwaXR5IGF0IGEgdGltZSB3aGVuIGl0IHdpbGwgYmUgb2Ygbm8gcHJvZml0IHRvCiAgICAgICAgICAgICAgICAgICAgaGltLCBidXQgbm93IHdoZW4gaXQgaXMgaW4geW91ciBwb3dlciB0byBzYXZlIGhpbTsgZm9yIEkgc2VlIG5vIHRpbWUgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBvbmUgY291bGQgbW9yZSBmaXR0aW5nbHkgY29tZSB0byBoaXMgYWlkIHRoYW4gbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['36.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3N0IG9mIHdoYXQgQXBvbGxvZG9ydXMgd2lsbCBzYXkgeW91IG11c3QgcmVnYXJkIGFzIG1lcmUKICAgICAgICAgICAgICAgICAgICB0YWxrIGFuZCBiYXNlbGVzcyBjYWx1bW55LiBCaWQgaGltIGRlbW9uc3RyYXRlIHRvIHlvdSwgZWl0aGVyIHRoYXQgaGlzIGZhdGhlcgogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgbWFrZSB0aGlzIHdpbGwsIG9yIHRoYXQgdGhlcmUgaXMgYW5vdGhlciBsZWFzZSB0aGFuIHRoZSBvbmUgd2hpY2ggd2UKICAgICAgICAgICAgICAgICAgICBwcm9kdWNlOyBvciB0aGF0IGhlIGhpbXNlbGYgYWZ0ZXIgZ29pbmcgb3ZlciB0aGUgcmVja29uaW5nIGRpZCBub3QgZ2l2ZSBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgYSByZWxlYXNlIGZyb20gYWxsIHRoZSBjbGFpbXMgcmVnYXJkaW5nIHdoaWNoIGhpcyBmYXRoZXItaW4tbGF3IG1hZGUgdGhlIGF3YXJkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgcGxhaW50aWZmJ3Mgb3duIGNvbmN1cnJlbmNlOyBvciB0aGF0IHRoZSBsYXdzIHBlcm1pdCBvbmUgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gcmVnYXJkaW5nIG1hdHRlcnMgdGh1cyBkZWNpZGVkLiBPciBiaWQgaGltIHRyeSB0byBzaG93IGFueXRoaW5nIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb3J0LiA8L3RyYW5zbGF0aW9uPg=="
translation['36.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYsIGZvciB3YW50IG9mIHByb29mcywgaGUgZ29lcyBvbgogICAgICAgICAgICAgICAgICAgIHV0dGVyaW5nIGNoYXJnZXMgYW5kIGNhbHVtbmllcyBhbmQgYWJ1c2UsIGRvIG5vdCBoZWVkIGhpbSwgbm9yIGxldCBoaXMgbm9pc3kKICAgICAgICAgICAgICAgICAgICB0YWxrIGFuZCBzaGFtZWxlc3NuZXNzIGxlYWQgeW91IGFzdHJheS4gTmF5LCBrZWVwIGluIG1pbmQsIGFuZCByZW1lbWJlciBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIGhlYXJkLiBJZiB5b3UgZG8gdGhpcyB5b3Ugd2lsbCBiZSBmYWl0aGZ1bCB0byB5b3VyIG9hdGhzLCBhbmQgd2lsbCBzYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCwgYXMganVzdGljZSBiaWRzLiBCeSBaZXVzIGFuZCBhbGwgdGhlIGdvZHMgaGUgZGVzZXJ2ZXMgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.62'] = ""
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbmFzbXVjaCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzLCBtZW4gb2YgdGhlIGp1cnksIGhhdmUgZ3JhbnRlZCB0aGF0IGEgc3BlY2lhbCBwbGVhIGJlIGVudGVyZWQgaW4gY2FzZXMKICAgICAgICAgICAgICAgICAgICB3aGVyZSBhIG1hbiwgYWZ0ZXIgaGF2aW5nIGdpdmVuIGEgcmVsZWFzZSBhbmQgZGlzY2hhcmdlLCBuZXZlcnRoZWxlc3MgYnJpbmdzCiAgICAgICAgICAgICAgICAgICAgc3VpdCwgYW5kIGFzIGJvdGggb2YgdGhlc2UgaGF2ZSBiZWVuIGdpdmVuIG1lIGJ5IFBhbnRhZW5ldHVzIGhlcmUsIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHBsZWFkZWQsIGFzIHlvdSBoYXZlIGp1c3Qgbm93IGhlYXJkLCB0aGF0IGhpcyBzdWl0IGlzIG5vdCBhZG1pc3NpYmxlLiBJIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluayB0aGF0IEkgc2hvdWxkIGZvcmdvIHRoaXMgcmlnaHQsIG9yIHRoYXQsIGFmdGVyIEkgaGFkIHByb3ZlZCBhbW9uZyBvdGhlcgogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIHJlbGVhc2VkIG1lLCBhbmQgdGhhdCBJIGhhZCBnb3QgcmlkIG9mIGhpbSwgaXQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgb3BlbiB0byBoaW0gdG8gZGVjbGFyZSB0aGF0IEkgd2FzIHV0dGVyaW5nIGEgZmFsc2Vob29kIGFuZCB0byB0cnkgdG8KICAgICAgICAgICAgICAgICAgICBlbXBsb3kgdGhlIGFyZ3VtZW50IHRoYXQsIGlmIGFueSBzdWNoIHJlbGVhc2UgaGFkIGJlZW4gZ3JhbnRlZCBtZSwgSSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHB1dCBpbiBhIHNwZWNpYWwgcGxlYSB0byBiYXIgaGlzIHN1aXQuIE5vLCBJIGRldGVybWluZWQgdG8gY29tZSBiZWZvcmUgeW91CiAgICAgICAgICAgICAgICAgICAgcmVseWluZyBvbiB0aGlzIHBsZWEgYW5kIHRvIHByb3ZlIGJvdGggcG9pbnRz4oCUdGhhdCBJIGhhdmUgbmV2ZXIgZG9uZQogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFpbnRpZmYgYW55IHdyb25nLCBhbmQgdGhhdCBoZSBpcyBzdWluZyBtZSBjb250cmFyeSB0byBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmIFBhbnRhZW5ldHVzIGhhZCBzdWZmZXJlZCBhbnkgb2YgdGhlIHdyb25ncyB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgbm93IGNoYXJnZXMgbWUsIGhlIHdvdWxkIGJlIGZvdW5kIHRvIGhhdmUgYnJvdWdodCBzdWl0IGFnYWluc3QgbWUgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgdGltZSB3aGVuIHRoZSBjb250cmFjdCBiZXR3ZWVuIHVzIHdhcyBtYWRlLCBmb3IgdGhlc2UgYWN0aW9ucyBtdXN0IGJlCiAgICAgICAgICAgICAgICAgICAgZGVjaWRlZCB3aXRoaW4gdGhlIG1vbnRoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCB3aXRoaW4gYQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCBmcm9tIHRoZSB0aW1lIG9mIGZpbGluZyB0aGUgc3VpdDsg4oCcdGhlIG9iamVjdCBiZWluZyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtaW5lLXByb3ByaWV0ZXIgbWlnaHQgbm90IGJlIHRvbyBsb25nIGRldGFpbmVkIGZyb20gaGlzIGJ1c2luZXNzLuKAnQogICAgICAgICAgICAgICAgICAgICAgICDvvIhCb2Vja2gsIHF1b3RlZCBieSBTYW5keXPvvIkuPC9ub3RlPiBhbmQgYm90aCBFdmVyZ3VzIGFuZCBJCiAgICAgICAgICAgICAgICAgICAgd2VyZSBpbiB0b3duOyBzaW5jZSBhbGwgbWVuIGFyZSB3b250IHRvIGJlIG1vc3QgaW5kaWduYW50IGF0IHRoZSB2ZXJ5IHRpbWUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciB3cm9uZ3MsIGFuZCBub3QgYWZ0ZXIgYSBwZXJpb2QgaGFzIGludGVydmVuZWQuIFNpbmNlLCBob3dldmVyLCB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYsIHRob3VnaCBoZSBoYXMgc3VmZmVyZWQgbm8gd3JvbmcsIGFzIEkga25vdyB3ZWxsIHlvdSB3aWxsIHlvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICBhZ3JlZSB3aGVuIHlvdSBoYXZlIGhlYXJkIHRoZSBmYWN0cywgZWxhdGVkIGJ5IHRoZSBzdWNjZXNzIG9mIGhpcyBzdWl0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgRXZlcmd1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXZlcmd1cyBhbmQgTmljb2J1bHVzLCBhcyBzdGF0ZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEludHJvZHVjdGlvbiwgaGFkIGxlYXNlZCB0aGUgbWluaW5nIHByb3BlcnR5IHRvIFBhbnRhZW5ldHVzLiBBcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGVzc2VlIGZhaWxlZCB0byBwYXkgdGhlIGludGVyZXN0LCBFdmVyZ3VzLCBpbiB0aGUgYWJzZW5jZSBvZiBOaWNvYnVsdXMsIHdobwogICAgICAgICAgICAgICAgICAgICAgICBoYWQgZ29uZSBhYnJvYWQsIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgcHJvcGVydHkgYW5kIGV2ZW4gc2VpemVkIHNvbWUgc2lsdmVyCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIGEgc2xhdmUgb2YgUGFudGFlbmV0dXMgd2FzIGJyaW5naW5nIHRvIGhpcyBtYXN0ZXIgdGhhdCBoZSBtaWdodCBtYWtlIGEKICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudCBkdWUgdG8gdGhlIHN0YXRlLiBCZWNhdXNlIG9mIHRoaXMgUGFudGFlbmV0dXMgYmVjYW1lIGEgZGVidG9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSBhbmQgd2FzIHJlcXVpcmVkIHRvIHBheSBkb3VibGUgdGhlIGFtb3VudCBkdWUuIEhlIHRoZW4gc3VlZCBFdmVyZ3VzLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgd29uIGEgdmVyZGljdCBvZiB0d28gdGFsZW50cyBkYW1hZ2VzLjwvbm90ZT4gYnJpbmdzIGEgbWFsaWNpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGJhc2VsZXNzIGFjdGlvbiwgdGhlcmUgaXMgbm8gb3RoZXIgY291cnNlIGxlZnQgbWUsIG1lbiBvZiB0aGUganVyeSwgdGhhbiB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlIGluIHlvdXIgY291cnQgdGhhdCBJIGFtIGd1aWx0eSBvZiBubyB3cm9uZyB3aGF0ZXZlciwgdG8gcHJvZHVjZSB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICBpbiBzdXBwb3J0IG9mIHdoYXQgSSBzYXksIGFuZCB0byBlbmRlYXZvciB0byBzYXZlIG15c2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgbWFrZSBhIHJlYXNvbmFibGUgYW5kIGZhaXIgcmVxdWVzdCBvZiB5b3UgYWxsLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGhlYXIgd2l0aCBnb29kd2lsbCB3aGF0IEkgaGF2ZSB0byBzYXkgcmVnYXJkaW5nIG15IHNwZWNpYWwgcGxlYSwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgZ2l2ZSB5b3VyIGF0dGVudGlvbiB0byBldmVyeSBhc3BlY3Qgb2YgdGhlIGNhc2UuIEZvciwgd2hpbGUgaG9zdHMgb2YgY2FzZXMKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gdHJpZWQgaW4gQXRoZW5zLCBJIHRoaW5rIGl0IHdpbGwgYmUgc2hvd24gdGhhdCBubyBtYW4gaGFzIGV2ZXIgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3Ugb25lIHNvIG1hcmtlZCBieSBzaGFtZWxlc3NuZXNzIGFuZCBtYWxpY2UgYXMgdGhpcywgd2hpY2ggdGhpcyBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBoYXMgaGFkIHRoZSBhdWRhY2l0eSB0byBicmluZyBpbnRvIHlvdXIgY291cnQuIEkgc2hhbGwgd2l0aCBhbGwgcG9zc2libGUgYnJldml0eQogICAgICAgICAgICAgICAgICAgIHNldCBiZWZvcmUgeW91IGFsbCB0aGUgZmFjdHMgb2YgdGhlIGNhc2UuIDwvdHJhbnNsYXRpb24+"
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FdmVyZ3VzIGFuZCBJLCBtZW4gb2YgdGhlIGp1cnksIGxlbnQgdG8KICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbiBQYW50YWVuZXR1cyBvbmUgaHVuZHJlZCBhbmQgZml2ZSBtaW5hZSBvbiB0aGUgc2VjdXJpdHkgb2YgYSBtaW5pbmcKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBpbiBNYXJvbmVpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5NYXJvbmVpYSB3YXMgYSBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdCBpbiB0aGUgbWluaW5nIGFyZWEgb2YgTGF1cml1bSBpbiBBdHRpY2EuPC9ub3RlPiBhbmQgb2YgdGhpcnR5CiAgICAgICAgICAgICAgICAgICAgc2xhdmVzLiBPZiB0aGlzIGxvYW4gZm9ydHktZml2ZSBtaW5hZSBiZWxvbmdlZCB0byBtZSwgYW5kIGEgdGFsZW50IHRvIEV2ZXJndXMuCiAgICAgICAgICAgICAgICAgICAgSXQgaGFwcGVuZWQgdGhhdCB0aGUgcGxhaW50aWZmIGFsc28gb3dlZCBhIHRhbGVudCB0byBNbmVzaWNsZXMgb2YgQ29sbHl0dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q29sbHl0dXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQWVnZcOvcy48L25vdGU+IGFuZCBmb3J0eS1maXZlIG1pbmFlIHRvIFBoaWxlYXMgb2YgRWxldXNpcyBhbmQKICAgICAgICAgICAgICAgICAgICBQbGVpc3Rvci4gPC90cmFuc2xhdGlvbj4="
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB2ZW5kb3IgdG8gdXMgb2YgdGhlIG1pbmluZwogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGFuZCB0aGUgc2xhdmVzIHdhcyBNbmVzaWNsZXMsIGZvciBoZSBoYWQgcHVyY2hhc2VkIHRoZW0gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiBmcm9tIFRlbGVtYWNodXMsIHRoZSBmb3JtZXIgb3duZXI7IGFuZCB0aGUgcGxhaW50aWZmIGxlYXNlZCB0aGVtIGZyb20KICAgICAgICAgICAgICAgICAgICB1cyBhdCBhIHJlbnQgZXF1YWwgdG8gdGhlIGludGVyZXN0IGFjY3J1aW5nIG9uIHRoZSBtb25leSwgYSBodW5kcmVkIGFuZCBmaXZlCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUgYSBtb250aC4gV2UgZHJldyB1cCBhbiBhZ3JlZW1lbnQgaW4gd2hpY2ggdGhlIHRlcm1zIG9mIHRoZSBsZWFzZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVkLCBhbmQgdGhlIHJpZ2h0IHdhcyBnaXZlbiB0aGUgcGxhaW50aWZmIG9mIHJlZGVlbWluZyB0aGVzZSB0aGluZ3MgZnJvbSB1cwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiBhIGdpdmVuIHRpbWUuIDwvdHJhbnNsYXRpb24+"
translation['37.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2UgdHJhbnNhY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gY29tcGxldGVkIGluIHRoZSBtb250aCBvZiBFbGFwaGVib2xpb24gaW4gdGhlIGFyY2hvbnNoaXAgb2YKICAgICAgICAgICAgICAgICAgICAgICAgVGhlb3BoaWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaW4gTWFyY2ggPGRhdGUgYXV0aG5hbWU9Ii0zNDciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNDciPjM0NzwvZGF0ZT4gQi5DLjwvbm90ZT4gSSBhdCBvbmNlIHNhaWxlZCBhd2F5IGZvciBQb250dXMsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBwbGFpbnRpZmYgYW5kIEV2ZXJndXMgcmVtYWluZWQgaGVyZS4gV2hhdCB0cmFuc2FjdGlvbnMgdGhleSBoYWQgd2l0aCBvbmUKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHdoaWxlIEkgd2FzIGF3YXksIEkgY2Fubm90IHN0YXRlLCBmb3IgdGhleSBkbyBub3QgdGVsbCB0aGUgc2FtZSBzdG9yeSwKICAgICAgICAgICAgICAgICAgICBub3IgaXMgdGhlIHBsYWludGlmZiBhbHdheXMgY29uc2lzdGVudCB3aXRoIGhpbXNlbGY7IHNvbWV0aW1lcyBoZSBzYXlzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgZm9yY2libHkgb3VzdGVkIGZyb20gaGlzIGxlYXNlaG9sZCBieSBFdmVyZ3VzIGluIHZpb2xhdGlvbiBvZiB0aGUgYWdyZWVtZW50OwogICAgICAgICAgICAgICAgICAgIHNvbWV0aW1lcyB0aGF0IEV2ZXJndXMgd2FzIHRoZSBjYXVzZSBvZiBoaXMgYmVpbmcgaW5zY3JpYmVkIGFzIGEgZGVidG9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTs8ZGF0ZSBhdXRobmFtZT0iLTM0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM0NyI+MzQ3PC9kYXRlPiBCLkMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzcuMjwvYmlibD4gYW5kIHRoZSBJbnRyb2R1Y3Rpb24uPC9ub3RlPiBzb21ldGltZXMgYW55dGhpbmcgZWxzZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgY2hvb3NlcyB0byBzYXkuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzcuMjwvYmlibD4gYW5kIHRoZSBJbnRyb2R1Y3Rpb24uPC90cmFuc2xhdGlvbj4="
translation['37.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdmVyZ3VzIHRlbGxzIGEgcGxhaW4gYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdGVudCBzdG9yeSwgdGhhdCBzaW5jZSBoZSB3YXMgbm90IHJlY2VpdmluZyBoaXMgaW50ZXJlc3QsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgd2FzIG5vdCBwZXJmb3JtaW5nIGFueSBvZiB0aGUgb3RoZXIgdGhpbmdzIHN0aXB1bGF0ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50LCBoZSB3ZW50IGFuZCB0b29rIGZyb20gdGhlIHBsYWludGlmZiwgd2l0aCB0aGUgbGF0dGVyJ3MgY29uc2VudCwgd2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyBoaXMgb3duLCBhbmQga2VwdCBpdDsgdGhhdCBhZnRlciB0aGlzIHRoZSBwbGFpbnRpZmYgd2VudCBhd2F5LCBidXQgY2FtZSBiYWNrCiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgbWVuIHRvIG1ha2UgY2xhaW0gdG8gdGhlIHByb3BlcnR5OyB0aGF0IGhlIG9uIGhpcyBvd24gcGFydCBkaWQgbm90IGdpdmUKICAgICAgICAgICAgICAgICAgICB3YXkgaW4gdGhlaXIgZmF2b3VyLCBidXQgbWFkZSBubyBvYmplY3Rpb24gdG8gdGhlIHBsYWludGlmZidzIGhvbGRpbmcgdGhhdCBmb3IKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgZ2l2ZW4gYSBsZWFzZSwgcHJvdmlkZWQgaGUgc2hvdWxkIG9ic2VydmUgdGhlIHRlcm1zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudC4gRnJvbSB0aGVzZSBtZW4sIHRoZW4sIEkgaGVhciBzdG9yaWVzIG9mIHRoaXMgc29ydC4gPC90cmFuc2xhdGlvbj4="
translation['37.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIEkga25vdyB3ZWxsLCB0aGF0LCBpZiB0aGUgcGxhaW50aWZmIHNwZWFrcwogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCwgYW5kIGhhcyBiZWVuIG91dHJhZ2VvdXNseSB0cmVhdGVkLCBhcyBoZSBzYXlzLCBieSBFdmVyZ3VzLCBoZSBoYXMgaGFkCiAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0aW9uIHRvIHRoZSBhbW91bnQgYXQgd2hpY2ggaGUgaGltc2VsZiBhc3Nlc3NlZCBoaXMgZGFtYWdlczsgZm9yIGhlIGNhbWUKICAgICAgICAgICAgICAgICAgICBpbnRvIHlvdXIgY291cnQgYW5kIHdvbiBoaXMgc3VpdCBhZ2FpbnN0IGhpbTsgYW5kIHN1cmVseSBoZSBoYXMgbm8gcmlnaHQgdG8KICAgICAgICAgICAgICAgICAgICBvYnRhaW4gZGFtYWdlcyBmb3IgdGhlIHNhbWUgd3JvbmdzIGJvdGggZnJvbSB0aGUgb25lIHdobyBjb21taXR0ZWQgdGhlbSBhbmQgZnJvbQogICAgICAgICAgICAgICAgICAgIG1lLCB3aG8gd2FzIG5vdCBldmVuIGluIEF0aGVucy4gQnV0LCBpZiBpdCBpcyBFdmVyZ3VzIHdobyBzcGVha3MgdGhlIHRydXRoLCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIG1hZGUgdGhlIG9iamVjdCwgaXQgYXBwZWFycywgb2YgYSBiYXNlbGVzcyBhbmQgbWFsaWNpb3VzIGNoYXJnZTsgYnV0CiAgICAgICAgICAgICAgICAgICAgZXZlbiBzbyB0aGVyZSBpcyBubyBncm91bmQgZm9yIG15IGJlaW5nIHN1ZWQgb24gdGhlIHNhbWUgY2hhcmdlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggaW4gdGhpcywgSSBzaGFsbCBicmluZyBiZWZvcmUgeW91IHRoZSB3aXRuZXNzZXMgdG8gZXN0YWJsaXNoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0LCB0aGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbiB3aG8gc29sZCB1cyB0aGUgcHJvcGVydHkgd2FzIHRoZSBtYW4gd2hvIGhhZCBiZWVuIHRoZSBvcmlnaW5hbAogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlcjsgdGhhdCB1bmRlciB0aGUgYWdyZWVtZW50IHRoZSBwbGFpbnRpZmYgcmVudGVkIHRoZSBtaW5pbmcKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2htZW50IGFuZCB0aGUgc2xhdmVzLCByZWNvZ25pemluZyB0aGVtIGFzIGJlbG9uZ2luZyB0byB1czsgdGhhdCBJIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBwcmVzZW50IGF0IHRoZSB0cmFuc2FjdGlvbnMgd2hpY2ggc3Vic2VxdWVudGx5IHRvb2sgcGxhY2UgYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgYW5kIEV2ZXJndXMsIGFuZCBpbmRlZWQgd2FzIG5vdCBldmVuIGluIEF0aGVuczsgdGhhdCBoZSBicm91Z2h0IHN1aXQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IEV2ZXJndXMsIGFuZCBuZXZlciBtYWRlIGFueSBjaGFyZ2UgYWdhaW5zdCBtZSzigJRhbGwgdGhpcywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHlvdSBoZWFyIGZyb20gdGhlIHdpdG5lc3Nlcy4gPC90cmFuc2xhdGlvbj4="
translation['37.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB3aGVuIEkgY2FtZSBiYWNrLCBoYXZpbmcgbG9zdCBwcmFjdGljYWxseSBldmVyeXRoaW5nIEkgaGFkIHdoZW4gSQogICAgICAgICAgICAgICAgICAgIHNhaWxlZCwgSSBoZWFyZCwgYW5kIGZvdW5kIGl0IHdhcyB0cnVlLCB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIGdpdmVuIHVwIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGFuZCB0aGF0IEV2ZXJndXMgd2FzIGluIHBvc3Nlc3Npb24gYW5kIGNvbnRyb2wgb2Ygd2hhdCB3ZSBoYWQKICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZWQuIEkgd2FzIGRpc3RyZXNzZWQgYmV5b25kIHdvcmRzLCBzZWVpbmcgdGhhdCB0aGUgbWF0dGVyIGhhZCBnb3QgaW50byBhbgogICAgICAgICAgICAgICAgICAgIGF3a3dhcmQgcHJlZGljYW1lbnQ7IGZvciBpdCB3YXMgbm93IG5lY2Vzc2FyeSBmb3IgbWUgZWl0aGVyIHRvIGVudGVyIGludG8KICAgICAgICAgICAgICAgICAgICBwYXJ0bmVyc2hpcCB3aXRoIEV2ZXJndXMgZm9yIHRoZSB3b3JraW5nIGFuZCBtYW5hZ2VtZW50IG9mIHRoZSBwcm9wZXJ0eSwgb3IgaGF2ZQogICAgICAgICAgICAgICAgICAgIGhpbSBmb3IgYSBkZWJ0b3IgaW5zdGVhZCBvZiBQYW50YWVuZXR1cywgYW5kIGRyYXcgdXAgYSBuZXcgbGVhc2UgYW5kIGVudGVyIGludG8KICAgICAgICAgICAgICAgICAgICBhIGNvbnRyYWN0IHdpdGggaGltOyBhbmQgSSBsaWtlZCBuZWl0aGVyIG9mIHRoZXNlIGFsdGVybmF0aXZlcy4gPC90cmFuc2xhdGlvbj4="
translation['37.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5CZWluZyB2ZXhlZCBhdCB0aGUgbWF0dGVycyBvZiB3aGljaCBJIGFtIHRlbGxpbmcgeW91LAogICAgICAgICAgICAgICAgICAgIGFuZCBoYXBwZW5pbmcgdG8gc2VlIE1uZXNpY2xlcywgd2hvIGhhZCBzb2xkIHVzIHRoZSBwcm9wZXJ0eSwgSSBjYW1lIHVwIHRvIGhpbSwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVwcm9hY2hlZCBoaW0sIHRlbGxpbmcgd2hhdCBzb3J0IG9mIGEgbWFuIGhlIGhhZCByZWNvbW1lbmRlZCB0byBtZSwgYW5kIEkKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbmVkIGhpbSByZWdhcmRpbmcgdGhlIGNsYWltYW50cywgYXNraW5nIHdoYXQgdGhpcyB3YXMgYWxsIGFib3V0LiBPbgogICAgICAgICAgICAgICAgICAgIGhlYXJpbmcgdGhpcywgaGUgbGF1Z2hlZCBhdCB0aGUgY2xhaW1hbnRzLCBidXQgc3RhdGVkIHRoYXQgdGhleSB3aXNoZWQgdG8gaGF2ZSBhCiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZSB3aXRoIHVzLiBIZSBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIGJyaW5nIHVzIHRvZ2V0aGVyLCBhbmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHVyZ2UgdGhlIHBsYWludGlmZiB0byBkbyBhbGwgdGhhdCB3YXMgcmlnaHQgaW4gbXkgcmVnYXJkLCBhbmQgaGUgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIHBlcnN1YWRlIGhpbSB0byBkbyBzby4gPC90cmFuc2xhdGlvbj4="
translation['37.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHdlIGhhZAogICAgICAgICAgICAgICAgICAgIG91ciBtZWV0aW5n4oCUd2hhdCBuZWVkIGlzIHRoZXJlIHRvIHRlbGwgeW91IGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXRhaWxzP+KAlHRoZSBtZW4gY2FtZSB3aG8gY2xhaW1lZCB0byBoYXZlIG1hZGUgbG9hbnMgdG8gdGhlIHBsYWludGlmZgogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBzZWN1cml0eSBvZiB0aGUgbWluaW5nIHByb3BlcnR5IGFuZCB0aGUgc2xhdmVzLCB3aGljaCB3ZSBib3VnaHQgZnJvbQogICAgICAgICAgICAgICAgICAgIE1uZXNpY2xlczsgYW5kIHRoZXJlIHdhcyBub3RoaW5nIHN0cmFpZ2h0Zm9yd2FyZCBvciBob25lc3QgYWJvdXQgdGhlbS4gVGhlbiwKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgd2VyZSBjb252aWN0ZWQgb2YgZmFsc2Vob29kIGluIGFsbCB0aGVpciBzdGF0ZW1lbnRzIGFuZCBNbmVzaWNsZXMKICAgICAgICAgICAgICAgICAgICBjb25maXJtZWQgb3VyIGhhdmluZyBib3VnaHQgdGhlIHByb3BlcnR5LCB0aGV5IG9mZmVyZWQgdXMgYSBjaGFsbGVuZ2UsIGFzc3VtaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3ZSBzaG91bGQgbm90IGFjY2VwdCBpdCwgZWl0aGVyIHRvIHRha2UgYWxsIG91ciBtb25leSBmcm9tIHRoZW0gYW5kCiAgICAgICAgICAgICAgICAgICAgd2l0aGRyYXcsIG9yIHRvIHNldHRsZSB3aXRoIHRoZW0gYnkgcGF5aW5nIHRoZWlyIGNsYWltczsgZm9yIHRoZSBzZWN1cml0eSB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlIGhlbGQgd2FzLCB0aGV5IGNsYWltZWQsIHdvcnRoIGZhciBtb3JlIHRoYW4gdGhlIHN1bXMgd2UgaGFkIGxlbnQuIDwvdHJhbnNsYXRpb24+"
translation['37.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgaGVhcmQgdGhpcywgb24gdGhlIHNwdXIgb2YgdGhlIG1vbWVudCBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGV2ZW4gdGFraW5nIHRob3VnaHQsIEkgYWdyZWVkIHRvIHRha2UgbXkgbW9uZXksIGFuZCBJIHBlcnN1YWRlZCBFdmVyZ3VzCiAgICAgICAgICAgICAgICAgICAgdG8gYWRvcHQgdGhlIHNhbWUgY291cnNlLiBCdXQgd2hlbiB0aGUgdGltZSBjYW1lIGZvciB1cyB0byByZWNlaXZlIG91ciBtb25leSwKICAgICAgICAgICAgICAgICAgICB0aGUgbWF0dGVyIGhhdmluZyBiZWVuIGJyb3VnaHQgdG8gdGhpcyBjb25jbHVzaW9uLCB0aGUgcGVvcGxlIHdobyBoYWQgcHJldmlvdXNseQogICAgICAgICAgICAgICAgICAgIG1hZGUgdGhlIG9mZmVyIGRlY2xhcmVkIHRoZW4gdGhhdCB0aGV5IHdvdWxkIG5vdCBwYXkgdXMgdW5sZXNzIHdlIGJlY2FtZSB2ZW5kb3JzCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlbSBvZiB0aGUgcHJvcGVydHksIGFuZCBpbiB0aGlzIHBvaW50IGFueXdheSwgbWVuIG9mIEF0aGVucywgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJ1ZGVudDsgZm9yIHRoZXkgc2F3IGluIHdoYXQgYmFzZWxlc3MgYW5kIG1hbGljaW91cyBjaGFyZ2VzIHdlIHdlcmUgaW52b2x2ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGlzIGZlbGxvdy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aAogICAgICAgICAgICAgICAgICAgIGluIHRoaXMsIHRha2UsIHBsZWFzZSwgdGhlc2UgZGVwb3NpdGlvbnMgYWxzby48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGUgbWF0dGVyCiAgICAgICAgICAgICAgICAgICAgc3Rvb2QgdGh1cywgYW5kIHRoZSBwZW9wbGUgd2hvbSB0aGUgcGxhaW50aWZmIGhhZCBpbnRyb2R1Y2VkIHRvIHVzIHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGdpdmUgdXAgdGhlIG1vbmV5LCBhbmQgaXQgd2FzIGNsZWFyIHRoYXQgd2Ugd2VyZSByaWdodGZ1bGx5IGluIHBvc3Nlc3Npb24gb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHdlIGhhZCBwdXJjaGFzZWQsIGhlIGJlZ2dlZCwgYW5kIGltcGxvcmVkLCBhbmQgYmVzb3VnaHQgdXMgdG8gc2VsbCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS4gQXMgaGUgbWFkZSB0aGlzIGRlbWFuZCBhbmQgYmVnZ2VkIG1lIG1vc3QgZWFybmVzdGx54oCUdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIGhlIGRpZCBub3QgZG/igJRJIGdhdmUgd2F5IGluIHRoaXMgbWF0dGVyIGFsc28uIDwvdHJhbnNsYXRpb24+"
translation['37.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5JIHNhdywgaG93ZXZlciwgbWVuIG9mIEF0aGVucywgdGhhdCBoZSB3YXMgYSBtYW4gb2YKICAgICAgICAgICAgICAgICAgICBldmlsIGRpc3Bvc2l0aW9uLCB0aGF0IGF0IHRoZSBvdXRzZXQgaGUgaGFkIG1hZGUgY2hhcmdlcyB0byB1cyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgTW5lc2ljbGVzLCBhbmQgdGhlbiBoYWQgcXVhcnJlbGxlZCB3aXRoIEV2ZXJndXMsIHdpdGggd2hvbSBoZSB3YXMgb24gdGVybXMgb2YKICAgICAgICAgICAgICAgICAgICBjbG9zZXN0IGZyaWVuZHNoaXA7IHRoYXQgYXQgdGhlIGZpcnN0LCB3aGVuIEkgcmV0dXJuZWQgZnJvbSBteSB2b3lhZ2UsIGhlCiAgICAgICAgICAgICAgICAgICAgcHJldGVuZGVkIHRoYXQgaGUgd2FzIGdsYWQgdG8gc2VlIG1lLCBidXQgd2hlbiB0aGUgdGltZSBjYW1lIGZvciBoaW0gdG8gZG8gd2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyByaWdodCwgaGUgYmVjYW1lIHN1cmx5IHdpdGggbWU7IHRoYXQgaGUgd2FzIGEgZnJpZW5kIHRvIGFsbCBtZW4gdW50aWwgaGUgZ290CiAgICAgICAgICAgICAgICAgICAgc29tZSBhZHZhbnRhZ2UgYW5kIGF0dGFpbmVkIHdoYXQgaGUgd2FudGVkLCBhbmQgdGhlcmVhZnRlciBiZWNhbWUgdGhlaXIgZm9lIGFuZAogICAgICAgICAgICAgICAgICAgIHdhcyBhdCB2YXJpYW5jZSB3aXRoIHRoZW07IDwvdHJhbnNsYXRpb24+"
translation['37.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoZXJlZm9yZSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgaXQgYmVzdCwgaWYgSSB3aXRoZHJldyBhbmQgYXNzdW1lZCB0aGUgcG9zaXRpb24gb2YgdmVuZG9yIGluIHRoaXMgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdCwgdGhhdCBJIHNob3VsZCBvYnRhaW4gYSBmdWxsIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSBmcm9tIGFsbCBjbGFpbXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRodXMgbWFrZSBhIGZpbmFsIHNldHRsZW1lbnQgd2l0aCBoaW0uIFRoaXMgd2FzIGFncmVlZCB0bywgYW5kIGhlIGdhdmUgbWUgYQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgaW4gZnVsbCwgd2hpbGUgSSwgYXMgaGUgYmVnZ2VkIG1lIHRvIGRvLCBhc3N1bWVkIHRoZSBwb3NpdGlvbiBvZiB2ZW5kb3IKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcHJvcGVydHksIGV4YWN0bHkgYXMgSSBoYWQgbXlzZWxmIGJvdWdodCBpdCBmcm9tIE1uZXNpY2xlcy4gSGF2aW5nLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZCBteSBtb25leSwgYW5kIGhhdmluZyBkb25lIHRoZSBwbGFpbnRpZmYgbm8gd3Jvbmcgd2hhdHNvZXZlciwgSQogICAgICAgICAgICAgICAgICAgIGltYWdpbmVkLCBieSB0aGUgZ29kcywgdGhhdCwgbm8gbWF0dGVyIHdoYXQgc2hvdWxkIGhhcHBlbiwgaGUgd291bGQgbmV2ZXIgYnJpbmcKICAgICAgICAgICAgICAgICAgICBhIHN1aXQgYWdhaW5zdCBtZS4gPC90cmFuc2xhdGlvbj4="
translation['37.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UsIG1lbiBvZiB0aGUganVyeSwgYXJlIHRoZSBmYWN0cyByZWdhcmRpbmcgd2hpY2ggeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHRvIGNhc3QgeW91ciB2b3RlcywgdGhlc2UgYXJlIHRoZSBncm91bmRzIHVwb24gd2hpY2ggSSBoYXZlIGVudGVyZWQgdGhlIHNwZWNpYWwKICAgICAgICAgICAgICAgICAgICBwbGVhIHRoYXQgdGhpcyBiYXNlbGVzcyBhbmQgbWFsaWNpb3VzIHN1aXQgaXMgbm90IG1haW50YWluYWJsZS4gSSBzaGFsbCBicmluZwogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQgd2hlbiBJIHdhcyBnaXZlbiBhIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSBieQogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFpbnRpZmYsIGFuZCBzaGFsbCB0aGVuIHByb2NlZWQgdG8gcHJvdmUgdGhhdCB1bmRlciB0aGUgbGF3IHRoZSBzdWl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IG1haW50YWluYWJsZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHJlYWQgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIHBsZWFzZSwgcmVhZCB0aGUgZGVwb3NpdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZXJzLCB0aGF0IHlvdSBtYXkgYmUgYXNzdXJlZCB0aGF0IEkgc29sZCB0aGUgcHJvcGVydHkgYXQgdGhlIGJpZGRpbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcGxhaW50aWZmIGFuZCB0byB0aGUgcGVyc29ucyB0byB3aG9tIGhlIGJhZGUgbWUgc2VsbCBpdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90IG9ubHkgaGF2ZSBJCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2l0bmVzc2VzIHRvIHByb3ZlIHRoYXQgSSBoYXZlIGJlZW4gcmVsZWFzZWQgYW5kIGFtIG5vdyB0aGUgb2JqZWN0IG9mIGEKICAgICAgICAgICAgICAgICAgICBiYXNlbGVzcyBhbmQgbWFsaWNpb3VzIGNoYXJnZSwgYnV0IFBhbnRhZW5ldHVzIGhpbXNlbGYgaXMgYSB3aXRuZXNzIGFsc28uIEZvcgogICAgICAgICAgICAgICAgICAgIHdoZW4sIGluIGJyaW5naW5nIHN1aXQgYWdhaW5zdCBFdmVyZ3VzLCBoZSBsZWZ0IG1lIG91dCBvZiB0aGUgcXVlc3Rpb24sIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBib3JlIHdpdG5lc3MgdGhhdCBoZSBoYWQgbm8gZnVydGhlciBjbGFpbSBhZ2FpbnN0IG1lLiBGb3Igc3VyZWx5LAogICAgICAgICAgICAgICAgICAgIGFzc3VtaW5nIHRoYXQgaGUgaGFkIHRoZSBzYW1lIGNoYXJnZSB0byBicmluZyBhZ2FpbnN0IGJvdGggZm9yIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgd3Jvbmdkb2luZywgaGUgd291bGQgbm90LCB3aGVuIGJvdGggd2VyZSBhdCBoYW5kLCBoYXZlIHBhc3NlZCBvdmVyIHRoZSBvbmUgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBzdWl0IGFnYWluc3QgdGhlIG90aGVyLiBIb3dldmVyLCB0aGF0IHRoZSBsYXdzIGRvIG5vdCBhbGxvdyBhIGZyZXNoIHN1aXQKICAgICAgICAgICAgICAgICAgICB0byBiZSBicm91Z2h0IHJlZ2FyZGluZyBtYXR0ZXJzIHRoYXQgaGF2ZSBiZWVuIHRodXMgc2V0dGxlZCB5b3Uga25vdywgSSBwcmVzdW1lLAogICAgICAgICAgICAgICAgICAgIGV2ZW4gd2l0aG91dCBteSB0ZWxsaW5nIHlvdS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmV2ZXJ0aGVsZXNzLCByZWFkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0aGlzIGxhdyBhbHNvLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBtZW4gb2YgQXRoZW5zLCBleHByZXNzbHkgc3RhdGluZyB0aGF0IGluIGNhc2VzIHdoZXJlIGFueW9uZSBoYXMgZ2l2ZW4gYQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSwgdGhlcmUgc2hhbGwgYmUgbm8gZnVydGhlciBhY3Rpb24uIEFuZCB0aGF0IGJvdGggdGhlc2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gZWZmZWN0ZWQgYmV0d2VlbiB0aGUgcGxhaW50aWZmIGFuZCBteXNlbGYsIHlvdSBoYXZlIGhlYXJkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzLiBPbmUgc2hvdWxkIG5vdCwgb2YgY291cnNlLCBicmluZyBzdWl0IGluIGFueSBjYXNlIHdoZW4gdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIGZvcmJpZHMgaXQsIGJ1dCBsZWFzdCBvZiBhbGwgb3VnaHQgb25lIGluIGEgY2FzZSBsaWtlIHRoaXMuIEZvciBpbiByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICBzYWxlcyBtYWRlIGJ5IHRoZSBzdGF0ZSwgb25lIG1pZ2h0IGNsYWltIHRoYXQgaXQgaGFkIG1hZGUgdGhlIHNhbGUgdW5qdXN0bHksIG9yCiAgICAgICAgICAgICAgICAgICAgaGFkIHNvbGQgd2hhdCB3YXMgbm90IGl0cyBvd247IDwvdHJhbnNsYXRpb24+"
translation['37.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW4gcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgdG8gY291cnQgZGVjaXNpb25zIGl0IG1pZ2h0IGJlIGNsYWltZWQgdGhhdCB0aGUgZGVjaXNpb24gaGFkIGJlZW4gcmVuZGVyZWQKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIGVycm9yOyBhbmQgaW4gYWxsIG90aGVyIGNhc2VzIHdoZXJlIHRoZSBsYXcgZm9yYmlkcyBhY3Rpb24gZXhjZXB0aW9uCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgcGxhdXNpYmx5IGJlIHRha2VuIHRvIGVhY2ggb25lLiBCdXQgd2hlbiBhbnlvbmUgaGFzIGhpbXNlbGYgeWllbGRlZCB0bwogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGFuZCBnaXZlbiBhIHJlbGVhc2UsIGhlIGNhbm5vdCBpbiB0aGUgdmVyeSBuYXR1cmUgb2YgdGhlIGNhc2UgY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3aXRoIGhhdmluZyBhY3RlZCB1bmp1c3RseS4gVGhvc2Ugd2hvIGJyaW5nIHN1aXQgaW4gZGVmaWFuY2Ugb2YgYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgb2YgdGhlc2UgcHJvdmlzaW9ucyBmYWlsIHRvIGFiaWRlIGJ5IHdoYXQgb3RoZXJzIGhhdmUgZGV0ZXJtaW5lZCB0byBiZQogICAgICAgICAgICAgICAgICAgIGp1c3Q7IGJ1dCBoZSB3aG8gYWdhaW4gYnJpbmdzIHN1aXQgaW4gbWF0dGVycyByZWdhcmRpbmcgd2hpY2ggaGUgaGFzIGdpdmVuIGEKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIGZhaWxzIHRvIGFiaWRlIGJ5IGhpcyBvd24gZGVjaXNpb24uIFRoZXJlZm9yZSwgYWdhaW5zdCBhbGwgc3VjaCB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW5nZXIgc2hvdWxkIGJlIHBhcnRpY3VsYXJseSBzZXZlcmUuIDwvdHJhbnNsYXRpb24+"
translation['37.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCB0aGF0IGhlIHJlbGVhc2VkIG1lIGZyb20gYWxsCiAgICAgICAgICAgICAgICAgICAgY2xhaW1zLCB3aGVuIEkgc29sZCB0aGUgc2xhdmVzIHRvIGhpbSwgSSBoYXZlIHByb3ZlZCB0byB5b3U7IGFuZCB0aGF0IHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgZG8gbm90IGFsbG93IHN1aXRzIHRvIGJlIGJyb3VnaHQgaW4gc3VjaCBjYXNlcyB5b3UgaGF2ZSBoZWFyZCBmcm9tIHRoZSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXMganVzdCBiZWVuIHJlYWQuIEhvd2V2ZXIsIHRoYXQgbm8gb25lIG9mIHlvdSwgbWVuIG9mIEF0aGVucywgbWF5IHN1cHBvc2UgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IGlzIGJlY2F1c2UgSSBhbSBhdCBhIGRpc2FkdmFudGFnZSByZWdhcmRpbmcgdGhlIHJpZ2h0cyBvZiB0aGUgbWF0dGVycyBhdAogICAgICAgICAgICAgICAgICAgIGlzc3VlIHRoYXQgSSBoYXZlIHJlY291cnNlIHRvIHRoaXMgc3BlY2lhbCBwbGVhLCBJIHByb3Bvc2UgdG8gc2hvdyB5b3UgdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9uZSBvZiBoaXMgY2hhcmdlcyBhZ2FpbnN0IG1lIGhpcyBzdGF0ZW1lbnRzIGFyZSBmYWxzZS4gPC90cmFuc2xhdGlvbj4="
translation['37.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgY29tcGxhaW50IGl0c2VsZiwKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBicmluZ3MgYWdhaW5zdCBtZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDb21wbGFpbnQiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5pY29idWx1cyBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgaGFybWVkIG1lIGJ5IGxheWluZyBhIHBsb3QgYWdhaW5zdCBtZSBhbmQgYWdhaW5zdCBteSBwcm9wZXJ0eSwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgQW50aWdlbmVzLCBoaXMgc2xhdmUsIHRvIHRha2UgYXdheSBmcm9tIG15IHNsYXZlIHRoZSBzaWx2ZXIgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGJyaW5naW5nIHRvIGJlIHBhaWQgdG8gdGhlIHN0YXRlIGZvciB0aGUgbWluaW5nIHByb3BlcnR5IHdoaWNoIEkgYm91Z2h0CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuaW5ldHkgbWluYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByZXN1bWFibHkgdGhlIGFtb3VudCBkdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzdGF0ZSBmb3IgdGhlIHB1cmNoYXNlIG9mIHRoZSBtaW5lLCB0aG91Z2ggdGhlIHN1bSBkaWZmZXJzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhbW91bnQgc2VjdXJlZCBieSB0aGUgbW9ydGdhZ2UuPC9ub3RlPiBhbmQgaGF2aW5nIGFsc28gY2F1c2VkIG1lIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGluc2NyaWJlZCBhcyBkZWJ0b3IgdG8gdGhlIHRyZWFzdXJ5IGZvciBkb3VibGUgdGhhdCBhbW91bnQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5OaWNvYnVsdXMgaGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGhhcm1lZCBtZSBieSBsYXlpbmcgYSBwbG90IGFnYWluc3QgbWUgYW5kIGFnYWluc3QgbXkgcHJvcGVydHksIGhhdmluZwogICAgICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIEFudGlnZW5lcywgaGlzIHNsYXZlLCB0byB0YWtlIGF3YXkgZnJvbSBteSBzbGF2ZSB0aGUgc2lsdmVyIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBicmluZ2luZyB0byBiZSBwYWlkIHRvIHRoZSBzdGF0ZSBmb3IgdGhlIG1pbmluZyBwcm9wZXJ0eSB3aGljaCBJIGJvdWdodAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbmluZXR5IG1pbmFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QcmVzdW1hYmx5IHRoZSBhbW91bnQgZHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc3RhdGUgZm9yIHRoZSBwdXJjaGFzZSBvZiB0aGUgbWluZSwgdGhvdWdoIHRoZSBzdW0gZGlmZmVycyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgYW1vdW50IHNlY3VyZWQgYnkgdGhlIG1vcnRnYWdlLjwvbm90ZT4gYW5kIGhhdmluZyBhbHNvIGNhdXNlZCBtZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBiZSBpbnNjcmliZWQgYXMgZGVidG9yIHRvIHRoZSB0cmVhc3VyeSBmb3IgZG91YmxlIHRoYXQgYW1vdW50LjwvdHJhbnNsYXRpb24+"
translation['37.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCByZWFkaW5nLgogICAgICAgICAgICAgICAgICAgIEFsbCB0aGVzZSBjaGFyZ2VzIHdoaWNoIGhlIGhhcyBub3cgbG9kZ2VkIGFnYWluc3QgbWUgaGUgcHJldmlvdXNseSBtYWRlIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBFdmVyZ3VzLCBhbmQgd29uIGhpcyBzdWl0LiBOb3cgZXZpZGVuY2UgaGFzIGJlZW4gYnJvdWdodCBiZWZvcmUgeW91IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG9wZW5pbmcgb2YgbXkgc3BlZWNoIHRoYXQgSSB3YXMgbm90IGluIHRoZSBjb3VudHJ5IHdoZW4gdGhlc2UgbWVuIHF1YXJyZWxsZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIG9uZSBhbm90aGVyOyBidXQgdGhlIGZhY3QgaXMgY2xlYXIgZnJvbSB0aGUgY29tcGxhaW50IGl0c2VsZi4gRm9yIGhlCiAgICAgICAgICAgICAgICAgICAgbm93aGVyZSBzdGF0ZWQgdGhhdCBJIGhhdmUgZG9uZSBhbnkgb2YgdGhlc2UgdGhpbmdzLCBidXQsIHN1Z2dlc3RpbmcgdGhhdCBJIGxhaWQKICAgICAgICAgICAgICAgICAgICBhIHBsb3QgYWdhaW5zdCBoaW0gYW5kIGFnYWluc3QgaGlzIHByb3BlcnR5LCBoZSBkZWNsYXJlcyB0aGF0IEkgb3JkZXJlZCBteSBzbGF2ZQogICAgICAgICAgICAgICAgICAgIHRvIGNvbW1pdCB0aGVzZSBhY3RzOyBhbmQgaW4gdGhpcyBoZSBsaWVzLiBGb3IgaG93IGNvdWxkIEkgaGF2ZSBnaXZlbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgb3JkZXIsIHNlZWluZyB0aGF0IGF0IHRoZSB0aW1lIEkgc2V0IHNhaWwgSSBjb3VsZCBieSBubyBwb3NzaWJpbGl0eSBoYXZlIGhhZAogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBvZiB3aGF0IHdhcyBnb2luZyB0byBoYXBwZW4gaGVyZT8gPC90cmFuc2xhdGlvbj4="
translation['37.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlbiBob3cgYWJzdXJkIHdoZW4gaGUgc2F5cyB0aGF0IEkgcGxvdHRlZCB0byBkaXNlbmZyYW5jaGlzZSBoaW0gYW5kCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgaGltIHRvIHV0dGVyIHJ1aW4sIHRvIGhhdmUgd3JpdHRlbiBpbiB0aGUgY2hhcmdlIHRoYXQgSSBvcmRlcmVkIGEgc2xhdmUgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGlzLOKAlGEgdGhpbmcgd2hpY2ggZXZlbiBhIGNpdGl6ZW4gY291bGQgbm90IGRvIHRvIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2l0aXplbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgZGlzZW5mcmFuY2hpc2VtZW50IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWUgb25seSBieSBhY3Qgb2YgdGhlIHN0YXRlIGl0c2VsZi48L25vdGU+IFdoYXQsIHRoZW4sIGlzIHRoZSBtZWFuaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcz8gSSBzdXBwb3NlIHRoYXQsIGJlaW5nIHVuYWJsZSB0byByZWZlciB0byBtZSB0aGUgZG9pbmcgb2YgYW55IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYWN0cywgYnV0IHdpc2hpbmcgdG8gZ28gb24gd2l0aCBoaXMgbWFsaWNpb3VzIHN1aXQsIGhlIHdyb3RlIGluIHRoZSBjb21wbGFpbnQKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgaGFkIGdpdmVuIHRoZSBvcmRlci4gVGhlcmUgd2FzIG5vIHNlbnNlIGluIGhpcyBjaGFyZ2UsIGlmIGhlIGhhZCBub3QgZG9uZQogICAgICAgICAgICAgICAgICAgIHRoaXMuIDwvdHJhbnNsYXRpb24+"
translation['37.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB3aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd3MuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ29tcGxhaW50Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgYWZ0ZXIgSSBoYWQgYmVjb21lIGEgZGVidG9yIHRvIHRoZSBzdGF0ZSwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpb25lZCBoaXMgc2xhdmUgQW50aWdlbmVzIGluIG15IG1pbmluZyBwcm9wZXJ0eSBhdCBUaHJhc3lsbHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHNpdGUgaW4gTWFyb25laWEsIHNvIGNhbGxlZCBmcm9tIGEgbW9udW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIFRocmFzeWxsdXMgd2hpY2ggc3Rvb2QgdGhlcmUuPC9ub3RlPiBpbiBmdWxsIGNvbnRyb2wgb2YgbXkgd29ya3MsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIEkgZm9yYmFkZSBoaW0gLiAuIC48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBhZnRlciBJIGhhZCBiZWNvbWUgYSBkZWJ0b3IgdG8gdGhlIHN0YXRlLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGlvbmVkIGhpcyBzbGF2ZSBBbnRpZ2VuZXMgaW4gbXkgbWluaW5nIHByb3BlcnR5IGF0IFRocmFzeWxsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgc2l0ZSBpbiBNYXJvbmVpYSwgc28gY2FsbGVkIGZyb20gYSBtb251bWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgVGhyYXN5bGx1cyB3aGljaCBzdG9vZCB0aGVyZS48L25vdGU+IGluIGZ1bGwgY29udHJvbCBvZiBteSB3b3JrcywKICAgICAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggSSBmb3JiYWRlIGhpbSAuIC4gLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TdG9wCiAgICAgICAgICAgICAgICAgICAgcmVhZGluZy4gSW4gYWxsIHRoaXMgaGUgd2lsbCBhZ2FpbiBiZSBjb252aWN0ZWQgb2YgZmFsc2Vob29kIGJ5IHRoZSBmYWN0cwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXM7IGZvciBoZSBoYXMgd3JpdHRlbiBpbiB0aGUgY29tcGxhaW50IHRoYXQgSSBzdGF0aW9uZWQgdGhlIHNsYXZlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZm9yYmFkZSBtZS4gQnV0IHRoaXMgd2FzIGltcG9zc2libGUgaW4gdGhlIGNhc2Ugb2Ygb25lIHdobyB3YXMgbm90IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdW50cnkuIE5laXRoZXIgZGlkIEkgc3RhdGlvbiBhbnlvbmUsIHNlZWluZyB0aGF0IEkgd2FzIGluIFBvbnR1cywgbm9yIGRpZAogICAgICAgICAgICAgICAgICAgIGhlIGZvcmJpZCBhIG1hbiB3aG8gd2FzIG5vdCBpbiBBdGhlbnMuIDwvdHJhbnNsYXRpb24+"
translation['37.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cKICAgICAgICAgICAgICAgICAgICBjb3VsZCBoZT8gV2hhdCB3YXMgaXQsIHRoZW4sIHRoYXQgZm9yY2VkIGhpbSB0byBtYWtlIHRoaXMgc3RhdGVtZW50PyBJIGZhbmN5CiAgICAgICAgICAgICAgICAgICAgdGhhdCBFdmVyZ3VzLCBhdCB0aGUgdGltZSBoZSBtYWRlIHRoZSBtaXN0YWtlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BCiAgICAgICAgICAgICAgICAgICAgICAgIGV1cGhlbWlzbSBmb3IgdGhlIHZpb2xlbmNlIGFuZCBsYXdsZXNzbmVzcyB3aXRoIHdoaWNoIEV2ZXJndXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCBieSBQYW50YWVuZXR1cy48L25vdGU+IGZvciB3aGljaCBoZSBoYXMgcGFpZCB0aGUgcGVuYWx0eSwgYmVpbmcgb24KICAgICAgICAgICAgICAgICAgICBmcmllbmRseSB0ZXJtcyB3aXRoIG1lIGFuZCB3ZWxsIGtub3duLCB0b29rIHRoZSBzbGF2ZSBmcm9tIG15IGhvdXNlIGFuZAogICAgICAgICAgICAgICAgICAgIHN0YXRpb25lZCBoaW0gYXQgaGlzIG93biB3b3JrcyB0byBrZWVwIGd1YXJkLiBJZiwgdGhlbiwgaGUgaGFkIHdyaXR0ZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIGl0IHdvdWxkIGhhdmUgYmVlbiByaWRpY3Vsb3VzLiBGb3IsIGlmIEV2ZXJndXMgc3RhdGlvbmVkIHRoZSBzbGF2ZSB0aGVyZSwKICAgICAgICAgICAgICAgICAgICB3aGVyZWluIGRvIEkgd3JvbmcgeW91PyBJdCB3YXMgdG8gYXZvaWQgdGhpcyBhYnN1cmRpdHkgdGhhdCBoZSB3YXMgY29tcGVsbGVkIHRvCiAgICAgICAgICAgICAgICAgICAgd3JpdGUgYXMgaGUgZGlkLCB0aGF0IGhpcyBjaGFyZ2UgbWlnaHQgYmUgZGlyZWN0ZWQgYWdhaW5zdCBtZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB3aGF0IGZvbGxvd3MuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ29tcGxhaW50Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgdGhlbiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIG15IHNsYXZlcyB0byBzaXQgaW4gdGhlIGZvdW5kcnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByZWNpc2UgbWVhbmluZyBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ous61zrPPh8+BzrXhvb3OvTwvZm9yZWlnbj4gY2Fubm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBkZXRlcm1pbmVkLiBJdCBzZWVtcyB0byBoYXZlIGRlbm90ZWQgZWl0aGVyIHRoZSBwaXQgaW50byB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbHZlciB3YXMgcnVuIHdoZW4gbWVsdGVkLCBvciB0aGUgZnVybmFjZSBpbiB3aGljaCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmluZWQuPC9ub3RlPiB0byBteSBwcmVqdWRpY2UuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgdGhlbiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIG15IHNsYXZlcyB0byBzaXQgaW4gdGhlIGZvdW5kcnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByZWNpc2UgbWVhbmluZyBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ous61zrPPh8+BzrXhvb3OvTwvZm9yZWlnbj4gY2Fubm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBkZXRlcm1pbmVkLiBJdCBzZWVtcyB0byBoYXZlIGRlbm90ZWQgZWl0aGVyIHRoZSBwaXQgaW50byB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbHZlciB3YXMgcnVuIHdoZW4gbWVsdGVkLCBvciB0aGUgZnVybmFjZSBpbiB3aGljaCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmluZWQuPC9ub3RlPiB0byBteSBwcmVqdWRpY2UuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrOtc6zz4fPgc614b29zr08L2ZvcmVpZ24+IGNhbm5vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgZGV0ZXJtaW5lZC4gSXQgc2VlbXMgdG8gaGF2ZSBkZW5vdGVkIGVpdGhlciB0aGUgcGl0IGludG8gd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWx2ZXIgd2FzIHJ1biB3aGVuIG1lbHRlZCwgb3IgdGhlIGZ1cm5hY2UgaW4gd2hpY2ggaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZpbmVkLjwvdHJhbnNsYXRpb24+"
translation['37.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBpcwogICAgICAgICAgICAgICAgICAgIG91dC1hbmQtb3V0IGltcHVkZW5jZS4gTm90IG9ubHkgZnJvbSBteSBjaGFsbGVuZ2luZyBoaW0gdG8gZ2l2ZSB1cCB0aGVzZSBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBmb3IgdG9ydHVyZSBhbmQgZnJvbSBoaXMgcmVmdXNpbmcgdG8gZG8gc28sIGJ1dCBmcm9tIGV2ZXJ5IGNpcmN1bXN0YW5jZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjYXNlIGl0cyBmYWxzZWhvb2QgaXMgbWFuaWZlc3QuIFdoeSwgcHJheSwgc2hvdWxkIEkgaGF2ZSBpbmR1Y2VkIHRoZW0gdG8gZG8KICAgICAgICAgICAgICAgICAgICB0aGlzPyBUaGF0LCBmb3Jzb290aCwgSSBtaWdodCBnZXQgcG9zc2Vzc2lvbiBvZiB0aGVtLiBCdXQgd2hlbiB0aGUgb3B0aW9uIHdhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIG1lIGVpdGhlciB0byBrZWVwIHRoZSBwcm9wZXJ0eSBvciB0byByZWNvdmVyIG15IG1vbmV5LCBJIGNob3NlIHRvIHJlY292ZXIKICAgICAgICAgICAgICAgICAgICBteSBtb25leTsgYW5kIG9mIHRoaXMgeW91IGhhdmUgaGVhcmQgdGhlIGV2aWRlbmNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5OZXZlcnRoZWxlc3MsIHJlYWQgdGhlIGNoYWxsZW5nZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggaGUgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IGFjY2VwdCB0aGUgY2hhbGxlbmdlLCBidXQgZGVjbGluZWQgaXQsIHNlZSB3aGF0IGEgY2hhcmdlIGhlIG1ha2VzCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkgdGhlcmVhZnRlci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB3aGF0IGNvbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ29tcGxhaW50Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgaGF2aW5nIHJlZHVjZWQgdGhlIHNpbHZlci1vcmUgd2hpY2ggbXkgc2xhdmVzIGhhZCBkdWcsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBrZWVwaW5nIHRoZSBzaWx2ZXIgc21lbHRlZCBmcm9tIHRoYXQgb3JlLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGxhaW50PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGhhdmluZyByZWR1Y2VkIHRoZSBzaWx2ZXItb3JlIHdoaWNoIG15IHNsYXZlcyBoYWQgZHVnLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQga2VlcGluZyB0aGUgc2lsdmVyIHNtZWx0ZWQgZnJvbSB0aGF0IG9yZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIGhvdyBjb3VsZCB0aGlzIGhhdmUgYmVlbiBkb25lIGJ5IG1lIHdoZW4gSSB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgaGVyZT/igJR0aGluZ3MsIHRvbywgZm9yIHdoaWNoIHlvdSB3b24gYSBqdWRnZW1lbnQgYWdhaW5zdCBFdmVyZ3VzPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIGNoYXJnZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ29tcGxhaW50Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgaGF2aW5nIHNvbGQgbXkgbWluaW5nIHByb3BlcnR5IGFuZCB0aGUgc2xhdmVzLAogICAgICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byB0aGUgYWdyZWVtZW50IHdoaWNoIGhlIGhhZCBtYWRlIHdpdGggbWUuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgaGF2aW5nIHNvbGQgbXkgbWluaW5nIHByb3BlcnR5IGFuZCB0aGUgc2xhdmVzLAogICAgICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byB0aGUgYWdyZWVtZW50IHdoaWNoIGhlIGhhZCBtYWRlIHdpdGggbWUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN0b3AgcmVhZGluZy4gVGhpcyBmYXIgb3V0ZG9lcyBhbGwgdGhlIHJlc3QuIEZvciBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSBoZSBzYXlzLCDigJxjb250cmFyeSB0byB0aGUgYWdyZWVtZW50IHdoaWNoIGhlIGhhZCBtYWRlIHdpdGgKICAgICAgICAgICAgICAgICAgICBtZS7igJ0gV2hhdCBhZ3JlZW1lbnQgaXMgdGhpcz8gV2UgbGVhc2VkIG91ciBvd24gcHJvcGVydHkgdG8gdGhpcyBtYW4sCiAgICAgICAgICAgICAgICAgICAgYXQgYSByZW50IGVxdWFsIHRvIHRoZSBpbnRlcmVzdCBvbiB0aGUgbG9hbjsgdGhhdCB3YXMgYWxsLiBJdCB3YXMgTW5lc2ljbGVzIHdobwogICAgICAgICAgICAgICAgICAgIHNvbGQgaXQgdG8gdXMsIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgcGxhaW50aWZmIGFuZCBhdCBoaXMgcmVxdWVzdC4gPC90cmFuc2xhdGlvbj4="
translation['37.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzIGluIHRoZSBzYW1lIHdheSB3ZSBzb2xkIHRoZSBwcm9wZXJ0eSB0bwogICAgICAgICAgICAgICAgICAgIG90aGVycyBvbiB0aGUgc2FtZSB0ZXJtcyB1cG9uIHdoaWNoIHdlIGhhZCBvdXJzZWx2ZXMgYm91Z2h0IGl0LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW50aWZmIG5vdCBvbmx5IHVyZ2VkIGJ1dCBhY3R1YWxseSBpbXBsb3JlZCB1cyB0byBkbyBzbzsgZm9yIG5vIG9uZSB3YXMKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nIHRvIGFjY2VwdCBoaW0gYXMgdGhlIHZlbmRvci4gV2hhdCwgdGhlbiwgZG9lcyB0aGUgYWdyZWVtZW50IHRvIGxlYXNlIGl0CiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0byBkbyB3aXRoIHRoZSBtYXR0ZXI/IFdoeSwgbW9zdCB3b3J0aGxlc3Mgb2YgbWVuLCBkaWQgeW91IGluc2VydCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXVzZT88bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdGhhdCB3ZSByZXNvbGQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgYXQgeW91ciByZXF1ZXN0LCBhbmQgb24gdGhlIHNhbWUgdGVybXMgYXMgdGhvc2UgdXBvbiB3aGljaCB3ZSBvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICBib3VnaHQgaXQsIHJlYWQgdGhlIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGFyZQogICAgICAgICAgICAgICAgICAgIHlvdXJzZWxmIGFsc28gYSB3aXRuZXNzIHRvIHRoaXM7IGZvciB3aGF0IHdlIHB1cmNoYXNlZCBmb3Igb25lIGh1bmRyZWQgYW5kIGZpdmUKICAgICAgICAgICAgICAgICAgICBtaW5hZSwgdGhpcyB5b3UgYWZ0ZXJ3YXJkIHNvbGQgZm9yIHRocmVlIHRhbGVudHMgYW5kIHR3ZW50eS1zaXggaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlLiBBbmQgeWV0IHdobywgaWYgaGUgaGFkIHlvdTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGl0bGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCB2ZXN0ZWQgaW4gUGFudGFlbmV0dXMsIGJ1dCBpbiB0aGUgb3RoZXIgY2xhaW1hbnRzIHRvIHdob20gaXQgaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gdHJhbnNmZXJyZWQgYXQgaGlzIHJlcXVlc3QuPC9ub3RlPiBhcyBvbmUgdG8gY29tcGxldGUgYSBmaW5hbCBzYWxlLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgZ2l2ZW4gYSBzaW5nbGUgZHJhY2htYT88bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgc3BlYWsgdGhlIHRydXRoIGluIHRoaXMsIGNhbGwsIHBsZWFzZSwgdGhlIHdpdG5lc3NlcyB3aG8gZXN0YWJsaXNoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYWN0cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgaGFzLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIHRoZSBzdW0gd2hpY2ggaGUgYWdyZWVkIHRvIHRha2UgZm9yIGhpcyBwcm9wZXJ0eSzigJRoZSBldmVuCiAgICAgICAgICAgICAgICAgICAgYmVnZ2VkIG1lIHRoYXQgSSBzaG91bGQgYXNzdW1lIHRoZSBwb3NpdGlvbiBvZiB2ZW5kb3IgZm9yIHRoZSBzdW0gd2hpY2ggSSBoYWQKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZOKAlHlldCB0aGlzIHNhbWUgbWFuIHN1ZXMgbWUgZm9yIHR3byB0YWxlbnRzIG1vcmUuIEFuZCB0aGUgcmVzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjaGFyZ2VzIGFyZSBldmVuIG1vcmUgb3V0cmFnZW91cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCwKICAgICAgICAgICAgICAgICAgICBwbGVhc2UsIHRoZSByZW1haW5kZXIgb2YgdGhlIGNvbXBsYWludC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDb21wbGFpbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGxhaW50PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBoZSBicmluZ3MKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lIGluIG9uZSBtYXNzIGEgaG9zdCBvZiBkcmVhZGZ1bCBjaGFyZ2VzOyBmb3IgaGUgYWNjdXNlcyBtZSBvZiBhc3NhdWx0CiAgICAgICAgICAgICAgICAgICAgYW5kIGJhdHRlcnksIG91dHJhZ2UsIGFuZCBvZiB2aW9sZW50IHdyb25ncyBldmVuIGFnYWluc3QgaGVpcmVzc2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNy40NSIgdmFsaWQ9InllcyI+RGVtLiAzNy40NTwvYmlibD47IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlIHRoZSBvcmF0aW9uIGFnYWluc3QgTWVpZGlhcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjc5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMS43OTwvYmlibD7vvIkuPC9ub3RlPiBCdXQgZm9yIGVhY2ggb2YgdGhlc2Ugd3Jvbmdkb2luZ3MgYWN0aW9ucwogICAgICAgICAgICAgICAgICAgIGFyZSBzZXBhcmF0ZTsgdGhleSBkbyBub3QgY29tZSBiZWZvcmUgdGhlIHNhbWUgbWFnaXN0cmF0ZXMgYW5kIHRoZXkgYXJlIG5vdCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgcmVjb3Zlcnkgb2YgdGhlIHNhbWUgcGVuYWx0aWVzLiBBc3NhdWx0IGFuZCBiYXR0ZXJ5IGFuZCBjcmltZXMgb2YgdmlvbGVuY2UKICAgICAgICAgICAgICAgICAgICBjb21lIGJlZm9yZSB0aGUgRm9ydHk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM3LjQ1IiB2YWxpZD0ieWVzIj5EZW0uIDM3LjQ1PC9iaWJsPjsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmUgdGhlIG9yYXRpb24gYWdhaW5zdCBNZWlkaWFzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuNzkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjc5PC9iaWJsPu+8iS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+4oCcVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEZvcnR54oCdIHdlcmUgY2lyY3VpdCBqdWRnZXMuPC9ub3RlPjsgY2FzZXMgb2Ygb3V0cmFnZSBiZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlc21vdGhldGFlOyBhbmQgYWxsIGNyaW1lcyBhZ2FpbnN0IGhlaXJlc3NlcyBiZWZvcmUgdGhlIEFyY2hvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhlIGNoaWVmIGFyY2hvbi48L25vdGU+IEFuZCB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGdyYW50IHRoZSBmaWxpbmcgb2YgcGxlYXMgdG8gYmFyIGFjdGlvbiBhbHNvIGluIGNhc2Ugb2YgY2hhcmdlcyBicm91Z2h0IGJlZm9yZQogICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGVzIHdobyBoYXZlIG5vdCBkdWUgY29tcGV0ZW5jeS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggSSBoYWQKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIHRoaXMgZXhjZXB0aW9uIGluIGJhciBvZiBhY3Rpb24gaW4gYWRkaXRpb24gdG8gdGhlIG90aGVyLCBhbmQgYWx0aG91Z2gKICAgICAgICAgICAgICAgICAgICB0aGUgVGhlc21vdGhldGFlIGhhdmUgbm90IGNvbXBldGVuY3kgaW4gdGhlIG1hdHRlcnMgY29uY2VybmluZyB3aGljaCBQYW50YWVuZXR1cwogICAgICAgICAgICAgICAgICAgIGlzIGJyaW5naW5nIGhpcyBzdWl0LCBpdCBoYXMgYmVlbiBlcmFzZWQsIGFuZCBpcyBub3QgZm91bmQgaW4gdGhlIHBsZWEgYXMKICAgICAgICAgICAgICAgICAgICB3cml0dGVuLiBIb3cgdGhpcyBoYXMgY29tZSBhYm91dCBpdCBpcyBmb3IgeW91IHRvIGNvbnNpZGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5IZSBoaW50cyB0aGF0IHRoZSBvbWlzc2lvbiBvZiB0aGUgZXhjZXB0aW9uIGZpbGVkIGJ5IGhpbSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IGFuIGFjY2lkZW50Ljwvbm90ZT4gVG8gbWUsIHNvIGxvbmcgYXMgSSBhbSBhYmxlIHRvIHByb2R1Y2UgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIGl0c2VsZiwgaXQgbWFrZXMgbm90IHRoZSBzbGlnaHRlc3QgZGlmZmVyZW5jZTsgZm9yIGhlIHdpbGwgbm90IGJlIGFibGUgdG8gZXJhc2UKICAgICAgICAgICAgICAgICAgICBmcm9tIHlvdXIgbWluZHMgeW91ciBwb3dlciB0byBrbm93IGFuZCB1bmRlcnN0YW5kIHRoZSByaWdodC4gPC90cmFuc2xhdGlvbj4="
translation['37.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBhbHNvIHRoZSBtaW5pbmcgbGF3LiBGb3IKICAgICAgICAgICAgICAgICAgICBJIHRoaW5rIEkgY2FuIHNob3cgeW91IGZyb20gdGhpcywgdG9vLCB0aGF0IHRoZSBhY3Rpb24gaXMgbm90IG1haW50YWluYWJsZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGRlc2VydmUgdGhhbmtzIHJhdGhlciB0aGFuIHRvIGJlIG1hZGUgdGhlIG9iamVjdCBvZiBhIGJhc2VsZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIG1hbGljaW91cyBjaGFyZ2UuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgbGF3IGhhcyBjbGVhcmx5IGRlZmluZWQgaW4gd2hhdAogICAgICAgICAgICAgICAgICAgIGNhc2VzIG1pbmluZyBhY3Rpb25zIG1heSBwcm9wZXJseSBiZSBicm91Z2h0LiBPYnNlcnZl4oCUdGhlIGxhdyBtYWtlcyBhCiAgICAgICAgICAgICAgICAgICAgbWFuIGxpYWJsZSBpZiBoZSBlamVjdCBhbm90aGVyIGZyb20gaGlzIHdvcmtpbmdzOyBidXQgSSwgZmFyIGZyb20gZWplY3RpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW50aWZmLCBnYXZlIG92ZXIgdG8gaGltIGFuZCBwdXQgaGltIGluIHBvc3Nlc3Npb24gb2YgdGhhdCBvZiB3aGljaCBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIHNlZWtpbmcgdG8gZGVwcml2ZSBoaW07IGFuZCBJIGJlY2FtZSB0aGUgdmVuZG9yIG9mIGl0IGF0IGhpcyByZXF1ZXN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIHNheXMgaGUsIGJ1dCBpZiBvbmUgY29tbWl0IG90aGVyCiAgICAgICAgICAgICAgICAgICAgd3JvbmdzIGNvbmNlcm5pbmcgbWluZXMsIGZvciB0aGVzZSwgdG9vLCBhY3Rpb25zIG1heSBiZSBicm91Z2h0LiBDZXJ0YWlubHksCiAgICAgICAgICAgICAgICAgICAgUGFudGFlbmV0dXM7IGJ1dCB3aGF0IGFyZSB0aGVzZT8gSWYgb25lIHNtb2tlcyBvdXQgYW5vdGhlciwgaWYgb25lIG1ha2VzIGFuCiAgICAgICAgICAgICAgICAgICAgYXJtZWQgYXR0YWNrLCBpZiBvbmUgbWFrZXMgY3V0dGluZ3Mgd2hpY2ggZW5jcm9hY2ggdXBvbiBhbm90aGVyJ3Mgd29ya2luZ3MuCiAgICAgICAgICAgICAgICAgICAgVGhlc2UgYXJlIHRoZSBvdGhlciBjYXNlczsgYnV0IEksIG9mIGNvdXJzZSwgaGF2ZSBkb25lIG5vdGhpbmcgb2YgdGhpcyBzb3J0IHRvCiAgICAgICAgICAgICAgICAgICAgeW91LCB1bmxlc3MgeW91IGhvbGQgdGhhdCBwZW9wbGUgd2hvIHNlZWsgdG8gcmVjb3ZlciB3aGF0IHRoZXkgaGFkIHJpc2tlZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgbG9hbiB0byB5b3UgYXJlIG1ha2luZyBhbiBhcm1lZCBhdHRhY2suIElmIHlvdSBob2xkIHRoYXQgdmlldywgeW91IGhhdmUgbWluaW5nCiAgICAgICAgICAgICAgICAgICAgc3VpdHMgYWdhaW5zdCBhbGwgdGhvc2Ugd2hvIHJpc2sgdGhlaXIgb3duIG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['37.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlcmUgaXMgbm8ganVzdGljZSBpbiB0aGF0LiBGb3IgY29uc2lkZXLigJRpZiBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHB1cmNoYXNlcyBhIG1pbmUgZnJvbSB0aGUgc3RhdGUsIHNoYWxsIGhlIGRpc3JlZ2FyZCB0aGUgZ2VuZXJhbCBsYXdzIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHdoaWNoIGFsbCBtZW4gYXJlIGJvdW5kIHRvIHJlbmRlciBhbmQgb2J0YWluIGp1c3RpY2UsIGFuZCBicmluZwogICAgICAgICAgICAgICAgICAgIHN1aXQgaW4gYSBtaW5pbmcgY291cnQsIGlmIGhlIGJvcnJvd3MgZnJvbSBhbm90aGVyP+KAlGlmIGhlIGJlIGV2aWwKICAgICAgICAgICAgICAgICAgICBzcG9rZW4gb2Y/4oCUaWYgaGUgYmUgYmVhdGVuP+KAlGlmIGhlIGNoYXJnZSBvbmUgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZWZ0P+KAlGlmIGhlIGZhaWwgdG8gcmVjb3ZlciBtb25leSBhZHZhbmNlZCBmb3IgYW5vdGhlcidzCiAgICAgICAgICAgICAgICAgICAgdGF4P+KAlGlmLCBpbiBzaG9ydCwgaGUgaGFzIGFueSBvdGhlciBncm91bmQgZm9yIGFjdGlvbj8gSSB0aGluayBub3QuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5NaW5pbmcgc3VpdHMsIGluIG15IGp1ZGdlbWVudCwgYXJlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhZ2FpbnN0IHRob3NlIHNoYXJpbmcgaW4gdGhlIGJ1c2luZXNzIG9mIG1pbmluZyBhbmQgdGhvc2Ugd2hvIGhhdmUgYm9yZWQKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIGludG8gYW5vdGhlcidzIHByb3BlcnR5LCBhbmQsIGluIHNob3J0LCBhZ2FpbnN0IHRob3NlIGVuZ2FnZWQgaW4gbWluaW5nCiAgICAgICAgICAgICAgICAgICAgd2hvIGRvIGFueSBvZiB0aGUgdGhpbmdzIG1lbnRpb25lZCBpbiB0aGUgbGF3LiBCdXQgYSBtYW4gd2hvIGhhcyBsZW50IG1vbmV5IHRvCiAgICAgICAgICAgICAgICAgICAgUGFudGFlbmV0dXMsIGFuZCBieSBwZXJzaXN0ZW50bHkgc3RpY2tpbmcgdG8gaGltIGhhcyB3aXRoIGRpZmZpY3VsdHkgZ290IGl0CiAgICAgICAgICAgICAgICAgICAgYmFjaywgaXMgbm90IGFsc28gdG8gYmUgbWFkZSBkZWZlbmRhbnQgaW4gYSBtaW5pbmcgc3VpdDsgSSBzaG91bGQgc2F5IG5vdCEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSwgdGhlcmVmb3JlLCBkb25lIG5vIHdyb25nIHRvIHRoZSBkZWZlbmRhbnQgYW5kIHRoYXQgdGhlIHN1aXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaWJsZSB1bmRlciB0aGUgbGF3cyBvbmUgbWF5IGVhc2lseSBkZXRlcm1pbmUgZnJvbSBhIGNvbnNpZGVyYXRpb24gb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBwb2ludHMuIFNvLCBhcyBoZSBoYWQgbm90IGEgc2luZ2xlIHZhbGlkIGFyZ3VtZW50IHRvIGFkdmFuY2UgaW4gc3VwcG9ydCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VzLCBidXQgaGFkIGV2ZW4gaW5jb3Jwb3JhdGVkIGZhbHNlIHN0YXRlbWVudHMgaW4gaGlzIGNvbXBsYWludCwgYW5kIHdhcwogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIHN1aXQgcmVnYXJkaW5nIGNsYWltcyBmb3Igd2hpY2ggaGUgaGFkIGdpdmVuIGEgcmVsZWFzZSwgbGFzdCBtb250aCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgQXRoZW5zLCB3aGVuIEkgd2FzIG9uIHRoZSBwb2ludCBvZiBlbnRlcmluZyB0aGUgY291cnQsIGFuZCB0aGUgY291cnQtcm9vbXMKICAgICAgICAgICAgICAgICAgICBoYWQgYWxyZWFkeSBiZWVuIGFsbG90dGVkIHRvIHRoZSBqdXJ5bWVuLCBoZSBjYW1lIHVwIHRvIG1lIGFuZCBzdXJyb3VuZGVkIG1lCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXMgbWluaW9ucyDvvIh0aGF0IGdhbmcgb2YgaGlzIGZlbGxvdy1jb25zcGlyYXRvcnPvvIksIGFuZAogICAgICAgICAgICAgICAgICAgIGRpZCBhIG1vc3Qgb3V0cmFnZW91cyB0aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['37.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5IZSByZWFkIG1lIGEgbG9uZwogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSwgZGVtYW5kaW5nIHRoYXQgYSBzbGF2ZSB3aG8sIGhlIGNsYWltZWQsIHdhcyBhY3F1YWludGVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMsIHNob3VsZCBiZSBwdXQgdG8gdGhlIHRvcnR1cmU7IGFuZCB0aGF0LCBpZiB0aGUgZmFjdHMgYXMgYWxsZWdlZCBieSBoaW0KICAgICAgICAgICAgICAgICAgICB3ZXJlIHRydWUsIEkgc2hvdWxkIGhhdmUgdG8gcGF5IGhpbSB0aGUgZGFtYWdlcyBjaGFyZ2VkIHdpdGhvdXQgYWRqdXN0bWVudCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5OyBidXQgaWYgdGhleSB3ZXJlIGZhbHNlLCBNbmVzaWNsZXMsIHRoZSB0b3J0dXJlciwgc2hvdWxkIGRldGVybWluZSB0aGUKICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiB0aGUgc2xhdmUuIFdoZW4gaGUgaGFkIHJlY2VpdmVkIHN1cmV0aWVzIHRvIHRoaXMgYWdyZWVtZW50IGZyb20gbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgSSBoYWQgc2VhbGVkIHRoZSBjaGFsbGVuZ2Ug77yIbm90IHRoYXQgSSB0aG91Z2h0IGl0IGZhaXI7IDwvdHJhbnNsYXRpb24+"
translation['37.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgaG93IGNvdWxkIGl0IGJlIGZhaXIgdGhhdCBpdCBzaG91bGQgZGVwZW5kIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGUgYm9keSBhbmQgbGlmZSBvZiBhIHNsYXZlLCB3aGV0aGVyIEkgc2hvdWxkIGJlIGNvbmRlbW5lZCB0byBwYXkgdHdvIHRhbGVudHMsCiAgICAgICAgICAgICAgICAgICAgb3IgdGhlIGJyaW5nZXIgb2YgdGhpcyBtYWxpY2lvdXMgc3VpdCBnZXQgb2ZmIHNjb3QtZnJlZT8gQnV0IEksIHdpc2hpbmcgdG8KICAgICAgICAgICAgICAgICAgICBwcmV2YWlsIGJ5IGEgcHJlcG9uZGVyYW5jZSBvZiBmYWlyIHBsYXksIG1hZGUgdGhpcwogICAgICAgICAgICAgICAgICAgIGNvbmNlc3Npb27vvInigJRhZnRlciB0aGlzIGhlIGFnYWluIHN1bW1vbmVkIG1lIGluIHRoZSBzdWl0LCBhcwogICAgICAgICAgICAgICAgICAgIHNvb24gYXMgaGUgaGFkIHRha2VuIGJhY2sgaGlzIGRlcG9zaXRzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSBpcwogICAgICAgICAgICAgICAgICAgICAgICBtdWNoIG9ic2N1cml0eSBoZXJlLiBUaGUgYWNjZXB0YW5jZSBvZiB0aGUgY2hhbGxlbmdlIGJ5IE5pY29idWx1cyBzaG91bGQKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBwdXQgYW4gZW5kIHRvIHRoZSBhY3Rpb24uIFRoZSBwbGFpbnRpZmYgaGFkIHRoZW4gdGhlIHJpZ2h0IHRvIHRha2UgYmFjawogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3VtIGRlcG9zaXRlZCDvvIhhcyBjb3VydC1mZWVzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Az4HPhc+EzrHOvc614b+WzrE8L2ZvcmVpZ24+P++8iSB3aGVuIHRoZSBzdWl0IHdhcyBicm91Z2h0Ljwvbm90ZT4gc28KICAgICAgICAgICAgICAgICAgICBjbGVhciBkaWQgaGUgbWFrZSBpdCBhdCBvbmNlIHRoYXQgaGUgd291bGQgbm90IGFiaWRlIGJ5IHRoZSBjb25kaXRpb25zIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGhpbXNlbGYgbGFpZCBkb3duLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM+Bz4XPhM6xzr3OteG/ls6xPC9mb3JlaWduPj/vvIkgd2hlbiB0aGUgc3VpdCB3YXMgYnJvdWdodC48L3RyYW5zbGF0aW9uPg=="
translation['37.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB3ZSBoYWQgY29tZQogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGUgdG9ydHVyZXIsIGluc3RlYWQgb2Ygb3BlbmluZyB0aGUgY2hhbGxlbmdlLCBzaG93aW5nIGl0cyBjb250ZW50cywgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZyBpbiBhY2NvcmRhbmNlIHdpdGggaXRzIHRlcm1zIHRvIGRvIHdoYXQgc2VlbWVkIHJpZ2h0IO+8iGZvciBvbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIHR1cm1vaWwgYXQgdGhhdCB0aW1lIGFuZCB0aGUgZmFjdCB0aGF0IHRoZSBjYXNlIHdhcyBhYm91dCB0byBiZQogICAgICAgICAgICAgICAgICAgIGNhbGxlZCwgaXQgd2FzIGxpa2UgdGhpczogSSBvZmZlciB5b3UgdGhpcyBjaGFsbGVuZ2Uu4oCUSSBhY2NlcHQKICAgICAgICAgICAgICAgICAgICBpdC7igJRMZXQgbWUgaGF2ZSB5b3VyIHJpbmcu4oCUVGFrZSBpdC7igJRXaG8gaXMgeW91cgogICAgICAgICAgICAgICAgICAgIHN1cmV0eT/igJRUaGlzIG1hbiBoZXJlLuKAlGFuZCBJIGhhZCB0YWtlbiBubyBjb3B5IG9yIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgZWxzZSBvZiB0aGF0IHNvcnTvvIk7IGluc3RlYWQgb2YgYWN0aW5nIGluIHRoZSB3YXkgb2Ygd2hpY2ggSSBzcGVhaywgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgYnJvdWdodCB3aXRoIGhpbSBhIGRpZmZlcmVudCBjaGFsbGVuZ2UsIGluc2lzdGluZyB0aGF0IGhlIHNob3VsZCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSB0aGUgbWFuLCBhbmQgaGUgbGFpZCBob2xkIG9mIGhpbSwgZHJhZ2dlZCBoaW0gdGhpcyB3YXkgYW5kIHRoYXQsIGFuZAogICAgICAgICAgICAgICAgICAgIHdlbnQgYmV5b25kIGFsbCBib3VuZHMgaW4gYmxhY2tndWFyZGx5IGFjdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['37.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5PbiBteSBwYXJ0LCBtZW4gb2YgdGhlIGp1cnksIEkgd2FzIGxlZCB0byByZWZsZWN0IHdoYXQgZ2FpbiB0aGVyZSBpcyBpbiBhIGxpZmUKICAgICAgICAgICAgICAgICAgICBtb2xkZWQgdG8gc2VydmUgb25lJ3MgZW5kcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGlzIG93biBkZXNpcmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZSBzaW1wbHkgYW5kIG5hdHVyYWxseSBoYWQgY2F1c2VkIGhpbSB0byBiZSBpbXBvc2VkIHVwb24sIGFuZCB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCBhcyBvbmUgbGFja2luZyBpbiBzcGlyaXQuIFRoZSBwYXNzYWdlIGlzIHZhcmlvdXNseSBpbnRlcnByZXRlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0ZXh0IGlzIHVuY2VydGFpbi4gVGhlIE1TUy4gaGF2ZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ous6xz4TOsc+AzrXPgM674b+Gz4fOuM6xzrk8L2ZvcmVpZ24+LCB3aGljaCB5aWVsZHMgbm8gc2F0aXNmYWN0b3J5IHNlbnNlLCB1bmxlc3MKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBXb2xmIHdlIGluc2VydCB0aGUgbmVnYXRpdmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrzhvbU8L2ZvcmVpZ24+LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgbWVhbmluZyBpbiB0aGF0IGNhc2Ugd291bGQgYmUgdGhhdCBhIGxpZmUgb2YgcnV0aGxlc3Mgc2VsZi1hc3NlcnRpb24gaXMgYQogICAgICAgICAgICAgICAgICAgICAgICDigJxncmVhdCBnYWluLuKAnTwvbm90ZT4gRm9yIGl0IHNlZW1lZCB0byBtZSB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyaW5nIHRoaXMgdHJlYXRtZW50IGJlY2F1c2UgSSB3YXMgZGVzcGlzZWQgYXMgb25lIHdobyBsaXZlZCBhIHNpbXBsZSBhbmQKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIGxpZmUsIGFuZCB0aGF0IEkgd2FzIHBheWluZyBhIGhlYXZ5IHBlbmFsdHkgaW4gaGF2aW5nIHRvIHN1Ym1pdCB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66zrHPhM6xz4DOtc+Azrvhv4bPh864zrHOuTwvZm9yZWlnbj4sIHdoaWNoIHlpZWxkcyBubyBzYXRpc2ZhY3Rvcnkgc2Vuc2UsIHVubGVzcwogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIFdvbGYgd2UgaW5zZXJ0IHRoZSBuZWdhdGl2ZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OvOG9tTwvZm9yZWlnbj4uIFRoZQogICAgICAgICAgICAgICAgICAgICAgICBtZWFuaW5nIGluIHRoYXQgY2FzZSB3b3VsZCBiZSB0aGF0IGEgbGlmZSBvZiBydXRobGVzcyBzZWxmLWFzc2VydGlvbiBpcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnGdyZWF0IGdhaW4u4oCdPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvd2V2ZXIsIHRvIHByb3ZlIHRoYXQgSSB3YXMgY29tcGVsbGVkCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSBhIGNvdW50ZXItY2hhbGxlbmdlIGNvbnRyYXJ5IHRvIHdoYXQgSSB0aG91Z2h0IHdhcyByaWdodCwgdGhhdCBJIG9mZmVyZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIHVwIHRoZSBzbGF2ZSwgYW5kIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2luY2UgaGUKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRoaXMsIGFuZCByZWZ1c2VkIHRoZSBjaGFsbGVuZ2Ugd2hpY2ggaGUgaGltc2VsZiBnYXZlIGF0IHRoZSBmaXJzdCwgSQogICAgICAgICAgICAgICAgICAgIHdvbmRlciB3aGF0IGluIHRoZSB3b3JsZCBoZSB3aWxsIGhhdmUgdG8gc2F5IHRvIHlvdS4gQnV0IHRoYXQgeW91IG1heSBrbm93IHdobwogICAgICAgICAgICAgICAgICAgIGl0IGlzIGF0IHdob3NlIGhhbmRzIGhlIGNsYWltcyB0byBoYXZlIHN1ZmZlcmVkIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgaW5kaWduaXRpZXPigJRiZWhvbGQgaGltITxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5IZXJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzcGVha2VyIGVmZmVjdGl2ZWx5IGJyaW5ncyBiZWZvcmUgdGhlIGp1cnkgdGhlIHNsYXZlLCBBbnRpZ2VuZXPigJRhCiAgICAgICAgICAgICAgICAgICAgICAgIGZlZWJsZSwgb2xkIG1hbi48L25vdGU+IFRoaXMgaXMgdGhlIG1hbiB3aG8gZGlzcG9zc2Vzc2VkIFBhbnRhZW5ldHVzOyB0aGlzCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIG1hbiB3aG8gd2FzIHN0cm9uZ2VyIHRoYW4gdGhlIGZyaWVuZHMgb2YgUGFudGFlbmV0dXMsIGFuZCBzdHJvbmdlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MuIEZvciBJIG15c2VsZiB3YXMgbm90IGluIEF0aGVuczsgZXZlbiBoZSBkb2VzIG5vdCBtYWtlIHRoYXQgY2hhcmdlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgdGVsbCB5b3UgYWxzbyB0aGUgbWVhbnMgYnkgd2hpY2ggaGUgbWlzbGVkIHRoZSBmb3JtZXIganVyeSwgYW5kIGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIEV2ZXJndXMsIHRoYXQgeW91IG1heSByZWFsaXplIHRoYXQgaW4gdGhpcyB0cmlhbCBhbHNvIHRoZXJlIHdpbGwgYmUgbm8gbGltaXQgdG8KICAgICAgICAgICAgICAgICAgICBoaXMgaW1wdWRlbmNlIGFuZCB0aGF0IGhlIHdpbGwgc2hyaW5rIGZyb20gbm8gZmFsc2Vob29kcy4gTW9yZSB0aGFuIHRoaXM7IGluCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkIHRvIGhpcyBwcmVzZW50IHN1aXQgYWdhaW5zdCBtZSwgeW91IHdpbGwgZmluZCBteSBtZWFucyBvZiBkZWZlbmNlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBvc3NpYmx5LCDigJx0aGUgY2hhcmdlcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIG1lLuKAnTwvbm90ZT4gYXJlIHRoZSBzYW1lIGFzIHRob3NlIG9mIEV2ZXJndXMsIHdoaWNoIGlzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY29udmluY2luZyBwcm9vZiB0aGF0IEV2ZXJndXMgaGFzIGJlZW4gdGhlIHZpY3RpbSBvZiBhIG1hbGljaW91cyBhbmQgYmFzZWxlc3MKICAgICAgICAgICAgICAgICAgICBjaGFyZ2UuIEZvciBpbiBhZGRpdGlvbiB0byBhbGwgdGhlIG90aGVyIGFjY3VzYXRpb25zIHRoZSBwbGFpbnRpZmYgY2hhcmdlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgRXZlcmd1cyBjYW1lIHRvIGhpcyBob21lIGluIHRoZSBjb3VudHJ5LCBhbmQgbWFkZSBoaXMgd2F5IGludG8gdGhlIGFwYXJ0bWVudHMgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZGF1Z2h0ZXJzLCB3aG8gd2VyZSBoZWlyZXNzZXMsIGFuZCBvZiBoaXMgbW90aGVyOyBhbmQgaGUgYnJvdWdodCB3aXRoIGhpbQogICAgICAgICAgICAgICAgICAgIGludG8gY291cnQgdGhlIGxhd3MgY29uY2VybmluZyBoZWlyZXNzZXMuIDwvdHJhbnNsYXRpb24+"
translation['37.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB5ZXQgdXAgdG8gdGhpcyBkYXkgaGUgaGFzIG5ldmVyIGhhZCB0aGUgY2FzZSBleGFtaW5lZCBiZWZvcmUgdGhlIEFyY2hvbiwgd2hvbQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgYXBwb2ludHMgdG8gaGF2ZSBjaGFyZ2Ugb2Ygc3VjaCBtYXR0ZXJzLCBhbmQgYmVmb3JlIHdob20gdGhlIHdyb25nZG9lcgogICAgICAgICAgICAgICAgICAgIHJ1bnMgdGhlIHJpc2sgb2YgaGF2aW5nIHB1bmlzaG1lbnQgb3IgZmluZSBhZGp1ZGdlZCBhZ2FpbnN0IGhpbSwgd2hpbGUgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRvciByZWRyZXNzIGlzIHNvdWdodCB3aXRob3V0IHJpc2s7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldoZXJlYXMgaW4gdGhlIGNvdXJ0IHRoZSBwbGFpbnRpZmYgcmFuIHRoZSByaXNrIG9mIGhhdmluZyB0byBwYXkgdGhlIGhlYXZ5CiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmFsdHkgb2YgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+Az4nOss6/zrvhvbfOsTwvZm9yZWlnbj4sIGlmIGhlIGZhaWxlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBtYWtlIGdvb2QgaGlzIGNhc2UuIFNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNjciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjcuNjc8L2JpYmw+Ljwvbm90ZT4gbm9yIGhhcyBoZSBpbXBlYWNoZWQgZWl0aGVyIG1lIG9yIEV2ZXJndXMgYXMKICAgICAgICAgICAgICAgICAgICB3cm9uZ2RvZXJzLCBidXQgaGUgbWFkZSB0aGVzZSBjaGFyZ2VzIGluIHRoZSBjb3VydC1yb29tLCBhbmQgc2VjdXJlZCBhIHZlcmRpY3QKICAgICAgICAgICAgICAgICAgICBmb3IgdHdvIHRhbGVudHMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+Az4nOss6/zrvhvbfOsTwvZm9yZWlnbj4sIGlmIGhlIGZhaWxlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBtYWtlIGdvb2QgaGlzIGNhc2UuIFNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNjciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjcuNjc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['37.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIEkgdGFrZSBpdCwgaXQgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gYW4gZWFzeSBtYXR0ZXIgZm9yIEV2ZXJndXMsIGlmIGhlIGhhZCBrbm93biBpbiBhZHZhbmNlIO+8iGFzIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgaGUgc2hvdWxkIGhhdmUga25vd27vvIkgdGhlIGNoYXJnZSBvbiB3aGljaCBoZSB3YXMgYmVpbmcgdHJpZWQsCiAgICAgICAgICAgICAgICAgICAgdG8gc2V0IGZvcnRoIHRoZSB0cnV0aCBvZiB0aGUgbWF0dGVyIGFuZCB0aGUganVzdGljZSBvZiBoaXMgY2F1c2UsIGFuZCBzbyB3aW4KICAgICAgICAgICAgICAgICAgICBhY3F1aXR0YWw7IGJ1dCBpbiBhIG1pbmluZyBzdWl0IHJlZ2FyZGluZyBtYXR0ZXJzIGNvbmNlcm5pbmcgd2hpY2ggaGUgY291bGQKICAgICAgICAgICAgICAgICAgICBuZXZlciBoYXZlIGltYWdpbmVkIHRoYXQgaGUgd291bGQgYmUgYWNjdXNlZCwgaXQgd2FzIGhhcmQgdG8gZmluZCwgb2ZmaGFuZCwKICAgICAgICAgICAgICAgICAgICBtZWFucyB0byBmcmVlIGhpbXNlbGYgZnJvbSB0aGUgZmFsc2UgY2hhcmdlczsgYW5kIHRoZSBpbmRpZ25hdGlvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EdWUgdG8gdGhlIGFsbGVnZWQgaW50cnVzaW9uIGludG8gdGhlIHdvbWVuJ3MKICAgICAgICAgICAgICAgICAgICAgICAgYXBhcnRtZW50Ljwvbm90ZT4gb2YgdGhlIGp1cnltZW4sIHdobyB3ZXJlIG1pc2xlZCBieSB0aGUgcGxhaW50aWZmLCBmb3VuZAogICAgICAgICAgICAgICAgICAgIGhpbSBndWlsdHkgaW4gdGhlIG1hdHRlciB1cG9uIHdoaWNoIHRoZXkgc2F0IGluIGp1ZGdlbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['37.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGRvIHlvdSB0aGluayB0aGF0IHRoZSBtYW4gd2hvIGRlY2VpdmVkIHRob3NlIGp1cnltZW4KICAgICAgICAgICAgICAgICAgICB3aWxsIGhlc2l0YXRlIHRvIHRyeSB0byBkZWNlaXZlIHlvdT/igJRvciB0aGF0IGhlIGNvbWVzIGludG8gY291cnQgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpcyBjb25maWRlbmNlIGZpeGVkIHVwb24gdGhlIGZhY3RzLCBhbmQgbm90IHJhdGhlciB1cG9uIGFzc2VydGlvbnMgYW5kIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHdobyBhcmUgaW4gbGVhZ3VlIHdpdGggaGltIO+8iHRoYXQgZm91bCBibGFja2d1YXJkIFByb2NsZXMsIHRoZQogICAgICAgICAgICAgICAgICAgIHRhbGwgZmVsbG93IHRoZXJlLCBhbmQgU3RyYXRvY2xlcywgdGhlIHNtb290aGVzdC10b25ndWVkIG9mIG1lbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFzZXN077yJLCBhbmQgaW4gaGlzIHJlYWRpbmVzcyB0byB3ZWVwIGFuZCB3YWlsIHdpdGhvdXQgZGlzZ3Vpc2Ugb3IKICAgICAgICAgICAgICAgICAgICBzaGFtZT8gPC90cmFuc2xhdGlvbj4="
translation['37.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IGFyZSBzbyBmYXIgZnJvbSBkZXNlcnZpbmcgcGl0eSwKICAgICAgICAgICAgICAgICAgICB0aGF0IG1vcmUgdGhhbiBhbnkgbWFuIGluIHRoZSB3b3JsZCB5b3Ugc2hvdWxkIHJpZ2h0bHkgYmUgZGV0ZXN0ZWQgZm9yIHRoZSBkZWVkcwogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHdyb3VnaHTigJR5b3Ugd2hvLCBvd2luZyBvbmUgaHVuZHJlZCBhbmQgZml2ZSBtaW5hZSBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWJsZSB0byBzYXRpc2Z5IHlvdXIgY3JlZGl0b3JzLCBhbmQgdGhlbiBmaW5kaW5nIG1lbiB3aG8gaGVscGVkIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIHJhaXNlIHRoZSBtb25leSBhbmQgZW5hYmxlZCB5b3UgdG8gZG8gd2hhdCB3YXMgcmlnaHQgYnkgdGhvc2Ugd2hvIG9yaWdpbmFsbHkKICAgICAgICAgICAgICAgICAgICBtYWRlIHRoZSBsb2FuLCBhcmUgc2Vla2luZywgcXVpdGUgYXBhcnQgZnJvbSB0aGUgd3JvbmdzIHlvdSBjb21taXR0ZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZW0gaW4gcmVnYXJkIHRvIHRoZSBsb2FuIGl0c2VsZiwgYWxzbyB0byBkZXByaXZlIHRoZW0gb2YgdGhlaXIgY2l2aWMgcmlnaHRzLgogICAgICAgICAgICAgICAgICAgIEluIHRoZSBjYXNlIG9mIG90aGVyIG1lbiBvbmUgbWF5IHNlZSBib3Jyb3dlcnMgaGF2aW5nIHRvIGdpdmUgdXAgdGhlaXIgcHJvcGVydHksCiAgICAgICAgICAgICAgICAgICAgYnV0IGluIHlvdXIgY2FzZSBpdCBpcyB0aGUgbGVuZGVyIHdobyBoYXMgY29tZSB0byB0aGlzIHBsaWdodCwgYW5kLCBoYXZpbmcgbGVudAogICAgICAgICAgICAgICAgICAgIGEgdGFsZW50LCBoYXMgYmVlbiBmb3JjZWQgdG8gcGF5IHR3byB0YWxlbnRzIGFzIHRoZSB2aWN0aW0gb2YgYSBiYXNlbGVzcyBjaGFyZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgSSwgd2hvIGxlbnQgZm9ydHkgbWluYWUsIGFtIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgc3VpdCBmb3IgdHdvIHRhbGVudHMuIEFnYWluLCBvbiBwcm9wZXJ0eSBvbiB3aGljaCB5b3Ugd2VyZSBuZXZlciBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgYm9ycm93IG1vcmUgdGhhbiBvbmUgaHVuZHJlZCBtaW5hZSwgYW5kIHdoaWNoIHlvdSBzb2xkIG91dHJpZ2h0IGZvciB0aHJlZQogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgYW5kIHR3byB0aG91c2FuZCBkcmFjaG1hZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaW4KICAgICAgICAgICAgICAgICAgICAgICAgcm91bmQgbnVtYmVycy4gSW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNy4zMSIgdmFsaWQ9InllcyI+RGVtLiAzNy4zMTwvYmlibD4gdGhlIHN1bSBpcyBnaXZlbiBhcwogICAgICAgICAgICAgICAgICAgICAgICB0aHJlZSB0YWxlbnRzLCB0d2VudHktc2l4IGh1bmRyZWQgZHJhY2htYWUuPC9ub3RlPiB5b3UgaGF2ZSwgYXMgaXQgc2VlbXMsCiAgICAgICAgICAgICAgICAgICAgc3VzdGFpbmVkIGRhbWFnZXMgdG8gdGhlIGFtb3VudCBvZiBmb3VyIHRhbGVudHMhIEZyb20gd2hvbT8gRnJvbSBteSBzbGF2ZSwgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBzYXkuIEJ1dCB3aGF0IGNpdGl6ZW4gd291bGQgbGV0IGhpbXNlbGYgYmUgb3VzdGVkIGZyb20gaGlzIG93biBwcm9wZXJ0eSBieQogICAgICAgICAgICAgICAgICAgIGEgc2xhdmU/IE9yIHdobyB3b3VsZCBzYXkgdGhhdCBpdCBpcyByaWdodCB0aGF0IG15IHNsYXZlIGJlIGhlbGQgcmVzcG9uc2libGUgZm9yCiAgICAgICAgICAgICAgICAgICAgYWN0cywgZm9yIHdoaWNoIHRoZSBwbGFpbnRpZmYgaGFzIGJyb3VnaHQgYWN0aW9uIGFnYWluc3QgRXZlcmd1cyBhbmQgb2J0YWluZWQgYQogICAgICAgICAgICAgICAgICAgIHZlcmRpY3Q/IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuMzEiIHZhbGlkPSJ5ZXMiPkRlbS4gMzcuMzE8L2JpYmw+IHRoZSBzdW0gaXMgZ2l2ZW4gYXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWUgdGFsZW50cywgdHdlbnR5LXNpeCBodW5kcmVkIGRyYWNobWFlLjwvdHJhbnNsYXRpb24+"
translation['37.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIGFsbCB0aGlzLCB0aGUgcGxhaW50aWZmIGhhcwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgZ2l2ZW4gaGltIGEgcmVsZWFzZSBmcm9tIGFsbCBjaGFyZ2VzIG9mIHRoaXMga2luZC4gSGUgb3VnaHQgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc3RhdGluZyB0aGVzZSBjaGFyZ2VzIG5vdywgbm9yIHRvIGhhdmUgaW5zZXJ0ZWQgdGhlbSBpbiB0aGUgY2hhbGxlbmdlIGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgZGVtYW5kZWQgdGhlIHNsYXZlIGZvciB0b3J0dXJlLCBidXQgdG8gaGF2ZSBpbnN0aXR1dGVkIHN1aXQgYWdhaW5zdCBoaW0sIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgcHJvc2VjdXRlZCBtZSBhcyBoaXMgb3duZXIuIEFzIGl0IGlzLCBoZSBoYXMgaW5zdGl0dXRlZCBzdWl0IGFnYWluc3QgbWUsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFjY3VzZXMgaGltLiBUaGlzIHRoZSBsYXdzIGRvIG5vdCBwZXJtaXQuIEZvciB3aG9ldmVyIGluc3RpdHV0ZWQgc3VpdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIG1hc3RlciwgYW5kIGNoYXJnZWQgdGhlIGZhY3RzIGFnYWluc3QgaGlzIHNsYXZl4oCUYXMgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgdGhlIHNsYXZlIGhhZCBhbnkgYXV0aG9yaXR5IG9mIGhpcyBvd24/IDwvdHJhbnNsYXRpb24+"
translation['37.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBhbnlvbmUgYXNrcyBoaW0sIOKAnFdoYXQgdmFsaWQKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VzIHdpbGwgeW91IGJlIGFibGUgdG8gbWFrZSBhZ2FpbnN0IE5pY29idWx1cz/igJ0gaGUgc2F5cywKICAgICAgICAgICAgICAgICAgICDigJxUaGUgQXRoZW5pYW5zIGhhdGUgbW9uZXktbGVuZGVyczsgTmljb2J1bHVzIGlzIGFuIG9kaW91cyBmZWxsb3c7IGhlCiAgICAgICAgICAgICAgICAgICAgd2Fsa3MgZmFzdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q29tcGFyZSBPcmF0aW9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUuNzciIHZhbGlkPSJ5ZXMiPkRlbS4gNDUuNzc8L2JpYmw+Ljwvbm90ZT4gaGUgdGFsa3MgbG91ZCwgYW5kIGhlIGNhcnJpZXMgYSBjYW5lOyBhbmQKICAgICAgICAgICAgICAgICAgICDvvIhoZSBzYXlz77yJIGFsbCB0aGVzZSB0aGluZ3MgY291bnQgaW4gbXkgZmF2b3Iu4oCdIEhlIGlzCiAgICAgICAgICAgICAgICAgICAgbm90IGFzaGFtZWQgdG8gdGFsayBpbiB0aGlzIHdheSwgYW5kIGFsc28gZmFuY2llcyB0aGF0IGhpcyBoZWFyZXJzIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmQgdGhhdCB0aGlzIGlzIHRoZSByZWFzb25pbmcsIG5vdCBvZiBvbmUgd2hvIGhhcyBzdWZmZXJlZCB3cm9uZywgYnV0IG9mCiAgICAgICAgICAgICAgICAgICAgYSBtYWxpY2lvdXMgcGV0dGlmb2dnZXIuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDUuNzciIHZhbGlkPSJ5ZXMiPkRlbS4gNDUuNzc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['37.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5JLCBmb3IgbXkgcGFydCwgZG8KICAgICAgICAgICAgICAgICAgICBub3QgcmVnYXJkIGEgbW9uZXktbGVuZGVyIGFzIGEgd3Jvbmdkb2VyLCBhbHRob3VnaCBjZXJ0YWluIG9mIHRoZSBjbGFzcyBtYXkKICAgICAgICAgICAgICAgICAgICBqdXN0bHkgYmUgZGV0ZXN0ZWQgYnkgeW91LCBzZWVpbmcgdGhhdCB0aGV5IG1ha2UgYSB0cmFkZSBvZiBpdCwgYW5kIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IG9mIHBpdHkgb3Igb2YgYW55dGhpbmcgZWxzZSwgZXhjZXB0IGdhaW4uIFNpbmNlIEkgaGF2ZSBteXNlbGYgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCBtb25leSwgYW5kIG5vdCBtZXJlbHkgbGVudCBpdCB0byB0aGUgcGxhaW50aWZmLCBJIGtub3cgdGhlc2UgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgd2VsbDsgYW5kIEkgZG8gbm90IGxpa2UgdGhlbSwgZWl0aGVyIGJ1dCwgYnkgWmV1cywgSSBkbyBub3QgZGVmcmF1ZCB0aGVtLCBub3IKICAgICAgICAgICAgICAgICAgICBicmluZyBtYWxpY2lvdXMgY2hhcmdlcyBhZ2FpbnN0IHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['37.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgYQogICAgICAgICAgICAgICAgICAgIG1hbiBoYXMgZG9uZSBidXNpbmVzcyBhcyBJIGhhdmUsIGdvaW5nIHRvIHNlYSBvbiBwZXJpbG91cyBqb3VybmV5cywgYW5kIGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgc21hbGwgcHJvZml0cyBoYXMgbWFkZSB0aGVzZSBsb2Fucywgd2lzaGluZyBub3Qgb25seSB0byBjb25mZXIgZmF2b3JzLCBidXQgdG8KICAgICAgICAgICAgICAgICAgICBwcmV2ZW50IGhpcyBtb25leSBmcm9tIHNsaXBwaW5nIHRocm91Z2ggaGlzIGZpbmdlcnMgd2l0aG91dCBoaXMga25vd2luZyBpdCwgd2h5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG9uZSBzZXQgaGltIGRvd24gaW4gdGhhdCBjbGFzcz/igJR1bmxlc3MgeW91IG1lYW4gdGhpcywgdGhhdAogICAgICAgICAgICAgICAgICAgIGFueW9uZSB3aG8gbGVuZHMgbW9uZXkgdG8geW91IG91Z2h0IHRvIGJlIGRldGVzdGVkIGJ5IHRoZSBwdWJsaWMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgbWUsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb25zLCB0byBzaG93IHdoYXQgbWFubmVyIG9mCiAgICAgICAgICAgICAgICAgICAgbWFuIEkgYW0gdG8gdGhvc2Ugd2hvIGxlbmQgbW9uZXksIGFuZCB0byB0aG9zZSB3aG8gbmVlZCBteSBoZWxwLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhbSBJLAogICAgICAgICAgICAgICAgICAgIFBhbnRhZW5ldHVzLCB0aGUgZmFzdCB3YWxrZXIsIGFuZCBzdWNoIGFyZSB5b3UsIHdobyB3YWxrIHNsb3dseS4gSG93ZXZlciwKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgbXkgZ2FpdCBhbmQgbXkgbWFubmVyIG9mIHNwZWVjaCwgSSB3aWxsIHRlbGwgeW91IHRoZSB3aG9sZSB0cnV0aCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHdpdGggYWxsIGZyYW5rbmVzcy4gSSBhbSBwZXJmZWN0bHkgYXdhcmXigJRJIGFtIG5vdCBibGluZAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBmYWN04oCUdGhhdCBJIGFtIG5vdCBvbmUgb2YgdGhvc2UgZmF2b3JlZCBieSBuYXR1cmUgaW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICByZXNwZWN0cywgbm9yIG9mIHRob3NlIHdobyBhcmUgYW4gYWR2YW50YWdlIHRvIHRoZW1zZWx2ZXMuIEZvciBpZiBpbiBtYXR0ZXJzIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSByZWFwIG5vIHByb2ZpdCwgSSBhbm5veSBvdGhlcnMsIHN1cmVseSBJIGFtIHRvIHRoaXMgZXh0ZW50IHVuZm9ydHVuYXRlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCBpcyB0byBjb21lIG9mIGl0PyBJZiBJIGxlbmQgbW9uZXkKICAgICAgICAgICAgICAgICAgICB0byBzby1hbmQtc28sIGFtIEkgZm9yIHRoaXMgcmVhc29uIGFsc28gdG8gbG9zZSBteSBzdWl0PyBTdXJlbHkgbm90LiBUaGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgY2Fubm90IHBvaW50IG91dCBhbnkgYmFzZW5lc3Mgb3IgdmlsbGFpbnkgYXR0YWNoaW5nIHRvIG1lLCBub3IgZG9lcyBhCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIG9uZSBhbW9uZyB5b3UsIG1hbnkgYXMgeW91IGFyZSwga25vdyBhbnkgc3VjaCB0aGluZyBhZ2FpbnN0IG1lLiBBcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZXNlIG90aGVyIHF1YWxpdGllcywgZWFjaCBvbmUgb2YgdXMsIEkgdGFrZSBpdCwgaXMgYXMgbmF0dXJlIGhhcHBlbmVkIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBoaW07IGFuZCB0byBmaWdodCBhZ2FpbnN0IG5hdHVyZSwgd2hlbiBvbmUgaGFzIHRoZXNlIGNoYXJhY3RlcmlzdGljcywgaXMgbm8gZWFzeQogICAgICAgICAgICAgICAgICAgIHRhc2sg77yIZm9yIG90aGVyd2lzZSB3ZSBzaG91bGQgbm90IGRpZmZlciBmcm9tIG9uZSBhbm90aGVy77yJOwogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0byByZWNvZ25pemUgdGhlbSBpbiBsb29raW5nIG9uIGFub3RoZXIgYW5kIHRvIGNyaXRpY2l6ZSB0aGVtIGlzIGVhc3kuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hpY2ggb25lIG9mIHRoZXNlIHF1YWxpdGllcyBoYXMgYW55CiAgICAgICAgICAgICAgICAgICAgYmVhcmluZyBvbiBteSBkaXNwdXRlIHdpdGggeW91LCBQYW50YWVuZXR1cz8gWW91IGhhdmUgc3VmZmVyZWQgbWFueSBncmlldm91cwogICAgICAgICAgICAgICAgICAgIHdyb25ncz8gV2VsbCwgeW91IGhhdmUgaGFkIHNhdGlzZmFjdGlvbi4gTm90IGZyb20gbWU/IE5vOyBmb3IgeW91IHdlcmUgbm90CiAgICAgICAgICAgICAgICAgICAgd3JvbmdlZCBpbiBhbnkgd2F5IGJ5IG1lLiBPdGhlcndpc2UgeW91IHdvdWxkIG5ldmVyIGhhdmUgZ2l2ZW4gbWUgdGhlIHJlbGVhc2UsCiAgICAgICAgICAgICAgICAgICAgbm9yLCB3aGVuIHlvdSB3ZXJlIG1ha2luZyB1cCB5b3VyIG1pbmQgdG8gYnJpbmcgc3VpdCBhZ2FpbnN0IEV2ZXJndXMsIHdvdWxkIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgcGFzc2VkIG1lIGJ5OyBub3Igd291bGQgeW91IGhhdmUgZGVtYW5kZWQgdGhhdCBvbmUgd2hvIGhhZCBkb25lIHlvdSBtYW55CiAgICAgICAgICAgICAgICAgICAgZ3JpZXZvdXMgd3JvbmdzIHNob3VsZCB1bmRlcnRha2UgdG8gYmUgdmVuZG9yIG9mIHRoZSBwcm9wZXJ0eS4gQmVzaWRlcywgaG93CiAgICAgICAgICAgICAgICAgICAgY291bGQgSSBoYXZlIHdyb25nZWQgeW91LCB3aGVuIEkgd2FzIG5vdCBwcmVzZW50IG9yIGV2ZW4gaW4gdGhlIGNvdW50cnk/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIHN1cHBvc2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvbGxvd2luZyBwYXNzYWdlIGlzIHJlcGVhdGVkIGFsbW9zdCB2ZXJiYXRpbSBpbiB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgICAgICBvcmF0aW9uLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM4LjIxIiB2YWxpZD0ieWVzIj5EZW0uIDM4LjIxLTIyPC9iaWJsPi48L25vdGU+IG9uZSBzaG91bGQgZ3JhbnQKICAgICAgICAgICAgICAgICAgICB0aGF0IFBhbnRhZW5ldHVzIGhhcyBzdWZmZXJlZCB0aGUgZ3JlYXRlc3QgcG9zc2libGUgd3JvbmdzLCBhbmQgdGhhdCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgd2lsbCBub3cgYWxsZWdlIGFib3V0IHRoZXNlIG1hdHRlcnMgaXMgdHJ1ZSwgdGhpcywgYXQgbGVhc3QsIEkgcHJlc3VtZSwKICAgICAgICAgICAgICAgICAgICB5b3Ugd291bGQgYWxsIGFkbWl0OiB0aGF0IGl0IGhhcyBoYXBwZW5lZCB0byBvdGhlcnMgZXJlIG5vdyB0byBoYXZlIHN1ZmZlcmVkCiAgICAgICAgICAgICAgICAgICAgbWFueSB3cm9uZ3MgbW9yZSBzZXJpb3VzIHRoYW4gcGVjdW5pYXJ5IHdyb25ncy4gRm9yIGludm9sdW50YXJ5IGhvbWljaWRlcywKICAgICAgICAgICAgICAgICAgICBvdXRyYWdlcyBvbiB3aGF0IGlzIHNhY3JlZCwgYW5kIG1hbnkgb3RoZXIgc3VjaCBjcmltZXMgYXJlIGNvbW1pdHRlZDsgeWV0IGluIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIGNhc2VzIHRoZSBmYWN0IHRoYXQgdGhleSBoYXZlIHlpZWxkZWQgdG8gcGVyc3Vhc2lvbiBhbmQgZ2l2ZW4gYSByZWxlYXNlIGlzCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIGZvciB0aGUgcGFydGllcyB3cm9uZ2VkIGFzIGEgbGltaXQgYW5kIHNldHRsZW1lbnQgb2YgdGhlIGRpc3B1dGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzguMjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMzguMjEtMjI8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['37.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBqdXN0IHByaW5jaXBsZSBpcyBzbyBiaW5kaW5nCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgYWxsIG1lbiwgdGhhdCBpZiBhbnlvbmUgaGF2aW5nIGNvbnZpY3RlZCBhbm90aGVyIG9mIGludm9sdW50YXJ5IGhvbWljaWRlLAogICAgICAgICAgICAgICAgICAgIGFuZCBjbGVhcmx5IHNob3duIGhpbSB0byBiZSBwb2xsdXRlZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SG9taWNpZGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW4gaWYgYWNjaWRlbnRhbCwgZW50YWlsZWQgcG9sbHV0aW9uLCB3aGljaCByZXF1aXJlZCBleHBpYXRpb24uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHN1YnNlcXVlbnRseSB0YWtlcyBwaXR5IG9uIGhpbSBhbmQgcmVsZWFzZXMgaGltLCBoZSBoYXMgbm8gbG9uZ2VyIHRoZSByaWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIHNhbWUgcGVyc29uIGRyaXZlbiBpbnRvIGV4aWxlLiBBZ2FpbiwgaWYgdGhlIHZpY3RpbSBoaW1zZWxmIGJlZm9yZSBoaXMKICAgICAgICAgICAgICAgICAgICBkZWF0aCByZWxlYXNlcyB0aGUgbXVyZGVyZXIgZnJvbSBibG9vZGd1aWx0aW5lc3MsIGl0IGlzIG5vdCBsYXdmdWwgZm9yIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZW1haW5pbmcga2luc21lbiB0byBwcm9zZWN1dGU7IGJ1dCB0aG9zZSB3aG9tIHRoZSBsYXdzIHNlbnRlbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgYmFuaXNobWVudCBhbmQgZXhpbGUgYW5kIGRlYXRoLCB1cG9uIGNvbnZpY3Rpb24sIGlmIHRoZXkgYXJlIG9uY2UgcmVsZWFzZWQsIGFyZQogICAgICAgICAgICAgICAgICAgIGJ5IHRoYXQgd29yZCBmcmVlZCBmcm9tIGFsbCBldmlsIGNvbnNlcXVlbmNlcy4gPC90cmFuc2xhdGlvbj4="
translation['37.60'] = ""
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbmFzbXVjaCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzLCBtZW4gb2YgdGhlIGp1cnksIGhhdmUgZ3JhbnRlZCB0aGF0IGEgc3BlY2lhbCBwbGVhIG1heSBiZSBlbnRlcmVkIGluIGNhc2VzCiAgICAgICAgICAgICAgICAgICAgd2hlcmUgYSBtYW4sIGFmdGVyIGdpdmluZyBhIHJlbGVhc2UgYW5kIGRpc2NoYXJnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG9wZW5pbmcgc2VudGVuY2VzIG9mIHRoaXMgc3BlZWNoIHJlcGVhdCBhbG1vc3QgdmVyYmF0aW0KICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb2YgdGhlIHByZWNlZGluZyBvcmF0aW9uLjwvbm90ZT4gbmV2ZXJ0aGVsZXNzIGJyaW5ncyBzdWl0LCBhbmQgYXMgYm90aAogICAgICAgICAgICAgICAgICAgIG9mIHRoZXNlIGhhdmUgYmVlbiBnaXZlbiB0byBvdXIgZmF0aGVyIGJ5IE5hdXNpbWFjaHVzIGFuZCBYZW5vcGVpdGhlcyB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbW1lbmNlZCBzdWl0IGFnYWluc3QgdXMsIHdlIGhhdmUgcGxlYWRlZCwgYXMgeW91IGhhdmUganVzdCBub3cgaGVhcmQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVpciBzdWl0IGlzIG5vdCBhZG1pc3NpYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgbWFrZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdSBhbGwgYSBqdXN0IGFuZCByZWFzb25hYmxlIHJlcXVlc3Q6IGZpcnN0LCB0aGF0IHlvdSBsaXN0ZW4gdG8gbXkgd29yZHMgd2l0aAogICAgICAgICAgICAgICAgICAgIGdvb2R3aWxsLCBhbmQsIHNlY29uZGx5LCB0aGF0IGlmIHlvdSB0aGluayB0aGF0IEkgYW0gYmVpbmcgd3JvbmdlZCBhbmQgbWFkZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBpbiBhIHN1aXQgd2hpY2ggaGFzIG5vIHZhbGlkIGJhc2lzLCB5b3UgcmVuZGVyIG1lIHRoZSBzdWNjb3Igd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBteSBkdWUuIFRoZSBkYW1hZ2VzIGNsYWltZWQgaW4gdGhlIGFjdGlvbiBhcmUsIGFzIHlvdSBoYXZlIGhlYXJkLCB0aGlydHkgbWluYWU7CiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBzdW0gZm9yIHdoaWNoIHdlIGFyZSByZWFsbHkgYmVpbmcgc3VlZCBpcyBmb3VyIHRhbGVudHMuIEZvciB0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICB0d28gb2YgdGhlbSwgYW5kIHRoZXkgaGF2ZSBlbnRlcmVkIGZvdXIgc3VpdHMgYWdhaW5zdCB1cywgYWxsIGZvciBhIGxpa2UgYW1vdW50LAogICAgICAgICAgICAgICAgICAgIGVhY2ggZm9yIHRocmVlIHRob3VzYW5kIGRyYWNobWFlIGRhbWFnZXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZyb20KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBpdCBpcyBwbGFpbiB0aGF0IGVhY2ggb2YgdGhlIHR3byBjbGFpbWFudHMgYnJvdWdodCBzdWl0IGFnYWluc3QgZWFjaCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZm91ciBzb25zIG9mIEFyaXN0YWVjaG11cy4gVGhpcyBtYWtlcyBlaWdodCBzdWl0cyBmb3IgdGhpcnR5IG1pbmFlIGVhY2gsCiAgICAgICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgdGhlIHRvdGFsIGFtb3VudCBpcyBmb3VyIHRhbGVudHMuPC9ub3RlPiBhbmQgbm93IG9uIGEgY29tcGxhaW50IGZvcgogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSBtaW5hZSB3ZSBhcmUgYnJvdWdodCB0byB0cmlhbCBmb3Igc28gbGFyZ2UgYSBzdW0uIDwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWxpY2lvdXMgYWN0aW9ucyBvZiB0aGVzZSBtZW4sIGFuZCB0aGUgZ3VpbGUgd2l0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBwcm9jZWVkZWQgYWdhaW5zdCB1cywgeW91IHdpbGwgY29tZSB0byBrbm93IGZyb20gdGhlIGZhY3RzIHRoZW1zZWx2ZXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IGZpcnN0IHRoZSBjbGVyayBzaGFsbCByZWFkIHRvIHlvdSB0aGUgZGVwb3NpdGlvbnMgd2hpY2ggc2hvdyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICByZWxlYXNlZCBvdXIgZmF0aGVyIGZyb20gdGhlIGNoYXJnZXMgd2hpY2ggdGhleSBtYWRlIG9uIHRoZSBtYXR0ZXIgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW5zaGlwOyBmb3IgaXQgaXMgb24gdGhpcyBncm91bmQgdGhhdCB3ZSBlbnRlcmVkIG91ciBwbGVhIHRoYXQgdGhlIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGlzIG5vdCBtYWludGFpbmFibGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBsZWFzZSByZWFkIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIHN1aXQsIG1lbiBvZiB0aGUganVyeSwgcmVnYXJkaW5nIHRoZSBndWFyZGlhbnNoaXA7IHRoYXQgdGhleSBkcm9wcGVkCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgYWN0aW9uczsgYW5kIHRoYXQgdGhleSBoYXZlIGluIHRoZWlyIHBvc3Nlc3Npb24gdGhlIHN1bXMgb2YgbW9uZXkgYWdyZWVkCiAgICAgICAgICAgICAgICAgICAgdXBvbiwgeW91IGhlYXIgZnJvbSB0aGUgd2l0bmVzc2VzLiBUaGF0IHRoZSBsYXdzIGRvIG5vdCBhbGxvdyBzdWl0IHRvIGJlIGVudGVyZWQKICAgICAgICAgICAgICAgICAgICBhZnJlc2ggcmVnYXJkaW5nIG1hdHRlcnMgd2hpY2ggaGF2ZSBiZWVuIHRodXMgc2V0dGxlZCwgSSBwcmVzdW1lIHlvdSBrbm93LCBldmVuCiAgICAgICAgICAgICAgICAgICAgaWYgSSBzYXkgbm90aGluZyBhYm91dCB0aGUgbWF0dGVyOyBuZXZlcnRoZWxlc3MgSSB3YW50IHRvIHJlYWQgeW91IHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICAgICAgaXRzZWxmLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGVhciB0aGUKICAgICAgICAgICAgICAgICAgICBsYXcsIG1lbiBvZiB0aGUganVyeSwgZXhwcmVzc2x5IHN0YXRpbmcgdGhlIHNldmVyYWwgY2FzZXMgaW4gd2hpY2ggdGhlcmUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBubyBhY3Rpb25zLiBPbmUgb2YgdGhlbSDvvIhhbmQgaXQgaXMgYXMgYmluZGluZyBhcyBhbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXJz77yJIGlzIHRoYXQgc3VpdCBtYXkgbm90IGJlIGJyb3VnaHQgaW4gbWF0dGVycyBmb3Igd2hpY2ggYW55b25lIGhhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIGEgcmVsZWFzZSBhbmQgZGlzY2hhcmdlLiBZZXQsIGFsdGhvdWdoIHRoZSByZWxlYXNlIHdhcyB0aHVzIGdpdmVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbmNlIG9mIG51bWVyb3VzIHdpdG5lc3NlcywgYW5kIGFsdGhvdWdoIHRoZSBsYXcgbWFuaWZlc3RseSBhYnNvbHZlcyB1cywKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gaGF2ZSBjb21lIHRvIHN1Y2ggYSBwaXRjaCBvZiBzaGFtZWxlc3NuZXNzIGFuZCBhdWRhY2l0eSwgPC90cmFuc2xhdGlvbj4="
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQsIHdoZW4gZm91cnRlZW4geWVhcnMgaGF2ZSBlbGFwc2VkIGZyb20gdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgZ2F2ZSBteSBmYXRoZXIgYSByZWxlYXNlLCBhbmQgdHdlbnR5LXR3byB5ZWFycyBhZnRlciB0aGV5IGhhZCBmaXJzdAogICAgICAgICAgICAgICAgICAgIGluZGljdGVkIGhpbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBwYXNzYWdlIG9mZmVycyBkaWZmaWN1bHRpZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBiZXN0IGVzdGFibGlzaGVkIHRleHQgY2FuIGJlIHJlbmRlcmVkIG9ubHkgYXMgYWJvdmU7IGJ1dCB0aGUgcXVlc3Rpb24gYXQKICAgICAgICAgICAgICAgICAgICAgICAgb25jZSBhcmlzZXM6IHdoeSB0aGUgbG9uZyBsYXBzZSBvZiB0aW1lIGJldHdlZW4gdGhlIGZpbGluZyBvZiB0aGUgc3VpdCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNldHRsZW1lbnQ/IEFnYWluLCB0aGUgdXNlIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6zzrXOs8+BzrHOvM684b2zzr3Ov865PC9mb3JlaWduPiBvZiBhIGNpdmlsIHN1aXQgaXMgc3VwcmlzaW5nLCBhbHRob3VnaCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgbWlnaHQgYmUgbWV0IGJ5IGFzc3VtaW5nIO+8iHdpdGggS2VubmVkee+8iSB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIHByb3NlY3V0aW9uIGlzIG1lYW50OyBidXQgZXZlbiBzbyB0aGUgZWlnaHQgeWVhciBwZXJpb2QgcmVtYWlucwogICAgICAgICAgICAgICAgICAgICAgICB1bmV4cGxhaW5lZC4gSWYgd2l0aCBNUy4gQSB3ZSByZWFkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM6zzrPOtc6zz4HOsc68zrzhvbPOvc6/zrk8L2ZvcmVpZ24+IGFuZCByZW5kZXIsIOKAnGFmdGVyIHRoZXkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgZW5yb2xsZWQgYXMgY2l0aXplbnMs4oCdIHdlIHN0aWxsIGhhdmUgdG8gYXNrIHdoeSB0aGV5IHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRlZCBlaWdodCB5ZWFycyBhZnRlciBhdHRhaW5pbmcgdGhlaXIgbWFqb3JpdHkgYmVmb3JlIHNlZWtpbmcgYW4KICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudGluZyBmcm9tIHRoZWlyIGd1YXJkaWFucy48L25vdGU+IHdoZW4gbXkgZmF0aGVyIHdhcyBub3cgZGVhZCwgd2l0aAogICAgICAgICAgICAgICAgICAgIHdob20gdGhlIHNldHRsZW1lbnQgaGFkIGJlZW4gbWFkZSBhbmQgYWxzbyB0aGUgZ3VhcmRpYW5zIHdobyBhZnRlciBoaXMgZGVhdGggaGFkCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlIG9mIG91ciBwcm9wZXJ0eSwgd2hlbiB0aGVpciBvd24gbW90aGVyLCB0b28sIHdhcyBkZWFkLCB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgd2VsbC1pbmZvcm1lZCByZWdhcmRpbmcgYWxsIHRoZXNlIG1hdHRlcnMsIGFuZCB0aGUgYXJiaXRyYXRvcnMsIHRoZSB3aXRuZXNzZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFsbW9zdCBldmVyeWJvZHkgZWxzZSwgaWYgSSBtYXkgc28gc2F5LCBjb3VudGluZyBvdXIgaW5leHBlcmllbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBpZ25vcmFuY2UgYSBib29uIHRvIHRoZW1zZWx2ZXMsIHRoZXkgaGF2ZSBpbnN0aXR1dGVkIHRoZXNlIHN1aXRzCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB1cywgYW5kIGhhdmUgdGhlIGF1ZGFjaXR5IHRvIG1ha2Ugc3RhdGVtZW50cyB3aGljaCBhcmUgbmVpdGhlciBqdXN0IG5vcgogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6zzrXOs8+BzrHOvM684b2zzr3Ov865PC9mb3JlaWduPiBvZiBhIGNpdmlsIHN1aXQgaXMgc3VwcmlzaW5nLCBhbHRob3VnaCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgbWlnaHQgYmUgbWV0IGJ5IGFzc3VtaW5nIO+8iHdpdGggS2VubmVkee+8iSB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIHByb3NlY3V0aW9uIGlzIG1lYW50OyBidXQgZXZlbiBzbyB0aGUgZWlnaHQgeWVhciBwZXJpb2QgcmVtYWlucwogICAgICAgICAgICAgICAgICAgICAgICB1bmV4cGxhaW5lZC4gSWYgd2l0aCBNUy4gQSB3ZSByZWFkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM6zzrPOtc6zz4HOsc68zrzhvbPOvc6/zrk8L2ZvcmVpZ24+IGFuZCByZW5kZXIsIOKAnGFmdGVyIHRoZXkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgZW5yb2xsZWQgYXMgY2l0aXplbnMs4oCdIHdlIHN0aWxsIGhhdmUgdG8gYXNrIHdoeSB0aGV5IHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRlZCBlaWdodCB5ZWFycyBhZnRlciBhdHRhaW5pbmcgdGhlaXIgbWFqb3JpdHkgYmVmb3JlIHNlZWtpbmcgYW4KICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudGluZyBmcm9tIHRoZWlyIGd1YXJkaWFucy48L3RyYW5zbGF0aW9uPg=="
translation['38.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGVjbGFyZSB0aGF0IHRoZXkgZGlkIG5vdCBzZWxsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZmF0aGVyJ3MgZXN0YXRlIGZvciB0aGUgbW9uZXkgd2hpY2ggdGhleSByZWNlaXZlZCwgbm9yIGRpZCB0aGV5IGdpdmUgdXAKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHksIGJ1dCB0aGF0IGFsbCB0aGF0IHdhcyBsZWZ0IHRoZW3igJRjcmVkaXRzLCBmdXJuaXR1cmUsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gbW9uZXnigJRzdGlsbCBiZWxvbmdzIHRvIHRoZW0uIEksIGZvciBteSBwYXJ0LCBrbm93IGJ5IGhlYXJzYXkgdGhhdAogICAgICAgICAgICAgICAgICAgIFhlbm9wZWl0aGVzIGFuZCBOYXVzaWNyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZm9ybWVyIHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdW5jbGUsIHRoZSBsYXR0ZXIgdGhlIGZhdGhlciBvZiB0aGUgcGxhaW50aWZmLjwvbm90ZT4gbGVmdCB0aGVpciBlbnRpcmUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBpbiBvdXRzdGFuZGluZyBkZWJ0cywgYW5kIHBvc3Nlc3NlZCB2ZXJ5IGxpdHRsZSB0YW5naWJsZSBwcm9wZXJ0eTsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3aGVuIHRoZSBkZWJ0cyBoYWQgYmVlbiBjb2xsZWN0ZWQgYW5kIHNvbWUgZnVybml0dXJlIGFuZCBzbGF2ZXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzb2xkLCB0aGVpciBndWFyZGlhbnMgcHVyY2hhc2VkIHRoZSBmYXJtcyBhbmQgbG9kZ2luZy1ob3VzZXMsIHdoaWNoIG91cgogICAgICAgICAgICAgICAgICAgIG9wcG9uZW50cyByZWNlaXZlZCBmcm9tIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['38.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPklmIHRoZXJlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgbm8gZGlzcHV0ZSBhYm91dCB0aGVzZSBtYXR0ZXJzIGJlZm9yZSwgYW5kIG5vIHN1aXQgaGFkIGJlZW4gZW50ZXJlZCBjaGFyZ2luZwogICAgICAgICAgICAgICAgICAgIG1hbGFkbWluaXN0cmF0aW9uIG9mIHRoZSBwcm9wZXJ0eSwgaXQgd291bGQgaGF2ZSBiZWVuIGFub3RoZXIgc3Rvcnk7IGJ1dCBzaW5jZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBicm91Z2h0IHN1aXQgYWdhaW5zdCBvdXIgZmF0aGVyIGluIHRoZSBtYXR0ZXIgb2YgaGlzIGdlbmVyYWwgY29uZHVjdAogICAgICAgICAgICAgICAgICAgIGFzIGd1YXJkaWFuIGFuZCByZWNvdmVyZWQgZGFtYWdlcywgYWxsIHRoZXNlIG1hdHRlcnMgd2VyZSBhdCB0aGF0IHRpbWUgcmVsZWFzZWQuCiAgICAgICAgICAgICAgICAgICAgRm9yIG91ciBvcHBvbmVudHMsIEkgdGFrZSBpdCwgZGlkIG5vdCBicmluZyBzdWl0IGZvciB0aGUgbWVyZSBuYW1lCiAgICAgICAgICAgICAgICAgICAg4oCcbWFsLWFkbWluaXN0cmF0aW9uIGluIGd1YXJkaWFuc2hpcCzigJ0gYnV0IGZvciB0aGUgbW9uZXk7IG5vcgogICAgICAgICAgICAgICAgICAgIGRpZCB0aGUgZ3VhcmRpYW5zIGJ1eSBvZmYgdGhpcyBuYW1lIHdpdGggdGhlIG1vbmV5IHdoaWNoIHRoZXkgcGFpZCwgYnV0IHRoZXkKICAgICAgICAgICAgICAgICAgICBib3VnaHQgb2ZmIHRoZSBjbGFpbXMuIDwvdHJhbnNsYXRpb24+"
translation['38.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0LCB0aGVyZWZvcmUsIHRoZXNlIG1lbiBoYXZlIG5vIHJpZ2h0IG9mIGFjdGlvbiBhZ2FpbnN0IHVzCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBkZWJ0cyB3aGljaCBvdXIgZmF0aGVyIGNvbGxlY3RlZCBiZWZvcmUgdGhlIHNldHRsZW1lbnQsIG9yLCBpbiBnZW5lcmFsLAogICAgICAgICAgICAgICAgICAgIGZvciBtb25pZXMgd2hpY2ggaGUgcmVjZWl2ZWQgYnkgdmlydHVlIG9mIGhpcyBndWFyZGlhbnNoaXAsIHNlZWluZyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGdpdmVuIGEgcmVsZWFzZSBmb3IgdGhlaXIgY2xhaW1zLCBJIHRoaW5rIHlvdSBoYXZlIGFsbCBhZGVxdWF0ZWx5IGxlYXJuZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBsYXdzIHRoZW1zZWx2ZXMgYW5kIGZyb20gdGhlIHJlbGVhc2UuIE1vcmVvdmVyLCB0aGF0IGl0IGlzIGltcG9zc2libGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb2xsZWN0aW9uIG9mIHRoZXNlIGZ1bmRzIHNob3VsZCBoYXZlIGJlZW4gbWFkZSBzdWJzZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICDvvIh0aGlzIGlzIHRoZSBzdG9yeSB0aGV5IGFyZSBtYWtpbmcgdXAgdG8gbGVhZCB5b3UgYXN0cmF577yJLCBJCiAgICAgICAgICAgICAgICAgICAgd2lzaCB0byBwcm92ZS4gPC90cmFuc2xhdGlvbj4="
translation['38.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgbXkgZmF0aGVyLCB0aGV5IGNhbm5vdAogICAgICAgICAgICAgICAgICAgIGNoYXJnZSB0aGF0IGhlIHJlY2VpdmVkIHRoZW07IGZvciBoZSBkaWVkIHRocmVlIG9yIGZvdXIgbW9udGhzIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNldHRsZW1lbnQgd2FzIG1hZGUgd2l0aCB0aGVtOyBhbmQgdGhhdCBEZW1hcmV0dXMsIHdob20gb3VyIGZhdGhlciBsZWZ0IGFzIG91cgogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuLCBjb3VsZCBub3QgaGF2ZSByZWNlaXZlZCB0aGVtIGVpdGhlciDvvIhmb3IgdGhleSBoYXZlIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICBoaXMgbmFtZSBhbHNvIGluIHRoZWlyIGNvbXBsYWludO+8iSwgdGhpcywgdG9vLCBJIHNoYWxsIHNob3cuIDwvdHJhbnNsYXRpb24+"
translation['38.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4gYXJlIHRoZW1zZWx2ZXMgb3VyIHN0cm9uZ2VzdCB3aXRuZXNzZXM7IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZXkgd2lsbCBiZSBzaG93biBuZXZlciB0byBoYXZlIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IERlbWFyZXR1cyBpbiBoaXMgbGlmZXRpbWU7CiAgICAgICAgICAgICAgICAgICAgYnV0LCBtb3JlIHRoYW4gdGhhdCwgYW55b25lIHdobyBleGFtaW5lcyBhbmQgc3R1ZGllcyB0aGUgY2FzZSBpdHNlbGYgd2lsbCBzZWUsCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgdGhhdCBoZSBkaWQgbm90IHJlY2VpdmUgdGhlIG1vbmV5LCBidXQgdGhhdCBpdCB3YXMgaW1wb3NzaWJsZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgcmVjZWl2ZWQgaXQuIEZvciB0aGUgZGVidCB3YXMgaW4gQm9zcG9ydXMsIGEgcGxhY2Ugd2hpY2ggRGVtYXJldHVzCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgdmlzaXRlZDsgaG93LCB0aGVuLCBjb3VsZCBoZSBoYXZlIGNvbGxlY3RlZCBpdD8gQWgsIGJ1dCwgdGhleSB3aWxsIHNheSwgaGUKICAgICAgICAgICAgICAgICAgICBzZW50IHNvbWVvbmUgdG8gZ2V0IHRoZSBtb25leS4gPC90cmFuc2xhdGlvbj4="
translation['38.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbG9vayBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgaW4gdGhpcyB3YXkuIEhlcm1vbmF4IG93ZWQgdGhlc2UgbWVuIG9uZSBodW5kcmVkIHN0YXRlcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBBdGhlbmlhbiBzdGF0ZXIgd2FzIGEgZ29sZCBjb2luIHdvcnRoIHR3ZW50eQogICAgICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZS48L25vdGU+IHdoaWNoIGhlIGhhZCByZWNlaXZlZCBmcm9tIE5hdXNpY3JhdGVzLiBBcmlzdGFlY2htdXMgd2FzCiAgICAgICAgICAgICAgICAgICAgZm9yIHNpeHRlZW4geWVhcnMgdGhlIGd1YXJkaWFuIGFuZCBjYXJldGFrZXIgb2YgdGhlc2UgbWVuLiBUaGVyZWZvcmUsIHRoZSBtb25leQogICAgICAgICAgICAgICAgICAgIHdoaWNoIEhlcm1vbmF4IHBhaWQgaW4gaGlzIG93biBwZXJzb24gYWZ0ZXIgdGhlc2UgbWVuIGhhZCBjb21lIG9mIGFnZSwgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgbm90IHBhaWQgd2hlbiB0aGV5IHdlcmUgbWlub3JzOyBmb3IgaGUgY2VydGFpbmx5IGRpZCBub3QgcGF5IHRoZSBzYW1lIGRlYnQKICAgICAgICAgICAgICAgICAgICB0d2ljZS4gTm93IGlzIHRoZXJlIGFueSBtYW4gc28gc2lsbHkgYXMgdm9sdW50YXJpbHkgdG8gcGF5IG1vbmV5IHRvIG9uZSBub3QKICAgICAgICAgICAgICAgICAgICBlbnRpdGxlZCB0byBpdCwgd2hvIGRlbWFuZGVkIGl0IGJ5IGxldHRlciwgd2hlbiBoZSBoYWQgZm9yIHNvIGxvbmcgYSB0aW1lIGV2YWRlZAogICAgICAgICAgICAgICAgICAgIHBheW1lbnQgdG8gdGhlIHJpZ2h0ZnVsIG93bmVycz8gRm9yIG15IHBhcnQsIEkgdGhpbmsgdGhlcmUgaXMgbm90LiA8L3RyYW5zbGF0aW9uPg=="
translation['38.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoLOKAlHRoYXQgb3VyIGZhdGhlciBkaWVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNldHRsZW1lbnQsIHRoYXQgdGhlc2UgbWVuIG5ldmVyIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IERlbWFyZXR1cyBmb3IgdGhpcyBtb25leSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBoZSBhYnNvbHV0ZWx5IG5ldmVyIHdlbnQgdG8gc2VhLCBub3IgdmlzaXRlZCBCb3Nwb3J1cywgdGFrZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgb3VyIGZhdGhlciBkaWQgbm90IGNvbGxlY3QgdGhlIG1vbmV5IGFmdGVyIHRoZSByZWxlYXNlOyB0aGF0IG5vIG9uZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHZvbHVudGFyaWx5IGhhdmUgcGFpZCB0aGUgbW9uZXksIGlmIERlbWFyZXR1cyBoYWQgc2VudCBzb21lb25lIHRvIGdldCBpdDsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoaW1zZWxmIG5laXRoZXIgcHV0IG91dCB0byBzZWEgbm9yIHZpc2l0ZWQgQm9zcG9ydXMsIGhhcyBiZWVuIG1hZGUgY2xlYXIKICAgICAgICAgICAgICAgICAgICB0byB5b3UgZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZSBkZXBvc2l0aW9ucy4gSSB3aXNoLCB0aGVuLCB0byBzaG93IHlvdSB0aGF0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgc3RhdGVtZW50IHRvbyBvZiB0aGUgY2FzZSBpcyBhYnNvbHV0ZSBmYWxzZWhvb2QuIFRoZXkgaGF2ZSB3cml0dGVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbXBsYWludCB3aGljaCB0aGV5IGFyZSBub3cgcHJvc2VjdXRpbmcsIHRoYXQgd2Ugb3dlIHRoZSBtb25leSwgaW5hc211Y2ggYXMgb3VyCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHJlY2VpdmVkIGl0IGluIHBheW1lbnQsIGFuZCBwYXNzZWQgaXQgb3ZlciB0byB0aGVtIGFzIGEgZGVidCBkdWUgYW5kCiAgICAgICAgICAgICAgICAgICAgcGF5YWJsZSBpbiBoaXMgYWNjb3VudCBvZiBoaXMgZ3VhcmRpYW5zaGlwLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlLAogICAgICAgICAgICAgICAgICAgIGFuZCByZWFkIG1lLCBwbGVhc2UsIHRoZSBjb21wbGFpbnQgaXRzZWxmLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbXBsYWludCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgaXQKICAgICAgICAgICAgICAgICAgICBzdGF0ZWQgaW4gdGhlIGNvbXBsYWludCwg4oCcaW5hc211Y2ggYXMgQXJpc3RhZWNobXVzIHBhc3NlZCB0aGUgZGVidAogICAgICAgICAgICAgICAgICAgIG92ZXIgdG8gbWUgaW4gaGlzIGFjY291bnQgb2YgaGlzIGd1YXJkaWFuc2hpcC7igJ0gQnV0LCB3aGVuIHRoZXkgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIHN1aXQgYWdhaW5zdCBteSBmYXRoZXIgaW4gdGhlIG1hdHRlciBvZiBoaXMgZ3VhcmRpYW5zaGlwLCB0aGV5IHdyb3RlIHRoZSB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb3Bwb3NpdGUgb2YgdGhpczsgZm9yIHRoZXkgcGxhaW5seSBjaGFyZ2VkIGhpbSB3aXRoIG5vdCByZW5kZXJpbmcgYW4KICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCwgcGxlYXNlLCB0aGUgY29tcGxhaW50IGl0c2VsZiwKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IHRoZW4gYnJvdWdodCBhZ2FpbnN0IG15IGZhdGhlci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDb21wbGFpbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGxhaW50PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gd2hhdAogICAgICAgICAgICAgICAgICAgIGFjY291bnQsIHByYXksIFhlbm9wZWl0aGVzIGFuZCBOYXVzaW1hY2h1cywgZG8geW91IG5vdyBjaGFyZ2UgdGhhdCBoZSBwYXNzZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVidCBvdmVyIHRvIHlvdT8gRm9yIGF0IG9uZSB0aW1lIHlvdSBicm91Z2h0IHN1aXQgYW5kIGRlbWFuZGVkIG1vbmV5IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCB0aGF0IGhlIHJlbmRlcmVkIG5vIGFjY291bnQuIEJ1dCBpZiBpdCBpcyB0byBiZSBwZXJtaXR0ZWQgeW91IHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgeW91ciBtYWxpY2lvdXMgY2hhcmdlIG9uIGJvdGggZ3JvdW5kcywgYW5kIGF0IG9uZSB0aW1lIHlvdSBjb2xsZWN0ZWQgbW9uZXkKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIGRpZCBub3QgaGFuZCBzb21ldGhpbmcgb3ZlciB0byB5b3UsIGFuZCBhdCBhbm90aGVyIGFyZSBzdWluZyBoaW0gb24KICAgICAgICAgICAgICAgICAgICB0aGUgZ3JvdW5kIHRoYXQgaGUgZGlkIGhhbmQgaXQgb3ZlciwgdGhlcmUgaXMgbm90aGluZyB0byBwcmV2ZW50IHlvdXIgbG9va2luZwogICAgICAgICAgICAgICAgICAgIGZvciBzb21lIHRoaXJkIGdyb3VuZCBhZnRlciB0aGlzLCBzbyBhcyB0byBjb21tZW5jZSBwcm9jZWVkaW5ncyBhZnJlc2guIEJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IHdoYXQgdGhlIGxhd3Mgc3RhdGU6IHRoZXkgZGVjbGFyZSB0aGF0IHN1aXQgbWF5IGJlIGJyb3VnaHQgb25jZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgc2FtZSBwZXJzb24gZm9yIHRoZSBzYW1lIGFjdHMuIDwvdHJhbnNsYXRpb24+"
translation['38.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgeW91IG1heSBrbm93CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IG5vdCBvbmx5IGhhdmUgc3VmZmVyZWQgbm8gd3JvbmcgaW4gdGhlIHByZXNlbnQgY2FzZSwgYnV0IHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBicmluZ2luZyBzdWl0IGluIGRlZmlhbmNlIG9mIGFsbCB5b3VyIGxhd3MsIEkgd2lzaCB0byBjaXRlIHRvIHlvdSB0aGlzIHN0YXR1dGUKICAgICAgICAgICAgICAgICAgICBhbHNvLCB3aGljaCBleHByZXNzbHkgc3RhdGVzIHRoYXQsIGlmIGZpdmUgeWVhcnMgaGF2ZSBlbGFwc2VkIGFuZCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IG5vIHN1aXQsIGl0IGlzIG5vIGxvbmdlciBwZXJtaXR0ZWQgdG8gb3JwaGFucyB0byBicmluZyBzdWl0IHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIGNsYWltcyBjb25uZWN0ZWQgd2l0aCBndWFyZGlhbnNoaXAuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBjbGVyayB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVhZCB5b3UgdGhpcyBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBtZW4gb2YgdGhlIGp1cnksIGZsYXRseSBzdGF0aW5nIHRoYXQgaWYgdGhleSBkbyBub3QgYnJpbmcgc3VpdCB3aXRoaW4gZml2ZQogICAgICAgICAgICAgICAgICAgIHllYXJzLCB0aGV5IGhhdmUgbm8gbG9uZ2VyIHRoZSByaWdodCB0byBzdWUuIEJ1dCB3ZSBkaWQgYnJpbmcgc3VpdCwgdGhleSBtYXkKICAgICAgICAgICAgICAgICAgICBzYXkuIFllcywgYW5kIHlvdSBtYWRlIGEgc2V0dGxlbWVudCwgdG9vOyBzbyB5b3UgaGF2ZSBubyByaWdodCB0byBicmluZyBhIGZyZXNoCiAgICAgICAgICAgICAgICAgICAgc3VpdC4gRWxzZSBpdCB3b3VsZCBiZSBhbiBvdXRyYWdlb3VzIHRoaW5nLCBpZiBmb3Igb3JpZ2luYWwgd3Jvbmdkb2luZ3MgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGFsbG93IHN1aXQgdG8gYmUgYnJvdWdodCBieSBvcnBoYW5zIGFmdGVyIGZpdmUgeWVhcnMgYWdhaW5zdCBndWFyZGlhbnMKICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBub3QgYmVlbiByZWxlYXNlZCwgYnV0IG5vdyBpbiB0aGUgdHdlbnRpZXRoIHllYXIgeW91IGFyZSB0byBtYWludGFpbiBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBhZ2FpbnN0IHVzLCB0aGUgY2hpbGRyZW4gb2YgeW91ciBndWFyZGlhbnMsIGZvciBtYXR0ZXJzIGNvbmNlcm5pbmcgd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3UgZGlkIGdpdmUgdGhlbSBhIHJlbGVhc2UuIDwvdHJhbnNsYXRpb24+"
translation['38.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IEkgaGVhciB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIHNodW4gYXJndW1lbnRzIGJhc2VkIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgb2YgdGhlIGNhc2UgYW5kIHVwb24gdGhlIGxhd3MsIGFuZCBhcmUgcHJlcGFyZWQgdG8gYXNzZXJ0IHRoYXQgYSBsYXJnZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSB3YXMgbGVmdCB0aGVtIGFuZCB0aGF0IHRoZXkgd2VyZSBkZWZyYXVkZWQgb2YgaXQ7IGFuZCB0aGF0IHRoZXkgd2lsbAogICAgICAgICAgICAgICAgICAgIGFkdmFuY2UgYXMgYSBwcm9vZiBvZiB0aGlzIHRoZSBsYXJnZSBzdW0gYXNrZWQgYXMgZGFtYWdlcyBpbiB0aGVpciBvcmlnaW5hbAogICAgICAgICAgICAgICAgICAgIHN1aXQsIGFuZCB0aGV5IHdpbGwgd2FpbCBvdmVyIHRoZWlyIG9ycGhhbmhvb2QsIGFuZCB3aWxsIGdvIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW5zaGlwIGFjY291bnRzLiBUaGVzZSBhbmQgc3VjaC1saWtlIHBvaW50cyBhcmUgdGhlIG9uZXMgdXBvbiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmaXhlZCB0aGVpciB0cnVzdCwgYW5kIGJ5IHdoaWNoIHRoZXkgaG9wZSB0byBiZWd1aWxlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['38.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgb3duIHBhcnQsIEkgdGhpbmsgdGhhdCB0aGUgbGFyZ2Ugc3VtIGFza2VkIGFzIGRhbWFnZXMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc3VpdHMgdGhlbiBicm91Z2h0IGlzIGEgc3Ryb25nZXIgcHJvb2YgZm9yIHVzLCB0aGF0IG91ciBmYXRoZXIgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIHZpY3RpbSBvZiBhIG1hbGljaW91cyBhY3Rpb24sIHRoYW4gZm9yIHRoZW0sIHRoYXQgdGhleSB3ZXJlIGJlaW5nIGRlZnJhdWRlZCBvZiBhCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgZXN0YXRlLiBGb3IgaWYgaGUgY291bGQgcHJvdmUgaGlzIGNsYWltcyBmb3IgZWlnaHR5IHRhbGVudHMsIG5vIG1hbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JsZCB3b3VsZCBoYXZlIGFjY2VwdGVkIHRocmVlIHRhbGVudHMgaW4gc2V0dGxlbWVudDsgd2hlcmVhcyBhbnlvbmUsIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGluIGEgZ3VhcmRpYW5zaGlwIHN1aXQgaW52b2x2aW5nIHN1Y2ggbGFyZ2Ugc3Vtcywgd291bGQgaGF2ZSBwYWlkCiAgICAgICAgICAgICAgICAgICAgdGhyZWUgdGFsZW50cyB0byBidXkgb2ZmIHRoZSByaXNrIGFuZCB0aGUgYWR2YW50YWdlcyB3aXRoIHdoaWNoIGF0IHRoYXQgdGltZQogICAgICAgICAgICAgICAgICAgIG5hdHVyZSBzdXBwbGllZCB0aGVzZSBtZW4uIFRoZXkgd2VyZSBvcnBoYW5zIGFuZCB5b3VuZywgYW5kIHlvdSB3ZXJlIGlnbm9yYW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcmVhbCBjaGFyYWN0ZXJzOyBhbmQgZXZlcnlvbmUgc2F5cyB0aGF0IGluIHlvdXIgY291cnRzIHRoZXNlIHRoaW5ncyBoYXZlCiAgICAgICAgICAgICAgICAgICAgbW9yZSB3ZWlnaHQgdGhhbiBzdHJvbmcgYXJndW1lbnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['38.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsIEkgdGhpbmsgSSBjYW4gYWxzbyBwcm92ZSB0aGF0IHlvdSBtaWdodCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ29vZCByZWFzb24gcmVmdXNlIHRvIGhlYXIgYSB3b3JkIGZyb20gdGhlbSBpbiByZWdhcmQgdG8gdGhlIGd1YXJkaWFuc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvbGxvd2luZyBwYXNzYWdlIGlzIHJlcGVhdGVkIGFsbW9zdCB2ZXJiYXRpbQogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBwcmVjZWRpbmcgb3JhdGlvbiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNy41OCIgdmFsaWQ9InllcyI+RGVtLiAzNy41ODwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgZmYuPC9ub3RlPiBGb3Igc3VwcG9zZSBvbmUgc2hvdWxkIGdyYW50IHRoYXQgdGhleSBoYXZlIHN1ZmZlcmVkIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHdyb25ncywgYW5kIHRoYXQgZXZlcnl0aGluZyB3aGljaCB0aGV5IHdpbGwgbm93IGFsbGVnZSBhYm91dCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgaXMgdHJ1ZSwgdGhpcywgYXQgbGVhc3QsIEkgcHJlc3VtZSB5b3Ugd291bGQgYWxsIGFkbWl0OiB0aGF0IGl0IGhhcwogICAgICAgICAgICAgICAgICAgIGhhcHBlbmVkIHRvIG90aGVycyBlcmUgbm93IHRvIGhhdmUgc3VmZmVyZWQgbWFueSB3cm9uZ3MgbW9yZSBzZXJpb3VzIHRoYW4KICAgICAgICAgICAgICAgICAgICBwZWN1bmlhcnkgd3JvbmdzLiBGb3IgaW52b2x1bnRhcnkgaG9taWNpZGVzLCBvdXRyYWdlcyBvbiB3aGF0IGlzIHNhY3JlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFueSBvdGhlciBzdWNoIGNyaW1lcyBhcmUgY29tbWl0dGVkOyB5ZXQgaW4gYWxsIHRoZXNlIGNhc2VzIHRoZSBmYWN0IHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHlpZWxkZWQgdG8gcGVyc3Vhc2lvbiBhbmQgZ2l2ZW4gYSByZWxlYXNlIGlzIGFwcG9pbnRlZCBmb3IgdGhlIHBhcnRpZXMgd3JvbmdlZAogICAgICAgICAgICAgICAgICAgIGFzIGEgbGltaXQgYW5kIHNldHRsZW1lbnQgb2YgdGhlIGRpc3B1dGUuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuNTgiIHZhbGlkPSJ5ZXMiPkRlbS4gMzcuNTg8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGZmLjwvdHJhbnNsYXRpb24+"
translation['38.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB0aGlzIGp1c3QgcHJpbmNpcGxlIGlzIHNvIGJpbmRpbmcgYW1vbmcgYWxsIG1lbiwgdGhhdCwgaWYgb25lLCBoYXZpbmcgY29udmljdGVkCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBvZiBpbnZvbHVudGFyeSBob21pY2lkZSwgYW5kIGNsZWFybHkgc2hvd24gaGltIHRvIGJlIHBvbGx1dGVkLAogICAgICAgICAgICAgICAgICAgIHN1YnNlcXVlbnRseSB0YWtlcyBwaXR5IHVwb24gaGltLCBhbmQgcmVsZWFzZXMgaGltLCBoZSBoYXMgbm8gbG9uZ2VyIHRoZSByaWdodAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgdGhlIHNhbWUgcGVyc29uIGRyaXZlbiBpbnRvIGV4aWxlLiBJZiwgdGhlbiwgd2hlbiBsaWZlIGFuZCBhbGwgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIG1vc3QgcHJlY2lvdXMgYXJlIGF0IHN0YWtlLCBhIHJlbGVhc2UgaGFzIHRoaXMgcG93ZXIgYW5kIHZhbGlkaXR5LCBzaGFsbCBpdCBiZQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZWZmZWN0LCB3aGVuIG1vbmV5IGlzIGF0IHN0YWtlLCBvciBjbGFpbXMgb2YgbGVzc2VyIGltcG9ydGFuY2U/IFN1cmVseQogICAgICAgICAgICAgICAgICAgIG5vdC4gRm9yIHRoZSB0aGluZyBtb3N0IHRvIGJlIGZlYXJlZCBpcywgbm90IHRoYXQgSSBzaG91bGQgZmFpbCB0byBvYnRhaW4KICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIGluIHlvdXIgY291cnQsIGJ1dCB0aGF0IGEganVzdCBwcmFjdGljZSwgZXN0YWJsaXNoZWQgZnJvbSB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgICAgICAgICAgb2YgdGltZSwgc2hvdWxkIG5vdyBiZSBkb25lIGF3YXkgd2l0aC4gPC90cmFuc2xhdGlvbj4="
translation['38.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcVGhleSBkaWQgbm90IGxldCBvdXIKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSzigJ0gdGhleSB3aWxsIHBlcmhhcHMgc2F5LiBObzsgZm9yIHlvdXIgdW5jbGUgWGVub3BlaXRoZXMgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IHdhbnQgaXQgbGV0LCBidXQsIGFmdGVyIE5pY2lkYXMgaGFkIGRlbm91bmNlZCBoaW0gZm9yIHRoaXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIGEgZ3VhcmRpYW4gZGlkIG5vdCBmdWxmaWwgdGhlIGR1dGllcyBpbXBvc2VkIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwgYW55IGNpdGl6ZW4gbWlnaHQgY2hhcmdlIGhpbSBiZWZvcmUgdGhlIGFyY2hvbiB3aXRoIGJyZWFjaCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0cnVzdC48L25vdGU+IGluZHVjZWQgdGhlIGp1cm9ycyB0byBhbGxvdyBoaW0gdG8gYWRtaW5pc3RlciBpdDsgYW5kIHRoaXMKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHkga25vd3MuIOKAnFRoZXkgcm9iYmVkIHVzIG9mIGh1Z2Ugc3Vtcy7igJ0gV2VsbCwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyB5b3UgaGF2ZSByZWNlaXZlZCBmcm9tIHRoZW0gdGhlIGRhbWFnZXMgdXBvbiB3aGljaCB5b3UgYWdyZWVkOyBhbmQsIEkgdGFrZQogICAgICAgICAgICAgICAgICAgIGl0LCB5b3UgYXJlIG5vdCBlbnRpdGxlZCB0byByZWNvdmVyIGl0IGFnYWluIGZyb20gbWUuIDwvdHJhbnNsYXRpb24+"
translation['38.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIHRoYXQgeW91IG1heSBub3QgdGhpbmsgdGhlcmUgaXMgYW55dGhpbmcgaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgdGhpc+KAlGl0IGlzIG9mIGNvdXJzZSBub3QgZmFpciDvvIhob3cgY291bGQgaXQgYmU/77yJCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgaGF2aW5nIGNvbWUgdG8gYSBzZXR0bGVtZW50IHdpdGggdGhlIGd1aWx0eSBwYXJ0aWVzLCB0byBhY2N1c2UgcGVyc29ucyB3aG8KICAgICAgICAgICAgICAgICAgICBrbm93IG5vdGhpbmcgYWJvdXQgdGhlIGNhc2XigJRub25lIHRoZSBsZXNzLCBYZW5vcGVpdGhlcyBhbmQKICAgICAgICAgICAgICAgICAgICBOYXVzaW1hY2h1cywgaWYgeW91IGhhdmUgdGhlIGlkZWEgdGhhdCB5b3VyIGNsYWltcyBhcmUgc28gbWFydmVsbG91c2x5IHZhbGlkLAogICAgICAgICAgICAgICAgICAgIHBheSBiYWNrIHRocmVlIHRhbGVudHMsIGFuZCBnbyBvbiB3aXRoIHlvdXIgc3VpdC4gQWZ0ZXIgaGF2aW5nIGV4YWN0ZWQgc28gbGFyZ2UKICAgICAgICAgICAgICAgICAgICBhIHN1bSBmb3Igbm90IHByZXNzaW5nIHlvdXIgY2hhcmdlcywgeW91IGFyZSBib3VuZCB0byBrZWVwIHNpbGVudCB1bnRpbCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIHBhaWQgdGhpcyBiYWNr4oCUbm90IHRvIG1ha2UgdGhlIGNoYXJnZXMgYW5kIGtlZXAgdGhlIG1vbmV5OyB0aGF0IGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHZlcnkgZXh0cmVtZSBvZiB1bmZhaXIgZGVhbGluZy4gPC90cmFuc2xhdGlvbj4="
translation['38.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGl0IGlzIGxpa2VseSB0aGF0IHRoZXkgd2lsbCB0YWxrIGFib3V0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoaWVzLCBhbmQgc2F5IHRoYXQgdGhleSBoYXZlIGV4cGVuZGVkIHRoZWlyIHByb3BlcnR5IHVwb24geW91LiBUaGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3RhdGVtZW50cyB3aWxsIGJlIGZhbHNlOyB0aGF0IHRoZXkgaGF2ZSBzcXVhbmRlcmVkIG11Y2ggb2YgdGhlaXIgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICB1cG9uIHRoZW1zZWx2ZXMsIHdoaWxlIHRoZSBzdGF0ZSBoYXMgcmVjZWl2ZWQgYnV0IGEgc21hbGwgc2hhcmU7IGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3aWxsIGRlZW0gaXQgcmlnaHQgdG8gcmVhcCBmcm9tIHlvdSBhIGdyYXRpdHVkZSB0aGF0IGlzIG5vdCBkZXNlcnZlZCBub3IKICAgICAgICAgICAgICAgICAgICBkdWXigJRhbGwgdGhpcyBJIHNoYWxsIHBhc3Mgb3Zlci4gSSBteXNlbGYsIG1lbiBvZiB0aGUganVyeSwgZGVlbSBpdAogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRoYXQgc29tZXdoYXQgb2YgZ3JhdGl0dWRlIHNob3VsZCBiZSBhY2NvcmRlZCBieSB5b3UgdG8gYWxsIHdobyBiZWFyIHRoZQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBidXJkZW5zLiBCdXQgdG8gd2hvbSBzaG91bGQgeW91IGFjY29yZCBtb3N0IGdyYXRpdHVkZT8gVG8gdGhvc2Ugd2hvLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGluIHRoZWlyIGFjdGlvbnMgZG9pbmcgd2hhdCBpcyBvZiBzZXJ2aWNlIHRvIHRoZSBzdGF0ZSwgZG8gbm90IGJyaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcGFzcyB3aGF0IGFsbCB3b3VsZCBjYWxsIGEgc2hhbWUgYW5kIGEgcmVwcm9hY2guIDwvdHJhbnNsYXRpb24+"
translation['38.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhvc2Ugd2hvIHdoaWxlIHBlcmZvcm1pbmcgcHVibGljIHNlcnZpY2VzIGhhdmUKICAgICAgICAgICAgICAgICAgICBzcXVhbmRlcmVkIHRoZWlyIG93biBwcm9wZXJ0eSwgYnJpbmcgdGhlIHN0YXRlIGludG8gZGlzcmVwdXRlIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmcgaGVyIHNlcnZpY2UuIEZvciBubyBtYW4gZXZlciB5ZXQgYmxhbWVkIGhpbXNlbGY7IG9uIHRoZSBjb250cmFyeSwgaGUKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlcyB0aGF0IHRoZSBzdGF0ZSBoYXMgdGFrZW4gYXdheSBoaXMgcHJvcGVydHkuIEJ1dCB0aG9zZSB3aG8gd2l0aCByZWFkeQogICAgICAgICAgICAgICAgICAgIGhlYXJ0cyBwZXJmb3JtIGFsbCB0aGUgZHV0aWVzIHlvdSBsYXkgdXBvbiB0aGVtLCBhbmQgd2hvIGJ5IHRoZSBzb2Jlcm5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBsaXZlcyBpbiBvdGhlciBtYXR0ZXJzIHByZXNlcnZlIHRoZWlyIHByb3BlcnR5LCByaWdodGx5IGhhdmUgdGhlIGJldHRlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlcnMgaW4gdGhpcyByZXNwZWN0LCB0aGF0IHRoZXkgYm90aCBoYXZlIGJlZW4gYW5kIHdpbGwgYmUgb2Ygc2VydmljZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxzbyBiZWNhdXNlIHRoaXMgc2VydmljZSBhY2NydWVzIHRvIHlvdSBmcm9tIHRoZW0gd2l0aG91dCByZXByb2FjaC4gV2Ugc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBmb3VuZCB0byBiZSBtZW4gb2YgdGhpcyB0eXBlIGluIG91ciByZWxhdGlvbnMgdG8geW91OyBhcyBmb3IgdGhlbSwgSSBzaGFsbCBwYXNzCiAgICAgICAgICAgICAgICAgICAgdGhlbSBieSwgdGhhdCB0aGV5IG1heSBub3QgY2hhcmdlIHRoYXQgSSBhbSBzcGVha2luZyBldmlsIG9mIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['38.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzaG91bGQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgc3VycHJpc2VkIGlmIHRoZXkgdHJ5IHRvIHNoZWQgdGVhcnMgYW5kIG1ha2UgdGhlbXNlbHZlcyBzZWVtIHdvcnRoeSBvZiBwaXR5LiBCdXQKICAgICAgICAgICAgICAgICAgICBJIGRlZW0gdGhhdCwgaW4gdmlldyBvZiB0aGlzLCB5b3Ugc2hvdWxkIGFsbCByZW1lbWJlciB0aGF0IGl0IGlzIHRoZSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgc2hhbWVsZXNzIG1lbiwgb3IgcmF0aGVyIG9mIG1lbiB3aXRoIG5vIHNlbnNlIG9mIHJpZ2h0LCBhZnRlciBoYXZpbmcgc3F1YW5kZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcnR1bmUgaW4gZ2x1dHRvbnkgYW5kIHdpbmUtYmliYmluZyBhbG9uZyB3aXRoIEFyaXN0b2NyYXRlcyBhbmQgRGlvZ25ldHVzCiAgICAgICAgICAgICAgICAgICAgYW5kIG90aGVycyBvZiB0aGF0IHN0YW1wIGluIHNoYW1lZnVsIGFuZCBldmlsIGZhc2hpb24sIHRvIHdlZXAgYW5kIHdhaWwgbm93IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGhvcGUgb2YgZ2V0dGluZyB3aGF0IGJlbG9uZ3MgdG8gb3RoZXJzLiBZb3Ugd291bGQgaGF2ZSBnb29kIGNhdXNlIHRvIHdlZXAKICAgICAgICAgICAgICAgICAgICBvdmVyIHlvdXIgZm9ybWVyIGRvaW5ncy4gWWV0IGl0IGlzIG5vdCBub3cgYSB0aW1lIHRvIHdlZXAsIGJ1dCB0byBwcm92ZSB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgZ2l2ZSBhIHJlbGVhc2UsIG9yIHRoYXQgYWN0aW9uIG1heSBiZSBoYWQgYWZyZXNoIGZvciB0aGUgbWF0dGVycwogICAgICAgICAgICAgICAgICAgIHJlbGVhc2VkLCBvciB0aGF0IGl0IGlzIGxlZ2FsIHRvIGJyaW5nIGFuIGFjdGlvbiBhZnRlciB0aGUgbGFwc2Ugb2YgdHdlbnR5CiAgICAgICAgICAgICAgICAgICAgeWVhcnMsIHdoZW4gdGhlIGxhdyBoYXMgZml4ZWQgZml2ZSB5ZWFycyBhcyB0aGUgbGltaXQuIFRoZXNlIGFyZSB0aGUgcXVlc3Rpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlc2UgZ2VudGxlbWVuIGFyZSB0byBkZWNpZGUuIDwvdHJhbnNsYXRpb24+"
translation['38.28'] = ""
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCB3YXMgbm90IGZyb20KICAgICAgICAgICAgICAgICAgICBhbnkgbG92ZSBvZiBsaXRpZ2F0aW9uIEkgcHJvdGVzdCBieSB0aGUgZ29kcywgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IEkgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIHRoaXMgc3VpdCBhZ2FpbnN0IEJvZW90dXMsIG5vciB3YXMgSSB1bmF3YXJlIHRoYXQgaXQgd2lsbCBzZWVtIHN0cmFuZ2UgdG8gbWFueQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB0aGF0IEkgc2hvdWxkIGJyaW5nIHN1aXQgYmVjYXVzZSBzb21lYm9keSB0aG91Z2h0IHJpZ2h0IHRvIGhhdmUgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBuYW1lIGFzIG15c2VsZjsgYnV0IGl0IHdhcyBuZWNlc3NhcnkgdG8gaGF2ZSB0aGUgbWF0dGVyIGRlY2lkZWQgaW4geW91ciBjb3VydCwKICAgICAgICAgICAgICAgICAgICBpbiB2aWV3IG9mIHRoZSBjb25zZXF1ZW5jZXMgdGhhdCBtdXN0IHJlc3VsdCBpZiBJIGRvIG5vdCBnZXQgdGhpcyBtYXR0ZXIKICAgICAgICAgICAgICAgICAgICByaWdodGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmIHRoZSBkZWZlbmRhbnQgZGVjbGFyZWQgaGltc2VsZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb24gb2YgYW5vdGhlciBmYXRoZXIgYW5kIG5vdCBvZiBteSBvd24sIEkgc2hvdWxkIG5hdHVyYWxseSBoYXZlIHNlZW1lZAogICAgICAgICAgICAgICAgICAgIG1lZGRsZXNvbWUgaW4gY2FyaW5nIGJ5IHdoYXQgbmFtZSBoZSBjaG9zZSB0byBjYWxsIGhpbXNlbGY7IGJ1dCwgYXMgaXQgaXMsIGhlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBzdWl0IGFnYWluc3QgbXkgZmF0aGVyLCBhbmQgaGF2aW5nIGdvdCB1cCBhIGdhbmcgb2YgYmxhY2ttYWlsZXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgc3Ryb25nIHBocmFzZSBvY2N1cnMgYWxzbyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjkiIHZhbGlkPSJ5ZXMiPkRlbS4gNDAuOTwvYmlibD4uPC9ub3RlPiB0byBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgaGlt4oCUTW5lc2ljbGVzLCB3aG9tIHlvdSBhbGwgcHJvYmFibHkga25vdywgYW5kIHRoYXQgTWVuZWNsZXMgd2hvCiAgICAgICAgICAgICAgICAgICAgc2VjdXJlZCB0aGUgY29udmljdGlvbiBvZiBOaW51cyw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjkiIHZhbGlkPSJ5ZXMiPkRlbS4gNDAuOTwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk5pbnVzIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIHByaWVzdGVzcyB3aG8gd2FzIHB1dCB0byBkZWF0aCwgYXMgdGhlIHNjaG9saWFzdCBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI4MSIgdmFsaWQ9InllcyI+RGVtLiAxOS4yODE8L2JpYmw+IHRlbGxzIHVzLCBmb3Igc3VwcGx5aW5nIGxvdmUtcG90aW9ucyB0byB5b3VuZyBtZW4uCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBjYXNlIHNlZW1zIHRvIGhhdmUgYmVlbiBhIG5vdG9yaW91cyBvbmUsIGFuZCByZWZsZWN0ZWQgbGl0dGxlIGNyZWRpdCBvbgogICAgICAgICAgICAgICAgICAgICAgICBNZW5lY2xlcy48L25vdGU+IGFuZCBvdGhlcnMgb2YgdGhlIHNhbWUgc29ydOKAlGhlIHdlbnQgaW50byBjb3VydCwKICAgICAgICAgICAgICAgICAgICBhbGxlZ2luZyB0aGF0IGhlIHdhcyBteSBmYXRoZXIncyBzb24gYnkgdGhlIGRhdWdodGVyIG9mIFBhbXBoaWx1cywgYW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgYmVpbmcgb3V0cmFnZW91c2x5IHRyZWF0ZWQsIGFuZCByb2JiZWQgb2YgaGlzIGNpdmljIHJpZ2h0cy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4yODEiIHZhbGlkPSJ5ZXMiPkRlbS4gMTkuMjgxPC9iaWJsPiB0ZWxscyB1cywgZm9yIHN1cHBseWluZyBsb3ZlLXBvdGlvbnMgdG8geW91bmcgbWVuLgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgY2FzZSBzZWVtcyB0byBoYXZlIGJlZW4gYSBub3RvcmlvdXMgb25lLCBhbmQgcmVmbGVjdGVkIGxpdHRsZSBjcmVkaXQgb24KICAgICAgICAgICAgICAgICAgICAgICAgTWVuZWNsZXMuPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk15IGZhdGhlciDvvIhmb3IgdGhlIHdob2xlIHRydXRoIHNoYWxsIGJlIHRvbGQgeW91LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyee+8iSBmZWFyZWQgdG8gY29tZSBpbnRvIGNvdXJ0IGxlc3Qgc29tZW9uZSwgb24gdGhlIGdyb3VuZAogICAgICAgICAgICAgICAgICAgIG9mIGhhdmluZyBlbHNld2hlcmUgcmVjZWl2ZWQgc29tZSBpbmp1cnkgZnJvbSBoaW0gaW4gaGlzIHB1YmxpYyBsaWZlLCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBjb25mcm9udCBoaW0gaGVyZTsgYW5kIGF0IHRoZSBzYW1lIHRpbWUgaGUgd2FzIGRlY2VpdmVkIGJ5IHRoaXMgbWFuJ3MgbW90aGVyLgogICAgICAgICAgICAgICAgICAgIEZvciBzaGUgaGFkIHN3b3JuIHRoYXQgaWYgaGUgc2hvdWxkIHRlbmRlciBoZXIgYW4gb2F0aCBpbiB0aGlzIG1hdHRlciwgc2hlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlIGl0LCBhbmQgdGhhdCwgd2hlbiB0aGlzIGhhZCBiZWVuIGRvbmUsIGFsbCByZWxhdGlvbnMgYmV0d2VlbiB0aGVtIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgYXQgYW4gZW5kOyBhbmQgc2hlIGhhZCBhbHNvIGhhZCBtb25leSBkZXBvc2l0ZWQgaW4gdGhlIGhhbmRzIG9mIGEgdGhpcmQgcGFydHkKICAgICAgICAgICAgICAgICAgICBvbiBoZXIgYmVoYWxmPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgbW9uZXkgd2FzIGV2aWRlbnRseSB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBwYWlkIHRvIGhlciBmb3IgZnVsZmlsbGluZyBoZXIgcHJvbWlzZSB0byByZWZ1c2UgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aC48L25vdGU+O+KAlG9uIHRoZXNlIGNvbmRpdGlvbnMsIHRoZW4sIG15IGZhdGhlciB0ZW5kZXJlZCBoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aC4gPC90cmFuc2xhdGlvbj4="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaGUgYWNjZXB0ZWQgaXQsIGFuZCBzd29yZSB0aGF0IG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhlIGRlZmVuZGFudCwgYnV0IGhpcyBicm90aGVyIHRvbywgaGVyIG90aGVyIHNvbiwgd2FzIG15IGZhdGhlcidzIGNoaWxkLgogICAgICAgICAgICAgICAgICAgIFdoZW4gc2hlIGhhZCBkb25lIHRoaXMgaXQgd2FzIG5lY2Vzc2FyeSB0byBlbnRlciB0aGVtIGFtb25nIHRoZSBjbGFuc21lbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWRtaXNzaW9uIHRvIHRoZSBjbGFuIHdhcyBuZWNlc3NhcnksIGlmIGZ1bGwKICAgICAgICAgICAgICAgICAgICAgICAgZmFtaWx5IHJpZ2h0cyB3ZXJlIHRvIGJlIHNlY3VyZWQuPC9ub3RlPiBhbmQgdGhlcmUgd2FzIG5vIGV4Y3VzZSBsZWZ0LiBNeQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBkaWQgZW50ZXIgdGhlbTsgaGUgYWRvcHRlZCB0aGVtIGFzIGhpcyBjaGlsZHJlbiBhbmQg77yIdG8gY3V0CiAgICAgICAgICAgICAgICAgICAgc2hvcnQgdGhlIGludGVydmVuaW5nIG1hdHRlcnPvvIkgaGUgZW5yb2xsZWQgdGhlIGRlZmVuZGFudCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXBhdHVyaWE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEFwYXR1cmlhIHdhcyBhIGZhbWlseSBmZXN0aXZhbAogICAgICAgICAgICAgICAgICAgICAgICBvY2N1cnJpbmcgaW4gdGhlIG1vbnRoIFB5YW5lcHNpb24g77yIT2N0b2Jlci1Ob3ZlbWJlcu+8iSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgdGltZSB3aGVuIGNoaWxkcmVuIHdlcmUgcmVndWxhcmx5IHJlZ2lzdGVyZWQgaW4gdGhlIGxpc3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgY2xhbi1tZW1iZXJzLjwvbm90ZT4gYXMgQm9lb3R1cyBvbiB0aGUgbGlzdCBvZiB0aGUgY2xhbnNtZW4sIGFuZCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBhcyBQYW1waGlsdXMuIEJ1dCBJIGhhZCBhbHJlYWR5IGJlZW4gZW5yb2xsZWQgYXMgTWFudGl0aGV1cy4gPC90cmFuc2xhdGlvbj4="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk15IGZhdGhlcidzIGRlYXRoIGhhcHBlbmVkIGJlZm9yZSB0aGUgZW50cmllcyB3ZXJlIG1hZGUgb24KICAgICAgICAgICAgICAgICAgICB0aGUgcmVnaXN0ZXIgb2YgdGhlIGRlbWVzbWVuLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FbnJvbGxtZW50IG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlciBvZiB0aGUgZGVtZSBtYXJrZWQgdGhlIGJlZ2lubmluZyBvZiBhIHlvdW5nIG1hbidzIHBvbGl0aWNhbCBsaWZlLgogICAgICAgICAgICAgICAgICAgICAgICBJdCB0b29rIHBsYWNlIHdoZW4gaGUgcmVhY2hlZCB0aGUgYWdlIG9mIGVpZ2h0ZWVuLjwvbm90ZT4gYnV0IHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICB3ZW50IGFuZCBlbnJvbGxlZCBoaW1zZWxmIG9uIHRoZSByZWdpc3RlciBhcyBNYW50aXRoZXVzLCBpbnN0ZWFkIG9mIEJvZW90dXMuIEhvdwogICAgICAgICAgICAgICAgICAgIGdyZWF0IGEgd3JvbmcgaGUgZGlkIGluIHRoaXPigJR0byBtZSwgaW4gdGhlIGZpcnN0IHBsYWNlLCBidXQgYWxzbyB0bwogICAgICAgICAgICAgICAgICAgIHlvdeKAlEkgc2hhbGwgc2hvdywgYXMgc29vbiBhcyBJIGhhdmUgYnJvdWdodCBmb3J3YXJkIHdpdG5lc3NlcyB0byBwcm92ZQogICAgICAgICAgICAgICAgICAgIG15IGFzc2VydGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGF2ZSBoZWFyZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHdpdG5lc3NlcyB0aGUgbWFubmVyIGluIHdoaWNoIG91ciBmYXRoZXIgZW5yb2xsZWQgdXM7IEkgc2hhbGwgbm93IHNob3cKICAgICAgICAgICAgICAgICAgICB0byB5b3UgdGhhdCwgYXMgdGhlIGRlZmVuZGFudCBkaWQgbm90IGNob29zZSB0byBhYmlkZSBieSB0aGlzIGVucm9sbG1lbnQsIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGJvdGgganVzdCBhbmQgbmVjZXNzYXJ5IGZvciBtZSB0byBicmluZyBzdWl0LiBGb3IgSSBhbSBzdXJlbHkgbm90IHNvIHN0dXBpZCBub3IKICAgICAgICAgICAgICAgICAgICB1bnJlYXNvbmFibGUgYSBwZXJzb24gYXMgdG8gaGF2ZSBhZ3JlZWQgdG8gdGFrZSBvbmx5IGEgdGhpcmQgb2YgbXkgZmF0aGVyJ3MKICAgICAgICAgICAgICAgICAgICBlc3RhdGUg77yIdGhvdWdoIHRoZSB3aG9sZSBvZiBpdCB3YXMgY29taW5nIHRvIG1l77yJLCBzZWVpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlciBoYWQgYWRvcHRlZCB0aGVzZSBtZW4sIGFuZCB0byBiZSBjb250ZW50IHdpdGggdGhhdCwgYW5kIHRoZW4gdG8gZW5nYWdlCiAgICAgICAgICAgICAgICAgICAgaW4gYSBxdWFycmVsIHdpdGggbXkga2luPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdGVyYWxseSwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcdG8gc3RyaXZlIHdpdGggb25lIHVuZGVyIHRoZSBzYW1lIHlva2Uu4oCdIFN1Y2ggbWV0YXBob3JzCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgdmVyeSBjb21tb24gaW4gR3JlZWsgYW50aXF1aXR5LCB3aGVuIGhvcnNlcyBhcyB3ZWxsIGFzIG94ZW4gd2VyZSBkcml2ZW4KICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXIgdGhlIHNhbWUgeW9rZS48L25vdGU+IGFib3V0IGEgbmFtZSwgd2VyZSBpdCBub3QgdGhhdCBmb3IgbWUgdG8gY2hhbmdlCiAgICAgICAgICAgICAgICAgICAgbWluZSB3b3VsZCBicmluZyBncmVhdCBkaXNob25vciBhbmQgYSByZXB1dGF0aW9uIGZvciBjb3dhcmRpY2UsIHdoaWxlIGZvciBteQogICAgICAgICAgICAgICAgICAgIG9wcG9uZW50IHRvIGhhdmUgdGhlIHNhbWUgbmFtZSBhcyBteXNlbGYgd2FzIG9uIG1hbnkgYWNjb3VudHMgaW1wb3NzaWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBiZWdpbgogICAgICAgICAgICAgICAgICAgIHdpdGgg77yIYXNzdW1pbmcgdGhhdCBpdCBpcyBiZXN0IHRvIG1lbnRpb24gcHVibGljIG1hdHRlcnMgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0Ze+8iSwgaW4gd2hhdCB3YXkgd2lsbCB0aGUgc3RhdGUgZ2l2ZSBpdHMgY29tbWFuZCB0byB1cywgaWYgYW55CiAgICAgICAgICAgICAgICAgICAgZHV0eSBpcyB0byBiZSBwZXJmb3JtZWQ/IFRoZSBtZW1iZXJzIG9mIHRoZSB0cmliZSB3aWxsLCBvZiBjb3Vyc2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFwcG9pbnRtZW50IG9mIGNpdGl6ZW5zIHRvIHVuZGVydGFrZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyaW91cyDigJxsaXR1cmdpZXPigJ0g77yIc3VjaCBhcywgZS5nLiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaHnvvIkgd2FzIG1hZGUgZnJvbSB0aGUgdGF4LWdyb3VwcyBjaG9zZW4gYnkgdGhlIHNldmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgdHJpYmVzLjwvbm90ZT4sIG5vbWluYXRlIHVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGV5IG5vbWluYXRlIG90aGVyIHBlb3BsZS4KICAgICAgICAgICAgICAgICAgICBXZWxsIHRoZW47IHRoZXkgd2lsbCBicmluZyBmb3J3YXJkIHRoZSBuYW1lIG9mIE1hbnRpdGhldXMsIHNvbiBvZiBNYW50aWFzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaG9yaWN1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaG9yaWN1cyB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBBY2FtYW50aXMuPC9ub3RlPiBpZiB0aGV5IGFyZSBub21pbmF0aW5nIG9uZSBmb3IgY2hvcmVndXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNob3JlZ3VzIGhhZCBmb3IgaGlzIGR1dGllcyB0aGUgZXF1aXBtZW50IGFuZCB0cmFpbmluZyBvZgogICAgICAgICAgICAgICAgICAgICAgICBhIGNob3J1cyBmb3IgdGhlIGRyYW1hdGljIGNvbnRlc3RzIGF0IG9uZSBvZiB0aGUgZ3JlYXQgZmVzdGl2YWxzLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIHRoZSB0cmliZSBjaG9zZSBvbmUgb2YgaXRzIHJpY2hlc3QgbWVtYmVycy48L25vdGU+IG9yCiAgICAgICAgICAgICAgICAgICAgICAgIGd5bW5hc2lhcmNoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBneW1uYXNpYXJjaCB3YXMgYXBwb2ludGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSB0byBtYWludGFpbiBhIHRlYW0gdG8gcmVwcmVzZW50IGl0IGluIHRoZSB0b3JjaC1yYWNlcywgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWVkIGEgZmVhdHVyZSBvZiBjZXJ0YWluIEF0aGVuaWFuIGZlc3RpdmFscy48L25vdGU+IG9yIGZlYXN0ZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgdGhpcmQgZm9ybSBvZiBwdWJsaWMgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICBlbnRhaWxlZCB0aGUgZHV0eSBvZiBnaXZpbmcgdGhlIGFubnVhbCBkaW5uZXIg77yIaW4gdGhlIFByeXRhbmV1bQogICAgICAgICAgICAgICAgICAgICAgICDvvIg/77yJ77yJIHRvIHRoZSBtZW1iZXJzIG9mIHRoZSB0cmliZS48L25vdGU+IG9yIGZvcgogICAgICAgICAgICAgICAgICAgIGFueSBvdGhlciBvZmZpY2UuIEJ5IHdoYXQsIHRoZW4sIHdpbGwgaXQgYmUgbWFkZSBjbGVhciB3aGV0aGVyIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgbm9taW5hdGluZyB5b3Ugb3IgbWU/IDwvdHJhbnNsYXRpb24+"
translation['39.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPllvdSB3aWxsIHNheSBpdCBpcyBJOyBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgc2F5IGl0IGlzIHlvdS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgZWFjaCBvZiB0aGVtIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIHNlZWsgdG8gc2hpZnQgdGhlIGJ1cmRlbiBvZiB0aGUgcmVxdWlyZWQgc2VydmljZSwgc28gdGhhdCB0aGUgb3RoZXIgd291bGQKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSB0byBiZWFyIGl0Ljwvbm90ZT4gV2VsbCwgc3VwcG9zZSB0aGF0IGFmdGVyIHRoaXMgdGhlIEFyY2hvbiBzdW1tb25zIHVzLAogICAgICAgICAgICAgICAgICAgIG9yIGFueSBvdGhlciBtYWdpc3RyYXRlLCBiZWZvcmUgd2hvbSB0aGUgY2FzZSBpcyBjYWxsZWQuIFdlIGRvIG5vdCBvYmV5IHRoZQogICAgICAgICAgICAgICAgICAgIHN1bW1vbnM7IHdlIGRvIG5vdCB1bmRlcnRha2UgdGhlIHNlcnZpY2UuIFdoaWNoIG9mIHVzIGlzIGxpYWJsZSB0byB0aGUgcGVuYWx0aWVzCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgYnkgbGF3PyBBbmQgaW4gd2hhdCBtYW5uZXIgd2lsbCB0aGUgZ2VuZXJhbHMgZW50ZXIgb3VyIG5hbWVzLCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIGxpc3RpbmcgbmFtZXMgZm9yIGEgdGF4LWNvbXBhbnk/IG9yIGlmIHRoZXkgYXJlIGFwcG9pbnRpbmcgYSB0cmllcmFyY2g/IE9yLAogICAgICAgICAgICAgICAgICAgIGlmIHRoZXJlIGJlIGEgbWlsaXRhcnkgZXhwZWRpdGlvbiwgaG93IHdpbGwgaXQgYmUgbWFkZSBjbGVhciB3aGljaCBvZiB1cyBpcyBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBtdXN0ZXItcm9sbD8gPC90cmFuc2xhdGlvbj4="
translation['39.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk9yIGFnYWluLCBpZiBhbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBtYWdpc3RyYXRlLCB0aGUgQXJjaG9uLCB0aGUgS2luZy1BcmNob24sIHRoZSBTdGV3YXJkcyBvZiB0aGUgR2FtZXMsIG1ha2VzIGFuCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludG1lbnQgZm9yIHNvbWUgcHVibGljIHNlcnZpY2UsIHdoYXQgc2lnbiB3aWxsIHRoZXJlIGJlIHRvIGluZGljYXRlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHVzIHRoZXkgYXJlIGFwcG9pbnRpbmc/IEFyZSB0aGV5IGluIGhlYXZlbidzIG5hbWUgdG8gYWRkIHRoZSBkZXNpZ25hdGlvbgogICAgICAgICAgICAgICAgICAgIOKAnHNvbiBvZiBQbGFuZ29uLCcnIGlmIHRoZXkgYXJlIGVudGVyaW5nIHlvdXIgbmFtZSwgb3IgYWRkIHRoZSBuYW1lIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgbW90aGVyIGlmIHRoZXkgYXJlIGVudGVyaW5nIG1pbmU/IEJ1dCB3aG8gZXZlciBoZWFyZCBvZiBzdWNoIGEgdGhpbmc/IG9yIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hhdCBsYXcgY291bGQgdGhpcyBzcGVjaWFsIGRlc2lnbmF0aW9uIGJlIGFwcGVuZGVkLCBvciBhbnl0aGluZyBlbHNlLCBleGNlcHQKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSBvZiB0aGUgZmF0aGVyIGFuZCB0aGUgZGVtZT8gQW5kIHNlZWluZyB0aGF0IGJvdGggb2YgdGhlc2UgYXJlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgY29uZnVzaW9uIG11c3QgcmVzdWx0LiA8L3RyYW5zbGF0aW9uPg=="
translation['39.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIE1hbnRpdGhldXMsIHNvbiBvZiBNYW50aWFzLCBvZiBUaG9yaWN1cyBzaG91bGQgYmUgc3VtbW9uZWQgYXMganVkZ2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66z4HOuc+E4b21z4I8L2ZvcmVpZ24+CiAgICAgICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IHNpZ25pZnkgYSBqdWRnZSBpbiBhIGNvdXJ0IG9mIGxhdywgYnV0IGFwcGFyZW50bHkgYSBqdWRnZSBpbiBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIGZlc3RpdmFsIGNvbnRlc3QuPC9ub3RlPiB3aGF0IHNob3VsZCB3ZSBkbz8gU2hvdWxkIHdlIGdvLCBib3RoIG9mIHVzPyBGb3IKICAgICAgICAgICAgICAgICAgICBob3cgaXMgaXQgdG8gYmUgY2xlYXIgd2hldGhlciBoZSBoYXMgc3VtbW9uZWQgeW91IG9yIG1lPyBPciwgYnkgWmV1cywgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSBpcyBhcHBvaW50aW5nIHRvIGFueSBvZmZpY2UgYnkgbG90LCBmb3IgZXhhbXBsZSB0aGF0IG9mIFNlbmF0b3IsPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrPgc65z4ThvbXPgjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgZG9lcyBub3Qgc2lnbmlmeSBhIGp1ZGdlIGluIGEgY291cnQgb2YgbGF3LCBidXQgYXBwYXJlbnRseSBhIGp1ZGdlIGluIHNvbWUKICAgICAgICAgICAgICAgICAgICAgICAgZmVzdGl2YWwgY29udGVzdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gQXRoZW5zIHRoZSBtZW1iZXJzIG9mIHRoZSBzZW5hdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6yzr/Phc674b21PC9mb3JlaWduPu+8iSBvZiBmaXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bmRyZWTigJQgZmlmdHkgZnJvbSBlYWNoIG9mIHRoZSB0ZW4gdHJpYmVz4oCUd2VyZSBjaG9zZW4KICAgICAgICAgICAgICAgICAgICAgICAgYnkgbG90Ljwvbm90ZT4gdGhhdCBvZiBUaGVzbW90aGV0LDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6yzr/Phc674b21PC9mb3JlaWduPu+8iSBvZiBmaXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bmRyZWTigJQgZmlmdHkgZnJvbSBlYWNoIG9mIHRoZSB0ZW4gdHJpYmVz4oCUd2VyZSBjaG9zZW4KICAgICAgICAgICAgICAgICAgICAgICAgYnkgbG90Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgc2l4CiAgICAgICAgICAgICAgICAgICAgICAgIG1pbm9yIGFyY2hvbnMgYm9yZSB0aGlzIG5hbWU7IHNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzMuMSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMuMTwvYmlibD48L25vdGU+IG9yIGFueSBvZiB0aGUgcmVzdDsgaG93IHdpbGwgaXQgYmUgY2xlYXIgd2hpY2ggb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdXMgaGFzIGJlZW4gYXBwb2ludGVkP+KAlHVubGVzcyBzb21lIG1hcmsgc2hhbGwgYmUgYXR0YWNoZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxldCw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMzLjEiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMzLjE8L2JpYmw+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkV2ZXJ5IGNhbmRpZGF0ZSBoYWQgYW4KICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmljYXRpb24gdGFibGV0IGluc2NyaWJlZCB3aXRoIGhpcyBmdWxsIG5hbWUg77yIdGhhdCBpcywgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuIG5hbWUsIHRoZSBuYW1lIG9mIGhpcyBmYXRoZXIsIGFuZCB0aGUgbmFtZSBvZiBoaXMgZGVtZe+8iSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2FzIHBsYWNlZCBpbiB0aGUgdXJuIGZvciBkcmF3aW5nLjwvbm90ZT4gYXMgdGhlcmUgbWlnaHQgYmUgdG8gYW55dGhpbmcKICAgICAgICAgICAgICAgICAgICBlbHNlOyBhbmQgZXZlbiB0aGVuIHBlb3BsZSB3aWxsIG5vdCBrbm93IHRvIHdoaWNoIG9mIHVzIHR3byBpdCBiZWxvbmdzLiBXZWxsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgaGUgd2lsbCBzYXkgdGhhdCBoZSBoYXMgYmVlbiBhcHBvaW50ZWQsIGFuZCBJIHNoYWxsIHNheSB0aGF0IEkgaGF2ZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb25seSBjb3Vyc2UgbGVmdCBpcyBmb3IgdXMgdG8gZ28gaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0LiBTbyB0aGUgY2l0eSB3aWxsIG9yZGVyIGEgY291cnQgdG8gYmUgc2V0IHVwIGZvciBlYWNoIG9mIHRoZSBjYXNlczsgYW5kIHdlCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgYmUgY2hlYXRlZCBvZiB0aGUgZmFpciBhbmQgZXF1YWwgcmlnaHQsIHRoYXQgdGhlIG9uZSBjaG9zZW4gYnkgbG90IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgaG9sZCBvZmZpY2UuIFRoZW4gd2Ugc2hhbGwgYmVyYXRlIGVhY2ggb3RoZXIsIGFuZCBoZSB3aG8gc2hhbGwgcHJldmFpbCBieSBoaXMKICAgICAgICAgICAgICAgICAgICB3b3JkcyB3aWxsIGhvbGQgb2ZmaWNlLiBBbmQgaW4gd2hpY2ggY2FzZSBzaG91bGQgd2UgYmUgYmV0dGVyIG9mZuKAlGJ5CiAgICAgICAgICAgICAgICAgICAgdHJ5aW5nIHRvIHJpZCBvdXJzZWx2ZXMgb2Ygb3VyIGV4aXN0aW5nIHJlc2VudG1lbnRzLCBvciBieSBhcm91c2luZyBmcmVzaAogICAgICAgICAgICAgICAgICAgIGFuaW1vc2l0aWVzIGFuZCByZWNyaW1pbmF0aW9ucz8gRm9yIHRoZXNlIG11c3Qgb2YgbmVjZXNzaXR5IHJlc3VsdCwgd2hlbiB3ZQogICAgICAgICAgICAgICAgICAgIHdyYW5nbGUgd2l0aCBvbmUgYW5vdGhlciBhYm91dCBhbiBvZmZpY2Ugb3IgYW55dGhpbmcgZWxzZS4gPC90cmFuc2xhdGlvbj4="
translation['39.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VwcG9zZSBhZ2FpbiDvvIhmb3Igd2UgbXVzdCBleGFtaW5lIGV2ZXJ5IHBoYXNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1hdHRlcu+8iSwgb25lIG9yIHRoZSBvdGhlciBvZiB1cyBwZXJzdWFkZXMgdGhlIG90aGVyLCBpbiBjYXNlIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgY2hvc2VuLCB0byB5aWVsZCB0aGUgb2ZmaWNlIHRvIGhpbSwgYW5kIHNvIG9idGFpbnMgdGhlIGFwcG9pbnRtZW50PyBXaGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhpcyBidXQgb25lIG1hbiBkcmF3aW5nIGxvdHMgd2l0aCB0d28gdGFibGV0cz8gU2hhbGwgaXQsIHRoZW4sIGJlIHBlcm1pdHRlZCB1cwogICAgICAgICAgICAgICAgICAgIHRvIGRvIHdpdGggaW1wdW5pdHkgYSB0aGluZyBmb3Igd2hpY2ggdGhlIGxhdyBhcHBvaW50cyB0aGUgcGVuYWx0eSBvZiBkZWF0aD8KICAgICAgICAgICAgICAgICAgICDigJxXaHksIGNlcnRhaW5seSwgZm9yIHdlIHNob3VsZCBub3QgZG8gaXQs4oCdIHlvdSBtYXkgc2F5LiBJCiAgICAgICAgICAgICAgICAgICAga25vdyB0aGF0LCBhdCBsZWFzdCBzbyBmYXIgYXMgSSBhbSBjb25jZXJuZWQ7IGJ1dCBpdCBpcyBub3QgcmlnaHQgdGhhdCBzb21lCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyBzaG91bGQgZXZlbiBiZSBsaWFibGUgdG8gdGhpcyBwZW5hbHR5LCB3aGVuIHRoZXkgbmVlZCBub3QgYmUuIDwvdHJhbnNsYXRpb24+"
translation['39.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VmVyeSB3ZWxsOyBidXQgaW4KICAgICAgICAgICAgICAgICAgICB0aGVzZSBjYXNlcyBpdCBpcyB0aGUgc3RhdGUgdGhhdCBpcyBpbmp1cmVkOiB3aGF0IGhhcm0gZG9lcyBpdCBkbyBtZQogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWxseT8gT2JzZXJ2ZSBpbiB3aGF0IHNlcmlvdXMgd2F5cyBJIGFtIGhhcm1lZCwgYW5kIGNvbnNpZGVyIGlmIHRoZXJlIGJlCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgaW4gd2hhdCBJIHNheS4gSW5kZWVkIHRoZSB3cm9uZyBkb25lIHRvIG1lIGlzIGZhciBtb3JlIGdyaWV2b3VzIHRoYW4KICAgICAgICAgICAgICAgICAgICB3aGF0IHlvdSBoYXZlIGhlYXJkLiBZb3UgYWxsIGtub3csIGZvciBpbnN0YW5jZSwgdGhhdCBoZSB3YXMgaW50aW1hdGUgd2l0aAogICAgICAgICAgICAgICAgICAgIE1lbmVjbGVzIGR1cmluZyBoaXMgbGlmZXRpbWUsIGFuZCB3aXRoIGhpcyBjcm93ZCwgYW5kIHRoYXQgaGUgbm93IGFzc29jaWF0ZXMKICAgICAgICAgICAgICAgICAgICB3aXRoIG90aGVycyBubyBiZXR0ZXIgdGhhbiBNZW5lY2xlcywgYW5kIHRoYXQgaGUgaGFzIGNoZXJpc2hlZCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGFtYml0aW9ucywgYW5kIGRlc2lyZXMgdG8gYmUgdGhvdWdodCBhIGNsZXZlciBmZWxsb3c8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UG9zc2libHksIOKAnGFuIGVsb3F1ZW50IHNwZWFrZXIu4oCdPC9ub3RlPjsKICAgICAgICAgICAgICAgICAgICBhbmQsIGJ5IFpldXMsIEkgZGFyZSBzYXkgaGUgaXMuIDwvdHJhbnNsYXRpb24+"
translation['39.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGlmLCBhcwogICAgICAgICAgICAgICAgICAgIHRpbWUgZ29lcyBvbiwgaGUgdW5kZXJ0YWtlcyB0byBzZXQgb24gZm9vdCBhbnkgb2YgdGhlIHNhbWUgcHJhY3RpY2VzIGFzIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIO+8iHRoZXNlIGFyZSBpbmRpY3RtZW50cywgcHJlc2VudG1lbnRzIGZvciBjb250cmFiYW5kLCBpbmZvcm1hdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgYXJyZXN0c++8iSBhbmQgb24gdGhlIGJhc2lzIG9mIG9uZSBvZiB0aGVzZSBoZSBpcyBjb25kZW1uZWQgdG8gcGF5IGEgZmluZQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzdGF0ZSDvvIhmb3IgdGhlcmUgYXJlIG1hbnkgdmljaXNzaXR1ZGVzIGluIG1vcnRhbCBhZmZhaXJzLCBhbmQKICAgICAgICAgICAgICAgICAgICB5b3Uga25vdyB3ZWxsIGhvdyB0byBrZWVwIGluIGR1ZSBib3VuZHMgZXZlbiB0aGUgbW9zdCBjbGV2ZXIgcGVvcGxlIG9uIGFueQogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uIHdoZW4gdGhleSBvdmVycmVhY2ggdGhlbXNlbHZlc++8iSwgd2h5IHdpbGwgaGlzIG5hbWUgYmUgZW50ZXJlZAogICAgICAgICAgICAgICAgICAgIG9uIHRoZSByZWNvcmQgYW55IG1vcmUgdGhhbiBtaW5lPyA8L3RyYW5zbGF0aW9uPg=="
translation['39.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz7igJxCZWNhdXNlLOKAnSBpdCBtYXkgYmUgc2FpZCwg4oCcZXZlcnlib2R5IHdpbGwga25vdwogICAgICAgICAgICAgICAgICAgIHdoaWNoIG9mIHVzIHR3byB3YXMgZmluZWQu4oCdIFZlcnkgZ29vZDsgYnV0IHN1cHBvc2Ug77yId2hhdAogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHZlcnkgd2VsbCBoYXBwZW7vvIkgdGhhdCB0aW1lIHBhc3NlcyBhbmQgdGhlIGRlYnQgaXMgbm90IHBhaWQ7IHdoeQogICAgICAgICAgICAgICAgICAgIGlzIHRoZXJlIGFueSBncmVhdGVyIGxpa2VsaWhvb2QgdGhhdCB0aGUgZGVmZW5kYW50J3MgY2hpbGRyZW4gd2lsbCBiZSBlbnRlcmVkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGxpc3Qgb2Ygc3RhdGUgZGVidG9ycyBhbnkgbW9yZSB0aGFuIG15IG93biB3aGVuIHRoZSBuYW1lIG9mIHRoZSBmYXRoZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlLCBhbmQgYWxsIGVsc2UgYXJlIGlkZW50aWNhbD8gU3VwcG9zZSwgbm93LCBzb21lYm9keSBzaG91bGQgYnJpbmcgYQogICAgICAgICAgICAgICAgICAgIHN1aXQgZm9yIGVqZWN0bWVudCBhZ2FpbnN0IGhpbSwgYW5kIHNob3VsZCBzdGF0ZSB0aGF0IGhlIGhhZCBub3RoaW5nIHRvIGRvIHdpdGgKICAgICAgICAgICAgICAgICAgICBtZSwgYnV0LCBoYXZpbmcgaGFkIHRoZSB3cml0IHJlZ2lzdGVyZWQsIHNob3VsZCBlbnRlciB0aGUgbmFtZSwgd2h5IHdpbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgbmFtZSBoZSBoYXMgZW50ZXJlZCBiZSB0aGF0IG9mIG15IG9wcG9uZW50IGFueSBtb3JlIHRoYW4gbXkgb3duPyBXaGF0IGlmIGhlCiAgICAgICAgICAgICAgICAgICAgZmFpbHMgdG8gcGF5IGFueSBvZiB0aGUgcHJvcGVydHktdGF4ZXM/IDwvdHJhbnNsYXRpb24+"
translation['39.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0CiAgICAgICAgICAgICAgICAgICAgaWYgdGhlIG5hbWUgYmUgaW52b2x2ZWQgaW4gdGhlIGZpbGluZyBvZiBhbnkgb3RoZXIgc3VpdCwgb3IsIGluIGdlbmVyYWwsIGluIGFueQogICAgICAgICAgICAgICAgICAgIHVucGxlYXNhbnQgc2NhbmRhbD8gV2hvLCBhbW9uZyBwZW9wbGUgYXQgbGFyZ2UsIHdpbGwga25vdyB3aGljaCBvZiB0aGUgdHdvIGl0CiAgICAgICAgICAgICAgICAgICAgaXMsIHdoZW4gdGhlcmUgYXJlIHR3byBNYW50aXRoZXVzZXMgaGF2aW5nIHRoZSBzYW1lIGZhdGhlcj8gU3VwcG9zZSwgYWdhaW4sIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBzaG91bGQgYmUgcHJvc2VjdXRlZCBmb3IgZXZhc2lvbiBvZiBtaWxpdGFyeSBzZXJ2aWNlLCBhbmQgc2hvdWxkIGJlIHNlcnZpbmcKICAgICAgICAgICAgICAgICAgICBhcyBjaG9yaXN0ZXIgd2hlbiBoZSBvdWdodCB0byBiZSBhYnJvYWQgd2l0aCB0aGUgYXJteeKAlGFzLCBhIHdoaWxlIGFnbywKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSByZXN0IHdlbnQgb3ZlciB0byBUYW15bmFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHRvd24gaW4KICAgICAgICAgICAgICAgICAgICAgICAgRXVib2VhLjwvbm90ZT4gaGUgd2FzIGxlZnQgYmVoaW5kIGhlcmUga2VlcGluZyB0aGUgZmVhc3Qgb2YgUGl0Y2hlcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgbmFtZSB3YXMgZ2l2ZW4gdG8gdGhlIHNlY29uZCBkYXkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZlc3RpdmFsIEFudGhlc3RlcmlhLCBoZWxkIGluIEZlYnJ1YXJ5LU1hcmNoLjwvbm90ZT4gYW5kIHJlbWFpbmVkIGhlcmUgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VydmVkIGluIHRoZSBjaG9ydXMgYXQgdGhlIERpb255c2lhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZXJ2aWNlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjaG9ydXMgYXQgdGhlIERpb255c2lhYyBmZXN0aXZhbCB3b3VsZCBlbnRpdGxlIHRoZSBpbmRpdmlkdWFsIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZW1wdGlvbiBmcm9tIHRoZSBtaWxpdGFyeSBmb3IgdGhlIHRpbWUgYmVpbmfigJRhbiBlYXN5IHdheSBvdXQgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSDigJxzbGFja2VyLuKAnTwvbm90ZT4gYXMgYWxsIG9mIHlvdSB3aG8gd2VyZSBhdCBob21lCiAgICAgICAgICAgICAgICAgICAgc2F3OyA8L3RyYW5zbGF0aW9uPg=="
translation['39.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuLCBhZnRlciB0aGUgc29sZGllcnMgaGFkIGNvbWUgYmFjawogICAgICAgICAgICAgICAgICAgIGZyb20gRXVib2VhLCBoZSB3YXMgc3VtbW9uZWQgb24gYSBjaGFyZ2Ugb2YgZGVzZXJ0aW9uLCBhbmQgSSwgYXMgdGF4aWFyY2ggb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGF4aWFyY2hzIHdlcmUgbWlsaXRhcnkgb2ZmaWNlcnMsCiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggaW4gY29tbWFuZCBvZiBoaXMgdHJpYmUncyBjb250aW5nZW50IG9mIGhvcGxpdGVzLjwvbm90ZT4gd2FzIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIHJlY2VpdmUgdGhlIHN1bW1vbnMsIHNpbmNlIGl0IHdhcyBhZ2FpbnN0IG15IG5hbWUsIHRoYXQgb2YgbXkgZmF0aGVyIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgYWRkZWQ7IGFuZCBpZiBwYXkgaGFkIGJlZW4gYXZhaWxhYmxlIGZvciB0aGUganVyaWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FdmlkZW50bHkgc2hvcnRhZ2Ugb2YgZnVuZHMgbWlnaHQgcHJldmVudCB0aGUgY291cnRzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgc2l0dGluZzsgYW5kIHRoZSBFdWJvZWFuIGNhbXBhaWduIGhhZCBkZXBsZXRlZCB0aGUgdHJlYXN1cnkuPC9ub3RlPiBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNlcnRhaW5seSBoYXZlIGhhZCB0byBicmluZyB0aGUgY2FzZSBpbnRvIGNvdXJ0LiBJZiB0aGlzIGhhZCBub3Qgb2NjdXJyZWQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgYm94ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+H4b+Wzr3Ov865PC9mb3JlaWduPiB3ZXJlIHJlY2VwdGFjbGVzIGluIHdoaWNoIHRoZSBkb2N1bWVudHMsIGV0Yy4sCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnRhaW5pbmcgdG8gdGhlIGNhc2Ugd2VyZSBwdXQgdW5kZXIgc2VhbCwgdG8gYmUgb3BlbmVkIG9ubHkgd2hlbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY2FsbGVkLiBTZWUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjQ2IiB2YWxpZD0ieWVzIj5EZW0uIDM0LjQ2PC9iaWJsPjwvbm90ZT4gaGFkCiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBiZWVuIHNlYWxlZCwgSSBzaG91bGQgaGF2ZSBicm91Z2h0IHlvdSB3aXRuZXNzZXMgdG8gcHJvdmUgaXQuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+H4b+Wzr3Ov865PC9mb3JlaWduPiB3ZXJlIHJlY2VwdGFjbGVzIGluIHdoaWNoIHRoZSBkb2N1bWVudHMsIGV0Yy4sCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnRhaW5pbmcgdG8gdGhlIGNhc2Ugd2VyZSBwdXQgdW5kZXIgc2VhbCwgdG8gYmUgb3BlbmVkIG9ubHkgd2hlbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY2FsbGVkLiBTZWUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjQ2IiB2YWxpZD0ieWVzIj5EZW0uIDM0LjQ2PC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['39.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW47IHN1cHBvc2UgaGUgd2VyZSBzdW1tb25lZCBvbiB0aGUgY2hhcmdlIG9mCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYW4gYWxpZW4uIEFuZCBoZSBkb2VzIG1ha2UgaGltc2VsZiBvYm5veGlvdXMgdG8gbWFueSwgYW5kIHRoZSB3YXkgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBteSBmYXRoZXIgd2FzIGNvbXBlbGxlZCB0byBhZG9wdCBoaW0gaXMgbm8gc2VjcmV0LiBZb3UsIG9uIHlvdXIgcGFydCwgd2hpbGUgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgd2FzIHJlZnVzaW5nIHRvIGFja25vd2xlZGdlIGhpbSwgYmVsaWV2ZWQgdGhhdCBoaXMgbW90aGVyIHdhcyB0ZWxsaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoOyBidXQgd2hlbiwgd2l0aCBoaXMgcGFyZW50YWdlIHRodXMgZXN0YWJsaXNoZWQsIGhlIG1ha2VzIGhpbXNlbGYgb2Rpb3VzLAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIHNvbWUgZGF5IG9uIHRoZSBjb250cmFyeSBjb25jbHVkZSB0aGF0IG15IGZhdGhlcidzIHN0b3J5IHdhcyB0cnVlLgogICAgICAgICAgICAgICAgICAgIEFnYWluLCB3aGF0IGlmIG15IG9wcG9uZW50LCBpbiB0aGUgZXhwZWN0YXRpb24gb2YgYmVpbmcgY29udmljdGVkIG9mIHBlcmp1cnkgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlcnZpY2VzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSDigJxzZXJ2aWNl4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIGF0IHdoaWNoIHRoZSBzcGVha2VyIGhpbnRzIGlzIHByZXN1bWFibHkgdGhlIGJlYXJpbmcgb2YgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGltb255Ljwvbm90ZT4gd2hpY2ggaGUgZnJlZWx5IGdyYW50cyBoaXMgYXNzb2NpYXRlcywgc2hvdWxkIGFsbG93IHRoZQogICAgICAgICAgICAgICAgICAgIHN1aXQgdG8gZ28gYnkgZGVmYXVsdD8gRG8geW91IHRoaW5rIGl0IHdvdWxkIGJlIGEgc2xpZ2h0IGluanVyeSB0aGF0IEkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgbXkgd2hvbGUgbGlmZSBsb25nIGEgc2hhcmVyIG9mIGhpcyByZXB1dGF0aW9uIGFuZCBoaXMgZG9pbmdzPyA8L3RyYW5zbGF0aW9uPg=="
translation['39.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UHJheSBvYnNlcnZlIHRoYXQgbXkgZmVhcgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGUgdGhpbmdzIEkgaGF2ZSBzZXQgZm9ydGggdG8geW91IGlzIG5vdCBhIHZhaW4gb25lLiBIZSBoYXMgYWxyZWFkeSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgQXRoZW5zLCBiZWVuIGRlZmVuZGFudCBpbiBjZXJ0YWluIHN1aXRzLCBpbiB3aGljaCwgYWx0aG91Z2ggSSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICB3aG9sbHkgaW5ub2NlbnQsIG9kaXVtIGhhcyBhdHRhY2hlZCB0byBteSBuYW1lIGFzIHdlbGwgYXMgaGlzOyBhbmQgaGUgaGFzIGxhaWQKICAgICAgICAgICAgICAgICAgICBjbGFpbSB0byB0aGUgb2ZmaWNlIHRvIHdoaWNoIHlvdSBoYWQgZWxlY3RlZCBtZTsgYW5kIG1hbnkgdW5wbGVhc2FudCB0aGluZ3MgaGF2ZQogICAgICAgICAgICAgICAgICAgIGhhcHBlbmVkIHRvIG1lIGJlY2F1c2Ugb2YgdGhlIG5hbWU7IHJlZ2FyZGluZyBlYWNoIG9uZSBvZiB3aGljaCBJIHdpbGwgcHJvZHVjZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0byBpbmZvcm0geW91IGZ1bGx5LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHNlZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgQXRoZW5zLCB3aGF0IGtlZXBzIGhhcHBlbmluZyBhbmQgdGhlIGFubm95YW5jZSByZXN1bHRpbmcgZnJvbSB0aGUgbWF0dGVyLiBCdXQKICAgICAgICAgICAgICAgICAgICBldmVuIGlmIHRoZXJlIHdlcmUgbm8gYW5ub3lpbmcgcmVzdWx0cywgYW5kIGlmIGl0IHdlcmUgbm90IGFic29sdXRlbHkgaW1wb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIGZvciB1cyBib3RoIHRvIGhhdmUgdGhlIHNhbWUgbmFtZSwgaXQgc3VyZWx5IGlzIG5vdCBmYWlyIGZvciBoaW0gdG8gaGF2ZSBoaXMKICAgICAgICAgICAgICAgICAgICBzaGFyZSBvZiBteSBwcm9wZXJ0eSBieSB2aXJ0dWUgb2YgdGhlIGFkb3B0aW9uIHdoaWNoIG15IGZhdGhlciBtYWRlIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgY29tcHVsc2lvbiwgYW5kIGZvciBtZSB0byBiZSByb2JiZWQgb2YgdGhlIG5hbWUgd2hpY2ggdGhhdCBmYXRoZXIgZ2F2ZSBtZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gZnJlZSB3aWxsIGFuZCB1bmRlciBjb25zdHJhaW50IGZyb20gbm8gb25lLiBJLCBjZXJ0YWlubHksIHRoaW5rIGl0IGlzIG5vdC4KICAgICAgICAgICAgICAgICAgICBOb3csIHRvIHNob3cgeW91IHRoYXQgbXkgZmF0aGVyIG5vdCBvbmx5IG1hZGUgdGhlIGVudHJ5IGluIHRoZSBsaXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNsYW5zbWVuIGluIHRoZSBtYW5uZXIgd2hpY2ggaGFzIGJlZW4gdGVzdGlmaWVkIHRvIHlvdSwgYnV0IHRoYXQgaGUgZ2F2ZSBtZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgbmFtZSB3aGVuIGhlIGtlcHQgdGhlIHRlbnRoIGRheSBhZnRlciBteSBiaXJ0aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNoaWxkIHdhcyBmb3JtYWxseSBuYW1lZCBhdCBhIGNlcmVtb255IGhlbGQgb24gdGhlIHRlbnRoIGRheSBhZnRlcgogICAgICAgICAgICAgICAgICAgICAgICBiaXJ0aCwgYW5kIGF0dGVuZGVkIGJ5IG1lbWJlcnMgb2YgdGhlIGZhbWlseSBhbmQgY2xvc2UgZnJpZW5kcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgcGxlYXNlIHRha2UgdGhpcyBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlbiwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgQXRoZW5zLCB0aGF0IEkgaGF2ZSBhbHdheXMgYmVlbiBpbiBwb3NzZXNzaW9uIG9mIHRoZSBuYW1lIE1hbnRpdGhldXM7IGJ1dAogICAgICAgICAgICAgICAgICAgIHRoYXQgbXkgZmF0aGVyLCB3aGVuIGhlIHdhcyBjb21wZWxsZWQgdG8gZW50ZXIgaGltLCBlbnRlcmVkIHRoZSBkZWZlbmRhbnQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGlzdCBvZiBjbGFuc21lbiBhcyBCb2VvdHVzLiBJIHNob3VsZCBiZSBnbGFkLCB0aGVuLCB0byBhc2sgaGltIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZSwg4oCcSWYgbXkgZmF0aGVyIGhhZCBub3QgZGllZCwgd2hhdCB3b3VsZCB5b3UgaGF2ZSBkb25lIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbmNlIG9mIHlvdXIgZGVtZXNtYW4/IFdvdWxkIHlvdSBub3QgaGF2ZSBhbGxvd2VkIHlvdXJzZWxmIHRvIGJlIHJlZ2lzdGVyZWQKICAgICAgICAgICAgICAgICAgICBhcyBCb2VvdHVzP+KAnSBCdXQgaXQgd291bGQgaGF2ZSBiZWVuIGFic3VyZCB0byBicmluZyBzdWl0IHRvIGZvcmNlIHRoaXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiBhZnRlcndhcmRzIHRvIHNlZWsgdG8gcHJldmVudCBpdC4gQW5kIHlldCwgaWYgeW91IGhhZCBhbGxvd2VkIGhpbSwgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgd291bGQgaGF2ZSBlbnJvbGxlZCB5b3UgaW4gdGhlIHJlZ2lzdGVyIG9mIGRlbWVzbWVuIGJ5IHRoZSBzYW1lIG5hbWUgYXMKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgaW4gdGhhdCBvZiB0aGUgY2xhbnNtZW4uIFRoZW4sIE8gRWFydGggYW5kIHRoZSBHb2RzLCBpdCBpcyBtb25zdHJvdXMgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGNsYWltIHRoYXQgTWFudGlhcyBpcyBoaXMgZmF0aGVyLCBhbmQgeWV0IHRvIGhhdmUgdGhlIGF1ZGFjaXR5IHRvIHRyeSB0bwogICAgICAgICAgICAgICAgICAgIG1ha2Ugb2Ygbm9uZSBlZmZlY3Qgd2hhdCBNYW50aWFzIGRpZCBpbiBoaXMgbGlmZXRpbWUuIDwvdHJhbnNsYXRpb24+"
translation['39.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgaGFkIHRoZSBlZmZyb250ZXJ5LAogICAgICAgICAgICAgICAgICAgIG1vcmVvdmVyLCB0byBtYWtlIGJlZm9yZSB0aGUgYXJiaXRyYXRvciB0aGUgbW9zdCBhdWRhY2lvdXMgYXNzZXJ0aW9ucywgdGhhdCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBrZXB0IHRoZSB0ZW50aCBkYXkgYWZ0ZXIgYmlydGggZm9yIGhpbSwganVzdCBhcyBmb3IgbWUsIGFuZCBnYXZlIGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICBuYW1lIE1hbnRpdGhldXM7IGFuZCBoZSBicm91Z2h0IGZvcndhcmQgYXMgd2l0bmVzc2VzIHBlcnNvbnMgd2l0aCB3aG9tIG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyBuZXZlciBrbm93biB0byBiZSBpbnRpbWF0ZS4gQnV0IEkgdGhpbmsgdGhhdCBub3Qgb25lIG9mIHlvdSBpcyB1bmF3YXJlIHRoYXQKICAgICAgICAgICAgICAgICAgICBubyBtYW4gd291bGQgaGF2ZSBrZXB0IHRoZSB0ZW50aCBkYXkgZm9yIGEgY2hpbGQgd2hpY2ggaGUgZGlkIG5vdCBiZWxpZXZlIHdhcwogICAgICAgICAgICAgICAgICAgIHJpZ2h0bHkgaGlzIG93bjsgbm9yLCBpZiBoZSBoYWQga2VwdCB0aGUgZGF5IGFuZCBzaG93biB0aGUgYWZmZWN0aW9uIG9uZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGZlZWwgZm9yIGEgc29uLCB3b3VsZCBhZnRlcndhcmQgaGF2ZSBkYXJlZCB0byBkZW55IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['39.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXZlbiBpZiBoZSBtaWdodCBoYXZlIGdvdCBpbnRvIHNvbWUgcXVhcnJlbCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIG1vdGhlciBvZiB0aGVzZSBjaGlsZHJlbiwgaGUgd291bGQgbm90IGhhdmUgaGF0ZWQgdGhlbSwgaWYgaGUgYmVsaWV2ZWQgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGJlIGhpcyBvd24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgcGFzc2FnZSBpcyByZXBlYXRlZCB3aXRoIHNsaWdodAogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzIGluIHRoZSBmb2xsb3dpbmcgb3JhdGlvbiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC4yOSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA0MC4yOTwvYmlibD4uPC9ub3RlPiBGb3IgbWFuIGFuZCB3aWZlIGFyZSBtdWNoIG1vcmUgYXB0LCBpbiBjYXNlcyB3aGVyZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIGF0IHZhcmlhbmNlIHdpdGggb25lIGFub3RoZXIsIHRvIGJlY29tZSByZWNvbmNpbGVkIGZvciB0aGUgc2FrZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCB0aGFuLCBvbiB0aGUgZ3JvdW5kIG9mIHRoZSBpbmp1cmllcyB3aGljaCB0aGV5IGhhdmUgZG9uZSBvbmUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIsIHRvIGhhdGUgdGhlaXIgY29tbW9uIGNoaWxkcmVuIGFsc28uIEhvd2V2ZXIsIGl0IGlzIG5vdCBmcm9tIHRoZXNlIGZhY3RzCiAgICAgICAgICAgICAgICAgICAgYWxvbmUgdGhhdCB5b3UgbWF5IHNlZSB0aGF0IGhlIHdpbGwgYmUgbHlpbmcsIGlmIGhlIG1ha2VzIHRoZXNlIHN0YXRlbWVudHM7IGJ1dCwKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgaGUgY2xhaW1lZCB0byBiZSBhIGtpbnNtYW4gb2Ygb3VycywgaGUgdXNlZCB0byBnbyB0byB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICBIaXBwb3Rob250aXMgdG8gZGFuY2UgaW4gdGhlIGNob3J1cyBvZiBib3lzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDAuMjkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNDAuMjk8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCB0byB0aGUgdHJpYmUgdG8gd2hpY2ggaGlzIG1vdGhlciBiZWxvbmdlZCwgbm90IHRvIHRoYXQgb2YgTWFudGlhcywKICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2FzIHRoZSBBY2FtYW50aXMuIFRoZSBzcGVha2VyIHdvdWxkIGhhdmUgdGhpcyBpbmRpY2F0ZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtb3RoZXIgd2FzIGNvbnNjaW91cyB0aGF0IHRoZSBib3kgd2FzIG5vdCB0aGUgc29uIG9mIE1hbnRpYXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCB3aG8gYW1vbmcgeW91IGltYWdpbmVzIHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgbW90aGVyIHdvdWxkIGhhdmUgc2VudCBoaW0gdG8gdGhpcyB0cmliZSwgaWYsIGFzIHNoZSBhbGxlZ2VzLCBzaGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBjcnVlbGx5IHRyZWF0ZWQgYnkgbXkgZmF0aGVyLCBhbmQga25ldyB0aGF0IGhlIGhhZCBrZXB0IHRoZSB0ZW50aCBkYXksIGFuZAogICAgICAgICAgICAgICAgICAgIGFmdGVyd2FyZCBkZW5pZWQgaXQ/IE5vdCBvbmUsIEkgYW0gc3VyZS4gRm9yIGl0IHdvdWxkIGhhdmUgYmVlbiBqdXN0IGFzIG11Y2gKICAgICAgICAgICAgICAgICAgICB5b3VyIHJpZ2h0IHRvIGdvIHRvIHNjaG9vbCB0byB0aGUgdHJpYmUgQWNhbWFudGlzLCBhbmQgdGhlbiB0aGUgdHJpYmUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gaW4gbWFuaWZlc3QgYWdyZWVtZW50IHdpdGggdGhlIGdpdmluZyBvZiB0aGUgbmFtZS4gVG8gcHJvdmUgdGhhdCBJIGFtCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIEkgc2hhbGwgYnJpbmcgYmVmb3JlIHlvdSBhcyB3aXRuZXNzZXMgdGhvc2Ugd2hvIHdlbnQKICAgICAgICAgICAgICAgICAgICB0byBzY2hvb2wgd2l0aCBoaW0sIGFuZCBrbm93IHRoZSBmYWN0cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmV2ZXJ0aGVsZXNzLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIGl0IGlzIHNvIHBsYWluIHRoYXQgYnkgaGlzIG1vdGhlcidzIG9hdGggYW5kIHRoZSBzaW1wbGljaXR5IG9mIGhpbSB3aG8KICAgICAgICAgICAgICAgICAgICB0ZW5kZXJlZCB0aGUgb2F0aCB0byBoZXIsIGhlIGhhcyBvYnRhaW5lZCBhIGZhdGhlciBhbmQgZXN0YWJsaXNoZWQgaGlzIGJpcnRoIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIEFjYW1hbnRpcywgaW5zdGVhZCBvZiBIaXBwb3Rob250aXMsIHRoZSBkZWZlbmRhbnQgQm9lb3R1cyBpcyBub3QKICAgICAgICAgICAgICAgICAgICBjb250ZW50IHdpdGggdGhpcywgYnV0IGhhcyBhY3R1YWxseSBlbnRlcmVkIHR3byBvciB0aHJlZSBzdWl0cyBhZ2FpbnN0IG1lIGZvcgogICAgICAgICAgICAgICAgICAgIG1vbmV5LCBpbiBhZGRpdGlvbiB0byB0aGUgbWFsaWNpb3VzIGFuZCBiYXNlbGVzcyBhY3Rpb25zIHdoaWNoIGhlIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lIGJlZm9yZS4gQW5kIHlldCBJIHRoaW5rIHlvdSBhbGwga25vdyB3aGF0IHNvcnQgb2YgYSBtYW4gb2YgYnVzaW5lc3MKICAgICAgICAgICAgICAgICAgICBteSBmYXRoZXIgd2FzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5IZSB3YXMgc28gcG9vciBhIG1hbiBvZiBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGFmdGVyIGhpcyBkZWF0aCBoaXMgaGVpcnMgaGFkIHRvIHBheSBvZmYgaW5kZWJ0ZWRuZXNzIGluY3VycmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGhpbS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpbGwgc2F5IG5vdGhpbmcgYWJvdXQgdGhpczsgYnV0IGlmIHRoZQogICAgICAgICAgICAgICAgICAgIG1vdGhlciBvZiB0aGVzZSBtZW4gaGFzIHN3b3JuIHRydWx5LCBpdCBhYnNvbHV0ZWx5IHByb3ZlcyB0aGF0IHRoZSBmZWxsb3cgaXMKICAgICAgICAgICAgICAgICAgICBhY3RpbmcgYXMgYSBtYWxpY2lvdXMgcGV0dHlmb2dnZXIgaW4gdGhlc2Ugc3VpdHMuIEZvciBpZiBteSBmYXRoZXIgd2FzIHNvCiAgICAgICAgICAgICAgICAgICAgZXh0cmF2YWdhbnQgdGhhdCBhZnRlciBoYXZpbmcgbWFycmllZCBteSBtb3RoZXIgaW4gbGF3ZnVsIHdlZGxvY2ssIGhlIGtlcHQKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHdvbWFuLCB3aG9zZSBjaGlsZHJlbiB5b3UgYXJlLCBhbmQgbWFpbnRhaW5lZCB0d28gZXN0YWJsaXNobWVudHMsIGhvdwogICAgICAgICAgICAgICAgICAgIHByYXkgaWYgaGUgd2VyZSBhIG1hbiBvZiB0aGlzIHNvcnQsIGNvdWxkIGhlIGhhdmUgbGVmdCBhbnkgbW9uZXk/IDwvdHJhbnNsYXRpb24+"
translation['39.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBhbSB3ZWxsIGF3YXJlLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiBBdGhlbnMsIHRoYXQgdGhlIGRlZmVuZGFudCwgQm9lb3R1cywgd2lsbCBoYXZlIG5vIHZhbGlkIGFyZ3VtZW50IHRvIGFkdmFuY2UsCiAgICAgICAgICAgICAgICAgICAgYnV0IHdpbGwgaGF2ZSByZWNvdXJzZSB0byB0aGUgc3RhdGVtZW50cyBoZSBpcyBhbHdheXMgbWFraW5nLCB0aGF0IG15IGZhdGhlciB3YXMKICAgICAgICAgICAgICAgICAgICBpbmR1Y2VkIGJ5IG1lIHRvIHRyZWF0IGhpbSB3aXRoIGRlc3BpdGU7IGFuZCBoZSBjbGFpbXMgdGhlIHJpZ2h0LCBhbGxlZ2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaXMgb2xkZXIgdGhhbiBJLCB0byBiZWFyIHRoZSBuYW1lIG9mIGhpcyBwYXRlcm5hbCBncmFuZGZhdGhlci4gQXMgdG8gdGhpcywgaXQKICAgICAgICAgICAgICAgICAgICBpcyBiZXR0ZXIgZm9yIHlvdSB0byBsaXN0ZW4gdG8gYSBmZXcgc3RhdGVtZW50cy4gSSByZW1lbWJlciBzZWVpbmcgaGltLCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBiZWNhbWUgYSByZWxhdGl2ZSBvZiBtaW5lLCBjYXN1YWxseSwgYXMgb25lIG1pZ2h0IHNlZSBhbnlvbmUgZWxzZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCBoaW0geW91bmdlciB0aGFuIEksIGFuZCB0byBqdWRnZSBieSBhcHBlYXJhbmNlcywgbXVjaCB5b3VuZ2VyOyBidXQgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IGluc2lzdCB1cG9uIHRoaXMsIGZvciBpdCB3b3VsZCBiZSBzaWxseSB0byBkbyBzby4gPC90cmFuc2xhdGlvbj4="
translation['39.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzdXBwb3NlIG9uZSBzaG91bGQgYXNrIHRoaXMgQm9lb3R1cyB0aGUgZm9sbG93aW5nCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zOiDigJxXaGVuIHlvdSB0aG91Z2h0IGl0IHJpZ2h0IHRvIGpvaW4gdGhlIGNob3J1cyBpbiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICBIaXBwb3Rob250aXMgYmVmb3JlIHlvdSBjbGFpbWVkIHRvIGJlIHRoZSBzb24gb2YgbXkgZmF0aGVyLCB3aGF0IG5hbWUgd291bGQgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzZXQgZG93biBhcyByaWdodGx5IGJlbG9uZ2luZyB0byB5b3U/IEZvciBpZiB5b3Ugc2hvdWxkIHNheSwgTWFudGl0aGV1cywKICAgICAgICAgICAgICAgICAgICB5b3UgY291bGQgbm90IGRvIHNvIG9uIHRoZSBwbGVhIHRoYXQgeW91IGFyZSBvbGRlciB0aGFuIEksIGZvciBzaW5jZSBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSB5b3UgZGlkIG5vdCBzdXBwb3NlIHlvdSBoYWQgYW55IGNvbm5lY3Rpb24gZXZlbiB3aXRoIG15IHRyaWJlLCBob3cgY291bGQKICAgICAgICAgICAgICAgICAgICB5b3UgY2xhaW0gdG8gYmUgcmVsYXRlZCB0byBteSBncmFuZGZhdGhlcj8gPC90cmFuc2xhdGlvbj4="
translation['39.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCBtZW4gb2YgQXRoZW5zLCBub3Qgb25lIG9mIHlvdSBrbm93cyB0aGUgbnVtYmVyIG9mIHRoZSB5ZWFycywgZm9yIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBzYXkgdGhhdCBJIGFtIHRoZSBlbGRlciwgYW5kIGhlIHdpbGwgc2F5IHRoYXQgaGUgaXMsIGJ1dCB5b3UgYWxsCiAgICAgICAgICAgICAgICAgICAgdW5kZXJzdGFuZCB0aGUganVzdCB3YXkgb2YgcmVja29uaW5nLiBBbmQgd2hhdCBpcyB0aGlzPyBUaGF0IHRoZXNlIG1lbiBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIGNoaWxkcmVuIG9mIG15IGZhdGhlciBmcm9tIHRoZSBkYXRlIHdoZW4gaGUgYWRvcHRlZCB0aGVtLiBXZWxsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgaGUgZW50ZXJlZCBtZSBvbiB0aGUgcmVnaXN0ZXIgb2YgdGhlIGRlbWVzbWVuIGFzIE1hbnRpdGhldXMsIGJlZm9yZSBoZQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgdGhpcyBtYW4gdG8gdGhlIGNsYW5zbWVuLiBUaGVyZWZvcmUgbm90IGJ5IHZpcnR1ZSBvZiB0aW1lIG9ubHksIGJ1dAogICAgICAgICAgICAgICAgICAgIGFsc28gYnkgdmlydHVlIG9mIGp1c3RpY2UgSSBoYXZlIHRoZSByaWdodCB0byBiZWFyIHRoaXMgbmFtZSBhcyBhIG1hcmsgb2YKICAgICAgICAgICAgICAgICAgICBzZW5pb3JpdHkuIDwvdHJhbnNsYXRpb24+"
translation['39.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5WZXJ5IHdlbGwuIE5vdywgc3VwcG9zZSBvbmUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYXNrIHlvdSB0aGlzIHF1ZXN0aW9uPyDigJxUZWxsIG1lLCBCb2VvdHVzLCBob3cgaXMgaXQgdGhhdCB5b3UgaGF2ZSBub3cKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgYSBtZW1iZXIgb2YgdGhlIHRyaWJlIEFjYW1hbnRpcywgYW5kIG9mIHRoZSBkZW1lIFRob3JpY3VzLCBhbmQgYSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBNYW50aWFzLCBhbmQgaGF2ZSB5b3VyIHNoYXJlIGluIHRoZSBwcm9wZXJ0eSBsZWZ0IGJ5IGhpbT/igJ0gWW91IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBubyBvdGhlciBhbnN3ZXIgdGhhbiwg4oCcTWFudGlhcyB3aGlsZSBsaXZpbmcgYWNrbm93bGVkZ2VkIG1lLCB0b28sCiAgICAgICAgICAgICAgICAgICAgYXMgaGlzIHNvbi7igJ0gSWYgb25lIHNob3VsZCBhc2sgeW91IHdoYXQgcHJvb2YgeW91IGhhZCBvZiB0aGlzIG9yIHdoYXQKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSwgeW91IHdvdWxkIHNheSwg4oCcSGUgaW50cm9kdWNlZCBtZSB0byB0aGUgY2xhbnNtZW4u4oCdCiAgICAgICAgICAgICAgICAgICAgQnV0IGlmIG9uZSBhc2tlZCB1bmRlciB3aGF0IG5hbWUgaGUgZW5yb2xsZWQgeW91LCB5b3Ugd291bGQgc2F5LAogICAgICAgICAgICAgICAgICAgIOKAnEJvZW90dXMs4oCdIGZvciB0aGF0IGlzIHRoZSBuYW1lIGJ5IHdoaWNoIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW50cm9kdWNlZC4gPC90cmFuc2xhdGlvbj4="
translation['39.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcywgdGhlbiwgYW4gb3V0cmFnZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hlcmVhcyB0aGFua3MgdG8gdGhhdCBuYW1lIHlvdSBoYXZlIGEgc2hhcmUgaW4gdGhlIHJpZ2h0IG9mIGNpdGl6ZW5zaGlwIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBlc3RhdGUgbGVmdCBieSBteSBmYXRoZXIsIHlvdSBzaG91bGQgc2VlIGZpdCB0byBmbGluZyBpdCBhc2lkZSBhbmQgdGFrZQogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgbmFtZS4gQ29tZTsgc3VwcG9zZSBteSBmYXRoZXIgd2VyZSB0byByaXNlIGZyb20gdGhlIGdyYXZlIGFuZCBkZW1hbmQgb2YKICAgICAgICAgICAgICAgICAgICB5b3UgZWl0aGVyIHRvIGFiaWRlIGJ5IHRoZSBuYW1lIHVuZGVyIHdoaWNoIGhlIGFkb3B0ZWQgeW91LCBvciB0byBkZWNsYXJlCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgdGhlIHNvbiBvZiBzb21lIG90aGVyIGZhdGhlciwgd291bGQgaGlzIGRlbWFuZCBub3QgYmUgdGhvdWdodCBhCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSBvbmU/IFdlbGwgdGhlbiwgSSBtYWtlIHRoaXMgc2FtZSBkZW1hbmQgb2YgeW91LCBlaXRoZXIgdG8gYWRkIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBuYW1lIHRoYXQgb2YgYW5vdGhlciBmYXRoZXIsIG9yIHRvIGtlZXAgdGhlIG5hbWUgd2hpY2ggTWFudGlhcyBnYXZlIHlvdS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5BaCwgeW91IG1heSBzYXksIGJ1dCB0aGF0IG5hbWUgd2FzIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgeW91IGJ5IHdheSBvZiBkZXJpc2lvbiBvciBpbnN1bHQuIE5vOyB2ZXJ5IG9mdGVuLCBkdXJpbmcgdGhlIHRpbWUgd2hlbiBteSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIGFja25vd2xlZGdlIHRoZW0sIHRoZXNlIG1lbiB1c2VkIHRvIHNheSB0aGF0IHRoZSBraW5zZm9sayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBtb3RoZXIgd2VyZSBxdWl0ZSBhcyBnb29kIGFzIHRob3NlIG9mIG15IGZhdGhlci4gQm9lb3R1cyBpcyB0aGUgbmFtZQogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBtb3RoZXIncyBicm90aGVyOyBhbmQgd2hlbiBteSBmYXRoZXIgd2FzIGNvbXBlbGxlZCB0byBicmluZyB0aGVtIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY2xhbiwgd2hlbiBJIGhhZCBhbHJlYWR5IGJlZW4gaW50cm9kdWNlZCBhcyBNYW50aXRoZXVzLCBoZSBpbnRyb2R1Y2VkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBhcyBCb2VvdHVzLCBhbmQgaGlzIGJyb3RoZXIgYXMgUGFtcGhpbHVzLiBGb3IgSSBjaGFsbGVuZ2UgeW91IHRvIHNob3cKICAgICAgICAgICAgICAgICAgICBtZSBhbnkgQXRoZW5pYW4gd2hvIGV2ZXIgZ2F2ZSB0aGUgc2FtZSBuYW1lIHRvIHR3byBvZiBoaXMgc29ucy4gSWYgeW91IGNhbiwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgZ3JhbnQgdGhhdCBteSBmYXRoZXIgZ2F2ZSB5b3UgdGhpcyBuYW1lIGJ5IHdheSBvZiBpbnN1bHQuIDwvdHJhbnNsYXRpb24+"
translation['39.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBpZiB5b3VyIGNoYXJhY3RlciB3YXMgc3VjaCB0aGF0IHlvdSBjb3VsZCBmb3JjZSBoaW0KICAgICAgICAgICAgICAgICAgICB0byBhZG9wdCB5b3UsIGJ1dCBub3Qgc3R1ZHkgaG93IHlvdSBtaWdodCBwbGVhc2UgaGltLCB5b3Ugd2VyZSBub3Qgd2hhdCBhIHRydWUKICAgICAgICAgICAgICAgICAgICBzb24gb3VnaHQgdG8gYmUgdG93YXJkIGhpcyBwYXJlbnRzOyBhbmQsIGlmIHlvdSB3ZXJlIG5vdCwgeW91IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlZCwgbm90IG9ubHkgdG8gYmUgdHJlYXRlZCB3aXRoIGluZGlnbml0eSwgYnV0IGV2ZW4gdG8gYmUgcHV0IHRvIGRlYXRoLiBJdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGluZGVlZCBiZSBhbiBvdXRyYWdlb3VzIHRoaW5nLCBpZiB0aGUgbGF3cyBjb25jZXJuaW5nIHBhcmVudHMgYXJlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYmluZGluZyB1cG9uIGNoaWxkcmVuIHdob20gdGhlIGZhdGhlciByZWNvZ25pemVzIGFzIGhpcyBvd24sIGJ1dCBhcmUgdG8gYmUgb2Ygbm8KICAgICAgICAgICAgICAgICAgICBlZmZlY3QgYWdhaW5zdCB0aG9zZSB3aG8gaGF2ZSBmb3JjZWQgdGhlbXNlbHZlcyBpbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd29yZCBjaG9zZW4gaXMgdGhlIG9uZSBwcm9wZXJseSB1c2VkIG9mIGFsaWVucyB3aG8gc2VlawogICAgICAgICAgICAgICAgICAgICAgICB0byBhcnJvZ2F0ZSB0byB0aGVtc2VsdmVzIHRoZSByaWdodHMgb2YgY2l0aXplbnNoaXAuPC9ub3RlPiBhbmQgY29tcGVsbGVkIGFuCiAgICAgICAgICAgICAgICAgICAgdW53aWxsaW5nIGFkb3B0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['39.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHVuY29uc2Npb25hYmxlIEJvZW90dXMsIGRvLCBwcmF5LCBnaXZlIHVwIHlvdXIgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIHdheXM7IGJ1dCwgaWYgaW5kZWVkIHlvdSBhcmUgdW53aWxsaW5nIHRvLCBkbywgaW4gSGVhdmVuJ3MgbmFtZSwgYWNjZXB0IGFkdmljZQogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgYXQgbGVhc3Q7IGNlYXNlIHRvIG1ha2UgdHJvdWJsZSBmb3IgeW91cnNlbGYsIGFuZCBjZWFzZSBicmluZ2luZwogICAgICAgICAgICAgICAgICAgIG1hbGljaW91cyBhbmQgYmFzZWxlc3MgY2hhcmdlcyBhZ2FpbnN0IG1lOyBhbmQgYmUgY29udGVudCB0aGF0IHlvdSBoYXZlIGdhaW5lZAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCBhbiBlc3RhdGUsIGEgZmF0aGVyLiBObyBvbmUgaXMgdHJ5aW5nIHRvIGRpc3Bvc3Nlc3MgeW91IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzOyBjZXJ0YWlubHkgbm90IEkuIE5heSwgaWYsIGFzIHlvdSBjbGFpbSB0byBiZSBhIGJyb3RoZXIsIHlvdSBhbHNvIGFjdCBhcwogICAgICAgICAgICAgICAgICAgIGEgYnJvdGhlciwgcGVvcGxlIHdpbGwgYmVsaWV2ZSB0aGF0IHlvdSBhcmUgb2Ygb3VyIGJsb29kOyBidXQgaWYgeW91IGdvIG9uCiAgICAgICAgICAgICAgICAgICAgcGxvdHRpbmcgYWdhaW5zdCBtZSwgc3VpbmcgbWUsIGV2aW5jaW5nIG1hbGljZSB0b3dhcmQgbWUsIHNsYW5kZXJpbmcgbWUsIHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdGhvdWdodCB0byBoYXZlIGludHJ1ZGVkIHlvdXJzZWxmIGludG8gd2hhdCBiZWxvbmdlZCB0byBvdGhlcnMsIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgdHJlYXRpbmcgaXQgYXMgdGhvdWdoIGl0IHdlcmUgbm90IHJpZ2h0bHkgeW91cnMuIDwvdHJhbnNsYXRpb24+"
translation['39.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5JIGNlcnRhaW5seSBhbSBkb2luZyB5b3Ugbm8gd3JvbmcsIGV2ZW4gaWYgaXQgd2VyZSBuZXZlciBzbwogICAgICAgICAgICAgICAgICAgIHRydWUgdGhhdCBteSBmYXRoZXIgcmVmdXNlZCB0byByZWNvZ25pemUgeW91LCB0aG91Z2ggeW91IHdlcmUgcmVhbGx5IGhpcyBzb24uIEl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCBteSBwYXJ0IHRvIGtub3cgd2hvIHdlcmUgaGlzIHNvbnMsIGJ1dCBpdCB3YXMgaGlzIHRvIHNob3cgbWUgd2hvbSBJIG11c3QKICAgICAgICAgICAgICAgICAgICByZWdhcmQgYXMgYSBicm90aGVyLiBUaGVyZWZvcmUsIGR1cmluZyB0aGUgdGltZSBpbiB3aGljaCBoZSByZWZ1c2VkIHRvIHJlY29nbml6ZQogICAgICAgICAgICAgICAgICAgIHlvdSwgSSBhbHNvIGNvdW50ZWQgeW91IGFzIG5vIHJlbGF0aXZlOyBidXQgZXZlciBzaW5jZSBoZSwgYWRvcHRlZCB5b3UsIEkgdG9vCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkIHlvdSBhcyBhIGtpbnNtYW4uIFdoYXQgaXMgdGhlIHByb29mIG9mIHRoaXM/IFlvdSBwb3NzZXNzIHlvdXIgcG9ydGlvbiBvZgogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlcidzIGVzdGF0ZSBhZnRlciBoaXMgZGVhdGg7IHlvdSBzaGFyZSBpbiB0aGUgcmVsaWdpb3VzIHJpdGVzLCBhbmQgY2l2aWMKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzLiBObyBvbmUgc2Vla3MgdG8gZXhjbHVkZSB5b3UgZnJvbSB0aGVzZS4gV2hhdCBpcyBpdCB0aGF0IHlvdSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmU/IEJ1dCBpZiBoZSBzYXlzIHRoYXQgaGUgaXMgYmVpbmcgb3V0cmFnZW91c2x5IHRyZWF0ZWQsIGlmIGhlIHdlZXBzIGFuZAogICAgICAgICAgICAgICAgICAgIHdhaWxzLCBhbmQgbWFrZXMgY2hhcmdlcyBhZ2FpbnN0IG1lLCBkbyBub3QgYmVsaWV2ZSB3aGF0IGhlIHNheXMuIEl0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRoYXQgeW91IHNob3VsZCwgc2luY2Ugb3VyIGFyZ3VtZW50IGlzIG5vdCBub3cgYWJvdXQgdGhlc2UgbWF0dGVycy4gQnV0CiAgICAgICAgICAgICAgICAgICAgdGFrZSB0aGlzIGF0dGl0dWRl4oCUdGhhdCBoZSBjYW4ganVzdCBhcyB3ZWxsIGdldCBzYXRpc2ZhY3Rpb24gdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbmFtZSBvZiBCb2VvdHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['39.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgYXJlIHlvdSwgdGhlbiwgc28gZm9uZCBvZgogICAgICAgICAgICAgICAgICAgIHdyYW5nbGluZz8gRGVzaXN0LCBJIGJlZyB5b3U7IGRvIG5vdCBiZSBzbyByZWFkeSB0byBjaGVyaXNoIGVubWl0eSBhZ2FpbnN0IG1lLiBJCiAgICAgICAgICAgICAgICAgICAgYW0gbm90IHNvIG1pbmRlZCB0b3dhcmQgeW91LiBGb3IgZXZlbiBub3figJRsZXN0IHRoZSBmYWN0IGVzY2FwZSB5b3VyCiAgICAgICAgICAgICAgICAgICAgbm90aWNl4oCUSSBhbSBzcGVha2luZyByYXRoZXIgaW4geW91ciBpbnRlcmVzdCB0aGFuIGluIG15IG93biwgaW4KICAgICAgICAgICAgICAgICAgICBpbnNpc3RpbmcgdGhhdCB3ZSBzaG91bGQgbm90IGhhdmUgdGhlIHNhbWUgbmFtZS4gSWYgdGhlcmUgd2VyZSBubyBvdGhlciByZWFzb24sCiAgICAgICAgICAgICAgICAgICAgYXQgbGVhc3QgYW55b25lIGhlYXJpbmcgaXQgbXVzdCBhc2sgd2hpY2ggb2YgdXMgaXMgbWVhbnQgaWYgdGhlcmUgYXJlIHR3bwogICAgICAgICAgICAgICAgICAgIE1hbnRpdGhldXNlcywgc29ucyBvZiBNYW50aWFzLiBUaGVuIGhlIHdpbGwgc2F5LCDigJxUaGUgb25lIHdob20gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHRvIGFkb3B0LOKAnSBpZiBoZSBtZWFucyB5b3UuIEhvdyBjYW4geW91IGRlc2lyZSB0aGlzPyBOb3cKICAgICAgICAgICAgICAgICAgICB0YWtlLCBwbGVhc2UsIGFuZCByZWFkIHRoZXNlIHR3byBkZXBvc2l0aW9ucywgcHJvdmluZyB0aGF0IG15IGZhdGhlciBnYXZlIG1lIHRoZQogICAgICAgICAgICAgICAgICAgIG5hbWUgTWFudGl0aGV1cywgYW5kIGhpbSB0aGUgbmFtZSBCb2VvdHVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgcmVtYWlucywgSQogICAgICAgICAgICAgICAgICAgIHRoaW5rLCB0byBzaG93IHlvdSwgbWVuIG9mIEF0aGVucywgdGhhdCBub3Qgb25seSB3aWxsIHlvdSBiZSBmdWxmaWxsaW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICBvYXRocywgaWYgeW91IGdpdmUgdGhlIHZlcmRpY3QgZm9yIHdoaWNoIEkgYXNrLCBidXQgYWxzbyB0aGF0IHRoZSBkZWZlbmRhbnQgaGFzCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4ganVkZ2VtZW50IGFnYWluc3QgaGltc2VsZiwgdGhhdCBoZSBzaG91bGQgcmlnaHRseSBiZWFyIHRoZSBuYW1lIG9mCiAgICAgICAgICAgICAgICAgICAgQm9lb3R1cywgYW5kIG5vdCBNYW50aXRoZXVzLiBGb3Igd2hlbiBJIGhhZCBlbnRlcmVkIHRoaXMgc3VpdCBhZ2FpbnN0IEJvZW90dXMsCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIE1hbnRpYXMsIG9mIFRob3JpY3VzLCBhdCB0aGUgZmlyc3QgaGUgYWNjZXB0ZWQgc2VydmljZSBvZiB0aGUgc3VpdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHV0IGluIGFuIG9hdGggZm9yIGRlbGF5LCBhcyBiZWluZyBCb2VvdHVzOyBidXQgZmluYWxseSwgd2hlbiB0aGVyZSB3YXMgbm8KICAgICAgICAgICAgICAgICAgICBsb25nZXIgcm9vbSBmb3IgZXZhc2lvbiwgaGUgYWxsb3dlZCB0aGUgYXJiaXRyYXRvcnMgdG8gZ2l2ZSBqdWRnZW1lbnQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIGhpbSBieSBkZWZhdWx0LCBhbmQgdGhlbiwgaW4gSGVhdmVuJ3MgbmFtZSwgc2VlIHdoYXQgaGUgZGlk4oCUCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBnb3QgdGhpcyBqdWRnZW1lbnQgZm9yIG5vbi1hcHBlYXJhbmNlCiAgICAgICAgICAgICAgICAgICAgc2V0IGFzaWRlLCBlbnRpdGxpbmcgaGltc2VsZiBCb2VvdHVzLiBBbmQgeWV0IGhlIG91Z2h0IGluIHRoZSBmaXJzdCBwbGFjZSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYWxsb3dlZCBtZSB0byBnZXQgbXkgc3VpdCBmaW5pc2hlZCBhcyBhZ2FpbnN0IEJvZW90dXMsIGlmIHRoYXQgbmFtZSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QsIGluIGZhY3QsIHBlcnRhaW4gdG8gaGltIGF0IGFsbCwgYW5kIG5vdCBzdWJzZXF1ZW50bHkgYmUgZm91bmQgZ2V0dGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgZm9yIG5vbi1hcHBlYXJhbmNlIHNldCBhc2lkZSB1bmRlciB0aGlzIG5hbWUuIFdoZW4sIGEgbWFuIGhhcyB0aHVzCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4ganVkZ2VtZW50IGFnYWluc3QgaGltc2VsZiB0aGF0IGhlIGlzIHByb3Blcmx5IEJvZW90dXMsIHdoYXQgdmVyZGljdCBjYW4gaGUKICAgICAgICAgICAgICAgICAgICBkZW1hbmQgdGhhdCB5b3Ugc3dvcm4ganVyb3JzIHNoYWxsIGdpdmU/IFRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGgKICAgICAgICAgICAgICAgICAgICBpbiB0aGlzLCB0YWtlIHRoZSBkZWNpc2lvbiBzZXR0aW5nIGFzaWRlIHRoZSBqdWRnZW1lbnQgZm9yIG5vbi1hcHBlYXJhbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoaXMgY29tcGxhaW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY2lzaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjaXNpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjaXNpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbXBsYWludCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21wbGFpbnQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYsIG5vdywgbXkKICAgICAgICAgICAgICAgICAgICBvcHBvbmVudCBjYW4gcG9pbnQgb3V0IGEgbGF3IHdoaWNoIGdpdmVzIGNoaWxkcmVuIHRoZSByaWdodCB0byBjaG9vc2UgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgbmFtZXMsIHlvdSB3b3VsZCByaWdodGx5IGdpdmUgdGhlIHZlcmRpY3QgZm9yIHdoaWNoIGhlIGFza3MuIEJ1dCBpZiB0aGUgbGF3LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBhbGwga25vdyBhcyB3ZWxsIGFzIEksIGdpdmVzIHBhcmVudHMgdGhlIHJpZ2h0IG5vdCBvbmx5IHRvIGdpdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbmFtZSBpbiB0aGUgZmlyc3QgcGxhY2UsIGJ1dCBhbHNvIHRvIGNhbmNlbCBpdCBhbmQgcmVub3VuY2UgaXQgYnkgcHVibGljCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb24sIGlmIHRoZXkgcGxlYXNlOyBhbmQgaWYgSSBoYXZlIHNob3duIHRoYXQgbXkgZmF0aGVyLCB3aG8gaGFkIHRoaXMKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgdW5kZXIgdGhlIGxhdywgZ2F2ZSB0byB0aGUgZGVmZW5kYW50IHRoZSBuYW1lIEJvZW90dXMsIGFuZCB0byBtZSB0aGUKICAgICAgICAgICAgICAgICAgICBuYW1lIE1hbnRpdGhldXMsIGhvdyBjYW4geW91IHJlbmRlciBhbnkgb3RoZXIgdmVyZGljdCB0aGFuIHRoYXQgZm9yIHdoaWNoIEkgYXNrPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIG1vcmUsIGluIGNhc2VzIHdoaWNoIGFyZSBub3QgY292ZXJlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBsYXdzLCB5b3UgaGF2ZSBzd29ybiB0aGF0IHlvdSB3aWxsIGRlY2lkZSBhcyBpbiB5b3VyIGp1ZGdlbWVudCBpcyBtb3N0CiAgICAgICAgICAgICAgICAgICAganVzdCwgc28gdGhhdCBldmVuIGlmIHRoZXJlIHdlcmUgbm8gbGF3IGNvbmNlcm5pbmcgdGhlc2UgbWF0dGVycywgeW91IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGJvdW5kIHRvIGNhc3QgeW91ciB2b3RlcyBpbiBteSBmYXZvci4gRm9yIHdobyBpcyB0aGVyZSBhbW9uZyB5b3Ugd2hvIGhhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIHRoZSBzYW1lIG5hbWUgdG8gdHdvIG9mIGhpcyBjaGlsZHJlbj8gV2hvLCB0aGF0IGlzIGFzIHlldCBjaGlsZGxlc3MsIHdpbGwKICAgICAgICAgICAgICAgICAgICBkbyBzbz8gPC90cmFuc2xhdGlvbj4="
translation['39.41'] = ""
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3RoaW5nIGlzIG1vcmUKICAgICAgICAgICAgICAgICAgICBwYWluZnVsLCBtZW4gb2YgdGhlIGp1cnksIHRoYW4gd2hlbiBhIG1hbiBpcyBhZGRyZXNzZWQgYnkgbmFtZSBhcwogICAgICAgICAgICAgICAgICAgIOKAnGJyb3RoZXLigJ0gb2YgY2VydGFpbiBwZXJzb25zLCB3aG9tIGluIGZhY3QgaGUgcmVnYXJkcyBhcwogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMsIGFuZCB3aGVuIGhlIGlzIGNvbXBlbGxlZCwgb24gYWNjb3VudCBvZiB0aGUgbWFueSBjcnVlbCB3cm9uZ3Mgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBoYXMgc3VmZmVyZWQgYXQgdGhlaXIgaGFuZHMsIHRvIGNvbWUgaW50byBjb3VydDsgYXMgaXMgbXkgY2FzZSBub3cuIDwvdHJhbnNsYXRpb24+"
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgSSBoYXZlIG5vdCBvbmx5IGhhZCB0aGUgbWlzZm9ydHVuZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBiZWdpbm5pbmcgdGhhdCBQbGFuZ29uLCB0aGUgbW90aGVyIG9mIHRoZXNlIG1lbiwgYnkgZGVjZWl0IGFuZCBtYW5pZmVzdAogICAgICAgICAgICAgICAgICAgIHBlcmp1cnksIGNvbXBlbGxlZCBteSBmYXRoZXIgdG8gYnJpbmcgaGltc2VsZiB0byBhY2tub3dsZWRnZSB0aGVtLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbnRseSBJIHdhcyByb2JiZWQgb2YgdHdvLXRoaXJkcyBvZiBteSBpbmhlcml0YW5jZTsgYnV0LCBpbiBhZGRpdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHRoaXMsIEkgaGF2ZSBiZWVuIGRyaXZlbiBieSB0aGVzZSBtZW4gb3V0IG9mIHRoZSBob3VzZSBvZiBteSBmYXRoZXJzLCBpbiB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgd2FzIGJvcm4gYW5kIGJyb3VnaHQgdXAsIGFuZCBpbnRvIHdoaWNoIHRoZXkgd2VyZSBhZG1pdHRlZCwgbm90IGJ5IG15IGZhdGhlciwKICAgICAgICAgICAgICAgICAgICBidXQgYnkgbXlzZWxmIGFmdGVyIGhpcyBkZWF0aDsgPC90cmFuc2xhdGlvbj4="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBJIGFtIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgcm9iYmVkIG9mIG15IG1vdGhlcidzIGRvd3J5LCBmb3Igd2hpY2ggSSBhbSBub3cgYnJpbmdpbmcgc3VpdCwgYWx0aG91Z2ggSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmIGdpdmVuIHRoZW0gc2F0aXNmYWN0aW9uIGluIGFsbCB0aGUgbWF0dGVycyBpbiB3aGljaCB0aGV5IG1hZGUgY2xhaW1zIHVwb24KICAgICAgICAgICAgICAgICAgICBtZSwgZXhjZXB0IHNvbWUgdHJpZmxpbmcgY3Jvc3MtZGVtYW5kcyB3aGljaCB0aGV5IGhhdmUgbWFsaWNpb3VzbHkgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUgb24gYWNjb3VudCBvZiB0aGlzIGFjdGlvbiwgYXMgd2lsbCBiZSBwZXJmZWN0bHkgY2xlYXIgdG8geW91IGFsc287CiAgICAgICAgICAgICAgICAgICAgeWV0IGluIHRoZSBjb3Vyc2Ugb2YgZWxldmVuIHllYXJzIEkgaGF2ZSBiZWVuIHVuYWJsZSB0byBvYnRhaW4gZnJvbSB0aGVtIGEKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmxlIHNldHRsZW1lbnQsIGFuZCBzbyBhdCBsZW5ndGggSSBoYXZlIGhhZCByZWNvdXJzZSB0byB5b3UgZm9yIGhlbHAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIHlvdSBhbGwsIG1lbiBvZiB0aGUganVyeSwgdG8gbGlzdGVuCiAgICAgICAgICAgICAgICAgICAgdG8gbWUgd2l0aCBnb29kd2lsbCwgd2hpbGUgSSBzcGVhayBhcyBiZXN0IEkgY2FuOyBhbmQgaWYgSSBzZWVtIHRvIHlvdSB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgY3J1ZWwgd3JvbmdzLCB0byBwYXJkb24gbWUgZm9yIHNlZWtpbmcgdG8gcmVjb3ZlciB3aGF0IGlzIG15IG93biwKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGFzIGl0IGlzIGZvciBhIG1hcnJpYWdlLXBvcnRpb24gZm9yIG15IGRhdWdodGVyLiBGb3IgaXQgc28gaGFwcGVuZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgbWFycmllZCBhdCBteSBmYXRoZXIncyByZXF1ZXN0IHdoZW4gSSB3YXMgb25seSBlaWdodGVlbiwgYW5kIHRoYXQgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYSBkYXVnaHRlciB3aG8gaXMgYWxyZWFkeSBvZiBtYXJyaWFnZWFibGUgYWdlLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzLCB0aGVyZWZvcmUsIGp1c3Qgb24gbWFueSBhY2NvdW50cyB0aGF0IHlvdSBzaG91bGQgYWlkIG1lIHdobyBhbSBiZWluZwogICAgICAgICAgICAgICAgICAgIHdyb25nZWQsIGFuZCBmaXR0aW5nIHRoYXQgeW91IHNob3VsZCBmZWVsIGluZGlnbmF0aW9uIGFnYWluc3QgdGhlIG1lbiwKICAgICAgICAgICAgICAgICAgICB3aG/igJRPIEVhcnRoIGFuZCB0aGUgR29kc+KAlHdoZW4gdGhleSBuZWVkIG5vdCBoYXZlIGNvbWUgaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0IGF0IGFsbCBoYWQgdGhleSBkb25lIHdoYXQgaXMgZmFpciwgYXJlIG5vdCBhc2hhbWVkIHRvIHJlbWluZCB5b3Ugb2YgYW55CiAgICAgICAgICAgICAgICAgICAgaW1wcm9wZXIgYWN0cyBvZiBteSBmYXRoZXIsIG9yIG9mIHdyb25ncyB3aGljaCB0aGV5IGNvbW1pdHRlZCBhZ2FpbnN0IGhpbSwgYnV0CiAgICAgICAgICAgICAgICAgICAgZXZlbiBmb3JjZSBtZSB0byBnbyB0byBsYXcgd2l0aCB0aGVtLiBUbyBtYWtlIHlvdSB1bmRlcnN0YW5kIGNsZWFybHkgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZXksIG5vdCBJLCB3aG8gYXJlIHRvIGJsYW1lIGZvciB0aGlzLCBJIHdpbGwgc2V0IGZvcnRoIHRvIHlvdSB0aGUgZmFjdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FzZSBmcm9tIHRoZSBiZWdpbm5pbmcgd2l0aCB0aGUgdXRtb3N0IHBvc3NpYmxlIGJyZXZpdHkuIDwvdHJhbnNsYXRpb24+"
translation['40.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NeSBtb3RoZXIsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGRhdWdodGVyIG9mIFBvbHlhcmF0dXMsIG9mIENob2xhcmd1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaG9sYXJndXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWNhbWFudGlzLjwvbm90ZT4sIGFuZCBzaXN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBNZW5leGVudXMsIGFuZCBCYXRoeWxsdXMgYW5kIFBlcmlhbmRlci4gSGVyIGZhdGhlciBnYXZlIGhlciBpbiBtYXJyaWFnZSB0bwogICAgICAgICAgICAgICAgICAgIENsZW9tZWRvbiwgc29uIG9mIENsZW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZmFtb3VzIGRlbWFnb2d1ZSwKICAgICAgICAgICAgICAgICAgICAgICAga25vd24gdG8gdXMgZnJvbSBUaHVjeWRpZGVzIGFuZCBBcmlzdG9waGFuZXMuPC9ub3RlPiBhZGRpbmcgYSB0YWxlbnQgYXMgaGVyCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UtcG9ydGlvbjsgYW5kIGF0IHRoZSBmaXJzdCBzaGUgZHdlbHQgd2l0aCBoaW0gYXMgaGlzIHdpZmUsIGFuZCBib3JlIGhpbQogICAgICAgICAgICAgICAgICAgIHRocmVlIGRhdWdodGVycyBhbmQgb25lIHNvbiwgQ2xlb24uIEFmdGVyIHRoaXMgaGVyIGh1c2JhbmQgZGllZCwgYW5kIHNoZSBsZWZ0CiAgICAgICAgICAgICAgICAgICAgaGlzIGZhbWlseSwgcmVjZWl2aW5nIGJhY2sgaGVyIG1hcnJpYWdlLXBvcnRpb24uIDwvdHJhbnNsYXRpb24+"
translation['40.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlciBicm90aGVycywgTWVuZXhlbnVzIGFuZC5CYXRoeWxsdXMg77yIZm9yIFBlcmlhbmRlciB3YXMgc3RpbGwgYQogICAgICAgICAgICAgICAgICAgIGJvee+8iSB0aGVuIGdhdmUgaGVyIGFnYWluIGluIG1hcnJpYWdlIHdpdGggdGhlIHRhbGVudCBmb3IgaGVyIGRvd3J5LCBhbmQKICAgICAgICAgICAgICAgICAgICBzaGUgZHdlbHQgd2l0aCBteSBmYXRoZXIgYXMgaGlzIHdpZmUuIFRoZXJlIHdlcmUgYm9ybiB0byB0aGVtIG15c2VsZiBhbmQgYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIHlvdW5nZXIgdGhhbiBJLCB3aG8gZGllZCB3aGlsZSBzdGlsbCBhIGNoaWxkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoLCBJIHdpbGwgZmlyc3QgYnJpbmcKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIHdpdG5lc3NlcyB0byBlc3RhYmxpc2ggdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NeSBmYXRoZXIsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHRodXMgbWFycmllZCBteSBtb3RoZXIsIG1haW50YWluZWQgaGVyIGFzIGhpcyB3aWZlIGluIGhpcyBvd24gaG91c2U7IGFuZAogICAgICAgICAgICAgICAgICAgIGhlIGJyb3VnaHQgbWUgdXAgYW5kIHNob3dlZCBtZSBhIGZhdGhlcidzIGFmZmVjdGlvbiBzdWNoIGFzIHlvdSBhbHNvIGFsbCBzaG93IHRvCiAgICAgICAgICAgICAgICAgICAgeW91ciBjaGlsZHJlbi4gQnV0IHdpdGggUGxhbmdvbiwgdGhlIG1vdGhlciBvZiB0aGVzZSBtZW4sIGhlIGZvcm1lZCBhIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICBvZiBzb21lIHNvcnQgb3Igb3RoZXIg77yIaXQgaXMgbm90IGZvciBtZSB0byBzYXkgd2hhdCBpdCB3YXPvvIk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmhvd2V2ZXIsIGhlIHdhcyBub3Qgc28gd2hvbGx5IHRoZSBzbGF2ZSBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBwYXNzaW9uIGFzIHRvIGRlZW0gaXQgcmlnaHQgZXZlbiBhZnRlciBteSBtb3RoZXIncyBkZWF0aCB0byByZWNlaXZlIHRoZQogICAgICAgICAgICAgICAgICAgIHdvbWFuIGludG8gaGlzIG93biBob3VzZSwgb3IgdG8gYWRtaXQgdGhhdCB0aGUgZGVmZW5kYW50cyB3ZXJlIGhpcyBjaGlsZHJlbi4gTm8sCiAgICAgICAgICAgICAgICAgICAgZm9yIGFsbCB0aGUgcmVzdCBvZiB0aGUgdGltZSB0aGV5IGxpdmVkIGFzIG5vdCBiZWluZyBzb25zIG9mIG15IGZhdGhlciwgYXMgbW9zdAogICAgICAgICAgICAgICAgICAgIG9mIHlvdSBrbm93OyBidXQgYWZ0ZXIgQm9lb3R1cyBoYWQgZ3Jvd24gdXAgYW5kIGhhZCBhc3NvY2lhdGVkIHdpdGggaGltc2VsZiBhCiAgICAgICAgICAgICAgICAgICAgZ2FuZyBvZiBibGFja21haWxlcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9uIHRoaXMgd2hvbGUgcGFzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlIHRoZSBwcmVjZWRpbmcgb3JhdGlvbiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzOS4yIiB2YWxpZD0ieWVzIj5EZW0uIDM5LjI8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB3aG9zZSBsZWFkZXJzIHdlcmUgTW5lc2ljbGVzIGFuZCB0aGF0IE1lbmVjbGVzIHdobyBzZWN1cmVkIHRoZSBjb252aWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgTmludXMsIGluIGNvbm5lY3Rpb24gd2l0aCB0aGVzZSBtZW4gaGUgYnJvdWdodCBzdWl0IGFnYWluc3QgbXkgZmF0aGVyLCBjbGFpbWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIGhpcyBzb24uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzkuMiIgdmFsaWQ9InllcyI+RGVtLiAzOS4yPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['40.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IG1lZXRpbmdzIHRvb2sgcGxhY2UKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGVzZSBtYXR0ZXJzLCBhbmQgbXkgZmF0aGVyIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgbmV2ZXIgYmUgY29udmluY2VkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGVzZSBtZW4gd2VyZSBoaXMgY2hpbGRyZW4sIGFuZCBmaW5hbGx5IFBsYW5nb24sIG1lbiBvZiB0aGUganVyeQogICAgICAgICAgICAgICAgICAgIO+8iGZvciB0aGUgd2hvbGUgdHJ1dGggc2hhbGwgYmUgdG9sZCB5b3XvvIksIGhhdmluZyBpbiBjb25qdW5jdGlvbgogICAgICAgICAgICAgICAgICAgIHdpdGggTWVuZWNsZXMgbGFpZCBhIHNuYXJlIGZvciBteSBmYXRoZXIsIGFuZCBkZWNlaXZlZCBoaW0gYnkgYW4gb2F0aCB0aGF0IGFtb25nCiAgICAgICAgICAgICAgICAgICAgYWxsIG1hbmtpbmQgaXMgaGVsZCB0byBiZSB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgYXdmdWwsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcXVvdGF0aW9uIGZyb20gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTUuMzciIHZhbGlkPSJ5ZXMiPkhvbS4gSWwuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNS4zNzwvYmlibD4gZi48L25vdGU+IGFncmVlZCB0aGF0LCBpZiBzaGUgd2VyZSBwYWlkIHRoaXJ0eSBtaW5hZSwgc2hlCiAgICAgICAgICAgICAgICAgICAgd291bGQgZ2V0IGhlciBicm90aGVycyB0byBhZG9wdCB0aGVzZSBtZW4sIGFuZCB0aGF0LCBvbiBoZXIgb3duIHBhcnQsIGlmIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHNob3VsZCBjaGFsbGVuZ2UgaGVyIGJlZm9yZSB0aGUgYXJiaXRyYXRvciB0byBzd2VhciB0aGF0IHRoZSBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgIHdlcmUgaW4gdmVyeSB0cnV0aCBoaXMgc29ucywgc2hlIHdvdWxkIGRlY2xpbmUgdGhlIGNoYWxsZW5nZS4gRm9yIGlmIHRoaXMgd2VyZQogICAgICAgICAgICAgICAgICAgIGRvbmUsIHNoZSBzYWlkLCB0aGUgZGVmZW5kYW50cyB3b3VsZCBub3QgYmUgZGVwcml2ZWQgb2YgdGhlaXIgY2l2aWMgcmlnaHRzLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE1LjM3IiB2YWxpZD0ieWVzIj5Ib20uIElsLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUuMzc8L2JpYmw+IGYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXNlIHdvdWxkIGJlIGVuc3VyZWQgdG8gdGhlbSBieSB0aGUgZmFjdCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBiZWluZyBlbnJvbGxlZCBpbiB0aGUgY2xhbiByZWdpc3RlcjsgYnV0IGlmIHRoZXkgd2VyZSBlbnJvbGxlZCBhcyBzb25zCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBicm90aGVycyBvZiBQbGFuZ29uLCB0aGV5IGNvdWxkIG5vIGxvbmdlciDigJxtYWtlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyb3VibGXigJ0gZm9yIE1hbnRpYXMgYnkgY2xhaW1pbmcgdG8gYmUgc29ucyBvZiBoaXMuPC9ub3RlPiBidXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHdvdWxkIG5vIGxvbmdlciBiZSBhYmxlIHRvIG1ha2UgdHJvdWJsZSBmb3IgbXkgZmF0aGVyLCBzZWVpbmcgdGhhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG1vdGhlciBoYWQgcmVmdXNlZCB0aGUgb2F0aC4gPC90cmFuc2xhdGlvbj4="
translation['40.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXNlIHRlcm1zCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYWNjZXB0ZWTigJRmb3Igd2h5IHNob3VsZCBJIG1ha2UgbXkgc3RvcnkgYSBsb25nCiAgICAgICAgICAgICAgICAgICAgb25lP+KAlGhlIHdlbnQgdG8gbWVldCBoZXIgYmVmb3JlIHRoZSBhcmJpdHJhdG9yLCBhbmQgUGxhbmdvbiwgY29udHJhcnkKICAgICAgICAgICAgICAgICAgICB0byBhbGwgdGhhdCBzaGUgaGFkIGFncmVlZCB0byBkbywgYWNjZXB0ZWQgdGhlIGNoYWxsZW5nZSwgYW5kIHN3b3JlIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBEZWxwaGluaXVtPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB0ZW1wbGUgb2YgQXBvbGxvIERlbHBoaW5pdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpdHVhdGVkIHNvbWV3aGVyZSBuZWFyIHRoZSBhbmNpZW50IGVudHJhbmNlIHRvIHRoZSBBY3JvcG9saXMuPC9ub3RlPiBhbgogICAgICAgICAgICAgICAgICAgIG9hdGggd2hpY2ggd2FzIHRoZSB2ZXJ5IG9wcG9zaXRlIG9mIGhlciBmb3JtZXIgb25lLCBhcyBtb3N0IG9mIHlvdSBrbm93IHdlbGw7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSB0cmFuc2FjdGlvbiBiZWNhbWUgYSBub3RvcmlvdXMgb25lLiBUaHVzLCBteSBmYXRoZXIgd2FzIGNvbXBlbGxlZCBvbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgaGlzIG93biBjaGFsbGVuZ2UgdG8gYWJpZGUgYnkgdGhlIGFyYml0cmF0b3IncyBhd2FyZCwgYnV0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGluZGlnbmFudCBhdCB3aGF0IGhhZCBiZWVuIGRvbmUsIGFuZCB0b29rIHRoZSBtYXR0ZXIgaGVhdmlseSB0byBoZWFydCwgYW5kIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBldmVuIHNvIGNvbnNlbnQgdG8gYWRtaXQgdGhlc2UgbWVuIGludG8gaGlzIGhvdXNlOyBidXQgaGUgd2FzIGNvbXBlbGxlZCB0bwogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZSB0aGVtIHRvIHRoZSBjbGFuc21lbi4gVGhlIGRlZmVuZGFudCBoZSBlbnJvbGxlZCBhcyBCb2VvdHVzLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgYXMgUGFtcGhpbHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgbWUsIGhlIGZvcnRod2l0aAogICAgICAgICAgICAgICAgICAgIHBlcnN1YWRlZCBtZSwgZm9yIEkgd2FzIGFib3V0IGVpZ2h0ZWVuIHllYXJzIG9mIGFnZSwgdG8gbWFycnkgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgRXVwaGVtdXMsIHdpc2hpbmcgdG8gbGl2ZSB0byBzZWUgY2hpbGRyZW4gYm9ybiB0byBtZS4gSSwgbWVuIG9mIHRoZSBqdXJ5LCBhcwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSwgc28gZXNwZWNpYWxseSB0aGVuLCB3aGVuIHRoZXNlIG1lbiB3ZXJlIGJlZ2lubmluZyB0byBhbm5veSBoaW0gd2l0aAogICAgICAgICAgICAgICAgICAgIGxhd3N1aXRzIGFuZCB3ZXJlIHByb3ZpbmcgdHJvdWJsZXNvbWUsIHRob3VnaHQgdGhhdCBJLCBvbiB0aGUgY29udHJhcnksIG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgc3RyaXZlIHRvIGdsYWRkZW4gaGltIGJ5IGRvaW5nIGV2ZXJ5dGhpbmcgd2hlcmVieSBJIGNvdWxkIGdpdmUgaGltIHBsZWFzdXJlLCBhbmQKICAgICAgICAgICAgICAgICAgICBzbyBvYmV5ZWQgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgaGFkIG1hcnJpZWQgaW4gdGhpcyB3YXksCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIGhhZCBsaXZlZCB0byBzZWUgbXkgbGl0dGxlIGRhdWdodGVyIGJvcm4sIG5vdCBtYW55IHllYXJzIGxhdGVyIGhlIGZlbGwKICAgICAgICAgICAgICAgICAgICBzaWNrIGFuZCBkaWVkLiBUaGVuLCBhbHRob3VnaCBkdXJpbmcgbXkgZmF0aGVyJ3MgbGlmZXRpbWUsIG1lbiBvZiB0aGUganVyeSwgSQogICAgICAgICAgICAgICAgICAgIGhhZCB0aG91Z2h0IGl0IG15IGR1dHkgdG8gb3Bwb3NlIGhpbSBpbiBub3RoaW5nLCB5ZXQgYWZ0ZXIgaGlzIGRlYXRoIEkgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gaW50byB0aGUgaG91c2UsIGFuZCBnYXZlIHRoZW0gYSBzaGFyZSBvZiBhbGwgdGhlIHByb3BlcnR5LCBub3QgYXMKICAgICAgICAgICAgICAgICAgICBiZWluZyByZWFsbHkgbXkgYnJvdGhlcnMg77yIZm9yIG1vc3Qgb2YgeW91IGFyZSB3ZWxsIGF3YXJlIG9mIHRoZSBtYW5uZXIKICAgICAgICAgICAgICAgICAgICBpbiB3aGljaCB0aGV5IGJlY2FtZSBzdWNo77yJLCBidXQgdGhpbmtpbmcgdGhhdCwgYXMgbXkgZmF0aGVyIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYmVndWlsZWQsIGl0IHdhcyBteSBkdXR5IHRvIG9iZXkgeW91ciBsYXdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGV5IGhhZCB0aHVzIGJlZW4gcmVjZWl2ZWQgYnkgbWUgaW50byB0aGUgaG91c2UsIHdlIHByb2NlZWRlZCB0bwogICAgICAgICAgICAgICAgICAgIGRpdmlkZSB0aGUgaW5oZXJpdGFuY2U7IGFuZCB1cG9uIG15IGRlbWFuZGluZyB0aGF0IG15IG1vdGhlcidzIG1hcnJpYWdlLXBvcnRpb24KICAgICAgICAgICAgICAgICAgICBiZSByZXBhaWQgdG8gbWUsIHRoZXNlIG1lbiBwdXQgaW4gYSBjb3VudGVyLWNsYWltLCBhbmQgYWxsZWdlZCB0aGF0IGEgcG9ydGlvbiBvZgogICAgICAgICAgICAgICAgICAgIGxpa2UgYW1vdW50IHdhcyBvd2luZyB0byB0aGVpciBtb3RoZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJlbG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjIwIiB2YWxpZD0ieWVzIj5EZW0uIDQwLjIwPC9iaWJsPiwgZW5k77yJIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgaXMgc2V0IGF0IG1vcmUgdGhhbiAxMDAgbWluYWUsIG5vdCBhIHRhbGVudCBtZXJlbHkuPC9ub3RlPiBPbiB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZpY2Ugb2YgZnJpZW5kcyB3aG8gd2VyZSBwcmVzZW50IHdlIGRpdmlkZWQgYWxsIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eSBidXQKICAgICAgICAgICAgICAgICAgICBrZXB0IGFwYXJ0IHRoZSBob3VzZSBhbmQgdGhlIGRvbWVzdGljIHNlcnZhbnRzIG9mIG15IGZhdGhlciwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC4yMCIgdmFsaWQ9InllcyI+RGVtLiA0MC4yMDwvYmlibD4sIGVuZO+8iSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50IGlzIHNldCBhdCBtb3JlIHRoYW4gMTAwIG1pbmFlLCBub3QgYSB0YWxlbnQgbWVyZWx5LjwvdHJhbnNsYXRpb24+"
translation['40.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5pbiBvcmRlciB0aGF0IHdoaWNoZXZlciBwYXJ0eSBvZiB1cyBtaWdodCBlc3RhYmxpc2ggaGlzCiAgICAgICAgICAgICAgICAgICAgY2xhaW0gdG8gdGhlIGRvd3J5IHNob3VsZCByZWNvdmVyIGl0IGZyb20gdGhlIHZhbHVlIG9mIHRoZSBob3VzZTsgYW5kIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzLCB3aG8gd2VyZSBjb21tb24gcHJvcGVydHksIHRoZSBkZWZlbmRhbnRzLCBzaG91bGQgdGhleSB3aXNoIHRvIHNlYXJjaAogICAgICAgICAgICAgICAgICAgICAgICBvdXQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByZWNpc2UgbWVhbmluZyBvZiB0aGlzIHBocmFzZSBpcwogICAgICAgICAgICAgICAgICAgICAgICBvcGVuIHRvIHF1ZXN0aW9uLiBJdCBtYXkgaW1wbHkgYSBjbGFpbSB0aGF0IHNvbWUgcHJvcGVydHkgaGFkIGJlZW4gb21pdHRlZAogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBpbnZlbnRvcnkgb3IgaW4gc29tZSB3YXkgY29uY2VhbGVkLjwvbm90ZT4gYW55IG9mIG15IGZhdGhlcidzCiAgICAgICAgICAgICAgICAgICAgZWZmZWN0cywgbWlnaHQgbWFrZSBpbnF1aXJ5IGJ5IHRvcnR1cmluZyB0aGVtLCBvciBieSBwcm9zZWN1dGluZyB0aGVpciBzZWFyY2ggaW4KICAgICAgICAgICAgICAgICAgICBhbnkgb3RoZXIgd2F5IHRoZXkgbWlnaHQgcGxlYXNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcyBhbHNvIHlvdSB3aWxsIGtub3cgZnJvbSB0aGVzZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBicm91Z2h0IGFjdGlvbiBhZ2FpbnN0IG1lIHRvIGVzdGFibGlzaCB0aGVpciBjbGFpbXMsIGFuZCBJIHN1ZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgbWFycmlhZ2UtcG9ydGlvbi4gQXQgdGhlIGZpcnN0IHdlIGhhZCBTb2xvbiwgb2YgRXJjaGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FcmNoaWEgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWVhbnRpcy48L25vdGU+IHJlZ2lzdGVyZWQgYXMKICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9yLCBhbmQgc3VibWl0dGVkIHRvIGhpbSBmb3IgZGVjaXNpb24gdGhlIGNsYWltcyB3ZSBhZHZhbmNlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgZWFjaCBvdGhlci4gVGhlc2UgbWVuLCBob3dldmVyLCBkaWQgbm90IGFwcGVhciwgYnV0IGF2b2lkZWQgdGhlIGhlYXJpbmc7IGFuZAogICAgICAgICAgICAgICAgICAgIHRodXMgY29uc2lkZXJhYmxlIHRpbWUgd2FzIHdhc3RlZCwgYW5kIGl0IGNhbWUgYWJvdXQgdGhhdCBTb2xvbiBkaWVkLiBUaGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICB0aGVuIGluc3RpdHV0ZWQgdGhlaXIgc3VpdCBhZ2FpbnN0IG1lIGFmcmVzaCwgYW5kIEkgbXkgc3VpdCBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCwgc3VtbW9uaW5nIGhpbSB1bmRlciB0aGUgbmFtZSBvZiBCb2VvdHVzLCBhbmQgaW5zY3JpYmluZyB0aGF0IG5hbWUgb24KICAgICAgICAgICAgICAgICAgICB0aGUgY29tcGxhaW50OyBmb3IgdGhhdCB3YXMgdGhlIG5hbWUgbXkgZmF0aGVyIGdhdmUgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc3VpdCB3aGljaCB0aGVzZSBtZW4gYnJvdWdodCBhZ2FpbnN0IG1lLCBCb2VvdHVzCiAgICAgICAgICAgICAgICAgICAgYXBwZWFyZWQgYW5kIGZvdWdodCB0aGUgY2FzZSwgYnV0LCBzaW5jZSBoZSB3YXMgdW5hYmxlIHRvIGVzdGFibGlzaCBhbnkgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjbGFpbXMsIHRoZSBhcmJpdHJhdG9yIGRlY2lkZWQgaW4gbXkgZmF2b3I7IGFuZCBCb2VvdHVzLCBjb25zY2lvdXMgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgY2hhcmdlcyB3aXRob3V0IGFueSBqdXN0IGJhc2lzLCBkaWQgbm90IGFwcGVhbCB0byBhIGp1cnksIGFuZCBoYXMgbm90IG5vdwogICAgICAgICAgICAgICAgICAgIGVudGVyZWQgYW55IHN1aXQgYWdhaW5zdCBtZSBpbiByZWdhcmQgdG8gdGhlc2UgbWF0dGVycywgYnV0IGluIHJlZ2FyZCB0byBzb21lCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCB0aGlua2luZyB0byBicmVhayBkb3duIHRoaXMgc3VpdCBvZiBtaW5lIGJ5IHRoZXNlIGNvdW50ZXItY2hhcmdlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qm9lb3R1cyBldmlkZW50bHkgaG9wZWQgdGhhdCBtYWtpbmcgY2xhaW1zIG9uIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBvd24gYmVoYWxmIGhlIGNvdWxkIG9mZnNldCB0aGUgY2xhaW0gb2YgTWFudGl0aGV1cyBmb3IgdGhlIGRvd3J5IG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBtb3RoZXIuPC9ub3RlPiBJbiB0aGUgc3VpdCB3aGljaCBhdCB0aGF0IHRpbWUgSSB3YXMgY2Fycnlpbmcgb24gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIEJvZW90dXMgaW4gcmVnYXJkIHRvIHRoZSBtYXJyaWFnZS1wb3J0aW9uLCBzaW5jZSBoZSB3YXMgaGVyZSBpbiBBdGhlbnMgYW5kIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBhcHBlYXIgYmVmb3JlIHRoZSBhcmJpdHJhdG9yLCB0aGUgbGF0dGVyIGdhdmUganVkZ2VtZW50IGFnYWluc3QgaGltIGJ5CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdC4gPC90cmFuc2xhdGlvbj4="
translation['40.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgQm9lb3R1cywgbWVuIG9mIHRoZSBqdXJ5LCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgaGVyZSBhdCB0aGUgdGltZSB3b3VsZCBub3QgY29udGVzdCB0aGUgc3VpdCwgYnV0IGRlY2xhcmVkIHRoYXQgSSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdGhlIGFyYml0cmF0b3IncyB2ZXJkaWN0IGFnYWluc3QgaGltLCBmb3IgaGlzIG5hbWUgd2FzIG5vdCBCb2VvdHVzLCBidXQKICAgICAgICAgICAgICAgICAgICBNYW50aXRoZXVzOyBhbmQgdGh1cywgYnkgcXVpYmJsaW5nIGFib3V0IGEgbmFtZSwgaGUgaXMgaW4gZmFjdCBkZXByaXZpbmcgbWUgb2YKICAgICAgICAgICAgICAgICAgICBteSBtb3RoZXIncyBwb3J0aW9uLiBBcyBJIHdhcyBhdCBhIGxvc3MgdG8ga25vdyBob3cgb25lIHNob3VsZCBkZWFsIHdpdGggYQogICAgICAgICAgICAgICAgICAgIG1hdHRlciBsaWtlIHRoaXMsIEkgaW5zdGl0dXRlZCB0aGUgc2FtZSBzdWl0IGFmcmVzaCBhZ2FpbnN0IGhpbSBhcyBNYW50aXRoZXVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBub3cgaW4gdGhlIGVsZXZlbnRoIHllYXIgSSBoYXZlIGNvbWUgdG8geW91IGZvciBoZWxwLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMgYWxzbywgdGhlIGNsZXJrCiAgICAgICAgICAgICAgICAgICAgd2lsbCByZWFkIHRoZSBkZXBvc2l0aW9ucyBkZWFsaW5nIHdpdGggdGhlc2UgbWF0dGVycy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBteSBtb3RoZXIsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBtZW4gb2YgdGhlIGp1cnksIGJyaW5naW5nIGEgdGFsZW50IGFzIGhlciBkb3dyeSwgYW5kIGdpdmVuIGluCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgYnkgaGVyIGJyb3RoZXJzLCBhcyB0aGUgbGF3cyBjb21tYW5kLCBsaXZlZCB3aXRoIG15IGZhdGhlciBhcyBoaXMgd2lmZTsKICAgICAgICAgICAgICAgICAgICB0aGUgbWFubmVyLCB0b28sIGluIHdoaWNoIEkgcmVjZWl2ZWQgdGhlc2UgbWVuIGludG8gdGhlIGhvdXNlIGFmdGVyIG15IGZhdGhlcidzCiAgICAgICAgICAgICAgICAgICAgZGVhdGg7IGFuZCB0aGUgZmFjdCB0aGF0IEkgb2J0YWluZWQgYSB2ZXJkaWN0IGluIHRoZSBzdWl0cyB3aGljaCB0aGV5IGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lO+KAlGFsbCB0aGlzIGhhcyBiZWVuIGVzdGFibGlzaGVkIGZvciB5b3UgYnkgcHJvb2ZzIGFuZCBieQogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNvbWUgbm93LCB0YWtlIGFsc28gdGhpcyBsYXcKICAgICAgICAgICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBtYXJyaWFnZS1wb3J0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBiZWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBsYXcsIEkgZmFuY3kgdGhhdCB0aGlzIG1hbuKAlGNhbGwgaGltIEJvZW90dXMgb3IgTWFudGl0aGV1cywgb3IgYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbmFtZSBieSB3aGljaCBoZSBsaWtlcyB0byBiZSBhZGRyZXNzZWTigJR3aWxsIGhhdmUgbm8gdmFsaWQgb3IKICAgICAgICAgICAgICAgICAgICBnZW51aW5lIGRlZmVuY2UgdG8gb2ZmZXIsIGJ1dCwgcmVseWluZyB1cG9uIGhpcyBvd24gYXVkYWNpb3VzbmVzcyBhbmQKICAgICAgICAgICAgICAgICAgICBlZmZyb250ZXJ5LCB3aWxsIGVuZGVhdm9yIHRvIGF0dGFjaCB0byBtZSB0aGUgbWlzZm9ydHVuZXMgb2YgaGlzIG93biBmYW1pbHksIGFzCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgd29udCB0byBkbyBhbHNvIGluIHByaXZhdGUgbGlmZTsgYW5kIHdpbGwgYWxsZWdlIHRoYXQgd2hlbiB0aGUgcHJvcGVydHkgb2YKICAgICAgICAgICAgICAgICAgICBQYW1waGlsdXMsIHdobyB3YXMgdGhlIGZhdGhlciBvZiBQbGFuZ29uLCB3YXMgY29uZmlzY2F0ZWQsIG15IGZhdGhlciB0b29rIGZyb20KICAgICAgICAgICAgICAgICAgICBvdXQgdGhlIGNvdW5jaWwtY2hhbWJlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgQm91bGV1dGVyaW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWVldGluZy1wbGFjZSBvZiB0aGUgQ291bmNpbCBvZiA1MDAsIGhhcyBiZWVuIGlkZW50aWZpZWQgd2l0aCBhIGJ1aWxkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kIG9uIHRoZSBlYXN0IHNsb3BlIG9mIHRoZSDigJxUaGVzZXVt4oCdIGhpbGwsCiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsb29raW5nIHRoZSBBZ29yYS4gU2VlIFZhbmRlcnBvb2wsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlc3BlcmlhPC90aXRsZT4sIDQuIHBwLiA0NzAKICAgICAgICAgICAgICAgICAgICAgICAgZmYuPC9ub3RlPiB0aGUgc3VycGx1cyBwcm9jZWVkczx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlc3BlcmlhPC90aXRsZT4sIDQuIHBwLiA0NzAKICAgICAgICAgICAgICAgICAgICAgICAgZmYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBhbW91bnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaXMsIG92ZXIgYW5kIGFib3ZlIHRoZSBkZWJ0IHRvIHRoZSB0cmVhc3VyeS48L25vdGU+IGFuZCBoZSB3aWxsIHRodXMKICAgICAgICAgICAgICAgICAgICB0cnkgdG8gc2hvdyB0aGF0IGhpcyBvd24gbW90aGVyIGJyb3VnaHQgYSBkb3dyeSBvZiBtb3JlIHRoYW4gb25lIGh1bmRyZWQgbWluYWUsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgbXkgbW90aGVyIO+8iGhlIHdpbGwgY2xhaW3vvIkgYnJvdWdodCBteSBmYXRoZXIgbm8gcG9ydGlvbgogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB0aGluZ3MgaGUgd2lsbCBzdGF0ZSBhdCBsZW5ndGgKICAgICAgICAgICAgICAgICAgICB0byB5b3UsIG1lbiBvZiB0aGUganVyeSwgYWx0aG91Z2ggaGUgaGFzIG5vdCBwdXQgYSBzaW5nbGUgZGVwb3NpdGlvbiBpbiB0aGUgYm94CiAgICAgICAgICAgICAgICAgICAgdG8gc3Vic3RhbnRpYXRlIHRoZW0sIGFuZCBrbm93cyB2ZXJ5IHdlbGwgdGhhdCB0aGVyZSBpcyBub3QgYSB3b3JkIG9mIHRydXRoIGluCiAgICAgICAgICAgICAgICAgICAgd2hhdCBoZSBzYXlzOyBmb3IgaGUgaXMgZnVsbHkgY29uc2Npb3VzIHRoYXQgaW4geW91ciBjb3VydCBubyBtYW4gd2hvIGNvbmZlc3NlZAogICAgICAgICAgICAgICAgICAgIGhpcyBndWlsdCB3YXMgZXZlciBhY3F1aXR0ZWQsIHdoZXJlYXMgYnkgbHlpbmcgYW5kIGFkdmFuY2luZyBhcmd1bWVudHMgdG8gbGVhZAogICAgICAgICAgICAgICAgICAgIHlvdSBhc3RyYXkgbWFueSBhIG1hbiBlcmUgbm93IGhhcyBhdm9pZGVkIHBheWluZyB0aGUgcGVuYWx0eSBmb3IgaGlzIGRlZWRzLiBJbgogICAgICAgICAgICAgICAgICAgIG9yZGVyLCB0aGVuLCB0aGF0IHlvdSBtYXkgbm90IGJlIGRlY2VpdmVkIGJ5IGhpbSwgSSB0aGluayBpdCBpcyBiZXR0ZXIgdG8gc3BlYWsKICAgICAgICAgICAgICAgICAgICB0byB5b3UgYnJpZWZseSBhYm91dCB0aGlzIG1hdHRlciBhbHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYKICAgICAgICAgICAgICAgICAgICBoZSBzaGFsbCBzYXkgdGhhdCBteSBtb3RoZXIgZGlkIG5vdCBicmluZyB3aXRoIGhlciBhIG1hcnJpYWdlLXBvcnRpb24sIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbW90aGVyIGRpZCwgYmVhciBpbiBtaW5kIHRoYXQgaGUgaXMgbWFuaWZlc3RseSBseWluZy4gVG8gYmVnaW4gd2l0aCwKICAgICAgICAgICAgICAgICAgICBQYW1waGlsdXMsIHRoZSBmYXRoZXIgb2YgdGhpcyBtYW4ncyBtb3RoZXIsIGRpZWQgb3dpbmcgZml2ZSB0YWxlbnRzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyB0cmVhc3VyeSwgYW5kIHNvIGZhciBmcm9tIHRoZXJlIGJlaW5nIGFueSBzdXJwbHVzIHByb2NlZWRzIGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBhZnRlciBoaXMgcHJvcGVydHkgaGFkIGJlZW4gc2NoZWR1bGVkIGFuZCBjb25maXNjYXRlZCwgZXZlbiBoaXMKICAgICAgICAgICAgICAgICAgICBpbmRlYnRlZG5lc3MgaGFzIG5vdCBiZWVuIHBhaWQgaW4gZnVsbCwgYnV0IHRvIHRoaXMgZGF5IFBhbXBoaWx1cyBzdGFuZHMKICAgICAgICAgICAgICAgICAgICBpbnNjcmliZWQgYXMgYSBkZWJ0b3IgdG8gdGhlIHRyZWFzdXJ5LiBIb3csIHRoZW4sIGNhbiBpdCBiZSB0aGF0IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIG1vbmV5IGZyb20gdGhlIGVzdGF0ZSBvZiBQYW1waGlsdXMsIHdoaWNoIHByb3ZlZCBpbmFkZXF1YXRlIHRvIHBheSBpbgogICAgICAgICAgICAgICAgICAgIGZ1bGwgZXZlbiB0aGUgZGVidCBkdWUgdG8gdGhlIGNpdHk/IDwvdHJhbnNsYXRpb24+"
translation['40.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgbWVuIG9mIHRoZSBqdXJ5LCBiZWFyIHRoaXMgaW4gbWluZCwgdGhhdCB3ZXJlIGl0IG5ldmVyIHNvIHRydWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgc3VycGx1cyBtb25leSBkaWQgYWNjcnVlIGFzIHRoZXNlIG1lbiBwcmV0ZW5kLCBpdCB3YXMgbm90IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdobyB3b3VsZCBoYXZlIHJlY2VpdmVkIGl0LCBidXQgdGhlIHNvbnMgb2YgUGFtcGhpbHVzLCBCb2VvdHVzIGFuZCBIZWR5bHVzIGFuZAogICAgICAgICAgICAgICAgICAgIEV1dGh5ZGVtdXM7IGFuZCwgSSBmYW5jeSwgdGhleSBhcmUgbm90IG1lbiB3aG8gd291bGQgZ28gdG8gYWxsIGxlbmd0aHMgdG8gZ2V0CiAgICAgICAgICAgICAgICAgICAgaG9sZCBvZiB0aGUgcHJvcGVydHkgb2Ygb3RoZXJzLCBhcyB5b3UgYWxsIGtub3csIGFuZCB5ZXQgYXQgdGhlIHNhbWUgdGltZQogICAgICAgICAgICAgICAgICAgIHF1aWV0bHkgaGF2ZSBhbGxvd2VkIG15IGZhdGhlciB0byB0YWtlIHBvc3Nlc3Npb24gb2Ygd2hhdCB3YXMgdGhlaXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUgbW90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGRpZCBub3QgYnJpbmcgd2l0aCBoZXIgYSBtYXJyaWFnZS1wb3J0aW9uLCBidXQgdGhhdCB0aGV5IGFyZSBseWluZyBpbgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0byB0aGlzLCBJIHRoaW5rIGhhcyBiZWVuIHByb3ZlZCB0byB5b3UgcXVpdGUgYWRlcXVhdGVseTsgYnV0IHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgZGlkIGJyaW5nIG9uZSwgSSBzaGFsbCBlYXNpbHkgc2hvdy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBzaGUgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIFBvbHlhcmF0dXMsIHdobyB3YXMgYm90aCBob25vcmVkIGJ5IHlvdSBjaXRpemVucywgYW5kIGhhZCBhY3F1aXJlZCBhCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgZXN0YXRlLiBTZWNvbmRseSwgaXQgaGFzIGJlZW4gcHJvdmVkIHRvIHlvdSBieSB3aXRuZXNzZXMgdGhhdCBoZXIgc2lzdGVyCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhIGRvd3J5IG9mIHRoZSBsaWtlIGFtb3VudCB3aGVuIHNoZSBtYXJyaWVkIEVyeXhpbWFjaHVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBicm90aGVyLWluLWxhdyBvZiBDaGFicmlhcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZhbW91cyBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLCB3aG9zZSB2aWN0b3JpZXMgb3ZlciB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBoaW0gb25lIG9mIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGFibGUgZmlndXJlcyBpbiBBdGhlbmlhbiBtaWxpdGFyeSBoaXN0b3J5IGR1cmluZyB0aGUgZmlyc3QgaGFsZiBmbyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZm91cnRoIGNlbnR1cnkgQi5DLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIGFsbCB0aGlzLCBteSBtb3RoZXIgaXMgc2hvd24gdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gZmlyc3QgZ2l2ZW4gaW4gbWFycmlhZ2UgdG8gQ2xlb21lZG9uLCB3aG9zZSBmYXRoZXIgQ2xlb24sIHdlIGFyZSB0b2xkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHN0cmlraW5nIGluc3RhbmNlIG9mIHRoZSBHcmVlayBwcmVmZXJlbmNlIGZvcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3Bva2VuIHJhdGhlciB0aGFuIHRoZSB3cml0dGVuIHdvcmQuPC9ub3RlPiBjb21tYW5kZWQgdHJvb3BzIGFtb25nIHdob20KICAgICAgICAgICAgICAgICAgICB3ZXJlIHlvdXIgYW5jZXN0b3JzLCBhbmQgY2FwdHVyZWQgYWxpdmUgYSBsYXJnZSBudW1iZXIgb2YgTGFjZWRhZW1vbmlhbnMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgUHlsb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIGluIDxkYXRlIGF1dGhuYW1lPSItNDI1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDI1Ij40MjU8L2RhdGU+IEIuQy4gVGhlIGFjY291bnQgaXMgZ2l2ZW4gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNC4zIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNC4zPC9iaWJsPiBmZi48L25vdGU+IGFuZCB3b24gZ3JlYXRlciByZW5vd24gdGhhbiBhbnkgb3RoZXIgbWFuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlOyBzbyBpdCB3YXMgbm90IGZpdHRpbmcgdGhhdCB0aGUgc29uIG9mIHRoYXQgZmFtb3VzIG1hbiBzaG91bGQgd2VkIG15CiAgICAgICAgICAgICAgICAgICAgbW90aGVyIHdpdGhvdXQgYSBkb3dyeSwgbm9yIGlzIGl0IGxpa2VseSB0aGF0IE1lbmV4ZW51cyBhbmQgQmF0aHlsbHVzLCB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgZm9ydHVuZXMgdGhlbXNlbHZlcywgYW5kIHdobywgYWZ0ZXIgQ2xlb21lZG9uJ3MgZGVhdGgsIHJlY2VpdmVkIGJhY2sgdGhlCiAgICAgICAgICAgICAgICAgICAgZG93cnksIGRlZnJhdWRlZCB0aGVpciBvd24gc2lzdGVyOyByYXRoZXIsIHRoZXkgd291bGQgdGhlbXNlbHZlcyBoYXZlIGFkZGVkIHRvCiAgICAgICAgICAgICAgICAgICAgaGVyIHBvcnRpb24sIHdoZW4gdGhleSBnYXZlIGhlciBpbiBtYXJyaWFnZSB0byBteSBmYXRoZXIsIGFzIHRoZXkgdGhlbXNlbHZlcyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXJzIGhhdmUgdGVzdGlmaWVkIGJlZm9yZSB5b3UuIDxkYXRlIGF1dGhuYW1lPSItNDI1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDI1Ij40MjU8L2RhdGU+IEIuQy4gVGhlIGFjY291bnQgaXMgZ2l2ZW4gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNC4zIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNC4zPC9iaWJsPiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['40.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzIHRoaXMsIGp1c3QgY29uc2lkZXIgd2h5IGluIHRoZSB3b3JsZCwgaWYgbXkgbW90aGVyIGhhZCBub3QgYmVlbiBhCiAgICAgICAgICAgICAgICAgICAgbGF3ZnVsbHkgZXNwb3VzZWQgd2lmZSwgYW5kIGhhZCBicm91Z2h0IG5vIGRvd3J5LCB3aGlsZSB0aGUgbW90aGVyIG9mIHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIGRpZCwgc2hvdWxkIG15IGZhdGhlciBoYXZlIGRlbmllZCB0aGF0IHRoZXkgd2VyZSBoaXMgc29ucywgYW5kIGhhdmUgYWNrbm93bGVkZ2VkCiAgICAgICAgICAgICAgICAgICAgbWUsIGFuZCBicm91Z2h0IG1lIHVwPyBCZWNhdXNlLCBmb3Jzb290aCwgYXMgdGhlc2UgbWVuIHdpbGwgY2xhaW0sIGhlIGRpc2hvbm9yZWQKICAgICAgICAgICAgICAgICAgICB0aGVtIGluIG9yZGVyIHRvIHNob3cgZmF2b3IgdG8gbWUgYW5kIG15IG1vdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['40.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbXkgbW90aGVyIGRpZWQsIGxlYXZpbmcgbWUgc3RpbGwgYSBsaXR0bGUgYm95LCB3aGVyZWFzCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vdGhlciBvZiB0aGVzZSBtZW4sIFBsYW5nb24sIHdobyB3YXMgYSBoYW5kc29tZSB3b21hbiwgbWFpbnRhaW5lZCBoZXIKICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uIHdpdGggaGltIGJvdGggYmVmb3JlIGFuZCBhZnRlciB0aGF0OyBzbyB0aGF0IGl0IHdhcyBtdWNoIG1vcmUgbGlrZWx5CiAgICAgICAgICAgICAgICAgICAgdGhhdCBmb3IgdGhlIHNha2Ugb2YgdGhlIGxpdmluZyB3b21hbiwgd2l0aCB3aG9tIGhlIHdhcyBpbiBsb3ZlIGFsbCB0aGlzIHRpbWUsCiAgICAgICAgICAgICAgICAgICAgaGUgd291bGQgZGlzaG9ub3IgdGhlIHNvbiBvZiBoZXIgd2hvIHdhcyBkZWFkLCB0aGFuIHRoYXQgZm9yIG15IHNha2UgYW5kIG15IGRlYWQKICAgICAgICAgICAgICAgICAgICBtb3RoZXIncyBoZSB3b3VsZCByZWZ1c2UgdG8gYWNrbm93bGVkZ2UgdGhlIGNoaWxkcmVuIG9mIGhlciB3aG8gd2FzIGxpdmluZyBhbmQKICAgICAgICAgICAgICAgICAgICBtYWludGFpbmluZyBoZXIgY29ubmVjdGlvbiB3aXRoIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['40.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5NeQogICAgICAgICAgICAgICAgICAgIG9wcG9uZW50LCBob3dldmVyLCBoYXMgY29tZSB0byBzdWNoIGEgcGl0Y2ggb2YgYXVkYWNpdHkgYXMgdG8gZGVjbGFyZSB0aGF0IG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG1hZGUgZmVhc3QgZm9yIGhpbSBvbiB0aGUgdGVudGggZGF5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEludHJvZHVjdGlvbiB0byB0aGUgcHJlY2VkaW5nIG9yYXRpb24uPC9ub3RlPiBBbmQgaW4gcmVnYXJkIHRvIHRoaXMgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgcHV0IGluIGRlcG9zaXRpb25zIG9mIFRpbW9jcmF0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGVyaGFwcyB0bwogICAgICAgICAgICAgICAgICAgICAgICBiZSBpZGVudGlmaWVkIHdpdGggdGhlIFRpbW9jcmF0ZXMgYWdhaW5zdCB3aG9tIERlbW9zdGhlbmVzIGRlbGl2ZXJlZCBPcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIDI0IO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjQiIHZhbGlkPSJ5ZXMiPkRlbS4gMjQ8L2JpYmw+77yJLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgUHJvbWFjaHVzIGFsb25lLCB3aG8gYXJlIGluIG5vIHdheSByZWxhdGVkIHRvIG15IGZhdGhlciwgYW5kIHdlcmUgbm90IGZyaWVuZHMgb2YKICAgICAgICAgICAgICAgICAgICBoaXMuIFRoZSB0ZXN0aW1vbnkgdGhleSBoYXZlIGJvcm5lIGlzIHNvIHBhdGVudGx5IGZhbHNlLCB0aGF0LCB3aGVyZWFzIHlvdSBhbGwKICAgICAgICAgICAgICAgICAgICBrbm93IHRoYXQgQm9lb3R1cyBieSBpbnN0aXR1dGluZyBwcm9jZWVkaW5ncyBmb3JjZWQgbXkgZmF0aGVyIGFnYWluc3QgaGlzIHdpbGwKICAgICAgICAgICAgICAgICAgICB0byBhY2tub3dsZWRnZSBoaW0gdGhlc2UgbWVuLCBsaWtlIHdpdG5lc3NlcyB0byBhIHN1bW1vbnPigJRhbmQgb25seSB0d28KICAgICAgICAgICAgICAgICAgICBvZiB0aGVt4oCUZGVwb3NlIHRoYXQgaGUgbWFkZSBhIGZlYXN0IGZvciB0aGlzIGZlbGxvdyBvbiB0aGUgdGVudGggZGF5IQogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI0IiB2YWxpZD0ieWVzIj5EZW0uIDI0PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['40.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JcyB0aGVyZSBhbnlvbmUgb2YgeW91IHdobyBjYW4gYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQ/IEFuZCBhc3N1cmVkbHkgaXQgaXMgbm90IG9wZW4gdG8gaGltIHRvIHNheSB0aGlzLCBlaXRoZXLigJR0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSB3YXMgYSBsaXR0bGUgY2hpbGQgbXkgZmF0aGVyIGFja25vd2xlZGdlZCBoaW0sIGJ1dCB0aGF0IHdoZW4gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgZ3Jvd24gaGUgc2Nvcm5lZCBoaW0gYmVjYXVzZSBvZiBzb21lIHF1YXJyZWwgd2l0aCB0aGUgbW90aGVyIG9mIHRoZXNlIG1lbjs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q29tcGFyZSB0aGUgcGFyYWxsZWwgcGFzc2FnZSBpbiB0aGUgcHJlY2VkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG9yYXRpb24sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzkuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4gMzkuMjM8L2JpYmw+Ljwvbm90ZT4gZm9yIHN1cmVseSBtYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgd2lmZSBhcmUgbXVjaCBtb3JlIGFwdCwgaW4gY2FzZXMgd2hlcmUgdGhleSBhcmUgYXQgdmFyaWFuY2Ugd2l0aCBvbmUgYW5vdGhlciwgdG8KICAgICAgICAgICAgICAgICAgICBiZWNvbWUgcmVjb25jaWxlZCBmb3IgdGhlIHNha2Ugb2YgdGhlaXIgY2hpbGRyZW4gdGhhbiwgYmVjYXVzZSBvZiB0aGVpciBlbm1pdHkKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgZWFjaCBvdGhlciwgdG8gaGF0ZSB0aGVpciBjb21tb24gY2hpbGRyZW4gYXMgd2VsbC4gSWYsIHRoZXJlZm9yZSwgaGUKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0cyB0byBzYXkgdGhpcywgZG8gbm90IHBlcm1pdCBoaW0gdG8gYnJhemVuIGl0IG91dC4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzOS4yMyIgdmFsaWQ9InllcyI+RGVtLiAzOS4yMzwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['40.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2hvdWxkIGhlIGdvIG9uIHRvIHRhbGsgYWJvdXQgdGhlIGFjdGlvbnMgYnJvdWdodCBieQogICAgICAgICAgICAgICAgICAgIHRoZW0sIHdoaWNoIHRoZSBhcmJpdHJhdG9yIGRlY2lkZWQgaW4gbXkgZmF2b3IsIGFuZCBjbGFpbSB0aGF0IGhlIHdhcyBjYXVnaHQgYnkKICAgICAgICAgICAgICAgICAgICBtZSB1bnByZXBhcmVkLCByZW1lbWJlciwgZmlyc3QsIHRoYXQgaXQgd2FzIG5vdCBhIHNob3J0IHRpbWUgdGhhdCBoZSBoYWQgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB0byBwcmVwYXJlIGhpbXNlbGYsIGJ1dCBhIGdyZWF0IG1hbnkgeWVhcnMsIGFuZCBzZWNvbmRseSwgdGhhdCBpdCB3YXMgaGUKICAgICAgICAgICAgICAgICAgICB3aG8gYnJvdWdodCB0aGUgc3VpdCwgc28gdGhhdCBpdCB3YXMgbXVjaCBtb3JlIGxpa2VseSB0aGF0IEkgc2hvdWxkIGJlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgdW5wcmVwYXJlZCBieSBoaW0gdGhhbiBoZSBieSBtZS4gPC90cmFuc2xhdGlvbj4="
translation['40.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwKICAgICAgICAgICAgICAgICAgICBhbGwgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IgaGF2ZSBnaXZlbiB0ZXN0aW1vbnkgdGhhdAogICAgICAgICAgICAgICAgICAgIEJvZW90dXMgd2FzIHByZXNlbnQgd2hlbiB0aGUgYXJiaXRyYXRvciBnYXZlIGhpcyBkZWNpc2lvbiBpbiBteSBmYXZvciBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGRpZCBub3QgYXBwZWFsIHRvIHRoZSBjb3VydCwgYnV0IGFjcXVpZXNjZWQgaW4gdGhlIGRlY2lzaW9uLiBBbmQgeWV0IGl0IHNlZW1zCiAgICAgICAgICAgICAgICAgICAgdG8gbWUgYSBzdHJhbmdlIHRoaW5nIHRoYXQsIHdoZXJlYXMgb3RoZXIgbWVuLCB3aG8gY29uc2lkZXIgdGhhdCB0aGV5IGFyZSBiZWluZwogICAgICAgICAgICAgICAgICAgICAgICB3cm9uZ2VkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBieSB0aGUgYXJiaXRyYXRvcidzCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YXJkLjwvbm90ZT4gYnJpbmcgYmVmb3JlIHlvdSBvbiBhcHBlYWwgY2FzZXMgZXZlbiBvZiB0aGUgc2xpZ2h0ZXN0IGltcG9ydCwKICAgICAgICAgICAgICAgICAgICB0aGlzIGZlbGxvdywgd2hvIGhhZCBicm91Z2h0IHN1aXQgYWdhaW5zdCBtZSB0byByZWNvdmVyIGEgdGFsZW50IGFzIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlLXBvcnRpb24sIGFuZCBoYWQgdGhpcyBzdWl0IGRlY2lkZWQgYWdhaW5zdCBoaW0gYnkgdGhlIGFyYml0cmF0b3IsCiAgICAgICAgICAgICAgICAgICAgdW5qdXN0bHksIGFzIGhlIGNsYWltcywgc2hvdWxkIGFjcXVpZXNjZSBpbiB0aGUgZGVjaXNpb24uIDwvdHJhbnNsYXRpb24+"
translation['40.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5BaCwgYnV0IGl0IG1heSBiZSBzYWlkIHRoYXQgaGUgaXMgYSBtYW4gd2hvIGxvdmVzIHBlYWNlIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdGVzIGxpdGlnYXRpb24uIEkgY291bGQgaW5kZWVkIHdpc2gsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBoZSB3ZXJlIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0eXBlLiBCdXQgaGVyZSBpcyB0aGUgdHJ1dGg6IHlvdSBhcmUgc28gZ2VuZXJvdXMgYW5kIHNvIGtpbmQgdG93YXJkIHlvdXIKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctbWVuIHRoYXQgeW91IGRpZCBub3QgZGVlbSBpdCByaWdodCB0byBiYW5pc2ggZnJvbSB0aGUgY2l0eSBldmVuIHRoZSBzb25zCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIDxkYXRlIGF1dGhuYW1lPSItNDAzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDAzIj40MDM8L2RhdGU+IEIuQy48L25vdGU+OyBidXQgQm9lb3R1cywgcGxvdHRpbmcgYWdhaW5zdCBtZSB3aXRoIE1lbmVjbGVzLAogICAgICAgICAgICAgICAgICAgIHdobyBpcyB0aGUgcHJpbWUgbW92ZXIgaW4gYWxsIHRoZXNlIHNjaGVtZXMsIGhhdmluZyBtYW5hZ2VkIHRvIGdldCB1cCBhIHF1YXJyZWwKICAgICAgICAgICAgICAgICAgICB0aGF0IGZyb20gZGlzcHV0ZXMgYW5kIHJldmlsaW5ncyBzaG91bGQgY29tZSB0byBibG93cywgY3V0IGhpcyBvd24gaGVhZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VtbW9uZWQgbWUgYmVmb3JlIHRoZSBBcmVvcGFndXMgb24gYSBjaGFyZ2Ugb2YgbXVyZGVyb3VzIGFzc2F1bHQsIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9uIG9mIGRyaXZpbmcgbWUgaW50byBleGlsZSBmcm9tIHRoZSBjaXR5LiA8ZGF0ZSBhdXRobmFtZT0iLTQwMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQwMyI+NDAzPC9kYXRlPiBCLkMuPC90cmFuc2xhdGlvbj4="
translation['40.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgRXV0aHlkaWN1cywgdGhlIHBoeXNpY2lhbiwgdG8gd2hvbSB0aGVzZSBtZW4gaGFkIGdvbmUKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZmlyc3QgaW5zdGFuY2UsIGFza2luZyBoaW0gdG8gbWFrZSBhIGN1dCBvbiB0aGUgaGVhZCBvZgogICAgICAgICAgICAgICAgICAgIEJvZW90dXPigJRoYWQgbm90IHRvbGQgdG8gdGhlIGNvdXJ0IG9mIHRoZSBBcmVvcGFndXMgdGhlIHdob2xlIHRydXRoLAogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuIHdvdWxkIGhhdmUgdGFrZW4gc3VjaCB2ZW5nZWFuY2UgdXBvbiBtZSwgd2hvIHdhcyBndWlsdHkgb2Ygbm8gd3JvbmcKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgaGltLCBhcyB5b3Ugd291bGQgbm90IHRyeSB0byBpbmZsaWN0IG9uIHRob3NlIHdobyB3ZXJlIGd1aWx0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCB3cm9uZ3MgdG93YXJkIHlvdS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBJIG1heSBub3QgYmUKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRvIGJlIHNsYW5kZXJpbmcgaGltLCByZWFkLCBwbGVhc2UsIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBncmVhdCBhbmQKICAgICAgICAgICAgICAgICAgICBmb3JtaWRhYmxlIGNvbnRlc3QsIHRoZW4sIGhlIGdvdCB1cCBhZ2FpbnN0IG1lLCBub3QgYXMgYSBzaW1wbGUtbWluZGVkIGZlbGxvdywKICAgICAgICAgICAgICAgICAgICBidXQgYXMgYSBjb25zcGlyYXRvciBhbmQgYSB2aWxsYWluLiBCdXQgYWZ0ZXIgdGhpcywgaW5zdGVhZCBvZiB0aGUgbmFtZSwKICAgICAgICAgICAgICAgICAgICBCb2VvdHVzLCB3aGljaCBteSBmYXRoZXIgaGFkIGdpdmVuIGhpbSwgYXMgaGFzIGJlZW4gcHJvdmVkIHRvIHlvdSBieSB3aXRuZXNzZXMsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgbXkgZmF0aGVyJ3MgZGVhdGggaGUgaGFkIGhpcyBuYW1lIGluc2NyaWJlZCBvbiB0aGUgbGlzdCBvZiB0aGUgZGVtZXNtZW4gYXMKICAgICAgICAgICAgICAgICAgICBNYW50aXRoZXVzLCBhbmQgYmVpbmcgZnVydGhlciBhZGRyZXNzZWQgYnkgdGhlIG5hbWUgb2YgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGRlbWUgYXMgSSBteXNlbGYsIGhlIG5vdCBvbmx5IGZvcmNlZCBhIHJldHJpYWwgb2YgdGhlIGNhc2UgaW4gd2hpY2ggSSBhbQogICAgICAgICAgICAgICAgICAgIG5vdyBzdWluZyBoaW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5IGNsYWltaW5nIHRoYXQgaGlzIG5hbWUgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIE1hbnRpdGhldXMsIG5vdCBCb2VvdHVzLCBoZSBtYWRlIG9mIG5vIGVmZmVjdCB0aGUganVkZ2VtZW50IHJlbmRlcmVkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgaGltIHVuZGVyIHRoZSBsYXR0ZXIgbmFtZS48L25vdGU+IGJ1dCB3aGVuIHlvdSBoYWQgZWxlY3RlZCBtZSB0YXhpYXJjaCwgaGUKICAgICAgICAgICAgICAgICAgICBjYW1lIGluIHBlcnNvbiB0byB0aGUgY291cnQgdG8gcGFzcyB0aGUgcHJvYmF0aW9uYXJ5IHRlc3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXZlcnkgQXRoZW5pYW4gZWxlY3RlZCB0byBwdWJsaWMgb2ZmaWNlIGhhZCB0byBwYXNzIGEKICAgICAgICAgICAgICAgICAgICAgICAgc2NydXRpbnkg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOv866zrnOvM6xz4PhvbfOsTwvZm9yZWlnbj7vvIkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZlIGhpcyBmdWxsIGNpdGl6ZW5zaGlwLjwvbm90ZT47IGFuZCB3aGVuIGp1ZGdlbWVudCBoYWQgYmVlbiBnaXZlbgogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltIGluIGFuIGVqZWN0bWVudCBzdWl0LCBoZSBkZWNsYXJlZCB0aGF0IGl0IHdhcyBub3QgYWdhaW5zdCBoaW0gYnV0CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSB0aGF0IHRoZSBqdWRnZW1lbnQgaGFkIGJlZW4gZ2l2ZW4uIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zr/Ous65zrzOsc+D4b23zrE8L2ZvcmVpZ24+77yJIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBwcm92ZSBoaXMgZnVsbCBjaXRpemVuc2hpcC48L3RyYW5zbGF0aW9uPg=="
translation['40.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdG8gc3VtIHVwIHRoZSBtYXR0ZXIgZm9yIHlvdSwgaGUgZ2F2ZSBtZSBzbyBtdWNoIHRyb3VibGUgdGhhdCBoZSBjb21wZWxsZWQKICAgICAgICAgICAgICAgICAgICBtZSB0byBicmluZyBzdWl0IGFnYWluc3QgaGltIHJlZ2FyZGluZyB0aGUgbmFtZSwgbm90IGluIG9yZGVyIHRvIGdldCBtb25leSBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGltLCBtZW4gb2YgdGhlIGp1cnksIGJ1dCB0aGF0LCBpZiBpdCBzaG91bGQgYXBwZWFyIHRvIHlvdSB0aGF0IEkgYW0gYmVpbmcKICAgICAgICAgICAgICAgICAgICBvdXRyYWdlb3VzbHkgdHJlYXRlZCBhbmQgYW0gc3VmZmVyaW5nIGdyaWV2b3VzIHdyb25ncywgaGUgbWF5IGdvIG9uIGJlaW5nIGNhbGxlZAogICAgICAgICAgICAgICAgICAgIEJvZW90dXMsIGFzIG15IGZhdGhlciBuYW1lZCBoaW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBpbiB0aGlzIGFsc28sIHRha2UsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb25zIGJlYXJpbmcgb24KICAgICAgICAgICAgICAgICAgICB0aGVzZSBtYXR0ZXJzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYWRkaXRpb24gdG8KICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcywgb24gdGhlIGNoYXJnZSB0aGF0LCB3aGVuIEkgd2FzIG9uIG1pbGl0YXJ5IHNlcnZpY2UgYW5kIGhhZCBjb2xsZWN0ZWQKICAgICAgICAgICAgICAgICAgICBtZXJjZW5hcmllcyB3aXRoIEFtZWluaWFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwcGFyZW50bHkgYW4KICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHVua25vd24gY29tbWFuZGVyIG9mIG1lcmNlbmFyeSB0cm9vcHMsIHVuZGVyIHdob20gTWFudGl0aGV1cwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZWQgYXMgdGF4aWFyY2guPC9ub3RlPu+8iHNlZWluZyB0aGF0IEkgd2FzIHdlbGwtcHJvdmlkZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGZ1bmRzIGZyb20gb3RoZXIgc291cmNlcywgYW5kIGhhZCBjb2xsZWN0ZWQgZnJvbSBNeXRpbGVuZSBmcm9tIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgcHJveGVudXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSBzdGF0ZSByZXByZXNlbnRhdGl2ZSBpbiBhIGZvcmVpZ24KICAgICAgICAgICAgICAgICAgICAgICAgbGFuZCwgc29tZXdoYXQgYW5hbG9nb3VzIHRvIG91ciBjb25zdWwuPC9ub3RlPiBBcG9sbG9uaWRlcyBhbmQgdGhlIGZyaWVuZHMKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgY2l0eSB0aHJlZSBodW5kcmVkIFBob2NhaWMgc3RhdGVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlciBvZiBQaG9jYWVhIO+8iGEgY2l0eSBvbiB0aGUgY29hc3Qgb2YgSW9uaWHvvIkgd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgZ29sZCBjb2luIHNvbWV3aGF0IGhlYXZpZXIgdGhhbiB0aGUgc3RhdGVyIG9mIEN5emljdXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNC4yMyIgdmFsaWQ9InllcyI+RGVtLiAzNC4yMzwvYmlibD7vvIkuPC9ub3RlPiBhbmQgaGFkIHNwZW50IHRoYXQKICAgICAgICAgICAgICAgICAgICBzdW0gdXBvbiB0aGVzZSB0cm9vcHMsIGluIG9yZGVyIHRoYXQgYSBtYXR0ZXIgbWlnaHQgYmUgcHJvc2VjdXRlZCB3aGljaCB3YXMgb2YKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2UgdG8geW91IGFuZCB0byB0aGVtIGFsaWtl77yJ4oCUIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzQuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuMjM8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['40.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdGhpcyBoZSBicmluZ3Mgc3VpdCBhZ2FpbnN0IG1lLCBhbGxlZ2luZyB0aGF0IEkgaGFkCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGEgZGVidCBkdWUgdG8gbXkgZmF0aGVyIGZyb20gdGhlIGNpdHkgb2YgdGhlIE15dGlsZW5lYW5zLiBJbiB0aGlzIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIHNlZWtpbmcgdG8gc2VydmUgQ2FtbXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHR5cmFudCBvZgogICAgICAgICAgICAgICAgICAgICAgICBNeXRpbGVuZSwgb3RoZXJ3aXNlIHVua25vd24uPC9ub3RlPiB0eXJhbnQgb2YgTXl0aWxlbmUsIHdobyBpcyBhbiBlbmVteSBvZgogICAgICAgICAgICAgICAgICAgIEF0aGVucyBhbmQgYSBwcml2YXRlIGVuZW15IG9mIG1pbmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCB0byBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgbXkgZmF0aGVyIGF0IHRoZSB0aW1lIHJlY2VpdmVkIGluIHBlcnNvbiB0aGUgcmV3YXJkIHdoaWNoIHRoZSBwZW9wbGUgb2YKICAgICAgICAgICAgICAgICAgICBNeXRpbGVuZSB2b3RlZCBoaW0sIGFuZCB0aGF0IG5vIGRlYnQgd2FzIG93aW5nIHRvIGhpbSBpbiBNeXRpbGVuZSwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSBhIGRlcG9zaXRpb24gb2YgeW91ciBmcmllbmRzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBjb3VsZCBtZW50aW9uCiAgICAgICAgICAgICAgICAgICAgbWFueSBvdGhlciBvdXRyYWdlb3VzIGFjdHMgb2Ygd2hpY2ggQm9lb3R1cyBoYXMgYmVlbiBndWlsdHksIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICBib3RoIGFnYWluc3QgbXlzZWxmIGFuZCBhZ2FpbnN0IHlvdTsgYnV0IEkgYW0gY29tcGVsbGVkIHRvIHBhc3MgdGhlbSBieSBhcyBidXQKICAgICAgICAgICAgICAgICAgICBsaXR0bGUgd2F0ZXIgaXMgbGVmdCBtZSBpbiB0aGUgY2xlcHN5ZHJhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2F0ZXItY2xvY2suPC9ub3RlPiBJIHRoaW5rLCBob3dldmVyLCB0aGF0LCBldmVuIGFzIGl0IGlzLCB5b3UgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgc2hvd24gY29uY2x1c2l2ZWx5IHRoYXQgdGhlIHNhbWUgbWFuIHdobyBnb3QgdXAgYWdhaW5zdCBtZSBhIHN1aXQgaW52b2x2aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHJpc2sgb2YgYmFuaXNobWVudCwgYW5kIHN1ZWQgbWUgb24gY2hhcmdlcyB3aGljaCBjb25jZXJuZWQgbWUgbm90IGF0IGFsbCwgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgb25lIHdobyB3b3VsZCBoYXZlIGNvbWUgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIHVucHJlcGFyZWQ7IHNvIHRoYXQgaWYgaGUgdHJpZXMgdG8KICAgICAgICAgICAgICAgICAgICBzYXkgYW55dGhpbmcgYWJvdXQgdGhpcywgSSBpbWFnaW5lIHRoYXQgeW91IHdpbGwgbm90IHRvbGVyYXRlIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['40.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgaG93ZXZlciwgaGUgZGVjbGFyZXMgdGhhdCBoZSBvZmZlcmVkIHRvIHR1cm4gb3ZlcgogICAgICAgICAgICAgICAgICAgIGFsbCBtYXR0ZXJzIGF0IGlzc3VlIGJldHdlZW4gdXMgdG8gQ29ub24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBncmFuZHNvbiBvZiB0aGUgZmFtb3VzIEF0aGVuaWFuIGdlbmVyYWwgb2YgdGhpcyBuYW1lLjwvbm90ZT4gc29uIG9mCiAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzLCBmb3IgYXJiaXRyYXRpb24sIGFuZCB0aGF0IEkgcmVmdXNlZCB0byBzdWJtaXQgdGhlbSwgYmUgc3VyZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSB0cnlpbmcgdG8gbWlzbGVhZCB5b3UuIEksIGZvciBteSBwYXJ0LCB3YXMgcmVhZHkgdG8gc3VibWl0IGFsbCBtYXR0ZXJzCiAgICAgICAgICAgICAgICAgICAgdXBvbiB3aGljaCBhIGRlY2lzaW9uIGhhZCBub3QgeWV0IGJlZW4gcmVuZGVyZWQsIGVpdGhlciB0byBDb25vbiBvciB0byBhbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBpbXBhcnRpYWwgYXJiaXRyYXRvciB3aG9tIEJvZW90dXMgbWlnaHQgY2hvb3NlOyBidXQgbWF0dGVycyByZWdhcmRpbmcgd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgYXJiaXRyYXRvciBoYWQgZ2l2ZW4gYSBkZWNpc2lvbiBpbiBteSBmYXZvciwgYWZ0ZXIgQm9lb3R1cyBoYWQgdGhyaWNlIGFwcGVhcmVkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhpbSBhbmQgY29udGVzdGVkIHRoZSBjYXNlLOKAlGEgZGVjaXNpb24gaW4gd2hpY2ggQm9lb3R1cwogICAgICAgICAgICAgICAgICAgIGFjcXVpZXNjZWQsIGFzIHdpdG5lc3NlcyBoYXZlIHRlc3RpZmllZCB0byB5b3Us4oCUdGhlc2UgbWF0dGVycywgSQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQsIGNvdWxkIG5vdCBqdXN0bHkgYmUgcmVvcGVuZWQuIDwvdHJhbnNsYXRpb24+"
translation['40.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdG8KICAgICAgICAgICAgICAgICAgICB3aGF0IGZpbmFsIHNldHRsZW1lbnQgY291bGQgd2UgZXZlciBoYXZlIGNvbWUsIGlmIEkgaGFkIG1hZGUgaW52YWxpZCBhIGRlY2lzaW9uCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gYnkgYW4gYXJiaXRyYXRvciBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhd3MsIGFuZCBoYWQgcmVmZXJyZWQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBjaGFyZ2UgdG8gdGhlIGRlY2lzaW9uIG9mIGFub3RoZXIgYXJiaXRyYXRvcj/igJRlc3BlY2lhbGx5IGFzIEkga25ldwogICAgICAgICAgICAgICAgICAgIGZ1bGwgd2VsbCB0aGF0LCBldmVuIHRob3VnaCBpbiByZWxhdGlvbiB0byBvdGhlciBtZW4gaXQgaXMgbm90IHByb3BlciB0byBpbnNpc3QKICAgICAgICAgICAgICAgICAgICBvdmVybXVjaCBvbiB0aGUgZGVjaXNpb25zIG9mIGFyYml0cmF0b3JzLCB5ZXQgaXQgaXMgcGVjdWxpYXJseSBmYWlyIHRvIGRlYWwgdGh1cwogICAgICAgICAgICAgICAgICAgIHdpdGggQm9lb3R1cy4gPC90cmFuc2xhdGlvbj4="
translation['40.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgY29tZSwgc3VwcG9zZSBzb21lb25lIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGluZGljdCBoaW0gZm9yIHRoZSB1c3VycGF0aW9uIG9mIHRoZSByaWdodHMgb2YgY2l0aXplbnNoaXAsIGRlY2xhcmluZyB0aGF0IG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGRlbmllZCBvbiBvYXRoIHRoYXQgdGhpcyBtYW4gd2FzIGhpcyBzb247IGNvdWxkIGhlIHJlbHkgb24gYW55dGhpbmcgZWxzZQogICAgICAgICAgICAgICAgICAgIHRvIG1lZXQgdGhpcyBjaGFyZ2UgdGhhbiB0aGF0LCBiZWNhdXNlIG9mIHRoZWlyIG1vdGhlcidzIG9hdGggYW5kIHRoZSBkZWNpc2lvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBhcmJpdHJhdG9ycywgbXkgZmF0aGVyIHdhcyBmb3JjZWQgdG8gYWJpZGUgYnkgdGhlIGF3YXJkPyA8L3RyYW5zbGF0aW9uPg=="
translation['40.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3b3VsZCwgdGhlbiwgYmUgYW4gb3V0cmFnZW91cyB0aGluZywgaWYgdGhpcyBtYW4sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgaGF2aW5nIGJlY29tZSBhIGNpdGl6ZW4gb2YgeW91ciBjaXR5IHRocm91Z2ggYW4gYXJiaXRyYXRvcidzIGRlY2lzaW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgc2VjdXJlZCBhIHNoYXJlIG9mIG15IGluaGVyaXRhbmNlLCBhbmQgb2J0YWluZWQgYWxsIHRoYXQgd2FzIGZhaXIsIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGJlIHRob3VnaHQgYnkgeW91IHRvIGhhdmUgYW55IGp1c3RpY2UgaW4gaGlzIGNsYWltLCB3aGVuIGhlIGRlbWFuZGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlb3BlbmluZyBvZiB0aGUgc3VpdHMgaW4gd2hpY2ggSSB3b24gbXkgYWNxdWl0dGFsLCB3aGVuIGhlIHdhcyBwcmVzZW50IGFuZAogICAgICAgICAgICAgICAgICAgIGFyZ3VlZCBhZ2FpbnN0IGl0LCBhbmQgYWNxdWllc2NlZCBpbiB0aGUgdmVyZGljdDsganVzdCBhcyB0aG91Z2gsIHdoZW4gaXQgaXMgdG8KICAgICAgICAgICAgICAgICAgICBoaXMgaW50ZXJlc3QsIGF3YXJkcyBvdWdodCB0byBiZSB2YWxpZCwgYnV0LCB3aGVuIGl0IGlzIG5vdCB0byBoaXMgaW50ZXJlc3QsIGhpcwogICAgICAgICAgICAgICAgICAgIG9waW5pb24gc2hvdWxkIGhhdmUgbW9yZSB3ZWlnaHQgdGhhbiBkZWNpc2lvbnMgcmVuZGVyZWQgaW4gYWNjb3JkYW5jZSB3aXRoIHlvdXIKICAgICAgICAgICAgICAgICAgICBsYXdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBpcyBzdWNoIGEgY3JhZnR5IHNjaGVtZXIgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIGV2ZW4gaW4gdGhpcyBwcm9wb3NhbCBvZiBhcmJpdHJhdGlvbiB3YXMgbm90IG1hZGUgdGhhdCBoZSBtaWdodCBiZSByaWQKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZGlzcHV0ZXMgd2l0aCBtZSwgYnV0IHRoYXQsIGFzIGhlIGhhZCBmb3IgZWxldmVuIHllYXJzIHByZXZpb3VzbHkgY2FycmllZAogICAgICAgICAgICAgICAgICAgIG9uIGhpcyBrbmF2ZXJ5LCBzbyBub3csIGJ5IHJlbmRlcmluZyBpbnZhbGlkIHRoZSBkZWNpc2lvbnMgZ2l2ZW4gaW4gbXkgZmF2b3IgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRyYXRvciwgaGUgbWlnaHQgYWZyZXNoIGluc3RpdHV0ZSBoaXMgbWFsaWNpb3VzIHByb2NlZWRpbmdzIGFnYWluc3QgbWUsCiAgICAgICAgICAgICAgICAgICAgYW5kIGVsdWRlIHRoZSBwcmVzZW50IHN1aXQuIDwvdHJhbnNsYXRpb24+"
translation['40.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGlzIGEKICAgICAgICAgICAgICAgICAgICBjb252aW5jaW5nIHByb29mIG9mIHRoaXMuIEhlIHdvdWxkIG5vdCBhY2NlcHQgdGhlIGNoYWxsZW5nZSB3aGljaCBJIGdhdmUgaGltCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBsYXdzOyBhbmQgd2hlbiBJIGhhZCBwcmV2aW91c2x5IHJlZmVycmVkIHRoZSBzdWl0IGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIG5hbWUgdG8gWGVuaXBwdXMsIHdob20gaGUgaGFkIHByb3Bvc2VkIGFzIGFyYml0cmF0b3IsIGhlIGZvcmJhZGUgaGltIHRvIHJlbmRlcgogICAgICAgICAgICAgICAgICAgIGFueSBkZWNpc2lvbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBvbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1hdHRlcnMgYWxzbyB5b3Ugd2lsbCBsZWFybiBmcm9tIHRoZSBkZXBvc2l0aW9uIGFuZCB0aGUgY2hhbGxlbmdlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zdGl0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3N0aXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3N0aXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBjaGFsbGVuZ2UsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgaGUgZGlkIG5vdCBhY2NlcHQsIHdpc2hpbmcgcmF0aGVyIHRvIGxheSBhIHNuYXJlIGZvciBtZSBhbmQgdG8gZGVsYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VpdCBhcyBsb25nIGFzIGhlIHBvc3NpYmx5IGNvdWxkOyBhbmQgbm93LCBhcyBJIGxlYXJuLCBoZSB3aWxsIGFjY3VzZSBub3Qgb25seQogICAgICAgICAgICAgICAgICAgIG1lLCBidXQgbXkgZmF0aGVyIGFzIHdlbGwsIGFsbGVnaW5nIHRoYXQgbXkgZmF0aGVyIHdyb25nZWQgaGltIGluIG1hbnkgd2F5cyBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRvIHNob3cgZmF2b3IgdG8gbWUuIEJ1dCBJIGJlZyB5b3UsIG1lbiBvZiB0aGUganVyeSwgYXMgeW91IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyBkZWVtIGl0IGFuIHVuc2VlbWx5IHRoaW5nIHRvIGJlIGV2aWwgc3Bva2VuIG9mIGJ5IHlvdXIgb3duIGNoaWxkcmVuLAogICAgICAgICAgICAgICAgICAgIG5vdCB0byBhbGxvdyB0aGlzIG1hbiBlaXRoZXIgdG8gc3BlYWsgZXZpbCBvZiBoaXMgZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd291bGQgaW5kZWVkIGJlIGFuIG91dHJhZ2VvdXMgdGhpbmcgd2hlbiB5b3UKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzLCBhZnRlciBoYXZpbmcgY29tZSB0byB0ZXJtcyB3aXRoIHRob3NlIHdobyBpbiB0aGUgdGltZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvbGlnYXJjaHkgcHV0IHRvIGRlYXRoIHdpdGhvdXQgdHJpYWwgbnVtYmVycyBvZiB5b3VyIGNvdW50cnltZW4sIGFiaWRlIGJ5IHlvdXIKICAgICAgICAgICAgICAgICAgICBjb21wYWN0IHdpdGggdGhlbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFsbHVzaW9uIGlzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbW5lc3R5IGRlY2xhcmVkIGFmdGVyIHRoZSBleHB1bHNpb24gb2YgdGhlIFRoaXJ0eSBUeXJhbnRzLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICDigJxnZW50bGVuZXNz4oCdIG9mIHRoZSBkZW1vY3JhY3kgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiAyMi40IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguIFBvbC4gMjIuNDwvYmlibD4uPC9ub3RlPiBhcwogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBob25vciBzaG91bGQgZG8sIHRoYXQgeW91IHNob3VsZCBhbGxvdyB0aGlzIG1hbiwgd2hvIHdhcyByZWNvbmNpbGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBteSBmYXRoZXIgd2hpbGUgaGUgbGl2ZWQsIGFuZCB3b24gbWFueSBhZHZhbnRhZ2VzIHRvIHdoaWNoIGhlIGhhZCBubyByaWdodCwgbm93CiAgICAgICAgICAgICAgICAgICAgdG8gcmVuZXcgdGhlIHF1YXJyZWwgYW5kIHRvIHNwZWFrIGV2aWwgb2YgdGhhdCBmYXRoZXIgd2hlbiBoZSBpcyBubyBtb3JlLiBEbyBub3QKICAgICAgICAgICAgICAgICAgICBzdWZmZXIgdGhpcywgbWVuIG9mIHRoZSBqdXJ5LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gMjIuNCIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQXRoLiBQb2wuIDIyLjQ8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['40.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCBiZQogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlLCBwcmV2ZW50IGhpbSBmcm9tIGFjdGluZyBpbiB0aGlzIHdheTsgYnV0IGlmIGhlIHBlcnNpc3RzIGluIGRlZnlpbmcgeW91CiAgICAgICAgICAgICAgICAgICAgYW5kIGluIHNwZWFraW5nIGV2aWwgb2YgbXkgZmF0aGVyLCByZW1lbWJlciB0aGF0IGhlIGlzIGJlYXJpbmcgd2l0bmVzcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB0aGF0IGhlIGlzIG5vIHNvbiBvZiBoaXMuIEZvciB0aG9zZSB3aG8gYXJlIHRydWUtYm9ybiBjaGlsZHJlbiwgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IG1heSBxdWFycmVsIHdpdGggdGhlaXIgZmF0aGVycyB3aGlsZSB0aGV5IGFyZSBhbGl2ZSB5ZXQgc3BlYWsgd2VsbAogICAgICAgICAgICAgICAgICAgIG9mIHRoZW0gd2hlbiB0aGV5IGFyZSBkZWFkOyB3aGVyZWFzIHRob3NlIHdobyBhcmUgYWNjb3VudGVkIHNvbnMsIGJ1dCBhcmUgbm90IGluCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggY2hpbGRyZW4gb2YgdGhlaXIgc3VwcG9zZWQgZmF0aGVycywgcXVhcnJlbCB3aXRoIHRoZW0gd2l0aG91dCBzY3J1cGxlCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgdGhleSBhcmUgYWxpdmUsIGFuZCB0aGluayBub3RoaW5nIG9mIHNsYW5kZXJpbmcgdGhlbSB3aGVuIHRoZXkgYXJlIGRlYWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGJlc2lkZXMsIHRoaW5rIGhvdyBhYnN1cmQgaXQgaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgZmVsbG93IHNob3VsZCBhYnVzZSBteSBmYXRoZXIgZm9yIGhpcyBmYWlsaW5ncyB0b3dhcmQgaGltLCB3aGVuIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHRoYW5rcyB0byB0aGlzIGZhdGhlcidzIGZhaWxpbmdzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPuKAnFRoZXJlIGlzIGEgcGxheSBvbiB0aGUgZG91YmxlIHNlbnNlIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gc68zrHPgc+E4b2xzr3Otc65zr08L2ZvcmVpZ24+LCB3aGljaCBpcyBvZnRlbiB1c2VkIGFzIGEgZXVwaGVtaXNtIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJhaWx0aWVzIG9mIGxvdmUu4oCd4oCUUGFsZXkuPC9ub3RlPiB0aGF0IGhlIGJlY2FtZSBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBvZiB5b3VyIHN0YXRlLiBJLCBvbiBteSBwYXJ0LCBoYXZlLCB0aGFua3MgdG8gdGhlIG1vdGhlciBvZiB0aGVzZSBtZW4sCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkZXByaXZlZCBvZiB0d28tdGhpcmRzIG9mIG15IHByb3BlcnR5LCBidXQgZm9yIGFsbCB0aGF0IEkgaGF2ZSB0b28gbXVjaAogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QgZm9yIHlvdSB0byBzcGVhayBkaXNwYXJhZ2luZ2x5IG9mIGhlci4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byBzrzOsc+Bz4ThvbHOvc61zrnOvTwvZm9yZWlnbj4sIHdoaWNoIGlzIG9mdGVuIHVzZWQgYXMgYSBldXBoZW1pc20gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmcmFpbHRpZXMgb2YgbG92ZS7igJ3igJRQYWxleS48L3RyYW5zbGF0aW9uPg=="
translation['40.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQm9lb3R1cyBmZWVscyBubyBzaGFtZSBpbiBkaXNwYXJhZ2luZyBiZWZvcmUgeW91IHRoZSBtYW4gd2hvbSBoZSBjb21wZWxsZWQKICAgICAgICAgICAgICAgICAgICB0byBiZWNvbWUgaGlzIGZhdGhlciwgYW5kIGhhcyBldmVuIGNvbWUgdG8gc3VjaCBhIHBpdGNoIG9mIHZ1bGdhcml0eSB0aGF0LAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIHRoZSBsYXdzIGZvcmJpZCBzcGVha2luZyBpbGwgZXZlbiBvZiBvdGhlciBtZW4ncyBmYXRoZXJzIGFmdGVyIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgZGVhZCwgaGUgd2lsbCBzbGFuZGVyIHRoZSBtYW4gd2hvc2Ugc29uIGhlIGNsYWltcyB0byBiZTsgd2hlcmVhcyBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHByb3BlciBmb3IgaGltIHRvIHNob3cgcmVzZW50bWVudCBpZiBhbnlvbmUgZWxzZSBzcG9rZSBldmlsIG9mIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['40.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBmYW5jeSwgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHRoYXQsIHdoZW4gaGUgaXMgYXQgYSBsb3NzIGZvciBhbnl0aGluZyBlbHNlIHRvIHNheSwgaGUgd2lsbCB1bmRlcnRha2UgdG8KICAgICAgICAgICAgICAgICAgICBzcGVhayBldmlsIG9mIG1lLCBhbmQgd2lsbCB0cnkgdG8gYnJpbmcgbWUgaW50byBkaXNyZXB1dGUsIHJlaGVhcnNpbmcgYXQgbGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgaG93IEkgd2FzIHJlYXJlZCBhbmQgZWR1Y2F0ZWQgYW5kIG1hcnJpZWQgaW4gbXkgZmF0aGVyJ3MgaG91c2UsIHdoaWxlIGhlIGhhZCBubwogICAgICAgICAgICAgICAgICAgIHNoYXJlIGluIGFueSBvZiB0aGVzZSBhZHZhbnRhZ2VzLiBCdXQgSSBiaWQgeW91IGJlYXIgaW4gbWluZCB0aGF0IG15IG1vdGhlciBkaWVkCiAgICAgICAgICAgICAgICAgICAgbGVhdmluZyBtZSBhIGNoaWxkLCBzbyB0aGF0IHRoZSBpbnRlcmVzdCBvZiBoZXIgbWFycmlhZ2UtcG9ydGlvbiB3YXMgc3VmZmljaWVudAogICAgICAgICAgICAgICAgICAgIHRvIHJlYXIgYW5kIGVkdWNhdGUgbWU7IDwvdHJhbnNsYXRpb24+"
translation['40.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWFzIFBsYW5nb24sIHRoZQogICAgICAgICAgICAgICAgICAgIG1vdGhlciBvZiB0aGVzZSBtZW4sIG1haW50YWluZWQgdGhlbSBhbmQgYSBob3N0IG9mIGZlbWFsZSBzZXJ2YW50cyBpbiBoZXIgb3duCiAgICAgICAgICAgICAgICAgICAgaG91c2UsIGFuZCBoZXJzZWxmIGxpdmVkIGxhdmlzaGx5LCBoYXZpbmcgbXkgZmF0aGVyIHJlYWR5LCBiZWNhdXNlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHBhc3Npb24gZm9yIGhlciwgdG8gc3VwcGx5IHRoZSBmdW5kcyBmb3IgYWxsIHRoaXMsIGFuZCBmb3JjaW5nIGhpbSB0byBoZWF2eQogICAgICAgICAgICAgICAgICAgIGV4cGVuZGl0dXJlcy4gU2hlIHRoZXJlZm9yZSBzcGVudCBmYXIgbW9yZSBvZiBoaXMgcHJvcGVydHkgdGhhbiBJIGRpZCwgc28gdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgd2l0aCBmYXIgYmV0dGVyIHJlYXNvbiBicmluZyBjaGFyZ2VzIGFnYWluc3QgdGhlbSB0aGFuIHRoZXkgYWdhaW5zdCBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGJlc2lkZXMgYWxsIHRoZSByZXN0LCBpbiBjb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgd2l0aCBteSBmYXRoZXIgSSBib3Jyb3dlZCB0d2VudHkgbWluYWUgZnJvbSBCbGVwYWV1cyB0aGUgYmFua2VyLCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcHVyY2hhc2Ugb2Ygc29tZSBtaW5pbmcgcHJvcGVydGllcywgYW5kIGFmdGVyIG15IGZhdGhlcidzIGRlYXRoIEkgc2hhcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbmVzIHdpdGggdGhlc2UgbWVuLCBidXQgaGFkIHRvIHBheSB0aGUgbG9hbiBteXNlbGYuIEkgYWxzbyBib3Jyb3dlZCBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgZHJhY2htYWUgZnJvbSBMeXNpc3RyYXR1cyBvZiBUaG9yaWN1cyBmb3IgbXkgZmF0aGVyJ3MgZnVuZXJhbCwgYW5kIGhhdmUKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbGx5IHBhaWQgdGhlIGRlYnQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgSSBhbSBzcGVha2luZyB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBvbiB0aGVzZSBtYXR0ZXJzIGFsc28geW91IHdpbGwgbGVhcm4gZnJvbSB0aGVzZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBJIGFtIHRodXMKICAgICAgICAgICAgICAgICAgICBzbyBjbGVhcmx5IGF0IGEgZGlzYWR2YW50YWdlIGluIHNvIG1hbnkgcmVzcGVjdHMsIHNoYWxsIHRoaXMgbWFuIG5vdyBieSBtYWtpbmcgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IHRvLWRvIGFuZCBvdXRjcnkgYWJvdXQgaGlzIHdyb25ncywgcm9iIG1lIGFsc28gb2YgbXkgbW90aGVyJ3MKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9uPyBCdXQgZG8gbm90LCBtZW4gb2YgdGhlIGp1cnksIEkgYmVnIHlvdSBieSBaZXVzIGFuZCB0aGUgR29kcywKICAgICAgICAgICAgICAgICAgICBkbyBub3QgYmUgb3ZlcndoZWxtZWQgYnkgdGhlIG5vaXNlIGhlIG1ha2VzLiBIZSBpcyBhIHZpb2xlbnQgZmVsbG93LCB2aW9sZW50IGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWR5IHRvIGdvIHRvIGFsbCBsZW5ndGhzOyBhbmQgaGUgaXMgc28gdW5zY3J1cHVsb3VzIHRoYXQsIGlmIGhlIGhhcyBubwogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0byBwcm92ZSBhIGZhY3QsIGhlIHdpbGwgc2F5IHRoYXQgaXQgaXMgd2VsbCBrbm93biB0byB5b3UsIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LOKAlGEgdHJpY2sgdG8gd2hpY2ggYWxsIHRob3NlIGhhdmUgcmVjb3Vyc2Ugd2hvIGhhdmUgbm8ganVzdAogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IHRvIGFkdmFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['40.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBoZSBzaGFsbCB0cnkgYW55IHN1Y2gKICAgICAgICAgICAgICAgICAgICB0cmljaywgZG8gbm90IHRvbGVyYXRlIGl0OyBleHBvc2UgaGltLiBXaGF0IGFueW9uZSBvZiB5b3UgZG9lcyBub3Qga25vdywgbGV0IGhpcwogICAgICAgICAgICAgICAgICAgIGRlZW0gdGhhdCBoaXMgbmVpZ2hib3IgZG9lcyBub3Qga25vdyBlaXRoZXIuIExldCBoaW0gZGVtYW5kIHRoYXQgQm9lb3R1cyBwcm92ZQogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgd2hhdGV2ZXIgc3RhdGVtZW50cyBoZSBtYXkgbWFrZSwgYW5kIG5vdCBzaGlyayB0aGUgdHJ1dGggYnkgZGVjbGFyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Uga25vdyB0aGluZ3MgYWJvdXQgd2hpY2ggaGUgd2lsbCBoYXZlIG5vIGp1c3QgYXJndW1lbnQgdG8gYWR2YW5jZTsgc2luY2UKICAgICAgICAgICAgICAgICAgICBJLCBvbiBteSBwYXJ0LCBtZW4gb2YgdGhlIGp1cnksIGFsdGhvdWdoIHlvdSBhbGwga25vdyB0aGUgd2F5IGluIHdoaWNoIG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyBjb21wZWxsZWQgdG8gYWRvcHQgdGhlc2UgbWVuLCBhbSBub25lIHRoZSBsZXNzIHN1aW5nIHRoZW0gYXQgbGF3LCBhbmQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgZm9yd2FyZCB3aXRuZXNzZXMgcmVzcG9uc2libGUgZm9yIHRoZWlyIHRlc3RpbW9ueS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGlhYmxlLCB0aGF0IGlzLCB0byBwcm9zZWN1dGlvbiBmb3IgcGVyanVyeSwgaWYgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGJlIHByb3ZlZCBmYWxzZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoZSByaXNrIGlzIG5vdCB0aGUgc2FtZSBmb3IgYm90aCBvZgogICAgICAgICAgICAgICAgICAgIHVzLiBPbiBteSBwYXJ0LCBpZiB5b3UgYXJlIG5vdyBsZWQgYXN0cmF5IGJ5IHRoZXNlIG1lbiwgaXQgd2lsbCBub3QgYmUgb3BlbiB0bwogICAgICAgICAgICAgICAgICAgIG1lIHRvIGJyaW5nIHN1aXQgYWdhaW4gZm9yIHRoZSBtYXJyaWFnZS1wb3J0aW9uOyBidXQgdGhleSwgaWYgdGhleSBjbGFpbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGFyYml0cmF0b3Igd2FzIHdyb25nIGluIGdpdmluZyBoaXMgZGVjaXNpb24gaW4gbXkgZmF2b3IsIGFzIGF0IHRoYXQgdGltZQogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIHRoZSByaWdodCB0byBhcHBlYWwgdG8geW91ciBjb3VydCwgc28gbm93IGFnYWluIHdpbGwgYmUgcGVybWl0dGVkLCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgc28gd2lzaCwgdG8gcmVjb3ZlciB0aGVpciByaWdodHMgZnJvbSBtZSBpbiB5b3VyIGNvdXJ0LiA8L3RyYW5zbGF0aW9uPg=="
translation['40.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5JLCBpZiB5b3UgbGVhdmUgbWUgaW4gdGhlIGx1cmNoLCB3aGljaCBJIHByYXkgbWF5IG5vdAogICAgICAgICAgICAgICAgICAgIGhhcHBlbiwgc2hhbGwgaGF2ZSBubyBtZWFucyBvZiBnaXZpbmcgYSBkb3dyeSB0byBteSBkYXVnaHRlciwgd2hvc2Ugb3duIGZhdGhlciBJCiAgICAgICAgICAgICAgICAgICAgYW0sIGFsdGhvdWdoLCBpZiB5b3Ugc2VlIGhlciBzaXplLCB5b3Ugd291bGQgZGVlbSBzaGUgd2FzIG5vdCBteSBkYXVnaHRlciBidXQgbXkKICAgICAgICAgICAgICAgICAgICAgICAgc2lzdGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBhYm92ZSwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC4xMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDAuMTI8L2JpYmw+Ljwvbm90ZT47IGJ1dCB0aGVzZSBtZW4sIGlmIHlvdSBjb21lIHRvIG15IGFpZCwgd2lsbCBwYXkKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIG91dCBvZiB0aGVpciBvd24gcHJvcGVydHksIGJ1dCB3aWxsIHJlc3RvcmUgdG8gbWUgd2hhdCBpcyBteSBvd24gZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBob3VzZSB3aGljaCBieSBjb21tb24gYWdyZWVtZW50IHdlIHJlc2VydmVkIGZvciB0aGUgc2V0dGxlbWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9uLCBidXQgaW4gd2hpY2ggdGhlc2UgbWVuIGhhdmUgYmVlbiBsaXZpbmcgYnkgdGhlbXNlbHZlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC4xMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDAuMTI8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['40.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgbm90IGZpdHRpbmcgdGhhdCBJLCBoYXZpbmcgYQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIG1hcnJpYWdlYWJsZSBhZ2UsIHNob3VsZCBkd2VsbCB3aXRoIG1lbiBvZiB0aGVpciBzb3J0LCB3aG8gYXJlIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhlbXNlbHZlcyBsaXZpbmcgbGljZW50aW91cyBsaXZlcywgYnV0IHdobyBhbHNvIGJyaW5nIGludG8gdGhlIGhvdXNlIGEKICAgICAgICAgICAgICAgICAgICBob3N0IG9mIG90aGVycyBvZiBsaWtlIHN0YW1wIHdpdGggdGhlbXNlbHZlczsgbmF5LCBieSBaZXVzLCBJIGRvIG5vdCBkZWVtIGl0CiAgICAgICAgICAgICAgICAgICAgc2FmZSB0byBsaXZlIGluIHRoZSBzYW1lIGhvdXNlIHdpdGggdGhlbSBteXNlbGYuIFdoZW4gdGhleSBoYXZlIHRodXMgb3Blbmx5IGxhaWQKICAgICAgICAgICAgICAgICAgICBhIHBsb3QsIGFuZCBnb3QgdXAgYSBjaGFyZ2UgYWdhaW5zdCBtZSBiZWZvcmUgdGhlIEFyZW9wYWd1cywgZG8geW91IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBhbnkgcG9pc29uaW5nIG9yIGFueSBvdGhlciBzdWNoIHZpbGxhaW55IGZyb20gd2hpY2ggdGhleSB3b3VsZCBhYnN0YWluPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIGFsbCB0aGUgcmVzdCDvvIhmb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIGhhcyBvY2N1cnJlZCB0byBtZSBqdXN0IG5vd++8iSwgdGhleSBoYXZlIGNvbWUgdG8gc3VjaCBhIHBpdGNoIG9mCiAgICAgICAgICAgICAgICAgICAgYXVkYWNpdHkgYXMgdG8gaGF2ZSBwdXQgaW4gYSBkZXBvc2l0aW9uIG9mIENyaXRvLCBhbGxlZ2luZyB0aGF0IGhlIGhhcyBwdXJjaGFzZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG1lIG15IG9uZS10aGlyZCBzaGFyZSBpbiB0aGUgaG91c2UuIE5vdyB0aGF0IHRoaXMgaXMgZmFsc2UgeW91IHdpbGwgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgcGVyY2VpdmU7IGZvciBpbiB0aGUgZmlyc3QgcGxhY2UgQ3JpdG8gZG9lcyBub3QgbGl2ZSBzbyBlY29ub21pY2FsbHkgYXMgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIHB1cmNoYXNlIGEgaG91c2UgZnJvbSBzb21lb25lIGVsc2UsIGJ1dCBzbyBleHRyYXZhZ2FudGx5IGFuZAogICAgICAgICAgICAgICAgICAgIGxpY2VudGlvdXNseSB0aGF0IGhlIHNwZW5kcyB0aGUgcHJvcGVydHkgb2Ygb3RoZXJzIGFzIHdlbGwgYXMgaGlzIG93bi4gQWdhaW4sIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5vdyB0aGlzIG1hbidzIHdpdG5lc3MsIGJ1dCByYXRoZXIgbXkgYWR2ZXJzYXJ5LiBGb3Igd2hvIGFtb25nIHlvdSBpcwogICAgICAgICAgICAgICAgICAgIGlnbm9yYW50IHRoYXQgd2l0bmVzc2VzIGFyZSB0aG9zZSB3aG8gaGF2ZSBubyBpbnRlcmVzdCBpbiB0aGUgbWF0dGVyIGF0IGlzc3VlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1aXQ7IHdoaWxlIGFkdmVyc2FyaWVzIGFyZSB0aG9zZSB3aG8gYXJlIGludm9sdmVkIGluIHRoZSBtYXR0ZXJzIGluIHJlZ2FyZAogICAgICAgICAgICAgICAgICAgIHRvIHdoaWNoIG9uZSBnb2VzIHRvIGxhdyB3aXRoIHRoZW0/IFRoZSBsYXR0ZXIgaXMgdGhlIGNhc2Ugd2l0aCBDcml0by4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlcm1vcmUsIG91dCBvZiBhbGwgeW91ciBudW1iZXIsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCBvdXQgb2YgYWxsIHRoZSBob3N0IG9mIHRoZSByZXN0IG9mIHRoZSBBdGhlbmlhbnMsIG5vdCBhIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIG90aGVyIHBlcnNvbiBoYXMgdGVzdGlmaWVkIHRoYXQgaGUgd2FzIHByZXNlbnQgYXQgdGhpcyBzYWxlOyBUaW1vY3JhdGVzIGFsb25lLAogICAgICAgICAgICAgICAgICAgIGxpa2UgYSBnb2QgZnJvbSB0aGUgbWFjaGluZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGRldXMgZXggbWFjaGluYQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJhZ2ljIHN0YWdlLjwvbm90ZT4gdGVzdGlmaWVkIHRoYXQgbXkgZmF0aGVyIGdhdmUgYSBmZWFzdCB0byBCb2VvdHVzCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHRlbnRoIGRheSDvvIhhbmQgVGltb2NyYXRlcyBpcyBvZiB0aGUgc2FtZSBhZ2UgYXMgdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQh77yJLiBUaW1vY3JhdGVzIGRlY2xhcmVzIHRoYXQgaGUgaGFzIHBlcmZlY3Qga25vd2xlZGdlIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgZm9yIHRoZSBhZHZhbnRhZ2Ugb2YgdGhlc2UgbWVuOyBhbmQgbm93IG9uIGhpcyBvd24gc29sZSBhdXRob3JpdHkgaGUKICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZXMgdGhhdCBoZSB3YXMgcHJlc2VudCB3aXRoIENyaXRvIHdoZW4gaGUgYm91Z2h0IHRoZSBob3VzZSBmcm9tIG1lLiBXaG8KICAgICAgICAgICAgICAgICAgICBhbW9uZyB5b3Ugd2lsbCBiZWxpZXZlIHRoaXM/IE5vdCBvbmUsIG9mIGNvdXJzZTsgZXNwZWNpYWxseSBzaW5jZSBJIGFtIG5vdCBub3cKICAgICAgICAgICAgICAgICAgICBzdWluZyBhYm91dCB0aGUgaG91c2UgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgQ3JpdG8gYm91Z2h0IGl0IG9yIG5vdCwgYnV0IGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlLXBvcnRpb24gd2hpY2gsIHNlZWluZyB0aGF0IG15IG1vdGhlciBicm91Z2h0IGl0IHdpdGggaGVyLCB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgdGhhdCBJIHNob3VsZCByZWNvdmVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['40.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIGFzIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHByb3ZlZCB0byB5b3UgYnkgYW4gYWJ1bmRhbmNlIG9mIHRlc3RpbW9ueSBhbmQgb2YgY2lyY3Vtc3RhbnRpYWwgZXZpZGVuY2UKICAgICAgICAgICAgICAgICAgICB0aGF0IG15IG1vdGhlciBkaWQgYnJpbmcgYSB0YWxlbnQgYXMgaGVyIGRvd3J5OyB0aGF0IEkgaGF2ZSBub3QgcmVjb3ZlcmVkIGl0CiAgICAgICAgICAgICAgICAgICAgZnJvbSBteSBmYXRoZXIncyBlc3RhdGU7IGFuZCB0aGF0IHRoZSBob3VzZSB3YXMgc2V0IGFwYXJ0IGJ5IHVzIHRvIHNlY3VyZSBpdHMKICAgICAgICAgICAgICAgICAgICBwYXltZW50OyBzbyBkbyB5b3UgZGVtYW5kIG9mIEJvZW90dXMgdGhhdCBoZSBwcm92ZSB0byB5b3UsIGVpdGhlciB0aGF0IEkgYW0gbm90CiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgdGhlIHRydXRoLCBvciB0aGF0IGl0IGlzIG5vdCByaWdodCB0aGF0IEkgc2hvdWxkIHJlY292ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UtcG9ydGlvbjsgZm9yIHRoZXNlIGFyZSB0aGUgcXVlc3Rpb25zIHJlZ2FyZGluZyB3aGljaCB5b3UgYXJlIG5vdyBnb2luZwogICAgICAgICAgICAgICAgICAgIHRvIGNhc3QgeW91ciB2b3Rlcy4gPC90cmFuc2xhdGlvbj4="
