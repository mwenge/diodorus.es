var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
translation['1.1'] = ""
translation['1.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgc2F5IHRob3NlIHRoaW5ncyBjb25jZXJuaW5nIHRoZSByZXB1YmxpYyB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgbXlzZWxmIGJvdW5kIHRvIHNheSBhdCB0aGUgcHJlc2VudCB0aW1lLCBJIHdpbGwgZXhwbGFpbiB0byB5b3UgYnJpZWZseSB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiBteSBkZXBhcnR1cmUgZnJvbSwgYW5kIG9mIG15IHJldHVybiB0byB0aGUgY2l0eS4gV2hlbiBJIGhvcGVkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMgd2FzIGF0IGxhc3QgcmVjYWxsZWQgdG8gYSBwcm9wZXIgcmVzcGVjdCBmb3IgeW91ciB3aXNkb20gYW5kIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5LCBJIHRob3VnaHQgdGhhdCBpdCBiZWNhbWUgbWUgdG8gcmVtYWluIGluIGEgc29ydCBvZiBzZW50aW5lbHNoaXAsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2FzIGltcG9zZWQgdXBvbiBtZSBieSBteSBwb3NpdGlvbiBhcyBhIHNlbmF0b3IgYW5kIGEgbWFuIG9mIGNvbnN1bGFyCiAgICAgICAgICAgICAgICAgICAgcmFuay4gTm9yIGRpZCBJIGRlcGFydCBhbnl3aGVyZSwgbm9yIGRpZCBJIGV2ZXIgdGFrZSBteSBleWVzIG9mZiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCBmcm9tIHRoZSBkYXkgb24gd2hpY2ggd2Ugd2VyZSBzdW1tb25lZCB0byBtZWV0IGluIHRoZSB0ZW1wbGUgb2YKICAgICAgICAgICAgICAgICAgICBUZWxsdXM7IDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIG1lZXRpbmcgdG9vayBwbGFjZSBvbiB0aGUgdGhpcmQgZGF5IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIENhZXNhcidzIGRlYXRoLjwvbm90ZT4gaW4gd2hpY2ggdGVtcGxlLCBJLCBhcyBmYXIgYXMgd2FzIGluIG15IHBvd2VyLCBsYWlkCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvdW5kYXRpb25zIG9mIHBlYWNlLCBhbmQgcmVuZXdlZCB0aGUgYW5jaWVudCBwcmVjZWRlbnQgc2V0IGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuczsgSSBldmVuIHVzZWQgdGhlIEdyZWVrIHdvcmQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj4qbWhcIG1uaHNpa2FrZWk9bjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICA8L25vdGU+d2hpY2ggdGhhdCBjaXR5IGVtcGxveWVkIGluIHRob3NlIHRpbWVzIGluIGFsbGF5aW5nIGRpc2NvcmRzLCBhbmQgZ2F2ZSBteQogICAgICAgICAgICAgICAgICAgIHZvdGUgdGhhdCBhbGwgcmVjb2xsZWN0aW9uIG9mIHRoZSBleGlzdGluZyBkaXNzZW5zaW9ucyBvdWdodCB0byBiZSBlZmZhY2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgZXZlcmxhc3Rpbmcgb2JsaXZpb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoaXMgbWVldGluZyB0b29rIHBsYWNlIG9uIHRoZSB0aGlyZCBkYXkgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgQ2Flc2FyJ3MgZGVhdGguPC9ub3RlPiBpbiB3aGljaCB0ZW1wbGUsIEksIGFzIGZhciBhcyB3YXMgaW4gbXkgcG93ZXIsIGxhaWQKICAgICAgICAgICAgICAgICAgICB0aGUgZm91bmRhdGlvbnMgb2YgcGVhY2UsIGFuZCByZW5ld2VkIHRoZSBhbmNpZW50IHByZWNlZGVudCBzZXQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zOyBJIGV2ZW4gdXNlZCB0aGUgR3JlZWsgd29yZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPiptaFwgbW5oc2lrYWtlaT1uPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgIDwvbm90ZT53aGljaCB0aGF0IGNpdHkgZW1wbG95ZWQgaW4gdGhvc2UgdGltZXMgaW4gYWxsYXlpbmcgZGlzY29yZHMsIGFuZCBnYXZlIG15CiAgICAgICAgICAgICAgICAgICAgdm90ZSB0aGF0IGFsbCByZWNvbGxlY3Rpb24gb2YgdGhlIGV4aXN0aW5nIGRpc3NlbnNpb25zIG91Z2h0IHRvIGJlIGVmZmFjZWQgYnkKICAgICAgICAgICAgICAgICAgICBldmVybGFzdGluZyBvYmxpdmlvbi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+Km1oXCBtbmhzaWtha2VpPW48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgb3JhdGlvbiB0aGVuIG1hZGUgYnkgTWFyY3VzIEFudG9uaXVzIHdhcyBhbiBhZG1pcmFibGUgb25lOyBoaXMgZGlzcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgdG9vLCBhcHBlYXJlZCBleGNlbGxlbnQ7IGFuZCBsYXN0bHksIGJ5IGhpcyBtZWFucyBhbmQgYnkgaGlzIHNvbnMnLCBwZWFjZSB3YXMKICAgICAgICAgICAgICAgICAgICByYXRpZmllZCB3aXRoIHRoZSBtb3N0IGlsbHVzdHJpb3VzIG9mIHRoZSBjaXRpemVuczsgYW5kIGV2ZXJ5dGhpbmcgZWxzZSB3YXMKICAgICAgICAgICAgICAgICAgICBjb25zaXN0ZW50IHdpdGggdGhpcyBiZWdpbm5pbmcuIEhlIGludml0ZWQgdGhlIGNoaWVmIG1lbiBvZiB0aGUgc3RhdGUgdG8gdGhvc2UKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRpb25zIHdoaWNoIGhlIGhlbGQgYXQgaGlzIG93biBob3VzZSBjb25jZXJuaW5nIHRoZSBzdGF0ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYzsgaGUgcmVmZXJyZWQgYWxsIHRoZSBtb3N0IGltcG9ydGFudCBtYXR0ZXJzIHRvIHRoaXMgb3JkZXIuIE5vdGhpbmcgd2FzCiAgICAgICAgICAgICAgICAgICAgYXQgdGhhdCB0aW1lIGZvdW5kIGFtb25nIHRoZSBwYXBlcnMgb2YgQ2FpdXMgQ2Flc2FyIGV4Y2VwdCB3aGF0IHdhcyBhbHJlYWR5IHdlbGwKICAgICAgICAgICAgICAgICAgICBrbm93biB0byBldmVyeWJvZHk7IGFuZCBoZSBnYXZlIGFuc3dlcnMgdG8gZXZlcnkgcXVlc3Rpb24gdGhhdCB3YXMgYXNrZWQgb2YgaGltCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgZ3JlYXRlc3QgY29uc2lzdGVuY3kuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBXZXJlIGFueSBleGlsZXMKICAgICAgICAgICAgICAgICAgICByZXN0b3JlZD8gSGUgc2FpZCB0aGF0IG9uZSB3YXMsIGFuZCBvbmx5IG9uZS4gV2VyZSBhbnkgaW1tdW5pdGllcyBncmFudGVkPyBIZQogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkLCBOb25lLiBIZSB3aXNoZWQgdXMgZXZlbiB0byBhZG9wdCB0aGUgcHJvcG9zaXRpb24gb2YgU2Vydml1cyBTdWxwaWNpdXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgdGhhdCBubyB0YWJsZXQgcHVycG9ydGluZyA8cGIgbj0iNCIgLz4gdG8gY29udGFpbiBhbnkKICAgICAgICAgICAgICAgICAgICBkZWNyZWUgb3IgZ3JhbnQgb2YgQ2Flc2FyJ3Mgc2hvdWxkIGJlIHB1Ymxpc2hlZCBhZnRlciB0aGUgSWRlcyBvZiBNYXJjaCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZXhwaXJlZC4gSSBwYXNzIG92ZXIgbWFueSBvdGhlciB0aGluZ3MsIGFsbCBleGNlbGxlbnTigJRmb3IgSSBhbQogICAgICAgICAgICAgICAgICAgIGhhc3RlbmluZyB0byBjb21lIHRvIGEgdmVyeSBleHRyYW9yZGluYXJ5IGFjdCBvZiB2aXJ0dWUgb2YgTWFyY3VzIEFudG9uaXVzLiBIZQogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgYWJvbGlzaGVkIGZyb20gdGhlIGNvbnN0aXR1dGlvbiBvZiB0aGUgcmVwdWJsaWMgdGhlIERpY3RhdG9yc2hpcCwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYWQgYnkgdGhpcyB0aW1lIGF0dGFpbmVkIHRvIHRoZSBhdXRob3JpdHkgb2YgcmVnYWwgcG93ZXIuIEFuZCB0aGF0IG1lYXN1cmUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGV2ZW4gb2ZmZXJlZCB0byB1cyBmb3IgZGlzY3Vzc2lvbi4gSGUgYnJvdWdodCB3aXRoIGhpbSBhIGRlY3JlZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUsIHJlYWR5IGRyYXduIHVwLCBvcmRlcmluZyB3aGF0IGhlIGNob3NlIHRvIGhhdmUgZG9uZTogYW5kIHdoZW4gaXQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiByZWFkLCB3ZSBhbGwgc3VibWl0dGVkIHRvIGhpcyBhdXRob3JpdHkgaW4gdGhlIG1hdHRlciB3aXRoIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGVhZ2VybmVzczsgYW5kLCBieSBhbm90aGVyIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSwgd2UgcmV0dXJuZWQgaGltIHRoYW5rcyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGhvbm91cmFibGUgYW5kIGNvbXBsaW1lbnRhcnkgbGFuZ3VhZ2UuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBXZXJlIGFueSBleGlsZXMKICAgICAgICAgICAgICAgICAgICByZXN0b3JlZD8gSGUgc2FpZCB0aGF0IG9uZSB3YXMsIGFuZCBvbmx5IG9uZS4gV2VyZSBhbnkgaW1tdW5pdGllcyBncmFudGVkPyBIZQogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkLCBOb25lLiBIZSB3aXNoZWQgdXMgZXZlbiB0byBhZG9wdCB0aGUgcHJvcG9zaXRpb24gb2YgU2Vydml1cyBTdWxwaWNpdXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgdGhhdCBubyB0YWJsZXQgcHVycG9ydGluZyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiAvPiB0byBjb250YWluIGFueQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBvciBncmFudCBvZiBDYWVzYXIncyBzaG91bGQgYmUgcHVibGlzaGVkIGFmdGVyIHRoZSBJZGVzIG9mIE1hcmNoIHdlcmUKICAgICAgICAgICAgICAgICAgICBleHBpcmVkLiBJIHBhc3Mgb3ZlciBtYW55IG90aGVyIHRoaW5ncywgYWxsIGV4Y2VsbGVudOKAlGZvciBJIGFtCiAgICAgICAgICAgICAgICAgICAgaGFzdGVuaW5nIHRvIGNvbWUgdG8gYSB2ZXJ5IGV4dHJhb3JkaW5hcnkgYWN0IG9mIHZpcnR1ZSBvZiBNYXJjdXMgQW50b25pdXMuIEhlCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJseSBhYm9saXNoZWQgZnJvbSB0aGUgY29uc3RpdHV0aW9uIG9mIHRoZSByZXB1YmxpYyB0aGUgRGljdGF0b3JzaGlwLCB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBieSB0aGlzIHRpbWUgYXR0YWluZWQgdG8gdGhlIGF1dGhvcml0eSBvZiByZWdhbCBwb3dlci4gQW5kIHRoYXQgbWVhc3VyZSB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZXZlbiBvZmZlcmVkIHRvIHVzIGZvciBkaXNjdXNzaW9uLiBIZSBicm91Z2h0IHdpdGggaGltIGEgZGVjcmVlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSwgcmVhZHkgZHJhd24gdXAsIG9yZGVyaW5nIHdoYXQgaGUgY2hvc2UgdG8gaGF2ZSBkb25lOiBhbmQgd2hlbiBpdCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHJlYWQsIHdlIGFsbCBzdWJtaXR0ZWQgdG8gaGlzIGF1dGhvcml0eSBpbiB0aGUgbWF0dGVyIHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgZWFnZXJuZXNzOyBhbmQsIGJ5IGFub3RoZXIgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlLCB3ZSByZXR1cm5lZCBoaW0gdGhhbmtzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgaG9ub3VyYWJsZSBhbmQgY29tcGxpbWVudGFyeSBsYW5ndWFnZS4gPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBuZXcgbGlnaHQsIGFzIGl0IHdlcmUsIHNlZW1lZCB0byBiZSBicm91Z2h0IG92ZXIgdXMsIG5vdyB0aGF0IG5vdCBvbmx5IHRoZQogICAgICAgICAgICAgICAgICAgIGtpbmdseSBwb3dlciB3aGljaCB3ZSBoYWQgZW5kdXJlZCwgYnV0IGFsbCBmZWFyIG9mIHN1Y2ggcG93ZXIgZm9yIHRoZSBmdXR1cmUsCiAgICAgICAgICAgICAgICAgICAgd2FzIHRha2VuIGF3YXkgZnJvbSB1czsgYW5kIGEgZ3JlYXQgcGxlZGdlIGFwcGVhcmVkIHRvIGhhdmUgYmVlbiBnaXZlbiBieSBoaW0gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMgdGhhdCBoZSBkaWQgd2lzaCB0aGUgY2l0eSB0byBiZSBmcmVlLCB3aGVuIGhlIHV0dGVybHkgYWJvbGlzaGVkIG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByZXB1YmxpYyB0aGUgbmFtZSBvZiBkaWN0YXRvciwgd2hpY2ggaGFkIG9mdGVuIGJlZW4gYSBsZWdpdGltYXRlIHRpdGxlLAogICAgICAgICAgICAgICAgICAgIG9uIGFjY291bnQgb2Ygb3VyIGxhdGUgcmVjb2xsZWN0aW9uIG9mIGEgcGVycGV0dWFsIGRpY3RhdG9yc2hpcC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+IEEgZmV3IGRheXMgYWZ0ZXJ3YXJkcyB0aGUgc2VuYXRlIHdhcyBkZWxpdmVyZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBkYW5nZXIgb2YgYmxvb2RzaGVkLCBhbmQgYSBob29rPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgaG9vayB3YXMgdG8gZHJhZyBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FyY2FzcyBhbG9uZyB0aGUgc3RyZWV0cyB0byB0aHJvdyBpdCBpbnRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEzMDc4NiIga2V5PSJ0Z24sMTEzMDc4NiI+VGliZXI8L3BsYWNlTmFtZT4uIFNvIEp1dmVuYWwgc2F5c+KAlDxxdW90ZSBsYW5nPSJsYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bD7igJxTZWphbnVzIGR1Y2l0dXIgdW5jbzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsPlNwZWN0YW5kdXMu4oCdPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPuKAlDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJKdXYuIDEwLjY2IiB2YWxpZD0ieWVzIj54LiA2NjwvYmlibD4uPC9ub3RlPndhcyBmaXhlZCBpbnRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBydW5hd2F5IHNsYXZlIHdobyBoYWQgdXN1cnBlZCB0aGUgbmFtZSBvZiBDYWl1cyBNYXJpdXMuIEFuZCBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICB0aGluZ3MgaGUgZGlkIGluIGNvbmNlcnQgd2l0aCBoaXMgY29sbGVhZ3VlLiBTb21lIG90aGVyIHRoaW5ncyB0aGF0IHdlcmUgZG9uZQogICAgICAgICAgICAgICAgICAgIHdlcmUgdGhlIGFjdHMgb2YgRG9sYWJlbGxhIGFsb25lOyBidXQgaWYgaGlzIGNvbGxlYWd1ZSBoYWQgbm90IGJlZW4gYWJzZW50LAogICAgICAgICAgICAgICAgICAgIHdvdWxkLCBJIGJlbGlldmUsIGhhdmUgYmVlbiBkb25lIGJ5IGJvdGggb2YgdGhlbSBpbiBjb25jZXJ0LiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBBIGZldyBkYXlzIGFmdGVyd2FyZHMgdGhlIHNlbmF0ZSB3YXMgZGVsaXZlcmVkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZGFuZ2VyIG9mIGJsb29kc2hlZCwgYW5kIGEgaG9vazxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgaG9vayB3YXMgdG8gZHJhZyBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FyY2FzcyBhbG9uZyB0aGUgc3RyZWV0cyB0byB0aHJvdyBpdCBpbnRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEzMDc4NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTMwNzg2Ij5UaWJlcjwvcGxhY2VOYW1lPi4gU28gSnV2ZW5hbCBzYXlz4oCUPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj7igJxTZWphbnVzIGR1Y2l0dXIgdW5jbzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3BlY3RhbmR1cy7igJ08L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+4oCUPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSnV2LiAxMC42NiIgdmFsaWQ9InllcyI+eC4gNjY8L2JpYmw+Ljwvbm90ZT53YXMgZml4ZWQgaW50bwogICAgICAgICAgICAgICAgICAgIHRoYXQgcnVuYXdheSBzbGF2ZSB3aG8gaGFkIHVzdXJwZWQgdGhlIG5hbWUgb2YgQ2FpdXMgTWFyaXVzLiBBbmQgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIGhlIGRpZCBpbiBjb25jZXJ0IHdpdGggaGlzIGNvbGxlYWd1ZS4gU29tZSBvdGhlciB0aGluZ3MgdGhhdCB3ZXJlIGRvbmUKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZSBhY3RzIG9mIERvbGFiZWxsYSBhbG9uZTsgYnV0IGlmIGhpcyBjb2xsZWFndWUgaGFkIG5vdCBiZWVuIGFic2VudCwKICAgICAgICAgICAgICAgICAgICB3b3VsZCwgSSBiZWxpZXZlLCBoYXZlIGJlZW4gZG9uZSBieSBib3RoIG9mIHRoZW0gaW4gY29uY2VydC4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMzA3ODYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEzMDc4NiI+VGliZXI8L3BsYWNlTmFtZT4uIFNvIEp1dmVuYWwgc2F5c+KAlDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcU2VqYW51cyBkdWNpdHVyIHVuY288L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNwZWN0YW5kdXMu4oCdPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPuKAlDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcU2VqYW51cyBkdWNpdHVyIHVuY288L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNwZWN0YW5kdXMu4oCdPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJKdXYuIDEwLjY2IiB2YWxpZD0ieWVzIj54LiA2NjwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3Igd2hlbiBlbm9ybW91cyBldmlsIHdhcyBpbnNpbnVhdGluZyBpdHNlbGYgaW50byB0aGUgcmVwdWJsaWMsIGFuZCB3YXMgZ2FpbmluZwogICAgICAgICAgICAgICAgICAgIG1vcmUgc3RyZW5ndGggZGF5IGJ5IGRheTsgYW5kIHdoZW4gdGhlIHNhbWUgbWVuIHdlcmUgZXJlY3RpbmcgYSB0b21iPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoaXMgcmVmZXJzIHRvIGEgcGlsbGFyIHRoYXQgd2FzIHJhaXNlZCBpbiB0aGUgZm9ydW0gaW4KICAgICAgICAgICAgICAgICAgICAgICAgaG9ub3VyIG9mIENhZXNhciwgd2l0aCB0aGUgaW5zY3JpcHRpb24sIOKAnFRvIHRoZSBGYXRoZXIgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW50cnku4oCdPC9ub3RlPmluIHRoZSBmb3J1bSwgd2hvIGhhZCBwZXJmb3JtZWQgdGhhdCBpcnJlZ3VsYXIKICAgICAgICAgICAgICAgICAgICBmdW5lcmFsOyBhbmQgd2hlbiBhYmFuZG9uZWQgbWVuLCB3aXRoIHNsYXZlcyBsaWtlIHRoZW1zZWx2ZXMsIHdlcmUgZXZlcnkgZGF5CiAgICAgICAgICAgICAgICAgICAgdGhyZWF0ZW5pbmcgd2l0aCBtb3JlIGFuZCBtb3JlIHZlaGVtZW5jZSBhbGwgdGhlIGhvdXNlcyBhbmQgdGVtcGxlcyBvZiB0aGUgY2l0eTsKICAgICAgICAgICAgICAgICAgICBzbyBzZXZlcmUgd2FzIHRoZSByaWdvdXIgb2YgRG9sYWJlbGxhLCBub3Qgb25seSB0b3dhcmRzIHRoZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiAvPgogICAgICAgICAgICAgICAgICAgIGF1ZGFjaW91cyBhbmQgd2lja2VkIHNsYXZlcywgYnV0IGFsc28gdG93YXJkcyB0aGUgcHJvZmxpZ2F0ZSBhbmQgdW5wcmluY2lwbGVkCiAgICAgICAgICAgICAgICAgICAgZnJlZW1lbiwgYW5kIHNvIHByb21wdCB3YXMgaGlzIG92ZXJ0aHJvdyBvZiB0aGF0IGFjY3Vyc2VkIHBpbGxhcjsgdGhhdCBpdCBzZWVtcwogICAgICAgICAgICAgICAgICAgIG1hcnZlbGxvdXMgdG8gbWUgdGhhdCB0aGUgc3Vic2VxdWVudCB0aW1lIGhhcyBiZWVuIHNvIGRpZmZlcmVudCBmcm9tIHRoYXQgb25lCiAgICAgICAgICAgICAgICAgICAgZGF5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyByZWZlcnMgdG8gYSBwaWxsYXIgdGhhdCB3YXMgcmFpc2VkIGluIHRoZSBmb3J1bSBpbgogICAgICAgICAgICAgICAgICAgICAgICBob25vdXIgb2YgQ2Flc2FyLCB3aXRoIHRoZSBpbnNjcmlwdGlvbiwg4oCcVG8gdGhlIEZhdGhlciBvZiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRyeS7igJ08L25vdGU+aW4gdGhlIGZvcnVtLCB3aG8gaGFkIHBlcmZvcm1lZCB0aGF0IGlycmVndWxhcgogICAgICAgICAgICAgICAgICAgIGZ1bmVyYWw7IGFuZCB3aGVuIGFiYW5kb25lZCBtZW4sIHdpdGggc2xhdmVzIGxpa2UgdGhlbXNlbHZlcywgd2VyZSBldmVyeSBkYXkKICAgICAgICAgICAgICAgICAgICB0aHJlYXRlbmluZyB3aXRoIG1vcmUgYW5kIG1vcmUgdmVoZW1lbmNlIGFsbCB0aGUgaG91c2VzIGFuZCB0ZW1wbGVzIG9mIHRoZSBjaXR5OwogICAgICAgICAgICAgICAgICAgIHNvIHNldmVyZSB3YXMgdGhlIHJpZ291ciBvZiBEb2xhYmVsbGEsIG5vdCBvbmx5IHRvd2FyZHMgdGhlIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIC8+CiAgICAgICAgICAgICAgICAgICAgYXVkYWNpb3VzIGFuZCB3aWNrZWQgc2xhdmVzLCBidXQgYWxzbyB0b3dhcmRzIHRoZSBwcm9mbGlnYXRlIGFuZCB1bnByaW5jaXBsZWQKICAgICAgICAgICAgICAgICAgICBmcmVlbWVuLCBhbmQgc28gcHJvbXB0IHdhcyBoaXMgb3ZlcnRocm93IG9mIHRoYXQgYWNjdXJzZWQgcGlsbGFyOyB0aGF0IGl0IHNlZW1zCiAgICAgICAgICAgICAgICAgICAgbWFydmVsbG91cyB0byBtZSB0aGF0IHRoZSBzdWJzZXF1ZW50IHRpbWUgaGFzIGJlZW4gc28gZGlmZmVyZW50IGZyb20gdGhhdCBvbmUKICAgICAgICAgICAgICAgICAgICBkYXkuIDwvdHJhbnNsYXRpb24+"
translation['1.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIGJlaG9sZCwgb24gdGhlIGZpcnN0IG9mIEp1bmUsIG9uIHdoaWNoIGRheSB0aGV5IGhhZCBnaXZlbiBub3RpY2UgdGhhdCB3ZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWxsIHRvIGF0dGVuZCB0aGUgc2VuYXRlLCBldmVyeXRoaW5nIHdhcyBjaGFuZ2VkLiBOb3RoaW5nIHdhcyBkb25lIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSwgYnV0IG1hbnkgYW5kIGltcG9ydGFudCBtZWFzdXJlcyB3ZXJlIHRyYW5zYWN0ZWQgYnkgdGhlIGFnZW5jeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIHRob3VnaCB0aGF0IHBlb3BsZSB3YXMgYm90aCBhYnNlbnQgYW5kIGRpc2FwcHJvdmluZy4gVGhlIGNvbnN1bHMgZWxlY3QKICAgICAgICAgICAgICAgICAgICBzYWlkLCB0aGF0IHRoZXkgZGlkIG5vdCBkYXJlIHRvIGNvbWUgaW50byB0aGUgc2VuYXRlLiBUaGUgbGliZXJhdG9ycyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvdW50cnkgd2VyZSBhYnNlbnQgZnJvbSB0aGF0IGNpdHkgZnJvbSB0aGUgbmVjayBvZiB3aGljaCB0aGV5IGhhZCByZW1vdmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHlva2Ugb2Ygc2xhdmVyeTsgdGhvdWdoIHRoZSB2ZXJ5IGNvbnN1bHMgdGhlbXNlbHZlcyBwcm9mZXNzZWQgdG8gcHJhaXNlIHRoZW0gaW4KICAgICAgICAgICAgICAgICAgICB0aGVpciBwdWJsaWMgaGFyYW5ndWVzIGFuZCBpbiBhbGwgdGhlaXIgY29udmVyc2F0aW9uLiBUaG9zZSB3aG8gd2VyZSBjYWxsZWQKICAgICAgICAgICAgICAgICAgICBWZXRlcmFucywgbWVuIG9mIHdob3NlIHNhZmV0eSB0aGlzIG9yZGVyIGhhZCBiZWVuIG1vc3QgcGFydGljdWxhcmx5IGNhcmVmdWwsCiAgICAgICAgICAgICAgICAgICAgd2VyZSBpbnN0aWdhdGVkIG5vdCB0byB0aGUgcHJlc2VydmF0aW9uIG9mIHRob3NlIHRoaW5ncyB3aGljaCB0aGV5IGhhZCwgYnV0IHRvCiAgICAgICAgICAgICAgICAgICAgY2hlcmlzaCBob3BlcyBvZiBuZXcgYm9vdHkuIEFuZCBhcyBJIHByZWZlcnJlZCBoZWFyaW5nIG9mIHRob3NlIHRoaW5ncyB0byBzZWVpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtLCBhbmQgYXMgSSBoYWQgYW4gaG9ub3JhcnkgY29tbWlzc2lvbiBhcyBsaWV1dGVuYW50LCBJIHdlbnQgYXdheSwgaW50ZW5kaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgcHJlc2VudCBvbiB0aGUgZmlyc3Qgb2YgSmFudWFyeSwgd2hpY2ggYXBwZWFyZWQgbGlrZWx5IHRvIGJlIHRoZSBmaXJzdCBkYXkKICAgICAgICAgICAgICAgICAgICBvZiBhc3NlbWJsaW5nIHRoZSBzZW5hdGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBoYXZlIG5vdyBleHBsYWluZWQgdG8geW91LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBteSBkZXNpZ24gaW4gbGVhdmluZyB0aGUgY2l0eS4KICAgICAgICAgICAgICAgICAgICBOb3cgSSB3aWxsIGJyaWVmbHkgc2V0IGJlZm9yZSB5b3U7IGFsc28sIG15IGludGVudGlvbiBpbiByZXR1cm5pbmcsIHdoaWNoIG1heQogICAgICAgICAgICAgICAgICAgIHBlcmhhcHMgYXBwZWFyIG1vcmUgdW5hY2NvdW50YWJsZS4gQXMgSSBoYWQgYXZvaWRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4sIGFuZCB0aGUgb3JkaW5hcnkgcm91dGUgaW50bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIG5vdCB3aXRob3V0IGdvb2QgcmVhc29uLCBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBvZiBBdWd1c3QgSSBhcnJpdmVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3lyYWN1c2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN5cmFjdXNlIj5TeXJhY3VzZTwvcGxhY2VOYW1lPiwgYmVjYXVzZSB0aGUgcGFzc2FnZSBmcm9tIHRoYXQgY2l0eSBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3YXMgc2FpZCB0byBiZSBhIGdvb2Qgb25lLiBBbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGNpdHksIHdpdGggd2hpY2ggSSBoYWQgc28gaW50aW1hdGUgYSBjb25uZWN0aW9uLCBjb3VsZCBub3QsIHRob3VnaCBpdCB3YXMgdmVyeQogICAgICAgICAgICAgICAgICAgIGVhZ2VyIHRvIGRvIHNvLCBkZXRhaW4gbWUgbW9yZSB0aGFuIG9uZSBuaWdodC4gSSB3YXMgYWZyYWlkIHRoYXQgbXkgc3VkZGVuCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCBhbW9uZyBteSBmcmllbmRzIG1pZ2h0IGNhdXNlIHNvbWUgc3VzcGljaW9uIGlmIEkgcmVtYWluZWQgdGhlcmUgYXQgYWxsLgogICAgICAgICAgICAgICAgICAgIEJ1dCBhZnRlciB0aGUgd2luZHMgaGFkIGRyaXZlbiBtZSwgb24gbXkgZGVwYXJ0dXJlIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+LCB0byBMZXVjb3BldHJhLCB3aGljaCBpcyBhIHByb21vbnRvcnkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgUmhlZ2lhbiBkaXN0cmljdCwgSSB3ZW50IHVwIHRoZSBndWxmIGZyb20gdGhhdCBwb2ludCwgd2l0aCB0aGUgdmlldyBvZgogICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nIG92ZXIuIEFuZCBJIGhhZCBub3QgYWR2YW5jZWQgZmFyIGJlZm9yZSBJIHdhcyBkcml2ZW4gYmFjayBieSBhIGZvdWwKICAgICAgICAgICAgICAgICAgICB3aW5kIHRvIHRoZSB2ZXJ5IHBsYWNlIHdoaWNoIEkgaGFkIGp1c3QgcXVpdHRlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhcyB0aGUgbmlnaHQgd2FzIHN0b3JteSwgYW5kIGFzIEkgaGFkIGxvZGdlZCB0aGF0IG5pZ2h0IGluIHRoZSB2aWxsYSBvZgogICAgICAgICAgICAgICAgICAgIFB1YmxpdXMgVmFsZXJpdXMsIG15IGNvbXBhbmlvbiBhbmQgaW50aW1hdGUgZnJpZW5kLCBhbmQgYXMgSSByZW1haW5lZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgbmV4dCBkYXkgYXQgaGlzIGhvdXNlIHdhaXRpbmcgZm9yIGEgPHBiIG49IjYiIC8+IGZhaXIgd2luZCwgbWFueSBvZiB0aGUgY2l0aXplbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbXVuaWNpcGFsaXR5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0Mjk2IiBrZXk9InRnbiw3MDA0Mjk2Ij5SaGVnaXVtPC9wbGFjZU5hbWU+IGNhbWUgdG8KICAgICAgICAgICAgICAgICAgICBtZS4gQW5kIG9mIHRoZW0gdGhlcmUgd2VyZSBzb21lIHdobyBoYWQgbGF0ZWx5IGFycml2ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+OyBmcm9tIHRoZW0gSSBmaXJzdCBoZWFyZCBvZiB0aGUgaGFyYW5ndWUKICAgICAgICAgICAgICAgICAgICBvZiBNYXJjdXMgQW50b25pdXMsIHdpdGggd2hpY2ggSSB3YXMgc28gbXVjaCBwbGVhc2VkIHRoYXQsIGFmdGVyIEkgaGFkIHJlYWQgaXQsCiAgICAgICAgICAgICAgICAgICAgSSBiZWdhbiBmb3IgdGhlIGZpcnN0IHRpbWUgdG8gdGhpbmsgb2YgcmV0dXJuaW5nLiBBbmQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyB0aGUKICAgICAgICAgICAgICAgICAgICBlZGljdCBvZiBCcnV0dXMgYW5kIENhc3NpdXMgaXMgYnJvdWdodCB0byBtZTsgd2hpY2ggKHBlcmhhcHMgYmVjYXVzZSBJIGxvdmUKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4sIGV2ZW4gbW9yZSBmb3IgdGhlIHNha2Ugb2YgdGhlIHJlcHVibGljIHRoYW4gb2YgbXkgb3duIGZyaWVuZHNoaXAgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlbSkgYXBwZWFyZWQgdG8gbWUsIGluZGVlZCwgdG8gYmUgZnVsbCBvZiBlcXVpdHkuIFRoZXkgYWRkZWQgYmVzaWRlcywgKGZvciBpdAogICAgICAgICAgICAgICAgICAgIGlzIGEgdmVyeSBjb21tb24gdGhpbmcgZm9yIHRob3NlIHdobyBhcmUgZGVzaXJvdXMgb2YgYnJpbmdpbmcgZ29vZCBuZXdzIHRvCiAgICAgICAgICAgICAgICAgICAgaW52ZW50IHNvbWV0aGluZyB0byBtYWtlIHRoZSBuZXdzIHdoaWNoIHRoZXkgYnJpbmcgc2VlbSBtb3JlIGpveWZ1bCwpIHRoYXQKICAgICAgICAgICAgICAgICAgICBwYXJ0aWVzIHdlcmUgY29taW5nIHRvIGFuIGFncmVlbWVudDsgdGhhdCB0aGUgc2VuYXRlIHdhcyB0byBtZWV0IG9uIHRoZSBmaXJzdCBvZgogICAgICAgICAgICAgICAgICAgIEF1Z3VzdDsgdGhhdCBBbnRvbml1cyBoYXZpbmcgZGlzY2FyZGVkIGFsbCBldmlsIGNvdW5zZWxvcnMsIGFuZCBoYXZpbmcgZ2l2ZW4gdXAKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmluY2VzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCB3YXMgYWJvdXQgdG8KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8gc3VibWlzc2lvbiB0byB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUuIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+LCBhbmQgdGhlIG9yZGluYXJ5IHJvdXRlIGludG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBub3Qgd2l0aG91dCBnb29kIHJlYXNvbiwgb24KICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3Qgb2YgQXVndXN0IEkgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFN5cmFjdXNlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTeXJhY3VzZSI+U3lyYWN1c2U8L3BsYWNlTmFtZT4sIGJlY2F1c2UgdGhlIHBhc3NhZ2UgZnJvbSB0aGF0IGNpdHkgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gd2FzIHNhaWQgdG8gYmUgYSBnb29kIG9uZS4gQW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBjaXR5LCB3aXRoIHdoaWNoIEkgaGFkIHNvIGludGltYXRlIGEgY29ubmVjdGlvbiwgY291bGQgbm90LCB0aG91Z2ggaXQgd2FzIHZlcnkKICAgICAgICAgICAgICAgICAgICBlYWdlciB0byBkbyBzbywgZGV0YWluIG1lIG1vcmUgdGhhbiBvbmUgbmlnaHQuIEkgd2FzIGFmcmFpZCB0aGF0IG15IHN1ZGRlbgogICAgICAgICAgICAgICAgICAgIGFycml2YWwgYW1vbmcgbXkgZnJpZW5kcyBtaWdodCBjYXVzZSBzb21lIHN1c3BpY2lvbiBpZiBJIHJlbWFpbmVkIHRoZXJlIGF0IGFsbC4KICAgICAgICAgICAgICAgICAgICBCdXQgYWZ0ZXIgdGhlIHdpbmRzIGhhZCBkcml2ZW4gbWUsIG9uIG15IGRlcGFydHVyZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwgdG8gTGV1Y29wZXRyYSwgd2hpY2ggaXMgYSBwcm9tb250b3J5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFJoZWdpYW4gZGlzdHJpY3QsIEkgd2VudCB1cCB0aGUgZ3VsZiBmcm9tIHRoYXQgcG9pbnQsIHdpdGggdGhlIHZpZXcgb2YKICAgICAgICAgICAgICAgICAgICBjcm9zc2luZyBvdmVyLiBBbmQgSSBoYWQgbm90IGFkdmFuY2VkIGZhciBiZWZvcmUgSSB3YXMgZHJpdmVuIGJhY2sgYnkgYSBmb3VsCiAgICAgICAgICAgICAgICAgICAgd2luZCB0byB0aGUgdmVyeSBwbGFjZSB3aGljaCBJIGhhZCBqdXN0IHF1aXR0ZWQuIDwvdHJhbnNsYXRpb24+"
translation['1.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgYXMgdGhlIG5pZ2h0IHdhcyBzdG9ybXksIGFuZCBhcyBJIGhhZCBsb2RnZWQgdGhhdCBuaWdodCBpbiB0aGUgdmlsbGEgb2YKICAgICAgICAgICAgICAgICAgICBQdWJsaXVzIFZhbGVyaXVzLCBteSBjb21wYW5pb24gYW5kIGludGltYXRlIGZyaWVuZCwgYW5kIGFzIEkgcmVtYWluZWQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIG5leHQgZGF5IGF0IGhpcyBob3VzZSB3YWl0aW5nIGZvciBhIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIC8+IGZhaXIgd2luZCwgbWFueSBvZiB0aGUgY2l0aXplbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbXVuaWNpcGFsaXR5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0Mjk2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQyOTYiPlJoZWdpdW08L3BsYWNlTmFtZT4gY2FtZSB0bwogICAgICAgICAgICAgICAgICAgIG1lLiBBbmQgb2YgdGhlbSB0aGVyZSB3ZXJlIHNvbWUgd2hvIGhhZCBsYXRlbHkgYXJyaXZlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPjsgZnJvbSB0aGVtIEkgZmlyc3QgaGVhcmQgb2YgdGhlIGhhcmFuZ3VlCiAgICAgICAgICAgICAgICAgICAgb2YgTWFyY3VzIEFudG9uaXVzLCB3aXRoIHdoaWNoIEkgd2FzIHNvIG11Y2ggcGxlYXNlZCB0aGF0LCBhZnRlciBJIGhhZCByZWFkIGl0LAogICAgICAgICAgICAgICAgICAgIEkgYmVnYW4gZm9yIHRoZSBmaXJzdCB0aW1lIHRvIHRoaW5rIG9mIHJldHVybmluZy4gQW5kIG5vdCBsb25nIGFmdGVyd2FyZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgZWRpY3Qgb2YgQnJ1dHVzIGFuZCBDYXNzaXVzIGlzIGJyb3VnaHQgdG8gbWU7IHdoaWNoIChwZXJoYXBzIGJlY2F1c2UgSSBsb3ZlCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgbWVuLCBldmVuIG1vcmUgZm9yIHRoZSBzYWtlIG9mIHRoZSByZXB1YmxpYyB0aGFuIG9mIG15IG93biBmcmllbmRzaGlwIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW0pIGFwcGVhcmVkIHRvIG1lLCBpbmRlZWQsIHRvIGJlIGZ1bGwgb2YgZXF1aXR5LiBUaGV5IGFkZGVkIGJlc2lkZXMsIChmb3IgaXQKICAgICAgICAgICAgICAgICAgICBpcyBhIHZlcnkgY29tbW9uIHRoaW5nIGZvciB0aG9zZSB3aG8gYXJlIGRlc2lyb3VzIG9mIGJyaW5naW5nIGdvb2QgbmV3cyB0bwogICAgICAgICAgICAgICAgICAgIGludmVudCBzb21ldGhpbmcgdG8gbWFrZSB0aGUgbmV3cyB3aGljaCB0aGV5IGJyaW5nIHNlZW0gbW9yZSBqb3lmdWwsKSB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGFydGllcyB3ZXJlIGNvbWluZyB0byBhbiBhZ3JlZW1lbnQ7IHRoYXQgdGhlIHNlbmF0ZSB3YXMgdG8gbWVldCBvbiB0aGUgZmlyc3Qgb2YKICAgICAgICAgICAgICAgICAgICBBdWd1c3Q7IHRoYXQgQW50b25pdXMgaGF2aW5nIGRpc2NhcmRlZCBhbGwgZXZpbCBjb3Vuc2Vsb3JzLCBhbmQgaGF2aW5nIGdpdmVuIHVwCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3ZpbmNlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCB3YXMgYWJvdXQgdG8KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8gc3VibWlzc2lvbiB0byB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUuIDwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IG9uIHRoaXMgSSB3YXMgaW5mbGFtZWQgd2l0aCBzdWNoIGVhZ2VybmVzcyB0byByZXR1cm4sIHRoYXQgbm8gb2FycyBvciB3aW5kcwogICAgICAgICAgICAgICAgICAgIGNvdWxkIGJlIGZhc3QgZW5vdWdoIGZvciBtZTsgbm90IHRoYXQgSSB0aG91Z2h0IHRoYXQgSSBzaG91bGQgbm90IGFycml2ZSBpbgogICAgICAgICAgICAgICAgICAgIHRpbWUsIGJ1dCBsZXN0IEkgc2hvdWxkIGJlIGxhdGVyIHRoYW4gSSB3aXNoZWQgaW4gY29uZ3JhdHVsYXRpbmcgdGhlIHJlcHVibGljOwogICAgICAgICAgICAgICAgICAgIGFuZCBJIHF1aWNrbHkgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbGlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZWxpYSI+VmVsaWE8L3BsYWNlTmFtZT4sIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgSSBzYXcgQnJ1dHVzOyBob3cgZ3JpZXZlZCBJIHdhcywgSSBjYW5ub3QgZXhwcmVzcy4gRm9yIGl0IHNlZW1lZCB0byBiZSBhCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0YWJsZSB0aGluZyBmb3IgbWUgbXlzZWxmLCB0aGF0IEkgc2hvdWxkIHZlbnR1cmUgdG8gcmV0dXJuIGludG8gdGhhdAogICAgICAgICAgICAgICAgICAgIGNpdHkgZnJvbSB3aGljaCBCcnV0dXMgd2FzIGRlcGFydGluZywgYW5kIHRoYXQgSSBzaG91bGQgYmUgd2lsbGluZyB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgc2FmZWx5IGluIGEgcGxhY2Ugd2hlcmUgaGUgY291bGQgbm90LiBCdXQgaGUgaGltc2VsZiB3YXMgbm90IGFnaXRhdGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgbWFubmVyIHRoYXQgSSB3YXM7IGZvciwgYmVpbmcgZWxldmF0ZWQgd2l0aCB0aGUgY29uc2Npb3VzbmVzcyBvZiBoaXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBhbmQgZ2xvcmlvdXMgZXhwbG9pdCwgaGUgaGFkIG5vIGNvbXBsYWludHMgdG8gbWFrZSBvZiB3aGF0IGhhZCBiZWZhbGxlbiBoaW0sCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGxhbWVudGVkIHlvdXIgZmF0ZSBleGNlZWRpbmdseS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgZnJvbSBoaW0gdGhhdCBJIGZpcnN0IGhlYXJkIHdoYXQgaGFkIGJlZW4gdGhlIGxhbmd1YWdlIG9mIEx1Y2l1cyBQaXNvLCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUgb2YgQXVndXN0OyB3aG8sIGFsdGhvdWdoIGhlIHdhcyBidXQgbGl0dGxlIGFzc2lzdGVkIChmb3IgdGhhdCBJIGhlYXJkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBCcnV0dXMgaGltc2VsZikgYnkgdGhvc2Ugd2hvIG91Z2h0IHRvIGhhdmUgc2Vjb25kZWQgaGltLCBzdGlsbCBhY2NvcmRpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgdGVzdGltb255IG9mIEJydXR1cywgKGFuZCB3aGF0IGV2aWRlbmNlIGNhbiBiZSBtb3JlIHRydXN0d29ydGh5PykgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGF2b3dhbCBvZiBldmVyeSBvbmUgd2hvbSBJIHNhdyBhZnRlcndhcmRzLCBhcHBlYXJlZCB0byBtZSB0byBoYXZlIGdhaW5lZCBncmVhdAogICAgICAgICAgICAgICAgICAgIGNyZWRpdC4gSSBoYXN0ZW5lZCBoaXRoZXIsIHRoZXJlZm9yZSwgaW4gb3JkZXIgdGhhdCBhcyB0aG9zZSB3aG8gd2VyZSBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBzZWNvbmRlZCBoaW0sIEkgbWlnaHQgZG8gc287IG5vdCB3aXRoIHRoZSBob3BlIG9mIGRvaW5nIGFueSBnb29kLCBmb3IgSQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgaG9wZWQgZm9yIHRoYXQsIG5vciBkaWQgSSB3ZWxsIHNlZSBob3cgaXQgd2FzIHBvc3NpYmxlOyBidXQgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGlmIGFueXRoaW5nIDxwYiBuPSI3IiAvPiBoYXBwZW5lZCB0byBtZSwgKGFuZCBtYW55IHRoaW5ncyBhcHBlYXJlZCB0byBiZQogICAgICAgICAgICAgICAgICAgIHRocmVhdGVuaW5nIG1lIG91dCBvZiB0aGUgcmVndWxhciBjb3Vyc2Ugb2YgbmF0dXJlLCBhbmQgZXZlbiBvZiBkZXN0aW55LCkgSQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHN0aWxsIGxlYXZlIG15IHNwZWVjaCBvbiB0aGlzIGRheSBhcyBhIHdpdG5lc3MgdG8gdGhlIHJlcHVibGljIG9mIG15CiAgICAgICAgICAgICAgICAgICAgZXZlcmxhc3RpbmcgYXR0YWNobWVudCB0byBpdHMgaW50ZXJlc3RzLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbGlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZWxpYSI+VmVsaWE8L3BsYWNlTmFtZT4sIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgSSBzYXcgQnJ1dHVzOyBob3cgZ3JpZXZlZCBJIHdhcywgSSBjYW5ub3QgZXhwcmVzcy4gRm9yIGl0IHNlZW1lZCB0byBiZSBhCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0YWJsZSB0aGluZyBmb3IgbWUgbXlzZWxmLCB0aGF0IEkgc2hvdWxkIHZlbnR1cmUgdG8gcmV0dXJuIGludG8gdGhhdAogICAgICAgICAgICAgICAgICAgIGNpdHkgZnJvbSB3aGljaCBCcnV0dXMgd2FzIGRlcGFydGluZywgYW5kIHRoYXQgSSBzaG91bGQgYmUgd2lsbGluZyB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgc2FmZWx5IGluIGEgcGxhY2Ugd2hlcmUgaGUgY291bGQgbm90LiBCdXQgaGUgaGltc2VsZiB3YXMgbm90IGFnaXRhdGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgbWFubmVyIHRoYXQgSSB3YXM7IGZvciwgYmVpbmcgZWxldmF0ZWQgd2l0aCB0aGUgY29uc2Npb3VzbmVzcyBvZiBoaXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBhbmQgZ2xvcmlvdXMgZXhwbG9pdCwgaGUgaGFkIG5vIGNvbXBsYWludHMgdG8gbWFrZSBvZiB3aGF0IGhhZCBiZWZhbGxlbiBoaW0sCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGxhbWVudGVkIHlvdXIgZmF0ZSBleGNlZWRpbmdseS4gPC90cmFuc2xhdGlvbj4="
translation['1.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kCiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIGZyb20gaGltIHRoYXQgSSBmaXJzdCBoZWFyZCB3aGF0IGhhZCBiZWVuIHRoZSBsYW5ndWFnZSBvZiBMdWNpdXMgUGlzbywgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlIG9mIEF1Z3VzdDsgd2hvLCBhbHRob3VnaCBoZSB3YXMgYnV0IGxpdHRsZSBhc3Npc3RlZCAoZm9yIHRoYXQgSSBoZWFyZAogICAgICAgICAgICAgICAgICAgIGZyb20gQnJ1dHVzIGhpbXNlbGYpIGJ5IHRob3NlIHdobyBvdWdodCB0byBoYXZlIHNlY29uZGVkIGhpbSwgc3RpbGwgYWNjb3JkaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlc3RpbW9ueSBvZiBCcnV0dXMsIChhbmQgd2hhdCBldmlkZW5jZSBjYW4gYmUgbW9yZSB0cnVzdHdvcnRoeT8pIGFuZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhdm93YWwgb2YgZXZlcnkgb25lIHdob20gSSBzYXcgYWZ0ZXJ3YXJkcywgYXBwZWFyZWQgdG8gbWUgdG8gaGF2ZSBnYWluZWQgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBjcmVkaXQuIEkgaGFzdGVuZWQgaGl0aGVyLCB0aGVyZWZvcmUsIGluIG9yZGVyIHRoYXQgYXMgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGhhZCBub3Qgc2Vjb25kZWQgaGltLCBJIG1pZ2h0IGRvIHNvOyBub3Qgd2l0aCB0aGUgaG9wZSBvZiBkb2luZyBhbnkgZ29vZCwgZm9yIEkKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIGhvcGVkIGZvciB0aGF0LCBub3IgZGlkIEkgd2VsbCBzZWUgaG93IGl0IHdhcyBwb3NzaWJsZTsgYnV0IGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpZiBhbnl0aGluZyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiAvPiBoYXBwZW5lZCB0byBtZSwgKGFuZCBtYW55IHRoaW5ncyBhcHBlYXJlZCB0byBiZQogICAgICAgICAgICAgICAgICAgIHRocmVhdGVuaW5nIG1lIG91dCBvZiB0aGUgcmVndWxhciBjb3Vyc2Ugb2YgbmF0dXJlLCBhbmQgZXZlbiBvZiBkZXN0aW55LCkgSQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHN0aWxsIGxlYXZlIG15IHNwZWVjaCBvbiB0aGlzIGRheSBhcyBhIHdpdG5lc3MgdG8gdGhlIHJlcHVibGljIG9mIG15CiAgICAgICAgICAgICAgICAgICAgZXZlcmxhc3RpbmcgYXR0YWNobWVudCB0byBpdHMgaW50ZXJlc3RzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gU2luY2UsIHRoZW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgdHJ1c3QKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSByZWFzb24gb2YgbXkgYWRvcHRpbmcgZWFjaCBkZXRlcm1pbmF0aW9uIGFwcGVhcnMgcHJhaXNld29ydGh5IHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgSSBiZWdpbiB0byBzcGVhayBvZiB0aGUgcmVwdWJsaWMsIEkgd2lsbCBtYWtlIGEgYnJpZWYgY29tcGxhaW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluanVyeSB3aGljaCBNYXJjdXMgQW50b25pdXMgZGlkIG1lIHllc3RlcmRheTsgdG8gd2hvbSBJIGFtIGZyaWVuZGx5LCBhbmQgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYXQgYWxsIHRpbWVzIGFkbWl0dGVkIGhhdmluZyByZWNlaXZlZCBzb21lIHNlcnZpY2VzIGZyb20gaGltIHdoaWNoIG1ha2UgaXQgbXkKICAgICAgICAgICAgICAgICAgICBkdXR5IHRvIGJlIHNvLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gU2luY2UsIHRoZW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgdHJ1c3QKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSByZWFzb24gb2YgbXkgYWRvcHRpbmcgZWFjaCBkZXRlcm1pbmF0aW9uIGFwcGVhcnMgcHJhaXNld29ydGh5IHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgSSBiZWdpbiB0byBzcGVhayBvZiB0aGUgcmVwdWJsaWMsIEkgd2lsbCBtYWtlIGEgYnJpZWYgY29tcGxhaW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluanVyeSB3aGljaCBNYXJjdXMgQW50b25pdXMgZGlkIG1lIHllc3RlcmRheTsgdG8gd2hvbSBJIGFtIGZyaWVuZGx5LCBhbmQgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYXQgYWxsIHRpbWVzIGFkbWl0dGVkIGhhdmluZyByZWNlaXZlZCBzb21lIHNlcnZpY2VzIGZyb20gaGltIHdoaWNoIG1ha2UgaXQgbXkKICAgICAgICAgICAgICAgICAgICBkdXR5IHRvIGJlIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCByZWFzb24gaGFkIGhlIHRoZW4gZm9yIGVuZGVhdm91cmluZywgd2l0aCBzdWNoIGJpdHRlciBob3N0aWxpdHksIHRvIGZvcmNlIG1lCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgc2VuYXRlIHllc3RlcmRheT8gV2FzIEkgdGhlIG9ubHkgcGVyc29uIHdobyB3YXMgYWJzZW50PyBIYXZlIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICByZXBlYXRlZGx5IGhhZCB0aGlubmVyIGhvdXNlcyB0aGFuIHllc3RlcmRheT8gT3Igd2FzIGEgbWF0dGVyIG9mIHN1Y2ggaW1wb3J0YW5jZQogICAgICAgICAgICAgICAgICAgIHVuZGVyIGRpc2N1c3Npb24sIHRoYXQgaXQgd2FzIGRlc2lyYWJsZSBmb3IgZXZlbiBzaWNrIG1lbiB0byBiZSBicm91Z2h0IGRvd24/CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMDc5ODc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIwNzk4NzkiPkhhbm5pYmFsPC9wbGFjZU5hbWU+LCBJIHN1cHBvc2UsIHdhcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBnYXRlcywgb3IgdGhlcmUgd2FzIHRvIGJlIGEgZGViYXRlIGFib3V0IHBlYWNlIHdpdGggUHlycmh1cywgb24gd2hpY2ggb2NjYXNpb24KICAgICAgICAgICAgICAgICAgICBpdCBpcyByZWxhdGVkIHRoYXQgZXZlbiB0aGUgZ3JlYXQgQXBwaXVzLCBvbGQgYW5kIGJsaW5kIGFzIGhlIHdhcywgd2FzIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBkb3duIHRvIHRoZSBzZW5hdGUtaG91c2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgd2FzIGEgbW90aW9uCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgbWFkZSBhYm91dCBzb21lIHN1cHBsaWNhdGlvbnM7IGEga2luZCBvZiBtZWFzdXJlIHdoZW4gc2VuYXRvcnMgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgIHVzdWFsbHkgd2FudGluZzsgZm9yIHRoZXkgYXJlIHVuZGVyIHRoZSBjb21wdWxzaW9uLCBub3Qgb2YgcGxlZGdlcywgYnV0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZSBvZiB0aG9zZSBtZW4gd2hvc2UgaG9ub3VyIGlzIGJlaW5nIGNvbXBsaW1lbnRlZDsgYW5kIHRoZSBjYXNlIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgd2hlbiB0aGUgbW90aW9uIGhhcyByZWZlcmVuY2UgdG8gYSB0cml1bXBoLiBUaGUgY29uc3VscyBhcmUgc28gZnJlZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYW54aWV0eSBhdCB0aGVzZSB0aW1lcywgdGhhdCBpdCBpcyBhbG1vc3QgZW50aXJlbHkgZnJlZSBmb3IgYSBzZW5hdG9yIHRvIGFic2VudAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaWYgaGUgcGxlYXNlcy4gQW5kIGFzIHRoZSBnZW5lcmFsIGN1c3RvbSBvZiBvdXIgYm9keSB3YXMgd2VsbCBrbm93biB0bwogICAgICAgICAgICAgICAgICAgIG1lLCBhbmQgYXMgSSB3YXMgaGFyZGx5IHJlY292ZXJlZCBmcm9tIHRoZSBmYXRpZ3VlIG9mIG15IGpvdXJuZXksIGFuZCB3YXMgdmV4ZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIG15c2VsZiwgSSBzZW50IGEgbWFuIHRvIGhpbSwgb3V0IG9mIHJlZ2FyZCBmb3IgbXkgZnJpZW5kc2hpcCB0byBoaW0sIHRvCiAgICAgICAgICAgICAgICAgICAgdGVsbCBoaW0gdGhhdCBJIHNob3VsZCBub3QgYmUgdGhlcmUuIEJ1dCBoZSwgaW4gdGhlIGhlYXJpbmcgb2YgeW91IGFsbCwgZGVjbGFyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdvdWxkIGNvbWUgd2l0aCBtYXNvbnMgdG8gbXkgaG91c2U7IHRoaXMgd2FzIHNhaWQgd2l0aCB0b28gbXVjaCBwYXNzaW9uCiAgICAgICAgICAgICAgICAgICAgYW5kIHZlcnkgaW50ZW1wZXJhdGVseS4gRm9yLCBmb3Igd2hhdCBjcmltZSBpcyB0aGVyZSBzdWNoIGEgaGVhdnkgcHVuaXNobWVudAogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBhcyB0aGF0LCB0aGF0IGFueSBvbmUgc2hvdWxkIHZlbnR1cmUgdG8gc2F5IGluIHRoaXMgYXNzZW1ibHkgdGhhdCBoZSwKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBhc3Npc3RhbmNlIG9mIGEgbG90IG9mIGNvbW1vbiBvcGVyYXRpdmVzLCB3b3VsZCBwdWxsIGRvd24gYSBob3VzZSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGJ1aWx0IGF0IHRoZSBwdWJsaWMgZXhwZW5zZSBpbiBhY2NvcmRhbmNlIHdpdGggYSB2b3RlIG9mIHRoZSBzZW5hdGUuCiAgICAgICAgICAgICAgICAgICAgQW5kIHdobyBldmVyIGVtcGxveWVkIHN1Y2ggY29tcHVsc2lvbiBhcyB0aGUgdGhyZWF0IG9mIHN1Y2ggYW4gaW5qdXJ5IGFzIHRoYXQgdG8KICAgICAgICAgICAgICAgICAgICBhIHNlbmF0b3I/IG9yIHdoYXQgc2V2ZXJlciBwdW5pc2htZW50IGhhcyBldmVyIGJlZW4gPHBiIG49IjgiIC8+IGltcG9zZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgYWJzZW5jZSB0aGFuIHRoZSBmb3JmZWl0dXJlIG9mIGEgcGxlZGdlLCBvciBhIGZpbmU/IEJ1dCBpZiBoZSBoYWQga25vd24gd2hhdAogICAgICAgICAgICAgICAgICAgIG9waW5pb24gSSBzaG91bGQgaGF2ZSBkZWxpdmVyZWQgb24gdGhlIHN1YmplY3QsIGhlIHdvdWxkIGhhdmUgcmVtaXR0ZWQgc29tZXdoYXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmlnb3VyIG9mIGhpcyBjb21wdWxzaW9uLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjA3OTg3OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMDc5ODc5Ij5IYW5uaWJhbDwvcGxhY2VOYW1lPiwgSSBzdXBwb3NlLCB3YXMgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZXMsIG9yIHRoZXJlIHdhcyB0byBiZSBhIGRlYmF0ZSBhYm91dCBwZWFjZSB3aXRoIFB5cnJodXMsIG9uIHdoaWNoIG9jY2FzaW9uCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgcmVsYXRlZCB0aGF0IGV2ZW4gdGhlIGdyZWF0IEFwcGl1cywgb2xkIGFuZCBibGluZCBhcyBoZSB3YXMsIHdhcyBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgZG93biB0byB0aGUgc2VuYXRlLWhvdXNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgd2FzIGEgbW90aW9uCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgbWFkZSBhYm91dCBzb21lIHN1cHBsaWNhdGlvbnM7IGEga2luZCBvZiBtZWFzdXJlIHdoZW4gc2VuYXRvcnMgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgIHVzdWFsbHkgd2FudGluZzsgZm9yIHRoZXkgYXJlIHVuZGVyIHRoZSBjb21wdWxzaW9uLCBub3Qgb2YgcGxlZGdlcywgYnV0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZSBvZiB0aG9zZSBtZW4gd2hvc2UgaG9ub3VyIGlzIGJlaW5nIGNvbXBsaW1lbnRlZDsgYW5kIHRoZSBjYXNlIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgd2hlbiB0aGUgbW90aW9uIGhhcyByZWZlcmVuY2UgdG8gYSB0cml1bXBoLiBUaGUgY29uc3VscyBhcmUgc28gZnJlZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYW54aWV0eSBhdCB0aGVzZSB0aW1lcywgdGhhdCBpdCBpcyBhbG1vc3QgZW50aXJlbHkgZnJlZSBmb3IgYSBzZW5hdG9yIHRvIGFic2VudAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaWYgaGUgcGxlYXNlcy4gQW5kIGFzIHRoZSBnZW5lcmFsIGN1c3RvbSBvZiBvdXIgYm9keSB3YXMgd2VsbCBrbm93biB0bwogICAgICAgICAgICAgICAgICAgIG1lLCBhbmQgYXMgSSB3YXMgaGFyZGx5IHJlY292ZXJlZCBmcm9tIHRoZSBmYXRpZ3VlIG9mIG15IGpvdXJuZXksIGFuZCB3YXMgdmV4ZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIG15c2VsZiwgSSBzZW50IGEgbWFuIHRvIGhpbSwgb3V0IG9mIHJlZ2FyZCBmb3IgbXkgZnJpZW5kc2hpcCB0byBoaW0sIHRvCiAgICAgICAgICAgICAgICAgICAgdGVsbCBoaW0gdGhhdCBJIHNob3VsZCBub3QgYmUgdGhlcmUuIEJ1dCBoZSwgaW4gdGhlIGhlYXJpbmcgb2YgeW91IGFsbCwgZGVjbGFyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdvdWxkIGNvbWUgd2l0aCBtYXNvbnMgdG8gbXkgaG91c2U7IHRoaXMgd2FzIHNhaWQgd2l0aCB0b28gbXVjaCBwYXNzaW9uCiAgICAgICAgICAgICAgICAgICAgYW5kIHZlcnkgaW50ZW1wZXJhdGVseS4gRm9yLCBmb3Igd2hhdCBjcmltZSBpcyB0aGVyZSBzdWNoIGEgaGVhdnkgcHVuaXNobWVudAogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBhcyB0aGF0LCB0aGF0IGFueSBvbmUgc2hvdWxkIHZlbnR1cmUgdG8gc2F5IGluIHRoaXMgYXNzZW1ibHkgdGhhdCBoZSwKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBhc3Npc3RhbmNlIG9mIGEgbG90IG9mIGNvbW1vbiBvcGVyYXRpdmVzLCB3b3VsZCBwdWxsIGRvd24gYSBob3VzZSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGJ1aWx0IGF0IHRoZSBwdWJsaWMgZXhwZW5zZSBpbiBhY2NvcmRhbmNlIHdpdGggYSB2b3RlIG9mIHRoZSBzZW5hdGUuCiAgICAgICAgICAgICAgICAgICAgQW5kIHdobyBldmVyIGVtcGxveWVkIHN1Y2ggY29tcHVsc2lvbiBhcyB0aGUgdGhyZWF0IG9mIHN1Y2ggYW4gaW5qdXJ5IGFzIHRoYXQgdG8KICAgICAgICAgICAgICAgICAgICBhIHNlbmF0b3I/IG9yIHdoYXQgc2V2ZXJlciBwdW5pc2htZW50IGhhcyBldmVyIGJlZW4gPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgLz4gaW1wb3NlZCBmb3IKICAgICAgICAgICAgICAgICAgICBhYnNlbmNlIHRoYW4gdGhlIGZvcmZlaXR1cmUgb2YgYSBwbGVkZ2UsIG9yIGEgZmluZT8gQnV0IGlmIGhlIGhhZCBrbm93biB3aGF0CiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBJIHNob3VsZCBoYXZlIGRlbGl2ZXJlZCBvbiB0aGUgc3ViamVjdCwgaGUgd291bGQgaGF2ZSByZW1pdHRlZCBzb21ld2hhdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByaWdvdXIgb2YgaGlzIGNvbXB1bHNpb24uIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkRvIHlvdSB0aGluaywgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCBJIHdvdWxkIGhhdmUgdm90ZWQgZm9yIHRoZSByZXNvbHV0aW9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IGFkb3B0ZWQgYWdhaW5zdCB5b3VyIG93biB3aWxscywgb2YgbWluZ2xpbmcgZnVuZXJhbCBvYnNlcXVpZXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHN1cHBsaWNhdGlvbnM/IG9mIGludHJvZHVjaW5nIGluZXhwbGljYWJsZSBpbXBpZXR5IGludG8gdGhlIHJlcHVibGljPyBvZgogICAgICAgICAgICAgICAgICAgIGRlY3JlZWluZyBzdXBwbGljYXRpb25zIGluIGhvbm91ciBvZiBhIGRlYWQgbWFuPyBJIHNheSBub3RoaW5nIGFib3V0IHdobyB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2FzLiBFdmVuIGhhZCBoZSBiZWVuIHRoYXQgZ3JlYXQgTHVjaXVzIEJydXR1cyB3aG8gaGltc2VsZiBhbHNvIGRlbGl2ZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBmcm9tIGtpbmdseSBwb3dlciwgYW5kIHdobyBoYXMgcHJvZHVjZWQgcG9zdGVyaXR5IG5lYXJseSBmaXZlIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICB5ZWFycyBhZnRlciBoaW1zZWxmIG9mIHNpbWlsYXIgdmlydHVlLCBhbmQgZXF1YWwgdG8gc2ltaWxhcgogICAgICAgICAgICAgICAgICAgIGFjaGlldmVtZW50c+KAlGV2ZW4gdGhlbiBJIGNvdWxkIG5vdCBoYXZlIGJlZW4gaW5kdWNlZCB0byBqb2luIGFueSBkZWFkCiAgICAgICAgICAgICAgICAgICAgbWFuIGluIGEgcmVsaWdpb3VzIG9ic2VydmFuY2UgcGFpZCB0byB0aGUgaW1tb3J0YWwgZ29kczsgc28gdGhhdCBhIHN1cHBsaWNhdGlvbgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBhZGRyZXNzZWQgYnkgcHVibGljIGF1dGhvcml0eSB0byBhIG1hbiB3aG8gaGFzIG5vd2hlcmUgYSBzZXB1bGNoZXIgYXQKICAgICAgICAgICAgICAgICAgICB3aGljaCBmdW5lcmFsIG9ic2VxdWllcyBtYXkgYmUgY2VsZWJyYXRlZC4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBzaG91bGQgaGF2ZSBkZWxpdmVyZWQgbXkgb3Bpbmlvbiwgd2hpY2ggSSBjb3VsZCBlYXNpbHkKICAgICAgICAgICAgICAgICAgICBoYXZlIGRlZmVuZGVkIGFnYWluc3QgdGhlIFJvbWFuIHBlb3BsZSwgaWYgYW55IGhlYXZ5IG1pc2ZvcnR1bmUgaGFkIGhhcHBlbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljLCBzdWNoIGFzIHdhciwgb3IgcGVzdGlsZW5jZSwgb3IgZmFtaW5lOyBzb21lIG9mIHdoaWNoLCBpbmRlZWQsIGRvCiAgICAgICAgICAgICAgICAgICAgZXhpc3QgYWxyZWFkeSwgYW5kIEkgaGF2ZSBteSBmZWFycyBsZXN0IG90aGVycyBhcmUgaW1wZW5kaW5nLiBCdXQgSSBwcmF5IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgaW1tb3J0YWwgZ29kcyBtYXkgcGFyZG9uIHRoaXMgYWN0LCBib3RoIHRvIHRoZSBSb21hbiBwZW9wbGUsIHdoaWNoIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZSBvZiBpdCwgYW5kIHRvIHRoaXMgb3JkZXIsIHdoaWNoIHZvdGVkIGl0IHdpdGggZ3JlYXQgdW53aWxsaW5nbmVzcy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyBtYXkgSSBub3Qgc3BlYWsgb2YgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgbWlzZm9ydHVuZXMgb2YgdGhlIHJlcHVibGljP+KAlEF0IGFsbCBldmVudHMgaXQgaXMgaW4gbXkgcG93ZXIsIGFuZCBpdAogICAgICAgICAgICAgICAgICAgIGFsd2F5cyB3aWxsIGJlIGluIG15IHBvd2VyLCB0byB1cGhvbGQgbXkgb3duIGRpZ25pdHkgYW5kIHRvIGRlc3Bpc2UgZGVhdGguIExldAogICAgICAgICAgICAgICAgICAgIG1lIGhhdmUgb25seSB0aGUgcG93ZXIgdG8gY29tZSBpbnRvIHRoaXMgaG91c2UsIGFuZCBJIHdpbGwgbmV2ZXIgc2hyaW5rIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyIG9yIGRlY2xhcmluZyBteSBvcGluaW9uISA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdD8gbWF5IEkgbm90IHNwZWFrIG9mIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIG1pc2ZvcnR1bmVzIG9mIHRoZSByZXB1YmxpYz/igJRBdCBhbGwgZXZlbnRzIGl0IGlzIGluIG15IHBvd2VyLCBhbmQgaXQKICAgICAgICAgICAgICAgICAgICBhbHdheXMgd2lsbCBiZSBpbiBteSBwb3dlciwgdG8gdXBob2xkIG15IG93biBkaWduaXR5IGFuZCB0byBkZXNwaXNlIGRlYXRoLiBMZXQKICAgICAgICAgICAgICAgICAgICBtZSBoYXZlIG9ubHkgdGhlIHBvd2VyIHRvIGNvbWUgaW50byB0aGlzIGhvdXNlLCBhbmQgSSB3aWxsIG5ldmVyIHNocmluayBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGRhbmdlciBvciBkZWNsYXJpbmcgbXkgb3BpbmlvbiEgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdvdWxkIHRoYXQgSSBoYWQgYmVlbiBhYmxlIHRvIGJlIHByZXNlbnQgb24gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgb2YgQXVndXN0OyBub3QgdGhhdCBJIHNob3VsZCBoYXZlIGJlZW4gYWJsZSB0byBkbyBhbnkgZ29vZCwgYnV0IHRvIHByZXZlbnQgYW55CiAgICAgICAgICAgICAgICAgICAgb25lIHNheWluZyB0aGF0IG5vdCBubyBzZW5hdG9yIG9mIGNvbnN1bGFyIHJhbmsgKGFzIHdhcyB0aGUgY2FzZSB0aGVuKSB3YXMgZm91bmQKICAgICAgICAgICAgICAgICAgICB3b3J0aHkgb2YgdGhhdCBob25vdXIgYW5kIHdvcnRoeSBvZiB0aGUgcmVwdWJsaWMuIEFuZCB0aGlzIGNpcmN1bXN0YW5jZSBpbmRlZWQKICAgICAgICAgICAgICAgICAgICBnaXZlcyBtZSBncmVhdCBwYWluLCB0aGF0IG1lbiB3aG8gaGF2ZSBlbmpveWVkIHRoZSBtb3N0IGhvbm91cmFibGUgZGlzdGluY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIFJvbWFuIHBlb3BsZSBjYW4gY29uZmVyOyBkaWQgbm90IHNlY29uZCBMdWNpdXMgUGlzbywgdGhlIHByb3Bvc2VyIG9mCiAgICAgICAgICAgICAgICAgICAgYW4gZXhjZWxsZW50IG9waW5pb24uIElzIGl0IGZvciB0aGlzIHRoYXQgdGhlIFJvbWFuIHBlb3BsZSBtYWRlIHVzIGNvbnN1bHMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgYmVpbmcgcGxhY2VkIG9uIHRoZSBsb2Z0aWVzdCBhbmQgbW9zdCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiAvPiBob25vdXJhYmxlIHN0ZXAgb2YKICAgICAgICAgICAgICAgICAgICBkaWduaXR5LCB3ZSBzaG91bGQgY29uc2lkZXIgdGhlIHJlcHVibGljIG9mIG5vIGltcG9ydGFuY2U/IE5vdCBvbmx5IGRpZCBubwogICAgICAgICAgICAgICAgICAgIHNpbmdsZSBtYW4gb2YgY29uc3VsYXIgZGlnbml0eSBpbmRpY2F0ZSBoaXMgYWdyZWVtZW50IHdpdGggTHVjaXVzIFBpc28gYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgdm9pY2UsIGJ1dCB0aGV5IGRpZCBub3QgdmVudHVyZSBldmVuIHRvIGxvb2sgYXMgaWYgdGhleSBhZ3JlZWQgd2l0aCBoaW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCwgaW4gdGhlIG5hbWUgb2YgYWxsIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBob3JyaWJsZSwgaXMgdGhlIG1lYW5pbmcgb2YgdGhpcyB2b2x1bnRhcnkgc2xhdmVyeT/igJRTb21lIHN1Ym1pc3Npb24KICAgICAgICAgICAgICAgICAgICBtYXkgaGF2ZSBiZWVuIHVuYXZvaWRhYmxlOiBub3IgZG8gSSByZXF1aXJlIHRoaXMgZnJvbSBldmVyeSBvbmUgb2YgdGhlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBkZWxpdmVyIHRoZWlyIG9waW5pb25zIGZyb20gdGhlIGNvbnN1bGFyIGJlbmNoOyB0aGUgY2FzZSBvZiB0aG9zZSBtZW4gd2hvc2UKICAgICAgICAgICAgICAgICAgICBzaWxlbmNlIEkgcGFyZG9uIGlzIGRpZmZlcmVudCBmcm9tIHRoYXQgb2YgdGhvc2Ugd2hvc2UgZXhwcmVzc2lvbiBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMgSSByZXF1aXJlOyBhbmQgSSBkbyBncmlldmUgdGhhdCB0aG9zZSBtZW4gaGF2ZSBmYWxsZW4gdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VzcGljaW9uIG9mIHRoZSBSb21hbiBwZW9wbGUsIG5vdCBvbmx5IGFzIGJlaW5nIGFmcmFpZCzigJR3aGljaCBvZgogICAgICAgICAgICAgICAgICAgIGl0c2VsZiB3b3VsZCBiZSBzaGFtZWZ1bCBlbm91Z2gs4oCUYnV0IGFzIGhhdmluZyBkaWZmZXJlbnQgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGNhdXNlcyBmb3IgYmVpbmcgd2FudGluZyB0byB0aGVpciBwcm9wZXIgZGlnbml0eS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIC8+IGhvbm91cmFibGUgc3RlcCBvZgogICAgICAgICAgICAgICAgICAgIGRpZ25pdHksIHdlIHNob3VsZCBjb25zaWRlciB0aGUgcmVwdWJsaWMgb2Ygbm8gaW1wb3J0YW5jZT8gTm90IG9ubHkgZGlkIG5vCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIG1hbiBvZiBjb25zdWxhciBkaWduaXR5IGluZGljYXRlIGhpcyBhZ3JlZW1lbnQgd2l0aCBMdWNpdXMgUGlzbyBieSBoaXMKICAgICAgICAgICAgICAgICAgICB2b2ljZSwgYnV0IHRoZXkgZGlkIG5vdCB2ZW50dXJlIGV2ZW4gdG8gbG9vayBhcyBpZiB0aGV5IGFncmVlZCB3aXRoIGhpbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCwgaW4gdGhlIG5hbWUgb2YgYWxsIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBob3JyaWJsZSwgaXMgdGhlIG1lYW5pbmcgb2YgdGhpcyB2b2x1bnRhcnkgc2xhdmVyeT/igJRTb21lIHN1Ym1pc3Npb24KICAgICAgICAgICAgICAgICAgICBtYXkgaGF2ZSBiZWVuIHVuYXZvaWRhYmxlOiBub3IgZG8gSSByZXF1aXJlIHRoaXMgZnJvbSBldmVyeSBvbmUgb2YgdGhlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBkZWxpdmVyIHRoZWlyIG9waW5pb25zIGZyb20gdGhlIGNvbnN1bGFyIGJlbmNoOyB0aGUgY2FzZSBvZiB0aG9zZSBtZW4gd2hvc2UKICAgICAgICAgICAgICAgICAgICBzaWxlbmNlIEkgcGFyZG9uIGlzIGRpZmZlcmVudCBmcm9tIHRoYXQgb2YgdGhvc2Ugd2hvc2UgZXhwcmVzc2lvbiBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMgSSByZXF1aXJlOyBhbmQgSSBkbyBncmlldmUgdGhhdCB0aG9zZSBtZW4gaGF2ZSBmYWxsZW4gdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VzcGljaW9uIG9mIHRoZSBSb21hbiBwZW9wbGUsIG5vdCBvbmx5IGFzIGJlaW5nIGFmcmFpZCzigJR3aGljaCBvZgogICAgICAgICAgICAgICAgICAgIGl0c2VsZiB3b3VsZCBiZSBzaGFtZWZ1bCBlbm91Z2gs4oCUYnV0IGFzIGhhdmluZyBkaWZmZXJlbnQgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGNhdXNlcyBmb3IgYmVpbmcgd2FudGluZyB0byB0aGVpciBwcm9wZXIgZGlnbml0eS4gPC90cmFuc2xhdGlvbj4="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBpbiB0aGUgZmlyc3QgcGxhY2UsIEkgYm90aCBmZWVsIGFuZCBhY2tub3dsZWRnZSBncmVhdCBvYmxpZ2F0aW9ucyB0bwogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBQaXNvLCB3aG8gY29uc2lkZXJlZCBub3Qgd2hhdCBoZSB3YXMgYWJsZSB0byBlZmZlY3QgaW4gdGhlIHJlcHVibGljLCBidXQKICAgICAgICAgICAgICAgICAgICB3aGF0IGl0IHdhcyBoaXMgb3duIGR1dHkgdG8gZG87IGFuZCwgaW4gdGhlIG5leHQgcGxhY2UsIEkgZW50cmVhdCBvZiB5b3UsIE8KICAgICAgICAgICAgICAgICAgICBjb25zY3JpcHQgZmF0aGVycywgZXZlbiBpZiB5b3UgaGF2ZSBub3QgcXVpdGUgdGhlIGNvdXJhZ2UgdG8gYWdyZWUgd2l0aCBteQogICAgICAgICAgICAgICAgICAgIHNwZWVjaCBhbmQgdG8gYWRvcHQgbXkgYWR2aWNlLCBhdCBhbGwgZXZlbnRzIHRvIGxpc3RlbiB0byBtZSB3aXRoIGtpbmRuZXNzIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgYWx3YXlzIGhpdGhlcnRvIGRvbmUuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0aGUgZmlyc3QgcGxhY2UsIHRoZW4sIEkgZGVjbGFyZSBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb24gdGhhdCB0aGUgYWN0cyBvZiBDYWVzYXIgb3VnaHQgdG8gYmUgbWFpbnRhaW5lZDogbm90IHRoYXQgSSBhcHByb3ZlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgKGZvciB3aG8gaW5kZWVkIGNhbiBkbyB0aGF0PykgYnV0IGJlY2F1c2UgSSB0aGluayB0aGF0IHdlIG91Z2h0IGFib3ZlIGFsbAogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB0byBoYXZlIHJlZ2FyZCB0byBwZWFjZSBhbmQgdHJhbnF1aWxsaXR5LiBJIHdpc2ggdGhhdCBBbnRvbml1cyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd2VyZSBwcmVzZW50LCBwcm92aWRlZCBoZSBoYWQgbm8gYWR2b2NhdGVzIHdpdGggaGltLiBCdXQgSSBzdXBwb3NlIGhlIG1heSBiZQogICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgdG8gZmVlbCB1bndlbGwsIGEgcHJpdmlsZWdlIHdoaWNoIGhlIHJlZnVzZWQgdG8gYWxsb3cgbWUgeWVzdGVyZGF5LiBIZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRoZW4gZXhwbGFpbiB0byBtZSwgb3IgcmF0aGVyIHRvIHlvdSwgTyBjb25zY3JpcHQgZmF0aGVycywgdG8gd2hhdCBleHRlbnQKICAgICAgICAgICAgICAgICAgICBoZSBoaW1zZWxmIGRlZmVuZGVkIHRoZSBhY3RzIG9mIENhZXNhci4gQXJlIGFsbCB0aGUgYWN0cyBvZiBDYWVzYXIgd2hpY2ggbWF5CiAgICAgICAgICAgICAgICAgICAgZXhpc3QgaW4gdGhlIGJpdHMgb2Ygbm90ZS1ib29rcywgYW5kIG1lbW9yYW5kYSwgYW5kIGxvb3NlIHBhcGVycywgcHJvZHVjZWQgb24KICAgICAgICAgICAgICAgICAgICBoaXMgc2luZ2xlIGF1dGhvcml0eSwgYW5kIGluZGVlZCBub3QgZXZlbiBwcm9kdWNlZCwgYnV0IG9ubHkgcmVjaXRlZCwgdG8gYmUKICAgICAgICAgICAgICAgICAgICByYXRpZmllZD8gQW5kIHNoYWxsIHRoZSBhY3RzIHdoaWNoIGhlIGNhdXNlZCB0byBiZSBlbmdyYXZlZCBvbiBicmFzcywgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBkZWNsYXJlZCB0aGF0IHRoZSBlZGljdHMgYW5kIGxhd3MgcGFzc2VkIGJ5IHRoZSBwZW9wbGUgd2VyZSB2YWxpZCBmb3IgZXZlciwKICAgICAgICAgICAgICAgICAgICBiZSBjb25zaWRlcmVkIGFzIG9mIG5vIHBvd2VyPyA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBJIHRoaW5rLAogICAgICAgICAgICAgICAgICAgIGluZGVlZCwgdGhhdCB0aGVyZSBpcyBub3RoaW5nIHNvIHdlbGwgZW50aXRsZWQgdG8gYmUgY2FsbGVkIHRoZSBhY3RzIG9mIENhZXNhcgogICAgICAgICAgICAgICAgICAgIGFzIENhZXNhcidzIGxhd3MuIFN1cHBvc2UgaGUgZ2F2ZSBhbnkgb25lIGEgcHJvbWlzZSwgaXMgdGhhdCB0byBiZSByYXRpZmllZCwKICAgICAgICAgICAgICAgICAgICBldmVuIGlmIGl0IHdlcmUgYSBwcm9taXNlIHRoYXQgPHBiIG49IjEwIiAvPiBoZSBoaW1zZWxmIHdhcyB1bmFibGUgdG8gcGVyZm9ybT8KICAgICAgICAgICAgICAgICAgICBBcywgaW4gZmFjdCwgaGUgaGFzIGZhaWxlZCB0byBwZXJmb3JtIG1hbnkgcHJvbWlzZXMgbWFkZSB0byBtYW55IHBlb3BsZS4gQW5kIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBtYW55IG1vcmUgb2YgdGhvc2UgcHJvbWlzZXMgaGF2ZSBiZWVuIGZvdW5kIHNpbmNlIGhpcyBkZWF0aCwgdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgYWxsIHRoZSBzZXJ2aWNlcyB3aGljaCBoZSBjb25mZXJyZWQgb24gYW5kIGRpZCB0byBwZW9wbGUgZHVyaW5nIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSB5ZWFycyB0aGF0IGhlIHdhcyBhbGl2ZSB3b3VsZCBhbW91bnQgdG8uIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdGhlIGZpcnN0IHBsYWNlLCB0aGVuLCBJIGRlY2xhcmUgbXkKICAgICAgICAgICAgICAgICAgICBvcGluaW9uIHRoYXQgdGhlIGFjdHMgb2YgQ2Flc2FyIG91Z2h0IHRvIGJlIG1haW50YWluZWQ6IG5vdCB0aGF0IEkgYXBwcm92ZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZW07IChmb3Igd2hvIGluZGVlZCBjYW4gZG8gdGhhdD8pIGJ1dCBiZWNhdXNlIEkgdGhpbmsgdGhhdCB3ZSBvdWdodCBhYm92ZSBhbGwKICAgICAgICAgICAgICAgICAgICB0aGluZ3MgdG8gaGF2ZSByZWdhcmQgdG8gcGVhY2UgYW5kIHRyYW5xdWlsbGl0eS4gSSB3aXNoIHRoYXQgQW50b25pdXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHdlcmUgcHJlc2VudCwgcHJvdmlkZWQgaGUgaGFkIG5vIGFkdm9jYXRlcyB3aXRoIGhpbS4gQnV0IEkgc3VwcG9zZSBoZSBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBhbGxvd2VkIHRvIGZlZWwgdW53ZWxsLCBhIHByaXZpbGVnZSB3aGljaCBoZSByZWZ1c2VkIHRvIGFsbG93IG1lIHllc3RlcmRheS4gSGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCB0aGVuIGV4cGxhaW4gdG8gbWUsIG9yIHJhdGhlciB0byB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvIHdoYXQgZXh0ZW50CiAgICAgICAgICAgICAgICAgICAgaGUgaGltc2VsZiBkZWZlbmRlZCB0aGUgYWN0cyBvZiBDYWVzYXIuIEFyZSBhbGwgdGhlIGFjdHMgb2YgQ2Flc2FyIHdoaWNoIG1heQogICAgICAgICAgICAgICAgICAgIGV4aXN0IGluIHRoZSBiaXRzIG9mIG5vdGUtYm9va3MsIGFuZCBtZW1vcmFuZGEsIGFuZCBsb29zZSBwYXBlcnMsIHByb2R1Y2VkIG9uCiAgICAgICAgICAgICAgICAgICAgaGlzIHNpbmdsZSBhdXRob3JpdHksIGFuZCBpbmRlZWQgbm90IGV2ZW4gcHJvZHVjZWQsIGJ1dCBvbmx5IHJlY2l0ZWQsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcmF0aWZpZWQ/IEFuZCBzaGFsbCB0aGUgYWN0cyB3aGljaCBoZSBjYXVzZWQgdG8gYmUgZW5ncmF2ZWQgb24gYnJhc3MsIGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgZGVjbGFyZWQgdGhhdCB0aGUgZWRpY3RzIGFuZCBsYXdzIHBhc3NlZCBieSB0aGUgcGVvcGxlIHdlcmUgdmFsaWQgZm9yIGV2ZXIsCiAgICAgICAgICAgICAgICAgICAgYmUgY29uc2lkZXJlZCBhcyBvZiBubyBwb3dlcj8gPC90cmFuc2xhdGlvbj4="
translation['1.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gSSB0aGluaywKICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIHRoYXQgdGhlcmUgaXMgbm90aGluZyBzbyB3ZWxsIGVudGl0bGVkIHRvIGJlIGNhbGxlZCB0aGUgYWN0cyBvZiBDYWVzYXIKICAgICAgICAgICAgICAgICAgICBhcyBDYWVzYXIncyBsYXdzLiBTdXBwb3NlIGhlIGdhdmUgYW55IG9uZSBhIHByb21pc2UsIGlzIHRoYXQgdG8gYmUgcmF0aWZpZWQsCiAgICAgICAgICAgICAgICAgICAgZXZlbiBpZiBpdCB3ZXJlIGEgcHJvbWlzZSB0aGF0IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiAvPiBoZSBoaW1zZWxmIHdhcyB1bmFibGUgdG8gcGVyZm9ybT8KICAgICAgICAgICAgICAgICAgICBBcywgaW4gZmFjdCwgaGUgaGFzIGZhaWxlZCB0byBwZXJmb3JtIG1hbnkgcHJvbWlzZXMgbWFkZSB0byBtYW55IHBlb3BsZS4gQW5kIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBtYW55IG1vcmUgb2YgdGhvc2UgcHJvbWlzZXMgaGF2ZSBiZWVuIGZvdW5kIHNpbmNlIGhpcyBkZWF0aCwgdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgYWxsIHRoZSBzZXJ2aWNlcyB3aGljaCBoZSBjb25mZXJyZWQgb24gYW5kIGRpZCB0byBwZW9wbGUgZHVyaW5nIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSB5ZWFycyB0aGF0IGhlIHdhcyBhbGl2ZSB3b3VsZCBhbW91bnQgdG8uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGFsbCB0aG9zZSB0aGluZ3MgSSBkbyBub3QgY2hhbmdlLCBJIGRvIG5vdCBtZWRkbGUgd2l0aC4gTmF5LCBJIGRlZmVuZCBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgZ29vZCBhY3RzIHdpdGggdGhlIGdyZWF0ZXN0IGVhcm5lc3RuZXNzLiBXb3VsZCB0aGF0IHRoZSBtb25leSByZW1haW5lZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW1wbGUgb2YgT3BzISBCbG9vZHN0YWluZWQsIGluZGVlZCwgaXQgbWF5IGJlLCBidXQgc3RpbGwgbmVlZGZ1bCBhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRpbWVzLCBzaW5jZSBpdCBpcyBub3QgcmVzdG9yZWQgdG8gdGhvc2UgdG8gd2hvbSBpdCByZWFsbHkgYmVsb25ncy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGhpbC4gMi4xIiB2YWxpZD0ieWVzIj5QaGlsaXBwaWMgMjwvYmlibD4uPC9ub3RlPkxldAogICAgICAgICAgICAgICAgICAgIHRoYXQsIGhvd2V2ZXIsIGJlIHNxdWFuZGVyZWQgdG9vLCBpZiBpdCBpcyBzbyB3cml0dGVuIGluIGhpcyBhY3RzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IElzIHRoZXJlIGFueXRoaW5nIHdoYXRldmVyIHRoYXQgY2FuIGJlIGNhbGxlZCBzbwogICAgICAgICAgICAgICAgICAgIHBlY3VsaWFybHkgdGhlIGFjdCBvZiB0aGF0IG1hbiB3aG87IHdoaWxlIGNsYWQgaW4gdGhlIHJvYmUgb2YgcGVhY2UsIHdhcyB5ZXQKICAgICAgICAgICAgICAgICAgICBpbnZlc3RlZCB3aXRoIGJvdGggY2l2aWwgYW5kIG1pbGl0YXJ5IGNvbW1hbmQgaW4gdGhlIHJlcHVibGljLCBhcyBhIGxhdyBvZiBoaXM/CiAgICAgICAgICAgICAgICAgICAgQXNrIGZvciB0aGUgYWN0cyBvZiBHcmFjY2h1cywgdGhlIFNlbXByb25pYW4gbGF3cyB3aWxsIGJlIGJyb3VnaHQgZm9yd2FyZDsgYXNrCiAgICAgICAgICAgICAgICAgICAgZm9yIHRob3NlIG9mIFN1bGxhLCB5b3Ugd2lsbCBoYXZlIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjI1NzA2MSIga2V5PSJ0Z24sMjI1NzA2MSI+Q29ybmVsaWFuPC9wbGFjZU5hbWU+IGxhd3MuIFdoYXQgbW9yZT8gSW4gd2hhdCBhY3RzIGRpZCB0aGUgdGhpcmQKICAgICAgICAgICAgICAgICAgICBjb25zdWxzaGlwIG9mIENuYWV1cyBQb21wZWl1cyBjb25zaXN0PyBXaHksIGluIGhpcyBsYXdzLiBBbmQgaWYgeW91IGNvdWxkIGFzawogICAgICAgICAgICAgICAgICAgIENhZXNhciBoaW1zZWxmIHdoYXQgaGUgaGFkIGRvbmUgaW4gdGhlIGNpdHkgYW5kIGluIHRoZSBnYXJiIG9mIHBlYWNlLCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHJlcGx5IHRoYXQgaGUgaGFkIHBhc3NlZCBtYW55IGV4Y2VsbGVudCBsYXdzOyBidXQgaGlzIG1lbW9yYW5kYSBoZSB3b3VsZCBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBhbHRlciBvciBub3QgcHJvZHVjZSBhdCBhbGw7IG9yLCBpZiBoZSBkaWQgcHJvZHVjZSB0aGVtLCBoZSB3b3VsZCBub3QgY2xhc3MgdGhlbQogICAgICAgICAgICAgICAgICAgIGFtb25nIGhpcyBhY3RzLiBCdXQsIGhvd2V2ZXIsIEkgYWxsb3cgZXZlbiB0aGVzZSB0aGluZ3MgdG8gcGFzcyBmb3IgYWN0czsgYXQKICAgICAgICAgICAgICAgICAgICBzb21lIHRoaW5ncyBJIGFtIGNvbnRlbnQgdG8gd2luazsgYnV0IEkgdGhpbmsgaXQgaW50b2xlcmFibGUgdGhhdCB0aGUgYWN0cyBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBpbiB0aGUgbW9zdCBpbXBvcnRhbnQgaW5zdGFuY2VzLCB0aGF0IGlzIHRvIHNheSwgaW4gaGlzIGxhd3MsIGFyZSB0byBoZQogICAgICAgICAgICAgICAgICAgIGFubnVsbGVkIGZvciB0aGVpciBzYWtlLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUGhpbC4gMi4xIiB2YWxpZD0ieWVzIj5QaGlsaXBwaWMgMjwvYmlibD4uPC9ub3RlPkxldAogICAgICAgICAgICAgICAgICAgIHRoYXQsIGhvd2V2ZXIsIGJlIHNxdWFuZGVyZWQgdG9vLCBpZiBpdCBpcyBzbyB3cml0dGVuIGluIGhpcyBhY3RzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBoaWwuIDIuMSIgdmFsaWQ9InllcyI+UGhpbGlwcGljIDI8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['1.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgdGhlcmUgYW55dGhpbmcgd2hhdGV2ZXIgdGhhdCBjYW4gYmUgY2FsbGVkIHNvCiAgICAgICAgICAgICAgICAgICAgcGVjdWxpYXJseSB0aGUgYWN0IG9mIHRoYXQgbWFuIHdobzsgd2hpbGUgY2xhZCBpbiB0aGUgcm9iZSBvZiBwZWFjZSwgd2FzIHlldAogICAgICAgICAgICAgICAgICAgIGludmVzdGVkIHdpdGggYm90aCBjaXZpbCBhbmQgbWlsaXRhcnkgY29tbWFuZCBpbiB0aGUgcmVwdWJsaWMsIGFzIGEgbGF3IG9mIGhpcz8KICAgICAgICAgICAgICAgICAgICBBc2sgZm9yIHRoZSBhY3RzIG9mIEdyYWNjaHVzLCB0aGUgU2VtcHJvbmlhbiBsYXdzIHdpbGwgYmUgYnJvdWdodCBmb3J3YXJkOyBhc2sKICAgICAgICAgICAgICAgICAgICBmb3IgdGhvc2Ugb2YgU3VsbGEsIHlvdSB3aWxsIGhhdmUgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMjU3MDYxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIyNTcwNjEiPkNvcm5lbGlhbjwvcGxhY2VOYW1lPiBsYXdzLiBXaGF0IG1vcmU/IEluIHdoYXQgYWN0cyBkaWQgdGhlIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgY29uc3Vsc2hpcCBvZiBDbmFldXMgUG9tcGVpdXMgY29uc2lzdD8gV2h5LCBpbiBoaXMgbGF3cy4gQW5kIGlmIHlvdSBjb3VsZCBhc2sKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgaGltc2VsZiB3aGF0IGhlIGhhZCBkb25lIGluIHRoZSBjaXR5IGFuZCBpbiB0aGUgZ2FyYiBvZiBwZWFjZSwgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICByZXBseSB0aGF0IGhlIGhhZCBwYXNzZWQgbWFueSBleGNlbGxlbnQgbGF3czsgYnV0IGhpcyBtZW1vcmFuZGEgaGUgd291bGQgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgYWx0ZXIgb3Igbm90IHByb2R1Y2UgYXQgYWxsOyBvciwgaWYgaGUgZGlkIHByb2R1Y2UgdGhlbSwgaGUgd291bGQgbm90IGNsYXNzIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbW9uZyBoaXMgYWN0cy4gQnV0LCBob3dldmVyLCBJIGFsbG93IGV2ZW4gdGhlc2UgdGhpbmdzIHRvIHBhc3MgZm9yIGFjdHM7IGF0CiAgICAgICAgICAgICAgICAgICAgc29tZSB0aGluZ3MgSSBhbSBjb250ZW50IHRvIHdpbms7IGJ1dCBJIHRoaW5rIGl0IGludG9sZXJhYmxlIHRoYXQgdGhlIGFjdHMgb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgaW4gdGhlIG1vc3QgaW1wb3J0YW50IGluc3RhbmNlcywgdGhhdCBpcyB0byBzYXksIGluIGhpcyBsYXdzLCBhcmUgdG8gaGUKICAgICAgICAgICAgICAgICAgICBhbm51bGxlZCBmb3IgdGhlaXIgc2FrZS4gPC90cmFuc2xhdGlvbj4="
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgbGF3IHdhcyBldmVyIGJldHRlciwgbW9yZSBhZHZhbnRhZ2VvdXMsIG1vcmUgZnJlcXVlbnRseSBkZW1hbmRlZCBpbiB0aGUgYmVzdAogICAgICAgICAgICAgICAgICAgIGFnZXMgb2YgdGhlIHJlcHVibGljLCB0aGFuIHRoZSBvbmUgd2hpY2ggZm9yYmFkZSB0aGUgcHJhZXRvcmlhbiBwcm92aW5jZXMgdG8gYmUKICAgICAgICAgICAgICAgICAgICByZXRhaW5lZCBtb3JlIHRoYW4gYSB5ZWFyLCBhbmQgdGhlIGNvbnN1bGFyIHByb3ZpbmNlcyBtb3JlIHRoYW4gdHdvPyBJZiB0aGlzIGxhdwogICAgICAgICAgICAgICAgICAgIGJlIGFicm9nYXRlZCwgZG8geW91IHRoaW5rIHRoYXQgdGhlIGFjdHMgb2YgQ2Flc2FyIGFyZSBtYWludGFpbmVkPyBXaGF0PyBhcmUgbm90CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBsYXdzIG9mIENhZXNhciByZXNwZWN0aW5nIGp1ZGljaWFsIHByb2NlZWRpbmdzIGFicm9nYXRlZCBieSB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFkIGJlZW4gcHJvcG9zZWQgY29uY2VybmluZyB0aGUgdGhpcmQgZGVjdXJ5PyBBbmQgYXJlIHlvdSB0aGUgZGVmZW5kZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGFjdHMgb2YgQ2Flc2FyIHdobyBvdmVydHVybiBoaXMgbGF3cz8gVW5sZXNzLCBpbmRlZWQsIGFueXRoaW5nIHdoaWNoLCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgcHVycG9zZSBvZiByZWNvbGxlY3RpbmcgaXQsIGhlIGVudGVyZWQgaW4gYSBub3RlYm9vaywgaXMgdG8gYmUgY291bnRlZCBhbW9uZwogICAgICAgICAgICAgICAgICAgIGhpcyBhY3RzLCBhbmQgZGVmZW5kZWQsIGhvd2V2ZXIgdW5qdXN0IG9yIHVzZWxlc3MgaXQgbWF5IGhlOyBhbmQgdGhhdCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiAvPiB3aGljaCBoZSBwcm9wb3NlZCB0byB0aGUgcGVvcGxlIGluIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhCiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnR1cmlhdGE8L2ZvcmVpZ24+IGFuZCBjYXJyaWVkLCBpcyBub3QgdG8gYmUgYWNjb3VudGVkIG9uZSBvZiB0aGUgYWN0cyBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2hhdCBpcyB0aGF0IHRoaXJkIGRlY3VyeT8gVGhlCiAgICAgICAgICAgICAgICAgICAgZGVjdXJ5IG9mIGNlbnR1cmlvbnMsIHNheXMgaGUuIFdoYXQ/IHdhcyBub3QgdGhlIGp1ZGljYXR1cmUgb3BlbiB0byB0aGF0IG9yZGVyCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMTE4NzczIiBrZXk9InRnbiwyMTE4NzczIj5KdWxpYW48L3BsYWNlTmFtZT4gbGF3LCBhbmQgZXZlbiBiZWZvcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBQb21wZWl1cyBhbmQgQXVyZWxpYW4gbGF3cz8gVGhlIGluY29tZSBvZiB0aGUgbWVuLCBzYXlzIGhlLCB3YXMgZXhhY3RseQogICAgICAgICAgICAgICAgICAgIGRlZmluZWQuIENlcnRhaW5seSwgbm90IG9ubHkgaW4gdGhlIGNhc2Ugb2YgYSBjZW50dXJpb24sIGJ1dCBpbiB0aGUgY2FzZSwgdG9vLAogICAgICAgICAgICAgICAgICAgIG9mIGEgUm9tYW4ga25pZ2h0LiBUaGVyZWZvcmUsIG1lbiBvZiB0aGUgaGlnaGVzdCBob25vdXIgYW5kIG9mIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGJyYXZlcnksIHdobyBoYXZlIGFjdGVkIGFzIGNlbnR1cmlvbnMsIGFyZSBhbmQgaGF2ZSBiZWVuIGp1ZGdlcy4gSSBhbSBub3QgYXNraW5nCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhvc2UgbWVuLCBzYXlzIGhlLiBXaG9ldmVyIGhhcyBhY3RlZCBhcyBjZW50dXJpb24sIGxldCBoaW0gYmUgYSBqdWRnZS4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgeW91IHdlcmUgdG8gcHJvcG9zZSBhIGxhdywgdGhhdCB3aG9ldmVyIGhhZCBzZXJ2ZWQgaW4gdGhlIGNhdmFscnksIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaXMgYSBoaWdoZXIgcG9zdCwgc2hvdWxkIGJlIGEganVkZ2UsIHlvdSB3b3VsZCBub3QgYmUgYWJsZSB0byBpbmR1Y2UgYW55IG9uZSB0bwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmUgb2YgdGhhdDsgZm9yIGEgbWFuJ3MgZm9ydHVuZSBhbmQgd29ydGggb3VnaHQgdG8gYmUgcmVnYXJkZWQgaW4gYSBqdWRnZS4KICAgICAgICAgICAgICAgICAgICBJIGFtIG5vdCBhc2tpbmcgYWJvdXQgdGhvc2UgcG9pbnRzLCBzYXlzIGhlOyBJIGFtIGdvaW5nIHRvIGFkZCBhcyBqdWRnZXMsIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG9mIHRoZSBsZWdpb24gb2YgQWxhdWRhZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoaXMgd2FzIHRoZSBuYW1lIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgbGVnaW9uIHJhaXNlZCBieSBDYWVzYXIgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBjYWxsZWQgc28sIHByb2JhYmx5LCBmcm9tIHRoZSBvcm5hbWVudCB3b3JuIG9uIHRoZWlyIGhlbG1ldC48L25vdGU+Zm9yCiAgICAgICAgICAgICAgICAgICAgb3VyIGZyaWVuZHMgc2F5IHRoYXQgdGhhdCBpcyB0aGUgb25seSBtZWFzdXJlIGJ5IHdoaWNoIHRoZXkgY2FuIGJlIHNhdmVkLiBPaAogICAgICAgICAgICAgICAgICAgIHdoYXQgYW4gaW5zdWx0aW5nIGNvbXBsaW1lbnQgaXQgaXMgdG8gdGhvc2UgbWVuIHdob20geW91IHN1bW1vbiB0byBhY3QgYXMganVkZ2VzCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHRoZXkgbmV2ZXIgZXhwZWN0ZWQgaXQhIEZvciB0aGUgZWZmZWN0IG9mIHRoZSBsYXcgaXMsIHRvIG1ha2UgdGhvc2UgbWVuCiAgICAgICAgICAgICAgICAgICAganVkZ2VzIGluIHRoZSB0aGlyZCBkZWN1cnkgd2hvIGRvIG5vdCBkYXJlIHRvIGp1ZGdlIHdpdGggZnJlZWRvbS4gQW5kIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBob3cgZ3JlYXQsIE8geWUgaW1tb3J0YWwgZ29kcyEgaXMgdGhlIGVycm9yIG9mIHRob3NlIG1lbiB3aG8gaGF2ZSBkZXNpcmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBsYXcuIEZvciB0aGUgbWVhbmVyIHRoZSBjb25kaXRpb24gb2YgZWFjaCBqdWRnZSBpcywgdGhlIGdyZWF0ZXIgd2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICBzZXZlcml0eSBvZiBqdWRnbWVudCB3aXRoIHdoaWNoIGhlIHdpbGwgc2VlayB0byBlZmZhY2UgdGhlIGlkZWEgb2YgaGlzIG1lYW5uZXNzOwogICAgICAgICAgICAgICAgICAgIGFuZCBoZSB3aWxsIHN0cml2ZSByYXRoZXIgdG8gYXBwZWFyIHdvcnRoeSBvZiBiZWluZyBjbGFzc2VkIGluIHRoZSBob25vdXJhYmxlCiAgICAgICAgICAgICAgICAgICAgZGVjdXJpZXMsIHRoYW4gdG8gaGF2ZSBkZXNlcnZlZGx5IHJhbmtlZCBpbiBhIGRpc3JlcHV0YWJsZSBvbmUuIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIC8+IHdoaWNoIGhlIHByb3Bvc2VkIHRvIHRoZSBwZW9wbGUgaW4gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEKICAgICAgICAgICAgICAgICAgICAgICAgY2VudHVyaWF0YTwvZm9yZWlnbj4gYW5kIGNhcnJpZWQsIGlzIG5vdCB0byBiZSBhY2NvdW50ZWQgb25lIG9mIHRoZSBhY3RzIG9mCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoYXQgaXMgdGhhdCB0aGlyZCBkZWN1cnk/IFRoZQogICAgICAgICAgICAgICAgICAgIGRlY3VyeSBvZiBjZW50dXJpb25zLCBzYXlzIGhlLiBXaGF0PyB3YXMgbm90IHRoZSBqdWRpY2F0dXJlIG9wZW4gdG8gdGhhdCBvcmRlcgogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjExODc3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMTE4NzczIj5KdWxpYW48L3BsYWNlTmFtZT4gbGF3LCBhbmQgZXZlbiBiZWZvcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBQb21wZWl1cyBhbmQgQXVyZWxpYW4gbGF3cz8gVGhlIGluY29tZSBvZiB0aGUgbWVuLCBzYXlzIGhlLCB3YXMgZXhhY3RseQogICAgICAgICAgICAgICAgICAgIGRlZmluZWQuIENlcnRhaW5seSwgbm90IG9ubHkgaW4gdGhlIGNhc2Ugb2YgYSBjZW50dXJpb24sIGJ1dCBpbiB0aGUgY2FzZSwgdG9vLAogICAgICAgICAgICAgICAgICAgIG9mIGEgUm9tYW4ga25pZ2h0LiBUaGVyZWZvcmUsIG1lbiBvZiB0aGUgaGlnaGVzdCBob25vdXIgYW5kIG9mIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGJyYXZlcnksIHdobyBoYXZlIGFjdGVkIGFzIGNlbnR1cmlvbnMsIGFyZSBhbmQgaGF2ZSBiZWVuIGp1ZGdlcy4gSSBhbSBub3QgYXNraW5nCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhvc2UgbWVuLCBzYXlzIGhlLiBXaG9ldmVyIGhhcyBhY3RlZCBhcyBjZW50dXJpb24sIGxldCBoaW0gYmUgYSBqdWRnZS4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgeW91IHdlcmUgdG8gcHJvcG9zZSBhIGxhdywgdGhhdCB3aG9ldmVyIGhhZCBzZXJ2ZWQgaW4gdGhlIGNhdmFscnksIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaXMgYSBoaWdoZXIgcG9zdCwgc2hvdWxkIGJlIGEganVkZ2UsIHlvdSB3b3VsZCBub3QgYmUgYWJsZSB0byBpbmR1Y2UgYW55IG9uZSB0bwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmUgb2YgdGhhdDsgZm9yIGEgbWFuJ3MgZm9ydHVuZSBhbmQgd29ydGggb3VnaHQgdG8gYmUgcmVnYXJkZWQgaW4gYSBqdWRnZS4KICAgICAgICAgICAgICAgICAgICBJIGFtIG5vdCBhc2tpbmcgYWJvdXQgdGhvc2UgcG9pbnRzLCBzYXlzIGhlOyBJIGFtIGdvaW5nIHRvIGFkZCBhcyBqdWRnZXMsIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzIG9mIHRoZSBsZWdpb24gb2YgQWxhdWRhZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyB3YXMgdGhlIG5hbWUgb2YgYQogICAgICAgICAgICAgICAgICAgICAgICBsZWdpb24gcmFpc2VkIGJ5IENhZXNhciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgY2FsbGVkIHNvLCBwcm9iYWJseSwgZnJvbSB0aGUgb3JuYW1lbnQgd29ybiBvbiB0aGVpciBoZWxtZXQuPC9ub3RlPmZvcgogICAgICAgICAgICAgICAgICAgIG91ciBmcmllbmRzIHNheSB0aGF0IHRoYXQgaXMgdGhlIG9ubHkgbWVhc3VyZSBieSB3aGljaCB0aGV5IGNhbiBiZSBzYXZlZC4gT2gKICAgICAgICAgICAgICAgICAgICB3aGF0IGFuIGluc3VsdGluZyBjb21wbGltZW50IGl0IGlzIHRvIHRob3NlIG1lbiB3aG9tIHlvdSBzdW1tb24gdG8gYWN0IGFzIGp1ZGdlcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IG5ldmVyIGV4cGVjdGVkIGl0ISBGb3IgdGhlIGVmZmVjdCBvZiB0aGUgbGF3IGlzLCB0byBtYWtlIHRob3NlIG1lbgogICAgICAgICAgICAgICAgICAgIGp1ZGdlcyBpbiB0aGUgdGhpcmQgZGVjdXJ5IHdobyBkbyBub3QgZGFyZSB0byBqdWRnZSB3aXRoIGZyZWVkb20uIEFuZCBpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgaG93IGdyZWF0LCBPIHllIGltbW9ydGFsIGdvZHMhIGlzIHRoZSBlcnJvciBvZiB0aG9zZSBtZW4gd2hvIGhhdmUgZGVzaXJlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbGF3LiBGb3IgdGhlIG1lYW5lciB0aGUgY29uZGl0aW9uIG9mIGVhY2gganVkZ2UgaXMsIHRoZSBncmVhdGVyIHdpbGwgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJpdHkgb2YganVkZ21lbnQgd2l0aCB3aGljaCBoZSB3aWxsIHNlZWsgdG8gZWZmYWNlIHRoZSBpZGVhIG9mIGhpcyBtZWFubmVzczsKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgd2lsbCBzdHJpdmUgcmF0aGVyIHRvIGFwcGVhciB3b3J0aHkgb2YgYmVpbmcgY2xhc3NlZCBpbiB0aGUgaG9ub3VyYWJsZQogICAgICAgICAgICAgICAgICAgIGRlY3VyaWVzLCB0aGFuIHRvIGhhdmUgZGVzZXJ2ZWRseSByYW5rZWQgaW4gYSBkaXNyZXB1dGFibGUgb25lLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgY2FsbGVkIHNvLCBwcm9iYWJseSwgZnJvbSB0aGUgb3JuYW1lbnQgd29ybiBvbiB0aGVpciBoZWxtZXQuPC90cmFuc2xhdGlvbj4="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXIgbGF3IHdhcyBwcm9wb3NlZCwgdGhhdCBtZW4gd2hvIGhhZCBiZWVuIGNvbmRlbW5lZCBvZiB2aW9sZW5jZSBhbmQgdHJlYXNvbgogICAgICAgICAgICAgICAgICAgIG1heSBhcHBlYWwgdG8gdGhlIHB1YmxpYyBpZiB0aGV5IHBsZWFzZS4gSXMgdGhpcyBub3cgYSBsYXcsIG9yIHJhdGhlciBhbgogICAgICAgICAgICAgICAgICAgIGFicm9nYXRpb24gb2YgYWxsIGxhd3M/IEZvciB3aG8gaXMgdGhlcmUgYXQgdGhpcyBkYXkgdG8gd2hvbSBpdCBpcyBhbiBvYmplY3QKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoYXQgbGF3IHNob3VsZCBzdGFuZD8gTm8gb25lIGlzIGFjY3VzZWQgdW5kZXIgdGhvc2UgbGF3czsgdGhlcmUgaXMgbm8gb25lCiAgICAgICAgICAgICAgICAgICAgd2hvbSB3ZSB0aGluayBsaWtlbHkgdG8gYmUgc28gYWNjdXNlZC4gRm9yIG1lYXN1cmVzIHdoaWNoIGhhdmUgYmVlbiBjYXJyaWVkIGJ5CiAgICAgICAgICAgICAgICAgICAgZm9yY2Ugb2YgYXJtcyB3aWxsIGNlcnRhaW5seSBuZXZlciBiZSBpbXBlYWNoZWQgaW4gYSBjb3VydCBvZiBqdXN0aWNlLiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSBpcyBhIHBvcHVsYXIgb25lLiBJIHdpc2gsIGluZGVlZCwgdGhhdCB5b3Ugd2VyZSB3aWxsaW5nIHRvIHByb21vdGUgYW55CiAgICAgICAgICAgICAgICAgICAgcG9wdWxhciBtZWFzdXJlOyBmb3IsIGF0IHByZXNlbnQsIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiAvPiBhbGwgdGhlIGNpdGl6ZW5zIGFncmVlIHdpdGggb25lCiAgICAgICAgICAgICAgICAgICAgbWluZCBhbmQgb25lIHZvaWNlIGluIHRoZWlyIHZpZXcgb2YgaXRzIGJlYXJpbmcgb24gdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWMuIDwvcD4KCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiAvPiBhbGwgdGhlIGNpdGl6ZW5zIGFncmVlIHdpdGggb25lCiAgICAgICAgICAgICAgICAgICAgbWluZCBhbmQgb25lIHZvaWNlIGluIHRoZWlyIHZpZXcgb2YgaXRzIGJlYXJpbmcgb24gdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBpcyB0aGUgbWVhbmluZywgdGhlbiwgb2YgdGhlIGVhZ2VybmVzcyB0byBwYXNzIHRoZSBsYXcgd2hpY2ggYnJpbmdzIHdpdGggaXQKICAgICAgICAgICAgICAgICAgICB0aGUgZ3JlYXRlc3QgcG9zc2libGUgaW5mYW15LCBhbmQgbm8gcG9wdWxhcml0eSBhdCBhbGw/IEZvciB3aGF0IGNhbiBiZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0YWJsZSB0aGFuIGZvciBhIG1hbiB3aG8gaGFzIGNvbW1pdHRlZCB0cmVhc29uIGFnYWluc3QgdGhlIFJvbWFuIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGJ5IGFjdHMgb2YgdmlvbGVuY2UsIGFmdGVyIGhlIGhhcyBiZWVuIGNvbmRlbW5lZCBieSBhIGxlZ2FsIGRlY2lzaW9uLCB0byBiZSBhYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gcmV0dXJuIHRvIHRoYXQgdmVyeSBjb3Vyc2Ugb2YgdmlvbGVuY2UsIG9uIGFjY291bnQgb2Ygd2hpY2ggaGUgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQ/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoeSBkbyBJIGFyZ3VlIGFueSBtb3JlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXc/IGFzIGlmIHRoZSBvYmplY3QgYWltZWQgYXQgd2VyZSB0byBlbmFibGUgYW55IG9uZSB0byBhcHBlYWw/IFRoZSBvYmplY3QKICAgICAgICAgICAgICAgICAgICBpcywgdGhlIGluZXZpdGFibGUgY29uc2VxdWVuY2UgbXVzdCBiZSwgdGhhdCBubyBvbmUgY2FuIGV2ZXIgYmUgcHJvc2VjdXRlZCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRob3NlIGxhd3MuIEZvciB3aGF0IHByb3NlY3V0b3Igd2lsbCBiZSBmb3VuZCBpbnNhbmUgZW5vdWdoIHRvIGJlIHdpbGxpbmcsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCBoYXMgYmVlbiBjb25kZW1uZWQsIHRvIGV4cG9zZSBoaW1zZWxmIHRvIHRoZSBmdXJ5IG9mIGEgaGlyZWQgbW9iPwogICAgICAgICAgICAgICAgICAgIG9yIHdoYXQganVkZ2Ugd2lsbCBiZSBib2xkIGVub3VnaCB0byB2ZW50dXJlIHRvIGNvbmRlbW4gYSBjcmltaW5hbCwga25vd2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2lsbCBpbW1lZGlhdGVseSBiZSBkcmFnZ2VkIGJlZm9yZSBhIGdhbmcgb2YgaGlyZWxpbmcgb3BlcmF0aXZlcz8gSXQgaXMgbm90LAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgYSByaWdodCBvZiBhcHBlYWwgdGhhdCBpcyBnaXZlbiBieSB0aGF0IGxhdywgYnV0IHR3byBtb3N0IHNhbHV0YXJ5CiAgICAgICAgICAgICAgICAgICAgbGF3cyBhbmQgbW9kZXMgb2YganVkaWNpYWwgaW52ZXN0aWdhdGlvbiB0aGF0IGFyZSBhYm9saXNoZWQuIEFuZCB3aGF0IGlzIHRoaXMKICAgICAgICAgICAgICAgICAgICBidXQgZXhob3J0aW5nIHlvdW5nIG1lbiB0byBiZSB0dXJidWxlbnQsIHNlZGl0aW91cywgbWlzY2hpZXZvdXMgY2l0aXplbnM/IDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoeSBkbyBJIGFyZ3VlIGFueSBtb3JlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXc/IGFzIGlmIHRoZSBvYmplY3QgYWltZWQgYXQgd2VyZSB0byBlbmFibGUgYW55IG9uZSB0byBhcHBlYWw/IFRoZSBvYmplY3QKICAgICAgICAgICAgICAgICAgICBpcywgdGhlIGluZXZpdGFibGUgY29uc2VxdWVuY2UgbXVzdCBiZSwgdGhhdCBubyBvbmUgY2FuIGV2ZXIgYmUgcHJvc2VjdXRlZCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRob3NlIGxhd3MuIEZvciB3aGF0IHByb3NlY3V0b3Igd2lsbCBiZSBmb3VuZCBpbnNhbmUgZW5vdWdoIHRvIGJlIHdpbGxpbmcsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCBoYXMgYmVlbiBjb25kZW1uZWQsIHRvIGV4cG9zZSBoaW1zZWxmIHRvIHRoZSBmdXJ5IG9mIGEgaGlyZWQgbW9iPwogICAgICAgICAgICAgICAgICAgIG9yIHdoYXQganVkZ2Ugd2lsbCBiZSBib2xkIGVub3VnaCB0byB2ZW50dXJlIHRvIGNvbmRlbW4gYSBjcmltaW5hbCwga25vd2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2lsbCBpbW1lZGlhdGVseSBiZSBkcmFnZ2VkIGJlZm9yZSBhIGdhbmcgb2YgaGlyZWxpbmcgb3BlcmF0aXZlcz8gSXQgaXMgbm90LAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgYSByaWdodCBvZiBhcHBlYWwgdGhhdCBpcyBnaXZlbiBieSB0aGF0IGxhdywgYnV0IHR3byBtb3N0IHNhbHV0YXJ5CiAgICAgICAgICAgICAgICAgICAgbGF3cyBhbmQgbW9kZXMgb2YganVkaWNpYWwgaW52ZXN0aWdhdGlvbiB0aGF0IGFyZSBhYm9saXNoZWQuIEFuZCB3aGF0IGlzIHRoaXMKICAgICAgICAgICAgICAgICAgICBidXQgZXhob3J0aW5nIHlvdW5nIG1lbiB0byBiZSB0dXJidWxlbnQsIHNlZGl0aW91cywgbWlzY2hpZXZvdXMgY2l0aXplbnM/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IFRvIHdoYXQgZXh0ZW50IG9mIG1pc2NoaWVmIHdpbGwgaXQgbm90IGJlIHBvc3NpYmxlIHRvIGluc3RpZ2F0ZSB0aGUgZnJlbnp5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJ1bmVzIG5vdyB0aGF0IHRoZXNlIHR3byByaWdodHMgb2YgaW1wZWFjaG1lbnQgZm9yIHZpb2xlbmNlIGFuZCBmb3IKICAgICAgICAgICAgICAgICAgICB0cmVhc29uIGFyZSBhbm51bGxlZD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IG1vcmU/IElzIG5vdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYSBzdWJzdGl0dXRpb24gb2YgYSBuZXcgbGF3IGZvciB0aGUgbGF3cyBvZiBDYWVzYXIsIHdoaWNoIGVuYWN0IHRoYXQgZXZlcnkgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhcyBiZWVuIGNvbnZpY3RlZCBvZiB2aW9sZW5jZSwgYW5kIGFsc28gZXZlcnkgbWFuIHdobyBoYXMgYmVlbiBjb252aWN0ZWQgb2YKICAgICAgICAgICAgICAgICAgICB0cmVhc29uLCBzaGFsbCBiZSBpbnRlcmRpY3RlZCBmcm9tIGZpcmUgYW5kIHdhdGVyPyBBbmQsIHdoZW4gdGhvc2UgbWVuIGhhdmUgYQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IG9mIGFwcGVhbCBnaXZlbiB0aGVtLCBhcmUgbm90IHRoZSBhY3RzIG9mIENhZXNhciByZXNjaW5kZWQ/IEFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGFjdHMsIE8gY29uc2NyaXB0IGZhdGhlcnMsIEksIHdobyBuZXZlciBhcHByb3ZlZCBvZiB0aGVtLCBoYXZlIHN0aWxsIHRob3VnaHQgaXQKICAgICAgICAgICAgICAgICAgICBhZHZpc2FibGUgdG8gbWFpbnRhaW4gZm9yIHRoZSBzYWtlIG9mIGNvbmNvcmQ7IHNvIHRoYXQgSSBub3Qgb25seSBkaWQgbm90IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbGF3cyB3aGljaCBDYWVzYXIgaGFkIHBhc3NlZCBpbGwgaGlzIGxpZmV0aW1lIG91Z2h0IHRvIGJlIHJlcGVhbGVkLCBidXQKICAgICAgICAgICAgICAgICAgICBJIGRpZCBub3QgYXBwcm92ZSBvZiBtZWRkbGluZyB3aXRoIHRob3NlIGV2ZW4gd2hpY2ggc2luY2UgdGhlIGRlYXRoIG9mIENhZXNhcgogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHNlZW4gcHJvZHVjZWQgYW5kIHB1Ymxpc2hlZC4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBtb3JlPyBJcyBub3QgdGhpcwogICAgICAgICAgICAgICAgICAgIGEgc3Vic3RpdHV0aW9uIG9mIGEgbmV3IGxhdyBmb3IgdGhlIGxhd3Mgb2YgQ2Flc2FyLCB3aGljaCBlbmFjdCB0aGF0IGV2ZXJ5IG1hbgogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgYmVlbiBjb252aWN0ZWQgb2YgdmlvbGVuY2UsIGFuZCBhbHNvIGV2ZXJ5IG1hbiB3aG8gaGFzIGJlZW4gY29udmljdGVkIG9mCiAgICAgICAgICAgICAgICAgICAgdHJlYXNvbiwgc2hhbGwgYmUgaW50ZXJkaWN0ZWQgZnJvbSBmaXJlIGFuZCB3YXRlcj8gQW5kLCB3aGVuIHRob3NlIG1lbiBoYXZlIGEKICAgICAgICAgICAgICAgICAgICByaWdodCBvZiBhcHBlYWwgZ2l2ZW4gdGhlbSwgYXJlIG5vdCB0aGUgYWN0cyBvZiBDYWVzYXIgcmVzY2luZGVkPyBBbmQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBhY3RzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJLCB3aG8gbmV2ZXIgYXBwcm92ZWQgb2YgdGhlbSwgaGF2ZSBzdGlsbCB0aG91Z2h0IGl0CiAgICAgICAgICAgICAgICAgICAgYWR2aXNhYmxlIHRvIG1haW50YWluIGZvciB0aGUgc2FrZSBvZiBjb25jb3JkOyBzbyB0aGF0IEkgbm90IG9ubHkgZGlkIG5vdCB0aGluawogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGxhd3Mgd2hpY2ggQ2Flc2FyIGhhZCBwYXNzZWQgaWxsIGhpcyBsaWZldGltZSBvdWdodCB0byBiZSByZXBlYWxlZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgSSBkaWQgbm90IGFwcHJvdmUgb2YgbWVkZGxpbmcgd2l0aCB0aG9zZSBldmVuIHdoaWNoIHNpbmNlIHRoZSBkZWF0aCBvZiBDYWVzYXIKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZWVuIHByb2R1Y2VkIGFuZCBwdWJsaXNoZWQuIDwvdHJhbnNsYXRpb24+"
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk1lbiBoYXZlIGJlZW4gcmVjYWxsZWQgZnJvbSBiYW5pc2htZW50IGJ5IGEgZGVhZCBtYW47IHRoZSBmcmVlZG9tIG9mIHRoZSBjaXR5IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gY29uZmVycmVkIG5vdCBvbmx5IG9uIGluZGl2aWR1YWxzLCBidXQgb24gZW50aXJlIG5hdGlvbnMgYW5kIHByb3ZpbmNlcyBieSBhCiAgICAgICAgICAgICAgICAgICAgZGVhZCBtYW47IG91ciByZXZlbnVlcyBoYXZlIGJlZW4gZGltaW5pc2hlZCBieSB0aGUgZ3JhbnRpbmcgb2YgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIC8+CiAgICAgICAgICAgICAgICAgICAgY291bnRsZXNzIGV4ZW1wdGlvbnMgYnkgYSBkZWFkIG1hbi4gVGhlcmVmb3JlLCBkbyB3ZSBkZWZlbmQgdGhlc2UgbWVhc3VyZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gYnJvdWdodCBmcm9tIGhpcyBob3VzZSBvbiB0aGUgYXV0aG9yaXR5IG9mIGEgc2luZ2xlLCBidXQsIEkgYWRtaXQsIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGV4Y2VsbGVudCBpbmRpdmlkdWFsOyBhbmQgYXMgZm9yIHRoZSBsYXdzIHdoaWNoIGhlLCBpbiB5b3VyIHByZXNlbmNlLCByZWFkLAogICAgICAgICAgICAgICAgICAgIGFuZCBkZWNsYXJlZCwgYW5kIHBhc3NlZCzigJRpbiB0aGUgcGFzc2luZyBvZiB3aGljaCBoZSBnbG9yaWVkLCBhbmQgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBiZWxpZXZlZCB0aGF0IHRoZSBzYWZldHkgb2YgdGhlIHJlcHVibGljIGRlcGVuZGVkLCBlc3BlY2lhbGx5IHRob3NlCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyBwcm92aW5jZXMgYW5kIGNvbmNlcm5pbmcganVkaWNpYWwgcHJvY2VlZGluZ3Ms4oCUY2FuIHdlLCBJCiAgICAgICAgICAgICAgICAgICAgc2F5LCB3ZSB3aG8gZGVmZW5kIHRoZSBhY3RzIG9mIENhZXNhciwgdGhpbmsgdGhhdCB0aG9zZSBsYXdzIGRlc2VydmUgdG8gYmUKICAgICAgICAgICAgICAgICAgICB1cHNldD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIC8+CiAgICAgICAgICAgICAgICAgICAgY291bnRsZXNzIGV4ZW1wdGlvbnMgYnkgYSBkZWFkIG1hbi4gVGhlcmVmb3JlLCBkbyB3ZSBkZWZlbmQgdGhlc2UgbWVhc3VyZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gYnJvdWdodCBmcm9tIGhpcyBob3VzZSBvbiB0aGUgYXV0aG9yaXR5IG9mIGEgc2luZ2xlLCBidXQsIEkgYWRtaXQsIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGV4Y2VsbGVudCBpbmRpdmlkdWFsOyBhbmQgYXMgZm9yIHRoZSBsYXdzIHdoaWNoIGhlLCBpbiB5b3VyIHByZXNlbmNlLCByZWFkLAogICAgICAgICAgICAgICAgICAgIGFuZCBkZWNsYXJlZCwgYW5kIHBhc3NlZCzigJRpbiB0aGUgcGFzc2luZyBvZiB3aGljaCBoZSBnbG9yaWVkLCBhbmQgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBiZWxpZXZlZCB0aGF0IHRoZSBzYWZldHkgb2YgdGhlIHJlcHVibGljIGRlcGVuZGVkLCBlc3BlY2lhbGx5IHRob3NlCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyBwcm92aW5jZXMgYW5kIGNvbmNlcm5pbmcganVkaWNpYWwgcHJvY2VlZGluZ3Ms4oCUY2FuIHdlLCBJCiAgICAgICAgICAgICAgICAgICAgc2F5LCB3ZSB3aG8gZGVmZW5kIHRoZSBhY3RzIG9mIENhZXNhciwgdGhpbmsgdGhhdCB0aG9zZSBsYXdzIGRlc2VydmUgdG8gYmUKICAgICAgICAgICAgICAgICAgICB1cHNldD8gPC90cmFuc2xhdGlvbj4="
translation['1.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHlldCBjb25jZXJuaW5nIHRob3NlIGxhd3Mgd2hpY2ggd2VyZSBwcm9wb3NlZCwgd2UgaGF2ZSwgYXQgYWxsIGV2ZW50cywgdGhlCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgb2YgY29tcGxhaW5pbmc7IGJ1dCBjb25jZXJuaW5nIHRob3NlIHdoaWNoIGFyZSBhY3R1YWxseSBwYXNzZWQgd2UgaGF2ZSBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIGhhZCB0aGF0IHByaXZpbGVnZS4gRm9yIHRoZXksIHdpdGhvdXQgYW55IHByb3Bvc2FsIG9mIHRoZW0gdG8gdGhlIHBlb3BsZSwKICAgICAgICAgICAgICAgICAgICB3ZXJlIHBhc3NlZCBiZWZvcmUgdGhleSB3ZXJlIGZyYW1lZC4gTWVuIGFzaywgd2hhdCBpcyB0aGUgcmVhc29uIHdoeSBJLCBvciB3aHkKICAgICAgICAgICAgICAgICAgICBhbnkgb25lIG9mIHlvdSwgTyBjb25zY3JpcHQgZmF0aGVycywgc2hvdWxkIGJlIGFmcmFpZCBvZiBiYWQgbGF3cyB3aGlsZSB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdmlydHVvdXMgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZT8gV2UgaGF2ZSBtZW4gcmVhZHkgdG8gaW50ZXJwb3NlIHRoZWlyIHZldG87CiAgICAgICAgICAgICAgICAgICAgcmVhZHkgdG8gZGVmZW5kIHRoZSByZXB1YmxpYyB3aXRoIHRoZSBzYW5jdGlvbnMgb2YgcmVsaWdpb24uIFdlIG91Z2h0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc3RyYW5nZXJzIHRvIGZlYXIuIFdoYXQgZG8geW91IG1lYW4gYnkgaW50ZXJwb3NpbmcgdGhlIHZldG8/IHNheXMgaGU7IHdoYXQgYXJlCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZXNlIHNhbmN0aW9ucyBvZiByZWxpZ2lvbiB3aGljaCB5b3UgYXJlIHRhbGtpbmcgYWJvdXQ/IFRob3NlLCBmb3Jzb290aCwgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYyBkZXBlbmRzLiBXZSBhcmUgbmVnbGVjdGluZyB0aG9zZSB0aGluZ3MsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoaW5raW5nIHRoZW0gdG9vIG9sZC1mYXNoaW9uZWQgYW5kIGZvb2xpc2guIFRoZSBmb3J1bSB3aWxsIGJlIHN1cnJvdW5kZWQsIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZW50cmFuY2Ugb2YgaXQgd2lsbCBiZSBibG9ja2VkIHVwOyBhcm1lZCBtZW4gd2lsbCBiZSBwbGFjZWQgaW4gZ2Fycmlzb24sIGFzIGl0CiAgICAgICAgICAgICAgICAgICAgd2VyZSwgYXQgbWFueSBwb2ludHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIHRoZW4/4oCUd2hhdGV2ZXIgaXMgYWNjb21wbGlzaGVkIGJ5IHRob3NlIG1lYW5zIHdpbGwgYmUgbGF3LiBBbmQgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBvcmRlciwgSSBzdXBwb3NlLCBhbGwgdGhvc2UgcmVndWxhcmx5IHBhc3NlZCBkZWNyZWVzIHRvIGJlIGVuZ3JhdmVkIG9uCiAgICAgICAgICAgICAgICAgICAgYnJhemVuIHRhYmxldHMuIOKAnFRoZSBjb25zdWxzIGNvbnN1bHRlZCB0aGUgcGVvcGxlIGluIHJlZ3VsYXIKICAgICAgICAgICAgICAgICAgICBmb3JtLOKAnSAoSXMgdGhpcyB0aGUgd2F5IG9mIGNvbnN1bHRpbmcgdGhlIHBlb3BsZSB0aGF0IHdlIGhhdmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG91ciBhbmNlc3RvcnM/KSDigJxhbmQgdGhlIHBlb3BsZSB2b3RlZCBpdCB3aXRoIGR1ZQogICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJpdHku4oCdIFdoYXQgcGVvcGxlPyB0aGF0IHdoaWNoIHdhcyBleGNsdWRlZCBmcm9tIHRoZSBmb3J1bT8KICAgICAgICAgICAgICAgICAgICBVbmRlciB3aGF0IGxhdyBkaWQgdGhleSBkbyBzbz8gdW5kZXIgdGhhdCB3aGljaCBoYXMgYmVlbiB3aG9sbHkgYWJyb2dhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UgYW5kIGFybXM/IEJ1dCBJIGFtIHNheWluZyBhbGwgdGhpcyB3aXRoIHJlZmVyZW5jZSB0byB0aGUgZnV0dXJlOwogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaXQgaXMgdGhlIHBhcnQgb2YgYSBmcmllbmQgdG8gcG9pbnQgb3V0IGV2aWxzIHdoaWNoIG1heSBiZSBhdm9pZGVkOiBhbmQKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IG5ldmVyIGVuc3VlLCB0aGF0IHdpbGwgYmUgdGhlIGJlc3QgcmVmdXRhdGlvbiBvZiBteSBzcGVlY2guIEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBvZiBsYXdzIHdoaWNoIGhhdmUgYmVlbiBwcm9wb3NlZDsgY29uY2VybmluZyB3aGljaCB5b3UgaGF2ZSBzdGlsbCBmdWxsCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgdG8gZGVjaWRlIGVpdGhlciB3YXkuIEkgYW0gcG9pbnRpbmcgb3V0IHRoZSBkZWZlY3RzOyBhd2F5IHdpdGggdGhlbSBJIGFtCiAgICAgICAgICAgICAgICAgICAgZGVub3VuY2luZyB2aW9sZW5jZSBhbmQgYXJtczsgYXdheSB3aXRoIHRoZW0gdG9vISA8cGIgbj0iMTQiIC8+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIHRoZW4/4oCUd2hhdGV2ZXIgaXMgYWNjb21wbGlzaGVkIGJ5IHRob3NlIG1lYW5zIHdpbGwgYmUgbGF3LiBBbmQgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBvcmRlciwgSSBzdXBwb3NlLCBhbGwgdGhvc2UgcmVndWxhcmx5IHBhc3NlZCBkZWNyZWVzIHRvIGJlIGVuZ3JhdmVkIG9uCiAgICAgICAgICAgICAgICAgICAgYnJhemVuIHRhYmxldHMuIOKAnFRoZSBjb25zdWxzIGNvbnN1bHRlZCB0aGUgcGVvcGxlIGluIHJlZ3VsYXIKICAgICAgICAgICAgICAgICAgICBmb3JtLOKAnSAoSXMgdGhpcyB0aGUgd2F5IG9mIGNvbnN1bHRpbmcgdGhlIHBlb3BsZSB0aGF0IHdlIGhhdmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG91ciBhbmNlc3RvcnM/KSDigJxhbmQgdGhlIHBlb3BsZSB2b3RlZCBpdCB3aXRoIGR1ZQogICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJpdHku4oCdIFdoYXQgcGVvcGxlPyB0aGF0IHdoaWNoIHdhcyBleGNsdWRlZCBmcm9tIHRoZSBmb3J1bT8KICAgICAgICAgICAgICAgICAgICBVbmRlciB3aGF0IGxhdyBkaWQgdGhleSBkbyBzbz8gdW5kZXIgdGhhdCB3aGljaCBoYXMgYmVlbiB3aG9sbHkgYWJyb2dhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UgYW5kIGFybXM/IEJ1dCBJIGFtIHNheWluZyBhbGwgdGhpcyB3aXRoIHJlZmVyZW5jZSB0byB0aGUgZnV0dXJlOwogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaXQgaXMgdGhlIHBhcnQgb2YgYSBmcmllbmQgdG8gcG9pbnQgb3V0IGV2aWxzIHdoaWNoIG1heSBiZSBhdm9pZGVkOiBhbmQKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IG5ldmVyIGVuc3VlLCB0aGF0IHdpbGwgYmUgdGhlIGJlc3QgcmVmdXRhdGlvbiBvZiBteSBzcGVlY2guIEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBvZiBsYXdzIHdoaWNoIGhhdmUgYmVlbiBwcm9wb3NlZDsgY29uY2VybmluZyB3aGljaCB5b3UgaGF2ZSBzdGlsbCBmdWxsCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgdG8gZGVjaWRlIGVpdGhlciB3YXkuIEkgYW0gcG9pbnRpbmcgb3V0IHRoZSBkZWZlY3RzOyBhd2F5IHdpdGggdGhlbSBJIGFtCiAgICAgICAgICAgICAgICAgICAgZGVub3VuY2luZyB2aW9sZW5jZSBhbmQgYXJtczsgYXdheSB3aXRoIHRoZW0gdG9vISA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgLz4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBhbmQgeW91ciBjb2xsZWFndWUsIE8gRG9sYWJlbGxhLCBvdWdodCBub3QsIGluZGVlZCwgdG8gYmUgYW5ncnkgd2l0aCBtZSBmb3IKICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBpbiBkZWZlbmNlIG9mIHRoZSByZXB1YmxpYy4gQWx0aG91Z2ggSSBkbyBub3QgdGhpbmsgdGhhdCB5b3UgeW91cnNlbGYKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlOyBJIGtub3cgeW91ciB3aWxsaW5nbmVzcyB0byBsaXN0ZW4gdG8gcmVhc29uLiBUaGV5IHNheSB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBjb2xsZWFndWUsIGluIHRoaXMgZm9ydHVuZSBvZiBoaXMsIHdoaWNoIGhlIGhpbXNlbGYgdGhpbmtzIHNvIGdvb2QsIGJ1dCB3aGljaAogICAgICAgICAgICAgICAgICAgIHdvdWxkIHNlZW0gdG8gbWUgbW9yZSBmYXZvdXJhYmxlIGlmIChub3QgdG8gdXNlIGFueSBoYXJzaCBsYW5ndWFnZSkgaGUgd2VyZSB0bwogICAgICAgICAgICAgICAgICAgIGltaXRhdGUgdGhlIGV4YW1wbGUgc2V0IGhpbSBieSB0aGUgY29uc3Vsc2hpcCBvZiBoaXMgZ3JhbmRmYXRoZXJzIGFuZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICB1bmNsZSzigJR0aGV5IHNheSB0aGF0IGhlIGhhcyBiZWVuIGV4Y2VlZGluZ2x5IG9mZmVuZGVkLiBBbmQgSSBzZWUgd2hhdAogICAgICAgICAgICAgICAgICAgIGEgZm9ybWlkYWJsZSB0aGluZyBpdCBpcyB0byBoYXZlIHRoZSBzYW1lIG1hbiBhbmdyeSB3aXRoIG1lIGFuZCBhbHNvIGFybWVkOwogICAgICAgICAgICAgICAgICAgIGVzcGVjaWFsbHkgYXQgYSB0aW1lIHdoZW4gbWVuIGNhbiB1c2UgdGhlaXIgc3dvcmRzIHdpdGggc3VjaCBpbXB1bml0eS4gQnV0IEkKICAgICAgICAgICAgICAgICAgICB3aWxsIHByb3Bvc2UgYSBjb25kaXRpb24gd2hpY2ggSSBteXNlbGYgdGhpbmsgcmVhc29uYWJsZSwgYW5kIHdoaWNoIEkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSBNYXJjdXMgQW50b25pdXMgd2lsbCByZWplY3QuIElmIEkgaGF2ZSBzYWlkIGFueXRoaW5nIGluc3VsdGluZyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGlzIHdheSBvZiBsaWZlIG9yIGFnYWluc3QgaGlzIG1vcmFscywgSSB3aWxsIG5vdCBvYmplY3QgdG8gaGlzIGJlaW5nIG15CiAgICAgICAgICAgICAgICAgICAgYml0dGVyZXN0IGVuZW15LiBCdXQgaWYgSSBoYXZlIG1haW50YWluZWQgdGhlIHNhbWUgaGFiaXRzIHRoYXQgSSBoYXZlIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBhZG9wdGVkIGluIHRoZSByZXB1YmxpYyzigJR0aGF0IGlzLCBpZiBJIGhhdmUgc3Bva2VuIG15IG9waW5pb25zCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyB0aGUgYWZmYWlycyBvZiB0aGUgcmVwdWJsaWMgd2l0aCBmcmVlZG9tLOKAlGluIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBJIGJlZyB0aGF0IGhlIHdpbGwgbm90IGJlIGFuZ3J5IHdpdGggbWUgZm9yIHRoYXQ7IGJ1dCwgaW4gdGhlIG5leHQgcGxhY2UsCiAgICAgICAgICAgICAgICAgICAgaWYgSSBjYW5ub3Qgb2J0YWluIG15IGZpcnN0IHJlcXVlc3QsIEkgYmVnIGF0IGxlYXN0IHRoYXQgaGUgd2lsbCBzaG93IGhpcyBhbmdlcgogICAgICAgICAgICAgICAgICAgIG9ubHkgYXMgaGUgbGVnaXRpbWF0ZWx5IG1heSBzaG93IGl0IHRvIGEgZmVsbG93LWNpdGl6ZW4uIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0IGhpbSBlbXBsb3kgYXJtcywgaWYgaXQgaXMgbmVjZXNzYXJ5LCBhcyBoZSBzYXlzIGl0IGlzLCBmb3IgaGlzIG93biBkZWZlbmNlOgogICAgICAgICAgICAgICAgICAgIG9ubHkgbGV0IG5vdCB0aG9zZSBhcm1zIGluanVyZSB0aG9zZSBtZW4gd2hvIGhhdmUgZGVjbGFyZWQgdGhlaXIgaG9uZXN0CiAgICAgICAgICAgICAgICAgICAgc2VudGltZW50cyBpbiB0aGUgYWZmYWlycyBvZiB0aGUgcmVwdWJsaWMuIE5vdywgd2hhdCBjYW4gYmUgbW9yZSByZWFzb25hYmxlIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGlzIGRlbWFuZD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaWYsIGFzIGhhcyBiZWVuIHNhaWQgdG8gbWUKICAgICAgICAgICAgICAgICAgICBieSBzb21lIG9mIGhpcyBpbnRpbWF0ZSBmcmllbmRzLCBldmVyeSBzcGVlY2ggd2hpY2ggaXMgYXQgYWxsIGNvbnRyYXJ5IHRvIGhpcwogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uIGlzIHZpb2xlbnRseSBvZmZlbnNpdmUsIHRvIGhpbSwgZXZlbiBpZiB0aGVyZSBiZSBubyBpbnN1bHQgaW4gaXQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlcjsgdGhlbiB3ZSB3aWxsIGJlYXIgd2l0aCB0aGUgbmF0dXJhbCBkaXNwb3NpdGlvbiBvZiBvdXIgZnJpZW5kLiBCdXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4sIGF0IHRoZSBzYW1lIHRpbWUsIHNheSB0byBtZSwg4oCcWW91IHdpbGwgbm90IGhhdmUgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBsaWNlbmNlIGdyYW50ZWQgdG8geW91IHdobyBhcmUgdGhlIGFkdmVyc2FyeSBvZiBDYWVzYXIgYXMgbWlnaHQgYmUgY2xhaW1lZCBieQogICAgICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5QaXNvPC9zdXJuYW1lPjwvcGVyc05hbWU+IGhpcyBmYXRoZXItaW4tbGF3LuKAnQogICAgICAgICAgICAgICAgICAgIEFuZCB0aGVuIHRoZXkgd2FybiBtZSBvZiBzb21ldGhpbmcgd2hpY2ggSSBtdXN0IGd1YXJkIGFnYWluc3Q7IGFuZCBjZXJ0YWlubHksCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4Y3VzZSB3aGljaCBzaWNrbmVzcyBzdXBwbGllcyBtZSB3aXRoLCBmb3Igbm90IGNvbWluZyB0byB0aGUgc2VuYXRlLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIGEgbW9yZSB2YWxpZCBvbmUgdGhhbiB0aGF0IHdoaWNoIGlzIGZ1cm5pc2hlZCBieSBkZWF0aC4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI5IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmLCBhcyBoYXMgYmVlbiBzYWlkIHRvIG1lCiAgICAgICAgICAgICAgICAgICAgYnkgc29tZSBvZiBoaXMgaW50aW1hdGUgZnJpZW5kcywgZXZlcnkgc3BlZWNoIHdoaWNoIGlzIGF0IGFsbCBjb250cmFyeSB0byBoaXMKICAgICAgICAgICAgICAgICAgICBpbmNsaW5hdGlvbiBpcyB2aW9sZW50bHkgb2ZmZW5zaXZlLCB0byBoaW0sIGV2ZW4gaWYgdGhlcmUgYmUgbm8gaW5zdWx0IGluIGl0CiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXI7IHRoZW4gd2Ugd2lsbCBiZWFyIHdpdGggdGhlIG5hdHVyYWwgZGlzcG9zaXRpb24gb2Ygb3VyIGZyaWVuZC4gQnV0CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgbWVuLCBhdCB0aGUgc2FtZSB0aW1lLCBzYXkgdG8gbWUsIOKAnFlvdSB3aWxsIG5vdCBoYXZlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgbGljZW5jZSBncmFudGVkIHRvIHlvdSB3aG8gYXJlIHRoZSBhZHZlcnNhcnkgb2YgQ2Flc2FyIGFzIG1pZ2h0IGJlIGNsYWltZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlBpc288L3N1cm5hbWU+PC9wZXJzTmFtZT4gaGlzIGZhdGhlci1pbi1sYXcu4oCdCiAgICAgICAgICAgICAgICAgICAgQW5kIHRoZW4gdGhleSB3YXJuIG1lIG9mIHNvbWV0aGluZyB3aGljaCBJIG11c3QgZ3VhcmQgYWdhaW5zdDsgYW5kIGNlcnRhaW5seSwKICAgICAgICAgICAgICAgICAgICB0aGUgZXhjdXNlIHdoaWNoIHNpY2tuZXNzIHN1cHBsaWVzIG1lIHdpdGgsIGZvciBub3QgY29taW5nIHRvIHRoZSBzZW5hdGUsIHdpbGwKICAgICAgICAgICAgICAgICAgICBub3QgYmUgYSBtb3JlIHZhbGlkIG9uZSB0aGFuIHRoYXQgd2hpY2ggaXMgZnVybmlzaGVkIGJ5IGRlYXRoLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UGlzbzwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.12.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgaW4gdGhlIG5hbWUgb2YgdGhlIGltbW9ydGFsIGdvZHMhIGZvciB3aGlsZSBJIGxvb2sgdXBvbiB5b3UsIE8gRG9sYWJlbGxhLAogICAgICAgICAgICAgICAgICAgIHdobyBhcmUgbW9zdCBkZWFyIHRvIG1lLCBpdCBpcyBpbXBvc3NpYmxlIGZvciBtZSB0byBrZWVwIHNpbGVuY2UgcmVzcGVjdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBlcnJvciBpbnRvIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiAvPiB3aGljaCB5b3UgYXJlIGJvdGggZmFsbGluZzsgZm9yIEkgYmVsaWV2ZSB0aGF0IHlvdSwKICAgICAgICAgICAgICAgICAgICBiZWluZyBib3RoLCBtZW4gb2YgaGlnaCBiaXJ0aCwgZW50ZXJ0YWluaW5nIGxvZnR5IHZpZXdzLCBoYXZlIGJlZW4gZWFnZXIgdG8KICAgICAgICAgICAgICAgICAgICBhY3F1aXJlLCBub3QgbW9uZXksIGFzIHNvbWUgdG9vIGNyZWR1bG91cyBwZW9wbGUgc3VzcGVjdCwgYSB0aGluZyB3aGljaCBoYXMgYXQKICAgICAgICAgICAgICAgICAgICBhbGwgdGltZXMgYmVlbiBzY29ybmVkIGJ5IGV2ZXJ5IGhvbm91cmFibGUgYW5kIGlsbHVzdHJpb3VzIG1hbiwgbm9yIHBvd2VyCiAgICAgICAgICAgICAgICAgICAgcHJvY3VyZWQgYnkgdmlvbGVuY2UgYW5kIGF1dGhvcml0eSBzdWNoIGFzIG5ldmVyIG91Z2h0IHRvIGJlIGVuZHVyZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgUm9tYW4gcGVvcGxlLCBidXQgdGhlIGFmZmVjdGlvbiBvZiB5b3VyIGZlbGxvdy1jaXRpemVucywgYW5kIGdsb3J5LiBCdXQgZ2xvcnkgaXMKICAgICAgICAgICAgICAgICAgICBwcmFpc2UgZm9yIGRlZWRzIHdoaWNoIGhhdmUgYmVlbiBkb25lLCBhbmQgdGhlIGZhbWUgZWFybmVkIGJ5IGdyZWF0IHNlcnZpY2VzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljOyB3aGljaCBpcyBhcHByb3ZlZCBvZiBieSB0aGUgdGVzdGltb255IGJvcm5lIGluIGl0cyBmYXZvdXIsIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgYnkgZXZlcnkgdmlydHVvdXMgbWFuLCBidXQgYWxzbyBieSB0aGUgbXVsdGl0dWRlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+IEkgd291bGQgdGVsbCB5b3UsIE8gRG9sYWJlbGxhLCB3aGF0IHRoZSBmcnVpdCBvZiBnb29kCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyBpcywgaWYgSSBkaWQgbm90IHNlZSB0aGF0IHlvdSBoYXZlIGFscmVhZHkgbGVhcm50IGl0IGJ5IGV4cGVyaWVuY2UKICAgICAgICAgICAgICAgICAgICBiZXlvbmQgYWxsIG90aGVyIG1lbi4gPC9wPgoJCQkJPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIC8+IHdoaWNoIHlvdSBhcmUgYm90aCBmYWxsaW5nOyBmb3IgSSBiZWxpZXZlIHRoYXQgeW91LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGJvdGgsIG1lbiBvZiBoaWdoIGJpcnRoLCBlbnRlcnRhaW5pbmcgbG9mdHkgdmlld3MsIGhhdmUgYmVlbiBlYWdlciB0bwogICAgICAgICAgICAgICAgICAgIGFjcXVpcmUsIG5vdCBtb25leSwgYXMgc29tZSB0b28gY3JlZHVsb3VzIHBlb3BsZSBzdXNwZWN0LCBhIHRoaW5nIHdoaWNoIGhhcyBhdAogICAgICAgICAgICAgICAgICAgIGFsbCB0aW1lcyBiZWVuIHNjb3JuZWQgYnkgZXZlcnkgaG9ub3VyYWJsZSBhbmQgaWxsdXN0cmlvdXMgbWFuLCBub3IgcG93ZXIKICAgICAgICAgICAgICAgICAgICBwcm9jdXJlZCBieSB2aW9sZW5jZSBhbmQgYXV0aG9yaXR5IHN1Y2ggYXMgbmV2ZXIgb3VnaHQgdG8gYmUgZW5kdXJlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGUsIGJ1dCB0aGUgYWZmZWN0aW9uIG9mIHlvdXIgZmVsbG93LWNpdGl6ZW5zLCBhbmQgZ2xvcnkuIEJ1dCBnbG9yeSBpcwogICAgICAgICAgICAgICAgICAgIHByYWlzZSBmb3IgZGVlZHMgd2hpY2ggaGF2ZSBiZWVuIGRvbmUsIGFuZCB0aGUgZmFtZSBlYXJuZWQgYnkgZ3JlYXQgc2VydmljZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWM7IHdoaWNoIGlzIGFwcHJvdmVkIG9mIGJ5IHRoZSB0ZXN0aW1vbnkgYm9ybmUgaW4gaXRzIGZhdm91ciwgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSBieSBldmVyeSB2aXJ0dW91cyBtYW4sIGJ1dCBhbHNvIGJ5IHRoZSBtdWx0aXR1ZGUuIDwvdHJhbnNsYXRpb24+"
translation['1.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gSSB3b3VsZCB0ZWxsIHlvdSwgTyBEb2xhYmVsbGEsIHdoYXQgdGhlIGZydWl0IG9mIGdvb2QKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zIGlzLCBpZiBJIGRpZCBub3Qgc2VlIHRoYXQgeW91IGhhdmUgYWxyZWFkeSBsZWFybnQgaXQgYnkgZXhwZXJpZW5jZQogICAgICAgICAgICAgICAgICAgIGJleW9uZCBhbGwgb3RoZXIgbWVuLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgZGF5IGNhbiB5b3UgcmVjb2xsZWN0IGluIHlvdXIgd2hvbGUgbGlmZSwgYXMgZXZlciBoYXZpbmcgYmVhbWVkIG9uIHlvdSB3aXRoCiAgICAgICAgICAgICAgICAgICAgYSBtb3JlIGpveWZ1bCBsaWdodCB0aGFuIHRoZSBvbmUgb24gd2hpY2gsIGhhdmluZyBwdXJpZmllZCB0aGUgZm9ydW0sIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHJvdXRlZCB0aGUgdGhyb25nIG9mIHdpY2tlZCBtZW4sIGhhdmluZyBpbmZsaWN0ZWQgZHVlIHB1bmlzaG1lbnQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmluZ2xlYWRlcnMgaW4gd2lja2VkbmVzcywgYW5kIGhhdmluZyBkZWxpdmVyZWQgdGhlIGNpdHkgZnJvbSBjb25mbGFncmF0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gZmVhciBvZiBtYXNzYWNyZSwgeW91IHJldHVybmVkIHRvIHlvdXIgaG91c2U/IFdoYXQgb3JkZXIgb2Ygc29jaWV0eSwgd2hhdAogICAgICAgICAgICAgICAgICAgIGNsYXNzIG9mIHBlb3BsZSwgd2hhdCByYW5rLCBvZiBub2JsZXMgZXZlbiB3YXMgdGhlcmUgd2hvIGRpZCBub3QgdGhlbiBzaG93IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgemVhbCBpbiBwcmFpc2luZyBhbmQgY29uZ3JhdHVsYXRpbmcgeW91PyBFdmVuIEksIHRvbywgYmVjYXVzZSBtZW4gdGhvdWdodCB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGhhZCBiZWVuIGFjdGluZyBieSBteSBhZHZpY2UgaW4gdGhvc2UgdHJhbnNhY3Rpb25zLCByZWNlaXZlZCB0aGUgdGhhbmtzIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmdyYXR1bGF0aW9ucyBvZiBnb29kIG1lbiBpbiB5b3VyIG5hbWUuIFJlbWVtYmVyLCBJIHByYXkgeW91LCBPIERvbGFiZWxsYSwgdGhlCiAgICAgICAgICAgICAgICAgICAgdW5hbmltaXR5IGRpc3BsYXllZCBvbiB0aGF0IGRheSBpbiB0aGUgdGhlYXRyZSwgd2hlbiBldmVyeSBvbmUsIGZvcmdldGZ1bCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZXMgb24gYWNjb3VudCBvZiB3aGljaCB0aGV5IGhhZCBiZWVuIHByZXZpb3VzbHkgb2ZmZW5kZWQgd2l0aCB5b3UsIHNob3dlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaW4gY29uc2VxdWVuY2Ugb2YgeW91ciByZWNlbnQgc2VydmljZSB0aGV5IGhhZCBiYW5pc2hlZCBhbGwgcmVjb2xsZWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZm9ybWVyIGluZGlnbmF0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+IENvdWxkIHlvdSwgTwogICAgICAgICAgICAgICAgICAgIERvbGFiZWxsYSwgKGl0IGlzIHdpdGggZ3JlYXQgY29uY2VybiB0aGF0IEkgc3BlYWssKeKAlGNvdWxkIHlvdSwgSSBzYXksCiAgICAgICAgICAgICAgICAgICAgZm9yZmVpdCB0aGlzIGRpZ25pdHkgd2l0aCBlcXVhbmltaXR5PyA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.12.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gQ291bGQgeW91LCBPCiAgICAgICAgICAgICAgICAgICAgRG9sYWJlbGxhLCAoaXQgaXMgd2l0aCBncmVhdCBjb25jZXJuIHRoYXQgSSBzcGVhaywp4oCUY291bGQgeW91LCBJIHNheSwKICAgICAgICAgICAgICAgICAgICBmb3JmZWl0IHRoaXMgZGlnbml0eSB3aXRoIGVxdWFuaW1pdHk/IDwvdHJhbnNsYXRpb24+"
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5b3UsIE8gTWFyY3VzIEFudG9uaXVzLCAoSSBhZGRyZXNzIG15c2VsZiB0byB5b3UsIHRob3VnaCBpbiB5b3VyIGFic2VuY2UsKSBkbwogICAgICAgICAgICAgICAgICAgIHlvdSBub3QgcHJlZmVyIHRoYXQgZGF5IG9uIHdoaWNoIHRoZSBzZW5hdGUgd2FzIGFzc2VtYmxlZCBpbiB0aGUgdGVtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgVGVsbHVzLCB0byBhbGwgdGhvc2UgbW9udGhzIGR1cmluZyB3aGljaCBzb21lIHdobyBkaWZmZXIgZ3JlYXRseSBpbiBvcGluaW9uIGZyb20KICAgICAgICAgICAgICAgICAgICBtZSB0aGluayB0aGF0IHlvdSBoYXZlIGJlZW4gaGFwcHk/IFdoYXQgYSBub2JsZSBzcGVlY2ggd2FzIHRoYXQgb2YgeW91cnMgYWJvdXQKICAgICAgICAgICAgICAgICAgICB1bmFuaW1pdHkhIEZyb20gd2hhdCBhcHByZWhlbnNpb25zIHdlcmUgdGhlIHZldGVyYW5zLCBhbmQgZnJvbSB3aGF0IGFueGlldHkgd2FzCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIHN0YXRlIHJlbGlldmVkIGJ5IHlvdSBvbiB0aGF0IG9jY2FzaW9uISB3aGVuLCBoYXZpbmcgbGFpZCBhc2lkZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgLz4geW91ciBlbm1pdHkgYWdhaW5zdCBoaW0sIHlvdSBvbiB0aGF0IGRheSBmaXJzdCBjb25zZW50ZWQgdGhhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBjb2xsZWFndWUgc2hvdWxkIGJlIHlvdXIgY29sbGVhZ3VlLCBmb3JnZXR0aW5nIHRoYXQgdGhlIGF1c3BpY2VzIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gYW5ub3VuY2VkIGJ5IHlvdXJzZWxmIGFzIGF1Z3VyIG9mIHRoZSBSb21hbiBwZW9wbGU7IGFuZCB3aGVuIHlvdXIgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgc29uIHdhcyBzZW50IGJ5IHlvdSB0byB0aGUgQ2FwaXRvbCB0byBiZSBhIGhvc3RhZ2UgZm9yIHBlYWNlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+IE9uIHdoYXQgZGF5IHdhcyB0aGUgc2VuYXRlIGV2ZXIgbW9yZSBqb3lmdWwgdGhhbiBvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgZGF5PyBvciB3aGVuIHdhcyB0aGUgUm9tYW4gcGVvcGxlIG1vcmUgZGVsaWdodGVkPyB3aGljaCBoYWQgbmV2ZXIgbWV0IGluIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBudW1iZXJzIGluIGFueSBhc3NlbWJseSB3aGF0ZXZlci4gVGhlbiwgYXQgbGFzdCwgd2UgZGlkIGFwcGVhciB0byBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWFsbHkgZGVsaXZlcmVkIGJ5IGJyYXZlIG1lbiwgYmVjYXVzZSwgYXMgdGhleSBoYWQgd2lsbGVkIGl0IHRvIGJlLCBwZWFjZSB3YXMKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgbGliZXJ0eS4gT24gdGhlIG5leHQgZGF5LCBvbiB0aGUgZGF5IGFmdGVyIHRoYXQsIG9uIHRoZSB0aGlyZCBkYXksIGFuZAogICAgICAgICAgICAgICAgICAgIG9uIGFsbCB0aGUgZm9sbG93aW5nIGRheXMsIHlvdSB3ZXJlIG9uIHdpdGhvdXQgaW50ZXJtaXNzaW9uLCBnaXZpbmcgZXZlcnkgZGF5LAogICAgICAgICAgICAgICAgICAgIGFzIGl0IHdlcmUsIHNvbWUgZnJlc2ggcHJlc2VudCB0byB0aGUgcmVwdWJsaWM7IGJ1dCB0aGUgZ3JlYXRlc3Qgb2YgYWxsIHByZXNlbnRzCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoYXQsIHdoZW4geW91IGFib2xpc2hlZCB0aGUgbmFtZSBvZiB0aGUgZGljdGF0b3JzaGlwLiBUaGlzIHdhcyBpbiBlZmZlY3QKICAgICAgICAgICAgICAgICAgICBicmFuZGluZyB0aGUgbmFtZSBvZiB0aGUgZGVhZCBDYWVzYXIgd2l0aCBldmVybGFzdGluZyBpZ25vbWlueSwgYW5kIGl0IHdhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgZG9pbmcs4oCUeW91cnMsIEkgc2F5LiBGb3IgYXMsIG9uIGFjY291bnQgb2YgdGhlIHdpY2tlZG5lc3Mgb2Ygb25lCiAgICAgICAgICAgICAgICAgICAgTWFyY3VzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEzOTk1IiBrZXk9InRnbiw3MDEzOTk1Ij5NYW5saXVzPC9wbGFjZU5hbWU+LCBieSBhIHJlc29sdXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgTWFubGlhbiBmYW1pbHkgaXQgaXMgdW5sYXdmdWwgdGhhdCBhbnkgcGF0cmljaWFuIHNob3VsZCBiZSBjYWxsZWQgTWFubGl1cywgc28KICAgICAgICAgICAgICAgICAgICB5b3UsIG9uIGFjY291bnQgb2YgdGhlIGhhdHJlZCBleGNpdGVkIGJ5IG9uZSBkaWN0YXRvciwgaGF2ZSB1dHRlcmx5IGFib2xpc2hlZAogICAgICAgICAgICAgICAgICAgIHRoZSBuYW1lIG9mIGRpY3RhdG9yLiA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIC8+IHlvdXIgZW5taXR5IGFnYWluc3QgaGltLCB5b3Ugb24gdGhhdCBkYXkgZmlyc3QgY29uc2VudGVkIHRoYXQgeW91cgogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgY29sbGVhZ3VlIHNob3VsZCBiZSB5b3VyIGNvbGxlYWd1ZSwgZm9yZ2V0dGluZyB0aGF0IHRoZSBhdXNwaWNlcyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGFubm91bmNlZCBieSB5b3Vyc2VsZiBhcyBhdWd1ciBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhbmQgd2hlbiB5b3VyIGxpdHRsZQogICAgICAgICAgICAgICAgICAgIHNvbiB3YXMgc2VudCBieSB5b3UgdG8gdGhlIENhcGl0b2wgdG8gYmUgYSBob3N0YWdlIGZvciBwZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['1.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4gT24gd2hhdCBkYXkgd2FzIHRoZSBzZW5hdGUgZXZlciBtb3JlIGpveWZ1bCB0aGFuIG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBkYXk/IG9yIHdoZW4gd2FzIHRoZSBSb21hbiBwZW9wbGUgbW9yZSBkZWxpZ2h0ZWQ/IHdoaWNoIGhhZCBuZXZlciBtZXQgaW4gZ3JlYXRlcgogICAgICAgICAgICAgICAgICAgIG51bWJlcnMgaW4gYW55IGFzc2VtYmx5IHdoYXRldmVyLiBUaGVuLCBhdCBsYXN0LCB3ZSBkaWQgYXBwZWFyIHRvIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHJlYWxseSBkZWxpdmVyZWQgYnkgYnJhdmUgbWVuLCBiZWNhdXNlLCBhcyB0aGV5IGhhZCB3aWxsZWQgaXQgdG8gYmUsIHBlYWNlIHdhcwogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBsaWJlcnR5LiBPbiB0aGUgbmV4dCBkYXksIG9uIHRoZSBkYXkgYWZ0ZXIgdGhhdCwgb24gdGhlIHRoaXJkIGRheSwgYW5kCiAgICAgICAgICAgICAgICAgICAgb24gYWxsIHRoZSBmb2xsb3dpbmcgZGF5cywgeW91IHdlcmUgb24gd2l0aG91dCBpbnRlcm1pc3Npb24sIGdpdmluZyBldmVyeSBkYXksCiAgICAgICAgICAgICAgICAgICAgYXMgaXQgd2VyZSwgc29tZSBmcmVzaCBwcmVzZW50IHRvIHRoZSByZXB1YmxpYzsgYnV0IHRoZSBncmVhdGVzdCBvZiBhbGwgcHJlc2VudHMKICAgICAgICAgICAgICAgICAgICB3YXMgdGhhdCwgd2hlbiB5b3UgYWJvbGlzaGVkIHRoZSBuYW1lIG9mIHRoZSBkaWN0YXRvcnNoaXAuIFRoaXMgd2FzIGluIGVmZmVjdAogICAgICAgICAgICAgICAgICAgIGJyYW5kaW5nIHRoZSBuYW1lIG9mIHRoZSBkZWFkIENhZXNhciB3aXRoIGV2ZXJsYXN0aW5nIGlnbm9taW55LCBhbmQgaXQgd2FzIHlvdXIKICAgICAgICAgICAgICAgICAgICBkb2luZyzigJR5b3VycywgSSBzYXkuIEZvciBhcywgb24gYWNjb3VudCBvZiB0aGUgd2lja2VkbmVzcyBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5OTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMzk5NSI+TWFubGl1czwvcGxhY2VOYW1lPiwgYnkgYSByZXNvbHV0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIE1hbmxpYW4gZmFtaWx5IGl0IGlzIHVubGF3ZnVsIHRoYXQgYW55IHBhdHJpY2lhbiBzaG91bGQgYmUgY2FsbGVkIE1hbmxpdXMsIHNvCiAgICAgICAgICAgICAgICAgICAgeW91LCBvbiBhY2NvdW50IG9mIHRoZSBoYXRyZWQgZXhjaXRlZCBieSBvbmUgZGljdGF0b3IsIGhhdmUgdXR0ZXJseSBhYm9saXNoZWQKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSBvZiBkaWN0YXRvci4gPC90cmFuc2xhdGlvbj4="
translation['1.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiB5b3UgaGFkIGRvbmUgdGhlc2UgbWlnaHR5IGV4cGxvaXRzIGZvciB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYywgZGlkIHlvdQogICAgICAgICAgICAgICAgICAgIHJlcGVudCBvZiB5b3VyIGZvcnR1bmUsIG9yIG9mIHRoZSBkaWduaXR5IGFuZCByZW5vd24gYW5kIGdsb3J5IHdoaWNoIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBhY3F1aXJlZD8gV2hlbmNlIHRoZW4gaXMgdGhpcyBzdWRkZW4gY2hhbmdlPyBJIGNhbm5vdCBiZSBpbmR1Y2VkIHRvIHN1c3BlY3QgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIGJlZW4gY2F1Z2h0IGJ5IHRoZSBkZXNpcmUgb2YgYWNxdWlyaW5nIG1vbmV5OyBldmVyeSBvbmUgbWF5IHNheSB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlcywgYnV0IHdlIGFyZSBub3QgYm91bmQgdG8gYmVsaWV2ZSBzdWNoIGEgdGhpbmc7IGZvciBJIG5ldmVyIHNhdyBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIHNvcmRpZCBvciBhbnl0aGluZyBtZWFuIGluIHlvdS4gQWx0aG91Z2ggYSBtYW4ncyBpbnRpbWF0ZSBmcmllbmRzIGRvIHNvbWV0aW1lcwogICAgICAgICAgICAgICAgICAgIGNvcnJ1cHQgaGlzIG5hdHVyYWwgZGlzcG9zaXRpb24sIHN0aWxsIEkga25vdyB5b3VyIGZpcm1uZXNzOyBhbmQgSSBvbmx5IHdpc2gKICAgICAgICAgICAgICAgICAgICB0aGF0IGFzIHlvdSBhdm9pZCB0aGF0IGZhdWx0LCB5b3UgaGFkIGJlZW4gYWJsZSBhbHNvIHRvIGVzY2FwZSBhbGwgc3VzcGljaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgSSBhbSBtb3JlIGFmcmFpZCBvZiBpcyBsZXN0LCBiZWluZyBpZ25vcmFudCBvZiB0aGUgdHJ1ZSBwYXRoIHRvIGdsb3J5LCB5b3UsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHRoaW5rIGl0IGdsb3Jpb3VzIGZvciB5b3UgdG8gaGF2ZSBtb3JlIHBvd2VyIGJ5IHlvdXJzZWxmIHRoYW4gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgdGhlIHBlb3BsZSBwdXQgdG9nZXRoZXIsIGFuZCBsZXN0IHlvdSBzaG91bGQgcHJlZmVyIGJlaW5nIGZlYXJlZCBieSB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zIHRvIGJlaW5nIGxvdmVkIGJ5IHRoZW0uIEFuZCBpZiB5b3UgZG8gdGhpbmsgc28sIHlvdSBhcmUgaWdub3JhbnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcm9hZCB0byBnbG9yeS4gRm9yIGEgY2l0aXplbiB0byBiZSBkZWFyIHRvIGhpcyBmZWxsb3ctY2l0aXplbnMsIHRvCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZSB3ZWxsIG9mIHRoZSByZXB1YmxpYywgdG8gYmUgcHJhaXNlZCwgdG8gYmUgcmVzcGVjdGVkLCB0byBiZSBsb3ZlZCwgaXMKICAgICAgICAgICAgICAgICAgICBnbG9yaW91czsgYnV0IHRvIGJlIGZlYXJlZCwgYW5kIHRvIGJlIGFuIG9iamVjdCBvZiBoYXRyZWQsIGlzIG9kaW91cywKICAgICAgICAgICAgICAgICAgICBkZXRlc3RhYmxlOyBhbmQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIC8+IG1vcmVvdmVyLCBwcmVnbmFudCB3aXRoIHdlYWtuZXNzIGFuZCBkZWNheS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgd2Ugc2VlIHRoYXQsIGV2ZW4gaW4gdGhlIHBsYXksIHRoZQogICAgICAgICAgICAgICAgICAgIHZlcnkgbWFuIHdobyBzYWlkLCA8cXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsPuKAnFdoYXQgY2FyZSBJIHRob3VnaCBhbGwgbWVuIHNob3VsZCBoYXRlIG15IG5hbWUsIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGw+U28gbG9uZyBhcyBmZWFyIGFjY29tcGFuaWVzIHRoZWlyIGhhdGU/4oCdPC9sPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+IGZvdW5kIHRoYXQgaXQgd2FzIGEgbWlzY2hpZXZvdXMgcHJpbmNpcGxlIHRvIGFjdCB1cG9uLiA8L3A+CgkJCQk8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgLz4gbW9yZW92ZXIsIHByZWduYW50IHdpdGggd2Vha25lc3MgYW5kIGRlY2F5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.14.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdlIHNlZSB0aGF0LCBldmVuIGluIHRoZSBwbGF5LCB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG1hbiB3aG8gc2FpZCwgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcV2hhdCBjYXJlIEkgdGhvdWdoIGFsbCBtZW4gc2hvdWxkIGhhdGUgbXkgbmFtZSwgPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlNvIGxvbmcgYXMgZmVhciBhY2NvbXBhbmllcyB0aGVpciBoYXRlP+KAnTwvbD4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPiBmb3VuZCB0aGF0IGl0IHdhcyBhIG1pc2NoaWV2b3VzIHByaW5jaXBsZSB0byBhY3QgdXBvbi4gPGwgY2xhc3M9InRyYW5zbGF0aW9uIj7igJxXaGF0IGNhcmUgSSB0aG91Z2ggYWxsIG1lbiBzaG91bGQgaGF0ZSBteSBuYW1lLCA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U28gbG9uZyBhcyBmZWFyIGFjY29tcGFuaWVzIHRoZWlyIGhhdGU/4oCdPC9sPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSB3aXNoLCBPIEFudG9uaXVzLCB0aGF0IHlvdSBjb3VsZCByZWNvbGxlY3QgeW91ciBncmFuZGZhdGhlciwgb2Ygd2hvbSwgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSByZXBlYXRlZGx5IGhlYXJkIG1lIHNwZWFrLiBEbyB5b3UgdGhpbmsgdGhhdCBoZSB3b3VsZCBoYXZlIGJlZW4gd2lsbGluZwogICAgICAgICAgICAgICAgICAgIHRvIGRlc2VydmUgZXZlbiBpbW1vcnRhbGl0eSwgYXQgdGhlIHByaWNlIG9mIGJlaW5nIGZlYXJlZCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBsaWNlbnRpb3VzIHVzZSBvZiBhcm1zPyBXaGF0IGhlIGNvbnNpZGVyZWQgbGlmZSwgd2hhdCBoZSBjb25zaWRlcmVkIHByb3NwZXJpdHksCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoZSBiZWluZyBlcXVhbCB0byB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgaW4gZnJlZWRvbSwgYW5kIGNoaWVmIG9mIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbGwgaW4gd29ydGguIFRoZXJlZm9yZSwgdG8gc2F5IG5vIG1vcmUgb2YgdGhlIHByb3NwZXJpdHkgb2YgeW91ciBncmFuZGZhdGhlciwgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBwcmVmZXIgdGhhdCBtb3N0IGJpdHRlciBkYXkgb2YgaGlzIGRlYXRoIHRvIHRoZSBkb21pbmF0aW9uIG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIENpbm5hLCBieSB3aG9tIGhlIHdhcyBtb3N0IGJhcmJhcm91c2x5IHNsYWluLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoeSBzaG91bGQgSSBzZWVrIHRvIG1ha2UgYW4gaW1wcmVzc2lvbiBvbiB5b3UgYnkgbXkgc3BlZWNoPyBGb3IsIGlmIHRoZSBlbmQKICAgICAgICAgICAgICAgICAgICBvZiBDYWl1cyBDYWVzYXIgY2Fubm90IGluZmx1ZW5jZSB5b3UgdG8gcHJlZmVyIGJlaW5nIGxvdmVkIHRvIGJlaW5nIGZlYXJlZCwgbm8KICAgICAgICAgICAgICAgICAgICBzcGVlY2ggb2YgYW55IG9uZSB3aWxsIGRvIGFueSBnb29kIG9yIGhhdmUgYW55IGluZmx1ZW5jZSB3aXRoIHlvdTsgYW5kIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHRoaW5rIGhpbSBoYXBweSBhcmUgdGhlbXNlbHZlcyBtaXNlcmFibGUuIE5vIG9uZSBpcyBoYXBweSB3aG8gbGl2ZXMgb24gc3VjaAogICAgICAgICAgICAgICAgICAgIHRlcm1zIHRoYXQgaGUgbWF5IGJlIHB1dCB0byBkZWF0aCBub3QgbWVyZWx5IHdpdGggaW1wdW5pdHksIGJ1dCBldmVuIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGdsb3J5IG9mIGhpcyBzbGF5ZXIuIFdoZXJlZm9yZSwgY2hhbmdlIHlvdXIgbWluZCwgSSBlbnRyZWF0IHlvdSwgYW5kIGxvb2sKICAgICAgICAgICAgICAgICAgICBoYWNrIHVwb24geW91ciBhbmNlc3RvcnMsIGFuZCBnb3Zlcm4gdGhlIHJlcHVibGljIGluIHN1Y2ggYSB3YXkgdGhhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zIG1heSByZWpvaWNlIHRoYXQgeW91IHdlcmUgYm9ybiB3aXRob3V0IHdoaWNoIG5vIG9uZSBjYW4gYmUgaGFwcHkKICAgICAgICAgICAgICAgICAgICBub3IgaWxsdXN0cmlvdXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.15.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCwgaW5kZWVkLCB5b3UgaGF2ZSBib3RoIG9mIHlvdSBoYWQgbWFueSBqdWRnbWVudHMgZGVsaXZlcmVkIHJlc3BlY3RpbmcgeW91IGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZSwgYnkgd2hpY2ggSSBhbSBncmVhdGx5IGNvbmNlcm5lZCB0aGF0IHlvdSBhcmUgbm90IHN1ZmZpY2llbnRseQogICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZWQuIEZvciB3aGF0IHdhcyB0aGUgbWVhbmluZyBvZiB0aGUgc2hvdXRzIG9mIHRoZSBpbm51bWVyYWJsZSBjcm93ZCBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGNvbGxlY3RlZCBhdCB0aGUgZ2xhZGlhdG9yaWFsIGdhbWVzPyBvciBvZiB0aGUgdmVyc2VzIG1hZGUgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlPyBvciBvZiB0aGUgZXh0cmFvcmRpbmFyeSBhcHBsYXVzZSBhdCB0aGUgc2lnaHQgb2YgdGhlIHN0YXR1ZSBvZiBQb21wZWl1cz8KICAgICAgICAgICAgICAgICAgICBhbmQgYXQgdGhhdCBzaWdodCBvZiB0aGUgdHdvIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgd2hvIGFyZSBvcHBvc2VkIHRvIHlvdT8gQXJlCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzIGEgZmVlYmxlIGluZGljYXRpb24gb2YgdGhlIGluY3JlZGlibGUgdW5hbmltaXR5IG9mIHRoZSBlbnRpcmUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU/IFdoYXQgbW9yZT8gRGlkIHRoZSBhcHBsYXVzZSBhdCB0aGUgZ2FtZXMgb2YgQXBvbGxvLCBvciwgSSBzaG91bGQgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgc2F5LCB0ZXN0aW1vbnkgYW5kIGp1ZGdtZW50IHRoZXJlIGdpdmVuIGJ5IHRoZSBSb21hbiBwZW9wbGUsIGFwcGVhciB0byB5b3Ugb2YKICAgICAgICAgICAgICAgICAgICBzbWFsbCBpbXBvcnRhbmNlPyBPaCEgaGFwcHkgYXJlIHRob3NlIG1lbiB3aG8sIHRob3VnaCB0aGV5IHRoZW1zZWx2ZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIHVuYWJsZSB0byBiZSBwcmVzZW50IG9uIGFjY291bnQgb2YgdGhlIHZpb2xlbmNlIG9mIGFybXMsIHN0aWxsIHdlcmUgcHJlc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHNwaXJpdC4gPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIC8+IGFuZCBoYWQgYSBwbGFjZSBpbiB0aGUgYnJlYXN0cyBhbmQgaGVhcnRzIG9mIHRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZS4gVW5sZXNzLCBwZXJoYXBzLCB5b3UgdGhpbmsgdGhhdCBpdCB3YXMgQWNjaXVzIHdobyB3YXMgYXBwbGF1ZGVkIG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbiwgYW5kIHdobyBib3JlIG9mZiB0aGUgcGFsbSBzaXh0eSB5ZWFycyBhZnRlciBoaXMgZmlyc3QgYXBwZWFyYW5jZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IEJydXR1cywgd2hvIHdhcyBhYnNlbnQgZnJvbSB0aGUgZ2FtZXMgd2hpY2ggaGUgaGltc2VsZiB3YXMgZXhoaWJpdGluZywgd2hpbGUKICAgICAgICAgICAgICAgICAgICBhdCB0aGF0IG1vc3Qgc3BsZW5kaWQgc3BlY3RhY2xlIHRoZSBSb21hbiBwZW9wbGUgc2hvd2VkIHRoZWlyIHplYWwgaW4gaGlzIGZhdm91cgogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSB3YXMgYWJzZW50LCBhbmQgc29vdGhlZCB0aGVpciBvd24gcmVncmV0IGZvciB0aGVpciBkZWxpdmVyZXIgYnkKICAgICAgICAgICAgICAgICAgICB1bmludGVycnVwdGVkIGFwcGxhdXNlIGFuZCBjbGFtb3VyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgLz4gYW5kIGhhZCBhIHBsYWNlIGluIHRoZSBicmVhc3RzIGFuZCBoZWFydHMgb2YgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLiBVbmxlc3MsIHBlcmhhcHMsIHlvdSB0aGluayB0aGF0IGl0IHdhcyBBY2NpdXMgd2hvIHdhcyBhcHBsYXVkZWQgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uLCBhbmQgd2hvIGJvcmUgb2ZmIHRoZSBwYWxtIHNpeHR5IHllYXJzIGFmdGVyIGhpcyBmaXJzdCBhcHBlYXJhbmNlLCBhbmQKICAgICAgICAgICAgICAgICAgICBub3QgQnJ1dHVzLCB3aG8gd2FzIGFic2VudCBmcm9tIHRoZSBnYW1lcyB3aGljaCBoZSBoaW1zZWxmIHdhcyBleGhpYml0aW5nLCB3aGlsZQogICAgICAgICAgICAgICAgICAgIGF0IHRoYXQgbW9zdCBzcGxlbmRpZCBzcGVjdGFjbGUgdGhlIFJvbWFuIHBlb3BsZSBzaG93ZWQgdGhlaXIgemVhbCBpbiBoaXMgZmF2b3VyCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIHdhcyBhYnNlbnQsIGFuZCBzb290aGVkIHRoZWlyIG93biByZWdyZXQgZm9yIHRoZWlyIGRlbGl2ZXJlciBieQogICAgICAgICAgICAgICAgICAgIHVuaW50ZXJydXB0ZWQgYXBwbGF1c2UgYW5kIGNsYW1vdXIuIDwvdHJhbnNsYXRpb24+"
translation['1.15.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBteXNlbGYsIGluZGVlZCwgYW0gYSBtYW4gd2hvIGhhdmUgYXQgYWxsIHRpbWVzIGRlc3Bpc2VkIHRoYXQgYXBwbGF1c2Ugd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBiZXN0b3dlZCBieSB0aGUgdnVsZ2FyIGNyb3dkLCBidXQgYXQgdGhlIHNhbWUgdGltZSwgd2hlbiBpdCBpcyBiZXN0b3dlZCBieSB0aG9zZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBoaWdoZXN0LCBhbmQgb2YgdGhlIG1pZGRsZSwgYW5kIG9mIHRoZSBsb3dlc3QgcmFuaywgYW5kLCBpbiBzaG9ydCwgYnkgYWxsCiAgICAgICAgICAgICAgICAgICAgcmFua3MgdG9nZXRoZXIsIGFuZCB3aGVuIHRob3NlIG1lbiB3aG8gd2VyZSBwcmV2aW91c2x5IGFjY3VzdG9tZWQgdG8gYWltIGF0CiAgICAgICAgICAgICAgICAgICAgbm90aGluZyBidXQgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlIGtlZXAgYWxvb2YsIEkgdGhlbiB0aGluayB0aGF0LCBub3QgbWVyZQogICAgICAgICAgICAgICAgICAgIGFwcGxhdXNlLCBidXQgYSBkZWxpYmVyYXRlIHZlcmRpY3QuIElmIHRoaXMgYXBwZWFycyB0byB5b3UgdW5pbXBvcnRhbnQsIHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgaW4gcmVhbGl0eSBtb3N0IHNpZ25pZmljYW50LCBkbyB5b3UgYWxzbyBkZXNwaXNlIHRoZSBmYWN0IG9mIHdoaWNoIHlvdSBoYXZlIGhhZAogICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2Us4oCUbmFtZWx5LCB0aGF0IHRoZSBsaWZlIG9mIEF1bHVzIEhpcnRpdXMgaXMgc28gZGVhciB0byB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGU/IEZvciBpdCB3YXMgc3VmZmljaWVudCBmb3IgaGltIHRvIGJlIGVzdGVlbWVkIGJ5IHRoZSBSb21hbiBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBhcyBoZSBpczsgdG8gYmUgcG9wdWxhciBhbW9uZyBoaXMgZnJpZW5kcywgaW4gd2hpY2ggcmVzcGVjdCBoZSBzdXJwYXNzZXMKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHk7IHRvIGJlIGJlbG92ZWQgYnkgaGlzIG93biBraW5zbWVuLCB3aG8gbG92ZSBoaW0gYmV5b25kIG1lYXN1cmU7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHdob3NlIGNhc2UgYmVmb3JlIGRvIHdlIGV2ZXIgcmVjb2xsZWN0IHN1Y2ggYW54aWV0eSBhbmQgc3VjaCBmZWFyIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgbWFuaWZlc3RlZD8gQ2VydGFpbmx5IGluIG5vIG9uZSdzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.15.38'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UbyB3aGF0IGRlc3Rpbnkgb2YgbWluZSwgTyBjb25zY3JpcHQgZmF0aGVycywgc2hhbGwgSSBzYXkgdGhhdCBpdCBpcyBvd2luZywgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vbmUgZm9yIHRoZSBsYXN0IHR3ZW50eSB5ZWFycyBoYXMgYmVlbiBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMgd2l0aG91dCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHRpbWUgZGVjbGFyaW5nIHdhciBhZ2FpbnN0IG1lPyBOb3IgaXMgdGhlcmUgYW55IG5lY2Vzc2l0eSBmb3IgbmFtaW5nIGFueQogICAgICAgICAgICAgICAgICAgIHBhcnRpY3VsYXIgcGVyc29uOyB5b3UgeW91cnNlbHZlcyByZWNvbGxlY3QgaW5zdGFuY2VzIGluIHByb29mIG9mIG15IHN0YXRlbWVudC4KICAgICAgICAgICAgICAgICAgICBUaGV5IGhhdmUgYWxsIGhpdGhlcnRvIHN1ZmZlcmVkIHNldmVyZXIgcHVuaXNobWVudHMgdGhhbiBJIGNvdWxkIGhhdmUgd2lzaGVkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW07IGJ1dCBJIG1hcnZlbCB0aGF0IHlvdSwgTyBBbnRvbml1cywgZG8gbm90IGZlYXIgdGhlIGVuZCBvZiB0aGVzZSBtZW4gd2hvc2UKICAgICAgICAgICAgICAgICAgICBjb25kdWN0IHlvdSBhcmUgaW1pdGF0aW5nLiBBbmQgaW4gb3RoZXJzIEkgd2FzIGxlc3Mgc3VycHJpc2VkIGF0IHRoaXMuIE5vbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4gb2YgZm9ybWVyIHRpbWVzIHdhcyBhIHZvbHVudGFyeSBlbmVteSB0byBtZTsgYWxsIG9mIHRoZW0gd2VyZSBhdHRhY2tlZAogICAgICAgICAgICAgICAgICAgIGJ5IG1lIGZvciB0aGUgc2FrZSBvZiB0aGUgcmVwdWJsaWMuIEJ1dCB5b3UsIHdobyBoYXZlIG5ldmVyIGJlZW4gaW5qdXJlZCBieSBtZSwKICAgICAgICAgICAgICAgICAgICBub3QgZXZlbiBieSBhIHdvcmQsIGluIG9yZGVyIHRvIGFwcGVhciBtb3JlIGF1ZGFjaW91cyB0aGFuIENhdGlsaW5lLCBtb3JlCiAgICAgICAgICAgICAgICAgICAgZnJhbnRpYyB0aGFuIENsb2RpdXMsIGhhdmUgb2YgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIC8+IHlvdXIgb3duIGFjY29yZCBhdHRhY2tlZCBtZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgYWJ1c2UsIGFuZCBoYXZlIGNvbnNpZGVyZWQgdGhhdCB5b3VyIGFsaWVuYXRpb24gZnJvbSBtZSB3b3VsZCBiZSBhCiAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb24gb2YgeW91IHRvIGltcGlvdXMgY2l0aXplbnMuIDwvcD4KCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiAvPiB5b3VyIG93biBhY2NvcmQgYXR0YWNrZWQgbWUgd2l0aAogICAgICAgICAgICAgICAgICAgIGFidXNlLCBhbmQgaGF2ZSBjb25zaWRlcmVkIHRoYXQgeW91ciBhbGllbmF0aW9uIGZyb20gbWUgd291bGQgYmUgYQogICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uIG9mIHlvdSB0byBpbXBpb3VzIGNpdGl6ZW5zLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgYW0gSSB0byB0aGluaz8gdGhhdCBJIGhhdmUgYmVlbiBkZXNwaXNlZD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgSSBzZWUgbm90aGluZyBlaXRoZXIgaW4gbXkgbGlmZSwgb3IgaW4gbXkgaW5mbHVlbmNlIGluIHRoZSBjaXR5LCBvciBpbiBteQogICAgICAgICAgICAgICAgICAgIGV4cGxvaXRzLCBvciBldmVuIGluIHRoZSBtb2RlcmF0ZSBhYmlsaXRpZXMgd2l0aCB3aGljaCBJIGFtIGVuZG93ZWQsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgY2FuIGRlc3Bpc2UuIERpZCBoZSB0aGluayB0aGF0IGl0IHdhcyBlYXNpZXN0IHRvIGRpc3BhcmFnZSBtZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGU/IGEgYm9keSB3aGljaCBoYXMgYm9ybmUgaXRzIHRlc3RpbW9ueSBpbiBmYXZvdXIgb2YgbWFueSBtb3N0IGlsbHVzdHJpb3VzCiAgICAgICAgICAgICAgICAgICAgQ2l0aXplbnMgdGhhdCB0aGV5IGdvdmVybmVkIHRoZSByZXB1YmxpYyB3ZWxsLCBidXQgaW4gZmF2b3VyIG9mIG1lIGFsb25lLCBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBtZW4sIHRoYXQgSSBwcmVzZXJ2ZWQgaXQuIE9yIGRpZCBoZSB3aXNoIHRvIGNvbnRlbmQgd2l0aCBtZSBpbiBhIHJpdmFscnkgb2YKICAgICAgICAgICAgICAgICAgICBlbG9xdWVuY2U/IFRoaXMsIGluZGVlZCwgaXMgYW4gYWN0IG9mIGdlbmVyb3NpdHk7IGZvciB3aGF0IGNvdWxkIGJlIGEgbW9yZQogICAgICAgICAgICAgICAgICAgIGZlcnRpbGUgb3IgcmljaGVyIHN1YmplY3QgZm9yIG1lLCB0aGFuIHRvIGhhdmUgdG8gc3BlYWsgaW4gZGVmZW5jZSBvZiBteXNlbGYgYW5kCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBBbnRvbml1cz8gVGhpcywgaW4gZmFjdCwgaXMgdGhlIHRydXRoLiBIZSB0aG91Z2h0IGl0IGltcG9zc2libGUgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2F0aXNmYWN0aW9uIG9mIHRob3NlIG1lbiB3aG8gcmVzZW1ibGVkIGhpbXNlbGYsIHRoYXQgaGUgd2FzIGFuIGVuZW15IHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvdW50cnksIGlmIGhlIHdhcyBub3QgYWxzbyBhbiBlbmVteSB0byBtZS4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgYmVmb3JlIEkgbWFrZSBoaW0gYW55IHJlcGx5IG9uIHRoZSBvdGhlciB0b3BpY3Mgb2YgaGlzIHNwZWVjaCwgSSB3aWxsIHNheQogICAgICAgICAgICAgICAgICAgIGEgZmV3IHdvcmRzIHJlc3BlY3RpbmcgdGhlIGZyaWVuZHNoaXAgZm9ybWVybHkgc3Vic2lzdGluZyBiZXR3ZWVuIHVzLCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBhY2N1c2VkIG1lIG9mIHZpb2xhdGluZyzigJRmb3IgdGhhdCBJIGNvbnNpZGVyIGEgbW9zdCBzZXJpb3VzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIEkgc2VlIG5vdGhpbmcgZWl0aGVyIGluIG15IGxpZmUsIG9yIGluIG15IGluZmx1ZW5jZSBpbiB0aGUgY2l0eSwgb3IgaW4gbXkKICAgICAgICAgICAgICAgICAgICBleHBsb2l0cywgb3IgZXZlbiBpbiB0aGUgbW9kZXJhdGUgYWJpbGl0aWVzIHdpdGggd2hpY2ggSSBhbSBlbmRvd2VkLCB3aGljaAogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGNhbiBkZXNwaXNlLiBEaWQgaGUgdGhpbmsgdGhhdCBpdCB3YXMgZWFzaWVzdCB0byBkaXNwYXJhZ2UgbWUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlPyBhIGJvZHkgd2hpY2ggaGFzIGJvcm5lIGl0cyB0ZXN0aW1vbnkgaW4gZmF2b3VyIG9mIG1hbnkgbW9zdCBpbGx1c3RyaW91cwogICAgICAgICAgICAgICAgICAgIENpdGl6ZW5zIHRoYXQgdGhleSBnb3Zlcm5lZCB0aGUgcmVwdWJsaWMgd2VsbCwgYnV0IGluIGZhdm91ciBvZiBtZSBhbG9uZSwgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgbWVuLCB0aGF0IEkgcHJlc2VydmVkIGl0LiBPciBkaWQgaGUgd2lzaCB0byBjb250ZW5kIHdpdGggbWUgaW4gYSByaXZhbHJ5IG9mCiAgICAgICAgICAgICAgICAgICAgZWxvcXVlbmNlPyBUaGlzLCBpbmRlZWQsIGlzIGFuIGFjdCBvZiBnZW5lcm9zaXR5OyBmb3Igd2hhdCBjb3VsZCBiZSBhIG1vcmUKICAgICAgICAgICAgICAgICAgICBmZXJ0aWxlIG9yIHJpY2hlciBzdWJqZWN0IGZvciBtZSwgdGhhbiB0byBoYXZlIHRvIHNwZWFrIGluIGRlZmVuY2Ugb2YgbXlzZWxmIGFuZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgQW50b25pdXM/IFRoaXMsIGluIGZhY3QsIGlzIHRoZSB0cnV0aC4gSGUgdGhvdWdodCBpdCBpbXBvc3NpYmxlIHRvIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhdGlzZmFjdGlvbiBvZiB0aG9zZSBtZW4gd2hvIHJlc2VtYmxlZCBoaW1zZWxmLCB0aGF0IGhlIHdhcyBhbiBlbmVteSB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBjb3VudHJ5LCBpZiBoZSB3YXMgbm90IGFsc28gYW4gZW5lbXkgdG8gbWUuIDwvdHJhbnNsYXRpb24+"
translation['2.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgYmVmb3JlIEkgbWFrZSBoaW0gYW55IHJlcGx5IG9uIHRoZSBvdGhlciB0b3BpY3Mgb2YgaGlzIHNwZWVjaCwgSSB3aWxsIHNheQogICAgICAgICAgICAgICAgICAgIGEgZmV3IHdvcmRzIHJlc3BlY3RpbmcgdGhlIGZyaWVuZHNoaXAgZm9ybWVybHkgc3Vic2lzdGluZyBiZXR3ZWVuIHVzLCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBhY2N1c2VkIG1lIG9mIHZpb2xhdGluZyzigJRmb3IgdGhhdCBJIGNvbnNpZGVyIGEgbW9zdCBzZXJpb3VzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaGFzIGNvbXBsYWluZWQgdGhhdCBJIHBsZWFkZWQgb25jZSBhZ2FpbnN0IGhpcyBpbnRlcmVzdC4gV2FzIEkgbm90IHRvIHBsZWFkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBvbmUgd2l0aCB3aG9tIEkgd2FzIHF1aXRlIHVuY29ubmVjdGVkLCBpbiBiZWhhbGYgb2YgYW4gaW50aW1hdGUKICAgICAgICAgICAgICAgICAgICBhY3F1YWludGFuY2UsIG9mIGEgZGVhciBmcmllbmQ/IFdhcyBJIG5vdCB0byBwbGVhZCBhZ2FpbnN0IGludGVyZXN0IGFjcXVpcmVkIG5vdAogICAgICAgICAgICAgICAgICAgIGJ5IGhvcGVzIG9mIHZpcnR1ZSwgYnV0IGJ5IHRoZSBkaXNncmFjZSBvZiB5b3V0aD8gV2FzIEkgbm90IHRvIHJlYWN0IGFnYWluc3QgYW4KICAgICAgICAgICAgICAgICAgICBpbmp1c3RpY2Ugd2hpY2ggdGhhdCBtYW4gcHJvY3VyZWQgdG8gYmUgZG9uZSBieSB0aGUgb2JzZXF1aW91c25lc3Mgb2YgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgaW5pcXVpdG91cyBpbnRlcnBvc2VyIG9mIGhpcyB2ZXRvLCBub3QgYnkgYW55IGxhdyByZWd1bGF0aW5nIHRoZSBwcml2aWxlZ2VzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHByYWV0b3I/IEJ1dCBJIGltYWdpbmUgdGhhdCB0aGlzIHdhcyBtZW50aW9uZWQgYnkgeW91LCBpbiBvcmRlciB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHJlY29tbWVuZCB5b3Vyc2VsZiB0byB0aGUgY2l0aXplbnMsIGlmIHRoZXkgYWxsIHJlY29sbGVjdGVkIHRoYXQgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgc29uLWluLWxhdyBvZiBhIGZyZWVkbWFuLCBhbmQgdGhhdCB5b3VyIGNoaWxkcmVuIHdlcmUgdGhlIGdyYW5kc29ucyBvZgogICAgICAgICAgICAgICAgICAgIFF1aW50dXMgRmFkaXVzIGEgZnJlZWRtYW4uIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHlvdSBoYWQgZW50aXJlbHkgZGV2b3RlZCB5b3Vyc2VsZiB0byBteSBwcmluY2lwbGVzOyAoZm9yIHRoaXMgaXMgd2hhdCB5b3UKICAgICAgICAgICAgICAgICAgICBzYWlkOykgeW91IGhhZCBiZWVuIGluIHRoZSBoYWJpdCBvZiBjb21pbmcgdG8gbXkgaG91c2UuIEluIHRydXRoLCBpZiB5b3UgaGFkCiAgICAgICAgICAgICAgICAgICAgZG9uZSBzbywgeW91IHdvdWxkIG1vcmUgaGF2ZSBjb25zdWx0ZWQgeW91ciBvd24gY2hhcmFjdGVyIGFuZCB5b3VyIHJlcHV0YXRpb24KICAgICAgICAgICAgICAgICAgICBmb3IgY2hhc3RpdHkuIEJ1dCB5b3UgZGlkIG5vdCBkbyBzbywgbm9yLCBpZiB5b3UgaGFkIHdpc2hlZCBpdCwgd291bGQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDdXJpbyBoYXZlIGV2ZXIgc3VmZmVyZWQgeW91IHRvIGRvIHNvLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4gWW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSA8cGIgbj0iMjEiIC8+IHNhaWQsIHRoYXQgeW91IHJldGlyZWQgaW4gbXkgZmF2b3VyIGZyb20gdGhlIGNvbnRlc3QgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGF1Z3Vyc2hpcC4gT2ggdGhlIGluY3JlZGlibGUgYXVkYWNpdHkhIG9oIHRoZSBtb25zdHJvdXMgaW1wdWRlbmNlIG9mIHN1Y2ggYW4KICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24hIEZvciwgYXQgdGhlIHRpbWUgd2hlbiBDbmFldXMgUG9tcGVpdXMgYW5kIFF1aW50dXMgSG9ydGVuc2l1cyBuYW1lZCBtZQogICAgICAgICAgICAgICAgICAgIGFzIGF1Z3VyLCBhZnRlciBJIGhhZCBiZWVuIHdpc2hlZCBmb3IgYXMgc3VjaCBieSB0aGUgd2hvbGUgY29sbGVnZSwgKGZvciBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgbGF3ZnVsIGZvciBtZSB0byBiZSBwdXQgaW4gbm9taW5hdGlvbiBieSBtb3JlIHRoYW4gdHdvIG1lbWJlcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY29sbGVnZSwpIHlvdSB3ZXJlIG5vdG9yaW91c2x5IGluc29sdmVudCwgbm9yIGRpZCB5b3UgdGhpbmsgaXQgcG9zc2libGUgZm9yIHlvdXIKICAgICAgICAgICAgICAgICAgICBzYWZldHkgdG8gYmUgc2VjdXJlZCBieSBhbnkgb3RoZXIgbWVhbnMgdGhhbiBieSB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIHJlcHVibGljLgogICAgICAgICAgICAgICAgICAgIEJ1dCB3YXMgaXQgcG9zc2libGUgZm9yIHlvdSB0byBzdGFuZCBmb3IgdGhlIGF1Z3Vyc2hpcCBhdCBhIHRpbWUgd2hlbiBDdXJpbyB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+PyBvciBldmVuIGF0IHRoZSB0aW1lIHdoZW4KICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBlbGVjdGVkLCBjb3VsZCB5b3UgaGF2ZSBnb3QgdGhlIHZvdGVzIG9mIG9uZSBzaW5nbGUgdHJpYmUgd2l0aG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBhaWQgb2YgQ3VyaW8/IHdob3NlIGludGltYXRlIGZyaWVuZHMgZXZlbiB3ZXJlIGNvbnZpY3RlZCBvZiB2aW9sZW5jZSBmb3IgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0b28gemVhbG91cyBpbiB5b3VyIGZhdm91ci4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBZb3UKICAgICAgICAgICAgICAgICAgICBoYXZlIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiAvPiBzYWlkLCB0aGF0IHlvdSByZXRpcmVkIGluIG15IGZhdm91ciBmcm9tIHRoZSBjb250ZXN0IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBhdWd1cnNoaXAuIE9oIHRoZSBpbmNyZWRpYmxlIGF1ZGFjaXR5ISBvaCB0aGUgbW9uc3Ryb3VzIGltcHVkZW5jZSBvZiBzdWNoIGFuCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uISBGb3IsIGF0IHRoZSB0aW1lIHdoZW4gQ25hZXVzIFBvbXBlaXVzIGFuZCBRdWludHVzIEhvcnRlbnNpdXMgbmFtZWQgbWUKICAgICAgICAgICAgICAgICAgICBhcyBhdWd1ciwgYWZ0ZXIgSSBoYWQgYmVlbiB3aXNoZWQgZm9yIGFzIHN1Y2ggYnkgdGhlIHdob2xlIGNvbGxlZ2UsIChmb3IgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGxhd2Z1bCBmb3IgbWUgdG8gYmUgcHV0IGluIG5vbWluYXRpb24gYnkgbW9yZSB0aGFuIHR3byBtZW1iZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbGxlZ2UsKSB5b3Ugd2VyZSBub3RvcmlvdXNseSBpbnNvbHZlbnQsIG5vciBkaWQgeW91IHRoaW5rIGl0IHBvc3NpYmxlIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5IHRvIGJlIHNlY3VyZWQgYnkgYW55IG90aGVyIG1lYW5zIHRoYW4gYnkgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYy4KICAgICAgICAgICAgICAgICAgICBCdXQgd2FzIGl0IHBvc3NpYmxlIGZvciB5b3UgdG8gc3RhbmQgZm9yIHRoZSBhdWd1cnNoaXAgYXQgYSB0aW1lIHdoZW4gQ3VyaW8gd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+PyBvciBldmVuIGF0IHRoZSB0aW1lIHdoZW4KICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBlbGVjdGVkLCBjb3VsZCB5b3UgaGF2ZSBnb3QgdGhlIHZvdGVzIG9mIG9uZSBzaW5nbGUgdHJpYmUgd2l0aG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBhaWQgb2YgQ3VyaW8/IHdob3NlIGludGltYXRlIGZyaWVuZHMgZXZlbiB3ZXJlIGNvbnZpY3RlZCBvZiB2aW9sZW5jZSBmb3IgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0b28gemVhbG91cyBpbiB5b3VyIGZhdm91ci4gPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IEkgYXZhaWxlZCBteXNlbGYgb2YgeW91ciBmcmllbmRseSBhc3Npc3RhbmNlLiBPZiB3aGF0IGFzc2lzdGFuY2U/IEFsdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgdGhlIGluc3RhbmNlIHdoaWNoIHlvdSBjaXRlIEkgaGF2ZSBteXNlbGYgYXQgYWxsIHRpbWVzIG9wZW5seSBhZG1pdHRlZC4gSQogICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZCBjb25mZXNzaW5nIHRoYXQgSSB3YXMgdW5kZXIgb2JsaWdhdGlvbnMgdG8geW91LCB0byBsZXR0aW5nIG15c2VsZgogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBhbnkgZm9vbGlzaCBwZXJzb24gbm90IHN1ZmZpY2llbnRseSBncmF0ZWZ1bC4gSG93ZXZlciwgd2hhdCB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZG5lc3MgdGhhdCB5b3UgZGlkIG1lPyBub3Qga2lsbGluZyBtZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDA5NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0MDk0Ij5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+PyBXb3VsZCB5b3UgdGhlbiBoYXZlIHNsYWluIHRoZSBtYW4gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjb25xdWVyb3IgaGltc2VsZiB3aG8gY29uZmVycmVkIG9uIHlvdSwgYXMgeW91IHVzZWQgdG8gYm9hc3QsIHRoZSBjaGllZiByYW5rCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgYWxsIGhpcyByb2JiZXJzLCBoYWQgZGVzaXJlZCB0byBiZSBzYWZlLCBhbmQgaGFkIGVuam9pbmVkIHRvIGdvIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+PyBHcmFudCB0aGF0IHlvdSBjb3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgc2xhaW4gaGltLCBpcyBub3QgdGhpcywgTyBjb25zY3JpcHQgZmF0aGVycywgc3VjaCBhIGtpbmRuZXNzIGFzIGlzIGRvbmUgYnkKICAgICAgICAgICAgICAgICAgICBiYW5kaXR0aSwgd2hvIGFyZSBjb250ZW50ZWQgd2l0aCBiZWluZyBhYmxlIHRvIGJvYXN0IHRoYXQgdGhleSBoYXZlIGdyYW50ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBsaXZlcyB0byBhbGwgdGhvc2UgbWVuIHdob3NlIGxpdmVzIHRoZXkgaGF2ZSBub3QgdGFrZW4/IGFuZCBpZiB0aGF0IHdlcmUKICAgICAgICAgICAgICAgICAgICByZWFsbHkgYSBraW5kbmVzcywgdGhlbiB0aG9zZSB3aG8gc2xldyB0aGF0IG1hbiBieSB3aG9tIHRoZXkgdGhlbXNlbHZlcyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHNhdmVkLCBhbmQgd2hvbSB5b3UgeW91cnNlbGYgYXJlIGluIHRoZSBoYWJpdCBvZiBzdHlsaW5nIG1vc3QgaWxsdXN0cmlvdXMgbWVuLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5ldmVyIGhhdmUgYWNxdWlyZWQgc3VjaCBpbW1vcnRhbCBnbG9yeS4gQnV0IHdoYXQgc29ydCBvZiBraW5kbmVzcyBpcyBpdCwKICAgICAgICAgICAgICAgICAgICB0byBoYXZlIGFic3RhaW5lZCBmcm9tIGNvbW1pdHRpbmcgbmVmYXJpb3VzIHdpY2tlZG5lc3M/IEl0IGlzIGEgY2FzZSBpbiB3aGljaCBpdAogICAgICAgICAgICAgICAgICAgIG91Z2h0IG5vdCB0byBhcHBlYXIgc28gZGVsaWdodGZ1bCB0byBtZSBub3QgdG8gaGF2ZSBiZWVuIGtpbGxlZCBieSB5b3UsIGFzCiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmxlLCB0aGF0IGl0IHNob3VsZCBoYXZlIGJlZW4gaW4geW91ciBwb3dlciB0byBkbyBzdWNoIGEgdGhpbmcgd2l0aAogICAgICAgICAgICAgICAgICAgIGltcHVuaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSwgaG93ZXZlciwgZ3JhbnQgdGhhdCBpdCB3YXMgYQogICAgICAgICAgICAgICAgICAgIGtpbmRuZXNzLCBzaW5jZSBubyBncmVhdGVyIGtpbmRuZXNzIGNvdWxkIGJlIHJlY2VpdmVkIGZyb20gYSByb2JiZXIsIHN0aWxsIGluCiAgICAgICAgICAgICAgICAgICAgd2hhdCBwb2ludCBjYW4geW91IGNhbGwgbWUgdW5ncmF0ZWZ1bD8gT3VnaHQgSSBub3QgdG8gY29tcGxhaW4gb2YgdGhlIHJ1aW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMsIGxlc3QgSSBzaG91bGQgYXBwZWFyIHVuZ3JhdGVmdWwgdG93YXJkcyB5b3U/IDxwYiBuPSIyMiIgLz4gQnV0IGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBjb21wbGFpbnQsIG1vdXJuZnVsIGluZGVlZCBhbmQgbWlzZXJhYmxlLCBidXQgc3RpbGwgdW5hdm9pZGFibGUgZm9yIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhhdCByYW5rIGluIHdoaWNoIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGhhdmUgcGxhY2VkIG1lLCB3aGF0IGRpZCBJIHNheSB0aGF0IHdhcyBpbnN1bHRpbmc/IHRoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgb3RoZXJ3aXNlIHRoYW4gbW9kZXJhdGU/IHRoYXQgd2FzIG90aGVyd2lzZSB0aGFuIGZyaWVuZGx5PyBhbmQgd2hhdCBpbnN0YW5jZQogICAgICAgICAgICAgICAgICAgIHdhcyBpdCBub3Qgb2YgbW9kZXJhdGlvbiB0byBjb21wbGFpbiBvZiB0aGUgY29uZHVjdCBvZiBNYXJjdXMgQW50b25pdXMsIGFuZCB5ZXQKICAgICAgICAgICAgICAgICAgICB0byBhYnN0YWluIGZyb20gYW55IGFidXNpdmUgZXhwcmVzc2lvbnM/IGVzcGVjaWFsbHkgd2hlbiB5b3UgaGFkIHNjYXR0ZXJlZAogICAgICAgICAgICAgICAgICAgIGFicm9hZCBhbGwgcmVsaWNzIG9mIHRoZSByZXB1YmxpYzsgd2hlbiBldmVyeXRoaW5nIHdhcyBvbiBzYWxlIGF0IHlvdXIgaG91c2UgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBpbmZhbW91cyB0cmFmZmljOyB3aGVuIHlvdSBjb25mZXNzZWQgdGhhdCB0aG9zZSBsYXdzIHdoaWNoIGhhZCBuZXZlcgogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvbXVsZ2F0ZWQsIGhhZCBiZWVuIHBhc3NlZCB3aXRoIHJlZmVyZW5jZSB0byB5b3UsIGFuZCBieSB5b3U7IHdoZW4geW91LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGF1Z3VyLCBoYWQgYWJvbGlzaGVkIHRoZSBhdXNwaWNlcywgYmVpbmcgY29uc3VsLCBoYWQgdGFrZW4gYXdheSB0aGUgcG93ZXIKICAgICAgICAgICAgICAgICAgICBvZiBpbnRlcnBvc2luZyB0aGUgdmV0bzsgd2hlbiB5b3Ugd2VyZSBlc2NvcnRlZCBpbiB0aGUgbW9zdCBzaGFtZWZ1bCBtYW5uZXIgYnkKICAgICAgICAgICAgICAgICAgICBhcm1lZCBndWFyZHM7IHdoZW4sIHdvcm4gb3V0IHdpdGggZHJ1bmtlbm5lc3MgYW5kIGRlYmF1Y2hlcnksIHlvdSB3ZXJlIGV2ZXJ5IGRheQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1pbmcgYWxsIHNvcnRzIG9mIG9ic2Nlbml0aWVzIGluIHRoYXQgY2hhc3RlIGhvdXNlIG9mIHlvdXJzLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBJLCBhcyBpZiBJIGhhZCB0byBjb250ZW5kIGFnYWluc3QgTWFyY3VzIENyYXNzdXMsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aG9tIEkgaGF2ZSBoYWQgbWFueSBzZXZlcmUgc3RydWdnbGVzLCBhbmQgbm90IHdpdGggYSBtb3N0IHdvcnRobGVzcwogICAgICAgICAgICAgICAgICAgIGdsYWRpYXRvciwgd2hpbGUgY29tcGxhaW5pbmcgaW4gZGlnbmlmaWVkIGxhbmd1YWdlIG9mIHRoZSBzdGF0ZSBvZiB0aGUgcmVwdWJsaWMKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHNheSBvbmUgd29yZCB3aGljaCBjb3VsZCBiZSBjYWxsZWQgcGVyc29uYWwuIFRoZXJlZm9yZSwgdG9kYXkgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbWFrZSBoaW0gdW5kZXJzdGFuZCB3aXRoIHdoYXQgZ3JlYXQga2luZG5lc3MgaGUgd2FzIHRoZW4gdHJlYXRlZCBieSBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0MDk0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwOTQiPkJydW5kdXNpdW08L3BsYWNlTmFtZT4/IFdvdWxkIHlvdSB0aGVuIGhhdmUgc2xhaW4gdGhlIG1hbiB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnF1ZXJvciBoaW1zZWxmIHdobyBjb25mZXJyZWQgb24geW91LCBhcyB5b3UgdXNlZCB0byBib2FzdCwgdGhlIGNoaWVmIHJhbmsKICAgICAgICAgICAgICAgICAgICBhbW9uZyBhbGwgaGlzIHJvYmJlcnMsIGhhZCBkZXNpcmVkIHRvIGJlIHNhZmUsIGFuZCBoYWQgZW5qb2luZWQgdG8gZ28gdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4/IEdyYW50IHRoYXQgeW91IGNvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBzbGFpbiBoaW0sIGlzIG5vdCB0aGlzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBzdWNoIGEga2luZG5lc3MgYXMgaXMgZG9uZSBieQogICAgICAgICAgICAgICAgICAgIGJhbmRpdHRpLCB3aG8gYXJlIGNvbnRlbnRlZCB3aXRoIGJlaW5nIGFibGUgdG8gYm9hc3QgdGhhdCB0aGV5IGhhdmUgZ3JhbnRlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGxpdmVzIHRvIGFsbCB0aG9zZSBtZW4gd2hvc2UgbGl2ZXMgdGhleSBoYXZlIG5vdCB0YWtlbj8gYW5kIGlmIHRoYXQgd2VyZQogICAgICAgICAgICAgICAgICAgIHJlYWxseSBhIGtpbmRuZXNzLCB0aGVuIHRob3NlIHdobyBzbGV3IHRoYXQgbWFuIGJ5IHdob20gdGhleSB0aGVtc2VsdmVzIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgc2F2ZWQsIGFuZCB3aG9tIHlvdSB5b3Vyc2VsZiBhcmUgaW4gdGhlIGhhYml0IG9mIHN0eWxpbmcgbW9zdCBpbGx1c3RyaW91cyBtZW4sCiAgICAgICAgICAgICAgICAgICAgd291bGQgbmV2ZXIgaGF2ZSBhY3F1aXJlZCBzdWNoIGltbW9ydGFsIGdsb3J5LiBCdXQgd2hhdCBzb3J0IG9mIGtpbmRuZXNzIGlzIGl0LAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgYWJzdGFpbmVkIGZyb20gY29tbWl0dGluZyBuZWZhcmlvdXMgd2lja2VkbmVzcz8gSXQgaXMgYSBjYXNlIGluIHdoaWNoIGl0CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHRvIGFwcGVhciBzbyBkZWxpZ2h0ZnVsIHRvIG1lIG5vdCB0byBoYXZlIGJlZW4ga2lsbGVkIGJ5IHlvdSwgYXMKICAgICAgICAgICAgICAgICAgICBtaXNlcmFibGUsIHRoYXQgaXQgc2hvdWxkIGhhdmUgYmVlbiBpbiB5b3VyIHBvd2VyIHRvIGRvIHN1Y2ggYSB0aGluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW1wdW5pdHkuIDwvdHJhbnNsYXRpb24+"
translation['2.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBJLCBob3dldmVyLCBncmFudCB0aGF0IGl0IHdhcyBhCiAgICAgICAgICAgICAgICAgICAga2luZG5lc3MsIHNpbmNlIG5vIGdyZWF0ZXIga2luZG5lc3MgY291bGQgYmUgcmVjZWl2ZWQgZnJvbSBhIHJvYmJlciwgc3RpbGwgaW4KICAgICAgICAgICAgICAgICAgICB3aGF0IHBvaW50IGNhbiB5b3UgY2FsbCBtZSB1bmdyYXRlZnVsPyBPdWdodCBJIG5vdCB0byBjb21wbGFpbiBvZiB0aGUgcnVpbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYywgbGVzdCBJIHNob3VsZCBhcHBlYXIgdW5ncmF0ZWZ1bCB0b3dhcmRzIHlvdT8gPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIC8+IEJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgY29tcGxhaW50LCBtb3VybmZ1bCBpbmRlZWQgYW5kIG1pc2VyYWJsZSwgYnV0IHN0aWxsIHVuYXZvaWRhYmxlIGZvciBhIG1hbgogICAgICAgICAgICAgICAgICAgIG9mIHRoYXQgcmFuayBpbiB3aGljaCB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGhhdmUgcGxhY2VkIG1lLCB3aGF0IGRpZCBJIHNheSB0aGF0IHdhcyBpbnN1bHRpbmc/IHRoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgb3RoZXJ3aXNlIHRoYW4gbW9kZXJhdGU/IHRoYXQgd2FzIG90aGVyd2lzZSB0aGFuIGZyaWVuZGx5PyBhbmQgd2hhdCBpbnN0YW5jZQogICAgICAgICAgICAgICAgICAgIHdhcyBpdCBub3Qgb2YgbW9kZXJhdGlvbiB0byBjb21wbGFpbiBvZiB0aGUgY29uZHVjdCBvZiBNYXJjdXMgQW50b25pdXMsIGFuZCB5ZXQKICAgICAgICAgICAgICAgICAgICB0byBhYnN0YWluIGZyb20gYW55IGFidXNpdmUgZXhwcmVzc2lvbnM/IGVzcGVjaWFsbHkgd2hlbiB5b3UgaGFkIHNjYXR0ZXJlZAogICAgICAgICAgICAgICAgICAgIGFicm9hZCBhbGwgcmVsaWNzIG9mIHRoZSByZXB1YmxpYzsgd2hlbiBldmVyeXRoaW5nIHdhcyBvbiBzYWxlIGF0IHlvdXIgaG91c2UgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBpbmZhbW91cyB0cmFmZmljOyB3aGVuIHlvdSBjb25mZXNzZWQgdGhhdCB0aG9zZSBsYXdzIHdoaWNoIGhhZCBuZXZlcgogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvbXVsZ2F0ZWQsIGhhZCBiZWVuIHBhc3NlZCB3aXRoIHJlZmVyZW5jZSB0byB5b3UsIGFuZCBieSB5b3U7IHdoZW4geW91LAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGF1Z3VyLCBoYWQgYWJvbGlzaGVkIHRoZSBhdXNwaWNlcywgYmVpbmcgY29uc3VsLCBoYWQgdGFrZW4gYXdheSB0aGUgcG93ZXIKICAgICAgICAgICAgICAgICAgICBvZiBpbnRlcnBvc2luZyB0aGUgdmV0bzsgd2hlbiB5b3Ugd2VyZSBlc2NvcnRlZCBpbiB0aGUgbW9zdCBzaGFtZWZ1bCBtYW5uZXIgYnkKICAgICAgICAgICAgICAgICAgICBhcm1lZCBndWFyZHM7IHdoZW4sIHdvcm4gb3V0IHdpdGggZHJ1bmtlbm5lc3MgYW5kIGRlYmF1Y2hlcnksIHlvdSB3ZXJlIGV2ZXJ5IGRheQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1pbmcgYWxsIHNvcnRzIG9mIG9ic2Nlbml0aWVzIGluIHRoYXQgY2hhc3RlIGhvdXNlIG9mIHlvdXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgSSwgYXMgaWYgSSBoYWQgdG8gY29udGVuZCBhZ2FpbnN0IE1hcmN1cyBDcmFzc3VzLAogICAgICAgICAgICAgICAgICAgIHdpdGggd2hvbSBJIGhhdmUgaGFkIG1hbnkgc2V2ZXJlIHN0cnVnZ2xlcywgYW5kIG5vdCB3aXRoIGEgbW9zdCB3b3J0aGxlc3MKICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3IsIHdoaWxlIGNvbXBsYWluaW5nIGluIGRpZ25pZmllZCBsYW5ndWFnZSBvZiB0aGUgc3RhdGUgb2YgdGhlIHJlcHVibGljCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBzYXkgb25lIHdvcmQgd2hpY2ggY291bGQgYmUgY2FsbGVkIHBlcnNvbmFsLiBUaGVyZWZvcmUsIHRvZGF5IEkgd2lsbAogICAgICAgICAgICAgICAgICAgIG1ha2UgaGltIHVuZGVyc3RhbmQgd2l0aCB3aGF0IGdyZWF0IGtpbmRuZXNzIGhlIHdhcyB0aGVuIHRyZWF0ZWQgYnkgbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGhlIGFsc28gcmVhZCBsZXR0ZXJzIHdoaWNoIGhlIHNhaWQgdGhhdCBJIGhhZCBzZW50IHRvIGhpbSwgbGlrZSBhIG1hbiBkZXZvaWQKICAgICAgICAgICAgICAgICAgICBvZiBodW1hbml0eSBhbmQgaWdub3JhbnQgb2YgdGhlIGNvbW1vbiB1c2FnZXMgb2YgbGlmZS4gRm9yIHdobyBldmVyLCB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgZXZlbiBidXQgc2xpZ2h0bHkgYWNxdWFpbnRlZCB3aXRoIHRoZSBoYWJpdHMgb2YgcG9saXRlIG1lbiwgcHJvZHVjZWQgaW4gYW4KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBhbmQgb3Blbmx5IHJlYWQgbGV0dGVycyB3aGljaCBoYWQgYmVlbiBzZW50IHRvIGhpbSBieSBhIGZyaWVuZCwganVzdAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugc29tZSBxdWFycmVsIGhhZCBhcmlzZW4gYmV0d2VlbiB0aGVtPyBJcyBub3QgdGhpcyBkZXN0cm95aW5nIGFsbAogICAgICAgICAgICAgICAgICAgIGNvbXBhbmlvbnNoaXAgaW4gbGlmZSwgZGVzdHJveWluZyB0aGUgbWVhbnMgYnkgd2hpY2ggYWJzZW50IGZyaWVuZHMgY29udmVyc2UKICAgICAgICAgICAgICAgICAgICB0b2dldGhlcj8gSG93IG1hbnkgamVzdHMgYXJlIGZyZXF1ZW50bHkgcHV0IGluIGxldHRlcnMsIHdoaWNoIGlmIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIHByb2R1Y2VkIGluIHB1YmxpYywgd291bGQgYXBwZWFyIHN0dXBpZCEgSG93IG1hbnkgc2VyaW91cyBvcGluaW9ucywgd2hpY2gsIGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGF0LCBvdWdodCBub3QgdG8gYmUgcHVibGlzaGVkISA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IHRoaXMKICAgICAgICAgICAgICAgICAgICBiZSBhIHByb29mIG9mIHlvdXIgdXR0ZXIgaWdub3JhbmNlIG9mIGNvdXJ0ZXN5LiBOb3cgbWFyaywgYWxzbywgaGlzIGluY3JlZGlibGUKICAgICAgICAgICAgICAgICAgICBmb2xseS4gV2hhdCBoYXZlIHlvdSB0byBvcHBvc2UgdG8gbWUsIE8geW91IGVsb3F1ZW50IG1hbiwgYXMgeW91IHNlZW0gYXQgbGVhc3QKICAgICAgICAgICAgICAgICAgICB0byBNdXN0ZWxhIFRhbWlzaXVzLCBhbmQgdG8gVGlybyBOdW1pc2l1cz8gQW5kIHdoaWxlIHRoZXNlIG1lbiBhcmUgc3RhbmRpbmcgYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIHZlcnkgdGltZSBpbiB0aGUgc2lnaHQgb2YgdGhlIHNlbmF0ZSB3aXRoIGRyYXduIHN3b3JkcywgSSB0b28gd2lsbCB0aGluawogICAgICAgICAgICAgICAgICAgIHlvdSBhbiBlbG9xdWVudCBtYW4gaWYgeW91IHdpbGwgc2hvdyBib3cgeW91IHdvdWxkIGRlZmVuZCB0aGVtIGlmIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIGNoYXJnZWQgd2l0aCBiZWluZyBhc3Nhc3NpbnMsIEhvd2V2ZXIsIDxwYiBuPSIyMyIgLz4gd2hhdCBhbnN3ZXIgd291bGQgeW91IG1ha2UKICAgICAgICAgICAgICAgICAgICBpZiBJIHdlcmUgdG8gZGVueSB0aGF0IEkgZXZlciBzZW50IHRob3NlIGxldHRlcnMgdG8geW91PyBCeSB3aGF0IGV2aWRlbmNlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgeW91IGNvbnZpY3QgbWU/IGJ5IG15IGhhbmR3cml0aW5nPyBPZiBoYW5kd3JpdGluZyBpbmRlZWQgeW91IGhhdmUgYSBsdWNyYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUgbWVhbnMgdG8gaW5zaW51YXRlIHRoYXQgQW50b25pdXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZ2luZyBDYWVzYXIncyBoYW5kd3JpdGluZyBhbmQgc2lnbmF0dXJlLjwvbm90ZT4gSG93IGNhbiB5b3UgcHJvdmUgaXQgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbm5lcj8gZm9yIHRoZSBsZXR0ZXJzIGFyZSB3cml0dGVuIGJ5IGFuIGFtYW51ZW5zaXMuIEJ5IHRoaXMgdGltZSBJIGVudnkKICAgICAgICAgICAgICAgICAgICB5b3VyIHRlYWNoZXIsIHdobyBmb3IgYWxsIHRoYXQgcGF5bWVudCwgd2hpY2ggSSBzaGFsbCBtZW50aW9uIHByZXNlbnRseSwgaGFzCiAgICAgICAgICAgICAgICAgICAgdGF1Z2h0IHlvdSB0byBrbm93IG5vdGhpbmcuIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBMZXQgdGhpcwogICAgICAgICAgICAgICAgICAgIGJlIGEgcHJvb2Ygb2YgeW91ciB1dHRlciBpZ25vcmFuY2Ugb2YgY291cnRlc3kuIE5vdyBtYXJrLCBhbHNvLCBoaXMgaW5jcmVkaWJsZQogICAgICAgICAgICAgICAgICAgIGZvbGx5LiBXaGF0IGhhdmUgeW91IHRvIG9wcG9zZSB0byBtZSwgTyB5b3UgZWxvcXVlbnQgbWFuLCBhcyB5b3Ugc2VlbSBhdCBsZWFzdAogICAgICAgICAgICAgICAgICAgIHRvIE11c3RlbGEgVGFtaXNpdXMsIGFuZCB0byBUaXJvIE51bWlzaXVzPyBBbmQgd2hpbGUgdGhlc2UgbWVuIGFyZSBzdGFuZGluZyBhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgdmVyeSB0aW1lIGluIHRoZSBzaWdodCBvZiB0aGUgc2VuYXRlIHdpdGggZHJhd24gc3dvcmRzLCBJIHRvbyB3aWxsIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgeW91IGFuIGVsb3F1ZW50IG1hbiBpZiB5b3Ugd2lsbCBzaG93IGJvdyB5b3Ugd291bGQgZGVmZW5kIHRoZW0gaWYgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCB3aXRoIGJlaW5nIGFzc2Fzc2lucywgSG93ZXZlciwgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIC8+IHdoYXQgYW5zd2VyIHdvdWxkIHlvdSBtYWtlCiAgICAgICAgICAgICAgICAgICAgaWYgSSB3ZXJlIHRvIGRlbnkgdGhhdCBJIGV2ZXIgc2VudCB0aG9zZSBsZXR0ZXJzIHRvIHlvdT8gQnkgd2hhdCBldmlkZW5jZSBjb3VsZAogICAgICAgICAgICAgICAgICAgIHlvdSBjb252aWN0IG1lPyBieSBteSBoYW5kd3JpdGluZz8gT2YgaGFuZHdyaXRpbmcgaW5kZWVkIHlvdSBoYXZlIGEgbHVjcmF0aXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUgbWVhbnMgdG8gaW5zaW51YXRlIHRoYXQgQW50b25pdXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZ2luZyBDYWVzYXIncyBoYW5kd3JpdGluZyBhbmQgc2lnbmF0dXJlLjwvbm90ZT4gSG93IGNhbiB5b3UgcHJvdmUgaXQgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbm5lcj8gZm9yIHRoZSBsZXR0ZXJzIGFyZSB3cml0dGVuIGJ5IGFuIGFtYW51ZW5zaXMuIEJ5IHRoaXMgdGltZSBJIGVudnkKICAgICAgICAgICAgICAgICAgICB5b3VyIHRlYWNoZXIsIHdobyBmb3IgYWxsIHRoYXQgcGF5bWVudCwgd2hpY2ggSSBzaGFsbCBtZW50aW9uIHByZXNlbnRseSwgaGFzCiAgICAgICAgICAgICAgICAgICAgdGF1Z2h0IHlvdSB0byBrbm93IG5vdGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3Igd2hhdCBjYW4gYmUgbGVzcyBsaWtlLCBJIGRvIG5vdCBzYXkgYW4gb3JhdG9yLCBidXQgYSBtYW4sIHRoYW4gdG8gcmVwcm9hY2ggYW4KICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkgd2l0aCBhIHRoaW5nIHdoaWNoIGlmIGJlIGRlbmllcyBieSBvbmUgc2luZ2xlIHdvcmQsIGhlIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICByZXByb2FjaGVkIGhpbSBjYW5ub3QgYWR2YW5jZSBvbmUgc3RlcCBmdXJ0aGVyPyBCdXQgSSBkbyBub3QgZGVueSBpdDsgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyB2ZXJ5IHBvaW50IEkgY29udmljdCB5b3Ugbm90IG9ubHkgb2YgaW5odW1hbml0eSBidXQgYWxzbyBvZiBtYWRuZXNzLiBGb3IKICAgICAgICAgICAgICAgICAgICB3aGF0IGV4cHJlc3Npb24gaXMgdGhlcmUgaW4gdGhvc2UgbGV0dGVycyB3aGljaCBpcyBub3QgZnVsbCBvZiBodW1hbml0eSBhbmQKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIGFuZCBiZW5ldm9sZW5jZT8gYW5kIHRoZSB3aG9sZSBvZiB5b3VyIGNoYXJnZSBhbW91bnRzIHRvIHRoaXMsIHRoYXQgSSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBleHByZXNzIGEgYmFkIG9waW5pb24gb2YgeW91IGluIHRob3NlIGxldHRlcnM7IHRoYXQgaW4gdGhlbSBJIHdyb3RlIGFzIHRvIGEKICAgICAgICAgICAgICAgICAgICBjaXRpemVuLCBhbmQgYXMgdG8gYSB2aXJ0dW91cyBtYW4sIG5vdCBhcyB0byBhIHdpY2tlZCBtYW4gYW5kIGEgcm9iYmVyLiBCdXQgeW91cgogICAgICAgICAgICAgICAgICAgIGxldHRlcnMgSSB3aWxsIG5vdCBwcm9kdWNlLCBhbHRob3VnaCBJIGZhaXJseSBtaWdodCwgbm93IHRoYXQgSSBhbSB0aHVzCiAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlZCBieSB5b3U7IGxldHRlcnMgaW4gd2hpY2ggeW91IGJlZyBvZiBtZSB0aGF0IHlvdSBtYXkgYmUgZW5hYmxlZCBieSBteQogICAgICAgICAgICAgICAgICAgIGNvbnNlbnQgdG8gcHJvY3VyZSB0aGUgcmVjYWxsIG9mIHNvbWUgb25lIGZyb20gZXhpbGU7IGFuZCB5b3Ugd2lsbCBub3QgYXR0ZW1wdAogICAgICAgICAgICAgICAgICAgIGl0IGlmIEkgaGF2ZSBhbnkgb2JqZWN0aW9uLCBhbmQgeW91IHByZXZhaWwgb24gbWUgYnkgeW91ciBlbnRyZWF0aWVzLiBGb3Igd2h5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIEkgcHV0IG15c2VsZiBpbiB0aGUgd2F5IG9mIHlvdXIgYXVkYWNpdHk/IHdoZW4gbmVpdGhlciB0aGUgYXV0aG9yaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBib2R5LCBub3IgdGhlIG9waW5pb24gb2YgdGhlIFJvbWFuIHBlb3BsZSwgbm9yIGFueSBsYXdzIGFyZSBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgcmVzdHJhaW4geW91LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+IEhvd2V2ZXIsIHdoYXQgd2FzIHRoZSBvYmplY3Qgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGFkZHJlc3NpbmcgdGhlc2UgZW50cmVhdGllcyB0byBtZSwgaWYgdGhlIG1hbiBmb3Igd2hvbSB5b3Ugd2VyZSBlbnRyZWF0aW5nCiAgICAgICAgICAgICAgICAgICAgd2FzIGFscmVhZHkgcmVzdG9yZWQgYnkgYSBsYXcgb2YgQ2Flc2FyJ3M/IEkgc3VwcG9zZSB0aGUgdHJ1dGggd2FzLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2lzaGVkIGl0IHRvIGJlIGRvbmUgYnkgbWUgYXMgYSBmYXZvdXI7IGluIHdoaWNoIG1hdHRlciB0aGVyZSBjb3VsZCBub3QgYmUgYW55CiAgICAgICAgICAgICAgICAgICAgZmF2b3VyIGRvbmUgZXZlbiBieSBoaW1zZWxmLCBpZiBhIGxhdyB3YXMgYWxyZWFkeSBwYXNzZWQgZm9yIHRoZSBwdXJwb3NlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgd2hhdCB3YXMgdGhlIG9iamVjdCBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgYWRkcmVzc2luZyB0aGVzZSBlbnRyZWF0aWVzIHRvIG1lLCBpZiB0aGUgbWFuIGZvciB3aG9tIHlvdSB3ZXJlIGVudHJlYXRpbmcKICAgICAgICAgICAgICAgICAgICB3YXMgYWxyZWFkeSByZXN0b3JlZCBieSBhIGxhdyBvZiBDYWVzYXIncz8gSSBzdXBwb3NlIHRoZSB0cnV0aCB3YXMsIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3aXNoZWQgaXQgdG8gYmUgZG9uZSBieSBtZSBhcyBhIGZhdm91cjsgaW4gd2hpY2ggbWF0dGVyIHRoZXJlIGNvdWxkIG5vdCBiZSBhbnkKICAgICAgICAgICAgICAgICAgICBmYXZvdXIgZG9uZSBldmVuIGJ5IGhpbXNlbGYsIGlmIGEgbGF3IHdhcyBhbHJlYWR5IHBhc3NlZCBmb3IgdGhlIHB1cnBvc2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGFzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJIGhhdmUgbWFueSB0aGluZ3Mgd2hpY2ggSSBtdXN0IHNheSBib3RoIGluIG15IG93bgogICAgICAgICAgICAgICAgICAgIGRlZmVuY2UgYW5kIGFnYWluc3QgTWFyY3VzIEFudG9uaXVzLCBvbmUgdGhpbmcgSSBhc2sgeW91LCB0aGF0IHlvdSB3aWxsIGxpc3RlbgogICAgICAgICAgICAgICAgICAgIHRvIG1lIHdpdGgga2luZG5lc3Mgd2hpbGUgSSBhbSBzcGVha2luZyBmb3IgbXlzZWxmOyB0aGUgb3RoZXIgSSB3aWxsIGVuc3VyZQogICAgICAgICAgICAgICAgICAgIG15c2VsZiwgbmFtZWx5LCB0aGF0IHlvdSBzaGFsbCBsaXN0ZW4gdG8gbWUgd2l0aCBhdHRlbnRpb24gd2hpbGUgc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhpbS4gQXQgdGhlIHNhbWUgdGltZSBhbHNvLCBJIGJlZyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgLz4gdGhpcyBvZiB5b3U7IHRoYXQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGFjcXVhaW50ZWQgd2l0aCBteSBtb2RlcmF0aW9uIGFuZCBtb2Rlc3R5IHRocm91Z2hvdXQgbXkgd2hvbGUgbGlmZSwKICAgICAgICAgICAgICAgICAgICBhbmQgZXNwZWNpYWxseSBhcyBhIHNwZWFrZXIsIHlvdSB3aWxsIG5vdCwgd2hlbiB0b2RheSBJIGFuc3dlciB0aGlzIG1hbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzcGlyaXQgaW4gd2hpY2ggaGUgaGFzIGF0dGFja2VkIG1lLCB0aGluayB0aGF0IEkgaGF2ZSBmb3Jnb3R0ZW4gbXkgdXN1YWwKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuIEkgd2lsbCBub3QgdHJlYXQgaGltIGFzIGEgY29uc3VsLCBmb3IgaGUgZGlkIG5vdCB0cmVhdCBtZSBhcyBhIG1hbiBvZgogICAgICAgICAgICAgICAgICAgIGNvbnN1bGFyIHJhbms7IGFuZCBhbHRob3VnaCBoZSBpbiBubyByZXNwZWN0IGRlc2VydmVzIHRvIGJlIGNvbnNpZGVyZWQgYSBjb25zdWwsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB3ZSByZWdhcmQgaGlzIHdheSBvZiBsaWZlLCBvciBoaXMgcHJpbmNpcGxlIG9mIGdvdmVybmluZyB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgb3IgdGhlIG1hbm5lciBpbiB3aGljaCBoZSB3YXMgZWxlY3RlZCwgSSBhbSBiZXlvbmQgYWxsIGRpc3B1dGUgYSBtYW4gb2YgY29uc3VsYXIKICAgICAgICAgICAgICAgICAgICByYW5rLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgLz4gdGhpcyBvZiB5b3U7IHRoYXQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGFjcXVhaW50ZWQgd2l0aCBteSBtb2RlcmF0aW9uIGFuZCBtb2Rlc3R5IHRocm91Z2hvdXQgbXkgd2hvbGUgbGlmZSwKICAgICAgICAgICAgICAgICAgICBhbmQgZXNwZWNpYWxseSBhcyBhIHNwZWFrZXIsIHlvdSB3aWxsIG5vdCwgd2hlbiB0b2RheSBJIGFuc3dlciB0aGlzIG1hbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzcGlyaXQgaW4gd2hpY2ggaGUgaGFzIGF0dGFja2VkIG1lLCB0aGluayB0aGF0IEkgaGF2ZSBmb3Jnb3R0ZW4gbXkgdXN1YWwKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuIEkgd2lsbCBub3QgdHJlYXQgaGltIGFzIGEgY29uc3VsLCBmb3IgaGUgZGlkIG5vdCB0cmVhdCBtZSBhcyBhIG1hbiBvZgogICAgICAgICAgICAgICAgICAgIGNvbnN1bGFyIHJhbms7IGFuZCBhbHRob3VnaCBoZSBpbiBubyByZXNwZWN0IGRlc2VydmVzIHRvIGJlIGNvbnNpZGVyZWQgYSBjb25zdWwsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB3ZSByZWdhcmQgaGlzIHdheSBvZiBsaWZlLCBvciBoaXMgcHJpbmNpcGxlIG9mIGdvdmVybmluZyB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgb3IgdGhlIG1hbm5lciBpbiB3aGljaCBoZSB3YXMgZWxlY3RlZCwgSSBhbSBiZXlvbmQgYWxsIGRpc3B1dGUgYSBtYW4gb2YgY29uc3VsYXIKICAgICAgICAgICAgICAgICAgICByYW5rLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCwgdGhlcmVmb3JlLCB5b3UgbWlnaHQgdW5kZXJzdGFuZCB3aGF0IHNvcnQgb2YgYSBjb25zdWwgaGUgcHJvZmVzc2VkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgaGUgcmVwcm9hY2hlZCBtZSB3aXRoIG15IGNvbnN1bHNoaXA74oCUYSBjb25zdWxzaGlwIHdoaWNoLCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIHdhcyBpbiBuYW1lLCBpbmRlZWQsIG1pbmUsIGJ1dCBpbiByZWFsaXR5IHlvdXJzLiBGb3Igd2hhdCBkaWQKICAgICAgICAgICAgICAgICAgICBJIGRldGVybWluZSwgd2hhdCBkaWQgSSBjb250cml2ZSwgd2hhdCBkaWQgSSBkbywgdGhhdCB3YXMgbm90IGRldGVybWluZWQsCiAgICAgICAgICAgICAgICAgICAgY29udHJpdmVkLCBvciBkb25lLCBieSB0aGUgY291bnNlbCBhbmQgYXV0aG9yaXR5IGFuZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc2VudGltZW50cyBvZiB0aGlzIG9yZGVyIEkgQW5kIGhhdmUgeW91LCBPIHdpc2UgbWFuLCBPIG1hbiBub3QgbWVyZWx5IGVsb3F1ZW50CiAgICAgICAgICAgICAgICAgICAgZGFyZWQgdG8gZmluZCBmYXVsdCB3aXRoIHRoZXNlIGFjdGlvbnMgYmVmb3JlIHRoZSB2ZXJ5IG1lbiBieSB3aG9zZSBjb3Vuc2VsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpc2RvbSB0aGV5IHdlcmUgcGVyZm9ybWVkPyBCdXQgd2hvIHdhcyBldmVyIGZvdW5kIGJlZm9yZSwgZXhjZXB0IFB1YmxpdXMKICAgICAgICAgICAgICAgICAgICBDbG9kaXVzLCB0byBmaW5kIGZhdWx0IHdpdGggbXkgY29uc3Vsc2hpcD8gQW5kIGhpcyBmYXRlIGluZGVlZCBhd2FpdHMgeW91LCBhcyBpdAogICAgICAgICAgICAgICAgICAgIGFsc28gYXdhaXRlZCBDYWl1cyBDdXJpbzsgc2luY2UgdGhhdCBpcyBub3cgaW4geW91ciBob3VzZSB3aGljaCB3YXMgZmF0YWwgdG8KICAgICAgICAgICAgICAgICAgICBlYWNoIG9mIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkZ1bHZpYSwgd2hvIGhhZCBiZWVuIHRoZSB3aWZlIG9mIENsb2RpdXMsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmRzIG9mIEN1cmlvLCB3YXMgbm93IHRoZSB3aWZlIG9mIEFudG9uaXVzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+RnVsdmlhLCB3aG8gaGFkIGJlZW4gdGhlIHdpZmUgb2YgQ2xvZGl1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyd2FyZHMgb2YgQ3VyaW8sIHdhcyBub3cgdGhlIHdpZmUgb2YgQW50b25pdXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyY3VzIEFudG9uaXVzIGRpc2FwcHJvdmVzIG9mIG15IGNvbnN1bHNoaXA7IGJ1dCBpdCB3YXMgYXBwcm92ZWQgb2YgYnkgUHVibGl1cwogICAgICAgICAgICAgICAgICAgIFNlcnZpbGl1c+KAlHRvIG5hbWUgdGhhdCBtYW4gZmlyc3Qgb2YgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBkaWVkIG1vc3QgcmVjZW50bHkuIEl0IHdhcyBhcHByb3ZlZCBvZiBieSBRdWludHVzIENhdHVsdXMsIHdob3NlIGF1dGhvcml0eSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzIGNhcnJ5IHdlaWdodCBpbiB0aGlzIHJlcHVibGljOyBpdCB3YXMgYXBwcm92ZWQgb2YgYnkgdGhlIHR3byBMdWN1bGxpLCBieQogICAgICAgICAgICAgICAgICAgIE1hcmN1cyBDcmFzc3VzLCBieSBRdWludHVzIEhvcnRlbnNpdXMsIGJ5IENhaXVzIEN1cmlvLCBieSBDYWl1cyBQaXNvLCBieSBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBHbGFicmlvLCBieSBNYXJjdXMgTGVwaWR1cywgYnkgTHVjaXVzIFZvbGNhdGl1cywgYnkgQ2FpdXMgRmlndWx1cywgYnkgRGVjaW11cwogICAgICAgICAgICAgICAgICAgIFNpbGFudXMgYW5kIEx1Y2l1cyBNdXJlbmEsIHdobyBhdCB0aGF0IHRpbWUgd2VyZSB0aGUgY29uc3VscyBlbGVjdCwgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBjb25zdWxzaGlwIGFsc28gd2hpY2ggd2FzIGFwcHJvdmVkIG9mIGJ5IHRob3NlIG1lbiBvZiBjb25zdWxhciByYW5rLCB3YXMKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCBvZiBieSBNYXJjdXMgQ2F0bzsgd2hvIGVzY2FwZWQgbWFueSBldmlscyBieSBkZXBhcnRpbmcgZnJvbSB0aGlzIGxpZmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIGVzcGVjaWFsbHkgdGhlIGV2aWwgb2Ygc2VlaW5nIHlvdSBjb25zdWwuIEJ1dCwgYWJvdmUgYWxsLCBteSBjb25zdWxzaGlwIHdhcwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkIG9mIGJ5IENuYWV1cyBQb21wZWl1cywgd2hvLCB3aGVuIGhlIGZpcnN0IHNhdyBtZSwgYXMgaGUgd2FzIGxlYXZpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4sIGVtYnJhY2luZyBtZSBhbmQKICAgICAgICAgICAgICAgICAgICBjb25ncmF0dWxhdGluZyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgLz4gbWUsIHNhaWQsIHRoYXQgaXQgd2FzIG93aW5nIHRvIG15IHNlcnZpY2VzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgYWJvdXQgdG8gc2VlIGhpcyBjb3VudHJ5IGFnYWluLiBCdXQgd2h5IHNob3VsZCBJIG1lbnRpb24gaW5kaXZpZHVhbHM/IEl0IHdhcwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkIG9mIGJ5IHRoZSBzZW5hdGUsIGluIGEgdmVyeSBmdWxsIGhvdXNlLCBzbyBjb21wbGV0ZWx5LCB0aGF0IHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vIG9uZSB3aG8gZGlkIG5vdCB0aGFuayBtZSBhcyBpZiBJIGhhZCBiZWVuIGhpcyBwYXJlbnQsIHdobyBkaWQgbm90IGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIHRvIG1lIHRoZSBzYWx2YXRpb24gb2YgaGlzIGxpZmUsIG9mIGhpcyBmb3J0dW5lcywgb2YgaGlzIGNoaWxkcmVuLCBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4sIGVtYnJhY2luZyBtZSBhbmQKICAgICAgICAgICAgICAgICAgICBjb25ncmF0dWxhdGluZyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgLz4gbWUsIHNhaWQsIHRoYXQgaXQgd2FzIG93aW5nIHRvIG15IHNlcnZpY2VzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgYWJvdXQgdG8gc2VlIGhpcyBjb3VudHJ5IGFnYWluLiBCdXQgd2h5IHNob3VsZCBJIG1lbnRpb24gaW5kaXZpZHVhbHM/IEl0IHdhcwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkIG9mIGJ5IHRoZSBzZW5hdGUsIGluIGEgdmVyeSBmdWxsIGhvdXNlLCBzbyBjb21wbGV0ZWx5LCB0aGF0IHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vIG9uZSB3aG8gZGlkIG5vdCB0aGFuayBtZSBhcyBpZiBJIGhhZCBiZWVuIGhpcyBwYXJlbnQsIHdobyBkaWQgbm90IGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIHRvIG1lIHRoZSBzYWx2YXRpb24gb2YgaGlzIGxpZmUsIG9mIGhpcyBmb3J0dW5lcywgb2YgaGlzIGNoaWxkcmVuLCBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIDwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSB0aGUgcmVwdWJsaWMgaGFzIGJlZW4gbm93IGRlcHJpdmVkIG9mIHRob3NlIG1lbiB3aG9tIEkgaGF2ZSBuYW1lZCwgbWFueQogICAgICAgICAgICAgICAgICAgIGFuZCBpbGx1c3RyaW91cyBhcyB0aGV5IHdlcmUsIGxldCB1cyBjb21lIHRvIHRoZSBsaXZpbmcsIHNpbmNlIHR3byBvZiB0aGUgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgY29uc3VsYXIgcmFuayBhcmUgc3RpbGwgbGVmdCB0byB1czogTHVjaXVzIENvdHRhLCBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgZ2VuaXVzCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtb3N0IGNvbnN1bW1hdGUgcHJ1ZGVuY2UsIHByb3Bvc2VkIGEgc3VwcGxpY2F0aW9uIGluIG15IGhvbm91ciBmb3IgdGhvc2UKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGFjdGlvbnMgd2l0aCB3aGljaCB5b3UgZmluZCBmYXVsdCwgaW4gdGhlIG1vc3QgY29tcGxpbWVudGFyeSBsYW5ndWFnZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgdmVyeSBtZW4gb2YgY29uc3VsYXIgcmFuayB3aG9tIEkgaGF2ZSBuYW1lZCwgYW5kIHRoZSB3aG9sZSBzZW5hdGUsIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcG9zYWw7IGFuIGhvbm91ciB3aGljaCBoYXMgbmV2ZXIgYmVlbiBwYWlkIHRvIGFueSBvbmUgZWxzZSBpbiB0aGUgZ2FyYiBvZgogICAgICAgICAgICAgICAgICAgIHBlYWNlIGZyb20gdGhlIGZvdW5kYXRpb24gb2YgdGhlIGNpdHkgdG8gbXkgdGltZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPiBXaXRoIHdoYXQgZWxvcXVlbmNlLCB3aXRoIHdoYXQgZmlybSB3aXNkb20sIHdpdGggd2hhdCBhCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0IG9mIGF1dGhvcml0eSBkaWQgTHVjaXVzIENhZXNhciB5b3VyIHVuY2xlLCBwcm9ub3VuY2UgaGlzIG9waW5pb24gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBodXNiYW5kIG9mIGhpcyBvd24gc2lzdGVyLCB5b3VyIHN0ZXBmYXRoZXIuIEJ1dCB5b3UsIHdoZW4geW91IG91Z2h0IHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBoaW0gYXMgeW91ciBhZHZpc2VyIGFuZCB0dXRvciBpbiBhbGwgeW91ciBkZXNpZ25zLCBhbmQgaW4gdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBvZiB5b3VyIGxpZmUsIHByZWZlcnJlZCBiZWluZyBsaWtlIHlvdXIgc3RlcGZhdGhlciB0byByZXNlbWJsaW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICB1bmNsZS4gSSwgV2hvIGhhZCBubyBjb25uZWN0aW9uIHdpdGggaGltLCBhY3RlZCBieSBoaXMgY291bnNlbHMgd2hpbGUgSSB3YXMKICAgICAgICAgICAgICAgICAgICBjb25zdWwuIERpZCB5b3UsIHdobyB3ZXJlIGhpcyBzaXN0ZXIncyBzb24sIGV2ZXIgb25jZSBjb25zdWx0IGhpbSBvbiB0aGUgYWZmYWlycwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByZXB1YmxpYz8gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2l0aCB3aGF0IGVsb3F1ZW5jZSwgd2l0aCB3aGF0IGZpcm0gd2lzZG9tLCB3aXRoIHdoYXQgYQogICAgICAgICAgICAgICAgICAgIHdlaWdodCBvZiBhdXRob3JpdHkgZGlkIEx1Y2l1cyBDYWVzYXIgeW91ciB1bmNsZSwgcHJvbm91bmNlIGhpcyBvcGluaW9uIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgaHVzYmFuZCBvZiBoaXMgb3duIHNpc3RlciwgeW91ciBzdGVwZmF0aGVyLiBCdXQgeW91LCB3aGVuIHlvdSBvdWdodCB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gaGltIGFzIHlvdXIgYWR2aXNlciBhbmQgdHV0b3IgaW4gYWxsIHlvdXIgZGVzaWducywgYW5kIGluIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3Qgb2YgeW91ciBsaWZlLCBwcmVmZXJyZWQgYmVpbmcgbGlrZSB5b3VyIHN0ZXBmYXRoZXIgdG8gcmVzZW1ibGluZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgdW5jbGUuIEksIFdobyBoYWQgbm8gY29ubmVjdGlvbiB3aXRoIGhpbSwgYWN0ZWQgYnkgaGlzIGNvdW5zZWxzIHdoaWxlIEkgd2FzCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLiBEaWQgeW91LCB3aG8gd2VyZSBoaXMgc2lzdGVyJ3Mgc29uLCBldmVyIG9uY2UgY29uc3VsdCBoaW0gb24gdGhlIGFmZmFpcnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWM/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdobyBhcmUgdGhleSB3aG9tIEFudG9uaXVzIGRvZXMgY29uc3VsdD8gTyB5ZSBpbW1vcnRhbCBnb2RzLCB0aGV5IGFyZSBtZW4KICAgICAgICAgICAgICAgICAgICB3aG9zZSBiaXJ0aGRheXMgd2UgaGF2ZSBzdGlsbCB0byBsZWFybi4gVG9kYXkgQW50b25pdXMgaXMgbm90IGNvbWluZyBkb3duLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IFdoeT8gSGUgaXMgY2VsZWJyYXRpbmcgdGhlIGJpcnRoZGF5IGZlYXN0CiAgICAgICAgICAgICAgICAgICAgYXQgaGlzIHZpbGxhLiBJbiB3aG9zZSBob25vcj8gSSB3aWxsIG5hbWUgbm8gb25lLiBTdXBwb3NlIGl0IGlzIGluIGhvbm9yIG9mIHNvbWUKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvLCBvciBHbmF0aG8sIG9yIGV2ZW4gQmFsbGlvLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXNlIHdlcmUgdGhlIG5hbWVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlcy48L25vdGU+IE9oIHRoZSBhYm9taW5hYmxlIHByb2ZsaWdhY3kgb2YgdGhlIG1hbiEgb2ggaG93IGludG9sZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgaXMgaGlzIGltcHVkZW5jZSwgaGlzIGRlYmF1Y2hlcnksIGFuZCBoaXMgbHVzdCEgQ2FuIHlvdSwgd2hlbiB5b3UgaGF2ZSBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2hpZWZzIG9mIHRoZSBzZW5hdGUsIGEgY2l0aXplbiBvZiBzaW5ndWxhciB2aXJ0dWUsIHNvIG5lYXJseSByZWxhdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgeW91LCBhYnN0YWluIGZyb20gZXZlciBjb25zdWx0aW5nIGhpbSBvbiB0aGUgYWZmYWlycyBvZiB0aGUgcmVwdWJsaWMsIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnN1bHQgbWVuIHdobyBoYXZlIG5vIHByb3BlcnR5IHdoYXRldmVyIG9mIHRoZWlyIG93biwgYW5kIGFyZSBkcmFpbmluZyB5b3Vycz8KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5PyBIZSBpcyBjZWxlYnJhdGluZyB0aGUgYmlydGhkYXkgZmVhc3QKICAgICAgICAgICAgICAgICAgICBhdCBoaXMgdmlsbGEuIEluIHdob3NlIGhvbm9yPyBJIHdpbGwgbmFtZSBubyBvbmUuIFN1cHBvc2UgaXQgaXMgaW4gaG9ub3Igb2Ygc29tZQogICAgICAgICAgICAgICAgICAgIFBob3JtaW8sIG9yIEduYXRobywgb3IgZXZlbiBCYWxsaW8uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVzZSB3ZXJlIHRoZSBuYW1lcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBzbGF2ZXMuPC9ub3RlPiBPaCB0aGUgYWJvbWluYWJsZSBwcm9mbGlnYWN5IG9mIHRoZSBtYW4hIG9oIGhvdyBpbnRvbGVyYWJsZQogICAgICAgICAgICAgICAgICAgIGlzIGhpcyBpbXB1ZGVuY2UsIGhpcyBkZWJhdWNoZXJ5LCBhbmQgaGlzIGx1c3QhIENhbiB5b3UsIHdoZW4geW91IGhhdmUgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNoaWVmcyBvZiB0aGUgc2VuYXRlLCBhIGNpdGl6ZW4gb2Ygc2luZ3VsYXIgdmlydHVlLCBzbyBuZWFybHkgcmVsYXRlZCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgYWJzdGFpbiBmcm9tIGV2ZXIgY29uc3VsdGluZyBoaW0gb24gdGhlIGFmZmFpcnMgb2YgdGhlIHJlcHVibGljLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25zdWx0IG1lbiB3aG8gaGF2ZSBubyBwcm9wZXJ0eSB3aGF0ZXZlciBvZiB0aGVpciBvd24sIGFuZCBhcmUgZHJhaW5pbmcgeW91cnM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WWVzLCB5b3VyIGNvbnN1bHNoaXAsIGZvcnNvb3RoLCBpcyBhIHNhbHV0YXJ5IG9uZSBmb3IgdGhlIHN0YXRlLCBtaW5lIGEKICAgICAgICAgICAgICAgICAgICBtaXNjaGlldm91cyBvbmUuIEhhdmUgeW91IHNvIGVudGlyZWx5IGxvc3QgYWxsIHNoYW1lIGFzIHdlbGwgYXMgYWxsIGNoYXN0aXR5LAogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IGNvdWxkIHZlbnR1cmUgdG8gc2F5IHRoaXMgaW4gdGhhdCB0ZW1wbGUgaW4gd2hpY2ggSSB3YXMgY29uc3VsdGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHdoaWNoIGZvcm1lcmx5IGluIHRoZSBmdWxsIGVuam95bWVudCBvZiBpdHMgaG9ub3JzIHByZXNpZGVkIG92ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQ/IEFuZCBkaWQgeW91IHBsYWNlIGFyb3VuZCBpdCBhYmFuZG9uZWQgbWVuIGFybWVkIHdpdGggc3dvcmRzPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB5b3UgaGF2ZSBkYXJlZCBiZXNpZGVzICh3aGF0IGlzIHRoZXJlIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBkYXJlPykgdG8gc2F5IHRoYXQgdGhlIENhcGl0byBsaW5lIEhpbGwsIHdoZW4gSSB3YXMgY29uc3VsIHdhcyBmdWxsIG9mCiAgICAgICAgICAgICAgICAgICAgYWltZWQgc2xhdmVzLiBJIHdhcyBvZmZlcmluZyB2aW9sZW5jZSB0byB0aGUgc2VuYXRlLCBJIHN1cHBvc2UsIGluIG9yZGVyIHRvCiAgICAgICAgICAgICAgICAgICAgY29tcGVsIHRoZSBhZG9wdGlvbiBvZiB0aG9zZSBpbmZhbW91cyBkZWNyZWVzIG9mIHRoZSBzZW5hdGUuIE8gd3JldGNoZWQgbWFuLAogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgdGhvc2UgdGhpbmdzIGFyZSBub3Qga25vd24gdG8geW91IChmb3IgeW91IGtub3cgbm90aGluZyB0aGF0IGlzIGdvb2QpLAogICAgICAgICAgICAgICAgICAgIG9yIHdoZXRoZXIgdGhleSBhcmUsIHdoZW4geW91IGRhcmUgdG8gc3BlYWsgc28gc2hhbWVsZXNzbHkgYmVmb3JlIHN1Y2ggbWVuISBGb3IKICAgICAgICAgICAgICAgICAgICB3aGF0IFJvbWFuIGtuaWdodCB3YXMgdGhlcmUsIHdoYXQgeW91dGggb2Ygbm9ibGUgYmlydGggZXhjZXB0IHlvdSwgd2hhdCBtYW4gb2YKICAgICAgICAgICAgICAgICAgICBhbnkgcmFuayBvciBjbGFzcyB3aG8gcmVjb2xsZWN0ZWQgdGhhdCBoZSB3YXMgYSBjaXRpemVuLCB3aG8gd2FzIG5vdCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5NjMiIGtleT0idGduLDcwMDY5NjMiPkNhcGl0b2xpbmUgSGlsbDwvcGxhY2VOYW1lPiB3aGlsZSB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgd2FzIGFzc2VtYmxlZCBpbiB0aGlzIHRlbXBsZT8gd2hvIHdhcyB0aGVyZSwgd2hvIGRpZCBub3QgZ2l2ZSBpbiBoaXMgbmFtZT8KICAgICAgICAgICAgICAgICAgICBBbHRob3VnaCB0aGVyZSBjb3VsZCBub3QgYmUgcHJvdmlkZWQgY2hlY2tzIGVub3VnaCwgbm9yIHdlcmUgdGhlIGJvb2tzIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICBjb250YWluIHRoZWlyIG5hbWVzLiA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHlvdSBoYXZlIGRhcmVkIGJlc2lkZXMgKHdoYXQgaXMgdGhlcmUgd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IGRhcmU/KSB0byBzYXkgdGhhdCB0aGUgQ2FwaXRvIGxpbmUgSGlsbCwgd2hlbiBJIHdhcyBjb25zdWwgd2FzIGZ1bGwgb2YKICAgICAgICAgICAgICAgICAgICBhaW1lZCBzbGF2ZXMuIEkgd2FzIG9mZmVyaW5nIHZpb2xlbmNlIHRvIHRoZSBzZW5hdGUsIEkgc3VwcG9zZSwgaW4gb3JkZXIgdG8KICAgICAgICAgICAgICAgICAgICBjb21wZWwgdGhlIGFkb3B0aW9uIG9mIHRob3NlIGluZmFtb3VzIGRlY3JlZXMgb2YgdGhlIHNlbmF0ZS4gTyB3cmV0Y2hlZCBtYW4sCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB0aG9zZSB0aGluZ3MgYXJlIG5vdCBrbm93biB0byB5b3UgKGZvciB5b3Uga25vdyBub3RoaW5nIHRoYXQgaXMgZ29vZCksCiAgICAgICAgICAgICAgICAgICAgb3Igd2hldGhlciB0aGV5IGFyZSwgd2hlbiB5b3UgZGFyZSB0byBzcGVhayBzbyBzaGFtZWxlc3NseSBiZWZvcmUgc3VjaCBtZW4hIEZvcgogICAgICAgICAgICAgICAgICAgIHdoYXQgUm9tYW4ga25pZ2h0IHdhcyB0aGVyZSwgd2hhdCB5b3V0aCBvZiBub2JsZSBiaXJ0aCBleGNlcHQgeW91LCB3aGF0IG1hbiBvZgogICAgICAgICAgICAgICAgICAgIGFueSByYW5rIG9yIGNsYXNzIHdobyByZWNvbGxlY3RlZCB0aGF0IGhlIHdhcyBhIGNpdGl6ZW4sIHdobyB3YXMgbm90IG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2OTYzIj5DYXBpdG9saW5lIEhpbGw8L3BsYWNlTmFtZT4gd2hpbGUgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIHdhcyBhc3NlbWJsZWQgaW4gdGhpcyB0ZW1wbGU/IHdobyB3YXMgdGhlcmUsIHdobyBkaWQgbm90IGdpdmUgaW4gaGlzIG5hbWU/CiAgICAgICAgICAgICAgICAgICAgQWx0aG91Z2ggdGhlcmUgY291bGQgbm90IGJlIHByb3ZpZGVkIGNoZWNrcyBlbm91Z2gsIG5vciB3ZXJlIHRoZSBib29rcyBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgY29udGFpbiB0aGVpciBuYW1lcy4gPC90cmFuc2xhdGlvbj4="
translation['2.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRydXRoLCB3aGVuIHdpY2tlZCBtZW4sIGJlaW5nIGNvbXBlbGxlZCBieSB0aGUgcmV2ZWxhdGlvbnMgb2YgdGhlIGFjY29tcGxpY2VzLAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZWlyIG93biBoYW5kd3JpdGluZywgYW5kIGJ5IHdoYXQgSSBtYXkgYWxtb3N0IGNhbGwgdGhlIHZvaWNlcyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxldHRlcnMsIHdlcmUgY29uZmVzc2luZyB0aGF0IHRoZXkgaGFkIHBsYW5uZWQgdGhlIHBhcnJpY2lkYWwgZGVzdHJ1Y3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb3VudHJ5LCBhbmQgdGhhdCB0aGV5IGhhZCBhZ3JlZWQgdG8gYnVybiB0aGUgY2l0eSwgdG8gbWFzc2FjcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMsIHRvIGRldmFzdGF0ZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICBkZXN0cm95IHRoZSByZXB1YmxpYzsgd2hvIGNvdWxkIGhhdmUgZXhpc3RlZCB3aXRob3V0IGJlaW5nIHJvdXNlZCB0byBkZWZlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIHNhZmV0eT8gZXNwZWNpYWxseSB3aGVuIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gaGFkIGEgbGVhZGVyIHRoZW4sIGFuZCBpZiB0aGV5IGhhZCBvbmUKICAgICAgICAgICAgICAgICAgICBub3cgbGlrZSBoZSB3YXMgdGhlbiwgdGhlIHNhbWUgZmF0ZSB3b3VsZCBiZWZhbGwgeW91IHdoaWNoIGRpZCBvdmVydGFrZSB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICBkZXN0cm95IHRoZSByZXB1YmxpYzsgd2hvIGNvdWxkIGhhdmUgZXhpc3RlZCB3aXRob3V0IGJlaW5nIHJvdXNlZCB0byBkZWZlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIHNhZmV0eT8gZXNwZWNpYWxseSB3aGVuIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gaGFkIGEgbGVhZGVyIHRoZW4sIGFuZCBpZiB0aGV5IGhhZCBvbmUKICAgICAgICAgICAgICAgICAgICBub3cgbGlrZSBoZSB3YXMgdGhlbiwgdGhlIHNhbWUgZmF0ZSB3b3VsZCBiZWZhbGwgeW91IHdoaWNoIGRpZCBvdmVydGFrZSB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgYXNzZXJ0cyB0aGF0IHRoZSBib2R5IG9mIGhpcyBzdGVwZmF0aGVyIHdhcyBub3QgYWxsb3dlZCBidXJpYWwgYnkgbWUuIEJ1dCB0aGlzCiAgICAgICAgICAgICAgICAgICAgaXMgYW4gYXNzZXJ0aW9uIHRoYXQgd2FzIG5ldmVyIG1hZGUgYnkgUHVibGl1cyBDbG9kaXVzLCBhIG1hbiB3aG9tLCBhcyBJIHdhcwogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkbHkgYW4gZW5lbXkgb2YgaGlzLCBJIGdyaWV2ZSBub3cgdG8gc2VlIHN1cnBhc3NlZCBieSB5b3UgaW4gZXZlcnkgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIHZpY2UuIEJ1dCBob3cgY291bGQgaXQgb2NjdXIgdG8geW91IHRvIHJlY2FsbCB0byBvdXIgcmVjb2xsZWN0aW9uIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gZWR1Y2F0ZWQgaW4gdGhlIGhvdXNlIG9mIFB1YmxpdXMgTGVudHVsdXM/IFdlcmUgeW91IGFmcmFpZCB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgdGhpbmsgdGhhdCB5b3UgY291bGQgaGF2ZSB0dXJuZWQgb3V0IGFzIGluZmFtb3VzIGFzIHlvdSBhcmUgYnkgdGhlIG1lcmUKICAgICAgICAgICAgICAgICAgICBmb3JjZSBvZiBuYXR1cmUsIHlvdXIgbmF0dXJhbCBxdWFsaXRpZXMgaGFkIG5vdCBiZWVuIHN0cmVuZ3RoZW5lZCBieSBlZHVjYXRpb24/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHlvdSBhcmUgc28gc2Vuc2VsZXNzIHRoYXQgdGhyb3VnaG91dCB0aGUgd2hvbGUgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIC8+IG9mIHlvdXIgc3BlZWNoCiAgICAgICAgICAgICAgICAgICAgeW91IHdlcmUgYXQgdmFyaWFuY2Ugd2l0aCB5b3Vyc2VsZjsgc28gdGhhdCB5b3Ugc2FpZCB0aGluZ3Mgd2hpY2ggaGFkIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgbm8gY29oZXJlbmNlIHdpdGggZWFjaCBvdGhlciwgYnV0IHdoaWNoIHdlcmUgbW9zdCBpbmNvbnNpc3RlbnQgd2l0aCBhbmQKICAgICAgICAgICAgICAgICAgICBjb250cmFkaWN0b3J5IHRvIG9uZSBhbm90aGVyOyBzbyB0aGF0IHRoZXJlIHdhcyBub3Qgc28gbXVjaCBvcHBvc2l0aW9uIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICB5b3UgYW5kIG1lIGFzIHRoZXJlIHdhcyBiZXR3ZWVuIHlvdSBhbmQgeW91cnNlbGYuIFlvdSBjb25mZXNzZWQgdGhhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgc3RlcGZhdGhlciBoYWQgYmVlbiBpbXBsaWNhdGVkIGluIHRoYXQgZW5vcm1vdXMgd2lja2VkbmVzcywgeWV0IHlvdSBjb21wbGFpbmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYWQgaGFkIHB1bmlzaG1lbnQgaW5mbGljdGVkIG9uIGhpbS4gQW5kIGJ5IGRvaW5nIHNvIHlvdSBwcmFpc2VkIHdoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgcGVjdWxpYXJseSBteSBhY2hpZXZlbWVudCwgYW5kIGJsYW1lZCB0aGF0IHdoaWNoIHdhcyB3aG9sbHkgdGhlIGFjdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUuIEZvciB0aGUgZGV0ZWN0aW9uIGFuZCBhcnJlc3Qgb2YgdGhlIGd1aWx0eSBwYXJ0aWVzIHdhcyBteSB3b3JrLCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQgd2FzIHRoZSB3b3JrIG9mIHRoZSBzZW5hdGUuIEJ1dCB0aGF0IGVsb3F1ZW50IG1hbiBkb2VzIG5vdCBwZXJjZWl2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIG1hbiBhZ2FpbnN0IHdob20gaGUgaXMgc3BlYWtpbmcgaXMgYmVpbmcgcHJhaXNlZCBieSBoaW0sIGFuZCB0aGF0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHdob20gaGUgaXMgc3BlYWtpbmcgYXJlIGJlaW5nIGF0dGFja2VkIGJ5IGhpbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgbm93IHdoYXQgYW4gYWN0LCBJIHdpbGwgbm90IHNheSBvZiBhdWRhY2l0eSwgKGZvciBoZSBpcwogICAgICAgICAgICAgICAgICAgIGFueGlvdXMgdG8gYmUgYXVkYWNpb3VzLCkgYnV0IChhbmQgdGhhdCBpcyB3aGF0IGhlIGlzIG5vdCBkZXNpcm91cyBvZikgd2hhdCBhbgogICAgICAgICAgICAgICAgICAgIGFjdCBvZiBmb2xseSwgaW4gd2hpY2ggaGUgc3VycGFzc2VzIGFsbCBtZW4sIGlzIGl0IHRvIG1ha2UgbWVudGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5NjMiIGtleT0idGduLDcwMDY5NjMiPkNhcGl0b2xpbmUgSGlsbDwvcGxhY2VOYW1lPiwgYXQgYSB0aW1lIHdoZW4KICAgICAgICAgICAgICAgICAgICBhcm1lZCBtZW4gYXJlIGFjdHVhbGx5IGJldHdlZW4gb3VyIGJlbmNoZXPigJR3aGVuIG1lbiwgYXJtZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHN3b3JkcywgYXJlIG5vdyBzdGF0aW9uZWQgaW4gdGhpcyBzYW1lIHRlbXBsZSBvZiBDb25jb3JkLCBPIHllIGltbW9ydGFsIGdvZHMsIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIHdoaWxlIEkgd2FzIGNvbnN1bCwgb3BpbmlvbnMgbW9zdCBzYWx1dGFyeSB0byB0aGUgc3RhdGUgd2VyZSBkZWxpdmVyZWQsCiAgICAgICAgICAgICAgICAgICAgb3dpbmcgdG8gd2hpY2ggaXQgaXMgdGhhdCB3ZSBhcmUgYWxsIGFsaXZlIGF0IHRoaXMgZGF5LiA8L3A+CgkJCQk8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgLz4gb2YgeW91ciBzcGVlY2gKICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBhdCB2YXJpYW5jZSB3aXRoIHlvdXJzZWxmOyBzbyB0aGF0IHlvdSBzYWlkIHRoaW5ncyB3aGljaCBoYWQgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICBubyBjb2hlcmVuY2Ugd2l0aCBlYWNoIG90aGVyLCBidXQgd2hpY2ggd2VyZSBtb3N0IGluY29uc2lzdGVudCB3aXRoIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnRyYWRpY3RvcnkgdG8gb25lIGFub3RoZXI7IHNvIHRoYXQgdGhlcmUgd2FzIG5vdCBzbyBtdWNoIG9wcG9zaXRpb24gYmV0d2VlbgogICAgICAgICAgICAgICAgICAgIHlvdSBhbmQgbWUgYXMgdGhlcmUgd2FzIGJldHdlZW4geW91IGFuZCB5b3Vyc2VsZi4gWW91IGNvbmZlc3NlZCB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBzdGVwZmF0aGVyIGhhZCBiZWVuIGltcGxpY2F0ZWQgaW4gdGhhdCBlbm9ybW91cyB3aWNrZWRuZXNzLCB5ZXQgeW91IGNvbXBsYWluZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBoYWQgcHVuaXNobWVudCBpbmZsaWN0ZWQgb24gaGltLiBBbmQgYnkgZG9pbmcgc28geW91IHByYWlzZWQgd2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyBwZWN1bGlhcmx5IG15IGFjaGlldmVtZW50LCBhbmQgYmxhbWVkIHRoYXQgd2hpY2ggd2FzIHdob2xseSB0aGUgYWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS4gRm9yIHRoZSBkZXRlY3Rpb24gYW5kIGFycmVzdCBvZiB0aGUgZ3VpbHR5IHBhcnRpZXMgd2FzIG15IHdvcmssIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudCB3YXMgdGhlIHdvcmsgb2YgdGhlIHNlbmF0ZS4gQnV0IHRoYXQgZWxvcXVlbnQgbWFuIGRvZXMgbm90IHBlcmNlaXZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbWFuIGFnYWluc3Qgd2hvbSBoZSBpcyBzcGVha2luZyBpcyBiZWluZyBwcmFpc2VkIGJ5IGhpbSwgYW5kIHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgd2hvbSBoZSBpcyBzcGVha2luZyBhcmUgYmVpbmcgYXR0YWNrZWQgYnkgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyB3aGF0IGFuIGFjdCwgSSB3aWxsIG5vdCBzYXkgb2YgYXVkYWNpdHksIChmb3IgaGUgaXMKICAgICAgICAgICAgICAgICAgICBhbnhpb3VzIHRvIGJlIGF1ZGFjaW91cywpIGJ1dCAoYW5kIHRoYXQgaXMgd2hhdCBoZSBpcyBub3QgZGVzaXJvdXMgb2YpIHdoYXQgYW4KICAgICAgICAgICAgICAgICAgICBhY3Qgb2YgZm9sbHksIGluIHdoaWNoIGhlIHN1cnBhc3NlcyBhbGwgbWVuLCBpcyBpdCB0byBtYWtlIG1lbnRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2OTYzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY5NjMiPkNhcGl0b2xpbmUgSGlsbDwvcGxhY2VOYW1lPiwgYXQgYSB0aW1lIHdoZW4KICAgICAgICAgICAgICAgICAgICBhcm1lZCBtZW4gYXJlIGFjdHVhbGx5IGJldHdlZW4gb3VyIGJlbmNoZXPigJR3aGVuIG1lbiwgYXJtZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHN3b3JkcywgYXJlIG5vdyBzdGF0aW9uZWQgaW4gdGhpcyBzYW1lIHRlbXBsZSBvZiBDb25jb3JkLCBPIHllIGltbW9ydGFsIGdvZHMsIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIHdoaWxlIEkgd2FzIGNvbnN1bCwgb3BpbmlvbnMgbW9zdCBzYWx1dGFyeSB0byB0aGUgc3RhdGUgd2VyZSBkZWxpdmVyZWQsCiAgICAgICAgICAgICAgICAgICAgb3dpbmcgdG8gd2hpY2ggaXQgaXMgdGhhdCB3ZSBhcmUgYWxsIGFsaXZlIGF0IHRoaXMgZGF5LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFjY3VzZSB0aGUgc2VuYXRlOyBhY2N1c2UgdGhlIGVxdWVzdHJpYW4gYm9keSwgd2hpY2ggYXQgdGhhdCB0aW1lIHdhcyB1bml0ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGU7IGFjY3VzZSBldmVyeSBvcmRlciBvciBzb2NpZXR5LCBhbmQgYWxsIHRoZSBjaXRpemVucywgYXMgbG9uZyBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBjb25mZXNzIHRoYXQgdGhpcyBhc3NlbWJseSBhdCB0aGlzIHZlcnkgbW9tZW50IGlzIGJlc2llZ2VkIGJ5IEl0eXJlYW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SXR5cmEgd2FzIGEgdG93biBhdCB0aGUgZm9vdCBvZiBNb3VudCBUYXVydXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLiBJdCBpcyBub3Qgc28gbXVjaCBhIHByb29mIG9mIGF1ZGFjaXR5IHRvIGFkdmFuY2UgdGhlc2Ugc3RhdGVtZW50cyBzbwogICAgICAgICAgICAgICAgICAgIGltcHVkZW50bHksIGFzIG9mIHV0dGVyIHdhbnQgb2Ygc2Vuc2UgdG8gYmUgdW5hYmxlIHRvIHNlZSB0aGVpciBjb250cmFkaWN0b3J5CiAgICAgICAgICAgICAgICAgICAgbmF0dXJlLiBGb3Igd2hhdCBpcyBtb3JlIGluc2FuZSB0aGFuLCBhZnRlciB5b3UgeW91cnNlbGYgaGF2ZSB0YWtlbiB1cCBhcm1zIHRvCiAgICAgICAgICAgICAgICAgICAgZG8gbWlzY2hpZWYgdG8gdGhlIHJlcHVibGljLCB0byByZXByb2FjaCBhbm90aGVyIHdpdGggaGF2aW5nIHRha2VuIHRoZW0gdXAgdG8KICAgICAgICAgICAgICAgICAgICBzZWN1cmUgaXRzIHNhZmV0eT8gT24gb25lIG9jY2FzaW9uIHlvdSBhdHRlbXB0ZWQgZXZlbiB0byBiZSB3aXR0eS4gTyB5ZSBnb29kCiAgICAgICAgICAgICAgICAgICAgZ29kcywgaG93IGxpdHRsZSBkaWQgdGhhdCBhdHRlbXB0IHN1aXQgeW91ISA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgQW5kIHlldCB5b3UgYXJlIGEgbGl0dGxlIHRvIGJlIGJsYW1lZCBmb3IgeW91ciBmYWlsdXJlIGluIHRoYXQgaW5zdGFuY2UsIHRvby4KICAgICAgICAgICAgICAgICAgICBGb3IgeW91IG1pZ2h0IGhhdmUgZ290IHNvbWUgd2l0IGZyb20geW91ciB3aWZlLCB3aG8gd2FzIGFuIGFjdHJlc3MuCiAgICAgICAgICAgICAgICAgICAg4oCcQXJtcyB0byB0aGUgZ293biBtdXN0IHlpZWxkLuKAnSBXZWxsLCBoYXZlIHRoZXkgbm90IHlpZWxkZWQ/CiAgICAgICAgICAgICAgICAgICAgQnV0IGFmdGVyd2FyZHMgdGhlIGdvd24geWllbGRlZCB0byB5b3VyIGFybXMuIExldCB1cyBpbnF1aXJlIHRoZW4gd2hldGhlciA8cGIgbj0iMjgiIC8+IGl0IHdhcyBiZXR0ZXIgZm9yIHRoZSBhcm1zIG9mIHdpY2tlZCBtZW4gdG8geWllbGQgdG8gdGhlIGZyZWVkb20gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgUm9tYW4gcGVvcGxlLCBvciB0aGF0IG91ciBsaWJlcnR5IHNob3VsZCB5aWVsZCB0byB5b3VyIGFybXMuIE5vciB3aWxsIEkgbWFrZQogICAgICAgICAgICAgICAgICAgIGFueSBmdXJ0aGVyIHJlcGx5IHRvIHlvdSBhYm91dCB0aGUgdmVyc2VzLiBJIHdpbGwgb25seSBzYXkgYnJpZWZseSB0aGF0IHlvdSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCB1bmRlcnN0YW5kIHRoZW0sIG5vciBhbnkgb3RoZXIgbGl0ZXJhdHVyZSB3aGF0ZXZlci4gVGhhdCBJIGhhdmUgbmV2ZXIgYXQgYW55CiAgICAgICAgICAgICAgICAgICAgdGltZSBiZWVuIHdhbnRpbmcgdG8gdGhlIGNsYWltcyB0aGF0IGVpdGhlciB0aGUgcmVwdWJsaWMgb3IgbXkgZnJpZW5kcyBoYWQgdXBvbgogICAgICAgICAgICAgICAgICAgIG1lOyBidXQgbmV2ZXJ0aGVsZXNzIHRoYXQgaW4gYWxsIHRoZSBkaWZmZXJlbnQgc29ydHMgb2YgY29tcG9zaXRpb24gb24gd2hpY2ggSQogICAgICAgICAgICAgICAgICAgIGhhdmUgZW1wbG95ZWQgbXlzZWxmLCBkdXJpbmcgbXkgbGVpc3VyZSBob3VycywgSSBoYXZlIGFsd2F5cyBlbmRlYXZvdXJlZCB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgbXkgbGFib3VycyBhbW9uZyBteSB3cml0aW5ncyBzdWNoIGFzIHRvIGJlIHNvbWUgYWR2YW50YWdlIHRvIG91ciB5b3V0aCwgYW5kIHNvbWUKICAgICAgICAgICAgICAgICAgICBjcmVkaXQgdG8gdGhlIFJvbWFuIG5hbWUuIEJ1dCwgaG93ZXZlciwgYWxsIHRoaXMgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IG9jY2FzaW9uLiBMZXQgdXMgY29uc2lkZXIgbW9yZSBpbXBvcnRhbnQgbWF0dGVycy4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkl0eXJhIHdhcyBhIHRvd24gYXQgdGhlIGZvb3Qgb2YgTW91bnQgVGF1cnVzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBzb2xkaWVycy4gSXQgaXMgbm90IHNvIG11Y2ggYSBwcm9vZiBvZiBhdWRhY2l0eSB0byBhZHZhbmNlIHRoZXNlIHN0YXRlbWVudHMgc28KICAgICAgICAgICAgICAgICAgICBpbXB1ZGVudGx5LCBhcyBvZiB1dHRlciB3YW50IG9mIHNlbnNlIHRvIGJlIHVuYWJsZSB0byBzZWUgdGhlaXIgY29udHJhZGljdG9yeQogICAgICAgICAgICAgICAgICAgIG5hdHVyZS4gRm9yIHdoYXQgaXMgbW9yZSBpbnNhbmUgdGhhbiwgYWZ0ZXIgeW91IHlvdXJzZWxmIGhhdmUgdGFrZW4gdXAgYXJtcyB0bwogICAgICAgICAgICAgICAgICAgIGRvIG1pc2NoaWVmIHRvIHRoZSByZXB1YmxpYywgdG8gcmVwcm9hY2ggYW5vdGhlciB3aXRoIGhhdmluZyB0YWtlbiB0aGVtIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgc2VjdXJlIGl0cyBzYWZldHk/IE9uIG9uZSBvY2Nhc2lvbiB5b3UgYXR0ZW1wdGVkIGV2ZW4gdG8gYmUgd2l0dHkuIE8geWUgZ29vZAogICAgICAgICAgICAgICAgICAgIGdvZHMsIGhvdyBsaXR0bGUgZGlkIHRoYXQgYXR0ZW1wdCBzdWl0IHlvdSEgPC90cmFuc2xhdGlvbj4="
translation['2.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IHlvdSBhcmUgYSBsaXR0bGUgdG8gYmUgYmxhbWVkIGZvciB5b3VyIGZhaWx1cmUgaW4gdGhhdCBpbnN0YW5jZSwgdG9vLgogICAgICAgICAgICAgICAgICAgIEZvciB5b3UgbWlnaHQgaGF2ZSBnb3Qgc29tZSB3aXQgZnJvbSB5b3VyIHdpZmUsIHdobyB3YXMgYW4gYWN0cmVzcy4KICAgICAgICAgICAgICAgICAgICDigJxBcm1zIHRvIHRoZSBnb3duIG11c3QgeWllbGQu4oCdIFdlbGwsIGhhdmUgdGhleSBub3QgeWllbGRlZD8KICAgICAgICAgICAgICAgICAgICBCdXQgYWZ0ZXJ3YXJkcyB0aGUgZ293biB5aWVsZGVkIHRvIHlvdXIgYXJtcy4gTGV0IHVzIGlucXVpcmUgdGhlbiB3aGV0aGVyIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiAvPiBpdCB3YXMgYmV0dGVyIGZvciB0aGUgYXJtcyBvZiB3aWNrZWQgbWVuIHRvIHlpZWxkIHRvIHRoZSBmcmVlZG9tIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZSwgb3IgdGhhdCBvdXIgbGliZXJ0eSBzaG91bGQgeWllbGQgdG8geW91ciBhcm1zLiBOb3Igd2lsbCBJIG1ha2UKICAgICAgICAgICAgICAgICAgICBhbnkgZnVydGhlciByZXBseSB0byB5b3UgYWJvdXQgdGhlIHZlcnNlcy4gSSB3aWxsIG9ubHkgc2F5IGJyaWVmbHkgdGhhdCB5b3UgZG8KICAgICAgICAgICAgICAgICAgICBub3QgdW5kZXJzdGFuZCB0aGVtLCBub3IgYW55IG90aGVyIGxpdGVyYXR1cmUgd2hhdGV2ZXIuIFRoYXQgSSBoYXZlIG5ldmVyIGF0IGFueQogICAgICAgICAgICAgICAgICAgIHRpbWUgYmVlbiB3YW50aW5nIHRvIHRoZSBjbGFpbXMgdGhhdCBlaXRoZXIgdGhlIHJlcHVibGljIG9yIG15IGZyaWVuZHMgaGFkIHVwb24KICAgICAgICAgICAgICAgICAgICBtZTsgYnV0IG5ldmVydGhlbGVzcyB0aGF0IGluIGFsbCB0aGUgZGlmZmVyZW50IHNvcnRzIG9mIGNvbXBvc2l0aW9uIG9uIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGVtcGxveWVkIG15c2VsZiwgZHVyaW5nIG15IGxlaXN1cmUgaG91cnMsIEkgaGF2ZSBhbHdheXMgZW5kZWF2b3VyZWQgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIG15IGxhYm91cnMgYW1vbmcgbXkgd3JpdGluZ3Mgc3VjaCBhcyB0byBiZSBzb21lIGFkdmFudGFnZSB0byBvdXIgeW91dGgsIGFuZCBzb21lCiAgICAgICAgICAgICAgICAgICAgY3JlZGl0IHRvIHRoZSBSb21hbiBuYW1lLiBCdXQsIGhvd2V2ZXIsIGFsbCB0aGlzIGhhcyBub3RoaW5nIHRvIGRvIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBvY2Nhc2lvbi4gTGV0IHVzIGNvbnNpZGVyIG1vcmUgaW1wb3J0YW50IG1hdHRlcnMuIDwvdHJhbnNsYXRpb24+"
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBoYXZlIHNhaWQgdGhhdCBQdWJsaXVzIENsb2RpdXMgd2FzIHNsYWluIGJ5IG15IGNvbnRyaXZhbmNlLiBXaGF0IHdvdWxkIG1lbgogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhvdWdodCBpZiBoZSBoYWQgYmVlbiBzbGFpbiBhdCB0aGUgdGltZSB3aGVuIHlvdSBwdXJzdWVkIGhpbSBpbiB0aGUgZm9ydW0KICAgICAgICAgICAgICAgICAgICB3aXRoIGEgZHJhd24gc3dvcmQsIGluIHRoZSBzaWdodCBvZiBhbGwgdGhlIFJvbWFuIHBlb3BsZTsgYW5kIHdoZW4geW91IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzZXR0bGVkIGhpcyBidXNpbmVzcyBpZiBoZSBoYWQgbm90IHRocm93biBoaW1zZWxmIHVwIHRoZSBzdGFpcnMgb2YgYQogICAgICAgICAgICAgICAgICAgIGJvb2tzZWxsZXIncyBzaG9wLCBhbmQsIHNodXR0aW5nIHRoZW0gYWdhaW5zdCB5b3UsIGNoZWNrZWQgeW91ciBhdHRhY2sgYnkgdGhhdAogICAgICAgICAgICAgICAgICAgIG1lYW5zPyBBbmQgSSBjb25mZXNzIHRoYXQgYXQgdGhhdCB0aW1lIEkgZmF2b3VyZWQgeW91LCBidXQgZXZlbiB5b3UgeW91cnNlbGYgZG8KICAgICAgICAgICAgICAgICAgICBub3Qgc2F5IHRoYXQgSSBoYWQgYWR2aXNlZCB5b3VyIGF0dGVtcHQuIEJ1dCBhcyBmb3IgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbG88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGl0IHdhcyBub3QgcG9zc2libGUgZXZlbiBmb3IgbWUgdG8gZmF2b3VyIGhpcyBhY3Rpb24uIEZvcgogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBmaW5pc2hlZCB0aGUgYnVzaW5lc3MgYmVmb3JlIGFueSBvbmUgY291bGQgc3VzcGVjdCB0aGF0IGhlIHdhcyBnb2luZyB0bwogICAgICAgICAgICAgICAgICAgIGRvIGl0LiBPaCwgYnV0IEkgYWR2aXNlZCBpdC4gSSBzdXBwb3NlIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdhcyBhIG1hbiBvZiBzdWNoIGEgZGlzcG9zaXRpb24gdGhhdCBoZSB3YXMgbm90IGFibGUgdG8gZG8KICAgICAgICAgICAgICAgICAgICBhIHNlcnZpY2UgdG8gdGhlIHJlcHVibGljIGlmIGhlIGhhZCBub3Qgc29tZSBvbmUgdG8gYWR2aXNlIGhpbSB0byBkbyBpdC4gQnV0IEkKICAgICAgICAgICAgICAgICAgICByZWpvaWNlZCBhdCBpdC4gV2VsbCwgc3VwcG9zZSBJIGRpZDsgd2FzIEkgdG8gYmUgdGhlIG9ubHkgc29ycm93ZnVsIHBlcnNvbiBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5LCB3aGVuIGV2ZXJ5IG9uZSBlbHNlIHdhcyBpbiBzdWNoIGRlbGlnaHQ/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCB0aGF0IGlucXVpcnkgaW50byB0aGUgZGVhdGggb2YgUHVibGl1cyBDbG9kaXVzIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBpbnN0aXR1dGVkIHdpdGggYW55IGdyZWF0IHdpc2RvbS4gRm9yIHdoYXQgd2FzIHRoZSByZWFzb24gZm9yIGhhdmluZyBhIG5ldwogICAgICAgICAgICAgICAgICAgIGxhdyB0byBpbnF1aXJlIGludG8gdGhlIGNvbmR1Y3Qgb2YgdGhlIG1hbiB3aG8gaGFkIHNsYWluIGhpbSwgd2hlbiB0aGVyZSB3YXMgYQogICAgICAgICAgICAgICAgICAgIGZvcm0gb2YgaW5xdWlyeSBhbHJlYWR5IGVzdGFibGlzaGVkIGJ5IHRoZSBsYXdzPyBIb3dldmVyLCBhbiBpbnF1aXJ5IHdhcwogICAgICAgICAgICAgICAgICAgIGluc3RpdHV0ZWQuIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBoYXZlIHlvdSBub3cgYmVlbiBmb3VuZCwgc28KICAgICAgICAgICAgICAgICAgICBtYW55IHllYXJzIGFmdGVyd2FyZHMsIHRvIHNheSBhIHRoaW5nIHdoaWNoLCBhdCB0aGUgdGltZSB0aGF0IHRoZSBhZmZhaXIgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgZGlzY3Vzc2lvbiwgbm8gb25lIHZlbnR1cmVkIHRvIHNheSBhZ2FpbnN0IG1lPyBCdXQgYXMgdG8gdGhlIGFzc2VydGlvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IGhhdmUgZGFyZWQgdG8gbWFrZSwgYW5kIHRoYXQgYXQgZ3JlYXQgbGVuZ3RoIHRvbywgdGhhdCBpdCB3YXMgYnkgbXkKICAgICAgICAgICAgICAgICAgICBtZWFucyB0aGF0IFBvbXBlaXVzIHdhcyA8cGIgbj0iMjkiIC8+IGFsaWVuYXRlZCBmcm9tIGhpcyBmcmllbmRzaGlwIHdpdGggQ2Flc2FyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG9uIHRoYXQgYWNjb3VudCBpdCB3YXMgbXkgZmF1bHQgdGhhdCB0aGUgY2l2aWwgd2FyIHdhcyBvcmlnaW5hdGVkOyBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IGhhdmUgbm90IGVycmVkIHNvIG11Y2ggaW4gdGhlIG1haW4gZmFjdHMsIGFzIChhbmQgdGhhdCBpcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBpbXBvcnRhbmNlKSBpbiB0aGUgdGltZXMuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbG88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGl0IHdhcyBub3QgcG9zc2libGUgZXZlbiBmb3IgbWUgdG8gZmF2b3VyIGhpcyBhY3Rpb24uIEZvcgogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBmaW5pc2hlZCB0aGUgYnVzaW5lc3MgYmVmb3JlIGFueSBvbmUgY291bGQgc3VzcGVjdCB0aGF0IGhlIHdhcyBnb2luZyB0bwogICAgICAgICAgICAgICAgICAgIGRvIGl0LiBPaCwgYnV0IEkgYWR2aXNlZCBpdC4gSSBzdXBwb3NlIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdhcyBhIG1hbiBvZiBzdWNoIGEgZGlzcG9zaXRpb24gdGhhdCBoZSB3YXMgbm90IGFibGUgdG8gZG8KICAgICAgICAgICAgICAgICAgICBhIHNlcnZpY2UgdG8gdGhlIHJlcHVibGljIGlmIGhlIGhhZCBub3Qgc29tZSBvbmUgdG8gYWR2aXNlIGhpbSB0byBkbyBpdC4gQnV0IEkKICAgICAgICAgICAgICAgICAgICByZWpvaWNlZCBhdCBpdC4gV2VsbCwgc3VwcG9zZSBJIGRpZDsgd2FzIEkgdG8gYmUgdGhlIG9ubHkgc29ycm93ZnVsIHBlcnNvbiBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5LCB3aGVuIGV2ZXJ5IG9uZSBlbHNlIHdhcyBpbiBzdWNoIGRlbGlnaHQ/IDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['2.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCB0aGF0IGlucXVpcnkgaW50byB0aGUgZGVhdGggb2YgUHVibGl1cyBDbG9kaXVzIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBpbnN0aXR1dGVkIHdpdGggYW55IGdyZWF0IHdpc2RvbS4gRm9yIHdoYXQgd2FzIHRoZSByZWFzb24gZm9yIGhhdmluZyBhIG5ldwogICAgICAgICAgICAgICAgICAgIGxhdyB0byBpbnF1aXJlIGludG8gdGhlIGNvbmR1Y3Qgb2YgdGhlIG1hbiB3aG8gaGFkIHNsYWluIGhpbSwgd2hlbiB0aGVyZSB3YXMgYQogICAgICAgICAgICAgICAgICAgIGZvcm0gb2YgaW5xdWlyeSBhbHJlYWR5IGVzdGFibGlzaGVkIGJ5IHRoZSBsYXdzPyBIb3dldmVyLCBhbiBpbnF1aXJ5IHdhcwogICAgICAgICAgICAgICAgICAgIGluc3RpdHV0ZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhhdmUgeW91IG5vdyBiZWVuIGZvdW5kLCBzbwogICAgICAgICAgICAgICAgICAgIG1hbnkgeWVhcnMgYWZ0ZXJ3YXJkcywgdG8gc2F5IGEgdGhpbmcgd2hpY2gsIGF0IHRoZSB0aW1lIHRoYXQgdGhlIGFmZmFpciB3YXMKICAgICAgICAgICAgICAgICAgICB1bmRlciBkaXNjdXNzaW9uLCBubyBvbmUgdmVudHVyZWQgdG8gc2F5IGFnYWluc3QgbWU/IEJ1dCBhcyB0byB0aGUgYXNzZXJ0aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgaGF2ZSBkYXJlZCB0byBtYWtlLCBhbmQgdGhhdCBhdCBncmVhdCBsZW5ndGggdG9vLCB0aGF0IGl0IHdhcyBieSBteQogICAgICAgICAgICAgICAgICAgIG1lYW5zIHRoYXQgUG9tcGVpdXMgd2FzIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiAvPiBhbGllbmF0ZWQgZnJvbSBoaXMgZnJpZW5kc2hpcCB3aXRoIENhZXNhciwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBvbiB0aGF0IGFjY291bnQgaXQgd2FzIG15IGZhdWx0IHRoYXQgdGhlIGNpdmlsIHdhciB3YXMgb3JpZ2luYXRlZDsgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYXZlIG5vdCBlcnJlZCBzbyBtdWNoIGluIHRoZSBtYWluIGZhY3RzLCBhcyAoYW5kIHRoYXQgaXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgaW1wb3J0YW5jZSkgaW4gdGhlIHRpbWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gTWFyY3VzIEJpYnVsdXMsIGEgbW9zdCBpbGx1c3RyaW91cyBjaXRpemVuLCB3YXMgY29uc3VsLCBJIG9taXR0ZWQgbm90aGluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoIEkgY291bGQgcG9zc2libHkgZG8gb3IgYXR0ZW1wdCB0byBkcmF3IG9mZiBQb21wZWl1cyBmcm9tIGhpcyB1bmlvbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLiBJbiB3aGljaCwgaG93ZXZlciwgQ2Flc2FyIHdhcyBtb3JlIGZvcnR1bmF0ZSB0aGFuIEksIGZvciBoZSBoaW1zZWxmIGRyZXcKICAgICAgICAgICAgICAgICAgICBvZmYgUG9tcGVpdXMgZnJvbSBoaXMgaW50aW1hY3kgd2l0aCBtZS4gQnV0IGFmdGVyd2FyZHMsIHdoZW4gUG9tcGVpdXMgam9pbmVkCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIHdpdGggYWxsIGhpcyBoZWFydCwgd2hhdCBjb3VsZCBoYXZlIGJlZW4gbXkgb2JqZWN0IGluIGF0dGVtcHRpbmcgdG8KICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZSB0aGVtIHRoZW4/IEl0IHdvdWxkIGhhdmUgYmVlbiB0aGUgcGFydCBvZiBhIGZvb2wgdG8gaG9wZSB0byBkbyBzbywgYW5kCiAgICAgICAgICAgICAgICAgICAgb2YgYW4gaW1wdWRlbnQgbWFuIHRvIGFkdmlzZSBpdC4gSG93ZXZlciwgdHdvIG9jY2FzaW9ucyBkaWQgYXJpc2UsIG9uIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBnYXZlIFBvbXBlaXVzIGFkdmljZSBhZ2FpbnN0IENhZXNhci4gWW91IGFyZSBhdCBsaWJlcnR5IHRvIGZpbmQgZmF1bHQgd2l0aCBteQogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3Qgb24gdGhvc2Ugb2NjYXNpb25zIGlmIHlvdSBjYW4uIE9uZSB3YXMgd2hlbiBJIGFkdmlzZWQgaGltIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIENhZXNhcidzIGdvdmVybm1lbnQgZm9yIGZpdmUgeWVhcnMgbW9yZS4gVGhlIG90aGVyLCB3aGVuIEkgYWR2aXNlZCBoaW0KICAgICAgICAgICAgICAgICAgICBub3QgdG8gcGVybWl0IGhpbSB0byBiZSBjb25zaWRlcmVkIGFzIGEgY2FuZGlkYXRlIGZvciB0aGUgY29uc3Vsc2hpcCB3aGVuIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGFic2VudC4gQW5kIGlmIEkgaGFkIGJlZW4gYWJsZSB0byBwcmV2YWlsIG9uIGhpbSBpbiBlaXRoZXIgb2YgdGhlc2UgcGFydGljdWxhcnMsCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkIG5ldmVyIGhhdmUgZmFsbGVuIGludG8gb3VyIHByZXNlbnQgbWlzZXJpZXMuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yZW92ZXIsIEkgYWxzbywgd2hlbiBQb21wZWl1cyBoYWQgbm93IGRldm90ZWQgdG8gdGhlIHNlcnZpY2Ugb2YgQ2Flc2FyIGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gcG93ZXIsIGFuZCBhbGwgdGhlIHBvd2VyIG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCBoYWQgYmVndW4gd2hlbiBpdCB3YXMgdG9vCiAgICAgICAgICAgICAgICAgICAgbGF0ZSB0byBwZXJjZWl2ZSBhbGwgdGhvc2UgdGhpbmdzIHdoaWNoIEkgaGFkIGZvcmVzZWVuIGxvbmcgYmVmb3JlLCBhbmQgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgc2F3IHRoYXQgYSBuZWZhcmlvdXMgd2FyIHdhcyBhYm91dCB0byBiZSB3YWdlZCBhZ2FpbnN0IG91ciBjb3VudHJ5LCBJIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgY2Vhc2VkIHRvIGJlIHRoZSBhZHZpc2VyIG9mIHBlYWNlLCBhbmQgY29uY29yZCwgYW5kIHNvbWUgYXJyYW5nZW1lbnQuIEFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2Ugb2YgbWluZSB3YXMgd2VsbCBrbm93biB0byBtYW55IHBlb3BsZSzigJTigJxJIHdpc2gsIE8KICAgICAgICAgICAgICAgICAgICBDbmFldXMgUG9tcGVpdXMsIHRoYXQgeW91IGhhZCBlaXRoZXIgbmV2ZXIgam9pbmVkIGluIGEgY29uZmVkZXJhY3kgd2l0aCBDYWl1cwogICAgICAgICAgICAgICAgICAgIENhZXNhciwgb3IgZWxzZSB0aGF0IHlvdSBoYWQgbmV2ZXIgYnJva2VuIGl0IG9mZi4gVGhlIG9uZSBjb25kdWN0IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgeW91ciBkaWduaXR5LCBhbmQgdGhlIG90aGVyIHdvdWxkIGhhdmUgYmVlbiBzdWl0ZWQgdG8geW91cgogICAgICAgICAgICAgICAgICAgIHBydWRlbmNlLuKAnSBUaGlzLCBPIE1hcmN1cyBBbnRvbml1cywgd2FzIGF0IGFsbCB0aW1lcyBteSBhZHZpY2UgYm90aAogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RpbmcgUG9tcGVpdXMgYW5kIGNvbmNlcm5pbmcgdGhlIHJlcHVibGljLiBBbmQgaWYgaXQgaGFkIHByZXZhaWxlZCwgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMgd291bGQgc3RpbGwgYmUgc3RhbmRpbmcsIGFuZCB5b3Ugd291bGQgaGF2ZSBwZXJpc2hlZCB0aHJvdWdoIHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgY3JpbWVzLCBhbmQgaW5kaWdlbmNlLCBhbmQgaW5mYW15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.11.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGVzZSBhcmUgYWxsIG9sZCBzdG9yaWVzIG5vdy4gVGhpcyBjaGFyZ2UsIGhvd2V2ZXIsIGlzIHF1aXRlIGEgbW9kZXJuIG9uZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IENhZXNhciB3YXMgc2xhaW4gYnkgbXkgY29udHJpdmFuY2UuIEkgYW0gYWZyYWlkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBsZXN0CiAgICAgICAgICAgICAgICAgICAgSSBzaG91bGQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIC8+IGFwcGVhciB0byB5b3UgdG8gaGF2ZSBicm91Z2h0IHVwIGEgc2hhbSBhY2N1c2VyIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBteXNlbGYgKHdoaWNoIGlzIGEgbW9zdCBkaXNncmFjZWZ1bCB0aGluZyB0byBkbyk7IGEgbWFuIG5vdCBvbmx5IHRvIGRpc3Rpbmd1aXNoCiAgICAgICAgICAgICAgICAgICAgbWUgYnkgdGhlIHByYWlzZXMgd2hpY2ggYXJlIG15IGR1ZSwgYnV0IHRvIGxvYWQgbWUgYWxzbyB3aXRoIHRob3NlIHdoaWNoIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGJlbG9uZyB0byBtZS4gRm9yIHdobyBldmVyIGhlYXJkIG15IG5hbWUgbWVudGlvbmVkIGFzIGFuIGFjY29tcGxpY2UgaW4gdGhhdCBtb3N0CiAgICAgICAgICAgICAgICAgICAgZ2xvcmlvdXMgYWN0aW9uPyBhbmQgd2hvc2UgbmFtZSBoYXMgYmVlbiBjb25jZWFsZWQgd2hvIHdhcyBpbiB0aGUgbnVtYmVyIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBnYWxsYW50IGJhbmQ/IENvbmNlYWxlZCwgZG8gSSBzYXk/IFdob3NlIG5hbWUgd2FzIHRoZXJlIHdoaWNoIHdhcyBub3QgYXQgb25jZQogICAgICAgICAgICAgICAgICAgIG1hZGUgcHVibGljPyBJIHNob3VsZCBzb29uZXIgc2F5IHRoYXQgc29tZSBtZW4gaGFkIGJvYXN0ZWQgaW4gb3JkZXIgdG8gYXBwZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGNvbmNlcm5lZCBpbiB0aGF0IGNvbnNwaXJhY3ksIHRob3VnaCB0aGV5IGhhZCBpbiByZWFsaXR5IGtub3duIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBvZiBpdCB0aGFuIHRoYXQgYW55IG9uZSB3aG8gaGFkIGJlZW4gYW4gYWNjb21wbGljZSBpbiBpdCBjb3VsZCBoYXZlIHdpc2hlZCB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBNb3Jlb3ZlciwgaG93IGxpa2VseSBpdCBpcywgdGhhdAogICAgICAgICAgICAgICAgICAgIGFtb25nIHN1Y2ggYSBudW1iZXIgb2YgbWVuLCBzb21lIG9ic2N1cmUsIHNvbWUgeW91bmcgbWVuIHdobyBoYWQgbm90IHRoZSB3aXQgdG8KICAgICAgICAgICAgICAgICAgICBjb25jZWFsIGFueSBvbmUsIG15IG5hbWUgY291bGQgcG9zc2libHkgaGF2ZSBlc2NhcGVkIG5vdGljZT8gSW5kZWVkLCBpZiBsZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3YW50ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIGRlbGl2ZXJpbmcgdGhlIGNvdW50cnksIHdoYXQgbmVlZCB3YXMgdGhlcmUgb2YgbXkKICAgICAgICAgICAgICAgICAgICBpbnN0aWdhdGluZyB0aGUgQnJ1dGksIG9uZSBvZiB3aG9tIHNhdyBldmVyeSBkYXkgaW4gaGlzIGhvdXNlIHRoZSBpbWFnZSBvZgogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBCcnV0dXMsIGFuZCB0aGUgb3RoZXIgc2F3IGFsc28gdGhlIGltYWdlIG9mIEFoYWxhPyBXZXJlIHRoZXNlIHRoZSBtZW4gdG8KICAgICAgICAgICAgICAgICAgICBzZWVrIGNvdW5zZWwgZnJvbSB0aGUgYW5jZXN0b3JzIG9mIG90aGVycyByYXRoZXIgdGhhbiBmcm9tIHRoZWlyIG93bj8gYW5kIGJ1dCBvZgogICAgICAgICAgICAgICAgICAgIGRvb3JzIHJhdGhlciB0aGFuIGF0IGhvbWU/IFdoYXQ/IENhaXVzIENhc3NpdXMsIGEgbWFuIG9mIHRoYXQgZmFtaWx5IHdoaWNoIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGVuZHVyZSwgSSB3aWxsIG5vdCBzYXkgdGhlIGRvbWluYXRpb24sIGJ1dCBldmVuIHRoZSBwb3dlciBvZiBhbnkKICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFsLOKAlGhlLCBJIHN1cHBvc2UsIHdhcyBpbiBuZWVkIG9mIG1lIHRvIGluc3RpZ2F0ZSBoaW0/IGEgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIGV2ZW4gd2l0aG91dCB0aGUgYXNzaXN0YW5jZSBvZiB0aGVzZSBvdGhlciBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2hlZCB0aGlzIHNhbWUgZGVlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjQ3MCIga2V5PSJ0Z24sNzAwMjQ3MCI+Q2lsaWNpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgbW91dGggb2YgdGhlIHJpdmVyIEN5ZG51cywgaWYgQ2Flc2FyIGhhZCBicm91Z2h0IGhpcyBzaGlwcyB0byB0aGF0IGJhbmsKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcml2ZXIgd2hpY2ggaGUgaGFkIGludGVuZGVkLCBhbmQgbm90IHRvIHRoZSBvcHBvc2l0ZSBvbmUuIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+IFdhcyBDbmFldXMgRG9taXRpdXMgc3B1cnJlZCBvbiB0byBzZWVrIHRvIHJlY292ZXIKICAgICAgICAgICAgICAgICAgICBoaXMgZGlnbml0eSwgbm90IGJ5IHRoZSBkZWF0aCBvZiBoaXMgZmF0aGVyLCBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBub3IgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVhdGggb2YgaGlzIHVuY2xlLCBub3IgYnkgdGhlIGRlcHJpdmF0aW9uIG9mIGhpcyBvd24gZGlnbml0eSwgYnV0IGJ5IG15IGFkdmljZQogICAgICAgICAgICAgICAgICAgIGFuZCBhdXRob3JpdHk/IERpZCBJIHBlcnN1YWRlIENhaXVzIFRyZWJvbml1cz8gYSBtYW4gd2hvbSBJIHNob3VsZCBub3QgaGF2ZQogICAgICAgICAgICAgICAgICAgIHZlbnR1cmVkIGV2ZW4gdG8gYWR2aXNlLiBPbiB3aGljaCBhY2NvdW50IHRoZSByZXB1YmxpYyBvd2VzIGhpbSBldmVuIGEgbGFyZ2VyCiAgICAgICAgICAgICAgICAgICAgZGVidCBvZiBncmF0aXR1ZGUsIGJlY2F1c2UgaGUgcHJlZmVycmVkIHRoZSBsaWJlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCBvZiBvbmUgbWFuLCBhbmQgYmVjYXVzZSBoZSBwcmVmZXJyZWQgb3ZlcnRocm93aW5nIGFyYml0cmFyeSBwb3dlciB0bwogICAgICAgICAgICAgICAgICAgIHNoYXJpbmcgaXQuIFdhcyBJIHRoZSBpbnN0aWdhdG9yIHdob20gTHVjaXVzIFRpbGxpdXMgQ2ltYmVyIGZvbGxvd2VkPyBhIG1hbiB3aG9tCiAgICAgICAgICAgICAgICAgICAgSSBhZG1pcmVkIGZvciBoYXZpbmcgcGVyZm9ybWVkIHRoYXQgYWN0aW9uLCByYXRoZXIgdGhhbiBldmVyIGV4cGVjdGVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCA8cGIgbj0iMzEiIC8+IHBlcmZvcm0gaXQ7IGFuZCBJIGFkbWlyZWQgaGltIG9uIHRoaXMgYWNjb3VudCwgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICB1bm1pbmRmdWwgb2YgdGhlIHBlcnNvbmFsIGtpbmRuZXNzZXMgd2hpY2ggaGUgaGFkIHJlY2VpdmVkLCBidXQgbWluZGZ1bCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LiBXaGF0IHNoYWxsIEkgc2F5IG9mIHRoZSB0d28gU2VydmlsaWk/IFNoYWxsIEkgY2FsbCB0aGVtIENhc2Nhcywgb3IKICAgICAgICAgICAgICAgICAgICBBaGFsYXM/IGFuZCBkbyB5b3UgdGhpbmsgdGhhdCB0aG9zZSBtZW4gd2VyZSBpbnN0aWdhdGVkIGJ5IG15IGF1dGhvcml0eSByYXRoZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIGJ5IHRoZWlyIGFmZmVjdGlvbiBmb3IgdGhlIHJlcHVibGljPyBJdCB3b3VsZCB0YWtlIGEgbG9uZyB0aW1lIHRvIGdvCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCBhbGwgdGhlIHJlc3Q7IGFuZCBpdCBpcyBhIGdsb3Jpb3VzIHRoaW5nIGZvciB0aGUgcmVwdWJsaWMgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBzbyBudW1lcm91cywgYW5kIGEgbW9zdCBob25vdXJhYmxlIHRoaW5nIGFsc28gZm9yIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgLz4gYXBwZWFyIHRvIHlvdSB0byBoYXZlIGJyb3VnaHQgdXAgYSBzaGFtIGFjY3VzZXIgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIG15c2VsZiAod2hpY2ggaXMgYSBtb3N0IGRpc2dyYWNlZnVsIHRoaW5nIHRvIGRvKTsgYSBtYW4gbm90IG9ubHkgdG8gZGlzdGluZ3Vpc2gKICAgICAgICAgICAgICAgICAgICBtZSBieSB0aGUgcHJhaXNlcyB3aGljaCBhcmUgbXkgZHVlLCBidXQgdG8gbG9hZCBtZSBhbHNvIHdpdGggdGhvc2Ugd2hpY2ggZG8gbm90CiAgICAgICAgICAgICAgICAgICAgYmVsb25nIHRvIG1lLiBGb3Igd2hvIGV2ZXIgaGVhcmQgbXkgbmFtZSBtZW50aW9uZWQgYXMgYW4gYWNjb21wbGljZSBpbiB0aGF0IG1vc3QKICAgICAgICAgICAgICAgICAgICBnbG9yaW91cyBhY3Rpb24/IGFuZCB3aG9zZSBuYW1lIGhhcyBiZWVuIGNvbmNlYWxlZCB3aG8gd2FzIGluIHRoZSBudW1iZXIgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGdhbGxhbnQgYmFuZD8gQ29uY2VhbGVkLCBkbyBJIHNheT8gV2hvc2UgbmFtZSB3YXMgdGhlcmUgd2hpY2ggd2FzIG5vdCBhdCBvbmNlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBwdWJsaWM/IEkgc2hvdWxkIHNvb25lciBzYXkgdGhhdCBzb21lIG1lbiBoYWQgYm9hc3RlZCBpbiBvcmRlciB0byBhcHBlYXIgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gY29uY2VybmVkIGluIHRoYXQgY29uc3BpcmFjeSwgdGhvdWdoIHRoZXkgaGFkIGluIHJlYWxpdHkga25vd24gbm90aGluZwogICAgICAgICAgICAgICAgICAgIG9mIGl0IHRoYW4gdGhhdCBhbnkgb25lIHdobyBoYWQgYmVlbiBhbiBhY2NvbXBsaWNlIGluIGl0IGNvdWxkIGhhdmUgd2lzaGVkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgY29uY2VhbGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.11.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIGhvdyBsaWtlbHkgaXQgaXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBhbW9uZyBzdWNoIGEgbnVtYmVyIG9mIG1lbiwgc29tZSBvYnNjdXJlLCBzb21lIHlvdW5nIG1lbiB3aG8gaGFkIG5vdCB0aGUgd2l0IHRvCiAgICAgICAgICAgICAgICAgICAgY29uY2VhbCBhbnkgb25lLCBteSBuYW1lIGNvdWxkIHBvc3NpYmx5IGhhdmUgZXNjYXBlZCBub3RpY2U/IEluZGVlZCwgaWYgbGVhZGVycwogICAgICAgICAgICAgICAgICAgIHdlcmUgd2FudGVkIGZvciB0aGUgcHVycG9zZSBvZiBkZWxpdmVyaW5nIHRoZSBjb3VudHJ5LCB3aGF0IG5lZWQgd2FzIHRoZXJlIG9mIG15CiAgICAgICAgICAgICAgICAgICAgaW5zdGlnYXRpbmcgdGhlIEJydXRpLCBvbmUgb2Ygd2hvbSBzYXcgZXZlcnkgZGF5IGluIGhpcyBob3VzZSB0aGUgaW1hZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBMdWNpdXMgQnJ1dHVzLCBhbmQgdGhlIG90aGVyIHNhdyBhbHNvIHRoZSBpbWFnZSBvZiBBaGFsYT8gV2VyZSB0aGVzZSB0aGUgbWVuIHRvCiAgICAgICAgICAgICAgICAgICAgc2VlayBjb3Vuc2VsIGZyb20gdGhlIGFuY2VzdG9ycyBvZiBvdGhlcnMgcmF0aGVyIHRoYW4gZnJvbSB0aGVpciBvd24/IGFuZCBidXQgb2YKICAgICAgICAgICAgICAgICAgICBkb29ycyByYXRoZXIgdGhhbiBhdCBob21lPyBXaGF0PyBDYWl1cyBDYXNzaXVzLCBhIG1hbiBvZiB0aGF0IGZhbWlseSB3aGljaCBjb3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBlbmR1cmUsIEkgd2lsbCBub3Qgc2F5IHRoZSBkb21pbmF0aW9uLCBidXQgZXZlbiB0aGUgcG93ZXIgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbCzigJRoZSwgSSBzdXBwb3NlLCB3YXMgaW4gbmVlZCBvZiBtZSB0byBpbnN0aWdhdGUgaGltPyBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdobyBldmVuIHdpdGhvdXQgdGhlIGFzc2lzdGFuY2Ugb2YgdGhlc2Ugb3RoZXIgbW9zdCBpbGx1c3RyaW91cyBtZW4sIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNoZWQgdGhpcyBzYW1lIGRlZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI0NzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjQ3MCI+Q2lsaWNpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgbW91dGggb2YgdGhlIHJpdmVyIEN5ZG51cywgaWYgQ2Flc2FyIGhhZCBicm91Z2h0IGhpcyBzaGlwcyB0byB0aGF0IGJhbmsKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcml2ZXIgd2hpY2ggaGUgaGFkIGludGVuZGVkLCBhbmQgbm90IHRvIHRoZSBvcHBvc2l0ZSBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['2.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2FzIENuYWV1cyBEb21pdGl1cyBzcHVycmVkIG9uIHRvIHNlZWsgdG8gcmVjb3ZlcgogICAgICAgICAgICAgICAgICAgIGhpcyBkaWduaXR5LCBub3QgYnkgdGhlIGRlYXRoIG9mIGhpcyBmYXRoZXIsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4sIG5vciBieSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWF0aCBvZiBoaXMgdW5jbGUsIG5vciBieSB0aGUgZGVwcml2YXRpb24gb2YgaGlzIG93biBkaWduaXR5LCBidXQgYnkgbXkgYWR2aWNlCiAgICAgICAgICAgICAgICAgICAgYW5kIGF1dGhvcml0eT8gRGlkIEkgcGVyc3VhZGUgQ2FpdXMgVHJlYm9uaXVzPyBhIG1hbiB3aG9tIEkgc2hvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgZXZlbiB0byBhZHZpc2UuIE9uIHdoaWNoIGFjY291bnQgdGhlIHJlcHVibGljIG93ZXMgaGltIGV2ZW4gYSBsYXJnZXIKICAgICAgICAgICAgICAgICAgICBkZWJ0IG9mIGdyYXRpdHVkZSwgYmVjYXVzZSBoZSBwcmVmZXJyZWQgdGhlIGxpYmVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIG9mIG9uZSBtYW4sIGFuZCBiZWNhdXNlIGhlIHByZWZlcnJlZCBvdmVydGhyb3dpbmcgYXJiaXRyYXJ5IHBvd2VyIHRvCiAgICAgICAgICAgICAgICAgICAgc2hhcmluZyBpdC4gV2FzIEkgdGhlIGluc3RpZ2F0b3Igd2hvbSBMdWNpdXMgVGlsbGl1cyBDaW1iZXIgZm9sbG93ZWQ/IGEgbWFuIHdob20KICAgICAgICAgICAgICAgICAgICBJIGFkbWlyZWQgZm9yIGhhdmluZyBwZXJmb3JtZWQgdGhhdCBhY3Rpb24sIHJhdGhlciB0aGFuIGV2ZXIgZXhwZWN0ZWQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiAvPiBwZXJmb3JtIGl0OyBhbmQgSSBhZG1pcmVkIGhpbSBvbiB0aGlzIGFjY291bnQsIHRoYXQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5taW5kZnVsIG9mIHRoZSBwZXJzb25hbCBraW5kbmVzc2VzIHdoaWNoIGhlIGhhZCByZWNlaXZlZCwgYnV0IG1pbmRmdWwgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gV2hhdCBzaGFsbCBJIHNheSBvZiB0aGUgdHdvIFNlcnZpbGlpPyBTaGFsbCBJIGNhbGwgdGhlbSBDYXNjYXMsIG9yCiAgICAgICAgICAgICAgICAgICAgQWhhbGFzPyBhbmQgZG8geW91IHRoaW5rIHRoYXQgdGhvc2UgbWVuIHdlcmUgaW5zdGlnYXRlZCBieSBteSBhdXRob3JpdHkgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhhbiBieSB0aGVpciBhZmZlY3Rpb24gZm9yIHRoZSByZXB1YmxpYz8gSXQgd291bGQgdGFrZSBhIGxvbmcgdGltZSB0byBnbwogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggYWxsIHRoZSByZXN0OyBhbmQgaXQgaXMgYSBnbG9yaW91cyB0aGluZyBmb3IgdGhlIHJlcHVibGljIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc28gbnVtZXJvdXMsIGFuZCBhIG1vc3QgaG9ub3VyYWJsZSB0aGluZyBhbHNvIGZvciB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.12.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCByZWNvbGxlY3QsIEkgcHJheSB5b3UsIGhvdyB0aGF0IGNsZXZlciBtYW4gY29udmljdGVkIG1lIG9mIGJlaW5nIGFuCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGljZSBpbiB0aGUgYnVzaW5lc3MuIFdoZW4gQ2Flc2FyIHdhcyBzbGFpbiwgc2F5cyBoZSwgTWFyY3VzIEJydXR1cwogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5IGxpZnRlZCB1cCBvbiBoaWdoIGhpcyBibG9vZHkgZGFnZ2VyLCBhbmQgY2FsbGVkIG9uIENpY2VybyBieSBuYW1lOwogICAgICAgICAgICAgICAgICAgIGFuZCBjb25ncmF0dWxhdGVkIGhpbSBvbiBsaWJlcnR5IGJlaW5nIHJlY292ZXJlZC4gV2h5IG9uIG1hbiBhYm92ZSBhbGwgbWVuPwogICAgICAgICAgICAgICAgICAgIEJlY2F1c2UgSSBrbmV3IG9mIGl0IGJlZm9yZWhhbmQ/IENvbnNpZGVyIHJhdGhlciB3aGV0aGVyIHRoaXMgd2FzIG5vdCBoaXMgcmVhc29uCiAgICAgICAgICAgICAgICAgICAgZm9yIGNhbGxpbmcgb24gbWUsIHRoYXQsIHdoZW4gaGUgaGFkIHBlcmZvcm1lZCBhbiBhY3Rpb24gdmVyeSBsaWtlIHRob3NlIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBteXNlbGYgaGFkIGRvbmUsIGhlIGNhbGxlZCBtZSBhYm92ZSBhbGwgbWVuIHRvIHdpdG5lc3MgdGhhdCBoZSBoYWQgYmVlbiBhbgogICAgICAgICAgICAgICAgICAgIGltaXRhdG9yIG9mIG15IGV4cGxvaXRzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB5b3UsIE8gc3R1cGlkZXN0CiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIG1lbiwgZG8geW91IG5vdCBwZXJjZWl2ZSwgdGhhdCBpZiBpdCBpcyBhIGNyaW1lIHRvIGhhdmUgd2lzaGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgc2hvdWxkIGJlIHNsYWlu4oCUd2hpY2ggeW91IGFjY3VzZSBtZSBvZiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICB3aXNoZWTigJRpdCBpcyBhIGNyaW1lIGFsc28gdG8gaGF2ZSByZWpvaWNlZCBhdCBoaXMgZGVhdGg/IEZvciB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIG1hbiB3aG8gaGFzIGFkdmlzZWQgYW4gYWN0aW9uLCBhbmQgb25lIHdobyBoYXMgYXBwcm92ZWQKICAgICAgICAgICAgICAgICAgICBvZiBpdD8gb3Igd2hhdCBkb2VzIGl0IHNpZ25pZnkgd2hldGhlciBJIHdpc2hlZCBpdCB0byBiZSBkb25lLCBvciByZWpvaWNlIHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCBoYXMgYmVlbiBkb25lPyBJcyB0aGVyZSBhbnkgb25lIHRoZW4sIGV4Y2VwdCB5b3UgeW91cnNlbGYgYW5kIHRoZXNlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICB3aXNoZWQgaGltIHRvIGJlY29tZSBhIGtpbmcsIHdobyB3YXMgdW53aWxsaW5nIHRoYXQgdGhhdCBkZWVkIHNob3VsZCBiZSBkb25lLCBvcgogICAgICAgICAgICAgICAgICAgIHdobyBkaXNhcHByb3ZlZCBvZiBpdCBhZnRlciBpdCB3YXMgZG9uZT8gQWxsIG1lbiwgdGhlcmVmb3JlLCBhcmUgZ3VpbHR5IGFzIGZhcgogICAgICAgICAgICAgICAgICAgIGFzIHRoaXMgZ29lcy4gSW4gdHJ1dGgsIGFsbCBnb29kIG1lbiwgYXMgZmFyIGFzIGl0IGRlcGVuZGVkIG9uIHRoZW0sIGJvcmUgYSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNsYXlpbmcgb2YgQ2Flc2FyLiBTb21lIGRpZCBub3Qga25vdyBob3cgdG8gY29udHJpdmUgaXQsIHNvbWUgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIGNvdXJhZ2UgZm9yIGl0LCBzb21lIGhhZCBubyBvcHBvcnR1bml0eSzigJRldmVyeSBvbmUgaGFkIHRoZQogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uLiA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.12.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHlvdSwgTyBzdHVwaWRlc3QKICAgICAgICAgICAgICAgICAgICBvZiBhbGwgbWVuLCBkbyB5b3Ugbm90IHBlcmNlaXZlLCB0aGF0IGlmIGl0IGlzIGEgY3JpbWUgdG8gaGF2ZSB3aXNoZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIENhZXNhciBzaG91bGQgYmUgc2xhaW7igJR3aGljaCB5b3UgYWNjdXNlIG1lIG9mIGhhdmluZwogICAgICAgICAgICAgICAgICAgIHdpc2hlZOKAlGl0IGlzIGEgY3JpbWUgYWxzbyB0byBoYXZlIHJlam9pY2VkIGF0IGhpcyBkZWF0aD8gRm9yIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgbWFuIHdobyBoYXMgYWR2aXNlZCBhbiBhY3Rpb24sIGFuZCBvbmUgd2hvIGhhcyBhcHByb3ZlZAogICAgICAgICAgICAgICAgICAgIG9mIGl0PyBvciB3aGF0IGRvZXMgaXQgc2lnbmlmeSB3aGV0aGVyIEkgd2lzaGVkIGl0IHRvIGJlIGRvbmUsIG9yIHJlam9pY2UgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IGhhcyBiZWVuIGRvbmU/IElzIHRoZXJlIGFueSBvbmUgdGhlbiwgZXhjZXB0IHlvdSB5b3Vyc2VsZiBhbmQgdGhlc2UgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIHdpc2hlZCBoaW0gdG8gYmVjb21lIGEga2luZywgd2hvIHdhcyB1bndpbGxpbmcgdGhhdCB0aGF0IGRlZWQgc2hvdWxkIGJlIGRvbmUsIG9yCiAgICAgICAgICAgICAgICAgICAgd2hvIGRpc2FwcHJvdmVkIG9mIGl0IGFmdGVyIGl0IHdhcyBkb25lPyBBbGwgbWVuLCB0aGVyZWZvcmUsIGFyZSBndWlsdHkgYXMgZmFyCiAgICAgICAgICAgICAgICAgICAgYXMgdGhpcyBnb2VzLiBJbiB0cnV0aCwgYWxsIGdvb2QgbWVuLCBhcyBmYXIgYXMgaXQgZGVwZW5kZWQgb24gdGhlbSwgYm9yZSBhIHBhcnQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2xheWluZyBvZiBDYWVzYXIuIFNvbWUgZGlkIG5vdCBrbm93IGhvdyB0byBjb250cml2ZSBpdCwgc29tZSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgY291cmFnZSBmb3IgaXQsIHNvbWUgaGFkIG5vIG9wcG9ydHVuaXR5LOKAlGV2ZXJ5IG9uZSBoYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5jbGluYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['2.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SG93ZXZlciwgcmVtYXJrIHRoZSBzdHVwaWRpdHkgb2YgdGhpcyBmZWxsb3cs4oCUSSBzaG91bGQgcmF0aGVyIHNheSwgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGJydXRlIGJlYXN0LiBGb3IgdGh1cyBoZSBzcG9rZTrigJTigJxNYXJjdXMgQnJ1dHVzLCB3aG9tIEkKICAgICAgICAgICAgICAgICAgICBuYW1lIHRvIGRvIGhpbSBob25vdXIsIGhvbGRpbmcgYWxvZnQgaGlzIGJsb29keSBkYWdnZXIsIGNhbGxlZCB1cG9uIENpY2VybywgZnJvbQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGl0IG11c3QgYmUgdW5kZXJzdG9vZCB0aGF0IGhlIHdhcyBwcml2eSB0byB0aGUgYWN0aW9uLuKAnSBBbSBJCiAgICAgICAgICAgICAgICAgICAgdGhlbiBjYWxsZWQgd2lja2VkIGJ5IHlvdSBiZWNhdXNlIHlvdSBzdXNwZWN0IHRoYXQgSSBzdXNwZWN0ZWQgc29tZXRoaW5nOyBhbmQgaXMKICAgICAgICAgICAgICAgICAgICBoZSB3aG8gb3Blbmx5IGRpc3BsYXllZCBoaXMgcmVla2luZyBkYWdnZXI7IG5hbWVkIGJ5IHlvdSB0aGF0IHlvdSBtYXkgZG8gaGltCiAgICAgICAgICAgICAgICAgICAgaG9ub3VyPyBCZSBpdCBzby4gTGV0IHRoaXMgc3R1cGlkaXR5IGV4aXN0IGluIHlvdXIgbGFuZ3VhZ2U6IGhvdyBtdWNoIGdyZWF0ZXIgaXMKICAgICAgICAgICAgICAgICAgICBpdCBpbiB5b3VyIGFjdGlvbnMgYW5kIG9waW5pb25zPyBBcnJhbmdlIG1hdHRlcnMgaW4gdGhpcyB3YXkgYXQgbGFzdCwgTyBjb25zdWw7CiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlIHRoZSBjYXVzZSBvZiB0aGUgQnJ1dGksIG9mIENhaXVzIENhc3NpdXMsIG9mIENuYWV1cyBEb21pdGl1cywgb2YgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBUcmVib25pdXMgYW5kIHRoZSByZXN0IHRvIGJlIHdoYXRldmVyIHlvdSBwbGVhc2UgdG8gY2FsbCBpdDogc2xlZXAgb2ZmIHRoYXQKICAgICAgICAgICAgICAgICAgICBpbnRveGljYXRpb24gb2YgeW91cnMsIHNsZWVwIGl0IG9mZiBhbmQgdGFrZSBicmVhdGguIE11c3Qgb25lIGFwcGx5IGEgdG9yY2ggdG8KICAgICAgICAgICAgICAgICAgICB5b3UgdG8gd2FrZW4geW91IHdoaWxlIHlvdSBhcmUgc2xlZXBpbmcgb3ZlciBzdWNoIGFuIGltcG9ydGFudCBhZmZhaXI/IFdpbGwgeW91CiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgdW5kZXJzdGFuZCB0aGF0IHlvdSBoYXZlIHRvIGRlY2lkZSB3aGV0aGVyIHRob3NlIG1lbiB3aG8gcGVyZm9ybWVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gYXJlIGhvbWljaWRlcyBvciBhc3NlcnRvcnMgb2YgZnJlZWRvbT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.13.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciBqdXN0IGNvbnNpZGVyIGEgbGl0dGxlOyBhbmQgZm9yIGEgbW9tZW50IHRoaW5rIG9mIHRoZSBidXNpbmVzcyBsaWtlIGEgc29iZXIKICAgICAgICAgICAgICAgICAgICBtYW4uIEkgd2hvLCBhcyBJIG15c2VsZiBjb25mZXNzLCBhbSBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgdGhvc2UgbWVuLCBhbmQsIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIGFjY3VzZSBtZSwgYW4gYWNjb21wbGljZSBvZiB0aGVpcnMsIGRlbnkgdGhhdCB0aGVyZSBpcyBhbnkgbWVkaXVtIGJldHdlZW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZXMuIEkgY29uZmVzcyB0aGF0IHRoZXksIGlmIHRoZXkgYmUgbm90IGRlbGl2ZXJlcnMgb2YgdGhlIFJvbWFuIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGFuZCBzYXZpb3VycyBvZiB0aGUgcmVwdWJsaWMsIGFyZSB3b3JzZSB0aGFuIGFzc2Fzc2lucywgd29yc2UgdGhhbiBob21pY2lkZXMsCiAgICAgICAgICAgICAgICAgICAgd29yc2UgZXZlbiB0aGFuIHBhcnJpY2lkZXM6IHNpbmNlIGl0IGlzIGEgbW9yZSBhdHJvY2lvdXMgdGhpbmcgdG8gbXVyZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBvbmUncyBjb3VudHJ5LCB0aGFuIG9uZSdzIG93biBmYXRoZXIuIFlvdSB3aXNlIGFuZCBjb25zaWRlcmF0ZSBtYW4sCiAgICAgICAgICAgICAgICAgICAgd2hhdCBkbyB5b3Ugc2F5IHRvIHRoaXM/IElmIHRoZXkgYXJlIHBhcnJpY2lkZXMsIHdoeSBhcmUgdGhleSBhbHdheXMgbmFtZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3UsIGJvdGggaW4gdGhpcyBhc3NlbWJseSBhbmQgYmVmb3JlIHRoZSBSb21hbiBwZW9wbGUsIHdpdGggYSB2aWV3IHRvIGRvIHRoZW0KICAgICAgICAgICAgICAgICAgICBob25vdXI/IFdoeSBoYXMgTWFyY3VzIEJydXR1cyBiZWVuLCBvbiB5b3VyIG1vdGlvbiwgZXhjdXNlZCBmcm9tIG9iZWRpZW5jZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzLCBhbmQgYWxsb3dlZCB0byBiZSBhYnNlbnQgZnJvbSB0aGUgY2l0eSBtb3JlIHRoYW4gdGVuIGRheXM/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkJydXR1cyB3YXMgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlByYWV0b3IgdXJiYW51czwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB5ZWFyLCBhbmQgdGhhdCBvZmZpY2VyJ3MgZHV0eSBjb25maW5lZCBoaW0gdG8gdGhlIGNpdHk7IGFuZCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZm9yYmlkZGVuIGJ5IGxhdyB0byBiZSBhYnNlbnQgbW9yZSB0aGFuIHRlbiBkYXlzIGF0IGEgdGltZSBkdXJpbmcgaGlzIHllYXIKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygb2ZmaWNlLjwvbm90ZT4gV2h5IHdlcmUgdGhlIGdhbWVzIG9mIEFwb2xsbyBjZWxlYnJhdGVkIHdpdGggaW5jcmVkaWJsZQogICAgICAgICAgICAgICAgICAgIGhvbm91ciB0byBNYXJjdXMgQnJ1dHVzPyB3aHkgd2VyZSBwcm92aW5jZXMgZ2l2ZW4gdG8gQnJ1dHVzIGFuZCBDYXNzaXVzPyB3aHkKICAgICAgICAgICAgICAgICAgICB3ZXJlIHF1YWVzdG9ycyBhc3NpZ25lZCB0byB0aGVtPyB3aHkgd2FzIHRoZSBudW1iZXIgb2YgdGhlaXIgbGlldXRlbmFudHMKICAgICAgICAgICAgICAgICAgICBhdWdtZW50ZWQ/IEFuZCBhbGwgdGhlc2UgbWVhc3VyZXMgd2VyZSBvd2luZyB0byB5b3UuIFRoZXkgYXJlIG5vdCBob21pY2lkZXMKICAgICAgICAgICAgICAgICAgICB0aGVuLiBJdCBmb2xsb3dzIHRoYXQgaW4geW91ciBvcGluaW9uIHRoZXkgYXJlIGRlbGl2ZXJlcnMgb2YgdGhlaXIgY291bnRyeSwKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGVyZSBjYW4gYmUgbm8gb3RoZXIgYWx0ZXJuYXRpdmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBtYXR0ZXI/IEFtIEkgZW1iYXJyYXNzaW5nIHlvdT8gRm9yIHBlcmhhcHMgeW91IGRvIG5vdCBxdWl0ZSB1bmRlcnN0YW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zaXRpb25zIHdoaWNoIGFyZSBzdGF0ZWQgZGlzanVuY3RpdmVseS4gU3RpbGwgdGhpcyBpcyB0aGUgc3VtIHRvdGFsIG9mIG15CiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbjsgdGhhdCBzaW5jZSB0aGV5IGFyZSBhY3F1aXR0ZWQgYnkgeW91IG9mIHdpY2tlZG5lc3MsIHRoZXkgYXJlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSBwcm9ub3VuY2VkIG1vc3Qgd29ydGh5IG9mIHRoZSB2ZXJ5IG1vc3QgaG9ub3VyYWJsZSByZXdhcmRzLiA8L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+QnJ1dHVzIHdhcyB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHJhZXRvciB1cmJhbnVzPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHllYXIsIGFuZCB0aGF0IG9mZmljZXIncyBkdXR5IGNvbmZpbmVkIGhpbSB0byB0aGUgY2l0eTsgYW5kIGhlIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4gYnkgbGF3IHRvIGJlIGFic2VudCBtb3JlIHRoYW4gdGVuIGRheXMgYXQgYSB0aW1lIGR1cmluZyBoaXMgeWVhcgogICAgICAgICAgICAgICAgICAgICAgICBvZiBvZmZpY2UuPC9ub3RlPiBXaHkgd2VyZSB0aGUgZ2FtZXMgb2YgQXBvbGxvIGNlbGVicmF0ZWQgd2l0aCBpbmNyZWRpYmxlCiAgICAgICAgICAgICAgICAgICAgaG9ub3VyIHRvIE1hcmN1cyBCcnV0dXM/IHdoeSB3ZXJlIHByb3ZpbmNlcyBnaXZlbiB0byBCcnV0dXMgYW5kIENhc3NpdXM/IHdoeQogICAgICAgICAgICAgICAgICAgIHdlcmUgcXVhZXN0b3JzIGFzc2lnbmVkIHRvIHRoZW0/IHdoeSB3YXMgdGhlIG51bWJlciBvZiB0aGVpciBsaWV1dGVuYW50cwogICAgICAgICAgICAgICAgICAgIGF1Z21lbnRlZD8gQW5kIGFsbCB0aGVzZSBtZWFzdXJlcyB3ZXJlIG93aW5nIHRvIHlvdS4gVGhleSBhcmUgbm90IGhvbWljaWRlcwogICAgICAgICAgICAgICAgICAgIHRoZW4uIEl0IGZvbGxvd3MgdGhhdCBpbiB5b3VyIG9waW5pb24gdGhleSBhcmUgZGVsaXZlcmVycyBvZiB0aGVpciBjb3VudHJ5LAogICAgICAgICAgICAgICAgICAgIHNpbmNlIHRoZXJlIGNhbiBiZSBubyBvdGhlciBhbHRlcm5hdGl2ZS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHJhZXRvciB1cmJhbnVzPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHllYXIsIGFuZCB0aGF0IG9mZmljZXIncyBkdXR5IGNvbmZpbmVkIGhpbSB0byB0aGUgY2l0eTsgYW5kIGhlIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4gYnkgbGF3IHRvIGJlIGFic2VudCBtb3JlIHRoYW4gdGVuIGRheXMgYXQgYSB0aW1lIGR1cmluZyBoaXMgeWVhcgogICAgICAgICAgICAgICAgICAgICAgICBvZiBvZmZpY2UuPC90cmFuc2xhdGlvbj4="
translation['2.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBtYXR0ZXI/IEFtIEkgZW1iYXJyYXNzaW5nIHlvdT8gRm9yIHBlcmhhcHMgeW91IGRvIG5vdCBxdWl0ZSB1bmRlcnN0YW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zaXRpb25zIHdoaWNoIGFyZSBzdGF0ZWQgZGlzanVuY3RpdmVseS4gU3RpbGwgdGhpcyBpcyB0aGUgc3VtIHRvdGFsIG9mIG15CiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbjsgdGhhdCBzaW5jZSB0aGV5IGFyZSBhY3F1aXR0ZWQgYnkgeW91IG9mIHdpY2tlZG5lc3MsIHRoZXkgYXJlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSBwcm9ub3VuY2VkIG1vc3Qgd29ydGh5IG9mIHRoZSB2ZXJ5IG1vc3QgaG9ub3VyYWJsZSByZXdhcmRzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlZm9yZSwgSSB3aWxsIG5vdyBwcm9jZWVkIGFnYWluIHdpdGggbXkgb3JhdGlvbi4gSSB3aWxsIHdyaXRlIHRvIHRoZW0sIGlmIGFueQogICAgICAgICAgICAgICAgICAgIG9uZSBieSBjaGFuY2Ugc2hvdWxkIGFzayB3aGV0aGVyIHdoYXQgeW91IGhhdmUgaW1wdXRlZCB0byBtZSBiZSB0cnVlLCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBkZW55IGl0IHRvIGFueSBvbmUuIEluIHRydXRoLCBJIGFtIGFmcmFpZCB0aGF0IGl0IG11c3QgYmUgY29uc2lkZXJlZCBlaXRoZXIgYQogICAgICAgICAgICAgICAgICAgIG5vdCB2ZXJ5IGNyZWRpdGFibGUgdGhpbmcgdG8gdGhlbSwgdGhhdCB0aGV5IHNob3VsZCBoYXZlIGNvbmNlYWxlZCB0aGUgZmFjdCBvZgogICAgICAgICAgICAgICAgICAgIG15IGJlaW5nIGFuIGFjY29tcGxpY2U7IG9yIGVsc2UgYSBtb3N0IGRpc2NyZWRpdGFibGUgb25lIHRvIG1lIHRoYXQgSSB3YXMKICAgICAgICAgICAgICAgICAgICBpbnZpdGVkIHRvIGJlIG9uZSwgYW5kIHRoYXQgSSBzaGlya2VkIGl0LiBGb3Igd2hhdCBncmVhdGVyIGV4cGxvaXQgKEkgY2FsbCB5b3UKICAgICAgICAgICAgICAgICAgICB0byB3aXRuZXNzLCBPIGF1Z3VzdCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiEpIHdhcyBldmVyCiAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZWQgbm90IG9ubHkgaW4gdGhpcyBjaXR5LCBidXQgaW4gYWxsIHRoZSBlYXJ0aD8gV2hhdCBtb3JlIGdsb3Jpb3VzIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHdhcyBldmVyIGRvbmU/IFdoYXQgZGVlZCB3YXMgZXZlciBtb3JlIGRlc2VydmVkbHkgcmVjb21tZW5kZWQgdG8gdGhlIGV2ZXJsYXN0aW5nCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0aW9uIG9mIG1lbj8gRG8geW91LCB0aGVuLCBzaHV0IG1lIHVwIHdpdGggdGhlIG90aGVyIGxlYWRlcnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcGFydG5lcnNoaXAgaW4gdGhpcyBkZXNpZ24sIGFzIGluIHRoZSBUcm9qYW4gaG9yc2U/IEkgaGF2ZSBubyBvYmplY3Rpb247IEkgZXZlbgogICAgICAgICAgICAgICAgICAgIHRoYW5rIHlvdSBmb3IgZG9pbmcgc28sIHdpdGggd2hhdGV2ZXIgaW50ZW50IHlvdSBkbyBpdC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhlIGRlZWQgaXMgc28gZ3JlYXQgYSBvbmUsIHRoYXQgSSBjYW4gbm90IGNvbXBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgdW5wb3B1bGFyaXR5IHdoaWNoIHlvdSB3aXNoIHRvIGV4Y2l0ZSBhZ2FpbnN0IG1lIG9uIGFjY291bnQgb2YgaXQsIHdpdGggaXRzIHJlYWwKICAgICAgICAgICAgICAgICAgICBnbG9yeS4gPC9wPgoJCQkJPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkp1cGl0ZXI8L3N1cm5hbWU+PC9wZXJzTmFtZT4hKSB3YXMgZXZlcgogICAgICAgICAgICAgICAgICAgIGFjaGlldmVkIG5vdCBvbmx5IGluIHRoaXMgY2l0eSwgYnV0IGluIGFsbCB0aGUgZWFydGg/IFdoYXQgbW9yZSBnbG9yaW91cyBhY3Rpb24KICAgICAgICAgICAgICAgICAgICB3YXMgZXZlciBkb25lPyBXaGF0IGRlZWQgd2FzIGV2ZXIgbW9yZSBkZXNlcnZlZGx5IHJlY29tbWVuZGVkIHRvIHRoZSBldmVybGFzdGluZwogICAgICAgICAgICAgICAgICAgIHJlY29sbGVjdGlvbiBvZiBtZW4/IERvIHlvdSwgdGhlbiwgc2h1dCBtZSB1cCB3aXRoIHRoZSBvdGhlciBsZWFkZXJzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHBhcnRuZXJzaGlwIGluIHRoaXMgZGVzaWduLCBhcyBpbiB0aGUgVHJvamFuIGhvcnNlPyBJIGhhdmUgbm8gb2JqZWN0aW9uOyBJIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGFuayB5b3UgZm9yIGRvaW5nIHNvLCB3aXRoIHdoYXRldmVyIGludGVudCB5b3UgZG8gaXQuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['2.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHRoZSBkZWVkIGlzIHNvIGdyZWF0IGEgb25lLCB0aGF0IEkgY2FuIG5vdCBjb21wYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIHVucG9wdWxhcml0eSB3aGljaCB5b3Ugd2lzaCB0byBleGNpdGUgYWdhaW5zdCBtZSBvbiBhY2NvdW50IG9mIGl0LCB3aXRoIGl0cyByZWFsCiAgICAgICAgICAgICAgICAgICAgZ2xvcnkuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdobyBjYW4gYmUgaGFwcGllciB0aGFuIHRob3NlIG1lbiB3aG9tIHlvdSBib2FzdCBvZiBoYXZpbmcgbm93IGV4cGVsbGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGRyaXZlbiBmcm9tIHRoZSBjaXR5PyBXaGF0IHBsYWNlIGlzIHRoZXJlIGVpdGhlciBzbyBkZXNlcnRlZCBvciBzbyB1bmNpdmlsaXplZCwKICAgICAgICAgICAgICAgICAgICBhcyBub3QgdG8gc2VlbSB0byBncmVldCBhbmQgdG8gY292ZXQgdGhlIHByZXNlbmNlIG9mIHRob3NlIG1lbiB3aGVyZXZlciB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhcnJpdmVkPyBXaGF0IG1lbiBhcmUgc28gY2xvd25pc2ggYXMgbm90LCB3aGVuIHRoZXkgaGF2ZSBvbmNlIGJlaGVsZCB0aGVtLAogICAgICAgICAgICAgICAgICAgIHRvIHRoaW5rIHRoYXQgdGhleSBoYXZlIHJlYXBlZCB0aGUgZ3JlYXRlc3QgZW5qb3ltZW50IHRoYXQgbGlmZSBjYW4gZ2l2ZT8gQW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCBwb3N0ZXJpdHkgd2lsbCBiZSBldmVyIHNvIGZvcmdldGZ1bCwgd2hhdCBsaXRlcmF0dXJlIHdpbGwgZXZlciBiZSBmb3VuZCBzbwogICAgICAgICAgICAgICAgICAgIHVuZ3JhdGVmdWwsIGFzIG5vdCB0byBjaGVyaXNoIHRoZWlyIGdsb3J5IHdpdGggdW5keWluZyByZWNvbGxlY3Rpb24/IEVucm9sbCBtZQogICAgICAgICAgICAgICAgICAgIHRoZW4sIEkgYmVnLCBpbiB0aGUgbnVtYmVyIG9mIHRob3NlIG1lbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.14.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBvbmUgdGhpbmcgSSBhbSBhZnJhaWQgeW91IG1heSBub3QgYXBwcm92ZSBvZi4gRm9yIGlmIEkgaGFkIHJlYWxseSBiZWVuIG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG51bWJlciwgSSBzaG91bGQgaGF2ZSBub3Qgb25seSBnb3QgcmlkIG9mIHRoZSBraW5nLCBidXQgb2YgdGhlIGtpbmdseQogICAgICAgICAgICAgICAgICAgIHBvd2VyIGFsc28gb3V0IG9mIHRoZSByZXB1YmxpYzsgYW5kIGlmIEkgaGFkIGJlZW4gdGhlIGF1dGhvciBvZiB0aGUgcGllY2UsIGFzIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgc2FpZCwgYmVsaWV2ZSBtZSwgSSBzaG91bGQgbm90IGhhdmUgYmVlbiBjb250ZW50ZWQgd2l0aCBvbmUgYWN0LCBidXQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmaW5pc2hlZCB0aGUgd2hvbGUgcGxheS4gQWx0aG91Z2gsIGlmIGl0IGJlIGEgY3JpbWUgdG8gaGF2ZSB3aXNoZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIENhZXNhciBtaWdodCBiZSBwdXQgdG8gZGVhdGgsIGJld2FyZSwgSSBwcmF5IHlvdSwgTyBBbnRvbml1cywgb2Ygd2hhdCBtdXN0IGJlCiAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gY2FzZSwgYXMgaXQgaXMgbm90b3Jpb3VzIHRoYXQgeW91LCB3aGVuIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNjgiPk5hcmJvPC9wbGFjZU5hbWU+LCBmb3JtZWQgYSBwbGFuIG9mIHRoZSBzYW1lIHNvcnQgd2l0aCBDYWl1cyBUcmVib25pdXM7IGFuZAogICAgICAgICAgICAgICAgICAgIGl0IHdhcyBvbiBhY2NvdW50IG9mIHlvdXIgcGFydGljaXBhdGlvbiBpbiB0aGF0IGRlc2lnbiB0aGF0LCB3aGVuIENhZXNhciB3YXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBraWxsZWQsIHdlIHNhdyB5b3UgY2FsbGVkIGFzaWRlIGJ5IFRyZWJvbml1cyBCdXQgSSAoc2VlIGhvdyBmYXIgSSBhbSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYW55IGhvcnJpYmxlIGluY2xpbmF0aW9uIHRvd2FyZCwpIHByYWlzZSB5b3UgZm9yIGhhdmluZyBvbmNlIGluIHlvdXIgbGlmZSBoYWQgYQogICAgICAgICAgICAgICAgICAgIHJpZ2h0ZW91cyBpbnRlbnRpb247IEkgcmV0dXJuIHlvdSB0aGFua3MgZm9yIG5vdCBoYXZpbmcgcmV2ZWFsZWQgdGhlIG1hdHRlcjsgYW5kCiAgICAgICAgICAgICAgICAgICAgSSBleGN1c2UgeW91IGZvciBub3QgaGF2aW5nIGFjY29tcGxpc2hlZCB5b3VyIHB1cnBvc2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhhdCBleHBsb2l0IHJlcXVpcmVkIGEgbWFuLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzY4Ij5OYXJibzwvcGxhY2VOYW1lPiwgZm9ybWVkIGEgcGxhbiBvZiB0aGUgc2FtZSBzb3J0IHdpdGggQ2FpdXMgVHJlYm9uaXVzOyBhbmQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgb24gYWNjb3VudCBvZiB5b3VyIHBhcnRpY2lwYXRpb24gaW4gdGhhdCBkZXNpZ24gdGhhdCwgd2hlbiBDYWVzYXIgd2FzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcga2lsbGVkLCB3ZSBzYXcgeW91IGNhbGxlZCBhc2lkZSBieSBUcmVib25pdXMgQnV0IEkgKHNlZSBob3cgZmFyIEkgYW0gZnJvbQogICAgICAgICAgICAgICAgICAgIGFueSBob3JyaWJsZSBpbmNsaW5hdGlvbiB0b3dhcmQsKSBwcmFpc2UgeW91IGZvciBoYXZpbmcgb25jZSBpbiB5b3VyIGxpZmUgaGFkIGEKICAgICAgICAgICAgICAgICAgICByaWdodGVvdXMgaW50ZW50aW9uOyBJIHJldHVybiB5b3UgdGhhbmtzIGZvciBub3QgaGF2aW5nIHJldmVhbGVkIHRoZSBtYXR0ZXI7IGFuZAogICAgICAgICAgICAgICAgICAgIEkgZXhjdXNlIHlvdSBmb3Igbm90IGhhdmluZyBhY2NvbXBsaXNoZWQgeW91ciBwdXJwb3NlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhhdCBleHBsb2l0IHJlcXVpcmVkIGEgbWFuLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBpZiBhbnkgb25lIHNob3VsZCBpbnN0aXR1dGUgYSBwcm9zZWN1dGlvbiBhZ2FpbnN0IHlvdSwgYW5kIGVtcGxveSB0aGF0IHRlc3QKICAgICAgICAgICAgICAgICAgICBvZiBvbGQgQ2Fzc2l1cywg4oCcd2hvIHJlYXBlZCBhbnkgYWR2YW50YWdlIGZyb20gaXQ/4oCdIHRha2UKICAgICAgICAgICAgICAgICAgICBjYXJlLCBJIGFkdmlzZSB5b3UsIGxlc3QgeW91IHN1aXQgdGhhdCBkZXNjcmlwdGlvbi4gQWx0aG91Z2gsIGluIHRydXRoLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIHdhcywgYXMgeW91IHVzZWQgdG8gc2F5LCBhbiBhZHZhbnRhZ2UgdG8gZXZlcnkgb25lIHdobyB3YXMgbm90IHdpbGxpbmcgdG8KICAgICAgICAgICAgICAgICAgICBiZSBhIHNsYXZlLCBzdGlsbCBpdCB3YXMgc28gdG8geW91IGFib3ZlIGFsbCBtZW4sIHdobyBhcmUgbm90IG1lcmVseSBub3QgYQogICAgICAgICAgICAgICAgICAgIHNsYXZlLCBidXQgYXJlIGFjdHVhbGx5IGEga2luZzsgd2hvIGRlbGl2ZXJlZCB5b3Vyc2VsZiBmcm9tIGFuIGVub3Jtb3VzIGJ1cmRlbgogICAgICAgICAgICAgICAgICAgIG9mIGRlYnQgYXQgdGhlIHRlbXBsZSBvZiBPcHM7IHdobywgYnkgeW91ciBkZWFsaW5ncyB3aXRoIHRoZSBhY2NvdW50LWJvb2tzLAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHNxdWFuZGVyZWQgYSBjb3VudGxlc3Mgc3VtIG9mIG1vbmV5OyB3aG8gaGF2ZSBoYWQgc3VjaCB2YXN0IHRyZWFzdXJlcwogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdG8geW91IGZyb20gQ2Flc2FyJ3MgaG91c2U7IGF0IHdob3NlIG93biBob3VzZSB0aGVyZSBpcyBzZXQgdXAgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgbHVjcmF0aXZlIG1hbnVmYWN0b3J5IG9mIGZhbHNlIG1lbW9yYW5kYSBhbmQgYXV0b2dyYXBocywgYW5kIGEgbW9zdCBpbmlxdWl0b3VzCiAgICAgICAgICAgICAgICAgICAgbWFya2V0IG9mIGxhbmRzLCBhbmQgdG93bnMsIGFuZCBleGVtcHRpb25zLCBhbmQgcmV2ZW51ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdHJ1dGgsIHdoYXQgbWVhc3VyZSBleGNlcHQgdGhlIGRlYXRoIG9mIENhZXNhciBjb3VsZAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5IGhhdmUgYmVlbiBhbnkgcmVsaWVmIHRvIHlvdXIgaW5kaWdlbnQgYW5kIGluc29sdmVudCBjb25kaXRpb24/IFlvdQogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBiZSBzb21ld2hhdCBhZ2l0YXRlZC4gSGF2ZSB5b3UgYW55IHNlY3JldCBmZWFyIHRoYXQgeW91IHlvdXJzZWxmIG1heQogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBoYXZlIGhhZCBzb21lIGNvbm5lY3Rpb24gd2l0aCB0aGF0IGNyaW1lPyBJIHdpbGwgcmVsZWFzZSB5b3UgZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBhcHByZWhlbnNpb247IG5vIG9uZSB3aWxsIGV2ZXIgYmVsaWV2ZSBpdDsgaXQgaXMgbm90IGxpa2UgeW91IHRvIGRlc2VydmUgd2VsbCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYzsgdGhlIG1vc3QgaWxsdXN0cmlvdXMgbWVuIGluIHRoZSByZXB1YmxpYyBhcmUgdGhlIGF1dGhvcnMgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGV4cGxvaXQ7IEkgb25seSBzYXkgdGhhdCB5b3UgYXJlIGdsYWQgaXQgd2FzIGRvbmU7IEkgZG8gbm90IGFjY3VzZSB5b3Ugb2YgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgZG9uZSBpdC4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdHJ1dGgsIHdoYXQgbWVhc3VyZSBleGNlcHQgdGhlIGRlYXRoIG9mIENhZXNhciBjb3VsZAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5IGhhdmUgYmVlbiBhbnkgcmVsaWVmIHRvIHlvdXIgaW5kaWdlbnQgYW5kIGluc29sdmVudCBjb25kaXRpb24/IFlvdQogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBiZSBzb21ld2hhdCBhZ2l0YXRlZC4gSGF2ZSB5b3UgYW55IHNlY3JldCBmZWFyIHRoYXQgeW91IHlvdXJzZWxmIG1heQogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBoYXZlIGhhZCBzb21lIGNvbm5lY3Rpb24gd2l0aCB0aGF0IGNyaW1lPyBJIHdpbGwgcmVsZWFzZSB5b3UgZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBhcHByZWhlbnNpb247IG5vIG9uZSB3aWxsIGV2ZXIgYmVsaWV2ZSBpdDsgaXQgaXMgbm90IGxpa2UgeW91IHRvIGRlc2VydmUgd2VsbCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYzsgdGhlIG1vc3QgaWxsdXN0cmlvdXMgbWVuIGluIHRoZSByZXB1YmxpYyBhcmUgdGhlIGF1dGhvcnMgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGV4cGxvaXQ7IEkgb25seSBzYXkgdGhhdCB5b3UgYXJlIGdsYWQgaXQgd2FzIGRvbmU7IEkgZG8gbm90IGFjY3VzZSB5b3Ugb2YgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgZG9uZSBpdC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGhhdmUgcmVwbGllZCB0byB5b3VyIGhlYXZpZXN0IGFjY3VzYXRpb25zLCBJIG11c3Qgbm93IGFsc28gcmVwbHkgdG8gdGhlIHJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.15.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBoYXZlIHRocm93biBpbiBteSB0ZWV0aCB0aGUgY2FtcCBvZiBQb21wZWl1cyBhbmQgYWxsIG15IGNvbmR1Y3QgYXQgdGhhdCB0aW1lLgogICAgICAgICAgICAgICAgICAgIEF0IHdoaWNoIHRpbWUsIGluZGVlZCwgaWYsIGFzIEkgaGF2ZSBzYWlkIGJlZm9yZSwgbXkgY291bnNlbHMgYW5kIG15IGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIGhhZCBwcmV2YWlsZWQsIHlvdSB3b3VsZCB0aGlzIGRheSBiZSBpbiBpbmRpZ2VuY2UsIHdlIHNob3VsZCBiZSBmcmVlIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyB3b3VsZCBub3QgaGF2ZSBsb3N0IHNvIG1hbnkgZ2VuZXJhbHMgYW5kIHNvIG1hbnkgYXJtaWVzLiBGb3IgSSBjb25mZXNzCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgd2hlbiBJIHNhdyB0aGF0IHRoZXNlIHRoaW5ncyBjZXJ0YWlubHkgd291bGQgaGFwcGVuLCB3aGljaCBub3cgaGF2ZQogICAgICAgICAgICAgICAgICAgIGhhcHBlbmVkLCBJIHdhcyBhcyBncmVhdGx5IGdyaWV2ZWQgYXMgYWxsIHRoZSBvdGhlciB2aXJ0dW91cyBjaXRpemVucyB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBpZiB0aGV5IGhhZCBmb3Jlc2VlbiB0aGUgc2FtZSB0aGluZ3MuIEkgZGlkIGdyaWV2ZSwgSSBkaWQgZ3JpZXZlLCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgdGhlIHJlcHVibGljIHdoaWNoIGhhZCBvbmNlIGJlZW4gc2F2ZWQgYnkgeW91ciBjb3Vuc2VscwogICAgICAgICAgICAgICAgICAgIGFuZCBtaW5lLCB3YXMgZmF0ZWQgdG8gcGVyaXNoIGluIGEgc2hvcnQgdGltZS4gTm9yIHdhcyBJIHNvIGluZXhwZXJpZW5jZWQgaW4gYW5kCiAgICAgICAgICAgICAgICAgICAgaWdub3JhbnQgb2YgdGhpcyBuYXR1cmUgb2YgdGhpbmdzLCBhcyB0byBiZSBkaXNoZWFydGVuZWQgb24gYWNjb3VudCBvZiBhCiAgICAgICAgICAgICAgICAgICAgZm9uZG5lc3MgZm9yIGxpZmUsIHdoaWNoIHdoaWxlIGl0IGVuZHVyZWQgd291bGQgd2VhciBtZSBvdXQgd2l0aCBhbmd1aXNoLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVuIGJyb3VnaHQgdG8gYW4gZW5kIHdvdWxkIHJlbGVhc2UgbWUgZnJvbSBhbGwgdHJvdWJsZS4gQnV0IEkgd2FzIGRlc2lyb3VzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aG9zZSBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgdGhlIGxpZ2h0cyBvZiB0aGUgcmVwdWJsaWMsIHNob3VsZCBsaXZlOiBzbwogICAgICAgICAgICAgICAgICAgIG1hbnkgbWVuIG9mIGNvbnN1bGFyIHJhbmssIHNvIG1hbnkgbWVuIG9mIHByYWV0b3JpYW4gcmFuaywgc28gbWFueSBtb3N0CiAgICAgICAgICAgICAgICAgICAgaG9ub3JhYmxlIHNlbmF0b3JzOyBhbmQgYmVzaWRlcyB0aGVtIGFsbCB0aGUgZmxvd2VyIG9mIG91ciBub2JpbGl0eSBhbmQgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgeW91dGg7IGFuZCB0aGUgYXJtaWVzIG9mIGV4Y2VsbGVudCBjaXRpemVucy4gQW5kIGlmIHRoZXkgd2VyZSBzdGlsbCBhbGl2ZSwgdW5kZXIKICAgICAgICAgICAgICAgICAgICBldmVyIHN1Y2ggaGFyZCBjb25kaXRpb25zIG9mIHBlYWNlIChmb3IgYW55IHNvcnQgb2YgcGVhY2Ugd2l0aCBvdXIKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnMgYXBwZWFyZWQgdG8gbWUgbW9yZSBkZXNpcmFibGUgdGhhbiBjaXZpbCB3YXIpLCB3ZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBzdGlsbCB0aGlzIGRheSBlbmpveWluZyB0aGUgcmVwdWJsaWMuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgaWYgbXkgb3BpbmlvbiBoYWQgcHJldmFpbGVkLCBhbmQgaWYgdGhvc2UKICAgICAgICAgICAgICAgICAgICBtZW4sIHRoZSBwcmVzZXJ2YXRpb24gb2Ygd2hvc2UgbGl2ZXMgd2FzIG15IG1haW4gb2JqZWN0LCBlbGF0ZWQgd2l0aCB0aGUgaG9wZSBvZgogICAgICAgICAgICAgICAgICAgIHZpY3RvcnksIGhhZCBub3QgYmVlbiBteSBjaGllZiBvcHBvc2VycywgdG8gc2F5IG5vdGhpbmcgb2Ygb3RoZXIgcmVzdWx0cywgYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzIHlvdSB3b3VsZCBuZXZlciBoYXZlIGNvbnRpbnVlZCBpbiB0aGlzIG9yZGVyLCBvciByYXRoZXIgaW4gdGhpcyBjaXR5LiBCdXQKICAgICAgICAgICAgICAgICAgICBzYXkgeW91LCBteSBzcGVlY2ggYWxpZW5hdGVkIGZyb20gbWUgdGhlIHJlZ2FyZCBvZiBQb21wZWl1cz8gV2FzIHRoZXJlIGFueSBvbmUKICAgICAgICAgICAgICAgICAgICB0byB3aG9tIGhlIHdhcyBtb3JlIGF0dGFjaGVkPyBhbnkgb25lIHdpdGggd2hvbSBoZSBjb252ZXJzZWQgb3Igc2hhcmVkIGhpcwogICAgICAgICAgICAgICAgICAgIGNvdW5zZWxzIG1vcmUgZnJlcXVlbnRseT8gSXQgd2FzLCBpbmRlZWQsIGEgZ3JlYXQgdGhpbmcgdGhhdCB3ZSwgZGlmZmVyaW5nIGFzIHdlCiAgICAgICAgICAgICAgICAgICAgZGlkIHJlc3BlY3RpbmcgdGhlIGdlbmVyYWwgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYywgc2hvdWxkIGNvbnRpbnVlIGluCiAgICAgICAgICAgICAgICAgICAgdW5pbnRlcnJ1cHRlZCBmcmllbmRzaGlwLiBCdXQgSSBzYXcgY2xlYXJseSB3aGF0IGhpcyBvcGluaW9ucyBhbmQgdmlld3Mgd2VyZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaGUgc2F3IG1pbmUgZXF1YWxseS4gSSB3YXMgZm9yIHByb3ZpZGluZyBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgY2l0aXplbnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgcGxhY2UsIGluIG9yZGVyIHRoYXQgd2UgbWlnaHQgYmUgYWJsZSB0byBjb25zdWx0IHRoZWlyIGRpZ25pdHkKICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmQuIEhlIHRob3VnaHQgbW9yZSBvZiBjb25zdWx0aW5nIHRoZWlyIGV4aXN0aW5nIGRpZ25pdHkuIEJ1dCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgZWFjaCBvZiB1cyBoYWQgYSBkZWZpbml0ZSBvYmplY3QgdG8gcHVyc3VlLCBvdXIgZGlzYWdyZWVtZW50IHdhcyB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGVuZHVyYWJsZS4gPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoYXQgdGhhdCBleHRyYSBvcmRpbmFyeSBhbmQKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgZ29kbGlrZSBtYW4gdGhvdWdodCBvZiBtZSBpcyBrbm93biB0byB0aG9zZSBtZW4gd2hvIHB1cnN1ZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzczIiBrZXk9InRnbiw3MDAyMzczIj5QYXBob3M8L3BsYWNlTmFtZT4gZnJvbSB0aGUgYmF0dGxlIG9mCiAgICAgICAgICAgICAgICAgICAgUGhhcnNhbGlhLiBObyBtZW50aW9uIG9mIG1lIHdhcyBldmVyIG1hZGUgYnkgaGltIHRoYXQgd2FzIG5vdCB0aGUgbW9zdCBob25vcmFibGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGNvdWxkIGJlLCB0aGF0IHdhcyBub3QgZnVsbCBvZiB0aGUgbW9zdCBmcmllbmRseSByZWdyZXQgZm9yIG1lOyB3aGlsZSBoZQogICAgICAgICAgICAgICAgICAgIGNvbmZlc3NlZCB0aGF0IEkgaGFkIGhhZCB0aGUgbW9zdCBmb3Jlc2lnaHQsIGJ1dCB0aGF0IGhlIGhhZCBoYWQgbW9yZSBzYW5ndWluZQogICAgICAgICAgICAgICAgICAgIGhvcGVzLiBBbmQgZG8geW91IGRhcmUgdGF1bnQgbWUgd2l0aCB0aGUgbmFtZSBvZiB0aGF0IG1hbiB3aG9zZSBmcmllbmQgeW91IGFkbWl0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIHdhcywgYW5kIHdob3NlIGFzc2Fzc2luIHlvdSBjb25mZXNzIHlvdXJzZWxmPyA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.15.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGlmIG15IG9waW5pb24gaGFkIHByZXZhaWxlZCwgYW5kIGlmIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuLCB0aGUgcHJlc2VydmF0aW9uIG9mIHdob3NlIGxpdmVzIHdhcyBteSBtYWluIG9iamVjdCwgZWxhdGVkIHdpdGggdGhlIGhvcGUgb2YKICAgICAgICAgICAgICAgICAgICB2aWN0b3J5LCBoYWQgbm90IGJlZW4gbXkgY2hpZWYgb3Bwb3NlcnMsIHRvIHNheSBub3RoaW5nIG9mIG90aGVyIHJlc3VsdHMsIGF0IGFsbAogICAgICAgICAgICAgICAgICAgIGV2ZW50cyB5b3Ugd291bGQgbmV2ZXIgaGF2ZSBjb250aW51ZWQgaW4gdGhpcyBvcmRlciwgb3IgcmF0aGVyIGluIHRoaXMgY2l0eS4gQnV0CiAgICAgICAgICAgICAgICAgICAgc2F5IHlvdSwgbXkgc3BlZWNoIGFsaWVuYXRlZCBmcm9tIG1lIHRoZSByZWdhcmQgb2YgUG9tcGVpdXM/IFdhcyB0aGVyZSBhbnkgb25lCiAgICAgICAgICAgICAgICAgICAgdG8gd2hvbSBoZSB3YXMgbW9yZSBhdHRhY2hlZD8gYW55IG9uZSB3aXRoIHdob20gaGUgY29udmVyc2VkIG9yIHNoYXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBjb3Vuc2VscyBtb3JlIGZyZXF1ZW50bHk/IEl0IHdhcywgaW5kZWVkLCBhIGdyZWF0IHRoaW5nIHRoYXQgd2UsIGRpZmZlcmluZyBhcyB3ZQogICAgICAgICAgICAgICAgICAgIGRpZCByZXNwZWN0aW5nIHRoZSBnZW5lcmFsIGludGVyZXN0cyBvZiB0aGUgcmVwdWJsaWMsIHNob3VsZCBjb250aW51ZSBpbgogICAgICAgICAgICAgICAgICAgIHVuaW50ZXJydXB0ZWQgZnJpZW5kc2hpcC4gQnV0IEkgc2F3IGNsZWFybHkgd2hhdCBoaXMgb3BpbmlvbnMgYW5kIHZpZXdzIHdlcmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIHNhdyBtaW5lIGVxdWFsbHkuIEkgd2FzIGZvciBwcm92aWRpbmcgZm9yIHRoZSBzYWZldHkgb2YgdGhlIGNpdGl6ZW5zIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHBsYWNlLCBpbiBvcmRlciB0aGF0IHdlIG1pZ2h0IGJlIGFibGUgdG8gY29uc3VsdCB0aGVpciBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJ3YXJkLiBIZSB0aG91Z2h0IG1vcmUgb2YgY29uc3VsdGluZyB0aGVpciBleGlzdGluZyBkaWduaXR5LiBCdXQgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGVhY2ggb2YgdXMgaGFkIGEgZGVmaW5pdGUgb2JqZWN0IHRvIHB1cnN1ZSwgb3VyIGRpc2FncmVlbWVudCB3YXMgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBlbmR1cmFibGUuIDwvdHJhbnNsYXRpb24+"
translation['2.15.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoYXQgdGhhdCBleHRyYSBvcmRpbmFyeSBhbmQKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgZ29kbGlrZSBtYW4gdGhvdWdodCBvZiBtZSBpcyBrbm93biB0byB0aG9zZSBtZW4gd2hvIHB1cnN1ZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNzMiPlBhcGhvczwvcGxhY2VOYW1lPiBmcm9tIHRoZSBiYXR0bGUgb2YKICAgICAgICAgICAgICAgICAgICBQaGFyc2FsaWEuIE5vIG1lbnRpb24gb2YgbWUgd2FzIGV2ZXIgbWFkZSBieSBoaW0gdGhhdCB3YXMgbm90IHRoZSBtb3N0IGhvbm9yYWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgY291bGQgYmUsIHRoYXQgd2FzIG5vdCBmdWxsIG9mIHRoZSBtb3N0IGZyaWVuZGx5IHJlZ3JldCBmb3IgbWU7IHdoaWxlIGhlCiAgICAgICAgICAgICAgICAgICAgY29uZmVzc2VkIHRoYXQgSSBoYWQgaGFkIHRoZSBtb3N0IGZvcmVzaWdodCwgYnV0IHRoYXQgaGUgaGFkIGhhZCBtb3JlIHNhbmd1aW5lCiAgICAgICAgICAgICAgICAgICAgaG9wZXMuIEFuZCBkbyB5b3UgZGFyZSB0YXVudCBtZSB3aXRoIHRoZSBuYW1lIG9mIHRoYXQgbWFuIHdob3NlIGZyaWVuZCB5b3UgYWRtaXQKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgd2FzLCBhbmQgd2hvc2UgYXNzYXNzaW4geW91IGNvbmZlc3MgeW91cnNlbGY/IDwvdHJhbnNsYXRpb24+"
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIGxldCB1cyBzYXkgbm8gbW9yZSBvZiB3YXIgaW4gd2hpY2ggeW91IHdlcmUgdG9vIGZvcnR1bmF0ZS4gSSB3aWxsIG5vdAogICAgICAgICAgICAgICAgICAgIHJlcGx5IGV2ZW4gd2l0aCB0aG9zZSBqZXN0cyB0byB3aGljaCB5b3UgaGF2ZSBzYWlkIHRoYXQgSSBnYXZlIHV0dGVyYW5jZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wLiBUaGF0IGNhbXAgd2FzIGluIHRydXRoIGZ1bGwgb2YgYW54aWV0eSwgYnV0IGFsdGhvdWdoIG1lbiBhcmUgaW4gZ3JlYXQKICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHRpZXMsIHN0aWxsLCBwcm92aWRlZCB0aGV5IGFyZSBtZW4sIHRoZXkgc29tZXRpbWVzIHJlbGF4IHRoZWlyIG1pbmRzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGUgZmFjdCB0aGF0IHRoZSBzYW1lIG1hbiBmaW5kcwogICAgICAgICAgICAgICAgICAgIGZhdWx0IHdpdGggbXkgbWVsYW5jaG9seSwgYW5kIGFsc28gd2l0aCBteSBqb2tlcywgaXMgYSBncmVhdCBwcm9vZiB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgdmVyeSBtb2RlcmF0ZSBpbiBlYWNoIHBhcnRpY3VsYXIuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.16.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZSBmYWN0IHRoYXQgdGhlIHNhbWUgbWFuIGZpbmRzCiAgICAgICAgICAgICAgICAgICAgZmF1bHQgd2l0aCBteSBtZWxhbmNob2x5LCBhbmQgYWxzbyB3aXRoIG15IGpva2VzLCBpcyBhIGdyZWF0IHByb29mIHRoYXQgSSB3YXMKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG1vZGVyYXRlIGluIGVhY2ggcGFydGljdWxhci4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Zb3UgaGF2ZSBzYWlkIHRoYXQgbm8gaW5oZXJpdGFuY2VzIGNvbWUgdG8gbWUuIFdvdWxkIHRoYXQgdGhpcyBhY2N1c2F0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgeW91cnMgd2VyZSBhIHRydWUgb25lOyBJIHNob3VsZCBoYXZlIG1vcmUgb2YgbXkgZnJpZW5kcyBhbmQgY29ubmVjdGlvbnMgYWxpdmUuCiAgICAgICAgICAgICAgICAgICAgQnV0IGhvdyBjb3VsZCBzdWNoIGEgY2hhcmdlIGV2ZXIgY29tZSBpbnRvIHlvdXIgaGVhZD8gRm9yIEkgaGF2ZSByZWNlaXZlZCBtb3JlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0d2VudHkgbWlsbGlvbnMgb2Ygc2VzdGVyY2VzIGluIGluaGVyaXRhbmNlcy4gQWx0aG91Z2ggaW4gdGhpcyBwYXJ0aWN1bGFyIEkKICAgICAgICAgICAgICAgICAgICBhZG1pdCB0aGF0IHlvdSBoYXZlIGJlZW4gbW9yZSBmb3J0dW5hdGUgdGhhbiBJLiBObyBvbmUgaGFzIGV2ZXIgbWFkZSBtZSBoaXMgaGVpcgogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBoZSB3YXMgYSBmcmllbmQgb2YgbWluZSwgaW4gb3JkZXIgdGhhdCBteSBncmllZiBvZiBtaW5kIGZvciBoaXMgbG9zcwogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGFjY29tcGFuaWVkIGFsc28gd2l0aCBzb21lIGdhaW4sIGlmIGl0IHdhcyB0byBiZSBjb25zaWRlcmVkIGFzIHN1Y2guCiAgICAgICAgICAgICAgICAgICAgQnV0IGEgbWFuIHdob20geW91IG5ldmVyIGV2ZW4gc2F3LCBMdWNpdXMgUnVicml1cywgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LCBtYWRlIHlvdSBoaXMgaGVpci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgc2VlIG5vdyBob3cgbXVjaCBoZSBsb3ZlZCB5b3UsIHdobywgdGhvdWdoIGhlCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBrbm93IHdoZXRoZXIgeW91IHdlcmUgd2hpdGUgb3IgYmxhY2ssIHBhc3NlZCBvdmVyIHRoZSBzb24gb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgUXVpbnR1cyBGdWZpdXMsIGEgbW9zdCBob25vcmFibGUgUm9tYW4ga25pZ2h0LCBhbmQgbW9zdCBhdHRhY2hlZCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSwgd2hvbSBoZSBoYWQgb24gYWxsIG9jY2FzaW9ucyBvcGVubHkgZGVjbGFyZWQgaGlzIGhlaXIgKGhlIG5ldmVyIGV2ZW4gbmFtZXMKICAgICAgICAgICAgICAgICAgICBoaW0gaW4gaGlzIHdpbGwpLCBhbmQgaGUgbWFrZXMgeW91IGhpcyBoZWlyIHdob20gaGUgaGFkIG5ldmVyIHNlZW4sIG9yIGF0IGFsbAogICAgICAgICAgICAgICAgICAgIGV2ZW50cyBoYWQgbmV2ZXIgc3Bva2VuIHRvLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhc2ludW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhc2ludW0iPkNhc2ludW08L3BsYWNlTmFtZT4sIG1hZGUgeW91IGhpcyBoZWlyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.16.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNlZSBub3cgaG93IG11Y2ggaGUgbG92ZWQgeW91LCB3aG8sIHRob3VnaCBoZQogICAgICAgICAgICAgICAgICAgIGRpZCBub3Qga25vdyB3aGV0aGVyIHlvdSB3ZXJlIHdoaXRlIG9yIGJsYWNrLCBwYXNzZWQgb3ZlciB0aGUgc29uIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIFF1aW50dXMgRnVmaXVzLCBhIG1vc3QgaG9ub3JhYmxlIFJvbWFuIGtuaWdodCwgYW5kIG1vc3QgYXR0YWNoZWQgdG8KICAgICAgICAgICAgICAgICAgICBoaW0sIHdob20gaGUgaGFkIG9uIGFsbCBvY2Nhc2lvbnMgb3Blbmx5IGRlY2xhcmVkIGhpcyBoZWlyIChoZSBuZXZlciBldmVuIG5hbWVzCiAgICAgICAgICAgICAgICAgICAgaGltIGluIGhpcyB3aWxsKSwgYW5kIGhlIG1ha2VzIHlvdSBoaXMgaGVpciB3aG9tIGhlIGhhZCBuZXZlciBzZWVuLCBvciBhdCBhbGwKICAgICAgICAgICAgICAgICAgICBldmVudHMgaGFkIG5ldmVyIHNwb2tlbiB0by4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHdpc2ggeW91IHdvdWxkIHRlbGwgbWUsIGlmIGl0IGlzIG5vdCB0b28gbXVjaCB0cm91YmxlLCB3aGF0IHNvcnQgb2YgY291bnRlbmFuY2UKICAgICAgICAgICAgICAgICAgICBMdWNpdXMgVHVyc2VsaXVzIHdhcyBvZjsgd2hhdCBzb3J0IG9mIGhlaWdodDsgZnJvbSB3aGF0IG11bmljaXBhbCB0b3duIGhlIGNhbWU7CiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIHdoYXQgdHJpYmUgaGUgd2FzIGEgbWVtYmVyLiDigJxJIGtub3cgbm90aGluZyzigJ0geW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBzYXksIOKAnGFib3V0IGhpbSwgZXhjZXB0IHdoYXQgZmFybXMgaGUgaGFkLuKAnSBUaGVyZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgaGUsIGRpc2luaGVyaXRpbmcgaGlzIGJyb3RoZXIsIG1hZGUgeW91IGhpcyBoZWlyLiBBbmQgYmVzaWRlcyB0aGVzZSBpbnN0YW5jZXMsCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtYW4gaGFzIHNlaXplZCBvbiBtdWNoIG90aGVyIHByb3BlcnR5IGJlbG9uZ2luZyB0byBtZW4gd2hvbGx5IHVuY29ubmVjdGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW0sIHRvIHRoZSBleGNsdXNpb24gb2YgdGhlIGxlZ2l0aW1hdGUgaGVpcnMsIGFzIGlmIGhlIGhpbXNlbGYgd2VyZSB0aGUKICAgICAgICAgICAgICAgICAgICBoZWlyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9InNlY3Rpb24iIC8+IEFsdGhvdWdoIHRoZSB0aGluZyB0aGF0IHN0cnVjayBtZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgbW9zdCBhc3RvbmlzaG1lbnQgb2YgYWxsIHdhcywgdGhhdCB5b3Ugc2hvdWxkIHZlbnR1cmUgdG8gbWFrZSBtZW50aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2VzLCB3aGVuIHlvdSB5b3Vyc2VsZiBoYWQgbm90IHJlY2VpdmVkIHRoZSBpbmhlcml0YW5jZSBvZiB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIGZhdGhlci4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.16.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4gQWx0aG91Z2ggdGhlIHRoaW5nIHRoYXQgc3RydWNrIG1lIHdpdGgKICAgICAgICAgICAgICAgICAgICBtb3N0IGFzdG9uaXNobWVudCBvZiBhbGwgd2FzLCB0aGF0IHlvdSBzaG91bGQgdmVudHVyZSB0byBtYWtlIG1lbnRpb24gb2YKICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZXMsIHdoZW4geW91IHlvdXJzZWxmIGhhZCBub3QgcmVjZWl2ZWQgdGhlIGluaGVyaXRhbmNlIG9mIHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB3YXMgaXQgaW4gb3JkZXIgdG8gY29sbGVjdCBhbGwgdGhlc2UgYXJndW1lbnRzLCBPIHlvdSBtb3N0IHNlbnNlbGVzcyBvZiBtZW4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Ugc3BlbnQgc28gbWFueSBkYXlzIGluIHByYWN0aWNpbmcgZGVjbGFtYXRpb24gaW4gYW5vdGhlciBtYW4ncyB2aWxsYT8KICAgICAgICAgICAgICAgICAgICBBbHRob3VnaCwgaW5kZWVkIChhcyB5b3VyIG1vc3QgaW50aW1hdGUgZnJpZW5kcyB1c3VhbGx5IHNheSksIHlvdSBhcmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaGFiaXQgb2YgZGVjbGFpbWluZywgbm90IGZvciB0aGUgcHVycG9zZSBvZiB3aGV0dGluZyB5b3VyIGdlbml1cywgYnV0IG9mIHdvcmtpbmcKICAgICAgICAgICAgICAgICAgICBvZmYgdGhlIGVmZmVjdHMgb2Ygd2luZS4gQW5kLCBpbmRlZWQsIHlvdSBlbXBsb3kgYSBtYXN0ZXIgdG8gdGVhY2ggeW91IGpva2VzLCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIGFwcG9pbnRlZCBieSB5b3VyIG93biB2b3RlIGFuZCB0aGF0IG9mIHlvdXIgYm9vbiBjb21wYW5pb25zOyBhIHJoZXRvcmljaWFuLAogICAgICAgICAgICAgICAgICAgIHdob20geW91IGhhdmUgYWxsb3dlZCB0byBzYXkgd2hhdGV2ZXIgaGUgcGxlYXNlZCBhZ2FpbnN0IHlvdSwgYSB0aG9yb3VnaGx5CiAgICAgICAgICAgICAgICAgICAgZmFjZXRpb3VzIGdlbnRsZW1hbjsgYnV0IHRoZXJlIGFyZSBwbGVudHkgb2YgbWF0ZXJpYWxzIGZvciBzcGVha2luZyBhZ2FpbnN0IHlvdQogICAgICAgICAgICAgICAgICAgIGFuZCBhZ2FpbnN0IHlvdXIgZnJpZW5kcy4gQnV0IGp1c3Qgc2VlIG5vdyB3aGF0IGEgZGlmZmVyZW5jZSB0aGVyZSBpcyBiZXR3ZWVuCiAgICAgICAgICAgICAgICAgICAgeW91IGFuZCB5b3VyIGdyYW5kZmF0aGVyLiBIZSB1c2VkIHdpdGggZ3JlYXQgZGVsaWJlcmF0aW9uIHRvIGJyaW5nIGZvcnRoCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzIGFkdmFudGFnZW91cyBmb3IgdGhlIGNhdXNlIGhlIHdhcyBhZHZvY2F0aW5nOyB5b3UgcG91ciBmb3J0aCBpbiBhCiAgICAgICAgICAgICAgICAgICAgaHVycnkgdGhlIHNlbnRpbWVudHMgd2hpY2ggeW91IGhhdmUgYmVlbiB0YXVnaHQgYnkgYW5vdGhlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgd2hhdCB3YWdlcyBoYXZlIHlvdSBwYWlkIHRoaXMgcmhldG9yaWNpYW4/IExpc3RlbiwKICAgICAgICAgICAgICAgICAgICBsaXN0ZW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFuZCBsZWFybiB0aGUgYmxvd3Mgd2hpY2ggYXJlIGluZmxpY3RlZCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gWW91IGhhdmUgYXNzaWduZWQsIE8gQW50b25pdXMsIHR3byB0aG91c2FuZCBhY3Jlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+SSBoYXZlIHRyYW5zbGF0ZWQgPGZvcmVpZ24gbGFuZz0ibGEiPmp1Z2VydW08L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCcPGdsb3NzPmFuIGFjcmU8L2dsb3NzPizigJ0gYmVjYXVzZSBpdCBpcyB1c3VhbGx5IHNvCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQsIGJ1dCBpbiBwb2ludCBvZiBmYWN0IGl0IHdhcyBub3QgcXVpdGUgdHdvLXRoaXJkcyBvZiBhbiBFbmdsaXNoCiAgICAgICAgICAgICAgICAgICAgICAgIGFjcmUuIEF0IHRoZSBzYW1lIHRpbWUgaXQgd2FzIG5lYXJseSB0aHJlZSB0aW1lcyBhcyBsYXJnZSBhcyB0aGUgR3JlZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImdyZWVrIj5wbGUvcXJvbjwvZm9yZWlnbj4sIHdoaWNoIGlzIG9mdGVuIHRyYW5zbGF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9zcz5hY3JlPC9nbG9zcz4gYWxzby48L25vdGU+IG9mIGxhbmQsIGluIHRoZSBMZW9udGluZSBkaXN0cmljdCwgdG8KICAgICAgICAgICAgICAgICAgICBTZXh0dXMgQ2xvZGl1cywgdGhlIHJoZXRvcmljaWFuLCBhbmQgdGhvc2UsIHRvbywgZXhlbXB0IGZyb20gZXZlcnkga2luZCBvZiB0YXgsCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBzYWtlIG9mIHB1dHRpbmcgdGhlIFJvbWFuIHBlb3BsZSB0byBzdWNoIGEgdmFzdCBleHBlbnNlIHRoYXQgeW91IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgbGVhcm4gdG8gYmUgYSBmb29sLiBXYXMgdGhpcyBnaWZ0LCB0b28sIE8geW91IG1vc3QgYXVkYWNpb3VzIG9mIG1lbiwgZm91bmQgYW1vbmcKICAgICAgICAgICAgICAgICAgICBDYWVzYXIncyBwYXBlcnM/IEJ1dCBJIHdpbGwgdGFrZSBhbm90aGVyIG9wcG9ydHVuaXR5IHRvIHNwZWFrIGFib3V0IHRoZSBMZW9udGluZQogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0OyB3aGVyZSBoZSBoYXMgc3RvbGVuIGxhbmRzIGZyb20gdGhlIHJlcHVibGljIHRvCiAgICAgICAgICAgICAgICAgICAgcG9sbHV0ZSB0aGVtIHdpdGggbW9zdCBpbmZhbW91cyBvd25lcnMuIEZvciBub3csIHNpbmNlIEkgaGF2ZSBzdWZmaWNpZW50bHkKICAgICAgICAgICAgICAgICAgICByZXBsaWVkIHRvIGFsbCBoaXMgY2hhcmdlcywgSSBtdXN0IHNheSBhIGxpdHRsZSBhYm91dCBvdXIgY29ycmVjdG9yIGFuZCBjZW5zb3IKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLiBBbmQgeWV0IEkgd2lsbCBub3Qgc2F5IGFsbCBJIGNvdWxkLCBpbiBvcmRlciB0aGF0IGlmIEkgaGF2ZSBvZnRlbiB0bwogICAgICAgICAgICAgICAgICAgIGJhdHRsZSB3aXRoIGhpbSBJIG1heSBhbHdheXMgY29tZSB0byB0aGUgY29udGVzdCB3aXRoIGZyZXNoIGFybXM7IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBtdWx0aXR1ZGUgb2YgaGlzIHZpY2VzIGFuZCBhdHJvY2l0aWVzIHdpbGwgZWFzaWx5IGVuYWJsZSBtZSB0byBkbyBzby4gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQ0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.17.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdoYXQgd2FnZXMgaGF2ZSB5b3UgcGFpZCB0aGlzIHJoZXRvcmljaWFuPyBMaXN0ZW4sCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbmQgbGVhcm4gdGhlIGJsb3dzIHdoaWNoIGFyZSBpbmZsaWN0ZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIFlvdSBoYXZlIGFzc2lnbmVkLCBPIEFudG9uaXVzLCB0d28gdGhvdXNhbmQgYWNyZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SSBoYXZlIHRyYW5zbGF0ZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+anVnZXJ1bTwvZm9yZWlnbj4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDigJw8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5hbiBhY3JlPC9nbG9zcz4s4oCdIGJlY2F1c2UgaXQgaXMgdXN1YWxseSBzbwogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVkLCBidXQgaW4gcG9pbnQgb2YgZmFjdCBpdCB3YXMgbm90IHF1aXRlIHR3by10aGlyZHMgb2YgYW4gRW5nbGlzaAogICAgICAgICAgICAgICAgICAgICAgICBhY3JlLiBBdCB0aGUgc2FtZSB0aW1lIGl0IHdhcyBuZWFybHkgdGhyZWUgdGltZXMgYXMgbGFyZ2UgYXMgdGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5wbGUvcXJvbjwvZm9yZWlnbj4sIHdoaWNoIGlzIG9mdGVuIHRyYW5zbGF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmFjcmU8L2dsb3NzPiBhbHNvLjwvbm90ZT4gb2YgbGFuZCwgaW4gdGhlIExlb250aW5lIGRpc3RyaWN0LCB0bwogICAgICAgICAgICAgICAgICAgIFNleHR1cyBDbG9kaXVzLCB0aGUgcmhldG9yaWNpYW4sIGFuZCB0aG9zZSwgdG9vLCBleGVtcHQgZnJvbSBldmVyeSBraW5kIG9mIHRheCwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHNha2Ugb2YgcHV0dGluZyB0aGUgUm9tYW4gcGVvcGxlIHRvIHN1Y2ggYSB2YXN0IGV4cGVuc2UgdGhhdCB5b3UgbWlnaHQKICAgICAgICAgICAgICAgICAgICBsZWFybiB0byBiZSBhIGZvb2wuIFdhcyB0aGlzIGdpZnQsIHRvbywgTyB5b3UgbW9zdCBhdWRhY2lvdXMgb2YgbWVuLCBmb3VuZCBhbW9uZwogICAgICAgICAgICAgICAgICAgIENhZXNhcidzIHBhcGVycz8gQnV0IEkgd2lsbCB0YWtlIGFub3RoZXIgb3Bwb3J0dW5pdHkgdG8gc3BlYWsgYWJvdXQgdGhlIExlb250aW5lCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3Q7IHdoZXJlIGhlIGhhcyBzdG9sZW4gbGFuZHMgZnJvbSB0aGUgcmVwdWJsaWMgdG8KICAgICAgICAgICAgICAgICAgICBwb2xsdXRlIHRoZW0gd2l0aCBtb3N0IGluZmFtb3VzIG93bmVycy4gRm9yIG5vdywgc2luY2UgSSBoYXZlIHN1ZmZpY2llbnRseQogICAgICAgICAgICAgICAgICAgIHJlcGxpZWQgdG8gYWxsIGhpcyBjaGFyZ2VzLCBJIG11c3Qgc2F5IGEgbGl0dGxlIGFib3V0IG91ciBjb3JyZWN0b3IgYW5kIGNlbnNvcgogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYuIEFuZCB5ZXQgSSB3aWxsIG5vdCBzYXkgYWxsIEkgY291bGQsIGluIG9yZGVyIHRoYXQgaWYgSSBoYXZlIG9mdGVuIHRvCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlIHdpdGggaGltIEkgbWF5IGFsd2F5cyBjb21lIHRvIHRoZSBjb250ZXN0IHdpdGggZnJlc2ggYXJtczsgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG11bHRpdHVkZSBvZiBoaXMgdmljZXMgYW5kIGF0cm9jaXRpZXMgd2lsbCBlYXNpbHkgZW5hYmxlIG1lIHRvIGRvIHNvLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5qdWdlcnVtPC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAnDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmFuIGFjcmU8L2dsb3NzPizigJ0gYmVjYXVzZSBpdCBpcyB1c3VhbGx5IHNvCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQsIGJ1dCBpbiBwb2ludCBvZiBmYWN0IGl0IHdhcyBub3QgcXVpdGUgdHdvLXRoaXJkcyBvZiBhbiBFbmdsaXNoCiAgICAgICAgICAgICAgICAgICAgICAgIGFjcmUuIEF0IHRoZSBzYW1lIHRpbWUgaXQgd2FzIG5lYXJseSB0aHJlZSB0aW1lcyBhcyBsYXJnZSBhcyB0aGUgR3JlZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPnBsZS9xcm9uPC9mb3JlaWduPiwgd2hpY2ggaXMgb2Z0ZW4gdHJhbnNsYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWNyZTwvZ2xvc3M+IGFsc28uPC90cmFuc2xhdGlvbj4="
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.18.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNoYWxsIHdlIHRoZW4gZXhhbWluZSB5b3VyIGNvbmR1Y3QgZnJvbSB0aGUgdGltZSB3aGVuIHlvdSB3ZXJlIGEgYm95PyBJIHRoaW5rIHNvLgogICAgICAgICAgICAgICAgICAgIExldCB1cyBiZWdpbiBhdCB0aGUgYmVnaW5uaW5nLiBEbyB5b3UgcmVjb2xsZWN0IHRoYXQsIHdoaWxlIHlvdSB3ZXJlIHN0aWxsIGNsYWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHJhZXRleHRhPC9mb3JlaWduPiwgeW91IGJlY2FtZSBhIGJhbmtydXB0PyBUaGF0IHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSBmYXVsdCBvZiB5b3VyIGZhdGhlciwgeW91IHdpbGwgc2F5LiBJIGFkbWl0IHRoYXQuIEluIHRydXRoIHN1Y2ggYSBkZWZlbnNlIGlzCiAgICAgICAgICAgICAgICAgICAgZnVsbCBvZiBmaWxpYWwgYWZmZWN0aW9uLiBCdXQgaXQgaXMgcGVjdWxpYXJseSBzdWl0ZWQgdG8geW91ciBvd24gYXVkYWNpdHksIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3Ugc2F0IGFtb25nIHRoZSBmb3VydGVlbiByb3dzIG9mIHRoZSBrbmlnaHRzLCB0aG91Z2ggYnkgdGhlIFJvc2NpYW4gbGF3IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2FzIGEgcGxhY2UgYXBwb2ludGVkIGZvciBiYW5rcnVwdHMsIGV2ZW4gaWYgYW55IG9uZSBoYWQgYmVjb21lIHN1Y2ggYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZmF1bHQgb2YgZm9ydHVuZSBhbmQgbm90IGJ5IGhpcyBvd24uIFlvdSBhc3N1bWVkIHRoZSBtYW5seSBnb3duLCB3aGljaCB5b3VyIHNvb24KICAgICAgICAgICAgICAgICAgICBtYWRlIGEgd29tYW5seSBvbmU6IGF0IGZpcnN0IGEgcHVibGljIHByb3N0aXR1dGUsIHdpdGggYSByZWd1bGFyIHByaWNlIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcywgYW5kIHRoYXQgbm90IGEgbG93IG9uZS4gQnV0IHZlcnkgc29vbiBDdXJpbyBzdGVwcGVkIGluLCB3aG8gY2FycmllZAogICAgICAgICAgICAgICAgICAgIHlvdSBvZmYgZnJvbSB5b3VyIHB1YmxpYyB0cmFkZSwgYW5kLCBhcyBpZiBoZSBoYWQgYmVzdG93ZWQgYSBtYXRyb24ncyByb2JlIHVwb24KICAgICAgICAgICAgICAgICAgICB5b3UsIHNldHRsZWQgeW91IGluIGEgc3RlYWR5IGFuZCBkdXJhYmxlIHdlZGxvY2suIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gTm8gYm95IGJvdWdodCBmb3IgdGhlIGdyYXRpZmljYXRpb24gb2YgcGFzc2lvbiB3YXMgZXZlciBzbwogICAgICAgICAgICAgICAgICAgIHdob2xseSBpbiB0aGUgcG93ZXIgb2YgaGlzIG1hc3RlciBhcyB5b3Ugd2VyZSBpbiBDdXJpbydzLiBIb3cgb2Z0ZW4gaGFzIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlciB0dXJuZWQgeW91IG91dCBvZiBoaXMgaG91c2U/IEhvdyBvZnRlbiBoYXMgaGUgcGxhY2VkIGd1YXJkcyB0byBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgeW91IGZyb20gZW50ZXJpbmc/IHdoaWxlIHlvdSwgd2l0aCBuaWdodCBmb3IgeW91ciBhY2NvbXBsaWNlLCBsdXN0IGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgZW5jb3VyYWdlciwgYW5kIHdhZ2VzIGZvciB5b3VyIGNvbXBlbGxlciwgd2VyZSBsZXQgZG93biB0aHJvdWdoIHRoZSByb29mLiBUaGF0CiAgICAgICAgICAgICAgICAgICAgaG91c2UgY291bGQgbm8gbG9uZ2VyIGVuZHVyZSB5b3VyIHdpY2tlZG5lc3MuIERvIHlvdSBub3Qga25vdyB0aGF0IEkgYW0gc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICBvZiBtYXR0ZXJzIHdpdGggd2hpY2ggSSBhbSB0aG9yb3VnaGx5IGFjcXVhaW50ZWQ/IFJlbWVtYmVyIHRoYXQgdGltZSB3aGVuIEN1cmlvLAogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIsIGxheSB3ZWVwaW5nIGluIGhpcyBiZWQ7IGhpcyBzb24gdGhyb3dpbmcgaGltc2VsZiBhdCBteSBmZWV0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0ZWFycyByZWNvbW1lbmRlZCB0byBtZSB5b3U7IGhlIGVudHJlYXRlZCBtZSB0byBkZWZlbmQgeW91IGFnYWluc3QgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgaWYgaGUgZGVtYW5kZWQgc2l4IG1pbGxpb25zIG9mIHNlc3RlcmNlcyBvZiB5b3U7IGZvciB0aGF0IGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYmFpbCBmb3IgeW91IHRvIHRoYXQgYW1vdW50LiBBbmQgaGUgaGltc2VsZiwgYnVybmluZyB3aXRoIGxvdmUsIGRlY2xhcmVkCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpdmVseSB0aGF0IGJlY2F1c2UgaGUgd2FzIHVuYWJsZSB0byBiZWFyIHRoZSBtaXNlcnkgb2YgYmVpbmcgc2VwYXJhdGVkIGZyb20KICAgICAgICAgICAgICAgICAgICB5b3UsIGhlIHNob3VsZCBnbyBpbnRvIGJhbmlzaG1lbnQuIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGltZSB3aGF0IG1pc2VyeSBvZiB0aGF0IG1vc3QgZmxvdXJpc2hpbmcgZmFtaWx5IGRpZCBJIGFsbGF5LCBvciByYXRoZXIgZGlkCiAgICAgICAgICAgICAgICAgICAgSSByZW1vdmUhIEkgcGVyc3VhZGVkIHRoZSBmYXRoZXIgdG8gcGF5IHRoZSBzb24ncyBkZWJ0czsgdG8gcmVsZWFzZSB0aGUgeW91bmcKICAgICAgICAgICAgICAgICAgICBtYW4sIGVuZG93ZWQgYXMgaGUgd2FzIHdpdGggZ3JlYXQgcHJvbWlzZSBvZiBjb3VyYWdlIGFuZCBhYmlsaXR5LCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2Ugb2YgcGFydCBvZiBoaXMgZmFtaWx5IGVzdGF0ZTsgYW5kIHRvIHVzZSBoaXMgcHJpdmlsZWdlcyBhbmQgYXV0aG9yaXR5CiAgICAgICAgICAgICAgICAgICAgYXMgYSBmYXRoZXIgdG8gcHJvaGliaXQgaGltIG5vdCBvbmx5IGZyb20gYWxsIGludGltYWN5IHdpdGgsIGJ1dCBmcm9tIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgb2YgbWVldGluZyB5b3UuIFdoZW4geW91IHJlY29sbGVjdGVkIHRoYXQgYWxsIHRoaXMgd2FzIGRvbmUgYnkgbWUsCiAgICAgICAgICAgICAgICAgICAgd291bGQgeW91IGhhdmUgZGFyZWQgdG8gcHJvdm9rZSBtZSBieSBhYnVzZSBpZiB5b3UgaGFkIG5vdCBiZWVuIHRydXN0aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugc3dvcmRzIHdoaWNoIHdlIGJlaG9sZD8gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQ3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnByYWV0ZXh0YTwvZm9yZWlnbj4sIHlvdSBiZWNhbWUgYSBiYW5rcnVwdD8gVGhhdCB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgZmF1bHQgb2YgeW91ciBmYXRoZXIsIHlvdSB3aWxsIHNheS4gSSBhZG1pdCB0aGF0LiBJbiB0cnV0aCBzdWNoIGEgZGVmZW5zZSBpcwogICAgICAgICAgICAgICAgICAgIGZ1bGwgb2YgZmlsaWFsIGFmZmVjdGlvbi4gQnV0IGl0IGlzIHBlY3VsaWFybHkgc3VpdGVkIHRvIHlvdXIgb3duIGF1ZGFjaXR5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IHNhdCBhbW9uZyB0aGUgZm91cnRlZW4gcm93cyBvZiB0aGUga25pZ2h0cywgdGhvdWdoIGJ5IHRoZSBSb3NjaWFuIGxhdyB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdhcyBhIHBsYWNlIGFwcG9pbnRlZCBmb3IgYmFua3J1cHRzLCBldmVuIGlmIGFueSBvbmUgaGFkIGJlY29tZSBzdWNoIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGZhdWx0IG9mIGZvcnR1bmUgYW5kIG5vdCBieSBoaXMgb3duLiBZb3UgYXNzdW1lZCB0aGUgbWFubHkgZ293biwgd2hpY2ggeW91ciBzb29uCiAgICAgICAgICAgICAgICAgICAgbWFkZSBhIHdvbWFubHkgb25lOiBhdCBmaXJzdCBhIHB1YmxpYyBwcm9zdGl0dXRlLCB3aXRoIGEgcmVndWxhciBwcmljZSBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MsIGFuZCB0aGF0IG5vdCBhIGxvdyBvbmUuIEJ1dCB2ZXJ5IHNvb24gQ3VyaW8gc3RlcHBlZCBpbiwgd2hvIGNhcnJpZWQKICAgICAgICAgICAgICAgICAgICB5b3Ugb2ZmIGZyb20geW91ciBwdWJsaWMgdHJhZGUsIGFuZCwgYXMgaWYgaGUgaGFkIGJlc3Rvd2VkIGEgbWF0cm9uJ3Mgcm9iZSB1cG9uCiAgICAgICAgICAgICAgICAgICAgeW91LCBzZXR0bGVkIHlvdSBpbiBhIHN0ZWFkeSBhbmQgZHVyYWJsZSB3ZWRsb2NrLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.18.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gTm8gYm95IGJvdWdodCBmb3IgdGhlIGdyYXRpZmljYXRpb24gb2YgcGFzc2lvbiB3YXMgZXZlciBzbwogICAgICAgICAgICAgICAgICAgIHdob2xseSBpbiB0aGUgcG93ZXIgb2YgaGlzIG1hc3RlciBhcyB5b3Ugd2VyZSBpbiBDdXJpbydzLiBIb3cgb2Z0ZW4gaGFzIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlciB0dXJuZWQgeW91IG91dCBvZiBoaXMgaG91c2U/IEhvdyBvZnRlbiBoYXMgaGUgcGxhY2VkIGd1YXJkcyB0byBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgeW91IGZyb20gZW50ZXJpbmc/IHdoaWxlIHlvdSwgd2l0aCBuaWdodCBmb3IgeW91ciBhY2NvbXBsaWNlLCBsdXN0IGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgZW5jb3VyYWdlciwgYW5kIHdhZ2VzIGZvciB5b3VyIGNvbXBlbGxlciwgd2VyZSBsZXQgZG93biB0aHJvdWdoIHRoZSByb29mLiBUaGF0CiAgICAgICAgICAgICAgICAgICAgaG91c2UgY291bGQgbm8gbG9uZ2VyIGVuZHVyZSB5b3VyIHdpY2tlZG5lc3MuIERvIHlvdSBub3Qga25vdyB0aGF0IEkgYW0gc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICBvZiBtYXR0ZXJzIHdpdGggd2hpY2ggSSBhbSB0aG9yb3VnaGx5IGFjcXVhaW50ZWQ/IFJlbWVtYmVyIHRoYXQgdGltZSB3aGVuIEN1cmlvLAogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIsIGxheSB3ZWVwaW5nIGluIGhpcyBiZWQ7IGhpcyBzb24gdGhyb3dpbmcgaGltc2VsZiBhdCBteSBmZWV0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0ZWFycyByZWNvbW1lbmRlZCB0byBtZSB5b3U7IGhlIGVudHJlYXRlZCBtZSB0byBkZWZlbmQgeW91IGFnYWluc3QgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgaWYgaGUgZGVtYW5kZWQgc2l4IG1pbGxpb25zIG9mIHNlc3RlcmNlcyBvZiB5b3U7IGZvciB0aGF0IGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYmFpbCBmb3IgeW91IHRvIHRoYXQgYW1vdW50LiBBbmQgaGUgaGltc2VsZiwgYnVybmluZyB3aXRoIGxvdmUsIGRlY2xhcmVkCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpdmVseSB0aGF0IGJlY2F1c2UgaGUgd2FzIHVuYWJsZSB0byBiZWFyIHRoZSBtaXNlcnkgb2YgYmVpbmcgc2VwYXJhdGVkIGZyb20KICAgICAgICAgICAgICAgICAgICB5b3UsIGhlIHNob3VsZCBnbyBpbnRvIGJhbmlzaG1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['2.18.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lIHdoYXQgbWlzZXJ5IG9mIHRoYXQgbW9zdCBmbG91cmlzaGluZyBmYW1pbHkgZGlkIEkgYWxsYXksIG9yIHJhdGhlciBkaWQKICAgICAgICAgICAgICAgICAgICBJIHJlbW92ZSEgSSBwZXJzdWFkZWQgdGhlIGZhdGhlciB0byBwYXkgdGhlIHNvbidzIGRlYnRzOyB0byByZWxlYXNlIHRoZSB5b3VuZwogICAgICAgICAgICAgICAgICAgIG1hbiwgZW5kb3dlZCBhcyBoZSB3YXMgd2l0aCBncmVhdCBwcm9taXNlIG9mIGNvdXJhZ2UgYW5kIGFiaWxpdHksIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNhY3JpZmljZSBvZiBwYXJ0IG9mIGhpcyBmYW1pbHkgZXN0YXRlOyBhbmQgdG8gdXNlIGhpcyBwcml2aWxlZ2VzIGFuZCBhdXRob3JpdHkKICAgICAgICAgICAgICAgICAgICBhcyBhIGZhdGhlciB0byBwcm9oaWJpdCBoaW0gbm90IG9ubHkgZnJvbSBhbGwgaW50aW1hY3kgd2l0aCwgYnV0IGZyb20gZXZlcnkKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBvZiBtZWV0aW5nIHlvdS4gV2hlbiB5b3UgcmVjb2xsZWN0ZWQgdGhhdCBhbGwgdGhpcyB3YXMgZG9uZSBieSBtZSwKICAgICAgICAgICAgICAgICAgICB3b3VsZCB5b3UgaGF2ZSBkYXJlZCB0byBwcm92b2tlIG1lIGJ5IGFidXNlIGlmIHlvdSBoYWQgbm90IGJlZW4gdHJ1c3RpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aG9zZSBzd29yZHMgd2hpY2ggd2UgYmVob2xkPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.19.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBsZXQgdXMgc2F5IG5vIG1vcmUgb2YgeW91ciBwcm9mbGlnYWN5IGFuZCBkZWJhdWNoZXJ5LiBUaGVyZSBhcmUgdGhpbmdzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHBvc3NpYmxlIGZvciBtZSB0byBtZW50aW9uIHdpdGggaG9ub3I7IGJ1dCB5b3UgYXJlIGFsbCB0aGUgbW9yZSBmcmVlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoYXQsIGluYXNtdWNoIGFzIHlvdSBoYXZlIG5vdCBzY3J1cGxlZCB0byBiZSBhbiBhY3RvciBpbiBzY2VuZXMgd2hpY2ggYQogICAgICAgICAgICAgICAgICAgIG1vZGVzdCBlbmVteSBjYW4gbm90IGJyaW5nIGhpbXNlbGYgdG8gbWVudGlvbi4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJrIG5vdywgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIHJlc3Qgb2YgaGlzIGxpZmUsIHdoaWNoIEkgd2lsbCB0b3VjaCB1cG9uCiAgICAgICAgICAgICAgICAgICAgcmFwaWRseS4gRm9yIG15IGluY2xpbmF0aW9uIGhhc3RlbnMgdG8gYXJyaXZlIGF0IHRob3NlIHRoaW5ncyB3aGljaCBoZSBkaWQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgdGltZSBvZiB0aGUgY2l2aWwgd2FyLCBhbWlkIHRoZSBncmVhdGVzdCBtaXNlcmllcyBvZiB0aGUgcmVwdWJsaWMgYW5kIGF0CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgdGhpbmdzIHdoaWNoIGhlIGRvZXMgZXZlcnkgZGF5LiBBbmQgSSBiZWcgb2YgeW91LCB0aG91Z2ggdGhleSBhcmUgZmFyCiAgICAgICAgICAgICAgICAgICAgYmV0dGVyIGtub3duIHRvIHlvdSB0aGFuIHRoZXkgYXJlIHRvIG1lLCBzdGlsbCB0byBsaXN0ZW4gYXR0ZW50aXZlbHksIGFzIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBkb2luZyB0byBteSByZWxhdGlvbiBvZiB0aGVtLiBGb3IgaW4gc3VjaCBjYXNlcyBhcyB0aGlzLCBpdCBpcyBub3QgdGhlIG1lcmUKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2Ugb2Ygc3VjaCBhY3Rpb25zIHRoYXQgb3VnaHQgdG8gZXhjaXRlIHRoZSBtaW5kLCBidXQgdGhlIHJlY29sbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZW0gYWxzby4gQWx0aG91Z2ggd2UgbXVzdCBhdCBvbmNlIGdvIGludG8gdGhlIG1pZGRsZSBvZiB0aGVtLCBsZXN0IG90aGVyd2lzZQogICAgICAgICAgICAgICAgICAgIHdlIHNob3VsZCBiZSB0b28gbG9uZyBpbiBjb21pbmcgdG8gdGhlIGVuZC4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDgiIHVuaXQ9InNlY3Rpb24iIC8+IEhlIHdhcyB2ZXJ5IGludGltYXRlIHdpdGggQ2xvZGl1cyBhdCB0aGUgdGltZQogICAgICAgICAgICAgICAgICAgIG9mIGhpcyB0cmlidW5lc2hpcDsgaGUsIHdobyBub3cgZW51bWVyYXRlcyB0aGUga2luZG5lc3NlcyB3aGljaCBoZSBkaWQgbWUuIEhlCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoZSBmaXJlYnJhbmQgdG8gaGFuZGxlIGFsbCBjb25mbGFncmF0aW9uczsgYW5kIGV2ZW4gaW4gaGlzIGhvdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGVkIHNvbWV0aGluZy4gSGUgaGltc2VsZiB3ZWxsIGtub3dzIHdoYXQgSSBhbGx1ZGUgdG8uIEZyb20gdGhlbmNlIGhlIG1hZGUKICAgICAgICAgICAgICAgICAgICBhIGpvdXJuZXkgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwgaW4KICAgICAgICAgICAgICAgICAgICBkZWZpYW5jZSBvZiB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdG9yIGFuZCBhZ2FpbnN0IHRoZSBpbnRlcmVzdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIGFuZCBpbiBzcGl0ZSBvZiByZWxpZ2lvdXMgb2JzdGFjbGVzOyBidXQgaGUgaGFkIEdhYmluaXVzIGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBsZW5kZXIsIHdpdGggd2hvbSB3aGF0ZXZlciBoZSBkaWQgd2FzIHN1cmUgdG8gYmUgcmlnaHQuIFdoYXQgd2VyZSB0aGUKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIG9mIGhpcyByZXR1cm4gZnJvbSB0aGVuY2U/IHdoYXQgc29ydCBvZiByZXR1cm4gd2FzIGl0PyBIZSB3ZW50CiAgICAgICAgICAgICAgICAgICAgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gdG8gdGhlIGZhcnRoZXN0IGV4dHJlbWl0eSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBiZWZvcmUgaGUgcmV0dXJuZWQgaG9tZS4gQW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCB3YXMgaGlzIGhvbWUhIEZvciBhdCB0aGF0IHRpbWUgZXZlcnkgbWFuIGhhZCBwb3NzZXNzaW9uIG9mIGhpcyBvd24gaG91c2U7CiAgICAgICAgICAgICAgICAgICAgYW5kIHlvdSBoYWQgbm8gaG91c2UgYW55IHdoZXJlLCBPIEFudG9uaXVzLiBIb3VzZSwgZG8geW91IHNheT8gd2hhdCBwbGFjZSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpbiB0aGUgd2hvbGUgd29ybGQgd2hlcmUgeW91IGNvdWxkIHNldCB5b3VyIGZvb3Qgb24gYW55IHRoaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBiZWxvbmdlZCB0byB5b3UsIGV4Y2VwdCBNaWVudW0sIHdoaWNoIHlvdSBmYXJtZWQgd2l0aCB5b3VyIHBhcnRuZXJzLCBhcyBpZiBpdAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIFNpc2Fwbz88bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlNpc2FwbyB3YXMgYSB0b3duIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiwgY2VsZWJyYXRlZCBmb3Igc29tZSBtaW5lcyBvZgogICAgICAgICAgICAgICAgICAgICAgICB2ZXJtaWxpb24sIHdoaWNoIHdlcmUgZmFybWVkIGJ5IGEgY29tcGFueS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQ5IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.19.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgd2FzIHZlcnkgaW50aW1hdGUgd2l0aCBDbG9kaXVzIGF0IHRoZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIHRyaWJ1bmVzaGlwOyBoZSwgd2hvIG5vdyBlbnVtZXJhdGVzIHRoZSBraW5kbmVzc2VzIHdoaWNoIGhlIGRpZCBtZS4gSGUKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGZpcmVicmFuZCB0byBoYW5kbGUgYWxsIGNvbmZsYWdyYXRpb25zOyBhbmQgZXZlbiBpbiBoaXMgaG91c2UgaGUKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0ZWQgc29tZXRoaW5nLiBIZSBoaW1zZWxmIHdlbGwga25vd3Mgd2hhdCBJIGFsbHVkZSB0by4gRnJvbSB0aGVuY2UgaGUgbWFkZQogICAgICAgICAgICAgICAgICAgIGEgam91cm5leSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT4sIGluCiAgICAgICAgICAgICAgICAgICAgZGVmaWFuY2Ugb2YgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRvciBhbmQgYWdhaW5zdCB0aGUgaW50ZXJlc3RzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCBhbmQgaW4gc3BpdGUgb2YgcmVsaWdpb3VzIG9ic3RhY2xlczsgYnV0IGhlIGhhZCBHYWJpbml1cyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgbGVuZGVyLCB3aXRoIHdob20gd2hhdGV2ZXIgaGUgZGlkIHdhcyBzdXJlIHRvIGJlIHJpZ2h0LiBXaGF0IHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcyBvZiBoaXMgcmV0dXJuIGZyb20gdGhlbmNlPyB3aGF0IHNvcnQgb2YgcmV0dXJuIHdhcyBpdD8gSGUgd2VudAogICAgICAgICAgICAgICAgICAgIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gdG8gdGhlIGZhcnRoZXN0IGV4dHJlbWl0eSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IGJlZm9yZSBoZSByZXR1cm5lZCBob21lLiBBbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IHdhcyBoaXMgaG9tZSEgRm9yIGF0IHRoYXQgdGltZSBldmVyeSBtYW4gaGFkIHBvc3Nlc3Npb24gb2YgaGlzIG93biBob3VzZTsKICAgICAgICAgICAgICAgICAgICBhbmQgeW91IGhhZCBubyBob3VzZSBhbnkgd2hlcmUsIE8gQW50b25pdXMuIEhvdXNlLCBkbyB5b3Ugc2F5PyB3aGF0IHBsYWNlIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGluIHRoZSB3aG9sZSB3b3JsZCB3aGVyZSB5b3UgY291bGQgc2V0IHlvdXIgZm9vdCBvbiBhbnkgdGhpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGJlbG9uZ2VkIHRvIHlvdSwgZXhjZXB0IE1pZW51bSwgd2hpY2ggeW91IGZhcm1lZCB3aXRoIHlvdXIgcGFydG5lcnMsIGFzIGlmIGl0CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gU2lzYXBvPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5TaXNhcG8gd2FzIGEgdG93biBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiwgY2VsZWJyYXRlZCBmb3Igc29tZSBtaW5lcyBvZgogICAgICAgICAgICAgICAgICAgICAgICB2ZXJtaWxpb24sIHdoaWNoIHdlcmUgZmFybWVkIGJ5IGEgY29tcGFueS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4sIGNlbGVicmF0ZWQgZm9yIHNvbWUgbWluZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdmVybWlsaW9uLCB3aGljaCB3ZXJlIGZhcm1lZCBieSBhIGNvbXBhbnkuPC90cmFuc2xhdGlvbj4="
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.20.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBjYW1lIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiB0byBzdGFuZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcXVhZXN0b3JzaGlwLiBEYXJlIHRvIHNheSB0aGF0IHlvdSB3ZW50IHRvIHlvdXIgb3duIGZhdGhlciBiZWZvcmUgeW91IGNhbWUgdG8KICAgICAgICAgICAgICAgICAgICBtZS4gSSBoYWQgYWxyZWFkeSByZWNlaXZlZCBDYWVzYXIncyBsZXR0ZXJzLCBiZWdnaW5nIG1lIHRvIGFsbG93IG15c2VsZiB0bwogICAgICAgICAgICAgICAgICAgIGFjY2VwdCBvZiB5b3VyIGV4Y3VzZXM7IGFuZCB0aGVyZWZvcmUsIEkgZGlkIG5vdCBhbGxvdyB5b3UgZXZlbiB0byBtZW50aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhbmtzLiBBZnRlciB0aGF0LCBJIHdhcyB0cmVhdGVkIHdpdGggcmVzcGVjdCBieSB5b3UsIGFuZCB5b3UgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb25zIGZyb20gbWUgaW4geW91ciBjYW52YXNzIGZvciB0aGUgcXVhZXN0b3JzaGlwLiBBbmQgaXQgd2FzIGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aW1lLCBpbmRlZWQsIHRoYXQgeW91IGVuZGVhdm9yZWQgdG8gc2xheSBQdWJsaXVzIENsb2RpdXMgaW4gdGhlIGZvcnVtLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGFwcHJvYmF0aW9uIG9mIHRoZSBSb21hbiBwZW9wbGU7IGFuZCB0aG91Z2ggeW91IG1hZGUgdGhlIGF0dGVtcHQgb2YgeW91ciBvd24KICAgICAgICAgICAgICAgICAgICBhY2NvcmQsIGFuZCBub3QgYXQgbXkgaW5zdGlnYXRpb24sIHN0aWxsIHlvdSBjbGVhcmx5IGFsbGVnZWQgdGhhdCB5b3UgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHRoaW5rLCB1bmxlc3MgeW91IHNsZXcgaGltLCB0aGF0IHlvdSBjb3VsZCBwb3NzaWJseSBtYWtlIGFtZW5kcyB0byBtZSBmb3IgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGluanVyaWVzIHdoaWNoIHlvdSBoYWQgZG9uZSBtZS4gQW5kIHRoaXMgbWFrZXMgbWUgd29uZGVyIHdoeSB5b3Ugc2hvdWxkIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbG88L3N1cm5hbWU+PC9wZXJzTmFtZT4gZGlkIHRoYXQgZGVlZCBhdCBteQogICAgICAgICAgICAgICAgICAgIGluc3RpZ2F0aW9uOyB3aGVuIEkgbmV2ZXIgb25jZSBleGhvcnRlZCB5b3UgdG8gZG8gaXQsIHdobyBvZiB5b3VyIG93biBhY2NvcmQKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0ZWQgdG8gZG8gbWUgdGhlIHNhbWUgc2VydmljZS4gQWx0aG91Z2gsIGlmIHlvdSBoYWQgcGVyc2lzdGVkIGluIGl0LCBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgcHJlZmVycmVkIGFsbG93aW5nIHRoZSBhY3Rpb24gdG8gYmUgc2V0IGRvd24gZW50aXJlbHkgdG8geW91ciBvd24KICAgICAgICAgICAgICAgICAgICBsb3ZlIG9mIGdsb3J5IHJhdGhlciB0aGFuIHRvIG15IGluZmx1ZW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gdG8gc3RhbmQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHF1YWVzdG9yc2hpcC4gRGFyZSB0byBzYXkgdGhhdCB5b3Ugd2VudCB0byB5b3VyIG93biBmYXRoZXIgYmVmb3JlIHlvdSBjYW1lIHRvCiAgICAgICAgICAgICAgICAgICAgbWUuIEkgaGFkIGFscmVhZHkgcmVjZWl2ZWQgQ2Flc2FyJ3MgbGV0dGVycywgYmVnZ2luZyBtZSB0byBhbGxvdyBteXNlbGYgdG8KICAgICAgICAgICAgICAgICAgICBhY2NlcHQgb2YgeW91ciBleGN1c2VzOyBhbmQgdGhlcmVmb3JlLCBJIGRpZCBub3QgYWxsb3cgeW91IGV2ZW4gdG8gbWVudGlvbgogICAgICAgICAgICAgICAgICAgIHRoYW5rcy4gQWZ0ZXIgdGhhdCwgSSB3YXMgdHJlYXRlZCB3aXRoIHJlc3BlY3QgYnkgeW91LCBhbmQgeW91IHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9ucyBmcm9tIG1lIGluIHlvdXIgY2FudmFzcyBmb3IgdGhlIHF1YWVzdG9yc2hpcC4gQW5kIGl0IHdhcyBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgaW5kZWVkLCB0aGF0IHlvdSBlbmRlYXZvcmVkIHRvIHNsYXkgUHVibGl1cyBDbG9kaXVzIGluIHRoZSBmb3J1bSwgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBhcHByb2JhdGlvbiBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhbmQgdGhvdWdoIHlvdSBtYWRlIHRoZSBhdHRlbXB0IG9mIHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkLCBhbmQgbm90IGF0IG15IGluc3RpZ2F0aW9uLCBzdGlsbCB5b3UgY2xlYXJseSBhbGxlZ2VkIHRoYXQgeW91IGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGluaywgdW5sZXNzIHlvdSBzbGV3IGhpbSwgdGhhdCB5b3UgY291bGQgcG9zc2libHkgbWFrZSBhbWVuZHMgdG8gbWUgZm9yIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBpbmp1cmllcyB3aGljaCB5b3UgaGFkIGRvbmUgbWUuIEFuZCB0aGlzIG1ha2VzIG1lIHdvbmRlciB3aHkgeW91IHNob3VsZCBzYXkKICAgICAgICAgICAgICAgICAgICB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjwvcGVyc05hbWU+IGRpZCB0aGF0IGRlZWQgYXQgbXkKICAgICAgICAgICAgICAgICAgICBpbnN0aWdhdGlvbjsgd2hlbiBJIG5ldmVyIG9uY2UgZXhob3J0ZWQgeW91IHRvIGRvIGl0LCB3aG8gb2YgeW91ciBvd24gYWNjb3JkCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdGVkIHRvIGRvIG1lIHRoZSBzYW1lIHNlcnZpY2UuIEFsdGhvdWdoLCBpZiB5b3UgaGFkIHBlcnNpc3RlZCBpbiBpdCwgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHByZWZlcnJlZCBhbGxvd2luZyB0aGUgYWN0aW9uIHRvIGJlIHNldCBkb3duIGVudGlyZWx5IHRvIHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgbG92ZSBvZiBnbG9yeSByYXRoZXIgdGhhbiB0byBteSBpbmZsdWVuY2UuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWxvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['2.20.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSB3ZXJlIGVsZWN0ZWQgcXVhZXN0b3IuIE9uIHRoaXMsIGltbWVkaWF0ZWx5LCB3aXRob3V0IGFueSByZXNvbHV0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSBhdXRob3JpemluZyBzdWNoIGEgc3RlcCwgd2l0aG91dCBkcmF3aW5nIGxvdHMsIHdpdGhvdXQgcHJvY3VyaW5nIGFueSBsYXcKICAgICAgICAgICAgICAgICAgICB0byBiZSBwYXNzZWQsIHlvdSBoYXN0ZW5lZCB0byBDYWVzYXIuIEZvciB5b3UgdGhvdWdodCB0aGUgY2FtcCB0aGUgb25seSByZWZ1Z2UKICAgICAgICAgICAgICAgICAgICBvbiBlYXJ0aCBmb3IgaW5kaWdlbmNlLCBhbmQgZGVidCwgYW5kIHByb2ZsaWdhY3ks4oCUZm9yIGFsbCBtZW4sIGluCiAgICAgICAgICAgICAgICAgICAgc2hvcnQsIHdobyB3ZXJlIGluIGEgc3RhdGUgb2YgdXR0ZXIgcnVpbi4gVGhlbiwgd2hlbiB5b3UgaGFkIHJlY3J1aXRlZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzIGFnYWluIGJ5IGhpcyBsYXJnZXNzZXMgYW5kIHlvdXIgb3duIHJvYmJlcmllcyAoaWYsIGluZGVlZCwgYSBwZXJzb24KICAgICAgICAgICAgICAgICAgICBjYW4gYmUgc2FpZCB0byByZWNydWl0LCB3aG8gb25seSBhY3F1aXJlcyBzb21ldGhpbmcgd2hpY2ggaGUgbWF5IGltbWVkaWF0ZWx5CiAgICAgICAgICAgICAgICAgICAgc3F1YW5kZXIpLCB5b3UgaGFzdGVuZWQsIGJlaW5nIGFnYWluIGEgYmVnZ2FyLCB0byB0aGUgdHJpYnVuZXNoaXAsIGluIG9yZGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICBpbiB0aGF0IG1hZ2lzdHJhY3kgeW91IG1pZ2h0LCBpZiBwb3NzaWJsZSwgYmVoYXZlIGxpa2UgeW91ciBmcmllbmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkxpc3RlbiBub3csIEkgYmVzZWVjaCB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIG5vdCB0byB0aG9zZSB0aGluZ3Mgd2hpY2ggaGUgZGlkCiAgICAgICAgICAgICAgICAgICAgaW5kZWNlbnRseSBhbmQgcHJvZmxpZ2F0ZWx5IHRvIGhpcyBvd24gaW5qdXJ5IGFuZCB0byBoaXMgb3duIGRpc2dyYWNlIGFzIGEKICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGluZGl2aWR1YWw7IGJ1dCB0byB0aGUgYWN0aW9ucyB3aGljaCBoZSBkaWQgaW1waW91c2x5IGFuZCB3aWNrZWRseQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdXMgYW5kIG91ciBmb3J0dW5lcyzigJR0aGF0IGlzIHRvIHNheSwgYWdhaW5zdCB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gRm9yIGl0IGlzIGZyb20gaGlzIHdpY2tlZG5lc3MgdGhhdCB5b3Ugd2lsbCBmaW5kIHRoYXQgdGhlIGJlZ2lubmluZyBvZgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGVzZSBldmlscyBoYXMgYXJpc2VuLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoZW4sIGluIHRoZSBjb25zdWxzaGlwIG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIExlbnR1bHVzIGFuZCBNYXJjdXMgTWFyY2VsbHVzLCB5b3UsIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCB3ZXJlIGFueGlvdXMgdG8KICAgICAgICAgICAgICAgICAgICBwcm9wIHVwIHRoZSByZXB1YmxpYywgd2hpY2ggd2FzIHRvdHRlcmluZyBhbmQgYWxtb3N0IGZhbGxpbmcsIGFuZCB3ZXJlIHdpbGxpbmcKICAgICAgICAgICAgICAgICAgICB0byBjb25zdWx0IHRoZSBpbnRlcmVzdHMgb2YgQ2FpdXMgQ2Flc2FyIGhpbXNlbGYsIGlmIGhlIHdvdWxkIGhhdmUgYWN0ZWQgbGlrZSBhCiAgICAgICAgICAgICAgICAgICAgbWFuIGluIGhpcyBzZW5zZXMsIHRoZW4gdGhpcyBmZWxsb3cgb3Bwb3NlZCB0byB5b3VyIGNvdW5zZWxzIGhpcyB0cmlidW5lc2hpcCwKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgc29sZCBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlIHB1cmNoYXNlciwgYW5kIGV4cG9zZWQgaGlzIG93biBuZWNrIHRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBheCB1bmRlciB3aGljaCBtYW55IGhhdmUgc3VmZmVyZWQgZm9yIHNtYWxsZXIgY3JpbWVzLiBJdCB3YXMgYWdhaW5zdCB5b3UsIE8KICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMsIHRoYXQgdGhlIHNlbmF0ZSwgd2hpbGUgc3RpbGwgaW4gdGhlIHBvc3Nlc3Npb24gb2YgaXRzIHJpZ2h0cywKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgc28gbWFueSBvZiBpdHMgbHVtaW5hcmllcyB3ZXJlIGV4dGluZ3Vpc2hlZCwgcGFzc2VkIHRoYXQgZGVjcmVlIHdoaWNoLCBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCB0aGUgdXNhZ2Ugb2Ygb3VyIGFuY2VzdG9ycywgaXMgYXQgdGltZXMgcGFzc2VkIGFnYWluc3QgYW4gZW5lbXkKICAgICAgICAgICAgICAgICAgICB3aG8gaXMgYSBjaXRpemVuLiBBbmQgaGF2ZSB5b3UgZGFyZWQsIGJlZm9yZSB0aGVzZSBjb25zY3JpcHQgZmF0aGVycywgdG8gc2F5IGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGFnYWluc3QgbWUsIHdoZW4gSSBoYXZlIGJlZW4gcHJvbm91bmNlZCBieSB0aGlzIG9yZGVyIHRvIGJlIHRoZSBzYXZpb3Igb2YKICAgICAgICAgICAgICAgICAgICBteSBjb3VudHJ5LCBhbmQgd2hlbiB5b3UgaGF2ZSBiZWVuIGRlY2xhcmVkIGJ5IGl0IHRvIGJlIGFuIGVuZW15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljPyBUaGUgbWVudGlvbiBvZiB0aGF0IHdpY2tlZG5lc3Mgb2YgeW91cnMgaGFzIGJlZW4gaW50ZXJydXB0ZWQsIGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2YgaXQgaGFzIG5vdCBiZWVuIGVmZmFjZWQuIEFzIGxvbmcgYXMgdGhlIHJhY2Ugb2YgbWVuLCBhcyBsb25nIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgdGhlIFJvbWFuIHBlb3BsZSBzaGFsbCBleGlzdCAoYW5kIHRoYXQsIHVubGVzcyBpdCBpcyBwcmV2ZW50ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGJlaW5nIHNvIGJ5IHlvdXIgbWVhbnMsIHdpbGwgYmUgZXZlcmxhc3RpbmcpLCBzbyBsb25nIHdpbGwgdGhhdCBtb3N0IG1pc2NoaWV2b3VzCiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb3NpdGlvbiBvZiB5b3VyIHZldG8gYmUgc3Bva2VuIG9mLiA8bWlsZXN0b25lIG49IjUyIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0CiAgICAgICAgICAgICAgICAgICAgd2FzIHRoZXJlIHRoYXQgd2FzIGJlaW5nIGRvbmUgYnkgdGhlLCBzZW5hdGUgZWl0aGVyIGFtYml0aW91c2x5IG9yIHJhc2hseSwgd2hlbgogICAgICAgICAgICAgICAgICAgIHlvdSwgb25lIHNpbmdsZSB5b3VuZyBtYW4sIGZvcmJhZGUgdGhlIHdob2xlIG9yZGVyIHRvIHBhc3MgZGVjcmVlcyBjb25jZXJuaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWM/IGFuZCB3aGVuIHlvdSBkaWQgc28sIG5vdCBvbmNlIG9ubHksIGJ1dCByZXBlYXRlZGx5PwogICAgICAgICAgICAgICAgICAgIG5vciB3b3VsZCB5b3UgYWxsb3cgYW55IG9uZSB0byBwbGVhZCB3aXRoIHlvdSBpbiBiZWhhbGYgb2YgdGhlIGF1dGhvcml0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGU7IGFuZCB5ZXQsIHdoYXQgZGlkIGFueSBvbmUgZW50cmVhdCBvZiB5b3UsIGV4Y2VwdCB0aGF0IHlvdSB3b3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBkZXNpcmUgdGhlIHJlcHVibGljIHRvIGJlIGVudGlyZWx5IG92ZXJ0aHJvd24gYW5kIGRlc3Ryb3llZDsgd2hlbiBuZWl0aGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWVmIG1lbiBvZiB0aGUgc3RhdGUgYnkgdGhlaXIgZW50cmVhdGllcywgbm9yIHRoZSBlbGRlcnMgYnkgdGhlaXIgd2FybmluZ3MsCiAgICAgICAgICAgICAgICAgICAgbm9yIHRoZSBzZW5hdGUgaW4gYSBmdWxsIGhvdXNlIGJ5IHBsZWFkaW5nIHdpdGggeW91LCBjb3VsZCBtb3ZlIHlvdSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGRldGVybWluYXRpb24gd2hpY2ggeW91IGhhZCBhbHJlYWR5IHNvbGQgYW5kIGFzIGl0IHdlcmUgZGVsaXZlcmVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlcj8gVGhlbiBpdCB3YXMsIGFmdGVyIGhhdmluZyB0cmllZCBtYW55IG90aGVyIGV4cGVkaWVudHMgcHJldmlvdXNseSwKICAgICAgICAgICAgICAgICAgICB0aGF0IGEgYmxvdyB3YXMgb2YgbmVjZXNzaXR5IHN0cnVjayBhdCB5b3Ugd2hpY2ggaGFkIGJlZW4gc3RydWNrIGF0IG9ubHkgZmV3IG1lbgogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3UsIGFuZCB3aGljaCBub25lIG9mIHRoZW0gaGFkIGV2ZXIgc3Vydml2ZWQuIDxtaWxlc3RvbmUgbj0iNTMiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZW4gaXQgd2FzIHRoYXQgdGhpcyBvcmRlciBhcm1lZCB0aGUgY29uc3VscywgYW5kIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1hZ2lzdHJhdGVzIHdobyB3ZXJlIGludmVzdGVkIHdpdGggZWl0aGVyIG1pbGl0YXJ5IG9yIGNpdmlsIGNvbW1hbmQsCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB5b3UsIGFuZCB5b3UgbmV2ZXIgd291bGQgaGF2ZSBlc2NhcGVkIHRoZW0sIGlmIHlvdSBoYWQgbm90IHRha2VuIHJlZnVnZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBjYW1wIG9mIENhZXNhci4gPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.21.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoZW4sIGluIHRoZSBjb25zdWxzaGlwIG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIExlbnR1bHVzIGFuZCBNYXJjdXMgTWFyY2VsbHVzLCB5b3UsIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCB3ZXJlIGFueGlvdXMgdG8KICAgICAgICAgICAgICAgICAgICBwcm9wIHVwIHRoZSByZXB1YmxpYywgd2hpY2ggd2FzIHRvdHRlcmluZyBhbmQgYWxtb3N0IGZhbGxpbmcsIGFuZCB3ZXJlIHdpbGxpbmcKICAgICAgICAgICAgICAgICAgICB0byBjb25zdWx0IHRoZSBpbnRlcmVzdHMgb2YgQ2FpdXMgQ2Flc2FyIGhpbXNlbGYsIGlmIGhlIHdvdWxkIGhhdmUgYWN0ZWQgbGlrZSBhCiAgICAgICAgICAgICAgICAgICAgbWFuIGluIGhpcyBzZW5zZXMsIHRoZW4gdGhpcyBmZWxsb3cgb3Bwb3NlZCB0byB5b3VyIGNvdW5zZWxzIGhpcyB0cmlidW5lc2hpcCwKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgc29sZCBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlIHB1cmNoYXNlciwgYW5kIGV4cG9zZWQgaGlzIG93biBuZWNrIHRvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBheCB1bmRlciB3aGljaCBtYW55IGhhdmUgc3VmZmVyZWQgZm9yIHNtYWxsZXIgY3JpbWVzLiBJdCB3YXMgYWdhaW5zdCB5b3UsIE8KICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMsIHRoYXQgdGhlIHNlbmF0ZSwgd2hpbGUgc3RpbGwgaW4gdGhlIHBvc3Nlc3Npb24gb2YgaXRzIHJpZ2h0cywKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgc28gbWFueSBvZiBpdHMgbHVtaW5hcmllcyB3ZXJlIGV4dGluZ3Vpc2hlZCwgcGFzc2VkIHRoYXQgZGVjcmVlIHdoaWNoLCBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCB0aGUgdXNhZ2Ugb2Ygb3VyIGFuY2VzdG9ycywgaXMgYXQgdGltZXMgcGFzc2VkIGFnYWluc3QgYW4gZW5lbXkKICAgICAgICAgICAgICAgICAgICB3aG8gaXMgYSBjaXRpemVuLiBBbmQgaGF2ZSB5b3UgZGFyZWQsIGJlZm9yZSB0aGVzZSBjb25zY3JpcHQgZmF0aGVycywgdG8gc2F5IGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGFnYWluc3QgbWUsIHdoZW4gSSBoYXZlIGJlZW4gcHJvbm91bmNlZCBieSB0aGlzIG9yZGVyIHRvIGJlIHRoZSBzYXZpb3Igb2YKICAgICAgICAgICAgICAgICAgICBteSBjb3VudHJ5LCBhbmQgd2hlbiB5b3UgaGF2ZSBiZWVuIGRlY2xhcmVkIGJ5IGl0IHRvIGJlIGFuIGVuZW15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljPyBUaGUgbWVudGlvbiBvZiB0aGF0IHdpY2tlZG5lc3Mgb2YgeW91cnMgaGFzIGJlZW4gaW50ZXJydXB0ZWQsIGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2YgaXQgaGFzIG5vdCBiZWVuIGVmZmFjZWQuIEFzIGxvbmcgYXMgdGhlIHJhY2Ugb2YgbWVuLCBhcyBsb25nIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgdGhlIFJvbWFuIHBlb3BsZSBzaGFsbCBleGlzdCAoYW5kIHRoYXQsIHVubGVzcyBpdCBpcyBwcmV2ZW50ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGJlaW5nIHNvIGJ5IHlvdXIgbWVhbnMsIHdpbGwgYmUgZXZlcmxhc3RpbmcpLCBzbyBsb25nIHdpbGwgdGhhdCBtb3N0IG1pc2NoaWV2b3VzCiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb3NpdGlvbiBvZiB5b3VyIHZldG8gYmUgc3Bva2VuIG9mLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.21.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGVyZSB0aGF0IHdhcyBiZWluZyBkb25lIGJ5IHRoZSwgc2VuYXRlIGVpdGhlciBhbWJpdGlvdXNseSBvciByYXNobHksIHdoZW4KICAgICAgICAgICAgICAgICAgICB5b3UsIG9uZSBzaW5nbGUgeW91bmcgbWFuLCBmb3JiYWRlIHRoZSB3aG9sZSBvcmRlciB0byBwYXNzIGRlY3JlZXMgY29uY2VybmluZwogICAgICAgICAgICAgICAgICAgIHRoZSBzYWZldHkgb2YgdGhlIHJlcHVibGljPyBhbmQgd2hlbiB5b3UgZGlkIHNvLCBub3Qgb25jZSBvbmx5LCBidXQgcmVwZWF0ZWRseT8KICAgICAgICAgICAgICAgICAgICBub3Igd291bGQgeW91IGFsbG93IGFueSBvbmUgdG8gcGxlYWQgd2l0aCB5b3UgaW4gYmVoYWxmIG9mIHRoZSBhdXRob3JpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlOyBhbmQgeWV0LCB3aGF0IGRpZCBhbnkgb25lIGVudHJlYXQgb2YgeW91LCBleGNlcHQgdGhhdCB5b3Ugd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZGVzaXJlIHRoZSByZXB1YmxpYyB0byBiZSBlbnRpcmVseSBvdmVydGhyb3duIGFuZCBkZXN0cm95ZWQ7IHdoZW4gbmVpdGhlciB0aGUKICAgICAgICAgICAgICAgICAgICBjaGllZiBtZW4gb2YgdGhlIHN0YXRlIGJ5IHRoZWlyIGVudHJlYXRpZXMsIG5vciB0aGUgZWxkZXJzIGJ5IHRoZWlyIHdhcm5pbmdzLAogICAgICAgICAgICAgICAgICAgIG5vciB0aGUgc2VuYXRlIGluIGEgZnVsbCBob3VzZSBieSBwbGVhZGluZyB3aXRoIHlvdSwgY291bGQgbW92ZSB5b3UgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmF0aW9uIHdoaWNoIHlvdSBoYWQgYWxyZWFkeSBzb2xkIGFuZCBhcyBpdCB3ZXJlIGRlbGl2ZXJlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZXI/IFRoZW4gaXQgd2FzLCBhZnRlciBoYXZpbmcgdHJpZWQgbWFueSBvdGhlciBleHBlZGllbnRzIHByZXZpb3VzbHksCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIGJsb3cgd2FzIG9mIG5lY2Vzc2l0eSBzdHJ1Y2sgYXQgeW91IHdoaWNoIGhhZCBiZWVuIHN0cnVjayBhdCBvbmx5IGZldyBtZW4KICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91LCBhbmQgd2hpY2ggbm9uZSBvZiB0aGVtIGhhZCBldmVyIHN1cnZpdmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.21.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlbiBpdCB3YXMgdGhhdCB0aGlzIG9yZGVyIGFybWVkIHRoZSBjb25zdWxzLCBhbmQgdGhlIHJlc3QKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbWFnaXN0cmF0ZXMgd2hvIHdlcmUgaW52ZXN0ZWQgd2l0aCBlaXRoZXIgbWlsaXRhcnkgb3IgY2l2aWwgY29tbWFuZCwKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdSwgYW5kIHlvdSBuZXZlciB3b3VsZCBoYXZlIGVzY2FwZWQgdGhlbSwgaWYgeW91IGhhZCBub3QgdGFrZW4gcmVmdWdlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNhbXAgb2YgQ2Flc2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyB5b3UsIHlvdSwgSSBzYXksIE8gTWFyY3VzIEFudG9uaXVzLCB3aG8gZ2F2ZSBDYWl1cyBDYWVzYXIsIGRlc2lyb3VzIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSB3YXMgdG8gdGhyb3cgZXZlcnkgdGhpbmcgaW50byBjb25mdXNpb24sIHRoZSBwcmluY2lwYWwgcHJldGV4dCBmb3IKICAgICAgICAgICAgICAgICAgICB3YWdpbmcgd2FyIGFnYWluc3QgaGlzIGNvdW50cnkuIEZvciB3aGF0IG90aGVyIHByZXRlbnNlIGRpZCBoZSBhbGxlZ2U/IHdoYXQKICAgICAgICAgICAgICAgICAgICBjYXVzZSBkaWQgaGUgZ2l2ZSBmb3IgaGlzIG93biBtb3N0IGZyYW50aWMgcmVzb2x1dGlvbiBhbmQgYWN0aW9uLCBleGNlcHQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciBvZiBpbnRlcnBvc2l0aW9uIGJ5IHRoZSB2ZXRvIGhhZCBiZWVuIGRpc3JlZ2FyZGVkLCB0aGUgcHJpdmlsZWdlcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB0cmlidW5lcyB0YWtlbiBhd2F5LCBhbmQgQW50b25pdXMncyByaWdodHMgYWJyaWRnZWQgYnkgdGhlIHNlbmF0ZT8gSSBzYXkKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIG9mIGhvdyBmYWxzZSwgaG93IHRyaXZpYWwgdGhlc2UgcHJldGVuc2VzIHdlcmU7IGVzcGVjaWFsbHkgd2hlbiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBwb3NzaWJseSBiZSBhbnkgcmVhc29uYWJsZSBjYXVzZSB3aGF0ZXZlciB0byBqdXN0aWZ5IGFueSBvbmUgaW4gdGFraW5nCiAgICAgICAgICAgICAgICAgICAgdXAgYXJtcyBhZ2FpbnN0IGhpcyBjb3VudHJ5LiBCdXQgSSBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCBDYWVzYXIuIFlvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgdW5xdWVzdGlvbmFibHkgYWxsb3cgdGhhdCB0aGUgY2F1c2Ugb2YgdGhhdCBydWlub3VzIHdhciBleGlzdGVkIGluIHlvdXIgcGVyc29uLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTQiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.22.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyBtaXNlcmFibGUgbWFuIGlmIHlvdSBhcmUgYXdhcmUsIG1vcmUgbWlzZXJhYmxlIHN0aWxsIGlmIHlvdSBhcmUgbm90IGF3YXJlLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBpcyByZWNvcmRlZCBpbiB3cml0aW5ncywgaXMgaGFuZGVkIGRvd24gdG8gbWVuJ3MgcmVjb2xsZWN0aW9uLCB0aGF0IG91cgogICAgICAgICAgICAgICAgICAgIHZlcnkgbGF0ZXN0IHBvc3Rlcml0eSBpbiB0aGUgbW9zdCBkaXN0YW50IGFnZXMgd2lsbCBuZXZlciBmb3JnZXQgdGhpcyBmYWN0LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN1bHMgd2VyZSBleHBlbGxlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCB3aXRoIHRoZW0gQ25hZXVzIFBvbXBlaXVzLCB3aG8gd2FzIHRoZSBnbG9yeSBhbmQgbGlnaHQgb2YgdGhlIGVtcGlyZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGU7IHRoYXQgYWxsIHRoZSBtZW4gb2YgY29uc3VsYXIgcmFuaywgd2hvc2UgaGVhbHRoIHdvdWxkIGFsbG93IHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBzaGFyZSBpbiB0aGF0IGRpc2FzdGVyIGFuZCB0aGF0IGZsaWdodCwgYW5kIHRoZSBwcmFldG9ycywgYW5kIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHByYWV0b3JpYW4gcmFuaywgYW5kIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBhbmQgYSBncmVhdCBwYXJ0IG9mIHRoZSBzZW5hdGUsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFsbCB0aGUgZmxvd2VyIG9mIHRoZSB5b3V0aCBvZiB0aGUgY2l0eSwgYW5kLCBpbiBhIHdvcmQsIHRoZSByZXB1YmxpYyBpdHNlbGYKICAgICAgICAgICAgICAgICAgICB3YXMgZHJpdmVuIG91dCBhbmQgZXhwZWxsZWQgZnJvbSBpdHMgYWJvZGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBcywgdGhlbiwgdGhlcmUgaXMgaW4gc2VlZHMgdGhlIGNhdXNlIHdoaWNoIHByb2R1Y2VzIHRyZWVzIGFuZCBwbGFudHMsIHNvIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtb3N0IGxhbWVudGFibGUgd2FyIHlvdSB3ZXJlIHRoZSBzZWVkLiBEbyB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGdyaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlc2UgYXJtaWVzIG9mIHRoZSBSb21hbiBwZW9wbGUgaGF2ZSBiZWVuIHNsYWluPyBJdCBpcyBBbnRvbml1cyB3aG8gc2xldwogICAgICAgICAgICAgICAgICAgIHRoZW0uIERvIHlvdSByZWdyZXQgeW91ciBtb3N0IGlsbHVzdHJpb3VzIGNpdGl6ZW5zPyBJdCBpcyBBbnRvbml1cywgYWdhaW4sIHdobwogICAgICAgICAgICAgICAgICAgIGhhcyBkZXByaXZlZCB5b3Ugb2YgdGhlbS4gVGhlIGF1dGhvcml0eSBvZiB0aGlzIG9yZGVyIGlzIG92ZXJ0aHJvd247IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgd2hvIGhhcyBvdmVydGhyb3duIGl0LiBFdmVyeXRoaW5nLCBpbiBzaG9ydCwgd2hpY2ggd2UgaGF2ZSBzZWVuIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lIChhbmQgd2hhdCBtaXNmb3J0dW5lIGlzIHRoZXJlIHRoYXQgd2UgaGF2ZSBub3Qgc2Vlbj8pIHdlIHNoYWxsLCBpZiB3ZQogICAgICAgICAgICAgICAgICAgIGFyZ3VlIHJpZ2h0bHksIGF0dHJpYnV0ZSB3aG9sbHkgdG8gQW50b25pdXMuIEFzIEhlbGVuIHdhcyB0byB0aGUgVHJvamFucywgc28gaGFzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW4gYmVlbiB0byB0aGlzIHJlcHVibGljLOKAlHRoZSBjYXVzZSBvZiB3YXIgdGhlIGNhdXNlIG9mIG1pc2NoaWVmCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdXNlIG9mIHJ1aW4gVGhlIHJlc3Qgb2YgaGlzIHRyaWJ1bmVzaGlwIHdhcyBsaWtlIHRoZSBiZWdpbm5pbmcuIEhlIGRpZAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHRoaW5nIHdoaWNoIHRoZSBzZW5hdGUgaGFkIGxhYm9yZWQgdG8gcHJldmVudCwgYXMgYmVpbmcgaW1wb3NzaWJsZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGRvbmUgY29uc2lzdGVudGx5IHdpdGggdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWMuIEFuZCBzZWUsIG5vdywgaG93CiAgICAgICAgICAgICAgICAgICAgZ3JhdHVpdG91c2x5IHdpY2tlZCBoZSB3YXMgZXZlbiBpbiBhY2NvbXBsaXNoaW5nIGhpcyB3aWNrZWRuZXNzLiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNTYiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHdpdGggdGhlbSBDbmFldXMgUG9tcGVpdXMsIHdobyB3YXMgdGhlIGdsb3J5IGFuZCBsaWdodCBvZiB0aGUgZW1waXJlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFJvbWFuIHBlb3BsZTsgdGhhdCBhbGwgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLCB3aG9zZSBoZWFsdGggd291bGQgYWxsb3cgdGhlbQogICAgICAgICAgICAgICAgICAgIHRvIHNoYXJlIGluIHRoYXQgZGlzYXN0ZXIgYW5kIHRoYXQgZmxpZ2h0LCBhbmQgdGhlIHByYWV0b3JzLCBhbmQgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgcHJhZXRvcmlhbiByYW5rLCBhbmQgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFuZCBhIGdyZWF0IHBhcnQgb2YgdGhlIHNlbmF0ZSwKICAgICAgICAgICAgICAgICAgICBhbmQgYWxsIHRoZSBmbG93ZXIgb2YgdGhlIHlvdXRoIG9mIHRoZSBjaXR5LCBhbmQsIGluIGEgd29yZCwgdGhlIHJlcHVibGljIGl0c2VsZgogICAgICAgICAgICAgICAgICAgIHdhcyBkcml2ZW4gb3V0IGFuZCBleHBlbGxlZCBmcm9tIGl0cyBhYm9kZS4gPC90cmFuc2xhdGlvbj4="
translation['2.22.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBcywgdGhlbiwgdGhlcmUgaXMgaW4gc2VlZHMgdGhlIGNhdXNlIHdoaWNoIHByb2R1Y2VzIHRyZWVzIGFuZCBwbGFudHMsIHNvIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtb3N0IGxhbWVudGFibGUgd2FyIHlvdSB3ZXJlIHRoZSBzZWVkLiBEbyB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGdyaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlc2UgYXJtaWVzIG9mIHRoZSBSb21hbiBwZW9wbGUgaGF2ZSBiZWVuIHNsYWluPyBJdCBpcyBBbnRvbml1cyB3aG8gc2xldwogICAgICAgICAgICAgICAgICAgIHRoZW0uIERvIHlvdSByZWdyZXQgeW91ciBtb3N0IGlsbHVzdHJpb3VzIGNpdGl6ZW5zPyBJdCBpcyBBbnRvbml1cywgYWdhaW4sIHdobwogICAgICAgICAgICAgICAgICAgIGhhcyBkZXByaXZlZCB5b3Ugb2YgdGhlbS4gVGhlIGF1dGhvcml0eSBvZiB0aGlzIG9yZGVyIGlzIG92ZXJ0aHJvd247IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgd2hvIGhhcyBvdmVydGhyb3duIGl0LiBFdmVyeXRoaW5nLCBpbiBzaG9ydCwgd2hpY2ggd2UgaGF2ZSBzZWVuIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lIChhbmQgd2hhdCBtaXNmb3J0dW5lIGlzIHRoZXJlIHRoYXQgd2UgaGF2ZSBub3Qgc2Vlbj8pIHdlIHNoYWxsLCBpZiB3ZQogICAgICAgICAgICAgICAgICAgIGFyZ3VlIHJpZ2h0bHksIGF0dHJpYnV0ZSB3aG9sbHkgdG8gQW50b25pdXMuIEFzIEhlbGVuIHdhcyB0byB0aGUgVHJvamFucywgc28gaGFzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW4gYmVlbiB0byB0aGlzIHJlcHVibGljLOKAlHRoZSBjYXVzZSBvZiB3YXIgdGhlIGNhdXNlIG9mIG1pc2NoaWVmCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdXNlIG9mIHJ1aW4gVGhlIHJlc3Qgb2YgaGlzIHRyaWJ1bmVzaGlwIHdhcyBsaWtlIHRoZSBiZWdpbm5pbmcuIEhlIGRpZAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHRoaW5nIHdoaWNoIHRoZSBzZW5hdGUgaGFkIGxhYm9yZWQgdG8gcHJldmVudCwgYXMgYmVpbmcgaW1wb3NzaWJsZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGRvbmUgY29uc2lzdGVudGx5IHdpdGggdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWMuIEFuZCBzZWUsIG5vdywgaG93CiAgICAgICAgICAgICAgICAgICAgZ3JhdHVpdG91c2x5IHdpY2tlZCBoZSB3YXMgZXZlbiBpbiBhY2NvbXBsaXNoaW5nIGhpcyB3aWNrZWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.23.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIHJlc3RvcmVkIG1hbnkgbWVuIHdobyBoYWQgZmFsbGVuIHVuZGVyIG1pc2ZvcnR1bmUuIEFtb25nIHRoZW0gbm8gbWVudGlvbiB3YXMKICAgICAgICAgICAgICAgICAgICBtYWRlIG9mIGhpcyB1bmNsZS4gSWYgaGUgd2FzIHNldmVyZSwgd2h5IHdhcyBoZSBub3Qgc28gdG8gZXZlcnkgb25lPyBJZiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBtZXJjaWZ1bCwgd2h5IHdhcyBoZSBub3QgbWVyY2lmdWwgdG8gaGlzIG93biByZWxhdGlvbnM/IEJ1dCBJIHNheSBub3RoaW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3QuIEhlIHJlc3RvcmVkIExpY2luaXVzLiBMZW50aWN1bGEsIGEgbWFuIHdobyBoYWQgYmVlbiBjb25kZW1uZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgZ2FtYmxpbmcsIGFuZCB3aG8gd2FzIGEgZmVsbG93LWdhbWVzdGVyIG9mIGhpcyBvd24uIEFzIGlmIGhlIGNvdWxkIG5vdCBwbGF5IHdpdGgKICAgICAgICAgICAgICAgICAgICBhIGNvbmRlbW5lZCBtYW47IGJ1dCBpbiByZWFsaXR5LCBpbiBvcmRlciB0byBwYXkgYnkgYSBzdHJhaW5pbmcgb2YgdGhlIGxhdyBpbgogICAgICAgICAgICAgICAgICAgIGhpcyBmYXZvciwgd2hhdCBoZSBoYWQgbG9zdCBieSB0aGUgZGljZS4gV2hhdCByZWFzb24gZGlkIHlvdSBhbGxlZ2UgdG8gdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHdoeSBpdCB3YXMgZGVzaXJhYmxlIHRoYXQgaGUgc2hvdWxkIGJlIHJlc3RvcmVkPyBJIHN1cHBvc2UgeW91IHNhaWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBhYnNlbnQgd2hlbiB0aGUgcHJvc2VjdXRpb24gd2FzIGluc3RpdHV0ZWQgYWdhaW5zdCBoaW07IHRoYXQgdGhlIGNhdXNlCiAgICAgICAgICAgICAgICAgICAgd2FzIGRlY2lkZWQgd2l0aG91dCBoaXMgaGF2aW5nIGJlZW4gaGVhcmQgaW4gaGlzIGRlZmVuc2U7IHRoYXQgdGhlcmUgd2FzIG5vdCBieQogICAgICAgICAgICAgICAgICAgIGEgbGF3IGFueSBqdWRpY2lhbCBwcm9jZWVkaW5nIGVzdGFibGlzaGVkIHdpdGggcmVmZXJlbmNlIHRvIGdhbWJsaW5nOyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gcHV0IGRvd24gYnkgdmlvbGVuY2Ugb3IgYnkgYXJtczsgb3IgbGFzdGx5LCBhcyB3YXMgc2FpZCBpbiB0aGUgY2FzZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgdW5jbGUsIHRoYXQgdGhlIHRyaWJ1bmFsIGhhZCBiZWVuIGJyaWJlZCB3aXRoIG1vbmV5LiBOb3RoaW5nIG9mIHRoaXMgc29ydAogICAgICAgICAgICAgICAgICAgIHdhcyBzYWlkLiBUaGVuIGhlIHdhcyBhIGdvb2QgbWFuLCBhbmQgb25lIHdvcnRoeSBvZiB0aGUgcmVwdWJsaWMuIFRoYXQsIGluZGVlZCwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gbm90aGluZyB0byB0aGUgcHVycG9zZSwgYnV0IHN0aWxsLCBzaW5jZSBiZWluZyBjb25kZW1uZWQgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBnbyBmb3IgbXVjaCwgSSB3b3VsZCBmb3JnaXZlIHlvdSBpZiB0aGF0IHdlcmUgdGhlIHRydXRoLiBEb2VzIG5vdCBoZSByZXN0b3JlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGZ1bGwgcG9zc2Vzc2lvbiBvZiBoaXMgZm9ybWVyIHByaXZpbGVnZXMgdGhlIG1vc3Qgd29ydGhsZXNzIG1hbgogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlLOKAlG9uZSB3aG8gd291bGQgbm90IGhlc2l0YXRlIHRvIHBsYXkgYXQgZGljZSBldmVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcnVtLCBhbmQgd2hvIGhhZCBiZWVuIGNvbnZpY3RlZCB1bmRlciB0aGUgbGF3IHdoaWNoIGV4aXN0cyByZXNwZWN0aW5nCiAgICAgICAgICAgICAgICAgICAgZ2FtYmxpbmcs4oCUZG9lcyBub3QgaGUgZGVjbGFyZSBpbiB0aGUgbW9zdCBvcGVuIG1hbm5lciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgcHJvcGVuc2l0aWVzPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.23.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbiBpbiB0aGlzIHNhbWUgdHJpYnVuZXNoaXAsIHdoZW4gQ2Flc2FyIHdoaWxlIG9uIGhpIHdheSBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+IGhhZCBnaXZlbiBoaW0gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gdG8gdHJhbXBsZSBvbiwgd2hhdCBqb3VybmV5cyBkaWQgaGUgbWFrZQogICAgICAgICAgICAgICAgICAgIGluIGV2ZXJ5IGRpcmVjdGlvbiEgaG93IGRpZCBoZSB2aXNpdCB0aGUgbXVuaWNpcGFsIHRvd25zISBJIGtub3cgdGhhdCBJIGFtIG9ubHkKICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBvZiBtYXR0ZXJzIHdoaWNoIGhhdmUgYmVlbiBkaXNjdXNzZWQgaW4gZXZlcnkgb25lJ3MgY29udmVyc2F0aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB0aGluZ3Mgd2hpY2ggSSBhbSBzYXlpbmcgYW5kIGFtIGdvaW5nIHRvIHNheSBhcmUgYmV0dGVyIGtub3duIHRvIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb25lIHdobyB3YXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYXQgdGhhdCB0aW1lLCB0aGFuCiAgICAgICAgICAgICAgICAgICAgdG8gbWUsIHdobyB3YXMgbm90LiBTdGlsbCBJIG1lbnRpb24gdGhlIHBhcnRpY3VsYXJzIG9mIGhpcyBjb25kdWN0LCBhbHRob3VnaCBteQogICAgICAgICAgICAgICAgICAgIHNwZWVjaCBjYW4gbm90IHBvc3NpYmx5IGNvbWUgdXAgdG8geW91ciBvd24gcGVyc29uYWwga25vd2xlZGdlLiBXaGVuIHdhcyBzdWNoCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcyBldmVyIGhlYXJkIG9mIGFzIGV4aXN0aW5nIHVwb24gZWFydGg/IG9yIHNoYW1lbGVzc25lc3M/IG9yIHN1Y2ggb3BlbgogICAgICAgICAgICAgICAgICAgIGluZmFteT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNTgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4gaGFkIGdpdmVuIGhpbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0byB0cmFtcGxlIG9uLCB3aGF0IGpvdXJuZXlzIGRpZCBoZSBtYWtlCiAgICAgICAgICAgICAgICAgICAgaW4gZXZlcnkgZGlyZWN0aW9uISBob3cgZGlkIGhlIHZpc2l0IHRoZSBtdW5pY2lwYWwgdG93bnMhIEkga25vdyB0aGF0IEkgYW0gb25seQogICAgICAgICAgICAgICAgICAgIHNwZWFraW5nIG9mIG1hdHRlcnMgd2hpY2ggaGF2ZSBiZWVuIGRpc2N1c3NlZCBpbiBldmVyeSBvbmUncyBjb252ZXJzYXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHRoaW5ncyB3aGljaCBJIGFtIHNheWluZyBhbmQgYW0gZ29pbmcgdG8gc2F5IGFyZSBiZXR0ZXIga25vd24gdG8gZXZlcnkKICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIHdhcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBhdCB0aGF0IHRpbWUsIHRoYW4KICAgICAgICAgICAgICAgICAgICB0byBtZSwgd2hvIHdhcyBub3QuIFN0aWxsIEkgbWVudGlvbiB0aGUgcGFydGljdWxhcnMgb2YgaGlzIGNvbmR1Y3QsIGFsdGhvdWdoIG15CiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIGNhbiBub3QgcG9zc2libHkgY29tZSB1cCB0byB5b3VyIG93biBwZXJzb25hbCBrbm93bGVkZ2UuIFdoZW4gd2FzIHN1Y2gKICAgICAgICAgICAgICAgICAgICB3aWNrZWRuZXNzIGV2ZXIgaGVhcmQgb2YgYXMgZXhpc3RpbmcgdXBvbiBlYXJ0aD8gb3Igc2hhbWVsZXNzbmVzcz8gb3Igc3VjaCBvcGVuCiAgICAgICAgICAgICAgICAgICAgaW5mYW15PyA8L3RyYW5zbGF0aW9uPg=="
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.24.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgd2FzIGJvcm5lIGFsb25nIGluIGEgY2hhcmlvdCwgbGljdG9ycyBjcm93bmVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBsYXVyZWwgcHJlY2VkZWQgaGltOyBhbW9uZyB3aG9tLCBvbiBhbiBvcGVuIGxpdHRlciwgd2FzIGNhcnJpZWQgYW4gYWN0cmVzczsgd2hvbQogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBtZW4sIGNpdGl6ZW5zIG9mIHRoZSBkaWZmZXJlbnQgbXVuaWNpcGFsaXRpZXMsIGNvbWluZyBvdXQgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRvd25zIHVuZGVyIGNvbXB1bHNpb24gdG8gbWVldCBoaW0sIHNhbHV0ZWQgbm90IGJ5IHRoZSBuYW1lIGJ5IHdoaWNoIHNoZSB3YXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGtub3duIG9uIHRoZSBzdGFnZSwgYnV0IGJ5IHRoYXQgb2YgVm9sdW1uaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlNoZSB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBjb3VydGVzYW4gd2hvIGhhZCBiZWVuIGVuZnJhbmNoaXNlZCBieSBoZXIgbWFzdGVyIFZvbHVtbml1cy4gVGhlIG5hbWUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgVm9sdW1uaWEgd2FzIGRlYXIgdG8gdGhlIFJvbWFucyBhcyB0aGF0IG9mIHRoZSB3aWZlIG9mIENvcmlvbGFudXMsIHRvIHdob3NlCiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJlYXRpZXMgaGUgaGFkIHlpZWxkZWQgd2hlbiBoZSBkcmV3IG9mZiBoaXMgYXJteSBmcm9tIHRoZSBuZWlnaGJvcmhvb2Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi48L25vdGU+IEEgY2FyIGZvbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgZnVsbCBvZiBwaW1wczsgdGhlbiBhIGxvdCBvZiBkZWJhdWNoZWQgY29tcGFuaW9uczsgYW5kIHRoZW4gaGlzIG1vdGhlciwgdXR0ZXJseQogICAgICAgICAgICAgICAgICAgIG5lZ2xlY3RlZCwgZm9sbG93ZWQgdGhlIG1pc3RyZXNzIG9mIGhlciBwcm9mbGlnYXRlIHNvbiwgYXMgaWYgc2hlIGhhZCBiZWVuIGhlcgogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyLWluLWxhdy4gTyB0aGUgZGlzYXN0cm91cyBmZWN1bmRpdHkgb2YgdGhhdCBtaXNlcmFibGUgd29tYW4hIFdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgbWFya3Mgb2Ygc3VjaCB3aWNrZWRuZXNzIGFzIHRoaXMgZGlkIHRoYXQgZmVsbG93IHN0YW1wIGV2ZXJ5IG11bmljaXBhbGl0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJlZmVjdHVyZSwgYW5kIGNvbG9ueSwgYW5kLCBpbiBzaG9ydCwgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+U2hlIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdXJ0ZXNhbiB3aG8gaGFkIGJlZW4gZW5mcmFuY2hpc2VkIGJ5IGhlciBtYXN0ZXIgVm9sdW1uaXVzLiBUaGUgbmFtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBWb2x1bW5pYSB3YXMgZGVhciB0byB0aGUgUm9tYW5zIGFzIHRoYXQgb2YgdGhlIHdpZmUgb2YgQ29yaW9sYW51cywgdG8gd2hvc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW50cmVhdGllcyBoZSBoYWQgeWllbGRlZCB3aGVuIGhlIGRyZXcgb2ZmIGhpcyBhcm15IGZyb20gdGhlIG5laWdoYm9yaG9vZCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+Ljwvbm90ZT4gQSBjYXIgZm9sbG93ZWQKICAgICAgICAgICAgICAgICAgICBmdWxsIG9mIHBpbXBzOyB0aGVuIGEgbG90IG9mIGRlYmF1Y2hlZCBjb21wYW5pb25zOyBhbmQgdGhlbiBoaXMgbW90aGVyLCB1dHRlcmx5CiAgICAgICAgICAgICAgICAgICAgbmVnbGVjdGVkLCBmb2xsb3dlZCB0aGUgbWlzdHJlc3Mgb2YgaGVyIHByb2ZsaWdhdGUgc29uLCBhcyBpZiBzaGUgaGFkIGJlZW4gaGVyCiAgICAgICAgICAgICAgICAgICAgZGF1Z2h0ZXItaW4tbGF3LiBPIHRoZSBkaXNhc3Ryb3VzIGZlY3VuZGl0eSBvZiB0aGF0IG1pc2VyYWJsZSB3b21hbiEgV2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrcyBvZiBzdWNoIHdpY2tlZG5lc3MgYXMgdGhpcyBkaWQgdGhhdCBmZWxsb3cgc3RhbXAgZXZlcnkgbXVuaWNpcGFsaXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBwcmVmZWN0dXJlLCBhbmQgY29sb255LCBhbmQsIGluIHNob3J0LCB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.24.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VG8gZmluZCBmYXVsdCB3aXRoIHRoZSByZXN0IG9mIGhpcyBhY3Rpb25zLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBpcyBkaWZmaWN1bHQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNvbWV3aGF0IHVuc2FmZS4gSGUgd2FzIG9jY3VwaWVkIGluIHdhcjsgaGUgZ2x1dHRlZCBoaW1zZWxmIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdWdodGVyIG9mIGNpdGl6ZW5zIHdobyBib3JlIG5vIHJlc2VtYmxhbmNlIHRvIGhpbXNlbGYgSGUgd2FzCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuYXRl4oCUaWYgYXQgbGVhc3QgdGhlcmUgY2FuIGJlIGFueSBnb29kIGZvcnR1bmUgaW4gd2lja2VkbmVzcy4gQnV0CiAgICAgICAgICAgICAgICAgICAgc2luY2Ugd2Ugd2lzaCB0byBzaG93IGEgcmVnYXJkIGZvciB0aGUgdmV0ZXJhbnMsIGFsdGhvdWdoIHRoZSBjYXVzZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBpcyB2ZXJ5IGRpZmZlcmVudCBmcm9tIHlvdXJzOyB0aGV5IGZvbGxvd2VkIHRoZWlyIGNoaWVmOyB5b3Ugd2VudCB0bwogICAgICAgICAgICAgICAgICAgIHNlZWsgZm9yIGEgbGVhZGVyOyBzdGlsbCAodGhhdCBJIG1heSBub3QgZ2l2ZSB5b3UgYW55IHByZXRlbnNlIGZvciBzdGlycmluZyB1cAogICAgICAgICAgICAgICAgICAgIG9kaXVtIGFnYWluc3QgbWUgYW1vbmcgdGhlbSksIEkgd2lsbCBzYXkgbm90aGluZyBvZiB0aGUgbmF0dXJlIG9mIHRoZSB3YXIuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IFdoZW4gdmljdG9yaW91cywgeW91IHJldHVybmVkIHdpdGggdGhlIGxlZ2lvbnMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4uIFRoZXJlIHlvdSBkaWQgbm90IHB1dCBtZSB0byBkZWF0aC4gSXQgd2FzIGEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBraW5kbmVzcyEgRm9yIEkgY29uZmVzcyB0aGF0IHlvdSBjb3VsZCBoYXZlIGRvbmUgaXQuIEFsdGhvdWdoIHRoZXJlIHdhcyBubyBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aG9zZSBtZW4gd2hvIHdlcmUgd2l0aCB5b3UgYXQgdGhhdCB0aW1lLCB3aG8gZGlkIG5vdCB0aGluayB0aGF0IEkgb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBzcGFyZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHNvIGdyZWF0IGlzIG1lbidzIGFmZmVjdGlvbgogICAgICAgICAgICAgICAgICAgIGZvciB0aGVpciBjb3VudHJ5OyB0aGF0IEkgd2FzIHNhY3JlZCBldmVuIGluIHRoZSBleWVzIG9mIHlvdXIgbGVnaW9ucywgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZXkgcmVjb2xsZWN0ZWQgdGhhdCB0aGUgY291bnRyeSBoYWQgYmVlbiBzYXZlZCBieSBtZS4gSG93ZXZlciwgZ3JhbnQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBkaWQgZ2l2ZSBtZSB3aGF0IHlvdSBkaWQgbm90IHRha2UgYXdheSBmcm9tIG1lOyBhbmQgdGhhdCBJIGhhdmUgbXkgbGlmZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBmcm9tIHlvdSwgc2luY2UgaXQgd2FzIG5vdCB0YWtlbiBmcm9tIG1lIGJ5IHlvdTsgd2FzIGl0IHBvc3NpYmxlIGZvciBtZSwKICAgICAgICAgICAgICAgICAgICBhZnRlciBhbGwgeW91ciBpbnN1bHRzLCB0byByZWdhcmQgdGhhdCBraW5kbmVzcyBvZiB5b3VycyBhcyBJIHJlZ2FyZGVkIGl0IGF0CiAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGVzcGVjaWFsbHkgYWZ0ZXIgeW91IHNhdyB0aGF0IHlvdSBtdXN0IGhlYXIgdGhpcyByZXBseSBmcm9tIG1lPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+LiBUaGVyZSB5b3UgZGlkIG5vdCBwdXQgbWUgdG8gZGVhdGguIEl0IHdhcyBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAga2luZG5lc3MhIEZvciBJIGNvbmZlc3MgdGhhdCB5b3UgY291bGQgaGF2ZSBkb25lIGl0LiBBbHRob3VnaCB0aGVyZSB3YXMgbm8gb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2UgbWVuIHdobyB3ZXJlIHdpdGggeW91IGF0IHRoYXQgdGltZSwgd2hvIGRpZCBub3QgdGhpbmsgdGhhdCBJIG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgc3BhcmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.24.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHNvIGdyZWF0IGlzIG1lbidzIGFmZmVjdGlvbgogICAgICAgICAgICAgICAgICAgIGZvciB0aGVpciBjb3VudHJ5OyB0aGF0IEkgd2FzIHNhY3JlZCBldmVuIGluIHRoZSBleWVzIG9mIHlvdXIgbGVnaW9ucywgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZXkgcmVjb2xsZWN0ZWQgdGhhdCB0aGUgY291bnRyeSBoYWQgYmVlbiBzYXZlZCBieSBtZS4gSG93ZXZlciwgZ3JhbnQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBkaWQgZ2l2ZSBtZSB3aGF0IHlvdSBkaWQgbm90IHRha2UgYXdheSBmcm9tIG1lOyBhbmQgdGhhdCBJIGhhdmUgbXkgbGlmZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBmcm9tIHlvdSwgc2luY2UgaXQgd2FzIG5vdCB0YWtlbiBmcm9tIG1lIGJ5IHlvdTsgd2FzIGl0IHBvc3NpYmxlIGZvciBtZSwKICAgICAgICAgICAgICAgICAgICBhZnRlciBhbGwgeW91ciBpbnN1bHRzLCB0byByZWdhcmQgdGhhdCBraW5kbmVzcyBvZiB5b3VycyBhcyBJIHJlZ2FyZGVkIGl0IGF0CiAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGVzcGVjaWFsbHkgYWZ0ZXIgeW91IHNhdyB0aGF0IHlvdSBtdXN0IGhlYXIgdGhpcyByZXBseSBmcm9tIG1lPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.25.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBjYW1lIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYm9zb20gYW5kIGVtYnJhY2VzIG9mIHlvdXIgYWN0cmVzcy4gV2hhdCBpcyB0aGUgbWF0dGVyPyBBbSBJIHNwZWFraW5nIGZhbHNlbHk/CiAgICAgICAgICAgICAgICAgICAgSG93IG1pc2VyYWJsZSBpcyBpdCBub3QgdG8gYmUgYWJsZSB0byBkZW55IGEgZmFjdCB3aGljaCBpdCBpcyBkaXNncmFjZWZ1bCB0bwogICAgICAgICAgICAgICAgICAgIGNvbmZlc3MhIElmIHlvdSBoYWQgbm8gc2hhbWUgYmVmb3JlIHRoZSBtdW5pY2lwYWwgdG93bnMsIGhhZCB5b3Ugbm9uZSBldmVuCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdXIgdmV0ZXJhbiBhcm15PyBGb3Igd2hhdCBzb2xkaWVyIHdhcyB0aGVyZSB3aG8gZGlkIG5vdCBzZWUgaGVyIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPj8gd2hvIHdhcyB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdobyBkaWQgbm90IGtub3cgdGhhdCBzaGUgaGFkIGNvbWUgc28gbWFueSBkYXlzJyBqb3VybmV5IHRvIGNvbmdyYXR1bGF0ZSB5b3U/CiAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyB0aGVyZSB3aG8gZGlkIG5vdCBncmlldmUgdGhhdCBoZSB3YXMgc28gbGF0ZSBpbiBmaW5kaW5nIG91dCBob3cKICAgICAgICAgICAgICAgICAgICB3b3J0aGxlc3MgYSBtYW4gaGUgaGFkIGJlZW4gZm9sbG93aW5nPyA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4sIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGJvc29tIGFuZCBlbWJyYWNlcyBvZiB5b3VyIGFjdHJlc3MuIFdoYXQgaXMgdGhlIG1hdHRlcj8gQW0gSSBzcGVha2luZyBmYWxzZWx5PwogICAgICAgICAgICAgICAgICAgIEhvdyBtaXNlcmFibGUgaXMgaXQgbm90IHRvIGJlIGFibGUgdG8gZGVueSBhIGZhY3Qgd2hpY2ggaXQgaXMgZGlzZ3JhY2VmdWwgdG8KICAgICAgICAgICAgICAgICAgICBjb25mZXNzISBJZiB5b3UgaGFkIG5vIHNoYW1lIGJlZm9yZSB0aGUgbXVuaWNpcGFsIHRvd25zLCBoYWQgeW91IG5vbmUgZXZlbgogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3VyIHZldGVyYW4gYXJteT8gRm9yIHdoYXQgc29sZGllciB3YXMgdGhlcmUgd2hvIGRpZCBub3Qgc2VlIGhlciBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4/IHdobyB3YXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICB3aG8gZGlkIG5vdCBrbm93IHRoYXQgc2hlIGhhZCBjb21lIHNvIG1hbnkgZGF5cycgam91cm5leSB0byBjb25ncmF0dWxhdGUgeW91PwogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdGhlcmUgd2hvIGRpZCBub3QgZ3JpZXZlIHRoYXQgaGUgd2FzIHNvIGxhdGUgaW4gZmluZGluZyBvdXQgaG93CiAgICAgICAgICAgICAgICAgICAgd29ydGhsZXNzIGEgbWFuIGhlIGhhZCBiZWVuIGZvbGxvd2luZz8gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjIiIHVuaXQ9InNlY3Rpb24iIC8+IEFnYWluIHlvdSBtYWRlIGEgdG91ciB0aHJvdWdoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgd2l0aCB0aGF0IHNhbWUgYWN0cmVzcyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIGNvbXBhbmlvbi4gQ3J1ZWwgYW5kIG1pc2VyYWJsZSB3YXMgdGhlIHdheSBpbiB3aGljaCB5b3UgbGVkIHlvdXIgc29sZGllcnMgaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSB0b3duczsgc2hhbWVmdWwgd2FzIHRoZSBwaWxsYWdlciBpbiBldmVyeSBjaXR5LCBvZiBnb2xkIGFuZCBzaWx2ZXIsIGFuZAogICAgICAgICAgICAgICAgICAgIGFib3ZlIGFsbCwgb2Ygd2luZS4gQW5kIGJlc2lkZXMgYWxsIHRoaXMsIHdoaWxlIENhZXNhciBrbmV3IG5vdGhpbmcgYWJvdXQgaXQsIGFzCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMjU2IiBrZXk9InRnbiw3MDAyMjU2Ij5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCBBbnRvbml1cywgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZG5lc3Mgb2YgQ2Flc2FyJ3MgZnJpZW5kcywgd2FzIGFwcG9pbnRlZCBoaXMgbWFzdGVyIG9mIHRoZSBob3JzZS4gVGhlbiBoZQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhhdCB5b3UgY291bGQgbGl2ZSB3aXRoIEhpcHBpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyBpcyBhIHBsYXkgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgSGlwcGlhLCBhcyBkZXJpdmVkIGZyb20gPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPmkoL3Bwb3M8L2ZvcmVpZ24+LCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGhvcnNlLjwvbm90ZT4gYnkgdmlydHVlIG9mIGhpcyBvZmZpY2UsIGFuZCB0aGF0IGhlIG1pZ2h0IGdpdmUgaG9yc2VzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGUgcHJvcGVydHkgb2YgdGhlIHN0YXRlIHRvIFNlcmdpdXMgdGhlIGJ1ZmZvb24uIEF0IHRoYXQgdGltZSBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBlbGVjdGVkIGZvciBoaW1zZWxmIHRvIGxpdmUgaW4sIG5vdCB0aGUgaG91c2Ugd2hpY2ggaGUgbm93IGRpc2hvbm9ycywgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBvZiBNYXJjdXMgUGlzby4gV2h5IG5lZWQgSSBtZW50aW9uIGhpcyBkZWNyZWVzLCBoaXMgcm9iYmVyaWVzLCB0aGUgcG9zc2Vzc2lvbnMKICAgICAgICAgICAgICAgICAgICBvZiBpbmhlcml0YW5jZXMgd2hpY2ggd2VyZSBnaXZlbiBoaW0sIGFuZCB0aG9zZSB0b28gd2hpY2ggd2VyZSBzZWl6ZWQgYnkgaGltPwogICAgICAgICAgICAgICAgICAgIFdhbnQgY29tcGVsbGVkIGhpbTsgaGUgZGlkIG5vdCBrbm93IHdoZXJlIHRvIHR1cm4uIFRoYXQgZ3JlYXQgaW5oZXJpdGFuY2UgZnJvbQogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBSdWJyaXVzLCBhbmQgdGhhdCBvdGhlciBmcm9tIEx1Y2l1cyBUdXJzZWxpdXMsIGhhZCBub3QgeWV0IGNvbWUgdG8gaGltLgogICAgICAgICAgICAgICAgICAgIEhlIGhhZCBub3QgeWV0IHN1Y2NlZWRlZCBhcyBhbiB1bmV4cGVjdGVkIGhlaXIgdG8gdGhlIHBsYWNlIG9mIENuYWV1cyBQb21wZWl1cywKICAgICAgICAgICAgICAgICAgICBhbmQgb2YgbWFueSBvdGhlcnMgd2hvIHdlcmUgYWJzZW50LiBIZSB3YXMgZm9yY2VkIHRvIGxpdmUgbGlrZSBhIHJvYmJlciwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyBiZXlvbmQgd2hhdCBoZSBjb3VsZCBwbHVuZGVyIGZyb20gb3RoZXJzLiA8bWlsZXN0b25lIG49IjYzIiB1bml0PSJzZWN0aW9uIiAvPiBIb3dldmVyLCB3ZSB3aWxsIHNheSBub3RoaW5nIG9mIHRoZXNlIHRoaW5ncywgd2hpY2ggYXJlCiAgICAgICAgICAgICAgICAgICAgYWN0cyBvZiBhIG1vcmUgaGFyZHkgc29ydCBvZiB2aWxsYWlueS4gTGV0IHVzIHNwZWFrIHJhdGhlciBvZiBoaXMgbWVhbmVyCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25zIG9mIHdvcnRobGVzc25lc3MuIFlvdSwgd2l0aCB0aG9zZSBqYXdzIG9mIHlvdXJzLCBhbmQgdGhvc2Ugc2lkZXMgb2YKICAgICAgICAgICAgICAgICAgICB5b3VycywgYW5kIHRoYXQgc3RyZW5ndGggb2YgYm9keSBzdWl0ZWQgdG8gYSBnbGFkaWF0b3IsIGRyYW5rIHN1Y2ggcXVhbnRpdGllcyBvZgogICAgICAgICAgICAgICAgICAgIHdpbmUgYXQgdGhlIG1hcnJpYWdlIG9mIEhpcHBpYSwgdGhhdCB5b3Ugd2VyZSBmb3JjZWQgdG8gdm9taXQgdGhlIG5leHQgZGF5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNpZ2h0IG9mIHRoZSBSb21hbiBwZW9wbGUuIE8gYWN0aW9uIGRpc2dyYWNlZnVsIG5vdCBtZXJlbHkgdG8gc2VlLCBidXQgZXZlbgogICAgICAgICAgICAgICAgICAgIHRvIGhlYXIgb2YhIElmIHRoaXMgaGFkIGhhcHBlbmVkIHRvIHlvdSBhdCBzdXBwZXIgYW1pZCB0aG9zZSB2YXN0IGRyaW5raW5nLWN1cHMKICAgICAgICAgICAgICAgICAgICBvZiB5b3Vycywgd2hvIHdvdWxkIG5vdCBoYXZlIHRob3VnaHQgaXQgc2NhbmRhbG91cz8gQnV0IGluIGFuIGFzc2VtYmx5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFJvbWFuIHBlb3BsZSwgYSBtYW4gaG9sZGluZyBhIHB1YmxpYyBvZmZpY2UsIGEgbWFzdGVyIG9mIHRoZSBob3JzZSwgdG8gd2hvbSBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgYmVlbiBkaXNncmFjZWZ1bCBldmVuIHRvIGJlbGNoLCB2b21pdGluZyBmaWxsZWQgaGlzIG93biBib3NvbSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgdHJpYnVuYWwgd2l0aCBmcmFnbWVudHMgb2Ygd2hhdCBoZSBoYWQgYmVlbiBlYXRpbmcgcmVla2luZyB3aXRoIHdpbmUuIEJ1dAogICAgICAgICAgICAgICAgICAgIGhlIGhpbXNlbGYgY29uZmVzc2VzIHRoaXMgYW1vbmcgaGlzIG90aGVyIGRpc2dyYWNlZnVsIGFjdHMuIExldCB1cyBwcm9jZWVkIHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIG1vcmUgc3BsZW5kaWQgb2ZmZW5zZXMuIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.25.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz4gQWdhaW4geW91IG1hZGUgYSB0b3VyIHRocm91Z2ggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHdpdGggdGhhdCBzYW1lIGFjdHJlc3MgZm9yIHlvdXIKICAgICAgICAgICAgICAgICAgICBjb21wYW5pb24uIENydWVsIGFuZCBtaXNlcmFibGUgd2FzIHRoZSB3YXkgaW4gd2hpY2ggeW91IGxlZCB5b3VyIHNvbGRpZXJzIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgdG93bnM7IHNoYW1lZnVsIHdhcyB0aGUgcGlsbGFnZXIgaW4gZXZlcnkgY2l0eSwgb2YgZ29sZCBhbmQgc2lsdmVyLCBhbmQKICAgICAgICAgICAgICAgICAgICBhYm92ZSBhbGwsIG9mIHdpbmUuIEFuZCBiZXNpZGVzIGFsbCB0aGlzLCB3aGlsZSBDYWVzYXIga25ldyBub3RoaW5nIGFib3V0IGl0LCBhcwogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjI1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMjU2Ij5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCBBbnRvbml1cywgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAga2luZG5lc3Mgb2YgQ2Flc2FyJ3MgZnJpZW5kcywgd2FzIGFwcG9pbnRlZCBoaXMgbWFzdGVyIG9mIHRoZSBob3JzZS4gVGhlbiBoZQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhhdCB5b3UgY291bGQgbGl2ZSB3aXRoIEhpcHBpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIGlzIGEgcGxheSBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSBIaXBwaWEsIGFzIGRlcml2ZWQgZnJvbSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5pKC9wcG9zPC9mb3JlaWduPiwgYQogICAgICAgICAgICAgICAgICAgICAgICBob3JzZS48L25vdGU+IGJ5IHZpcnR1ZSBvZiBoaXMgb2ZmaWNlLCBhbmQgdGhhdCBoZSBtaWdodCBnaXZlIGhvcnNlcyB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlcmUgdGhlIHByb3BlcnR5IG9mIHRoZSBzdGF0ZSB0byBTZXJnaXVzIHRoZSBidWZmb29uLiBBdCB0aGF0IHRpbWUgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZWxlY3RlZCBmb3IgaGltc2VsZiB0byBsaXZlIGluLCBub3QgdGhlIGhvdXNlIHdoaWNoIGhlIG5vdyBkaXNob25vcnMsIGJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgb2YgTWFyY3VzIFBpc28uIFdoeSBuZWVkIEkgbWVudGlvbiBoaXMgZGVjcmVlcywgaGlzIHJvYmJlcmllcywgdGhlIHBvc3Nlc3Npb25zCiAgICAgICAgICAgICAgICAgICAgb2YgaW5oZXJpdGFuY2VzIHdoaWNoIHdlcmUgZ2l2ZW4gaGltLCBhbmQgdGhvc2UgdG9vIHdoaWNoIHdlcmUgc2VpemVkIGJ5IGhpbT8KICAgICAgICAgICAgICAgICAgICBXYW50IGNvbXBlbGxlZCBoaW07IGhlIGRpZCBub3Qga25vdyB3aGVyZSB0byB0dXJuLiBUaGF0IGdyZWF0IGluaGVyaXRhbmNlIGZyb20KICAgICAgICAgICAgICAgICAgICBMdWNpdXMgUnVicml1cywgYW5kIHRoYXQgb3RoZXIgZnJvbSBMdWNpdXMgVHVyc2VsaXVzLCBoYWQgbm90IHlldCBjb21lIHRvIGhpbS4KICAgICAgICAgICAgICAgICAgICBIZSBoYWQgbm90IHlldCBzdWNjZWVkZWQgYXMgYW4gdW5leHBlY3RlZCBoZWlyIHRvIHRoZSBwbGFjZSBvZiBDbmFldXMgUG9tcGVpdXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIG1hbnkgb3RoZXJzIHdobyB3ZXJlIGFic2VudC4gSGUgd2FzIGZvcmNlZCB0byBsaXZlIGxpa2UgYSByb2JiZXIsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgYmV5b25kIHdoYXQgaGUgY291bGQgcGx1bmRlciBmcm9tIG90aGVycy4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+aSgvcHBvczwvZm9yZWlnbj4sIGEKICAgICAgICAgICAgICAgICAgICAgICAgaG9yc2UuPC90cmFuc2xhdGlvbj4="
translation['2.25.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgd2Ugd2lsbCBzYXkgbm90aGluZyBvZiB0aGVzZSB0aGluZ3MsIHdoaWNoIGFyZQogICAgICAgICAgICAgICAgICAgIGFjdHMgb2YgYSBtb3JlIGhhcmR5IHNvcnQgb2YgdmlsbGFpbnkuIExldCB1cyBzcGVhayByYXRoZXIgb2YgaGlzIG1lYW5lcgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9ucyBvZiB3b3J0aGxlc3NuZXNzLiBZb3UsIHdpdGggdGhvc2UgamF3cyBvZiB5b3VycywgYW5kIHRob3NlIHNpZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgeW91cnMsIGFuZCB0aGF0IHN0cmVuZ3RoIG9mIGJvZHkgc3VpdGVkIHRvIGEgZ2xhZGlhdG9yLCBkcmFuayBzdWNoIHF1YW50aXRpZXMgb2YKICAgICAgICAgICAgICAgICAgICB3aW5lIGF0IHRoZSBtYXJyaWFnZSBvZiBIaXBwaWEsIHRoYXQgeW91IHdlcmUgZm9yY2VkIHRvIHZvbWl0IHRoZSBuZXh0IGRheSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBzaWdodCBvZiB0aGUgUm9tYW4gcGVvcGxlLiBPIGFjdGlvbiBkaXNncmFjZWZ1bCBub3QgbWVyZWx5IHRvIHNlZSwgYnV0IGV2ZW4KICAgICAgICAgICAgICAgICAgICB0byBoZWFyIG9mISBJZiB0aGlzIGhhZCBoYXBwZW5lZCB0byB5b3UgYXQgc3VwcGVyIGFtaWQgdGhvc2UgdmFzdCBkcmlua2luZy1jdXBzCiAgICAgICAgICAgICAgICAgICAgb2YgeW91cnMsIHdobyB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IGl0IHNjYW5kYWxvdXM/IEJ1dCBpbiBhbiBhc3NlbWJseSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGUsIGEgbWFuIGhvbGRpbmcgYSBwdWJsaWMgb2ZmaWNlLCBhIG1hc3RlciBvZiB0aGUgaG9yc2UsIHRvIHdob20gaXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gZGlzZ3JhY2VmdWwgZXZlbiB0byBiZWxjaCwgdm9taXRpbmcgZmlsbGVkIGhpcyBvd24gYm9zb20gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIHRyaWJ1bmFsIHdpdGggZnJhZ21lbnRzIG9mIHdoYXQgaGUgaGFkIGJlZW4gZWF0aW5nIHJlZWtpbmcgd2l0aCB3aW5lLiBCdXQKICAgICAgICAgICAgICAgICAgICBoZSBoaW1zZWxmIGNvbmZlc3NlcyB0aGlzIGFtb25nIGhpcyBvdGhlciBkaXNncmFjZWZ1bCBhY3RzLiBMZXQgdXMgcHJvY2VlZCB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBtb3JlIHNwbGVuZGlkIG9mZmVuc2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.26.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhciBjYW1lIGJhY2sgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjI1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMjU2Ij5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSwgYXMgaGUgc2VlbWVkIGF0IGxlYXN0IHRvIGhpbXNlbGY7IGJ1dCBpbiBteSBvcGluaW9uIG5vIG9uZSBjYW4gYmUKICAgICAgICAgICAgICAgICAgICBmb3J0dW5hdGUgd2hvIGlzIHVuZm9ydHVuYXRlIGZvciB0aGUgcmVwdWJsaWMuIFRoZSBzcGVhciB3YXMgc2V0IHVwIGluIGZyb250IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlbXBsZSBvZiBKdXBpdGVyIFN0YXRvciwgYW5kIHRoZSBwcm9wZXJ0eSBvZiBDbmFldXMgUG9tcGVpdXMKICAgICAgICAgICAgICAgICAgICBNYWdudXPigJQobWlzZXJhYmxlIHRoYXQgSSBhbSwgZm9yIGV2ZW4gbm93IHRoYXQgbXkgdGVhcnMgaGF2ZSBjZWFzZWQgdG8KICAgICAgICAgICAgICAgICAgICBmbG93LCBteSBncmllZiByZW1haW5zIGRlZXBseSBpbXBsYW50ZWQgaW4gbXkgaGVhcnQpLOKAlHRoZSBwcm9wZXJ0eSwgSQogICAgICAgICAgICAgICAgICAgIHNheSwgb2YgQ25hZXVzIFBvbXBlaXVzIHRoZSBHcmVhdCB3YXMgc3VibWl0dGVkIHRvIHRoZSBwaXRpbGVzcyB2b2ljZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhdWN0aW9uZWVyLiBPbiB0aGF0IG9uZSBvY2Nhc2lvbiB0aGUgc3RhdGUgZm9yZ290IGl0cyBzbGF2ZXJ5LCBhbmQgZ3JvYW5lZAogICAgICAgICAgICAgICAgICAgIGFsb3VkOyBhbmQgdGhvdWdoIG1lbidzIG1pbmRzIHdlcmUgZW5zbGF2ZWQsIGFzIGV2ZXJ5IHRoaW5nIHdhcyBrZXB0IHVuZGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgZmVhciwgc3RpbGwgdGhlIGdyb2FucyBvZiB0aGUgUm9tYW4gcGVvcGxlIHdlcmUgZnJlZS4gV2hpbGUgYWxsIG1lbiB3ZXJlIHdhaXRpbmcKICAgICAgICAgICAgICAgICAgICB0byBzZWUgd2hvIHdvdWxkIGJlIHNvIGltcGlvdXMsIHdobyB3b3VsZCBiZSBzbyBtYWQsIHdobyB3b3VsZCBiZSBzbyBkZWNsYXJlZCBhbgogICAgICAgICAgICAgICAgICAgIGVuZW15IHRvIGdvZHMgYW5kIHRvIG1lbiBhcyB0byBkYXJlIHRvIG1peCBoaW1zZWxmIHVwIHdpdGggdGhhdCB3aWNrZWQgYXVjdGlvbiwKICAgICAgICAgICAgICAgICAgICBubyBvbmUgd2FzIGZvdW5kIGV4Y2VwdCBBbnRvbml1cywgZXZlbiB0aG91Z2ggdGhlcmUgd2VyZSBwbGVudHkgb2YgbWVuIGNvbGxlY3RlZAogICAgICAgICAgICAgICAgICAgIHJvdW5kIHRoYXQgc3BlYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIGN1c3RvbSBvZiBlcmVjdGluZyBhIHNwZWFyIHdoZXJldmVyIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGF1Y3Rpb24gd2FzIGhlbGQgaXMgd2VsbCBrbm93bjsgaXQgaXMgc2FpZCB0byBoYXZlIGFyaXNlbiBmcm9tIHRoZSBhbmNpZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHByYWN0aWNlIG9mIHNlbGxpbmcgdW5kZXIgYSBzcGVhciB0aGUgYm9vdHkgYWNxdWlyZWQgaW4gd2FyLjwvbm90ZT4gd2hvCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBkYXJlZCBhbnkgdGhpbmcgZWxzZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY1IiB1bml0PSJzZWN0aW9uIiAvPiBPbmUgbWFuCiAgICAgICAgICAgICAgICAgICAgYWxvbmUgd2FzIGZvdW5kIHRvIGRhcmUgdG8gZG8gdGhhdCB3aGljaCB0aGUgYXVkYWNpdHkgb2YgZXZlcnkgb25lIGVsc2UgaGFkCiAgICAgICAgICAgICAgICAgICAgc2hydW5rIGZyb20gYW5kIHNodWRkZXJlZCBhdC4gV2VyZSB5b3UsIHRoZW4sIHNlaXplZCB3aXRoIHN1Y2gKICAgICAgICAgICAgICAgICAgICBzdHVwaWRpdHks4oCUb3IsIEkgc2hvdWxkIHJhdGhlciBzYXksIHdpdGggc3VjaCBpbnNhbml0eSzigJRhcwogICAgICAgICAgICAgICAgICAgIG5vdCB0byBzZWUgdGhhdCBpZiB5b3UsIGJlaW5nIG9mIHRoZSByYW5rIGluIHdoaWNoIHlvdSB3ZXJlIGJvcm4sIGFjdGVkIGFzIGEKICAgICAgICAgICAgICAgICAgICBicm9rZXIgYXQgYWxsLCBhbmQgYWJvdmUgYWxsIGFzIGEgYnJva2VyIGluIHRoZSBjYXNlIG9mIFBvbXBlaXVzIHByb3BlcnR5LCB5b3UKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBleGVjcmF0ZWQgYW5kIGhhdGVkIGJ5IHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGF0IGFsbCBnb2RzIGFuZCBhbGwgbWVuCiAgICAgICAgICAgICAgICAgICAgbXVzdCBhdCBvbmNlIGJlY29tZSBhbmQgZm9yIGV2ZXIgY29udGludWUgaG9zdGlsZSB0byB5b3U/IEJ1dCB3aXRoIHdoYXQgdmlvbGVuY2UKICAgICAgICAgICAgICAgICAgICBkaWQgdGhhdCBnbHV0dG9uIGltbWVkaWF0ZWx5IHByb2NlZWQgdG8gdGFrZSBwb3NzZXNzaW9uIG9mIHRoZSBwcm9wZXJ0eSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFuLCB0byB3aG9zZSB2YWxvciBpdCBoYWQgYmVlbiBvd2luZyB0aGF0IHRoZSBSb21hbiBwZW9wbGUgaGFkIGJlZW4gbW9yZQogICAgICAgICAgICAgICAgICAgIHRlcnJpYmxlIHRvIGZvcmVpZ24gbmF0aW9ucywgd2hpbGUgaGlzIGp1c3RpY2UgaGFkIG1hZGUgaXQgZGVhcmVyIHRvIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIyNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjI1NiI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBmb3J0dW5hdGUsIGFzIGhlIHNlZW1lZCBhdCBsZWFzdCB0byBoaW1zZWxmOyBidXQgaW4gbXkgb3BpbmlvbiBubyBvbmUgY2FuIGJlCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuYXRlIHdobyBpcyB1bmZvcnR1bmF0ZSBmb3IgdGhlIHJlcHVibGljLiBUaGUgc3BlYXIgd2FzIHNldCB1cCBpbiBmcm9udCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB0ZW1wbGUgb2YgSnVwaXRlciBTdGF0b3IsIGFuZCB0aGUgcHJvcGVydHkgb2YgQ25hZXVzIFBvbXBlaXVzCiAgICAgICAgICAgICAgICAgICAgTWFnbnVz4oCUKG1pc2VyYWJsZSB0aGF0IEkgYW0sIGZvciBldmVuIG5vdyB0aGF0IG15IHRlYXJzIGhhdmUgY2Vhc2VkIHRvCiAgICAgICAgICAgICAgICAgICAgZmxvdywgbXkgZ3JpZWYgcmVtYWlucyBkZWVwbHkgaW1wbGFudGVkIGluIG15IGhlYXJ0KSzigJR0aGUgcHJvcGVydHksIEkKICAgICAgICAgICAgICAgICAgICBzYXksIG9mIENuYWV1cyBQb21wZWl1cyB0aGUgR3JlYXQgd2FzIHN1Ym1pdHRlZCB0byB0aGUgcGl0aWxlc3Mgdm9pY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYXVjdGlvbmVlci4gT24gdGhhdCBvbmUgb2NjYXNpb24gdGhlIHN0YXRlIGZvcmdvdCBpdHMgc2xhdmVyeSwgYW5kIGdyb2FuZWQKICAgICAgICAgICAgICAgICAgICBhbG91ZDsgYW5kIHRob3VnaCBtZW4ncyBtaW5kcyB3ZXJlIGVuc2xhdmVkLCBhcyBldmVyeSB0aGluZyB3YXMga2VwdCB1bmRlciBieQogICAgICAgICAgICAgICAgICAgIGZlYXIsIHN0aWxsIHRoZSBncm9hbnMgb2YgdGhlIFJvbWFuIHBlb3BsZSB3ZXJlIGZyZWUuIFdoaWxlIGFsbCBtZW4gd2VyZSB3YWl0aW5nCiAgICAgICAgICAgICAgICAgICAgdG8gc2VlIHdobyB3b3VsZCBiZSBzbyBpbXBpb3VzLCB3aG8gd291bGQgYmUgc28gbWFkLCB3aG8gd291bGQgYmUgc28gZGVjbGFyZWQgYW4KICAgICAgICAgICAgICAgICAgICBlbmVteSB0byBnb2RzIGFuZCB0byBtZW4gYXMgdG8gZGFyZSB0byBtaXggaGltc2VsZiB1cCB3aXRoIHRoYXQgd2lja2VkIGF1Y3Rpb24sCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIHdhcyBmb3VuZCBleGNlcHQgQW50b25pdXMsIGV2ZW4gdGhvdWdoIHRoZXJlIHdlcmUgcGxlbnR5IG9mIG1lbiBjb2xsZWN0ZWQKICAgICAgICAgICAgICAgICAgICByb3VuZCB0aGF0IHNwZWFyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBjdXN0b20gb2YgZXJlY3RpbmcgYSBzcGVhciB3aGVyZXZlciBhbgogICAgICAgICAgICAgICAgICAgICAgICBhdWN0aW9uIHdhcyBoZWxkIGlzIHdlbGwga25vd247IGl0IGlzIHNhaWQgdG8gaGF2ZSBhcmlzZW4gZnJvbSB0aGUgYW5jaWVudAogICAgICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSBvZiBzZWxsaW5nIHVuZGVyIGEgc3BlYXIgdGhlIGJvb3R5IGFjcXVpcmVkIGluIHdhci48L25vdGU+IHdobwogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgZGFyZWQgYW55IHRoaW5nIGVsc2UuIDwvdHJhbnNsYXRpb24+"
translation['2.26.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz4gT25lIG1hbgogICAgICAgICAgICAgICAgICAgIGFsb25lIHdhcyBmb3VuZCB0byBkYXJlIHRvIGRvIHRoYXQgd2hpY2ggdGhlIGF1ZGFjaXR5IG9mIGV2ZXJ5IG9uZSBlbHNlIGhhZAogICAgICAgICAgICAgICAgICAgIHNocnVuayBmcm9tIGFuZCBzaHVkZGVyZWQgYXQuIFdlcmUgeW91LCB0aGVuLCBzZWl6ZWQgd2l0aCBzdWNoCiAgICAgICAgICAgICAgICAgICAgc3R1cGlkaXR5LOKAlG9yLCBJIHNob3VsZCByYXRoZXIgc2F5LCB3aXRoIHN1Y2ggaW5zYW5pdHks4oCUYXMKICAgICAgICAgICAgICAgICAgICBub3QgdG8gc2VlIHRoYXQgaWYgeW91LCBiZWluZyBvZiB0aGUgcmFuayBpbiB3aGljaCB5b3Ugd2VyZSBib3JuLCBhY3RlZCBhcyBhCiAgICAgICAgICAgICAgICAgICAgYnJva2VyIGF0IGFsbCwgYW5kIGFib3ZlIGFsbCBhcyBhIGJyb2tlciBpbiB0aGUgY2FzZSBvZiBQb21wZWl1cyBwcm9wZXJ0eSwgeW91CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgZXhlY3JhdGVkIGFuZCBoYXRlZCBieSB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgdGhhdCBhbGwgZ29kcyBhbmQgYWxsIG1lbgogICAgICAgICAgICAgICAgICAgIG11c3QgYXQgb25jZSBiZWNvbWUgYW5kIGZvciBldmVyIGNvbnRpbnVlIGhvc3RpbGUgdG8geW91PyBCdXQgd2l0aCB3aGF0IHZpb2xlbmNlCiAgICAgICAgICAgICAgICAgICAgZGlkIHRoYXQgZ2x1dHRvbiBpbW1lZGlhdGVseSBwcm9jZWVkIHRvIHRha2UgcG9zc2Vzc2lvbiBvZiB0aGUgcHJvcGVydHkgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIG1hbiwgdG8gd2hvc2UgdmFsb3IgaXQgaGFkIGJlZW4gb3dpbmcgdGhhdCB0aGUgUm9tYW4gcGVvcGxlIGhhZCBiZWVuIG1vcmUKICAgICAgICAgICAgICAgICAgICB0ZXJyaWJsZSB0byBmb3JlaWduIG5hdGlvbnMsIHdoaWxlIGhpcyBqdXN0aWNlIGhhZCBtYWRlIGl0IGRlYXJlciB0byB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4sIHRoZXJlZm9yZSwgdGhpcyBmZWxsb3cgaGFkIGJlZ3VuIHRvIHdhbGxvdyBpbiB0aGUgdHJlYXN1cmVzIG9mIHRoYXQgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBtYW4sIGhlIGJlZ2FuIHRvIGV4dWx0IGxpa2UgYSBidWZmb29uIGluIGEgcGxheSwgd2hvIGhhcyBsYXRlbHkgYmVlbiBhIGJlZ2dhciwKICAgICAgICAgICAgICAgICAgICBhbmQgaGFzIGJlY29tZSBzdWRkZW5seSByaWNoLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjYiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCwgYXMgc29tZQogICAgICAgICAgICAgICAgICAgIHBvZXQgb3Igb3RoZXIgc2F5cyzigJQ8cXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsPuKAnElsbC1nb3R0ZW4gZ2FpbnMgY29tZSBxdWlja2x5IHRvIGFuIGVuZC7igJ08L2w+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.27.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCBhcyBzb21lCiAgICAgICAgICAgICAgICAgICAgcG9ldCBvciBvdGhlciBzYXlzLOKAlDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPuKAnElsbC1nb3R0ZW4gZ2FpbnMgY29tZSBxdWlja2x5IHRvIGFuIGVuZC7igJ08L2w+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcSWxsLWdvdHRlbiBnYWlucyBjb21lIHF1aWNrbHkgdG8gYW4gZW5kLuKAnTwvbD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIGFuIGluY3JlZGlibGUgdGhpbmcsIGFuZCBhbG1vc3QgYSBtaXJhY2xlLCBob3cgaGUgaW4gYSBmZXcsIG5vdCBtb250aHMsIGJ1dAogICAgICAgICAgICAgICAgICAgIGRheXMsIHNxdWFuZGVyZWQgYWxsIHRoYXQgdmFzdCB3ZWFsdGguIFRoZXJlIHdhcyBhbiBpbW1lbnNlIHF1YW50aXR5IG9mIHdpbmUsIGFuCiAgICAgICAgICAgICAgICAgICAgZXhjZXNzaXZlIGFidW5kYW5jZSBvZiB2ZXJ5IHZhbHVhYmxlIHBsYXRlLCBtdWNoIHByZWNpb3VzIGFwcGFyZWwsIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdGllcyBvZiBzcGxlbmRpZCBmdXJuaXR1cmUsIGFuZCBvdGhlciBtYWduaWZpY2VudCB0aGluZ3MgaW4gbWFueSBwbGFjZXMsCiAgICAgICAgICAgICAgICAgICAgc3VjaCBhcyBvbmUgd2FzIGxpa2VseSB0byBzZWUgYmVsb25naW5nIHRvIGEgbWFuIHdobyB3YXMgbm90IGluZGVlZCBsdXh1cmlvdXMKICAgICAgICAgICAgICAgICAgICBidXQgd2hvIHdhcyB2ZXJ5IHdlYWx0aHkuIE9mIGFsbCB0aGlzIGluIGEgZmV3IGRheXMgdGhlcmUgd2FzIG5vdGhpbmcgbGVmdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY3IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IENoYXJ5YmRpcyB3YXMgZXZlciBzbyB2b3JhY2lvdXM/CiAgICAgICAgICAgICAgICAgICAgQ2hhcnliZGlzLCBkbyBJIHNheT8gQ2hhcnliZGlzLCBpZiBzaGUgZXhpc3RlZCBhdCBhbGwsIHdhcyBvbmx5IG9uZSBhbmltYWwuIFRoZQogICAgICAgICAgICAgICAgICAgIG9jZWFuIEkgc3dlYXIgbW9zdCBzb2xlbW5seSwgYXBwZWFycyBzY2FyY2VseSBjYXBhYmxlIG9mIGhhdmluZyBzd2FsbG93ZWQgdXAKICAgICAgICAgICAgICAgICAgICBzdWNoIG51bWJlcnMgb2YgdGhpbmdzIHNvIHdpZGVseSBzY2F0dGVyZWQgYW5kIGRpc3RyaWJ1dGVkIGluIHN1Y2ggZGlmZmVyZW50CiAgICAgICAgICAgICAgICAgICAgcGxhY2VzIHdpdGggc3VjaCByYXBpZGl0eS4gTm8gdGhpbmcgd2FzIHNodXQgdXAsIG5vdGhpbmcgc2VhbGVkIHVwLCBubyBsaXN0IHdhcwogICAgICAgICAgICAgICAgICAgIG1hZGUgb2YgYW55IHRoaW5nLiBXaG9sZSBzdG9yZWhvdXNlcyB3ZXJlIGFiYW5kb25lZCB0byB0aGUgbW9zdCB3b3J0aGxlc3Mgb2YgbWVuCiAgICAgICAgICAgICAgICAgICAgQWN0b3JzIHNlaXplZCBvbiB0aGlzLCBhY3RyZXNzZXMgb24gdGhhdDsgdGhlIGhvdXNlIHdhcyBjcm93ZGVkIHdpdGggZ2FtYmxlcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGZ1bGwgb2YgZHJ1bmtlbiBtZW47IHBlb3BsZSB3ZXJlIGRyaW5raW5nIGFsbCBkYXksIGFuZCB0aGF0IHRvbyBpbiBtYW55CiAgICAgICAgICAgICAgICAgICAgcGxhY2VzOyB0aGVyZSB3ZXJlIGFkZGVkIHRvIGFsbCB0aGlzIGV4cGVuc2UgKGZvciB0aGlzIGZlbGxvdyB3YXMgbm90IGludmFyaWFibHkKICAgICAgICAgICAgICAgICAgICBmb3J0dW5hdGUpIGhlYXZ5IGdhbWJsaW5nIGxvc3Nlcy4gWW91IG1pZ2h0IHNlZSBpbiB0aGUgY2VsbGFycyBvZiB0aGUgc2xhdmVzLAogICAgICAgICAgICAgICAgICAgIGNvdWNoZXMgY292ZXJlZCB3aXRoIHRoZSBtb3N0IHJpY2hseSBlbWJyb2lkZXJlZCBjb3VudGVycGFuZXMgb2YgQ25hZXVzCiAgICAgICAgICAgICAgICAgICAgUG9tcGVpdXMuIFdvbmRlciBub3QsIHRoZW4sIHRoYXQgYWxsIHRoZXNlIHRoaW5ncyB3ZXJlIHNvIHNvb24gY29uc3VtZWQuIFN1Y2gKICAgICAgICAgICAgICAgICAgICBwcm9mbGlnYWN5IGFzIHRoYXQgY291bGQgaGF2ZSBkZXZvdXJlZCBub3Qgb25seSB0aGUgcGF0cmltb255IG9mIG9uZSBpbmRpdmlkdWFsLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgYW1wbGUgaXQgbWlnaHQgaGF2ZSBiZWVuIChhcyBpbmRlZWQgaGlzIHdhcyksIGJ1dCB3aG9sZSBjaXRpZXMgYW5kCiAgICAgICAgICAgICAgICAgICAga2luZ2RvbXMuIEFuZCB0aGVuIGhpcyBob3VzZXMgYW5kIGdhcmRlbnMhIDxtaWxlc3RvbmUgbj0iNjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.27.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBDaGFyeWJkaXMgd2FzIGV2ZXIgc28gdm9yYWNpb3VzPwogICAgICAgICAgICAgICAgICAgIENoYXJ5YmRpcywgZG8gSSBzYXk/IENoYXJ5YmRpcywgaWYgc2hlIGV4aXN0ZWQgYXQgYWxsLCB3YXMgb25seSBvbmUgYW5pbWFsLiBUaGUKICAgICAgICAgICAgICAgICAgICBvY2VhbiBJIHN3ZWFyIG1vc3Qgc29sZW1ubHksIGFwcGVhcnMgc2NhcmNlbHkgY2FwYWJsZSBvZiBoYXZpbmcgc3dhbGxvd2VkIHVwCiAgICAgICAgICAgICAgICAgICAgc3VjaCBudW1iZXJzIG9mIHRoaW5ncyBzbyB3aWRlbHkgc2NhdHRlcmVkIGFuZCBkaXN0cmlidXRlZCBpbiBzdWNoIGRpZmZlcmVudAogICAgICAgICAgICAgICAgICAgIHBsYWNlcyB3aXRoIHN1Y2ggcmFwaWRpdHkuIE5vIHRoaW5nIHdhcyBzaHV0IHVwLCBub3RoaW5nIHNlYWxlZCB1cCwgbm8gbGlzdCB3YXMKICAgICAgICAgICAgICAgICAgICBtYWRlIG9mIGFueSB0aGluZy4gV2hvbGUgc3RvcmVob3VzZXMgd2VyZSBhYmFuZG9uZWQgdG8gdGhlIG1vc3Qgd29ydGhsZXNzIG9mIG1lbgogICAgICAgICAgICAgICAgICAgIEFjdG9ycyBzZWl6ZWQgb24gdGhpcywgYWN0cmVzc2VzIG9uIHRoYXQ7IHRoZSBob3VzZSB3YXMgY3Jvd2RlZCB3aXRoIGdhbWJsZXJzLAogICAgICAgICAgICAgICAgICAgIGFuZCBmdWxsIG9mIGRydW5rZW4gbWVuOyBwZW9wbGUgd2VyZSBkcmlua2luZyBhbGwgZGF5LCBhbmQgdGhhdCB0b28gaW4gbWFueQogICAgICAgICAgICAgICAgICAgIHBsYWNlczsgdGhlcmUgd2VyZSBhZGRlZCB0byBhbGwgdGhpcyBleHBlbnNlIChmb3IgdGhpcyBmZWxsb3cgd2FzIG5vdCBpbnZhcmlhYmx5CiAgICAgICAgICAgICAgICAgICAgZm9ydHVuYXRlKSBoZWF2eSBnYW1ibGluZyBsb3NzZXMuIFlvdSBtaWdodCBzZWUgaW4gdGhlIGNlbGxhcnMgb2YgdGhlIHNsYXZlcywKICAgICAgICAgICAgICAgICAgICBjb3VjaGVzIGNvdmVyZWQgd2l0aCB0aGUgbW9zdCByaWNobHkgZW1icm9pZGVyZWQgY291bnRlcnBhbmVzIG9mIENuYWV1cwogICAgICAgICAgICAgICAgICAgIFBvbXBlaXVzLiBXb25kZXIgbm90LCB0aGVuLCB0aGF0IGFsbCB0aGVzZSB0aGluZ3Mgd2VyZSBzbyBzb29uIGNvbnN1bWVkLiBTdWNoCiAgICAgICAgICAgICAgICAgICAgcHJvZmxpZ2FjeSBhcyB0aGF0IGNvdWxkIGhhdmUgZGV2b3VyZWQgbm90IG9ubHkgdGhlIHBhdHJpbW9ueSBvZiBvbmUgaW5kaXZpZHVhbCwKICAgICAgICAgICAgICAgICAgICBob3dldmVyIGFtcGxlIGl0IG1pZ2h0IGhhdmUgYmVlbiAoYXMgaW5kZWVkIGhpcyB3YXMpLCBidXQgd2hvbGUgY2l0aWVzIGFuZAogICAgICAgICAgICAgICAgICAgIGtpbmdkb21zLiBBbmQgdGhlbiBoaXMgaG91c2VzIGFuZCBnYXJkZW5zISA8L3RyYW5zbGF0aW9uPg=="
translation['2.27.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IE9oIHRoZSBjcnVlbCBhdWRhY2l0eSEgRGlkIHlvdSBkYXJlIHRvIGVudGVyIGludG8gdGhhdCBob3VzZT8gRGlkIHlvdSBkYXJlIHRvCiAgICAgICAgICAgICAgICAgICAgY3Jvc3MgdGhhdCBtb3N0IHNhY3JlZCB0aHJlc2hvbGQ/IGFuZCB0byBzaG93IHlvdXIgbW9zdCBwcm9mbGlnYXRlIGNvdW50ZW5hbmNlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGhvdXNlaG9sZCBnb2RzIHdobyBwcm90ZWN0IHRoYXQgYWJvZGU/IEEgaG91c2Ugd2hpY2ggZm9yIGEgbG9uZyB0aW1lIG5vCiAgICAgICAgICAgICAgICAgICAgb25lIGNvdWxkIGJlaG9sZCwgbm8gb25lIGNvdWxkIHBhc3MgYnkgd2l0aG91dCB0ZWFycyEgQXJlIHlvdSBub3QgYXNoYW1lZCB0bwogICAgICAgICAgICAgICAgICAgIGR3ZWxsIHNvIGxvbmcgaW4gdGhhdCBob3VzZT8gb25lIGluIHdoaWNoLCBzdHVwaWQgYW5kIGlnbm9yYW50IGFzIHlvdSBhcmUsIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBzZWUgbm90aGluZyB3aGljaCBpcyBub3QgcGFpbmZ1bCB0byB5b3UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4geW91IGJlaG9sZCB0aG9zZSBiZWFrcyBvZiBzaGlwcyBpbiB0aGUgdmVzdGlidWxlLCBhbmQgdGhvc2Ugd2FybGlrZQogICAgICAgICAgICAgICAgICAgIHRyb3BoaWVzLCBkbyB5b3UgZmFuY3kgdGhhdCB5b3UgYXJlIGVudGVyaW5nIGludG8gYSBob3VzZSB3aGljaCBiZWxvbmdzIHRvIHlvdT8KICAgICAgICAgICAgICAgICAgICBJdCBpcyBpbXBvc3NpYmxlLiBBbHRob3VnaCB5b3UgYXJlIGRldm9pZCBvZiBhbGwgc2Vuc2UgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgIGZlZWxpbmcs4oCUYSBpbiB0cnV0aCB5b3UgYXJlLOKAlHN0aWxsIHlvdSBhcmUgYWNxdWFpbnRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYsIGFuZCB3aXRoIHlvdXIgdHJvcGhpZXMsIGFuZCB3aXRoIHlvdXIgZnJpZW5kcy4gTm9yIGRvIEkgYmVsaWV2ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91LCBlaXRoZXIgd2FraW5nIG9yIHNsZWVwaW5nLCBjYW4gZXZlciBhY3Qgd2l0aCBxdWlldCBzZW5zZS4gSXQgaXMgaW1wb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0LCB3ZXJlIHlvdSBldmVyIHNvIGRydW5rIGFuIGZyYW50aWMs4oCUYXMgaW4gdHJ1dGggeW91CiAgICAgICAgICAgICAgICAgICAgYXJlLOKAlHdoZW4gdGhlIHJlY29sbGVjdGlvbiBvZiB0aGUgYXBwZWFyYW5jZSBvZiB0aGF0IGlsbHVzdHJpb3VzIG1hbgogICAgICAgICAgICAgICAgICAgIGNvbWVzIGFjcm9zcyB5b3UsIHlvdSBzaG91bGQgYmUgcm91c2VkIGZyb20gc2xlZXAgYnkgeW91ciBmZWFycywgYW5kIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgc3RpcnJlZCB1cCB0byBtYWRuZXNzIGlmIGF3YWtlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjkiIHVuaXQ9InNlY3Rpb24iIC8+IEkgcGl0eSBldmVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhbGxzIGFuZCB0aGUgcm9vbS4gRm9yIHdoYXQgaGFkIHRoYXQgaG91c2UgZXZlciBiZWhlbGQgZXhjZXB0IHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbW9kZXN0LCBleGNlcHQgd2hhdCBwcm9jZWVkZWQgZnJvbSB0aGUgcHVyZXN0IHByaW5jaXBsZXMgYW5kIGZyb20gdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBwcmFjdGljZT8gRm9yIHRoYXQgbWFuIHdhcywgTyBjb25zY3JpcHQgZmF0aGVycywgYXMgeW91IHlvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICBrbm93LCBub3Qgb25seSBpbGx1c3RyaW91cyBhYnJvYWQsIGJ1dCBhbHNvIGFkbWlyYWJsZSBhdCBob21lOyBhbmQgbm90IG1vcmUKICAgICAgICAgICAgICAgICAgICBwcmFpc2V3b3J0aHkgZm9yIGhpcyBleHBsb2l0cyBpbiBmb3JlaWduIGNvdW50cmllcywgdGhhbiBmb3IgaGlzIGRvbWVzdGljCiAgICAgICAgICAgICAgICAgICAgYXJyYW5nZW1lbnRzLiBOb3cgaW4gaGlzIGhvdXNlIGV2ZXJ5IGJlZGNoYW1iZXIgaXMgYSBicm90aGVsLCBhbmQgZXZlcnkKICAgICAgICAgICAgICAgICAgICBkaW5pbmdyb29tIGEgY29va3Nob3AuIEFsdGhvdWdoIGhlIGRlbmllcyB0aGlzOuKAlERvIG5vdCwgZG8gbm90IG1ha2UKICAgICAgICAgICAgICAgICAgICBpbnF1aXJpZXMuIEhlIGlzIGJlY29tZSBlY29ub21pYy4gSGUgZGVzaXJlZCB0aGF0IG1pc3RyZXNzIG9mIGhpcyB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB3aGF0ZXZlciBiZWxvbmdlZCB0byBoZXIsIGFjY29yZGluZyB0byB0aGUgbGF3cyBvZiB0aGUgVHdlbHZlCiAgICAgICAgICAgICAgICAgICAgVGFibGVzLiBIZSBoYXMgdGFrZW4gaGlzIGtleXMgZnJvbSBoZXIsIGFuZCB0dXJuZWQgaGVyIG91dCBvZiBkb29ycy4gV2hhdCBhCiAgICAgICAgICAgICAgICAgICAgd2VsbC10cmllZCBjaXRpemVuISBvZiB3aGF0IHByb3ZlZCB2aXJ0dWUgaXMgaGUhIHRoZSBtb3N0IGhvbm9yYWJsZSBwYXNzYWdlIGluCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgbGlmZSBpcyB0aGUgb25lIHdoZW4gaGUgZGl2b3JjZWQgaGltc2VsZiBmcm9tIHRoaXMgYWN0cmVzcy4gPG1pbGVzdG9uZSBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.28.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBwaXR5IGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGUgd2FsbHMgYW5kIHRoZSByb29tLiBGb3Igd2hhdCBoYWQgdGhhdCBob3VzZSBldmVyIGJlaGVsZCBleGNlcHQgd2hhdCB3YXMKICAgICAgICAgICAgICAgICAgICBtb2Rlc3QsIGV4Y2VwdCB3aGF0IHByb2NlZWRlZCBmcm9tIHRoZSBwdXJlc3QgcHJpbmNpcGxlcyBhbmQgZnJvbSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIHByYWN0aWNlPyBGb3IgdGhhdCBtYW4gd2FzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhcyB5b3UgeW91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIGtub3csIG5vdCBvbmx5IGlsbHVzdHJpb3VzIGFicm9hZCwgYnV0IGFsc28gYWRtaXJhYmxlIGF0IGhvbWU7IGFuZCBub3QgbW9yZQogICAgICAgICAgICAgICAgICAgIHByYWlzZXdvcnRoeSBmb3IgaGlzIGV4cGxvaXRzIGluIGZvcmVpZ24gY291bnRyaWVzLCB0aGFuIGZvciBoaXMgZG9tZXN0aWMKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlbWVudHMuIE5vdyBpbiBoaXMgaG91c2UgZXZlcnkgYmVkY2hhbWJlciBpcyBhIGJyb3RoZWwsIGFuZCBldmVyeQogICAgICAgICAgICAgICAgICAgIGRpbmluZ3Jvb20gYSBjb29rc2hvcC4gQWx0aG91Z2ggaGUgZGVuaWVzIHRoaXM64oCURG8gbm90LCBkbyBub3QgbWFrZQogICAgICAgICAgICAgICAgICAgIGlucXVpcmllcy4gSGUgaXMgYmVjb21lIGVjb25vbWljLiBIZSBkZXNpcmVkIHRoYXQgbWlzdHJlc3Mgb2YgaGlzIHRvIHRha2UKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIHdoYXRldmVyIGJlbG9uZ2VkIHRvIGhlciwgYWNjb3JkaW5nIHRvIHRoZSBsYXdzIG9mIHRoZSBUd2VsdmUKICAgICAgICAgICAgICAgICAgICBUYWJsZXMuIEhlIGhhcyB0YWtlbiBoaXMga2V5cyBmcm9tIGhlciwgYW5kIHR1cm5lZCBoZXIgb3V0IG9mIGRvb3JzLiBXaGF0IGEKICAgICAgICAgICAgICAgICAgICB3ZWxsLXRyaWVkIGNpdGl6ZW4hIG9mIHdoYXQgcHJvdmVkIHZpcnR1ZSBpcyBoZSEgdGhlIG1vc3QgaG9ub3JhYmxlIHBhc3NhZ2UgaW4KICAgICAgICAgICAgICAgICAgICB3aG9zZSBsaWZlIGlzIHRoZSBvbmUgd2hlbiBoZSBkaXZvcmNlZCBoaW1zZWxmIGZyb20gdGhpcyBhY3RyZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.28.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGhvdyBjb25zdGFudGx5IGRvZXMgaGUgaGFycCBvbiB0aGUgZXhwcmVzc2lvbiDigJx0aGUgY29uc3VsCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMh4oCdIFRoaXMgYW1vdW50cyB0byBzYXkg4oCcdGhhdCBtb3N0IGRlYmF1Y2hlZAogICAgICAgICAgICAgICAgICAgIGNvbnN1bCzigJ0g4oCcdGhhdCBtb3N0IHdvcnRobGVzcyBvZiBtZW4sIHRoZSBjb25zdWwu4oCdCiAgICAgICAgICAgICAgICAgICAgRm9yIHdoYXQgZWxzZSBpcy4gQW50b25pdXM/IEZvciBpZiBhbnkgZGlnbml0eSB3ZXJlIGltcGxpZWQgdGhlIG5hbWUsIHRoZW4sIEkKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lLCB5b3VyIGdyYW5kZmF0aGVyIHdvdWxkIHNvbWV0aW1lIGhhdmUgY2FsbGVkIGhpbXNlbGYg4oCcdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsIEFudG9uaXVzLuKAnSBCdXQgaGUgbmV2ZXIgZGlkLiBNeSBjb2xsZWFndWUgdG9vLCB5b3VyIG93biB1bmNsZSwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGNhbGwgaGltc2VsZiBzby4gVW5sZXNzIHlvdSBhcmUgdGhlIG9ubHkgQW50b25pdXMuIEJ1dCBJIHBhc3Mgb3ZlcgogICAgICAgICAgICAgICAgICAgIHRob3NlIG9mZmVuc2VzIHdoaWNoIGhhdmUgbm8gcGVjdWxpYXIgY29ubmVjdGlvbiB3aXRoIHRoZSBwYXJ0IHlvdSB0b29rIGluCiAgICAgICAgICAgICAgICAgICAgaGFyYXNzaW5nIHRoZSByZXB1YmxpYzsgSSByZXR1cm4gdG8gdGhhdCBpbiB3aGljaCB5b3UgYm9yZSBzbyBwcmluY2lwYWwgYQogICAgICAgICAgICAgICAgICAgIHNoYXJlLOKAlHRoYXQgaXMsIHRvIHRoZSBjaXZpbCB3YXI7IGFuZCBpdCBpcyBtYWlubHkgb3dpbmcgdG8geW91IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBvcmlnaW5hdGVkLCBhbmQgYnJvdWdodCB0byBhIGhlYWQsIGFuZCBjYXJyaWVkIG9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.29.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRob3VnaCB5b3UgeW91cnNlbGYgdG9vayBubyBwZXJzb25hbCBzaGFyZSBpbiBpdCwgcGFydGx5IHRocm91Z2ggdGltaWRpdHksIHBhcnRseQogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggcHJvZmxpZ2FjeSwgeW91IGhhZCB0YXN0ZWQsIG9yIHJhdGhlciBoYWQgc3Vja2VkIGluLCB0aGUgYmxvb2Qgb2YKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnM6IHlvdSBoYWQgYmVlbiBpbiB0aGUgYmF0dGxlIG9mIFBoYXJzYWxpYSBhcyBhIGxlYWRlcjsgeW91IGhhZAogICAgICAgICAgICAgICAgICAgIHNsYWluIEx1Y2l1cyBEb21pdGl1cywgYSBtb3N0IGlsbHVzdHJpb3VzIGFuZCBoaWdoLWJvcm4gbWFuOyB5b3UgaGFkIHB1cnN1ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgcHV0IHRvIGRlYXRoIGluIHRoZSBtb3N0IGJhcmJhcm91cyBtYW5uZXIgbWFueSBtZW4gd2hvIGhhZCBlc2NhcGVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlLCBhbmQgd2hvbSBDYWVzYXIgd291bGQgcGVyaGFwcyBoYXZlIHNhdmVkLCBhcyBoZSBkaWQgc29tZSBvdGhlcnMuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGFmdGVyIGhhdmluZyBwZXJmb3JtZWQgdGhlc2UgZXhwbG9pdHMsIHdoYXQgd2FzIHRoZSByZWFzb24gd2h5IHlvdSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgZm9sbG93IENhZXNhciBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPjsgZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgIHdoZW4gc28gbGFyZ2UgYSBwb3J0aW9uIG9mIHRoZSB3YXIgd2FzIHN0aWxsIHJlbWFpbmluZz8gQW5kIGFjY29yZGluZ2x5LCB3aGF0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UgZGlkIHlvdSBvYnRhaW4gYWJvdXQgQ2Flc2FyJ3MgcGVyc29uIGFmdGVyIGhpcyByZXR1cm4gZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTI0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4/IFdoYXQgd2FzIHlvdXIgcmFuaz8gSGUgd2hvc2UgcXVhZXN0b3IKICAgICAgICAgICAgICAgICAgICB5b3UgaGFkIGJlZW4gd2hlbiBnZW5lcmFsLCB3aG9zZSBtYXN0ZXIgb2YgdGhlIGhvcnNlIHdoZW4gaGUgd2FzIGRpY3RhdG9yLCB0bwogICAgICAgICAgICAgICAgICAgIHdob20geW91IGhhZCBiZWVuIHRoZSBjaGllZiBjYXVzZSBvZiB3YXIsIHRoZSBjaGllZiBpbnN0aWdhdG9yIG9mIGNydWVsdHksIHRoZQogICAgICAgICAgICAgICAgICAgIHNoYXJlciBvZiBoaXMgcGx1bmRlciwgaGlzIHNvbiwgYXMgeW91IHlvdXJzZWxmIHNhaWQsIGJ5IGluaGVyaXRhbmNlLCBwcm9jZWVkZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdSBmb3IgdGhlIG1vbmV5IHdoaWNoIHlvdSBvd2VkIGZvciB0aGUgaG91c2UgYW5kIGdhcmRlbnMsIGFuZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgcHJvcGVydHkgd2hpY2ggeW91IGhhZCBib3VnaHQgYXQgdGhhdCBzYWxlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzIiIHVuaXQ9InNlY3Rpb24iIC8+IEF0IGZpcnN0IHlvdSBhbnN3ZXJlZCBmaWVyY2VseSBlbm91Z2g7IGFuZCB0aGF0IEkgbWF5IG5vdAogICAgICAgICAgICAgICAgICAgIGFwcGVhciBwcmVqdWRpY2VkIGFnYWluc3QgeW91IGluIGV2ZXJ5IHBhcnRpY3VsYXIsIHlvdSB1c2VkIGEgdG9sZXJhYmx5IGp1c3QgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSBhcmd1bWVudC4g4oCcV2hhdCBkb2VzIENhaXVzIENhZXNhciBkZW1hbmQgbW9uZXkgb2YgbWU/IHdoeQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoZSBkbyBzbywgYW55IG1vcmUgdGhhbiBJIHNob3VsZCBjbGFpbSBpdCBvZiBoaW0/IFdhcyBoZSB2aWN0b3Jpb3VzCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBteSBhc3Npc3RhbmNlPyBObzsgYW5kIGhlIG5ldmVyIGNvdWxkIGhhdmUgYmVlbi4gSXQgd2FzIEkgd2hvIHN1cHBsaWVkCiAgICAgICAgICAgICAgICAgICAgaGltIHdpdGggYSBwcmV0ZXh0IGZvciBjaXZpbCB3YXI7IGl0IHdhcyBJIHdobyBwcm9wb3NlZCBtaXNjaGlldm91cyBsYXdzOyBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBJIHdobyB0b29rIHVwIGFybXMgYWdhaW5zdCB0aGUgY29uc3VscyBhbmQgZ2VuZXJhbHMgb2YgdGhlIFJvbWFuIHBlb3BsZSwgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIGdvZHMgb2YgdGhlIGNvdW50cnksIGFnYWluc3QgaXRzIGFsdGFycyBhbmQgaGVhcnRocywgYWdhaW5zdCB0aGUgY291bnRyeQogICAgICAgICAgICAgICAgICAgIGl0c2VsZi4gSGFzIGhlIGNvbnF1ZXJlZCBmb3IgaGltc2VsZiBhbG9uZT8gV2h5IHNob3VsZCBub3QgdGhvc2UgbWVuIHdob3NlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIHdvcmsgdGhlIGFjaGlldmVtZW50IGlzLCBoYXZlIHRoZSBib290eSBhbHNvIGluIGNvbW1vbj/igJ0gWW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSBvbmx5IGNsYWltaW5nIHlvdXIgcmlnaHQsIGJ1dCB3aGF0IGhhZCB0aGF0IHRvIGRvIHdpdGggaXQ/IEhlIHdhcyB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIHBvd2VyZnVsIG9mIHRoZSB0d28uIDxtaWxlc3RvbmUgbj0iNzMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTI0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT47IGVzcGVjaWFsbHkKICAgICAgICAgICAgICAgICAgICB3aGVuIHNvIGxhcmdlIGEgcG9ydGlvbiBvZiB0aGUgd2FyIHdhcyBzdGlsbCByZW1haW5pbmc/IEFuZCBhY2NvcmRpbmdseSwgd2hhdAogICAgICAgICAgICAgICAgICAgIHBsYWNlIGRpZCB5b3Ugb2J0YWluIGFib3V0IENhZXNhcidzIHBlcnNvbiBhZnRlciBoaXMgcmV0dXJuIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+PyBXaGF0IHdhcyB5b3VyIHJhbms/IEhlIHdob3NlIHF1YWVzdG9yCiAgICAgICAgICAgICAgICAgICAgeW91IGhhZCBiZWVuIHdoZW4gZ2VuZXJhbCwgd2hvc2UgbWFzdGVyIG9mIHRoZSBob3JzZSB3aGVuIGhlIHdhcyBkaWN0YXRvciwgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHlvdSBoYWQgYmVlbiB0aGUgY2hpZWYgY2F1c2Ugb2Ygd2FyLCB0aGUgY2hpZWYgaW5zdGlnYXRvciBvZiBjcnVlbHR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBzaGFyZXIgb2YgaGlzIHBsdW5kZXIsIGhpcyBzb24sIGFzIHlvdSB5b3Vyc2VsZiBzYWlkLCBieSBpbmhlcml0YW5jZSwgcHJvY2VlZGVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB5b3UgZm9yIHRoZSBtb25leSB3aGljaCB5b3Ugb3dlZCBmb3IgdGhlIGhvdXNlIGFuZCBnYXJkZW5zLCBhbmQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIHByb3BlcnR5IHdoaWNoIHlvdSBoYWQgYm91Z2h0IGF0IHRoYXQgc2FsZS4gPC90cmFuc2xhdGlvbj4="
translation['2.29.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz4gQXQgZmlyc3QgeW91IGFuc3dlcmVkIGZpZXJjZWx5IGVub3VnaDsgYW5kIHRoYXQgSSBtYXkgbm90CiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHByZWp1ZGljZWQgYWdhaW5zdCB5b3UgaW4gZXZlcnkgcGFydGljdWxhciwgeW91IHVzZWQgYSB0b2xlcmFibHkganVzdCBhbmQKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmxlIGFyZ3VtZW50LiDigJxXaGF0IGRvZXMgQ2FpdXMgQ2Flc2FyIGRlbWFuZCBtb25leSBvZiBtZT8gd2h5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhlIGRvIHNvLCBhbnkgbW9yZSB0aGFuIEkgc2hvdWxkIGNsYWltIGl0IG9mIGhpbT8gV2FzIGhlIHZpY3RvcmlvdXMKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IG15IGFzc2lzdGFuY2U/IE5vOyBhbmQgaGUgbmV2ZXIgY291bGQgaGF2ZSBiZWVuLiBJdCB3YXMgSSB3aG8gc3VwcGxpZWQKICAgICAgICAgICAgICAgICAgICBoaW0gd2l0aCBhIHByZXRleHQgZm9yIGNpdmlsIHdhcjsgaXQgd2FzIEkgd2hvIHByb3Bvc2VkIG1pc2NoaWV2b3VzIGxhd3M7IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIEkgd2hvIHRvb2sgdXAgYXJtcyBhZ2FpbnN0IHRoZSBjb25zdWxzIGFuZCBnZW5lcmFscyBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBnb2RzIG9mIHRoZSBjb3VudHJ5LCBhZ2FpbnN0IGl0cyBhbHRhcnMgYW5kIGhlYXJ0aHMsIGFnYWluc3QgdGhlIGNvdW50cnkKICAgICAgICAgICAgICAgICAgICBpdHNlbGYuIEhhcyBoZSBjb25xdWVyZWQgZm9yIGhpbXNlbGYgYWxvbmU/IFdoeSBzaG91bGQgbm90IHRob3NlIG1lbiB3aG9zZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbiB3b3JrIHRoZSBhY2hpZXZlbWVudCBpcywgaGF2ZSB0aGUgYm9vdHkgYWxzbyBpbiBjb21tb24/4oCdIFlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgb25seSBjbGFpbWluZyB5b3VyIHJpZ2h0LCBidXQgd2hhdCBoYWQgdGhhdCB0byBkbyB3aXRoIGl0PyBIZSB3YXMgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBwb3dlcmZ1bCBvZiB0aGUgdHdvLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.29.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCBzdG9wcGluZyBhbGwgeW91ciBleHBvc3R1bGF0aW9ucywgaGUgc2VudCBoaXMgc29sZGllcnMgdG8geW91LCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIHN1cmV0aWVzOyB3aGVuIGFsbCBvbiBhIHN1ZGRlbiBvdXQgY2FtZSB0aGF0IHNwbGVuZGlkIGNhdGFsb2d1ZSBvZiB5b3Vycy4KICAgICAgICAgICAgICAgICAgICBIb3cgbWVuIGRpZCBsYXVnaCEgVGhhdCB0aGVyZSBzaG91bGQgYmUgc28gdmFzdCBhIGNhdGFsb2d1ZSwgdGhhdCB0aGVyZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBzdWNoIGEgbnVtZXJvdXMgYW5kIHZhcmlvdXMgbGlzdCBvZiBwb3NzZXNzaW9ucywgb2YgYWxsIG9mIHdoaWNoLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiBvZiBhIHBvcnRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNaXNlbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNaXNlbnVtIj5NaXNlbnVtPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBub3RoaW5nIHdoaWNoIHRoZSBtYW4gd2hvIHdhcyBwdXR0aW5nIHRoZW0gdXAgdG8gc2FsZSBjb3VsZCBjYWxsIGhpcwogICAgICAgICAgICAgICAgICAgIG93bi4gQW5kIHdoYXQgYSBtaXNlcmFibGUgc2lnaHQgd2FzIHRoZSBhdWN0aW9uLiBBIGxpdHRsZSBhcHBhcmVsIG9mIFBvbXBlaXVzJ3MsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgc3RhaW5lZDsgYSBmZXcgc2lsdmVyIHZlc3NlbHMgYmVsb25naW5nIHRvIHRoZSBzYW1lIG1hbiwgYWxsIGJhdHRlcmVkLAogICAgICAgICAgICAgICAgICAgIHNvbWUgc2xhdmVzIGluIHdyZXRjaGVkIGNvbmRpdGlvbjsgc28gdGhhdCB3ZSBncmlldmVkIHRoYXQgdGhlcmUgd2FzIGFueSB0aGluZwogICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyB0byBiZSBzZWVuIG9mIHRoZXNlIG1pc2VyYWJsZSByZWxpZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcyBhdWN0aW9uLCBob3dldmVyLCB0aGUgaGVpcnMgb2YgTHVjaXVzIFJ1YnJpdXMgcHJldmVudGVkIGZyb20gcHJvY2VlZGluZywKICAgICAgICAgICAgICAgICAgICBiZWluZyBhcm1lZCB3aXRoIGEgZGVjcmVlIG9mIENhZXNhciB0byB0aGF0IGVmZmVjdC4gVGhlIHNwZW5kdGhyaWZ0IHdhcwogICAgICAgICAgICAgICAgICAgIGVtYmFycmFzc2VkLiBIZSBkaWQgbm90IGtub3cgd2hpY2ggd2F5IHRvIHR1cm4uIEl0IHdhcyBhdCB0aGlzIHZlcnkgdGltZSB0aGF0IGFuCiAgICAgICAgICAgICAgICAgICAgYXNzYXNzaW4gc2VudCBieSBoaW0gd2FzIHNhaWQgdG8gaGF2ZSBiZWVuIGRldGVjdGVkIHdpdGggYSBkYWdnZXIgaW4gdGhlIGhvdXNlCiAgICAgICAgICAgICAgICAgICAgb2YgQ2Flc2FyLiBBbmQgb2YgdGhpcyBDYWVzYXIgaGltc2VsZiBjb21wbGFpbmVkIGluIHRoZSBzZW5hdGUsIGludmVpZ2hpbmcKICAgICAgICAgICAgICAgICAgICBvcGVubHkgYWdhaW5zdCB5b3UuIENhZXNhciBkZXBhcnRzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiwgaGF2aW5nIGdyYW50ZWQgeW91IGEgZmV3IGRheXMgZGVsYXkgZm9yIG1ha2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBwYXltZW50LCBvbiBhY2NvdW50IG9mIHlvdXIgcG92ZXJ0eS4gRXZlbiB0aGVuIHlvdSBkbyBub3QgZm9sbG93IGhpbS4gSGFkIHNvCiAgICAgICAgICAgICAgICAgICAgZ29vZCBhIGdsYWRpYXRvciBhcyB5b3UgcmV0aXJlZCBmcm9tIGJ1c2luZXNzIHNvIGVhcmx5PyBDYW4gYW55IG9uZSB0aGVuIGZlYXIgYQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gd2FzIGFzIHRpbWlkIGFzIHRoaXMgbWFuIGluIHVwaG9sZGluZyBoaXMgcGFydHksIHRoYXQgaXMsIGluIHVwaG9sZGluZwogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gZm9ydHVuZXM/IDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pc2VudW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1pc2VudW0iPk1pc2VudW08L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIG5vdGhpbmcgd2hpY2ggdGhlIG1hbiB3aG8gd2FzIHB1dHRpbmcgdGhlbSB1cCB0byBzYWxlIGNvdWxkIGNhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duLiBBbmQgd2hhdCBhIG1pc2VyYWJsZSBzaWdodCB3YXMgdGhlIGF1Y3Rpb24uIEEgbGl0dGxlIGFwcGFyZWwgb2YgUG9tcGVpdXMncywKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBzdGFpbmVkOyBhIGZldyBzaWx2ZXIgdmVzc2VscyBiZWxvbmdpbmcgdG8gdGhlIHNhbWUgbWFuLCBhbGwgYmF0dGVyZWQsCiAgICAgICAgICAgICAgICAgICAgc29tZSBzbGF2ZXMgaW4gd3JldGNoZWQgY29uZGl0aW9uOyBzbyB0aGF0IHdlIGdyaWV2ZWQgdGhhdCB0aGVyZSB3YXMgYW55IHRoaW5nCiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nIHRvIGJlIHNlZW4gb2YgdGhlc2UgbWlzZXJhYmxlIHJlbGllcy4gPC90cmFuc2xhdGlvbj4="
translation['2.29.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcyBhdWN0aW9uLCBob3dldmVyLCB0aGUgaGVpcnMgb2YgTHVjaXVzIFJ1YnJpdXMgcHJldmVudGVkIGZyb20gcHJvY2VlZGluZywKICAgICAgICAgICAgICAgICAgICBiZWluZyBhcm1lZCB3aXRoIGEgZGVjcmVlIG9mIENhZXNhciB0byB0aGF0IGVmZmVjdC4gVGhlIHNwZW5kdGhyaWZ0IHdhcwogICAgICAgICAgICAgICAgICAgIGVtYmFycmFzc2VkLiBIZSBkaWQgbm90IGtub3cgd2hpY2ggd2F5IHRvIHR1cm4uIEl0IHdhcyBhdCB0aGlzIHZlcnkgdGltZSB0aGF0IGFuCiAgICAgICAgICAgICAgICAgICAgYXNzYXNzaW4gc2VudCBieSBoaW0gd2FzIHNhaWQgdG8gaGF2ZSBiZWVuIGRldGVjdGVkIHdpdGggYSBkYWdnZXIgaW4gdGhlIGhvdXNlCiAgICAgICAgICAgICAgICAgICAgb2YgQ2Flc2FyLiBBbmQgb2YgdGhpcyBDYWVzYXIgaGltc2VsZiBjb21wbGFpbmVkIGluIHRoZSBzZW5hdGUsIGludmVpZ2hpbmcKICAgICAgICAgICAgICAgICAgICBvcGVubHkgYWdhaW5zdCB5b3UuIENhZXNhciBkZXBhcnRzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+LCBoYXZpbmcgZ3JhbnRlZCB5b3UgYSBmZXcgZGF5cyBkZWxheSBmb3IgbWFraW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHBheW1lbnQsIG9uIGFjY291bnQgb2YgeW91ciBwb3ZlcnR5LiBFdmVuIHRoZW4geW91IGRvIG5vdCBmb2xsb3cgaGltLiBIYWQgc28KICAgICAgICAgICAgICAgICAgICBnb29kIGEgZ2xhZGlhdG9yIGFzIHlvdSByZXRpcmVkIGZyb20gYnVzaW5lc3Mgc28gZWFybHk/IENhbiBhbnkgb25lIHRoZW4gZmVhciBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyB3YXMgYXMgdGltaWQgYXMgdGhpcyBtYW4gaW4gdXBob2xkaW5nIGhpcyBwYXJ0eSwgdGhhdCBpcywgaW4gdXBob2xkaW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBmb3J0dW5lcz8gPC90cmFuc2xhdGlvbj4="
translation['2.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.30.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHNvbWUgdGltZSBoZSBhdCBsYXN0IHdlbnQgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPjsgYnV0LCBhcyBoZSBzYXlzLCBoZSBjb3VsZCBub3QgYXJyaXZlIHRoZXJlIGluIHNhZmV0eS4KICAgICAgICAgICAgICAgICAgICBIb3cgdGhlbiBkaWQgRG9sYWJlbGxhIG1hbmFnZSB0byBhcnJpdmUgdGhlcmU/IEVpdGhlciwgTyBBbnRvbml1cywgdGhhdCBjYXVzZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IG5ldmVyIHRvIGhhdmUgYmVlbiB1bmRlcnRha2VuLCBvciB3aGVuIHlvdSBoYWQgdW5kZXJ0YWtlbiBpdCwgaXQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIG1haW50YWluZWQgdG8gdGhlIGVuZC4gVGhyaWNlIGRpZCBDYWVzYXIgZmlnaHQgYWdhaW5zdCBoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnM7IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+LCBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTI0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4sIGFuZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPi4gRG9sYWJlbGxhIHdhcyBwcmVzZW50IGF0IGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZXMuIEluIHRoZSBiYXR0bGUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4gaGUgZXZlbgogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGEgd291bmQuIElmIHlvdSBhc2sgbXkgb3BpbmlvbiwgSSB3aXNoIGhlIGhhZCBub3QgYmVlbiB0aGVyZS4gQnV0CiAgICAgICAgICAgICAgICAgICAgc3RpbGwsIGlmIGhpcyBkZXNpZ24gYXQgZmlyc3Qgd2FzIGJsYW1hYmxlLCBoaXMgY29uc2lzdGVuY3kgYW5kIGZpcm1uZXNzIHdlcmUKICAgICAgICAgICAgICAgICAgICBwcmFpc2V3b3J0aHkuIEJ1dCB3aGF0IHNoYWxsIHdlIHNheSBvZiB5b3U/IEluIHRoZSBmaXJzdCBwbGFjZSwgdGhlIGNoaWxkcmVuIG9mCiAgICAgICAgICAgICAgICAgICAgQ25hZXVzIFBvbXBlaXVzIHNvdWdodCB0byBiZSByZXN0b3JlZCB0byB0aGVpciBjb3VudHJ5LiBXZWxsLCB0aGlzIGNvbmNlcm5lZCB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb24gaW50ZXJlc3RzIG9mIHRoZSB3aG9sZSBwYXJ0eS4gQmVzaWRlcyB0aGF0LCB0aGV5IHNvdWdodCB0byByZWNvdmVyIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkIGdvZHMsIHRoZSBnb2RzIG9mIHRoZWlyIGNvdW50cnksIHRoZWlyIGFsdGFycywgdGhlaXIgaGVhcnRocywgdGhlCiAgICAgICAgICAgICAgICAgICAgdHV0ZWxhciBnb2RzIG9mIHRoZWlyIGZhbWlseTsgYWxsIG9mIHdoaWNoIHlvdSBoYWQgc2VpemVkIHVwb24uIEFuZCB3aGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBzb3VnaHQgdG8gcmVjb3ZlciB0aG9zZSB0aGluZ3MgYnkgZm9yY2Ugb2YgYXJtcyB3aGljaCBiZWxvbmdlZCB0byB0aGVtIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIHdobyB3YXMgaXQgbW9zdCBuYXR1cmFs4oCUKGFsdGhvdWdoIGluIHVuanVzdCBhbmQgdW5uYXR1cmFsCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3Mgd2hhdCBjYW4gdGhlcmUgYmUgdGhhdCBpcyBuYXR1cmFsPynigJRzdGlsbCwgd2hvIHdhcyBpdCBtb3N0CiAgICAgICAgICAgICAgICAgICAgbmF0dXJhbCB0byBleHBlY3Qgd291bGQgZmlnaHQgYWdhaW5zdCB0aGUgY2hpbGRyZW4gb2YgQ25hZXVzIFBvbXBlaXVzPyBXaG8/IFdoeSwKICAgICAgICAgICAgICAgICAgICB5b3Ugd2hvIGhhZCBib3VnaHQgdGhlaXIgcHJvcGVydHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2VyZSB5b3UKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM2OCIga2V5PSJ0Z24sNzAwODM2OCI+TmFyYm88L3BsYWNlTmFtZT4gdG8gYmUgc2ljayBvdmVyIHRoZSB0YWJsZXMgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGVudGVydGFpbmVycyB3aGlsZSBEb2xhYmVsbGEgd2FzIGZpZ2h0aW5nIHlvdXIgYmF0dGxlcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4/IDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+OyBidXQsIGFzIGhlIHNheXMsIGhlIGNvdWxkIG5vdCBhcnJpdmUgdGhlcmUgaW4gc2FmZXR5LgogICAgICAgICAgICAgICAgICAgIEhvdyB0aGVuIGRpZCBEb2xhYmVsbGEgbWFuYWdlIHRvIGFycml2ZSB0aGVyZT8gRWl0aGVyLCBPIEFudG9uaXVzLCB0aGF0IGNhdXNlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbmV2ZXIgdG8gaGF2ZSBiZWVuIHVuZGVydGFrZW4sIG9yIHdoZW4geW91IGhhZCB1bmRlcnRha2VuIGl0LCBpdCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gbWFpbnRhaW5lZCB0byB0aGUgZW5kLiBUaHJpY2UgZGlkIENhZXNhciBmaWdodCBhZ2FpbnN0IGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVuczsgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4sIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiwgYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+LiBEb2xhYmVsbGEgd2FzIHByZXNlbnQgYXQgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYmF0dGxlcy4gSW4gdGhlIGJhdHRsZSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiBoZSBldmVuCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgYSB3b3VuZC4gSWYgeW91IGFzayBteSBvcGluaW9uLCBJIHdpc2ggaGUgaGFkIG5vdCBiZWVuIHRoZXJlLiBCdXQKICAgICAgICAgICAgICAgICAgICBzdGlsbCwgaWYgaGlzIGRlc2lnbiBhdCBmaXJzdCB3YXMgYmxhbWFibGUsIGhpcyBjb25zaXN0ZW5jeSBhbmQgZmlybW5lc3Mgd2VyZQogICAgICAgICAgICAgICAgICAgIHByYWlzZXdvcnRoeS4gQnV0IHdoYXQgc2hhbGwgd2Ugc2F5IG9mIHlvdT8gSW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgY2hpbGRyZW4gb2YKICAgICAgICAgICAgICAgICAgICBDbmFldXMgUG9tcGVpdXMgc291Z2h0IHRvIGJlIHJlc3RvcmVkIHRvIHRoZWlyIGNvdW50cnkuIFdlbGwsIHRoaXMgY29uY2VybmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbiBpbnRlcmVzdHMgb2YgdGhlIHdob2xlIHBhcnR5LiBCZXNpZGVzIHRoYXQsIHRoZXkgc291Z2h0IHRvIHJlY292ZXIgdGhlaXIKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQgZ29kcywgdGhlIGdvZHMgb2YgdGhlaXIgY291bnRyeSwgdGhlaXIgYWx0YXJzLCB0aGVpciBoZWFydGhzLCB0aGUKICAgICAgICAgICAgICAgICAgICB0dXRlbGFyIGdvZHMgb2YgdGhlaXIgZmFtaWx5OyBhbGwgb2Ygd2hpY2ggeW91IGhhZCBzZWl6ZWQgdXBvbi4gQW5kIHdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIHNvdWdodCB0byByZWNvdmVyIHRob3NlIHRoaW5ncyBieSBmb3JjZSBvZiBhcm1zIHdoaWNoIGJlbG9uZ2VkIHRvIHRoZW0gYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cywgd2hvIHdhcyBpdCBtb3N0IG5hdHVyYWzigJQoYWx0aG91Z2ggaW4gdW5qdXN0IGFuZCB1bm5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5ncyB3aGF0IGNhbiB0aGVyZSBiZSB0aGF0IGlzIG5hdHVyYWw/KeKAlHN0aWxsLCB3aG8gd2FzIGl0IG1vc3QKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIHRvIGV4cGVjdCB3b3VsZCBmaWdodCBhZ2FpbnN0IHRoZSBjaGlsZHJlbiBvZiBDbmFldXMgUG9tcGVpdXM/IFdobz8gV2h5LAogICAgICAgICAgICAgICAgICAgIHlvdSB3aG8gaGFkIGJvdWdodCB0aGVpciBwcm9wZXJ0eS4gPC90cmFuc2xhdGlvbj4="
translation['2.30.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2VyZSB5b3UKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODM2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4MzY4Ij5OYXJibzwvcGxhY2VOYW1lPiB0byBiZSBzaWNrIG92ZXIgdGhlIHRhYmxlcyBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZW50ZXJ0YWluZXJzIHdoaWxlIERvbGFiZWxsYSB3YXMgZmlnaHRpbmcgeW91ciBiYXR0bGVzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+PyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB3aGF0IHJldHVybiB3YXMgdGhhdCBvZiB5b3VycyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzNjgiPk5hcmJvPC9wbGFjZU5hbWU+PyBIZSBldmVuIGFza2VkIHdoeSBJIGhhZCByZXR1cm5lZCBzbyBzdWRkZW5seSBmcm9tIG15CiAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbi4gSSBoYXZlIGp1c3QgYnJpZWZseSBleHBsYWluZWQgdG8geW91LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGUKICAgICAgICAgICAgICAgICAgICByZWFzb24gb2YgbXkgcmV0dXJuLiBJIHdhcyBkZXNpcm91cywgaWYgSSBjb3VsZCwgdG8gYmUgb2Ygc2VydmljZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBldmVuIGJlZm9yZSB0aGUgZmlyc3Qgb2YgSmFudWFyeS4gRm9yLCBhcyB0byB5b3VyIHF1ZXN0aW9uLCBob3cgSSBoYWQKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCBpbiB0aGUgZmlyc3QgcGxhY2UsIEkgcmV0dXJuZWQgYnkgZGF5bGlnaHQsIG5vdCBpbiB0aGUgZGFyaywgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIHBsYWNlLCBJIHJldHVybmVkIGluIHNob2VzLCBhbmQgaW4gbXkgUm9tYW4gZ293biwgbm90IGluIGFueSBHYWxsaWMKICAgICAgICAgICAgICAgICAgICBzbGlwcGVycywgb3IgYmFyYmFyaWFuIG1hbnRsZS4gQW5kIGV2ZW4gbm93IHlvdSBrZWVwIGxvb2tpbmcgYXQgbWU7IGFuZCwgYXMgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcywgd2l0aCBncmVhdCBhbmdlci4gU3VyZWx5IHlvdSB3b3VsZCBiZSByZWNvbmNpbGVkIHRvIG1lIGlmIHlvdSBrbmV3IGhvdwogICAgICAgICAgICAgICAgICAgIGFzaGFtZWQgSSBhbSBvZiB5b3VyIHdvcnRobGVzc25lc3MsIHdoaWNoIHlvdSB5b3Vyc2VsZiBhcmUgbm90IGFzaGFtZWQgb2YuIE9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBwcm9mbGlnYXRlIGNvbmR1Y3Qgb2YgYWxsIHRoZSB3b3JsZCwgSSBuZXZlciBzYXcsIEkgbmV2ZXIgaGVhcmQgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgbW9yZSBzaGFtZWZ1bCB0aGFuIHlvdXJzLiBZb3UsIHdobyBmYW5jaWVkIHlvdXJzZWxmIGEgbWFzdGVyIG9mIHRoZSBob3JzZSwgd2hlbgogICAgICAgICAgICAgICAgICAgIHlvdSB3ZXJlIHN0YW5kaW5nIGZvciwgb3IgSSBzaG91bGQgcmF0aGVyIHNheSBiZWdnaW5nIGZvciwgdGhlIGNvbnN1bHNoaXAgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGVuc3VpbmcgeWVhciwgcmFuIGluIEdhbGxpYyBzbGlwcGVycyBhbmQgYSBiYXJiYXJpYW4gbWFudGxlIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIG11bmljaXBhbCB0b3ducyBhbmQgY29sb25pZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBmcm9tIHdoaWNoIHdlIHVzZWQgdG8gZGVtYW5kIHRoZSBjb25zdWxzaGlwIHdoZW4gdGhlIGNvbnN1bHNoaXAgd2FzIHN0b29kIGZvcgogICAgICAgICAgICAgICAgICAgIGFuZCBub3QgYmVnZ2VkIGZvci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNzciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDgzNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODM2OCI+TmFyYm88L3BsYWNlTmFtZT4/IEhlIGV2ZW4gYXNrZWQgd2h5IEkgaGFkIHJldHVybmVkIHNvIHN1ZGRlbmx5IGZyb20gbXkKICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uLiBJIGhhdmUganVzdCBicmllZmx5IGV4cGxhaW5lZCB0byB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBvZiBteSByZXR1cm4uIEkgd2FzIGRlc2lyb3VzLCBpZiBJIGNvdWxkLCB0byBiZSBvZiBzZXJ2aWNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIGV2ZW4gYmVmb3JlIHRoZSBmaXJzdCBvZiBKYW51YXJ5LiBGb3IsIGFzIHRvIHlvdXIgcXVlc3Rpb24sIGhvdyBJIGhhZAogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIGluIHRoZSBmaXJzdCBwbGFjZSwgSSByZXR1cm5lZCBieSBkYXlsaWdodCwgbm90IGluIHRoZSBkYXJrLCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZWNvbmQgcGxhY2UsIEkgcmV0dXJuZWQgaW4gc2hvZXMsIGFuZCBpbiBteSBSb21hbiBnb3duLCBub3QgaW4gYW55IEdhbGxpYwogICAgICAgICAgICAgICAgICAgIHNsaXBwZXJzLCBvciBiYXJiYXJpYW4gbWFudGxlLiBBbmQgZXZlbiBub3cgeW91IGtlZXAgbG9va2luZyBhdCBtZTsgYW5kLCBhcyBpdAogICAgICAgICAgICAgICAgICAgIHNlZW1zLCB3aXRoIGdyZWF0IGFuZ2VyLiBTdXJlbHkgeW91IHdvdWxkIGJlIHJlY29uY2lsZWQgdG8gbWUgaWYgeW91IGtuZXcgaG93CiAgICAgICAgICAgICAgICAgICAgYXNoYW1lZCBJIGFtIG9mIHlvdXIgd29ydGhsZXNzbmVzcywgd2hpY2ggeW91IHlvdXJzZWxmIGFyZSBub3QgYXNoYW1lZCBvZi4gT2YKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHByb2ZsaWdhdGUgY29uZHVjdCBvZiBhbGwgdGhlIHdvcmxkLCBJIG5ldmVyIHNhdywgSSBuZXZlciBoZWFyZCBvZiBhbnkKICAgICAgICAgICAgICAgICAgICBtb3JlIHNoYW1lZnVsIHRoYW4geW91cnMuIFlvdSwgd2hvIGZhbmNpZWQgeW91cnNlbGYgYSBtYXN0ZXIgb2YgdGhlIGhvcnNlLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgeW91IHdlcmUgc3RhbmRpbmcgZm9yLCBvciBJIHNob3VsZCByYXRoZXIgc2F5IGJlZ2dpbmcgZm9yLCB0aGUgY29uc3Vsc2hpcCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgZW5zdWluZyB5ZWFyLCByYW4gaW4gR2FsbGljIHNsaXBwZXJzIGFuZCBhIGJhcmJhcmlhbiBtYW50bGUgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbXVuaWNpcGFsIHRvd25zIGFuZCBjb2xvbmllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGZyb20gd2hpY2ggd2UgdXNlZCB0byBkZW1hbmQgdGhlIGNvbnN1bHNoaXAgd2hlbiB0aGUgY29uc3Vsc2hpcCB3YXMgc3Rvb2QgZm9yCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCBiZWdnZWQgZm9yLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.31.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBtYXJrIG5vdyB0aGUgdHJpZmxpbmcgY2hhcmFjdGVyIG9mIHRoZSBmZWxsb3cuIFdoZW4gYWJvdXQgdGhlIHRlbnRoIGhvdXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGF5IGhlIGhhZCBhcnJpdmVkIGF0IFJlZCBSb2NrcywgaGUgc2t1bGtlZCBpbnRvIGEgbGl0dGxlIHBldHR5IHdpbmUtc2hvcCwKICAgICAgICAgICAgICAgICAgICBhbmQsIGhpZGRlbiB0aGVyZSwga2VwdCBvbiBkcmlua2luZyB0aWxsIGV2ZW5pbmcuIEFuZCBmcm9tIHRoZW5jZSBnZXR0aW5nIGludG8gYQogICAgICAgICAgICAgICAgICAgIGdpZyBhbmQgYmVpbmcgZHJpdmVuIHJhcGlkbHkgdG8gdGhlIGNpdHksIGhlIGNhbWUgdG8gaGlzIG93biBob3VzZSB3aXRoIGhpcyBoZWFkCiAgICAgICAgICAgICAgICAgICAgdmVpbGVkLiDigJxXaG8gYXJlIHlvdT/igJ0gc2F5cyB0aGUgcG9ydGVyLiDigJxBbgogICAgICAgICAgICAgICAgICAgIGV4cHJlc3MgZnJvbSBNYXJjdXMu4oCdIEhlIGlzIGF0IG9uY2UgdGFrZW4gdG8gdGhlIHdvbWFuIGZvciB3aG9zZSBzYWtlCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGNvbWU7IGFuZCBoZSBkZWxpdmVyZWQgdGhlIGxldHRlciB0byBoZXIuIEFuZCB3aGVuIHNoZSBoYWQgcmVhZCBpdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGVhcnMgKGZvciBpdCB3YXMgd3JpdHRlbiBpbiBhIHZlcnkgYW1vcm91cyBzdHlsZSwgYnV0IHRoZSBtYWluIHN1YmplY3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyIHdhcyB0aGF0IGhlIHdvdWxkIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIHRoYXQgYWN0cmVzcyBmb3IgdGhlIGZ1dHVyZTsKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBkaXNjYXJkZWQgYWxsIGhpcyBsb3ZlIGZvciBoZXIsIGFuZCB0cmFuc2ZlcnJlZCBpdCB0byBoaXMKICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kZW50KSwgd2hlbiBzaGUsIEkgc2F5LCB3ZXB0IHBsZW50aWZ1bGx5LCB0aGlzIHNvZnQtaGVhcnRlZCBtYW4gY291bGQKICAgICAgICAgICAgICAgICAgICBiZWFyIGl0IG5vIGxvbmdlcjsgaGUgdW5jb3ZlcmVkIGhpcyBoZWFkIGFuZCB0aHJldyBoaW1zZWxmIG9uIGhlciBuZWNrLiBPaCB0aGUKICAgICAgICAgICAgICAgICAgICB3b3J0aGxlc3MgbWFuIChmb3Igd2hhdCBlbHNlIGNhbiBJIGNhbGwgaGltPyB0aGVyZSBpcyBubyBtb3JlIHN1aXRhYmxlCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiBmb3IgbWUgdG8gdXNlKSEgd2FzIGl0IGZvciB0aGlzIHRoYXQgeW91IGRpc3R1cmJlZCB0aGUgY2l0eSBieQogICAgICAgICAgICAgICAgICAgIG5vY3R1cm5hbCBhbGFybXMsIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB3aXRoIGZlYXJzCiAgICAgICAgICAgICAgICAgICAgb2YgbWFueSBkYXlzJyBkdXJhdGlvbiwgaW4gb3JkZXIgdGhhdCB5b3UgbWlnaHQgc2hvdyB5b3Vyc2VsZiB1bmV4cGVjdGVkbHksIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgYSB3b21hbiBtaWdodCBzZWUgeW91IGJlZm9yZSBzaGUgaG9wZWQgdG8gZG8gc28/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlIGhhZCBhdCBob21lIGEgcHJldGVuc2Ugb2YgbG92ZTsgYnV0IG91dCBvZiBkb29ycyBhCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgbW9yZSBkaXNjcmVkaXRhYmxlIHN0aWxsLCBuYW1lbHksIGxlc3QgTHVjaXVzIFBsYW5jdXMgc2hvdWxkIHNlbGwgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMsIEJ1dCBhZnRlciB5b3UgaGFkIGJlZW4gcHJvZHVjZWQgaW4gdGhlIGFzc2VtYmx5IGJ5IG9uZSBvZiB0aGUgdHJpYnVuZXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGVvcGxlLCBhbmQgaGFkIHJlcGxpZWQgdGhhdCB5b3UgaGFkIGNvbWUgb24geW91ciBvd24gcHJpdmF0ZSBidXNpbmVzcywKICAgICAgICAgICAgICAgICAgICB5b3UgbWFkZSBldmVuIHRoZSBwZW9wbGUgZnVsbCBvZiBqb2tlcyBhZ2FpbnN0IHlvdS4gQnV0LCBob3dldmVyLCB3ZSBoYXZlIHNhaWQKICAgICAgICAgICAgICAgICAgICB0b28gbXVjaCBhYm91dCB0cmlmbGVzLiBMZXQgdXMgY29tZSB0byBtb3JlIGltcG9ydGFudCBzdWJqZWN0cy4gPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB3aXRoIGZlYXJzCiAgICAgICAgICAgICAgICAgICAgb2YgbWFueSBkYXlzJyBkdXJhdGlvbiwgaW4gb3JkZXIgdGhhdCB5b3UgbWlnaHQgc2hvdyB5b3Vyc2VsZiB1bmV4cGVjdGVkbHksIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgYSB3b21hbiBtaWdodCBzZWUgeW91IGJlZm9yZSBzaGUgaG9wZWQgdG8gZG8gc28/IDwvdHJhbnNsYXRpb24+"
translation['2.31.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlIGhhZCBhdCBob21lIGEgcHJldGVuc2Ugb2YgbG92ZTsgYnV0IG91dCBvZiBkb29ycyBhCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgbW9yZSBkaXNjcmVkaXRhYmxlIHN0aWxsLCBuYW1lbHksIGxlc3QgTHVjaXVzIFBsYW5jdXMgc2hvdWxkIHNlbGwgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMsIEJ1dCBhZnRlciB5b3UgaGFkIGJlZW4gcHJvZHVjZWQgaW4gdGhlIGFzc2VtYmx5IGJ5IG9uZSBvZiB0aGUgdHJpYnVuZXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGVvcGxlLCBhbmQgaGFkIHJlcGxpZWQgdGhhdCB5b3UgaGFkIGNvbWUgb24geW91ciBvd24gcHJpdmF0ZSBidXNpbmVzcywKICAgICAgICAgICAgICAgICAgICB5b3UgbWFkZSBldmVuIHRoZSBwZW9wbGUgZnVsbCBvZiBqb2tlcyBhZ2FpbnN0IHlvdS4gQnV0LCBob3dldmVyLCB3ZSBoYXZlIHNhaWQKICAgICAgICAgICAgICAgICAgICB0b28gbXVjaCBhYm91dCB0cmlmbGVzLiBMZXQgdXMgY29tZSB0byBtb3JlIGltcG9ydGFudCBzdWJqZWN0cy4gPC90cmFuc2xhdGlvbj4="
translation['2.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSB3ZW50IGEgZ3JlYXQgZGlzdGFuY2UgdG8gbWVldCBDYWVzYXIgb24gaGlzIHJldHVybiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+LiBZb3Ugd2VudCByYXBpZGx5LCB5b3UgcmV0dXJuZWQgcmFwaWRseSwKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IHdlIG1pZ2h0IHNlZSB0aGF0LCBpZiB5b3Ugd2VyZSBub3QgYnJhdmUsIHlvdSB3ZXJlIGF0IGxlYXN0CiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLiBZb3UgYWdhaW4gYmVjYW1lIGludGltYXRlIHdpdGggaGltOyBJIGFtIHN1cmUgSSBkbyBub3Qga25vdyBob3cuIENhZXNhcgogICAgICAgICAgICAgICAgICAgIGhhZCB0aGlzIHBlY3VsaWFyIGNoYXJhY3RlcmlzdGljOyB3aG9ldmVyIGhlIGtuZXcgdG8gYmUgdXR0ZXJseSBydWluZWQgYnkgZGVidCwKICAgICAgICAgICAgICAgICAgICBhbmQgbmVlZHksIGV2ZW4gaWYgaGUga25ldyBoaW0gYWxzbyB0byBiZSBhbiBhdWRhY2lvdXMgYW5kIHdvcnRobGVzcyBtYW4sIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbGluZ2x5IGFkbWl0dGVkIGhpbSB0byBoaXMgaW50aW1hY3kuIFlvdSB0aGVuLCBiZWluZyBhZG1pcmFibHkgcmVjb21tZW5kZWQgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gYnkgdGhlc2UgY2lyY3Vtc3RhbmNlcywgd2VyZSBvcmRlcmVkIHRvIGJlIGFwcG9pbnRlZCBjb25zdWwsIGFuZCB0aGF0IHRvbyBhcwogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gY29sbGVhZ3VlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzkiIHVuaXQ9InNlY3Rpb24iIC8+IEkgZG8gbm90IG1ha2UgYW55CiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50IGFnYWluc3QgRG9sYWJlbGxhLCB3aG8gd2FzIGF0IHRoYXQgdGltZSBhY3RpbmcgdW5kZXIgY29tcHVsc2lvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2FzIGNham9sZWQgYW5kIGRlY2VpdmVkLCBCdXQgd2hvIGlzIHRoZXJlIHdobyBkb2VzIG5vdCBrbm93IHdpdGggd2hhdCBncmVhdAogICAgICAgICAgICAgICAgICAgIHBlcmZpZHkgYm90aCBvZiB5b3UgdHJlYXRlZCBEb2xhYmVsbGEgaW4gdGhhdCBidXNpbmVzcz8gQ2Flc2FyIGluZHVjZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgc3RhbmQgZm9yIHRoZSBjb25zdWxzaGlwLiBBZnRlciBoYXZpbmcgcHJvbWlzZWQgaXQgdG8gaGltLCBhbmQgcGxlZGdlZCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgdG8gYWlkIGhpbSwgaGUgcHJldmVudGVkIGhpcyBnZXR0aW5nIGl0LCBhbmQgdHJhbnNmZXJyZWQgaXQgdG8gaGltc2VsZi4gQW5kIHlvdQogICAgICAgICAgICAgICAgICAgIGVuZG9yc2VkIGhpcyB0cmVhY2hlcnkgd2l0aCB5b3VyIG93biBlYWdlcm5lc3MuIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+LiBZb3Ugd2VudCByYXBpZGx5LCB5b3UgcmV0dXJuZWQgcmFwaWRseSwKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IHdlIG1pZ2h0IHNlZSB0aGF0LCBpZiB5b3Ugd2VyZSBub3QgYnJhdmUsIHlvdSB3ZXJlIGF0IGxlYXN0CiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLiBZb3UgYWdhaW4gYmVjYW1lIGludGltYXRlIHdpdGggaGltOyBJIGFtIHN1cmUgSSBkbyBub3Qga25vdyBob3cuIENhZXNhcgogICAgICAgICAgICAgICAgICAgIGhhZCB0aGlzIHBlY3VsaWFyIGNoYXJhY3RlcmlzdGljOyB3aG9ldmVyIGhlIGtuZXcgdG8gYmUgdXR0ZXJseSBydWluZWQgYnkgZGVidCwKICAgICAgICAgICAgICAgICAgICBhbmQgbmVlZHksIGV2ZW4gaWYgaGUga25ldyBoaW0gYWxzbyB0byBiZSBhbiBhdWRhY2lvdXMgYW5kIHdvcnRobGVzcyBtYW4sIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbGluZ2x5IGFkbWl0dGVkIGhpbSB0byBoaXMgaW50aW1hY3kuIFlvdSB0aGVuLCBiZWluZyBhZG1pcmFibHkgcmVjb21tZW5kZWQgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gYnkgdGhlc2UgY2lyY3Vtc3RhbmNlcywgd2VyZSBvcmRlcmVkIHRvIGJlIGFwcG9pbnRlZCBjb25zdWwsIGFuZCB0aGF0IHRvbyBhcwogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gY29sbGVhZ3VlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.32.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBub3QgbWFrZSBhbnkKICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnQgYWdhaW5zdCBEb2xhYmVsbGEsIHdobyB3YXMgYXQgdGhhdCB0aW1lIGFjdGluZyB1bmRlciBjb21wdWxzaW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICB3YXMgY2Fqb2xlZCBhbmQgZGVjZWl2ZWQsIEJ1dCB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IGtub3cgd2l0aCB3aGF0IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcGVyZmlkeSBib3RoIG9mIHlvdSB0cmVhdGVkIERvbGFiZWxsYSBpbiB0aGF0IGJ1c2luZXNzPyBDYWVzYXIgaW5kdWNlZCBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBzdGFuZCBmb3IgdGhlIGNvbnN1bHNoaXAuIEFmdGVyIGhhdmluZyBwcm9taXNlZCBpdCB0byBoaW0sIGFuZCBwbGVkZ2VkIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB0byBhaWQgaGltLCBoZSBwcmV2ZW50ZWQgaGlzIGdldHRpbmcgaXQsIGFuZCB0cmFuc2ZlcnJlZCBpdCB0byBoaW1zZWxmLiBBbmQgeW91CiAgICAgICAgICAgICAgICAgICAgZW5kb3JzZWQgaGlzIHRyZWFjaGVyeSB3aXRoIHlvdXIgb3duIGVhZ2VybmVzcy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgZmlyc3Qgb2YgSmFudWFyeSBhcnJpdmVzLiBXZSBhcmUgY29udmVuZWQgaW4gdGhlIHNlbmF0ZS4gRG9sYWJlbGxhIGludmVpZ2hlZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltIHdpdGggbXVjaCBtb3JlIGZsdWVuY3kgYW5kIHByZW1lZGl0YXRpb24gdGhhbiBJIGFtIGRvaW5nIG5vdy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgwIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgd2hhdCB0aGluZ3Mgd2VyZSB0aGV5IHdoaWNoIGhlIHNhaWQKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgYW5nZXIsIE8geWUgZ29vZCBnb2RzISBGaXJzdCBvZiBhbGwsIGFmdGVyIENhZXNhciBoYWQgZGVjbGFyZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoZSBkZXBhcnRlZCBoZSB3b3VsZCBvcmRlciBEb2xhYmVsbGEgdG8gYmUgbWFkZSBjb25zdWwgKGFuZCB0aGV5IGRlbnkKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdhcyBhIGtpbmcgd2hvIHdhcyBhbHdheXMgZG9pbmcgYW5kIHNheWluZyBzb21ldGhpbmcgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHNvcnQpLuKAlGJ1dCBhZnRlciBDYWVzYXIgaGFkIHNhaWQgdGhpcywgdGhlbiB0aGlzIHZpcnR1b3VzIGF1Z3VyIHNhaWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdhcyBpbnZlc3RlZCB3aXRoIGEgcG9udGlmaWNhdGUgb2YgdGhhdCBzb3J0IHRoYXQgaGUgd2FzIGFibGUsIGJ5IG1lYW5zCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGF1c3BpY2VzLCBlaXRoZXIgdG8gaGluZGVyIG9yIHRvIHZpdGlhdGUgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiwganVzdCBhcyBoZSBwbGVhc2VkOyBhbmQgaGUgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBkbyBzby4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlcmUsIGluIHRoZSBmaXJzdCBwbGFjZSwgcmVtYXJrIHRoZQogICAgICAgICAgICAgICAgICAgIGluY3JlZGlibGUgc3R1cGlkaXR5IG9mIHRoZSBtYW4uIEZvciB3aGF0IGRvIHlvdSBtZWFuPyBDb3VsZCB5b3Ugbm90IGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGhhdmUgZG9uZSB3aGF0IHlvdSBzYWlkIHlvdSBoYWQgbm93IHRoZSBwb3dlciB0byBkbyBieSB0aGUgcHJpdmlsZWdlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhhdCBwb250aWZpY2F0ZSBoYWQgaW52ZXN0ZWQgeW91LCBldmVuIGlmIHlvdSB3ZXJlIG5vdCBhbiBhdWd1ciwgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSBjb25zdWw/IFBlcmhhcHMgeW91IGNvdWxkIGV2ZW4gZG8gaXQgbW9yZSBlYXNpbHkuIEZvciB3ZSBhdWd1cnMgaGF2ZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgdGhlIHBvd2VyIG9mIGFubm91bmNpbmcgdGhhdCB0aGUgYXVzcGljZXMgYXJlIGJlaW5nIG9ic2VydmVkLCBidXQgdGhlIGNvbnN1bHMKICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXIgbWFnaXN0cmF0ZXMgaGF2ZSB0aGUgcmlnaHQgYWxzbyBvZiBvYnNlcnZpbmcgdGhlbSB3aGVuZXZlciB0aGV5CiAgICAgICAgICAgICAgICAgICAgY2hvb3NlLiBCZSBpdCBzby4gWW91IHNhaWQgdGhpcyBvdXQgb2YgaWdub3JhbmNlLiBGb3Igb25lIG11c3Qgbm90IGRlbWFuZAogICAgICAgICAgICAgICAgICAgIHBydWRlbmNlIGZyb20gYSBtYW4gd2hvIGlzIG5ldmVyIHNvYmVyLiBCdXQgc3RpbGwgcmVtYXJrIGhpcyBpbXB1ZGVuY2UuIE1hbnkKICAgICAgICAgICAgICAgICAgICBtb250aHMgYmVmb3JlLCBoZSBzYWlkIGluIHRoZSBzZW5hdGUgdGhhdCBoZSB3b3VsZCBlaXRoZXIgcHJldmVudCB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+IGZyb20gYXNzZW1ibGluZyBmb3IgdGhlIGVsZWN0aW9uIG9mIERvbGFiZWxsYSBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIHRoZSBhdXNwaWNlcywgb3IgdGhhdCBoZSB3b3VsZCBkbyB3aGF0IGhlIGFjdHVhbGx5IGRpZCBkby4gQ2FuIGFueSBvbmUKICAgICAgICAgICAgICAgICAgICBkaXZpbmUgYmVmb3JlaGFuZCB3aGF0IGRlZmVjdCB0aGVyZSB3aWxsIGJlIGluIHRoZSBhdXNwaWNlcywgZXhjZXB0IHRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIGFscmVhZHkgZGV0ZXJtaW5lZCB0byBvYnNlcnZlIHRoZSBoZWF2ZW5zPyB3aGljaCBpbiB0aGUgZmlyc3QgcGxhY2UgaXQgaXMKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4gYnkgbGF3IHRvIGRvIGF0IHRoZSB0aW1lIG9mIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4uCiAgICAgICAgICAgICAgICAgICAgQW5kIGlmIGFueSBvbmUgaGFzOyBiZWVuIG9ic2VydmluZyB0aGUgaGVhdmVucywgaGUgaXMgYm91bmQgdG8gZ2l2ZSBub3RpY2Ugb2YKICAgICAgICAgICAgICAgICAgICBpdCwgbm90IGFmdGVyIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gYXJlIGFzc2VtYmxlZCwgYnV0IGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGhlbGQuIEJ1dCB0aGlzIG1hbidzIGlnbm9yYW5jZSBpcyBqb2luZWQgdG8gaW1wdWRlbmNlLCBub3IgZG9lcyBoZSBrbm93CiAgICAgICAgICAgICAgICAgICAgd2hhdCBhbiBhdWd1ciBvdWdodCB0byBrbm93LCBub3IgZG8gd2hhdCBhIG1vZGVzdCBtYW4gb3VnaHQgdG8gZG8uIDxtaWxlc3RvbmUgbj0iODIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBqdXN0IHJlY29sbGVjdCB0aGUgd2hvbGUgb2YgaGlzIGNvbmR1Y3QgZHVyaW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbnN1bHNoaXAgZnJvbSB0aGF0IGRheSB1cCB0byB0aGUgaWRlcyBvZiBNYXJjaC4gV2hhdCBsaWN0b3Igd2FzIGV2ZXIgc28KICAgICAgICAgICAgICAgICAgICBodW1ibGUsIHNvIGFiamVjdD8gSGUgaGltc2VsZiBoYWQgbm8gcG93ZXIgYXQgYWxsOyBoZSBiZWdnZWQgZXZlcnkgdGhpbmcgb2YKICAgICAgICAgICAgICAgICAgICBvdGhlcnM7IGFuZCB0aHJ1c3RpbmcgaGlzIGhlYWQgaW50byB0aGUgaGluZCBwYXJ0IG9mIGhpcyBsaXR0ZXIsIGhlIGJlZ2dlZAogICAgICAgICAgICAgICAgICAgIGZhdm9ycyBvZiBoaXMgY29sbGVhZ3VlcywgdG8gc2VsbCB0aGVtIGhpbXNlbGYgYWZ0ZXJ3YXJkLiA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.32.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdoYXQgdGhpbmdzIHdlcmUgdGhleSB3aGljaCBoZSBzYWlkCiAgICAgICAgICAgICAgICAgICAgaW4gaGlzIGFuZ2VyLCBPIHllIGdvb2QgZ29kcyEgRmlyc3Qgb2YgYWxsLCBhZnRlciBDYWVzYXIgaGFkIGRlY2xhcmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgaGUgZGVwYXJ0ZWQgaGUgd291bGQgb3JkZXIgRG9sYWJlbGxhIHRvIGJlIG1hZGUgY29uc3VsIChhbmQgdGhleSBkZW55CiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3YXMgYSBraW5nIHdobyB3YXMgYWx3YXlzIGRvaW5nIGFuZCBzYXlpbmcgc29tZXRoaW5nIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBzb3J0KS7igJRidXQgYWZ0ZXIgQ2Flc2FyIGhhZCBzYWlkIHRoaXMsIHRoZW4gdGhpcyB2aXJ0dW91cyBhdWd1ciBzYWlkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3YXMgaW52ZXN0ZWQgd2l0aCBhIHBvbnRpZmljYXRlIG9mIHRoYXQgc29ydCB0aGF0IGhlIHdhcyBhYmxlLCBieSBtZWFucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBhdXNwaWNlcywgZWl0aGVyIHRvIGhpbmRlciBvciB0byB2aXRpYXRlIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiwganVzdCBhcyBoZSBwbGVhc2VkOyBhbmQgaGUgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBkbyBzby4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.32.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlcmUsIGluIHRoZSBmaXJzdCBwbGFjZSwgcmVtYXJrIHRoZQogICAgICAgICAgICAgICAgICAgIGluY3JlZGlibGUgc3R1cGlkaXR5IG9mIHRoZSBtYW4uIEZvciB3aGF0IGRvIHlvdSBtZWFuPyBDb3VsZCB5b3Ugbm90IGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGhhdmUgZG9uZSB3aGF0IHlvdSBzYWlkIHlvdSBoYWQgbm93IHRoZSBwb3dlciB0byBkbyBieSB0aGUgcHJpdmlsZWdlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhhdCBwb250aWZpY2F0ZSBoYWQgaW52ZXN0ZWQgeW91LCBldmVuIGlmIHlvdSB3ZXJlIG5vdCBhbiBhdWd1ciwgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSBjb25zdWw/IFBlcmhhcHMgeW91IGNvdWxkIGV2ZW4gZG8gaXQgbW9yZSBlYXNpbHkuIEZvciB3ZSBhdWd1cnMgaGF2ZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgdGhlIHBvd2VyIG9mIGFubm91bmNpbmcgdGhhdCB0aGUgYXVzcGljZXMgYXJlIGJlaW5nIG9ic2VydmVkLCBidXQgdGhlIGNvbnN1bHMKICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXIgbWFnaXN0cmF0ZXMgaGF2ZSB0aGUgcmlnaHQgYWxzbyBvZiBvYnNlcnZpbmcgdGhlbSB3aGVuZXZlciB0aGV5CiAgICAgICAgICAgICAgICAgICAgY2hvb3NlLiBCZSBpdCBzby4gWW91IHNhaWQgdGhpcyBvdXQgb2YgaWdub3JhbmNlLiBGb3Igb25lIG11c3Qgbm90IGRlbWFuZAogICAgICAgICAgICAgICAgICAgIHBydWRlbmNlIGZyb20gYSBtYW4gd2hvIGlzIG5ldmVyIHNvYmVyLiBCdXQgc3RpbGwgcmVtYXJrIGhpcyBpbXB1ZGVuY2UuIE1hbnkKICAgICAgICAgICAgICAgICAgICBtb250aHMgYmVmb3JlLCBoZSBzYWlkIGluIHRoZSBzZW5hdGUgdGhhdCBoZSB3b3VsZCBlaXRoZXIgcHJldmVudCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gZnJvbSBhc3NlbWJsaW5nIGZvciB0aGUgZWxlY3Rpb24gb2YgRG9sYWJlbGxhIGJ5CiAgICAgICAgICAgICAgICAgICAgbWVhbnMgb2YgdGhlIGF1c3BpY2VzLCBvciB0aGF0IGhlIHdvdWxkIGRvIHdoYXQgaGUgYWN0dWFsbHkgZGlkIGRvLiBDYW4gYW55IG9uZQogICAgICAgICAgICAgICAgICAgIGRpdmluZSBiZWZvcmVoYW5kIHdoYXQgZGVmZWN0IHRoZXJlIHdpbGwgYmUgaW4gdGhlIGF1c3BpY2VzLCBleGNlcHQgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICBoYXMgYWxyZWFkeSBkZXRlcm1pbmVkIHRvIG9ic2VydmUgdGhlIGhlYXZlbnM/IHdoaWNoIGluIHRoZSBmaXJzdCBwbGFjZSBpdCBpcwogICAgICAgICAgICAgICAgICAgIGZvcmJpZGRlbiBieSBsYXcgdG8gZG8gYXQgdGhlIHRpbWUgb2YgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgIEFuZCBpZiBhbnkgb25lIGhhczsgYmVlbiBvYnNlcnZpbmcgdGhlIGhlYXZlbnMsIGhlIGlzIGJvdW5kIHRvIGdpdmUgbm90aWNlIG9mCiAgICAgICAgICAgICAgICAgICAgaXQsIG5vdCBhZnRlciB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gYXJlIGFzc2VtYmxlZCwgYnV0IGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGhlbGQuIEJ1dCB0aGlzIG1hbidzIGlnbm9yYW5jZSBpcyBqb2luZWQgdG8gaW1wdWRlbmNlLCBub3IgZG9lcyBoZSBrbm93CiAgICAgICAgICAgICAgICAgICAgd2hhdCBhbiBhdWd1ciBvdWdodCB0byBrbm93LCBub3IgZG8gd2hhdCBhIG1vZGVzdCBtYW4gb3VnaHQgdG8gZG8uIDwvdHJhbnNsYXRpb24+"
translation['2.32.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGp1c3QgcmVjb2xsZWN0IHRoZSB3aG9sZSBvZiBoaXMgY29uZHVjdCBkdXJpbmcKICAgICAgICAgICAgICAgICAgICBoaXMgY29uc3Vsc2hpcCBmcm9tIHRoYXQgZGF5IHVwIHRvIHRoZSBpZGVzIG9mIE1hcmNoLiBXaGF0IGxpY3RvciB3YXMgZXZlciBzbwogICAgICAgICAgICAgICAgICAgIGh1bWJsZSwgc28gYWJqZWN0PyBIZSBoaW1zZWxmIGhhZCBubyBwb3dlciBhdCBhbGw7IGhlIGJlZ2dlZCBldmVyeSB0aGluZyBvZgogICAgICAgICAgICAgICAgICAgIG90aGVyczsgYW5kIHRocnVzdGluZyBoaXMgaGVhZCBpbnRvIHRoZSBoaW5kIHBhcnQgb2YgaGlzIGxpdHRlciwgaGUgYmVnZ2VkCiAgICAgICAgICAgICAgICAgICAgZmF2b3JzIG9mIGhpcyBjb2xsZWFndWVzLCB0byBzZWxsIHRoZW0gaGltc2VsZiBhZnRlcndhcmQuIDwvdHJhbnNsYXRpb24+"
translation['2.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJlaG9sZCwgdGhlIGRheSBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gZm9yIHRoZSBlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIERvbGFiZWxsYSBhcnJpdmVzIFRoZSBwcmVyb2dhdGl2ZSBjZW50dXJ5IGRyYXdzIGl0cyBsb3QuIEhlIGlzIHF1aWV0LiBUaGUgdm90ZQogICAgICAgICAgICAgICAgICAgIGlzIGRlY2xhcmVkOyBoZSBpcyBzdGlsbCBzaWxlbnQuIFRoZSBmaXJzdCBjbGFzcyBpcyBjYWxsZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXJlIHNlZW1zIHNvbWUgY29ycnVwdGlvbiBoZXJlLiBPcmVsbGl1cyBhcHBhcmVudGx5IHRoaW5rcyB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICBob3BlbGVzcy48L25vdGU+IEl0cyB2b3RlIGlzIGRlY2xhcmVkLiBUaGVuLCBhcyBpcyB0aGUgdXN1YWwgY291cnNlLCB0aGUKICAgICAgICAgICAgICAgICAgICB2b3RlcyBhcmUgYW5ub3VuY2VkLiBUaGVuIHRoZSBzZWNvbmQgY2xhc3MuIEFuZCBhbGwgdGhpcyBpcyBkb25lIGZhc3RlciB0aGFuIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHRvbGQgaXQuIFdoZW4gdGhlIGJ1c2luZXNzIGlzIG92ZXIsIHRoYXQgZXhjZWxsZW50IGF1Z3VyICh5b3Ugd291bGQgc2F5IGhlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSBDYWl1cyBMYWVsaXVzKSBzYXlzLOKAlOKAnFdlIGFkam91cm4gaXQgdG8gYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGRheS7igJ0gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgzIiB1bml0PSJzZWN0aW9uIiAvPiBPaCB0aGUgbW9uc3Ryb3VzIGltcHVkZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBwcm9jZWVkaW5nISBXaGF0IGhhZCB5b3Ugc2Vlbj8gd2hhdCBoYWQgeW91IHBlcmNlaXZlZD8gd2hhdCBoYWQgeW91CiAgICAgICAgICAgICAgICAgICAgaGVhcmQ/IEZvciB5b3UgZGlkIG5vdCBzYXkgdGhhdCB5b3UgaGFkIGJlZW4gb2JzZXJ2aW5nIHRoZSBoZWF2ZW5zLCBhbmQgaW5kZWVkCiAgICAgICAgICAgICAgICAgICAgeW91IGRvIG5vdCBzYXkgc28gdGhpcyBkYXkuIFRoYXQgZGVmZWN0IHRoZW4gaGFzIGFyaXNlbiwgd2hpY2ggeW91IG9uIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG9mIEphbnVhcnkgaGFkIGFscmVhZHkgZm9yZXNlZW4gd291bGQgYXJpc2UsIGFuZCB3aGljaCB5b3UgaGFkIHByZWRpY3RlZCBzbyBsb25nCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlLiBUaGVyZWZvcmUsIGluIHRydXRoLCB5b3UgaGF2ZSBtYWRlIGEgZmFsc2UgZGVjbGFyYXRpb24gcmVzcGVjdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhdXNwaWNlcywgdG8geW91ciBvd24gZ3JlYXQgbWlzZm9ydHVuZSwgSSBob3BlLCByYXRoZXIgdGhhbiB0byB0aGF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiBZb3UgbGFpZCB0aGUgUm9tYW4gcGVvcGxlIHVuZGVyIHRoZSBvYmxpZ2F0aW9ucyBvZiByZWxpZ2lvbjsgeW91IGFzCiAgICAgICAgICAgICAgICAgICAgYXVndXJzIGludGVycnVwdGVkIGFuIGF1Z3VyOyB5b3UgYXMgY29uc3VsIGludGVycnVwdGVkIGEgY29uc3VsIGJ5IGEgZmFsc2UKICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbiBjb25jZXJuaW5nIHRoZSBhdXNwaWNlcy4gPC9wPgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gZm9yIHRoZSBlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIERvbGFiZWxsYSBhcnJpdmVzIFRoZSBwcmVyb2dhdGl2ZSBjZW50dXJ5IGRyYXdzIGl0cyBsb3QuIEhlIGlzIHF1aWV0LiBUaGUgdm90ZQogICAgICAgICAgICAgICAgICAgIGlzIGRlY2xhcmVkOyBoZSBpcyBzdGlsbCBzaWxlbnQuIFRoZSBmaXJzdCBjbGFzcyBpcyBjYWxsZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXJlIHNlZW1zIHNvbWUgY29ycnVwdGlvbiBoZXJlLiBPcmVsbGl1cyBhcHBhcmVudGx5IHRoaW5rcyB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICBob3BlbGVzcy48L25vdGU+IEl0cyB2b3RlIGlzIGRlY2xhcmVkLiBUaGVuLCBhcyBpcyB0aGUgdXN1YWwgY291cnNlLCB0aGUKICAgICAgICAgICAgICAgICAgICB2b3RlcyBhcmUgYW5ub3VuY2VkLiBUaGVuIHRoZSBzZWNvbmQgY2xhc3MuIEFuZCBhbGwgdGhpcyBpcyBkb25lIGZhc3RlciB0aGFuIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHRvbGQgaXQuIFdoZW4gdGhlIGJ1c2luZXNzIGlzIG92ZXIsIHRoYXQgZXhjZWxsZW50IGF1Z3VyICh5b3Ugd291bGQgc2F5IGhlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSBDYWl1cyBMYWVsaXVzKSBzYXlzLOKAlOKAnFdlIGFkam91cm4gaXQgdG8gYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGRheS7igJ0gPC90cmFuc2xhdGlvbj4="
translation['2.33.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz4gT2ggdGhlIG1vbnN0cm91cyBpbXB1ZGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgcHJvY2VlZGluZyEgV2hhdCBoYWQgeW91IHNlZW4/IHdoYXQgaGFkIHlvdSBwZXJjZWl2ZWQ/IHdoYXQgaGFkIHlvdQogICAgICAgICAgICAgICAgICAgIGhlYXJkPyBGb3IgeW91IGRpZCBub3Qgc2F5IHRoYXQgeW91IGhhZCBiZWVuIG9ic2VydmluZyB0aGUgaGVhdmVucywgYW5kIGluZGVlZAogICAgICAgICAgICAgICAgICAgIHlvdSBkbyBub3Qgc2F5IHNvIHRoaXMgZGF5LiBUaGF0IGRlZmVjdCB0aGVuIGhhcyBhcmlzZW4sIHdoaWNoIHlvdSBvbiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBvZiBKYW51YXJ5IGhhZCBhbHJlYWR5IGZvcmVzZWVuIHdvdWxkIGFyaXNlLCBhbmQgd2hpY2ggeW91IGhhZCBwcmVkaWN0ZWQgc28gbG9uZwogICAgICAgICAgICAgICAgICAgIGJlZm9yZS4gVGhlcmVmb3JlLCBpbiB0cnV0aCwgeW91IGhhdmUgbWFkZSBhIGZhbHNlIGRlY2xhcmF0aW9uIHJlc3BlY3RpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgYXVzcGljZXMsIHRvIHlvdXIgb3duIGdyZWF0IG1pc2ZvcnR1bmUsIEkgaG9wZSwgcmF0aGVyIHRoYW4gdG8gdGhhdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gWW91IGxhaWQgdGhlIFJvbWFuIHBlb3BsZSB1bmRlciB0aGUgb2JsaWdhdGlvbnMgb2YgcmVsaWdpb247IHlvdSBhcwogICAgICAgICAgICAgICAgICAgIGF1Z3VycyBpbnRlcnJ1cHRlZCBhbiBhdWd1cjsgeW91IGFzIGNvbnN1bCBpbnRlcnJ1cHRlZCBhIGNvbnN1bCBieSBhIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb24gY29uY2VybmluZyB0aGUgYXVzcGljZXMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSB3aWxsIHNheSBubyBtb3JlLCBsZXN0IEkgc2hvdWxkIHNlZW0gdG8gYmUgcHVsbGluZyB0byBwaWVjZXMgdGhlIGFjdHMgb2YKICAgICAgICAgICAgICAgICAgICBEb2xhYmVsbGE7IHdoaWNoIG11c3QgaW5ldml0YWJseSBzb21ldGltZSBvciBvdGhlciBiZSBicm91Z2h0IGJlZm9yZSBvdXIKICAgICAgICAgICAgICAgICAgICBjb2xsZWdlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODQiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0YWtlIG5vdGljZSBvZiB0aGUgYXJyb2dhbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSBvZiB0aGUgZmVsbG93LiBBcyBsb25nIGFzIHlvdSBwbGVhc2UsIERvbGFiZWxsYSBpcyBhIGNvbnN1bAogICAgICAgICAgICAgICAgICAgIGlycmVndWxhcmx5IGVsZWN0ZWQ7IGFnYWluLCB3aGlsZSB5b3UgcGxlYXNlLCBoZSBpcyBhIGNvbnN1bCBlbGVjdGVkIHdpdGggYWxsCiAgICAgICAgICAgICAgICAgICAgcHJvcGVyIHJlZ2FyZCB0byB0aGUgYXVzcGljZXMuIElmIGl0IG1lYW5zIG5vdGhpbmcgd2hlbiBhbiBhdWd1ciBnaXZlcyB0aGlzCiAgICAgICAgICAgICAgICAgICAgbm90aWNlIGluIHRob3NlIHdvcmRzIGluIHdoaWNoIHlvdSBnYXZlIG5vdGljZSwgdGhlbiBjb25mZXNzIHRoYXQgeW91LCB3aGVuIHlvdQogICAgICAgICAgICAgICAgICAgIHNhaWQs4oCU4oCcV2UgYWRqb3VybiB0aGlzIHRvIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBkYXks4oCd4oCUd2VyZSBub3Qgc29iZXIuIEJ1dCBpZiB0aG9zZSB3b3JkcyBoYXZlIGFueSBtZWFuaW5nLAogICAgICAgICAgICAgICAgICAgIHRoZW4gSSwgYW4gYXVndXIsIGRlbWFuZCBvZiBteSBjb2xsZWFndWUgdG8ga25vdyB3aGF0IHRoYXQgbWVhbmluZyBpcy4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.33.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRha2Ugbm90aWNlIG9mIHRoZSBhcnJvZ2FuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5zb2xlbmNlIG9mIHRoZSBmZWxsb3cuIEFzIGxvbmcgYXMgeW91IHBsZWFzZSwgRG9sYWJlbGxhIGlzIGEgY29uc3VsCiAgICAgICAgICAgICAgICAgICAgaXJyZWd1bGFybHkgZWxlY3RlZDsgYWdhaW4sIHdoaWxlIHlvdSBwbGVhc2UsIGhlIGlzIGEgY29uc3VsIGVsZWN0ZWQgd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgcmVnYXJkIHRvIHRoZSBhdXNwaWNlcy4gSWYgaXQgbWVhbnMgbm90aGluZyB3aGVuIGFuIGF1Z3VyIGdpdmVzIHRoaXMKICAgICAgICAgICAgICAgICAgICBub3RpY2UgaW4gdGhvc2Ugd29yZHMgaW4gd2hpY2ggeW91IGdhdmUgbm90aWNlLCB0aGVuIGNvbmZlc3MgdGhhdCB5b3UsIHdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgc2FpZCzigJTigJxXZSBhZGpvdXJuIHRoaXMgdG8gYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGRheSzigJ3igJR3ZXJlIG5vdCBzb2Jlci4gQnV0IGlmIHRob3NlIHdvcmRzIGhhdmUgYW55IG1lYW5pbmcsCiAgICAgICAgICAgICAgICAgICAgdGhlbiBJLCBhbiBhdWd1ciwgZGVtYW5kIG9mIG15IGNvbGxlYWd1ZSB0byBrbm93IHdoYXQgdGhhdCBtZWFuaW5nIGlzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgbGVzdCBieSBhbnkgY2hhbmNlLCB3aGlsZSBlbnVtZXJhdGluZyBoaXMgbnVtZXJvdXMgZXhwbG9pdHMsIG91ciBzcGVlY2gKICAgICAgICAgICAgICAgICAgICBzaG91bGQgcGFzcyBvdmVyIHRoZSBmaW5lc3QgYWN0aW9uIG9mIE1hcmN1cyBBbnRvbml1cywgbGV0IHVzIGNvbWUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgTHVwZXJjYWxpYS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIGRvZXMgbm90IGRpc3NlbWJsZSwgTyBjb25zY3JpcHQgZmF0aGVyczsgaXQgaXMgcGxhaW4gdGhhdCBoZSBpcyBhZ2l0YXRlZDsgaGUKICAgICAgICAgICAgICAgICAgICBwZXJzcGlyZXM7IGhlIHR1cm5zIHBhbGUuIExldCBoaW0gZG8gd2hhdCBoZSBwbGVhc2VzLCBwcm92aWRlZCBoZSBpcyBub3Qgc2ljaywKICAgICAgICAgICAgICAgICAgICBhbmQgZG9lcyBub3QgYmVoYXZlIGFzIGJlIGRpZCBpbiB0aGUgTWludWNpYW4gY29sb25uYWRlLiBXaGF0IGRlZmVuY2UgY2FuIGJlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBmb3Igc3VjaCBiZWFzdGx5IGJlaGF2aW91cj8gSSB3aXNoIHRvIGhlYXIsIHRoYXQgSSBtYXkgc2VlIHRoZSBmcnVpdCBvZgogICAgICAgICAgICAgICAgICAgIHRob3NlIGhpZ2ggd2FnZXMgb2YgdGhhdCByaGV0b3JpY2lhbiwgb2YgdGhhdCBsYW5kIGdpdmVuIGluIExlb250aW5pLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODUiIHVuaXQ9InNlY3Rpb24iIC8+IFlvdXIgY29sbGVhZ3VlIHdhcyBzaXR0aW5nIGluIHRoZSByb3N0cmEsIGNsb3RoZWQgaW4KICAgICAgICAgICAgICAgICAgICBwdXJwbGUgcm9iZSwgb24gYSBnb2xkZW4gY2hhaXIsIHdlYXJpbmcgYSBjcm93bi4gWW91IG1vdW50IHRoZSBzdGVwczsgeW91CiAgICAgICAgICAgICAgICAgICAgYXBwcm9hY2ggaGlzIGNoYWlyLCAoaWYgeW91IHdlcmUgYSBwcmllc3Qgb2YgUGFuLCB5b3Ugb3VnaHQgdG8gaGF2ZSByZWNvbGxlY3RlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IHdlcmUgY29uc3VsIHRvbzspIHlvdSBkaXNwbGF5IGEgZGlhZGVtOyBUaGVyZSBpcyBhIGdyb2FuIG92ZXIgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgZm9ydW0uIFdoZXJlIGRpZCB0aGUgZGlhZGVtIGNvbWUgZnJvbT8gRm9yIHlvdSBoYWQgbm90IHBpY2tlZCBpdCB1cCB3aGVuIGx5aW5nCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIGdyb3VuZCwgYnV0IHlvdSBoYWQgYnJvdWdodCBpdCBmcm9tIGhvbWUgd2l0aCB5b3UsIGEgcHJlbWVkaXRhdGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGRlbGliZXJhdGVseSBwbGFubmVkIHdpY2tlZG5lc3MuIFlvdSBwbGFjZWQgdGhlIGRpYWRlbSBvbiBoaXMgaGVhZCBhbWlkIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb2FucyBvZiB0aGUgcGVvcGxlOyBoZSByZWplY3RlZCBpdCBhbWlkIGdyZWF0IGFwcGxhdXNlLiBZb3UgdGhlbiBhbG9uZSwgTwogICAgICAgICAgICAgICAgICAgIHdpY2tlZCBtYW4sIHdlcmUgZm91bmQgYm90aCB0byBhZHZpc2UgdGhlIGFzc3VtcHRpb24gb2Yga2luZ2x5IHBvd2VyLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICB3aXNoIHRvIGhhdmUgaGltIGZvciB5b3VyIG1hc3RlciB3aG8gd2FzIHlvdXIgY29sbGVhZ3VlIGFuZCBhbHNvIHRvIHRyeSB3aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIFJvbWFuIHBlb3BsZSBtaWdodCBiZSBhYmxlIHRvIGJlYXIgYW5kIHRvIGVuZHVyZS4gPG1pbGVzdG9uZSBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHlvdSBldmVuIHNvdWdodCB0byBtb3ZlIGhpcyBwaXR5OyB5b3UgdGhyZXcKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBhdCBoaXMgZmVldCBhcyBhIHN1cHBsaWFudDsgYmVnZ2luZyBmb3Igd2hhdD8gdG8gYmUgYSBzbGF2ZT8gWW91IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYmVnIGl0IGZvciB5b3Vyc2VsZiwgd2hlbiB5b3UgaGFkIGxpdmVkIGluIHN1Y2ggYSB3YXkgZnJvbSB0aGUgdGltZSB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgYSBib3kgdGhhdCB5b3UgY291bGQgYmVhciBldmVyeXRoaW5nLCBhbmQgd291bGQgZmluZCBubyBkaWZmaWN1bHR5IGluIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgYSBzbGF2ZTsgYnV0IGNlcnRhaW5seSB5b3UgaGFkIG5vIGNvbW1pc3Npb24gZnJvbSB0aGUgUm9tYW4gcGVvcGxlIHRvIHRyeSBmb3IKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgdGhpbmcgZm9yIHRoZW0uIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.34.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz4gWW91ciBjb2xsZWFndWUgd2FzIHNpdHRpbmcgaW4gdGhlIHJvc3RyYSwgY2xvdGhlZCBpbgogICAgICAgICAgICAgICAgICAgIHB1cnBsZSByb2JlLCBvbiBhIGdvbGRlbiBjaGFpciwgd2VhcmluZyBhIGNyb3duLiBZb3UgbW91bnQgdGhlIHN0ZXBzOyB5b3UKICAgICAgICAgICAgICAgICAgICBhcHByb2FjaCBoaXMgY2hhaXIsIChpZiB5b3Ugd2VyZSBhIHByaWVzdCBvZiBQYW4sIHlvdSBvdWdodCB0byBoYXZlIHJlY29sbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Ugd2VyZSBjb25zdWwgdG9vOykgeW91IGRpc3BsYXkgYSBkaWFkZW07IFRoZXJlIGlzIGEgZ3JvYW4gb3ZlciB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBmb3J1bS4gV2hlcmUgZGlkIHRoZSBkaWFkZW0gY29tZSBmcm9tPyBGb3IgeW91IGhhZCBub3QgcGlja2VkIGl0IHVwIHdoZW4gbHlpbmcKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZ3JvdW5kLCBidXQgeW91IGhhZCBicm91Z2h0IGl0IGZyb20gaG9tZSB3aXRoIHlvdSwgYSBwcmVtZWRpdGF0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0ZWx5IHBsYW5uZWQgd2lja2VkbmVzcy4gWW91IHBsYWNlZCB0aGUgZGlhZGVtIG9uIGhpcyBoZWFkIGFtaWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JvYW5zIG9mIHRoZSBwZW9wbGU7IGhlIHJlamVjdGVkIGl0IGFtaWQgZ3JlYXQgYXBwbGF1c2UuIFlvdSB0aGVuIGFsb25lLCBPCiAgICAgICAgICAgICAgICAgICAgd2lja2VkIG1hbiwgd2VyZSBmb3VuZCBib3RoIHRvIGFkdmlzZSB0aGUgYXNzdW1wdGlvbiBvZiBraW5nbHkgcG93ZXIsIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIHdpc2ggdG8gaGF2ZSBoaW0gZm9yIHlvdXIgbWFzdGVyIHdobyB3YXMgeW91ciBjb2xsZWFndWUgYW5kIGFsc28gdG8gdHJ5IHdoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgUm9tYW4gcGVvcGxlIG1pZ2h0IGJlIGFibGUgdG8gYmVhciBhbmQgdG8gZW5kdXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.34.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHlvdSBldmVuIHNvdWdodCB0byBtb3ZlIGhpcyBwaXR5OyB5b3UgdGhyZXcKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBhdCBoaXMgZmVldCBhcyBhIHN1cHBsaWFudDsgYmVnZ2luZyBmb3Igd2hhdD8gdG8gYmUgYSBzbGF2ZT8gWW91IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYmVnIGl0IGZvciB5b3Vyc2VsZiwgd2hlbiB5b3UgaGFkIGxpdmVkIGluIHN1Y2ggYSB3YXkgZnJvbSB0aGUgdGltZSB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgYSBib3kgdGhhdCB5b3UgY291bGQgYmVhciBldmVyeXRoaW5nLCBhbmQgd291bGQgZmluZCBubyBkaWZmaWN1bHR5IGluIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgYSBzbGF2ZTsgYnV0IGNlcnRhaW5seSB5b3UgaGFkIG5vIGNvbW1pc3Npb24gZnJvbSB0aGUgUm9tYW4gcGVvcGxlIHRvIHRyeSBmb3IKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgdGhpbmcgZm9yIHRoZW0uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2ggaG93IHNwbGVuZGlkIHdhcyB0aGF0IGVsb3F1ZW5jZSBvZiB5b3Vycywgd2hlbiB5b3UgaGFyYW5ndWVkIHRoZSBwZW9wbGUgc3RhcmsKICAgICAgICAgICAgICAgICAgICBuYWtlZCEgd2hhdCBjb3VsZCBiZSBtb3JlIGZvdWwgdGhhbiB0aGlzPyBtb3JlIHNoYW1lZnVsIHRoYW4gdGhpcz8gbW9yZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmluZyBvZiBldmVyeSBzb3J0IG9mIHB1bmlzaG1lbnQ/IEFyZSB5b3Ugd2FpdGluZyBmb3IgbWUgdG8gcHJpY2sgeW91IG1vcmU/CiAgICAgICAgICAgICAgICAgICAgVGhpcyB0aGF0IEkgYW0gc2F5aW5nIG11c3QgdGVhciB5b3UgYW5kIGJyaW5nIGJsb29kIGVub3VnaCBpZiB5b3UgaGF2ZSBhbnkKICAgICAgICAgICAgICAgICAgICBmZWVsaW5nIGF0IGFsbC4gSSBhbSBhZnJhaWQgdGhhdCBJIG1heSBiZSBkZXRyYWN0aW5nIGZyb20gdGhlIGdsb3J5IG9mIHNvbWUgbW9zdAogICAgICAgICAgICAgICAgICAgIGVtaW5lbnQgbWVuLiBTdGlsbCBteSBpbmRpZ25hdGlvbiBzaGFsbCBmaW5kIGEgdm9pY2UuIFdoYXQgY2FuIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBzY2FuZGFsb3VzIHRoYW4gZm9yIHRoYXQgbWFuIHRvIGxpdmUgd2hvIHBsYWNlZCBhIGRpYWRlbSBvbiBhIG1hbidzIGhlYWQsIHdoZW4KICAgICAgICAgICAgICAgICAgICBldmVyeSBvbmUgY29uZmVzc2VzIHRoYXQgdGhhdCBtYW4gd2FzIGRlc2VydmVkbHkgc2xhaW4gd2hvIHJlamVjdGVkIGl0PwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODciIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCwgbW9yZW92ZXIsIGhlIGNhdXNlZCBpdCB0byBiZQogICAgICAgICAgICAgICAgICAgIHJlY29yZGVkIGluIHRoZSBhbm5hbHMsIHVuZGVyIHRoZSBoZWFkIG9mIEx1cGVyY2FsaWEsIOKAnFRoYXQgTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIHRoZSBjb25zdWwsIGJ5IGNvbW1hbmQgb2YgdGhlIHBlb3BsZSwgaGFkIG9mZmVyZWQgdGhlIGtpbmdkb20gdG8gQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIsIHBlcnBldHVhbCBkaWN0YXRvcjsgYW5kIHRoYXQgQ2Flc2FyIGhhZCByZWZ1c2VkIHRvIGFjY2VwdCBpdC7igJ0KICAgICAgICAgICAgICAgICAgICBJIG5vdyBhbSBub3QgbXVjaCBzdXJwcmlzZWQgYXQgeW91ciBzZWVraW5nIHRvIGRpc3R1cmIgdGhlIGdlbmVyYWwgdHJhbnF1aWxsaXR5OwogICAgICAgICAgICAgICAgICAgIGF0IHlvdXIgaGF0aW5nIG5vdCBvbmx5IHRoZSBjaXR5IGJ1dCB0aGUgbGlnaHQgb2YgZGF5OyBhbmQgYXQgeW91ciBsaXZpbmcgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgcGFjayBvZiBhYmFuZG9uZWQgcm9iYmVycywgZGlzcmVnYXJkaW5nIHRoZSBkYXksIGFuZCB5ZXQgcmVnYXJkaW5nIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBiZXlvbmQgdGhlIGRheS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBMYXRpbiBpcywg4oCcPGZvcmVpZ24gbGFuZz0ibGEiPm5vbiBzb2x1bSBkZSBkaWUsIHNlZCBldGlhbSBpbiBkaWVtIHZpdmVyZTwvZm9yZWlnbj474oCdIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb21tZW50YXRvcnMgZXhwbGFpbiDigJw8Zm9yZWlnbiBsYW5nPSJsYSI+RGUgZGllPC9mb3JlaWduPiBpcwogICAgICAgICAgICAgICAgICAgICAgICB0byBmZWFzdCBldmVyeSBkYXkgYW5kIGFsbCBkYXkuIEJhbnF1ZXRzIDxmb3JlaWduIGxhbmc9ImxhIj5kZSBkaWU8L2ZvcmVpZ24+CiAgICAgICAgICAgICAgICAgICAgICAgIGFyZSB0aG9zZSB3aGljaCBiZWdpbiBiZWZvcmUgdGhlIHJlZ3VsYXIgaG91ci7igJ0gKExpa2UgSG9yYWNlJ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5QYXJ0ZW0gc29saWRvIGRlbWVyZSBkZSBkaWU8L2ZvcmVpZ24+Likg4oCcVG8KICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZSA8Zm9yZWlnbiBsYW5nPSJsYSI+aW4gZGllbTwvZm9yZWlnbj4gaXMgdG8gbGl2ZSBhcyBzbyBhcyB0byBoYXZlIG5vCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgZm9yIHRoZSBmdXR1cmUu4oCd4oCUR3JhZXZpdXMuPC9ub3RlPiBGb3Igd2hlcmUgY2FuCiAgICAgICAgICAgICAgICAgICAgeW91IGJlIHNhZmUgaW4gcGVhY2U/IFdoYXQgcGxhY2UgY2FuIHRoZXJlIGJlIGZvciB5b3Ugd2hlcmUgbGF3cyBhbmQgY291cnRzIG9mCiAgICAgICAgICAgICAgICAgICAganVzdGljZSBoYXZlIHN3YXksIGJvdGggb2Ygd2hpY2ggeW91LCBhcyBmYXIgYXMgaW4geW91IGxheSwgZGVzdHJveWVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbiBvZiBraW5nbHkgcG93ZXI/IFdhcyBpdCBmb3IgdGhpcyB0aGF0IEx1Y2l1cyBUYXJxdWluaXVzIHdhcyBkcml2ZW4KICAgICAgICAgICAgICAgICAgICBvdXQ7IHRoYXQgU3B1cml1cyBDYXNzaXVzLCBhbmQgU3B1cml1cyBNYWVsaXVzLCBhbmQgTWFyY3VzIE1hbmxpdXMgd2VyZSBzbGFpbjsKICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbnkgeWVhcnMgYWZ0ZXJ3YXJkcyBhIGtpbmcgbWlnaHQgYmUgZXN0YWJsaXNoZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSBNYXJjdXMgQW50b25pdXMgdGhvdWdoIHRoZSBiYXJlIGlkZWEKICAgICAgICAgICAgICAgICAgICB3YXMgaW1waWV0eT8gSG93IGV2ZXIsIGxldCB1cyByZXR1cm4gdG8gdGhlIGF1c3BpY2VzLiA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iODgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.34.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBtb3Jlb3ZlciwgaGUgY2F1c2VkIGl0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcmVjb3JkZWQgaW4gdGhlIGFubmFscywgdW5kZXIgdGhlIGhlYWQgb2YgTHVwZXJjYWxpYSwg4oCcVGhhdCBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cywgdGhlIGNvbnN1bCwgYnkgY29tbWFuZCBvZiB0aGUgcGVvcGxlLCBoYWQgb2ZmZXJlZCB0aGUga2luZ2RvbSB0byBDYWl1cwogICAgICAgICAgICAgICAgICAgIENhZXNhciwgcGVycGV0dWFsIGRpY3RhdG9yOyBhbmQgdGhhdCBDYWVzYXIgaGFkIHJlZnVzZWQgdG8gYWNjZXB0IGl0LuKAnQogICAgICAgICAgICAgICAgICAgIEkgbm93IGFtIG5vdCBtdWNoIHN1cnByaXNlZCBhdCB5b3VyIHNlZWtpbmcgdG8gZGlzdHVyYiB0aGUgZ2VuZXJhbCB0cmFucXVpbGxpdHk7CiAgICAgICAgICAgICAgICAgICAgYXQgeW91ciBoYXRpbmcgbm90IG9ubHkgdGhlIGNpdHkgYnV0IHRoZSBsaWdodCBvZiBkYXk7IGFuZCBhdCB5b3VyIGxpdmluZyB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBwYWNrIG9mIGFiYW5kb25lZCByb2JiZXJzLCBkaXNyZWdhcmRpbmcgdGhlIGRheSwgYW5kIHlldCByZWdhcmRpbmcgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgZGF5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgTGF0aW4gaXMsIOKAnDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vbiBzb2x1bSBkZSBkaWUsIHNlZCBldGlhbSBpbiBkaWVtIHZpdmVyZTwvZm9yZWlnbj474oCdIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb21tZW50YXRvcnMgZXhwbGFpbiDigJw8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5EZSBkaWU8L2ZvcmVpZ24+IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGZlYXN0IGV2ZXJ5IGRheSBhbmQgYWxsIGRheS4gQmFucXVldHMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGUgZGllPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICBhcmUgdGhvc2Ugd2hpY2ggYmVnaW4gYmVmb3JlIHRoZSByZWd1bGFyIGhvdXIu4oCdIChMaWtlIEhvcmFjZSdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QYXJ0ZW0gc29saWRvIGRlbWVyZSBkZSBkaWU8L2ZvcmVpZ24+Likg4oCcVG8KICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbiBkaWVtPC9mb3JlaWduPiBpcyB0byBsaXZlIGFzIHNvIGFzIHRvIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdodCBmb3IgdGhlIGZ1dHVyZS7igJ3igJRHcmFldml1cy48L25vdGU+IEZvciB3aGVyZSBjYW4KICAgICAgICAgICAgICAgICAgICB5b3UgYmUgc2FmZSBpbiBwZWFjZT8gV2hhdCBwbGFjZSBjYW4gdGhlcmUgYmUgZm9yIHlvdSB3aGVyZSBsYXdzIGFuZCBjb3VydHMgb2YKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIGhhdmUgc3dheSwgYm90aCBvZiB3aGljaCB5b3UsIGFzIGZhciBhcyBpbiB5b3UgbGF5LCBkZXN0cm95ZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uIG9mIGtpbmdseSBwb3dlcj8gV2FzIGl0IGZvciB0aGlzIHRoYXQgTHVjaXVzIFRhcnF1aW5pdXMgd2FzIGRyaXZlbgogICAgICAgICAgICAgICAgICAgIG91dDsgdGhhdCBTcHVyaXVzIENhc3NpdXMsIGFuZCBTcHVyaXVzIE1hZWxpdXMsIGFuZCBNYXJjdXMgTWFubGl1cyB3ZXJlIHNsYWluOwogICAgICAgICAgICAgICAgICAgIHRoYXQgbWFueSB5ZWFycyBhZnRlcndhcmRzIGEga2luZyBtaWdodCBiZSBlc3RhYmxpc2hlZCBhdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub24gc29sdW0gZGUgZGllLCBzZWQgZXRpYW0gaW4gZGllbSB2aXZlcmU8L2ZvcmVpZ24+O+KAnSB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29tbWVudGF0b3JzIGV4cGxhaW4g4oCcPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RGUgZGllPC9mb3JlaWduPiBpcwogICAgICAgICAgICAgICAgICAgICAgICB0byBmZWFzdCBldmVyeSBkYXkgYW5kIGFsbCBkYXkuIEJhbnF1ZXRzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlIGRpZTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHRob3NlIHdoaWNoIGJlZ2luIGJlZm9yZSB0aGUgcmVndWxhciBob3VyLuKAnSAoTGlrZSBIb3JhY2UncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UGFydGVtIHNvbGlkbyBkZW1lcmUgZGUgZGllPC9mb3JlaWduPi4pIOKAnFRvCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW4gZGllbTwvZm9yZWlnbj4gaXMgdG8gbGl2ZSBhcyBzbyBhcyB0byBoYXZlIG5vCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgZm9yIHRoZSBmdXR1cmUu4oCd4oCUR3JhZXZpdXMuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGJ5IE1hcmN1cyBBbnRvbml1cyB0aG91Z2ggdGhlIGJhcmUgaWRlYQogICAgICAgICAgICAgICAgICAgIHdhcyBpbXBpZXR5PyBIb3cgZXZlciwgbGV0IHVzIHJldHVybiB0byB0aGUgYXVzcGljZXMuIDwvdHJhbnNsYXRpb24+"
translation['2.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.35.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldpdGggcmVzcGVjdCB0byBhbGwgdGhlIHRoaW5ncyB3aGljaCBDYWVzYXIgd2FzIGludGVuZGluZyB0byBkbyBpbiB0aGUgc2VuYXRlIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGlkZXMgb2YgTWFyY2gsIEkgYXNrIHdoZXRoZXIgeW91IGhhdmUgZG9uZSBhbnkgdGhpbmc/IEkgaGVhcmQsIGluZGVlZCwgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBoYWQgY29tZSBkb3duIHByZXBhcmVkLCBiZWNhdXNlIHlvdSB0aG91Z2h0IHRoYXQgSSBpbnRlbmRlZCB0byBzcGVhayBhYm91dAogICAgICAgICAgICAgICAgICAgIHlvdXIgaGF2aW5nIG1hZGUgYSBmYWxzZSBzdGF0ZW1lbnQgcmVzcGVjdGluZyB0aGUgYXVzcGljZXMsIHRob3VnaCBpdCB3YXMgc3RpbGwKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgZm9yIHVzIHRvIHJlc3BlY3QgdGhlbS4gVGhlIGZvcnR1bmUgb2YgdGhlIFJvbWFuIHBlb3BsZSBzYXZlZCB1cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhhdCBkYXkuIERpZCB0aGUgZGVhdGggb2YgQ2Flc2FyIGFsc28gcHV0IGFuIGVuZCB0byB5b3VyIG9waW5pb24gcmVzcGVjdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhdXNwaWNlcz8gQnV0IEkgaGF2ZSBjb21lIHRvIG1lbnRpb24gdGhhdCBvY2Nhc2lvbiB3aGljaCBtdXN0IGJlIGFsbG93ZWQgdG8KICAgICAgICAgICAgICAgICAgICBwcmVjZWRlIHRob3NlIG1hdHRlcnMgd2hpY2ggSSBoYWQgYmVndW4gdG8gZGlzY3Vzcy4gV2hhdCBhIGZsaWdodCB3YXMgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIHlvdXJzISBXaGF0IGFsYXJtIHdhcyB5b3VycyBvbiB0aGF0IG1lbW9yYWJsZSBkYXkhIEhvdywgZnJvbSB0aGUgY29uc2Npb3VzbmVzcwogICAgICAgICAgICAgICAgICAgIG9mIHlvdXIgd2lja2VkbmVzcywgZGlkIHlvdSBkZXNwYWlyIG9mIHlvdXIgbGlmZSEgSG93LCB3aGlsZSBmbHlpbmcsIHdlcmUgeW91CiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZCBzZWNyZXRseSB0byBnZXQgaG9tZSBieSB0aGUga2luZG5lc3Mgb2YgdGhvc2UgbWVuIHdobyB3aXNoZWQgdG8gc2F2ZQogICAgICAgICAgICAgICAgICAgIHlvdSwgdGhpbmtpbmcgeW91IHdvdWxkIHNob3cgbW9yZSBzZW5zZSB0aGFuIHlvdSBkbyEgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijg5IiB1bml0PSJzZWN0aW9uIiAvPiBPIGhvdyB2YWluIGhhdmUgYXQgYWxsIHRpbWVzIGJlZW4gbXkgdG9vIHRydWUgcHJlZGljdGlvbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZnV0dXJlISBJIHRvbGQgdGhvc2UgZGVsaXZlcmVycyBvZiBvdXJzIGluIHRoZSBDYXBpdG9sLCB3aGVuIHRoZXkgd2lzaGVkCiAgICAgICAgICAgICAgICAgICAgbWUgdG8gZ28gdG8geW91IHRvIGV4aG9ydCB5b3UgdG8gZGVmZW5kIHRoZSByZXB1YmxpYywgdGhhdCBhcyBsb25nIGFzIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW4gZmVhciB5b3Ugd291bGQgcHJvbWlzZSBldmVyeSB0aGluZywgYnV0IHRoYXQgYXMgc29vbiBhcyB5b3UgaGFkIGVtYW5jaXBhdGVkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgZnJvbSBhbGFybSB5b3Ugd291bGQgYmUgeW91cnNlbGYgYWdhaW4uIFRoZXJlZm9yZSwgd2hpbGUgdGhlIHJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbWVuIG9mIGNvbnN1bGFyIHJhbmsgd2VyZSBnb2luZyBiYWNrd2FyZCBhbmQgZm9yd2FyZCB0byB5b3UsIEkgYWRoZXJlZCB0byBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIG5vciBkaWQgSSBzZWUgeW91IGF0IGFsbCB0aGF0IGRheSwgb3IgdGhlIG5leHQ7IG5vciBkaWQgSSB0aGluayBpdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIGZvciBhbiBhbGxpYW5jZSBiZXR3ZWVuIHZpcnR1b3VzIGNpdGl6ZW5zIGFuZCBhIG1vc3QgdW5wcmluY2lwbGVkIGVuZW15CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbWFkZSwgc28gYXMgdG8gbGFzdCwgYnkgYW55IHRyZWF0eSBvciBlbmdhZ2VtZW50IHdoYXRldmVyLiBUaGUgdGhpcmQgZGF5IEkKICAgICAgICAgICAgICAgICAgICBjYW1lIGludG8gdGhlIHRlbXBsZSBvZiBUZWxsdXMsIGV2ZW4gdGhlbiB2ZXJ5IG11Y2ggYWdhaW5zdCBteSB3aWxsLCBhcyBhcm1lZAogICAgICAgICAgICAgICAgICAgIG1lbiB3ZXJlIGJsb2NrYWRpbmcgYWxsIHRoZSBhcHByb2FjaGVzLiA8bWlsZXN0b25lIG49IjkwIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0CiAgICAgICAgICAgICAgICAgICAgYSBkYXkgd2FzIHRoYXQgZm9yIHlvdSwgTyBNYXJjdXMgQW50b25pdXMhIEFsdGhvdWdoIHlvdSBzaG93ZWQgeW91cnNlbGYgYWxsIG9uIGEKICAgICAgICAgICAgICAgICAgICBzdWRkZW4gYW4gZW5lbXkgdG8gbWU7IHN0aWxsIEkgcGl0eSB5b3UgZm9yIGhhdmluZyBlbnZpZWQgeW91cnNlbGYuIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.35.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz4gTyBob3cgdmFpbiBoYXZlIGF0IGFsbCB0aW1lcyBiZWVuIG15IHRvbyB0cnVlIHByZWRpY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGZ1dHVyZSEgSSB0b2xkIHRob3NlIGRlbGl2ZXJlcnMgb2Ygb3VycyBpbiB0aGUgQ2FwaXRvbCwgd2hlbiB0aGV5IHdpc2hlZAogICAgICAgICAgICAgICAgICAgIG1lIHRvIGdvIHRvIHlvdSB0byBleGhvcnQgeW91IHRvIGRlZmVuZCB0aGUgcmVwdWJsaWMsIHRoYXQgYXMgbG9uZyBhcyB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIGluIGZlYXIgeW91IHdvdWxkIHByb21pc2UgZXZlcnkgdGhpbmcsIGJ1dCB0aGF0IGFzIHNvb24gYXMgeW91IGhhZCBlbWFuY2lwYXRlZAogICAgICAgICAgICAgICAgICAgIHlvdXJzZWxmIGZyb20gYWxhcm0geW91IHdvdWxkIGJlIHlvdXJzZWxmIGFnYWluLiBUaGVyZWZvcmUsIHdoaWxlIHRoZSByZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rIHdlcmUgZ29pbmcgYmFja3dhcmQgYW5kIGZvcndhcmQgdG8geW91LCBJIGFkaGVyZWQgdG8gbXkKICAgICAgICAgICAgICAgICAgICBvcGluaW9uLCBub3IgZGlkIEkgc2VlIHlvdSBhdCBhbGwgdGhhdCBkYXksIG9yIHRoZSBuZXh0OyBub3IgZGlkIEkgdGhpbmsgaXQKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBmb3IgYW4gYWxsaWFuY2UgYmV0d2VlbiB2aXJ0dW91cyBjaXRpemVucyBhbmQgYSBtb3N0IHVucHJpbmNpcGxlZCBlbmVteQogICAgICAgICAgICAgICAgICAgIHRvIGJlIG1hZGUsIHNvIGFzIHRvIGxhc3QsIGJ5IGFueSB0cmVhdHkgb3IgZW5nYWdlbWVudCB3aGF0ZXZlci4gVGhlIHRoaXJkIGRheSBJCiAgICAgICAgICAgICAgICAgICAgY2FtZSBpbnRvIHRoZSB0ZW1wbGUgb2YgVGVsbHVzLCBldmVuIHRoZW4gdmVyeSBtdWNoIGFnYWluc3QgbXkgd2lsbCwgYXMgYXJtZWQKICAgICAgICAgICAgICAgICAgICBtZW4gd2VyZSBibG9ja2FkaW5nIGFsbCB0aGUgYXBwcm9hY2hlcy4gPC90cmFuc2xhdGlvbj4="
translation['2.35.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIGEgZGF5IHdhcyB0aGF0IGZvciB5b3UsIE8gTWFyY3VzIEFudG9uaXVzISBBbHRob3VnaCB5b3Ugc2hvd2VkIHlvdXJzZWxmIGFsbCBvbiBhCiAgICAgICAgICAgICAgICAgICAgc3VkZGVuIGFuIGVuZW15IHRvIG1lOyBzdGlsbCBJIHBpdHkgeW91IGZvciBoYXZpbmcgZW52aWVkIHlvdXJzZWxmLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgYSBtYW4sIE8geWUgaW1tb3J0YWwgZ29kcyEgYW5kIGhvdyBncmVhdCBhIG1hbiBtaWdodCB5b3UgaGF2ZSBiZWVuLCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBhYmxlIHRvIHByZXNlcnZlIHRoZSBpbmNsaW5hdGlvbiB5b3UgZGlzcGxheWVkIHRoYXQgZGF5O+KAlHdlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHN0aWxsIGhhdmUgcGVhY2Ugd2hpY2ggd2FzIG1hZGUgdGhlbiBieSB0aGUgcGxlZGdlIG9mIGEgaG9zdGFnZSwgYSBib3kgb2YKICAgICAgICAgICAgICAgICAgICBub2JsZSBiaXJ0aCwgdGhlIGdyYW5kc29uIG9mIE1hcmN1cyBCYW1iYWxsby4gQWx0aG91Z2ggaXQgd2FzIGZlYXIgdGhhdCB3YXMgdGhlbgogICAgICAgICAgICAgICAgICAgIG1ha2luZyB5b3UgYSBnb29kIGNpdGl6ZW4sIHdoaWNoIGlzIG5ldmVyIGEgbGFzdGluZyB0ZWFjaGVyIG9mIGR1dHk7IHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgYXVkYWNpdHksIHdoaWNoIG5ldmVyIGRlcGFydHMgZnJvbSB5b3UgYXMgbG9uZyBhcyB5b3UgYXJlIGZyZWUgZnJvbSBmZWFyLCBoYXMKICAgICAgICAgICAgICAgICAgICBtYWRlIHlvdSBhIHdvcnRobGVzcyBvbmUuIEFsdGhvdWdoIGV2ZW4gYXQgdGhhdCB0aW1lLCB3aGVuIHRoZXkgdGhvdWdodCB5b3UgYW4KICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgbWFuLCB0aG91Z2ggSSBpbmRlZWQgZGlmZmVyZWQgZnJvbSB0aGF0IG9waW5pb24sIHlvdSBiZWhhdmVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3Qgd2lja2VkbmVzcyB3aGlsZSBwcmVzaWRpbmcgYXQgdGhlIGZ1bmVyYWwgb2YgdGhlIHR5cmFudCwgaWYgdGhhdCBvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGNhbGxlZCBhIGZ1bmVyYWwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgZmluZQogICAgICAgICAgICAgICAgICAgIHBhbmVneXJpYyB3YXMgeW91cnMsIHRoYXQgY29tbWlzZXJhdGlvbiB3YXMgeW91cnMsIHRoYXQgZXhob3J0YXRpb24gd2FzIHlvdXJzLgogICAgICAgICAgICAgICAgICAgIEl0IHdhcyB5b3XigJR5b3UsIEkgc2F54oCUd2hvIGh1cmxlZCB0aG9zZSBmaXJlYnJhbmRzLCBib3RoCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2l0aCB3aGljaCB5b3VyIGZyaWVuZCBoaW1zZWxmIHdhcyBuZWFybHkgYnVybmVkLCBhbmQgdGhvc2UgYnkgd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgTHVjaXVzIEJlbGxpZW51cyB3YXMgc2V0IG9uIGZpcmUgYW5kIGRlc3Ryb3llZC4gSXQgd2FzIHlvdSB3aG8gbGV0CiAgICAgICAgICAgICAgICAgICAgbG9vc2UgdGhvc2UgYXR0YWNrcyBvZiBhYmFuZG9uZWQgbWVuLCBzbGF2ZXMgZm9yIHRoZSBtb3N0IHBhcnQsIHdoaWNoIHdlCiAgICAgICAgICAgICAgICAgICAgcmVwZWxsZWQgYnkgdmlvbGVuY2UgYW5kIG91ciBvd24gcGVyc29uYWwgZXhlcnRpb25zOyBpdCB3YXMgeW91IHdobyBzZXQgdGhlbSBvbgogICAgICAgICAgICAgICAgICAgIHRvIGF0dGFjayBvdXIgaG91c2VzLiBBbmQgeWV0IHlvdSwgYXMgaWYgeW91IGhhZCB3aXBlZCBvZmYgYWxsIHRoZSBzb290IGFuZAogICAgICAgICAgICAgICAgICAgIHNtb2tlIGluIHRoZSBlbnN1aW5nIGRheXMsIGNhcnJpZWQgdGhvc2UgZXhjZWxsZW50IHJlc29sdXRpb25zIGluIHRoZSBDYXBpdG9sLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm8gZG9jdW1lbnQgY29uZmVycmluZyBhbnkgZXhlbXB0aW9uLCBvciBncmFudGluZyBhbnkgZmF2b3IsIHNob3VsZCBoZQogICAgICAgICAgICAgICAgICAgIHB1Ymxpc2hlZCBhZnRlciB0aGUgaWRlcyBvZiBNYXJjaC4gWW91IHJlY29sbGVjdCB5b3Vyc2VsZiwgd2hhdCB5b3Ugc2FpZCBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoZSBleGlsZXM7IHlvdSBrbm93IHdoYXQgeW91IHNhaWQgYWJvdXQgdGhlIGV4ZW1wdGlvbjsgYnV0IHRoZSBiZXN0IHRoaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHdhcywgdGhhdCB5b3UgZm9yZXZlciBhYm9saXNoZWQgdGhlIG5hbWUgb2YgdGhlIGRpY3RhdG9yc2hpcCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gV2hpY2ggYWN0IGFwcGVhcmVkIHRvIHNob3cgdGhhdCB5b3UgaGFkIGNvbmNlaXZlZCBzdWNoIGEgaGF0cmVkIG9mCiAgICAgICAgICAgICAgICAgICAga2luZ2x5IHBvd2VyIHRoYXQgeW91IHRvb2sgYXdheSBhbGwgZmVhciBvZiBpdCBmb3IgdGhlIGZ1dHVyZSwgb24gYWNjb3VudCBvZiBoaW0KICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIGJlZW4gdGhlIGxhc3QgZGljdGF0b3IuIDxtaWxlc3RvbmUgbj0iOTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.36.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgZmluZQogICAgICAgICAgICAgICAgICAgIHBhbmVneXJpYyB3YXMgeW91cnMsIHRoYXQgY29tbWlzZXJhdGlvbiB3YXMgeW91cnMsIHRoYXQgZXhob3J0YXRpb24gd2FzIHlvdXJzLgogICAgICAgICAgICAgICAgICAgIEl0IHdhcyB5b3XigJR5b3UsIEkgc2F54oCUd2hvIGh1cmxlZCB0aG9zZSBmaXJlYnJhbmRzLCBib3RoCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2l0aCB3aGljaCB5b3VyIGZyaWVuZCBoaW1zZWxmIHdhcyBuZWFybHkgYnVybmVkLCBhbmQgdGhvc2UgYnkgd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgTHVjaXVzIEJlbGxpZW51cyB3YXMgc2V0IG9uIGZpcmUgYW5kIGRlc3Ryb3llZC4gSXQgd2FzIHlvdSB3aG8gbGV0CiAgICAgICAgICAgICAgICAgICAgbG9vc2UgdGhvc2UgYXR0YWNrcyBvZiBhYmFuZG9uZWQgbWVuLCBzbGF2ZXMgZm9yIHRoZSBtb3N0IHBhcnQsIHdoaWNoIHdlCiAgICAgICAgICAgICAgICAgICAgcmVwZWxsZWQgYnkgdmlvbGVuY2UgYW5kIG91ciBvd24gcGVyc29uYWwgZXhlcnRpb25zOyBpdCB3YXMgeW91IHdobyBzZXQgdGhlbSBvbgogICAgICAgICAgICAgICAgICAgIHRvIGF0dGFjayBvdXIgaG91c2VzLiBBbmQgeWV0IHlvdSwgYXMgaWYgeW91IGhhZCB3aXBlZCBvZmYgYWxsIHRoZSBzb290IGFuZAogICAgICAgICAgICAgICAgICAgIHNtb2tlIGluIHRoZSBlbnN1aW5nIGRheXMsIGNhcnJpZWQgdGhvc2UgZXhjZWxsZW50IHJlc29sdXRpb25zIGluIHRoZSBDYXBpdG9sLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm8gZG9jdW1lbnQgY29uZmVycmluZyBhbnkgZXhlbXB0aW9uLCBvciBncmFudGluZyBhbnkgZmF2b3IsIHNob3VsZCBoZQogICAgICAgICAgICAgICAgICAgIHB1Ymxpc2hlZCBhZnRlciB0aGUgaWRlcyBvZiBNYXJjaC4gWW91IHJlY29sbGVjdCB5b3Vyc2VsZiwgd2hhdCB5b3Ugc2FpZCBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoZSBleGlsZXM7IHlvdSBrbm93IHdoYXQgeW91IHNhaWQgYWJvdXQgdGhlIGV4ZW1wdGlvbjsgYnV0IHRoZSBiZXN0IHRoaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHdhcywgdGhhdCB5b3UgZm9yZXZlciBhYm9saXNoZWQgdGhlIG5hbWUgb2YgdGhlIGRpY3RhdG9yc2hpcCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gV2hpY2ggYWN0IGFwcGVhcmVkIHRvIHNob3cgdGhhdCB5b3UgaGFkIGNvbmNlaXZlZCBzdWNoIGEgaGF0cmVkIG9mCiAgICAgICAgICAgICAgICAgICAga2luZ2x5IHBvd2VyIHRoYXQgeW91IHRvb2sgYXdheSBhbGwgZmVhciBvZiBpdCBmb3IgdGhlIGZ1dHVyZSwgb24gYWNjb3VudCBvZiBoaW0KICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIGJlZW4gdGhlIGxhc3QgZGljdGF0b3IuIDwvdHJhbnNsYXRpb24+"
translation['2.36.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VG8gb3RoZXIgbWVuIHRoZSByZXB1YmxpYyBub3cgc2VlbWVkIGVzdGFibGlzaGVkLCBidXQgaXQgZGlkIG5vdCBhcHBlYXIgc28gYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgdG8gbWUsIGFzIEkgd2FzIGFmcmFpZCBvZiBldmVyeSBzb3J0IG9mIHNoaXB3cmVjaywgYXMgbG9uZyBhcyB5b3Ugd2VyZSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoZWxtLiBIYXZlIEkgYmVlbiBkZWNlaXZlZD8gb3IsIHdhcyBpdCBwb3NzaWJsZSBmb3IgdGhhdCBtYW4gbG9uZyB0byBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIHVubGlrZSBoaW1zZWxmPyBXaGlsZSB5b3Ugd2VyZSBhbGwgbG9va2luZyBvbiwgZG9jdW1lbnRzIHdlcmUgZml4ZWQgdXAgb3ZlciB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBDYXBpdG9sLCBhbmQgZXhlbXB0aW9ucyB3ZXJlIGJlaW5nIHNvbGQsIG5vdCBtZXJlbHkgdG8gaW5kaXZpZHVhbHMsIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIGVudGlyZSBzdGF0ZXMuIFRoZSBmcmVlZG9tIG9mIHRoZSBjaXR5IHdhcyBhbHNvIGJlaW5nIGdpdmVuIG5vdyBub3QgdG8gc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyBvbmx5LCBidXQgdG8gd2hvbGUgcHJvdmluY2VzLiBUaGVyZWZvcmUsIGlmIHRoZXNlIGFjdHMgYXJlIHRvCiAgICAgICAgICAgICAgICAgICAgc3RhbmQs4oCUYW5kIHN0YW5kIHRoZXkgY2FuIG5vdCBpZiB0aGUgcmVwdWJsaWMgc3RhbmRzCiAgICAgICAgICAgICAgICAgICAgdG9vLOKAlHRoZW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIHlvdSBoYXZlIGxvc3Qgd2hvbGUgcHJvdmluY2VzOyBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhlIHJldmVudWVzIG9ubHksIGJ1dCB0aGUgYWN0dWFsIGVtcGlyZSBvZiB0aGUgUm9tYW4gcGVvcGxlIGhhcyBiZWVuIGRpbWluaXNoZWQKICAgICAgICAgICAgICAgICAgICBieSBhIG1hcmtldCB0aGlzIG1hbiBoZWxkIGluIGhpcyBvd24gaG91c2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjkzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.37.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlIGFyZSB0aGUgc2V2ZW4gaHVuZHJlZCBtaWxsaW9ucyBvZiBzZXN0ZXJjZXMgd2hpY2ggd2VyZSBlbnRlcmVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGFjY291bnQtYm9va3Mgd2hpY2ggYXJlIGluIHRoZSB0ZW1wbGUgb2YgT3BzPyBhIHN1bSBsYW1lbnRhYmxlIGluZGVlZCwgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbWVhbnMgYnkgd2hpY2ggaXQgd2FzIHByb2N1cmVkLCBidXQgc3RpbGwgb25lIHdoaWNoLCBpZiBpdCB3ZXJlIG5vdCByZXN0b3JlZCB0bwogICAgICAgICAgICAgICAgICAgIHRob3NlIHRvIHdob20gaXQgYmVsb25nZWQsIG1pZ2h0IHNhdmUgdXMgZnJvbSB0YXhlcy4gQW5kIGhvdyB3YXMgaXQsIHRoYXQgd2hlbgogICAgICAgICAgICAgICAgICAgIHlvdSBvd2VkIGZvcnR5IG1pbGxpb25zIG9mIHNlc3RlcmNlcyBvbiB0aGUgZmlmdGVlbnRoIG9mIE1hcmNoLCB5b3UgaGFkIGNlYXNlZAogICAgICAgICAgICAgICAgICAgIHRvIG93ZSB0aGVtIGJ5IHRoZSBmaXJzdCBvZiBBcHJpbD8gVGhvc2UgdGhpbmdzIGFyZSBxdWl0ZSBjb3VudGxlc3Mgd2hpY2ggd2VyZQogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlZCBvZiBkaWZmZXJlbnQgcGVvcGxlLCBub3Qgd2l0aG91dCB5b3VyIGtub3dsZWRnZTsgYnV0IHRoZXJlIHdhcyBvbmUKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgZGVjcmVlIHBvc3RlZCB1cCBpbiB0aGUgQ2FwaXRvbCBhZmZlY3Rpbmcga2luZyBEZWlvdGFydXMsIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGRldm90ZWQgZnJpZW5kIHRvIHRoZSBSb21hbiBwZW9wbGUuIEFuZCB3aGVuIHRoYXQgZGVjcmVlIHdhcyBwb3N0ZWQgdXAsIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vIG9uZSB3aG8sIGFtaWQgYWxsIGhpcyBpbmRpZ25hdGlvbiwgY291bGQgcmVzdHJhaW4gaGlzIGxhdWdodGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOTQiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aG8gZXZlciB3YXMgYSBtb3JlIGJpdHRlciBlbmVteSB0bwogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgdGhhbiBDYWVzYXIgd2FzIHRvIERlaW90YXJ1cz8gSGUgd2FzIGFzIGhvc3RpbGUgdG8gaGltIGFzIGhlIHdhcyB0byB0aGlzCiAgICAgICAgICAgICAgICAgICAgb3JkZXIsIHRvIHRoZSBlcXVlc3RyaWFuIG9yZGVyLCB0byB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBrZXk9InRnbiw3MDA4NzgxIj5NYXNzaWxpYTwvcGxhY2VOYW1lPiwgYW5kIHRvIGFsbCBtZW4gd2hvbSBoZSBrbmV3IHRvIGxvb2sgb24gdGhlIHJlcHVibGljCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZSB3aXRoIGF0dGFjaG1lbnQuIEJ1dCB0aGlzIG1hbiwgd2hvIG5laXRoZXIgcHJlc2VudCBub3IKICAgICAgICAgICAgICAgICAgICBhYnNlbnQgY291bGQgZXZlciBvYnRhaW4gZnJvbSBoaW0gYW55IGZhdm9yIG9yIGp1c3RpY2Ugd2hpbGUgaGUgd2FzIGFsaXZlLAogICAgICAgICAgICAgICAgICAgIGJlY2FtZSBxdWl0ZSBhbiBpbmZsdWVudGlhbCBtYW4gd2l0aCBoaW0gd2hlbiBoZSB3YXMgZGVhZC4gV2hlbiBwcmVzZW50IHdpdGggaGltCiAgICAgICAgICAgICAgICAgICAgaW4gaGlzIGhvdXNlLCBoZSBoYWQgY2FsbGVkIGZvciBoaW0gdGhvdWdoIGhlIHdhcyBoaXMgaG9zdCwgaGUgaGFkIG1hZGUgaGltIGdpdmUKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgYWNjb3VudHMgb2YgaGlzIHJldmVudWUsIGhlIGhhZCBleGFjdGVkIG1vbmV5IGZyb20gaGltOyBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCBvbmUgb2YgaGlzIEdyZWVrIHJldGFpbmVycyBpbiBoaXMgdGV0cmFyY2h5LCBhbmQgaGUgaGFkIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjUxIiBrZXk9InRnbiw3MDA2NjUxIj5Bcm1lbmlhPC9wbGFjZU5hbWU+IGZyb20gaGltLCB3aGljaCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGdpdmVuIHRvIGhpbSBieSB0aGUgc2VuYXRlLiBXaGlsZSBoZSB3YXMgYWxpdmUgaGUgZGVwcml2ZWQgaGltIG9mIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRoaW5nczsgbm93IHRoYXQgaGUgaXMgZGVhZCwgaGUgZ2l2ZXMgdGhlbSBiYWNrIGFnYWluLiA8bWlsZXN0b25lIG49Ijk1IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgaW4gd2hhdCB3b3Jkcz8gQXQgb25lIHRpbWUgaGUgc2F5cywg4oCcdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIGFwcGVhcnMgdG8gaGltIHRvIGJlIGp1c3QsLi4u4oCdIGF0IGFub3RoZXIsIOKAnHRoYXQgaXQgYXBwZWFycwogICAgICAgICAgICAgICAgICAgIG5vdCB0byBiZSB1bmp1c3QuLi7igJ0gV2hhdCBhIHN0cmFuZ2UgY29tYmluYXRpb24gb2Ygd29yZHMhIEJ1dCB3aGlsZQogICAgICAgICAgICAgICAgICAgIGFsaXZlIChJIGtub3cgdGhpcywgZm9yIEkgYWx3YXlzIHN1cHBvcnRlZCBEZWlvdGFydXMsIHdobyB3YXMgYXQgYSBkaXN0YW5jZSksIGhlCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgc2FpZCB0aGF0IGFueXRoaW5nIHdoaWNoIHdlIHdlcmUgYXNraW5nIGZvciwgZm9yIGhpbSwgYXBwZWFyZWQganVzdCB0bwogICAgICAgICAgICAgICAgICAgIGhpbS4gQSBib25kIGZvciB0ZW4gbWlsbGlvbnMgb2Ygc2VzdGVyY2VzIHdhcyBlbnRlcmVkIGludG8gaW4gdGhlIHdvbWVuJ3MKICAgICAgICAgICAgICAgICAgICBhcGFydG1lbnQgKHdoZXJlIG1hbnkgdGhpbmdzIGhhdmUgYmVlbiBzb2xkLCBhbmQgYXJlIHN0aWxsIGJlaW5nIHNvbGQpLCBieSBoaXMKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycywgd2VsbC1tZWFuaW5nIG1lbiwgYnV0IHRpbWlkIGFuZCBpbmV4cGVyaWVuY2VkIGluIGJ1c2luZXNzLCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgbXkgYWR2aWNlIG9yIHRoYXQgb2YgdGhlIHJlc3Qgb2YgdGhlIGhlcmVkaXRhcnkgZnJpZW5kcyBvZiB0aGUgbW9uYXJjaC4gQW5kIEkKICAgICAgICAgICAgICAgICAgICBhZHZpc2UgeW91IHRvIGNvbnNpZGVyIGNhcmVmdWxseSB3aGF0IHlvdSBpbnRlbmQgdG8gZG8gd2l0aCByZWZlcmVuY2UgdG8uIHRoaXMKICAgICAgICAgICAgICAgICAgICBib25kLiBGb3IgdGhlIGtpbmcgaGltc2VsZiwgb2YgaGlzIG93biBhY2NvcmQsIHdpdGhvdXQuIHdhaXRpbmcgZm9yIGFueSBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhcidzIG1lbW9yYW5kYSwgdGhlIG1vbWVudCB0aGF0IGhlciBoZWFyZCBvZiBoaXMgZGVhdGgsIHJlY292ZXJlZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgcmlnaHRzIGJ5IGhpcyBvd24gY291cmFnZSBhbmQgZW5lcmd5LiA8bWlsZXN0b25lIG49Ijk2IiB1bml0PSJzZWN0aW9uIiAvPiBIZSwKICAgICAgICAgICAgICAgICAgICBsaWtlIGEgd2lzZSBtYW4sIGtuZXcgdGhhdCB0aGlzIHdhcyBhbHdheXMgdGhlIGxhdywgdGhhdCB0aG9zZSBtZW4gZnJvbSB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCB0eXJhbnRzIGhhZCB0YWtlbiBhd2F5IGhhZCBiZWVuIHRha2VuLCBtaWdodCByZWNvdmVyIHRoZW0gd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICB0eXJhbnRzIHdlcmUgc2xhaW4uIE5vIGxhd3llciwgdGhlcmVmb3JlLCBub3QgZXZlbiBoZSB3aG8gaXMgeW91ciBsYXd5ZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgeW91cnMgYWxvbmUsIGFuZCBieSB3aG9zZSBhZHZpY2UgeW91IGRvIGFsbCB0aGVzZSB0aGluZ3MsIHdpbGwgc2F5IHRoYXQgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgaXMgZHVlIHRvIHlvdSBieSB2aXJ0dWUgb2YgdGhhdCBib25kIGZvciB0aG9zZSB0aGluZ3Mgd2hpY2ggaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWNvdmVyZWQgYmVmb3JlIHRoYXQgYm9uZCB3YXMgZXhlY3V0ZWQuIEZvciBoZSBkaWQgbm90IHB1cmNoYXNlIHRoZW0gb2YgeW91OwogICAgICAgICAgICAgICAgICAgIGJ1dCwgYmVmb3JlIHlvdSB1bmRlcnRvb2sgdG8gc2VsbCBoaW0gaGlzIG93biBwcm9wZXJ0eSwgYmUgaGFkIHRha2VuIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiBpdC4gSGUgd2FzIGEgbWFu4oCUd2UsIGluZGVlZCwgZGVzZXJ2ZSB0byBiZSBkZXNwaXNlZCwgd2hvIGhhdGUgdGhlCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yIG9mIHRoZSBhY3Rpb25zLCBidXQgdXBob2xkIHRoZSBhY3Rpb25zIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.37.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdobyBldmVyIHdhcyBhIG1vcmUgYml0dGVyIGVuZW15IHRvCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciB0aGFuIENhZXNhciB3YXMgdG8gRGVpb3RhcnVzPyBIZSB3YXMgYXMgaG9zdGlsZSB0byBoaW0gYXMgaGUgd2FzIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICBvcmRlciwgdG8gdGhlIGVxdWVzdHJpYW4gb3JkZXIsIHRvIHRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFzc2lsaWE8L3BsYWNlTmFtZT4sIGFuZCB0byBhbGwgbWVuIHdob20gaGUga25ldyB0byBsb29rIG9uIHRoZSByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgd2l0aCBhdHRhY2htZW50LiBCdXQgdGhpcyBtYW4sIHdobyBuZWl0aGVyIHByZXNlbnQgbm9yCiAgICAgICAgICAgICAgICAgICAgYWJzZW50IGNvdWxkIGV2ZXIgb2J0YWluIGZyb20gaGltIGFueSBmYXZvciBvciBqdXN0aWNlIHdoaWxlIGhlIHdhcyBhbGl2ZSwKICAgICAgICAgICAgICAgICAgICBiZWNhbWUgcXVpdGUgYW4gaW5mbHVlbnRpYWwgbWFuIHdpdGggaGltIHdoZW4gaGUgd2FzIGRlYWQuIFdoZW4gcHJlc2VudCB3aXRoIGhpbQogICAgICAgICAgICAgICAgICAgIGluIGhpcyBob3VzZSwgaGUgaGFkIGNhbGxlZCBmb3IgaGltIHRob3VnaCBoZSB3YXMgaGlzIGhvc3QsIGhlIGhhZCBtYWRlIGhpbSBnaXZlCiAgICAgICAgICAgICAgICAgICAgaW4gaGlzIGFjY291bnRzIG9mIGhpcyByZXZlbnVlLCBoZSBoYWQgZXhhY3RlZCBtb25leSBmcm9tIGhpbTsgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgb25lIG9mIGhpcyBHcmVlayByZXRhaW5lcnMgaW4gaGlzIHRldHJhcmNoeSwgYW5kIGhlIGhhZCB0YWtlbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY1MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjUxIj5Bcm1lbmlhPC9wbGFjZU5hbWU+IGZyb20gaGltLCB3aGljaCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGdpdmVuIHRvIGhpbSBieSB0aGUgc2VuYXRlLiBXaGlsZSBoZSB3YXMgYWxpdmUgaGUgZGVwcml2ZWQgaGltIG9mIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRoaW5nczsgbm93IHRoYXQgaGUgaXMgZGVhZCwgaGUgZ2l2ZXMgdGhlbSBiYWNrIGFnYWluLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.37.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGluIHdoYXQgd29yZHM/IEF0IG9uZSB0aW1lIGhlIHNheXMsIOKAnHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBhcHBlYXJzIHRvIGhpbSB0byBiZSBqdXN0LC4uLuKAnSBhdCBhbm90aGVyLCDigJx0aGF0IGl0IGFwcGVhcnMKICAgICAgICAgICAgICAgICAgICBub3QgdG8gYmUgdW5qdXN0Li4u4oCdIFdoYXQgYSBzdHJhbmdlIGNvbWJpbmF0aW9uIG9mIHdvcmRzISBCdXQgd2hpbGUKICAgICAgICAgICAgICAgICAgICBhbGl2ZSAoSSBrbm93IHRoaXMsIGZvciBJIGFsd2F5cyBzdXBwb3J0ZWQgRGVpb3RhcnVzLCB3aG8gd2FzIGF0IGEgZGlzdGFuY2UpLCBoZQogICAgICAgICAgICAgICAgICAgIG5ldmVyIHNhaWQgdGhhdCBhbnl0aGluZyB3aGljaCB3ZSB3ZXJlIGFza2luZyBmb3IsIGZvciBoaW0sIGFwcGVhcmVkIGp1c3QgdG8KICAgICAgICAgICAgICAgICAgICBoaW0uIEEgYm9uZCBmb3IgdGVuIG1pbGxpb25zIG9mIHNlc3RlcmNlcyB3YXMgZW50ZXJlZCBpbnRvIGluIHRoZSB3b21lbidzCiAgICAgICAgICAgICAgICAgICAgYXBhcnRtZW50ICh3aGVyZSBtYW55IHRoaW5ncyBoYXZlIGJlZW4gc29sZCwgYW5kIGFyZSBzdGlsbCBiZWluZyBzb2xkKSwgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMsIHdlbGwtbWVhbmluZyBtZW4sIGJ1dCB0aW1pZCBhbmQgaW5leHBlcmllbmNlZCBpbiBidXNpbmVzcywgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIG15IGFkdmljZSBvciB0aGF0IG9mIHRoZSByZXN0IG9mIHRoZSBoZXJlZGl0YXJ5IGZyaWVuZHMgb2YgdGhlIG1vbmFyY2guIEFuZCBJCiAgICAgICAgICAgICAgICAgICAgYWR2aXNlIHlvdSB0byBjb25zaWRlciBjYXJlZnVsbHkgd2hhdCB5b3UgaW50ZW5kIHRvIGRvIHdpdGggcmVmZXJlbmNlIHRvLiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYm9uZC4gRm9yIHRoZSBraW5nIGhpbXNlbGYsIG9mIGhpcyBvd24gYWNjb3JkLCB3aXRob3V0LiB3YWl0aW5nIGZvciBhbnkgb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXIncyBtZW1vcmFuZGEsIHRoZSBtb21lbnQgdGhhdCBoZXIgaGVhcmQgb2YgaGlzIGRlYXRoLCByZWNvdmVyZWQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHJpZ2h0cyBieSBoaXMgb3duIGNvdXJhZ2UgYW5kIGVuZXJneS4gPC90cmFuc2xhdGlvbj4="
translation['2.37.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz4gSGUsCiAgICAgICAgICAgICAgICAgICAgbGlrZSBhIHdpc2UgbWFuLCBrbmV3IHRoYXQgdGhpcyB3YXMgYWx3YXlzIHRoZSBsYXcsIHRoYXQgdGhvc2UgbWVuIGZyb20gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICB0aGluZ3Mgd2hpY2ggdHlyYW50cyBoYWQgdGFrZW4gYXdheSBoYWQgYmVlbiB0YWtlbiwgbWlnaHQgcmVjb3ZlciB0aGVtIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdHlyYW50cyB3ZXJlIHNsYWluLiBObyBsYXd5ZXIsIHRoZXJlZm9yZSwgbm90IGV2ZW4gaGUgd2hvIGlzIHlvdXIgbGF3eWVyIGFuZAogICAgICAgICAgICAgICAgICAgIHlvdXJzIGFsb25lLCBhbmQgYnkgd2hvc2UgYWR2aWNlIHlvdSBkbyBhbGwgdGhlc2UgdGhpbmdzLCB3aWxsIHNheSB0aGF0IGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGlzIGR1ZSB0byB5b3UgYnkgdmlydHVlIG9mIHRoYXQgYm9uZCBmb3IgdGhvc2UgdGhpbmdzIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmVkIGJlZm9yZSB0aGF0IGJvbmQgd2FzIGV4ZWN1dGVkLiBGb3IgaGUgZGlkIG5vdCBwdXJjaGFzZSB0aGVtIG9mIHlvdTsKICAgICAgICAgICAgICAgICAgICBidXQsIGJlZm9yZSB5b3UgdW5kZXJ0b29rIHRvIHNlbGwgaGltIGhpcyBvd24gcHJvcGVydHksIGJlIGhhZCB0YWtlbiBwb3NzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgaXQuIEhlIHdhcyBhIG1hbuKAlHdlLCBpbmRlZWQsIGRlc2VydmUgdG8gYmUgZGVzcGlzZWQsIHdobyBoYXRlIHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvciBvZiB0aGUgYWN0aW9ucywgYnV0IHVwaG9sZCB0aGUgYWN0aW9ucyB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.38.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoeSBuZWVkIEkgbWVudGlvbiB0aGUgY291bnRsZXNzIG1hc3Mgb2YgcGFwZXJzLCB0aGUgaW5udW1lcmFibGUgYXV0b2dyYXBocyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBicm91Z2h0IGZvcndhcmQ/IHdyaXRpbmdzIG9mIHdoaWNoIHRoZXJlIGFyZSBpbWl0YXRvcnMgd2hvIHNlbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmb3JnZXJpZXMgYXMgb3Blbmx5IGFzIGlmIHRoZXkgd2VyZSBnbGFkaWF0b3JzIHBsYXliaWxscy4gVGhlcmVmb3JlLCB0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBub3cgc3VjaCBoZWFwcyBvZiBtb25leSBwaWxlZCB1cCBpbiB0aGF0IG1hbidzIGhvdXNlLCB0aGF0IGl0IGlzIHdlaWdoZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiBiZWluZyBjb3VudGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIGFjY2lkZW50YWwgcmVzZW1ibGFuY2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50IGluIHRoZSDigJxGb3J0eSBUaGlldmVz4oCdIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICDigJxBcmFiaWFuIE5pZ2h0c+KAnSBpcyBjdXJpb3VzLjwvbm90ZT4gQnV0IGJvdyBibGluZCBpcwogICAgICAgICAgICAgICAgICAgIGF2YXJpY2UhIExhdGVseSwgdG9vLCBhIGRvY3VtZW50IGhhcyBiZWVuIHBvc3RlZCB1cCBieSB3aGljaCB0aGUgbW9zdCB3ZWFsdGh5CiAgICAgICAgICAgICAgICAgICAgY2l0aWVzIG9mIHRoZSBDcmV0YW5zIGFyZSByZWxlYXNlZCBmcm9tIHRyaWJ1dGU7IGFuZCBieSB3aGljaCBpdCBpcyBvcmRhaW5lZAogICAgICAgICAgICAgICAgICAgIHRoYXQgYWZ0ZXIgdGhlIGV4cGlyYXRpb24gb2YgdGhlIGNvbnN1bHNoaXAgb2YgTWFyY3VzIEJydXR1cywgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NiI+Q3JldGU8L3BsYWNlTmFtZT4gc2hhbGwgY2Vhc2UgdG8gYmUgYSBwcm92aW5jZS4gQXJlIHlvdSBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgc2Vuc2VzLj8gT3VnaHQgeW91IG5vdCB0byBiZSBwdXQgaW4gY29uZmluZW1lbnQ/IFdhcyBpdCBwb3NzaWJsZSBmb3IgdGhlcmUKICAgICAgICAgICAgICAgICAgICByZWFsbHkgdG8gYmUgYSBkZWNyZWUgb2YgQ2Flc2FyJ3MgZXhlbXB0aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTYiPkNyZXRlPC9wbGFjZU5hbWU+IGFmdGVyIHRoZSBkZXBhcnR1cmUgb2YgTWFyY3VzLiBCcnV0dXMsIHdoZW4gQnJ1dHVzIGhhZCBubwogICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gd2hhdGV2ZXIgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU2Ij5DcmV0ZTwvcGxhY2VOYW1lPiB3aGlsZQogICAgICAgICAgICAgICAgICAgIENhZXNhciB3YXMgYWxpdmU/IEJ1dCBieSB0aGUgc2FsZSBvZiB0aGlzIGRlY3JlZSAodGhhdCB5b3UgbWF5IG5vdCwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0aGluayBpdCB3aG9sbHkgaW5lZmZlY3R1YWwpIHlvdSBoYXZlIGxvc3QgdGhlIHByb3ZpbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTYiPkNyZXRlPC9wbGFjZU5hbWU+LiBUaGVyZSB3YXMgbm90aGluZyBpbiB0aGUgd2hvbGUgd29ybGQKICAgICAgICAgICAgICAgICAgICB3aGljaCBhbnkgb25lIHdhbnRlZCB0byBidXkgdGhhdCB0aGlzIGZlbGxvdyB3YXMgbm90IHJlYWR5IHRvIHNlbGwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyBhY2NpZGVudGFsIHJlc2VtYmxhbmNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudCBpbiB0aGUg4oCcRm9ydHkgVGhpZXZlc+KAnSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAg4oCcQXJhYmlhbiBOaWdodHPigJ0gaXMgY3VyaW91cy48L25vdGU+IEJ1dCBib3cgYmxpbmQgaXMKICAgICAgICAgICAgICAgICAgICBhdmFyaWNlISBMYXRlbHksIHRvbywgYSBkb2N1bWVudCBoYXMgYmVlbiBwb3N0ZWQgdXAgYnkgd2hpY2ggdGhlIG1vc3Qgd2VhbHRoeQogICAgICAgICAgICAgICAgICAgIGNpdGllcyBvZiB0aGUgQ3JldGFucyBhcmUgcmVsZWFzZWQgZnJvbSB0cmlidXRlOyBhbmQgYnkgd2hpY2ggaXQgaXMgb3JkYWluZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGFmdGVyIHRoZSBleHBpcmF0aW9uIG9mIHRoZSBjb25zdWxzaGlwIG9mIE1hcmN1cyBCcnV0dXMsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTYiPkNyZXRlPC9wbGFjZU5hbWU+IHNoYWxsIGNlYXNlIHRvIGJlIGEgcHJvdmluY2UuIEFyZSB5b3UgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIHNlbnNlcy4/IE91Z2h0IHlvdSBub3QgdG8gYmUgcHV0IGluIGNvbmZpbmVtZW50PyBXYXMgaXQgcG9zc2libGUgZm9yIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IHRvIGJlIGEgZGVjcmVlIG9mIENhZXNhcidzIGV4ZW1wdGluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU2Ij5DcmV0ZTwvcGxhY2VOYW1lPiBhZnRlciB0aGUgZGVwYXJ0dXJlIG9mIE1hcmN1cy4gQnJ1dHVzLCB3aGVuIEJydXR1cyBoYWQgbm8KICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uIHdoYXRldmVyIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NiI+Q3JldGU8L3BsYWNlTmFtZT4gd2hpbGUKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgd2FzIGFsaXZlPyBCdXQgYnkgdGhlIHNhbGUgb2YgdGhpcyBkZWNyZWUgKHRoYXQgeW91IG1heSBub3QsIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdGhpbmsgaXQgd2hvbGx5IGluZWZmZWN0dWFsKSB5b3UgaGF2ZSBsb3N0IHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU2Ij5DcmV0ZTwvcGxhY2VOYW1lPi4gVGhlcmUgd2FzIG5vdGhpbmcgaW4gdGhlIHdob2xlIHdvcmxkCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYW55IG9uZSB3YW50ZWQgdG8gYnV5IHRoYXQgdGhpcyBmZWxsb3cgd2FzIG5vdCByZWFkeSB0byBzZWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.38.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhciB0b28sIEkgc3VwcG9zZSwgbWFkZSB0aGUgbGF3IGFib3V0IHRoZSBleGlsZXMgd2hpY2ggeW91IGhhdmUgcG9zdGVkIHVwLiBJCiAgICAgICAgICAgICAgICAgICAgZG8gbm90IHdpc2ggdG8gcHJlc3MgdXBvbiBhbnkgb25lIGluIG1pc2ZvcnR1bmU7IEkgb25seSBjb21wbGFpbiwgaW4gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIHRoYXQgdGhlIHJldHVybiBvZiB0aG9zZSBtZW4gaGFzIGhhZCBkaXNjcmVkaXQgdGhyb3duIHVwb24gaXQsIHdob3NlCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgQ2Flc2FyIGp1ZGdlZCB0byBiZSBkaWZmZXJlbnQgZnJvbSB0aGF0IG9mIHRoZSByZXN0OyBhbmQgaW4gdGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBJIGRvIG5vdCBrbm93IHdoeSB5b3UgZG8gbm90IG1ldGUgb3V0IHRoZSBzYW1lIG1lYXN1cmUgdG8gYWxsLiBGb3IgdGhlcmUKICAgICAgICAgICAgICAgICAgICBjYW4gbm90IGJlIG1vcmUgdGhhbiB0aHJlZSBvciBmb3VyIGxlZnQuIFdoeSBkbyBub3QgdGhleSB3aG8gYXJlIGluIHNpbWlsYXIKICAgICAgICAgICAgICAgICAgICBtaXNmb3J0dW5lIGVuam95IGEgc2ltaWxhciBkZWdyZWUgb2YgeW91ciBtZXJjeT8gV2h5IGRvIHlvdSB0cmVhdCB0aGVtIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIHRyZWF0ZWQgeW91ciB1bmNsZT8gYWJvdXQgd2hvbSB5b3UgcmVmdXNlZCB0byBwYXNzIGEgbGF3IHdoZW4geW91IHdlcmUgcGFzc2luZwogICAgICAgICAgICAgICAgICAgIG9uZSBhYm91dCBhbGwgdGhlIHJlc3Q7IGFuZCB3aG9tIGF0IHRoZSBzYW1lIHRpbWUgeW91IGVuY291cmFnZWQgdG8gc3RhbmQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGNlbnNvcnNoaXAsIGFuZCBpbnN0aWdhdGVkIGhpbSB0byBhIGNhbnZhc3MsIHdoaWNoIGV4Y2l0ZWQgdGhlIHJpZGljdWxlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBjb21wbGFpbnQgb2YgZXZlcnkgb25lLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoeSBkaWQgeW91IG5vdCBob2xkIHRoYXQgY29taXRpYT8gV2FzIGl0CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBhbm5vdW5jZWQgdGhhdCB0aGVyZSBoYWQgYmVlbiBhbiBpbGwtb21lbmVkCiAgICAgICAgICAgICAgICAgICAgZmxhc2ggb2YgbGlnaHRuaW5nIHNlZW4/IFdoZW4geW91IGhhdmUgYW55IGludGVyZXN0IG9mIHlvdXIgb3duIHRvIHNlcnZlLCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXVzcGljZXMgYXJlIGFsbCBub3RoaW5nOyBidXQgd2hlbiBpdCBpcyBvbmx5IHlvdXIgZnJpZW5kcyB3aG8gYXJlIGNvbmNlcm5lZCwKICAgICAgICAgICAgICAgICAgICB0aGVuIHlvdSBiZWNvbWUgc2NydXB1bG91cy4gV2hhdCBtb3JlPyBEaWQgeW91IG5vdCBhbHNvIGRlc2VydCBoaW0gaW4gdGhlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzZXB0ZW12aXJhdGU/PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPnNlcHRlbXZpcmk8L2ZvcmVpZ24+LCBhdCBmdWxsIGxlbmd0aCA8Zm9yZWlnbiBsYW5nPSJsYSI+c2VwdGVtdmlyaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXB1bG9uZXM8L2ZvcmVpZ24+IG9yIDxmb3JlaWduIGxhbmc9ImxhIj5lcHVsb251bTwvZm9yZWlnbj4sIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxseSA8Zm9yZWlnbiBsYW5nPSJsYSI+dHJpdW12aXJpPC9mb3JlaWduPi4gVGhleSB3ZXJlIGZpcnN0IGNyZWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgQS4gQy4gPGRhdGUgYXV0aG5hbWU9IjE5OCIgdmFsdWU9IjE5OCI+MTk4PC9kYXRlPiwgdG8gYXR0ZW5kIHRvIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+ZXB1bHVtIEpvdmlzPC9mb3JlaWduPiwgYW5kIHRoZSBiYW5xdWV0cyBnaXZlbiBpbiBob25vdXIgb2YgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGdvZHMsIHdoaWNoIGR1dHkgaGFkIG9yaWdpbmFsbHkgYmVsb25nZWQgdG8gdGhlIHBvbnRpZmljZXMuIEp1bGl1cyBDYWVzYXIKICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWQgdGhyZWUgbW9yZSwgYnV0IHRoYXQgYWx0ZXJhdGlvbiBkaWQgbm90IGxhc3QuIFRoZXkgZm9ybWVkIGEgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbGxlZ2l1bTwvZm9yZWlnbj4sIGFuZCB3ZXJlIG9uZSBvZiB0aGUgZm91ciBncmVhdCByZWxpZ2lvdXMKICAgICAgICAgICAgICAgICAgICAgICAgY29ycG9yYXRpb25zIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5wb250aWZpY2VzPC9mb3JlaWduPiwgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5hdWd1cmVzPC9mb3JlaWduPiwgYW5kIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+cXVpbmRlY2VtdmlyaTwvZm9yZWlnbj4uCiAgICAgICAgICAgICAgICAgICAgICAgIFNtaXRoLCBEaWN0LiBBbnQuIHYuIDxmb3JlaWduIGxhbmc9ImxhIj5FcHVsb25lczwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIOKAnFllcywgZm9yIGhlIGludGVyZmVyZWQgd2l0aCBtZS7igJ0gV2hhdCB3ZXJlIHlvdSBhZnJhaWQgb2Y/IEkKICAgICAgICAgICAgICAgICAgICBzdXBwb3NlIHlvdSB3ZXJlIGFmcmFpZCB0aGF0IHlvdSB3b3VsZCBiZSBhYmxlIHRvIHJlZnVzZSBoaW0gbm90aGluZyBpZiBoZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZWQgdG8gdGhlIGZ1bGwgcG9zc2Vzc2lvbiBvZiBoaXMgcmlnaHRzLiBZb3UgbG9hZGVkIGhpbSB3aXRoIGV2ZXJ5IHNwZWNpZXMKICAgICAgICAgICAgICAgICAgICBvZiBpbnN1bHQsIGEgbWFuIHdob20geW91IG91Z2h0IHRvIGhhdmUgY29uc2lkZXJlZCBpbiB0aGUgcGxhY2Ugb2YgYSBmYXRoZXIgdG8KICAgICAgICAgICAgICAgICAgICB5b3UsIGlmIHlvdSBoYWQgaGFkIGFueSBwaWV0eSBvciBuYXR1cmFsIGFmZmVjdGlvbiBhdCBhbGwsIFlvdSBwdXQgYXdheSBoaXMKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlciwgeW91ciBvd24gY291c2luLCBoYXZpbmcgYWxyZWFkeSBsb29rZWQgb3V0IGFuZCBwcm92aWRlZCB5b3Vyc2VsZgogICAgICAgICAgICAgICAgICAgIGJlZm9yZWhhbmQgd2l0aCBhbm90aGVyLiBUaGF0IHdhcyBub3QgZW5vdWdoLiBZb3UgYWNjdXNlZCBhIG1vc3QgY2hhc3RlIHdvbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgbWlzY29uZHVjdC4gV2hhdCBjYW4gZ28gYmV5b25kIHRoaXM/IFlldCB5b3Ugd2VyZSBub3QgY29udGVudCB3aXRoIHRoaXMuIEluIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGZ1bGwgc2VuYXRlIGhlbGQgb24gdGhlIGZpcnN0IG9mIEphbnVhcnksIHdoaWxlIHlvdXIgdW5jbGUgd2FzIHByZXNlbnQsIHlvdQogICAgICAgICAgICAgICAgICAgIGRhcmVkIHRvIHNheSB0aGF0IHRoaXMgd2FzIHlvdXIgcmVhc29uIGZvciBoYXRyZWQgb2YgRG9sYWJlbGxhLCB0aGF0IHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBhc2NlcnRhaW5lZCB0aGF0IGhlIGhhZCBjb21taXR0ZWQgYWR1bHRlcnkgd2l0aCB5b3VyIGNvdXNpbiBhbmQgeW91ciB3aWZlLCBXaG8KICAgICAgICAgICAgICAgICAgICBjYW4gZGVjaWRlIHdoZXRoZXIgaXQgd2FzIG1vcmUgc2hhbWVsZXNzIG9mIHlvdSB0byBtYWtlIHN1Y2ggcHJvZmxpZ2F0ZSBhbmQgc3VjaAogICAgICAgICAgICAgICAgICAgIGltcGlvdXMgc3RhdGVtZW50cyBhZ2FpbnN0IHRoYXQgdW5oYXBweSB3b21hbiBpbiB0aGUgc2VuYXRlLCBvciBtb3JlIHdpY2tlZCB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgdGhlbSBhZ2FpbnN0IERvbGFiZWxsYSwgb3IgbW9yZSBzY2FuZGFsb3VzIHRvIG1ha2UgdGhlbSBpbiB0aGUgcHJlc2VuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBoZXIgZmF0aGVyLCBvciBtb3JlIGNydWVsIHRvIG1ha2UgdGhlbSBhdCBhbGw/IDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.38.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoeSBkaWQgeW91IG5vdCBob2xkIHRoYXQgY29taXRpYT8gV2FzIGl0CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBhbm5vdW5jZWQgdGhhdCB0aGVyZSBoYWQgYmVlbiBhbiBpbGwtb21lbmVkCiAgICAgICAgICAgICAgICAgICAgZmxhc2ggb2YgbGlnaHRuaW5nIHNlZW4/IFdoZW4geW91IGhhdmUgYW55IGludGVyZXN0IG9mIHlvdXIgb3duIHRvIHNlcnZlLCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXVzcGljZXMgYXJlIGFsbCBub3RoaW5nOyBidXQgd2hlbiBpdCBpcyBvbmx5IHlvdXIgZnJpZW5kcyB3aG8gYXJlIGNvbmNlcm5lZCwKICAgICAgICAgICAgICAgICAgICB0aGVuIHlvdSBiZWNvbWUgc2NydXB1bG91cy4gV2hhdCBtb3JlPyBEaWQgeW91IG5vdCBhbHNvIGRlc2VydCBoaW0gaW4gdGhlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzZXB0ZW12aXJhdGU/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zZXB0ZW12aXJpPC9mb3JlaWduPiwgYXQgZnVsbCBsZW5ndGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c2VwdGVtdmlyaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXB1bG9uZXM8L2ZvcmVpZ24+IG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmVwdWxvbnVtPC9mb3JlaWduPiwgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbGx5IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRyaXVtdmlyaTwvZm9yZWlnbj4uIFRoZXkgd2VyZSBmaXJzdCBjcmVhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIEEuIEMuIDxkYXRlIGF1dGhuYW1lPSIxOTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjE5OCI+MTk4PC9kYXRlPiwgdG8gYXR0ZW5kIHRvIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5lcHVsdW0gSm92aXM8L2ZvcmVpZ24+LCBhbmQgdGhlIGJhbnF1ZXRzIGdpdmVuIGluIGhvbm91ciBvZiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgZ29kcywgd2hpY2ggZHV0eSBoYWQgb3JpZ2luYWxseSBiZWxvbmdlZCB0byB0aGUgcG9udGlmaWNlcy4gSnVsaXVzIENhZXNhcgogICAgICAgICAgICAgICAgICAgICAgICBhZGRlZCB0aHJlZSBtb3JlLCBidXQgdGhhdCBhbHRlcmF0aW9uIGRpZCBub3QgbGFzdC4gVGhleSBmb3JtZWQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb2xsZWdpdW08L2ZvcmVpZ24+LCBhbmQgd2VyZSBvbmUgb2YgdGhlIGZvdXIgZ3JlYXQgcmVsaWdpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcnBvcmF0aW9ucyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvbnRpZmljZXM8L2ZvcmVpZ24+LCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YXVndXJlczwvZm9yZWlnbj4sIGFuZCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cXVpbmRlY2VtdmlyaTwvZm9yZWlnbj4uCiAgICAgICAgICAgICAgICAgICAgICAgIFNtaXRoLCBEaWN0LiBBbnQuIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkVwdWxvbmVzPC9mb3JlaWduPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAg4oCcWWVzLCBmb3IgaGUgaW50ZXJmZXJlZCB3aXRoIG1lLuKAnSBXaGF0IHdlcmUgeW91IGFmcmFpZCBvZj8gSQogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgeW91IHdlcmUgYWZyYWlkIHRoYXQgeW91IHdvdWxkIGJlIGFibGUgdG8gcmVmdXNlIGhpbSBub3RoaW5nIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICByZXN0b3JlZCB0byB0aGUgZnVsbCBwb3NzZXNzaW9uIG9mIGhpcyByaWdodHMuIFlvdSBsb2FkZWQgaGltIHdpdGggZXZlcnkgc3BlY2llcwogICAgICAgICAgICAgICAgICAgIG9mIGluc3VsdCwgYSBtYW4gd2hvbSB5b3Ugb3VnaHQgdG8gaGF2ZSBjb25zaWRlcmVkIGluIHRoZSBwbGFjZSBvZiBhIGZhdGhlciB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgaWYgeW91IGhhZCBoYWQgYW55IHBpZXR5IG9yIG5hdHVyYWwgYWZmZWN0aW9uIGF0IGFsbCwgWW91IHB1dCBhd2F5IGhpcwogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyLCB5b3VyIG93biBjb3VzaW4sIGhhdmluZyBhbHJlYWR5IGxvb2tlZCBvdXQgYW5kIHByb3ZpZGVkIHlvdXJzZWxmCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlaGFuZCB3aXRoIGFub3RoZXIuIFRoYXQgd2FzIG5vdCBlbm91Z2guIFlvdSBhY2N1c2VkIGEgbW9zdCBjaGFzdGUgd29tYW4gb2YKICAgICAgICAgICAgICAgICAgICBtaXNjb25kdWN0LiBXaGF0IGNhbiBnbyBiZXlvbmQgdGhpcz8gWWV0IHlvdSB3ZXJlIG5vdCBjb250ZW50IHdpdGggdGhpcy4gSW4gYQogICAgICAgICAgICAgICAgICAgIHZlcnkgZnVsbCBzZW5hdGUgaGVsZCBvbiB0aGUgZmlyc3Qgb2YgSmFudWFyeSwgd2hpbGUgeW91ciB1bmNsZSB3YXMgcHJlc2VudCwgeW91CiAgICAgICAgICAgICAgICAgICAgZGFyZWQgdG8gc2F5IHRoYXQgdGhpcyB3YXMgeW91ciByZWFzb24gZm9yIGhhdHJlZCBvZiBEb2xhYmVsbGEsIHRoYXQgeW91IGhhZAogICAgICAgICAgICAgICAgICAgIGFzY2VydGFpbmVkIHRoYXQgaGUgaGFkIGNvbW1pdHRlZCBhZHVsdGVyeSB3aXRoIHlvdXIgY291c2luIGFuZCB5b3VyIHdpZmUsIFdobwogICAgICAgICAgICAgICAgICAgIGNhbiBkZWNpZGUgd2hldGhlciBpdCB3YXMgbW9yZSBzaGFtZWxlc3Mgb2YgeW91IHRvIG1ha2Ugc3VjaCBwcm9mbGlnYXRlIGFuZCBzdWNoCiAgICAgICAgICAgICAgICAgICAgaW1waW91cyBzdGF0ZW1lbnRzIGFnYWluc3QgdGhhdCB1bmhhcHB5IHdvbWFuIGluIHRoZSBzZW5hdGUsIG9yIG1vcmUgd2lja2VkIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSB0aGVtIGFnYWluc3QgRG9sYWJlbGxhLCBvciBtb3JlIHNjYW5kYWxvdXMgdG8gbWFrZSB0aGVtIGluIHRoZSBwcmVzZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIGhlciBmYXRoZXIsIG9yIG1vcmUgY3J1ZWwgdG8gbWFrZSB0aGVtIGF0IGFsbD8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c2VwdGVtdmlyaTwvZm9yZWlnbj4sIGF0IGZ1bGwgbGVuZ3RoIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnNlcHRlbXZpcmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVwdWxvbmVzPC9mb3JlaWduPiBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5lcHVsb251bTwvZm9yZWlnbj4sIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxseSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj50cml1bXZpcmk8L2ZvcmVpZ24+LiBUaGV5IHdlcmUgZmlyc3QgY3JlYXRlZAogICAgICAgICAgICAgICAgICAgICAgICBBLiBDLiA8ZGF0ZSBhdXRobmFtZT0iMTk4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxOTgiPjE5ODwvZGF0ZT4sIHRvIGF0dGVuZCB0byB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZXB1bHVtIEpvdmlzPC9mb3JlaWduPiwgYW5kIHRoZSBiYW5xdWV0cyBnaXZlbiBpbiBob25vdXIgb2YgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGdvZHMsIHdoaWNoIGR1dHkgaGFkIG9yaWdpbmFsbHkgYmVsb25nZWQgdG8gdGhlIHBvbnRpZmljZXMuIEp1bGl1cyBDYWVzYXIKICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWQgdGhyZWUgbW9yZSwgYnV0IHRoYXQgYWx0ZXJhdGlvbiBkaWQgbm90IGxhc3QuIFRoZXkgZm9ybWVkIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29sbGVnaXVtPC9mb3JlaWduPiwgYW5kIHdlcmUgb25lIG9mIHRoZSBmb3VyIGdyZWF0IHJlbGlnaW91cwogICAgICAgICAgICAgICAgICAgICAgICBjb3Jwb3JhdGlvbnMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb250aWZpY2VzPC9mb3JlaWduPiwgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmF1Z3VyZXM8L2ZvcmVpZ24+LCBhbmQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnF1aW5kZWNlbXZpcmk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBTbWl0aCwgRGljdC4gQW50LiB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5FcHVsb25lczwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['2.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.39.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3dldmVyLCBsZXQgdXMgcmV0dXJuIHRvIHRoZSBzdWJqZWN0IG9mIENhZXNhcidzIHdyaXR0ZW4gcGFwZXJzLiBIb3cgd2VyZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgdmVyaWZpZWQgYnkgeW91PyBGb3IgdGhlIGFjdHMgb2YgQ2Flc2FyIHdlcmUgZm9yIHBlYWNlJ3Mgc2FrZSBjb25maXJtZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlOyB0aGF0IGlzIHRvIHNheSwgdGhlIGFjdHMgd2hpY2ggQ2Flc2FyIGhhZCByZWFsbHkgZG9uZSwgbm90IHRob3NlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgc2FpZCB0aGF0IENhZXNhciBoYWQgZG9uZS4gV2hlcmUgZG8gYWxsIHRoZXNlIGNvbWUgZnJvbT8gQnkgd2hvbSBhcmUKICAgICAgICAgICAgICAgICAgICB0aGV5IHByb2R1Y2VkIGFuZCB2b3VjaGVkIGZvcj8gSWYgdGhleSBhcmUgZmFsc2UsIHdoeSBhcmUgdGhleSByYXRpZmllZD8gSWYgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSB0cnVlLCB3aHkgYXJlIHRoZXkgc29sZD8gQnV0IHRoZSB2b3RlIHdoaWNoIHdhcyBjb21lIHRvIGVuam9pbmVkIHlvdSwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3Qgb2YgSnVuZSwgdG8gbWFrZSBhbiBleGFtaW5hdGlvbiBvZiBDYWVzYXIncyBhY3RzIHdpdGggdGhlIGFzc2lzdGFuY2UKICAgICAgICAgICAgICAgICAgICBvZiBhIGNvdW5jaWwuIFdoYXQgY291bmNpbCBkaWQgeW91IGNvbnN1bHQ/IHdob20gZGlkIHlvdSBldmVyIGludml0ZSB0byBoZWxwCiAgICAgICAgICAgICAgICAgICAgeW91PyB3aGF0IHdhcyB0aGUgZmlyc3Qgb2YgSnVuZSB0aGF0IHlvdSB3YWl0ZWQgZm9yPyBXYXMgaXQgdGhhdCBkYXkgb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3UsIGhhdmluZyB0cmF2ZWxlZCBhbGwgdGhyb3VnaCB0aGUgY29sb25pZXMgd2hlcmUgdGhlIHZldGVyYW5zIHdlcmUgc2V0dGxlZCwKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCBlc2NvcnRlZCBieSBhIGJhbmQgb2YgYXJtZWQgbWVuPyA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk9oIHdoYXQgYSBzcGxlbmRpZCBwcm9ncmVzcyBvZiB5b3VycyB3YXMgdGhhdCBpbiB0aGUgbW9udGhzIG9mIEFwcmlsIGFuZCBNYXksCiAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3UgYXR0ZW1wdGVkIGV2ZW4gdG8gbGVhZCBhIGNvbG9ueSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4hIEhvdyB5b3UgbWFkZSB5b3VyIGVzY2FwZSBmcm9tIHRoZW5jZSwgb3IgcmF0aGVyIGhvdyB5b3UKICAgICAgICAgICAgICAgICAgICBiYXJlbHkgbWFkZSB5b3VyIGVzY2FwZSwgd2UgYWxsIGtub3cuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZAogICAgICAgICAgICAgICAgICAgIG5vdyB5b3UgYXJlIHN0aWxsIHRocmVhdGVuaW5nIHRoYXQgY2l0eS4gSSB3aXNoIHlvdSB3b3VsZCB0cnksIGFuZCB3ZSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhlbiBiZSBmb3JjZWQgdG8gc2F5IOKAnGJhcmVseS7igJ0gSG93ZXZlciwgd2hhdCBhIHNwbGVuZGlkCiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3Mgb2YgeW91cnMgdGhhdCB3YXMhIFdoeSBuZWVkIEkgbWVudGlvbiB5b3VyIHByZXBhcmF0aW9ucyBmb3IgYmFucXVldHMsCiAgICAgICAgICAgICAgICAgICAgd2h5IHlvdXIgZnJhbnRpYyBoYXJkIGRyaW5raW5nPyBUaG9zZSB0aGluZ3MgYXJlIG9ubHkgYW4gaW5qdXJ5IHRvIHlvdXJzZWxmOwogICAgICAgICAgICAgICAgICAgIHRoZXNlIGFyZSBpbmp1cmllcyB0byB1cy4gV2UgdGhvdWdodCB0aGF0IGEgZ3JlYXQgYmxvdyB3YXMgaW5mbGljdGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIHdoZW4gdGhlIENhbXBhbmlhbiBkaXN0cmljdCB3YXMgcmVsZWFzZWQgZnJvbSB0aGUgcGF5bWVudCBvZiB0YXhlcywgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0byBiZSBnaXZlbiB0byB0aGUgc29sZGllcnk7IGJ1dCB5b3UgaGF2ZSBkaXZpZGVkIGl0IGFtb25nIHlvdXIgcGFydG5lcnMKICAgICAgICAgICAgICAgICAgICBpbiBkcnVua2VubmVzcyBhbmQgZ2FtYmxpbmcuIEkgdGVsbCB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgYSBsb3Qgb2YKICAgICAgICAgICAgICAgICAgICBidWZmb29ucyBhbmQgYWN0cmVzc2VzIGhhdmUgYmVlbiBzZXR0bGVkIGluIHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4uIFdoeSBzaG91bGQgSSBub3cgY29tcGxhaW4gb2Ygd2hhdAogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIGRvbmUgaW4gdGhlIGRpc3RyaWN0IG9mIExlb250aW5pPyBBbHRob3VnaCBmb3JtZXJseSB0aGVzZSBsYW5kcyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gYW5kIExlb250aW5pIHdlcmUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHBhdHJpbW9ueSBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgd2VyZSBwcm9kdWN0aXZlIG9mCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgcmV2ZW51ZSwgYW5kIHZlcnkgZmVydGlsZS4gWW91IGdhdmUgeW91ciBwaHlzaWNpYW4gdGhyZWUgdGhvdXNhbmQgYWNyZXM7CiAgICAgICAgICAgICAgICAgICAgd2hhdCB3b3VsZCB5b3UgaGF2ZSBkb25lIGlmIGhlIGhhZCBjdXJlZCB5b3U/IGFuZCB0d28gdGhvdXNhbmQgdG8geW91ciBtYXN0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBvcmF0b3J5OyB3aGF0IHdvdWxkIHlvdSBoYXZlIGRvbmUgaWYgaGUgaGFkIGJlZW4gYWJsZSB0byBtYWtlIHlvdSBlbG9xdWVudD8KICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCBsZXQgdXMgcmV0dXJuIHRvIHlvdXIgcHJvZ3Jlc3MsIGFuZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4uIDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+ISBIb3cgeW91IG1hZGUgeW91ciBlc2NhcGUgZnJvbSB0aGVuY2UsIG9yIHJhdGhlciBob3cgeW91CiAgICAgICAgICAgICAgICAgICAgYmFyZWx5IG1hZGUgeW91ciBlc2NhcGUsIHdlIGFsbCBrbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.39.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZAogICAgICAgICAgICAgICAgICAgIG5vdyB5b3UgYXJlIHN0aWxsIHRocmVhdGVuaW5nIHRoYXQgY2l0eS4gSSB3aXNoIHlvdSB3b3VsZCB0cnksIGFuZCB3ZSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhlbiBiZSBmb3JjZWQgdG8gc2F5IOKAnGJhcmVseS7igJ0gSG93ZXZlciwgd2hhdCBhIHNwbGVuZGlkCiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3Mgb2YgeW91cnMgdGhhdCB3YXMhIFdoeSBuZWVkIEkgbWVudGlvbiB5b3VyIHByZXBhcmF0aW9ucyBmb3IgYmFucXVldHMsCiAgICAgICAgICAgICAgICAgICAgd2h5IHlvdXIgZnJhbnRpYyBoYXJkIGRyaW5raW5nPyBUaG9zZSB0aGluZ3MgYXJlIG9ubHkgYW4gaW5qdXJ5IHRvIHlvdXJzZWxmOwogICAgICAgICAgICAgICAgICAgIHRoZXNlIGFyZSBpbmp1cmllcyB0byB1cy4gV2UgdGhvdWdodCB0aGF0IGEgZ3JlYXQgYmxvdyB3YXMgaW5mbGljdGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIHdoZW4gdGhlIENhbXBhbmlhbiBkaXN0cmljdCB3YXMgcmVsZWFzZWQgZnJvbSB0aGUgcGF5bWVudCBvZiB0YXhlcywgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0byBiZSBnaXZlbiB0byB0aGUgc29sZGllcnk7IGJ1dCB5b3UgaGF2ZSBkaXZpZGVkIGl0IGFtb25nIHlvdXIgcGFydG5lcnMKICAgICAgICAgICAgICAgICAgICBpbiBkcnVua2VubmVzcyBhbmQgZ2FtYmxpbmcuIEkgdGVsbCB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgYSBsb3Qgb2YKICAgICAgICAgICAgICAgICAgICBidWZmb29ucyBhbmQgYWN0cmVzc2VzIGhhdmUgYmVlbiBzZXR0bGVkIGluIHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPi4gV2h5IHNob3VsZCBJIG5vdyBjb21wbGFpbiBvZiB3aGF0CiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gZG9uZSBpbiB0aGUgZGlzdHJpY3Qgb2YgTGVvbnRpbmk/IEFsdGhvdWdoIGZvcm1lcmx5IHRoZXNlIGxhbmRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IGFuZCBMZW9udGluaSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwYXRyaW1vbnkgb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHdlcmUgcHJvZHVjdGl2ZSBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHJldmVudWUsIGFuZCB2ZXJ5IGZlcnRpbGUuIFlvdSBnYXZlIHlvdXIgcGh5c2ljaWFuIHRocmVlIHRob3VzYW5kIGFjcmVzOwogICAgICAgICAgICAgICAgICAgIHdoYXQgd291bGQgeW91IGhhdmUgZG9uZSBpZiBoZSBoYWQgY3VyZWQgeW91PyBhbmQgdHdvIHRob3VzYW5kIHRvIHlvdXIgbWFzdGVyIG9mCiAgICAgICAgICAgICAgICAgICAgb3JhdG9yeTsgd2hhdCB3b3VsZCB5b3UgaGF2ZSBkb25lIGlmIGhlIGhhZCBiZWVuIGFibGUgdG8gbWFrZSB5b3UgZWxvcXVlbnQ/CiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciwgbGV0IHVzIHJldHVybiB0byB5b3VyIHByb2dyZXNzLCBhbmQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['2.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.40.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Zb3UgbGVkIGEgY29sb255IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NTI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ1MjkiPkNhc2lsaW51bTwvcGxhY2VOYW1lPiwgYSBwbGFjZQogICAgICAgICAgICAgICAgICAgIHRvIHdoaWNoIENhZXNhciBoYWQgcHJldmlvdXNseSBsZWQgb25lLiBZb3UgZGlkIGluZGVlZCBjb25zdWx0IG1lIGJ5IGxldHRlcgogICAgICAgICAgICAgICAgICAgIGFib3V0IHRoZSBjb2xvbnkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IChidXQgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIGdpdmVuIHlvdSB0aGUgc2FtZSBhbnN3ZXIgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ1MjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDUyOSI+Q2FzaWxpbnVtPC9wbGFjZU5hbWU+KSwgd2hldGhlciB5b3UgY291bGQgbGVnYWxseSBsZWFkIGEgbmV3IGNvbG9ueSB0byBhCiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugd2hlcmUgdGhlcmUgd2FzIGEgY29sb255IGFscmVhZHkuIEkgc2FpZCB0aGF0IGEgbmV3IGNvbG9ueSBjb3VsZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBsZWdhbGx5IGNvbmR1Y3RlZCB0byBhbiBleGlzdGluZyBjb2xvbnksIHdoaWNoIGhhZCBiZWVuIGVzdGFibGlzaGVkIHdpdGggYSBkdWUKICAgICAgICAgICAgICAgICAgICBvYnNlcnZhbmNlIG9mIHRoZSBhdXNwaWNlcywgYXMgbG9uZyBhcyBpdCByZW1haW5lZCBpbiBhIGZsb3VyaXNoaW5nIHN0YXRlOyBidXQgSQogICAgICAgICAgICAgICAgICAgIHdyb3RlIHlvdSB3b3JkIHRoYXQgbmV3IGNvbG9uaXN0cyBtaWdodCBiZSBlbnJvbGxlZCBhbW9uZyB0aGUgb2xkIG9uZXMuIEJ1dCB5b3UsCiAgICAgICAgICAgICAgICAgICAgZWxhdGVkIGFuZCBpbnNvbGVudCwgZGlzcmVnYXJkaW5nIGFsbCB0aGUgcmVzcGVjdCBkdWUgdG8gdGhlIGF1c3BpY2VzLCBsZWQgYQogICAgICAgICAgICAgICAgICAgIGNvbG9ueSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDUyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NTI5Ij5DYXNpbGludW08L3BsYWNlTmFtZT4sIHdoaXRoZXIgb25lIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJldmlvdXNseSBsZWQgYSBmZXcgeWVhcnMgYmVmb3JlOyBpbiBvcmRlciB0byBlcmVjdCB5b3VyIHN0YW5kYXJkIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBtYXJrIG91dCB0aGUgbGluZSBvZiB0aGUgbmV3IGNvbG9ueSB3aXRoIGEgcGxvdy4gQW5kIGJ5IHRoYXQgcGxvdyB5b3UKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgZ3JhemVkIHRoZSBnYXRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgc28KICAgICAgICAgICAgICAgICAgICBhcyB0byBkaW1pbmlzaCB0aGUgdGVycml0b3J5IG9mIHRoYXQgZmxvdXJpc2hpbmcgY29sb255LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAzIiB1bml0PSJzZWN0aW9uIiAvPiBBZnRlciB0aGlzIHZpb2xhdGlvbiBvZiBhbGwgcmVsaWdpb3VzIG9ic2VydmFuY2VzLCB5b3UKICAgICAgICAgICAgICAgICAgICBoYXN0ZW4gb2ZmIHRvIHRoZSBlc3RhdGUgb2YgTWFyY3VzIFZhcnJvLCBhIG1vc3QgY29uc2NpZW50aW91cyBhbmQgdXByaWdodCBtYW4sCiAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPi4gQnkgd2hhdCByaWdodD8gd2l0aAogICAgICAgICAgICAgICAgICAgIHdoYXQgZmFjZSBkbyB5b3UgZG8gdGhpcz8gQnkganVzdCB0aGUgc2FtZSwgeW91IHdpbGwgc2F5LCBhcyB0aGF0IGJ5IHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGVudGVyZWQgb24gdGhlIGVzdGF0ZXMgb2YgdGhlIGhlaXJzIG9mIEx1Y2l1cyBSdWJyaXVzLCBvciBvZiB0aGUgaGVpcnMgb2YgTHVjaXVzCiAgICAgICAgICAgICAgICAgICAgVHVyc2VsaXVzLCBvciBvZiBvdGhlciBpbm51bWVyYWJsZSBwb3NzZXNzaW9ucy4gSWYgeW91IGdvdCB0aGUgcmlnaHQgZnJvbSBhbnkKICAgICAgICAgICAgICAgICAgICBhdWN0aW9uLCBsZXQgdGhlIGF1Y3Rpb24gaGF2ZSBhbGwgdGhlIGZvcmNlIHRvIHdoaWNoIGl0IGlzIGVudGl0bGVkOyBsZXQKICAgICAgICAgICAgICAgICAgICB3cml0aW5ncyBiZSBvZiBmb3JjZSwgcHJvdmlkZWQgdGhleSBhcmUgdGhlIHdyaXRpbmdzIG9mIENhZXNhciwgYW5kIG5vdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3duOyB3cml0aW5ncyBieSB3aGljaCB5b3UgYXJlIGJvdW5kLCBub3QgdGhvc2UgYnkgd2hpY2ggeW91IGhhdmUgcmVsZWFzZWQKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBmcm9tIG9ibGlnYXRpb24uIDxtaWxlc3RvbmUgbj0iMTA0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ1MjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDUyOSI+Q2FzaWxpbnVtPC9wbGFjZU5hbWU+LCBhIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgdG8gd2hpY2ggQ2Flc2FyIGhhZCBwcmV2aW91c2x5IGxlZCBvbmUuIFlvdSBkaWQgaW5kZWVkIGNvbnN1bHQgbWUgYnkgbGV0dGVyCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIGNvbG9ueSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gKGJ1dCBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgZ2l2ZW4geW91IHRoZSBzYW1lIGFuc3dlciBhYm91dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDUyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NTI5Ij5DYXNpbGludW08L3BsYWNlTmFtZT4pLCB3aGV0aGVyIHlvdSBjb3VsZCBsZWdhbGx5IGxlYWQgYSBuZXcgY29sb255IHRvIGEKICAgICAgICAgICAgICAgICAgICBwbGFjZSB3aGVyZSB0aGVyZSB3YXMgYSBjb2xvbnkgYWxyZWFkeS4gSSBzYWlkIHRoYXQgYSBuZXcgY29sb255IGNvdWxkIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGxlZ2FsbHkgY29uZHVjdGVkIHRvIGFuIGV4aXN0aW5nIGNvbG9ueSwgd2hpY2ggaGFkIGJlZW4gZXN0YWJsaXNoZWQgd2l0aCBhIGR1ZQogICAgICAgICAgICAgICAgICAgIG9ic2VydmFuY2Ugb2YgdGhlIGF1c3BpY2VzLCBhcyBsb25nIGFzIGl0IHJlbWFpbmVkIGluIGEgZmxvdXJpc2hpbmcgc3RhdGU7IGJ1dCBJCiAgICAgICAgICAgICAgICAgICAgd3JvdGUgeW91IHdvcmQgdGhhdCBuZXcgY29sb25pc3RzIG1pZ2h0IGJlIGVucm9sbGVkIGFtb25nIHRoZSBvbGQgb25lcy4gQnV0IHlvdSwKICAgICAgICAgICAgICAgICAgICBlbGF0ZWQgYW5kIGluc29sZW50LCBkaXNyZWdhcmRpbmcgYWxsIHRoZSByZXNwZWN0IGR1ZSB0byB0aGUgYXVzcGljZXMsIGxlZCBhCiAgICAgICAgICAgICAgICAgICAgY29sb255IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NTI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ1MjkiPkNhc2lsaW51bTwvcGxhY2VOYW1lPiwgd2hpdGhlciBvbmUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBwcmV2aW91c2x5IGxlZCBhIGZldyB5ZWFycyBiZWZvcmU7IGluIG9yZGVyIHRvIGVyZWN0IHlvdXIgc3RhbmRhcmQgdGhlcmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIG1hcmsgb3V0IHRoZSBsaW5lIG9mIHRoZSBuZXcgY29sb255IHdpdGggYSBwbG93LiBBbmQgYnkgdGhhdCBwbG93IHlvdQogICAgICAgICAgICAgICAgICAgIGFsbW9zdCBncmF6ZWQgdGhlIGdhdGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCBzbwogICAgICAgICAgICAgICAgICAgIGFzIHRvIGRpbWluaXNoIHRoZSB0ZXJyaXRvcnkgb2YgdGhhdCBmbG91cmlzaGluZyBjb2xvbnkuIDwvdHJhbnNsYXRpb24+"
translation['2.40.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+IEFmdGVyIHRoaXMgdmlvbGF0aW9uIG9mIGFsbCByZWxpZ2lvdXMgb2JzZXJ2YW5jZXMsIHlvdQogICAgICAgICAgICAgICAgICAgIGhhc3RlbiBvZmYgdG8gdGhlIGVzdGF0ZSBvZiBNYXJjdXMgVmFycm8sIGEgbW9zdCBjb25zY2llbnRpb3VzIGFuZCB1cHJpZ2h0IG1hbiwKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhc2ludW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhc2ludW0iPkNhc2ludW08L3BsYWNlTmFtZT4uIEJ5IHdoYXQgcmlnaHQ/IHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGF0IGZhY2UgZG8geW91IGRvIHRoaXM/IEJ5IGp1c3QgdGhlIHNhbWUsIHlvdSB3aWxsIHNheSwgYXMgdGhhdCBieSB3aGljaCB5b3UKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIG9uIHRoZSBlc3RhdGVzIG9mIHRoZSBoZWlycyBvZiBMdWNpdXMgUnVicml1cywgb3Igb2YgdGhlIGhlaXJzIG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIFR1cnNlbGl1cywgb3Igb2Ygb3RoZXIgaW5udW1lcmFibGUgcG9zc2Vzc2lvbnMuIElmIHlvdSBnb3QgdGhlIHJpZ2h0IGZyb20gYW55CiAgICAgICAgICAgICAgICAgICAgYXVjdGlvbiwgbGV0IHRoZSBhdWN0aW9uIGhhdmUgYWxsIHRoZSBmb3JjZSB0byB3aGljaCBpdCBpcyBlbnRpdGxlZDsgbGV0CiAgICAgICAgICAgICAgICAgICAgd3JpdGluZ3MgYmUgb2YgZm9yY2UsIHByb3ZpZGVkIHRoZXkgYXJlIHRoZSB3cml0aW5ncyBvZiBDYWVzYXIsIGFuZCBub3QgeW91cgogICAgICAgICAgICAgICAgICAgIG93bjsgd3JpdGluZ3MgYnkgd2hpY2ggeW91IGFyZSBib3VuZCwgbm90IHRob3NlIGJ5IHdoaWNoIHlvdSBoYXZlIHJlbGVhc2VkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgZnJvbSBvYmxpZ2F0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.40.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aG8gc2F5cyB0aGF0IHRoZSBlc3RhdGUgb2YgVmFycm8gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+IHdhcyBldmVyIHNvbGQgYXQgYWxsPyB3aG8gZXZlciBzYXcgYW55IG5vdGljZSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgYXVjdGlvbj8gd2hvIGV2ZXIgaGVhcmQgdGhlIHZvaWNlIG9mIHRoZSBhdWN0aW9uZWVyPyBZb3Ugc2F5IHRoYXQgeW91IHNlbnQgYSBtYW4KICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT4gdG8gYnV5IGl0IG9mCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLiBJdCB3YXMgdG9vIGxvbmcgdG8gd2FpdCBmb3IgQ2Flc2FyIGhpbXNlbGYgdG8gY29tZSEgQnV0IHdobyBldmVyIGhlYXJkCiAgICAgICAgICAgICAgICAgICAgKGFuZCB0aGVyZSB3YXMgbm8gbWFuIGFib3V0IHdob3NlIHNhZmV0eSBtb3JlIHBlb3BsZSB3ZXJlIGFueGlvdXMpIHRoYXQgYW55IHBhcnQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBvZiBWYXJybydzIHByb3BlcnR5IGhhZCBiZWVuIGNvbmZpc2NhdGVkPyBXaGF0PyB3aGF0IHNoYWxsIHdlIHNheSBpZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBldmVuIHdyb3RlIHlvdSB0aGF0IHlvdSB3ZXJlIHRvIGdpdmUgaXQgdXA/IFdoYXQgY2FuIGJlIHNhaWQgc3Ryb25nCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIGZvciBzdWNoIGVub3Jtb3VzIGltcHVkZW5jZT8gUmVtb3ZlIGZvciBhIHdoaWxlIHRob3NlIHN3b3JkcyB3aGljaCB3ZSBzZWUKICAgICAgICAgICAgICAgICAgICBhcm91bmQgdXMuIFlvdSBzaGFsbCBub3cgc2VlIHRoYXQgdGhlIGNhdXNlIG9mIENhZXNhcidzIGF1Y3Rpb25zIGlzIG9uZSB0aGluZwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG9mIHlvdXIgY29uZmlkZW5jZSBhbmQgcmFzaG5lc3MgaXMgYW5vdGhlci4gRm9yIG5vdCBvbmx5IHNoYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIG93bmVyIGRyaXZlIHlvdSBmcm9tIHRoYXQgZXN0YXRlLCBidXQgYW55IG9uZSBvZiBoaXMgZnJpZW5kcywgb3IgbmVpZ2hib3JzLCBvcgogICAgICAgICAgICAgICAgICAgIGhlcmVkaXRhcnkgY29ubmVjdGlvbnMsIGFuZCBhbnkgYWdlbnQsIHdpbGwgaGF2ZSB0aGUgcmlnaHQgdG8gZG8gc28uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhc2ludW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhc2ludW0iPkNhc2ludW08L3BsYWNlTmFtZT4gd2FzIGV2ZXIgc29sZCBhdCBhbGw/IHdobyBldmVyIHNhdyBhbnkgbm90aWNlIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBhdWN0aW9uPyB3aG8gZXZlciBoZWFyZCB0aGUgdm9pY2Ugb2YgdGhlIGF1Y3Rpb25lZXI/IFlvdSBzYXkgdGhhdCB5b3Ugc2VudCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQWxleGFuZHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiB0byBidXkgaXQgb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXIuIEl0IHdhcyB0b28gbG9uZyB0byB3YWl0IGZvciBDYWVzYXIgaGltc2VsZiB0byBjb21lISBCdXQgd2hvIGV2ZXIgaGVhcmQKICAgICAgICAgICAgICAgICAgICAoYW5kIHRoZXJlIHdhcyBubyBtYW4gYWJvdXQgd2hvc2Ugc2FmZXR5IG1vcmUgcGVvcGxlIHdlcmUgYW54aW91cykgdGhhdCBhbnkgcGFydAogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIG9mIFZhcnJvJ3MgcHJvcGVydHkgaGFkIGJlZW4gY29uZmlzY2F0ZWQ/IFdoYXQ/IHdoYXQgc2hhbGwgd2Ugc2F5IGlmCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIGV2ZW4gd3JvdGUgeW91IHRoYXQgeW91IHdlcmUgdG8gZ2l2ZSBpdCB1cD8gV2hhdCBjYW4gYmUgc2FpZCBzdHJvbmcKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggZm9yIHN1Y2ggZW5vcm1vdXMgaW1wdWRlbmNlPyBSZW1vdmUgZm9yIGEgd2hpbGUgdGhvc2Ugc3dvcmRzIHdoaWNoIHdlIHNlZQogICAgICAgICAgICAgICAgICAgIGFyb3VuZCB1cy4gWW91IHNoYWxsIG5vdyBzZWUgdGhhdCB0aGUgY2F1c2Ugb2YgQ2Flc2FyJ3MgYXVjdGlvbnMgaXMgb25lIHRoaW5nCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgb2YgeW91ciBjb25maWRlbmNlIGFuZCByYXNobmVzcyBpcyBhbm90aGVyLiBGb3Igbm90IG9ubHkgc2hhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgb3duZXIgZHJpdmUgeW91IGZyb20gdGhhdCBlc3RhdGUsIGJ1dCBhbnkgb25lIG9mIGhpcyBmcmllbmRzLCBvciBuZWlnaGJvcnMsIG9yCiAgICAgICAgICAgICAgICAgICAgaGVyZWRpdGFyeSBjb25uZWN0aW9ucywgYW5kIGFueSBhZ2VudCwgd2lsbCBoYXZlIHRoZSByaWdodCB0byBkbyBzby4gPC90cmFuc2xhdGlvbj4="
translation['2.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBob3cgbWFueSBkYXlzIGRpZCBoZSBzcGVuZCByZXZlbGluZyBpbiB0aGUgbW9zdCBzY2FuZGFsb3VzIG1hbm5lciBpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgdmlsbGEhIEZyb20gdGhlIHRoaXJkIGhvdXIgdGhlcmUgd2FzIG9uZSBzY2VuZSBvZiBkcmlua2luZywgZ2FtYmxpbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIHZvbWl0aW5nLiBBbGFzIGZvciB0aGUgdW5oYXBweSBob3VzZSBpdHNlbGYhIGhvdyBkaWZmZXJlbnQgYSBtYXN0ZXIgZnJvbSBpdHMKICAgICAgICAgICAgICAgICAgICBmb3JtZXIgb25lIGhhcyBpdCBmYWxsZW4gdG8gdGhlIHNoYXJlIG9mISBBbHRob3VnaCwgaG93IGlzIGhlIHRoZSBtYXN0ZXIgYXQgYWxsPwogICAgICAgICAgICAgICAgICAgIGJ1dCBzdGlsbCBieSBob3cgZGlmZmVyZW50IGEgcGVyc29uIGhhcyBpdCBiZWVuIG9jY3VwaWVkISBGb3IgTWFyY3VzIFZhcnJvIHVzZWQKICAgICAgICAgICAgICAgICAgICBpdCBhcyBhIHBsYWNlIG9mIHJldGlyZW1lbnQgZm9yIGhpcyBzdHVkaWVzLCBub3QgYXMgYSB0aGVhdHJlIGZvciBoaXMgbHVzdHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgbm9ibGUgZGlzY3Vzc2lvbnMgdXNlZCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgcGxhY2UgaW4gdGhhdCB2aWxsYSEgd2hhdCBpZGVhcyB3ZXJlIG9yaWdpbmF0ZWQgdGhlcmUhIHdoYXQgd3JpdGluZ3Mgd2VyZQogICAgICAgICAgICAgICAgICAgIGNvbXBvc2VkIHRoZXJlISBUaGUgbGF3cyBvZiB0aGUgUm9tYW4gcGVvcGxlLCB0aGUgbWVtb3JpYWxzIG9mIG91ciBhbmNlc3RvcnMsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnNpZGVyYXRpb24gb2YgYWxsIHdpc2RvbSBhbmQgYWxsIGxlYXJuaW5nLCB3ZXJlIHRoZSB0b3BpY3MgdGhhdCB1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZHdlbHQgb24gdGhlbjvigJRidXQgbm93LCB3aGlsZSB5b3Ugd2VyZSB0aGUgaW50cnVkZXIgdGhlcmUgKGZvciBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgY2FsbCB5b3UgdGhlIG1hc3RlciksIGV2ZXJ5IHBsYWNlIHdhcyByZXNvdW5kaW5nIHdpdGggdGhlIHZvaWNlcyBvZgogICAgICAgICAgICAgICAgICAgIGRydW5rZW4gbWVuOyB0aGUgcGF2ZW1lbnRzIHdlcmUgZmxvYXRpbmcgd2l0aCB3aW5lOyB0aGUgd2FsbHMgd2VyZSBkcmlwcGluZzsKICAgICAgICAgICAgICAgICAgICBub2JseS1ib3JuIGJveXMgd2VyZSBtaXhpbmcgd2l0aCB0aGUgYmFzZXN0IGhpcmVsaW5nczsgcHJvc3RpdHV0ZXMgd2l0aCBtb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgZmFtaWxpZXMuIE1lbiBjYW1lIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXF1aW51bSIga2V5PSJwZXJzZXVzLEFxdWludW0iPkFxdWludW08L3BsYWNlTmFtZT4sIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDk4NzciIGtleT0idGduLDcwMDk4NzciPkludGVyYW1uYTwvcGxhY2VOYW1lPiB0byBzYWx1dGUgaGltLiBObyBvbmUgd2FzIGFkbWl0dGVkLgogICAgICAgICAgICAgICAgICAgIFRoYXQsIGluZGVlZCwgd2FzIHByb3Blci4gRm9yIHRoZSBvcmRpbmFyeSBtYXJrcyBvZiByZXNwZWN0IHdlcmUgdW5zdWl0ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwcm9mbGlnYXRlIG9mIG1lbi4gPG1pbGVzdG9uZSBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+IFdoZW4gZ29pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZW5jZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGhlIGFwcHJvYWNoZWQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcXVpbnVtIiBrZXk9InBlcnNldXMsQXF1aW51bSI+QXF1aW51bTwvcGxhY2VOYW1lPiwgYSBwcmV0dHkgbnVtZXJvdXMKICAgICAgICAgICAgICAgICAgICBjb21wYW55IChmb3IgaXQgaXMgYSBwb3B1bG91cyBtdW5pY2lwYWxpdHkpIGNhbWUgb3V0IHRvIG1lZXQgaGltLiBCdXQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCB0aHJvdWdoIHRoZSB0b3duIGluIGEgY292ZXJlZCBsaXR0ZXIsIGFzIGlmIGhlIGhhZCBiZWVuIGRlYWQuIFRoZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFxdWludW0iIGtleT0icGVyc2V1cyxBcXVpbnVtIj5BcXVpbnVtPC9wbGFjZU5hbWU+IGFjdGVkIGZvb2xpc2hseSwgbm8KICAgICAgICAgICAgICAgICAgICBkb3VidDsgYnV0IHN0aWxsIHRoZXkgd2VyZSBpbiBoaXMgcm9hZC4gV2hhdCBkaWQgdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFuYWduaWEiIGtleT0icGVyc2V1cyxBbmFnbmlhIj5BbmFnbmlhPC9wbGFjZU5hbWU+IGRvPyB3aG8sIGFsdGhvdWdoIHRoZXkgd2VyZSBvdXQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgbGluZSBvZiByb2FkLCBjYW1lIGRvd24gdG8gbWVldCBoaW0sIGluIG9yZGVyIHRvIHBheSBoaW0gdGhlaXIgcmVzcGVjdHMsIGFzCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgd2VyZSBjb25zdWwuIEl0IGlzIGFuIGluY3JlZGlibGUgdGhpbmcgdG8gc2F5LCBidXQgc3RpbGwgaXQgd2FzIG9ubHkgdG9vCiAgICAgICAgICAgICAgICAgICAgbm90b3Jpb3VzIGF0IHRoZSB0aW1lLCB0aGF0IGhlIHJldHVybmVkIG5vYm9keSdzIHNhbHV0YXRpb247IGVzcGVjaWFsbHkgYXMgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgdHdvIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFuYWduaWEiIGtleT0icGVyc2V1cyxBbmFnbmlhIj5BbmFnbmlhPC9wbGFjZU5hbWU+IHdpdGggaGltLAogICAgICAgICAgICAgICAgICAgIE11c3RlbGEgYW5kIExhY287IG9uZSBvZiB3aG9tIGhhZCB0aGUgY2FyZSBvZiBoaXMgc3dvcmRzLCBhbmQgdGhlIG90aGVyIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGRyaW5raW5nLWN1cHMuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.41.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgbm9ibGUgZGlzY3Vzc2lvbnMgdXNlZCB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgcGxhY2UgaW4gdGhhdCB2aWxsYSEgd2hhdCBpZGVhcyB3ZXJlIG9yaWdpbmF0ZWQgdGhlcmUhIHdoYXQgd3JpdGluZ3Mgd2VyZQogICAgICAgICAgICAgICAgICAgIGNvbXBvc2VkIHRoZXJlISBUaGUgbGF3cyBvZiB0aGUgUm9tYW4gcGVvcGxlLCB0aGUgbWVtb3JpYWxzIG9mIG91ciBhbmNlc3RvcnMsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnNpZGVyYXRpb24gb2YgYWxsIHdpc2RvbSBhbmQgYWxsIGxlYXJuaW5nLCB3ZXJlIHRoZSB0b3BpY3MgdGhhdCB1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZHdlbHQgb24gdGhlbjvigJRidXQgbm93LCB3aGlsZSB5b3Ugd2VyZSB0aGUgaW50cnVkZXIgdGhlcmUgKGZvciBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgY2FsbCB5b3UgdGhlIG1hc3RlciksIGV2ZXJ5IHBsYWNlIHdhcyByZXNvdW5kaW5nIHdpdGggdGhlIHZvaWNlcyBvZgogICAgICAgICAgICAgICAgICAgIGRydW5rZW4gbWVuOyB0aGUgcGF2ZW1lbnRzIHdlcmUgZmxvYXRpbmcgd2l0aCB3aW5lOyB0aGUgd2FsbHMgd2VyZSBkcmlwcGluZzsKICAgICAgICAgICAgICAgICAgICBub2JseS1ib3JuIGJveXMgd2VyZSBtaXhpbmcgd2l0aCB0aGUgYmFzZXN0IGhpcmVsaW5nczsgcHJvc3RpdHV0ZXMgd2l0aCBtb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgZmFtaWxpZXMuIE1lbiBjYW1lIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcXVpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcXVpbnVtIj5BcXVpbnVtPC9wbGFjZU5hbWU+LCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA5ODc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDk4NzciPkludGVyYW1uYTwvcGxhY2VOYW1lPiB0byBzYWx1dGUgaGltLiBObyBvbmUgd2FzIGFkbWl0dGVkLgogICAgICAgICAgICAgICAgICAgIFRoYXQsIGluZGVlZCwgd2FzIHByb3Blci4gRm9yIHRoZSBvcmRpbmFyeSBtYXJrcyBvZiByZXNwZWN0IHdlcmUgdW5zdWl0ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBwcm9mbGlnYXRlIG9mIG1lbi4gPC90cmFuc2xhdGlvbj4="
translation['2.41.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+IFdoZW4gZ29pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZW5jZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gaGUgYXBwcm9hY2hlZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFxdWludW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFxdWludW0iPkFxdWludW08L3BsYWNlTmFtZT4sIGEgcHJldHR5IG51bWVyb3VzCiAgICAgICAgICAgICAgICAgICAgY29tcGFueSAoZm9yIGl0IGlzIGEgcG9wdWxvdXMgbXVuaWNpcGFsaXR5KSBjYW1lIG91dCB0byBtZWV0IGhpbS4gQnV0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGNhcnJpZWQgdGhyb3VnaCB0aGUgdG93biBpbiBhIGNvdmVyZWQgbGl0dGVyLCBhcyBpZiBoZSBoYWQgYmVlbiBkZWFkLiBUaGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcXVpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcXVpbnVtIj5BcXVpbnVtPC9wbGFjZU5hbWU+IGFjdGVkIGZvb2xpc2hseSwgbm8KICAgICAgICAgICAgICAgICAgICBkb3VidDsgYnV0IHN0aWxsIHRoZXkgd2VyZSBpbiBoaXMgcm9hZC4gV2hhdCBkaWQgdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFuYWduaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFuYWduaWEiPkFuYWduaWE8L3BsYWNlTmFtZT4gZG8/IHdobywgYWx0aG91Z2ggdGhleSB3ZXJlIG91dCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBsaW5lIG9mIHJvYWQsIGNhbWUgZG93biB0byBtZWV0IGhpbSwgaW4gb3JkZXIgdG8gcGF5IGhpbSB0aGVpciByZXNwZWN0cywgYXMKICAgICAgICAgICAgICAgICAgICBpZiBoZSB3ZXJlIGNvbnN1bC4gSXQgaXMgYW4gaW5jcmVkaWJsZSB0aGluZyB0byBzYXksIGJ1dCBzdGlsbCBpdCB3YXMgb25seSB0b28KICAgICAgICAgICAgICAgICAgICBub3RvcmlvdXMgYXQgdGhlIHRpbWUsIHRoYXQgaGUgcmV0dXJuZWQgbm9ib2R5J3Mgc2FsdXRhdGlvbjsgZXNwZWNpYWxseSBhcyBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB0d28gbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW5hZ25pYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW5hZ25pYSI+QW5hZ25pYTwvcGxhY2VOYW1lPiB3aXRoIGhpbSwKICAgICAgICAgICAgICAgICAgICBNdXN0ZWxhIGFuZCBMYWNvOyBvbmUgb2Ygd2hvbSBoYWQgdGhlIGNhcmUgb2YgaGlzIHN3b3JkcywgYW5kIHRoZSBvdGhlciBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBkcmlua2luZy1jdXBzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+IFdoeSBzaG91bGQgSSBtZW50aW9uIHRoZSB0aHJlYXRzIGFuZCBpbnN1bHRzCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aGljaCBoZSBpbnZlaWdoZWQgYWdhaW5zdCB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGVhbnVtIFNpZGljaW51bSIga2V5PSJwZXJzZXVzLFRlYW51bSBTaWRpY2ludW0iPlRlYW51bSBTaWRpY2ludW08L3BsYWNlTmFtZT4sIHdpdGggd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBoYXJhc3NlZCB0aGUgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHV0ZW9saSIga2V5PSJwZXJzZXVzLFB1dGVvbGkiPlB1dGVvbGk8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGhhZCBhZG9wdGVkIENhaXVzIENhc3NpdXMgYW5kIHRoZSBCcnV0aSBhcyB0aGVpciBwYXRyb25zPyBhIGNob2ljZQogICAgICAgICAgICAgICAgICAgIGRpY3RhdGVkLCBpbiB0cnV0aCwgYnkgZ3JlYXQgd2lzZG9tLCBhbmQgZ3JlYXQgemVhbCwgYmVuZXZvbGVuY2UsIGFuZCBhZmZlY3Rpb24KICAgICAgICAgICAgICAgICAgICBmb3IgdGhlbTsgbm90IGJ5IHZpb2xlbmNlIGFuZCBmb3JjZSBvZiBhcm1zLCBieSB3aGljaCBtZW4gaGF2ZSBiZWVuIGNvbXBlbGxlZCB0bwogICAgICAgICAgICAgICAgICAgIGNob29zZSB5b3UsIGFuZCBCYXNpbHVzLCBhbmQgb3RoZXJzIGxpa2UgeW91IGJvdGgs4oCUbWVuIHdob20gbm8gb25lCiAgICAgICAgICAgICAgICAgICAgd291bGQgY2hvb3NlIHRvIGhhdmUgZm9yIGhpcyBvd24gY2xpZW50cywgbXVjaCBsZXNzIHRvIGJlIHRoZWlyIGNsaWVudCBoaW1zZWxmLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjQyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.41.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+IFdoeSBzaG91bGQgSSBtZW50aW9uIHRoZSB0aHJlYXRzIGFuZCBpbnN1bHRzCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aGljaCBoZSBpbnZlaWdoZWQgYWdhaW5zdCB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGVhbnVtIFNpZGljaW51bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGVhbnVtIFNpZGljaW51bSI+VGVhbnVtIFNpZGljaW51bTwvcGxhY2VOYW1lPiwgd2l0aCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhhcmFzc2VkIHRoZSBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSBoYWQgYWRvcHRlZCBDYWl1cyBDYXNzaXVzIGFuZCB0aGUgQnJ1dGkgYXMgdGhlaXIgcGF0cm9ucz8gYSBjaG9pY2UKICAgICAgICAgICAgICAgICAgICBkaWN0YXRlZCwgaW4gdHJ1dGgsIGJ5IGdyZWF0IHdpc2RvbSwgYW5kIGdyZWF0IHplYWwsIGJlbmV2b2xlbmNlLCBhbmQgYWZmZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZW07IG5vdCBieSB2aW9sZW5jZSBhbmQgZm9yY2Ugb2YgYXJtcywgYnkgd2hpY2ggbWVuIGhhdmUgYmVlbiBjb21wZWxsZWQgdG8KICAgICAgICAgICAgICAgICAgICBjaG9vc2UgeW91LCBhbmQgQmFzaWx1cywgYW5kIG90aGVycyBsaWtlIHlvdSBib3RoLOKAlG1lbiB3aG9tIG5vIG9uZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGNob29zZSB0byBoYXZlIGZvciBoaXMgb3duIGNsaWVudHMsIG11Y2ggbGVzcyB0byBiZSB0aGVpciBjbGllbnQgaGltc2VsZi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBtZWFuIHRpbWUsIHdoaWxlIHlvdSB5b3Vyc2VsZiB3ZXJlIGFic2VudCwgd2hhdCBhIGRheSB3YXMgdGhhdCBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIGNvbGxlYWd1ZSB3aGVuIGhlIG92ZXJ0dXJuZWQgdGhhdCB0b21iIGluIHRoZSBmb3J1bSwgd2hpY2ggeW91IHdlcmUgYWNjdXN0b21lZAogICAgICAgICAgICAgICAgICAgIHRvIHJlZ2FyZCB3aXRoIHZlbmVyYXRpb24hIEFuZCB3aGVuIHRoYXQgYWN0aW9uIHdhcyBhbm5vdW5jZWQgdG8geW91LAogICAgICAgICAgICAgICAgICAgIHlvdeKAlGFzIGlzIGFncmVlZCB1cG9uIGJ5IGFsbCB3aG8gd2VyZSB3aXRoIHlvdSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1l4oCUZmFpbnRlZCBhd2F5LiBXaGF0IGhhcHBlbmVkIGFmdGVyd2FyZCBJIGtub3cgbm90LiBJIGltYWdpbmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRlcnJvciBhbmQgYXJtcyBnb3QgdGhlIG1hc3RlcnkuIEF0IGFsbCBldmVudHMsIHlvdSBkcmFnZ2VkIHlvdXIgY29sbGVhZ3VlIGRvd24KICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyBoZWF2ZW47IGFuZCB5b3UgcmVuZGVyZWQgaGltLCBub3QgZXZlbiBub3cgbGlrZSB5b3Vyc2VsZiwgYXQgYWxsIGV2ZW50cwogICAgICAgICAgICAgICAgICAgIHZlcnkgdW5saWtlIGhpcyBvd24gZm9ybWVyIHNlbGYuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.42.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHRoYXQgd2hhdCBhIHJldHVybiB3YXMgdGhhdCBvZiB5b3VycyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4hIEhvdyBncmVhdCB3YXMgdGhlIGFnaXRhdGlvbiBvZiB0aGUgd2hvbGUgY2l0eSEgV2UKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3RlZCBDaW5uYSBiZWluZyB0b28gcG93ZXJmdWw7IGFmdGVyIGhpbSB3ZSBoYWQgc2VlbiBTdWxsYSB3aXRoIGFic29sdXRlCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5LCBhbmQgd2UgaGFkIGxhdGVseSBiZWhlbGQgQ2Flc2FyIGFjdGluZyBhcyBraW5nLiBUaGVyZSB3ZXJlIHBlcmhhcHMKICAgICAgICAgICAgICAgICAgICBzd29yZHMsIGJ1dCB0aGV5IHdlcmUgc2hlYXRoZWQsIGFuZCB0aGV5IHdlcmUgbm90IHZlcnkgbnVtZXJvdXMuIEJ1dCBob3cgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBhbmQgaG93IGJhcmJhcmljIGEgcHJvY2Vzc2lvbiBpcyB5b3VycyEgTWVuIGZvbGxvdyB5b3UgaW4gYmF0dGxlIGFycmF5IHdpdGgKICAgICAgICAgICAgICAgICAgICBkcmF3biBzd29yZHM7IHdlIHNlZSB3aG9sZSBsaXR0ZXJzIGZ1bGwgb2Ygc2hpZWxkcyBib3JuZSBhbG9uZy4gQW5kIHlldCBieQogICAgICAgICAgICAgICAgICAgIGN1c3RvbSwgTyBjb25zY3JpcHQgZmF0aGVycywgd2UgaGF2ZSBiZWNvbWUgaW51cmVkIGFuZCBjYWxsb3VzIHRvIHRoZXNlIHRoaW5ncywKICAgICAgICAgICAgICAgICAgICBXaGVuIG9uIHRoZSBmaXJzdCBvZiBKdW5lIHdlIHdpc2hlZCB0byBjb21lIHRvIHRoZSBzZW5hdGUsIGFzIGl0IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgb3JkYWluZWQsIHdlIHdlcmUgc3VkZGVubHkgZnJpZ2h0ZW5lZCBhbmQgZm9yY2VkIHRvIGZsZWUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBoZSwgYXMgaGF2aW5nIG5vIG5lZWQgb2YgYSBzZW5hdGUsIGRpZCBub3QgbWlzcyBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB1cywgYW5kIHJhdGhlciByZWpvaWNlZCBhdCBvdXIgZGVwYXJ0dXJlLCBhbmQgaW1tZWRpYXRlbHkgcHJvY2VlZGVkIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWFydmVsb3VzIGV4cGxvaXRzIG9mIGhpcy4gSGUgd2hvIGhhZCBkZWZlbmRlZCB0aGUgbWVtb3JhbmRhIG9mIENhZXNhciBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FrZSBvZiBoaXMgb3duIHByb2ZpdCwgb3ZlcnR1cm5lZCB0aGUgbGF3cyBvZiBDYWVzYXLigJRhbmQgZ29vZCBsYXdzCiAgICAgICAgICAgICAgICAgICAgdG9v4oCUZm9yIHRoZSBzYWtlIG9mIGJlaW5nIGFibGUgdG8gYWdpdGF0ZSB0aGUgcmVwdWJsaWMuIEhlIGluY3JlYXNlZAogICAgICAgICAgICAgICAgICAgIHRoZSBudW1iZXIgb2YgeWVhcnMgdGhhdCBtYWdpc3RyYXRlcyB3ZXJlIHRvIGVuam95IHRoZWlyIHByb3ZpbmNlczsgbW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIHdhcyBib3VuZCB0byBiZSB0aGUgZGVmZW5kZXIgb2YgdGhlIGFjdHMgb2YgQ2Flc2FyLCBoZSByZXNjaW5kZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGJvdGggd2l0aCByZWZlcmVuY2UgdG8gcHVibGljIGFuZCBwcml2YXRlIHRyYW5zYWN0aW9ucy4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+ISBIb3cgZ3JlYXQgd2FzIHRoZSBhZ2l0YXRpb24gb2YgdGhlIHdob2xlIGNpdHkhIFdlCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0ZWQgQ2lubmEgYmVpbmcgdG9vIHBvd2VyZnVsOyBhZnRlciBoaW0gd2UgaGFkIHNlZW4gU3VsbGEgd2l0aCBhYnNvbHV0ZQogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSwgYW5kIHdlIGhhZCBsYXRlbHkgYmVoZWxkIENhZXNhciBhY3RpbmcgYXMga2luZy4gVGhlcmUgd2VyZSBwZXJoYXBzCiAgICAgICAgICAgICAgICAgICAgc3dvcmRzLCBidXQgdGhleSB3ZXJlIHNoZWF0aGVkLCBhbmQgdGhleSB3ZXJlIG5vdCB2ZXJ5IG51bWVyb3VzLiBCdXQgaG93IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgYW5kIGhvdyBiYXJiYXJpYyBhIHByb2Nlc3Npb24gaXMgeW91cnMhIE1lbiBmb2xsb3cgeW91IGluIGJhdHRsZSBhcnJheSB3aXRoCiAgICAgICAgICAgICAgICAgICAgZHJhd24gc3dvcmRzOyB3ZSBzZWUgd2hvbGUgbGl0dGVycyBmdWxsIG9mIHNoaWVsZHMgYm9ybmUgYWxvbmcuIEFuZCB5ZXQgYnkKICAgICAgICAgICAgICAgICAgICBjdXN0b20sIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdlIGhhdmUgYmVjb21lIGludXJlZCBhbmQgY2FsbG91cyB0byB0aGVzZSB0aGluZ3MsCiAgICAgICAgICAgICAgICAgICAgV2hlbiBvbiB0aGUgZmlyc3Qgb2YgSnVuZSB3ZSB3aXNoZWQgdG8gY29tZSB0byB0aGUgc2VuYXRlLCBhcyBpdCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIG9yZGFpbmVkLCB3ZSB3ZXJlIHN1ZGRlbmx5IGZyaWdodGVuZWQgYW5kIGZvcmNlZCB0byBmbGVlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.42.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBoZSwgYXMgaGF2aW5nIG5vIG5lZWQgb2YgYSBzZW5hdGUsIGRpZCBub3QgbWlzcyBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB1cywgYW5kIHJhdGhlciByZWpvaWNlZCBhdCBvdXIgZGVwYXJ0dXJlLCBhbmQgaW1tZWRpYXRlbHkgcHJvY2VlZGVkIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWFydmVsb3VzIGV4cGxvaXRzIG9mIGhpcy4gSGUgd2hvIGhhZCBkZWZlbmRlZCB0aGUgbWVtb3JhbmRhIG9mIENhZXNhciBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FrZSBvZiBoaXMgb3duIHByb2ZpdCwgb3ZlcnR1cm5lZCB0aGUgbGF3cyBvZiBDYWVzYXLigJRhbmQgZ29vZCBsYXdzCiAgICAgICAgICAgICAgICAgICAgdG9v4oCUZm9yIHRoZSBzYWtlIG9mIGJlaW5nIGFibGUgdG8gYWdpdGF0ZSB0aGUgcmVwdWJsaWMuIEhlIGluY3JlYXNlZAogICAgICAgICAgICAgICAgICAgIHRoZSBudW1iZXIgb2YgeWVhcnMgdGhhdCBtYWdpc3RyYXRlcyB3ZXJlIHRvIGVuam95IHRoZWlyIHByb3ZpbmNlczsgbW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIHdhcyBib3VuZCB0byBiZSB0aGUgZGVmZW5kZXIgb2YgdGhlIGFjdHMgb2YgQ2Flc2FyLCBoZSByZXNjaW5kZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGJvdGggd2l0aCByZWZlcmVuY2UgdG8gcHVibGljIGFuZCBwcml2YXRlIHRyYW5zYWN0aW9ucy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiBwdWJsaWMgdHJhbnNhY3Rpb25zIG5vdGhpbmcgaXMgbW9yZSBhdXRob3JpdGF0aXZlIHRoYW4gbGF3OyBpbiBwcml2YXRlIGFmZmFpcnMKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCB2YWxpZCBvZiBhbGwgZGVlZHMgaXMgYSB3aWxsLiBPZiB0aGUgbGF3cywgc29tZSBoZSBhYm9saXNoZWQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGdpdmluZyB0aGUgbGVhc3Qgbm90aWNlOyBvdGhlcnMgaGUgZ2F2ZSBub3RpY2Ugb2YgYmlsbHMgdG8gYWJvbGlzaC4gV2lsbHMgaGUKICAgICAgICAgICAgICAgICAgICBhbm51bGxlZDsgdGhvdWdoIHRoZXkgaGF2ZSBiZWVuIGF0IGFsbCB0aW1lcyBoZWxkIHNhY3JlZCBldmVuIGluIHRoZSBjYXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHZlcnkgbWVhbmVzdCBvZiB0aGUgY2l0aXplbnMuIEFzIGZvciB0aGUgc3RhdHVlcyBhbmQgcGljdHVyZXMgd2hpY2ggQ2Flc2FyCiAgICAgICAgICAgICAgICAgICAgYmVxdWVhdGhlZCB0byB0aGUgcGVvcGxlLCB0b2dldGhlciB3aXRoIGhpcyBnYXJkZW5zLCB0aG9zZSBoZSBjYXJyaWVkIGF3YXksIHNvbWUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgaG91c2Ugd2hpY2ggYmVsb25nZWQgdG8gUG9tcGVpdXMsIGFuZCBzb21lIHRvIFNjaXBpbydzIHZpbGxhLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.43.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgYXJlIHlvdSB0aGVuIGRpbGlnZW50IGluIGRvaW5nIGhvbm9yIHRvIENhZXNhcidzIG1lbW9yeT8gRG8geW91IGxvdmUgaGltIGV2ZW4KICAgICAgICAgICAgICAgICAgICBub3cgdGhhdCBoZSBpcyBkZWFkPyBXaGF0IGdyZWF0ZXIgaG9ub3IgaGFkIGhlIG9idGFpbmVkIHRoYW4gdGhhdCBvZiBoYXZpbmcgYQogICAgICAgICAgICAgICAgICAgIGhvbHkgY3VzaGlvbiwgYW4gaW1hZ2UsIGEgdGVtcGxlLCBhbmQgYSBwcmllc3Q/IEFzIHRoZW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjUyNjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNTI2MCI+SnVwaXRlcjwvcGxhY2VOYW1lPiwgYW5kIE1hcnMsIGFuZCBRdWlyaW51cyBoYXZlIHByaWVzdHMsCiAgICAgICAgICAgICAgICAgICAgc28gTWFyY3VzLiBBbnRvbml1cyBpcyB0aGUgcHJpZXN0IG9mIHRoZSBnb2QgSnVsaXVzLiBXaHkgdGhlbiBkbyB5b3UgZGVsYXk/IHdoeQogICAgICAgICAgICAgICAgICAgIGFyZSBub3QgeW91IGluYXVndXJhdGVkPyBDaG9vc2UgYSBkYXk7IHNlbGVjdCBzb21lIG9uZSB0byBpbmF1Z3VyYXRlIHlvdTsgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgY29sbGVhZ3Vlczsgbm8gb25lIHdpbGwgcmVmdXNlLiBPIHlvdSBkZXRlc3RhYmxlIG1hbiwgd2hldGhlciB5b3UgYXJlIHRoZSBwcmllc3QKICAgICAgICAgICAgICAgICAgICBvZiBhIHR5cmFudCwgb3Igb2YgYSBkZWFkIG1hbiEgSSBhc2sgeW91IHRoZW4sIHdoZXRoZXIgeW91IGFyZSBpZ25vcmFudCB3aGF0IGRheQogICAgICAgICAgICAgICAgICAgIHRoaXMgaXM/IEFyZSB5b3UgaWdub3JhbnQgdGhhdCB5ZXN0ZXJkYXkgd2FzIHRoZSBmb3VydGggZGF5IG9mIHRoZSBSb21hbiBnYW1lcwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBDaXJjdXM/IGFuZCB0aGF0IHlvdSB5b3Vyc2VsZiBzdWJtaXR0ZWQgYSBtb3Rpb24gdG8gdGhlIHBlb3BsZSwgdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgZmlmdGggZGF5IHNob3VsZCBiZSBhZGRlZCBiZXNpZGVzLCBpbiBob25vciBvZiBDYWVzYXI/IFdoeSBhcmUgd2Ugbm90IGFsbCBjbGFkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHByYWV0ZXh0YT8gV2h5IGFyZSB3ZSBwZXJtaXR0aW5nIHRoZSBob25vciB3aGljaCBieSB5b3VyIGxhdyB3YXMKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgZm9yIENhZXNhciB0byBiZSBkZXNlcnRlZD8gSGFkIHlvdSBubyBvYmplY3Rpb24gdG8gc28gaG9seSBhIGRheSBiZWluZwogICAgICAgICAgICAgICAgICAgIHBvbGx1dGVkIGJ5IHRoZSBhZGRpdGlvbiBvZiBzdXBwbGljYXRpb25zLCB3aGlsZSB5b3UgZGlkIG5vdCBjaG9vc2UgaXQgdG8gYmUgc28KICAgICAgICAgICAgICAgICAgICBieSB0aGUgYWRkaXRpb24gb2YgY2VyZW1vbmllcyBjb25uZWN0ZWQgd2l0aCBhIHNhY3JlZCBjdXNoaW9uPyBFaXRoZXIgdGFrZSBhd2F5CiAgICAgICAgICAgICAgICAgICAgcmVsaWdpb24gaW4gZXZlcnkgY2FzZSwgb3IgcHJlc2VydmUgaXQgaW4gZXZlcnkgY2FzZS4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjUyNjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyNTI2MCI+SnVwaXRlcjwvcGxhY2VOYW1lPiwgYW5kIE1hcnMsIGFuZCBRdWlyaW51cyBoYXZlIHByaWVzdHMsCiAgICAgICAgICAgICAgICAgICAgc28gTWFyY3VzLiBBbnRvbml1cyBpcyB0aGUgcHJpZXN0IG9mIHRoZSBnb2QgSnVsaXVzLiBXaHkgdGhlbiBkbyB5b3UgZGVsYXk/IHdoeQogICAgICAgICAgICAgICAgICAgIGFyZSBub3QgeW91IGluYXVndXJhdGVkPyBDaG9vc2UgYSBkYXk7IHNlbGVjdCBzb21lIG9uZSB0byBpbmF1Z3VyYXRlIHlvdTsgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgY29sbGVhZ3Vlczsgbm8gb25lIHdpbGwgcmVmdXNlLiBPIHlvdSBkZXRlc3RhYmxlIG1hbiwgd2hldGhlciB5b3UgYXJlIHRoZSBwcmllc3QKICAgICAgICAgICAgICAgICAgICBvZiBhIHR5cmFudCwgb3Igb2YgYSBkZWFkIG1hbiEgSSBhc2sgeW91IHRoZW4sIHdoZXRoZXIgeW91IGFyZSBpZ25vcmFudCB3aGF0IGRheQogICAgICAgICAgICAgICAgICAgIHRoaXMgaXM/IEFyZSB5b3UgaWdub3JhbnQgdGhhdCB5ZXN0ZXJkYXkgd2FzIHRoZSBmb3VydGggZGF5IG9mIHRoZSBSb21hbiBnYW1lcwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBDaXJjdXM/IGFuZCB0aGF0IHlvdSB5b3Vyc2VsZiBzdWJtaXR0ZWQgYSBtb3Rpb24gdG8gdGhlIHBlb3BsZSwgdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgZmlmdGggZGF5IHNob3VsZCBiZSBhZGRlZCBiZXNpZGVzLCBpbiBob25vciBvZiBDYWVzYXI/IFdoeSBhcmUgd2Ugbm90IGFsbCBjbGFkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHByYWV0ZXh0YT8gV2h5IGFyZSB3ZSBwZXJtaXR0aW5nIHRoZSBob25vciB3aGljaCBieSB5b3VyIGxhdyB3YXMKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgZm9yIENhZXNhciB0byBiZSBkZXNlcnRlZD8gSGFkIHlvdSBubyBvYmplY3Rpb24gdG8gc28gaG9seSBhIGRheSBiZWluZwogICAgICAgICAgICAgICAgICAgIHBvbGx1dGVkIGJ5IHRoZSBhZGRpdGlvbiBvZiBzdXBwbGljYXRpb25zLCB3aGlsZSB5b3UgZGlkIG5vdCBjaG9vc2UgaXQgdG8gYmUgc28KICAgICAgICAgICAgICAgICAgICBieSB0aGUgYWRkaXRpb24gb2YgY2VyZW1vbmllcyBjb25uZWN0ZWQgd2l0aCBhIHNhY3JlZCBjdXNoaW9uPyBFaXRoZXIgdGFrZSBhd2F5CiAgICAgICAgICAgICAgICAgICAgcmVsaWdpb24gaW4gZXZlcnkgY2FzZSwgb3IgcHJlc2VydmUgaXQgaW4gZXZlcnkgY2FzZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTExIiB1bml0PSJzZWN0aW9uIiAvPiBZb3Ugd2lsbCBhc2sgd2hldGhlciBJIGFwcHJvdmUgb2YgaGlzIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGEgc2FjcmVkIGN1c2hpb24sIGEgdGVtcGxlIGFuZCBhIHByaWVzdD8gSSBhcHByb3ZlIG9mIG5vbmUgb2YgdGhvc2UgdGhpbmdzLiBCdXQKICAgICAgICAgICAgICAgICAgICB5b3UsIHdobyBhcmUgZGVmZW5kaW5nIHRoZSBhY3RzIG9mIENhZXNhciwgd2hhdCByZWFzb24gY2FuIHlvdSBnaXZlIGZvcgogICAgICAgICAgICAgICAgICAgIGRlZmVuZGluZyBzb21lLCBhbmQgZGlzcmVnYXJkaW5nIG90aGVycz8gdW5sZXNzLCBpbmRlZWQsIHlvdSBjaG9vc2UgdG8gYWRtaXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBtZWFzdXJlIGV2ZXJ5IHRoaW5nIGJ5IHlvdXIgb3duIGdhaW4sIGFuZCBub3QgYnkgaGlzIGRpZ25pdHkuIFdoYXQgd2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSBub3cgcmVwbHkgdG8gdGhlc2UgYXJndW1lbnRz4oCUKGZvciBJIGFtIHdhaXRpbmcgdG8gd2l0bmVzcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgZWxvcXVlbmNlOyBJIGtuZXcgeW91ciBncmFuZGZhdGhlciwgd2hvIHdhcyBhIG1vc3QgZWxvcXVlbnQgbWFuLCBidXQgSSBrbm93IHlvdQogICAgICAgICAgICAgICAgICAgIHRvIGJlIGEgbW9yZSB1bmRpc2d1aXNlZCBzcGVha2VyIHRoYW4gaGUgd2FzOyBoZSBuZXZlciBoYXJhbmd1ZWQgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIG5ha2VkOyBidXQgd2UgaGF2ZSBzZWVuIHlvdXIgYnJlYXN0LCBtYW4sIHdpdGhvdXQgZGlzZ3Vpc2UgYXMgeW91IGFyZSk/IFdpbGwgeW91CiAgICAgICAgICAgICAgICAgICAgbWFrZSBhbnkgcmVwbHkgdG8gdGhlc2Ugc3RhdGVtZW50cz8gd2lsbCB5b3UgZGFyZSB0byBvcGVuIHlvdXIgbW91dGggYXQgYWxsPyBDYW4KICAgICAgICAgICAgICAgICAgICB5b3UgZmluZCBvbmUgc2luZ2xlIGFydGljbGUgaW4gdGhpcyBsb25nIHNwZWVjaCBvZiBtaW5lLCB0byB3aGljaCB5b3UgdHJ1c3QgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBjYW4gbWFrZSBhbnkgYW5zd2VyPyBIb3dldmVyLCB3ZSB3aWxsIHNheSBubyBtb3JlIG9mIHdoYXQgaXMgcGFzdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjExMiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.43.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+IFlvdSB3aWxsIGFzayB3aGV0aGVyIEkgYXBwcm92ZSBvZiBoaXMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYSBzYWNyZWQgY3VzaGlvbiwgYSB0ZW1wbGUgYW5kIGEgcHJpZXN0PyBJIGFwcHJvdmUgb2Ygbm9uZSBvZiB0aG9zZSB0aGluZ3MuIEJ1dAogICAgICAgICAgICAgICAgICAgIHlvdSwgd2hvIGFyZSBkZWZlbmRpbmcgdGhlIGFjdHMgb2YgQ2Flc2FyLCB3aGF0IHJlYXNvbiBjYW4geW91IGdpdmUgZm9yCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kaW5nIHNvbWUsIGFuZCBkaXNyZWdhcmRpbmcgb3RoZXJzPyB1bmxlc3MsIGluZGVlZCwgeW91IGNob29zZSB0byBhZG1pdAogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IG1lYXN1cmUgZXZlcnkgdGhpbmcgYnkgeW91ciBvd24gZ2FpbiwgYW5kIG5vdCBieSBoaXMgZGlnbml0eS4gV2hhdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdyByZXBseSB0byB0aGVzZSBhcmd1bWVudHPigJQoZm9yIEkgYW0gd2FpdGluZyB0byB3aXRuZXNzIHlvdXIKICAgICAgICAgICAgICAgICAgICBlbG9xdWVuY2U7IEkga25ldyB5b3VyIGdyYW5kZmF0aGVyLCB3aG8gd2FzIGEgbW9zdCBlbG9xdWVudCBtYW4sIGJ1dCBJIGtub3cgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgYSBtb3JlIHVuZGlzZ3Vpc2VkIHNwZWFrZXIgdGhhbiBoZSB3YXM7IGhlIG5ldmVyIGhhcmFuZ3VlZCB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgbmFrZWQ7IGJ1dCB3ZSBoYXZlIHNlZW4geW91ciBicmVhc3QsIG1hbiwgd2l0aG91dCBkaXNndWlzZSBhcyB5b3UgYXJlKT8gV2lsbCB5b3UKICAgICAgICAgICAgICAgICAgICBtYWtlIGFueSByZXBseSB0byB0aGVzZSBzdGF0ZW1lbnRzPyB3aWxsIHlvdSBkYXJlIHRvIG9wZW4geW91ciBtb3V0aCBhdCBhbGw/IENhbgogICAgICAgICAgICAgICAgICAgIHlvdSBmaW5kIG9uZSBzaW5nbGUgYXJ0aWNsZSBpbiB0aGlzIGxvbmcgc3BlZWNoIG9mIG1pbmUsIHRvIHdoaWNoIHlvdSB0cnVzdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBtYWtlIGFueSBhbnN3ZXI/IEhvd2V2ZXIsIHdlIHdpbGwgc2F5IG5vIG1vcmUgb2Ygd2hhdCBpcyBwYXN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.44.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgdGhpcyBzaW5nbGUgZGF5LCB0aGlzIHZlcnkgZGF5IHRoYXQgbm93IGlzLCB0aGlzIHZlcnkgbW9tZW50IHdoaWxlIEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZywgZGVmZW5kIHlvdXIgY29uZHVjdCBkdXJpbmcgdGhpcyB2ZXJ5IG1vbWVudCwgaWYgeW91IGNhbi4gV2h5IGhhcyB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgYmVlbiBzdXJyb3VuZGVkIHdpdGggYSBiZWx0IG9mIGFybWVkIG1lbj8gV2h5IGFyZSB5b3VyIHNhdGVsbGl0ZXMKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5pbmcgdG8gbWUgc3dvcmQgaW4gaGFuZD8gV2h5IGFyZSBub3QgdGhlIGZvbGRpbmctZG9vcnMgb2YgdGhlIHRlbXBsZSBvZgogICAgICAgICAgICAgICAgICAgIENvbmNvcmQgb3Blbj8gV2h5IGRvIHlvdSBicmluZyBtZW4gb2YgYWxsIG5hdGlvbnMgdGhlIG1vc3QgYmFyYmFyb3VzLCBJdHlyY2FucywKICAgICAgICAgICAgICAgICAgICBhcm1lZCB3aXRoIGFycm93cywgaW50byB0aGUgZm9ydW0/IEhlIHNheXMgdGhhdCBoZSBkb2VzIHNvIGFzIGEgZ3VhcmQuIElzIGl0IG5vdAogICAgICAgICAgICAgICAgICAgIHRoZW4gYmV0dGVyIHRvIHBlcmlzaCBhIHRob3VzYW5kIHRpbWVzIHRoYW4gdG8gYmUgdW5hYmxlIHRvIGxpdmUgaW4gb25lJ3Mgb3duCiAgICAgICAgICAgICAgICAgICAgY2l0eSB3aXRob3V0IGEgZ3VhcmQgb2YgYXJtZWQgbWVuPyBCdXQgYmVsaWV2ZSBtZSwgdGhlcmUgaXMgbm8gcHJvdGVjdGlvbiBpbgogICAgICAgICAgICAgICAgICAgIHRoYXQ74oCUYSBtYW4gbXVzdCBiZSBkZWZlbmRlZCBieSB0aGUgYWZmZWN0aW9uIGFuZCBnb29kIHdpbGwgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zLCBub3QgYnkgYXJtcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExMyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHdpbGwgdGFrZSB0aGVtIGZyb20geW91LCB3aWxsIHdyZXN0IHRoZW0gZnJvbSApIG91ciBoYW5kcy4gSSB3aXNoIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG1heSBkbyBzbyB3aGlsZSB3ZSBhcmUgc3RpbGwgc2FmZS4gQnV0IGhvd2V2ZXIgeW91IHRyZWF0IHVzLCBhcyBsb25nIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIGFkb3B0IHRob3NlIGNvdW5zZWxzIGl0IGlzIGltcG9zc2libGUgZm9yIHlvdSwgYmVsaWV2ZSBtZSwgdG8gbGFzdCBsb25nLiBJbgogICAgICAgICAgICAgICAgICAgIHRydXRoLCB0aGF0IHdpZmUgb2YgeW91cnMsIHdobyBpcyBzbyBmYXIgcmVtb3ZlZCBmcm9tIGNvdmV0b3VzbmVzcywgYW5kIHdob20gSQogICAgICAgICAgICAgICAgICAgIG1lbnRpb24gd2l0aG91dCBpbnRlbmRpbmcgYW55IHNsaWdodCB0byBoZXIsIGhhcyBiZWVuIHRvbyBsb25nIG93aW5nPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBoYXMgYmVlbiBleHBsYWluZWQgYmVmb3JlIHRoYXQgRnVsdmlhIGhhZCBiZWVuIHRoZSB3aWRvdwogICAgICAgICAgICAgICAgICAgICAgICBvZiBDbG9kaXVzIGFuZCBvZiBDdXJpbywgYmVmb3JlIHNoZSBtYXJyaWVkIEFudG9uaXVzLjwvbm90ZT4gaGVyIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgcGF5bWVudCB0byB0aGUgc3RhdGUuIFRoZSBSb21hbiBwZW9wbGUgaGFzIG1lbiB0byB3aG9tIGl0IGNhbiBlbnRydXN0IHRoZSBoZWxtCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlOyBhbmQgd2hlcmV2ZXIgdGhleSBhcmUsIHRoZXJlIGlzIGFsbCB0aGUgZGVmZW5zZSBvZiB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgb3IgcmF0aGVyLCB0aGVyZSBpcyB0aGUgcmVwdWJsaWMgaXRzZWxmOyB3aGljaCBhcyB5ZXQgaGFzIG9ubHkgYXZlbmdlZCwgYnV0IGhhcwogICAgICAgICAgICAgICAgICAgIG5vdCByZWVzdGFibGlzaGVkIGl0c2VsZi4gVHJ1bHkgYW5kIHN1cmVseSBoYXMgdGhlIHJlcHVibGljIG1vc3QgaGlnaC1ib3JuCiAgICAgICAgICAgICAgICAgICAgeW91dGhzIHJlYWR5IHRvIGRlZmVuZCBpdCzigJR0aG91Z2ggdGhleSBtYXkgZm9yIGEgdGltZSBrZWVwIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQgZnJvbSBhIGRlc2lyZSBmb3IgdHJhbnF1aWxsaXR5LCBzdGlsbCB0aGV5IGNhbiBiZSByZWNhbGxlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBhdCBhbnkgdGltZS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.44.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB3aWxsIHRha2UgdGhlbSBmcm9tIHlvdSwgd2lsbCB3cmVzdCB0aGVtIGZyb20gKSBvdXIgaGFuZHMuIEkgd2lzaCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBtYXkgZG8gc28gd2hpbGUgd2UgYXJlIHN0aWxsIHNhZmUuIEJ1dCBob3dldmVyIHlvdSB0cmVhdCB1cywgYXMgbG9uZyBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBhZG9wdCB0aG9zZSBjb3Vuc2VscyBpdCBpcyBpbXBvc3NpYmxlIGZvciB5b3UsIGJlbGlldmUgbWUsIHRvIGxhc3QgbG9uZy4gSW4KICAgICAgICAgICAgICAgICAgICB0cnV0aCwgdGhhdCB3aWZlIG9mIHlvdXJzLCB3aG8gaXMgc28gZmFyIHJlbW92ZWQgZnJvbSBjb3ZldG91c25lc3MsIGFuZCB3aG9tIEkKICAgICAgICAgICAgICAgICAgICBtZW50aW9uIHdpdGhvdXQgaW50ZW5kaW5nIGFueSBzbGlnaHQgdG8gaGVyLCBoYXMgYmVlbiB0b28gbG9uZyBvd2luZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBoYXMgYmVlbiBleHBsYWluZWQgYmVmb3JlIHRoYXQgRnVsdmlhIGhhZCBiZWVuIHRoZSB3aWRvdwogICAgICAgICAgICAgICAgICAgICAgICBvZiBDbG9kaXVzIGFuZCBvZiBDdXJpbywgYmVmb3JlIHNoZSBtYXJyaWVkIEFudG9uaXVzLjwvbm90ZT4gaGVyIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgcGF5bWVudCB0byB0aGUgc3RhdGUuIFRoZSBSb21hbiBwZW9wbGUgaGFzIG1lbiB0byB3aG9tIGl0IGNhbiBlbnRydXN0IHRoZSBoZWxtCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlOyBhbmQgd2hlcmV2ZXIgdGhleSBhcmUsIHRoZXJlIGlzIGFsbCB0aGUgZGVmZW5zZSBvZiB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgb3IgcmF0aGVyLCB0aGVyZSBpcyB0aGUgcmVwdWJsaWMgaXRzZWxmOyB3aGljaCBhcyB5ZXQgaGFzIG9ubHkgYXZlbmdlZCwgYnV0IGhhcwogICAgICAgICAgICAgICAgICAgIG5vdCByZWVzdGFibGlzaGVkIGl0c2VsZi4gVHJ1bHkgYW5kIHN1cmVseSBoYXMgdGhlIHJlcHVibGljIG1vc3QgaGlnaC1ib3JuCiAgICAgICAgICAgICAgICAgICAgeW91dGhzIHJlYWR5IHRvIGRlZmVuZCBpdCzigJR0aG91Z2ggdGhleSBtYXkgZm9yIGEgdGltZSBrZWVwIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQgZnJvbSBhIGRlc2lyZSBmb3IgdHJhbnF1aWxsaXR5LCBzdGlsbCB0aGV5IGNhbiBiZSByZWNhbGxlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBhdCBhbnkgdGltZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgbmFtZSBvZiBwZWFjZSBpcyBzd2VldCwgdGhlIHRoaW5nIGl0c2VsZiBpcyBtb3N0IHNhbHV0YXJ5LiBCdXQgYmV0d2VlbiBwZWFjZQogICAgICAgICAgICAgICAgICAgIGFuZCBzbGF2ZXJ5IHRoZXJlIGlzIGEgd2lkZSBkaWZmZXJlbmNlLiBQZWFjZSBpcyBsaWJlcnR5IGluIHRyYW5xdWlsbGl0eTsKICAgICAgICAgICAgICAgICAgICBzbGF2ZXJ5IGlzIHRoZSB3b3JzdCBvZiBhbGwgZXZpbHMs4oCUdG8gYmUgcmVwZWxsZWQsIGlmIG5lZWQgYmUsIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgYnkgd2FyLCBidXQgZXZlbiBieSBkZWF0aC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExNCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlcmVycyBvZiBvdXJzIGhhdmUgdGFrZW4gdGhlbXNlbHZlcyBhd2F5IG91dCBvZiBvdXIgc2lnaHQsIHN0aWxsIHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxlZnQgYmVoaW5kIHRoZSBleGFtcGxlIG9mIHRoZWlyIGNvbmR1Y3QuIFRoZXkgaGF2ZSBkb25lIHdoYXQgbm8gb25lIGVsc2UgaGFkCiAgICAgICAgICAgICAgICAgICAgZG9uZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDIyMDA3MjQiIGtleT0idGduLDIyMDA3MjQiPkJydXR1czwvcGxhY2VOYW1lPiBwdXJzdWVkIFRhcnF1aW5pdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHdhcjsgd2hvIHdhcyBhIGtpbmcgd2hlbiBpdCB3YXMgbGF3ZnVsIGZvciBhIGtpbmcgdG8gZXhpc3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjIiIGtleT0idGduLDcwMTM5NjIiPlJvbWU8L3BsYWNlTmFtZT4uIFNwdXJpdXMgQ2Fzc2l1cywgU3B1cml1cy4gTWFlbGl1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgTWFyY3VzLjxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1hbmxpdXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2VyZSBhbGwgc2xhaW4gYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBzdXNwZWN0ZWQgb2YgYWltaW5nIGF0IHJlZ2FsIHBvd2VyLiBUaGVzZSBhcmUgdGhlIGZpcnN0IG1lbiB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGV2ZXIgdmVudHVyZWQgdG8gYXR0YWNrLCBzd29yZCBpbiBoYW5kLCBhIG1hbiB3aG8gd2FzIG5vdCBhaW1pbmcgYXQgcmVnYWwgcG93ZXIsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFjdHVhbGx5IHJlaWduaW5nLiBBbmQgdGhlaXIgYWN0aW9uIGlzIG5vdCBvbmx5IG9mIGl0c2VsZiBhIGdsb3Jpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGdvZGxpa2UgZXhwbG9pdCwgYnV0IGl0IGlzIGFsc28gb25lIHB1dCBmb3J0aCBmb3Igb3VyIGltaXRhdGlvbjsgZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgIHNpbmNlIGJ5IGl0IHRoZXkgaGF2ZSBhY3F1aXJlZCBzdWNoIGdsb3J5IGFzIGFwcGVhcnMgaGFyZGx5IHRvIGJlIGJvdW5kZWQgYnkKICAgICAgICAgICAgICAgICAgICBoZWF2ZW4gaXRzZWxmLiBGb3IgYWx0aG91Z2ggaW4gdGhlIHZlcnkgY29uc2Npb3VzbmVzcyBvZiBhIGdsb3Jpb3VzIGFjdGlvbiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGlzIGEgY2VydGFpbiByZXdhcmQsIHN0aWxsIEkgZG8gbm90IGNvbnNpZGVyIGltbW9ydGFsaXR5IG9mIGdsb3J5IGEgdGhpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCBieSBvbmUgd2hvIGlzIGhpbXNlbGYgbW9ydGFsLiA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTE1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.44.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBpZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlcnMgb2Ygb3VycyBoYXZlIHRha2VuIHRoZW1zZWx2ZXMgYXdheSBvdXQgb2Ygb3VyIHNpZ2h0LCBzdGlsbCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBsZWZ0IGJlaGluZCB0aGUgZXhhbXBsZSBvZiB0aGVpciBjb25kdWN0LiBUaGV5IGhhdmUgZG9uZSB3aGF0IG5vIG9uZSBlbHNlIGhhZAogICAgICAgICAgICAgICAgICAgIGRvbmUuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMjAwNzI0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIyMDA3MjQiPkJydXR1czwvcGxhY2VOYW1lPiBwdXJzdWVkIFRhcnF1aW5pdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHdhcjsgd2hvIHdhcyBhIGtpbmcgd2hlbiBpdCB3YXMgbGF3ZnVsIGZvciBhIGtpbmcgdG8gZXhpc3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMzk2MiI+Um9tZTwvcGxhY2VOYW1lPi4gU3B1cml1cyBDYXNzaXVzLCBTcHVyaXVzLiBNYWVsaXVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBNYXJjdXMuPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1hbmxpdXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2VyZSBhbGwgc2xhaW4gYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBzdXNwZWN0ZWQgb2YgYWltaW5nIGF0IHJlZ2FsIHBvd2VyLiBUaGVzZSBhcmUgdGhlIGZpcnN0IG1lbiB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGV2ZXIgdmVudHVyZWQgdG8gYXR0YWNrLCBzd29yZCBpbiBoYW5kLCBhIG1hbiB3aG8gd2FzIG5vdCBhaW1pbmcgYXQgcmVnYWwgcG93ZXIsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFjdHVhbGx5IHJlaWduaW5nLiBBbmQgdGhlaXIgYWN0aW9uIGlzIG5vdCBvbmx5IG9mIGl0c2VsZiBhIGdsb3Jpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGdvZGxpa2UgZXhwbG9pdCwgYnV0IGl0IGlzIGFsc28gb25lIHB1dCBmb3J0aCBmb3Igb3VyIGltaXRhdGlvbjsgZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgIHNpbmNlIGJ5IGl0IHRoZXkgaGF2ZSBhY3F1aXJlZCBzdWNoIGdsb3J5IGFzIGFwcGVhcnMgaGFyZGx5IHRvIGJlIGJvdW5kZWQgYnkKICAgICAgICAgICAgICAgICAgICBoZWF2ZW4gaXRzZWxmLiBGb3IgYWx0aG91Z2ggaW4gdGhlIHZlcnkgY29uc2Npb3VzbmVzcyBvZiBhIGdsb3Jpb3VzIGFjdGlvbiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGlzIGEgY2VydGFpbiByZXdhcmQsIHN0aWxsIEkgZG8gbm90IGNvbnNpZGVyIGltbW9ydGFsaXR5IG9mIGdsb3J5IGEgdGhpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCBieSBvbmUgd2hvIGlzIGhpbXNlbGYgbW9ydGFsLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWFubGl1czwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['2.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.45.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWNvbGxlY3QgdGhlbiwgTyBNYXJjdXMgQW50b25pdXMsIHRoYXQgZGF5IG9uIHdoaWNoIHlvdSBhYm9saXNoZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGljdGF0b3JzaGlwLiBTZXQgYmVmb3JlIHlvdSB0aGUgam95IG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMzk2MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+OyBjb21wYXJlIGl0IHdpdGggdGhpcyBpbmZhbW91cyBtYXJrZXQKICAgICAgICAgICAgICAgICAgICBoZWxkIGJ5IHlvdSBhbmQgYnkgeW91ciBmcmllbmRzOyBhbmQgdGhlbiB5b3Ugd2lsbCB1bmRlcnN0YW5kIGhvdyBncmVhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlIGJldHdlZW4gcHJhaXNlIGFuZCBwcm9maXQuIEJ1dCBpbiB0cnV0aCwganVzdCBhcyBzb21lIHBlb3BsZSwgdGhyb3VnaAogICAgICAgICAgICAgICAgICAgIHNvbWUgZGlzZWFzZSB3aGljaCBoYXMgYmx1bnRlZCB0aGUgc2Vuc2VzLCBoYXZlIG5vIGNvbmNlcHRpb24gb2YgdGhlIG5pY2VuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgZm9vZCwgc28gbWVuIHdobyBhcmUgbHVzdGZ1bCwgYXZhcmljaW91cywgYW5kIGNyaW1pbmFsLCBoYXZlIG5vIHRhc3RlIGZvciB0cnVlCiAgICAgICAgICAgICAgICAgICAgZ2xvcnkuIEJ1dCBpZiBwcmFpc2UgY2FuIG5vdCBhbGx1cmUgeW91IHRvIGFjdCByaWdodGx5LCBzdGlsbCBjYW4gbm90IGV2ZW4gZmVhcgogICAgICAgICAgICAgICAgICAgIHR1cm4geW91IGF3YXkgZnJvbSB0aGUgbW9zdCBzaGFtZWZ1bCBhY3Rpb25zPyBZb3UgYXJlIG5vdCBhZnJhaWQgb2YgdGhlIGNvdXJ0cwogICAgICAgICAgICAgICAgICAgIG9mIGp1c3RpY2UuIElmIGl0IGlzIGJlY2F1c2UgeW91IGFyZSBpbm5vY2VudCwgSSBwcmFpc2UgeW91OyBpZiBiZWNhdXNlIHlvdQogICAgICAgICAgICAgICAgICAgIHRydXN0IGluIHlvdXIgcG93ZXIgb2Ygb3ZlcmJlYXJpbmcgdGhlbSBieSB2aW9sZW5jZSwgYXJlIHlvdSBpZ25vcmFudCBvZiB3aGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW4gaGFzIHRvIGZlYXIsIHdobyBvbiBzdWNoIGFuIGFjY291bnQgYXMgdGhhdCBkb2VzIG5vdCBmZWFyIHRoZSBjb3VydHMgb2YKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTE2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMzk2MiI+Um9tZTwvcGxhY2VOYW1lPjsgY29tcGFyZSBpdCB3aXRoIHRoaXMgaW5mYW1vdXMgbWFya2V0CiAgICAgICAgICAgICAgICAgICAgaGVsZCBieSB5b3UgYW5kIGJ5IHlvdXIgZnJpZW5kczsgYW5kIHRoZW4geW91IHdpbGwgdW5kZXJzdGFuZCBob3cgZ3JlYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZSBiZXR3ZWVuIHByYWlzZSBhbmQgcHJvZml0LiBCdXQgaW4gdHJ1dGgsIGp1c3QgYXMgc29tZSBwZW9wbGUsIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICBzb21lIGRpc2Vhc2Ugd2hpY2ggaGFzIGJsdW50ZWQgdGhlIHNlbnNlcywgaGF2ZSBubyBjb25jZXB0aW9uIG9mIHRoZSBuaWNlbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGZvb2QsIHNvIG1lbiB3aG8gYXJlIGx1c3RmdWwsIGF2YXJpY2lvdXMsIGFuZCBjcmltaW5hbCwgaGF2ZSBubyB0YXN0ZSBmb3IgdHJ1ZQogICAgICAgICAgICAgICAgICAgIGdsb3J5LiBCdXQgaWYgcHJhaXNlIGNhbiBub3QgYWxsdXJlIHlvdSB0byBhY3QgcmlnaHRseSwgc3RpbGwgY2FuIG5vdCBldmVuIGZlYXIKICAgICAgICAgICAgICAgICAgICB0dXJuIHlvdSBhd2F5IGZyb20gdGhlIG1vc3Qgc2hhbWVmdWwgYWN0aW9ucz8gWW91IGFyZSBub3QgYWZyYWlkIG9mIHRoZSBjb3VydHMKICAgICAgICAgICAgICAgICAgICBvZiBqdXN0aWNlLiBJZiBpdCBpcyBiZWNhdXNlIHlvdSBhcmUgaW5ub2NlbnQsIEkgcHJhaXNlIHlvdTsgaWYgYmVjYXVzZSB5b3UKICAgICAgICAgICAgICAgICAgICB0cnVzdCBpbiB5b3VyIHBvd2VyIG9mIG92ZXJiZWFyaW5nIHRoZW0gYnkgdmlvbGVuY2UsIGFyZSB5b3UgaWdub3JhbnQgb2Ygd2hhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgbWFuIGhhcyB0byBmZWFyLCB3aG8gb24gc3VjaCBhbiBhY2NvdW50IGFzIHRoYXQgZG9lcyBub3QgZmVhciB0aGUgY291cnRzIG9mCiAgICAgICAgICAgICAgICAgICAganVzdGljZT8gPC90cmFuc2xhdGlvbj4="
translation['2.45.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpZiB5b3UgYXJlIG5vdCBhZnJhaWQgb2YgYnJhdmUgbWVuIGFuZCBpbGx1c3RyaW91cyBjaXRpemVucywgYmVjYXVzZSB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBmcm9tIGF0dGFja2luZyB5b3UgYnkgeW91ciBhcm1lZCByZXRpbnVlLCBzdGlsbCwgYmVsaWV2ZSBtZSwgeW91ciBvd24KICAgICAgICAgICAgICAgICAgICBmZWxsb3dzIHdpbGwgbm90IGxvbmcgZW5kdXJlIHlvdS4gQW5kIHdoYXQgYSBsaWZlIGlzIGl0LCBkYXkgYW5kIG5pZ2h0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZmVhcmluZyBkYW5nZXIgZnJvbSBvbmUncyBvd24gcGVvcGxlISBVbmxlc3MsIGluZGVlZCwgeW91IGhhdmUgbWVuIHdobyBhcmUgYm91bmQKICAgICAgICAgICAgICAgICAgICB0byB5b3UgYnkgZ3JlYXRlciBraW5kbmVzc2VzIHRoYW4gc29tZSBvZiB0aG9zZSBtZW4gYnkgd2hvbSBoZSB3YXMgc2xhaW4gd2VyZQogICAgICAgICAgICAgICAgICAgIGJvdW5kIHRvIENhZXNhcjsgb3IgdW5sZXNzIHRoZXJlIGFyZSBwb2ludHMgaW4gd2hpY2ggeW91IGNhbiBiZSBjb21wYXJlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoYXQgbWFuIHdlcmUgY29tYmluZWQgZ2VuaXVzLCBtZXRob2QsIG1lbW9yeSwgbGl0ZXJhdHVyZSwgcHJ1ZGVuY2UsCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0aW9uLCBhbmQgaW5kdXN0cnkuIEhlIGhhZCBwZXJmb3JtZWQgZXhwbG9pdHMgaW4gd2FyIHdoaWNoLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0b3VzIGZvciB0aGUgcmVwdWJsaWMsIHdlcmUgbmV2ZXJ0aGVsZXNzIG1pZ2h0eSBkZWVkcy4gSGF2aW5nIGZvciBtYW55CiAgICAgICAgICAgICAgICAgICAgeWVhcnMgYWltZWQgYXQgYmVpbmcgYSBraW5nLCBoZSBoYWQgd2l0aCBncmVhdCBsYWJvciwgYW5kIG11Y2ggcGVyc29uYWwgZGFuZ2VyLAogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2hlZCB3aGF0IGhlIGludGVuZGVkLiBIZSBoYWQgY29uY2lsaWF0ZWQgdGhlIGlnbm9yYW50IG11bHRpdHVkZSBieQogICAgICAgICAgICAgICAgICAgIHByZXNlbnRzLCBieSBtb251bWVudHMsIGJ5IGxhcmdlc3NlcyBvZiBmb29kLCBhbmQgYnkgYmFucXVldHM7IGhlIGhhZCBib3VuZCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gcGFydHkgdG8gaGltIGJ5IHJld2FyZHMsIGhpcyBhZHZlcnNhcmllcyBieSB0aGUgYXBwZWFyYW5jZXMgb2YgY2xlbWVuY3kuIFdoeQogICAgICAgICAgICAgICAgICAgIG5lZWQgSSBzYXkgbXVjaCBvbiBzdWNoIGEgc3ViamVjdD8gSGUgaGFkIGFscmVhZHkgYnJvdWdodCBhIGZyZWUgY2l0eSwgcGFydGx5IGJ5CiAgICAgICAgICAgICAgICAgICAgZmVhciwgcGFydGx5IGJ5IHBhdGllbmNlLCBpbnRvIGEgaGFiaXQgb2Ygc2xhdmVyeS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.46.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRoIGhpbSBJIGNhbiwgaW5kZWVkLCBjb21wYXJlIHlvdSBhcyB0byB5b3VyIGRlc2lyZSB0byByZWlnbjsgYnV0IGluIGFsbCBvdGhlcgogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RzIHlvdSBhcmUgaW4gbm8gZGVncmVlIHRvIGJlIGNvbXBhcmVkIHRvIGhpbS4gQnV0IGZyb20gdGhlIG1hbnkgZXZpbHMKICAgICAgICAgICAgICAgICAgICB3aGljaCBieSBoaW0gaGF2ZSBiZWVuIGJ1cm5lZCBpbnRvIHRoZSByZXB1YmxpYywgdGhlcmUgaXMgc3RpbGwgdGhpcyBnb29kLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZSBoYXMgbm93IGxlYXJuZWQgaG93IG11Y2ggdG8gYmVsaWV2ZSBldmVyeSBvbmUsIHRvIHdob20gdG8gdHJ1c3QKICAgICAgICAgICAgICAgICAgICBpdHNlbGYsIGFuZCBhZ2FpbnN0IHdob20gdG8gZ3VhcmQuIERvIHlvdSBuZXZlciB0aGluayBvbiB0aGVzZSB0aGluZ3M/IEFuZCBkbwogICAgICAgICAgICAgICAgICAgIHlvdSBub3QgdW5kZXJzdGFuZCB0aGF0IGl0IGlzIGVub3VnaCBmb3IgYnJhdmUgbWVuIHRvIGhhdmUgbGVhcm5lZCBob3cgbm9ibGUgYQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGl0IGlzIGFzIHRvIHRoZSBhY3QsIGhvdyBncmF0ZWZ1bCBpdCBpcyBhcyB0byB0aGUgYmVuZWZpdCBkb25lLCBob3cKICAgICAgICAgICAgICAgICAgICBnbG9yaW91cyBhcyB0byB0aGUgZmFtZSBhY3F1aXJlZCwgdG8gc2xheSBhIHR5cmFudD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBtZW4gY291bGQgbm90IGJlYXIgaGltLCBkbyB5b3UgdGhpbmsgdGhleSB3aWxsIGJlYXIKICAgICAgICAgICAgICAgICAgICB5b3U/IEJlbGlldmUgbWUsIHRoZSB0aW1lIHdpbGwgY29tZSB3aGVuIG1lbiB3aWxsIHJhY2Ugd2l0aCBvbmUgYW5vdGhlciB0byBkbwogICAgICAgICAgICAgICAgICAgIHRoaXMgZGVlZCwgYW5kIHdoZW4gbm8gb25lIHdpbGwgd2FpdCBmb3IgdGhlIHRhcmR5IGFycml2YWwgb2YgYW4gb3Bwb3J0dW5pdHkuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.46.118'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBoYXZlIGJlZW4gYXNzZW1ibGVkIGF0IGxlbmd0aCwgTyBjb25zY3JpcHQgZmF0aGVycywgYWx0b2dldGhlciBsYXRlciB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2l0aWVzIG9mIHRoZSByZXB1YmxpYyByZXF1aXJlZCwgYnV0IHN0aWxsIHdlIGFyZSBhc3NlbWJsZWQsIGEgbWVhc3VyZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIEkgaW5kZWVkIGhhdmUgYmVlbiBldmVyeSBkYXkgZGVtYW5kaW5nLCBpbmFzbXVjaCBhcyBJIHNhdyB0aGF0IGEgbmVmYXJpb3VzCiAgICAgICAgICAgICAgICAgICAgd2FyIGFnYWluc3Qgb3VyIGFsdGFycyBhbmQgb3VyIGhlYXJ0aHMsIGFnYWluc3Qgb3VyIGxpdmVzIGFuZCBvdXIgZm9ydHVuZXMsCiAgICAgICAgICAgICAgICAgICAgd2FycywgSSB3aWxsIG5vdCBzYXkgYmVpbmcgcHJlcGFyZWQgYnV0IGJlaW5nIGFjdHVhbGx5IHdhZ2VkIGJ5IGEgcHJvZmxpZ2F0ZSBhbmQKICAgICAgICAgICAgICAgICAgICBkZXNwZXJhdGUgbWFuLiBQZW9wbGUgYXJlIHdhaXRpbmcgZm9yIHRoZSBmaXJzdCBvZiBKYW51YXJ5LiBCdXQgQW50b25pdXMgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgd2FpdGluZyBmb3IgdGhhdCBkYXksIHdobyBpcyBub3cgYXR0ZW1wdGluZyB3aXRoIGFuIGFybXkgdG8gaW52YWRlIHRoZSBwcm92aW5jZQogICAgICAgICAgICAgICAgICAgIG9mIERlY2ltdXMgQnJ1dHVzIGEgbW9zdCBpbGx1c3RyaW91cyBhbmQgZXhjZWxsZW50IG1hbi4gQW5kIHdoZW4gaGUgaGFzIHByb2N1cmVkCiAgICAgICAgICAgICAgICAgICAgcmVpbmZvcmNlbWVudHMgYW5kIGVxdWlwbWVudHMgdGhlcmUsIGhlIHRocmVhdGVucyB0aGF0IGhlIHdpbGwgY29tZSB0byB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgaXMgdGhlIHVzZSB0aGVuIG9mIHdhaXRpbmcsIG9yIG9mCiAgICAgICAgICAgICAgICAgICAgZXZlbiBhIGRlbGF5IGZvciB0aGUgdmVyeSBzaG9ydGVzdCB0aW1lPyBGb3IgYWx0aG91Z2ggdGhlIGZpcnN0IG9mIEphbnVhcnkgaXMgYXQKICAgICAgICAgICAgICAgICAgICBoYW5kLCBzdGlsbCBhIHNob3J0IHRpbWUgaXMgYSBsb25nIG9uZSBmb3IgcGVvcGxlIHdobyBhcmUgbm90IHByZXBhcmVkLiBGb3IgYQogICAgICAgICAgICAgICAgICAgIGRheSwgb3IgSSBzaG91bGQgcmF0aGVyIHNheSBhbiBob3VyLCBvZnRlbiBicmluZ3MgZ3JlYXQgZGlzYXN0ZXJzLCBpZiBubwogICAgICAgICAgICAgICAgICAgIHByZWNhdXRpb25zIGFyZSB0YWtlbi4gQW5kIGl0IGlzIG5vdCB1c3VhbCB0byB3YWl0IGZvciBhIGZpeGVkIGRheSBmb3IgaG9sZGluZyBhCiAgICAgICAgICAgICAgICAgICAgY291bmNpbCwgYXMgaXQgaXMgZm9yIGNlbGVicmF0aW5nIGEgZmVzdGl2YWwuIEJ1dCBpZiB0aGUgZmlyc3Qgb2YgSmFudWFyeSBoYWQKICAgICAgICAgICAgICAgICAgICBmYWxsZW4gb24gdGhlIGRheSB3aGVuIEFudG9uaXVzIGZpcnN0IGZsZWQgZnJvbSB0aGUgY2l0eSwgb3IgaWYgcGVvcGxlIGhhZCBub3QKICAgICAgICAgICAgICAgICAgICB3YWl0ZWQgZm9yIGl0LCB3ZSBzaG91bGQgYnkgdGhpcyB0aW1lIGhhdmUgbm8gd2FyIGF0IGFsbCwgRm9yIHdlIHNob3VsZCBlYXNpbHkKICAgICAgICAgICAgICAgICAgICBoYXZlIGNydXNoZWQgdGhlIGF1ZGFjaXR5IG9mIHRoYXQgZnJhbnRpYyBtYW4gYnkgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSB1bmFuaW1pdHkgb2YgdGhlIFJvbWFuIHBlb3BsZS4gQW5kIG5vdywgaW5kZWVkLCBJIGZlZWwgY29uZmlkZW50IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VscyBlbGVjdCB3aWxsIGRvIHNvLCBhcyBzb29uIGFzIHRoZXkgZW50ZXIgb24gdGhlaXIgbWFnaXN0cmFjeS4gRm9yIHRoZXkKICAgICAgICAgICAgICAgICAgICBhcmUgbWVuIG9mIHRoZSBoaWdoZXN0IGNvdXJhZ2UsIG9mIHRoZSBtb3N0IGNvbnN1bW1hdGUgd2lzZG9tLCBhbmQgdGhleSB3aWxsIGFjdAogICAgICAgICAgICAgICAgICAgIGluIHBlcmZlY3QgaGFybW9ueSB3aXRoIGVhY2ggb3RoZXIuIEJ1dCBteSBleGhvcnRhdGlvbnMgdG8gcmFwaWQgYW5kIGluc3RhbnQKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gYXJlIHByb21wdGVkIGJ5IGEgZGVzaXJlIG5vdCBtZXJlbHkgZm9yIHZpY3RvcnksIGJ1dCBmb3Igc3BlZWR5IHZpY3RvcnkuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGlzIHRoZSB1c2UgdGhlbiBvZiB3YWl0aW5nLCBvciBvZgogICAgICAgICAgICAgICAgICAgIGV2ZW4gYSBkZWxheSBmb3IgdGhlIHZlcnkgc2hvcnRlc3QgdGltZT8gRm9yIGFsdGhvdWdoIHRoZSBmaXJzdCBvZiBKYW51YXJ5IGlzIGF0CiAgICAgICAgICAgICAgICAgICAgaGFuZCwgc3RpbGwgYSBzaG9ydCB0aW1lIGlzIGEgbG9uZyBvbmUgZm9yIHBlb3BsZSB3aG8gYXJlIG5vdCBwcmVwYXJlZC4gRm9yIGEKICAgICAgICAgICAgICAgICAgICBkYXksIG9yIEkgc2hvdWxkIHJhdGhlciBzYXkgYW4gaG91ciwgb2Z0ZW4gYnJpbmdzIGdyZWF0IGRpc2FzdGVycywgaWYgbm8KICAgICAgICAgICAgICAgICAgICBwcmVjYXV0aW9ucyBhcmUgdGFrZW4uIEFuZCBpdCBpcyBub3QgdXN1YWwgdG8gd2FpdCBmb3IgYSBmaXhlZCBkYXkgZm9yIGhvbGRpbmcgYQogICAgICAgICAgICAgICAgICAgIGNvdW5jaWwsIGFzIGl0IGlzIGZvciBjZWxlYnJhdGluZyBhIGZlc3RpdmFsLiBCdXQgaWYgdGhlIGZpcnN0IG9mIEphbnVhcnkgaGFkCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuIG9uIHRoZSBkYXkgd2hlbiBBbnRvbml1cyBmaXJzdCBmbGVkIGZyb20gdGhlIGNpdHksIG9yIGlmIHBlb3BsZSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgd2FpdGVkIGZvciBpdCwgd2Ugc2hvdWxkIGJ5IHRoaXMgdGltZSBoYXZlIG5vIHdhciBhdCBhbGwsIEZvciB3ZSBzaG91bGQgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBjcnVzaGVkIHRoZSBhdWRhY2l0eSBvZiB0aGF0IGZyYW50aWMgbWFuIGJ5IHRoZSBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgdW5hbmltaXR5IG9mIHRoZSBSb21hbiBwZW9wbGUuIEFuZCBub3csIGluZGVlZCwgSSBmZWVsIGNvbmZpZGVudCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN1bHMgZWxlY3Qgd2lsbCBkbyBzbywgYXMgc29vbiBhcyB0aGV5IGVudGVyIG9uIHRoZWlyIG1hZ2lzdHJhY3kuIEZvciB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIG1lbiBvZiB0aGUgaGlnaGVzdCBjb3VyYWdlLCBvZiB0aGUgbW9zdCBjb25zdW1tYXRlIHdpc2RvbSwgYW5kIHRoZXkgd2lsbCBhY3QKICAgICAgICAgICAgICAgICAgICBpbiBwZXJmZWN0IGhhcm1vbnkgd2l0aCBlYWNoIG90aGVyLiBCdXQgbXkgZXhob3J0YXRpb25zIHRvIHJhcGlkIGFuZCBpbnN0YW50CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGFyZSBwcm9tcHRlZCBieSBhIGRlc2lyZSBub3QgbWVyZWx5IGZvciB2aWN0b3J5LCBidXQgZm9yIHNwZWVkeSB2aWN0b3J5LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaG93IGxvbmcgYXJlIHdlIHRvIHRydXN0IHRvIHRoZSBwcnVkZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIGFuIGluZGl2aWR1YWwgdG8gcmVwZWwgc28gaW1wb3J0YW50LCBzbyBjcnVlbCwgYW5kIHNvIG5lZmFyaW91cyBhIHdhcj8gV2h5IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBwdWJsaWMgYXV0aG9yaXR5IHRocm93biBpbnRvIHRoZSBzY2FsZSBhcyBxdWlja2x5IGFzIHBvc3NpYmxlPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaG93IGxvbmcgYXJlIHdlIHRvIHRydXN0IHRvIHRoZSBwcnVkZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIGFuIGluZGl2aWR1YWwgdG8gcmVwZWwgc28gaW1wb3J0YW50LCBzbyBjcnVlbCwgYW5kIHNvIG5lZmFyaW91cyBhIHdhcj8gV2h5IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBwdWJsaWMgYXV0aG9yaXR5IHRocm93biBpbnRvIHRoZSBzY2FsZSBhcyBxdWlja2x5IGFzIHBvc3NpYmxlPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FpdXMgQ2Flc2FyLCBhIHlvdW5nIG1hbiwgb3IsIEkgc2hvdWxkIHJhdGhlciBzYXksIGFsbW9zdCBhIGJveSwgZW1idWVkIHdpdGggYW4KICAgICAgICAgICAgICAgICAgICBpbmNyZWRpYmxlIGFuZCBnb2RsaWtlIGRlZ3JlZSBvZiB3aXNkb20gYW5kIHZhbG9yLCBhdCB0aGUgdGltZSB3aGVuIHRoZSBmcmVuenkKICAgICAgICAgICAgICAgICAgICBvZiBBbnRvbml1cyB3YXMgYXQgaXRzIGhlaWdodCwgYW5kIHdoZW4gaGlzIGNydWVsIGFuZCBtaXNjaGlldm91cyByZXR1cm4gZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4gd2FzIGFuIG9iamVjdCBvZgogICAgICAgICAgICAgICAgICAgIGFwcHJlaGVuc2lvbiB0byBhbGwsIHdoaWxlIHdlIG5laXRoZXIgZGVzaXJlZCBoaW0gdG8gZG8gc28sIG5vciB0aG91Z2h0IG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIG1lYXN1cmUsIG5vciB2ZW50dXJlZCBldmVuIHRvIHdpc2ggaXQgKGJlY2F1c2UgaXQgZGlkIG5vdCBzZWVtIHByYWN0aWNhYmxlKSwKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgYSBtb3N0IHRydXN0d29ydGh5IGFybXkgZnJvbSB0aGUgaW52aW5jaWJsZSBib2R5IG9mIHZldGVyYW4gc29sZGllcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBzcGVudCBoaXMgb3duIHBhdHJpbW9ueSBpbiBkb2luZyBzby4gQWx0aG91Z2ggSSBoYXZlIG5vdCB1c2VkIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gd2hpY2ggSSBvdWdodCzigJRmb3IgaGUgaGFzIG5vdCBzcGVudCBpdCzigJRoZSBoYXMKICAgICAgICAgICAgICAgICAgICBpbnZlc3RlZCBpdCBpbiB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4gd2FzIGFuIG9iamVjdCBvZgogICAgICAgICAgICAgICAgICAgIGFwcHJlaGVuc2lvbiB0byBhbGwsIHdoaWxlIHdlIG5laXRoZXIgZGVzaXJlZCBoaW0gdG8gZG8gc28sIG5vciB0aG91Z2h0IG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIG1lYXN1cmUsIG5vciB2ZW50dXJlZCBldmVuIHRvIHdpc2ggaXQgKGJlY2F1c2UgaXQgZGlkIG5vdCBzZWVtIHByYWN0aWNhYmxlKSwKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgYSBtb3N0IHRydXN0d29ydGh5IGFybXkgZnJvbSB0aGUgaW52aW5jaWJsZSBib2R5IG9mIHZldGVyYW4gc29sZGllcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBzcGVudCBoaXMgb3duIHBhdHJpbW9ueSBpbiBkb2luZyBzby4gQWx0aG91Z2ggSSBoYXZlIG5vdCB1c2VkIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gd2hpY2ggSSBvdWdodCzigJRmb3IgaGUgaGFzIG5vdCBzcGVudCBpdCzigJRoZSBoYXMKICAgICAgICAgICAgICAgICAgICBpbnZlc3RlZCBpdCBpbiB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['3.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgYWx0aG91Z2ggaXQgaXMgbm90IHBvc3NpYmxlIHRvIHJlcXVpdGUgaGltIHdpdGggYWxsIHRoZSB0aGFua3MgdG8gd2hpY2ggaGUgaXMKICAgICAgICAgICAgICAgICAgICBlbnRpdGxlZCwgc3RpbGwgd2Ugb3VnaHQgdG8gZmVlbCBhbGwgdGhlIGdyYXRpdHVkZSB0b3dhcmQgaGltIHdoaWNoIG91ciBtaW5kcwogICAgICAgICAgICAgICAgICAgIGFyZSBjYXBhYmxlIG9mIGNvbmNlaXZpbmcuIEZvciB3aG8gaXMgc28gaWdub3JhbnQgb2YgcHVibGljIGFmZmFpcnMsIHNvIGVudGlyZWx5CiAgICAgICAgICAgICAgICAgICAgaW5kaWZmZXJlbnQgdG8gYWxsIHRob3VnaHRzIG9mIHRoZSByZXB1YmxpYywgYXMgbm90IHRvIHNlZSB0aGF0LCBpZiBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBjb3VsZCBoYXZlIGNvbWUgd2l0aCB0aG9zZSBmb3JjZXMgd2hpY2ggaGUgbWFkZSBzdXJlIHRoYXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSwgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4gdG8gY29tZSwKICAgICAgICAgICAgICAgICAgICBhcyBoZSB0aHJlYXRlbmVkLCB0aGVyZSB3b3VsZCBoYXZlIGJlZW4gbm8gZGVzY3JpcHRpb24gb2YgY3J1ZWx0eSB3aGljaCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBoYXZlIHByYWN0aWNlZD8gQSBtYW4gd2hvIGluIHRoZSBob3VzZSBvZiBoaXMgZW50ZXJ0YWluZXIgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IG9yZGVyZWQgc28gbWFueSBtb3N0IGdhbGxhbnQKICAgICAgICAgICAgICAgICAgICBtZW4gYW5kIHZpcnR1b3VzIGNpdGl6ZW5zIHRvIGJlIG11cmRlcmVkLCBhbmQgd2hvc2Ugd2lmZSdzIGZhY2Ugd2FzIG5vdG9yaW91c2x5CiAgICAgICAgICAgICAgICAgICAgYmVzcHJpbmtsZWQgd2l0aCB0aGUgYmxvb2Qgb2YgbWVuIGR5aW5nIGF0IGhpcyBhbmQgaGVyIGZlZXQuIFdobyBpcyB0aGVyZSBvZiB1cywKICAgICAgICAgICAgICAgICAgICBvciB3aGF0IGdvb2QgbWFuIGlzIHRoZXJlIGF0IGFsbCwgd2hvbSBhIG1hbiBzdGFpbmVkIHdpdGggdGhpcyBiYXJiYXJpdHkgd291bGQKICAgICAgICAgICAgICAgICAgICBldmVyIGhhdmUgc3BhcmVkOyBlc3BlY2lhbGx5IGFzIGhlIHdhcyBjb21pbmcgaGl0aGVyIG11Y2ggbW9yZSBhbmdyeSB3aXRoIGFsbAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIG1lbiB0aGFuIGhlIGhhZCBiZWVuIHdpdGggdGhvc2Ugd2hvbSBoZSBoYWQgbWFzc2FjcmVkIHRoZXJlPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGZyb20gdGhpcyBjYWxhbWl0eSBDYWVzYXIgaGFzIGRlbGl2ZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBieSBoaXMgb3duIGluZGl2aWR1YWwgcHJ1ZGVuY2UgKGFuZCwgaW5kZWVkLCB0aGVyZSB3ZXJlIG5vIG90aGVyIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgYnkgd2hpY2ggaXQgY291bGQgaGF2ZSBiZWVuIGRvbmUpLiBBbmQgaWYgaGUgaGFkIG5vdCBiZWVuIGJvcm4gaW4gdGhpcyByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIHdlIHNob3VsZCwgb3dpbmcgdG8gdGhlIHdpY2tlZG5lc3Mgb2YgQW50b25pdXMsIG5vdyBoYXZlIG5vIHJlcHVibGljIGF0IGFsbC4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IHRvIGNvbWUsCiAgICAgICAgICAgICAgICAgICAgYXMgaGUgdGhyZWF0ZW5lZCwgdGhlcmUgd291bGQgaGF2ZSBiZWVuIG5vIGRlc2NyaXB0aW9uIG9mIGNydWVsdHkgd2hpY2ggaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBub3QgaGF2ZSBwcmFjdGljZWQ/IEEgbWFuIHdobyBpbiB0aGUgaG91c2Ugb2YgaGlzIGVudGVydGFpbmVyIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiBvcmRlcmVkIHNvIG1hbnkgbW9zdCBnYWxsYW50CiAgICAgICAgICAgICAgICAgICAgbWVuIGFuZCB2aXJ0dW91cyBjaXRpemVucyB0byBiZSBtdXJkZXJlZCwgYW5kIHdob3NlIHdpZmUncyBmYWNlIHdhcyBub3RvcmlvdXNseQogICAgICAgICAgICAgICAgICAgIGJlc3ByaW5rbGVkIHdpdGggdGhlIGJsb29kIG9mIG1lbiBkeWluZyBhdCBoaXMgYW5kIGhlciBmZWV0LiBXaG8gaXMgdGhlcmUgb2YgdXMsCiAgICAgICAgICAgICAgICAgICAgb3Igd2hhdCBnb29kIG1hbiBpcyB0aGVyZSBhdCBhbGwsIHdob20gYSBtYW4gc3RhaW5lZCB3aXRoIHRoaXMgYmFyYmFyaXR5IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgZXZlciBoYXZlIHNwYXJlZDsgZXNwZWNpYWxseSBhcyBoZSB3YXMgY29taW5nIGhpdGhlciBtdWNoIG1vcmUgYW5ncnkgd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBtZW4gdGhhbiBoZSBoYWQgYmVlbiB3aXRoIHRob3NlIHdob20gaGUgaGFkIG1hc3NhY3JlZCB0aGVyZT8gPC90cmFuc2xhdGlvbj4="
translation['3.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgZnJvbSB0aGlzIGNhbGFtaXR5IENhZXNhciBoYXMgZGVsaXZlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIGJ5IGhpcyBvd24gaW5kaXZpZHVhbCBwcnVkZW5jZSAoYW5kLCBpbmRlZWQsIHRoZXJlIHdlcmUgbm8gb3RoZXIgbWVhbnMKICAgICAgICAgICAgICAgICAgICBieSB3aGljaCBpdCBjb3VsZCBoYXZlIGJlZW4gZG9uZSkuIEFuZCBpZiBoZSBoYWQgbm90IGJlZW4gYm9ybiBpbiB0aGlzIHJlcHVibGljCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkLCBvd2luZyB0byB0aGUgd2lja2VkbmVzcyBvZiBBbnRvbml1cywgbm93IGhhdmUgbm8gcmVwdWJsaWMgYXQgYWxsLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGlzIGlzIHdoYXQgSSBiZWxpZXZlLCB0aGlzIGlzIG15IGRlbGliZXJhdGUgb3BpbmlvbiwgdGhhdCBpZiB0aGF0IG9uZSB5b3VuZwogICAgICAgICAgICAgICAgICAgIG1hbiBoYWQgbm90IGNoZWNrZWQgdGhlIHZpb2xlbmNlIGFuZCBpbmh1bWFuIHByb2plY3RzIG9mIHRoYXQgZnJhbnRpYyBtYW4sIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIHdvdWxkIGhhdmUgYmVlbiB1dHRlcmx5IGRlc3Ryb3llZC4gQW5kIHRvIGhpbSB3ZSBtdXN0LCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMgKGZvciB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lLCBtZXQgaW4gc3VjaCBhIGNvbmRpdGlvbiwgdGhhdCwgb3dpbmcgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgZ29vZCBzZXJ2aWNlLCB3ZSBhcmUgYXQgbGliZXJ0eSB0byBzYXkgZnJlZWx5IHdoYXQgd2UgdGhpbmsgYW5kIGZlZWwpLCB3ZSBtdXN0LAogICAgICAgICAgICAgICAgICAgIEkgc2F5LCB0aGlzIGRheSBnaXZlIGF1dGhvcml0eSwgc28gdGhhdCBoZSBtYXkgYmUgYWJsZSB0byBkZWZlbmQgdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIG5vdCBiZWNhdXNlIHRoYXQgZGVmZW5zZSBoYXMgYmVlbiB2b2x1bnRhcmlseSB1bmRlcnRha2VuIGJ5IGhpbSwgYnV0IGFsc28KICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IGhhcyBiZWVuIGVudHJ1c3RlZCB0byBoaW0gYnkgdXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIChzaW5jZSBub3cgYWZ0ZXIgYSBsb25nIGludGVydmFsIHdlIGFyZSBhbGxvd2VkIHRvIHNwZWFrIGNvbmNlcm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMpIGlzIGl0IHBvc3NpYmxlIGZvciB1cyB0byBiZSBzaWxlbnQgYWJvdXQgdGhlIE1hcnRpYWwgbGVnaW9uLiBGb3Igd2hhdAogICAgICAgICAgICAgICAgICAgIHNpbmdsZSBtYW4gaGFzIGV2ZXIgYmVlbiBicmF2ZXIsIHdoYXQgc2luZ2xlIG1hbiBoYXMgZXZlciBiZWVuIG1vcmUgZGV2b3RlZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYyB0aGFuIHRoZSB3aG9sZSBvZiB0aGUgTWFydGlhbCBsZWdpb24/IHdoaWNoLCBhcyBzb29uIGFzIGl0IGhhZAogICAgICAgICAgICAgICAgICAgIGRlY2lkZWQgdGhhdCBNYXJjdXMgQW50b25pdXMgd2FzIGFuIGVuZW15IG9mIHRoZSBSb21hbiBwZW9wbGUsIHJlZnVzZWQgdG8gYmUgYQogICAgICAgICAgICAgICAgICAgIGNvbXBhbmlvbiBvZiBoaXMgaW5zYW5pdHk7IGRlc2VydGVkIGhpbSB0aG91Z2ggY29uc3VsOyB3aGljaCwgaW4gdHJ1dGgsIGl0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgZG9uZSBpZiBpdCBoYWQgY29uc2lkZXJlZCBoaW0gYXMgY29uc3VsLCB3aG8sIGFzIGl0IHNhdywgd2FzIGFpbWluZyBhdAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgYW5kIHByZXBhcmluZyBub3RoaW5nIGJ1dCB0aGUgc2xhdWdodGVyIG9mIHRoZSBjaXRpemVucywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uIG9mIHRoZSBzdGF0ZS4gQW5kIHRoYXQgbGVnaW9uIGhhcyBlbmNhbXBlZCBhdCBBbGJhLiBXaGF0IGNpdHkgY291bGQKICAgICAgICAgICAgICAgICAgICBpdCBoYXZlIHNlbGVjdGVkIGVpdGhlciBtb3JlIHN1aXRhYmxlIGZvciBlbmFibGluZyBpdCB0byBhY3QsIG9yIG1vcmUgZmFpdGhmdWwsCiAgICAgICAgICAgICAgICAgICAgb3IgZnVsbCBvZiBtb3JlIGdhbGxhbnQgbWVuLCBvciBvZiBjaXRpemVucyBtb3JlIGRldm90ZWQgdG8gdGhlIHJlcHVibGljPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgZm91cnRoIGxlZ2lvbiwgaW1pdGF0aW5nIHRoZSB2aXJ0dWUgb2YgdGhpcyBsZWdpb24sIHVuZGVyIHRoZSBsZWFkZXJzaGlwIG9mCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIEVnbmF0dWxlaXVzLCB0aGUgcXVhZXN0b3IsIGEgbW9zdCB2aXJ0dW91cyBhbmQgaW50cmVwaWQgY2l0aXplbiwgaGFzIGFsc28KICAgICAgICAgICAgICAgICAgICBhY2tub3dsZWRnZWQgdGhlIGF1dGhvcml0eSBhbmQgam9pbmVkIHRoZSBhcm15IG9mIENhaXVzIENhZXNhci4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSwgdGhlcmVmb3JlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBtdXN0IHRha2UgY2FyZSB0aGF0IHRob3NlIHRoaW5ncyB3aGljaCB0aGlzCiAgICAgICAgICAgICAgICAgICAgbW9zdCBpbGx1c3RyaW91cyB5b3VuZyBtYW4sIHRoaXMgbW9zdCBleGNlbGxlbnQgb2YgYWxsIG1lbiBoYXMgb2YgaGlzIG93biBhY2NvcmQKICAgICAgICAgICAgICAgICAgICBkb25lLCBhbmQgc3RpbGwgaXMgZG9pbmcsIGJlIHNhbmN0aW9uZWQgYnkgb3VyIGF1dGhvcml0eTsgYW5kIHRoZSBhZG1pcmFibGUKICAgICAgICAgICAgICAgICAgICB1bmFuaW1pdHkgb2YgdGhlIHZldGVyYW5zLCB0aG9zZSBtb3N0IGJyYXZlIG1lbiwgYW5kIG9mIHRoZSBNYXJ0aWFsIGFuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmb3VydGggbGVnaW9uLCBpbiB0aGVpciB6ZWFsIGZvciB0aGUgcmVlc3RhYmxpc2htZW50IG9mIHRoZSByZXB1YmxpYywgYmUKICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2VkIGJ5IG91ciBwcmFpc2UgYW5kIGNvbW1lbmRhdGlvbi4gQW5kIGxldCB1cyBwbGVkZ2Ugb3Vyc2VsdmVzIHRoaXMgZGF5CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGVpciBhZHZhbnRhZ2UsIGFuZCBob25vcnMsIGFuZCByZXdhcmRzIHNoYWxsIGhlIGNhcmVkIGZvciBieSB1cyBhcyBzb29uCiAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGNvbnN1bHMgZWxlY3QgaGF2ZSBlbnRlcmVkIGluIHRoZWlyIG1hZ2lzdHJhY3kuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoZSB0aGluZ3Mgd2hpY2ggSSBoYXZlIHNhaWQgYWJvdXQgQ2Flc2FyIGFuZCBhYm91dCBoaXMgYXJteSwgYXJlLCBpbmRlZWQsCiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSB3ZWxsIGtub3duIHRvIHlvdS4gRm9yIGJ5IHRoZSBhZG1pcmFibGUgdmFsb3Igb2YgQ2Flc2FyLCBhbmQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlybW5lc3Mgb2YgdGhlIHZldGVyYW4gc29sZGllcnMsIGFuZCBieSB0aGUgYWRtaXJhYmxlIGRpc2Nlcm5tZW50IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyB3aGljaCBoYXZlIGZvbGxvd2VkIG91ciBhdXRob3JpdHksIGFuZCB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgdmFsb3Igb2YgQ2Flc2FyLCBBbnRvbml1cyBoYXMgYmVlbiByZXBlbGxlZCBmcm9tIGhpcyBhdHRlbXB0cyB1cG9uIG91cgogICAgICAgICAgICAgICAgICAgIGxpdmVzLiBCdXQgdGhlc2UgdGhpbmdzLCBhcyBJIGhhdmUgc2FpZCwgaGFwcGVuZWQgYmVmb3JlOyBidXQgdGhpcyByZWNlbnQgZWRpY3QKICAgICAgICAgICAgICAgICAgICBvZiBEZWNpbXVzIEJydXR1cywgd2hpY2ggaGFzIGp1c3QgYmVlbiBpc3N1ZWQsIGNhbiBjZXJ0YWlubHkgbm90IGJlIHBhc3NlZCBvdmVyCiAgICAgICAgICAgICAgICAgICAgaW4gc2lsZW5jZS4gRm9yIGhlIHByb21pc2VzIHRvIHByZXNlcnZlIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IGluIG9iZWRpZW5jZSB0byB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LiBPIGNpdGl6ZW4sIGJvcm4gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljOyBtaW5kZnVsIG9mIHRoZSBuYW1lIGhlIGJlYXJzOyBpbWl0YXRvciBvZiBoaXMgYW5jZXN0b3JzISBOb3IsIGluZGVlZCwKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGFjcXVpc2l0aW9uIG9mIGxpYmVydHkgc28gbXVjaCBhbiBvYmplY3Qgb2YgZGVzaXJlIHRvIG91ciBhbmNlc3RvcnMgd2hlbgogICAgICAgICAgICAgICAgICAgIFRhcnF1aW5pdXMgd2FzIGV4cGVsbGVkLCBhcywgbm93IHRoYXQgQW50b25pdXMgaXMgZHJpdmVuIGF3YXksIHRoZSBwcmVzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICBvZiBpdCBpcyB0byB1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IFRob3NlIG1lbiBoYWQgbGVhcm5lZCB0byBvYmV5CiAgICAgICAgICAgICAgICAgICAga2luZ3MgZXZlciBzaW5jZSB0aGUgZm91bmRhdGlvbiBvZiB0aGUgY2l0eSwgYnV0IHdlIGZyb20gdGhlIHRpbWUgd2hlbiB0aGUga2luZ3MKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRyaXZlbiBvdXQgaGF2ZSBmb3Jnb3R0ZW4gaG93IHRvIGJlIHNsYXZlcy4gQW5kIHRoYXQgVGFycXVpbml1cywgd2hvbSBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgZXhwZWxsZWQsIHdhcyBub3QgZWl0aGVyIGNvbnNpZGVyZWQgb3IgY2FsbGVkIGNydWVsIG9yIGltcGlvdXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIG9ubHkgVGhlIFByb3VkLiBUaGF0IHZpY2Ugd2hpY2ggd2UgaGF2ZSBvZnRlbiBib3JuZSBpbiBwcml2YXRlIGluZGl2aWR1YWxzLCBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgY291bGQgbm90IGVuZHVyZSBldmVuIGluIGEga2luZy4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBpbiBvYmVkaWVuY2UgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gTyBjaXRpemVuLCBib3JuIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYzsgbWluZGZ1bCBvZiB0aGUgbmFtZSBoZSBiZWFyczsgaW1pdGF0b3Igb2YgaGlzIGFuY2VzdG9ycyEgTm9yLCBpbmRlZWQsCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoZSBhY3F1aXNpdGlvbiBvZiBsaWJlcnR5IHNvIG11Y2ggYW4gb2JqZWN0IG9mIGRlc2lyZSB0byBvdXIgYW5jZXN0b3JzIHdoZW4KICAgICAgICAgICAgICAgICAgICBUYXJxdWluaXVzIHdhcyBleHBlbGxlZCwgYXMsIG5vdyB0aGF0IEFudG9uaXVzIGlzIGRyaXZlbiBhd2F5LCB0aGUgcHJlc2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgaXQgaXMgdG8gdXMuIDwvdHJhbnNsYXRpb24+"
translation['3.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBUaG9zZSBtZW4gaGFkIGxlYXJuZWQgdG8gb2JleQogICAgICAgICAgICAgICAgICAgIGtpbmdzIGV2ZXIgc2luY2UgdGhlIGZvdW5kYXRpb24gb2YgdGhlIGNpdHksIGJ1dCB3ZSBmcm9tIHRoZSB0aW1lIHdoZW4gdGhlIGtpbmdzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBkcml2ZW4gb3V0IGhhdmUgZm9yZ290dGVuIGhvdyB0byBiZSBzbGF2ZXMuIEFuZCB0aGF0IFRhcnF1aW5pdXMsIHdob20gb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzIGV4cGVsbGVkLCB3YXMgbm90IGVpdGhlciBjb25zaWRlcmVkIG9yIGNhbGxlZCBjcnVlbCBvciBpbXBpb3VzLCBidXQKICAgICAgICAgICAgICAgICAgICBvbmx5IFRoZSBQcm91ZC4gVGhhdCB2aWNlIHdoaWNoIHdlIGhhdmUgb2Z0ZW4gYm9ybmUgaW4gcHJpdmF0ZSBpbmRpdmlkdWFscywgb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzIGNvdWxkIG5vdCBlbmR1cmUgZXZlbiBpbiBhIGtpbmcuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjaXVzIEJydXR1cyBjb3VsZCBub3QgZW5kdXJlIGEgcHJvdWQga2luZy4gU2hhbGwgRGVjaW11cyBCcnV0dXMgc3VibWl0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGtpbmdseSBwb3dlciBvZiBhIG1hbiB3aG8gaXMgd2lja2VkIGFuZCBpbXBpb3VzPyBXaGF0IGF0cm9jaXR5IGRpZCBUYXJxdWluaXVzCiAgICAgICAgICAgICAgICAgICAgZXZlciBjb21taXQgZXF1YWwgdG8gdGhlIGlubnVtZXJhYmxlIGFjdHMgb2YgdGhlIHNvcnQgd2hpY2ggQW50b25pdXMgaGFzIGRvbmUKICAgICAgICAgICAgICAgICAgICBhbmQgaXMgc3RpbGwgZG9pbmc/IEFnYWluLCB0aGUga2luZ3Mgd2VyZSB1c2VkIHRvIGNvbnN1bHQgdGhlIHNlbmF0ZTsgbm9yLCBhcyBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBlYXNlIHdoZW4gQW50b25pdXMgaG9sZHMgYSBzZW5hdGUsIHdlcmUgYXJtZWQgYmFyYmFyaWFucyBldmVyIGludHJvZHVjZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBjb3VuY2lsIG9mIHRoZSBraW5nLiBUaGUga2luZ3MgcGFpZCBkdWUgcmVnYXJkIHRvIHRoZSBhdXNwaWNlcywgd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbiwgdGhvdWdoIGNvbnN1bCBhbmQgYXVndXIsIGhhcyBuZWdsZWN0ZWQsIG5vdCBvbmx5IGJ5IHBhc3NpbmcgbGF3cyBpbgogICAgICAgICAgICAgICAgICAgIG9wcG9zaXRpb24gdG8gdGhlIGF1c3BpY2VzIGJ1dCBhbHNvIGJ5IG1ha2luZyBoaXMgY29sbGVhZ3VlICh3aG9tIGhlIGhpbXNlbGYgaGFkCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIGlycmVndWxhcmx5LCBhbmQgaGFkIGZhbHNpZmllZCB0aGUgYXVzcGljZXMgaW4gb3JkZXIgdG8gZG8gc28pIGpvaW4gaW4KICAgICAgICAgICAgICAgICAgICBwYXNzaW5nIHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQWdhaW4sIHdoYXQga2luZyB3YXMgZXZlciBzbwogICAgICAgICAgICAgICAgICAgIHByZXBvc3Rlcm91c2x5IGltcHVkZW50IGFzIHRvIGhhdmUgYWxsIHRoZSBwcm9maXRzIGFuZCBraW5kbmVzc2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzIG9mIGhpcyBraW5nZG9tIG9uIHNhbGU/IEJ1dCB3aGF0IGltbXVuaXR5IGlzIHRoZXJlLCB3aGF0IHJpZ2h0cyBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCB3aGF0IHJld2FyZHMgdGhhdCB0aGlzIG1hbiBoYXMgbm90IHNvbGQgdG8gaW5kaXZpZHVhbHMgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGFuZCB0byBlbnRpcmUgcHJvdmluY2VzLj8gV2UgaGF2ZSBuZXZlciBoZWFyZCBvZiBhbnl0aGluZyBiYXNlIG9yIHNvcmRpZAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGltcHV0ZWQgdG8gVGFycXVpbml1cy4gQnV0IGF0IHRoZSBob3VzZSBvZiB0aGlzIG1hbiBnb2xkIHdhcyBjb25zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgYmVpbmcgd2VpZ2hlZCBvdXQgaW4gdGhlIHNwaW5uaW5nIHJvb20sIGFuZCBtb25leSB3YXMgYmVpbmcgcGFpZCwgYW5kIGluIG9uZQogICAgICAgICAgICAgICAgICAgIHNpbmdsZSBob3VzZSBldmVyeSBzb3VsIHdobyBoYWQgYW55IGludGVyZXN0IGluIHRoZSBidXNpbmVzcyB3YXMgc2VsbGluZyB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBlbXBpcmUgb2YgdGhlIFJvbWFuIHBlb3BsZS4gV2UgaGF2ZSBuZXZlciBoZWFyZCBvZiBhbnkgZXhlY3V0aW9ucyBvZiBSb21hbgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGJ5IHRoZSBvcmRlcnMgb2YgVGFycXVpbml1czsgYnV0IHRoaXMgbWFuIGJvdGggYXQgU3Vlc3NhIG11cmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG9tIGhlIGhhZCB0aHJvd24gaW50byBwcmlzb24sIGFuZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IG1hc3NhY3JlZCBhYm91dCB0aHJlZSBodW5kcmVkIG1vc3QgZ2FsbGFudCBtZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgbW9zdCB2aXJ0dW91cyBjaXRpemVucy4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGFzdGx5LCBUYXJxdWluaXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIGNvbmR1Y3RpbmcgYSB3YXIgaW4gZGVmZW5zZSBvZiB0aGUgUm9tYW4gcGVvcGxlIGF0IHRoZSB2ZXJ5IHRpbWUgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBleHBlbGxlZC4gQW50b25pdXMgd2FzIGxlYWRpbmcgYW4gYXJteSBhZ2FpbnN0IHRoZSBSb21hbiBwZW9wbGUgYXQgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICB3aGVuLCBiZWluZyBhYmFuZG9uZWQgYnkgdGhlIGxlZ2lvbnMsIGhlIGNvd2VyZWQgYXQgdGhlIG5hbWUgb2YgQ2Flc2FyIGFuZCBhdAogICAgICAgICAgICAgICAgICAgIGhpcyBhcm15LCBhbmQgbmVnbGVjdGluZyB0aGUgcmVndWxhciBzYWNyaWZpY2VzLCBoZSBvZmZlcmVkIHVwIGJlZm9yZSBkYXlsaWdodAogICAgICAgICAgICAgICAgICAgIHZvd3Mgd2hpY2ggaGUgY291bGQgbmV2ZXIgbWVhbiB0byBwZXJmb3JtOyBhbmQgYXQgdGhpcyB2ZXJ5IG1vbWVudCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGVuZGVhdm9yaW5nIHRvIGludmFkZSBhIHByb3ZpbmNlIG9mIHRoZSBSb21hbiBwZW9wbGUuIFRoZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBoYXMgYWxyZWFkeSByZWNlaXZlZCBhbmQgaXMgc3RpbGwgbG9va2luZyBmb3IgZ3JlYXRlciBzZXJ2aWNlcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kIG9mIERlY2ltdXMgQnJ1dHVzIHRoYW4gb3VyIGFuY2VzdG9ycyByZWNlaXZlZCBmcm9tIEx1Y2l1cyBCcnV0dXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGZvdW5kZXIgb2YgdGhpcyByYWNlIGFuZCBuYW1lIHdoaWNoIHdlIG91Z2h0IHRvIGJlIHNvIGFueGlvdXMgdG8gcHJlc2VydmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQWdhaW4sIHdoYXQga2luZyB3YXMgZXZlciBzbwogICAgICAgICAgICAgICAgICAgIHByZXBvc3Rlcm91c2x5IGltcHVkZW50IGFzIHRvIGhhdmUgYWxsIHRoZSBwcm9maXRzIGFuZCBraW5kbmVzc2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzIG9mIGhpcyBraW5nZG9tIG9uIHNhbGU/IEJ1dCB3aGF0IGltbXVuaXR5IGlzIHRoZXJlLCB3aGF0IHJpZ2h0cyBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCB3aGF0IHJld2FyZHMgdGhhdCB0aGlzIG1hbiBoYXMgbm90IHNvbGQgdG8gaW5kaXZpZHVhbHMgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGFuZCB0byBlbnRpcmUgcHJvdmluY2VzLj8gV2UgaGF2ZSBuZXZlciBoZWFyZCBvZiBhbnl0aGluZyBiYXNlIG9yIHNvcmRpZAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGltcHV0ZWQgdG8gVGFycXVpbml1cy4gQnV0IGF0IHRoZSBob3VzZSBvZiB0aGlzIG1hbiBnb2xkIHdhcyBjb25zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgYmVpbmcgd2VpZ2hlZCBvdXQgaW4gdGhlIHNwaW5uaW5nIHJvb20sIGFuZCBtb25leSB3YXMgYmVpbmcgcGFpZCwgYW5kIGluIG9uZQogICAgICAgICAgICAgICAgICAgIHNpbmdsZSBob3VzZSBldmVyeSBzb3VsIHdobyBoYWQgYW55IGludGVyZXN0IGluIHRoZSBidXNpbmVzcyB3YXMgc2VsbGluZyB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBlbXBpcmUgb2YgdGhlIFJvbWFuIHBlb3BsZS4gV2UgaGF2ZSBuZXZlciBoZWFyZCBvZiBhbnkgZXhlY3V0aW9ucyBvZiBSb21hbgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGJ5IHRoZSBvcmRlcnMgb2YgVGFycXVpbml1czsgYnV0IHRoaXMgbWFuIGJvdGggYXQgU3Vlc3NhIG11cmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG9tIGhlIGhhZCB0aHJvd24gaW50byBwcmlzb24sIGFuZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4gbWFzc2FjcmVkIGFib3V0IHRocmVlIGh1bmRyZWQgbW9zdCBnYWxsYW50IG1lbiBhbmQKICAgICAgICAgICAgICAgICAgICBtb3N0IHZpcnR1b3VzIGNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGFzdGx5LCBUYXJxdWluaXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIGNvbmR1Y3RpbmcgYSB3YXIgaW4gZGVmZW5zZSBvZiB0aGUgUm9tYW4gcGVvcGxlIGF0IHRoZSB2ZXJ5IHRpbWUgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBleHBlbGxlZC4gQW50b25pdXMgd2FzIGxlYWRpbmcgYW4gYXJteSBhZ2FpbnN0IHRoZSBSb21hbiBwZW9wbGUgYXQgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICB3aGVuLCBiZWluZyBhYmFuZG9uZWQgYnkgdGhlIGxlZ2lvbnMsIGhlIGNvd2VyZWQgYXQgdGhlIG5hbWUgb2YgQ2Flc2FyIGFuZCBhdAogICAgICAgICAgICAgICAgICAgIGhpcyBhcm15LCBhbmQgbmVnbGVjdGluZyB0aGUgcmVndWxhciBzYWNyaWZpY2VzLCBoZSBvZmZlcmVkIHVwIGJlZm9yZSBkYXlsaWdodAogICAgICAgICAgICAgICAgICAgIHZvd3Mgd2hpY2ggaGUgY291bGQgbmV2ZXIgbWVhbiB0byBwZXJmb3JtOyBhbmQgYXQgdGhpcyB2ZXJ5IG1vbWVudCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGVuZGVhdm9yaW5nIHRvIGludmFkZSBhIHByb3ZpbmNlIG9mIHRoZSBSb21hbiBwZW9wbGUuIFRoZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBoYXMgYWxyZWFkeSByZWNlaXZlZCBhbmQgaXMgc3RpbGwgbG9va2luZyBmb3IgZ3JlYXRlciBzZXJ2aWNlcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kIG9mIERlY2ltdXMgQnJ1dHVzIHRoYW4gb3VyIGFuY2VzdG9ycyByZWNlaXZlZCBmcm9tIEx1Y2l1cyBCcnV0dXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGZvdW5kZXIgb2YgdGhpcyByYWNlIGFuZCBuYW1lIHdoaWNoIHdlIG91Z2h0IHRvIGJlIHNvIGFueGlvdXMgdG8gcHJlc2VydmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgd2hpbGUgYWxsIHNsYXZlcnkgaXMgbWlzZXJhYmxlLCB0byBiZSBzbGF2ZSB0byBhIG1hbiB3aG8gaXMgcHJvZmxpZ2F0ZSwKICAgICAgICAgICAgICAgICAgICB1bmNoYXN0ZSwgZWZmZW1pbmF0ZSwgbmV2ZXIsIG5vdCBldmVuIHdoaWxlIGluIGZlYXIsIHNvYmVyLCBpcyBzdXJlbHkKICAgICAgICAgICAgICAgICAgICBpbnRvbGVyYWJsZS4gSGUsIHRoZW4sIHdobyBrZWVwcyB0aGlzIG1hbiBvdXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgZXNwZWNpYWxseSBieSBoaXMgb3duIHByaXZhdGUgYXV0aG9yaXR5LCBqdWRnZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGp1ZGdlcyBtb3N0IHRydWx5LCB0aGF0IGhlIGlzIG5vdCBjb25zdWwgYXQgYWxsLiBXZSBtdXN0IHRha2UgY2FyZSwgdGhlcmVmb3JlLCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIHRvIHNhbmN0aW9uIHRoZSBwcml2YXRlIGRlY2lzaW9uIG9mIERlY2ltdXMgQnJ1dHVzIGJ5IHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eS4gTm9yLCBpbmRlZWQsIG91Z2h0IHlvdSB0byBoYXZlIHRob3VnaHQgTWFyY3VzIEFudG9uaXVzIGNvbnN1bCBhdCBhbnkKICAgICAgICAgICAgICAgICAgICB0aW1lIHNpbmNlIHRoZSBMdXBlcmNhbGlhLiBGb3Igb24gdGhlIGRheSB3aGVuIGhlLCBpbiB0aGUgc2lnaHQgb2YgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBoYXJhbmd1ZWQgdGhlIG1vYiwgbmFrZWQsIHBlcmZ1bWVkLCBhbmQgZHJ1bmssIGFuZCBsYWJvcmVkIG1vcmVvdmVyIHRvCiAgICAgICAgICAgICAgICAgICAgcHV0IGEgY3Jvd24gb24gdGhlIGhlYWQgb2YgaGlzIGNvbGxlYWd1ZSwgb24gdGhhdCBkYXkgaGUgYWJkaWNhdGVkIG5vdCBvbmx5IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN1bHNoaXAsIGJ1dCBhbHNvIGhpcyBvd24gZnJlZWRvbS4gQXQsIGFsbCBldmVudHMgaGUgaGltc2VsZiBtdXN0IGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlY29tZSBhIHNsYXZlLCBpZiBDYWVzYXIgaGFkIGJlZW4gd2lsbGluZyB0byBhY2NlcHQgZnJvbSBoaW0gdGhhdCBlbnNpZ24KICAgICAgICAgICAgICAgICAgICBvZiByb3lhbHR5LiBDYW4gSSB0aGVuIHRoaW5rIGhpbSBhIGNvbnN1bCwgY2FuIEkgdGhpbmsgaGltIGEgUm9tYW4gY2l0aXplbiwgY2FuCiAgICAgICAgICAgICAgICAgICAgSSB0aGluayBoaW0gYSBmcmVlbWFuLCBjYW4gSSBldmVuIHRoaW5rIGhpbSBhIG1hbiwgd2hvIG9uIHRoYXQgc2hhbWVmdWwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2lja2VkIGRheSBzaG93ZWQgd2hhdCBoZSB3YXMgd2lsbGluZyB0byBlbmR1cmUgd2hpbGUgQ2Flc2FyIGxpdmVkLCBhbmQgd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhbnhpb3VzIHRvIG9idGFpbiBoaW1zZWxmIGFmdGVyIGhlIHdhcyBkZWFkPyA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBlc3BlY2lhbGx5IGJ5IGhpcyBvd24gcHJpdmF0ZSBhdXRob3JpdHksIGp1ZGdlcywgYW5kCiAgICAgICAgICAgICAgICAgICAganVkZ2VzIG1vc3QgdHJ1bHksIHRoYXQgaGUgaXMgbm90IGNvbnN1bCBhdCBhbGwuIFdlIG11c3QgdGFrZSBjYXJlLCB0aGVyZWZvcmUsIE8KICAgICAgICAgICAgICAgICAgICBjb25zY3JpcHQgZmF0aGVycywgdG8gc2FuY3Rpb24gdGhlIHByaXZhdGUgZGVjaXNpb24gb2YgRGVjaW11cyBCcnV0dXMgYnkgcHVibGljCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5LiBOb3IsIGluZGVlZCwgb3VnaHQgeW91IHRvIGhhdmUgdGhvdWdodCBNYXJjdXMgQW50b25pdXMgY29uc3VsIGF0IGFueQogICAgICAgICAgICAgICAgICAgIHRpbWUgc2luY2UgdGhlIEx1cGVyY2FsaWEuIEZvciBvbiB0aGUgZGF5IHdoZW4gaGUsIGluIHRoZSBzaWdodCBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGhhcmFuZ3VlZCB0aGUgbW9iLCBuYWtlZCwgcGVyZnVtZWQsIGFuZCBkcnVuaywgYW5kIGxhYm9yZWQgbW9yZW92ZXIgdG8KICAgICAgICAgICAgICAgICAgICBwdXQgYSBjcm93biBvbiB0aGUgaGVhZCBvZiBoaXMgY29sbGVhZ3VlLCBvbiB0aGF0IGRheSBoZSBhYmRpY2F0ZWQgbm90IG9ubHkgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3Vsc2hpcCwgYnV0IGFsc28gaGlzIG93biBmcmVlZG9tLiBBdCwgYWxsIGV2ZW50cyBoZSBoaW1zZWxmIG11c3QgYXQgb25jZQogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVjb21lIGEgc2xhdmUsIGlmIENhZXNhciBoYWQgYmVlbiB3aWxsaW5nIHRvIGFjY2VwdCBmcm9tIGhpbSB0aGF0IGVuc2lnbgogICAgICAgICAgICAgICAgICAgIG9mIHJveWFsdHkuIENhbiBJIHRoZW4gdGhpbmsgaGltIGEgY29uc3VsLCBjYW4gSSB0aGluayBoaW0gYSBSb21hbiBjaXRpemVuLCBjYW4KICAgICAgICAgICAgICAgICAgICBJIHRoaW5rIGhpbSBhIGZyZWVtYW4sIGNhbiBJIGV2ZW4gdGhpbmsgaGltIGEgbWFuLCB3aG8gb24gdGhhdCBzaGFtZWZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICB3aWNrZWQgZGF5IHNob3dlZCB3aGF0IGhlIHdhcyB3aWxsaW5nIHRvIGVuZHVyZSB3aGlsZSBDYWVzYXIgbGl2ZWQsIGFuZCB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIGFueGlvdXMgdG8gb2J0YWluIGhpbXNlbGYgYWZ0ZXIgaGUgd2FzIGRlYWQ/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaXMgaXQgcG9zc2libGUgdG8gcGFzcyBvdmVyIGluIHNpbGVuY2UKICAgICAgICAgICAgICAgICAgICB0aGUgdmlydHVlIGFuZCB0aGUgZmlybW5lc3MgYW5kIHRoZSBkaWduaXR5IG9mIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4gRm9yIHRoYXQgaXMgdGhlIGZsb3dlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT47IHRoYXQgaXMgdGhlIGJ1bHdhcmsgb2YgdGhlIGVtcGlyZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBSb21hbiBwZW9wbGU7IHRoYXQgaXMgdGhlIGNoaWVmIG9ybmFtZW50IG9mIG91ciBkaWduaXR5LiBCdXQgc28gcGVyZmVjdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZSB1bmFuaW1pdHkgb2YgdGhlIG11bmljaXBhbCB0b3ducyBhbmQgY29sb25pZXMgb2YgdGhlIHByb3ZpbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCB0aGF0IGFsbCBtZW4gaW4gdGhhdCBkaXN0cmljdCBhcHBlYXIgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHVuaXRlZCB0b2dldGhlciB0byBkZWZlbmQgdGhlIGF1dGhvcml0eSBvZiB0aGlzIG9yZGVyLCBhbmQgdGhlIG1hamVzdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgUm9tYW4gcGVvcGxlLiBXaGVyZWZvcmUsIE8gdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgYWx0aG91Z2ggeW91IGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgYnJvdWdodCBhbnkgb3RoZXIgYnVzaW5lc3MgYmVmb3JlIHVzIGJleW9uZCB0aGUgcXVlc3Rpb24gb2YgcHJvdGVjdGlvbiwKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IHRoZSBjb25zdWxzIG1heSBiZSBhYmxlIHRvIGhvbGQgdGhlIHNlbmF0ZSB3aXRoIHNhZmV0eSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBvZiBKYW51YXJ5LCBzdGlsbCB5b3UgYXBwZWFyIHRvIG1lIHRvIGhhdmUgYWN0ZWQgd2l0aCBncmVhdCB3aXNkb20gYW5kCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgcHJ1ZGVuY2UgaW4gZ2l2aW5nIGFuIG9wcG9ydHVuaXR5IG9mIGRlYmF0aW5nIHRoZSBnZW5lcmFsIGNpcmN1bXN0YW5jZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMuIEZvciB3aGVuIHlvdSBkZWNpZGVkIHRoYXQgdGhlIHNlbmF0ZSBjb3VsZCBub3QgYmUgaGVsZCB3aXRoIHNhZmV0eQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgc29tZSBwcm90ZWN0aW9uIG9yIG90aGVyLCB5b3UgYXQgdGhlIHNhbWUgdGltZSBhc3NlcnRlZCBieSB0aGF0IGRlY2lzaW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgd2lja2VkbmVzcyBhbmQgYXVkYWNpdHkgb2YgQW50b25pdXMgd2FzIHN0aWxsIGNvbnRpbnVpbmcgaXRzIHByYWN0aWNlcwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiBvdXIgd2FsbHMuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGlzIGl0IHBvc3NpYmxlIHRvIHBhc3Mgb3ZlciBpbiBzaWxlbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIHZpcnR1ZSBhbmQgdGhlIGZpcm1uZXNzIGFuZCB0aGUgZGlnbml0eSBvZiB0aGUgcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4gRm9yIHRoYXQgaXMgdGhlIGZsb3dlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPjsgdGhhdCBpcyB0aGUgYnVsd2FyayBvZiB0aGUgZW1waXJlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZTsgdGhhdCBpcyB0aGUgY2hpZWYgb3JuYW1lbnQgb2Ygb3VyIGRpZ25pdHkuIEJ1dCBzbyBwZXJmZWN0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIHVuYW5pbWl0eSBvZiB0aGUgbXVuaWNpcGFsIHRvd25zIGFuZCBjb2xvbmllcyBvZiB0aGUgcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgdGhhdCBhbGwgbWVuIGluIHRoYXQgZGlzdHJpY3QgYXBwZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB1bml0ZWQgdG9nZXRoZXIgdG8gZGVmZW5kIHRoZSBhdXRob3JpdHkgb2YgdGhpcyBvcmRlciwgYW5kIHRoZSBtYWplc3R5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZS4gV2hlcmVmb3JlLCBPIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFsdGhvdWdoIHlvdSBoYXZlIG5vdAogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGJyb3VnaHQgYW55IG90aGVyIGJ1c2luZXNzIGJlZm9yZSB1cyBiZXlvbmQgdGhlIHF1ZXN0aW9uIG9mIHByb3RlY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCB0aGUgY29uc3VscyBtYXkgYmUgYWJsZSB0byBob2xkIHRoZSBzZW5hdGUgd2l0aCBzYWZldHkgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgb2YgSmFudWFyeSwgc3RpbGwgeW91IGFwcGVhciB0byBtZSB0byBoYXZlIGFjdGVkIHdpdGggZ3JlYXQgd2lzZG9tIGFuZAogICAgICAgICAgICAgICAgICAgIGdyZWF0IHBydWRlbmNlIGluIGdpdmluZyBhbiBvcHBvcnR1bml0eSBvZiBkZWJhdGluZyB0aGUgZ2VuZXJhbCBjaXJjdW1zdGFuY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljLiBGb3Igd2hlbiB5b3UgZGVjaWRlZCB0aGF0IHRoZSBzZW5hdGUgY291bGQgbm90IGJlIGhlbGQgd2l0aCBzYWZldHkKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHNvbWUgcHJvdGVjdGlvbiBvciBvdGhlciwgeW91IGF0IHRoZSBzYW1lIHRpbWUgYXNzZXJ0ZWQgYnkgdGhhdCBkZWNpc2lvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHdpY2tlZG5lc3MgYW5kIGF1ZGFjaXR5IG9mIEFudG9uaXVzIHdhcyBzdGlsbCBjb250aW51aW5nIGl0cyBwcmFjdGljZXMKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gb3VyIHdhbGxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgSSB3aWxsIGVtYnJhY2UgZXZlcnkgY29uc2lkZXJhdGlvbiBpbiBteSBvcGluaW9uIHdoaWNoIEkgYW0gbm93IGdvaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gZGVsaXZlciwgYSBjb3Vyc2UgdG8gd2hpY2ggeW91LCBJIGZlZWwgc3VyZSwgaGF2ZSBubyBvYmplY3Rpb247IGluIG9yZGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgbWF5IGJlIGNvbmZlcnJlZCBieSB1cyBvbiBhZG1pcmFibGUgZ2VuZXJhbHMsIGFuZCB0aGF0IGhvcGUgb2YgcmV3YXJkCiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGhlbGQgb3V0IGJ5IHVzIHRvIGdhbGxhbnQgc29sZGllcnMsIGFuZCB0aGF0IGEgZm9ybWFsIGRlY2lzaW9uIG1heSBiZQogICAgICAgICAgICAgICAgICAgIGNvbWUgdG8sIG5vdCBieSB3b3JkcyBvbmx5LCBidXQgYWxzbyBieSBhY3Rpb25zLCB0aGF0IEFudG9uaXVzIGlzIG5vdCBvbmx5IG5vdCBhCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCBidXQgaXMgZXZlbiBhbiBlbmVteS4gRm9yIGlmIGhlIGJlIGNvbnN1bCwgdGhlbiB0aGUgbGVnaW9ucyB3aGljaCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ0ZWQgdGhlIGNvbnN1bCBkZXNlcnZlIGJlYXRpbmc8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+UmlkZGxlIChEaWN0LiBMYXQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdm9jZSkgc2F5cywgdGhhdCB0aGlzIHdhcyB0aGUgcmVndWxhciBwdW5pc2htZW50IGZvciBkZXNlcnRlcnMsIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGljdGVkIGJ5IHRoZWlyIGNvbXJhZGVzLjwvbm90ZT4gdG8gZGVhdGguIENhZXNhciBpcyB3aWNrZWQsIEJydXR1cyBpcwogICAgICAgICAgICAgICAgICAgIGltcGlvdXMsIHNpbmNlIHRoZXkgb2YgdGhlaXIgb3duIGhlYWRzIGhhdmUgbGV2aWVkIGFuIGFybXkgYWdhaW5zdCB0aGUgY29uc3VsLgogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBuZXcgaG9ub3JzIGFyZSB0byBiZSBzb3VnaHQgb3V0IGZvciB0aGUgc29sZGllcnMgb24gYWNjb3VudCBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRpdmluZSBhbmQgaW1tb3J0YWwgbWVyaXRzLCBhbmQgaWYgaXQgaXMgcXVpdGUgaW1wb3NzaWJsZSB0byBzaG93IGdyYXRpdHVkZQogICAgICAgICAgICAgICAgICAgIGVub3VnaCB0byB0aGUgZ2VuZXJhbHMsIHdobyBpcyB0aGVyZSB3aG8gbXVzdCBub3QgdGhpbmsgdGhhdCBtYW4gYSBwdWJsaWMgZW5lbXksCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgY29uZHVjdCBpcyBzdWNoIHRoYXQgdGhvc2Ugd2hvIGFyZSBpbiBhcm1zIGFnYWluc3QgaGltIGFyZSBjb25zaWRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHNhdmlvcnMgb2YgdGhlIHJlcHVibGljPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+UmlkZGxlIChEaWN0LiBMYXQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdm9jZSkgc2F5cywgdGhhdCB0aGlzIHdhcyB0aGUgcmVndWxhciBwdW5pc2htZW50IGZvciBkZXNlcnRlcnMsIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGljdGVkIGJ5IHRoZWlyIGNvbXJhZGVzLjwvbm90ZT4gdG8gZGVhdGguIENhZXNhciBpcyB3aWNrZWQsIEJydXR1cyBpcwogICAgICAgICAgICAgICAgICAgIGltcGlvdXMsIHNpbmNlIHRoZXkgb2YgdGhlaXIgb3duIGhlYWRzIGhhdmUgbGV2aWVkIGFuIGFybXkgYWdhaW5zdCB0aGUgY29uc3VsLgogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBuZXcgaG9ub3JzIGFyZSB0byBiZSBzb3VnaHQgb3V0IGZvciB0aGUgc29sZGllcnMgb24gYWNjb3VudCBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRpdmluZSBhbmQgaW1tb3J0YWwgbWVyaXRzLCBhbmQgaWYgaXQgaXMgcXVpdGUgaW1wb3NzaWJsZSB0byBzaG93IGdyYXRpdHVkZQogICAgICAgICAgICAgICAgICAgIGVub3VnaCB0byB0aGUgZ2VuZXJhbHMsIHdobyBpcyB0aGVyZSB3aG8gbXVzdCBub3QgdGhpbmsgdGhhdCBtYW4gYSBwdWJsaWMgZW5lbXksCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgY29uZHVjdCBpcyBzdWNoIHRoYXQgdGhvc2Ugd2hvIGFyZSBpbiBhcm1zIGFnYWluc3QgaGltIGFyZSBjb25zaWRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHNhdmlvcnMgb2YgdGhlIHJlcHVibGljPyA8L3RyYW5zbGF0aW9uPg=="
translation['3.6.15'] = ""
translation['3.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBJdCBpcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmljaWEiPkFyaWNpYTwvcGxhY2VOYW1lPiB0aGF0IHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB0aGUgVm9jb25pYW4gYW5kIEF0aW5pYW4gbGF3czsgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyaWNpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJpY2lhIj5BcmljaWE8L3BsYWNlTmFtZT4gaGF2ZSBjb21lIG1hbnkgb2YgdGhvc2UgbWFnaXN0cmF0ZXMgd2hvIGhhdmUgZmlsbGVkIG91cgogICAgICAgICAgICAgICAgICAgIGN1cnVsZSBjaGFpcnMsIGJvdGggaW4gb3VyIGZhdGhlcnMnIHJlY29sbGVjdGlvbiBhbmQgaW4gb3VyIG93bjsgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyaWNpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJpY2lhIj5BcmljaWE8L3BsYWNlTmFtZT4gaGF2ZSBzcHJ1bmcgbWFueSBvZiB0aGUgYmVzdCBhbmQKICAgICAgICAgICAgICAgICAgICBicmF2ZXN0IG9mIHRoZSBSb21hbiBrbmlnaHRzLiBCdXQgaWYgeW91IGRpc2FwcHJvdmUgb2YgYSB3aWZlIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmljaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyaWNpYSI+QXJpY2lhPC9wbGFjZU5hbWU+LCB3aHkgZG8geW91IGFwcHJvdmUgb2Ygb25lIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUdXNjdWx1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVHVzY3VsdW0iPlR1c2N1bHVtPC9wbGFjZU5hbWU+PyBBbHRob3VnaCB0aGUgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBtb3N0IHZpcnR1b3VzIGFuZCBleGNlbGxlbnQgd29tYW4sIE1hcmN1cyBBdGl1cyBCYWxidXMsIGEgbWFuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlc3QgY2hhcmFjdGVyLCB3YXMgYSBtYW4gb2YgcHJhZXRvcmlhbiByYW5rOyBidXQgdGhlIGZhdGhlciBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgd2lmZSzigJRhIGdvb2Qgd29tYW4sIGF0IGFsbCBldmVudHMgYSByaWNoIG9uZSzigJRhIGZlbGxvdyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBuYW1lIG9mIEJhbWJhbGlvLCB3YXMgYSBtYW4gb2Ygbm8gYWNjb3VudCBhdCBhbGwuIE5vdGhpbmcgY291bGQgYmUgbG93ZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIGhlIHdhcywgYSBmZWxsb3cgd2hvIGdvdCBoaXMgc3VybmFtZSBhcyBhIHNvcnQgb2YgaW5zdWx0LCBkZXJpdmVkPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkJhbWJhbGlvIGlzIGRlcml2ZWQgZnJvbSB0aGUgR3JlZWsgd29yZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5iYW1iYS9sdzwvZm9yZWlnbj4sIHRvIGxpc3AuPC9ub3RlPiBmcm9tIHRoZSBoZXNpdGF0aW9uIG9mIGhpcyBzcGVlY2gKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN0b2xpZGl0eSBvZiBoaXMgdW5kZXJzdGFuZGluZy4gT2gsIGJ1dCB5b3VyIGdyYW5kZmF0aGVyIHdhcyBub2JseSBib3JuLgogICAgICAgICAgICAgICAgICAgIFllcywgaGUgd2FzIHRoYXQgVHVkaXRhbnVzIHdobyB1c2VkIHRvIHB1dCBvbiBhIGNsb2FrIGFuZCBidXNraW5zLCBhbmQgdGhlbiBnbwogICAgICAgICAgICAgICAgICAgIGFuZCBzY2F0dGVyIG1vbmV5IGZyb20gdGhlIHJvc3RyYSBhbW9uZyB0aGUgcGVvcGxlLiBJIHdpc2ggaGUgaGFkIGJlcXVlYXRoZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgY29udGVtcHQgb2YgbW9uZXkgdG8gaGlzIGRlc2NlbmRhbnRzISBZb3UgaGF2ZSwgaW5kZWVkLCBhIG1vc3QgZ2xvcmlvdXMgbm9iaWxpdHkKICAgICAgICAgICAgICAgICAgICBvZiBmYW1pbHkhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPmJhbWJhL2x3PC9mb3JlaWduPiwgdG8gbGlzcC48L3RyYW5zbGF0aW9uPg=="
translation['3.6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhvdyBkb2VzIGl0IGhhcHBlbiB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBhIHdvbWFuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmljaWEiPkFyaWNpYTwvcGxhY2VOYW1lPiBhcHBlYXJzIHRvCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIGJlIGlnbm9ibGUsIHdoZW4geW91IGFyZSBhY2N1c3RvbWVkIHRvIGJvYXN0IG9mIGEgZGVzY2VudCBvbiB0aGUgbW90aGVyJ3MKICAgICAgICAgICAgICAgICAgICBzaWRlIHdoaWNoIGlzIHByZWNpc2VseSB0aGUgc2FtZT88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SnVsaWEsIHRoZSBtb3RoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgYW5kIHNpc3RlciBvZiBMdWNpdXMgQ2Flc2FyLCB3YXMgYWxzbyBhIG5hdGl2ZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyaWNpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJpY2lhIj5BcmljaWE8L3BsYWNlTmFtZT4uPC9ub3RlPiBCZXNpZGVzLCB3aGF0IGluc2FuaXR5CiAgICAgICAgICAgICAgICAgICAgaXMgaXQgZm9yIHRoYXQgbWFuIHRvIHNheSBhbnkgdGhpbmcgYWJvdXQgdGhlIHdhbnQgb2Ygbm9ibGUgYmlydGggaW4gbWVuJ3MKICAgICAgICAgICAgICAgICAgICB3aXZlcywgd2hlbiBoaXMgZmF0aGVyIG1hcnJpZWQgTnVtaXRvcmlhIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmljaWEiPkFyaWNpYTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMjEyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAyMTI5Ij5GcmVnZWxsYWU8L3BsYWNlTmFtZT4sIHRoZSBkYXVnaHRlciBvZiBhIHRyYWl0b3IsIGFuZCB3aGVuIGhlIGhpbXNlbGYgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVnb3R0ZW4gY2hpbGRyZW4gb2YgdGhlIGRhdWdodGVyIG9mIGEgZnJlZWRtYW4uIEhvd2V2ZXIsIHRob3NlIGlsbHVzdHJpb3VzIG1lbgogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBQaGlsaXBwdXMsIHdobyBoYXMgYSB3aWZlIHdobyBjYW1lIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmljaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyaWNpYSI+QXJpY2lhPC9wbGFjZU5hbWU+LCBhbmQgQ2FpdXMgTWFyY2VsbHVzLCB3aG9zZSB3aWZlIGlzIHRoZSBkYXVnaHRlciBvZiBhbgogICAgICAgICAgICAgICAgICAgIEFyaWNpYW4sIG1heSBsb29rIHRvIHRoaXM7IGFuZCBJIGFtIHF1aXRlIHN1cmUgdGhhdCB0aGV5IGhhdmUgbm8gcmVncmV0cyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzY29yZSBvZiB0aGUgZGlnbml0eSBvZiB0aG9zZSBhZG1pcmFibGUgd29tZW4uIDwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yZW92ZXIsIEFudG9uaXVzIHByb2NlZWRzIHRvIG5hbWUgUXVpbnR1cyBDaWNlcm8sIG15IGJyb3RoZXIncyBzb24sIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGVkaWN0OyBhbmQgaXMgc28gbWFkIGFzIG5vdCB0byBwZXJjZWl2ZSB0aGF0IHRoZSB3YXkgaW4gd2hpY2ggaGUgbmFtZXMgaGltIGlzIGEKICAgICAgICAgICAgICAgICAgICBwYW5lZ3lyaWMgb24gaGltLiBGb3Igd2hhdCBjb3VsZCBoYXBwZW4gbW9yZSBkZXNpcmFibGUgZm9yIHRoaXMgeW91bmcgbWFuLCB0aGFuCiAgICAgICAgICAgICAgICAgICAgdG8gYmUga25vd24gYnkgZXZlcnkgb25lIHRvIGJlIHRoZSBwYXJ0bmVyIG9mIENhZXNhcidzIGNvdW5zZWxzLCBhbmQgdGhlIGVuZW15CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGZyZW56eSBvZiBBbnRvbml1cz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhpcyBnbGFkaWF0b3IKICAgICAgICAgICAgICAgICAgICBoYXMgZGFyZWQgdG8gcHV0IGluIHdyaXRpbmcgdGhhdCBoZSBoYWQgZGVzaWduZWQgdGhlIG11cmRlciBvZiBoaXMgZmF0aGVyIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyB1bmNsZS4gT2ggdGhlIG1hcnZlbG91cyBpbXB1ZGVuY2UsIGFuZCBhdWRhY2l0eSwgYW5kIHRlbWVyaXR5IG9mIHN1Y2ggYW4KICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24hIHRvIGRhcmUgdG8gcHV0IHRoaXMgaW4gd3JpdGluZyBhZ2FpbnN0IHRoYXQgeW91bmcgbWFuLCB3aG9tIEkgYW5kIG15CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgb24gYWNjb3VudCBvZiBoaXMgYW1pYWJsZSBtYW5uZXJzLCBhbmQgcHVyZSBjaGFyYWN0ZXIsIGFuZCBzcGxlbmRpZAogICAgICAgICAgICAgICAgICAgIGFiaWxpdGllcywgdmllIHdpdGggb25lIGFub3RoZXIgaW4gbG92aW5nLCBhbmQgdG8gd2hvbSB3ZSBpbmNlc3NhbnRseSBkZXZvdGUgb3VyCiAgICAgICAgICAgICAgICAgICAgZXllcywgYW5kIGVhcnMsIGFuZCBhZmZlY3Rpb25zISBBbmQgYXMgdG8gbWUsIGhlIGRvZXMgbm90IGtub3cgd2hldGhlciBoZSBpcwogICAgICAgICAgICAgICAgICAgIGluanVyaW5nIG9yIHByYWlzaW5nIG1lIGluIHRob3NlIHNhbWUgZWRpY3RzLiBXaGVuIGhlIHRocmVhdGVucyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIGNpdGl6ZW5zIHdpdGggdGhlIHNhbWUgcHVuaXNobWVudCB3aGljaCBJIGluZmxpY3RlZCBvbiB0aGUgbW9zdCB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBhbmQgaW5mYW1vdXMgb2YgbWVuLCBoZSBzZWVtcyB0byBwcmFpc2UgbWUgYXMgaWYgaGUgd2VyZSBkZXNpcm91cyBvZiBjb3B5aW5nIG1lOwogICAgICAgICAgICAgICAgICAgIGJ1dCB3aGVuIGhlIGJyaW5ncyB1cCBhZ2FpbiB0aGUgbWVtb3J5IG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBleHBsb2l0LCB0aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgdGhpbmtzIHRoYXQgaGUgaXMgZXhjaXRpbmcgc29tZSBvZGl1bSBhZ2FpbnN0IG1lIGluIHRoZSBicmVhc3RzIG9mIG1lbiBsaWtlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZi4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoaXMgZ2xhZGlhdG9yCiAgICAgICAgICAgICAgICAgICAgaGFzIGRhcmVkIHRvIHB1dCBpbiB3cml0aW5nIHRoYXQgaGUgaGFkIGRlc2lnbmVkIHRoZSBtdXJkZXIgb2YgaGlzIGZhdGhlciBhbmQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgdW5jbGUuIE9oIHRoZSBtYXJ2ZWxvdXMgaW1wdWRlbmNlLCBhbmQgYXVkYWNpdHksIGFuZCB0ZW1lcml0eSBvZiBzdWNoIGFuCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uISB0byBkYXJlIHRvIHB1dCB0aGlzIGluIHdyaXRpbmcgYWdhaW5zdCB0aGF0IHlvdW5nIG1hbiwgd2hvbSBJIGFuZCBteQogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIG9uIGFjY291bnQgb2YgaGlzIGFtaWFibGUgbWFubmVycywgYW5kIHB1cmUgY2hhcmFjdGVyLCBhbmQgc3BsZW5kaWQKICAgICAgICAgICAgICAgICAgICBhYmlsaXRpZXMsIHZpZSB3aXRoIG9uZSBhbm90aGVyIGluIGxvdmluZywgYW5kIHRvIHdob20gd2UgaW5jZXNzYW50bHkgZGV2b3RlIG91cgogICAgICAgICAgICAgICAgICAgIGV5ZXMsIGFuZCBlYXJzLCBhbmQgYWZmZWN0aW9ucyEgQW5kIGFzIHRvIG1lLCBoZSBkb2VzIG5vdCBrbm93IHdoZXRoZXIgaGUgaXMKICAgICAgICAgICAgICAgICAgICBpbmp1cmluZyBvciBwcmFpc2luZyBtZSBpbiB0aG9zZSBzYW1lIGVkaWN0cy4gV2hlbiBoZSB0aHJlYXRlbnMgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBjaXRpemVucyB3aXRoIHRoZSBzYW1lIHB1bmlzaG1lbnQgd2hpY2ggSSBpbmZsaWN0ZWQgb24gdGhlIG1vc3Qgd2lja2VkCiAgICAgICAgICAgICAgICAgICAgYW5kIGluZmFtb3VzIG9mIG1lbiwgaGUgc2VlbXMgdG8gcHJhaXNlIG1lIGFzIGlmIGhlIHdlcmUgZGVzaXJvdXMgb2YgY29weWluZyBtZTsKICAgICAgICAgICAgICAgICAgICBidXQgd2hlbiBoZSBicmluZ3MgdXAgYWdhaW4gdGhlIG1lbW9yeSBvZiB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgZXhwbG9pdCwgdGhlbiBoZQogICAgICAgICAgICAgICAgICAgIHRoaW5rcyB0aGF0IGhlIGlzIGV4Y2l0aW5nIHNvbWUgb2RpdW0gYWdhaW5zdCBtZSBpbiB0aGUgYnJlYXN0cyBvZiBtZW4gbGlrZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGF0IGlzIGl0IHRoYXQgaGUgaGFzIGRvbmUgaGltc2VsZj8gV2hlbiBoZSBoYWQgcHVibGlzaGVkIGFsbCB0aGVzZSBlZGljdHMsCiAgICAgICAgICAgICAgICAgICAgaGUgaXNzdWVkIGFub3RoZXIsIHRoYXQgdGhlIHNlbmF0ZSB3YXMgdG8gbWVldCBpbiBhIGZ1bGwgaG91c2Ugb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdHdlbnR5LWZvdXJ0aCBvZiBOb3ZlbWJlci4gT24gdGhhdCBkYXkgaGUgaGltc2VsZiB3YXMgbm90IHByZXNlbnQuIEJ1dCB3aGF0IHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgdGVybXMgb2YgaGlzIGVkaWN0PyBUaGVzZSwgSSBiZWxpZXZlLCBhcmUgdGhlIGV4YWN0IHdvcmRzIG9mIHRoZSBlbmQgb2YgaXQ6CiAgICAgICAgICAgICAgICAgICAg4oCcSWYgYW55IG9uZSBmYWlscyB0byBhdHRlbmQsIGFsbCBtZW4gd2lsbCBiZSBhdCBsaWJlcnR5IHRvIHRoaW5rIGhpbQogICAgICAgICAgICAgICAgICAgIHRoZSBhZHZpc2VyIG9mIG15IGRlc3RydWN0aW9uIGFuZCBvZiBtb3N0IHJ1aW5vdXMgY291bnNlbHMu4oCdIFdoYXQgYXJlCiAgICAgICAgICAgICAgICAgICAgcnVpbm91cyBjb3Vuc2Vscz8gdGhvc2Ugd2hpY2ggcmVsYXRlIHRvIHRoZSByZWNvdmVyeSBvZiB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU/IE9mIHRob3NlIGNvdW5zZWxzIEkgY29uZmVzcyB0aGF0IEkgaGF2ZSBiZWVuIGFuZCBzdGlsbCBhbSBhbiBhZHZpc2VyIGFuZAogICAgICAgICAgICAgICAgICAgIHByb21wdGVyIHRvIENhZXNhci4gQWx0aG91Z2ggaGUgZGlkIG5vdCBzdGFuZCBpbiBuZWVkIG9mIGFueSBvbmUncyBhZHZpY2U7IGJ1dAogICAgICAgICAgICAgICAgICAgIHN0aWxsIEkgc3B1cnJlZCBvbiB0aGUgd2lsbGluZyBob3JzZSwgYXMgaXQgaXMgc2FpZC4gRm9yIHdoYXQgZ29vZCBtYW4gd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhZHZpc2VkIHB1dHRpbmcgeW91IHRvIGRlYXRoLCB3aGVuIG9uIHlvdXIgZGVhdGggZGVwZW5kZWQgdGhlIHNhZmV0eSBhbmQKICAgICAgICAgICAgICAgICAgICBsaWZlIG9mIGV2ZXJ5IGdvb2QgbWFuLCBhbmQgdGhlIGxpYmVydHkgYW5kIGRpZ25pdHkgb2YgdGhlIFJvbWFuIHBlb3BsZT8gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB3aGVuIGhlIGhhZCBzdW1tb25lZCB1cyBhbGwgYnkgc28gc2V2ZXJlCiAgICAgICAgICAgICAgICAgICAgYW4gZWRpY3QsIHdoeSBkaWQgaGUgbm90IGF0dGVuZCBoaW1zZWxmPyBEbyB5b3Ugc3VwcG9zZSB0aGF0IGhlIHdhcyBkZXRhaW5lZCBieQogICAgICAgICAgICAgICAgICAgIGFueSBtZWxhbmNob2x5IG9yIGltcG9ydGFudCBvY2Nhc2lvbj8gSGUgd2FzIGRldGFpbmVkIGRyaW5raW5nIGFuZCBmZWFzdGluZy4gSWYsCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkLCBpdCBkZXNlcnZlcyB0byBiZSBjYWxsZWQgYSBmZWFzdCwgYW5kIG5vdCByYXRoZXIgZ2x1dHRvbnkuIEhlIG5lZ2xlY3RlZAogICAgICAgICAgICAgICAgICAgIHRvIGF0dGVuZCBvbiB0aGUgZGF5IG1lbnRpb25lZCBpbiBoaXMgZWRpY3Q7IGFuZCBoZSBhZGpvdXJuZWQgdGhlIG1lZXRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdHdlbnR5LWVpZ2h0aC4gSGUgdGhlbiBzdW1tb25lZCB1cyB0byBhdHRlbmQgaW4gdGhlIENhcGl0b2w7IGFuZCBhdCB0aGF0IHRlbXBsZQogICAgICAgICAgICAgICAgICAgIGhlIGRpZCBhcnJpdmUgaGltc2VsZiwgY29taW5nIHVwIHRocm91Z2ggc29tZSBtaW5lIGxlZnQgYnkgdGhlIEdhdWxzLiBNZW4gY2FtZSwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYmVlbiBzdW1tb25lZCwgc29tZSBvZiB0aGVtIGluZGVlZCBtZW4gb2YgaGlnaCBkaXN0aW5jdGlvbiwgYnV0IGZvcmdldGZ1bAogICAgICAgICAgICAgICAgICAgIG9mIHdoYXQgd2FzIGR1ZSB0byB0aGVpciBkaWduaXR5LiBGb3IgdGhlIGRheSB3YXMgc3VjaCwgdGhlIHJlcG9ydCBvZiB0aGUgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1lZXRpbmcgc3VjaCwgc3VjaCB0b28gdGhlIG1hbiB3aG8gaGFkIGNvbnZlbmVkIHRoZSBzZW5hdGUsIHRoYXQgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0YWJsZSBmb3IgYSBzZW5hdGUgdG8gZmVlbCBubyBmZWFyIGZvciB0aGUgcmVzdWx0LiBBbmQgeWV0IHRvIHRob3NlIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgYXNzZW1ibGVkIGhlIGRpZCBub3QgZGFyZSB0byBzYXkgYSBzaW5nbGUgd29yZCBhYm91dCBDYWVzYXIsIHRob3VnaCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCBtYWRlIHVwIGhpcyBtaW5kPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5IZSBoYWQgaW50ZW5kZWQgdG8gcHJvcG9zZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHRvIGRlY2xhcmUgT2N0YXZpdXMgYSBwdWJsaWMgZW5lbXkuIFdlIG11c3QgcmVjb2xsZWN0IHRoYXQgaW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgb3JhdGlvbnMgQ2ljZXJvLCBldmVuIHdoZW4gaGUgc3BlYWtzIG9mIENhaXVzIENhZXNhciwgbWVhbnMgT2N0YXZpdXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHRvIHN1Ym1pdCBhIG1vdGlvbiByZXNwZWN0aW5nIGhpbSB0byB0aGUgc2VuYXRlLiBUaGVyZSB3YXMgYSBtYW4gb2YgY29uc3VsYXIKICAgICAgICAgICAgICAgICAgICByYW5rIHdobyBoYWQgYnJvdWdodCBhIHJlc29sdXRpb24gcmVhZHkgZHJhd24gdXAuIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+IElzIGl0IG5vdCBub3cgYWRtaXR0aW5nIHRoYXQgaGUgaXMgaGltc2VsZiBhbiBlbmVteSwgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGRvZXMgbm90IGRhcmUgdG8gbWFrZSBhIG1vdGlvbiByZXNwZWN0aW5nIGEgbWFuIHdobyBpcyBsZWFkaW5nIGFuIGFybXkKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhpbSB3aGlsZSBoZSBpcyBjb25zdWw/IEZvciBpdCBpcyBwZXJmZWN0bHkgcGxhaW4gdGhhdCBvbmUgb2YgdGhlIHR3bwogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgYW4gZW5lbXk7IG5vciBpcyBpdCBwb3NzaWJsZSB0byBjb21lIHRvIGEgZGlmZmVyZW50IGRlY2lzaW9uIHJlc3BlY3RpbmcKICAgICAgICAgICAgICAgICAgICBhZHZlcnNlIGdlbmVyYWxzLiBJZiB0aGVuIENhaXVzLiBDYWVzYXIgYmUgYW4gZW5lbXksIHdoeSBkb2VzIHRoZSBjb25zdWwgc3VibWl0CiAgICAgICAgICAgICAgICAgICAgbm8gbW90aW9uIHRvIHRoZSBzZW5hdGU/IElmIGhlIGRvZXMgbm90IGRlc2VydmUgdG8gYmUgYnJhbmRlZCBieSB0aGUgc2VuYXRlLAogICAgICAgICAgICAgICAgICAgIHRoZW4gd2hhdCBjYW4gdGhlIGNvbnN1bCBzYXksIHdobywgYnkgaGlzIHNpbGVuY2UgcmVzcGVjdGluZyBoaW0sIGhhcyBjb25mZXNzZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhpbXNlbGYgaXMgYW4gZW5lbXk/IEluIGhpcyBlZGljdHMgaGUgc3R5bGVzIGhpbSBTcGFydGFjdXMsIHdoaWxlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSBoZSBkb2VzIG5vdCB2ZW50dXJlIHRvIGNhbGwgaGltIGV2ZW4gYSBiYWQgY2l0aXplbi4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gaGUgaGFkIHN1bW1vbmVkIHVzIGFsbCBieSBzbyBzZXZlcmUKICAgICAgICAgICAgICAgICAgICBhbiBlZGljdCwgd2h5IGRpZCBoZSBub3QgYXR0ZW5kIGhpbXNlbGY/IERvIHlvdSBzdXBwb3NlIHRoYXQgaGUgd2FzIGRldGFpbmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYW55IG1lbGFuY2hvbHkgb3IgaW1wb3J0YW50IG9jY2FzaW9uPyBIZSB3YXMgZGV0YWluZWQgZHJpbmtpbmcgYW5kIGZlYXN0aW5nLiBJZiwKICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIGl0IGRlc2VydmVzIHRvIGJlIGNhbGxlZCBhIGZlYXN0LCBhbmQgbm90IHJhdGhlciBnbHV0dG9ueS4gSGUgbmVnbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gYXR0ZW5kIG9uIHRoZSBkYXkgbWVudGlvbmVkIGluIGhpcyBlZGljdDsgYW5kIGhlIGFkam91cm5lZCB0aGUgbWVldGluZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0d2VudHktZWlnaHRoLiBIZSB0aGVuIHN1bW1vbmVkIHVzIHRvIGF0dGVuZCBpbiB0aGUgQ2FwaXRvbDsgYW5kIGF0IHRoYXQgdGVtcGxlCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIGFycml2ZSBoaW1zZWxmLCBjb21pbmcgdXAgdGhyb3VnaCBzb21lIG1pbmUgbGVmdCBieSB0aGUgR2F1bHMuIE1lbiBjYW1lLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIHN1bW1vbmVkLCBzb21lIG9mIHRoZW0gaW5kZWVkIG1lbiBvZiBoaWdoIGRpc3RpbmN0aW9uLCBidXQgZm9yZ2V0ZnVsCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hhdCB3YXMgZHVlIHRvIHRoZWlyIGRpZ25pdHkuIEZvciB0aGUgZGF5IHdhcyBzdWNoLCB0aGUgcmVwb3J0IG9mIHRoZSBvYmplY3QKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbWVldGluZyBzdWNoLCBzdWNoIHRvbyB0aGUgbWFuIHdobyBoYWQgY29udmVuZWQgdGhlIHNlbmF0ZSwgdGhhdCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBkaXNjcmVkaXRhYmxlIGZvciBhIHNlbmF0ZSB0byBmZWVsIG5vIGZlYXIgZm9yIHRoZSByZXN1bHQuIEFuZCB5ZXQgdG8gdGhvc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCBhc3NlbWJsZWQgaGUgZGlkIG5vdCBkYXJlIHRvIHNheSBhIHNpbmdsZSB3b3JkIGFib3V0IENhZXNhciwgdGhvdWdoIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIG1hZGUgdXAgaGlzIG1pbmQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUgaGFkIGludGVuZGVkIHRvIHByb3Bvc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmF0ZSB0byBkZWNsYXJlIE9jdGF2aXVzIGEgcHVibGljIGVuZW15LiBXZSBtdXN0IHJlY29sbGVjdCB0aGF0IGluIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIG9yYXRpb25zIENpY2VybywgZXZlbiB3aGVuIGhlIHNwZWFrcyBvZiBDYWl1cyBDYWVzYXIsIG1lYW5zIE9jdGF2aXVzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB0byBzdWJtaXQgYSBtb3Rpb24gcmVzcGVjdGluZyBoaW0gdG8gdGhlIHNlbmF0ZS4gVGhlcmUgd2FzIGEgbWFuIG9mIGNvbnN1bGFyCiAgICAgICAgICAgICAgICAgICAgcmFuayB3aG8gaGFkIGJyb3VnaHQgYSByZXNvbHV0aW9uIHJlYWR5IGRyYXduIHVwLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgbm90IG5vdyBhZG1pdHRpbmcgdGhhdCBoZSBpcyBoaW1zZWxmIGFuIGVuZW15LCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaGUgZG9lcyBub3QgZGFyZSB0byBtYWtlIGEgbW90aW9uIHJlc3BlY3RpbmcgYSBtYW4gd2hvIGlzIGxlYWRpbmcgYW4gYXJteQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltIHdoaWxlIGhlIGlzIGNvbnN1bD8gRm9yIGl0IGlzIHBlcmZlY3RseSBwbGFpbiB0aGF0IG9uZSBvZiB0aGUgdHdvCiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSBhbiBlbmVteTsgbm9yIGlzIGl0IHBvc3NpYmxlIHRvIGNvbWUgdG8gYSBkaWZmZXJlbnQgZGVjaXNpb24gcmVzcGVjdGluZwogICAgICAgICAgICAgICAgICAgIGFkdmVyc2UgZ2VuZXJhbHMuIElmIHRoZW4gQ2FpdXMuIENhZXNhciBiZSBhbiBlbmVteSwgd2h5IGRvZXMgdGhlIGNvbnN1bCBzdWJtaXQKICAgICAgICAgICAgICAgICAgICBubyBtb3Rpb24gdG8gdGhlIHNlbmF0ZT8gSWYgaGUgZG9lcyBub3QgZGVzZXJ2ZSB0byBiZSBicmFuZGVkIGJ5IHRoZSBzZW5hdGUsCiAgICAgICAgICAgICAgICAgICAgdGhlbiB3aGF0IGNhbiB0aGUgY29uc3VsIHNheSwgd2hvLCBieSBoaXMgc2lsZW5jZSByZXNwZWN0aW5nIGhpbSwgaGFzIGNvbmZlc3NlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGltc2VsZiBpcyBhbiBlbmVteT8gSW4gaGlzIGVkaWN0cyBoZSBzdHlsZXMgaGltIFNwYXJ0YWN1cywgd2hpbGUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIGhlIGRvZXMgbm90IHZlbnR1cmUgdG8gY2FsbCBoaW0gZXZlbiBhIGJhZCBjaXRpemVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGluIHRoZSBtb3N0IG1lbGFuY2hvbHkgY2lyY3Vtc3RhbmNlcyB3aGF0IG1pcnRoIGRvZXMgaGUgbm90IHByb3Zva2U/IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRlZCB0byBtZW1vcnkgc29tZSBzaG9ydCBwaHJhc2VzIG9mIG9uZSBlZGljdCwgd2hpY2ggaGUgYXBwZWFycyB0byB0aGluawogICAgICAgICAgICAgICAgICAgIHBhcnRpY3VsYXJseSBjbGV2ZXI7IGJ1dCBJIGhhdmUgbm90IGFzIHlldCBmb3VuZCBhbnkgb25lIHdobyBoYXMgdW5kZXJzdG9vZCB3aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaW50ZW5kZWQgYnkgdGhlbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPiDigJxUaGF0IGlzIG5vCiAgICAgICAgICAgICAgICAgICAgaW5zdWx0IHdoaWNoIGEgd29ydGh5IG1hbiBkb2VzLuKAnSBOb3csIGluIHRoZSBmaXJzdCBwbGFjZSwgd2hhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFuaW5nIG9mIOKAnHdvcnRoeT/igJ0gRm9yIHRoZXJlIGFyZSBtYW55IG1lbiB3b3J0aHkgb2YKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50LCBhcyBoZSBoaW1zZWxmIGlzLiBEb2VzIGhlIG1lYW4gd2hhdCBhIG1hbiBkb2VzIHdobyBpcyBpbnZlc3RlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgYW55IGRpZ25pdHk/PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIHRvIGdpdmUgYSBwcm9wZXIgaWRlYSBvZgogICAgICAgICAgICAgICAgICAgICAgICBDaWNlcm8ncyBtZWFuaW5nIGhlcmUuIEhlIGlzIGFyZ3Vpbmcgb24gdGhlIHdvcmQgPGZvcmVpZ24gbGFuZz0ibGEiPmRpZ251czwvZm9yZWlnbj4sIGZyb20gd2hpY2ggPGZvcmVpZ24gbGFuZz0ibGEiPmRpZ25pdGFzPC9mb3JlaWduPiBpcwogICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmVkLiBCdXQgd2UgaGF2ZSBubyBtZWFucyBvZiBrZWVwaW5nIHVwIHRoZSBwbGF5IG9uIHRoZSB3b3JkcyBpbgogICAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoLjwvbm90ZT4gaWYgc28sIHdoYXQgaW5zdWx0IGNhbiBiZSBncmVhdGVyPyBNb3Jlb3Zlciwgd2hhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFuaW5nIG9mIOKAnGRvaW5nIGFuIGluc3VsdD/igJ0gV2hvIGV2ZXIgdXNlcyBzdWNoIGFuCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbj8gVGhlbiBjb21lcywg4oCcTm9yIGFueSBmZWFyIHdoaWNoIGFuIGVuZW15CiAgICAgICAgICAgICAgICAgICAgdGhyZWF0ZW5zLuKAnSBXaGF0IHRoZW4/IGlzIGZlYXIgdXN1YWxseSB0aHJlYXRlbmVkIGJ5IGEgZnJpZW5kPyBUaGVuCiAgICAgICAgICAgICAgICAgICAgY2FtZSBtYW55IHNpbWlsYXIgc2VudGVuY2VzLiBJcyBpdCBub3QgYmV0dGVyIHRvIGJlIGR1bWIsIHRoYW4gdG8gc2F5IHdoYXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgY2FuIHVuZGVyc3RhbmQ/IE5vdyBzZWUgd2h5IGhpcyB0dXRvciwgZXhjaGFuZ2luZyBwbGVhcyBmb3IgcGxvd3MsIGhhcyBoYWQKICAgICAgICAgICAgICAgICAgICBnaXZlbiB0byBoaW0gaW4gdGhlIHB1YmxpYyBkb21haW4gb2YgdGhlIFJvbWFuIHBlb3BsZSB0d28gdGhvdXNhbmQgYWNyZXMgb2YgbGFuZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBMZW9udGluZSBkaXN0cmljdCwgZXhlbXB0IGZyb20gYWxsIHRheGVzLCBmb3IgbWFraW5nIGEgc3R1cGlkIG1hbiBzdGlsbAogICAgICAgICAgICAgICAgICAgIHN0dXBpZGVyIGF0IHRoZSBwdWJsaWMgZXhwZW5zZS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcVGhhdCBpcyBubwogICAgICAgICAgICAgICAgICAgIGluc3VsdCB3aGljaCBhIHdvcnRoeSBtYW4gZG9lcy7igJ0gTm93LCBpbiB0aGUgZmlyc3QgcGxhY2UsIHdoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVhbmluZyBvZiDigJx3b3J0aHk/4oCdIEZvciB0aGVyZSBhcmUgbWFueSBtZW4gd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudCwgYXMgaGUgaGltc2VsZiBpcy4gRG9lcyBoZSBtZWFuIHdoYXQgYSBtYW4gZG9lcyB3aG8gaXMgaW52ZXN0ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGFueSBkaWduaXR5Pzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIHRvIGdpdmUgYSBwcm9wZXIgaWRlYSBvZgogICAgICAgICAgICAgICAgICAgICAgICBDaWNlcm8ncyBtZWFuaW5nIGhlcmUuIEhlIGlzIGFyZ3Vpbmcgb24gdGhlIHdvcmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGlnbnVzPC9mb3JlaWduPiwgZnJvbSB3aGljaCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kaWduaXRhczwvZm9yZWlnbj4gaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZlZC4gQnV0IHdlIGhhdmUgbm8gbWVhbnMgb2Yga2VlcGluZyB1cCB0aGUgcGxheSBvbiB0aGUgd29yZHMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgRW5nbGlzaC48L25vdGU+IGlmIHNvLCB3aGF0IGluc3VsdCBjYW4gYmUgZ3JlYXRlcj8gTW9yZW92ZXIsIHdoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVhbmluZyBvZiDigJxkb2luZyBhbiBpbnN1bHQ/4oCdIFdobyBldmVyIHVzZXMgc3VjaCBhbgogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24/IFRoZW4gY29tZXMsIOKAnE5vciBhbnkgZmVhciB3aGljaCBhbiBlbmVteQogICAgICAgICAgICAgICAgICAgIHRocmVhdGVucy7igJ0gV2hhdCB0aGVuPyBpcyBmZWFyIHVzdWFsbHkgdGhyZWF0ZW5lZCBieSBhIGZyaWVuZD8gVGhlbgogICAgICAgICAgICAgICAgICAgIGNhbWUgbWFueSBzaW1pbGFyIHNlbnRlbmNlcy4gSXMgaXQgbm90IGJldHRlciB0byBiZSBkdW1iLCB0aGFuIHRvIHNheSB3aGF0IG5vCiAgICAgICAgICAgICAgICAgICAgb25lIGNhbiB1bmRlcnN0YW5kPyBOb3cgc2VlIHdoeSBoaXMgdHV0b3IsIGV4Y2hhbmdpbmcgcGxlYXMgZm9yIHBsb3dzLCBoYXMgaGFkCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdG8gaGltIGluIHRoZSBwdWJsaWMgZG9tYWluIG9mIHRoZSBSb21hbiBwZW9wbGUgdHdvIHRob3VzYW5kIGFjcmVzIG9mIGxhbmQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgTGVvbnRpbmUgZGlzdHJpY3QsIGV4ZW1wdCBmcm9tIGFsbCB0YXhlcywgZm9yIG1ha2luZyBhIHN0dXBpZCBtYW4gc3RpbGwKICAgICAgICAgICAgICAgICAgICBzdHVwaWRlciBhdCB0aGUgcHVibGljIGV4cGVuc2UuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRpZ251czwvZm9yZWlnbj4sIGZyb20gd2hpY2ggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGlnbml0YXM8L2ZvcmVpZ24+IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2ZWQuIEJ1dCB3ZSBoYXZlIG5vIG1lYW5zIG9mIGtlZXBpbmcgdXAgdGhlIHBsYXkgb24gdGhlIHdvcmRzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2guPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+IEhvd2V2ZXIsIHRoZXNlIHBlcmhhcHMgYXJlIHRyaWZsaW5nIG1hdHRlcnMuCiAgICAgICAgICAgICAgICAgICAgSSBhc2sgbm93LCB3aHkgYWxsIG9uIGEgc3VkZGVuIGhlIGJlY2FtZSBzbyBnZW50bGUgaW4gdGhlIHNlbmF0ZSwgYWZ0ZXIgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzbyBmaWVyY2UgaW4gaGlzIGVkaWN0cz8gRm9yIHdoYXQgd2FzIHRoZSBvYmplY3Qgb2YgdGhyZWF0ZW5pbmcgTHVjaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Fzc2l1cywgYSBtb3N0IGZlYXJsZXNzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYW5kIGEgbW9zdCB2aXJ0dW91cyBhbmQgbG95YWwKICAgICAgICAgICAgICAgICAgICBjaXRpemVuLCB3aXRoIGRlYXRoIGlmIGhlIGNhbWUgdG8gdGhlIHNlbmF0ZT8gb2YgZXhwZWxsaW5nIERlY2ltdXMgQ2FyZnVsZW51cywgYQogICAgICAgICAgICAgICAgICAgIG1hbiB0aG9yb3VnaGx5IGF0dGFjaGVkIHRvIHRoZSByZXB1YmxpYywgZnJvbSB0aGUgc2VuYXRlIGJ5IHZpb2xlbmNlIGFuZCB0aHJlYXRzCiAgICAgICAgICAgICAgICAgICAgb2YgZGVhdGg/IG9mIGludGVyZGljdGluZyBUaXR1cyBDYW51dGl1cywgYnkgd2hvbSBoZSBoYWQgYmVlbiByZXBlYXRlZGx5IGFuZAogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkbHkgaGFyYXNzZWQgYnkgbW9zdCBsZWdpdGltYXRlIGF0dGFja3MsIG5vdCBvbmx5IGZyb20gdGhlIHRlbXBsZSBpdHNlbGYsCiAgICAgICAgICAgICAgICAgICAgYnV0IGZyb20gYWxsIGFwcHJvYWNoIHRvIGl0PyBXaGF0IHdhcyB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlIHdoaWNoIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGFmcmFpZCB0aGF0IHRoZXkgd291bGQgc3RvcCBieSB0aGUgaW50ZXJwb3NpdGlvbiBvZiB0aGVpciB2ZXRvPyBUaGF0LCBJIHN1cHBvc2UsCiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdGluZyB0aGUgc3VwcGxpY2F0aW9uIGluIGhvbm9yIG9mIE1hcmN1cyBMZXBpZHVzLCBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuIQogICAgICAgICAgICAgICAgICAgIENlcnRhaW5seSB0aGVyZSB3YXMgYSBncmVhdCBkYW5nZXIgb2Ygb3VyIGhpbmRlcmluZyBhbiBvcmRpbmFyeSBjb21wbGltZW50IHRvIGEKICAgICAgICAgICAgICAgICAgICBtYW4gb24gd2hvbSB3ZSB3ZXJlIGV2ZXJ5IGRheSB0aGlua2luZyBvZiBjb25mZXJyaW5nIHNvbWUgZXh0cmFvcmRpbmFyeSBob25vci4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgdGhhdCBoZSBtaWdodCBub3QgYXBwZWFyIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBoYWQgbm8gcmVhc29uIGF0IGFsbCBmb3Igb3JkZXJpbmcgdGhlIHNlbmF0ZSB0byBtZWV0LCBoZSB3YXMgb24gdGhlIHBvaW50IG9mCiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgZm9yd2FyZCBzb21lIG1vdGlvbiBhYm91dCB0aGUgcmVwdWJsaWMgd2hlbiB0aGUgbmV3cyBhYm91dCB0aGUgZm91cnRoCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uIGNhbWU7IHdoaWNoIGVudGlyZWx5IGJld2lsZGVyZWQgaGltLCBhbmQgaGFzdGVuaW5nIHRvIGZsZWUgYXdheSwgaGUgdG9vawogICAgICAgICAgICAgICAgICAgIGEgZGl2aXNpb24gb24gdGhlIHJlc29sdXRpb24gZm9yIGRlY3JlZWluZyB0aGlzIHN1cHBsaWNhdGlvbiwgdGhvdWdoIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgaGFkIG5ldmVyIGJlZW4gaGVhcmQgb2YgYmVmb3JlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZyBvbiBzdWNoIG9jY2FzaW9ucyBiZWluZyB0byBhc2sgZWFjaCBzZW5hdG9yJ3Mgb3BpbmlvbiBzZXBhcmF0ZWx5LAogICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBnYXZlIHRob3NlIHdobyBjaG9zZSBhbiBvcHBvcnR1bml0eSBmb3IgcHJvbm91bmNpbmcgc29tZSBlbmNvbWl1bSBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGVyc29uIGhvbm9yZWQuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgdGhlc2UgcGVyaGFwcyBhcmUgdHJpZmxpbmcgbWF0dGVycy4KICAgICAgICAgICAgICAgICAgICBJIGFzayBub3csIHdoeSBhbGwgb24gYSBzdWRkZW4gaGUgYmVjYW1lIHNvIGdlbnRsZSBpbiB0aGUgc2VuYXRlLCBhZnRlciBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIHNvIGZpZXJjZSBpbiBoaXMgZWRpY3RzPyBGb3Igd2hhdCB3YXMgdGhlIG9iamVjdCBvZiB0aHJlYXRlbmluZyBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBDYXNzaXVzLCBhIG1vc3QgZmVhcmxlc3MgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhbmQgYSBtb3N0IHZpcnR1b3VzIGFuZCBsb3lhbAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHdpdGggZGVhdGggaWYgaGUgY2FtZSB0byB0aGUgc2VuYXRlPyBvZiBleHBlbGxpbmcgRGVjaW11cyBDYXJmdWxlbnVzLCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHRob3JvdWdobHkgYXR0YWNoZWQgdG8gdGhlIHJlcHVibGljLCBmcm9tIHRoZSBzZW5hdGUgYnkgdmlvbGVuY2UgYW5kIHRocmVhdHMKICAgICAgICAgICAgICAgICAgICBvZiBkZWF0aD8gb2YgaW50ZXJkaWN0aW5nIFRpdHVzIENhbnV0aXVzLCBieSB3aG9tIGhlIGhhZCBiZWVuIHJlcGVhdGVkbHkgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSBoYXJhc3NlZCBieSBtb3N0IGxlZ2l0aW1hdGUgYXR0YWNrcywgbm90IG9ubHkgZnJvbSB0aGUgdGVtcGxlIGl0c2VsZiwKICAgICAgICAgICAgICAgICAgICBidXQgZnJvbSBhbGwgYXBwcm9hY2ggdG8gaXQ/IFdoYXQgd2FzIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBzZW5hdGUgd2hpY2ggaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgYWZyYWlkIHRoYXQgdGhleSB3b3VsZCBzdG9wIGJ5IHRoZSBpbnRlcnBvc2l0aW9uIG9mIHRoZWlyIHZldG8/IFRoYXQsIEkgc3VwcG9zZSwKICAgICAgICAgICAgICAgICAgICByZXNwZWN0aW5nIHRoZSBzdXBwbGljYXRpb24gaW4gaG9ub3Igb2YgTWFyY3VzIExlcGlkdXMsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4hCiAgICAgICAgICAgICAgICAgICAgQ2VydGFpbmx5IHRoZXJlIHdhcyBhIGdyZWF0IGRhbmdlciBvZiBvdXIgaGluZGVyaW5nIGFuIG9yZGluYXJ5IGNvbXBsaW1lbnQgdG8gYQogICAgICAgICAgICAgICAgICAgIG1hbiBvbiB3aG9tIHdlIHdlcmUgZXZlcnkgZGF5IHRoaW5raW5nIG9mIGNvbmZlcnJpbmcgc29tZSBleHRyYW9yZGluYXJ5IGhvbm9yLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgdGhhdCBoZSBtaWdodCBub3QgYXBwZWFyIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBoYWQgbm8gcmVhc29uIGF0IGFsbCBmb3Igb3JkZXJpbmcgdGhlIHNlbmF0ZSB0byBtZWV0LCBoZSB3YXMgb24gdGhlIHBvaW50IG9mCiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgZm9yd2FyZCBzb21lIG1vdGlvbiBhYm91dCB0aGUgcmVwdWJsaWMgd2hlbiB0aGUgbmV3cyBhYm91dCB0aGUgZm91cnRoCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uIGNhbWU7IHdoaWNoIGVudGlyZWx5IGJld2lsZGVyZWQgaGltLCBhbmQgaGFzdGVuaW5nIHRvIGZsZWUgYXdheSwgaGUgdG9vawogICAgICAgICAgICAgICAgICAgIGEgZGl2aXNpb24gb24gdGhlIHJlc29sdXRpb24gZm9yIGRlY3JlZWluZyB0aGlzIHN1cHBsaWNhdGlvbiwgdGhvdWdoIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgaGFkIG5ldmVyIGJlZW4gaGVhcmQgb2YgYmVmb3JlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5nIG9uIHN1Y2ggb2NjYXNpb25zIGJlaW5nIHRvIGFzayBlYWNoIHNlbmF0b3IncyBvcGluaW9uIHNlcGFyYXRlbHksCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIGdhdmUgdGhvc2Ugd2hvIGNob3NlIGFuIG9wcG9ydHVuaXR5IGZvciBwcm9ub3VuY2luZyBzb21lIGVuY29taXVtIG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwZXJzb24gaG9ub3JlZC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGF0IGEgc2V0dGluZyBvdXQgd2FzIGhpcyBhZnRlciB0aGlzISB3aGF0IGEgam91cm5leSB3aGVuIGhlIHdhcyBpbiBoaXMgcm9iZQogICAgICAgICAgICAgICAgICAgIGFzIGEgZ2VuZXJhbCEgSG93IGRpZCBoZSBzaHVuIGFsbCBleWVzLCBhbmQgdGhlIGxpZ2h0IG9mIGRheSwgYW5kIHRoZSBjaXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZm9ydW0hIEhvdyBtaXNlcmFibGUgd2FzIGhpcyBmbGlnaHQhIGhvdyBzaGFtZWZ1bCEgaG93IGluZmFtb3VzISBTcGxlbmRpZCwKICAgICAgICAgICAgICAgICAgICB0b28sIHdlcmUgdGhlIGRlY3JlZXMgb2YgdGhlIHNlbmF0ZSBwYXNzZWQgb24gdGhlIGV2ZW5pbmcgb2YgdGhhdCB2ZXJ5IGRheTsgdmVyeQogICAgICAgICAgICAgICAgICAgIHJlbGlnaW91c2x5IHNvbGVtbiB3YXMgdGhlIGFsbG90bWVudCBvZiB0aGUgcHJvdmluY2VzOyBhbmQgaGVhdmVubHkgaW5kZWVkIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSBvcHBvcnR1bml0eSwgd2hlbiBldmVyeSBvbmUgZ290IGV4YWN0bHkgd2hhdCBoZSB0aG91Z2h0IG1vc3QgZGVzaXJhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+IFlvdSBhcmUgYWN0aW5nIGFkbWlyYWJseSwgdGhlcmVmb3JlLCBPCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgaW4gYnJpbmdpbmcgZm9yd2FyZCBhIG1vdGlvbiBhYm91dCB0aGUgcHJvdGVjdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgYW5kIGNvbnN1bHM7IGFuZCBtb3N0IGRlc2VydmVkbHkgYXJlIHdlIGFsbCBib3VuZCB0byBmZWVsIGFuZCB0byBwcm92ZSB0bwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGUgZ3JlYXRlc3QgZ3JhdGl0dWRlIGZvciB5b3VyIGNvbmR1Y3QuIEZvciBob3cgY2FuIHdlIGJlIGZyZWUgZnJvbSBmZWFyCiAgICAgICAgICAgICAgICAgICAgYW5kIGRhbmdlciB3aGlsZSBtZW5hY2VkIGJ5IHN1Y2ggY292ZXRvdXNuZXNzIGFuZCBhdWRhY2l0eT8gQW5kIGFzIGZvciB0aGF0CiAgICAgICAgICAgICAgICAgICAgcnVpbmVkIGFuZCBkZXNwZXJhdGUgbWFuLCB3aGF0IG1vcmUgaG9zdGlsZSBkZWNpc2lvbiBjYW4gYmUgcGFzc2VkIHVwb24gaGltIHRoYW4KICAgICAgICAgICAgICAgICAgICBoYXMgYWxyZWFkeSBiZWVuIHBhc3NlZCBieSBoaXMgb3duIGZyaWVuZHM/IEhpcyBtb3N0IGludGltYXRlIGZyaWVuZCwgYSBtYW4KICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWQgd2l0aCBtZSB0b28sIEx1Y2l1cyBMZW50dWx1cywgYW5kIGFsc28gUHVibGl1cyBOYXNvLCBhIG1hbiBkZXN0aXR1dGUKICAgICAgICAgICAgICAgICAgICBvZiBjb3ZldG91c25lc3MsIGhhdmUgc2hvd24gdGhhdCB0aGV5IHRoaW5rIHRoYXQgdGhleSBoYXZlIG5vIHByb3ZpbmNlcyBhc3NpZ25lZAogICAgICAgICAgICAgICAgICAgIHRoZW0sIGFuZCB0aGF0IHRoZSBhbGxvdG1lbnRzIG9mIEFudG9uaXVzIGFyZSBpbnZhbGlkLiBMdWNpdXMuIFBoaWxpcHB1cywgYSBtYW4KICAgICAgICAgICAgICAgICAgICB0aG9yb3VnaGx5IHdvcnRoeSBvZiBoaXMgZmF0aGVyIGFuZCBncmFuZGZhdGhlciBhbmQgYW5jZXN0b3JzLCBoYXMgZG9uZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lLiBUaGUgc2FtZSBpcyB0aGUgb3BpbmlvbiBvZiBNYXJjdXMgVHVyYW5pdXMsIGEgbWFuIG9mIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGludGVncml0eSBhbmQgcHVyaXR5IG9mIGxpZmUuIFRoZSBzYW1lIGlzIHRoZSBjb25kdWN0IG9mIFB1YmxpdXMgT3BwaXVzIGFuZAogICAgICAgICAgICAgICAgICAgIHRob3NlIHZlcnkgbWVuLOKAlHdobywgaW5mbHVlbmNlZCBieSB0aGVpciBmcmllbmRzaGlwIGZvciBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cywgaGF2ZSBhdHRyaWJ1dGVkIHRvIGhpbSBtb3JlIHBvd2VyIHRoYW4gdGhleSB3b3VsZCBwZXJoYXBzIHJlYWxseQogICAgICAgICAgICAgICAgICAgIGFwcHJvdmUgb2Ys4oCUTWFyY3VzIFBpc28sIG15IG93biBjb25uZWN0aW9uLCBhIG1vc3QgYWRtaXJhYmxlIG1hbiBhbmQKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBjaXRpemVuLCBhbmQgTWFyY3VzIFZlaGlsaXVzLCBhIG1hbiBvZiBlcXVhbCByZXNwZWN0YWJpbGl0eSwgaGF2ZSBib3RoCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdGhhdCB0aGV5IHdvdWxkIG9iZXkgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBXaHkgc2hvdWxkIEkgc3BlYWsgb2YgTHVjaXVzLiBDaW5uYT8gd2hvc2UgZXh0cmFvcmRpbmFyeQogICAgICAgICAgICAgICAgICAgIGludGVncml0eSwgcHJvdmVkIHVuZGVyIG1hbnkgdHJ5aW5nIGNpcmN1bXN0YW5jZXMsIG1ha2VzIHRoZSBnbG9yeSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGFkbWlyYWJsZSBjb25kdWN0IGxlc3MgcmVtYXJrYWJsZTsgaGUgaGFzIGFsdG9nZXRoZXIgZGlzcmVnYXJkZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UgYXNzaWduZWQgdG8gaGltOyBhbmQgc28gaGFzIENhaXVzIENlc3RpdXMsIGEgbWFuIG9mIGdyZWF0IGFuZCBmaXJtCiAgICAgICAgICAgICAgICAgICAgbWluZC4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IGFyZSBhY3RpbmcgYWRtaXJhYmx5LCB0aGVyZWZvcmUsIE8KICAgICAgICAgICAgICAgICAgICB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBpbiBicmluZ2luZyBmb3J3YXJkIGEgbW90aW9uIGFib3V0IHRoZSBwcm90ZWN0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSBhbmQgY29uc3VsczsgYW5kIG1vc3QgZGVzZXJ2ZWRseSBhcmUgd2UgYWxsIGJvdW5kIHRvIGZlZWwgYW5kIHRvIHByb3ZlIHRvCiAgICAgICAgICAgICAgICAgICAgeW91IHRoZSBncmVhdGVzdCBncmF0aXR1ZGUgZm9yIHlvdXIgY29uZHVjdC4gRm9yIGhvdyBjYW4gd2UgYmUgZnJlZSBmcm9tIGZlYXIKICAgICAgICAgICAgICAgICAgICBhbmQgZGFuZ2VyIHdoaWxlIG1lbmFjZWQgYnkgc3VjaCBjb3ZldG91c25lc3MgYW5kIGF1ZGFjaXR5PyBBbmQgYXMgZm9yIHRoYXQKICAgICAgICAgICAgICAgICAgICBydWluZWQgYW5kIGRlc3BlcmF0ZSBtYW4sIHdoYXQgbW9yZSBob3N0aWxlIGRlY2lzaW9uIGNhbiBiZSBwYXNzZWQgdXBvbiBoaW0gdGhhbgogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IGJlZW4gcGFzc2VkIGJ5IGhpcyBvd24gZnJpZW5kcz8gSGlzIG1vc3QgaW50aW1hdGUgZnJpZW5kLCBhIG1hbgogICAgICAgICAgICAgICAgICAgIGNvbm5lY3RlZCB3aXRoIG1lIHRvbywgTHVjaXVzIExlbnR1bHVzLCBhbmQgYWxzbyBQdWJsaXVzIE5hc28sIGEgbWFuIGRlc3RpdHV0ZQogICAgICAgICAgICAgICAgICAgIG9mIGNvdmV0b3VzbmVzcywgaGF2ZSBzaG93biB0aGF0IHRoZXkgdGhpbmsgdGhhdCB0aGV5IGhhdmUgbm8gcHJvdmluY2VzIGFzc2lnbmVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYW5kIHRoYXQgdGhlIGFsbG90bWVudHMgb2YgQW50b25pdXMgYXJlIGludmFsaWQuIEx1Y2l1cy4gUGhpbGlwcHVzLCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHRob3JvdWdobHkgd29ydGh5IG9mIGhpcyBmYXRoZXIgYW5kIGdyYW5kZmF0aGVyIGFuZCBhbmNlc3RvcnMsIGhhcyBkb25lIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUuIFRoZSBzYW1lIGlzIHRoZSBvcGluaW9uIG9mIE1hcmN1cyBUdXJhbml1cywgYSBtYW4gb2YgdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgaW50ZWdyaXR5IGFuZCBwdXJpdHkgb2YgbGlmZS4gVGhlIHNhbWUgaXMgdGhlIGNvbmR1Y3Qgb2YgUHVibGl1cyBPcHBpdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgdmVyeSBtZW4s4oCUd2hvLCBpbmZsdWVuY2VkIGJ5IHRoZWlyIGZyaWVuZHNoaXAgZm9yIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLCBoYXZlIGF0dHJpYnV0ZWQgdG8gaGltIG1vcmUgcG93ZXIgdGhhbiB0aGV5IHdvdWxkIHBlcmhhcHMgcmVhbGx5CiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZSBvZizigJRNYXJjdXMgUGlzbywgbXkgb3duIGNvbm5lY3Rpb24sIGEgbW9zdCBhZG1pcmFibGUgbWFuIGFuZAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIGNpdGl6ZW4sIGFuZCBNYXJjdXMgVmVoaWxpdXMsIGEgbWFuIG9mIGVxdWFsIHJlc3BlY3RhYmlsaXR5LCBoYXZlIGJvdGgKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZCB0aGF0IHRoZXkgd291bGQgb2JleSB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUuIDwvdHJhbnNsYXRpb24+"
translation['3.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHNob3VsZCBJIHNwZWFrIG9mIEx1Y2l1cy4gQ2lubmE/IHdob3NlIGV4dHJhb3JkaW5hcnkKICAgICAgICAgICAgICAgICAgICBpbnRlZ3JpdHksIHByb3ZlZCB1bmRlciBtYW55IHRyeWluZyBjaXJjdW1zdGFuY2VzLCBtYWtlcyB0aGUgZ2xvcnkgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBhZG1pcmFibGUgY29uZHVjdCBsZXNzIHJlbWFya2FibGU7IGhlIGhhcyBhbHRvZ2V0aGVyIGRpc3JlZ2FyZGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlIGFzc2lnbmVkIHRvIGhpbTsgYW5kIHNvIGhhcyBDYWl1cyBDZXN0aXVzLCBhIG1hbiBvZiBncmVhdCBhbmQgZmlybQogICAgICAgICAgICAgICAgICAgIG1pbmQuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIGFyZSB0aGVyZSBsZWZ0IHRoZW4gdG8gYmUgZGVsaWdodGVkIHdpdGggdGhpcyBoZWF2ZW4tc2VudCBhbGxvdG1lbnQ/IEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGFuZCBNYXJjdXMgQW50b25pdXMhIE8gaGFwcHkgcGFpciEgZm9yIHRoZXJlIGlzIG5vdGhpbmcgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2lzaGVkIGZvciBtb3JlLiBDYWl1cy4gQW50b25pdXMgaGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPi4gSGFwcHksIHRvbywgaXMgaGUhIEZvciBoZSB3YXMgY29uc3RhbnRseSB0YWxraW5nCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhpcyBwcm92aW5jZS4gQ2FpdXMgQ2FsdmlzaXVzIGhhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTI0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4uIE5vdGhpbmcgY291bGQgYmUgbW9yZSBmb3J0dW5hdGUsIGZvciBoZSBoYWQgb25seSBqdXN0CiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTI0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4sIGFuZCwgYXMgaWYgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgZGl2aW5lZCB0aGF0IGhlIHNob3VsZCByZXR1cm4sIGhlIGxlZnQgdHdvIGxpZXV0ZW5hbnRzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE4MTYzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTgxNjMiPlV0aWNhPC9wbGFjZU5hbWU+LiBUaGVuIE1hcmN1cyBJY2NpdXMgaGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwgYW5kIFF1aW50dXMgQ2Fzc2l1cyBTcGFpbi4gSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBrbm93IHdoYXQgdG8gc3VzcGVjdC4gSSBmYW5jeSB0aGUgbG90cyB3aGljaCBhc3NpZ25lZCB0aGVzZSB0d28gcHJvdmluY2VzLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm90IHF1aXRlIHNvIGNhcmVmdWxseSBhdHRlbmRlZCB0byBieSB0aGUgZ29kcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LiBIYXBweSwgdG9vLCBpcyBoZSEgRm9yIGhlIHdhcyBjb25zdGFudGx5IHRhbGtpbmcKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGlzIHByb3ZpbmNlLiBDYWl1cyBDYWx2aXNpdXMgaGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPi4gTm90aGluZyBjb3VsZCBiZSBtb3JlIGZvcnR1bmF0ZSwgZm9yIGhlIGhhZCBvbmx5IGp1c3QKICAgICAgICAgICAgICAgICAgICBkZXBhcnRlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiwgYW5kLCBhcyBpZiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBkaXZpbmVkIHRoYXQgaGUgc2hvdWxkIHJldHVybiwgaGUgbGVmdCB0d28gbGlldXRlbmFudHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTgxNjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxODE2MyI+VXRpY2E8L3BsYWNlTmFtZT4uIFRoZW4gTWFyY3VzIEljY2l1cyBoYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+LCBhbmQgUXVpbnR1cyBDYXNzaXVzIFNwYWluLiBJIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGtub3cgd2hhdCB0byBzdXNwZWN0LiBJIGZhbmN5IHRoZSBsb3RzIHdoaWNoIGFzc2lnbmVkIHRoZXNlIHR3byBwcm92aW5jZXMsIHdlcmUKICAgICAgICAgICAgICAgICAgICBub3QgcXVpdGUgc28gY2FyZWZ1bGx5IGF0dGVuZGVkIHRvIGJ5IHRoZSBnb2RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk8gQ2FpdXMgQ2Flc2FyIChJIGFtIHNwZWFraW5nIG9mIHRoZSB5b3VuZyBtYW4pLCB3aGF0IHNhZmV0eSBoYXZlIHlvdSBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljISBIb3cgdW5mb3Jlc2VlbiBoYXMgaXQgYmVlbiEgaG93IHN1ZGRlbiEgZm9yIGlmIGhlIGRpZCB0aGVzZSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aGVuIGZseWluZywgd2hhdCB3b3VsZCBoZSBoYXZlIGRvbmUgd2hlbiBoZSB3YXMgcHVyc3Vpbmc/IEluIHRydXRoLCBoZSBoYWQgc2FpZAogICAgICAgICAgICAgICAgICAgIGluIGEgaGFyYW5ndWUgdGhhdCBoZSB3b3VsZCBiZSB0aGUgZ3VhcmRpYW4gb2YgdGhlIGNpdHk7IGFuZCB0aGF0IGhlIHdvdWxkIGtlZXAKICAgICAgICAgICAgICAgICAgICBoaXMgYXJteSBhdCB0aGUgZ2F0ZXMgb2YgdGhlIGNpdHkgdGlsbCB0aGUgZmlyc3Qgb2YgTWF5LiBXaGF0IGEgZmluZSBndWFyZGlhbgogICAgICAgICAgICAgICAgICAgIChhcyB0aGUgcHJvdmVyYiBnb2VzKSBpcyB0aGUgd29sZiBvZiB0aGUgc2hlZXAhIFdvdWxkIEFudG9uaXVzIGhhdmUgYmVlbiBhCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW4gb2YgdGhlIGNpdHksIG9yIGl0cyBwbHVuZGVyZXIgYW5kIGRlc3Ryb3llcj8gQW5kIGhlIHNhaWQgdG9vIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBjb21lIGludG8gdGhlIGNpdHkgYW5kIGdvIG91dCBhcyBoZSBwbGVhc2VkLiBXaGF0IG1vcmUgbmVlZCBJIHNheT8gRGlkIGhlCiAgICAgICAgICAgICAgICAgICAgbm90IHNheSwgaW4gdGhlIGhlYXJpbmcgb2YgYWxsIHRoZSBwZW9wbGUsIHdoaWxlIHNpdHRpbmcgaW4gZnJvbnQgb2YgdGhlIHRlbXBsZQogICAgICAgICAgICAgICAgICAgIG9mIENhc3RvciwgdGhhdCBubyBvbmUgc2hvdWxkIHJlbWFpbiBhbGl2ZSBidXQgdGhlIGNvbnF1ZXJvcj8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhpcyBkYXksIE8gY29uc2NyaXB0IGZhdGhlcnMsIGZvciB0aGUgZmlyc3QgdGltZSBhZnRlciBhIGxvbmcgaW50ZXJ2YWwgZG8gd2UKICAgICAgICAgICAgICAgICAgICBwbGFudCBvdXIgZm9vdCBhbmQgdGFrZSBwb3NzZXNzaW9uIG9mIGxpYmVydHkuIExpYmVydHksIG9mIHdoaWNoLCBhcyBsb25nIGFzIEkKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSwgSSB3YXMgbm90IG9ubHkgdGhlIGRlZmVuZGVyLCBidXQgZXZlbiB0aGUgc2F2aW9yLiBCdXQgd2hlbiBJIGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGJlIHNvLCBJIHJlc3RlZDsgYW5kIEkgYm9yZSB0aGUgbWlzZm9ydHVuZXMgYW5kIG1pc2VyeSBvZiB0aGF0IHBlcmlvZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgYWJqZWN0bmVzcywgYW5kIG5vdCB3aXRob3V0IHNvbWUgZGlnbml0eS4gQnV0IGFzIGZvciB0aGlzIG1vc3QgZm91bCBtb25zdGVyLCB3aG8KICAgICAgICAgICAgICAgICAgICBjb3VsZCBlbmR1cmUgaGltLCBvciBob3cgY291bGQgYW55IG9uZSBlbmR1cmUgaGltPyBXaGF0IGlzIHRoZXJlIGluIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGx1c3QsIGFuZCBjcnVlbHR5LCBhbmQgd2FudG9ubmVzcywgYW5kIGF1ZGFjaXR5PyBPZiB0aGVzZSBtYXRlcmlhbHMgaGUgaXMKICAgICAgICAgICAgICAgICAgICB3aG9sbHkgbWFkZSB1cC4gVGhlcmUgaXMgaW4gaGltIG5vdGhpbmcgdmlydHVvdXMsIG5vdGhpbmcgbW9kZXJhdGUsIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBtb2Rlc3QsIG5vdGhpbmcgdmlydHVvdXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXIgaGFzIGNvbWUgdG8gc3VjaCBhIGNyaXNpcyB0aGF0IHRoZSBxdWVzdGlvbiBpcyB3aGV0aGVyIGhlIGlzIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBhdG9uZW1lbnQgdG8gdGhlIHJlcHVibGljIGZvciBoaXMgY3JpbWVzLCBvciB3ZSBhcmUgdG8gYmVjb21lIHNsYXZlcywgbGV0IHVzIGF0CiAgICAgICAgICAgICAgICAgICAgbGFzdCwgSSBiZXNlZWNoIHlvdSwgYnkgdGhlIGltbW9ydGFsIGdvZHMuIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFkb3B0IG91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMnIGNvdXJhZ2UsIGFuZCBvdXIgZmF0aGVycycgdmlydHVlIHNvIGFzIGVpdGhlciB0byByZWNvdmVyIHRoZSBsaWJlcnR5CiAgICAgICAgICAgICAgICAgICAgYmVsb25naW5nIHRvIHRoZSBSb21hbiBuYW1lIGFuZCByYWNlLCBvciBlbHNlIHRvIHByZWZlciBkZWF0aCB0byBzbGF2ZXJ5LiBXZQogICAgICAgICAgICAgICAgICAgIGhhdmUgYm9ybmUgYW5kIGVuZHVyZWQgbWFueSB0aGluZ3Mgd2hpY2ggb3VnaHQgbm90IHRvIGJlIGVuZHVyZWQgaW4gYSBmcmVlIGNpdHk6CiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB1cyBvdXQgb2YgYSBob3BlIG9mIHJlY292ZXJpbmcgb3VyIGZyZWVkb20sIHNvbWUgZnJvbSB0b28gZ3JlYXQgYQogICAgICAgICAgICAgICAgICAgIGZvbmRuZXNzIGZvciBsaWZlLiBCdXQgaWYgd2UgaGF2ZSBzdWJtaXR0ZWQgdG8gdGhlc2UgdGhpbmdzLCB3aGljaCBuZWNlc3NpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgYSBzb3J0IG9mIGZvcmNlciB3aGljaCBtYXkgc2VlbSBhbG1vc3QgdG8gaGF2ZSBiZWVuIHB1dCBvbiB1cyBieSBkZXN0aW55LCBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHVzIHRvIGVuZHVyZTsgdGhvdWdoLCBpbiBwb2ludCBvZiBmYWN0LCB3ZSBoYXZlIG5vdCBlbmR1cmVkIHRoZW07IGFyZQogICAgICAgICAgICAgICAgICAgIHdlIGFsc28gdG8gYmVhciB3aXRoIHRoZSBtb3N0IHNoYW1lZnVsIGFuZCBpbmh1bWFuIHR5cmFubnkgb2YgdGhpcyBwcm9mbGlnYXRlCiAgICAgICAgICAgICAgICAgICAgcm9iYmVyPyA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXIgaGFzIGNvbWUgdG8gc3VjaCBhIGNyaXNpcyB0aGF0IHRoZSBxdWVzdGlvbiBpcyB3aGV0aGVyIGhlIGlzIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBhdG9uZW1lbnQgdG8gdGhlIHJlcHVibGljIGZvciBoaXMgY3JpbWVzLCBvciB3ZSBhcmUgdG8gYmVjb21lIHNsYXZlcywgbGV0IHVzIGF0CiAgICAgICAgICAgICAgICAgICAgbGFzdCwgSSBiZXNlZWNoIHlvdSwgYnkgdGhlIGltbW9ydGFsIGdvZHMuIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFkb3B0IG91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMnIGNvdXJhZ2UsIGFuZCBvdXIgZmF0aGVycycgdmlydHVlIHNvIGFzIGVpdGhlciB0byByZWNvdmVyIHRoZSBsaWJlcnR5CiAgICAgICAgICAgICAgICAgICAgYmVsb25naW5nIHRvIHRoZSBSb21hbiBuYW1lIGFuZCByYWNlLCBvciBlbHNlIHRvIHByZWZlciBkZWF0aCB0byBzbGF2ZXJ5LiBXZQogICAgICAgICAgICAgICAgICAgIGhhdmUgYm9ybmUgYW5kIGVuZHVyZWQgbWFueSB0aGluZ3Mgd2hpY2ggb3VnaHQgbm90IHRvIGJlIGVuZHVyZWQgaW4gYSBmcmVlIGNpdHk6CiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB1cyBvdXQgb2YgYSBob3BlIG9mIHJlY292ZXJpbmcgb3VyIGZyZWVkb20sIHNvbWUgZnJvbSB0b28gZ3JlYXQgYQogICAgICAgICAgICAgICAgICAgIGZvbmRuZXNzIGZvciBsaWZlLiBCdXQgaWYgd2UgaGF2ZSBzdWJtaXR0ZWQgdG8gdGhlc2UgdGhpbmdzLCB3aGljaCBuZWNlc3NpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgYSBzb3J0IG9mIGZvcmNlciB3aGljaCBtYXkgc2VlbSBhbG1vc3QgdG8gaGF2ZSBiZWVuIHB1dCBvbiB1cyBieSBkZXN0aW55LCBoYXZlCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHVzIHRvIGVuZHVyZTsgdGhvdWdoLCBpbiBwb2ludCBvZiBmYWN0LCB3ZSBoYXZlIG5vdCBlbmR1cmVkIHRoZW07IGFyZQogICAgICAgICAgICAgICAgICAgIHdlIGFsc28gdG8gYmVhciB3aXRoIHRoZSBtb3N0IHNoYW1lZnVsIGFuZCBpbmh1bWFuIHR5cmFubnkgb2YgdGhpcyBwcm9mbGlnYXRlCiAgICAgICAgICAgICAgICAgICAgcm9iYmVyPyA8L3RyYW5zbGF0aW9uPg=="
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgd2lsbCBoZSBkbyBpbiBoaXMgcGFzc2lvbiwgaWYgZXZlciBoZSBoYXMgdGhlIHBvd2VyLCB3aG8sIHdoZW4gaGUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgYWJsZSB0byBzaG93IGhpcyBhbmdlciBhZ2FpbnN0IGFueSBvbmUsIGhhcyBiZWVuIHRoZSBlbmVteSBvZiBhbGwgZ29vZCBtZW4/IFdoYXQKICAgICAgICAgICAgICAgICAgICB3aWxsIGhlIG5vdCBkYXJlIHRvIGRvIHdoZW4gdmljdG9yaW91cywgd2hvLCB3aXRob3V0IGhhdmluZyBnYWluZWQgYW55IHZpY3RvcnksCiAgICAgICAgICAgICAgICAgICAgaGFzIGNvbW1pdHRlZCBzdWNoIGNyaW1lcyBhcyB0aGVzZSBzaW5jZSB0aGUgZGVhdGggb2YgQ2Flc2FyPyBoYXMgZW1wdGllZCBoaXMKICAgICAgICAgICAgICAgICAgICB3ZWxsLWZpbGxlZCBob3VzZT8gaGFzIHBpbGxhZ2VkIGhpcyBnYXJkZW5zPyBoYXMgdHJhbnNmZXJyZWQgdG8gaGlzIG93biBtYW5zaW9uCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZWlyIG9ybmFtZW50cz8gaGFzIHNvdWdodCB0byBtYWtlIGhpcyBkZWF0aCBhIHByZXRleHQgZm9yIHNsYXVnaHRlciBhbmQKICAgICAgICAgICAgICAgICAgICBjb25mbGFncmF0aW9uPyB3aG8sIHdoaWxlIGhlIGhhcyBjYXJyaWVkIHR3byBvciB0aHJlZSByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGF2ZSBiZWVuIGFkdmFudGFnZW91cyB0byB0aGUgcmVwdWJsaWMsIGhhcyBtYWRlIGV2ZXJ5IHRoaW5nIGVsc2UKICAgICAgICAgICAgICAgICAgICBzdWJzZXJ2aWVudCB0byBoaXMgb3duIGFjcXVpc2l0aW9uIG9mIGdhaW4gYW5kIHBsdW5kZXI/IHdobyBoYXMgcHV0IHVwCiAgICAgICAgICAgICAgICAgICAgZXhlbXB0aW9ucyBhbmQgYW5udWl0aWVzIHRvIHNhbGU/IHdobyBoYXMgcmVsZWFzZWQgY2l0aWVzIGZyb20gb2JsaWdhdGlvbnM/IHdobwogICAgICAgICAgICAgICAgICAgIGhhcyByZW1vdmVkIHdob2xlIHByb3ZpbmNlcyBmcm9tIHN1YmplY3Rpb24gdG8gdGhlIFJvbWFuIGVtcGlyZT8gd2hvIGhhcwogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIGV4aWxlcz8gd2hvIGhhcyBwYXNzZWQgZm9yZ2VkIGxhd3MgaW4gdGhlIG5hbWUgb2YgQ2Flc2FyLCBhbmQgaGFzCiAgICAgICAgICAgICAgICAgICAgY29udGludWVkIHRvIGhhdmUgZm9yZ2VkIGRlY3JlZXMgZW5ncmF2ZWQgb24gYnJhc3MgYW5kIGZpeGVkIHVwIGluIHRoZSBDYXBpdG9sLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYXMgc2V0IHVwIGluIGhpcyBvd24gaG91c2UgYSBkb21lc3RpYyBtYXJrZXQgZm9yIGFsbCB0aGluZ3Mgb2YgdGhhdCBzb3J0PwogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgaW1wb3NlZCBsYXdzIG9uIHRoZSBSb21hbiBwZW9wbGU/IGFuZCB3aG8sIHdpdGggYXJtZWQgdHJvb3BzIGFuZCBndWFyZHMsCiAgICAgICAgICAgICAgICAgICAgaGFzIGV4Y2x1ZGVkIGJvdGggdGhlIHBlb3BsZSBhbmQgdGhlIG1hZ2lzdHJhdGVzIGZyb20gdGhlIGZvcnVtPyB3aG8gaGFzIGZpbGxlZAogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUgd2l0aCBhcm1lZCBtZW4/IGFuZCBoYXMgaW50cm9kdWNlZCBhcm1lZCBtZW4gaW50byB0aGUgdGVtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgQ29uY29yZCB3aGVuIGhlIHdhcyBob2xkaW5nIGEgc2VuYXRlIHRoZXJlPyB3aG8gcmFuIGRvd24gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IHRvIG1lZXQgdGhlIGxlZ2lvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4gbXVyZGVyZWQgYWxsIHRoZSBjZW50dXJpb25zIGluIHRoZW0gd2hvIHdlcmUgd2VsbCBhZmZlY3RlZCB0byB0aGUgcmVwdWJsaWM/CiAgICAgICAgICAgICAgICAgICAgd2hvIGVuZGVhdm9yZWQgdG8gY29tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2l0aAogICAgICAgICAgICAgICAgICAgIGhpcyBhcm15IHRvIGFjY29tcGxpc2ggb3VyIG1hc3NhY3JlIGFuZCB0aGUgdXR0ZXIgZGVzdHJ1Y3Rpb24gb2YgdGhlIGNpdHk/IDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiB0byBtZWV0IHRoZSBsZWdpb25zLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuIG11cmRlcmVkIGFsbCB0aGUgY2VudHVyaW9ucyBpbiB0aGVtIHdobyB3ZXJlIHdlbGwgYWZmZWN0ZWQgdG8gdGhlIHJlcHVibGljPwogICAgICAgICAgICAgICAgICAgIHdobyBlbmRlYXZvcmVkIHRvIGNvbWUgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgYXJteSB0byBhY2NvbXBsaXNoIG91ciBtYXNzYWNyZSBhbmQgdGhlIHV0dGVyIGRlc3RydWN0aW9uIG9mIHRoZSBjaXR5PyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlLCBub3cgdGhhdCBoZSBoYXMgYmVlbiBwcmV2ZW50ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRpbmcgaW4gdGhpcyBhdHRlbXB0IGJ5IHRoZSB3aXNkb20gYW5kIGZvcmNlcyBvZiBDYWVzYXIsIGFuZCB0aGUgdW5hbmltaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHZldGVyYW5zLCBhbmQgdGhlIHZhbG9yIG9mIHRoZSBsZWdpb25zLCBldmVuIG5vdyB0aGF0IGhpcyBmb3J0dW5lcyBhcmUKICAgICAgICAgICAgICAgICAgICBkZXNwZXJhdGUsIGRvZXMgbm90IGRpbWluaXNoIGhpcyBhdWRhY2l0eSwgbm9yLCBtYWQgdGhhdCBoZSBpcywgZG9lcyBoZSBjZWFzZQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgaW4gaGlzIGhlYWRsb25nIGNhcmVlciBvZiBmdXJ5LiBIZSBpcyBsZWFkaW5nIGhpcyBtdXRpbGF0ZWQgYXJteSBpbnRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyB3aXRoIG9uZSBsZWdpb24sIGFuZCB0aGF0IHRvbwogICAgICAgICAgICAgICAgICAgIHdhdmVyaW5nIGluIGl0cyBmaWRlbGl0eSB0byBoaW0sIGhlIGlzIHdhaXRpbmcgZm9yIGhpcyBicm90aGVyIEx1Y2l1cywgYXMgaGUgY2FuCiAgICAgICAgICAgICAgICAgICAgbm90IGZpbmQgYW55IG9uZSBtb3JlIG5lYXJseSBsaWtlIGhpbXNlbGYgdGhhbiBoaW0uIEJ1dCBub3cgd2hhdCBzbGF1Z2h0ZXIgaXMKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbiwgd2hvIGhhcyB0aHVzIGJlY29tZSBhIGNhcHRhaW4gaW5zdGVhZCBvZiBhIG1hdGFkb3IsIGEgZ2VuZXJhbCBpbnN0ZWFkCiAgICAgICAgICAgICAgICAgICAgb2YgYSBnbGFkaWF0b3IsIG1ha2luZywgd2hlcmV2ZXIgaGUgc2V0cyBoaXMgZm9vdCEgSGUgZGVzdHJveXMgc3RvcmVzLCBoZSBzbGF5cwogICAgICAgICAgICAgICAgICAgIHRoZSBmbG9ja3MgYW5kIGhlcmRzLCBhbmQgYWxsIHRoZSBjYXR0bGUsIHdoZXJldmVyIGhlIGZpbmRzIHRoZW07IGhpcyBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIHJldmVsIGluIHRoZWlyIHNwb2lsOyBhbmQgaGUgaGltc2VsZiwgaW4gb3JkZXIgdG8gaXJyaXRhdGUgaGlzIGJyb3RoZXIsIGRyb3ducwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaW4gd2luZS4gRmllbGRzIGFyZSBsYWlkIHdhc3RlOyB2aWxsYXMgYXJlIHBsdW5kZXJlZDsgbWF0cm9ucywgdmlyZ2lucywKICAgICAgICAgICAgICAgICAgICB3ZWxsLWhvcm4gYm95cyBhcmUgY2FycmllZCBvZmYgYW5kIGdpdmVuIHVwIHRvIHRoZSBzb2xkaWVyeTsgYW5kIE1hcmN1cyBBbnRvbml1cwogICAgICAgICAgICAgICAgICAgIGhhcyBkb25lIGV4YWN0bHkgdGhlIHNhbWUgd2hlcmV2ZXIgaGUgaGFzIGxlZCBoaXMgYXJteS4gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjMyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.12.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlLCBub3cgdGhhdCBoZSBoYXMgYmVlbiBwcmV2ZW50ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRpbmcgaW4gdGhpcyBhdHRlbXB0IGJ5IHRoZSB3aXNkb20gYW5kIGZvcmNlcyBvZiBDYWVzYXIsIGFuZCB0aGUgdW5hbmltaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHZldGVyYW5zLCBhbmQgdGhlIHZhbG9yIG9mIHRoZSBsZWdpb25zLCBldmVuIG5vdyB0aGF0IGhpcyBmb3J0dW5lcyBhcmUKICAgICAgICAgICAgICAgICAgICBkZXNwZXJhdGUsIGRvZXMgbm90IGRpbWluaXNoIGhpcyBhdWRhY2l0eSwgbm9yLCBtYWQgdGhhdCBoZSBpcywgZG9lcyBoZSBjZWFzZQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgaW4gaGlzIGhlYWRsb25nIGNhcmVlciBvZiBmdXJ5LiBIZSBpcyBsZWFkaW5nIGhpcyBtdXRpbGF0ZWQgYXJteSBpbnRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT47IHdpdGggb25lIGxlZ2lvbiwgYW5kIHRoYXQgdG9vCiAgICAgICAgICAgICAgICAgICAgd2F2ZXJpbmcgaW4gaXRzIGZpZGVsaXR5IHRvIGhpbSwgaGUgaXMgd2FpdGluZyBmb3IgaGlzIGJyb3RoZXIgTHVjaXVzLCBhcyBoZSBjYW4KICAgICAgICAgICAgICAgICAgICBub3QgZmluZCBhbnkgb25lIG1vcmUgbmVhcmx5IGxpa2UgaGltc2VsZiB0aGFuIGhpbS4gQnV0IG5vdyB3aGF0IHNsYXVnaHRlciBpcwogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuLCB3aG8gaGFzIHRodXMgYmVjb21lIGEgY2FwdGFpbiBpbnN0ZWFkIG9mIGEgbWF0YWRvciwgYSBnZW5lcmFsIGluc3RlYWQKICAgICAgICAgICAgICAgICAgICBvZiBhIGdsYWRpYXRvciwgbWFraW5nLCB3aGVyZXZlciBoZSBzZXRzIGhpcyBmb290ISBIZSBkZXN0cm95cyBzdG9yZXMsIGhlIHNsYXlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGZsb2NrcyBhbmQgaGVyZHMsIGFuZCBhbGwgdGhlIGNhdHRsZSwgd2hlcmV2ZXIgaGUgZmluZHMgdGhlbTsgaGlzIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgcmV2ZWwgaW4gdGhlaXIgc3BvaWw7IGFuZCBoZSBoaW1zZWxmLCBpbiBvcmRlciB0byBpcnJpdGF0ZSBoaXMgYnJvdGhlciwgZHJvd25zCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBpbiB3aW5lLiBGaWVsZHMgYXJlIGxhaWQgd2FzdGU7IHZpbGxhcyBhcmUgcGx1bmRlcmVkOyBtYXRyb25zLCB2aXJnaW5zLAogICAgICAgICAgICAgICAgICAgIHdlbGwtaG9ybiBib3lzIGFyZSBjYXJyaWVkIG9mZiBhbmQgZ2l2ZW4gdXAgdG8gdGhlIHNvbGRpZXJ5OyBhbmQgTWFyY3VzIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgaGFzIGRvbmUgZXhhY3RseSB0aGUgc2FtZSB3aGVyZXZlciBoZSBoYXMgbGVkIGhpcyBhcm15LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldpbGwgeW91IG9wZW4geW91ciBnYXRlcyB0byB0aGVzZSBtb3N0IGluZmFtb3VzIGJyb3RoZXJzPyB3aWxsIHlvdSBldmVyIGFkbWl0CiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbnRvIHRoZSBjaXR5PyB3aWxsIHlvdSBub3QgcmF0aGVyLCBub3cgdGhhdCB0aGUgb3Bwb3J0dW5pdHkgaXMgb2ZmZXJlZCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgbm93IHRoYXQgeW91IGhhdmUgZ2VuZXJhbHMgcmVhZHksIGFuZCB0aGUgbWluZHMgb2YgdGhlIHNvbGRpZXJzIGVhZ2VyIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBzZXJ2aWNlLCBhbmQgYWxsIHRoZSBSb21hbiBwZW9wbGUgdW5hbmltb3VzOyBhbmQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGV4Y2l0ZWQgd2l0aCB0aGUgZGVzaXJlIHRvIHJlY292ZXIgaXRzCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSzigJR3aWxsIHlvdSBub3QsIEkgc2F5LCBhdmFpbCB5b3Vyc2VsZiBvZiB0aGUga2luZG5lc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWwgZ29kcz8gWW91IHdpbGwgbmV2ZXIgaGF2ZSBhbiBvcHBvcnR1bml0eSBpZiB5b3UgbmVnbGVjdCB0aGlzIG9uZS4gSGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGhlbW1lZCBpbiBpbiB0aGUgcmVhciwgaW4gdGhlIGZyb250LCBhbmQgaW4gZmxhbmssIGlmIGhlIG9uY2UgZW50ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4uIE5vciBtdXN0IGhlIGJlIGF0dGFja2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgYXJtcyBhbG9uZSwgYnV0IGJ5IG91ciBkZWNyZWVzIGFsc28uIE1pZ2h0eSBpcyB0aGUgYXV0aG9yaXR5LCBtaWdodHkgaXMgdGhlIG5hbWUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2VuYXRlIHdoZW4gYWxsIGl0cyBtZW1iZXJzIGFyZSBpbnNwaXJlZCBieSBvbmUgYW5kIHRoZSBzYW1lIHJlc29sdXRpb24uCiAgICAgICAgICAgICAgICAgICAgRG8geW91IG5vdCBzZWUgaG93IHRoZSBmb3J1bSBpcyBjcm93ZGVkPyBob3cgdGhlIFJvbWFuIHBlb3BsZSBpcyBvbiB0aXB0b2Ugd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIG9mIHJlY292ZXJpbmcgaXRzIGxpYmVydHk/IHdoaWNoIG5vdywgYmVob2xkaW5nIHVzLCBhZnRlciBhIGxvbmcKICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCwgbWVldGluZyBoZXJlIGluIG51bWJlcnMsIGhvcGVzIHRvbyB0aGF0IHdlIGFyZSBhbHNvIG1ldCBpbiBmcmVlZG9tLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBleGNpdGVkIHdpdGggdGhlIGRlc2lyZSB0byByZWNvdmVyIGl0cwogICAgICAgICAgICAgICAgICAgIGxpYmVydHks4oCUd2lsbCB5b3Ugbm90LCBJIHNheSwgYXZhaWwgeW91cnNlbGYgb2YgdGhlIGtpbmRuZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsIGdvZHM/IFlvdSB3aWxsIG5ldmVyIGhhdmUgYW4gb3Bwb3J0dW5pdHkgaWYgeW91IG5lZ2xlY3QgdGhpcyBvbmUuIEhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBoZW1tZWQgaW4gaW4gdGhlIHJlYXIsIGluIHRoZSBmcm9udCwgYW5kIGluIGZsYW5rLCBpZiBoZSBvbmNlIGVudGVycwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LiBOb3IgbXVzdCBoZSBiZSBhdHRhY2tlZCBieQogICAgICAgICAgICAgICAgICAgIGFybXMgYWxvbmUsIGJ1dCBieSBvdXIgZGVjcmVlcyBhbHNvLiBNaWdodHkgaXMgdGhlIGF1dGhvcml0eSwgbWlnaHR5IGlzIHRoZSBuYW1lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNlbmF0ZSB3aGVuIGFsbCBpdHMgbWVtYmVycyBhcmUgaW5zcGlyZWQgYnkgb25lIGFuZCB0aGUgc2FtZSByZXNvbHV0aW9uLgogICAgICAgICAgICAgICAgICAgIERvIHlvdSBub3Qgc2VlIGhvdyB0aGUgZm9ydW0gaXMgY3Jvd2RlZD8gaG93IHRoZSBSb21hbiBwZW9wbGUgaXMgb24gdGlwdG9lIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgaG9wZSBvZiByZWNvdmVyaW5nIGl0cyBsaWJlcnR5PyB3aGljaCBub3csIGJlaG9sZGluZyB1cywgYWZ0ZXIgYSBsb25nCiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWwsIG1lZXRpbmcgaGVyZSBpbiBudW1iZXJzLCBob3BlcyB0b28gdGhhdCB3ZSBhcmUgYWxzbyBtZXQgaW4gZnJlZWRvbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXQgd2FzIGluIGV4cGVjdGF0aW9uIG9mIHRoaXMgZGF5IHRoYXQgSSBhdm9pZGVkIHRoZSB3aWNrZWQgYXJteSBvZiBNYXJjdXMuCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIGF0IGEgdGltZSB3aGVuIGhlLCB3aGlsZSBpbnZlaWdoaW5nIGFnYWluc3QgbWUsIHdhcyBub3QgYXdhcmUgZm9yIHdoYXQKICAgICAgICAgICAgICAgICAgICBhbiBvY2Nhc2lvbiBJIHdhcyByZXNlcnZpbmcgbXlzZWxmIGFuZCBteSBzdHJlbmd0aC4gSWYgYXQgdGhhdCB0aW1lIEkgaGFkIGNob3NlbgogICAgICAgICAgICAgICAgICAgIHRvIHJlcGx5IHRvIGhpbSwgd2hpbGUgaGUgd2FzIHNlZWtpbmcgdG8gYmVnaW4gdGhlIG1hc3NhY3JlIHdpdGggbWUsIEkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm9yIG5vdyBiZSBhYmxlIHRvIGNvbnN1bHQgdGhlIHdlbGZhcmUgb2YgdGhlIHJlcHVibGljLiBCdXQgbm93IHRoYXQgSSBoYXZlIHRoaXMKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSwgSSB3aWxsIG5ldmVyLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBuZWl0aGVyIGJ5IGRheSBub3IgYnkgbmlnaHQsCiAgICAgICAgICAgICAgICAgICAgY2Vhc2UgY29uc2lkZXJpbmcgd2hhdCBvdWdodCB0byBiZSB0aG91Z2h0IGNvbmNlcm5pbmcgdGhlIGxpYmVydHkgb2YgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBhbmQgY29uY2VybmluZyB5b3VyIGRpZ25pdHkuIEFuZCB3aGF0ZXZlciBvdWdodCB0byBiZSBwbGFubmVkIG9yIGRvbmUsIEkKICAgICAgICAgICAgICAgICAgICBub3Qgb25seSB3aWxsIG5ldmVyIHNocmluayBmcm9tLCBidXQgSSB3aWxsIG9mZmVyIG15c2VsZiBmb3IsIGFuZCBiZWcgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGVudHJ1c3RlZCB0byBtZS4gVGhpcyBpcyB3aGF0IEkgZGlkIGJlZm9yZSB3aGlsZSBpdCB3YXMgaW4gbXkgcG93ZXI7IHdoZW4gaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm8gbG9uZ2VyIGluIG15IHBvd2VyIHRvIGRvIHNvLCBJIGRpZCBub3RoaW5nLiBCdXQgbm93IGl0IGlzIG5vdCBvbmx5IGluIG15CiAgICAgICAgICAgICAgICAgICAgcG93ZXIsIGJ1dCBpdCBpcyBhYnNvbHV0ZWx5IG5lY2Vzc2FyeSBmb3IgbWUsIHVubGVzcyB3ZSBwcmVmZXIgYmVpbmcgc2xhdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcgd2l0aCBhbGwgb3VyIHN0cmVuZ3RoIGFuZCBjb3VyYWdlIHRvIGF2b2lkIGJlaW5nIHNsYXZlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgaW1tb3J0YWwgZ29kcyBoYXZlIGdpdmVuIHVzIHRoZXNlIHByb3RlY3RvcnMsCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIGZvciB0aGUgY2l0eSwgQnJ1dHVzIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICBGb3IgaWYgaGUgaGFkIGJlZW4gYWJsZSB0byBvcHByZXNzIHRoZSBjaXR5IHdlIG11c3QgaGF2ZSBiZWNvbWUgc2xhdmVzIGF0IG9uY2U7CiAgICAgICAgICAgICAgICAgICAgaWYgaGUgaGFkIGJlZW4gYWJsZSB0byBnZXQgcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgdGhlbiBpdCB3b3VsZCBub3QgaGF2ZSBiZWVuIGxvbmcgYmVmb3JlIGV2ZXJ5IGdvb2QgbWFuCiAgICAgICAgICAgICAgICAgICAgbXVzdCBoYXZlIHBlcmlzaGVkIGFuZCBhbGwgdGhlIHJlc3QgaGF2ZSBiZWVuIGVuc2xhdmVkLiA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGltbW9ydGFsIGdvZHMgaGF2ZSBnaXZlbiB1cyB0aGVzZSBwcm90ZWN0b3JzLAogICAgICAgICAgICAgICAgICAgIENhZXNhciBmb3IgdGhlIGNpdHksIEJydXR1cyBmb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICBGb3IgaWYgaGUgaGFkIGJlZW4gYWJsZSB0byBvcHByZXNzIHRoZSBjaXR5IHdlIG11c3QgaGF2ZSBiZWNvbWUgc2xhdmVzIGF0IG9uY2U7CiAgICAgICAgICAgICAgICAgICAgaWYgaGUgaGFkIGJlZW4gYWJsZSB0byBnZXQgcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCB0aGVuIGl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gbG9uZyBiZWZvcmUgZXZlcnkgZ29vZCBtYW4KICAgICAgICAgICAgICAgICAgICBtdXN0IGhhdmUgcGVyaXNoZWQgYW5kIGFsbCB0aGUgcmVzdCBoYXZlIGJlZW4gZW5zbGF2ZWQuIDwvdHJhbnNsYXRpb24+"
translation['3.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyB0aGVuIHRoYXQgdGhpcyBvcHBvcnR1bml0eSBpcyBhZmZvcmRlZCB0byB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgZW50cmVhdAogICAgICAgICAgICAgICAgICAgIHlvdSBpbiB0aGUgbmFtZSBvZiB0aGUgaW1tb3J0YWwgZ29kcywgc2VpemUgdXBvbiBpdDsgYW5kIHJlY29sbGVjdCBhdCBsYXN0IHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgYXJlIHRoZSBjaGllZiBtZW4gb2YgdGhlIG1vc3QgaG9ub3JhYmxlIGNvdW5jaWwgb24gdGhlIHdob2xlIGZhY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZWFydGguIEdpdmUgYSB0b2tlbiB0byB0aGUgUm9tYW4gcGVvcGxlIHRoYXQgeW91ciB3aXNkb20gc2hhbGwgbm90IGZhaWwgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIHNpbmNlIHRoYXQgdG9vIHByb2Zlc3NlcyB0aGF0IGl0cyB2YWxvciBzaGFsbCBuZXZlciBkZXNlcnQgaXQgZWl0aGVyLgogICAgICAgICAgICAgICAgICAgIFRoZXJlIGlzIG5vIG5lZWQgZm9yIG15IHdhcm5pbmcgeW91OiB0aGVyZSBpcyBubyBvbmUgc28gZm9vbGlzaCBhcyBub3QgdG8KICAgICAgICAgICAgICAgICAgICBwZXJjZWl2ZSB0aGF0IGlmIHdlIGdvIHRvIHNsZWVwIG92ZXIgdGhpcyBvcHBvcnR1bml0eSB3ZSBzaGFsbCBoYXZlIHRvIGVuZHVyZSBhCiAgICAgICAgICAgICAgICAgICAgdHlyYW5ueSB3aGljaCB3aWxsIGJlIG5vdCBvbmx5IGNydWVsIGFuZCBoYXVnaHR5LCBidXQgYWxzbyBpZ25vbWluaW91cyBhbmQKICAgICAgICAgICAgICAgICAgICBmbGFnaXRpb3VzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9InNlY3Rpb24iIC8+IFlvdSBrbm93IHRoZSBpbnNvbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBBbnRvbml1czsgeW91IGtub3cgaGlzIGZyaWVuZHMsIHlvdSBrbm93IGhpcyB3aG9sZSBob3VzZWhvbGQuIFRvIGJlIHNsYXZlcyB0bwogICAgICAgICAgICAgICAgICAgIGx1c3RmdWwsIHdhbnRvbiwgZGViYXVjaGVkLCBwcm9mbGlnYXRlLCBkcnVua2VuIGdhbWJsZXJzLCBpcyB0aGUgZXh0cmVtaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgbWlzZXJ5IGNvbWJpbmVkIHdpdGggdGhlIGV4dHJlbWl0eSBvZiBpbmZhbXkuIEFuZCBpZiBub3cgKGJ1dCBtYXkgdGhlIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcyBhdmVydCB0aGUgb21lbiEpIHRoYXQgd29yc3Qgb2YgZmF0ZXMgc2hhbGwgYmVmYWxsIHRoZSByZXB1YmxpYywgdGhlbiwgYXMKICAgICAgICAgICAgICAgICAgICBicmF2ZSBnbGFkaWF0b3JzIHRha2UgY2FyZSB0byBwZXJpc2ggd2l0aCBob25vciwgbGV0IHVzIHRvbywgd2hvIGFyZSB0aGUgY2hpZWYKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgYWxsIGNvdW50cmllcyBhbmQgbmF0aW9ucywgdGFrZSBjYXJlIHRvIGZhbGwgd2l0aCBkaWduaXR5IHJhdGhlciB0aGFuIHRvCiAgICAgICAgICAgICAgICAgICAgbGl2ZSBhcyBzbGF2ZXMgd2l0aCBpZ25vbWlueS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IGtub3cgdGhlIGluc29sZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzOyB5b3Uga25vdyBoaXMgZnJpZW5kcywgeW91IGtub3cgaGlzIHdob2xlIGhvdXNlaG9sZC4gVG8gYmUgc2xhdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgbHVzdGZ1bCwgd2FudG9uLCBkZWJhdWNoZWQsIHByb2ZsaWdhdGUsIGRydW5rZW4gZ2FtYmxlcnMsIGlzIHRoZSBleHRyZW1pdHkgb2YKICAgICAgICAgICAgICAgICAgICBtaXNlcnkgY29tYmluZWQgd2l0aCB0aGUgZXh0cmVtaXR5IG9mIGluZmFteS4gQW5kIGlmIG5vdyAoYnV0IG1heSB0aGUgaW1tb3J0YWwKICAgICAgICAgICAgICAgICAgICBnb2RzIGF2ZXJ0IHRoZSBvbWVuISkgdGhhdCB3b3JzdCBvZiBmYXRlcyBzaGFsbCBiZWZhbGwgdGhlIHJlcHVibGljLCB0aGVuLCBhcwogICAgICAgICAgICAgICAgICAgIGJyYXZlIGdsYWRpYXRvcnMgdGFrZSBjYXJlIHRvIHBlcmlzaCB3aXRoIGhvbm9yLCBsZXQgdXMgdG9vLCB3aG8gYXJlIHRoZSBjaGllZgogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBhbGwgY291bnRyaWVzIGFuZCBuYXRpb25zLCB0YWtlIGNhcmUgdG8gZmFsbCB3aXRoIGRpZ25pdHkgcmF0aGVyIHRoYW4gdG8KICAgICAgICAgICAgICAgICAgICBsaXZlIGFzIHNsYXZlcyB3aXRoIGlnbm9taW55LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgbm90aGluZyBtb3JlIGRldGVzdGFibGUgdGhhbgogICAgICAgICAgICAgICAgICAgIGRpc2dyYWNlOyBub3RoaW5nIG1vcmUgc2hhbWVmdWwgdGhhbiBzbGF2ZXJ5LiBXZSBoYXZlIGJlZW4gYm9ybiB0byBnbG9yeSBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBsaWJlcnR5OyBsZXQgdXMgZWl0aGVyIHByZXNlcnZlIHRoZW0gb3IgZGllIHdpdGggZGlnbml0eS4gVG9vIGxvbmcgaGF2ZSB3ZQogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxlZCB3aGF0IHdlIGhhdmUgZmVsdDogbm93IGF0IGxlbmd0aCBpdCBpcyByZXZlYWxlZDogZXZlcnkgb25lIGhhcyBwbGFpbmx5CiAgICAgICAgICAgICAgICAgICAgc2hvd24gd2hhdCBhcmUgaGlzIGZlZWxpbmdzIHRvIGJvdGggc2lkZXMsIGFuZCB3aGF0IGFyZSBoaXMgaW5jbGluYXRpb25zLiBUaGVyZQogICAgICAgICAgICAgICAgICAgIGFyZSBpbXBpb3VzIGNpdGl6ZW5zLCBtZWFzdXJlZCBieSB0aGUgbG92ZSBJIGJlYXIgbXkgY291bnRyeSwgdG9vIG1hbnk7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb24gdG8gdGhlIG11bHRpdHVkZSBvZiB3ZWxsLWFmZmVjdGVkIG9uZXMsIHZlcnkgZmV3OyBhbmQgdGhlIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcyBoYXZlIGdpdmVuIHRoZSByZXB1YmxpYyBhbiBpbmNyZWRpYmxlIG9wcG9ydHVuaXR5IGFuZCBjaGFuY2UgZm9yIGRlc3Ryb3lpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtLiBGb3IsIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZlbnNlcyB3aGljaCB3ZSBhbHJlYWR5IGhhdmUsIHRoZXJlIHdpbGwgc29vbiBiZQogICAgICAgICAgICAgICAgICAgIGFkZGVkIGNvbnN1bHMgb2YgY29uc3VtbWF0ZSBwcnVkZW5jZSwgYW5kIHZpcnR1ZSwgYW5kIGNvbmNvcmQsIHdobyBoYXZlIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRlZCBhbmQgcG9uZGVyZWQgZm9yIG1hbnkgbW9udGhzIG9uIHRoZSBmcmVlZG9tIG9mIHRoZSBSb21hbiBwZW9wbGUuCiAgICAgICAgICAgICAgICAgICAgV2l0aCB0aGVzZSBtZW4gZm9yIG91ciBhZHZpc2VycyBhbmQgbGVhZGVycywgd2l0aCB0aGUgZ29kcyBhc3Npc3RpbmcgdXMsIHdpdGgKICAgICAgICAgICAgICAgICAgICBvdXJzZWx2ZXMgdXNpbmcgYWxsIHZpZ2lsYW5jZSBhbmQgdGFraW5nIGdyZWF0IHByZWNhdXRpb25zIGZvciB0aGUgZnV0dXJlLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBSb21hbiBwZW9wbGUgYWN0aW5nIHdpdGggdW5hbmltaXR5LCB3ZSBzaGFsbCBpbmRlZWQgYmUgZnJlZSBpbiBhIHNob3J0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgYW5kIHRoZSByZWNvbGxlY3Rpb24gb2Ygb3VyIHByZXNlbnQgc2xhdmVyeSB3aWxsIG1ha2UgbGliZXJ0eSBzd2VldGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgbm90aGluZyBtb3JlIGRldGVzdGFibGUgdGhhbgogICAgICAgICAgICAgICAgICAgIGRpc2dyYWNlOyBub3RoaW5nIG1vcmUgc2hhbWVmdWwgdGhhbiBzbGF2ZXJ5LiBXZSBoYXZlIGJlZW4gYm9ybiB0byBnbG9yeSBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBsaWJlcnR5OyBsZXQgdXMgZWl0aGVyIHByZXNlcnZlIHRoZW0gb3IgZGllIHdpdGggZGlnbml0eS4gVG9vIGxvbmcgaGF2ZSB3ZQogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxlZCB3aGF0IHdlIGhhdmUgZmVsdDogbm93IGF0IGxlbmd0aCBpdCBpcyByZXZlYWxlZDogZXZlcnkgb25lIGhhcyBwbGFpbmx5CiAgICAgICAgICAgICAgICAgICAgc2hvd24gd2hhdCBhcmUgaGlzIGZlZWxpbmdzIHRvIGJvdGggc2lkZXMsIGFuZCB3aGF0IGFyZSBoaXMgaW5jbGluYXRpb25zLiBUaGVyZQogICAgICAgICAgICAgICAgICAgIGFyZSBpbXBpb3VzIGNpdGl6ZW5zLCBtZWFzdXJlZCBieSB0aGUgbG92ZSBJIGJlYXIgbXkgY291bnRyeSwgdG9vIG1hbnk7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb24gdG8gdGhlIG11bHRpdHVkZSBvZiB3ZWxsLWFmZmVjdGVkIG9uZXMsIHZlcnkgZmV3OyBhbmQgdGhlIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcyBoYXZlIGdpdmVuIHRoZSByZXB1YmxpYyBhbiBpbmNyZWRpYmxlIG9wcG9ydHVuaXR5IGFuZCBjaGFuY2UgZm9yIGRlc3Ryb3lpbmcKICAgICAgICAgICAgICAgICAgICB0aGVtLiBGb3IsIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZlbnNlcyB3aGljaCB3ZSBhbHJlYWR5IGhhdmUsIHRoZXJlIHdpbGwgc29vbiBiZQogICAgICAgICAgICAgICAgICAgIGFkZGVkIGNvbnN1bHMgb2YgY29uc3VtbWF0ZSBwcnVkZW5jZSwgYW5kIHZpcnR1ZSwgYW5kIGNvbmNvcmQsIHdobyBoYXZlIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBkZWxpYmVyYXRlZCBhbmQgcG9uZGVyZWQgZm9yIG1hbnkgbW9udGhzIG9uIHRoZSBmcmVlZG9tIG9mIHRoZSBSb21hbiBwZW9wbGUuCiAgICAgICAgICAgICAgICAgICAgV2l0aCB0aGVzZSBtZW4gZm9yIG91ciBhZHZpc2VycyBhbmQgbGVhZGVycywgd2l0aCB0aGUgZ29kcyBhc3Npc3RpbmcgdXMsIHdpdGgKICAgICAgICAgICAgICAgICAgICBvdXJzZWx2ZXMgdXNpbmcgYWxsIHZpZ2lsYW5jZSBhbmQgdGFraW5nIGdyZWF0IHByZWNhdXRpb25zIGZvciB0aGUgZnV0dXJlLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBSb21hbiBwZW9wbGUgYWN0aW5nIHdpdGggdW5hbmltaXR5LCB3ZSBzaGFsbCBpbmRlZWQgYmUgZnJlZSBpbiBhIHNob3J0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgYW5kIHRoZSByZWNvbGxlY3Rpb24gb2Ygb3VyIHByZXNlbnQgc2xhdmVyeSB3aWxsIG1ha2UgbGliZXJ0eSBzd2VldGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.15.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk1vdmVkIGJ5IHRoZXNlIGNvbnNpZGVyYXRpb25zLCBzaW5jZSB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSBoYXZlIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIGEgbW90aW9uIHRvIGluc3VyZSB0aGF0IHRoZSBzZW5hdGUgc2hhbGwgYmUgYWJsZSB0byBtZWV0IGluIHNhZmV0eSBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCBhbmQgdGhhdCB3ZSBtYXkgYmUgYWJsZSB0byBkZWxpdmVyIG91ciBzZW50aW1lbnRzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgd2VsZmFyZSBvZiB0aGUgc3RhdGUgd2l0aCBmcmVlZG9tLCBJIGdpdmUgbXkgdm90ZSB0aGF0IENhaXVzIFBhbnNhIGFuZAogICAgICAgICAgICAgICAgICAgIEF1bHVzIEhpcnRpdXMsIHRoZSBjb25zdWxzIGVsZWN0LCBkbyB0YWtlIGNhcmUgdGhhdCB0aGUgc2VuYXRlIGJlIGVuYWJsZWQgdG8KICAgICAgICAgICAgICAgICAgICBtZWV0IGluIHNhZmV0eSBvbiB0aGUgZmlyc3Qgb2YgSmFudWFyeTsgYW5kLCBhcyBhbiBlZGljdCBoYXMgYmVlbiBwdWJsaXNoZWQgYnkKICAgICAgICAgICAgICAgICAgICBEZWNpbXVzIEJydXR1cywgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiBhbmQgY29uc3VsIGVsZWN0LCBJIHZvdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBzZW5hdGUgdGhpbmtzIHRoYXQgRGVjaW11cyBCcnV0dXMsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4gYW5kIGNvbnN1bCwgZGVzZXJ2ZXMgZXhjZWxsZW50bHkgd2VsbCBvZiB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgaW5hc211Y2ggYXMgaGUgaXMgdXBob2xkaW5nIHRoZSBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSwgYW5kIHRoZSBmcmVlZG9tIGFuZAogICAgICAgICAgICAgICAgICAgIGVtcGlyZSBvZiB0aGUgUm9tYW4gcGVvcGxlOyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+IGFuZCBhcyBoZSBpcyBhbHNvCiAgICAgICAgICAgICAgICAgICAgcmV0YWluaW5nIHRoZSBwcm92aW5jZSBvZiBHYWxsaWEgQ2l0ZXJpb3IsIGEgcHJvdmluY2UgZnVsbCBvZiBtb3N0IHZpcnR1b3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGJyYXZlIG1lbiwgYW5kIG9mIGNpdGl6ZW5zIG1vc3QgZGV2b3RlZCB0byB0aGUgcmVwdWJsaWMsIGFuZCBoaXMgYXJteSwgaW4KICAgICAgICAgICAgICAgICAgICBvYmVkaWVuY2UgdG8gdGhlIHNlbmF0ZSwgSSB2b3RlIHRoYXQgdGhlIHNlbmF0ZSBqdWRnZXMgdGhhdCBoZSwgYW5kIGhpcyBhcm15LAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbXVuaWNpcGFsaXRpZXMgYW5kIGNvbG9uaWVzIG9mIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgaGF2ZSBhY3RlZCBhbmQgYXJlIGFjdGluZyBwcm9wZXJseSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVndWxhcmx5LCBhbmQgaW4gYSBtYW5uZXIgYWR2YW50YWdlb3VzIHRvIHRoZSByZXB1YmxpYy4gQW5kIHRoZSBzZW5hdGUgdGhpbmtzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCB3aWxsIGJlIGZvciB0aGUgZ2VuZXJhbCBpbnRlcmVzdHMgb2YgdGhlIHJlcHVibGljIHRoYXQgdGhlIHByb3ZpbmNlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFyZSBhdCBwcmVzZW50IG9jY3VwaWVkIGJ5IERlY2ltdXMgQnJ1dHVzIGFuZCBieSBMdWNpdXMgUGxhbmN1cywgYm90aAogICAgICAgICAgICAgICAgICAgIGltcGVyYXRvcnMsIGFuZCBjb25zdWxzIGVsZWN0LCBhbmQgYWxzbyBieSB0aGUgb2ZmaWNlcnMgd2hvIGFyZSBpbiBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2VzLCBzaGFsbCBjb250aW51ZSB0byBiZSBoZWxkIGJ5IHRoZW0gaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBwcm92aXNpb25zCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIEp1bGlhbiBsYXcsIHVudGlsIGVhY2ggb2YgdGhlc2Ugb2ZmaWNlcnMgaGFzIGEgc3VjY2Vzc29yIGFwcG9pbnRlZCBieSBhCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlOyBhbmQgdGhhdCB0aGV5IHNoYWxsIHRha2UgY2FyZSB0byBtYWludGFpbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlcyBhbmQgYXJtaWVzIGluIG9iZWRpZW5jZSB0byB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYW5kIGFzIGEgZGVmZW5zZSB0byB0aGUgcmVwdWJsaWMuIEFuZAogICAgICAgICAgICAgICAgICAgIHNpbmNlLCBieSB0aGUgZXhlcnRpb25zIGFuZCB2YWxvciBhbmQgd2lzZG9tIG9mIENhaXVzIENhZXNhciwgYW5kIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGFkbWlyYWJsZSB1bmFuaW1pdHkgb2YgdGhlIHZldGVyYW4gc29sZGllcnMsIHdobywgb2JleWluZyBoaXMgYXV0aG9yaXR5LCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhbmQgYXJlIGEgcHJvdGVjdGlvbiB0byB0aGUgcmVwdWJsaWMsIHRoZSBSb21hbiBwZW9wbGUgaGFzIGJlZW4gZGVmZW5kZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGlzIGF0IHRoaXMgcHJlc2VudCB0aW1lIGJlaW5nIGRlZmVuZGVkLCBmcm9tIHRoZSBtb3N0IHNlcmlvdXMgZGFuZ2Vycy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFzIHRoZSBNYXJ0aWFsIGxlZ2lvbiBoYXMgZW5jYW1wZWQgYXQKICAgICAgICAgICAgICAgICAgICBBbGJhLCBpbiBhIG11bmljaXBhbCB0b3duIG9mIHRoZSBncmVhdGVzdCBsb3lhbHR5IGFuZCBjb3VyYWdlLCBhbmQgaGFzIGRldm90ZWQKICAgICAgICAgICAgICAgICAgICBpdHNlbGYgdG8gdGhlIHN1cHBvcnQgb2YgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCBhbmQgb2YgdGhlIGZyZWVkb20gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgUm9tYW4gcGVvcGxlOyBhbmQgYXMgdGhlIGZvdXJ0aCBsZWdpb24sIGJlaGF2aW5nIHdpdGggZXF1YWwgd2lzZG9tIGFuZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdmlydHVlLCB1bmRlciB0aGUgY29tbWFuZCBvZiBMdWNpdXMgRWduYXR1bGVpdXMgdGhlIHF1YWVzdG9yLCBhbgogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIGNpdGl6ZW4sIGhhcyBkZWZlbmRlZCBhbmQgaXMgc3RpbGwgZGVmZW5kaW5nIHRoZSBhdXRob3JpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIGFuZCB0aGUgZnJlZWRvbSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBJIGdpdmUgbXkgdm90ZSwgVGhhdCBpdCBpcyBhbmQgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBhbiBvYmplY3Qgb2YgYW54aW91cyBjYXJlIHRvIHRoZSBzZW5hdGUgdG8gcGF5IGR1ZSBob25vciBhbmQgdG8gc2hvdyBkdWUKICAgICAgICAgICAgICAgICAgICBncmF0aXR1ZGUgdG8gdGhlbSBmb3IgdGhlaXIgZXhjZWVkaW5nIHNlcnZpY2VzIHRvIHRoZSByZXB1YmxpYzogYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIGhlcmVieSBvcmRlcnMgdGhhdCB3aGVuIENhaXVzIFBhbnNhIGFuZCBBdWx1cyBIaXJ0aXVzLCB0aGUgY29uc3VscyBlbGVjdCwKICAgICAgICAgICAgICAgICAgICBoYXZlIGVudGVyZWQgb24gdGhlaXIgb2ZmaWNlLCB0aGV5IHRha2UgdGhlIGVhcmxpZXN0IG9wcG9ydHVuaXR5IG9mIGNvbnN1bHRpbmcKICAgICAgICAgICAgICAgICAgICB0aGlzIGJvZHkgb24gdGhlc2UgbWF0dGVycywgYXMgc2hhbGwgc2VlbSB0byB0aGVtIGV4cGVkaWVudCBmb3IgdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIGFuZCB3b3J0aHkgb2YgdGhlaXIgb3duIGludGVncml0eSwgYW5kIGxveWFsdHkuPC9wPgoJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+IGFuZCBjb25zdWwgZWxlY3QsIEkgdm90ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHNlbmF0ZSB0aGlua3MgdGhhdCBEZWNpbXVzIEJydXR1cywgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiBhbmQgY29uc3VsLCBkZXNlcnZlcyBleGNlbGxlbnRseSB3ZWxsIG9mIHRoZSByZXB1YmxpYywKICAgICAgICAgICAgICAgICAgICBpbmFzbXVjaCBhcyBoZSBpcyB1cGhvbGRpbmcgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCBhbmQgdGhlIGZyZWVkb20gYW5kCiAgICAgICAgICAgICAgICAgICAgZW1waXJlIG9mIHRoZSBSb21hbiBwZW9wbGU7IDwvdHJhbnNsYXRpb24+"
translation['3.15.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIGFzIGhlIGlzIGFsc28KICAgICAgICAgICAgICAgICAgICByZXRhaW5pbmcgdGhlIHByb3ZpbmNlIG9mIEdhbGxpYSBDaXRlcmlvciwgYSBwcm92aW5jZSBmdWxsIG9mIG1vc3QgdmlydHVvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJhdmUgbWVuLCBhbmQgb2YgY2l0aXplbnMgbW9zdCBkZXZvdGVkIHRvIHRoZSByZXB1YmxpYywgYW5kIGhpcyBhcm15LCBpbgogICAgICAgICAgICAgICAgICAgIG9iZWRpZW5jZSB0byB0aGUgc2VuYXRlLCBJIHZvdGUgdGhhdCB0aGUgc2VuYXRlIGp1ZGdlcyB0aGF0IGhlLCBhbmQgaGlzIGFybXksCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtdW5pY2lwYWxpdGllcyBhbmQgY29sb25pZXMgb2YgdGhlIHByb3ZpbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIGhhdmUgYWN0ZWQgYW5kIGFyZSBhY3RpbmcgcHJvcGVybHksIGFuZAogICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJseSwgYW5kIGluIGEgbWFubmVyIGFkdmFudGFnZW91cyB0byB0aGUgcmVwdWJsaWMuIEFuZCB0aGUgc2VuYXRlIHRoaW5rcwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2lsbCBiZSBmb3IgdGhlIGdlbmVyYWwgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYyB0aGF0IHRoZSBwcm92aW5jZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCBhcmUgYXQgcHJlc2VudCBvY2N1cGllZCBieSBEZWNpbXVzIEJydXR1cyBhbmQgYnkgTHVjaXVzIFBsYW5jdXMsIGJvdGgKICAgICAgICAgICAgICAgICAgICBpbXBlcmF0b3JzLCBhbmQgY29uc3VscyBlbGVjdCwgYW5kIGFsc28gYnkgdGhlIG9mZmljZXJzIHdobyBhcmUgaW4gY29tbWFuZCBvZgogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlcywgc2hhbGwgY29udGludWUgdG8gYmUgaGVsZCBieSB0aGVtIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBKdWxpYW4gbGF3LCB1bnRpbCBlYWNoIG9mIHRoZXNlIG9mZmljZXJzIGhhcyBhIHN1Y2Nlc3NvciBhcHBvaW50ZWQgYnkgYQogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZTsgYW5kIHRoYXQgdGhleSBzaGFsbCB0YWtlIGNhcmUgdG8gbWFpbnRhaW4gdGhvc2UKICAgICAgICAgICAgICAgICAgICBwcm92aW5jZXMgYW5kIGFybWllcyBpbiBvYmVkaWVuY2UgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYW5kIGFzIGEgZGVmZW5zZSB0byB0aGUgcmVwdWJsaWMuIEFuZAogICAgICAgICAgICAgICAgICAgIHNpbmNlLCBieSB0aGUgZXhlcnRpb25zIGFuZCB2YWxvciBhbmQgd2lzZG9tIG9mIENhaXVzIENhZXNhciwgYW5kIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGFkbWlyYWJsZSB1bmFuaW1pdHkgb2YgdGhlIHZldGVyYW4gc29sZGllcnMsIHdobywgb2JleWluZyBoaXMgYXV0aG9yaXR5LCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhbmQgYXJlIGEgcHJvdGVjdGlvbiB0byB0aGUgcmVwdWJsaWMsIHRoZSBSb21hbiBwZW9wbGUgaGFzIGJlZW4gZGVmZW5kZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGlzIGF0IHRoaXMgcHJlc2VudCB0aW1lIGJlaW5nIGRlZmVuZGVkLCBmcm9tIHRoZSBtb3N0IHNlcmlvdXMgZGFuZ2Vycy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.15.39'] = ""
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgZ3JlYXQgbnVtYmVycyBpbiB3aGljaCB5b3UgYXJlIGhlcmUgbWV0IHRoaXMgZGF5LCBPIFJvbWFucywgYW5kIHRoaXMKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSwgZ3JlYXRlciB0aGFuLCBpdCBzZWVtcyB0byBtZSwgSSBldmVyIHJlbWVtYmVyLCBpbnNwaXJlcyBtZSB3aXRoIGJvdGgKICAgICAgICAgICAgICAgICAgICBhbiBleGNlZWRpbmcgZWFnZXJuZXNzIHRvIGRlZmVuZCB0aGUgcmVwdWJsaWMsIGFuZCB3aXRoIGEgZ3JlYXQgaG9wZSBvZgogICAgICAgICAgICAgICAgICAgIHJlZXN0YWJsaXNoaW5nIGl0LiBBbHRob3VnaCBteSBjb3VyYWdlIGluZGVlZCBoYXMgbmV2ZXIgZmFpbGVkOyB3aGF0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgdW5mYXZvcmFibGUgaXMgdGhlIHRpbWU7IGFuZCB0aGUgbW9tZW50IHRoYXQgdGhhdCBoYXMgYXBwZWFyZWQgdG8gc2hvdyBhbnkgZGF3bgogICAgICAgICAgICAgICAgICAgIG9mIGxpZ2h0LCBJIGF0IG9uY2UgaGF2ZSBiZWVuIHRoZSBsZWFkZXIgaW4gdGhlIGRlZmVuc2Ugb2YgeW91ciBsaWJlcnR5LiBBbmQgaWYKICAgICAgICAgICAgICAgICAgICBJIGhhZCBhdHRlbXB0ZWQgdG8gaGF2ZSBkb25lIHNvIGJlZm9yZSwgSSBzaG91bGQgbm90IGJlIGFibGUgdG8gZG8gc28gbm93LiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGlzIGRheSwgTyBSb21hbnMgKHRoYXQgeW91IG1heSBub3QgdGhpbmsgaXQgaXMgYnV0IGEgdHJpZmxpbmcgYnVzaW5lc3MgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZSBoYXZlIGJlZW4gZW5nYWdlZCksIHRoZSBmb3VuZGF0aW9ucyBoYXZlIGJlZW4gbGFpZCBmb3IgZnV0dXJlIGFjdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBzZW5hdGUgaGFzIG5vIGxvbmdlciBiZWVuIGNvbnRlbnQgd2l0aCBzdHlsaW5nIEFudG9uaXVzIGFuIGVuZW15IGluCiAgICAgICAgICAgICAgICAgICAgd29yZHMsIGJ1dCBpdCBoYXMgc2hvd24gYnkgYWN0aW9ucyB0aGF0IGl0IHRoaW5rcyBoaW0gb25lLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdyBJIGFtIG11Y2ggbW9yZSBlbGF0ZWQgc3RpbGwsIGJlY2F1c2UgeW91IHRvbyB3aXRoCiAgICAgICAgICAgICAgICAgICAgc3VjaCBncmVhdCB1bmFuaW1pdHkgYW5kIHdpdGggc3VjaCBhIGNsYW1vciBoYXZlIHNhbmN0aW9uZWQgb3VyIGRlY2xhcmF0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyBhbiBlbmVteS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgbm93IEkgYW0gbXVjaCBtb3JlIGVsYXRlZCBzdGlsbCwgYmVjYXVzZSB5b3UgdG9vIHdpdGgKICAgICAgICAgICAgICAgICAgICBzdWNoIGdyZWF0IHVuYW5pbWl0eSBhbmQgd2l0aCBzdWNoIGEgY2xhbW9yIGhhdmUgc2FuY3Rpb25lZCBvdXIgZGVjbGFyYXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGlzIGFuIGVuZW15LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBpbmRlZWQsIE8gUm9tYW5zLCBpdCBpcyBpbXBvc3NpYmxlIGJ1dCB0aGF0IGVpdGhlciB0aGUgbWVuIG11c3QgYmUgaW1waW91cwogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGxldmllZCBhcm1pZXMgYWdhaW5zdCB0aGUgY29uc3VsLCBvciBlbHNlIHRoYXQgaGUgbXVzdCBiZSBhbiBlbmVteQogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgd2hvbSB0aGV5IGhhdmUgcmlnaHRseSB0YWtlbiBhcm1zLiBBbmQgdGhpcyBkb3VidCB0aGUgc2VuYXRlIGhhcyB0aGlzCiAgICAgICAgICAgICAgICAgICAgZGF5IHJlbW92ZWTigJRub3QgaW5kZWVkIHRoYXQgdGhlcmUgcmVhbGx5IHdhcyBhbnk7IGJ1dCBpdCBoYXMgcHJldmVudGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZXJlIGJlaW5nIGFueS4gQ2FpdXMgQ2Flc2FyLCB3aG8gaGFzIHVwaGVsZCBhbmQgd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgdXBob2xkaW5nIHRoZSByZXB1YmxpYyBhbmQgeW91ciBmcmVlZG9tIGJ5IGhpcyB6ZWFsIGFuZCB3aXNkb20sIGFuZCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBleHBlbnNlIG9mIGhpcyBwYXRyaW1vbmlhbCBlc3RhdGUsIGhhcyBiZWVuIGNvbXBsaW1lbnRlZCB3aXRoIHRoZSBoaWdoZXN0CiAgICAgICAgICAgICAgICAgICAgcHJhaXNlcyBvZiB0aGUgc2VuYXRlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBwcmFpc2UgeW91LOKAlHllcywgSSBwcmFpc2UgeW91IGdyZWF0bHksIE8gUm9tYW5zLCB3aGVuIHlvdSBmb2xsb3cgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGdyYXRlZnVsIG1pbmRzIHRoZSBuYW1lIG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyB5b3V0aCwgb3IgcmF0aGVyIGJveTsKICAgICAgICAgICAgICAgICAgICBmb3IgaGlzIGFjdGlvbnMgYmVsb25nIHRvIGltbW9ydGFsaXR5LCB0aGUgbmFtZSBvZiB5b3V0aCBvbmx5IHRvIGhpcyBhZ2UuIEkgY2FuCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0IG1hbnkgdGhpbmdzOyBJIGhhdmUgaGVhcmQgb2YgbWFueSB0aGluZ3M7IEkgaGF2ZSByZWFkIG9mIG1hbnkgdGhpbmdzOwogICAgICAgICAgICAgICAgICAgIGJ1dCBpbiB0aGUgd2hvbGUgaGlzdG9yeSBvZiB0aGUgd2hvbGUgd29ybGQgSSBoYXZlIG5ldmVyIGtub3duIGFueSB0aGluZyBsaWtlCiAgICAgICAgICAgICAgICAgICAgdGhpcy4gRm9yLCB3aGVuIHdlIHdlcmUgd2VpZ2hlZCBkb3duIHdpdGggc2xhdmVyeSwgd2hlbiB0aGUgZXZpbCB3YXMgZGFpbHkKICAgICAgICAgICAgICAgICAgICBpbmNyZWFzaW5nLCB3aGVuIHdlIGhhZCBubyBkZWZlbnNlLCB3aGlsZSB3ZSB3ZXJlIGluIGRyZWFkIG9mIHRoZSBwZXJuaWNpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGZhdGFsIHJldHVybiBvZiBNYXJjdXMgQW50b25pdXMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4sIHRoaXMgeW91bmcgbWFuIGFkb3B0ZWQgdGhlIGRlc2lnbiB3aGljaCBub25lIG9mIHVzCiAgICAgICAgICAgICAgICAgICAgaGFkIHZlbnR1cmVkIHRvIGhvcGUgZm9yLCB3aGljaCBiZXlvbmQgYWxsIHF1ZXN0aW9uIG5vbmUgb2YgdXMgd2VyZSBhY3F1YWludGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCwgb2YgcmFpc2luZyBhbiBpbnZpbmNpYmxlIGFybXkgb2YgaGlzIGZhdGhlcidzIHNvbGRpZXJzLCBhbmQgc28gaGluZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGZyZW56eSBvZiBBbnRvbml1cywgc3B1cnJlZCBvbiBhcyBpdCB3YXMgYnkgdGhlIG1vc3QgaW5odW1hbiBjb3Vuc2VscywgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciBvZiBkb2luZyBtaXNjaGllZiB0byB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4sIHRoaXMgeW91bmcgbWFuIGFkb3B0ZWQgdGhlIGRlc2lnbiB3aGljaCBub25lIG9mIHVzCiAgICAgICAgICAgICAgICAgICAgaGFkIHZlbnR1cmVkIHRvIGhvcGUgZm9yLCB3aGljaCBiZXlvbmQgYWxsIHF1ZXN0aW9uIG5vbmUgb2YgdXMgd2VyZSBhY3F1YWludGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCwgb2YgcmFpc2luZyBhbiBpbnZpbmNpYmxlIGFybXkgb2YgaGlzIGZhdGhlcidzIHNvbGRpZXJzLCBhbmQgc28gaGluZGVyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGZyZW56eSBvZiBBbnRvbml1cywgc3B1cnJlZCBvbiBhcyBpdCB3YXMgYnkgdGhlIG1vc3QgaW5odW1hbiBjb3Vuc2VscywgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciBvZiBkb2luZyBtaXNjaGllZiB0byB0aGUgcmVwdWJsaWMuIDwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdobyBpcyB0aGVyZSB3aG8gZG9lcyBub3Qgc2VlIGNsZWFybHkgdGhhdCwgaWYgQ2Flc2FyIGhhZCBub3QgcHJlcGFyZWQgYW4KICAgICAgICAgICAgICAgICAgICBhcm15LCB0aGUgcmV0dXJuIG9mIEFudG9uaXVzIG11c3QgaGF2ZSBiZWVuIGFjY29tcGFuaWVkIGJ5IG91ciBkZXN0cnVjdGlvbj8gRm9yLAogICAgICAgICAgICAgICAgICAgIGluIHRydXRoLCBoZSByZXR1cm5lZCBpbiBzdWNoIGEgc3RhdGUgb2YgbWluZCwgYnVybmluZyB3aXRoIGhhdHJlZCBvZiB5b3UgYWxsLAogICAgICAgICAgICAgICAgICAgIHN0YWluZWQgd2l0aCB0aGUgYmxvb2Qgb2YgdGhlIFJvbWFuIGNpdGl6ZW5zLCB3aG9tIGhlIGhhZCBtdXJkZXJlZCBhdCBTdWVzc2EgYW5kCiAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+LCB0aGF0IGhlIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICBvZiBub3RoaW5nIGJ1dCB0aGUgdXR0ZXIgZGVzdHJ1Y3Rpb24gb2YgdGhlIHJlcHVibGljLiBBbmQgd2hhdCBwcm90ZWN0aW9uIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGZvdW5kIGZvciB5b3VyIHNhZmV0eSBhbmQgZm9yIHlvdXIgbGliZXJ0eSBpZiB0aGUgYXJteSBvZiBDYWl1cyBDYWVzYXIKICAgICAgICAgICAgICAgICAgICBoYWQgbm90IGJlZW4gY29tcG9zZWQgb2YgdGhlIGJyYXZlc3Qgb2YgaGlzIGZhdGhlcidzIHNvbGRpZXJzPyBBbmQgd2l0aCByZXNwZWN0CiAgICAgICAgICAgICAgICAgICAgdG8gaGlzIHByYWlzZXMgYW5kIGhvbm9ycyzigJRhbmQgaGUgaXMgZW50aXRsZWQgdG8gZGl2aW5lIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZXJsYXN0aW5nIGhvbm9ycyBmb3IgaGlzIGdvZGxpa2UgYW5kIHVuZHlpbmcgc2VydmljZXMs4oCUdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGhhcyBqdXN0IGNvbnNlbnRlZCB0byBteSBwcm9wb3NhbHMsIGFuZCBoYXMgZGVjcmVlZCB0aGF0IGEgbW90aW9uIGJlIHN1Ym1pdHRlZAogICAgICAgICAgICAgICAgICAgIHRvIGl0IGF0IHRoZSB2ZXJ5IGVhcmxpZXN0IG9wcG9ydHVuaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiwgdGhhdCBoZSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgb2Ygbm90aGluZyBidXQgdGhlIHV0dGVyIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYy4gQW5kIHdoYXQgcHJvdGVjdGlvbiBjb3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBmb3VuZCBmb3IgeW91ciBzYWZldHkgYW5kIGZvciB5b3VyIGxpYmVydHkgaWYgdGhlIGFybXkgb2YgQ2FpdXMgQ2Flc2FyCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBiZWVuIGNvbXBvc2VkIG9mIHRoZSBicmF2ZXN0IG9mIGhpcyBmYXRoZXIncyBzb2xkaWVycz8gQW5kIHdpdGggcmVzcGVjdAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBwcmFpc2VzIGFuZCBob25vcnMs4oCUYW5kIGhlIGlzIGVudGl0bGVkIHRvIGRpdmluZSBhbmQKICAgICAgICAgICAgICAgICAgICBldmVybGFzdGluZyBob25vcnMgZm9yIGhpcyBnb2RsaWtlIGFuZCB1bmR5aW5nIHNlcnZpY2VzLOKAlHRoZSBzZW5hdGUKICAgICAgICAgICAgICAgICAgICBoYXMganVzdCBjb25zZW50ZWQgdG8gbXkgcHJvcG9zYWxzLCBhbmQgaGFzIGRlY3JlZWQgdGhhdCBhIG1vdGlvbiBiZSBzdWJtaXR0ZWQKICAgICAgICAgICAgICAgICAgICB0byBpdCBhdCB0aGUgdmVyeSBlYXJsaWVzdCBvcHBvcnR1bml0eS4gPC90cmFuc2xhdGlvbj4="
translation['4.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3cgd2hvIGlzIHRoZXJlIHdobyBkb2VzIG5vdCBzZWUgdGhhdCBieSB0aGlzIGRlY3JlZSBBbnRvbml1cyBoYXMgYmVlbiBhZGp1ZGdlZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGFuIGVuZW15PyBGb3Igd2hhdCBlbHNlIGNhbiB3ZSBjYWxsIGhpbSwgd2hlbiB0aGUgc2VuYXRlIGRlY2lkZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkgaG9ub3JzIGFyZSB0byBiZSBkZXZpc2VkIGZvciB0aG9zZSBtZW4gd2hvIGFyZSBsZWFkaW5nIGFybWllcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltPyBXaGF0PyBkaWQgbm90IHRoZSBNYXJ0aWFsIGxlZ2lvbiAod2hpY2ggYXBwZWFycyB0byBtZSBieSBzb21lCiAgICAgICAgICAgICAgICAgICAgZGl2aW5lIHBlcm1pc3Npb24gdG8gaGF2ZSBkZXJpdmVkIGl0cyBuYW1lIGZyb20gdGhhdCBnb2QgZnJvbSB3aG9tIHdlIGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBSb21hbiBwZW9wbGUgZGVzY2VuZGVkKSBkZWNpZGUgYnkgaXRzIHJlc29sdXRpb25zIHRoYXQgQW50b25pdXMgd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgYmVmb3JlIHRoZSBzZW5hdGUgaGFkIGNvbWUgdG8gYW55IHJlc29sdXRpb24/IEZvciBpZiBoZSBiZSBub3QgYW4gZW5lbXksCiAgICAgICAgICAgICAgICAgICAgd2UgbXVzdCBpbmV2aXRhYmx5IGRlY2lkZSB0aGF0IHRob3NlIG1lbiB3aG8gaGF2ZSBkZXNlcnRlZCB0aGUgY29uc3VsIGFyZQogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMuIEFkbWlyYWJseSBhbmQgc2Vhc29uYWJseSwgTyBSb21hbnMsIGhhdmUgeW91IGJ5IHlvdXIgY3JpZXMgc2FuY3Rpb25lZAogICAgICAgICAgICAgICAgICAgIHRoZSBub2JsZSBjb25kdWN0IG9mIHRoZSBtZW4gb2YgdGhlIE1hcnRpYWwgbGVnaW9uLCB3aG8gaGF2ZSBjb21lIG92ZXIgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUsIHRvIHlvdXIgbGliZXJ0eSwgYW5kIHRvIHRoZSB3aG9sZSByZXB1YmxpYzsgYW5kIGhhdmUKICAgICAgICAgICAgICAgICAgICBhYmFuZG9uZWQgdGhhdCBlbmVteSBhbmQgcm9iYmVyIGFuZCBwYXJyaWNpZGUgb2YgaGlzIGNvdW50cnkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgZGlkIHRoZXkgZGlzcGxheSBvbmx5IHRoZWlyIHNwaXJpdCBhbmQgY291cmFnZSBpbiBkb2luZwogICAgICAgICAgICAgICAgICAgIHRoaXMsIGJ1dCB0aGVpciBjYXV0aW9uIGFuZCB3aXNkb20gYWxzby4gVGhleSBlbmNhbXBlZCBhdCBBbGJhLCBpbiBhIGNpdHkKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50LCBmb3J0aWZpZWQsIG5lYXIsIGZ1bGwgb2YgYnJhdmUgbWVuIGFuZCBsb3lhbCBhbmQgdmlydHVvdXMgY2l0aXplbnMuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZvdXJ0aCBsZWdpb24gaW1pdGF0aW5nIHRoZSB2aXJ0dWUgb2YgdGhpcyBNYXJ0aWFsIGxlZ2lvbiwgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVhZGVyc2hpcCBvZiBMdWNpdXMuIEVnbmF0dWxlaXVzLCB3aG9tIHRoZSBzZW5hdGUgZGVzZXJ2ZWRseSBwcmFpc2VkIGEgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgYWdvLCBoYXMgYWxzbyBqb2luZWQgdGhlIGFybXkgb2YgQ2FpdXMgQ2Flc2FyLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgZGlkIHRoZXkgZGlzcGxheSBvbmx5IHRoZWlyIHNwaXJpdCBhbmQgY291cmFnZSBpbiBkb2luZwogICAgICAgICAgICAgICAgICAgIHRoaXMsIGJ1dCB0aGVpciBjYXV0aW9uIGFuZCB3aXNkb20gYWxzby4gVGhleSBlbmNhbXBlZCBhdCBBbGJhLCBpbiBhIGNpdHkKICAgICAgICAgICAgICAgICAgICBjb252ZW5pZW50LCBmb3J0aWZpZWQsIG5lYXIsIGZ1bGwgb2YgYnJhdmUgbWVuIGFuZCBsb3lhbCBhbmQgdmlydHVvdXMgY2l0aXplbnMuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZvdXJ0aCBsZWdpb24gaW1pdGF0aW5nIHRoZSB2aXJ0dWUgb2YgdGhpcyBNYXJ0aWFsIGxlZ2lvbiwgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVhZGVyc2hpcCBvZiBMdWNpdXMuIEVnbmF0dWxlaXVzLCB3aG9tIHRoZSBzZW5hdGUgZGVzZXJ2ZWRseSBwcmFpc2VkIGEgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgYWdvLCBoYXMgYWxzbyBqb2luZWQgdGhlIGFybXkgb2YgQ2FpdXMgQ2Flc2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBtb3JlIGFkdmVyc2UgZGVjaXNpb25zLCBPIE1hcmN1cyBBbnRvbml1cywgY2FuIHlvdSB3YW50PyBDYWVzYXIsIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICBsZXZpZWQgYW4gYXJteSBhZ2FpbnN0IHlvdSwgaXMgZXh0b2xsZWQgdG8gdGhlIHNraWVzLiBUaGUgbGVnaW9ucyBhcmUgcHJhaXNlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGNvbXBsaW1lbnRhcnkgbGFuZ3VhZ2UsIHdoaWNoIGhhdmUgYWJhbmRvbmVkIHlvdSwgd2hpY2ggd2VyZSBzZW50IGZvcgogICAgICAgICAgICAgICAgICAgIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYnkgeW91OyBhbmQgd2hpY2gsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGhhZCBjaG9zZW4gdG8gYmUgYSBjb25zdWwgcmF0aGVyIHRoYW4gYW4gZW5lbXksIHdlcmUgd2hvbGx5IGRldm90ZWQgdG8geW91LiBBbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZmVhcmxlc3MgYW5kIGhvbmVzdCBkZWNpc2lvbiBvZiB0aG9zZSBsZWdpb25zIGlzIGNvbmZpcm1lZCBieSB0aGUgc2VuYXRlLCBpcwogICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkIG9mIGJ5IHRoZSB3aG9sZSBSb21hbiBwZW9wbGUs4oCUdW5sZXNzLCBpbmRlZWQsIHlvdSB0b2RheSwgTwogICAgICAgICAgICAgICAgICAgIFJvbWFucywgZGVjaWRlIHRoYXQgQW50b25pdXMgaXMgYSBjb25zdWwgYW5kIG5vdCBhbiBlbmVteS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+IEkgdGhvdWdodCwgTyBSb21hbnMsIHRoYXQgeW91IGRpZCB0aGluayBhcyB5b3Ugc2hvdyB5b3UgZG8uCiAgICAgICAgICAgICAgICAgICAgV2hhdD8gZG8geW91IHN1cHBvc2UgdGhhdCB0aGUgbXVuaWNpcGFsIHRvd25zLCBhbmQgdGhlIGNvbG9uaWVzLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlZmVjdHVyZXMgaGF2ZSBhbnkgb3RoZXIgb3Bpbmlvbj8gQWxsIG1lbiBhcmUgYWdyZWVkIHdpdGggb25lIG1pbmQ7IHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICBldmVyeSBvbmUgd2hvIHdpc2hlcyB0aGUgc3RhdGUgdG8gYmUgc2F2ZWQgbXVzdCB0YWtlIHVwIGV2ZXJ5IHNvcnQgb2YgYXJtcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhhdCBwZXN0aWxlbmNlLiBXaGF0PyBkb2VzLCBJIHNob3VsZCBsaWtlIHRvIGtub3csIGRvZXMgdGhlIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICBEZWNpbXVzIEJydXR1cywgTyBSb21hbnMsIHdoaWNoIHlvdSBjYW4gZ2F0aGVyIGZyb20gaGlzIGVkaWN0LCB3aGljaCBoYXMgdGhpcwogICAgICAgICAgICAgICAgICAgIGRheSByZWFjaGVkIHVzLCBhcHBlYXIgdG8gYW55IG9uZSBkZXNlcnZpbmcgb2YgYmVpbmcgbGlnaHRseSBlc3RlZW1lZD8gUmlnaHRseQogICAgICAgICAgICAgICAgICAgIGFuZCB0cnVseSBkbyB5b3Ugc2F5IE5vLCBPIFJvbWFucy4gRm9yIHRoZSBmYW1pbHkgYW5kIG5hbWUgb2YgQnJ1dHVzIGhhcyBiZWVuIGJ5CiAgICAgICAgICAgICAgICAgICAgc29tZSBlc3BlY2lhbCBraW5kbmVzcyBhbmQgbGliZXJhbGl0eSBvZiB0aGUgaW1tb3J0YWwgZ29kcyBnaXZlbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYywgZm9yIHRoZSBwdXJwb3NlIG9mIGF0IG9uZSB0aW1lIGVzdGFibGlzaGluZywgYW5kIGF0IGFub3RoZXIgb2YKICAgICAgICAgICAgICAgICAgICByZWNvdmVyaW5nLCB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgV2hhdCB0aGVuIGhhcyBiZWVuIHRoZSBvcGluaW9uIHdoaWNoIERlY2ltdXMgQnJ1dHVzIGhhcyBmb3JtZWQgb2YgTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXM/IEhlIGV4Y2x1ZGVzIGhpbSBmcm9tIGhpcyBwcm92aW5jZS4gSGUgb3Bwb3NlcyBoaW0gd2l0aCBoaXMgYXJteS4gSGUKICAgICAgICAgICAgICAgICAgICByb3VzZXMgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHRvIHdhciwgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IHJvdXNlZCBvZiBpdHMgb3duIGFjY29yZCwgYW5kIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBqdWRnbWVudCB3aGljaCBpdAogICAgICAgICAgICAgICAgICAgIGhhcyBpdHNlbGYgZm9ybWVkLiBJZiBBbnRvbml1cyBiZSBjb25zdWwsIEJydXR1cyBpcyBhbiBlbmVteS4gQ2FuIHdlIHRoZW4gZG91YnQKICAgICAgICAgICAgICAgICAgICB3aGljaCBvZiB0aGVzZSBhbHRlcm5hdGl2ZXMgaXMgdGhlIGZhY3Q/IDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBieSB5b3U7IGFuZCB3aGljaCwgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGFkIGNob3NlbiB0byBiZSBhIGNvbnN1bCByYXRoZXIgdGhhbiBhbiBlbmVteSwgd2VyZSB3aG9sbHkgZGV2b3RlZCB0byB5b3UuIEFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBmZWFybGVzcyBhbmQgaG9uZXN0IGRlY2lzaW9uIG9mIHRob3NlIGxlZ2lvbnMgaXMgY29uZmlybWVkIGJ5IHRoZSBzZW5hdGUsIGlzCiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWQgb2YgYnkgdGhlIHdob2xlIFJvbWFuIHBlb3BsZSzigJR1bmxlc3MsIGluZGVlZCwgeW91IHRvZGF5LCBPCiAgICAgICAgICAgICAgICAgICAgUm9tYW5zLCBkZWNpZGUgdGhhdCBBbnRvbml1cyBpcyBhIGNvbnN1bCBhbmQgbm90IGFuIGVuZW15LiA8L3RyYW5zbGF0aW9uPg=="
translation['4.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBJIHRob3VnaHQsIE8gUm9tYW5zLCB0aGF0IHlvdSBkaWQgdGhpbmsgYXMgeW91IHNob3cgeW91IGRvLgogICAgICAgICAgICAgICAgICAgIFdoYXQ/IGRvIHlvdSBzdXBwb3NlIHRoYXQgdGhlIG11bmljaXBhbCB0b3ducywgYW5kIHRoZSBjb2xvbmllcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHByZWZlY3R1cmVzIGhhdmUgYW55IG90aGVyIG9waW5pb24/IEFsbCBtZW4gYXJlIGFncmVlZCB3aXRoIG9uZSBtaW5kOyBzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgZXZlcnkgb25lIHdobyB3aXNoZXMgdGhlIHN0YXRlIHRvIGJlIHNhdmVkIG11c3QgdGFrZSB1cCBldmVyeSBzb3J0IG9mIGFybXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoYXQgcGVzdGlsZW5jZS4gV2hhdD8gZG9lcywgSSBzaG91bGQgbGlrZSB0byBrbm93LCBkb2VzIHRoZSBvcGluaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgRGVjaW11cyBCcnV0dXMsIE8gUm9tYW5zLCB3aGljaCB5b3UgY2FuIGdhdGhlciBmcm9tIGhpcyBlZGljdCwgd2hpY2ggaGFzIHRoaXMKICAgICAgICAgICAgICAgICAgICBkYXkgcmVhY2hlZCB1cywgYXBwZWFyIHRvIGFueSBvbmUgZGVzZXJ2aW5nIG9mIGJlaW5nIGxpZ2h0bHkgZXN0ZWVtZWQ/IFJpZ2h0bHkKICAgICAgICAgICAgICAgICAgICBhbmQgdHJ1bHkgZG8geW91IHNheSBObywgTyBSb21hbnMuIEZvciB0aGUgZmFtaWx5IGFuZCBuYW1lIG9mIEJydXR1cyBoYXMgYmVlbiBieQogICAgICAgICAgICAgICAgICAgIHNvbWUgZXNwZWNpYWwga2luZG5lc3MgYW5kIGxpYmVyYWxpdHkgb2YgdGhlIGltbW9ydGFsIGdvZHMgZ2l2ZW4gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIGZvciB0aGUgcHVycG9zZSBvZiBhdCBvbmUgdGltZSBlc3RhYmxpc2hpbmcsIGFuZCBhdCBhbm90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmluZywgdGhlIGxpYmVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['4.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFdoYXQgdGhlbiBoYXMgYmVlbiB0aGUgb3BpbmlvbiB3aGljaCBEZWNpbXVzIEJydXR1cyBoYXMgZm9ybWVkIG9mIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzPyBIZSBleGNsdWRlcyBoaW0gZnJvbSBoaXMgcHJvdmluY2UuIEhlIG9wcG9zZXMgaGltIHdpdGggaGlzIGFybXkuIEhlCiAgICAgICAgICAgICAgICAgICAgcm91c2VzIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHRvIHdhciwgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IHJvdXNlZCBvZiBpdHMgb3duIGFjY29yZCwgYW5kIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBqdWRnbWVudCB3aGljaCBpdAogICAgICAgICAgICAgICAgICAgIGhhcyBpdHNlbGYgZm9ybWVkLiBJZiBBbnRvbml1cyBiZSBjb25zdWwsIEJydXR1cyBpcyBhbiBlbmVteS4gQ2FuIHdlIHRoZW4gZG91YnQKICAgICAgICAgICAgICAgICAgICB3aGljaCBvZiB0aGVzZSBhbHRlcm5hdGl2ZXMgaXMgdGhlIGZhY3Q/IDwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGp1c3QgYXMgeW91IG5vdyB3aXRoIG9uZSBtaW5kIGFuZCBvbmUgdm9pY2UgYWZmaXJtIHRoYXQgeW91IGVudGVydGFpbiBubwogICAgICAgICAgICAgICAgICAgIGRvdWJ0LCBzbyBkaWQgdGhlIHNlbmF0ZSBqdXN0IG5vdyBkZWNyZWUgdGhhdCBEZWNpbXVzIEJydXR1cyBkZXNlcnZlZAogICAgICAgICAgICAgICAgICAgIGV4Y2VsbGVudGx5IHdlbGwgb2YgdGhlIHJlcHVibGljLCBpbmFzbXVjaCBhcyBoZSB3YXMgZGVmZW5kaW5nIHRoZSBhdXRob3JpdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlIGFuZCB0aGUgbGliZXJ0eSBhbmQgZW1waXJlIG9mIHRoZSBSb21hbiBwZW9wbGUuIERlZmVuZGluZyBpdCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgd2hvbT8gV2h5LCBhZ2FpbnN0IGFuIGVuZW15LiBGb3Igd2hhdCBvdGhlciBzb3J0IG9mIGRlZmVuc2UgZGVzZXJ2ZXMgcHJhaXNlPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdGhlIG5leHQgcGxhY2UgdGhlIHByb3ZpbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IGlzIHByYWlzZWQsIGFuZCBpcyBkZXNlcnZlZGx5CiAgICAgICAgICAgICAgICAgICAgY29tcGxpbWVudGVkIGluIG1vc3QgaG9ub3JhYmxlIGxhbmd1YWdlIGJ5IHRoZSBzZW5hdGUgZm9yIHJlc2lzdGluZyBBbnRvbml1cy4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgdGhhdCBwcm92aW5jZSBjb25zaWRlcmVkIGhpbSB0aGUgY29uc3VsLCBhbmQgc3RpbGwgcmVmdXNlZCB0byByZWNlaXZlCiAgICAgICAgICAgICAgICAgICAgaGltLCBpdCB3b3VsZCBiZSBndWlsdHkgb2YgZ3JlYXQgd2lja2VkbmVzcy4gRm9yIGFsbCB0aGUgcHJvdmluY2VzIGJlbG9uZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWwgb2YgcmlnaHQsIGFuZCBhcmUgYm91bmQgdG8gb2JleSBoaW0uIERlY2ltdXMgQnJ1dHVzLCA8Zm9yZWlnbiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiBhbmQgY29uc3VsIGVsZWN0LCBhIGNpdGl6ZW4gYm9ybiBmb3IgdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIGRlbmllcyB0aGF0IGhlIGlzIGNvbnN1bDsgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gZGVuaWVzCiAgICAgICAgICAgICAgICAgICAgaXQ7IGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gZGVuaWVzIGl0OyB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgZGVuaWVzIGl0OyB5b3UgZGVueSBpdC4gV2hvIHRoZW4gdGhpbmtzIHRoYXQgaGUgaXMgY29uc3VsIGV4Y2VwdCBhIGZldyByb2JiZXJzPwogICAgICAgICAgICAgICAgICAgIEFsdGhvdWdoIGV2ZW4gdGhleSB0aGVtc2VsdmVzIGRvIG5vdCBiZWxpZXZlIHdoYXQgdGhleSBzYXk7IG5vciBpcyBpdCBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBzaG91bGQgZGlmZmVyIGZyb20gdGhlIGp1ZGdtZW50IG9mIGFsbCBtZW4sIGltcGlvdXMgYW5kIGRlc3BlcmF0ZSBtZW4KICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhleSBiZS4gQnV0IHRoZSBob3BlIG9mIHBsdW5kZXIgYW5kIGJvb3R5IGJsaW5kcyB0aGVpciBtaW5kcyBtZW4gd2hvbSBubwogICAgICAgICAgICAgICAgICAgIGdpZnRzIG9mIG1vbmV5LCBubyBhbGxvdG1lbnQgb2YgbGFuZCBub3IgZXZlbiB0aGF0IGludGVybWluYWJsZSBhdWN0aW9uIGhhcwogICAgICAgICAgICAgICAgICAgIHNhdGlzZmllZDsgd2hvIGhhdmUgcHJvcG9zZWQgdG8gdGhlbXNlbHZlcyB0aGUgY2l0eSwgdGhlIHByb3BlcnRpZXMgYW5kIGZvcnR1bmVzCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIHRoZSBjaXRpemVucyBhcyB0aGVpciBib290eTsgYW5kIHdobywgYXMgbG9uZyBhcyB0aGVyZSBpcyBzb21ldGhpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBzZWl6ZSBhbmQgY2Fycnkgb2ZmLCB0aGluayB0aGF0IG5vdGhpbmcgd2lsbCBiZSB3YW50aW5nIHRvIHRoZW07CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+IGFtb25nIHdob20gTWFyY3VzIEFudG9uaXVzIChPIHllIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcywgYXZlcnQsIEkgcHJheSB5b3UsIGFuZCBlZmZhY2UgdGhpcyBvbWVuKSwgaGFzIHByb21pc2VkIHRvIGRpdmlkZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gTWF5IHRoaW5ncyByYXRoZXIgaGFwcGVuIE8gUm9tYW5zIGFzIHlvdSBwcmF5IHRoYXQgdGhleSBzaG91bGQsIGFuZCBtYXkKICAgICAgICAgICAgICAgICAgICB0aGUgY2hhc3Rpc2VtZW50IG9mIHRoaXMgZnJlbnp5IGZhbGwgb24gaGltIGFuZCBvbiBoaXMgZnJpZW5kLiBBbmQsIGluZGVlZCwgSQogICAgICAgICAgICAgICAgICAgIGZlZWwgc3VyZSB0aGF0IGl0IHdpbGwgYmUgc28uIEZvciBJIHRoaW5rIHRoYXQgYXQgcHJlc2VudCBub3Qgb25seSBtZW4gYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsIGdvZHMgaGF2ZSBhbGwgdW5pdGVkIHRvZ2V0aGVyIHRvIHByZXNlcnZlIHRoaXMgcmVwdWJsaWMuIEZvciBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbCBnb2RzIGZvcmVzaG93IHVzIHRoZSBmdXR1cmUsIGJ5IG1lYW5zIG9mIHBvcnRlbnRzIGFuZCBwcm9kaWdpZXMgdGhlbiBpdAogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIG9wZW5seSByZXZlYWxlZCB0byB1cyB0aGF0IHB1bmlzaG1lbnQgaXMgbmVhciBhdCBoYW5kIHRvIGhpbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSB0byB1cy4gT3IgaWYgaXQgd2FzIGltcG9zc2libGUgZm9yIHN1Y2ggdW5hbmltaXR5IG9uIHRoZSBwYXJ0IG9mIGFsbCBtZW4KICAgICAgICAgICAgICAgICAgICB0byBleGlzdCB3aXRob3V0IHRoZSBpbnNwaXJhdGlvbiBvZiB0aGUgZ29kcywgaW4gZWl0aGVyIGNhc2UgaG93IGNhbiB3ZSBkb3VidCBhcwogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBpbmRpY2F0aW9ucyBvZiB0aGUgaGVhdmVubHkgZGVpdGllcz8gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0aGUgbmV4dCBwbGFjZSB0aGUgcHJvdmluY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBpcyBwcmFpc2VkLCBhbmQgaXMgZGVzZXJ2ZWRseQogICAgICAgICAgICAgICAgICAgIGNvbXBsaW1lbnRlZCBpbiBtb3N0IGhvbm9yYWJsZSBsYW5ndWFnZSBieSB0aGUgc2VuYXRlIGZvciByZXNpc3RpbmcgQW50b25pdXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IGlmIHRoYXQgcHJvdmluY2UgY29uc2lkZXJlZCBoaW0gdGhlIGNvbnN1bCwgYW5kIHN0aWxsIHJlZnVzZWQgdG8gcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIGhpbSwgaXQgd291bGQgYmUgZ3VpbHR5IG9mIGdyZWF0IHdpY2tlZG5lc3MuIEZvciBhbGwgdGhlIHByb3ZpbmNlcyBiZWxvbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsIG9mIHJpZ2h0LCBhbmQgYXJlIGJvdW5kIHRvIG9iZXkgaGltLiBEZWNpbXVzIEJydXR1cywgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiBhbmQgY29uc3VsIGVsZWN0LCBhIGNpdGl6ZW4gYm9ybiBmb3IgdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIGRlbmllcyB0aGF0IGhlIGlzIGNvbnN1bDsgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBkZW5pZXMKICAgICAgICAgICAgICAgICAgICBpdDsgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGRlbmllcyBpdDsgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGRlbmllcyBpdDsgeW91IGRlbnkgaXQuIFdobyB0aGVuIHRoaW5rcyB0aGF0IGhlIGlzIGNvbnN1bCBleGNlcHQgYSBmZXcgcm9iYmVycz8KICAgICAgICAgICAgICAgICAgICBBbHRob3VnaCBldmVuIHRoZXkgdGhlbXNlbHZlcyBkbyBub3QgYmVsaWV2ZSB3aGF0IHRoZXkgc2F5OyBub3IgaXMgaXQgcG9zc2libGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgc2hvdWxkIGRpZmZlciBmcm9tIHRoZSBqdWRnbWVudCBvZiBhbGwgbWVuLCBpbXBpb3VzIGFuZCBkZXNwZXJhdGUgbWVuCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHRoZXkgYmUuIEJ1dCB0aGUgaG9wZSBvZiBwbHVuZGVyIGFuZCBib290eSBibGluZHMgdGhlaXIgbWluZHMgbWVuIHdob20gbm8KICAgICAgICAgICAgICAgICAgICBnaWZ0cyBvZiBtb25leSwgbm8gYWxsb3RtZW50IG9mIGxhbmQgbm9yIGV2ZW4gdGhhdCBpbnRlcm1pbmFibGUgYXVjdGlvbiBoYXMKICAgICAgICAgICAgICAgICAgICBzYXRpc2ZpZWQ7IHdobyBoYXZlIHByb3Bvc2VkIHRvIHRoZW1zZWx2ZXMgdGhlIGNpdHksIHRoZSBwcm9wZXJ0aWVzIGFuZCBmb3J0dW5lcwogICAgICAgICAgICAgICAgICAgIG9mIGFsbCB0aGUgY2l0aXplbnMgYXMgdGhlaXIgYm9vdHk7IGFuZCB3aG8sIGFzIGxvbmcgYXMgdGhlcmUgaXMgc29tZXRoaW5nIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gc2VpemUgYW5kIGNhcnJ5IG9mZiwgdGhpbmsgdGhhdCBub3RoaW5nIHdpbGwgYmUgd2FudGluZyB0byB0aGVtOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gYW1vbmcgd2hvbSBNYXJjdXMgQW50b25pdXMgKE8geWUgaW1tb3J0YWwKICAgICAgICAgICAgICAgICAgICBnb2RzLCBhdmVydCwgSSBwcmF5IHlvdSwgYW5kIGVmZmFjZSB0aGlzIG9tZW4pLCBoYXMgcHJvbWlzZWQgdG8gZGl2aWRlIHRoaXMKICAgICAgICAgICAgICAgICAgICBjaXR5LiBNYXkgdGhpbmdzIHJhdGhlciBoYXBwZW4gTyBSb21hbnMgYXMgeW91IHByYXkgdGhhdCB0aGV5IHNob3VsZCwgYW5kIG1heQogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFzdGlzZW1lbnQgb2YgdGhpcyBmcmVuenkgZmFsbCBvbiBoaW0gYW5kIG9uIGhpcyBmcmllbmQuIEFuZCwgaW5kZWVkLCBJCiAgICAgICAgICAgICAgICAgICAgZmVlbCBzdXJlIHRoYXQgaXQgd2lsbCBiZSBzby4gRm9yIEkgdGhpbmsgdGhhdCBhdCBwcmVzZW50IG5vdCBvbmx5IG1lbiBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWwgZ29kcyBoYXZlIGFsbCB1bml0ZWQgdG9nZXRoZXIgdG8gcHJlc2VydmUgdGhpcyByZXB1YmxpYy4gRm9yIGlmIHRoZQogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsIGdvZHMgZm9yZXNob3cgdXMgdGhlIGZ1dHVyZSwgYnkgbWVhbnMgb2YgcG9ydGVudHMgYW5kIHByb2RpZ2llcyB0aGVuIGl0CiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gb3Blbmx5IHJldmVhbGVkIHRvIHVzIHRoYXQgcHVuaXNobWVudCBpcyBuZWFyIGF0IGhhbmQgdG8gaGltLCBhbmQKICAgICAgICAgICAgICAgICAgICBsaWJlcnR5IHRvIHVzLiBPciBpZiBpdCB3YXMgaW1wb3NzaWJsZSBmb3Igc3VjaCB1bmFuaW1pdHkgb24gdGhlIHBhcnQgb2YgYWxsIG1lbgogICAgICAgICAgICAgICAgICAgIHRvIGV4aXN0IHdpdGhvdXQgdGhlIGluc3BpcmF0aW9uIG9mIHRoZSBnb2RzLCBpbiBlaXRoZXIgY2FzZSBob3cgY2FuIHdlIGRvdWJ0IGFzCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGluZGljYXRpb25zIG9mIHRoZSBoZWF2ZW5seSBkZWl0aWVzPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IG9ubHkgcmVtYWlucywgTyBSb21hbnMsIGZvciB5b3UgdG8gcGVyc2V2ZXJlIGluIHRoZSBzZW50aW1lbnRzIHdoaWNoIHlvdSBhdAogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgZGlzcGxheS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgd2lsbCBhY3QsIHRoZXJlZm9yZSwgYXMgY29tbWFuZGVycyBhcmUgaW4gdGhlIGhhYml0IG9mIGRvaW5nIHdoZW4gdGhlaXIgYXJteSBpcwogICAgICAgICAgICAgICAgICAgIHJlYWR5IGZvciBiYXR0bGUsIHdobywgYWx0aG91Z2ggdGhleSBzZWUgdGhlaXIgc29sZGllcnMgcmVhZHkgdG8gZW5nYWdlLCBzdGlsbAogICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgYW4gZXhob3J0YXRpb24gdG8gdGhlbTsgYW5kIGluIGxpa2UgbWFubmVyIEkgd2lsbCBleGhvcnQgeW91IHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGVhZ2VyIGFuZCBidXJuaW5nIHRvIHJlY292ZXIgeW91ciBsaWJlcnR5LiBZb3UgaGF2ZSBub3TigJR5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIG5vdCwgaW5kZWVkLCBPIFJvbWFucywgdG8gd2FyIGFnYWluc3QgYW4gZW5lbXkgd2l0aCB3aG9tIGl0IGlzIHBvc3NpYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBwZWFjZSBvbiBhbnkgdGVybXMgd2hhdGV2ZXIuIEZvciBoZSBkb2VzIG5vdCBub3cgZGVzaXJlIHlvdXIgc2xhdmVyeSwgYXMgaGUKICAgICAgICAgICAgICAgICAgICBkaWQgYmVmb3JlLCBidXQgaGUgaXMgYW5ncnkgbm93IGFuZCB0aGlyc3RzIGZvciB5b3VyIGJsb29kLiBObyBzcG9ydCBhcHBlYXJzCiAgICAgICAgICAgICAgICAgICAgbW9yZSBkZWxpZ2h0ZnVsIHRvIGhpbSB0aGFuIGJsb29kc2hlZCwgYW5kIHNsYXVnaHRlciwgYW5kIHRoZSBtYXNzYWNyZSBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGJlZm9yZSBoaXMgZXllcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgaGF2ZSBub3QsIE8KICAgICAgICAgICAgICAgICAgICBSb21hbnMsIHRvIGRlYWwgd2l0aCBhIHdpY2tlZCBhbmQgcHJvZmxpZ2F0ZSBtYW4sIGJ1dCB3aXRoIGFuIHVubmF0dXJhbCBhbmQKICAgICAgICAgICAgICAgICAgICBzYXZhZ2UgYmVhc3QuIEFuZCwgc2luY2UgaGUgaGFzIGZhbGxlbiBpbnRvIGEgd2VsbCwgbGV0IGhpbSBiZSBidXJpZWQgaW4gaXQuIEZvcgogICAgICAgICAgICAgICAgICAgIGlmIGhlIGVzY2FwZXMgb3V0IG9mIGl0LCB0aGVyZSB3aWxsIGJlIG5vIGluaHVtYW5pdHkgb2YgdG9ydHVyZSB3aGljaCBpdCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgdG8gYXZvaWQuIEJ1dCBoZSBpcyBhdCBwcmVzZW50IGhlbW1lZCBpbiwgcHJlc3NlZCwgYW5kIGJlc2llZ2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgdHJvb3BzIHdoaWNoIHdlIGFscmVhZHkgaGF2ZSwgYW5kIHdpbGwgc29vbiBiZSBzdGlsbCBtb3JlIHNvIGJ5IHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaW4gYSBmZXcgZGF5cyB0aGUgbmV3IGNvbnN1bHMgd2lsbCBsZXZ5LiBBcHBseSB5b3Vyc2VsdmVzIHRoZW4gdG8gdGhpcwogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzLCBhcyB5b3UgYXJlIGRvaW5nLiBOZXZlciBoYXZlIHlvdSBzaG93biBncmVhdGVyIHVuYW5pbWl0eSBpbiBhbnkgY2F1c2U7CiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGF2ZSB5b3UgYmVlbiBzbyBjb3JkaWFsbHkgdW5pdGVkIHdpdGggdGhlIHNlbmF0ZS4gQW5kIG5vIHdvbmRlci4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIG5vdyBpcyBub3QgaW4gd2hhdCBjb25kaXRpb24gd2UgYXJlIHRvIGxpdmUsIGJ1dCB3aGV0aGVyIHdlIGFyZSB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgYXQgYWxsLCBvciB0byBwZXJpc2ggd2l0aCB0b3J0dXJlIGFuZCBpZ25vbWlueS4gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IGhhdmUgbm90LCBPCiAgICAgICAgICAgICAgICAgICAgUm9tYW5zLCB0byBkZWFsIHdpdGggYSB3aWNrZWQgYW5kIHByb2ZsaWdhdGUgbWFuLCBidXQgd2l0aCBhbiB1bm5hdHVyYWwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2F2YWdlIGJlYXN0LiBBbmQsIHNpbmNlIGhlIGhhcyBmYWxsZW4gaW50byBhIHdlbGwsIGxldCBoaW0gYmUgYnVyaWVkIGluIGl0LiBGb3IKICAgICAgICAgICAgICAgICAgICBpZiBoZSBlc2NhcGVzIG91dCBvZiBpdCwgdGhlcmUgd2lsbCBiZSBubyBpbmh1bWFuaXR5IG9mIHRvcnR1cmUgd2hpY2ggaXQgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHRvIGF2b2lkLiBCdXQgaGUgaXMgYXQgcHJlc2VudCBoZW1tZWQgaW4sIHByZXNzZWQsIGFuZCBiZXNpZWdlZCBieQogICAgICAgICAgICAgICAgICAgIHRob3NlIHRyb29wcyB3aGljaCB3ZSBhbHJlYWR5IGhhdmUsIGFuZCB3aWxsIHNvb24gYmUgc3RpbGwgbW9yZSBzbyBieSB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGluIGEgZmV3IGRheXMgdGhlIG5ldyBjb25zdWxzIHdpbGwgbGV2eS4gQXBwbHkgeW91cnNlbHZlcyB0aGVuIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICBidXNpbmVzcywgYXMgeW91IGFyZSBkb2luZy4gTmV2ZXIgaGF2ZSB5b3Ugc2hvd24gZ3JlYXRlciB1bmFuaW1pdHkgaW4gYW55IGNhdXNlOwogICAgICAgICAgICAgICAgICAgIG5ldmVyIGhhdmUgeW91IGJlZW4gc28gY29yZGlhbGx5IHVuaXRlZCB3aXRoIHRoZSBzZW5hdGUuIEFuZCBubyB3b25kZXIuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiBub3cgaXMgbm90IGluIHdoYXQgY29uZGl0aW9uIHdlIGFyZSB0byBsaXZlLCBidXQgd2hldGhlciB3ZSBhcmUgdG8gbGl2ZQogICAgICAgICAgICAgICAgICAgIGF0IGFsbCwgb3IgdG8gcGVyaXNoIHdpdGggdG9ydHVyZSBhbmQgaWdub21pbnkuIDwvdHJhbnNsYXRpb24+"
translation['4.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWx0aG91Z2ggbmF0dXJlLCBpbmRlZWQsIGhhcyBhcHBvaW50ZWQgZGVhdGggZm9yIGFsbCBtZW46IGJ1dCB2YWxvciBpcyBhY2N1c3RvbWVkCiAgICAgICAgICAgICAgICAgICAgdG8gd2FyZCBvZmYgYW55IGNydWVsdHkgb3IgZGlzZ3JhY2UgaW4gZGVhdGguIEFuZCB0aGF0IGlzIGFuIGluYWxpZW5hYmxlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGUgUm9tYW4gcmFjZSBhbmQgbmFtZS4gUHJlc2VydmUsIEkgYmVzZWVjaCB5b3UsIE8gUm9tYW5zLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGhhdmUgbGVmdCB5b3UgYXMgYSBzb3J0IG9mIGluaGVyaXRhbmNlLiBBbHRob3VnaAogICAgICAgICAgICAgICAgICAgIGFsbCBvdGhlciB0aGluZ3MgYXJlIHVuY2VydGFpbiwgZmxlZXRpbmcsIHRyYW5zaXRvcnk7IHZpcnR1ZSBhbG9uZSBpcyBwbGFudGVkCiAgICAgICAgICAgICAgICAgICAgZmlybSB3aXRoIHZlcnkgZGVlcCByb290czsgaXQgY2FuIG5vdCBiZSB1bmRlcm1pbmVkIGJ5IGFueSB2aW9sZW5jZTsgaXQgY2FuCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgYmUgbW92ZWQgZnJvbSBpdHMgcG9zaXRpb24uIEJ5IGl0IHlvdXIgYW5jZXN0b3JzIGZpcnN0IHN1YmR1ZWQgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT47IHRoZW4gZGVzdHJveWVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcnRoYWdlIj5DYXJ0aGFnZTwvcGxhY2VOYW1lPiwgb3ZlcnRocmV3IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3NTExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc1MTEiPk51bWFudGlhPC9wbGFjZU5hbWU+LCBhbmQgcmVkdWNlZCB0aGUgbW9zdCBtaWdodHkga2luZ3MKICAgICAgICAgICAgICAgICAgICBhbmQgbW9zdCB3YXJsaWtlIG5hdGlvbnMgdW5kZXIgdGhlIGRvbWluaW9uIG9mIHRoaXMgZW1waXJlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyB0aGVuIGRlc3Ryb3llZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIG92ZXJ0aHJldyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzUxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NTExIj5OdW1hbnRpYTwvcGxhY2VOYW1lPiwgYW5kIHJlZHVjZWQgdGhlIG1vc3QgbWlnaHR5IGtpbmdzCiAgICAgICAgICAgICAgICAgICAgYW5kIG1vc3Qgd2FybGlrZSBuYXRpb25zIHVuZGVyIHRoZSBkb21pbmlvbiBvZiB0aGlzIGVtcGlyZS4gPC90cmFuc2xhdGlvbj4="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5b3VyIGFuY2VzdG9ycywgTyBSb21hbnMsIGhhZCB0byBkZWFsIHdpdGggYW4gZW5lbXkgd2hvIGhhZCBhbHNvIGEgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgYSBzZW5hdGUtaG91c2UsIGEgdHJlYXN1cnksIGhhcm1vbmlvdXMgYW5kIHVuaXRlZCBjaXRpemVucywgYW5kIHdpdGggd2hvbSwgaWYKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIGhhZCBzbyB3aWxsZWQgaXQsIHRoZXJlIG1pZ2h0IGhhdmUgYmVlbiBwZWFjZSBhbmQgdHJlYXRpZXMgb24gc2V0dGxlZAogICAgICAgICAgICAgICAgICAgIHByaW5jaXBsZXMuIEJ1dCB0aGlzIGVuZW15IG9mIHlvdXJzIGlzIGF0dGFja2luZyB5b3VyIHJlcHVibGljLCBidXQgaGFzIG5vbmUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyBpcyBlYWdlciB0byBkZXN0cm95IHRoZSBzZW5hdGUsIHRoYXQgaXMgdG8gc2F5LCB0aGUgY291bmNpbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSB3b3JsZCwgYnV0IGhhcyBubyBwdWJsaWMgY291bmNpbCBoaW1zZWxmOyBoZSBoYXMgZXhoYXVzdGVkIHlvdXIgdHJlYXN1cnksCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBub25lIG9mIGhpcyBvd24uIEZvciBob3cgY2FuIGEgbWFuIGJlIHN1cHBvcnRlZCBieSB0aGUgdW5hbmltaXR5IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zLCB3aG8gaGFzIG5vIGNpdHkgYXQgYWxsPyBBbmQgd2hhdCBwcmluY2lwbGVzIG9mIHBlYWNlIGNhbiB0aGVyZSBiZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW4gd2hvIGlzIGZ1bGwgb2YgaW5jcmVkaWJsZSBjcnVlbHR5LCBhbmQgZGVzdGl0dXRlIG9mIGZhaXRoPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHdob2xlIHRoZW4gb2YgdGhlIGNvbnRlc3QsIE8gUm9tYW5zLCB3aGljaCBpcyBub3cgYmVmb3JlIHRoZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnF1ZXJvciBvZiBhbGwgbmF0aW9ucywgaXMgd2l0aCBhbiBhc3Nhc3NpbiwgYSByb2JiZXIsIGEgU3BhcnRhY3VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5TcGFydGFjdXMgd2FzIHRoZSBnZW5lcmFsIG9mIHRoZSBnbGFkaWF0b3JzIGFuZCBzbGF2ZXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpbGUgd2FyLjwvbm90ZT4gRm9yIGFzIHRvIGhpcyBoYWJpdHVhbCBib2FzdCBvZiBiZWluZyBsaWtlIENhdGlsaW5hLCBoZQogICAgICAgICAgICAgICAgICAgIGlzIGVxdWFsIHRvIGhpbSBpbiB3aWNrZWRuZXNzLCBidXQgaW5mZXJpb3IgaW4gZW5lcmd5LiBIZSwgdGhvdWdoIGhlIGhhZCBubwogICAgICAgICAgICAgICAgICAgIGFybXksIHJhcGlkbHkgbGV2aWVkIG9uZS4gVGhpcyBtYW4gaGFzIGxvc3QgdGhhdCB2ZXJ5IGFybXkgd2hpY2ggaGUgaGFkLiBBcywKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIGJ5IG15IGRpbGlnZW5jZSwgYW5kIHRoZSBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSwgYW5kIHlvdXIgb3duIHplYWwKICAgICAgICAgICAgICAgICAgICBhbmQgdmFsb3IsIHlvdSBjcnVzaGVkIENhdGlsaW5hLCBzbyB5b3Ugd2lsbCB2ZXJ5IHNvb24gaGVhciB0aGF0IHRoaXMgaW5mYW1vdXMKICAgICAgICAgICAgICAgICAgICBwaXJhdGljYWwgZW50ZXJwcmlzZSBvZiBBbnRvbml1cyBoYXMgYmVlbiBwdXQgZG93biBieSB5b3VyIG93biBwZXJmZWN0IGFuZAogICAgICAgICAgICAgICAgICAgIHVuZXhhbXBsZWQgaGFybW9ueSB3aXRoIHRoZSBzZW5hdGUsIGFuZCBieSB0aGUgZ29vZCBmb3J0dW5lIGFuZCB2YWxvciBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYXJtaWVzIGFuZCBnZW5lcmFscy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPiBJLCBmb3IgbXkgcGFydCwgYXMgZmFyCiAgICAgICAgICAgICAgICAgICAgYXMgSSBhbSBhYmxlIHRvIGxhYm9yLCBhbmQgdG8gZWZmZWN0IGFueSB0aGluZyBieSBteSBjYXJlLCBhbmQgZXhlcnRpb25zLCBhbmQKICAgICAgICAgICAgICAgICAgICB2aWdpbGFuY2UsIGFuZCBhdXRob3JpdHksIGFuZCBjb3Vuc2VsLCB3aWxsIG9taXQgbm90aGluZyB3aGljaCBJIG1heSB0aGluawogICAgICAgICAgICAgICAgICAgIHNlcnZpY2VhYmxlIHRvIHlvdXIgbGliZXJ0eS4gTm9yIGNvdWxkIEkgb21pdCBpdCB3aXRob3V0IHdpY2tlZG5lc3MgYWZ0ZXIgYWxsCiAgICAgICAgICAgICAgICAgICAgeW91ciBtb3N0IGFtcGxlIGFuZCBob25vcmFibGUga2luZG5lc3MgdG8gbWUuIEhvd2V2ZXIsIG9uIHRoaXMgZGF5LCBlbmNvdXJhZ2VkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIG1vdGlvbiBvZiBhIG1vc3QgZ2FsbGFudCBtYW4sIGFuZCBvbmUgbW9zdCBmaXJtbHkgYXR0YWNoZWQgdG8geW91LCBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBTZXJ2aWxpdXMsIHdob20geW91IHNlZSBiZWZvcmUgeW91LCBhbmQgaGlzIGNvbGxlYWd1ZXMgYWxzbywgbW9zdCBkaXN0aW5ndWlzaGVkCiAgICAgICAgICAgICAgICAgICAgbWVuLCBhbmQgbW9zdCB2aXJ0dW91cyBjaXRpemVuczsgYW5kIHBhcnRseSwgdG9vLCBieSBteSBhZHZpY2UgYW5kIG15IGV4YW1wbGUsCiAgICAgICAgICAgICAgICAgICAgd2UgaGF2ZSwgZm9yIHRoZSBmaXJzdCB0aW1lIGFmdGVyIGEgbG9uZyBpbnRlcnZhbCwgZmlyZWQgdXAgYWdhaW4gd2l0aCBhIGhvcGUgb2YKICAgICAgICAgICAgICAgICAgICBsaWJlcnR5LjwvcD4KCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlNwYXJ0YWN1cyB3YXMgdGhlIGdlbmVyYWwgb2YgdGhlIGdsYWRpYXRvcnMgYW5kIHNsYXZlcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgU2VydmlsZSB3YXIuPC9ub3RlPiBGb3IgYXMgdG8gaGlzIGhhYml0dWFsIGJvYXN0IG9mIGJlaW5nIGxpa2UgQ2F0aWxpbmEsIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgZXF1YWwgdG8gaGltIGluIHdpY2tlZG5lc3MsIGJ1dCBpbmZlcmlvciBpbiBlbmVyZ3kuIEhlLCB0aG91Z2ggaGUgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgYXJteSwgcmFwaWRseSBsZXZpZWQgb25lLiBUaGlzIG1hbiBoYXMgbG9zdCB0aGF0IHZlcnkgYXJteSB3aGljaCBoZSBoYWQuIEFzLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgYnkgbXkgZGlsaWdlbmNlLCBhbmQgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCBhbmQgeW91ciBvd24gemVhbAogICAgICAgICAgICAgICAgICAgIGFuZCB2YWxvciwgeW91IGNydXNoZWQgQ2F0aWxpbmEsIHNvIHlvdSB3aWxsIHZlcnkgc29vbiBoZWFyIHRoYXQgdGhpcyBpbmZhbW91cwogICAgICAgICAgICAgICAgICAgIHBpcmF0aWNhbCBlbnRlcnByaXNlIG9mIEFudG9uaXVzIGhhcyBiZWVuIHB1dCBkb3duIGJ5IHlvdXIgb3duIHBlcmZlY3QgYW5kCiAgICAgICAgICAgICAgICAgICAgdW5leGFtcGxlZCBoYXJtb255IHdpdGggdGhlIHNlbmF0ZSwgYW5kIGJ5IHRoZSBnb29kIGZvcnR1bmUgYW5kIHZhbG9yIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBhcm1pZXMgYW5kIGdlbmVyYWxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.6.16'] = ""
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3RoaW5nLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBoYXMgZXZlciBzZWVtZWQgdG8gbWUgbG9uZ2VyIHRoYW4gdGhlc2UgY2FsZW5kcyBvZgogICAgICAgICAgICAgICAgICAgIEphbnVhcnk7IGFuZCBJIHRoaW5rIHRoYXQgZm9yIHRoZSBsYXN0IGZldyBkYXlzIHlvdSBoYXZlIGFsbCBiZWVuIGZlZWxpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB0aGluZy4gRm9yIHRob3NlIHdobyBhcmUgd2FnaW5nIHdhciBhZ2FpbnN0IHRoZSByZXB1YmxpYyBoYXZlIG5vdCB3YWl0ZWQKICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcyBkYXkuIEJ1dCB3ZSwgd2hpbGUgaXQgd291bGQgaGF2ZSBiZWVuIG1vc3QgZXNwZWNpYWxseSBwcm9wZXIgZm9yIHVzIHRvCiAgICAgICAgICAgICAgICAgICAgY29tZSB0byB0aGUgYWlkIG9mIHRoZSBnZW5lcmFsIHNhZmV0eSB3aXRoIG91ciBjb3Vuc2VsLCB3ZXJlIG5vdCBzdW1tb25lZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUuIEhvd2V2ZXIsIHRoZSBzcGVlY2gganVzdCBhZGRyZXNzZWQgdG8gdXMgYnkgdGhlIGNvbnN1bHMgaGFzIHJlbW92ZWQgb3VyCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50cyBhcyB0byB3aGF0IGlzIHBhc3QsIGZvciB0aGV5IGhhdmUgc3Bva2VuIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjYWxlbmRzIG9mIEphbnVhcnkgc2VlbSB0byBoYXZlIGJlZW4gbG9uZyB3aXNoZWQgZm9yIHJhdGhlciB0aGFuIHJlYWxseSB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBsYXRlLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB3aGlsZSB0aGUgc3BlZWNoZXMgb2YgdGhlIGNvbnN1bHMgaGF2ZSBlbmNvdXJhZ2VkIG15IG1pbmQsIGFuZCBoYXZlIGdpdmVuIG1lCiAgICAgICAgICAgICAgICAgICAgYSBob3BlLCBub3Qgb25seSBvZiBwcmVzZXJ2aW5nIG91ciBzYWZldHksIGJ1dCBldmVuIG9mIHJlY292ZXJpbmcgb3VyIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIGRpZ25pdHk7IG9uIHRoZSBvdGhlciBoYW5kLCB0aGUgb3BpbmlvbiBvZiB0aGUgbWFuIHdobyBoYXMgYmVlbiBhc2tlZCBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBmaXJzdCB3b3VsZCBoYXZlIGRpc3R1cmJlZCBtZSwgaWYgSSBoYWQgbm90IGNvbmZpZGVuY2UgaW4geW91ciB2aXJ0dWUKICAgICAgICAgICAgICAgICAgICBhbmQgZmlybW5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhpcyBkYXksIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgaGFzIGRhd25lZCB1cG9uIHlvdSwgYW5kIHRoaXMgb3Bwb3J0dW5pdHkgaGFzIGJlZW4gYWZmb3JkZWQgeW91IG9mCiAgICAgICAgICAgICAgICAgICAgcHJvdmluZyB0byB0aGUgUm9tYW4gcGVvcGxlIGhvdyBtdWNoIHZpcnR1ZSwgaG93IG11Y2ggZmlybW5lc3MsIGFuZCBob3cgbXVjaAogICAgICAgICAgICAgICAgICAgIGRpZ25pdHkgZXhpc3RzIGluIHRoZSBjb3Vuc2VscyBvZiB0aGlzIG9yZGVyLiBSZWNvbGxlY3Qgd2hhdCBhIGRheSBpdCB3YXMKICAgICAgICAgICAgICAgICAgICB0aGlydGVlbiBkYXlzIGFnbzsgaG93IGdyZWF0IHdhcyB0aGVuIHlvdXIgdW5hbmltaXR5LCBhbmQgdmlydHVlLCBhbmQgZmlybW5lc3M7CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoYXQgZ3JlYXQgcHJhaXNlLCB3aGF0IGdyZWF0IGdsb3J5LCBhbmQgd2hhdCBncmVhdCBncmF0aXR1ZGUgeW91IGVhcm5lZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIFJvbWFuIHBlb3BsZS4gQW5kIG9uIHRoYXQgZGF5LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB5b3UgcmVzb2x2ZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vIG90aGVyIGFsdGVybmF0aXZlIHdhcyBpbiB5b3VyIHBvd2VyLCBleGNlcHQgZWl0aGVyIGFuIGhvbm9yYWJsZSBwZWFjZSBvciBhCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHdhci4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhpcyBkYXksIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgaGFzIGRhd25lZCB1cG9uIHlvdSwgYW5kIHRoaXMgb3Bwb3J0dW5pdHkgaGFzIGJlZW4gYWZmb3JkZWQgeW91IG9mCiAgICAgICAgICAgICAgICAgICAgcHJvdmluZyB0byB0aGUgUm9tYW4gcGVvcGxlIGhvdyBtdWNoIHZpcnR1ZSwgaG93IG11Y2ggZmlybW5lc3MsIGFuZCBob3cgbXVjaAogICAgICAgICAgICAgICAgICAgIGRpZ25pdHkgZXhpc3RzIGluIHRoZSBjb3Vuc2VscyBvZiB0aGlzIG9yZGVyLiBSZWNvbGxlY3Qgd2hhdCBhIGRheSBpdCB3YXMKICAgICAgICAgICAgICAgICAgICB0aGlydGVlbiBkYXlzIGFnbzsgaG93IGdyZWF0IHdhcyB0aGVuIHlvdXIgdW5hbmltaXR5LCBhbmQgdmlydHVlLCBhbmQgZmlybW5lc3M7CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoYXQgZ3JlYXQgcHJhaXNlLCB3aGF0IGdyZWF0IGdsb3J5LCBhbmQgd2hhdCBncmVhdCBncmF0aXR1ZGUgeW91IGVhcm5lZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIFJvbWFuIHBlb3BsZS4gQW5kIG9uIHRoYXQgZGF5LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB5b3UgcmVzb2x2ZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vIG90aGVyIGFsdGVybmF0aXZlIHdhcyBpbiB5b3VyIHBvd2VyLCBleGNlcHQgZWl0aGVyIGFuIGhvbm9yYWJsZSBwZWFjZSBvciBhCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHdhci4gPC90cmFuc2xhdGlvbj4="
translation['5.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JcyBNYXJjdXMgQW50b25pdXMgZGVzaXJvdXMgb2YgcGVhY2U/IExldCBoaW0gbGF5IGRvd24gaGlzIGFybXMsIGxldCBoaW0gaW1wbG9yZQogICAgICAgICAgICAgICAgICAgIG91ciBwYXJkb24sIGxldCBoaW0gZGVwcmVjYXRlIG91ciB2ZW5nZWFuY2U6IGhlIHcgaWxsIGZpbmQgbm8gb25lIG1vcmUKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmxlIHRoYW4gbWUsIHRob3VnaCwgd2hpbGUgc2Vla2luZyB0byByZWNvbW1lbmQgaGltc2VsZiB0byBpbXBpb3VzCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMsIGhlIGhhcyBjaG9zZW4gdG8gYmUgYW4gZW5lbXkgaW5zdGVhZCBvZiBhIGZyaWVuZCB0byBtZS4gVGhlcmUgaXMsIGluCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIG5vdGhpbmcgd2hpY2ggY2FuIGJlIGdpdmVuIHRvIGhpbSB3aGlsZSB3YWdpbmcgd2FyOyB0aGVyZSB3aWxsIHBlcmhhcHMgYmUKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgd2hpY2ggbWF5IGJlIGdyYW50ZWQgdG8gaGltIGlmIGhlIGNvbWVzIGJlZm9yZSB1cyBhcyBhIHN1cHBsaWFudAogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRvIHNlbmQgYW1iYXNzYWRvcnMgdG8gYSBtYW4gcmVzcGVjdGluZyB3aG9tIHlvdSBwYXNzZWQgYSBtb3N0IGRpZ25pZmllZCBhbmQKICAgICAgICAgICAgICAgICAgICBzZXZlcmUgZGVjaXNpb24gb25seSB0aGlydGVlbiBkYXlzIGFnbywgaXMgbm90IGFuIGFjdCBvZiBsZW5pdHksIGJ1dCwgaWYgSSBhbSB0bwogICAgICAgICAgICAgICAgICAgIHNwZWFrIG15IHJlYWwgb3Bpbmlvbiwgb2YgZG93bnJpZ2h0IG1hZG5lc3MuIEluIHRoZSBmaXJzdCBwbGFjZSwgeW91IHByYWlzZWQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBnZW5lcmFscyB3aG8sIG9mIHRoZWlyIG93biBoZWFkLCBoYWQgdW5kZXJ0YWtlbiB3YXIgYWdhaW5zdCBoaW07IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG5leHQgcGxhY2UsIHlvdSBwcmFpc2VkIHRoZSB2ZXRlcmFucyB3aG8sIHRob3VnaCB0aGV5IGhhZCBiZWVuIHNldHRsZWQgaW4gdGhvc2UKICAgICAgICAgICAgICAgICAgICBjb2xvbmllcyBieSBBbnRvbml1cywgcHJlZmVycmVkIHRoZSBsaWJlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgb2JsaWdhdGlvbnMgd2hpY2ggdGhleSB3ZXJlIHVuZGVyIHRvIGhpbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+IElzCiAgICAgICAgICAgICAgICAgICAgaXQgbm90IHNvPyBXaHkgd2FzIHRoZSBNYXJ0aWFsIGxlZ2lvbj8gd2h5IHdhcyB0aGUgZm91cnRoIGxlZ2lvbiBwcmFpc2VkPyBGb3IgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgZGVzZXJ0ZWQgdGhlIGNvbnN1bCwgdGhleSBvdWdodCB0byBiZSBibGFtZWQ7IGlmIHRoZXkgaGF2ZSBhYmFuZG9uZWQKICAgICAgICAgICAgICAgICAgICBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMsIHRoZW4gdGhleSBhcmUgZGVzZXJ2ZWRseSBwcmFpc2VkLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBJcwogICAgICAgICAgICAgICAgICAgIGl0IG5vdCBzbz8gV2h5IHdhcyB0aGUgTWFydGlhbCBsZWdpb24/IHdoeSB3YXMgdGhlIGZvdXJ0aCBsZWdpb24gcHJhaXNlZD8gRm9yIGlmCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIGRlc2VydGVkIHRoZSBjb25zdWwsIHRoZXkgb3VnaHQgdG8gYmUgYmxhbWVkOyBpZiB0aGV5IGhhdmUgYWJhbmRvbmVkCiAgICAgICAgICAgICAgICAgICAgYW4gZW5lbXkgdG8gdGhlIHJlcHVibGljLCB0aGVuIHRoZXkgYXJlIGRlc2VydmVkbHkgcHJhaXNlZC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgYXMgYXQgdGhhdCB0aW1lIHlvdSBoYWQgbm90IHlldCBnb3QgYW55IGNvbnN1bHMsIHlvdSBwYXNzZWQgYSBkZWNyZWUgdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgbW90aW9uIGNvbmNlcm5pbmcgdGhlIHJld2FyZHMgZm9yIHRoZSBzb2xkaWVycyBhbmQgdGhlIGhvbm9ycyB0byBiZSBjb25mZXJyZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgZ2VuZXJhbHMgc2hvdWxkIGJlIHN1Ym1pdHRlZCB0byB5b3UgYXQgdGhlIGVhcmxpZXN0IG9wcG9ydHVuaXR5LiBBcmUgeW91CiAgICAgICAgICAgICAgICAgICAgdGhlbiBnb2luZyBub3cgdG8gYXJyYW5nZSByZXdhcmRzIGZvciB0aG9zZSBtZW4gd2hvIGhhdmUgdGFrZW4gYXJtcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIGFuZCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIEFudG9uaXVzPyBzbyBhcyB0byBkZXNlcnZlIHRvIGJlIGFzaGFtZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsZWdpb25zIHNob3VsZCBoYXZlIGNvbWUgdG8gbW9yZSBob25vcmFibGUgcmVzb2x1dGlvbnMgdGhhbiB0aGUgc2VuYXRlOgogICAgICAgICAgICAgICAgICAgIGlmLCBpbmRlZWQsIHRoZSBsZWdpb25zIGhhdmUgcmVzb2x2ZWQgdG8gZGVmZW5kIHRoZSBzZW5hdGUgYWdhaW5zdCBBbnRvbml1cywgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBkZWNyZWVzIHRvIHNlbmQgYW1iYXNzYWRvcnMgdG8gQW50b25pdXMuIElzIHRoaXMgZW5jb3VyYWdpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Bpcml0IG9mIHRoZSBzb2xkaWVycywgb3IgZGFtcGluZyB0aGVpciB2aXJ0dWU/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGlzIGlzIHdoYXQgd2UgaGF2ZSBnYWluZWQgaW4gdGhlIGxhc3QgdHdlbHZlIGRheXMsIHRoYXQgdGhlIG1hbiB3aG9tIG5vIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIHBlcnNvbiBleGNlcHQgQ290eWxhIHdhcyB0aGVuIGZvdW5kIHRvIGRlZmVuZCwgaGFzIG5vdyBhZHZvY2F0ZXMsIGV2ZW4gb2YKICAgICAgICAgICAgICAgICAgICBjb25zdWxhciByYW5rLiBXb3VsZCB0aGF0IHRoZXkgaGFkIGFsbCBiZWVuIGFza2VkIHRoZWlyIG9waW5pb24gYmVmb3JlIG1lCiAgICAgICAgICAgICAgICAgICAgKGFsdGhvdWdoIEkgaGF2ZSBteSBzdXNwaWNpb25zIGFzIHRvIHdoYXQgc29tZSBvZiB0aG9zZSBtZW4gd2hvIHdpbGwgYmUgYXNrZWQKICAgICAgICAgICAgICAgICAgICBhZnRlciBtZSwgYXJlIGludGVuZGluZyB0byBzYXkpOyBJIHNob3VsZCBmaW5kIGl0IGVhc2llciB0byBzcGVhayBhZ2FpbnN0IHRoZW0KICAgICAgICAgICAgICAgICAgICBpZiBhbnkgYXJndW1lbnQgYXBwZWFyZWQgdG8gaGF2ZSBiZWVuIGFkdmFuY2VkLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGVyZSBpcyBhbiBvcGluaW9uIGluIHNvbWUgcXVhcnRlcnMsIHRoYXQgc29tZSBvbmUgaW50ZW5kcyB0byBwcm9wb3NlIHRvCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIEFudG9uaXVzIHRoYXQgZmFydGhlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIFBsYW5jdXMgaXMgYXQgcHJlc2VudCBpbiBwb3NzZXNzaW9uIG9mLiBXaGF0IGVsc2UgaXMgdGhhdCBidXQgc3VwcGx5aW5nIGFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgd2l0aCBhbGwgdGhlIGFybXMgbmVjZXNzYXJ5IGZvciBjaXZpbCB3YXI6IGZpcnN0IG9mIGFsbCB3aXRoIHRoZSBzaW5ld3Mgb2YKICAgICAgICAgICAgICAgICAgICB3YXIsIG1vbmV5IGluIGFidW5kYW5jZSwgb2Ygd2hpY2ggaGUgaXMgYXQgcHJlc2VudCBkZXN0aXR1dGU7IGFuZCBzZWNvbmRseSwgd2l0aAogICAgICAgICAgICAgICAgICAgIGFzIG11Y2ggY2F2YWxyeSBhcyBoZSBwbGVhc2VzPyBDYXZhbHJ5IGRvIEkgc2F5PyBIZSBpcyBhIGxpa2VseSBtYW4gdG8gaGVzaXRhdGUsCiAgICAgICAgICAgICAgICAgICAgSSBzdXBwb3NlLCB0byBicmluZyB3aXRoIGhpbSB0aGUgYmFyYmFyaWFuIG5hdGlvbnM74oCUYSBtYW4gd2hvIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgc2VlIHRoaXMgaXMgc2Vuc2VsZXNzOyBoZSB3aG8gZG9lcyBzZWUgaXQsIGFuZCBzdGlsbCBhZHZvY2F0ZXMgc3VjaCBhIG1lYXN1cmUsCiAgICAgICAgICAgICAgICAgICAgaXMgaW1waW91cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IFdpbGwgeW91IGZ1cm5pc2ggYSB3aWNrZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVzcGVyYXRlIGNpdGl6ZW4gd2l0aCBhbiBhcm15IG9mIEdhdWxzIGFuZCBHZXJtYW5zLCB3aXRoIG1vbmV5LCBhbmQgaW5mYW50cnksCiAgICAgICAgICAgICAgICAgICAgYW5kIGNhdmFscnksIGFuZCBhbGwgc29ydHMgb2YgcmVzb3VyY2VzPyBBbGwgdGhlc2UgZXhjdXNlcyBhcmUgbm8gZXhjdXNlIGF0CiAgICAgICAgICAgICAgICAgICAgYWxsOuKAlOKAnEhlIGlzIGEgZnJpZW5kIG9mIG1pbmUu4oCdIExldCBoaW0gZmlyc3QgYmUgYQogICAgICAgICAgICAgICAgICAgIGZyaWVuZCBvZiBoaXMgY291bnRyeTrigJTigJwgSGUgaXMgYSByZWxhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIG1pbmUu4oCdIENhbiBhbnkgcmVsYXRpb25zaGlwIGJlIG5lYXJlciB0aGFuIHRoYXQgb2Ygb25lJ3MgY291bnRyeSwgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCBldmVuIG9uZSdzIHBhcmVudHMgYXJlIGNvbXByaXNlZD8g4oCcSGUgaGFzIGdpdmVuIG1lCiAgICAgICAgICAgICAgICAgICAgbW9uZXk64oCd4oCUSSBzaG91bGQgbGlrZSB0byBzZWUgdGhlIG1hbiB3aG8gd2lsbCBkYXJlIHRvIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQuIEJ1dCB3aGVuIEkgaGF2ZSBleHBsYWluZWQgd2hhdCBpcyB0aGUgcmVhbCBvYmplY3QgYWltZWQgYXQsIGl0IHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBlYXN5IGZvciB5b3UgdG8gZGVjaWRlIHdoaWNoIG9waW5pb24geW91IG91Z2h0IHRvIGFncmVlIHdpdGggYW5kIGFkb3B0LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aGljaCBQbGFuY3VzIGlzIGF0IHByZXNlbnQgaW4gcG9zc2Vzc2lvbiBvZi4gV2hhdCBlbHNlIGlzIHRoYXQgYnV0IHN1cHBseWluZyBhbgogICAgICAgICAgICAgICAgICAgIGVuZW15IHdpdGggYWxsIHRoZSBhcm1zIG5lY2Vzc2FyeSBmb3IgY2l2aWwgd2FyOiBmaXJzdCBvZiBhbGwgd2l0aCB0aGUgc2luZXdzIG9mCiAgICAgICAgICAgICAgICAgICAgd2FyLCBtb25leSBpbiBhYnVuZGFuY2UsIG9mIHdoaWNoIGhlIGlzIGF0IHByZXNlbnQgZGVzdGl0dXRlOyBhbmQgc2Vjb25kbHksIHdpdGgKICAgICAgICAgICAgICAgICAgICBhcyBtdWNoIGNhdmFscnkgYXMgaGUgcGxlYXNlcz8gQ2F2YWxyeSBkbyBJIHNheT8gSGUgaXMgYSBsaWtlbHkgbWFuIHRvIGhlc2l0YXRlLAogICAgICAgICAgICAgICAgICAgIEkgc3VwcG9zZSwgdG8gYnJpbmcgd2l0aCBoaW0gdGhlIGJhcmJhcmlhbiBuYXRpb25zO+KAlGEgbWFuIHdobyBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIHNlZSB0aGlzIGlzIHNlbnNlbGVzczsgaGUgd2hvIGRvZXMgc2VlIGl0LCBhbmQgc3RpbGwgYWR2b2NhdGVzIHN1Y2ggYSBtZWFzdXJlLAogICAgICAgICAgICAgICAgICAgIGlzIGltcGlvdXMuIDwvdHJhbnNsYXRpb24+"
translation['5.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBXaWxsIHlvdSBmdXJuaXNoIGEgd2lja2VkIGFuZAogICAgICAgICAgICAgICAgICAgIGRlc3BlcmF0ZSBjaXRpemVuIHdpdGggYW4gYXJteSBvZiBHYXVscyBhbmQgR2VybWFucywgd2l0aCBtb25leSwgYW5kIGluZmFudHJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCBjYXZhbHJ5LCBhbmQgYWxsIHNvcnRzIG9mIHJlc291cmNlcz8gQWxsIHRoZXNlIGV4Y3VzZXMgYXJlIG5vIGV4Y3VzZSBhdAogICAgICAgICAgICAgICAgICAgIGFsbDrigJTigJxIZSBpcyBhIGZyaWVuZCBvZiBtaW5lLuKAnSBMZXQgaGltIGZpcnN0IGJlIGEKICAgICAgICAgICAgICAgICAgICBmcmllbmQgb2YgaGlzIGNvdW50cnk64oCU4oCcIEhlIGlzIGEgcmVsYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBtaW5lLuKAnSBDYW4gYW55IHJlbGF0aW9uc2hpcCBiZSBuZWFyZXIgdGhhbiB0aGF0IG9mIG9uZSdzIGNvdW50cnksIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggZXZlbiBvbmUncyBwYXJlbnRzIGFyZSBjb21wcmlzZWQ/IOKAnEhlIGhhcyBnaXZlbiBtZQogICAgICAgICAgICAgICAgICAgIG1vbmV5OuKAneKAlEkgc2hvdWxkIGxpa2UgdG8gc2VlIHRoZSBtYW4gd2hvIHdpbGwgZGFyZSB0byBzYXkKICAgICAgICAgICAgICAgICAgICB0aGF0LiBCdXQgd2hlbiBJIGhhdmUgZXhwbGFpbmVkIHdoYXQgaXMgdGhlIHJlYWwgb2JqZWN0IGFpbWVkIGF0LCBpdCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgZWFzeSBmb3IgeW91IHRvIGRlY2lkZSB3aGljaCBvcGluaW9uIHlvdSBvdWdodCB0byBhZ3JlZSB3aXRoIGFuZCBhZG9wdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIG1hdHRlciBhdCBpc3N1ZSBpcywgd2hldGhlciBwb3dlciBpcyB0byBiZSBnaXZlbiB0byBNYXJjdXMgQW50b25pdXMgb2YKICAgICAgICAgICAgICAgICAgICBvcHByZXNzaW5nIHRoZSByZXB1YmxpYywgb2YgbWFzc2FjcmluZyB0aGUgdmlydHVvdXMgY2l0aXplbnMsIG9mIHBsdW5kZXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgb2YgZGlzdHJpYnV0aW5nIHRoZSBsYW5kcyBhbW9uZyBoaXMgcm9iYmVycywgb2Ygb3ZlcndoZWxtaW5nIHRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBpbiBzbGF2ZXJ5OyBvciwgd2hldGhlciBoZSBpcyBub3QgdG8gYmUgYWxsb3dlZCB0byBkbyBhbGwgdGhpcy4gRG8geW91CiAgICAgICAgICAgICAgICAgICAgZG91YnQgd2hhdCB5b3UgYXJlIHRvIGRvPyDigJxPaCwgYnV0IGFsbCB0aGlzIGRvZXMgbm90IGFwcGx5IHRvCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMu4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gQ290eWxhIHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIHZlbnR1cmUgdG8gc2F5IHRoYXQuIEZvciB3aGF0IGRvZXMgbm90IGFwcGx5IHRvIGhpbT8gQSBtYW4gd2hvLCB3aGlsZSBoZSBzYXlzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBpcyBkZWZlbmRpbmcgdGhlIGFjdHMgb2YgYW5vdGhlciwgcGVydmVydHMgYWxsIHRob3NlIGxhd3Mgb2YgaGlzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2UgbWlnaHQgbW9zdCBwcm9wZXJseSBwcmFpc2UuIENhZXNhciB3aXNoZWQgdG8gZHJhaW4gdGhlIG1hcnNoZXM6IHRoaXMgbWFuIGhhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gdG8gdGhhdCBtb2RlcmF0ZSBtYW4KICAgICAgICAgICAgICAgICAgICBMdWNpdXMgQW50b25pdXMgdG8gZGlzdHJpYnV0ZS7igJRXaGF0PyBoYXMgdGhlIFJvbWFuIHBlb3BsZSBhZG9wdGVkIHRoaXMKICAgICAgICAgICAgICAgICAgICBsYXc/4oCUV2hhdD8gY291bGQgaXQgYmUgcGFzc2VkIHdpdGggYSBwcm9wZXIgcmVnYXJkIGZvciB0aGUgYXVzcGljZXM/CiAgICAgICAgICAgICAgICAgICAgQnV0IHRoaXMgY29uc2NpZW50aW91cyBhdWd1ciBhY3RzIGluIHJlZmVyZW5jZSB0byB0aGUgYXVzcGljZXMgd2l0aG91dCBoaXMKICAgICAgICAgICAgICAgICAgICBjb2xsZWFndWVzLiBBbHRob3VnaCB0aG9zZSBhdXNwaWNlcyBkbyBub3QgcmVxdWlyZSBhbnkKICAgICAgICAgICAgICAgICAgICBpbnRlcnByZXRhdGlvbuKAlGZvciB3aG8gaXMgdGhlcmUgd2hvIGlzIGlnbm9yYW50IHRoYXQgaXQgaXMgaW1waW91cyB0bwogICAgICAgICAgICAgICAgICAgIHN1Ym1pdCBhbnkgbW90aW9uIHRvIHRoZSBwZW9wbGUgd2hpbGUgaXQgaXMgdGh1bmRlcmluZz8gVGhlIHRyaWJ1bmVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBjYXJyaWVkIGxhd3MgcmVzcGVjdGluZyB0aGUgcHJvdmluY2VzIGluIG9wcG9zaXRpb24gdG8gdGhlIGFjdHMgb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXI7IENhZXNhciBoYWQgZXh0ZW5kZWQgdGhlIHByb3Zpc2lvbnMgb2YgaGlzIGxhdyBvdmVyIHR3byB5ZWFyczsgQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBvdmVyIHNpeCB5ZWFycy4gSGFzIHRoZW4gdGhlIFJvbWFuIHBlb3BsZSBhZG9wdGVkIHRoaXMgbGF3PyBXaGF0PyB3YXMgaXQgZXZlcgogICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJseSBwcm9tdWxnYXRlZD8gV2hhdD8gd2FzIGl0IG5vdCBwYXNzZWQgYmVmb3JlIGl0IHdhcyBldmVuIGRyYXduIHVwPyBEaWQKICAgICAgICAgICAgICAgICAgICB3ZSBub3Qgc2VlIHRoZSBkZWVkIGRvbmUgYmVmb3JlIHdlIGV2ZW4gc3VzcGVjdGVkIHRoYXQgaXQgd2FzIGdvaW5nIHRvIGJlIGRvbmU/CiAgICAgICAgICAgICAgICAgICAgV2hlcmUgaXMgdGhlIENhZWNpbGlhbiBhbmQgRGlkaWFuIGxhdz8gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIG9mIHRoZSBsYXcgdGhhdCBzdWNoIGJpbGxzIHNob3VsZCBiZSBwdWJsaXNoZWQgb24gdGhyZWUgbWFya2V0LWRheXM/IFdoYXQKICAgICAgICAgICAgICAgICAgICBpcyBiZWNvbWUgb2YgdGhlIHBlbmFsdHkgYXBwb2ludGVkIGJ5IHRoZSByZWNlbnQgSnVuaWFuIGFuZCBMaWNpbmlhbiBsYXc/IENhbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIGxhd3MgYmUgcmF0aWZpZWQgd2l0aG91dCB0aGUgZGVzdHJ1Y3Rpb24gb2YgYWxsIG90aGVyIGxhd3M/IEhhcyBhbnkgb25lCiAgICAgICAgICAgICAgICAgICAgaGFkIGEgcmlnaHQgb2YgZW50ZXJpbmcgdGhlIGZvcnVtPyBNb3Jlb3ZlciB3aGF0IHRodW5kZXIgYW5kIHdoYXQgYSBzdG9ybSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2FzISBzbyB0aGF0LCBldmVuIGlmIHRoZSBjb25zaWRlcmF0aW9uIG9mIHRoZSBhdXNwaWNlcyBoYWQgbm8gd2VpZ2h0IHdpdGgKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMsIGl0IHdvdWxkIHNlZW0gc3RyYW5nZSB0aGF0IGhlIGNvdWxkIGVuZHVyZSBhbmQgYmVhciBzdWNoCiAgICAgICAgICAgICAgICAgICAgZXhjZWVkaW5nIHZpb2xlbmNlIG9mIHRlbXBlc3QsIGFuZCByYWluIGFuZCB3aGlybHdpbmQuIFdoZW4gdGhlcmVmb3JlIGhlLCBhcwogICAgICAgICAgICAgICAgICAgIGF1Z3VyLCBzYXlzIHRoYXQgaGUgY2FycmllZCBhIGxhdyB3aGlsZSBKdXBpdGVyIHdhcyBub3Qgb25seSB0aHVuZGVyaW5nLCBidXQKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgdXR0ZXJpbmcgYW4gZXhwcmVzcyBwcm9oaWJpdGlvbiBvZiBpdCBieSBoaXMgY2xhbW9yIGZyb20gaGVhdmVuLCB3aWxsIGhlCiAgICAgICAgICAgICAgICAgICAgaGVzaXRhdGUgdG8gY29uZmVzcyB0aGF0IGl0IHdhcyBjYXJyaWVkIGluIHZpb2xhdGlvbiBvZiB0aGUgYXVzcGljZXM/IDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdD8gZG9lcyB0aGUgdmlydHVvdXMgYXVndXIgdGhpbmsgdGhhdCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHRvIGRvIHdpdGggdGhlIGF1c3BpY2VzLCB0aGF0IGhlIGNhcnJpZWQgdGhlIGxhdyB3aXRoIHRoZSBhaWQgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGNvbGxlYWd1ZSB3aG9zZSBlbGVjdGlvbiBoZSBoaW1zZWxmIHZpdGlhdGVkIGJ5IGdpdmluZyBub3RpY2Ugb2YgdGhlIGF1c3BpY2VzPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gQ290eWxhIHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIHZlbnR1cmUgdG8gc2F5IHRoYXQuIEZvciB3aGF0IGRvZXMgbm90IGFwcGx5IHRvIGhpbT8gQSBtYW4gd2hvLCB3aGlsZSBoZSBzYXlzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBpcyBkZWZlbmRpbmcgdGhlIGFjdHMgb2YgYW5vdGhlciwgcGVydmVydHMgYWxsIHRob3NlIGxhd3Mgb2YgaGlzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2UgbWlnaHQgbW9zdCBwcm9wZXJseSBwcmFpc2UuIENhZXNhciB3aXNoZWQgdG8gZHJhaW4gdGhlIG1hcnNoZXM6IHRoaXMgbWFuIGhhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0byB0aGF0IG1vZGVyYXRlIG1hbgogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBBbnRvbml1cyB0byBkaXN0cmlidXRlLuKAlFdoYXQ/IGhhcyB0aGUgUm9tYW4gcGVvcGxlIGFkb3B0ZWQgdGhpcwogICAgICAgICAgICAgICAgICAgIGxhdz/igJRXaGF0PyBjb3VsZCBpdCBiZSBwYXNzZWQgd2l0aCBhIHByb3BlciByZWdhcmQgZm9yIHRoZSBhdXNwaWNlcz8KICAgICAgICAgICAgICAgICAgICBCdXQgdGhpcyBjb25zY2llbnRpb3VzIGF1Z3VyIGFjdHMgaW4gcmVmZXJlbmNlIHRvIHRoZSBhdXNwaWNlcyB3aXRob3V0IGhpcwogICAgICAgICAgICAgICAgICAgIGNvbGxlYWd1ZXMuIEFsdGhvdWdoIHRob3NlIGF1c3BpY2VzIGRvIG5vdCByZXF1aXJlIGFueQogICAgICAgICAgICAgICAgICAgIGludGVycHJldGF0aW9u4oCUZm9yIHdobyBpcyB0aGVyZSB3aG8gaXMgaWdub3JhbnQgdGhhdCBpdCBpcyBpbXBpb3VzIHRvCiAgICAgICAgICAgICAgICAgICAgc3VibWl0IGFueSBtb3Rpb24gdG8gdGhlIHBlb3BsZSB3aGlsZSBpdCBpcyB0aHVuZGVyaW5nPyBUaGUgdHJpYnVuZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGNhcnJpZWQgbGF3cyByZXNwZWN0aW5nIHRoZSBwcm92aW5jZXMgaW4gb3Bwb3NpdGlvbiB0byB0aGUgYWN0cyBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhcjsgQ2Flc2FyIGhhZCBleHRlbmRlZCB0aGUgcHJvdmlzaW9ucyBvZiBoaXMgbGF3IG92ZXIgdHdvIHllYXJzOyBBbnRvbml1cwogICAgICAgICAgICAgICAgICAgIG92ZXIgc2l4IHllYXJzLiBIYXMgdGhlbiB0aGUgUm9tYW4gcGVvcGxlIGFkb3B0ZWQgdGhpcyBsYXc/IFdoYXQ/IHdhcyBpdCBldmVyCiAgICAgICAgICAgICAgICAgICAgcmVndWxhcmx5IHByb211bGdhdGVkPyBXaGF0PyB3YXMgaXQgbm90IHBhc3NlZCBiZWZvcmUgaXQgd2FzIGV2ZW4gZHJhd24gdXA/IERpZAogICAgICAgICAgICAgICAgICAgIHdlIG5vdCBzZWUgdGhlIGRlZWQgZG9uZSBiZWZvcmUgd2UgZXZlbiBzdXNwZWN0ZWQgdGhhdCBpdCB3YXMgZ29pbmcgdG8gYmUgZG9uZT8KICAgICAgICAgICAgICAgICAgICBXaGVyZSBpcyB0aGUgQ2FlY2lsaWFuIGFuZCBEaWRpYW4gbGF3PyA8L3RyYW5zbGF0aW9uPg=="
translation['5.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIG9mIHRoZSBsYXcgdGhhdCBzdWNoIGJpbGxzIHNob3VsZCBiZSBwdWJsaXNoZWQgb24gdGhyZWUgbWFya2V0LWRheXM/IFdoYXQKICAgICAgICAgICAgICAgICAgICBpcyBiZWNvbWUgb2YgdGhlIHBlbmFsdHkgYXBwb2ludGVkIGJ5IHRoZSByZWNlbnQgSnVuaWFuIGFuZCBMaWNpbmlhbiBsYXc/IENhbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIGxhd3MgYmUgcmF0aWZpZWQgd2l0aG91dCB0aGUgZGVzdHJ1Y3Rpb24gb2YgYWxsIG90aGVyIGxhd3M/IEhhcyBhbnkgb25lCiAgICAgICAgICAgICAgICAgICAgaGFkIGEgcmlnaHQgb2YgZW50ZXJpbmcgdGhlIGZvcnVtPyBNb3Jlb3ZlciB3aGF0IHRodW5kZXIgYW5kIHdoYXQgYSBzdG9ybSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2FzISBzbyB0aGF0LCBldmVuIGlmIHRoZSBjb25zaWRlcmF0aW9uIG9mIHRoZSBhdXNwaWNlcyBoYWQgbm8gd2VpZ2h0IHdpdGgKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMsIGl0IHdvdWxkIHNlZW0gc3RyYW5nZSB0aGF0IGhlIGNvdWxkIGVuZHVyZSBhbmQgYmVhciBzdWNoCiAgICAgICAgICAgICAgICAgICAgZXhjZWVkaW5nIHZpb2xlbmNlIG9mIHRlbXBlc3QsIGFuZCByYWluIGFuZCB3aGlybHdpbmQuIFdoZW4gdGhlcmVmb3JlIGhlLCBhcwogICAgICAgICAgICAgICAgICAgIGF1Z3VyLCBzYXlzIHRoYXQgaGUgY2FycmllZCBhIGxhdyB3aGlsZSBKdXBpdGVyIHdhcyBub3Qgb25seSB0aHVuZGVyaW5nLCBidXQKICAgICAgICAgICAgICAgICAgICBhbG1vc3QgdXR0ZXJpbmcgYW4gZXhwcmVzcyBwcm9oaWJpdGlvbiBvZiBpdCBieSBoaXMgY2xhbW9yIGZyb20gaGVhdmVuLCB3aWxsIGhlCiAgICAgICAgICAgICAgICAgICAgaGVzaXRhdGUgdG8gY29uZmVzcyB0aGF0IGl0IHdhcyBjYXJyaWVkIGluIHZpb2xhdGlvbiBvZiB0aGUgYXVzcGljZXM/IDwvdHJhbnNsYXRpb24+"
translation['5.3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyBkb2VzIHRoZSB2aXJ0dW91cyBhdWd1ciB0aGluayB0aGF0IGl0IGhhcwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgYXVzcGljZXMsIHRoYXQgaGUgY2FycmllZCB0aGUgbGF3IHdpdGggdGhlIGFpZCBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29sbGVhZ3VlIHdob3NlIGVsZWN0aW9uIGhlIGhpbXNlbGYgdml0aWF0ZWQgYnkgZ2l2aW5nIG5vdGljZSBvZiB0aGUgYXVzcGljZXM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHBlcmhhcHMgd2UsIHdobyBhcmUgaGlzIGNvbGxlYWd1ZXMsIG1heSBiZSB0aGUgaW50ZXJwcmV0ZXJzIG9mIHRoZSBhdXNwaWNlcz8KICAgICAgICAgICAgICAgICAgICBEbyB3ZSBhbHNvIHdhbnQgaW50ZXJwcmV0ZXJzIG9mIGFybXM/IEluIHRoZSBmaXJzdCBwbGFjZSwgYWxsIHRoZSBhcHByb2FjaGVzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcnVtIHdlcmUgc28gZmVuY2VkIHJvdW5kLCB0aGF0IGV2ZW4gaWYgbm8gYXJtZWQgbWVuIHdlcmUgc3RhbmRpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd2F5LCBzdGlsbCBpdCB3b3VsZCBoYXZlIGJlZW4gaW1wb3NzaWJsZSB0byBlbnRlciB0aGUgZm9ydW0gZXhjZXB0IGJ5IHRlYXJpbmcKICAgICAgICAgICAgICAgICAgICBkb3duIHRoZSBiYXJyaWNhZGVzLiBCdXQgdGhlIGd1YXJkcyB3ZXJlIGFycmFuZ2VkIGluIHN1Y2ggYSBtYW5uZXIsIHRoYXQsIGFzIHRoZQogICAgICAgICAgICAgICAgICAgIGFjY2VzcyBvZiBhbiBlbmVteSB0byBhIGNpdHkgaXMgcHJldmVudGVkLCBzbyB5b3UgbWlnaHQgaW4gdGhpcyBpbnN0YW5jZSBzZWUgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVyZ2Vzc2VzIGFuZCB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSBjdXQgb2ZmIGJ5IGZvcnRzIGFuZCB3b3JrcyBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIGVudHJhbmNlIHRvIHRoZSBmb3J1bS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBPbiB3aGljaCBhY2NvdW50IEkKICAgICAgICAgICAgICAgICAgICBnaXZlIG15IHZvdGUgdGhhdCB0aG9zZSBsYXdzIHdoaWNoIE1hcmN1cyBBbnRvbml1cyBpcyBzYWlkIHRvIGhhdmUgY2FycmllZCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWxsIGNhcnJpZWQgYnkgdmlvbGVuY2UsIGFuZCBpbiB2aW9sYXRpb24gb2YgdGhlIGF1c3BpY2VzOyBhbmQgdGhhdCB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGJvdW5kIGJ5IHRoZW0uIElmIE1hcmN1cyBBbnRvbml1cyBpcyBzYWlkIHRvIGhhdmUgY2FycmllZCBhbnkgbGF3IGFib3V0CiAgICAgICAgICAgICAgICAgICAgY29uZmlybWluZyB0aGUgYWN0cyBvZiBDYWVzYXIgYW5kIGFib2xpc2hpbmcgdGhlIGRpY3RhdG9yc2hpcCBmb3JldmVyLCBhbmQgb2YKICAgICAgICAgICAgICAgICAgICBsZWFkaW5nIGNvbG9uaWVzIGludG8gYW55IGxhbmRzLCB0aGVuIEkgdm90ZSB0aGF0IHRob3NlIGxhd3MgYmUgcGFzc2VkIG92ZXIKICAgICAgICAgICAgICAgICAgICBhZ2Fpbiwgd2l0aCBhIGR1ZSByZWdhcmQgdG8gdGhlIGF1c3BpY2VzLCBzbyB0aGF0IHRoZXkgbWF5IGJpbmQgdGhlIHBlb3BsZS4gRm9yCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggdGhleSBtYXkgYmUgZ29vZCBtZWFzdXJlcyB3aGljaCBoZSBwYXNzZWQgaXJyZWd1bGFybHkgYW5kIGJ5IHZpb2xlbmNlLAogICAgICAgICAgICAgICAgICAgIHN0aWxsIHRoZXkgYXJlIG5vdCB0byBiZSBhY2NvdW50ZWQgbGF3cywgYW5kIHRoZSB3aG9sZSBhdWRhY2l0eSBvZiB0aGlzIGZyYW50aWMKICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3IgbXVzdCBoZSByZXB1ZGlhdGVkIGJ5IG91ciBhdXRob3JpdHkuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGF0IHNxdWFuZGVyaW5nIG9mIHRoZSBwdWJsaWMgbW9uZXkgY2FuIG5vdCBwb3NzaWJseSBiZSBlbmR1cmVkIGJ5IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgZ290IHJpZCBvZiBzZXZlbiBodW5kcmVkIG1pbGxpb25zIG9mIHNlc3RlcmNlcyBieSBmb3JnZWQgZW50cmllcyBhbmQgZGVlZHMgb2YKICAgICAgICAgICAgICAgICAgICBnaWZ0cywgc28gdGhhdCBpdCBzZWVtcyBhbiBhYnNvbHV0ZSBtaXJhY2xlIHRoYXQgc28gdmFzdCBhIHN1bSBvZiBtb25leQogICAgICAgICAgICAgICAgICAgIGJlbG9uZ2luZyB0byB0aGUgUm9tYW4gcGVvcGxlIGNhbiBoYXZlIGRpc2FwcGVhcmVkIGluIHNvIHNob3J0IGEgdGltZS4gV2hhdD8gYXJlCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgZW5vcm1vdXMgcHJvZml0cyB0byBiZSBlbmR1cmVkIHdoaWNoIHRoZSBob3VzZWhvbGQgb2YgTWFyY3VzIEFudG9uaXVzIGhhcwogICAgICAgICAgICAgICAgICAgIHN3YWxsb3dlZCB1cD8gSGUgd2FzIGNvbnRpbnVhbGx5IHNlbGxpbmcgZm9yZ2VkIGRlY3JlZXM7IG9yZGVyaW5nIHRoZSBuYW1lcyBvZgogICAgICAgICAgICAgICAgICAgIGtpbmdkb21zIGFuZCBzdGF0ZXMsIGFuZCBncmFudHMgb2YgZXhlbXB0aW9ucyB0byBiZSBlbmdyYXZlZCBvbiBicmFzcywgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgYnJpYmVzIGZvciBzdWNoIG9yZGVycy4gQW5kIGhpcyBzdGF0ZW1lbnQgYWx3YXlzIHdhcywgdGhhdCBoZSB3YXMgZG9pbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSB0aGluZ3MgaW4gb2JlZGllbmNlIHRvIHRoZSBtZW1vcmFuZGEgb2YgQ2Flc2FyLCBvZiB3aGljaCBoZSBoaW1zZWxmIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSBhdXRob3IuIEluIHRoZSBpbnRlcmlvciBvZiBoaXMgaG91c2UgdGhlcmUgd2FzIGdvaW5nIG9uIGEgYnJpc2sgbWFya2V0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIHJlcHVibGljLiBIaXMgd2lmZSwgbW9yZSBmb3J0dW5hdGUgZm9yIGhlcnNlbGYgdGhhbiBmb3IgaGVyIGh1c2JhbmQsCiAgICAgICAgICAgICAgICAgICAgd2FzIGhvbGRpbmcgYW4gYXVjdGlvbiBvZiBraW5nZG9tcyBhbmQgcHJvdmluY2VzOiBleGlsZXMgd2VyZSByZXN0b3JlZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgYW55IGxhdywgYXMgaWYgYnkgbGF3OiBhbmQgdW5sZXNzIGFsbCB0aGVzZSBhY3RzIGFyZSByZXNjaW5kZWQgYnkgdGhlIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzZW5hdGUsIG5vdyB0aGF0IHdlIGhhdmUgYWdhaW4gYXJyaXZlZCBhdCBhIGhvcGUgb2YgcmVjb3ZlcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYywgdGhlcmUgd2lsbCBiZSBubyBsaWtlbmVzcyBvZiBhIGZyZWUgY2l0eSBsZWZ0IHRvIHVzLiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gT24gd2hpY2ggYWNjb3VudCBJCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBteSB2b3RlIHRoYXQgdGhvc2UgbGF3cyB3aGljaCBNYXJjdXMgQW50b25pdXMgaXMgc2FpZCB0byBoYXZlIGNhcnJpZWQgd2VyZQogICAgICAgICAgICAgICAgICAgIGFsbCBjYXJyaWVkIGJ5IHZpb2xlbmNlLCBhbmQgaW4gdmlvbGF0aW9uIG9mIHRoZSBhdXNwaWNlczsgYW5kIHRoYXQgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGlzIG5vdCBib3VuZCBieSB0aGVtLiBJZiBNYXJjdXMgQW50b25pdXMgaXMgc2FpZCB0byBoYXZlIGNhcnJpZWQgYW55IGxhdyBhYm91dAogICAgICAgICAgICAgICAgICAgIGNvbmZpcm1pbmcgdGhlIGFjdHMgb2YgQ2Flc2FyIGFuZCBhYm9saXNoaW5nIHRoZSBkaWN0YXRvcnNoaXAgZm9yZXZlciwgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgbGVhZGluZyBjb2xvbmllcyBpbnRvIGFueSBsYW5kcywgdGhlbiBJIHZvdGUgdGhhdCB0aG9zZSBsYXdzIGJlIHBhc3NlZCBvdmVyCiAgICAgICAgICAgICAgICAgICAgYWdhaW4sIHdpdGggYSBkdWUgcmVnYXJkIHRvIHRoZSBhdXNwaWNlcywgc28gdGhhdCB0aGV5IG1heSBiaW5kIHRoZSBwZW9wbGUuIEZvcgogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIHRoZXkgbWF5IGJlIGdvb2QgbWVhc3VyZXMgd2hpY2ggaGUgcGFzc2VkIGlycmVndWxhcmx5IGFuZCBieSB2aW9sZW5jZSwKICAgICAgICAgICAgICAgICAgICBzdGlsbCB0aGV5IGFyZSBub3QgdG8gYmUgYWNjb3VudGVkIGxhd3MsIGFuZCB0aGUgd2hvbGUgYXVkYWNpdHkgb2YgdGhpcyBmcmFudGljCiAgICAgICAgICAgICAgICAgICAgZ2xhZGlhdG9yIG11c3QgaGUgcmVwdWRpYXRlZCBieSBvdXIgYXV0aG9yaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoYXQgc3F1YW5kZXJpbmcgb2YgdGhlIHB1YmxpYyBtb25leSBjYW4gbm90IHBvc3NpYmx5IGJlIGVuZHVyZWQgYnkgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBnb3QgcmlkIG9mIHNldmVuIGh1bmRyZWQgbWlsbGlvbnMgb2Ygc2VzdGVyY2VzIGJ5IGZvcmdlZCBlbnRyaWVzIGFuZCBkZWVkcyBvZgogICAgICAgICAgICAgICAgICAgIGdpZnRzLCBzbyB0aGF0IGl0IHNlZW1zIGFuIGFic29sdXRlIG1pcmFjbGUgdGhhdCBzbyB2YXN0IGEgc3VtIG9mIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgYmVsb25naW5nIHRvIHRoZSBSb21hbiBwZW9wbGUgY2FuIGhhdmUgZGlzYXBwZWFyZWQgaW4gc28gc2hvcnQgYSB0aW1lLiBXaGF0PyBhcmUKICAgICAgICAgICAgICAgICAgICB0aG9zZSBlbm9ybW91cyBwcm9maXRzIHRvIGJlIGVuZHVyZWQgd2hpY2ggdGhlIGhvdXNlaG9sZCBvZiBNYXJjdXMgQW50b25pdXMgaGFzCiAgICAgICAgICAgICAgICAgICAgc3dhbGxvd2VkIHVwPyBIZSB3YXMgY29udGludWFsbHkgc2VsbGluZyBmb3JnZWQgZGVjcmVlczsgb3JkZXJpbmcgdGhlIG5hbWVzIG9mCiAgICAgICAgICAgICAgICAgICAga2luZ2RvbXMgYW5kIHN0YXRlcywgYW5kIGdyYW50cyBvZiBleGVtcHRpb25zIHRvIGJlIGVuZ3JhdmVkIG9uIGJyYXNzLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBicmliZXMgZm9yIHN1Y2ggb3JkZXJzLiBBbmQgaGlzIHN0YXRlbWVudCBhbHdheXMgd2FzLCB0aGF0IGhlIHdhcyBkb2luZwogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRoaW5ncyBpbiBvYmVkaWVuY2UgdG8gdGhlIG1lbW9yYW5kYSBvZiBDYWVzYXIsIG9mIHdoaWNoIGhlIGhpbXNlbGYgd2FzCiAgICAgICAgICAgICAgICAgICAgdGhlIGF1dGhvci4gSW4gdGhlIGludGVyaW9yIG9mIGhpcyBob3VzZSB0aGVyZSB3YXMgZ29pbmcgb24gYSBicmlzayBtYXJrZXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgcmVwdWJsaWMuIEhpcyB3aWZlLCBtb3JlIGZvcnR1bmF0ZSBmb3IgaGVyc2VsZiB0aGFuIGZvciBoZXIgaHVzYmFuZCwKICAgICAgICAgICAgICAgICAgICB3YXMgaG9sZGluZyBhbiBhdWN0aW9uIG9mIGtpbmdkb21zIGFuZCBwcm92aW5jZXM6IGV4aWxlcyB3ZXJlIHJlc3RvcmVkIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBhbnkgbGF3LCBhcyBpZiBieSBsYXc6IGFuZCB1bmxlc3MgYWxsIHRoZXNlIGFjdHMgYXJlIHJlc2NpbmRlZCBieSB0aGUgYXV0aG9yaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNlbmF0ZSwgbm93IHRoYXQgd2UgaGF2ZSBhZ2FpbiBhcnJpdmVkIGF0IGEgaG9wZSBvZiByZWNvdmVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCB0aGVyZSB3aWxsIGJlIG5vIGxpa2VuZXNzIG9mIGEgZnJlZSBjaXR5IGxlZnQgdG8gdXMuIDwvdHJhbnNsYXRpb24+"
translation['5.4.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIGlzIGl0IG9ubHkgYnkgdGhlIHNhbGUgb2YgZm9yZ2VkIG1lbW9yYW5kYSBhbmQgYXV0b2dyYXBocyB0aGF0IGEgY291bnRsZXNzCiAgICAgICAgICAgICAgICAgICAgc3VtIG9mIG1vbmV5IHdhcyBjb2xsZWN0ZWQgdG9nZXRoZXIgaW4gdGhhdCBob3VzZSwgd2hpbGUgQW50b25pdXMsIHdoYXRldmVyIGhlCiAgICAgICAgICAgICAgICAgICAgc29sZCwgc2FpZCB0aGF0IGhlIHdhcyBhY3RpbmcgaW4gb2JlZGllbmNlIHRvIHRoZSBwYXBlcnMgb2YgQ2Flc2FyOyBidXQgaGUgZXZlbgogICAgICAgICAgICAgICAgICAgIHRvb2sgYnJpYmVzIHRvIG1ha2UgZmFsc2UgZW50cmllcyBvZiB0aGUgcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZTsgdG8gc2VhbAogICAgICAgICAgICAgICAgICAgIGZvcmdlZCBjb250cmFjdHM7IGFuZCByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlIHRoYXQgaGFkIG5ldmVyIGJlZW4gcGFzc2VkIHdlcmUKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIG9uIHRoZSByZWNvcmRzIG9mIHRoYXQgdHJlYXN1cnkuIE9mIGFsbCB0aGlzIGJhc2VuZXNzIGV2ZW4gZm9yZWlnbgogICAgICAgICAgICAgICAgICAgIG5hdGlvbnMgd2VyZSB3aXRuZXNzZXMuIEluIHRoZSBtZWFudGltZSB0cmVhdGllcyB3ZXJlIG1hZGU7IGtpbmdkb21zIGdpdmVuIGF3YXk7CiAgICAgICAgICAgICAgICAgICAgbmF0aW9ucyBhbmQgcHJvdmluY2VzIHJlbGVhc2VkIGZyb20gdGhlIGJ1cmRlbnMgb2YgdGhlIHN0YXRlOyBhbmQgZmFsc2UKICAgICAgICAgICAgICAgICAgICBtZW1vcmlhbHMgb2YgYWxsIHRoZXNlIHRyYW5zYWN0aW9ucyB3ZXJlIGZpeGVkIHVwIGFsbCBvdmVyIHRoZSBDYXBpdG9sLCBhbWlkIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb2FucyBvZiB0aGUgUm9tYW4gcGVvcGxlLiBBbmQgYnkgYWxsIHRoZXNlIHByb2NlZWRpbmdzIHNvIHZhc3QgYSBzdW0gb2YgbW9uZXkKICAgICAgICAgICAgICAgICAgICB3YXMgY29sbGVjdGVkIGluIG9uZSBob3VzZSwgdGhhdCBpZiBpdCB3ZXJlIGFsbCBtYWRlIGF2YWlsYWJsZSwgdGhlIFJvbWFuIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5ldmVyIHdhbnQgbW9uZXkgYWdhaW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yZW92ZXIgaGUgcGFzc2VkIGEgbGF3IHRvIHJlZ3VsYXRlIGp1ZGljaWFsIHByb2NlZWRpbmdzLCB0aGlzIGNoYXN0ZSBhbmQKICAgICAgICAgICAgICAgICAgICB1cHJpZ2h0IG1hbiwgdGhpcyB1cGhvbGRlciBvZiB0aGUgdHJpYnVuYWxzIGFuZCB0aGUgbGF3IEFuZCBpbiB0aGlzIGhlIGRlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgdXMgSGUgdXNlZCB0byBzYXkgdGhhdCBoZSBhcHBvaW50ZWQgbWVuIGZyb20gdGhlIGZyb250IHJhbmtzIG9mIHRoZSBhcm15LCBjb21tb24KICAgICAgICAgICAgICAgICAgICBzb2xkaWVycyBtZW4gb2YgdGhlIEFsYXVkYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SXQgaGFzIGJlZW4gYWxyZWFkeSBleHBsYWluZWQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIHdhcyB0aGUgbmFtZSBvZiBvbmUgbGVnaW9uLjwvbm90ZT5hcyBqdWRnZXMgYnV0IGhlIGhhcyBpbiByZWFsaXR5CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgZ2FtZXN0ZXJzLCBoZSBoYXMgc2VsZWN0ZWQgZXhpbGVzLCBoZSBoYXMgc2VsZWN0ZWQgR3JlZWtzLiBPaCB0aGUgZmluZQogICAgICAgICAgICAgICAgICAgIGJlbmNoIG9mIGp1ZGdlcyBPaCB0aGUgYWRtaXJhYmxlIGRpZ25pdHkgb2YgdGhhdCBjb3VuY2lsISA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IEkgZG8gbG9uZyB0byBwbGVhZCBpbiBiZWhhbGYgb2Ygc29tZSBkZWZlbmRhbnQgYmVmb3JlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0cmlidW5hbOKAlEN5ZGEgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTYiIGtleT0idGduLDcwMTIwNTYiPkNyZXRlPC9wbGFjZU5hbWU+OyBhCiAgICAgICAgICAgICAgICAgICAgcHJvZGlneSBldmVuIGluIHRoYXQgaXNsYW5kOyB0aGUgbW9zdCBhdWRhY2lvdXMgYW5kIGFiYW5kb25lZCBvZiBtZW4uIEJ1dCBldmVuCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBoZSB3ZXJlIG5vdCBzby4gRG9lcyBoZSB1bmRlcnN0YW5kIExhdGluPyBJcyBoZSBxdWFsaWZpZWQgYnkgYmlydGggYW5kCiAgICAgICAgICAgICAgICAgICAgc3RhdGlvbiB0byBiZSBhIGp1ZGdlISBEb2VzIGhl4oCUd2hpY2ggaXMgbW9zdCBpbXBvcnRhbnTigJRkb2VzCiAgICAgICAgICAgICAgICAgICAgaGUga25vdyBhbnkgdGhpbmcgYWJvdXQgb3VyIGxhd3MgYW5kIG1hbm5lcnM/IElzIGhlIGV2ZW4gYWNxdWFpbnRlZCB3aXRoIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXRpemVucz8gV2h5IENyZXRlIGlzIGJldHRlciBrbm93biB0byB5b3UgdGhhbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGlzIHRvIEN5ZGEuIEluIGZhY3QgdGhlIHNlbGVjdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICBhcHBvaW50bWVudCBvZiB0aGUganVkZ2VzIGhhcyB1c3VhbGx5IGJlZW4gY29uZmluZWQgdG8gb3VyIG93biBjaXRpemVucy4gQnV0IHdobwogICAgICAgICAgICAgICAgICAgIGV2ZXIga25ldyBvciBjb3VsZCBwb3NzaWJseSBoYXZlIGtub3duIHRoaXMuIEdvcnR5bmlhbiBqdWRnZT8gRm9yIEx5c2lhZGVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiwgd2UgbW9zdCBvZiB1cyBkbyBrbm93IEZvciBoZSBpcyB0aGUgc29uIG9mIFBoYWVkcnVzIGFuIGVtaW5lbnQKICAgICAgICAgICAgICAgICAgICBwaGlsb3NvcGhlci4gQW5kLCBiZXNpZGVzLCBoZSBpcyBhIHdpdHR5IG1hbiwgc28gdGhhdCBoZSB3aWxsIGJlIGFibGUgdG8gZ2V0IG9uCiAgICAgICAgICAgICAgICAgICAgdmVyeSB3ZWxsIHdpdGggTWFyY3VzIEN1cml1cywgd2hvIHdpbGwgYmUgb25lIG9mIGhpcyBjb2xsZWFndWVzLCBhbmQgd2l0aCB3aG9tCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgaW4gdGhlIGhhYml0IG9mIHBsYXlpbmcuIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYXNrIGlmCiAgICAgICAgICAgICAgICAgICAgTHlzaWFkZXMsIHdoZW4gc3VtbW9uZWQgYXMgYSBqdWRnZSwgc2hvdWxkIG5vdCBhbnN3ZXIgdG8gaGlzIG5hbWUsIGFuZCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGFuIGV4Y3VzZSBhbGxlZ2VkIGZvciBoaW0gdGhhdCBoZSBpcyBhbiBBcmVvcGFnaXRlLCBhbmQgdGhhdCBoZSBpcyBub3QKICAgICAgICAgICAgICAgICAgICBib3VuZCB0byBhY3QgYXMgYSBqdWRnZSBhdCBib3RoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhdCB0aGUgc2FtZSB0aW1lLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbiB3aG8gcHJlc2lkZXMgb3ZlciB0aGUgaW52ZXN0aWdhdGlvbiBhZG1pdCB0aGUgZXhjdXNlIG9mIHRoaXMgR3JlZWtsaW5nCiAgICAgICAgICAgICAgICAgICAganVkZ2UsIGF0IG9uZSB0aW1lIGEgR3JlZWssIGFuZCBhdCBhbm90aGVyIGEgUm9tYW4/IE9yIHdpbGwgaGUgZGlzcmVnYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3QgYW5jaWVudCBsYXdzIG9mIHRoZSBBdGhlbmlhbnM/IDwvcD4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBoYXMgYmVlbiBhbHJlYWR5IGV4cGxhaW5lZAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgd2FzIHRoZSBuYW1lIG9mIG9uZSBsZWdpb24uPC9ub3RlPmFzIGp1ZGdlcyBidXQgaGUgaGFzIGluIHJlYWxpdHkKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCBnYW1lc3RlcnMsIGhlIGhhcyBzZWxlY3RlZCBleGlsZXMsIGhlIGhhcyBzZWxlY3RlZCBHcmVla3MuIE9oIHRoZSBmaW5lCiAgICAgICAgICAgICAgICAgICAgYmVuY2ggb2YganVkZ2VzIE9oIHRoZSBhZG1pcmFibGUgZGlnbml0eSBvZiB0aGF0IGNvdW5jaWwhIDwvdHJhbnNsYXRpb24+"
translation['5.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBsb25nIHRvIHBsZWFkIGluIGJlaGFsZiBvZiBzb21lIGRlZmVuZGFudCBiZWZvcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRyaWJ1bmFs4oCUQ3lkYSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU2Ij5DcmV0ZTwvcGxhY2VOYW1lPjsgYQogICAgICAgICAgICAgICAgICAgIHByb2RpZ3kgZXZlbiBpbiB0aGF0IGlzbGFuZDsgdGhlIG1vc3QgYXVkYWNpb3VzIGFuZCBhYmFuZG9uZWQgb2YgbWVuLiBCdXQgZXZlbgogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgaGUgd2VyZSBub3Qgc28uIERvZXMgaGUgdW5kZXJzdGFuZCBMYXRpbj8gSXMgaGUgcXVhbGlmaWVkIGJ5IGJpcnRoIGFuZAogICAgICAgICAgICAgICAgICAgIHN0YXRpb24gdG8gYmUgYSBqdWRnZSEgRG9lcyBoZeKAlHdoaWNoIGlzIG1vc3QgaW1wb3J0YW504oCUZG9lcwogICAgICAgICAgICAgICAgICAgIGhlIGtub3cgYW55IHRoaW5nIGFib3V0IG91ciBsYXdzIGFuZCBtYW5uZXJzPyBJcyBoZSBldmVuIGFjcXVhaW50ZWQgd2l0aCBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aXplbnM/IFdoeSBDcmV0ZSBpcyBiZXR0ZXIga25vd24gdG8geW91IHRoYW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGlzIHRvIEN5ZGEuIEluIGZhY3QgdGhlIHNlbGVjdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICBhcHBvaW50bWVudCBvZiB0aGUganVkZ2VzIGhhcyB1c3VhbGx5IGJlZW4gY29uZmluZWQgdG8gb3VyIG93biBjaXRpemVucy4gQnV0IHdobwogICAgICAgICAgICAgICAgICAgIGV2ZXIga25ldyBvciBjb3VsZCBwb3NzaWJseSBoYXZlIGtub3duIHRoaXMuIEdvcnR5bmlhbiBqdWRnZT8gRm9yIEx5c2lhZGVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiwgd2UgbW9zdCBvZiB1cyBkbyBrbm93IEZvciBoZSBpcyB0aGUgc29uIG9mIFBoYWVkcnVzIGFuIGVtaW5lbnQKICAgICAgICAgICAgICAgICAgICBwaGlsb3NvcGhlci4gQW5kLCBiZXNpZGVzLCBoZSBpcyBhIHdpdHR5IG1hbiwgc28gdGhhdCBoZSB3aWxsIGJlIGFibGUgdG8gZ2V0IG9uCiAgICAgICAgICAgICAgICAgICAgdmVyeSB3ZWxsIHdpdGggTWFyY3VzIEN1cml1cywgd2hvIHdpbGwgYmUgb25lIG9mIGhpcyBjb2xsZWFndWVzLCBhbmQgd2l0aCB3aG9tCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgaW4gdGhlIGhhYml0IG9mIHBsYXlpbmcuIDwvdHJhbnNsYXRpb24+"
translation['5.5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhc2sgaWYKICAgICAgICAgICAgICAgICAgICBMeXNpYWRlcywgd2hlbiBzdW1tb25lZCBhcyBhIGp1ZGdlLCBzaG91bGQgbm90IGFuc3dlciB0byBoaXMgbmFtZSwgYW5kIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgYW4gZXhjdXNlIGFsbGVnZWQgZm9yIGhpbSB0aGF0IGhlIGlzIGFuIEFyZW9wYWdpdGUsIGFuZCB0aGF0IGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGJvdW5kIHRvIGFjdCBhcyBhIGp1ZGdlIGF0IGJvdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhdCB0aGUgc2FtZSB0aW1lLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbiB3aG8gcHJlc2lkZXMgb3ZlciB0aGUgaW52ZXN0aWdhdGlvbiBhZG1pdCB0aGUgZXhjdXNlIG9mIHRoaXMgR3JlZWtsaW5nCiAgICAgICAgICAgICAgICAgICAganVkZ2UsIGF0IG9uZSB0aW1lIGEgR3JlZWssIGFuZCBhdCBhbm90aGVyIGEgUm9tYW4/IE9yIHdpbGwgaGUgZGlzcmVnYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3QgYW5jaWVudCBsYXdzIG9mIHRoZSBBdGhlbmlhbnM/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHdoYXQgYSBiZW5jaCB3aWxsIGl0IGJlLCBPIHllIGdvb2QgZ29kcyEgQSBDcmV0YW4ganVkZ2UsIGFuZCBoZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzcyBvZiBtZW4uIFdob20gY2FuIGEgZGVmZW5kYW50IGVtcGxveSB0byBwcm9waXRpYXRlIGhpbT8gSG93IGlzIGhlIHRvCiAgICAgICAgICAgICAgICAgICAgZ2V0IGF0IGhpbT8gSGUgY29tZXMgb2YgYSBoYXJkIG5hdGlvbi4gQnV0IHRoZSBBdGhlbmlhbnMgYXJlIG1lcmNpZnVsLiBJIGRhcmUKICAgICAgICAgICAgICAgICAgICBzYXkgdGhhdCBDdXJpdXMsIHRvbywgaXMgbm90IGNydWVsLCBpbmFzbXVjaCBhcyBoZSBpcyBhIG1hbiB3aG8gaXMgaGltc2VsZiBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtZXJjeSBvZiBmb3J0dW5lIGV2ZXJ5IGRheS4gVGhlcmUgYXJlIGJlc2lkZXMgb3RoZXIgY2hvc2VuIGp1ZGdlcyB3aG8gd2lsbAogICAgICAgICAgICAgICAgICAgIHBlcmhhcHMgYmUgZXhjdXNlZC4gRm9yIHRoZXkgaGF2ZSBhIGxlZ2l0aW1hdGUgZXhjdXNlLCB0aGF0IHRoZXkgaGF2ZSBsZWZ0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBpbiBiYW5pc2htZW50LCBhbmQgdGhhdCB0aGV5IGhhdmUgbm90IGJlZW4gcmVzdG9yZWQgc2luY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdvdWxkIHRoYXQgbWFkbWFuIGhhdmUgY2hvc2VuIHRoZXNlIG1lbiBhcwogICAgICAgICAgICAgICAgICAgIGp1ZGdlcywgd291bGQgaGUgaGF2ZSBlbnRlcmVkIHRoZWlyIG5hbWVzIGFzIHN1Y2ggaW4gdGhlIHRyZWFzdXJ5LCB3b3VsZCBoZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdHJ1c3RlZCBhIGdyZWF0IHBvcnRpb24gb2YgdGhlIHJlcHVibGljIHRvIHRoZW0sIGlmIGhlIGhhZCBpbnRlbmRlZCB0byBsZWF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzdCBzZW1ibGFuY2Ugb2YgYSByZXB1YmxpYz8gPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdvdWxkIHRoYXQgbWFkbWFuIGhhdmUgY2hvc2VuIHRoZXNlIG1lbiBhcwogICAgICAgICAgICAgICAgICAgIGp1ZGdlcywgd291bGQgaGUgaGF2ZSBlbnRlcmVkIHRoZWlyIG5hbWVzIGFzIHN1Y2ggaW4gdGhlIHRyZWFzdXJ5LCB3b3VsZCBoZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdHJ1c3RlZCBhIGdyZWF0IHBvcnRpb24gb2YgdGhlIHJlcHVibGljIHRvIHRoZW0sIGlmIGhlIGhhZCBpbnRlbmRlZCB0byBsZWF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzdCBzZW1ibGFuY2Ugb2YgYSByZXB1YmxpYz8gPC90cmFuc2xhdGlvbj4="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIEkgaGF2ZSBiZWVuIHNwZWFraW5nIG9mIHRob3NlIGp1ZGdlcyB3aG8gYXJlIGtub3duLiBUaG9zZSB3aG9tIHlvdSBhcmUgbGVzcwogICAgICAgICAgICAgICAgICAgIGFjcXVhaW50ZWQgd2l0aCBJIGhhdmUgYmVlbiB1bndpbGxpbmcgdG8gbmFtZS4gS25vdyB0aGVuIHRoYXQgZGFuY2VycywKICAgICAgICAgICAgICAgICAgICBoYXJwLXBsYXllcnMsIHRoZSB3aG9sZSB0cm9vcCwgaW4gZmFjdCwgb2YgQW50b25pdXMncyByZXZlbGVycywgaGF2ZSBhbGwgYmVlbgogICAgICAgICAgICAgICAgICAgIHBpdGNoZm9ya2VkIGludG8gdGhlIHRoaXJkIGRlY3VyeSBvZiBqdWRnZXMuIE5vdyB5b3Ugc2VlIHRoZSBvYmplY3Qgb2YgcGFzc2luZwogICAgICAgICAgICAgICAgICAgIHNvIHNwbGVuZGlkIGFuZCBhZG1pcmFibGUgYSBsYXcsIGFtaWRzdCBleGNlc3NpdmUgcmFpbiwgc3Rvcm0sIHdpbmQsIHRlbXBlc3QsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdoaXJsd2luZCwgYW1pZHN0IHRodW5kZXIgYW5kIGxpZ2h0bmluZzsgaXQgd2FzIHRoYXQgaGUgbWlnaHQgaGF2ZSB0aG9zZSBtZW4KICAgICAgICAgICAgICAgICAgICBmb3Igb3VyIGp1ZGdlcyB3aG9tIG5vIG9uZSB3b3VsZCBsaWtlIHRvIGhhdmUgZm9yIGd1ZXN0cy4gSXQgaXMgdGhlIGVub3JtaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHdpY2tlZG5lc3MsIHRoZSBjb25zY2lvdXNuZXNzIG9mIGhpcyBjcmltZXMsIHRoZSBwbHVuZGVyIG9mIHRoYXQgbW9uZXkgb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgYWNjb3VudCB3YXMga2VwdCBpbiB0aGUgdGVtcGxlIG9mIE9wcywgd2hpY2ggaGF2ZSBiZWVuIHRoZSByZWFsCiAgICAgICAgICAgICAgICAgICAgaW52ZW50b3JzIG9mIHRoaXMgdGhpcmQgZGVjdXJ5LiBBbmQgaW5mYW1vdXMganVkZ2VzIHdlcmUgbm90IHNvdWdodCBmb3IsIHRpbGwKICAgICAgICAgICAgICAgICAgICBhbGwgaG9wZSBvZiBzYWZldHkgZm9yIHRoZSBndWlsdHkgd2FzIGRlc3BhaXJlZCBvZiwgaWYgdGhleSBjYW1lIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RhYmxlIG9uZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoYXQgbXVzdCBoYXZlIGJlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW1wdWRlbmNlLCB3aGF0IG11c3QgaGF2ZSBiZWVuIHRoZSBpbmlxdWl0eSBvZiBhIG1hbiB3aG8gZGFyZWQgdG8gc2VsZWN0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuIGFzIGp1ZGdlcywgYnkgdGhlIHNlbGVjdGlvbiBvZiB3aG9tIGEgZG91YmxlIGRpc2dyYWNlIHdhcyBzdGFtcGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljOiBvbmUsIGJlY2F1c2UgdGhlIGp1ZGdlcyB3ZXJlIHNvIGluZmFtb3VzOyB0aGUgb3RoZXIsIGJlY2F1c2UgYnkgdGhpcwogICAgICAgICAgICAgICAgICAgIHN0ZXAgaXQgd2FzIHJldmVhbGVkIGFuZCBwdWJsaXNoZWQgdG8gdGhlIHdvcmxkIGhvdyBtYW55IGluZmFtb3VzIGNpdGl6ZW5zIHdlCiAgICAgICAgICAgICAgICAgICAgaGFkIGluIHRoZSByZXB1YmxpYz8gVGhlc2UgdGhlbiwgYW5kIGFsbCBvdGhlciBzaW1pbGFyIGxhd3MsIEkgc2hvdWxkIHZvdGUgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZSBhbm51bGxlZCwgZXZlbiBpZiB0aGV5IGhhZCBiZWVuIHBhc3NlZCB3aXRob3V0IHZpb2xlbmNlLCBhbmQgd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgcmVzcGVjdCBmb3IgdGhlIGF1c3BpY2VzLiBCdXQgbm93IHdoeSBuZWVkIEkgdm90ZSB0aGF0IHRoZXkgb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhbm51bGxlZCwgd2hlbiBJIGRvIG5vdCBjb25zaWRlciB0aGF0IHRoZXkgd2VyZSBldmVyIGxlZ2FsbHkgcGFzc2VkPyA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoYXQgbXVzdCBoYXZlIGJlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW1wdWRlbmNlLCB3aGF0IG11c3QgaGF2ZSBiZWVuIHRoZSBpbmlxdWl0eSBvZiBhIG1hbiB3aG8gZGFyZWQgdG8gc2VsZWN0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuIGFzIGp1ZGdlcywgYnkgdGhlIHNlbGVjdGlvbiBvZiB3aG9tIGEgZG91YmxlIGRpc2dyYWNlIHdhcyBzdGFtcGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljOiBvbmUsIGJlY2F1c2UgdGhlIGp1ZGdlcyB3ZXJlIHNvIGluZmFtb3VzOyB0aGUgb3RoZXIsIGJlY2F1c2UgYnkgdGhpcwogICAgICAgICAgICAgICAgICAgIHN0ZXAgaXQgd2FzIHJldmVhbGVkIGFuZCBwdWJsaXNoZWQgdG8gdGhlIHdvcmxkIGhvdyBtYW55IGluZmFtb3VzIGNpdGl6ZW5zIHdlCiAgICAgICAgICAgICAgICAgICAgaGFkIGluIHRoZSByZXB1YmxpYz8gVGhlc2UgdGhlbiwgYW5kIGFsbCBvdGhlciBzaW1pbGFyIGxhd3MsIEkgc2hvdWxkIHZvdGUgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZSBhbm51bGxlZCwgZXZlbiBpZiB0aGV5IGhhZCBiZWVuIHBhc3NlZCB3aXRob3V0IHZpb2xlbmNlLCBhbmQgd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgcmVzcGVjdCBmb3IgdGhlIGF1c3BpY2VzLiBCdXQgbm93IHdoeSBuZWVkIEkgdm90ZSB0aGF0IHRoZXkgb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhbm51bGxlZCwgd2hlbiBJIGRvIG5vdCBjb25zaWRlciB0aGF0IHRoZXkgd2VyZSBldmVyIGxlZ2FsbHkgcGFzc2VkPyA8L3RyYW5zbGF0aW9uPg=="
translation['5.6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXMgbm90IHRoaXMsIHRvbywgdG8gYmUgbWFya2VkIHdpdGggdGhlIGRlZXBlc3QgaWdub21pbnksIGFuZCB3aXRoIHRoZSBzZXZlcmVzdAogICAgICAgICAgICAgICAgICAgIGFuaW1hZHZlcnNpb24gb2YgdGhpcyBvcmRlciwgc28gYXMgdG8gYmUgcmVjb2xsZWN0ZWQgYnkgYWxsIHBvc3Rlcml0eSwgdGhhdAogICAgICAgICAgICAgICAgICAgIE1hcmN1cyBBbnRvbml1cy4gKHRoZSBmaXJzdCBtYW4gd2hvIGhhcyBldmVyIGRvbmUgc28gc2luY2UgdGhlIGZvdW5kYXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSkgaGFzIG9wZW5seSB0YWtlbiBhcm1lZCBtZW4gYWJvdXQgd2l0aCBoaW0gaW4gdGhpcyBjaXR5PyBBIHRoaW5nIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIGtpbmdzIG5ldmVyIGRpZCwgbm9yIHRob3NlIG1lbiB3aG8sIHNpbmNlIHRoZSBraW5ncyBoYXZlIGJlZW4gYmFuaXNoZWQsIGhhdmUKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvcmVkIHRvIHNlaXplIG9uIGtpbmdseSBwb3dlci4gSSBjYW4gcmVjb2xsZWN0IENpbm5hOyBJIGhhdmUgc2VlbiBTdWxsYTsKICAgICAgICAgICAgICAgICAgICBhbmQgbGF0ZWx5IENhZXNhci4gRm9yIHRoZXNlIHRocmVlIG1lbiBhcmUgdGhlIG9ubHkgb25lcyBzaW5jZSB0aGUgY2l0eSB3YXMKICAgICAgICAgICAgICAgICAgICBkZWxpdmVyZWQgYnkgTHVjaXVzIEJydXR1cywgd2hvIGhhdmUgaGFkIG1vcmUgcG93ZXIgdGhhbiB0aGUgZW50aXJlIHJlcHVibGljLiBJCiAgICAgICAgICAgICAgICAgICAgY2FuIG5vdCBhc3NlcnQgdGhhdCBubyBtYW4gaW4gdGhlaXIgdHJhaW5zIGhhZCB3ZWFwb25zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IFRoaXMgSSBkbyBzYXksIHRoYXQgdGhleSBoYWQgbm90IG1hbnksIGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25jZWFsZWQgdGhlbS4gQnV0IHRoaXMgcG9zdCB3YXMgYXR0ZW5kZWQgYnkgYW4gYXJteSBvZiBhcm1lZCBtZW4uIENsYXNzaXRpdXMsCiAgICAgICAgICAgICAgICAgICAgTXVzdGVsYSwgYW5kIFRpcm8sIG9wZW5seSBkaXNwbGF5aW5nIHRoZWlyIHN3b3JkcywgbGVkIHRyb29wcyBvZiBmZWxsb3dzIGxpa2UKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRocm91Z2ggdGhlIGZvcnVtLiBCYXJiYXJpYW4gYXJjaGVycyBvY2N1cGllZCB0aGVpciByZWd1bGFyIHBsYWNlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGFybXkuIEFuZCB3aGVuIHRoZXkgYXJtZWQgYXQgdGhlIHRlbXBsZSBvZiBDb25jb3JkLCB0aGUgc3RlcHMgd2VyZSBjcm93ZGVkLAogICAgICAgICAgICAgICAgICAgIHRoZSBsaXR0ZXJzIGZ1bGwgb2Ygc2hpZWxkcyB3ZXJlIGFycmFuZ2VkOyBub3QgYmVjYXVzZSBoZSB3aXNoZWQgdGhlIHNoaWVsZHMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBjb25jZWFsZWQsIGJ1dCB0aGF0IGhpcyBmcmllbmRzIG1pZ2h0IG5vdCBiZSBmYXRpZ3VlZCBieSBjYXJyeWluZyB0aGUgc2hpZWxkcwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.6.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcyBJIGRvIHNheSwgdGhhdCB0aGV5IGhhZCBub3QgbWFueSwgYW5kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxlZCB0aGVtLiBCdXQgdGhpcyBwb3N0IHdhcyBhdHRlbmRlZCBieSBhbiBhcm15IG9mIGFybWVkIG1lbi4gQ2xhc3NpdGl1cywKICAgICAgICAgICAgICAgICAgICBNdXN0ZWxhLCBhbmQgVGlybywgb3Blbmx5IGRpc3BsYXlpbmcgdGhlaXIgc3dvcmRzLCBsZWQgdHJvb3BzIG9mIGZlbGxvd3MgbGlrZQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdGhyb3VnaCB0aGUgZm9ydW0uIEJhcmJhcmlhbiBhcmNoZXJzIG9jY3VwaWVkIHRoZWlyIHJlZ3VsYXIgcGxhY2UgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgYXJteS4gQW5kIHdoZW4gdGhleSBhcm1lZCBhdCB0aGUgdGVtcGxlIG9mIENvbmNvcmQsIHRoZSBzdGVwcyB3ZXJlIGNyb3dkZWQsCiAgICAgICAgICAgICAgICAgICAgdGhlIGxpdHRlcnMgZnVsbCBvZiBzaGllbGRzIHdlcmUgYXJyYW5nZWQ7IG5vdCBiZWNhdXNlIGhlIHdpc2hlZCB0aGUgc2hpZWxkcyB0bwogICAgICAgICAgICAgICAgICAgIGJlIGNvbmNlYWxlZCwgYnV0IHRoYXQgaGlzIGZyaWVuZHMgbWlnaHQgbm90IGJlIGZhdGlndWVkIGJ5IGNhcnJ5aW5nIHRoZSBzaGllbGRzCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHdoYXQgd2FzIG1vc3QgaW5mYW1vdXMgbm90IG9ubHkgdG8gc2VlLCBidXQgZXZlbiB0byBoZWFyIG9mLCBhcm1lZCBtZW4sCiAgICAgICAgICAgICAgICAgICAgcm9iYmVycywgYXNzYXNzaW5zIHdlcmUgc3RhdGlvbmVkIGluIHRoZSB0ZW1wbGUgb2YgQ29uY29yZDsgdGhlIHRlbXBsZSB3YXMKICAgICAgICAgICAgICAgICAgICB0dXJuZWQgaW50byBhIHByaXNvbjsgdGhlIGRvb3JzIG9mIHRoZSB0ZW1wbGUgd2VyZSBjbG9zZWQsIGFuZCB0aGUgY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycyBkZWxpdmVyZWQgdGhlaXIgb3BpbmlvbnMgd2hpbGUgcm9iYmVycyB3ZXJlIHN0YW5kaW5nIGFtb25nIHRoZSBiZW5jaGVzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNlbmF0b3JzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBpZiBJIGRpZCBub3QgY29tZSB0byBhCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLWhvdXNlIGluIHRoaXMgc3RhdGUsIGhlLCBvbiB0aGUgZmlyc3Qgb2YgU2VwdGVtYmVyLCBzYWlkIHRoYXQgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBzZW5kIGNhcnBlbnRlcnMgYW5kIHB1bGwgZG93biBteSBob3VzZS4gSXQgd2FzIGFuIGltcG9ydGFudCBhZmZhaXIsIEkgc3VwcG9zZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyB0byBiZSBkaXNjdXNzZWQuIEhlIG1hZGUgc29tZSBtb3Rpb24gYWJvdXQgYSBzdXBwbGljYXRpb24uIEkgYXR0ZW5kZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZGF5IGFmdGVyLiBIZSBoaW1zZWxmIGRpZCBub3QgY29tZS4gSSBkZWxpdmVyZWQgbXkgb3BpbmlvbiBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYywgbm90IGluZGVlZCB3aXRoIHF1aXRlIHNvIG11Y2ggZnJlZWRvbSBhcyB1c3VhbCwgYnV0IHN0aWxsIHdpdGggbW9yZQogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhlIHRocmVhdHMgb2YgcGVyc29uYWwgZGFuZ2VyIHRvIG15c2VsZiBtYWRlIHBlcmhhcHMgYWR2aXNhYmxlLiBCdXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHZpb2xlbnQgYW5kIGZ1cmlvdXMgbWFuIChmb3IgTHVjaXVzIFBpc28gaGFkIGRvbmUgdGhlIHNhbWUgdGhpbmcgd2l0aCBncmVhdAogICAgICAgICAgICAgICAgICAgIGNyZWRpdCB0aGlydHkgZGF5cyBiZWZvcmUpIHRocmVhdGVuZWQgbWUgd2l0aCBoaXMgZW5taXR5LCBhbmQgb3JkZXJlZCBtZSB0bwogICAgICAgICAgICAgICAgICAgIGF0dGVuZCB0aGUgc2VuYXRlIG9uIHRoZSBuaW5ldGVlbnRoIG9mIFNlcHRlbWJlci4gSW4gdGhlIG1lYW50aW1lIGhlIHNwZW50IHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIG9mIHRoZSBpbnRlcnZlbmluZyBzZXZlbnRlZW4gZGF5cyBpbiB0aGUgdmlsbGEgb2YgU2NpcGlvLCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRpYnVyIiBrZXk9InBlcnNldXMsVGlidXIiPlRpYnVyPC9wbGFjZU5hbWU+LCBkZWNsYWltaW5nIGFnYWluc3QgbWUgdG8gbWFrZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgdGhpcnN0eS4gRm9yIHRoaXMgaXMgaGlzIHVzdWFsIG9iamVjdCBpbiBkZWNsYWltaW5nLiA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPiBXaGVuIHRoZSBkYXkgYXJyaXZlZCBvbiB3aGljaCBoZSBoYWQgb3JkZXJlZCBtZSB0byBhdHRlbmQsCiAgICAgICAgICAgICAgICAgICAgdGhlbiBoZSBjYW1lIHdpdGggYSByZWd1bGFyIGFybXkgaW4gYmF0dGxlIGFycmF5IHRvIHRoZSB0ZW1wbGUgb2YgQ29uY29yZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgb3V0IG9mIGhpcyBpbXB1cmUgbW91dGggdm9taXRlZCBmb3J0aCBhbiBvcmF0aW9uIGFnYWluc3QgbWUgaW4gbXkgYWJzZW5jZS4gT24KICAgICAgICAgICAgICAgICAgICB3aGljaCBkYXksIGlmIG15IGZyaWVuZHMgaGFkIG5vdCBwcmV2ZW50ZWQgbWUgZnJvbSBhdHRlbmRpbmcgdGhlIHNlbmF0ZSBhcyBJIHdhcwogICAgICAgICAgICAgICAgICAgIGFueGlvdXMgdG8gZG8sIGhlIHdvdWxkIGhhdmUgYmVndW4gYSBtYXNzYWNyZSBieSB0aGUgc2xhdWdodGVyIG9mIG1lLiBGb3IgdGhhdAogICAgICAgICAgICAgICAgICAgIHdhcyB3aGF0IGhlIGhhZCByZXNvbHZlZCB0byBkby4gQW5kIHdoZW4gb25jZSBoZSBoYWQgZHllZCBoaXMgc3dvcmQgaW4gYmxvb2QsCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB3b3VsZCBoYXZlIG1hZGUgaGltIGxlYXZlIG9mZiBidXQgcHVyZSBmYXRpZ3VlIGFuZCBzYXRpZXR5LiBJbiB0cnV0aCwKICAgICAgICAgICAgICAgICAgICBoaXMgYnJvdGhlciwgTHVjaXVzLiBBbnRvbml1cywgd2FzIHByZXNlbnQsIGFuIEFzaWF0aWMgZ2xhZGlhdG9yLCB3aG8gaGFkIGZvdWdodAogICAgICAgICAgICAgICAgICAgIGFzIGEgbWlybWlsbG8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPm1pcm1pbGxvPC9mb3JlaWduPiB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGdsYWRpYXRvciB3aG8gZm91Z2h0IHdpdGggdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5yZXRpYXJpdXM8L2ZvcmVpZ24+OyBoZQogICAgICAgICAgICAgICAgICAgICAgICB3b3JlIGEgR2FsbGljIGhlbG1ldCB3aXRoIGEgZmlzaCBmb3IgYSBjcmVzdC48L25vdGU+IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXlsYXNhIiBrZXk9InBlcnNldXMsTXlsYXNhIj5NeWxhc2E8L3BsYWNlTmFtZT47IGhlIHdhcyB0aGlyc3RpbmcgZm9yIG15IGJsb29kLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYWQgc2hlZCBtdWNoIG9mIGhpcyBvd24gaW4gdGhhdCBnbGFkaWF0b3JpYWwgY29tYmF0LiBIZSB3YXMgbm93IHZhbHVpbmcgb3VyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgaW4gaGlzIG1pbmQsIHRha2luZyBub3RpY2Ugb2Ygb3VyIHBvc3Nlc3Npb25zIGluIHRoZSBjaXR5IGFuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OyBoaXMgaW5kaWdlbmNlIHVuaXRlZCB3aXRoIGhpcyBjb3ZldG91c25lc3Mgd2FzIHRocmVhdGVuaW5nIGFsbCBvdXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lczsgaGUgd2FzIGRpc3RyaWJ1dGluZyBvdXIgbGFuZHMgdG8gd2hvbXNvZXZlciBhbmQgaW4gd2hhdGV2ZXIgc2hhcmVzIGhlCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlZDsgbm8gcHJpdmF0ZSBpbmRpdmlkdWFsIGNvdWxkIGdldCBhY2Nlc3MgdG8gaGltLCBvciBmaW5kIGFueSBtZWFucyB0bwogICAgICAgICAgICAgICAgICAgIHByb3BpdGlhdGUgaGltLCBhbmQgaW5kdWNlIGhpbSB0byBhY3Qgd2l0aCBqdXN0aWNlLiBFdmVyeSBmb3JtZXIgcHJvcHJhZXRvciBoYWQKICAgICAgICAgICAgICAgICAgICBqdXN0IHNvIG11Y2ggcHJvcGVydHkgYXMgQW50b25pdXMgbGVmdCBoaW0gYWZ0ZXIgdGhlIGRpdmlzaW9uIG9mIGhpcyBlc3RhdGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhbHRob3VnaCBhbGwgdGhlc2UgcHJvY2VlZGluZ3MgY2FuCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIHJhdGlmaWVkLCBpZiB5b3UgYW5udWwgaGlzIGxhd3MsIHN0aWxsIEkgdGhpbmsgdGhhdCB0aGV5IG91Z2h0IGFsbCB0byBiZQogICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlbHkgdGFrZW4gbm90ZSBvZiwgYXJ0aWNsZSBieSBhcnRpY2xlOyBhbmQgdGhhdCB3ZSBvdWdodCBmb3JtYWxseSB0bwogICAgICAgICAgICAgICAgICAgIGRlY2lkZSB0aGF0IHRoZSBhcHBvaW50bWVudCBvZiBzZXB0ZW12aXJzIHdhcyBudWxsIGFuZCB2b2lkOyBhbmQgdGhhdCBub3RoaW5nIGlzCiAgICAgICAgICAgICAgICAgICAgcmF0aWZpZWQgd2hpY2ggaXMgc2FpZCB0byBoYXZlIGJlZW4gZG9uZSBieSB0aGVtLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGlmIEkgZGlkIG5vdCBjb21lIHRvIGEKICAgICAgICAgICAgICAgICAgICBzZW5hdGUtaG91c2UgaW4gdGhpcyBzdGF0ZSwgaGUsIG9uIHRoZSBmaXJzdCBvZiBTZXB0ZW1iZXIsIHNhaWQgdGhhdCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHNlbmQgY2FycGVudGVycyBhbmQgcHVsbCBkb3duIG15IGhvdXNlLiBJdCB3YXMgYW4gaW1wb3J0YW50IGFmZmFpciwgSSBzdXBwb3NlLAogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FzIHRvIGJlIGRpc2N1c3NlZC4gSGUgbWFkZSBzb21lIG1vdGlvbiBhYm91dCBhIHN1cHBsaWNhdGlvbi4gSSBhdHRlbmRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBkYXkgYWZ0ZXIuIEhlIGhpbXNlbGYgZGlkIG5vdCBjb21lLiBJIGRlbGl2ZXJlZCBteSBvcGluaW9uIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCBub3QgaW5kZWVkIHdpdGggcXVpdGUgc28gbXVjaCBmcmVlZG9tIGFzIHVzdWFsLCBidXQgc3RpbGwgd2l0aCBtb3JlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGUgdGhyZWF0cyBvZiBwZXJzb25hbCBkYW5nZXIgdG8gbXlzZWxmIG1hZGUgcGVyaGFwcyBhZHZpc2FibGUuIEJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdmlvbGVudCBhbmQgZnVyaW91cyBtYW4gKGZvciBMdWNpdXMgUGlzbyBoYWQgZG9uZSB0aGUgc2FtZSB0aGluZyB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgY3JlZGl0IHRoaXJ0eSBkYXlzIGJlZm9yZSkgdGhyZWF0ZW5lZCBtZSB3aXRoIGhpcyBlbm1pdHksIGFuZCBvcmRlcmVkIG1lIHRvCiAgICAgICAgICAgICAgICAgICAgYXR0ZW5kIHRoZSBzZW5hdGUgb24gdGhlIG5pbmV0ZWVudGggb2YgU2VwdGVtYmVyLiBJbiB0aGUgbWVhbnRpbWUgaGUgc3BlbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgb2YgdGhlIGludGVydmVuaW5nIHNldmVudGVlbiBkYXlzIGluIHRoZSB2aWxsYSBvZiBTY2lwaW8sIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGlidXIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRpYnVyIj5UaWJ1cjwvcGxhY2VOYW1lPiwgZGVjbGFpbWluZyBhZ2FpbnN0IG1lIHRvIG1ha2UgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHRoaXJzdHkuIEZvciB0aGlzIGlzIGhpcyB1c3VhbCBvYmplY3QgaW4gZGVjbGFpbWluZy4gPC90cmFuc2xhdGlvbj4="
translation['5.7.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiB0aGUgZGF5IGFycml2ZWQgb24gd2hpY2ggaGUgaGFkIG9yZGVyZWQgbWUgdG8gYXR0ZW5kLAogICAgICAgICAgICAgICAgICAgIHRoZW4gaGUgY2FtZSB3aXRoIGEgcmVndWxhciBhcm15IGluIGJhdHRsZSBhcnJheSB0byB0aGUgdGVtcGxlIG9mIENvbmNvcmQsIGFuZAogICAgICAgICAgICAgICAgICAgIG91dCBvZiBoaXMgaW1wdXJlIG1vdXRoIHZvbWl0ZWQgZm9ydGggYW4gb3JhdGlvbiBhZ2FpbnN0IG1lIGluIG15IGFic2VuY2UuIE9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggZGF5LCBpZiBteSBmcmllbmRzIGhhZCBub3QgcHJldmVudGVkIG1lIGZyb20gYXR0ZW5kaW5nIHRoZSBzZW5hdGUgYXMgSSB3YXMKICAgICAgICAgICAgICAgICAgICBhbnhpb3VzIHRvIGRvLCBoZSB3b3VsZCBoYXZlIGJlZ3VuIGEgbWFzc2FjcmUgYnkgdGhlIHNsYXVnaHRlciBvZiBtZS4gRm9yIHRoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgd2hhdCBoZSBoYWQgcmVzb2x2ZWQgdG8gZG8uIEFuZCB3aGVuIG9uY2UgaGUgaGFkIGR5ZWQgaGlzIHN3b3JkIGluIGJsb29kLAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd291bGQgaGF2ZSBtYWRlIGhpbSBsZWF2ZSBvZmYgYnV0IHB1cmUgZmF0aWd1ZSBhbmQgc2F0aWV0eS4gSW4gdHJ1dGgsCiAgICAgICAgICAgICAgICAgICAgaGlzIGJyb3RoZXIsIEx1Y2l1cy4gQW50b25pdXMsIHdhcyBwcmVzZW50LCBhbiBBc2lhdGljIGdsYWRpYXRvciwgd2hvIGhhZCBmb3VnaHQKICAgICAgICAgICAgICAgICAgICBhcyBhIG1pcm1pbGxvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bWlybWlsbG88L2ZvcmVpZ24+IHdhcwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ2xhZGlhdG9yIHdobyBmb3VnaHQgd2l0aCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cmV0aWFyaXVzPC9mb3JlaWduPjsgaGUKICAgICAgICAgICAgICAgICAgICAgICAgd29yZSBhIEdhbGxpYyBoZWxtZXQgd2l0aCBhIGZpc2ggZm9yIGEgY3Jlc3QuPC9ub3RlPiBhdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5taXJtaWxsbzwvZm9yZWlnbj4gd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBnbGFkaWF0b3Igd2hvIGZvdWdodCB3aXRoIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5yZXRpYXJpdXM8L2ZvcmVpZ24+OyBoZQogICAgICAgICAgICAgICAgICAgICAgICB3b3JlIGEgR2FsbGljIGhlbG1ldCB3aXRoIGEgZmlzaCBmb3IgYSBjcmVzdC48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE15bGFzYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXlsYXNhIj5NeWxhc2E8L3BsYWNlTmFtZT47IGhlIHdhcyB0aGlyc3RpbmcgZm9yIG15IGJsb29kLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYWQgc2hlZCBtdWNoIG9mIGhpcyBvd24gaW4gdGhhdCBnbGFkaWF0b3JpYWwgY29tYmF0LiBIZSB3YXMgbm93IHZhbHVpbmcgb3VyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgaW4gaGlzIG1pbmQsIHRha2luZyBub3RpY2Ugb2Ygb3VyIHBvc3Nlc3Npb25zIGluIHRoZSBjaXR5IGFuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OyBoaXMgaW5kaWdlbmNlIHVuaXRlZCB3aXRoIGhpcyBjb3ZldG91c25lc3Mgd2FzIHRocmVhdGVuaW5nIGFsbCBvdXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lczsgaGUgd2FzIGRpc3RyaWJ1dGluZyBvdXIgbGFuZHMgdG8gd2hvbXNvZXZlciBhbmQgaW4gd2hhdGV2ZXIgc2hhcmVzIGhlCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlZDsgbm8gcHJpdmF0ZSBpbmRpdmlkdWFsIGNvdWxkIGdldCBhY2Nlc3MgdG8gaGltLCBvciBmaW5kIGFueSBtZWFucyB0bwogICAgICAgICAgICAgICAgICAgIHByb3BpdGlhdGUgaGltLCBhbmQgaW5kdWNlIGhpbSB0byBhY3Qgd2l0aCBqdXN0aWNlLiBFdmVyeSBmb3JtZXIgcHJvcHJhZXRvciBoYWQKICAgICAgICAgICAgICAgICAgICBqdXN0IHNvIG11Y2ggcHJvcGVydHkgYXMgQW50b25pdXMgbGVmdCBoaW0gYWZ0ZXIgdGhlIGRpdmlzaW9uIG9mIGhpcyBlc3RhdGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.7.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFsdGhvdWdoIGFsbCB0aGVzZSBwcm9jZWVkaW5ncyBjYW4KICAgICAgICAgICAgICAgICAgICBub3QgYmUgcmF0aWZpZWQsIGlmIHlvdSBhbm51bCBoaXMgbGF3cywgc3RpbGwgSSB0aGluayB0aGF0IHRoZXkgb3VnaHQgYWxsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGVseSB0YWtlbiBub3RlIG9mLCBhcnRpY2xlIGJ5IGFydGljbGU7IGFuZCB0aGF0IHdlIG91Z2h0IGZvcm1hbGx5IHRvCiAgICAgICAgICAgICAgICAgICAgZGVjaWRlIHRoYXQgdGhlIGFwcG9pbnRtZW50IG9mIHNlcHRlbXZpcnMgd2FzIG51bGwgYW5kIHZvaWQ7IGFuZCB0aGF0IG5vdGhpbmcgaXMKICAgICAgICAgICAgICAgICAgICByYXRpZmllZCB3aGljaCBpcyBzYWlkIHRvIGhhdmUgYmVlbiBkb25lIGJ5IHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['5.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdobyBpcyB0aGVyZSB3aG8gY2FuIGNvbnNpZGVyIE1hcmN1cyBBbnRvbml1cyBhIGNpdGl6ZW4sIHJhdGhlciB0aGFuIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGZvdWwgYW5kIGJhcmJhcm91cyBlbmVteSwgd2hvLCB3aGlsZSBzaXR0aW5nIGluIGZyb250IG9mIHRoZSB0ZW1wbGUgb2YgQ2FzdG9yLAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBoZWFyaW5nIG9mIHRoZSBSb21hbiBwZW9wbGUsIHNhaWQgdGhhdCBubyBvbmUgc2hvdWxkIHN1cnZpdmUgZXhjZXB0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgdmljdG9yaW91cz8gRG8geW91IHN1cHBvc2UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgaGUgc3Bva2Ugd2l0aAogICAgICAgICAgICAgICAgICAgIG1vcmUgdmlvbGVuY2UgdGhhbiBoZSB3b3VsZCBhY3Q/IEFuZCB3aGF0IGFyZSB3ZSB0byB0aGluayBvZiBoaXMgaGF2aW5nIHZlbnR1cmVkCiAgICAgICAgICAgICAgICAgICAgdG8gc2F5IHRoYXQsIGFmdGVyIGhlIGhhZCBnaXZlbiB1cCBoaXMgbWFnaXN0cmFjeSwgaGUgc2hvdWxkIHN0aWxsIGJlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgd2l0aCBoaXMgYXJteT8gdGhhdCBoZSBzaG91bGQgZW50ZXIgdGhlIGNpdHkgYXMgb2Z0ZW4gYXMgaGUgcGxlYXNlZD8gV2hhdAogICAgICAgICAgICAgICAgICAgIGVsc2Ugd2FzIHRoaXMgYnV0IHRocmVhdGVuaW5nIHRoZSBSb21hbiBwZW9wbGUgd2l0aCBzbGF2ZXJ5PyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB3aGF0IHdhcyB0aGUgb2JqZWN0IG9mIGhpcyBqb3VybmV5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4/IGFuZCBvZiB0aGF0IGdyZWF0IGhhc3RlPwogICAgICAgICAgICAgICAgICAgIFdoYXQgd2FzIGhpcyBob3BlLCBleGNlcHQgdG8gbGVhZCB0aGF0IHZhc3QgYXJteSB0byB0aGUgY2l0eSBvciByYXRoZXIgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5PyBXaGF0IGEgcHJvY2VlZGluZyB3YXMgdGhhdCBzZWxlY3Rpb24gb2YgdGhlIGNlbnR1cmlvbnMhIFdoYXQgdW5icmlkbGVkCiAgICAgICAgICAgICAgICAgICAgZnVyeSBvZiBhbiBpbnRlbXBlcmF0ZSBtaW5kISBGb3Igd2hlbiB0aG9zZSBnYWxsYW50IGxlZ2lvbnMgaGFkIHJhaXNlZCBhbiBvdXRjcnkKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhpcyBwcm9taXNlcyBoZSBvcmRlcmVkIHRob3NlIGNlbnR1cmlvbnMgdG8gY29tZSB0byBoaW0gdG8gaGlzIGhvdXNlCiAgICAgICAgICAgICAgICAgICAgd2hvbSBoZSBwZXJjZWl2ZWQgdG8gYmUgbG95YWxseSBhdHRhY2hlZCB0byB0aGUgcmVwdWJsaWMgYW5kIHRoZW4gaGUgaGFkIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbGwgbXVyZGVyZWQgYmVmb3JlIGhpcyBvd24gZXllcyBhbmQgdGhvc2Ugb2YgaGlzIHdpZmUgd2hvbSB0aGlzIG5vYmxlIGNvbW1hbmRlcgogICAgICAgICAgICAgICAgICAgIGhhZCB0YWtlbiB3aXRoIGhpbSB0byB0aGUgYXJteSBXaGF0IGRpc3Bvc2l0aW9uIGRvIHlvdSBzdXBwb3NlIHRoYXQgdGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICB3aWxsIGRpc3BsYXkgdG93YXJkIHVzIHdob20gaGUgaGF0ZXMgd2hlbiBoZSB3YXMgc28gY3J1ZWwgdG8gdGhvc2UgbWVuIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgbmV2ZXIgc2Vlbj8gQW5kIGhvdyBjb3ZldG91cyB3aWxsIGhlIGJlIHdpdGggcmVzcGVjdCB0byB0aGUgbW9uZXkgb2YgcmljaAogICAgICAgICAgICAgICAgICAgIG1lbiB3aGVuIGhlIHRoaXJzdGVkIGZvciBldmVuIHRoZSBibG9vZCBvZiBwb29yIG1lbj8gd2hvc2UgcHJvcGVydHkgc3VjaCBhcyBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBoZSBpbW1lZGlhdGVseSBkaXZpZGVkIGFtb25nIGhpcyBzYXRlbGxpdGVzIGFuZCBib29uIGNvbXBhbmlvbnMuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdoYXQgd2FzIHRoZSBvYmplY3Qgb2YgaGlzIGpvdXJuZXkgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+PyBhbmQgb2YgdGhhdCBncmVhdCBoYXN0ZT8KICAgICAgICAgICAgICAgICAgICBXaGF0IHdhcyBoaXMgaG9wZSwgZXhjZXB0IHRvIGxlYWQgdGhhdCB2YXN0IGFybXkgdG8gdGhlIGNpdHkgb3IgcmF0aGVyIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eT8gV2hhdCBhIHByb2NlZWRpbmcgd2FzIHRoYXQgc2VsZWN0aW9uIG9mIHRoZSBjZW50dXJpb25zISBXaGF0IHVuYnJpZGxlZAogICAgICAgICAgICAgICAgICAgIGZ1cnkgb2YgYW4gaW50ZW1wZXJhdGUgbWluZCEgRm9yIHdoZW4gdGhvc2UgZ2FsbGFudCBsZWdpb25zIGhhZCByYWlzZWQgYW4gb3V0Y3J5CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaXMgcHJvbWlzZXMgaGUgb3JkZXJlZCB0aG9zZSBjZW50dXJpb25zIHRvIGNvbWUgdG8gaGltIHRvIGhpcyBob3VzZQogICAgICAgICAgICAgICAgICAgIHdob20gaGUgcGVyY2VpdmVkIHRvIGJlIGxveWFsbHkgYXR0YWNoZWQgdG8gdGhlIHJlcHVibGljIGFuZCB0aGVuIGhlIGhhZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgYWxsIG11cmRlcmVkIGJlZm9yZSBoaXMgb3duIGV5ZXMgYW5kIHRob3NlIG9mIGhpcyB3aWZlIHdob20gdGhpcyBub2JsZSBjb21tYW5kZXIKICAgICAgICAgICAgICAgICAgICBoYWQgdGFrZW4gd2l0aCBoaW0gdG8gdGhlIGFybXkgV2hhdCBkaXNwb3NpdGlvbiBkbyB5b3Ugc3VwcG9zZSB0aGF0IHRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgd2lsbCBkaXNwbGF5IHRvd2FyZCB1cyB3aG9tIGhlIGhhdGVzIHdoZW4gaGUgd2FzIHNvIGNydWVsIHRvIHRob3NlIG1lbiB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIG5ldmVyIHNlZW4/IEFuZCBob3cgY292ZXRvdXMgd2lsbCBoZSBiZSB3aXRoIHJlc3BlY3QgdG8gdGhlIG1vbmV5IG9mIHJpY2gKICAgICAgICAgICAgICAgICAgICBtZW4gd2hlbiBoZSB0aGlyc3RlZCBmb3IgZXZlbiB0aGUgYmxvb2Qgb2YgcG9vciBtZW4/IHdob3NlIHByb3BlcnR5IHN1Y2ggYXMgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgaGUgaW1tZWRpYXRlbHkgZGl2aWRlZCBhbW9uZyBoaXMgc2F0ZWxsaXRlcyBhbmQgYm9vbiBjb21wYW5pb25zLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlIGluIGEgZnVyeSB3YXMgbm93IG1vdmluZyBoaXMgaG9zdGlsZQogICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkcyBhZ2FpbnN0IGhpcyBjb3VudHJ5IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiB3aGVuIENhaXVzIENhZXNhciBieSB0aGUga2luZCBpbnNwaXJhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbCBnb2RzLCBieSB0aGUgZ3JlYXRuZXNzIG9mIGhpcyBvd24gaGVhdmVubHkgY291cmFnZSwgYW5kIHdpc2RvbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZ2VuaXVzLCBvZiBoaXMgb3duIGFjY29yZCwgaW5kZWVkIGFuZCBwcm9tcHRlZCBieSBoaXMgb3duIGFkbWlyYWJsZSB2aXJ0dWUsIGJ1dAogICAgICAgICAgICAgICAgICAgIHN0aWxsIHdpdGggdGhlIGFwcHJvYmF0aW9uIG9mIG15IGF1dGhvcml0eSB3ZW50IGRvd24gdG8gdGhlIGNvbG9uaWVzIHdoaWNoIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gZm91bmRlZCBieSBoaXMgZmF0aGVyOyBjb252b2tlZCB0aGUgdmV0ZXJhbiBzb2xkaWVyeTsgaW4gYSBmZXcgZGF5cyByYWlzZWQKICAgICAgICAgICAgICAgICAgICBhbiBhcm15IGFuZCBjaGVja2VkIHRoZSBmdXJpb3VzIGFkdmFuY2Ugb2YgdGhpcyBiYW5kaXQuIEJ1dCBhZnRlciB0aGUgTWFydGlhbAogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiBzYXcgdGhpcyBhZG1pcmFibGUgbGVhZGVyLCBpdCBoYWQgbm8gb3RoZXIgdGhvdWdodHMgYnV0IHRob3NlIG9mIHNlY3VyaW5nCiAgICAgICAgICAgICAgICAgICAgb3VyIGxpYmVydHkuIEFuZCB0aGUgZm91cnRoIGxlZ2lvbiBmb2xsb3dlZCBpdHMgZXhhbXBsZS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGhlIGluIGEgZnVyeSB3YXMgbm93IG1vdmluZyBoaXMgaG9zdGlsZQogICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkcyBhZ2FpbnN0IGhpcyBjb3VudHJ5IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IHdoZW4gQ2FpdXMgQ2Flc2FyIGJ5IHRoZSBraW5kIGluc3BpcmF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsIGdvZHMsIGJ5IHRoZSBncmVhdG5lc3Mgb2YgaGlzIG93biBoZWF2ZW5seSBjb3VyYWdlLCBhbmQgd2lzZG9tLCBhbmQKICAgICAgICAgICAgICAgICAgICBnZW5pdXMsIG9mIGhpcyBvd24gYWNjb3JkLCBpbmRlZWQgYW5kIHByb21wdGVkIGJ5IGhpcyBvd24gYWRtaXJhYmxlIHZpcnR1ZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgc3RpbGwgd2l0aCB0aGUgYXBwcm9iYXRpb24gb2YgbXkgYXV0aG9yaXR5IHdlbnQgZG93biB0byB0aGUgY29sb25pZXMgd2hpY2ggaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBmb3VuZGVkIGJ5IGhpcyBmYXRoZXI7IGNvbnZva2VkIHRoZSB2ZXRlcmFuIHNvbGRpZXJ5OyBpbiBhIGZldyBkYXlzIHJhaXNlZAogICAgICAgICAgICAgICAgICAgIGFuIGFybXkgYW5kIGNoZWNrZWQgdGhlIGZ1cmlvdXMgYWR2YW5jZSBvZiB0aGlzIGJhbmRpdC4gQnV0IGFmdGVyIHRoZSBNYXJ0aWFsCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uIHNhdyB0aGlzIGFkbWlyYWJsZSBsZWFkZXIsIGl0IGhhZCBubyBvdGhlciB0aG91Z2h0cyBidXQgdGhvc2Ugb2Ygc2VjdXJpbmcKICAgICAgICAgICAgICAgICAgICBvdXIgbGliZXJ0eS4gQW5kIHRoZSBmb3VydGggbGVnaW9uIGZvbGxvd2VkIGl0cyBleGFtcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIEFudG9uaXVzLCBvbiBoZWFyaW5nIG9mIHRoaXMgbmV3cyBhZnRlciBoZSBoYWQgc3VtbW9uZWQgdGhlIHNlbmF0ZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgYSBtYW4gb2YgY29uc3VsYXIgcmFuayB0byBkZWNsYXJlIGhpcyBvcGluaW9uIHRoYXQgQ2FpdXMuIENhZXNhciB3YXMgYW4KICAgICAgICAgICAgICAgICAgICBlbmVteSBvZiBoaXMgY291bnRyeSwgaW1tZWRpYXRlbHkgZmFpbnRlZCBhd2F5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhZnRlcndhcmQgd2l0aG91dCBlaXRoZXIgcGVyZm9ybWluZyB0aGUgdXN1YWwgc2FjcmlmaWNlcyBvciBvZmZlcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b21hcnkgdm93cywgaGUsIEkgd2lsbCBub3Qgc2F5IHdlbnQgZm9ydGgsIGJ1dCB0b29rIHRvIGZsaWdodCBpbiBoaXMgcm9iZSBhcwogICAgICAgICAgICAgICAgICAgIGEgZ2VuZXJhbC4gQnV0IHdoaWNoIHdheSBkaWQgaGUgZmxlZT8gVG8gdGhlIHByb3ZpbmNlIG9mIG91ciBtb3N0IHJlc29sdXRlIGFuZAogICAgICAgICAgICAgICAgICAgIGJyYXZlc3QgY2l0aXplbnMsIG1lbiB3aG8gY291bGQgbmV2ZXIgaGF2ZSBlbmR1cmVkIGhpbSBpZiBoZSBoYWQgbm90IGNvbWUKICAgICAgICAgICAgICAgICAgICBicmluZ2luZyB3YXIgaW4gaGlzIHRyYWluLCBhbiBpbnRlbXBlcmF0ZSwgcGFzc2lvbmF0ZSwgaW5zb2xlbnQsIHByb3VkIG1hbiwKICAgICAgICAgICAgICAgICAgICBhbHdheXMgbWFraW5nIGRlbWFuZHMsIGFsd2F5cyBwbHVuZGVyaW5nLCBhbHdheXMgZHJ1bmsuIEJ1dCBoZSwgd2hvc2UKICAgICAgICAgICAgICAgICAgICB3b3J0aGxlc3NuZXNzIGV2ZW4gd2hlbiBxdWlldCB3YXMgbW9yZSB0aGFuIGFueSBvbmUgY291bGQgZW5kdXJlLCBoYXMgZGVjbGFyZWQKICAgICAgICAgICAgICAgICAgICB3YXIgdXBvbiB0aGUgcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT47IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgYmVzaWVnaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIGEgdmFsaWFudCBhbmQKICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBjb2xvbnkgb2YgdGhlIFJvbWFuIHBlb3BsZTsgaGUgaXMgYmxvY2thZGluZyBEZWNpbXVzIEJydXR1cywgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCwgdGhlIGNvbnN1bC1lbGVjdCwgYSBjaXRpemVuIGJvcm4gbm90IGZvciBoaW1zZWxmLCBidXQgZm9yIHVzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2FzIHRoZW4gSGFubmliYWwgYW4gZW5lbXksIGFuZCBpcwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGEgY2l0aXplbj8gV2hhdCBkaWQgdGhlIG9uZSBkbyBsaWtlIGFuIGVuZW15LCB0aGF0IHRoZSBvdGhlciBoYXMgbm90CiAgICAgICAgICAgICAgICAgICAgZG9uZSwgb3IgaXMgbm90IGRvaW5nLCBvciBwbGFubmluZywgYW5kIHRoaW5raW5nIG9mPyBXaGF0IHdhcyB0aGVyZSBpbiB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgam91cm5leSBvZiB0aGUgQW50b25paTsgZXhjZXB0IGRlcG9wdWxhdGlvbiwgZGV2YXN0YXRpb24sIHNsYXVnaHRlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmFwaW5lPyBBY3Rpb25zIHdoaWNoIEhhbm5pYmFsIG5ldmVyIGRpZCwgYmVjYXVzZSBoZSB3YXMgcmVzZXJ2aW5nIG1hbnkgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpcyBvd24gdXNlLCB0aGVzZSBtZW4gZG8sIGFzIG1lbiB3aG8gbGl2ZSBtZXJlbHkgZm9yIHRoZSBwcmVzZW50IGhvdXI7IHRoZXkKICAgICAgICAgICAgICAgICAgICBuZXZlciBoYXZlIGdpdmVuIGEgdGhvdWdodCBub3Qgb25seSB0byB0aGUgZm9ydHVuZXMgYW5kIHdlbGZhcmUgb2YgdGhlIGNpdGl6ZW5zLAogICAgICAgICAgICAgICAgICAgIGJ1dCBub3QgZXZlbiB0byB0aGVpciBvd24gYWR2YW50YWdlLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFmdGVyd2FyZCB3aXRob3V0IGVpdGhlciBwZXJmb3JtaW5nIHRoZSB1c3VhbCBzYWNyaWZpY2VzIG9yIG9mZmVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGN1c3RvbWFyeSB2b3dzLCBoZSwgSSB3aWxsIG5vdCBzYXkgd2VudCBmb3J0aCwgYnV0IHRvb2sgdG8gZmxpZ2h0IGluIGhpcyByb2JlIGFzCiAgICAgICAgICAgICAgICAgICAgYSBnZW5lcmFsLiBCdXQgd2hpY2ggd2F5IGRpZCBoZSBmbGVlPyBUbyB0aGUgcHJvdmluY2Ugb2Ygb3VyIG1vc3QgcmVzb2x1dGUgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJhdmVzdCBjaXRpemVucywgbWVuIHdobyBjb3VsZCBuZXZlciBoYXZlIGVuZHVyZWQgaGltIGlmIGhlIGhhZCBub3QgY29tZQogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIHdhciBpbiBoaXMgdHJhaW4sIGFuIGludGVtcGVyYXRlLCBwYXNzaW9uYXRlLCBpbnNvbGVudCwgcHJvdWQgbWFuLAogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBtYWtpbmcgZGVtYW5kcywgYWx3YXlzIHBsdW5kZXJpbmcsIGFsd2F5cyBkcnVuay4gQnV0IGhlLCB3aG9zZQogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzc25lc3MgZXZlbiB3aGVuIHF1aWV0IHdhcyBtb3JlIHRoYW4gYW55IG9uZSBjb3VsZCBlbmR1cmUsIGhhcyBkZWNsYXJlZAogICAgICAgICAgICAgICAgICAgIHdhciB1cG9uIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBoZSBpcwogICAgICAgICAgICAgICAgICAgIGJlc2llZ2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIGEgdmFsaWFudCBhbmQKICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBjb2xvbnkgb2YgdGhlIFJvbWFuIHBlb3BsZTsgaGUgaXMgYmxvY2thZGluZyBEZWNpbXVzIEJydXR1cywgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCwgdGhlIGNvbnN1bC1lbGVjdCwgYSBjaXRpemVuIGJvcm4gbm90IGZvciBoaW1zZWxmLCBidXQgZm9yIHVzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['5.9.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2FzIHRoZW4gSGFubmliYWwgYW4gZW5lbXksIGFuZCBpcwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGEgY2l0aXplbj8gV2hhdCBkaWQgdGhlIG9uZSBkbyBsaWtlIGFuIGVuZW15LCB0aGF0IHRoZSBvdGhlciBoYXMgbm90CiAgICAgICAgICAgICAgICAgICAgZG9uZSwgb3IgaXMgbm90IGRvaW5nLCBvciBwbGFubmluZywgYW5kIHRoaW5raW5nIG9mPyBXaGF0IHdhcyB0aGVyZSBpbiB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgam91cm5leSBvZiB0aGUgQW50b25paTsgZXhjZXB0IGRlcG9wdWxhdGlvbiwgZGV2YXN0YXRpb24sIHNsYXVnaHRlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmFwaW5lPyBBY3Rpb25zIHdoaWNoIEhhbm5pYmFsIG5ldmVyIGRpZCwgYmVjYXVzZSBoZSB3YXMgcmVzZXJ2aW5nIG1hbnkgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpcyBvd24gdXNlLCB0aGVzZSBtZW4gZG8sIGFzIG1lbiB3aG8gbGl2ZSBtZXJlbHkgZm9yIHRoZSBwcmVzZW50IGhvdXI7IHRoZXkKICAgICAgICAgICAgICAgICAgICBuZXZlciBoYXZlIGdpdmVuIGEgdGhvdWdodCBub3Qgb25seSB0byB0aGUgZm9ydHVuZXMgYW5kIHdlbGZhcmUgb2YgdGhlIGNpdGl6ZW5zLAogICAgICAgICAgICAgICAgICAgIGJ1dCBub3QgZXZlbiB0byB0aGVpciBvd24gYWR2YW50YWdlLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFyZSB3ZSB0aGVuLCBPIHllIGdvb2QgZ29kcywgdG8gcmVzb2x2ZSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIHRoaXMgbWFuPyBBcmUKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4gd2hvIHByb3Bvc2UgdGhpcyBhY3F1YWludGVkIHdpdGggdGhlIGNvbnN0aXR1dGlvbiBvZiB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgbGF3cyBvZiB3YXIsIHdpdGggdGhlIHByZWNlZGVudHMgb2Ygb3VyIGFuY2VzdG9ycz8gRG8gdGhleSBnaXZlIGEKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IHRvIHdoYXQgdGhlIG1hamVzdHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBhbmQgdGhlIHNldmVyaXR5IG9mIHRoZSBzZW5hdGUKICAgICAgICAgICAgICAgICAgICByZXF1aXJlcz8gRG8geW91IHJlc29sdmUgdG8gc2VuZCBhbWJhc3NhZG9ycz8gSWYgdG8gYmVnIGhpcyBtZXJjeSwgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGRlc3Bpc2UgeW91OyBpZiB0byBkZWNsYXJlIHlvdXIgY29tbWFuZHMsIGhlIHdpbGwgbm90IGxpc3RlbiB0byB0aGVtOyBhbmQgbGFzdAogICAgICAgICAgICAgICAgICAgIG9mIGFsbCwgaG93ZXZlciBzZXZlcmUgdGhlIG1lc3NhZ2UgbWF5IGJlIHdoaWNoIHdlIGdpdmUgdGhlIGFtYmFzc2Fkb3JzLCB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG5hbWUgb2YgYW1iYXNzYWRvcnMgd2lsbCBleHRpbmd1aXNoIHRoaXMgYXJkb3Igb2YgdGhlIFJvbWFuIHBlb3BsZSB3aGljaCB3ZQogICAgICAgICAgICAgICAgICAgIHNlZSBhdCBwcmVzZW50LCBhbmQgYnJlYWsgdGhlIHNwaXJpdCBvZiB0aGUgbXVuaWNpcGFsIHRvd25zIGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gVG8gc2F5IG5vdGhpbmcgb2YgdGhlc2UgYXJndW1lbnRzLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IGFyZSB3ZWlnaHR5LCBhdCBhbGwgZXZlbnRzIHRoYXQgc2VuZGluZyBvZiBhbiBlbWJhc3N5IHdpbGwgY2F1c2UKICAgICAgICAgICAgICAgICAgICBkZWxheSBhbmQgc2xvd25lc3MgdG8gdGhlIHdhci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBBbHRob3VnaCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBwcm9wb3NlIGl0IHNob3VsZCBzYXksIGFzIEkgaGVhciB0aGF0IHNvbWUgaW50ZW5kIHRvCiAgICAgICAgICAgICAgICAgICAgc2F5LOKAlOKAnExldCB0aGUgYW1iYXNzYWRvcnMgZ28sIGJ1dCBsZXQgd2FyIGJlIHByZXBhcmVkIGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgc2FtZS7igJ0gU3RpbGwgdGhlIHZlcnkgbmFtZSBvZiBhbWJhc3NhZG9ycyB3aWxsIGRhbXAgbWVuJ3MKICAgICAgICAgICAgICAgICAgICBjb3VyYWdlLCBhbmQgZGVsYXkgdGhlIHJhcGlkaXR5IG9mIHRoZSB3YXIuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4uIFRvIHNheSBub3RoaW5nIG9mIHRoZXNlIGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhleSBhcmUgd2VpZ2h0eSwgYXQgYWxsIGV2ZW50cyB0aGF0IHNlbmRpbmcgb2YgYW4gZW1iYXNzeSB3aWxsIGNhdXNlCiAgICAgICAgICAgICAgICAgICAgZGVsYXkgYW5kIHNsb3duZXNzIHRvIHRoZSB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['5.9.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQWx0aG91Z2ggdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gcHJvcG9zZSBpdCBzaG91bGQgc2F5LCBhcyBJIGhlYXIgdGhhdCBzb21lIGludGVuZCB0bwogICAgICAgICAgICAgICAgICAgIHNheSzigJTigJxMZXQgdGhlIGFtYmFzc2Fkb3JzIGdvLCBidXQgbGV0IHdhciBiZSBwcmVwYXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHNhbWUu4oCdIFN0aWxsIHRoZSB2ZXJ5IG5hbWUgb2YgYW1iYXNzYWRvcnMgd2lsbCBkYW1wIG1lbidzCiAgICAgICAgICAgICAgICAgICAgY291cmFnZSwgYW5kIGRlbGF5IHRoZSByYXBpZGl0eSBvZiB0aGUgd2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBtb3N0IGltcG9ydGFudCBldmVudHMsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFyZSBvZnRlbiBkZXRlcm1pbmVkIGJ5IHZlcnkKICAgICAgICAgICAgICAgICAgICB0cml2aWFsIG1vdmluZyBpbmZsdWVuY2VzIGluIGV2ZXJ5IGNpcmN1bXN0YW5jZSB0aGF0IGNhbiBoYXBwZW4gaW4gdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIGFuZCBhbHNvIGluIHdhciwgYW5kIGVzcGVjaWFsbHkgaW4gY2l2aWwgd2FyLCB3aGljaCBpcyB1c3VhbGx5IGdvdmVybmVkIGEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBkZWFsIGJ5IG1lbidzIG9waW5pb25zIGFuZCBieSByZXBvcnRzLiBObyBvbmUgd2lsbCBhc2sgd2hhdCBpcyB0aGUgY29tbWlzc2lvbgogICAgICAgICAgICAgICAgICAgIHdpdGggd2hpY2ggd2UgaGF2ZSBzZW50IHRoZSBhbWJhc3NhZG9yczsgdGhlIG1lcmUgbmFtZSBvZiBhbiBlbWJhc3N5LCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHNlbnQgYnkgdXMgb2Ygb3VyLCBvd24gYWNjb3JkLCB3aWxsIGFwcGVhciBhbiBpbmRpY2F0aW9uIG9mIGZlYXIuIExldCBoaW0gZGVwYXJ0CiAgICAgICAgICAgICAgICAgICAgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT47IGxldCBoaW0gY2Vhc2UgdG8gYXR0YWNrCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzOyBsZXQgaGltIHJldGlyZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4uIEhlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBub3QgYmUgYmVnZ2VkIGluIHdvcmRzIHRvIGRvIHNvOyBoZSBtdXN0IGJlIGNvbXBlbGxlZCBieSBhcm1zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3ZSBhcmUgbm90IHNlbmRpbmcgdG8gSGFubmliYWwgdG8gZGVzaXJlIGhpbSB0bwogICAgICAgICAgICAgICAgICAgIHJldGlyZSBmcm9tIGJlZm9yZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODU1OSIga2V5PSJ0Z24sNzAwODU1OSI+U2FndW50dW08L3BsYWNlTmFtZT47IHRvIHdob20KICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlIGZvcm1lcmx5IHNlbnQgUHVibGl1cyBWYWxlcml1cyBGbGFjY3VzIGFuZCBRdWludHVzLiBCYWViaXVzIFRhbXBpbHVzOwogICAgICAgICAgICAgICAgICAgIHdobywgaWYgSGFubmliYWwgZGlkIG5vdCBjb21wbHksIHdlcmUgb3JkZXJlZCB0byBwcm9jZWVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4uIFdoaXRoZXIgZG8gd2Ugb3JkZXIgb3VyCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgdG8gcHJvY2VlZCwgaWYgQW50b25pdXMgZG9lcyBub3QgY29tcGx5PyBBcmUgd2Ugc2VuZGluZyBhbiBlbWJhc3N5CiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIG93biBjaXRpemVuLCB0byBiZWcgaGltIG5vdCB0byBhdHRhY2sgYSBnZW5lcmFsIGFuZCBhIGNvbG9ueSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU/IElzIGl0IHNvPyBJcyBpdCBiZWNvbWluZyB0byB1cyB0byBiZWcgdGhpcyBieSBtZWFucyBvZiBhbWJhc3NhZG9ycz8gV2hhdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBkaWZmZXJlbmNlIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB3aGV0aGVyIGhlIGF0dGFja3MgdGhpcyBjaXR5CiAgICAgICAgICAgICAgICAgICAgaXRzZWxmIG9yIHdoZXRoZXIgaGUgYXR0YWNrcyBhbiBvdXRwb3N0IG9mIHRoaXMgY2l0eSBhIGNvbG9ueSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgZXN0YWJsaXNoZWQgZm9yIHRoZSBzYWtlIG9mIGl0cyBiZWluZyBhIGJ1bHdhcmsgYW5kIHByb3RlY3Rpb24gdG8gdXM/IFRoZQogICAgICAgICAgICAgICAgICAgIHNpZWdlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTU5IiBrZXk9InRnbiw3MDA4NTU5Ij5TYWd1bnR1bTwvcGxhY2VOYW1lPiB3YXMgdGhlIGNhdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlY29uZCBQdW5pYyB3YXIsIHdoaWNoIEhhbm5pYmFsIGNhcnJpZWQgb24gYWdhaW5zdCBvdXIgYW5jZXN0b3JzLiBJdCB3YXMgcXVpdGUKICAgICAgICAgICAgICAgICAgICByaWdodCB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIGhpbSBUaGV5IHdlcmUgc2VudCB0byBhIENhcnRoYWdpbmlhbiwgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc2VudCBvbiBiZWhhbGYgb2YgdGhvc2Ugd2hvIHdlcmUgdGhlIGVuZW1pZXMgb2YgSGFubmliYWwgYW5kIG91ciBhbGxpZXMuIFdoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSByZXNlbWJsaW5nIHRoYXQgY2FzZSBoZXJlPyBXZSBhcmUgc2VuZGluZyB0byBvbmUgb2Ygb3VyIG93biBjaXRpemVucyB0bwogICAgICAgICAgICAgICAgICAgIGJlZyBoaW0gbm90IHRvIGJsb2NrYWRlIGEgZ2VuZXJhbCBvZiB0aGUgUm9tYW4gYXJteSwgbm90IHRvIGF0dGFjayBvdXIgYXJteSBhbmQKICAgICAgICAgICAgICAgICAgICBvdXIgY29sb255LOKAlGluIHNob3J0IG5vdCB0byBiZSBhbiBlbmVteSBvciBvdXJzLiBDb21lOyBzdXBwb3NlIGhlCiAgICAgICAgICAgICAgICAgICAgb2JleXMsIHNoYWxsIHdlIGVpdGhlciBiZSBpbmNsaW5lZCwgb3Igc2hhbGwgd2UgYmUgYWJsZSBieSBhbnkgcG9zc2liaWxpdHksIHRvCiAgICAgICAgICAgICAgICAgICAgdHJlYXQgaGltIGFzIG9uZSBvZiBvdXIgY2l0aXplbnM/IDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT47IGxldCBoaW0gY2Vhc2UgdG8gYXR0YWNrCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzOyBsZXQgaGltIHJldGlyZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4uIEhlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBub3QgYmUgYmVnZ2VkIGluIHdvcmRzIHRvIGRvIHNvOyBoZSBtdXN0IGJlIGNvbXBlbGxlZCBieSBhcm1zLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.10.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdlIGFyZSBub3Qgc2VuZGluZyB0byBIYW5uaWJhbCB0byBkZXNpcmUgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgcmV0aXJlIGZyb20gYmVmb3JlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg1NTkiPlNhZ3VudHVtPC9wbGFjZU5hbWU+OyB0byB3aG9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBmb3JtZXJseSBzZW50IFB1YmxpdXMgVmFsZXJpdXMgRmxhY2N1cyBhbmQgUXVpbnR1cy4gQmFlYml1cyBUYW1waWx1czsKICAgICAgICAgICAgICAgICAgICB3aG8sIGlmIEhhbm5pYmFsIGRpZCBub3QgY29tcGx5LCB3ZXJlIG9yZGVyZWQgdG8gcHJvY2VlZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4uIFdoaXRoZXIgZG8gd2Ugb3JkZXIgb3VyCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgdG8gcHJvY2VlZCwgaWYgQW50b25pdXMgZG9lcyBub3QgY29tcGx5PyBBcmUgd2Ugc2VuZGluZyBhbiBlbWJhc3N5CiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIG93biBjaXRpemVuLCB0byBiZWcgaGltIG5vdCB0byBhdHRhY2sgYSBnZW5lcmFsIGFuZCBhIGNvbG9ueSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGU/IElzIGl0IHNvPyBJcyBpdCBiZWNvbWluZyB0byB1cyB0byBiZWcgdGhpcyBieSBtZWFucyBvZiBhbWJhc3NhZG9ycz8gV2hhdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBkaWZmZXJlbmNlIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB3aGV0aGVyIGhlIGF0dGFja3MgdGhpcyBjaXR5CiAgICAgICAgICAgICAgICAgICAgaXRzZWxmIG9yIHdoZXRoZXIgaGUgYXR0YWNrcyBhbiBvdXRwb3N0IG9mIHRoaXMgY2l0eSBhIGNvbG9ueSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgZXN0YWJsaXNoZWQgZm9yIHRoZSBzYWtlIG9mIGl0cyBiZWluZyBhIGJ1bHdhcmsgYW5kIHByb3RlY3Rpb24gdG8gdXM/IFRoZQogICAgICAgICAgICAgICAgICAgIHNpZWdlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg1NTkiPlNhZ3VudHVtPC9wbGFjZU5hbWU+IHdhcyB0aGUgY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIFB1bmljIHdhciwgd2hpY2ggSGFubmliYWwgY2FycmllZCBvbiBhZ2FpbnN0IG91ciBhbmNlc3RvcnMuIEl0IHdhcyBxdWl0ZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRvIHNlbmQgYW1iYXNzYWRvcnMgdG8gaGltIFRoZXkgd2VyZSBzZW50IHRvIGEgQ2FydGhhZ2luaWFuLCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBzZW50IG9uIGJlaGFsZiBvZiB0aG9zZSB3aG8gd2VyZSB0aGUgZW5lbWllcyBvZiBIYW5uaWJhbCBhbmQgb3VyIGFsbGllcy4gV2hhdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZXJlIHJlc2VtYmxpbmcgdGhhdCBjYXNlIGhlcmU/IFdlIGFyZSBzZW5kaW5nIHRvIG9uZSBvZiBvdXIgb3duIGNpdGl6ZW5zIHRvCiAgICAgICAgICAgICAgICAgICAgYmVnIGhpbSBub3QgdG8gYmxvY2thZGUgYSBnZW5lcmFsIG9mIHRoZSBSb21hbiBhcm15LCBub3QgdG8gYXR0YWNrIG91ciBhcm15IGFuZAogICAgICAgICAgICAgICAgICAgIG91ciBjb2xvbnks4oCUaW4gc2hvcnQgbm90IHRvIGJlIGFuIGVuZW15IG9yIG91cnMuIENvbWU7IHN1cHBvc2UgaGUKICAgICAgICAgICAgICAgICAgICBvYmV5cywgc2hhbGwgd2UgZWl0aGVyIGJlIGluY2xpbmVkLCBvciBzaGFsbCB3ZSBiZSBhYmxlIGJ5IGFueSBwb3NzaWJpbGl0eSwgdG8KICAgICAgICAgICAgICAgICAgICB0cmVhdCBoaW0gYXMgb25lIG9mIG91ciBjaXRpemVucz8gPC90cmFuc2xhdGlvbj4="
translation['5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['5.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBuaW5ldGVlbnRoIG9mIERlY2VtYmVyLCB5b3Ugb3ZlcndoZWxtZWQgaGltIHdpdGggeW91ciBkZWNyZWVzOyB5b3UKICAgICAgICAgICAgICAgICAgICBvcmRhaW5lZCB0aGF0IHRoaXMgbW90aW9uIHNob3VsZCBiZSBzdWJtaXR0ZWQgdG8geW91IG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBzZWUgaXMgc3VibWl0dGVkIG5vdywgcmVzcGVjdGluZyB0aGUgaG9ub3JzIGFuZCByZXdhcmRzIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgY29uZmVycmVkIG9uIHRob3NlIHdobyBoYXZlIGRlc2VydmVkIG9yIGRvIGRlc2VydmUgd2VsbCBvZiB0aGUgcmVwdWJsaWMuIEFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBjaGllZiBvZiB0aG9zZSBtZW4geW91IGhhdmUgYWRqdWRnZWQgdG8gYmUgdGhlIG1hbiB3aG8gcmVhbGx5IGhhcyBkb25lIHNvLCBDYWl1cwogICAgICAgICAgICAgICAgICAgIENhZXNhciwgd2hvIGhhZCBkaXZlcnRlZCB0aGUgbmVmYXJpb3VzIGF0dGFja3Mgb2YgTWFyY3VzLiBBbnRvbml1cyBhZ2FpbnN0IHRoaXMKICAgICAgICAgICAgICAgICAgICBjaXR5LCBhbmQgY29tcGVsbGVkIGhpbSB0byBkaXJlY3QgdGhlbSBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT47IGFuZCBuZXh0IHRvIGhpbSB5b3UgY29uc2lkZXIgdGhlIHZldGVyYW4gc29sZGllcnMgd2hvCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgZm9sbG93ZWQgQ2Flc2FyOyB0aGVuIHRob3NlIGV4Y2VsbGVudCBhbmQgaGVhdmVubHktbWluZGVkIGxlZ2lvbnMgdGhlCiAgICAgICAgICAgICAgICAgICAgTWFydGlhbCBhbmQgdGhlIGZvdXJ0aCwgdG8gd2hvbSB5b3UgaGF2ZSBwcm9taXNlZCBob25vcnMgYW5kIHJld2FyZHMsIGZvciBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBub3Qgb25seSBhYmFuZG9uZWQgdGhlaXIgY29uc3VsLCBidXQgZm9yIGhhdmluZyBldmVuIGRlY2xhcmVkIHdhciBhZ2FpbnN0IGhpbS4KICAgICAgICAgICAgICAgICAgICBBbmQgb24gdGhlIHNhbWUgZGF5LCBoYXZpbmcgYSBkZWNyZWUgYnJvdWdodCBiZWZvcmUgeW91IGFuZCBwdWJsaXNoZWQgb24KICAgICAgICAgICAgICAgICAgICBwdXJwb3NlLCB5b3UgcHJhaXNlZCB0aGUgY29uZHVjdCBvZiBEZWNpbXVzIEJydXR1cywgYSBtb3N0IGV4Y2VsbGVudCBjaXRpemVuLAogICAgICAgICAgICAgICAgICAgIGFuZCBzYW5jdGlvbmVkIHdpdGggeW91ciBwdWJsaWMgYXV0aG9yaXR5IHRoaXMgd2FyIHdoaWNoIGhlIGhhZCB1bmRlcnRha2VuIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBoZWFkLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBhbmQgbmV4dCB0byBoaW0geW91IGNvbnNpZGVyIHRoZSB2ZXRlcmFuIHNvbGRpZXJzIHdobwogICAgICAgICAgICAgICAgICAgIGZpcnN0IGZvbGxvd2VkIENhZXNhcjsgdGhlbiB0aG9zZSBleGNlbGxlbnQgYW5kIGhlYXZlbmx5LW1pbmRlZCBsZWdpb25zIHRoZQogICAgICAgICAgICAgICAgICAgIE1hcnRpYWwgYW5kIHRoZSBmb3VydGgsIHRvIHdob20geW91IGhhdmUgcHJvbWlzZWQgaG9ub3JzIGFuZCByZXdhcmRzLCBmb3IgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgYWJhbmRvbmVkIHRoZWlyIGNvbnN1bCwgYnV0IGZvciBoYXZpbmcgZXZlbiBkZWNsYXJlZCB3YXIgYWdhaW5zdCBoaW0uCiAgICAgICAgICAgICAgICAgICAgQW5kIG9uIHRoZSBzYW1lIGRheSwgaGF2aW5nIGEgZGVjcmVlIGJyb3VnaHQgYmVmb3JlIHlvdSBhbmQgcHVibGlzaGVkIG9uCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSwgeW91IHByYWlzZWQgdGhlIGNvbmR1Y3Qgb2YgRGVjaW11cyBCcnV0dXMsIGEgbW9zdCBleGNlbGxlbnQgY2l0aXplbiwKICAgICAgICAgICAgICAgICAgICBhbmQgc2FuY3Rpb25lZCB3aXRoIHlvdXIgcHVibGljIGF1dGhvcml0eSB0aGlzIHdhciB3aGljaCBoZSBoYWQgdW5kZXJ0YWtlbiBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gaGVhZC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gV2hhdCBlbHNlLCB0aGVuLCBkaWQgeW91IGRvIG9uIHRoYXQgZGF5IGV4Y2VwdCBwcm9ub3VuY2UgQW50b25pdXMgYSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBlbmVteT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJzZWN0aW9uIiAvPiBBZnRlciB0aGVzZSBkZWNyZWVzIG9mIHlvdXJzLCB3aWxsIGl0CiAgICAgICAgICAgICAgICAgICAgYmUgcG9zc2libGUgZm9yIGhpbSB0byBsb29rIHVwb24geW91IHdpdGggZXF1YW5pbWl0eSwgb3IgZm9yIHlvdSB0byBiZWhvbGQgaGltCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCB0aGUgbW9zdCBleGNlc3NpdmUgaW5kaWduYXRpb24hIEhlIGhhcyBiZWVuIGV4Y2x1ZGVkIGFuZCBjdXQgb2ZmIGFuZAogICAgICAgICAgICAgICAgICAgIHdob2xseSBzZXBhcmF0ZWQgZnJvbSB0aGUgcmVwdWJsaWMsIG5vdCBtZXJlbHkgYnkgaGlzIG93biB3aWNrZWRuZXNzLCBhcyBpdAogICAgICAgICAgICAgICAgICAgIHNlZW1zIHRvIG1lLCBidXQgYnkgc29tZSBlc3BlY2lhbCBnb29kIGZvcnR1bmUgb2YgdGhlIHJlcHVibGljLiBBbmQgaWYgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29tcGx5IHdpdGggdGhlIGRlbWFuZHMgb2YgdGhlIGFtYmFzc2Fkb3JzIGFuZCByZXR1cm4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgZG8geW91IHN1cHBvc2UgdGhhdCBhYmFuZG9uZWQgY2l0aXplbnMKICAgICAgICAgICAgICAgICAgICB3aWxsIGV2ZXIgYmUgaW4gbmVlZCBvZiBhIHN0YW5kYXJkIGFyb3VuZCB3aGljaCB0byByYWxseT8gQnV0IHRoaXMgaXMgbm90IHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIHNvIG11Y2ggYWZyYWlkIG9mLiBUaGVyZSBhcmUgb3RoZXIgdGhpbmdzIHdoaWNoIEkgYW0gbW9yZSBhcHByZWhlbnNpdmUgb2YgYW5kCiAgICAgICAgICAgICAgICAgICAgbW9yZSBhbGFybWVkIGF0LiBIZSBuZXZlciB3aWxsIGNvbXBseSB3aXRoIHRoZSBkZW1hbmRzIG9mIHRoZSBhbWJhc3NhZG9ycy4gSQogICAgICAgICAgICAgICAgICAgIGtub3cgdGhlIG1hbidzIGluc2FuaXR5IGFuZCBhcnJvZ2FuY2U7IEkga25vdyB0aGUgZGVzcGVyYXRlIGNvdW5zZWxzIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMsIHRvIHdoaWNoIGhlIGlzIHdob2xseSBnaXZlbiB1cC4gPG1pbGVzdG9uZSBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBMdWNpdXMgaGlzIGJyb3RoZXIsIGFzIGJlaW5nIGEgbWFuIHdobyBoYXMgZm91Z2h0IGFicm9hZCwgbGVhZHMgb24gaGlzCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkLiBFdmVuIHN1cHBvc2UgaGltIHRvIGJlIGluIGhpcyBzZW5zZXMgaGltc2VsZiwgd2hpY2ggaGUgbmV2ZXIgd2lsbCBiZTsKICAgICAgICAgICAgICAgICAgICBzdGlsbCBoZSB3aWxsIG5vdCBiZSBhbGxvd2VkIGJ5IHRoZXNlIG1lbiB0byBhY3QgYXMgaWYgaGUgd2VyZSBzby4gSW4gdGhlIG1lYW4KICAgICAgICAgICAgICAgICAgICB0aW1lLCB0aW1lIHdpbGwgYmUgd2FzdGVkLiBUaGUgcHJlcGFyYXRpb25zIGZvciB3YXIgd2lsbCBjb29sLiBIb3cgaXMgaXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIgaGFzIGJlZW4gcHJvdHJhY3RlZCBhcyBsb25nIGFzIHRoaXMsIGlmIGl0IGlzIG5vdCBieSBwcm9jcmFzdGluYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgZGVsYXk/IDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhlc2UgZGVjcmVlcyBvZiB5b3Vycywgd2lsbCBpdAogICAgICAgICAgICAgICAgICAgIGJlIHBvc3NpYmxlIGZvciBoaW0gdG8gbG9vayB1cG9uIHlvdSB3aXRoIGVxdWFuaW1pdHksIG9yIGZvciB5b3UgdG8gYmVob2xkIGhpbQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgdGhlIG1vc3QgZXhjZXNzaXZlIGluZGlnbmF0aW9uISBIZSBoYXMgYmVlbiBleGNsdWRlZCBhbmQgY3V0IG9mZiBhbmQKICAgICAgICAgICAgICAgICAgICB3aG9sbHkgc2VwYXJhdGVkIGZyb20gdGhlIHJlcHVibGljLCBub3QgbWVyZWx5IGJ5IGhpcyBvd24gd2lja2VkbmVzcywgYXMgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcyB0byBtZSwgYnV0IGJ5IHNvbWUgZXNwZWNpYWwgZ29vZCBmb3J0dW5lIG9mIHRoZSByZXB1YmxpYy4gQW5kIGlmIGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvbXBseSB3aXRoIHRoZSBkZW1hbmRzIG9mIHRoZSBhbWJhc3NhZG9ycyBhbmQgcmV0dXJuIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgZG8geW91IHN1cHBvc2UgdGhhdCBhYmFuZG9uZWQgY2l0aXplbnMKICAgICAgICAgICAgICAgICAgICB3aWxsIGV2ZXIgYmUgaW4gbmVlZCBvZiBhIHN0YW5kYXJkIGFyb3VuZCB3aGljaCB0byByYWxseT8gQnV0IHRoaXMgaXMgbm90IHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIHNvIG11Y2ggYWZyYWlkIG9mLiBUaGVyZSBhcmUgb3RoZXIgdGhpbmdzIHdoaWNoIEkgYW0gbW9yZSBhcHByZWhlbnNpdmUgb2YgYW5kCiAgICAgICAgICAgICAgICAgICAgbW9yZSBhbGFybWVkIGF0LiBIZSBuZXZlciB3aWxsIGNvbXBseSB3aXRoIHRoZSBkZW1hbmRzIG9mIHRoZSBhbWJhc3NhZG9ycy4gSQogICAgICAgICAgICAgICAgICAgIGtub3cgdGhlIG1hbidzIGluc2FuaXR5IGFuZCBhcnJvZ2FuY2U7IEkga25vdyB0aGUgZGVzcGVyYXRlIGNvdW5zZWxzIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMsIHRvIHdoaWNoIGhlIGlzIHdob2xseSBnaXZlbiB1cC4gPC90cmFuc2xhdGlvbj4="
translation['5.11.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBMdWNpdXMgaGlzIGJyb3RoZXIsIGFzIGJlaW5nIGEgbWFuIHdobyBoYXMgZm91Z2h0IGFicm9hZCwgbGVhZHMgb24gaGlzCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkLiBFdmVuIHN1cHBvc2UgaGltIHRvIGJlIGluIGhpcyBzZW5zZXMgaGltc2VsZiwgd2hpY2ggaGUgbmV2ZXIgd2lsbCBiZTsKICAgICAgICAgICAgICAgICAgICBzdGlsbCBoZSB3aWxsIG5vdCBiZSBhbGxvd2VkIGJ5IHRoZXNlIG1lbiB0byBhY3QgYXMgaWYgaGUgd2VyZSBzby4gSW4gdGhlIG1lYW4KICAgICAgICAgICAgICAgICAgICB0aW1lLCB0aW1lIHdpbGwgYmUgd2FzdGVkLiBUaGUgcHJlcGFyYXRpb25zIGZvciB3YXIgd2lsbCBjb29sLiBIb3cgaXMgaXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIgaGFzIGJlZW4gcHJvdHJhY3RlZCBhcyBsb25nIGFzIHRoaXMsIGlmIGl0IGlzIG5vdCBieSBwcm9jcmFzdGluYXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgZGVsYXk/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RnJvbSB0aGUgdmVyeSBmaXJzdCBtb21lbnQgYWZ0ZXIgdGhlIGRlcGFydHVyZSwgb3IgcmF0aGVyIGFmdGVyIHRoZSBob3BlbGVzcwogICAgICAgICAgICAgICAgICAgIGZsaWdodCBvZiB0aGF0IGJhbmRpdCwgdGhhdCB0aGUgc2VuYXRlIGNvdWxkIGhhdmUgbWV0IGluIGZyZWVkb20sIEkgaGF2ZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBiZWVuIGRlbWFuZGluZyB0aGF0IHdlIHNob3VsZCBiZSBjYWxsZWQgdG9nZXRoZXIuIFRoZSBmaXJzdCBkYXkgdGhhdCB3ZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHRvZ2V0aGVyLCB3aGVuIHRoZSBjb25zdWxzIGVsZWN0IHdlcmUgbm90IHByZXNlbnQsIEkgbGFpZCwgaW4gbXkgb3BpbmlvbiwKICAgICAgICAgICAgICAgICAgICBhbWlkc3QgdGhlIGdyZWF0ZXN0IHVuYW5pbWl0eSBvbiB5b3VyIHBhcnQsIHRoZSBmb3VuZGF0aW9ucyBvZiB0aGUgcmVwdWJsaWM7CiAgICAgICAgICAgICAgICAgICAgbGF0ZXIsIGluZGVlZCwgdGhhbiB0aGV5IHNob3VsZCBoYXZlIGJlZW4gbGFpZDsgZm9yIEkgY291bGQgbm90IGRvIHNvIGJlZm9yZTsKICAgICAgICAgICAgICAgICAgICBidXQgc3RpbGwgaWYgbm8gdGltZSBoYWQgYmVlbiBsb3N0IGFmdGVyIHRoYXQgZGF5LCB3ZSBzaG91bGQgaGF2ZSBubyB3YXIgYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgbm93LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+IEV2ZXJ5IGV2aWwgaXMgZWFzaWx5IGNydXNoZWQgYXQgaXRzCiAgICAgICAgICAgICAgICAgICAgYmlydGg7IHdoZW4gaXQgaGFzIGJlY29tZSBvZiBsb25nIHN0YW5kaW5nLCBpdCB1c3VhbGx5IGdldHMgc3Ryb25nZXIuIEJ1dCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgYm9keSB3YXMgd2FpdGluZyBmb3IgdGhlIGZpcnN0IG9mIEphbnVhcnk7IHBlcmhhcHMgbm90IHZlcnkgd2lzZWx5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.11.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gRXZlcnkgZXZpbCBpcyBlYXNpbHkgY3J1c2hlZCBhdCBpdHMKICAgICAgICAgICAgICAgICAgICBiaXJ0aDsgd2hlbiBpdCBoYXMgYmVjb21lIG9mIGxvbmcgc3RhbmRpbmcsIGl0IHVzdWFsbHkgZ2V0cyBzdHJvbmdlci4gQnV0IHRoZW4KICAgICAgICAgICAgICAgICAgICBldmVyeSBib2R5IHdhcyB3YWl0aW5nIGZvciB0aGUgZmlyc3Qgb2YgSmFudWFyeTsgcGVyaGFwcyBub3QgdmVyeSB3aXNlbHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIGxldCB1cyBzYXkgbm8gbW9yZSBvZiB3aGF0IGlzIHBhc3QgQXJlIHdlIHN0aWxsIHRvIGFsbG93IGFueSBmYXJ0aGVyCiAgICAgICAgICAgICAgICAgICAgZGVsYXkgd2hpbGUgdGhlIGFtYmFzc2Fkb3JzIGFyZSBvbiB0aGVpciByb2FkIHRvIGhpbT8gYW5kIHdoaWxlIHRoZXkgYXJlIGNvbWluZwogICAgICAgICAgICAgICAgICAgIGJhY2sgYWdhaW4/IGFuZCB0aGUgdGltZSBzcGVudCBpbiB3YWl0aW5nIGZvciB0aGVtIHdpbGwgbWFrZSBtZW4gZG91YnQgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FyLiBBbmQgd2hpbGUgdGhlIGZhY3Qgb2YgdGhlIHdhciBpcyBpbiBkb3VidCwgaG93IGNhbiBtZW4gcG9zc2libHkgYmUgemVhbG91cwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRoZSBsZXZpZXMgZm9yIHRoZSBhcm15PyA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgTyBjb25zY3JpcHQgZmF0aGVycywgSSBnaXZlIG15IHZvdGUgdGhhdCB0aGVyZSBzaG91bGQgYmUgbm8gbWVudGlvbgogICAgICAgICAgICAgICAgICAgIG1hZGUgb2YgYW1iYXNzYWRvcnMuIEkgdGhpbmsgdGhhdCB0aGUgYnVzaW5lc3MgdGhhdCBpcyB0byBiZSBkb25lIG11c3QgYmUgZG9uZQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYW55IGRlbGF5IGFuZCBpbnN0YW50bHkuIEkgc2F5IHRoYXQgaXQgaXMgbmVjZXNzYXJ5IHRoYXQgd2Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIHRoYXQgdGhlcmUgaXMgc2VkaXRpb24gYWJyb2FkLCB0aGF0IHdlIHNob3VsZCBzdXNwZW5kIHRoZSByZWd1bGFyIGNvdXJ0cwogICAgICAgICAgICAgICAgICAgIG9mIGp1c3RpY2UsIG9yZGVyIGFsbCBtZW4gdG8gd2VhciB0aGUgZ2FyYiBvZiB3YXIsIGFuZCBlbmxpc3QgbWVuIGluIGFsbAogICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXJzIHN1c3BlbmRpbmcgYWxsIGV4ZW1wdGlvbnMgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlIGluIHRoZSBjaXR5IGFuZCBpbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gZXhjZXB0IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kCiAgICAgICAgICAgICAgICAgICAgaWYgdGhpcyBiZSBkb25lLCB0aGUgZ2VuZXJhbCBvcGluaW9uIGFuZCByZXBvcnQgb2YgeW91ciBzZXZlcml0eSB3aWxsIG92ZXJ3aGVsbQogICAgICAgICAgICAgICAgICAgIHRoZSBpbnNhbml0eSBvZiB0aGF0IHdpY2tlZCBnbGFkaWF0b3IuIEhlIHdpbGwgZmVlbCB0aGF0IGhlIGhhcyB1bmRlcnRha2VuIGEgd2FyCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IGhlIHdpbGwgZXhwZXJpZW5jZSB0aGUgc2luZXdzIGFuZCB2aWdvciBvZiBhIHVuYW5pbW91cwogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS4gRm9yIGF0IHByZXNlbnQgaGUgaXMgY29uc3RhbnRseSBzYXlpbmcgdGhhdCBpdCBpcyBhIG1lcmUgc3RydWdnbGUKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHBhcnRpZXMuIEJldHdlZW4gd2hhdCBwYXJ0aWVzPyBPbmUgcGFydHkgaXMgZGVmZWF0ZWQsIHRoZSBvdGhlciBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBoZWFydCBvZiBDYWl1cyBDYWVzYXIncyBwYXJ0eS4gVW5sZXNzLCBpbmRlZWQgd2UgYmVsaWV2ZSB0aGF0IHRoZSBwYXJ0eSBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBpcyBhdHRhY2tlZCBieSBQYW5zYSBhbmQgSGlydGl1cyB0aGUgY29uc3VscyBhbmQgYnkgQ2FpdXMgQ2Flc2FyJ3Mgc29uLgogICAgICAgICAgICAgICAgICAgIEJ1dCB0aGlzIHdhciBoYXMgYmVlbiBraW5kbGVkIG5vdCBieSBhIHN0cnVnZ2xlIGJldHdlZW4gcGFydGllcywgYnV0IGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIG5lZmFyaW91cyBob3BlcyBvZiB0aGUgbW9zdCBhYmFuZG9uZWQgY2l0aXplbnM7IGJ5IHdob20gYWxsIG91ciBlc3RhdGVzIGFuZAogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgaGFkIGJlZW4gbWFya2VkIGRvd24sIGFuZCBhbHJlYWR5IGRpc3RyaWJ1dGVkIGFjY29yZGluZyBhcyBldmVyeSBvbmUKICAgICAgICAgICAgICAgICAgICBoYXMgdGhvdWdodCB0aGVtIGRlc2lyYWJsZS4gPG1pbGVzdG9uZSBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGV4Y2VwdCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.12.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kCiAgICAgICAgICAgICAgICAgICAgaWYgdGhpcyBiZSBkb25lLCB0aGUgZ2VuZXJhbCBvcGluaW9uIGFuZCByZXBvcnQgb2YgeW91ciBzZXZlcml0eSB3aWxsIG92ZXJ3aGVsbQogICAgICAgICAgICAgICAgICAgIHRoZSBpbnNhbml0eSBvZiB0aGF0IHdpY2tlZCBnbGFkaWF0b3IuIEhlIHdpbGwgZmVlbCB0aGF0IGhlIGhhcyB1bmRlcnRha2VuIGEgd2FyCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IGhlIHdpbGwgZXhwZXJpZW5jZSB0aGUgc2luZXdzIGFuZCB2aWdvciBvZiBhIHVuYW5pbW91cwogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS4gRm9yIGF0IHByZXNlbnQgaGUgaXMgY29uc3RhbnRseSBzYXlpbmcgdGhhdCBpdCBpcyBhIG1lcmUgc3RydWdnbGUKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHBhcnRpZXMuIEJldHdlZW4gd2hhdCBwYXJ0aWVzPyBPbmUgcGFydHkgaXMgZGVmZWF0ZWQsIHRoZSBvdGhlciBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBoZWFydCBvZiBDYWl1cyBDYWVzYXIncyBwYXJ0eS4gVW5sZXNzLCBpbmRlZWQgd2UgYmVsaWV2ZSB0aGF0IHRoZSBwYXJ0eSBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBpcyBhdHRhY2tlZCBieSBQYW5zYSBhbmQgSGlydGl1cyB0aGUgY29uc3VscyBhbmQgYnkgQ2FpdXMgQ2Flc2FyJ3Mgc29uLgogICAgICAgICAgICAgICAgICAgIEJ1dCB0aGlzIHdhciBoYXMgYmVlbiBraW5kbGVkIG5vdCBieSBhIHN0cnVnZ2xlIGJldHdlZW4gcGFydGllcywgYnV0IGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIG5lZmFyaW91cyBob3BlcyBvZiB0aGUgbW9zdCBhYmFuZG9uZWQgY2l0aXplbnM7IGJ5IHdob20gYWxsIG91ciBlc3RhdGVzIGFuZAogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgaGFkIGJlZW4gbWFya2VkIGRvd24sIGFuZCBhbHJlYWR5IGRpc3RyaWJ1dGVkIGFjY29yZGluZyBhcyBldmVyeSBvbmUKICAgICAgICAgICAgICAgICAgICBoYXMgdGhvdWdodCB0aGVtIGRlc2lyYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['5.12.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBoYXZlIHJlYWQgdGhlIGxldHRlciBvZiBBbnRvbml1cyB3aGljaCBoZSBzZW50IHRvIG9uZSBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c2VwdGVtdmlyaTwvZm9yZWlnbj4sIGEgdGhvcm91Z2gtcGFjZWQgc2NvdW5kcmVsLCBhLiBjb2xsZWFndWUgb2YgaGlzIG93bi4KICAgICAgICAgICAgICAgICAgICDigJxMb29rIG91dCwgYW5kIHNlZSB3aGF0IHlvdSB0YWtlIGEgZmFuY3kgdG87IHdoYXQgeW91IGRvIGZhbmN5IHlvdQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGNlcnRhaW5seSBoYXZlLuKAnSBTZWUgdG8gd2hhdCBhIG1hbiB3ZSBhcmUgc2VuZGluZyBhbWJhc3NhZG9yczsKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHdoYXQgYSBtYW4gd2UgYXJlIGRlbGF5aW5nIHRvIG1ha2Ugd2FyOyBhIG1hbiB3aG8gZG9lcyBub3QgZXZlbiBsZXQgdXMKICAgICAgICAgICAgICAgICAgICBkcmF3IGxvdHMgZm9yIG91ciBmb3J0dW5lcywgYnV0IGhhbmRzIHVzIG92ZXIgdG8gZWFjaCBtYW4ncyBjYXByaWNlIGluIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHdheSwgdGhhdCBoZSBoYXMgbm90IGxlZnQgZXZlbiBoaW1zZWxmIGFueSB0aGluZyB1bnRvdWNoZWQsIG9yIHdoaWNoIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBiZWVuIHByb21pc2VkIHRvIHNvbWVib2R5LiBXaXRoIHRoaXMgbWFuLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB3ZSBtdXN0IHdhZ2UKICAgICAgICAgICAgICAgICAgICB3YXIs4oCUd2FyLCBJIHNheSwgYW5kIHRoYXQgaW5zdGFudGx5LiBXZSBtdXN0IHJlamVjdCB0aGUgc2xvdwogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmdzIG9mIGFtYmFzc2Fkb3JzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zZXB0ZW12aXJpPC9mb3JlaWduPiwgYSB0aG9yb3VnaC1wYWNlZCBzY291bmRyZWwsIGEuIGNvbGxlYWd1ZSBvZiBoaXMgb3duLgogICAgICAgICAgICAgICAgICAgIOKAnExvb2sgb3V0LCBhbmQgc2VlIHdoYXQgeW91IHRha2UgYSBmYW5jeSB0bzsgd2hhdCB5b3UgZG8gZmFuY3kgeW91CiAgICAgICAgICAgICAgICAgICAgc2hhbGwgY2VydGFpbmx5IGhhdmUu4oCdIFNlZSB0byB3aGF0IGEgbWFuIHdlIGFyZSBzZW5kaW5nIGFtYmFzc2Fkb3JzOwogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgd2hhdCBhIG1hbiB3ZSBhcmUgZGVsYXlpbmcgdG8gbWFrZSB3YXI7IGEgbWFuIHdobyBkb2VzIG5vdCBldmVuIGxldCB1cwogICAgICAgICAgICAgICAgICAgIGRyYXcgbG90cyBmb3Igb3VyIGZvcnR1bmVzLCBidXQgaGFuZHMgdXMgb3ZlciB0byBlYWNoIG1hbidzIGNhcHJpY2UgaW4gc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgd2F5LCB0aGF0IGhlIGhhcyBub3QgbGVmdCBldmVuIGhpbXNlbGYgYW55IHRoaW5nIHVudG91Y2hlZCwgb3Igd2hpY2ggaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvbWlzZWQgdG8gc29tZWJvZHkuIFdpdGggdGhpcyBtYW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdlIG11c3Qgd2FnZQogICAgICAgICAgICAgICAgICAgIHdhcizigJR3YXIsIEkgc2F5LCBhbmQgdGhhdCBpbnN0YW50bHkuIFdlIG11c3QgcmVqZWN0IHRoZSBzbG93CiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3Mgb2YgYW1iYXNzYWRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['5.12.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCB0aGF0IHdlIG1heSBub3QgaGF2ZSBhIG51bWJlciBvZiBkZWNyZWVzIHRvIHBhc3MgZXZlcnkgZGF5LCBJIGdpdmUgbXkKICAgICAgICAgICAgICAgICAgICB2b3RlIHRoYXQgdGhlIHdob2xlIHJlcHVibGljIHNob3VsZCBiZSBjb21taXR0ZWQgdG8gdGhlIGNvbnN1bHM7IGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSBhIGNoYXJnZSBnaXZlbiB0aGVtIHRvIGRlZmVuZCB0aGUgcmVwdWJsaWMsIGFuZCB0byB0YWtlIGNhcmUKICAgICAgICAgICAgICAgICAgICDigJx0aGF0IHRoZSByZXB1YmxpYyBzdWZmZXIgbm8gaW5qdXJ5LuKAnSBBbmQgSSBnaXZlIG15IHZvdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRob3NlIG1lbiB3aG8gYXJlIGluIHRoZSBhcm15IG9mIEFudG9uaXVzIGJlIG5vdCB2aXNpdGVkIHdpdGggYmxhbWUsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhleSBsZWF2ZSBoaW0gYmVmb3JlIHRoZSBmaXJzdCBvZiBGZWJydWFyeS4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JZiB5b3UgYWRvcHQgdGhlc2UgcHJvcG9zYWxzIG9yIG1pbmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHlvdSB3aWxsIGluIGEgc2hvcnQKICAgICAgICAgICAgICAgICAgICB0aW1lIHJlY292ZXIgdGhlIGxpYmVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBhbmQgeW91ciBvd24gYXV0aG9yaXR5LiBCdXQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgYWN0IHdpdGggbW9yZSBtaWxkbmVzcywgc3RpbGwgeW91IHdpbGwgcGFzcyB0aG9zZSByZXNvbHV0aW9ucywgYnV0IHBlcmhhcHMgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBwYXNzIHRoZW0gdG9vIGxhdGUuIEFzIHRvIHRoZSBnZW5lcmFsIHdlbGZhcmUgb2YgdGhlIHJlcHVibGljLCBvbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSwgTyBjb25zdWxzLCBoYXZlIGNvbnN1bHRlZCB1cywgSSB0aGluayB0aGF0IEkgaGF2ZSBwcm9wb3NlZCB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgc3VmZmljaWVudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['5.13.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBuZXh0IHF1ZXN0aW9uIGlzIGFib3V0IGhvbm9ycy4gQW5kIHRvIHRoaXMgcG9pbnQgSSBwZXJjZWl2ZSB0aGF0IEkgbXVzdCBzcGVhawogICAgICAgICAgICAgICAgICAgIG5leHQuIEJ1dCBJIHdpbGwgcHJlc2VydmUgdGhlIHNhbWUgb3JkZXIgaW4gcGF5aW5nIHJlc3BlY3QgdG8gYnJhdmUgbWVuLCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdXN1YWxseSBwcmVzZXJ2ZWQgaW4gYXNraW5nIHRoZWlyIG9waW5pb25zLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCB1cywgdGhlcmVmb3JlLCBhY2NvcmRpbmcgdG8gdGhlIHVzYWdlcyBvZiBvdXIgYW5jZXN0b3JzLCBiZWdpbiB3aXRoIEJydXR1cywKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3VsIGVsZWN0OyBhbmQsIHRvIHNheSBub3RoaW5nIG9mIGhpcyBmb3JtZXIgY29uZHVjdCzigJR3aGljaCBoYXMKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgYmVlbiBtb3N0IGFkbWlyYWJsZSwgYnV0IHN0aWxsIHN1Y2ggYXMgaGFzIGJlZW4gcHJhaXNlZCBieSB0aGUgaW5kaXZpZHVhbAogICAgICAgICAgICAgICAgICAgIGp1ZGdtZW50cyBvZiBtZW4sIHJhdGhlciB0aGFuIGJ5IHB1YmxpYyBhdXRob3JpdHks4oCUd2hhdCB3b3JkcyBjYW4gd2UKICAgICAgICAgICAgICAgICAgICBmaW5kIGFkZXF1YXRlIHRvIGhpcyBwcmFpc2UgYXQgdGhpcyB2ZXJ5IHRpbWU/IEZvciBzdWNoIGdyZWF0IHZpcnR1ZSByZXF1aXJlcyBubwogICAgICAgICAgICAgICAgICAgIHJld2FyZCBleGNlcHQgdGhpcyBvbmUgb2YgcHJhaXNlIGFuZCBnbG9yeTsgYW5kIGV2ZW4gaWYgaXQgd2VyZSBub3QgdG8gcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQsIHN0aWxsIGl0IHdvdWxkIGJlIGNvbnRlbnQgd2l0aCBpdHNlbGYsIGFuZCB3b3VsZCByZWpvaWNlIGF0IGJlaW5nIGxhaWQgdXAKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcmVjb2xsZWN0aW9uIG9mIGdyYXRlZnVsIGNpdGl6ZW5zLCBhcyBpZiBpdCB3ZXJlIHBsYWNlZCBpbiB0aGUgZnVsbAogICAgICAgICAgICAgICAgICAgIGxpZ2h0LiBUaGUgcHJhaXNlIHRoZW4gb2Ygb3VyIGRlbGliZXJhdGUgb3BpbmlvbiwgYW5kIG9mIG91ciB0ZXN0aW1vbnkgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgZmF2b3IsIG11c3QgYmUgZ2l2ZW4gdG8gQnJ1dHVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXJlZm9yZSwgTwogICAgICAgICAgICAgICAgICAgIGNvbnNjcmlwdCBmYXRoZXJzLCBJIGdpdmUgbXkgdm90ZSB0aGF0IGEgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlIGJlIHBhc3NlZCBhCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd29yZHM6IDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.13.36'] = ""
translation['5.13.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBob25vciwgTyBjb25zY3JpcHQgZmF0aGVycywgY2FuIGJlIHRvbwogICAgICAgICAgICAgICAgICAgIGdyZWF0IHRvIGJlIGR1ZSB0byBzdWNoIGEgbWlnaHR5IHNlcnZpY2UgYXMgdGhpcyBvZiBCcnV0dXMsIGFuZCB0byBzdWNoCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IGFpZCBhcyBoZSBoYXMgYWZmb3JkZWQgdGhlIHJlcHVibGljPyBGb3IgaWYgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBoYWQgYmVlbiBvcGVuIHRvIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVz4oCUaWYgYWZ0ZXIgaGF2aW5nIG92ZXJ3aGVsbWVkIHRoZSBtdW5pY2lwYWwgdG93bnMgYW5kIGNvbG9uaWVzCiAgICAgICAgICAgICAgICAgICAgdW5wcmVwYXJlZCB0byByZXNpc3QgaGltLCBoZSBoYWQgYmVlbiBhYmxlIHRvIHBlbmV0cmF0ZSBpbnRvIHRoYXQgZmFydGhlcgogICAgICAgICAgICAgICAgICAgIEdhdWzigJR3aGF0IGdyZWF0IGRhbmdlciB3b3VsZCBoYXZlIGh1bmcgb3ZlciB0aGUgcmVwdWJsaWMhIFRoYXQgbW9zdAogICAgICAgICAgICAgICAgICAgIGluc2FuZSBvZiBtZW4sIHRoYXQgbWFuIHNvIGhlYWRsb25nIGFuZCBmdXJpb3VzIGluIGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBjb3Vyc2VzLOKAlHdvdWxkIGhhdmUgYmVlbiBsaWtlbHkgSSBzdXBwb3NlIHRvIGhlc2l0YXRlIGF0IHdhZ2luZyB3YXIKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHVzIG5vdCBvbmx5IHdpdGggaGlzIG93biBhcm15IGJ1dCB3aXRoIGFsbCB0aGUgc2F2YWdlIHRyb29wcyBvZgogICAgICAgICAgICAgICAgICAgIGJhcmJhcmlzbSwgc28gdGhhdCBldmVuIHRoZSB3YWxsIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjA2NjY1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMDY2NjU5Ij5BbHBzPC9wbGFjZU5hbWU+IHdvdWxkIG5vdCBoYXZlIGVuYWJsZWQgdXMgdG8gY2hlY2sgaGlzIGZyZW56eS4gVGhlc2UKICAgICAgICAgICAgICAgICAgICB0aGFua3MgdGhlbiB3aWxsIGJlIGRlc2VydmVkbHkgcGFpZCB0byBEZWNpbXVzIEJydXR1cywgd2hvLCBiZWZvcmUgYW55IGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIG9mIHlvdXJzIGhhZCBiZWVuIGludGVycG9zZWQsIGFjdGluZyBvbiBoaXMgb3duIGp1ZGdtZW50IGFuZCByZXNwb25zaWJpbGl0eSwKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIHJlY2VpdmUgaGltIGFzIGNvbnN1bCwgYnV0IHJlcGVsbGVkIGhpbSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gYXMgYW4gZW5lbXksIGFuZCBwcmVmZXJyZWQgdG8gYmUgYmVzaWVnZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHJhdGhlciB0aGFuIHRvIGFsbG93IHRoaXMgY2l0eSB0byBiZSBzby4gTGV0IGhpbSB0aGVyZWZvcmUgaGF2ZSwgYnkgeW91cgogICAgICAgICAgICAgICAgICAgIGRlY3JlZSwgYW4gZXZlcmxhc3RpbmcgdGVzdGltb255IHRvIHRoaXMgbW9zdCBpbXBvcnRhbnQgYW5kIGdsb3Jpb3VzIGFjdGlvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgbGV0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoIHJlYWRlciBtdXN0IHJlY29sbGVjdCB0aGF0IHdoYXQgaXMgY2FsbGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gaW4gdGhlc2Ugb3JhdGlvbnMsIGlzIENpc2FscGluZSBHYXVsLAogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nIHdoYXQgd2Ugbm93IGNhbGwgdGhlIE5vcnRoIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBjb21pbmcgZG93biBhcyBmYXIgc291dGggYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDk1NjUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTU2NSI+TW9kZW5hPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJhdmVubmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJhdmVubmEiPlJhdmVubmE8L3BsYWNlTmFtZT4uPC9ub3RlPiB3aGljaCBhbHdheXMgaXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gYSBwcm90ZWN0aW9uIHRvIHRoaXMgZW1waXJlIGFuZCB0byB0aGUgZ2VuZXJhbCBsaWJlcnR5IGJlIGRlc2VydmVkbHkKICAgICAgICAgICAgICAgICAgICBhbmQgdHJ1bHkgcHJhaXNlZCBmb3Igbm90IGhhdmluZyBzdXJyZW5kZXJlZCBoZXJzZWxmIGFuZCBoZXIgcG93ZXIgdG8gQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBidXQgZm9yIGhhdmluZyBvcHBvc2VkIGhpbSB3aXRoIHRoZW0uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gaW4gdGhlc2Ugb3JhdGlvbnMsIGlzIENpc2FscGluZSBHYXVsLAogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nIHdoYXQgd2Ugbm93IGNhbGwgdGhlIE5vcnRoIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBjb21pbmcgZG93biBhcyBmYXIgc291dGggYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDk1NjUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTU2NSI+TW9kZW5hPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJhdmVubmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJhdmVubmEiPlJhdmVubmE8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['5.14.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCwgZnVydGhlcm1vcmUgSSBnaXZlIG15IHZvdGUgdGhhdCB0aGUgbW9zdCBzaW1wbGUgaG9ub3JzIGJlIGRlY3JlZWQgdG8gTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgTGVwaWR1cyBhcyBhIHJld2FyZCBmb3IgaGlzIGVtaW5lbnQgc2VydmljZXMgdG8gdGhlIHJlcHVibGljLiBIZSBoYXMgYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGltZXMgd2lzaGVkIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgZnJlZTsgYW5kIGhlIGdhdmUgdGhlIGdyZWF0ZXN0IHByb29mIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uIGFuZCBvcGluaW9uIG9uIHRoYXQgZGF5LCB3aGVuLCB3aGlsZSBBbnRvbml1cyB3YXMgcGxhY2luZyB0aGUgZGlhZGVtCiAgICAgICAgICAgICAgICAgICAgb24gQ2Flc2FyJ3MgaGVhZCwgaGUgdHVybmVkIGhpcyBmYWNlIGF3YXksIGFuZCBieSBoaXMgZ3JvYW5zIGFuZCBzb3Jyb3cgc2hvd2VkCiAgICAgICAgICAgICAgICAgICAgcGxhaW5seSB3aGF0IGEgaGF0cmVkIG9mIHNsYXZlcnkgaGUgaGFkLCBob3cgZGVzaXJvdXMgaGUgd2FzIGZvciB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgdG8gYmUgZnJlZSwgYW5kIGhvdyBoZSBoYWQgZW5kdXJlZCB0aG9zZSB0aGluZ3Mgd2hpY2ggaGUgaGFkIGVuZHVyZWQsCiAgICAgICAgICAgICAgICAgICAgbW9yZSBiZWNhdXNlIG9mIHRoZSBuZWNlc3NpdHkgb2YgdGhlIHRpbWVzLCB0aGFuIGJlY2F1c2UgdGhleSBoYXJtb25pemVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgc2VudGltZW50cy4gQW5kIHdobyBvZiB1cyBjYW4gZm9yZ2V0IHdpdGggd2hhdCBncmVhdCBtb2RlcmF0aW9uIGhlIGJlaGF2ZWQKICAgICAgICAgICAgICAgICAgICBkdXJpbmcgdGhhdCBjcmlzaXMgb2YgdGhlIGNpdHkgd2hpY2ggZW5zdWVkIGFmdGVyIHRoZSBkZWF0aCBvZiBDYWVzYXI/IFRoZXNlIGFyZQogICAgICAgICAgICAgICAgICAgIGdyZWF0IG1lcml0czsgYnV0IEkgaGFzdGVuIHRvIHNwZWFrIG9mIGdyZWF0ZXIgc3RpbGwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIChPIHllIGltbW9ydGFsIGdvZHMhKSB3aGF0IGNvdWxkIGhhcHBlbiBtb3JlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYWRtaXJlZCBieSBmb3JlaWduIG5hdGlvbnMsIG9yIG1vcmUgdG8gYmUgZGVzaXJlZCBieSB0aGUgUm9tYW4gcGVvcGxlIHRoYW4sIGF0IGEKICAgICAgICAgICAgICAgICAgICB0aW1lIHdoZW4gdGhlcmUgd2FzIGEgbW9zdCBpbXBvcnRhbnQgY2l2aWwgd2FyLCB0aGUgcmVzdWx0IG9mIHdoaWNoIHdlIHdlcmUgYWxsCiAgICAgICAgICAgICAgICAgICAgZHJlYWRpbmcsIHRoYXQgaXQgc2hvdWxkIGJlIGV4dGluZ3Vpc2hlZCBieSBwcnVkZW5jZSByYXRoZXIgdGhhbiB0aGF0IGFybXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2Ugc2hvdWxkIGJlIGFibGUgdG8gcHV0IGV2ZXJ5IHRoaW5nIHRvIHRoZSBoYXphcmQgb2YgYSBiYXR0bGU/IEFuZCBpZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBoYWQgYmVlbiBndWlkZWQgYnkgdGhlIHNhbWUgcHJpbmNpcGxlcyBpbiB0aGF0IG9kaW91cyBhbmQgbWlzZXJhYmxlIHdhciwKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgaGF2ZeKAlHRvIHNheSBub3RoaW5nIG9mIHRoZWlyIGZhdGhlcuKAlHRoZSB0d28gc29ucwogICAgICAgICAgICAgICAgICAgIG9mIENuYWV1cyBQb21wZWl1cywgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIGFuZCB2aXJ0dW91cyBtYW4sIHNhZmUgYW1vbmcgdXM7IG1lbgogICAgICAgICAgICAgICAgICAgIHdob3NlIHBpZXR5IGFuZCBmaWxpYWwgYWZmZWN0aW9uIGNlcnRhaW5seSBvdWdodCBub3QgdG8gaGF2ZSBiZWVuIHRoZWlyIHJ1aW4uCiAgICAgICAgICAgICAgICAgICAgV291bGQgdGhhdCBNYXJjdXMuIExlcGlkdXMgaGFkIGJlZW4gYWJsZSB0byBzYXZlIHRoZW0gYWxsISBIZSBzaG93ZWQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgZG9uZSBzbywgYnkgaGlzIGNvbmR1Y3QgaW4gY2FzZXMgd2hlcmUgaGUgaGFkIHRoZSBwb3dlcjsgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIFNleHR1cyBQb21wZWl1cyB0byB0aGUgc3RhdGUsIGEgZ3JlYXQgb3JuYW1lbnQgdG8gdGhlIHJlcHVibGljLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIG1vc3QgaWxsdXN0cmlvdXMgbW9udW1lbnQgb2YgaGlzIGNsZW1lbmN5LiBTYWQgd2FzIHRoYXQgcGljdHVyZSwgbWVsYW5jaG9seSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgZGVzdGlueSB0aGVuIG9mIHRoZSBSb21hbiBwZW9wbGUuIEZvciBhZnRlciBQb21wZWl1cyB0aGUgZmF0aGVyIHdhcyBkZWFkLCBoZQogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdGhlIGxpZ2h0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHRoZSBzb24gdG9vLCB3aG8gd2FzIHdob2xseSBsaWtlIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgd2FzIGFsc28gc2xhaW4uIDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0aWVzIGFwcGVhciB0byBtZSB0byBoYXZlIGJlZW4gZWZmYWNlZCBieSB0aGUga2luZG5lc3Mgb2YgdGhlIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcywgU2V4dHVzIFBvbXBlaXVzIGJlaW5nIHByZXNlcnZlZCB0byB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.14.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIChPIHllIGltbW9ydGFsIGdvZHMhKSB3aGF0IGNvdWxkIGhhcHBlbiBtb3JlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYWRtaXJlZCBieSBmb3JlaWduIG5hdGlvbnMsIG9yIG1vcmUgdG8gYmUgZGVzaXJlZCBieSB0aGUgUm9tYW4gcGVvcGxlIHRoYW4sIGF0IGEKICAgICAgICAgICAgICAgICAgICB0aW1lIHdoZW4gdGhlcmUgd2FzIGEgbW9zdCBpbXBvcnRhbnQgY2l2aWwgd2FyLCB0aGUgcmVzdWx0IG9mIHdoaWNoIHdlIHdlcmUgYWxsCiAgICAgICAgICAgICAgICAgICAgZHJlYWRpbmcsIHRoYXQgaXQgc2hvdWxkIGJlIGV4dGluZ3Vpc2hlZCBieSBwcnVkZW5jZSByYXRoZXIgdGhhbiB0aGF0IGFybXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2Ugc2hvdWxkIGJlIGFibGUgdG8gcHV0IGV2ZXJ5IHRoaW5nIHRvIHRoZSBoYXphcmQgb2YgYSBiYXR0bGU/IEFuZCBpZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBoYWQgYmVlbiBndWlkZWQgYnkgdGhlIHNhbWUgcHJpbmNpcGxlcyBpbiB0aGF0IG9kaW91cyBhbmQgbWlzZXJhYmxlIHdhciwKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgaGF2ZeKAlHRvIHNheSBub3RoaW5nIG9mIHRoZWlyIGZhdGhlcuKAlHRoZSB0d28gc29ucwogICAgICAgICAgICAgICAgICAgIG9mIENuYWV1cyBQb21wZWl1cywgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIGFuZCB2aXJ0dW91cyBtYW4sIHNhZmUgYW1vbmcgdXM7IG1lbgogICAgICAgICAgICAgICAgICAgIHdob3NlIHBpZXR5IGFuZCBmaWxpYWwgYWZmZWN0aW9uIGNlcnRhaW5seSBvdWdodCBub3QgdG8gaGF2ZSBiZWVuIHRoZWlyIHJ1aW4uCiAgICAgICAgICAgICAgICAgICAgV291bGQgdGhhdCBNYXJjdXMuIExlcGlkdXMgaGFkIGJlZW4gYWJsZSB0byBzYXZlIHRoZW0gYWxsISBIZSBzaG93ZWQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgZG9uZSBzbywgYnkgaGlzIGNvbmR1Y3QgaW4gY2FzZXMgd2hlcmUgaGUgaGFkIHRoZSBwb3dlcjsgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIFNleHR1cyBQb21wZWl1cyB0byB0aGUgc3RhdGUsIGEgZ3JlYXQgb3JuYW1lbnQgdG8gdGhlIHJlcHVibGljLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIG1vc3QgaWxsdXN0cmlvdXMgbW9udW1lbnQgb2YgaGlzIGNsZW1lbmN5LiBTYWQgd2FzIHRoYXQgcGljdHVyZSwgbWVsYW5jaG9seSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgZGVzdGlueSB0aGVuIG9mIHRoZSBSb21hbiBwZW9wbGUuIEZvciBhZnRlciBQb21wZWl1cyB0aGUgZmF0aGVyIHdhcyBkZWFkLCBoZQogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdGhlIGxpZ2h0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHRoZSBzb24gdG9vLCB3aG8gd2FzIHdob2xseSBsaWtlIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgd2FzIGFsc28gc2xhaW4uIDwvdHJhbnNsYXRpb24+"
translation['5.14.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGNhbGFtaXRpZXMgYXBwZWFyIHRvIG1lIHRvIGhhdmUgYmVlbiBlZmZhY2VkIGJ5IHRoZSBraW5kbmVzcyBvZiB0aGUgaW1tb3J0YWwKICAgICAgICAgICAgICAgICAgICBnb2RzLCBTZXh0dXMgUG9tcGVpdXMgYmVpbmcgcHJlc2VydmVkIHRvIHRoZSByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB3aGljaCBjYXVzZSwgcmVhc29uYWJsZSBhbmQgaW1wb3J0YW50IGFzIGl0IGlzLCBhbmQgYmVjYXVzZSBNYXJjdXMgTGVwaWR1cywKICAgICAgICAgICAgICAgICAgICBieSBoaXMgaHVtYW5pdHkgYW5kIHdpc2RvbSwgaGFzIGNoYW5nZWQgYSBtb3N0IGRhbmdlcm91cyBhbmQgZXh0ZW5zaXZlIGNpdmlsIHdhcgogICAgICAgICAgICAgICAgICAgIGludG8gcGVhY2UgYW5kIGNvbmNvcmQsIEkgZ2l2ZSBteSB2b3RlLCB0aGF0IGEgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlIGJlIGRyYXduCiAgICAgICAgICAgICAgICAgICAgdXAgaW4gdGhlc2Ugd29yZHM6IDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcU2luY2UgdGhlIGFmZmFpcnMgb2YgdGhlIHJlcHVibGljIGhhdmUgcmVwZWF0ZWRseSBiZWVuIHdlbGwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvc3Blcm91c2x5IGNvbmR1Y3RlZCBieSBNYXJjdXMgTGVwaWR1cywgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgYW5kIFBvbnRpZmV4IE1heGltdXMsIGFuZCBzaW5jZSB0aGUgUm9tYW4gcGVvcGxlIGlzIGZ1bGx5CiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCBraW5nbHkgcG93ZXIgaXMgdmVyeSBkaXNwbGVhc2luZyB0byBoaW07IGFuZCBzaW5jZSBieSBoaXMgZXhlcnRpb25zLAogICAgICAgICAgICAgICAgICAgIGFuZCB2aXJ0dWUsIGFuZCBwcnVkZW5jZSwgYW5kIHNpbmd1bGFyIGNsZW1lbmN5IGFuZCBodW1hbml0eSwgYSBtb3N0IGJpdHRlcgogICAgICAgICAgICAgICAgICAgIGNpdmlsIHdhciBoYXMgYmVlbiBleHRpbmd1aXNoZWQ7IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIFNleHR1cwogICAgICAgICAgICAgICAgICAgIFBvbXBlaXVzIE1hZ251cywgdGhlIHNvbiBvZiBDbmFldXMsIGhhdmluZyBzdWJtaXR0ZWQgdG8gdGhlIGF1dGhvcml0eSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgYW5kIGxhaWQgZG93biBoaXMgYXJtcywgYW5kLCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHBlcmZlY3QgZ29vZC13aWxsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gcmVzdG9yZWQgdG8gdGhlIHN0YXRlIGJ5IE1hcmN1cyBMZXBpZHVzLCA8Zm9yZWlnbiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgYW5kIFBvbnRpZmV4IE1heGltdXM7IHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBpbiByZXR1cm4gZm9yIHRoZSBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBhbmQgbnVtZXJvdXMgc2VydmljZXMgb2YgTWFyY3VzIExlcGlkdXMgdG8gdGhlIHJlcHVibGljLCBkZWNsYXJlcyB0aGF0IGl0IHBsYWNlcwogICAgICAgICAgICAgICAgICAgIGdyZWF0IGhvcGVzIG9mIGZ1dHVyZSB0cmFucXVpbGxpdHkgYW5kIHBlYWNlIGFuZCBjb25jb3JkLCBpbiBoaXMgdmlydHVlLAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSwgYW5kIGdvb2QgZm9ydHVuZTsgYW5kIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdpbGwgZXZlciByZW1lbWJlciBoaXMgc2VydmljZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWM7IGFuZCBpdCBpcyBkZWNyZWVkIGJ5IHRoZSB2b3RlIG9mIHRoaXMgb3JkZXIsIHRoYXQgYSBnaWx0IGVxdWVzdHJpYW4KICAgICAgICAgICAgICAgICAgICBzdGF0dWUgYmUgZXJlY3RlZCB0byBoaW0gaW4gdGhlIFJvc3RyYSwgb3IgaW4gd2hhdGV2ZXIgb3RoZXIgcGxhY2UgaW4gdGhlIGZvcnVtCiAgICAgICAgICAgICAgICAgICAgaGUgcGxlYXNlcy7igJ0gPC9wPgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgYW5kIFBvbnRpZmV4IE1heGltdXMsIGFuZCBzaW5jZSB0aGUgUm9tYW4gcGVvcGxlIGlzIGZ1bGx5CiAgICAgICAgICAgICAgICAgICAgYXdhcmUgdGhhdCBraW5nbHkgcG93ZXIgaXMgdmVyeSBkaXNwbGVhc2luZyB0byBoaW07IGFuZCBzaW5jZSBieSBoaXMgZXhlcnRpb25zLAogICAgICAgICAgICAgICAgICAgIGFuZCB2aXJ0dWUsIGFuZCBwcnVkZW5jZSwgYW5kIHNpbmd1bGFyIGNsZW1lbmN5IGFuZCBodW1hbml0eSwgYSBtb3N0IGJpdHRlcgogICAgICAgICAgICAgICAgICAgIGNpdmlsIHdhciBoYXMgYmVlbiBleHRpbmd1aXNoZWQ7IDwvdHJhbnNsYXRpb24+"
translation['5.15.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIFNleHR1cwogICAgICAgICAgICAgICAgICAgIFBvbXBlaXVzIE1hZ251cywgdGhlIHNvbiBvZiBDbmFldXMsIGhhdmluZyBzdWJtaXR0ZWQgdG8gdGhlIGF1dGhvcml0eSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgYW5kIGxhaWQgZG93biBoaXMgYXJtcywgYW5kLCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHBlcmZlY3QgZ29vZC13aWxsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiByZXN0b3JlZCB0byB0aGUgc3RhdGUgYnkgTWFyY3VzIExlcGlkdXMsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIGFuZCBQb250aWZleCBNYXhpbXVzOyB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBpbiByZXR1cm4gZm9yIHRoZSBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBhbmQgbnVtZXJvdXMgc2VydmljZXMgb2YgTWFyY3VzIExlcGlkdXMgdG8gdGhlIHJlcHVibGljLCBkZWNsYXJlcyB0aGF0IGl0IHBsYWNlcwogICAgICAgICAgICAgICAgICAgIGdyZWF0IGhvcGVzIG9mIGZ1dHVyZSB0cmFucXVpbGxpdHkgYW5kIHBlYWNlIGFuZCBjb25jb3JkLCBpbiBoaXMgdmlydHVlLAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSwgYW5kIGdvb2QgZm9ydHVuZTsgYW5kIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2lsbCBldmVyIHJlbWVtYmVyIGhpcyBzZXJ2aWNlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYzsgYW5kIGl0IGlzIGRlY3JlZWQgYnkgdGhlIHZvdGUgb2YgdGhpcyBvcmRlciwgdGhhdCBhIGdpbHQgZXF1ZXN0cmlhbgogICAgICAgICAgICAgICAgICAgIHN0YXR1ZSBiZSBlcmVjdGVkIHRvIGhpbSBpbiB0aGUgUm9zdHJhLCBvciBpbiB3aGF0ZXZlciBvdGhlciBwbGFjZSBpbiB0aGUgZm9ydW0KICAgICAgICAgICAgICAgICAgICBoZSBwbGVhc2VzLuKAnSA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB0aGlzIGhvbm9yLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhcHBlYXJzIHRvIG1lIGEgdmVyeSBncmVhdCBvbmUsIGluIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBiZWNhdXNlIGl0IGlzIGp1c3Q74oCUZm9yIGl0IGlzIG5vdCBtZXJlbHkgZ2l2ZW4gb24gYWNjb3VudCBvZgogICAgICAgICAgICAgICAgICAgIG91ciBob3BlcyBvZiB0aGUgZnV0dXJlLCBidXQgaXQgaXMgcGFpZCwgYXMgaXQgd2VyZSwgaW4gcmVxdWl0YWwgb2YgaGlzIGFtcGxlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgYWxyZWFkeSBkb25lLiBOb3IgYXJlIHdlIGFibGUgdG8gbWVudGlvbiBhbnkgaW5zdGFuY2Ugb2YgdGhpcyBob25vcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIGNvbmZlcnJlZCBvbiBhbnkgb25lIGJ5IHRoZSBzZW5hdGUgYnkgdGhlaXIgb3duIGZyZWUgYW5kIHZvbHVudGFyeQogICAgICAgICAgICAgICAgICAgIGp1ZGdtZW50IGJlZm9yZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['5.16.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgY29tZSBub3cgdG8gQ2FpdXMgQ2Flc2FyLCBPIGNvbnNjcmlwdCBmYXRoZXJzOyBpZiBoZSBoYWQgbm90IGV4aXN0ZWQsIHdoaWNoIG9mCiAgICAgICAgICAgICAgICAgICAgdXMgY291bGQgaGF2ZSBiZWVuIGFsaXZlIG5vdz8gVGhhdCBtb3N0IGludGVtcGVyYXRlIG9mIG1lbiwgQW50b25pdXMsIHdhcyBmbHlpbmcKICAgICAgICAgICAgICAgICAgICBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiB0byB0aGUgY2l0eSwKICAgICAgICAgICAgICAgICAgICBidXJuaW5nIHdpdGggaGF0cmVkLCB3aXRoIGEgZGlzcG9zaXRpb24gaG9zdGlsZSB0byBhbGwgZ29vZCBtZW4sIHdpdGggYW4gYXJteS4KICAgICAgICAgICAgICAgICAgICBXaGF0IHdhcyB0aGVyZSB0byBvcHBvc2UgdG8gaGlzIGF1ZGFjaXR5IGFuZCB3aWNrZWRuZXNzPyBXZSBoYWQgbm90IGFzIHlldCBhbnkKICAgICAgICAgICAgICAgICAgICBnZW5lcmFscywgb3IgYW55IGZvcmNlcy4gVGhlcmUgd2FzIG5vIHB1YmxpYyBjb3VuY2lsLCBubyBsaWJlcnR5OyBvdXIgbmVja3Mgd2VyZQogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBtZXJjeSBvZiBoaXMgbmVmYXJpb3VzIGNydWVsdHk7IHdlIHdlcmUgYWxsIHByZXBhcmluZyB0byBoYXZlIHJlY291cnNlIHRvCiAgICAgICAgICAgICAgICAgICAgZmxpZ2h0LCB0aG91Z2ggZmxpZ2h0IGl0c2VsZiBoYWQgbm8gZXNjYXBlIGZvciB1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJzZWN0aW9uIiAvPiBXaG8gd2FzIGl04oCUd2hhdCBnb2Qgd2FzIGl0OyB3aG8gYXQgdGhhdCB0aW1lIGdhdmUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgUm9tYW4gcGVvcGxlIHRoaXMgZ29kbGlrZSB5b3VuZyBtYW4sIHdobywgd2hpbGUgZXZlcnkgbWVhbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGluZyBvdXIgZGVzdHJ1Y3Rpb24gc2VlbWVkIG9wZW4gdG8gdGhhdCBtb3N0IHBlcm5pY2lvdXMgY2l0aXplbiwgcmlzaW5nCiAgICAgICAgICAgICAgICAgICAgdXAgb24gYSBzdWRkZW4sIGJleW9uZCBldmVyeSBvbmUncyBob3BlLCBjb21wbGV0ZWQgYW4gYXJteSBmaXQgdG8gb3Bwb3NlIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1cnkgb2YgTWFyY3VzIEFudG9uaXVzIGJlZm9yZSBhbnkgb25lIHN1c3BlY3RlZCB0aGF0IGhlIHdhcyB0aGlua2luZyBvZiBhbnkKICAgICAgICAgICAgICAgICAgICBzdWNoIHN0ZXA/IEdyZWF0IGhvbm9ycyB3ZXJlIHBhaWQgdG8gQ25hZXVzIFBvbXBlaXVzIHdoZW4gaGUgd2FzIGEgeW91bmcgbWFuIGFuZAogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkbHksIGZvciBoZSBjYW1lIHRvIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSByZXB1YmxpYyBidXQgaGUgd2FzIG9mIGEgbW9yZQogICAgICAgICAgICAgICAgICAgIHZpZ29yb3VzIGFnZSBhbmQgbW9yZSBjYWxjdWxhdGVkIHRvIG1lZXQgdGhlIGVhZ2VyIHJlcXVpcmVtZW50cyBvZiBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIHNlZWtpbmcgYSBnZW5lcmFsLiBIZSBoYWQgYWxzbyBiZWVuIGFscmVhZHkgdHJhaW5lZCBpbiBvdGhlciBraW5kcyBvZiB3YXIuIEZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBjYXVzZSBvZiBTdWxsYSB3YXMgbm90IGFncmVlYWJsZSB0byBhbGwgbWVuLiBUaGUgbXVsdGl0dWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NjcmliZWQsIGFuZCB0aGUgZW5vcm1vdXMgY2FsYW1pdGllcyB0aGF0IGZlbGwgb24gc28gbWFueSBtdW5pY2lwYWwgdG93bnMKICAgICAgICAgICAgICAgICAgICBzaG93IHRoaXMgcGxhaW5seS4gPG1pbGVzdG9uZSBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IENhZXNhciwgdGhvdWdoIG1hbnkKICAgICAgICAgICAgICAgICAgICB5ZWFycyB5b3VuZ2VyLCBhcm1lZCB2ZXRlcmFucyB3aG8gd2VyZSBub3cgZWFnZXIgdG8gcmVzdDsgaGUgaGFzIGVtYnJhY2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICBjYXVzZSB3aGljaCB3YXMgbW9zdCBhZ3JlZWFibGUgdG8gdGhlIHNlbmF0ZSwgdG8gdGhlIHBlb3BsZSwgdG8gYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJRpbiBzaG9ydCwgdG8gZ29kcyBhbmQgbWVuLgogICAgICAgICAgICAgICAgICAgIEFuZCBQb21wZWl1cyBjYW1lIGFzIGEgcmVpbmZvcmNlbWVudCB0byB0aGUgZXh0ZW5zaXZlIGNvbW1hbmQgYW5kIHZpY3RvcmlvdXMKICAgICAgICAgICAgICAgICAgICBhcm15IG9mIEx1Y2l1cyBTdWxsYSwgQ2Flc2FyIGhhZCBubyBvbmUgdG8gam9pbiBoaW1zZWxmIHRvLiBIZSBvZiBoaXMgb3duIGFjY29yZAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgYXV0aG9yIGFuZCBleGVjdXRvciBvZiBoaXMgcGxhbiBvZiBsZXZ5aW5nIGFuIGFybXksIGFuZCBhcnJheWluZyBhCiAgICAgICAgICAgICAgICAgICAgZGVmZW5zZSBmb3IgdXMuIFBvbXBlaXVzIGZvdW5kIHRoZSB3aG9sZSBQaWNlbmUgZGlzdHJpY3QgaG9zdGlsZSB0byB0aGUgcGFydHkgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgYWR2ZXJzYXJpZXM7IGJ1dCBDYWVzYXIgaGFzIGxldmllZCBhbiBhcm15IGFnYWluc3QgQW50b25pdXMgZnJvbSBtZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBBbnRvbml1cydzIG93biBmcmllbmRzLCBidXQgc3RpbGwgZ3JlYXRlciBmcmllbmRzIHRvIGxpYmVydHkuIEl0IHdhcyBvd2luZwogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBpbmZsdWVuY2Ugb2YgUG9tcGVpdXMgdGhhdCBTdWxsYSB3YXMgZW5hYmxlZCB0byBhY3QgbGlrZSBhIGtpbmcuIEl0IGlzIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3RlY3Rpb24gYWZmb3JkZWQgdXMgYnkgQ2Flc2FyIHRoYXQgdGhlIHR5cmFubnkgb2YgQW50b25pdXMgaGFzIGJlZW4gcHV0CiAgICAgICAgICAgICAgICAgICAgZG93bi4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IHRvIHRoZSBjaXR5LAogICAgICAgICAgICAgICAgICAgIGJ1cm5pbmcgd2l0aCBoYXRyZWQsIHdpdGggYSBkaXNwb3NpdGlvbiBob3N0aWxlIHRvIGFsbCBnb29kIG1lbiwgd2l0aCBhbiBhcm15LgogICAgICAgICAgICAgICAgICAgIFdoYXQgd2FzIHRoZXJlIHRvIG9wcG9zZSB0byBoaXMgYXVkYWNpdHkgYW5kIHdpY2tlZG5lc3M/IFdlIGhhZCBub3QgYXMgeWV0IGFueQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWxzLCBvciBhbnkgZm9yY2VzLiBUaGVyZSB3YXMgbm8gcHVibGljIGNvdW5jaWwsIG5vIGxpYmVydHk7IG91ciBuZWNrcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIG1lcmN5IG9mIGhpcyBuZWZhcmlvdXMgY3J1ZWx0eTsgd2Ugd2VyZSBhbGwgcHJlcGFyaW5nIHRvIGhhdmUgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICBmbGlnaHQsIHRob3VnaCBmbGlnaHQgaXRzZWxmIGhhZCBubyBlc2NhcGUgZm9yIHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['5.16.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hvIHdhcyBpdOKAlHdoYXQgZ29kIHdhcyBpdDsgd2hvIGF0IHRoYXQgdGltZSBnYXZlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIFJvbWFuIHBlb3BsZSB0aGlzIGdvZGxpa2UgeW91bmcgbWFuLCB3aG8sIHdoaWxlIGV2ZXJ5IG1lYW5zIGZvcgogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpbmcgb3VyIGRlc3RydWN0aW9uIHNlZW1lZCBvcGVuIHRvIHRoYXQgbW9zdCBwZXJuaWNpb3VzIGNpdGl6ZW4sIHJpc2luZwogICAgICAgICAgICAgICAgICAgIHVwIG9uIGEgc3VkZGVuLCBiZXlvbmQgZXZlcnkgb25lJ3MgaG9wZSwgY29tcGxldGVkIGFuIGFybXkgZml0IHRvIG9wcG9zZSB0aGUKICAgICAgICAgICAgICAgICAgICBmdXJ5IG9mIE1hcmN1cyBBbnRvbml1cyBiZWZvcmUgYW55IG9uZSBzdXNwZWN0ZWQgdGhhdCBoZSB3YXMgdGhpbmtpbmcgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgc3VjaCBzdGVwPyBHcmVhdCBob25vcnMgd2VyZSBwYWlkIHRvIENuYWV1cyBQb21wZWl1cyB3aGVuIGhlIHdhcyBhIHlvdW5nIG1hbiBhbmQKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlZGx5LCBmb3IgaGUgY2FtZSB0byB0aGUgYXNzaXN0YW5jZSBvZiB0aGUgcmVwdWJsaWMgYnV0IGhlIHdhcyBvZiBhIG1vcmUKICAgICAgICAgICAgICAgICAgICB2aWdvcm91cyBhZ2UgYW5kIG1vcmUgY2FsY3VsYXRlZCB0byBtZWV0IHRoZSBlYWdlciByZXF1aXJlbWVudHMgb2Ygc29sZGllcnMKICAgICAgICAgICAgICAgICAgICBzZWVraW5nIGEgZ2VuZXJhbC4gSGUgaGFkIGFsc28gYmVlbiBhbHJlYWR5IHRyYWluZWQgaW4gb3RoZXIga2luZHMgb2Ygd2FyLiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGUgY2F1c2Ugb2YgU3VsbGEgd2FzIG5vdCBhZ3JlZWFibGUgdG8gYWxsIG1lbi4gVGhlIG11bHRpdHVkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zY3JpYmVkLCBhbmQgdGhlIGVub3Jtb3VzIGNhbGFtaXRpZXMgdGhhdCBmZWxsIG9uIHNvIG1hbnkgbXVuaWNpcGFsIHRvd25zCiAgICAgICAgICAgICAgICAgICAgc2hvdyB0aGlzIHBsYWlubHkuIDwvdHJhbnNsYXRpb24+"
translation['5.16.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IENhZXNhciwgdGhvdWdoIG1hbnkKICAgICAgICAgICAgICAgICAgICB5ZWFycyB5b3VuZ2VyLCBhcm1lZCB2ZXRlcmFucyB3aG8gd2VyZSBub3cgZWFnZXIgdG8gcmVzdDsgaGUgaGFzIGVtYnJhY2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICBjYXVzZSB3aGljaCB3YXMgbW9zdCBhZ3JlZWFibGUgdG8gdGhlIHNlbmF0ZSwgdG8gdGhlIHBlb3BsZSwgdG8gYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LOKAlGluIHNob3J0LCB0byBnb2RzIGFuZCBtZW4uCiAgICAgICAgICAgICAgICAgICAgQW5kIFBvbXBlaXVzIGNhbWUgYXMgYSByZWluZm9yY2VtZW50IHRvIHRoZSBleHRlbnNpdmUgY29tbWFuZCBhbmQgdmljdG9yaW91cwogICAgICAgICAgICAgICAgICAgIGFybXkgb2YgTHVjaXVzIFN1bGxhLCBDYWVzYXIgaGFkIG5vIG9uZSB0byBqb2luIGhpbXNlbGYgdG8uIEhlIG9mIGhpcyBvd24gYWNjb3JkCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoZSBhdXRob3IgYW5kIGV4ZWN1dG9yIG9mIGhpcyBwbGFuIG9mIGxldnlpbmcgYW4gYXJteSwgYW5kIGFycmF5aW5nIGEKICAgICAgICAgICAgICAgICAgICBkZWZlbnNlIGZvciB1cy4gUG9tcGVpdXMgZm91bmQgdGhlIHdob2xlIFBpY2VuZSBkaXN0cmljdCBob3N0aWxlIHRvIHRoZSBwYXJ0eSBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBhZHZlcnNhcmllczsgYnV0IENhZXNhciBoYXMgbGV2aWVkIGFuIGFybXkgYWdhaW5zdCBBbnRvbml1cyBmcm9tIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIEFudG9uaXVzJ3Mgb3duIGZyaWVuZHMsIGJ1dCBzdGlsbCBncmVhdGVyIGZyaWVuZHMgdG8gbGliZXJ0eS4gSXQgd2FzIG93aW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGluZmx1ZW5jZSBvZiBQb21wZWl1cyB0aGF0IFN1bGxhIHdhcyBlbmFibGVkIHRvIGFjdCBsaWtlIGEga2luZy4gSXQgaXMgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdGVjdGlvbiBhZmZvcmRlZCB1cyBieSBDYWVzYXIgdGhhdCB0aGUgdHlyYW5ueSBvZiBBbnRvbml1cyBoYXMgYmVlbiBwdXQKICAgICAgICAgICAgICAgICAgICBkb3duLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IHVzIHRoZW4gY29uZmVyIG9uIENhZXNhciBhIHJlZ3VsYXIKICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeSBjb21tYW5kLCB3aXRob3V0IHdoaWNoIHRoZSBtaWxpdGFyeSBhZmZhaXJzIGNhbiBub3QgYmUgZGlyZWN0ZWQsIHRoZQogICAgICAgICAgICAgICAgICAgIGFybXkgY2FuIG5vdCBiZSBoZWxkIHRvZ2V0aGVyLCB3YXIgY2FuIG5vdCBoZSB3YWdlZC4gTGV0IGhpbSBiZSBtYWRlIHByb3ByYWV0b3IKICAgICAgICAgICAgICAgICAgICB3aXRoIGFsbCB0aGUgcHJpdmlsZWdlcyB3aGljaCBoYXZlIGV2ZXIgYmVlbiBhdHRhY2hlZCB0byB0aGF0IGFwcG9pbnRtZW50LiBUaGF0CiAgICAgICAgICAgICAgICAgICAgaG9ub3IsIGFsdGhvdWdoIGl0IGlzIGEgZ3JlYXQgb25lIGZvciBhIG1hbiBvZiBoaXMgYWdlLCBzdGlsbCBpcyBub3QgbWVyZWx5IG9mCiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIGFzIGdpdmluZyBkaWduaXR5LCBidXQgaXQgY29uZmVycyBwb3dlcnMgY2FsY3VsYXRlZCB0byBtZWV0IHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgZW1lcmdlbmN5LiBUaGVyZWZvcmUsIGxldCB1cyBzZWVrIGZvciBob25vcnMgZm9yIGhpbSB3aGljaCB3ZSBzaGFsbCBub3QKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgZmluZCBhdCB0aGUgcHJlc2VudCBkYXkuIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.16.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IHVzIHRoZW4gY29uZmVyIG9uIENhZXNhciBhIHJlZ3VsYXIKICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeSBjb21tYW5kLCB3aXRob3V0IHdoaWNoIHRoZSBtaWxpdGFyeSBhZmZhaXJzIGNhbiBub3QgYmUgZGlyZWN0ZWQsIHRoZQogICAgICAgICAgICAgICAgICAgIGFybXkgY2FuIG5vdCBiZSBoZWxkIHRvZ2V0aGVyLCB3YXIgY2FuIG5vdCBoZSB3YWdlZC4gTGV0IGhpbSBiZSBtYWRlIHByb3ByYWV0b3IKICAgICAgICAgICAgICAgICAgICB3aXRoIGFsbCB0aGUgcHJpdmlsZWdlcyB3aGljaCBoYXZlIGV2ZXIgYmVlbiBhdHRhY2hlZCB0byB0aGF0IGFwcG9pbnRtZW50LiBUaGF0CiAgICAgICAgICAgICAgICAgICAgaG9ub3IsIGFsdGhvdWdoIGl0IGlzIGEgZ3JlYXQgb25lIGZvciBhIG1hbiBvZiBoaXMgYWdlLCBzdGlsbCBpcyBub3QgbWVyZWx5IG9mCiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIGFzIGdpdmluZyBkaWduaXR5LCBidXQgaXQgY29uZmVycyBwb3dlcnMgY2FsY3VsYXRlZCB0byBtZWV0IHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgZW1lcmdlbmN5LiBUaGVyZWZvcmUsIGxldCB1cyBzZWVrIGZvciBob25vcnMgZm9yIGhpbSB3aGljaCB3ZSBzaGFsbCBub3QKICAgICAgICAgICAgICAgICAgICBlYXNpbHkgZmluZCBhdCB0aGUgcHJlc2VudCBkYXkuIDwvdHJhbnNsYXRpb24+"
translation['5.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBJIGhvcGUgdGhhdCB3ZSBhbmQgdGhlIFJvbWFuIHBlb3BsZSBzaGFsbCBvZnRlbiBoYXZlIGFuIG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgY29tcGxpbWVudGluZyBhbmQgaG9ub3JpbmcgdGhpcyB5b3VuZyBtYW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBCdXQgYXQgdGhlIHByZXNlbnQgbW9tZW50IEkgZ2l2ZSBteSB2b3RlIHRoYXQgd2Ugc2hvdWxkIHBhc3MgYSBkZWNyZWUgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGZvcm06IDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.17.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBCdXQgYXQgdGhlIHByZXNlbnQgbW9tZW50IEkgZ2l2ZSBteSB2b3RlIHRoYXQgd2Ugc2hvdWxkIHBhc3MgYSBkZWNyZWUgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGZvcm06IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcQXMgQ2FpdXMgQ2Flc2FyLCB0aGUgc29uIG9mIENhaXVzLCBwb250aWZmIGFuZCBwcm9wcmFldG9yLCBoYXMgYXQgYQogICAgICAgICAgICAgICAgICAgIG1vc3QgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYyBleGhvcnRlZCB0aGUgdmV0ZXJhbiBzb2xkaWVycyB0byBkZWZlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgaGFzIGVubGlzdGVkIHRoZW0gaW4gaGlzIGFybXk7IGFuZCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBNYXJ0aWFsIGxlZ2lvbiBhbmQgdGhlIGZvdXJ0aCBsZWdpb24sIHdpdGggZ3JlYXQgemVhbCBmb3IgdGhlIHJlcHVibGljLCBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIGFkbWlyYWJsZSB1bmFuaW1pdHksIHVuZGVyIHRoZSBndWlkYW5jZSBhbmQgYXV0aG9yaXR5IG9mIENhaXVzIENhZXNhciwgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGVkIGFuZCBhcmUgZGVmZW5kaW5nIHRoZSByZXB1YmxpYyBhbmQgdGhlIGxpYmVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZTsgYW5kCiAgICAgICAgICAgICAgICAgICAgYXMgQ2FpdXMgQ2Flc2FyLCBwcm9wcmFldG9yLCBoYXMgZ29uZSB3aXRoIGhpcyBhcm15IGFzIGEgcmVpbmZvcmNlbWVudCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBoYXMgbWFkZSBjYXZhbHJ5LCBhbmQKICAgICAgICAgICAgICAgICAgICBhcmNoZXJzLCBhbmQgZWxlcGhhbnRzLCBvYmVkaWVudCB0byBoaW1zZWxmIGFuZCB0byB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgaGFzLCBhdAogICAgICAgICAgICAgICAgICAgIGEgbW9zdCBjcml0aWNhbCB0aW1lIGZvciB0aGUgcmVwdWJsaWMsIGNvbWUgdG8gdGhlIGFpZCBvZiB0aGUgc2FmZXR5IGFuZCBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZTvigJRvbiB0aGVzZSBhY2NvdW50cywgaXQgc2VlbXMgZ29vZCB0byB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBDYWl1cyBDYWVzYXIsIHRoZSBzb24gb2YgQ2FpdXMsIHBvbnRpZmYgYW5kIHByb3ByYWV0b3IsIHNoYWxsIGJlIGEgc2VuYXRvciwKICAgICAgICAgICAgICAgICAgICBhbmQgc2hhbGwgZGVsaXZlciBoaXMgb3BpbmlvbnMgZnJvbSB0aGUgYmVuY2ggb2NjdXBpZWQgYnkgbWVuIG9mIHByYWV0b3JpYW4KICAgICAgICAgICAgICAgICAgICByYW5rOyBhbmQgdGhhdCwgb24gb2NjYXNpb24gb2YgaGlzIG9mZmVyaW5nIGhpbXNlbGYgZm9yIGFueSBtYWdpc3RyYWN5LCBoZSBzaGFsbAogICAgICAgICAgICAgICAgICAgIGJlIGNvbnNpZGVyZWQgb2YgdGhlIHNhbWUgbGVnYWwgc3RhbmRpbmcgYW5kIHF1YWxpZmljYXRpb24gYXMgaWYgaGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBxdWFlc3RvciB0aGUgcHJlY2VkaW5nIHllYXIu4oCdPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPjsgaGFzIG1hZGUgY2F2YWxyeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXJjaGVycywgYW5kIGVsZXBoYW50cywgb2JlZGllbnQgdG8gaGltc2VsZiBhbmQgdG8gdGhlIFJvbWFuIHBlb3BsZSwgYW5kIGhhcywgYXQKICAgICAgICAgICAgICAgICAgICBhIG1vc3QgY3JpdGljYWwgdGltZSBmb3IgdGhlIHJlcHVibGljLCBjb21lIHRvIHRoZSBhaWQgb2YgdGhlIHNhZmV0eSBhbmQgZGlnbml0eQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGU74oCUb24gdGhlc2UgYWNjb3VudHMsIGl0IHNlZW1zIGdvb2QgdG8gdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgQ2FpdXMgQ2Flc2FyLCB0aGUgc29uIG9mIENhaXVzLCBwb250aWZmIGFuZCBwcm9wcmFldG9yLCBzaGFsbCBiZSBhIHNlbmF0b3IsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNoYWxsIGRlbGl2ZXIgaGlzIG9waW5pb25zIGZyb20gdGhlIGJlbmNoIG9jY3VwaWVkIGJ5IG1lbiBvZiBwcmFldG9yaWFuCiAgICAgICAgICAgICAgICAgICAgcmFuazsgYW5kIHRoYXQsIG9uIG9jY2FzaW9uIG9mIGhpcyBvZmZlcmluZyBoaW1zZWxmIGZvciBhbnkgbWFnaXN0cmFjeSwgaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBjb25zaWRlcmVkIG9mIHRoZSBzYW1lIGxlZ2FsIHN0YW5kaW5nIGFuZCBxdWFsaWZpY2F0aW9uIGFzIGlmIGhlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcXVhZXN0b3IgdGhlIHByZWNlZGluZyB5ZWFyLuKAnTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJzZWN0aW9uIiAvPiBGb3Igd2hhdCByZWFzb24gY2FuIHRoZXJlIGJlLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIHdoeSB3ZSBzaG91bGQgbm90IHdpc2ggaGltIHRvIGFycml2ZSBhdCB0aGUgaGlnaGVzdCBob25vcnMgYXQgYXMgZWFybHkKICAgICAgICAgICAgICAgICAgICBhbiBhZ2UgYXMgcG9zc2libGU/IEZvciB3aGVuLCBieSB0aGUgbGF3cyBmaXhpbmcgdGhlIGFnZSBhdCB3aGljaCBtZW4gbWlnaHQgYmUKICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgdG8gdGhlIGRpZmZlcmVudCBtYWdpc3RyYWNpZXMsIG91ciBhbmNlc3RvcnMgZml4ZWQgYSBtb3JlIG1hdHVyZSBhZ2UKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGNvbnN1bHNoaXAsIHRoZXkgd2VyZSBpbmZsdWVuY2VkIGJ5IGZlYXJzIG9mIHRoZSBwcmVjaXBpdGF0aW9uIG9mIHlvdXRoOwogICAgICAgICAgICAgICAgICAgIENhaXVzIENhZXNhciBhdCBoaXMgZmlyc3QgZW50cmFuY2UgaW50byBsaWZlLCBoYXMgc2hvd24gdXMgdGhhdCwgaW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZW1pbmVudCBhbmQgdW5wYXJhbGxlbGVkIHZpcnR1ZSwgd2UgaGF2ZSBubyBuZWVkIHRvIHdhaXQgZm9yIHRoZSBwcm9ncmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGFnZS4gVGhlcmVmb3JlIG91ciBhbmNlc3RvcnMsIHRob3NlIG9sZCBtZW4gaW4gdGhlIG1vc3QgYW5jaWVudCB0aW1lcywgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgbGF3cyByZWd1bGF0aW5nIHRoZSBhZ2UgZm9yIHRoZSBkaWZmZXJlbnQgb2ZmaWNlczsgaXQgd2FzIGFtYml0aW9uIHdoaWNoIGNhdXNlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gYmUgcGFzc2VkIG1hbnkgeWVhcnMgYWZ0ZXJ3YXJkcywgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBhbW9uZyBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2FtZSBhZ2UgZGlmZmVyZW50IHN0ZXBzIGZvciBhcnJpdmluZyBhdCBob25vcnMgQW5kIGl0IGhhcyBvZnRlbiBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgIHRoYXQgYSBkaXNwb3NpdGlvbiBvZiBncmVhdCBuYXR1cmFsIHZpcnR1ZSBoYXMgYmVlbiBsb3N0IGJlZm9yZSBpdCBoYWQgYW55CiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgb2YgYmVuZWZpdGluZyB0aGUgcmVwdWJsaWMgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.17.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoYXQgcmVhc29uIGNhbiB0aGVyZSBiZSwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB3aHkgd2Ugc2hvdWxkIG5vdCB3aXNoIGhpbSB0byBhcnJpdmUgYXQgdGhlIGhpZ2hlc3QgaG9ub3JzIGF0IGFzIGVhcmx5CiAgICAgICAgICAgICAgICAgICAgYW4gYWdlIGFzIHBvc3NpYmxlPyBGb3Igd2hlbiwgYnkgdGhlIGxhd3MgZml4aW5nIHRoZSBhZ2UgYXQgd2hpY2ggbWVuIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIHRvIHRoZSBkaWZmZXJlbnQgbWFnaXN0cmFjaWVzLCBvdXIgYW5jZXN0b3JzIGZpeGVkIGEgbW9yZSBtYXR1cmUgYWdlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBjb25zdWxzaGlwLCB0aGV5IHdlcmUgaW5mbHVlbmNlZCBieSBmZWFycyBvZiB0aGUgcHJlY2lwaXRhdGlvbiBvZiB5b3V0aDsKICAgICAgICAgICAgICAgICAgICBDYWl1cyBDYWVzYXIgYXQgaGlzIGZpcnN0IGVudHJhbmNlIGludG8gbGlmZSwgaGFzIHNob3duIHVzIHRoYXQsIGluIHRoZSBjYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGVtaW5lbnQgYW5kIHVucGFyYWxsZWxlZCB2aXJ0dWUsIHdlIGhhdmUgbm8gbmVlZCB0byB3YWl0IGZvciB0aGUgcHJvZ3Jlc3Mgb2YKICAgICAgICAgICAgICAgICAgICBhZ2UuIFRoZXJlZm9yZSBvdXIgYW5jZXN0b3JzLCB0aG9zZSBvbGQgbWVuIGluIHRoZSBtb3N0IGFuY2llbnQgdGltZXMsIGhhZCBubwogICAgICAgICAgICAgICAgICAgIGxhd3MgcmVndWxhdGluZyB0aGUgYWdlIGZvciB0aGUgZGlmZmVyZW50IG9mZmljZXM7IGl0IHdhcyBhbWJpdGlvbiB3aGljaCBjYXVzZWQKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIGJlIHBhc3NlZCBtYW55IHllYXJzIGFmdGVyd2FyZHMsIGluIG9yZGVyIHRoYXQgdGhlcmUgbWlnaHQgYmUgYW1vbmcgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNhbWUgYWdlIGRpZmZlcmVudCBzdGVwcyBmb3IgYXJyaXZpbmcgYXQgaG9ub3JzIEFuZCBpdCBoYXMgb2Z0ZW4gaGFwcGVuZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGEgZGlzcG9zaXRpb24gb2YgZ3JlYXQgbmF0dXJhbCB2aXJ0dWUgaGFzIGJlZW4gbG9zdCBiZWZvcmUgaXQgaGFkIGFueQogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5IG9mIGJlbmVmaXRpbmcgdGhlIHJlcHVibGljIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ4IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYW1vbmcgdGhlIGFuY2llbnRzLCB0aGUgUnVsbGksIHRoZSBEZWNpaSwKICAgICAgICAgICAgICAgICAgICB0aGUgQ29ydmluaSwgYW5kIG1hbnkgb3RoZXJzIGFuZCBpbiBtb3JlIG1vZGVybiB0aW1lcyB0aGUgZWxkZXIgQWZyaWNhbnVzIGFuZAogICAgICAgICAgICAgICAgICAgIFRpdHVzIEZsYW1pbml1cyB3ZXJlIG1hZGUgY29uc3VscyB2ZXJ5IHlvdW5nLCBhbmQgcGVyZm9ybWVkIHN1Y2ggZXhwbG9pdHMgYXMKICAgICAgICAgICAgICAgICAgICBncmVhdGx5IHRvIGV4dGVuZCB0aGUgZW1waXJlIG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0byBlbWJlbGxpc2ggaXRzIG5hbWUgV2hhdAogICAgICAgICAgICAgICAgICAgIG1vcmU/IERpZCBub3QgdGhlIE1hY2Vkb25pYW4gQWxleGFuZGVyLCBoYXZpbmcgYmVndW4gdG8gcGVyZm9ybSBtaWdodHkgZGVlZHMKICAgICAgICAgICAgICAgICAgICBmcm9tIGhpcyBlYXJsaWVzdCB5b3V0aCwgZGllIHdoZW4gaGUgd2FzIG9ubHkgaW4gaGlzIHRoaXJ0eS10aGlyZCB5ZWFyPyBBbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGFnZSBpcyB0ZW4geWVhcnMgbGVzcyB0aGFuIHRoYXQgZml4ZWQgYnkgb3VyIGxhd3MgZm9yIGEgbWFuIHRvIGJlIGVsaWdpYmxlIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWxzaGlwLiBGcm9tIHdoaWNoIGl0IG1heSBiZSBwbGFpbmx5IHNlZW4gdGhhdCB0aGUgcHJvZ3Jlc3Mgb2YgdmlydHVlIGlzCiAgICAgICAgICAgICAgICAgICAgb2Z0ZW4gc3dpZnRlciB0aGFuIHRoYXQgb2YgYWdlLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.17.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFtb25nIHRoZSBhbmNpZW50cywgdGhlIFJ1bGxpLCB0aGUgRGVjaWksCiAgICAgICAgICAgICAgICAgICAgdGhlIENvcnZpbmksIGFuZCBtYW55IG90aGVycyBhbmQgaW4gbW9yZSBtb2Rlcm4gdGltZXMgdGhlIGVsZGVyIEFmcmljYW51cyBhbmQKICAgICAgICAgICAgICAgICAgICBUaXR1cyBGbGFtaW5pdXMgd2VyZSBtYWRlIGNvbnN1bHMgdmVyeSB5b3VuZywgYW5kIHBlcmZvcm1lZCBzdWNoIGV4cGxvaXRzIGFzCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRseSB0byBleHRlbmQgdGhlIGVtcGlyZSBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgdG8gZW1iZWxsaXNoIGl0cyBuYW1lIFdoYXQKICAgICAgICAgICAgICAgICAgICBtb3JlPyBEaWQgbm90IHRoZSBNYWNlZG9uaWFuIEFsZXhhbmRlciwgaGF2aW5nIGJlZ3VuIHRvIHBlcmZvcm0gbWlnaHR5IGRlZWRzCiAgICAgICAgICAgICAgICAgICAgZnJvbSBoaXMgZWFybGllc3QgeW91dGgsIGRpZSB3aGVuIGhlIHdhcyBvbmx5IGluIGhpcyB0aGlydHktdGhpcmQgeWVhcj8gQW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBhZ2UgaXMgdGVuIHllYXJzIGxlc3MgdGhhbiB0aGF0IGZpeGVkIGJ5IG91ciBsYXdzIGZvciBhIG1hbiB0byBiZSBlbGlnaWJsZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3Vsc2hpcC4gRnJvbSB3aGljaCBpdCBtYXkgYmUgcGxhaW5seSBzZWVuIHRoYXQgdGhlIHByb2dyZXNzIG9mIHZpcnR1ZSBpcwogICAgICAgICAgICAgICAgICAgIG9mdGVuIHN3aWZ0ZXIgdGhhbiB0aGF0IG9mIGFnZS4gPC90cmFuc2xhdGlvbj4="
translation['5.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPiBGb3IgYXMgdG8gdGhlIGZlYXIgd2hpY2ggdGhvc2UgbWVuLCB3aG8gYXJlIGVuZW1pZXMgb2YgQ2Flc2FyLCBwcmV0ZW5kIHRvCiAgICAgICAgICAgICAgICAgICAgZW50ZXJ0YWluLCB0aGVyZSBpcyBub3QgdGhlIHNsaWdodGVzdCByZWFzb24gdG8gYXBwcmVoZW5kIHRoYXQgaGUgd2lsbCBiZSB1bmFibGUKICAgICAgICAgICAgICAgICAgICB0byByZXN0cmFpbiBhbmQgZ292ZXJuIGhpbXNlbGYsIG9yIHRoYXQgaGUgd2lsbCBiZSBzbyBlbGF0ZWQgYnkgdGhlIGhvbm9ycyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIHJlY2VpdmVzIGZyb20gdXMgYXMgdG8gdXNlIGhpcyBwb3dlciB3aXRob3V0IG1vZGVyYXRpb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gSXQgaXMgb25seSBuYXR1cmFsLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIGxlYXJuZWQgdG8gYXBwcmVjaWF0ZSByZWFsIGdsb3J5LCBhbmQgd2hvIGZlZWxzIHRoYXQgaGUgaXMgY29uc2lkZXJlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgYW5kIGJ5IHRoZSBSb21hbiBrbmlnaHRzIGFuZCB0aGUgd2hvbGUgUm9tYW4gcGVvcGxlIGEgY2l0aXplbiB3aG8gaXMgZGVhcgogICAgICAgICAgICAgICAgICAgIHRvLCBhbmQgYSBibGVzc2luZyB0byB0aGUgcmVwdWJsaWMsIHNob3VsZCB0aGluayBub3RoaW5nIHdoYXRldmVyIGRlc2VydmluZyBvZgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGNvbXBhcmVkIHRvIHRoaXMgZ2xvcnkuIFdvdWxkIHRoYXQgaXQgaGFkIGhhcHBlbmVkIHRvIENhaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Flc2Fy4oCUdGhlIGZhdGhlciwgSSBtZWFu4oCUd2hlbiBoZSB3YXMgYSB5b3VuZyBtYW4sIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYmVsb3ZlZCBieSB0aGUgc2VuYXRlIGFuZCBieSBldmVyeSB2aXJ0dW91cyBjaXRpemVuLCBidXQsIGhhdmluZyBuZWdsZWN0ZWQgdG8KICAgICAgICAgICAgICAgICAgICBhaW0gYXQgdGhhdCwgaGUgd2FzdGVkIGFsbCB0aGUgcG93ZXIgb2YgZ2VuaXVzIHdoaWNoIGhlIGhhZCBpbiBhIG1vc3QgYnJpbGxpYW50CiAgICAgICAgICAgICAgICAgICAgZGVncmVlLCBpbiBhIGNhcHJpY2lvdXMgcHVyc3VpdCBvZiBwb3B1bGFyIGZhdm9yLiBUaGVyZWZvcmUsIGFzIGhlIGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBzdWZmaWNpZW50IHJlc3BlY3QgZm9yIHRoZSBzZW5hdGUgYW5kIHRoZSB2aXJ0dW91cyBwYXJ0IG9mIHRoZSBjaXRpemVucywgaGUKICAgICAgICAgICAgICAgICAgICBvcGVuZWQgZm9yIGhpbXNlbGYgdGhhdCBwYXRoIGZvciB0aGUgZXh0ZW5zaW9uIG9mIGhpcyBwb3dlciwgd2hpY2ggdGhlIHZpcnR1ZSBvZgogICAgICAgICAgICAgICAgICAgIGEgZnJlZSBwZW9wbGUgd2FzIHVuYWJsZSB0byBiZWFyLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.18.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gSXQgaXMgb25seSBuYXR1cmFsLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIGxlYXJuZWQgdG8gYXBwcmVjaWF0ZSByZWFsIGdsb3J5LCBhbmQgd2hvIGZlZWxzIHRoYXQgaGUgaXMgY29uc2lkZXJlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgYW5kIGJ5IHRoZSBSb21hbiBrbmlnaHRzIGFuZCB0aGUgd2hvbGUgUm9tYW4gcGVvcGxlIGEgY2l0aXplbiB3aG8gaXMgZGVhcgogICAgICAgICAgICAgICAgICAgIHRvLCBhbmQgYSBibGVzc2luZyB0byB0aGUgcmVwdWJsaWMsIHNob3VsZCB0aGluayBub3RoaW5nIHdoYXRldmVyIGRlc2VydmluZyBvZgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGNvbXBhcmVkIHRvIHRoaXMgZ2xvcnkuIFdvdWxkIHRoYXQgaXQgaGFkIGhhcHBlbmVkIHRvIENhaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Flc2Fy4oCUdGhlIGZhdGhlciwgSSBtZWFu4oCUd2hlbiBoZSB3YXMgYSB5b3VuZyBtYW4sIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYmVsb3ZlZCBieSB0aGUgc2VuYXRlIGFuZCBieSBldmVyeSB2aXJ0dW91cyBjaXRpemVuLCBidXQsIGhhdmluZyBuZWdsZWN0ZWQgdG8KICAgICAgICAgICAgICAgICAgICBhaW0gYXQgdGhhdCwgaGUgd2FzdGVkIGFsbCB0aGUgcG93ZXIgb2YgZ2VuaXVzIHdoaWNoIGhlIGhhZCBpbiBhIG1vc3QgYnJpbGxpYW50CiAgICAgICAgICAgICAgICAgICAgZGVncmVlLCBpbiBhIGNhcHJpY2lvdXMgcHVyc3VpdCBvZiBwb3B1bGFyIGZhdm9yLiBUaGVyZWZvcmUsIGFzIGhlIGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBzdWZmaWNpZW50IHJlc3BlY3QgZm9yIHRoZSBzZW5hdGUgYW5kIHRoZSB2aXJ0dW91cyBwYXJ0IG9mIHRoZSBjaXRpemVucywgaGUKICAgICAgICAgICAgICAgICAgICBvcGVuZWQgZm9yIGhpbXNlbGYgdGhhdCBwYXRoIGZvciB0aGUgZXh0ZW5zaW9uIG9mIGhpcyBwb3dlciwgd2hpY2ggdGhlIHZpcnR1ZSBvZgogICAgICAgICAgICAgICAgICAgIGEgZnJlZSBwZW9wbGUgd2FzIHVuYWJsZSB0byBiZWFyLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgcHJpbmNpcGxlcyBvZiBoaXMgc29uIGFyZSB3aWRlbHkgZGlmZmVyZW50OyB3aG8gaXMgbm90IG9ubHkgYmVsb3ZlZCBieQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9uZSwgYnV0IGluIHRoZSBncmVhdGVzdCBkZWdyZWUgYnkgdGhlIG1vc3QgdmlydHVvdXMgbWVuLiBJbiBoaW0gaXMgcGxhY2VkCiAgICAgICAgICAgICAgICAgICAgYWxsIG91ciBob3BlIG9mIGxpYmVydHk7IGZyb20gaGltIGFscmVhZHkgaGFzIG91ciBzYWZldHkgYmVlbiByZWNlaXZlZDsgZm9yIGhpbQogICAgICAgICAgICAgICAgICAgIHRoZSBoaWdoZXN0IGhvbm9ycyBhcmUgc291Z2h0IG91dCBhbmQgcHJlcGFyZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hpbGUgdGhlcmVmb3JlIHdlIGFyZSBhZG1pcmluZyBoaXMgc2luZ3VsYXIgcHJ1ZGVuY2UsIGNhbiB3ZSBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgZmVhciBoaXMgZm9sbHk/IEZvciB3aGF0IGNhbiBiZSBtb3JlIGZvb2xpc2ggdGhhbiB0byBwcmVmZXIgdXNlbGVzcyBwb3dlciwKICAgICAgICAgICAgICAgICAgICBzdWNoIGluZmx1ZW5jZSBhcyBicmluZ3MgZW52eSBpbiBpdHMgdHJhaW4sIGFuZCBhIHJhc2ggYW5kIHNsaXBwZXJ5IGFtYml0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgcmVpZ25pbmcsIHRvIHJlYWwsIGRpZ25pZmllZCwgc29saWQgZ2xvcnk/IEhhcyBoZSBzZWVuIHRoaXMgdHJ1dGggYXMgYSBib3ksIGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgaGFzIGFkdmFuY2VkIGluIGFnZSB3aWxsIGhlIGNlYXNlIHRvIHNlZSBpdD8g4oCcQnV0IGhlIGlzIGFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgdG8gc29tZSBtb3N0IGlsbHVzdHJpb3VzIGFuZCBleGNlbGxlbnQgY2l0aXplbnMu4oCdIFRoYXQKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2Ugb3VnaHQgbm90IHRvIGNhdXNlIGFueSBmZWFyLiBDYWVzYXIgaGFzIHNhY3JpZmljZWQgYWxsIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZW5taXRpZXMgdG8gdGhlIHJlcHVibGljOyBoZSBoYWQgbWFkZSB0aGUgcmVwdWJsaWMgaGlzIGp1ZGdlOyBoZSBoYXMgbWFkZSBoZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZGlyZWN0cmVzcyBvZiBhbGwgaGlzIGNvdW5zZWxzIGFuZCBhY3Rpb25zLiBGb3IgaGUgaXMgY29tZSB0byB0aGUgc2VydmljZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYyBpbiBvcmRlciB0byBzdHJlbmd0aGVuIGhlciwgbm90IHRvIG92ZXJ0dXJuIGhlci4gSSBhbSB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRlZCB3aXRoIGFsbCB0aGUgZmVlbGluZ3Mgb2YgdGhlIHlvdW5nIG1hbjogdGhlcmUgaXMgbm90aGluZyBkZWFyZXIgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gdGhhbiB0aGUgcmVwdWJsaWMsIG5vdGhpbmcgd2hpY2ggaGUgY29uc2lkZXJzIG9mIG1vcmUgd2VpZ2h0IHRoYW4geW91cgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eTsgbm90aGluZyB3aGljaCBoZSBkZXNpcmVzIG1vcmUgdGhhbiB0aGUgYXBwcm9iYXRpb24gb2YgdmlydHVvdXMgbWVuOwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd2hpY2ggaGUgYWNjb3VudHMgc3dlZXRlciB0aGFuIGdlbnVpbmUgZ2xvcnkuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.18.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hpbGUgdGhlcmVmb3JlIHdlIGFyZSBhZG1pcmluZyBoaXMgc2luZ3VsYXIgcHJ1ZGVuY2UsIGNhbiB3ZSBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUgZmVhciBoaXMgZm9sbHk/IEZvciB3aGF0IGNhbiBiZSBtb3JlIGZvb2xpc2ggdGhhbiB0byBwcmVmZXIgdXNlbGVzcyBwb3dlciwKICAgICAgICAgICAgICAgICAgICBzdWNoIGluZmx1ZW5jZSBhcyBicmluZ3MgZW52eSBpbiBpdHMgdHJhaW4sIGFuZCBhIHJhc2ggYW5kIHNsaXBwZXJ5IGFtYml0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgcmVpZ25pbmcsIHRvIHJlYWwsIGRpZ25pZmllZCwgc29saWQgZ2xvcnk/IEhhcyBoZSBzZWVuIHRoaXMgdHJ1dGggYXMgYSBib3ksIGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgaGFzIGFkdmFuY2VkIGluIGFnZSB3aWxsIGhlIGNlYXNlIHRvIHNlZSBpdD8g4oCcQnV0IGhlIGlzIGFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgdG8gc29tZSBtb3N0IGlsbHVzdHJpb3VzIGFuZCBleGNlbGxlbnQgY2l0aXplbnMu4oCdIFRoYXQKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2Ugb3VnaHQgbm90IHRvIGNhdXNlIGFueSBmZWFyLiBDYWVzYXIgaGFzIHNhY3JpZmljZWQgYWxsIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZW5taXRpZXMgdG8gdGhlIHJlcHVibGljOyBoZSBoYWQgbWFkZSB0aGUgcmVwdWJsaWMgaGlzIGp1ZGdlOyBoZSBoYXMgbWFkZSBoZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZGlyZWN0cmVzcyBvZiBhbGwgaGlzIGNvdW5zZWxzIGFuZCBhY3Rpb25zLiBGb3IgaGUgaXMgY29tZSB0byB0aGUgc2VydmljZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYyBpbiBvcmRlciB0byBzdHJlbmd0aGVuIGhlciwgbm90IHRvIG92ZXJ0dXJuIGhlci4gSSBhbSB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRlZCB3aXRoIGFsbCB0aGUgZmVlbGluZ3Mgb2YgdGhlIHlvdW5nIG1hbjogdGhlcmUgaXMgbm90aGluZyBkZWFyZXIgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gdGhhbiB0aGUgcmVwdWJsaWMsIG5vdGhpbmcgd2hpY2ggaGUgY29uc2lkZXJzIG9mIG1vcmUgd2VpZ2h0IHRoYW4geW91cgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eTsgbm90aGluZyB3aGljaCBoZSBkZXNpcmVzIG1vcmUgdGhhbiB0aGUgYXBwcm9iYXRpb24gb2YgdmlydHVvdXMgbWVuOwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd2hpY2ggaGUgYWNjb3VudHMgc3dlZXRlciB0aGFuIGdlbnVpbmUgZ2xvcnkuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUxIiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUgeW91IG5vdCBvbmx5IG91Z2h0IG5vdCB0byBmZWFyIGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGZyb20gaGltLCBidXQgeW91IG91Z2h0IHRvIGV4cGVjdCBncmVhdGVyIGFuZCBiZXR0ZXIgdGhpbmdzIHN0aWxsLiBOb3IKICAgICAgICAgICAgICAgICAgICBvdWdodCB5b3UgdG8gYXBwcmVoZW5kIHdpdGggcmVzcGVjdCB0byBhIG1hbiB3aG8gaGFzIGFscmVhZHkgZ29uZSBmb3J3YXJkIHRvCiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSBEZWNpbXVzIEJydXR1cyBmcm9tIGEgc2llZ2UsIHRoYXQgdGhlIHJlY29sbGVjdGlvbiBvZiBoaXMgZG9tZXN0aWMKICAgICAgICAgICAgICAgICAgICBpbmp1cnkgd2lsbCBkd2VsbCBpbiBoaXMgYm9zb20sIGFuZCBoYXZlIG1vcmUgd2VpZ2h0IHdpdGggaGltIHRoYW4gdGhlIHNhZmV0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5LiBJIHdpbGwgdmVudHVyZSBldmVuIHRvIHBsZWRnZSBteSBvd24gZmFpdGgsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvCiAgICAgICAgICAgICAgICAgICAgeW91LCBhbmQgdG8gdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHRvIHRoZSByZXB1YmxpYywgd2hpY2ggaW4gdHJ1dGgsIGlmIG5vCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzaXR5IGNvbXBlbGxlZCBtZSB0byBkbyBzbywgSSB3b3VsZCBub3QgdmVudHVyZSB0byBkbywgYW5kIGluIGRvaW5nIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgb24gc2xpZ2h0IGdyb3VuZHMsIEkgc2hvdWxkIGJlIGFmcmFpZCBvZiBnaXZpbmcgcmlzZSB0byBhIGRhbmdlcm91cyBvcGluaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgcmFzaG5lc3MgaW4gYSBtb3N0IGltcG9ydGFudCBidXNpbmVzczsgYnV0IEkgZG8gcHJvbWlzZSwgYW5kIHBsZWRnZSBteXNlbGYsCiAgICAgICAgICAgICAgICAgICAgYW5kIHVuZGVydGFrZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCBDYWl1cyBDYWVzYXIgd2lsbCBhbHdheXMgYmUgc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBhcyBoZSBpcyB0aGlzIGRheSwgYW5kIGFzIHdlIG91Z2h0IGFib3ZlIGFsbCB0aGluZ3MgdG8gd2lzaCBhbmQgZGVzaXJlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBtYXkgdHVybiBvdXQuIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.18.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlIHlvdSBub3Qgb25seSBvdWdodCBub3QgdG8gZmVhciBhbnkKICAgICAgICAgICAgICAgICAgICB0aGluZyBmcm9tIGhpbSwgYnV0IHlvdSBvdWdodCB0byBleHBlY3QgZ3JlYXRlciBhbmQgYmV0dGVyIHRoaW5ncyBzdGlsbC4gTm9yCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgeW91IHRvIGFwcHJlaGVuZCB3aXRoIHJlc3BlY3QgdG8gYSBtYW4gd2hvIGhhcyBhbHJlYWR5IGdvbmUgZm9yd2FyZCB0bwogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgRGVjaW11cyBCcnV0dXMgZnJvbSBhIHNpZWdlLCB0aGF0IHRoZSByZWNvbGxlY3Rpb24gb2YgaGlzIGRvbWVzdGljCiAgICAgICAgICAgICAgICAgICAgaW5qdXJ5IHdpbGwgZHdlbGwgaW4gaGlzIGJvc29tLCBhbmQgaGF2ZSBtb3JlIHdlaWdodCB3aXRoIGhpbSB0aGFuIHRoZSBzYWZldHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eS4gSSB3aWxsIHZlbnR1cmUgZXZlbiB0byBwbGVkZ2UgbXkgb3duIGZhaXRoLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgYW5kIHRvIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0byB0aGUgcmVwdWJsaWMsIHdoaWNoIGluIHRydXRoLCBpZiBubwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2l0eSBjb21wZWxsZWQgbWUgdG8gZG8gc28sIEkgd291bGQgbm90IHZlbnR1cmUgdG8gZG8sIGFuZCBpbiBkb2luZyB3aGljaAogICAgICAgICAgICAgICAgICAgIG9uIHNsaWdodCBncm91bmRzLCBJIHNob3VsZCBiZSBhZnJhaWQgb2YgZ2l2aW5nIHJpc2UgdG8gYSBkYW5nZXJvdXMgb3BpbmlvbiBvZgogICAgICAgICAgICAgICAgICAgIG15IHJhc2huZXNzIGluIGEgbW9zdCBpbXBvcnRhbnQgYnVzaW5lc3M7IGJ1dCBJIGRvIHByb21pc2UsIGFuZCBwbGVkZ2UgbXlzZWxmLAogICAgICAgICAgICAgICAgICAgIGFuZCB1bmRlcnRha2UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgQ2FpdXMgQ2Flc2FyIHdpbGwgYWx3YXlzIGJlIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4gYXMgaGUgaXMgdGhpcyBkYXksIGFuZCBhcyB3ZSBvdWdodCBhYm92ZSBhbGwgdGhpbmdzIHRvIHdpc2ggYW5kIGRlc2lyZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbWF5IHR1cm4gb3V0LiA8L3RyYW5zbGF0aW9uPg=="
translation['5.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['5.19.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBhcyB0aGlzIGlzIHRoZSBjYXNlLCBJIHNoYWxsIGNvbnNpZGVyIHRoYXQgSSBoYXZlIHNhaWQgZW5vdWdoIGF0IHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBhYm91dCBDYWVzYXIuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIGRvIEkgdGhpbmsgdGhhdCB3ZSBvdWdodCB0byBwYXNzIG92ZXIgTHVjaXVzIEVnbmF0dWxlaXVzLCBhIG1vc3QgZ2FsbGFudCBhbmQKICAgICAgICAgICAgICAgICAgICB3aXNlIGFuZCBmaXJtIGNpdGl6ZW4sIGFuZCBvbmUgdGhvcm91Z2hseSBhdHRhY2hlZCB0byB0aGUgcmVwdWJsaWMsIGluIHNpbGVuY2U7CiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgd2Ugb3VnaHQgdG8gZ2l2ZSBoaW0gb3VyIHRlc3RpbW9ueSB0byBoaXMgYWRtaXJhYmxlIHZpcnR1ZSwgYmVjYXVzZSBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBoZSB3aG8gbGVkIHRoZSBmb3VydGggbGVnaW9uIHRvIENhZXNhciwgdG8gYmUgYSBwcm90ZWN0aW9uIHRvIHRoZSBjb25zdWxzLAogICAgICAgICAgICAgICAgICAgIGFuZCBzZW5hdGUsIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMuIEFuZCBmb3IgdGhlc2UgYWN0cyBJIGdpdmUgbXkgdm90ZTogPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMuIEFuZCBmb3IgdGhlc2UgYWN0cyBJIGdpdmUgbXkgdm90ZTogPHAgY2xhc3M9InRyYW5zbGF0aW9uIj7igJxUaGF0IGl0IGJlIG1hZGUgbGF3ZnVsIGZvciBMdWNpdXMgRWduYXR1bGVpdXMgdG8gc3RhbmQgZm9yLCBhbmQgYmUKICAgICAgICAgICAgICAgICAgICBlbGVjdGVkIHRvLCBhbmQgZGlzY2hhcmdlIHRoZSBkdXRpZXMgb2YgYW55IG1hZ2lzdHJhY3ksIHRocmVlIHllYXJzIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpdGltYXRlIHRpbWUu4oCdIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGJ5IHRoaXMgbW90aW9uLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBMdWNpdXMgRWduYXR1bGVpdXMgZG9lcyBub3QgZ2V0IHNvIG11Y2gKICAgICAgICAgICAgICAgICAgICBhY3R1YWwgYWR2YW50YWdlIGFzIGhvbm9yLiBGb3IgaW4gYSBjYXNlIGxpa2UgdGhpcyBpdCBpcyBxdWl0ZSBzdWZmaWNpZW50IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgaG9ub3JhYmx5IG1lbnRpb25lZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.19.53'] = ""
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGltYWdpbmUgdGhhdCB5b3UgaGF2ZSBoZWFyZCwgTyBSb21hbnMsIHdoYXQgaGFzIGJlZW4gZG9uZSBpbiB0aGUgc2VuYXRlIGFuZAogICAgICAgICAgICAgICAgICAgIHdoYXQgaGFzIGJlZW4gdGhlIG9waW5pb24gZGVsaXZlcmVkIGJ5IGVhY2ggaW5kaXZpZHVhbC4gRm9yIHRoZSBtYXR0ZXIgd2hpY2ggaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBpbiBkaXNjdXNzaW9uIGV2ZXIgc2luY2UgdGhlIGZpcnN0IG9mIEphbnVhcnksIGhhcyBiZWVuIGp1c3QgYnJvdWdodCB0byBhCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbjsgd2l0aCBsZXNzIHNldmVyaXR5IGluZGVlZCB0aGFuIGl0IG91Z2h0IHRvIGhhdmUgYmVlbiwgYnV0IHN0aWxsIGluIGEKICAgICAgICAgICAgICAgICAgICBtYW5uZXIgbm90IGFsdG9nZXRoZXIgdW5iZWNvbWluZy4gVGhlIHdhciBoYXMgYmVlbiBzdWJqZWN0ZWQgdG8gYSBkZWxheSwgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGNhdXNlIGhhcyBub3QgYmVlbiByZW1vdmVkLiBXaGVyZWZvcmUsIGFzIHRvIHRoZSBxdWVzdGlvbiB3aGljaCBQdWJsaXVzCiAgICAgICAgICAgICAgICAgICAgQXBwdWxlaXVzLOKAlGEgbWFuIHVuaXRlZCB0byBtZSBieSBtYW55IGtpbmQgb2ZmaWNlcyBhbmQgYnkgdGhlIGNsb3Nlc3QKICAgICAgICAgICAgICAgICAgICBpbnRpbWFjeSwgYW5kIGZpcm1seSBhdHRhY2hlZCB0byB5b3VyIGludGVyZXN0c+KAlGhhcyBhc2tlZCBtZSwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYW5zd2VyIGluIHN1Y2ggYSBtYW5uZXIgdGhhdCB5b3UgbWF5IGJlIGFjcXVhaW50ZWQgd2l0aCB0aGUgdHJhbnNhY3Rpb25zIGF0CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IHdlcmUgbm90IHByZXNlbnQuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBjYXVzZSB3aGljaCBwcm9tcHRlZCBvdXIgbW9zdCBmZWFybGVzcyBhbmQKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgY29uc3VscyB0byBzdWJtaXQgYSBtb3Rpb24gb24gdGhlIGZpcnN0IG9mIEphbnVhcnksIGNvbmNlcm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBzdGF0ZSBvZiB0aGUgcmVwdWJsaWMsIGFyb3NlIGZyb20gdGhlIGRlY3JlZSB3aGljaCB0aGUgc2VuYXRlIHBhc3NlZCBieQogICAgICAgICAgICAgICAgICAgIG15IGFkdmljZSBvbiB0aGUgbmluZXRlZW50aCBvZiBEZWNlbWJlci4gT24gdGhhdCBkYXksIE8gUm9tYW5zIHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZm91bmRhdGlvbnMgb2YgdGhlIHJlcHVibGljIGZpcnN0IGxhaWQuIEZvciB0aGVuLCBhZnRlciBhIGxvbmcgaW50ZXJ2YWwsIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSB3YXMgZnJlZSBpbiBzdWNoIGEgbWFubmVyIHRoYXQgeW91IHRvbyBtaWdodCBiZWNvbWUgZnJlZS4gT24gd2hpY2ggZGF5LAogICAgICAgICAgICAgICAgICAgIGluZGVlZCzigJRldmVuIGlmIGl0IGhhZCBiZWVuIHRvIGJyaW5nIHRvIG1lIHRoZSBlbmQgb2YgbXkKICAgICAgICAgICAgICAgICAgICBsaWZl4oCUSSByZWNlaXZlZCBhIHN1ZmZpY2llbnQsIHJld2FyZCBmb3IgbXkgZXhlcnRpb25zLCB3aGVuIHlvdSBhbGwKICAgICAgICAgICAgICAgICAgICB3aXRoIG9uZSBoZWFydCBhbmQgb25lIHZvaWNlIGNyaWVkIG91dCB0b2dldGhlciwgdGhhdCB0aGUgcmVwdWJsaWMgaGFkIGJlZW4gYQogICAgICAgICAgICAgICAgICAgIHNlY29uZCB0aW1lIHNhdmVkIGJ5IG1lLiBTdGltdWxhdGVkIGJ5IHNvIGltcG9ydGFudCBhbmQgc28gc3BsZW5kaWQgYSBkZWNpc2lvbgogICAgICAgICAgICAgICAgICAgIG9mIHlvdXJzIGluIG15IGZhdm9yLCBJIGNhbWUgaW50byB0aGUgc2VuYXRlIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGZlZWxpbmcgdGhhdCBJIHdhcyBib3VuZCB0byBzaG93IG15IHJlY29sbGVjdGlvbiBvZiB0aGUgY2hhcmFjdGVyIHdoaWNoIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBpbXBvc2VkIHVwb24gbWUsIGFuZCB3aGljaCBJIGhhZCB0byBzdXN0YWluLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgY2F1c2Ugd2hpY2ggcHJvbXB0ZWQgb3VyIG1vc3QgZmVhcmxlc3MgYW5kCiAgICAgICAgICAgICAgICAgICAgZXhjZWxsZW50IGNvbnN1bHMgdG8gc3VibWl0IGEgbW90aW9uIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCBjb25jZXJuaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgc3RhdGUgb2YgdGhlIHJlcHVibGljLCBhcm9zZSBmcm9tIHRoZSBkZWNyZWUgd2hpY2ggdGhlIHNlbmF0ZSBwYXNzZWQgYnkKICAgICAgICAgICAgICAgICAgICBteSBhZHZpY2Ugb24gdGhlIG5pbmV0ZWVudGggb2YgRGVjZW1iZXIuIE9uIHRoYXQgZGF5LCBPIFJvbWFucyB3ZXJlIHRoZQogICAgICAgICAgICAgICAgICAgIGZvdW5kYXRpb25zIG9mIHRoZSByZXB1YmxpYyBmaXJzdCBsYWlkLiBGb3IgdGhlbiwgYWZ0ZXIgYSBsb25nIGludGVydmFsLCB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgd2FzIGZyZWUgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHlvdSB0b28gbWlnaHQgYmVjb21lIGZyZWUuIE9uIHdoaWNoIGRheSwKICAgICAgICAgICAgICAgICAgICBpbmRlZWQs4oCUZXZlbiBpZiBpdCBoYWQgYmVlbiB0byBicmluZyB0byBtZSB0aGUgZW5kIG9mIG15CiAgICAgICAgICAgICAgICAgICAgbGlmZeKAlEkgcmVjZWl2ZWQgYSBzdWZmaWNpZW50LCByZXdhcmQgZm9yIG15IGV4ZXJ0aW9ucywgd2hlbiB5b3UgYWxsCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvbmUgaGVhcnQgYW5kIG9uZSB2b2ljZSBjcmllZCBvdXQgdG9nZXRoZXIsIHRoYXQgdGhlIHJlcHVibGljIGhhZCBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBzZWNvbmQgdGltZSBzYXZlZCBieSBtZS4gU3RpbXVsYXRlZCBieSBzbyBpbXBvcnRhbnQgYW5kIHNvIHNwbGVuZGlkIGEgZGVjaXNpb24KICAgICAgICAgICAgICAgICAgICBvZiB5b3VycyBpbiBteSBmYXZvciwgSSBjYW1lIGludG8gdGhlIHNlbmF0ZSBvbiB0aGUgZmlyc3Qgb2YgSmFudWFyeSwgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBmZWVsaW5nIHRoYXQgSSB3YXMgYm91bmQgdG8gc2hvdyBteSByZWNvbGxlY3Rpb24gb2YgdGhlIGNoYXJhY3RlciB3aGljaCB5b3UgaGFkCiAgICAgICAgICAgICAgICAgICAgaW1wb3NlZCB1cG9uIG1lLCBhbmQgd2hpY2ggSSBoYWQgdG8gc3VzdGFpbi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZWZvcmUsIHdoZW4gSSBzYXcgdGhhdCBhIG5lZmFyaW91cyB3YXIgd2FzIHdhZ2VkIGFnYWluc3QgdGhlIHJlcHVibGljLCBJCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IG5vIGRlbGF5IG91Z2h0IHRvIGJlIGludGVycG9zZWQgdG8gb3VyIHB1cnN1aXQgb2YgTWFyY3VzIEFudG9uaXVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBJIGdhdmUgbXkgdm90ZSB0aGF0IHdlIG91Z2h0IHRvIHB1cnN1ZSB3aXRoIHdhciB0aGF0IG1vc3QgYXVkYWNpb3VzIG1hbiwKICAgICAgICAgICAgICAgICAgICB3aG8sIGhhdmluZyBjb21taXR0ZWQgbWFueSBhdHJvY2lvdXMgZW5lbWllcyBiZWZvcmUsIHdhcyBhdCB0aGlzIG1vbWVudAogICAgICAgICAgICAgICAgICAgIGF0dGFja2luZyBhIGdlbmVyYWwgb2YgdGhlIFJvbWFuIHBlb3BsZSBhbmQgYmVzaWVnaW5nIHlvdXIgbW9zdCBmYWl0aGZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBnYWxsYW50IGNvbG9ueTsgYW5kIHRoYXQgYSBzdGF0ZSBvZiBjaXZpbCB3YXIgb3VnaHQgdG8gYmUgcHJvY2xhaW1lZDsgYW5kIEkgc2FpZAogICAgICAgICAgICAgICAgICAgIGZhcnRoZXIsIHRoYXQgbXkgb3BpbmlvbiB3YXMgdGhhdCBhIHN1c3BlbnNpb24gb2YgdGhlIG9yZGluYXJ5IGZvcm1zIG9mIGp1c3RpY2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZGVjbGFyZWQsIGFuZCB0aGF0IHRoZSBnYXJiIG9mIHdhciBzaG91bGQgYmUgYXNzdW1lZCBieSB0aGUgY2l0aXplbnMsCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCBhbGwgbWVuIG1pZ2h0IGFwcGx5IHRoZW1zZWx2ZXMgd2l0aCBtb3JlIGFjdGl2aXR5IGFuZCBlbmVyZ3kgdG8KICAgICAgICAgICAgICAgICAgICBhdmVuZ2luZyB0aGUgaW5qdXJpZXMgb2YgdGhlIHJlcHVibGljLCBpZiB0aGV5IHNhdyB0aGF0IGFsbCB0aGUgZW1ibGVtcyBvZiBhCiAgICAgICAgICAgICAgICAgICAgcmVndWxhciB3YXIgaGFkIGJlZW4gYWRvcHRlZCBieSB0aGUgc2VuYXRlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUsIHRoaXMgb3BpbmlvbiBvZiBtaW5lLCBPIFJvbWFucywgcHJldmFpbGVkIHNvIG11Y2ggZm9yIHRocmVlIGRheXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhbHRob3VnaCBubyBkaXZpc2lvbiB3YXMgY29tZSB0bywgc3RpbGwgYWxsLCBleGNlcHQgYSB2ZXJ5IGZldywgYXBwZWFyZWQKICAgICAgICAgICAgICAgICAgICBpbmNsaW5lZCB0byBhZ3JlZSB3aXRoIG1lLiBCdXQgdG9kYXnigJRJIGtub3cgbm90LCBvd2luZyB0byB3aGF0CiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNl4oCUdGhlIHNlbmF0ZSB3YXMgbW9yZSBpbmR1bGdlbnQuIEZvciB0aGUgbWFqb3JpdHkgZGVjaWRlZAogICAgICAgICAgICAgICAgICAgIG9uIG91ciBtYWtpbmcgZXhwZXJpbWVudCwgYnkgbWVhbnMgb2YgYW1iYXNzYWRvcnMsIGhvdyBtdWNoIGluZmx1ZW5jZSB0aGUKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSBhbmQgeW91ciB1bmFuaW1pdHkgd2lsbCBoYXZlIHVwb24gQW50b25pdXMuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSwgdGhpcyBvcGluaW9uIG9mIG1pbmUsIE8gUm9tYW5zLCBwcmV2YWlsZWQgc28gbXVjaCBmb3IgdGhyZWUgZGF5cywKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsdGhvdWdoIG5vIGRpdmlzaW9uIHdhcyBjb21lIHRvLCBzdGlsbCBhbGwsIGV4Y2VwdCBhIHZlcnkgZmV3LCBhcHBlYXJlZAogICAgICAgICAgICAgICAgICAgIGluY2xpbmVkIHRvIGFncmVlIHdpdGggbWUuIEJ1dCB0b2RheeKAlEkga25vdyBub3QsIG93aW5nIHRvIHdoYXQKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2XigJR0aGUgc2VuYXRlIHdhcyBtb3JlIGluZHVsZ2VudC4gRm9yIHRoZSBtYWpvcml0eSBkZWNpZGVkCiAgICAgICAgICAgICAgICAgICAgb24gb3VyIG1ha2luZyBleHBlcmltZW50LCBieSBtZWFucyBvZiBhbWJhc3NhZG9ycywgaG93IG11Y2ggaW5mbHVlbmNlIHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlIGFuZCB5b3VyIHVuYW5pbWl0eSB3aWxsIGhhdmUgdXBvbiBBbnRvbml1cy4gPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBhbSB3ZWxsIGF3YXJlLCBPIFJvbWFucywgdGhhdCB0aGlzIGRlY2lzaW9uIGlzIGRpc2FwcHJvdmVkIG9mIGJ5IHlvdTsgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJseSB0b28uIEZvciB0byB3aG9tIGFyZSB3ZSBzZW5kaW5nIGFtYmFzc2Fkb3JzPyBJcyBpdCBub3QgdG8gaGltIHdobywKICAgICAgICAgICAgICAgICAgICBhZnRlciBoYXZpbmcgZGlzc2lwYXRlZCBhbmQgc3F1YW5kZXJlZCB0aGUgcHVibGljIG1vbmV5LCBhbmQgaW1wb3NlZCBsYXdzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIFJvbWFuIHBlb3BsZSBieSB2aW9sZW5jZSBhbmQgaW4gdmlvbGF0aW9uIG9mIHRoZSBhdXNwaWNlcyzigJRhZnRlcgogICAgICAgICAgICAgICAgICAgIGhhdmluZyBwdXQgdGhlIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUgdG8gZmxpZ2h0IGFuZCBiZXNpZWdlZCB0aGUgc2VuYXRlLCBzZW50CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBsZWdpb25zIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgdG8gb3BwcmVzcyB0aGUgcmVwdWJsaWM/IHdobywgd2hlbiBkZXNlcnRlZCBieSB0aGVtOyBoYXMgaW52YWRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHdpdGggYSB0cm9vcCBvZiBiYW5kaXR0aT8gd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgYXR0YWNraW5nIEJydXR1cz8gd2hvIGlzIGJlc2llZ2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IEhvdyBjYW4geW91IG9mZmVyIGNvbmRpdGlvbnMgdG8sIG9yIGV4cGVjdCBlcXVpdHkgZnJvbSwKICAgICAgICAgICAgICAgICAgICBvciBzZW5kIGFuIGVtYmFzc3kgdG8sIG9yLCBpbiBzaG9ydCwgaGF2ZSBhbnkgdGhpbmcgaW4gY29tbW9uIHdpdGgsIHRoaXMKICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3I/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbHRob3VnaCwgTyBSb21hbnMsIGl0IGlzIG5vdCBhbgogICAgICAgICAgICAgICAgICAgIGVtYmFzc3ksIGJ1dCBhIGRlbnVuY2lhdGlvbiBvZiB3YXIgaWYgaGUgZG9lcyBub3Qgb2JleS4gRm9yIHRoZSBkZWNyZWUgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBkcmF3biB1cCBhcyBpZiBhbWJhc3NhZG9ycyB3ZXJlIGJlaW5nIHNlbnQgdG8gSGFubmliYWwuIEZvciBtZW4gYXJlIHNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBvcmRlciBoaW0gbm90IHRvIGF0dGFjayB0aGUgY29uc3VsIGVsZWN0LCBub3QgdG8gYmVzaWVnZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBub3QgdG8gbGF5IHdhc3RlIHRoZSBwcm92aW5jZSwgbm90CiAgICAgICAgICAgICAgICAgICAgdG8gZW5saXN0IHRyb29wcywgYnV0IHRvIHN1Ym1pdCBoaW1zZWxmIHRvIHRoZSBwb3dlciBvZiB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gTm8gZG91YnQgaGUgaXMgYSBsaWtlbHkgbWFuCiAgICAgICAgICAgICAgICAgICAgdG8gb2JleSB0aGlzIGluanVuY3Rpb24sIGFuZCB0byBzdWJtaXQgdG8gdGhlIHBvd2VyIG9mIHRoZSBjb25zY3JpcHQgZmF0aGVycyBhbmQKICAgICAgICAgICAgICAgICAgICB0byB5b3Vycywgd2hvIGhhcyBuZXZlciBldmVuIGhhZCBhbnkgbWFzdGVyeSBvdmVyIGhpbXNlbGYuIEZvciB3aGF0IGhhcyBoZSBldmVyCiAgICAgICAgICAgICAgICAgICAgZG9uZSB0aGF0IHNob3dlZCBhbnkgZGlzY3JldGlvbiwgYmVpbmcgYWx3YXlzIGxlZCBhd2F5IHdoZXJldmVyIGhpcyBsdXN0LCBvciBoaXMKICAgICAgICAgICAgICAgICAgICBsZXZpdHksIG9yIGhpcyBmcmVuenksIG9yIGhpcyBkcnVua2VubmVzcyBoYXMgaHVycmllZCBoaW0/IEhlIGhhcyBhbHdheXMgYmVlbgogICAgICAgICAgICAgICAgICAgIHVuZGVyIHRoZSBkb21pbmlvbiBvZiB0d28gdmVyeSBkaXNzaW1pbGFyIGNsYXNzZXMgb2YgbWVuLCBwaW1wcyBhbmQgcm9iYmVyczsgaGUKICAgICAgICAgICAgICAgICAgICBpcyBzbyBmb25kIG9mIGRvbWVzdGljIGFkdWx0ZXJpZXMgYW5kIGZvcmVuc2ljIG11cmRlcnMsIHRoYXQgaGUgd291bGQgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgb2JleSBhIG1vc3QgY292ZXRvdXMgd29tYW4gdGhhbiB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBvcHByZXNzIHRoZSByZXB1YmxpYz8gd2hvLCB3aGVuIGRlc2VydGVkIGJ5IHRoZW07IGhhcyBpbnZhZGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gd2l0aCBhIHRyb29wIG9mIGJhbmRpdHRpPyB3aG8gaXMKICAgICAgICAgICAgICAgICAgICBhdHRhY2tpbmcgQnJ1dHVzPyB3aG8gaXMgYmVzaWVnaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPj8gSG93IGNhbiB5b3Ugb2ZmZXIgY29uZGl0aW9ucyB0bywgb3IgZXhwZWN0IGVxdWl0eSBmcm9tLAogICAgICAgICAgICAgICAgICAgIG9yIHNlbmQgYW4gZW1iYXNzeSB0bywgb3IsIGluIHNob3J0LCBoYXZlIGFueSB0aGluZyBpbiBjb21tb24gd2l0aCwgdGhpcwogICAgICAgICAgICAgICAgICAgIGdsYWRpYXRvcj8gPC90cmFuc2xhdGlvbj4="
translation['6.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbHRob3VnaCwgTyBSb21hbnMsIGl0IGlzIG5vdCBhbgogICAgICAgICAgICAgICAgICAgIGVtYmFzc3ksIGJ1dCBhIGRlbnVuY2lhdGlvbiBvZiB3YXIgaWYgaGUgZG9lcyBub3Qgb2JleS4gRm9yIHRoZSBkZWNyZWUgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBkcmF3biB1cCBhcyBpZiBhbWJhc3NhZG9ycyB3ZXJlIGJlaW5nIHNlbnQgdG8gSGFubmliYWwuIEZvciBtZW4gYXJlIHNlbnQgdG8KICAgICAgICAgICAgICAgICAgICBvcmRlciBoaW0gbm90IHRvIGF0dGFjayB0aGUgY29uc3VsIGVsZWN0LCBub3QgdG8gYmVzaWVnZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIG5vdCB0byBsYXkgd2FzdGUgdGhlIHByb3ZpbmNlLCBub3QKICAgICAgICAgICAgICAgICAgICB0byBlbmxpc3QgdHJvb3BzLCBidXQgdG8gc3VibWl0IGhpbXNlbGYgdG8gdGhlIHBvd2VyIG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIE5vIGRvdWJ0IGhlIGlzIGEgbGlrZWx5IG1hbgogICAgICAgICAgICAgICAgICAgIHRvIG9iZXkgdGhpcyBpbmp1bmN0aW9uLCBhbmQgdG8gc3VibWl0IHRvIHRoZSBwb3dlciBvZiB0aGUgY29uc2NyaXB0IGZhdGhlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8geW91cnMsIHdobyBoYXMgbmV2ZXIgZXZlbiBoYWQgYW55IG1hc3Rlcnkgb3ZlciBoaW1zZWxmLiBGb3Igd2hhdCBoYXMgaGUgZXZlcgogICAgICAgICAgICAgICAgICAgIGRvbmUgdGhhdCBzaG93ZWQgYW55IGRpc2NyZXRpb24sIGJlaW5nIGFsd2F5cyBsZWQgYXdheSB3aGVyZXZlciBoaXMgbHVzdCwgb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgbGV2aXR5LCBvciBoaXMgZnJlbnp5LCBvciBoaXMgZHJ1bmtlbm5lc3MgaGFzIGh1cnJpZWQgaGltPyBIZSBoYXMgYWx3YXlzIGJlZW4KICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgZG9taW5pb24gb2YgdHdvIHZlcnkgZGlzc2ltaWxhciBjbGFzc2VzIG9mIG1lbiwgcGltcHMgYW5kIHJvYmJlcnM7IGhlCiAgICAgICAgICAgICAgICAgICAgaXMgc28gZm9uZCBvZiBkb21lc3RpYyBhZHVsdGVyaWVzIGFuZCBmb3JlbnNpYyBtdXJkZXJzLCB0aGF0IGhlIHdvdWxkIHJhdGhlcgogICAgICAgICAgICAgICAgICAgIG9iZXkgYSBtb3N0IGNvdmV0b3VzIHdvbWFuIHRoYW4gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['6.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCBJIHdpbGwgZG8gbm93IGJlZm9yZSB5b3Ugd2hhdCBJIGhhdmUganVzdCBkb25lIGluIHRoZSBzZW5hdGUuIEkgY2FsbAogICAgICAgICAgICAgICAgICAgIHlvdSB0byB3aXRuZXNzLCBJIGdpdmUgbm90aWNlLCBJIHByZWRpY3QgYmVmb3JlaGFuZCwgdGhhdCBNYXJjdXMuIEFudG9uaXVzIHdpbGwKICAgICAgICAgICAgICAgICAgICBkbyBub3RoaW5nIHdoYXRldmVyIG9mIHRob3NlIHRoaW5ncyB3aGljaCB0aGUgYW1iYXNzYWRvcnMgYXJlIGNvbW1pc3Npb25lZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgaGltIHRvIGRvOyBidXQgdGhhdCBoZSB3aWxsIGxheSB3YXN0ZSB0aGUgbGFuZHMsIGFuZCBiZXNpZWdlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiwgYW5kIGVubGlzdCBzb2xkaWVycywgd2hlcmV2ZXIgaGUKICAgICAgICAgICAgICAgICAgICBjYW4uIEZvciBoZSBpcyBhIG1hbiB3aG8gaGFzIGF0IGFsbCB0aW1lcyBkZXNwaXNlZCB0aGUganVkZ21lbnQgYW5kIGF1dGhvcml0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUsIGFuZCB5b3VyIGluY2xpbmF0aW9ucyBhbmQgcG93ZXIuIFdpbGwgaGUgZG8gd2hhdCBpdCBoYXMgYmVlbiBqdXN0CiAgICAgICAgICAgICAgICAgICAgbm93IGRlY3JlZWQgdGhhdCBoZSBzaGFsbCBkbyzigJRsZWFkIGhpcyBhcm15IGJhY2sgYWNyb3NzIHRoZSBSdWJpY29uLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGlzIHRoZSBmcm9udGllciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBhbmQgeWV0CiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHNhbWUgdGltZSBub3QgY29tZSBuZWFyZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhhbiB0d28gaHVuZHJlZCBtaWxlcz8gV2lsbCBoZSBvYmV5IHRoaXMgbm90aWNlPyB3aWxsIGhlIGFsbG93IGhpbXNlbGYgdG8gYmUKICAgICAgICAgICAgICAgICAgICBjb25maW5lZCBieSB0aGUgcml2ZXIgUnViaWNvbiwgYW5kIGJ5IHRoZSBsaW1pdCBvZiB0d28gaHVuZHJlZCBtaWxlcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IEFudG9uaXVzIGlzIG5vdCB0aGF0IHNvcnQgb2YgbWFuLiBGb3IgaWYgaGUgaGFkIGJlZW4sCiAgICAgICAgICAgICAgICAgICAgaGUgd291bGQgbmV2ZXIgaGF2ZSBhbGxvd2VkIG1hdHRlcnMgdG8gY29tZSB0byBzdWNoIGEgcGFzcywgYXMgZm9yIHRoZSBzZW5hdGUgdG8KICAgICAgICAgICAgICAgICAgICBnaXZlIGhpbSBub3RpY2UsIGFzIGl0IGRpZCB0byBIYW5uaWJhbCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBQdW5pYyB3YXIgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTU5IiBrZXk9InRnbiw3MDA4NTU5Ij5TYWd1bnR1bTwvcGxhY2VOYW1lPi4gQnV0IHdoYXQgaWdub21pbnkgaXQKICAgICAgICAgICAgICAgICAgICBpcyB0byBiZSBjYWxsZWQgYXdheSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdG8gYmUgZm9yYmlkZGVuIHRvIGFwcHJvYWNoIHRoZSBjaXR5IGFzIGlmIGhlIHdlcmUgc29tZQogICAgICAgICAgICAgICAgICAgIGZhdGFsIGNvbmZsYWdyYXRpb24hIHdoYXQgYW4gb3BpbmlvbiBpcyB0aGlzIGZvciB0aGUgc2VuYXRlIHRvIGhhdmUgb2YgYSBtYW4hCiAgICAgICAgICAgICAgICAgICAgV2hhdD8gQXMgdG8gdGhlIGNvbW1pc3Npb24gd2hpY2ggaXMgZ2l2ZW4gdG8gdGhlIGFtYmFzc2Fkb3JzIHRvIHZpc2l0IERlY2ltdXMKICAgICAgICAgICAgICAgICAgICBCcnV0dXMgYW5kIGhpcyBzb2xkaWVycywgYW5kIHRvIGluZm9ybSB0aGVtIHRoYXQgdGhlaXIgZXhjZWxsZW50IHplYWwgaW4gYmVoYWxmCiAgICAgICAgICAgICAgICAgICAgb2YsIGFuZCBzZXJ2aWNlcyBkb25lIHRvIHRoZSByZXB1YmxpYywgYXJlIGFjY2VwdGFibGUgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYW5kIHRoYXQgdGhhdCBjb25kdWN0IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdGVuZCB0byB0aGVpciBncmVhdCBnbG9yeSBhbmQgdG8gdGhlaXIgZ3JlYXQgaG9ub3I7IGRvIHlvdSB0aGluayB0aGF0IEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgd2lsbCBwZXJtaXQgdGhlIGFtYmFzc2Fkb3JzIHRvIGVudGVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IGFuZCB0byBkZXBhcnQgZnJvbSB0aGVuY2UgaW4gc2FmZXR5PyBIZSBuZXZlciB3aWxsCiAgICAgICAgICAgICAgICAgICAgYWxsb3cgaXQsIGJlbGlldmUgbWUuIEkga25vdyB0aGUgdmlvbGVuY2Ugb2YgdGhlIG1hbiwgSSBrbm93IGhpcyBpbXB1ZGVuY2UsIEkKICAgICAgICAgICAgICAgICAgICBrbm93IGhpcyBhdWRhY2l0eS4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBhbmQgZW5saXN0IHNvbGRpZXJzLCB3aGVyZXZlciBoZQogICAgICAgICAgICAgICAgICAgIGNhbi4gRm9yIGhlIGlzIGEgbWFuIHdobyBoYXMgYXQgYWxsIHRpbWVzIGRlc3Bpc2VkIHRoZSBqdWRnbWVudCBhbmQgYXV0aG9yaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSwgYW5kIHlvdXIgaW5jbGluYXRpb25zIGFuZCBwb3dlci4gV2lsbCBoZSBkbyB3aGF0IGl0IGhhcyBiZWVuIGp1c3QKICAgICAgICAgICAgICAgICAgICBub3cgZGVjcmVlZCB0aGF0IGhlIHNoYWxsIGRvLOKAlGxlYWQgaGlzIGFybXkgYmFjayBhY3Jvc3MgdGhlIFJ1Ymljb24sCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgdGhlIGZyb250aWVyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIGFuZCB5ZXQKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgc2FtZSB0aW1lIG5vdCBjb21lIG5lYXJlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0aGFuIHR3byBodW5kcmVkIG1pbGVzPyBXaWxsIGhlIG9iZXkgdGhpcyBub3RpY2U/IHdpbGwgaGUgYWxsb3cgaGltc2VsZiB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbmZpbmVkIGJ5IHRoZSByaXZlciBSdWJpY29uLCBhbmQgYnkgdGhlIGxpbWl0IG9mIHR3byBodW5kcmVkIG1pbGVzPyA8L3RyYW5zbGF0aW9uPg=="
translation['6.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBBbnRvbml1cyBpcyBub3QgdGhhdCBzb3J0IG9mIG1hbi4gRm9yIGlmIGhlIGhhZCBiZWVuLAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIG5ldmVyIGhhdmUgYWxsb3dlZCBtYXR0ZXJzIHRvIGNvbWUgdG8gc3VjaCBhIHBhc3MsIGFzIGZvciB0aGUgc2VuYXRlIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBoaW0gbm90aWNlLCBhcyBpdCBkaWQgdG8gSGFubmliYWwgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgUHVuaWMgd2FyIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODU1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NTU5Ij5TYWd1bnR1bTwvcGxhY2VOYW1lPi4gQnV0IHdoYXQgaWdub21pbnkgaXQKICAgICAgICAgICAgICAgICAgICBpcyB0byBiZSBjYWxsZWQgYXdheSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgYXQgdGhlIHNhbWUgdGltZSB0byBiZSBmb3JiaWRkZW4gdG8gYXBwcm9hY2ggdGhlIGNpdHkgYXMgaWYgaGUgd2VyZSBzb21lCiAgICAgICAgICAgICAgICAgICAgZmF0YWwgY29uZmxhZ3JhdGlvbiEgd2hhdCBhbiBvcGluaW9uIGlzIHRoaXMgZm9yIHRoZSBzZW5hdGUgdG8gaGF2ZSBvZiBhIG1hbiEKICAgICAgICAgICAgICAgICAgICBXaGF0PyBBcyB0byB0aGUgY29tbWlzc2lvbiB3aGljaCBpcyBnaXZlbiB0byB0aGUgYW1iYXNzYWRvcnMgdG8gdmlzaXQgRGVjaW11cwogICAgICAgICAgICAgICAgICAgIEJydXR1cyBhbmQgaGlzIHNvbGRpZXJzLCBhbmQgdG8gaW5mb3JtIHRoZW0gdGhhdCB0aGVpciBleGNlbGxlbnQgemVhbCBpbiBiZWhhbGYKICAgICAgICAgICAgICAgICAgICBvZiwgYW5kIHNlcnZpY2VzIGRvbmUgdG8gdGhlIHJlcHVibGljLCBhcmUgYWNjZXB0YWJsZSB0byB0aGUgc2VuYXRlIGFuZCBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIGFuZCB0aGF0IHRoYXQgY29uZHVjdCBzaGFsbAogICAgICAgICAgICAgICAgICAgIHRlbmQgdG8gdGhlaXIgZ3JlYXQgZ2xvcnkgYW5kIHRvIHRoZWlyIGdyZWF0IGhvbm9yOyBkbyB5b3UgdGhpbmsgdGhhdCBBbnRvbml1cwogICAgICAgICAgICAgICAgICAgIHdpbGwgcGVybWl0IHRoZSBhbWJhc3NhZG9ycyB0byBlbnRlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IGFuZCB0byBkZXBhcnQgZnJvbSB0aGVuY2UgaW4gc2FmZXR5PyBIZSBuZXZlciB3aWxsCiAgICAgICAgICAgICAgICAgICAgYWxsb3cgaXQsIGJlbGlldmUgbWUuIEkga25vdyB0aGUgdmlvbGVuY2Ugb2YgdGhlIG1hbiwgSSBrbm93IGhpcyBpbXB1ZGVuY2UsIEkKICAgICAgICAgICAgICAgICAgICBrbm93IGhpcyBhdWRhY2l0eS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yLCBpbmRlZWQsIG91Z2h0IHdlIHRvIHRoaW5rIG9mIGhpbSBhcyBvZiBhCiAgICAgICAgICAgICAgICAgICAgaHVtYW4gYmVpbmcsIGJ1dCBhcyBvZiBhIG1vc3QgaWxsLW9tZW5lZCBiZWFzdC4gQW5kIGFzIHRoaXMgaXMgdGhlIGNhc2UsIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSB3aGljaCB0aGUgc2VuYXRlIGhhcyBwYXNzZWQgaXMgbm90IHdob2xseSBpbXByb3Blci4gVGhlIGVtYmFzc3kgaGFzIHNvbWUKICAgICAgICAgICAgICAgICAgICBzZXZlcml0eSBpbiBpdDsgSSBvbmx5IHdpc2ggaXQgaGFkIG5vIGRlbGF5LiBGb3IgYXMgaW4gdGhlIGNvbmR1Y3Qgb2YgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgZXZlcnkgYWZmYWlyIHNsb3duZXNzIGFuZCBwcm9jcmFzdGluYXRpb24gYXJlIGhhdGVmdWwsIHNvIGFib3ZlIGFsbCB0aGluZ3MgZG9lcwogICAgICAgICAgICAgICAgICAgIHRoaXMgd2FyIHJlcXVpcmUgcHJvbXB0bmVzcyBvZiBhY3Rpb24uIFdlIG11c3QgYXNzaXN0IERlY2ltdXMgQnJ1dHVzOyB3ZSBtdXN0CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdCBhbGwgb3VyIGZvcmNlcyBmcm9tIGFsbCBxdWFydGVyczsgd2UgY2FuIG5vdCBsb3NlIGEgc2luZ2xlIGhvdXIgaW4KICAgICAgICAgICAgICAgICAgICBlZmZlY3RpbmcgdGhlIGRlbGl2ZXJhbmNlIG9mIHN1Y2ggYSBjaXRpemVuIHdpdGhvdXQgd2lja2VkbmVzcy4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXYXMgaXQgbm90IGluIGhpcyBwb3dlciwgaWYgaGUgaGFkIGNvbnNpZGVyZWQgQW50b25pdXMgYQogICAgICAgICAgICAgICAgICAgIGNvbnN1bCwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHRoZSBwcm92aW5jZSBvZgogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLCB0byBoYXZlIGdpdmVuIG92ZXIgdGhlIGxlZ2lvbnMgYW5kIHRoZSBwcm92aW5jZSB0byBBbnRvbml1cz8gYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvbWUgaGltc2VsZj8gYW5kIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGg/IGFuZCB0byBiZSB0aGUgZmlyc3QgbWFuIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBib2R5IHRvIGRlbGl2ZXIgaGlzIG9waW5pb24sIHVudGlsIGhlIGVudGVyZWQgb24gaGlzIG1hZ2lzdHJhY3k/IFdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgb2YgZG9pbmcgdGhhdD8gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgaGUgcmVtZW1iZXJlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIEJydXR1cywgYW5kIHRoYXQgaGUgd2FzIGJvcm4gZm9yIHlvdXIgZnJlZWRvbSwgbm90IGZvciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgdHJhbnF1aWxsaXR5LCB3aGF0IGVsc2UgZGlkIGhlIGRvIGJ1dOKAlGFzIEkgbWF5IGFsbW9zdAogICAgICAgICAgICAgICAgICAgIHNheeKAlHB1dCBoaXMgb3duIGJvZHkgaW4gdGhlIHdheSB0byBwcmV2ZW50IEFudG9uaXVzIGZyb20gZW50ZXJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4/IE91Z2h0IHdlIHRoZW4gdG8gc2VuZAogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIHRvIHRoaXMgbWFuLCBvciBsZWdpb25zPyBIb3dldmVyLCB3ZSB3aWxsIHNheSBub3RoaW5nIG9mIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICBwYXN0LiBMZXQgdGhlIGFtYmFzc2Fkb3JzIGhhc3RlbiwgYXMgSSBzZWUgdGhhdCB0aGV5IGFyZSBhYm91dCB0byBkby4gUHJlcGFyZQogICAgICAgICAgICAgICAgICAgIHlvdXIgcm9iZXMgb2Ygd2FyLiBGb3IgaXQgaGFzIGJlZW4gZGVjcmVlZCwgdGhhdCwgaWYgaGUgZG9lcyBub3Qgb2JleSB0aGUKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSwgd2UgYXJlIGFsbCB0byBiZXRha2Ugb3Vyc2VsdmVzIHRvIG91ciBtaWxpdGFyeSBkcmVzcy4KICAgICAgICAgICAgICAgICAgICBBbmQgd2Ugc2hhbGwgaGF2ZSB0byBkbyBzby4gSGUgd2lsbCBuZXZlciBvYmV5LiBBbmQgd2Ugc2hhbGwgbGFtZW50IHRoYXQgd2UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxvc3Qgc28gbWFueSBkYXlzLCB3aGVuIHdlIG1pZ2h0IGhhdmUgYmVlbiBkb2luZyBzb21ldGhpbmcuIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IsIGluZGVlZCwgb3VnaHQgd2UgdG8gdGhpbmsgb2YgaGltIGFzIG9mIGEKICAgICAgICAgICAgICAgICAgICBodW1hbiBiZWluZywgYnV0IGFzIG9mIGEgbW9zdCBpbGwtb21lbmVkIGJlYXN0LiBBbmQgYXMgdGhpcyBpcyB0aGUgY2FzZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIHdoaWNoIHRoZSBzZW5hdGUgaGFzIHBhc3NlZCBpcyBub3Qgd2hvbGx5IGltcHJvcGVyLiBUaGUgZW1iYXNzeSBoYXMgc29tZQogICAgICAgICAgICAgICAgICAgIHNldmVyaXR5IGluIGl0OyBJIG9ubHkgd2lzaCBpdCBoYWQgbm8gZGVsYXkuIEZvciBhcyBpbiB0aGUgY29uZHVjdCBvZiBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBldmVyeSBhZmZhaXIgc2xvd25lc3MgYW5kIHByb2NyYXN0aW5hdGlvbiBhcmUgaGF0ZWZ1bCwgc28gYWJvdmUgYWxsIHRoaW5ncyBkb2VzCiAgICAgICAgICAgICAgICAgICAgdGhpcyB3YXIgcmVxdWlyZSBwcm9tcHRuZXNzIG9mIGFjdGlvbi4gV2UgbXVzdCBhc3Npc3QgRGVjaW11cyBCcnV0dXM7IHdlIG11c3QKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0IGFsbCBvdXIgZm9yY2VzIGZyb20gYWxsIHF1YXJ0ZXJzOyB3ZSBjYW4gbm90IGxvc2UgYSBzaW5nbGUgaG91ciBpbgogICAgICAgICAgICAgICAgICAgIGVmZmVjdGluZyB0aGUgZGVsaXZlcmFuY2Ugb2Ygc3VjaCBhIGNpdGl6ZW4gd2l0aG91dCB3aWNrZWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['6.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXYXMgaXQgbm90IGluIGhpcyBwb3dlciwgaWYgaGUgaGFkIGNvbnNpZGVyZWQgQW50b25pdXMgYQogICAgICAgICAgICAgICAgICAgIGNvbnN1bCwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gdGhlIHByb3ZpbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIHRvIGhhdmUgZ2l2ZW4gb3ZlciB0aGUgbGVnaW9ucyBhbmQgdGhlIHByb3ZpbmNlIHRvIEFudG9uaXVzPyBhbmQgdG8KICAgICAgICAgICAgICAgICAgICByZXR1cm4gaG9tZSBoaW1zZWxmPyBhbmQgdG8gY2VsZWJyYXRlIGEgdHJpdW1waD8gYW5kIHRvIGJlIHRoZSBmaXJzdCBtYW4gaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGJvZHkgdG8gZGVsaXZlciBoaXMgb3BpbmlvbiwgdW50aWwgaGUgZW50ZXJlZCBvbiBoaXMgbWFnaXN0cmFjeT8gV2hhdCB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSBvZiBkb2luZyB0aGF0PyA8L3RyYW5zbGF0aW9uPg=="
translation['6.3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgaGUgcmVtZW1iZXJlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIEJydXR1cywgYW5kIHRoYXQgaGUgd2FzIGJvcm4gZm9yIHlvdXIgZnJlZWRvbSwgbm90IGZvciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgdHJhbnF1aWxsaXR5LCB3aGF0IGVsc2UgZGlkIGhlIGRvIGJ1dOKAlGFzIEkgbWF5IGFsbW9zdAogICAgICAgICAgICAgICAgICAgIHNheeKAlHB1dCBoaXMgb3duIGJvZHkgaW4gdGhlIHdheSB0byBwcmV2ZW50IEFudG9uaXVzIGZyb20gZW50ZXJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPj8gT3VnaHQgd2UgdGhlbiB0byBzZW5kCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgdG8gdGhpcyBtYW4sIG9yIGxlZ2lvbnM/IEhvd2V2ZXIsIHdlIHdpbGwgc2F5IG5vdGhpbmcgb2Ygd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIHBhc3QuIExldCB0aGUgYW1iYXNzYWRvcnMgaGFzdGVuLCBhcyBJIHNlZSB0aGF0IHRoZXkgYXJlIGFib3V0IHRvIGRvLiBQcmVwYXJlCiAgICAgICAgICAgICAgICAgICAgeW91ciByb2JlcyBvZiB3YXIuIEZvciBpdCBoYXMgYmVlbiBkZWNyZWVkLCB0aGF0LCBpZiBoZSBkb2VzIG5vdCBvYmV5IHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCB3ZSBhcmUgYWxsIHRvIGJldGFrZSBvdXJzZWx2ZXMgdG8gb3VyIG1pbGl0YXJ5IGRyZXNzLgogICAgICAgICAgICAgICAgICAgIEFuZCB3ZSBzaGFsbCBoYXZlIHRvIGRvIHNvLiBIZSB3aWxsIG5ldmVyIG9iZXkuIEFuZCB3ZSBzaGFsbCBsYW1lbnQgdGhhdCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbG9zdCBzbyBtYW55IGRheXMsIHdoZW4gd2UgbWlnaHQgaGF2ZSBiZWVuIGRvaW5nIHNvbWV0aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBoYXZlIG5vIGZlYXIsIE8gUm9tYW5zLCB0aGF0IHdoZW4gQW50b25pdXMgaGVhcnMgdGhhdCBJIGhhdmUgYXNzZXJ0ZWQsIGJvdGggaW4KICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlIGFuZCBpbiB0aGUgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSwgdGhhdCBoZSBuZXZlciB3aWxsIHN1Ym1pdCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHBvd2VyIG9mIHRoZSBzZW5hdGUsIGhlIHdpbGwsIGZvciB0aGUgc2FrZSBvZiBkaXNwcm92aW5nIG15IHdvcmRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgbWUgdG8gYXBwZWFyIHRvIGhhdmUgaGFkIG5vIGZvcmVzaWdodCwgYWx0ZXIgaGlzIGJlaGF2aW9yIGFuZCBvYmV5IHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS4gSGUgd2lsbCBuZXZlciBkbyBzby4gSGUgd2lsbCBub3QgZ3J1ZGdlIG1lIHRoaXMgcGFydCBvZiBteSByZXB1dGF0aW9uOwogICAgICAgICAgICAgICAgICAgIGhlIHdpbGwgcHJlZmVyIGxldHRpbmcgbWUgYmUgdGhvdWdodCB3aXNlIGJ5IHlvdSB0byBiZWluZyB0aG91Z2h0IG1vZGVzdAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gTmVlZCBJIHNheSBtb3JlPyBFdmVuIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nIHRvIGRvIHNvIGhpbXNlbGYsIGRvIHlvdSB0aGluayB0aGF0IGhpcyBicm90aGVyIEx1Y2l1cyB3b3VsZCBwZXJtaXQgaGltPwogICAgICAgICAgICAgICAgICAgIEl0IGhhcyBiZWVuIHJlcG9ydGVkIHRoYXQgbGF0ZWx5IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGlidXIiIGtleT0icGVyc2V1cyxUaWJ1ciI+VGlidXI8L3BsYWNlTmFtZT4sIHdoZW4gTWFyY3VzIEFudG9uaXVzIGFwcGVhcmVkIHRvIGhpbSB0byBoZSB3YXZlcmluZywgaGUsCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzLCB0aHJlYXRlbmVkIGhpcyBicm90aGVyIHdpdGggZGVhdGguIEFuZCBkbyB3ZSBzdXBwb3NlIHRoYXQgdGhlIG9yZGVycyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUsIGFuZCB0aGUgd29yZHMgb2YgdGhlIGFtYmFzc2Fkb3JzLCB3aWxsIGJlIGxpc3RlbmVkIHRvIGJ5IHRoaXMuCiAgICAgICAgICAgICAgICAgICAgQXNpYXRpYyBnbGFkaWF0b3I/IEl0IHdpbGwgYmUgaW1wb3NzaWJsZSBmb3IgaGltIHRvIGJlIHNlcGFyYXRlZCBmcm9tIGEgYnJvdGhlciwKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGZyb20gb25lIG9mIHNvIG11Y2ggYXV0aG9yaXR5LiBGb3IgaGUgaXMgYW5vdGhlciBBZnJpY2FudXMgYW1vbmcKICAgICAgICAgICAgICAgICAgICB0aGVtLiBIZSBpcyBjb25zaWRlcmVkIG9mIG1vcmUgaW5mbHVlbmNlIHRoYW4gTHVjaXVzIFRyZWJlbGxpdXMsIG9mIG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIFRpdHVzIFBsYW5jdXMgPGdhcCBkZXNjPSIqKioiIC8+IGEgbm9ibGUgeW91bmcgbWFuLiBBcyBmb3IgUGxhbmN1cywgd2hvLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbmRlbW5lZCBieSB0aGUgdW5hbmltb3VzIHZvdGUgb2YgZXZlcnkgb25lLCBhbWlkIHRoZSBvdmVycG93ZXJpbmcKICAgICAgICAgICAgICAgICAgICBhcHBsYXVzZSBvZiB5b3UgeW91cnNlbHZlcywgc29tZWhvdyBvciBvdGhlciBnb3QgbWl4ZWQgdXAgaW4gdGhpcyBjcm93ZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgd2l0aCBhIGNvdW50ZW5hbmNlIHNvIHNvcnJvd2Z1bCwgdGhhdCBoZSBhcHBlYXJlZCB0byBoYXZlIGJlZW4gZHJhZ2dlZAogICAgICAgICAgICAgICAgICAgIGJhY2sgcmF0aGVyIHRoYW4gdG8gaGF2ZSByZXR1cm5lZCwgaGUgZGVzcGlzZXMgaGltIHRvIHN1Y2ggZGVncmVlLCBhcyBpZiBoZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJkaWN0ZWQgZnJvbSBmaXJlIGFuZCB3YXRlci4gQXQgdGltZXMgaGUgc2F5cyB0aGF0IHRoYXQgbWFuIHdobyBzZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLWhvdXNlIG9uIGZpcmUgaGFzIG5vIHJpZ2h0IHRvIGEgcGxhY2UgaW4gdGhlIHNlbmF0ZS1ob3VzZS4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGF0IHRoaXMgbW9tZW50IGhlIGlzIGV4Y2VlZGluZ2x5IGluIGxvdmUgd2l0aAogICAgICAgICAgICAgICAgICAgIFRyZWJlbGxpdXMuIEhlIGhhdGVkIGhpbSBzb21lIHRpbWUgYWdvLCB3aGVuIGhlIHdhcyBvcHBvc2luZyBhbiBhYm9saXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBkZWJ0czsgYnV0IG5vdyBoZSBkZWxpZ2h0cyBpbiBoaW0sIGV2ZXIgc2luY2UgaGUgaGFzIHNlZW4gdGhhdCBUcmViZWxsaXVzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBjYW4gbm90IGNvbnRpbnVlIGluIHNhZmV0eSB3aXRob3V0IGFuIGFib2xpdGlvbiBvZiBkZWJ0cy4gRm9yIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYXZlIGhlYXJkLCBPIFJvbWFucywgd2hhdCBpbmRlZWQgeW91IG1heSBwb3NzaWJseSBoYXZlIHNlZW4sIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMgYW5kIGNyZWRpdG9ycyBvZiBMdWNpdXMgVHJlYmVsbGl1cyBtZWV0IGV2ZXJ5IGRheS4gT2ggY29uZmlkZW5jZSEgZm9yIEkKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIHRoYXQgVHJlYmVsbGl1cyBoYXMgdGFrZW4gdGhpcyBzdXJuYW1lOyB3aGF0IGNhbiBiZSBncmVhdGVyIGNvbmZpZGVuY2UKICAgICAgICAgICAgICAgICAgICB0aGFuIGRlZnJhdWRpbmcgb25lJ3MgY3JlZGl0b3JzPyB0aGFuIGZseWluZyBmcm9tIG9uZSdzIGhvdXNlPyB0aGFuLCBiZWNhdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgb25lJ3MgZGVidHMsIGJlaW5nIGZvcmNlZCB0byBnbyB0byB3YXI/IFdoYXQgaGFzIGJlY29tZSBvZiB0aGUgYXBwbGF1c2VzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgcmVjZWl2ZWQgb24gdGhlIG9jY2FzaW9uIG9mIENhZXNhcidzIHRyaXVtcGgsIGFuZCBvZnRlbiBhdCB0aGUgZ2FtZXM/IFdoZXJlCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIGFlZGlsZXNoaXAgdGhhdCB3YXMgY29uZmVycmVkIG9uIGhpbSBieSB0aGUgemVhbG91cyBlZmZvcnRzIG9mIGFsbCBnb29kCiAgICAgICAgICAgICAgICAgICAgbWVuPyB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IG5vdyB0aGluayB0aGF0IGhlIGFjdGVkIHZpcnR1b3VzbHkgYnkgYWNjaWRlbnQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDxnYXAgZGVzYz0iKiAqICogKiAqICoiIC8+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gTmVlZCBJIHNheSBtb3JlPyBFdmVuIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nIHRvIGRvIHNvIGhpbXNlbGYsIGRvIHlvdSB0aGluayB0aGF0IGhpcyBicm90aGVyIEx1Y2l1cyB3b3VsZCBwZXJtaXQgaGltPwogICAgICAgICAgICAgICAgICAgIEl0IGhhcyBiZWVuIHJlcG9ydGVkIHRoYXQgbGF0ZWx5IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGlidXIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRpYnVyIj5UaWJ1cjwvcGxhY2VOYW1lPiwgd2hlbiBNYXJjdXMgQW50b25pdXMgYXBwZWFyZWQgdG8gaGltIHRvIGhlIHdhdmVyaW5nLCBoZSwKICAgICAgICAgICAgICAgICAgICBMdWNpdXMsIHRocmVhdGVuZWQgaGlzIGJyb3RoZXIgd2l0aCBkZWF0aC4gQW5kIGRvIHdlIHN1cHBvc2UgdGhhdCB0aGUgb3JkZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSwgYW5kIHRoZSB3b3JkcyBvZiB0aGUgYW1iYXNzYWRvcnMsIHdpbGwgYmUgbGlzdGVuZWQgdG8gYnkgdGhpcy4KICAgICAgICAgICAgICAgICAgICBBc2lhdGljIGdsYWRpYXRvcj8gSXQgd2lsbCBiZSBpbXBvc3NpYmxlIGZvciBoaW0gdG8gYmUgc2VwYXJhdGVkIGZyb20gYSBicm90aGVyLAogICAgICAgICAgICAgICAgICAgIGVzcGVjaWFsbHkgZnJvbSBvbmUgb2Ygc28gbXVjaCBhdXRob3JpdHkuIEZvciBoZSBpcyBhbm90aGVyIEFmcmljYW51cyBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZW0uIEhlIGlzIGNvbnNpZGVyZWQgb2YgbW9yZSBpbmZsdWVuY2UgdGhhbiBMdWNpdXMgVHJlYmVsbGl1cywgb2YgbW9yZSB0aGFuCiAgICAgICAgICAgICAgICAgICAgVGl0dXMgUGxhbmN1cyA8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKioqIiAvPiBhIG5vYmxlIHlvdW5nIG1hbi4gQXMgZm9yIFBsYW5jdXMsIHdobywgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBjb25kZW1uZWQgYnkgdGhlIHVuYW5pbW91cyB2b3RlIG9mIGV2ZXJ5IG9uZSwgYW1pZCB0aGUgb3ZlcnBvd2VyaW5nCiAgICAgICAgICAgICAgICAgICAgYXBwbGF1c2Ugb2YgeW91IHlvdXJzZWx2ZXMsIHNvbWVob3cgb3Igb3RoZXIgZ290IG1peGVkIHVwIGluIHRoaXMgY3Jvd2QsIGFuZAogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIHdpdGggYSBjb3VudGVuYW5jZSBzbyBzb3Jyb3dmdWwsIHRoYXQgaGUgYXBwZWFyZWQgdG8gaGF2ZSBiZWVuIGRyYWdnZWQKICAgICAgICAgICAgICAgICAgICBiYWNrIHJhdGhlciB0aGFuIHRvIGhhdmUgcmV0dXJuZWQsIGhlIGRlc3Bpc2VzIGhpbSB0byBzdWNoIGRlZ3JlZSwgYXMgaWYgaGUgd2VyZQogICAgICAgICAgICAgICAgICAgIGludGVyZGljdGVkIGZyb20gZmlyZSBhbmQgd2F0ZXIuIEF0IHRpbWVzIGhlIHNheXMgdGhhdCB0aGF0IG1hbiB3aG8gc2V0IHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS1ob3VzZSBvbiBmaXJlIGhhcyBubyByaWdodCB0byBhIHBsYWNlIGluIHRoZSBzZW5hdGUtaG91c2UuIDwvdHJhbnNsYXRpb24+"
translation['6.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGF0IHRoaXMgbW9tZW50IGhlIGlzIGV4Y2VlZGluZ2x5IGluIGxvdmUgd2l0aAogICAgICAgICAgICAgICAgICAgIFRyZWJlbGxpdXMuIEhlIGhhdGVkIGhpbSBzb21lIHRpbWUgYWdvLCB3aGVuIGhlIHdhcyBvcHBvc2luZyBhbiBhYm9saXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBkZWJ0czsgYnV0IG5vdyBoZSBkZWxpZ2h0cyBpbiBoaW0sIGV2ZXIgc2luY2UgaGUgaGFzIHNlZW4gdGhhdCBUcmViZWxsaXVzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBjYW4gbm90IGNvbnRpbnVlIGluIHNhZmV0eSB3aXRob3V0IGFuIGFib2xpdGlvbiBvZiBkZWJ0cy4gRm9yIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYXZlIGhlYXJkLCBPIFJvbWFucywgd2hhdCBpbmRlZWQgeW91IG1heSBwb3NzaWJseSBoYXZlIHNlZW4sIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMgYW5kIGNyZWRpdG9ycyBvZiBMdWNpdXMgVHJlYmVsbGl1cyBtZWV0IGV2ZXJ5IGRheS4gT2ggY29uZmlkZW5jZSEgZm9yIEkKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIHRoYXQgVHJlYmVsbGl1cyBoYXMgdGFrZW4gdGhpcyBzdXJuYW1lOyB3aGF0IGNhbiBiZSBncmVhdGVyIGNvbmZpZGVuY2UKICAgICAgICAgICAgICAgICAgICB0aGFuIGRlZnJhdWRpbmcgb25lJ3MgY3JlZGl0b3JzPyB0aGFuIGZseWluZyBmcm9tIG9uZSdzIGhvdXNlPyB0aGFuLCBiZWNhdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgb25lJ3MgZGVidHMsIGJlaW5nIGZvcmNlZCB0byBnbyB0byB3YXI/IFdoYXQgaGFzIGJlY29tZSBvZiB0aGUgYXBwbGF1c2VzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgcmVjZWl2ZWQgb24gdGhlIG9jY2FzaW9uIG9mIENhZXNhcidzIHRyaXVtcGgsIGFuZCBvZnRlbiBhdCB0aGUgZ2FtZXM/IFdoZXJlCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIGFlZGlsZXNoaXAgdGhhdCB3YXMgY29uZmVycmVkIG9uIGhpbSBieSB0aGUgemVhbG91cyBlZmZvcnRzIG9mIGFsbCBnb29kCiAgICAgICAgICAgICAgICAgICAgbWVuPyB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IG5vdyB0aGluayB0aGF0IGhlIGFjdGVkIHZpcnR1b3VzbHkgYnkgYWNjaWRlbnQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqICogKiAqICogKiIgLz4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['6.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIEkgcmV0dXJuIHRvIHlvdXIgbG92ZSBhbmQgZXNwZWNpYWwgZGVsaWdodCwgTHVjaXVzIEFudG9uaXVzLCB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgeW91IGFsbCB0byBzd2VhciBhbGxlZ2lhbmNlIHRvIGhpbS4gRG8geW91IGRlbnkgaXQ/IGlzIHRoZXJlIGFueSBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB5b3Ugd2hvIGRvZXMgbm90IGJlbG9uZyB0byBhIHRyaWJlPyBDZXJ0YWlubHkgbm90LiBCdXQgdGhpcnR5LWZpdmUgdHJpYmVzIGhhdmUKICAgICAgICAgICAgICAgICAgICBhZG9wdGVkIGhpbSBmb3IgdGhlaXIgcGF0cm9uLiBEbyB5b3UgYWdhaW4gY3J5IG91dCBhZ2FpbnN0IG15IHN0YXRlbWVudD8gTG9vayBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgZ2lsdCBzdGF0dWUgb2YgaGltIG9uIHRoZSBsZWZ0OiB3aGF0IGlzIHRoZSBpbnNjcmlwdGlvbiB1cG9uIGl0PwogICAgICAgICAgICAgICAgICAgIOKAnFRoZSB0aGlydHktZml2ZSB0cmliZXMgdG8gdGhlaXIgcGF0cm9uLuKAnSBJcyB0aGVuIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIHRoZSBwYXRyb24gb2YgdGhlIFJvbWFuIHBlb3BsZT8gUGxhZ3VlIHRha2UgaGltISBGb3IgSSBmdWxseSBhc3NlbnQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIG91dGNyeS4gSSB3b24ndCBzcGVhayBvZiB0aGlzIGJhbmRpdCB3aG9tIG5vIG9uZSB3b3VsZCBjaG9vc2UgdG8gaGF2ZSBmb3IgYQogICAgICAgICAgICAgICAgICAgIGNsaWVudDsgYnV0IHdhcyB0aGVyZSBldmVyIGEgbWFuIHBvc3Nlc3NlZCBvZiBzdWNoIGluZmx1ZW5jZSwgb3IgaWxsdXN0cmlvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgbWlnaHR5IGRlZWRzLCBhcyB0byBkYXJlIHRvIGNhbGwgaGltc2VsZiB0aGUgcGF0cm9uIG9mIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnF1ZXJvciBhbmQgbWFzdGVyIG9mIGFsbCBuYXRpb25zPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IFdlCiAgICAgICAgICAgICAgICAgICAgc2VlIGluIHRoZSBmb3J1bSBhIHN0YXR1ZSBvZiBMdWNpdXMgQW50b25pdXM7IGp1c3QgYXMgd2Ugc2VlIG9uZSBvZiBRdWludHVzCiAgICAgICAgICAgICAgICAgICAgVHJlbXVsdXMsIHdobyBjb25xdWVyZWQgdGhlIEhlcm5pY2ksIGJlZm9yZSB0aGUgdGVtcGxlIG9mIENhc3Rvci4gT2ggdGhlCiAgICAgICAgICAgICAgICAgICAgaW5jcmVkaWJsZSBpbXB1ZGVuY2Ugb2YgdGhlIG1hbiEgSGFzIGhlIGFzc3VtZWQgYWxsIHRoaXMgY3JlZGl0IHRvIGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBhcyBhIG1pcm1pbGxvIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXlsYXNhIiBrZXk9InBlcnNldXMsTXlsYXNhIj5NeWxhc2E8L3BsYWNlTmFtZT4gaGUKICAgICAgICAgICAgICAgICAgICBzbGV3IHRoZSBUaHJhY2lhbiwgaGlzIGZyaWVuZD8gSG93IHNob3VsZCB3ZSBiZSBhYmxlIHRvIGVuZHVyZSBoaW0sIGlmIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGZvdWdodCBpbiB0aGlzIGZvcnVtIGJlZm9yZSB0aGUgZXllcyBvZiB5b3UgYWxsPyBCdXQsIGhvd2V2ZXIsIHRoaXMgaXMgYnV0IG9uZQogICAgICAgICAgICAgICAgICAgIHN0YXR1ZS4gSGUgaGFzIGFub3RoZXIgZXJlY3RlZCBieSB0aGUgUm9tYW4ga25pZ2h0cyB3aG8gcmVjZWl2ZWQgaG9yc2VzIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+QWZ0ZXIgdGhlIHllYXIgQi5DLiA8ZGF0ZSBhdXRobmFtZT0iLTQwMyIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4sIHRoZXJlIHdlcmUgdHdvIGNsYXNzZXMgb2YgUm9tYW4ga25pZ2h0czsgb25lIG9mIHdoaWNoIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGEgaG9yc2UgZnJvbSB0aGUgc3RhdGUsIGFuZCB3ZXJlIGluY2x1ZGVkIGluIHRoZSBlaWdodGVlbiBjZW50dXJpZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZTsgdGhlIG90aGVyIGNsYXNzLCBmaXJzdCBtZW50aW9uZWQgYnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gNS43IiB2YWxpZD0ieWVzIj5MaXZ5ICh2LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNyk8L2JpYmw+IGluIHRoZSBhY2NvdW50IG9mIHRoZSBzaWVnZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlaWkiIGtleT0icGVyc2V1cyxWZWlpIj5WZWlpPC9wbGFjZU5hbWU+LCBzZXJ2ZWQgd2l0aCB0aGVpciBvd24gaG9yc2VzLCBhbmQgaW5zdGVhZCBvZiBoYXZpbmcgYQogICAgICAgICAgICAgICAgICAgICAgICBob3JzZSBmb3VuZCB0aGVtLCByZWNlaXZlZCBhIGNlcnRhaW4gcGF5ICh0aHJlZSB0aW1lcyB0aGF0IG9mIHRoZSBpbmZhbnRyeSksCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgZWlnaHRlZW4gY2VudHVyaWVzIG9mIHNlcnZpY2UuIFRoZSBvcmlnaW5hbAogICAgICAgICAgICAgICAgICAgICAgICBrbmlnaHRzLCB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gdGhlc2UgbGF0dGVyLCBhcmUgb2Z0ZW4gY2FsbGVkIDxmb3JlaWduIGxhbmc9ImxhIj5lcXVpdGVzIGVxdW8gcHVibGljbzwvZm9yZWlnbj4sIHNvbWV0aW1lcyBhbHNvIDxmb3JlaWduIGxhbmc9ImxhIj5mbGV4dW1pbmVzPC9mb3JlaWduPiBvciA8Zm9yZWlnbiBsYW5nPSJsYSI+dHJvc3N1bGk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBWaWRlIFNtaXRoLCBEaWN0LiBBbnQuIHAuIDM5NC05Niwgdi4gPGZvcmVpZ24gbGFuZz0ibGEiPkVxdWl0ZXM8L2ZvcmVpZ24+Ljwvbm90ZT4gYW5kIHRoZXkgdG9vIGluc2NyaWJlIG9uIHRoYXQsIOKAnFRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcGF0cm9uLuKAnSBXaG8gd2FzIGV2ZXIgYmVmb3JlIGFkb3B0ZWQgYnkgdGhhdCBvcmRlciBhcyBpdHMKICAgICAgICAgICAgICAgICAgICBwYXRyb24/IElmIGl0IGV2ZXIgYWRvcHRlZCBhbnkgb25lIGFzIHN1Y2gsIGl0IG91Z2h0IHRvIGhhdmUgYWRvcHRlZCBtZS4gV2hhdAogICAgICAgICAgICAgICAgICAgIGNlbnNvciB3YXMgZXZlciBzbyBob25vcmVkPyB3aGF0IDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+PwogICAgICAgICAgICAgICAgICAgIOKAnEJ1dCBoZSBkaXN0cmlidXRlZCBsYW5kIGFtb25nIHRoZW0u4oCdIFNoYW1lIG9uIHRoZWlyIHNvcmRpZAogICAgICAgICAgICAgICAgICAgIG5hdHVyZXMgZm9yIGFjY2VwdGluZyBpdCEgc2hhbWUgb24gaGlzIGRpc2hvbmVzdHkgZm9yIGdpdmluZyBpdCEgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2UKICAgICAgICAgICAgICAgICAgICBzZWUgaW4gdGhlIGZvcnVtIGEgc3RhdHVlIG9mIEx1Y2l1cyBBbnRvbml1czsganVzdCBhcyB3ZSBzZWUgb25lIG9mIFF1aW50dXMKICAgICAgICAgICAgICAgICAgICBUcmVtdWx1cywgd2hvIGNvbnF1ZXJlZCB0aGUgSGVybmljaSwgYmVmb3JlIHRoZSB0ZW1wbGUgb2YgQ2FzdG9yLiBPaCB0aGUKICAgICAgICAgICAgICAgICAgICBpbmNyZWRpYmxlIGltcHVkZW5jZSBvZiB0aGUgbWFuISBIYXMgaGUgYXNzdW1lZCBhbGwgdGhpcyBjcmVkaXQgdG8gaGltc2VsZiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGFzIGEgbWlybWlsbG8gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNeWxhc2EiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE15bGFzYSI+TXlsYXNhPC9wbGFjZU5hbWU+IGhlCiAgICAgICAgICAgICAgICAgICAgc2xldyB0aGUgVGhyYWNpYW4sIGhpcyBmcmllbmQ/IEhvdyBzaG91bGQgd2UgYmUgYWJsZSB0byBlbmR1cmUgaGltLCBpZiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBmb3VnaHQgaW4gdGhpcyBmb3J1bSBiZWZvcmUgdGhlIGV5ZXMgb2YgeW91IGFsbD8gQnV0LCBob3dldmVyLCB0aGlzIGlzIGJ1dCBvbmUKICAgICAgICAgICAgICAgICAgICBzdGF0dWUuIEhlIGhhcyBhbm90aGVyIGVyZWN0ZWQgYnkgdGhlIFJvbWFuIGtuaWdodHMgd2hvIHJlY2VpdmVkIGhvcnNlcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+QWZ0ZXIgdGhlIHllYXIgQi5DLiA8ZGF0ZSBhdXRobmFtZT0iLTQwMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQwMyI+NDAzPC9kYXRlPiwgdGhlcmUgd2VyZSB0d28gY2xhc3NlcyBvZiBSb21hbiBrbmlnaHRzOyBvbmUgb2Ygd2hpY2ggcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYSBob3JzZSBmcm9tIHRoZSBzdGF0ZSwgYW5kIHdlcmUgaW5jbHVkZWQgaW4gdGhlIGVpZ2h0ZWVuIGNlbnR1cmllcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlOyB0aGUgb3RoZXIgY2xhc3MsIGZpcnN0IG1lbnRpb25lZCBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDUuNyIgdmFsaWQ9InllcyI+TGl2eSAodi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcpPC9iaWJsPiBpbiB0aGUgYWNjb3VudCBvZiB0aGUgc2llZ2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxWZWlpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZWlpIj5WZWlpPC9wbGFjZU5hbWU+LCBzZXJ2ZWQgd2l0aCB0aGVpciBvd24gaG9yc2VzLCBhbmQgaW5zdGVhZCBvZiBoYXZpbmcgYQogICAgICAgICAgICAgICAgICAgICAgICBob3JzZSBmb3VuZCB0aGVtLCByZWNlaXZlZCBhIGNlcnRhaW4gcGF5ICh0aHJlZSB0aW1lcyB0aGF0IG9mIHRoZSBpbmZhbnRyeSksCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgZWlnaHRlZW4gY2VudHVyaWVzIG9mIHNlcnZpY2UuIFRoZSBvcmlnaW5hbAogICAgICAgICAgICAgICAgICAgICAgICBrbmlnaHRzLCB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gdGhlc2UgbGF0dGVyLCBhcmUgb2Z0ZW4gY2FsbGVkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmVxdWl0ZXMgZXF1byBwdWJsaWNvPC9mb3JlaWduPiwgc29tZXRpbWVzIGFsc28gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZmxleHVtaW5lczwvZm9yZWlnbj4gb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dHJvc3N1bGk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBWaWRlIFNtaXRoLCBEaWN0LiBBbnQuIHAuIDM5NC05Niwgdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RXF1aXRlczwvZm9yZWlnbj4uPC9ub3RlPiBhbmQgdGhleSB0b28gaW5zY3JpYmUgb24gdGhhdCwg4oCcVG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBwYXRyb24u4oCdIFdobyB3YXMgZXZlciBiZWZvcmUgYWRvcHRlZCBieSB0aGF0IG9yZGVyIGFzIGl0cwogICAgICAgICAgICAgICAgICAgIHBhdHJvbj8gSWYgaXQgZXZlciBhZG9wdGVkIGFueSBvbmUgYXMgc3VjaCwgaXQgb3VnaHQgdG8gaGF2ZSBhZG9wdGVkIG1lLiBXaGF0CiAgICAgICAgICAgICAgICAgICAgY2Vuc29yIHdhcyBldmVyIHNvIGhvbm9yZWQ/IHdoYXQgPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4sIHRoZXJlIHdlcmUgdHdvIGNsYXNzZXMgb2YgUm9tYW4ga25pZ2h0czsgb25lIG9mIHdoaWNoIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGEgaG9yc2UgZnJvbSB0aGUgc3RhdGUsIGFuZCB3ZXJlIGluY2x1ZGVkIGluIHRoZSBlaWdodGVlbiBjZW50dXJpZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZTsgdGhlIG90aGVyIGNsYXNzLCBmaXJzdCBtZW50aW9uZWQgYnkgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiA1LjciIHZhbGlkPSJ5ZXMiPkxpdnkgKHYuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3KTwvYmlibD4gaW4gdGhlIGFjY291bnQgb2YgdGhlIHNpZWdlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVmVpaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVmVpaSI+VmVpaTwvcGxhY2VOYW1lPiwgc2VydmVkIHdpdGggdGhlaXIgb3duIGhvcnNlcywgYW5kIGluc3RlYWQgb2YgaGF2aW5nIGEKICAgICAgICAgICAgICAgICAgICAgICAgaG9yc2UgZm91bmQgdGhlbSwgcmVjZWl2ZWQgYSBjZXJ0YWluIHBheSAodGhyZWUgdGltZXMgdGhhdCBvZiB0aGUgaW5mYW50cnkpLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgd2VyZSBub3QgaW5jbHVkZWQgaW4gdGhlIGVpZ2h0ZWVuIGNlbnR1cmllcyBvZiBzZXJ2aWNlLiBUaGUgb3JpZ2luYWwKICAgICAgICAgICAgICAgICAgICAgICAga25pZ2h0cywgdG8gZGlzdGluZ3Vpc2ggdGhlbSBmcm9tIHRoZXNlIGxhdHRlciwgYXJlIG9mdGVuIGNhbGxlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5lcXVpdGVzIGVxdW8gcHVibGljbzwvZm9yZWlnbj4sIHNvbWV0aW1lcyBhbHNvIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZsZXh1bWluZXM8L2ZvcmVpZ24+IG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRyb3NzdWxpPC9mb3JlaWduPi4KICAgICAgICAgICAgICAgICAgICAgICAgVmlkZSBTbWl0aCwgRGljdC4gQW50LiBwLiAzOTQtOTYsIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkVxdWl0ZXM8L2ZvcmVpZ24+Ljxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4/CiAgICAgICAgICAgICAgICAgICAg4oCcQnV0IGhlIGRpc3RyaWJ1dGVkIGxhbmQgYW1vbmcgdGhlbS7igJ0gU2hhbWUgb24gdGhlaXIgc29yZGlkCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlcyBmb3IgYWNjZXB0aW5nIGl0ISBzaGFtZSBvbiBoaXMgZGlzaG9uZXN0eSBmb3IgZ2l2aW5nIGl0ISA8cCBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmVvdmVyLCB0aGUgbWlsaXRhcnkgdHJpYnVuZXMgd2hvIHdlcmUgaW4gdGhlIGFybXkgb2YgQ2Flc2FyIGhhdmUgZXJlY3RlZCBoaW0gYQogICAgICAgICAgICAgICAgICAgIHN0YXR1ZS4gPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IioqKiIgLz4gV2hhdCBvcmRlciBpcyB0aGF0PyBUaGVyZSBoYXZlIGJlZW4gcGxlbnR5IG9mIHRyaWJ1bmVzCiAgICAgICAgICAgICAgICAgICAgaW4gb3VyIG51bWVyb3VzIGxlZ2lvbnMgaW4gc28gbWFueSB5ZWFycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIEFtb25nIHRoZW0gaGUgaGFzIGRpc3RyaWJ1dGVkIHRoZSBsYW5kcyBvZiBTZW11cml1bS4gVGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2OTY0IiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiB3YXMgYWxsIHRoYXQgd2FzIGxlZnQsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBmaXJzdCBmbGVkIHdpdGggaGlzIGJyb3RoZXIuIEJ1dCB0aGlzIGFsbG90bWVudCBvZiBsYW5kcyB3YXMgcHV0IGFuIGVuZAogICAgICAgICAgICAgICAgICAgIHRvIGEgbGl0dGxlIHdoaWxlIGFnbywgTyBSb21hbnMsIGJ5IHRoZSBkZWNsYXJhdGlvbiBvZiBoaXMgb3BpbmlvbiBieSBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4gYW5kIGEgbW9zdCBhZG1pcmFibGUgc2VuYXRvci4gRm9yIHdlIGFsbCBhZ3JlZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpbSBhbmQgYW5udWxsZWQgdGhlIGFjdHMgb2YgdGhlIHNlcHRlbXZpcnMuIFNvIGFsbCB0aGUga2luZG5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTnVjdWxhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5IZSBoYWQgYmVlbiBvbmUgb2YgdGhlIHNlcHRlbXZpcnMgYXBwb2ludGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNpZGUgb3ZlciB0aGUgZGlzdHJpYnV0aW9uIG9mIHRoZSBsYW5kcy48L25vdGU+IGdvZXMgZm9yIG5vdGhpbmc7IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBwYXRyb24gQW50b25pdXMgaXMgYXQgYSBkaXNjb3VudC4gRm9yIHRob3NlIHdobyBoYWQgdGFrZW4gcG9zc2Vzc2lvbiB3aWxsIGRlcGFydAogICAgICAgICAgICAgICAgICAgIHdpdGggbW9yZSBlcXVhbmltaXR5LiBUaGV5IGhhZCBub3QgYmVlbiBhdCBhbnkgZXhwZW5zZTsgdGhleSBoYWQgbm90IHlldAogICAgICAgICAgICAgICAgICAgIGZ1cm5pc2hlZCBvciBzdG9ja2VkIHRoZWlyIGRvbWFpbnMsIHBhcnRseSBiZWNhdXNlIHRoZXkgZGlkIG5vdCBmZWVsIHN1cmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciB0aXRsZSwgYW5kIHBhcnRseSBiZWNhdXNlIHRoZXkgaGFkIG5vIG1vbmV5LiA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IioqKiIgLz4gV2hhdCBvcmRlciBpcyB0aGF0PyBUaGVyZSBoYXZlIGJlZW4gcGxlbnR5IG9mIHRyaWJ1bmVzCiAgICAgICAgICAgICAgICAgICAgaW4gb3VyIG51bWVyb3VzIGxlZ2lvbnMgaW4gc28gbWFueSB5ZWFycy4gPC90cmFuc2xhdGlvbj4="
translation['6.5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBbW9uZyB0aGVtIGhlIGhhcyBkaXN0cmlidXRlZCB0aGUgbGFuZHMgb2YgU2VtdXJpdW0uIFRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiB3YXMgYWxsIHRoYXQgd2FzIGxlZnQsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBmaXJzdCBmbGVkIHdpdGggaGlzIGJyb3RoZXIuIEJ1dCB0aGlzIGFsbG90bWVudCBvZiBsYW5kcyB3YXMgcHV0IGFuIGVuZAogICAgICAgICAgICAgICAgICAgIHRvIGEgbGl0dGxlIHdoaWxlIGFnbywgTyBSb21hbnMsIGJ5IHRoZSBkZWNsYXJhdGlvbiBvZiBoaXMgb3BpbmlvbiBieSBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4gYW5kIGEgbW9zdCBhZG1pcmFibGUgc2VuYXRvci4gRm9yIHdlIGFsbCBhZ3JlZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpbSBhbmQgYW5udWxsZWQgdGhlIGFjdHMgb2YgdGhlIHNlcHRlbXZpcnMuIFNvIGFsbCB0aGUga2luZG5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTnVjdWxhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkhlIGhhZCBiZWVuIG9uZSBvZiB0aGUgc2VwdGVtdmlycyBhcHBvaW50ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZSBvdmVyIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIGxhbmRzLjwvbm90ZT4gZ29lcyBmb3Igbm90aGluZzsgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHBhdHJvbiBBbnRvbml1cyBpcyBhdCBhIGRpc2NvdW50LiBGb3IgdGhvc2Ugd2hvIGhhZCB0YWtlbiBwb3NzZXNzaW9uIHdpbGwgZGVwYXJ0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBtb3JlIGVxdWFuaW1pdHkuIFRoZXkgaGFkIG5vdCBiZWVuIGF0IGFueSBleHBlbnNlOyB0aGV5IGhhZCBub3QgeWV0CiAgICAgICAgICAgICAgICAgICAgZnVybmlzaGVkIG9yIHN0b2NrZWQgdGhlaXIgZG9tYWlucywgcGFydGx5IGJlY2F1c2UgdGhleSBkaWQgbm90IGZlZWwgc3VyZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHRpdGxlLCBhbmQgcGFydGx5IGJlY2F1c2UgdGhleSBoYWQgbm8gbW9uZXkuIDwvdHJhbnNsYXRpb24+"
translation['6.5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGFzIGZvciB0aGF0IHNwbGVuZGlkIHN0YXR1ZSwgY29uY2VybmluZyB3aGljaCwgaWYgdGhlIHRpbWVzIHdlcmUgYmV0dGVyLCBJCiAgICAgICAgICAgICAgICAgICAgY291bGQgbm90IHNwZWFrIHdpdGhvdXQgbGF1Z2hpbmcsIOKAnFRvIEx1Y2l1cy4gQW50b25pdXMsIHBhdHJvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtaWRkbGUgb2YgSmFudXMu4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkphbnVzIHdhcyB0aGUgbmFtZSBvZiBhIHN0cmVldAogICAgICAgICAgICAgICAgICAgICAgICBuZWFyIHRoZSB0ZW1wbGUgb2YgSmFudXMsIGVzcGVjaWFsbHkgZnJlcXVlbnRlZCBieSBiYW5rZXJzIGFuZCB1c3VyZXJzLiBJdAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgZGl2aWRlZCBpbnRvIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnN1bW11czwvZm9yZWlnbj4sIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm1lZGl1czwvZm9yZWlnbj4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltdXM8L2ZvcmVpZ24+LiBIb3JhY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNheXM64oCUPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj7igJxIYWVjIEphbnVzIHN1bW11cyBhYiBpbW8gPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5FZG9jZXQgPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IiogKiAqIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb3N0cXVhbSBvbW5pcyByZXMgbWVhIEphbnVtIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWQgbWVkaXVtIGZyYWN0YSBlc3Qu4oCdPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjwvbm90ZT4gSXMgaXQgc28/IElzIHRoZSBtaWRkbGUgb2YgSmFudXMgYSBjbGllbnQgb2YgTHVjaXVzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXM/IFdobyBldmVyIHdhcyBmb3VuZCBpbiB0aGF0IEphbnVzIHdobyB3b3VsZCBoYXZlIGxlbnQgTHVjaXVzIEFudG9uaXVzIGEKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBzZXN0ZXJjZXM/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5KYW51cyB3YXMgdGhlIG5hbWUgb2YgYSBzdHJlZXQKICAgICAgICAgICAgICAgICAgICAgICAgbmVhciB0aGUgdGVtcGxlIG9mIEphbnVzLCBlc3BlY2lhbGx5IGZyZXF1ZW50ZWQgYnkgYmFua2VycyBhbmQgdXN1cmVycy4gSXQKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGRpdmlkZWQgaW50byA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zdW1tdXM8L2ZvcmVpZ24+LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5tZWRpdXM8L2ZvcmVpZ24+IGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXVzPC9mb3JlaWduPi4gSG9yYWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzOuKAlDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcSGFlYyBKYW51cyBzdW1tdXMgYWIgaW1vIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWRvY2V0IDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqICogKiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9zdHF1YW0gb21uaXMgcmVzIG1lYSBKYW51bSA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFkIG1lZGl1bSBmcmFjdGEgZXN0LuKAnTwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48L25vdGU+IElzIGl0IHNvPyBJcyB0aGUgbWlkZGxlIG9mIEphbnVzIGEgY2xpZW50IG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzPyBXaG8gZXZlciB3YXMgZm91bmQgaW4gdGhhdCBKYW51cyB3aG8gd291bGQgaGF2ZSBsZW50IEx1Y2l1cyBBbnRvbml1cyBhCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgc2VzdGVyY2VzPyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zdW1tdXM8L2ZvcmVpZ24+LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5tZWRpdXM8L2ZvcmVpZ24+IGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXVzPC9mb3JlaWduPi4gSG9yYWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzOuKAlDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcSGFlYyBKYW51cyBzdW1tdXMgYWIgaW1vIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RWRvY2V0IDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqICogKiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9zdHF1YW0gb21uaXMgcmVzIG1lYSBKYW51bSA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFkIG1lZGl1bSBmcmFjdGEgZXN0LuKAnTwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48bCBjbGFzcz0idHJhbnNsYXRpb24iPuKAnEhhZWMgSmFudXMgc3VtbXVzIGFiIGltbyA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkVkb2NldCA8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKiAqICoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKiAqICoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlBvc3RxdWFtIG9tbmlzIHJlcyBtZWEgSmFudW0gPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BZCBtZWRpdW0gZnJhY3RhIGVzdC7igJ08L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SG93ZXZlciwgd2UgaGF2ZSBiZWVuIHNwZW5kaW5nIHRvbyBtdWNoIHRpbWUgaW4gdHJpZmxlcy4gTGV0IHVzIHJldHVybiB0byBvdXIKICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IGFuZCB0byB0aGUgd2FyLiBBbHRob3VnaCBpdCB3YXMgbm90IHdob2xseSBmb3JlaWduIHRvIHRoZSBzdWJqZWN0IGZvcgogICAgICAgICAgICAgICAgICAgIHNvbWUgY2hhcmFjdGVycyB0byBiZSB0aG9yb3VnaGx5IGFwcHJlY2lhdGVkIGJ5IHlvdSwgaW4gb3JkZXIgdGhhdCB5b3UgbWlnaHQgaW4KICAgICAgICAgICAgICAgICAgICBzaWxlbmNlIHRoaW5rIG92ZXIgd2hvIHRoZXkgd2VyZSBhZ2FpbnN0IHdob20geW91IHdlcmUgdG8gd2FnZSB3YXIuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IEkgZXhob3J0IHlvdSwgTyBSb21hbnMsIHRob3VnaCBwZXJoYXBzIG90aGVyIG1lYXN1cmVzIG1pZ2h0IGhhdmUgYmVlbiB3aXNlciwKICAgICAgICAgICAgICAgICAgICBzdGlsbCBub3cgdG8gd2FpdCB3aXRoIGNhbG1uZXNzIGZvciB0aGUgcmV0dXJuIG9mIHRoZSBhbWJhc3NhZG9ycy4gUHJvbXB0bmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBoYXMgYmVlbiB0YWtlbiBmcm9tIG91ciBzaWRlOyBidXQgc3RpbGwgc29tZSBnb29kIGhhcyBhY2NydWVkIHRvIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aGVuIHRoZSBhbWJhc3NhZG9ycyBoYXZlIHJlcG9ydGVkCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGV5IGNlcnRhaW5seSB3aWxsIHJlcG9ydCwgdGhhdCBBbnRvbml1cyB3aWxsIG5vdCBzdWJtaXQgdG8geW91IG5vciB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUsIHdobyB0aGVuIHdpbGwgYmUgc28gd29ydGhsZXNzIGEgY2l0aXplbiBhcyB0byB0aGluayBoaW0gZGVzZXJ2aW5nIG9mCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWNjb3VudGVkIGEgY2l0aXplbj8gRm9yIGF0IHByZXNlbnQgdGhlcmUgYXJlIG1lbiwgZmV3IGluZGVlZCwgYnV0IHN0aWxsCiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIHRoZXJlIG91Z2h0IHRvIGJlLCBvciB0aGFuIHRoZSByZXB1YmxpYyBkZXNlcnZlcyB0aGF0IHRoZXJlIHNob3VsZCBiZSwKICAgICAgICAgICAgICAgICAgICB3aG8gc3BlYWsgaW4gdGhpcyB3YXks4oCU4oCcU2hhbGwgd2Ugbm90IGV2ZW4gd2FpdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mIHRoZSBhbWJhc3NhZG9ycz/igJ0gQ2VydGFpbmx5IHRoZSByZXB1YmxpYyBpdHNlbGYgd2lsbCBmb3JjZQogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gYWJhbmRvbiB0aGF0IGV4cHJlc3Npb24gYW5kIHRoYXQgcHJldGVuc2Ugb2YgY2xlbWVuY3kuIE9uIHdoaWNoIGFjY291bnQsCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZmVzcyB0aGUgdHJ1dGggdG8geW91LCBPIFJvbWFucywgSSBoYXZlIGxlc3Mgc3RyaXZlbiB0b2RheSwgYW5kIGxhYm9yZWQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGxlc3MgdG9kYXksIHRvIGluZHVjZSB0aGUgc2VuYXRlIHRvIGFncmVlIHdpdGggbWUgaW4gZGVjcmVlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGV4aXN0ZW5jZSBvZiBhIHNlZGl0aW91cyB3YXIgYW5kIG9yZGVyaW5nIHRoZSBhcHBhcmVsIG9mIHdhciB0byBiZSBhc3N1bWVkLiBJCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIGhhdmluZyBteSBzZW50aW1lbnRzIGFwcGxhdWRlZCBieSBldmVyeSBvbmUgaW4gdHdlbnR5IGRheSdzIHRpbWUsIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGl0IGJsYW1lZCB0b2RheSBieSBhIGZldy4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBPCiAgICAgICAgICAgICAgICAgICAgUm9tYW5zLCB3YWl0IG5vdyBmb3IgdGhlIHJldHVybiBvZiB0aGUgYW1iYXNzYWRvcnMgYW5kIGRldm91ciB5b3VyIGFubm95YW5jZSBmb3IKICAgICAgICAgICAgICAgICAgICBhIGZldyBkYXlzLiBBbmQgd2hlbiB0aGV5IGRvIHJldHVybiBpZiB0aGV5IGJyaW5nIGJhY2sgcGVhY2UsIGJlbGlldmUgbWUgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGRlc2lyb3VzIHRoYXQgdGhleSBzaG91bGQgaWYgdGhleSBicmluZyBiYWNrIHdhciwgdGhlbiBhbGxvdyBtZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcmFpc2Ugb2YgZm9yZXNpZ2h0LiBPdWdodCBJIG5vdCB0byBiZSBwcm92aWRlbnQgZm9yIHRoZSB3ZWxmYXJlIG9mIG15CiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zPyBPdWdodCBJIG5vdCBkYXkgYW5kIG5pZ2h0IHRvIHRoaW5rIG9mIHlvdXIgZnJlZWRvbSBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5IG9mIHRoZSByZXB1YmxpYz8gRm9yIHdoYXQgZG8gSSBub3Qgb3dlIHRvIHlvdSwgTyBSb21hbnMsIHNpbmNlIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIGZvciBhbGwgdGhlIGhvbm9ycyBvZiB0aGUgc3RhdGUgYSBtYW4gd2hvIGlzIGhpcyBvd24gZmF0aGVyIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3Qgbm9ibHkgYm9ybiBtZW4gaW4gdGhlIHJlcHVibGljPyBBbSBJIHVuZ3JhdGVmdWw/IFdobyBpcyBsZXNzIHNvPyBJLCB3aG8sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgSSBoYWQgb2J0YWluZWQgdGhvc2UgaG9ub3JzLCBoYXZlIGNvbnN0YW50bHkgbGFib3JlZCBpbiB0aGUgZm9ydW0gd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGV4ZXJ0aW9ucyBhcyBJIHVzZWQgd2hpbGUgc3RyaXZpbmcgZm9yIHRoZW0uIEFtIEkgaW5leHBlcmllbmNlZCBpbiBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGFmZmFpcnM/IFdobyBoYXMgaGFkIG1vcmUgcHJhY3RpY2UgdGhhbiBJLCB3aG8gaGF2ZSBub3cgZm9yIHR3ZW50eSB5ZWFycyBiZWVuCiAgICAgICAgICAgICAgICAgICAgd2FnaW5nIHdhciBhZ2FpbnN0IGltcGlvdXMgY2l0aXplbnM/IDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoZW4gdGhlIGFtYmFzc2Fkb3JzIGhhdmUgcmVwb3J0ZWQKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZXkgY2VydGFpbmx5IHdpbGwgcmVwb3J0LCB0aGF0IEFudG9uaXVzIHdpbGwgbm90IHN1Ym1pdCB0byB5b3Ugbm9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSwgd2hvIHRoZW4gd2lsbCBiZSBzbyB3b3J0aGxlc3MgYSBjaXRpemVuIGFzIHRvIHRoaW5rIGhpbSBkZXNlcnZpbmcgb2YKICAgICAgICAgICAgICAgICAgICBiZWluZyBhY2NvdW50ZWQgYSBjaXRpemVuPyBGb3IgYXQgcHJlc2VudCB0aGVyZSBhcmUgbWVuLCBmZXcgaW5kZWVkLCBidXQgc3RpbGwKICAgICAgICAgICAgICAgICAgICBtb3JlIHRoYW4gdGhlcmUgb3VnaHQgdG8gYmUsIG9yIHRoYW4gdGhlIHJlcHVibGljIGRlc2VydmVzIHRoYXQgdGhlcmUgc2hvdWxkIGJlLAogICAgICAgICAgICAgICAgICAgIHdobyBzcGVhayBpbiB0aGlzIHdheSzigJTigJxTaGFsbCB3ZSBub3QgZXZlbiB3YWl0IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YgdGhlIGFtYmFzc2Fkb3JzP+KAnSBDZXJ0YWlubHkgdGhlIHJlcHVibGljIGl0c2VsZiB3aWxsIGZvcmNlCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBhYmFuZG9uIHRoYXQgZXhwcmVzc2lvbiBhbmQgdGhhdCBwcmV0ZW5zZSBvZiBjbGVtZW5jeS4gT24gd2hpY2ggYWNjb3VudCwKICAgICAgICAgICAgICAgICAgICB0byBjb25mZXNzIHRoZSB0cnV0aCB0byB5b3UsIE8gUm9tYW5zLCBJIGhhdmUgbGVzcyBzdHJpdmVuIHRvZGF5LCBhbmQgbGFib3JlZAogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgbGVzcyB0b2RheSwgdG8gaW5kdWNlIHRoZSBzZW5hdGUgdG8gYWdyZWUgd2l0aCBtZSBpbiBkZWNyZWVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlIG9mIGEgc2VkaXRpb3VzIHdhciBhbmQgb3JkZXJpbmcgdGhlIGFwcGFyZWwgb2Ygd2FyIHRvIGJlIGFzc3VtZWQuIEkKICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgaGF2aW5nIG15IHNlbnRpbWVudHMgYXBwbGF1ZGVkIGJ5IGV2ZXJ5IG9uZSBpbiB0d2VudHkgZGF5J3MgdGltZSwgdG8KICAgICAgICAgICAgICAgICAgICBoYXZpbmcgaXQgYmxhbWVkIHRvZGF5IGJ5IGEgZmV3LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBPCiAgICAgICAgICAgICAgICAgICAgUm9tYW5zLCB3YWl0IG5vdyBmb3IgdGhlIHJldHVybiBvZiB0aGUgYW1iYXNzYWRvcnMgYW5kIGRldm91ciB5b3VyIGFubm95YW5jZSBmb3IKICAgICAgICAgICAgICAgICAgICBhIGZldyBkYXlzLiBBbmQgd2hlbiB0aGV5IGRvIHJldHVybiBpZiB0aGV5IGJyaW5nIGJhY2sgcGVhY2UsIGJlbGlldmUgbWUgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGRlc2lyb3VzIHRoYXQgdGhleSBzaG91bGQgaWYgdGhleSBicmluZyBiYWNrIHdhciwgdGhlbiBhbGxvdyBtZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcmFpc2Ugb2YgZm9yZXNpZ2h0LiBPdWdodCBJIG5vdCB0byBiZSBwcm92aWRlbnQgZm9yIHRoZSB3ZWxmYXJlIG9mIG15CiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zPyBPdWdodCBJIG5vdCBkYXkgYW5kIG5pZ2h0IHRvIHRoaW5rIG9mIHlvdXIgZnJlZWRvbSBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FmZXR5IG9mIHRoZSByZXB1YmxpYz8gRm9yIHdoYXQgZG8gSSBub3Qgb3dlIHRvIHlvdSwgTyBSb21hbnMsIHNpbmNlIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIGZvciBhbGwgdGhlIGhvbm9ycyBvZiB0aGUgc3RhdGUgYSBtYW4gd2hvIGlzIGhpcyBvd24gZmF0aGVyIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3Qgbm9ibHkgYm9ybiBtZW4gaW4gdGhlIHJlcHVibGljPyBBbSBJIHVuZ3JhdGVmdWw/IFdobyBpcyBsZXNzIHNvPyBJLCB3aG8sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgSSBoYWQgb2J0YWluZWQgdGhvc2UgaG9ub3JzLCBoYXZlIGNvbnN0YW50bHkgbGFib3JlZCBpbiB0aGUgZm9ydW0gd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGV4ZXJ0aW9ucyBhcyBJIHVzZWQgd2hpbGUgc3RyaXZpbmcgZm9yIHRoZW0uIEFtIEkgaW5leHBlcmllbmNlZCBpbiBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGFmZmFpcnM/IFdobyBoYXMgaGFkIG1vcmUgcHJhY3RpY2UgdGhhbiBJLCB3aG8gaGF2ZSBub3cgZm9yIHR3ZW50eSB5ZWFycyBiZWVuCiAgICAgICAgICAgICAgICAgICAgd2FnaW5nIHdhciBhZ2FpbnN0IGltcGlvdXMgY2l0aXplbnM/IDwvdHJhbnNsYXRpb24+"
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['6.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgTyBSb21hbnMsIHdpdGggYWxsIHRoZSBwcnVkZW5jZSBvZiB3aGljaCBJIGFtIG1hc3RlciwgYW5kIHdpdGggYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgbW9yZSBleGVydGlvbiB0aGFuIEkgYW0gY2FwYWJsZSBvZiwgd2lsbCBJIHB1dCBmb3J0aCBteSB2aWdpbGFuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgd2F0Y2hmdWxuZXNzIGluIHlvdXIgYmVoYWxmIEluIHRydXRoLCB3aGF0IGNpdGl6ZW4gaXMgdGhlcmUsIGVzcGVjaWFsbHkgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIHJhbmsgaW4gd2hpY2ggeW91IGhhdmUgcGxhY2VkIG1lLCBzbyBmb3JnZXRmdWwgb2YgeW91ciBraW5kbmVzcywgc28gdW5taW5kZnVsIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvdW50cnksIHNvIGhvc3RpbGUgdG8gaGlzIG93biBkaWduaXR5LCBhcyBub3QgdG8gYmUgcm91c2VkIGFuZCBzdGltdWxhdGVkCiAgICAgICAgICAgICAgICAgICAgYnkgeW91ciB3b25kZXJmdWwgdW5hbmltaXR5PyBJLCBhcyBjb25zdWwsIGhhdmUgaGVsZCBtYW55IGFzc2VtYmxpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlOyBJIGhhdmUgYmVlbiBwcmVzZW50IGF0IG1hbnkgb3RoZXJzOyBJIGhhdmUgbmV2ZXIgb25jZSBzZWVuIG9uZSBzbwogICAgICAgICAgICAgICAgICAgIG51bWVyb3VzIGFzIHRoaXMgb25lIG9mIHlvdXJzIG5vdyBpcy4gWW91IGhhdmUgYWxsIG9uZSBmZWVsaW5nLCB5b3UgaGF2ZSBhbGwgb25lCiAgICAgICAgICAgICAgICAgICAgZGVzaXJlLCB0aGF0IG9mIGF2ZXJ0aW5nIHRoZSBhdHRlbXB0cyBvZiBNYXJjdXMgQW50b25pdXMgZnJvbSB0aGUgcmVwdWJsaWMsIG9mCiAgICAgICAgICAgICAgICAgICAgZXh0aW5ndWlzaGluZyBoaXMgZnJlbnp5IGFuZCBjcnVzaGluZyBoaXMgYXVkYWNpdHkuIEFsbCBvcmRlcnMgaGF2ZSB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHdpc2guIFRoZSBtdW5pY2lwYWwgdG93bnMsIHRoZSBjb2xvbmllcywgYW5kIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBhcmUgbGFib3JpbmcgZm9yIHRoZSBzYW1lIGVuZC4gVGhlcmVmb3JlIHlvdSBoYXZlIG1hZGUKICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlLCB3aGljaCB3YXMgYWxyZWFkeSBwcmV0dHkgZmlybSBvZiBpdHMgb3duIGFjY29yZCwgZmlybWVyIHN0aWxsIGJ5CiAgICAgICAgICAgICAgICAgICAgeW91ciBhdXRob3JpdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIHRpbWUgaGFzIGNvbWUsIE8gUm9tYW5zLAogICAgICAgICAgICAgICAgICAgIGxhdGVyIGFsdG9nZXRoZXIgdGhhbiBmb3IgdGhlIGhvbm9yIG9mIHRoZSBSb21hbiBwZW9wbGUgaXQgc2hvdWxkIGhhdmUgYmVlbiwgYnV0CiAgICAgICAgICAgICAgICAgICAgc3RpbGwgc28gdGhhdCB0aGUgdGhpbmdzIGFyZSBub3cgc28gcmlwZSB0aGF0IHRoZXkgZG8gbm90IGFkbWl0IG9mIGEgbW9tZW50J3MKICAgICAgICAgICAgICAgICAgICBkZWxheS4gVGhlcmUgaGFzIGJlZW4gYSBzb3J0IG9mIGZhdGFsaXR5LCBpZiBJIG1heSBzYXkgc28sIHdoaWNoIHdlIGhhdmUgYm9ybmUKICAgICAgICAgICAgICAgICAgICBhcyBpdCB3YXMgbmVjZXNzYXJ5IHRvIGJlYXIgaXQuIEJ1dCBoZXJlYWZ0ZXIgaWYgYW55IGRpc2FzdGVyIGhhcHBlbnMgdG8gdXMgaXQKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIG9mIG91ciBvd24gc2Vla2luZy4gSXQgaXMgaW1wb3NzaWJsZSBmb3IgdGhlIFJvbWFuIHBlb3BsZSB0byBiZSBzbGF2ZXM7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBwZW9wbGUgd2hvbSB0aGUgaW1tb3J0YWwgZ29kcyBoYXZlIG9yZGFpbmVkIHNob3VsZCBydWxlIG92ZXIgYWxsIG5hdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgTWF0dGVycyBhcmUgbm93IGNvbWUgdG8gYSBjcmlzaXMuIFdlIGFyZSBmaWdodGluZyBmb3Igb3VyIGZyZWVkb20uIEVpdGhlciB5b3UKICAgICAgICAgICAgICAgICAgICBtdXN0IGNvbnF1ZXIsIE8gUm9tYW5zLCB3aGljaCBpbmRlZWQgeW91IHdpbGwgZG8gaWYgeW91IGNvbnRpbnVlIHRvIGFjdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgc3VjaCBwaWV0eSBhbmQgc3VjaCB1bmFuaW1pdHksIG9yIHlvdSBtdXN0IGRvIGFueXRoaW5nIHJhdGhlciB0aGFuIGJlY29tZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcy4gT3RoZXIgbmF0aW9ucyBjYW4gZW5kdXJlIHNsYXZlcnksIExpYmVydHkgaXMgdGhlIGluYWxpZW5hYmxlIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgUm9tYW4gcGVvcGxlLjwvcD4KCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYXJlIGxhYm9yaW5nIGZvciB0aGUgc2FtZSBlbmQuIFRoZXJlZm9yZSB5b3UgaGF2ZSBtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSwgd2hpY2ggd2FzIGFscmVhZHkgcHJldHR5IGZpcm0gb2YgaXRzIG93biBhY2NvcmQsIGZpcm1lciBzdGlsbCBieQogICAgICAgICAgICAgICAgICAgIHlvdXIgYXV0aG9yaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['6.7.19'] = ""
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBhcmUgY29uc3VsdGVkIHRvIGRheSBhYm91dCBtYXR0ZXJzIG9mIHNtYWxsIGltcG9ydGFuY2UsIGJ1dCBzdGlsbCBwZXJoYXBzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5LCBPIGNvbnNjcmlwdCBmYXRoZXJzLiBUaGUgY29uc3VsIHN1Ym1pdHMgYSBtb3Rpb24gdG8gdXMgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgQXBwaWFuIHJvYWQgYW5kIGFib3V0IHRoZSBjb2luYWdlOyB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIG9uZSBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICBMdXBlcmNpLiBBbmQgYWx0aG91Z2ggaXQgc2VlbXMgZWFzeSB0byBzZXR0bGUgc3VjaCBtYXR0ZXJzIGFzIHRob3NlLCBzdGlsbCBteQogICAgICAgICAgICAgICAgICAgIG1pbmQgY2FuIG5vdCBmaXggaXRzZWxmIG9uIHN1Y2ggc3ViamVjdHMsIGJlaW5nIGFueGlvdXMgYWJvdXQgbW9yZSBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLiBGb3Igb3VyIGFmZmFpcnMsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFyZSBjb21lIHRvIGEgY3Jpc2lzLCBhbmQgYXJlIGluCiAgICAgICAgICAgICAgICAgICAgYSBzdGF0ZSBvZiBhbG1vc3QgZXh0cmVtZSBkYW5nZXIuIEl0IGlzIG5vdCB3aXRob3V0IHJlYXNvbiB0aGF0IEkgaGF2ZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBmZWFyZWQgYW5kIG5ldmVyIGFwcHJvdmVkIG9mIHRoYXQgc2VuZGluZyBvZiBhbWJhc3NhZG9ycy4gQW5kIHdoYXQgdGhlaXIgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgaXMgdG8gYnJpbmcgdXMgSSBrbm93IG5vdDsgYnV0IHdobyBpcyB0aGVyZSB3aG8gZG9lcyBub3Qgc2VlIHdpdGggaG93IG11Y2gKICAgICAgICAgICAgICAgICAgICBsYW5ndW9yIHRoZSBleHBlY3RhdGlvbiBvZiBpdCBpbmZlY3RzIG91ciBtaW5kcz8gRm9yIHRob3NlIG1lbiBwdXQgbm8gcmVzdHJhaW50CiAgICAgICAgICAgICAgICAgICAgb24gdGhlbXNlbHZlcyB3aG8ga25ldyB0aGF0IHRoZSBzZW5hdGUgaGFzIHJldml2ZWQgc28gYXMgdG8gZW50ZXJ0YWluIGhvcGVzIG9mCiAgICAgICAgICAgICAgICAgICAgaXRzIGZvcm1lciBhdXRob3JpdHksIGFuZCB0aGF0IHRoZSBSb21hbiBwZW9wbGUgaXMgdW5pdGVkIHRvIHRoaXMgb3VyIG9yZGVyOwogICAgICAgICAgICAgICAgICAgIHRoYXQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGlzIGFuaW1hdGVkIGJ5IG9uZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbiBmZWVsaW5nOyB0aGF0IGFybWllcyBhcmUgcHJlcGFyZWQsIGFuZCBnZW5lcmFscyByZWFkeSBmb3IgdGhlIGFybWllczsKICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IGV2ZW4gYWxyZWFkeSB0aGV5IGFyZSBpbnZlbnRpbmcgcmVwbGllcwogICAgICAgICAgICAgICAgICAgIGZvciBBbnRvbml1cyBhbmQgZGVmZW5kaW5nIHRoZW0uIFNvbWUgcHJldGVuZCB0aGF0IGhpcyBkZW1hbmQgaXMgdGhhdCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJtaWVzIGJlIGRpc2JhbmRlZC4gSSBzdXBwb3NlIHRoZW4gd2Ugc2VudCBhbWJhc3NhZG9ycyB0byBoaW0sIG5vdCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHN1Ym1pdCBhbmQgb2JleSB0aGlzIG91ciBib2R5LCBidXQgdGhhdCBoZSBzaG91bGQgb2ZmZXIgdXMgY29uZGl0aW9ucywKICAgICAgICAgICAgICAgICAgICBpbXBvc2UgbGF3cyB1cG9uIHVzLCBvcmRlciB1cyB0byBvcGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0byBmb3JlaWduIG5hdGlvbnM7IGVzcGVjaWFsbHkgd2hpbGUgd2Ugd2VyZSB0byBsZWF2ZSBoaW0KICAgICAgICAgICAgICAgICAgICBpbiBzYWZldHkgZnJvbSB3aG9tIHRoZXJlIGlzIG1vcmUgZGFuZ2VyIHRvIGJlIGZlYXJlZCB0aGFuIGZyb20gYW55IG5hdGlvbgogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IE90aGVycyBzYXkgdGhhdCBoZSBpcyB3aWxsaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB1cCB0aGUgbmVhcmVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHRvIHVzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdpbGwgYmUgc2F0aXNmaWVkIHdpdGggdGhlIGZhcnRoZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4uIFZlcnkga2luZCBvZiBoaW0hIGluIG9yZGVyIHRoYXQgZnJvbSB0aGVuY2UgYmUgbWF5CiAgICAgICAgICAgICAgICAgICAgZW5kZWF2b3IgdG8gYnJpbmcgbm90IG1lcmVseSBsZWdpb25zLCBidXQgZXZlbiBuYXRpb25zIGFnYWluc3QgdGhpcyBjaXR5LiBPdGhlcnMKICAgICAgICAgICAgICAgICAgICBzYXkgdGhhdCBoZSBtYWtlcyBubyBkZW1hbmRzIG5vdyBidXQgc3VjaCBhcyBhcmUgcXVpdGUgbW9kZXJhdGUuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gaGUgY2FsbHMgYWJzb2x1dGVseSBoaXMgb3duLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGl0IHdhcyBmcm9tIHRoZW5jZSB0aGF0IGhpcyBicm90aGVyIENhaXVzIHdhcyByZWNhbGxlZC4gQnV0IHdoYXQgcHJvdmluY2UgaXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpbiB3aGljaCB0aGF0IGZpcmUtYnJhbmQgbWF5IG5vdCBraW5kbGUgYSBjb25mbGFncmF0aW9uPyBUaGVyZWZvcmUgdGhvc2UKICAgICAgICAgICAgICAgICAgICBzYW1lIG1lbiBsaWtlIHByb3ZpZGVudCBjaXRpemVucyBhbmQgZGlsaWdlbnQgc2VuYXRvcnMsIHNheSB0aGF0IEkgaGF2ZSBzb3VuZGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGNoYXJnZSwgYW5kIHRoZXkgdW5kZXJ0YWtlIHRoZSBhZHZvY2FjeSBvZiBwZWFjZS4gSXMgbm90IHRoaXMgdGhlIHdheSBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgYXJndWU/IOKAnEFudG9uaXVzIG91Z2h0IG5vdCB0byBoYXZlIGJlZW4gaXJyaXRhdGVkOyBoZSBpcyBhCiAgICAgICAgICAgICAgICAgICAgcmVja2xlc3MgYW5kIGEgYm9sZCBtYW47IHRoZXJlIGFyZSBtYW55IGJhZCBtZW4gYmVzaWRlcyBoaW0u4oCdIChObwogICAgICAgICAgICAgICAgICAgIGRvdWJ0LCBhbmQgdGhleSBtYXkgYmVnaW4gYW5kIGNvdW50IHRoZW1zZWx2ZXMgZmlyc3QuKSBBbmQgdGhleSB3YXJuIHVzIHRvIGJlIG9uCiAgICAgICAgICAgICAgICAgICAgb3VyIGd1YXJkIGFnYWluc3QgdGhlbS4gV2hpY2ggY29uZHVjdCB0aGVuIGlzIGl0IHdoaWNoIHNob3dzIHRoZSBtb3JlIHBydWRlbnQKICAgICAgICAgICAgICAgICAgICBjYXV0aW9uOyBjaGFzdGlzaW5nIHdpY2tlZCBjaXRpemVucyB3aGVuIG9uZSBpcyBhYmxlIHRvIGRvIHNvLCBvciBmZWFyaW5nIHRoZW0/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaXMgYW5pbWF0ZWQgYnkgb25lCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIGZlZWxpbmc7IHRoYXQgYXJtaWVzIGFyZSBwcmVwYXJlZCwgYW5kIGdlbmVyYWxzIHJlYWR5IGZvciB0aGUgYXJtaWVzOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBldmVuIGFscmVhZHkgdGhleSBhcmUgaW52ZW50aW5nIHJlcGxpZXMKICAgICAgICAgICAgICAgICAgICBmb3IgQW50b25pdXMgYW5kIGRlZmVuZGluZyB0aGVtLiBTb21lIHByZXRlbmQgdGhhdCBoaXMgZGVtYW5kIGlzIHRoYXQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGFybWllcyBiZSBkaXNiYW5kZWQuIEkgc3VwcG9zZSB0aGVuIHdlIHNlbnQgYW1iYXNzYWRvcnMgdG8gaGltLCBub3QgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzdWJtaXQgYW5kIG9iZXkgdGhpcyBvdXIgYm9keSwgYnV0IHRoYXQgaGUgc2hvdWxkIG9mZmVyIHVzIGNvbmRpdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgaW1wb3NlIGxhd3MgdXBvbiB1cywgb3JkZXIgdXMgdG8gb3BlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0byBmb3JlaWduIG5hdGlvbnM7IGVzcGVjaWFsbHkgd2hpbGUgd2Ugd2VyZSB0byBsZWF2ZSBoaW0KICAgICAgICAgICAgICAgICAgICBpbiBzYWZldHkgZnJvbSB3aG9tIHRoZXJlIGlzIG1vcmUgZGFuZ2VyIHRvIGJlIGZlYXJlZCB0aGFuIGZyb20gYW55IG5hdGlvbgogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBPdGhlcnMgc2F5IHRoYXQgaGUgaXMgd2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIGdpdmUgdXAgdGhlIG5lYXJlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHRvIHVzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdpbGwgYmUgc2F0aXNmaWVkIHdpdGggdGhlIGZhcnRoZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4gVmVyeSBraW5kIG9mIGhpbSEgaW4gb3JkZXIgdGhhdCBmcm9tIHRoZW5jZSBiZSBtYXkKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvciB0byBicmluZyBub3QgbWVyZWx5IGxlZ2lvbnMsIGJ1dCBldmVuIG5hdGlvbnMgYWdhaW5zdCB0aGlzIGNpdHkuIE90aGVycwogICAgICAgICAgICAgICAgICAgIHNheSB0aGF0IGhlIG1ha2VzIG5vIGRlbWFuZHMgbm93IGJ1dCBzdWNoIGFzIGFyZSBxdWl0ZSBtb2RlcmF0ZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IGhlIGNhbGxzIGFic29sdXRlbHkgaGlzIG93biwgc2luY2UKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgZnJvbSB0aGVuY2UgdGhhdCBoaXMgYnJvdGhlciBDYWl1cyB3YXMgcmVjYWxsZWQuIEJ1dCB3aGF0IHByb3ZpbmNlIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaW4gd2hpY2ggdGhhdCBmaXJlLWJyYW5kIG1heSBub3Qga2luZGxlIGEgY29uZmxhZ3JhdGlvbj8gVGhlcmVmb3JlIHRob3NlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBtZW4gbGlrZSBwcm92aWRlbnQgY2l0aXplbnMgYW5kIGRpbGlnZW50IHNlbmF0b3JzLCBzYXkgdGhhdCBJIGhhdmUgc291bmRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFyZ2UsIGFuZCB0aGV5IHVuZGVydGFrZSB0aGUgYWR2b2NhY3kgb2YgcGVhY2UuIElzIG5vdCB0aGlzIHRoZSB3YXkgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGFyZ3VlPyDigJxBbnRvbml1cyBvdWdodCBub3QgdG8gaGF2ZSBiZWVuIGlycml0YXRlZDsgaGUgaXMgYQogICAgICAgICAgICAgICAgICAgIHJlY2tsZXNzIGFuZCBhIGJvbGQgbWFuOyB0aGVyZSBhcmUgbWFueSBiYWQgbWVuIGJlc2lkZXMgaGltLuKAnSAoTm8KICAgICAgICAgICAgICAgICAgICBkb3VidCwgYW5kIHRoZXkgbWF5IGJlZ2luIGFuZCBjb3VudCB0aGVtc2VsdmVzIGZpcnN0LikgQW5kIHRoZXkgd2FybiB1cyB0byBiZSBvbgogICAgICAgICAgICAgICAgICAgIG91ciBndWFyZCBhZ2FpbnN0IHRoZW0uIFdoaWNoIGNvbmR1Y3QgdGhlbiBpcyBpdCB3aGljaCBzaG93cyB0aGUgbW9yZSBwcnVkZW50CiAgICAgICAgICAgICAgICAgICAgY2F1dGlvbjsgY2hhc3Rpc2luZyB3aWNrZWQgY2l0aXplbnMgd2hlbiBvbmUgaXMgYWJsZSB0byBkbyBzbywgb3IgZmVhcmluZyB0aGVtPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['7.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoZXNlIG1lbiBzcGVhayBpbiB0aGlzIHdheSwgd2hvIG9uIGFjY291bnQgb2YgdGhlaXIgdHJpZmxpbmcgZGlzcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIGJlIGNvbnNpZGVyZWQgZnJpZW5kcyBvZiB0aGUgcGVvcGxlLiBGcm9tIHdoaWNoIGl0IG1heSBiZSB1bmRlcnN0b29kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGluIHRoZWlyIGhlYXJ0cyBoYXZlIGF0IGFsbCB0aW1lcyBiZWVuIGRpc2luY2xpbmVkIHRvIGEgZ29vZAogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiBvZiB0aGUgc3RhdGUsIGFuZCB0aGV5IHdlcmUgbm90IGZyaWVuZHMgb2YgdGhlIHBlb3BsZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgaW5jbGluYXRpb24uIEZvciBob3cgY29tZXMgaXQgdG8gcGFzcyB0aGF0IHRob3NlIG1lbiB3aG8gd2VyZSBhbnhpb3VzIHRvIGdyYXRpZnkKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlIGluIGV2aWwgdGhpbmdzLCBub3csIG9uIGFuIG9jY2FzaW9uIHdoaWNoIGFib3ZlIGFsbCBvdGhlcnMgY29uY2VybnMKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlJ3MgaW50ZXJlc3RzLCBiZWNhdXNlIHRoZSBzYW1lIHRoaW5nIHdvdWxkIGJlIGFsc28gc2FsdXRhcnkgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCBub3cgcHJlZmVyIGJlaW5nIHdpY2tlZCB0byBiZWluZyBmcmllbmRzIG9mIHRoZSBwZW9wbGU/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIG5vYmxlIGNhdXNlIG9mIHdoaWNoIEkgYW0gdGhlIGFkdm9jYXRlIGhhcyBtYWRlCiAgICAgICAgICAgICAgICAgICAgbWUgcG9wdWxhciwgYSBtYW4gd2hvIChhcyB5b3Uga25vdykgaGFzIGFsd2F5cyBvcHBvc2VkIHRoZSByYXNobmVzcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUuIEFuZCB0aG9zZSBtZW4gYXJlIGNhbGxlZCwgb3IgcmF0aGVyIHRoZXkgY2FsbCB0aGVtc2VsdmVzLCBjb25zdWxhcnM7CiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIG5vIG1hbiBpcyB3b3J0aHkgb2YgdGhhdCBuYW1lIGV4Y2VwdCB0aG9zZSB3aG8gY2FuIHN1cHBvcnQgc28gaGlnaCBhbgogICAgICAgICAgICAgICAgICAgIGhvbm9yLiBXaWxsIHlvdSBmYXZvciBhbiBlbmVteT8gV2lsbCB5b3UgbGV0IGhpbSBzZW5kIHlvdSBsZXR0ZXJzIGFib3V0IGhpcwogICAgICAgICAgICAgICAgICAgIGhvcGVzIG9mIHN1Y2Nlc3M/IFdpbGwgeW91IGJlIGdsYWQgdG8gcHJvZHVjZSB0aGVtPyB0byByZWFkIHRoZW0/IFdpbGwgeW91IGV2ZW4KICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZW0gdG8gd2lja2VkIGNpdGl6ZW5zIHRvIHRha2UgY29waWVzIG9mPyBXaWxsIHlvdSB0aHVzIHJhaXNlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291cmFnZT8gV2lsbCB5b3UgdGh1cyBkYW1wIHRoZSBob3BlcyBhbmQgdmFsb3Igb2YgdGhlIGdvb2Q/IEFuZCB0aGVuIHdpbGwgeW91CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgeW91cnNlbGYgYSBjb25zdWxhciwgb3IgYSBzZW5hdG9yLCBvciBldmVuIGEgY2l0aXplbiEgQ2FpdXMgUGFuc2EsIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGZlYXJsZXNzIGFuZCB2aXJ0dW91cyBjb25zdWwsIHdpbGwgdGFrZSB3aGF0IEkgc2F5IGluIGdvb2QgcGFydC4gRm9yIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIHNwZWFrIHdpdGggYSBkaXNwb3NpdGlvbiBtb3N0IGZyaWVuZGx5IHRvIGhpbTsgYnV0IEkgc2hvdWxkIG5vdCBjb25zaWRlciBoaW0KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGEgY29uc3VsLCB0aG91Z2ggYSBtYW4gd2l0aCB3aG9tIEkgYW0gbW9zdCBpbnRpbWF0ZSwgdW5sZXNzIGhlIHdhcyBzdWNoCiAgICAgICAgICAgICAgICAgICAgYSBjb25zdWwgYXMgdG8gZGV2b3RlIGFsbCBoaXMgdmlnaWxhbmNlLCBhbmQgY2FyZXMsIGFuZCB0aG91Z2h0cyB0byB0aGUgc2FmZXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIG5vYmxlIGNhdXNlIG9mIHdoaWNoIEkgYW0gdGhlIGFkdm9jYXRlIGhhcyBtYWRlCiAgICAgICAgICAgICAgICAgICAgbWUgcG9wdWxhciwgYSBtYW4gd2hvIChhcyB5b3Uga25vdykgaGFzIGFsd2F5cyBvcHBvc2VkIHRoZSByYXNobmVzcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUuIEFuZCB0aG9zZSBtZW4gYXJlIGNhbGxlZCwgb3IgcmF0aGVyIHRoZXkgY2FsbCB0aGVtc2VsdmVzLCBjb25zdWxhcnM7CiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIG5vIG1hbiBpcyB3b3J0aHkgb2YgdGhhdCBuYW1lIGV4Y2VwdCB0aG9zZSB3aG8gY2FuIHN1cHBvcnQgc28gaGlnaCBhbgogICAgICAgICAgICAgICAgICAgIGhvbm9yLiBXaWxsIHlvdSBmYXZvciBhbiBlbmVteT8gV2lsbCB5b3UgbGV0IGhpbSBzZW5kIHlvdSBsZXR0ZXJzIGFib3V0IGhpcwogICAgICAgICAgICAgICAgICAgIGhvcGVzIG9mIHN1Y2Nlc3M/IFdpbGwgeW91IGJlIGdsYWQgdG8gcHJvZHVjZSB0aGVtPyB0byByZWFkIHRoZW0/IFdpbGwgeW91IGV2ZW4KICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZW0gdG8gd2lja2VkIGNpdGl6ZW5zIHRvIHRha2UgY29waWVzIG9mPyBXaWxsIHlvdSB0aHVzIHJhaXNlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291cmFnZT8gV2lsbCB5b3UgdGh1cyBkYW1wIHRoZSBob3BlcyBhbmQgdmFsb3Igb2YgdGhlIGdvb2Q/IEFuZCB0aGVuIHdpbGwgeW91CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgeW91cnNlbGYgYSBjb25zdWxhciwgb3IgYSBzZW5hdG9yLCBvciBldmVuIGEgY2l0aXplbiEgQ2FpdXMgUGFuc2EsIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGZlYXJsZXNzIGFuZCB2aXJ0dW91cyBjb25zdWwsIHdpbGwgdGFrZSB3aGF0IEkgc2F5IGluIGdvb2QgcGFydC4gRm9yIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIHNwZWFrIHdpdGggYSBkaXNwb3NpdGlvbiBtb3N0IGZyaWVuZGx5IHRvIGhpbTsgYnV0IEkgc2hvdWxkIG5vdCBjb25zaWRlciBoaW0KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGEgY29uc3VsLCB0aG91Z2ggYSBtYW4gd2l0aCB3aG9tIEkgYW0gbW9zdCBpbnRpbWF0ZSwgdW5sZXNzIGhlIHdhcyBzdWNoCiAgICAgICAgICAgICAgICAgICAgYSBjb25zdWwgYXMgdG8gZGV2b3RlIGFsbCBoaXMgdmlnaWxhbmNlLCBhbmQgY2FyZXMsIGFuZCB0aG91Z2h0cyB0byB0aGUgc2FmZXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCBsb25nIGFjcXVhaW50YW5jZSwgYW5kIGhhYml0LCBhbmQgYSBmZWxsb3dzaGlwIGFuZCByZXNlbWJsYW5jZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IGhvbm9yYWJsZSBwdXJzdWl0cywgaGFzIGJvdW5kIHVzIHRvZ2V0aGVyIGZyb20gaGlzIGZpcnN0IGVudHJhbmNlIGludG8KICAgICAgICAgICAgICAgICAgICBsaWZlOyBhbmQgaGlzIGluY3JlZGlibGUgZGlsaWdlbmNlLCBwcm92ZWQgYXQgdGhlIHRpbWUgb2YgdGhlIG1vc3QgZm9ybWlkYWJsZQogICAgICAgICAgICAgICAgICAgIGRhbmdlcnMgb2YgdGhlIGNpdmlsIHdhciwgc2hvd2VkIHRoYXQgaGUgd2FzIGEgZmF2b3JlciBub3Qgb25seSBvZiBteSBzYWZldHksCiAgICAgICAgICAgICAgICAgICAgYnV0IGFsc28gb2YgbXkgZGlnbml0eTsgc3RpbGwgYXMgSSBzYWlkIGJlZm9yZSBpZiBoZSB3ZXJlIG5vdCBzdWNoIGEgY29uc3VsIGFzIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGRlc2NyaWJlZCwgSSBzaG91bGQgdmVudHVyZSB0byBkZW55IHRoYXQgaGUgd2FzIGEgY29uc3VsIGF0IGFsbC4gQnV0IG5vdyBJCiAgICAgICAgICAgICAgICAgICAgY2FsbCBoaW0gbm90IG9ubHkgYSBjb25zdWwgYnV0IHRoZSBtb3N0IGV4Y2VsbGVudCBhbmQgdmlydHVvdXMgY29uc3VsIHdpdGhpbiBteQogICAgICAgICAgICAgICAgICAgIHJlY29sbGVjdGlvbjsgbm90IGJ1dCB0aGF0IHRoZXJlIGhhdmUgYmVlbiBvdGhlcnMgb2YgZXF1YWwgdmlydHVlIGFuZCBlcXVhbAogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uLCBidXQgc3RpbGwgdGhleSBoYXZlIG5vdCBoYWQgYW4gZXF1YWwgb3Bwb3J0dW5pdHkgb2YgZGlzcGxheWluZyB0aGUKICAgICAgICAgICAgICAgICAgICB2aXJ0dWUgYW5kIGluY2xpbmF0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZSBvcHBvcnR1bml0eSBvZgogICAgICAgICAgICAgICAgICAgIGEgdGltZSBvZiBtb3N0IGZvcm1pZGFibGUgY2hhbmdlIGhhcyBiZWVuIGFmZm9yZGVkIHRvIGhpcyBtYWduYW5pbWl0eSBhbmQKICAgICAgICAgICAgICAgICAgICBkaWduaXR5IGFuZCB3aXNkb20uIEFuZCB0aGF0IGlzIHRoZSB0aW1lIHdoZW4gdGhlIGNvbnN1bHNoaXAgaXMgZGlzcGxheWVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXN0IGFkdmFudGFnZSB3aGVuIGl0IGdvdmVybnMgdGhlIHJlcHVibGljIGR1cmluZyBhIHRpbWUgd2hpY2ggaWYgbm90CiAgICAgICAgICAgICAgICAgICAgZGVzaXJhYmxlIGlzIGF0IGFsbCBldmVudHMgY3JpdGljYWwgYW5kIG1vbWVudG91cy4gQW5kIGEgbW9yZSBjcml0aWNhbCB0aW1lIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2VudCwgTyBjb25zY3JpcHQgZmF0aGVyLCBuZXZlciB3YXMuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhlIG9wcG9ydHVuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgYSB0aW1lIG9mIG1vc3QgZm9ybWlkYWJsZSBjaGFuZ2UgaGFzIGJlZW4gYWZmb3JkZWQgdG8gaGlzIG1hZ25hbmltaXR5IGFuZAogICAgICAgICAgICAgICAgICAgIGRpZ25pdHkgYW5kIHdpc2RvbS4gQW5kIHRoYXQgaXMgdGhlIHRpbWUgd2hlbiB0aGUgY29uc3Vsc2hpcCBpcyBkaXNwbGF5ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgYWR2YW50YWdlIHdoZW4gaXQgZ292ZXJucyB0aGUgcmVwdWJsaWMgZHVyaW5nIGEgdGltZSB3aGljaCBpZiBub3QKICAgICAgICAgICAgICAgICAgICBkZXNpcmFibGUgaXMgYXQgYWxsIGV2ZW50cyBjcml0aWNhbCBhbmQgbW9tZW50b3VzLiBBbmQgYSBtb3JlIGNyaXRpY2FsIHRpbWUgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoZSBwcmVzZW50LCBPIGNvbnNjcmlwdCBmYXRoZXIsIG5ldmVyIHdhcy4gPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlIEkgd2hvIGhhdmUgYmVlbiBhdCBhbGwgdGltZXMgYW4gYWR2aXNlciBvZiBwZWFjZSwgYW5kIHdobywgdGhvdWdoIGFsbAogICAgICAgICAgICAgICAgICAgIGdvb2QgbWVuIHdhcyBjb25zaWRlcmVkIHBlYWNlIGFuZCBlc3BlY2lhbGx5IGludGVybmFsIHBlYWNlLCBkZXNpcmFibGUsIGhhdmUKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIGl0IG1vcmUgdGhhbiBhbGwgb2YgdGhlbTvigJRmb3IgdGhlIHdob2xlIG9mIGNhcmVlciBvZiBteQogICAgICAgICAgICAgICAgICAgIGluZHVzdHJ5IGhhcyBiZWVuIHBhc3NlZCBpbiB0aGUgZm9ydW0gYW5kIGluIHRoZSBzZW5hdGUtaG91c2UgYW5kIGluIHdhcmRpbmcgb2ZmCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VycyBmcm9tIG15IGZyaWVuZHMuIEl0IGlzIGJ5IHRoaXMgY291cnNlIHRoYXQgSSBoYXZlIGFycml2ZWQgYXQgdGhlIGhpZ2hlc3QKICAgICAgICAgICAgICAgICAgICBob25vcnMsIGF0IG1vZGVyYXRlIHdlYWx0aCwgYW5kIGF0IGFueSBkaWduaXR5IHdoaWNoIHdlIG1heSBiZSB0aG91Z2h0IHRvIGhhdmU6CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJIHRoZXJlZm9yZSwgYSBudXJzbGluZyBvZiBwZWFjZSwgYXMgSSBtYXkKICAgICAgICAgICAgICAgICAgICBjYWxsIG15c2VsZiwgSSB3aG8sIHdoYXRldmVyIEkgYW0gKGZvciBJIGFycm9nYXRlIG5vdGhpbmcgdG8gbXlzZWxmKSwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdW5kb3VidGVkbHkgbm90IGhhdmUgYmVlbiBzdWNoIHdpdGhvdXQgaW50ZXJuYWwgcGVhY2U6IEkgYW0gc3BlYWtpbmcgaW4gcGVyaWw6IEkKICAgICAgICAgICAgICAgICAgICBzaHVkZGVyIHRvIHRoaW5rIGhvdyB5b3Ugd2lsbCByZWNlaXZlIGl0LCBPIGNvbnNjcmlwdCBmYXRoZXJzOyBidXQgc3RpbGwsIG91dCBvZgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBmb3IgbXkgdW5jZWFzaW5nIGRlc2lyZSB0byBzdXBwb3J0IGFuZCBpbmNyZWFzZSB5b3VyIGRpZ25pdHksIEkgYmVnIGFuZAogICAgICAgICAgICAgICAgICAgIGVudHJlYXQgeW91LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbHRob3VnaCBpdCBtYXkgYmUgYSBiaXR0ZXIgdGhpbmcgdG8gaGVhciwgb3IKICAgICAgICAgICAgICAgICAgICBhbiBpbmNyZWRpYmxlIHRoaW5nIHRoYXQgaXQgc2hvdWxkIGJlIHNhaWQgYnkgTWFyY3VzIENpY2Vybywgc3RpbGwgdG8gcmVjZWl2ZSBhdAogICAgICAgICAgICAgICAgICAgIGZpcnN0LCB3aXRob3V0IG9mZmVuc2UsIHdoYXQgSSBhbSBnb2luZyB0byBzYXksIGFuZCBub3QgdG8gcmVqZWN0IGl0IGJlZm9yZSBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmdWxseSBleHBsYWluZWQgd2hhdCBpdCBpcy4gSSwgd2hvLCBJIHdpbGwgc2F5IHNvIG92ZXIgYW5kIG92ZXIgYWdhaW4sIGhhdmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgYmVlbiBhIHBhbmVneXJpc3QsIGhhdmUgYWx3YXlzIGJlZW4gYW4gYWR2aXNlciBvZiBwZWFjZSwgZG8gbm90IHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHBlYWNlIHdpdGggTWFyY3VzIEFudG9uaXVzLiBJIGFwcHJvYWNoIHRoZSByZXN0IG9mIG15IHNwZWVjaCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgaG9wZSwgTyBjb25zY3JpcHQgZmF0aGVycywgc2luY2UgSSBoYXZlIG5vdyBwYXNzZWQgYnkgdGhhdCBwZXJpbG91cyBwb2ludCBhbWlkCiAgICAgICAgICAgICAgICAgICAgeW91ciBzaWxlbmNlLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJIHRoZXJlZm9yZSwgYSBudXJzbGluZyBvZiBwZWFjZSwgYXMgSSBtYXkKICAgICAgICAgICAgICAgICAgICBjYWxsIG15c2VsZiwgSSB3aG8sIHdoYXRldmVyIEkgYW0gKGZvciBJIGFycm9nYXRlIG5vdGhpbmcgdG8gbXlzZWxmKSwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdW5kb3VidGVkbHkgbm90IGhhdmUgYmVlbiBzdWNoIHdpdGhvdXQgaW50ZXJuYWwgcGVhY2U6IEkgYW0gc3BlYWtpbmcgaW4gcGVyaWw6IEkKICAgICAgICAgICAgICAgICAgICBzaHVkZGVyIHRvIHRoaW5rIGhvdyB5b3Ugd2lsbCByZWNlaXZlIGl0LCBPIGNvbnNjcmlwdCBmYXRoZXJzOyBidXQgc3RpbGwsIG91dCBvZgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBmb3IgbXkgdW5jZWFzaW5nIGRlc2lyZSB0byBzdXBwb3J0IGFuZCBpbmNyZWFzZSB5b3VyIGRpZ25pdHksIEkgYmVnIGFuZAogICAgICAgICAgICAgICAgICAgIGVudHJlYXQgeW91LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbHRob3VnaCBpdCBtYXkgYmUgYSBiaXR0ZXIgdGhpbmcgdG8gaGVhciwgb3IKICAgICAgICAgICAgICAgICAgICBhbiBpbmNyZWRpYmxlIHRoaW5nIHRoYXQgaXQgc2hvdWxkIGJlIHNhaWQgYnkgTWFyY3VzIENpY2Vybywgc3RpbGwgdG8gcmVjZWl2ZSBhdAogICAgICAgICAgICAgICAgICAgIGZpcnN0LCB3aXRob3V0IG9mZmVuc2UsIHdoYXQgSSBhbSBnb2luZyB0byBzYXksIGFuZCBub3QgdG8gcmVqZWN0IGl0IGJlZm9yZSBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmdWxseSBleHBsYWluZWQgd2hhdCBpdCBpcy4gSSwgd2hvLCBJIHdpbGwgc2F5IHNvIG92ZXIgYW5kIG92ZXIgYWdhaW4sIGhhdmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgYmVlbiBhIHBhbmVneXJpc3QsIGhhdmUgYWx3YXlzIGJlZW4gYW4gYWR2aXNlciBvZiBwZWFjZSwgZG8gbm90IHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHBlYWNlIHdpdGggTWFyY3VzIEFudG9uaXVzLiBJIGFwcHJvYWNoIHRoZSByZXN0IG9mIG15IHNwZWVjaCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgaG9wZSwgTyBjb25zY3JpcHQgZmF0aGVycywgc2luY2UgSSBoYXZlIG5vdyBwYXNzZWQgYnkgdGhhdCBwZXJpbG91cyBwb2ludCBhbWlkCiAgICAgICAgICAgICAgICAgICAgeW91ciBzaWxlbmNlLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBXaHkgdGhlbiBkbyBJIG5vdCB3aXNoIGZvciBwZWFjZT8gQmVjYXVzZSBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIHNoYW1lZnVsOyBiZWNhdXNlIGl0IHdvdWxkIGJlIGRhbmdlcm91czsgYmVjYXVzZSBpdCBjYW4gbm90IHBvc3NpYmx5IGJlCiAgICAgICAgICAgICAgICAgICAgcmVhbC4gQW5kIHdoaWxlIEkgZXhwbGFpbiB0aGVzZSB0aHJlZSBwb2ludHMgdG8geW91LCBJIGJlZyBvZiB5b3UsIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdG8gbGlzdGVuIHRvIG15IHdvcmRzIHdpdGggdGhlIHNhbWUga2luZG5lc3Mgd2hpY2ggeW91IHVzdWFsbHkgc2hvdyB0bwogICAgICAgICAgICAgICAgICAgIG1lLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBXaHkgdGhlbiBkbyBJIG5vdCB3aXNoIGZvciBwZWFjZT8gQmVjYXVzZSBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIHNoYW1lZnVsOyBiZWNhdXNlIGl0IHdvdWxkIGJlIGRhbmdlcm91czsgYmVjYXVzZSBpdCBjYW4gbm90IHBvc3NpYmx5IGJlCiAgICAgICAgICAgICAgICAgICAgcmVhbC4gQW5kIHdoaWxlIEkgZXhwbGFpbiB0aGVzZSB0aHJlZSBwb2ludHMgdG8geW91LCBJIGJlZyBvZiB5b3UsIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdG8gbGlzdGVuIHRvIG15IHdvcmRzIHdpdGggdGhlIHNhbWUga2luZG5lc3Mgd2hpY2ggeW91IHVzdWFsbHkgc2hvdyB0bwogICAgICAgICAgICAgICAgICAgIG1lLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgaXMgbW9yZSBzaGFtZWZ1bCB0aGFuIGluY29uc2lzdGVuY3ksIGZpY2tsZW5lc3MsIGFuZCBsZXZpdHksIGJvdGggdG8KICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFscywgYW5kIGFsc28gdG8gdGhlIGVudGlyZSBzZW5hdGU/IE1vcmVvdmVyLCB3aGF0IGNhbiBiZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgaW5jb25zaXN0ZW50IHRoYW4gb24gYSBzdWRkZW4gdG8gYmUgd2lsbGluZyB0byBiZSB1bml0ZWQgaW4gcGVhY2Ugd2l0aCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdob20geW91IGhhdmUgbGF0ZWx5IGFkanVkZ2VkIHRvIGJlIGFuIGVuZW15LCBub3QgYnkgd29yZHMsIGJ1dCBieSBhY3Rpb25zIGFuZAogICAgICAgICAgICAgICAgICAgIGJ5IG1hbnkgZm9ybWFsIGRlY3JlZXM/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gVW5sZXNzLCBpbmRlZWQsIHdoZW4KICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBkZWNyZWVpbmcgaG9ub3JzIHRvIENhaXVzIENhZXNhciwgd2VsbCBkZXNlcnZlZCBpbmRlZWQgYnkgYW5kIGZhaXJseQogICAgICAgICAgICAgICAgICAgIGR1ZSB0byBoaW0sIGJ1dCBzdGlsbCB1bnByZWNlZGVudGVkIGFuZCBuZXZlciB0byBiZSBmb3Jnb3R0ZW4sIGZvciBvbmUgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgcmVhc29uLOKAlGJlY2F1c2UgaGUgaGFkIGxldmllZCBhbiBhcm15IGFnYWluc3QgTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMs4oCUeW91IHdlcmUgbm90IGp1ZGdpbmcgTWFyY3VzIEFudG9uaXVzIHRvIGJlIGFuIGVuZW15OyBhbmQKICAgICAgICAgICAgICAgICAgICB1bmxlc3MuIEFudG9uaXVzIHdhcyBub3QgcHJvbm91bmNlZCBhbiBlbmVteSBieSB5b3UsIHdoZW4gdGhlIHZldGVyYW4gc29sZGllcnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIHByYWlzZWQgYnkgeW91ciBhdXRob3JpdHksIGZvciBoYXZpbmcgZm9sbG93ZWQgQ2Flc2FyOyBhbmQgdW5sZXNzIHlvdSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgZGVjbGFyZSBBbnRvbml1cyBhbiBlbmVteSB3aGVuIHlvdSBwcm9taXNlZCBleGVtcHRpb25zIGFuZCBtb25leSBhbmQgbGFuZHMKICAgICAgICAgICAgICAgICAgICB0byB0aG9zZSBicmF2ZSBsZWdpb25zLCBiZWNhdXNlIHRoZXkgaGFkIGRlc2VydGVkIGhpbSB3aG8gd2FzIGNvbnN1bCB3aGlsZSBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhbiBlbmVteS4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gVW5sZXNzLCBpbmRlZWQsIHdoZW4KICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBkZWNyZWVpbmcgaG9ub3JzIHRvIENhaXVzIENhZXNhciwgd2VsbCBkZXNlcnZlZCBpbmRlZWQgYnkgYW5kIGZhaXJseQogICAgICAgICAgICAgICAgICAgIGR1ZSB0byBoaW0sIGJ1dCBzdGlsbCB1bnByZWNlZGVudGVkIGFuZCBuZXZlciB0byBiZSBmb3Jnb3R0ZW4sIGZvciBvbmUgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgcmVhc29uLOKAlGJlY2F1c2UgaGUgaGFkIGxldmllZCBhbiBhcm15IGFnYWluc3QgTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMs4oCUeW91IHdlcmUgbm90IGp1ZGdpbmcgTWFyY3VzIEFudG9uaXVzIHRvIGJlIGFuIGVuZW15OyBhbmQKICAgICAgICAgICAgICAgICAgICB1bmxlc3MuIEFudG9uaXVzIHdhcyBub3QgcHJvbm91bmNlZCBhbiBlbmVteSBieSB5b3UsIHdoZW4gdGhlIHZldGVyYW4gc29sZGllcnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIHByYWlzZWQgYnkgeW91ciBhdXRob3JpdHksIGZvciBoYXZpbmcgZm9sbG93ZWQgQ2Flc2FyOyBhbmQgdW5sZXNzIHlvdSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgZGVjbGFyZSBBbnRvbml1cyBhbiBlbmVteSB3aGVuIHlvdSBwcm9taXNlZCBleGVtcHRpb25zIGFuZCBtb25leSBhbmQgbGFuZHMKICAgICAgICAgICAgICAgICAgICB0byB0aG9zZSBicmF2ZSBsZWdpb25zLCBiZWNhdXNlIHRoZXkgaGFkIGRlc2VydGVkIGhpbSB3aG8gd2FzIGNvbnN1bCB3aGlsZSBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhbiBlbmVteS4gPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['7.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQ/IHdoZW4geW91IGRpc3Rpbmd1aXNoZWQgd2l0aCB0aGUgaGlnaGVzdCBwcmFpc2VzIEJydXR1cywgYSBtYW4gYm9ybiB1bmRlcgogICAgICAgICAgICAgICAgICAgIHNvbWUgb21lbiwgYXMgaXQgd2VyZSwgb2YgaGlzIHJhY2UgYW5kIG5hbWUsIGZvciB0aGUgZGVsaXZlcmFuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIGFuZCBoaXMgYXJteSB3aGljaCB3YXMgd2FnaW5nIHdhciBhZ2FpbnN0IEFudG9uaXVzIG9uIGJlaGFsZiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsaWJlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGUgbW9zdCBsb3lhbCBhbmQgYWRtaXJhYmxlIHByb3ZpbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIGRpZCB5b3Ugbm90IHRoZW4gcHJvbm91bmNlCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgYW4gZW5lbXk/IFdoYXQ/IHdoZW4geW91IGRlY3JlZWQgdGhhdCB0aGUgY29uc3Vscywgb25lIG9yIGJvdGggb2YgdGhlbSwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgZ28gdG8gdGhlIHdhciwgd2hhdCB3YXIgd2FzIHRoZXJlIGlmIEFudG9uaXVzIHdhcyBub3QgYW4gZW5lbXk/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHRoZW4gd2FzIGl0IHRoYXQgbW9zdCBnYWxsYW50IG1hbiwgbXkKICAgICAgICAgICAgICAgICAgICBvd24gY29sbGVhZ3VlIGFuZCBpbnRpbWF0ZSBmcmllbmQsIEF1bHVzIEhpcnRpdXMgdGhlIGNvbnN1bCwgaGFzIHNldCBvdXQ/IEFuZCBpbgogICAgICAgICAgICAgICAgICAgIHdoYXQgZGVsaWNhdGUgaGVhbHRoIGhlIGlzOyBob3cgd2FzdGVkIGF3YXkhIEJ1dCB0aGUgd2VhayBzdGF0ZSBvZiBoaXMgYm9keQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCByZXByZXNzIHRoZSB2aWdvciBvZiBoaXMgbWluZC4gSGUgdGhvdWdodCBpdCBmYWlyLCBJIHN1cHBvc2UsIHRvCiAgICAgICAgICAgICAgICAgICAgZXhwb3NlIHRvIGRhbmdlciBpbiBkZWZlbnNlIG9mIHRoZSBSb21hbiBwZW9wbGUgdGhhdCBsaWZlIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVkIHRvIGhpbSBieSB0aGVpciBwcmF5ZXJzLiA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyB3aGVuCiAgICAgICAgICAgICAgICAgICAgeW91IG9yZGVyZWQgbGV2aWVzIG9mIHRyb29wcyB0byBiZSBtYWRlIHRocm91Z2hvdXQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgd2hlbiB5b3Ugc3VzcGVuZGVkIGFsbCBleGVtcHRpb25zIGZyb20KICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLCB3YXMgaGUgbm90IGJ5IHRob3NlIHN0ZXBzIGRlY2xhcmVkIHRvIGJlIGFuIGVuZW15PyBZb3Ugc2VlCiAgICAgICAgICAgICAgICAgICAgbWFudWZhY3RvcmllcyBvZiBhcm1zIGluIHRoZSBjaXR5OyBzb2xkaWVycywgc3dvcmQgaW4gaGFuZCwgYXJlIGZvbGxvd2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWw7IHRoZXkgYXJlIGluIGFwcGVhcmFuY2UgYSBndWFyZCB0byB0aGUgY29uc3VsLCBidXQgaW4gZmFjdCBhbmQgcmVhbGl0eSB0bwogICAgICAgICAgICAgICAgICAgIHVzOyBhbGwgbWVuIGFyZSBnaXZpbmcgaW4gdGhlaXIgbmFtZXMsIG5vdCBvbmx5IHdpdGhvdXQgYW55IHNoaXJraW5nLCBidXQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdGVzdCBlYWdlcm5lc3M7IHRoZXkgYXJlIGFjdGluZyBpbiBvYmVkaWVuY2UgdG8geW91ciBhdXRob3JpdHkuIEhhcyBub3QKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBiZWVuIGRlY2xhcmVkIGFuIGVuZW15IGJ5IHN1Y2ggYWN0cz8gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBkaWQgeW91IG5vdCB0aGVuIHByb25vdW5jZQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGFuIGVuZW15PyBXaGF0PyB3aGVuIHlvdSBkZWNyZWVkIHRoYXQgdGhlIGNvbnN1bHMsIG9uZSBvciBib3RoIG9mIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGdvIHRvIHRoZSB3YXIsIHdoYXQgd2FyIHdhcyB0aGVyZSBpZiBBbnRvbml1cyB3YXMgbm90IGFuIGVuZW15PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.4.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHRoZW4gd2FzIGl0IHRoYXQgbW9zdCBnYWxsYW50IG1hbiwgbXkKICAgICAgICAgICAgICAgICAgICBvd24gY29sbGVhZ3VlIGFuZCBpbnRpbWF0ZSBmcmllbmQsIEF1bHVzIEhpcnRpdXMgdGhlIGNvbnN1bCwgaGFzIHNldCBvdXQ/IEFuZCBpbgogICAgICAgICAgICAgICAgICAgIHdoYXQgZGVsaWNhdGUgaGVhbHRoIGhlIGlzOyBob3cgd2FzdGVkIGF3YXkhIEJ1dCB0aGUgd2VhayBzdGF0ZSBvZiBoaXMgYm9keQogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCByZXByZXNzIHRoZSB2aWdvciBvZiBoaXMgbWluZC4gSGUgdGhvdWdodCBpdCBmYWlyLCBJIHN1cHBvc2UsIHRvCiAgICAgICAgICAgICAgICAgICAgZXhwb3NlIHRvIGRhbmdlciBpbiBkZWZlbnNlIG9mIHRoZSBSb21hbiBwZW9wbGUgdGhhdCBsaWZlIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVkIHRvIGhpbSBieSB0aGVpciBwcmF5ZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.4.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdD8gd2hlbgogICAgICAgICAgICAgICAgICAgIHlvdSBvcmRlcmVkIGxldmllcyBvZiB0cm9vcHMgdG8gYmUgbWFkZSB0aHJvdWdob3V0IGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgd2hlbiB5b3Ugc3VzcGVuZGVkIGFsbCBleGVtcHRpb25zIGZyb20KICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLCB3YXMgaGUgbm90IGJ5IHRob3NlIHN0ZXBzIGRlY2xhcmVkIHRvIGJlIGFuIGVuZW15PyBZb3Ugc2VlCiAgICAgICAgICAgICAgICAgICAgbWFudWZhY3RvcmllcyBvZiBhcm1zIGluIHRoZSBjaXR5OyBzb2xkaWVycywgc3dvcmQgaW4gaGFuZCwgYXJlIGZvbGxvd2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWw7IHRoZXkgYXJlIGluIGFwcGVhcmFuY2UgYSBndWFyZCB0byB0aGUgY29uc3VsLCBidXQgaW4gZmFjdCBhbmQgcmVhbGl0eSB0bwogICAgICAgICAgICAgICAgICAgIHVzOyBhbGwgbWVuIGFyZSBnaXZpbmcgaW4gdGhlaXIgbmFtZXMsIG5vdCBvbmx5IHdpdGhvdXQgYW55IHNoaXJraW5nLCBidXQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdGVzdCBlYWdlcm5lc3M7IHRoZXkgYXJlIGFjdGluZyBpbiBvYmVkaWVuY2UgdG8geW91ciBhdXRob3JpdHkuIEhhcyBub3QKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBiZWVuIGRlY2xhcmVkIGFuIGVuZW15IGJ5IHN1Y2ggYWN0cz8gPC90cmFuc2xhdGlvbj4="
translation['7.4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPuKAnE9oLCBidXQgd2UgaGF2ZSBzZW50IGFtYmFzc2Fkb3JzIHRvIGhpbS7igJ0gQWxhcywgd3JldGNoZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0hIHdoeSBhbSBJIGNvbXBlbGxlZCB0byBmaW5kIGZhdWx0IHdpdGggdGhlIHNlbmF0ZSB3aG9tIEkgaGF2ZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBwcmFpc2VkPyBXaHk/IERvIHlvdSB0aGluaywgTyBjb25zY3JpcHQgZmF0aGVycyB0aGF0IHlvdSBoYXZlIGluZHVjZWQgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHRvIGFwcHJvdmUgb2YgdGhlIHNlbmRpbmcgYW1iYXNzYWRvcnM/IERvIHlvdSBub3QgcGVyY2VpdmUsIGRvIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICBoZWFyIHRoYXQgdGhlIGFkb3B0aW9uIG9mIG15IG9waW5pb24gaXMgZGVtYW5kZWQgYnkgdGhlbT8gdGhhdCBvcGluaW9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91LCBpbiBhIGZ1bGwgaG91c2UsIGFncmVlZCB0byB0aGUgZGF5IGJlZm9yZSwgdGhvdWdoIHRoZSBkYXkgYWZ0ZXIgeW91IGFsbG93ZWQKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIHRvIGJlIGJyb3VnaHQgZG93biB0byBhIGdyb3VuZGxlc3MgaG9wZSBvZiBwZWFjZS4gTW9yZW92ZXIsIGhvdwogICAgICAgICAgICAgICAgICAgIHNoYW1lZnVsIGl0IGlzIGZvciB0aGUgbGVnaW9ucyB0byBzZW5kIG91dCBhbWJhc3NhZG9ycyB0byB0aGUgc2VuYXRlLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHRvIEFudG9uaXVzISBBbHRob3VnaCB0aGF0IGlzIG5vdCBhbiBlbWJhc3N5OyBpdCBpcyBhIGRlbnVuY2lhdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3Rpb24gaXMgcHJlcGFyZWQgZm9yIGhpbSBpZiBoZSBkb2VzIG5vdCBzdWJtaXQgdG8gdGhpcyBvcmRlci4gV2hhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlPyBBdCBhbGwgZXZlbnRzLCBtZW4ncyBvcGluaW9ucyBhcmUgdW5mYXZvcmFibGUgdG8gdGhlIG1lYXN1cmU7IGZvcgogICAgICAgICAgICAgICAgICAgIGFsbCBtZW4gc2VlIHRoYXQgYW1iYXNzYWRvcnMgaGF2ZSBiZWVuIHNlbnQsIGJ1dCBpdCBpcyBub3QgYWxsIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBhY3F1YWludGVkIHdpdGggdGhlIHRlcm1zIG9mIHlvdXIgZGVjcmVlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IG11c3QsIHRoZXJlZm9yZSwgcHJlc2VydmUgeW91ciBjb25zaXN0ZW5jeSwgeW91ciB3aXNkb20sIHlvdXIgZmlybW5lc3MsIHlvdXIKICAgICAgICAgICAgICAgICAgICBwZXJzZXZlcmFuY2UuIFlvdSBtdXN0IGdvIGJhY2sgdG8gdGhlIG9sZC1mYXNoaW9uZWQgc2V2ZXJpdHksIGlmIGF0IGxlYXN0IHRoZQogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlIGlzIGFueGlvdXMgdG8gZXN0YWJsaXNoIGl0cyBjcmVkaXQsIGl0cyBob25vciwgaXRzCiAgICAgICAgICAgICAgICAgICAgcmVub3duLCBhbmQgaXRzIGRpZ25pdHksIHRoaW5ncyB3aGljaCB0aGlzIG9yZGVyIGhhcyBiZWVuIHRvbyBsb25nIGRlcHJpdmVkIG9mLgogICAgICAgICAgICAgICAgICAgIEJ1dCB0aGVyZSB3YXMgc29tZSB0aW1lIGFnbyBzb21lIGV4Y3VzZSBmb3IgaXQsIGFzIGJlaW5nIG9wcHJlc3NlZDsgYSBtaXNlcmFibGUKICAgICAgICAgICAgICAgICAgICBleGN1c2UgaW5kZWVkLCBidXQgc3RpbGwgYSBmYWlyIG9uZTsgbm93IHRoZXJlIGlzIG5vbmUuIFdlIGFwcGVhcmVkIHRvIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCBmcm9tIGtpbmdseSB0eXJhbm55OyBhbmQgYWZ0ZXJ3YXJkIHdlIHdlcmUgb3BwcmVzc2VkIG11Y2ggbW9yZQogICAgICAgICAgICAgICAgICAgIHNldmVyZWx5IGJ5IGRvbWVzdGljIGVuZW1pZXMuIFdlIGRpZCBpbmRlZWQgdHVybiB0aGVpciBhcm1zIGFzaWRlOyB3ZSBtdXN0IG5vdwogICAgICAgICAgICAgICAgICAgIHdyZXN0IHRoZW0gZnJvbSB0aGVpciBoYW5kcy4gQW5kIGlmIHdlIGNhbiBub3QgZG8gc28gKEkgd2lsbCBzYXkgd2hhdCBpdCBiZWNvbWVzCiAgICAgICAgICAgICAgICAgICAgb25lIHdobyBpcyBib3RoIGEgc2VuYXRvciBhbmQgYSBSb21hbiB0byBzYXkpLCBsZXQgdXMgZGllLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBob3cganVzdCB3aWxsIGJlIHRoZSBzaGFtZSwgaG93IGdyZWF0IHdpbGwgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzZ3JhY2UsIGhvdyBncmVhdCB0aGUgaW5mYW15IHRvIHRoZSByZXB1YmxpYywgaWYgTWFyY3VzIEFudG9uaXVzIGNhbiBkZWxpdmVyCiAgICAgICAgICAgICAgICAgICAgaGlzIG9waW5pb24gaW4gdGhpcyBhc3NlbWJseSBmcm9tIHRoZSBjb25zdWxhciBiZW5jaC4gRm9yLCB0byBzYXkgbm90aGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudGxlc3MgYWN0cyBvZiB3aWNrZWRuZXNzIGNvbW1pdHRlZCBieSBoaW0gd2hpbGUgY29uc3VsIGluIHRoZSBjaXR5LCBkdXJpbmcKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aW1lIGhlIGhhcyBzcXVhbmRlcmVkIGEgdmFzdCBhbW91bnQgb2YgcHVibGljIG1vbmV5LCByZXN0b3JlZCBleGlsZXMKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGFueSBsYXcsIHNvbGQgb3VyIHJldmVudWVzIHRvIGFsbCBzb3J0cyBvZiBwZW9wbGUsIHJlbW92ZWQgcHJvdmluY2VzCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZW1waXJlIG9mIHRoZSBSb21hbiBwZW9wbGUsIGdpdmVuIG1lbiBraW5nZG9tcyBmb3IgYnJpYmVzLCBpbXBvc2VkIGxhd3MKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgY2l0eSBieSB2aW9sZW5jZSwgYmVzaWVnZWQgdGhlIHNlbmF0ZSwgYW5kLCBhdCBvdGhlciB0aW1lcywgZXhjbHVkZWQgaXQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzZW5hdGUtaG91c2UgYnkgZm9yY2Ugb2YgYXJtczvigJR0byBzYXkgbm90aGluZywgSSBzYXksIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoaXMsIGRvIHlvdSBub3QgY29uc2lkZXIgdGhpcywgdGhhdCBoZSB3aG8gaGFzIGF0dGFja2VkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIGEgbW9zdCBwb3dlcmZ1bCBjb2xvbnkgb2YgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxl4oCUd2hvIGhhcyBiZXNpZWdlZCBhIGdlbmVyYWwgb2YgdGhlIFJvbWFuIHBlb3BsZSwgd2hvIGlzIGNvbnN1bAogICAgICAgICAgICAgICAgICAgIGVsZWN04oCUd2hvIGhhcyBsYWlkIHdhc3RlIHRoZSBsYW5kcyzigJRkbyB5b3Ugbm90IGNvbnNpZGVyLCBJCiAgICAgICAgICAgICAgICAgICAgc2F5LCBob3cgc2hhbWVmdWwgYW5kIGluaXF1aXRvdXMgYSB0aGluZyBpdCB3b3VsZCBiZSBmb3IgdGhhdCBtYW4gdG8gYmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoaXMgb3JkZXIsIGJ5IHdoaWNoIGhlIGhhcyBiZWVuIHNvIHJlcGVhdGVkbHkgcHJvbm91bmNlZCBhbiBlbmVteSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVzZSB2ZXJ5IHJlYXNvbnM/IDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGhvdyBqdXN0IHdpbGwgYmUgdGhlIHNoYW1lLCBob3cgZ3JlYXQgd2lsbCBiZSB0aGUKICAgICAgICAgICAgICAgICAgICBkaXNncmFjZSwgaG93IGdyZWF0IHRoZSBpbmZhbXkgdG8gdGhlIHJlcHVibGljLCBpZiBNYXJjdXMgQW50b25pdXMgY2FuIGRlbGl2ZXIKICAgICAgICAgICAgICAgICAgICBoaXMgb3BpbmlvbiBpbiB0aGlzIGFzc2VtYmx5IGZyb20gdGhlIGNvbnN1bGFyIGJlbmNoLiBGb3IsIHRvIHNheSBub3RoaW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW50bGVzcyBhY3RzIG9mIHdpY2tlZG5lc3MgY29tbWl0dGVkIGJ5IGhpbSB3aGlsZSBjb25zdWwgaW4gdGhlIGNpdHksIGR1cmluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRpbWUgaGUgaGFzIHNxdWFuZGVyZWQgYSB2YXN0IGFtb3VudCBvZiBwdWJsaWMgbW9uZXksIHJlc3RvcmVkIGV4aWxlcwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYW55IGxhdywgc29sZCBvdXIgcmV2ZW51ZXMgdG8gYWxsIHNvcnRzIG9mIHBlb3BsZSwgcmVtb3ZlZCBwcm92aW5jZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBlbXBpcmUgb2YgdGhlIFJvbWFuIHBlb3BsZSwgZ2l2ZW4gbWVuIGtpbmdkb21zIGZvciBicmliZXMsIGltcG9zZWQgbGF3cwogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBjaXR5IGJ5IHZpb2xlbmNlLCBiZXNpZWdlZCB0aGUgc2VuYXRlLCBhbmQsIGF0IG90aGVyIHRpbWVzLCBleGNsdWRlZCBpdAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHNlbmF0ZS1ob3VzZSBieSBmb3JjZSBvZiBhcm1zO+KAlHRvIHNheSBub3RoaW5nLCBJIHNheSwgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhpcywgZG8geW91IG5vdCBjb25zaWRlciB0aGlzLCB0aGF0IGhlIHdobyBoYXMgYXR0YWNrZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBhIG1vc3QgcG93ZXJmdWwgY29sb255IG9mIHRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZeKAlHdobyBoYXMgYmVzaWVnZWQgYSBnZW5lcmFsIG9mIHRoZSBSb21hbiBwZW9wbGUsIHdobyBpcyBjb25zdWwKICAgICAgICAgICAgICAgICAgICBlbGVjdOKAlHdobyBoYXMgbGFpZCB3YXN0ZSB0aGUgbGFuZHMs4oCUZG8geW91IG5vdCBjb25zaWRlciwgSQogICAgICAgICAgICAgICAgICAgIHNheSwgaG93IHNoYW1lZnVsIGFuZCBpbmlxdWl0b3VzIGEgdGhpbmcgaXQgd291bGQgYmUgZm9yIHRoYXQgbWFuIHRvIGJlIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgaW50byB0aGlzIG9yZGVyLCBieSB3aGljaCBoZSBoYXMgYmVlbiBzbyByZXBlYXRlZGx5IHByb25vdW5jZWQgYW4gZW5lbXkgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdmVyeSByZWFzb25zPyA8L3RyYW5zbGF0aW9uPg=="
translation['7.5.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBoYXZlIHNhaWQgZW5vdWdoIG9mIHRoZSBzaGFtZWZ1bG5lc3Mgb2Ygc3VjaCBhIHByb2NlZWRpbmc7IEkgd2lsbCBub3cgc3BlYWsKICAgICAgICAgICAgICAgICAgICBuZXh0LCBhcyBJIHByb3Bvc2VkLCBvZiB0aGUgZGFuZ2VyIG9mIGl0OyB3aGljaCwgYWx0aG91Z2ggaXQgaXMgbm90IHNvIGltcG9ydGFudAogICAgICAgICAgICAgICAgICAgIHRvIGF2b2lkIGFzIHNoYW1lLCBzdGlsbCBvZmZlbmRzIHRoZSBtaW5kcyBvZiB0aGUgZ3JlYXRlciBwYXJ0IG9mIG1hbmtpbmQgZXZlbgogICAgICAgICAgICAgICAgICAgIG1vcmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2lsbCBpdCB0aGVuIGJlIHBvc3NpYmxlIGZvciB5b3UgdG8gcmVseSBvbiB0aGUgY2VydGFpbnR5IG9mIGFueSBwZWFjZSwgd2hlbiB5b3UKICAgICAgICAgICAgICAgICAgICBzZWUgQW50b25pdXMsIG9yIHJhdGhlciB0aGUgQW50b25paSwgaW4gdGhlIGNpdHk/IFVubGVzcywgaW5kZWVkLCB5b3UgZGVzcGlzZQogICAgICAgICAgICAgICAgICAgIEx1Y2l1czogSSBkbyBub3QgZGVzcGlzZSBldmVuIENhaXVzLiBCdXQsIGFzIEkgdGhpbmssIEx1Y2l1cyB3aWxsIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIGRvbWluYW50IHNwaXJpdCzigJRmb3IgaGUgaXMgdGhlIHBhdHJvbiBvZiB0aGUgZml2ZS1hbmQtdGhpcnR5IHRyaWJlcywKICAgICAgICAgICAgICAgICAgICB3aG9zZSB2b3RlcyBoZSB0b29rIGF3YXkgYnkgaGlzIGxhdywgYnkgd2hpY2ggaGUgZGl2aWRlZCB0aGUgbWFnaXN0cmFjaWVzIGluCiAgICAgICAgICAgICAgICAgICAgY29uanVuY3Rpb24gd2l0aCBDYWl1cyBDYWVzYXIuIEhlIGlzIHRoZSBwYXRyb24gb2YgdGhlIGNlbnR1cmllcyBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBrbmlnaHRzLCB3aGljaCBhbHNvIGhlIHRob3VnaHQgZml0IHRvIGRlcHJpdmUgb2YgdGhlIHN1ZmZyYWdlczogaGUgaXMgdGhlIHBhdHJvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtZW4gd2hvIGhhdmUgYmVlbiBtaWxpdGFyeSB0cmlidW5lczsgaGUgaXMgdGhlIHBhdHJvbiBvZiB0aGUgbWlkZGxlIG9mCiAgICAgICAgICAgICAgICAgICAgSmFudXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gTyB5ZSBnb2RzISB3aG8gd2lsbCBoZSBhYmxlIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbidzIHBvd2VyPyBlc3BlY2lhbGx5IHdoZW4gaGUgaGFzIGJyb3VnaHQgYWxsIGhpcyBkZXBlbmRlbnRzIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGFuZHMuIFdobyBldmVyIHdhcyB0aGUgcGF0cm9uIG9mIGFsbCB0aGUgdHJpYmVzPyBhbmQgb2YgdGhlIFJvbWFuIGtuaWdodHM/IGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtaWxpdGFyeSB0cmlidW5lcz8gRG8geW91IHRoaW5rIHRoYXQgdGhlIHBvd2VyIG9mIGV2ZW4gdGhlIEdyYWNjaGkgd2FzCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciB0aGFuIHRoYXQgb2YgdGhpcyBnbGFkaWF0b3Igd2lsbCBiZT8gd2hvbSBJIGhhdmUgY2FsbGVkIGdsYWRpYXRvciwgbm90CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNlbnNlIGluIHdoaWNoIHNvbWV0aW1lcyBNYXJjdXMuIEFudG9uaXVzIHRvbyBpcyBjYWxsZWQgZ2xhZGlhdG9yLCBidXQgYXMKICAgICAgICAgICAgICAgICAgICBtZW4gY2FsbCBoaW0gd2hvIGFyZSBzcGVha2luZyBwbGFpbiBMYXRpbi4gSGUgaGFzIGZvdWdodCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiBhcyBhIG1pcm1pbGxvLiBBZnRlciBoYXZpbmcgZXF1aXBwZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIGNvbXBhbmlvbiBhbmQgaW50aW1hdGUgZnJpZW5kIGluIHRoZSBhcm1vciBvZiBhIFRocmFjaWFuLCBoZSBzbGV3IHRoZQogICAgICAgICAgICAgICAgICAgIG1pc2VyYWJsZSBtYW4gYXMgaGUgd2FzIGZseWluZzsgYnV0IGhlIGhpbXNlbGYgcmVjZWl2ZWQgYSBwYWxwYWJsZSB3b3VuZCwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgc2NhciBwcm92ZXMuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gTyB5ZSBnb2RzISB3aG8gd2lsbCBoZSBhYmxlIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbidzIHBvd2VyPyBlc3BlY2lhbGx5IHdoZW4gaGUgaGFzIGJyb3VnaHQgYWxsIGhpcyBkZXBlbmRlbnRzIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGFuZHMuIFdobyBldmVyIHdhcyB0aGUgcGF0cm9uIG9mIGFsbCB0aGUgdHJpYmVzPyBhbmQgb2YgdGhlIFJvbWFuIGtuaWdodHM/IGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtaWxpdGFyeSB0cmlidW5lcz8gRG8geW91IHRoaW5rIHRoYXQgdGhlIHBvd2VyIG9mIGV2ZW4gdGhlIEdyYWNjaGkgd2FzCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciB0aGFuIHRoYXQgb2YgdGhpcyBnbGFkaWF0b3Igd2lsbCBiZT8gd2hvbSBJIGhhdmUgY2FsbGVkIGdsYWRpYXRvciwgbm90CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNlbnNlIGluIHdoaWNoIHNvbWV0aW1lcyBNYXJjdXMuIEFudG9uaXVzIHRvbyBpcyBjYWxsZWQgZ2xhZGlhdG9yLCBidXQgYXMKICAgICAgICAgICAgICAgICAgICBtZW4gY2FsbCBoaW0gd2hvIGFyZSBzcGVha2luZyBwbGFpbiBMYXRpbi4gSGUgaGFzIGZvdWdodCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGFzIGEgbWlybWlsbG8uIEFmdGVyIGhhdmluZyBlcXVpcHBlZCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gY29tcGFuaW9uIGFuZCBpbnRpbWF0ZSBmcmllbmQgaW4gdGhlIGFybW9yIG9mIGEgVGhyYWNpYW4sIGhlIHNsZXcgdGhlCiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmxlIG1hbiBhcyBoZSB3YXMgZmx5aW5nOyBidXQgaGUgaGltc2VsZiByZWNlaXZlZCBhIHBhbHBhYmxlIHdvdW5kLCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBzY2FyIHByb3Zlcy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgd2lsbCB0aGUgbWFuIHdobyBtdXJkZXJlZCBoaXMgZnJpZW5kIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyB3YXksIHdoZW4gaGUgaGFzIGFuIG9wcG9ydHVuaXR5LCBkbyB0byBhbiBlbmVteT8gYW5kIGlmIGhlIGRpZCBzdWNoIGEgdGhpbmcKICAgICAgICAgICAgICAgICAgICBhcyB0aGlzIGZvciB0aGUgZnVuIG9mIHRoZSB0aGluZywgd2hhdCBkbyB5b3UgdGhpbmsgaGUgd2lsbCBkbyB3aGVuIHRlbXB0ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgaG9wZSBvZiBwbHVuZGVyPyBXaWxsIGhlIG5vdCBhZ2FpbiBtZWV0IHdpY2tlZCBtZW4gaW4gdGhlIGRlY3VyaWVzPyB3aWxsIGhlCiAgICAgICAgICAgICAgICAgICAgbm90IGFnYWluIHRhbXBlciB3aXRoIHRob3NlIG1lbiB3aG8gaGF2ZSByZWNlaXZlZCBsYW5kcz8gd2lsbCBoZSBub3QgYWdhaW4gc2VlawogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYXZlIGJlZW4gYmFuaXNoZWQ/IHdpbGwgaGUgbm90LCBpbiBzaG9ydCwgYmUgTWFyY3VzIEFudG9uaXVzOyB0bwogICAgICAgICAgICAgICAgICAgIHdob20sIG9uIHRoZSBvY2Nhc2lvbiBvZiBldmVyeSBjb21tb3Rpb24sIHRoZXJlIHdpbGwgYmUgYSBydXNoIG9mIGFsbCBwcm9mbGlnYXRlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnM/IEV2ZW4gaWYgdGhlcmUgYmUgbm8gb25lIGVsc2UgZXhjZXB0IHRob3NlIHdobyBhcmUgd2l0aCBoaW0gbm93LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVzZSB3aG8gaW4gdGhpcyBib2R5IG5vdyBvcGVubHkgc3BlYWsgaW4gaGlzIGZhdm9yLCB3aWxsIHRoZXkgYmUgdG9vIHNtYWxsIGluCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyPyBlc3BlY2lhbGx5IHdoZW4gYWxsIHRoZSBwcm90ZWN0aW9uIHdoaWNoIHdlIG1pZ2h0IGhhdmUgaGFkIGZyb20gZ29vZCBtZW4KICAgICAgICAgICAgICAgICAgICBpcyBsb3N0LCBhbmQgd2hlbiB0aG9zZSBtZW4gYXJlIHByZXBhcmVkIHRvIG9iZXkgaGlzIG5vZD8gQnV0IEkgYW0gYWZyYWlkLCBpZiBhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgdGltZSB3ZSBmYWlsIHRvIGFkb3B0IHdpc2UgY291bnNlbHMsIHRoYXQgdGhhdCBwYXJ0eSB3aWxsIGluIGEgc2hvcnQgdGltZQogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0b28gbnVtZXJvdXMgZm9yIHVzLiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaGF2ZSBJIGFueQogICAgICAgICAgICAgICAgICAgIGRpc2xpa2UgdG8gcGVhY2U7IG9ubHkgSSBkbyBkcmVhZCB3YXIgZGlzZ3Vpc2VkIHVuZGVyIHRoZSBuYW1lIG9mIHBlYWNlLgogICAgICAgICAgICAgICAgICAgIFdoZXJlZm9yZSwgaWYgd2Ugd2lzaCB0byBlbmpveSBwZWFjZSB3ZSBtdXN0IGZpcnN0IHdhZ2Ugd2FyLiBJZiB3ZSBzaHJpbmsgZnJvbQogICAgICAgICAgICAgICAgICAgIHdhciwgcGVhY2Ugd2Ugc2hhbGwgbmV2ZXIgaGF2ZS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.6.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB3aWxsIHRoZSBtYW4gd2hvIG11cmRlcmVkIGhpcyBmcmllbmQgaW4KICAgICAgICAgICAgICAgICAgICB0aGlzIHdheSwgd2hlbiBoZSBoYXMgYW4gb3Bwb3J0dW5pdHksIGRvIHRvIGFuIGVuZW15PyBhbmQgaWYgaGUgZGlkIHN1Y2ggYSB0aGluZwogICAgICAgICAgICAgICAgICAgIGFzIHRoaXMgZm9yIHRoZSBmdW4gb2YgdGhlIHRoaW5nLCB3aGF0IGRvIHlvdSB0aGluayBoZSB3aWxsIGRvIHdoZW4gdGVtcHRlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBob3BlIG9mIHBsdW5kZXI/IFdpbGwgaGUgbm90IGFnYWluIG1lZXQgd2lja2VkIG1lbiBpbiB0aGUgZGVjdXJpZXM/IHdpbGwgaGUKICAgICAgICAgICAgICAgICAgICBub3QgYWdhaW4gdGFtcGVyIHdpdGggdGhvc2UgbWVuIHdobyBoYXZlIHJlY2VpdmVkIGxhbmRzPyB3aWxsIGhlIG5vdCBhZ2FpbiBzZWVrCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgYmVlbiBiYW5pc2hlZD8gd2lsbCBoZSBub3QsIGluIHNob3J0LCBiZSBNYXJjdXMgQW50b25pdXM7IHRvCiAgICAgICAgICAgICAgICAgICAgd2hvbSwgb24gdGhlIG9jY2FzaW9uIG9mIGV2ZXJ5IGNvbW1vdGlvbiwgdGhlcmUgd2lsbCBiZSBhIHJ1c2ggb2YgYWxsIHByb2ZsaWdhdGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVucz8gRXZlbiBpZiB0aGVyZSBiZSBubyBvbmUgZWxzZSBleGNlcHQgdGhvc2Ugd2hvIGFyZSB3aXRoIGhpbSBub3csIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdobyBpbiB0aGlzIGJvZHkgbm93IG9wZW5seSBzcGVhayBpbiBoaXMgZmF2b3IsIHdpbGwgdGhleSBiZSB0b28gc21hbGwgaW4KICAgICAgICAgICAgICAgICAgICBudW1iZXI/IGVzcGVjaWFsbHkgd2hlbiBhbGwgdGhlIHByb3RlY3Rpb24gd2hpY2ggd2UgbWlnaHQgaGF2ZSBoYWQgZnJvbSBnb29kIG1lbgogICAgICAgICAgICAgICAgICAgIGlzIGxvc3QsIGFuZCB3aGVuIHRob3NlIG1lbiBhcmUgcHJlcGFyZWQgdG8gb2JleSBoaXMgbm9kPyBCdXQgSSBhbSBhZnJhaWQsIGlmIGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aW1lIHdlIGZhaWwgdG8gYWRvcHQgd2lzZSBjb3Vuc2VscywgdGhhdCB0aGF0IHBhcnR5IHdpbGwgaW4gYSBzaG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHRvbyBudW1lcm91cyBmb3IgdXMuIDwvdHJhbnNsYXRpb24+"
translation['7.6.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGhhdmUgSSBhbnkKICAgICAgICAgICAgICAgICAgICBkaXNsaWtlIHRvIHBlYWNlOyBvbmx5IEkgZG8gZHJlYWQgd2FyIGRpc2d1aXNlZCB1bmRlciB0aGUgbmFtZSBvZiBwZWFjZS4KICAgICAgICAgICAgICAgICAgICBXaGVyZWZvcmUsIGlmIHdlIHdpc2ggdG8gZW5qb3kgcGVhY2Ugd2UgbXVzdCBmaXJzdCB3YWdlIHdhci4gSWYgd2Ugc2hyaW5rIGZyb20KICAgICAgICAgICAgICAgICAgICB3YXIsIHBlYWNlIHdlIHNoYWxsIG5ldmVyIGhhdmUuIDwvdHJhbnNsYXRpb24+"
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGl0IGJlY29tZXMgeW91ciBwcnVkZW5jZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdG8gcHJvdmlkZSBhcyBmYXIgZm9yd2FyZCBhcwogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIGZvciBwb3N0ZXJpdHkuIFRoYXQgaXMgdGhlIG9iamVjdCBmb3Igd2hpY2ggd2Ugd2VyZSBwbGFjZWQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGdhcnJpc29uLCBhbmQgYXMgaXQgd2VyZSBvbiB0aGlzIHdhdGNoLXRvd2VyOyB0aGF0IGJ5IG91ciB2aWdpbGFuY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9yZXNpZ2h0IHdlIG1pZ2h0IGtlZXAgdGhlIFJvbWFuIHBlb3BsZSBmcmVlIGZyb20gZmVhci4gSXQgd291bGQgYmUgYSBzaGFtZWZ1bAogICAgICAgICAgICAgICAgICAgIHRoaW5nLCBlc3BlY2lhbGx5IGluIHNvIGNsZWFyIGEgY2FzZSBhcyB0aGlzLCBmb3IgaXQgdG8gYmUgbm90b3Jpb3VzIHRoYXQgd2lzZG9tCiAgICAgICAgICAgICAgICAgICAgd2FzIHdhbnRpbmcgdG8gdGhlIGNoaWVmIGNvdW5jaWwgb2YgdGhlIHdob2xlIHdvcmxkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+IFdlIGhhdmUgc3VjaCBjb25zdWxzLCB0aGVyZSBpcyBzdWNoIGVhZ2VybmVzcyBvbiB0aGUgcGFydAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUsIHdlIGhhdmUgc3VjaCBhIHVuYW5pbW91cyBmZWVsaW5nIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaW4gb3VyIGZhdm9yLCBzdWNoIGdlbmVyYWxzLCBhbmQgc3VjaAogICAgICAgICAgICAgICAgICAgIGFybWllcywgdGhhdCB0aGUgcmVwdWJsaWMgY2Fubm90IHBvc3NpYmx5IHN1ZmZlciBhbnkgZGlzYXN0ZXIgd2l0aG91dCB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgaW4gZmF1bHQuIEksIGZvciBteSBwYXJ0LCB3aWxsIG5vdCBiZSB3YW50aW5nLiBJIHdpbGwgd2FybiB5b3UsIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGZvcmV3YXJuIHlvdSwgSSB3aWxsIGdpdmUgeW91IG5vdGljZSwgSSB3aWxsIGNhbGwgZ29kcyBhbmQgbWVuIHRvIHdpdG5lc3Mgd2hhdCBJCiAgICAgICAgICAgICAgICAgICAgZG8gcmVhbGx5IGJlbGlldmUuIE5vciB3aWxsIEkgZGlzcGxheSBteSBnb29kIGZhaXRoIGFsb25lLCB3aGljaCBwZXJoYXBzIG1heQogICAgICAgICAgICAgICAgICAgIHNlZW0gdG8gYmUgZW5vdWdoLCBidXQgd2hpY2ggaW4gYSBjaGllZiBjaXRpemVuIGlzIG5vdCBlbm91Z2g7IEkgd2lsbCBleGVydCBhbGwKICAgICAgICAgICAgICAgICAgICBteSBjYXJlLCBhbmQgcHJ1ZGVuY2UsIGFuZCB2aWdpbGFuY2UuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.7.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gV2UgaGF2ZSBzdWNoIGNvbnN1bHMsIHRoZXJlIGlzIHN1Y2ggZWFnZXJuZXNzIG9uIHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZSwgd2UgaGF2ZSBzdWNoIGEgdW5hbmltb3VzIGZlZWxpbmcgb2YgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGluIG91ciBmYXZvciwgc3VjaCBnZW5lcmFscywgYW5kIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhcm1pZXMsIHRoYXQgdGhlIHJlcHVibGljIGNhbm5vdCBwb3NzaWJseSBzdWZmZXIgYW55IGRpc2FzdGVyIHdpdGhvdXQgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGJlaW5nIGluIGZhdWx0LiBJLCBmb3IgbXkgcGFydCwgd2lsbCBub3QgYmUgd2FudGluZy4gSSB3aWxsIHdhcm4geW91LCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBmb3Jld2FybiB5b3UsIEkgd2lsbCBnaXZlIHlvdSBub3RpY2UsIEkgd2lsbCBjYWxsIGdvZHMgYW5kIG1lbiB0byB3aXRuZXNzIHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGRvIHJlYWxseSBiZWxpZXZlLiBOb3Igd2lsbCBJIGRpc3BsYXkgbXkgZ29vZCBmYWl0aCBhbG9uZSwgd2hpY2ggcGVyaGFwcyBtYXkKICAgICAgICAgICAgICAgICAgICBzZWVtIHRvIGJlIGVub3VnaCwgYnV0IHdoaWNoIGluIGEgY2hpZWYgY2l0aXplbiBpcyBub3QgZW5vdWdoOyBJIHdpbGwgZXhlcnQgYWxsCiAgICAgICAgICAgICAgICAgICAgbXkgY2FyZSwgYW5kIHBydWRlbmNlLCBhbmQgdmlnaWxhbmNlLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgaGF2ZSBzcG9rZW4gYWJvdXQgZGFuZ2VyLiBJIHdpbGwgbm93IHByb2NlZWQgdG8gcHJvdmUgdG8geW91IHRoYXQgaXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgZm9yIHBlYWNlIHRvIGJlIGZpcm1seSBjZW1lbnRlZDsgZm9yIG9mIHRoZSBwcm9wb3NpdGlvbnMgd2hpY2ggSQogICAgICAgICAgICAgICAgICAgIHByb21pc2VkIHRvIGVzdGFibGlzaCB0aGlzIGlzIHRoZSBsYXN0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['7.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgcGVhY2UgY2FuIHRoZXJlIGJlIGJldHdlZW4gTWFyY3VzIEFudG9uaXVzIGFuZCAoaW4gdGhlIGZpcnN0LCBwbGFjZSkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlPyB3aXRoIHdoYXQgZmFjZSB3aWxsIGhlIGJlIGFibGUgdG8gbG9vayB1cG9uIHlvdSwgYW5kIHdpdGggd2hhdCBleWVzIHdpbGwKICAgICAgICAgICAgICAgICAgICB5b3UsIGluIHR1cm4sIGxvb2sgdXBvbiBoaW0/IFdoaWNoIG9mIHlvdSBkb2VzIG5vdCBoYXRlIGhpbT8gd2hpY2ggb2YgeW91IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgaGUgaGF0ZT8gQ29tZSwgYXJlIHlvdSB0aGUgb25seSBwZW9wbGUgd2hvIGhhdGUgaGltLCBhbmQgd2hvbSBoZSBoYXRlcz8KICAgICAgICAgICAgICAgICAgICBXaGF0PyB3aGF0IGRvIHlvdSB0aGluayBvZiB0aG9zZSBtZW4gd2hvIGFyZSBiZXNpZWdpbmcgTXV0aW5hLCB3aG8gYXJlIGxldnlpbmcKICAgICAgICAgICAgICAgICAgICB0cm9vcHMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgd2hvIGFyZSB0aHJlYXRlbmluZwogICAgICAgICAgICAgICAgICAgIHlvdXIgZm9ydHVuZXM/IHdpbGwgdGhleSBldmVyIGJlIGZyaWVuZHMgdG8geW91LCBvciB5b3UgdG8gdGhlbT8gd2lsbCBoZSBlbWJyYWNlCiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIGtuaWdodHM/IEZvciwgc3VwcG9zZSB0aGVpciBpbmNsaW5hdGlvbnMgcmVzcGVjdGluZywgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbnMgb2YgQW50b25pdXMgd2VyZSB2ZXJ5IG11Y2ggY29uY2VhbGVkLCB3aGVuIHRoZXkgc3Rvb2QgaW4gY3Jvd2RzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHN0ZXBzIG9mIHRoZSB0ZW1wbGUgb2YgQ29uY29yZCwgd2hlbiB0aGV5IHN0aW11bGF0ZWQgeW91IHRvIGVuZGVhdm9yIHRvIHJlY292ZXIKICAgICAgICAgICAgICAgICAgICB5b3VyIGxpYmVydHksIHdoZW4gdGhleSBkZW1hbmRlZCBhcm1zLCB0aGUgcm9iZSBvZiB3YXIsIGFuZCB3YXIsIGFuZCB3aG8sIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgUm9tYW4gcGVvcGxlLCBpbnZpdGVkIG1lIHRvIG1lZXQgaW4gdGhlIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUsIHdpbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gZXZlciBiZWNvbWUgZnJpZW5kcyB0byBBbnRvbml1cz8gd2lsbCBBbnRvbml1cyBldmVyIG1haW50YWluIHBlYWNlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVtPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aHkgc2hvdWxkIEkgc3BlYWsgb2YgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgUm9tYW4gcGVvcGxlPyB3aGljaCwgaW4gYSBmdWxsIGFuZCBjcm93ZGVkIGZvcnVtLCB0d2ljZSwgd2l0aCBvbmUgaGVhcnQgYW5kIG9uZQogICAgICAgICAgICAgICAgICAgIHZvaWNlLCBzdW1tb25lZCBtZSBpbnRvIHRoZSBhc3NlbWJseSwgYW5kIHBsYWlubHkgc2hvd2VkIHRoZWlyIGV4Y2Vzc2l2ZQogICAgICAgICAgICAgICAgICAgIGVhZ2VybmVzcyBmb3IgdGhlIHJlY292ZXJ5IG9mIHRoZWlyIGxpYmVydHkuIFNvLCBkZXNpcmFibGUgYXMgaXQgd2FzIGJlZm9yZSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIFJvbWFuIHBlb3BsZSBmb3Igb3VyIGNvbXJhZGUsIHdlIG5vdyBoYXZlIGl0IGZvciBvdXIgbGVhZGVyLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCB3aG8gYXJlIHRocmVhdGVuaW5nCiAgICAgICAgICAgICAgICAgICAgeW91ciBmb3J0dW5lcz8gd2lsbCB0aGV5IGV2ZXIgYmUgZnJpZW5kcyB0byB5b3UsIG9yIHlvdSB0byB0aGVtPyB3aWxsIGhlIGVtYnJhY2UKICAgICAgICAgICAgICAgICAgICB0aGUgUm9tYW4ga25pZ2h0cz8gRm9yLCBzdXBwb3NlIHRoZWlyIGluY2xpbmF0aW9ucyByZXNwZWN0aW5nLCBhbmQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvcGluaW9ucyBvZiBBbnRvbml1cyB3ZXJlIHZlcnkgbXVjaCBjb25jZWFsZWQsIHdoZW4gdGhleSBzdG9vZCBpbiBjcm93ZHMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RlcHMgb2YgdGhlIHRlbXBsZSBvZiBDb25jb3JkLCB3aGVuIHRoZXkgc3RpbXVsYXRlZCB5b3UgdG8gZW5kZWF2b3IgdG8gcmVjb3ZlcgogICAgICAgICAgICAgICAgICAgIHlvdXIgbGliZXJ0eSwgd2hlbiB0aGV5IGRlbWFuZGVkIGFybXMsIHRoZSByb2JlIG9mIHdhciwgYW5kIHdhciwgYW5kIHdobywgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBSb21hbiBwZW9wbGUsIGludml0ZWQgbWUgdG8gbWVldCBpbiB0aGUgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSwgd2lsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBldmVyIGJlY29tZSBmcmllbmRzIHRvIEFudG9uaXVzPyB3aWxsIEFudG9uaXVzIGV2ZXIgbWFpbnRhaW4gcGVhY2Ugd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZW0/IDwvdHJhbnNsYXRpb24+"
translation['7.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoeSBzaG91bGQgSSBzcGVhayBvZiB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGU/IHdoaWNoLCBpbiBhIGZ1bGwgYW5kIGNyb3dkZWQgZm9ydW0sIHR3aWNlLCB3aXRoIG9uZSBoZWFydCBhbmQgb25lCiAgICAgICAgICAgICAgICAgICAgdm9pY2UsIHN1bW1vbmVkIG1lIGludG8gdGhlIGFzc2VtYmx5LCBhbmQgcGxhaW5seSBzaG93ZWQgdGhlaXIgZXhjZXNzaXZlCiAgICAgICAgICAgICAgICAgICAgZWFnZXJuZXNzIGZvciB0aGUgcmVjb3Zlcnkgb2YgdGhlaXIgbGliZXJ0eS4gU28sIGRlc2lyYWJsZSBhcyBpdCB3YXMgYmVmb3JlIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0aGUgUm9tYW4gcGVvcGxlIGZvciBvdXIgY29tcmFkZSwgd2Ugbm93IGhhdmUgaXQgZm9yIG91ciBsZWFkZXIuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBob3BlIHRoZW4gaXMgdGhlcmUgdGhhdCB0aGVyZSBldmVyIGNhbiBiZSBwZWFjZSBiZXR3ZWVuIHRoZSBSb21hbiBwZW9wbGUgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbiB3aG8gYXJlIGJlc2llZ2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgYXR0YWNraW5nIGEgZ2VuZXJhbCBhbmQgYXJteSBvZiB0aGUgUm9tYW4gcGVvcGxlPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+IFdpbGwgdGhlcmUgYmUgcGVhY2Ugd2l0aCB0aGUgbXVuaWNpcGFsIHRvd25zLCB3aG9zZSBncmVhdAogICAgICAgICAgICAgICAgICAgIHplYWwgaXMgc2hvd24gYnkgdGhlIGRlY3JlZXMgd2hpY2ggdGhleSBwYXNzLCBieSB0aGUgc29sZGllcnMgd2hvbSB0aGV5IGZ1cm5pc2gsCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHN1bXMgd2hpY2ggdGhleSBwcm9taXNlLCBzbyB0aGF0IGluIGVhY2ggdG93biB0aGVyZSBpcyBzdWNoIGEgc3Bpcml0IGFzCiAgICAgICAgICAgICAgICAgICAgbGVhdmVzIG5vIG9uZSByb29tIHRvIHdpc2ggZm9yIGEgc2VuYXRlIG9mIHRoZSBSb21hbiBwZW9wbGU/IFRoZSBtZW4gb2YgRmlybWl1bQogICAgICAgICAgICAgICAgICAgIGRlc2VydmUgdG8gYmUgcHJhaXNlZCBieSBhIHJlc29sdXRpb24gb2Ygb3VyIG9yZGVyLCB3aG8gc2V0IHRoZSBmaXJzdCBleGFtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvbWlzaW5nIG1vbmV5OyB3ZSBvdWdodCB0byByZXR1cm4gYSBjb21wbGltZW50YXJ5IGFuc3dlciB0byB0aGUgTWFycnVjaW5pLCB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHBhc3NlZCBhIHZvdGUgdGhhdCBhbGwgd2hvIGV2YWRlIG1pbGl0YXJ5IHNlcnZpY2UgYXJlIHRvIGJlIGJyYW5kZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGluZmFteS4gVGhlc2UgbWVhc3VyZXMgYXJlIGFkb3B0ZWQgYWxsIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LiBUaGVyZSBpcyBncmVhdCBwZWFjZSBiZXR3ZWVuIEFudG9uaXVzIGFuZCB0aGVzZSBtZW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gdGhlbSBhbmQgaGltISBXaGF0IGdyZWF0ZXIgZGlzY29yZCBjYW4gdGhlcmUgcG9zc2libHkgYmU/IEFuZCBpbiBkaXNjb3JkCiAgICAgICAgICAgICAgICAgICAgY2l2aWwgcGVhY2UgY2FuIG5vdCBieSBhbnkgcG9zc2liaWxpdHkgZXhpc3QuIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgVG8gc2F5IG5vdGhpbmcgb2YgdGhlIG1vYiwgbG9vayBhdCBMdWNpdXMgVmlzaWRpdXMsIGEgUm9tYW4ga25pZ2h0LCBhIG1hbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGhpZ2hlc3QgYWNjb21wbGlzaG1lbnRzIGFuZCBob25vciwgYSBjaXRpemVuIGFsd2F5cyBlbWluZW50LCB3aG9zZQogICAgICAgICAgICAgICAgICAgIHdhdGNoZnVsbmVzcyBhbmQgZXhlcnRpb25zIGZvciB0aGUgcHJvdGVjdGlvbiBvZiBteSBsaWZlIEkgZmVsdCBpbiBteQogICAgICAgICAgICAgICAgICAgIGNvbnN1bHNoaXA7IHdobyBub3Qgb25seSBleGhvcnRlZCBoaXMgbmVpZ2hib3JzIHRvIGJlY29tZSBzb2xkaWVycywgYnV0IGFsc28KICAgICAgICAgICAgICAgICAgICBhc3Npc3RlZCB0aGVtIGZyb20gaGlzIG93biByZXNvdXJjZXM7IHdpbGwgaXQgYmUgcG9zc2libGUgZXZlciB0byByZWNvbmNpbGUKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyB0byBzdWNoIGEgbWFuIGFzIHRoaXMsIGEgbWFuIHdob20gd2Ugb3VnaHQgdG8gcHJhaXNlIGJ5IGEgZm9ybWFsCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlPyBXaGF0PyB3aWxsIGl0IGJlIHBvc3NpYmxlIHRvIHJlY29uY2lsZSBoaW0gdG8gQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIsIHdobyBwcmV2ZW50ZWQgaGltIGZyb20gZW50ZXJpbmcgdGhlIGNpdHksIG9yIHRvIERlY2ltdXMgQnJ1dHVzLCB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCBoaW0gZW50cmFuY2UgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPj8KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHdpbGwgaGUgcmVjb25jaWxlIGhpbXNlbGYgdG8sCiAgICAgICAgICAgICAgICAgICAgb3IgbG9vayBtZXJjaWZ1bGx5IG9uIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgYnkgd2hpY2ggaGUgaGFzIGJlZW4gZXhjbHVkZWQgYW5kIHJlamVjdGVkPyBZb3Ugd2lsbCBzZWUKICAgICAgICAgICAgICAgICAgICBldmVyeSB0aGluZywgTyBjb25zY3JpcHQgZmF0aGVycywgaWYgeW91IGRvIG5vdCB0YWtlIGNhcmUsIGZ1bGwgb2YgaGF0cmVkIGFuZAogICAgICAgICAgICAgICAgICAgIGZ1bGwgb2YgZGlzY29yZCwgZnJvbSB3aGljaCBjaXZpbCB3YXJzIGFyaXNlLiBEbyBub3QgdGhlbiBkZXNpcmUgdGhhdCB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGU7IGFuZCBiZXdhcmUsIEkgZW50cmVhdCB5b3UgYnkgdGhlIGltbW9ydGFsIGdvZHMsIE8gY29uc2NyaXB0IGZhdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvdXQgb2YgaG9wZSBvZiBwcmVzZW50IHBlYWNlIHlvdSBkbyBub3QgbG9zZSBwZXJwZXR1YWwgcGVhY2UuIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICBhdHRhY2tpbmcgYSBnZW5lcmFsIGFuZCBhcm15IG9mIHRoZSBSb21hbiBwZW9wbGU/IDwvdHJhbnNsYXRpb24+"
translation['7.8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2lsbCB0aGVyZSBiZSBwZWFjZSB3aXRoIHRoZSBtdW5pY2lwYWwgdG93bnMsIHdob3NlIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgemVhbCBpcyBzaG93biBieSB0aGUgZGVjcmVlcyB3aGljaCB0aGV5IHBhc3MsIGJ5IHRoZSBzb2xkaWVycyB3aG9tIHRoZXkgZnVybmlzaCwKICAgICAgICAgICAgICAgICAgICBieSB0aGUgc3VtcyB3aGljaCB0aGV5IHByb21pc2UsIHNvIHRoYXQgaW4gZWFjaCB0b3duIHRoZXJlIGlzIHN1Y2ggYSBzcGlyaXQgYXMKICAgICAgICAgICAgICAgICAgICBsZWF2ZXMgbm8gb25lIHJvb20gdG8gd2lzaCBmb3IgYSBzZW5hdGUgb2YgdGhlIFJvbWFuIHBlb3BsZT8gVGhlIG1lbiBvZiBGaXJtaXVtCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZSB0byBiZSBwcmFpc2VkIGJ5IGEgcmVzb2x1dGlvbiBvZiBvdXIgb3JkZXIsIHdobyBzZXQgdGhlIGZpcnN0IGV4YW1wbGUgb2YKICAgICAgICAgICAgICAgICAgICBwcm9taXNpbmcgbW9uZXk7IHdlIG91Z2h0IHRvIHJldHVybiBhIGNvbXBsaW1lbnRhcnkgYW5zd2VyIHRvIHRoZSBNYXJydWNpbmksIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgcGFzc2VkIGEgdm90ZSB0aGF0IGFsbCB3aG8gZXZhZGUgbWlsaXRhcnkgc2VydmljZSBhcmUgdG8gYmUgYnJhbmRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW5mYW15LiBUaGVzZSBtZWFzdXJlcyBhcmUgYWRvcHRlZCBhbGwgb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gVGhlcmUgaXMgZ3JlYXQgcGVhY2UgYmV0d2VlbiBBbnRvbml1cyBhbmQgdGhlc2UgbWVuLCBhbmQKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoZW0gYW5kIGhpbSEgV2hhdCBncmVhdGVyIGRpc2NvcmQgY2FuIHRoZXJlIHBvc3NpYmx5IGJlPyBBbmQgaW4gZGlzY29yZAogICAgICAgICAgICAgICAgICAgIGNpdmlsIHBlYWNlIGNhbiBub3QgYnkgYW55IHBvc3NpYmlsaXR5IGV4aXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['7.8.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBUbyBzYXkgbm90aGluZyBvZiB0aGUgbW9iLCBsb29rIGF0IEx1Y2l1cyBWaXNpZGl1cywgYSBSb21hbiBrbmlnaHQsIGEgbWFuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHZlcnkgaGlnaGVzdCBhY2NvbXBsaXNobWVudHMgYW5kIGhvbm9yLCBhIGNpdGl6ZW4gYWx3YXlzIGVtaW5lbnQsIHdob3NlCiAgICAgICAgICAgICAgICAgICAgd2F0Y2hmdWxuZXNzIGFuZCBleGVydGlvbnMgZm9yIHRoZSBwcm90ZWN0aW9uIG9mIG15IGxpZmUgSSBmZWx0IGluIG15CiAgICAgICAgICAgICAgICAgICAgY29uc3Vsc2hpcDsgd2hvIG5vdCBvbmx5IGV4aG9ydGVkIGhpcyBuZWlnaGJvcnMgdG8gYmVjb21lIHNvbGRpZXJzLCBidXQgYWxzbwogICAgICAgICAgICAgICAgICAgIGFzc2lzdGVkIHRoZW0gZnJvbSBoaXMgb3duIHJlc291cmNlczsgd2lsbCBpdCBiZSBwb3NzaWJsZSBldmVyIHRvIHJlY29uY2lsZQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIHRvIHN1Y2ggYSBtYW4gYXMgdGhpcywgYSBtYW4gd2hvbSB3ZSBvdWdodCB0byBwcmFpc2UgYnkgYSBmb3JtYWwKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uIG9mIHRoZSBzZW5hdGU/IFdoYXQ/IHdpbGwgaXQgYmUgcG9zc2libGUgdG8gcmVjb25jaWxlIGhpbSB0byBDYWl1cwogICAgICAgICAgICAgICAgICAgIENhZXNhciwgd2hvIHByZXZlbnRlZCBoaW0gZnJvbSBlbnRlcmluZyB0aGUgY2l0eSwgb3IgdG8gRGVjaW11cyBCcnV0dXMsIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIGhpbSBlbnRyYW5jZSBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.8.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHdpbGwgaGUgcmVjb25jaWxlIGhpbXNlbGYgdG8sCiAgICAgICAgICAgICAgICAgICAgb3IgbG9vayBtZXJjaWZ1bGx5IG9uIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBieSB3aGljaCBoZSBoYXMgYmVlbiBleGNsdWRlZCBhbmQgcmVqZWN0ZWQ/IFlvdSB3aWxsIHNlZQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHRoaW5nLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBpZiB5b3UgZG8gbm90IHRha2UgY2FyZSwgZnVsbCBvZiBoYXRyZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZnVsbCBvZiBkaXNjb3JkLCBmcm9tIHdoaWNoIGNpdmlsIHdhcnMgYXJpc2UuIERvIG5vdCB0aGVuIGRlc2lyZSB0aGF0IHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZTsgYW5kIGJld2FyZSwgSSBlbnRyZWF0IHlvdSBieSB0aGUgaW1tb3J0YWwgZ29kcywgTyBjb25zY3JpcHQgZmF0aGVycywKICAgICAgICAgICAgICAgICAgICB0aGF0IG91dCBvZiBob3BlIG9mIHByZXNlbnQgcGVhY2UgeW91IGRvIG5vdCBsb3NlIHBlcnBldHVhbCBwZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['7.8.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgbm93IGlzIHRoZSBvYmplY3Qgb2YgdGhpcyBvcmF0aW9uPyBGb3Igd2UgZG8gbm90IHlldCBrbm93IHdoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgaGF2ZSBkb25lLiBCdXQgc3RpbGwgd2Ugb3VnaHQgdG8gYmUgYXdha2UsIGVyZWN0LCBwcmVwYXJlZCwgYXJtZWQgaW4KICAgICAgICAgICAgICAgICAgICBvdXIgbWluZHMsIHNvIGFzIG5vdCB0byBiZSBkZWNlaXZlZCBieSBhbnkgY2l2aWwgb3Igc3VwcGxpY2F0b3J5IGxhbmd1YWdlLCBvciBieQogICAgICAgICAgICAgICAgICAgIGFueSBwcmV0ZW5zZSBvZiBqdXN0aWNlLiBIZSBtdXN0IGhhdmUgY29tcGxpZWQgd2l0aCBhbGwgdGhlIHByb2hpYml0aW9ucyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1hbmRzIHdoaWNoIHdlIGhhdmUgc2VudCBoaW0sIGJlZm9yZSBoZSBjYW4gZGVtYW5kIGFueSB0aGluZy4gSGUgbXVzdAogICAgICAgICAgICAgICAgICAgIGhhdmUgZGVzaXN0ZWQgZnJvbSBhdHRhY2tpbmcgQnJ1dHVzIGFuZCBoaXMgYXJteSwgYW5kIGZyb20gcGx1bmRlcmluZyB0aGUgY2l0aWVzCiAgICAgICAgICAgICAgICAgICAgYW5kIGxhbmRzIG9mIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBoZQogICAgICAgICAgICAgICAgICAgIG11c3QgaGF2ZSBwZXJtaXR0ZWQgdGhlIGFtYmFzc2Fkb3JzIHRvIGdvIHRvIEJydXR1cywgYW5kIGxlZCBoaXMgYXJteSBiYWNrIG9uCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzaWRlIG9mIHRoZSBSdWJpY29uLCBhbmQgeWV0IG5vdCBjb21lIHdpdGhpbiB0d28gaHVuZHJlZCBtaWxlcyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gSGUgbXVzdCBoYXZlIHN1Ym1pdHRlZCBoaW1zZWxmIHRvIHRoZSBwb3dlciBvZiB0aGUgc2VuYXRlIGFuZCBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUuIElmIGhlIGRvZXMgdGhpcywgdGhlbiB3ZSBzaGFsbCBoYXZlIGFuIG9wcG9ydHVuaXR5IG9mIGRlbGliZXJhdGluZwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYW55IGRlY2lzaW9uIGJlaW5nIGZvcmNlZCB1cG9uIHVzIGVpdGhlciB3YXkuIElmIGhlIGRvZXMgbm90IG9iZXkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLCB0aGVuIGl0IHdpbGwgbm90IGJlIHRoZSBzZW5hdGUgdGhhdCBkZWNsYXJlcyB3YXIgYWdhaW5zdCBoaW0sIGJ1dCBoZSB3aG8KICAgICAgICAgICAgICAgICAgICB3aWxsIGhhdmUgZGVjbGFyZWQgaXQgYWdhaW5zdCB0aGUgc2VuYXRlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBoZQogICAgICAgICAgICAgICAgICAgIG11c3QgaGF2ZSBwZXJtaXR0ZWQgdGhlIGFtYmFzc2Fkb3JzIHRvIGdvIHRvIEJydXR1cywgYW5kIGxlZCBoaXMgYXJteSBiYWNrIG9uCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzaWRlIG9mIHRoZSBSdWJpY29uLCBhbmQgeWV0IG5vdCBjb21lIHdpdGhpbiB0d28gaHVuZHJlZCBtaWxlcyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gSGUgbXVzdCBoYXZlIHN1Ym1pdHRlZCBoaW1zZWxmIHRvIHRoZSBwb3dlciBvZiB0aGUgc2VuYXRlIGFuZCBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUuIElmIGhlIGRvZXMgdGhpcywgdGhlbiB3ZSBzaGFsbCBoYXZlIGFuIG9wcG9ydHVuaXR5IG9mIGRlbGliZXJhdGluZwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYW55IGRlY2lzaW9uIGJlaW5nIGZvcmNlZCB1cG9uIHVzIGVpdGhlciB3YXkuIElmIGhlIGRvZXMgbm90IG9iZXkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLCB0aGVuIGl0IHdpbGwgbm90IGJlIHRoZSBzZW5hdGUgdGhhdCBkZWNsYXJlcyB3YXIgYWdhaW5zdCBoaW0sIGJ1dCBoZSB3aG8KICAgICAgICAgICAgICAgICAgICB3aWxsIGhhdmUgZGVjbGFyZWQgaXQgYWdhaW5zdCB0aGUgc2VuYXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['7.8.27'] = ""
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXR0ZXJzIHdlcmUgY2FycmllZCBvbiB5ZXN0ZXJkYXksIE8gQ2FpdXMgUGFuc2EsIGluIGEgbW9yZSBpcnJlZ3VsYXIgbWFubmVyIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgY29uc3Vsc2hpcCByZXF1aXJlZC4gWW91IGRpZCBub3QgYXBwZWFyIHRvIG1lIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBzdWZmaWNpZW50IHJlc2lzdGFuY2UgdG8gdGhvc2UgbWVuLCB0byB3aG9tIHlvdSBhcmUgbm90IGluIHRoZSBoYWJpdCBvZgogICAgICAgICAgICAgICAgICAgIHlpZWxkaW5nLiBGb3Igd2hpbGUgdGhlIHZpcnR1ZSBvZiB0aGUgc2VuYXRlIHdhcyBzdWNoIGFzIGl0IHVzdWFsbHkgaXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFsbCBtZW4gc2F3IHRoYXQgdGhlcmUgd2FzIHdhciBpbiByZWFsaXR5LCBhbmQgc29tZSB0aG91Z2h0IHRoYXQgdGhlIG5hbWUKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBiZSBrZXB0IGJhY2s7IG9uIHRoZSBkaXZpc2lvbiwgeW91ciBpbmNsaW5hdGlvbiBpbmNsaW5lZCB0byBsZW5pdHkuIFRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJzZSB3aGljaCB3ZSBwcm9wb3NlZCB0aGVyZWZvcmUgd2FzIGRlZmVhdGVkLCBhdCB5b3VyIGluc3RpZ2F0aW9uLCBvbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGhhcnNobmVzcyBvZiB0aGUgd29yZCB3YXIuIFRoYXQgdXJnZWQgYnkgTHVjaXVzIENhZXNhciwgYSBtb3N0IGhvbm9yYWJsZQogICAgICAgICAgICAgICAgICAgIG1hbiwgcHJldmFpbGVkLCB3aGljaCwgdGFraW5nIGF3YXkgdGhhdCBvbmUgaGFyc2ggZXhwcmVzc2lvbiwgd2FzIGdlbnRsZXIgaW4gaXRzCiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgdGhhbiBpbiBpdHMgcmVhbCBpbnRlbnRpb24uIEFsdGhvdWdoIGhlLCBpbmRlZWQsIGJlZm9yZSBoZSBkZWxpdmVyZWQKICAgICAgICAgICAgICAgICAgICBoaXMgb3BpbmlvbiBhdCBhbGwsIHBsZWFkZWQgaGlzIHJlbGF0aW9uc2hpcCB0byBBbnRvbml1cyBpbiBleGN1c2UgZm9yIGl0LiBIZQogICAgICAgICAgICAgICAgICAgIGhhZCBkb25lIHRoZSBzYW1lIGluIG15IGNvbnN1bHNoaXAsIGluIHJlc3BlY3Qgb2YgaGlzIHNpc3RlcidzIGh1c2JhbmQsIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdyBpbiByZXNwZWN0IG9mIGhpcyBzaXN0ZXIncyBzb247IHNvIHRoYXQgaGUgd2FzIG1vdmVkIGJ5IHRoZSBncmllZiBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzaXN0ZXIsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGhlIHdpc2hlZCB0byBwcm92aWRlIGZvciB0aGUgc2FmZXR5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgeWV0IENhZXNhciBoaW1zZWxmIGluIHNvbWUgZGVncmVlIHJlY29tbWVuZGVkIHlvdSwgbyBjb25zY3JpcHQgZmF0aGVycywgbm90CiAgICAgICAgICAgICAgICAgICAgdG8gYWdyZWUgd2l0aCBoaW0sIHdoZW4gaGUgc2FpZCB0aGF0IGhlIHNob3VsZCBoYXZlIGV4cHJlc3NlZCBxdWl0ZSBkaWZmZXJlbnQKICAgICAgICAgICAgICAgICAgICBzZW50aW1lbnRzLCB3b3J0aHkgYm90aCBvZiBoaW1zZWxmIGFuZCBvZiB0aGUgcmVwdWJsaWMsIGlmIGhlIGhhZCBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgIGhhbXBlcmVkIGJ5IGhpcyByZWxhdGlvbnNoaXAgdG8gQW50b25pdXMuIEhlLCB0aGVuLCBpcyBoaXMgdW5jbGU7IGFyZSB5b3UgaGlzCiAgICAgICAgICAgICAgICAgICAgdW5jbGVzIHRvbywgeW91IHdobyB2b3RlZCB3aXRoIGhpbT8gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgb24gd2hhdCBkaWQgdGhlIGRpc3B1dGUgdHVybj8gU29tZSBtZW4sIGluIGRlbGl2ZXJpbmcgdGhlaXIgb3BpbmlvbiwgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGNob29zZSB0byBpbnNlcnQgdGhlIHdvcmQg4oCcd2FyLuKAnSBUaGV5IHByZWZlcnJlZCBjYWxsaW5nIGl0CiAgICAgICAgICAgICAgICAgICAg4oCcdHVtdWx0LOKAnSBiZWluZyBpZ25vcmFudCBub3Qgb25seSBvZiB0aGUgc3RhdGUgb2YgYWZmYWlycywKICAgICAgICAgICAgICAgICAgICBidXQgYWxzbyBvZiB0aGUgbWVhbmluZyBvZiB3b3Jkcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB0aGVyZQogICAgICAgICAgICAgICAgICAgIGNhbiBiZSBhIOKAnHdhcuKAnSB3aXRob3V0IGEg4oCcdHVtdWx0LOKAnSBidXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBjYW4gbm90IGJlIGEg4oCcdHVtdWx04oCdIHdpdGhvdXQgYQogICAgICAgICAgICAgICAgICAgIOKAnHdhci7igJ0gRm9yIHdoYXQgaXMgYSDigJx0dW11bHQs4oCdIGJ1dCBzdWNoCiAgICAgICAgICAgICAgICAgICAgYSB2aW9sZW50IGRpc3R1cmJhbmNlIHRoYXQgYW4gdW51c3VhbCBhbGFybSBpcyBlbmdlbmRlcmVkIGJ5IGl0PyBmcm9tIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkIHRoZSBuYW1lIOKAnHR1bXVsdOKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+SS5lLiA8Zm9yZWlnbiBsYW5nPSJsYSI+dHVtdWx0dXM8L2ZvcmVpZ24+LCBhcyBpZiBpdCB3ZXJlIDxmb3JlaWduIGxhbmc9ImxhIj50aW1vcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdHVzPC9mb3JlaWduPi48L25vdGU+IGlzIGRlcml2ZWQuIFRoZXJlZm9yZSwgb3VyIGFuY2VzdG9ycyBzcG9rZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBJdGFsaWFuIOKAnHR1bXVsdCzigJ0gd2hpY2ggd2FzIGEgZG9tZXN0aWMgb25lOyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBHYWxsaWMg4oCcdHVtdWx0LOKAnSB3aGljaCB3YXMgb24gdGhlIGZyb250aWVyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPjsgYnV0IHRoZXkgbmV2ZXIgc3Bva2Ugb2YgYW55IG90aGVyLiBBbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGEg4oCcdHVtdWx04oCdIGlzIGEgbW9yZSBzZXJpb3VzIHRoaW5nIHRoYW4gYSB3YXIgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgc2VlbiBmcm9tIHRoaXMsIHRoYXQgZHVyaW5nIGEgd2FyIGV4ZW1wdGlvbnMgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlIGFyZSB2YWxpZDsKICAgICAgICAgICAgICAgICAgICBidXQgaW4gYSB0dW11bHQgdGhleSBhcmUgbm90LiBTbyB0aGF0IGl0IGlzIHRoZSBmYWN0LCBhcyBJIGhhdmUgc2FpZCwgdGhhdCB3YXIKICAgICAgICAgICAgICAgICAgICBjYW4gZXhpc3Qgd2l0aG91dCBhIHR1bXVsdCwgYnV0IGEgdHVtdWx0IGNhbiBub3QgZXhpc3Qgd2l0aG91dCBhIHdhci4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0cnV0aCwgYXMgdGhlcmUgaXMgbm8gbWVkaXVtIGJldHdlZW4gd2FyIGFuZAogICAgICAgICAgICAgICAgICAgIHBlYWNlLCBpdCBpcyBxdWl0ZSBwbGFpbiB0aGF0IGEgdHVtdWx0LCBpZiBpdCBiZSBub3QgYSBzb3J0IG9mIHdhciwgbXVzdCBiZSBhCiAgICAgICAgICAgICAgICAgICAgc29ydCBvZiBwZWFjZTsgYW5kIHdoYXQgbW9yZSBhYnN1cmQgY2FuIGJlIHNhaWQgb3IgaW1hZ2luZWQ/IEhvd2V2ZXIsIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBzYWlkIHRvbyBtdWNoIGFib3V0IGEgd29yZCwgbGV0IHVzIHJhdGhlciBsb29rIHRvIHRoZSBmYWN0cywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0aGUgYXBwcmVjaWF0aW9uIG9mIHdoaWNoLCBJIGtub3csIGlzIGF0IHRpbWVzIGluanVyZWQgYnkgdG9vIG11Y2gKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb24gYmVpbmcgcGFpZCB0byB3b3Jkcy4gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhlcmUKICAgICAgICAgICAgICAgICAgICBjYW4gYmUgYSDigJx3YXLigJ0gd2l0aG91dCBhIOKAnHR1bXVsdCzigJ0gYnV0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgY2FuIG5vdCBiZSBhIOKAnHR1bXVsdOKAnSB3aXRob3V0IGEKICAgICAgICAgICAgICAgICAgICDigJx3YXIu4oCdIEZvciB3aGF0IGlzIGEg4oCcdHVtdWx0LOKAnSBidXQgc3VjaAogICAgICAgICAgICAgICAgICAgIGEgdmlvbGVudCBkaXN0dXJiYW5jZSB0aGF0IGFuIHVudXN1YWwgYWxhcm0gaXMgZW5nZW5kZXJlZCBieSBpdD8gZnJvbSB3aGljaAogICAgICAgICAgICAgICAgICAgIGluZGVlZCB0aGUgbmFtZSDigJx0dW11bHTigJ08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SS5lLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj50dW11bHR1czwvZm9yZWlnbj4sIGFzIGlmIGl0IHdlcmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGltb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHR1czwvZm9yZWlnbj4uPC9ub3RlPiBpcyBkZXJpdmVkLiBUaGVyZWZvcmUsIG91ciBhbmNlc3RvcnMgc3Bva2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgSXRhbGlhbiDigJx0dW11bHQs4oCdIHdoaWNoIHdhcyBhIGRvbWVzdGljIG9uZTsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgR2FsbGljIOKAnHR1bXVsdCzigJ0gd2hpY2ggd2FzIG9uIHRoZSBmcm9udGllciBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj50dW11bHR1czwvZm9yZWlnbj4sIGFzIGlmIGl0IHdlcmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGltb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHR1czwvZm9yZWlnbj4uPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT47IGJ1dCB0aGV5IG5ldmVyIHNwb2tlIG9mIGFueSBvdGhlci4gQW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIOKAnHR1bXVsdOKAnSBpcyBhIG1vcmUgc2VyaW91cyB0aGluZyB0aGFuIGEgd2FyIG1heSBiZQogICAgICAgICAgICAgICAgICAgIHNlZW4gZnJvbSB0aGlzLCB0aGF0IGR1cmluZyBhIHdhciBleGVtcHRpb25zIGZyb20gbWlsaXRhcnkgc2VydmljZSBhcmUgdmFsaWQ7CiAgICAgICAgICAgICAgICAgICAgYnV0IGluIGEgdHVtdWx0IHRoZXkgYXJlIG5vdC4gU28gdGhhdCBpdCBpcyB0aGUgZmFjdCwgYXMgSSBoYXZlIHNhaWQsIHRoYXQgd2FyCiAgICAgICAgICAgICAgICAgICAgY2FuIGV4aXN0IHdpdGhvdXQgYSB0dW11bHQsIGJ1dCBhIHR1bXVsdCBjYW4gbm90IGV4aXN0IHdpdGhvdXQgYSB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['8.1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0cnV0aCwgYXMgdGhlcmUgaXMgbm8gbWVkaXVtIGJldHdlZW4gd2FyIGFuZAogICAgICAgICAgICAgICAgICAgIHBlYWNlLCBpdCBpcyBxdWl0ZSBwbGFpbiB0aGF0IGEgdHVtdWx0LCBpZiBpdCBiZSBub3QgYSBzb3J0IG9mIHdhciwgbXVzdCBiZSBhCiAgICAgICAgICAgICAgICAgICAgc29ydCBvZiBwZWFjZTsgYW5kIHdoYXQgbW9yZSBhYnN1cmQgY2FuIGJlIHNhaWQgb3IgaW1hZ2luZWQ/IEhvd2V2ZXIsIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBzYWlkIHRvbyBtdWNoIGFib3V0IGEgd29yZCwgbGV0IHVzIHJhdGhlciBsb29rIHRvIHRoZSBmYWN0cywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0aGUgYXBwcmVjaWF0aW9uIG9mIHdoaWNoLCBJIGtub3csIGlzIGF0IHRpbWVzIGluanVyZWQgYnkgdG9vIG11Y2gKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb24gYmVpbmcgcGFpZCB0byB3b3Jkcy4gPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgYXJlIHVud2lsbGluZyB0aGF0IHRoaXMgc2hvdWxkIGFwcGVhciB0byBiZSBhIHdhci4gV2hhdCBpcyB0aGUgb2JqZWN0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIG9mIG91ciBnaXZpbmcgYXV0aG9yaXR5IHRvIHRoZSBtdW5pY2lwYWwgdG93bnMgYW5kIGNvbG9uaWVzIHRvIGV4Y2x1ZGUgQW50b25pdXM/CiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIGF1dGhvcml6aW5nIHNvbGRpZXJzIHRvIGJlIGVubGlzdGVkIHdpdGhvdXQgYW55IGZvcmNlLCB3aXRob3V0IHRoZSB0ZXJyb3IKICAgICAgICAgICAgICAgICAgICBvZiBhbnkgZmluZSwgb2YgdGhlaXIgb3duIGluY2xpbmF0aW9uIGFuZCBlYWdlcm5lc3M/IG9mIHBlcm1pdHRpbmcgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIHByb21pc2UgbW9uZXkgZm9yIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSByZXB1YmxpYz8gRm9yIGlmIHRoZSBuYW1lIG9mIHdhciBiZQogICAgICAgICAgICAgICAgICAgIHRha2VuIGF3YXksIHRoZSB6ZWFsIG9mIHRoZSBtdW5pY2lwYWwgdG93bnMgd2lsbCBiZSB0YWtlbiBhd2F5IHRvby4gQW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHVuYW5pbW91cyBmZWVsaW5nIG9mIHRoZSBSb21hbiBwZW9wbGUgd2hpY2ggYXQgcHJlc2VudCBwb3VycyBpdHNlbGYgaW50byBvdXIKICAgICAgICAgICAgICAgICAgICBjYXVzZSwgaWYgd2UgY29vbCB1cG9uIGl0LCBtdXN0IGluZXZpdGFibHkgYmUgZGFtcGVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgd2h5IG5lZWQgSSBzYXkgbW9yZT8gRGVjaW11cyBCcnV0dXMgaXMgYXR0YWNrZWQuIElzIG5vdCB0aGF0IHdhcj8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+IGlzIGJlc2llZ2VkLiBJcyBub3QgZXZlbiB0aGF0IHdhcj8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBpcyBsYWlkIHdhc3RlLiBXaGF0IHBlYWNlIGNhbgogICAgICAgICAgICAgICAgICAgIGJlIG1vcmUgYXNzdXJlZCB0aGFuIHRoaXM/IFdobyBjYW4gdGhpbmsgb2YgY2FsbGluZyB0aGF0IHdhcj8gV2UgaGF2ZSBzZW50IGZvcnRoCiAgICAgICAgICAgICAgICAgICAgYSBjb25zdWwsIGEgbW9zdCBnYWxsYW50IG1hbiwgd2l0aCBhbiBhcm15LCB3aG8sIHRob3VnaCBoZSB3YXMgaW4gYSB3ZWFrIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhIGxvbmcgYW5kIHNlcmlvdXMgaWxsbmVzcywgc3RpbGwgdGhvdWdodCBoZSBvdWdodCBub3QgdG8gbWFrZSBhbnkgZXhjdXNlCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSB3YXMgc3VtbW9uZWQgdG8gdGhlIHByb3RlY3Rpb24gb2YgdGhlIHJlcHVibGljLiBDYWl1cyBDYWVzYXIsIGluZGVlZCwKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHdhaXQgZm9yIG91ciBkZWNyZWVzOyBlc3BlY2lhbGx5IGFzIHRoYXQgY29uZHVjdCBvZiBoaXMgd2FzIG5vdCB1bnN1aXRlZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBhZ2UuIEhlIHVuZGVydG9vayB3YXIgYWdhaW5zdCBBbnRvbml1cyBvZiBoaXMgb3duIGFjY29yZDsgZm9yIHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgdGltZSB0byBwYXNzIGEgZGVjcmVlOyBhbmQgaGUgc2F3IHRoYXQsIGlmIGhlIGxldCBzbGlwIHRoZSBvcHBvcnR1bml0eQogICAgICAgICAgICAgICAgICAgIG9mIHdhZ2luZyB3YXIsIHdoZW4gdGhlIHJlcHVibGljIHdhcyBjcnVzaGVkIGl0IHdvdWxkIGJlIGltcG9zc2libGUgdG8gcGFzcyBhbnkKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzIGF0IGFsbC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXkgYW5kIHRoZWlyIGFybXMsIHRoZW4sIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdyBhdCBwZWFjZS4gSGUgaXMgbm90IGFuIGVuZW15IHdob3NlIGdhcnJpc29uIEhpcnRpdXMgaGFzIGRyaXZlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2xhdGVybmEiIGtleT0icGVyc2V1cyxDbGF0ZXJuYSI+Q2xhdGVybmE8L3BsYWNlTmFtZT47IGhlIGlzIG5vdCBhbiBlbmVteQogICAgICAgICAgICAgICAgICAgIHdobyBpcyBpbiBhcm1zIHJlc2lzdGluZyBhIGNvbnN1bCwgYW5kIGF0dGFja2luZyBhIGNvbnN1bCBlbGVjdDsgYW5kIHRob3NlIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgd29yZHMgb2YgYW4gZW5lbXksIG5vciBpcyB0aGF0IHdhcmxpa2UgbGFuZ3VhZ2UsIHdoaWNoIFBhbnNhIHJlYWQganVzdAogICAgICAgICAgICAgICAgICAgIG5vdyBvdXQgb2YgaGlzIGNvbGxlYWd1ZSdzIGxldHRlcnM6IOKAnEkgZHJvdmUgb3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGdhcnJpc29uLuKAnSDigJxJIGdvdCBwb3NzZXNzaW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2xhdGVybmEiIGtleT0icGVyc2V1cyxDbGF0ZXJuYSI+Q2xhdGVybmE8L3BsYWNlTmFtZT4u4oCdIOKAnFRoZQogICAgICAgICAgICAgICAgICAgIGNhdmFscnkgd2VyZSByb3V0ZWQu4oCdIOKAnEEgYmF0dGxlIHdhcyBmb3VnaHQu4oCdCiAgICAgICAgICAgICAgICAgICAg4oCcQSBnb29kIG1hbnkgbWVuIHdlcmUgc2xhaW4u4oCdIFdoYXQgcGVhY2UgY2FuIGJlIGdyZWF0ZXIgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXM/IExldmllcyBvZiB0cm9vcHMgYXJlIG9yZGVyZWQgdGhyb3VnaG91dCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyBhbGwgZXhlbXB0aW9ucyBmcm9tIHNlcnZpY2UgYXJlIHN1c3BlbmRlZDsgdGhlIHJvYmUgb2YKICAgICAgICAgICAgICAgICAgICB3YXIgaXMgdG8gYmUgYXNzdW1lZCB0b21vcnJvdzsgdGhlIGNvbnN1bCBoYXMgc2FpZCB0aGF0IGhlIHNoYWxsIGNvbWUgZG93biB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBzZW5hdGUtaG91c2Ugd2l0aCBhbiBhcm1lZCBndWFyZC4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+IGlzIGJlc2llZ2VkLiBJcyBub3QgZXZlbiB0aGF0IHdhcj8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBpcyBsYWlkIHdhc3RlLiBXaGF0IHBlYWNlIGNhbgogICAgICAgICAgICAgICAgICAgIGJlIG1vcmUgYXNzdXJlZCB0aGFuIHRoaXM/IFdobyBjYW4gdGhpbmsgb2YgY2FsbGluZyB0aGF0IHdhcj8gV2UgaGF2ZSBzZW50IGZvcnRoCiAgICAgICAgICAgICAgICAgICAgYSBjb25zdWwsIGEgbW9zdCBnYWxsYW50IG1hbiwgd2l0aCBhbiBhcm15LCB3aG8sIHRob3VnaCBoZSB3YXMgaW4gYSB3ZWFrIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhIGxvbmcgYW5kIHNlcmlvdXMgaWxsbmVzcywgc3RpbGwgdGhvdWdodCBoZSBvdWdodCBub3QgdG8gbWFrZSBhbnkgZXhjdXNlCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSB3YXMgc3VtbW9uZWQgdG8gdGhlIHByb3RlY3Rpb24gb2YgdGhlIHJlcHVibGljLiBDYWl1cyBDYWVzYXIsIGluZGVlZCwKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHdhaXQgZm9yIG91ciBkZWNyZWVzOyBlc3BlY2lhbGx5IGFzIHRoYXQgY29uZHVjdCBvZiBoaXMgd2FzIG5vdCB1bnN1aXRlZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBhZ2UuIEhlIHVuZGVydG9vayB3YXIgYWdhaW5zdCBBbnRvbml1cyBvZiBoaXMgb3duIGFjY29yZDsgZm9yIHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgdGltZSB0byBwYXNzIGEgZGVjcmVlOyBhbmQgaGUgc2F3IHRoYXQsIGlmIGhlIGxldCBzbGlwIHRoZSBvcHBvcnR1bml0eQogICAgICAgICAgICAgICAgICAgIG9mIHdhZ2luZyB3YXIsIHdoZW4gdGhlIHJlcHVibGljIHdhcyBjcnVzaGVkIGl0IHdvdWxkIGJlIGltcG9zc2libGUgdG8gcGFzcyBhbnkKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzIGF0IGFsbC4gPC90cmFuc2xhdGlvbj4="
translation['8.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGV5IGFuZCB0aGVpciBhcm1zLCB0aGVuLCBhcmUKICAgICAgICAgICAgICAgICAgICBub3cgYXQgcGVhY2UuIEhlIGlzIG5vdCBhbiBlbmVteSB3aG9zZSBnYXJyaXNvbiBIaXJ0aXVzIGhhcyBkcml2ZW4gZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENsYXRlcm5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDbGF0ZXJuYSI+Q2xhdGVybmE8L3BsYWNlTmFtZT47IGhlIGlzIG5vdCBhbiBlbmVteQogICAgICAgICAgICAgICAgICAgIHdobyBpcyBpbiBhcm1zIHJlc2lzdGluZyBhIGNvbnN1bCwgYW5kIGF0dGFja2luZyBhIGNvbnN1bCBlbGVjdDsgYW5kIHRob3NlIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgd29yZHMgb2YgYW4gZW5lbXksIG5vciBpcyB0aGF0IHdhcmxpa2UgbGFuZ3VhZ2UsIHdoaWNoIFBhbnNhIHJlYWQganVzdAogICAgICAgICAgICAgICAgICAgIG5vdyBvdXQgb2YgaGlzIGNvbGxlYWd1ZSdzIGxldHRlcnM6IOKAnEkgZHJvdmUgb3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGdhcnJpc29uLuKAnSDigJxJIGdvdCBwb3NzZXNzaW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2xhdGVybmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENsYXRlcm5hIj5DbGF0ZXJuYTwvcGxhY2VOYW1lPi7igJ0g4oCcVGhlCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSB3ZXJlIHJvdXRlZC7igJ0g4oCcQSBiYXR0bGUgd2FzIGZvdWdodC7igJ0KICAgICAgICAgICAgICAgICAgICDigJxBIGdvb2QgbWFueSBtZW4gd2VyZSBzbGFpbi7igJ0gV2hhdCBwZWFjZSBjYW4gYmUgZ3JlYXRlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcz8gTGV2aWVzIG9mIHRyb29wcyBhcmUgb3JkZXJlZCB0aHJvdWdob3V0IGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPjsgYWxsIGV4ZW1wdGlvbnMgZnJvbSBzZXJ2aWNlIGFyZSBzdXNwZW5kZWQ7IHRoZSByb2JlIG9mCiAgICAgICAgICAgICAgICAgICAgd2FyIGlzIHRvIGJlIGFzc3VtZWQgdG9tb3Jyb3c7IHRoZSBjb25zdWwgaGFzIHNhaWQgdGhhdCBoZSBzaGFsbCBjb21lIGRvd24gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlLWhvdXNlIHdpdGggYW4gYXJtZWQgZ3VhcmQuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXMgbm90IHRoaXMgd2FyPyBZZXMsIGl0IGlzIHN1Y2ggYSB3YXIgYXMgaGFzIG5ldmVyIGJlZW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaW4gYWxsIG90aGVyIHdhcnMsIGFuZCBtb3N0IGVzcGVjaWFsbHkgaW4gY2l2aWwgd2FycywKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgYSBkaWZmZXJlbmNlIGFzIHRvIHRoZSBwb2xpdGljYWwgc3RhdGUgb2YgdGhlIHJlcHVibGljIHdoaWNoIGdhdmUgcmlzZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjb250ZXN0LiBTdWxsYSBjb250ZW5kZWQgYWdhaW5zdCBTdWxwaWNpdXMgYWJvdXQgdGhlIGZvcmNlIG9mIGxhd3Mgd2hpY2gKICAgICAgICAgICAgICAgICAgICBTdWxsYSBzYWlkIGhhZCBiZWVuIHBhc3NlZCBieSB2aW9sZW5jZS4gQ2lubmEgd2FycmVkIGFnYWluc3QgT2N0YXZpdXMgYmVjYXVzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB2b3RlcyBvZiB0aGUgbmV3IGNpdGl6ZW5zLiBBZ2FpbiwgU3VsbGEgd2FzIGF0IHZhcmlhbmNlIHdpdGggQ2lubmEgYW5kCiAgICAgICAgICAgICAgICAgICAgTWFyaXVzLCBpbiBvcmRlciB0byBwcmV2ZW50IHVud29ydGh5IG1lbiBmcm9tIGF0dGFpbmluZyBwb3dlciwgYW5kIHRvIGF2ZW5nZSB0aGUKICAgICAgICAgICAgICAgICAgICBjcnVlbCBkZWF0aCBvZiBtb3N0IGlsbHVzdHJpb3VzIG1lbi4gVGhlIGNhdXNlcyBvZiBhbGwgdGhlc2Ugd2FycyBhcm9zZSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHplYWwgb2YgZGlmZmVyZW50IHBhcnRpZXMsIGZvciB3aGF0IHRoZXkgY29uc2lkZXJlZCB0aGUgaW50ZXJlc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIE9mIHRoZSBsYXN0IGNpdmlsIHdhciBJIGNhbiBub3QgYmVhciB0byBzcGVhazogSSBkbyBub3QgdW5kZXJzdGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiBpdDsgSSBkZXRlc3QgdGhlIHJlc3VsdC4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaW4gYWxsIG90aGVyIHdhcnMsIGFuZCBtb3N0IGVzcGVjaWFsbHkgaW4gY2l2aWwgd2FycywKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgYSBkaWZmZXJlbmNlIGFzIHRvIHRoZSBwb2xpdGljYWwgc3RhdGUgb2YgdGhlIHJlcHVibGljIHdoaWNoIGdhdmUgcmlzZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjb250ZXN0LiBTdWxsYSBjb250ZW5kZWQgYWdhaW5zdCBTdWxwaWNpdXMgYWJvdXQgdGhlIGZvcmNlIG9mIGxhd3Mgd2hpY2gKICAgICAgICAgICAgICAgICAgICBTdWxsYSBzYWlkIGhhZCBiZWVuIHBhc3NlZCBieSB2aW9sZW5jZS4gQ2lubmEgd2FycmVkIGFnYWluc3QgT2N0YXZpdXMgYmVjYXVzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB2b3RlcyBvZiB0aGUgbmV3IGNpdGl6ZW5zLiBBZ2FpbiwgU3VsbGEgd2FzIGF0IHZhcmlhbmNlIHdpdGggQ2lubmEgYW5kCiAgICAgICAgICAgICAgICAgICAgTWFyaXVzLCBpbiBvcmRlciB0byBwcmV2ZW50IHVud29ydGh5IG1lbiBmcm9tIGF0dGFpbmluZyBwb3dlciwgYW5kIHRvIGF2ZW5nZSB0aGUKICAgICAgICAgICAgICAgICAgICBjcnVlbCBkZWF0aCBvZiBtb3N0IGlsbHVzdHJpb3VzIG1lbi4gVGhlIGNhdXNlcyBvZiBhbGwgdGhlc2Ugd2FycyBhcm9zZSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHplYWwgb2YgZGlmZmVyZW50IHBhcnRpZXMsIGZvciB3aGF0IHRoZXkgY29uc2lkZXJlZCB0aGUgaW50ZXJlc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIE9mIHRoZSBsYXN0IGNpdmlsIHdhciBJIGNhbiBub3QgYmVhciB0byBzcGVhazogSSBkbyBub3QgdW5kZXJzdGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiBpdDsgSSBkZXRlc3QgdGhlIHJlc3VsdC4gPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['8.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpcyBpcyB0aGUgZmlmdGggY2l2aWwgd2FyIChhbmQgYWxsIG9mIHRoZW0gaGF2ZSBmYWxsZW4gdXBvbiBvdXIgdGltZXMpOyB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCB3aGljaCBoYXMgbm90IG9ubHkgbm90IGJyb3VnaHQgZGlzc2Vuc2lvbnMgYW5kIGRpc2NvcmQgYW1vbmcgdGhlIGNpdGl6ZW5zLAogICAgICAgICAgICAgICAgICAgIGJ1dCB3aGljaCBoYXMgYmVlbiBzaWduYWxpemVkIGJ5IGV4dHJhb3JkaW5hcnkgdW5hbmltaXR5IGFuZCBpbmNyZWRpYmxlIGNvbmNvcmQuCiAgICAgICAgICAgICAgICAgICAgQWxsIG9mIHRoZW0gaGF2ZSB0aGUgc2FtZSB3aXNoLCBhbGwgZGVmZW5kIHRoZSBzYW1lIG9iamVjdHMsIGFsbCBhcmUgaW5zcGlyZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBzYW1lIHNlbnRpbWVudHMuIFdoZW4gSSBzYXkgYWxsLCBJIGV4Y2VwdCB0aG9zZSB3aG9tIG5vIG9uZSB0aGlua3MKICAgICAgICAgICAgICAgICAgICB3b3J0aHkgb2YgYmVpbmcgY2l0aXplbnMgYXQgYWxsLiBXaGF0LCB0aGVuLCBpcyB0aGUgY2F1c2Ugb2Ygd2FyLCBhbmQgd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBvYmplY3QgYWltZWQgYXQ/IFdlIGFyZSBkZWZlbmRpbmcgdGhlIHRlbXBsZXMgb2YgdGhlIGltbW9ydGFsIGdvZHMsIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGluZyB0aGUgd2FsbHMgb2YgdGhlIGNpdHksIHdlIGFyZSBkZWZlbmRpbmcgdGhlIGhvbWVzIGFuZCBoYWJpdGF0aW9ucyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBSb21hbiBwZW9wbGUsIHRoZSBob3VzZWhvbGQgZ29kcywgdGhlIGFsdGFycywgdGhlIGhlYXJ0aHMgYW5kIHRoZSBzZXB1bGNoZXJzCiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIGZvcmVmYXRoZXJzOyB3ZSBhcmUgZGVmZW5kaW5nIG91ciBsYXdzLCBvdXIgY291cnRzIG9mIGp1c3RpY2UsIG91cgogICAgICAgICAgICAgICAgICAgIGZyZWVkb20sIG91ciB3aXZlcywgb3VyIGNoaWxkcmVuLCBhbmQgb3VyIGNvdW50cnkuIE9uIHRoZSBvdGhlciBoYW5kLCBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBsYWJvcnMgYW5kIGZpZ2h0cyBpbiBvcmRlciB0byB0aHJvdyBpbnRvIGNvbmZ1c2lvbiBhbmQgb3ZlcnR1cm4gYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzOyBhbmQgaG9wZXMgdG8gaGF2ZSByZWFzb24gdG8gdGhpbmsgdGhlIHBsdW5kZXIgb2YgdGhlIHJlcHVibGljCiAgICAgICAgICAgICAgICAgICAgc3VmZmljaWVudCBjYXVzZSBmb3IgdGhlIHdhciwgd2hpbGUgaGUgc3F1YW5kZXJzIHBhcnQgb2Ygb3VyIGZvcnR1bmVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRlcyB0aGUgcmVzdCBhbW9uZyBoaXMgcGFycmljaWRhbCBmb2xsb3dlcnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGlsZSwgdGhlbiwgdGhlIG1vdGl2ZXMgZm9yIHdhciBhcmUgc28gZGlmZmVyZW50LCBhIG1vc3QgbWlzZXJhYmxlIGNpcmN1bXN0YW5jZQogICAgICAgICAgICAgICAgICAgIGlzIHdoYXQgdGhhdCBmZWxsb3cgcHJvbWlzZXMgdG8gaGlzIGJhbmQgb2Ygcm9iYmVycy4gSW4gdGhlIGZpcnN0IHBsYWNlIG91cgogICAgICAgICAgICAgICAgICAgIGhvdXNlczsgZm9yIGhlIGRlY2xhcmVzIHRoYXQgaGUgd2lsbCBkaXZpZGUgdGhlIGNpdHkgYW1vbmcgdGhlbTsgYW5kIGFmdGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSB3aWxsIGxlYWQgdGhlbSBvdXQgYXQgd2hhdGV2ZXIgZ2F0ZSBhbmQgc2V0dGxlIHRoZW0gb24gd2hhdGV2ZXIgbGFuZHMgdGhleQogICAgICAgICAgICAgICAgICAgIHBsZWFzZS4gQWxsIHRoZSBDYXBob25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVzZSB3ZXJlIHRoZSBuYW1lcyBvZiBvZmZpY2VycwogICAgICAgICAgICAgICAgICAgICAgICBkZXZvdGVkIHRvIEFudG9uaXVzLjwvbm90ZT4gYWxsIHRoZSBTYXhhcywgYW5kIHRoZSBvdGhlciBwbGFndWVzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgYXR0ZW5kIEFudG9uaXVzLCBhcmUgbWFya2luZyBvdXQgZm9yIHRoZW1zZWx2ZXMgaW4gdGhlaXIgb3duIG1pbmRzIG1vc3QKICAgICAgICAgICAgICAgICAgICBiZWF1dGlmdWwgaG91c2VzLCBhbmQgZ2FyZGVucywgYW5kIHZpbGxhcywgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUdXNjdWx1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVHVzY3VsdW0iPlR1c2N1bHVtPC9wbGFjZU5hbWU+IGFuZCBBbGJhOyBhbmQgdGhvc2UgY2xvd25pc2ggbWVu4oCUaWYgaW5kZWVkCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgbWVuLCBhbmQgbm90IHJhdGhlciBicnV0ZSBiZWFzdHPigJRhcmUgYm9ybmUgb24gaW4gdGhlaXIgZW1wdHkKICAgICAgICAgICAgICAgICAgICBob3BlcyBhcyBmYXIgYXMgdGhlIHdhdGVycyBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LiBTbyBBbnRvbml1cyBoYXMgc29tZXRoaW5nIHRvIHByb21pc2UgdG8gaGlzIGZvbGxvd2Vycy4KICAgICAgICAgICAgICAgICAgICBXaGF0IGNhbiB3ZSBkbz8gSGF2ZSB3ZSBhbnkgdGhpbmcgb2YgdGhlIHNvcnQ/IE1heSB0aGUgZ29kcyBncmFudCB1cyBhIGJldHRlcgogICAgICAgICAgICAgICAgICAgIGZhdGUhIGZvciBvdXIgZXhwcmVzcyBvYmplY3QgaXMgdG8gcHJldmVudCBhbnkgb25lIGF0IGFsbCBmcm9tIGhlcmVhZnRlciBtYWtpbmcKICAgICAgICAgICAgICAgICAgICBzaW1pbGFyIHByb21pc2VzLiBJIHNheSB0aGlzIGFnYWluc3QgbXkgd2lsbCwgc3RpbGwgSSBtdXN0IHNheSBpdDvigJR0aGUKICAgICAgICAgICAgICAgICAgICBhdWN0aW9uIHNhbmN0aW9uZWQgYnkgQ2Flc2FyLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBnaXZlcyBtYW55IHdpY2tlZCBtZW4gYm90aAogICAgICAgICAgICAgICAgICAgIGhvcGUgYW5kIGF1ZGFjaXR5LiBGb3IgdGhleSBzYXcgc29tZSBtZW4gYmVjb21lIHN1ZGRlbmx5IHJpY2ggZnJvbSBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIGJlZ2dhcnMuIFRoZXJlZm9yZSwgdGhvc2UgbWVuIHdobyBhcmUgaGFuZ2luZyBvdmVyIG91ciBwcm9wZXJ0eSwgYW5kIHRvIHdob20KICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBwcm9taXNlcyBldmVyeXRoaW5nLCBhcmUgYWx3YXlzIGxvbmdpbmcgdG8gc2VlIGFuIGF1Y3Rpb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBjYW4gd2UgZG8/IFdoYXQgZG8gd2UgcHJvbWlzZSBvdXIgc29sZGllcnM/CiAgICAgICAgICAgICAgICAgICAgVGhpbmdzIG11Y2ggYmV0dGVyIGFuZCBtb3JlIGhvbm9yYWJsZS4gRm9yIHByb21pc2VzIHRvIGJlIGVhcm5lZCBieSB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zIGFyZSBwZXJuaWNpb3VzIGJvdGggdG8gdGhvc2Ugd2hvIGV4cGVjdCB0aGVtLCBhbmQgdG8gdGhvc2Ugd2hvIHByb21pc2UKICAgICAgICAgICAgICAgICAgICB0aGVtLiBXZSBwcm9taXNlIHRvIG91ciBzb2xkaWVycyBmcmVlZG9tLCByaWdodHMsIGxhd3MsIGp1c3RpY2UsIHRoZSBlbXBpcmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd29ybGQsIGRpZ25pdHksIHBlYWNlLCB0cmFucXVpbGxpdHkuIFRoZSBwcm9taXNlcyB0aGVuIG9mIEFudG9uaXVzIGFyZQogICAgICAgICAgICAgICAgICAgIGJsb29keSwgcG9sbHV0ZWQsIHdpY2tlZCwgb2Rpb3VzIGZvciBnb2RzIGFuZCBtZW4sIG5laXRoZXIgbGFzdGluZyBub3Igc2FsdXRhcnk7CiAgICAgICAgICAgICAgICAgICAgb3Vycywgb24gdGhlIG90aGVyIGhhbmQsIGFyZSBob25vcmFibGUsIHVwcmlnaHQsIGdsb3Jpb3VzLCBmdWxsIG9mIGhhcHBpbmVzcywKICAgICAgICAgICAgICAgICAgICBhbmQgZnVsbCBvZiBwaWV0eS4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXNlIHdlcmUgdGhlIG5hbWVzIG9mIG9mZmljZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIGRldm90ZWQgdG8gQW50b25pdXMuPC9ub3RlPiBhbGwgdGhlIFNheGFzLCBhbmQgdGhlIG90aGVyIHBsYWd1ZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhdHRlbmQgQW50b25pdXMsIGFyZSBtYXJraW5nIG91dCBmb3IgdGhlbXNlbHZlcyBpbiB0aGVpciBvd24gbWluZHMgbW9zdAogICAgICAgICAgICAgICAgICAgIGJlYXV0aWZ1bCBob3VzZXMsIGFuZCBnYXJkZW5zLCBhbmQgdmlsbGFzLCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFR1c2N1bHVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUdXNjdWx1bSI+VHVzY3VsdW08L3BsYWNlTmFtZT4gYW5kIEFsYmE7IGFuZCB0aG9zZSBjbG93bmlzaCBtZW7igJRpZiBpbmRlZWQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBtZW4sIGFuZCBub3QgcmF0aGVyIGJydXRlIGJlYXN0c+KAlGFyZSBib3JuZSBvbiBpbiB0aGVpciBlbXB0eQogICAgICAgICAgICAgICAgICAgIGhvcGVzIGFzIGZhciBhcyB0aGUgd2F0ZXJzIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB1dGVvbGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFB1dGVvbGkiPlB1dGVvbGk8L3BsYWNlTmFtZT4uIFNvIEFudG9uaXVzIGhhcyBzb21ldGhpbmcgdG8gcHJvbWlzZSB0byBoaXMgZm9sbG93ZXJzLgogICAgICAgICAgICAgICAgICAgIFdoYXQgY2FuIHdlIGRvPyBIYXZlIHdlIGFueSB0aGluZyBvZiB0aGUgc29ydD8gTWF5IHRoZSBnb2RzIGdyYW50IHVzIGEgYmV0dGVyCiAgICAgICAgICAgICAgICAgICAgZmF0ZSEgZm9yIG91ciBleHByZXNzIG9iamVjdCBpcyB0byBwcmV2ZW50IGFueSBvbmUgYXQgYWxsIGZyb20gaGVyZWFmdGVyIG1ha2luZwogICAgICAgICAgICAgICAgICAgIHNpbWlsYXIgcHJvbWlzZXMuIEkgc2F5IHRoaXMgYWdhaW5zdCBteSB3aWxsLCBzdGlsbCBJIG11c3Qgc2F5IGl0O+KAlHRoZQogICAgICAgICAgICAgICAgICAgIGF1Y3Rpb24gc2FuY3Rpb25lZCBieSBDYWVzYXIsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGdpdmVzIG1hbnkgd2lja2VkIG1lbiBib3RoCiAgICAgICAgICAgICAgICAgICAgaG9wZSBhbmQgYXVkYWNpdHkuIEZvciB0aGV5IHNhdyBzb21lIG1lbiBiZWNvbWUgc3VkZGVubHkgcmljaCBmcm9tIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYmVnZ2Fycy4gVGhlcmVmb3JlLCB0aG9zZSBtZW4gd2hvIGFyZSBoYW5naW5nIG92ZXIgb3VyIHByb3BlcnR5LCBhbmQgdG8gd2hvbQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIHByb21pc2VzIGV2ZXJ5dGhpbmcsIGFyZSBhbHdheXMgbG9uZ2luZyB0byBzZWUgYW4gYXVjdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['8.3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBjYW4gd2UgZG8/IFdoYXQgZG8gd2UgcHJvbWlzZSBvdXIgc29sZGllcnM/CiAgICAgICAgICAgICAgICAgICAgVGhpbmdzIG11Y2ggYmV0dGVyIGFuZCBtb3JlIGhvbm9yYWJsZS4gRm9yIHByb21pc2VzIHRvIGJlIGVhcm5lZCBieSB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zIGFyZSBwZXJuaWNpb3VzIGJvdGggdG8gdGhvc2Ugd2hvIGV4cGVjdCB0aGVtLCBhbmQgdG8gdGhvc2Ugd2hvIHByb21pc2UKICAgICAgICAgICAgICAgICAgICB0aGVtLiBXZSBwcm9taXNlIHRvIG91ciBzb2xkaWVycyBmcmVlZG9tLCByaWdodHMsIGxhd3MsIGp1c3RpY2UsIHRoZSBlbXBpcmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd29ybGQsIGRpZ25pdHksIHBlYWNlLCB0cmFucXVpbGxpdHkuIFRoZSBwcm9taXNlcyB0aGVuIG9mIEFudG9uaXVzIGFyZQogICAgICAgICAgICAgICAgICAgIGJsb29keSwgcG9sbHV0ZWQsIHdpY2tlZCwgb2Rpb3VzIGZvciBnb2RzIGFuZCBtZW4sIG5laXRoZXIgbGFzdGluZyBub3Igc2FsdXRhcnk7CiAgICAgICAgICAgICAgICAgICAgb3Vycywgb24gdGhlIG90aGVyIGhhbmQsIGFyZSBob25vcmFibGUsIHVwcmlnaHQsIGdsb3Jpb3VzLCBmdWxsIG9mIGhhcHBpbmVzcywKICAgICAgICAgICAgICAgICAgICBhbmQgZnVsbCBvZiBwaWV0eS4gPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['8.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUgYWxzbyBRdWludHVzIEZ1Zml1cywgYSBicmF2ZSBhbmQgZW5lcmdldGljIG1hbiwgYW5kIGEgZnJpZW5kIG9mIG1pbmUsCiAgICAgICAgICAgICAgICAgICAgcmVtaW5kcyBtZSBvZiB0aGUgYWR2YW50YWdlcyBvZiBwZWFjZS4gQXMgaWYsIGlmIGl0IHdlcmUgbmVjZXNzYXJ5IHRvIHByYWlzZQogICAgICAgICAgICAgICAgICAgIHBlYWNlLCBJIGNvdWxkIG5vdCBkbyBpdCBteXNlbGYgcXVpdGUgYXMgd2VsbCBhcyBoZS4gRm9yIGlzIGl0IG9uY2Ugb25seSB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGRlZmVuZGVkIHBlYWNlPyBIYXZlIEkgbm90IGF0IGFsbCB0aW1lcyBsYWJvcmVkIGZvciB0cmFucXVpbGxpdHk/IHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgZGVzaXJhYmxlIGZvciBhbGwgZ29vZCBtZW4sIGJ1dCBlc3BlY2lhbGx5IGZvciBtZS4gRm9yIHdoYXQgY291cnNlIGNvdWxkIG15CiAgICAgICAgICAgICAgICAgICAgaW5kdXN0cnkgcHVyc3VlIHdpdGhvdXQgZm9yZW5zaWMgY2F1c2VzLCB3aXRob3V0IGxhd3MsIHdpdGhvdXQgY291cnRzIG9mCiAgICAgICAgICAgICAgICAgICAganVzdGljZT8gYW5kIHRoZXNlIHRoaW5ncyBjYW4gaGF2ZSBubyBleGlzdGVuY2Ugd2hlbiBjaXZpbCBwZWFjZSBpcyB0YWtlbiBhd2F5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBJIHdhbnQgdG8ga25vdyB3aGF0IHlvdSBtZWFuLCBPCiAgICAgICAgICAgICAgICAgICAgQ2FsZW51cz8gRG8geW91IGNhbGwgc2xhdmVyeSBwZWFjZT8gT3VyIGFuY2VzdG9ycyB1c2VkIHRvIHRha2UgdXAgYXJtcyBub3QKICAgICAgICAgICAgICAgICAgICBtZXJlbHkgdG8gc2VjdXJlIHRoZWlyIGZyZWVkb20sIGJ1dCBhbHNvIHRvIGFjcXVpcmUgZW1waXJlOyB5b3UgdGhpbmsgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIHRocm93IGF3YXkgb3VyIGFybXMsIGluIG9yZGVyIHRvIGJlY29tZSBzbGF2ZXMuIFdoYXQganVzdGVyIGNhdXNlIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgZm9yIHdhZ2luZyB3YXIgdGhhbiB0aGUgd2lzaCB0byByZXBlbCBzbGF2ZXJ5PyBpbiB3aGljaCwgZXZlbiBpZiBvbmUncwogICAgICAgICAgICAgICAgICAgIG1hc3RlciBiZSBub3QgdHlyYW5uaWNhbCwgeWV0IGl0IGlzIGEgbW9zdCBtaXNlcmFibGUgdGhpbmcgdGhhdCBoZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIGJlIHNvIGlmIGhlIGNob29zZXMuIEluIHRydXRoLCBvdGhlciBjYXVzZXMgYXJlIGp1c3QsIHRoaXMgaXMgYQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBvbmUuIFVubGVzcywgcGVyaGFwcywgeW91IHRoaW5rIHRoYXQgdGhpcyBkb2VzIG5vdCBhcHBseSB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB5b3UgZXhwZWN0IHRoYXQgeW91IHdpbGwgYmUgYSBwYXJ0bmVyIGluIHRoZSBkb21pbmlvbiBvZiBBbnRvbml1cy4gQW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgeW91IG1ha2UgYSB0d29mb2xkIG1pc3Rha2U6IGZpcnN0IG9mIGFsbCwgaW4gcHJlZmVycmluZyB5b3VyIG93biB0byB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIGludGVyZXN0OyBhbmQgaW4gdGhlIG5leHQgcGxhY2UsIGluIHRoaW5raW5nIHRoYXQgdGhlcmUgaXMgYW55IHRoaW5nCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHN0YWJsZSBvciBwbGVhc2FudCBpbiBraW5nbHkgcG93ZXIuIEV2ZW4gaWYgaXQgaGFzIGJlZm9yZSBub3cgYmVlbgogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZW91cyB0byB5b3UsIGl0IHdpbGwgbm90IGFsd2F5cyBiZSBzby4gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHlvdSB1c2VkIHRvIGNvbXBsYWluIG9mIHRoYXQgZm9ybWVyIG1hc3Rlciwgd2hvIHdhcyBhIG1hbjsgd2hhdCBkbwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGluayB5b3Ugd2lsbCBkbyB3aGVuIHlvdXIgbWFzdGVyIGlzIGEgYmVhc3Q/IEFuZCB5b3Ugc2F5IHRoYXQgeW91IGFyZSBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBoYXZlIGFsd2F5cyBiZWVuIGRlc2lyb3VzIG9mIHBlYWNlLCBhbmQgaGF2ZSBhbHdheXMgd2lzaGVkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2YXRpb24gb2YgYWxsIHRoZSBjaXRpemVucy4gVmVyeSBob25lc3QgbGFuZ3VhZ2U7IHRoYXQgaXMsIGlmIHlvdSBtZWFuIGFsbAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIHdobyBhcmUgdmlydHVvdXMsIGFuZCB1c2VmdWwsIGFuZCBzZXJ2aWNlYWJsZSB0byB0aGUgcmVwdWJsaWM7IGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSB3aXNoIHRob3NlIHdobyBhcmUgYnkgbmF0dXJlIGNpdGl6ZW5zLCBidXQgYnkgaW5jbGluYXRpb24gZW5lbWllcywgdG8gYmUKICAgICAgICAgICAgICAgICAgICBzYXZlZCwgd2hhdCBkaWZmZXJlbmNlIGlzIHRoZXJlIGJldHdlZW4geW91IGFuZCB0aGVtPyBZb3VyIGZhdGhlciwgaW5kZWVkLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hvbSBJIGFzIGEgeW91dGggd2FzIGFjcXVhaW50ZWQsIHdoZW4gaGUgd2FzIGFuIG9sZCBtYW4s4oCUYSBtYW4gb2YKICAgICAgICAgICAgICAgICAgICByaWdpZCB2aXJ0dWUgYW5kIHdpc2RvbSzigJR1c2VkIHRvIGdpdmUgdGhlIGdyZWF0ZXN0IHByYWlzZSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyB3aG8gaGFkIGV2ZXIgbGl2ZWQgdG8gUHVibGl1cyBOYXNpY2EsIHdobyBzbGV3IFRpYmVyaXVzIEdyYWNjaHVzLiBCeQogICAgICAgICAgICAgICAgICAgIGhpcyB2YWxvciwgYW5kIHdpc2RvbSwgYW5kIG1hZ25hbmltaXR5IGhlIHRob3VnaHQgdGhhdCB0aGUgcmVwdWJsaWMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzYXZlZC4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBhbSBJIHRvIHNheT8gSGF2ZSB3ZSByZWNlaXZlZCBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBkb2N0cmluZSBmcm9tIG91ciBmYXRoZXJzPyBUaGVyZWZvcmUsIHRoYXQgY2l0aXplbuKAlGlmIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBsaXZlZCBpbiB0aG9zZSB0aW1lc+KAlHdvdWxkIG5vdCBoYXZlIGJlZW4gYXBwcm92ZWQgb2YgYnkgeW91LCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIG5vdCB3aXNoIGFsbCB0aGUgY2l0aXplbnMgdG8gYmUgc2FmZS4g4oCcQmVjYXVzZSBMdWNpdXMgT3BpbWl1cwogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWwgaGFzIG1hZGUgYSBzcGVlY2ggY29uY2VybmluZyB0aGUgcmVwdWJsaWMsIHRoZSBzZW5hdG9ycyBoYXZlIHRodXMKICAgICAgICAgICAgICAgICAgICBkZWNpZGVkIG9uIHRoYXQgbWF0dGVyLCB0aGF0IE9waW1pdXMgdGhlIGNvbnN1bCBzaGFsbCBkZWZlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMu4oCdIFRoZSBzZW5hdGUgYWRvcHRlZCB0aGVzZSBtZWFzdXJlcyBpbiB3b3JkcywgT3BpbWl1cwogICAgICAgICAgICAgICAgICAgIGZvbGxvd2VkIHRoZW0gdXAgYnkgaGlzIGFybXMgU2hvdWxkIHlvdSB0aGVuIGlmIHlvdSBoYWQgbGl2ZWQgaW4gdGhvc2UgdGltZXMKICAgICAgICAgICAgICAgICAgICBoYXZlIHRob3VnaHQgaGltIGEgaGFzdHkgb3IgYSBjcnVlbCBjaXRpemVuPyBvciBzaG91bGQgeW91IGhhdmUgdGhvdWdodCBRdWludHVzCiAgICAgICAgICAgICAgICAgICAgTWV0ZWxsdXMgb25lIHdob3NlIGZvdXIgc29ucyB3ZXJlIGFsbCBtZW4gb2YgY29uc3VsYXIgcmFuaz8gb3IgUHVibGl1cyBMZW50dWx1cwogICAgICAgICAgICAgICAgICAgIHRoZSBjaGllZiBvZiB0aGUgc2VuYXRlIGFuZCBtYW55IG90aGVyIGFkbWlyYWJsZSBtZW4gd2hvIHdpdGggTHVjaXVzIE9waW1pdXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCB0b29rIGFybXMsIGFuZCBwdXJzdWVkIEdyYWNjaHVzIHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAxMjgwOSIga2V5PSJ0Z24sNDAxMjgwOSI+QXZlbnRpbmU8L3BsYWNlTmFtZT4/IGFuZCBpbiB0aGUgYmF0dGxlIHdoaWNoIGVuc3VlZCwgTGVudHVsdXMgcmVjZWl2ZWQgYQogICAgICAgICAgICAgICAgICAgIHNldmVyZSB3b3VuZCwgR3JhY2NodXMgd2FzIHNsYWluLCBhbmQgc28gd2FzIE1hcmN1cyBGdWx2aXVzLCBhIG1hbiBvZiBjb25zdWxhcgogICAgICAgICAgICAgICAgICAgIHJhbmssIGFuZCBoaXMgdHdvIHlvdXRoZnVsIHNvbnMuIFRob3NlIG1lbiwgdGhlcmVmb3JlLCBhcmUgdG8gYmUgYmxhbWVkOyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGV5IGRpZCBub3Qgd2lzaCBhbGwgdGhlIGNpdGl6ZW5zIHRvIGJlIHNhZmUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgd2FudCB0byBrbm93IHdoYXQgeW91IG1lYW4sIE8KICAgICAgICAgICAgICAgICAgICBDYWxlbnVzPyBEbyB5b3UgY2FsbCBzbGF2ZXJ5IHBlYWNlPyBPdXIgYW5jZXN0b3JzIHVzZWQgdG8gdGFrZSB1cCBhcm1zIG5vdAogICAgICAgICAgICAgICAgICAgIG1lcmVseSB0byBzZWN1cmUgdGhlaXIgZnJlZWRvbSwgYnV0IGFsc28gdG8gYWNxdWlyZSBlbXBpcmU7IHlvdSB0aGluayB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gdGhyb3cgYXdheSBvdXIgYXJtcywgaW4gb3JkZXIgdG8gYmVjb21lIHNsYXZlcy4gV2hhdCBqdXN0ZXIgY2F1c2UgaXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBmb3Igd2FnaW5nIHdhciB0aGFuIHRoZSB3aXNoIHRvIHJlcGVsIHNsYXZlcnk/IGluIHdoaWNoLCBldmVuIGlmIG9uZSdzCiAgICAgICAgICAgICAgICAgICAgbWFzdGVyIGJlIG5vdCB0eXJhbm5pY2FsLCB5ZXQgaXQgaXMgYSBtb3N0IG1pc2VyYWJsZSB0aGluZyB0aGF0IGhlIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gYmUgc28gaWYgaGUgY2hvb3Nlcy4gSW4gdHJ1dGgsIG90aGVyIGNhdXNlcyBhcmUganVzdCwgdGhpcyBpcyBhCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IG9uZS4gVW5sZXNzLCBwZXJoYXBzLCB5b3UgdGhpbmsgdGhhdCB0aGlzIGRvZXMgbm90IGFwcGx5IHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHlvdSBleHBlY3QgdGhhdCB5b3Ugd2lsbCBiZSBhIHBhcnRuZXIgaW4gdGhlIGRvbWluaW9uIG9mIEFudG9uaXVzLiBBbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB5b3UgbWFrZSBhIHR3b2ZvbGQgbWlzdGFrZTogZmlyc3Qgb2YgYWxsLCBpbiBwcmVmZXJyaW5nIHlvdXIgb3duIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgaW50ZXJlc3Q7IGFuZCBpbiB0aGUgbmV4dCBwbGFjZSwgaW4gdGhpbmtpbmcgdGhhdCB0aGVyZSBpcyBhbnkgdGhpbmcKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgc3RhYmxlIG9yIHBsZWFzYW50IGluIGtpbmdseSBwb3dlci4gRXZlbiBpZiBpdCBoYXMgYmVmb3JlIG5vdyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlb3VzIHRvIHlvdSwgaXQgd2lsbCBub3QgYWx3YXlzIGJlIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.4.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gTW9yZW92ZXIsIHlvdSB1c2VkIHRvIGNvbXBsYWluIG9mIHRoYXQgZm9ybWVyIG1hc3Rlciwgd2hvIHdhcyBhIG1hbjsgd2hhdCBkbwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGluayB5b3Ugd2lsbCBkbyB3aGVuIHlvdXIgbWFzdGVyIGlzIGEgYmVhc3Q/IEFuZCB5b3Ugc2F5IHRoYXQgeW91IGFyZSBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBoYXZlIGFsd2F5cyBiZWVuIGRlc2lyb3VzIG9mIHBlYWNlLCBhbmQgaGF2ZSBhbHdheXMgd2lzaGVkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2YXRpb24gb2YgYWxsIHRoZSBjaXRpemVucy4gVmVyeSBob25lc3QgbGFuZ3VhZ2U7IHRoYXQgaXMsIGlmIHlvdSBtZWFuIGFsbAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIHdobyBhcmUgdmlydHVvdXMsIGFuZCB1c2VmdWwsIGFuZCBzZXJ2aWNlYWJsZSB0byB0aGUgcmVwdWJsaWM7IGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSB3aXNoIHRob3NlIHdobyBhcmUgYnkgbmF0dXJlIGNpdGl6ZW5zLCBidXQgYnkgaW5jbGluYXRpb24gZW5lbWllcywgdG8gYmUKICAgICAgICAgICAgICAgICAgICBzYXZlZCwgd2hhdCBkaWZmZXJlbmNlIGlzIHRoZXJlIGJldHdlZW4geW91IGFuZCB0aGVtPyBZb3VyIGZhdGhlciwgaW5kZWVkLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hvbSBJIGFzIGEgeW91dGggd2FzIGFjcXVhaW50ZWQsIHdoZW4gaGUgd2FzIGFuIG9sZCBtYW4s4oCUYSBtYW4gb2YKICAgICAgICAgICAgICAgICAgICByaWdpZCB2aXJ0dWUgYW5kIHdpc2RvbSzigJR1c2VkIHRvIGdpdmUgdGhlIGdyZWF0ZXN0IHByYWlzZSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyB3aG8gaGFkIGV2ZXIgbGl2ZWQgdG8gUHVibGl1cyBOYXNpY2EsIHdobyBzbGV3IFRpYmVyaXVzIEdyYWNjaHVzLiBCeQogICAgICAgICAgICAgICAgICAgIGhpcyB2YWxvciwgYW5kIHdpc2RvbSwgYW5kIG1hZ25hbmltaXR5IGhlIHRob3VnaHQgdGhhdCB0aGUgcmVwdWJsaWMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzYXZlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBhbSBJIHRvIHNheT8gSGF2ZSB3ZSByZWNlaXZlZCBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBkb2N0cmluZSBmcm9tIG91ciBmYXRoZXJzPyBUaGVyZWZvcmUsIHRoYXQgY2l0aXplbuKAlGlmIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBsaXZlZCBpbiB0aG9zZSB0aW1lc+KAlHdvdWxkIG5vdCBoYXZlIGJlZW4gYXBwcm92ZWQgb2YgYnkgeW91LCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgaGUgZGlkIG5vdCB3aXNoIGFsbCB0aGUgY2l0aXplbnMgdG8gYmUgc2FmZS4g4oCcQmVjYXVzZSBMdWNpdXMgT3BpbWl1cwogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWwgaGFzIG1hZGUgYSBzcGVlY2ggY29uY2VybmluZyB0aGUgcmVwdWJsaWMsIHRoZSBzZW5hdG9ycyBoYXZlIHRodXMKICAgICAgICAgICAgICAgICAgICBkZWNpZGVkIG9uIHRoYXQgbWF0dGVyLCB0aGF0IE9waW1pdXMgdGhlIGNvbnN1bCBzaGFsbCBkZWZlbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMu4oCdIFRoZSBzZW5hdGUgYWRvcHRlZCB0aGVzZSBtZWFzdXJlcyBpbiB3b3JkcywgT3BpbWl1cwogICAgICAgICAgICAgICAgICAgIGZvbGxvd2VkIHRoZW0gdXAgYnkgaGlzIGFybXMgU2hvdWxkIHlvdSB0aGVuIGlmIHlvdSBoYWQgbGl2ZWQgaW4gdGhvc2UgdGltZXMKICAgICAgICAgICAgICAgICAgICBoYXZlIHRob3VnaHQgaGltIGEgaGFzdHkgb3IgYSBjcnVlbCBjaXRpemVuPyBvciBzaG91bGQgeW91IGhhdmUgdGhvdWdodCBRdWludHVzCiAgICAgICAgICAgICAgICAgICAgTWV0ZWxsdXMgb25lIHdob3NlIGZvdXIgc29ucyB3ZXJlIGFsbCBtZW4gb2YgY29uc3VsYXIgcmFuaz8gb3IgUHVibGl1cyBMZW50dWx1cwogICAgICAgICAgICAgICAgICAgIHRoZSBjaGllZiBvZiB0aGUgc2VuYXRlIGFuZCBtYW55IG90aGVyIGFkbWlyYWJsZSBtZW4gd2hvIHdpdGggTHVjaXVzIE9waW1pdXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCB0b29rIGFybXMsIGFuZCBwdXJzdWVkIEdyYWNjaHVzIHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAxMjgwOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDEyODA5Ij5BdmVudGluZTwvcGxhY2VOYW1lPj8gYW5kIGluIHRoZSBiYXR0bGUgd2hpY2ggZW5zdWVkLCBMZW50dWx1cyByZWNlaXZlZCBhCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJlIHdvdW5kLCBHcmFjY2h1cyB3YXMgc2xhaW4sIGFuZCBzbyB3YXMgTWFyY3VzIEZ1bHZpdXMsIGEgbWFuIG9mIGNvbnN1bGFyCiAgICAgICAgICAgICAgICAgICAgcmFuaywgYW5kIGhpcyB0d28geW91dGhmdWwgc29ucy4gVGhvc2UgbWVuLCB0aGVyZWZvcmUsIGFyZSB0byBiZSBibGFtZWQ7IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZXkgZGlkIG5vdCB3aXNoIGFsbCB0aGUgY2l0aXplbnMgdG8gYmUgc2FmZS4gPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['8.5.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCB1cyBjb21lIHRvIGluc3RhbmNlcyBuZWFyZXIgb3VyIG93biB0aW1lLiBUaGUgc2VuYXRlIGVudHJ1c3RlZCB0aGUgZGVmZW5zZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYyB0byBDYWl1cyBNYXJpdXMgYW5kIEx1Y2l1cyBWYWxlcml1cyB0aGUgY29uc3Vscy4gTHVjaXVzIFNhdHVybmludXMsCiAgICAgICAgICAgICAgICAgICAgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGFuZCBDYWl1cyBHbGF1Y2lhIHRoZSBwcmFldG9yLCB3ZXJlIHNsYWluLiBPbiB0aGF0IGRheSwKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTM3MDE4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMzcwMTgiPlNjYXVyaTwvcGxhY2VOYW1lPiwgYW5kIE1ldGVsbGksIGFuZAogICAgICAgICAgICAgICAgICAgIENsYXVkaWksIGFuZCBDYXR1bGksIGFuZCBTY2Fldm9sYWUsIGFuZCBDcmFzc2kgdG9vayBhcm1zLiBEbyB5b3UgdGhpbmsgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgY29uc3VscyBvciB0aG9zZSBvdGhlciBtb3N0IGlsbHVzdHJpb3VzIG1lbiBkZXNlcnZpbmcgb2YgYmxhbWU/IEkgbXlzZWxmCiAgICAgICAgICAgICAgICAgICAgd2lzaGVkIENhdGlsaW5lIHRvIHBlcmlzaC4gRGlkIHlvdSB3aG8gd2lzaCBldmVyeSBvbmUgdG8gYmUgc2FmZSwgd2lzaCBDYXRpbGluZQogICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhZmU/IFRoZXJlIGlzIHRoaXMgZGlmZmVyZW5jZSwgTyBDYWxlbnVzLCBiZXR3ZWVuIG15IG9waW5pb24gYW5kIHlvdXJzLiBJCiAgICAgICAgICAgICAgICAgICAgd2lzaCBubyBjaXRpemVuIHRvIGNvbW1pdCBzdWNoIGNyaW1lcyBhcyBkZXNlcnZlIHRvIGJlIHB1bmlzaGVkIHdpdGggZGVhdGguIFlvdQogICAgICAgICAgICAgICAgICAgIHRoaW5rIHRoYXQsIGV2ZW4gaWYgaGUgaGFzIGNvbW1pdHRlZCB0aGVtLCBzdGlsbCBoZSBvdWdodCB0byBiZSBzYXZlZC4gSWYgdGhlcmUKICAgICAgICAgICAgICAgICAgICBpcyBhbnkgdGhpbmcgaW4gb3VyIG93biBib2R5IHdoaWNoIGlzIGluanVyaW91cyB0byB0aGUgcmVzdCBvZiB0aGUgYm9keSwgd2UKICAgICAgICAgICAgICAgICAgICBhbGxvdyB0aGF0IHRvIGJlIGJ1cm5lZCBhbmQgY3V0IG91dCwgaW4gb3JkZXIgdGhhdCBhIGxpbWIgbWF5IGJlIGxvc3QgaW4KICAgICAgICAgICAgICAgICAgICBwcmVmZXJlbmNlIHRvIHRoZSB3aG9sZSBib2R5LiBBbmQgc28gaW4gdGhlIGJvZHkgb2YgdGhlIHJlcHVibGljLCB3aGF0ZXZlciBpcwogICAgICAgICAgICAgICAgICAgIHJvdHRlbiBtdXN0IGJlIGN1dCBvZmYgaW4gb3JkZXIgdGhhdCB0aGUgd2hvbGUgbWF5IGJlIHNhdmVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+IEhhcnNoIGxhbmd1YWdlISBUaGlzIGlzIG11Y2ggbW9yZSBoYXJzaCwg4oCcTGV0IHRoZQogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzcywgYW5kIHdpY2tlZCwgYW5kIGltcGlvdXMgYmUgc2F2ZWQ7IGxldCB0aGUgaW5ub2NlbnQsIHRoZSBob25vcmFibGUsCiAgICAgICAgICAgICAgICAgICAgdGhlIHZpcnR1b3VzLCB0aGUgd2hvbGUgcmVwdWJsaWMgYmUgZGVzdHJveWVkLuKAnSBJbiB0aGUgY2FzZSBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBpbmRpdmlkdWFsLCBPIFF1aW50dXMgRnVmaXVzLCBJIGNvbmZlc3MgdGhhdCB5b3Ugc2F3IG1vcmUgdGhhbiBJIGRpZC4gSSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgUHVibGl1cyBDbG9kaXVzIGEgbWlzY2hpZXZvdXMsIHdpY2tlZCwgbHVzdGZ1bCwgaW1waW91cywgYXVkYWNpb3VzLCBjcmltaW5hbAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4uIFlvdSwgb24gdGhlIG90aGVyIGhhbmQsIGNhbGxlZCBoaW0gcmVsaWdpb3VzLCB0ZW1wZXJhdGUsIGlubm9jZW50LAogICAgICAgICAgICAgICAgICAgIG1vZGVzdDsgYSBjaXRpemVuIHRvIGJlIHByZXNlcnZlZCBhbmQgZGVzaXJlZC4gSW4gdGhpcyBvbmUgcGFydGljdWxhciBJIGFkbWl0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgaGFkIGdyZWF0IGRpc2Nlcm5tZW50LCBhbmQgdGhhdCBJIG1hZGUgYSBncmVhdCBtaXN0YWtlLiBGb3IgYXMgZm9yIHlvdXIKICAgICAgICAgICAgICAgICAgICBzYXlpbmcgdGhhdCBJIGFtIGluIHRoZSBoYWJpdCBvZiBhcmd1aW5nIGFnYWluc3QgeW91IHdpdGggaWxsIHRlbXBlciwgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgY2FzZS4gSSBjb25mZXNzIHRoYXQgSSBhcmd1ZSB3aXRoIHZlaGVtZW5jZSwgYnV0IG5vdCB3aXRoIGlsbCB0ZW1wZXIuIEkKICAgICAgICAgICAgICAgICAgICBhbSBub3QgaW4gdGhlIGhhYml0IG9mIGdldHRpbmcgYW5ncnkgd2l0aCBteSBmcmllbmRzIGV2ZXJ5IG5vdyBhbmQgdGhlbiwgbm90CiAgICAgICAgICAgICAgICAgICAgZXZlbiBpZiB0aGV5IGRlc2VydmUgaXQuIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXJlZm9yZSwgSSBjYW4KICAgICAgICAgICAgICAgICAgICBkaWZmZXIgZnJvbSB5b3Ugd2l0aG91dCB1c2luZyBhbnkgaW5zdWx0aW5nIGxhbmd1YWdlLCB0aG91Z2ggbm90IHdpdGhvdXQgZmVlbGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdGVzdCBncmllZiBvZiBtaW5kLiBGb3IgaXMgdGhlIGRpc3NlbnNpb24gYmV0d2VlbiB5b3UgYW5kIG1lIGEgdHJpZmxpbmcKICAgICAgICAgICAgICAgICAgICBvbmUsIG9yIG9uIGEgdHJpZmxpbmcgc3ViamVjdD8gSXMgaXQgbWVyZWx5IGEgY2FzZSBvZiBteSBmYXZvcmluZyB0aGlzIG1hbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgeW91IHRoYXQgbWFuPyBZZXM7IEkgaW5kZWVkIGZhdm9yIERlY2ltdXMgQnJ1dHVzLCB5b3UgZmF2b3IgTWFyY3VzIEFudG9uaXVzOyBJCiAgICAgICAgICAgICAgICAgICAgd2lzaCBhIGNvbG9ueSBvZiB0aGUgUm9tYW4gcGVvcGxlIHRvIGJlIHByZXNlcnZlZCwgeW91IGFyZSBhbnhpb3VzIHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgc3Rvcm1lZCBhbmQgZGVzdHJveWVkLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMzcwMTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEzNzAxOCI+U2NhdXJpPC9wbGFjZU5hbWU+LCBhbmQgTWV0ZWxsaSwgYW5kCiAgICAgICAgICAgICAgICAgICAgQ2xhdWRpaSwgYW5kIENhdHVsaSwgYW5kIFNjYWV2b2xhZSwgYW5kIENyYXNzaSB0b29rIGFybXMuIERvIHlvdSB0aGluayBlaXRoZXIKICAgICAgICAgICAgICAgICAgICB0aG9zZSBjb25zdWxzIG9yIHRob3NlIG90aGVyIG1vc3QgaWxsdXN0cmlvdXMgbWVuIGRlc2VydmluZyBvZiBibGFtZT8gSSBteXNlbGYKICAgICAgICAgICAgICAgICAgICB3aXNoZWQgQ2F0aWxpbmUgdG8gcGVyaXNoLiBEaWQgeW91IHdobyB3aXNoIGV2ZXJ5IG9uZSB0byBiZSBzYWZlLCB3aXNoIENhdGlsaW5lCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2FmZT8gVGhlcmUgaXMgdGhpcyBkaWZmZXJlbmNlLCBPIENhbGVudXMsIGJldHdlZW4gbXkgb3BpbmlvbiBhbmQgeW91cnMuIEkKICAgICAgICAgICAgICAgICAgICB3aXNoIG5vIGNpdGl6ZW4gdG8gY29tbWl0IHN1Y2ggY3JpbWVzIGFzIGRlc2VydmUgdG8gYmUgcHVuaXNoZWQgd2l0aCBkZWF0aC4gWW91CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgdGhhdCwgZXZlbiBpZiBoZSBoYXMgY29tbWl0dGVkIHRoZW0sIHN0aWxsIGhlIG91Z2h0IHRvIGJlIHNhdmVkLiBJZiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGlzIGFueSB0aGluZyBpbiBvdXIgb3duIGJvZHkgd2hpY2ggaXMgaW5qdXJpb3VzIHRvIHRoZSByZXN0IG9mIHRoZSBib2R5LCB3ZQogICAgICAgICAgICAgICAgICAgIGFsbG93IHRoYXQgdG8gYmUgYnVybmVkIGFuZCBjdXQgb3V0LCBpbiBvcmRlciB0aGF0IGEgbGltYiBtYXkgYmUgbG9zdCBpbgogICAgICAgICAgICAgICAgICAgIHByZWZlcmVuY2UgdG8gdGhlIHdob2xlIGJvZHkuIEFuZCBzbyBpbiB0aGUgYm9keSBvZiB0aGUgcmVwdWJsaWMsIHdoYXRldmVyIGlzCiAgICAgICAgICAgICAgICAgICAgcm90dGVuIG11c3QgYmUgY3V0IG9mZiBpbiBvcmRlciB0aGF0IHRoZSB3aG9sZSBtYXkgYmUgc2F2ZWQuIDwvdHJhbnNsYXRpb24+"
translation['8.5.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSGFyc2ggbGFuZ3VhZ2UhIFRoaXMgaXMgbXVjaCBtb3JlIGhhcnNoLCDigJxMZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgd29ydGhsZXNzLCBhbmQgd2lja2VkLCBhbmQgaW1waW91cyBiZSBzYXZlZDsgbGV0IHRoZSBpbm5vY2VudCwgdGhlIGhvbm9yYWJsZSwKICAgICAgICAgICAgICAgICAgICB0aGUgdmlydHVvdXMsIHRoZSB3aG9sZSByZXB1YmxpYyBiZSBkZXN0cm95ZWQu4oCdIEluIHRoZSBjYXNlIG9mIG9uZQogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWwsIE8gUXVpbnR1cyBGdWZpdXMsIEkgY29uZmVzcyB0aGF0IHlvdSBzYXcgbW9yZSB0aGFuIEkgZGlkLiBJIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICBQdWJsaXVzIENsb2RpdXMgYSBtaXNjaGlldm91cywgd2lja2VkLCBsdXN0ZnVsLCBpbXBpb3VzLCBhdWRhY2lvdXMsIGNyaW1pbmFsCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbi4gWW91LCBvbiB0aGUgb3RoZXIgaGFuZCwgY2FsbGVkIGhpbSByZWxpZ2lvdXMsIHRlbXBlcmF0ZSwgaW5ub2NlbnQsCiAgICAgICAgICAgICAgICAgICAgbW9kZXN0OyBhIGNpdGl6ZW4gdG8gYmUgcHJlc2VydmVkIGFuZCBkZXNpcmVkLiBJbiB0aGlzIG9uZSBwYXJ0aWN1bGFyIEkgYWRtaXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYWQgZ3JlYXQgZGlzY2Vybm1lbnQsIGFuZCB0aGF0IEkgbWFkZSBhIGdyZWF0IG1pc3Rha2UuIEZvciBhcyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIHNheWluZyB0aGF0IEkgYW0gaW4gdGhlIGhhYml0IG9mIGFyZ3VpbmcgYWdhaW5zdCB5b3Ugd2l0aCBpbGwgdGVtcGVyLCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBjYXNlLiBJIGNvbmZlc3MgdGhhdCBJIGFyZ3VlIHdpdGggdmVoZW1lbmNlLCBidXQgbm90IHdpdGggaWxsIHRlbXBlci4gSQogICAgICAgICAgICAgICAgICAgIGFtIG5vdCBpbiB0aGUgaGFiaXQgb2YgZ2V0dGluZyBhbmdyeSB3aXRoIG15IGZyaWVuZHMgZXZlcnkgbm93IGFuZCB0aGVuLCBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIGlmIHRoZXkgZGVzZXJ2ZSBpdC4gPC90cmFuc2xhdGlvbj4="
translation['8.5.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCBJIGNhbgogICAgICAgICAgICAgICAgICAgIGRpZmZlciBmcm9tIHlvdSB3aXRob3V0IHVzaW5nIGFueSBpbnN1bHRpbmcgbGFuZ3VhZ2UsIHRob3VnaCBub3Qgd2l0aG91dCBmZWVsaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGdyZWF0ZXN0IGdyaWVmIG9mIG1pbmQuIEZvciBpcyB0aGUgZGlzc2Vuc2lvbiBiZXR3ZWVuIHlvdSBhbmQgbWUgYSB0cmlmbGluZwogICAgICAgICAgICAgICAgICAgIG9uZSwgb3Igb24gYSB0cmlmbGluZyBzdWJqZWN0PyBJcyBpdCBtZXJlbHkgYSBjYXNlIG9mIG15IGZhdm9yaW5nIHRoaXMgbWFuLCBhbmQKICAgICAgICAgICAgICAgICAgICB5b3UgdGhhdCBtYW4/IFllczsgSSBpbmRlZWQgZmF2b3IgRGVjaW11cyBCcnV0dXMsIHlvdSBmYXZvciBNYXJjdXMgQW50b25pdXM7IEkKICAgICAgICAgICAgICAgICAgICB3aXNoIGEgY29sb255IG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgcHJlc2VydmVkLCB5b3UgYXJlIGFueGlvdXMgdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBzdG9ybWVkIGFuZCBkZXN0cm95ZWQuIDwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuIHlvdSBkZW55IHRoaXMsIHdoZW4geW91IGludGVycG9zZSBldmVyeSBzb3J0IG9mIGRlbGF5IGNhbGN1bGF0ZWQgdG8gd2Vha2VuCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzLCBhbmQgdG8gaW1wcm92ZSB0aGUgcG9zaXRpb24gb2YgQW50b25pdXM/IEZvciBob3cgbG9uZyB3aWxsIHlvdSBrZWVwIG9uCiAgICAgICAgICAgICAgICAgICAgc2F5aW5nIHRoYXQgeW91IGFyZSBkZXNpcm91cyBvZiBwZWFjZT8gTWF0dGVycyBhcmUgcHJvZ3Jlc3NpbmcgcmFwaWRseTsgdGhlCiAgICAgICAgICAgICAgICAgICAgd29ya3MgaGF2ZSBiZWVuIGNhcnJpZWQgb247IHNldmVyZSBiYXR0bGVzIGFyZSB0YWtpbmcgcGxhY2UuIFdlIHNlbnQgdGhyZWUgY2hpZWYKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGNpdHkgdG8gaW50ZXJwb3NlLiBBbnRvbml1cyBoYXMgZGVzcGlzZWQsIHJlamVjdGVkLCBhbmQgcmVwdWRpYXRlZAogICAgICAgICAgICAgICAgICAgIHRoZW0uIEFuZCBzdGlsbCB5b3UgY29udGludWUgYSBwZXJzZXZlcmluZyBkZWZlbmRlciBvZiBBbnRvbml1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgQ2FsZW51cywgaW5kZWVkLCBpbiBvcmRlciB0aGF0IGhlIG1heSBhcHBlYXIgYQogICAgICAgICAgICAgICAgICAgIG1vcmUgY29uc2NpZW50aW91cyBzZW5hdG9yLCBzYXlzIHRoYXQgaGUgb3VnaHQgbm90IHRvIGJlIGEgZnJpZW5kIHRvIGhpbTsgc2luY2UsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIEFudG9uaXVzIHdhcyB1bmRlciBncmVhdCBvYmxpZ2F0aW9ucyB0byBoaW0sIGhlIHN0aWxsIGhhZCBhY3RlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGltLiBTZWUgaG93IGdyZWF0IGlzIGhpcyBhZmZlY3Rpb24gZm9yIGhpcyBjb3VudHJ5LiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.6.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIENhbGVudXMsIGluZGVlZCwgaW4gb3JkZXIgdGhhdCBoZSBtYXkgYXBwZWFyIGEKICAgICAgICAgICAgICAgICAgICBtb3JlIGNvbnNjaWVudGlvdXMgc2VuYXRvciwgc2F5cyB0aGF0IGhlIG91Z2h0IG5vdCB0byBiZSBhIGZyaWVuZCB0byBoaW07IHNpbmNlLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBBbnRvbml1cyB3YXMgdW5kZXIgZ3JlYXQgb2JsaWdhdGlvbnMgdG8gaGltLCBoZSBzdGlsbCBoYWQgYWN0ZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIGhpbS4gU2VlIGhvdyBncmVhdCBpcyBoaXMgYWZmZWN0aW9uIGZvciBoaXMgY291bnRyeS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIHlvdSBhcmUgc28gYml0dGVyLCBPIFF1aW50dXMgRnVmaXVzLCBhZ2FpbnN0IHRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiwgSSBjYW4gbm90IGxpc3RlbiB0byB5b3Ugd2l0aAogICAgICAgICAgICAgICAgICAgIGNhbG1uZXNzLiBGb3IgaG93IGxvbmcgYXJlIHlvdSBnb2luZyB0byBhdHRhY2sgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPj8gRG9lcyBub3QgZXZlbiBhIHRyaXVtcGggcHV0IGFuIGVuZCB0byB0aGUgd2FyPyBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdhcyBjYXJyaWVkIGFuIGltYWdlIG9mIHRoYXQgY2l0eSwgd2l0aG91dCB3aG9zZSBhc3Npc3RhbmNlIG91cgogICAgICAgICAgICAgICAgICAgIGZvcmVmYXRoZXJzIG5ldmVyIHRyaXVtcGhlZCBvdmVyIHRoZSBUcmFuc2FscGluZSBuYXRpb25zLiBUaGVuLCBpbmRlZWQsIGRpZCB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGUgZ3JvYW4uIEFsdGhvdWdoIHRoZXkgaGFkIHRoZWlyIG93biBwcml2YXRlIGdyaWVmcyBiZWNhdXNlIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGFmZmFpcnMsIHN0aWxsIHRoZXJlIHdhcyBubyBjaXRpemVuIHdobyB0aG91Z2h0IHRoZSBtaXNlcmllcyBvZiB0aGlzIG1vc3QKICAgICAgICAgICAgICAgICAgICBsb3lhbCBjaXR5IHVuY29ubmVjdGVkIHdpdGggaGltc2VsZi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBDYWVzYXIKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCB3aG8gaGFkIGJlZW4gdGhlIG1vc3QgYW5ncnkgb2YgYWxsIG1lbiB3aXRoIHRoZW0sIHN0aWxsLCBvbiBhY2NvdW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHVudXN1YWxseSBoaWdoIGNoYXJhY3RlciBhbmQgbG95YWx0eSBvZiB0aGF0IGNpdHksIHdhcyBldmVyeSBkYXkgcmVsYXhpbmcKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgb2YgaGlzIGRpc3BsZWFzdXJlIEFuZCBpcyB0aGVyZSBubyBleHRlbnQgb2YgY2FsYW1pdHkgYnkgd2hpY2ggc28KICAgICAgICAgICAgICAgICAgICBmYWl0aGZ1bCBhIGNpdHkgY2FuIHNhdGlhdGUgeW91PyBBZ2FpbiwgcGVyaGFwcywgeW91IHdpbGwgc2F5IHRoYXQgSSBhbSBsb3NpbmcKICAgICAgICAgICAgICAgICAgICBteSB0ZW1wZXIuIEJ1dCBJIGFtIHNwZWFraW5nIHdpdGhvdXQgcGFzc2lvbiwgYXMgSSBhbHdheXMgZG8sIHRob3VnaCBub3Qgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGdyZWF0IGluZGlnbmF0aW9uLiBJIHRoaW5rIHRoYXQgbm8gbWFuIGNhbiBiZSBhbiBlbmVteSB0byB0aGF0IGNpdHksIHdobyBpcyBhCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kIHRvIHRoaXMgb25lLiBXaGF0IHlvdXIgb2JqZWN0IGlzLCBPIENhbGVudXMsIEkgY2FuIG5vdCBpbWFnaW5lLiBGb3JtZXJseQogICAgICAgICAgICAgICAgICAgIHdlIHdlcmUgdW5hYmxlIHRvIGRldGVyIHlvdSBmcm9tIGRldm90aW5nIHlvdXJzZWxmIHRvIHRoZSBncmF0aWZpY2F0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZTsgbm93IHdlIGFyZSB1bmFibGUgdG8gcHJldmFpbCBvbiB5b3UgdG8gc2hvdyBhbnkgcmVnYXJkIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cy4gSSBoYXZlIGFyZ3VlZCBsb25nIGVub3VnaCB3aXRoIEZ1Zml1cywgc2F5aW5nIGV2ZXJ5dGhpbmcgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGhhdHJlZCwgYnV0IG5vdGhpbmcgd2l0aG91dCBpbmRpZ25hdGlvbi4gSSBzdXBwb3NlIHRoYXQgYSBtYW4gd2hvIGNhbiBiZWFyIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbXBsYWludCBvZiBoaXMgc29uLWluLWxhdyB3aXRoIGluZGlmZmVyZW5jZSwgd2lsbCBiZWFyIHRoYXQgb2YgaGlzIGZyaWVuZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZXF1YW5pbWl0eS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiwgSSBjYW4gbm90IGxpc3RlbiB0byB5b3Ugd2l0aAogICAgICAgICAgICAgICAgICAgIGNhbG1uZXNzLiBGb3IgaG93IGxvbmcgYXJlIHlvdSBnb2luZyB0byBhdHRhY2sgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPj8gRG9lcyBub3QgZXZlbiBhIHRyaXVtcGggcHV0IGFuIGVuZCB0byB0aGUgd2FyPyBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdhcyBjYXJyaWVkIGFuIGltYWdlIG9mIHRoYXQgY2l0eSwgd2l0aG91dCB3aG9zZSBhc3Npc3RhbmNlIG91cgogICAgICAgICAgICAgICAgICAgIGZvcmVmYXRoZXJzIG5ldmVyIHRyaXVtcGhlZCBvdmVyIHRoZSBUcmFuc2FscGluZSBuYXRpb25zLiBUaGVuLCBpbmRlZWQsIGRpZCB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGUgZ3JvYW4uIEFsdGhvdWdoIHRoZXkgaGFkIHRoZWlyIG93biBwcml2YXRlIGdyaWVmcyBiZWNhdXNlIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGFmZmFpcnMsIHN0aWxsIHRoZXJlIHdhcyBubyBjaXRpemVuIHdobyB0aG91Z2h0IHRoZSBtaXNlcmllcyBvZiB0aGlzIG1vc3QKICAgICAgICAgICAgICAgICAgICBsb3lhbCBjaXR5IHVuY29ubmVjdGVkIHdpdGggaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['8.6.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gQ2Flc2FyCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgd2hvIGhhZCBiZWVuIHRoZSBtb3N0IGFuZ3J5IG9mIGFsbCBtZW4gd2l0aCB0aGVtLCBzdGlsbCwgb24gYWNjb3VudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB1bnVzdWFsbHkgaGlnaCBjaGFyYWN0ZXIgYW5kIGxveWFsdHkgb2YgdGhhdCBjaXR5LCB3YXMgZXZlcnkgZGF5IHJlbGF4aW5nCiAgICAgICAgICAgICAgICAgICAgc29tZXRoaW5nIG9mIGhpcyBkaXNwbGVhc3VyZSBBbmQgaXMgdGhlcmUgbm8gZXh0ZW50IG9mIGNhbGFtaXR5IGJ5IHdoaWNoIHNvCiAgICAgICAgICAgICAgICAgICAgZmFpdGhmdWwgYSBjaXR5IGNhbiBzYXRpYXRlIHlvdT8gQWdhaW4sIHBlcmhhcHMsIHlvdSB3aWxsIHNheSB0aGF0IEkgYW0gbG9zaW5nCiAgICAgICAgICAgICAgICAgICAgbXkgdGVtcGVyLiBCdXQgSSBhbSBzcGVha2luZyB3aXRob3V0IHBhc3Npb24sIGFzIEkgYWx3YXlzIGRvLCB0aG91Z2ggbm90IHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBncmVhdCBpbmRpZ25hdGlvbi4gSSB0aGluayB0aGF0IG5vIG1hbiBjYW4gYmUgYW4gZW5lbXkgdG8gdGhhdCBjaXR5LCB3aG8gaXMgYQogICAgICAgICAgICAgICAgICAgIGZyaWVuZCB0byB0aGlzIG9uZS4gV2hhdCB5b3VyIG9iamVjdCBpcywgTyBDYWxlbnVzLCBJIGNhbiBub3QgaW1hZ2luZS4gRm9ybWVybHkKICAgICAgICAgICAgICAgICAgICB3ZSB3ZXJlIHVuYWJsZSB0byBkZXRlciB5b3UgZnJvbSBkZXZvdGluZyB5b3Vyc2VsZiB0byB0aGUgZ3JhdGlmaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGU7IG5vdyB3ZSBhcmUgdW5hYmxlIHRvIHByZXZhaWwgb24geW91IHRvIHNob3cgYW55IHJlZ2FyZCBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMuIEkgaGF2ZSBhcmd1ZWQgbG9uZyBlbm91Z2ggd2l0aCBGdWZpdXMsIHNheWluZyBldmVyeXRoaW5nIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBoYXRyZWQsIGJ1dCBub3RoaW5nIHdpdGhvdXQgaW5kaWduYXRpb24uIEkgc3VwcG9zZSB0aGF0IGEgbWFuIHdobyBjYW4gYmVhciB0aGUKICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnQgb2YgaGlzIHNvbi1pbi1sYXcgd2l0aCBpbmRpZmZlcmVuY2UsIHdpbGwgYmVhciB0aGF0IG9mIGhpcyBmcmllbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIGdyZWF0IGVxdWFuaW1pdHkuIDwvdHJhbnNsYXRpb24+"
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['8.7.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgY29tZSBub3cgdG8gdGhlIHJlc3Qgb2YgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLCBvZiB3aG9tIHRoZXJlIGlzIG5vIG9uZSAoSQogICAgICAgICAgICAgICAgICAgIHNheSB0aGlzIG9uIG15IG93biByZXNwb25zaWJpbGl0eSksIHdobyBpcyBub3QgY29ubmVjdGVkIHdpdGggbWUgaW4gc29tZSB3YXkgb3IKICAgICAgICAgICAgICAgICAgICBvdGhlciBieSBraW5kbmVzc2VzIGNvbmZlcnJlZCBvciByZWNlaXZlZDsgc29tZSBpbiBhIGdyZWF0LCBzb21lIGluIGEgbW9kZXJhdGUKICAgICAgICAgICAgICAgICAgICBkZWdyZWUsIGJ1dCBldmVyeSBvbmUgdG8gc29tZSBleHRlbnQgb3Igb3RoZXIuIFdoYXQgYSBkaXNncmFjZWZ1bCBkYXkgd2FzCiAgICAgICAgICAgICAgICAgICAgeWVzdGVyZGF5IHRvIHVzISB0byB1cyBjb25zdWxhcnMsIEkgbWVhbi4gQXJlIHdlIHRvIHNlbmQgYW1iYXNzYWRvcnMgYWdhaW4/CiAgICAgICAgICAgICAgICAgICAgV2hhdD8gd291bGQgaGUgbWFrZSBhIHRydWNlPyBCZWZvcmUgdGhlIHZlcnkgZmFjZSBhbmQgZXllcyBvZiB0aGUgYW1iYXNzYWRvcnMgaGUKICAgICAgICAgICAgICAgICAgICBiYXR0ZXJlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4gd2l0aCBoaXMgZW5naW5lcy4gSGUKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWQgaGlzIHdvcmtzIGFuZCBoaXMgZGVmZW5zZXMgdG8gdGhlIGFtYmFzc2Fkb3JzLiBUaGUgc2llZ2Ugd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgb25lIG1vbWVudCdzIGJyZWF0aGluZyB0aW1lLCBub3QgZXZlbiB3aGlsZSB0aGUgYW1iYXNzYWRvcnMgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudC4gU2VuZCBhbWJhc3NhZG9ycyB0byB0aGlzIG1hbiEgV2hhdCBmb3I/IGluIG9yZGVyIHRvIGhhdmUgZ3JlYXQgZmVhcnMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlaXIgcmV0dXJuPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+IEluIHRydXRoLCB0aG91Z2ggb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgb2NjYXNpb24gSSBoYWQgdm90ZWQgYWdhaW5zdCB0aGUgYW1iYXNzYWRvcnMgYmVpbmcgZGVjcmVlZCwgc3RpbGwgSQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGVkIG15c2VsZiB3aXRoIHRoaXMgcmVmbGVjdGlvbiwgdGhhdCwgd2hlbiB0aGV5IGhhZCByZXR1cm5lZCBmcm9tIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgZGVzcGlzZWQgYW5kIHJlamVjdGVkLCBhbmQgaGFkIHJlcG9ydGVkIHRvIHRoZSBzZW5hdGUsIG5vdCBtZXJlbHkgdGhhdCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBub3Qgd2l0aGRyYXduIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIGFzIHdlIGhhZAogICAgICAgICAgICAgICAgICAgIHZvdGVkIHRoYXQgaGUgc2hvdWxkLCBidXQgdGhhdCBoZSBoYWQgbm90IGV2ZW4gcmV0aXJlZCBmcm9tIGJlZm9yZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBhbmQgdGhhdCB0aGV5IGhhZCBub3QgYmVlbiBhbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgdG8gcHJvY2VlZCBvbiB0byBEZWNpbXVzIEJydXR1cywgYWxsIG1lbiB3b3VsZCBiZSBpbmZsYW1lZCB3aXRoIGhhdHJlZCBhbmQKICAgICAgICAgICAgICAgICAgICBzdGltdWxhdGVkIGJ5IGluZGlnbmF0aW9uLCBzbyB0aGF0IHdlIHNob3VsZCByZWluZm9yY2UgRGVjaW11cyBCcnV0dXMgd2l0aCBhcm1zLAogICAgICAgICAgICAgICAgICAgIGFuZCBob3JzZXMsIGFuZCBtZW4uIEJ1dCB3ZSBoYXZlIGJlY29tZSBldmVuIG1vcmUgbGFuZ3VpZCBzaW5jZSB3ZSBoYXZlIGJlY29tZQogICAgICAgICAgICAgICAgICAgIGFjcXVhaW50ZWQgd2l0aCwgbm90IG9ubHkgdGhlIGF1ZGFjaXR5IGFuZCB3aWNrZWRuZXNzIG9mIEFudG9uaXVzLCBidXQgYWxzbyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGlzIGluc29sZW5jZSBhbmQgcHJpZGUuIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+IFdvdWxkIHRoYXQgTHVjaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIHdlcmUgaW4gaGVhbHRoOyB0aGF0IFNlcnZpdXMuIFN1bHBpY2l1cyB3ZXJlIGFsaXZlLiBUaGlzIGNhdXNlIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcGxlYWRlZCBtdWNoIGJldHRlciBieSB0aHJlZSBtZW4sIHRoYW4gaXQgaXMgbm93IGJ5IG1lIHNpbmdsZS1oYW5kZWQuIFdoYXQgSSBhbQogICAgICAgICAgICAgICAgICAgIGdvaW5nIHRvIHNheSBJIHNheSB3aXRoIGdyaWVmLCByYXRoZXIgdGhhbiBieSB3YXkgb2YgaW5zdWx0LiBXZSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBkZXNlcnRlZOKAlHdlIGhhdmUsIEkgc2F5LCBiZWVuIGRlc2VydGVkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBieSBvdXIKICAgICAgICAgICAgICAgICAgICBjaGllZnMuIEJ1dCwgYXMgSSBoYXZlIG9mdGVuIHNhaWQgYmVmb3JlLCBhbGwgdGhvc2Ugd2hvIGluIGEgdGltZSBvZiBzdWNoIGRhbmdlcgogICAgICAgICAgICAgICAgICAgIGhhdmUgcHJvcGVyIGFuZCBjb3VyYWdlb3VzIHNlbnRpbWVudHMgc2hhbGwgYmUgbWVuIG9mIGNvbnN1bGFyIHJhbmsuIFRoZQogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIG91Z2h0IHRvIGhhdmUgYnJvdWdodCB1cyBiYWNrIGNvdXJhZ2UsIHRoZXkgaGF2ZSBicm91Z2h0IHVzIGJhY2sKICAgICAgICAgICAgICAgICAgICBmZWFyLiBOb3QsIGluZGVlZCwgdGhhdCB0aGV5IGhhdmUgY2F1c2VkIG1lIGFueSBmZWFyOiBsZXQgdGhlbSBoYXZlIGFzIGhpZ2ggYW4KICAgICAgICAgICAgICAgICAgICBvcGluaW9uIGFzIHRoZXkgcGxlYXNlIG9mIHRoZSBtYW4gdG8gd2hvbSB0aGV5IHdlcmUgc2VudDsgZnJvbSB3aG9tIHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGV2ZW4gYnJvdWdodCBiYWNrIGNvbW1hbmRzIHRvIHVzLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4gd2l0aCBoaXMgZW5naW5lcy4gSGUKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWQgaGlzIHdvcmtzIGFuZCBoaXMgZGVmZW5zZXMgdG8gdGhlIGFtYmFzc2Fkb3JzLiBUaGUgc2llZ2Ugd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgb25lIG1vbWVudCdzIGJyZWF0aGluZyB0aW1lLCBub3QgZXZlbiB3aGlsZSB0aGUgYW1iYXNzYWRvcnMgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudC4gU2VuZCBhbWJhc3NhZG9ycyB0byB0aGlzIG1hbiEgV2hhdCBmb3I/IGluIG9yZGVyIHRvIGhhdmUgZ3JlYXQgZmVhcnMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlaXIgcmV0dXJuPyA8L3RyYW5zbGF0aW9uPg=="
translation['8.7.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdHJ1dGgsIHRob3VnaCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyBvY2Nhc2lvbiBJIGhhZCB2b3RlZCBhZ2FpbnN0IHRoZSBhbWJhc3NhZG9ycyBiZWluZyBkZWNyZWVkLCBzdGlsbCBJCiAgICAgICAgICAgICAgICAgICAgY29uc29sZWQgbXlzZWxmIHdpdGggdGhpcyByZWZsZWN0aW9uLCB0aGF0LCB3aGVuIHRoZXkgaGFkIHJldHVybmVkIGZyb20gQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCBhbmQgcmVqZWN0ZWQsIGFuZCBoYWQgcmVwb3J0ZWQgdG8gdGhlIHNlbmF0ZSwgbm90IG1lcmVseSB0aGF0IGhlIGhhZAogICAgICAgICAgICAgICAgICAgIG5vdCB3aXRoZHJhd24gZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBhcyB3ZSBoYWQKICAgICAgICAgICAgICAgICAgICB2b3RlZCB0aGF0IGhlIHNob3VsZCwgYnV0IHRoYXQgaGUgaGFkIG5vdCBldmVuIHJldGlyZWQgZnJvbSBiZWZvcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBhbmQgdGhhdCB0aGV5IGhhZCBub3QgYmVlbiBhbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgdG8gcHJvY2VlZCBvbiB0byBEZWNpbXVzIEJydXR1cywgYWxsIG1lbiB3b3VsZCBiZSBpbmZsYW1lZCB3aXRoIGhhdHJlZCBhbmQKICAgICAgICAgICAgICAgICAgICBzdGltdWxhdGVkIGJ5IGluZGlnbmF0aW9uLCBzbyB0aGF0IHdlIHNob3VsZCByZWluZm9yY2UgRGVjaW11cyBCcnV0dXMgd2l0aCBhcm1zLAogICAgICAgICAgICAgICAgICAgIGFuZCBob3JzZXMsIGFuZCBtZW4uIEJ1dCB3ZSBoYXZlIGJlY29tZSBldmVuIG1vcmUgbGFuZ3VpZCBzaW5jZSB3ZSBoYXZlIGJlY29tZQogICAgICAgICAgICAgICAgICAgIGFjcXVhaW50ZWQgd2l0aCwgbm90IG9ubHkgdGhlIGF1ZGFjaXR5IGFuZCB3aWNrZWRuZXNzIG9mIEFudG9uaXVzLCBidXQgYWxzbyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGlzIGluc29sZW5jZSBhbmQgcHJpZGUuIDwvdHJhbnNsYXRpb24+"
translation['8.7.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gV291bGQgdGhhdCBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgd2VyZSBpbiBoZWFsdGg7IHRoYXQgU2Vydml1cy4gU3VscGljaXVzIHdlcmUgYWxpdmUuIFRoaXMgY2F1c2Ugd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBwbGVhZGVkIG11Y2ggYmV0dGVyIGJ5IHRocmVlIG1lbiwgdGhhbiBpdCBpcyBub3cgYnkgbWUgc2luZ2xlLWhhbmRlZC4gV2hhdCBJIGFtCiAgICAgICAgICAgICAgICAgICAgZ29pbmcgdG8gc2F5IEkgc2F5IHdpdGggZ3JpZWYsIHJhdGhlciB0aGFuIGJ5IHdheSBvZiBpbnN1bHQuIFdlIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGRlc2VydGVk4oCUd2UgaGF2ZSwgSSBzYXksIGJlZW4gZGVzZXJ0ZWQsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGJ5IG91cgogICAgICAgICAgICAgICAgICAgIGNoaWVmcy4gQnV0LCBhcyBJIGhhdmUgb2Z0ZW4gc2FpZCBiZWZvcmUsIGFsbCB0aG9zZSB3aG8gaW4gYSB0aW1lIG9mIHN1Y2ggZGFuZ2VyCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwcm9wZXIgYW5kIGNvdXJhZ2VvdXMgc2VudGltZW50cyBzaGFsbCBiZSBtZW4gb2YgY29uc3VsYXIgcmFuay4gVGhlCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgb3VnaHQgdG8gaGF2ZSBicm91Z2h0IHVzIGJhY2sgY291cmFnZSwgdGhleSBoYXZlIGJyb3VnaHQgdXMgYmFjawogICAgICAgICAgICAgICAgICAgIGZlYXIuIE5vdCwgaW5kZWVkLCB0aGF0IHRoZXkgaGF2ZSBjYXVzZWQgbWUgYW55IGZlYXI6IGxldCB0aGVtIGhhdmUgYXMgaGlnaCBhbgogICAgICAgICAgICAgICAgICAgIG9waW5pb24gYXMgdGhleSBwbGVhc2Ugb2YgdGhlIG1hbiB0byB3aG9tIHRoZXkgd2VyZSBzZW50OyBmcm9tIHdob20gdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZXZlbiBicm91Z2h0IGJhY2sgY29tbWFuZHMgdG8gdXMuIDwvdHJhbnNsYXRpb24+"
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['8.8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk8geWUgaW1tb3J0YWwgZ29kcyEgd2hlcmUgYXJlIHRoZSBoYWJpdHMgYW5kIHZpcnR1ZXMgb2Ygb3VyIGZvcmVmYXRoZXJzPyBDYWl1cwogICAgICAgICAgICAgICAgICAgIFBvcGlsbGl1cywgaW4gdGhlIHRpbWUgb2Ygb3VyIGFuY2VzdG9ycywgd2hlbiBoZSBoYWQgYmVlbiBzZW50IGFzIGFtYmFzc2Fkb3IgdG8KICAgICAgICAgICAgICAgICAgICBBbnRpb2NodXMgdGhlIGtpbmcsIGFuZCBoYWQgZ2l2ZW4gaGltIG5vdGljZSwgaW4gdGhlIHdvcmRzIG9mIHRoZSBzZW5hdGUsIHRvCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBiZXNpZWdpbmcsIG9uIHRoZSBraW5nJ3Mgc2Vla2luZyB0byBkZWxheSBnaXZpbmcgaGlzIGFuc3dlciwgZHJldyBhIGxpbmUKICAgICAgICAgICAgICAgICAgICByb3VuZCBoaW0gd2hlcmUgaGUgd2FzIHN0YW5kaW5nIHdpdGggaGlzIHJvZCwgYW5kIHN0YXRlZCB0aGF0IGhlIHNob3VsZCByZXBvcnQKICAgICAgICAgICAgICAgICAgICBoaW0gdG8gdGhlIHNlbmF0ZSBpZiBoZSBkaWQgbm90IGFuc3dlciBoaW0gYXMgdG8gd2hhdCBoZSBpbnRlbmRlZCB0byBkbyBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBtb3ZlZCBvdXQgb2YgdGhhdCBsaW5lIHdoaWNoIHN1cnJvdW5kZWQgaGltLiBIZSBkaWQgd2VsbC4gRm9yIGhlIGhhZCBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW0gdGhlIGNvdW50ZW5hbmNlIG9mIHRoZSBzZW5hdGUsIGFuZCB0aGUgYXV0aG9yaXR5IG9mIHRoZSBSb21hbiBwZW9wbGU7CiAgICAgICAgICAgICAgICAgICAgYW5kIGlmIGEgbWFuIGRvZXMgbm90IG9iZXkgdGhhdCwgd2UgYXJlIG5vdCB0byByZWNlaXZlIGNvbW1hbmRzIGZyb20gaGltIGluCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuLCBidXQgaGUgaXMgdG8gYmUgdXR0ZXJseSByZWplY3RlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbQogICAgICAgICAgICAgICAgICAgIEkgdG8gcmVjZWl2ZSBjb21tYW5kcyBmcm9tIGEgbWFuIHdobyBkZXNwaXNlcyB0aGUgY29tbWFuZHMgb2YgdGhlIHNlbmF0ZT8gT3IgYW0KICAgICAgICAgICAgICAgICAgICBJIHRvIHRoaW5rIHRoYXQgaGUgaGFzIGFueSB0aGluZyBpbiBjb21tb24gd2l0aCB0aGUgc2VuYXRlLCB3aG8gYmVzaWVnZXMgYQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgb2YgdGhlIFJvbWFuIHBlb3BsZSBpbiBzcGl0ZSBvZiB0aGUgcHJvaGliaXRpb24gb2YgdGhlIHNlbmF0ZT8gQnV0IHdoYXQKICAgICAgICAgICAgICAgICAgICBjb21tYW5kcyB0aGV5IGFyZSEgV2l0aCB3aGF0IGFycm9nYW5jZSwgd2l0aCB3aGF0IHN0dXBpZGl0eSwgd2l0aCB3aGF0IGluc29sZW5jZQogICAgICAgICAgICAgICAgICAgIGFyZSB0aGV5IGNvbmNlaXZlZCEgQnV0IHdoYXQgbWFkZSBoaW0gY2hhcmdlIG91ciBhbWJhc3NhZG9ycyB3aXRoIHRoZW0gd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBzZW5kaW5nIENvdHlsYSB0byB1cywgdGhlIG9ybmFtZW50IGFuZCBidWx3YXJrIG9mIGhpcyBmcmllbmRzLCBhIG1hbiBvZgogICAgICAgICAgICAgICAgICAgIGFlZGlsaXRpYW4gcmFuaz8gaWYsIGluZGVlZCwgaGUgcmVhbGx5IHdhcyBhbiBhZWRpbGUgYXQgdGhlIHRpbWUgd2hlbiB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzIGZsb2dnZWQgaGltIHdpdGggdGhvbmdzIGF0IGEgYmFucXVldCBieSBjb21tYW5kIG9mIEFudG9uaXVzLiA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBiZXNpZWdpbmcsIG9uIHRoZSBraW5nJ3Mgc2Vla2luZyB0byBkZWxheSBnaXZpbmcgaGlzIGFuc3dlciwgZHJldyBhIGxpbmUKICAgICAgICAgICAgICAgICAgICByb3VuZCBoaW0gd2hlcmUgaGUgd2FzIHN0YW5kaW5nIHdpdGggaGlzIHJvZCwgYW5kIHN0YXRlZCB0aGF0IGhlIHNob3VsZCByZXBvcnQKICAgICAgICAgICAgICAgICAgICBoaW0gdG8gdGhlIHNlbmF0ZSBpZiBoZSBkaWQgbm90IGFuc3dlciBoaW0gYXMgdG8gd2hhdCBoZSBpbnRlbmRlZCB0byBkbyBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBtb3ZlZCBvdXQgb2YgdGhhdCBsaW5lIHdoaWNoIHN1cnJvdW5kZWQgaGltLiBIZSBkaWQgd2VsbC4gRm9yIGhlIGhhZCBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW0gdGhlIGNvdW50ZW5hbmNlIG9mIHRoZSBzZW5hdGUsIGFuZCB0aGUgYXV0aG9yaXR5IG9mIHRoZSBSb21hbiBwZW9wbGU7CiAgICAgICAgICAgICAgICAgICAgYW5kIGlmIGEgbWFuIGRvZXMgbm90IG9iZXkgdGhhdCwgd2UgYXJlIG5vdCB0byByZWNlaXZlIGNvbW1hbmRzIGZyb20gaGltIGluCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuLCBidXQgaGUgaXMgdG8gYmUgdXR0ZXJseSByZWplY3RlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.8.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW0KICAgICAgICAgICAgICAgICAgICBJIHRvIHJlY2VpdmUgY29tbWFuZHMgZnJvbSBhIG1hbiB3aG8gZGVzcGlzZXMgdGhlIGNvbW1hbmRzIG9mIHRoZSBzZW5hdGU/IE9yIGFtCiAgICAgICAgICAgICAgICAgICAgSSB0byB0aGluayB0aGF0IGhlIGhhcyBhbnkgdGhpbmcgaW4gY29tbW9uIHdpdGggdGhlIHNlbmF0ZSwgd2hvIGJlc2llZ2VzIGEKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIG9mIHRoZSBSb21hbiBwZW9wbGUgaW4gc3BpdGUgb2YgdGhlIHByb2hpYml0aW9uIG9mIHRoZSBzZW5hdGU/IEJ1dCB3aGF0CiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMgdGhleSBhcmUhIFdpdGggd2hhdCBhcnJvZ2FuY2UsIHdpdGggd2hhdCBzdHVwaWRpdHksIHdpdGggd2hhdCBpbnNvbGVuY2UKICAgICAgICAgICAgICAgICAgICBhcmUgdGhleSBjb25jZWl2ZWQhIEJ1dCB3aGF0IG1hZGUgaGltIGNoYXJnZSBvdXIgYW1iYXNzYWRvcnMgd2l0aCB0aGVtIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICB3YXMgc2VuZGluZyBDb3R5bGEgdG8gdXMsIHRoZSBvcm5hbWVudCBhbmQgYnVsd2FyayBvZiBoaXMgZnJpZW5kcywgYSBtYW4gb2YKICAgICAgICAgICAgICAgICAgICBhZWRpbGl0aWFuIHJhbms/IGlmLCBpbmRlZWQsIGhlIHJlYWxseSB3YXMgYW4gYWVkaWxlIGF0IHRoZSB0aW1lIHdoZW4gdGhlIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBmbG9nZ2VkIGhpbSB3aXRoIHRob25ncyBhdCBhIGJhbnF1ZXQgYnkgY29tbWFuZCBvZiBBbnRvbml1cy4gPC90cmFuc2xhdGlvbj4="
translation['8.8.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgbW9kZXN0IGNvbW1hbmRzIHRoZXkgYXJlISBXZSBtdXN0IGJlIGlyb24taGVhcnRlZCBtZW4sIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdG8gZGVueSBhbnkgdGhpbmcgdG8gdGhpcyBtYW4hIOKAnEkgZ2l2ZSB1cCBib3RoCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2VzLOKAnSBzYXlzIGhlOyDigJxJIGRpc2JhbmQgbXkgYXJteTsgSSBhbSB3aWxsaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIGEgcHJpdmF0ZSBpbmRpdmlkdWFsLuKAnSBGb3IgdGhlc2UgYXJlIGhpcyB2ZXJ5IHdvcmRzLiBIZSBzZWVtcwogICAgICAgICAgICAgICAgICAgIHRvIGJlIGNvbWluZyB0byBoaW1zZWxmLiDigJxJIGFtIHdpbGxpbmcgdG8gZm9yZ2V0IGV2ZXJ5dGhpbmc7IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxlZCB0byBldmVyeSBib2R5LuKAnSBCdXQgd2hhdCBkb2VzIGhlIGFkZD8g4oCcSWYgeW91CiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBib290eSBhbmQgbGFuZCB0byBteSBzaXggbGVnaW9ucywgdG8gbXkgY2F2YWxyeSwgYW5kIHRvIG15IHByYWV0b3JpYW4KICAgICAgICAgICAgICAgICAgICBjb2hvcnQu4oCdIEhlIGV2ZW4gZGVtYW5kcyByZXdhcmRzIGZvciB0aG9zZSBtZW4gZm9yIHdob20sIGlmIGhlIHdlcmUgdG8KICAgICAgICAgICAgICAgICAgICBkZW1hbmQgcGFyZG9uLCBoZSB3b3VsZCBiZSB0aG91Z2h0IHRoZSBtb3N0IGltcHVkZW50IG9mIG1lbi4gSGUgYWRkcyBmYXJ0aGVyLAogICAgICAgICAgICAgICAgICAgIOKAnFRob3NlIG1lbiB0byB3aG9tIHRoZSBsYW5kcyBoYXZlIGJlZW4gZ2l2ZW4gd2hpY2ggaGUgaGltc2VsZiBhbmQKICAgICAgICAgICAgICAgICAgICBEb2xhYmVsbGEgZGlzdHJpYnV0ZWQsIGFyZSB0byByZXRhaW4gdGhlbS7igJ0gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIGlzIHRoZSBDYW1wYW5pYW4gYW5kIExlb250aW5lIGRpc3RyaWN0LCBib3RoIHdoaWNoIG91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycyBjb25zaWRlcmVkIGEgY2VydGFpbiByZXNvdXJjZSBpbiB0aW1lcyBvZiBzY2FyY2l0eS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.8.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcyBpcyB0aGUgQ2FtcGFuaWFuIGFuZCBMZW9udGluZSBkaXN0cmljdCwgYm90aCB3aGljaCBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgY29uc2lkZXJlZCBhIGNlcnRhaW4gcmVzb3VyY2UgaW4gdGltZXMgb2Ygc2NhcmNpdHkuIDwvdHJhbnNsYXRpb24+"
translation['8.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaXMgcHJvdGVjdGluZyB0aGUgaW50ZXJlc3RzIG9mIGhpcyBidWZmb29ucyBhbmQgZ2FtZXN0ZXJzIGFuZCBwaW1wcy4gSGUgaXMKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW5nIENhcGhvJ3MgYW5kIFNheGEncyBpbnRlcmVzdHMgdG9vLCBwdWduYWNpb3VzIGFuZCBtdXNjdWxhciBjZW50dXJpb25zLAogICAgICAgICAgICAgICAgICAgIHdob20gaGUgcGxhY2VkIGFtb25nIGhpcyB0cm9vcHMgb2YgbWFsZSBhbmQgZmVtYWxlIGJ1ZmZvb25zLiBCZXNpZGVzIGFsbCB0aGlzLAogICAgICAgICAgICAgICAgICAgIGhlIGRlbWFuZHMg4oCcdGhhdCB0aGUgZGVjcmVlcyBvZiBoaW1zZWxmIGFuZCBoaXMgY29sbGVhZ3VlIGNvbmNlcm5pbmcKICAgICAgICAgICAgICAgICAgICBDYWVzYXIncyB3cml0aW5ncyBhbmQgbWVtb3JhbmRhIGFyZSB0byBzdGFuZC7igJ0gV2h5IGlzIGhlIHNvIGFueGlvdXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGV2ZXJ5IG9uZSBzaG91bGQgaGF2ZSB3aGF0IGhlIGhhcyBib3VnaHQsIGlmIGhlIHdobyBzb2xkIGl0IGFsbCBoYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpY2Ugd2hpY2ggaGUgcmVjZWl2ZWQgZm9yIGl0PyDigJxBbmQgdGhhdCBoaXMgYWNjb3VudHMgb2YgdGhlIG1vbmV5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlbXBsZSBvZiBPcHMgYXJlIG5vdCB0byBiZSBtZWRkbGVkIHdpdGgu4oCdIFRoYXQgaXMgdG8gc2F5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugc2V2ZW4gaHVuZHJlZCBtaWxsaW9ucyBvZiBzZXN0ZXJjZXMgYXJlIG5vdCB0byBiZSByZWNvdmVyZWQgZnJvbSBoaW0uCiAgICAgICAgICAgICAgICAgICAg4oCcVGhhdCB0aGUgc2VwdGVtdmlyaSBhcmUgdG8gYmUgZXhlbXB0IGZyb20gYmxhbWUgb3IgZnJvbSBwcm9zZWN1dGlvbgogICAgICAgICAgICAgICAgICAgIGZvciB3aGF0IHRoZXkgaGF2ZSBkb25lLuKAnSBJdCB3YXMgTnVjdWxhLCBJIGltYWdpbmUsIHdobyBwdXQgaGltIGluCiAgICAgICAgICAgICAgICAgICAgbWluZCBvZiB0aGF0OyBoZSB3YXMgYWZyYWlkLCBwZXJoYXBzLCBvZiBsb3Npbmcgc28gbWFueSBjbGllbnRzLiBIZSBhbHNvIHdpc2hlcwogICAgICAgICAgICAgICAgICAgIHRvIG1ha2Ugc3RpcHVsYXRpb25zIGluIGZhdm9yIG9mIOKAnHRob3NlIG1lbiB3aG8gYXJlIHdpdGggaGltIHdobyBtYXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGRvbmUgYW55IHRoaW5nIGFnYWluc3QgdGhlIGxhd3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICDigJxIZSBpcyBoZXJlIHRha2luZyBjYXJlIG9mIE11c3RlbGEgYW5kIFRpcm87IGhlIGlzIG5vdCBhbnhpb3VzIGFib3V0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZi4gRm9yIHdoYXQgaGFzIGhlIGRvbmU/IGhhcyBoZSBldmVyIHRvdWNoZWQgdGhlIHB1YmxpYyBtb25leSwgb3IgbXVyZGVyZWQKICAgICAgICAgICAgICAgICAgICBhIG1hbiwgb3IgaGFkIGFybWVkIG1lbiBhYm91dCBoaW0/IEJ1dCB3aGF0IHJlYXNvbiBoYXMgaGUgZm9yIHRha2luZyBzbyBtdWNoCiAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSBhYm91dCB0aGVtPyBGb3IgaGUgZGVtYW5kcywg4oCcdGhhdCBoaXMgb3duIGp1ZGljaWFyeSBsYXcgYmUgbm90CiAgICAgICAgICAgICAgICAgICAgYWJyb2dhdGVkLuKAnSBBbmQgaWYgaGUgb2J0YWlucyB0aGF0LCB3aGF0IGlzIHRoZXJlIHRoYXQgaGUgY2FuIGZlYXI/CiAgICAgICAgICAgICAgICAgICAgY2FuIGhlIGJlIGFmcmFpZCB0aGF0IGFueSBvbmUgb2YgaGlzIGZyaWVuZHMgbWF5IGJlIGNvbnZpY3RlZCBieSBDeWRhcywgb3IKICAgICAgICAgICAgICAgICAgICBMeXNpYWRlcywgb3IgQ3VyaXVzPyBIb3dldmVyLCBoZSBkb2VzIG5vdCBwcmVzcyB1cyB3aXRoIG1hbnkgbW9yZSBkZW1hbmRzLgogICAgICAgICAgICAgICAgICAgIOKAnEkgZ2l2ZSB1cCzigJ0gc2F5cyBoZSwg4oCcPGZvcmVpZ24gbGFuZz0ibGEiPkdhbGxpYQogICAgICAgICAgICAgICAgICAgICAgICBUb2dhdGE8L2ZvcmVpZ24+OyBJIGRlbWFuZCA8Zm9yZWlnbiBsYW5nPSJsYSI+R2FsbGlhCiAgICAgICAgICAgICAgICAgICAgICAgIENvbWF0YTwvZm9yZWlnbj4u4oCdPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgcHJvdmluY2UgYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMDY2NjU5IiBrZXk9InRnbiwyMDY2NjU5Ij5BbHBzPC9wbGFjZU5hbWU+IGFuZCB0aGUgUnViaWNvbiB3YXMgY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+R2FsbGlhIENpdGVyaW9yPC9mb3JlaWduPiwgb3IgPGZvcmVpZ24gbGFuZz0ibGEiPkNpc2FscGluYTwvZm9yZWlnbj4sIGZyb20gaXRzIHNpdHVhdGlvbjsgYWxzbyA8Zm9yZWlnbiBsYW5nPSJsYSI+VG9nYXRhPC9mb3JlaWduPiwgZnJvbSB0aGUgaW5oYWJpdGFudHMgd2VhcmluZyB0aGUgUm9tYW4gdG9nYS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHdhcyBjYWxsZWQgPGZvcmVpZ24gbGFuZz0ibGEiPlVsdGVyaW9yPC9mb3JlaWduPiwgYW5kIGJ5IENpY2VybyBvZnRlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlVsdGltYTwvZm9yZWlnbj4sIG9yIDxmb3JlaWduIGxhbmc9ImxhIj5UcmFuc2FscGluYTwvZm9yZWlnbj47IGFuZCBhbHNvIDxmb3JlaWduIGxhbmc9ImxhIj5Db21hdGE8L2ZvcmVpZ24+CiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGZhc2hpb24gb2YgdGhlIGluaGFiaXRhbnRzIHdlYXJpbmcgbG9uZyBoYWlyLjwvbm90ZT7igJRoZQogICAgICAgICAgICAgICAgICAgIGV2aWRlbnRseSB3aXNoZXMgdG8gYmUgcXVpdGUgYXQgaGlzIGVhc2Us4oCU4oCcd2l0aCBzaXggbGVnaW9ucywKICAgICAgICAgICAgICAgICAgICBhbmQgdGhvc2UgbWFkZSB1cCB0byB0aGVpciBmdWxsIGNvbXBsZW1lbnQgb3V0IG9mIHRoZSBhcm15IG9mIERlY2ltdXMKICAgICAgICAgICAgICAgICAgICBCcnV0dXM74oCd4oCUbm90IG9ubHkgb3V0IG9mIHRoZSB0cm9vcHMgd2hvbSBoZSBoYXMgZW5saXN0ZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyDigJxhbmQgaGUgaXMgdG8ga2VlcCBwb3NzZXNzaW9uIG9mIGl0IGFzIGxvbmcgYXMgTWFyY3VzIEJydXR1cwogICAgICAgICAgICAgICAgICAgIGFuZCBDYWl1cyBDYXNzaXVzLCBhcyBjb25zdWxzLCBvciBhcyBwcm9jb25zdWxzLCBrZWVwIHBvc3Nlc3Npb24gb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcm92aW5jZXMu4oCdIEluIHRoZSBjb21pdGlhIGhlbGQgYnkgaGltLCBoaXMgYnJvdGhlciBDYWl1cyAoZm9yIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgaGlzIHllYXIpIGhhcyBhbHJlYWR5IGJlZW4gcmVwdWxzZWQuIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAg4oCcQW5kIEkgbXlzZWxmLOKAnSBzYXlzIGhlLCDigJxhbSB0byByZXRhaW4gcG9zc2Vzc2lvbgogICAgICAgICAgICAgICAgICAgIG9mIG15IHByb3ZpbmNlIGZpdmUgeWVhcnMu4oCdIEJ1dCB0aGF0IGlzIGV4cHJlc3NseSBmb3JiaWRkZW4gYnkgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIG9mIENhZXNhciwgYW5kIHlvdSBkZWZlbmQgdGhlIGFjdHMgb2YgQ2Flc2FyLiA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.9.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICDigJxIZSBpcyBoZXJlIHRha2luZyBjYXJlIG9mIE11c3RlbGEgYW5kIFRpcm87IGhlIGlzIG5vdCBhbnhpb3VzIGFib3V0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZi4gRm9yIHdoYXQgaGFzIGhlIGRvbmU/IGhhcyBoZSBldmVyIHRvdWNoZWQgdGhlIHB1YmxpYyBtb25leSwgb3IgbXVyZGVyZWQKICAgICAgICAgICAgICAgICAgICBhIG1hbiwgb3IgaGFkIGFybWVkIG1lbiBhYm91dCBoaW0/IEJ1dCB3aGF0IHJlYXNvbiBoYXMgaGUgZm9yIHRha2luZyBzbyBtdWNoCiAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSBhYm91dCB0aGVtPyBGb3IgaGUgZGVtYW5kcywg4oCcdGhhdCBoaXMgb3duIGp1ZGljaWFyeSBsYXcgYmUgbm90CiAgICAgICAgICAgICAgICAgICAgYWJyb2dhdGVkLuKAnSBBbmQgaWYgaGUgb2J0YWlucyB0aGF0LCB3aGF0IGlzIHRoZXJlIHRoYXQgaGUgY2FuIGZlYXI/CiAgICAgICAgICAgICAgICAgICAgY2FuIGhlIGJlIGFmcmFpZCB0aGF0IGFueSBvbmUgb2YgaGlzIGZyaWVuZHMgbWF5IGJlIGNvbnZpY3RlZCBieSBDeWRhcywgb3IKICAgICAgICAgICAgICAgICAgICBMeXNpYWRlcywgb3IgQ3VyaXVzPyBIb3dldmVyLCBoZSBkb2VzIG5vdCBwcmVzcyB1cyB3aXRoIG1hbnkgbW9yZSBkZW1hbmRzLgogICAgICAgICAgICAgICAgICAgIOKAnEkgZ2l2ZSB1cCzigJ0gc2F5cyBoZSwg4oCcPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+R2FsbGlhCiAgICAgICAgICAgICAgICAgICAgICAgIFRvZ2F0YTwvZm9yZWlnbj47IEkgZGVtYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkdhbGxpYQogICAgICAgICAgICAgICAgICAgICAgICBDb21hdGE8L2ZvcmVpZ24+LuKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgcHJvdmluY2UgYmV0d2VlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMDY2NjU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIwNjY2NTkiPkFscHM8L3BsYWNlTmFtZT4gYW5kIHRoZSBSdWJpY29uIHdhcyBjYWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkdhbGxpYSBDaXRlcmlvcjwvZm9yZWlnbj4sIG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNpc2FscGluYTwvZm9yZWlnbj4sIGZyb20gaXRzIHNpdHVhdGlvbjsgYWxzbyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5Ub2dhdGE8L2ZvcmVpZ24+LCBmcm9tIHRoZSBpbmhhYml0YW50cyB3ZWFyaW5nIHRoZSBSb21hbiB0b2dhLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgd2FzIGNhbGxlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5VbHRlcmlvcjwvZm9yZWlnbj4sIGFuZCBieSBDaWNlcm8gb2Z0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlVsdGltYTwvZm9yZWlnbj4sIG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlRyYW5zYWxwaW5hPC9mb3JlaWduPjsgYW5kIGFsc28gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q29tYXRhPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBmYXNoaW9uIG9mIHRoZSBpbmhhYml0YW50cyB3ZWFyaW5nIGxvbmcgaGFpci48L25vdGU+4oCUaGUKICAgICAgICAgICAgICAgICAgICBldmlkZW50bHkgd2lzaGVzIHRvIGJlIHF1aXRlIGF0IGhpcyBlYXNlLOKAlOKAnHdpdGggc2l4IGxlZ2lvbnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRob3NlIG1hZGUgdXAgdG8gdGhlaXIgZnVsbCBjb21wbGVtZW50IG91dCBvZiB0aGUgYXJteSBvZiBEZWNpbXVzCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzO+KAneKAlG5vdCBvbmx5IG91dCBvZiB0aGUgdHJvb3BzIHdob20gaGUgaGFzIGVubGlzdGVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZjsg4oCcYW5kIGhlIGlzIHRvIGtlZXAgcG9zc2Vzc2lvbiBvZiBpdCBhcyBsb25nIGFzIE1hcmN1cyBCcnV0dXMKICAgICAgICAgICAgICAgICAgICBhbmQgQ2FpdXMgQ2Fzc2l1cywgYXMgY29uc3Vscywgb3IgYXMgcHJvY29uc3Vscywga2VlcCBwb3NzZXNzaW9uIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2VzLuKAnSBJbiB0aGUgY29taXRpYSBoZWxkIGJ5IGhpbSwgaGlzIGJyb3RoZXIgQ2FpdXMgKGZvciBpdCBpcwogICAgICAgICAgICAgICAgICAgIGhpcyB5ZWFyKSBoYXMgYWxyZWFkeSBiZWVuIHJlcHVsc2VkLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjA2NjY1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMDY2NjU5Ij5BbHBzPC9wbGFjZU5hbWU+IGFuZCB0aGUgUnViaWNvbiB3YXMgY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5HYWxsaWEgQ2l0ZXJpb3I8L2ZvcmVpZ24+LCBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5DaXNhbHBpbmE8L2ZvcmVpZ24+LCBmcm9tIGl0cyBzaXR1YXRpb247IGFsc28gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VG9nYXRhPC9mb3JlaWduPiwgZnJvbSB0aGUgaW5oYWJpdGFudHMgd2VhcmluZyB0aGUgUm9tYW4gdG9nYS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHdhcyBjYWxsZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VWx0ZXJpb3I8L2ZvcmVpZ24+LCBhbmQgYnkgQ2ljZXJvIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5VbHRpbWE8L2ZvcmVpZ24+LCBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5UcmFuc2FscGluYTwvZm9yZWlnbj47IGFuZCBhbHNvIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNvbWF0YTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZmFzaGlvbiBvZiB0aGUgaW5oYWJpdGFudHMgd2VhcmluZyBsb25nIGhhaXIuPC90cmFuc2xhdGlvbj4="
translation['8.9.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICDigJxBbmQgSSBteXNlbGYs4oCdIHNheXMgaGUsIOKAnGFtIHRvIHJldGFpbiBwb3NzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgcHJvdmluY2UgZml2ZSB5ZWFycy7igJ0gQnV0IHRoYXQgaXMgZXhwcmVzc2x5IGZvcmJpZGRlbiBieSB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgb2YgQ2Flc2FyLCBhbmQgeW91IGRlZmVuZCB0aGUgYWN0cyBvZiBDYWVzYXIuIDwvdHJhbnNsYXRpb24+"
translation['8.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldlcmUgeW91LCBPIEx1Y2l1cyBQaXNvLCBhbmQgeW91LCBPIEx1Y2l1cyBQaGlsaXBwdXMsIHlvdSBjaGllZnMgb2YgdGhlIGNpdHksCiAgICAgICAgICAgICAgICAgICAgYWJsZSwgSSB3aWxsIG5vdCBzYXkgdG8gZW5kdXJlIGluIHlvdXIgbWluZHMsIGJ1dCBldmVuIHRvIGxpc3RlbiB3aXRoIHlvdXIgZWFycwogICAgICAgICAgICAgICAgICAgIHRvIHRoZXNlIGNvbW1hbmRzIG9mIGhpcz8gQnV0LCBJIHN1c3BlY3QgdGhlcmUgd2FzIHNvbWUgYWxhcm0gYXQgd29yazsgbm9yLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGluIGhpcyBwb3dlciwgY291bGQgeW91IGZlZWwgYXMgYW1iYXNzYWRvcnMsIG9yIGFzIG1lbiBvZiBjb25zdWxhciByYW5rLAogICAgICAgICAgICAgICAgICAgIG5vciBjb3VsZCB5b3UgbWFpbnRhaW4geW91ciBvd24gZGlnbml0eSwgb3IgdGhhdCBvZiB0aGUgcmVwdWJsaWMuIEFuZAogICAgICAgICAgICAgICAgICAgIG5ldmVydGhlbGVzcyBzb21laG93IG9yIG90aGVyIG93aW5nIHRvIHNvbWUgcGhpbG9zb3BoeSwgSSBzdXBwb3NlLCB5b3UgZGlkIHdoYXQKICAgICAgICAgICAgICAgICAgICBJIGNvdWxkIG5vdCBoYXZlIGRvbmUs4oCUeW91IHJldHVybmVkIHdpdGhvdXQgYW55IHZlcnkgYW5ncnkgZmVlbGluZ3MsCiAgICAgICAgICAgICAgICAgICAgTWFyY3VzIEFudG9uaXVzIHBhaWQgeW91IG5vIHJlc3BlY3QsIHRob3VnaCB5b3Ugd2VyZSBtb3N0IGlsbHVzdHJpb3VzIG1lbiwKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBvZiB0aGUgUm9tYW4gcGVvcGxlLiBBcyBmb3IgdXMsIHdoYXQgY29uY2Vzc2lvbnMgZGlkIG5vdCB3ZSBtYWtlIHRvCiAgICAgICAgICAgICAgICAgICAgQ290eWxhIHRoZSBhbWJhc3NhZG9yIG9mIE1hcmN1cyBBbnRvbml1cz8gdGhvdWdoIGl0IHdhcyBhZ2FpbnN0IHRoZSBsYXcgZm9yIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGUgZ2F0ZXMgb2YgdGhlIGNpdHkgdG8gYmUgb3BlbmVkIHRvIGhpbSwgeWV0IGV2ZW4gdGhpcyB0ZW1wbGUgd2FzIG9wZW5lZCB0bwogICAgICAgICAgICAgICAgICAgIGhpbS4gSGUgd2FzIGFsbG93ZWQgdG8gZW50ZXIgdGhlIHNlbmF0ZTsgaGVyZSB5ZXN0ZXJkYXkgaGUgd2FzIHRha2luZyBkb3duIG91cgogICAgICAgICAgICAgICAgICAgIG9waW5pb25zIGFuZCBldmVyeSB3b3JkIHdlIHNhaWQgaW4gaGlzIG5vdGUtYm9va3M7IGFuZCBtZW4gd2hvIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIHRvIHRoZSBoaWdoZXN0IGhvbm9ycyBzb2xkIHRoZW1zZWx2ZXMgdG8gaGltIGluIHV0dGVyIGRpc3JlZ2FyZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBkaWduaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.10.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyB5ZSBpbW1vcnRhbCBnb2RzISBob3cgZ3JlYXQgYW4gZW50ZXJwcmlzZSBpcyBpdCB0byB1cGhvbGQgdGhlIGNoYXJhY3RlciBvZiBhCiAgICAgICAgICAgICAgICAgICAgbGVhZGVyIGluIHRoZSByZXB1YmxpYzsgZm9yIGl0IHJlcXVpcmVzIG9uZSB0byBiZSBpbmZsdWVuY2VkIG5vdCBtZXJlbHkgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodHMgYnV0IGFsc28gYnkgdGhlIGV5ZXMgb2YgdGhlIGNpdGl6ZW5zLiBUbyB0YWtlIHRvIG9uZSdzIGhvdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3Igb2YgYW4gZW5lbXksIHRvIGFkbWl0IGhpbSB0byBvbmUncyBjaGFtYmVyLCBldmVuIHRvIGNvbmZlciBhcGFydCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltLCBpcyB0aGUgYWN0IG9mIGEgbWFuIHdobyB0aGlua3Mgbm90aGluZyBvZiBoaXMgZGlnbml0eSwgYW5kIHRvbyBtdWNoIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGRhbmdlci4gQnV0IHdoYXQgaXMgZGFuZ2VyPyBGb3IgaWYgb25lIGlzIGVuZ2FnZWQgaW4gYSBjb250ZXN0IHdoZXJlIGV2ZXJ5IHRoaW5nCiAgICAgICAgICAgICAgICAgICAgaXMgYXQgc3Rha2UsIGVpdGhlciBsaWJlcnR5IGlzIGFzc3VyZWQgdG8gb25lIGlmIHZpY3RvcmlvdXMsIG9yIGRlYXRoIGlmCiAgICAgICAgICAgICAgICAgICAgZGVmZWF0ZWQ7IHRoZSBmb3JtZXIgb2Ygd2hpY2ggYWx0ZXJuYXRpdmVzIGlzIGRlc2lyYWJsZSwgYW5kIHRoZSBsYXR0ZXIgc29tZQogICAgICAgICAgICAgICAgICAgIHRpbWUgb3Igb3RoZXIgaW5ldml0YWJsZS4gQnV0IGEgYmFzZSBmbGlnaHQgZnJvbSBkZWF0aCBpcyB3b3JzZSB0aGFuIGFueQogICAgICAgICAgICAgICAgICAgIGltYWdpbmFibGUgZGVhdGguIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIEkgd2lsbCBuZXZlciBiZSBpbmR1Y2VkCiAgICAgICAgICAgICAgICAgICAgdG8gYmVsaWV2ZSB0aGF0IHRoZXJlIGFyZSBtZW4gd2hvIGVudnkgdGhlIGNvbnNpc3RlbmN5IG9yIGRpbGlnZW5jZSBvZiBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdobyBhcmUgaW5kaWduYW50IGF0IHRoZSB1bmNlYXNpbmcgZGVzaXJlIHRvIGFzc2lzdCB0aGUgcmVwdWJsaWMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCBieSB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjIiIGtleT0idGduLDcwMTM5NjIiPlJvbWU8L3BsYWNlTmFtZT4uIFRoYXQgaXMgd2hhdCB3ZSB3ZXJlIGFsbCBib3VuZCB0byBkbzsgYW5kIHRoYXQgd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgaW4gdGhlIHRpbWUgb2Ygb3VyIGFuY2VzdG9ycywgYnV0IGV2ZW4gbGF0ZWx5LCB0aGUgaGlnaGVzdCBwcmFpc2Ugb2YgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgY29uc3VsYXIgcmFuaywgdG8gYmUgdmlnaWxhbnQsIHRvIGJlIGFueGlvdXMsIHRvIGJlIGFsd2F5cyBlaXRoZXIgdGhpbmtpbmcsIG9yCiAgICAgICAgICAgICAgICAgICAgZG9pbmcsIG9yIHNheWluZyBzb21ldGhpbmcgdG8gcHJvbW90ZSB0aGUgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYy4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gSSwgTyBjb25zY3JpcHQgZmF0aGVycywgcmVjb2xsZWN0IHRoYXQgUXVpbnR1cwogICAgICAgICAgICAgICAgICAgIFNjYWV2b2xhIHRoZSBhdWd1ciwgaW4gdGhlIE1hcnNpYyB3YXIsIHdoZW4gaGUgd2FzIGEgbWFuIG9mIGV4dHJlbWUgb2xkIGFnZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcXVpdGUgYnJva2VuIGRvd24gaW4gY29uc3RpdHV0aW9uLCBldmVyeSBkYXksIGFzIHNvb24gYXMgaXQgd2FzIGRheWxpZ2h0LCB1c2VkCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSBldmVyeSBvbmUgYW4gb3Bwb3J0dW5pdHkgb2YgY29uc3VsdGluZyBoaW07IG5vciwgdGhyb3VnaG91dCBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIHdhciwgZGlkIGFueSBvbmUgZXZlciBzZWUgaGltIGluIGJlZDsgYW5kLCB0aG91Z2ggb2xkIGFuZCB3ZWFrLCBoZSB3YXMgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbWFuIHRvIGNvbWUgaW50byB0aGUgc2VuYXRlLWhvdXNlLiBJIHdpc2gsIGFib3ZlIGFsbCB0aGluZ3MsIHRoYXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gZG8gc28gd291bGQgaW1pdGF0ZSBoaXMgaW5kdXN0cnk7IGFuZCwgbmV4dCB0byB0aGF0LCBJIHdpc2ggdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IGVudnkgdGhlIGV4ZXJ0aW9ucyBvZiBhbm90aGVyLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.10.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIEkgd2lsbCBuZXZlciBiZSBpbmR1Y2VkCiAgICAgICAgICAgICAgICAgICAgdG8gYmVsaWV2ZSB0aGF0IHRoZXJlIGFyZSBtZW4gd2hvIGVudnkgdGhlIGNvbnNpc3RlbmN5IG9yIGRpbGlnZW5jZSBvZiBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdobyBhcmUgaW5kaWduYW50IGF0IHRoZSB1bmNlYXNpbmcgZGVzaXJlIHRvIGFzc2lzdCB0aGUgcmVwdWJsaWMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCBieSB0aGUgc2VuYXRlIGFuZCBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMzk2MiI+Um9tZTwvcGxhY2VOYW1lPi4gVGhhdCBpcyB3aGF0IHdlIHdlcmUgYWxsIGJvdW5kIHRvIGRvOyBhbmQgdGhhdCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSBpbiB0aGUgdGltZSBvZiBvdXIgYW5jZXN0b3JzLCBidXQgZXZlbiBsYXRlbHksIHRoZSBoaWdoZXN0IHByYWlzZSBvZiBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBjb25zdWxhciByYW5rLCB0byBiZSB2aWdpbGFudCwgdG8gYmUgYW54aW91cywgdG8gYmUgYWx3YXlzIGVpdGhlciB0aGlua2luZywgb3IKICAgICAgICAgICAgICAgICAgICBkb2luZywgb3Igc2F5aW5nIHNvbWV0aGluZyB0byBwcm9tb3RlIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.10.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gSSwgTyBjb25zY3JpcHQgZmF0aGVycywgcmVjb2xsZWN0IHRoYXQgUXVpbnR1cwogICAgICAgICAgICAgICAgICAgIFNjYWV2b2xhIHRoZSBhdWd1ciwgaW4gdGhlIE1hcnNpYyB3YXIsIHdoZW4gaGUgd2FzIGEgbWFuIG9mIGV4dHJlbWUgb2xkIGFnZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcXVpdGUgYnJva2VuIGRvd24gaW4gY29uc3RpdHV0aW9uLCBldmVyeSBkYXksIGFzIHNvb24gYXMgaXQgd2FzIGRheWxpZ2h0LCB1c2VkCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSBldmVyeSBvbmUgYW4gb3Bwb3J0dW5pdHkgb2YgY29uc3VsdGluZyBoaW07IG5vciwgdGhyb3VnaG91dCBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIHdhciwgZGlkIGFueSBvbmUgZXZlciBzZWUgaGltIGluIGJlZDsgYW5kLCB0aG91Z2ggb2xkIGFuZCB3ZWFrLCBoZSB3YXMgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbWFuIHRvIGNvbWUgaW50byB0aGUgc2VuYXRlLWhvdXNlLiBJIHdpc2gsIGFib3ZlIGFsbCB0aGluZ3MsIHRoYXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gZG8gc28gd291bGQgaW1pdGF0ZSBoaXMgaW5kdXN0cnk7IGFuZCwgbmV4dCB0byB0aGF0LCBJIHdpc2ggdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IGVudnkgdGhlIGV4ZXJ0aW9ucyBvZiBhbm90aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['8.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['8.11.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRydXRoLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBub3cgd2UgaGF2ZSBiZWd1biB0byBlbnRlcnRhaW4gaG9wZXMgb2YgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIGFnYWluLCBhZnRlciBhIHBlcmlvZCBvZiBzaXggeWVhcnMsIGR1cmluZyB3aGljaCB3ZSBoYXZlIGJlZW4gZGVwcml2ZWQgb2YgaXQsCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGVuZHVyZWQgc2xhdmVyeSBsb25nZXIgdGhhbiBwcnVkZW50IGFuZCBpbmR1c3RyaW91cyBwcmlzb25lcnMgdXN1YWxseSBkbywKICAgICAgICAgICAgICAgICAgICB3aGF0IHdhdGNoZnVsbmVzcywgd2hhdCBhbnhpZXR5LCB3aGF0IGV4ZXJ0aW9ucyBvdWdodCB3ZSB0byBzaHJpbmsgZnJvbSwgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNha2Ugb2YgZGVsaXZlcmluZyB0aGUgUm9tYW4gcGVvcGxlPyBJbiB0cnV0aCwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhvdWdoIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGhhZCB0aGUgaG9ub3JzIGNvbmZlcnJlZCBvbiB0aGVtIHRoYXQgd2UgaGF2ZSwgdXN1YWxseSB3ZWFyIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZ293bnMsIHdoaWxlIHRoZSByZXN0IG9mIHRoZSBjaXR5IGlzIGluIHRoZSByb2JlIG9mIHdhciwgc3RpbGwgSSBkZWNpZGVkIHRoYXQgYXQKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgbW9tZW50b3VzIGNyaXNpcywgYW5kIHdoZW4gdGhlIHdob2xlIHJlcHVibGljIHdhcyBpbiBzbyBkaXN0dXJiZWQgYQogICAgICAgICAgICAgICAgICAgIHN0YXRlLCB3ZSB3b3VsZCBub3QgZGlmZmVyIGluIG91ciBkcmVzcyBmcm9tIHlvdSBhbmQgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLgogICAgICAgICAgICAgICAgICAgIEZvciB3ZSBtZW4gb2YgY29uc3VsYXIgcmFuayBhcmUgbm90IGluIHRoaXMgd2FyIGNvbmR1Y3Rpbmcgb3Vyc2VsdmVzIGluIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIG1hbm5lciB0aGF0IHRoZSBSb21hbiBwZW9wbGUgd2lsbCBiZSBsaWtlbHkgdG8gbG9vayB3aXRoIGVxdWFuaW1pdHkgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZW5zaWducyBvZiBvdXIgaG9ub3IsIHdoZW4gc29tZSBvZiB1cyBhcmUgc28gY293YXJkbHkgYXMgdG8gaGF2ZSBjYXN0IGF3YXkgYWxsCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0aW9uIG9mIHRoZSBraW5kbmVzc2VzIHdoaWNoIHRoZXkgaGF2ZSByZWNlaXZlZCBmcm9tIHRoZSBSb21hbiBwZW9wbGU7CiAgICAgICAgICAgICAgICAgICAgc29tZSBhcmUgc28gZGlzYWZmZWN0ZWQgdG8gdGhlIHJlcHVibGljIHRoYXQgdGhleSBvcGVubHkgYWxsZWdlIHRoYXQgdGhleSBmYXZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgZW5lbXksIGFuZCBlYXNpbHkgYmVhciBoYXZpbmcgb3VyIGFtYmFzc2Fkb3JzIGRlc3Bpc2VkIGFuZCBpbnN1bHRlZCBieQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLCB3aGlsZSB0aGV5IHdpc2ggdG8gc3VwcG9ydCB0aGUgYW1iYXNzYWRvciBzZW50IGJ5IEFudG9uaXVzLiBGb3IgdGhleQogICAgICAgICAgICAgICAgICAgIHNhaWQgdGhhdCBoZSBvdWdodCBub3QgdG8gYmUgcHJldmVudGVkIGZyb20gcmV0dXJuaW5nIHRvIEFudG9uaXVzLCBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIGFuIGFtZW5kbWVudCB0byBteSBwcm9wb3NpdGlvbiBvZiBub3QgcmVjZWl2aW5nIGhpbS4gV2VsbCwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgc3VibWl0IHRvIHRoZW0uIExldCBWYXJpdXMgcmV0dXJuIHRvIGhpcyBnZW5lcmFsLCBidXQgb24gY29uZGl0aW9uIHRoYXQgaGUgbmV2ZXIKICAgICAgICAgICAgICAgICAgICByZXR1cm5zIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEzOTYyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTM5NjIiPlJvbWU8L3BsYWNlTmFtZT4uIEFuZCBhcyB0byB0aGUgb3RoZXJzLAogICAgICAgICAgICAgICAgICAgIGlmIHRoZXkgYWJhbmRvbiB0aGVpciBlcnJvcnMsIGFuZCByZXR1cm4gdG8gdGhlaXIgZHV0eSB0byB0aGUgcmVwdWJsaWMsIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGV5IG1heSBoZSBwYXJkb25lZCBhbmQgbGVmdCB1bnB1bmlzaGVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMzk2MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+LiBBbmQgYXMgdG8gdGhlIG90aGVycywKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IGFiYW5kb24gdGhlaXIgZXJyb3JzLCBhbmQgcmV0dXJuIHRvIHRoZWlyIGR1dHkgdG8gdGhlIHJlcHVibGljLCBJIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgdGhleSBtYXkgaGUgcGFyZG9uZWQgYW5kIGxlZnQgdW5wdW5pc2hlZC4gPC90cmFuc2xhdGlvbj4="
translation['8.11.33'] = ""
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHdpc2gsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgdGhlIGltbW9ydGFsIGdvZHMgaGFkIGdyYW50ZWQgdG8gdXMgdG8gcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgdGhhbmtzIHRvIFNlcnZpdXMgU3VscGljaXVzIHdoaWxlIGFsaXZlLCByYXRoZXIgdGhhbiB0aHVzIHRvIGRldmlzZSBob25vcnMgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltIG5vdyB0aGF0IGhlIGlzIGRlYWQuIE5vciBoYXZlIEkgYW55IGRvdWJ0LCBidXQgdGhhdCBpZiB0aGF0IG1hbiBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGFibGUgaGltc2VsZiB0byBnaXZlIHVzIGhpcyByZXBvcnQgb2YgdGhlIHByb2NlZWRpbmdzIG9mIGhpcyBlbWJhc3N5LCBoaXMgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBiZWVuIGFjY2VwdGFibGUgdG8geW91IGFuZCBzYWx1dGFyeSB0byB0aGUgcmVwdWJsaWMuIE5vdCB0aGF0IGVpdGhlcgogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5MdWNpdXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4uIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QaXNvPC9zdXJuYW1lPjwvcGVyc05hbWU+IG9yIEx1Y2l1cyBQaGlsaXBwdXMgaGF2ZSBiZWVuIGRlZmljaWVudAogICAgICAgICAgICAgICAgICAgIGluIGVpdGhlciB6ZWFsIG9yIGNhcmUgaW4gdGhlIHBlcmZvcm1hbmNlIG9mIHNvIGltcG9ydGFudCBhIGR1dHkgYW5kIHNvIGdyYXZlIGEKICAgICAgICAgICAgICAgICAgICBjb21taXNzaW9uOyBidXQsIGFzIFNlcnZpdXMgU3VscGljaXVzIHdhcyBzdXBlcmlvciBpbiBhZ2UgdG8gdGhlbSwgYW5kIGluIHdpc2RvbQogICAgICAgICAgICAgICAgICAgIHRvIGV2ZXJ5IG9uZSwgaGUsIGJlaW5nIHN1ZGRlbmx5IHRha2VuIGZyb20gdGhlIGJ1c2luZXNzLCBsZWZ0IHRoZSB3aG9sZSBlbWJhc3N5CiAgICAgICAgICAgICAgICAgICAgY3JpcHBsZWQgYW5kIGVuZmVlYmxlZC4gPC9wPgoJCQkJPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkx1Y2l1czwvc3VybmFtZT48L3BlcnNOYW1lPi4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkx1Y2l1czwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UGlzbzwvc3VybmFtZT48L3BlcnNOYW1lPiBvciBMdWNpdXMgUGhpbGlwcHVzIGhhdmUgYmVlbiBkZWZpY2llbnQKICAgICAgICAgICAgICAgICAgICBpbiBlaXRoZXIgemVhbCBvciBjYXJlIGluIHRoZSBwZXJmb3JtYW5jZSBvZiBzbyBpbXBvcnRhbnQgYSBkdXR5IGFuZCBzbyBncmF2ZSBhCiAgICAgICAgICAgICAgICAgICAgY29tbWlzc2lvbjsgYnV0LCBhcyBTZXJ2aXVzIFN1bHBpY2l1cyB3YXMgc3VwZXJpb3IgaW4gYWdlIHRvIHRoZW0sIGFuZCBpbiB3aXNkb20KICAgICAgICAgICAgICAgICAgICB0byBldmVyeSBvbmUsIGhlLCBiZWluZyBzdWRkZW5seSB0YWtlbiBmcm9tIHRoZSBidXNpbmVzcywgbGVmdCB0aGUgd2hvbGUgZW1iYXNzeQogICAgICAgICAgICAgICAgICAgIGNyaXBwbGVkIGFuZCBlbmZlZWJsZWQuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QaXNvPC9zdXJuYW1lPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBpZiBkZXNlcnZlZCBob25vcnMgaGF2ZSBiZWVuIHBhaWQgdG8gYW55CiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvciBhZnRlciBkZWF0aCwgdGhlcmUgaXMgbm8gb25lIGJ5IHdob20gdGhleSBjYW4gYmUgZm91bmQgdG8gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZXZlciBtb3JlIGZ1bGx5IGRlc2VydmVkIHRoYW4gYnkgU2Vydml1cyBTdWxwaWNpdXMuIFRoZSByZXN0IG9mIHRob3NlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGRpZWQgd2hpbGUgZW5nYWdlZCBvbiBhbiBlbWJhc3N5LCBoYXZlIGdvbmUgZm9ydGgsIHN1YmplY3QgaW5kZWVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHVzdWFsIHVuY2VydGFpbnRpZXMgb2YgbGlmZSwgYnV0IHdpdGhvdXQgYW55IGVzcGVjaWFsIGRhbmdlciBvciBmZWFyIG9mIGRlYXRoLgogICAgICAgICAgICAgICAgICAgIFNlcnZpdXMgU3VscGljaXVzIHNldCBvdXQgd2l0aCBzb21lIGhvcGUgaW5kZWVkIG9mIHJlYWNoaW5nIEFudG9uaXVzLCBidXQgd2l0aAogICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgcmV0dXJuaW5nLiBCdXQgdGhvdWdoIGhlIHdhcyBzbyB2ZXJ5IGlsbCB0aGF0IGlmIGFueSBleGVydGlvbiB3ZXJlIGFkZGVkCiAgICAgICAgICAgICAgICAgICAgdG8gaGlzIGJhZCBzdGF0ZSBvZiBoZWFsdGgsIGhlIHdvdWxkIGhhdmUgbm8gaG9wZSBvZiBoaW1zZWxmLCBzdGlsbCBoZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgcmVmdXNlIHRvIHRyeSwgZXZlbiB3aGlsZSBhdCBoaXMgbGFzdCBnYXNwLCB0byBiZSBvZiBzb21lIHNlcnZpY2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIFRoZXJlZm9yZSBuZWl0aGVyIHRoZSBzZXZlcml0eSBvZiB0aGUgd2ludGVyLCBub3IgdGhlIHNub3csIG5vciB0aGUKICAgICAgICAgICAgICAgICAgICBsZW5ndGggb2YgdGhlIGpvdXJuZXksIG5vciB0aGUgYmFkbmVzcyBvZiB0aGUgcm9hZHMsIG5vciBoaXMgZGFpbHkgaW5jcmVhc2luZwogICAgICAgICAgICAgICAgICAgIGlsbG5lc3MsIGRlbGF5ZWQgaGltLiBBbmQgd2hlbiBoZSBoYWQgYXJyaXZlZCB3aGVyZSBoZSBtaWdodCBtZWV0IGFuZCBjb25mZXIKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBtYW4gdG8gd2hvbSBoZSBoYWQgYmVlbiBzZW50LCBoZSBkZXBhcnRlZCB0aGlzIGxpZmUgaW4gdGhlIG1pZHN0IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGNhcmUgYW5kIGNvbnNpZGVyYXRpb24gYXMgdG8gaG93IGhlIG1pZ2h0IGJlc3QgZGlzY2hhcmdlIHRoZSBkdXR5IHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHVuZGVydGFrZW4uIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaWYgZGVzZXJ2ZWQgaG9ub3JzIGhhdmUgYmVlbiBwYWlkIHRvIGFueQogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3IgYWZ0ZXIgZGVhdGgsIHRoZXJlIGlzIG5vIG9uZSBieSB3aG9tIHRoZXkgY2FuIGJlIGZvdW5kIHRvIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGV2ZXIgbW9yZSBmdWxseSBkZXNlcnZlZCB0aGFuIGJ5IFNlcnZpdXMgU3VscGljaXVzLiBUaGUgcmVzdCBvZiB0aG9zZSBtZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBkaWVkIHdoaWxlIGVuZ2FnZWQgb24gYW4gZW1iYXNzeSwgaGF2ZSBnb25lIGZvcnRoLCBzdWJqZWN0IGluZGVlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICB1c3VhbCB1bmNlcnRhaW50aWVzIG9mIGxpZmUsIGJ1dCB3aXRob3V0IGFueSBlc3BlY2lhbCBkYW5nZXIgb3IgZmVhciBvZiBkZWF0aC4KICAgICAgICAgICAgICAgICAgICBTZXJ2aXVzIFN1bHBpY2l1cyBzZXQgb3V0IHdpdGggc29tZSBob3BlIGluZGVlZCBvZiByZWFjaGluZyBBbnRvbml1cywgYnV0IHdpdGgKICAgICAgICAgICAgICAgICAgICBub25lIG9mIHJldHVybmluZy4gQnV0IHRob3VnaCBoZSB3YXMgc28gdmVyeSBpbGwgdGhhdCBpZiBhbnkgZXhlcnRpb24gd2VyZSBhZGRlZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBiYWQgc3RhdGUgb2YgaGVhbHRoLCBoZSB3b3VsZCBoYXZlIG5vIGhvcGUgb2YgaGltc2VsZiwgc3RpbGwgaGUgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlZnVzZSB0byB0cnksIGV2ZW4gd2hpbGUgYXQgaGlzIGxhc3QgZ2FzcCwgdG8gYmUgb2Ygc29tZSBzZXJ2aWNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiBUaGVyZWZvcmUgbmVpdGhlciB0aGUgc2V2ZXJpdHkgb2YgdGhlIHdpbnRlciwgbm9yIHRoZSBzbm93LCBub3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoIG9mIHRoZSBqb3VybmV5LCBub3IgdGhlIGJhZG5lc3Mgb2YgdGhlIHJvYWRzLCBub3IgaGlzIGRhaWx5IGluY3JlYXNpbmcKICAgICAgICAgICAgICAgICAgICBpbGxuZXNzLCBkZWxheWVkIGhpbS4gQW5kIHdoZW4gaGUgaGFkIGFycml2ZWQgd2hlcmUgaGUgbWlnaHQgbWVldCBhbmQgY29uZmVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgbWFuIHRvIHdob20gaGUgaGFkIGJlZW4gc2VudCwgaGUgZGVwYXJ0ZWQgdGhpcyBsaWZlIGluIHRoZSBtaWRzdCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBjYXJlIGFuZCBjb25zaWRlcmF0aW9uIGFzIHRvIGhvdyBoZSBtaWdodCBiZXN0IGRpc2NoYXJnZSB0aGUgZHV0eSB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2VuLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyB0aGVyZWZvcmUsIE8gQ2FpdXMgUGFuc2EsIHlvdSBoYXZlIGRvbmUgd2VsbCBpbiBvdGhlciByZXNwZWN0cywgc28geW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBhY3RlZCBhZG1pcmFibHkgaW4gZXhob3J0aW5nIHVzIHRoaXMgZGF5IHRvIHBheSBob25vciB0byBTZXJ2aXVzIFN1bHBpY2l1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4geW91cnNlbGYgbWFraW5nIGFuIGVsb3F1ZW50IG9yYXRpb24gaW4gaGlzIHByYWlzZS4gQW5kIGFmdGVyIHRoZSBzcGVlY2ggd2hpY2gKICAgICAgICAgICAgICAgICAgICB3ZSBoYXZlIGhlYXJkIGZyb20geW91LCBJIHNob3VsZCBoYXZlIGJlZW4gY29udGVudCB0byBzYXkgbm90aGluZyBiZXlvbmQgYmFyZWx5CiAgICAgICAgICAgICAgICAgICAgZ2l2aW5nIG15IHZvdGUsIGlmIEkgZGlkIG5vdCB0aGluayBpdCBuZWNlc3NhcnkgdG8gcmVwbHkgdG8gUHVibGl1cyBTZXJ2aWxpdXMsCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhcyBkZWNsYXJlZCBoaXMgb3BpbmlvbiB0aGF0IHRoaXMgaG9ub3Igb2YgYSBzdGF0dWUgb3VnaHQgdG8gYmUgZ3JhbnRlZCB0bwogICAgICAgICAgICAgICAgICAgIG5vIG9uZSB3aG8gaGFzIG5vdCBiZWVuIGFjdHVhbGx5IHNsYWluIHdpdGggYSBzd29yZCB3aGlsZSBwZXJmb3JtaW5nIHRoZSBkdXRpZXMKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZW1iYXNzeS4gQnV0IEksIE8gY29uc2NyaXB0IGZhdGhlcnMsIGNvbnNpZGVyIHRoYXQgdGhpcyB3YXMgdGhlIGZlZWxpbmcKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgYW5jZXN0b3JzLCB0aGF0IHRoZXkgY29uc2lkZXJlZCB0aGF0IGl0IHdhcyB0aGUgY2F1c2Ugb2YgZGVhdGgsIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGUgbWFubmVyIG9mIGl0LCB3aGljaCB3YXMgYSBwcm9wZXIgc3ViamVjdCBmb3IgaW5xdWlyeS4gSW4gZmFjdCwgdGhleSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgZml0IHRoYXQgYSBtb251bWVudCBzaG91bGQgYmUgZXJlY3RlZCB0byBhbnkgbWFuIHdob3NlIGRlYXRoIHdhcyBjYXVzZWQgYnkgYW4KICAgICAgICAgICAgICAgICAgICBlbWJhc3N5LCBpbiBvcmRlciB0byB0ZW1wdCBtZW4gaW4gcGVyaWxvdXMgd2FycyB0byBiZSB0aGUgbW9yZSBib2xkIGluCiAgICAgICAgICAgICAgICAgICAgdW5kZXJ0YWtpbmcgdGhlIG9mZmljZSBvZiBhbiBhbWJhc3NhZG9yLiBXaGF0IHdlIG91Z2h0IHRvIGRvLCB0aGVyZWZvcmUsIGlzLCBub3QKICAgICAgICAgICAgICAgICAgICB0byBzY3J1dGluaXplIHRoZSBwcmVjZWRlbnRzIGFmZm9yZGVkIGJ5IG91ciBhbmNlc3RvcnMsIGJ1dCB0byBleHBsYWluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9ucyBmcm9tIHdoaWNoIHRoZSBwcmVjZWRlbnRzIHRoZW1zZWx2ZXMgYXJvc2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['9.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFyIFRvbHVtbml1cywgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDkxMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTEwNCI+VmVpaTwvcGxhY2VOYW1lPiwgc2xldwogICAgICAgICAgICAgICAgICAgIGZvdXIgYW1iYXNzYWRvcnMgb2YgdGhlIFJvbWFuIHBlb3BsZSwgYXQgRmlkZW5hZSwgd2hvc2Ugc3RhdHVlcyB3ZXJlIHN0YW5kaW5nIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHJvc3RyYSB0aWxsIHdpdGhpbiBteSByZWNvbGxlY3Rpb24uIFRoZSBob25vciB3YXMgd2VsbCBkZXNlcnZlZC4gRm9yIG91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycyBnYXZlIHRob3NlIG1lbiB3aG8gaGFkIGVuY291bnRlcmVkIGRlYXRoIGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhbiBpbXBlcmlzaGFibGUgbWVtb3J5IGluIGV4Y2hhbmdlIGZvciB0aGlzIHRyYW5zaXRvcnkgbGlmZS4gV2Ugc2VlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHJvc3RyYSB0aGUgc3RhdHVlIG9mIENuYWV1cyBPY3Rhdml1cywgYW4gaWxsdXN0cmlvdXMgYW5kIGdyZWF0IG1hbiwgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBicm91Z2h0IHRoZSBjb25zdWxzaGlwIGludG8gdGhhdCBmYW1pbHksIHdoaWNoIGFmdGVyd2FyZCBhYm91bmRlZCBpbgogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIG1lbi4gVGhlcmUgd2FzIG5vIG9uZSB0aGVuIHdobyBlbnZpZWQgaGltLCBiZWNhdXNlIGhlIHdhcyBhIG5ldyBtYW47CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIG5vIG9uZSB3aG8gZGlkIG5vdCBob25vciBoaXMgdmlydHVlLiBCdXQgeWV0IHRoZSBlbWJhc3N5IG9mIE9jdGF2aXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIG9uZSBpbiB3aGljaCB0aGVyZSB3YXMgbm8gc3VzcGljaW9uIG9mIGRhbmdlci4gRm9yIGhhdmluZyBiZWVuIHNlbnQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHRvIGludmVzdGlnYXRlIHRoZSBkaXNwb3NpdGlvbnMgb2Yga2luZ3MgYW5kIG9mIGZyZWUgbmF0aW9ucywgYW5kCiAgICAgICAgICAgICAgICAgICAgZXNwZWNpYWxseSB0byBmb3JiaWQgdGhlIGdyYW5kc29uIG9mIGtpbmcgQW50aW9jaHVzLCB0aGUgb25lIHdobyBoYWQgY2FycmllZCBvbgogICAgICAgICAgICAgICAgICAgIHdhciBhZ2FpbnN0IG91ciBmb3JlZmF0aGVycywgdG8gbWFpbnRhaW4gZmxlZXRzIGFuZCB0byBrZWVwIGVsZXBoYW50cywgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgc2xhaW4gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIyODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjI4MCI+TGFvZGljZWE8L3BsYWNlTmFtZT4sIGluIHRoZSBneW1uYXNpdW0sIGJ5CiAgICAgICAgICAgICAgICAgICAgYSBtYW4gb2YgdGhlIG5hbWUgb2YgTGVwdGluZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBPbiB0aGlzIGEKICAgICAgICAgICAgICAgICAgICBzdGF0dWUgd2FzIGdpdmVuIHRvIGhpbSBieSBvdXIgYW5jZXN0b3JzIGFzIGEgcmVjb21wZW5zZSBmb3IgaGlzIGxpZmUsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgZW5ub2JsZSBoaXMgcHJvZ2VueSBmb3IgbWFueSB5ZWFycywgYW5kIHdoaWNoIGlzIG5vdyB0aGUgb25seSBtZW1vcmlhbAogICAgICAgICAgICAgICAgICAgIGxlZnQgb2Ygc28gaWxsdXN0cmlvdXMgYSBmYW1pbHkuIEJ1dCBpbiBoaXMgY2FzZSwgYW5kIGluIHRoYXQgb2YgVHVsbHVzCiAgICAgICAgICAgICAgICAgICAgICAgIENsdXZpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVyZSBpcyBzb21lIGNvcnJ1cHRpb24gb2YgdGhlIHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgaGVyZS48L25vdGU+IGFuZCBMdWNpdXMgUm9zY2l1cywgYW5kIFNwdXJpdXMgQW50aXVzLCBhbmQgQ2FpdXMgRnVsY2luaXVzLAogICAgICAgICAgICAgICAgICAgIHdobyB3ZXJlIHNsYWluIGJ5IHRoZSBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVmVpaSIga2V5PSJwZXJzZXVzLFZlaWkiPlZlaWk8L3BsYWNlTmFtZT4sIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCB0aGUgYmxvb2QgdGhhdCB3YXMgc2hlZCBhdCB0aGVpciBkZWF0aCwgYnV0IHRoZSBkZWF0aCBpdHNlbGYgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgZW5jb3VudGVyZWQgaW4gdGhlIHNlcnZpY2Ugb2YgdGhlIHJlcHVibGljLCB3aGljaCB3YXMgdGhlIGNhdXNlIG9mIHRoZWlyIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgdGh1cyBob25vcmVkLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDkxMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTEwNCI+VmVpaTwvcGxhY2VOYW1lPiwgc2xldwogICAgICAgICAgICAgICAgICAgIGZvdXIgYW1iYXNzYWRvcnMgb2YgdGhlIFJvbWFuIHBlb3BsZSwgYXQgRmlkZW5hZSwgd2hvc2Ugc3RhdHVlcyB3ZXJlIHN0YW5kaW5nIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHJvc3RyYSB0aWxsIHdpdGhpbiBteSByZWNvbGxlY3Rpb24uIFRoZSBob25vciB3YXMgd2VsbCBkZXNlcnZlZC4gRm9yIG91cgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycyBnYXZlIHRob3NlIG1lbiB3aG8gaGFkIGVuY291bnRlcmVkIGRlYXRoIGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhbiBpbXBlcmlzaGFibGUgbWVtb3J5IGluIGV4Y2hhbmdlIGZvciB0aGlzIHRyYW5zaXRvcnkgbGlmZS4gV2Ugc2VlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHJvc3RyYSB0aGUgc3RhdHVlIG9mIENuYWV1cyBPY3Rhdml1cywgYW4gaWxsdXN0cmlvdXMgYW5kIGdyZWF0IG1hbiwgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBicm91Z2h0IHRoZSBjb25zdWxzaGlwIGludG8gdGhhdCBmYW1pbHksIHdoaWNoIGFmdGVyd2FyZCBhYm91bmRlZCBpbgogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIG1lbi4gVGhlcmUgd2FzIG5vIG9uZSB0aGVuIHdobyBlbnZpZWQgaGltLCBiZWNhdXNlIGhlIHdhcyBhIG5ldyBtYW47CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIG5vIG9uZSB3aG8gZGlkIG5vdCBob25vciBoaXMgdmlydHVlLiBCdXQgeWV0IHRoZSBlbWJhc3N5IG9mIE9jdGF2aXVzCiAgICAgICAgICAgICAgICAgICAgd2FzIG9uZSBpbiB3aGljaCB0aGVyZSB3YXMgbm8gc3VzcGljaW9uIG9mIGRhbmdlci4gRm9yIGhhdmluZyBiZWVuIHNlbnQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHRvIGludmVzdGlnYXRlIHRoZSBkaXNwb3NpdGlvbnMgb2Yga2luZ3MgYW5kIG9mIGZyZWUgbmF0aW9ucywgYW5kCiAgICAgICAgICAgICAgICAgICAgZXNwZWNpYWxseSB0byBmb3JiaWQgdGhlIGdyYW5kc29uIG9mIGtpbmcgQW50aW9jaHVzLCB0aGUgb25lIHdobyBoYWQgY2FycmllZCBvbgogICAgICAgICAgICAgICAgICAgIHdhciBhZ2FpbnN0IG91ciBmb3JlZmF0aGVycywgdG8gbWFpbnRhaW4gZmxlZXRzIGFuZCB0byBrZWVwIGVsZXBoYW50cywgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgc2xhaW4gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIyODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjI4MCI+TGFvZGljZWE8L3BsYWNlTmFtZT4sIGluIHRoZSBneW1uYXNpdW0sIGJ5CiAgICAgICAgICAgICAgICAgICAgYSBtYW4gb2YgdGhlIG5hbWUgb2YgTGVwdGluZXMuIDwvdHJhbnNsYXRpb24+"
translation['9.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBPbiB0aGlzIGEKICAgICAgICAgICAgICAgICAgICBzdGF0dWUgd2FzIGdpdmVuIHRvIGhpbSBieSBvdXIgYW5jZXN0b3JzIGFzIGEgcmVjb21wZW5zZSBmb3IgaGlzIGxpZmUsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgZW5ub2JsZSBoaXMgcHJvZ2VueSBmb3IgbWFueSB5ZWFycywgYW5kIHdoaWNoIGlzIG5vdyB0aGUgb25seSBtZW1vcmlhbAogICAgICAgICAgICAgICAgICAgIGxlZnQgb2Ygc28gaWxsdXN0cmlvdXMgYSBmYW1pbHkuIEJ1dCBpbiBoaXMgY2FzZSwgYW5kIGluIHRoYXQgb2YgVHVsbHVzCiAgICAgICAgICAgICAgICAgICAgICAgIENsdXZpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXJlIGlzIHNvbWUgY29ycnVwdGlvbiBvZiB0aGUgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICBoZXJlLjwvbm90ZT4gYW5kIEx1Y2l1cyBSb3NjaXVzLCBhbmQgU3B1cml1cyBBbnRpdXMsIGFuZCBDYWl1cyBGdWxjaW5pdXMsCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgc2xhaW4gYnkgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxWZWlpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZWlpIj5WZWlpPC9wbGFjZU5hbWU+LCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBub3QgdGhlIGJsb29kIHRoYXQgd2FzIHNoZWQgYXQgdGhlaXIgZGVhdGgsIGJ1dCB0aGUgZGVhdGggaXRzZWxmIHdoaWNoIHdhcwogICAgICAgICAgICAgICAgICAgIGVuY291bnRlcmVkIGluIHRoZSBzZXJ2aWNlIG9mIHRoZSByZXB1YmxpYywgd2hpY2ggd2FzIHRoZSBjYXVzZSBvZiB0aGVpciBiZWluZwogICAgICAgICAgICAgICAgICAgIHRodXMgaG9ub3JlZC4gPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBpZiBpdCBoYWQgYmVlbiBjaGFuY2Ugd2hpY2ggaGFkIGNhdXNlZCB0aGUgZGVhdGgKICAgICAgICAgICAgICAgICAgICBvZiBTZXJ2aXVzLiBTdWxwaWNpdXMsIEkgc2hvdWxkIHNvcnJvdyBpbmRlZWQgb3ZlciBzdWNoIGEgbG9zcyB0byB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgYnV0IEkgc2hvdWxkIGNvbnNpZGVyIGhpbSBkZXNlcnZpbmcgb2YgdGhlIGhvbm9yLCBub3Qgb2YgYSBtb251bWVudCwgYnV0IG9mIGEKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgbW91cm5pbmcuIEJ1dCwgYXMgaXQgaXMsIHdobyBpcyB0aGVyZSB3aG8gZG91YnRzIHRoYXQgaXQgd2FzIHRoZSBlbWJhc3N5CiAgICAgICAgICAgICAgICAgICAgaXRzZWxmIHdoaWNoIGNhdXNlZCBoaXMgZGVhdGg/IEZvciBoZSB0b29rIGRlYXRoIGF3YXkgd2l0aCBoaW07IHRob3VnaCwgaWYgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgcmVtYWluZWQgYW1vbmcgdXMsIGhpcyBvd24gY2FyZSwgYW5kIHRoZSBhdHRlbnRpb24gb2YgaGlzIG1vc3QgZXhjZWxsZW50IHNvbgogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgbW9zdCBmYWl0aGZ1bCB3aWZlLCBtaWdodCBoYXZlIHdhcmRlZCBpdCBvZmYuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaGUsIGFzIGhlIHNhdyB0aGF0LCBpZiBoZSBkaWQgbm90IG9iZXkgeW91ciBhdXRob3JpdHksCiAgICAgICAgICAgICAgICAgICAgaGUgc2hvdWxkIG5vdCBiZSBhY3RpbmcgbGlrZSBoaW1zZWxmOyBidXQgdGhhdCBpZiBoZSBkaWQgb2JleSwgdGhlbiB0aGF0IGR1dHksCiAgICAgICAgICAgICAgICAgICAgdW5kZXJ0YWtlbiBmb3IgdGhlIHdlbGZhcmUgb2YgdGhlIHJlcHVibGljLCB3b3VsZCBiZSB0aGUgZW5kIG9mIGhpcyBsaWZlOwogICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZCBkeWluZyBhdCBhIG1vc3QgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgdG8gYXBwZWFyaW5nIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBkb25lIGxlc3Mgc2VydmljZSB0byB0aGUgcmVwdWJsaWMgdGhhbiBoZSBtaWdodCBoYXZlIGRvbmUuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaGUsIGFzIGhlIHNhdyB0aGF0LCBpZiBoZSBkaWQgbm90IG9iZXkgeW91ciBhdXRob3JpdHksCiAgICAgICAgICAgICAgICAgICAgaGUgc2hvdWxkIG5vdCBiZSBhY3RpbmcgbGlrZSBoaW1zZWxmOyBidXQgdGhhdCBpZiBoZSBkaWQgb2JleSwgdGhlbiB0aGF0IGR1dHksCiAgICAgICAgICAgICAgICAgICAgdW5kZXJ0YWtlbiBmb3IgdGhlIHdlbGZhcmUgb2YgdGhlIHJlcHVibGljLCB3b3VsZCBiZSB0aGUgZW5kIG9mIGhpcyBsaWZlOwogICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZCBkeWluZyBhdCBhIG1vc3QgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgdG8gYXBwZWFyaW5nIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBkb25lIGxlc3Mgc2VydmljZSB0byB0aGUgcmVwdWJsaWMgdGhhbiBoZSBtaWdodCBoYXZlIGRvbmUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaGFkIGFuIG9wcG9ydHVuaXR5IG9mIHJlY3J1aXRpbmcgaGlzIHN0cmVuZ3RoIGFuZCB0YWtpbmcgY2FyZSBvZiBoaW1zZWxmIGluCiAgICAgICAgICAgICAgICAgICAgbWFueSBjaXRpZXMgdGhyb3VnaCB3aGljaCBoaXMgam91cm5leSBsYXkuIEhlIHdhcyBtZXQgYnkgdGhlIGxpYmVyYWwgaW52aXRhdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIG1hbnkgZW50ZXJ0YWluZXJzLCBhcyBoaXMgZGlnbml0eSBkZXNlcnZlZCwgYW5kIHRoZSBtZW4gdG9vIHdobyB3ZXJlIHNlbnQKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpbSBleGhvcnRlZCBoaW0gdG8gdGFrZSByZXN0LCBhbmQgdG8gdGhpbmsgb2YgaGlzIG93biBoZWFsdGguIEJ1dCBoZSwKICAgICAgICAgICAgICAgICAgICByZWZ1c2luZyBhbGwgZGVsYXksIGhhc3RlbmluZyBvbiwgZWFnZXIgdG8gcGVyZm9ybSB5b3VyIGNvbW1hbmRzLCBwZXJzZXZlcmVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyBoaXMgY29uc3RhbnQgcHVycG9zZSwgaW4gc3BpdGUgb2YgdGhlIGhpbmRyYW5jZXMgb2YgaGlzIGlsbG5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgYXMgQW50b25pdXMgd2FzIGFib3ZlIGFsbCB0aGluZ3MgZGlzdHVyYmVkIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGFycml2YWwsIGJlY2F1c2UgdGhlIGNvbW1hbmRzIHdoaWNoIHdlcmUgbGFpZCB1cG9uIGhpbSBieSB5b3VyIG9yZGVycyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGRyYXduIHVwIGJ5IHRoZSBhdXRob3JpdHkgYW5kIHdpc2RvbSBvZiBTZXJ2aXVzIFN1bHBpY2l1cywgaGUgc2hvd2VkIHBsYWlubHkgaG93CiAgICAgICAgICAgICAgICAgICAgaGUgaGF0ZWQgdGhlIHNlbmF0ZSBieSB0aGUgZXZpZGVudCBqb3kgd2hpY2ggaGUgZGlzcGxheWVkIGF0IHRoZSBkZWF0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZpc2VyIG9mIHRoZSBzZW5hdGUuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgYXMgQW50b25pdXMgd2FzIGFib3ZlIGFsbCB0aGluZ3MgZGlzdHVyYmVkIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGFycml2YWwsIGJlY2F1c2UgdGhlIGNvbW1hbmRzIHdoaWNoIHdlcmUgbGFpZCB1cG9uIGhpbSBieSB5b3VyIG9yZGVycyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGRyYXduIHVwIGJ5IHRoZSBhdXRob3JpdHkgYW5kIHdpc2RvbSBvZiBTZXJ2aXVzIFN1bHBpY2l1cywgaGUgc2hvd2VkIHBsYWlubHkgaG93CiAgICAgICAgICAgICAgICAgICAgaGUgaGF0ZWQgdGhlIHNlbmF0ZSBieSB0aGUgZXZpZGVudCBqb3kgd2hpY2ggaGUgZGlzcGxheWVkIGF0IHRoZSBkZWF0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZpc2VyIG9mIHRoZSBzZW5hdGUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGVwdGluZXMgdGhlbiBkaWQgbm90IGtpbGwgT2N0YXZpdXMsIG5vciBkaWQgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxWZWlpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZWlpIj5WZWlpPC9wbGFjZU5hbWU+IHNsYXkgdGhvc2Ugd2hvbSBJIGhhdmUganVzdCBuYW1lZCwgbW9yZQogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgdGhhbiBBbnRvbml1cyBraWxsZWQgU2Vydml1cyBTdWxwaWNpdXMuIFN1cmVseSBoZSBicm91Z2h0IHRoZSBtYW4gZGVhdGgsCiAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyB0aGUgY2F1c2Ugb2YgaGlzIGRlYXRoLiBXaGVyZWZvcmUsIEkgdGhpbmsgaXQgb2YgY29uc2VxdWVuY2UsIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwb3N0ZXJpdHkgbWF5IHJlY29sbGVjdCBpdCwgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSByZWNvcmQgb2Ygd2hhdCB0aGUKICAgICAgICAgICAgICAgICAgICBqdWRnbWVudCBvZiB0aGUgc2VuYXRlIHdhcyBjb25jZXJuaW5nIHRoaXMgd2FyLiBGb3IgdGhlIHN0YXR1ZSBpdHNlbGYgd2lsbCBiZSBhCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyB0aGF0IHRoZSB3YXIgd2FzIHNvIHNlcmlvdXMgYSBvbmUsIHRoYXQgdGhlIGRlYXRoIG9mIGFuIGFtYmFzc2Fkb3IgaW4gaXQKICAgICAgICAgICAgICAgICAgICBnYWluZWQgdGhlIGhvbm9yIG9mIGFuIGltcGVyaXNoYWJsZSBtZW1vcmlhbC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVmVpaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVmVpaSI+VmVpaTwvcGxhY2VOYW1lPiBzbGF5IHRob3NlIHdob20gSSBoYXZlIGp1c3QgbmFtZWQsIG1vcmUKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHRoYW4gQW50b25pdXMga2lsbGVkIFNlcnZpdXMgU3VscGljaXVzLiBTdXJlbHkgaGUgYnJvdWdodCB0aGUgbWFuIGRlYXRoLAogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgdGhlIGNhdXNlIG9mIGhpcyBkZWF0aC4gV2hlcmVmb3JlLCBJIHRoaW5rIGl0IG9mIGNvbnNlcXVlbmNlLCBpbiBvcmRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgcG9zdGVyaXR5IG1heSByZWNvbGxlY3QgaXQsIHRoYXQgdGhlcmUgc2hvdWxkIGJlIGEgcmVjb3JkIG9mIHdoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAganVkZ21lbnQgb2YgdGhlIHNlbmF0ZSB3YXMgY29uY2VybmluZyB0aGlzIHdhci4gRm9yIHRoZSBzdGF0dWUgaXRzZWxmIHdpbGwgYmUgYQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3MgdGhhdCB0aGUgd2FyIHdhcyBzbyBzZXJpb3VzIGEgb25lLCB0aGF0IHRoZSBkZWF0aCBvZiBhbiBhbWJhc3NhZG9yIGluIGl0CiAgICAgICAgICAgICAgICAgICAgZ2FpbmVkIHRoZSBob25vciBvZiBhbiBpbXBlcmlzaGFibGUgbWVtb3JpYWwuIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['9.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB5b3Ugd291bGQgb25seSByZWNvbGxlY3QgdGhlIGV4Y3VzZXMgYWxsZWdlZCBieQogICAgICAgICAgICAgICAgICAgIFNlcnZpdXMgU3VscGljaXVzIHdoeSBoZSBzaG91bGQgbm90IGJlIGFwcG9pbnRlZCB0byB0aGlzIGVtYmFzc3ksIHRoZW4gbm8gZG91YnQKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGxlZnQgb24geW91ciBtaW5kcyB0aGF0IHdlIG91Z2h0IHRvIHJlcGFpciBieSB0aGUgaG9ub3IgcGFpZCB0byB0aGUgZGVhZAogICAgICAgICAgICAgICAgICAgIHRoZSBpbmp1cnkgd2hpY2ggd2UgZGlkIHRvIGhpbSB3aGlsZSBsaXZpbmcuIEZvciBpdCBpcyB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMKICAgICAgICAgICAgICAgICAgICAoaXQgaXMgYSBncmF2ZSBjaGFyZ2UgdG8gbWFrZSwgYnV0IGl0IG11c3QgYmUgdXR0ZXJlZCksIGl0IGlzIHlvdSwgSSBzYXksIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgZGVwcml2ZWQgU2Vydml1cyBTdWxwaWNpdXMgb2YgbGlmZS4gRm9yIHdoZW4geW91IHNhdyBoaW0gcGxlYWRpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgaWxsbmVzcyBhcyBhbiBleGN1c2UgbW9yZSBieSB0aGUgdHJ1dGggb2YgdGhlIGZhY3QgdGhhbiBieSBhbnkgbGFib3JlZCBwbGVhIG9mCiAgICAgICAgICAgICAgICAgICAgd29yZHMsIHlvdSB3ZXJlIG5vdCBpbmRlZWQgY3J1ZWwgKGZvciB3aGF0IGNhbiBiZSBtb3JlIGltcG9zc2libGUgZm9yIHRoaXMgb3JkZXIKICAgICAgICAgICAgICAgICAgICB0byBiZSBndWlsdHkgb2YgdGhhbiB0aGF0KSwgYnV0IGFzIHlvdSBob3BlZCB0aGF0IHRoZXJlIHdhcyBub3RoaW5nIHRoYXQgY291bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgYWNjb21wbGlzaGVkIGJ5IGhpcyBhdXRob3JpdHkgYW5kIHdpc2RvbSwgeW91IG9wcG9zZWQgaGlzIGV4Y3VzZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZWFybmVzdG5lc3MsIGFuZCBjb21wZWxsZWQgdGhlIG1hbiwgd2hvIGhhZCBhbHdheXMgdGhvdWdodCB5b3VyIGRlY2lzaW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBncmVhdGVzdCB3ZWlnaHQsIHRvIGFiYW5kb24gaGlzIG93biBvcGluaW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gdGhlcmUgd2FzIGFkZGVkIHRoZSBleGhvcnRhdGlvbiBvZiBQYW5zYSwgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCBkZWxpdmVyZWQgd2l0aCBtb3JlIHdlaWdodCB0aGFuIHRoZSBlYXJzIG9mIFNlcnZpdXMgU3VscGljaXVzIGhhZAogICAgICAgICAgICAgICAgICAgIGxlYXJuZWQgdG8gcmVzaXN0LCB0aGVuIGF0IGxhc3QgaGUgbGVkIG1lIGFuZCBoaXMgb3duIHNvbiBhc2lkZSwgYW5kIHNhaWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBob3VuZCB0byBwcmVmZXIgeW91ciBhdXRob3JpdHkgdG8gaGlzIG93biBsaWZlLiBBbmQgd2UsIGFkbWlyaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIHZpcnR1ZSwgZGlkIG5vdCBkYXJlIHRvIG9wcG9zZSBoaXMgZGV0ZXJtaW5hdGlvbi4gSGlzIHNvbiB3YXMgbW92ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkgcGlldHkgYW5kIGFmZmVjdGlvbiwgYW5kIG15IG93biBncmllZiBkaWQgbm90IGZhbGwgZmFyIHNob3J0IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGFnaXRhdGlvbjsgYnV0IGVhY2ggb2YgdXMgd2FzIGNvbXBlbGxlZCB0byB5aWVsZCB0byBoaXMgZ3JlYXRuZXNzIG9mIG1pbmQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIHRoZSBkaWduaXR5IG9mIGhpcyBsYW5ndWFnZSwgd2hlbiBoZSwgaW5kZWVkLCBhbWlkIHRoZSBsb3VkIHByYWlzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uZ3JhdHVsYXRpb25zIG9mIHlvdSBhbGwsIHByb21pc2VkIHRvIGRvIHdoYXRldmVyIHlvdSB3aXNoZWQsIGFuZCBub3QgdG8gYXZvaWQKICAgICAgICAgICAgICAgICAgICB0aGUgZGFuZ2VyIHdoaWNoIG1pZ2h0IGJlIGluY3VycmVkIGJ5IHRoZSBhZG9wdGlvbiBvZiB0aGUgb3BpbmlvbiBvZiB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaGFkIGJlZW4gdGhlIGF1dGhvci4gQW5kIHdlIHRoZSBuZXh0IGRheSBlc2NvcnRlZCBoaW0gZWFybHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9ybmluZyBhcyBoZSBoYXN0ZW5lZCBmb3J0aCB0byBleGVjdXRlIHlvdXIgY29tbWFuZHMuIEFuZCBoZSwgaW4gdHJ1dGgsIHdoZW4KICAgICAgICAgICAgICAgICAgICBkZXBhcnRpbmcsIHNwb2tlIHdpdGggbWUgaW4gc3VjaCBhIG1hbm5lciB0aGF0IGhpcyBsYW5ndWFnZSBzZWVtZWQgbGlrZSBhbiBvbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGZhdGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2hlbiB0aGVyZSB3YXMgYWRkZWQgdGhlIGV4aG9ydGF0aW9uIG9mIFBhbnNhLCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWwsIGRlbGl2ZXJlZCB3aXRoIG1vcmUgd2VpZ2h0IHRoYW4gdGhlIGVhcnMgb2YgU2Vydml1cyBTdWxwaWNpdXMgaGFkCiAgICAgICAgICAgICAgICAgICAgbGVhcm5lZCB0byByZXNpc3QsIHRoZW4gYXQgbGFzdCBoZSBsZWQgbWUgYW5kIGhpcyBvd24gc29uIGFzaWRlLCBhbmQgc2FpZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGhvdW5kIHRvIHByZWZlciB5b3VyIGF1dGhvcml0eSB0byBoaXMgb3duIGxpZmUuIEFuZCB3ZSwgYWRtaXJpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgdmlydHVlLCBkaWQgbm90IGRhcmUgdG8gb3Bwb3NlIGhpcyBkZXRlcm1pbmF0aW9uLiBIaXMgc29uIHdhcyBtb3ZlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBwaWV0eSBhbmQgYWZmZWN0aW9uLCBhbmQgbXkgb3duIGdyaWVmIGRpZCBub3QgZmFsbCBmYXIgc2hvcnQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgYWdpdGF0aW9uOyBidXQgZWFjaCBvZiB1cyB3YXMgY29tcGVsbGVkIHRvIHlpZWxkIHRvIGhpcyBncmVhdG5lc3Mgb2YgbWluZCwKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gdGhlIGRpZ25pdHkgb2YgaGlzIGxhbmd1YWdlLCB3aGVuIGhlLCBpbmRlZWQsIGFtaWQgdGhlIGxvdWQgcHJhaXNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBjb25ncmF0dWxhdGlvbnMgb2YgeW91IGFsbCwgcHJvbWlzZWQgdG8gZG8gd2hhdGV2ZXIgeW91IHdpc2hlZCwgYW5kIG5vdCB0byBhdm9pZAogICAgICAgICAgICAgICAgICAgIHRoZSBkYW5nZXIgd2hpY2ggbWlnaHQgYmUgaW5jdXJyZWQgYnkgdGhlIGFkb3B0aW9uIG9mIHRoZSBvcGluaW9uIG9mIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBoYWQgYmVlbiB0aGUgYXV0aG9yLiBBbmQgd2UgdGhlIG5leHQgZGF5IGVzY29ydGVkIGhpbSBlYXJseSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtb3JuaW5nIGFzIGhlIGhhc3RlbmVkIGZvcnRoIHRvIGV4ZWN1dGUgeW91ciBjb21tYW5kcy4gQW5kIGhlLCBpbiB0cnV0aCwgd2hlbgogICAgICAgICAgICAgICAgICAgIGRlcGFydGluZywgc3Bva2Ugd2l0aCBtZSBpbiBzdWNoIGEgbWFubmVyIHRoYXQgaGlzIGxhbmd1YWdlIHNlZW1lZCBsaWtlIGFuIG9tZW4KICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZmF0ZS4gPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['9.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlJlc3RvcmUgdGhlbiwgTyBjb25zY3JpcHQgZmF0aGVycywgbGlmZSB0byBoaW0gZnJvbSB3aG9tIHlvdSBoYXZlIHRha2VuIGl0LiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGUgbGlmZSBvZiB0aGUgZGVhZCBjb25zaXN0cyBpbiB0aGUgcmVjb2xsZWN0aW9uIGNoZXJpc2hlZCBvZiB0aGVtIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGxpdmluZy4gVGFrZSBjYXJlIHRoYXQgaGUsIHdob20geW91IHdpdGhvdXQsIGludGVuZGluZyBpdCBzZW50IHRvIGhpcyBkZWF0aCwKICAgICAgICAgICAgICAgICAgICBzaGFsbCBmcm9tIHlvdSByZWNlaXZlIGltbW9ydGFsaXR5LiBBbmQgaWYgeW91IGJ5IHlvdXIgZGVjcmVlIGVyZWN0IGEgc3RhdHVlIHRvCiAgICAgICAgICAgICAgICAgICAgaGltIGluIHRoZSByb3N0cmEsIG5vIGZvcmdldGZ1bG5lc3Mgb2YgcG9zdGVyaXR5IHdpbGwgZXZlciBvYnNjdXJlIHRoZSBtZW1vcnkgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZW1iYXNzeS4gRm9yIHRoZSByZW1haW5kZXIgb2YgdGhlIGxpZmUgb2YgU2Vydml1cyBTdWxwaWNpdXMgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGVkIHRvIHRoZSBldGVybmFsIHJlY29sbGVjdGlvbiBvZiBhbGwgbWVuIGJ5IG1hbnkgYW5kIHNwbGVuZGlkCiAgICAgICAgICAgICAgICAgICAgbWVtb3JpYWxzLiBUaGUgcHJhaXNlIG9mIGFsbCBtb3J0YWxzIHdpbGwgZm9yZXZlciBjZWxlYnJhdGUgaGlzIHdpc2RvbSwgaGlzCiAgICAgICAgICAgICAgICAgICAgZmlybW5lc3MsIGhpcyBsb3lhbHR5LCBoaXMgYWRtaXJhYmxlIHZpZ2lsYW5jZSBhbmQgcHJ1ZGVuY2UgaW4gdXBob2xkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cyBvZiB0aGUgcHVibGljLiBOb3Igd2lsbCB0aGF0IGFkbWlyYWJsZSwgYW5kIGluY3JlZGlibGUsIGFuZCBhbG1vc3QKICAgICAgICAgICAgICAgICAgICBnb2RsaWtlIHNraWxsIG9mIGhpcyBpbiBpbnRlcnByZXRpbmcgdGhlIGxhd3MgYW5kIGV4cGxhaW5pbmcgdGhlIHByaW5jaXBsZXMgb2YKICAgICAgICAgICAgICAgICAgICBlcXVpdHkgYmUgYnVyaWVkIGluIHNpbGVuY2UuIElmIGFsbCB0aGUgbWVuIG9mIGFsbCBhZ2VzLCB3aG8gaGF2ZSBldmVyIGhhZCBhbnkKICAgICAgICAgICAgICAgICAgICBhY3F1YWludGFuY2Ugd2l0aCB0aGUgbGF3IGluIHRoaXMgY2l0eSwgd2VyZSBnb3QgdG9nZXRoZXIgaW50byBvbmUgcGxhY2UsIHRoZXkKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgZGVzZXJ2ZSB0byBiZSBjb21wYXJlZCB0byBTZXJ2aXVzIFN1bHBpY2l1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBOb3Igd2FzIGhlIG1vcmUgc2tpbGxmdWwgaW4gZXhwbGFpbmluZyB0aGUgbGF3IHRoYW4gaW4KICAgICAgICAgICAgICAgICAgICBsYXlpbmcgZG93biB0aGUgcHJpbmNpcGxlcyBvZiBqdXN0aWNlLiBUaG9zZSBtYXhpbXMgd2hpY2ggd2VyZSBkZXJpdmVkIGZyb20KICAgICAgICAgICAgICAgICAgICBsYXdzLCBhbmQgZnJvbSB0aGUgY29tbW9uIGxhdywgaGUgY29uc3RhbnRseSByZWZlcnJlZCB0byB0aGUgb3JpZ2luYWwgcHJpbmNpcGxlcwogICAgICAgICAgICAgICAgICAgIG9mIGtpbmRuZXNzIGFuZCBlcXVpdHkuIE5vciB3YXMgaGUgbW9yZSBmb25kIG9mIGFycmFuZ2luZyB0aGUgY29uZHVjdCBvZgogICAgICAgICAgICAgICAgICAgIGxhd3N1aXRzIHRoYW4gb2YgcHJldmVudGluZyBkaXNwdXRlcyBhbHRvZ2V0aGVyLiBUaGVyZWZvcmUgaGUgaXMgbm90IGluIHdhbnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIG1lbW9yaWFsIHdoaWNoIGEgc3RhdHVlIHdpbGwgcHJvdmlkZTsgaGUgaGFzIG90aGVyIGFuZCBiZXR0ZXIgb25lcy4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzdGF0dWUgd2lsbCBiZSBvbmx5IGEgd2l0bmVzcyBvZiBoaXMgaG9ub3JhYmxlIGRlYXRoOyB0aG9zZSBhY3Rpb25zIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICB0aGUgbWVtb3JpYWwgb2YgaGlzIGdsb3Jpb3VzIGxpZmUuIFNvIHRoYXQgdGhpcyB3aWxsIGJlIHJhdGhlciBhIG1vbnVtZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdyYXRpdHVkZSBvZiB0aGUgc2VuYXRlLCB0aGFuIG9mIHRoZSBnbG9yeSBvZiB0aGUgbWFuLiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIHdhcyBoZSBtb3JlIHNraWxsZnVsIGluIGV4cGxhaW5pbmcgdGhlIGxhdyB0aGFuIGluCiAgICAgICAgICAgICAgICAgICAgbGF5aW5nIGRvd24gdGhlIHByaW5jaXBsZXMgb2YganVzdGljZS4gVGhvc2UgbWF4aW1zIHdoaWNoIHdlcmUgZGVyaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgbGF3cywgYW5kIGZyb20gdGhlIGNvbW1vbiBsYXcsIGhlIGNvbnN0YW50bHkgcmVmZXJyZWQgdG8gdGhlIG9yaWdpbmFsIHByaW5jaXBsZXMKICAgICAgICAgICAgICAgICAgICBvZiBraW5kbmVzcyBhbmQgZXF1aXR5LiBOb3Igd2FzIGhlIG1vcmUgZm9uZCBvZiBhcnJhbmdpbmcgdGhlIGNvbmR1Y3Qgb2YKICAgICAgICAgICAgICAgICAgICBsYXdzdWl0cyB0aGFuIG9mIHByZXZlbnRpbmcgZGlzcHV0ZXMgYWx0b2dldGhlci4gVGhlcmVmb3JlIGhlIGlzIG5vdCBpbiB3YW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtZW1vcmlhbCB3aGljaCBhIHN0YXR1ZSB3aWxsIHByb3ZpZGU7IGhlIGhhcyBvdGhlciBhbmQgYmV0dGVyIG9uZXMuIEZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgc3RhdHVlIHdpbGwgYmUgb25seSBhIHdpdG5lc3Mgb2YgaGlzIGhvbm9yYWJsZSBkZWF0aDsgdGhvc2UgYWN0aW9ucyB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbW9yaWFsIG9mIGhpcyBnbG9yaW91cyBsaWZlLiBTbyB0aGF0IHRoaXMgd2lsbCBiZSByYXRoZXIgYSBtb251bWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBncmF0aXR1ZGUgb2YgdGhlIHNlbmF0ZSwgdGhhbiBvZiB0aGUgZ2xvcnkgb2YgdGhlIG1hbi4gPC90cmFuc2xhdGlvbj4="
translation['9.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGFmZmVjdGlvbiBvZiB0aGUgc29uLCB0b28sIHdpbGwgYXBwZWFyIHRvIGhhdmUgZ3JlYXQgaW5mbHVlbmNlIGluIG1vdmluZyB1cwogICAgICAgICAgICAgICAgICAgIHRvIGhvbm9yIHRoZSBmYXRoZXI7IGZvciBhbHRob3VnaCwgYmVpbmcgb3ZlcndoZWxtZWQgd2l0aCBncmllZiwgaGUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCwgc3RpbGwgeW91IG91Z2h0IHRvIGJlIGFuaW1hdGVkIHdpdGggdGhlIHNhbWUgZmVlbGluZ3MgYXMgaWYgaGUgd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQuIEJ1dCBoZSBpcyBpbiBzdWNoIGRpc3RyZXNzLCB0aGF0IG5vIGZhdGhlciBldmVyIHNvcnJvd2VkIG1vcmUgb3ZlciB0aGUKICAgICAgICAgICAgICAgICAgICBsb3NzIG9mIGFuIG9ubHkgc29uIHRoYW4gaGUgZ3JpZXZlcyBmb3IgdGhlIGRlYXRoIG9mIGhpcyBmYXRoZXIuIEluZGVlZCwgSSB0aGluawogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgY29uY2VybnMgYWxzbyB0aGUgZmFtZSBvZiBTZXJ2aXVzIFN1bHBpY2l1cyB0aGUgc29uLCB0aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBoYXZlIHBhaWQgYWxsIGR1ZSByZXNwZWN0IHRvIGhpcyBmYXRoZXIuIEFsdGhvdWdoIFNlcnZpdXMgU3VscGljaXVzCiAgICAgICAgICAgICAgICAgICAgY291bGQgbGVhdmUgbm8gbm9ibGVyIG1vbnVtZW50IGJlaGluZCBoaW0gdGhhbiBoaXMgc29uLCB0aGUgaW1hZ2Ugb2YgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIG1hbm5lcnMsIGFuZCB2aXJ0dWVzLCBhbmQgd2lzZG9tLCBhbmQgcGlldHksIGFuZCBnZW5pdXM7IHdob3NlIGdyaWVmIGNhbiBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBiZSBhbGxldmlhdGVkIGJ5IHRoaXMgaG9ub3IgcGFpZCB0byBoaXMgZmF0aGVyIGJ5IHlvdSwgb3IgYnkgbm8gY29uc29sYXRpb24gYXQKICAgICAgICAgICAgICAgICAgICBhbGwuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['9.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIEkgcmVjb2xsZWN0IHRoZSBtYW55IGNvbnZlcnNhdGlvbnMgd2hpY2ggaW4gdGhlIGRheXMgb2Ygb3VyIGludGltYWN5IG9uCiAgICAgICAgICAgICAgICAgICAgZWFydGggSSBoYXZlIGhhZCB3aXRoIFNlcnZpdXMgU3VscGljaXVzLCBpdCBhcHBlYXJzIHRvIG1lLCB0aGF0IGlmIHRoZXJlIGJlIGFueQogICAgICAgICAgICAgICAgICAgIGZlZWxpbmcgaW4gdGhlIGRlYWQsIGEgYnJhemVuIHN0YXR1ZSwgYW5kIHRoYXQgdG9vIGEgcGVkZXN0cmlhbiBvbmUsIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBtb3JlIGFjY2VwdGFibGUgdG8gaGltIHRoYW4gYSBnaWx0IGVxdWVzdHJpYW4gb25lLCBzdWNoIGFzIHdhcyBmaXJzdCBlcmVjdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFN1bGxhLiBGb3IgU2Vydml1cyB3YXMgd29uZGVyZnVsbHkgYXR0YWNoZWQgdG8gdGhlIG1vZGVyYXRpb24gb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZm9yZWZhdGhlcnMsIGFuZCB3YXMgYWNjdXN0b21lZCB0byByZXByb3ZlIHRoZSBpbnNvbGVuY2Ugb2YgdGhpcyBhZ2UuIEFzIGlmLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgSSB3ZXJlIGFibGUgdG8gY29uc3VsdCBoaW1zZWxmIGFzIHRvIHdoYXQgaGUgd291bGQgd2lzaCwgc28gSSBnaXZlIG15CiAgICAgICAgICAgICAgICAgICAgdm90ZSBmb3IgYSBwZWRlc3RyaWFuIHN0YXR1ZSBvZiBicmFzcywgYXMgaWYgSSB3ZXJlIHNwZWFraW5nIGJ5IGhpcyBhdXRob3JpdHkKICAgICAgICAgICAgICAgICAgICBhbmQgaW5jbGluYXRpb247IHdoaWNoIGJ5IHRoZSBob25vciBvZiB0aGUgbWVtb3JpYWwgd2lsbCBkaW1pbmlzaCBhbmQgbWl0aWdhdGUKICAgICAgICAgICAgICAgICAgICB0aGUgZ3JlYXQgZ3JpZWYgYW5kIHJlZ3JldCBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBpdCBpcyBjZXJ0YWluIHRoYXQgdGhpcyBteSBvcGluaW9uLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIHdpbGwgYmUgYXBwcm92ZWQgb2YgYnkgdGhlIG9waW5pb24gb2YgUHVibGl1cyBTZXJ2aWxpdXMsIHdobyBoYXMgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBoaXMgdm90ZSB0aGF0IGEgc2VwdWxjaGVyIGJlIHB1YmxpY2x5IGRlY3JlZWQgdG8gU2Vydml1cyBTdWxwaWNpdXMsIGJ1dCBoYXMKICAgICAgICAgICAgICAgICAgICB2b3RlZCBhZ2FpbnN0IHRoZSBzdGF0dWUuIEZvciBpZiB0aGUgZGVhdGggb2YgYW4gYW1iYXNzYWRvciBoYXBwZW5pbmcgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGJsb29kc2hlZCBhbmQgdmlvbGVuY2UgcmVxdWlyZXMgbm8gaG9ub3IsIHdoeSBkb2VzIGhlIHZvdGUgZm9yIHRoZSBob25vciBvZiBhCiAgICAgICAgICAgICAgICAgICAgcHVibGljIGZ1bmVyYWwsIHdoaWNoIGlzIHRoZSBncmVhdGVzdCBob25vciB0aGF0IGNhbiBiZSBwYWlkIHRvIGEgZGVhZCBtYW4/IElmCiAgICAgICAgICAgICAgICAgICAgaGUgZ3JhbnRzIHRoYXQgdG8gU2Vydml1cyBTdWxwaWNpdXMgd2hpY2ggd2FzIG5vdCBnaXZlbiB0byBHbmFldXMuIE9jdGF2aXVzLCB3aHkKICAgICAgICAgICAgICAgICAgICBkb2VzIGhlIHRoaW5rIHRoYXQgd2Ugb3VnaHQgbm90IHRvIGdpdmUgdG8gdGhlIGZvcm1lciB3aGF0IHdhcyBnaXZlbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXI/IE91ciBhbmNlc3RvcnMsIGluZGVlZCwgZGVjcmVlZCBzdGF0dWVzIHRvIG1hbnkgbWVuOyBwdWJsaWMgc2VwdWxjaGVycyB0bwogICAgICAgICAgICAgICAgICAgIGZldy4gQnV0IHN0YXR1ZXMgcGVyaXNoIGJ5IHdlYXRoZXIsIGJ5IHZpb2xlbmNlLCBieSBsYXBzZSBvZiB0aW1lOyBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FuY3RpdHkgb2YgdGhlIHNlcHVsY2hlcnMgaXMgaW4gdGhlIHNvaWwgaXRzZWxmLCB3aGljaCBjYW4gbmVpdGhlciBiZSBtb3ZlZCBub3IKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgYnkgYW55IHZpb2xlbmNlOyBhbmQgd2hpbGUgb3RoZXIgdGhpbmdzIGFyZSBleHRpbmd1aXNoZWQsIHNvCiAgICAgICAgICAgICAgICAgICAgc2VwdWxjaGVycyBiZWNvbWUgaG9saWVyIGJ5IGFnZS4gPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGl0IGlzIGNlcnRhaW4gdGhhdCB0aGlzIG15IG9waW5pb24sIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgd2lsbCBiZSBhcHByb3ZlZCBvZiBieSB0aGUgb3BpbmlvbiBvZiBQdWJsaXVzIFNlcnZpbGl1cywgd2hvIGhhcyBnaXZlbgogICAgICAgICAgICAgICAgICAgIGhpcyB2b3RlIHRoYXQgYSBzZXB1bGNoZXIgYmUgcHVibGljbHkgZGVjcmVlZCB0byBTZXJ2aXVzIFN1bHBpY2l1cywgYnV0IGhhcwogICAgICAgICAgICAgICAgICAgIHZvdGVkIGFnYWluc3QgdGhlIHN0YXR1ZS4gRm9yIGlmIHRoZSBkZWF0aCBvZiBhbiBhbWJhc3NhZG9yIGhhcHBlbmluZyB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgYmxvb2RzaGVkIGFuZCB2aW9sZW5jZSByZXF1aXJlcyBubyBob25vciwgd2h5IGRvZXMgaGUgdm90ZSBmb3IgdGhlIGhvbm9yIG9mIGEKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgZnVuZXJhbCwgd2hpY2ggaXMgdGhlIGdyZWF0ZXN0IGhvbm9yIHRoYXQgY2FuIGJlIHBhaWQgdG8gYSBkZWFkIG1hbj8gSWYKICAgICAgICAgICAgICAgICAgICBoZSBncmFudHMgdGhhdCB0byBTZXJ2aXVzIFN1bHBpY2l1cyB3aGljaCB3YXMgbm90IGdpdmVuIHRvIEduYWV1cy4gT2N0YXZpdXMsIHdoeQogICAgICAgICAgICAgICAgICAgIGRvZXMgaGUgdGhpbmsgdGhhdCB3ZSBvdWdodCBub3QgdG8gZ2l2ZSB0byB0aGUgZm9ybWVyIHdoYXQgd2FzIGdpdmVuIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlcj8gT3VyIGFuY2VzdG9ycywgaW5kZWVkLCBkZWNyZWVkIHN0YXR1ZXMgdG8gbWFueSBtZW47IHB1YmxpYyBzZXB1bGNoZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgZmV3LiBCdXQgc3RhdHVlcyBwZXJpc2ggYnkgd2VhdGhlciwgYnkgdmlvbGVuY2UsIGJ5IGxhcHNlIG9mIHRpbWU7IGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW5jdGl0eSBvZiB0aGUgc2VwdWxjaGVycyBpcyBpbiB0aGUgc29pbCBpdHNlbGYsIHdoaWNoIGNhbiBuZWl0aGVyIGJlIG1vdmVkIG5vcgogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llZCBieSBhbnkgdmlvbGVuY2U7IGFuZCB3aGlsZSBvdGhlciB0aGluZ3MgYXJlIGV4dGluZ3Vpc2hlZCwgc28KICAgICAgICAgICAgICAgICAgICBzZXB1bGNoZXJzIGJlY29tZSBob2xpZXIgYnkgYWdlLiA8L3RyYW5zbGF0aW9uPg=="
translation['9.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0LCB0aGVuLCB0aGF0IG1hbiBiZSBkaXN0aW5ndWlzaGVkIGJ5IHRoYXQgaG9ub3IgYWxzbywgYSBtYW4gdG8gd2hvbSBubyBob25vcgogICAgICAgICAgICAgICAgICAgIGNhbiBiZSBnaXZlbiB3aGljaCBpcyBub3QgZGVzZXJ2ZWQuIExldCB1cyBiZSBncmF0ZWZ1bCBpbiBwYXlpbmcgcmVzcGVjdCBpbgogICAgICAgICAgICAgICAgICAgIGRlYXRoIHRvIGhpbSB0byB3aG9tIHdlIGNhbiBub3cgc2hvdyBubyBvdGhlciBncmF0aXR1ZGUuIEFuZCBieSB0aGF0IHNhbWUgc3RlcAogICAgICAgICAgICAgICAgICAgIGxldCB0aGUgYXVkYWNpdHkgb2YgTWFyY3VzIEFudG9uaXVzLCB3YWdpbmcgYSBuZWZhcmlvdXMgd2FyLCBiZSBicmFuZGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmZhbXkuIEZvciB3aGVuIHRoZXNlIGhvbm9ycyBoYXZlIGJlZW4gcGFpZCB0byBTZXJ2aXVzIFN1bHBpY2l1cywgdGhlIGV2aWRlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGVtYmFzc3kgaGF2aW5nIGJlZW4gaW5zdWx0ZWQgYW5kIHJlamVjdGVkIGJ5IEFudG9uaXVzLCB3aWxsIHJlbWFpbiBmb3IKICAgICAgICAgICAgICAgICAgICBldmVybGFzdGluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gd2hpY2ggYWNjb3VudCBJIGdpdmUgbXkgdm90ZSBmb3IgYSBkZWNyZWUgaW4gdGhpcyBmb3JtOiDigJxBcyBTZXJ2aXVzCiAgICAgICAgICAgICAgICAgICAgU3VscGljaXVzIFJ1ZnVzLCB0aGUgc29uIG9mIFF1aW50dXMsIG9mIHRoZSBMZW1vbmlhbiB0cmliZSwgYXQgYSBtb3N0IGNyaXRpY2FsCiAgICAgICAgICAgICAgICAgICAgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgYW5kIGJlaW5nIGlsbCB3aXRoIGEgdmVyeSBzZXJpb3VzIGFuZCBkYW5nZXJvdXMgZGlzZWFzZSwKICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlIGFuZCB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYyB0byBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgbGlmZSwgYW5kIHN0cnVnZ2xlZCBhZ2FpbnN0IHRoZSB2aW9sZW5jZSBhbmQgc2V2ZXJpdHkgb2YgaGlzIGlsbG5lc3MsIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdG8gYXJyaXZlIGF0IHRoZSBjYW1wIG9mIEFudG9uaXVzLCB0byB3aGljaCB0aGUgc2VuYXRlIGhhZCBzZW50IGhpbTsgYW5kIGFzIGhlLAogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgaGFkIGFsbW9zdCBhcnJpdmVkIGF0IHRoZSBjYW1wLCBiZWluZyBvdmVyd2hlbG1lZCBieSB0aGUgdmlvbGVuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzZWFzZSwgaGFzIGxvc3QgaGlzIGxpZmUgaW4gZGlzY2hhcmdpbmcgYSBtb3N0IGltcG9ydGFudCBvZmZpY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWM7IGFuZCBhcyBoaXMgZGVhdGggaGFzIGJlZW4gaW4gc3RyaWN0IGNvcnJlc3BvbmRlbmNlIHRvIGEgbGlmZSBwYXNzZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBncmVhdGVzdCBpbnRlZ3JpdHkgYW5kIGhvbm9yLCBkdXJpbmcgd2hpY2ggaGUsIFNlcnZpdXMgU3VscGljaXVzLCBoYXMKICAgICAgICAgICAgICAgICAgICBvZnRlbiBiZWVuIG9mIGdyZWF0IHNlcnZpY2UgdG8gdGhlIHJlcHVibGljLCBib3RoIGFzIGEgcHJpdmF0ZSBpbmRpdmlkdWFsIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBkaXNjaGFyZ2Ugb2YgdmFyaW91cyBtYWdpc3RyYWNpZXM7IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIGFzCiAgICAgICAgICAgICAgICAgICAgaGUsIGJlaW5nIHN1Y2ggYSBtYW4sIGhhcyBlbmNvdW50ZXJlZCBkZWF0aCBvbiBiZWhhbGYgb2YgdGhlIHJlcHVibGljIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgZW1wbG95ZWQgb24gYW4gZW1iYXNzeTvigJR0aGUgc2VuYXRlIGRlY3JlZXMgdGhhdCBhIGJyYXplbiBwZWRlc3RyaWFuCiAgICAgICAgICAgICAgICAgICAgc3RhdHVlIG9mIFNlcnZpdXMgU3VscGljaXVzIGJlIGVyZWN0ZWQgaW4gdGhlIHJvc3RyYSBpbiBjb21wbGlhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBvZiB0aGlzIG9yZGVyLCBhbmQgdGhhdCBoaXMgY2hpbGRyZW4gYW5kIHBvc3Rlcml0eSBzaGFsbCBoYXZlIGEgcGxhY2UKICAgICAgICAgICAgICAgICAgICByb3VuZCB0aGlzIHN0YXR1ZSBvZiBmaXZlIGZlZXQgaW4gZXZlcnkgZGlyZWN0aW9uLCBmcm9tIHdoaWNoIHRvIGJlaG9sZCB0aGUKICAgICAgICAgICAgICAgICAgICBnYW1lcyBhbmQgZ2xhZGlhdG9yaWFsIGNvbWJhdHMsIGJlY2F1c2UgaGUgZGllZCBpbiB0aGUgY2F1c2Ugb2YgdGhlIHJlcHVibGljOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoaXMgcmVhc29uIGJlIGluc2NyaWJlZCBvbiB0aGUgcGVkZXN0YWwgb2YgdGhlIHN0YXR1ZTsgYW5kIHRoYXQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cyB0aGUgY29uc3Vscywgb25lIG9yIGJvdGggb2YgdGhlbSwgaWYgaXQgc2VlbSBnb29kIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgc2hhbGwgY29tbWFuZCB0aGUgcXVhZXN0b3JzIG9mIHRoZSBjaXR5IHRvIGxldCBvdXQgYSBjb250cmFjdCBmb3IgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwZWRlc3RhbCBhbmQgdGhhdCBzdGF0dWUsIGFuZCBlcmVjdGluZyB0aGVtIGluIHRoZSByb3N0cmE7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcHJpY2UgdGhleSBjb250cmFjdCBmb3IsIHRoZXkgc2hhbGwgdGFrZSBjYXJlIHRoZSBhbW91bnQgaXMgZ2l2ZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgcGFpZCB0byB0aGUgY29udHJhY3RvcjsgYW5kIGFzIGluIG9sZCB0aW1lcyB0aGUgc2VuYXRlIGhhcyBleGVydGVkIGl0cyBhdXRob3JpdHkKICAgICAgICAgICAgICAgICAgICB3aXRoIHJlc3BlY3QgdG8gdGhlIG9ic2VxdWllcyBvZiwgYW5kIGhvbm9ycyBwYWlkIHRvIGJyYXZlIG1lbiwgaXQgbm93IGRlY3JlZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHNoYWxsIGJlIGNhcnJpZWQgdG8gdGhlIHRvbWIgb24gdGhlIGRheSBvZiBoaXMgZnVuZXJhbCB3aXRoIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHNvbGVtbml0eS4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFzIFNlcnZpdXMgU3VscGljaXVzCiAgICAgICAgICAgICAgICAgICAgUnVmdXMsIHRoZSBzb24gb2YgUXVpbnR1cyBvZiB0aGUgTGVtb25pYW4gdHJpYmUsIGhhcyBkZXNlcnZlZCBzbyB3ZWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIGFzIHRvIGJlIGVudGl0bGVkIHRvIGJlIGNvbXBsaW1lbnRlZCB3aXRoIGFsbCB0aG9zZSBkaXN0aW5jdGlvbnM7IHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSBpcyBvZiBvcGluaW9uLCBhbmQgdGhpbmtzIGl0IGZvciB0aGUgYWR2YW50YWdlIG9mIHRoZSByZXB1YmxpYywgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWxlIGFlZGlsZSBzaG91bGQgc3VzcGVuZCB0aGUgZWRpY3Qgd2hpY2ggdXN1YWxseSBwcmV2YWlscyB3aXRoIHJlc3BlY3QgdG8KICAgICAgICAgICAgICAgICAgICBmdW5lcmFscyBpbiB0aGUgY2FzZSBvZiB0aGUgZnVuZXJhbCBvZiBTZXJ2aXVzIFN1bHBpY2l1cyBSdWZ1cywgdGhlIHNvbiBvZgogICAgICAgICAgICAgICAgICAgIFF1aW50dXMgb2YgdGhlIExlbW9uaWFuIHRyaWJlOyBhbmQgdGhhdCBDYWl1cyBQYW5zYSwgdGhlIGNvbnN1bCwgc2hhbGwgYXNzaWduCiAgICAgICAgICAgICAgICAgICAgaGltIGEgcGxhY2UgZm9yIGEgdG9tYiBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMTI3OTQiIGtleT0idGduLDQwMTI3OTQiPkVzcXVpbGluZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIHBsYWluLCBvciBpbiB3aGF0ZXZlciBwbGFjZSBzaGFsbCBzZWVtIGdvb2QgdG8gaGltLCBleHRlbmRpbmcgdGhpcnR5IGZlZXQgaW4KICAgICAgICAgICAgICAgICAgICBldmVyeSBkaXJlY3Rpb24sIHdoZXJlIFNlcnZpdXMgU3VscGljaXVzIG1heSBiZSBidXJpZWQ7IGFuZCB0aGF0IHRoYXQgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBoaXMgdG9tYiwgYW5kIHRoYXQgb2YgaGlzIGNoaWxkcmVuIGFuZCBwb3N0ZXJpdHksIGFzIGhhdmluZyBiZWVuIGEgdG9tYiBtb3N0CiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSBnaXZlbiB0byB0aGVtIGJ5IHRoZSBwdWJsaWMgYXV0aG9yaXR5LuKAnTwvcD4KCQkJPC90cmFuc2xhdGlvbj4="
translation['9.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIGFzCiAgICAgICAgICAgICAgICAgICAgaGUsIGJlaW5nIHN1Y2ggYSBtYW4sIGhhcyBlbmNvdW50ZXJlZCBkZWF0aCBvbiBiZWhhbGYgb2YgdGhlIHJlcHVibGljIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgZW1wbG95ZWQgb24gYW4gZW1iYXNzeTvigJR0aGUgc2VuYXRlIGRlY3JlZXMgdGhhdCBhIGJyYXplbiBwZWRlc3RyaWFuCiAgICAgICAgICAgICAgICAgICAgc3RhdHVlIG9mIFNlcnZpdXMgU3VscGljaXVzIGJlIGVyZWN0ZWQgaW4gdGhlIHJvc3RyYSBpbiBjb21wbGlhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBvZiB0aGlzIG9yZGVyLCBhbmQgdGhhdCBoaXMgY2hpbGRyZW4gYW5kIHBvc3Rlcml0eSBzaGFsbCBoYXZlIGEgcGxhY2UKICAgICAgICAgICAgICAgICAgICByb3VuZCB0aGlzIHN0YXR1ZSBvZiBmaXZlIGZlZXQgaW4gZXZlcnkgZGlyZWN0aW9uLCBmcm9tIHdoaWNoIHRvIGJlaG9sZCB0aGUKICAgICAgICAgICAgICAgICAgICBnYW1lcyBhbmQgZ2xhZGlhdG9yaWFsIGNvbWJhdHMsIGJlY2F1c2UgaGUgZGllZCBpbiB0aGUgY2F1c2Ugb2YgdGhlIHJlcHVibGljOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoaXMgcmVhc29uIGJlIGluc2NyaWJlZCBvbiB0aGUgcGVkZXN0YWwgb2YgdGhlIHN0YXR1ZTsgYW5kIHRoYXQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cyB0aGUgY29uc3Vscywgb25lIG9yIGJvdGggb2YgdGhlbSwgaWYgaXQgc2VlbSBnb29kIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgc2hhbGwgY29tbWFuZCB0aGUgcXVhZXN0b3JzIG9mIHRoZSBjaXR5IHRvIGxldCBvdXQgYSBjb250cmFjdCBmb3IgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBwZWRlc3RhbCBhbmQgdGhhdCBzdGF0dWUsIGFuZCBlcmVjdGluZyB0aGVtIGluIHRoZSByb3N0cmE7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcHJpY2UgdGhleSBjb250cmFjdCBmb3IsIHRoZXkgc2hhbGwgdGFrZSBjYXJlIHRoZSBhbW91bnQgaXMgZ2l2ZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgcGFpZCB0byB0aGUgY29udHJhY3RvcjsgYW5kIGFzIGluIG9sZCB0aW1lcyB0aGUgc2VuYXRlIGhhcyBleGVydGVkIGl0cyBhdXRob3JpdHkKICAgICAgICAgICAgICAgICAgICB3aXRoIHJlc3BlY3QgdG8gdGhlIG9ic2VxdWllcyBvZiwgYW5kIGhvbm9ycyBwYWlkIHRvIGJyYXZlIG1lbiwgaXQgbm93IGRlY3JlZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHNoYWxsIGJlIGNhcnJpZWQgdG8gdGhlIHRvbWIgb24gdGhlIGRheSBvZiBoaXMgZnVuZXJhbCB3aXRoIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHNvbGVtbml0eS4gPC90cmFuc2xhdGlvbj4="
translation['9.7.17'] = ""
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBhbGwsIE8gUGFuc2EsIG91Z2h0IGJvdGggdG8gZmVlbCBhbmQgdG8gc2hvdyB0aGUgZ3JlYXRlc3QgZ3JhdGl0dWRlIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICB3aG8s4oCUdGhvdWdoIHdlIGRpZCBub3QgZXhwZWN0IHRoYXQgeW91IHdvdWxkIGhvbGQgYW55IHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIHRvZGF5LOKAlHRoZSBtb21lbnQgdGhhdCB5b3UgcmVjZWl2ZWQgdGhlIGxldHRlcnMgb2YgTWFyY3VzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMjAwNzI0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIyMDA3MjQiPkJydXR1czwvcGxhY2VOYW1lPiwgdGhhdCBtb3N0IGV4Y2VsbGVudCBjaXRpemVuLCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb3NlIGV2ZW4gdGhlIHNsaWdodGVzdCBkZWxheSB0byBvdXIgZW5qb3lpbmcgdGhlIG1vc3QgZXhjZXNzaXZlIGRlbGlnaHQKICAgICAgICAgICAgICAgICAgICBhbmQgbXV0dWFsIGNvbmdyYXR1bGF0aW9uIGF0IHRoZSBlYXJsaWVzdCBvcHBvcnR1bml0eS4gQW5kIG5vdCBvbmx5IG91Z2h0IHRoaXMKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gb2YgeW91cnMgdG8gYmUgZ3JhdGVmdWwgdG8gdXMgYWxsLCBidXQgYWxzbyB0aGUgc3BlZWNoIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGFkZHJlc3NlZCB0byB1cyBhZnRlciB0aGUgbGV0dGVycyBoYWQgYmVlbiByZWFkLiBGb3IgeW91IHNob3dlZCBwbGFpbmx5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB3YXMgdHJ1ZSB3aGljaCBJIGhhdmUgYWx3YXlzIGZlbHQgdG8gYmUgc28sIHRoYXQgbm8gb25lIGVudmllZCB0aGUgdmlydHVlCiAgICAgICAgICAgICAgICAgICAgb2YgYW5vdGhlciB3aG8gd2FzIGNvbmZpZGVudCBvZiBoaXMgb3duLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUgSSwgd2hvIGhhdmUgYmVlbiBjb25uZWN0ZWQgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjIwMDcyNCIga2V5PSJ0Z24sMjIwMDcyNCI+QnJ1dHVzPC9wbGFjZU5hbWU+IGJ5IG1hbnkgbXV0dWFsIGdvb2Qgb2ZmaWNlcyBhbmQgYnkgdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgaW50aW1hY3ksIG5lZWQgbm90IHNheSBzbyBtdWNoIGNvbmNlcm5pbmcgaGltOyBmb3IgdGhlIHBhcnQgdGhhdCBJIGhhZCBtYXJrZWQKICAgICAgICAgICAgICAgICAgICBvdXQgZm9yIG15c2VsZiB5b3VyIHNwZWVjaCBoYXMgYW50aWNpcGF0ZWQgbWUgaW4uIEJ1dCwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBkZWxpdmVyZWQgYnkgdGhlIG1hbiB3aG8gd2FzIGFza2VkIGZvciBoaXMgdm90ZSBiZWZvcmUgbWUsIGhhcyBpbXBvc2VkCiAgICAgICAgICAgICAgICAgICAgdXBvbiBtZSB0aGUgbmVjZXNzaXR5IG9mIHNheWluZyByYXRoZXIgbW9yZSB0aGFuIEkgb3RoZXJ3aXNlIHNob3VsZCBoYXZlIHNhaWQ7CiAgICAgICAgICAgICAgICAgICAgYW5kIEkgZGlmZmVyIGZyb20gaGltIHNvIHJlcGVhdGVkbHkgYXQgcHJlc2VudCwgdGhhdCBJIGFtIGFmcmFpZCAod2hhdCBjZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBvdWdodCBub3QgdG8gYmUgdGhlIGNhc2UpIHRoYXQgb3VyIGNvbnRpbnVhbCBkaXNhZ3JlZW1lbnQgbWF5IGFwcGVhciB0byBkaW1pbmlzaAogICAgICAgICAgICAgICAgICAgIG91ciBmcmllbmRzaGlwLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjIwMDcyNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMjAwNzI0Ij5CcnV0dXM8L3BsYWNlTmFtZT4sIHRoYXQgbW9zdCBleGNlbGxlbnQgY2l0aXplbiwgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGludGVycG9zZSBldmVuIHRoZSBzbGlnaHRlc3QgZGVsYXkgdG8gb3VyIGVuam95aW5nIHRoZSBtb3N0IGV4Y2Vzc2l2ZSBkZWxpZ2h0CiAgICAgICAgICAgICAgICAgICAgYW5kIG11dHVhbCBjb25ncmF0dWxhdGlvbiBhdCB0aGUgZWFybGllc3Qgb3Bwb3J0dW5pdHkuIEFuZCBub3Qgb25seSBvdWdodCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIG9mIHlvdXJzIHRvIGJlIGdyYXRlZnVsIHRvIHVzIGFsbCwgYnV0IGFsc28gdGhlIHNwZWVjaCB3aGljaCB5b3UKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZWQgdG8gdXMgYWZ0ZXIgdGhlIGxldHRlcnMgaGFkIGJlZW4gcmVhZC4gRm9yIHlvdSBzaG93ZWQgcGxhaW5seSwgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FzIHRydWUgd2hpY2ggSSBoYXZlIGFsd2F5cyBmZWx0IHRvIGJlIHNvLCB0aGF0IG5vIG9uZSBlbnZpZWQgdGhlIHZpcnR1ZQogICAgICAgICAgICAgICAgICAgIG9mIGFub3RoZXIgd2hvIHdhcyBjb25maWRlbnQgb2YgaGlzIG93bi4gPC90cmFuc2xhdGlvbj4="
translation['10.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSBJLCB3aG8gaGF2ZSBiZWVuIGNvbm5lY3RlZCB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMjAwNzI0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIyMDA3MjQiPkJydXR1czwvcGxhY2VOYW1lPiBieSBtYW55IG11dHVhbCBnb29kIG9mZmljZXMgYW5kIGJ5IHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIGludGltYWN5LCBuZWVkIG5vdCBzYXkgc28gbXVjaCBjb25jZXJuaW5nIGhpbTsgZm9yIHRoZSBwYXJ0IHRoYXQgSSBoYWQgbWFya2VkCiAgICAgICAgICAgICAgICAgICAgb3V0IGZvciBteXNlbGYgeW91ciBzcGVlY2ggaGFzIGFudGljaXBhdGVkIG1lIGluLiBCdXQsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoZQogICAgICAgICAgICAgICAgICAgIG9waW5pb24gZGVsaXZlcmVkIGJ5IHRoZSBtYW4gd2hvIHdhcyBhc2tlZCBmb3IgaGlzIHZvdGUgYmVmb3JlIG1lLCBoYXMgaW1wb3NlZAogICAgICAgICAgICAgICAgICAgIHVwb24gbWUgdGhlIG5lY2Vzc2l0eSBvZiBzYXlpbmcgcmF0aGVyIG1vcmUgdGhhbiBJIG90aGVyd2lzZSBzaG91bGQgaGF2ZSBzYWlkOwogICAgICAgICAgICAgICAgICAgIGFuZCBJIGRpZmZlciBmcm9tIGhpbSBzbyByZXBlYXRlZGx5IGF0IHByZXNlbnQsIHRoYXQgSSBhbSBhZnJhaWQgKHdoYXQgY2VydGFpbmx5CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHRvIGJlIHRoZSBjYXNlKSB0aGF0IG91ciBjb250aW51YWwgZGlzYWdyZWVtZW50IG1heSBhcHBlYXIgdG8gZGltaW5pc2gKICAgICAgICAgICAgICAgICAgICBvdXIgZnJpZW5kc2hpcC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBjYW4gYmUgdGhlIG1lYW5pbmcgb2YgdGhpcyBhcmd1bWVudCBvZgogICAgICAgICAgICAgICAgICAgIHlvdXJzLCBPIENhbGVudXM/IHdoYXQgY2FuIGJlIHlvdXIgaW50ZW50aW9uPyBIb3cgaXMgaXQgdGhhdCB5b3UgaGF2ZSBuZXZlciBvbmNlCiAgICAgICAgICAgICAgICAgICAgc2luY2UgdGhlIGZpcnN0IG9mIEphbnVhcnkgYmVlbiBvZiB0aGUgc2FtZSBvcGluaW9uIHdpdGggaGltIHdobyBhc2tzIHlvdSB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBmaXJzdD8gSG93IGlzIGl0IHRoYXQgdGhlIHNlbmF0ZSBoYXMgbmV2ZXIgeWV0IGJlZW4gc28gZnVsbCBhcyB0byBlbmFibGUKICAgICAgICAgICAgICAgICAgICB5b3UgdG8gZmluZCBvbmUgc2luZ2xlIHBlcnNvbiB0byBhZ3JlZSB3aXRoIHlvdXIgc2VudGltZW50cz8gV2h5IGFyZSB5b3UgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kaW5nIG1lbiB3aG8gaW4gbm8gcG9pbnQgcmVzZW1ibGUgeW91PyB3aHksIHdoZW4gYm90aCB5b3VyIGxpZmUgYW5kIHlvdXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIGludml0ZSB5b3UgdG8gdHJhbnF1aWxsaXR5IGFuZCBkaWduaXR5LCBkbyB5b3UgYXBwcm92ZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzLCBhbmQgZGVmZW5kIHRob3NlIG1lYXN1cmVzLCBhbmQgZGVjbGFyZSB0aG9zZSBzZW50aW1lbnRzLCB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICBhZHZlcnNlIGJvdGggdG8gdGhlIGdlbmVyYWwgdHJhbnF1aWxsaXR5IGFuZCB0byB5b3VyIG93biBpbmRpdmlkdWFsIGRpZ25pdHk/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGNhbiBiZSB0aGUgbWVhbmluZyBvZiB0aGlzIGFyZ3VtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgeW91cnMsIE8gQ2FsZW51cz8gd2hhdCBjYW4gYmUgeW91ciBpbnRlbnRpb24/IEhvdyBpcyBpdCB0aGF0IHlvdSBoYXZlIG5ldmVyIG9uY2UKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgZmlyc3Qgb2YgSmFudWFyeSBiZWVuIG9mIHRoZSBzYW1lIG9waW5pb24gd2l0aCBoaW0gd2hvIGFza3MgeW91IHlvdXIKICAgICAgICAgICAgICAgICAgICBvcGluaW9uIGZpcnN0PyBIb3cgaXMgaXQgdGhhdCB0aGUgc2VuYXRlIGhhcyBuZXZlciB5ZXQgYmVlbiBzbyBmdWxsIGFzIHRvIGVuYWJsZQogICAgICAgICAgICAgICAgICAgIHlvdSB0byBmaW5kIG9uZSBzaW5nbGUgcGVyc29uIHRvIGFncmVlIHdpdGggeW91ciBzZW50aW1lbnRzPyBXaHkgYXJlIHlvdSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBkZWZlbmRpbmcgbWVuIHdobyBpbiBubyBwb2ludCByZXNlbWJsZSB5b3U/IHdoeSwgd2hlbiBib3RoIHlvdXIgbGlmZSBhbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUgaW52aXRlIHlvdSB0byB0cmFucXVpbGxpdHkgYW5kIGRpZ25pdHksIGRvIHlvdSBhcHByb3ZlIG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMsIGFuZCBkZWZlbmQgdGhvc2UgbWVhc3VyZXMsIGFuZCBkZWNsYXJlIHRob3NlIHNlbnRpbWVudHMsIHdoaWNoIGFyZQogICAgICAgICAgICAgICAgICAgIGFkdmVyc2UgYm90aCB0byB0aGUgZ2VuZXJhbCB0cmFucXVpbGxpdHkgYW5kIHRvIHlvdXIgb3duIGluZGl2aWR1YWwgZGlnbml0eT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['10.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHRvIHNheSBub3RoaW5nIG9mIGZvcm1lciBzcGVlY2hlcyBvZiB5b3VycywgYXQgYWxsIGV2ZW50cy4gSSBjYW4gbm90IHBhc3MKICAgICAgICAgICAgICAgICAgICBvdmVyIGluIHNpbGVuY2UgdGhpcyB3aGljaCBleGNpdGVzIG15IG1vc3QgZXNwZWNpYWwgd29uZGVyLiBXaGF0IHdhciBpcyB0aGVyZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4geW91IGFuZCB0aGUgQnJ1dGk/IFdoeSBkbyB5b3UgYWxvbmUgYXR0YWNrIHRob3NlIG1lbiB3aG9tIHdlIGFyZSBhbGwKICAgICAgICAgICAgICAgICAgICBib3VuZCBhbG1vc3QgdG8gd29yc2hpcD8gV2h5IGFyZSB5b3Ugbm90IGluZGlnbmFudCBhdCBvbmUgb2YgdGhlbSBiZWluZwogICAgICAgICAgICAgICAgICAgIGJlc2llZ2VkLCBhbmQgd2h5IGRvIHlvdeKAlGFzIGZhciBhcyB5b3VyIHZvdGUgZ29lc+KAlHN0cmlwIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIG9mIHRob3NlIHRyb29wcyB3aGljaCBieSBoaXMgb3duIGV4ZXJ0aW9ucyBhbmQgYnkgaGlzIG93biBkYW5nZXIgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgZ290IHRvZ2V0aGVyIGJ5IGhpbXNlbGYsIHdpdGhvdXQgYW55IG9uZSB0byBhc3Npc3QgaGltLCBmb3IgdGhlIHByb3RlY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMsIG5vdCBmb3IgaGltc2VsZj8gV2hhdCBpcyB5b3VyIG1lYW5pbmcgaW4gdGhpcz8gV2hhdCBhcmUgeW91cgogICAgICAgICAgICAgICAgICAgIGludGVudGlvbnM/IElzIGl0IHBvc3NpYmxlIHRoYXQgeW91IHNob3VsZCBub3QgYXBwcm92ZSBvZiB0aGUgQnJ1dGksIGFuZCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlIG9mIEFudG9uaXVzPyB0aGF0IHlvdSBzaG91bGQgaGF0ZSB0aG9zZSBtZW4gd2hvbSBldmVyeSBvbmUgZWxzZQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVycyBtb3N0IGRlYXI/IGFuZCB0aGF0IHlvdSBzaG91bGQgbG92ZSB3aXRoIHRoZSBncmVhdGVzdCBjb25zdGFuY3kgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG9tIGV2ZXJ5IG9uZSBlbHNlIGhhdGVzIG1vc3QgYml0dGVybHk/IFlvdSBoYXZlIGEgbW9zdCBhbXBsZSBmb3J0dW5lOyB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGhpZ2hlc3QgcmFuayBvZiBob25vcjsgeW91ciBzb24sIGFzIEkgYm90aCBoZWFyIGFuZCBob3BlLCBpcyBib3JuIHRvCiAgICAgICAgICAgICAgICAgICAgZ2xvcnks4oCUYSB5b3V0aCB3aG9tIEkgZmF2b3Igbm90IG9ubHkgZm9yIHRoZSBzYWtlIG9mIHRoZSByZXB1YmxpYywgYnV0CiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdXIgc2FrZSBhbHNvLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhc2ssIHRoZXJlZm9yZSwgd291bGQKICAgICAgICAgICAgICAgICAgICB5b3UgcmF0aGVyIGhhdmUgaGltIGxpa2UgQnJ1dHVzIG9yIGxpa2UgQW50b25pdXM/IGFuZCBJIHdpbGwgbGV0IHlvdSBjaG9vc2UKICAgICAgICAgICAgICAgICAgICB3aGljaGV2ZXIgb2YgdGhlIHRocmVlIEFudG9uaWkgeW91IHBsZWFzZS4gR29kIGZvcmJpZCEgeW91IHdpbGwgc2F5LiBXaHksIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgZG8geW91IG5vdCBmYXZvciB0aG9zZSBtZW4gYW5kIHByYWlzZSB0aG9zZSBtZW4gd2hvbSB5b3Ugd2lzaCB5b3VyIG93biBzb24gdG8KICAgICAgICAgICAgICAgICAgICByZXNlbWJsZT8gRm9yIGJ5IHNvIGRvaW5nIHlvdSB3aWxsIGJlIGJvdGggY29uc3VsdGluZyB0aGUgaW50ZXJlc3RzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLCBhbmQgcHJvcG9zaW5nIGhpbSBhbiBleGFtcGxlIGZvciBoaXMgaW1pdGF0aW9uLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBJIGFzaywgdGhlcmVmb3JlLCB3b3VsZAogICAgICAgICAgICAgICAgICAgIHlvdSByYXRoZXIgaGF2ZSBoaW0gbGlrZSBCcnV0dXMgb3IgbGlrZSBBbnRvbml1cz8gYW5kIEkgd2lsbCBsZXQgeW91IGNob29zZQogICAgICAgICAgICAgICAgICAgIHdoaWNoZXZlciBvZiB0aGUgdGhyZWUgQW50b25paSB5b3UgcGxlYXNlLiBHb2QgZm9yYmlkISB5b3Ugd2lsbCBzYXkuIFdoeSwgdGhlbiwKICAgICAgICAgICAgICAgICAgICBkbyB5b3Ugbm90IGZhdm9yIHRob3NlIG1lbiBhbmQgcHJhaXNlIHRob3NlIG1lbiB3aG9tIHlvdSB3aXNoIHlvdXIgb3duIHNvbiB0bwogICAgICAgICAgICAgICAgICAgIHJlc2VtYmxlPyBGb3IgYnkgc28gZG9pbmcgeW91IHdpbGwgYmUgYm90aCBjb25zdWx0aW5nIHRoZSBpbnRlcmVzdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIGFuZCBwcm9wb3NpbmcgaGltIGFuIGV4YW1wbGUgZm9yIGhpcyBpbWl0YXRpb24uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGluIHRoaXMgaW5zdGFuY2UsIEkgaG9wZSwgTyBRdWludHVzIEZ1Zml1cywgdG8gYmUgYWxsb3dlZCB0byBleHBvc3R1bGF0ZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgeW91LCBhcyBhIHNlbmF0b3Igd2hvIGdyZWF0bHkgZGlmZmVycyBmcm9tIHlvdSwgd2l0aG91dCBhbnkgcHJlanVkaWNlIHRvIG91cgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHNoaXAuIEZvciB5b3Ugc3Bva2UgaW4gdGhpcyBtYXR0ZXIsIGFuZCB0aGF0IHRvbyBmcm9tIGEgd3JpdHRlbiBwYXBlcjsgZm9yCiAgICAgICAgICAgICAgICAgICAgSSBzaG91bGQgdGhpbmsgeW91IGhhZCBtYWRlIGEgc2xpcCBmcm9tIHdhbnQgb2Ygc29tZSBhcHByb3ByaWF0ZSBleHByZXNzaW9uLCBpZgogICAgICAgICAgICAgICAgICAgIEkgd2VyZSBub3QgYWNxdWFpbnRlZCB3aXRoIHlvdXIgYWJpbGl0eSBpbiBzcGVha2luZy4gWW91IHNhaWQg4oCcdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBsZXR0ZXJzIG9mIEJydXR1cyBhcHBlYXJlZCBwcm9wZXJseSBhbmQgcmVndWxhcmx5IGV4cHJlc3NlZC7igJ0gV2hhdAogICAgICAgICAgICAgICAgICAgIGVsc2UgaXMgdGhpcyB0aGFuIHByYWlzaW5nIEJydXR1cydzIHNlY3JldGFyeSwgbm90IEJydXR1cz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IFlvdSBib3RoIG91Z2h0IHRvIGhhdmUgZ3JlYXQgZXhwZXJpZW5jZSBpbiB0aGUgYWZmYWlycyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYywgYW5kIHlvdSBoYXZlLiBXaGVuIGRpZCB5b3UgZXZlciBzZWUgYSBkZWNyZWUgZnJhbWVkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW5uZXI/IG9yIGluIHdoYXQgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlIHBhc3NlZCBvbiBzdWNoIG9jY2FzaW9ucy4gKGFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIGlubnVtZXJhYmxlKSwgZGlkIHlvdSBldmVyIGhlYXIgb2YgaXRzIGJlaW5nIGRlY3JlZWQgdGhhdCB0aGUgbGV0dGVycyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHdlbGwgZHJhd24gdXA/IEFuZCB0aGF0IGV4cHJlc3Npb24gZGlkIG5vdOKAlGFzIGlzIG9mdGVuIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvdGhlciBtZW7igJRmYWxsIGZyb20geW91IGJ5IGNoYW5jZSwgYnV0IHlvdSBicm91Z2h0IGl0IHdpdGggeW91CiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiBkb3duLCBkZWxpYmVyYXRlZCBvbiwgYW5kIGNhcmVmdWxseSBtZWRpdGF0ZWQgb24uIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgYm90aCBvdWdodCB0byBoYXZlIGdyZWF0IGV4cGVyaWVuY2UgaW4gdGhlIGFmZmFpcnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMsIGFuZCB5b3UgaGF2ZS4gV2hlbiBkaWQgeW91IGV2ZXIgc2VlIGEgZGVjcmVlIGZyYW1lZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWFubmVyPyBvciBpbiB3aGF0IHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSBwYXNzZWQgb24gc3VjaCBvY2Nhc2lvbnMuIChhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSBpbm51bWVyYWJsZSksIGRpZCB5b3UgZXZlciBoZWFyIG9mIGl0cyBiZWluZyBkZWNyZWVkIHRoYXQgdGhlIGxldHRlcnMgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiB3ZWxsIGRyYXduIHVwPyBBbmQgdGhhdCBleHByZXNzaW9uIGRpZCBub3TigJRhcyBpcyBvZnRlbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgIHdpdGggb3RoZXIgbWVu4oCUZmFsbCBmcm9tIHlvdSBieSBjaGFuY2UsIGJ1dCB5b3UgYnJvdWdodCBpdCB3aXRoIHlvdQogICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gZG93biwgZGVsaWJlcmF0ZWQgb24sIGFuZCBjYXJlZnVsbHkgbWVkaXRhdGVkIG9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWYgYW55IG9uZSBjb3VsZCB0YWtlIGZyb20geW91IHRoaXMgaGFiaXQgb2YgZGlzcGFyYWdpbmcgZ29vZCBtZW4gb24gYWxtb3N0IGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24sIHRoZW4gd2hhdCBxdWFsaXRpZXMgd291bGQgbm90IGJlIGxlZnQgdG8geW91IHdoaWNoIGV2ZXJ5IG9uZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGRlc2lyZSBmb3IgaGltc2VsZj8gRG8sIHRoZW4sIHJlY29sbGVjdCB5b3Vyc2VsZjsgZG8gYXQgbGFzdCBzb2Z0ZW4gYW5kIHF1aWV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBkaXNwb3NpdGlvbiBvZiB5b3VyczsgZG8gdGFrZSB0aGUgYWR2aWNlIG9mIGdvb2QgbWVuLCB3aXRoIG1hbnkgb2Ygd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICBhcmUgaW50aW1hdGU7IGRvIGNvbnZlcnNlIHdpdGggdGhhdCB3aXNlc3Qgb2YgbWVuLCB5b3VyIG93biBzb24taW4tbGF3LCBvZnRlbmVyCiAgICAgICAgICAgICAgICAgICAgdGhhbiB3aXRoIHlvdXJzZWxmOyBhbmQgdGhlbiB5b3Ugd2lsbCBvYnRhaW4gdGhlIG5hbWUgb2YgYSBtYW4gb2YgdGhlIHZlcnkKICAgICAgICAgICAgICAgICAgICBoaWdoZXN0IGNoYXJhY3Rlci4gRG8geW91IHRoaW5rIGl0IGEgbWF0dGVyIG9mIG5vIGNvbnNlcXVlbmNlIChpdCBpcyBhIG1hdHRlciBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIEksIG91dCBvZiB0aGUgZnJpZW5kc2hpcCB3aGljaCBJIGZlZWwgZm9yIHlvdSwgY29uc3RhbnRseSBncmlldmUgaW4geW91cgogICAgICAgICAgICAgICAgICAgIHN0ZWFkKSwgdGhhdCB0aGlzIHNob3VsZCBiZSBjb21tb25seSBzYWlkIG91dCBvZiBkb29ycywgYW5kIHNob3VsZCBiZSBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHRvcGljIG9mIGNvbnZlcnNhdGlvbiBhbW9uZyB0aGUgUm9tYW4gcGVvcGxlLCB0aGF0IHRoZSBtYW4gd2hvIGRlbGl2ZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBvcGluaW9uIGZpcnN0IGRpZCBub3QgZmluZCBhIHNpbmdsZSBwZXJzb24gdG8gYWdyZWUgd2l0aCBoaW0/IEFuZCB0aGF0IEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHRoZSBjYXNlIHRvZGF5LiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBwcm9wb3NlIHRvIHRha2UgdGhlIGxlZ2lvbnMgYXdheSBmcm9tIEJydXR1czrigJR3aGljaCBsZWdpb25zPyBXaHksCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hpY2ggaGUgaGFzIGdhaW5lZCBvdmVyIGZyb20gdGhlIHdpY2tlZG5lc3Mgb2YgQ2FpdXMgQW50b25pdXMsIGFuZCBoYXMgYnkKICAgICAgICAgICAgICAgICAgICBoaXMgb3duIGF1dGhvcml0eSBnYWluZWQgb3ZlciB0byB0aGUgcmVwdWJsaWMuIERvIHlvdSB3aXNoIHRoZW4gdGhhdCBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBhZ2FpbiBhcHBlYXIgdG8gYmUgdGhlIG9ubHkgcGVyc29uIHN0cmlwcGVkIG9mIGhpcyBhdXRob3JpdHksIGFuZCBhcyBpdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYmFuaXNoZWQgYnkgdGhlIHNlbmF0ZT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB5b3UsIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgaWYgeW91IGFiYW5kb24gYW5kIGJldHJheSBNYXJjdXMgQnJ1dHVzLCB3aGF0IGNpdGl6ZW4gaW4gdGhlIHdvcmxkIHdpbGwKICAgICAgICAgICAgICAgICAgICB5b3UgZXZlciBkaXN0aW5ndWlzaD8gV2hvbSB3aWxsIHlvdSBldmVyIGZhdm9yPyBVbmxlc3MsIGluZGVlZCwgeW91IHRoaW5rIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4gd2hvIHB1dCBhIGRpYWRlbSBvbiBhIG1hbidzIGhlYWQgZGVzZXJ2ZSB0byBiZSBwcmVzZXJ2ZWQsIGFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGFib2xpc2hlZCB0aGUgdmVyeSBuYW1lIG9mIGtpbmdseSBwb3dlciBkZXNlcnZlIHRvIGJlIGFiYW5kb25lZC4gQW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBkaXZpbmUgYW5kIGltbW9ydGFsIGdsb3J5IG9mIE1hcmN1cyBCcnV0dXMgSSB3aWxsIHNheSBubyBtb3JlOyBpdCBpcwogICAgICAgICAgICAgICAgICAgIGFscmVhZHkgZW1iYWxtZWQgaW4gdGhlIGdyYXRlZnVsIHJlY29sbGVjdGlvbiBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBidXQgaXQgaGFzCiAgICAgICAgICAgICAgICAgICAgbm90IHlldCBiZWVuIHNhbmN0aW9uZWQgYnkgYW55IGZvcm1hbCBhY3Qgb2YgcHVibGljIGF1dGhvcml0eS4gU3VjaCBwYXRpZW5jZSEgTwogICAgICAgICAgICAgICAgICAgIHllIGdvb2QgZ29kcyEgc3VjaCBtb2RlcmF0aW9uISBzdWNoIHRyYW5xdWlsbGl0eSBhbmQgc3VibWlzc2lvbiB1bmRlciBpbmp1cnkhIEEKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvLCB3aGlsZSBoZSB3YXMgcHJhZXRvciBvZiB0aGUgY2l0eSwgd2FzIGRyaXZlbiBmcm9tIHRoZSBjaXR5LCB3YXMKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgZnJvbSBzaXR0aW5nIGFzIGp1ZGdlIGluIGxlZ2FsIHByb2NlZWRpbmdzLCB3aGVuIGl0IHdhcyBoZSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZWQgYWxsIGxhdyB0byB0aGUgcmVwdWJsaWM7IGFuZCwgdGhvdWdoIGhlIG1pZ2h0IGhhdmUgYmVlbiBoZWRnZWQgcm91bmQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgZGFpbHkgY29uY291cnNlIG9mIGFsbCB2aXJ0dW91cyBtZW4sIHdobyB3ZXJlIGNvbnN0YW50bHkgZmxvY2tpbmcgcm91bmQgaGltCiAgICAgICAgICAgICAgICAgICAgaW4gbWFydmVsb3VzIG51bWJlcnMsIGhlIHByZWZlcnJlZCB0byBiZSBkZWZlbmRlZCBpbiBoaXMgYWJzZW5jZSBieSB0aGUganVkZ21lbnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ29vZCwgdG8gYmVpbmcgcHJlc2VudCBhbmQgcHJvdGVjdGVkIGJ5IHRoZWlyIGZvcmNlO+KAlHdobyB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZXZlbiBwcmVzZW50IHRvIGNlbGVicmF0ZSB0aGUgZ2FtZXMgdG8gQXBvbGxvLCB3aGljaCBoYWQgYmVlbiBwcmVwYXJlZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgbWFubmVyIHN1aXRhYmxlIHRvIGhpcyBvd24gZGlnbml0eSBhbmQgdG8gdGhhdCBvZiB0aGUgUm9tYW4gcGVvcGxlLCBsZXN0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG9wZW4gYW55IHJvYWQgdG8gdGhlIGF1ZGFjaXR5IG9mIG1vc3Qgd2lja2VkIG1lbi4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgeW91LCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIGlmIHlvdSBhYmFuZG9uIGFuZCBiZXRyYXkgTWFyY3VzIEJydXR1cywgd2hhdCBjaXRpemVuIGluIHRoZSB3b3JsZCB3aWxsCiAgICAgICAgICAgICAgICAgICAgeW91IGV2ZXIgZGlzdGluZ3Vpc2g/IFdob20gd2lsbCB5b3UgZXZlciBmYXZvcj8gVW5sZXNzLCBpbmRlZWQsIHlvdSB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgbWVuIHdobyBwdXQgYSBkaWFkZW0gb24gYSBtYW4ncyBoZWFkIGRlc2VydmUgdG8gYmUgcHJlc2VydmVkLCBhbmQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBhYm9saXNoZWQgdGhlIHZlcnkgbmFtZSBvZiBraW5nbHkgcG93ZXIgZGVzZXJ2ZSB0byBiZSBhYmFuZG9uZWQuIEFuZCBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMgZGl2aW5lIGFuZCBpbW1vcnRhbCBnbG9yeSBvZiBNYXJjdXMgQnJ1dHVzIEkgd2lsbCBzYXkgbm8gbW9yZTsgaXQgaXMKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGVtYmFsbWVkIGluIHRoZSBncmF0ZWZ1bCByZWNvbGxlY3Rpb24gb2YgYWxsIHRoZSBjaXRpemVucywgYnV0IGl0IGhhcwogICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYmVlbiBzYW5jdGlvbmVkIGJ5IGFueSBmb3JtYWwgYWN0IG9mIHB1YmxpYyBhdXRob3JpdHkuIFN1Y2ggcGF0aWVuY2UhIE8KICAgICAgICAgICAgICAgICAgICB5ZSBnb29kIGdvZHMhIHN1Y2ggbW9kZXJhdGlvbiEgc3VjaCB0cmFucXVpbGxpdHkgYW5kIHN1Ym1pc3Npb24gdW5kZXIgaW5qdXJ5ISBBCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobywgd2hpbGUgaGUgd2FzIHByYWV0b3Igb2YgdGhlIGNpdHksIHdhcyBkcml2ZW4gZnJvbSB0aGUgY2l0eSwgd2FzCiAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkIGZyb20gc2l0dGluZyBhcyBqdWRnZSBpbiBsZWdhbCBwcm9jZWVkaW5ncywgd2hlbiBpdCB3YXMgaGUgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVkIGFsbCBsYXcgdG8gdGhlIHJlcHVibGljOyBhbmQsIHRob3VnaCBoZSBtaWdodCBoYXZlIGJlZW4gaGVkZ2VkIHJvdW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGRhaWx5IGNvbmNvdXJzZSBvZiBhbGwgdmlydHVvdXMgbWVuLCB3aG8gd2VyZSBjb25zdGFudGx5IGZsb2NraW5nIHJvdW5kIGhpbQogICAgICAgICAgICAgICAgICAgIGluIG1hcnZlbG91cyBudW1iZXJzLCBoZSBwcmVmZXJyZWQgdG8gYmUgZGVmZW5kZWQgaW4gaGlzIGFic2VuY2UgYnkgdGhlIGp1ZGdtZW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGdvb2QsIHRvIGJlaW5nIHByZXNlbnQgYW5kIHByb3RlY3RlZCBieSB0aGVpciBmb3JjZTvigJR3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGV2ZW4gcHJlc2VudCB0byBjZWxlYnJhdGUgdGhlIGdhbWVzIHRvIEFwb2xsbywgd2hpY2ggaGFkIGJlZW4gcHJlcGFyZWQgaW4gYQogICAgICAgICAgICAgICAgICAgIG1hbm5lciBzdWl0YWJsZSB0byBoaXMgb3duIGRpZ25pdHkgYW5kIHRvIHRoYXQgb2YgdGhlIFJvbWFuIHBlb3BsZSwgbGVzdCBoZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBvcGVuIGFueSByb2FkIHRvIHRoZSBhdWRhY2l0eSBvZiBtb3N0IHdpY2tlZCBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['10.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWx0aG91Z2gsIHdoYXQgZ2FtZXMgb3Igd2hhdCBkYXlzIHdlcmUgZXZlciBtb3JlIGpveWZ1bCB0aGFuIHRob3NlIG9uIHdoaWNoIGF0CiAgICAgICAgICAgICAgICAgICAgZXZlcnkgdmVyc2UgdGhhdCB0aGUgYWN0b3IgdXR0ZXJlZCwgdGhlIFJvbWFuIHBlb3BsZSBkaWQgaG9ub3IgdG8gdGhlIG1lbW9yeSBvZgogICAgICAgICAgICAgICAgICAgIEJydXR1cywgd2l0aCBsb3VkIHNob3V0cyBvZiBhcHBsYXVzZT8gVGhlIHBlcnNvbiBvZiB0aGVpciBsaWJlcmF0b3Igd2FzIGFic2VudCwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVjb2xsZWN0aW9uIG9mIHRoZWlyIGxpYmVydHkgd2FzIHByZXNlbnQsIGluIHdoaWNoIHRoZSBhcHBlYXJhbmNlIG9mIEJydXR1cwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgc2VlbWVkIHRvIGJlIHZpc2libGUuIEJ1dCB0aGUgbWFuIGhpbXNlbGYgSSBiZWhlbGQgb24gdGhvc2UgdmVyeSBkYXlzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGdhbWVzLCBpbiB0aGUgY291bnRyeS1ob3VzZSBvZiBhIG1vc3QgaWxsdXN0cmlvdXMgeW91bmcgbWFuLCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+THVjdWxsdXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGhpcyByZWxhdGlvbiwgdGhpbmtpbmcgb2Ygbm90aGluZwogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGUgcGVhY2UgYW5kIGNvbmNvcmQgb2YgdGhlIGNpdGl6ZW5zLiBJIHNhdyBoaW0gYWdhaW4gYWZ0ZXJ3YXJkIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMTQiPlZlbGlhPC9wbGFjZU5hbWU+LCBkZXBhcnRpbmcgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBubyBwcmV0ZXh0CiAgICAgICAgICAgICAgICAgICAgZm9yIGNpdmlsIHdhciBvbiBoaXMgYWNjb3VudC4gT2ggd2hhdCBhIHNpZ2h0IHdhcyB0aGF0ISBncmlldm91cywgbm90IG9ubHkgdG8KICAgICAgICAgICAgICAgICAgICBtZW4gYnV0IHRvIHRoZSB2ZXJ5IHdhdmVzIGFuZCBzaG9yZXMuIFRoYXQgaXRzIHNhdmlvciBzaG91bGQgYmUgZGVwYXJ0aW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBoaXMgY291bnRyeTsgdGhhdCBpdHMgZGVzdHJveWVycyBzaG91bGQgYmUgcmVtYWluaW5nIGluIHRoZWlyIGNvdW50cnkhIFRoZSBmbGVldAogICAgICAgICAgICAgICAgICAgIG9mIENhc3NpdXMgZm9sbG93ZWQgYSBmZXcgZGF5cyBhZnRlcndhcmQ7IHNvIHRoYXQgSSB3YXMgYXNoYW1lZCwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0byByZXR1cm4gaW50byB0aGUgY2l0eSBmcm9tIHdoaWNoIHRob3NlIG1lbiB3ZXJlIGRlcGFydGluZy4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2lnbiB3aXRoIHdoaWNoIEkgcmV0dXJuZWQgeW91IGhlYXJkIGF0IHRoZSBiZWdpbm5pbmcsIGFuZCBzaW5jZSB0aGF0IHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAga25vd24gYnkgZXhwZXJpZW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IEJydXR1cywgdGhlcmVmb3JlLCBiaWRlZAogICAgICAgICAgICAgICAgICAgIGhpcyB0aW1lLiBGb3IsIGFzIGxvbmcgYXMgaGUgc2F3IHlvdSBlbmR1cmUgZXZlcnkgdGhpbmcsIGhlIGhpbXNlbGYgYmVoYXZlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW5jcmVkaWJsZSBwYXRpZW5jZTsgYWZ0ZXIgdGhhdCBoZSBzYXcgeW91IHJvdXNlZCB0byBhIGRlc2lyZSBvZiBsaWJlcnR5LCBoZQogICAgICAgICAgICAgICAgICAgIHByZXBhcmVkIHRoZSBtZWFucyB0byBwcm90ZWN0IHlvdSBpbiB5b3VyIGxpYmVydHkuIDwvcD4KCQkJCTxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5MdWN1bGx1czwvc3VybmFtZT48L3BlcnNOYW1lPiwgaGlzIHJlbGF0aW9uLCB0aGlua2luZyBvZiBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBwZWFjZSBhbmQgY29uY29yZCBvZiB0aGUgY2l0aXplbnMuIEkgc2F3IGhpbSBhZ2FpbiBhZnRlcndhcmQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkx1Y3VsbHVzPC9zdXJuYW1lPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4MzE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDgzMTQiPlZlbGlhPC9wbGFjZU5hbWU+LCBkZXBhcnRpbmcgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4gb3JkZXIgdGhhdCB0aGVyZSBtaWdodCBiZSBubyBwcmV0ZXh0CiAgICAgICAgICAgICAgICAgICAgZm9yIGNpdmlsIHdhciBvbiBoaXMgYWNjb3VudC4gT2ggd2hhdCBhIHNpZ2h0IHdhcyB0aGF0ISBncmlldm91cywgbm90IG9ubHkgdG8KICAgICAgICAgICAgICAgICAgICBtZW4gYnV0IHRvIHRoZSB2ZXJ5IHdhdmVzIGFuZCBzaG9yZXMuIFRoYXQgaXRzIHNhdmlvciBzaG91bGQgYmUgZGVwYXJ0aW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBoaXMgY291bnRyeTsgdGhhdCBpdHMgZGVzdHJveWVycyBzaG91bGQgYmUgcmVtYWluaW5nIGluIHRoZWlyIGNvdW50cnkhIFRoZSBmbGVldAogICAgICAgICAgICAgICAgICAgIG9mIENhc3NpdXMgZm9sbG93ZWQgYSBmZXcgZGF5cyBhZnRlcndhcmQ7IHNvIHRoYXQgSSB3YXMgYXNoYW1lZCwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0byByZXR1cm4gaW50byB0aGUgY2l0eSBmcm9tIHdoaWNoIHRob3NlIG1lbiB3ZXJlIGRlcGFydGluZy4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2lnbiB3aXRoIHdoaWNoIEkgcmV0dXJuZWQgeW91IGhlYXJkIGF0IHRoZSBiZWdpbm5pbmcsIGFuZCBzaW5jZSB0aGF0IHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAga25vd24gYnkgZXhwZXJpZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['10.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCcnV0dXMsIHRoZXJlZm9yZSwgYmlkZWQKICAgICAgICAgICAgICAgICAgICBoaXMgdGltZS4gRm9yLCBhcyBsb25nIGFzIGhlIHNhdyB5b3UgZW5kdXJlIGV2ZXJ5IHRoaW5nLCBoZSBoaW1zZWxmIGJlaGF2ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGluY3JlZGlibGUgcGF0aWVuY2U7IGFmdGVyIHRoYXQgaGUgc2F3IHlvdSByb3VzZWQgdG8gYSBkZXNpcmUgb2YgbGliZXJ0eSwgaGUKICAgICAgICAgICAgICAgICAgICBwcmVwYXJlZCB0aGUgbWVhbnMgdG8gcHJvdGVjdCB5b3UgaW4geW91ciBsaWJlcnR5LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGF0IGEgcGVzdCwgYW5kIGhvdyBncmVhdCBhIHBlc3Qgd2FzIGl0IHdoaWNoIGhlIHJlc2lzdGVkPyBGb3IgaWYgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBoYWQgYmVlbiBhYmxlIHRvIGFjY29tcGxpc2ggd2hhdCBoZSBpbnRlbmRlZCBpbiBoaXMgbWluZCAoYW5kIGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGFibGUgdG8gZG8gc28gaWYgdGhlIHZpcnR1ZSBvZiBNYXJjdXMgQnJ1dHVzIGhhZCBub3Qgb3Bwb3NlZCBoaXMKICAgICAgICAgICAgICAgICAgICB3aWNrZWRuZXNzKSwgd2Ugc2hvdWxkIGhhdmUgbG9zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2ODMiPklsbHlyaWN1bTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gd291bGQgaGF2ZSBiZWVuIGEgcmVmdWdlIGZvciBBbnRvbml1cwogICAgICAgICAgICAgICAgICAgIGlmIGRlZmVhdGVkLCBvciBhIHN1cHBvcnQgdG8gaGltIGluIGF0dGFja2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPjsgd2hpY2ggYXQgcHJlc2VudCwgYmVpbmcgbm90IG9ubHkgYXJyYXllZCBpbiBhcm1zLCBidXQKICAgICAgICAgICAgICAgICAgICBlbWJlbGxpc2hlZCBieSB0aGUgbWlsaXRhcnkgY29tbWFuZCBhbmQgYXV0aG9yaXR5IGFuZCB0cm9vcHMgb2YgTWFyY3VzIEJydXR1cywKICAgICAgICAgICAgICAgICAgICBzdHJldGNoZXMgb3V0IGhlciByaWdodCBoYW5kIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCBwcm9taXNlcyBpdCBoZXIgcHJvdGVjdGlvbi4gQW5kIHRoZSBtYW4gd2hvIHByb3Bvc2VzIHRvIGRlcHJpdmUgaGltIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFybXksIGlzIHRha2luZyBhd2F5IGEgbW9zdCBpbGx1c3RyaW91cyBob25vciwgYW5kIGEgbW9zdCB0cnVzdHdvcnRoeSBndWFyZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+IEkgd2lzaCwgaW5kZWVkLCB0aGF0IEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgbWF5IGhlYXIgdGhpcyBuZXdzIGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBzbyB0aGF0IGhlIG1heSB1bmRlcnN0YW5kIHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICBub3QgRGVjaW11cyBCcnV0dXMgd2hvbSBoZSBpcyBzdXJyb3VuZGluZyB3aXRoIGhpcyByYW1wYXJ0cywgYnV0IGhlIGhpbXNlbGYgd2hvCiAgICAgICAgICAgICAgICAgICAgaXMgcmVhbGx5IGhlbW1lZCBpbi4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpY3VtPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3b3VsZCBoYXZlIGJlZW4gYSByZWZ1Z2UgZm9yIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgaWYgZGVmZWF0ZWQsIG9yIGEgc3VwcG9ydCB0byBoaW0gaW4gYXR0YWNraW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyB3aGljaCBhdCBwcmVzZW50LCBiZWluZyBub3Qgb25seSBhcnJheWVkIGluIGFybXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIGVtYmVsbGlzaGVkIGJ5IHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBhdXRob3JpdHkgYW5kIHRyb29wcyBvZiBNYXJjdXMgQnJ1dHVzLAogICAgICAgICAgICAgICAgICAgIHN0cmV0Y2hlcyBvdXQgaGVyIHJpZ2h0IGhhbmQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHByb21pc2VzIGl0IGhlciBwcm90ZWN0aW9uLiBBbmQgdGhlIG1hbiB3aG8gcHJvcG9zZXMgdG8gZGVwcml2ZSBoaW0gb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJteSwgaXMgdGFraW5nIGF3YXkgYSBtb3N0IGlsbHVzdHJpb3VzIGhvbm9yLCBhbmQgYSBtb3N0IHRydXN0d29ydGh5IGd1YXJkIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMuIDwvdHJhbnNsYXRpb24+"
translation['10.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gSSB3aXNoLCBpbmRlZWQsIHRoYXQgQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBtYXkgaGVhciB0aGlzIG5ld3MgYXMgc3BlZWRpbHkgYXMgcG9zc2libGUsIHNvIHRoYXQgaGUgbWF5IHVuZGVyc3RhbmQgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBEZWNpbXVzIEJydXR1cyB3aG9tIGhlIGlzIHN1cnJvdW5kaW5nIHdpdGggaGlzIHJhbXBhcnRzLCBidXQgaGUgaGltc2VsZiB3aG8KICAgICAgICAgICAgICAgICAgICBpcyByZWFsbHkgaGVtbWVkIGluLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgcG9zc2Vzc2VzIHRocmVlIHRvd25zIG9ubHkgb24gdGhlIHdob2xlIGZhY2Ugb2YgdGhlIGVhcnRoLiBIZSBoYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiBtb3N0IGJpdHRlcmx5IGhvc3RpbGUgdG8gaGltOyBoZSBoYXMgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3NlIG1lbiB0aGUgcGVvcGxlIGJleW9uZCB0aGUgUG8sIGluIHdob20gaGUgcGxhY2VkIHRoZSBncmVhdGVzdCByZWxpYW5jZSwKICAgICAgICAgICAgICAgICAgICBlbnRpcmVseSBhbGllbmF0ZWQgZnJvbSBoaW07IGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGlzIGhpcyBlbmVteS4gRm9yZWlnbiBuYXRpb25zLCBmcm9tIHRoZSBuZWFyZXN0IGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgYXJlIG9jY3VwaWVkIGJ5IHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBhcm1pZXMgb2YgbW9zdAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIGFuZCBpbnRyZXBpZCBjaXRpemVucy4gSGlzIG9ubHkgaG9wZSB3YXMgaW4gQ2FpdXMgQW50b25pdXM7IHdobyBiZWluZwogICAgICAgICAgICAgICAgICAgIGluIGFnZSB0aGUgbWlkZGxlIG9uZSBiZXR3ZWVuIGhpcyB0d28gYnJvdGhlcnMsIHJpdmFsZWQgYm90aCBvZiB0aGVtIGluIHZpY2VzLgogICAgICAgICAgICAgICAgICAgIEhlIGhhc3RlbmVkIGF3YXkgYXMgaWYgaGUgd2VyZSBiZWluZyBkcml2ZW4gYXdheSBieSB0aGUgc2VuYXRlIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBub3QgYXMgaWYgaGUgd2VyZSBwcm9oaWJpdGVkIGZyb20KICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5nIHRoaXRoZXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBhIHN0b3JtLCBPIHllCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWwgZ29kcyEgd2hhdCBhIGNvbmZsYWdyYXRpb24hIHdoYXQgYSBkZXZhc3RhdGlvbiEgd2hhdCBhIHBlc3RpbGVuY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3b3VsZCB0aGF0IG1hbiBoYXZlIGJlZW4sIGlmCiAgICAgICAgICAgICAgICAgICAgaW5jcmVkaWJsZSBhbmQgZ29kbGlrZSB2aXJ0dWUgaGFkIG5vdCBjaGVja2VkIHRoZSBlbnRlcnByaXNlIGFuZCBhdWRhY2l0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgZnJhbnRpYyBtYW4uIFdoYXQgcHJvbXB0bmVzcyB3YXMgdGhlcmUgaW4gQnJ1dHVzJ3MgY29uZHVjdCEgd2hhdCBwcnVkZW5jZSEKICAgICAgICAgICAgICAgICAgICB3aGF0IHZhbG9yISBBbHRob3VnaCB0aGUgcmFwaWRpdHkgb2YgdGhlIG1vdmVtZW50IG9mIENhaXVzIEFudG9uaXVzIGFsc28gaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZGVzcGljYWJsZTsgZm9yIGlmIHNvbWUgdmFjYW50IGluaGVyaXRhbmNlcyBoYWQgbm90IGRlbGF5ZWQgaGltIG9uIGhpcyBtYXJjaCwKICAgICAgICAgICAgICAgICAgICB5b3UgbWlnaHQgaGF2ZSBzYWlkIHRoYXQgaGUgaGFkIGZsb3duIHJhdGhlciB0aGFuIHRyYXZlbGVkLiBXaGVuIHdlIGRlc2lyZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIG1lbiB0byBnbyBmb3J0aCB0byB1bmRlcnRha2UgYW55IHB1YmxpYyBidXNpbmVzcywgd2UgYXJlIHNjYXJjZWx5IGFibGUgdG8gZ2V0CiAgICAgICAgICAgICAgICAgICAgdGhlbSBvdXQgb2YgdGhlIGNpdHk7IGJ1dCB3ZSBoYXZlIGRyaXZlbiB0aGlzIG1hbiBvdXQgYnkgdGhlIG1lcmUgZmFjdCBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBkZXNpcmluZyB0byByZXRhaW4gaGltLiBCdXQgd2hhdCBidXNpbmVzcyBoYWQgaGUgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFwb2xsb25pYSIga2V5PSJwZXJzZXVzLEFwb2xsb25pYSI+QXBvbGxvbmlhPC9wbGFjZU5hbWU+PyB3aGF0IGJ1c2luZXNzIGhhZCBoZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzUwIiBrZXk9InRnbiw3MDEwNzUwIj5EeXJyYWNoaXVtPC9wbGFjZU5hbWU+PyBvciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjgzIiBrZXk9InRnbiw3MDE2NjgzIj5JbGx5cmljdW08L3BsYWNlTmFtZT4/IFdoYXQgaGFkIGhlIHRvIGRvIHdpdGggdGhlIGFybXkgb2YKICAgICAgICAgICAgICAgICAgICBQdWJsaXVzIFZhdGluaXVzLCBvdXIgZ2VuZXJhbD8gSGUsIGFzIGhlIHNhaWQgaGltc2VsZiwgd2FzIHRoZSBzdWNjZXNzb3Igb2YKICAgICAgICAgICAgICAgICAgICBIb3J0ZW5zaXVzLiBUaGUgYm91bmRhcmllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgYXJlIHdlbGwgZGVmaW5lZDsgdGhlIGNvbmRpdGlvbiBvZiB0aGUgcHJvY29uc3VsIGlzIHdlbGwga25vd247IHRoZSBhbW91bnQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgYXJteSwgaWYgaGUgaGFzIGFueSBhdCBhbGwsIGlzIGZpeGVkLiBCdXQgd2hhdCBoYWQgQW50b25pdXMgdG8gZG8gYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjY4MyIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpY3VtPC9wbGFjZU5hbWU+IGFuZCB3aXRoIHRoZSBsZWdpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgVmF0aW5pdXM/IDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4gbW9zdCBiaXR0ZXJseSBob3N0aWxlIHRvIGhpbTsgaGUgaGFzIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSBtZW4gdGhlIHBlb3BsZSBiZXlvbmQgdGhlIFBvLCBpbiB3aG9tIGhlIHBsYWNlZCB0aGUgZ3JlYXRlc3QgcmVsaWFuY2UsCiAgICAgICAgICAgICAgICAgICAgZW50aXJlbHkgYWxpZW5hdGVkIGZyb20gaGltOyBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBpcyBoaXMgZW5lbXkuIEZvcmVpZ24gbmF0aW9ucywgZnJvbSB0aGUgbmVhcmVzdCBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4sIGFyZSBvY2N1cGllZCBieSB0aGUgbWlsaXRhcnkgY29tbWFuZCBhbmQgYXJtaWVzIG9mIG1vc3QKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBhbmQgaW50cmVwaWQgY2l0aXplbnMuIEhpcyBvbmx5IGhvcGUgd2FzIGluIENhaXVzIEFudG9uaXVzOyB3aG8gYmVpbmcKICAgICAgICAgICAgICAgICAgICBpbiBhZ2UgdGhlIG1pZGRsZSBvbmUgYmV0d2VlbiBoaXMgdHdvIGJyb3RoZXJzLCByaXZhbGVkIGJvdGggb2YgdGhlbSBpbiB2aWNlcy4KICAgICAgICAgICAgICAgICAgICBIZSBoYXN0ZW5lZCBhd2F5IGFzIGlmIGhlIHdlcmUgYmVpbmcgZHJpdmVuIGF3YXkgYnkgdGhlIHNlbmF0ZSBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgbm90IGFzIGlmIGhlIHdlcmUgcHJvaGliaXRlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZyB0aGl0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['10.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBhIHN0b3JtLCBPIHllCiAgICAgICAgICAgICAgICAgICAgaW1tb3J0YWwgZ29kcyEgd2hhdCBhIGNvbmZsYWdyYXRpb24hIHdoYXQgYSBkZXZhc3RhdGlvbiEgd2hhdCBhIHBlc3RpbGVuY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHdvdWxkIHRoYXQgbWFuIGhhdmUgYmVlbiwgaWYKICAgICAgICAgICAgICAgICAgICBpbmNyZWRpYmxlIGFuZCBnb2RsaWtlIHZpcnR1ZSBoYWQgbm90IGNoZWNrZWQgdGhlIGVudGVycHJpc2UgYW5kIGF1ZGFjaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBmcmFudGljIG1hbi4gV2hhdCBwcm9tcHRuZXNzIHdhcyB0aGVyZSBpbiBCcnV0dXMncyBjb25kdWN0ISB3aGF0IHBydWRlbmNlIQogICAgICAgICAgICAgICAgICAgIHdoYXQgdmFsb3IhIEFsdGhvdWdoIHRoZSByYXBpZGl0eSBvZiB0aGUgbW92ZW1lbnQgb2YgQ2FpdXMgQW50b25pdXMgYWxzbyBpcyBub3QKICAgICAgICAgICAgICAgICAgICBkZXNwaWNhYmxlOyBmb3IgaWYgc29tZSB2YWNhbnQgaW5oZXJpdGFuY2VzIGhhZCBub3QgZGVsYXllZCBoaW0gb24gaGlzIG1hcmNoLAogICAgICAgICAgICAgICAgICAgIHlvdSBtaWdodCBoYXZlIHNhaWQgdGhhdCBoZSBoYWQgZmxvd24gcmF0aGVyIHRoYW4gdHJhdmVsZWQuIFdoZW4gd2UgZGVzaXJlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgbWVuIHRvIGdvIGZvcnRoIHRvIHVuZGVydGFrZSBhbnkgcHVibGljIGJ1c2luZXNzLCB3ZSBhcmUgc2NhcmNlbHkgYWJsZSB0byBnZXQKICAgICAgICAgICAgICAgICAgICB0aGVtIG91dCBvZiB0aGUgY2l0eTsgYnV0IHdlIGhhdmUgZHJpdmVuIHRoaXMgbWFuIG91dCBieSB0aGUgbWVyZSBmYWN0IG9mIG91cgogICAgICAgICAgICAgICAgICAgIGRlc2lyaW5nIHRvIHJldGFpbiBoaW0uIEJ1dCB3aGF0IGJ1c2luZXNzIGhhZCBoZSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXBvbGxvbmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcG9sbG9uaWEiPkFwb2xsb25pYTwvcGxhY2VOYW1lPj8gd2hhdCBidXNpbmVzcyBoYWQgaGUgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDc1MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzUwIj5EeXJyYWNoaXVtPC9wbGFjZU5hbWU+PyBvciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2ODMiPklsbHlyaWN1bTwvcGxhY2VOYW1lPj8gV2hhdCBoYWQgaGUgdG8gZG8gd2l0aCB0aGUgYXJteSBvZgogICAgICAgICAgICAgICAgICAgIFB1YmxpdXMgVmF0aW5pdXMsIG91ciBnZW5lcmFsPyBIZSwgYXMgaGUgc2FpZCBoaW1zZWxmLCB3YXMgdGhlIHN1Y2Nlc3NvciBvZgogICAgICAgICAgICAgICAgICAgIEhvcnRlbnNpdXMuIFRoZSBib3VuZGFyaWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGFyZSB3ZWxsIGRlZmluZWQ7IHRoZSBjb25kaXRpb24gb2YgdGhlIHByb2NvbnN1bCBpcyB3ZWxsIGtub3duOyB0aGUgYW1vdW50IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGFybXksIGlmIGhlIGhhcyBhbnkgYXQgYWxsLCBpcyBmaXhlZC4gQnV0IHdoYXQgaGFkIEFudG9uaXVzIHRvIGRvIGF0IGFsbAogICAgICAgICAgICAgICAgICAgIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpY3VtPC9wbGFjZU5hbWU+IGFuZCB3aXRoIHRoZSBsZWdpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgVmF0aW5pdXM/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IEJydXR1cyBoYWQgbm90aGluZyB0byBkbyB3aXRoIHRoZW0gZWl0aGVyLiBGb3IgdGhhdCwgcGVyaGFwcywgaXMgd2hhdCBzb21lCiAgICAgICAgICAgICAgICAgICAgd29ydGhsZXNzIG1hbiBtYXkgc2F5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+IEFsbCB0aGUgbGVnaW9ucywgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvcmNlcyB3aGljaCBleGlzdCBhbnkgd2hlcmUsIGJlbG9uZyB0byB0aGUgUm9tYW4gcGVvcGxlLiBOb3Igc2hhbGwgdGhvc2UKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIHdoaWNoIGhhdmUgcXVpdHRlZCBNYXJjdXMgQW50b25pdXMgYmUgY2FsbGVkIHRoZSBsZWdpb25zIG9mIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgcmF0aGVyIHRoYW4gb2YgdGhlIHJlcHVibGljOyBmb3IgaGUgbG9zZXMgYWxsIHBvd2VyIG92ZXIgaGlzIGFybXksIGFuZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlcyBvZiBtaWxpdGFyeSBjb21tYW5kLCB3aG8gdXNlcyB0aGF0IG1pbGl0YXJ5IGNvbW1hbmQgYW5kIHRoYXQgYXJteSB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoZSBsZWdpb25zLCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZm9yY2VzIHdoaWNoIGV4aXN0IGFueSB3aGVyZSwgYmVsb25nIHRvIHRoZSBSb21hbiBwZW9wbGUuIE5vciBzaGFsbCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnMgd2hpY2ggaGF2ZSBxdWl0dGVkIE1hcmN1cyBBbnRvbml1cyBiZSBjYWxsZWQgdGhlIGxlZ2lvbnMgb2YgQW50b25pdXMKICAgICAgICAgICAgICAgICAgICByYXRoZXIgdGhhbiBvZiB0aGUgcmVwdWJsaWM7IGZvciBoZSBsb3NlcyBhbGwgcG93ZXIgb3ZlciBoaXMgYXJteSwgYW5kIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzIG9mIG1pbGl0YXJ5IGNvbW1hbmQsIHdobyB1c2VzIHRoYXQgbWlsaXRhcnkgY29tbWFuZCBhbmQgdGhhdCBhcm15IHRvCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrIHRoZSByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIHRoZSByZXB1YmxpYyBpdHNlbGYgY291bGQgZ2l2ZSBhIGRlY2lzaW9uLCBvciBpZiBhbGwgcmlnaHRzIHdlcmUKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCBieSBpdHMgZGVjcmVlcywgd291bGQgaXQgYWRqdWRnZSB0aGUgbGVnaW9ucyBvZiB0aGUgUm9tYW4gcGVvcGxlIHRvCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgb3IgdG8gQnJ1dHVzPyBUaGUgb25lIGhhZCBmbG93biB3aXRoIHByZWNpcGl0YXRpb24gdG8gdGhlIHBsdW5kZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3Rpb24gb2YgdGhlIGFsbGllcywgaW4gb3JkZXIsIHdoZXJldmVyIGhlIHdlbnQsIHRvIGxheSB3YXN0ZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcGlsbGFnZSwgYW5kIHBsdW5kZXIgZXZlcnl0aGluZywgYW5kIHRvIGVtcGxveSB0aGUgYXJteSBvZiB0aGUgUm9tYW4gcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgUm9tYW4gcGVvcGxlIGl0c2VsZi4gVGhlIG90aGVyIGhhZCBsYWlkIGRvd24gdGhpcyBsYXcgZm9yIGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3aGVyZXZlciBoZSBjYW1lIGhlIHNob3VsZCBhcHBlYXIgdG8gY29tZSBhcyBhIHNvcnQgb2YgbGlnaHQgYW5kIGhvcGUgb2YKICAgICAgICAgICAgICAgICAgICBzYWZldHkuIExhc3RseSwgdGhlIG9uZSB3YXMgc2Vla2luZyBhaWRzIHRvIG92ZXJ0dXJuIHRoZSByZXB1YmxpYzsgdGhlIG90aGVyIHRvCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmUgaXQuIE5vciwgaW5kZWVkLCBkaWQgd2Ugc2VlIHRoaXMgbW9yZSBjbGVhcmx5IHRoYW4gdGhlIHNvbGRpZXJzCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlczsgZnJvbSB3aG9tIHNvIG11Y2ggZGlzY2Vybm1lbnQgaW4ganVkZ2luZyB3YXMgbm90IHRvIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgd3JpdGVzLCB0aGF0IEFudG9uaXVzIGlzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXBvbGxvbmlhIiBrZXk9InBlcnNldXMsQXBvbGxvbmlhIj5BcG9sbG9uaWE8L3BsYWNlTmFtZT4gd2l0aCBzZXZlbiBjb2hvcnRzLCBhbmQgaGUgaXMKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgYnkgdGhpcyB0aW1lIHRha2VuIHByaXNvbmVyIChtYXkgdGhlIGdvZHMgZ3JhbnQgaXQhKSBvciwgYXQgYWxsIGV2ZW50cywKICAgICAgICAgICAgICAgICAgICBsaWtlIGEgbW9kZXN0IG1hbiwgaGUgZG9lcyBub3QgY29tZSBuZWFyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGxlc3QgaGUgc2hvdWxkIHNlZW0gdG8gYWN0IGluIG9wcG9zaXRpb24gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlLiBBIGxldnkgb2YgdHJvb3BzIGhhcyBiZWVuIGhlbGQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgYnkgdGhlIGdyZWF0IHplYWwgYW5kIGRpbGlnZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIFF1aW50dXMgSG9ydGVuc2l1czsgd2hvc2UgYWRtaXJhYmxlIGNvdXJhZ2UsIHdvcnRoeSBib3RoIG9mIGhpbXNlbGYgYW5kIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgeW91IG1heSBjbGVhcmx5IHBlcmNlaXZlIGZyb20gdGhlIGxldHRlcnMgb2YgQnJ1dHVzLiBUaGUgbGVnaW9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFBpc28sIHRoZSBsaWV1dGVuYW50IG9mIEFudG9uaXVzLCBjb21tYW5kZWQsIGhhcyBzdXJyZW5kZXJlZCBpdHNlbGYgdG8KICAgICAgICAgICAgICAgICAgICBDaWNlcm8sIG15IG93biBzb24uIE9mIHRoZSBjYXZhbHJ5LCB3aGljaCB3YXMgYmVpbmcgbGVkIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+IGluIHR3byBkaXZpc2lvbnMsIG9uZSBkaXZpc2lvbiBoYXMgbGVmdAogICAgICAgICAgICAgICAgICAgIHRoZSBxdWFlc3RvciB3aG8gd2FzIGNvbW1hbmRpbmcgaXQsIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiwgYW5kIGhhcyBqb2luZWQgQnJ1dHVzOyBhbmQgQ25hZXVzIERvbWl0aXVzLCBhIHlvdW5nCiAgICAgICAgICAgICAgICAgICAgbWFuIG9mIHRoZSBncmVhdGVzdCB2aXJ0dWUgYW5kIHdpc2RvbSBhbmQgZmlybW5lc3MsIGhhcyBjYXJyaWVkIG9mZiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBTeXJpYW4gbGlldXRlbmFudCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LiBCdXQgUHVibGl1cyBWYXRpbml1cywgd2hvIGhhcyBiZWZvcmUgdGhpcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSBwcmFpc2VkIGJ5IHVzLCBhbmQgd2hvIGlzIGp1c3RseSBlbnRpdGxlZCB0byBmYXJ0aGVyIHByYWlzZSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHRpbWUsIGhhcyBvcGVuZWQgdGhlIGdhdGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzUwIiBrZXk9InRnbiw3MDEwNzUwIj5EeXJyYWNoaXVtPC9wbGFjZU5hbWU+IHRvIEJydXR1cywgYW5kIGhhcyBnaXZlbiBoaW0gdXAgaGlzIGFybXkuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgd3JpdGVzLCB0aGF0IEFudG9uaXVzIGlzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXBvbGxvbmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcG9sbG9uaWEiPkFwb2xsb25pYTwvcGxhY2VOYW1lPiB3aXRoIHNldmVuIGNvaG9ydHMsIGFuZCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGVpdGhlciBieSB0aGlzIHRpbWUgdGFrZW4gcHJpc29uZXIgKG1heSB0aGUgZ29kcyBncmFudCBpdCEpIG9yLCBhdCBhbGwgZXZlbnRzLAogICAgICAgICAgICAgICAgICAgIGxpa2UgYSBtb2Rlc3QgbWFuLCBoZSBkb2VzIG5vdCBjb21lIG5lYXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBsZXN0IGhlIHNob3VsZCBzZWVtIHRvIGFjdCBpbiBvcHBvc2l0aW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZS4gQSBsZXZ5IG9mIHRyb29wcyBoYXMgYmVlbiBoZWxkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgYnkgdGhlIGdyZWF0IHplYWwgYW5kIGRpbGlnZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIFF1aW50dXMgSG9ydGVuc2l1czsgd2hvc2UgYWRtaXJhYmxlIGNvdXJhZ2UsIHdvcnRoeSBib3RoIG9mIGhpbXNlbGYgYW5kIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgeW91IG1heSBjbGVhcmx5IHBlcmNlaXZlIGZyb20gdGhlIGxldHRlcnMgb2YgQnJ1dHVzLiBUaGUgbGVnaW9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFBpc28sIHRoZSBsaWV1dGVuYW50IG9mIEFudG9uaXVzLCBjb21tYW5kZWQsIGhhcyBzdXJyZW5kZXJlZCBpdHNlbGYgdG8KICAgICAgICAgICAgICAgICAgICBDaWNlcm8sIG15IG93biBzb24uIE9mIHRoZSBjYXZhbHJ5LCB3aGljaCB3YXMgYmVpbmcgbGVkIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4gaW4gdHdvIGRpdmlzaW9ucywgb25lIGRpdmlzaW9uIGhhcyBsZWZ0CiAgICAgICAgICAgICAgICAgICAgdGhlIHF1YWVzdG9yIHdobyB3YXMgY29tbWFuZGluZyBpdCwgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4sIGFuZCBoYXMgam9pbmVkIEJydXR1czsgYW5kIENuYWV1cyBEb21pdGl1cywgYSB5b3VuZwogICAgICAgICAgICAgICAgICAgIG1hbiBvZiB0aGUgZ3JlYXRlc3QgdmlydHVlIGFuZCB3aXNkb20gYW5kIGZpcm1uZXNzLCBoYXMgY2FycmllZCBvZmYgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgU3lyaWFuIGxpZXV0ZW5hbnQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LiBCdXQgUHVibGl1cyBWYXRpbml1cywgd2hvIGhhcyBiZWZvcmUgdGhpcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSBwcmFpc2VkIGJ5IHVzLCBhbmQgd2hvIGlzIGp1c3RseSBlbnRpdGxlZCB0byBmYXJ0aGVyIHByYWlzZSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHRpbWUsIGhhcyBvcGVuZWQgdGhlIGdhdGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzUwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3NTAiPkR5cnJhY2hpdW08L3BsYWNlTmFtZT4gdG8gQnJ1dHVzLCBhbmQgaGFzIGdpdmVuIGhpbSB1cCBoaXMgYXJteS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBSb21hbiBwZW9wbGUgdGhlbiBpcyBub3cgaW4gcG9zc2Vzc2lvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGtleT0idGduLDcwMTY2ODMiPklsbHlyaWN1bTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIFRoZSBsZWdpb25zIHRoZXJlIGFyZSBhbGwgZGV2b3RlZCB0byB1cywgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlnaHQtYXJtZWQgdHJvb3BzIGFyZSBvdXJzLCB0aGUgY2F2YWxyeSBpcyBvdXJzLCBhbmQsIGFib3ZlIGFsbCwgQnJ1dHVzIGlzCiAgICAgICAgICAgICAgICAgICAgb3VycywgYW5kIGFsd2F5cyB3aWxsIGJlIG91cnPigJRhIG1hbiBib3JuIGZvciB0aGUgcmVwdWJsaWMsIGJvdGggYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIG1vc3QgZXhjZWxsZW50IHZpcnR1ZXMsIGFuZCBhbHNvIGJ5IHNvbWUgZXNwZWNpYWwgZGVzdGlueSBvZiBuYW1lIGFuZAogICAgICAgICAgICAgICAgICAgIGZhbWlseSwgYm90aCBvbiBoaXMgZmF0aGVyJ3MgYW5kIG9uIGhpcyBtb3RoZXIncyBzaWRlLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIFJvbWFuIHBlb3BsZSB0aGVuIGlzIG5vdyBpbiBwb3NzZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2ODMiPklsbHlyaWN1bTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPi4gVGhlIGxlZ2lvbnMgdGhlcmUgYXJlIGFsbCBkZXZvdGVkIHRvIHVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBsaWdodC1hcm1lZCB0cm9vcHMgYXJlIG91cnMsIHRoZSBjYXZhbHJ5IGlzIG91cnMsIGFuZCwgYWJvdmUgYWxsLCBCcnV0dXMgaXMKICAgICAgICAgICAgICAgICAgICBvdXJzLCBhbmQgYWx3YXlzIHdpbGwgYmUgb3Vyc+KAlGEgbWFuIGJvcm4gZm9yIHRoZSByZXB1YmxpYywgYm90aCBieSBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gbW9zdCBleGNlbGxlbnQgdmlydHVlcywgYW5kIGFsc28gYnkgc29tZSBlc3BlY2lhbCBkZXN0aW55IG9mIG5hbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgZmFtaWx5LCBib3RoIG9uIGhpcyBmYXRoZXIncyBhbmQgb24gaGlzIG1vdGhlcidzIHNpZGUuIDwvdHJhbnNsYXRpb24+"
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RG9lcyBhbnkgb25lIHRoZW4gZmVhciB3YXIgZnJvbSB0aGlzIG1hbiwgd2hvLCB1bnRpbCB3ZSBjb21tZW5jZWQgdGhlIHdhciwgYmVpbmcKICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgdG8gZG8gc28sIHByZWZlcnJlZCBseWluZyB1bmtub3duIGluIHBlYWNlIHRvIGZsb3VyaXNoaW5nIGluIHdhcj8KICAgICAgICAgICAgICAgICAgICBBbHRob3VnaCBoZSwgaW4gdHJ1dGgsIG5ldmVyIGRpZCBsaWUgdW5rbm93biwgbm9yIGNhbiB0aGlzIGV4cHJlc3Npb24gcG9zc2libHkKICAgICAgICAgICAgICAgICAgICBiZSBhcHBsaWVkIHRvIHN1Y2ggZ3JlYXQgZW1pbmVuY2UgaW4gdmlydHVlLiBGb3IgaGUgd2FzIHRoZSBvYmplY3Qgb2YgcmVncmV0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXRlOyBoZSB3YXMgaW4gZXZlcnkgb25lJ3MgbW91dGgsIHRoZSBzdWJqZWN0IG9mIGV2ZXJ5IG9uZSdzIGNvbnZlcnNhdGlvbi4KICAgICAgICAgICAgICAgICAgICBCdXQgaGUgd2FzIHNvIGZhciByZW1vdmVkIGZyb20gYW4gaW5jbGluYXRpb24gdG8gd2FyLCB0aGF0LCB0aG91Z2ggaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgYnVybmluZyB3aXRoIGEgZGVzaXJlIHRvIHNlZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGZyZWUsIGhlIHByZWZlcnJlZCBiZWluZyB3YW50aW5nIHRvIHRoZSB6ZWFsIG9mIHRoZSBjaXRpemVucywgdG8gbGVhZGluZyB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgcHV0IGV2ZXJ5IHRoaW5nIHRvIHRoZSBpc3N1ZSBvZiB3YXIuIFRoZXJlZm9yZSwgdGhvc2UgdmVyeSBtZW4sIGlmIHRoZXJlIGJlIGFueQogICAgICAgICAgICAgICAgICAgIHN1Y2gsIHdobyBmaW5kIGZhdWx0IHdpdGggdGhlIHNsb3duZXNzIG9mIEJydXR1cydzIG1vdmVtZW50cywgbmV2ZXJ0aGVsZXNzIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgdGltZSBhZG1pcmUgaGlzIG1vZGVyYXRpb24gYW5kIGhpcyBwYXRpZW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBmcmVlLCBoZSBwcmVmZXJyZWQgYmVpbmcgd2FudGluZyB0byB0aGUgemVhbCBvZiB0aGUgY2l0aXplbnMsIHRvIGxlYWRpbmcgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIHB1dCBldmVyeSB0aGluZyB0byB0aGUgaXNzdWUgb2Ygd2FyLiBUaGVyZWZvcmUsIHRob3NlIHZlcnkgbWVuLCBpZiB0aGVyZSBiZSBhbnkKICAgICAgICAgICAgICAgICAgICBzdWNoLCB3aG8gZmluZCBmYXVsdCB3aXRoIHRoZSBzbG93bmVzcyBvZiBCcnV0dXMncyBtb3ZlbWVudHMsIG5ldmVydGhlbGVzcyBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHRpbWUgYWRtaXJlIGhpcyBtb2RlcmF0aW9uIGFuZCBoaXMgcGF0aWVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['10.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IEkgc2VlIG5vdyB3aGF0IGl0IGlzIHRoZXkgbWVhbjogbm9yLCBpbiB0cnV0aCwgZG8gdGhleSB1c2UgbXVjaCBkaXNndWlzZS4KICAgICAgICAgICAgICAgICAgICBUaGV5IHNheSB0aGF0IHRoZXkgYXJlIGFmcmFpZCBob3cgdGhlIHZldGVyYW5zIG1heSBlbmR1cmUgdGhlIGlkZWEgb2YgQnJ1dHVzCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGFuIGFybXkuIEFzIGlmIHRoZXJlIHdlcmUgYW55IGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHJvb3BzIG9mIEF1bHVzCiAgICAgICAgICAgICAgICAgICAgSGlydGl1cywgb2YgQ2FpdXMgUGFuc2EsIG9mIERlY2ltdXMgQnJ1dHVzLCBvZiBDYWl1cyBDYWVzYXIsIGFuZCB0aGlzIGFybXkgb2YKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQnJ1dHVzLiBGb3IgaWYgdGhlc2UgZm91ciBhcm1pZXMgd2hpY2ggSSBoYXZlIG1lbnRpb25lZCBhcmUgcHJhaXNlZAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSBoYXZlIHRha2VuIHVwIGFybXMgZm9yIHRoZSBzYWtlIG9mIHRoZSBsaWJlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCByZWFzb24gaXMgdGhlcmUgd2h5IHRoaXMgYXJteSBvZiBNYXJjdXMgQnJ1dHVzIHNob3VsZCBub3QgYmUgY2xhc3NlZCB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGhlYWQ/IE9oLCBidXQgdGhlIHZlcnkgbmFtZSBvZiBNYXJjdXMgQnJ1dHVzIGlzIHVucG9wdWxhciBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXRlcmFucy7igJRNb3JlIHRoYW4gdGhhdCBvZiBEZWNpbXVzIEJydXR1cz/igJRJIHRoaW5rIG5vdDsgZm9yCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggdGhlIGFjdGlvbiBpcyBjb21tb24gdG8gYm90aCB0aGUgQnJ1dGksIGFuZCBhbHRob3VnaCB0aGVpciBzaGFyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBnbG9yeSBpcyBlcXVhbCwgc3RpbGwgdGhvc2UgbWVuIHdobyB3ZXJlIGluZGlnbmFudCBhdCB0aGF0IGRlZWQgd2VyZSBtb3JlIGFuZ3J5CiAgICAgICAgICAgICAgICAgICAgd2l0aCBEZWNpbXVzIEJydXR1cywgYmVjYXVzZSB0aGV5IHNhaWQsIHRoYXQgaXQgd2FzIG1vcmUgaW1wcm9wZXIgZm9yIGl0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZWQgYnkgaGltLiBXaGF0IG5vdyBhcmUgYWxsIHRob3NlIGFybWllcyBsYWJvcmluZyBhdCwgZXhjZXB0IHRvIGVmZmVjdCB0aGUKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIG9mIERlY2ltdXMgQnJ1dHVzIGZyb20gYSBzaWVnZT8gQW5kIHdobyBhcmUgdGhlIGNvbW1hbmRlcnMgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICBhcm1pZXM/IFRob3NlIG1lbiwgSSBzdXBwb3NlLCB3aG8gd2lzaCB0aGUgYWN0cyBvZiBDYWl1cyBDYWVzYXIgdG8gYmUKICAgICAgICAgICAgICAgICAgICBvdmVydHVybmVkLCBhbmQgdGhlIGNhdXNlIG9mIHRoZSB2ZXRlcmFucyB0byBiZSBiZXRyYXllZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['10.8.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPklmIENhZXNhciBoaW1zZWxmIHdlcmUgYWxpdmUsIGNvdWxkIGhlLCBkbyB5b3UgaW1hZ2luZSwgZGVmZW5kIGhpcyBvd24gYWN0cyBtb3JlCiAgICAgICAgICAgICAgICAgICAgdmlnb3JvdXNseSB0aGFuIHRoYXQgbW9zdCBnYWxsYW50IG1hbiBIaXJ0aXVzIGRlZmVuZHMgdGhlbT8gb3IsIGlzIGl0IHBvc3NpYmxlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhbnkgb25lIHNob3VsZCBiZSBmb3VuZCBtb3JlIGZyaWVuZGx5IHRvIHRoZSBjYXVzZSB0aGFuIGhpcyBzb24/IEJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlc2UsIHRob3VnaCBub3QgbG9uZyByZWNvdmVyZWQgZnJvbSBhIHllYXIgbG9uZyBhdHRhY2sgb2YgYSBtb3N0IHNldmVyZQogICAgICAgICAgICAgICAgICAgIGRpc2Vhc2UsIGhhcyBhcHBsaWVkIGFsbCB0aGUgZW5lcmd5IGFuZCBpbmZsdWVuY2Ugd2hpY2ggaGUgaGFkIHRvIGRlZmVuZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBsaWJlcnR5IG9mIHRob3NlIG1lbiBieSB3aG9zZSBwcmF5ZXJzIGhlIGNvbnNpZGVyZWQgdGhhdCBoZSBoaW1zZWxmIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcmVjYWxsZWQgZnJvbSBkZWF0aDsgdGhlIG90aGVyLCBzdHJvbmdlciBpbiB0aGUgc3RyZW5ndGggb2YgaGlzIHZpcnR1ZSB0aGFuIGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiBoaXMgYWdlLCBoYXMgc2V0IG91dCB3aXRoIHRob3NlIHZlcnkgdmV0ZXJhbnMgdG8gZGVsaXZlciBEZWNpbXVzIEJydXR1cy4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUsIHRob3NlIG1lbiB3aG8gYXJlIGJvdGggdGhlIG1vc3QgY2VydGFpbiBhbmQgYXQgdGhlIHNhbWUgdGltZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGVuZXJnZXRpYyBkZWZlbmRlcnMgb2YgdGhlIGFjdHMgb2YgQ2Flc2FyLCBhcmUgd2FnaW5nIHdhciBmb3IgdGhlIHNhZmV0eSBvZgogICAgICAgICAgICAgICAgICAgIERlY2ltdXMgQnJ1dHVzOyBhbmQgdGhleSBhcmUgZm9sbG93ZWQgYnkgdGhlIHZldGVyYW5zLiBGb3IgdGhleSBzZWUgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgbXVzdCBmaWdodCB0byB0aGUgdXR0ZXJtb3N0IGZvciB0aGUgZnJlZWRvbSBvZiB0aGUgUm9tYW4gcGVvcGxlLCBub3QgZm9yIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGFkdmFudGFnZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCByZWFzb24sIHRoZW4sIGlzIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2h5IHRoZSBhcm15IG9mIE1hcmN1cyBCcnV0dXMgc2hvdWxkIGJlIGFuIG9iamVjdCBvZiBzdXNwaWNpb24gdG8gdGhvc2UgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHdob2xlIG9mIHRoZWlyIGVuZXJnaWVzIGRlc2lyZSB0aGUgcHJlc2VydmF0aW9uIG9mIERlY2ltdXMgQnJ1dHVzPyA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCByZWFzb24sIHRoZW4sIGlzIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2h5IHRoZSBhcm15IG9mIE1hcmN1cyBCcnV0dXMgc2hvdWxkIGJlIGFuIG9iamVjdCBvZiBzdXNwaWNpb24gdG8gdGhvc2UgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHdob2xlIG9mIHRoZWlyIGVuZXJnaWVzIGRlc2lyZSB0aGUgcHJlc2VydmF0aW9uIG9mIERlY2ltdXMgQnJ1dHVzPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgbW9yZW92ZXIsIGlmIHRoZXJlIHdlcmUgYW55IHRoaW5nIHdoaWNoIHdlcmUgdG8gYmUgZmVhcmVkIGZyb20gTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzLCB3b3VsZCBub3QgUGFuc2EgcGVyY2VpdmUgaXQ/IE9yIGlmIGhlIGRpZCBwZXJjZWl2ZSBpdCwgd291bGQgbm90IGhlLAogICAgICAgICAgICAgICAgICAgIHRvbywgYmUgYW54aW91cyBhYm91dCBpdD8gV2hvIGlzIGVpdGhlciBtb3JlIGFjdXRlIGluIGhpcyBjb25qZWN0dXJlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmdXR1cmUsIG9yIG1vcmUgZGlsaWdlbnQgaW4gd2FyZGluZyBvZmYgZGFuZ2VyPyBCdXQgeW91IGhhdmUgYWxyZWFkeSBzZWVuIGhpcwogICAgICAgICAgICAgICAgICAgIHplYWwgZm9yLCBhbmQgaW5jbGluYXRpb24gdG93YXJkIE1hcmN1cyBCcnV0dXMuIEhlIGhhcyBhbHJlYWR5IHRvbGQgdXMgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIHdoYXQgd2Ugb3VnaHQgdG8gZGVjcmVlLCBhbmQgaG93IHdlIG91Z2h0IHRvIGZlZWwgd2l0aCByZXNwZWN0IHRvIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIEJydXR1cy4gQW5kIGhlIHdhcyBzbyBmYXIgZnJvbSB0aGlua2luZyB0aGUgYXJteSBvZiBNYXJjdXMgQnJ1dHVzIGRhbmdlcm91cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYywgdGhhdCBoZSBjb25zaWRlcmVkIGl0IHRoZSBtb3N0IGltcG9ydGFudCBhbmQgdGhlIG1vc3QgdHJ1c3R5CiAgICAgICAgICAgICAgICAgICAgYnVsd2FyayBvZiB0aGUgcmVwdWJsaWMuIEVpdGhlciwgdGhlbiwgUGFuc2EgZG9lcyBub3QgcGVyY2VpdmUgdGhpcyAobm8gZG91YnQgaGUKICAgICAgICAgICAgICAgICAgICBpcyBhIG1hbiBvZiBkdWxsIGludGVsbGVjdCksIG9yIGhlIGRpc3JlZ2FyZHMgaXQuIEZvciBoZSBpcyBjbGVhcmx5IG5vdCBhbnhpb3VzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYWN0cyB3aGljaCBDYWVzYXIgZXhlY3V0ZWQgc2hvdWxkIGJlIHJhdGlmaWVkLOKAlGhlLCB3aG8gaW4KICAgICAgICAgICAgICAgICAgICBjb21wbGlhbmNlIHdpdGggb3VyIHJlY29tbWVuZGF0aW9uIGlzIGdvaW5nIHRvIGJyaW5nIGZvcndhcmQgYSBiaWxsIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbWl0aWEgY2VudHVyaWF0YSBmb3Igc2FuY3Rpb25pbmcgYW5kIGNvbmZpcm1pbmcgdGhlbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0IHRob3NlLCB0aGVuLCB3aG8gaGF2ZSBubyBmZWFyLCBjZWFzZSB0byBwcmV0ZW5kIHRvIGJlIGFsYXJtZWQsIGFuZCB0byBiZQogICAgICAgICAgICAgICAgICAgIGV4ZXJjaXNpbmcgdGhlaXIgZm9yZXNpZ2h0IGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMuIEFuZCBsZXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IGFyZSBhZnJhaWQgb2YgZXZlcnkgdGhpbmcsIGNlYXNlIHRvIGJlIHRvbyBmZWFyZnVsLCBsZXN0IHRoZSBwcmV0ZW5zZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBvbmUgcGFydHkgYW5kIHRoZSBpbmFjdGl2aXR5IG9mIHRoZSBvdGhlciBiZSBpbmp1cmlvdXMgdG8gdXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCwgaW4gdGhlIG5hbWUgb2YgbWlzY2hpZWYhIGlzIHRoZSBvYmplY3Qgb2YKICAgICAgICAgICAgICAgICAgICBhbHdheXMgb3Bwb3NpbmcgdGhlIG5hbWUgb2YgdGhlIHZldGVyYW5zIHRvIGV2ZXJ5IGdvb2QgY2F1c2U/IEZvciBldmVuIGlmIEkgd2VyZQogICAgICAgICAgICAgICAgICAgIGF0dGFjaGVkIHRvIHRoZWlyIHZpcnR1ZSwgYXMgaW5kZWVkIEkgYW0sIHN0aWxsLCBpZiB0aGV5IHdlcmUgYXJyb2dhbnQgSSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgYWJsZSB0byB0b2xlcmF0ZSB0aGVpciBhaXJzLiBXaGlsZSB3ZSBhcmUgZW5kZWF2b3JpbmcgdG8gYnJlYWsgdGhlIGJvbmRzCiAgICAgICAgICAgICAgICAgICAgb2Ygc2xhdmVyeSwgc2hhbGwgYW55IG9uZSBoaW5kZXIgdXMgYnkgc2F5aW5nIHRoYXQgdGhlIHZldGVyYW5zIGRvIG5vdCBhcHByb3ZlCiAgICAgICAgICAgICAgICAgICAgb2YgaXQ/IEZvciB0aGV5IGFyZSBub3QsIEkgc3VwcG9zZSwgYmV5b25kIGFsbCBjb3VudGluZyB3aG8gYXJlIHJlYWR5IHRvIHRha2UgdXAKICAgICAgICAgICAgICAgICAgICBhcm1zIGluIGRlZmVuc2Ugb2YgdGhlIGNvbW1vbiBmcmVlZG9tISBUaGVyZSBpcyBubyBtYW4sIGV4Y2VwdCB0aGUgdmV0ZXJhbgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLCB3aG8gaXMgc3RpbXVsYXRlZCBieSB0aGUgaW5kaWduYXRpb24gb2YgYSBmcmVlbWFuIHRvIHJlcGVsIHNsYXZlcnkhCiAgICAgICAgICAgICAgICAgICAgQ2FuIHRoZSByZXB1YmxpYyB0aGVuIHN0YW5kLCByZWx5aW5nIHdob2xseSBvbiB2ZXRlcmFucywgd2l0aG91dCBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcmVpbmZvcmNlbWVudCBvZiB0aGUgeW91dGggb2YgdGhlIHN0YXRlPyBXaG9tLCBpbmRlZWQsIHlvdSBvdWdodCB0byBiZSBhdHRhY2hlZAogICAgICAgICAgICAgICAgICAgIHRvLCBpZiB0aGV5IGJlIGFzc2lzdGFudHMgdG8geW91IGluIHRoZSBhc3NlcnRpb24gb2YgeW91ciBmcmVlZG9tLCBidXQgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCBub3QgdG8gZm9sbG93IGlmIHRoZXkgYmUgdGhlIGFkdmlzZXJzIG9mIHNsYXZlcnkuIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.9.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCwgaW4gdGhlIG5hbWUgb2YgbWlzY2hpZWYhIGlzIHRoZSBvYmplY3Qgb2YKICAgICAgICAgICAgICAgICAgICBhbHdheXMgb3Bwb3NpbmcgdGhlIG5hbWUgb2YgdGhlIHZldGVyYW5zIHRvIGV2ZXJ5IGdvb2QgY2F1c2U/IEZvciBldmVuIGlmIEkgd2VyZQogICAgICAgICAgICAgICAgICAgIGF0dGFjaGVkIHRvIHRoZWlyIHZpcnR1ZSwgYXMgaW5kZWVkIEkgYW0sIHN0aWxsLCBpZiB0aGV5IHdlcmUgYXJyb2dhbnQgSSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgYWJsZSB0byB0b2xlcmF0ZSB0aGVpciBhaXJzLiBXaGlsZSB3ZSBhcmUgZW5kZWF2b3JpbmcgdG8gYnJlYWsgdGhlIGJvbmRzCiAgICAgICAgICAgICAgICAgICAgb2Ygc2xhdmVyeSwgc2hhbGwgYW55IG9uZSBoaW5kZXIgdXMgYnkgc2F5aW5nIHRoYXQgdGhlIHZldGVyYW5zIGRvIG5vdCBhcHByb3ZlCiAgICAgICAgICAgICAgICAgICAgb2YgaXQ/IEZvciB0aGV5IGFyZSBub3QsIEkgc3VwcG9zZSwgYmV5b25kIGFsbCBjb3VudGluZyB3aG8gYXJlIHJlYWR5IHRvIHRha2UgdXAKICAgICAgICAgICAgICAgICAgICBhcm1zIGluIGRlZmVuc2Ugb2YgdGhlIGNvbW1vbiBmcmVlZG9tISBUaGVyZSBpcyBubyBtYW4sIGV4Y2VwdCB0aGUgdmV0ZXJhbgogICAgICAgICAgICAgICAgICAgIHNvbGRpZXJzLCB3aG8gaXMgc3RpbXVsYXRlZCBieSB0aGUgaW5kaWduYXRpb24gb2YgYSBmcmVlbWFuIHRvIHJlcGVsIHNsYXZlcnkhCiAgICAgICAgICAgICAgICAgICAgQ2FuIHRoZSByZXB1YmxpYyB0aGVuIHN0YW5kLCByZWx5aW5nIHdob2xseSBvbiB2ZXRlcmFucywgd2l0aG91dCBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgcmVpbmZvcmNlbWVudCBvZiB0aGUgeW91dGggb2YgdGhlIHN0YXRlPyBXaG9tLCBpbmRlZWQsIHlvdSBvdWdodCB0byBiZSBhdHRhY2hlZAogICAgICAgICAgICAgICAgICAgIHRvLCBpZiB0aGV5IGJlIGFzc2lzdGFudHMgdG8geW91IGluIHRoZSBhc3NlcnRpb24gb2YgeW91ciBmcmVlZG9tLCBidXQgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCBub3QgdG8gZm9sbG93IGlmIHRoZXkgYmUgdGhlIGFkdmlzZXJzIG9mIHNsYXZlcnkuIDwvdHJhbnNsYXRpb24+"
translation['10.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFzdGx5IChsZXQgbWUgYXQgbGFzdCBzYXkgb25lIHRydWUgd29yZCwgb25lIHdvcmQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmISnigJRpZiB0aGUgaW5jbGluYXRpb25zIG9mIHRoaXMgb3JkZXIgYXJlIGdvdmVybmVkIGJ5IHRoZSBub2Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgdmV0ZXJhbnMsIGFuZCBpZiBhbGwgb3VyIHdvcmRzIGFuZCBhY3Rpb25zIGFyZSB0byBiZSByZWZlcnJlZCB0byB0aGVpciB3aWxsLAogICAgICAgICAgICAgICAgICAgIGRlYXRoIGlzIHdoYXQgd2Ugc2hvdWxkIHdpc2ggZm9yLCB3aGljaCBoYXMgYWx3YXlzLCBpbiB0aGUgbWluZHMgb2YgUm9tYW4KICAgICAgICAgICAgICAgICAgICBjaXRpemVucywgYmVlbiBwcmVmZXJhYmxlIHRvIHNsYXZlcnkuIEFsbCBzbGF2ZXJ5IGlzIG1pc2VyYWJsZTsgYnV0IHNvbWUgbWF5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHVuYXZvaWRhYmxlLiBEbyB5b3UgdGhpbmssIHRoZW4sIHRoYXQgdGhlcmUgaXMgbmV2ZXIgdG8gYmUgYSBiZWdpbm5pbmcKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgZW5kZWF2b3JzIHRvIHJlY292ZXIgb3VyIGZyZWVkb20/IE9yLCB3aGVuIHdlIHdvdWxkIG5vdCBiZWFyIHRoYXQgZm9ydHVuZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdhcyB1bmF2b2lkYWJsZSwgYW5kIHdoaWNoIHNlZW1lZCBhbG1vc3QgYXMgaWYgYXBwb2ludGVkIGJ5IGRlc3RpbnksIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgd2UgdG9sZXJhdGUgdGhlIHZvbHVudGFyeSBib25kYWdlISBBbGwgSXRhbHkgaXMgYnVybmluZyB3aXRoIGEgZGVzaXJlIGZvcgogICAgICAgICAgICAgICAgICAgIGZyZWVkb20uIFRoZSBjaXR5IGNhbiBub3QgZW5kdXJlIHNsYXZlcnkgYW55IGxvbmdlciBXZSBoYXZlIGdpdmVuIHRoaXMgd2FybGlrZQogICAgICAgICAgICAgICAgICAgIGF0dGlyZSBhbmQgdGhlc2UgYXJtcyB0byB0aGUgUm9tYW4gcGVvcGxlIG11Y2ggbGF0ZXIgdGhhbiB0aGV5IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIG9mIHVzIGJ5IHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['10.10.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGhhdmUsIGluZGVlZCwgdW5kZXJ0YWtlbiBvdXIgcHJlc2VudCBjb3Vyc2Ugb2YgYWN0aW9uIHdpdGggYSBncmVhdCBhbmQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBob3BlIG9mIGxpYmVydHkuIEJ1dCBldmVuIGlmIEkgYWxsb3cgdGhhdCB0aGUgZXZlbnRzIG9mIHdhciBhcmUKICAgICAgICAgICAgICAgICAgICB1bmNlcnRhaW4sIGFuZCB0aGF0IHRoZSBjaGFuY2VzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMDkwNTgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIwOTA1ODMiPk1hcnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhcmUgY29tbW9uIHRvIGJvdGggc2lkZXMsIHN0aWxsIGl0IGlzIHdvcnRoIHdoaWxlIHRvIGZpZ2h0IGZvciBmcmVlZG9tIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBlcmlsIG9mIG9uZSdzIGxpZmUuIEZvciBsaWZlIGRvZXMgbm90IGNvbnNpc3Qgd2hvbGx5IGluIGJyZWF0aGluZzsgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBsaXRlcmFsbHkgbm8gbGlmZSBhdCBhbGwgZm9yIG9uZSB3aG8gaXMgYSBzbGF2ZS4gQWxsIG5hdGlvbnMgY2FuIGVuZHVyZSBzbGF2ZXJ5LgogICAgICAgICAgICAgICAgICAgIE91ciBzdGF0ZSBjYW4gbm90LiBOb3IgaXMgdGhlcmUgYW55IG90aGVyIHJlYXNvbiBmb3IgdGhpcywgZXhjZXB0IHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBuYXRpb25zIHNocmluayBmcm9tIHRvaWwgYW5kIHBhaW4sIGFuZCBhcmUgd2lsbGluZyB0byBlbmR1cmUgYW55IHRoaW5nIHNvIGxvbmcKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IG1heSBiZSBmcmVlIGZyb20gdGhvc2UgZXZpbHM7IGJ1dCB3ZSBoYXZlIGJlZW4gdHJhaW5lZCBhbmQgYnJlZCB1cCBieQogICAgICAgICAgICAgICAgICAgIG91ciBmb3JlZmF0aGVycyBpbiBzdWNoIGEgbWFubmVyLCBhcyB0byBtZWFzdXJlIGFsbCBvdXIgZGVzaWducyBhbmQgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMgYnkgdGhlIHN0YW5kYXJkIG9mIGRpZ25pdHkgYW5kIHZpcnR1ZS4gVGhlIHJlY292ZXJ5IG9mIGZyZWVkb20gaXMgc28KICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBhIHRoaW5nIHRoYXQgd2UgbXVzdCBub3Qgc2h1biBldmVuIGRlYXRoIHdoZW4gc2Vla2luZyB0byByZWNvdmVyIGl0LgogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBpbW1vcnRhbGl0eSB3ZXJlIHRvIGJlIHRoZSByZXN1bHQgb2Ygb3VyIGF2b2lkYW5jZSBvZiBwcmVzZW50IGRhbmdlciwKICAgICAgICAgICAgICAgICAgICBzdGlsbCBzbGF2ZXJ5IHdvdWxkIGFwcGVhciBzdGlsbCBtb3JlIHdvcnRoeSBvZiBiZWluZyBhdm9pZGVkLCBpbiBwcm9wb3J0aW9uIGFzCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgb2YgbG9uZ2VyIGR1cmF0aW9uLiBCdXQgYXMgYWxsIHNvcnRzIG9mIGRlYXRoIHN1cnJvdW5kIHVzIG9uIGFsbCBzaWRlcwogICAgICAgICAgICAgICAgICAgIG5pZ2h0IGFuZCBkYXksIGl0IGRvZXMgbm90IGJlY29tZSBhIG1hbiwgYW5kIGxlYXN0IG9mIGFsbCBhIFJvbWFuLCB0byBoZXNpdGF0ZQogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgdXAgdG8gaGlzIGNvdW50cnkgdGhhdCBicmVhdGggd2hpY2ggaGUgb3dlcyB0byBuYXR1cmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwyMDkwNTgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDIwOTA1ODMiPk1hcnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhcmUgY29tbW9uIHRvIGJvdGggc2lkZXMsIHN0aWxsIGl0IGlzIHdvcnRoIHdoaWxlIHRvIGZpZ2h0IGZvciBmcmVlZG9tIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBlcmlsIG9mIG9uZSdzIGxpZmUuIEZvciBsaWZlIGRvZXMgbm90IGNvbnNpc3Qgd2hvbGx5IGluIGJyZWF0aGluZzsgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBsaXRlcmFsbHkgbm8gbGlmZSBhdCBhbGwgZm9yIG9uZSB3aG8gaXMgYSBzbGF2ZS4gQWxsIG5hdGlvbnMgY2FuIGVuZHVyZSBzbGF2ZXJ5LgogICAgICAgICAgICAgICAgICAgIE91ciBzdGF0ZSBjYW4gbm90LiBOb3IgaXMgdGhlcmUgYW55IG90aGVyIHJlYXNvbiBmb3IgdGhpcywgZXhjZXB0IHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBuYXRpb25zIHNocmluayBmcm9tIHRvaWwgYW5kIHBhaW4sIGFuZCBhcmUgd2lsbGluZyB0byBlbmR1cmUgYW55IHRoaW5nIHNvIGxvbmcKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IG1heSBiZSBmcmVlIGZyb20gdGhvc2UgZXZpbHM7IGJ1dCB3ZSBoYXZlIGJlZW4gdHJhaW5lZCBhbmQgYnJlZCB1cCBieQogICAgICAgICAgICAgICAgICAgIG91ciBmb3JlZmF0aGVycyBpbiBzdWNoIGEgbWFubmVyLCBhcyB0byBtZWFzdXJlIGFsbCBvdXIgZGVzaWducyBhbmQgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMgYnkgdGhlIHN0YW5kYXJkIG9mIGRpZ25pdHkgYW5kIHZpcnR1ZS4gVGhlIHJlY292ZXJ5IG9mIGZyZWVkb20gaXMgc28KICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBhIHRoaW5nIHRoYXQgd2UgbXVzdCBub3Qgc2h1biBldmVuIGRlYXRoIHdoZW4gc2Vla2luZyB0byByZWNvdmVyIGl0LgogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBpbW1vcnRhbGl0eSB3ZXJlIHRvIGJlIHRoZSByZXN1bHQgb2Ygb3VyIGF2b2lkYW5jZSBvZiBwcmVzZW50IGRhbmdlciwKICAgICAgICAgICAgICAgICAgICBzdGlsbCBzbGF2ZXJ5IHdvdWxkIGFwcGVhciBzdGlsbCBtb3JlIHdvcnRoeSBvZiBiZWluZyBhdm9pZGVkLCBpbiBwcm9wb3J0aW9uIGFzCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgb2YgbG9uZ2VyIGR1cmF0aW9uLiBCdXQgYXMgYWxsIHNvcnRzIG9mIGRlYXRoIHN1cnJvdW5kIHVzIG9uIGFsbCBzaWRlcwogICAgICAgICAgICAgICAgICAgIG5pZ2h0IGFuZCBkYXksIGl0IGRvZXMgbm90IGJlY29tZSBhIG1hbiwgYW5kIGxlYXN0IG9mIGFsbCBhIFJvbWFuLCB0byBoZXNpdGF0ZQogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgdXAgdG8gaGlzIGNvdW50cnkgdGhhdCBicmVhdGggd2hpY2ggaGUgb3dlcyB0byBuYXR1cmUuIDwvdHJhbnNsYXRpb24+"
translation['10.10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVuIGZsb2NrIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzIHRvIGV4dGluZ3Vpc2ggYSBnZW5lcmFsIGNvbmZsYWdyYXRpb24uIFRoZQogICAgICAgICAgICAgICAgICAgIHZldGVyYW5zIHdlcmUgdGhlIGZpcnN0IHRvIGZvbGxvdyB0aGUgYXV0aG9yaXR5IG9mIENhZXNhciBhbmQgdG8gcmVwZWwgdGhlCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdHMgb2YgQW50b25pdXM7IGFmdGVyd2FyZCB0aGUgTWFydGlhbCBsZWdpb24gY2hlY2tlZCBoaXMgZnJlbnp5OyB0aGUKICAgICAgICAgICAgICAgICAgICBmb3VydGggbGVnaW9uIGNydXNoZWQgaXQuIEJlaW5nIHRodXMgY29uZGVtbmVkIGJ5IGhpcyBvd24gbGVnaW9ucywgaGUgYnVyc3QgaW50bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHdoaWNoIGhlIGtuZXcgdG8gYmUgYWR2ZXJzZQogICAgICAgICAgICAgICAgICAgIGFuZCBob3N0aWxlIHRvIGhpbSBib3RoIGluIHdvcmQgYW5kIGRlZWQuIFRoZSBhcm1pZXMgb2YgQXVsdXMgSGlydGl1cyBhbmQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgcHVyc3VlZCBoaW0sIGFuZCBhZnRlcndhcmQgdGhlIGxldmllcyBvZiBQYW5zYSByb3VzZWQgdGhlIGNpdHkgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gSGUgaXMgdGhlIG9uZSBlbmVteSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBtZW4uIEFsdGhvdWdoIGhlIGhhcyB3aXRoIGhpbSBMdWNpdXMgaGlzIGJyb3RoZXIsIGEgY2l0aXplbiB2ZXJ5IG11Y2ggYmVsb3ZlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBSb21hbiBwZW9wbGUsIHRoZSByZWdyZXQgZm9yIHdob3NlIGFic2VuY2UgdGhlIGNpdHkgaXMgdW5hYmxlIHRvIGVuZHVyZSBhbnkKICAgICAgICAgICAgICAgICAgICBsb25nZXIhIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBjYW4gYmUgbW9yZSBmb3VsIHRoYW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGJlYXN0PyB3aGF0IG1vcmUgc2F2YWdlPyB3aG8gYXBwZWFycyBib3JuIGZvciB0aGUgZXhwcmVzcyBwdXJwb3NlIG9mIHByZXZlbnRpbmcKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMgZnJvbSBiZWluZyB0aGUgYmFzZXN0IG9mIGFsbCBtb3J0YWxzLiBUaGV5IGhhdmUgd2l0aCB0aGVtCiAgICAgICAgICAgICAgICAgICAgVHJlYmVsbGl1cywgd2hvLCBub3cgdGhhdCBhbGwgZGVidHMgYXJlIGNhbmNlbGVkLCBpcyBiZWNvbWUgcmVjb25jaWxlZCB0byB0aGVtOwogICAgICAgICAgICAgICAgICAgIGFuZCBUaXR1cyBQbGFuY3VzLCBhbmQgb3RoZXIgbGlrZSB0aGVtOyB3aG8gYXJlIHN0cml2aW5nIHdpdGggYWxsIHRoZWlyIGhlYXJ0cywKICAgICAgICAgICAgICAgICAgICBhbmQgd2hvc2Ugc29sZSBvYmplY3QgaXMgdG8gYXBwZWFyIHRvIGhhdmUgYmVlbiByZXN0b3JlZCBhZ2FpbnN0IHRoZSB3aWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiBTYXhhIGFuZCBDYXBobywgdGhlbXNlbHZlcyBydXN0aWMgYW5kIGNsb3duaXNoIG1lbiwgbWVuIHdobyBuZXZlciBoYXZlCiAgICAgICAgICAgICAgICAgICAgc2VlbiBhbmQgd2hvIG5ldmVyIHdpc2ggdG8gc2VlIHRoaXMgcmVwdWJsaWMgZmlybWx5IGVzdGFibGlzaGVkLCBhcmUgdGFtcGVyaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaWdub3JhbnQgY2xhc3NlczsgbWVuIHdobyBhcmUgbm90IHVwaG9sZGluZyB0aGUgYWN0cyBvZiBDYWVzYXIgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb2YgQW50b25pdXM7IHdobyBhcmUgbGVkIGF3YXkgYnkgdGhlIHVubGltaXRlZCBvY2N1cGF0aW9uIG9mIHRoZSBDYW1wYW5pYW4KICAgICAgICAgICAgICAgICAgICBkaXN0cmljdDsgYW5kIHdobyBJIG1hcnZlbCBhcmUgbm90IHNvbWV3aGF0IGFzaGFtZWQgd2hlbiB0aGV5IHNlZSB0aGF0IHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFjdG9ycyBhbmQgYWN0cmVzc2VzIGZvciB0aGVpciBuZWlnaGJvcnMuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+IHdoaWNoIGhlIGtuZXcgdG8gYmUgYWR2ZXJzZQogICAgICAgICAgICAgICAgICAgIGFuZCBob3N0aWxlIHRvIGhpbSBib3RoIGluIHdvcmQgYW5kIGRlZWQuIFRoZSBhcm1pZXMgb2YgQXVsdXMgSGlydGl1cyBhbmQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgcHVyc3VlZCBoaW0sIGFuZCBhZnRlcndhcmQgdGhlIGxldmllcyBvZiBQYW5zYSByb3VzZWQgdGhlIGNpdHkgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gSGUgaXMgdGhlIG9uZSBlbmVteSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBtZW4uIEFsdGhvdWdoIGhlIGhhcyB3aXRoIGhpbSBMdWNpdXMgaGlzIGJyb3RoZXIsIGEgY2l0aXplbiB2ZXJ5IG11Y2ggYmVsb3ZlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBSb21hbiBwZW9wbGUsIHRoZSByZWdyZXQgZm9yIHdob3NlIGFic2VuY2UgdGhlIGNpdHkgaXMgdW5hYmxlIHRvIGVuZHVyZSBhbnkKICAgICAgICAgICAgICAgICAgICBsb25nZXIhIDwvdHJhbnNsYXRpb24+"
translation['10.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBjYW4gYmUgbW9yZSBmb3VsIHRoYW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGJlYXN0PyB3aGF0IG1vcmUgc2F2YWdlPyB3aG8gYXBwZWFycyBib3JuIGZvciB0aGUgZXhwcmVzcyBwdXJwb3NlIG9mIHByZXZlbnRpbmcKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXMgZnJvbSBiZWluZyB0aGUgYmFzZXN0IG9mIGFsbCBtb3J0YWxzLiBUaGV5IGhhdmUgd2l0aCB0aGVtCiAgICAgICAgICAgICAgICAgICAgVHJlYmVsbGl1cywgd2hvLCBub3cgdGhhdCBhbGwgZGVidHMgYXJlIGNhbmNlbGVkLCBpcyBiZWNvbWUgcmVjb25jaWxlZCB0byB0aGVtOwogICAgICAgICAgICAgICAgICAgIGFuZCBUaXR1cyBQbGFuY3VzLCBhbmQgb3RoZXIgbGlrZSB0aGVtOyB3aG8gYXJlIHN0cml2aW5nIHdpdGggYWxsIHRoZWlyIGhlYXJ0cywKICAgICAgICAgICAgICAgICAgICBhbmQgd2hvc2Ugc29sZSBvYmplY3QgaXMgdG8gYXBwZWFyIHRvIGhhdmUgYmVlbiByZXN0b3JlZCBhZ2FpbnN0IHRoZSB3aWxsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiBTYXhhIGFuZCBDYXBobywgdGhlbXNlbHZlcyBydXN0aWMgYW5kIGNsb3duaXNoIG1lbiwgbWVuIHdobyBuZXZlciBoYXZlCiAgICAgICAgICAgICAgICAgICAgc2VlbiBhbmQgd2hvIG5ldmVyIHdpc2ggdG8gc2VlIHRoaXMgcmVwdWJsaWMgZmlybWx5IGVzdGFibGlzaGVkLCBhcmUgdGFtcGVyaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaWdub3JhbnQgY2xhc3NlczsgbWVuIHdobyBhcmUgbm90IHVwaG9sZGluZyB0aGUgYWN0cyBvZiBDYWVzYXIgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb2YgQW50b25pdXM7IHdobyBhcmUgbGVkIGF3YXkgYnkgdGhlIHVubGltaXRlZCBvY2N1cGF0aW9uIG9mIHRoZSBDYW1wYW5pYW4KICAgICAgICAgICAgICAgICAgICBkaXN0cmljdDsgYW5kIHdobyBJIG1hcnZlbCBhcmUgbm90IHNvbWV3aGF0IGFzaGFtZWQgd2hlbiB0aGV5IHNlZSB0aGF0IHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFjdG9ycyBhbmQgYWN0cmVzc2VzIGZvciB0aGVpciBuZWlnaGJvcnMuIDwvdHJhbnNsYXRpb24+"
translation['10.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['10.11.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoeSB0aGVuIHNob3VsZCB3ZSBiZSBkaXNwbGVhc2VkIHRoYXQgdGhlIGFybXkgb2YgTWFyY3VzIEJydXR1cyBpcyB0aHJvd24gaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSBzY2FsZSB0byBhc3Npc3QgdXMgaW4gb3ZlcndoZWxtaW5nIHRoZXNlIHBlc3RzIG9mIHRoZSBjb21tb253ZWFsdGg/IEl0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGFybXksIEkgc3VwcG9zZSwgb2YgYW4gaW50ZW1wZXJhdGUgYW5kIHR1cmJ1bGVudCBtYW4uIEkgYW0gbW9yZSBhZnJhaWQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgYmVpbmcgdG9vIHBhdGllbnQ7IGFsdGhvdWdoIGluIGFsbCB0aGUgY291bnNlbHMgYW5kIGFjdGlvbnMgb2YgdGhhdCBtYW4KICAgICAgICAgICAgICAgICAgICB0aGVyZSBuZXZlciBoYXMgYmVlbiBhbnkgdGhpbmcgZWl0aGVyIHRvbyBtdWNoIG9yIHRvbyBsaXR0bGUuIFRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9ucyBvZiBNYXJjdXMgQnJ1dHVzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGUgd2hvbGUgb2YgaGlzIHRob3VnaHRzLAogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBvZiBoaXMgaWRlYXMsIGFyZSBkaXJlY3RlZCB0b3dhcmQgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmVlZG9tIG9mIHRoZSBSb21hbiBwZW9wbGUuIFRoZXNlIGFyZSB0aGUgb2JqZWN0cyB3aGljaCBoZSBwcm9wb3NlcyB0byBoaW1zZWxmOwogICAgICAgICAgICAgICAgICAgIHRoZXNlIGFyZSB3aGF0IGhlIGRlc2lyZXMgdG8gdXBob2xkLiBIZSBoYXMgdHJpZWQgd2hhdCBoZSBjb3VsZCBkbyBieSBwYXRpZW5jZTsKICAgICAgICAgICAgICAgICAgICBhcyBoZSBkaWQgbm90aGluZywgaGUgaGFzIHRob3VnaHQgaXQgbmVjZXNzYXJ5IHRvIGVuY291bnRlciBmb3JjZSBieSBmb3JjZS4gQW5kLAogICAgICAgICAgICAgICAgICAgIE8gY29uc2NyaXB0IGZhdGhlcnMsIHlvdSBvdWdodCBhdCB0aGlzIHRpbWUgdG8gZ3JhbnQgaGltIHRoZSBzYW1lIGhvbm9ycyB3aGljaAogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBuaW5ldGVlbnRoIG9mIERlY2VtYmVyIHlvdSBjb25mZXJyZWQgYnkgbXkgYWR2aWNlIG9uIERlY2ltdXMgQnJ1dHVzIGFuZAogICAgICAgICAgICAgICAgICAgIENhaXVzIENhZXNhciwgd2hvc2UgZGVzaWducyBhbmQgY29uZHVjdCBpbiByZWdhcmQgdG8gdGhlIHJlcHVibGljLCB3aGlsZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYWxzbyB3ZXJlIGJ1dCBwcml2YXRlIGluZGl2aWR1YWxzLCB3YXMgYXBwcm92ZWQgb2YgYW5kIHByYWlzZWQgYnkgeW91cgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgeW91IG91Z2h0IHRvIGRvIHRoZSBzYW1lIG5vdwogICAgICAgICAgICAgICAgICAgIHdpdGggcmVzcGVjdCB0byBNYXJjdXMgQnJ1dHVzLCBieSB3aG9tIGFuIHVuaG9wZWQgZm9yIGFuZCBzdWRkZW4gcmVpbmZvcmNlbWVudAogICAgICAgICAgICAgICAgICAgIG9mIGxlZ2lvbnMgYW5kIGNhdmFscnksIGFuZCBudW1lcm91cyBhbmQgdHJ1c3R5IGJhbmRzIG9mIGFsbGllcywgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSByZXB1YmxpYy4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.11.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHlvdSBvdWdodCB0byBkbyB0aGUgc2FtZSBub3cKICAgICAgICAgICAgICAgICAgICB3aXRoIHJlc3BlY3QgdG8gTWFyY3VzIEJydXR1cywgYnkgd2hvbSBhbiB1bmhvcGVkIGZvciBhbmQgc3VkZGVuIHJlaW5mb3JjZW1lbnQKICAgICAgICAgICAgICAgICAgICBvZiBsZWdpb25zIGFuZCBjYXZhbHJ5LCBhbmQgbnVtZXJvdXMgYW5kIHRydXN0eSBiYW5kcyBvZiBhbGxpZXMsIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkIGZvciB0aGUgcmVwdWJsaWMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UXVpbnR1cyBIb3J0ZW5zaXVzIGFsc28gb3VnaHQgdG8gaGF2ZSBhIHNoYXJlIG9mIHlvdXIgcHJhaXNlLCB3aG8sIGJlaW5nIGdvdmVybm9yCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBqb2luZWQgQnJ1dHVzIGFzIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGZhaXRoZnVsIGFuZCB1bnRpcmluZyBhc3Npc3RhbnQgaW4gY29sbGVjdGluZyB0aGF0IGFybXkuIEZvciBJIHRoaW5rIHRoYXQgYQogICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlIG1vdGlvbiBvdWdodCB0byBiZSBtYWRlIHJlc3BlY3RpbmcgTWFyY3VzIEFwcHVsZWl1cywgdG8gd2hvbSBCcnV0dXMKICAgICAgICAgICAgICAgICAgICBiZWFycyB3aXRuZXNzIGluIGhpcyBsZXR0ZXJzIHRoYXQgaGUgaGFzIGJlZW4gYSBwcmltZSBhc3Npc3RhbnQgdG8gaGltIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGVuZGVhdm9ycyB0byBnZXQgdG9nZXRoZXIgYW5kIGVxdWlwIGhpcyBhcm15LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgQW5kIHNpbmNlIHRoaXMgaXMgdGhlIGNhc2UsIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgam9pbmVkIEJydXR1cyBhcyBhIG1vc3QKICAgICAgICAgICAgICAgICAgICBmYWl0aGZ1bCBhbmQgdW50aXJpbmcgYXNzaXN0YW50IGluIGNvbGxlY3RpbmcgdGhhdCBhcm15LiBGb3IgSSB0aGluayB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZSBtb3Rpb24gb3VnaHQgdG8gYmUgbWFkZSByZXNwZWN0aW5nIE1hcmN1cyBBcHB1bGVpdXMsIHRvIHdob20gQnJ1dHVzCiAgICAgICAgICAgICAgICAgICAgYmVhcnMgd2l0bmVzcyBpbiBoaXMgbGV0dGVycyB0aGF0IGhlIGhhcyBiZWVuIGEgcHJpbWUgYXNzaXN0YW50IHRvIGhpbSBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvcnMgdG8gZ2V0IHRvZ2V0aGVyIGFuZCBlcXVpcCBoaXMgYXJteS4gPC90cmFuc2xhdGlvbj4="
translation['10.11.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBbmQgc2luY2UgdGhpcyBpcyB0aGUgY2FzZSwgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj7igJxBcyBDYWl1cyBQYW5zYSB0aGUgY29uc3VsIGhhcyBhZGRyZXNzZWQgdG8gdXMgYSBzcGVlY2ggY29uY2VybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBsZXR0ZXJzIHdoaWNoIGhhdmUgYmVlbiByZWNlaXZlZCBmcm9tIFF1aW50dXMgQ2FlcGlvIEJydXR1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+QnJ1dHVzIGhhZCBiZWVuIGFkb3B0ZWQgYnkgaGlzIG1hdGVybmFsIHVuY2xlIFF1aW50dXMgU2VydmlsaXVzIENhZXBpbzsgc28KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgbGVnYWwgZGVzaWduYXRpb24gd2FzIHdoYXQgaXMgZ2l2ZW4gaW4gdGhlIHRleHQgbm93LCBhcyBDaWNlcm8gaXMKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zaW5nIGEgZm9ybWFsIHZvdGXigJR0aG91Z2ggYXQgYWxsIG90aGVyIHRpbWVzIHdlIHNlZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxzIGhpbSBNYXJjdXMgQnJ1dHVzLjwvbm90ZT4gcHJvY29uc3VsLCBhbmQgaGF2ZSBiZWVuIHJlYWQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5LCBJIGdpdmUgbXkgdm90ZSBpbiB0aGlzIG1hdHRlciB0aHVzOiA8L3A+CgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+QnJ1dHVzIGhhZCBiZWVuIGFkb3B0ZWQgYnkgaGlzIG1hdGVybmFsIHVuY2xlIFF1aW50dXMgU2VydmlsaXVzIENhZXBpbzsgc28KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgbGVnYWwgZGVzaWduYXRpb24gd2FzIHdoYXQgaXMgZ2l2ZW4gaW4gdGhlIHRleHQgbm93LCBhcyBDaWNlcm8gaXMKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zaW5nIGEgZm9ybWFsIHZvdGXigJR0aG91Z2ggYXQgYWxsIG90aGVyIHRpbWVzIHdlIHNlZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxzIGhpbSBNYXJjdXMgQnJ1dHVzLjwvbm90ZT4gcHJvY29uc3VsLCBhbmQgaGF2ZSBiZWVuIHJlYWQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5LCBJIGdpdmUgbXkgdm90ZSBpbiB0aGlzIG1hdHRlciB0aHVzOiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPuKAnFNpbmNlLCBieSB0aGUgZXhlcnRpb25zIGFuZCB3aXNkb20gYW5kIGluZHVzdHJ5IGFuZCB2YWxvciBvZiBRdWludHVzCiAgICAgICAgICAgICAgICAgICAgQ2FlcGlvIEJydXR1cywgcHJvY29uc3VsLCBhdCBhIG1vc3QgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpY3VtPC9wbGFjZU5hbWU+LCBhbmQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgYW5kIHRoZSBsZWdpb25zIGFuZCBhcm1pZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgaGF2ZSBiZWVuIHByZXNlcnZlZCBpbiBvYmVkaWVuY2UgdG8gdGhlIGNvbnN1bHMgYW5kIHNlbmF0ZSBhbmQgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+OyBRdWludHVzIENhZXBpbyBCcnV0dXMsCiAgICAgICAgICAgICAgICAgICAgcHJvY29uc3VsLCBoYXMgYWN0ZWQgd2VsbCwgYW5kIGluIGEgbWFubmVyIGFkdmFudGFnZW91cyB0byB0aGUgcmVwdWJsaWMsIGFuZAogICAgICAgICAgICAgICAgICAgIHN1aXRhYmxlIHRvIGhpcyBvd24gZGlnbml0eSBhbmQgdG8gdGhhdCBvZiBoaXMgYW5jZXN0b3JzLCBhbmQgdG8gdGhlIHByaW5jaXBsZXMKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gd2hpY2ggYWxvbmUgdGhlIGFmZmFpcnMgb2YgdGhlIHJlcHVibGljIGNhbiBiZSBwcm9wZXJseSBtYW5hZ2VkOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGNvbmR1Y3QgaXMgYW5kIHdpbGwgYmUgZ3JhdGVmdWwgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY4MyI+SWxseXJpY3VtPC9wbGFjZU5hbWU+LCBhbmQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgYW5kIHRoZSBsZWdpb25zIGFuZCBhcm1pZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgaGF2ZSBiZWVuIHByZXNlcnZlZCBpbiBvYmVkaWVuY2UgdG8gdGhlIGNvbnN1bHMgYW5kIHNlbmF0ZSBhbmQgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+OyBRdWludHVzIENhZXBpbyBCcnV0dXMsCiAgICAgICAgICAgICAgICAgICAgcHJvY29uc3VsLCBoYXMgYWN0ZWQgd2VsbCwgYW5kIGluIGEgbWFubmVyIGFkdmFudGFnZW91cyB0byB0aGUgcmVwdWJsaWMsIGFuZAogICAgICAgICAgICAgICAgICAgIHN1aXRhYmxlIHRvIGhpcyBvd24gZGlnbml0eSBhbmQgdG8gdGhhdCBvZiBoaXMgYW5jZXN0b3JzLCBhbmQgdG8gdGhlIHByaW5jaXBsZXMKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gd2hpY2ggYWxvbmUgdGhlIGFmZmFpcnMgb2YgdGhlIHJlcHVibGljIGNhbiBiZSBwcm9wZXJseSBtYW5hZ2VkOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGNvbmR1Y3QgaXMgYW5kIHdpbGwgYmUgZ3JhdGVmdWwgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['10.11.26'] = ""
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbWlkIHRoZSBncmVhdCBncmllZiwgTyBjb25zY3JpcHQgZmF0aGVycywgb3IgcmF0aGVyIG1pc2VyeSB3aGljaCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgYXQgdGhlIGNydWVsIGFuZCBtZWxhbmNob2x5IGRlYXRoIG9mIENhaXVzIFRyZWJvbml1cywgYSBtb3N0IHZpcnR1b3VzCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBhbmQgYSBtb3N0IG1vZGVyYXRlIG1hbiwgdGhlcmUgaXMgc3RpbGwgYSBjaXJjdW1zdGFuY2Ugb3IgdHdvIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNhc2Ugd2hpY2ggSSB0aGluayB3aWxsIHR1cm4gb3V0IGJlbmVmaWNpYWwgdG8gdGhlIHJlcHVibGljLiBGb3Igd2UgaGF2ZSBub3cKICAgICAgICAgICAgICAgICAgICB0aG9yb3VnaGx5IHNlZW4gd2hhdCBncmVhdCBiYXJiYXJpdHkgdGhlc2UgbWVuIGFyZSBjYXBhYmxlIG9mIHdobyBoYXZlIHRha2VuIHVwCiAgICAgICAgICAgICAgICAgICAgd2lja2VkIGFybXMgYWdhaW5zdCB0aGVpciBjb3VudHJ5LiBGb3IgdGhlc2UgdHdvLCBEb2xhYmVsbGEgYW5kIEFudG9uaXVzLCBhcmUKICAgICAgICAgICAgICAgICAgICB0aGUgdmVyeSBibGFja2VzdCBhbmQgZm91bGVzdCBtb25zdGVycyB0aGF0IGhhdmUgZXZlciBsaXZlZCBzaW5jZSB0aGUgYmlydGggb2YKICAgICAgICAgICAgICAgICAgICBtYW47IG9uZSBvZiB3aG9tIGhhcyBub3cgZG9uZSB3aGF0IGhlIHdpc2hlZDsgYW5kIGFzIHRvIHRoZSBvdGhlciwgaXQgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBwbGFpbmx5IHNob3duIHdoYXQgaGUgaW50ZW5kZWQuIEx1Y2l1cy4gQ2lubmEgd2FzIGNydWVsOyBDYWl1cyBNYXJpdXMgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5yZWxlbnRpbmcgaW4gaGlzIGFuZ2VyOyBMdWNpdXMgU3VsbGEgd2FzIGZpZXJjZTsgYnV0IHN0aWxsIHRoZSBpbmh1bWFuaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiB0aGVzZSBtZW4gZXZlciBXZW50IGJleW9uZCBkZWF0aDsgYW5kIHRoYXQgcHVuaXNobWVudCBpbmRlZWQgd2FzIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICB0b28gY3J1ZWwgdG8gYmUgaW5mbGljdGVkIG9uIGNpdGl6ZW5zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZXJlIG5vdyB5b3UgaGF2ZSBhIHBhaXIgZXF1YWwgaW4gd2lja2VkbmVzczsgdW5wcmVjZWRlbnRlZCwgdW5oZWFyZCBvZiwgc2F2YWdlLAogICAgICAgICAgICAgICAgICAgIGJhcmJhcm91cy4gVGhlcmVmb3JlIHRob3NlIG1lbiB3aG9zZSB2ZWhlbWVudCBtdXR1YWwgaGF0cmVkIGFuZCBxdWFycmVsIHlvdQogICAgICAgICAgICAgICAgICAgIHJlY29sbGVjdCBhIHNob3J0IHRpbWUgYWdvLCBoYXZlIG5vdyBiZWVuIHVuaXRlZCBpbiBzaW5ndWxhciB1bmFuaW1pdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgbXV0dWFsIGF0dGFjaG1lbnQgYnkgdGhlIHNpbmd1bGFyaXR5IG9mIHRoZWlyIHdpY2tlZCBuYXR1cmVzIGFuZCBtb3N0IGluZmFtb3VzCiAgICAgICAgICAgICAgICAgICAgbGl2ZXMuIFRoZXJlZm9yZSwgdGhhdCB3aGljaCBEb2xhYmVsbGEgaGFzIG5vdyBkb25lIGluIGEgY2FzZSBpbiB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGUgcG93ZXIsIEFudG9uaXVzIHRocmVhdGVucyBtYW55IHdpdGguIEJ1dCB0aGUgZm9ybWVyLCBhcyBoZSB3YXMgYSBsb25nIHdheQogICAgICAgICAgICAgICAgICAgIGZyb20gb3VyIGNvdW5zZWxzIGFuZCBhcm1pZXMsIGFuZCBhcyBoZSB3YXMgbm90IHlldCBhd2FyZSB0aGF0IHRoZSBzZW5hdGUgaGFkCiAgICAgICAgICAgICAgICAgICAgdW5pdGVkIHdpdGggdGhlIFJvbWFuIHBlb3BsZSwgcmVseWluZyBvbiB0aGUgZm9yY2VzIG9mIEFudG9uaXVzLCBoYXMgY29tbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2lja2VkIGFjdGlvbnMgd2hpY2ggaGUgdGhvdWdodCB3ZXJlIGFscmVhZHkgcHV0IGluIHByYWN0aWNlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSBoaXMgYWNjb21wbGljZSBpbiB3aWNrZWRuZXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBlbHNlIHRoZW4gZG8geW91IHRoaW5rIHRoYXQgdGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICBpcyBjb250cml2aW5nIG9yIHdpc2hpbmcsIG9yIHdoYXQgb3RoZXIgb2JqZWN0IGRvIHlvdSB0aGluayBoZSBoYXMgaW4gdGhlIHdhcj8KICAgICAgICAgICAgICAgICAgICBBbGwgb2YgdXMgd2hvIGhhdmUgZWl0aGVyIGVudGVydGFpbmVkIHRoZSB0aG91Z2h0cyBvZiBmcmVlbWVuIGNvbmNlcm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMsIG9yIGhhdmUgZ2l2ZW4gdXR0ZXJhbmNlIHRvIG9waW5pb25zIHdvcnRoeSBvZiBvdXJzZWx2ZXMsIGhlIGRlY2lkZXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBub3QgbWVyZWx5IG9wcG9zZWQgdG8gaGltLCBidXQgYWN0dWFsIGVuZW1pZXMuIEFuZCBoZSBwbGFucyBpbmZsaWN0aW5nCiAgICAgICAgICAgICAgICAgICAgYml0dGVyZXIgcHVuaXNobWVudHMgb24gdXMgdGhhbiBvbiB0aGUgZW5lbXk7IGhlIHRoaW5rcyBkZWF0aCBhIHB1bmlzaG1lbnQKICAgICAgICAgICAgICAgICAgICBpbXBvc2VkIGJ5IG5hdHVyZSwgYnV0IHRvcm1lbnRzIGFuZCB0b3J0dXJlcyB0aGUgcHJvcGVyIGluZmxpY3Rpb25zIG9mIGFuZ2VyLgogICAgICAgICAgICAgICAgICAgIFdoYXQgc29ydCBvZiBlbmVteSB0aGVuIG11c3Qgd2UgY29uc2lkZXIgdGhhdCBtYW4gd2hvLCBpZiBoZSBiZSB2aWN0b3Jpb3VzLAogICAgICAgICAgICAgICAgICAgIHJlcXVpcmVzIG9uZSB0byB0aGluayBkZWF0aCBhIGtpbmRuZXNzIGlmIGhlIHNwYXJlcyBvbmUgdGhlIHRvcnR1cmVzIHdpdGggd2hpY2gKICAgICAgICAgICAgICAgICAgICBpdCBpcyBpbiBoaXMgcG93ZXIgdG8gYWNjb21wYW55IGl0PyA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGJ5IGhpcyBhY2NvbXBsaWNlIGluIHdpY2tlZG5lc3MuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGVsc2UgdGhlbiBkbyB5b3UgdGhpbmsgdGhhdCB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIGlzIGNvbnRyaXZpbmcgb3Igd2lzaGluZywgb3Igd2hhdCBvdGhlciBvYmplY3QgZG8geW91IHRoaW5rIGhlIGhhcyBpbiB0aGUgd2FyPwogICAgICAgICAgICAgICAgICAgIEFsbCBvZiB1cyB3aG8gaGF2ZSBlaXRoZXIgZW50ZXJ0YWluZWQgdGhlIHRob3VnaHRzIG9mIGZyZWVtZW4gY29uY2VybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYywgb3IgaGF2ZSBnaXZlbiB1dHRlcmFuY2UgdG8gb3BpbmlvbnMgd29ydGh5IG9mIG91cnNlbHZlcywgaGUgZGVjaWRlcyB0bwogICAgICAgICAgICAgICAgICAgIGJlIG5vdCBtZXJlbHkgb3Bwb3NlZCB0byBoaW0sIGJ1dCBhY3R1YWwgZW5lbWllcy4gQW5kIGhlIHBsYW5zIGluZmxpY3RpbmcKICAgICAgICAgICAgICAgICAgICBiaXR0ZXJlciBwdW5pc2htZW50cyBvbiB1cyB0aGFuIG9uIHRoZSBlbmVteTsgaGUgdGhpbmtzIGRlYXRoIGEgcHVuaXNobWVudAogICAgICAgICAgICAgICAgICAgIGltcG9zZWQgYnkgbmF0dXJlLCBidXQgdG9ybWVudHMgYW5kIHRvcnR1cmVzIHRoZSBwcm9wZXIgaW5mbGljdGlvbnMgb2YgYW5nZXIuCiAgICAgICAgICAgICAgICAgICAgV2hhdCBzb3J0IG9mIGVuZW15IHRoZW4gbXVzdCB3ZSBjb25zaWRlciB0aGF0IG1hbiB3aG8sIGlmIGhlIGJlIHZpY3RvcmlvdXMsCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZXMgb25lIHRvIHRoaW5rIGRlYXRoIGEga2luZG5lc3MgaWYgaGUgc3BhcmVzIG9uZSB0aGUgdG9ydHVyZXMgd2l0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIGl0IGlzIGluIGhpcyBwb3dlciB0byBhY2NvbXBhbnkgaXQ/IDwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbHRob3VnaCB5b3UgZG8gbm90IG5lZWQgYW55IG9uZSB0byBleGhvcnQgeW91CiAgICAgICAgICAgICAgICAgICAgKGZvciB5b3UgeW91cnNlbGYgaGF2ZSBvZiB5b3VyIG93biBhY2NvcmQgd2FybWVkIHVwIHdpdGggdGhlIGRlc2lyZSBvZgogICAgICAgICAgICAgICAgICAgIHJlY292ZXJpbmcgeW91ciBmcmVlZG9tKSwgc3RpbGwgZGVmZW5kLCBJIHdhcm4geW91LCB5b3VyIGZyZWVkb20gd2l0aCBzbyBtdWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgemVhbCBhbmQgY291cmFnZSwgaW4gcHJvcG9ydGlvbiBhcyB0aGUgcHVuaXNobWVudHMgb2Ygc2xhdmVyeSB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IHNlZSB0aGUgY29ucXVlcmVkIGFyZSB0aHJlYXRlbmVkIGFyZSBtb3JlIHRlcnJpYmxlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW50b25pdXMgaGFzIGludmFkZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT47IERvbGFiZWxsYSwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT47CiAgICAgICAgICAgICAgICAgICAgZWFjaCBhIHByb3ZpbmNlIHdpdGggd2hpY2ggaGUgaGFkIG5vIGJ1c2luZXNzIHdoYXRldmVyLiBCcnV0dXMgaGFzIG9wcG9zZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHRvIHRoZSBvbmUsIGFuZCBhdCB0aGUgcGVyaWwgb2YgaGlzIG93biBsaWZlIGhhcyBjaGVja2VkIHRoZSBvbnNldCBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgZnJhbnRpYyBtYW4gd2lzaGluZyB0byBoYXJhc3MgYW5kIHBsdW5kZXIgZXZlcnkgdGhpbmcsIGhhcyBwcmV2ZW50ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgZmFydGhlciBwcm9ncmVzcywgYW5kIGhhcyBjdXQgaGltIG9mZiBmcm9tIGhpcyByZXR1cm4uIEJ5IGFsbG93aW5nIGhpbXNlbGYgdG8gYmUKICAgICAgICAgICAgICAgICAgICBiZXNpZWdlZCBoZSBoYXMgaGVtbWVkIGluIEFudG9uaXVzIG9uIGVhY2ggc2lkZS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbnRvbml1cyBoYXMgaW52YWRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+OyBEb2xhYmVsbGEsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT47CiAgICAgICAgICAgICAgICAgICAgZWFjaCBhIHByb3ZpbmNlIHdpdGggd2hpY2ggaGUgaGFkIG5vIGJ1c2luZXNzIHdoYXRldmVyLiBCcnV0dXMgaGFzIG9wcG9zZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHRvIHRoZSBvbmUsIGFuZCBhdCB0aGUgcGVyaWwgb2YgaGlzIG93biBsaWZlIGhhcyBjaGVja2VkIHRoZSBvbnNldCBvZgogICAgICAgICAgICAgICAgICAgIHRoYXQgZnJhbnRpYyBtYW4gd2lzaGluZyB0byBoYXJhc3MgYW5kIHBsdW5kZXIgZXZlcnkgdGhpbmcsIGhhcyBwcmV2ZW50ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgZmFydGhlciBwcm9ncmVzcywgYW5kIGhhcyBjdXQgaGltIG9mZiBmcm9tIGhpcyByZXR1cm4uIEJ5IGFsbG93aW5nIGhpbXNlbGYgdG8gYmUKICAgICAgICAgICAgICAgICAgICBiZXNpZWdlZCBoZSBoYXMgaGVtbWVkIGluIEFudG9uaXVzIG9uIGVhY2ggc2lkZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgb3RoZXIgaGFzIGZvcmNlZCBoaXMgd2F5IGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICBXaXRoIHdoYXQgb2JqZWN0ISBJZiBpdCB3YXMgbWVyZWx5IHRvIHByb2NlZWQgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiwgaGUgaGFkIGEgcm9hZCBvcGVuIHRvIGhpbSB3aGljaCB3YXMgc3VyZSwgYW5kIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBsb25nLiBXaGF0IHdhcyB0aGUgbmVlZCBvZiBzZW5kaW5nIGZvcndhcmQgc29tZSBNYXJzaWFuLCB0aGV5IGNhbGwgaGltIE9jdGF2aXVzLAogICAgICAgICAgICAgICAgICAgIHdpdGggYSBsZWdpb247IGEgd2lja2VkIGFuZCBuZWNlc3NpdG91cyByb2JiZXI7IGEgbWFuIHRvIGxheSB3YXN0ZSB0aGUgbGFuZHMsIHRvCiAgICAgICAgICAgICAgICAgICAgaGFyYXNzIHRoZSBjaXRpZXMsIG5vdCBmcm9tIGFueSBob3BlIG9mIGFjcXVpcmluZyBhbnkgcGVybWFuZW50IHByb3BlcnR5LCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2hvIGtub3cgaGltIHNheSB0aGF0IGhlIGlzIHVuYWJsZSB0byBrZWVwIChmb3IgSSBoYXZlIG5vdCB0aGUgaG9ub3Igb2YKICAgICAgICAgICAgICAgICAgICBiZWluZyBhY3F1YWludGVkIHdpdGggdGhpcyBzZW5hdG9yIG15c2VsZiksIGJ1dCBqdXN0IGFzIHByZXNlbnQgZm9vZCB0byBzYXRpc2Z5CiAgICAgICAgICAgICAgICAgICAgaGlzIGluZGlnZW5jZT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+IERvbGFiZWxsYSBmb2xsb3dlZCBoaW0sIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBhbnkgb25lIGhhdmluZyBhbnkgc3VzcGljaW9uIG9mIHdhci4gRm9yIGhvdyBjb3VsZCBhbnkgb25lIHRoaW5rIG9mIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHRoaW5nPyBWZXJ5IGZyaWVuZGx5IGNvbmZlcmVuY2VzIHdpdGggVHJlYm9uaXVzIGVuc3VlZDsgZW1icmFjZXMsIGZhbHNlIHRva2VucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBncmVhdGVzdCBnb29kLXdpbGwsIHdlcmUgdGhlcmUgZnVsbCBvZiBzaW11bGF0ZWQgYWZmZWN0aW9uOyB0aGUgcGxlZGdlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IGhhbmQsIHdoaWNoIHVzZWQgdG8gYmUgYSB3aXRuZXNzIG9mIGdvb2QgZmFpdGgsIHdhcyB2aW9sYXRlZCBieQogICAgICAgICAgICAgICAgICAgIHRyZWFjaGVyeSBhbmQgd2lja2VkbmVzczsgdGhlbiBjYW1lIHRoZSBub2N0dXJuYWwgZW50cnkgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNteXJuYSIga2V5PSJwZXJzZXVzLFNteXJuYSI+U215cm5hPC9wbGFjZU5hbWU+LCBhcyBpZiBpbnRvIGFuIGVuZW15J3MKICAgICAgICAgICAgICAgICAgICAgICAgY2l0eeKAlDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU215cm5hIiBrZXk9InBlcnNldXMsU215cm5hIj5TbXlybmE8L3BsYWNlTmFtZT4sIHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgYSBjaXR5IG9mIG91ciBtb3N0IGZhaXRoZnVsIGFuZCBtb3N0IGFuY2llbnQgYWxsaWVzOyB0aGVuIHRoZSBzdXJwcmlzZSBvZgogICAgICAgICAgICAgICAgICAgIFRyZWJvbml1cywgd2hvLCBpZiBoZSB3ZXJlIHN1cnByaXNlZCBieSBvbmUgd2hvIHdhcyBhbiBvcGVuIGVuZW15LCB3YXMgdmVyeQogICAgICAgICAgICAgICAgICAgIGNhcmVsZXNzOyBpZiBieSBvbmUgd2hvIHVwIHRvIHRoYXQgbW9tZW50IG1haW50YWluZWQgdGhlIGFwcGVhcmFuY2Ugb2YgYQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHdhcyBtaXNlcmFibGUuIEFuZCBieSBoaXMgZXhhbXBsZSBmb3J0dW5lIHdpc2hlZCB1cyB0byB0YWtlIGEgbGVzc29uIG9mCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgY29ucXVlcmVkIHBhcnR5IGhhZCB0byBmZWFyLiBIZSBoYW5kZWQgb3ZlciBhIG1hbiBvZiBjb25zdWxhciByYW5rLAogICAgICAgICAgICAgICAgICAgIGdvdmVybmluZyB0aGUgcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gd2l0aAogICAgICAgICAgICAgICAgICAgIGNvbnN1bGFyIGF1dGhvcml0eSwgdG8gYW4gZXhpbGVkIGFybW9yZXI7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgTGF0aW4gaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5TYW1pYXJpdXM8L2ZvcmVpZ24+LCBvciBhcyBzb21lIHJlYWQgaXQgPGZvcmVpZ24gbGFuZz0ibGEiPlNhbWFyaXVzPC9mb3JlaWduPi4gT3JlbGxpdXMgc2F5cywg4oCccGVyaGFwcyBpdCBtZWFucwogICAgICAgICAgICAgICAgICAgICAgICBzb21lIHNvcnQgb2YgdHJhZGUsIGZvciBJIGRvdWJ0IGl0cyBoYXZpbmcgYmVlbiBhIFJvbWFuIHByb3BlcgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lLOKAnSBOaXpvbGxpdXMgc2F5cywg4oCcPGZvcmVpZ24gbGFuZz0ibGEiPlNhbWFyaXVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHVs4oCUcHJvdmVyYml1bS48L2ZvcmVpZ24+4oCdIEZhY2Npb2xhdHRpIGNhbGxzIGhpbSBhCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbiB3aG9zZSBidXNpbmVzcyBpdCB3YXMgdG8gY2xlYW4gdGhlIGFybXMgb2YgdGhlIGd1YXJkcy4gJmFtcDtjLiwgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBTYW1pYW4gY2hhbGsuPC9ub3RlPiBoZSB3b3VsZCBub3Qgc2xheSBoaW0gdGhlIG1vbWVudCB0aGF0IGhlIGhhZCB0YWtlbiBoaW0sCiAgICAgICAgICAgICAgICAgICAgZmVhcmluZywgSSBzdXBwb3NlLCB0aGF0IGhpcyB2aWN0b3J5IG1pZ2h0IGFwcGVhciB0b28gbWVyY2lmdWw7IGJ1dCBhZnRlciBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBhdHRhY2tlZCB0aGF0IG1vc3QgZXhjZWxsZW50IG1hbiB3aXRoIGluc3VsdGluZyB3b3JkcyBmcm9tIGhpcyBpbXBpb3VzIG1vdXRoLAogICAgICAgICAgICAgICAgICAgIHRoZW4gaGUgZXhhbWluZWQgaGltIHdpdGggc2NvdXJnZXMgYW5kIHRvcnR1cmVzLiBDb25jZXJuaW5nIHRoZSBwdWJsaWMgbW9uZXksCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgZm9yIHR3byBkYXlzIHRvZ2V0aGVyLiBBZnRlcndhcmQgaGUgY3V0IG9mZiBoaXMgaGVhZCwgYW5kIG9yZGVyZWQgaXQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBmaXhlZCBvbiBhIGphdmVsaW4gYW5kIGNhcnJpZWQgYWJvdXQ7IGFuZCB0aGUgcmVzdCBvZiBoaXMgYm9keSwgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkIHRocm91Z2ggdGhlIHN0cmVldCBhbmQgdG93biwgaGUgdGhyZXcgaW50byB0aGUgc2VhLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgIFdpdGggd2hhdCBvYmplY3QhIElmIGl0IHdhcyBtZXJlbHkgdG8gcHJvY2VlZCBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+LCBoZSBoYWQgYSByb2FkIG9wZW4gdG8gaGltIHdoaWNoIHdhcyBzdXJlLCBhbmQgd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIGxvbmcuIFdoYXQgd2FzIHRoZSBuZWVkIG9mIHNlbmRpbmcgZm9yd2FyZCBzb21lIE1hcnNpYW4sIHRoZXkgY2FsbCBoaW0gT2N0YXZpdXMsCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGxlZ2lvbjsgYSB3aWNrZWQgYW5kIG5lY2Vzc2l0b3VzIHJvYmJlcjsgYSBtYW4gdG8gbGF5IHdhc3RlIHRoZSBsYW5kcywgdG8KICAgICAgICAgICAgICAgICAgICBoYXJhc3MgdGhlIGNpdGllcywgbm90IGZyb20gYW55IGhvcGUgb2YgYWNxdWlyaW5nIGFueSBwZXJtYW5lbnQgcHJvcGVydHksIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSB3aG8ga25vdyBoaW0gc2F5IHRoYXQgaGUgaXMgdW5hYmxlIHRvIGtlZXAgKGZvciBJIGhhdmUgbm90IHRoZSBob25vciBvZgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGFjcXVhaW50ZWQgd2l0aCB0aGlzIHNlbmF0b3IgbXlzZWxmKSwgYnV0IGp1c3QgYXMgcHJlc2VudCBmb29kIHRvIHNhdGlzZnkKICAgICAgICAgICAgICAgICAgICBoaXMgaW5kaWdlbmNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['11.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBEb2xhYmVsbGEgZm9sbG93ZWQgaGltLCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgYW55IG9uZSBoYXZpbmcgYW55IHN1c3BpY2lvbiBvZiB3YXIuIEZvciBob3cgY291bGQgYW55IG9uZSB0aGluayBvZiBzdWNoIGEKICAgICAgICAgICAgICAgICAgICB0aGluZz8gVmVyeSBmcmllbmRseSBjb25mZXJlbmNlcyB3aXRoIFRyZWJvbml1cyBlbnN1ZWQ7IGVtYnJhY2VzLCBmYWxzZSB0b2tlbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ3JlYXRlc3QgZ29vZC13aWxsLCB3ZXJlIHRoZXJlIGZ1bGwgb2Ygc2ltdWxhdGVkIGFmZmVjdGlvbjsgdGhlIHBsZWRnZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCBoYW5kLCB3aGljaCB1c2VkIHRvIGJlIGEgd2l0bmVzcyBvZiBnb29kIGZhaXRoLCB3YXMgdmlvbGF0ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0cmVhY2hlcnkgYW5kIHdpY2tlZG5lc3M7IHRoZW4gY2FtZSB0aGUgbm9jdHVybmFsIGVudHJ5IGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTbXlybmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNteXJuYSI+U215cm5hPC9wbGFjZU5hbWU+LCBhcyBpZiBpbnRvIGFuIGVuZW15J3MKICAgICAgICAgICAgICAgICAgICAgICAgY2l0eeKAlDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU215cm5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTbXlybmEiPlNteXJuYTwvcGxhY2VOYW1lPiwgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICBhIGNpdHkgb2Ygb3VyIG1vc3QgZmFpdGhmdWwgYW5kIG1vc3QgYW5jaWVudCBhbGxpZXM7IHRoZW4gdGhlIHN1cnByaXNlIG9mCiAgICAgICAgICAgICAgICAgICAgVHJlYm9uaXVzLCB3aG8sIGlmIGhlIHdlcmUgc3VycHJpc2VkIGJ5IG9uZSB3aG8gd2FzIGFuIG9wZW4gZW5lbXksIHdhcyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgY2FyZWxlc3M7IGlmIGJ5IG9uZSB3aG8gdXAgdG8gdGhhdCBtb21lbnQgbWFpbnRhaW5lZCB0aGUgYXBwZWFyYW5jZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiwgd2FzIG1pc2VyYWJsZS4gQW5kIGJ5IGhpcyBleGFtcGxlIGZvcnR1bmUgd2lzaGVkIHVzIHRvIHRha2UgYSBsZXNzb24gb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSBjb25xdWVyZWQgcGFydHkgaGFkIHRvIGZlYXIuIEhlIGhhbmRlZCBvdmVyIGEgbWFuIG9mIGNvbnN1bGFyIHJhbmssCiAgICAgICAgICAgICAgICAgICAgZ292ZXJuaW5nIHRoZSBwcm92aW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IHdpdGgKICAgICAgICAgICAgICAgICAgICBjb25zdWxhciBhdXRob3JpdHksIHRvIGFuIGV4aWxlZCBhcm1vcmVyOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgTGF0aW4gaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlNhbWlhcml1czwvZm9yZWlnbj4sIG9yIGFzIHNvbWUgcmVhZCBpdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5TYW1hcml1czwvZm9yZWlnbj4uIE9yZWxsaXVzIHNheXMsIOKAnHBlcmhhcHMgaXQgbWVhbnMKICAgICAgICAgICAgICAgICAgICAgICAgc29tZSBzb3J0IG9mIHRyYWRlLCBmb3IgSSBkb3VidCBpdHMgaGF2aW5nIGJlZW4gYSBSb21hbiBwcm9wZXIKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSzigJ0gTml6b2xsaXVzIHNheXMsIOKAnDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlNhbWFyaXVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHVs4oCUcHJvdmVyYml1bS48L2ZvcmVpZ24+4oCdIEZhY2Npb2xhdHRpIGNhbGxzIGhpbSBhCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbiB3aG9zZSBidXNpbmVzcyBpdCB3YXMgdG8gY2xlYW4gdGhlIGFybXMgb2YgdGhlIGd1YXJkcy4gJmFtcDtjLiwgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBTYW1pYW4gY2hhbGsuPC9ub3RlPiBoZSB3b3VsZCBub3Qgc2xheSBoaW0gdGhlIG1vbWVudCB0aGF0IGhlIGhhZCB0YWtlbiBoaW0sCiAgICAgICAgICAgICAgICAgICAgZmVhcmluZywgSSBzdXBwb3NlLCB0aGF0IGhpcyB2aWN0b3J5IG1pZ2h0IGFwcGVhciB0b28gbWVyY2lmdWw7IGJ1dCBhZnRlciBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBhdHRhY2tlZCB0aGF0IG1vc3QgZXhjZWxsZW50IG1hbiB3aXRoIGluc3VsdGluZyB3b3JkcyBmcm9tIGhpcyBpbXBpb3VzIG1vdXRoLAogICAgICAgICAgICAgICAgICAgIHRoZW4gaGUgZXhhbWluZWQgaGltIHdpdGggc2NvdXJnZXMgYW5kIHRvcnR1cmVzLiBDb25jZXJuaW5nIHRoZSBwdWJsaWMgbW9uZXksCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgZm9yIHR3byBkYXlzIHRvZ2V0aGVyLiBBZnRlcndhcmQgaGUgY3V0IG9mZiBoaXMgaGVhZCwgYW5kIG9yZGVyZWQgaXQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBmaXhlZCBvbiBhIGphdmVsaW4gYW5kIGNhcnJpZWQgYWJvdXQ7IGFuZCB0aGUgcmVzdCBvZiBoaXMgYm9keSwgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkIHRocm91Z2ggdGhlIHN0cmVldCBhbmQgdG93biwgaGUgdGhyZXcgaW50byB0aGUgc2VhLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5TYW1pYXJpdXM8L2ZvcmVpZ24+LCBvciBhcyBzb21lIHJlYWQgaXQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2FtYXJpdXM8L2ZvcmVpZ24+LiBPcmVsbGl1cyBzYXlzLCDigJxwZXJoYXBzIGl0IG1lYW5zCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbWUgc29ydCBvZiB0cmFkZSwgZm9yIEkgZG91YnQgaXRzIGhhdmluZyBiZWVuIGEgUm9tYW4gcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUs4oCdIE5pem9sbGl1cyBzYXlzLCDigJw8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5TYW1hcml1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh1bOKAlHByb3ZlcmJpdW0uPC9mb3JlaWduPuKAnSBGYWNjaW9sYXR0aSBjYWxscyBoaW0gYQogICAgICAgICAgICAgICAgICAgICAgICBtYW4gd2hvc2UgYnVzaW5lc3MgaXQgd2FzIHRvIGNsZWFuIHRoZSBhcm1zIG9mIHRoZSBndWFyZHMuICZhbXA7Yy4sIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgU2FtaWFuIGNoYWxrLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IFdlLCB0aGVuLCBoYXZlIHRvIHdhciBhZ2FpbnN0IHRoaXMgZW5lbXkgYnkKICAgICAgICAgICAgICAgICAgICB3aG9zZSBtb3N0IGZvdWwgY3J1ZWx0eSBhbGwgdGhlIHNhdmFnZW5lc3Mgb2YgYmFyYmFyb3VzIG5hdGlvbnMgaXMgc3VycGFzc2VkLgogICAgICAgICAgICAgICAgICAgIFdoeSBuZWVkIEkgc3BlYWsgb2YgdGhlIG1hc3NhY3JlIG9mIFJvbWFuIGNpdGl6ZW5zISBvZiB0aGUgcGx1bmRlciBvZiB0ZW1wbGVzPwogICAgICAgICAgICAgICAgICAgIFdobyBpcyB0aGVyZSB3aG8gY2FuIHBvc3NpYmx5IGRlcGxvcmUgc3VjaCBjaXJjdW1zdGFuY2VzIGFzIHRoZWlyIGF0cm9jaXR5CiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZXM/IEFuZCBub3cgaGUgaXMgcmFuZ2luZyBhbGwgb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgaGUgaXMgdHJpdW1waGluZyBhYm91dCBhcyBhIGtpbmcsIGhlIHRoaW5rcyB0aGF0IHdlIGFyZQogICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkIGluIGFub3RoZXIgcXVhcnRlciBieSBhbm90aGVyIHdhciwgYXMgaWYgaXQgd2VyZSBub3Qgb25lIGFuZCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHdhciBhZ2FpbnN0IHRoaXMgb3V0cmFnZW91cyBwYWlyIG9mIGltcGlvdXMgbWVuLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBXZSwgdGhlbiwgaGF2ZSB0byB3YXIgYWdhaW5zdCB0aGlzIGVuZW15IGJ5CiAgICAgICAgICAgICAgICAgICAgd2hvc2UgbW9zdCBmb3VsIGNydWVsdHkgYWxsIHRoZSBzYXZhZ2VuZXNzIG9mIGJhcmJhcm91cyBuYXRpb25zIGlzIHN1cnBhc3NlZC4KICAgICAgICAgICAgICAgICAgICBXaHkgbmVlZCBJIHNwZWFrIG9mIHRoZSBtYXNzYWNyZSBvZiBSb21hbiBjaXRpemVucyEgb2YgdGhlIHBsdW5kZXIgb2YgdGVtcGxlcz8KICAgICAgICAgICAgICAgICAgICBXaG8gaXMgdGhlcmUgd2hvIGNhbiBwb3NzaWJseSBkZXBsb3JlIHN1Y2ggY2lyY3Vtc3RhbmNlcyBhcyB0aGVpciBhdHJvY2l0eQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzPyBBbmQgbm93IGhlIGlzIHJhbmdpbmcgYWxsIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgaGUgaXMgdHJpdW1waGluZyBhYm91dCBhcyBhIGtpbmcsIGhlIHRoaW5rcyB0aGF0IHdlIGFyZQogICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkIGluIGFub3RoZXIgcXVhcnRlciBieSBhbm90aGVyIHdhciwgYXMgaWYgaXQgd2VyZSBub3Qgb25lIGFuZCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHdhciBhZ2FpbnN0IHRoaXMgb3V0cmFnZW91cyBwYWlyIG9mIGltcGlvdXMgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IHNlZSBub3cgYW4gaW1hZ2Ugb2YgdGhlIGNydWVsdHkgb2YgTWFyY3VzIEFudG9uaXVzIGluIERvbGFiZWxsYTsgdGhpcyBjb25kdWN0CiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGlzIGZvcm1lZCBvbiB0aGUgbW9kZWwgb2YgdGhlIG90aGVyLiBJdCBpcyBieSBoaW0gdGhhdCB0aGUgbGVzc29ucyBvZgogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MgaGF2ZSBiZWVuIHRhdWdodCB0byBEb2xhYmVsbGEuIERvIHlvdSB0aGluayB0aGF0IEFudG9uaXVzLCBpZiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGUgcG93ZXIsIHdvdWxkIGJlIG1vcmUgbWVyY2lmdWwgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gdGhhbiBEb2xhYmVsbGEgaGFzIHByb3ZlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+PyBUbyBtZSwgaW5kZWVkLCB0aGlzIGxhdHRlciBhcHBlYXJzIHRvIGhhdmUgZ29uZSBhcyBmYXIgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zYW5pdHkgb2YgYSBzYXZhZ2UgbWFuIGNvdWxkIGdvOyBub3IgZG8gSSBiZWxpZXZlIHRoYXQgQW50b25pdXMgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgd291bGQgb21pdCBhbnkgZGVzY3JpcHRpb24gb2YgcHVuaXNobWVudCwgaWYgaGUgaGFkIG9ubHkgdGhlIHBvd2VyIHRvIGluZmxpY3QKICAgICAgICAgICAgICAgICAgICBpdC4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gdGhhbiBEb2xhYmVsbGEgaGFzIHByb3ZlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+PyBUbyBtZSwgaW5kZWVkLCB0aGlzIGxhdHRlciBhcHBlYXJzIHRvIGhhdmUgZ29uZSBhcyBmYXIgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zYW5pdHkgb2YgYSBzYXZhZ2UgbWFuIGNvdWxkIGdvOyBub3IgZG8gSSBiZWxpZXZlIHRoYXQgQW50b25pdXMgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgd291bGQgb21pdCBhbnkgZGVzY3JpcHRpb24gb2YgcHVuaXNobWVudCwgaWYgaGUgaGFkIG9ubHkgdGhlIHBvd2VyIHRvIGluZmxpY3QKICAgICAgICAgICAgICAgICAgICBpdC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz4gUGxhY2UgdGhlbiBiZWZvcmUgeW91ciBleWVzLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIHRoYXQgc3BlY3RhY2xlLCBtaXNlcmFibGUgaW5kZWVkLCBhbmQgdGVhcmZ1bCwgYnV0IHN0aWxsIGluZGlzcGVuc2FibGUKICAgICAgICAgICAgICAgICAgICB0byByb3VzZSB5b3VyIG1pbmRzIHByb3Blcmx5OiB0aGUgbm9jdHVybmFsIGF0dGFjayB1cG9uIHRoZSBtb3N0IGJlYXV0aWZ1bCBjaXR5CiAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT47IHRoZSBpcnJ1cHRpb24gb2YgYXJtZWQgbWVuCiAgICAgICAgICAgICAgICAgICAgaW50byBUcmVib25pdXMncyBob3VzZSwgd2hlbiB0aGF0IHVuaGFwcHkgbWFuIHNhdyB0aGUgc3dvcmRzIG9mIHRoZSByb2JiZXJzCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhlIGhlYXJkIHdoYXQgd2FzIHRoZSBtYXR0ZXI7IHRoZSBlbnRyYW5jZSBvZiBEb2xhYmVsbGEsCiAgICAgICAgICAgICAgICAgICAgcmFnaW5nLOKAlGhpcyBpbGwtb21lbmVkIHZvaWNlLCBhbmQgaW5mYW1vdXMgY291bnRlbmFuY2Us4oCUdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhaW5zLCB0aGUgc2NvdXJnZXMsIHRoZSByYWNrLCB0aGUgYXJtb3JlciB3aG8gd2FzIGJvdGggdG9ydHVyZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgZXhlY3V0aW9uZXI7IGFsbCB3aGljaCB0aGV5IHNheSB0aGF0IHRoZSB1bmhhcHB5IFRyZWJvbml1cyBlbmR1cmVkIHdpdGggZ3JlYXQKICAgICAgICAgICAgICAgICAgICBmb3J0aXR1ZGUuIEEgZ3JlYXQgcHJhaXNlLCBhbmQgaW4gbXkgb3BpbmlvbiBpbmRlZWQgdGhlIGdyZWF0ZXN0IG9mIGFsbCwgZm9yIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIHBhcnQgb2YgYSB3aXNlIG1hbiB0byByZXNvbHZlIGJlZm9yZWhhbmQgdGhhdCB3aGF0ZXZlciBjYW4gaGFwcGVuIHRvIGEKICAgICAgICAgICAgICAgICAgICBicmF2ZSBtYW4gaXMgdG8gYmUgZW5kdXJlZCB3aXRoIHBhdGllbmNlIGlmIGl0IHNob3VsZCBoYXBwZW4uIEl0IGlzIGluZGVlZCBhCiAgICAgICAgICAgICAgICAgICAgcHJvb2Ygb2YgYWx0b2dldGhlciBncmVhdGVyIHdpc2RvbSB0byBhY3Qgd2l0aCBzdWNoIGZvcmVzaWdodCBhcyB0byBwcmV2ZW50IGFueQogICAgICAgICAgICAgICAgICAgIHN1Y2ggdGhpbmcgZnJvbSBoYXBwZW5pbmc7IGJ1dCBpdCBpcyBhIHRva2VuIG9mIG5vIGxlc3MgY291cmFnZSB0byBiZWFyIGl0CiAgICAgICAgICAgICAgICAgICAgYnJhdmVseSBpZiBpdCBzaG91bGQgYmVmYWxsIG9uZS4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBQbGFjZSB0aGVuIGJlZm9yZSB5b3VyIGV5ZXMsIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdGhhdCBzcGVjdGFjbGUsIG1pc2VyYWJsZSBpbmRlZWQsIGFuZCB0ZWFyZnVsLCBidXQgc3RpbGwgaW5kaXNwZW5zYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIHJvdXNlIHlvdXIgbWluZHMgcHJvcGVybHk6IHRoZSBub2N0dXJuYWwgYXR0YWNrIHVwb24gdGhlIG1vc3QgYmVhdXRpZnVsIGNpdHkKICAgICAgICAgICAgICAgICAgICBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+OyB0aGUgaXJydXB0aW9uIG9mIGFybWVkIG1lbgogICAgICAgICAgICAgICAgICAgIGludG8gVHJlYm9uaXVzJ3MgaG91c2UsIHdoZW4gdGhhdCB1bmhhcHB5IG1hbiBzYXcgdGhlIHN3b3JkcyBvZiB0aGUgcm9iYmVycwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoZSBoZWFyZCB3aGF0IHdhcyB0aGUgbWF0dGVyOyB0aGUgZW50cmFuY2Ugb2YgRG9sYWJlbGxhLAogICAgICAgICAgICAgICAgICAgIHJhZ2luZyzigJRoaXMgaWxsLW9tZW5lZCB2b2ljZSwgYW5kIGluZmFtb3VzIGNvdW50ZW5hbmNlLOKAlHRoZQogICAgICAgICAgICAgICAgICAgIGNoYWlucywgdGhlIHNjb3VyZ2VzLCB0aGUgcmFjaywgdGhlIGFybW9yZXIgd2hvIHdhcyBib3RoIHRvcnR1cmVyIGFuZAogICAgICAgICAgICAgICAgICAgIGV4ZWN1dGlvbmVyOyBhbGwgd2hpY2ggdGhleSBzYXkgdGhhdCB0aGUgdW5oYXBweSBUcmVib25pdXMgZW5kdXJlZCB3aXRoIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZm9ydGl0dWRlLiBBIGdyZWF0IHByYWlzZSwgYW5kIGluIG15IG9waW5pb24gaW5kZWVkIHRoZSBncmVhdGVzdCBvZiBhbGwsIGZvciBpdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBwYXJ0IG9mIGEgd2lzZSBtYW4gdG8gcmVzb2x2ZSBiZWZvcmVoYW5kIHRoYXQgd2hhdGV2ZXIgY2FuIGhhcHBlbiB0byBhCiAgICAgICAgICAgICAgICAgICAgYnJhdmUgbWFuIGlzIHRvIGJlIGVuZHVyZWQgd2l0aCBwYXRpZW5jZSBpZiBpdCBzaG91bGQgaGFwcGVuLiBJdCBpcyBpbmRlZWQgYQogICAgICAgICAgICAgICAgICAgIHByb29mIG9mIGFsdG9nZXRoZXIgZ3JlYXRlciB3aXNkb20gdG8gYWN0IHdpdGggc3VjaCBmb3Jlc2lnaHQgYXMgdG8gcHJldmVudCBhbnkKICAgICAgICAgICAgICAgICAgICBzdWNoIHRoaW5nIGZyb20gaGFwcGVuaW5nOyBidXQgaXQgaXMgYSB0b2tlbiBvZiBubyBsZXNzIGNvdXJhZ2UgdG8gYmVhciBpdAogICAgICAgICAgICAgICAgICAgIGJyYXZlbHkgaWYgaXQgc2hvdWxkIGJlZmFsbCBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['11.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgRG9sYWJlbGxhIHdhcyBpbmRlZWQgc28gd2hvbGx5IGZvcmdldGZ1bCBvZiB0aGUgY2xhaW1zIG9mIGh1bWFuaXR5IChhbHRob3VnaCwKICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIGhlIG5ldmVyIGhhZCBhbnkgcGFydGljdWxhciByZWNvbGxlY3Rpb24gb2YgaXQpLCBhcyB0byB2ZW50IGhpcwogICAgICAgICAgICAgICAgICAgIGluc2F0aWFibGUgY3J1ZWx0eSwgbm90IG9ubHkgb24gdGhlIGxpdmluZyBtYW4sIGJ1dCBhbHNvIG9uIHRoZSBkZWFkIGNhcmNhc3MsCiAgICAgICAgICAgICAgICAgICAgYW5kLCBhcyBoZSBjb3VsZCBub3Qgc3VmZmljaWVudGx5IGdsdXQgaGlzIGhhdHJlZCwgdG8gZmVlZCBoaXMgZXllcyBhbHNvIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGxhY2VyYXRpb25zIGluZmxpY3RlZCwgYW5kIHRoZSBpbnN1bHRzIG9mZmVyZWQgdG8gaGlzIGNvcnBzZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyBEb2xhYmVsbGEsIG11Y2ggbW9yZSB3cmV0Y2hlZCB0aGFuIGhlIHdob20geW91IGludGVuZGVkIHRvIGJlIHRoZSBtb3N0IHdyZXRjaGVkCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIG1lbiEgVHJlYm9uaXVzIGVuZHVyZWQgZ3JlYXQgYWdvbmllczsgbWFueSBtZW4gaGF2ZSBlbmR1cmVkIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBzdGlsbCwgZnJvbSBzZXZlcmUgZGlzZWFzZSwgd2hvbSwgaG93ZXZlciwgd2UgYXJlIGluIHRoZSBoYWJpdCBvZiBjYWxsaW5nIG5vdAogICAgICAgICAgICAgICAgICAgIG1pc2VyYWJsZSwgYnV0IGFmZmxpY3RlZC4gSGlzIHN1ZmZlcmluZ3MsIHdoaWNoIGxhc3RlZCB0d28gZGF5cywgd2VyZSBsb25nOyBidXQKICAgICAgICAgICAgICAgICAgICBtYW55IG1lbiBoYXZlIGhhZCBzdWZmZXJpbmdzIGxhc3RpbmcgbWFueSB5ZWFyczsgbm9yIGFyZSB0aGUgdG9ydHVyZXMgaW5mbGljdGVkCiAgICAgICAgICAgICAgICAgICAgYnkgZXhlY3V0aW9uZXJzIG1vcmUgdGVycmlibGUgdGhhbiB0aG9zZSBjYXVzZWQgYnkgZGlzZWFzZSBhcmUgc29tZXRpbWVzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgYXJlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZXMs4oCUb3RoZXJzLCBJIHRlbGwgeW91LCBPIHlvdSBtb3N0IGFiYW5kb25lZCBhbmQgaW5zYW5lIG1hbiwKICAgICAgICAgICAgICAgICAgICB3aGljaCBhcmUgZmFyIG1vcmUgbWlzZXJhYmxlLiBGb3IgaW4gcHJvcG9ydGlvbiBhcyB0aGUgdmlnb3Igb2YgdGhlIG1pbmQgZXhjZWVkcwogICAgICAgICAgICAgICAgICAgIHRoYXQgb2YgdGhlIGJvZHksIHNvIGFsc28gYXJlIHRoZSBzdWZmZXJpbmdzIHdoaWNoIHJhY2sgdGhlIG1pbmQgbW9yZSB0ZXJyaWJsZQogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhvc2Ugd2hpY2ggYXJlIGVuZHVyZWQgYnkgdGhlIGJvZHkuIEhlLCB0aGVyZWZvcmUsIHdobyBjb21taXRzIGEgd2lja2VkCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGlzIG1vcmUgd3JldGNoZWQgdGhhbiBoZSB3aG8gaXMgY29tcGVsbGVkIHRvIGVuZHVyZSB0aGUgd2lja2VkbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGFub3RoZXIuIFRyZWJvbml1cyB3YXMgdG9ydHVyZWQgYnkgRG9sYWJlbGxhOyBhbmQgc28sIGluZGVlZCwgd2FzIFJlZ3VsdXMgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgQ2FydGhhZ2luaWFucy4gSWYgb24gdGhhdCBhY2NvdW50IHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgY29uc2lkZXJlZCB2ZXJ5IGNydWVsCiAgICAgICAgICAgICAgICAgICAgZm9yIHN1Y2ggYmVoYXZpb3IgdG8gYW4gZW5lbXksIHdoYXQgbXVzdCB3ZSB0aGluayBvZiBEb2xhYmVsbGEsIHdobyB0cmVhdGVkIGEKICAgICAgICAgICAgICAgICAgICBjaXRpemVuIGluIHN1Y2ggYSBtYW5uZXI/IElzIHRoZXJlIGFueSBjb21wYXJpc29uPyBvciBjYW4gd2UgZG91YnQgd2hpY2ggb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdHdvIGlzIG1vc3QgbWlzZXJhYmxlPyBoZSB3aG9zZSBkZWF0aCB0aGUgc2VuYXRlIGFuZCBSb21hbiBwZW9wbGUgd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIGF2ZW5nZSwgb3IgaGUgd2hvIGhhcyBiZWVuIGFkanVkZ2VkIGFuIGVuZW15IGJ5IHRoZSB1bmFuaW1vdXMgdm90ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGU/IEZvciBpbiBldmVyeSBvdGhlciBwYXJ0aWN1bGFyIG9mIHRoZWlyIGxpdmVzLCB3aG8gY291bGQgcG9zc2libHksCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCB0aGUgZ3JlYXRlc3QgaW5zdWx0IHRvIFRyZWJvbml1cywgY29tcGFyZSB0aGUgbGlmZSBvZiBUcmVib25pdXMgdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIG9mIERvbGFiZWxsYT8gV2hvIGlzIGlnbm9yYW50IG9mIHRoZSB3aXNkb20sIGFuZCBnZW5pdXMsIGFuZCBodW1hbml0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5ub2NlbmNlIG9mIHRoZSBvbmUsIGFuZCBvZiBoaXMgZ3JlYXRuZXNzIG9mIG1pbmQgYXMgZGlzcGxheWVkIGluIGhpcyBleGVydGlvbnMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGZyZWVkb20gb2YgaGlzIGNvdW50cnk/IFRoZSBvdGhlciwgZnJvbSBoaXMgdmVyeSBjaGlsZGhvb2QsIGhhcyB0YWtlbgogICAgICAgICAgICAgICAgICAgIGRlbGlnaHQgaW4gY3J1ZWx0eTsgYW5kLCBtb3Jlb3Zlciwgc3VjaCBoYXMgYmVlbiB0aGUgc2hhbWVmdWwgbmF0dXJlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGx1c3RzLCB0aGF0IGhlIGhhcyBhbHdheXMgZGVsaWdodGVkIGluIHRoZSB2ZXJ5IGZhY3Qgb2YgZG9pbmcgdGhvc2UgdGhpbmdzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgY291bGQgbm90IGV2ZW4gYmUgcmVwcm9hY2hlZCB3aXRoIGJ5IGEgbW9kZXN0IGVuZW15LiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZSBhcmUgb3RoZXIKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlcyzigJRvdGhlcnMsIEkgdGVsbCB5b3UsIE8geW91IG1vc3QgYWJhbmRvbmVkIGFuZCBpbnNhbmUgbWFuLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFyZSBmYXIgbW9yZSBtaXNlcmFibGUuIEZvciBpbiBwcm9wb3J0aW9uIGFzIHRoZSB2aWdvciBvZiB0aGUgbWluZCBleGNlZWRzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiB0aGUgYm9keSwgc28gYWxzbyBhcmUgdGhlIHN1ZmZlcmluZ3Mgd2hpY2ggcmFjayB0aGUgbWluZCBtb3JlIHRlcnJpYmxlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aG9zZSB3aGljaCBhcmUgZW5kdXJlZCBieSB0aGUgYm9keS4gSGUsIHRoZXJlZm9yZSwgd2hvIGNvbW1pdHMgYSB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gaXMgbW9yZSB3cmV0Y2hlZCB0aGFuIGhlIHdobyBpcyBjb21wZWxsZWQgdG8gZW5kdXJlIHRoZSB3aWNrZWRuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlci4gVHJlYm9uaXVzIHdhcyB0b3J0dXJlZCBieSBEb2xhYmVsbGE7IGFuZCBzbywgaW5kZWVkLCB3YXMgUmVndWx1cyBieSB0aGUKICAgICAgICAgICAgICAgICAgICBDYXJ0aGFnaW5pYW5zLiBJZiBvbiB0aGF0IGFjY291bnQgdGhlIENhcnRoYWdpbmlhbnMgd2VyZSBjb25zaWRlcmVkIHZlcnkgY3J1ZWwKICAgICAgICAgICAgICAgICAgICBmb3Igc3VjaCBiZWhhdmlvciB0byBhbiBlbmVteSwgd2hhdCBtdXN0IHdlIHRoaW5rIG9mIERvbGFiZWxsYSwgd2hvIHRyZWF0ZWQgYQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4gaW4gc3VjaCBhIG1hbm5lcj8gSXMgdGhlcmUgYW55IGNvbXBhcmlzb24/IG9yIGNhbiB3ZSBkb3VidCB3aGljaCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0d28gaXMgbW9zdCBtaXNlcmFibGU/IGhlIHdob3NlIGRlYXRoIHRoZSBzZW5hdGUgYW5kIFJvbWFuIHBlb3BsZSB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgYXZlbmdlLCBvciBoZSB3aG8gaGFzIGJlZW4gYWRqdWRnZWQgYW4gZW5lbXkgYnkgdGhlIHVuYW5pbW91cyB2b3RlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZT8gRm9yIGluIGV2ZXJ5IG90aGVyIHBhcnRpY3VsYXIgb2YgdGhlaXIgbGl2ZXMsIHdobyBjb3VsZCBwb3NzaWJseSwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHRoZSBncmVhdGVzdCBpbnN1bHQgdG8gVHJlYm9uaXVzLCBjb21wYXJlIHRoZSBsaWZlIG9mIFRyZWJvbml1cyB0byB0aGF0CiAgICAgICAgICAgICAgICAgICAgb2YgRG9sYWJlbGxhPyBXaG8gaXMgaWdub3JhbnQgb2YgdGhlIHdpc2RvbSwgYW5kIGdlbml1cywgYW5kIGh1bWFuaXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBpbm5vY2VuY2Ugb2YgdGhlIG9uZSwgYW5kIG9mIGhpcyBncmVhdG5lc3Mgb2YgbWluZCBhcyBkaXNwbGF5ZWQgaW4gaGlzIGV4ZXJ0aW9ucwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZnJlZWRvbSBvZiBoaXMgY291bnRyeT8gVGhlIG90aGVyLCBmcm9tIGhpcyB2ZXJ5IGNoaWxkaG9vZCwgaGFzIHRha2VuCiAgICAgICAgICAgICAgICAgICAgZGVsaWdodCBpbiBjcnVlbHR5OyBhbmQsIG1vcmVvdmVyLCBzdWNoIGhhcyBiZWVuIHRoZSBzaGFtZWZ1bCBuYXR1cmUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgbHVzdHMsIHRoYXQgaGUgaGFzIGFsd2F5cyBkZWxpZ2h0ZWQgaW4gdGhlIHZlcnkgZmFjdCBvZiBkb2luZyB0aG9zZSB0aGluZ3Mgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBjb3VsZCBub3QgZXZlbiBiZSByZXByb2FjaGVkIHdpdGggYnkgYSBtb2Rlc3QgZW5lbXkuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgdGhpcyBtYW4sIE8geWUgaW1tb3J0YWwgZ29kcywgd2FzIG9uY2UgbXkKICAgICAgICAgICAgICAgICAgICByZWxhdGlvbiEgRm9yIGhpcyB2aWNlcyB3ZXJlIHVua25vd24gdG8gb25lIHdobyBkaWQgbm90IGlucXVpcmUgaW50byBzdWNoCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzOiBub3IgcGVyaGFwcyBzaG91bGQgSSBub3cgYmUgYWxpZW5hdGVkIGZyb20gaGltIGlmIGhlIGhhZCBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQgdG8gYmUgYW4gZW5lbXkgdG8geW91LCB0byB0aGUgd2FsbHMgb2YgaGlzIGNvdW50cnksIHRvIHRoaXMgY2l0eSwgdG8KICAgICAgICAgICAgICAgICAgICBvdXIgaG91c2Vob2xkIGdvZHMsIHRvIHRoZSBhbHRhcnMgYW5kIGhlYXJ0aHMgb2YgYWxsIG9mIHVzLOKAlGluIHNob3J0LAogICAgICAgICAgICAgICAgICAgIHRvIGh1bWFuIG5hdHVyZSBhbmQgdG8gY29tbW9uIGh1bWFuaXR5LiBCdXQgbm93LCBoYXZpbmcgcmVjZWl2ZWQgdGhpcyBsZXNzb24KICAgICAgICAgICAgICAgICAgICBmcm9tIGhpbSwgbGV0IHVzIGJlIHRoZSBtb3JlIGRpbGlnZW50IGFuZCB2aWdpbGFudCBpbiBiZWluZyBvbiBvdXIgZ3VhcmQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoaXMgbWFuLCBPIHllIGltbW9ydGFsIGdvZHMsIHdhcyBvbmNlIG15CiAgICAgICAgICAgICAgICAgICAgcmVsYXRpb24hIEZvciBoaXMgdmljZXMgd2VyZSB1bmtub3duIHRvIG9uZSB3aG8gZGlkIG5vdCBpbnF1aXJlIGludG8gc3VjaAogICAgICAgICAgICAgICAgICAgIHRoaW5nczogbm9yIHBlcmhhcHMgc2hvdWxkIEkgbm93IGJlIGFsaWVuYXRlZCBmcm9tIGhpbSBpZiBoZSBoYWQgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkIHRvIGJlIGFuIGVuZW15IHRvIHlvdSwgdG8gdGhlIHdhbGxzIG9mIGhpcyBjb3VudHJ5LCB0byB0aGlzIGNpdHksIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGhvdXNlaG9sZCBnb2RzLCB0byB0aGUgYWx0YXJzIGFuZCBoZWFydGhzIG9mIGFsbCBvZiB1cyzigJRpbiBzaG9ydCwKICAgICAgICAgICAgICAgICAgICB0byBodW1hbiBuYXR1cmUgYW5kIHRvIGNvbW1vbiBodW1hbml0eS4gQnV0IG5vdywgaGF2aW5nIHJlY2VpdmVkIHRoaXMgbGVzc29uCiAgICAgICAgICAgICAgICAgICAgZnJvbSBoaW0sIGxldCB1cyBiZSB0aGUgbW9yZSBkaWxpZ2VudCBhbmQgdmlnaWxhbnQgaW4gYmVpbmcgb24gb3VyIGd1YXJkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cy4gPC90cmFuc2xhdGlvbj4="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5kZWVkLCBEb2xhYmVsbGEgaGFkIG5vdCB3aXRoIGhpbSBhbnkgZ3JlYXQgbnVtYmVyIG9mIG5vdG9yaW91cyBhbmQgY29uc3BpY3VvdXMKICAgICAgICAgICAgICAgICAgICByb2JiZXJzLiBCdXQgeW91IHNlZSB0aGVyZSBhcmUgd2l0aCBBbnRvbml1cywgYW5kIGluIHdoYXQgbnVtYmVycy4gSW4gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIHRoZXJlIGlzIGhpcyBicm90aGVyIEx1Y2l1c+KAlHdoYXQgYSBmaXJlLWJyYW5kLCBPIHllIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcyEgd2hhdCBhbiBpbmNhcm5hdGlvbiBvZiBjcmltZSBhbmQgd2lja2VkbmVzcyEgd2hhdCBhIGd1bGYsIHdoYXQgYSB3aGlybHBvb2wKICAgICAgICAgICAgICAgICAgICBvZiBhIG1hbiEgV2hhdCBkbyB5b3UgdGhpbmsgdGhhdCBtYW4gaW5jYXBhYmxlIG9mIHN3YWxsb3dpbmcgdXAgaW4gaGlzIG1pbmQsIG9yCiAgICAgICAgICAgICAgICAgICAgZ3VscGluZyBkb3duIGluIGhpcyB0aG91Z2h0cz8gV2hvIGRvIHlvdSBpbWFnaW5lIHRoZXJlIGlzIHdob3NlIGJsb29kIGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHRoaXJzdGluZyBmb3I/IHdobyBvbiB3aG9zZSBwb3NzZXNzaW9ucyBhbmQgZm9ydHVuZXMgaGUgaXMgbm90IGZpeGluZyBoaXMgbW9zdAogICAgICAgICAgICAgICAgICAgIGltcHVkZW50IGV5ZXMsIGhpcyBob3BlcywgYW5kIGhpcyB3aG9sZSBoZWFydD8gV2hhdCBzaGFsbCB3ZSBzYXkgb2YgQ2Vuc29yaW51cz8KICAgICAgICAgICAgICAgICAgICB3aG8sIGFzIGZhciBhcyB3b3JkcyBnbywgc2FpZCBpbmRlZWQgdGhhdCBoZSB3aXNoZWQgdG8gYmUgdGhlIGNpdHkgcHJhZXRvcjsgYnV0CiAgICAgICAgICAgICAgICAgICAgd2hvLCBpbiBmYWN0LCB3YXMgdW53aWxsaW5nIHRvIGJlIHNvLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgb2YKICAgICAgICAgICAgICAgICAgICBCZXN0aWEsIHdobyBwcm9mZXNzZXMgdGhhdCBoZSBpcyBhIGNhbmRpZGF0ZSBmb3IgdGhlIGNvbnN1bHNoaXAgaW4gdGhlIHBsYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzPyBNYXkgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiBhdmVydCBmcm9tIHVzIHRoaXMKICAgICAgICAgICAgICAgICAgICBtb3N0IGRldGVzdGFibGUgb21lbiEgQnV0IGhvdyBhYnN1cmQgaXMgaXQgZm9yIGEgbWFuIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcAogICAgICAgICAgICAgICAgICAgIHdobyBjYW4gbm90IGJlIGVsZWN0ZWQgcHJhZXRvciEgdW5sZXNzLCBpbmRlZWQsIGhlIHRoaW5rcyBoaXMgY29udmljdGlvbiBtYXkgYmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBhcyBhbiBlcXVpdmFsZW50IHRvIHRoZSBwcmFldG9yc2hpcCBMZXQgdGhpcyBzZWNvbmQgQ2Flc2FyLCB0aGlzIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgIFZvcGlzY3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+Vm9waXNjdXMgaXMgYW5vdGhlciBuYW1lIG9mIEJlc3RpYS48L25vdGU+IGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgY29uc3VtbWF0ZSBnZW5pdXMsIG9mIHRoZSBoaWdoZXN0IGluZmx1ZW5jZSwgd2hvIHNlZWtzIHRoZSBjb25zdWxzaGlwCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgaGF2aW5nIGJlZW4gYWVkaWxlLCBiZSBleGN1c2VkIGZyb20gb2JlZGllbmNlIHRvIHRoZSBsYXdzLgogICAgICAgICAgICAgICAgICAgIEFsdGhvdWdoLCBpbmRlZWQsIHRoZSBsYXdzIGRvIG5vdCBiaW5kIGhpbSwgb24gYWNjb3VudCwgSSBzdXBwb3NlLCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBleGNlZWRpbmcgZGlnbml0eS4gQnV0IHRoaXMgbWFuIGhhcyBiZWVuIGFjcXVpdHRlZCBmaXZlIHRpbWVzIHdoZW4gSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZWQgaGltLiBUbyB3aW4gYSBzaXh0aCBjaXR5IHZpY3RvcnkgaXMgZGlmZmljdWx0LCBldmVuIGluIHRoZSBjYXNlIG9mIGEKICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3IuIEhvd2V2ZXIsIHRoaXMgaXMgdGhlIGZhdWx0IG9mIHRoZSBqdWRnZXM7IG5vdCBtaW5lLiBJIGRlZmVuZGVkIGhpbQogICAgICAgICAgICAgICAgICAgIHdpdGggcGVyZmVjdCBnb29kIGZhaXRoOyB0aGV5IHdlcmUgYm91bmQgdG8gcmV0YWluIGEgbW9zdCBpbGx1c3RyaW91cyBhbmQKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQ6IGNpdGl6ZW4gaW4gdGhlIHJlcHVibGljOyB3aG8gbm93LCBob3dldmVyLCBhcHBlYXJzIHRvIGhhdmUgbm8gb3RoZXIKICAgICAgICAgICAgICAgICAgICBvYmplY3QgZXhjZXB0IHRvIG1ha2UgdXMgdW5kZXJzdGFuZCB0aGF0IHRob3NlIG1lbiB3aG9zZSBqdWRpY2lhbCBkZWNpc2lvbnMgd2UKICAgICAgICAgICAgICAgICAgICBhbm51bGxlZCwgZGVjaWRlZCByaWdodGx5IGFuZCBpbiBhIG1hbm5lciBhZHZhbnRhZ2VvdXMgdG8gdGhlIHJlcHVibGljLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBvZgogICAgICAgICAgICAgICAgICAgIEJlc3RpYSwgd2hvIHByb2Zlc3NlcyB0aGF0IGhlIGlzIGEgY2FuZGlkYXRlIGZvciB0aGUgY29uc3Vsc2hpcCBpbiB0aGUgcGxhY2Ugb2YKICAgICAgICAgICAgICAgICAgICBCcnV0dXM/IE1heSA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiBhdmVydCBmcm9tIHVzIHRoaXMKICAgICAgICAgICAgICAgICAgICBtb3N0IGRldGVzdGFibGUgb21lbiEgQnV0IGhvdyBhYnN1cmQgaXMgaXQgZm9yIGEgbWFuIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcAogICAgICAgICAgICAgICAgICAgIHdobyBjYW4gbm90IGJlIGVsZWN0ZWQgcHJhZXRvciEgdW5sZXNzLCBpbmRlZWQsIGhlIHRoaW5rcyBoaXMgY29udmljdGlvbiBtYXkgYmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBhcyBhbiBlcXVpdmFsZW50IHRvIHRoZSBwcmFldG9yc2hpcCBMZXQgdGhpcyBzZWNvbmQgQ2Flc2FyLCB0aGlzIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgIFZvcGlzY3VzLDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5Wb3Bpc2N1cyBpcyBhbm90aGVyIG5hbWUgb2YgQmVzdGlhLjwvbm90ZT4gYQogICAgICAgICAgICAgICAgICAgIG1hbiBvZiBjb25zdW1tYXRlIGdlbml1cywgb2YgdGhlIGhpZ2hlc3QgaW5mbHVlbmNlLCB3aG8gc2Vla3MgdGhlIGNvbnN1bHNoaXAKICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBhZnRlciBoYXZpbmcgYmVlbiBhZWRpbGUsIGJlIGV4Y3VzZWQgZnJvbSBvYmVkaWVuY2UgdG8gdGhlIGxhd3MuCiAgICAgICAgICAgICAgICAgICAgQWx0aG91Z2gsIGluZGVlZCwgdGhlIGxhd3MgZG8gbm90IGJpbmQgaGltLCBvbiBhY2NvdW50LCBJIHN1cHBvc2UsIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGV4Y2VlZGluZyBkaWduaXR5LiBCdXQgdGhpcyBtYW4gaGFzIGJlZW4gYWNxdWl0dGVkIGZpdmUgdGltZXMgd2hlbiBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRlZCBoaW0uIFRvIHdpbiBhIHNpeHRoIGNpdHkgdmljdG9yeSBpcyBkaWZmaWN1bHQsIGV2ZW4gaW4gdGhlIGNhc2Ugb2YgYQogICAgICAgICAgICAgICAgICAgIGdsYWRpYXRvci4gSG93ZXZlciwgdGhpcyBpcyB0aGUgZmF1bHQgb2YgdGhlIGp1ZGdlczsgbm90IG1pbmUuIEkgZGVmZW5kZWQgaGltCiAgICAgICAgICAgICAgICAgICAgd2l0aCBwZXJmZWN0IGdvb2QgZmFpdGg7IHRoZXkgd2VyZSBib3VuZCB0byByZXRhaW4gYSBtb3N0IGlsbHVzdHJpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGV4Y2VsbGVudDogY2l0aXplbiBpbiB0aGUgcmVwdWJsaWM7IHdobyBub3csIGhvd2V2ZXIsIGFwcGVhcnMgdG8gaGF2ZSBubyBvdGhlcgogICAgICAgICAgICAgICAgICAgIG9iamVjdCBleGNlcHQgdG8gbWFrZSB1cyB1bmRlcnN0YW5kIHRoYXQgdGhvc2UgbWVuIHdob3NlIGp1ZGljaWFsIGRlY2lzaW9ucyB3ZQogICAgICAgICAgICAgICAgICAgIGFubnVsbGVkLCBkZWNpZGVkIHJpZ2h0bHkgYW5kIGluIGEgbWFubmVyIGFkdmFudGFnZW91cyB0byB0aGUgcmVwdWJsaWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIGlzIHRoaXMgdGhlIGNhc2Ugd2l0aCByZXNwZWN0IHRvIHRoaXMgbWFuIGFsb25lOyB0aGVyZSBhcmUgb3RoZXIgbWVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgY2FtcCBob25lc3RseSBjb25kZW1uZWQgYW5kIHNoYW1lZnVsbHkgcmVzdG9yZWQ7IHdoYXQgY291bnNlbCBkbyB5b3UKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIGNhbiBiZSBhZG9wdGVkIGJ5IHRob3NlIG1lbiB3aG8gYXJlIGVuZW1pZXMgdG8gYWxsIGdvb2QgbWVuLCB0aGF0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgY3J1ZWw/IFRoZXJlIGlzIGJlc2lkZXMgYSBmZWxsb3cgY2FsbGVkIFNheGE7IEkgZG9uJ3Qga25vdyB3aG8gaGUgaXM7CiAgICAgICAgICAgICAgICAgICAgc29tZSBtYW4gd2hvbSBDYWVzYXIgaW1wb3J0ZWQgZnJvbSB0aGUgZXh0cmVtaXR5IG9mIENlbHRpYmVyaWEgYW5kIGdhdmUgdXMgZm9yIGEKICAgICAgICAgICAgICAgICAgICB0cmlidW5lIG9mIHRoZSBwZW9wbGUuIEJlZm9yZSB0aGF0LCBoZSB3YXMgYSBtZWFzdXJlciBvZiBncm91bmQgZm9yIGNhbXBzOyBub3cKICAgICAgICAgICAgICAgICAgICBoZSBob3BlcyB0byBtZWFzdXJlIG91dCBhbmQgdmFsdWUgdGhlIGNpdHkuIE1heSB0aGUgZXZpbHMgd2hpY2ggdGhpcyBmb3JlaWduZXIKICAgICAgICAgICAgICAgICAgICBwcmVkaWN0cyB0byB1cyBmYWxsIG9uIGhpcyBvd24gaGVhZCwgYW5kIG1heSB3ZSBlc2NhcGUgaW4gc2FmZXR5ISBXaXRoIGhpbSBpcwogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXRlcmFuIENhcGhvOyBub3IgaXMgdGhlcmUgYW55IG1hbiB3aG9tIHRoZSB2ZXRlcmFuIHRyb29wcyBoYXRlIG1vcmUKICAgICAgICAgICAgICAgICAgICBjb3JkaWFsbHk6IHRvIHRoZXNlIG1lbiwgYXMgaWYgaW4gYWRkaXRpb24gdG8gdGhlIGRvd3J5IHdoaWNoIHRoZXkgaGFkIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZHVyaW5nIG91ciBjaXZpbCBkaXNhc3RlcnMsIEFudG9uaXVzIGhhZCBnaXZlbiB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBtaWdodCBoYXZlIGl0IGFzIGEgc29ydCBvZiBudXJzZSBmb3IgdGhlaXIgb3RoZXIgZXN0YXRlcy4gSSBvbmx5IHdpc2ggdGhleSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJlIGNvbnRlbnRlZCB3aXRoIHRoZW0hIFdlIHdvdWxkIGJlYXIgaXQgdGhlbiwgdGhvdWdoIGl0IHdvdWxkIG5vdCBiZSB3aGF0IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgYm9ybmU7IGJ1dCBzdGlsbCBpdCB3b3VsZCBiZSB3b3J0aCBvdXIgd2hpbGUgdG8gYmVhciBhbnkgdGhpbmcsIGFzIGxvbmcgYXMKICAgICAgICAgICAgICAgICAgICB3ZSBjb3VsZCBlc2NhcGUgdGhpcyBtb3N0IHNoYW1lZnVsIHdhci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBtb3JlPyBIYXZlIHlvdSBub3QgYmVmb3JlIHlvdXIgZXllcyB0aG9zZSBvcm5hbWVudHMgb2YgdGhlIGNhbXAgb2YgTWFyY3VzLgogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IEluIHRoZSBmaXJzdCBwbGFjZSwgdGhlc2UgdHdvCiAgICAgICAgICAgICAgICAgICAgY29sbGVhZ3VlcyBvZiB0aGUgQW50b25paSBhbmQgRG9sYWJlbGxhLCBOdWN1bGEgYW5kIExlbnRvLCB0aGUgZGl2aWRlcnMgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBhY2NvcmRpbmcgdG8gdGhhdCBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGUgc2VuYXRlIHByb25vdW5jZWQgdG8gaGF2ZSBiZWVuIGNhcnJpZWQgYnkgdmlvbGVuY2U7IG9uZSBvZiB3aG9tIGhhcyBiZWVuIGEKICAgICAgICAgICAgICAgICAgICB3cml0ZXIgb2YgZmFyY2VzLCBhbmQgdGhlIG90aGVyIGFuIGFjdG9yIG9mIHRyYWdlZGllcy4gV2h5IHNob3VsZCBJIHNwZWFrIG9mCiAgICAgICAgICAgICAgICAgICAgRG9taXRpdXMgdGhlIEFwdWxpYW4/IHdob3NlIHByb3BlcnR5IHdlIGhhdmUgbGF0ZWx5IHNlZW4gYWR2ZXJ0aXNlZCwgc28gZ3JlYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgY2FyZWxlc3NuZXNzIG9mIGhpcyBhZ2VudHMuIEJ1dCB0aGlzIG1hbiBsYXRlbHkgd2FzIG5vdCBjb250ZW50IHdpdGggZ2l2aW5nCiAgICAgICAgICAgICAgICAgICAgcG9pc29uIHRvIGhpcyBzaXN0ZXIncyBzb24sIGhlIGFjdHVhbGx5IGRyZW5jaGVkIGhpbSB3aXRoIGl0LiBCdXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlIGZvciB0aGVzZSBtZW4gdG8gbGl2ZSBpbiBhbnkgb3RoZXIgdGhhbiBhIHByb2RpZ2FsIG1hbm5lciwgd2hvIGhvcGUKICAgICAgICAgICAgICAgICAgICBmb3Igb3VyIHByb3BlcnR5IHdoaWxlIHRoZXkgYXJlIHNxdWFuZGVyaW5nIHRoZWlyIG93bi4gSSBoYXZlIHNlZW4gYWxzbyBhbgogICAgICAgICAgICAgICAgICAgIGF1Y3Rpb24gb2YgdGhlIHByb3BlcnR5IG9mIFB1YmxpdXMgRGVjaXVzLCBhbiBpbGx1c3RyaW91cyBtYW47IHdobywgZm9sbG93aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4YW1wbGUgb2YgaGlzIGFuY2VzdG9ycywgZGV2b3RlZCBoaW1zZWxmIGZvciB0aGUgZGVidHMgb2YgYW5vdGhlci4gQnV0IGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBhdWN0aW9uIG5vIG9uZSB3YXMgZm91bmQgdG8gYmUgYSBwdXJjaGFzZXIuIFJpZGljdWxvdXMgbWFuIHRvIHRoaW5rIGl0CiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgdG8gZXNjYXBlIGZyb20gZGVidCBieSBzZWxsaW5nIG90aGVyIHBlb3BsZSdzIHByb3BlcnR5ISBGb3Igd2h5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIEkgc3BlYWsgb2YgVHJlYmVsbGl1cz8gb24gd2hvbSB0aGUgZnVyaWVzIG9mIGRlYnRzIHNlZW0gdG8gaGF2ZSB3cmVha2VkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdmVuZ2VhbmNlOyBmb3Igd2UgaGF2ZSBzZWVuIG9uZSB0YWJsZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+SXQgaXMgaW1wb3NzaWJsZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZSBmb3JjZSBvZiB0aGUgb3JpZ2luYWwgaGVyZSwgd2hpY2ggcGxheXMgb24gdGhlIHdvcmQgPGZvcmVpZ24gbGFuZz0ibGEiPnRhYnVsYTwvZm9yZWlnbj4uIFRoZSBMYXRpbiBpcyA8Zm9yZWlnbiBsYW5nPSJsYSI+dmluZGljZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuaW0gbm92YXJ1bSB0YWJ1bGFydW0gbm92YW0gdGFidWxhbSB2aWRpbXVzPC9mb3JlaWduPjsgPGZvcmVpZ24gbGFuZz0ibGEiPm5vdmFlIHRhYnVsYWU8L2ZvcmVpZ24+IG1lYW5pbmcsIGFzIGlzIHdlbGwga25vd24sIGEgbGF3IGZvcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYWJvbGl0aW9uIG9mIGRlYnRzLCA8Zm9yZWlnbiBsYW5nPSJsYSI+bm92YSB0YWJ1bGE8L2ZvcmVpZ24+IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciwgYW4gYWR2ZXJ0aXNlbWVudCBvZiAoVHJlYmVsbGl1cydzKSBwcm9wZXJ0eSBiZWluZyB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBzb2xkLjwvbm90ZT4gYXZlbmdpbmcgYW5vdGhlci4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIEkgc3BlYWsgb2YgUGxhbmN1cz8gd2hvbSB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgY2l0aXplbiA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5BcXVpbGE8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaGFzIGRyaXZlbiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUG9sbGVudGlhIiBrZXk9InBlcnNldXMsUG9sbGVudGlhIj5Qb2xsZW50aWE8L3BsYWNlTmFtZT4s4oCUYW5kIHRoYXQgdG9vIHdpdGggYQogICAgICAgICAgICAgICAgICAgIGJyb2tlbiBsZWc7IGFuZCBJIHdpc2ggaGUgaGFkIG1ldCB3aXRoIHRoYXQgYWNjaWRlbnQgZWFybGllciwgc28gYXMgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgbGlhYmxlIHRvIHJldHVybiBoaXRoZXIuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdGhlIGZpcnN0IHBsYWNlLCB0aGVzZSB0d28KICAgICAgICAgICAgICAgICAgICBjb2xsZWFndWVzIG9mIHRoZSBBbnRvbmlpIGFuZCBEb2xhYmVsbGEsIE51Y3VsYSBhbmQgTGVudG8sIHRoZSBkaXZpZGVycyBvZiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYWNjb3JkaW5nIHRvIHRoYXQgbGF3IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBwcm9ub3VuY2VkIHRvIGhhdmUgYmVlbiBjYXJyaWVkIGJ5IHZpb2xlbmNlOyBvbmUgb2Ygd2hvbSBoYXMgYmVlbiBhCiAgICAgICAgICAgICAgICAgICAgd3JpdGVyIG9mIGZhcmNlcywgYW5kIHRoZSBvdGhlciBhbiBhY3RvciBvZiB0cmFnZWRpZXMuIFdoeSBzaG91bGQgSSBzcGVhayBvZgogICAgICAgICAgICAgICAgICAgIERvbWl0aXVzIHRoZSBBcHVsaWFuPyB3aG9zZSBwcm9wZXJ0eSB3ZSBoYXZlIGxhdGVseSBzZWVuIGFkdmVydGlzZWQsIHNvIGdyZWF0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhcmVsZXNzbmVzcyBvZiBoaXMgYWdlbnRzLiBCdXQgdGhpcyBtYW4gbGF0ZWx5IHdhcyBub3QgY29udGVudCB3aXRoIGdpdmluZwogICAgICAgICAgICAgICAgICAgIHBvaXNvbiB0byBoaXMgc2lzdGVyJ3Mgc29uLCBoZSBhY3R1YWxseSBkcmVuY2hlZCBoaW0gd2l0aCBpdC4gQnV0IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSBmb3IgdGhlc2UgbWVuIHRvIGxpdmUgaW4gYW55IG90aGVyIHRoYW4gYSBwcm9kaWdhbCBtYW5uZXIsIHdobyBob3BlCiAgICAgICAgICAgICAgICAgICAgZm9yIG91ciBwcm9wZXJ0eSB3aGlsZSB0aGV5IGFyZSBzcXVhbmRlcmluZyB0aGVpciBvd24uIEkgaGF2ZSBzZWVuIGFsc28gYW4KICAgICAgICAgICAgICAgICAgICBhdWN0aW9uIG9mIHRoZSBwcm9wZXJ0eSBvZiBQdWJsaXVzIERlY2l1cywgYW4gaWxsdXN0cmlvdXMgbWFuOyB3aG8sIGZvbGxvd2luZwogICAgICAgICAgICAgICAgICAgIHRoZSBleGFtcGxlIG9mIGhpcyBhbmNlc3RvcnMsIGRldm90ZWQgaGltc2VsZiBmb3IgdGhlIGRlYnRzIG9mIGFub3RoZXIuIEJ1dCBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgYXVjdGlvbiBubyBvbmUgd2FzIGZvdW5kIHRvIGJlIGEgcHVyY2hhc2VyLiBSaWRpY3Vsb3VzIG1hbiB0byB0aGluayBpdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHRvIGVzY2FwZSBmcm9tIGRlYnQgYnkgc2VsbGluZyBvdGhlciBwZW9wbGUncyBwcm9wZXJ0eSEgRm9yIHdoeSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBJIHNwZWFrIG9mIFRyZWJlbGxpdXM/IG9uIHdob20gdGhlIGZ1cmllcyBvZiBkZWJ0cyBzZWVtIHRvIGhhdmUgd3JlYWtlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHZlbmdlYW5jZTsgZm9yIHdlIGhhdmUgc2VlbiBvbmUgdGFibGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SXQgaXMgaW1wb3NzaWJsZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZSBmb3JjZSBvZiB0aGUgb3JpZ2luYWwgaGVyZSwgd2hpY2ggcGxheXMgb24gdGhlIHdvcmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGFidWxhPC9mb3JlaWduPi4gVGhlIExhdGluIGlzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnZpbmRpY2VtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmltIG5vdmFydW0gdGFidWxhcnVtIG5vdmFtIHRhYnVsYW0gdmlkaW11czwvZm9yZWlnbj47IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vdmFlIHRhYnVsYWU8L2ZvcmVpZ24+IG1lYW5pbmcsIGFzIGlzIHdlbGwga25vd24sIGEgbGF3IGZvcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYWJvbGl0aW9uIG9mIGRlYnRzLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub3ZhIHRhYnVsYTwvZm9yZWlnbj4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNpbmd1bGFyLCBhbiBhZHZlcnRpc2VtZW50IG9mIChUcmViZWxsaXVzJ3MpIHByb3BlcnR5IGJlaW5nIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbGQuPC9ub3RlPiBhdmVuZ2luZyBhbm90aGVyLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj50YWJ1bGE8L2ZvcmVpZ24+LiBUaGUgTGF0aW4gaXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmluZGljZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuaW0gbm92YXJ1bSB0YWJ1bGFydW0gbm92YW0gdGFidWxhbSB2aWRpbXVzPC9mb3JlaWduPjsgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm92YWUgdGFidWxhZTwvZm9yZWlnbj4gbWVhbmluZywgYXMgaXMgd2VsbCBrbm93biwgYSBsYXcgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhYm9saXRpb24gb2YgZGVidHMsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vdmEgdGFidWxhPC9mb3JlaWduPiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIsIGFuIGFkdmVydGlzZW1lbnQgb2YgKFRyZWJlbGxpdXMncykgcHJvcGVydHkgYmVpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICAgICAgc29sZC48L3RyYW5zbGF0aW9uPg=="
translation['11.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIEkgc3BlYWsgb2YgUGxhbmN1cz8gd2hvbSB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgY2l0aXplbiA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+QXF1aWxhPC9zdXJuYW1lPjwvcGVyc05hbWU+IGhhcyBkcml2ZW4gZnJvbSA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+QXF1aWxhPC9zdXJuYW1lPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUG9sbGVudGlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQb2xsZW50aWEiPlBvbGxlbnRpYTwvcGxhY2VOYW1lPizigJRhbmQgdGhhdCB0b28gd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgYnJva2VuIGxlZzsgYW5kIEkgd2lzaCBoZSBoYWQgbWV0IHdpdGggdGhhdCBhY2NpZGVudCBlYXJsaWVyLCBzbyBhcyBub3QgdG8gYmUKICAgICAgICAgICAgICAgICAgICBsaWFibGUgdG8gcmV0dXJuIGhpdGhlci4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGhhZCBhbG1vc3QgcGFzc2VkIG92ZXIgdGhlIGxpZ2h0IGFuZCBnbG9yeSBvZiB0aGF0IGFybXksIENhaXVzIEFubml1cyBDaW1iZXIsCiAgICAgICAgICAgICAgICAgICAgdGhlIHNvbiBvZiBMeXNpZGljdXMsIGEgTHlzaWRpY3VzIGhpbXNlbGYgaW4gdGhlIEdyZWVrIG1lYW5pbmcgb2YgdGhlIHdvcmQsCiAgICAgICAgICAgICAgICAgICAgc2luY2UgaGUgaGFzIGJyb2tlbiBhbGwgbGF3cywgdW5sZXNzIHBlcmhhcHMgaXQgaXMgbmF0dXJhbCBmb3IgYSBDaW1icmlhbiB0bwogICAgICAgICAgICAgICAgICAgIHNsYXkgYSBHZXJtYW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkhlcmUgdG9vIGlzIGEgc3VjY2Vzc2lvbiBvZiBwdW5zLiBMeXNpZGljdXMKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZGVyaXZlZCBmcm9tIHRoZSBHcmVlayA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5sdS93PC9mb3JlaWduPiwgdG8gbG9vc2VuCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5kaS9raDwvZm9yZWlnbj4sIGp1c3RpY2UuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNpbWJlcjwvZm9yZWlnbj4gaXMgYSBwcm9wZXIgbmFtZSBhbmQgYWxzbyBtZWFucyBvbmUgb2YgdGhlIG5hdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ2ltYnJpLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5HZXJtYW51czwvZm9yZWlnbj4gaXMgYSBHZXJtYW4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmdlcm1hbnVzPC9mb3JlaWduPiBhIGJyb3RoZXI7IGFuZCBoZSBtZWFucyBoZXJlIHRvIGltcHV0ZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBDYWl1cyBDaW1iZXIgdGhhdCBoZSBoYWQgbXVyZGVyZWQgaGlzIGJyb3RoZXIuPC9ub3RlPiBXaGVuIEFudG9uaXVzIGhhcyBzdWNoCiAgICAgICAgICAgICAgICAgICAgbnVtYmVycyB3aXRoIGhpbSwgYW5kIHRob3NlIHRvbyBtZW4gb2YgdGhhdCBzb3J0LCB3aGF0IGNyaW1lIHdpbGwgaGUgc2hyaW5rCiAgICAgICAgICAgICAgICAgICAgZnJvbSwgd2hlbiBEb2xhYmVsbGEgaGFzIHBvbGx1dGVkIGhpbXNlbGYgd2l0aCBzdWNoIGF0cm9jaW91cyBtdXJkZXJzIHdpdGhvdXQgYXQKICAgICAgICAgICAgICAgICAgICBhbGwgYW4gZXF1YWwgdHJvb3Agb2Ygcm9iYmVycyB0byBzdXBwb3J0IGhpbT8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFdoZXJlZm9yZSwgYXMgSSBoYXZlIG9mdGVuIGF0IG90aGVyIHRpbWVzIGRpZmZlcmVkIGFnYWluc3QgbXkgd2lsbCBmcm9tIFF1aW50dXMKICAgICAgICAgICAgICAgICAgICBGdWZpdXMsIHNvIG9uIHRoaXMgb2NjYXNpb24gSSBnbGFkbHkgYWdyZWUgd2l0aCBoaXMgcHJvcG9zaXRpb24uIEFuZCBmcm9tIHRoaXMKICAgICAgICAgICAgICAgICAgICB5b3UgbWF5IHNlZSB0aGF0IG15IGRpZmZlcmVuY2UgaXMgbm90IHdpdGggdGhlIG1hbiwgYnV0IHdpdGggdGhlIGNhdXNlIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgc29tZXRpbWVzIGFkdm9jYXRlcy4gPC9wPgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkhlcmUgdG9vIGlzIGEgc3VjY2Vzc2lvbiBvZiBwdW5zLiBMeXNpZGljdXMKICAgICAgICAgICAgICAgICAgICAgICAgaXMgZGVyaXZlZCBmcm9tIHRoZSBHcmVlayA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5sdS93PC9mb3JlaWduPiwgdG8gbG9vc2VuCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj5kaS9raDwvZm9yZWlnbj4sIGp1c3RpY2UuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNpbWJlcjwvZm9yZWlnbj4gaXMgYSBwcm9wZXIgbmFtZSBhbmQgYWxzbyBtZWFucyBvbmUgb2YgdGhlIG5hdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ2ltYnJpLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5HZXJtYW51czwvZm9yZWlnbj4gaXMgYSBHZXJtYW4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmdlcm1hbnVzPC9mb3JlaWduPiBhIGJyb3RoZXI7IGFuZCBoZSBtZWFucyBoZXJlIHRvIGltcHV0ZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBDYWl1cyBDaW1iZXIgdGhhdCBoZSBoYWQgbXVyZGVyZWQgaGlzIGJyb3RoZXIuPC9ub3RlPiBXaGVuIEFudG9uaXVzIGhhcyBzdWNoCiAgICAgICAgICAgICAgICAgICAgbnVtYmVycyB3aXRoIGhpbSwgYW5kIHRob3NlIHRvbyBtZW4gb2YgdGhhdCBzb3J0LCB3aGF0IGNyaW1lIHdpbGwgaGUgc2hyaW5rCiAgICAgICAgICAgICAgICAgICAgZnJvbSwgd2hlbiBEb2xhYmVsbGEgaGFzIHBvbGx1dGVkIGhpbXNlbGYgd2l0aCBzdWNoIGF0cm9jaW91cyBtdXJkZXJzIHdpdGhvdXQgYXQKICAgICAgICAgICAgICAgICAgICBhbGwgYW4gZXF1YWwgdHJvb3Agb2Ygcm9iYmVycyB0byBzdXBwb3J0IGhpbT8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+bHUvdzwvZm9yZWlnbj4sIHRvIGxvb3NlbgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+ZGkva2g8L2ZvcmVpZ24+LCBqdXN0aWNlLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5DaW1iZXI8L2ZvcmVpZ24+IGlzIGEgcHJvcGVyIG5hbWUgYW5kIGFsc28gbWVhbnMgb25lIG9mIHRoZSBuYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIENpbWJyaS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+R2VybWFudXM8L2ZvcmVpZ24+IGlzIGEgR2VybWFuIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5nZXJtYW51czwvZm9yZWlnbj4gYSBicm90aGVyOyBhbmQgaGUgbWVhbnMgaGVyZSB0byBpbXB1dGUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQ2FpdXMgQ2ltYmVyIHRoYXQgaGUgaGFkIG11cmRlcmVkIGhpcyBicm90aGVyLjwvdHJhbnNsYXRpb24+"
translation['11.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBXaGVyZWZvcmUsIGFzIEkgaGF2ZSBvZnRlbiBhdCBvdGhlciB0aW1lcyBkaWZmZXJlZCBhZ2FpbnN0IG15IHdpbGwgZnJvbSBRdWludHVzCiAgICAgICAgICAgICAgICAgICAgRnVmaXVzLCBzbyBvbiB0aGlzIG9jY2FzaW9uIEkgZ2xhZGx5IGFncmVlIHdpdGggaGlzIHByb3Bvc2l0aW9uLiBBbmQgZnJvbSB0aGlzCiAgICAgICAgICAgICAgICAgICAgeW91IG1heSBzZWUgdGhhdCBteSBkaWZmZXJlbmNlIGlzIG5vdCB3aXRoIHRoZSBtYW4sIGJ1dCB3aXRoIHRoZSBjYXVzZSB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHNvbWV0aW1lcyBhZHZvY2F0ZXMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCBhdCBwcmVzZW50IEkgbm90IG9ubHkgYWdyZWUgd2l0aCBRdWludHVzIEZ1Zml1cywgYnV0IEkgZXZlbiByZXR1cm4KICAgICAgICAgICAgICAgICAgICB0aGFua3MgdG8gaGltOyBmb3IgaGUgaGFzIGdpdmVuIHV0dGVyYW5jZSB0byBvcGluaW9ucyB3aGljaCBhcmUgdXByaWdodCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlnbmlmaWVkLCBhbmQgd29ydGh5IG9mIHRoZSByZXB1YmxpYy4gSGUgaGFzIHByb25vdW5jZWQgRG9sYWJlbGxhIGEgcHVibGljCiAgICAgICAgICAgICAgICAgICAgZW5lbXk7IGhlIGhhcyBkZWNsYXJlZCBoaXMgb3BpbmlvbiB0aGF0IGhpcyBwcm9wZXJ0eSBvdWdodCB0byBiZSBjb25maXNjYXRlZCBieQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBhdXRob3JpdHkuIEFuZCB0aG91Z2ggbm90aGluZyBjb3VsZCBiZSBhZGRlZCB0byB0aGlzIChmb3IsIGluZGVlZCwgd2hhdAogICAgICAgICAgICAgICAgICAgIGNvdWxkIGhlIHByb3Bvc2UgbW9yZSBzZXZlcmUgb3IgbW9yZSBwaXRpbGVzcz8pLCBuZXZlcnRoZWxlc3MsIGhlIHNhaWQgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIGFueSBvZiB0aG9zZSBtZW4gd2hvIHdlcmUgYXNrZWQgdGhlaXIgb3BpbmlvbiBhZnRlciBoaW0gcHJvcG9zZWQgYW55IG1vcmUgc2V2ZXJlCiAgICAgICAgICAgICAgICAgICAgc2VudGVuY2UsIGhlIHdvdWxkIHZvdGUgZm9yIGl0LiBXaG8gY2FuIGF2b2lkIHByYWlzaW5nIHN1Y2ggc2V2ZXJpdHkgYXMgdGhpcz8KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['11.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgc2luY2UgRG9sYWJlbGxhIGhhcyBiZWVuIHByb25vdW5jZWQgYSBwdWJsaWMgZW5lbXksIGhlIG11c3QgYmUgcHVyc3VlZCBieQogICAgICAgICAgICAgICAgICAgIHdhci4gRm9yIGhlIGhpbXNlbGYgd2lsbCBub3QgcmVtYWluIHF1aWV0LiBIZSBoYXMgYSBsZWdpb24gd2l0aCBoaW07IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHRyb29wcyBvZiBydW5hd2F5IHNsYXZlcywgaGUgaGFzIGEgd2lja2VkIGJhbmQgb2YgaW1waW91cyBtZW47IGhlIGhpbXNlbGYgaXMKICAgICAgICAgICAgICAgICAgICBjb25maWRlbnQsIGludGVtcGVyYXRlLCBhbmQgYmVudCBvbiBmYWxsaW5nIGJ5IHRoZSBkZWF0aCBvZiBhIGdsYWRpYXRvci4KICAgICAgICAgICAgICAgICAgICBXaGVyZWZvcmUgc2luY2UgYXMuIERvbGFiZWxsYSB3YXMgdm90ZWQgYW4gZW5lbXkgYnkgdGhlIGRlY3JlZSB3aGljaCB3YXMgcGFzc2VkCiAgICAgICAgICAgICAgICAgICAgeWVzdGVyZGF5LCB3YXIgbXVzdCBiZSB3YWdlZCwgd2UgbXVzdCBuZWNlc3NhcmlseSBhcHBvaW50IGEgZ2VuZXJhbC4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ud28gb3BpbmlvbnMgaGF2ZSBiZWVuIGFkdmFuY2VkOyBuZWl0aGVyIG9mIHdoaWNoIGRvIEkgYXBwcm92ZS4gVGhlIG9uZSwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIEkgYWx3YXlzIHRoaW5rIGl0IGRhbmdlcm91cyB1bmxlc3MgaXQgYmUgYWJzb2x1dGVseSBuZWNlc3Nhcnk7IHRoZSBvdGhlciwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIEkgdGhpbmsgaXQgd2hvbGx5IHVuc3VpdGVkIHRvIHRoZSBlbWVyZ2VuY3kuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGFuIGV4dHJhb3JkaW5hcnkgY29tbWlzc2lvbiBpcyBhIG1lYXN1cmUgc3VpdGVkIHJhdGhlcgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBmaWNrbGUgY2hhcmFjdGVyIG9mIHRoZSBtb2I7IG9uZSB3aGljaCBkb2VzIG5vdCBhdCBhbGwgYmVjb21lIG91ciBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgb3IgdGhpcyBhc3NlbWJseS4gSW4gdGhlIHdhciBhZ2FpbnN0IEFudGlvY2h1cywgYSBncmVhdCBhbmQgaW1wb3J0YW50IHdhciwgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiBoYWQgZmFsbGVuIGJ5IGxvdCB0byBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBTY2lwaW8gYXMgaGlzIHByb3ZpbmNlLCBhbmQgd2hlbiBoZSB3YXMgdGhvdWdodCB0byBoYXZlIGhhcmRseSBzcGlyaXQgYW5kIGhhcmRseQogICAgICAgICAgICAgICAgICAgIHZpZ29yIGVub3VnaCBmb3IgaXQ7IGFuZCB3aGVuIHRoZSBzZW5hdGUgd2FzIGluY2xpbmVkIHRvIGVudHJ1c3QgdGhlIGJ1c2luZXNzIHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbGxlYWd1ZSBDYWl1cyBMYWVsaXVzLCB0aGUgZmF0aGVyIG9mIHRoaXMgTGFlbGl1cywgd2hvIHdhcyBzdXJuYW1lZCB0aGUKICAgICAgICAgICAgICAgICAgICBXaXNlOyBQdWJsaXVzIEFmcmljYW51cywgdGhlIGVsZGVyIGJyb3RoZXIgb2YgTHVjaXVzIFNjaXBpbywgcm9zZSB1cCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZW50cmVhdGVkIHRoZW0gbm90IHRvIGNhc3Qgc3VjaCBhIHNsdXIgb24gaGlzIGZhbWlseSwgYW5kIHNhaWQgdGhhdCBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyIHRoZXJlIHdhcyB1bml0ZWQgdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIHZhbG9yLCB3aXRoIHRoZSBtb3N0IGNvbnN1bW1hdGUKICAgICAgICAgICAgICAgICAgICBwcnVkZW5jZTsgYW5kIHRoYXQgaGUgdG9vLCBub3R3aXRoc3RhbmRpbmcgaGlzIGFnZSwgYW5kIGFsbCB0aGUgZXhwbG9pdHMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcGVyZm9ybWVkLCB3b3VsZCBhdHRlbmQgaGlzIGJyb3RoZXIgYXMgaGlzIGxpZXV0ZW5hbnQuIEFuZCBhZnRlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBzYWlkIHRoaXMsIG5vdGhpbmcgd2FzIGNoYW5nZWQgaW4gcmVzcGVjdCB0byBTY2lwaW8ncyBwcm92aW5jZTsgbm9yIHdhcyBhbnkKICAgICAgICAgICAgICAgICAgICBleHRyYW9yZGluYXJ5IGNvbW1hbmQgc291Z2h0IGZvciBhbnkgbW9yZSBpbiB0aGF0IHdhciB0aGFuIGluIHRob3NlIHR3byB0ZXJyaWJsZQogICAgICAgICAgICAgICAgICAgIFB1bmljIHdhcnMgd2hpY2ggaGFkIHByZWNlZGVkIGl0LCB3aGljaCB3ZXJlIGNhcnJpZWQgb24gYW5kIGNvbmR1Y3RlZCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0aW9uIGVpdGhlciBieSB0aGUgY29uc3VscyBvciBieSBkaWN0YXRvcnM7IG9yIHRoYW4gaW4gdGhlIHdhciB3aXRoCiAgICAgICAgICAgICAgICAgICAgUHlycmh1cywgb3IgaW4gdGhhdCB3aXRoIFBoaWxpcHB1cywgb3IgYWZ0ZXJ3YXJkIGluIHRoZSBBY2hhZWFuIHdhciwgb3IgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdGhpcmQgUHVuaWMgd2FyOyBmb3Igd2hpY2ggbGFzdCB0aGUgUm9tYW4gcGVvcGxlIHRvb2sgZ3JlYXQgY2FyZSB0byBzZWxlY3QgYQogICAgICAgICAgICAgICAgICAgIHN1aXRhYmxlIGdlbmVyYWwsIFB1YmxpdXMgU2NpcGlvLCBidXQgYXQgdGhlIHNhbWUgdGltZSBpdCBhcHBvaW50ZWQgaGltIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN1bHNoaXAgaW4gb3JkZXIgdG8gY29uZHVjdCBpdC4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGFuIGV4dHJhb3JkaW5hcnkgY29tbWlzc2lvbiBpcyBhIG1lYXN1cmUgc3VpdGVkIHJhdGhlcgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBmaWNrbGUgY2hhcmFjdGVyIG9mIHRoZSBtb2I7IG9uZSB3aGljaCBkb2VzIG5vdCBhdCBhbGwgYmVjb21lIG91ciBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgb3IgdGhpcyBhc3NlbWJseS4gSW4gdGhlIHdhciBhZ2FpbnN0IEFudGlvY2h1cywgYSBncmVhdCBhbmQgaW1wb3J0YW50IHdhciwgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGhhZCBmYWxsZW4gYnkgbG90IHRvIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIFNjaXBpbyBhcyBoaXMgcHJvdmluY2UsIGFuZCB3aGVuIGhlIHdhcyB0aG91Z2h0IHRvIGhhdmUgaGFyZGx5IHNwaXJpdCBhbmQgaGFyZGx5CiAgICAgICAgICAgICAgICAgICAgdmlnb3IgZW5vdWdoIGZvciBpdDsgYW5kIHdoZW4gdGhlIHNlbmF0ZSB3YXMgaW5jbGluZWQgdG8gZW50cnVzdCB0aGUgYnVzaW5lc3MgdG8KICAgICAgICAgICAgICAgICAgICBoaXMgY29sbGVhZ3VlIENhaXVzIExhZWxpdXMsIHRoZSBmYXRoZXIgb2YgdGhpcyBMYWVsaXVzLCB3aG8gd2FzIHN1cm5hbWVkIHRoZQogICAgICAgICAgICAgICAgICAgIFdpc2U7IFB1YmxpdXMgQWZyaWNhbnVzLCB0aGUgZWxkZXIgYnJvdGhlciBvZiBMdWNpdXMgU2NpcGlvLCByb3NlIHVwLCBhbmQKICAgICAgICAgICAgICAgICAgICBlbnRyZWF0ZWQgdGhlbSBub3QgdG8gY2FzdCBzdWNoIGEgc2x1ciBvbiBoaXMgZmFtaWx5LCBhbmQgc2FpZCB0aGF0IGluIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgdGhlcmUgd2FzIHVuaXRlZCB0aGUgZ3JlYXRlc3QgcG9zc2libGUgdmFsb3IsIHdpdGggdGhlIG1vc3QgY29uc3VtbWF0ZQogICAgICAgICAgICAgICAgICAgIHBydWRlbmNlOyBhbmQgdGhhdCBoZSB0b28sIG5vdHdpdGhzdGFuZGluZyBoaXMgYWdlLCBhbmQgYWxsIHRoZSBleHBsb2l0cyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBwZXJmb3JtZWQsIHdvdWxkIGF0dGVuZCBoaXMgYnJvdGhlciBhcyBoaXMgbGlldXRlbmFudC4gQW5kIGFmdGVyIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHNhaWQgdGhpcywgbm90aGluZyB3YXMgY2hhbmdlZCBpbiByZXNwZWN0IHRvIFNjaXBpbydzIHByb3ZpbmNlOyBub3Igd2FzIGFueQogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkgY29tbWFuZCBzb3VnaHQgZm9yIGFueSBtb3JlIGluIHRoYXQgd2FyIHRoYW4gaW4gdGhvc2UgdHdvIHRlcnJpYmxlCiAgICAgICAgICAgICAgICAgICAgUHVuaWMgd2FycyB3aGljaCBoYWQgcHJlY2VkZWQgaXQsIHdoaWNoIHdlcmUgY2FycmllZCBvbiBhbmQgY29uZHVjdGVkIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVybWluYXRpb24gZWl0aGVyIGJ5IHRoZSBjb25zdWxzIG9yIGJ5IGRpY3RhdG9yczsgb3IgdGhhbiBpbiB0aGUgd2FyIHdpdGgKICAgICAgICAgICAgICAgICAgICBQeXJyaHVzLCBvciBpbiB0aGF0IHdpdGggUGhpbGlwcHVzLCBvciBhZnRlcndhcmQgaW4gdGhlIEFjaGFlYW4gd2FyLCBvciBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlyZCBQdW5pYyB3YXI7IGZvciB3aGljaCBsYXN0IHRoZSBSb21hbiBwZW9wbGUgdG9vayBncmVhdCBjYXJlIHRvIHNlbGVjdCBhCiAgICAgICAgICAgICAgICAgICAgc3VpdGFibGUgZ2VuZXJhbCwgUHVibGl1cyBTY2lwaW8sIGJ1dCBhdCB0aGUgc2FtZSB0aW1lIGl0IGFwcG9pbnRlZCBoaW0gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3Vsc2hpcCBpbiBvcmRlciB0byBjb25kdWN0IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['11.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['11.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldhciB3YXMgdG8gYmUgd2FnZWQgYWdhaW5zdCBBcmlzdG9uaWN1cyBpbiB0aGUgY29uc3Vsc2hpcCBvZiBQdWJsaXVzIExpY2luaXVzIGFuZAogICAgICAgICAgICAgICAgICAgIEx1Y2l1cy4gVmFsZXJpdXMuIFRoZSBwZW9wbGUgY29uc3VsdGVkIGFzIHRvIHdob20gaXQgd2lzaGVkIHRvIGhhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuYWdlbWVudCBvZiB0aGF0IHdhci4gQ3Jhc3N1cywgdGhlIGNvbnN1bCBhbmQgUG9udGlmZXggTWF4aW11cywgdGhyZWF0ZW5lZCB0bwogICAgICAgICAgICAgICAgICAgIGltcG9zZSBhIGZpbmUgdXBvbiBGbGFjY3VzIGhpcyBjb2xsZWFndWUsIHRoZSBwcmllc3Qgb2YgTWFycywgaWYgaGUgZGVzZXJ0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FjcmlmaWNlcy4gQW5kIHRob3VnaCB0aGUgcGVvcGxlIHJlbWl0dGVkIHRoZSBmaW5lLCBzdGlsbCB0aGV5IG9yZGVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpZXN0IHRvIHN1Ym1pdCB0byB0aGUgY29tbWFuZHMgb2YgdGhlIHBvbnRpZmYuIEJ1dCBldmVuIHRoZW4gdGhlIFJvbWFuIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgY29tbWl0IHRoZSBtYW5hZ2VtZW50IG9mIHRoZSB3YXIgdG8gYSBwcml2YXRlIGluZGl2aWR1YWw7IGFsdGhvdWdoIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2FzIEFmcmljYW51cywgd2hvIHRoZSB5ZWFyIGJlZm9yZSBoYWQgY2VsZWJyYXRlZCBhIHRyaXVtcGggb3ZlciB0aGUgcGVvcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3NTExIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTc1MTEiPk51bWFudGlhPC9wbGFjZU5hbWU+OyBhbmQgd2hvIHdhcyBmYXIgc3VwZXJpb3IKICAgICAgICAgICAgICAgICAgICB0byBhbGwgbWVuIGluIG1hcnRpYWwgcmVub3duIGFuZCBtaWxpdGFyeSBza2lsbDsgeWV0IGhlIG9ubHkgZ2FpbmVkIHRoZSB2b3RlcyBvZgogICAgICAgICAgICAgICAgICAgIHR3byB0cmlidW5lcy4gQW5kIGFjY29yZGluZ2x5IHRoZSBSb21hbiBwZW9wbGUgZW50cnVzdGVkIHRoZSBtYW5hZ2VtZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdhciB0byBDcmFzc3VzIHRoZSBjb25zdWwgcmF0aGVyIHRoYW4gdG8gdGhlIHByaXZhdGUgaW5kaXZpZHVhbCBBZnJpY2FudXMuIEFzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1hbmRzIGdpdmVuIHRvIENuYWV1cyBQb21wZWl1cywgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgdGhhdCBmaXJzdCBvZgogICAgICAgICAgICAgICAgICAgIG1lbiwgdGhleSB3ZXJlIGNhcnJpZWQgYnkgc29tZSB0dXJidWxlbnQgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZS4gRm9yIHRoZSB3YXIKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IFNlcnRvcml1cyB3YXMgb25seSBnaXZlbiBieSB0aGUgc2VuYXRlIHRvIGEgcHJpdmF0ZSBpbmRpdmlkdWFsIGJlY2F1c2UKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3VscyByZWZ1c2VkIGl0OyB3aGVuIEx1Y2l1cyBQaGlsaXBwdXMgc2FpZCB0aGF0IGhlIHNlbnQgdGhlIGdlbmVyYWwgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcGxhY2Ugb2YgdGhlIHR3byBjb25zdWxzLCBub3QgYXMgcHJvY29uc3VsLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzUxMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3NTExIj5OdW1hbnRpYTwvcGxhY2VOYW1lPjsgYW5kIHdobyB3YXMgZmFyIHN1cGVyaW9yCiAgICAgICAgICAgICAgICAgICAgdG8gYWxsIG1lbiBpbiBtYXJ0aWFsIHJlbm93biBhbmQgbWlsaXRhcnkgc2tpbGw7IHlldCBoZSBvbmx5IGdhaW5lZCB0aGUgdm90ZXMgb2YKICAgICAgICAgICAgICAgICAgICB0d28gdHJpYnVuZXMuIEFuZCBhY2NvcmRpbmdseSB0aGUgUm9tYW4gcGVvcGxlIGVudHJ1c3RlZCB0aGUgbWFuYWdlbWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3YXIgdG8gQ3Jhc3N1cyB0aGUgY29uc3VsIHJhdGhlciB0aGFuIHRvIHRoZSBwcml2YXRlIGluZGl2aWR1YWwgQWZyaWNhbnVzLiBBcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tYW5kcyBnaXZlbiB0byBDbmFldXMgUG9tcGVpdXMsIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBtYW4sIHRoYXQgZmlyc3Qgb2YKICAgICAgICAgICAgICAgICAgICBtZW4sIHRoZXkgd2VyZSBjYXJyaWVkIGJ5IHNvbWUgdHVyYnVsZW50IHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUuIEZvciB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBTZXJ0b3JpdXMgd2FzIG9ubHkgZ2l2ZW4gYnkgdGhlIHNlbmF0ZSB0byBhIHByaXZhdGUgaW5kaXZpZHVhbCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN1bHMgcmVmdXNlZCBpdDsgd2hlbiBMdWNpdXMgUGhpbGlwcHVzIHNhaWQgdGhhdCBoZSBzZW50IHRoZSBnZW5lcmFsIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHBsYWNlIG9mIHRoZSB0d28gY29uc3Vscywgbm90IGFzIHByb2NvbnN1bC4gPC90cmFuc2xhdGlvbj4="
translation['11.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCB0aGVuIGlzIHRoZSBvYmplY3Qgb2YgdGhlc2UgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4/IG9yIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgbWVhbmluZyBvZiB0aGlzIGNhbnZhc3Npbmcgd2hpY2ggdGhhdCBtb3N0IHdpc2UgYW5kIGRpZ25pZmllZCBjaXRpemVuLAogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBDYWVzYXIsIGhhcyBpbnRyb2R1Y2VkIGludG8gdGhlIHNlbmF0ZT8gSGUgaGFzIHByb3Bvc2VkIHRvIHZvdGUgYQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IGNvbW1hbmQgdG8gb25lIHdobyBpcyBjZXJ0YWlubHkgYSBtb3N0IGlsbHVzdHJpb3VzIGFuZCB1bmltcGVhY2hhYmxlCiAgICAgICAgICAgICAgICAgICAgbWFuLCBidXQgc3RpbGwgb25seSBhIHByaXZhdGUgaW5kaXZpZHVhbC4gQW5kIGJ5IGRvaW5nIHNvIGhlIGhhcyBpbXBvc2VkIGEgaGVhdnkKICAgICAgICAgICAgICAgICAgICBidXJkZW4gdXBvbiB1cy4gU3VwcG9zZSBJIGFncmVlOyBzaGFsbCBJIGJ5IHNvIGRvaW5nIGNvdW50ZW5hbmNlIHRoZQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbiBvZiB0aGUgcHJhY3RpY2Ugb2YgY2FudmFzc2luZyBpbnRvIHRoZSBzZW5hdGUtaG91c2U/IFN1cHBvc2UgSSB2b3RlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBpdDsgc2hhbGwgSSBhcHBlYXIgYXMgaWYgSSB3ZXJlIGluIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiB0byBoYXZlIHJlZnVzZWQgYW4gaG9ub3IgdG8gYSBtYW4gd2hvIGlzIG9uZSBvZiBteQogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXN0IGZyaWVuZHM/IEJ1dCBpZiB3ZSBhcmUgdG8gaGF2ZSB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2VuYXRlLCBsZXQgdXMgYXNrIGZvciB2b3RlcywgbGV0IHVzIGNhbnZhc3M7IGxldCBhIHZvdGluZy10YWJsZXQgYmUKICAgICAgICAgICAgICAgICAgICBnaXZlbiB1cywganVzdCBhcyBvbmUgaXMgZ2l2ZW4gdG8gdGhlIHBlb3BsZS4gV2h5IGRvIHlvdSwgTyBDYWVzYXIsIGFsbG93IGl0IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgc28gbWFuYWdlZCB0aGF0IGVpdGhlciBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBpZiB5b3VyIHByb3Bvc2l0aW9uIGJlIG5vdAogICAgICAgICAgICAgICAgICAgIGFncmVlZCB0bywgc2hhbGwgYXBwZWFyIHRvIGhhdmUgcmVjZWl2ZWQgYSByZXB1bHNlLCBvciBlbHNlIHRoYXQgb25lIG9mIHVzIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHRvIGhhdmUgYmVlbiBwYXNzZWQgb3ZlciwgaWYsIHdoaWxlIHdlIHdlcmUgbWVuIG9mIGVxdWFsIGRpZ25pdHksIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCBjb25zaWRlcmVkIHdvcnRoeSBvZiBlcXVhbCBob25vcj8gPC9wPgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4/IG9yIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgbWVhbmluZyBvZiB0aGlzIGNhbnZhc3Npbmcgd2hpY2ggdGhhdCBtb3N0IHdpc2UgYW5kIGRpZ25pZmllZCBjaXRpemVuLAogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBDYWVzYXIsIGhhcyBpbnRyb2R1Y2VkIGludG8gdGhlIHNlbmF0ZT8gSGUgaGFzIHByb3Bvc2VkIHRvIHZvdGUgYQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IGNvbW1hbmQgdG8gb25lIHdobyBpcyBjZXJ0YWlubHkgYSBtb3N0IGlsbHVzdHJpb3VzIGFuZCB1bmltcGVhY2hhYmxlCiAgICAgICAgICAgICAgICAgICAgbWFuLCBidXQgc3RpbGwgb25seSBhIHByaXZhdGUgaW5kaXZpZHVhbC4gQW5kIGJ5IGRvaW5nIHNvIGhlIGhhcyBpbXBvc2VkIGEgaGVhdnkKICAgICAgICAgICAgICAgICAgICBidXJkZW4gdXBvbiB1cy4gU3VwcG9zZSBJIGFncmVlOyBzaGFsbCBJIGJ5IHNvIGRvaW5nIGNvdW50ZW5hbmNlIHRoZQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbiBvZiB0aGUgcHJhY3RpY2Ugb2YgY2FudmFzc2luZyBpbnRvIHRoZSBzZW5hdGUtaG91c2U/IFN1cHBvc2UgSSB2b3RlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBpdDsgc2hhbGwgSSBhcHBlYXIgYXMgaWYgSSB3ZXJlIGluIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiB0byBoYXZlIHJlZnVzZWQgYW4gaG9ub3IgdG8gYSBtYW4gd2hvIGlzIG9uZSBvZiBteQogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXN0IGZyaWVuZHM/IEJ1dCBpZiB3ZSBhcmUgdG8gaGF2ZSB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2VuYXRlLCBsZXQgdXMgYXNrIGZvciB2b3RlcywgbGV0IHVzIGNhbnZhc3M7IGxldCBhIHZvdGluZy10YWJsZXQgYmUKICAgICAgICAgICAgICAgICAgICBnaXZlbiB1cywganVzdCBhcyBvbmUgaXMgZ2l2ZW4gdG8gdGhlIHBlb3BsZS4gV2h5IGRvIHlvdSwgTyBDYWVzYXIsIGFsbG93IGl0IHRvCiAgICAgICAgICAgICAgICAgICAgYmUgc28gbWFuYWdlZCB0aGF0IGVpdGhlciBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBpZiB5b3VyIHByb3Bvc2l0aW9uIGJlIG5vdAogICAgICAgICAgICAgICAgICAgIGFncmVlZCB0bywgc2hhbGwgYXBwZWFyIHRvIGhhdmUgcmVjZWl2ZWQgYSByZXB1bHNlLCBvciBlbHNlIHRoYXQgb25lIG9mIHVzIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHRvIGhhdmUgYmVlbiBwYXNzZWQgb3ZlciwgaWYsIHdoaWxlIHdlIHdlcmUgbWVuIG9mIGVxdWFsIGRpZ25pdHksIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCBjb25zaWRlcmVkIHdvcnRoeSBvZiBlcXVhbCBob25vcj8gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCAoZm9yIHRoaXMgaXMgd2hhdCBJIGhlYXIgaXMgc2FpZCksIEkKICAgICAgICAgICAgICAgICAgICBteXNlbGYgZ2F2ZSBieSBteSBvd24gdm90ZSBhbiBleHRyYW9yZGluYXJ5IGNvbW1pc3Npb24gdG8gQ2FpdXMgQ2Flc2FyLiBZZXMsCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkLCBmb3IgaGUgaGFkIGdpdmVuIG1lIGV4dHJhb3JkaW5hcnkgcHJvdGVjdGlvbjsgd2hlbiBJIHNheSBtZSwgSSBtZWFuIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGdpdmVuIGl0IHRvIHRoZSBzZW5hdGUgYW5kIHRvIHRoZSBSb21hbiBwZW9wbGUuIFdhcyBJIHRvIHJlZnVzZSBnaXZpbmcgYW4KICAgICAgICAgICAgICAgICAgICBleHRyYW9yZGluYXJ5IG1pbGl0YXJ5IGNvbW1hbmQgdG8gdGhhdCBtYW4gZnJvbSB3aG9tIHRoZSByZXB1YmxpYyBoYWQgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIHdoaWNoIGhhZCBuZXZlciBldmVuIGJlZW4gdGhvdWdodCBvZiwgYnV0IHRoYXQgc3RpbGwgd2FzIG9mIHNvIG11Y2gKICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSB0aGF0IHdpdGhvdXQgaXQgc2hlIGNvdWxkIG5vdCBoYXZlIGJlZW4gc2FmZT8gVGhlcmUgd2VyZSBvbmx5IHRoZQogICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlcyBvZiB0YWtpbmcgaGlzIGFybXkgZnJvbSBoaW0sIG9yIGdpdmluZyBoaW0gc3VjaCBhIGNvbW1hbmQuIEZvciBvbgogICAgICAgICAgICAgICAgICAgIHdoYXQgcHJpbmNpcGxlIG9yIGJ5IHdoYXQgbWVhbnMgY2FuIGFuIGFybXkgYmUgcmV0YWluZWQgYnkgYSBtYW4gd2hvIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBiZWVuIGludmVzdGVkIHdpdGggYW55IG1pbGl0YXJ5IGNvbW1hbmQ/IFdlIG11c3Qgbm90LCB0aGVyZWZvcmUsIHRoaW5rIHRoYXQgYQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGhhcyBiZWVuIGdpdmVuIHRvIGEgbWFuIHdoaWNoIGhhcywgaW4gZmFjdCwgbm90IGJlZW4gdGFrZW4gYXdheSBmcm9tIGhpbS4KICAgICAgICAgICAgICAgICAgICBZb3Ugd291bGQsIE8gY29uc2NyaXB0IGZhdGhlcnMgaGF2ZSB0YWtlbiBhIGNvbW1hbmQgYXdheSBmcm9tIENhaXVzIENhZXNhciwgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgaGFkIG5vdCBnaXZlbiBoaW0gb25lLiBUaGUgdmV0ZXJhbiBzb2xkaWVycywgd2hvLCBmb2xsb3dpbmcgaGlzIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIGFuZCBjb21tYW5kIGFuZCBuYW1lLCBoYWQgdGFrZW4gdXAgYXJtcyBpbiB0aGUgY2F1c2Ugb2YgdGhlIHJlcHVibGljLCBkZXNpcmVkIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgY29tbWFuZGVkIGJ5IGhpbS4gVGhlIE1hcnRpYWwgbGVnaW9uIGFuZCB0aGUgZm91cnRoIGxlZ2lvbiBoYWQgc3VibWl0dGVkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCBhbmQgaGFkIGRldm90ZWQgdGhlbXNlbHZlcyB0byB1cGhvbGQgdGhlIGRpZ25pdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMsIGluIHN1Y2ggYSB3YXkgYXMgdG8gZmVlbCB0aGF0IHRoZXkgaGFkIGEgcmlnaHQgdG8gZGVtYW5kIENhaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIGZvciB0aGVpciBjb21tYW5kZXIuIEl0IHdhcyB0aGUgbmVjZXNzaXR5IG9mIHRoZSB3YXIgdGhhdCBpbnZlc3RlZCBDYWl1cwogICAgICAgICAgICAgICAgICAgIENhZXNhciB3aXRoIG1pbGl0YXJ5IGNvbW1hbmQ7IHRoZSBzZW5hdGUgb25seSBnYXZlIGhpbSB0aGUgZW5zaWducyBvZiBpdC4gQnV0IEkKICAgICAgICAgICAgICAgICAgICBiZWcgeW91IHRvIHRlbGwgbWUsIE8gTHVjaXVzLiBDYWVzYXIs4oCUSSBhbSBhd2FyZSB0aGF0IEkgYW0gYXJndWluZwogICAgICAgICAgICAgICAgICAgIHdpdGggYSBtYW4gb2YgdGhlIGdyZWF0ZXN0IGV4cGVyaWVuY2Us4oCUd2hlbiBkaWQgdGhlIHNlbmF0ZSBldmVyIGNvbmZlcgogICAgICAgICAgICAgICAgICAgIGEgbWlsaXRhcnkgY29tbWFuZCBvbiBhIHByaXZhdGUgaW5kaXZpZHVhbCB3aG8gd2FzIGluIGEgc3RhdGUgb2YgaW5hY3Rpdml0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZG9pbmcgbm90aGluZz8gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IChmb3IgdGhpcyBpcyB3aGF0IEkgaGVhciBpcyBzYWlkKSwgSQogICAgICAgICAgICAgICAgICAgIG15c2VsZiBnYXZlIGJ5IG15IG93biB2b3RlIGFuIGV4dHJhb3JkaW5hcnkgY29tbWlzc2lvbiB0byBDYWl1cyBDYWVzYXIuIFllcywKICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIGZvciBoZSBoYWQgZ2l2ZW4gbWUgZXh0cmFvcmRpbmFyeSBwcm90ZWN0aW9uOyB3aGVuIEkgc2F5IG1lLCBJIG1lYW4gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgZ2l2ZW4gaXQgdG8gdGhlIHNlbmF0ZSBhbmQgdG8gdGhlIFJvbWFuIHBlb3BsZS4gV2FzIEkgdG8gcmVmdXNlIGdpdmluZyBhbgogICAgICAgICAgICAgICAgICAgIGV4dHJhb3JkaW5hcnkgbWlsaXRhcnkgY29tbWFuZCB0byB0aGF0IG1hbiBmcm9tIHdob20gdGhlIHJlcHVibGljIGhhZCByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gd2hpY2ggaGFkIG5ldmVyIGV2ZW4gYmVlbiB0aG91Z2h0IG9mLCBidXQgdGhhdCBzdGlsbCB3YXMgb2Ygc28gbXVjaAogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIHRoYXQgd2l0aG91dCBpdCBzaGUgY291bGQgbm90IGhhdmUgYmVlbiBzYWZlPyBUaGVyZSB3ZXJlIG9ubHkgdGhlCiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmVzIG9mIHRha2luZyBoaXMgYXJteSBmcm9tIGhpbSwgb3IgZ2l2aW5nIGhpbSBzdWNoIGEgY29tbWFuZC4gRm9yIG9uCiAgICAgICAgICAgICAgICAgICAgd2hhdCBwcmluY2lwbGUgb3IgYnkgd2hhdCBtZWFucyBjYW4gYW4gYXJteSBiZSByZXRhaW5lZCBieSBhIG1hbiB3aG8gaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIGJlZW4gaW52ZXN0ZWQgd2l0aCBhbnkgbWlsaXRhcnkgY29tbWFuZD8gV2UgbXVzdCBub3QsIHRoZXJlZm9yZSwgdGhpbmsgdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgdGhpbmcgaGFzIGJlZW4gZ2l2ZW4gdG8gYSBtYW4gd2hpY2ggaGFzLCBpbiBmYWN0LCBub3QgYmVlbiB0YWtlbiBhd2F5IGZyb20gaGltLgogICAgICAgICAgICAgICAgICAgIFlvdSB3b3VsZCwgTyBjb25zY3JpcHQgZmF0aGVycyBoYXZlIHRha2VuIGEgY29tbWFuZCBhd2F5IGZyb20gQ2FpdXMgQ2Flc2FyLCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBoYWQgbm90IGdpdmVuIGhpbSBvbmUuIFRoZSB2ZXRlcmFuIHNvbGRpZXJzLCB3aG8sIGZvbGxvd2luZyBoaXMgYXV0aG9yaXR5CiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbW1hbmQgYW5kIG5hbWUsIGhhZCB0YWtlbiB1cCBhcm1zIGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMsIGRlc2lyZWQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBjb21tYW5kZWQgYnkgaGltLiBUaGUgTWFydGlhbCBsZWdpb24gYW5kIHRoZSBmb3VydGggbGVnaW9uIGhhZCBzdWJtaXR0ZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUsIGFuZCBoYWQgZGV2b3RlZCB0aGVtc2VsdmVzIHRvIHVwaG9sZCB0aGUgZGlnbml0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYywgaW4gc3VjaCBhIHdheSBhcyB0byBmZWVsIHRoYXQgdGhleSBoYWQgYSByaWdodCB0byBkZW1hbmQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgZm9yIHRoZWlyIGNvbW1hbmRlci4gSXQgd2FzIHRoZSBuZWNlc3NpdHkgb2YgdGhlIHdhciB0aGF0IGludmVzdGVkIENhaXVzCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIHdpdGggbWlsaXRhcnkgY29tbWFuZDsgdGhlIHNlbmF0ZSBvbmx5IGdhdmUgaGltIHRoZSBlbnNpZ25zIG9mIGl0LiBCdXQgSQogICAgICAgICAgICAgICAgICAgIGJlZyB5b3UgdG8gdGVsbCBtZSwgTyBMdWNpdXMuIENhZXNhcizigJRJIGFtIGF3YXJlIHRoYXQgSSBhbSBhcmd1aW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgZXhwZXJpZW5jZSzigJR3aGVuIGRpZCB0aGUgc2VuYXRlIGV2ZXIgY29uZmVyCiAgICAgICAgICAgICAgICAgICAgYSBtaWxpdGFyeSBjb21tYW5kIG9uIGEgcHJpdmF0ZSBpbmRpdmlkdWFsIHdobyB3YXMgaW4gYSBzdGF0ZSBvZiBpbmFjdGl2aXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBkb2luZyBub3RoaW5nPyA8L3RyYW5zbGF0aW9uPg=="
translation['11.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SG93ZXZlciwgSSBoYXZlIGJlZW4gc3BlYWtpbmcgaGl0aGVydG8gdG8gYXZvaWQgdGhlIGFwcGVhcmFuY2Ugb2YgZ3JhdHVpdG91c2x5CiAgICAgICAgICAgICAgICAgICAgb3Bwb3NpbmcgYSBtYW4gd2hvIGlzIGEgZ3JlYXQgZnJpZW5kIG9mIG1pbmUsIGFuZCB3aG8gaGFzIHNob3dlZCBtZSBncmVhdAogICAgICAgICAgICAgICAgICAgIGtpbmRuZXNzLiBBbHRob3VnaCwgY2FuIG9uZSBkZW55IGEgdGhpbmcgdG8gYSBwZXJzb24gd2hvIG5vdCBvbmx5IGRvZXMgbm90IGFzawogICAgICAgICAgICAgICAgICAgIGZvciBpdCwgYnV0IHdobyBldmVuIHJlZnVzZXMgaXQ/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgcHJvcG9zaXRpb24gaXMgdW5zdWl0ZWQgdG8gdGhlIGRpZ25pdHkgb2YgdGhlIGNvbnN1bHMsCiAgICAgICAgICAgICAgICAgICAgdW5zdWl0ZWQgdG8gdGhlIGNyaXRpY2FsIGNoYXJhY3RlciBvZiB0aGUgdGltZXM7IG5hbWVseSwgdGhlIHByb3Bvc2l0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3VscywgZm9yIHRoZSBzYWtlIG9mIHB1cnN1aW5nIERvbGFiZWxsYSwgc2hhbGwgaGF2ZSB0aGUgcHJvdmluY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4gYWxsb3R0ZWQgdG8gdGhlbS4gSSB3aWxsIGV4cGxhaW4gd2h5IGl0CiAgICAgICAgICAgICAgICAgICAgaXMgaW5leHBlZGllbnQgZm9yIHRoZSByZXB1YmxpYzsgYnV0IGZpcnN0IG9mIGFsbCwgY29uc2lkZXIgd2hhdCBpZ25vbWlueSBpdAogICAgICAgICAgICAgICAgICAgIGZpeGVzIG9uIHRoZSBjb25zdWxzLiBXaGVuIGEgY29uc3VsIGVsZWN0IGlzIGJlaW5nIGJlc2llZ2VkLCB3aGVuIHRoZSBzYWZldHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMgZGVwZW5kcyB1cG9uIGhpcyBsaWJlcmF0aW9uLCB3aGVuIG1pc2NoaWV2b3VzIGFuZCBwYXJyaWNpZGFsCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgaGF2ZSByZXZvbHRlZCBmcm9tIHRoZSByZXB1YmxpYywgYW5kIHdoZW4gd2UgYXJlIGNhcnJ5aW5nIG9uIGEgd2FyIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2UgYXJlIGZpZ2h0aW5nIGZvciBvdXIgZGlnbml0eSwgZm9yIG91ciBmcmVlZG9tLCBhbmQgZm9yIG91ciBsaXZlczsgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiwgaWYgYW55IG9uZSBmYWxscyBpbnRvIHRoZSBwb3dlciBvZiBBbnRvbml1cywgdG9ydHVyZXMgYW5kIHRvcm1lbnRzIGFyZQogICAgICAgICAgICAgICAgICAgIHByZXBhcmVkIGZvciBoaW07IGFuZCB3aGVuIHRoZSBzdHJ1Z2dsZSBmb3IgYWxsIHRoZXNlIG9iamVjdHMgaGFzIGJlZW4gY29tbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGVudHJ1c3RlZCB0byBvdXIgbW9zdCBhZG1pcmFibGUgYW5kIGdhbGxhbnQgY29uc3VscyzigJRzaGFsbCBhbnkKICAgICAgICAgICAgICAgICAgICBtZW50aW9uIGJlIG1hZGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiwgc28gdGhhdCB3ZSBtYXkgYXBwZWFyIHRvIGhhdmUgZ2l2ZW4gYW55CiAgICAgICAgICAgICAgICAgICAgaW5qdXJpb3VzIGNhdXNlIGZvciBvdGhlcnMgdG8gZW50ZXJ0YWluIHN1c3BpY2lvbiBvZiB1cywgb3IgdG8gYnJpbmcgdXMgaW50bwogICAgICAgICAgICAgICAgICAgIHVucG9wdWxhcml0eT8gPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSBkbyBpbmRlZWQgcHJvcG9zZSBpdCwKICAgICAgICAgICAgICAgICAgICDigJxhZnRlciBoYXZpbmcgbGliZXJhdGVkIEJydXR1cyzigJ3igJRmb3IgdGhvc2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXN0IHdvcmRzIG9mIHRoZSBwcm9wb3NhbDsgc2F5IHJhdGhlciwgYWZ0ZXIgaGF2aW5nIGRlc2VydGVkLCBhYmFuZG9uZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJldHJheWVkIGhpbS4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgcHJvcG9zaXRpb24gaXMgdW5zdWl0ZWQgdG8gdGhlIGRpZ25pdHkgb2YgdGhlIGNvbnN1bHMsCiAgICAgICAgICAgICAgICAgICAgdW5zdWl0ZWQgdG8gdGhlIGNyaXRpY2FsIGNoYXJhY3RlciBvZiB0aGUgdGltZXM7IG5hbWVseSwgdGhlIHByb3Bvc2l0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3VscywgZm9yIHRoZSBzYWtlIG9mIHB1cnN1aW5nIERvbGFiZWxsYSwgc2hhbGwgaGF2ZSB0aGUgcHJvdmluY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+IGFsbG90dGVkIHRvIHRoZW0uIEkgd2lsbCBleHBsYWluIHdoeSBpdAogICAgICAgICAgICAgICAgICAgIGlzIGluZXhwZWRpZW50IGZvciB0aGUgcmVwdWJsaWM7IGJ1dCBmaXJzdCBvZiBhbGwsIGNvbnNpZGVyIHdoYXQgaWdub21pbnkgaXQKICAgICAgICAgICAgICAgICAgICBmaXhlcyBvbiB0aGUgY29uc3Vscy4gV2hlbiBhIGNvbnN1bCBlbGVjdCBpcyBiZWluZyBiZXNpZWdlZCwgd2hlbiB0aGUgc2FmZXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljIGRlcGVuZHMgdXBvbiBoaXMgbGliZXJhdGlvbiwgd2hlbiBtaXNjaGlldm91cyBhbmQgcGFycmljaWRhbAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGhhdmUgcmV2b2x0ZWQgZnJvbSB0aGUgcmVwdWJsaWMsIGFuZCB3aGVuIHdlIGFyZSBjYXJyeWluZyBvbiBhIHdhciBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlIGFyZSBmaWdodGluZyBmb3Igb3VyIGRpZ25pdHksIGZvciBvdXIgZnJlZWRvbSwgYW5kIGZvciBvdXIgbGl2ZXM7IGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4sIGlmIGFueSBvbmUgZmFsbHMgaW50byB0aGUgcG93ZXIgb2YgQW50b25pdXMsIHRvcnR1cmVzIGFuZCB0b3JtZW50cyBhcmUKICAgICAgICAgICAgICAgICAgICBwcmVwYXJlZCBmb3IgaGltOyBhbmQgd2hlbiB0aGUgc3RydWdnbGUgZm9yIGFsbCB0aGVzZSBvYmplY3RzIGhhcyBiZWVuIGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgIGFuZCBlbnRydXN0ZWQgdG8gb3VyIG1vc3QgYWRtaXJhYmxlIGFuZCBnYWxsYW50IGNvbnN1bHMs4oCUc2hhbGwgYW55CiAgICAgICAgICAgICAgICAgICAgbWVudGlvbiBiZSBtYWRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+LCBzbyB0aGF0IHdlIG1heSBhcHBlYXIgdG8gaGF2ZSBnaXZlbiBhbnkKICAgICAgICAgICAgICAgICAgICBpbmp1cmlvdXMgY2F1c2UgZm9yIG90aGVycyB0byBlbnRlcnRhaW4gc3VzcGljaW9uIG9mIHVzLCBvciB0byBicmluZyB1cyBpbnRvCiAgICAgICAgICAgICAgICAgICAgdW5wb3B1bGFyaXR5PyA8L3RyYW5zbGF0aW9uPg=="
translation['11.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSBkbyBpbmRlZWQgcHJvcG9zZSBpdCwKICAgICAgICAgICAgICAgICAgICDigJxhZnRlciBoYXZpbmcgbGliZXJhdGVkIEJydXR1cyzigJ3igJRmb3IgdGhvc2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXN0IHdvcmRzIG9mIHRoZSBwcm9wb3NhbDsgc2F5IHJhdGhlciwgYWZ0ZXIgaGF2aW5nIGRlc2VydGVkLCBhYmFuZG9uZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJldHJheWVkIGhpbS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgSSBzYXkgdGhhdCBhbnkgbWVudGlvbiB3aGF0ZXZlciBvZiBhbnkgcHJvdmluY2VzIGhhcyBiZWVuIG1hZGUgYXQgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgdW5zZWFzb25hYmxlIHRpbWUuIEZvciBhbHRob3VnaCB5b3VyIG1pbmQsIE8gQ2FpdXMgUGFuc2EsIGJlIGV2ZXIgc28gaW50ZW50LCBhcwogICAgICAgICAgICAgICAgICAgIGluZGVlZCBpdCBpcywgb24gZWZmZWN0aW5nIHRoZSBsaWJlcmF0aW9uIG9mIHRoZSBtb3N0IGJyYXZlIGFuZCBpbGx1c3RyaW91cyBvZgogICAgICAgICAgICAgICAgICAgIGFsbCBtZW4sIHN0aWxsIHRoZSBuYXR1cmUgb2YgdGhpbmdzIHdvdWxkIGNvbXBlbCB5b3UgaW5ldml0YWJseSBzb21ldGltZXMgdG8KICAgICAgICAgICAgICAgICAgICB0dXJuIHlvdXIgdGhvdWdodHMgdG8gdGhlIGlkZWEgb2YgcHVyc3VpbmcgQW50b25pdXMsIGFuZCB0byBkaXZlcnQgc29tZSBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgeW91ciBjYXJlIGFuZCBhdHRlbnRpb24gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICBTeXJpYSBCdXQgaWYgaXQgd2VyZSBwb3NzaWJsZSBJIGNvdWxkIHdpc2ggeW91IHRvIGhhdmUgbW9yZSBtaW5kcyB0aGFuIG9uZSBhbmQKICAgICAgICAgICAgICAgICAgICB5ZXQgdG8gZGlyZWN0IHRoZW0gYWxsIHVwb24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgIEJ1dCBzaW5jZSB0aGF0IGlzIGltcG9zc2libGUsIEkgZG8gd2lzaCB5b3UsIHdpdGggdGhhdCBtb3N0IHZpcnR1b3VzIGFuZCBhbGwKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaXNoZWQgbWluZCB3aGljaCB5b3UgaGF2ZSBnb3QsIHRvIHRoaW5rIG9mIG5vdGhpbmcgYnV0IEJydXR1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgdGhhdCBpbmRlZWQsIGlzIHdoYXQgeW91IGFyZSBkb2luZzsgdGhhdCBpcyB3aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBlc3BlY2lhbGx5IHN0cml2aW5nIGF0OyBidXQgc3RpbGwgbm8gbWFuIGNhbiwgSSB3aWxsIG5vdCBzYXkgZG8gdHdvCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzLCBlc3BlY2lhbGx5IHR3byBtb3N0IGltcG9ydGFudCB0aGluZ3MsIGF0IG9uZSB0aW1lLCBidXQgaGUgY2FuIG5vdCBldmVuCiAgICAgICAgICAgICAgICAgICAgZG8gZW50aXJlIGp1c3RpY2UgdG8gdGhlbSBib3RoIGluIGhpcyB0aG91Z2h0cy4gSXQgaXMgb3VyIGR1dHkgcmF0aGVyIHRvIHNwdXIgb24KICAgICAgICAgICAgICAgICAgICBhbmQgaW5mbGFtZSB0aGF0IGV4Y2VsbGVudCBlYWdlcm5lc3Mgb2YgeW91cnMsIGFuZCBub3QgdG8gdHJhbnNmZXIgYW55IHBvcnRpb24KICAgICAgICAgICAgICAgICAgICBvZiBpdCB0byBhbm90aGVyIG9iamVjdCBvZiBjYXJlIGluIGEgZGlmZmVyZW50IGRpcmVjdGlvbi4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgIFN5cmlhIEJ1dCBpZiBpdCB3ZXJlIHBvc3NpYmxlIEkgY291bGQgd2lzaCB5b3UgdG8gaGF2ZSBtb3JlIG1pbmRzIHRoYW4gb25lIGFuZAogICAgICAgICAgICAgICAgICAgIHlldCB0byBkaXJlY3QgdGhlbSBhbGwgdXBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgQnV0IHNpbmNlIHRoYXQgaXMgaW1wb3NzaWJsZSwgSSBkbyB3aXNoIHlvdSwgd2l0aCB0aGF0IG1vc3QgdmlydHVvdXMgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpc2hlZCBtaW5kIHdoaWNoIHlvdSBoYXZlIGdvdCwgdG8gdGhpbmsgb2Ygbm90aGluZyBidXQgQnJ1dHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoYXQgaW5kZWVkLCBpcyB3aGF0IHlvdSBhcmUgZG9pbmc7IHRoYXQgaXMgd2hhdAogICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgZXNwZWNpYWxseSBzdHJpdmluZyBhdDsgYnV0IHN0aWxsIG5vIG1hbiBjYW4sIEkgd2lsbCBub3Qgc2F5IGRvIHR3bwogICAgICAgICAgICAgICAgICAgIHRoaW5ncywgZXNwZWNpYWxseSB0d28gbW9zdCBpbXBvcnRhbnQgdGhpbmdzLCBhdCBvbmUgdGltZSwgYnV0IGhlIGNhbiBub3QgZXZlbgogICAgICAgICAgICAgICAgICAgIGRvIGVudGlyZSBqdXN0aWNlIHRvIHRoZW0gYm90aCBpbiBoaXMgdGhvdWdodHMuIEl0IGlzIG91ciBkdXR5IHJhdGhlciB0byBzcHVyIG9uCiAgICAgICAgICAgICAgICAgICAgYW5kIGluZmxhbWUgdGhhdCBleGNlbGxlbnQgZWFnZXJuZXNzIG9mIHlvdXJzLCBhbmQgbm90IHRvIHRyYW5zZmVyIGFueSBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgaXQgdG8gYW5vdGhlciBvYmplY3Qgb2YgY2FyZSBpbiBhIGRpZmZlcmVudCBkaXJlY3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['11.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFkZCB0byB0aGVzZSBjb25zaWRlcmF0aW9ucyB0aGUgd2F5IG1lbiB0YWxrLCB0aGUgd2F5IGluIHdoaWNoIHRoZXkgbm91cmlzaAogICAgICAgICAgICAgICAgICAgIHN1c3BpY2lvbiwgdGhlIHdheSBpbiB3aGljaCB0aGV5IHRha2UgZGlzbGlrZXMuIEltaXRhdGUgbWUgd2hvbSB5b3UgaGF2ZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBwcmFpc2VkOyBmb3IgSSByZWplY3RlZCBhIHByb3ZpbmNlIGZ1bGx5IGFwcG9pbnRlZCBhbmQgcHJvdmlkZWQgYnkgdGhlIHNlbmF0ZSwKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgZGlzY2FyZGluZyBhbGwgb3RoZXIgdGhvdWdodHMsIGFuZCBkZXZvdGluZyBhbGwgbXkgZWZmb3J0cyB0bwogICAgICAgICAgICAgICAgICAgIGV4dGluZ3Vpc2hpbmcgdGhlIGNvbmZsYWdyYXRpb24gdGhhdCB0aHJlYXRlbmVkIHRvIGNvbnN1bWUgbXkgY291bnRyeS4gVGhlcmUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm8gb25lIGV4Y2VwdCBtZSBhbG9uZSwgdG8gd2hvbSwgaW5kZWVkLCB5b3Ugd291bGQsIGluIGNvbnNpZGVyYXRpb24gb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgaW50aW1hY3ksIGhhdmUgYmVlbiBzdXJlIHRvIGNvbW11bmljYXRlIGFueSB0aGluZyB3aGljaCBjb25jZXJuZWQgeW91cgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cywgd2hvIHdvdWxkIGJlbGlldmUgdGhhdCB0aGUgcHJvdmluY2UgaGFkIGJlZW4gZGVjcmVlZCB0byB5b3UgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHlvdXIgd2lsbC4gSSBlbnRyZWF0IHlvdSwgY2hlY2ssIGFzIGlzIGR1ZSB0byB5b3VyIGVtaW5lbnQgd2lzZG9tLCB0aGlzIHJlcG9ydCwKICAgICAgICAgICAgICAgICAgICBhbmQgZG8gbm90IHNlZW0gdG8gYmUgZGVzaXJvdXMgb2YgdGhhdCB3aGljaCB5b3UgZG8gbm90IGluIHJlYWxpdHkgY2FyZSBhYm91dC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgeW91IHNob3VsZCB0YWtlIHRoZSBtb3JlIGNhcmUgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHBvaW50LCBiZWNhdXNlIHlvdXIgY29sbGVhZ3VlLCBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBjYW4gbm90IGZhbGwgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBzdXNwaWNpb24uIEhlIGtub3dzIG5vdGhpbmcgb2YgYWxsIHRoYXQgaXMgZ29pbmcgb24gaGVyZTsgaGUgc3VzcGVjdHMKICAgICAgICAgICAgICAgICAgICBub3RoaW5nOyBoZSBpcyBjb25kdWN0aW5nIHRoZSB3YXI7IGhlIGlzIHN0YW5kaW5nIGluIGJhdHRsZSBhcnJheTsgaGUgaXMKICAgICAgICAgICAgICAgICAgICBmaWdodGluZyBmb3IgaGlzIGJsb29kIGFuZCBmb3IgaGlzIGxpZmU7IGhlIHdpbGwgaGVhciBvZiB0aGUgcHJvdmluY2UgYmVpbmcKICAgICAgICAgICAgICAgICAgICBkZWNyZWVkIHRvIGhpbSBiZWZvcmUgaGUgY291bGQgaW1hZ2luZSB0aGF0IHRoZXJlIGhhZCBiZWVuIHRpbWUgZm9yIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcuIEkgYW0gYWZyYWlkIHRoYXQgb3VyIGFybWllcyB0b28sIHdoaWNoIGhhdmUgZGV2b3RlZCB0aGVtc2VsdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljLCBub3QgZnJvbSBhbnkgY29tcHVsc29yeSBsZXZ5LCBidXQgb2YgdGhlaXIgb3duIHZvbHVudGFyeSB6ZWFsLAogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY2hlY2tlZCBpbiB0aGVpciBhcmRvciwgaWYgdGhleSBzdXBwb3NlIHRoYXQgd2UgYXJlIHRoaW5raW5nIG9mIGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGJ1dCBpbnN0YW50IHdhci4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHlvdSBzaG91bGQgdGFrZSB0aGUgbW9yZSBjYXJlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBwb2ludCwgYmVjYXVzZSB5b3VyIGNvbGxlYWd1ZSwgYSBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgY2FuIG5vdCBmYWxsIHVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgc3VzcGljaW9uLiBIZSBrbm93cyBub3RoaW5nIG9mIGFsbCB0aGF0IGlzIGdvaW5nIG9uIGhlcmU7IGhlIHN1c3BlY3RzCiAgICAgICAgICAgICAgICAgICAgbm90aGluZzsgaGUgaXMgY29uZHVjdGluZyB0aGUgd2FyOyBoZSBpcyBzdGFuZGluZyBpbiBiYXR0bGUgYXJyYXk7IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcgZm9yIGhpcyBibG9vZCBhbmQgZm9yIGhpcyBsaWZlOyBoZSB3aWxsIGhlYXIgb2YgdGhlIHByb3ZpbmNlIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlZCB0byBoaW0gYmVmb3JlIGhlIGNvdWxkIGltYWdpbmUgdGhhdCB0aGVyZSBoYWQgYmVlbiB0aW1lIGZvciBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkaW5nLiBJIGFtIGFmcmFpZCB0aGF0IG91ciBhcm1pZXMgdG9vLCB3aGljaCBoYXZlIGRldm90ZWQgdGhlbXNlbHZlcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYywgbm90IGZyb20gYW55IGNvbXB1bHNvcnkgbGV2eSwgYnV0IG9mIHRoZWlyIG93biB2b2x1bnRhcnkgemVhbCwKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGNoZWNrZWQgaW4gdGhlaXIgYXJkb3IsIGlmIHRoZXkgc3VwcG9zZSB0aGF0IHdlIGFyZSB0aGlua2luZyBvZiBhbnkKICAgICAgICAgICAgICAgICAgICB0aGluZyBidXQgaW5zdGFudCB3YXIuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIHByb3ZpbmNlcyBhcHBlYXIgdG8gdGhlIGNvbnN1bHMgYXMgdGhpbmdzIHRvIGJlIGRlc2lyZWQsIGFzIHRoZXkgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gZGVzaXJlZCBieSBtYW55IGlsbHVzdHJpb3VzIG1lbjsgZmlyc3QgcmVzdG9yZSB1cyBCcnV0dXMsIHRoZSBsaWdodAogICAgICAgICAgICAgICAgICAgIGFuZCBnbG9yeSBvZiB0aGUgc3RhdGU7IHdob20gd2Ugb3VnaHQgdG8gcHJlc2VydmUgbGlrZSB0aGF0IHN0YXR1ZSB3aGljaCBmZWxsCiAgICAgICAgICAgICAgICAgICAgZnJvbSBoZWF2ZW4sIGFuZCBpcyBndWFyZGVkIGJ5IHRoZSBwcm90ZWN0aW9uIG9mIFZlc3RhOiB3aGljaCwgYXMgbG9uZyBhcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIHNhZmUsIGluc3VyZXMgb3VyIHNhZmV0eSBhbHNvLiBUaGVuIHdlIHdpbGwgcmFpc2UgeW91LCBpZiBpdCBiZSBwb3NzaWJsZSwgZXZlbgogICAgICAgICAgICAgICAgICAgIHRvIGhlYXZlbiBvbiBvdXIgc2hvdWxkZXJzOyB1bnF1ZXN0aW9uYWJseSB3ZSB3aWxsIHNlbGVjdCBmb3IgeW91IHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgd29ydGh5IHByb3ZpbmNlcy4gQnV0IGF0IHByZXNlbnQgbGV0IHVzIGFwcGx5IG91cnNlbHZlcyB0byB0aGUgYnVzaW5lc3MgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdXMuIEFuZCB0aGUgcXVlc3Rpb24gaXMsIHdoZXRoZXIgd2Ugd2lsbCBsaXZlIGFzIGZyZWVtZW4sIG9yIGRpZTsgZm9yIGRlYXRoIGlzCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbmx5IHRvIGJlIHByZWZlcnJlZCB0byBzbGF2ZXJ5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQKICAgICAgICAgICAgICAgICAgICBtb3JlIG5lZWQgSSBzYXk/IFN1cHBvc2UgdGhhdCBwcm9wb3NpdGlvbiBjYXVzZXMgZGVsYXkgaW4gdGhlIHB1cnN1aXQgb2YKICAgICAgICAgICAgICAgICAgICBEb2xhYmVsbGE/IEZvciB3aGVuIHdpbGwgdGhlIGNvbnN1bCBhcnJpdmU/IEFyZSB3ZSB3YWl0aW5nIHRpbGwgdGhlcmUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgZXZlbiBhIHZlc3RpZ2Ugb2YgdGhlIHRvd25zIGFuZCBjaXRpZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gbGVmdD8g4oCcQnV0IHRoZXkgd2lsbCBzZW5kIHNvbWUgb25lIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlcnMu4oCd4oCUVGhhdCB3aWxsIGNlcnRhaW5seSBiZSBhIHN0ZXAgdGhhdCBJIHNoYWxsIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZSBvZjsgSSB3aG8ganVzdCBub3cgb2JqZWN0ZWQgdG8gZ2l2aW5nIGFueSBleHRyYW9yZGluYXJ5IG1pbGl0YXJ5IGNvbW1hbmQKICAgICAgICAgICAgICAgICAgICB0byBldmVyIHNvIGlsbHVzdHJpb3VzIGEgbWFuIGlmIGhlIHdlcmUgb25seSBhIHByaXZhdGUgaW5kaXZpZHVhbC4KICAgICAgICAgICAgICAgICAgICDigJxCdXQgdGhleSB3aWxsIHNlbmQgYSBtYW4gd29ydGh5IG9mIHN1Y2ggYSBjaGFyZ2Uu4oCdIFdpbGwKICAgICAgICAgICAgICAgICAgICB0aGV5IHNlbmQgb25lIG1vcmUgd29ydGh5IHRoYW4gUHVibGl1cyBTZXJ2aWxpdXM/IEJ1dCB0aGUgY2l0eSBoYXMgbm90IHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIG1hbi4gV2hhdCB0aGVuIGhlIGhpbXNlbGYgdGhpbmtzIG91Z2h0IHRvIGJlIGdpdmVuIHRvIG5vIG9uZSwgbm90IGV2ZW4gYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlLCBjYW4gSSBhcHByb3ZlIG9mIHRoYXQgYmVpbmcgY29uZmVycmVkIGJ5IHRoZSBkZWNpc2lvbiBvZiBvbmUgbWFuPwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBXZSBoYXZlIG5lZWQsIE8gY29uc2NyaXB0IGZhdGhlcnMsIG9mIGEKICAgICAgICAgICAgICAgICAgICBtYW4gcmVhZHkgYW5kIHByZXBhcmVkLCBhbmQgb2Ygb25lIHdobyBoYXMgYSBtaWxpdGFyeSBjb21tYW5kIGxlZ2FsbHkgY29uZmVycmVkCiAgICAgICAgICAgICAgICAgICAgb24gaGltOyBhbmQgb2Ygb25lIHdobywgYmVzaWRlcyB0aGlzLCBoYXMgYXV0aG9yaXR5LCBhbmQgYSBuYW1lLCBhbmQgYW4gYXJteSwKICAgICAgICAgICAgICAgICAgICBhbmQgYSBjb3VyYWdlIHdoaWNoIGhhcyBiZWVuIGFscmVhZHkgdHJpZWQgaW4gaGlzIGV4ZXJ0aW9ucyBmb3IgdGhlIGRlbGl2ZXJhbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdAogICAgICAgICAgICAgICAgICAgIG1vcmUgbmVlZCBJIHNheT8gU3VwcG9zZSB0aGF0IHByb3Bvc2l0aW9uIGNhdXNlcyBkZWxheSBpbiB0aGUgcHVyc3VpdCBvZgogICAgICAgICAgICAgICAgICAgIERvbGFiZWxsYT8gRm9yIHdoZW4gd2lsbCB0aGUgY29uc3VsIGFycml2ZT8gQXJlIHdlIHdhaXRpbmcgdGlsbCB0aGVyZSBpcyBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIGEgdmVzdGlnZSBvZiB0aGUgdG93bnMgYW5kIGNpdGllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGxlZnQ/IOKAnEJ1dCB0aGV5IHdpbGwgc2VuZCBzb21lIG9uZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG9mZmljZXJzLuKAneKAlFRoYXQgd2lsbCBjZXJ0YWlubHkgYmUgYSBzdGVwIHRoYXQgSSBzaGFsbCBxdWl0ZQogICAgICAgICAgICAgICAgICAgIGFwcHJvdmUgb2Y7IEkgd2hvIGp1c3Qgbm93IG9iamVjdGVkIHRvIGdpdmluZyBhbnkgZXh0cmFvcmRpbmFyeSBtaWxpdGFyeSBjb21tYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gZXZlciBzbyBpbGx1c3RyaW91cyBhIG1hbiBpZiBoZSB3ZXJlIG9ubHkgYSBwcml2YXRlIGluZGl2aWR1YWwuCiAgICAgICAgICAgICAgICAgICAg4oCcQnV0IHRoZXkgd2lsbCBzZW5kIGEgbWFuIHdvcnRoeSBvZiBzdWNoIGEgY2hhcmdlLuKAnSBXaWxsCiAgICAgICAgICAgICAgICAgICAgdGhleSBzZW5kIG9uZSBtb3JlIHdvcnRoeSB0aGFuIFB1YmxpdXMgU2VydmlsaXVzPyBCdXQgdGhlIGNpdHkgaGFzIG5vdCBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBtYW4uIFdoYXQgdGhlbiBoZSBoaW1zZWxmIHRoaW5rcyBvdWdodCB0byBiZSBnaXZlbiB0byBubyBvbmUsIG5vdCBldmVuIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSwgY2FuIEkgYXBwcm92ZSBvZiB0aGF0IGJlaW5nIGNvbmZlcnJlZCBieSB0aGUgZGVjaXNpb24gb2Ygb25lIG1hbj8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2UgaGF2ZSBuZWVkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBvZiBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHJlYWR5IGFuZCBwcmVwYXJlZCwgYW5kIG9mIG9uZSB3aG8gaGFzIGEgbWlsaXRhcnkgY29tbWFuZCBsZWdhbGx5IGNvbmZlcnJlZAogICAgICAgICAgICAgICAgICAgIG9uIGhpbTsgYW5kIG9mIG9uZSB3aG8sIGJlc2lkZXMgdGhpcywgaGFzIGF1dGhvcml0eSwgYW5kIGEgbmFtZSwgYW5kIGFuIGFybXksCiAgICAgICAgICAgICAgICAgICAgYW5kIGEgY291cmFnZSB3aGljaCBoYXMgYmVlbiBhbHJlYWR5IHRyaWVkIGluIGhpcyBleGVydGlvbnMgZm9yIHRoZSBkZWxpdmVyYW5jZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['11.11'] = ""
translation['11.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGJvdGgKICAgICAgICAgICAgICAgICAgICBCcnV0dXMgYW5kIENhc3NpdXMgaGF2ZSBpbiBtYW55IGluc3RhbmNlcyBiZWVuIGEgc2VuYXRlIHRvIHRoZW1zZWx2ZXMuIEZvciBpdCBpcwogICAgICAgICAgICAgICAgICAgIHF1aXRlIGluZXZpdGFibGUgdGhhdCBpbiBzdWNoIGEgY29uZnVzaW9uIGFuZCBkaXN0dXJiYW5jZSBvZiBhbGwgdGhpbmdzIG1lbgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBndWlkZWQgYnkgdGhlIHByZXNlbnQgZW1lcmdlbmN5IHJhdGhlciB0aGFuIGJ5IHByZWNlZGVudC4gTm9yIHdpbGwKICAgICAgICAgICAgICAgICAgICB0aGlzIGJlIHRoZSBmaXJzdCB0aW1lIHRoYXQgZWl0aGVyIEJydXR1cyBvciBDYXNzaXVzIGhhcyBjb25zaWRlcmVkIHRoZSBzYWZldHkKICAgICAgICAgICAgICAgICAgICBhbmQgZGVsaXZlcmFuY2Ugb2YgaGlzIGNvdW50cnkgaGlzIG1vc3QgaG9seSBsYXcgYW5kIGhpcyBtb3N0IGV4Y2VsbGVudAogICAgICAgICAgICAgICAgICAgIHByZWNlZGVudC4gVGhlcmVmb3JlLCBpZiB0aGVyZSB3ZXJlIG5vIG1vdGlvbiBzdWJtaXR0ZWQgdG8gdXMgYWJvdXQgdGhlIHB1cnN1aXQKICAgICAgICAgICAgICAgICAgICBvZiBEb2xhYmVsbGEsIHN0aWxsIEkgc2hvdWxkIGNvbnNpZGVyIGl0IGVxdWl2YWxlbnQgdG8gYSBkZWNyZWUsIHdoZW4gdGhlcmUgd2VyZQogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBzdWNoIGEgY2hhcmFjdGVyIGZvciB2aXJ0dWUsIGF1dGhvcml0eSwgYW5kIHRoZSBncmVhdGVzdCBub2JsZW5lc3MsCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2luZyBhcm1pZXMsIG9uZSBvZiB3aGljaCBpcyBhbHJlYWR5IGtub3duIHRvIHVzLCBhbmQgdGhlIG90aGVyIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWJ1bmRhbnRseSBoZWFyZCBvZi4gPC90cmFuc2xhdGlvbj4="
translation['11.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1cyB0aGVuLCB5b3UgbWF5IGJlIHN1cmUsIGhhcyBub3Qgd2FpdGVkIGZvciBvdXIgZGVjcmVlcywgYXMgaGUgd2FzIHN1cmUgb2YKICAgICAgICAgICAgICAgICAgICBvdXIgZGVzaXJlcy4gRm9yIGhlIGlzIG5vdCBnb25lIHRvIGhpcyBvd24gcHJvdmluY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NiI+Q3JldGU8L3BsYWNlTmFtZT47IGhlIGhhcyBmbG93biB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHdoaWNoIGJlbG9uZ2VkIHRvIGFub3RoZXI7IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGFjY291bnRlZCBldmVyeSB0aGluZyBoaXMgb3duIHdoaWNoIHlvdSBoYXZlIHdpc2hlZCB0byBiZSB5b3VyczsgaGUgaGFzIGVubGlzdGVkCiAgICAgICAgICAgICAgICAgICAgbmV3IGxlZ2lvbnM7IGhlIGhhcyByZWNlaXZlZCBvbGQgb25lczsgaGUgaGFzIGdhaW5lZCBvdmVyIHRvIGhpcyBvd24gc3RhbmRhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgY2F2YWxyeSBvZiBEb2xhYmVsbGEsIGFuZCwgZXZlbiBiZWZvcmUgdGhhdCBtYW4gd2FzIHBvbGx1dGVkIHdpdGggc3VjaAogICAgICAgICAgICAgICAgICAgIGVub3Jtb3VzIHBhcnJpY2lkZSwgaGUsIG9mIGhpcyBvd24gaGVhZCwgcHJvbm91bmNlZCBoaW0gaGlzIGVuZW15LiBGb3IgaWYgaGUKICAgICAgICAgICAgICAgICAgICB3ZXJlIG5vdCBvbmUsIGJ5IHdoYXQgcmlnaHQgY291bGQgaGUgaGltc2VsZiBoYXZlIHRlbXB0ZWQgdGhlIGNhdmFscnkgdG8gYWJhbmRvbgogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWw/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBtb3JlIG5lZWQgSSBzYXk/IERpZCBub3QKICAgICAgICAgICAgICAgICAgICBDYWl1cyBDYXNzaXVzLCBhIG1hbiBlbmRvd2VkIHdpdGggZXF1YWwgZ3JlYXRuZXNzIG9mIG1pbmQgYW5kIHdpdGggZXF1YWwgd2lzZG9tLAogICAgICAgICAgICAgICAgICAgIGRlcGFydCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB3aXRoIHRoZSBkZWxpYmVyYXRlCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0IG9mIHByZXZlbnRpbmcgRG9sYWJlbGxhIGZyb20gb2J0YWluaW5nIHBvc3Nlc3Npb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+PyBCeSB3aGF0IGxhdz8gQnkgd2hhdCByaWdodD8gQnkgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIEp1cGl0ZXIgaGltc2VsZiBoYXMgc2FuY3Rpb25lZCwgdGhhdCBldmVyeSB0aGluZyB3aGljaCB3YXMgYWR2YW50YWdlb3VzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljIHNob3VsZCBiZSBjb25zaWRlcmVkIGxlZ2FsIGFuZCBqdXN0LiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU2Ij5DcmV0ZTwvcGxhY2VOYW1lPjsgaGUgaGFzIGZsb3duIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25nZWQgdG8gYW5vdGhlcjsgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkIGV2ZXJ5IHRoaW5nIGhpcyBvd24gd2hpY2ggeW91IGhhdmUgd2lzaGVkIHRvIGJlIHlvdXJzOyBoZSBoYXMgZW5saXN0ZWQKICAgICAgICAgICAgICAgICAgICBuZXcgbGVnaW9uczsgaGUgaGFzIHJlY2VpdmVkIG9sZCBvbmVzOyBoZSBoYXMgZ2FpbmVkIG92ZXIgdG8gaGlzIG93biBzdGFuZGFyZAogICAgICAgICAgICAgICAgICAgIHRoZSBjYXZhbHJ5IG9mIERvbGFiZWxsYSwgYW5kLCBldmVuIGJlZm9yZSB0aGF0IG1hbiB3YXMgcG9sbHV0ZWQgd2l0aCBzdWNoCiAgICAgICAgICAgICAgICAgICAgZW5vcm1vdXMgcGFycmljaWRlLCBoZSwgb2YgaGlzIG93biBoZWFkLCBwcm9ub3VuY2VkIGhpbSBoaXMgZW5lbXkuIEZvciBpZiBoZQogICAgICAgICAgICAgICAgICAgIHdlcmUgbm90IG9uZSwgYnkgd2hhdCByaWdodCBjb3VsZCBoZSBoaW1zZWxmIGhhdmUgdGVtcHRlZCB0aGUgY2F2YWxyeSB0byBhYmFuZG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN1bD8gPC90cmFuc2xhdGlvbj4="
translation['11.12.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBtb3JlIG5lZWQgSSBzYXk/IERpZCBub3QKICAgICAgICAgICAgICAgICAgICBDYWl1cyBDYXNzaXVzLCBhIG1hbiBlbmRvd2VkIHdpdGggZXF1YWwgZ3JlYXRuZXNzIG9mIG1pbmQgYW5kIHdpdGggZXF1YWwgd2lzZG9tLAogICAgICAgICAgICAgICAgICAgIGRlcGFydCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggdGhlIGRlbGliZXJhdGUKICAgICAgICAgICAgICAgICAgICBvYmplY3Qgb2YgcHJldmVudGluZyBEb2xhYmVsbGEgZnJvbSBvYnRhaW5pbmcgcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPj8gQnkgd2hhdCBsYXc/IEJ5IHdoYXQgcmlnaHQ/IEJ5IHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGljaCBKdXBpdGVyIGhpbXNlbGYgaGFzIHNhbmN0aW9uZWQsIHRoYXQgZXZlcnkgdGhpbmcgd2hpY2ggd2FzIGFkdmFudGFnZW91cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSByZXB1YmxpYyBzaG91bGQgYmUgY29uc2lkZXJlZCBsZWdhbCBhbmQganVzdC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3IgbGF3IGlzIG5vdGhpbmcgYnV0IGEgY29ycmVjdCBwcmluY2lwbGUgZHJhd24gZnJvbSB0aGUgaW5zcGlyYXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29kcywgY29tbWFuZGluZyB3aGF0IGlzIGhvbmVzdCwgYW5kIGZvcmJpZGRpbmcgdGhlIGNvbnRyYXJ5LiBDYXNzaXVzLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgb2JleWVkIHRoaXMgbGF3IHdoZW4gaGUgd2VudCBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+OyBhIHByb3ZpbmNlIHdoaWNoIGJlbG9uZ2VkIHRvIGFub3RoZXIsIGlmIG1lbiB3ZXJlIHRvCiAgICAgICAgICAgICAgICAgICAgYWJpZGUgYnkgdGhlIHdyaXR0ZW4gbGF3czsgYnV0IHdoaWNoLCB3aGVuIHRoZXNlIHdlcmUgdHJhbXBsZWQgdW5kZXIgZm9vdCwgd2FzCiAgICAgICAgICAgICAgICAgICAgaGlzIGJ5IHRoZSBsYXcgb2YgbmF0dXJlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBpbiBvcmRlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBtYXkgYmUgc2FuY3Rpb25lZCBieSB5b3VyIGF1dGhvcml0eSBhbHNvLCBJIG5vdyBnaXZlIG15IHZvdGUsIHRoYXQsIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+OyBhIHByb3ZpbmNlIHdoaWNoIGJlbG9uZ2VkIHRvIGFub3RoZXIsIGlmIG1lbiB3ZXJlIHRvCiAgICAgICAgICAgICAgICAgICAgYWJpZGUgYnkgdGhlIHdyaXR0ZW4gbGF3czsgYnV0IHdoaWNoLCB3aGVuIHRoZXNlIHdlcmUgdHJhbXBsZWQgdW5kZXIgZm9vdCwgd2FzCiAgICAgICAgICAgICAgICAgICAgaGlzIGJ5IHRoZSBsYXcgb2YgbmF0dXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.12.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGluIG9yZGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG1heSBiZSBzYW5jdGlvbmVkIGJ5IHlvdXIgYXV0aG9yaXR5IGFsc28sIEkgbm93IGdpdmUgbXkgdm90ZSwgdGhhdCwgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4g4oCcQXMgUHVibGl1cyBEb2xhYmVsbGEsIGFuZCB0aG9zZSB3aG8gaGF2ZSBiZWVuIHRoZSBtaW5pc3RlcnMgb2YgYW5kCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGljZXMgYW5kIGFzc2lzdGFudHMgaW4gaGlzIGNydWVsIGFuZCBpbmZhbW91cyBjcmltZSwgaGF2ZSBiZWVuIHByb25vdW5jZWQKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIG9mIHRoZSBSb21hbiBwZW9wbGUgYnkgdGhlIHNlbmF0ZSwgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIGFuZCBhcyB0aGUgc2VuYXRlIGhhcyB2b3RlZCB0aGF0IFB1YmxpdXMgRG9sYWJlbGxhIHNoYWxsIGJlIHB1cnN1ZWQgd2l0aCB3YXIsIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCBoZSB3aG8gaGFzIHZpb2xhdGVkIGFsbCBsYXdzIG9mIG1lbiBhbmQgZ29kcyBieSBhIG5ldyBhbmQgdW5oZWFyZCBvZgogICAgICAgICAgICAgICAgICAgIGFuZCBpbmV4cGlhYmxlIHdpY2tlZG5lc3MsIGFuZCBoYXMgY29tbWl0dGVkIHRoZSBtb3N0IGluZmFtb3VzIHRyZWFzb24gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIGhpcyBjb3VudHJ5LCBtYXkgc3VmZmVyIHRoZSBwdW5pc2htZW50IHdoaWNoIGlzIGhpcyBkdWUsIGFuZCB3aGljaCBoZSBoYXMgd2VsbAogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIGF0IHRoZSBoYW5kcyBvZiBnb2RzIGFuZCBtZW47IHRoZSBzZW5hdGUgZGVjcmVlcyB0aGF0IENhaXVzIENhc3NpdXMsCiAgICAgICAgICAgICAgICAgICAgcHJvY29uc3VsLCBzaGFsbCBoYXZlIHRoZSBnb3Zlcm5tZW50IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiBhcyBvbmUgYXBwb2ludGVkIHRvIHRoYXQgcHJvdmluY2Ugd2l0aCBhbGwgZHVlIGZvcm07IGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hhbGwgcmVjZWl2ZSB0aGVpciBhcm1pZXMgZnJvbSBRdWludHVzIE1hcmNpdXMgQ3Jpc3B1cywgcHJvY29uc3VsLCBmcm9tCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFN0YXRpdXMgTWFyY3VzLCBwcm9jb25zdWwsIGZyb20gQXVsdXMgQWxsaWVudXMsIGxpZXV0ZW5hbnQsIGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBkZWxpdmVyIHRoZW0gdXAgdG8gaGltOyBhbmQgdGhhdCBoZSwgd2l0aCB0aGVzZSB0cm9vcHMgYW5kIHdpdGggYW55IG1vcmUKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBtYXkgaGF2ZSBnb3QgZnJvbSBvdGhlciBxdWFydGVycywgc2hhbGwgcHVyc3VlIERvbGFiZWxsYSB3aXRoIHdhciBib3RoCiAgICAgICAgICAgICAgICAgICAgYnkgc2VhIGFuZCBsYW5kOyB0aGF0LCBmb3IgdGhlIHNha2Ugb2YgY2Fycnlpbmcgb24gd2FyLCBoZSBzaGFsbCBoYXZlIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIGFuZCBwb3dlciB0byBidXkgc2hpcHMsIGFuZCBzYWlsb3JzLCBhbmQgbW9uZXksIGFuZCB3aGF0ZXZlciBlbHNlIG1heSBiZQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBvciB1c2VmdWwgZm9yIHRoZSBjYXJyeWluZyBvbiBvZiB0aGUgd2FyLCBpbiB3aGF0ZXZlciBwbGFjZXMgaXQgc2VlbXMKICAgICAgICAgICAgICAgICAgICBmaXR0aW5nIHRvIGhpbSB0byBkbyBzbywgdGhyb3VnaG91dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYwOCIga2V5PSJ0Z24sNzAxNjYwOCI+Qml0aHluaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIga2V5PSJ0Z24sNzAxNjYxOSI+UG9udHVzPC9wbGFjZU5hbWU+OyBhbmQgdGhhdCwgaW4gd2hhdGV2ZXIgcHJvdmluY2UgaGUKICAgICAgICAgICAgICAgICAgICBzaGFsbCBhcnJpdmUgZm9yIHRoZSBwdXJwb3NlIG9mIGNhcnJ5aW5nIG9uIHRoYXQgd2FyLCBpbiB0aGF0IHByb3ZpbmNlIGFzIHNvb24KICAgICAgICAgICAgICAgICAgICBhcyBDYWl1cyBDYXNzaXVzLCBwcm9jb25zdWwsIHNoYWxsIGFycml2ZSBpbiBpdCwgdGhlIHBvd2VyIG9mIENhaXVzIENhc3NpdXMsCiAgICAgICAgICAgICAgICAgICAgcHJvY29uc3VsLCBzaGFsbCBiZSBzdXBlcmlvciB0byB0aGF0IG9mIGhpbSB3aG8gbWF5IGJlIHRoZSByZWd1bGFyIGdvdmVybm9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3ZpbmNlIGF0IHRoZSB0aW1lLiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJzZWN0aW9uIiAvPiBUaGF0IGtpbmcgRGVpb3RhcnVzCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhdGhlciwgYW5kIGFsc28ga2luZyBEZWlvdGFydXMgdGhlIHNvbiwgaWYgdGhleSBhc3Npc3QgQ2FpdXMgQ2Fzc2l1cywKICAgICAgICAgICAgICAgICAgICBwcm9jb25zdWwsIHdpdGggdGhlaXIgYXJtaWVzIGFuZCB0cmVhc3VyZXMsIGFzIHRoZXkgaGF2ZSBoZXJldG9mb3JlIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgYXNzaXN0ZWQgdGhlIGdlbmVyYWxzIG9mIHRoZSBSb21hbiBwZW9wbGUsIHdpbGwgZG8gYSB0aGluZyB3aGljaCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgZ3JhdGVmdWwgdG8gdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT47IGFuZCB0aGF0IGFsc28sIGlmIHRoZSByZXN0IG9mIHRoZSBraW5ncyBhbmQgdGV0cmFyY2hzIGFuZAogICAgICAgICAgICAgICAgICAgIGdvdmVybm9ycyBpbiB0aG9zZSBkaXN0cmljdHMgZG8gdGhlIHNhbWUsIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdpbGwgbm90IGJlIGZvcmdldGZ1bCBvZiB0aGVpciBsb3lhbHR5CiAgICAgICAgICAgICAgICAgICAgYW5kIGtpbmRuZXNzOyBhbmQgdGhhdCBDYWl1cyBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cyB0aGUgY29uc3Vscywgb25lIG9yIGJvdGggb2YKICAgICAgICAgICAgICAgICAgICB0aGVtLCBhcyBpdCBzZWVtcyBnb29kIHRvIHRoZW0sIGFzIHNvb24gYXMgdGhleSBoYXZlIHJlZXN0YWJsaXNoZWQgdGhlIHJlcHVibGljLAogICAgICAgICAgICAgICAgICAgIHNoYWxsIGF0IHRoZSBlYXJsaWVzdCBvcHBvcnR1bml0eSBzdWJtaXQgYSBtb3Rpb24gdG8gdGhpcyBvcmRlciBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdWxhciBhbmQgcHJhZXRvcmlhbiBwcm92aW5jZXM7IGFuZCB0aGF0LCBpbiB0aGUgbWVhbnRpbWUsIHRoZSBwcm92aW5jZXMKICAgICAgICAgICAgICAgICAgICBzaG91bGQgY29udGludWUgdG8gYmUgZ292ZXJuZWQgYnkgdGhvc2Ugb2ZmaWNlcnMgYnkgd2hvbSB0aGV5IGFyZSBnb3Zlcm5lZCBhdAogICAgICAgICAgICAgICAgICAgIHByZXNlbnQsIHVudGlsIGEgc3VjY2Vzc29yIGJlIGFwcG9pbnRlZCB0byBlYWNoIGJ5IGEgcmVzb2x1dGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZW5hdGUu4oCdIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBhbmQgYXMgdGhlIHNlbmF0ZSBoYXMgdm90ZWQgdGhhdCBQdWJsaXVzIERvbGFiZWxsYSBzaGFsbCBiZSBwdXJzdWVkIHdpdGggd2FyLCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgaGUgd2hvIGhhcyB2aW9sYXRlZCBhbGwgbGF3cyBvZiBtZW4gYW5kIGdvZHMgYnkgYSBuZXcgYW5kIHVuaGVhcmQgb2YKICAgICAgICAgICAgICAgICAgICBhbmQgaW5leHBpYWJsZSB3aWNrZWRuZXNzLCBhbmQgaGFzIGNvbW1pdHRlZCB0aGUgbW9zdCBpbmZhbW91cyB0cmVhc29uIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBoaXMgY291bnRyeSwgbWF5IHN1ZmZlciB0aGUgcHVuaXNobWVudCB3aGljaCBpcyBoaXMgZHVlLCBhbmQgd2hpY2ggaGUgaGFzIHdlbGwKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlZCBhdCB0aGUgaGFuZHMgb2YgZ29kcyBhbmQgbWVuOyB0aGUgc2VuYXRlIGRlY3JlZXMgdGhhdCBDYWl1cyBDYXNzaXVzLAogICAgICAgICAgICAgICAgICAgIHByb2NvbnN1bCwgc2hhbGwgaGF2ZSB0aGUgZ292ZXJubWVudCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiBhcyBvbmUgYXBwb2ludGVkIHRvIHRoYXQgcHJvdmluY2Ugd2l0aCBhbGwgZHVlIGZvcm07IGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hhbGwgcmVjZWl2ZSB0aGVpciBhcm1pZXMgZnJvbSBRdWludHVzIE1hcmNpdXMgQ3Jpc3B1cywgcHJvY29uc3VsLCBmcm9tCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFN0YXRpdXMgTWFyY3VzLCBwcm9jb25zdWwsIGZyb20gQXVsdXMgQWxsaWVudXMsIGxpZXV0ZW5hbnQsIGFuZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBkZWxpdmVyIHRoZW0gdXAgdG8gaGltOyBhbmQgdGhhdCBoZSwgd2l0aCB0aGVzZSB0cm9vcHMgYW5kIHdpdGggYW55IG1vcmUKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBtYXkgaGF2ZSBnb3QgZnJvbSBvdGhlciBxdWFydGVycywgc2hhbGwgcHVyc3VlIERvbGFiZWxsYSB3aXRoIHdhciBib3RoCiAgICAgICAgICAgICAgICAgICAgYnkgc2VhIGFuZCBsYW5kOyB0aGF0LCBmb3IgdGhlIHNha2Ugb2YgY2Fycnlpbmcgb24gd2FyLCBoZSBzaGFsbCBoYXZlIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIGFuZCBwb3dlciB0byBidXkgc2hpcHMsIGFuZCBzYWlsb3JzLCBhbmQgbW9uZXksIGFuZCB3aGF0ZXZlciBlbHNlIG1heSBiZQogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSBvciB1c2VmdWwgZm9yIHRoZSBjYXJyeWluZyBvbiBvZiB0aGUgd2FyLCBpbiB3aGF0ZXZlciBwbGFjZXMgaXQgc2VlbXMKICAgICAgICAgICAgICAgICAgICBmaXR0aW5nIHRvIGhpbSB0byBkbyBzbywgdGhyb3VnaG91dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYwOCI+Qml0aHluaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT47IGFuZCB0aGF0LCBpbiB3aGF0ZXZlciBwcm92aW5jZSBoZQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGFycml2ZSBmb3IgdGhlIHB1cnBvc2Ugb2YgY2Fycnlpbmcgb24gdGhhdCB3YXIsIGluIHRoYXQgcHJvdmluY2UgYXMgc29vbgogICAgICAgICAgICAgICAgICAgIGFzIENhaXVzIENhc3NpdXMsIHByb2NvbnN1bCwgc2hhbGwgYXJyaXZlIGluIGl0LCB0aGUgcG93ZXIgb2YgQ2FpdXMgQ2Fzc2l1cywKICAgICAgICAgICAgICAgICAgICBwcm9jb25zdWwsIHNoYWxsIGJlIHN1cGVyaW9yIHRvIHRoYXQgb2YgaGltIHdobyBtYXkgYmUgdGhlIHJlZ3VsYXIgZ292ZXJub3Igb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmluY2UgYXQgdGhlIHRpbWUuIDwvdHJhbnNsYXRpb24+"
translation['11.12.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhhdCBraW5nIERlaW90YXJ1cwogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIsIGFuZCBhbHNvIGtpbmcgRGVpb3RhcnVzIHRoZSBzb24sIGlmIHRoZXkgYXNzaXN0IENhaXVzIENhc3NpdXMsCiAgICAgICAgICAgICAgICAgICAgcHJvY29uc3VsLCB3aXRoIHRoZWlyIGFybWllcyBhbmQgdHJlYXN1cmVzLCBhcyB0aGV5IGhhdmUgaGVyZXRvZm9yZSBvZnRlbgogICAgICAgICAgICAgICAgICAgIGFzc2lzdGVkIHRoZSBnZW5lcmFscyBvZiB0aGUgUm9tYW4gcGVvcGxlLCB3aWxsIGRvIGEgdGhpbmcgd2hpY2ggd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGdyYXRlZnVsIHRvIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT47IGFuZCB0aGF0IGFsc28sIGlmIHRoZSByZXN0IG9mIHRoZSBraW5ncyBhbmQgdGV0cmFyY2hzIGFuZAogICAgICAgICAgICAgICAgICAgIGdvdmVybm9ycyBpbiB0aG9zZSBkaXN0cmljdHMgZG8gdGhlIHNhbWUsIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2lsbCBub3QgYmUgZm9yZ2V0ZnVsIG9mIHRoZWlyIGxveWFsdHkKICAgICAgICAgICAgICAgICAgICBhbmQga2luZG5lc3M7IGFuZCB0aGF0IENhaXVzIFBhbnNhIGFuZCBBdWx1cyBIaXJ0aXVzIHRoZSBjb25zdWxzLCBvbmUgb3IgYm90aCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW0sIGFzIGl0IHNlZW1zIGdvb2QgdG8gdGhlbSwgYXMgc29vbiBhcyB0aGV5IGhhdmUgcmVlc3RhYmxpc2hlZCB0aGUgcmVwdWJsaWMsCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgYXQgdGhlIGVhcmxpZXN0IG9wcG9ydHVuaXR5IHN1Ym1pdCBhIG1vdGlvbiB0byB0aGlzIG9yZGVyIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN1bGFyIGFuZCBwcmFldG9yaWFuIHByb3ZpbmNlczsgYW5kIHRoYXQsIGluIHRoZSBtZWFudGltZSwgdGhlIHByb3ZpbmNlcwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBjb250aW51ZSB0byBiZSBnb3Zlcm5lZCBieSB0aG9zZSBvZmZpY2VycyBieSB3aG9tIHRoZXkgYXJlIGdvdmVybmVkIGF0CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCwgdW50aWwgYSBzdWNjZXNzb3IgYmUgYXBwb2ludGVkIHRvIGVhY2ggYnkgYSByZXNvbHV0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZS7igJ0gPC90cmFuc2xhdGlvbj4="
translation['11.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['11.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ5IHRoaXMgcmVzb2x1dGlvbiBvZiB0aGUgc2VuYXRlIHlvdSB3aWxsIGluZmxhbWUgdGhlIGV4aXN0aW5nIGFyZG9yIG9mIENhc3NpdXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHlvdSB3aWxsIGdpdmUgaGltIGFkZGl0aW9uYWwgYXJtczsgZm9yIHlvdSBjYW4gbm90IGJlIGlnbm9yYW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2l0aW9uLCBvciBvZiB0aGUgcmVzb3VyY2VzIHdoaWNoIGhlIGhhcyBhdCBwcmVzZW50LiBIaXMgZGlzcG9zaXRpb24gaXMKICAgICAgICAgICAgICAgICAgICBzdWNoIGFzIHlvdSBzZWU7IGhpcyByZXNvdXJjZXMsIHdoaWNoIHlvdSBoYXZlIGhlYXJkIHN0YXRlZCB0byB5b3UsIGFyZSB0aG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGEgZ2FsbGFudCBhbmQgcmVzb2x1dGUgbWFuLCB3aG8sIGV2ZW4gd2hpbGUgVHJlYm9uaXVzIHdhcyBhbGl2ZSwgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0IHRoZSBwaXJhdGljYWwgY3JldyBvZiBEb2xhYmVsbGEgdG8gcGVuZXRyYXRlIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDE0MCI+U3lyaWE8L3BsYWNlTmFtZT4uIEFsbGllbnVzLCBteSBpbnRpbWF0ZSBmcmllbmQgYW5kCiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbiwgd2hvIHdlbnQgdGhpdGhlciBhZnRlciB0aGUgZGVhdGggb2YgVHJlYm9uaXVzLCB3aWxsIG5vdCBwZXJtaXQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHRvIGJlIGNhbGxlZCB0aGUgbGlldXRlbmFudCBvZiBEb2xhYmVsbGEuIFRoZSBhcm15IG9mIFF1aW50dXMgQ2FlY2lsaXVzCiAgICAgICAgICAgICAgICAgICAgQmFzc3VzLCBhIG1hbiBpbmRlZWQgd2l0aG91dCBhbnkgcmVndWxhciBhcHBvaW50bWVudCwgYnV0IGEgYnJhdmUgYW5kIGVtaW5lbnQKICAgICAgICAgICAgICAgICAgICBtYW4sIGlzIHZpZ29yb3VzIGFuZCB2aWN0b3Jpb3VzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBhcm15IG9mCiAgICAgICAgICAgICAgICAgICAgRGVpb3RhcnVzIHRoZSBraW5nLCBib3RoIGZhdGhlciBhbmQgc29uLCBpcyB2ZXJ5IG51bWVyb3VzOyBhbmQgZXF1aXBwZWQgaW4gb3VyCiAgICAgICAgICAgICAgICAgICAgZmFzaGlvbi4gTW9yZW92ZXIsIGluIHRoZSBzb24gdGhlcmUgaXMgdGhlIGdyZWF0ZXN0IGhvcGUsIHRoZSBncmVhdGVzdCB2aWdvciBvZgogICAgICAgICAgICAgICAgICAgIGdlbml1cyBhbmQgYSBnb29kIGRpc3Bvc2l0aW9uLCBhbmQgdGhlIG1vc3QgZW1pbmVudCB2YWxvci4gV2h5IG5lZWQgSSBzcGVhayBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXI/IHdob3NlIGdvb2Qtd2lsbCB0b3dhcmQgdGhlIFJvbWFuIHBlb3BsZSBpcyBjb2V2YWwgd2l0aCBoaXMgbGlmZTsgd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdCBvbmx5IGJlZW4gdGhlIGFsbHkgb2Ygb3VyIGNvbW1hbmRlcnMgaW4gdGhlaXIgd2FycywgYnV0IGhhcyBhbHNvIHNlcnZlZAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYXMgdGhlIGdlbmVyYWwgb2YgaGlzIG93biB0cm9vcHMuIFdoYXQgZ3JlYXQgdGhpbmdzIGhhdmUgU3VsbGEsIGFuZAogICAgICAgICAgICAgICAgICAgIE11cmVuYSwgYW5kIFNlcnZpbGl1cywgYW5kIEx1Y3VsbHVzIHNhaWQgb2YgdGhhdCBtYW47IHdoYXQgY29tcGxpbWVudGFyeSwgd2hhdAogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBhbmQgZGlnbmlmaWVkIG1lbnRpb24gaGF2ZSB0aGV5IG9mdGVuIG1hZGUgb2YgaGltIGluIHRoZSBzZW5hdGUhCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+IFdoeSBzaG91bGQgSSBzcGVhayBvZiBDbmFldXMgUG9tcGVpdXM/CiAgICAgICAgICAgICAgICAgICAgd2hvIGNvbnNpZGVyZWQgRGVpb3RhcnVzIHRoZSBvbmx5IGZyaWVuZCBhbmQgcmVhbCB3ZWxsLXdpc2hlciBmcm9tIGhpcyBoZWFydCwKICAgICAgICAgICAgICAgICAgICB0aGUgb25seSByZWFsbHkgbG95YWwgbWFuIHRvIHRoZSBSb21hbiBwZW9wbGUgaW4gdGhlIHdob2xlIHdvcmxkPyBXZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbHMsIE1hcmN1cyBCaWJ1bHVzIGFuZCBJLCBpbiBuZWlnaGJvcmluZyBwcm92aW5jZXMgYm9yZGVyaW5nIG9uIGhpcwogICAgICAgICAgICAgICAgICAgIGtpbmdkb207IGFuZCB3ZSB3ZXJlIGFzc2lzdGVkIGJ5IHRoYXQgc2FtZSBtb25hcmNoIGJvdGggd2l0aCBjYXZhbHJ5IGFuZAogICAgICAgICAgICAgICAgICAgIGluZmFudHJ5LiBUaGVuIGZvbGxvd2VkIHRoaXMgbW9zdCBtaXNlcmFibGUgYW5kIGRpc2FzdHJvdXMgY2l2aWwgd2FyOyBpbiB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgbmVlZCBub3Qgc2F5IHdoYXQgRGVpb3RhcnVzIG91Z2h0IHRvIGhhdmUgZG9uZSwgb3Igd2hhdCB3b3VsZCBoYXZlIGJlZW4gdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgY291cnNlIHdoaWNoIGhlIGNvdWxkIGhhdmUgYWRvcHRlZCwgZXNwZWNpYWxseSBhcyB2aWN0b3J5IGRlY2lkZWQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHBhcnR5IG9wcG9zZWQgdG8gdGhlIHdpc2hlcyBvZiBEZWlvdGFydXMuIEFuZCBpZiBpbiB0aGF0IHdhciBoZSBjb21taXR0ZWQgYW55CiAgICAgICAgICAgICAgICAgICAgZXJyb3IsIGhlIGRpZCBzbyBpbiBjb21tb24gd2l0aCB0aGUgc2VuYXRlLiBJZiBoaXMganVkZ21lbnQgd2FzIHRoZSByaWdodCBvbmUsCiAgICAgICAgICAgICAgICAgICAgdGhlbiBldmVuIHRob3VnaCBkZWZlYXRlZCBpdCBkb2VzIG5vdCBkZXNlcnZlIHRvIGJlIGJsYW1lZC4gVG8gdGhlc2UgcmVzb3VyY2VzCiAgICAgICAgICAgICAgICAgICAgb3RoZXIga2luZ3MgYW5kIG90aGVyIGxldmllcyBvZiB0cm9vcHMgd2lsbCBiZSBhZGRlZC4gPG1pbGVzdG9uZSBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIHdpbGwgZmxlZXRzIGJlIHdhbnRpbmcgdG8gdXM7IHNvIGdyZWF0bHkgZG8gdGhlIFR5cmlhbnMKICAgICAgICAgICAgICAgICAgICBlc3RlZW0gQ2Fzc2l1cywgc28gbWlnaHR5IGlzIGhpcyBuYW1lIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ2ODciIGtleT0idGduLDYwMDQ2ODciPlBob2VuaWNpYTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPi4gQWxsaWVudXMsIG15IGludGltYXRlIGZyaWVuZCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLCB3aG8gd2VudCB0aGl0aGVyIGFmdGVyIHRoZSBkZWF0aCBvZiBUcmVib25pdXMsIHdpbGwgbm90IHBlcm1pdAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdG8gYmUgY2FsbGVkIHRoZSBsaWV1dGVuYW50IG9mIERvbGFiZWxsYS4gVGhlIGFybXkgb2YgUXVpbnR1cyBDYWVjaWxpdXMKICAgICAgICAgICAgICAgICAgICBCYXNzdXMsIGEgbWFuIGluZGVlZCB3aXRob3V0IGFueSByZWd1bGFyIGFwcG9pbnRtZW50LCBidXQgYSBicmF2ZSBhbmQgZW1pbmVudAogICAgICAgICAgICAgICAgICAgIG1hbiwgaXMgdmlnb3JvdXMgYW5kIHZpY3RvcmlvdXMuIDwvdHJhbnNsYXRpb24+"
translation['11.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGFybXkgb2YKICAgICAgICAgICAgICAgICAgICBEZWlvdGFydXMgdGhlIGtpbmcsIGJvdGggZmF0aGVyIGFuZCBzb24sIGlzIHZlcnkgbnVtZXJvdXM7IGFuZCBlcXVpcHBlZCBpbiBvdXIKICAgICAgICAgICAgICAgICAgICBmYXNoaW9uLiBNb3Jlb3ZlciwgaW4gdGhlIHNvbiB0aGVyZSBpcyB0aGUgZ3JlYXRlc3QgaG9wZSwgdGhlIGdyZWF0ZXN0IHZpZ29yIG9mCiAgICAgICAgICAgICAgICAgICAgZ2VuaXVzIGFuZCBhIGdvb2QgZGlzcG9zaXRpb24sIGFuZCB0aGUgbW9zdCBlbWluZW50IHZhbG9yLiBXaHkgbmVlZCBJIHNwZWFrIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhdGhlcj8gd2hvc2UgZ29vZC13aWxsIHRvd2FyZCB0aGUgUm9tYW4gcGVvcGxlIGlzIGNvZXZhbCB3aXRoIGhpcyBsaWZlOyB3aG8KICAgICAgICAgICAgICAgICAgICBoYXMgbm90IG9ubHkgYmVlbiB0aGUgYWxseSBvZiBvdXIgY29tbWFuZGVycyBpbiB0aGVpciB3YXJzLCBidXQgaGFzIGFsc28gc2VydmVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhcyB0aGUgZ2VuZXJhbCBvZiBoaXMgb3duIHRyb29wcy4gV2hhdCBncmVhdCB0aGluZ3MgaGF2ZSBTdWxsYSwgYW5kCiAgICAgICAgICAgICAgICAgICAgTXVyZW5hLCBhbmQgU2VydmlsaXVzLCBhbmQgTHVjdWxsdXMgc2FpZCBvZiB0aGF0IG1hbjsgd2hhdCBjb21wbGltZW50YXJ5LCB3aGF0CiAgICAgICAgICAgICAgICAgICAgaG9ub3JhYmxlIGFuZCBkaWduaWZpZWQgbWVudGlvbiBoYXZlIHRoZXkgb2Z0ZW4gbWFkZSBvZiBoaW0gaW4gdGhlIHNlbmF0ZSEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IHNob3VsZCBJIHNwZWFrIG9mIENuYWV1cyBQb21wZWl1cz8KICAgICAgICAgICAgICAgICAgICB3aG8gY29uc2lkZXJlZCBEZWlvdGFydXMgdGhlIG9ubHkgZnJpZW5kIGFuZCByZWFsIHdlbGwtd2lzaGVyIGZyb20gaGlzIGhlYXJ0LAogICAgICAgICAgICAgICAgICAgIHRoZSBvbmx5IHJlYWxseSBsb3lhbCBtYW4gdG8gdGhlIFJvbWFuIHBlb3BsZSBpbiB0aGUgd2hvbGUgd29ybGQ/IFdlIHdlcmUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFscywgTWFyY3VzIEJpYnVsdXMgYW5kIEksIGluIG5laWdoYm9yaW5nIHByb3ZpbmNlcyBib3JkZXJpbmcgb24gaGlzCiAgICAgICAgICAgICAgICAgICAga2luZ2RvbTsgYW5kIHdlIHdlcmUgYXNzaXN0ZWQgYnkgdGhhdCBzYW1lIG1vbmFyY2ggYm90aCB3aXRoIGNhdmFscnkgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mYW50cnkuIFRoZW4gZm9sbG93ZWQgdGhpcyBtb3N0IG1pc2VyYWJsZSBhbmQgZGlzYXN0cm91cyBjaXZpbCB3YXI7IGluIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBuZWVkIG5vdCBzYXkgd2hhdCBEZWlvdGFydXMgb3VnaHQgdG8gaGF2ZSBkb25lLCBvciB3aGF0IHdvdWxkIGhhdmUgYmVlbiB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHByb3BlciBjb3Vyc2Ugd2hpY2ggaGUgY291bGQgaGF2ZSBhZG9wdGVkLCBlc3BlY2lhbGx5IGFzIHZpY3RvcnkgZGVjaWRlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFydHkgb3Bwb3NlZCB0byB0aGUgd2lzaGVzIG9mIERlaW90YXJ1cy4gQW5kIGlmIGluIHRoYXQgd2FyIGhlIGNvbW1pdHRlZCBhbnkKICAgICAgICAgICAgICAgICAgICBlcnJvciwgaGUgZGlkIHNvIGluIGNvbW1vbiB3aXRoIHRoZSBzZW5hdGUuIElmIGhpcyBqdWRnbWVudCB3YXMgdGhlIHJpZ2h0IG9uZSwKICAgICAgICAgICAgICAgICAgICB0aGVuIGV2ZW4gdGhvdWdoIGRlZmVhdGVkIGl0IGRvZXMgbm90IGRlc2VydmUgdG8gYmUgYmxhbWVkLiBUbyB0aGVzZSByZXNvdXJjZXMKICAgICAgICAgICAgICAgICAgICBvdGhlciBraW5ncyBhbmQgb3RoZXIgbGV2aWVzIG9mIHRyb29wcyB3aWxsIGJlIGFkZGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.13.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIHdpbGwgZmxlZXRzIGJlIHdhbnRpbmcgdG8gdXM7IHNvIGdyZWF0bHkgZG8gdGhlIFR5cmlhbnMKICAgICAgICAgICAgICAgICAgICBlc3RlZW0gQ2Fzc2l1cywgc28gbWlnaHR5IGlzIGhpcyBuYW1lIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDY4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0Njg3Ij5QaG9lbmljaWE8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSByZXB1YmxpYywgTyBjb25zY3JpcHQgZmF0aGVycywgaGFzIGEgZ2VuZXJhbCByZWFkeSBhZ2FpbnN0IERvbGFiZWxsYSwgaW4KICAgICAgICAgICAgICAgICAgICBDYWl1cyBDYXNzaXVzLCBhbmQgbm90IHJlYWR5IG9ubHksIGJ1dCBhbHNvIHNraWxsZnVsIGFuZCBicmF2ZS4gSGUgcGVyZm9ybWVkCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZXhwbG9pdHMgYmVmb3JlIHRoZSBhcnJpdmFsIG9mIEJpYnVsdXMsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4sIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBkZWZlYXRlZCB0aGUgbW9zdCBlbWluZW50IGdlbmVyYWxzIG9mIHRoZSBQYXJ0aGlhbnMgYW5kIHRoZWlyIGlubnVtZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgYXJtaWVzLCBhbmQgZGVsaXZlcmVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+IGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBtb3N0IGZvcm1pZGFibGUgaW52YXNpb24uIEkgcGFzcyBvdmVyIGhpcyBncmVhdGVzdCBhbmQgbW9zdCBleHRyYW9yZGluYXJ5IGdsb3J5OwogICAgICAgICAgICAgICAgICAgIGZvciBhcyB0aGUgbWVudGlvbiBvZiBpdCBpcyBub3QgeWV0IGFjY2VwdGFibGUgdG8gZXZlcnkgb25lLCB3ZSBoYWQgYmV0dGVyCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmUgaXQgaW4gb3VyIHJlY29sbGVjdGlvbiB0aGFuIGJ5IGhlYXJpbmcgdGVzdGltb255IHRvIGl0IHdpdGggb3VyIHZvaWNlLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiBmcm9tIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbW9zdCBmb3JtaWRhYmxlIGludmFzaW9uLiBJIHBhc3Mgb3ZlciBoaXMgZ3JlYXRlc3QgYW5kIG1vc3QgZXh0cmFvcmRpbmFyeSBnbG9yeTsKICAgICAgICAgICAgICAgICAgICBmb3IgYXMgdGhlIG1lbnRpb24gb2YgaXQgaXMgbm90IHlldCBhY2NlcHRhYmxlIHRvIGV2ZXJ5IG9uZSwgd2UgaGFkIGJldHRlcgogICAgICAgICAgICAgICAgICAgIHByZXNlcnZlIGl0IGluIG91ciByZWNvbGxlY3Rpb24gdGhhbiBieSBoZWFyaW5nIHRlc3RpbW9ueSB0byBpdCB3aXRoIG91ciB2b2ljZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9InNlY3Rpb24iIC8+IEkgaGF2ZSBub3RpY2VkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc29tZSBwZW9wbGUgaGF2ZSBzYWlkIGJlZm9yZSBub3csIHRoYXQgZXZlbiBCcnV0dXMgaXMgdG9vIG11Y2ggZXh0b2xsZWQgYnkgbWUsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBDYXNzaXVzIGlzIHRvbyBtdWNoIGV4dG9sbGVkOyBhbmQgdGhhdCBieSB0aGlzIHByb3Bvc2l0aW9uIG9mIG1pbmUgYWJzb2x1dGUKICAgICAgICAgICAgICAgICAgICBwb3dlciBhbmQgcXVpdGUgYSBwcmluY2lwYWxpdHkgaXMgY29uZmVycmVkIHVwb24gQ2Fzc2l1cy4gV2hvbSBkbyBJIGV4dG9sPyBUaG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBhcmUgdGhlbXNlbHZlcyB0aGUgZ2xvcnkgb2YgdGhlIHJlcHVibGljLiBXaGF0PyBoYXZlIEkgbm90IGF0IGFsbCB0aW1lcwogICAgICAgICAgICAgICAgICAgIGV4dG9sbGVkIERlY2ltdXMgQnJ1dHVzIHdoZW5ldmVyIEkgaGF2ZSBkZWxpdmVyZWQgbXkgb3BpbmlvbiBhdCBhbGw/IERvIHlvdSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZmluZCBmYXVsdCB3aXRoIG1lPyBvciBzaG91bGQgSSByYXRoZXIgcHJhaXNlIHRoZSBBbnRvbmlpLCB0aGUgZGlzZ3JhY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5mYW15IG5vdCBvbmx5IG9mIHRoZWlyIG93biBmYW1pbGllcywgYnV0IG9mIHRoZSBSb21hbiBuYW1lPyBvciBzaG91bGQgSSBzcGVhawogICAgICAgICAgICAgICAgICAgIGluIGZhdm9yIG9mIENlbnNvcmludXMsIGFuIGVuZW15IGluIHRpbWUgb2Ygd2FyLCBhbiBhc3Nhc3NpbiBpbiB0aW1lIG9mIHBlYWNlPwogICAgICAgICAgICAgICAgICAgIG9yIHNob3VsZCBJIGNvbGxlY3QgYWxsIHRoZSBvdGhlciBydWluZWQgbWVuIG9mIHRoYXQgYmFuZCBvZiByb2JiZXJzPyBCdXQgSSBhbQogICAgICAgICAgICAgICAgICAgIHNvIGZhciBmcm9tIGV4dG9sbGluZyB0aG9zZSBlbmVtaWVzIG9mIHRyYW5xdWlsbGl0eSwgb2YgY29uY29yZCwgb2YgdGhlIGxhd3MsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJ0cyBvZiBqdXN0aWNlLCBhbmQgb2YgbGliZXJ0eSwgdGhhdCBJIGNhbm5vdCBhdm9pZCBoYXRpbmcgdGhlbSBhcyBtdWNoCiAgICAgICAgICAgICAgICAgICAgYXMgSSBsb3ZlIHRoZSByZXB1YmxpYy4gPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQmV3YXJlLAogICAgICAgICAgICAgICAgICAgIHNheXMgb25lLCDigJxob3cgeW91IG9mZmVuZCB0aGUgdmV0ZXJhbnMuIEZvciB0aGlzIGlzIHdoYXQgSSBhbSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRseSB0b2xkLiBCdXQgSSBjZXJ0YWlubHkgb3VnaHQgdG8gcHJvdGVjdCB0aGUgcmlnaHRzIG9mIHRoZSB2ZXRlcmFuczsgb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSBhdCBsZWFzdCB3aG8gYXJlIHdlbGwgZGlzcG9zZWQ7IGJ1dCBzdXJlbHkgSSBvdWdodCBub3QgdG8gZmVhciB0aGVtLiBBbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB2ZXRlcmFucyB3aG8gaGF2ZSB0YWtlbiB1cCBhcm1zIGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMsIGFuZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQgQ2FpdXMgQ2Flc2FyLCByZW1lbWJlcmluZyB0aGUga2luZG5lc3NlcyB3aGljaCB0aGV5IHJlY2VpdmVkIGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCBhbmQgd2hvIGF0IHRoaXMgZGF5IGFyZSBkZWZlbmRpbmcgdGhlIHJlcHVibGljIHRvIHRoZWlyIG93biBncmVhdAogICAgICAgICAgICAgICAgICAgIHBlcnNvbmFsIGRhbmdlcizigJR0aG9zZSBJIG91Z2h0IG5vdCBvbmx5IHRvIGRlZmVuZCwgYnV0IHRvIHNlZWsgdG8KICAgICAgICAgICAgICAgICAgICBwcm9jdXJlIGFkZGl0aW9uYWwgYWR2YW50YWdlcyBmb3IgdGhlbS4gQnV0IHRob3NlIGFsc28gd2hvIHJlbWFpbiBxdWlldCwgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBzaXh0aCBhbmQgZWlnaHRoIGxlZ2lvbiwgSSBjb25zaWRlciB3b3J0aHkgb2YgZ3JlYXQgZ2xvcnkgYW5kIHByYWlzZS4gQnV0IGFzCiAgICAgICAgICAgICAgICAgICAgZm9yIHRob3NlIGNvbXBhbmlvbnMgb2YgQW50b25pdXMsIHdobyBhZnRlciB0aGV5IGhhdmUgZGV2b3VyZWQgdGhlIGJlbmVmaXRzIG9mCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLCBiZXNpZWdlIHRoZSBjb25zdWwgZWxlY3QsIHRocmVhdGVuIHRoaXMgY2l0eSB3aXRoIGZpcmUgYW5kIHN3b3JkLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZlIGdpdmVuIHRoZW1zZWx2ZXMgdXAgdG8gU2F4YSBhbmQgQ2FwaG8sIG1lbiBib3JuIGZvciBjcmltZSBhbmQgcGx1bmRlciwgd2hvCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlcmUgd2hvIHRoaW5rcyB0aGF0IHRob3NlIG1lbiBvdWdodCB0byBiZSBkZWZlbmRlZD8gVGhlcmVmb3JlIHRoZSB2ZXRlcmFucwogICAgICAgICAgICAgICAgICAgIGFyZSBlaXRoZXIgZ29vZCBtZW4sIHdob20gd2Ugb3VnaHQgdG8gbG9hZCB3aXRoIGRpc3RpbmN0aW9uczsgb3IgcXVpZXQgbWVuLCB3aG9tCiAgICAgICAgICAgICAgICAgICAgd2Ugb3VnaHQgdG8gcHJlc2VydmU7IG9yIGltcGlvdXMgb25lcywgYWdhaW5zdCB3aG9zZSBmcmVuenkgd2UgaGF2ZSBkZWNsYXJlZCB3YXIKICAgICAgICAgICAgICAgICAgICBhbmQgdGFrZW4gdXAgbGVnaXRpbWF0ZSBhcm1zLiA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBoYXZlIG5vdGljZWQsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb21lIHBlb3BsZSBoYXZlIHNhaWQgYmVmb3JlIG5vdywgdGhhdCBldmVuIEJydXR1cyBpcyB0b28gbXVjaCBleHRvbGxlZCBieSBtZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IENhc3NpdXMgaXMgdG9vIG11Y2ggZXh0b2xsZWQ7IGFuZCB0aGF0IGJ5IHRoaXMgcHJvcG9zaXRpb24gb2YgbWluZSBhYnNvbHV0ZQogICAgICAgICAgICAgICAgICAgIHBvd2VyIGFuZCBxdWl0ZSBhIHByaW5jaXBhbGl0eSBpcyBjb25mZXJyZWQgdXBvbiBDYXNzaXVzLiBXaG9tIGRvIEkgZXh0b2w/IFRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSB0aGVtc2VsdmVzIHRoZSBnbG9yeSBvZiB0aGUgcmVwdWJsaWMuIFdoYXQ/IGhhdmUgSSBub3QgYXQgYWxsIHRpbWVzCiAgICAgICAgICAgICAgICAgICAgZXh0b2xsZWQgRGVjaW11cyBCcnV0dXMgd2hlbmV2ZXIgSSBoYXZlIGRlbGl2ZXJlZCBteSBvcGluaW9uIGF0IGFsbD8gRG8geW91IHRoZW4KICAgICAgICAgICAgICAgICAgICBmaW5kIGZhdWx0IHdpdGggbWU/IG9yIHNob3VsZCBJIHJhdGhlciBwcmFpc2UgdGhlIEFudG9uaWksIHRoZSBkaXNncmFjZSBhbmQKICAgICAgICAgICAgICAgICAgICBpbmZhbXkgbm90IG9ubHkgb2YgdGhlaXIgb3duIGZhbWlsaWVzLCBidXQgb2YgdGhlIFJvbWFuIG5hbWU/IG9yIHNob3VsZCBJIHNwZWFrCiAgICAgICAgICAgICAgICAgICAgaW4gZmF2b3Igb2YgQ2Vuc29yaW51cywgYW4gZW5lbXkgaW4gdGltZSBvZiB3YXIsIGFuIGFzc2Fzc2luIGluIHRpbWUgb2YgcGVhY2U/CiAgICAgICAgICAgICAgICAgICAgb3Igc2hvdWxkIEkgY29sbGVjdCBhbGwgdGhlIG90aGVyIHJ1aW5lZCBtZW4gb2YgdGhhdCBiYW5kIG9mIHJvYmJlcnM/IEJ1dCBJIGFtCiAgICAgICAgICAgICAgICAgICAgc28gZmFyIGZyb20gZXh0b2xsaW5nIHRob3NlIGVuZW1pZXMgb2YgdHJhbnF1aWxsaXR5LCBvZiBjb25jb3JkLCBvZiB0aGUgbGF3cywgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCBvZiBsaWJlcnR5LCB0aGF0IEkgY2Fubm90IGF2b2lkIGhhdGluZyB0aGVtIGFzIG11Y2gKICAgICAgICAgICAgICAgICAgICBhcyBJIGxvdmUgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.14.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQmV3YXJlLAogICAgICAgICAgICAgICAgICAgIHNheXMgb25lLCDigJxob3cgeW91IG9mZmVuZCB0aGUgdmV0ZXJhbnMuIEZvciB0aGlzIGlzIHdoYXQgSSBhbSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRseSB0b2xkLiBCdXQgSSBjZXJ0YWlubHkgb3VnaHQgdG8gcHJvdGVjdCB0aGUgcmlnaHRzIG9mIHRoZSB2ZXRlcmFuczsgb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSBhdCBsZWFzdCB3aG8gYXJlIHdlbGwgZGlzcG9zZWQ7IGJ1dCBzdXJlbHkgSSBvdWdodCBub3QgdG8gZmVhciB0aGVtLiBBbmQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB2ZXRlcmFucyB3aG8gaGF2ZSB0YWtlbiB1cCBhcm1zIGluIHRoZSBjYXVzZSBvZiB0aGUgcmVwdWJsaWMsIGFuZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQgQ2FpdXMgQ2Flc2FyLCByZW1lbWJlcmluZyB0aGUga2luZG5lc3NlcyB3aGljaCB0aGV5IHJlY2VpdmVkIGZyb20gaGlzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCBhbmQgd2hvIGF0IHRoaXMgZGF5IGFyZSBkZWZlbmRpbmcgdGhlIHJlcHVibGljIHRvIHRoZWlyIG93biBncmVhdAogICAgICAgICAgICAgICAgICAgIHBlcnNvbmFsIGRhbmdlcizigJR0aG9zZSBJIG91Z2h0IG5vdCBvbmx5IHRvIGRlZmVuZCwgYnV0IHRvIHNlZWsgdG8KICAgICAgICAgICAgICAgICAgICBwcm9jdXJlIGFkZGl0aW9uYWwgYWR2YW50YWdlcyBmb3IgdGhlbS4gQnV0IHRob3NlIGFsc28gd2hvIHJlbWFpbiBxdWlldCwgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBzaXh0aCBhbmQgZWlnaHRoIGxlZ2lvbiwgSSBjb25zaWRlciB3b3J0aHkgb2YgZ3JlYXQgZ2xvcnkgYW5kIHByYWlzZS4gQnV0IGFzCiAgICAgICAgICAgICAgICAgICAgZm9yIHRob3NlIGNvbXBhbmlvbnMgb2YgQW50b25pdXMsIHdobyBhZnRlciB0aGV5IGhhdmUgZGV2b3VyZWQgdGhlIGJlbmVmaXRzIG9mCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLCBiZXNpZWdlIHRoZSBjb25zdWwgZWxlY3QsIHRocmVhdGVuIHRoaXMgY2l0eSB3aXRoIGZpcmUgYW5kIHN3b3JkLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZlIGdpdmVuIHRoZW1zZWx2ZXMgdXAgdG8gU2F4YSBhbmQgQ2FwaG8sIG1lbiBib3JuIGZvciBjcmltZSBhbmQgcGx1bmRlciwgd2hvCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlcmUgd2hvIHRoaW5rcyB0aGF0IHRob3NlIG1lbiBvdWdodCB0byBiZSBkZWZlbmRlZD8gVGhlcmVmb3JlIHRoZSB2ZXRlcmFucwogICAgICAgICAgICAgICAgICAgIGFyZSBlaXRoZXIgZ29vZCBtZW4sIHdob20gd2Ugb3VnaHQgdG8gbG9hZCB3aXRoIGRpc3RpbmN0aW9uczsgb3IgcXVpZXQgbWVuLCB3aG9tCiAgICAgICAgICAgICAgICAgICAgd2Ugb3VnaHQgdG8gcHJlc2VydmU7IG9yIGltcGlvdXMgb25lcywgYWdhaW5zdCB3aG9zZSBmcmVuenkgd2UgaGF2ZSBkZWNsYXJlZCB3YXIKICAgICAgICAgICAgICAgICAgICBhbmQgdGFrZW4gdXAgbGVnaXRpbWF0ZSBhcm1zLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['11.15.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldobyB0aGVuIGFyZSB0aGUgdmV0ZXJhbnMgd2hvbSB3ZSBhcmUgdG8gYmUgZmVhcmZ1bCBvZiBvZmZlbmRpbmc/IFRob3NlIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBkZXNpcm91cyB0byBkZWxpdmVyIERlY2ltdXMgQnJ1dHVzIGZyb20gc2llZ2U/IGZvciBob3cgY2FuIHRob3NlIG1lbiwgdG8gd2hvbQogICAgICAgICAgICAgICAgICAgIHRoZSBzYWZldHkgb2YgQnJ1dHVzIGlzIGRlYXIsIGhhdGUgdGhlIG5hbWUgb2YgQ2Fzc2l1cz8gT3IgdGhvc2UgbWVuIHdobyBhYnN0YWluCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0YWtpbmcgYXJtcyBvbiBlaXRoZXIgc2lkZT8gSSBoYXZlIG5vIGZlYXIgb2YgYW55IG9mIHRob3NlIG1lbiB3aG8gZGVsaWdodAogICAgICAgICAgICAgICAgICAgIGluIHRyYW5xdWlsbGl0eSBiZWNvbWluZyBhIG1pc2NoaWV2b3VzIGNpdGl6ZW4uIEJ1dCBhcyBmb3IgdGhlIHRoaXJkIGNsYXNzLCB3aG9tCiAgICAgICAgICAgICAgICAgICAgSSBjYWxsIG5vdCB2ZXRlcmFuIHNvbGRpZXJzLCBidXQgaW5mYW1vdXMgZW5lbWllcywgSSB3aXNoIHRvIGluZmxpY3Qgb24gdGhlbSB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IGJpdHRlciBwYWluLiBBbHRob3VnaCwgTyBjb25zY3JpcHQgZmF0aGVycywgaG93IGxvbmcgYXJlIHdlIHRvIGRlbGl2ZXIgb3VyCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbnMgYXMgaXQgbWF5IHBsZWFzZSB0aGUgdmV0ZXJhbnM/IHdoeSBhcmUgd2UgdG8geWllbGQgc28gbXVjaCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhdWdodGluZXNzPyB3aHkgYXJlIHdlIHRvIG1ha2UgdGhlaXIgYXJyb2dhbmNlIG9mIHN1Y2ggaW1wb3J0YW5jZSBhcyB0byBjaG9vc2UKICAgICAgICAgICAgICAgICAgICBvdXIgZ2VuZXJhbHMgd2l0aCByZWZlcmVuY2UgdG8gdGhlaXIgcGxlYXN1cmU/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgKGZvciBJIG11c3Qgc3BlYWssIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdoYXQgSSBmZWVsKSB0aGluayB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHNvIG11Y2ggdG8gcmVnYXJkIHRoZSB2ZXRlcmFucywgYXMgdG8gbG9vayBhdCB3aGF0IHRoZSB5b3VuZyBzb2xkaWVycywKICAgICAgICAgICAgICAgICAgICB0aGUgZmxvd2VyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPuKAlGF0IHdoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgbmV3IGxlZ2lvbnMsIG1vc3QgZWFnZXIgdG8gZWZmZWN0IHRoZSBkZWxpdmVyYW5jZSBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvdW50cnnigJRhdCB3aGF0IGFsbCBJdGFseSB3aWxsIHRoaW5rIG9mIHlvdXIgd2lzZG9tLiBGb3IgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHdoaWNoIGZsb3VyaXNoZXMgZm9yZXZlci4gQWdlIHN1Y2NlZWRzIGFnZS4gVGhlIGxlZ2lvbnMgb2YgQ2Flc2FyIGhhdmUKICAgICAgICAgICAgICAgICAgICBmbG91cmlzaGVkIGZvciBhIGxvbmcgdGltZTsgYnV0IG5vdyB0aG9zZSB3aG8gYXJlIGZsb3VyaXNoaW5nIGFyZSB0aGUgbGVnaW9ucyBvZgogICAgICAgICAgICAgICAgICAgIFBhbnNhLCBhbmQgdGhlIGxlZ2lvbnMgb2YgSGlydGl1cywgYW5kIHRoZSBsZWdpb25zIG9mIHRoZSBzb24gb2YgQ2Flc2FyLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaW9ucyBvZiBQbGFuY3VzLiBUaGV5IHN1cnBhc3MgdGhlIHZldGVyYW5zIGluIG51bWJlcjsgdGhleSBoYXZlIHRoZSBhZHZhbnRhZ2UKICAgICAgICAgICAgICAgICAgICBvZiB5b3V0aDsgbW9yZW92ZXIsIHRoZXkgc3VycGFzcyB0aGVtIGFsc28gaW4gYXV0aG9yaXR5LiBGb3IgdGhleSBhcmUgZW5nYWdlZCBpbgogICAgICAgICAgICAgICAgICAgIHdhZ2luZyB0aGF0IHdhciB3aGljaCBpcyBhcHByb3ZlZCBvZiBieSBhbGwgbmF0aW9ucy4gVGhlcmVmb3JlLCByZXdhcmRzIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHByb21pc2VkIHRvIHRoZXNlIGxhdHRlci4gVG8gdGhlIGZvcm1lciB0aGV5IGhhdmUgYmVlbiBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgcGFpZDvigJRsZXQgdGhlbSBlbmpveSB0aGVtLiBCdXQgbGV0IHRoZXNlIG90aGVycyBoYXZlIHRob3NlIHJld2FyZHMKICAgICAgICAgICAgICAgICAgICBnaXZlbiB0byB0aGVtIHdoaWNoIHdlIGhhdmUgcHJvbWlzZWQgdGhlbS4gPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBGb3IgdGhhdCBpcyB3aGF0IEkgaG9wZSB0aGF0IHRoZSBpbW1vcnRhbCBnb2RzIHdpbGwgY29uc2lkZXIganVzdC4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.15.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgKGZvciBJIG11c3Qgc3BlYWssIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdoYXQgSSBmZWVsKSB0aGluayB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHNvIG11Y2ggdG8gcmVnYXJkIHRoZSB2ZXRlcmFucywgYXMgdG8gbG9vayBhdCB3aGF0IHRoZSB5b3VuZyBzb2xkaWVycywKICAgICAgICAgICAgICAgICAgICB0aGUgZmxvd2VyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+4oCUYXQgd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZSBuZXcgbGVnaW9ucywgbW9zdCBlYWdlciB0byBlZmZlY3QgdGhlIGRlbGl2ZXJhbmNlIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeeKAlGF0IHdoYXQgYWxsIEl0YWx5IHdpbGwgdGhpbmsgb2YgeW91ciB3aXNkb20uIEZvciB0aGVyZSBpcwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgd2hpY2ggZmxvdXJpc2hlcyBmb3JldmVyLiBBZ2Ugc3VjY2VlZHMgYWdlLiBUaGUgbGVnaW9ucyBvZiBDYWVzYXIgaGF2ZQogICAgICAgICAgICAgICAgICAgIGZsb3VyaXNoZWQgZm9yIGEgbG9uZyB0aW1lOyBidXQgbm93IHRob3NlIHdobyBhcmUgZmxvdXJpc2hpbmcgYXJlIHRoZSBsZWdpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgUGFuc2EsIGFuZCB0aGUgbGVnaW9ucyBvZiBIaXJ0aXVzLCBhbmQgdGhlIGxlZ2lvbnMgb2YgdGhlIHNvbiBvZiBDYWVzYXIsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBsZWdpb25zIG9mIFBsYW5jdXMuIFRoZXkgc3VycGFzcyB0aGUgdmV0ZXJhbnMgaW4gbnVtYmVyOyB0aGV5IGhhdmUgdGhlIGFkdmFudGFnZQogICAgICAgICAgICAgICAgICAgIG9mIHlvdXRoOyBtb3Jlb3ZlciwgdGhleSBzdXJwYXNzIHRoZW0gYWxzbyBpbiBhdXRob3JpdHkuIEZvciB0aGV5IGFyZSBlbmdhZ2VkIGluCiAgICAgICAgICAgICAgICAgICAgd2FnaW5nIHRoYXQgd2FyIHdoaWNoIGlzIGFwcHJvdmVkIG9mIGJ5IGFsbCBuYXRpb25zLiBUaGVyZWZvcmUsIHJld2FyZHMgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvbWlzZWQgdG8gdGhlc2UgbGF0dGVyLiBUbyB0aGUgZm9ybWVyIHRoZXkgaGF2ZSBiZWVuIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBwYWlkO+KAlGxldCB0aGVtIGVuam95IHRoZW0uIEJ1dCBsZXQgdGhlc2Ugb3RoZXJzIGhhdmUgdGhvc2UgcmV3YXJkcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIHRvIHRoZW0gd2hpY2ggd2UgaGF2ZSBwcm9taXNlZCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.15.40'] = ""
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCwgTyBjb25zY3JpcHQgZmF0aGVycywgaXQgc2VlbXMgdmVyeSB1bmJlY29taW5nIGZvciB0aGF0IG1hbiB3aG9zZQogICAgICAgICAgICAgICAgICAgIGNvdW5zZWxzIHlvdSBoYXZlIHNvIG9mdGVuIGFkb3B0ZWQgaW4gdGhlIG1vc3QgaW1wb3J0YW50IGFmZmFpcnMsIHRvIGJlIGRlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGRlbHVkZWQsIGFuZCB0byBjb21taXQgbWlzdGFrZXM7IHlldCBJIGNvbnNvbGUgbXlzZWxmLCBzaW5jZSBJIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgbWlzdGFrZSBpbiBjb21wYW55IHdpdGggeW91LCBhbmQgaW4gY29tcGFueSBhbHNvIHdpdGggYSBjb25zdWwgb2YgdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgd2lzZG9tLiBGb3Igd2hlbiB0d28gbWVuIG9mIGNvbnN1bGFyIHJhbmsgaGFkIGJyb3VnaHQgdXMgaG9wZSBvZiBhbiBob25vcmFibGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgdGhleSBhcHBlYXJlZCwgYXMgYmVpbmcgZnJpZW5kcyBhbmQgZXh0cmVtZWx5IGludGltYXRlIHdpdGggTWFyY3VzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIHRvIGJlIGF3YXJlIG9mIHNvbWUgd2VhayBwb2ludCBhYm91dCBoaW0gd2l0aCB3aGljaCB3ZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdW5hY3F1YWludGVkLiBIaXMgd2lmZSBhbmQgY2hpbGRyZW4gYXJlIGluIHRoZSBob3VzZSBvZiBvbmU7IHRoZSBvdGhlciBpcyBrbm93bgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGRheSB0byBzZW5kIGxldHRlcnMgdG8sIHRvIHJlY2VpdmUgbGV0dGVycyBmcm9tLCBhbmQgb3Blbmx5IHRvIGZhdm9yCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXNlIG1lbiwgdGhlbiwgYXBwZWFyZWQgbGlrZWx5IHRvIGhhdmUgc29tZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBmb3IgZXhob3J0aW5nIHVzIHRvIHBlYWNlLCB3aGljaCB0aGV5IGhhZCBkb25lIGZvciBzb21lIHRpbWUuIFRoZSBjb25zdWwsCiAgICAgICAgICAgICAgICAgICAgdG9vLCBhZGRlZCB0aGUgd2VpZ2h0IG9mIGhpcyBleGhvcnRhdGlvbjsgYW5kIHdoYXQgYSBjb25zdWwhIElmIHdlIGxvb2sgZm9yCiAgICAgICAgICAgICAgICAgICAgcHJ1ZGVuY2UsIG9uZSB3aG8gd2FzIG5vdCBlYXNpbHkgdG8gYmUgZGVjZWl2ZWQ7IGlmIGZvciB2aXJ0dWUgYW5kIGNvdXJhZ2UsIG9uZQogICAgICAgICAgICAgICAgICAgIHdobyB3b3VsZCBuZXZlciBhZG1pdCBvZiBwZWFjZSB1bmxlc3MgQW50b25pdXMgc3VibWl0dGVkIGFuZCBjb25mZXNzZWQgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHRvIGJlIHZhbnF1aXNoZWQ7IGlmIGZvciBncmVhdG5lc3Mgb2YgbWluZCwgb25lIHdobyB3b3VsZCBwcmVmZXIgZGVhdGggdG8KICAgICAgICAgICAgICAgICAgICBzbGF2ZXJ5LiBZb3UgdG9vLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhcHBlYXJlZCB0byBiZSBpbmR1Y2VkIHRvIHRoaW5rIG5vdCBvZgogICAgICAgICAgICAgICAgICAgIGFjY2VwdGluZyBidXQgb2YgaW1wb3NpbmcgY29uZGl0aW9ucywgbm90IHNvIG11Y2ggYmVjYXVzZSB5b3Ugd2VyZSBmb3JnZXRmdWwgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIG1vc3QgaW1wb3J0YW50IGFuZCBkaWduaWZpZWQgcmVzb2x1dGlvbnMsIGFzIGJlY2F1c2UgeW91IGhhZCBob3BlcwogICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RlZCB5b3Ugb2YgYSBzdXJyZW5kZXIgb24gdGhlIHBhcnQgb2YgQW50b25pdXMsIHdoaWNoIGhpcyBmcmllbmRzCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIHRvIGNhbGwgcGVhY2UuIE15IG93biBob3BlcywgYW5kIEkgaW1hZ2luZSB5b3VycyBhbHNvLCB3ZXJlIGluY3JlYXNlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBjaXJjdW1zdGFuY2Ugb2YgbXkgaGVhcmluZyB0aGF0IHRoZSBmYW1pbHkgb2YgQW50b25pdXMgd2FzIG92ZXJ3aGVsbWVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBkaXN0cmVzcywgYW5kIHRoYXQgaGlzIHdpZmUgd2FzIGluY2Vzc2FudGx5IGxhbWVudGluZy4gQW5kIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSwgdG9vLCBJIHNhdyB0aGF0IHRoZSBwYXJ0aXNhbnMsIG9uIHdob3NlIGNvdW50ZW5hbmNlIG15IGV5ZXMgYXJlIGFsd2F5cwogICAgICAgICAgICAgICAgICAgIGR3ZWxsaW5nIGxvb2tlZCBtb3JlIHNvcnJvd2Z1bCB0aGFuIHVzdWFsLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZAogICAgICAgICAgICAgICAgICAgIGlmIHRoYXQgaXMgbm90IHNvLCB3aHkgb24gYSBzdWRkZW4gaGFzIG1lbnRpb24gYmVlbiBtYWRlIG9mIHBlYWNlIGJ5IFBpc28gYW5kCiAgICAgICAgICAgICAgICAgICAgQ2FsZW51cyBvZiBhbGwgcGVvcGxlIGluIHRoZSB3b3JsZCwgd2h5IGF0IHRoaXMgcGFydGljdWxhciBtb21lbnQsIHdoeSBzbwogICAgICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWRseT8gUGlzbyBkZWNsYXJlcyB0aGF0IGhlIGtub3dzIG5vdGhpbmcsIHRoYXQgaGUgaGFzIG5vdCBoZWFyZCBhbnkKICAgICAgICAgICAgICAgICAgICB0aGluZy4gQ2FsZW51cyBkZWNsYXJlcyB0aGF0IG5vIG5ld3MgaGFzIGJlZW4gYnJvdWdodC4gQW5kIHRoZXkgbWFrZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50IG5vdywgYWZ0ZXIgdGhleSB0aGluayB0aGF0IHdlIGFyZSBpbnZvbHZlZCBpbiBhIHBhY2lmaWMgZW1iYXNzeS4gV2hhdAogICAgICAgICAgICAgICAgICAgIG5lZWQgaGF2ZSB3ZSwgdGhlbiwgb2YgYW55IG5ldyBkZXRlcm1pbmF0aW9uLCBpZiBubyBuZXcgY2lyY3Vtc3RhbmNlcyBoYXZlCiAgICAgICAgICAgICAgICAgICAgYXJpc2VuIHRvIGNhbGwgZm9yIG9uZT8gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBUaGVzZSBtZW4sIHRoZW4sIGFwcGVhcmVkIGxpa2VseSB0byBoYXZlIHNvbWUKICAgICAgICAgICAgICAgICAgICByZWFzb24gZm9yIGV4aG9ydGluZyB1cyB0byBwZWFjZSwgd2hpY2ggdGhleSBoYWQgZG9uZSBmb3Igc29tZSB0aW1lLiBUaGUgY29uc3VsLAogICAgICAgICAgICAgICAgICAgIHRvbywgYWRkZWQgdGhlIHdlaWdodCBvZiBoaXMgZXhob3J0YXRpb247IGFuZCB3aGF0IGEgY29uc3VsISBJZiB3ZSBsb29rIGZvcgogICAgICAgICAgICAgICAgICAgIHBydWRlbmNlLCBvbmUgd2hvIHdhcyBub3QgZWFzaWx5IHRvIGJlIGRlY2VpdmVkOyBpZiBmb3IgdmlydHVlIGFuZCBjb3VyYWdlLCBvbmUKICAgICAgICAgICAgICAgICAgICB3aG8gd291bGQgbmV2ZXIgYWRtaXQgb2YgcGVhY2UgdW5sZXNzIEFudG9uaXVzIHN1Ym1pdHRlZCBhbmQgY29uZmVzc2VkIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB0byBiZSB2YW5xdWlzaGVkOyBpZiBmb3IgZ3JlYXRuZXNzIG9mIG1pbmQsIG9uZSB3aG8gd291bGQgcHJlZmVyIGRlYXRoIHRvCiAgICAgICAgICAgICAgICAgICAgc2xhdmVyeS4gWW91IHRvbywgTyBjb25zY3JpcHQgZmF0aGVycywgYXBwZWFyZWQgdG8gYmUgaW5kdWNlZCB0byB0aGluayBub3Qgb2YKICAgICAgICAgICAgICAgICAgICBhY2NlcHRpbmcgYnV0IG9mIGltcG9zaW5nIGNvbmRpdGlvbnMsIG5vdCBzbyBtdWNoIGJlY2F1c2UgeW91IHdlcmUgZm9yZ2V0ZnVsIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBtb3N0IGltcG9ydGFudCBhbmQgZGlnbmlmaWVkIHJlc29sdXRpb25zLCBhcyBiZWNhdXNlIHlvdSBoYWQgaG9wZXMKICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWQgeW91IG9mIGEgc3VycmVuZGVyIG9uIHRoZSBwYXJ0IG9mIEFudG9uaXVzLCB3aGljaCBoaXMgZnJpZW5kcwogICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZCB0byBjYWxsIHBlYWNlLiBNeSBvd24gaG9wZXMsIGFuZCBJIGltYWdpbmUgeW91cnMgYWxzbywgd2VyZSBpbmNyZWFzZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgY2lyY3Vtc3RhbmNlIG9mIG15IGhlYXJpbmcgdGhhdCB0aGUgZmFtaWx5IG9mIEFudG9uaXVzIHdhcyBvdmVyd2hlbG1lZAogICAgICAgICAgICAgICAgICAgIHdpdGggZGlzdHJlc3MsIGFuZCB0aGF0IGhpcyB3aWZlIHdhcyBpbmNlc3NhbnRseSBsYW1lbnRpbmcuIEFuZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHksIHRvbywgSSBzYXcgdGhhdCB0aGUgcGFydGlzYW5zLCBvbiB3aG9zZSBjb3VudGVuYW5jZSBteSBleWVzIGFyZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBkd2VsbGluZyBsb29rZWQgbW9yZSBzb3Jyb3dmdWwgdGhhbiB1c3VhbC4gPC90cmFuc2xhdGlvbj4="
translation['12.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQKICAgICAgICAgICAgICAgICAgICBpZiB0aGF0IGlzIG5vdCBzbywgd2h5IG9uIGEgc3VkZGVuIGhhcyBtZW50aW9uIGJlZW4gbWFkZSBvZiBwZWFjZSBieSBQaXNvIGFuZAogICAgICAgICAgICAgICAgICAgIENhbGVudXMgb2YgYWxsIHBlb3BsZSBpbiB0aGUgd29ybGQsIHdoeSBhdCB0aGlzIHBhcnRpY3VsYXIgbW9tZW50LCB3aHkgc28KICAgICAgICAgICAgICAgICAgICB1bmV4cGVjdGVkbHk/IFBpc28gZGVjbGFyZXMgdGhhdCBoZSBrbm93cyBub3RoaW5nLCB0aGF0IGhlIGhhcyBub3QgaGVhcmQgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcuIENhbGVudXMgZGVjbGFyZXMgdGhhdCBubyBuZXdzIGhhcyBiZWVuIGJyb3VnaHQuIEFuZCB0aGV5IG1ha2UgdGhhdAogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCBub3csIGFmdGVyIHRoZXkgdGhpbmsgdGhhdCB3ZSBhcmUgaW52b2x2ZWQgaW4gYSBwYWNpZmljIGVtYmFzc3kuIFdoYXQKICAgICAgICAgICAgICAgICAgICBuZWVkIGhhdmUgd2UsIHRoZW4sIG9mIGFueSBuZXcgZGV0ZXJtaW5hdGlvbiwgaWYgbm8gbmV3IGNpcmN1bXN0YW5jZXMgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFyaXNlbiB0byBjYWxsIGZvciBvbmU/IDwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgaGF2ZSBiZWVuIGRlY2VpdmVkLOKAlHdlIGhhdmUsIEkgc2F5LCBiZWVuIGRlY2VpdmVkLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMuIEl0IGlzIHRoZSBjYXVzZSBvZiBBbnRvbml1cyB0aGF0IGhhcyBiZWVuIHBsZWFkZWQgYnkgaGlzIGZyaWVuZHMsIGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgY2F1c2Ugb2YgdGhlIHB1YmxpYyBBbmQgSSBkaWQgaW5kZWVkIHNlZSB0aGF0LCB0aG91Z2ggdGhyb3VnaCBhIHNvcnQgb2YKICAgICAgICAgICAgICAgICAgICBtaXN0IHRoZSBzYWZldHkgb2YgRGVjaW11cyBCcnV0dXMgaGFkIGRhenpsZWQgbXkgZXllc2lnaHQuIEJ1dCBpZiBpbiB3YXIKICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRlcyB3ZXJlIGluIHRoZSBoYWJpdCBvZiBiZWluZyBnaXZlbiBJIHdvdWxkIGdsYWRseSBhbGxvdyBteXNlbGYgdG8gYmUKICAgICAgICAgICAgICAgICAgICBoZW1tZWQgaW4sIHNvIGxvbmcgYXMgRGVjaW11cyBCcnV0dXMgbWlnaHQgYmUgcmVsZWFzZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2Ugd2VyZSBjYXVnaHQgYnkgdGhpcyBleHByZXNzaW9uIG9mIFF1aW50dXMgRnVmaXVzOwogICAgICAgICAgICAgICAgICAgIOKAnFNoYWxsIHdlIG5vdCBsaXN0ZW4gdG8gQW50b25pdXMgZXZlbiBpZiBoZSByZXRpcmVzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPj8gU2hhbGwgd2Ugbm90LCBldmVuIGlmIGhlIGRlY2xhcmVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3aWxsIHN1Ym1pdCBoaW1zZWxmIHRvIHRoZSBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZT/igJ0gSXQgc2VlbWVkCiAgICAgICAgICAgICAgICAgICAgaGFyc2ggdG8gc2F5IHRoYXQuIFRodXMgaXQgd2FzIHRoYXQgd2Ugd2VyZSBicm9rZW47IHdlIHlpZWxkZWQuIERvZXMgaGUgdGhlbgogICAgICAgICAgICAgICAgICAgIHJldGlyZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IOKAnEkKICAgICAgICAgICAgICAgICAgICBkb24ndCBrbm93LuKAnSBJcyBoZSBvYmV5aW5nIHRoZSBzZW5hdGU/IOKAnEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICBzbyzigJ0gc2F5cyBDYWxlbnVzLCDigJxidXQgc28gYXMgdG8gcHJlc2VydmUgaGlzIG93biBkaWduaXR5IGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgdGltZS7igJ0gWW91IHRoZW4sIE8gY29uc2NyaXB0IGZhdGhlcnMsIGFyZSB0byBtYWtlIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZXhlcnRpb25zIGZvciB0aGUgZXhwcmVzcyBwdXJwb3NlIG9mIGxvc2luZyB5b3VyIG93biBkaWduaXR5LCB3aGljaCBpcyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZ3JlYXQsIGFuZCBvZiBwcmVzZXJ2aW5nIHRoYXQgb2YgQW50b25pdXMsIHdoaWNoIG5laXRoZXIgaGFzIG5vciBjYW4gaGF2ZSBhbnkKICAgICAgICAgICAgICAgICAgICBleGlzdGVuY2U7IGFuZCBvZiBlbmFibGluZyBoaW0gdG8gcmVjb3ZlciB0aGF0IGJ5IHlvdXIgY29uZHVjdCwgd2hpY2ggaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgbG9zdCBieSBoaXMgb3duLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+IOKAnEJ1dCwgaG93ZXZlciwgdGhhdAogICAgICAgICAgICAgICAgICAgIG1hdHRlciBpcyBub3Qgb3BlbiBmb3IgY29uc2lkZXJhdGlvbiBub3c7IGFuIGVtYmFzc3kgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQu4oCdIEJ1dCB3aGF0IGlzIHRoZXJlIHdoaWNoIGlzIG5vdCBvcGVuIGZvciBjb25zaWRlcmF0aW9uIHRvIGEKICAgICAgICAgICAgICAgICAgICB3aXNlIG1hbiwgYXMgbG9uZyBhcyBpdCBjYW4gYmUgcmVtb2RlbGVkPyBBbnkgbWFuIGlzIGxpYWJsZSB0byBhIG1pc3Rha2U7IGJ1dCBubwogICAgICAgICAgICAgICAgICAgIG9uZSBidXQgYSBkb3ducmlnaHQgZm9vbCB3aWxsIHBlcnNpc3QgaW4gZXJyb3IuIEZvciBzZWNvbmQgdGhvdWdodHMsIGFzIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHNheSwgYXJlIGJlc3QuIFRoZSBtaXN0IHdoaWNoIEkgc3Bva2Ugb2YganVzdCBub3cgaXMgZGlzcGVsbGVkOiBsaWdodCBoYXMKICAgICAgICAgICAgICAgICAgICBhcmlzZW46IHRoZSBjYXNlIGlzIHBsYWluOiB3ZSBzZWUgZXZlcnkgdGhpbmcsIGFuZCB0aGF0IG5vdCBieSBvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgYWN1dGVuZXNzLCBidXQgd2UgYXJlIHdhcm5lZCBieSBvdXIgZnJpZW5kcy4gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2Ugd2VyZSBjYXVnaHQgYnkgdGhpcyBleHByZXNzaW9uIG9mIFF1aW50dXMgRnVmaXVzOwogICAgICAgICAgICAgICAgICAgIOKAnFNoYWxsIHdlIG5vdCBsaXN0ZW4gdG8gQW50b25pdXMgZXZlbiBpZiBoZSByZXRpcmVzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+PyBTaGFsbCB3ZSBub3QsIGV2ZW4gaWYgaGUgZGVjbGFyZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdpbGwgc3VibWl0IGhpbXNlbGYgdG8gdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlP+KAnSBJdCBzZWVtZWQKICAgICAgICAgICAgICAgICAgICBoYXJzaCB0byBzYXkgdGhhdC4gVGh1cyBpdCB3YXMgdGhhdCB3ZSB3ZXJlIGJyb2tlbjsgd2UgeWllbGRlZC4gRG9lcyBoZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmV0aXJlIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+PyDigJxJCiAgICAgICAgICAgICAgICAgICAgZG9uJ3Qga25vdy7igJ0gSXMgaGUgb2JleWluZyB0aGUgc2VuYXRlPyDigJxJIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgc28s4oCdIHNheXMgQ2FsZW51cywg4oCcYnV0IHNvIGFzIHRvIHByZXNlcnZlIGhpcyBvd24gZGlnbml0eSBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHRpbWUu4oCdIFlvdSB0aGVuLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhcmUgdG8gbWFrZSBncmVhdAogICAgICAgICAgICAgICAgICAgIGV4ZXJ0aW9ucyBmb3IgdGhlIGV4cHJlc3MgcHVycG9zZSBvZiBsb3NpbmcgeW91ciBvd24gZGlnbml0eSwgd2hpY2ggaXMgdmVyeQogICAgICAgICAgICAgICAgICAgIGdyZWF0LCBhbmQgb2YgcHJlc2VydmluZyB0aGF0IG9mIEFudG9uaXVzLCB3aGljaCBuZWl0aGVyIGhhcyBub3IgY2FuIGhhdmUgYW55CiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlOyBhbmQgb2YgZW5hYmxpbmcgaGltIHRvIHJlY292ZXIgdGhhdCBieSB5b3VyIGNvbmR1Y3QsIHdoaWNoIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGxvc3QgYnkgaGlzIG93bi4gPC90cmFuc2xhdGlvbj4="
translation['12.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiDigJxCdXQsIGhvd2V2ZXIsIHRoYXQKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgaXMgbm90IG9wZW4gZm9yIGNvbnNpZGVyYXRpb24gbm93OyBhbiBlbWJhc3N5IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkLuKAnSBCdXQgd2hhdCBpcyB0aGVyZSB3aGljaCBpcyBub3Qgb3BlbiBmb3IgY29uc2lkZXJhdGlvbiB0byBhCiAgICAgICAgICAgICAgICAgICAgd2lzZSBtYW4sIGFzIGxvbmcgYXMgaXQgY2FuIGJlIHJlbW9kZWxlZD8gQW55IG1hbiBpcyBsaWFibGUgdG8gYSBtaXN0YWtlOyBidXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgYnV0IGEgZG93bnJpZ2h0IGZvb2wgd2lsbCBwZXJzaXN0IGluIGVycm9yLiBGb3Igc2Vjb25kIHRob3VnaHRzLCBhcyBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBzYXksIGFyZSBiZXN0LiBUaGUgbWlzdCB3aGljaCBJIHNwb2tlIG9mIGp1c3Qgbm93IGlzIGRpc3BlbGxlZDogbGlnaHQgaGFzCiAgICAgICAgICAgICAgICAgICAgYXJpc2VuOiB0aGUgY2FzZSBpcyBwbGFpbjogd2Ugc2VlIGV2ZXJ5IHRoaW5nLCBhbmQgdGhhdCBub3QgYnkgb3VyIG93bgogICAgICAgICAgICAgICAgICAgIGFjdXRlbmVzcywgYnV0IHdlIGFyZSB3YXJuZWQgYnkgb3VyIGZyaWVuZHMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IGhlYXJkIGp1c3Qgbm93IHdoYXQgd2FzIHRoZSBzdGF0ZW1lbnQgbWFkZSBieSBhIG1vc3QgYWRtaXJhYmxlIG1hbi4gSSBmb3VuZCwKICAgICAgICAgICAgICAgICAgICBzYWlkIGhlLCBoaXMgaG91c2UsIGhpcyB3aWZlLCBoaXMgY2hpbGRyZW4sIGFsbCBpbiBncmVhdCBkaXN0cmVzcy4gR29vZCBtZW4KICAgICAgICAgICAgICAgICAgICBtYXJ2ZWxlZCBhdCBtZSwgbXkgZnJpZW5kcyBibGFtZWQgbWUgZm9yIGhhdmluZyBiZWVuIGxlZCBieSB0aGUgaG9wZSBvZiBwZWFjZSB0bwogICAgICAgICAgICAgICAgICAgIHVuZGVydGFrZSBhbiBlbWJhc3N5LiBBbmQgbm8gd29uZGVyLCBPIFB1YmxpdXMgU2VydmlsaXVzLiBGb3IgYnkgeW91ciBvd24gbW9zdAogICAgICAgICAgICAgICAgICAgIHRydWUgYW5kIG1vc3Qgd2VpZ2h0eSBhcmd1bWVudHMgQW50b25pdXMgd2FzIHN0cmlwcGVkLCBJIGRvIG5vdCBzYXkgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgZGlnbml0eSwgYnV0IG9mIGV2ZW4gZXZlcnkgaG9wZSBvZiBzYWZldHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBXaG8KICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3Qgd29uZGVyIGlmIHlvdSB3ZXJlIHRvIGdvIGFzIGFuIGFtYmFzc2Fkb3IgdG8gaGltPyBJIGp1ZGdlIGJ5IG15IG93bgogICAgICAgICAgICAgICAgICAgIGNhc2U7IGZvciB3aXRoIHJlZ2FyZCB0byBteXNlbGYgSSBzZWUgaG93IHRoZSBzYW1lIGRlc2lnbiBhcyB5b3UgY29uY2VpdmVkIGlzCiAgICAgICAgICAgICAgICAgICAgZm91bmQgZmF1bHQgd2l0aC4gQW5kIGFyZSB3ZSB0aGUgb25seSBwZW9wbGUgYmxhbWVkPyBXaGF0PyBkaWQgdGhhdCBtb3N0IGdhbGxhbnQKICAgICAgICAgICAgICAgICAgICBtYW4gc3BlYWsgc28gbG9uZyBhbmQgc28gcHJlY2lzZWx5IGEgbGl0dGxlIHdoaWxlIGFnbyB3aXRob3V0IGFueSByZWFzb24/IFdoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgaGUgbGFib3JpbmcgZm9yLCBleGNlcHQgdG8gcmVtb3ZlIGZyb20gaGltc2VsZiBhIGdyb3VuZGxlc3Mgc3VzcGljaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdHJlYWNoZXJ5PyBBbmQgd2hlbmNlIGRpZCB0aGF0IHN1c3BpY2lvbiBhcmlzZT8gRnJvbSBoaXMgdW5leHBlY3RlZCBhZHZvY2FjeSBvZgogICAgICAgICAgICAgICAgICAgIHBlYWNlLCB3aGljaCBoZSBhZG9wdGVkIGFsbCBvbiBhIHN1ZGRlbiwgYmVpbmcgdGFrZW4gaW4gYnkgdGhlIHNhbWUgZXJyb3IgdGhhdAogICAgICAgICAgICAgICAgICAgIHdlIHdlcmUuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBXaG8KICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3Qgd29uZGVyIGlmIHlvdSB3ZXJlIHRvIGdvIGFzIGFuIGFtYmFzc2Fkb3IgdG8gaGltPyBJIGp1ZGdlIGJ5IG15IG93bgogICAgICAgICAgICAgICAgICAgIGNhc2U7IGZvciB3aXRoIHJlZ2FyZCB0byBteXNlbGYgSSBzZWUgaG93IHRoZSBzYW1lIGRlc2lnbiBhcyB5b3UgY29uY2VpdmVkIGlzCiAgICAgICAgICAgICAgICAgICAgZm91bmQgZmF1bHQgd2l0aC4gQW5kIGFyZSB3ZSB0aGUgb25seSBwZW9wbGUgYmxhbWVkPyBXaGF0PyBkaWQgdGhhdCBtb3N0IGdhbGxhbnQKICAgICAgICAgICAgICAgICAgICBtYW4gc3BlYWsgc28gbG9uZyBhbmQgc28gcHJlY2lzZWx5IGEgbGl0dGxlIHdoaWxlIGFnbyB3aXRob3V0IGFueSByZWFzb24/IFdoYXQKICAgICAgICAgICAgICAgICAgICB3YXMgaGUgbGFib3JpbmcgZm9yLCBleGNlcHQgdG8gcmVtb3ZlIGZyb20gaGltc2VsZiBhIGdyb3VuZGxlc3Mgc3VzcGljaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdHJlYWNoZXJ5PyBBbmQgd2hlbmNlIGRpZCB0aGF0IHN1c3BpY2lvbiBhcmlzZT8gRnJvbSBoaXMgdW5leHBlY3RlZCBhZHZvY2FjeSBvZgogICAgICAgICAgICAgICAgICAgIHBlYWNlLCB3aGljaCBoZSBhZG9wdGVkIGFsbCBvbiBhIHN1ZGRlbiwgYmVpbmcgdGFrZW4gaW4gYnkgdGhlIHNhbWUgZXJyb3IgdGhhdAogICAgICAgICAgICAgICAgICAgIHdlIHdlcmUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBpZiBhbiBlcnJvciBoYXMgYmVlbiBjb21taXR0ZWQsIE8KICAgICAgICAgICAgICAgICAgICBjb25zY3JpcHQgZmF0aGVycywgb3dpbmcgdG8gYSBncm91bmRsZXNzIGFuZCBmYWxsYWNpb3VzIGhvcGUsIGxldCB1cyByZXR1cm4gaW50bwogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCByb2FkLiBUaGUgYmVzdCBoYXJib3IgZm9yIGEgcGVuaXRlbnQgaXMgYSBjaGFuZ2Ugb2YgaW50ZW50aW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaWYgYW4gZXJyb3IgaGFzIGJlZW4gY29tbWl0dGVkLCBPCiAgICAgICAgICAgICAgICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIG93aW5nIHRvIGEgZ3JvdW5kbGVzcyBhbmQgZmFsbGFjaW91cyBob3BlLCBsZXQgdXMgcmV0dXJuIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgcm9hZC4gVGhlIGJlc3QgaGFyYm9yIGZvciBhIHBlbml0ZW50IGlzIGEgY2hhbmdlIG9mIGludGVudGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzISB3aGF0IGdvb2QgY2FuIG91ciBlbWJhc3N5IGRvIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljPyBXaGF0IGdvb2QsIGRvIEkgc2F5PyBXaGF0IHdpbGwgeW91IHNheSBpZiBpdCB3aWxsIGV2ZW4gZG8gdXMgaGFybT8KICAgICAgICAgICAgICAgICAgICBXaWxsIGRvIHVzIGhhcm0/IFdoYXQgaWYgaXQgYWxyZWFkeSBoYXMgZG9uZSB1cyBoYXJtPyBEbyB5b3Ugc3VwcG9zZSB0aGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICBtb3N0IGVuZXJnZXRpYyBhbmQgZmVhcmxlc3MgZGVzaXJlIHNob3duIGJ5IHRoZSBSb21hbiBwZW9wbGUgZm9yIHJlY292ZXJ5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbGliZXJ0eSBoYXMgYmVlbiBkYW1wZW5lZCBhbmQgd2Vha2VuZWQgYnkgaGVhcmluZyBvZiB0aGlzIGVtYmFzc3kgZm9yCiAgICAgICAgICAgICAgICAgICAgcGVhY2U/IFdoYXQgZG8geW91IHRoaW5rIHRoZSBtdW5pY2lwYWwgdG93bnMgZmVlbD8gYW5kIHRoZSBjb2xvbmllcyEgV2hhdCBkbyB5b3UKICAgICAgICAgICAgICAgICAgICB0aGluayB3aWxsIGJlIHRoZSBmZWVsaW5ncyBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4hIERvIHlvdSBzdXBwb3NlIHRoYXQgaXQgd2lsbCBjb250aW51ZSB0byBnbG93IHdpdGggdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB6ZWFsIHdpdGggd2hpY2ggaXQgYnVybmVkIGJlZm9yZSB0byBleHRpbmd1aXNoIHRoaXMgY29tbW9uIGNvbmZsYWdyYXRpb24/IERvIHdlCiAgICAgICAgICAgICAgICAgICAgbm90IHN1cHBvc2UgdGhhdCB0aG9zZSBtZW4gd2lsbCByZXBlbnQgb2YgaGF2aW5nIHByb2Zlc3NlZCBhbmQgZGlzcGxheWVkIHNvIG11Y2gKICAgICAgICAgICAgICAgICAgICBoYXRyZWQgdG8gQW50b25pdXMsIHdobyBwcm9taXNlZCB1cyBtb25leSBhbmQgYXJtczsgd2hvIGRldm90ZWQgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIHdob2xseSwgYm9keSwgaGVhcnQsIGFuZCBzb3VsLCB0byB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYyEgSG93IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCB3aGljaCBhdCB0aGUgcHJlc2VudCB0aW1lCiAgICAgICAgICAgICAgICAgICAgZmVlbHMgbGlrZSBhIHNlY29uZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIGFwcHJvdmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGRlc2lnbiBvZiB5b3Vycz8gVGhhdCBjaXR5IHByb25vdW5jZWQgdGhlbSBpbXBpb3VzIGNpdGl6ZW5zLCBjYXN0IHRoZW0gb3V0LAogICAgICAgICAgICAgICAgICAgIGFuZCBrZXB0IHRoZW0gb3V0LiBBbnRvbml1cyB3YXMgYmFyZWx5IHNhdmVkIGZyb20gdGhlIGhhbmRzIG9mIHRoYXQgY2l0eSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBtYWRlIGEgbW9zdCBnYWxsYW50IGF0dGVtcHQgdG8gY3J1c2ggaGltLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4gTmVlZAogICAgICAgICAgICAgICAgICAgIEkgc2F5IG1vcmU/IEFyZSB3ZSBub3QgYnkgdGhlc2UgcHJvY2VlZGluZ3MgY3V0dGluZyB0aGUgc2luZXdzIG9mIG91ciBvd24KICAgICAgICAgICAgICAgICAgICBsZWdpb25zOyBmb3Igd2hhdCBtYW4gY2FuIGVuZ2FnZSB3aXRoIGFyZG9yIGluIGEgd2FyLCB3aGVuIHRoZSBob3BlIG9mIHBlYWNlIGlzCiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkIHRvIGhpbT8gRXZlbiB0aGF0IGdvZGxpa2UgYW5kIGRpdmluZSBNYXJ0aWFsIGxlZ2lvbiB3aWxsIGdyb3cgbGFuZ3VpZAogICAgICAgICAgICAgICAgICAgIGF0IGFuZCBiZSBjb3dlZCBieSB0aGUgcmVjZWlwdCBvZiB0aGlzIG5ld3MsIGFuZCB3aWxsIGxvc2UgdGhhdCBtb3N0IG5vYmxlIHRpdGxlCiAgICAgICAgICAgICAgICAgICAgb2YgTWFydGlhbDsgdGhlaXIgc3dvcmRzIHdpbGwgZmFsbCB0byB0aGUgZ3JvdW5kOyB0aGVpciB3ZWFwb25zIHdpbGwgZHJvcCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaGFuZHMuIEZvciwgZm9sbG93aW5nIHRoZSBzZW5hdGUsIGl0IHdpbGwgbm90IGNvbnNpZGVyIGl0c2VsZiBib3VuZCB0bwogICAgICAgICAgICAgICAgICAgIGZlZWwgbW9yZSBiaXR0ZXIgaGF0cmVkIGFnYWluc3QgQW50b25pdXMgdGhhbiB0aGUgc2VuYXRlLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiEgRG8geW91IHN1cHBvc2UgdGhhdCBpdCB3aWxsIGNvbnRpbnVlIHRvIGdsb3cgd2l0aCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHplYWwgd2l0aCB3aGljaCBpdCBidXJuZWQgYmVmb3JlIHRvIGV4dGluZ3Vpc2ggdGhpcyBjb21tb24gY29uZmxhZ3JhdGlvbj8gRG8gd2UKICAgICAgICAgICAgICAgICAgICBub3Qgc3VwcG9zZSB0aGF0IHRob3NlIG1lbiB3aWxsIHJlcGVudCBvZiBoYXZpbmcgcHJvZmVzc2VkIGFuZCBkaXNwbGF5ZWQgc28gbXVjaAogICAgICAgICAgICAgICAgICAgIGhhdHJlZCB0byBBbnRvbml1cywgd2hvIHByb21pc2VkIHVzIG1vbmV5IGFuZCBhcm1zOyB3aG8gZGV2b3RlZCB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgd2hvbGx5LCBib2R5LCBoZWFydCwgYW5kIHNvdWwsIHRvIHRoZSBzYWZldHkgb2YgdGhlIHJlcHVibGljISBIb3cgd2lsbAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4sIHdoaWNoIGF0IHRoZSBwcmVzZW50IHRpbWUKICAgICAgICAgICAgICAgICAgICBmZWVscyBsaWtlIGEgc2Vjb25kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYXBwcm92ZSBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMgZGVzaWduIG9mIHlvdXJzPyBUaGF0IGNpdHkgcHJvbm91bmNlZCB0aGVtIGltcGlvdXMgY2l0aXplbnMsIGNhc3QgdGhlbSBvdXQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGtlcHQgdGhlbSBvdXQuIEFudG9uaXVzIHdhcyBiYXJlbHkgc2F2ZWQgZnJvbSB0aGUgaGFuZHMgb2YgdGhhdCBjaXR5LCB3aGljaAogICAgICAgICAgICAgICAgICAgIG1hZGUgYSBtb3N0IGdhbGxhbnQgYXR0ZW1wdCB0byBjcnVzaCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['12.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBOZWVkCiAgICAgICAgICAgICAgICAgICAgSSBzYXkgbW9yZT8gQXJlIHdlIG5vdCBieSB0aGVzZSBwcm9jZWVkaW5ncyBjdXR0aW5nIHRoZSBzaW5ld3Mgb2Ygb3VyIG93bgogICAgICAgICAgICAgICAgICAgIGxlZ2lvbnM7IGZvciB3aGF0IG1hbiBjYW4gZW5nYWdlIHdpdGggYXJkb3IgaW4gYSB3YXIsIHdoZW4gdGhlIGhvcGUgb2YgcGVhY2UgaXMKICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWQgdG8gaGltPyBFdmVuIHRoYXQgZ29kbGlrZSBhbmQgZGl2aW5lIE1hcnRpYWwgbGVnaW9uIHdpbGwgZ3JvdyBsYW5ndWlkCiAgICAgICAgICAgICAgICAgICAgYXQgYW5kIGJlIGNvd2VkIGJ5IHRoZSByZWNlaXB0IG9mIHRoaXMgbmV3cywgYW5kIHdpbGwgbG9zZSB0aGF0IG1vc3Qgbm9ibGUgdGl0bGUKICAgICAgICAgICAgICAgICAgICBvZiBNYXJ0aWFsOyB0aGVpciBzd29yZHMgd2lsbCBmYWxsIHRvIHRoZSBncm91bmQ7IHRoZWlyIHdlYXBvbnMgd2lsbCBkcm9wIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGVpciBoYW5kcy4gRm9yLCBmb2xsb3dpbmcgdGhlIHNlbmF0ZSwgaXQgd2lsbCBub3QgY29uc2lkZXIgaXRzZWxmIGJvdW5kIHRvCiAgICAgICAgICAgICAgICAgICAgZmVlbCBtb3JlIGJpdHRlciBoYXRyZWQgYWdhaW5zdCBBbnRvbml1cyB0aGFuIHRoZSBzZW5hdGUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBhbSBhc2hhbWVkIGZvciB0aGlzIGxlZ2lvbiwgSSBhbSBhc2hhbWVkIGZvciB0aGUgZm91cnRoIGxlZ2lvbiwgd2hpY2gsCiAgICAgICAgICAgICAgICAgICAgYXBwcm92aW5nIG9mIG91ciBhdXRob3JpdHkgd2l0aCBlcXVhbCB2aXJ0dWUsIGFiYW5kb25lZCBBbnRvbml1cywgbm90IGxvb2tpbmcKICAgICAgICAgICAgICAgICAgICB1cG9uIGhpbSBhcyB0aGVpciBjb25zdWwgYW5kIGdlbmVyYWwsIGJ1dCBhcyBhbiBlbmVteSBhbmQgYXR0YWNrZXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LiBJIGFtIGFzaGFtZWQgZm9yIHRoYXQgYWRtaXJhYmxlIGFybXkgd2hpY2ggaXMgbWFkZSB1cCBvZiB0d28gYXJtaWVzOwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhhcyBub3cgYmVlbiByZXZpZXdlZCwgYW5kIHdoaWNoIGhhcyBzdGFydGVkIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIGFuZCB3aGljaCwgaWYgaXQgaGVhcnMgYSB3b3JkIG9mCiAgICAgICAgICAgICAgICAgICAgcGVhY2UsIHRoYXQgaXMgdG8gc2F5LCBvZiBvdXIgZmVhciwgZXZlbiBpZiBpdCBkb2VzIG5vdCByZXR1cm4sIHdpbGwgYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzIGhhbHQuIEZvciB3aG8sIHdoZW4gdGhlIHNlbmF0ZSByZWNhbGxzIGhpbSBhbmQgc291bmRzIGEgcmV0cmVhdCwgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGVhZ2VyIHRvIGVuZ2FnZSBpbiBiYXR0bGU/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkNvbXBhcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTM5MyI+U3QuIFBhdWw8L3BsYWNlTmFtZT4s4oCUPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcRm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgdHJ1bXBldCBnaXZlIGFuIHVuY2VydGFpbiBzb3VuZCwgd2hvIHNoYWxsIHByZXBhcmUgaGltc2VsZiB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZT/igJ08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5JIENvci4gMTQuODwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIGFuZCB3aGljaCwgaWYgaXQgaGVhcnMgYSB3b3JkIG9mCiAgICAgICAgICAgICAgICAgICAgcGVhY2UsIHRoYXQgaXMgdG8gc2F5LCBvZiBvdXIgZmVhciwgZXZlbiBpZiBpdCBkb2VzIG5vdCByZXR1cm4sIHdpbGwgYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzIGhhbHQuIEZvciB3aG8sIHdoZW4gdGhlIHNlbmF0ZSByZWNhbGxzIGhpbSBhbmQgc291bmRzIGEgcmV0cmVhdCwgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGVhZ2VyIHRvIGVuZ2FnZSBpbiBiYXR0bGU/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkNvbXBhcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjkzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyOTM5MyI+U3QuIFBhdWw8L3BsYWNlTmFtZT4s4oCUPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+4oCcRm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgdHJ1bXBldCBnaXZlIGFuIHVuY2VydGFpbiBzb3VuZCwgd2hvIHNoYWxsIHByZXBhcmUgaGltc2VsZiB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZT/igJ08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5JIENvci4gMTQuODwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTI5MzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjkzOTMiPlN0LiBQYXVsPC9wbGFjZU5hbWU+LOKAlDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iPuKAnEZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlIHRydW1wZXQgZ2l2ZSBhbiB1bmNlcnRhaW4gc291bmQsIHdobyBzaGFsbCBwcmVwYXJlIGhpbXNlbGYgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXR0bGU/4oCdPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SSBDb3IuIDE0Ljg8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['12.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQgY2FuIGJlIG1vcmUgdW5yZWFzb25hYmxlIHRoYW4gZm9yIHVzIHRvIHBhc3MgcmVzb2x1dGlvbnMgYWJvdXQgcGVhY2UKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgdGhvc2UgbWVuIHdobyB3YWdlIHRoZSB3YXIhIEFuZCBub3Qgb25seSB3aXRob3V0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlLCBidXQgZXZlbiBhZ2FpbnN0IHRoZWlyIHdpbGw/IERvIHlvdSB0aGluayB0aGF0IEF1bHVzIEhpcnRpdXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBtb3N0IGlsbHVzdHJpb3VzIGNvbnN1bCwgYW5kIHRoYXQgQ2FpdXMgQ2Flc2FyLCBhIG1hbiBib3JuIGJ5IHRoZSBlc3BlY2lhbAogICAgICAgICAgICAgICAgICAgIGtpbmRuZXNzIG9mIHRoZSBnb2RzIGZvciB0aGlzIGVzcGVjaWFsIGNyaXNpcywgd2hvc2UgbGV0dGVycywgYW5ub3VuY2luZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvcGUgb2YgdmljdG9yeSwgSSBob2xkIGluIG15IGhhbmQsIGFyZSBkZXNpcm91cyBvZiBwZWFjZT8gVGhleSBhcmUgYW54aW91cyB0bwogICAgICAgICAgICAgICAgICAgIGNvbnF1ZXI7IGFuZCB0aGV5IHdpc2ggdG8gb2J0YWluIHRoYXQgbW9zdCBkZWxpZ2h0ZnVsIGFuZCBiZWF1dGlmdWwgY29uZGl0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgcGVhY2UsIGFzIHRoZSBjb25zZXF1ZW5jZSBvZiB2aWN0b3J5LCBub3Qgb2Ygc29tZSBhZ3JlZW1lbnQuIFdoYXQgbW9yZT8gV2l0aAogICAgICAgICAgICAgICAgICAgIHdoYXQgZmVlbGluZ3MgZG8geW91IHRoaW5rIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIHdpbGwgaGVhciBvZiB0aGlzIHByb2NlZWRpbmc/IEZvciB0aGF0IHByb3ZpbmNlIHBlcmZvcm1zIHRoZSBjaGllZiBwYXJ0IGluCiAgICAgICAgICAgICAgICAgICAgcmVwZWxsaW5nLCBhbmQgbWFuYWdpbmcsIGFuZCBzdXBwb3J0aW5nIHRoaXMgd2FyLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBmb2xsb3dpbmcgdGhlIG1lcmUgbm9kLCBmb3IgSSBuZWVkIG5vdCBzYXkgdGhlIGNvbW1hbmQgb2YKICAgICAgICAgICAgICAgICAgICBEZWNpbXVzIEJydXR1cywgaGFzIHN0cmVuZ3RoZW5lZCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB3YXIgd2l0aCBoZXIgYXJtcywgaGVyCiAgICAgICAgICAgICAgICAgICAgbWVuLCBhbmQgaGVyIHRyZWFzdXJlczogc2hlIGhhcyBleHBvc2VkIHRoZSB3aG9sZSBvZiBoZXIgYm9keSB0byB0aGUgY3J1ZWx0eSBvZgogICAgICAgICAgICAgICAgICAgIE1hcmN1cyBBbnRvbml1czogc2hlIGlzIGRyYWluZWQsIGxhaWQgd2FzdGUsIGF0dGFja2VkIHdpdGggZmlyZSBhbmQgc3dvcmQuIFNoZQogICAgICAgICAgICAgICAgICAgIGlzIGVuZHVyaW5nIGFsbCB0aGUgaW5qdXJpZXMgb2Ygd2FyIHdpdGggZXF1YW5pbWl0eSwgY29udGVudGVkIGFzIGxvbmcgYXMgc2hlCiAgICAgICAgICAgICAgICAgICAgY2FuIHdhcmQgb2ZmIHRoZSBkYW5nZXIgb2Ygc2xhdmVyeS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQsIHRvCiAgICAgICAgICAgICAgICAgICAgc2F5IG5vdGhpbmcgb2YgdGhlIG90aGVyIHBhcnRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgKGZvciB0aGV5IGFyZSBhbGwgYWxpa2UpLCB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGF0YXZpdW0iIGtleT0icGVyc2V1cyxQYXRhdml1bSI+UGF0YXZpdW08L3BsYWNlTmFtZT4gaGF2ZSBleGNsdWRlZCBzb21lIG1lbiB3aG8gd2VyZSBzZW50IHRvIHRoZW0gYnkKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cywgYW5kIGhhdmUgZHJpdmVuIG91dCBvdGhlcnMsIGFuZCBoYXZlIGFzc2lzdGVkIG91ciBnZW5lcmFscyB3aXRoIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgYW5kIHNvbGRpZXJzLCBhbmQgd2l0aCB3aGF0IHdhcyBhYm92ZSBhbGwgdGhpbmdzIHdhbnRpbmcsIGFybXMuIFRoZSByZXN0IGhhdmUKICAgICAgICAgICAgICAgICAgICBkb25lIHRoZSBzYW1lOyBldmVuIHRob3NlIHdobyBmb3JtZXJseSB3ZXJlIG9mIHRoZSBwYXJ0eSBvZiBBbnRvbml1cywgYW5kIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgYmVsaWV2ZWQgdG8gaGF2ZSBiZWVuIGFsaWVuYXRlZCBmcm9tIHRoZSBzZW5hdGUgYnkgdGhlIGluanVyaWVzIG9mIG1hbnkKICAgICAgICAgICAgICAgICAgICB5ZWFycy4gTWVuLCB3aG8gaW5kZWVkIHRoZXJlIGlzIG5vIGdyZWF0IHJlYXNvbiB0byB3b25kZXIgYXQgYmVpbmcgZmFpdGhmdWwgbm93LAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBmcmVlZG9tIG9mIHRoZSByZXB1YmxpYyBoYXMgYmVlbiBzaGFyZWQgd2l0aCB0aGVtLCB3aGVuLCBldmVuIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGJlZW4gYWRtaXR0ZWQgdG8gdGhvc2UgcHJpdmlsZWdlcywgdGhleSBhbHdheXMgYmVoYXZlZCB3aXRoIGxveWFsdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgZ29vZCBmYWl0aC4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB3aWxsIGhlYXIgb2YgdGhpcyBwcm9jZWVkaW5nPyBGb3IgdGhhdCBwcm92aW5jZSBwZXJmb3JtcyB0aGUgY2hpZWYgcGFydCBpbgogICAgICAgICAgICAgICAgICAgIHJlcGVsbGluZywgYW5kIG1hbmFnaW5nLCBhbmQgc3VwcG9ydGluZyB0aGlzIHdhci4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPiwgZm9sbG93aW5nIHRoZSBtZXJlIG5vZCwgZm9yIEkgbmVlZCBub3Qgc2F5IHRoZSBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgRGVjaW11cyBCcnV0dXMsIGhhcyBzdHJlbmd0aGVuZWQgdGhlIGJlZ2lubmluZyBvZiB0aGUgd2FyIHdpdGggaGVyIGFybXMsIGhlcgogICAgICAgICAgICAgICAgICAgIG1lbiwgYW5kIGhlciB0cmVhc3VyZXM6IHNoZSBoYXMgZXhwb3NlZCB0aGUgd2hvbGUgb2YgaGVyIGJvZHkgdG8gdGhlIGNydWVsdHkgb2YKICAgICAgICAgICAgICAgICAgICBNYXJjdXMgQW50b25pdXM6IHNoZSBpcyBkcmFpbmVkLCBsYWlkIHdhc3RlLCBhdHRhY2tlZCB3aXRoIGZpcmUgYW5kIHN3b3JkLiBTaGUKICAgICAgICAgICAgICAgICAgICBpcyBlbmR1cmluZyBhbGwgdGhlIGluanVyaWVzIG9mIHdhciB3aXRoIGVxdWFuaW1pdHksIGNvbnRlbnRlZCBhcyBsb25nIGFzIHNoZQogICAgICAgICAgICAgICAgICAgIGNhbiB3YXJkIG9mZiB0aGUgZGFuZ2VyIG9mIHNsYXZlcnkuIDwvdHJhbnNsYXRpb24+"
translation['12.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCB0bwogICAgICAgICAgICAgICAgICAgIHNheSBub3RoaW5nIG9mIHRoZSBvdGhlciBwYXJ0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgKGZvciB0aGV5IGFyZSBhbGwgYWxpa2UpLCB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGF0YXZpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBhdGF2aXVtIj5QYXRhdml1bTwvcGxhY2VOYW1lPiBoYXZlIGV4Y2x1ZGVkIHNvbWUgbWVuIHdobyB3ZXJlIHNlbnQgdG8gdGhlbSBieQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLCBhbmQgaGF2ZSBkcml2ZW4gb3V0IG90aGVycywgYW5kIGhhdmUgYXNzaXN0ZWQgb3VyIGdlbmVyYWxzIHdpdGggbW9uZXkKICAgICAgICAgICAgICAgICAgICBhbmQgc29sZGllcnMsIGFuZCB3aXRoIHdoYXQgd2FzIGFib3ZlIGFsbCB0aGluZ3Mgd2FudGluZywgYXJtcy4gVGhlIHJlc3QgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRvbmUgdGhlIHNhbWU7IGV2ZW4gdGhvc2Ugd2hvIGZvcm1lcmx5IHdlcmUgb2YgdGhlIHBhcnR5IG9mIEFudG9uaXVzLCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBiZWxpZXZlZCB0byBoYXZlIGJlZW4gYWxpZW5hdGVkIGZyb20gdGhlIHNlbmF0ZSBieSB0aGUgaW5qdXJpZXMgb2YgbWFueQogICAgICAgICAgICAgICAgICAgIHllYXJzLiBNZW4sIHdobyBpbmRlZWQgdGhlcmUgaXMgbm8gZ3JlYXQgcmVhc29uIHRvIHdvbmRlciBhdCBiZWluZyBmYWl0aGZ1bCBub3csCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGZyZWVkb20gb2YgdGhlIHJlcHVibGljIGhhcyBiZWVuIHNoYXJlZCB3aXRoIHRoZW0sIHdoZW4sIGV2ZW4gYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgYmVlbiBhZG1pdHRlZCB0byB0aG9zZSBwcml2aWxlZ2VzLCB0aGV5IGFsd2F5cyBiZWhhdmVkIHdpdGggbG95YWx0eSBhbmQKICAgICAgICAgICAgICAgICAgICBnb29kIGZhaXRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsIHRoZXNlIG1lbiwgdGhlbiwgd2hvIGFyZSBub3cgc2FuZ3VpbmUgb2YgdmljdG9yeSwgd2UgYXJlIHRvIG1lZXQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBuYW1lIG9mIHBlYWNlOyB0aGF0IGlzIHRvIHNheSwgd2l0aCBhIGNvbXBsZXRlIGRlc3BhaXIgb2YgdmljdG9yeS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBtb3JlPyBXaGF0IGlmIGl0IGlzIGV2ZW4gYWJzb2x1dGVseSBpbXBvc3NpYmxlIGZvciB0aGVyZSB0byBiZSBhbnkgcmVhbAogICAgICAgICAgICAgICAgICAgIHBlYWNlIGF0IGFsbD8gRm9yIHdoYXQgc29ydCBvZiBwZWFjZSBpcyB0aGF0IGluIHdoaWNoIG5vdGhpbmcgY2FuIGJlIGdyYW50ZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbWFuIHdpdGggd2hvbSBvbmUgaXMgbWFraW5nIHBlYWNlPyBBbnRvbml1cyBoYXMgYmVlbiBpbnZpdGVkIHRvIHBlYWNlIGJ5IHVzCiAgICAgICAgICAgICAgICAgICAgYnkgbWFueSBjaXJjdW1zdGFuY2VzOyBidXQgaGUgaGFzIHByZWZlcnJlZCB3YXIuIEFtYmFzc2Fkb3JzIHdlcmUgc2VudC4gSQogICAgICAgICAgICAgICAgICAgIG9wcG9zZWQgaXQsIGluZGVlZCwgYnV0IHN0aWxsIHRoZXkgd2VyZSBzZW50LiBDb21tYW5kcyB3ZXJlIHRha2VuIHRvIGhpbTogaGUgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IG9iZXkgdGhlbS4gSGUgd2FzIG9yZGVyZWQgbm90IHRvIGJlc2llZ2UgQnJ1dHVzLCBhbmQgdG8gcmV0aXJlIGZyb20gYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPi4gSGUgYXR0YWNrZWQgdGhhdCB0b3duCiAgICAgICAgICAgICAgICAgICAgZXZlbiBtb3JlIHZpZ29yb3VzbHkuIEFuZCBzaGFsbCB3ZSBzZW5kIGFuIGVtYmFzc3kgdG8gdHJlYXQgb2YgcGVhY2UgdG8gYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG8gaGFzIHJlamVjdGVkIGFtYmFzc2Fkb3JzIG9mIHBlYWNlPyBEbyB3ZSBzdXBwb3NlIHRoYXQgd2hlbiB3ZSB0YWxrIHRvIGhpbQogICAgICAgICAgICAgICAgICAgIGZhY2UgdG8gZmFjZSBoZSB3aWxsIGJlIG1vcmUgbW9kZXJhdGUgaW4gaGlzIGRlbWFuZHMgdGhhbiBoZSB3YXMgd2hlbiBoZSBzZW50CiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMgdG8gdGhlIHNlbmF0ZSEgQnV0IGF0IHRoYXQgdGltZSBoZSBkZW1hbmRlZCB0aGluZ3Mgd2hpY2ggYXBwZWFyZWQKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgdW5yZWFzb25hYmxlLCBidXQgc3RpbGwgc3VjaCBhcyBpdCBtaWdodCBoYXZlIGJlZW4gcG9zc2libGUgdG8gY29uY2VkZTsKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgbm90IGF0IHRoYXQgdGltZSBiZWVuIGJyYW5kZWQgYnkgc3VjaCBoZWF2eSBhbmQgc3VjaCBudW1lcm91cyBkZWNpc2lvbnMKICAgICAgICAgICAgICAgICAgICBhbmQgY29uZGVtbmF0aW9ucyBvZiB5b3Vycy4gQXQgcHJlc2VudCBoZSBpcyBkZW1hbmRpbmcgdGhpbmdzIHdoaWNoIHdlIGNhbiBub3QKICAgICAgICAgICAgICAgICAgICBieSBhbnkgcG9zc2liaWxpdHkgZ3JhbnQsIHVubGVzcyB3ZSBhcmUgd2lsbGluZyBmaXJzdCB0byBjb25mZXNzIG91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIGRlZmVhdGVkIGluIHdhci4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LiBIZSBhdHRhY2tlZCB0aGF0IHRvd24KICAgICAgICAgICAgICAgICAgICBldmVuIG1vcmUgdmlnb3JvdXNseS4gQW5kIHNoYWxsIHdlIHNlbmQgYW4gZW1iYXNzeSB0byB0cmVhdCBvZiBwZWFjZSB0byBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgcmVqZWN0ZWQgYW1iYXNzYWRvcnMgb2YgcGVhY2U/IERvIHdlIHN1cHBvc2UgdGhhdCB3aGVuIHdlIHRhbGsgdG8gaGltCiAgICAgICAgICAgICAgICAgICAgZmFjZSB0byBmYWNlIGhlIHdpbGwgYmUgbW9yZSBtb2RlcmF0ZSBpbiBoaXMgZGVtYW5kcyB0aGFuIGhlIHdhcyB3aGVuIGhlIHNlbnQKICAgICAgICAgICAgICAgICAgICBjb21tYW5kcyB0byB0aGUgc2VuYXRlISBCdXQgYXQgdGhhdCB0aW1lIGhlIGRlbWFuZGVkIHRoaW5ncyB3aGljaCBhcHBlYXJlZAogICAgICAgICAgICAgICAgICAgIGluZGVlZCB1bnJlYXNvbmFibGUsIGJ1dCBzdGlsbCBzdWNoIGFzIGl0IG1pZ2h0IGhhdmUgYmVlbiBwb3NzaWJsZSB0byBjb25jZWRlOwogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBub3QgYXQgdGhhdCB0aW1lIGJlZW4gYnJhbmRlZCBieSBzdWNoIGhlYXZ5IGFuZCBzdWNoIG51bWVyb3VzIGRlY2lzaW9ucwogICAgICAgICAgICAgICAgICAgIGFuZCBjb25kZW1uYXRpb25zIG9mIHlvdXJzLiBBdCBwcmVzZW50IGhlIGlzIGRlbWFuZGluZyB0aGluZ3Mgd2hpY2ggd2UgY2FuIG5vdAogICAgICAgICAgICAgICAgICAgIGJ5IGFueSBwb3NzaWJpbGl0eSBncmFudCwgdW5sZXNzIHdlIGFyZSB3aWxsaW5nIGZpcnN0IHRvIGNvbmZlc3Mgb3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgZGVmZWF0ZWQgaW4gd2FyLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2UgaGF2ZSBwcm9ub3VuY2VkIHRoYXQgcmVzb2x1dGlvbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHdoaWNoIGhhdmUgYmVlbiBwcm9kdWNlZCBieSBoaW0gYXJlIGZvcmdlZC4gQ2FuIHdlIG5vdyBwcm9ub3VuY2UgdGhlbQogICAgICAgICAgICAgICAgICAgIGdlbnVpbmU/IFdlIGhhdmUgZGVjbGFyZWQgdGhhdCBsYXdzIGhhdmUgYmVlbiBjYXJyaWVkIGJ5IGhpbSBieSBtZWFucyBvZgogICAgICAgICAgICAgICAgICAgIHZpb2xlbmNlLCBhbmQgaW4gYSBtYW5uZXIgY29udHJhcnkgdG8gdGhlIGF1c3BpY2VzLCBhbmQgdGhhdCBuZWl0aGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGJ1cmdlc3NlcyBub3IgdGhlIGNvbW1vbiBwZW9wbGUgYXJlIGJvdW5kIGJ5IHRoZW0uIERvIHlvdSBjb25zaWRlciBpdCBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhvc2UgbGF3cyBzaG91bGQgYmUgcmVlc3RhYmxpc2hlZD8gWW91IGhhdmUganVkaWNpYWxseSBkZWNpZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBoYXMgZW1iZXp6bGVkIHNldmVuIGh1bmRyZWQgbWlsbGlvbnMgb2Ygc2VzdGVyY2VzIG9mIHRoZSBwdWJsaWMgbW9uZXkuCiAgICAgICAgICAgICAgICAgICAgQ2FuIGhlIG5vdyBiZSByZWxlYXNlZCBmcm9tIHRoZSBjaGFyZ2Ugb2YgcGVjdWxhdGlvbj8gRXhlbXB0aW9ucywgZ3JhbnRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZyZWVkb20gb2YgdGhlIGNpdHksIHByaWVzdGhvb2RzLCBraW5nZG9tcyBoYXZlIGJlZW4gc29sZCBieSBoaW0uIENhbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRhYmxldHMgYWdhaW4gYmUgcHV0IHVwIHdoaWNoIHlvdSB0b29rIGRvd24gYnkgeW91ciBkZWNyZWVzPyA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2UgaGF2ZSBwcm9ub3VuY2VkIHRoYXQgcmVzb2x1dGlvbnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VuYXRlIHdoaWNoIGhhdmUgYmVlbiBwcm9kdWNlZCBieSBoaW0gYXJlIGZvcmdlZC4gQ2FuIHdlIG5vdyBwcm9ub3VuY2UgdGhlbQogICAgICAgICAgICAgICAgICAgIGdlbnVpbmU/IFdlIGhhdmUgZGVjbGFyZWQgdGhhdCBsYXdzIGhhdmUgYmVlbiBjYXJyaWVkIGJ5IGhpbSBieSBtZWFucyBvZgogICAgICAgICAgICAgICAgICAgIHZpb2xlbmNlLCBhbmQgaW4gYSBtYW5uZXIgY29udHJhcnkgdG8gdGhlIGF1c3BpY2VzLCBhbmQgdGhhdCBuZWl0aGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGJ1cmdlc3NlcyBub3IgdGhlIGNvbW1vbiBwZW9wbGUgYXJlIGJvdW5kIGJ5IHRoZW0uIERvIHlvdSBjb25zaWRlciBpdCBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhvc2UgbGF3cyBzaG91bGQgYmUgcmVlc3RhYmxpc2hlZD8gWW91IGhhdmUganVkaWNpYWxseSBkZWNpZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBoYXMgZW1iZXp6bGVkIHNldmVuIGh1bmRyZWQgbWlsbGlvbnMgb2Ygc2VzdGVyY2VzIG9mIHRoZSBwdWJsaWMgbW9uZXkuCiAgICAgICAgICAgICAgICAgICAgQ2FuIGhlIG5vdyBiZSByZWxlYXNlZCBmcm9tIHRoZSBjaGFyZ2Ugb2YgcGVjdWxhdGlvbj8gRXhlbXB0aW9ucywgZ3JhbnRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZyZWVkb20gb2YgdGhlIGNpdHksIHByaWVzdGhvb2RzLCBraW5nZG9tcyBoYXZlIGJlZW4gc29sZCBieSBoaW0uIENhbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRhYmxldHMgYWdhaW4gYmUgcHV0IHVwIHdoaWNoIHlvdSB0b29rIGRvd24gYnkgeW91ciBkZWNyZWVzPyA8L3RyYW5zbGF0aW9uPg=="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIHdlIGNhbiByZXNjaW5kIHRob3NlIGRlY3JlZXMgd2hpY2ggd2UgaGF2ZSBwYXNzZWQsIGNhbiB3ZSBhbHNvIGVmZmFjZSB0aGUKICAgICAgICAgICAgICAgICAgICBtZW1vcnkgb2YgdGhlIGZhY3RzPyBGb3Igd2hlcmUgd2lsbCBhbnkgcG9zdGVyaXR5IGZvcmdldCB0byB3aG9zZSB3aWNrZWRuZXNzIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG93aW5nIHRoYXQgd2UgaGF2ZSBiZWVuIGFycmF5ZWQgaW4gdGhlc2UgdW5zZWVtbHkgZ2FybWVudHM/IEFsdGhvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIGJsb29kIG9mIHRoZSBjZW50dXJpb25zIG9mIHRoZSBNYXJ0aWFsIGxlZ2lvbiBzaGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiBiZSB3YXNoZWQgb3V0LCBjYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbm90b3JpZXR5IG9mIHRoYXQgaW5odW1hbiBhY3QgYmUgd2FzaGVkIG91dCB0b28/IFRvIHBhc3Mgb3ZlciB0aGluZ3Mgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXBwZW5lZCBpbiB0aGUgaW50ZXJ2YWwsIHdoYXQgbGFwc2Ugb2YgdGltZSB3aWxsIGV2ZXIgZWZmYWNlIHRoZSBmb3VsIG1lbW9yaWFscwogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBtaWxpdGFyeSB3b3JrcyBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHRoZSB0b2tlbnMgb2YgaGlzIHdpY2tlZG5lc3MsIHRoZSB0cmFjZXMgb2YgaGlzIHBpcmF0aWNhbCBjb25kdWN0PyA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4gYmUgd2FzaGVkIG91dCwgY2FuIHRoZQogICAgICAgICAgICAgICAgICAgIG5vdG9yaWV0eSBvZiB0aGF0IGluaHVtYW4gYWN0IGJlIHdhc2hlZCBvdXQgdG9vPyBUbyBwYXNzIG92ZXIgdGhpbmdzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGFwcGVuZWQgaW4gdGhlIGludGVydmFsLCB3aGF0IGxhcHNlIG9mIHRpbWUgd2lsbCBldmVyIGVmZmFjZSB0aGUgZm91bCBtZW1vcmlhbHMKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgbWlsaXRhcnkgd29ya3MgYXJvdW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGUgdG9rZW5zIG9mIGhpcyB3aWNrZWRuZXNzLCB0aGUgdHJhY2VzIG9mIGhpcyBwaXJhdGljYWwgY29uZHVjdD8gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgdGhlbiwgaW4gdGhlIG5hbWUgb2YgdGhlIGltbW9ydGFsIGdvZHMhCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB3ZSB3aGljaCB3ZSBjYW4gZ3JhbnQgaW4gdGhlIHdheSBvZiBjb25jZXNzaW9uIHRvIHRoaXMgcG9sbHV0ZWQgYW5kIGltcGlvdXMKICAgICAgICAgICAgICAgICAgICBwYXJyaWNpZGU/IEFyZSB3ZSB0byB5aWVsZCB1cCB0byBoaW0gdGhlIGZhcnRoZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIGFuZCBhbiBhcm15PyBUaGlzIGlzIG5vdCBtYWtpbmcgcGVhY2UsIGJ1dCBvbmx5IGRlZmVycmluZwogICAgICAgICAgICAgICAgICAgIHdhci4gSW5kZWVkLCBpdCBpcyBub3Qgb25seSBwcm9sb25naW5nIHRoZSB3YXIsIGJ1dCBldmVuIGNvbmNlZGluZyB0aGUgdmljdG9yeS4KICAgICAgICAgICAgICAgICAgICBJcyBpdCBub3QgYSB2aWN0b3J5IGZvciBoaW0gdG8gZW50ZXIgdGhpcyBjaXR5IHdpdGggaGlzIHRyb29wcywgb24gYW55CiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucyB3aGF0ZXZlcj8gQXQgcHJlc2VudCB3ZSBhcmUgbWFzdGVycyBvZiBldmVyeSB0aGluZyBieSBvdXIgYXJtczsgd2UKICAgICAgICAgICAgICAgICAgICBhcmUgb2YgZ3JlYXQgaW5mbHVlbmNlIGZyb20gdGhlIGF1dGhvcml0eSBvZiB0aGlzIG9yZGVyOyBudW1iZXJzIG9mIGRlc3BlcmF0ZQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGFyZSBhYnNlbnQsIGZvbGxvd2luZyB0aGVpciBpbmZhbW91cyBsZWFkZXI7IGFuZCBzdGlsbCB3ZSBjYW4gbm90IGJlYXIKICAgICAgICAgICAgICAgICAgICB0aGUgY291bnRlbmFuY2VzIG9yIHN1cHBvcnQgdGhlIGxhbmd1YWdlIG9mIHRob3NlIG1lbiB3aG8gYXJlIGxlZnQgYmVoaW5kIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgb3V0IG9mIHRoZWlyIG51bWJlci4gV2hhdCBkbyB5b3UgdGhpbmsgd2lsbCBiZSB0aGUgcmVzdWx0IHdoZW4gc3VjaCBudW1iZXJzCiAgICAgICAgICAgICAgICAgICAgZm9yY2UgdGhlaXIgd2F5IGludG8gdGhlIGNpdHkgYXQgb25lIHRpbWU/IHdoZW4gd2UgaGF2ZSBsYWlkIGFzaWRlIG91ciBhcm1zLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgbm90IGxhaWQgYXNpZGUgdGhlaXJzPyBNdXN0IHdlIG5vdCBiZSBkZWZlYXRlZCBmb3IgZXZlcmxhc3RpbmcsIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2Ygb3VyIG93biBjb3Vuc2Vscz8gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB0aGVuLCBpbiB0aGUgbmFtZSBvZiB0aGUgaW1tb3J0YWwgZ29kcyEKICAgICAgICAgICAgICAgICAgICBoYXZlIHdlIHdoaWNoIHdlIGNhbiBncmFudCBpbiB0aGUgd2F5IG9mIGNvbmNlc3Npb24gdG8gdGhpcyBwb2xsdXRlZCBhbmQgaW1waW91cwogICAgICAgICAgICAgICAgICAgIHBhcnJpY2lkZT8gQXJlIHdlIHRvIHlpZWxkIHVwIHRvIGhpbSB0aGUgZmFydGhlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LCBhbmQgYW4gYXJteT8gVGhpcyBpcyBub3QgbWFraW5nIHBlYWNlLCBidXQgb25seSBkZWZlcnJpbmcKICAgICAgICAgICAgICAgICAgICB3YXIuIEluZGVlZCwgaXQgaXMgbm90IG9ubHkgcHJvbG9uZ2luZyB0aGUgd2FyLCBidXQgZXZlbiBjb25jZWRpbmcgdGhlIHZpY3RvcnkuCiAgICAgICAgICAgICAgICAgICAgSXMgaXQgbm90IGEgdmljdG9yeSBmb3IgaGltIHRvIGVudGVyIHRoaXMgY2l0eSB3aXRoIGhpcyB0cm9vcHMsIG9uIGFueQogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgd2hhdGV2ZXI/IEF0IHByZXNlbnQgd2UgYXJlIG1hc3RlcnMgb2YgZXZlcnkgdGhpbmcgYnkgb3VyIGFybXM7IHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIG9mIGdyZWF0IGluZmx1ZW5jZSBmcm9tIHRoZSBhdXRob3JpdHkgb2YgdGhpcyBvcmRlcjsgbnVtYmVycyBvZiBkZXNwZXJhdGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBhcmUgYWJzZW50LCBmb2xsb3dpbmcgdGhlaXIgaW5mYW1vdXMgbGVhZGVyOyBhbmQgc3RpbGwgd2UgY2FuIG5vdCBiZWFyCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdW50ZW5hbmNlcyBvciBzdXBwb3J0IHRoZSBsYW5ndWFnZSBvZiB0aG9zZSBtZW4gd2hvIGFyZSBsZWZ0IGJlaGluZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5IG91dCBvZiB0aGVpciBudW1iZXIuIFdoYXQgZG8geW91IHRoaW5rIHdpbGwgYmUgdGhlIHJlc3VsdCB3aGVuIHN1Y2ggbnVtYmVycwogICAgICAgICAgICAgICAgICAgIGZvcmNlIHRoZWlyIHdheSBpbnRvIHRoZSBjaXR5IGF0IG9uZSB0aW1lPyB3aGVuIHdlIGhhdmUgbGFpZCBhc2lkZSBvdXIgYXJtcywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIG5vdCBsYWlkIGFzaWRlIHRoZWlycz8gTXVzdCB3ZSBub3QgYmUgZGVmZWF0ZWQgZm9yIGV2ZXJsYXN0aW5nLCBpbgogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIG9mIG91ciBvd24gY291bnNlbHM/IDwvdHJhbnNsYXRpb24+"
translation['12.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGxhY2UgYmVmb3JlIHlvdXIgZXllcyBNYXJjdXMgQW50b25pdXMsIGFzIGEgbWFuIG9mIGNvbnN1bGFyIHJhbms7IGFkZCB0byBoaW0KICAgICAgICAgICAgICAgICAgICBMdWNpdXMsIGhvcGluZyB0byBvYnRhaW4gdGhlIGNvbnN1bHNoaXA7IGpvaW4gdG8gdGhlbSBhbGwgdGhlIHJlc3QsIGFuZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRvbyBub3QgY29uZmluZWQgdG8gb3VyIG9yZGVyLCB3aG8gYXJlIGZpeGluZyB0aGVpciB0aG91Z2h0cyBvbiBob25vcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMuIERvIG5vdCBkZXNwaXNlIHRoZSBUaXJvcywgYW5kIHRoZSBOdW1pc2lpLCBvciB0aGUgTXVzdGVsbGFlLCBvciB0aGUKICAgICAgICAgICAgICAgICAgICBTZWlpLiBBIHBlYWNlIG1hZGUgd2l0aCB0aG9zZSBtZW4gd2lsbCBub3QgYmUgcGVhY2UsIGJ1dCBhIGNvdmVuYW50IG9mIHNsYXZlcnkuCiAgICAgICAgICAgICAgICAgICAgVGhhdCB3YXMgYW4gYWRtaXJhYmxlIGV4cHJlc3Npb24gb2YgTHVjaXVzIFBpc28sIGEgbW9zdCBob25vcmFibGUgbWFuLCBhbmQgb25lCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFzIGJlZW4gZGVzZXJ2ZWRseSBwcmFpc2VkIGJ5IHlvdSwgTyBQYW5zYSwgbm90IG9ubHkgaW4gdGhpcyBvcmRlciwgYnV0CiAgICAgICAgICAgICAgICAgICAgYWxzbyBpbiB0aGUgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZS4gSGUgc2FpZCwgdGhhdCBoZSB3b3VsZCBkZXBhcnQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgYW5kIGxlYXZlIGhpcyBob3VzZWhvbGQgZ29kcwogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgbmF0aXZlIGhvbWUsIGlmIChidXQgbWlnaHQgdGhlIGdvZHMgYXZlcnQgc3VjaCBhIGRpc2FzdGVyISkgQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBvdmVyd2hlbG1lZCB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGFuZCBsZWF2ZSBoaXMgaG91c2Vob2xkIGdvZHMKICAgICAgICAgICAgICAgICAgICBhbmQgaGlzIG5hdGl2ZSBob21lLCBpZiAoYnV0IG1pZ2h0IHRoZSBnb2RzIGF2ZXJ0IHN1Y2ggYSBkaXNhc3RlciEpIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgb3ZlcndoZWxtZWQgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['12.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgYXNrLCB0aGVyZWZvcmUsIG9mIHlvdSwgTyBMdWNpdXMgUGlzbywgd2hldGhlciB5b3Ugd291bGQgbm90IHRoaW5rIHRoZSByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIG92ZXJ3aGVsbWVkIGlmIHNvIG1hbnkgbWVuIG9mIHN1Y2ggaW1waWV0eSwgb2Ygc3VjaCBhdWRhY2l0eSwgYW5kIHN1Y2ggZ3VpbHQsCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhZG1pdHRlZCBpbnRvIGl0PyBDYW4geW91IHRoaW5rIHRoYXQgbWVuIHdob20gd2UgY291bGQgaGFyZGx5IGJlYXIgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBub3QgeWV0IHBvbGx1dGVkIHdpdGggc3VjaCBwYXJyaWNpZGFsIHRyZWFzb25zLCB3aWxsIGJlIGFibGUgdG8gYmUKICAgICAgICAgICAgICAgICAgICBib3JuZSBieSB0aGUgY2l0eSBub3cgdGhhdCB0aGV5IGFyZSBpbW1lcnNlZCBpbiBldmVyeSBzb3J0IG9mIHdpY2tlZG5lc3M/CiAgICAgICAgICAgICAgICAgICAgQmVsaWV2ZSBtZSwgd2UgbXVzdCBlaXRoZXIgYWRvcHQgeW91ciBwbGFuLCBhbmQgcmV0aXJlLCBkZXBhcnQsIGVtYnJhY2UgYSBsaWZlCiAgICAgICAgICAgICAgICAgICAgb2YgaW5kaWdlbmNlIGFuZCB3YW5kZXJpbmcsIG9yIGVsc2Ugd2UgbXVzdCBvZmZlciBvdXIgdGhyb2F0cyB0byB0aG9zZSByb2JiZXJzLAogICAgICAgICAgICAgICAgICAgIGFuZCBwZXJpc2ggaW4gb3VyIGNvdW50cnkuIFdoYXQgaGFzIGJlY29tZSwgTyBDYWl1cyBQYW5zYSwgb2YgdGhvc2Ugbm9ibGUKICAgICAgICAgICAgICAgICAgICBleGhvcnRhdGlvbnMgb2YgeW91cnMsIGJ5IHdoaWNoIHRoZSBzZW5hdGUgd2FzIHJvdXNlZCwgYW5kIHRoZSBSb21hbiBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBzdGltdWxhdGVkLCBub3Qgb25seSBoZWFyaW5nIGJ1dCBhbHNvIGxlYXJuaW5nIGZyb20geW91IHRoYXQgdGhlcmUgaXMgbm90aGluZwogICAgICAgICAgICAgICAgICAgIG1vcmUgZGlzZ3JhY2VmdWwgdG8gYSBSb21hbiB0aGFuIHNsYXZlcnk/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2FzCiAgICAgICAgICAgICAgICAgICAgaXQgZm9yIHRoaXMgdGhhdCB3ZSBhc3N1bWVkIHRoZSBnYXJiIG9mIHdhciwgYW5kIHRvb2sgYXJtcywgYW5kIHJvdXNlZCB1cCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgeW91dGggYWxsIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBpbiBvcmRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoaWxlIHdlIGhhZCBhIG1vc3QgZmxvdXJpc2hpbmcgYW5kIG51bWVyb3VzIGFybXksIHdlIG1pZ2h0IHNlbmQKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyB0byB0cmVhdCBmb3IgcGVhY2U/IElmIHRoYXQgcGVhY2UgaXMgdG8gYmUgcmVjZWl2ZWQgYnkgb3RoZXJzLCB3aHkKICAgICAgICAgICAgICAgICAgICBkbyB3ZSBub3Qgd2FpdCB0byBiZSBlbnRyZWF0ZWQgZm9yIGl0PyBJZiBvdXIgYW1iYXNzYWRvcnMgYXJlIHRvIGJlZyBpdCwgd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIGl0IHRoYXQgd2UgYXJlIGFmcmFpZCBvZj8gU2hhbGwgSSBtYWtlIG9uZSBvZiB0aGlzIGVtYmFzc3ksIG9yIHNoYWxsIEkgYmUgbWl4ZWQKICAgICAgICAgICAgICAgICAgICB1cCB3aXRoIHRoaXMgZGVzaWduLCBpbiB3aGljaCwgZXZlbiBpZiBJIHNob3VsZCBkaXNzZW50IGZyb20gdGhlIHJlc3Qgb2YgbXkKICAgICAgICAgICAgICAgICAgICBjb2xsZWFndWVzLCB0aGUgUm9tYW4gcGVvcGxlIHdpbGwgbm90IGtub3cgaXQ/IFRoZSByZXN1bHQgd2lsbCBiZSwgdGhhdCBpZiBhbnkKICAgICAgICAgICAgICAgICAgICB0aGluZyBiZSBncmFudGVkIG9yIGNvbmNlZGVkLCBpdCB3aWxsIGJlIG15IGRhbmdlciBpZiBBbnRvbml1cyBjb21taXRzIGFueQogICAgICAgICAgICAgICAgICAgIG9mZmVuc2VzLCBzaW5jZSB0aGUgcG93ZXIgdG8gY29tbWl0IHRoZW0gd2lsbCBzZWVtIHRvIGhhdmUgYmVlbiBwdXQgaW4gaGlzIGhhbmRzCiAgICAgICAgICAgICAgICAgICAgYnkgbWUuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2FzCiAgICAgICAgICAgICAgICAgICAgaXQgZm9yIHRoaXMgdGhhdCB3ZSBhc3N1bWVkIHRoZSBnYXJiIG9mIHdhciwgYW5kIHRvb2sgYXJtcywgYW5kIHJvdXNlZCB1cCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgeW91dGggYWxsIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgd2hpbGUgd2UgaGFkIGEgbW9zdCBmbG91cmlzaGluZyBhbmQgbnVtZXJvdXMgYXJteSwgd2UgbWlnaHQgc2VuZAogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIHRvIHRyZWF0IGZvciBwZWFjZT8gSWYgdGhhdCBwZWFjZSBpcyB0byBiZSByZWNlaXZlZCBieSBvdGhlcnMsIHdoeQogICAgICAgICAgICAgICAgICAgIGRvIHdlIG5vdCB3YWl0IHRvIGJlIGVudHJlYXRlZCBmb3IgaXQ/IElmIG91ciBhbWJhc3NhZG9ycyBhcmUgdG8gYmVnIGl0LCB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgaXQgdGhhdCB3ZSBhcmUgYWZyYWlkIG9mPyBTaGFsbCBJIG1ha2Ugb25lIG9mIHRoaXMgZW1iYXNzeSwgb3Igc2hhbGwgSSBiZSBtaXhlZAogICAgICAgICAgICAgICAgICAgIHVwIHdpdGggdGhpcyBkZXNpZ24sIGluIHdoaWNoLCBldmVuIGlmIEkgc2hvdWxkIGRpc3NlbnQgZnJvbSB0aGUgcmVzdCBvZiBteQogICAgICAgICAgICAgICAgICAgIGNvbGxlYWd1ZXMsIHRoZSBSb21hbiBwZW9wbGUgd2lsbCBub3Qga25vdyBpdD8gVGhlIHJlc3VsdCB3aWxsIGJlLCB0aGF0IGlmIGFueQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGJlIGdyYW50ZWQgb3IgY29uY2VkZWQsIGl0IHdpbGwgYmUgbXkgZGFuZ2VyIGlmIEFudG9uaXVzIGNvbW1pdHMgYW55CiAgICAgICAgICAgICAgICAgICAgb2ZmZW5zZXMsIHNpbmNlIHRoZSBwb3dlciB0byBjb21taXQgdGhlbSB3aWxsIHNlZW0gdG8gaGF2ZSBiZWVuIHB1dCBpbiBoaXMgaGFuZHMKICAgICAgICAgICAgICAgICAgICBieSBtZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBldmVuIGlmIGl0IGhhZCBiZWVuIHByb3BlciB0byBlbnRlcnRhaW4KICAgICAgICAgICAgICAgICAgICBhbnkgaWRlYSBvZiBwZWFjZSB3aXRoIHRoZSBwaXJhdGljYWwgY3JldyBvZiBNYXJjdXMgQW50b25pdXMsIHN0aWxsIEkgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGxhc3QgcGVyc29uIHdobyBvdWdodCB0byBoYXZlIGJlZW4gc2VsZWN0ZWQgdG8gbmVnb3RpYXRlIHN1Y2ggYSBwZWFjZS4gSSBuZXZlcgogICAgICAgICAgICAgICAgICAgIHZvdGVkIGZvciBzZW5kaW5nIGFtYmFzc2Fkb3JzLiBCZWZvcmUgdGhlIHJldHVybiBvZiB0aGUgbGFzdCBhbWJhc3NhZG9ycyBJCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgdG8gc2F5LCB0aGF0IHBlYWNlIGl0c2VsZiwgZXZlbiBpZiB0aGV5IGRpZCBicmluZyBpdCwgb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICByZXB1ZGlhdGVkLCBzaW5jZSB3YXIgd291bGQgYmUgY29uY2VhbGVkIHVuZGVyIHRoZSBuYW1lIG9mIHBlYWNlOyBJIHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBjaGllZiBhZHZpc2VyIG9mIHRoZSBhZG9wdGlvbiBvZiB0aGUgZ2FyYiBvZiB3YXI7IEkgaGF2ZSBpbnZhcmlhYmx5IGNhbGxlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFuIGEgcHVibGljIGVuZW15LCB3aGVuIG90aGVycyBoYXZlIGJlZW4gY2FsbGluZyBoaW0gb25seSBhbiBhZHZlcnNhcnk7IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBwcm9ub3VuY2VkIHRoaXMgdG8gYmUgYSB3YXIsIHdoaWxlIG90aGVycyBoYXZlIHN0eWxlZCBpdCBvbmx5IGEgdHVtdWx0LgogICAgICAgICAgICAgICAgICAgIE5vciBoYXZlIEkgZG9uZSB0aGlzIGluIHRoZSBzZW5hdGUgYWxvbmU7IEkgaGF2ZSBhbHdheXMgYWN0ZWQgaW4gdGhlIHNhbWUgd2F5CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBwZW9wbGUuIE5vciBoYXZlIEkgc3Bva2VuIGFnYWluc3QgaGltc2VsZiBvbmx5LCBidXQgYWxzbyBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpY2VzIGluIGFuZCBhZ2VudHMgb2YgaGlzIGNyaW1lcywgd2hldGhlciBwcmVzZW50IGhlcmUsIG9yIHRoZXJlIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaW0uIDxtaWxlc3RvbmUgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IEluIHNob3J0LCBJIGhhdmUgYXQgYWxsIHRpbWVzIGludmVpZ2hlZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIHdob2xlIGZhbWlseSBhbmQgcGFydHkgb2YgQW50b25pdXMuIFRoZXJlZm9yZSwgYXMgdGhvc2UgaW1waW91cwogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGJlZ2FuIHRvIGNvbmdyYXR1bGF0ZSBvbmUgYW5vdGhlciB0aGUgbW9tZW50IHRoZSBob3BlIG9mIHBlYWNlIHdhcwogICAgICAgICAgICAgICAgICAgIHByZXNlbnRlZCB0byB0aGVtLCBhcyBpZiB0aGV5IGhhZCBnYWluZWQgdGhlIHZpY3RvcnksIHNvIGFsc28gdGhleSBhYnVzZWQgbWUgYXMKICAgICAgICAgICAgICAgICAgICB1bmp1c3Q6IHRoZXkgbWFkZSBjb21wbGFpbnRzIGFnYWluc3QgbWU7IHRoZXkgZGlzdHJ1c3RlZCBTZXJ2aWxpdXMgYWxzbzsgdGhleQogICAgICAgICAgICAgICAgICAgIHJlY29sbGVjdGVkIHRoYXQgQW50b25pdXMgaGFkIGJlZW4gZGFtYWdlZCBieSBoaXMgYXZvd2VkIG9waW5pb25zIGFuZAogICAgICAgICAgICAgICAgICAgIHByb3Bvc2l0aW9uczsgdGhleSByZWNvbGxlY3RlZCB0aGF0IEx1Y2l1cyBDYWVzYXIsIHRob3VnaCBhIGJyYXZlIGFuZCBjb25zaXN0ZW50CiAgICAgICAgICAgICAgICAgICAgc2VuYXRvciwgaXMgc3RpbGwgaGlzIHVuY2xlOyB0aGF0IENhbGVudXMgaXMgaGlzIGFnZW50OyB0aGF0IFBpc28gaXMgaGlzCiAgICAgICAgICAgICAgICAgICAgaW50aW1hdGUgZnJpZW5kOyB0aGV5IHRoaW5rIHRoYXQgeW91IHlvdXJzZWxmLCBPIFBhbnNhLCB0aG91Z2ggYSBtb3N0IHZpZ29yb3VzCiAgICAgICAgICAgICAgICAgICAgYW5kIGZlYXJsZXNzIGNvbnN1bCwgYXJlIG5vdyBiZWNvbWUgbW9yZSBtZXJjaWZ1bGx5IGluY2xpbmVkLiBOb3QgdGhhdCBpdCByZWFsbHkKICAgICAgICAgICAgICAgICAgICBpcyBzbywgb3IgdGhhdCBpdCBwb3NzaWJseSBjYW4gYmUgc28uIEJ1dCB0aGUgZmFjdCBvZiBhIG1lbnRpb24gb2YgcGVhY2UgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBtYWRlIGJ5IHlvdSwgaGFzIGdpdmVuIHJpc2UgdG8gYSBzdXNwaWNpb24gaW4gdGhlIGhlYXJ0cyBvZiBtYW55LCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgY2hhbmdlZCB5b3VyIG1pbmQgYSBsaXR0bGUuIFRoZSBmcmllbmRzIG9mIEFudG9uaXVzIGFyZSBhbm5veWVkIGF0IG15IGJlaW5nCiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWQgYW1vbmcgdGhlc2UgcGVyc29uczsgYW5kIHdlIG11c3Qgbm8gZG91YnQgeWllbGQgdG8gdGhlbSwgc2luY2Ugd2UgaGF2ZQogICAgICAgICAgICAgICAgICAgIG9uY2UgYmVndW4gdG8gYmUgbGliZXJhbC4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGV2ZW4gaWYgaXQgaGFkIGJlZW4gcHJvcGVyIHRvIGVudGVydGFpbgogICAgICAgICAgICAgICAgICAgIGFueSBpZGVhIG9mIHBlYWNlIHdpdGggdGhlIHBpcmF0aWNhbCBjcmV3IG9mIE1hcmN1cyBBbnRvbml1cywgc3RpbGwgSSB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGFzdCBwZXJzb24gd2hvIG91Z2h0IHRvIGhhdmUgYmVlbiBzZWxlY3RlZCB0byBuZWdvdGlhdGUgc3VjaCBhIHBlYWNlLiBJIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgdm90ZWQgZm9yIHNlbmRpbmcgYW1iYXNzYWRvcnMuIEJlZm9yZSB0aGUgcmV0dXJuIG9mIHRoZSBsYXN0IGFtYmFzc2Fkb3JzIEkKICAgICAgICAgICAgICAgICAgICB2ZW50dXJlZCB0byBzYXksIHRoYXQgcGVhY2UgaXRzZWxmLCBldmVuIGlmIHRoZXkgZGlkIGJyaW5nIGl0LCBvdWdodCB0byBiZQogICAgICAgICAgICAgICAgICAgIHJlcHVkaWF0ZWQsIHNpbmNlIHdhciB3b3VsZCBiZSBjb25jZWFsZWQgdW5kZXIgdGhlIG5hbWUgb2YgcGVhY2U7IEkgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWVmIGFkdmlzZXIgb2YgdGhlIGFkb3B0aW9uIG9mIHRoZSBnYXJiIG9mIHdhcjsgSSBoYXZlIGludmFyaWFibHkgY2FsbGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBtYW4gYSBwdWJsaWMgZW5lbXksIHdoZW4gb3RoZXJzIGhhdmUgYmVlbiBjYWxsaW5nIGhpbSBvbmx5IGFuIGFkdmVyc2FyeTsgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzIHByb25vdW5jZWQgdGhpcyB0byBiZSBhIHdhciwgd2hpbGUgb3RoZXJzIGhhdmUgc3R5bGVkIGl0IG9ubHkgYSB0dW11bHQuCiAgICAgICAgICAgICAgICAgICAgTm9yIGhhdmUgSSBkb25lIHRoaXMgaW4gdGhlIHNlbmF0ZSBhbG9uZTsgSSBoYXZlIGFsd2F5cyBhY3RlZCBpbiB0aGUgc2FtZSB3YXkKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHBlb3BsZS4gTm9yIGhhdmUgSSBzcG9rZW4gYWdhaW5zdCBoaW1zZWxmIG9ubHksIGJ1dCBhbHNvIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGljZXMgaW4gYW5kIGFnZW50cyBvZiBoaXMgY3JpbWVzLCB3aGV0aGVyIHByZXNlbnQgaGVyZSwgb3IgdGhlcmUgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['12.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gc2hvcnQsIEkgaGF2ZSBhdCBhbGwgdGltZXMgaW52ZWlnaGVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2hvbGUgZmFtaWx5IGFuZCBwYXJ0eSBvZiBBbnRvbml1cy4gVGhlcmVmb3JlLCBhcyB0aG9zZSBpbXBpb3VzCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgYmVnYW4gdG8gY29uZ3JhdHVsYXRlIG9uZSBhbm90aGVyIHRoZSBtb21lbnQgdGhlIGhvcGUgb2YgcGVhY2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudGVkIHRvIHRoZW0sIGFzIGlmIHRoZXkgaGFkIGdhaW5lZCB0aGUgdmljdG9yeSwgc28gYWxzbyB0aGV5IGFidXNlZCBtZSBhcwogICAgICAgICAgICAgICAgICAgIHVuanVzdDogdGhleSBtYWRlIGNvbXBsYWludHMgYWdhaW5zdCBtZTsgdGhleSBkaXN0cnVzdGVkIFNlcnZpbGl1cyBhbHNvOyB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0ZWQgdGhhdCBBbnRvbml1cyBoYWQgYmVlbiBkYW1hZ2VkIGJ5IGhpcyBhdm93ZWQgb3BpbmlvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zaXRpb25zOyB0aGV5IHJlY29sbGVjdGVkIHRoYXQgTHVjaXVzIENhZXNhciwgdGhvdWdoIGEgYnJhdmUgYW5kIGNvbnNpc3RlbnQKICAgICAgICAgICAgICAgICAgICBzZW5hdG9yLCBpcyBzdGlsbCBoaXMgdW5jbGU7IHRoYXQgQ2FsZW51cyBpcyBoaXMgYWdlbnQ7IHRoYXQgUGlzbyBpcyBoaXMKICAgICAgICAgICAgICAgICAgICBpbnRpbWF0ZSBmcmllbmQ7IHRoZXkgdGhpbmsgdGhhdCB5b3UgeW91cnNlbGYsIE8gUGFuc2EsIHRob3VnaCBhIG1vc3Qgdmlnb3JvdXMKICAgICAgICAgICAgICAgICAgICBhbmQgZmVhcmxlc3MgY29uc3VsLCBhcmUgbm93IGJlY29tZSBtb3JlIG1lcmNpZnVsbHkgaW5jbGluZWQuIE5vdCB0aGF0IGl0IHJlYWxseQogICAgICAgICAgICAgICAgICAgIGlzIHNvLCBvciB0aGF0IGl0IHBvc3NpYmx5IGNhbiBiZSBzby4gQnV0IHRoZSBmYWN0IG9mIGEgbWVudGlvbiBvZiBwZWFjZSBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIG1hZGUgYnkgeW91LCBoYXMgZ2l2ZW4gcmlzZSB0byBhIHN1c3BpY2lvbiBpbiB0aGUgaGVhcnRzIG9mIG1hbnksIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBjaGFuZ2VkIHlvdXIgbWluZCBhIGxpdHRsZS4gVGhlIGZyaWVuZHMgb2YgQW50b25pdXMgYXJlIGFubm95ZWQgYXQgbXkgYmVpbmcKICAgICAgICAgICAgICAgICAgICBpbmNsdWRlZCBhbW9uZyB0aGVzZSBwZXJzb25zOyBhbmQgd2UgbXVzdCBubyBkb3VidCB5aWVsZCB0byB0aGVtLCBzaW5jZSB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgb25jZSBiZWd1biB0byBiZSBsaWJlcmFsLiA8L3RyYW5zbGF0aW9uPg=="
translation['12.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['12.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCB0aGUgYW1iYXNzYWRvcnMgZ28sIHdpdGggYWxsIG91ciBnb29kIHdpc2hlczsgYnV0IGxldCB0aG9zZSBtZW4gZ28gYXQgd2hvbQogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIG1heSB0YWtlIG5vIG9mZmVuc2UuIEJ1dCBpZiB5b3UgYXJlIG5vdCBhbnhpb3VzIGFib3V0IHdoYXQgaGUgbWF5CiAgICAgICAgICAgICAgICAgICAgdGhpbmssIGF0IGFsbCBldmVudHMsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHlvdSBvdWdodCB0byBoYXZlIHNvbWUgcmVnYXJkIGZvciBtZS4KICAgICAgICAgICAgICAgICAgICBBdCBsZWFzdCBzcGFyZSBteSBleWVzLCBhbmQgbWFrZSBzb21lIGFsbG93YW5jZSBmb3IgYSBqdXN0IGluZGlnbmF0aW9uLiBGb3Igd2l0aAogICAgICAgICAgICAgICAgICAgIHdoYXQgY291bnRlbmFuY2Ugc2hhbGwgSSBiZSBhYmxlIHRvIGJlaG9sZCAoSSBkbyBub3Qgc2F5LCB0aGUgZW5lbXkgb2YgbXkKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LCBmb3IgbXkgaGF0cmVkIG9mIGhpbSBvbiB0aGF0IHNjb3JlIEkgZmVlbCBpbiBjb21tb24gd2l0aCB5b3UgYWxsKSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaG93IHNoYWxsIEkgYmVhciB0byBsb29rIHVwb24gdGhhdCBtYW4gd2hvIGlzIG15IG93biBtb3N0IGJpdHRlciBwZXJzb25hbCBlbmVteSwKICAgICAgICAgICAgICAgICAgICBhcyBoaXMgbW9zdCBmdXJpb3VzIGhhcmFuZ3VlcyBhZ2FpbnN0IG1lIHBsYWlubHkgZGVjbGFyZSBoaW0/IERvIHlvdSB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSBhbSBzbyBjb21wbGV0ZWx5IG1hZGUgb2YgaXJvbiBhcyB0byBiZSBhYmxlIHVubW92ZWQgdG8gbWVldCBoaW0sIG9yIGxvb2sgYXQKICAgICAgICAgICAgICAgICAgICBoaW0/IHdobyBsYXRlbHksIHdoZW4gaW4gYW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSBoZSB3YXMgbWFraW5nIHByZXNlbnRzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgbWVuIHdobyBhcHBlYXJlZCB0byBoaW0gdGhlIG1vc3QgYXVkYWNpb3VzIG9mIGhpcyBiYW5kIG9mIHBhcnJpY2lkYWwKICAgICAgICAgICAgICAgICAgICB0cmFpdG9ycywgc2FpZCB0aGF0IGhlIGdhdmUgbXkgcHJvcGVydHkgdG8gUGV0aXNzaXVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzOTk0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDM5OTQiPlVyYmludW08L3BsYWNlTmFtZT4sIGEgbWFuIHdobywgYWZ0ZXIgdGhlIHNoaXB3cmVjayBvZiBhCiAgICAgICAgICAgICAgICAgICAgdmVyeSBzcGxlbmRpZCBwYXRyaW1vbnksIHdhcyBkYXNoZWQgYWdhaW5zdCB0aGVzZSByb2NrcyBvZiBBbnRvbml1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPiBTaGFsbCBJIGJlIGFibGUgdG8gYmVhciB0aGUgc2lnaHQgb2YgTHVjaXVzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXM/IGEgbWFuIGZyb20gd2hvc2UgY3J1ZWx0eSBJIGNvdWxkIG5vdCBoYXZlIGVzY2FwZWQgaWYgSSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZWQgbXlzZWxmIGJlaGluZCB0aGUgd2FsbHMgYW5kIGdhdGVzIGFuZCBieSB0aGUgemVhbCBvZiBteSBvd24gbXVuaWNpcGFsCiAgICAgICAgICAgICAgICAgICAgdG93bi4gQW5kIHRoaXMgc2FtZSBBc2lhdGljIGdsYWRpYXRvciwgdGhpcyBwbHVuZGVyZXIgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCB0aGlzIGNvbGxlYWd1ZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTA0MjM4OSIga2V5PSJ0Z24sMTA0MjM4OSI+TGVudGk8L3BsYWNlTmFtZT4gYW5kIE51Y3VsYSwgd2hlbiBiZSB3YXMgZ2l2aW5nIHNvbWUKICAgICAgICAgICAgICAgICAgICBwaWVjZXMgb2YgZ29sZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDA2NyIga2V5PSJ0Z24sNzAwNDA2NyI+QXF1aWxhPC9wbGFjZU5hbWU+IHRoZSBjZW50dXJpb24sCiAgICAgICAgICAgICAgICAgICAgc2FpZCB0aGF0IGhlIHdhcyBnaXZpbmcgaGltIHNvbWUgb2YgbXkgcHJvcGVydHkuIEZvciwgaWYgaGUgaGFkIHNhaWQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgZ2l2aW5nIGhpbSBzb21lIG9mIGhpcyBvd24sIGhlIHRob3VnaHQgdGhhdCB0aGUgZWFnbGUgaXRzZWxmIHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZWQgaXQuIE15IGV5ZXMgY2FuIG5vdOKAlG15IGV5ZXMsIEkgc2F5LCB3aWxsIG5vdCBiZWFyIHRoZSBzaWdodAogICAgICAgICAgICAgICAgICAgIG9mIFNheGEsIG9yIENhcGhvLCBvciB0aGUgdHdvIHByYWV0b3JzLCBvciB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBvciB0aGUgdHdvCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuZXMgZWxlY3QsIG9yIEJlc3RpYSwgb3IgVHJlYmVsbGl1cywgb3IgVGl0dXMgUGxhbmN1cy4gSSBjYW4gbm90IGxvb2sgd2l0aAogICAgICAgICAgICAgICAgICAgIGVxdWFuaW1pdHkgb24gc28gbWFueSwgYW5kIHRob3NlIHN1Y2ggZm91bCwgc3VjaCB3aWNrZWQgZW5lbWllczsgbm9yIGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBmZWVsaW5nIGNhdXNlZCBieSBhbnkgZmFzdGlkaW91c25lc3Mgb2YgbWluZSwgYnV0IGJ5IG15IGFmZmVjdGlvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMuIEJ1dCBJIHdpbGwgc3ViZHVlIG15IGZlZWxpbmdzLCBhbmQga2VlcCBteSBvd24gaW5jbGluYXRpb25zIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgcmVzdHJhaW50LiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPiBJZiBJIGNhbiBub3QgZXJhZGljYXRlIG15IG1vc3QKICAgICAgICAgICAgICAgICAgICBqdXN0IGluZGlnbmF0aW9uLCBJIHdpbGwgY29uY2VhbCBpdC4gV2hhdD8gRG8geW91IG5vdCB0aGluaywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCB0aGF0IEkgc2hvdWxkIGhhdmUgc29tZSByZWdhcmQgZm9yIG15IG93biBsaWZlPyBCdXQgdGhhdCBpbmRlZWQgaGFzCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgYmVlbiBhbiBvYmplY3Qgb2YgbXVjaCBjb25jZXJuIHRvIG1lLCBlc3BlY2lhbGx5IHNpbmNlIERvbGFiZWxsYSBoYXMgYWN0ZWQKICAgICAgICAgICAgICAgICAgICBpbiBzdWNoIGEgd2F5IHRoYXQgZGVhdGggaXMgYSBkZXNpcmFibGUgdGhpbmcsIHByb3ZpZGVkIGl0IGNvbWUgd2l0aG91dCB0b3JtZW50cwogICAgICAgICAgICAgICAgICAgIGFuZCB0b3J0dXJlcy4gQnV0IGluIHlvdXIgZXllcyBhbmQgaW4gdGhvc2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSBteSBsaWZlIG91Z2h0CiAgICAgICAgICAgICAgICAgICAgbm90IHRvIGFwcGVhciBvZiBubyBjb25zZXF1ZW5jZS4gRm9yIEkgYW0gYSBtYW4s4oCUdW5sZXNzIGluZGVlZCBJIGFtCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWQgaW4gbXkgZXN0aW1hdGUgb2YgbXlzZWxmLOKAlHdobyBieSBteSB2aWdpbGFuY2UsIGFuZCBhbnhpZXR5LAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBvcGluaW9ucyB3aGljaCBJIGhhdmUgZGVsaXZlcmVkLCBhbmQgYnkgdGhlIGRhbmdlcnMgdG9vIG9mIHdoaWNoIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGVuY291bnRlcmVkIGdyZWF0IG51bWJlcnMsIGJ5IHJlYXNvbiBvZiB0aGUgbW9zdCBiaXR0ZXIgaGF0cmVkIHdoaWNoIGFsbCBpbXBpb3VzCiAgICAgICAgICAgICAgICAgICAgbWVuIGJlYXIgbWUsIGhhdmUgYXQgbGVhc3QgKG5vdCB0byBzZWVtIHRvIHNheSBhbnkgdGhpbmcgdG9vIGJvYXN0ZnVsKSBjb25kdWN0ZWQKICAgICAgICAgICAgICAgICAgICBteXNlbGYgc28gYXMgdG8gYmUgbm8gaW5qdXJ5IHRvIHRoZSByZXB1YmxpYy4gPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBbmQgYXMgdGhpcyBpcyB0aGUgY2FzZSwgZG8geW91IHRoaW5rIHRoYXQgSSBvdWdodCB0byBoYXZlIG5vIGNvbnNpZGVyYXRpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgbXkgb3duIGRhbmdlcj8gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzOTk0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDM5OTQiPlVyYmludW08L3BsYWNlTmFtZT4sIGEgbWFuIHdobywgYWZ0ZXIgdGhlIHNoaXB3cmVjayBvZiBhCiAgICAgICAgICAgICAgICAgICAgdmVyeSBzcGxlbmRpZCBwYXRyaW1vbnksIHdhcyBkYXNoZWQgYWdhaW5zdCB0aGVzZSByb2NrcyBvZiBBbnRvbml1cy4gPC90cmFuc2xhdGlvbj4="
translation['12.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gU2hhbGwgSSBiZSBhYmxlIHRvIGJlYXIgdGhlIHNpZ2h0IG9mIEx1Y2l1cwogICAgICAgICAgICAgICAgICAgIEFudG9uaXVzPyBhIG1hbiBmcm9tIHdob3NlIGNydWVsdHkgSSBjb3VsZCBub3QgaGF2ZSBlc2NhcGVkIGlmIEkgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIGRlZmVuZGVkIG15c2VsZiBiZWhpbmQgdGhlIHdhbGxzIGFuZCBnYXRlcyBhbmQgYnkgdGhlIHplYWwgb2YgbXkgb3duIG11bmljaXBhbAogICAgICAgICAgICAgICAgICAgIHRvd24uIEFuZCB0aGlzIHNhbWUgQXNpYXRpYyBnbGFkaWF0b3IsIHRoaXMgcGx1bmRlcmVyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCB0aGlzIGNvbGxlYWd1ZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTA0MjM4OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDQyMzg5Ij5MZW50aTwvcGxhY2VOYW1lPiBhbmQgTnVjdWxhLCB3aGVuIGJlIHdhcyBnaXZpbmcgc29tZQogICAgICAgICAgICAgICAgICAgIHBpZWNlcyBvZiBnb2xkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0MDY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwNjciPkFxdWlsYTwvcGxhY2VOYW1lPiB0aGUgY2VudHVyaW9uLAogICAgICAgICAgICAgICAgICAgIHNhaWQgdGhhdCBoZSB3YXMgZ2l2aW5nIGhpbSBzb21lIG9mIG15IHByb3BlcnR5LiBGb3IsIGlmIGhlIGhhZCBzYWlkIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGdpdmluZyBoaW0gc29tZSBvZiBoaXMgb3duLCBoZSB0aG91Z2h0IHRoYXQgdGhlIGVhZ2xlIGl0c2VsZiB3b3VsZCBub3QgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlbGlldmVkIGl0LiBNeSBleWVzIGNhbiBub3TigJRteSBleWVzLCBJIHNheSwgd2lsbCBub3QgYmVhciB0aGUgc2lnaHQKICAgICAgICAgICAgICAgICAgICBvZiBTYXhhLCBvciBDYXBobywgb3IgdGhlIHR3byBwcmFldG9ycywgb3IgdGhlIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgb3IgdGhlIHR3bwogICAgICAgICAgICAgICAgICAgIHRyaWJ1bmVzIGVsZWN0LCBvciBCZXN0aWEsIG9yIFRyZWJlbGxpdXMsIG9yIFRpdHVzIFBsYW5jdXMuIEkgY2FuIG5vdCBsb29rIHdpdGgKICAgICAgICAgICAgICAgICAgICBlcXVhbmltaXR5IG9uIHNvIG1hbnksIGFuZCB0aG9zZSBzdWNoIGZvdWwsIHN1Y2ggd2lja2VkIGVuZW1pZXM7IG5vciBpcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgZmVlbGluZyBjYXVzZWQgYnkgYW55IGZhc3RpZGlvdXNuZXNzIG9mIG1pbmUsIGJ1dCBieSBteSBhZmZlY3Rpb24gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljLiBCdXQgSSB3aWxsIHN1YmR1ZSBteSBmZWVsaW5ncywgYW5kIGtlZXAgbXkgb3duIGluY2xpbmF0aW9ucyB1bmRlcgogICAgICAgICAgICAgICAgICAgIHJlc3RyYWludC4gPC90cmFuc2xhdGlvbj4="
translation['12.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSWYgSSBjYW4gbm90IGVyYWRpY2F0ZSBteSBtb3N0CiAgICAgICAgICAgICAgICAgICAganVzdCBpbmRpZ25hdGlvbiwgSSB3aWxsIGNvbmNlYWwgaXQuIFdoYXQ/IERvIHlvdSBub3QgdGhpbmssIE8gY29uc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgZmF0aGVycywgdGhhdCBJIHNob3VsZCBoYXZlIHNvbWUgcmVnYXJkIGZvciBteSBvd24gbGlmZT8gQnV0IHRoYXQgaW5kZWVkIGhhcwogICAgICAgICAgICAgICAgICAgIG5ldmVyIGJlZW4gYW4gb2JqZWN0IG9mIG11Y2ggY29uY2VybiB0byBtZSwgZXNwZWNpYWxseSBzaW5jZSBEb2xhYmVsbGEgaGFzIGFjdGVkCiAgICAgICAgICAgICAgICAgICAgaW4gc3VjaCBhIHdheSB0aGF0IGRlYXRoIGlzIGEgZGVzaXJhYmxlIHRoaW5nLCBwcm92aWRlZCBpdCBjb21lIHdpdGhvdXQgdG9ybWVudHMKICAgICAgICAgICAgICAgICAgICBhbmQgdG9ydHVyZXMuIEJ1dCBpbiB5b3VyIGV5ZXMgYW5kIGluIHRob3NlIG9mIHRoZSBSb21hbiBwZW9wbGUgbXkgbGlmZSBvdWdodAogICAgICAgICAgICAgICAgICAgIG5vdCB0byBhcHBlYXIgb2Ygbm8gY29uc2VxdWVuY2UuIEZvciBJIGFtIGEgbWFuLOKAlHVubGVzcyBpbmRlZWQgSSBhbQogICAgICAgICAgICAgICAgICAgIGRlY2VpdmVkIGluIG15IGVzdGltYXRlIG9mIG15c2VsZizigJR3aG8gYnkgbXkgdmlnaWxhbmNlLCBhbmQgYW54aWV0eSwKICAgICAgICAgICAgICAgICAgICBieSB0aGUgb3BpbmlvbnMgd2hpY2ggSSBoYXZlIGRlbGl2ZXJlZCwgYW5kIGJ5IHRoZSBkYW5nZXJzIHRvbyBvZiB3aGljaCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBlbmNvdW50ZXJlZCBncmVhdCBudW1iZXJzLCBieSByZWFzb24gb2YgdGhlIG1vc3QgYml0dGVyIGhhdHJlZCB3aGljaCBhbGwgaW1waW91cwogICAgICAgICAgICAgICAgICAgIG1lbiBiZWFyIG1lLCBoYXZlIGF0IGxlYXN0IChub3QgdG8gc2VlbSB0byBzYXkgYW55IHRoaW5nIHRvbyBib2FzdGZ1bCkgY29uZHVjdGVkCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmIHNvIGFzIHRvIGJlIG5vIGluanVyeSB0byB0aGUgcmVwdWJsaWMuIDwvdHJhbnNsYXRpb24+"
translation['12.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBBbmQgYXMgdGhpcyBpcyB0aGUgY2FzZSwgZG8geW91IHRoaW5rIHRoYXQgSSBvdWdodCB0byBoYXZlIG5vIGNvbnNpZGVyYXRpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgbXkgb3duIGRhbmdlcj8gPC90cmFuc2xhdGlvbj4="
translation['12.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXZlbiBoZXJlIHdoZW4gSSB3YXMgaW4gdGhlIGNpdHkgYW5kIGF0IGhvbWUsIG5ldmVydGhlbGVzcyBtYW55IGF0dGVtcHRzIHdlcmUKICAgICAgICAgICAgICAgICAgICBtYWRlIGFnYWluc3QgbWUsIGluIGEgcGxhY2Ugd2hlcmUgSSBoYXZlIG5vdCBvbmx5IHRoZSBmaWRlbGl0eSBvZiBteSBmcmllbmRzIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBleWVzIGFsc28gb2YgdGhlIGVudGlyZSBjaXR5IHRvIGd1YXJkIG1lLiBXaGF0IGRvIHlvdSB0aGluayB3aWxsIGJlIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgd2hlbiBJIGhhdmUgZ29uZSBvbiBhIGpvdXJuZXksIGFuZCB0aGF0IHRvbyBhIGxvbmcgb25lPyBEbyB5b3UgdGhpbmsgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGF2ZSBubyBvY2Nhc2lvbiB0byBmZWFyIHBsb3RzIHRoZW4/IFRoZXJlIGFyZSB0aHJlZSByb2FkcyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT47IGEgcGxhY2Ugd2hpY2ggbXkgbWluZCBsb25ncyB0byBzZWUsCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCBJIG1heSBiZWhvbGQgYXMgc3BlZWRpbHkgYXMgcG9zc2libGUgdGhhdCBwbGVkZ2Ugb2YgZnJlZWRvbSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBSb21hbiBwZW9wbGUgRGVjaW11cyBCcnV0dXM7IGluIHdob3NlIGVtYnJhY2UgSSB3b3VsZCB3aWxsaW5nbHkgeWllbGQgdXAgbXkKICAgICAgICAgICAgICAgICAgICBwYXJ0aW5nIGJyZWF0aCwgd2hlbiBhbGwgbXkgYWN0aW9ucyBmb3IgdGhlIGxhc3QgbWFueSBtb250aHMsIGFuZCBhbGwgbXkKICAgICAgICAgICAgICAgICAgICBvcGluaW9ucyBhbmQgcHJvcG9zaXRpb25zIGhhdmUgcmVzdWx0ZWQgaW4gdGhlIGVuZCB3aGljaCBJIHByb3Bvc2VkIHRvIG15c2VsZi4KICAgICAgICAgICAgICAgICAgICBUaGVyZSBhcmUsIGFzIEkgaGF2ZSBzYWlkLCB0aHJlZSByb2FkczsgdGhlIEZsYW1pbmlhbiByb2FkLCBhbG9uZyB0aGUgQWRyaWF0aWM7CiAgICAgICAgICAgICAgICAgICAgdGhlIEF1cmVsaWFuIHJvYWQsIGFsb25nIHRoZSBNZWRpdGVycmFuZWFuIGNvYXN0OyB0aGUgTWlkbGFuZCByb2FkLCB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgIGNhbGxlZCB0aGUgQ2Fzc2lhbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPjsgYSBwbGFjZSB3aGljaCBteSBtaW5kIGxvbmdzIHRvIHNlZSwKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IEkgbWF5IGJlaG9sZCBhcyBzcGVlZGlseSBhcyBwb3NzaWJsZSB0aGF0IHBsZWRnZSBvZiBmcmVlZG9tIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFJvbWFuIHBlb3BsZSBEZWNpbXVzIEJydXR1czsgaW4gd2hvc2UgZW1icmFjZSBJIHdvdWxkIHdpbGxpbmdseSB5aWVsZCB1cCBteQogICAgICAgICAgICAgICAgICAgIHBhcnRpbmcgYnJlYXRoLCB3aGVuIGFsbCBteSBhY3Rpb25zIGZvciB0aGUgbGFzdCBtYW55IG1vbnRocywgYW5kIGFsbCBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb25zIGFuZCBwcm9wb3NpdGlvbnMgaGF2ZSByZXN1bHRlZCBpbiB0aGUgZW5kIHdoaWNoIEkgcHJvcG9zZWQgdG8gbXlzZWxmLgogICAgICAgICAgICAgICAgICAgIFRoZXJlIGFyZSwgYXMgSSBoYXZlIHNhaWQsIHRocmVlIHJvYWRzOyB0aGUgRmxhbWluaWFuIHJvYWQsIGFsb25nIHRoZSBBZHJpYXRpYzsKICAgICAgICAgICAgICAgICAgICB0aGUgQXVyZWxpYW4gcm9hZCwgYWxvbmcgdGhlIE1lZGl0ZXJyYW5lYW4gY29hc3Q7IHRoZSBNaWRsYW5kIHJvYWQsIHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHRoZSBDYXNzaWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['12.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgdGFrZSBub3RpY2UsIEkgYmVnIG9mIHlvdSwgd2hldGhlciBteSBzdXNwaWNpb24gb2YgZGFuZ2VyIHRvIG15c2VsZiBpcyBhdAogICAgICAgICAgICAgICAgICAgIHZhcmlhbmNlIHdpdGggYSByZWFzb25hYmxlIGNvbmplY3R1cmUuIFRoZSBDYXNzaWFuIHJvYWQgZ29lcyB0aHJvdWdoIEV0cnVyaWEuIERvCiAgICAgICAgICAgICAgICAgICAgd2Ugbm90IGtub3cgdGhlbiwgTyBQYW5zYSwgb3ZlciB3aGF0IHBsYWNlcyB0aGUgYXV0aG9yaXR5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDQyMzg5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwNDIzODkiPkxlbnRpPC9wbGFjZU5hbWU+IENhZXNlbm5pdXMsIGFzIGEgc2VwdGVtdmlyLCBwcmV2YWlscyBhdAogICAgICAgICAgICAgICAgICAgIHByZXNlbnQ/IEhlIGNlcnRhaW5seSBpcyBub3Qgb24gb3VyIHNpZGUgZWl0aGVyIGluIG1pbmQgb3IgYm9keS4gQnV0IGlmIGhlIGlzIGF0CiAgICAgICAgICAgICAgICAgICAgaG9tZSBvciBub3QgZmFyIGZyb20gaG9tZSwgaGUgaXMgY2VydGFpbmx5IGluIEV0cnVyaWEsIHRoYXQgaXMsIGluIG15IHJvYWQuIFdobwogICAgICAgICAgICAgICAgICAgIHRoZW4gd2lsbCB1bmRlcnRha2UgdG8gbWUgdGhhdCBMZW50aSB3aWxsIGJlIGNvbnRlbnQgd2l0aCBleGFjdGluZyBvbmUgbGlmZQogICAgICAgICAgICAgICAgICAgIGFsb25lPyBUZWxsIG1lIGJlc2lkZXMsIE8gUGFuc2EsIHdoZXJlIFZlbnRpZGl1cyBpcyzigJRhIG1hbiB0byB3aG9tIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGFsd2F5cyBiZWVuIGZyaWVuZGx5IGJlZm9yZSBoZSBiZWNhbWUgc28gb3Blbmx5IGFuIGVuZW15IHRvIHRoZSByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIGFuZCB0byBhbGwgZ29vZCBtZW4uIEkgbWF5IGF2b2lkIHRoZSBDYXNzaWFuIHJvYWQgYW5kIHRha2UgdGhlIEZsYW1pbmlhbi4gV2hhdAogICAgICAgICAgICAgICAgICAgIGlmLCBhcyBpdCBpcyBzYWlkLCBWZW50aWRpdXMgaGFzIGFycml2ZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbmNvbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFuY29uYSI+QW5jb25hPC9wbGFjZU5hbWU+PyBTaGFsbCBJIGJlIGFibGUgaW4gdGhhdCBjYXNlIHRvIHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpbWludW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyaW1pbnVtIj5BcmltaW51bTwvcGxhY2VOYW1lPiBpbiBzYWZldHk/IFRoZSBBdXJlbGlhbiByb2FkCiAgICAgICAgICAgICAgICAgICAgcmVtYWluczsgYW5kIGhlcmUgdG9vIEkgc2hhbGwgZmluZCBhIHByb3RlY3RvcjsgZm9yIG9uIHRoYXQgcm9hZCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbnMgb2YgUHVibGl1cyBDbG9kaXVzLiBIaXMgd2hvbGUgaG91c2Vob2xkIHdpbGwgY29tZSBvdXQgdG8gbWVldCBtZTsKICAgICAgICAgICAgICAgICAgICBhbmQgd2lsbCBpbnZpdGUgbWUgdG8gcGFydGFrZSBvZiB0aGVpciBob3NwaXRhbGl0eSwgb24gYWNjb3VudCBvZiBteSBub3RvcmlvdXMKICAgICAgICAgICAgICAgICAgICBpbnRpbWFjeSB3aXRoIHRoZWlyIG1hc3Rlcj8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwNDIzODkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTA0MjM4OSI+TGVudGk8L3BsYWNlTmFtZT4gQ2Flc2Vubml1cywgYXMgYSBzZXB0ZW12aXIsIHByZXZhaWxzIGF0CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudD8gSGUgY2VydGFpbmx5IGlzIG5vdCBvbiBvdXIgc2lkZSBlaXRoZXIgaW4gbWluZCBvciBib2R5LiBCdXQgaWYgaGUgaXMgYXQKICAgICAgICAgICAgICAgICAgICBob21lIG9yIG5vdCBmYXIgZnJvbSBob21lLCBoZSBpcyBjZXJ0YWlubHkgaW4gRXRydXJpYSwgdGhhdCBpcywgaW4gbXkgcm9hZC4gV2hvCiAgICAgICAgICAgICAgICAgICAgdGhlbiB3aWxsIHVuZGVydGFrZSB0byBtZSB0aGF0IExlbnRpIHdpbGwgYmUgY29udGVudCB3aXRoIGV4YWN0aW5nIG9uZSBsaWZlCiAgICAgICAgICAgICAgICAgICAgYWxvbmU/IFRlbGwgbWUgYmVzaWRlcywgTyBQYW5zYSwgd2hlcmUgVmVudGlkaXVzIGlzLOKAlGEgbWFuIHRvIHdob20gSQogICAgICAgICAgICAgICAgICAgIGhhdmUgYWx3YXlzIGJlZW4gZnJpZW5kbHkgYmVmb3JlIGhlIGJlY2FtZSBzbyBvcGVubHkgYW4gZW5lbXkgdG8gdGhlIHJlcHVibGljCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIGFsbCBnb29kIG1lbi4gSSBtYXkgYXZvaWQgdGhlIENhc3NpYW4gcm9hZCBhbmQgdGFrZSB0aGUgRmxhbWluaWFuLiBXaGF0CiAgICAgICAgICAgICAgICAgICAgaWYsIGFzIGl0IGlzIHNhaWQsIFZlbnRpZGl1cyBoYXMgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFuY29uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW5jb25hIj5BbmNvbmE8L3BsYWNlTmFtZT4/IFNoYWxsIEkgYmUgYWJsZSBpbiB0aGF0IGNhc2UgdG8gcmVhY2ggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmltaW51bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJpbWludW0iPkFyaW1pbnVtPC9wbGFjZU5hbWU+IGluIHNhZmV0eT8gVGhlIEF1cmVsaWFuIHJvYWQKICAgICAgICAgICAgICAgICAgICByZW1haW5zOyBhbmQgaGVyZSB0b28gSSBzaGFsbCBmaW5kIGEgcHJvdGVjdG9yOyBmb3Igb24gdGhhdCByb2FkIGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9ucyBvZiBQdWJsaXVzIENsb2RpdXMuIEhpcyB3aG9sZSBob3VzZWhvbGQgd2lsbCBjb21lIG91dCB0byBtZWV0IG1lOwogICAgICAgICAgICAgICAgICAgIGFuZCB3aWxsIGludml0ZSBtZSB0byBwYXJ0YWtlIG9mIHRoZWlyIGhvc3BpdGFsaXR5LCBvbiBhY2NvdW50IG9mIG15IG5vdG9yaW91cwogICAgICAgICAgICAgICAgICAgIGludGltYWN5IHdpdGggdGhlaXIgbWFzdGVyPyA8L3RyYW5zbGF0aW9uPg=="
translation['12.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['12.10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNoYWxsIEkgdGhlbiB0cnVzdCBteXNlbGYgdG8gdGhvc2Ugcm9hZHPigJRJIHdobyBsYXRlbHksIG9uIHRoZSBkYXkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZmVhc3Qgb2YgVGVybWludXMsIGRpZCBub3QgZGFyZSBldmVuIHRvIGdvIGludG8gdGhlIHN1YnVyYnMgYW5kIHJldHVybiBieQogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHJvYWQgb24gdGhlIHNhbWUgZGF5PyBJIGNhbiBzY2FyY2VseSBkZWZlbmQgbXlzZWxmIHdpdGhpbiB0aGUgd2FsbHMgb2YKICAgICAgICAgICAgICAgICAgICBteSBvd24gaG91c2Ugd2l0aG91dCB0aGUgcHJvdGVjdGlvbiBvZiBteSBmcmllbmRzOyB0aGVyZWZvcmUgSSByZW1haW4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eTsgYW5kIGlmIEkgYW0gYWxsb3dlZCB0byBkbyBzbyBJIHdpbGwgcmVtYWluLiBUaGlzIGlzIG15IHByb3BlciBwbGFjZSwgdGhpcwogICAgICAgICAgICAgICAgICAgIGlzIG15IGJlYXQsIHRoaXMgaXMgbXkgcG9zdCBhcyBhIHNlbnRpbmVsLCB0aGlzIGlzIG15IHN0YXRpb24gYXMgYSBkZWZlbmRlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5LiBMZXQgb3RoZXJzIG9jY3VweSBjYW1wcyBhbmQga2luZ2RvbXMsIGFuZCBlbmdhZ2UgaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FyOyBsZXQgdGhlbSBzaG93IHRoZSBhY3RpdmUgaGF0cmVkIG9mIHRoZSBlbmVteTsgd2UsIGFzIHdlIHNheSwgYW5kIGFzIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgaGl0aGVydG8gZG9uZSwgd2lsbCwgaW4gY29tbW9uIHdpdGggeW91LCBkZWZlbmQgdGhlIGNpdHkgYW5kIHRoZSBhZmZhaXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGNpdHkuIE5vciBkbyBJIHNocmluayBmcm9tIHRoaXMgb2ZmaWNlOyBhbHRob3VnaCBJIHNlZSB0aGUgUm9tYW4gcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgc2hyaW5rIGZyb20gaXQgZm9yIG1lLiBObyBvbmUgaXMgbGVzcyB0aW1pZCB0aGFuIEkgYW07IG5vIG9uZSBtb3JlIGNhdXRpb3VzLiBUaGUKICAgICAgICAgICAgICAgICAgICBmYWN0cyBzcGVhayBmb3IgdGhlbXNlbHZlcy4gVGhpcyBpcyB0aGUgdHdlbnRpZXRoIHllYXIgdGhhdCBJIGhhdmUgYmVlbiBhIG1hcmsKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGF0dGVtcHRzIG9mIGFsbCB3aWNrZWQgbWVuOyB0aGVyZWZvcmUsIHRoZXkgaGF2ZSBwYWlkIHRvIHRoZSByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIChub3QgdG8gc2F5IHRvIG1lKSB0aGUgcGVuYWx0eSBvZiB0aGVpciB3aWNrZWRuZXNzLiBBcyB5ZXQgdGhlIHJlcHVibGljIGhhcwogICAgICAgICAgICAgICAgICAgIHByZXNlcnZlZCBtZSBpbiBzYWZldHkgZm9yIGl0c2VsZi4gSSBhbSBhbG1vc3QgYWZyYWlkIHRvIHNheSB3aGF0IEkgYW0gZ29pbmcgdG8KICAgICAgICAgICAgICAgICAgICBzYXk7IGZvciBJIGtub3cgdGhhdCBhbnkgYWNjaWRlbnQgbWF5IGhhcHBlbiB0byBhIG1hbjsgYnV0IHN0aWxsLCB3aGVuIEkgd2FzCiAgICAgICAgICAgICAgICAgICAgb25jZSBoZW1tZWQgaW4gYnkgdGhlIHVuaXRlZCBmb3JjZSBvZiBtYW55IG1vc3QgaW5mbHVlbnRpYWwgbWVuLCBJIHlpZWxkZWQKICAgICAgICAgICAgICAgICAgICB2b2x1bnRhcmlseSwgYW5kIGZlbGwgaW4gc3VjaCBhIG1hbm5lciBhcyB0byBiZSBhYmxlIHRvIHJpc2UgYWdhaW4gaW4gdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBob25vcmFibGUgbWFubmVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2FuIEksIHRoZW4sIGFwcGVhciBhcyBjYXV0aW91cyBhbmQgYXMgcHJ1ZGVudCBhcyBJIG91Z2h0IHRvIGJlIGlmIEkgY29tbWl0CiAgICAgICAgICAgICAgICAgICAgbXlzZWxmIHRvIGEgam91cm5leSBzbyBmdWxsIG9mIGVuZW1pZXMgYW5kIGRhbmdlcnMgdG8gbWU/IFRob3NlIG1lbiB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmVkIGluIHRoZSBnb3Zlcm5tZW50IG9mIHRoZSByZXB1YmxpYyBvdWdodCBhdCB0aGVpciBkZWF0aCB0byBsZWF2ZSBiZWhpbmQKICAgICAgICAgICAgICAgICAgICB0aGVtIGdsb3J5LCBhbmQgbm90IHJlcHJvYWNoZXMgZm9yIHRoZWlyIGZhdWx0LCBvciBncm91bmRzIGZvciBibGFtaW5nIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZm9sbHkuIFdoYXQgZ29vZCBtYW4gaXMgdGhlcmUgd2hvIGRvZXMgbm90IG1vdXJuIGZvciB0aGUgZGVhdGggb2YgVHJlYm9uaXVzPyBXaG8KICAgICAgICAgICAgICAgICAgICBpcyB0aGVyZSB3aG8gZG9lcyBub3QgZ3JpZXZlIGZvciB0aGUgbG9zcyBvZiBzdWNoIGEgY2l0aXplbiBhbmQgc3VjaCBhIG1hbj8gQnV0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYXJlIG1lbiB3aG8gc2F5IChoYXN0aWx5IGluZGVlZCwgYnV0IHN0aWxsIHRoZXkgZG8gc2F5IHNvKSwgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzIHRvIGJlIGdyaWV2ZWQgZm9yIGxlc3MgYmVjYXVzZSBoZSBkaWQgbm90IHRha2UgcHJlY2F1dGlvbnMgYWdhaW5zdCBhCiAgICAgICAgICAgICAgICAgICAgZGVzcGVyYXRlbHkgd2lja2VkIG1hbi4gSW4gdHJ1dGgsIGEgbWFuIHdobyBwcm9mZXNzZXMgdG8gYmUgaGltc2VsZiBhIGRlZmVuZGVyCiAgICAgICAgICAgICAgICAgICAgb2YgbWFueSBtZW4sIHdpc2UgbWVuIHNheSwgb3VnaHQgaW4gdGhlIGZpcnN0IHBsYWNlIHRvIHNob3cgaGltc2VsZiBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCBoaXMgb3duIGxpZmUuIEkgc2F5LCB0aGF0IHdoZW4gb25lIGlzIGZlbmNlZCByb3VuZCBieSB0aGUgbGF3cyBhbmQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgZmVhciBvZiBqdXN0aWNlLCBhIG1hbiBpcyBub3QgYm91bmQgdG8gYmUgYWZyYWlkIG9mIGV2ZXJ5dGhpbmcsIG9yIHRvIHRha2UKICAgICAgICAgICAgICAgICAgICBwcmVjYXV0aW9ucyBhZ2FpbnN0IGFsbCBpbWFnaW5hYmxlIGRlc2lnbnM7IGZvciB3aG8gd291bGQgZGFyZSB0byBhdHRhY2sgYSBtYW4KICAgICAgICAgICAgICAgICAgICBpbiBkYXlsaWdodCwgb24gYSBtaWxpdGFyeSByb2FkLCBvciBhIG1hbiB3aG8gd2FzIHdlbGwgYXR0ZW5kZWQsIG9yIGFuCiAgICAgICAgICAgICAgICAgICAgaWxsdXN0cmlvdXMgbWFuPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGVzZSBjb25zaWRlcmF0aW9ucwogICAgICAgICAgICAgICAgICAgIGhhdmUgbm8gYmVhcmluZyBvbiB0aGUgcHJlc2VudCB0aW1lLCBub3IgaW4gbXkgY2FzZTsgZm9yIG5vdCBvbmx5IHdvdWxkIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIG9mZmVyZWQgdmlvbGVuY2UgdG8gbWUgaGF2ZSBubyBmZWFyIG9mIHB1bmlzaG1lbnQsIGJ1dCBoZSB3b3VsZCBldmVuIGhvcGUgdG8KICAgICAgICAgICAgICAgICAgICBvYnRhaW4gZ2xvcnkgYW5kIHJld2FyZHMgZnJvbSB0aG9zZSBiYW5kcyBvZiByb2JiZXJzLCA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXNlIGNvbnNpZGVyYXRpb25zCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBubyBiZWFyaW5nIG9uIHRoZSBwcmVzZW50IHRpbWUsIG5vciBpbiBteSBjYXNlOyBmb3Igbm90IG9ubHkgd291bGQgYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG8gb2ZmZXJlZCB2aW9sZW5jZSB0byBtZSBoYXZlIG5vIGZlYXIgb2YgcHVuaXNobWVudCwgYnV0IGhlIHdvdWxkIGV2ZW4gaG9wZSB0bwogICAgICAgICAgICAgICAgICAgIG9idGFpbiBnbG9yeSBhbmQgcmV3YXJkcyBmcm9tIHRob3NlIGJhbmRzIG9mIHJvYmJlcnMsIDwvdHJhbnNsYXRpb24+"
translation['12.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIGRhbmdlcnMuIEkgY2FuIGd1YXJkIGFnYWluc3QgaW4gdGhlIGNpdHk7IGl0IGlzIGVhc3kgZm9yIG1lIHRvIGxvb2sgYXJvdW5kCiAgICAgICAgICAgICAgICAgICAgYW5kIHNlZSB3aGVyZSBJIGFtIGdvaW5nIG91dCBmcm9tLCB3aGl0aGVyIEkgYW0gZ29pbmcsIHdoYXQgdGhlcmUgaXMgb24gbXkgcmlnaHQKICAgICAgICAgICAgICAgICAgICBoYW5kLCBhbmQgb24gbXkgbGVmdC4gU2hhbGwgSSBiZSBhYmxlIHRvIGRvIHRoZSBzYW1lIG9uIHRoZSByb2FkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+PyBpbiB3aGljaCwgZXZlbiBpZiB0aGVyZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBubyBhbWJ1c2gsIGFzIHRoZXJlIGVhc2lseSBtYXkgYmUsIHN0aWxsIG15IG1pbmQgd2lsbCBiZSBrZXB0IGluIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIHN0YXRlIG9mIGFueGlldHkgYXMgbm90IHRvIGJlIGFibGUgdG8gYXR0ZW5kIHRvIHRoZSBkdXRpZXMgb2YgYW4gZW1iYXNzeS4gQnV0CiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBJIGhhdmUgZXNjYXBlZCBhbGwgcGxvdHMgYWdhaW5zdCBtZSwgYW5kIGhhdmUgcGFzc2VkIG92ZXIgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg1MzEiPkFwZW5uaW5lczwvcGxhY2VOYW1lPjsgc3RpbGwgSSBoYXZlIHRvIGVuY291bnRlciBhIG1lZXRpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY29uZmVyZW5jZSB3aXRoIEFudG9uaXVzLiBXaGF0IHBsYWNlIGFtIEkgdG8gc2VsZWN0PyBJZiBpdCBpcyBvdXRzaWRlIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAsIHRoZSByZXN0IG1heSBsb29rIHRvIHRoZW1zZWx2ZXMs4oCUSSB0aGluayB0aGF0IGRlYXRoIHdvdWxkIGNvbWUKICAgICAgICAgICAgICAgICAgICB1cG9uIG1lIGluc3RhbnRseS4gSSBrbm93IHRoZSBmcmVuenkgb2YgdGhlIG1hbjsgSSBrbm93IGhpcyB1bmJyaWRsZWQgdmlvbGVuY2UuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZlcm9jaXR5IG9mIGhpcyBtYW5uZXJzIGFuZCB0aGUgc2F2YWdlbmVzcyBvZiBoaXMgbmF0dXJlIGlzIG5vdCB1c3VhbGx5CiAgICAgICAgICAgICAgICAgICAgc29mdGVuZWQgZXZlbiBieSB3aW5lLiBUaGVuLCBpbmZsYW1lZCBieSBhbmdlciBhbmQgaW5zYW5pdHksIHdpdGggaGlzIGJyb3RoZXIKICAgICAgICAgICAgICAgICAgICBMdWNpdXMsIHRoYXQgZm91bGVzdCBvZiBiZWFzdHMsIGF0IGhpcyBzaWRlLCBoZSB3aWxsIG5ldmVyIGtlZXAgaGlzIHNhY3JpbGVnaW91cwogICAgICAgICAgICAgICAgICAgIGFuZCBpbXBpb3VzIGhhbmRzIGZyb20gbWUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gSSBjYW4gcmVjb2xsZWN0CiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZXMgd2l0aCBtb3N0IGJpdHRlciBlbmVtaWVzLCBhbmQgd2l0aCBjaXRpemVucyBpbiBhIHN0YXRlIG9mIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgYml0dGVyIGRpc2FncmVlbWVudC4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+PyBpbiB3aGljaCwgZXZlbiBpZiB0aGVyZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBubyBhbWJ1c2gsIGFzIHRoZXJlIGVhc2lseSBtYXkgYmUsIHN0aWxsIG15IG1pbmQgd2lsbCBiZSBrZXB0IGluIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIHN0YXRlIG9mIGFueGlldHkgYXMgbm90IHRvIGJlIGFibGUgdG8gYXR0ZW5kIHRvIHRoZSBkdXRpZXMgb2YgYW4gZW1iYXNzeS4gQnV0CiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBJIGhhdmUgZXNjYXBlZCBhbGwgcGxvdHMgYWdhaW5zdCBtZSwgYW5kIGhhdmUgcGFzc2VkIG92ZXIgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NTMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg1MzEiPkFwZW5uaW5lczwvcGxhY2VOYW1lPjsgc3RpbGwgSSBoYXZlIHRvIGVuY291bnRlciBhIG1lZXRpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY29uZmVyZW5jZSB3aXRoIEFudG9uaXVzLiBXaGF0IHBsYWNlIGFtIEkgdG8gc2VsZWN0PyBJZiBpdCBpcyBvdXRzaWRlIHRoZQogICAgICAgICAgICAgICAgICAgIGNhbXAsIHRoZSByZXN0IG1heSBsb29rIHRvIHRoZW1zZWx2ZXMs4oCUSSB0aGluayB0aGF0IGRlYXRoIHdvdWxkIGNvbWUKICAgICAgICAgICAgICAgICAgICB1cG9uIG1lIGluc3RhbnRseS4gSSBrbm93IHRoZSBmcmVuenkgb2YgdGhlIG1hbjsgSSBrbm93IGhpcyB1bmJyaWRsZWQgdmlvbGVuY2UuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZlcm9jaXR5IG9mIGhpcyBtYW5uZXJzIGFuZCB0aGUgc2F2YWdlbmVzcyBvZiBoaXMgbmF0dXJlIGlzIG5vdCB1c3VhbGx5CiAgICAgICAgICAgICAgICAgICAgc29mdGVuZWQgZXZlbiBieSB3aW5lLiBUaGVuLCBpbmZsYW1lZCBieSBhbmdlciBhbmQgaW5zYW5pdHksIHdpdGggaGlzIGJyb3RoZXIKICAgICAgICAgICAgICAgICAgICBMdWNpdXMsIHRoYXQgZm91bGVzdCBvZiBiZWFzdHMsIGF0IGhpcyBzaWRlLCBoZSB3aWxsIG5ldmVyIGtlZXAgaGlzIHNhY3JpbGVnaW91cwogICAgICAgICAgICAgICAgICAgIGFuZCBpbXBpb3VzIGhhbmRzIGZyb20gbWUuIDwvdHJhbnNsYXRpb24+"
translation['12.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gSSBjYW4gcmVjb2xsZWN0CiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZXMgd2l0aCBtb3N0IGJpdHRlciBlbmVtaWVzLCBhbmQgd2l0aCBjaXRpemVucyBpbiBhIHN0YXRlIG9mIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgYml0dGVyIGRpc2FncmVlbWVudC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5DbmFldXMgUG9tcGVpdXMsIHRoZSBzb24gb2YgU2V4dHVzLCBiZWluZyBjb25zdWwsIGluIG15IHByZXNlbmNlLCB3aGVuIEkgd2FzCiAgICAgICAgICAgICAgICAgICAgc2VydmluZyBteSBmaXJzdCBjYW1wYWlnbiBpbiBoaXMgYXJteSwgaGFkIGEgY29uZmVyZW5jZSB3aXRoIFB1YmxpdXMgVmV0dGl1cwogICAgICAgICAgICAgICAgICAgIFNjYXRvLCB0aGUgZ2VuZXJhbCBvZiB0aGUgTWFyc2lhbnMsIGJldHdlZW4gdGhlIGNhbXBzLiBBbmQgSSByZWNvbGxlY3QgdGhhdAogICAgICAgICAgICAgICAgICAgIFNleHR1cyBQb21wZWl1cywgdGhlIGJyb3RoZXIgb2YgdGhlIGNvbnN1bCwgYSB2ZXJ5IGxlYXJuZWQgYW5kIHdpc2UgbWFuLCBjYW1lCiAgICAgICAgICAgICAgICAgICAgdGhpdGhlciBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB0byB0aGUgY29uZmVyZW5jZS4KICAgICAgICAgICAgICAgICAgICBBbmQgd2hlbiBTY2F0byBoYWQgc2FsdXRlZCBoaW0sIOKAnFdoYXQs4oCdIHNhaWQgaGUsCiAgICAgICAgICAgICAgICAgICAg4oCcYW0gSSB0byBjYWxsIHlvdT/igJ3igJTigJxDYWxsIG1lLOKAnQogICAgICAgICAgICAgICAgICAgIHNhaWQgaGUsIOKAnG9uZSB3aG8gaXMgYnkgaW5jbGluYXRpb24gYSBmcmllbmQsIGJ5IG5lY2Vzc2l0eSBhbgogICAgICAgICAgICAgICAgICAgIGVuZW15LuKAnSBUaGF0IGNvbmZlcmVuY2Ugd2FzIGNvbmR1Y3RlZCB3aXRoIGZhaXJuZXNzOiB0aGVyZSB3YXMgbm8KICAgICAgICAgICAgICAgICAgICBmZWFyLCBubyBzdXNwaWNpb24sIGV2ZW4gdGhlaXIgbXV0dWFsIGhhdHJlZCB3YXMgbm90IGdyZWF0LCBmb3IgdGhlIGFsbGllcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm90IHNlZWtpbmcgdG8gdGFrZSBvdXIgY2l0eSBmcm9tIHVzLCBidXQgdG8gYmUgdGhlbXNlbHZlcyBhZG1pdHRlZCB0byBzaGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzIG9mIGl0LiBTdWxsYSBhbmQgU2NpcGlvLCBvbmUgYXR0ZW5kZWQgYnkgdGhlIGZsb3dlciBvZiB0aGUgbm9iaWxpdHksCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIGJ5IHRoZSBhbGxpZXMsIGhhZCBhIGNvbmZlcmVuY2UgYmV0d2VlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYWxlcyI+Q2FsZXM8L3BsYWNlTmFtZT4gYW5kIFRlYW51bSwgcmVzcGVjdGluZyB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUsIHRoZQogICAgICAgICAgICAgICAgICAgIHN1ZmZyYWdlcyBvZiB0aGUgcGVvcGxlLCBhbmQgdGhlIHByaXZpbGVnZXMgb2YgY2l0aXplbnNoaXA7IGFuZCBhZ3JlZWQgdXBvbgogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgYW5kIHN0aXB1bGF0aW9ucy4gR29vZCBmYWl0aCB3YXMgbm90IHN0cmljdGx5IG9ic2VydmVkIGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICBjb25mZXJlbmNlOyBidXQgc3RpbGwgdGhlcmUgd2FzIG5vIHZpb2xlbmNlIHVzZWQsIGFuZCBubyBkYW5nZXIgaW5jdXJyZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gdG8gdGhlIGNvbmZlcmVuY2UuCiAgICAgICAgICAgICAgICAgICAgQW5kIHdoZW4gU2NhdG8gaGFkIHNhbHV0ZWQgaGltLCDigJxXaGF0LOKAnSBzYWlkIGhlLAogICAgICAgICAgICAgICAgICAgIOKAnGFtIEkgdG8gY2FsbCB5b3U/4oCd4oCU4oCcQ2FsbCBtZSzigJ0KICAgICAgICAgICAgICAgICAgICBzYWlkIGhlLCDigJxvbmUgd2hvIGlzIGJ5IGluY2xpbmF0aW9uIGEgZnJpZW5kLCBieSBuZWNlc3NpdHkgYW4KICAgICAgICAgICAgICAgICAgICBlbmVteS7igJ0gVGhhdCBjb25mZXJlbmNlIHdhcyBjb25kdWN0ZWQgd2l0aCBmYWlybmVzczogdGhlcmUgd2FzIG5vCiAgICAgICAgICAgICAgICAgICAgZmVhciwgbm8gc3VzcGljaW9uLCBldmVuIHRoZWlyIG11dHVhbCBoYXRyZWQgd2FzIG5vdCBncmVhdCwgZm9yIHRoZSBhbGxpZXMgd2VyZQogICAgICAgICAgICAgICAgICAgIG5vdCBzZWVraW5nIHRvIHRha2Ugb3VyIGNpdHkgZnJvbSB1cywgYnV0IHRvIGJlIHRoZW1zZWx2ZXMgYWRtaXR0ZWQgdG8gc2hhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlcyBvZiBpdC4gU3VsbGEgYW5kIFNjaXBpbywgb25lIGF0dGVuZGVkIGJ5IHRoZSBmbG93ZXIgb2YgdGhlIG5vYmlsaXR5LAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBieSB0aGUgYWxsaWVzLCBoYWQgYSBjb25mZXJlbmNlIGJldHdlZW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYWxlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FsZXMiPkNhbGVzPC9wbGFjZU5hbWU+IGFuZCBUZWFudW0sIHJlc3BlY3RpbmcgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCB0aGUKICAgICAgICAgICAgICAgICAgICBzdWZmcmFnZXMgb2YgdGhlIHBlb3BsZSwgYW5kIHRoZSBwcml2aWxlZ2VzIG9mIGNpdGl6ZW5zaGlwOyBhbmQgYWdyZWVkIHVwb24KICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zIGFuZCBzdGlwdWxhdGlvbnMuIEdvb2QgZmFpdGggd2FzIG5vdCBzdHJpY3RseSBvYnNlcnZlZCBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29uZmVyZW5jZTsgYnV0IHN0aWxsIHRoZXJlIHdhcyBubyB2aW9sZW5jZSB1c2VkLCBhbmQgbm8gZGFuZ2VyIGluY3VycmVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBjYW4gd2UgYmUgZXF1YWxseSBzYWZlIGFtb25nIEFudG9uaXVzJ3MgcGlyYXRpY2FsIGNyZXc/IFdlIGNhbiBub3Q7IG9yLCBldmVuCiAgICAgICAgICAgICAgICAgICAgaWYgdGhlIHJlc3QgY2FuLCBJIGRvIG5vdCBiZWxpZXZlIHRoYXQgSSBjYW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBXaGF0IHdpbGwgYmUgdGhlIGNhc2UgaWYgd2UgYXJlIG5vdCB0byBjb25mZXIgb3V0IG9mIHRoZSBjYW1wPyBXaGF0IGNhbXAgaXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBjaG9zZW4gZm9yIHRoZSBjb25mZXJlbmNlPyBIZSB3aWxsIG5ldmVyIGNvbWUgaW50byBvdXIgY2FtcDvigJRtdWNoCiAgICAgICAgICAgICAgICAgICAgbGVzcyB3aWxsIHdlIGdvIHRvIGhpcy4gSXQgZm9sbG93cywgdGhlbiwgdGhhdCBhbGwgZGVtYW5kcyBtdXN0IGJlIHJlY2VpdmVkIGFuZAogICAgICAgICAgICAgICAgICAgIHNlbnQgdG8gYW5kIGZybyBieSBtZWFucyBvZiBsZXR0ZXJzLiBXZSB0aGVuIHNoYWxsIGJlIGluIG91ciByZXNwZWN0aXZlIGNhbXBzLgogICAgICAgICAgICAgICAgICAgIE9uIGFsbCBoaXMgZGVtYW5kcyBJIHNoYWxsIGhhdmUgYnV0IG9uZSBvcGluaW9uOyBhbmQgd2hlbiBJIGhhdmUgc3RhdGVkIGl0IGhlcmUsCiAgICAgICAgICAgICAgICAgICAgaW4geW91ciBoZWFyaW5nLCB5b3UgbWF5IHRoaW5rIHRoYXQgSSBoYXZlIGdvbmUsIGFuZCB0aGF0IEkgaGF2ZSBjb21lIGJhY2sKICAgICAgICAgICAgICAgICAgICBhZ2Fpbi7igJRJIHNoYWxsIGhhdmUgZmluaXNoZWQgbXkgZW1iYXNzeS4gQXMgZmFyIGFzIG15IHNlbnRpbWVudHMgY2FuCiAgICAgICAgICAgICAgICAgICAgcHJldmFpbCwgSSBzaGFsbCByZWZlciBldmVyeSBkZW1hbmQgd2hpY2ggQW50b25pdXMgbWFrZXMgdG8gdGhlIHNlbmF0ZS4gRm9yLAogICAgICAgICAgICAgICAgICAgIGluZGVlZCwgd2UgaGF2ZSBubyBwb3dlciB0byBkbyBvdGhlcndpc2U7IG5vciBoYXZlIHdlIHJlY2VpdmVkIGFueSBjb21taXNzaW9uCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGlzIGFzc2VtYmx5LCBzdWNoIGFzLCB3aGVuIGEgd2FyIGlzIHRlcm1pbmF0ZWQsIGlzIHVzdWFsbHksIGluIGFjY29yZGFuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBwcmVjZWRlbnRzIG9mIHlvdXIgYW5jZXN0b3JzLCBlbnRydXN0ZWQgdG8gdGhlIGFtYmFzc2Fkb3JzLiBOb3IsIGluCiAgICAgICAgICAgICAgICAgICAgZmFjdCwgaGF2ZSB3ZSByZWNlaXZlZCBhbnkgcGFydGljdWxhciBjb21taXNzaW9uIGZyb20gdGhlIHNlbmF0ZSBhdCBhbGwuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.12.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBXaGF0IHdpbGwgYmUgdGhlIGNhc2UgaWYgd2UgYXJlIG5vdCB0byBjb25mZXIgb3V0IG9mIHRoZSBjYW1wPyBXaGF0IGNhbXAgaXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBjaG9zZW4gZm9yIHRoZSBjb25mZXJlbmNlPyBIZSB3aWxsIG5ldmVyIGNvbWUgaW50byBvdXIgY2FtcDvigJRtdWNoCiAgICAgICAgICAgICAgICAgICAgbGVzcyB3aWxsIHdlIGdvIHRvIGhpcy4gSXQgZm9sbG93cywgdGhlbiwgdGhhdCBhbGwgZGVtYW5kcyBtdXN0IGJlIHJlY2VpdmVkIGFuZAogICAgICAgICAgICAgICAgICAgIHNlbnQgdG8gYW5kIGZybyBieSBtZWFucyBvZiBsZXR0ZXJzLiBXZSB0aGVuIHNoYWxsIGJlIGluIG91ciByZXNwZWN0aXZlIGNhbXBzLgogICAgICAgICAgICAgICAgICAgIE9uIGFsbCBoaXMgZGVtYW5kcyBJIHNoYWxsIGhhdmUgYnV0IG9uZSBvcGluaW9uOyBhbmQgd2hlbiBJIGhhdmUgc3RhdGVkIGl0IGhlcmUsCiAgICAgICAgICAgICAgICAgICAgaW4geW91ciBoZWFyaW5nLCB5b3UgbWF5IHRoaW5rIHRoYXQgSSBoYXZlIGdvbmUsIGFuZCB0aGF0IEkgaGF2ZSBjb21lIGJhY2sKICAgICAgICAgICAgICAgICAgICBhZ2Fpbi7igJRJIHNoYWxsIGhhdmUgZmluaXNoZWQgbXkgZW1iYXNzeS4gQXMgZmFyIGFzIG15IHNlbnRpbWVudHMgY2FuCiAgICAgICAgICAgICAgICAgICAgcHJldmFpbCwgSSBzaGFsbCByZWZlciBldmVyeSBkZW1hbmQgd2hpY2ggQW50b25pdXMgbWFrZXMgdG8gdGhlIHNlbmF0ZS4gRm9yLAogICAgICAgICAgICAgICAgICAgIGluZGVlZCwgd2UgaGF2ZSBubyBwb3dlciB0byBkbyBvdGhlcndpc2U7IG5vciBoYXZlIHdlIHJlY2VpdmVkIGFueSBjb21taXNzaW9uCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGlzIGFzc2VtYmx5LCBzdWNoIGFzLCB3aGVuIGEgd2FyIGlzIHRlcm1pbmF0ZWQsIGlzIHVzdWFsbHksIGluIGFjY29yZGFuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBwcmVjZWRlbnRzIG9mIHlvdXIgYW5jZXN0b3JzLCBlbnRydXN0ZWQgdG8gdGhlIGFtYmFzc2Fkb3JzLiBOb3IsIGluCiAgICAgICAgICAgICAgICAgICAgZmFjdCwgaGF2ZSB3ZSByZWNlaXZlZCBhbnkgcGFydGljdWxhciBjb21taXNzaW9uIGZyb20gdGhlIHNlbmF0ZSBhdCBhbGwuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kLCBhcyBJIHNoYWxsIHB1cnN1ZSB0aGlzIGxpbmUgb2YgY29uZHVjdCBpbiB0aGUgY291bmNpbCwgd2hlcmUgc29tZSwgYXMgSQogICAgICAgICAgICAgICAgICAgIGltYWdpbmUsIHdpbGwgb3Bwb3NlIGl0LCBoYXZlIEkgbm90IHJlYXNvbiB0byBmZWFyIHRoYXQgdGhlIGlnbm9yYW50IG1vYiBtYXkKICAgICAgICAgICAgICAgICAgICB0aGluayB0aGF0IHBlYWNlIGlzIGRlbGF5ZWQgYnkgbXkgbWVhbnM/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBTdXBwb3NlIG5vdyB0aGF0IHRoZSBuZXcgbGVnaW9ucyBkbyBub3QgZGlzYXBwcm92ZSBvZiBteSByZXNvbHV0aW9uLiBGb3IgSSBhbQogICAgICAgICAgICAgICAgICAgIHF1aXRlIHN1cmUgdGhhdCB0aGUgTWFydGlhbCBsZWdpb24gYW5kIHRoZSBmb3VydGggbGVnaW9uIHdpbGwgbm90IGFwcHJvdmUgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgd2hpY2ggaXMgY29udHJhcnkgdG8gZGlnbml0eSBhbmQgaG9ub3IuIFdoYXQgdGhlbj8gaGF2ZSB3ZSBubyByZWdhcmQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIG9waW5pb24gb2YgdGhlIHZldGVyYW5zPyBGb3IgZXZlbiB0aGV5IHRoZW1zZWx2ZXMgZG8gbm90IHdpc2ggdG8gYmUgZmVhcmVkCiAgICAgICAgICAgICAgICAgICAgYnkgdXMu4oCUU3RpbGwsIGhvdyB3aWxsIHRoZXkgcmVjZWl2ZSBteSBzZXZlcml0eT8gRm9yIHRoZXkgaGF2ZSBoZWFyZAogICAgICAgICAgICAgICAgICAgIG1hbnkgZmFsc2Ugc3RhdGVtZW50cyBjb25jZXJuaW5nIG1lOyB3aWNrZWQgbWVuIGhhdmUgY2lyY3VsYXRlZCBhbW9uZyB0aGVtIG1hbnkKICAgICAgICAgICAgICAgICAgICBjYWx1bW5pZXMgYWdhaW5zdCBtZS4gVGhlaXIgYWR2YW50YWdlIGluZGVlZCwgYXMgeW91IGFsbCBhcmUgbW9zdCBwZXJmZWN0CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIG9mLCBJIGhhdmUgYWx3YXlzIHByb21vdGVkIGJ5IG15IG9waW5pb24sIGJ5IG15IGF1dGhvcml0eSwgYW5kIGJ5IG15CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UuIEJ1dCB0aGV5IGJlbGlldmUgd2lja2VkIG1lbiwgdGhleSBiZWxpZXZlIHNlZGl0aW91cyBtZW4sIHRoZXkgYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBwYXJ0eS4gVGhleSBhcmUsIGluZGVlZCwgYnJhdmUgbWVuOyBidXQgYnkgcmVhc29uIG9mIHRoZWlyIGV4cGxvaXRzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBoYXZlIHBlcmZvcm1lZCBpbiB0aGUgY2F1c2Ugb2YgdGhlIGZyZWVkb20gb2YgdGhlIFJvbWFuIHBlb3BsZSBhbmQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYywgdGhleSBhcmUgdG9vIGZlcm9jaW91cyBhbmQgdG9vIG11Y2ggaW5jbGluZWQgdG8KICAgICAgICAgICAgICAgICAgICBicmluZyBhbGwgb3VyIGNvdW5zZWxzIHVuZGVyIHRoZSBzd2F5IG9mIHRoZWlyIG93biB2aW9sZW5jZS4gPG1pbGVzdG9uZSBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlaXIgZGVsaWJlcmF0ZSByZWZsZWN0aW9uIEkgYW0gbm90IGFmcmFpZCBvZiwgYnV0IEkKICAgICAgICAgICAgICAgICAgICBjb25mZXNzIEkgZHJlYWQgdGhlaXIgaW1wZXR1b3NpdHkuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.12.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBTdXBwb3NlIG5vdyB0aGF0IHRoZSBuZXcgbGVnaW9ucyBkbyBub3QgZGlzYXBwcm92ZSBvZiBteSByZXNvbHV0aW9uLiBGb3IgSSBhbQogICAgICAgICAgICAgICAgICAgIHF1aXRlIHN1cmUgdGhhdCB0aGUgTWFydGlhbCBsZWdpb24gYW5kIHRoZSBmb3VydGggbGVnaW9uIHdpbGwgbm90IGFwcHJvdmUgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgd2hpY2ggaXMgY29udHJhcnkgdG8gZGlnbml0eSBhbmQgaG9ub3IuIFdoYXQgdGhlbj8gaGF2ZSB3ZSBubyByZWdhcmQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIG9waW5pb24gb2YgdGhlIHZldGVyYW5zPyBGb3IgZXZlbiB0aGV5IHRoZW1zZWx2ZXMgZG8gbm90IHdpc2ggdG8gYmUgZmVhcmVkCiAgICAgICAgICAgICAgICAgICAgYnkgdXMu4oCUU3RpbGwsIGhvdyB3aWxsIHRoZXkgcmVjZWl2ZSBteSBzZXZlcml0eT8gRm9yIHRoZXkgaGF2ZSBoZWFyZAogICAgICAgICAgICAgICAgICAgIG1hbnkgZmFsc2Ugc3RhdGVtZW50cyBjb25jZXJuaW5nIG1lOyB3aWNrZWQgbWVuIGhhdmUgY2lyY3VsYXRlZCBhbW9uZyB0aGVtIG1hbnkKICAgICAgICAgICAgICAgICAgICBjYWx1bW5pZXMgYWdhaW5zdCBtZS4gVGhlaXIgYWR2YW50YWdlIGluZGVlZCwgYXMgeW91IGFsbCBhcmUgbW9zdCBwZXJmZWN0CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIG9mLCBJIGhhdmUgYWx3YXlzIHByb21vdGVkIGJ5IG15IG9waW5pb24sIGJ5IG15IGF1dGhvcml0eSwgYW5kIGJ5IG15CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UuIEJ1dCB0aGV5IGJlbGlldmUgd2lja2VkIG1lbiwgdGhleSBiZWxpZXZlIHNlZGl0aW91cyBtZW4sIHRoZXkgYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBwYXJ0eS4gVGhleSBhcmUsIGluZGVlZCwgYnJhdmUgbWVuOyBidXQgYnkgcmVhc29uIG9mIHRoZWlyIGV4cGxvaXRzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBoYXZlIHBlcmZvcm1lZCBpbiB0aGUgY2F1c2Ugb2YgdGhlIGZyZWVkb20gb2YgdGhlIFJvbWFuIHBlb3BsZSBhbmQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYywgdGhleSBhcmUgdG9vIGZlcm9jaW91cyBhbmQgdG9vIG11Y2ggaW5jbGluZWQgdG8KICAgICAgICAgICAgICAgICAgICBicmluZyBhbGwgb3VyIGNvdW5zZWxzIHVuZGVyIHRoZSBzd2F5IG9mIHRoZWlyIG93biB2aW9sZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['12.12.30'] = ""
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gcm9tIHRoZSBmaXJzdCBiZWdpbm5pbmcsIE8gY29uc2NyaXB0IGZhdGhlcnMsIG9mIHRoaXMgd2FyIHdoaWNoIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2VuIGFnYWluc3QgdGhvc2UgaW1waW91cyBhbmQgd2lja2VkIGNpdGl6ZW5zLCBJIGhhdmUgYmVlbiBhZnJhaWQgbGVzdAogICAgICAgICAgICAgICAgICAgIHRoZSBpbnNpZGlvdXMgcHJvcG9zYWxzIG9mIHBlYWNlIG1pZ2h0IGRhbXAgb3VyIHplYWwgZm9yIHRoZSByZWNvdmVyeSBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBsaWJlcnR5LiBGb3IgdGhlIG5hbWUgb2YgcGVhY2UgaXMgc3dlZXQ7IGFuZCB0aGUgdGhpbmcgaXRzZWxmIG5vdCBvbmx5IHBsZWFzYW50CiAgICAgICAgICAgICAgICAgICAgYnV0IHNhbHV0YXJ5LiBGb3IgYSBtYW4gc2VlbXMgdG8gaGF2ZSBubyBhZmZlY3Rpb24gZWl0aGVyIGZvciB0aGUgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGhlYXJ0aHMgb2YgdGhlIGNpdGl6ZW5zLCBub3IgZm9yIHRoZSBwdWJsaWMgbGF3cywgbm9yIGZvciB0aGUgcmlnaHRzIG9mIGZyZWVkb20sCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIGRlbGlnaHRlZCB3aXRoIGRpc2NvcmQgYW5kIHRoZSBzbGF1Z2h0ZXIgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgYW5kIHdpdGgKICAgICAgICAgICAgICAgICAgICBjaXZpbCB3YXI7IGFuZCBzdWNoIGEgbWFuIEkgdGhpbmsgb3VnaHQgdG8gYmUgZXJhc2VkIGZyb20gdGhlIGNhdGFsb2d1ZSBvZiBtZW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGV4dGVybWluYXRlZCBmcm9tIGFsbCBodW1hbiBzb2NpZXR5LiBUaGVyZWZvcmUsIGlmIFN1bGxhLCBvciBNYXJpdXMsIG9yIGJvdGgKICAgICAgICAgICAgICAgICAgICBvZiB0aGVtLCBvciBPY3Rhdml1cywgb3IgQ2lubmEsIG9yIFN1bGxhIGZvciB0aGUgc2Vjb25kIHRpbWUsIG9yIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIE1hcml1cyBhbmQgQ2FyYm8sIG9yIGlmIGFueSBvbmUgZWxzZSBoYXMgZXZlciB3aXNoZWQgZm9yIGNpdmlsIHdhciwgSSB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFuIGEgY2l0aXplbiBib3JuIGZvciB0aGUgZGV0ZXN0YXRpb24gb2YgdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoeSBzaG91bGQgSSBzcGVhayBvZiB0aGUgbGFzdCBtYW4gd2hvIHN0aXJyZWQgdXAgc3VjaAogICAgICAgICAgICAgICAgICAgIGEgd2FyOyBhIG1hbiB3aG9zZSBhY3RzLCBpbmRlZWQsIHdlIGRlZmVuZCwgd2hpbGUgd2UgYWRtaXQgdGhhdCB0aGUgYXV0aG9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSB3YXMgZGVzZXJ2ZWRseSBzbGFpbj8gTm90aGluZywgdGhlbiwgaXMgbW9yZSBpbmZhbW91cyB0aGFuIHN1Y2ggYSBjaXRpemVuCiAgICAgICAgICAgICAgICAgICAgb3Igc3VjaCBhIG1hbjsgaWYgaW5kZWVkIGhlIGRlc2VydmVzIHRvIGhlIGNvbnNpZGVyZWQgZWl0aGVyIGEgY2l0aXplbiBvciBhIG1hbiwKICAgICAgICAgICAgICAgICAgICB3aG8gaXMgZGVzaXJvdXMgb2YgY2l2aWwgd2FyLiA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3Igd2h5IHNob3VsZCBJIHNwZWFrIG9mIHRoZSBsYXN0IG1hbiB3aG8gc3RpcnJlZCB1cCBzdWNoCiAgICAgICAgICAgICAgICAgICAgYSB3YXI7IGEgbWFuIHdob3NlIGFjdHMsIGluZGVlZCwgd2UgZGVmZW5kLCB3aGlsZSB3ZSBhZG1pdCB0aGF0IHRoZSBhdXRob3Igb2YKICAgICAgICAgICAgICAgICAgICB0aGVtIHdhcyBkZXNlcnZlZGx5IHNsYWluPyBOb3RoaW5nLCB0aGVuLCBpcyBtb3JlIGluZmFtb3VzIHRoYW4gc3VjaCBhIGNpdGl6ZW4KICAgICAgICAgICAgICAgICAgICBvciBzdWNoIGEgbWFuOyBpZiBpbmRlZWQgaGUgZGVzZXJ2ZXMgdG8gaGUgY29uc2lkZXJlZCBlaXRoZXIgYSBjaXRpemVuIG9yIGEgbWFuLAogICAgICAgICAgICAgICAgICAgIHdobyBpcyBkZXNpcm91cyBvZiBjaXZpbCB3YXIuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZSBmaXJzdCB0aGluZyB0aGF0IHdlIGhhdmUgdG8gY29uc2lkZXIsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGlzIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICBwZWFjZSBjYW4gZXhpc3Qgd2l0aCBhbGwgbWVuLCBvciB3aGV0aGVyIHRoZXJlIGJlIGFueSB3YXIgaW5jYXBhYmxlIG9mCiAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxpYXRpb24sIGluIHdoaWNoIGFueSBhZ3JlZW1lbnQgb2YgcGVhY2UgaXMgb25seSBhIGNvdmVuYW50IG9mIHNsYXZlcnkuCiAgICAgICAgICAgICAgICAgICAgV2hldGhlciBTdWxsYSB3YXMgbWFraW5nIHBlYWNlIHdpdGggU2NpcGlvLCBvciB3aGV0aGVyIGhlIHdhcyBvbmx5IHByZXRlbmRpbmcgdG8KICAgICAgICAgICAgICAgICAgICBkbyBzbywgdGhlcmUgd2FzIG5vIHJlYXNvbiB0byBkZXNwYWlyLCBpZiBhbiBhZ3JlZW1lbnQgaGFkIGJlZW4gY29tZSB0bywgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5IG1pZ2h0IGhhdmUgYmVlbiBpbiBhIHRvbGVyYWJsZSBzdGF0ZS4gSWYgQ2lubmEgaGFkIGJlZW4gd2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIGFncmVlIHdpdGggT2N0YXZpdXMsIHRoZSBzYWZldHkgb2YgdGhlIGNpdGl6ZW5zIG1pZ2h0IHN0aWxsIGhhdmUgaGFkIGFuCiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlIGluIHRoZSByZXB1YmxpYy4gSW4gdGhlIGxhc3Qgd2FyLCBpZiBQb21wZWl1cyBoYWQgcmVsYXhlZCBzb21ld2hhdCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBkaWduaWZpZWQgZmlybW5lc3MsIGFuZCBDYWVzYXIgYSBnb29kIGRlYWwgb2YgaGlzIGFtYml0aW9uLCB3ZSBtaWdodCBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJvdGggYSBsYXN0aW5nIHBlYWNlLCBhbmQgc29tZSBjb25zaWRlcmFibGUgcmVtYWluZGVyIG9mIHRoZSByZXB1YmxpYy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgaXMgdGhlIHN0YXRlIG9mIHRoaW5ncyBub3c/IElzIGl0IHBvc3NpYmxlIGZvciB0aGVyZSB0byBiZSBwZWFjZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXM/IHdpdGggQ2Vuc29yaW51cywgYW5kIFZlbnRpZGl1cywgYW5kIFRyZWJlbGxpdXMsIGFuZCBCZXN0aWEsIGFuZAogICAgICAgICAgICAgICAgICAgIE51Y3VsYSwgYW5kIE11bmF0aXVzLCBhbmQgTGVudG8sIGFuZCBTYXhhPyBJIGhhdmUganVzdCBtZW50aW9uZWQgYSBmZXcgbmFtZXMgYXMKICAgICAgICAgICAgICAgICAgICBhIHNwZWNpbWVuOyB5b3UgeW91cnNlbHZlcyBzZWUgdGhlIGNvdW50bGVzcyBudW1iZXJzIGFuZCBzYXZhZ2UgbmF0dXJlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgdGhlIGhvc3QsLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4gQWRkLCBiZXNpZGVzIHRoZSB3cmVja3Mgb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXIncyBwYXJ0eSwgdGhlIEJhcmJhZSBDYXNzaWksIHRoZSBCYXJiYXRpaSwgdGhlIFBvbGxpb3M7IGFkZCB0aGUgY29tcGFuaW9ucwogICAgICAgICAgICAgICAgICAgIGFuZCBmZWxsb3ctZ2FtYmxlcnMgb2YgQW50b25pdXMsIEV1dHJhcGVsdXMsIGFuZCBNZWxhLCBhbmQgQ2FlbGl1cywgYW5kIFBvbnRpdXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIENyYXNzaWNpdXMsIGFuZCBUaXJvLCBhbmQgTXVzdGVsYSwgYW5kIFBldGlzc2l1czsgSSBzYXkgbm90aGluZyBvZiB0aGUgbWFpbgogICAgICAgICAgICAgICAgICAgIGJvZHksIEkgYW0gb25seSBuYW1pbmcgdGhlIGxlYWRlcnMuIFRvIHRoZXNlIGFyZSBhZGRlZCB0aGUgbGVnaW9uYXJpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQWxhdWRhIGFuZCB0aGUgcmVzdCBvZiB0aGUgdmV0ZXJhbnMsIHRoZSBzZW1pbmFyeSBvZiB0aGUganVkZ2VzIG9mIHRoZSB0aGlyZAogICAgICAgICAgICAgICAgICAgIGRlY3VyeTsgd2hvLCBoYXZpbmcgZXhoYXVzdGVkIHRoZWlyIG93biBlc3RhdGVzLCBhbmQgc3F1YW5kZXJlZCBhbGwgdGhlIGZydWl0cwogICAgICAgICAgICAgICAgICAgIG9mIENhZXNhcidzIGtpbmRuZXNzLCBoYXZlIG5vdyBzZXQgdGhlaXIgaGVhcnRzIG9uIG91ciBmb3J0dW5lcy4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBPaCB0aGF0IHRydXN0d29ydGh5IHJpZ2h0IGhhbmQgb2YgQW50b25pdXMsIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYXMgbXVyZGVyZWQgbWFueSBjaXRpemVucyEgT2ggdGhhdCByZWd1bGFybHkgcmF0aWZpZWQgYW5kIHNvbGVtbgogICAgICAgICAgICAgICAgICAgIHRyZWF0eSB3aGljaCB3ZSBtYWRlIHdpdGggdGhlIEFudG9uaWkhIFN1cmVseSBpZiBNYXJjdXMgc2hhbGwgYXR0ZW1wdCB0byB2aW9sYXRlCiAgICAgICAgICAgICAgICAgICAgaXQsIHRoZSBjb25zY2llbnRpb3VzIHBpZXR5IG9mIEx1Y2l1cyB3aWxsIGNhbGwgaGltIGJhY2sgZnJvbSBzdWNoIHdpY2tlZG5lc3MuCiAgICAgICAgICAgICAgICAgICAgSWYgdGhlcmUgaXMgYW55IHJvb20gYWxsb3dlZCB0aGVzZSBtZW4gaW4gdGhpcyBjaXR5LCB0aGVyZSB3aWxsIGJlIG5vIHJvb20gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdHkgaXRzZWxmLiBQbGFjZSBiZWZvcmUgeW91ciBleWVzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGUgY291bnRlbmFuY2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2UgbWVuLCBhbmQgZXNwZWNpYWxseSB0aGUgY291bnRlbmFuY2VzIG9mIHRoZSBBbnRvbmlpLiBNYXJrIHRoZWlyIGdhaXQsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbG9vaywgdGhlaXIgZmFjZSwgdGhlaXIgYXJyb2dhbmNlOyBtYXJrIHRob3NlIGZyaWVuZHMgb2YgdGhlaXJzIHdobyB3YWxrCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgc2lkZSwgd2hvIGZvbGxvdyB0aGVtLCB3aG8gcHJlY2VkZSB0aGVtLiBXaGF0IGJyZWF0aCByZWVraW5nIG9mIHdpbmUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpbnNvbGVuY2UsIHdoYXQgdGhyZWF0ZW5pbmcgbGFuZ3VhZ2UgZG8geW91IG5vdCB0aGluayB0aGVyZSB3aWxsIGJlIHRoZXJlPwogICAgICAgICAgICAgICAgICAgIFVubGVzcywgaW5kZWVkLCB0aGUgbWVyZSBmYWN0IG9mIHBlYWNlIGlzIHRvIHNvZnRlbiwgdGhlbSwgYW5kIHVubGVzcyB5b3UgZXhwZWN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCwgZXNwZWNpYWxseSB3aGVuIHRoZXkgY29tZSBpbnRvIHRoaXMgYXNzZW1ibHksIHRoZXkgd2lsbCBzYWx1dGUgZXZlcnkgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdXMga2luZGx5LCBhbmQgYWRkcmVzcyB1cyBjb3VydGVvdXNseS4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBZGQsIGJlc2lkZXMgdGhlIHdyZWNrcyBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhcidzIHBhcnR5LCB0aGUgQmFyYmFlIENhc3NpaSwgdGhlIEJhcmJhdGlpLCB0aGUgUG9sbGlvczsgYWRkIHRoZSBjb21wYW5pb25zCiAgICAgICAgICAgICAgICAgICAgYW5kIGZlbGxvdy1nYW1ibGVycyBvZiBBbnRvbml1cywgRXV0cmFwZWx1cywgYW5kIE1lbGEsIGFuZCBDYWVsaXVzLCBhbmQgUG9udGl1cywKICAgICAgICAgICAgICAgICAgICBhbmQgQ3Jhc3NpY2l1cywgYW5kIFRpcm8sIGFuZCBNdXN0ZWxhLCBhbmQgUGV0aXNzaXVzOyBJIHNheSBub3RoaW5nIG9mIHRoZSBtYWluCiAgICAgICAgICAgICAgICAgICAgYm9keSwgSSBhbSBvbmx5IG5hbWluZyB0aGUgbGVhZGVycy4gVG8gdGhlc2UgYXJlIGFkZGVkIHRoZSBsZWdpb25hcmllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBBbGF1ZGEgYW5kIHRoZSByZXN0IG9mIHRoZSB2ZXRlcmFucywgdGhlIHNlbWluYXJ5IG9mIHRoZSBqdWRnZXMgb2YgdGhlIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgZGVjdXJ5OyB3aG8sIGhhdmluZyBleGhhdXN0ZWQgdGhlaXIgb3duIGVzdGF0ZXMsIGFuZCBzcXVhbmRlcmVkIGFsbCB0aGUgZnJ1aXRzCiAgICAgICAgICAgICAgICAgICAgb2YgQ2Flc2FyJ3Mga2luZG5lc3MsIGhhdmUgbm93IHNldCB0aGVpciBoZWFydHMgb24gb3VyIGZvcnR1bmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBPaCB0aGF0IHRydXN0d29ydGh5IHJpZ2h0IGhhbmQgb2YgQW50b25pdXMsIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYXMgbXVyZGVyZWQgbWFueSBjaXRpemVucyEgT2ggdGhhdCByZWd1bGFybHkgcmF0aWZpZWQgYW5kIHNvbGVtbgogICAgICAgICAgICAgICAgICAgIHRyZWF0eSB3aGljaCB3ZSBtYWRlIHdpdGggdGhlIEFudG9uaWkhIFN1cmVseSBpZiBNYXJjdXMgc2hhbGwgYXR0ZW1wdCB0byB2aW9sYXRlCiAgICAgICAgICAgICAgICAgICAgaXQsIHRoZSBjb25zY2llbnRpb3VzIHBpZXR5IG9mIEx1Y2l1cyB3aWxsIGNhbGwgaGltIGJhY2sgZnJvbSBzdWNoIHdpY2tlZG5lc3MuCiAgICAgICAgICAgICAgICAgICAgSWYgdGhlcmUgaXMgYW55IHJvb20gYWxsb3dlZCB0aGVzZSBtZW4gaW4gdGhpcyBjaXR5LCB0aGVyZSB3aWxsIGJlIG5vIHJvb20gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdHkgaXRzZWxmLiBQbGFjZSBiZWZvcmUgeW91ciBleWVzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGUgY291bnRlbmFuY2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2UgbWVuLCBhbmQgZXNwZWNpYWxseSB0aGUgY291bnRlbmFuY2VzIG9mIHRoZSBBbnRvbmlpLiBNYXJrIHRoZWlyIGdhaXQsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbG9vaywgdGhlaXIgZmFjZSwgdGhlaXIgYXJyb2dhbmNlOyBtYXJrIHRob3NlIGZyaWVuZHMgb2YgdGhlaXJzIHdobyB3YWxrCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgc2lkZSwgd2hvIGZvbGxvdyB0aGVtLCB3aG8gcHJlY2VkZSB0aGVtLiBXaGF0IGJyZWF0aCByZWVraW5nIG9mIHdpbmUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpbnNvbGVuY2UsIHdoYXQgdGhyZWF0ZW5pbmcgbGFuZ3VhZ2UgZG8geW91IG5vdCB0aGluayB0aGVyZSB3aWxsIGJlIHRoZXJlPwogICAgICAgICAgICAgICAgICAgIFVubGVzcywgaW5kZWVkLCB0aGUgbWVyZSBmYWN0IG9mIHBlYWNlIGlzIHRvIHNvZnRlbiwgdGhlbSwgYW5kIHVubGVzcyB5b3UgZXhwZWN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCwgZXNwZWNpYWxseSB3aGVuIHRoZXkgY29tZSBpbnRvIHRoaXMgYXNzZW1ibHksIHRoZXkgd2lsbCBzYWx1dGUgZXZlcnkgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdXMga2luZGx5LCBhbmQgYWRkcmVzcyB1cyBjb3VydGVvdXNseS4gPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['13.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RG8geW91IG5vdCByZWNvbGxlY3QsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzISB3aGF0IHJlc29sdXRpb25zIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdXR0ZXJhbmNlIHRvIGFnYWluc3QgdGhvc2UgbWVuPyBZb3UgaGF2ZSByZXBlYWxlZCB0aGUgYWN0cyBvZiBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1czsgeW91IGhhdmUgdGFrZW4gZG93biBoaXMgbGF3czsgeW91IGhhdmUgdm90ZWQgdGhhdCB0aGV5IHdlcmUgY2FycmllZCBieQogICAgICAgICAgICAgICAgICAgIHZpb2xlbmNlLCBhbmQgd2l0aCBhIGRpc3JlZ2FyZCBvZiB0aGUgYXVzcGljZXM7IHlvdSBoYXZlIGNhbGxlZCBvdXQgdGhlIGxldmllcwogICAgICAgICAgICAgICAgICAgIHRocm91Z2hvdXQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIHByb25vdW5jZWQgdGhhdCBjb2xsZWFndWUgYW5kIGFsbHkgb2YgYWxsIHdpY2tlZG5lc3MgYSBwdWJsaWMgZW5lbXkuIFdoYXQgcGVhY2UKICAgICAgICAgICAgICAgICAgICBjYW4gdGhlcmUgYmUgd2l0aCB0aGlzIG1hbj8gRXZlbiBpZiBoZSB3ZXJlIGEgZm9yZWlnbiBlbmVteSwgc3RpbGwsIGFmdGVyIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zIGFzIGhhdmUgdGFrZW4gcGxhY2UsIGl0IHdvdWxkIGJlIHNjYXJjZWx5IHBvc3NpYmxlLCBieSBhbnkgbWVhbnMKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciwgdG8gaGF2ZSBwZWFjZS4gVGhvdWdoIHNlYXMgYW5kIG1vdW50YWlucywgYW5kIHZhc3QgcmVnaW9ucyBsYXkgYmV0d2VlbgogICAgICAgICAgICAgICAgICAgIHlvdSwgc3RpbGwgeW91IHdvdWxkIGhhdGUgc3VjaCBhIG1hbiB3aXRob3V0IHNlZWluZyBoaW0uIEJ1dCB0aGVzZSBtZW4gd2lsbAogICAgICAgICAgICAgICAgICAgIHN0aWNrIHRvIHlvdXIgZXllcywgYW5kIHdoZW4gdGhleSBjYW4sIHRvIHlvdXIgdmVyeSB0aHJvYXRzOyBmb3Igd2hhdCBmZW5jZXMKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHN0cm9uZyBlbm91Z2ggZm9yIHVzIHRvIHJlc3RyYWluIHNhdmFnZSBiZWFzdHM/4oCUT2gsIGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICByZXN1bHQgb2Ygd2FyIGlzIHVuY2VydGFpbi4gSXQgaXMgYXQgYWxsIGV2ZW50cyBpbiB0aGUgcG93ZXIgb2YgYnJhdmUgbWVuLCBzdWNoCiAgICAgICAgICAgICAgICAgICAgYXMgeW91IG91Z2h0IHRvIGJlLCB0byBkaXNwbGF5IHlvdXIgdmFsb3VyIChmb3IgY2VydGFpbmx5IGJyYXZlIG1lbiBjYW4gZG8KICAgICAgICAgICAgICAgICAgICB0aGF0KSwgYW5kIG5vdCB0byBmZWFyIHRoZSBjYXByaWNlIG9mIGZvcnR1bmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT47IHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlZCB0aGF0IGNvbGxlYWd1ZSBhbmQgYWxseSBvZiBhbGwgd2lja2VkbmVzcyBhIHB1YmxpYyBlbmVteS4gV2hhdCBwZWFjZQogICAgICAgICAgICAgICAgICAgIGNhbiB0aGVyZSBiZSB3aXRoIHRoaXMgbWFuPyBFdmVuIGlmIGhlIHdlcmUgYSBmb3JlaWduIGVuZW15LCBzdGlsbCwgYWZ0ZXIgc3VjaAogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMgYXMgaGF2ZSB0YWtlbiBwbGFjZSwgaXQgd291bGQgYmUgc2NhcmNlbHkgcG9zc2libGUsIGJ5IGFueSBtZWFucwogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyLCB0byBoYXZlIHBlYWNlLiBUaG91Z2ggc2VhcyBhbmQgbW91bnRhaW5zLCBhbmQgdmFzdCByZWdpb25zIGxheSBiZXR3ZWVuCiAgICAgICAgICAgICAgICAgICAgeW91LCBzdGlsbCB5b3Ugd291bGQgaGF0ZSBzdWNoIGEgbWFuIHdpdGhvdXQgc2VlaW5nIGhpbS4gQnV0IHRoZXNlIG1lbiB3aWxsCiAgICAgICAgICAgICAgICAgICAgc3RpY2sgdG8geW91ciBleWVzLCBhbmQgd2hlbiB0aGV5IGNhbiwgdG8geW91ciB2ZXJ5IHRocm9hdHM7IGZvciB3aGF0IGZlbmNlcwogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgc3Ryb25nIGVub3VnaCBmb3IgdXMgdG8gcmVzdHJhaW4gc2F2YWdlIGJlYXN0cz/igJRPaCwgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCBvZiB3YXIgaXMgdW5jZXJ0YWluLiBJdCBpcyBhdCBhbGwgZXZlbnRzIGluIHRoZSBwb3dlciBvZiBicmF2ZSBtZW4sIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhcyB5b3Ugb3VnaHQgdG8gYmUsIHRvIGRpc3BsYXkgeW91ciB2YWxvdXIgKGZvciBjZXJ0YWlubHkgYnJhdmUgbWVuIGNhbiBkbwogICAgICAgICAgICAgICAgICAgIHRoYXQpLCBhbmQgbm90IHRvIGZlYXIgdGhlIGNhcHJpY2Ugb2YgZm9ydHVuZS4gPC90cmFuc2xhdGlvbj4="
translation['13.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgc2luY2UgaXQgaXMgbm90IG9ubHkgY291cmFnZSBidXQgd2lzZG9tIGFsc28gd2hpY2ggaXMgZXhwZWN0ZWQgZnJvbSB0aGlzCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgKGFsdGhvdWdoIHRoZXNlIHF1YWxpdGllcyBhcHBlYXIgc2NhcmNlbHkgcG9zc2libGUgdG8gYmUgc2VwYXJhdGVkLCBzdGlsbAogICAgICAgICAgICAgICAgICAgIGxldCB1cyBzZXBhcmF0ZSB0aGVtIGhlcmUpLCBjb3VyYWdlIGJpZHMgdXMgZmlnaHQsIGluZmxhbWVzIG91ciBqdXN0IGhhdHJlZCwKICAgICAgICAgICAgICAgICAgICB1cmdlcyB1cyB0byB0aGUgY29uZmxpY3QsIHN1bW1vbnMgdXMgdG8gZGFuZ2VyLiBXaGF0IHNheXMgd2lzZG9tPyBTaGUgdXNlcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgY2F1dGlvdXMgY291bnNlbHMsIHNoZSBpcyBwcm92aWRlbnQgZm9yIHRoZSBmdXR1cmUsIHNoZSBpcyBpbiBldmVyeSByZXNwZWN0IG1vcmUKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZGVmZW5zaXZlLiBXaGF0IHRoZW4gZG9lcyBzaGUgdGhpbms/IGZvciB3ZSBtdXN0IG9iZXkgaGVyLCBhbmQgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgYm91bmQgdG8gY29uc2lkZXIgdGhhdCB0aGUgYmVzdCB0aGluZyB3aGljaCBpcyBhcnJhbmdlZCBpbiB0aGUgbW9zdCBwcnVkZW50CiAgICAgICAgICAgICAgICAgICAgbWFubmVyLiBJZiBzaGUgZW5qb2lucyBtZSB0byB0aGluayBub3RoaW5nIG9mIG1vcmUgY29uc2VxdWVuY2UgdGhhbiBteSBsaWZlLCBub3QKICAgICAgICAgICAgICAgICAgICB0byBmaWdodCBhdCB0aGUgcmlzayBvZiBteSBsaWZlLCBidXQgdG8gYXZvaWQgYWxsIGRhbmdlciwgSSB3aWxsIHRoZW4gYXNrIGhlcgogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgSSBhbSBhbHNvIHRvIGJlY29tZSBhIHNsYXZlIHdoZW4gSSBoYXZlIG9iZXllZCBhbGwgdGhlc2UgaW5qdW5jdGlvbj8gSWYKICAgICAgICAgICAgICAgICAgICBzaGUgc2F5cywgeWVzOyBJIGZvciBvbmUgd2lsbCBub3QgbGlzdGVuIHRvIHRoYXQgV2lzZG9tLCBob3dldmVyIGxlYXJuZWQgc2hlIG1heQogICAgICAgICAgICAgICAgICAgIGJlOyBidXQgaWYgdGhlIGFuc3dlciBpcywgUHJlc2VydmUgeW91ciBsaWZlIGFuZCB5b3VyIHNhZmV0eSwgUHJlc2VydmUgeW91cgogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUsIOKAnFByZXNlcnZlIHlvdXIgZXN0YXRlLCBzdGlsbCwgaG93ZXZlciwgY29uc2lkZXJpbmcgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIG9mIGxlc3MgdmFsdWUgdGhhbiBsaWJlcnR5OyB0aGVyZWZvcmUgZW5qb3kgdGhlc2UgdGhpbmdzIGlmIHlvdSBjYW4gZG8gc28KICAgICAgICAgICAgICAgICAgICBjb25zaXN0ZW50bHkgd2l0aCB0aGUgZnJlZWRvbSBvZiB0aGUgcmVwdWJsaWMsIGFuZCBkbyBub3QgYWJhbmRvbiBsaWJlcnR5IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW0sIGJ1dCBzYWNyaWZpY2UgdGhlbSBmb3IgbGliZXJ0eSwgYXMgcHJvb2ZzIG9mIHRoZSBpbmp1cnkgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBzdXN0YWluZWQ74oCd4oCUdGhlbiBJIHNoYWxsIHRoaW5rIHRoYXQgSSByZWFsbHkgYW0gbGlzdGVuaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHZvaWNlIG9mIFdpc2RvbSwgYW5kIEkgd2lsbCBvYmV5IGhlciBhcyBhIGdvZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXJlZm9yZSwgaWYgd2hlbiB3ZSBoYXZlIHJlY2VpdmVkIHRob3NlIG1lbiB3ZSBjYW4gc3RpbGwKICAgICAgICAgICAgICAgICAgICBiZSBmcmVlLCBsZXQgdXMgc3ViZHVlIG91ciBoYXRyZWQgdG8gdGhlbSwgYW5kIGVuZHVyZSBwZWFjZTsgYnV0IGlmIHRoZXJlIGNhbiBiZQogICAgICAgICAgICAgICAgICAgIG5vIHRyYW5xdWlsbGl0eSB3aGlsZSB0aG9zZSBtZW4gYXJlIGluIHNhZmV0eSwgdGhlbiBsZXQgdXMgcmVqb2ljZSB0aGF0IGFuCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgb2YgZmlnaHRpbmcgdGhlbSBpcyBwdXQgaW4gb3VyIHBvd2VyLiBGb3Igc28sIGVpdGhlciAodGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgY29ucXVlcmVkKSB3ZSBzaGFsbCBlbmpveSB0aGUgcmVwdWJsaWMgdmljdG9yaW91cywgb3IsIGlmIHdlIGJlIGRlZmVhdGVkLAogICAgICAgICAgICAgICAgICAgIChidXQgbWF5IDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPkp1cGl0ZXIgPC9zdXJuYW1lPjwvcGVyc05hbWU+IGF2ZXJ0IHRoYXQgZGlzYXN0ZXIpLAogICAgICAgICAgICAgICAgICAgIHdlIHNoYWxsIGxpdmUsIGlmIG5vdCB3aXRoIGFuIGFjdHVhbCBicmVhdGgsIGF0IGFsbCBldmVudHMgaW4gdGhlIHJlbm93biBvZiBvdXIKICAgICAgICAgICAgICAgICAgICB2YWxvci4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIGlmIHdoZW4gd2UgaGF2ZSByZWNlaXZlZCB0aG9zZSBtZW4gd2UgY2FuIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgZnJlZSwgbGV0IHVzIHN1YmR1ZSBvdXIgaGF0cmVkIHRvIHRoZW0sIGFuZCBlbmR1cmUgcGVhY2U7IGJ1dCBpZiB0aGVyZSBjYW4gYmUKICAgICAgICAgICAgICAgICAgICBubyB0cmFucXVpbGxpdHkgd2hpbGUgdGhvc2UgbWVuIGFyZSBpbiBzYWZldHksIHRoZW4gbGV0IHVzIHJlam9pY2UgdGhhdCBhbgogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5IG9mIGZpZ2h0aW5nIHRoZW0gaXMgcHV0IGluIG91ciBwb3dlci4gRm9yIHNvLCBlaXRoZXIgKHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGNvbnF1ZXJlZCkgd2Ugc2hhbGwgZW5qb3kgdGhlIHJlcHVibGljIHZpY3RvcmlvdXMsIG9yLCBpZiB3ZSBiZSBkZWZlYXRlZCwKICAgICAgICAgICAgICAgICAgICAoYnV0IG1heSA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlciA8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYXZlcnQgdGhhdCBkaXNhc3RlciksCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hhbGwgbGl2ZSwgaWYgbm90IHdpdGggYW4gYWN0dWFsIGJyZWF0aCwgYXQgYWxsIGV2ZW50cyBpbiB0aGUgcmVub3duIG9mIG91cgogICAgICAgICAgICAgICAgICAgIHZhbG9yLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlciA8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IE1hcmN1cyBMZXBpZHVzLCBoYXZpbmcgYmVlbiBhIHNlY29uZCB0aW1lIHN0eWxlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5JbXBlcmF0b3I8L2ZvcmVpZ24+LCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5Qb250aWZleCBNYXhpbXVzPC9mb3JlaWduPiwgYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG8gZGVzZXJ2ZWQgZXhjZWxsZW50bHkgd2VsbCBvZiB0aGUgcmVwdWJsaWMgaW4gdGhlIGxhc3QgY2l2aWwgd2FyLCBleGhvcnRzIHVzCiAgICAgICAgICAgICAgICAgICAgdG8gcGVhY2UuIE5vIG9uZSwgTyBjb25zY3JpcHQgZmF0aGVycywgaGFzIGdyZWF0ZXIgd2VpZ2h0IHdpdGggbWUgdGhhbiBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBMZXBpZHVzLCBib3RoIG9uIGFjY291bnQgb2YgaGlzIHBlcnNvbmFsIHZpcnR1ZXMsIGFuZCBieSByZWFzb24gb2YgdGhlIGRpZ25pdHkKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZmFtaWx5LiBUaGVyZSBhcmUgYWxzbyBwcml2YXRlIHJlYXNvbnMgd2hpY2ggaW5mbHVlbmNlIG1lLCBzdWNoIGFzIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgaGUgaGFzIGRvbmUgbWUsIGFuZCBzb21lIGtpbmRuZXNzZXMgd2hpY2ggSSBoYXZlIGRvbmUgaGltLiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3Qgb2YgaGlzIHNlcnZpY2VzIEkgY29uc2lkZXIgdG8gYmUgaGlzIGJlaW5nIG9mIHN1Y2ggYSBkaXNwb3NpdGlvbiBhcyBoZQogICAgICAgICAgICAgICAgICAgIGlzIHRvd2FyZCB0aGUgcmVwdWJsaWMsIHdoaWNoIGhhcyBhdCBhbGwgdGltZXMgYmVlbiBkZWFyZXIgdG8gbWUgdGhhbiBteSBsaWZlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoZW4gYnkgaGlzIGluZmx1ZW5jZSBoZSBpbmNsaW5lZAogICAgICAgICAgICAgICAgICAgIE1hZ251cyBQb21wZWl1cywgYSBtb3N0IGFkbWlyYWJsZSB5b3VuZyBtYW4sIHRoZSBzb24gb2Ygb25lIG9mIHRoZSBncmVhdGVzdCBvZgogICAgICAgICAgICAgICAgICAgIG1lbiwgdG8gcGVhY2UsIGFuZCB3aXRob3V0IGFybXMgcmVsZWFzZWQgdGhlIHJlcHVibGljIGZyb20gaW1taW5lbnQgZGFuZ2VyIG9mCiAgICAgICAgICAgICAgICAgICAgY2l2aWwgd2FyLCBieSBzbyBkb2luZyBoZSBsYWlkIG1lIHVuZGVyIGFzIGdyZWF0IG9ibGlnYXRpb25zIGFzIGl0IHdhcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwb3dlciBvZiBhbnkgbWFuIHRvIGRvLiBUaGVyZWZvcmUgSSBwcm9wb3NlZCB0byBkZWNyZWUgdG8gaGltIHRoZSBtb3N0IGFtcGxlCiAgICAgICAgICAgICAgICAgICAgaG9ub3JzIHRoYXQgd2VyZSBpbiBteSBwb3dlciwgaW4gd2hpY2ggeW91IGFncmVlZCB3aXRoIG1lOyBub3IgaGF2ZSBJIGNlYXNlZAogICAgICAgICAgICAgICAgICAgIGJvdGggdG8gdGhpbmsgYW5kIHNwZWFrIGluIHRoZSBoaWdoZXN0IHRlcm1zIG9mIGhpbS4gVGhlIHJlcHVibGljIGhhcyBNYXJjdXMKICAgICAgICAgICAgICAgICAgICBMZXBpZHVzIGJvdW5kIHRvIGl0IGJ5IG1hbnkgcGxlZGdlcy4gSGUgaXMgYSBtYW4gb2YgdGhlIGhpZ2hlc3QgcmFuaywgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgaG9ub3JzOyBoZSBoYXMgdGhlIG1vc3QgaG9ub3JhYmxlIHByaWVzdGhvb2QsIGFuZCBoYXMgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBudW1iZXJsZXNzIGRpc3RpbmN0aW9ucyBpbiB0aGUgY2l0eS4gVGhlcmUgYXJlIG1vbnVtZW50cyBvZiBoaW1zZWxmLCBhbmQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgYW5kIG9mIGhpcyBhbmNlc3RvcnM7IGhlIGhhcyBhIG1vc3QgZXhjZWxsZW50IHdpZmUsIGNoaWxkcmVuIHN1Y2ggYXMKICAgICAgICAgICAgICAgICAgICBhbnkgbWFuIG1pZ2h0IGRlc2lyZSwgYW4gYW1wbGUgZmFtaWx5IGVzdGF0ZSwgdW50YWludGVkIHdpdGggdGhlIGJsb29kIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVucy4gTm8gY2l0aXplbiBoYXMgYmVlbiBpbmp1cmVkIGJ5IGhpbTsgbWFueSBoYXZlIGJlZW4gZGVsaXZlcmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBtaXNlcnkgYnkgaGlzIGtpbmRuZXNzIGFuZCBwaXR5LiBTdWNoIGEgbWFuIGFuZCBzdWNoIGEgY2l0aXplbiBtYXkgaW5kZWVkCiAgICAgICAgICAgICAgICAgICAgZXJyIGluIGhpcyBvcGluaW9uLCBidXQgaXQgaXMgcXVpdGUgaW1wb3NzaWJsZSBmb3IgaGltIGluIGluY2xpbmF0aW9uIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdW5mcmllbmRseSB0byB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkltcGVyYXRvcjwvZm9yZWlnbj4sIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlBvbnRpZmV4IE1heGltdXM8L2ZvcmVpZ24+LCBhIG1hbgogICAgICAgICAgICAgICAgICAgIHdobyBkZXNlcnZlZCBleGNlbGxlbnRseSB3ZWxsIG9mIHRoZSByZXB1YmxpYyBpbiB0aGUgbGFzdCBjaXZpbCB3YXIsIGV4aG9ydHMgdXMKICAgICAgICAgICAgICAgICAgICB0byBwZWFjZS4gTm8gb25lLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBoYXMgZ3JlYXRlciB3ZWlnaHQgd2l0aCBtZSB0aGFuIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIExlcGlkdXMsIGJvdGggb24gYWNjb3VudCBvZiBoaXMgcGVyc29uYWwgdmlydHVlcywgYW5kIGJ5IHJlYXNvbiBvZiB0aGUgZGlnbml0eQogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBmYW1pbHkuIFRoZXJlIGFyZSBhbHNvIHByaXZhdGUgcmVhc29ucyB3aGljaCBpbmZsdWVuY2UgbWUsIHN1Y2ggYXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyBoZSBoYXMgZG9uZSBtZSwgYW5kIHNvbWUga2luZG5lc3NlcyB3aGljaCBJIGhhdmUgZG9uZSBoaW0uIEJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBvZiBoaXMgc2VydmljZXMgSSBjb25zaWRlciB0byBiZSBoaXMgYmVpbmcgb2Ygc3VjaCBhIGRpc3Bvc2l0aW9uIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgdG93YXJkIHRoZSByZXB1YmxpYywgd2hpY2ggaGFzIGF0IGFsbCB0aW1lcyBiZWVuIGRlYXJlciB0byBtZSB0aGFuIG15IGxpZmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBGb3Igd2hlbiBieSBoaXMgaW5mbHVlbmNlIGhlIGluY2xpbmVkCiAgICAgICAgICAgICAgICAgICAgTWFnbnVzIFBvbXBlaXVzLCBhIG1vc3QgYWRtaXJhYmxlIHlvdW5nIG1hbiwgdGhlIHNvbiBvZiBvbmUgb2YgdGhlIGdyZWF0ZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgbWVuLCB0byBwZWFjZSwgYW5kIHdpdGhvdXQgYXJtcyByZWxlYXNlZCB0aGUgcmVwdWJsaWMgZnJvbSBpbW1pbmVudCBkYW5nZXIgb2YKICAgICAgICAgICAgICAgICAgICBjaXZpbCB3YXIsIGJ5IHNvIGRvaW5nIGhlIGxhaWQgbWUgdW5kZXIgYXMgZ3JlYXQgb2JsaWdhdGlvbnMgYXMgaXQgd2FzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHBvd2VyIG9mIGFueSBtYW4gdG8gZG8uIFRoZXJlZm9yZSBJIHByb3Bvc2VkIHRvIGRlY3JlZSB0byBoaW0gdGhlIG1vc3QgYW1wbGUKICAgICAgICAgICAgICAgICAgICBob25vcnMgdGhhdCB3ZXJlIGluIG15IHBvd2VyLCBpbiB3aGljaCB5b3UgYWdyZWVkIHdpdGggbWU7IG5vciBoYXZlIEkgY2Vhc2VkCiAgICAgICAgICAgICAgICAgICAgYm90aCB0byB0aGluayBhbmQgc3BlYWsgaW4gdGhlIGhpZ2hlc3QgdGVybXMgb2YgaGltLiBUaGUgcmVwdWJsaWMgaGFzIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIExlcGlkdXMgYm91bmQgdG8gaXQgYnkgbWFueSBwbGVkZ2VzLiBIZSBpcyBhIG1hbiBvZiB0aGUgaGlnaGVzdCByYW5rLCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBob25vcnM7IGhlIGhhcyB0aGUgbW9zdCBob25vcmFibGUgcHJpZXN0aG9vZCwgYW5kIGhhcyByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIG51bWJlcmxlc3MgZGlzdGluY3Rpb25zIGluIHRoZSBjaXR5LiBUaGVyZSBhcmUgbW9udW1lbnRzIG9mIGhpbXNlbGYsIGFuZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCBhbmQgb2YgaGlzIGFuY2VzdG9yczsgaGUgaGFzIGEgbW9zdCBleGNlbGxlbnQgd2lmZSwgY2hpbGRyZW4gc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIGFueSBtYW4gbWlnaHQgZGVzaXJlLCBhbiBhbXBsZSBmYW1pbHkgZXN0YXRlLCB1bnRhaW50ZWQgd2l0aCB0aGUgYmxvb2Qgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zLiBObyBjaXRpemVuIGhhcyBiZWVuIGluanVyZWQgYnkgaGltOyBtYW55IGhhdmUgYmVlbiBkZWxpdmVyZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG1pc2VyeSBieSBoaXMga2luZG5lc3MgYW5kIHBpdHkuIFN1Y2ggYSBtYW4gYW5kIHN1Y2ggYSBjaXRpemVuIG1heSBpbmRlZWQKICAgICAgICAgICAgICAgICAgICBlcnIgaW4gaGlzIG9waW5pb24sIGJ1dCBpdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIGZvciBoaW0gaW4gaW5jbGluYXRpb24gdG8gYmUKICAgICAgICAgICAgICAgICAgICB1bmZyaWVuZGx5IHRvIHRoZSByZXB1YmxpYy4gPC90cmFuc2xhdGlvbj4="
translation['13.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJjdXMgTGVwaWR1cyBpcyBkZXNpcm91cyBvZiBwZWFjZS4gSGUgZG9lcyB3ZWxsIGVzcGVjaWFsbHkgaWYgaGUgY2FuIG1ha2Ugc3VjaAogICAgICAgICAgICAgICAgICAgIGEgcGVhY2UgYXMgaGUgbWFkZSBsYXRlbHksIG93aW5nIHRvIHdoaWNoIHRoZSByZXB1YmxpYyB3aWxsIGJlaG9sZCB0aGUgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgQ25hZXVzIFBvbXBlaXVzLCBhbmQgd2lsbCByZWNlaXZlIGhpbSBpbiBoZXIgYm9zb20gYW5kIGVtYnJhY2U7IGFuZCB3aWxsIHRoaW5rLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm90IGhlIGFsb25lLCBidXQgdGhhdCBzaGUgYWxzbyBpcyByZXN0b3JlZCB0byBoZXJzZWxmIHdpdGggaGltLiBUaGlzIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSByZWFzb24gd2h5IHlvdSBkZWNyZWVkIHRvIGhpbSBhIHN0YXR1ZSBpbiB0aGUgcm9zdHJhIHdpdGggYW4gaG9ub3JhYmxlCiAgICAgICAgICAgICAgICAgICAgaW5zY3JpcHRpb24sIGFuZCB3aHkgeW91IHZvdGVkIGhpbSBhIHRyaXVtcGggaW4gaGlzIGFic2VuY2UuIEZvciBhbHRob3VnaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtZWQgZ3JlYXQgZXhwbG9pdHMgaW4gd2FyLCBhbmQgc3VjaCBhcyB3ZWxsIGRlc2VydmVkIGEgdHJpdW1waCwgc3RpbGwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBtaWdodCBub3QgaGF2ZSBoYWQgdGhhdCBnaXZlbiB0byBoaW0gd2hpY2ggd2FzIG5vdCBnaXZlbiB0byBMdWNpdXMKICAgICAgICAgICAgICAgICAgICBBZW1pbGl1cywgbm9yIHRvIEFlbWlsaWFudXMgU2NpcGlvLCBub3IgdG8gdGhlIGZvcm1lciBBZnJpY2FudXMsIG5vciB0byBNYXJpdXMsCiAgICAgICAgICAgICAgICAgICAgbm9yIHRvIFBvbXBlaXVzLCB3aG8gaGFkIHRoZSBjb25kdWN0IG9mIGdyZWF0ZXIgd2FycyB0aGFuIGhlIGhhZCwgYnV0IGJlY2F1c2UgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgcHV0IGFuIGVuZCB0byBhIGNpdmlsIHdhciBpbiBwZXJmZWN0IHNpbGVuY2UsIHRoZSBmaXJzdCBtb21lbnQgdGhhdCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgcG93ZXIsIG9uIHRoYXQgYWNjb3VudCB5b3UgY29uZmVycmVkIG9uIGhpbSB0aGUgZ3JlYXRlc3QgaG9ub3JzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['13.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkRvIHlvdSB0aGluaywgdGhlbiwgTyBNYXJjdXMgTGVwaWR1cywgdGhhdCB0aGUgQW50b25paSB3aWxsIGJlIHRvIHRoZSByZXB1YmxpYwogICAgICAgICAgICAgICAgICAgIHN1Y2ggY2l0aXplbnMgYXMgc2hlIHdpbGwgZmluZCBQb21wZWl1cz8gSW4gdGhlIG9uZSB0aGVyZSBpcyBtb2Rlc3R5IGdyYXZpdHksCiAgICAgICAgICAgICAgICAgICAgbW9kZXJhdGlvbiwgaW50ZWdyaXR5OyBpbiB0aGVtIChhbmQgd2hlbiBJIHNwZWFrIG9mIHRoZW0gSSBkbyBub3QgbWVhbiB0byBvbWl0CiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHRoYXQgYmFuZCBvZiBwaXJhdGVzKSB0aGVyZSBpcyBsdXN0IGFuZCB3aWNrZWRuZXNzIGFuZCBzYXZhZ2UgYXVkYWNpdHkKICAgICAgICAgICAgICAgICAgICBjYXBhYmxlIG9mIGV2ZXJ5IGNyaW1lIEkgZW50cmVhdCBvZiB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMgd2hpY2ggb2YgeW91IGZhaWxzCiAgICAgICAgICAgICAgICAgICAgdG8gc2VlIHRoaXMgd2hpY2ggRm9ydHVuZSBoZXJzZWxmLCB3aG8gaXMgY2FsbGVkIGJsaW5kLCBzZWVzPyBGb3IsIHNhdmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBhY3RzIG9mIENhZXNhciwgd2hpY2ggd2UgbWFpbnRhaW4gZm9yIHRoZSBzYWtlIG9mIGhhcm1vbnksIGhpcyBvd24gaG91c2Ugd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIG9wZW4gdG8gUG9tcGVpdXMgYW5kIGhlIHdpbGwgcmVkZWVtIGl0IGZvciB0aGUgc2FtZSBzdW0gZm9yIHdoaWNoIEFudG9uaXVzCiAgICAgICAgICAgICAgICAgICAgYm91Z2h0IGl0LiBZZXMsIEkgc2F5IHRoZSBzb24gb2YgQ25hZXVzIFBvbXBlaXVzIHdpbGwgYnV5IGJhY2sgaGlzIGhvdXNlLiBPCiAgICAgICAgICAgICAgICAgICAgbWVsYW5jaG9seSBjaXJjdW1zdGFuY2UhIEJ1dCB0aGVzZSB0aGluZ3MgaGF2ZSBiZWVuIGFscmVhZHkgbGFtZW50ZWQgbG9uZyBhbmQKICAgICAgICAgICAgICAgICAgICBiaXR0ZXJseSBlbm91Z2guIFlvdSBoYXZlIHZvdGVkIGEgc3VtIG9mIG1vbmV5IHRvIENuYWV1cyBQb21wZWl1cywgZXF1YWwgdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhpcyBjb25xdWVyaW5nIGVuZW15IGhhZCBhcHByb3ByaWF0ZWQgdG8gaGltc2VsZiBvZiBoaXMgZmF0aGVyJ3MgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZGlzdHJpYnV0aW9uIG9mIGhpcyBib290eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgSSBjbGFpbQogICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24gdG8gbWFuYWdlIHRoaXMgZGlzdHJpYnV0aW9uIG15c2VsZiwgYXMgZHVlIHRvIG15IGNvbm5lY3Rpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgaW50aW1hY3kgd2l0aCBoaXMgZmF0aGVyLiBIZSB3aWxsIGJ1eSBiYWNrIHRoZSB2aWxsYXMsIHRoZSBob3VzZXMsIGFuZCBzb21lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGVzdGF0ZXMgaW4gdGhlIGNpdHkgd2hpY2ggQW50b25pdXMgaXMgaW4gcG9zc2Vzc2lvbiBvZi4gRm9yLCBhcyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgc2lsdmVyIHBsYXRlLCB0aGUgZ2FybWVudHMsIHRoZSBmdXJuaXR1cmUsIGFuZCB0aGUgd2luZSB3aGljaCB0aGF0IGdsdXR0b24gaGFzCiAgICAgICAgICAgICAgICAgICAgbWFkZSBhd2F5IHdpdGgsIHRob3NlIHRoaW5ncyBoZSB3aWxsIGxvc2Ugd2l0aG91dCBmb3JmZWl0aW5nIGhpcyBlcXVhbmltaXR5LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzE3MjciIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBGaXJtaWFuIHZpbGxhcyBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlciBmcm9tIERvbGFiZWxsYTsgdGhlIFR1c2N1bGFuIHZpbGxhIGhlIHdpbGwgYWxzbyByZWNvdmVyIGZyb20gQW50b25pdXMuCiAgICAgICAgICAgICAgICAgICAgQW5kIHRoZXNlIEFuc2VycyB3aG8gYXJlIGpvaW5pbmcgaW4gdGhlIGF0dGFjayBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+IGFuZCBpbiB0aGUgYmxvY2thZGUgb2YgRGVjaW11cwogICAgICAgICAgICAgICAgICAgIEJydXR1cyB3aWxsIGJlIGRyaXZlbiBmcm9tIGhpcyBGYWxlcm5pYW4gdmlsbGEuIFRoZXJlIGFyZSBtYW55IG90aGVycywgcGVyaGFwcywKICAgICAgICAgICAgICAgICAgICB3aG8gd2lsbCBiZSBtYWRlIHRvIGRpc2dvcmdlIHRoZWlyIHBsdW5kZXIsIGJ1dCB0aGVpciBuYW1lcyBlc2NhcGUgbXkgbWVtb3J5LiBJCiAgICAgICAgICAgICAgICAgICAgc2F5LCB0b28sIHRoYXQgdGhvc2UgbWVuIHdobyBhcmUgbm90IGluIHRoZSBudW1iZXIgb2Ygb3VyIGVuZW1pZXMsIHdpbGwgYmUgbWFkZQogICAgICAgICAgICAgICAgICAgIHRvIHJlc3RvcmUgdGhlIHBvc3Nlc3Npb25zIG9mIFBvbXBlaXVzIHRvIGhpcyBzb24gZm9yIHRoZSBwcmljZSBhdCB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYm91Z2h0IHRoZW0uIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+IEl0IHdhcyB0aGUgYWN0IG9mIGEgc3VmZmljaWVudGx5CiAgICAgICAgICAgICAgICAgICAgcmFzaCBtYW4sIG5vdCB0byBzYXkgYW4gYXVkYWNpb3VzIG9uZSwgdG8gdG91Y2ggYSBzaW5nbGUgcGFydGljbGUgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OyBidXQgd2hvIHdpbGwgaGF2ZSB0aGUgZmFjZSB0byBlbmRlYXZvciB0byByZXRhaW4gaXQsIHdoZW4gaXRzIG1vc3QKICAgICAgICAgICAgICAgICAgICBpbGx1c3RyaW91cyBvd25lciBpcyByZXN0b3JlZCB0byBoaXMgY291bnRyeT8gV2lsbCBub3QgdGhhdCBtYW4gcmVzdG9yZSBoaXMKICAgICAgICAgICAgICAgICAgICBwbHVuZGVyLCB3aG8sIGVuZm9sZGluZyB0aGUgcGF0cmltb255IG9mIGhpcyBtYXN0ZXIgaW4gaGlzIGVtYnJhY2UsIGNsaW5naW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHRyZWFzdXJlIGxpa2UgYSBkcmFnb24sIHRoZSBzbGF2ZSBvZiBQb21wZWl1cywgdGhlIGZyZWVkbWFuIG9mIENhZXNhciwgaGFzCiAgICAgICAgICAgICAgICAgICAgc2VpemVkIHVwb24gaGlzIGVzdGF0ZXMgaW4gdGhlIEx1Y2FuaWFuIGRpc3RyaWN0PyBBbmQgYXMgZm9yIHRob3NlIHNldmVuIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICBtaWxsaW9ucyBvZiBzZXN0ZXJjZXMgd2hpY2ggeW91LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBwcm9taXNlZCB0byB0aGUgeW91bmcgbWFuLAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2lsbCBiZSByZWNvdmVyZWQgaW4gc3VjaCBhIG1hbm5lciB0aGF0IHRoZSBzb24gb2YgQ25hZXVzIFBvbXBlaXVzIHdpbGwKICAgICAgICAgICAgICAgICAgICBhcHBlYXIgdG8gaGF2ZSBiZWVuIGVzdGFibGlzaGVkIGJ5IHlvdSBpbiBoaXMgcGF0cmltb255LiBUaGlzIGlzIHdoYXQgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIG11c3QgZG87IHRoZSBSb21hbiBwZW9wbGUgd2lsbCBkbyB0aGUgcmVzdCB3aXRoIHJlc3BlY3QgdG8gdGhhdCBmYW1pbHkgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgYXQgb25lIHRpbWUgb25lIG9mIHRoZSBtb3N0IGhvbm9yYWJsZSBpdCBldmVyIHNhdy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBpdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgaW52ZXN0IGhpbSB3aXRoIGhpcyBmYXRoZXIncyBob25vciBhcyBhbiBhdWd1ciwgZm9yIHdoaWNoIHJhbmsgSSB3aWxsIG5vbWluYXRlCiAgICAgICAgICAgICAgICAgICAgaGltIGFuZCBwcm9tb3RlIGhpcyBlbGVjdGlvbiwgaW4gb3JkZXIgdGhhdCBJIG1heSByZXN0b3JlIHRvIHRoZSBzb24gd2hhdCBJCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSB0aGUgZmF0aGVyLiBXaGljaCBvZiB0aGVzZSBtZW4gd2lsbCB0aGUgUm9tYW4gcGVvcGxlIG1vc3QKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nbHkgc2FuY3Rpb24gYXMgdGhlIGF1Z3VyIG9mIHRoZSBhbGwgcG93ZXJmdWwgYW5kIGFsbCBncmVhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjwvcGVyc05hbWU+LCB3aG9zZSBpbnRlcnByZXRlcnMgYW5kIG1lc3NlbmdlcnMgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gYXBwb2ludGVkLOKAlFBvbXBlaXVzIG9yIEFudG9uaXVzPyBJdCBzZWVtcyBpbmRlZWQsIHRvIG1lLAogICAgICAgICAgICAgICAgICAgIHRoYXQgRm9ydHVuZSBoYXMgbWFuYWdlZCB0aGlzIGJ5IHRoZSBkaXZpbmUgYWlkIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGF0LAogICAgICAgICAgICAgICAgICAgIGxlYXZpbmcgdGhlIGFjdHMgb2YgQ2Flc2FyIGZpcm1seSByYXRpZmllZCwgdGhlIHNvbiBvZiBDbmFldXMgUG9tcGVpdXMgbWlnaHQKICAgICAgICAgICAgICAgICAgICBzdGlsbCBiZSBhYmxlIHRvIHJlY292ZXIgdGhlIGRpZ25pdGllcyBhbmQgZm9ydHVuZXMgb2YgaGlzIGZhdGhlci4gPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgY2xhaW0KICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9uIHRvIG1hbmFnZSB0aGlzIGRpc3RyaWJ1dGlvbiBteXNlbGYsIGFzIGR1ZSB0byBteSBjb25uZWN0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIGludGltYWN5IHdpdGggaGlzIGZhdGhlci4gSGUgd2lsbCBidXkgYmFjayB0aGUgdmlsbGFzLCB0aGUgaG91c2VzLCBhbmQgc29tZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBlc3RhdGVzIGluIHRoZSBjaXR5IHdoaWNoIEFudG9uaXVzIGlzIGluIHBvc3Nlc3Npb24gb2YuIEZvciwgYXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNpbHZlciBwbGF0ZSwgdGhlIGdhcm1lbnRzLCB0aGUgZnVybml0dXJlLCBhbmQgdGhlIHdpbmUgd2hpY2ggdGhhdCBnbHV0dG9uIGhhcwogICAgICAgICAgICAgICAgICAgIG1hZGUgYXdheSB3aXRoLCB0aG9zZSB0aGluZ3MgaGUgd2lsbCBsb3NlIHdpdGhvdXQgZm9yZmVpdGluZyBoaXMgZXF1YW5pbWl0eS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMxNzI3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBGaXJtaWFuIHZpbGxhcyBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlciBmcm9tIERvbGFiZWxsYTsgdGhlIFR1c2N1bGFuIHZpbGxhIGhlIHdpbGwgYWxzbyByZWNvdmVyIGZyb20gQW50b25pdXMuCiAgICAgICAgICAgICAgICAgICAgQW5kIHRoZXNlIEFuc2VycyB3aG8gYXJlIGpvaW5pbmcgaW4gdGhlIGF0dGFjayBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4gYW5kIGluIHRoZSBibG9ja2FkZSBvZiBEZWNpbXVzCiAgICAgICAgICAgICAgICAgICAgQnJ1dHVzIHdpbGwgYmUgZHJpdmVuIGZyb20gaGlzIEZhbGVybmlhbiB2aWxsYS4gVGhlcmUgYXJlIG1hbnkgb3RoZXJzLCBwZXJoYXBzLAogICAgICAgICAgICAgICAgICAgIHdobyB3aWxsIGJlIG1hZGUgdG8gZGlzZ29yZ2UgdGhlaXIgcGx1bmRlciwgYnV0IHRoZWlyIG5hbWVzIGVzY2FwZSBteSBtZW1vcnkuIEkKICAgICAgICAgICAgICAgICAgICBzYXksIHRvbywgdGhhdCB0aG9zZSBtZW4gd2hvIGFyZSBub3QgaW4gdGhlIG51bWJlciBvZiBvdXIgZW5lbWllcywgd2lsbCBiZSBtYWRlCiAgICAgICAgICAgICAgICAgICAgdG8gcmVzdG9yZSB0aGUgcG9zc2Vzc2lvbnMgb2YgUG9tcGVpdXMgdG8gaGlzIHNvbiBmb3IgdGhlIHByaWNlIGF0IHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBib3VnaHQgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['13.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gSXQgd2FzIHRoZSBhY3Qgb2YgYSBzdWZmaWNpZW50bHkKICAgICAgICAgICAgICAgICAgICByYXNoIG1hbiwgbm90IHRvIHNheSBhbiBhdWRhY2lvdXMgb25lLCB0byB0b3VjaCBhIHNpbmdsZSBwYXJ0aWNsZSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk7IGJ1dCB3aG8gd2lsbCBoYXZlIHRoZSBmYWNlIHRvIGVuZGVhdm9yIHRvIHJldGFpbiBpdCwgd2hlbiBpdHMgbW9zdAogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIG93bmVyIGlzIHJlc3RvcmVkIHRvIGhpcyBjb3VudHJ5PyBXaWxsIG5vdCB0aGF0IG1hbiByZXN0b3JlIGhpcwogICAgICAgICAgICAgICAgICAgIHBsdW5kZXIsIHdobywgZW5mb2xkaW5nIHRoZSBwYXRyaW1vbnkgb2YgaGlzIG1hc3RlciBpbiBoaXMgZW1icmFjZSwgY2xpbmdpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgdHJlYXN1cmUgbGlrZSBhIGRyYWdvbiwgdGhlIHNsYXZlIG9mIFBvbXBlaXVzLCB0aGUgZnJlZWRtYW4gb2YgQ2Flc2FyLCBoYXMKICAgICAgICAgICAgICAgICAgICBzZWl6ZWQgdXBvbiBoaXMgZXN0YXRlcyBpbiB0aGUgTHVjYW5pYW4gZGlzdHJpY3Q/IEFuZCBhcyBmb3IgdGhvc2Ugc2V2ZW4gaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIG1pbGxpb25zIG9mIHNlc3RlcmNlcyB3aGljaCB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHByb21pc2VkIHRvIHRoZSB5b3VuZyBtYW4sCiAgICAgICAgICAgICAgICAgICAgdGhleSB3aWxsIGJlIHJlY292ZXJlZCBpbiBzdWNoIGEgbWFubmVyIHRoYXQgdGhlIHNvbiBvZiBDbmFldXMgUG9tcGVpdXMgd2lsbAogICAgICAgICAgICAgICAgICAgIGFwcGVhciB0byBoYXZlIGJlZW4gZXN0YWJsaXNoZWQgYnkgeW91IGluIGhpcyBwYXRyaW1vbnkuIFRoaXMgaXMgd2hhdCB0aGUgc2VuYXRlCiAgICAgICAgICAgICAgICAgICAgbXVzdCBkbzsgdGhlIFJvbWFuIHBlb3BsZSB3aWxsIGRvIHRoZSByZXN0IHdpdGggcmVzcGVjdCB0byB0aGF0IGZhbWlseSB3aGljaCB3YXMKICAgICAgICAgICAgICAgICAgICBhdCBvbmUgdGltZSBvbmUgb2YgdGhlIG1vc3QgaG9ub3JhYmxlIGl0IGV2ZXIgc2F3LiBJbiB0aGUgZmlyc3QgcGxhY2UsIGl0IHdpbGwKICAgICAgICAgICAgICAgICAgICBpbnZlc3QgaGltIHdpdGggaGlzIGZhdGhlcidzIGhvbm9yIGFzIGFuIGF1Z3VyLCBmb3Igd2hpY2ggcmFuayBJIHdpbGwgbm9taW5hdGUKICAgICAgICAgICAgICAgICAgICBoaW0gYW5kIHByb21vdGUgaGlzIGVsZWN0aW9uLCBpbiBvcmRlciB0aGF0IEkgbWF5IHJlc3RvcmUgdG8gdGhlIHNvbiB3aGF0IEkKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBmcm9tIHRoZSBmYXRoZXIuIFdoaWNoIG9mIHRoZXNlIG1lbiB3aWxsIHRoZSBSb21hbiBwZW9wbGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHdpbGxpbmdseSBzYW5jdGlvbiBhcyB0aGUgYXVndXIgb2YgdGhlIGFsbCBwb3dlcmZ1bCBhbmQgYWxsIGdyZWF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjwvcGVyc05hbWU+LCB3aG9zZSBpbnRlcnByZXRlcnMgYW5kIG1lc3NlbmdlcnMgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gYXBwb2ludGVkLOKAlFBvbXBlaXVzIG9yIEFudG9uaXVzPyBJdCBzZWVtcyBpbmRlZWQsIHRvIG1lLAogICAgICAgICAgICAgICAgICAgIHRoYXQgRm9ydHVuZSBoYXMgbWFuYWdlZCB0aGlzIGJ5IHRoZSBkaXZpbmUgYWlkIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGF0LAogICAgICAgICAgICAgICAgICAgIGxlYXZpbmcgdGhlIGFjdHMgb2YgQ2Flc2FyIGZpcm1seSByYXRpZmllZCwgdGhlIHNvbiBvZiBDbmFldXMgUG9tcGVpdXMgbWlnaHQKICAgICAgICAgICAgICAgICAgICBzdGlsbCBiZSBhYmxlIHRvIHJlY292ZXIgdGhlIGRpZ25pdGllcyBhbmQgZm9ydHVuZXMgb2YgaGlzIGZhdGhlci4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkp1cGl0ZXI8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['13.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBJIHRoaW5rLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHdlIG91Z2h0IG5vdCB0byBwYXNzIG92ZXIgdGhhdCBmYWN0IGVpdGhlcgogICAgICAgICAgICAgICAgICAgIGluIHNpbGVuY2Us4oCUdGhhdCB0aG9zZSBpbGx1c3RyaW91cyBtZW4gd2hvIGFyZSBhY3RpbmcgYXMgYW1iYXNzYWRvcnMsCiAgICAgICAgICAgICAgICAgICAgTHVjaXVzIFBhdWxsdXMsIFF1aW50dXMgVGhlcm11cywgYW5kIENhaXVzIEZhbm5pdXMsIHdob3NlIGluY2xpbmF0aW9ucyB0b3dhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMgeW91IGFyZSB0aG9yb3VnaGx5IGFjcXVhaW50ZWQgd2l0aCwgYW5kIGFsc28gd2l0aCB0aGUgY29uc3RhbmN5IGFuZAogICAgICAgICAgICAgICAgICAgIGZpcm1uZXNzIG9mIHRoYXQgZmF2b3JhYmxlIGluY2xpbmF0aW9uLCByZXBvcnQgdGhhdCB0aGV5IHR1cm5lZCBhc2lkZSB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+IGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgICAgICAgICAgICAgIGNvbmZlcnJpbmcgd2l0aCBQb21wZWl1cywgYW5kIHRoYXQgdGhleSBmb3VuZCBoaW0gaW4gYSBkaXNwb3NpdGlvbiB2ZXJ5IG11Y2gKICAgICAgICAgICAgICAgICAgICBpbmNsaW5lZCB0byBnbyB3aXRoIGhpcyB0cm9vcHMgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LCBpZiBoZSBoYWQgbm90IGJlZW4gYWZyYWlkIG9mIG9mZmVuZGluZyB0aGUgbWluZHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdmV0ZXJhbnMuIEJ1dCBoZSBpcyBhIHRydWUgc29uIG9mIHRoYXQgZmF0aGVyIHdobyBkaWQgcXVpdGUgYXMgbWFueSB0aGluZ3MKICAgICAgICAgICAgICAgICAgICB3aXNlbHkgYXMgaGUgZGlkIGJyYXZlbHkuIFRoZXJlZm9yZSB5b3UgcGVyY2VpdmUgdGhhdCBoaXMgY291cmFnZSB3YXMgcXVpdGUKICAgICAgICAgICAgICAgICAgICByZWFkeSwgYW5kIHRoYXQgcHJ1ZGVuY2Ugd2FzIG5vdCB3YW50aW5nIHRvIGhpbS4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICAgICAgICAgICAgICBjb25mZXJyaW5nIHdpdGggUG9tcGVpdXMsIGFuZCB0aGF0IHRoZXkgZm91bmQgaGltIGluIGEgZGlzcG9zaXRpb24gdmVyeSBtdWNoCiAgICAgICAgICAgICAgICAgICAgaW5jbGluZWQgdG8gZ28gd2l0aCBoaXMgdHJvb3BzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiwgaWYgaGUgaGFkIG5vdCBiZWVuIGFmcmFpZCBvZiBvZmZlbmRpbmcgdGhlIG1pbmRzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHZldGVyYW5zLiBCdXQgaGUgaXMgYSB0cnVlIHNvbiBvZiB0aGF0IGZhdGhlciB3aG8gZGlkIHF1aXRlIGFzIG1hbnkgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgd2lzZWx5IGFzIGhlIGRpZCBicmF2ZWx5LiBUaGVyZWZvcmUgeW91IHBlcmNlaXZlIHRoYXQgaGlzIGNvdXJhZ2Ugd2FzIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgcmVhZHksIGFuZCB0aGF0IHBydWRlbmNlIHdhcyBub3Qgd2FudGluZyB0byBoaW0uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoaXMsIHRvbywgaXMgd2hhdCBNYXJjdXMgTGVwaWR1cyBvdWdodCB0byB0YWtlIGNhcmUgb2Ys4oCUbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYXBwZWFyIHRvIGFjdCBpbiBhbnkgcmVzcGVjdCB3aXRoIG1vcmUgYXJyb2dhbmNlIHRoYW4gc3VpdHMgaGlzIGNoYXJhY3Rlci4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaWYgaGUgYWxhcm1zIHVzIHdpdGggaGlzIGFybXkgaGUgaXMKICAgICAgICAgICAgICAgICAgICBmb3JnZXR0aW5nIHRoYXQgdGhhdCBhcm15IGJlbG9uZ3MgdG8gdGhlIHNlbmF0ZSwgYW5kIHRvIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSByZXB1YmxpYywgbm90IHRvIGhpbXNlbGYuIOKAnEJ1dCBoZSBoYXMgdGhlIHBvd2VyIHRvIHVzZSBpdCBhcwogICAgICAgICAgICAgICAgICAgIGlmIGl0IHdlcmUgaGlzIG93bi7igJ0gV2hhdCB0aGVuPyBEb2VzIGl0IGJlY29tZSB2aXJ0dW91cyBtZW4gdG8gZG8KICAgICAgICAgICAgICAgICAgICBldmVyeSB0aGluZyB3aGljaCBpdCBpcyBpbiB0aGVpciBwb3dlciB0byBkbz8gU3VwcG9zZSBpdCB0byBiZSBhIGJhc2UgdGhpbmc/CiAgICAgICAgICAgICAgICAgICAgU3VwcG9zZSBpdCB0byBiZSBhIG1pc2NoaWV2b3VzIHRoaW5nPyBTdXBwb3NlIGl0IGJlIGFic29sdXRlbHkgdW5sYXdmdWwgdG8gZG8KICAgICAgICAgICAgICAgICAgICBpdD8gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGlmIGhlIGFsYXJtcyB1cyB3aXRoIGhpcyBhcm15IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZm9yZ2V0dGluZyB0aGF0IHRoYXQgYXJteSBiZWxvbmdzIHRvIHRoZSBzZW5hdGUsIGFuZCB0byB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgcmVwdWJsaWMsIG5vdCB0byBoaW1zZWxmLiDigJxCdXQgaGUgaGFzIHRoZSBwb3dlciB0byB1c2UgaXQgYXMKICAgICAgICAgICAgICAgICAgICBpZiBpdCB3ZXJlIGhpcyBvd24u4oCdIFdoYXQgdGhlbj8gRG9lcyBpdCBiZWNvbWUgdmlydHVvdXMgbWVuIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgdGhpbmcgd2hpY2ggaXQgaXMgaW4gdGhlaXIgcG93ZXIgdG8gZG8/IFN1cHBvc2UgaXQgdG8gYmUgYSBiYXNlIHRoaW5nPwogICAgICAgICAgICAgICAgICAgIFN1cHBvc2UgaXQgdG8gYmUgYSBtaXNjaGlldm91cyB0aGluZz8gU3VwcG9zZSBpdCBiZSBhYnNvbHV0ZWx5IHVubGF3ZnVsIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgaXQ/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgY2FuIGJlIG1vcmUgYmFzZSwgb3IgbW9yZSBzaGFtZWZ1bCwgb3IgbW9yZSB1dHRlcmx5IHVuYmVjb21pbmcsIHRoYW4gdG8KICAgICAgICAgICAgICAgICAgICBsZWFkIGFuIGFybXkgYWdhaW5zdCB0aGUgc2VuYXRlLCBhZ2FpbnN0IG9uZSdzIGZlbGxvdy1jaXRpemVucywgYWdhaW5zdCBvbmUncwogICAgICAgICAgICAgICAgICAgIGNvdW50cnk/IE9yIHdoYXQgY2FuIGRlc2VydmUgZ3JlYXRlciBibGFtZSB0aGFuIGRvaW5nIHRoYXQgd2hpY2ggaXMgdW5sYXdmdWwuCiAgICAgICAgICAgICAgICAgICAgQnV0IGl0IGlzIG5vdCBsYXdmdWwgZm9yIGFueSBvbmUgdG8gbGVhZCBhbiBhcm15IGFnYWluc3QgaGlzIGNvdW50cnk/IGlmIGluZGVlZAogICAgICAgICAgICAgICAgICAgIHdlIHNheSB0aGF0IHRoYXQgaXMgbGF3ZnVsIHdoaWNoIGlzIHBlcm1pdHRlZCBieSB0aGUgbGF3cyBvciBieSB0aGUgdXNhZ2VzIGFuZAogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIHByaW5jaXBsZXMgb2Ygb3VyIGFuY2VzdG9ycy4gRm9yIGl0IGRvZXMgbm90IGZvbGxvdyB0aGF0IHdoYXRldmVyIGEKICAgICAgICAgICAgICAgICAgICBtYW4gaGFzIHBvd2VyIHRvIGRvIGlzIGxhd2Z1bCBmb3IgaGltIHRvIGRvOyBub3IsIGlmIGhlIGlzIG5vdCBoaW5kZXJlZCwgaXMgaGUKICAgICAgICAgICAgICAgICAgICBvbiB0aGF0IGFjY291bnQgcGVybWl0dGVkIHRvIGRvIHNvLiBGb3IgdG8geW91LCBPIExlcGlkdXMsIGFzIHRvIHlvdXIgYW5jZXN0b3JzLAogICAgICAgICAgICAgICAgICAgIHlvdXIgY291bnRyeSBoYXMgZ2l2ZW4gYW4gYXJteSB0byBiZSBlbXBsb3llZCBpbiBoZXIgY2F1c2UuIFdpdGggdGhpcyBhcm15IHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSB0byByZXBlbCB0aGUgZW5lbXksIHlvdSBhcmUgdG8gZXh0ZW5kIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBlbXBpcmUsIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICB0byBvYmV5IHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgaWYgYnkgYW55IGNoYW5jZSB0aGV5IGRpcmVjdCB5b3UgdG8gc29tZSBvdGhlciBvYmplY3QuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGlmIGJ5IGFueSBjaGFuY2UgdGhleSBkaXJlY3QgeW91IHRvIHNvbWUgb3RoZXIgb2JqZWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['13.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPklmIHRoZXNlIGFyZSB5b3VyIHRob3VnaHRzLCB0aGVuIGFyZSB5b3UgcmVhbGx5IE1hcmN1cyBMZXBpZHVzIHRoZSBQb250aWZleAogICAgICAgICAgICAgICAgICAgIE1heGltdXMsIHRoZSBncmVhdC1ncmFuZHNvbiBvZiBNYXJjdXMgTGVwaWR1cywgUG9udGlmZXggTWF4aW11cywgaWYgeW91IGp1ZGdlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBldmVyeSB0aGluZyBpcyBsYXdmdWwgZm9yIG1lbiB0byBkbyB0aGF0IHRoZXkgaGF2ZSBwb3dlciB0byBkbywgdGhlbiBiZXdhcmUKICAgICAgICAgICAgICAgICAgICBsZXN0IHlvdSBzZWVtIHRvIHByZWZlciBhY3Rpbmcgb24gcHJlY2VkZW50cyBzZXQgYnkgdGhvc2Ugd2hvIGhhdmUgbm8gY29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgIHdpdGggeW91LCBhbmQgdGhlc2UsIHRvbywgbW9kZXJuIHByZWNlZGVudHMsIHRvIGJlaW5nIGd1aWRlZCBieSB0aGUgYW5jaWVudAogICAgICAgICAgICAgICAgICAgIGV4YW1wbGVzIGluIHlvdXIgb3duIGZhbWlseS4gQnV0IGlmIHlvdSBpbnRlcnBvc2UgeW91ciBhdXRob3JpdHkgd2l0aG91dCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICByZWNvdXJzZSB0byBhcm1zLCBpbiB0aGF0IGNhc2UgaW5kZWVkIEkgcHJhaXNlIHlvdSBtb3JlOyBidXQgYmV3YXJlIGxlc3QgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoaW5nIGl0c2VsZiBiZSBxdWl0ZSB1bm5lY2Vzc2FyeS4gRm9yIGFsdGhvdWdoIHRoZXJlIGlzIGFsbCB0aGUgYXV0aG9yaXR5IGluCiAgICAgICAgICAgICAgICAgICAgeW91IHRoYXQgdGhlcmUgb3VnaHQgdG8gYmUgaW4gYSBtYW4gb2YgdGhlIGhpZ2hlc3QgcmFuaywgc3RpbGwgdGhlIHNlbmF0ZSBpdHNlbGYKICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdCBkZXNwaXNlIGl0c2VsZjsgbm9yIHdhcyBpdCBldmVyIG1vcmUgd2lzZSwgbW9yZSBmaXJtLCBtb3JlIGNvdXJhZ2VvdXMuCiAgICAgICAgICAgICAgICAgICAgV2UgYXJlIGFsbCBodXJyaWVkIG9uIHdpdGggdGhlIG1vc3QgZWFnZXIgemVhbCB0byByZWNvdmVyIG91ciBmcmVlZG9tLiBTdWNoIGEKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIGFyZG9yIG9uIHRoZSBwYXJ0IG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gY2FuIG5vdCBiZSBleHRpbmd1aXNoZWQgYnkgdGhlIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIG9mIGFueSBvbmU6IHdlIGhhdGUgYSBtYW4gd2hvIHdvdWxkIGV4dGluZ3Vpc2ggaXQ7IHdlIGFyZSBhbmdyeSB3aXRoIGhpbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVzaXN0IGhpbTsgb3VyIGFybXMgY2FuIG5vdCBiZSB3cmVzdGVkIGZyb20gb3VyIGhhbmRzOyB3ZSBhcmUgZGVhZiB0byBhbGwKICAgICAgICAgICAgICAgICAgICBzaWduYWxzIGZvciByZXRyZWF0LCB0byBhbGwgcmVjYWxsIGZyb20gdGhlIGNvbWJhdC4gV2UgaG9wZSBmb3IgdGhlIGhhcHBpZXN0CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzczsgd2Ugd2lsbCBwcmVmZXIgZW5kdXJpbmcgdGhlIGJpdHRlcmVzdCBkaXNhc3RlciB0byBiZWluZyBzbGF2ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gQ2Flc2FyIGhhcyBjb2xsZWN0ZWQgYW4gaW52aW5jaWJsZSBhcm15LgogICAgICAgICAgICAgICAgICAgIFR3byBwZXJmZWN0bHkgYnJhdmUgY29uc3VscyBhcmUgcHJlc2VudCB3aXRoIHRoZWlyIGZvcmNlcy4gVGhlIHZhcmlvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhYmxlIHJlaW5mb3JjZW1lbnRzIG9mIEx1Y2l1cyBQbGFuY3VzLCBjb25zdWwgZWxlY3QsIGFyZSBub3Qgd2FudGluZy4KICAgICAgICAgICAgICAgICAgICBUaGUgY29udGVzdCBpcyBmb3IgdGhlIHNhZmV0eSBvZiBEZWNpbXVzIEJydXR1cy4gT25lIGZ1cmlvdXMgZ2xhZGlhdG9yLCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBiYW5kIG9mIG1vc3QgaW5mYW1vdXMgcm9iYmVycywgaXMgd2FnaW5nIHdhciBhZ2FpbnN0IGhpcyBjb3VudHJ5LCBhZ2FpbnN0IG91cgogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCBnb2RzLCBhZ2FpbnN0IG91ciBhbHRhcnMgYW5kIG91ciBoZWFydGhzLCBhZ2FpbnN0IGZvdXIgY29uc3Vscy4gU2hhbGwKICAgICAgICAgICAgICAgICAgICB3ZSB5aWVsZCB0byBoaW0/IFNoYWxsIHdlIGxpc3RlbiB0byB0aGUgY29uZGl0aW9ucyB3aGljaCBoZSBwcm9wb3Nlcz8gU2hhbGwgd2UKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIGl0IHBvc3NpYmxlIGZvciBwZWFjZSB0byBiZSBtYWRlIHdpdGggaGltPyA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGNhbiBub3QgYmUgZXh0aW5ndWlzaGVkIGJ5IHRoZSBhdXRob3JpdHkKICAgICAgICAgICAgICAgICAgICBvZiBhbnkgb25lOiB3ZSBoYXRlIGEgbWFuIHdobyB3b3VsZCBleHRpbmd1aXNoIGl0OyB3ZSBhcmUgYW5ncnkgd2l0aCBoaW0sIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc2lzdCBoaW07IG91ciBhcm1zIGNhbiBub3QgYmUgd3Jlc3RlZCBmcm9tIG91ciBoYW5kczsgd2UgYXJlIGRlYWYgdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgc2lnbmFscyBmb3IgcmV0cmVhdCwgdG8gYWxsIHJlY2FsbCBmcm9tIHRoZSBjb21iYXQuIFdlIGhvcGUgZm9yIHRoZSBoYXBwaWVzdAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M7IHdlIHdpbGwgcHJlZmVyIGVuZHVyaW5nIHRoZSBiaXR0ZXJlc3QgZGlzYXN0ZXIgdG8gYmVpbmcgc2xhdmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gQ2Flc2FyIGhhcyBjb2xsZWN0ZWQgYW4gaW52aW5jaWJsZSBhcm15LgogICAgICAgICAgICAgICAgICAgIFR3byBwZXJmZWN0bHkgYnJhdmUgY29uc3VscyBhcmUgcHJlc2VudCB3aXRoIHRoZWlyIGZvcmNlcy4gVGhlIHZhcmlvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhYmxlIHJlaW5mb3JjZW1lbnRzIG9mIEx1Y2l1cyBQbGFuY3VzLCBjb25zdWwgZWxlY3QsIGFyZSBub3Qgd2FudGluZy4KICAgICAgICAgICAgICAgICAgICBUaGUgY29udGVzdCBpcyBmb3IgdGhlIHNhZmV0eSBvZiBEZWNpbXVzIEJydXR1cy4gT25lIGZ1cmlvdXMgZ2xhZGlhdG9yLCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBiYW5kIG9mIG1vc3QgaW5mYW1vdXMgcm9iYmVycywgaXMgd2FnaW5nIHdhciBhZ2FpbnN0IGhpcyBjb3VudHJ5LCBhZ2FpbnN0IG91cgogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCBnb2RzLCBhZ2FpbnN0IG91ciBhbHRhcnMgYW5kIG91ciBoZWFydGhzLCBhZ2FpbnN0IGZvdXIgY29uc3Vscy4gU2hhbGwKICAgICAgICAgICAgICAgICAgICB3ZSB5aWVsZCB0byBoaW0/IFNoYWxsIHdlIGxpc3RlbiB0byB0aGUgY29uZGl0aW9ucyB3aGljaCBoZSBwcm9wb3Nlcz8gU2hhbGwgd2UKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIGl0IHBvc3NpYmxlIGZvciBwZWFjZSB0byBiZSBtYWRlIHdpdGggaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['13.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZXJlIGlzIGRhbmdlciBvZiBvdXIgYmVpbmcgb3ZlcndoZWxtZWQuIEkgaGF2ZSBubyBmZWFyIHRoYXQgdGhlIG1hbiB3aG8gY2FuCiAgICAgICAgICAgICAgICAgICAgbm90IGVuam95IGhpcyBvd24gbW9zdCBhYnVuZGFudCBmb3J0dW5lcywgdW5sZXNzIGFsbCB0aGUgZ29vZCBtZW4gYXJlIHNhdmVkLAogICAgICAgICAgICAgICAgICAgIHdpbGwgYmV0cmF5IGhpcyBvd24gc2FmZXR5LiBJdCBpcyBuYXR1cmUgd2hpY2ggZmlyc3QgbWFrZXMgZ29vZCBjaXRpemVucywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiBmb3J0dW5lIGFzc2lzdHMgdGhlbS4gRm9yIGl0IGlzIGZvciB0aGUgYWR2YW50YWdlIG9mIGFsbCBnb29kIG1lbiB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJlcHVibGljIHNob3VsZCBiZSBzYWZlOyBidXQgdGhhdCBhZHZhbnRhZ2UgYXBwZWFycyBtb3JlIGNsZWFybHkgaW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIGZvcnR1bmF0ZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBXaG8gaXMgbWVyZQogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSB0aGFuIExlbnR1bHVzLCBhcyBJIHNhaWQgYmVmb3JlLCBhbmQgd2hvIGlzIG1vcmUgc2Vuc2libGUhIFRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBzYXcgaGlzIHNvcnJvdyBhbmQgaGlzIHRlYXJzIGF0IHRoZSBMdXBlcmNhbCBmZXN0aXZhbC4gVGhleSBzYXcgaG93CiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmxlLCBob3cgb3ZlcndoZWxtZWQgaGUgd2FzIHdoZW4gQW50b25pdXMgcGxhY2VkIGEgZGlhZGVtIG9uIENhZXNhcidzIGhlYWQKICAgICAgICAgICAgICAgICAgICBhbmQgcHJlZmVycmVkIGJlaW5nIGhpcyBzbGF2ZSB0byBiZWluZyBoaXMgY29sbGVhZ3VlLiBBbmQgZXZlbiBpZiBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gYWJzdGFpbiBmcm9tIGhpcyBvdGhlciBjcmltZXMgYW5kIHdpY2tlZG5lc3Nlcywgc3RpbGwgb24gYWNjb3VudCBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgb25lIHNpbmdsZSBhY3Rpb24gSSBzaG91bGQgdGhpbmsgaGltIHdvcnRoeSBvZiBhbGwgcHVuaXNobWVudC4gRm9yIGV2ZW4gaWYgaGUKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHdhcyBjYWxjdWxhdGVkIHRvIGJlIGEgc2xhdmUsIHdoeSBzaG91bGQgaGUgaW1wb3NlIGEgbWFzdGVyIG9uIHVzPyBBbmQKICAgICAgICAgICAgICAgICAgICBpZiBoaXMgY2hpbGRob29kIGhhZCBib3JuZSB0aGUgbHVzdHMgb2YgdGhvc2UgbWVuIHdobyB3ZXJlIHR5cmFudHMgb3ZlciBoaW0sIHdhcwogICAgICAgICAgICAgICAgICAgIGhlIG9uIHRoYXQgYWNjb3VudCB0byBwcmVwYXJlIGEgbWFzdGVyIGFuZCBhIHR5cmFudCB0byBsb3JkIGl0IG92ZXIgb3VyCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4hIFRoZXJlZm9yZSBzaW5jZSB0aGF0IG1hbiB3YXMgc2xhaW4sIGhlIGhpbXNlbGYgaGFzIGJlaGF2ZWQgdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIGluIHRoZSBzYW1lIG1hbm5lciBhcyBoZSB3aXNoZWQgaGltIHRvIGJlaGF2ZSB0byB1cy4gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hvIGlzIG1lcmUKICAgICAgICAgICAgICAgICAgICBmb3J0dW5hdGUgdGhhbiBMZW50dWx1cywgYXMgSSBzYWlkIGJlZm9yZSwgYW5kIHdobyBpcyBtb3JlIHNlbnNpYmxlISBUaGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgc2F3IGhpcyBzb3Jyb3cgYW5kIGhpcyB0ZWFycyBhdCB0aGUgTHVwZXJjYWwgZmVzdGl2YWwuIFRoZXkgc2F3IGhvdwogICAgICAgICAgICAgICAgICAgIG1pc2VyYWJsZSwgaG93IG92ZXJ3aGVsbWVkIGhlIHdhcyB3aGVuIEFudG9uaXVzIHBsYWNlZCBhIGRpYWRlbSBvbiBDYWVzYXIncyBoZWFkCiAgICAgICAgICAgICAgICAgICAgYW5kIHByZWZlcnJlZCBiZWluZyBoaXMgc2xhdmUgdG8gYmVpbmcgaGlzIGNvbGxlYWd1ZS4gQW5kIGV2ZW4gaWYgaGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIGFic3RhaW4gZnJvbSBoaXMgb3RoZXIgY3JpbWVzIGFuZCB3aWNrZWRuZXNzZXMsIHN0aWxsIG9uIGFjY291bnQgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIG9uZSBzaW5nbGUgYWN0aW9uIEkgc2hvdWxkIHRoaW5rIGhpbSB3b3J0aHkgb2YgYWxsIHB1bmlzaG1lbnQuIEZvciBldmVuIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3YXMgY2FsY3VsYXRlZCB0byBiZSBhIHNsYXZlLCB3aHkgc2hvdWxkIGhlIGltcG9zZSBhIG1hc3RlciBvbiB1cz8gQW5kCiAgICAgICAgICAgICAgICAgICAgaWYgaGlzIGNoaWxkaG9vZCBoYWQgYm9ybmUgdGhlIGx1c3RzIG9mIHRob3NlIG1lbiB3aG8gd2VyZSB0eXJhbnRzIG92ZXIgaGltLCB3YXMKICAgICAgICAgICAgICAgICAgICBoZSBvbiB0aGF0IGFjY291bnQgdG8gcHJlcGFyZSBhIG1hc3RlciBhbmQgYSB0eXJhbnQgdG8gbG9yZCBpdCBvdmVyIG91cgogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuISBUaGVyZWZvcmUgc2luY2UgdGhhdCBtYW4gd2FzIHNsYWluLCBoZSBoaW1zZWxmIGhhcyBiZWhhdmVkIHRvIGFsbAogICAgICAgICAgICAgICAgICAgIG90aGVycyBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgaGUgd2lzaGVkIGhpbSB0byBiZWhhdmUgdG8gdXMuIDwvdHJhbnNsYXRpb24+"
translation['13.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIGluIHdoYXQgY291bnRyeSBvZiBiYXJiYXJpYW5zIHdhcyB0aGVyZSBldmVyIHNvIGZvdWwgYW5kIGNydWVsIGEgdHlyYW50IGFzCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMsIGVzY29ydGVkIGJ5IHRoZSBhcm1zIG9mIGJhcmJhcmlhbnMsIGhhcyBwcm92ZWQgaW4gdGhpcyBjaXR5PyBXaGVuCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyIHdhcyBleGVyY2lzaW5nIHRoZSBzdXByZW1lIHBvd2VyLCB3ZSB1c2VkIHRvIGNvbWUgaW50byB0aGUgc2VuYXRlLCBpZiBub3QKICAgICAgICAgICAgICAgICAgICB3aXRoIGZyZWVkb20sIGF0IGFsbCBldmVudHMgd2l0aCBzYWZldHkuIEJ1dCB1bmRlciB0aGlzIGFyY2gtcGlyYXRlIChmb3Igd2h5CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIEkgc2F5IHR5cmFudD8pIHRoZXNlIGJlbmNoZXMgd2VyZSBvY2N1cGllZCBieSBJdHVyZWFucy4gT24gYSBzdWRkZW4gaGUKICAgICAgICAgICAgICAgICAgICBoYXN0ZW5lZCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJydW5kdXNpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJydW5kdXNpdW0iPkJydW5kdXNpdW08L3BsYWNlTmFtZT4sIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdG8gY29tZSBhZ2FpbnN0IHRoaXMgY2l0eSBmcm9tIHRoZW5jZSB3aXRoIGEgcmVndWxhciBhcm15LiBIZSBkZWx1Z2VkIFN1ZXNzYSwgYQogICAgICAgICAgICAgICAgICAgIG1vc3QgYmVhdXRpZnVsIHRvd24sIG5vdyBvZiBtdW5pY2lwYWwgY2l0aXplbnMsIGZvcm1lcmx5IG9mIG1vc3QgaG9ub3JhYmxlCiAgICAgICAgICAgICAgICAgICAgY29sb25pc3RzLCB3aXRoIHRoZSBibG9vZCBvZiB0aGUgYnJhdmVzdCBzb2xkaWVycy4gQXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+IGhlIG1hc3NhY3JlZCB0aGUgY2hvc2VuCiAgICAgICAgICAgICAgICAgICAgY2VudHVyaW9ucyBvZiB0aGUgTWFydGlhbCBsZWdpb24gaW4gdGhlIGxhcCBvZiBoaXMgd2lmZSwgd2hvIHdhcyBub3Qgb25seSBtb3N0CiAgICAgICAgICAgICAgICAgICAgYXZhcmljaW91cyBidXQgYWxzbyBtb3N0IGNydWVsLiBBZnRlciB0aGF0IHdpdGggd2hhdCBmdXJ5LCB3aXRoIHdoYXQgZWFnZXJuZXNzCiAgICAgICAgICAgICAgICAgICAgZGlkIGhlIGh1cnJ5IG9uIHRvIHRoZSBjaXR5LCB0aGF0IGlzIHRvIHNheSwgdG8gdGhlIHNsYXVnaHRlciBvZiBldmVyeSB2aXJ0dW91cwogICAgICAgICAgICAgICAgICAgIG1hbiEgQnV0IGF0IHRoYXQgdGltZSB0aGUgaW1tb3J0YWwgZ29kcyBicm91Z2h0IHRvIHVzIGEgcHJvdGVjdG9yIHdob20gd2UgaGFkCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgc2VlbiBub3IgZXhwZWN0ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcnVuZHVzaXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcnVuZHVzaXVtIj5CcnVuZHVzaXVtPC9wbGFjZU5hbWU+LCBpbiBvcmRlcgogICAgICAgICAgICAgICAgICAgIHRvIGNvbWUgYWdhaW5zdCB0aGlzIGNpdHkgZnJvbSB0aGVuY2Ugd2l0aCBhIHJlZ3VsYXIgYXJteS4gSGUgZGVsdWdlZCBTdWVzc2EsIGEKICAgICAgICAgICAgICAgICAgICBtb3N0IGJlYXV0aWZ1bCB0b3duLCBub3cgb2YgbXVuaWNpcGFsIGNpdGl6ZW5zLCBmb3JtZXJseSBvZiBtb3N0IGhvbm9yYWJsZQogICAgICAgICAgICAgICAgICAgIGNvbG9uaXN0cywgd2l0aCB0aGUgYmxvb2Qgb2YgdGhlIGJyYXZlc3Qgc29sZGllcnMuIEF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJ1bmR1c2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJ1bmR1c2l1bSI+QnJ1bmR1c2l1bTwvcGxhY2VOYW1lPiBoZSBtYXNzYWNyZWQgdGhlIGNob3NlbgogICAgICAgICAgICAgICAgICAgIGNlbnR1cmlvbnMgb2YgdGhlIE1hcnRpYWwgbGVnaW9uIGluIHRoZSBsYXAgb2YgaGlzIHdpZmUsIHdobyB3YXMgbm90IG9ubHkgbW9zdAogICAgICAgICAgICAgICAgICAgIGF2YXJpY2lvdXMgYnV0IGFsc28gbW9zdCBjcnVlbC4gQWZ0ZXIgdGhhdCB3aXRoIHdoYXQgZnVyeSwgd2l0aCB3aGF0IGVhZ2VybmVzcwogICAgICAgICAgICAgICAgICAgIGRpZCBoZSBodXJyeSBvbiB0byB0aGUgY2l0eSwgdGhhdCBpcyB0byBzYXksIHRvIHRoZSBzbGF1Z2h0ZXIgb2YgZXZlcnkgdmlydHVvdXMKICAgICAgICAgICAgICAgICAgICBtYW4hIEJ1dCBhdCB0aGF0IHRpbWUgdGhlIGltbW9ydGFsIGdvZHMgYnJvdWdodCB0byB1cyBhIHByb3RlY3RvciB3aG9tIHdlIGhhZAogICAgICAgICAgICAgICAgICAgIG5ldmVyIHNlZW4gbm9yIGV4cGVjdGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['13.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGUgaW5jcmVkaWJsZSBhbmQgZ29kbGlrZSB2aXJ0dWUgb2YgQ2Flc2FyIGNoZWNrZWQgdGhlIGNydWVsIGFuZCBmcmFudGljCiAgICAgICAgICAgICAgICAgICAgb25zbGF1Z2h0IG9mIHRoYXQgcm9iYmVyLCB3aG9tIHRoZW4gdGhhdCBtYWRtYW4gYmVsaWV2ZWQgdGhhdCBoZSB3YXMgaW5qdXJpbmcKICAgICAgICAgICAgICAgICAgICB3aXRoIGhpcyBlZGljdHMsIGlnbm9yYW50IHRoYXQgYWxsIHRoZSBjaGFyZ2VzIHdoaWNoIGhlIHdhcyBmYWxzZWx5IGFsbGVnaW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGF0IG1vc3QgcmlnaHRlb3VzIHlvdW5nIG1hbiwgd2VyZSBhbGwgdmVyeSBhcHByb3ByaWF0ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb25zIG9mIGhpcyBvd24gY2hpbGRob29kLiBIZSBlbnRlcmVkIHRoZSBjaXR5LCB3aXRoIHdoYXQgYW4gZXNjb3J0LCBvcgogICAgICAgICAgICAgICAgICAgIHJhdGhlciB3aXRoIHdoYXQgYSB0cm9vcCEgd2hlbiBvbiB0aGUgcmlnaHQgaGFuZCBhbmQgb24gdGhlIGxlZnQsIGFtaWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JvYW5zIG9mIHRoZSBSb21hbiBwZW9wbGUsIGhlIHdhcyB0aHJlYXRlbmluZyB0aGUgb3duZXJzIG9mIHByb3BlcnR5LCB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBub3RlcyBvZiB0aGUgaG91c2VzLCBhbmQgb3Blbmx5IHByb21pc2luZyB0byBkaXZpZGUgdGhlIGNpdHkgYW1vbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZXJzLiBIZSByZXR1cm5lZCB0byBoaXMgc29sZGllcnM7IHRoZW4gY2FtZSB0aGF0IG1pc2NoaWV2b3VzIGFzc2VtYmx5IGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGlidXIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRpYnVyIj5UaWJ1cjwvcGxhY2VOYW1lPi4gRnJvbSB0aGVuY2UgaGUgaHVycmllZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5OyB0aGUgc2VuYXRlIHdhcyBjb252ZW5lZCBhdCB0aGUgQ2FwaXRvbC4gQSBkZWNyZWUgd2l0aCB0aGUgYXV0aG9yaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN1bHMgd2FzIHByZXBhcmVkIGZvciBwcm9zY3JpYmluZyB0aGUgeW91bmcgbWFuOyB3aGVuIGFsbCBvbiBhIHN1ZGRlbgogICAgICAgICAgICAgICAgICAgIChmb3IgaGUgd2FzIGF3YXJlIHRoYXQgdGhlIE1hcnRpYWwgbGVnaW9uIGhhZCBlbmNhbXBlZCBhdCBBbGJhKSBuZXdzIGlzIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICBoaW0gb2YgdGhlIHByb2NlZWRpbmdzIG9mIHRoZSBmb3VydGggbGVnaW9uLiA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRpYnVyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaWJ1ciI+VGlidXI8L3BsYWNlTmFtZT4uIEZyb20gdGhlbmNlIGhlIGh1cnJpZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eTsgdGhlIHNlbmF0ZSB3YXMgY29udmVuZWQgYXQgdGhlIENhcGl0b2wuIEEgZGVjcmVlIHdpdGggdGhlIGF1dGhvcml0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWxzIHdhcyBwcmVwYXJlZCBmb3IgcHJvc2NyaWJpbmcgdGhlIHlvdW5nIG1hbjsgd2hlbiBhbGwgb24gYSBzdWRkZW4KICAgICAgICAgICAgICAgICAgICAoZm9yIGhlIHdhcyBhd2FyZSB0aGF0IHRoZSBNYXJ0aWFsIGxlZ2lvbiBoYWQgZW5jYW1wZWQgYXQgQWxiYSkgbmV3cyBpcyBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgaGltIG9mIHRoZSBwcm9jZWVkaW5ncyBvZiB0aGUgZm91cnRoIGxlZ2lvbi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGFybWVkIGF0IHRoYXQsIGhlIGFiYW5kb25lZCBoaXMgaW50ZW50aW9uIG9mIHN1Ym1pdHRpbmcgYSBtb3Rpb24gdG8gdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RpbmcgQ2Flc2FyLiBIZSBkZXBhcnRlZCBub3QgYnkgdGhlIHJlZ3VsYXIgcm9hZHMsIGJ1dCBieSB0aGUgYnktbGFuZXMsIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHJvYmUgb2YgYSBnZW5lcmFsOyBhbmQgb24gdGhhdCB2ZXJ5IHNlbGYtc2FtZSBkYXkgaGUgdHJ1bXBlZCB1cCBhIGNvdW50bGVzcwogICAgICAgICAgICAgICAgICAgIG51bWJlciBvZiByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlOyBhbGwgb2Ygd2hpY2ggaGUgcHVibGlzaGVkIGV2ZW4gYmVmb3JlIHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRyYXduIHVwLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+IEZyb20gdGhlbmNlIGl0IHdhcyBub3QgYQogICAgICAgICAgICAgICAgICAgIGpvdXJuZXksIGJ1dCBhIHJhY2UgYW5kIGZsaWdodCBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBrZXk9InRnbiwxMDAwMDcwIj5HYXVsPC9wbGFjZU5hbWU+LiBIZSB0aG91Z2h0IHRoYXQgQ2Flc2FyIHdhcyBwdXJzdWluZyBoaW0gd2l0aCB0aGUgZm91cnRoCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uLCB3aXRoIHRoZSBNYXJ0aWFsIGxlZ2lvbiwgd2l0aCB0aGUgdmV0ZXJhbnMsIHdob3NlIHZlcnkgbmFtZSBoZSBjb3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBlbmR1cmUgZm9yIGZyaWdodC4gVGhlbiwgYXMgaGUgd2FzIG1ha2luZyBoaXMgd2F5IGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIERlY2ltdXMgQnJ1dHVzIG9wcG9zZWQgaGltOyB3aG8KICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgYmVpbmcgaGltc2VsZiBzdXJyb3VuZGVkIGJ5IHRoZSB3YXZlcyBvZiB0aGUgd2hvbGUgd2FyLCB0byBhbGxvd2luZwogICAgICAgICAgICAgICAgICAgIGhpbSBlaXRoZXIgdG8gcmV0cmVhdCBvciBhZHZhbmNlOyBhbmQgd2hvIHB1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+IG9uIGhpbSBhcyBhIHNvcnQgb2YgYnJpZGxlIHRvIGhpcyBleHVsdGF0aW9uLiBBbmQgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBibG9ja2FkZWQgdGhhdCBjaXR5IHdpdGggaGlzIHdvcmtzIGFuZCBmb3J0aWZpY2F0aW9ucywgYW5kIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGlnbml0eSBvZiBhIG1vc3QgZmxvdXJpc2hpbmcgY29sb255LCBhbmQgdGhlIG1hamVzdHkgb2YgYSBjb25zdWwgZWxlY3QsIHdlcmUKICAgICAgICAgICAgICAgICAgICBib3RoIGluc3VmZmljaWVudCB0byBkZXRlciBoaW0gZnJvbSBoaXMgcGFycmljaWRhbCB0cmVhc29uLCB0aGVuIChJIGNhbGwgeW91LAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgYWxsIHRoZSBnb2RzIHdobyBwcmVzaWRlIG92ZXIgdGhpcyBjaXR5LCB0byB3aXRuZXNzKSwKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG15IHdpbGwsIGFuZCBpbiBzcGl0ZSBvZiBteSByZXNpc3RhbmNlIGFuZCByZW1vbnN0cmFuY2UsIHRocmVlCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgb2YgY29uc3VsYXIgcmFuayB3ZXJlIHNlbnQgdG8gdGhhdCByb2JiZXIsIHRvIHRoYXQgbGVhZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgZ2xhZGlhdG9ycywgTWFyY3VzIEFudG9uaXVzLiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.9.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gRnJvbSB0aGVuY2UgaXQgd2FzIG5vdCBhCiAgICAgICAgICAgICAgICAgICAgam91cm5leSwgYnV0IGEgcmFjZSBhbmQgZmxpZ2h0IGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3MCI+R2F1bDwvcGxhY2VOYW1lPi4gSGUgdGhvdWdodCB0aGF0IENhZXNhciB3YXMgcHVyc3VpbmcgaGltIHdpdGggdGhlIGZvdXJ0aAogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiwgd2l0aCB0aGUgTWFydGlhbCBsZWdpb24sIHdpdGggdGhlIHZldGVyYW5zLCB3aG9zZSB2ZXJ5IG5hbWUgaGUgY291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZW5kdXJlIGZvciBmcmlnaHQuIFRoZW4sIGFzIGhlIHdhcyBtYWtpbmcgaGlzIHdheSBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4sIERlY2ltdXMgQnJ1dHVzIG9wcG9zZWQgaGltOyB3aG8KICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgYmVpbmcgaGltc2VsZiBzdXJyb3VuZGVkIGJ5IHRoZSB3YXZlcyBvZiB0aGUgd2hvbGUgd2FyLCB0byBhbGxvd2luZwogICAgICAgICAgICAgICAgICAgIGhpbSBlaXRoZXIgdG8gcmV0cmVhdCBvciBhZHZhbmNlOyBhbmQgd2hvIHB1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4gb24gaGltIGFzIGEgc29ydCBvZiBicmlkbGUgdG8gaGlzIGV4dWx0YXRpb24uIEFuZCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGJsb2NrYWRlZCB0aGF0IGNpdHkgd2l0aCBoaXMgd29ya3MgYW5kIGZvcnRpZmljYXRpb25zLCBhbmQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBkaWduaXR5IG9mIGEgbW9zdCBmbG91cmlzaGluZyBjb2xvbnksIGFuZCB0aGUgbWFqZXN0eSBvZiBhIGNvbnN1bCBlbGVjdCwgd2VyZQogICAgICAgICAgICAgICAgICAgIGJvdGggaW5zdWZmaWNpZW50IHRvIGRldGVyIGhpbSBmcm9tIGhpcyBwYXJyaWNpZGFsIHRyZWFzb24sIHRoZW4gKEkgY2FsbCB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBSb21hbiBwZW9wbGUsIGFuZCBhbGwgdGhlIGdvZHMgd2hvIHByZXNpZGUgb3ZlciB0aGlzIGNpdHksIHRvIHdpdG5lc3MpLAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbXkgd2lsbCwgYW5kIGluIHNwaXRlIG9mIG15IHJlc2lzdGFuY2UgYW5kIHJlbW9uc3RyYW5jZSwgdGhyZWUKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBvZiBjb25zdWxhciByYW5rIHdlcmUgc2VudCB0byB0aGF0IHJvYmJlciwgdG8gdGhhdCBsZWFkZXIgb2YKICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3JzLCBNYXJjdXMgQW50b25pdXMuIDwvdHJhbnNsYXRpb24+"
translation['13.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIGV2ZXIgd2FzIHN1Y2ggYSBiYXJiYXJpYW4/IFdobyB3YXMgZXZlciBzbyBzYXZhZ2U/IHNvIGJydXRhbD8gSGUgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgbGlzdGVuIHRvIHRoZW07IGhlIGdhdmUgdGhlbSBubyBhbnN3ZXI7IGFuZCBoZSBub3Qgb25seSBkZXNwaXNlZCBhbmQgc2hvd2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBjb25zaWRlcmVkIG9mIG5vIGltcG9ydGFuY2UgdGhvc2UgbWVuIHdobyB3ZXJlIHdpdGggaGltLCBidXQgc3RpbGwgbW9yZSB1cywKICAgICAgICAgICAgICAgICAgICBieSB3aG9tIHRoZXNlIG1lbiBoYWQgYmVlbiBzZW50LiBBbmQgYWZ0ZXJ3YXJkIHdoYXQgd2lja2VkbmVzcywgb3Igd2hhdCBjcmltZQogICAgICAgICAgICAgICAgICAgIHdhcyB0aGVyZSB3aGljaCB0aGF0IHRyYWl0b3IgYWJzdGFpbmVkIGZyb20/IEhlIGJsb2NrYWRlZCB5b3VyIGNvbG9uaXN0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGFybXkgb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHlvdXIgZ2VuZXJhbCwgYW5kIHlvdXIgY29uc3VsIGVsZWN0LiBIZSBsYXlzCiAgICAgICAgICAgICAgICAgICAgd2FzdGUgdGhlIGxhbmRzIG9mIGEgbmF0aW9uIG9mIG1vc3QgZXhjZWxsZW50IGNpdGl6ZW5zLiBMaWtlIGEgbW9zdCBpbmh1bWFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgaGUgdGhyZWF0ZW5zIGFsbCB2aXJ0dW91cyBtZW4gd2l0aCBjcm9zc2VzIGFuZCB0b3J0dXJlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyB3aGF0IHBlYWNlLCBPIE1hcmN1cyBMZXBpZHVzLCBjYW4gZXhpc3Qgd2l0aCB0aGlzIG1hbj8gd2hlbiBpdCBkb2VzIG5vdCBzZWVtCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGVyZSBpcyBldmVuIGFueSBwdW5pc2htZW50IHdoaWNoIHRoZSBSb21hbiBwZW9wbGUgY2FuIHRoaW5rIGFkZXF1YXRlIHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGNyaW1lcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIGFueSBvbmUgaGFzIGhpdGhlcnRvIGJlZW4gYWJsZSB0byBkb3VidCB0aGUgZmFjdCwgdGhhdCB0aGVyZSBjYW4gYmUKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHdoYXRldmVyIGluIGNvbW1vbiBiZXR3ZWVuIHRoaXMgb3JkZXIgYW5kIHRoZSBSb21hbiBwZW9wbGUgYW5kIHRoYXQgbW9zdAogICAgICAgICAgICAgICAgICAgIGRldGVzdGFibGUgYmVhc3QsIGxldCBoaW0gYXQgbGVhc3QgY2Vhc2UgdG8gZW50ZXJ0YWluIHN1Y2ggYSBkb3VidCwgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGJlY29tZXMgYWNxdWFpbnRlZCB3aXRoIHRoaXMgbGV0dGVyIHdoaWNoIEkgaGF2ZSBqdXN0IHJlY2VpdmVkLCBpdCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHNlbnQgdG8gbWUgYnkgSGlydGl1cyB0aGUgY29uc3VsLiBXaGlsZSBJIHJlYWQgaXQsIGFuZCB3aGlsZSBJIGJyaWVmbHkgZGlzY3VzcwogICAgICAgICAgICAgICAgICAgIGVhY2ggcGFyYWdyYXBoLCBJIGJlZywgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCB5b3Ugd2lsbCBsaXN0ZW4gdG8gbWUgbW9zdAogICAgICAgICAgICAgICAgICAgIGF0dGVudGl2ZWx5LCBhcyB5b3UgaGF2ZSBoaXRoZXJ0byBkb25lLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQW50b25pdXMgdG8gSGlydGl1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQW50b25pdXMgdG8gSGlydGl1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgZG9lcyBub3QgY2FsbCBoaW1zZWxmIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIG5vciBIaXJ0aXVzCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCBub3IgQ2Flc2FyIHByb3ByYWV0b3IuIFRoaXMgaXMgY3VubmluZ2x5IGRvbmUgZW5vdWdoLiBIZSBwcmVmZXJyZWQKICAgICAgICAgICAgICAgICAgICBsYXlpbmcgYXNpZGUgYSB0aXRsZSB0byB3aGljaCBoZSBoYWQgbm8gcmlnaHQgaGltc2VsZiwgdG8gZ2l2aW5nIHRoZW0gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgc3R5bGUuIDwvcD4KCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIG5vciBIaXJ0aXVzCiAgICAgICAgICAgICAgICAgICAgY29uc3VsLCBub3IgQ2Flc2FyIHByb3ByYWV0b3IuIFRoaXMgaXMgY3VubmluZ2x5IGRvbmUgZW5vdWdoLiBIZSBwcmVmZXJyZWQKICAgICAgICAgICAgICAgICAgICBsYXlpbmcgYXNpZGUgYSB0aXRsZSB0byB3aGljaCBoZSBoYWQgbm8gcmlnaHQgaGltc2VsZiwgdG8gZ2l2aW5nIHRoZW0gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgc3R5bGUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxXaGVuIEkgaGVhcmQgb2YgdGhlIGRlYXRoIG9mIENhaXVzIFRyZWJvbml1cywKICAgICAgICAgICAgICAgICAgICAgICAgSSB3YXMgbm90IG1vcmUgcmVqb2ljZWQgdGhhbiBncmlldmVkLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcV2hlbiBJIGhlYXJkIG9mIHRoZSBkZWF0aCBvZiBDYWl1cyBUcmVib25pdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIEkgd2FzIG5vdCBtb3JlIHJlam9pY2VkIHRoYW4gZ3JpZXZlZC7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRha2Ugbm90aWNlIHdoeSBoZSBzYXlzIGhlIHJlam9pY2VkLCB3aHkgaGUgc2F5cyB0aGF0IGhlIHdhcyBncmlldmVkOyBhbmQgdGhlbgogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGJlIG1vcmUgZWFzaWx5IGFibGUgdG8gZGVjaWRlIHRoZSBxdWVzdGlvbiBvZiBwZWFjZS4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEl0IHdhcyBhIG1hdHRlciBvZiBwcm9wZXIgcmVqb2ljaW5nIHRoYXQgYQogICAgICAgICAgICAgICAgICAgICAgICB3aWNrZWQgbWFuIGhhZCBwYWlkIHRoZSBwZW5hbHR5IGR1ZSB0byB0aGUgYm9uZXMgYW5kIGFzaGVzIG9mIGEgbW9zdAogICAgICAgICAgICAgICAgICAgICAgICBpbGx1c3RyaW91cyBtYW4sIGFuZCB0aGF0IHRoZSBkaXZpbmUgcG93ZXIgb2YgdGhlIGdvZHMgaGFkIHNob3duIGl0c2VsZgogICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgY3VycmVudCB5ZWFyLCBieSBzaG93aW5nIHRoZSBjaGFzdGlzZW1lbnQgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBwYXJyaWNpZGUgYWxyZWFkeSBpbmZsaWN0ZWQgaW4gc29tZSBjYXNlcywgYW5kIGltcGVuZGluZyBpbgogICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMu4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJdCB3YXMgYSBtYXR0ZXIgb2YgcHJvcGVyIHJlam9pY2luZyB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgd2lja2VkIG1hbiBoYWQgcGFpZCB0aGUgcGVuYWx0eSBkdWUgdG8gdGhlIGJvbmVzIGFuZCBhc2hlcyBvZiBhIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgaWxsdXN0cmlvdXMgbWFuLCBhbmQgdGhhdCB0aGUgZGl2aW5lIHBvd2VyIG9mIHRoZSBnb2RzIGhhZCBzaG93biBpdHNlbGYKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgeWVhciwgYnkgc2hvd2luZyB0aGUgY2hhc3Rpc2VtZW50IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgcGFycmljaWRlIGFscmVhZHkgaW5mbGljdGVkIGluIHNvbWUgY2FzZXMsIGFuZCBpbXBlbmRpbmcgaW4KICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyB5b3UgU3BhcnRhY3VzISBmb3Igd2hhdCBuYW1lIGlzIG1vcmUgZml0IGZvciB5b3U/IHlvdSB3aG9zZSBhYm9taW5hYmxlCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcyBpcyBzdWNoIGFzIHRvIG1ha2UgZXZlbiBDYXRpbGluZSBzZWVtIHRvbGVyYWJsZS4gSGF2ZSB5b3UgZGFyZWQgdG8KICAgICAgICAgICAgICAgICAgICB3cml0ZSB0aGF0IGl0IGlzIGEgbWF0dGVyIG9mIHJlam9pY2luZyB0aGF0IFRyZWJvbml1cyBoYXMgc3VmZmVyZWQgcHVuaXNobWVudD8KICAgICAgICAgICAgICAgICAgICB0aGF0IFRyZWJvbml1cyB3YXMgd2lja2VkPyBXaGF0IHdhcyBoaXMgY3JpbWUsIGV4Y2VwdCB0aGF0IG9uIHRoZSBpZGVzIG9mIE1hcmNoCiAgICAgICAgICAgICAgICAgICAgaGUgd2l0aGRyZXcgeW91IGZyb20gdGhlIGRlc3RydWN0aW9uIHdoaWNoIHlvdSBoYWQgZGVzZXJ2ZWQ/IENvbWU7IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4geW91IHJlam9pY2UgYXQgdGhpczsgbGV0IHVzIHNlZSB3aGF0IGl0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBleGNpdGVzIHlvdXIgaW5kaWduYXRpb24uIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4geW91IHJlam9pY2UgYXQgdGhpczsgbGV0IHVzIHNlZSB3aGF0IGl0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBleGNpdGVzIHlvdXIgaW5kaWduYXRpb24uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxUaGF0IERvbGFiZWxsYSBzaG91bGQgYXQgdGhpcyB0aW1lIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBwcm9ub3VuY2VkIGEgcHVibGljIGVuZW15IGJlY2F1c2UgaGUgaGFzIHNsYWluIGFuIGFzc2Fzc2luOyBhbmQgdGhhdCB0aGUgc29uCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGEgYnVmZm9vbiBzaG91bGQgYXBwZWFyIGRlYXJlciB0byB0aGUgUm9tYW4gcGVvcGxlIHRoYW4gQ2FpdXMgQ2Flc2FyLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIGhpcyBjb3VudHJ5LCBhcmUgY2lyY3Vtc3RhbmNlcyB0byBiZSBsYW1lbnRlZC7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFRoYXQgRG9sYWJlbGxhIHNob3VsZCBhdCB0aGlzIHRpbWUgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHByb25vdW5jZWQgYSBwdWJsaWMgZW5lbXkgYmVjYXVzZSBoZSBoYXMgc2xhaW4gYW4gYXNzYXNzaW47IGFuZCB0aGF0IHRoZSBzb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgYSBidWZmb29uIHNob3VsZCBhcHBlYXIgZGVhcmVyIHRvIHRoZSBSb21hbiBwZW9wbGUgdGhhbiBDYWl1cyBDYWVzYXIsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIgb2YgaGlzIGNvdW50cnksIGFyZSBjaXJjdW1zdGFuY2VzIHRvIGJlIGxhbWVudGVkLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2h5IHNob3VsZCB5b3UgYmUgc2FkIGJlY2F1c2UgRG9sYWJlbGxhIGhhcyBiZWVuIHByb25vdW5jZWQgYSBwdWJsaWMgZW5lbXk/IFdoeT8KICAgICAgICAgICAgICAgICAgICBBcmUgeW91IG5vdCBhd2FyZSB0aGF0IHlvdSB5b3Vyc2VsZuKAlGJ5IHRoZSBmYWN0IG9mIGFuIGVubGlzdG1lbnQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgdGFrZW4gcGxhY2UgYWxsIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjb25zdWxzIGJlaW5nIHNlbnQgZm9ydGggdG8gd2FyLCBhbmQgb2YgQ2Flc2FyIGhhdmluZyByZWNlaXZlZCBncmVhdAogICAgICAgICAgICAgICAgICAgIGhvbm9ycywgYW5kIG9mIHRoZSBnYXJiIG9mIHdhciBoYXZpbmcgYmVlbiBhc3N1bWVk4oCUaGF2ZSBhbHNvIGJlZW4KICAgICAgICAgICAgICAgICAgICBwcm9ub3VuY2VkIGFuIGVuZW15PyBBbmQgd2hhdCByZWFzb24gaXMgdGhlcmUsIE8geW91IHdpY2tlZCBtYW4sIGZvciBsYW1lbnRpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IERvbGFiZWxsYSBoYXMgYmVlbiBkZWNsYXJlZCBhbiBlbmVteSBieSB0aGUgc2VuYXRlPyBhIGJvZHkgd2hpY2ggeW91IGluZGVlZAogICAgICAgICAgICAgICAgICAgIHRoaW5rIG9mIG5vIGNvbnNlcXVlbmNlIGF0IGFsbDsgYnV0IHlvdSBtYWtlIGl0IHlvdXIgbWFpbiBvYmplY3QgaW4gd2FnaW5nIHdhcgogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgdG8gZGVzdHJveSB0aGUgc2VuYXRlLCBhbmQgdG8gbWFrZSBhbGwgdGhlIHJlc3Qgb2YgdGhvc2Ugd2hvIGFyZSBlaXRoZXIKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBvciB3ZWFsdGh5IGZvbGxvdyB0aGUgZmF0ZSBvZiB0aGUgaGlnaGVzdCBvcmRlciBvZiBhbGwuIEJ1dCBoZSBjYWxscwogICAgICAgICAgICAgICAgICAgIGhpbSB0aGUgc29uIG9mIGEgYnVmZm9vbi4gQXMgaWYgdGhhdCBub2JsZSBSb21hbiBrbmlnaHQgdGhlIGZhdGhlciBvZiBUcmVib25pdXMKICAgICAgICAgICAgICAgICAgICB3ZXJlIHVua25vd24gdG8gdXMuIEFuZCBkb2VzIGhlIHZlbnR1cmUgdG8gbG9vayBkb3duIG9uIGFueSBvbmUgYmVjYXVzZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFubmVzcyBvZiBoaXMgYmlydGgsIHdoZW4gaGUgaGFzIGhpbXNlbGYgY2hpbGRyZW4gYnkgRmFkaWE/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY29uc3VscyBiZWluZyBzZW50IGZvcnRoIHRvIHdhciwgYW5kIG9mIENhZXNhciBoYXZpbmcgcmVjZWl2ZWQgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBob25vcnMsIGFuZCBvZiB0aGUgZ2FyYiBvZiB3YXIgaGF2aW5nIGJlZW4gYXNzdW1lZOKAlGhhdmUgYWxzbyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlZCBhbiBlbmVteT8gQW5kIHdoYXQgcmVhc29uIGlzIHRoZXJlLCBPIHlvdSB3aWNrZWQgbWFuLCBmb3IgbGFtZW50aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBEb2xhYmVsbGEgaGFzIGJlZW4gZGVjbGFyZWQgYW4gZW5lbXkgYnkgdGhlIHNlbmF0ZT8gYSBib2R5IHdoaWNoIHlvdSBpbmRlZWQKICAgICAgICAgICAgICAgICAgICB0aGluayBvZiBubyBjb25zZXF1ZW5jZSBhdCBhbGw7IGJ1dCB5b3UgbWFrZSBpdCB5b3VyIG1haW4gb2JqZWN0IGluIHdhZ2luZyB3YXIKICAgICAgICAgICAgICAgICAgICB1dHRlcmx5IHRvIGRlc3Ryb3kgdGhlIHNlbmF0ZSwgYW5kIHRvIG1ha2UgYWxsIHRoZSByZXN0IG9mIHRob3NlIHdobyBhcmUgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgdmlydHVvdXMgb3Igd2VhbHRoeSBmb2xsb3cgdGhlIGZhdGUgb2YgdGhlIGhpZ2hlc3Qgb3JkZXIgb2YgYWxsLiBCdXQgaGUgY2FsbHMKICAgICAgICAgICAgICAgICAgICBoaW0gdGhlIHNvbiBvZiBhIGJ1ZmZvb24uIEFzIGlmIHRoYXQgbm9ibGUgUm9tYW4ga25pZ2h0IHRoZSBmYXRoZXIgb2YgVHJlYm9uaXVzCiAgICAgICAgICAgICAgICAgICAgd2VyZSB1bmtub3duIHRvIHVzLiBBbmQgZG9lcyBoZSB2ZW50dXJlIHRvIGxvb2sgZG93biBvbiBhbnkgb25lIGJlY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVhbm5lc3Mgb2YgaGlzIGJpcnRoLCB3aGVuIGhlIGhhcyBoaW1zZWxmIGNoaWxkcmVuIGJ5IEZhZGlhPyA8L3RyYW5zbGF0aW9uPg=="
translation['13.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['13.11.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQnV0IGl0IGlzIHRoZSBiaXR0ZXJlc3QgdGhpbmcgb2YgYWxsIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgeW91LCBPIEF1bHVzLiBIaXJ0aXVzLCB3aG8gaGF2ZSBiZWVuIGRpc3Rpbmd1aXNoZWQgYnkgQ2Flc2FyJ3Mga2luZG5lc3MsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBiZWVuIGxlZnQgYnkgaGltIGluIGEgY29uZGl0aW9uIHdoaWNoIHlvdSB5b3Vyc2VsZiBtYXJ2ZWwgYXQuIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioiIC8+4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxCdXQgaXQgaXMgdGhlIGJpdHRlcmVzdCB0aGluZyBvZiBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICB5b3UsIE8gQXVsdXMuIEhpcnRpdXMsIHdobyBoYXZlIGJlZW4gZGlzdGluZ3Vpc2hlZCBieSBDYWVzYXIncyBraW5kbmVzcywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGJlZW4gbGVmdCBieSBoaW0gaW4gYSBjb25kaXRpb24gd2hpY2ggeW91IHlvdXJzZWxmIG1hcnZlbCBhdC4gPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IioqKiIgLz7igJ08L3E+CiAgICAgICAgICAgICAgICA8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKioqIiAvPuKAnTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBjYW4gbm90IGluZGVlZCBkZW55IHRoYXQgQXVsdXMgSGlydGl1cyB3YXMgZGlzdGluZ3Vpc2hlZCBieSBDYWVzYXIsIGJ1dCBzdWNoCiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3Rpb25zIGFyZSBvbmx5IG9mIHZhbHVlIHdoZW4gY29uZmVycmVkIG9uIHZpcnR1ZSBhbmQgaW5kdXN0cnkuIEJ1dCB5b3UsCiAgICAgICAgICAgICAgICAgICAgd2hvIGNhbiBub3QgZGVueSB0aGF0IHlvdSBhbHNvIHdlcmUgZGlzdGluZ3Vpc2hlZCBieSBDYWVzYXIsIHdoYXQgd291bGQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGlmIGhlIGhhZCBub3Qgc2hvd2VyZWQgc28gbWFueSBraW5kbmVzc2VzIG9uIHlvdT8gV2hlcmUgd291bGQgeW91ciBvd24gZ29vZAogICAgICAgICAgICAgICAgICAgIHF1YWxpdGllcyBoYXZlIGJvcm5lIHlvdT8gV2hlcmUgd291bGQgeW91ciBiaXJ0aCBoYXZlIGNvbmR1Y3RlZCB5b3U/IFlvdSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgc3BlbnQgdGhlIHdob2xlIHBlcmlvZCBvZiB5b3VyIG1hbmhvb2QgaW4gYnJvdGhlbHMsIGFuZCBjb29rLXNob3BzIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIGdhbWJsaW5nIGFuZCBkcmlua2luZywgYXMgeW91IHVzZWQgdG8gZG8gd2hlbiB5b3Ugd2VyZSBhbHdheXMgYnVyeWluZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgYnJhaW5zIGFuZCB5b3VyIGJlYXJkIGluIHRoZSBsYXBzIG9mIGFjdHJlc3Nlcy4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEFuZCB5b3UgdG9vLCBPIGJveeKAlOKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQW5kIHlvdSB0b28sIE8gYm954oCU4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSBjYWxscyBoaW0gYSBib3kgd2hvbSBoZSBoYXMgbm90IG9ubHkgZXhwZXJpZW5jZWQgYW5kIHNoYWxsIGFnYWluIGV4cGVyaWVuY2UgdG8KICAgICAgICAgICAgICAgICAgICBiZSBhIG1hbiwgYnV0IG9uZSBvZiB0aGUgYnJhdmVzdCBvZiBtZW4uIEl0IGlzIGluZGVlZCB0aGUgbmFtZSBhcHByb3ByaWF0ZSB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBhZ2U7IGJ1dCBoZSBpcyB0aGUgbGFzdCBtYW4gaW4gdGhlIHdvcmxkIHdobyBvdWdodCB0byB1c2UgaXQsIHdoZW4gaXQgaXMgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIG1hZG5lc3MgdGhhdCBoYXMgb3BlbmVkIHRvIHRoaXMgYm95IHRoZSBwYXRoIHRvIGdsb3J5LiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IHdobyBvd2UgZXZlcnkgdGhpbmcgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWXigJTigJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFlvdSB3aG8gb3dlIGV2ZXJ5IHRoaW5nIHRvIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBuYW1l4oCU4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gSGUgZG9lcyBpbmRlZWQgb3dlIGV2ZXJ5IHRoaW5nLCBhbmQgbm9ibHkgaXMgaGUgcGF5aW5nIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpZiBoZSB3YXMgdGhlIGZhdGhlciBvZiBoaXMgY291bnRyeSwgYXMgeW91IGNhbGwgaGltIChJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBzZWUgaGVyZWFmdGVyIHdoYXQgbXkgb3BpbmlvbiBvZiB0aGF0IG1hdHRlciBpcywgd2h5IGlzIG5vdCB0aGlzIHlvdXRoCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgbW9yZSB0cnVseSBvdXIgZmF0aGVyLCB0byB3aG9tIGl0IGNlcnRhaW5seSBpcyBvd2luZyB0aGF0IHdlIGFyZSBub3cKICAgICAgICAgICAgICAgICAgICBlbmpveWluZyBsaWZlLCBzYXZlZCBvdXQgb2YgeW91ciBtb3N0IGd1aWx0eSBoYW5kcz8gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.11.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGlmIGhlIHdhcyB0aGUgZmF0aGVyIG9mIGhpcyBjb3VudHJ5LCBhcyB5b3UgY2FsbCBoaW0gKEkKICAgICAgICAgICAgICAgICAgICB3aWxsIHNlZSBoZXJlYWZ0ZXIgd2hhdCBteSBvcGluaW9uIG9mIHRoYXQgbWF0dGVyIGlzLCB3aHkgaXMgbm90IHRoaXMgeW91dGgKICAgICAgICAgICAgICAgICAgICBzdGlsbCBtb3JlIHRydWx5IG91ciBmYXRoZXIsIHRvIHdob20gaXQgY2VydGFpbmx5IGlzIG93aW5nIHRoYXQgd2UgYXJlIG5vdwogICAgICAgICAgICAgICAgICAgIGVuam95aW5nIGxpZmUsIHNhdmVkIG91dCBvZiB5b3VyIG1vc3QgZ3VpbHR5IGhhbmRzPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQXJlIHRha2luZyBwYWlucyB0byBoYXZlIERvbGFiZWxsYSBsZWdhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRlbW5lZC7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEFyZSB0YWtpbmcgcGFpbnMgdG8gaGF2ZSBEb2xhYmVsbGEgbGVnYWxseQogICAgICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BIGJhc2UgYWN0aW9uLCB0cnVseSEgYnkgd2hpY2ggdGhlIGF1dGhvcml0eSBvZiB0aGlzIG1vc3QgaG9ub3JhYmxlIG9yZGVyIGlzCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZWQgYWdhaW5zdCB0aGUgaW5zYW5pdHkgb2YgYSBtb3N0IGluJyBodW1hbiBnbGFkaWF0b3IuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxBbmQgdG8gZWZmZWN0IHRoZSByZWxlYXNlIG9mIHRoaXMgcG9pc29uZXIKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBibG9ja2FkZS7igJ08L3E+IERvIHlvdSBkYXJlIHRvIGNhbGwgdGhhdCBtYW4gYSBwb2lzb25lciB3aG8KICAgICAgICAgICAgICAgICAgICBoYXMgZm91bmQgYSByZW1lZHkgYWdhaW5zdCB5b3VyIG93biBwb2lzb25pbmcgdHJpY2tzPyBhbmQgd2hvbSB5b3UgYXJlIGJlc2llZ2luZwogICAgICAgICAgICAgICAgICAgIGluIHN1Y2ggYSBtYW5uZXIsIE8geW91IG5ldyBIYW5uaWJhbCAob3IgaWYgdGhlcmUgd2FzIGV2ZXIgYW55IGFibGVyIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICB0aGFuIGhlKSwgYXMgdG8gYmxvY2thZGUgeW91cnNlbGYsIGFuZCB0byBiZSB1bmFibGUgdG8gZXh0cmljYXRlIHlvdXJzZWxmIGZyb20KICAgICAgICAgICAgICAgICAgICB5b3VyIHByZXNlbnQgcG9zaXRpb24sIHNob3VsZCB5b3UgYmUgZXZlciBzbyBkZXNpcm91cyB0byBkbyBzbz8gU3VwcG9zZSB5b3UKICAgICAgICAgICAgICAgICAgICByZXRyZWF0OyB0aGV5IHdpbGwgYWxsIHB1cnN1ZSB5b3UgZnJvbSBhbGwgc2lkZXMuIFN1cHBvc2UgeW91IHN0YXkgd2hlcmUgeW91CiAgICAgICAgICAgICAgICAgICAgYXJlOyB5b3Ugd2lsbCBiZSBjYXVnaHQuIFlvdSBhcmUgdmVyeSByaWdodCwgY2VydGFpbmx5LCB0byBjYWxsIGhpbSBhIHBvaXNvbmVyLAogICAgICAgICAgICAgICAgICAgIGJ5IHdob20geW91IHNlZSB0aGF0IHlvdXIgcHJlc2VudCBkaXNhc3Ryb3VzIGNvbmRpdGlvbiBoYXMgYmVlbiBicm91Z2h0IGFib3V0LiA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEFuZCB0byBlZmZlY3QgdGhlIHJlbGVhc2Ugb2YgdGhpcyBwb2lzb25lcgogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGJsb2NrYWRlLuKAnTwvcT4gRG8geW91IGRhcmUgdG8gY2FsbCB0aGF0IG1hbiBhIHBvaXNvbmVyIHdobwogICAgICAgICAgICAgICAgICAgIGhhcyBmb3VuZCBhIHJlbWVkeSBhZ2FpbnN0IHlvdXIgb3duIHBvaXNvbmluZyB0cmlja3M/IGFuZCB3aG9tIHlvdSBhcmUgYmVzaWVnaW5nCiAgICAgICAgICAgICAgICAgICAgaW4gc3VjaCBhIG1hbm5lciwgTyB5b3UgbmV3IEhhbm5pYmFsIChvciBpZiB0aGVyZSB3YXMgZXZlciBhbnkgYWJsZXIgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgIHRoYW4gaGUpLCBhcyB0byBibG9ja2FkZSB5b3Vyc2VsZiwgYW5kIHRvIGJlIHVuYWJsZSB0byBleHRyaWNhdGUgeW91cnNlbGYgZnJvbQogICAgICAgICAgICAgICAgICAgIHlvdXIgcHJlc2VudCBwb3NpdGlvbiwgc2hvdWxkIHlvdSBiZSBldmVyIHNvIGRlc2lyb3VzIHRvIGRvIHNvPyBTdXBwb3NlIHlvdQogICAgICAgICAgICAgICAgICAgIHJldHJlYXQ7IHRoZXkgd2lsbCBhbGwgcHVyc3VlIHlvdSBmcm9tIGFsbCBzaWRlcy4gU3VwcG9zZSB5b3Ugc3RheSB3aGVyZSB5b3UKICAgICAgICAgICAgICAgICAgICBhcmU7IHlvdSB3aWxsIGJlIGNhdWdodC4gWW91IGFyZSB2ZXJ5IHJpZ2h0LCBjZXJ0YWlubHksIHRvIGNhbGwgaGltIGEgcG9pc29uZXIsCiAgICAgICAgICAgICAgICAgICAgYnkgd2hvbSB5b3Ugc2VlIHRoYXQgeW91ciBwcmVzZW50IGRpc2FzdHJvdXMgY29uZGl0aW9uIGhhcyBiZWVuIGJyb3VnaHQgYWJvdXQuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJbiBvcmRlciB0aGF0IENhc3NpdXMgYW5kIEJydXR1cyBtYXkgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgICAgIGFzIHBvd2VyZnVsIGFzIHBvc3NpYmxlLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcSW4gb3JkZXIgdGhhdCBDYXNzaXVzIGFuZCBCcnV0dXMgbWF5IGJlY29tZQogICAgICAgICAgICAgICAgICAgICAgICBhcyBwb3dlcmZ1bCBhcyBwb3NzaWJsZS7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV291bGQgeW91IHN1cHBvc2UgdGhhdCBoZSBpcyBzcGVha2luZyBvZgogICAgICAgICAgICAgICAgICAgIENlbnNvcmludXMsIG9yIG9mIFZlbnRpZGl1cywgb3Igb2YgdGhlIEFudG9uaWkgdGhlbXNlbHZlcz8gQnV0IHdoeSBzaG91bGQgdGhleQogICAgICAgICAgICAgICAgICAgIGJlIHVud2lsbGluZyB0aGF0IHRob3NlIG1lbiBzaG91bGQgYmVjb21lIHBvd2VyZnVsLCB3aG8gYXJlIG5vdCBvbmx5IG1vc3QKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgYW5kIG5vYmx5IGJvcm4gbWVuLCBidXQgd2hvIGFyZSBhbHNvIHVuaXRlZCB3aXRoIHRoZW0gaW4gdGhlIGRlZmVuc2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWM/IDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.11.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gV291bGQgeW91IHN1cHBvc2UgdGhhdCBoZSBpcyBzcGVha2luZyBvZgogICAgICAgICAgICAgICAgICAgIENlbnNvcmludXMsIG9yIG9mIFZlbnRpZGl1cywgb3Igb2YgdGhlIEFudG9uaWkgdGhlbXNlbHZlcz8gQnV0IHdoeSBzaG91bGQgdGhleQogICAgICAgICAgICAgICAgICAgIGJlIHVud2lsbGluZyB0aGF0IHRob3NlIG1lbiBzaG91bGQgYmVjb21lIHBvd2VyZnVsLCB3aG8gYXJlIG5vdCBvbmx5IG1vc3QKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgYW5kIG5vYmx5IGJvcm4gbWVuLCBidXQgd2hvIGFyZSBhbHNvIHVuaXRlZCB3aXRoIHRoZW0gaW4gdGhlIGRlZmVuc2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWM/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJbiBmYWN0LCB5b3UgbG9vayB1cG9uIHRoZSBleGlzdGluZwogICAgICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIGFzIHlvdSBkaWQgb24gdGhlIGZvcm1lciBvbmVzLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcSW4gZmFjdCwgeW91IGxvb2sgdXBvbiB0aGUgZXhpc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcyBhcyB5b3UgZGlkIG9uIHRoZSBmb3JtZXIgb25lcy7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgY2FuIGhlIG1lYW4/IDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgdXNlZCB0byBjYWxsIHRoZSBjYW1wIG9mIFBvbXBlaXVzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzZW5hdGUu4oCdPC9xPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IHVzZWQgdG8gY2FsbCB0aGUgY2FtcCBvZiBQb21wZWl1cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2VuYXRlLuKAnTwvcT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2hvdWxkIHdlIHJhdGhlciBjYWxsIHlvdXIgY2FtcCB0aGUgc2VuYXRlPyBJbiB3aGljaCB5b3UgYXJlIHRoZSBvbmx5IG1hbiBvZgogICAgICAgICAgICAgICAgICAgIGNvbnN1bGFyIHJhbmssIHlvdSB3aG9zZSB3aG9sZSBjb25zdWxzaGlwIGlzIGVmZmFjZWQgZnJvbSBldmVyeSBtb251bWVudCBhbmQKICAgICAgICAgICAgICAgICAgICByZWdpc3RlcjsgYW5kIHR3byBwcmFldG9ycywgd2hvIGFyZSBhZnJhaWQgdGhhdCB0aGV5IHdpbGwgbG9zZSBzb21ldGhpbmcgYnkKICAgICAgICAgICAgICAgICAgICB1cyzigJRhIGdyb3VuZGxlc3MgZmVhci4gRm9yIHdlIGFyZSBtYWludGFpbmluZyBhbGwgdGhlIGdyYW50cyBtYWRlIGJ5CiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyOyBhbmQgbWVuIG9mIHByYWV0b3JpYW4gcmFuaywgUGhpbGFkZWxwaHVzIEFubml1cywgYW5kIHRoYXQgaW5ub2NlbnQKICAgICAgICAgICAgICAgICAgICBHYWxsaXVzOyBhbmQgbWVuIG9mIGFlZGlsaXRpYW4gcmFuaywgaGUgb24gd2hvbSBJIGhhdmUgc3BlbnQgc28gbXVjaCBvZiBteSBsdW5ncwogICAgICAgICAgICAgICAgICAgIGFuZCB2b2ljZSwgQmVzdGlhLCBhbmQgdGhhdCBwYXRyb24gb2YgZ29vZCBmYWl0aCBhbmQgY2hlYXRlciBvZiBoaXMgY3JlZGl0b3JzLAogICAgICAgICAgICAgICAgICAgIFRyZWJlbGxpdXMsIGFuZCB0aGF0IGJhbmtydXB0IGFuZCBydWluZWQgbWFuIFF1aW50dXMgQ2FlbGl1cywgYW5kIHRoYXQgc3VwcG9ydAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmcmllbmRzIG9mIEFudG9uaXVzIENvdHlsYSBWYXJpdXMsIHdob20gQW50b25pdXMgZm9yIGhpcyBhbXVzZW1lbnQgY2F1c2VkCiAgICAgICAgICAgICAgICAgICAgYXQgYSBiYW5xdWV0IHRvIGJlIGZsb2dnZWQgd2l0aCB0aG9uZ3MgYnkgdGhlIHB1YmxpYyBzbGF2ZXM6IE1lbiBvZiBzZXB0ZW12aXJhbAogICAgICAgICAgICAgICAgICAgIHJhbmssIExlbnRvIGFuZCBOdWN1bGEsIGFuZCB0aGVuIHRoYXQgZGVsaWdodCBhbmQgZGFybGluZyBvZiB0aGUgUm9tYW4gcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIEx1Y2l1cyBBbnRvbml1cy4gQW5kIGZvciB0cmlidW5lcywgZmlyc3Qgb2YgYWxsIHR3byB0cmlidW5lcyBlbGVjdCwgVHVsbHVzCiAgICAgICAgICAgICAgICAgICAgSG9zdGlsaXVzLCB3aG8gd2FzIHNvIGZ1bGwgb2YgaGlzIHByaXZpbGVnZXMgYXMgdG8gd3JpdGUgdXAgaGlzIG5hbWUgb24gdGhlIGdhdGUKICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMzk2MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+OyBhbmQgd2hvLCB3aGVuIGhlIGZvdW5kIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gYmV0cmF5IGhpcyBnZW5lcmFsLCBkZXNlcnRlZCBoaW0uIFRoZSBvdGhlciB0cmlidW5lIGVsZWN0IGlzIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgVmlzY2l1czsgSSBrbm93IG5vdGhpbmcgYWJvdXQgaGltOyBidXQgSSBoZWFyIHRoYXQgaGUgaXMgKGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBzYXkpIGEgYm9sZCByb2JiZXI7IHdobywgaG93ZXZlciwgdGhleSBzYXkgd2FzIG9uY2UgYSBiYXRoaW5nLW1hbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzk5MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzOTkxIj5QaXNhdXJ1bTwvcGxhY2VOYW1lPiwgYW5kIGEgdmVyeSBnb29kIGhhbmQgYXQgbWl4aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHdhdGVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+IFRoZW4gdGhlcmUgYXJlIG90aGVycyB0b28sIG9mCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuaXRpYW4gcmFuazogaW4gdGhlIGZpcnN0IHBsYWNlLCBUaXR1cyBQbGFuY3VzOyBhIG1hbiB3aG8sIGlmIGhlIGhhZCBoYWQKICAgICAgICAgICAgICAgICAgICBhbnkgYWZmZWN0aW9uIGZvciB0aGUgc2VuYXRlLCB3b3VsZCBuZXZlciBoYXZlIGJ1cm5lZCB0aGUgc2VuYXRlLWhvdXNlLiBIYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbmRlbW5lZCBmb3Igd2hpY2ggd2lja2VkbmVzcywgaGUgcmV0dXJuZWQgdG8gdGhhdCBjaXR5IGJ5IGZvcmNlIG9mIGFybXMKICAgICAgICAgICAgICAgICAgICBmcm9tIHdoaWNoIGhlIHdhcyBkcml2ZW4gYnkgdGhlIHBvd2VyIG9mIHRoZSBsYXcuIEJ1dCwgaG93ZXZlciwgdGhpcyBpcyBhIGNhc2UKICAgICAgICAgICAgICAgICAgICBjb21tb24gdG8gaGltIGFuZCB0byBtYW55IG90aGVycyB3aG8gYXJlIHZlcnkgdW5saWtlIGhpbS4gQnV0IHRoaXMgaXMgcXVpdGUgdHJ1ZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIG1lbiBhcmUgaW4gdGhlIGhhYml0IG9mIHNheWluZyBvZiB0aGlzLiBQbGFuY3VzIGluIGEgcHJvdmVyYmlhbCB3YXksIHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIGZvciBoaW0gdG8gZGllIHVubGVzcyBoaXMgbGVncyBhcmUgYnJva2VuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhhdCBpcywgd2l0aG91dCBiZWluZyBjcnVjaWZpZWQgYXMgYSBzbGF2ZS48L25vdGU+IFRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgYnJva2VuLCBhbmQgc3RpbGwgaGUgbGl2ZXMuIEJ1dCB0aGlzLCBsaWtlIG1hbnkgb3RoZXJzLCBpcyBhIHNlcnZpY2UgdGhhdCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIGRvbmUgdXMgYnkgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQwNjciIGtleT0idGduLDcwMDQwNjciPkFxdWlsYTwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMzk2MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+OyBhbmQgd2hvLCB3aGVuIGhlIGZvdW5kIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gYmV0cmF5IGhpcyBnZW5lcmFsLCBkZXNlcnRlZCBoaW0uIFRoZSBvdGhlciB0cmlidW5lIGVsZWN0IGlzIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgVmlzY2l1czsgSSBrbm93IG5vdGhpbmcgYWJvdXQgaGltOyBidXQgSSBoZWFyIHRoYXQgaGUgaXMgKGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBzYXkpIGEgYm9sZCByb2JiZXI7IHdobywgaG93ZXZlciwgdGhleSBzYXkgd2FzIG9uY2UgYSBiYXRoaW5nLW1hbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzk5MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzOTkxIj5QaXNhdXJ1bTwvcGxhY2VOYW1lPiwgYW5kIGEgdmVyeSBnb29kIGhhbmQgYXQgbWl4aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHdhdGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.12.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlbiB0aGVyZSBhcmUgb3RoZXJzIHRvbywgb2YKICAgICAgICAgICAgICAgICAgICB0cmlidW5pdGlhbiByYW5rOiBpbiB0aGUgZmlyc3QgcGxhY2UsIFRpdHVzIFBsYW5jdXM7IGEgbWFuIHdobywgaWYgaGUgaGFkIGhhZAogICAgICAgICAgICAgICAgICAgIGFueSBhZmZlY3Rpb24gZm9yIHRoZSBzZW5hdGUsIHdvdWxkIG5ldmVyIGhhdmUgYnVybmVkIHRoZSBzZW5hdGUtaG91c2UuIEhhdmluZwogICAgICAgICAgICAgICAgICAgIGJlZW4gY29uZGVtbmVkIGZvciB3aGljaCB3aWNrZWRuZXNzLCBoZSByZXR1cm5lZCB0byB0aGF0IGNpdHkgYnkgZm9yY2Ugb2YgYXJtcwogICAgICAgICAgICAgICAgICAgIGZyb20gd2hpY2ggaGUgd2FzIGRyaXZlbiBieSB0aGUgcG93ZXIgb2YgdGhlIGxhdy4gQnV0LCBob3dldmVyLCB0aGlzIGlzIGEgY2FzZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbiB0byBoaW0gYW5kIHRvIG1hbnkgb3RoZXJzIHdobyBhcmUgdmVyeSB1bmxpa2UgaGltLiBCdXQgdGhpcyBpcyBxdWl0ZSB0cnVlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggbWVuIGFyZSBpbiB0aGUgaGFiaXQgb2Ygc2F5aW5nIG9mIHRoaXMuIFBsYW5jdXMgaW4gYSBwcm92ZXJiaWFsIHdheSwgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIGhpbSB0byBkaWUgdW5sZXNzIGhpcyBsZWdzIGFyZSBicm9rZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoYXQgaXMsIHdpdGhvdXQgYmVpbmcgY3J1Y2lmaWVkIGFzIGEgc2xhdmUuPC9ub3RlPiBUaGV5IGFyZQogICAgICAgICAgICAgICAgICAgIGJyb2tlbiwgYW5kIHN0aWxsIGhlIGxpdmVzLiBCdXQgdGhpcywgbGlrZSBtYW55IG90aGVycywgaXMgYSBzZXJ2aWNlIHRoYXQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkb25lIHVzIGJ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0MDY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQwNjciPkFxdWlsYTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['13.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFsc28gaW4gdGhhdCBjYW1wIERlY2l1cywgZGVzY2VuZGVkLCBhcyBJIGJlbGlldmUsIGZyb20gdGhlIGdyZWF0IERlY2l1cwogICAgICAgICAgICAgICAgICAgIE11czsgYWNjb3JkaW5nbHkgaGUgZ2FpbmVkPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBMYXRpbiBoZXJlIGlzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkl0YXF1ZSBDYWVzYXJpcyBtdW5lcmEgcm9zaXQsPC9mb3JlaWduPuKAlHBsYXlpbmcgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bXVzPC9mb3JlaWduPiwgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bW91c2U8L2dsb3NzPjsgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIE9yZWxsaXVzIHRoaW5rcyB0aGUgd2hvbGUgcGFzc2FnZSBjb3JydXB0LCBhbmQgaW5kZWVkIHRoZXJlIGlzIGV2aWRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgY29ycnVwdGlvbiBpbiB0aGUgdGV4dCBoZXJlIGluIG1hbnkgcGxhY2VzLjwvbm90ZT4gdGhlIGdpZnRzIG9mIENhZXNhci4gQW5kCiAgICAgICAgICAgICAgICAgICAgc28gYWZ0ZXIgYSBsb25nIGludGVydmFsIHRoZSByZWNvbGxlY3Rpb24gb2YgdGhlIERlY2lpIGlzIHJlbmV3ZWQgYnkgdGhpcwogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIG1hbi4gQW5kIGhvdyBjYW4gSSBwYXNzIG92ZXIgU2F4YSBEZWNpZGl1cywgYSBmZWxsb3cgaW1wb3J0ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGRpc3RhbnQgbmF0aW9ucywgaW4gb3JkZXIgdGhhdCB3ZSBtaWdodCBzZWUgdGhhdCBtYW4gdHJpYnVuZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgd2hvbSB3ZSBoYWQgbmV2ZXIgYmVoZWxkIGFzIGEgY2l0aXplbj8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFRoZXJlIGlzIGFsc28gb25lIG9mIHRoZSBTYXNlcm5hZTsgYnV0IGFsbCBvZiB0aGVtIGhhdmUgc3VjaCBhIHJlc2VtYmxhbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgb25lIGFub3RoZXIsIHRoYXQgSSBtYXkgbWFrZSBhIG1pc3Rha2UgYXMgdG8gdGhlaXIgZmlyc3QgbmFtZXMuIE5vciBtdXN0IEkgb21pdAogICAgICAgICAgICAgICAgICAgIEV4aXRpdXMsIHRoZSBicm90aGVyIG9mIFBoaWxhZGVscGh1cyB0aGUgcXVhZXN0b3I7IGxlc3QsIGlmIEkgd2VyZSB0byBiZSBzaWxlbnQKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgeW91bmcgbWFuLCBJIHNob3VsZCBzZWVtIHRvIGJlIGVudnlpbmcgQW50b25pdXMuCiAgICAgICAgICAgICAgICAgICAgVGhlcmUgaXMgYWxzbyBhIGdlbnRsZW1hbiBvZiB0aGUgbmFtZSBvZiBBc2luaXVzLCBhIHZvbHVudGFyeSBzZW5hdG9yLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIGVsZWN0ZWQgYnkgaGltc2VsZi4gSGUgc2F3IHRoZSBzZW5hdGUtaG91c2Ugb3BlbiBhZnRlciB0aGUgZGVhdGggb2YgQ2Flc2FyLAogICAgICAgICAgICAgICAgICAgIGhlIGNoYW5nZWQgaGlzIHNob2VzLCBhbmQgaW4gYSBtb21lbnQgYmVjYW1lIGEgY29uc2NyaXB0IGZhdGhlci4gU2V4dHVzIEFsYmVkaXVzCiAgICAgICAgICAgICAgICAgICAgSSBkbyBub3Qga25vdywgYnV0IHN0aWxsIEkgaGF2ZSBub3QgZmFsbGVuIGluIHdpdGggYW55IG9uZSBzbyBmb25kIG9mCiAgICAgICAgICAgICAgICAgICAgZXZpbC1zcGVha2luZywgYXMgdG8gZGVueSB0aGF0IGhlIGlzIHdvcnRoeSBvZiBhIHBsYWNlIGluIHRoZSBzZW5hdGUgb2YKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cy4gPC9wPgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBMYXRpbiBoZXJlIGlzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkl0YXF1ZSBDYWVzYXJpcyBtdW5lcmEgcm9zaXQsPC9mb3JlaWduPuKAlHBsYXlpbmcgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bXVzPC9mb3JlaWduPiwgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bW91c2U8L2dsb3NzPjsgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIE9yZWxsaXVzIHRoaW5rcyB0aGUgd2hvbGUgcGFzc2FnZSBjb3JydXB0LCBhbmQgaW5kZWVkIHRoZXJlIGlzIGV2aWRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgY29ycnVwdGlvbiBpbiB0aGUgdGV4dCBoZXJlIGluIG1hbnkgcGxhY2VzLjwvbm90ZT4gdGhlIGdpZnRzIG9mIENhZXNhci4gQW5kCiAgICAgICAgICAgICAgICAgICAgc28gYWZ0ZXIgYSBsb25nIGludGVydmFsIHRoZSByZWNvbGxlY3Rpb24gb2YgdGhlIERlY2lpIGlzIHJlbmV3ZWQgYnkgdGhpcwogICAgICAgICAgICAgICAgICAgIGlsbHVzdHJpb3VzIG1hbi4gQW5kIGhvdyBjYW4gSSBwYXNzIG92ZXIgU2F4YSBEZWNpZGl1cywgYSBmZWxsb3cgaW1wb3J0ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGRpc3RhbnQgbmF0aW9ucywgaW4gb3JkZXIgdGhhdCB3ZSBtaWdodCBzZWUgdGhhdCBtYW4gdHJpYnVuZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgd2hvbSB3ZSBoYWQgbmV2ZXIgYmVoZWxkIGFzIGEgY2l0aXplbj8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+SXRhcXVlIENhZXNhcmlzIG11bmVyYSByb3NpdCw8L2ZvcmVpZ24+4oCUcGxheWluZyBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5tdXM8L2ZvcmVpZ24+LCA8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5tb3VzZTwvZ2xvc3M+OyBidXQKICAgICAgICAgICAgICAgICAgICAgICAgT3JlbGxpdXMgdGhpbmtzIHRoZSB3aG9sZSBwYXNzYWdlIGNvcnJ1cHQsIGFuZCBpbmRlZWQgdGhlcmUgaXMgZXZpZGVudAogICAgICAgICAgICAgICAgICAgICAgICBjb3JydXB0aW9uIGluIHRoZSB0ZXh0IGhlcmUgaW4gbWFueSBwbGFjZXMuPC90cmFuc2xhdGlvbj4="
translation['13.13.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBUaGVyZSBpcyBhbHNvIG9uZSBvZiB0aGUgU2FzZXJuYWU7IGJ1dCBhbGwgb2YgdGhlbSBoYXZlIHN1Y2ggYSByZXNlbWJsYW5jZSB0bwogICAgICAgICAgICAgICAgICAgIG9uZSBhbm90aGVyLCB0aGF0IEkgbWF5IG1ha2UgYSBtaXN0YWtlIGFzIHRvIHRoZWlyIGZpcnN0IG5hbWVzLiBOb3IgbXVzdCBJIG9taXQKICAgICAgICAgICAgICAgICAgICBFeGl0aXVzLCB0aGUgYnJvdGhlciBvZiBQaGlsYWRlbHBodXMgdGhlIHF1YWVzdG9yOyBsZXN0LCBpZiBJIHdlcmUgdG8gYmUgc2lsZW50CiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIHlvdW5nIG1hbiwgSSBzaG91bGQgc2VlbSB0byBiZSBlbnZ5aW5nIEFudG9uaXVzLgogICAgICAgICAgICAgICAgICAgIFRoZXJlIGlzIGFsc28gYSBnZW50bGVtYW4gb2YgdGhlIG5hbWUgb2YgQXNpbml1cywgYSB2b2x1bnRhcnkgc2VuYXRvciwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVlbiBlbGVjdGVkIGJ5IGhpbXNlbGYuIEhlIHNhdyB0aGUgc2VuYXRlLWhvdXNlIG9wZW4gYWZ0ZXIgdGhlIGRlYXRoIG9mIENhZXNhciwKICAgICAgICAgICAgICAgICAgICBoZSBjaGFuZ2VkIGhpcyBzaG9lcywgYW5kIGluIGEgbW9tZW50IGJlY2FtZSBhIGNvbnNjcmlwdCBmYXRoZXIuIFNleHR1cyBBbGJlZGl1cwogICAgICAgICAgICAgICAgICAgIEkgZG8gbm90IGtub3csIGJ1dCBzdGlsbCBJIGhhdmUgbm90IGZhbGxlbiBpbiB3aXRoIGFueSBvbmUgc28gZm9uZCBvZgogICAgICAgICAgICAgICAgICAgIGV2aWwtc3BlYWtpbmcsIGFzIHRvIGRlbnkgdGhhdCBoZSBpcyB3b3J0aHkgb2YgYSBwbGFjZSBpbiB0aGUgc2VuYXRlIG9mCiAgICAgICAgICAgICAgICAgICAgQW50b25pdXMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBkYXJlIHNheSB0aGF0IEkgaGF2ZSBwYXNzZWQgb3ZlciBzb21lIG5hbWVzOyBidXQgc3RpbGwgSSBjb3VsZCBub3QgcmVmcmFpbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmluZyB0aG9zZSB3aG8gZGlkIG9jY3VyIHRvIG1lLiBSZWx5aW5nIHRoZW4gb24gdGhpcyBzZW5hdGUsIGhlIGxvb2tzIGRvd24KICAgICAgICAgICAgICAgICAgICBvbiB0aGUgc2VuYXRlIHdoaWNoIHN1cHBvcnRlZCBQb21wZWl1cywgaW4gd2hpY2ggdGVuIG9mIHVzIHdlcmUgbWVuIG9mIGNvbnN1bGFyCiAgICAgICAgICAgICAgICAgICAgcmFuazsgYW5kIGlmIHRoZXkgd2VyZSBhbGwgYWxpdmUgbm93IHRoaXMgd2FyIHdvdWxkIG5ldmVyIGhhdmUgYXJpc2VuIGF0IGFsbC4KICAgICAgICAgICAgICAgICAgICBBdWRhY2l0eSB3b3VsZCBoYXZlIHN1Y2N1bWJlZCB0byBhdXRob3JpdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBCdXQgd2hhdCBncmVhdCBwcm90ZWN0aW9uIHRoZXJlIHdvdWxkIGhhdmUgYmVlbiBpbiB0aGUgcmVzdCBtYXkgYmUgdW5kZXJzdG9vZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhpcywgdGhhdCBJLCB3aGVuIGxlZnQgYWxvbmUgb2YgYWxsIHRoYXQgYmFuZCwgd2l0aCB5b3VyIGFzc2lzdGFuY2UKICAgICAgICAgICAgICAgICAgICBjcnVzaGVkIGFuZCBicm9rZSB0aGUgYXVkYWNpdHkgb2YgdGhhdCB0cml1bXBoYW50IHJvYmJlci4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.13.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBCdXQgd2hhdCBncmVhdCBwcm90ZWN0aW9uIHRoZXJlIHdvdWxkIGhhdmUgYmVlbiBpbiB0aGUgcmVzdCBtYXkgYmUgdW5kZXJzdG9vZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhpcywgdGhhdCBJLCB3aGVuIGxlZnQgYWxvbmUgb2YgYWxsIHRoYXQgYmFuZCwgd2l0aCB5b3VyIGFzc2lzdGFuY2UKICAgICAgICAgICAgICAgICAgICBjcnVzaGVkIGFuZCBicm9rZSB0aGUgYXVkYWNpdHkgb2YgdGhhdCB0cml1bXBoYW50IHJvYmJlci4gPC90cmFuc2xhdGlvbj4="
translation['13.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpZiBGb3J0dW5lIGhhZCBub3QgdGFrZW4gZnJvbSB1cyBub3Qgb25seSBTZXJ2aXVzIFN1bHBpY2l1cywgYW5kIGJlZm9yZSBoaW0sCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbGxlYWd1ZSBNYXJjdXMgTWFyY2VsbHVzLOKAlHdoYXQgY2l0aXplbnMhIFdoYXQgbWVuISBJZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBoYWQgYmVlbiBhYmxlIHRvIHJldGFpbiB0aGUgdHdvIGNvbnN1bHMsIG1lbiBtb3N0IGRldm90ZWQgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LCB3aG8gd2VyZSBkcml2ZW4gdG9nZXRoZXIgb3V0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyBhbmQgTHVjaXVzIEFmcmFuaXVzLCB0aGF0IGNvbnN1bW1hdGUgZ2VuZXJhbDsgYW5kCiAgICAgICAgICAgICAgICAgICAgUHVibGl1cyBMZW50dWx1cywgYSBjaXRpemVuIHdobyBkaXNwbGF5ZWQgaGlzIGV4dHJhb3JkaW5hcnkgdmlydHVlIG9uIG90aGVyCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb25zLCBhbmQgZXNwZWNpYWxseSBpbiB0aGUgc2VjdXJpbmcgbXkgc2FmZSByZXR1cm47IGFuZCBCaWJ1bHVzLCB3aG9zZQogICAgICAgICAgICAgICAgICAgIGNvbnN0YW50IGFuZCBmaXJtIGF0dGFjaG1lbnQgdG8gdGhlIHJlcHVibGljIGhhcyBhdCBhbGwgdGltZXMgYmVlbiBkZXNlcnZlZGx5CiAgICAgICAgICAgICAgICAgICAgcHJhaXNlZDsgYW5kIEx1Y2l1cyBEb21pdGl1cywgdGhhdCBtb3N0IGV4Y2VsbGVudCBjaXRpemVuOyBhbmQgQXBwaXVzIENsYXVkaXVzLAogICAgICAgICAgICAgICAgICAgIGEgbWFuIGVxdWFsbHkgZGlzdGluZ3Vpc2hlZCBmb3Igbm9ibGVuZXNzIG9mIGJpcnRoIGFuZCBmb3IgYXR0YWNobWVudCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZTsgYW5kIFB1YmxpdXMgU2NpcGlvLCBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBjbG9zZWx5IHJlc2VtYmxpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiBDZXJ0YWlubHkgd2l0aCB0aGVzZSBtZW4gb2YgY29uc3VsYXIgcmFuayw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUKICAgICAgICAgICAgICAgICAgICAgICAgbWVhbnMgTHVjaXVzIEFlbWlsaXVzIFBhdWxsdXMsIGFuZCBDYWl1cyBDbGF1ZGl1cyBNYXJjZWxsdXMsIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHMgdGhlIHllYXIgYWZ0ZXIgU2Vydml1cyBTdWxwaWNpdXMgYW5kIE1hcmN1cyBDbGF1ZGl1cyBNYXJjZWxsdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIEEuVS5DLiA3MDQuPC9ub3RlPiB0aGUgc2VuYXRlIHdoaWNoIHN1cHBvcnRlZCBQb21wZWl1cyB3YXMgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZGVzcGlzZWQuIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+OyBhbmQgTHVjaXVzIEFmcmFuaXVzLCB0aGF0IGNvbnN1bW1hdGUgZ2VuZXJhbDsgYW5kCiAgICAgICAgICAgICAgICAgICAgUHVibGl1cyBMZW50dWx1cywgYSBjaXRpemVuIHdobyBkaXNwbGF5ZWQgaGlzIGV4dHJhb3JkaW5hcnkgdmlydHVlIG9uIG90aGVyCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb25zLCBhbmQgZXNwZWNpYWxseSBpbiB0aGUgc2VjdXJpbmcgbXkgc2FmZSByZXR1cm47IGFuZCBCaWJ1bHVzLCB3aG9zZQogICAgICAgICAgICAgICAgICAgIGNvbnN0YW50IGFuZCBmaXJtIGF0dGFjaG1lbnQgdG8gdGhlIHJlcHVibGljIGhhcyBhdCBhbGwgdGltZXMgYmVlbiBkZXNlcnZlZGx5CiAgICAgICAgICAgICAgICAgICAgcHJhaXNlZDsgYW5kIEx1Y2l1cyBEb21pdGl1cywgdGhhdCBtb3N0IGV4Y2VsbGVudCBjaXRpemVuOyBhbmQgQXBwaXVzIENsYXVkaXVzLAogICAgICAgICAgICAgICAgICAgIGEgbWFuIGVxdWFsbHkgZGlzdGluZ3Vpc2hlZCBmb3Igbm9ibGVuZXNzIG9mIGJpcnRoIGFuZCBmb3IgYXR0YWNobWVudCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZTsgYW5kIFB1YmxpdXMgU2NpcGlvLCBhIG1vc3QgaWxsdXN0cmlvdXMgbWFuLCBjbG9zZWx5IHJlc2VtYmxpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiBDZXJ0YWlubHkgd2l0aCB0aGVzZSBtZW4gb2YgY29uc3VsYXIgcmFuayw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUKICAgICAgICAgICAgICAgICAgICAgICAgbWVhbnMgTHVjaXVzIEFlbWlsaXVzIFBhdWxsdXMsIGFuZCBDYWl1cyBDbGF1ZGl1cyBNYXJjZWxsdXMsIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHMgdGhlIHllYXIgYWZ0ZXIgU2Vydml1cyBTdWxwaWNpdXMgYW5kIE1hcmN1cyBDbGF1ZGl1cyBNYXJjZWxsdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIEEuVS5DLiA3MDQuPC9ub3RlPiB0aGUgc2VuYXRlIHdoaWNoIHN1cHBvcnRlZCBQb21wZWl1cyB3YXMgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZGVzcGlzZWQuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPiBXaGljaCwgdGhlbiwgd2FzIG1vcmUganVzdCwgd2hpY2ggd2FzIG1vcmUKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2VvdXMgZm9yIHRoZSByZXB1YmxpYywgdGhhdCBDbmFldXMgUG9tcGVpdXMsIG9yIHRoYXQgQW50b25pdXMgdGhlCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciB3aG8gYm91Z2h0IGFsbCBQb21wZWl1cydzIHByb3BlcnR5LCBzaG91bGQgbGl2ZT8gQW5kIHRoZW4gd2hhdCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBwcmFldG9yaWFuIHJhbmsgd2VyZSB3aXRoIHVzISB0aGUgY2hpZWYgb2Ygd2hvbSB3YXMgTWFyY3VzIENhdG8sIGJlaW5nIGluZGVlZAogICAgICAgICAgICAgICAgICAgIHRoZSBjaGllZiBtYW4gb2YgYW55IG5hdGlvbiBpbiB0aGUgd29ybGQgZm9yIHZpcnR1ZS4gV2h5IG5lZWQgSSBzcGVhayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBtb3N0IGlsbHVzdHJpb3VzIG1lbj8geW91IGtub3cgdGhlbSBhbGwuIEkgYW0gbW9yZSBhZnJhaWQgbGVzdCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgbWUgdGVkaW91cyBmb3IgZW51bWVyYXRpbmcgc28gbWFueSwgdGhhbiB1bmdyYXRlZnVsIGZvciBwYXNzaW5nIG92ZXIgYW55CiAgICAgICAgICAgICAgICAgICAgb25lLiBBbmQgd2hhdCBtZW4gb2YgYWVkaWxpdGlhbiByYW5rISBhbmQgb2YgdHJpYnVuaXRpYW4gcmFuayEgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgcXVhZXN0b3JpYW4gcmFuayEgV2h5IG5lZWQgSSBtYWtlIGEgbG9uZyBzdG9yeSBvZiBpdD8gc28gZ3JlYXQgd2FzIHRoZSBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNlbmF0b3JzIG9mIG91ciBwYXJ0eSwgc28gZ3JlYXQgdG9vIHdlcmUgdGhlaXIgbnVtYmVycywgdGhhdCB0aG9zZSBtZW4KICAgICAgICAgICAgICAgICAgICBoYXZlIG5lZWQgb2Ygc29tZSB2ZXJ5IHZhbGlkIGV4Y3VzZSB3aG8gZGlkIG5vdCBqb2luIHRoYXQgY2FtcC4gTm93IGxpc3RlbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSByZXN0IG9mIHRoZSBsZXR0ZXIuIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.14.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hpY2gsIHRoZW4sIHdhcyBtb3JlIGp1c3QsIHdoaWNoIHdhcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlb3VzIGZvciB0aGUgcmVwdWJsaWMsIHRoYXQgQ25hZXVzIFBvbXBlaXVzLCBvciB0aGF0IEFudG9uaXVzIHRoZQogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgd2hvIGJvdWdodCBhbGwgUG9tcGVpdXMncyBwcm9wZXJ0eSwgc2hvdWxkIGxpdmU/IEFuZCB0aGVuIHdoYXQgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgcHJhZXRvcmlhbiByYW5rIHdlcmUgd2l0aCB1cyEgdGhlIGNoaWVmIG9mIHdob20gd2FzIE1hcmN1cyBDYXRvLCBiZWluZyBpbmRlZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY2hpZWYgbWFuIG9mIGFueSBuYXRpb24gaW4gdGhlIHdvcmxkIGZvciB2aXJ0dWUuIFdoeSBuZWVkIEkgc3BlYWsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbW9zdCBpbGx1c3RyaW91cyBtZW4/IHlvdSBrbm93IHRoZW0gYWxsLiBJIGFtIG1vcmUgYWZyYWlkIGxlc3QgeW91IHNob3VsZAogICAgICAgICAgICAgICAgICAgIHRoaW5rIG1lIHRlZGlvdXMgZm9yIGVudW1lcmF0aW5nIHNvIG1hbnksIHRoYW4gdW5ncmF0ZWZ1bCBmb3IgcGFzc2luZyBvdmVyIGFueQogICAgICAgICAgICAgICAgICAgIG9uZS4gQW5kIHdoYXQgbWVuIG9mIGFlZGlsaXRpYW4gcmFuayEgYW5kIG9mIHRyaWJ1bml0aWFuIHJhbmshIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIHF1YWVzdG9yaWFuIHJhbmshIFdoeSBuZWVkIEkgbWFrZSBhIGxvbmcgc3Rvcnkgb2YgaXQ/IHNvIGdyZWF0IHdhcyB0aGUgZGlnbml0eQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzZW5hdG9ycyBvZiBvdXIgcGFydHksIHNvIGdyZWF0IHRvbyB3ZXJlIHRoZWlyIG51bWJlcnMsIHRoYXQgdGhvc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBuZWVkIG9mIHNvbWUgdmVyeSB2YWxpZCBleGN1c2Ugd2hvIGRpZCBub3Qgam9pbiB0aGF0IGNhbXAuIE5vdyBsaXN0ZW4gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgbGV0dGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgdGhlIGRlZmVhdGVkIENpY2VybyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgdGhlIGRlZmVhdGVkIENpY2VybyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBhbSB0aGUgbW9yZSBnbGFkIHRvIGhlYXIgdGhhdCB3b3JkIOKAnGdlbmVyYWws4oCdIGJlY2F1c2UgaGUKICAgICAgICAgICAgICAgICAgICBjZXJ0YWlubHkgdXNlcyBpdCBhZ2FpbnN0IGhpcyB3aWxsOyBmb3IgYXMgZm9yIGhpcyBzYXlpbmcKICAgICAgICAgICAgICAgICAgICDigJxkZWZlYXRlZCzigJ0gSSBkbyBub3QgbWluZCB0aGF0OyBmb3IgaXQgaXMgbXkgZmF0ZSB0aGF0IEkgY2FuCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBiZSB2aWN0b3Jpb3VzIG5vciBkZWZlYXRlZCB3aXRob3V0IHRoZSByZXB1YmxpYyBiZWluZyBzbyBhdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHRpbWUuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgYXJlIGZvcnRpZnlpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHdpdGggYXJtaWVzLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGFyZSBmb3J0aWZ5aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3aXRoIGFybWllcy7igJ08L3E+CiAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gd2l0aCBhcm1pZXMu4oCdPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5ZZXMsIGluZGVlZCwgYW5kIHdlIGhhdmUgd3Jlc3RlZCBvbmUgZnJvbSB5b3VyIGJyb3RoZXIsIHdobyBkb2VzIG5vdCBpbiB0aGUgbGVhc3QKICAgICAgICAgICAgICAgICAgICBkZWdlbmVyYXRlIGZyb20geW91LiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgZW50cnVzdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiB0byBWYXJ1cywgd2hvIGhhcyBiZWVuIHR3aWNlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXNvbmVyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgZW50cnVzdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiB0byBWYXJ1cywgd2hvIGhhcyBiZWVuIHR3aWNlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXNvbmVyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiB0byBWYXJ1cywgd2hvIGhhcyBiZWVuIHR3aWNlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXNvbmVyLuKAnTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyZSBoZSB0aGlua3MgdGhhdCBoZSBpcyBtYWtpbmcgb3V0IGEgY2FzZSBhZ2FpbnN0IGhpcyBvd24gYnJvdGhlciBMdWNpdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.15.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgaGF2ZSBzZW50IENhcGl1cyBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+LuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgc2VudCBDYXBpdXMgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPi7igJ08L3E+CiAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPi7igJ08cCBjbGFzcz0idHJhbnNsYXRpb24iPiBEbyB5b3Ugbm90IHNlZSB0aGVuLCBPIEFudG9uaXVzLCB0aGF0IHRoZSB3aG9sZSB3b3VsZCBpcyBvcGVuIHRvIG91ciBwYXJ0eSwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgaGF2ZSBubyBzcG90LCBvdXQgb2YgeW91ciBvd24gZm9ydGlmaWNhdGlvbnMsIHdoZXJlIHlvdSBjYW4gc2V0IHlvdXIKICAgICAgICAgICAgICAgICAgICBmb290PyA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgYWxsb3dlZCBDYXNjYSB0byBkaXNjaGFyZ2UgdGhlIG9mZmljZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0cmlidW5lLuKAnTwvcT4gV2hhdCB0aGVuPyBXZXJlIHdlIHRvIHJlbW92ZSBhIG1hbiwgYXMgaWYgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBNYXJhbGx1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVzZSB0d28gd2VyZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gZGlzcG9zc2Vzc2VkIG9mIHRoZWlyIG9mZmljZXMgYnkgSnVsaXVzIENhZXNhci48L25vdGU+IG9yIENhZXNldGl1cywgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHdlIG93biBpdCwgdGhhdCB0aGlzIGFuZCBtYW55IG90aGVyIHRoaW5ncyBsaWtlIHRoaXMgY2FuIG5ldmVyIGhhcHBlbiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgZnV0dXJlPyA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFlvdSBoYXZlIHRha2VuIGF3YXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTHVwZXJjaSB0aGUgcmV2ZW51ZXMgd2hpY2ggSnVsaXVzIENhZXNhciBhc3NpZ25lZCB0byB0aGVtLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgYWxsb3dlZCBDYXNjYSB0byBkaXNjaGFyZ2UgdGhlIG9mZmljZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0cmlidW5lLuKAnTwvcT4gV2hhdCB0aGVuPyBXZXJlIHdlIHRvIHJlbW92ZSBhIG1hbiwgYXMgaWYgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBNYXJhbGx1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVzZSB0d28gd2VyZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gZGlzcG9zc2Vzc2VkIG9mIHRoZWlyIG9mZmljZXMgYnkgSnVsaXVzIENhZXNhci48L25vdGU+IG9yIENhZXNldGl1cywgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHdlIG93biBpdCwgdGhhdCB0aGlzIGFuZCBtYW55IG90aGVyIHRoaW5ncyBsaWtlIHRoaXMgY2FuIG5ldmVyIGhhcHBlbiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgZnV0dXJlPyA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFlvdSBoYXZlIHRha2VuIGF3YXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTHVwZXJjaSB0aGUgcmV2ZW51ZXMgd2hpY2ggSnVsaXVzIENhZXNhciBhc3NpZ25lZCB0byB0aGVtLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RG9lcyBoZSBkYXJlIHRvIG1ha2UgbWVudGlvbiBvZiB0aGUgTHVwZXJjaT8gRG9lcyBoZXIgbm90IHNodWRkZXIgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0aW9uIG9mIHRoYXQgZGF5IG9uIHdoaWNoLCBzbWVsbGluZyBvZiB3aW5lLCByZWVraW5nIHdpdGggcGVyZnVtZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIG5ha2VkLCBoZSBkYXJlZCB0byBleGhvcnQgdGhlIGluZGlnbmFudCBSb21hbiBwZW9wbGUgdG8gZW1icmFjZSBzbGF2ZXJ5PyA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91LCBieSBhIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSwgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIHRoZSBjb2xvbmllcyBvZiB0aGUgdmV0ZXJhbnMgd2hpY2ggaGFkIGJlZW4gbGVnYWxseQogICAgICAgICAgICAgICAgICAgICAgICBzZXR0bGVkLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91LCBieSBhIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSwgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIHRoZSBjb2xvbmllcyBvZiB0aGUgdmV0ZXJhbnMgd2hpY2ggaGFkIGJlZW4gbGVnYWxseQogICAgICAgICAgICAgICAgICAgICAgICBzZXR0bGVkLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2ZSB3ZSByZW1vdmVkIHRoZW0sIG9yIGhhdmUgd2UgcmF0aGVyIHJhdGlmaWVkIGEgbGF3IHdoaWNoIHdhcyBwYXNzZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4/IFNlZSwgcmF0aGVyLCB3aGV0aGVyIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHlvdSB3aG8gaGF2ZSBydWluZWQgdGhlc2UgdmV0ZXJhbnMgKHRob3NlIGF0IGxlYXN0IHdobyBhcmUgcnVpbmVkKSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2V0dGxlZCB0aGVtIGluIGEgcGxhY2UgZnJvbSB3aGljaCB0aGV5IHRoZW1zZWx2ZXMgbm93IGZlZWwgdGhhdCB0aGV5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGUgYWJsZSB0byBtYWtlIHRoZWlyIGVzY2FwZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4/IFNlZSwgcmF0aGVyLCB3aGV0aGVyIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHlvdSB3aG8gaGF2ZSBydWluZWQgdGhlc2UgdmV0ZXJhbnMgKHRob3NlIGF0IGxlYXN0IHdobyBhcmUgcnVpbmVkKSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2V0dGxlZCB0aGVtIGluIGEgcGxhY2UgZnJvbSB3aGljaCB0aGV5IHRoZW1zZWx2ZXMgbm93IGZlZWwgdGhhdCB0aGV5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGUgYWJsZSB0byBtYWtlIHRoZWlyIGVzY2FwZS4gPC90cmFuc2xhdGlvbj4="
translation['13.15.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGFyZSBwcm9taXNpbmcgdG8gcmVzdG9yZSB0byB0aGUgcGVvcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+IHdoYXQgaGFzIGJlZW4gdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVtIGJ5IHRoZSBsYXdzIG9mIHdhci7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFlvdSBhcmUgcHJvbWlzaW5nIHRvIHJlc3RvcmUgdG8gdGhlIHBlb3BsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiB3aGF0IGhhcyBiZWVuIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlbSBieSB0aGUgbGF3cyBvZiB3YXIu4oCdPC9xPgogICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiB3aGF0IGhhcyBiZWVuIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlbSBieSB0aGUgbGF3cyBvZiB3YXIu4oCdPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGFtIG5vdCBnb2luZyB0byBkaXNjdXNzIHRoZSBsYXdzIG9mIHdhci4gSXQgaXMgYSBkaXNjdXNzaW9uIGZhciBtb3JlIGVhc3kgdG8KICAgICAgICAgICAgICAgICAgICBiZWdpbiB0aGFuIG5lY2Vzc2FyeS4gQnV0IHRha2Ugbm90aWNlIG9mIHRoaXMsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdoYXQgYSBib3JuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgdG8gdGhlIHJlcHVibGljIEFudG9uaXVzIGlzLCB3aG8gaXMgc28gdmlvbGVudCBpbiBoaXMgaGF0cmVkIG9mIHRoYXQgY2l0eQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGtub3dzIHRvIGhhdmUgYmVlbiBhdCBhbGwgdGltZXMgbW9zdCBmaXJtbHkgYXR0YWNoZWQgdG8gdGhpcyByZXB1YmxpYy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcW0RvIHlvdSBub3Qga25vd10gdGhhdCBubyBvbmUgb2YgdGhlIHBhcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBvbXBlaXVzLCB3aG8gaXMgc3RpbGwgYWxpdmUsIGNhbiwgYnkgdGhlIEhpcnRpYW4gbGF3LCBwb3NzZXNzIGFueQogICAgICAgICAgICAgICAgICAgICAgICByYW5rP+KAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcW0RvIHlvdSBub3Qga25vd10gdGhhdCBubyBvbmUgb2YgdGhlIHBhcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBvbXBlaXVzLCB3aG8gaXMgc3RpbGwgYWxpdmUsIGNhbiwgYnkgdGhlIEhpcnRpYW4gbGF3LCBwb3NzZXNzIGFueQogICAgICAgICAgICAgICAgICAgICAgICByYW5rP+KAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCwgSSBzaG91bGQgbGlrZSB0byBrbm93LCBpcyB0aGUgb2JqZWN0IG9mIG5vdyBtYWtpbmcgbWVudGlvbiBvZiB0aGUgSGlydGlhbgogICAgICAgICAgICAgICAgICAgIGxhdz/igJRhIGxhdyBvZiB3aGljaCBJIGJlbGlldmUgdGhlIGZyYW1lciBoaW1zZWxmIHJlcGVudHMgbm8gbGVzcyB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgYWdhaW5zdCB3aG9tIGl0IHdhcyBwYXNzZWQuIEFjY29yZGluZyB0byBteSBvcGluaW9uLCBpdCBpcyB1dHRlcmx5IHdyb25nCiAgICAgICAgICAgICAgICAgICAgdG8gY2FsbCBpdCBhIGxhdyBhdCBhbGw7IGFuZCwgZXZlbiBpZiBpdCBiZSBhIGxhdywgd2Ugb3VnaHQgbm90IHRvIHRoaW5rIGl0IGEKICAgICAgICAgICAgICAgICAgICBsYXcgb2YgSGlydGl1cy4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFlvdSBoYXZlIGZ1cm5pc2hlZCBCcnV0dXMgd2l0aCBtb25leQogICAgICAgICAgICAgICAgICAgICAgICBiZWxvbmdpbmcgdG8gQXB1bGVpdXMu4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgaGF2ZSBmdXJuaXNoZWQgQnJ1dHVzIHdpdGggbW9uZXkKICAgICAgICAgICAgICAgICAgICAgICAgYmVsb25naW5nIHRvIEFwdWxlaXVzLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2VsbD8gU3VwcG9zZSB0aGUgcmVwdWJsaWMgaGFkIGZ1cm5pc2hlZCB0aGF0IGV4Y2VsbGVudCBtYW4gd2l0aCBhbGwgaXRzCiAgICAgICAgICAgICAgICAgICAgdHJlYXN1cmVzIGFuZCByZXNvdXJjZXMsIHdoYXQgZ29vZCBtYW4gd291bGQgaGF2ZSBkaXNhcHByb3ZlZCBvZiBpdD8gRm9yIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBtb25leSBoZSBjb3VsZCBub3QgaGF2ZSBzdXBwb3J0ZWQgYW4gYXJteSwgbm9yIHdpdGhvdXQgYW4gYXJteSBjb3VsZCBoZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGFrZW4geW91ciBicm90aGVyIHByaXNvbmVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.16.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgcHJhaXNlZCB0aGUgZXhlY3V0aW9uIG9mIFBhZXR1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgTWVuZWRlbXVzLCBtZW4gd2hvIGhhZCBiZWVuIHByZXNlbnRlZCB3aXRoIHRoZSBmcmVlZG9tIG9mIHRoZSBjaXR5LCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgdW5pdGVkIGJ5IHRpZXMgb2YgaG9zcGl0YWxpdHkgdG8gQ2Flc2FyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IGhhdmUgcHJhaXNlZCB0aGUgZXhlY3V0aW9uIG9mIFBhZXR1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgTWVuZWRlbXVzLCBtZW4gd2hvIGhhZCBiZWVuIHByZXNlbnRlZCB3aXRoIHRoZSBmcmVlZG9tIG9mIHRoZSBjaXR5LCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgdW5pdGVkIGJ5IHRpZXMgb2YgaG9zcGl0YWxpdHkgdG8gQ2Flc2FyLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgZG8gbm90IHByYWlzZSB3aGF0IHdlIGhhdmUgbmV2ZXIgZXZlbiBoZWFyZCBvZjsgd2Ugd2VyZSB2ZXJ5IGxpa2VseSwgaW4gc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgb2YgY29uZnVzaW9uIGFuZCBzdWNoIGEgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgdG8gYnVzeSBvdXIgbWluZHMKICAgICAgICAgICAgICAgICAgICBhYm91dCB0d28gd29ydGhsZXNzIEdyZWVrbGluZ3MhIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgdG9vayBubyBub3RpY2Ugb2YgVGhlb3BvbXB1cyBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBzdHJpcHBlZCwgYW5kIGRyaXZlbiBvdXQgYnkgVHJlYm9uaXVzLCBhbmQgY29tcGVsbGVkIHRvIGZsZWUgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcWW91IHRvb2sgbm8gbm90aWNlIG9mIFRoZW9wb21wdXMgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBwZWQsIGFuZCBkcml2ZW4gb3V0IGJ5IFRyZWJvbml1cywgYW5kIGNvbXBlbGxlZCB0byBmbGVlIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQWxleGFuZHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPi7igJ08L3E+CiAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT4u4oCdPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgc2VuYXRlIGhhcyBpbmRlZWQgYmVlbiB2ZXJ5IGd1aWx0eSEgV2UgaGF2ZSB0YWtlbiBubyBub3RpY2Ugb2YgdGhhdCBncmVhdCBtYW4KICAgICAgICAgICAgICAgICAgICBUaGVvcG9tcHVzISBXaHksIHdobyBvbiBlYXJ0aCBrbm93cyBvciBjYXJlcyB3aGVyZSBoZSBpcywgb3Igd2hhdCBoZSBpcyBkb2luZzsKICAgICAgICAgICAgICAgICAgICBvciwgaW5kZWVkLCB3aGV0aGVyIGhlIGlzIGFsaXZlIG9yIGRlYWQ/IDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgZW5kdXJlIHRoZSBzaWdodCBvZiBTZXJnaXVzLiBHYWxiYSBpbgogICAgICAgICAgICAgICAgICAgICAgICB5b3VyIGNhbXAsIGFybWVkIHdpdGggdGhlIHNhbWUgZGFnZ2VyIHdpdGggd2hpY2ggaGUgc2xldwogICAgICAgICAgICAgICAgICAgICAgICBDYWVzYXIu4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgZW5kdXJlIHRoZSBzaWdodCBvZiBTZXJnaXVzLiBHYWxiYSBpbgogICAgICAgICAgICAgICAgICAgICAgICB5b3VyIGNhbXAsIGFybWVkIHdpdGggdGhlIHNhbWUgZGFnZ2VyIHdpdGggd2hpY2ggaGUgc2xldwogICAgICAgICAgICAgICAgICAgICAgICBDYWVzYXIu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHNoYWxsIG1ha2UgeW91IG5vIHJlcGx5IGF0IGFsbCBhYm91dCBHYWxiYTsgYSBtb3N0IGdhbGxhbnQgYW5kIGNvdXJhZ2VvdXMKICAgICAgICAgICAgICAgICAgICBjaXRpemVuLiBIZSB3aWxsIG1lZXQgeW91IGZhY2UgdG8gZmFjZTsgYW5kIGhlIGJlaW5nIHByZXNlbnQsIGFuZCB0aGF0IGRhZ2dlcgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSByZXByb2FjaCBoaW0gd2l0aCwgc2hhbGwgZ2l2ZSB5b3UgeW91ciBhbnN3ZXIuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgaGF2ZSBlbmxpc3RlZCBteSBzb2xkaWVycywgYW5kIG1hbnkKICAgICAgICAgICAgICAgICAgICAgICAgdmV0ZXJhbnMsIHVuZGVyIHRoZSBwcmV0ZW5zZSBvZiBpbnRlbmRpbmcgdGhlIGRlc3RydWN0aW9uIG9mIHRob3NlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgc2xldyBDYWVzYXI7IGFuZCB0aGVuLCB3aGVuIHRoZXkgZXhwZWN0ZWQgbm8gc3VjaCBzdGVwLCB5b3UgaGF2ZSBsZWQgdGhlbSBvbgogICAgICAgICAgICAgICAgICAgICAgICB0byBhdHRhY2sgdGhlaXIgcXVhZXN0b3IsIHRoZWlyIGdlbmVyYWwsIGFuZCB0aGVpciBmb3JtZXIKICAgICAgICAgICAgICAgICAgICAgICAgY29tcmFkZXMh4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3UgaGF2ZSBlbmxpc3RlZCBteSBzb2xkaWVycywgYW5kIG1hbnkKICAgICAgICAgICAgICAgICAgICAgICAgdmV0ZXJhbnMsIHVuZGVyIHRoZSBwcmV0ZW5zZSBvZiBpbnRlbmRpbmcgdGhlIGRlc3RydWN0aW9uIG9mIHRob3NlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgc2xldyBDYWVzYXI7IGFuZCB0aGVuLCB3aGVuIHRoZXkgZXhwZWN0ZWQgbm8gc3VjaCBzdGVwLCB5b3UgaGF2ZSBsZWQgdGhlbSBvbgogICAgICAgICAgICAgICAgICAgICAgICB0byBhdHRhY2sgdGhlaXIgcXVhZXN0b3IsIHRoZWlyIGdlbmVyYWwsIGFuZCB0aGVpciBmb3JtZXIKICAgICAgICAgICAgICAgICAgICAgICAgY29tcmFkZXMh4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5ObyBkb3VidCB3ZSBkZWNlaXZlZCB0aGVtOyB3ZSBodW1idWdnZWQgdGhlbSBjb21wbGV0ZWx5ISBubyBkb3VidCB0aGUgTWFydGlhbAogICAgICAgICAgICAgICAgICAgIGxlZ2lvbiwgdGhlIGZvdXJ0aCBsZWdpb24sIGFuZCB0aGUgdmV0ZXJhbnMgaGFkIG5vIGlkZWEgd2hhdCB3YXMgZ29pbmcgb24hIFRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIG5vdCBmb2xsb3dpbmcgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCBvciB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUu4oCUVGhleSB3ZXJlIGFueGlvdXMgdG8gYXZlbmdlIHRoZSBkZWF0aCBvZiBDYWVzYXIsIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBhbGwgcmVnYXJkZWQgYXMgYW4gYWN0IG9mIGRlc3RpbnkhIE5vIGRvdWJ0IHlvdSB3ZXJlIHRoZSBwZXJzb24gd2hvbSB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBhbnhpb3VzIHRvIHNlZSBzYWZlLCBhbmQgaGFwcHksIGFuZCBmbG91cmlzaGluZyEgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['13.17.34'] = ""
translation['13.17.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFNpbmNlIHlvdSB5b3Vyc2VsdmVzIGhhdmUgc29sZCB5b3Vyc2VsdmVzIGZvcgogICAgICAgICAgICAgICAgICAgICAgICBmbGF0dGVyaWVzIGFuZCBwb2lzb25lZCBnaWZ0cy7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFyZSB0aG9zZSBtZW4gZGVwcmF2ZWQgYW5kIGNvcnJ1cHRlZCwgd2hvIGhhdmUgYmVlbiBwZXJzdWFkZWQgdG8gcHVyc3VlIGEgbW9zdAogICAgICAgICAgICAgICAgICAgIGRldGVzdGFibGUgZW5lbXkgd2l0aCBtb3N0IHJpZ2h0ZW91cyB3YXI/IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQnV0CiAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBzYXksIHlvdSBhcmUgYnJpbmdpbmcgYXNzaXN0YW5jZSB0byB0cm9vcHMgd2hvIGFyZSBoZW1tZWQgaW4uIEkgaGF2ZSBubwogICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Rpb24gdG8gdGhlaXIgYmVpbmcgc2F2ZWQsIGFuZCBkZXBhcnRpbmcgd2hlcmV2ZXIgeW91IHdpc2gsIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICAgICAgb25seSBhbGxvdyB0aGF0IG1hbiB0byBiZSBwdXQgdG8gZGVhdGggd2hvIGhhcyBkZXNlcnZlZCBpdC7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEJ1dAogICAgICAgICAgICAgICAgICAgICAgICB5b3Ugc2F5LCB5b3UgYXJlIGJyaW5naW5nIGFzc2lzdGFuY2UgdG8gdHJvb3BzIHdobyBhcmUgaGVtbWVkIGluLiBJIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0aW9uIHRvIHRoZWlyIGJlaW5nIHNhdmVkLCBhbmQgZGVwYXJ0aW5nIHdoZXJldmVyIHlvdSB3aXNoLCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgYWxsb3cgdGhhdCBtYW4gdG8gYmUgcHV0IHRvIGRlYXRoIHdobyBoYXMgZGVzZXJ2ZWQgaXQu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3cgdmVyeSBraW5kIG9mIGhpbSEgVGhlIHNvbGRpZXJzIGF2YWlsaW5nIHRoZW1zZWx2ZXMgb2YgdGhlIGxpYmVyYWxpdHkgb2YKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBoYXZlIGRlc2VydGVkIHRoZWlyIGdlbmVyYWwsIGFuZCBoYXZlIGZsZWQgaW4gYWxhcm0gdG8gaGlzIGVuZW15OyBhbmQKICAgICAgICAgICAgICAgICAgICBpZiBpdCBoYWQgbm90IGJlZW4gZm9yIHRoZW0sIERvbGFiZWxsYSwgaW4gb2ZmZXJpbmcgdGhlIHNhY3JpZmljZSB3aGljaCBoZSBkaWQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2hhZGUgb2YgaGlzIGdlbmVyYWwsIHdvdWxkIG5vdCBoYXZlIGJlZW4gYmVmb3JlaGFuZCB3aXRoIEFudG9uaXVzIGluCiAgICAgICAgICAgICAgICAgICAgcHJvcGl0aWF0aW5nIHRoZSBzcGlyaXQgb2YgaGlzIGNvbGxlYWd1ZSBieSBhIHNpbWlsYXIgb2ZmZXJpbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.17.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3Ugd3JpdGUgbWUgd29yZCB0aGF0IHRoZXJlIGhhcyBiZWVuIG1lbnRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgcGVhY2UgbWFkZSBpbiB0aGUgc2VuYXRlLCBhbmQgdGhhdCBmaXZlIGFtYmFzc2Fkb3JzIG9mIGNvbnN1bGFyIHJhbmsgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGFwcG9pbnRlZC4gSXQgaXMgaGFyZCB0byBiZWxpZXZlIHRoYXQgdGhvc2UgbWVuLCB3aG8gZHJvdmUgbWUgaW4gaGFzdGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY2l0eSwgd2hlbiBJIG9mZmVyZWQgdGhlIGZhaXJlc3QgY29uZGl0aW9ucywgYW5kIHdoZW4gSSB3YXMgZXZlbgogICAgICAgICAgICAgICAgICAgICAgICB0aGlua2luZyBvZiByZWxheGluZyBzb21ld2hhdCBvZiB0aGVtLCBzaG91bGQgbm93IHRoaW5rIG9mIGFjdGluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVyYXRpb24gb3IgaHVtYW5pdHkuIEFuZCBpdCBpcyBoYXJkbHkgcHJvYmFibGUsIHRoYXQgdGhvc2UgbWVuIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb25vdW5jZWQgRG9sYWJlbGxhIGEgcHVibGljIGVuZW15IGZvciBhIG1vc3QgcmlnaHRlb3VzIGFjdGlvbiwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGJyaW5nIHRoZW1zZWx2ZXMgdG8gc3BhcmUgdXMgd2hvIGFyZSBpbmZsdWVuY2VkIGJ5IHRoZSBzYW1lIHNlbnRpbWVudHMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgaGUu4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxZb3Ugd3JpdGUgbWUgd29yZCB0aGF0IHRoZXJlIGhhcyBiZWVuIG1lbnRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgcGVhY2UgbWFkZSBpbiB0aGUgc2VuYXRlLCBhbmQgdGhhdCBmaXZlIGFtYmFzc2Fkb3JzIG9mIGNvbnN1bGFyIHJhbmsgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGFwcG9pbnRlZC4gSXQgaXMgaGFyZCB0byBiZWxpZXZlIHRoYXQgdGhvc2UgbWVuLCB3aG8gZHJvdmUgbWUgaW4gaGFzdGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY2l0eSwgd2hlbiBJIG9mZmVyZWQgdGhlIGZhaXJlc3QgY29uZGl0aW9ucywgYW5kIHdoZW4gSSB3YXMgZXZlbgogICAgICAgICAgICAgICAgICAgICAgICB0aGlua2luZyBvZiByZWxheGluZyBzb21ld2hhdCBvZiB0aGVtLCBzaG91bGQgbm93IHRoaW5rIG9mIGFjdGluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVyYXRpb24gb3IgaHVtYW5pdHkuIEFuZCBpdCBpcyBoYXJkbHkgcHJvYmFibGUsIHRoYXQgdGhvc2UgbWVuIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb25vdW5jZWQgRG9sYWJlbGxhIGEgcHVibGljIGVuZW15IGZvciBhIG1vc3QgcmlnaHRlb3VzIGFjdGlvbiwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGJyaW5nIHRoZW1zZWx2ZXMgdG8gc3BhcmUgdXMgd2hvIGFyZSBpbmZsdWVuY2VkIGJ5IHRoZSBzYW1lIHNlbnRpbWVudHMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgaGUu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Eb2VzIGl0IGFwcGVhciBhIHRyaWZsaW5nIG1hdHRlciwgdGhhdCBoZSBjb25mZXNzZXMgaGltc2VsZiBhIHBhcnRuZXIgd2l0aAogICAgICAgICAgICAgICAgICAgIERvbGFiZWxsYSBpbiBhbGwgaGlzIGF0cm9jaXRpZXM/IERvIHlvdSBub3Qgc2VlIHRoYXQgYWxsIHRoZXNlIGNyaW1lcyBmbG93IGZyb20KICAgICAgICAgICAgICAgICAgICBvbmUgc291cmNlPyBIZSBoaW1zZWxmIGNvbmZlc3Nlcywgc2hyZXdkbHkgYW5kIGNvcnJlY3RseSBlbm91Z2gsIHRoYXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwcm9ub3VuY2VkIERvbGFiZWxsYSBhIHB1YmxpYyBlbmVteSBmb3IgYSBtb3N0IHJpZ2h0ZW91cyBhY3Rpb24gKGZvciBzbyBpdAogICAgICAgICAgICAgICAgICAgIGFwcGVhbCdzIHRvIEFudG9uaXVzKSwgY2FuIG5vdCBwb3NzaWJseSBzcGFyZSBoaW0gd2hvIGFncmVlcyB3aXRoIERvbGFiZWxsYSBpbgogICAgICAgICAgICAgICAgICAgIG9waW5pb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjM3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['13.18.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgY2FuIHlvdSBkbyB3aXRoIGEgbWFuIHdobyBwdXRzIG9uIHBhcGVyIGFuZCByZWNvcmRzIHRoZSBmYWN0LCB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCB3aXRoIERvbGFiZWxsYSBpcyBzbyBjb21wbGV0ZSwgdGhhdCBoZSB3b3VsZCBraWxsIFRyZWJvbml1cywgYW5kLCBpZgogICAgICAgICAgICAgICAgICAgIGhlIGNvdWxkLCBCcnV0dXMgYW5kIENhc3NpdXMgdG9vIHdpdGggZXZlcnkgY2lyY3Vtc3RhbmNlIG9mIHRvcnR1cmU7IGFuZCBpbmZsaWN0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgcHVuaXNobWVudCBvbiB1cyBhbHNvPyBDZXJ0YWlubHksIGEgbWFuIHdobyBtYWtlcyBzbyBwaW91cyBhbmQgZmFpciBhCiAgICAgICAgICAgICAgICAgICAgdHJlYXR5IGlzIGEgY2l0aXplbiB0byBiZSB0YWtlbiBjYXJlIG9mISBIZSBhbHNvIGNvbXBsYWlucyB0aGF0IHRoZSBjb25kaXRpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgb2ZmZXJlZCwgdGhvc2UgcmVhc29uYWJsZSBhbmQgbW9kZXN0IGNvbmRpdGlvbnMsIHdlcmUgcmVqZWN0ZWQ7IG5hbWVseSwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdhcyB0byBoYXZlIHRoZSBmYXJ0aGVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4s4oCUdGhlIHByb3ZpbmNlIHRoZSBtb3N0IHN1aXRhYmxlIG9mIGFsbCBmb3IgcmVuZXdpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY2Fycnlpbmcgb24gdGhlIHdhcjsgdGhhdCB0aGUgbGVnaW9uYXJpZXMgb2YgdGhlIEFsYXVkYSBzaG91bGQgYmUganVkZ2VzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRoaXJkIGRlY3VyeTsgdGhhdCBpcyB0byBzYXksIHRoYXQgdGhlcmUgc2hhbGwgYmUgYW4gYXN5bHVtIGZvciBhbGwgY3JpbWVzLAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBpbmRlbGlibGUgZGlzZ3JhY2Ugb2YgdGhlIHJlcHVibGljOyB0aGF0IGhpcyBvd24gYWN0cyBzaG91bGQgYmUgcmF0aWZpZWQsCiAgICAgICAgICAgICAgICAgICAgaGlzLOKAlHdoZW4gbm90IG9uZSB0cmFjZSBvZiBoaXMgY29uc3Vsc2hpcCBoYXMgYmVlbiBhbGxvd2VkIHRvIHJlbWFpbiEKICAgICAgICAgICAgICAgICAgICBIZSBzaG93ZWQgaGlzIHJlZ2FyZCBhbHNvIGZvciB0aGUgaW50ZXJlc3RzIG9mIEx1Y2l1cyBBbnRvbml1cywgd2hvIGhhZCBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBtb3N0IGVxdWl0YWJsZSBzdXJ2ZXlvciBvZiBwcml2YXRlIGFuZCBwdWJsaWMgZG9tYWlucywgd2l0aCBOdWN1bGEgYW5kIExlbnRvIGZvcgogICAgICAgICAgICAgICAgICAgIGhpcyBjb2xsZWFndWVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcQ29uc2lkZXIgdGhlbiwgYm90aCBvZiB5b3UsIHdoZXRoZXIgaXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbW9yZSBiZWNvbWluZyBhbmQgbW9yZSBhZHZhbnRhZ2VvdXMgZm9yIHlvdXIgcGFydHksIGZvciB5b3UgdG8gc2VlayB0bwogICAgICAgICAgICAgICAgICAgICAgICBhdmVuZ2UgdGhlIGRlYXRoIG9mIFRyZWJvbml1cywgb3IgdGhhdCBvZiBDYWVzYXI7IGFuZCB3aGV0aGVyIGl0IGlzIG1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSBmb3IgeW91IGFuZCBtZSB0byBtZWV0IGluIGJhdHRsZSwgaW4gb3JkZXIgdGhhdCB0aGUgY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBvbXBlaWFucywgd2hpY2ggaGFzIHNvIGZyZXF1ZW50bHkgaGFkIGl0cyB0aHJvYXQgY3V0LCBtYXkgdGhlIG1vcmUgZWFzaWx5CiAgICAgICAgICAgICAgICAgICAgICAgIHJldml2ZTsgb3IgdG8gYWdyZWUgdG9nZXRoZXIsIHNvIGFzIG5vdCB0byBiZSBhIGxhdWdoaW5nLXN0b2NrIHRvIG91cgogICAgICAgICAgICAgICAgICAgICAgICBlbmVtaWVzLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzAiPkdhdWw8L3BsYWNlTmFtZT4s4oCUdGhlIHByb3ZpbmNlIHRoZSBtb3N0IHN1aXRhYmxlIG9mIGFsbCBmb3IgcmVuZXdpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY2Fycnlpbmcgb24gdGhlIHdhcjsgdGhhdCB0aGUgbGVnaW9uYXJpZXMgb2YgdGhlIEFsYXVkYSBzaG91bGQgYmUganVkZ2VzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHRoaXJkIGRlY3VyeTsgdGhhdCBpcyB0byBzYXksIHRoYXQgdGhlcmUgc2hhbGwgYmUgYW4gYXN5bHVtIGZvciBhbGwgY3JpbWVzLAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBpbmRlbGlibGUgZGlzZ3JhY2Ugb2YgdGhlIHJlcHVibGljOyB0aGF0IGhpcyBvd24gYWN0cyBzaG91bGQgYmUgcmF0aWZpZWQsCiAgICAgICAgICAgICAgICAgICAgaGlzLOKAlHdoZW4gbm90IG9uZSB0cmFjZSBvZiBoaXMgY29uc3Vsc2hpcCBoYXMgYmVlbiBhbGxvd2VkIHRvIHJlbWFpbiEKICAgICAgICAgICAgICAgICAgICBIZSBzaG93ZWQgaGlzIHJlZ2FyZCBhbHNvIGZvciB0aGUgaW50ZXJlc3RzIG9mIEx1Y2l1cyBBbnRvbml1cywgd2hvIGhhZCBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBtb3N0IGVxdWl0YWJsZSBzdXJ2ZXlvciBvZiBwcml2YXRlIGFuZCBwdWJsaWMgZG9tYWlucywgd2l0aCBOdWN1bGEgYW5kIExlbnRvIGZvcgogICAgICAgICAgICAgICAgICAgIGhpcyBjb2xsZWFndWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.18.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnENvbnNpZGVyIHRoZW4sIGJvdGggb2YgeW91LCB3aGV0aGVyIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgYmVjb21pbmcgYW5kIG1vcmUgYWR2YW50YWdlb3VzIGZvciB5b3VyIHBhcnR5LCBmb3IgeW91IHRvIHNlZWsgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYXZlbmdlIHRoZSBkZWF0aCBvZiBUcmVib25pdXMsIG9yIHRoYXQgb2YgQ2Flc2FyOyBhbmQgd2hldGhlciBpdCBpcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUgZm9yIHlvdSBhbmQgbWUgdG8gbWVldCBpbiBiYXR0bGUsIGluIG9yZGVyIHRoYXQgdGhlIGNhdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQb21wZWlhbnMsIHdoaWNoIGhhcyBzbyBmcmVxdWVudGx5IGhhZCBpdHMgdGhyb2F0IGN1dCwgbWF5IHRoZSBtb3JlIGVhc2lseQogICAgICAgICAgICAgICAgICAgICAgICByZXZpdmU7IG9yIHRvIGFncmVlIHRvZ2V0aGVyLCBzbyBhcyBub3QgdG8gYmUgYSBsYXVnaGluZy1zdG9jayB0byBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgZW5lbWllcy7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPklmIGl0cyB0aHJvYXQgaGFkIGJlZW4gY3V0LCBpdCBuZXZlciBjb3VsZCByZXZpdmUuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcV2hpY2gs4oCdPC9xPiBzYXlzIGhlLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnGlzIG1vcmUgYmVjb21pbmcu4oCdPC9xPiBJbiB0aGlzIHdhciBoZSB0YWxrcyBvZiB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYmVjb21pbmchIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxBbmQgbW9yZSBhZHZhbnRhZ2VvdXMgZm9yIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgcGFydHku4oCdPC9xPuKAlOKAnFBhcnRpZXMs4oCdIHlvdSBzZW5zZWxlc3MKICAgICAgICAgICAgICAgICAgICBtYW4sIGlzIGEgc3VpdGFibGUgZXhwcmVzc2lvbiBmb3IgdGhlIGZvcnVtLCBvciB0aGUgc2VuYXRlIGhvdXNlLiBZb3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkIGEgd2lja2VkIHdhciBhZ2FpbnN0IHlvdXIgY291bnRyeTsgeW91IGFyZSBhdHRhY2tpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPjsgeW91IGFyZSBiZXNpZWdpbmcgdGhlIGNvbnN1bCBlbGVjdDsKICAgICAgICAgICAgICAgICAgICB0d28gY29uc3VscyBhcmUgY2Fycnlpbmcgb24gd2FyIGFnYWluc3QgeW91OyBhbmQgd2l0aCB0aGVtLCBDYWVzYXIsIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ByYWV0b3I7IGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaXMgYXJtZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHlvdTsgYW5kIHRoZW4gZG8geW91IGNhbGwgeW91cnMg4oCcYSBwYXJ0eSzigJ0gaW5zdGVhZCBvZiBhCiAgICAgICAgICAgICAgICAgICAgcmV2b2x0IGZyb20gdGhlIHJlcHVibGljPyA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxUbyBzZWVrIHRvIGF2ZW5nZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGVhdGggb2YgVHJlYm9uaXVzLCBvciB0aGF0IG9mIENhZXNhci7igJ08L3E+IFdlIGhhdmUgYXZlbmdlZAogICAgICAgICAgICAgICAgICAgIFRyZWJvbml1cyBzdWZmaWNpZW50bHkgYnkgcHJvbm91bmNpbmcgRG9sYWJlbGxhIGEgcHVibGljIGVuZW15LiBUaGUgZGVhdGggb2YKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgaXMgYmVzdCBkZWZlbmRlZCBieSBvYmxpdmlvbiBhbmQgc2lsZW5jZS4gQnV0IHRha2Ugbm90aWNlIHdoYXQgaGlzIG9iamVjdAogICAgICAgICAgICAgICAgICAgIGlzLuKAlFdoZW4gaGUgdGhpbmtzIHRoYXQgdGhlIGRlYXRoIG9mIENhZXNhciBvdWdodCB0byBiZSByZXZlbmdlZCwgaGUKICAgICAgICAgICAgICAgICAgICBpcyB0aHJlYXRlbmluZyB3aXRoIGRlYXRoLCBub3QgdGhvc2Ugb25seSB3aG8gcGVycGV0cmF0ZWQgdGhhdCBhY3Rpb24sIGJ1dCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGFsc28gd2hvIHdlcmUgbm90IGluZGlnbmFudCBhdCBpdC4gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjQwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcV2hpY2gs4oCdPC9xPiBzYXlzIGhlLCA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnGlzIG1vcmUgYmVjb21pbmcu4oCdPC9xPiBJbiB0aGlzIHdhciBoZSB0YWxrcyBvZiB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYmVjb21pbmchIDwvdHJhbnNsYXRpb24+"
translation['13.18.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEFuZCBtb3JlIGFkdmFudGFnZW91cyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eS7igJ08L3E+4oCU4oCcUGFydGllcyzigJ0geW91IHNlbnNlbGVzcwogICAgICAgICAgICAgICAgICAgIG1hbiwgaXMgYSBzdWl0YWJsZSBleHByZXNzaW9uIGZvciB0aGUgZm9ydW0sIG9yIHRoZSBzZW5hdGUgaG91c2UuIFlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgYSB3aWNrZWQgd2FyIGFnYWluc3QgeW91ciBjb3VudHJ5OyB5b3UgYXJlIGF0dGFja2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT47IHlvdSBhcmUgYmVzaWVnaW5nIHRoZSBjb25zdWwgZWxlY3Q7CiAgICAgICAgICAgICAgICAgICAgdHdvIGNvbnN1bHMgYXJlIGNhcnJ5aW5nIG9uIHdhciBhZ2FpbnN0IHlvdTsgYW5kIHdpdGggdGhlbSwgQ2Flc2FyLCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wcmFldG9yOyBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaXMgYXJtZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHlvdTsgYW5kIHRoZW4gZG8geW91IGNhbGwgeW91cnMg4oCcYSBwYXJ0eSzigJ0gaW5zdGVhZCBvZiBhCiAgICAgICAgICAgICAgICAgICAgcmV2b2x0IGZyb20gdGhlIHJlcHVibGljPyA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFRvIHNlZWsgdG8gYXZlbmdlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWF0aCBvZiBUcmVib25pdXMsIG9yIHRoYXQgb2YgQ2Flc2FyLuKAnTwvcT4gV2UgaGF2ZSBhdmVuZ2VkCiAgICAgICAgICAgICAgICAgICAgVHJlYm9uaXVzIHN1ZmZpY2llbnRseSBieSBwcm9ub3VuY2luZyBEb2xhYmVsbGEgYSBwdWJsaWMgZW5lbXkuIFRoZSBkZWF0aCBvZgogICAgICAgICAgICAgICAgICAgIENhZXNhciBpcyBiZXN0IGRlZmVuZGVkIGJ5IG9ibGl2aW9uIGFuZCBzaWxlbmNlLiBCdXQgdGFrZSBub3RpY2Ugd2hhdCBoaXMgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaXMu4oCUV2hlbiBoZSB0aGlua3MgdGhhdCB0aGUgZGVhdGggb2YgQ2Flc2FyIG91Z2h0IHRvIGJlIHJldmVuZ2VkLCBoZQogICAgICAgICAgICAgICAgICAgIGlzIHRocmVhdGVuaW5nIHdpdGggZGVhdGgsIG5vdCB0aG9zZSBvbmx5IHdobyBwZXJwZXRyYXRlZCB0aGF0IGFjdGlvbiwgYnV0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgYWxzbyB3aG8gd2VyZSBub3QgaW5kaWduYW50IGF0IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['13.19.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcTWVuIHdobyB3aWxsIGNvdW50IHRoZSBkZXN0cnVjdGlvbiBvZiBlaXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgeW91IG9yIG1lIGdhaW4gdG8gdGhlbS4gQSBzcGVjdGFjbGUgd2hpY2ggYXMgeWV0IGZvcnR1bmUgaGVyc2VsZiBoYXMgdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2FyZSB0byBhdm9pZCwgdW53aWxsaW5nIHRvIHNlZSB0d28gYXJtaWVzIHdoaWNoIGJlbG9uZyB0byBvbmUgYm9keQogICAgICAgICAgICAgICAgICAgICAgICBmaWdodGluZywgd2l0aCBDaWNlcm8gYWN0aW5nIGFzIG1hc3RlciBvZiB0aGUgc2hvdzsgYSBmZWxsb3cgd2hvIGlzIHNvIGZhcgogICAgICAgICAgICAgICAgICAgICAgICBoYXBweSB0aGF0IGhlIGhhcyBjYWpvbGVkIHlvdSBib3RoIHdpdGggdGhlIHNhbWUgY29tcGxpbWVudHMgYXMgdGhvc2Ugd2l0aAogICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBib2FzdGVkIHRoYXQgaGUgaGFkIGRlY2VpdmVkIENhZXNhci7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnE1lbiB3aG8gd2lsbCBjb3VudCB0aGUgZGVzdHJ1Y3Rpb24gb2YgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBvciBtZSBnYWluIHRvIHRoZW0uIEEgc3BlY3RhY2xlIHdoaWNoIGFzIHlldCBmb3J0dW5lIGhlcnNlbGYgaGFzIHRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmUgdG8gYXZvaWQsIHVud2lsbGluZyB0byBzZWUgdHdvIGFybWllcyB3aGljaCBiZWxvbmcgdG8gb25lIGJvZHkKICAgICAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcsIHdpdGggQ2ljZXJvIGFjdGluZyBhcyBtYXN0ZXIgb2YgdGhlIHNob3c7IGEgZmVsbG93IHdobyBpcyBzbyBmYXIKICAgICAgICAgICAgICAgICAgICAgICAgaGFwcHkgdGhhdCBoZSBoYXMgY2Fqb2xlZCB5b3UgYm90aCB3aXRoIHRoZSBzYW1lIGNvbXBsaW1lbnRzIGFzIHRob3NlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgYm9hc3RlZCB0aGF0IGhlIGhhZCBkZWNlaXZlZCBDYWVzYXIu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSBwcm9jZWVkcyBpbiBoaXMgYWJ1c2Ugb2YgbWUsIGFzIGlmIGhlIGhhZCBiZWVuIHZlcnkgZm9ydHVuYXRlIGluIGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBmb3JtZXIgcmVwcm9hY2hlcyBvZiBtZTsgYnV0IEkgd2lsbCBicmFuZCBoaW0gd2l0aCB0aGUgbW9zdCB0aG9yb3VnaGx5IGRlc2VydmVkCiAgICAgICAgICAgICAgICAgICAgbWFya3Mgb2YgaW5mYW15LCBhbmQgcGlsbG9yeSBoaW0gZm9yIHRoZSBldmVybGFzdGluZyByZWNvbGxlY3Rpb24gb2YgcG9zdGVyaXR5LgogICAgICAgICAgICAgICAgICAgIEkgYSA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnG1hc3RlciBvZiB0aGUgc2hvdyBvZgogICAgICAgICAgICAgICAgICAgICAgICBnbGFkaWF0b3JzIeKAnTwvcT4gaW5kZWVkIGhlIGlzIG5vdCB3aG9sbHkgd3JvbmcsIGZvciBJIGRvIHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBzZWUgdGhlIHdvcnN0IHBhcnR5IHNsYWluLCBhbmQgdGhlIGJlc3QgdmljdG9yaW91cyEgSGUgd3JpdGVzIHRoYXQgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJx3aGljaGV2ZXIgb2YgdGhlbSBhcmUgZGVzdHJveWVkIHdlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50IGFzIHNvIG11Y2ggZ2Fpbi7igJ08L3E+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJzZWN0aW9uIiAvPiBBZG1pcmFibGUgZ2Fpbiwgd2hlbiwgaWYgeW91LCBPIEFudG9uaXVzLCBhcmUKICAgICAgICAgICAgICAgICAgICB2aWN0b3Jpb3VzIChtYXkgdGhlIGdvZHMgYXZlcnQgc3VjaCBhIGRpc2FzdGVyISkgdGhlIGRlYXRoIG9mIHRob3NlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBkZXBhcnQgZnJvbSBsaWZlIHVudG9ydHVyZWQgd2lsbCBiZSBhY2NvdW50ZWQgaGFwcHkhIEhlIHNheXMgdGhhdCBIaXJ0aXVzIGFuZAogICAgICAgICAgICAgICAgICAgIENhZXNhciA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxoYXZlIGJlZW4gY2Fqb2xlZCBieSBtZSBieSB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGltZW50cy7igJ08L3E+IEkgc2hvdWxkIGxpa2UgdG8ga25vdyB3aGF0IGNvbXBsaW1lbnQgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBhcyB5ZXQgcGFpZCB0byBIaXJ0aXVzIGJ5IG1lOyBmb3Igc3RpbGwgbW9yZSBhbmQgZ3JlYXRlciBvbmVzIHRoYW4gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgcGFpZCBoaW0gYWxyZWFkeSBhcmUgZHVlIHRvIENhZXNhci4gQnV0IGRvIHlvdSwgTyBBbnRvbml1cywgZGFyZSB0byBzYXkgdGhhdAogICAgICAgICAgICAgICAgICAgIENhZXNhciwgdGhlIGZhdGhlciwgd2FzIGRlY2VpdmVkIGJ5IG1lISBZb3UsIGl0IHdhcyB5b3UsIEkgc2F5LCB3aG8gcmVhbGx5IHNsZXcKICAgICAgICAgICAgICAgICAgICBoaW0gYXQgdGhlIEx1cGVyY2FsIGdhbWVzLiBXaHksIE8gbW9zdCB1bmdyYXRlZnVsIG9mIG1lbiwgaGF2ZSB5b3UgYWJhbmRvbmVkCiAgICAgICAgICAgICAgICAgICAgeW91ciBvZmZpY2Ugb2YgcHJpZXN0IHRvIGhpbT8gQnV0IHJlbWFyayBub3cgdGhlIGFkbWlyYWJsZSB3aXNkb20gYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdGVuY3kgb2YgdGhpcyBncmVhdCBhbmQgaWxsdXN0cmlvdXMgbWFuLiA8bWlsZXN0b25lIG49IjQyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxtYXN0ZXIgb2YgdGhlIHNob3cgb2YKICAgICAgICAgICAgICAgICAgICAgICAgZ2xhZGlhdG9ycyHigJ08L3E+IGluZGVlZCBoZSBpcyBub3Qgd2hvbGx5IHdyb25nLCBmb3IgSSBkbyB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgc2VlIHRoZSB3b3JzdCBwYXJ0eSBzbGFpbiwgYW5kIHRoZSBiZXN0IHZpY3RvcmlvdXMhIEhlIHdyaXRlcyB0aGF0IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcd2hpY2hldmVyIG9mIHRoZW0gYXJlIGRlc3Ryb3llZCB3ZSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudCBhcyBzbyBtdWNoIGdhaW4u4oCdPC9xPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.19.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gQWRtaXJhYmxlIGdhaW4sIHdoZW4sIGlmIHlvdSwgTyBBbnRvbml1cywgYXJlCiAgICAgICAgICAgICAgICAgICAgdmljdG9yaW91cyAobWF5IHRoZSBnb2RzIGF2ZXJ0IHN1Y2ggYSBkaXNhc3RlciEpIHRoZSBkZWF0aCBvZiB0aG9zZSBtZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0IGZyb20gbGlmZSB1bnRvcnR1cmVkIHdpbGwgYmUgYWNjb3VudGVkIGhhcHB5ISBIZSBzYXlzIHRoYXQgSGlydGl1cyBhbmQKICAgICAgICAgICAgICAgICAgICBDYWVzYXIgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxoYXZlIGJlZW4gY2Fqb2xlZCBieSBtZSBieSB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGltZW50cy7igJ08L3E+IEkgc2hvdWxkIGxpa2UgdG8ga25vdyB3aGF0IGNvbXBsaW1lbnQgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBhcyB5ZXQgcGFpZCB0byBIaXJ0aXVzIGJ5IG1lOyBmb3Igc3RpbGwgbW9yZSBhbmQgZ3JlYXRlciBvbmVzIHRoYW4gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgcGFpZCBoaW0gYWxyZWFkeSBhcmUgZHVlIHRvIENhZXNhci4gQnV0IGRvIHlvdSwgTyBBbnRvbml1cywgZGFyZSB0byBzYXkgdGhhdAogICAgICAgICAgICAgICAgICAgIENhZXNhciwgdGhlIGZhdGhlciwgd2FzIGRlY2VpdmVkIGJ5IG1lISBZb3UsIGl0IHdhcyB5b3UsIEkgc2F5LCB3aG8gcmVhbGx5IHNsZXcKICAgICAgICAgICAgICAgICAgICBoaW0gYXQgdGhlIEx1cGVyY2FsIGdhbWVzLiBXaHksIE8gbW9zdCB1bmdyYXRlZnVsIG9mIG1lbiwgaGF2ZSB5b3UgYWJhbmRvbmVkCiAgICAgICAgICAgICAgICAgICAgeW91ciBvZmZpY2Ugb2YgcHJpZXN0IHRvIGhpbT8gQnV0IHJlbWFyayBub3cgdGhlIGFkbWlyYWJsZSB3aXNkb20gYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lzdGVuY3kgb2YgdGhpcyBncmVhdCBhbmQgaWxsdXN0cmlvdXMgbWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.19.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJIGFtIHF1aXRlIHJlc29sdmVkIHRvIGJyb29rIG5vIGluc3VsdCBlaXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgdG8gbXlzZWxmIG9yIHRvIG15IGZyaWVuZHM7IG5vciB0byBkZXNlcnQgdGhhdCBwYXJ0eSB3aGljaCBQb21wZWl1cyBoYXRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgbm9yIHRvIGFsbG93IHRoZSB2ZXRlcmFucyB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgYWJvZGVzOyBub3IgdG8gYWxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbHMgdG8gYmUgZHJhZ2dlZCBvdXQgdG8gdG9ydHVyZSwgbm9yIHRvIHZpb2xhdGUgdGhlIGZhaXRoIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZCB0byBEb2xhYmVsbGEu4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJIGFtIHF1aXRlIHJlc29sdmVkIHRvIGJyb29rIG5vIGluc3VsdCBlaXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgdG8gbXlzZWxmIG9yIHRvIG15IGZyaWVuZHM7IG5vciB0byBkZXNlcnQgdGhhdCBwYXJ0eSB3aGljaCBQb21wZWl1cyBoYXRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgbm9yIHRvIGFsbG93IHRoZSB2ZXRlcmFucyB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgYWJvZGVzOyBub3IgdG8gYWxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbHMgdG8gYmUgZHJhZ2dlZCBvdXQgdG8gdG9ydHVyZSwgbm9yIHRvIHZpb2xhdGUgdGhlIGZhaXRoIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICAgICAgcGxlZGdlZCB0byBEb2xhYmVsbGEu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHNheSBub3RoaW5nIG9mIHRoZSByZXN0IG9mIHRoaXMgc2VudGVuY2UsIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcdGhlIGZhaXRoIHBsZWRnZWQgdG8gRG9sYWJlbGxhLOKAnTwvcT4gdG8gdGhhdCBtb3N0IGhvbHkKICAgICAgICAgICAgICAgICAgICBtYW4sIHRoaXMgcGlvdXMgZ2VudGxlbWFuIHdpbGwgYnkgbm8gbWVhbnMgdmlvbGF0ZS4gV2hhdCBmYWl0aD8gV2FzIGl0IGEgcGxlZGdlCiAgICAgICAgICAgICAgICAgICAgdG8gbXVyZGVyIGV2ZXJ5IHZpcnR1b3VzIGNpdGl6ZW4sIHRvIHBhcnRpdGlvbiB0aGUgY2l0eSBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHRvIGRpc3RyaWJ1dGUgdGhlIHByb3ZpbmNlcyBhbW9uZywgYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gaGFuZCB0aGVtIG92ZXIgdG8gYmUgcGx1bmRlcmVkIGJ5LCB0aGVpciBmb2xsb3dlcnM/IEZvciB3aGF0IGVsc2Ugd2FzIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggY291bGQgaGF2ZSBiZWVuIHJhdGlmaWVkIGJ5IHRyZWF0eSBhbmQgbXV0dWFsIHBsZWRnZXMgYmV0d2VlbiBBbnRvbml1cyBhbmQKICAgICAgICAgICAgICAgICAgICBEb2xhYmVsbGEsIHRob3NlIGZvdWwgYW5kIHBhcnJpY2lkYWwgdHJhaXRvcnM/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnHRoZSBmYWl0aCBwbGVkZ2VkIHRvIERvbGFiZWxsYSzigJ08L3E+IHRvIHRoYXQgbW9zdCBob2x5CiAgICAgICAgICAgICAgICAgICAgbWFuLCB0aGlzIHBpb3VzIGdlbnRsZW1hbiB3aWxsIGJ5IG5vIG1lYW5zIHZpb2xhdGUuIFdoYXQgZmFpdGg/IFdhcyBpdCBhIHBsZWRnZQogICAgICAgICAgICAgICAgICAgIHRvIG11cmRlciBldmVyeSB2aXJ0dW91cyBjaXRpemVuLCB0byBwYXJ0aXRpb24gdGhlIGNpdHkgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCB0byBkaXN0cmlidXRlIHRoZSBwcm92aW5jZXMgYW1vbmcsIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGhhbmQgdGhlbSBvdmVyIHRvIGJlIHBsdW5kZXJlZCBieSwgdGhlaXIgZm9sbG93ZXJzPyBGb3Igd2hhdCBlbHNlIHdhcyB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGNvdWxkIGhhdmUgYmVlbiByYXRpZmllZCBieSB0cmVhdHkgYW5kIG11dHVhbCBwbGVkZ2VzIGJldHdlZW4gQW50b25pdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgRG9sYWJlbGxhLCB0aG9zZSBmb3VsIGFuZCBwYXJyaWNpZGFsIHRyYWl0b3JzPyA8L3RyYW5zbGF0aW9uPg=="
translation['13.19.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcTm9yIHRvIHZpb2xhdGUgbXkgdHJlYXR5IG9mIGFsbGlhbmNlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgTGVwaWR1cywgdGhlIG1vc3QgY29uc2NpZW50aW91cyBvZiBtZW4u4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxOb3IgdG8gdmlvbGF0ZSBteSB0cmVhdHkgb2YgYWxsaWFuY2Ugd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBMZXBpZHVzLCB0aGUgbW9zdCBjb25zY2llbnRpb3VzIG9mIG1lbi7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBoYXZlIGFueSBhbGxpYW5jZSB3aXRoIExlcGlkdXMgb3Igd2l0aCBhbnkgKEkgd2lsbCBub3Qgc2F5IHZpcnR1b3VzIGNpdGl6ZW4sCiAgICAgICAgICAgICAgICAgICAgYXMgaGUgaXMsIGJ1dCB3aXRoIGFueSkgbWFuIGluIGhpcyBzZW5zZXMhIFlvdXIgb2JqZWN0IGlzIHRvIG1ha2UgTGVwaWR1cyBhcHBlYXIKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgYW4gaW1waW91cyBtYW4sIG9yIGEgbWFkbWFuLiBCdXQgeW91IGFyZSBkb2luZyBubyBnb29kIChhbHRob3VnaCBpdCBpcyBhCiAgICAgICAgICAgICAgICAgICAgaGFyZCBtYXR0ZXIgdG8gc3BlYWsgcG9zaXRpdmVseSBvZiBhbm90aGVyKSwgZXNwZWNpYWxseSB3aXRoIGEgbWFuIGxpa2UgTGVwaWR1cywKICAgICAgICAgICAgICAgICAgICB3aG9tIEkgd2lsbCBuZXZlciBmZWFyLCBidXQgSSBzaGFsbCBob3BlIGdvb2QgdGhpbmdzIG9mIGhpbSB1bmxlc3MgSSBhbQogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBmcm9tIGRvaW5nIHNvLiBMZXBpZHVzIHdpc2hlZCB0byByZWNhbGwgeW91IGZyb20geW91ciBmcmVuenksIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGJlIHRoZSBhc3Npc3RhbnQgb2YgeW91ciBpbnNhbml0eS4gQnV0IHlvdSBzZWVrIHlvdXIgZnJpZW5kcyBub3Qgb25seSBhbW9uZwogICAgICAgICAgICAgICAgICAgIGNvbnNjaWVudGlvdXMgbWVuLCBidXQgYW1vbmcgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5tb3N0PC9lbXBoPiBjb25zY2llbnRpb3VzIG1lbi4gQW5kIHlvdQogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5LCBnb2RsaWtlIGlzIHlvdXIgcGlldHksIGludmVudCBhIG5ldyB3b3JkIHRvIGV4cHJlc3MgaXQgd2hpY2ggaGFzIG5vCiAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlIGluIHRoZSBMYXRpbiBsYW5ndWFnZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bW9zdDwvZW1waD4gY29uc2NpZW50aW91cyBtZW4uIEFuZCB5b3UKICAgICAgICAgICAgICAgICAgICBhY3R1YWxseSwgZ29kbGlrZSBpcyB5b3VyIHBpZXR5LCBpbnZlbnQgYSBuZXcgd29yZCB0byBleHByZXNzIGl0IHdoaWNoIGhhcyBubwogICAgICAgICAgICAgICAgICAgIGV4aXN0ZW5jZSBpbiB0aGUgTGF0aW4gbGFuZ3VhZ2UuIDwvdHJhbnNsYXRpb24+"
translation['13.19.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcTm9yIHRvIGJldHJheSBQbGFuY3VzLCB0aGUgcGFydG5lciBvZiBteQogICAgICAgICAgICAgICAgICAgICAgICBjb3Vuc2Vscy4p4oCcPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxOb3IgdG8gYmV0cmF5IFBsYW5jdXMsIHRoZSBwYXJ0bmVyIG9mIG15CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW5zZWxzLinigJw8L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlBsYW5jdXMsIHRoZSBwYXJ0bmVyIG9mIHlvdXIgY291bnNlbHM/IEhlLCB3aG9zZSBldmVyIG1lbW9yYWJsZSBhbmQgZGl2aW5lIHZpcnR1ZQogICAgICAgICAgICAgICAgICAgIGJyaW5ncyBhIGxpZ2h0IHRvIHRoZSByZXB1YmxpYyAodW5sZXNzLCBwZXJoYXBzLCB5b3UgdGhpbmsgdGhhdCBpdCBpcyBhcyBhCiAgICAgICAgICAgICAgICAgICAgcmVpbmZvcmNlbWVudCB0byB5b3UgdGhhdCBoZSBoYXMgY29tZSB3aXRoIHRob3NlIG1vc3QgZ2FsbGFudCBsZWdpb25zLCBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIGEgbnVtZXJvdXMgR2FsbGljIGZvcmNlIG9mIGJvdGggY2F2YWxyeSBhbmQgaW5mYW50cnkpOyBhbmQgd2hvLCBpZiBiZWZvcmUgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCB5b3UgaGF2ZSBub3QgYnkgeW91ciBwdW5pc2htZW50IG1hZGUgYXRvbmVtZW50IHRvIHRoZSByZXB1YmxpYyBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MsIHdpbGwgYmUgY2hpZWYgbGVhZGVyIGluIHRoaXMgd2FyLiBGb3IgYWx0aG91Z2ggdGhlIGZpcnN0IHN1Y2NvcnMKICAgICAgICAgICAgICAgICAgICB0aGF0IGFycml2ZSBhcmUgbW9yZSB1c2VmdWwgdG8gdGhlIHJlcHVibGljLCB5ZXQgdGhlIGxhc3QgYXJlIHRoZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0YWJsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNDUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['13.20.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIGF0IGxhc3QgaGUgcmVjb2xsZWN0cyBoaW1zZWxmIGFuZCBiZWdpbnMgdG8gcGhpbG9zb3BoaXplLiA8L3A+CgkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcSWYgdGhlIGltbW9ydGFsIGdvZHMgYXNzaXN0IG1lLCBhcyBJIHRydXN0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB3aWxsLCBnb2luZyBvbiBteSB3YXkgd2l0aCBwcm9wZXIgZmVlbGluZ3MsIEkgc2hhbGwgbGl2ZSBoYXBwaWx5OwogICAgICAgICAgICAgICAgICAgICAgICBidXQgaWYgYW5vdGhlciBmYXRlIGF3YWl0cyBtZSwgSSBoYXZlIGFscmVhZHkgYSBmb3JldGFzdGUgb2Ygam95IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjZXJ0YWludHkgb2YgeW91ciBwdW5pc2htZW50LiBGb3IgaWYgdGhlIFBvbXBlaWFucyB3aGVuIGRlZmVhdGVkIGFyZSBzbwogICAgICAgICAgICAgICAgICAgICAgICBpbnNvbGVudCwgeW91IHdpbGwgYmUgc3VyZSB0byBleHBlcmllbmNlIHdoYXQgdGhleSB3aWxsIGJlIHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdmljdG9yaW91cy7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnElmIHRoZSBpbW1vcnRhbCBnb2RzIGFzc2lzdCBtZSwgYXMgSSB0cnVzdAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2lsbCwgZ29pbmcgb24gbXkgd2F5IHdpdGggcHJvcGVyIGZlZWxpbmdzLCBJIHNoYWxsIGxpdmUgaGFwcGlseTsKICAgICAgICAgICAgICAgICAgICAgICAgYnV0IGlmIGFub3RoZXIgZmF0ZSBhd2FpdHMgbWUsIEkgaGF2ZSBhbHJlYWR5IGEgZm9yZXRhc3RlIG9mIGpveSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2VydGFpbnR5IG9mIHlvdXIgcHVuaXNobWVudC4gRm9yIGlmIHRoZSBQb21wZWlhbnMgd2hlbiBkZWZlYXRlZCBhcmUgc28KICAgICAgICAgICAgICAgICAgICAgICAgaW5zb2xlbnQsIHlvdSB3aWxsIGJlIHN1cmUgdG8gZXhwZXJpZW5jZSB3aGF0IHRoZXkgd2lsbCBiZSB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHZpY3RvcmlvdXMu4oCdPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Zb3UgYXJlIHZlcnkgd2VsY29tZSB0byB5b3VyIGZvcmV0YXN0ZSBvZiBqb3kuIEZvciB5b3UgYXJlIGF0IHdhciBub3Qgb25seSB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIFBvbXBlaWFucywgYnV0IHdpdGggdGhlIGVudGlyZSByZXB1YmxpYy4gRXZlcnkgb25lLCBnb2RzIGFuZCBtZW4sIHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlc3QgcmFuaywgdGhlIG1pZGRsZSBjbGFzcywgdGhlIGxvd2VzdCBkcmVncyBvZiB0aGUgcGVvcGxlLCBjaXRpemVucyBhbmQKICAgICAgICAgICAgICAgICAgICBmb3JlaWduZXJzLCBtZW4gYW5kIHdvbWVuLCBmcmVlIG1lbiBhbmQgc2xhdmVzLCBhbGwgaGF0ZSB5b3UuIFdlIHNhdyB0aGlzIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGRheSBvbiBzb21lIGZhbHNlIG5ld3MgdGhhdCBjYW1lOyBidXQgd2Ugc2hhbGwgc29vbiBzZWUgaXQgZnJvbSB0aGUgd2F5IGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdHJ1ZSBuZXdzIGlzIHJlY2VpdmVkLiBBbmQgaWYgeW91IHBvbmRlciB0aGVzZSB0aGluZ3Mgd2l0aCB5b3Vyc2VsZiBhCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlLCB5b3Ugd2lsbCBkaWUgd2l0aCBtb3JlIGVxdWFuaW1pdHksIGFuZCBncmVhdGVyIGNvbWZvcnQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.20.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcTGFzdGx5LCB0aGlzIGlzIHRoZSBzdW0gb2YgbXkgb3BpbmlvbiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5hdGlvbjsgSSB3aWxsIGJlYXIgd2l0aCB0aGUgaW5zdWx0cyBvZmZlcmVkIG1lIGJ5IG15IGZyaWVuZHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgdGhlbXNlbHZlcyBhcmUgd2lsbGluZyB0byBmb3JnZXQgdGhhdCB0aGV5IGhhdmUgb2ZmZXJlZCB0aGVtOyBvciBpZgogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBwcmVwYXJlZCB0byB1bml0ZSB3aXRoIG1lIGluIGF2ZW5naW5nIENhZXNhciBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYXRoLuKAnTwvcT4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcTGFzdGx5LCB0aGlzIGlzIHRoZSBzdW0gb2YgbXkgb3BpbmlvbiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5hdGlvbjsgSSB3aWxsIGJlYXIgd2l0aCB0aGUgaW5zdWx0cyBvZmZlcmVkIG1lIGJ5IG15IGZyaWVuZHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgdGhlbXNlbHZlcyBhcmUgd2lsbGluZyB0byBmb3JnZXQgdGhhdCB0aGV5IGhhdmUgb2ZmZXJlZCB0aGVtOyBvciBpZgogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBwcmVwYXJlZCB0byB1bml0ZSB3aXRoIG1lIGluIGF2ZW5naW5nIENhZXNhciBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYXRoLuKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93IHRoYXQgdGhleSBrbm93IHRoaXMgcmVzb2x1dGlvbiBvZiBBbnRvbml1cywgZG8geW91IHRoaW5rIHRoYXQgQXVsdXMgSGlydGl1cwogICAgICAgICAgICAgICAgICAgIGFuZCBDYWl1cyBQYW5zYSwgdGhlIGNvbnN1bHMsIGNhbiBoZXNpdGF0ZSB0byBwYXNzIG92ZXIgdG8gQW50b25pdXM/IHRvIGJlc2llZ2UKICAgICAgICAgICAgICAgICAgICBCcnV0dXM/IHRvIGJlIGVhZ2VyIHRvIGF0dGFjayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IFdoeSBkbyBJIHNheSBIaXJ0aXVzIGFuZCBQYW5zYT8gV2lsbCBDYWVzYXIsIHRoYXQgeW91bmcgbWFuCiAgICAgICAgICAgICAgICAgICAgb2Ygc2luZ3VsYXIgcGlldHksIGJlIGFibGUgdG8gcmVzdHJhaW4gaGltc2VsZiBmcm9tIHNlZWtpbmcgdG8gYXZlbmdlIHRoZQogICAgICAgICAgICAgICAgICAgIGluanVyaWVzIG9mIGhpcyBmYXRoZXIgaW4gdGhlIGJsb29kIG9mIERlY2ltdXMgQnJ1dHVzPyBUaGVyZWZvcmUsIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCByZWFkIGhpcyBsZXR0ZXIsIHRoZSBjb3Vyc2Ugd2hpY2ggdGhleSBhZG9wdGVkIHdhcyB0byBhcHByb2FjaCBuZWFyZXIKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZm9ydGlmaWNhdGlvbnMuIEFuZCBvbiB0aGlzIGFjY291bnQgd2Ugb3VnaHQgdG8gY29uc2lkZXIgQ2Flc2FyIGEgc3RpbGwKICAgICAgICAgICAgICAgICAgICBtb3JlIGFkbWlyYWJsZSB5b3VuZyBtYW47IGFuZCB0aGF0IGEgc3RpbGwgZ3JlYXRlciBraW5kbmVzcyBvZiB0aGUgaW1tb3J0YWwgZ29kcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGdhdmUgaGltIHRvIHRoZSByZXB1YmxpYywgYXMgaGUgaGFzIG5ldmVyIGJlZW4gbWlzbGVkIGJ5IHRoZSBzcGVjaW91cyB1c2UKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZmF0aGVyJ3MgbmFtZTsgbm9yIGJ5IGFueSBmYWxzZSBpZGVhIG9mIHBpZXR5IGFuZCBhZmZlY3Rpb24uIEhlIHNlZXMKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHRoYXQgdGhlIGdyZWF0ZXN0IHBpZXR5IGNvbnNpc3RzIGluIHRoZSBzYWx2YXRpb24gb2Ygb25lJ3MgY291bnRyeS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaWYgaXQgd2VyZSBhIGNvbnRlc3QgYmV0d2VlbiBwYXJ0aWVzLAogICAgICAgICAgICAgICAgICAgIHRoZSBuYW1lIG9mIHdoaWNoIGlzIHV0dGVybHkgZXh0aW5jdCwgdGhlbiB3b3VsZCBBbnRvbml1cyBhbmQgVmVudGlkaXVzIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlciBwZXJzb25zIHRvIHVwaG9sZCB0aGUgcGFydHkgb2YgQ2Flc2FyLCByYXRoZXIgdGhhbiBpbiB0aGUgZmlyc3QgcGxhY2UsCiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLCBhIHlvdW5nIG1hbiBmdWxsIG9mIHRoZSBncmVhdGVzdCBwaWV0eSBhbmQgdGhlIG1vc3QgYWZmZWN0aW9uYXRlCiAgICAgICAgICAgICAgICAgICAgcmVjb2xsZWN0aW9uIG9mIGhpcyBwYXJlbnQ/IGFuZCBuZXh0IHRvIGhpbSBQYW5zYSBhbmQgSGlydGl1cywgd2hvIGhlbGQgKGlmIEkKICAgICAgICAgICAgICAgICAgICBtYXkgdXNlIHN1Y2ggYW4gZXhwcmVzc2lvbikgdGhlIHR3byBob3JucyBvZiBDYWVzYXIsIGF0IHRoZSB0aW1lIHdoZW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIHRvIGJlIGNhbGxlZCBhIHBhcnR5LiBCdXQgd2hhdCBwYXJ0aWVzIGFyZSB0aGVzZSwgd2hlbiB0aGUgb25lIHByb3Bvc2VzCiAgICAgICAgICAgICAgICAgICAgdG8gaXRzZWxmIHRvIHVwaG9sZCB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUsIHRoZSBsaWJlcnR5IG9mIHRoZSBSb21hbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSwgYW5kIHRoZSBzYWZldHkgb2YgdGhlIHJlcHVibGljLCB3aGlsZSB0aGUgb3RoZXIgZml4ZXMgaXRzIGV5ZXMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdWdodGVyIG9mIGFsbCBnb29kIG1lbiwgYW5kIG9uIHRoZSBwYXJ0aXRpb24gb2YgdGhlIGNpdHkgYW5kIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiEgPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4/IFdoeSBkbyBJIHNheSBIaXJ0aXVzIGFuZCBQYW5zYT8gV2lsbCBDYWVzYXIsIHRoYXQgeW91bmcgbWFuCiAgICAgICAgICAgICAgICAgICAgb2Ygc2luZ3VsYXIgcGlldHksIGJlIGFibGUgdG8gcmVzdHJhaW4gaGltc2VsZiBmcm9tIHNlZWtpbmcgdG8gYXZlbmdlIHRoZQogICAgICAgICAgICAgICAgICAgIGluanVyaWVzIG9mIGhpcyBmYXRoZXIgaW4gdGhlIGJsb29kIG9mIERlY2ltdXMgQnJ1dHVzPyBUaGVyZWZvcmUsIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhZCByZWFkIGhpcyBsZXR0ZXIsIHRoZSBjb3Vyc2Ugd2hpY2ggdGhleSBhZG9wdGVkIHdhcyB0byBhcHByb2FjaCBuZWFyZXIKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZm9ydGlmaWNhdGlvbnMuIEFuZCBvbiB0aGlzIGFjY291bnQgd2Ugb3VnaHQgdG8gY29uc2lkZXIgQ2Flc2FyIGEgc3RpbGwKICAgICAgICAgICAgICAgICAgICBtb3JlIGFkbWlyYWJsZSB5b3VuZyBtYW47IGFuZCB0aGF0IGEgc3RpbGwgZ3JlYXRlciBraW5kbmVzcyBvZiB0aGUgaW1tb3J0YWwgZ29kcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGdhdmUgaGltIHRvIHRoZSByZXB1YmxpYywgYXMgaGUgaGFzIG5ldmVyIGJlZW4gbWlzbGVkIGJ5IHRoZSBzcGVjaW91cyB1c2UKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZmF0aGVyJ3MgbmFtZTsgbm9yIGJ5IGFueSBmYWxzZSBpZGVhIG9mIHBpZXR5IGFuZCBhZmZlY3Rpb24uIEhlIHNlZXMKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHRoYXQgdGhlIGdyZWF0ZXN0IHBpZXR5IGNvbnNpc3RzIGluIHRoZSBzYWx2YXRpb24gb2Ygb25lJ3MgY291bnRyeS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.20.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIGl0IHdlcmUgYSBjb250ZXN0IGJldHdlZW4gcGFydGllcywKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSBvZiB3aGljaCBpcyB1dHRlcmx5IGV4dGluY3QsIHRoZW4gd291bGQgQW50b25pdXMgYW5kIFZlbnRpZGl1cyBiZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgcGVyc29ucyB0byB1cGhvbGQgdGhlIHBhcnR5IG9mIENhZXNhciwgcmF0aGVyIHRoYW4gaW4gdGhlIGZpcnN0IHBsYWNlLAogICAgICAgICAgICAgICAgICAgIENhZXNhciwgYSB5b3VuZyBtYW4gZnVsbCBvZiB0aGUgZ3JlYXRlc3QgcGlldHkgYW5kIHRoZSBtb3N0IGFmZmVjdGlvbmF0ZQogICAgICAgICAgICAgICAgICAgIHJlY29sbGVjdGlvbiBvZiBoaXMgcGFyZW50PyBhbmQgbmV4dCB0byBoaW0gUGFuc2EgYW5kIEhpcnRpdXMsIHdobyBoZWxkIChpZiBJCiAgICAgICAgICAgICAgICAgICAgbWF5IHVzZSBzdWNoIGFuIGV4cHJlc3Npb24pIHRoZSB0d28gaG9ybnMgb2YgQ2Flc2FyLCBhdCB0aGUgdGltZSB3aGVuIHRoYXQKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlZCB0byBiZSBjYWxsZWQgYSBwYXJ0eS4gQnV0IHdoYXQgcGFydGllcyBhcmUgdGhlc2UsIHdoZW4gdGhlIG9uZSBwcm9wb3NlcwogICAgICAgICAgICAgICAgICAgIHRvIGl0c2VsZiB0byB1cGhvbGQgdGhlIGF1dGhvcml0eSBvZiB0aGUgc2VuYXRlLCB0aGUgbGliZXJ0eSBvZiB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGFuZCB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYywgd2hpbGUgdGhlIG90aGVyIGZpeGVzIGl0cyBleWVzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHNsYXVnaHRlciBvZiBhbGwgZ29vZCBtZW4sIGFuZCBvbiB0aGUgcGFydGl0aW9uIG9mIHRoZSBjaXR5IGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiEgPC90cmFuc2xhdGlvbj4="
translation['13.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCB1cyBjb21lIGF0IGxhc3QgdG8gdGhlIGVuZC4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnEkgZG8gbm90IGJlbGlldmUgdGhhdCBhbWJhc3NhZG9ycyBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgY29taW5n4oCU4oCdPC9xPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJxJIGRvIG5vdCBiZWxpZXZlIHRoYXQgYW1iYXNzYWRvcnMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWluZ+KAlOKAnTwvcT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUga25vd3MgbWUgd2VsbC4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFRvIGEgcGxhY2Ugd2hlcmUgd2FyIGV4aXN0cy7igJ08L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFRvIGEgcGxhY2Ugd2hlcmUgd2FyIGV4aXN0cy7igJ08L3E+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkVzcGVjaWFsbHkgd2l0aCB0aGUgZXhhbXBsZSBvZiBEb2xhYmVsbGEgYmVmb3JlIG91ciBleWVzIGFtYmFzc2Fkb3JzLCBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHRoaW5rLCB3aWxsIGhhdmUgcHJpdmlsZWdlcyBtb3JlIHJlc3BlY3RlZCB0aGFuIHR3byBjb25zdWxzIGFnYWluc3Qgd2hvbSBoZSBpcwogICAgICAgICAgICAgICAgICAgIGJlYXJpbmcgYXJtczsgb3IgdGhhbiBDYWVzYXIsIHdob3NlIGZhdGhlcidzIHByaWVzdCBoZSBpczsgb3IgdGhhbiB0aGUgY29uc3VsCiAgICAgICAgICAgICAgICAgICAgZWxlY3QsIHdob20gaGUgaXMgYXR0YWNraW5nOyBvciB0aGFuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiwgd2hpY2ggaGUgaXMgYmVzaWVnaW5nOyBvciB0aGFuIGhpcyBjb3VudHJ5LCB3aGljaCBoZSBpcwogICAgICAgICAgICAgICAgICAgIHRocmVhdGVuaW5nIHdpdGggZmlyZSBhbmQgc3dvcmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT4sIHdoaWNoIGhlIGlzIGJlc2llZ2luZzsgb3IgdGhhbiBoaXMgY291bnRyeSwgd2hpY2ggaGUgaXMKICAgICAgICAgICAgICAgICAgICB0aHJlYXRlbmluZyB3aXRoIGZpcmUgYW5kIHN3b3JkLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.21.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+4oCcV2hlbiB0aGV5IGRvIGNvbWUgSSBzaGFsbCBzZWUgd2hhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbWFuZC48L3E+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAnFdoZW4gdGhleSBkbyBjb21lIEkgc2hhbGwgc2VlIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgICAgICBkZW1hbmQuPC9xPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5QbGFndWVzIGFuZCB0b3J0dXJlcyBzZWl6ZSB5b3UhIFdpbGwgYW55IG9uZSBjb21lIHRvIHlvdSB1bmxlc3MgaGUgYmUgYSBtYW4gbGlrZQogICAgICAgICAgICAgICAgICAgIFZlbnRpZGl1cz8gV2Ugc2VudCBtZW4gb2YgdGhlIHZlcnkgaGlnaGVzdCBjaGFyYWN0ZXIgdG8gZXh0aW5ndWlzaCB0aGUgcmlzaW5nCiAgICAgICAgICAgICAgICAgICAgY29uZmxhZ3JhdGlvbjsgeW91IHJlamVjdGVkIHRoZW0uIFNoYWxsIHdlIG5vdyBzZW5kIG1lbiB3aGVuIHRoZSBmaXJlIGhhcyBiZWNvbWUKICAgICAgICAgICAgICAgICAgICBzbyBsYXJnZSBhbmQgaGFzIHJpc2VuIHRvIHN1Y2ggYSBoZWlnaHQsIGFuZCB3aGVuIHlvdSBoYXZlIGxlZnQgeW91cnNlbGYgbm8KICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSByb29tLCBub3Qgb25seSBmb3IgcGVhY2UsIGJ1dCBub3QgZXZlbiBmb3IgYSBzdXJyZW5kZXI/IDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IEkgaGF2ZSByZWFkIHlvdSB0aGlzIGxldHRlciwgTyBjb25zY3JpcHQgZmF0aGVycywgbm90IGJlY2F1c2UgSSB0aG91Z2h0IGl0IHdvcnRoCiAgICAgICAgICAgICAgICAgICAgcmVhZGluZywgYnV0IGluIG9yZGVyIHRvIGxldCB5b3Ugc2VlIGFsbCBoaXMgcGFycmljaWRhbCB0cmVhc29ucyByZXZlYWxlZCBieSBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gY29uZmVzc2lvbnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gV291bGQgTWFyY3VzIExlcGlkdXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBtYW4gc28gcmljaGx5IGVuZG93ZWQgd2l0aCBhbGwgdGhlIGdpZnRzIG9mIHZpcnR1ZSBhbmQgZm9ydHVuZSwgaWYgaGUgc2F3IHRoaXMKICAgICAgICAgICAgICAgICAgICBsZXR0ZXIsIGVpdGhlciB3aXNoIGZvciBwZWFjZSB3aXRoIHRoaXMgbWFuLCBvciBldmVuIHRoaW5rIGl0IHBvc3NpYmxlIHRoYXQKICAgICAgICAgICAgICAgICAgICBwZWFjZSBzaG91bGQgYmUgbWFkZT8g4oCcU29vbmVyIHNoYWxsIGZpcmUgYW5kIHdhdGVyIG1pbmdsZSzigJ0KICAgICAgICAgICAgICAgICAgICBhcyBzb21lIHBvZXQgb3Igb3RoZXIgc2F5czsgc29vbmVyIHNoYWxsIGFueSB0aGluZyBpbiB0aGUgd29ybGQgaGFwcGVuIHRoYW4KICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhlIHJlcHVibGljIGJlY29tZSByZWNvbmNpbGVkIHRvIHRoZSBBbnRvbmlpLCBvciB0aGUgQW50b25paSB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gVGhvc2UgbWVuIGFyZSBtb25zdGVycywgcHJvZGlnaWVzLCBwb3J0ZW50b3VzIHBlc3RzIG9mIHRoZSByZXB1YmxpYy4KICAgICAgICAgICAgICAgICAgICBJdCB3b3VsZCBiZSBiZXR0ZXIgZm9yIHRoaXMgY2l0eSB0byBiZSB1cGxpZnRlZCBmcm9tIGl0cyBmb3VuZGF0aW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlZCwgaWYgc3VjaCBhIHRoaW5nIHdlcmUgcG9zc2libGUsIGludG8gb3RoZXIgcmVnaW9ucywgd2hlcmUgaXQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGVhciBvZiB0aGUgYWN0aW9ucyBvciB0aGUgbmFtZSBvZiB0aGUgQW50b25paSwgdGhhbiBmb3IgaXQgdG8gc2VlIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuLCBkcml2ZW4gb3V0IGJ5IHRoZSB2YWxvciBvZiBDYWVzYXIsIGFuZCBoZW1tZWQgaW4gYnkgdGhlIGNvdXJhZ2Ugb2YgQnJ1dHVzLAogICAgICAgICAgICAgICAgICAgIGluc2lkZSB0aGVzZSB3YWxscy4gVGhlIG1vc3QgZGVzaXJhYmxlIHRoaW5nIGlzIHZpY3Rvcnk7IHRoZSBuZXh0IGJlc3QgdGhpbmcgaXMKICAgICAgICAgICAgICAgICAgICB0byB0aGluayBubyBkaXNhc3RlciB0b28gZ3JlYXQgdG8gYmVhciBpbiBkZWZlbnNlIG9mIHRoZSBkaWduaXR5IGFuZCBmcmVlZG9tIG9mCiAgICAgICAgICAgICAgICAgICAgb25lJ3MgY291bnRyeS4gVGhlIHJlbWFpbmluZyBhbHRlcm5hdGl2ZSwgSSB3aWxsIG5vdCBjYWxsIGl0IHRoZSB0aGlyZCwgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGxvd2VzdCBvZiBhbGwsIGlzIHRvIHVuZGVyZ28gdGhlIGdyZWF0ZXN0IGRpc2dyYWNlIGZyb20gYSBkZXNpcmUgb2YgbGlmZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.21.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gV291bGQgTWFyY3VzIExlcGlkdXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICBtYW4gc28gcmljaGx5IGVuZG93ZWQgd2l0aCBhbGwgdGhlIGdpZnRzIG9mIHZpcnR1ZSBhbmQgZm9ydHVuZSwgaWYgaGUgc2F3IHRoaXMKICAgICAgICAgICAgICAgICAgICBsZXR0ZXIsIGVpdGhlciB3aXNoIGZvciBwZWFjZSB3aXRoIHRoaXMgbWFuLCBvciBldmVuIHRoaW5rIGl0IHBvc3NpYmxlIHRoYXQKICAgICAgICAgICAgICAgICAgICBwZWFjZSBzaG91bGQgYmUgbWFkZT8g4oCcU29vbmVyIHNoYWxsIGZpcmUgYW5kIHdhdGVyIG1pbmdsZSzigJ0KICAgICAgICAgICAgICAgICAgICBhcyBzb21lIHBvZXQgb3Igb3RoZXIgc2F5czsgc29vbmVyIHNoYWxsIGFueSB0aGluZyBpbiB0aGUgd29ybGQgaGFwcGVuIHRoYW4KICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhlIHJlcHVibGljIGJlY29tZSByZWNvbmNpbGVkIHRvIHRoZSBBbnRvbmlpLCBvciB0aGUgQW50b25paSB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYy4gVGhvc2UgbWVuIGFyZSBtb25zdGVycywgcHJvZGlnaWVzLCBwb3J0ZW50b3VzIHBlc3RzIG9mIHRoZSByZXB1YmxpYy4KICAgICAgICAgICAgICAgICAgICBJdCB3b3VsZCBiZSBiZXR0ZXIgZm9yIHRoaXMgY2l0eSB0byBiZSB1cGxpZnRlZCBmcm9tIGl0cyBmb3VuZGF0aW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlZCwgaWYgc3VjaCBhIHRoaW5nIHdlcmUgcG9zc2libGUsIGludG8gb3RoZXIgcmVnaW9ucywgd2hlcmUgaXQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGVhciBvZiB0aGUgYWN0aW9ucyBvciB0aGUgbmFtZSBvZiB0aGUgQW50b25paSwgdGhhbiBmb3IgaXQgdG8gc2VlIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuLCBkcml2ZW4gb3V0IGJ5IHRoZSB2YWxvciBvZiBDYWVzYXIsIGFuZCBoZW1tZWQgaW4gYnkgdGhlIGNvdXJhZ2Ugb2YgQnJ1dHVzLAogICAgICAgICAgICAgICAgICAgIGluc2lkZSB0aGVzZSB3YWxscy4gVGhlIG1vc3QgZGVzaXJhYmxlIHRoaW5nIGlzIHZpY3Rvcnk7IHRoZSBuZXh0IGJlc3QgdGhpbmcgaXMKICAgICAgICAgICAgICAgICAgICB0byB0aGluayBubyBkaXNhc3RlciB0b28gZ3JlYXQgdG8gYmVhciBpbiBkZWZlbnNlIG9mIHRoZSBkaWduaXR5IGFuZCBmcmVlZG9tIG9mCiAgICAgICAgICAgICAgICAgICAgb25lJ3MgY291bnRyeS4gVGhlIHJlbWFpbmluZyBhbHRlcm5hdGl2ZSwgSSB3aWxsIG5vdCBjYWxsIGl0IHRoZSB0aGlyZCwgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIGxvd2VzdCBvZiBhbGwsIGlzIHRvIHVuZGVyZ28gdGhlIGdyZWF0ZXN0IGRpc2dyYWNlIGZyb20gYSBkZXNpcmUgb2YgbGlmZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.21.50'] = ""
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JZiwgTyBjb25zY3JpcHQgZmF0aGVycywgd2hpbGUgSSBsZWFybmVkIGZyb20gdGhlIGxldHRlcnMgd2hpY2ggaGF2ZSBiZWVuIHJlYWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBhcm15IG9mIG91ciBtb3N0IHdpY2tlZCBlbmVtaWVzIGhhZCBiZWVuIGRlZmVhdGVkIGFuZCByb3V0ZWQsIEkgaGFkCiAgICAgICAgICAgICAgICAgICAgYWxzbyBsZWFybmVkIHdoYXQgd2UgYWxsIHdpc2ggZm9yIGFib3ZlIGFsbCB0aGluZ3MsIGFuZCB3aGljaCB3ZSBkbyBzdXBwb3NlIGhhcwogICAgICAgICAgICAgICAgICAgIHJlc3VsdGVkIGZyb20gdGhhdCB2aWN0b3J5IHdoaWNoIGhhcyBiZWVuIGFjaGlldmVkLOKAlG5hbWVseSwgdGhhdAogICAgICAgICAgICAgICAgICAgIERlY2ltdXMgQnJ1dHVzIGhhZCBhbHJlYWR5IHF1aXR0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+LOKAlHRoZW4gSSBzaG91bGQgd2l0aG91dCBhbnkgaGVzaXRhdGlvbiBnaXZlIG15CiAgICAgICAgICAgICAgICAgICAgdm90ZSBmb3Igb3VyIHJldHVybmluZyB0byBvdXIgdXN1YWwgZHJlc3Mgb3V0IG9mIGpveSBhdCB0aGUgc2FmZXR5IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBjaXRpemVuIG9uIGFjY291bnQgb2Ygd2hvc2UgZGFuZ2VyIGl0IHdhcyB0aGF0IHdlIGFkb3B0ZWQgdGhlIHJvYmUgb2Ygd2FyLCBCdXQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgYW55IG5ld3Mgb2YgdGhhdCBldmVudCB3aGljaCB0aGUgY2l0eSBsb29rcyBmb3Igd2l0aCB0aGUgZ3JlYXRlc3QKICAgICAgICAgICAgICAgICAgICBlYWdlcm5lc3MgYXJyaXZlcywgd2UgaGF2ZSBzdWZmaWNpZW50IHJlYXNvbiBpbmRlZWQgZm9yIGpveSBhdCB0aGlzIG1vc3QKICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbnQgYW5kIG1vc3QgaWxsdXN0cmlvdXMgYmF0dGxlOyBidXQgcmVzZXJ2ZSwgSSBiZWcgeW91LCB5b3VyIHJldHVybiB0bwogICAgICAgICAgICAgICAgICAgIHlvdXIgdXN1YWwgZHJlc3MgZm9yIHRoZSB0aW1lIG9mIGNvbXBsZXRlIHZpY3RvcnkuIEJ1dCB0aGUgY29tcGxldGlvbiBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgd2FyIGlzIHRoZSBzYWZldHkgb2YgRGVjaW11cyBCcnV0dXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPizigJR0aGVuIEkgc2hvdWxkIHdpdGhvdXQgYW55IGhlc2l0YXRpb24gZ2l2ZSBteQogICAgICAgICAgICAgICAgICAgIHZvdGUgZm9yIG91ciByZXR1cm5pbmcgdG8gb3VyIHVzdWFsIGRyZXNzIG91dCBvZiBqb3kgYXQgdGhlIHNhZmV0eSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBvbiBhY2NvdW50IG9mIHdob3NlIGRhbmdlciBpdCB3YXMgdGhhdCB3ZSBhZG9wdGVkIHRoZSByb2JlIG9mIHdhciwgQnV0CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGFueSBuZXdzIG9mIHRoYXQgZXZlbnQgd2hpY2ggdGhlIGNpdHkgbG9va3MgZm9yIHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgZWFnZXJuZXNzIGFycml2ZXMsIHdlIGhhdmUgc3VmZmljaWVudCByZWFzb24gaW5kZWVkIGZvciBqb3kgYXQgdGhpcyBtb3N0CiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IGFuZCBtb3N0IGlsbHVzdHJpb3VzIGJhdHRsZTsgYnV0IHJlc2VydmUsIEkgYmVnIHlvdSwgeW91ciByZXR1cm4gdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIHVzdWFsIGRyZXNzIGZvciB0aGUgdGltZSBvZiBjb21wbGV0ZSB2aWN0b3J5LiBCdXQgdGhlIGNvbXBsZXRpb24gb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHdhciBpcyB0aGUgc2FmZXR5IG9mIERlY2ltdXMgQnJ1dHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgaXMgdGhlIG1lYW5pbmcgb2YgdGhpcyBwcm9wb3NhbCB0aGF0IG91ciBkcmVzcyBzaGFsbCBiZSBjaGFuZ2VkIGp1c3QgZm9yCiAgICAgICAgICAgICAgICAgICAgdG9kYXksIGFuZCB0aGF0IHRvbW9ycm93IHdlIHNob3VsZCBhZ2FpbiBjb21lIGZvcnRoIGluIHRoZSBnYXJiIG9mIHdhcj8gUmF0aGVyCiAgICAgICAgICAgICAgICAgICAgd2hlbiB3ZSBoYXZlIG9uY2UgdHVybmVkIHRvIHRoYXQgZHJlc3Mgd2hpY2ggd2Ugd2lzaCBhbmQgZGVzaXJlIHRvIGFzc3VtZSwgbGV0CiAgICAgICAgICAgICAgICAgICAgdXMgc3RyaXZlIHRvIHJldGFpbiBpdCBmb3JldmVyOyBmb3IgdGhpcyBpcyBub3Qgb25seSBkaXNjcmVkaXRhYmxlLCBidXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICBkaXNwbGVhc2luZyBhbHNvIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCB0byBsZWF2ZSB0aGVpciBhbHRhcnMsIHdoaWNoIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBhcHByb2FjaGVkIGluIHRoZSBhdHRpcmUgb2YgcGVhY2UsIGZvciB0aGUgcHVycG9zZSBvZiBhc3N1bWluZyB0aGUgZ2FyYiBvZiB3YXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgSSBub3RpY2UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgc29tZSB3aG8gZmF2b3IgdGhpcyBwcm9wb3NhbDogd2hvc2UgaW50ZW50aW9uIGFuZCBkZXNpZ24gaXMsIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBzZWUgdGhhdCB0aGF0IHdpbGwgYmUgYSBtb3N0IGdsb3Jpb3VzIGRheSBmb3IgRGVjaW11cyBCcnV0dXMgb24gd2hpY2ggd2UgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIHVzdWFsIGRyZXNzIG91dCBvZiBqb3kgZm9yIGhpcyBzYWZldHksIHRvIGRlcHJpdmUgaGltIG9mIHRoaXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICByZXdhcmQsIHNvIHRoYXQgaXQgbWF5IG5vdCBiZSBoYW5kZWQgZG93biB0byB0aGUgcmVjb2xsZWN0aW9uIG9mIHBvc3Rlcml0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZSBoYWQgcmVjb3Vyc2UgdG8gdGhlIGdhcmIgb2Ygd2FyIG9uIGFjY291bnQgb2YgdGhlIGRhbmdlciBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBzaW5nbGUgY2l0aXplbiwgYW5kIHRoZW4gcmV0dXJuZWQgdG8gdGhlaXIgZ293bnMgb2YgcGVuY2Ugb24gYWNjb3VudCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzYWZldHkuIFRha2UgYXdheSB0aGlzIHJlYXNvbiwgYW5kIHlvdSB3aWxsIGZpbmQgbm8gb3RoZXIgZm9yIHNvIGFic3VyZCBhCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwuIEJ1dCBkbyB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHByZXNlcnZlIHlvdXIgYXV0aG9yaXR5LCBhZGhlcmUgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIG93biBvcGluaW9ucywgcHJlc2VydmUgaW4geW91ciByZWNvbGxlY3Rpb24gd2hhdCB5b3UgaGF2ZSBvZnRlbiBkZWNsYXJlZCwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB3aG9sZSByZXN1bHQgb2YgdGhpcyBlbnRpcmUgd2FyIGRlcGVuZHMgb24gdGhlIGxpZmUgb2Ygb25lIG1vc3QgYnJhdmUKICAgICAgICAgICAgICAgICAgICBhbmQgZXhjZWxsZW50IG1hbi4gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgSSBub3RpY2UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgc29tZSB3aG8gZmF2b3IgdGhpcyBwcm9wb3NhbDogd2hvc2UgaW50ZW50aW9uIGFuZCBkZXNpZ24gaXMsIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBzZWUgdGhhdCB0aGF0IHdpbGwgYmUgYSBtb3N0IGdsb3Jpb3VzIGRheSBmb3IgRGVjaW11cyBCcnV0dXMgb24gd2hpY2ggd2UgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIHVzdWFsIGRyZXNzIG91dCBvZiBqb3kgZm9yIGhpcyBzYWZldHksIHRvIGRlcHJpdmUgaGltIG9mIHRoaXMgZ3JlYXQKICAgICAgICAgICAgICAgICAgICByZXdhcmQsIHNvIHRoYXQgaXQgbWF5IG5vdCBiZSBoYW5kZWQgZG93biB0byB0aGUgcmVjb2xsZWN0aW9uIG9mIHBvc3Rlcml0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIFJvbWFuIHBlb3BsZSBoYWQgcmVjb3Vyc2UgdG8gdGhlIGdhcmIgb2Ygd2FyIG9uIGFjY291bnQgb2YgdGhlIGRhbmdlciBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBzaW5nbGUgY2l0aXplbiwgYW5kIHRoZW4gcmV0dXJuZWQgdG8gdGhlaXIgZ293bnMgb2YgcGVuY2Ugb24gYWNjb3VudCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBzYWZldHkuIFRha2UgYXdheSB0aGlzIHJlYXNvbiwgYW5kIHlvdSB3aWxsIGZpbmQgbm8gb3RoZXIgZm9yIHNvIGFic3VyZCBhCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwuIEJ1dCBkbyB5b3UsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHByZXNlcnZlIHlvdXIgYXV0aG9yaXR5LCBhZGhlcmUgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIG93biBvcGluaW9ucywgcHJlc2VydmUgaW4geW91ciByZWNvbGxlY3Rpb24gd2hhdCB5b3UgaGF2ZSBvZnRlbiBkZWNsYXJlZCwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB3aG9sZSByZXN1bHQgb2YgdGhpcyBlbnRpcmUgd2FyIGRlcGVuZHMgb24gdGhlIGxpZmUgb2Ygb25lIG1vc3QgYnJhdmUKICAgICAgICAgICAgICAgICAgICBhbmQgZXhjZWxsZW50IG1hbi4gPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['14.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHRoZSBwdXJwb3NlIG9mIGVmZmVjdGluZyB0aGUgbGliZXJhdGlvbiBvZiBEZWNpbXVzIEJydXR1cywgdGhlIGNoaWVmIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSB3ZXJlIHNlbnQgYXMgYW1iYXNzYWRvcnMsIHRvIGdpdmUgbm90aWNlIHRvIHRoYXQgZW5lbXkgYW5kIHBhcnJpY2lkYWwKICAgICAgICAgICAgICAgICAgICB0cmFpdG9yIHRvIHJldGlyZSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPjsgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHNha2Ugb2YgcHJlc2VydmluZyB0aGF0IHNhbWUgRGVjaW11cyBCcnV0dXMsIEF1bHVzIEhpcnRpdXMsIHRoZSBjb25zdWwsIHdlbnQKICAgICAgICAgICAgICAgICAgICBieSBsb3QgdG8gY29uZHVjdCB0aGUgd2FyOyBhIG1hbiB0aGUgd2Vha25lc3Mgb2Ygd2hvc2UgYm9kaWx5IGhlYWx0aCB3YXMgbWFkZSB1cAogICAgICAgICAgICAgICAgICAgIGZvciBieSB0aGUgc3RyZW5ndGggb2YgaGlzIGNvdXJhZ2UsIGFuZCBlbmNvdXJhZ2VkIGJ5IHRoZSBob3BlIG9mIHZpY3Rvcnk7CiAgICAgICAgICAgICAgICAgICAgQ2Flc2FyLCB0b28sIGFmdGVyIGhlLCB3aXRoIGFuIGFybXkgbGV2aWVkIGJ5IGhpcyBvd24gcmVzb3VyY2VzIGFuZCBvbiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5LCBoYWQgZGVsaXZlcmVkIHRoZSByZXB1YmxpYyBmcm9tIHRoZSBmaXJzdCBkYW5nZXJzIHRoYXQgYXNzYWlsZWQgaXQsCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdG8gcHJldmVudCBhbnkgc3Vic2VxdWVudCB3aWNrZWQgYXR0ZW1wdHMgZnJvbSBiZWluZyBvcmlnaW5hdGVkLAogICAgICAgICAgICAgICAgICAgIGRlcGFydGVkIHRvIGFzc2lzdCBpbiB0aGUgZGVsaXZlcmFuY2Ugb2YgdGhlIHNhbWUgQnJ1dHVzLCBhbmQgc3ViZHVlZCBzb21lCiAgICAgICAgICAgICAgICAgICAgZmFtaWx5IHZleGF0aW9uIHdoaWNoIGhlIG1heSBoYXZlIGZlbHQgYnkgaGlzIGF0dGFjaG1lbnQgdG8gaGlzIGNvdW50cnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IG90aGVyIG9iamVjdCBoYWQgQ2FpdXMgUGFuc2EgaW4KICAgICAgICAgICAgICAgICAgICBob2xkaW5nIHRoZSBsZXZpZXMgd2hpY2ggaGUgZGlkLCBhbmQgaW4gY29sbGVjdGluZyBtb25leSwgYW5kIGluIGNhcnJ5aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3Qgc2V2ZXJlIHJlc29sdXRpb25zIG9mIHRoZSBzZW5hdGUgYWdhaW5zdCBBbnRvbml1cywgYW5kIGluIGV4aG9ydGluZyB1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gaW52aXRpbmcgdGhlIFJvbWFuIHBlb3BsZSB0byBlbWJyYWNlIHRoZSBjYXVzZSBvZiBsaWJlcnR5LCBleGNlcHQgdG8gaW5zdXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlbGl2ZXJhbmNlIG9mIERlY2ltdXMgQnJ1dHVzPyBGb3IgdGhlIFJvbWFuIHBlb3BsZSBpbiBjcm93ZHMgZGVtYW5kZWQgYXQKICAgICAgICAgICAgICAgICAgICBoaXMgaGFuZHMgdGhlIHNhZmV0eSBvZiBEZWNpbXVzIEJydXR1cyB3aXRoIHN1Y2ggdW5hbmltb3VzIG91dGNyaWVzLCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0byBwcmVmZXIgaXQgbm90IG9ubHkgdG8gYW55IGNvbnNpZGVyYXRpb24gb2YgaGlzIG93biBwZXJzb25hbAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSwgYnV0IGV2ZW4gdG8gaGlzIG93biBuZWNlc3NpdGllcy4gQW5kIHRoYXQgZW5kIHdlIG5vdywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCBhcmUgZW50aXRsZWQgdG8gaG9wZSBpcyBlaXRoZXIgYXQgdGhlIHBvaW50IG9mIGJlaW5nIGFjaGlldmVkLCBvciBpcwogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGdhaW5lZDsgYnV0IGl0IGlzIHJpZ2h0IGZvciB0aGUgcmV3YXJkIG9mIG91ciBob3BlcyB0byBiZSByZXNlcnZlZCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgaXNzdWUgYW5kIGV2ZW50IG9mIHRoZSBidXNpbmVzcywgbGVzdCB3ZSBzaG91bGQgYXBwZWFyIGVpdGhlciB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYW50aWNpcGF0ZWQgdGhlIGtpbmRuZXNzIG9mIHRoZSBnb2RzIGJ5IG91ciBvdmVyIHByZWNpcGl0YXRpb24sIG9yIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCB0aGUgYm91bnR5IG9mIGZvcnR1bmUgdGhyb3VnaCBvdXIgb3duIGZvbGx5LiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE11dGluYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTXV0aW5hIj5NdXRpbmE8L3BsYWNlTmFtZT47IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBzYWtlIG9mIHByZXNlcnZpbmcgdGhhdCBzYW1lIERlY2ltdXMgQnJ1dHVzLCBBdWx1cyBIaXJ0aXVzLCB0aGUgY29uc3VsLCB3ZW50CiAgICAgICAgICAgICAgICAgICAgYnkgbG90IHRvIGNvbmR1Y3QgdGhlIHdhcjsgYSBtYW4gdGhlIHdlYWtuZXNzIG9mIHdob3NlIGJvZGlseSBoZWFsdGggd2FzIG1hZGUgdXAKICAgICAgICAgICAgICAgICAgICBmb3IgYnkgdGhlIHN0cmVuZ3RoIG9mIGhpcyBjb3VyYWdlLCBhbmQgZW5jb3VyYWdlZCBieSB0aGUgaG9wZSBvZiB2aWN0b3J5OwogICAgICAgICAgICAgICAgICAgIENhZXNhciwgdG9vLCBhZnRlciBoZSwgd2l0aCBhbiBhcm15IGxldmllZCBieSBoaXMgb3duIHJlc291cmNlcyBhbmQgb24gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSwgaGFkIGRlbGl2ZXJlZCB0aGUgcmVwdWJsaWMgZnJvbSB0aGUgZmlyc3QgZGFuZ2VycyB0aGF0IGFzc2FpbGVkIGl0LAogICAgICAgICAgICAgICAgICAgIGluIG9yZGVyIHRvIHByZXZlbnQgYW55IHN1YnNlcXVlbnQgd2lja2VkIGF0dGVtcHRzIGZyb20gYmVpbmcgb3JpZ2luYXRlZCwKICAgICAgICAgICAgICAgICAgICBkZXBhcnRlZCB0byBhc3Npc3QgaW4gdGhlIGRlbGl2ZXJhbmNlIG9mIHRoZSBzYW1lIEJydXR1cywgYW5kIHN1YmR1ZWQgc29tZQogICAgICAgICAgICAgICAgICAgIGZhbWlseSB2ZXhhdGlvbiB3aGljaCBoZSBtYXkgaGF2ZSBmZWx0IGJ5IGhpcyBhdHRhY2htZW50IHRvIGhpcyBjb3VudHJ5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IG90aGVyIG9iamVjdCBoYWQgQ2FpdXMgUGFuc2EgaW4KICAgICAgICAgICAgICAgICAgICBob2xkaW5nIHRoZSBsZXZpZXMgd2hpY2ggaGUgZGlkLCBhbmQgaW4gY29sbGVjdGluZyBtb25leSwgYW5kIGluIGNhcnJ5aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3Qgc2V2ZXJlIHJlc29sdXRpb25zIG9mIHRoZSBzZW5hdGUgYWdhaW5zdCBBbnRvbml1cywgYW5kIGluIGV4aG9ydGluZyB1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gaW52aXRpbmcgdGhlIFJvbWFuIHBlb3BsZSB0byBlbWJyYWNlIHRoZSBjYXVzZSBvZiBsaWJlcnR5LCBleGNlcHQgdG8gaW5zdXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlbGl2ZXJhbmNlIG9mIERlY2ltdXMgQnJ1dHVzPyBGb3IgdGhlIFJvbWFuIHBlb3BsZSBpbiBjcm93ZHMgZGVtYW5kZWQgYXQKICAgICAgICAgICAgICAgICAgICBoaXMgaGFuZHMgdGhlIHNhZmV0eSBvZiBEZWNpbXVzIEJydXR1cyB3aXRoIHN1Y2ggdW5hbmltb3VzIG91dGNyaWVzLCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0byBwcmVmZXIgaXQgbm90IG9ubHkgdG8gYW55IGNvbnNpZGVyYXRpb24gb2YgaGlzIG93biBwZXJzb25hbAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSwgYnV0IGV2ZW4gdG8gaGlzIG93biBuZWNlc3NpdGllcy4gQW5kIHRoYXQgZW5kIHdlIG5vdywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCBhcmUgZW50aXRsZWQgdG8gaG9wZSBpcyBlaXRoZXIgYXQgdGhlIHBvaW50IG9mIGJlaW5nIGFjaGlldmVkLCBvciBpcwogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGdhaW5lZDsgYnV0IGl0IGlzIHJpZ2h0IGZvciB0aGUgcmV3YXJkIG9mIG91ciBob3BlcyB0byBiZSByZXNlcnZlZCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgaXNzdWUgYW5kIGV2ZW50IG9mIHRoZSBidXNpbmVzcywgbGVzdCB3ZSBzaG91bGQgYXBwZWFyIGVpdGhlciB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYW50aWNpcGF0ZWQgdGhlIGtpbmRuZXNzIG9mIHRoZSBnb2RzIGJ5IG91ciBvdmVyIHByZWNpcGl0YXRpb24sIG9yIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXNwaXNlZCB0aGUgYm91bnR5IG9mIGZvcnR1bmUgdGhyb3VnaCBvdXIgb3duIGZvbGx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgc2luY2UgdGhlIG1hbm5lciBvZiB5b3VyIGJlaGF2aW9yIHNob3dzIHBsYWlubHkgZW5vdWdoIHdoYXQgeW91IHRoaW5rIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIsIEkgd2lsbCBjb21lIHRvIHRoZSBsZXR0ZXJzIHdoaWNoIGhhdmUgYXJyaXZlZCBmcm9tIHRoZSBjb25zdWxzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wcmFldG9yLCBhZnRlciBJIGhhdmUgc2FpZCBhIGZldyB3b3JkcyByZWxhdGluZyB0byB0aGUgbGV0dGVycyB0aGVtc2VsdmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHN3b3JkcywgTyBjb25zY3JpcHQgZmF0aGVycywgb2Ygb3VyIGxlZ2lvbnMgYW5kIGFybWllcyBoYXZlIGJlZW4gc3RhaW5lZAogICAgICAgICAgICAgICAgICAgIHdpdGgsIG9yIHJhdGhlciwgSSBzaG91bGQgc2F5LCBkaXBwZWQgZGVlcCBpbiBibG9vZCBpbiB0d28gYmF0dGxlcyB3aGljaCBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gcGxhY2UgdW5kZXIgdGhlIGNvbnN1bHMsIGFuZCBhIHRoaXJkLCB3aGljaCBoYXMgYmVlbiBmb3VnaHQgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCBvZiBDYWVzYXIuIElmIGl0IHdhcyB0aGUgYmxvb2Qgb2YgZW5lbWllcywgdGhlbiBncmVhdCBpcyB0aGUgcGlldHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgc29sZGllcnM7IGJ1dCBpdCBpcyBuZWZhcmlvdXMgd2lja2VkbmVzcyBpZiBpdCB3YXMgdGhlIGJsb29kIG9mIGNpdGl6ZW5zLgogICAgICAgICAgICAgICAgICAgIEhvdyBsb25nLCB0aGVuLCBpcyB0aGF0IG1hbiwgd2hvIGhhcyBzdXJwYXNzZWQgYWxsIGVuZW1pZXMgaW4gd2lja2VkbmVzcywgdG8gYmUKICAgICAgICAgICAgICAgICAgICBzcGFyZWQgdGhlIG5hbWUgb2YgZW5lbXk/IHVubGVzcyB5b3Ugd2lzaCB0byBzZWUgdGhlIHZlcnkgc3dvcmRzIG9mIG91ciBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIHRyZW1ibGluZyBpbiB0aGVpciBoYW5kcyB3aGlsZSB0aGV5IGRvdWJ0IHdoZXRoZXIgdGhleSBhcmUgcGllcmNpbmcgYSBjaXRpemVuIG9yCiAgICAgICAgICAgICAgICAgICAgYW4gZW5lbXkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBZb3Ugdm90ZSBhIHN1cHBsaWNhdGlvbjsgeW91IGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGNhbGwgQW50b25pdXMgYW4gZW5lbXkuIFZlcnkgcGxlYXNpbmcgaW5kZWVkIHRvIHRoZSBpbW1vcnRhbCBnb2RzIHdpbGwgb3VyCiAgICAgICAgICAgICAgICAgICAgdGhhbmtzZ2l2aW5ncyBiZSwgdmVyeSBwbGVhc2luZyB0b28gdGhlIHZpY3RpbXMsIGFmdGVyIGEgbXVsdGl0dWRlIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGhhcyBiZWVuIHNsYWluISDigJxGb3IgdGhlIHZpY3RvcnnigJ0gc2F5cyB0aGUgcHJvcG9zZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3VwcGxpY2F0aW9uLCDigJxvdmVyIHdpY2tlZCBhbmQgYXVkYWNpb3VzIG1lbi7igJ0gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyB3aGF0IHRoaXMgbW9zdCBpbGx1c3RyaW91cyBtYW4gY2FsbHMgdGhlbTsgZXhwcmVzc2lvbnMgb2YgYmxhbWUgc3VpdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gbGF3c3VpdHMgY2FycmllZCBvbiBpbiB0aGUgY2l0eSwgbm90IGRlbnVuY2lhdGlvbnMgb2Ygc2VhcmluZyBpbmZhbXkgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIGJ5IGludGVybmVjaW5lIHdhci4gSSBzdXBwb3NlIHRoZXkgYXJlIGZvcmdpbmcgd2lsbHMsIG9yIHRyZXNwYXNzaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbmVpZ2hib3JzLCBvciBjaGVhdGluZyBzb21lIHlvdW5nIG1lbjsgZm9yIGl0IGlzIG1lbiBpbXBsaWNhdGVkIGluIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHNpbWlsYXIgcHJhY3RpY2VzIHRoYXQgd2UgYXJlIGluIHRoZSBoYWJpdCBvZiB0ZXJtaW5nIHdpY2tlZCBhbmQgYXVkYWNpb3VzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IE9uZSBtYW4sIHRoZSBmb3VsZXN0IG9mIGFsbCBiYW5kaXR0aSwgaXMKICAgICAgICAgICAgICAgICAgICB3YWdpbmcgYW4gaXJyZWNvbmNpbGFibGUgd2FyIGFnYWluc3QgZm91ciBjb25zdWxzLiBIZSBpcyBhdCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgY2Fycnlpbmcgb24gd2FyIGFnYWluc3QgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIEhlIGlzIChhbHRob3VnaCBoZSBpcyBoaW1zZWxmIGhhc3RlbmluZyB0byBkZXN0cnVjdGlvbjsKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSBkaXNhc3RlcnMgd2hpY2ggaGUgaGFzIG1ldCB3aXRoKSB0aHJlYXRlbmluZyBhbGwgb2YgdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uLCBhbmQgZGV2YXN0YXRpb24sIGFuZCB0b3JtZW50cywgYW5kIHRvcnR1cmVzLiBIZSBkZWNsYXJlcyB0aGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICBpbmh1bWFuIGFuZCBzYXZhZ2UgYWN0IG9mIERvbGFiZWxsYSdzLCB3aGljaCBubyBuYXRpb24gb2YgYmFyYmFyaWFucyB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgb3duZWQsIHdhcyBkb25lIGJ5IGhpcyBhZHZpY2U7IGFuZCB3aGF0IGhlIGhpbXNlbGYgd291bGQgZG8gaW4gdGhpcyBjaXR5LCBpZgogICAgICAgICAgICAgICAgICAgIHRoaXMgdmVyeSBKdXBpdGVyLCB3aG8gbm93IGxvb2tzIGRvd24gdXBvbiB1cyBhc3NlbWJsZWQgaW4gaGlzIHRlbXBsZSwgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlcGVsbGVkIGhpbSBmcm9tIHRoaXMgdGVtcGxlIGFuZCBmcm9tIHRoZXNlIHdhbGxzLCBoZSBzaG93ZWQsIGluIHRoZSBtaXNlcmllcwogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIGluaGFiaXRhbnRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0OTQyIiBrZXk9InRnbiw3MDA0OTQyIj5QYXJtYTwvcGxhY2VOYW1lPiwgd2hvbSwKICAgICAgICAgICAgICAgICAgICB2aXJ0dW91cyBhbmQgaG9ub3JhYmxlIG1lbiBhcyB0aGV5IHdlcmUsIGFuZCBtb3N0IGludGltYXRlbHkgY29ubmVjdGVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5IG9mIHRoaXMgb3JkZXIsIGFuZCB3aXRoIHRoZSBkaWduaXR5IG9mIHRoZSBSb21hbiBwZW9wbGUsIHRoYXQgdmlsbGFpbgogICAgICAgICAgICAgICAgICAgIGFuZCBtb25zdGVyLCBMdWNpdXMgQW50b25pdXMsIHRoYXQgb2JqZWN0IG9mIHRoZSBleHRyYW9yZGluYXJ5IGRldGVzdGF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIG1lbiwgYW5kIChpZiB0aGUgZ29kcyBoYXRlIHRob3NlIHdob20gdGhleSBvdWdodCkgb2YgYWxsIHRoZSBnb2RzIGFsc28sCiAgICAgICAgICAgICAgICAgICAgbXVyZGVyZWQgd2l0aCBldmVyeSBjaXJjdW1zdGFuY2Ugb2YgY3J1ZWx0eS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIE15IG1pbmQgc2h1ZGRlcnMgYXQgdGhlIHJlY29sbGVjdGlvbiwgTyBjb25zY3JpcHQgZmF0aGVycywgYW5kIHNocmlua3MgZnJvbQogICAgICAgICAgICAgICAgICAgIHJlbGF0aW5nIHRoZSBjcnVlbHRpZXMgd2hpY2ggTHVjaXVzIEFudG9uaXVzIHBlcnBldHJhdGVkIG9uIHRoZSBjaGlsZHJlbiBhbmQKICAgICAgICAgICAgICAgICAgICB3aXZlcyBvZiB0aGUgY2l0aXplbnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ5NDIiIGtleT0idGduLDcwMDQ5NDIiPlBhcm1hPC9wbGFjZU5hbWU+LiBGb3IKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBpbmZhbXkgdGhlIEFudG9uaWkgaGF2ZSB3aWxsaW5nbHkgdW5kZXJnb25lIGluIHRoZWlyIG93biBwZXJzb25zIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIGluZmFteSwgdGhleSB0cml1bXBoIGluIHRoZSBmYWN0IG9mIGhhdmluZyBpbmZsaWN0ZWQgb24gb3RoZXJzIGJ5CiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UuIEJ1dCBpdCBpcyBhIG1pc2VyYWJsZSB2aW9sZW5jZSB3aGljaCB0aGV5IG9mZmVyZWQgdG8gdGhlbTsgbW9zdCB1bmhvbHkKICAgICAgICAgICAgICAgICAgICBsdXN0LCBzdWNoIGFzIHRoZSB3aG9sZSBsaWZlIG9mIHRoZSBBbnRvbmlpIGlzIHBvbGx1dGVkIHdpdGguIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBZb3Ugdm90ZSBhIHN1cHBsaWNhdGlvbjsgeW91IGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGNhbGwgQW50b25pdXMgYW4gZW5lbXkuIFZlcnkgcGxlYXNpbmcgaW5kZWVkIHRvIHRoZSBpbW1vcnRhbCBnb2RzIHdpbGwgb3VyCiAgICAgICAgICAgICAgICAgICAgdGhhbmtzZ2l2aW5ncyBiZSwgdmVyeSBwbGVhc2luZyB0b28gdGhlIHZpY3RpbXMsIGFmdGVyIGEgbXVsdGl0dWRlIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGhhcyBiZWVuIHNsYWluISDigJxGb3IgdGhlIHZpY3RvcnnigJ0gc2F5cyB0aGUgcHJvcG9zZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3VwcGxpY2F0aW9uLCDigJxvdmVyIHdpY2tlZCBhbmQgYXVkYWNpb3VzIG1lbi7igJ0gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyB3aGF0IHRoaXMgbW9zdCBpbGx1c3RyaW91cyBtYW4gY2FsbHMgdGhlbTsgZXhwcmVzc2lvbnMgb2YgYmxhbWUgc3VpdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gbGF3c3VpdHMgY2FycmllZCBvbiBpbiB0aGUgY2l0eSwgbm90IGRlbnVuY2lhdGlvbnMgb2Ygc2VhcmluZyBpbmZhbXkgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIGJ5IGludGVybmVjaW5lIHdhci4gSSBzdXBwb3NlIHRoZXkgYXJlIGZvcmdpbmcgd2lsbHMsIG9yIHRyZXNwYXNzaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbmVpZ2hib3JzLCBvciBjaGVhdGluZyBzb21lIHlvdW5nIG1lbjsgZm9yIGl0IGlzIG1lbiBpbXBsaWNhdGVkIGluIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHNpbWlsYXIgcHJhY3RpY2VzIHRoYXQgd2UgYXJlIGluIHRoZSBoYWJpdCBvZiB0ZXJtaW5nIHdpY2tlZCBhbmQgYXVkYWNpb3VzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBPbmUgbWFuLCB0aGUgZm91bGVzdCBvZiBhbGwgYmFuZGl0dGksIGlzCiAgICAgICAgICAgICAgICAgICAgd2FnaW5nIGFuIGlycmVjb25jaWxhYmxlIHdhciBhZ2FpbnN0IGZvdXIgY29uc3Vscy4gSGUgaXMgYXQgdGhlIHNhbWUgdGltZQogICAgICAgICAgICAgICAgICAgIGNhcnJ5aW5nIG9uIHdhciBhZ2FpbnN0IHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIEhlIGlzIChhbHRob3VnaCBoZSBpcyBoaW1zZWxmIGhhc3RlbmluZyB0byBkZXN0cnVjdGlvbjsKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSBkaXNhc3RlcnMgd2hpY2ggaGUgaGFzIG1ldCB3aXRoKSB0aHJlYXRlbmluZyBhbGwgb2YgdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIGRlc3RydWN0aW9uLCBhbmQgZGV2YXN0YXRpb24sIGFuZCB0b3JtZW50cywgYW5kIHRvcnR1cmVzLiBIZSBkZWNsYXJlcyB0aGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICBpbmh1bWFuIGFuZCBzYXZhZ2UgYWN0IG9mIERvbGFiZWxsYSdzLCB3aGljaCBubyBuYXRpb24gb2YgYmFyYmFyaWFucyB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgb3duZWQsIHdhcyBkb25lIGJ5IGhpcyBhZHZpY2U7IGFuZCB3aGF0IGhlIGhpbXNlbGYgd291bGQgZG8gaW4gdGhpcyBjaXR5LCBpZgogICAgICAgICAgICAgICAgICAgIHRoaXMgdmVyeSBKdXBpdGVyLCB3aG8gbm93IGxvb2tzIGRvd24gdXBvbiB1cyBhc3NlbWJsZWQgaW4gaGlzIHRlbXBsZSwgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlcGVsbGVkIGhpbSBmcm9tIHRoaXMgdGVtcGxlIGFuZCBmcm9tIHRoZXNlIHdhbGxzLCBoZSBzaG93ZWQsIGluIHRoZSBtaXNlcmllcwogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIGluaGFiaXRhbnRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0OTQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ5NDIiPlBhcm1hPC9wbGFjZU5hbWU+LCB3aG9tLAogICAgICAgICAgICAgICAgICAgIHZpcnR1b3VzIGFuZCBob25vcmFibGUgbWVuIGFzIHRoZXkgd2VyZSwgYW5kIG1vc3QgaW50aW1hdGVseSBjb25uZWN0ZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgb2YgdGhpcyBvcmRlciwgYW5kIHdpdGggdGhlIGRpZ25pdHkgb2YgdGhlIFJvbWFuIHBlb3BsZSwgdGhhdCB2aWxsYWluCiAgICAgICAgICAgICAgICAgICAgYW5kIG1vbnN0ZXIsIEx1Y2l1cyBBbnRvbml1cywgdGhhdCBvYmplY3Qgb2YgdGhlIGV4dHJhb3JkaW5hcnkgZGV0ZXN0YXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBhbGwgbWVuLCBhbmQgKGlmIHRoZSBnb2RzIGhhdGUgdGhvc2Ugd2hvbSB0aGV5IG91Z2h0KSBvZiBhbGwgdGhlIGdvZHMgYWxzbywKICAgICAgICAgICAgICAgICAgICBtdXJkZXJlZCB3aXRoIGV2ZXJ5IGNpcmN1bXN0YW5jZSBvZiBjcnVlbHR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIE15IG1pbmQgc2h1ZGRlcnMgYXQgdGhlIHJlY29sbGVjdGlvbiwgTyBjb25zY3JpcHQgZmF0aGVycywgYW5kIHNocmlua3MgZnJvbQogICAgICAgICAgICAgICAgICAgIHJlbGF0aW5nIHRoZSBjcnVlbHRpZXMgd2hpY2ggTHVjaXVzIEFudG9uaXVzIHBlcnBldHJhdGVkIG9uIHRoZSBjaGlsZHJlbiBhbmQKICAgICAgICAgICAgICAgICAgICB3aXZlcyBvZiB0aGUgY2l0aXplbnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ5NDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNDk0MiI+UGFybWE8L3BsYWNlTmFtZT4uIEZvcgogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIGluZmFteSB0aGUgQW50b25paSBoYXZlIHdpbGxpbmdseSB1bmRlcmdvbmUgaW4gdGhlaXIgb3duIHBlcnNvbnMgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gaW5mYW15LCB0aGV5IHRyaXVtcGggaW4gdGhlIGZhY3Qgb2YgaGF2aW5nIGluZmxpY3RlZCBvbiBvdGhlcnMgYnkKICAgICAgICAgICAgICAgICAgICB2aW9sZW5jZS4gQnV0IGl0IGlzIGEgbWlzZXJhYmxlIHZpb2xlbmNlIHdoaWNoIHRoZXkgb2ZmZXJlZCB0byB0aGVtOyBtb3N0IHVuaG9seQogICAgICAgICAgICAgICAgICAgIGx1c3QsIHN1Y2ggYXMgdGhlIHdob2xlIGxpZmUgb2YgdGhlIEFudG9uaWkgaXMgcG9sbHV0ZWQgd2l0aC4gPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXMgdGhlcmUgdGhlbiBhbnkgb25lIHdobyBpcyBhZnJhaWQgdG8gY2FsbCB0aG9zZSBtZW4gZW5lbWllcywgd2hvc2Ugd2lja2VkbmVzcwogICAgICAgICAgICAgICAgICAgIGhlIGFkbWl0cyB0byBoYXZlIHN1cnBhc3NlZCBldmVuIHRoZSBpbmh1bWFuaXR5IG9mIHRoZSBDYXJ0aGFnaW5pYW5zPyBGb3IgaW4KICAgICAgICAgICAgICAgICAgICB3aGF0IGNpdHksIHdoZW4gdGFrZW4gYnkgc3Rvcm0sIGRpZCBIYW5uaWJhbCBldmVuIGJlaGF2ZSB3aXRoIHN1Y2ggZmVyb2NpdHkgYXMKICAgICAgICAgICAgICAgICAgICBBbnRvbml1cyBkaWQgaW4gUGFybWEsIHdoaWNoIGhlIGZpbGNoZWQgYnkgc3VycHJpc2U/IFVubGVzcywgcGVyaGFwcywgQW50b25pdXMKICAgICAgICAgICAgICAgICAgICBpcyBub3QgdG8gYmUgY29uc2lkZXJlZCB0aGUgZW5lbXkgb2YgdGhpcyBjb2xvbnksIGFuZCBvZiB0aGUgb3RoZXJzIHRvd2FyZCB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIGlzIGFuaW1hdGVkIHdpdGggdGhlIHNhbWUgZmVlbGluZ3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgYmV5b25kIGFsbCBxdWVzdGlvbiB0aGUgZW5lbXkgb2YgdGhlIGNvbG9uaWVzIGFuZCBtdW5pY2lwYWwgdG93bnMsIHRoZW4KICAgICAgICAgICAgICAgICAgICB3aGF0IGRvIHlvdSBjb25zaWRlciBoaW0gd2l0aCByZXNwZWN0IHRvIHRoaXMgY2l0eSB3aGljaCBoZSBpcyBzbyBlYWdlciBmb3IgdG8KICAgICAgICAgICAgICAgICAgICBzYXRpYXRlIHRoZSBpbmRpZ2VuY2Ugb2YgaGlzIGJhbmQgb2Ygcm9iYmVycz8gd2hpY2ggdGhhdCBza2lsbGZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBleHBlcmllbmNlZCBzdXJ2ZXlvciBvZiBoaXMsIFNheGEsIGhhcyBhbHJlYWR5IG1hcmtlZCBvdXQgd2l0aCBoaXMgcnVsZS4KICAgICAgICAgICAgICAgICAgICBSZWNvbGxlY3QsIEkgZW50cmVhdCB5b3UsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLAogICAgICAgICAgICAgICAgICAgIHdoYXQgd2UgaGF2ZSBiZWVuIGZlYXJpbmcgZm9yIHRoZSBsYXN0IHR3byBkYXlzLCBpbiBjb25zZXF1ZW5jZSBvZiBpbmZhbW91cwogICAgICAgICAgICAgICAgICAgIHJ1bW9ycyBjYXJlZnVsbHkgZGlzc2VtaW5hdGVkIGJ5IGVuZW1pZXMgd2l0aGluIHRoZSB3YWxscy4gV2hvIGhhcyBiZWVuIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICBsb29rIHVwb24gaGlzIGNoaWxkcmVuIG9yIHVwb24gaGlzIHdpZmUgd2l0aG91dCB3ZWVwaW5nPyB3aG8gaGFzIGJlZW4gYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGJlYXIgdGhlIHNpZ2h0IG9mIGhpcyBob21lLCBvZiBoaXMgaG91c2UsIGFuZCBoaXMgaG91c2Vob2xkIGdvZHM/IEFscmVhZHkgYWxsIG9mCiAgICAgICAgICAgICAgICAgICAgdXMgd2VyZSBleHBlY3RpbmcgYSBtb3N0IGlnbm9taW5pb3VzIGRlYXRoLCBvciBtZWRpdGF0aW5nIGEgbWlzZXJhYmxlIGZsaWdodC4KICAgICAgICAgICAgICAgICAgICBBbmQgc2hhbGwgd2UgaGVzaXRhdGUgdG8gY2FsbCB0aGUgbWVuIGF0IHdob3NlIGhhbmRzIHdlIGZlYXJlZCBhbGwgdGhlc2UgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcz8gSWYgYW55IG9uZSBzaG91bGQgcHJvcG9zZSBhIG1vcmUgc2V2ZXJlIGRlc2lnbmF0aW9uIEkgd2lsbCB3aWxsaW5nbHkKICAgICAgICAgICAgICAgICAgICBhZ3JlZSB0byBpdDsgSSBhbSBoYXJkbHkgY29udGVudCB3aXRoIHRoaXMgb3JkaW5hcnkgb25lLCBhbmQgd2lsbCBjZXJ0YWlubHkgbm90CiAgICAgICAgICAgICAgICAgICAgZW1wbG95IGEgbW9yZSBtb2RlcmF0ZSBvbmUuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICA8L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgYmV5b25kIGFsbCBxdWVzdGlvbiB0aGUgZW5lbXkgb2YgdGhlIGNvbG9uaWVzIGFuZCBtdW5pY2lwYWwgdG93bnMsIHRoZW4KICAgICAgICAgICAgICAgICAgICB3aGF0IGRvIHlvdSBjb25zaWRlciBoaW0gd2l0aCByZXNwZWN0IHRvIHRoaXMgY2l0eSB3aGljaCBoZSBpcyBzbyBlYWdlciBmb3IgdG8KICAgICAgICAgICAgICAgICAgICBzYXRpYXRlIHRoZSBpbmRpZ2VuY2Ugb2YgaGlzIGJhbmQgb2Ygcm9iYmVycz8gd2hpY2ggdGhhdCBza2lsbGZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBleHBlcmllbmNlZCBzdXJ2ZXlvciBvZiBoaXMsIFNheGEsIGhhcyBhbHJlYWR5IG1hcmtlZCBvdXQgd2l0aCBoaXMgcnVsZS4KICAgICAgICAgICAgICAgICAgICBSZWNvbGxlY3QsIEkgZW50cmVhdCB5b3UsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBPIGNvbnNjcmlwdCBmYXRoZXJzLAogICAgICAgICAgICAgICAgICAgIHdoYXQgd2UgaGF2ZSBiZWVuIGZlYXJpbmcgZm9yIHRoZSBsYXN0IHR3byBkYXlzLCBpbiBjb25zZXF1ZW5jZSBvZiBpbmZhbW91cwogICAgICAgICAgICAgICAgICAgIHJ1bW9ycyBjYXJlZnVsbHkgZGlzc2VtaW5hdGVkIGJ5IGVuZW1pZXMgd2l0aGluIHRoZSB3YWxscy4gV2hvIGhhcyBiZWVuIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICBsb29rIHVwb24gaGlzIGNoaWxkcmVuIG9yIHVwb24gaGlzIHdpZmUgd2l0aG91dCB3ZWVwaW5nPyB3aG8gaGFzIGJlZW4gYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGJlYXIgdGhlIHNpZ2h0IG9mIGhpcyBob21lLCBvZiBoaXMgaG91c2UsIGFuZCBoaXMgaG91c2Vob2xkIGdvZHM/IEFscmVhZHkgYWxsIG9mCiAgICAgICAgICAgICAgICAgICAgdXMgd2VyZSBleHBlY3RpbmcgYSBtb3N0IGlnbm9taW5pb3VzIGRlYXRoLCBvciBtZWRpdGF0aW5nIGEgbWlzZXJhYmxlIGZsaWdodC4KICAgICAgICAgICAgICAgICAgICBBbmQgc2hhbGwgd2UgaGVzaXRhdGUgdG8gY2FsbCB0aGUgbWVuIGF0IHdob3NlIGhhbmRzIHdlIGZlYXJlZCBhbGwgdGhlc2UgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcz8gSWYgYW55IG9uZSBzaG91bGQgcHJvcG9zZSBhIG1vcmUgc2V2ZXJlIGRlc2lnbmF0aW9uIEkgd2lsbCB3aWxsaW5nbHkKICAgICAgICAgICAgICAgICAgICBhZ3JlZSB0byBpdDsgSSBhbSBoYXJkbHkgY29udGVudCB3aXRoIHRoaXMgb3JkaW5hcnkgb25lLCBhbmQgd2lsbCBjZXJ0YWlubHkgbm90CiAgICAgICAgICAgICAgICAgICAgZW1wbG95IGEgbW9yZSBtb2RlcmF0ZSBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['14.4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCBhcyB3ZSBhcmUgYm91bmQgdG8gdm90ZSwgYW5kIGFzIFNlcnZpbGl1cyBoYXMgYWxyZWFkeSBwcm9wb3NlZCBhIG1vc3QKICAgICAgICAgICAgICAgICAgICBqdXN0IHN1cHBsaWNhdGlvbiBmb3IgdGhvc2UgbGV0dGVycyB3aGljaCBoYXZlIGJlZW4gcmVhZCB0byB5b3U7IEkgd2lsbCBwcm9wb3NlCiAgICAgICAgICAgICAgICAgICAgYWx0b2dldGhlciB0byBpbmNyZWFzZSB0aGUgbnVtYmVyIG9mIHRoZSBkYXlzIHdoaWNoIGl0IGlzIHRvIGxhc3QsIGVzcGVjaWFsbHkgYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcyB0byBiZSBkZWNyZWVkIGluIGhvbm9yIG9mIHRocmVlIGdlbmVyYWxzIGNvbmpvaW50bHkuIEJ1dCBmaXJzdCBvZiBhbGwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgaW5zaXN0IG9uIHN0eWxpbmcgdGhvc2UgbWVuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4gYnkgd2hvc2UKICAgICAgICAgICAgICAgICAgICB2YWxvciwgYW5kIHdpc2RvbSwgYW5kIGdvb2QgZm9ydHVuZSB3ZSBoYXZlIGJlZW4gcmVsZWFzZWQgZnJvbSB0aGUgbW9zdCBpbW1pbmVudAogICAgICAgICAgICAgICAgICAgIGRhbmdlciBvZiBzbGF2ZXJ5IGFuZCBkZWF0aC4gSW5kZWVkLCB3aG8gaXMgdGhlcmUgd2l0aGluIHRoZSBsYXN0IHR3ZW50eSB5ZWFycwogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgaGFkIGEgc3VwcGxpY2F0aW9uIGRlY3JlZWQgdG8gaGltIHdpdGhvdXQgYmVpbmcgaGltc2VsZiBzdHlsZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgdGhvdWdoIGhlIG1heSBoYXZlIHBlcmZvcm1lZCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGluc2lnbmlmaWNhbnQgZXhwbG9pdHMsIG9yIGV2ZW4gYWxtb3N0IG5vbmUgYXQgYWxsLiBXaGVyZWZvcmUsIHRoZSBzZW5hdG9yIHdobwogICAgICAgICAgICAgICAgICAgIHNwb2tlIGJlZm9yZSBtZSBvdWdodCBlaXRoZXIgbm90IHRvIGhhdmUgbW92ZWQgZm9yIGEgc3VwcGxpY2F0aW9uIGF0IGFsbCwgb3IgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBoYXZlIHBhaWQgdGhlIHVzdWFsIGFuZCBlc3RhYmxpc2hlZCBjb21wbGltZW50IHRvIHRob3NlIG1lbiB0byB3aG9tCiAgICAgICAgICAgICAgICAgICAgZXZlbiBuZXcgYW5kIGV4dHJhb3JkaW5hcnkgaG9ub3JzIGFyZSBqdXN0bHkgZHVlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4gYnkgd2hvc2UKICAgICAgICAgICAgICAgICAgICB2YWxvciwgYW5kIHdpc2RvbSwgYW5kIGdvb2QgZm9ydHVuZSB3ZSBoYXZlIGJlZW4gcmVsZWFzZWQgZnJvbSB0aGUgbW9zdCBpbW1pbmVudAogICAgICAgICAgICAgICAgICAgIGRhbmdlciBvZiBzbGF2ZXJ5IGFuZCBkZWF0aC4gSW5kZWVkLCB3aG8gaXMgdGhlcmUgd2l0aGluIHRoZSBsYXN0IHR3ZW50eSB5ZWFycwogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgaGFkIGEgc3VwcGxpY2F0aW9uIGRlY3JlZWQgdG8gaGltIHdpdGhvdXQgYmVpbmcgaGltc2VsZiBzdHlsZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgdGhvdWdoIGhlIG1heSBoYXZlIHBlcmZvcm1lZCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGluc2lnbmlmaWNhbnQgZXhwbG9pdHMsIG9yIGV2ZW4gYWxtb3N0IG5vbmUgYXQgYWxsLiBXaGVyZWZvcmUsIHRoZSBzZW5hdG9yIHdobwogICAgICAgICAgICAgICAgICAgIHNwb2tlIGJlZm9yZSBtZSBvdWdodCBlaXRoZXIgbm90IHRvIGhhdmUgbW92ZWQgZm9yIGEgc3VwcGxpY2F0aW9uIGF0IGFsbCwgb3IgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBoYXZlIHBhaWQgdGhlIHVzdWFsIGFuZCBlc3RhYmxpc2hlZCBjb21wbGltZW50IHRvIHRob3NlIG1lbiB0byB3aG9tCiAgICAgICAgICAgICAgICAgICAgZXZlbiBuZXcgYW5kIGV4dHJhb3JkaW5hcnkgaG9ub3JzIGFyZSBqdXN0bHkgZHVlLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['14.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNoYWxsIHRoZSBzZW5hdGUsIGFjY29yZGluZyB0byB0aGlzIGN1c3RvbSB3aGljaCBoYXMgbm93IG9idGFpbmVkLCBzdHlsZSBhIG1hbgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+IGlmIGhlIGhhcyBzbGFpbiBhIHRob3VzYW5kIG9yIHR3byBvZgogICAgICAgICAgICAgICAgICAgIFNwYW5pYXJkcywgb3IgR2F1bHMsIG9yIFRocmFjaWFuczsgYW5kIG5vdyB0aGF0IHNvIG1hbnkgbGVnaW9ucyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICByb3V0ZWQsIG5vdyB0aGF0IHN1Y2ggYSBtdWx0aXR1ZGUgb2YgZW5lbWllcyBoYXMgYmVlbiBzbGFpbizigJR5ZXMsCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgSSBzYXksIGFsdGhvdWdoIG91ciBlbmVtaWVzIHdpdGhpbiB0aGUgY2l0eSBkbyBub3QgZmFuY3kgdGhpcwogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24s4oCUc2hhbGwgd2UgcGF5IHRvIG91ciBtb3N0IGlsbHVzdHJpb3VzIGdlbmVyYWxzIHRoZSBob25vciBvZgogICAgICAgICAgICAgICAgICAgIGEgc3VwcGxpY2F0aW9uLCBhbmQgcmVmdXNlIHRoZW0gdGhlIG5hbWUgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPj8gRm9yIHdpdGggd2hhdCBncmVhdCBob25vciwgYW5kIGpveSwgYW5kIGV4dWx0YXRpb24KICAgICAgICAgICAgICAgICAgICBvdWdodCB0aGUgZGVsaXZlcmVycyBvZiB0aGlzIGNpdHkgdGhlbXNlbHZlcyB0byBlbnRlciBpbnRvIHRoaXMgdGVtcGxlLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgeWVzdGVyZGF5LCBvbiBhY2NvdW50IG9mIHRoZSBleHBsb2l0cyB3aGljaCB0aGV5IGhhdmUgcGVyZm9ybWVkLCB0aGUgUm9tYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgY2FycmllZCBtZSBpbiBhbiBvdmF0aW9uLCBhbG1vc3QgaW4gYSB0cml1bXBoIGZyb20gbXkgaG91c2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgQ2FwaXRvbCwgYW5kIGJhY2sgYWdhaW4gZnJvbSB0aGUgQ2FwaXRvbCB0byBteSBvd24gaG91c2U/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhhdCBpcyBpbmRlZWQgaW4gbXkgb3BpbmlvbiBhIGp1c3QgYW5kIGdlbnVpbmUgdHJpdW1waCwKICAgICAgICAgICAgICAgICAgICB3aGVuIG1lbiB3aG8gaGF2ZSBkZXNlcnZlZCB3ZWxsIG9mIHRoZSByZXB1YmxpYyByZWNlaXZlIHB1YmxpYyB0ZXN0aW1vbnkgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBtZXJpdHMgZnJvbSB0aGUgdW5hbmltb3VzIGNvbnNlbnQgb2YgdGhlIHNlbmF0ZS4gRm9yIGlmLCBhdCBhIHRpbWUgb2YKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIHJlam9pY2luZyBvbiB0aGUgcGFydCBvZiB0aGUgUm9tYW4gcGVvcGxlLCB0aGV5IGFkZHJlc3NlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbmdyYXR1bGF0aW9ucyB0byBvbmUgaW5kaXZpZHVhbCwgdGhhdCBpcyBhIGdyZWF0IHByb29mIG9mIHRoZWlyIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICBoaW07IGlmIHRoZXkgZ2F2ZSBoaW0gdGhhbmtzLCB0aGF0IGlzIGEgZ3JlYXRlciBzdGlsbDsgaWYgdGhleSBkaWQgYm90aCwgdGhlbgogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgbW9yZSBob25vcmFibGUgdG8gaGltIGNhbiBiZSBwb3NzaWJseSBpbWFnaW5lZC4gPC9wPgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiBpZiBoZSBoYXMgc2xhaW4gYSB0aG91c2FuZCBvciB0d28gb2YKICAgICAgICAgICAgICAgICAgICBTcGFuaWFyZHMsIG9yIEdhdWxzLCBvciBUaHJhY2lhbnM7IGFuZCBub3cgdGhhdCBzbyBtYW55IGxlZ2lvbnMgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgcm91dGVkLCBub3cgdGhhdCBzdWNoIGEgbXVsdGl0dWRlIG9mIGVuZW1pZXMgaGFzIGJlZW4gc2xhaW4s4oCUeWVzLAogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMsIEkgc2F5LCBhbHRob3VnaCBvdXIgZW5lbWllcyB3aXRoaW4gdGhlIGNpdHkgZG8gbm90IGZhbmN5IHRoaXMKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLOKAlHNoYWxsIHdlIHBheSB0byBvdXIgbW9zdCBpbGx1c3RyaW91cyBnZW5lcmFscyB0aGUgaG9ub3Igb2YKICAgICAgICAgICAgICAgICAgICBhIHN1cHBsaWNhdGlvbiwgYW5kIHJlZnVzZSB0aGVtIHRoZSBuYW1lIG9mIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4/IEZvciB3aXRoIHdoYXQgZ3JlYXQgaG9ub3IsIGFuZCBqb3ksIGFuZCBleHVsdGF0aW9uCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdGhlIGRlbGl2ZXJlcnMgb2YgdGhpcyBjaXR5IHRoZW1zZWx2ZXMgdG8gZW50ZXIgaW50byB0aGlzIHRlbXBsZSwgd2hlbgogICAgICAgICAgICAgICAgICAgIHllc3RlcmRheSwgb24gYWNjb3VudCBvZiB0aGUgZXhwbG9pdHMgd2hpY2ggdGhleSBoYXZlIHBlcmZvcm1lZCwgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGNhcnJpZWQgbWUgaW4gYW4gb3ZhdGlvbiwgYWxtb3N0IGluIGEgdHJpdW1waCBmcm9tIG15IGhvdXNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIENhcGl0b2wsIGFuZCBiYWNrIGFnYWluIGZyb20gdGhlIENhcGl0b2wgdG8gbXkgb3duIGhvdXNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['14.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gVGhhdCBpcyBpbmRlZWQgaW4gbXkgb3BpbmlvbiBhIGp1c3QgYW5kIGdlbnVpbmUgdHJpdW1waCwKICAgICAgICAgICAgICAgICAgICB3aGVuIG1lbiB3aG8gaGF2ZSBkZXNlcnZlZCB3ZWxsIG9mIHRoZSByZXB1YmxpYyByZWNlaXZlIHB1YmxpYyB0ZXN0aW1vbnkgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBtZXJpdHMgZnJvbSB0aGUgdW5hbmltb3VzIGNvbnNlbnQgb2YgdGhlIHNlbmF0ZS4gRm9yIGlmLCBhdCBhIHRpbWUgb2YKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIHJlam9pY2luZyBvbiB0aGUgcGFydCBvZiB0aGUgUm9tYW4gcGVvcGxlLCB0aGV5IGFkZHJlc3NlZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbmdyYXR1bGF0aW9ucyB0byBvbmUgaW5kaXZpZHVhbCwgdGhhdCBpcyBhIGdyZWF0IHByb29mIG9mIHRoZWlyIG9waW5pb24gb2YKICAgICAgICAgICAgICAgICAgICBoaW07IGlmIHRoZXkgZ2F2ZSBoaW0gdGhhbmtzLCB0aGF0IGlzIGEgZ3JlYXRlciBzdGlsbDsgaWYgdGhleSBkaWQgYm90aCwgdGhlbgogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgbW9yZSBob25vcmFibGUgdG8gaGltIGNhbiBiZSBwb3NzaWJseSBpbWFnaW5lZC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmUgeW91IHNheWluZyBhbGwgdGhpcyBvZiB5b3Vyc2VsZj8gc29tZSBvbmUgd2lsbCBhc2suIEl0IGlzIGluZGVlZCBhZ2FpbnN0IG15CiAgICAgICAgICAgICAgICAgICAgd2lsbCB0aGF0IEkgZG8gc287IGJ1dCBteSBpbmRpZ25hdGlvbiBhdCBpbmp1c3RpY2UgbWFrZXMgbWUgYm9hc3RmdWwsIGNvbnRyYXJ5CiAgICAgICAgICAgICAgICAgICAgdG8gbXkgdXN1YWwgaGFiaXQuIElzIGl0IG5vdCBzdWZmaWNpZW50IHRoYXQgdGhhbmtzIHNob3VsZCBub3QgYmUgZ2l2ZW4gdG8gbWVuCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgd2VsbCBlYXJuZWQgdGhlbSwgYnkgbWVuIHdobyBhcmUgaWdub3JhbnQgb2YgdGhlIHZlcnkgbmF0dXJlIG9mIHZpcnR1ZT8KICAgICAgICAgICAgICAgICAgICBBbmQgc2hhbGwgYWNjdXNhdGlvbnMgYW5kIG9kaXVtIGJlIGF0dGVtcHRlZCB0byBiZSBleGNpdGVkIGFnYWluc3QgdGhvc2UgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIGRldm90ZSBhbGwgdGhlaXIgdGhvdWdodHMgdG8gaW5zdXJpbmcgdGhlIHNhZmV0eSBvZiB0aGUgcmVwdWJsaWM/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHlvdSB3ZWxsIGtub3cgdGhhdCB0aGVyZSBoYXMgYmVlbiBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHJlcG9ydCBmb3IgdGhlIGxhc3QgZmV3IGRheXMsIHRoYXQgdGhlIGRheSBiZWZvcmUgdGhlIHdpbmUgZmVhc3QsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVyZSB3ZXJlIHR3byB3aW5lIGZlYXN0cywgPGZvcmVpZ24gbGFuZz0ibGEiPlZpbmFsaWE8L2ZvcmVpZ24+LCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+OgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnZpbmFsaWEgdXJiYW5hPC9mb3JlaWduPiwgY2VsZWJyYXRlZCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdHdlbnR5LXRoaXJkIG9mIEFwcmlsOyBhbmQgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj52aW5hbGlhIHJ1c3RpY2E8L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgbmluZXRlZW50aCBvZiBPY3RvYmVyLiBUaGlzIHdhcyB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnVyYmFuYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmluYWxpYTwvZm9yZWlnbj47IG9uIHdoaWNoIG9jY2FzaW9uIHRoZSB3aW5lLWNhc2tzIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxlZCBJbiB0aGUgYXV0dW1uIHdlcmUgdGFzdGVkIGZvciB0aGUgZmlyc3QgdGltZS48L25vdGU+IHRoYXQgaXMgdG8gc2F5LAogICAgICAgICAgICAgICAgICAgIG9uIHRoaXMgdmVyeSBkYXksIEkgd2FzIGludGVuZGluZyB0byBjb21lIGZvcnRoIHdpdGggdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+IGFzIGRpY3RhdG9yLiBPbmUgd291bGQgdGhpbmsgdGhhdCB0aGlzIHN0b3J5IHdhcyBpbnZlbnRlZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgc29tZSBnbGFkaWF0b3IsIG9yIHJvYmJlciwgb3IgQ2F0aWxpbmUsIGFuZCBub3QgYWdhaW5zdCBhIG1hbiB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkIGFueSBzdWNoIHN0ZXAgZnJvbSBldmVyIGJlaW5nIHRha2VuIGluIHRoZSByZXB1YmxpYy4gV2FzIEksIHdobwogICAgICAgICAgICAgICAgICAgIGRlZmVhdGVkIGFuZCBvdmVydGhyZXcgYW5kIGNydXNoZWQgQ2F0aWxpbmUsIHdoZW4gaGUgd2FzIGF0dGVtcHRpbmcgc3VjaAogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MsIGEgbGlrZWx5IG1hbiBteXNlbGYgYWxsIG9uIGEgc3VkZGVuIHRvIHR1cm4gb3V0IENhdGlsaW5lPyBVbmRlciB3aGF0CiAgICAgICAgICAgICAgICAgICAgYXVzcGljZXMgY291bGQgSSwgYW4gYXVndXIsIHRha2UgdGhvc2UgPGZvcmVpZ24gbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4/IEhvdwogICAgICAgICAgICAgICAgICAgIGxvbmcgc2hvdWxkIEkgaGF2ZSBiZWVuIGxpa2VseSB0byBrZWVwIHRoZW0/IHRvIHdob20gd2FzIEkgdG8gZGVsaXZlciB0aGVtIGFzIG15CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc29yPyBUaGUgaWRlYSBvZiBhbnkgb25lIGhhdmluZyBiZWVuIHNvIHdpY2tlZCBhcyB0byBpbnZlbnQgc3VjaCBhIHRhbGUhCiAgICAgICAgICAgICAgICAgICAgb3Igc28gbWFkIGFzIHRvIGJlbGlldmUgaXQhIEluIHdoYXQgY291bGQgc3VjaCBhIHN1c3BpY2lvbiwgb3IgcmF0aGVyIHN1Y2gKICAgICAgICAgICAgICAgICAgICBnb3NzaXAsIGhhdmUgb3JpZ2luYXRlZD8gPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHlvdSB3ZWxsIGtub3cgdGhhdCB0aGVyZSBoYXMgYmVlbiBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHJlcG9ydCBmb3IgdGhlIGxhc3QgZmV3IGRheXMsIHRoYXQgdGhlIGRheSBiZWZvcmUgdGhlIHdpbmUgZmVhc3QsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZXJlIHdlcmUgdHdvIHdpbmUgZmVhc3RzLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5WaW5hbGlhPC9mb3JlaWduPiwgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+OgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmluYWxpYSB1cmJhbmE8L2ZvcmVpZ24+LCBjZWxlYnJhdGVkIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0d2VudHktdGhpcmQgb2YgQXByaWw7IGFuZCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmluYWxpYSBydXN0aWNhPC9mb3JlaWduPiwKICAgICAgICAgICAgICAgICAgICAgICAgb24gdGhlIG5pbmV0ZWVudGggb2YgT2N0b2Jlci4gVGhpcyB3YXMgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnVyYmFuYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmluYWxpYTwvZm9yZWlnbj47IG9uIHdoaWNoIG9jY2FzaW9uIHRoZSB3aW5lLWNhc2tzIHdoaWNoIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxlZCBJbiB0aGUgYXV0dW1uIHdlcmUgdGFzdGVkIGZvciB0aGUgZmlyc3QgdGltZS48L25vdGU+IHRoYXQgaXMgdG8gc2F5LAogICAgICAgICAgICAgICAgICAgIG9uIHRoaXMgdmVyeSBkYXksIEkgd2FzIGludGVuZGluZyB0byBjb21lIGZvcnRoIHdpdGggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZpbmFsaWE8L2ZvcmVpZ24+LCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT46CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52aW5hbGlhIHVyYmFuYTwvZm9yZWlnbj4sIGNlbGVicmF0ZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHR3ZW50eS10aGlyZCBvZiBBcHJpbDsgYW5kIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52aW5hbGlhIHJ1c3RpY2E8L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgbmluZXRlZW50aCBvZiBPY3RvYmVyLiBUaGlzIHdhcyB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dXJiYW5hCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aW5hbGlhPC9mb3JlaWduPjsgb24gd2hpY2ggb2NjYXNpb24gdGhlIHdpbmUtY2Fza3Mgd2hpY2ggaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGVkIEluIHRoZSBhdXR1bW4gd2VyZSB0YXN0ZWQgZm9yIHRoZSBmaXJzdCB0aW1lLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4gYXMgZGljdGF0b3IuIE9uZSB3b3VsZCB0aGluayB0aGF0IHRoaXMgc3Rvcnkgd2FzIGludmVudGVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBzb21lIGdsYWRpYXRvciwgb3Igcm9iYmVyLCBvciBDYXRpbGluZSwgYW5kIG5vdCBhZ2FpbnN0IGEgbWFuIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgYW55IHN1Y2ggc3RlcCBmcm9tIGV2ZXIgYmVpbmcgdGFrZW4gaW4gdGhlIHJlcHVibGljLiBXYXMgSSwgd2hvCiAgICAgICAgICAgICAgICAgICAgZGVmZWF0ZWQgYW5kIG92ZXJ0aHJldyBhbmQgY3J1c2hlZCBDYXRpbGluZSwgd2hlbiBoZSB3YXMgYXR0ZW1wdGluZyBzdWNoCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcywgYSBsaWtlbHkgbWFuIG15c2VsZiBhbGwgb24gYSBzdWRkZW4gdG8gdHVybiBvdXQgQ2F0aWxpbmU/IFVuZGVyIHdoYXQKICAgICAgICAgICAgICAgICAgICBhdXNwaWNlcyBjb3VsZCBJLCBhbiBhdWd1ciwgdGFrZSB0aG9zZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+PyBIb3cKICAgICAgICAgICAgICAgICAgICBsb25nIHNob3VsZCBJIGhhdmUgYmVlbiBsaWtlbHkgdG8ga2VlcCB0aGVtPyB0byB3aG9tIHdhcyBJIHRvIGRlbGl2ZXIgdGhlbSBhcyBteQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3Nvcj8gVGhlIGlkZWEgb2YgYW55IG9uZSBoYXZpbmcgYmVlbiBzbyB3aWNrZWQgYXMgdG8gaW52ZW50IHN1Y2ggYSB0YWxlIQogICAgICAgICAgICAgICAgICAgIG9yIHNvIG1hZCBhcyB0byBiZWxpZXZlIGl0ISBJbiB3aGF0IGNvdWxkIHN1Y2ggYSBzdXNwaWNpb24sIG9yIHJhdGhlciBzdWNoCiAgICAgICAgICAgICAgICAgICAgZ29zc2lwLCBoYXZlIG9yaWdpbmF0ZWQ/IDwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['14.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4sIGFzIHlvdSBrbm93LCBkdXJpbmcgdGhlIGxhc3QgdGhyZWUgb3IgZm91ciBkYXlzIGEgcmVwb3J0IG9mIGJhZCBuZXdzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNdXRpbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE11dGluYSI+TXV0aW5hPC9wbGFjZU5hbWU+IGhhcyBiZWVuIGNyZWVwaW5nIGFicm9hZCwKICAgICAgICAgICAgICAgICAgICB0aGUgZGlzbG95YWwgcGFydCBvZiB0aGUgY2l0aXplbnMsIGluZmxhdGVkIHdpdGggZXh1bHRhdGlvbiBhbmQgaW5zb2xlbmNlLCBiZWdhbgogICAgICAgICAgICAgICAgICAgIHRvIGNvbGxlY3QgaW4gb25lIHBsYWNlLCBhdCB0aGF0IHNlbmF0ZS1ob3VzZSB3aGljaCBoYXMgYmVlbiBtb3JlIGZhdGFsIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcGFydHkgdGhhbiB0byB0aGUgcmVwdWJsaWMuIFRoZXJlLCB3aGlsZSB0aGV5IHdlcmUgZm9ybWluZyBhIHBsYW4gdG8gbWFzc2FjcmUKICAgICAgICAgICAgICAgICAgICB1cywgYW5kIHdlcmUgZGlzdHJpYnV0aW5nIHRoZSBkaWZmZXJlbnQgZHV0aWVzIGFtb25nIG9uZSBhbm90aGVyLCBhbmQgc2V0dGxpbmcKICAgICAgICAgICAgICAgICAgICB3aG8gd2FzIHRvIHNlaXplIG9uIHRoZSBDYXBpdG9sLCB3aG8gb24gdGhlIHJvc3RyYSwgd2hvIG9uIHRoZSBnYXRlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5LCB0aGV5IHRob3VnaHQgdGhhdCBhbGwgdGhlIGNpdGl6ZW5zIHdvdWxkIGZsb2NrIHRvIG1lLiBBbmQgaW4gb3JkZXIgdG8KICAgICAgICAgICAgICAgICAgICBicmluZyBtZSBpbnRvIHVucG9wdWxhcml0eSwgYW5kIGV2ZW4gaW50byBkYW5nZXIgb2YgbXkgbGlmZSwgdGhleSBzcHJlYWQgYWJyb2FkCiAgICAgICAgICAgICAgICAgICAgdGhpcyByZXBvcnQgYWJvdXQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4uIFRoZXkgdGhlbXNlbHZlcyBoYWQKICAgICAgICAgICAgICAgICAgICBzb21lIGlkZWEgb2YgYnJpbmdpbmcgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4gdG8gbXkgaG91c2U7IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4sIG9uIHByZXRlbnNlIG9mIHRoYXQgaGF2aW5nIGJlZW4gZG9uZSBieSBteSB3aXNoLCB0aGV5IGhhZCBwcmVwYXJlZCBhIGJhbmQKICAgICAgICAgICAgICAgICAgICBvZiBoaXJlZCBydWZmaWFucyB0byBtYWtlIGFuIGF0dGFjayBvbiBtZSBhcyBvbiBhIHR5cmFudCwgYW5kIGEgbWFzc2FjcmUgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgb2YgeW91IHdhcyBpbnRlbmRlZCB0byBmb2xsb3cuIFRoZSBmYWN0IGlzIGFscmVhZHkgbm90b3Jpb3VzLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIGJ1dCB0aGUgb3JpZ2luIG9mIGFsbCB0aGlzIHdpY2tlZG5lc3Mgd2lsbCBiZSByZXZlYWxlZCBpbiBpdHMgZml0dGluZwogICAgICAgICAgICAgICAgICAgIHRpbWUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXV0aW5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNdXRpbmEiPk11dGluYTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBjcmVlcGluZyBhYnJvYWQsCiAgICAgICAgICAgICAgICAgICAgdGhlIGRpc2xveWFsIHBhcnQgb2YgdGhlIGNpdGl6ZW5zLCBpbmZsYXRlZCB3aXRoIGV4dWx0YXRpb24gYW5kIGluc29sZW5jZSwgYmVnYW4KICAgICAgICAgICAgICAgICAgICB0byBjb2xsZWN0IGluIG9uZSBwbGFjZSwgYXQgdGhhdCBzZW5hdGUtaG91c2Ugd2hpY2ggaGFzIGJlZW4gbW9yZSBmYXRhbCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBhcnR5IHRoYW4gdG8gdGhlIHJlcHVibGljLiBUaGVyZSwgd2hpbGUgdGhleSB3ZXJlIGZvcm1pbmcgYSBwbGFuIHRvIG1hc3NhY3JlCiAgICAgICAgICAgICAgICAgICAgdXMsIGFuZCB3ZXJlIGRpc3RyaWJ1dGluZyB0aGUgZGlmZmVyZW50IGR1dGllcyBhbW9uZyBvbmUgYW5vdGhlciwgYW5kIHNldHRsaW5nCiAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyB0byBzZWl6ZSBvbiB0aGUgQ2FwaXRvbCwgd2hvIG9uIHRoZSByb3N0cmEsIHdobyBvbiB0aGUgZ2F0ZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgdGhleSB0aG91Z2h0IHRoYXQgYWxsIHRoZSBjaXRpemVucyB3b3VsZCBmbG9jayB0byBtZS4gQW5kIGluIG9yZGVyIHRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgbWUgaW50byB1bnBvcHVsYXJpdHksIGFuZCBldmVuIGludG8gZGFuZ2VyIG9mIG15IGxpZmUsIHRoZXkgc3ByZWFkIGFicm9hZAogICAgICAgICAgICAgICAgICAgIHRoaXMgcmVwb3J0IGFib3V0IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LiBUaGV5IHRoZW1zZWx2ZXMgaGFkCiAgICAgICAgICAgICAgICAgICAgc29tZSBpZGVhIG9mIGJyaW5naW5nIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+IHRvIG15IGhvdXNlOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuLCBvbiBwcmV0ZW5zZSBvZiB0aGF0IGhhdmluZyBiZWVuIGRvbmUgYnkgbXkgd2lzaCwgdGhleSBoYWQgcHJlcGFyZWQgYSBiYW5kCiAgICAgICAgICAgICAgICAgICAgb2YgaGlyZWQgcnVmZmlhbnMgdG8gbWFrZSBhbiBhdHRhY2sgb24gbWUgYXMgb24gYSB0eXJhbnQsIGFuZCBhIG1hc3NhY3JlIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIG9mIHlvdSB3YXMgaW50ZW5kZWQgdG8gZm9sbG93LiBUaGUgZmFjdCBpcyBhbHJlYWR5IG5vdG9yaW91cywgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCBidXQgdGhlIG9yaWdpbiBvZiBhbGwgdGhpcyB3aWNrZWRuZXNzIHdpbGwgYmUgcmV2ZWFsZWQgaW4gaXRzIGZpdHRpbmcKICAgICAgICAgICAgICAgICAgICB0aW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlIFB1YmxpdXMgQXB1bGVpdXMsIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCB3aG8gZXZlciBzaW5jZSBteSBjb25zdWxzaGlwCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gdGhlIHdpdG5lc3MgYW5kIHBhcnRha2VyIG9mLCBhbmQgbXkgYXNzaXN0YW50IGluIGFsbCBteSBkZXNpZ25zIGFuZCBhbGwKICAgICAgICAgICAgICAgICAgICBteSBkYW5nZXJzLCBjb3VsZCBub3QgZW5kdXJlIHRoZSBncmllZiBvZiB3aXRuZXNzaW5nIG15IGluZGlnbmF0aW9uLiBIZSBjb252ZW5lZAogICAgICAgICAgICAgICAgICAgIGEgbnVtZXJvdXMgYXNzZW1ibHksIGFzIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUgd2VyZSBhbmltYXRlZCB3aXRoIG9uZSBmZWVsaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1YmplY3QuIEFuZCB3aGVuIGluIHRoZSBoYXJhbmd1ZSB3aGljaCBoZSB0aGVuIG1hZGUsIGhlLCBhcyB3YXMgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIGZyb20gb3VyIGdyZWF0IGludGltYWN5IGFuZCBmcmllbmRzaGlwLCB3YXMgZ29pbmcgdG8gZXhjdWxwYXRlIG1lIGZyb20gYWxsCiAgICAgICAgICAgICAgICAgICAgc3VzcGljaW9uIGluIHRoZSBtYXR0ZXIgb2YgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlczwvZm9yZWlnbj4sIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IGNyaWVkIG91dCB3aXRoIG9uZSB2b2ljZSwgdGhhdCBJIGhhZCBuZXZlciBoYWQgYW55IGludGVudGlvbnMgd2l0aAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0byB0aGUgcmVwdWJsaWMgd2hpY2ggd2VyZSBub3QgZXhjZWxsZW50LiBBZnRlciB0aGlzIGFzc2VtYmx5IHdhcyBvdmVyLAogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0d28gb3IgdGhyZWUgaG91cnMsIHRoZXNlIG1vc3Qgd2VsY29tZSBtZXNzZW5nZXJzIGFuZCBsZXR0ZXJzIGFycml2ZWQsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgc2FtZSBkYXkgbm90IG9ubHkgZGVsaXZlcmVkIG1lIGZyb20gYSBtb3N0IHVuanVzdCBvZGl1bSwgYnV0IGluY3JlYXNlZAogICAgICAgICAgICAgICAgICAgIG15IGNyZWRpdCBieSB0aGF0IG1vc3QgZXh0cmFvcmRpbmFyeSBhY3Qgd2l0aCB3aGljaCB0aGUgUm9tYW4gcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgZGlzdGluZ3Vpc2hlZCBtZSA8L3A+CgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LCB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBjcmllZCBvdXQgd2l0aCBvbmUgdm9pY2UsIHRoYXQgSSBoYWQgbmV2ZXIgaGFkIGFueSBpbnRlbnRpb25zIHdpdGgKICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhlIHJlcHVibGljIHdoaWNoIHdlcmUgbm90IGV4Y2VsbGVudC4gQWZ0ZXIgdGhpcyBhc3NlbWJseSB3YXMgb3ZlciwKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gdHdvIG9yIHRocmVlIGhvdXJzLCB0aGVzZSBtb3N0IHdlbGNvbWUgbWVzc2VuZ2VycyBhbmQgbGV0dGVycyBhcnJpdmVkLCBzbwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHNhbWUgZGF5IG5vdCBvbmx5IGRlbGl2ZXJlZCBtZSBmcm9tIGEgbW9zdCB1bmp1c3Qgb2RpdW0sIGJ1dCBpbmNyZWFzZWQKICAgICAgICAgICAgICAgICAgICBteSBjcmVkaXQgYnkgdGhhdCBtb3N0IGV4dHJhb3JkaW5hcnkgYWN0IHdpdGggd2hpY2ggdGhlIFJvbWFuIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGRpc3Rpbmd1aXNoZWQgbWUgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9InNlY3Rpb24iIC8+IEkgaGF2ZSBtYWRlIHRoaXMgZGlncmVzc2lvbiwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCBub3Qgc28gbXVjaCBmb3IgdGhlIHNha2Ugb2Ygc3BlYWtpbmcgb2YgbXlzZWxmIChmb3IgSSBzaG91bGQgYmUgaW4gYQogICAgICAgICAgICAgICAgICAgIHNvcnJ5IHBsaWdodCBpZiBJIHdlcmUgbm90IHN1ZmZpY2llbnRseSBhY3F1aXR0ZWQgaW4geW91ciBleWVzIHdpdGhvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzaXR5IG9mIG1ha2luZyBhIGZvcm1hbCBkZWZlbnNlKSwgYXMgd2l0aCB0aGUgdmlldyBvZiB3YXJuaW5nIHNvbWUgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdG9vIGdyb3ZlbGluZyBhbmQgbmFycm93IG1pbmRzLCB0byBhZG9wdCB0aGUgbGluZSBvZiBjb25kdWN0IHdoaWNoIEkgbXlzZWxmIGhhdmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgcHVyc3VlZCwgYW5kIHRvIHRoaW5rIHRoZSB2aXJ0dWUgb2YgZXhjZWxsZW50IGNpdGl6ZW5zIHdvcnRoeSBvZgogICAgICAgICAgICAgICAgICAgIGltaXRhdGlvbiwgbm90IG9mIGVudnkuIFRoZXJlIGlzIGEgZ3JlYXQgZmllbGQgaW4gdGhlIHJlcHVibGljLCBhcyBDcmFzc3VzIHVzZWQKICAgICAgICAgICAgICAgICAgICB2ZXJ5IHdpc2VseSB0byBzYXk7IHRoZSByb2FkIHRvIGdsb3J5IGlzIG9wZW4gdG8gbWFueS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.6.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gSSBoYXZlIG1hZGUgdGhpcyBkaWdyZXNzaW9uLCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIG5vdCBzbyBtdWNoIGZvciB0aGUgc2FrZSBvZiBzcGVha2luZyBvZiBteXNlbGYgKGZvciBJIHNob3VsZCBiZSBpbiBhCiAgICAgICAgICAgICAgICAgICAgc29ycnkgcGxpZ2h0IGlmIEkgd2VyZSBub3Qgc3VmZmljaWVudGx5IGFjcXVpdHRlZCBpbiB5b3VyIGV5ZXMgd2l0aG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBuZWNlc3NpdHkgb2YgbWFraW5nIGEgZm9ybWFsIGRlZmVuc2UpLCBhcyB3aXRoIHRoZSB2aWV3IG9mIHdhcm5pbmcgc29tZSBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0b28gZ3JvdmVsaW5nIGFuZCBuYXJyb3cgbWluZHMsIHRvIGFkb3B0IHRoZSBsaW5lIG9mIGNvbmR1Y3Qgd2hpY2ggSSBteXNlbGYgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBwdXJzdWVkLCBhbmQgdG8gdGhpbmsgdGhlIHZpcnR1ZSBvZiBleGNlbGxlbnQgY2l0aXplbnMgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgaW1pdGF0aW9uLCBub3Qgb2YgZW52eS4gVGhlcmUgaXMgYSBncmVhdCBmaWVsZCBpbiB0aGUgcmVwdWJsaWMsIGFzIENyYXNzdXMgdXNlZAogICAgICAgICAgICAgICAgICAgIHZlcnkgd2lzZWx5IHRvIHNheTsgdGhlIHJvYWQgdG8gZ2xvcnkgaXMgb3BlbiB0byBtYW55LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V291bGQgdGhhdCB0aG9zZSBncmVhdCBtZW4gd2VyZSBzdGlsbCBhbGl2ZSwgd2hvLCBhZnRlciBteSBjb25zdWxzaGlwLCB3aGVuIEkKICAgICAgICAgICAgICAgICAgICBteXNlbGYgd2FzIHdpbGxpbmcgdG8geWllbGQgdG8gdGhlbSwgd2VyZSB0aGVtc2VsdmVzIGRlc2lyb3VzIHRvIHNlZSBtZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwb3N0IG9mIGxlYWRlci4gQnV0IGF0IHRoZSBwcmVzZW50IG1vbWVudCwgd2hlbiB0aGVyZSBpcyBzdWNoIGEgZGVhcnRoIG9mIHdpc2UKICAgICAgICAgICAgICAgICAgICBhbmQgZmVhcmxlc3MgbWVuIG9mIGNvbnN1bGFyIHJhbmssIGhvdyBncmVhdCBkbyB5b3Ugbm90IHN1cHBvc2UgbXVzdCBiZSBteSBncmllZgogICAgICAgICAgICAgICAgICAgIGFuZCBpbmRpZ25hdGlvbiwgd2hlbiBJIHNlZSBzb21lIG1lbiBhYnNvbHV0ZWx5IGRpc2FmZmVjdGVkIHRvIHRoZSByZXB1YmxpYywKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgd2hvbGx5IGluZGlmZmVyZW50IHRvIGV2ZXJ5IHRoaW5nLCBvdGhlcnMgaW5jYXBhYmxlIG9mIHBlcnNldmVyaW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICBhbnkgZmlybW5lc3MgaW4gdGhlIGNhdXNlIHdoaWNoIHRoZXkgaGF2ZSBlc3BvdXNlZDsgYW5kIHJlZ3VsYXRpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvcGluaW9ucyBub3QgYWx3YXlzIGJ5IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIHJlcHVibGljLCBidXQgc29tZXRpbWVzIGJ5IGhvcGUsIGFuZAogICAgICAgICAgICAgICAgICAgIHNvbWV0aW1lcyBieSBmZWFyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBpZiBhbnkgb25lIGlzIGFueGlvdXMKICAgICAgICAgICAgICAgICAgICBhbmQgaW5jbGluZWQgdG8gc3RydWdnbGUgZm9yIHRoZSBsZWFkZXJzaGlw4oCUdGhvdWdoIHN0cnVnZ2xlIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gYmUgbm9uZeKAlGhlIGFjdHMgdmVyeSBmb29saXNobHksIGlmIGhlIHByb3Bvc2VzIHRvIGNvbWJhdAogICAgICAgICAgICAgICAgICAgIHZpcnR1ZSB3aXRoIHZpY2VzLiBGb3IgYXMgc3BlZWQgaXMgb25seSBvdXRzdHJpcHBlZCBieSBzcGVlZCwgc28gYW1vbmcgYnJhdmUgbWVuCiAgICAgICAgICAgICAgICAgICAgdmlydHVlIGlzIG9ubHkgc3VycGFzc2VkIGJ5IHZpcnR1ZS4gV2lsbCB5b3UsIGlmIEkgYW0gZnVsbCBvZiBleGNlbGxlbnQKICAgICAgICAgICAgICAgICAgICBzZW50aW1lbnRzIHdpdGggcmVzcGVjdCB0byB0aGUgcmVwdWJsaWMsIGFkb3B0IHRoZSB3b3JzdCBwb3NzaWJsZSBzZW50aW1lbnRzCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgZm9yIHRoZSBwdXJwb3NlIG9mIGV4Y2VsbGluZyBtZT8gT3IgaWYgeW91IHNlZSBhIHJhY2UgdGFraW5nIHBsYWNlIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBhY3F1aXNpdGlvbiBvZiBob25vcnMsIHdpbGwgeW91IHN1bW1vbiBhbGwgdGhlIHdpY2tlZCBtZW4geW91IGNhbiBmaW5kIHRvCiAgICAgICAgICAgICAgICAgICAgeW91ciBiYW5uZXI/IEkgc2hvdWxkIGJlIHNvcnJ5IGZvciB5b3UgdG8gZG8gc287IGZpcnN0IG9mIGFsbCwgZm9yIHRoZSBzYWtlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHVibGljLCBhbmQgc2Vjb25kbHksIGZvciB0aGF0IG9mIHlvdXIgb3duIGRpZ25pdHkuIEJ1dCBpZiB0aGUgbGVhZGVyc2hpcAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzdGF0ZSB3ZXJlIGF0IHN0YWtlLCB3aGljaCBJIGhhdmUgbmV2ZXIgY292ZXRlZCwgd2hhdCBjb3VsZCBiZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgZGVzaXJhYmxlIGZvciBtZSB0aGFuIHN1Y2ggY29uZHVjdCBvbiB5b3VyIHBhcnQ/IDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpdCBpcyBpbXBvc3NpYmxlIHRoYXQgSSBzaG91bGQgYmUgZGVmZWF0ZWQgYnkgd2lja2VkCiAgICAgICAgICAgICAgICAgICAgc2VudGltZW50cyBhbmQgbWVhc3VyZXMs4oCUYnkgZ29vZCBvbmVzIHBlcmhhcHMgSSBtaWdodCBiZSwgYW5kIEkKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nbHkgd291bGQgYmUuIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIGFueSBvbmUgaXMgYW54aW91cwogICAgICAgICAgICAgICAgICAgIGFuZCBpbmNsaW5lZCB0byBzdHJ1Z2dsZSBmb3IgdGhlIGxlYWRlcnNoaXDigJR0aG91Z2ggc3RydWdnbGUgdGhlcmUKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBiZSBub25l4oCUaGUgYWN0cyB2ZXJ5IGZvb2xpc2hseSwgaWYgaGUgcHJvcG9zZXMgdG8gY29tYmF0CiAgICAgICAgICAgICAgICAgICAgdmlydHVlIHdpdGggdmljZXMuIEZvciBhcyBzcGVlZCBpcyBvbmx5IG91dHN0cmlwcGVkIGJ5IHNwZWVkLCBzbyBhbW9uZyBicmF2ZSBtZW4KICAgICAgICAgICAgICAgICAgICB2aXJ0dWUgaXMgb25seSBzdXJwYXNzZWQgYnkgdmlydHVlLiBXaWxsIHlvdSwgaWYgSSBhbSBmdWxsIG9mIGV4Y2VsbGVudAogICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMgd2l0aCByZXNwZWN0IHRvIHRoZSByZXB1YmxpYywgYWRvcHQgdGhlIHdvcnN0IHBvc3NpYmxlIHNlbnRpbWVudHMKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBmb3IgdGhlIHB1cnBvc2Ugb2YgZXhjZWxsaW5nIG1lPyBPciBpZiB5b3Ugc2VlIGEgcmFjZSB0YWtpbmcgcGxhY2UgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjcXVpc2l0aW9uIG9mIGhvbm9ycywgd2lsbCB5b3Ugc3VtbW9uIGFsbCB0aGUgd2lja2VkIG1lbiB5b3UgY2FuIGZpbmQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGJhbm5lcj8gSSBzaG91bGQgYmUgc29ycnkgZm9yIHlvdSB0byBkbyBzbzsgZmlyc3Qgb2YgYWxsLCBmb3IgdGhlIHNha2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVwdWJsaWMsIGFuZCBzZWNvbmRseSwgZm9yIHRoYXQgb2YgeW91ciBvd24gZGlnbml0eS4gQnV0IGlmIHRoZSBsZWFkZXJzaGlwCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlIHdlcmUgYXQgc3Rha2UsIHdoaWNoIEkgaGF2ZSBuZXZlciBjb3ZldGVkLCB3aGF0IGNvdWxkIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBkZXNpcmFibGUgZm9yIG1lIHRoYW4gc3VjaCBjb25kdWN0IG9uIHlvdXIgcGFydD8gPC90cmFuc2xhdGlvbj4="
translation['14.7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGl0IGlzIGltcG9zc2libGUgdGhhdCBJIHNob3VsZCBiZSBkZWZlYXRlZCBieSB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBzZW50aW1lbnRzIGFuZCBtZWFzdXJlcyzigJRieSBnb29kIG9uZXMgcGVyaGFwcyBJIG1pZ2h0IGJlLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIHdpbGxpbmdseSB3b3VsZCBiZS4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Tb21lIHBlb3BsZSBhcmUgdmV4ZWQgdGhhdCB0aGUgUm9tYW4gcGVvcGxlIHNob3VsZCBzZWUsIGFuZCB0YWtlIG5vdGljZSBvZiwgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9ybSB0aGVpciBvcGluaW9uIG9uIHRoZXNlIG1hdHRlcnMuIFdhcyBpdCBwb3NzaWJsZSBmb3IgbWVuIG5vdCB0byBmb3JtIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBvZiBlYWNoIGluZGl2aWR1YWwgYXMgaGUgZGVzZXJ2ZWQ/IEZvciBhcyB0aGUgUm9tYW4gcGVvcGxlIGZvcm0gYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY29ycmVjdCBqdWRnbWVudCBvZiB0aGUgZW50aXJlIHNlbmF0ZSwgdGhpbmtpbmcgdGhhdCBhdCBubyBwZXJpb2QgaW4gdGhlIGhpc3RvcnkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVwdWJsaWMgd2FzIHRoaXMgb3JkZXIgZXZlciBtb3JlIGZpcm0gb3IgbW9yZSBjb3VyYWdlb3VzOyBzbyBhbHNvIHRoZXkKICAgICAgICAgICAgICAgICAgICBhbGwgaW5xdWlyZSBkaWxpZ2VudGx5IGNvbmNlcm5pbmcgZXZlcnkgaW5kaXZpZHVhbCBhbW9uZyB1czsgYW5kIGVzcGVjaWFsbHkgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgY2FzZSBvZiB0aG9zZSBhbW9uZyB1cyB3aG8gZGVsaXZlciBvdXIgc2VudGltZW50cyBhdCBsZW5ndGggaW4gdGhpcyBwbGFjZSwKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBhbnhpb3VzIHRvIGtub3cgd2hhdCB0aG9zZSBzZW50aW1lbnRzIGFyZTsgYW5kIGluIHRoYXQgd2F5IHRoZXkganVkZ2UKICAgICAgICAgICAgICAgICAgICBvZiBlYWNoIG9uZSBvZiB1cywgYXMgdGhleSB0aGluayB0aGF0IGhlIGRlc2VydmVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXkgcmVjb2xsZWN0IHRoYXQgb24gdGhlIG5pbmV0ZWVudGggb2YgRGVjZW1iZXIgSSB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFpbiBjYXVzZSBvZiByZWNvdmVyaW5nIG91ciBmcmVlZG9tOyB0aGF0IGZyb20gdGhlIGZpcnN0IG9mIEphbnVhcnkgdG8gdGhpcwogICAgICAgICAgICAgICAgICAgIGhvdXIgSSBoYXZlIG5ldmVyIGNlYXNlZCB3YXRjaGluZyBvdmVyIHRoZSByZXB1YmxpYzsgdGhhdCBkYXkgYW5kIG5pZ2h0IG15IGhvdXNlCiAgICAgICAgICAgICAgICAgICAgYW5kIG15IGVhcnMgaGF2ZSBiZWVuIG9wZW4gdG8gdGhlIGluc3RydWN0aW9uIGFuZCBhZG1vbml0aW9uIG9mIGV2ZXJ5b25lOyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgaGFzIGJlZW4gYnkgbXkgbGV0dGVycywgYW5kIG15IG1lc3NlbmdlcnMsIGFuZCBteSBleGhvcnRhdGlvbnMsIHRoYXQgYWxsIG1lbgogICAgICAgICAgICAgICAgICAgIGluIGV2ZXJ5IHBhcnQgb2YgdGhlIGVtcGlyZSBoYXZlIGJlZW4gcm91c2VkIHRvIHRoZSBwcm90ZWN0aW9uIG9mIG91ciBjb3VudHJ5OwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgb3dpbmcgdG8gdGhlIG9wZW4gZGVjbGFyYXRpb24gb2YgbXkgb3BpbmlvbiBldmVyIHNpbmNlIHRoZSBmaXJzdCBvZgogICAgICAgICAgICAgICAgICAgIEphbnVhcnksIHRoYXQgbm8gYW1iYXNzYWRvcnMgaGF2ZSBiZWVuIGV2ZXIgc2VudCB0byBBbnRvbml1czsgdGhhdCBJIGhhdmUgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIGhpbSBhIHB1YmxpYyBlbmVteSwgYW5kIHRoaXMgYSB3YXI7IHNvIHRoYXQgSSwgd2hvIG9uIGV2ZXJ5IG9jY2FzaW9uIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHRoZSBhZHZpc2VyIG9mIGdlbnVpbmUgcGVhY2UsIGhhdmUgYmVlbiBhIGRldGVybWluZWQgZW5lbXkgdG8gdGhpcyBwcmV0ZW5zZQogICAgICAgICAgICAgICAgICAgIG9mIGZhdGFsIHBlYWNlLiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.7.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSByZWNvbGxlY3QgdGhhdCBvbiB0aGUgbmluZXRlZW50aCBvZiBEZWNlbWJlciBJIHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBtYWluIGNhdXNlIG9mIHJlY292ZXJpbmcgb3VyIGZyZWVkb207IHRoYXQgZnJvbSB0aGUgZmlyc3Qgb2YgSmFudWFyeSB0byB0aGlzCiAgICAgICAgICAgICAgICAgICAgaG91ciBJIGhhdmUgbmV2ZXIgY2Vhc2VkIHdhdGNoaW5nIG92ZXIgdGhlIHJlcHVibGljOyB0aGF0IGRheSBhbmQgbmlnaHQgbXkgaG91c2UKICAgICAgICAgICAgICAgICAgICBhbmQgbXkgZWFycyBoYXZlIGJlZW4gb3BlbiB0byB0aGUgaW5zdHJ1Y3Rpb24gYW5kIGFkbW9uaXRpb24gb2YgZXZlcnlvbmU7IHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCBoYXMgYmVlbiBieSBteSBsZXR0ZXJzLCBhbmQgbXkgbWVzc2VuZ2VycywgYW5kIG15IGV4aG9ydGF0aW9ucywgdGhhdCBhbGwgbWVuCiAgICAgICAgICAgICAgICAgICAgaW4gZXZlcnkgcGFydCBvZiB0aGUgZW1waXJlIGhhdmUgYmVlbiByb3VzZWQgdG8gdGhlIHByb3RlY3Rpb24gb2Ygb3VyIGNvdW50cnk7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBpcyBvd2luZyB0byB0aGUgb3BlbiBkZWNsYXJhdGlvbiBvZiBteSBvcGluaW9uIGV2ZXIgc2luY2UgdGhlIGZpcnN0IG9mCiAgICAgICAgICAgICAgICAgICAgSmFudWFyeSwgdGhhdCBubyBhbWJhc3NhZG9ycyBoYXZlIGJlZW4gZXZlciBzZW50IHRvIEFudG9uaXVzOyB0aGF0IEkgaGF2ZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBjYWxsZWQgaGltIGEgcHVibGljIGVuZW15LCBhbmQgdGhpcyBhIHdhcjsgc28gdGhhdCBJLCB3aG8gb24gZXZlcnkgb2NjYXNpb24gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gdGhlIGFkdmlzZXIgb2YgZ2VudWluZSBwZWFjZSwgaGF2ZSBiZWVuIGEgZGV0ZXJtaW5lZCBlbmVteSB0byB0aGlzIHByZXRlbnNlCiAgICAgICAgICAgICAgICAgICAgb2YgZmF0YWwgcGVhY2UuIDwvdHJhbnNsYXRpb24+"
translation['14.7.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2ZSBub3QgSSBhbHNvIGF0IGFsbCB0aW1lcyBwcm9ub3VuY2VkIFZlbnRpZGl1cyBhbiBlbmVteSwgd2hlbiBvdGhlcnMgd2lzaGVkIHRvCiAgICAgICAgICAgICAgICAgICAgY2FsbCBoaW0gYSB0cmlidW5lIG9mIHRoZSBwZW9wbGU/IElmIHRoZSBjb25zdWxzIGhhZCBjaG9zZW4gdG8gZGl2aWRlIHRoZSBzZW5hdGUKICAgICAgICAgICAgICAgICAgICBvbiBteSBvcGluaW9uLCB0aGVpciBhcm1zIHdvdWxkIGxvbmcgc2luY2UgaGF2ZSBiZWVuIHdyZXN0ZWQgZnJvbSB0aGUgaGFuZHMgb2YKICAgICAgICAgICAgICAgICAgICBhbGwgdGhvc2Ugcm9iYmVycyBieSB0aGUgcG9zaXRpdmUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgY291bGQgbm90IGJlIGRvbmUgdGhlbiwgTyBjb25zY3JpcHQgZmF0aGVycywgYXQgcHJlc2VudCBub3Qgb25seSBjYW4gYmUsCiAgICAgICAgICAgICAgICAgICAgYnV0IGV2ZW4gbXVzdCBiZSBkb25lLiBJIG1lYW4sIHRob3NlIG1lbiB3aG8gYXJlIGluIHJlYWxpdHkgZW5lbWllcyBtdXN0IGJlCiAgICAgICAgICAgICAgICAgICAgYnJhbmRlZCBpbiBwbGFpbiBsYW5ndWFnZSwgbXVzdCBiZSBkZWNsYXJlZCBlbmVtaWVzIGJ5IG91ciBmb3JtYWwgcmVzb2x1dGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3JtZXJseSwgd2hlbiBJIHVzZWQgdGhlIHdvcmRzIFdhciBvcgogICAgICAgICAgICAgICAgICAgIEVuZW15LCBtZW4gbW9yZSB0aGFuIG9uY2Ugb2JqZWN0ZWQgdG8gcmVjb3JkIG15IHByb3Bvc2l0aW9uIGFtb25nIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIHByb3Bvc2l0aW9ucy4gQnV0IHRoYXQgY2FuIG5vdCBiZSBkb25lIG9uIHRoZSBwcmVzZW50IG9jY2FzaW9uLiBGb3IgaW4KICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSBvZiB0aGUgbGV0dGVycyBvZiBDYWl1cyBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cywgdGhlIGNvbnN1bHMsIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIENhaXVzIENhZXNhciwgcHJvcHJhZXRvciwgd2UgaGF2ZSBhbGwgdm90ZWQgdGhhdCBob25vcnMgYmUgcGFpZCB0byB0aGUgaW1tb3J0YWwKICAgICAgICAgICAgICAgICAgICBnb2RzLiBUaGUgdmVyeSBtYW4gd2hvIGxhdGVseSBwcm9wb3NlZCBhbmQgY2FycmllZCBhIHZvdGUgZm9yIGEgc3VwcGxpY2F0aW9uLAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgaW50ZW5kaW5nIGl0IHByb25vdW5jZWQgdGhvc2UgbWVuIGVuZW1pZXM7IGZvciBhIHN1cHBsaWNhdGlvbiBoYXMgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBiZWVuIGRlY3JlZWQgZm9yIHN1Y2Nlc3MgaW4gY2l2aWwgd2FyLiBEZWNyZWVkLCBkbyBJIHNheT8gSXQgaGFzIG5ldmVyIGV2ZW4gYmVlbgogICAgICAgICAgICAgICAgICAgIGFza2VkIGZvciBpbiB0aGUgbGV0dGVycyBvZiB0aGUgY29ucXVlcm9yLiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgIFN1bGxhIGFzIGNvbnN1bCBjYXJyaWVkIG9uIGEgY2l2aWwgd2FyOyBoZSBsZWQgaGlzIGxlZ2lvbnMgaW50byB0aGUgY2l0eSBhbmQKICAgICAgICAgICAgICAgICAgICBleHBlbGxlZCB3aG9tc29ldmVyIGhlIGNob3NlOyBoZSBzbGV3IHRob3NlIHdob20gaGUgaGFkIGluIGhpcyBwb3dlcjogdGhlcmUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm8gbWVudGlvbiBtYWRlIG9mIGFueSBzdXBwbGljYXRpb24uIFRoZSB2aW9sZW50IHdhciB3aXRoIE9jdGF2aXVzIGZvbGxvd2VkLgogICAgICAgICAgICAgICAgICAgIENpbm5hIHRoZSBjb25xdWVyb3IgaGFkIG5vIHN1cHBsaWNhdGlvbiB2b3RlZCB0byBoaW0uIFN1bGxhIGFzIDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+IHJldmVuZ2VkIHRoZSB2aWN0b3J5IG9mIENpbm5hLCBzdGlsbCBubwogICAgICAgICAgICAgICAgICAgIHN1cHBsaWNhdGlvbiB3YXMgZGVjcmVlZCBieSB0aGUgc2VuYXRlLiBJIGFzayB5b3UgeW91cnNlbGYsIE8gUHVibGl1cyBTZXJ2aWxpdXMsCiAgICAgICAgICAgICAgICAgICAgZGlkIHlvdXIgY29sbGVhZ3VlIHNlbmQgeW91IGFueSBsZXR0ZXJzIGNvbmNlcm5pbmcgdGhhdCBtb3N0IGxhbWVudGFibGUgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgb2YgUGhhcnNhbGlhPyBEaWQgaGUgd2lzaCB5b3UgdG8gbWFrZSBhbnkgbW90aW9uIGFib3V0IGEgc3VwcGxpY2F0aW9uPyBDZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBub3QuIEJ1dCBoZSBkaWQgYWZ0ZXJ3YXJkIHdoZW4gaGUgdG9vayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+OyB3aGVuIGhlIGRlZmVhdGVkIFBoYXJuYWNlczsgYnV0IGZvciB0aGUgYmF0dGxlIG9mCiAgICAgICAgICAgICAgICAgICAgUGhhcnNhbGlhIGhlIGRpZCBub3QgZXZlbiBjZWxlYnJhdGUgYSB0cml1bXBoLiBGb3IgdGhhdCBiYXR0bGUgaGFkIGRlc3Ryb3llZAogICAgICAgICAgICAgICAgICAgIHRob3NlIGNpdGl6ZW5zIHdob3NlLCBJIHdpbGwgbm90IHNheSBsaXZlcywgYnV0IGV2ZW4gd2hvc2UgdmljdG9yeSBtaWdodCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBxdWl0ZSBjb21wYXRpYmxlIHdpdGggdGhlIHNhZmV0eSBhbmQgcHJvc3Blcml0eSBvZiB0aGUgc3RhdGUuIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB0aGUgc2FtZSB0aGluZyBoYWQgaGFwcGVuZWQgaW4gdGhlIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgY2l2aWwgd2Fycy4gRm9yIHRob3VnaCBhIHN1cHBsaWNhdGlvbiB3YXMgZGVjcmVlZCBpbiBteSBob25vciB3aGVuIEkgd2FzIGNvbnN1bCwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggbm8gYXJtcyBoYWQgYmVlbiBoYWQgcmVjb3Vyc2UgdG8gYXQgYWxsLCBzdGlsbCB0aGF0IHdhcyB2b3RlZCBieSBhIG5ldwogICAgICAgICAgICAgICAgICAgIGFuZCB3aG9sbHkgdW5wcmVjZWRlbnRlZCBraW5kIG9mIGRlY3JlZSwgbm90IGZvciB0aGUgc2xhdWdodGVyIG9mIGVuZW1pZXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgcHJlc2VydmF0aW9uIG9mIHRoZSBjaXRpemVucy4gV2hlcmVmb3JlLCBhIHN1cHBsaWNhdGlvbiBvbiBhY2NvdW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGFmZmFpcnMgb2YgdGhlIHJlcHVibGljIGhhdmluZyBiZWVuIHN1Y2Nlc3NmdWxseSBjb25kdWN0ZWQgbXVzdCwgTyBjb25zY3JpcHQKICAgICAgICAgICAgICAgICAgICBmYXRoZXJzLCBiZSByZWZ1c2VkIGJ5IHlvdSBldmVuIHRob3VnaCB5b3VyIGdlbmVyYWxzIGRlbWFuZCBpdDsgYSBzdGlnbWEgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXMgbmV2ZXIgYmVlbiBhZmZpeGVkIG9uIGFueSBvbmUgZXhjZXB0IEdhYmluaXVzOyBvciBlbHNlLCBieSB0aGUgbWVyZSBmYWN0IG9mCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlaW5nIGEgc3VwcGxpY2F0aW9uLCBpdCBpcyBxdWl0ZSBpbmV2aXRhYmxlIHRoYXQgeW91IG11c3QgcHJvbm91bmNlIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbWVuLCBmb3Igd2hvc2UgZGVmZWF0IHlvdSBkbyBkZWNyZWUgaXQsIGVuZW1pZXMgb2YgdGhlIHN0YXRlLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9ybWVybHksIHdoZW4gSSB1c2VkIHRoZSB3b3JkcyBXYXIgb3IKICAgICAgICAgICAgICAgICAgICBFbmVteSwgbWVuIG1vcmUgdGhhbiBvbmNlIG9iamVjdGVkIHRvIHJlY29yZCBteSBwcm9wb3NpdGlvbiBhbW9uZyB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBwcm9wb3NpdGlvbnMuIEJ1dCB0aGF0IGNhbiBub3QgYmUgZG9uZSBvbiB0aGUgcHJlc2VudCBvY2Nhc2lvbi4gRm9yIGluCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2Ugb2YgdGhlIGxldHRlcnMgb2YgQ2FpdXMgUGFuc2EgYW5kIEF1bHVzIEhpcnRpdXMsIHRoZSBjb25zdWxzLCBhbmQgb2YKICAgICAgICAgICAgICAgICAgICBDYWl1cyBDYWVzYXIsIHByb3ByYWV0b3IsIHdlIGhhdmUgYWxsIHZvdGVkIHRoYXQgaG9ub3JzIGJlIHBhaWQgdG8gdGhlIGltbW9ydGFsCiAgICAgICAgICAgICAgICAgICAgZ29kcy4gVGhlIHZlcnkgbWFuIHdobyBsYXRlbHkgcHJvcG9zZWQgYW5kIGNhcnJpZWQgYSB2b3RlIGZvciBhIHN1cHBsaWNhdGlvbiwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGludGVuZGluZyBpdCBwcm9ub3VuY2VkIHRob3NlIG1lbiBlbmVtaWVzOyBmb3IgYSBzdXBwbGljYXRpb24gaGFzIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkZWNyZWVkIGZvciBzdWNjZXNzIGluIGNpdmlsIHdhci4gRGVjcmVlZCwgZG8gSSBzYXk/IEl0IGhhcyBuZXZlciBldmVuIGJlZW4KICAgICAgICAgICAgICAgICAgICBhc2tlZCBmb3IgaW4gdGhlIGxldHRlcnMgb2YgdGhlIGNvbnF1ZXJvci4gPC90cmFuc2xhdGlvbj4="
translation['14.8.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBTdWxsYSBhcyBjb25zdWwgY2FycmllZCBvbiBhIGNpdmlsIHdhcjsgaGUgbGVkIGhpcyBsZWdpb25zIGludG8gdGhlIGNpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgZXhwZWxsZWQgd2hvbXNvZXZlciBoZSBjaG9zZTsgaGUgc2xldyB0aG9zZSB3aG9tIGhlIGhhZCBpbiBoaXMgcG93ZXI6IHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vIG1lbnRpb24gbWFkZSBvZiBhbnkgc3VwcGxpY2F0aW9uLiBUaGUgdmlvbGVudCB3YXIgd2l0aCBPY3Rhdml1cyBmb2xsb3dlZC4KICAgICAgICAgICAgICAgICAgICBDaW5uYSB0aGUgY29ucXVlcm9yIGhhZCBubyBzdXBwbGljYXRpb24gdm90ZWQgdG8gaGltLiBTdWxsYSBhcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+IHJldmVuZ2VkIHRoZSB2aWN0b3J5IG9mIENpbm5hLCBzdGlsbCBubwogICAgICAgICAgICAgICAgICAgIHN1cHBsaWNhdGlvbiB3YXMgZGVjcmVlZCBieSB0aGUgc2VuYXRlLiBJIGFzayB5b3UgeW91cnNlbGYsIE8gUHVibGl1cyBTZXJ2aWxpdXMsCiAgICAgICAgICAgICAgICAgICAgZGlkIHlvdXIgY29sbGVhZ3VlIHNlbmQgeW91IGFueSBsZXR0ZXJzIGNvbmNlcm5pbmcgdGhhdCBtb3N0IGxhbWVudGFibGUgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgb2YgUGhhcnNhbGlhPyBEaWQgaGUgd2lzaCB5b3UgdG8gbWFrZSBhbnkgbW90aW9uIGFib3V0IGEgc3VwcGxpY2F0aW9uPyBDZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBub3QuIEJ1dCBoZSBkaWQgYWZ0ZXJ3YXJkIHdoZW4gaGUgdG9vayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT47IHdoZW4gaGUgZGVmZWF0ZWQgUGhhcm5hY2VzOyBidXQgZm9yIHRoZSBiYXR0bGUgb2YKICAgICAgICAgICAgICAgICAgICBQaGFyc2FsaWEgaGUgZGlkIG5vdCBldmVuIGNlbGVicmF0ZSBhIHRyaXVtcGguIEZvciB0aGF0IGJhdHRsZSBoYWQgZGVzdHJveWVkCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgY2l0aXplbnMgd2hvc2UsIEkgd2lsbCBub3Qgc2F5IGxpdmVzLCBidXQgZXZlbiB3aG9zZSB2aWN0b3J5IG1pZ2h0IGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHF1aXRlIGNvbXBhdGlibGUgd2l0aCB0aGUgc2FmZXR5IGFuZCBwcm9zcGVyaXR5IG9mIHRoZSBzdGF0ZS4gPC90cmFuc2xhdGlvbj4="
translation['14.8.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoZSBzYW1lIHRoaW5nIGhhZCBoYXBwZW5lZCBpbiB0aGUgcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICBjaXZpbCB3YXJzLiBGb3IgdGhvdWdoIGEgc3VwcGxpY2F0aW9uIHdhcyBkZWNyZWVkIGluIG15IGhvbm9yIHdoZW4gSSB3YXMgY29uc3VsLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBubyBhcm1zIGhhZCBiZWVuIGhhZCByZWNvdXJzZSB0byBhdCBhbGwsIHN0aWxsIHRoYXQgd2FzIHZvdGVkIGJ5IGEgbmV3CiAgICAgICAgICAgICAgICAgICAgYW5kIHdob2xseSB1bnByZWNlZGVudGVkIGtpbmQgb2YgZGVjcmVlLCBub3QgZm9yIHRoZSBzbGF1Z2h0ZXIgb2YgZW5lbWllcywgYnV0CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIGNpdGl6ZW5zLiBXaGVyZWZvcmUsIGEgc3VwcGxpY2F0aW9uIG9uIGFjY291bnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYWZmYWlycyBvZiB0aGUgcmVwdWJsaWMgaGF2aW5nIGJlZW4gc3VjY2Vzc2Z1bGx5IGNvbmR1Y3RlZCBtdXN0LCBPIGNvbnNjcmlwdAogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMsIGJlIHJlZnVzZWQgYnkgeW91IGV2ZW4gdGhvdWdoIHlvdXIgZ2VuZXJhbHMgZGVtYW5kIGl0OyBhIHN0aWdtYSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhcyBuZXZlciBiZWVuIGFmZml4ZWQgb24gYW55IG9uZSBleGNlcHQgR2FiaW5pdXM7IG9yIGVsc2UsIGJ5IHRoZSBtZXJlIGZhY3Qgb2YKICAgICAgICAgICAgICAgICAgICBkZWNyZWVpbmcgYSBzdXBwbGljYXRpb24sIGl0IGlzIHF1aXRlIGluZXZpdGFibGUgdGhhdCB5b3UgbXVzdCBwcm9ub3VuY2UgdGhvc2UKICAgICAgICAgICAgICAgICAgICBtZW4sIGZvciB3aG9zZSBkZWZlYXQgeW91IGRvIGRlY3JlZSBpdCwgZW5lbWllcyBvZiB0aGUgc3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['14.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCB0aGVuIFNlcnZpbGl1cyBkaWQgaW4gZWZmZWN0LCBJIGRvIGluIGV4cHJlc3MgdGVybXMsIHdoZW4gSSBzdHlsZSB0aG9zZSBtZW4KICAgICAgICAgICAgICAgICAgICBpbXBlcmF0b3JzLiBCeSB1c2luZyB0aGlzIG5hbWUsIEkgcHJvbm91bmNlIHRob3NlIHdobyBoYXZlIGJlZW4gYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIGRlZmVhdGVkLCBhbmQgdGhvc2Ugd2hvIHN0aWxsIHJlbWFpbiwgZW5lbWllcyBpbiBjYWxsaW5nIHRoZWlyIGNvbnF1ZXJvcnMKICAgICAgICAgICAgICAgICAgICBpbXBlcmF0b3JzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aGF0IHRpdGxlIGNhbiBJIG1vcmUKICAgICAgICAgICAgICAgICAgICBzdWl0YWJseSBiZXN0b3cgb24gUGFuc2E/IFRob3VnaCBoZSBoYXMsIGluZGVlZCwgdGhlIHRpdGxlIG9mIHRoZSBoaWdoZXN0IGhvbm9yCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHJlcHVibGljLiBXaGF0LCB0b28sIHNoYWxsIEkgY2FsbCBIaXJ0aXVzPyBIZSwgaW5kZWVkLCBpcyBjb25zdWw7IGJ1dAogICAgICAgICAgICAgICAgICAgIHRoaXMgbGF0dGVyIHRpdGxlIGlzIGluZGljYXRpdmUgb2YgdGhlIGtpbmRuZXNzIG9mIHRoZSBSb21hbiBwZW9wbGU7IHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIG9mIHZhbG9yIGFuZCB2aWN0b3J5LiBXaGF0PyBTaGFsbCBJIGhlc2l0YXRlIHRvIGNhbGwgQ2Flc2FyIDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+LCBhIG1hbiBib3JuIGZvciB0aGUgcmVwdWJsaWMgYnkgdGhlIGV4cHJlc3Mga2luZG5lc3Mgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZ29kcz8gSGUgd2hvIHdhcyB0aGUgZmlyc3QgbWFuIHdobyB0dXJuZWQgYXNpZGUgdGhlIHNhdmFnZSBhbmQgZGlzZ3JhY2VmdWwKICAgICAgICAgICAgICAgICAgICBjcnVlbHR5IG9mIEFudG9uaXVzLCBub3Qgb25seSBmcm9tIG91ciB0aHJvYXRzIGJ1dCBmcm9tIG91ciBsaW1icyBhbmQgYm93ZWxzPwogICAgICAgICAgICAgICAgICAgIFdoYXQgbnVtZXJvdXMgYW5kIHdoYXQgaW1wb3J0YW50IHZpcnR1ZXMsIE8geWUgaW1tb3J0YWwgZ29kcywgd2VyZSBkaXNwbGF5ZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGF0IHNpbmdsZSBkYXkuIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBQYW5zYSB3YXMgdGhlIGxlYWRlciBvZgogICAgICAgICAgICAgICAgICAgIGFsbCBpbiBlbmdhZ2luZyBpbiBiYXR0bGUgYW5kIGluIGNvbWJhdGluZyB3aXRoIEFudG9uaXVzOyBPIGdlbmVyYWwgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIE1hcnRpYWwgbGVnaW9uLCBsZWdpb24gd29ydGh5IG9mIGl0cyBnZW5lcmFsISBJbmRlZWQsIGlmIGhlIGhhZCBiZWVuIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICByZXN0cmFpbiBpdHMgaXJyZXNpc3RpYmxlIGltcGV0dW9zaXR5LCB0aGUgd2hvbGUgd2FyIHdvdWxkIGhhdmUgYmVlbiB0ZXJtaW5hdGVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhhdCBvbmUgYmF0dGxlLiBCdXQgYXMgdGhlIGxlZ2lvbiwgZWFnZXIgZm9yIGxpYmVydHksIGhhZCBydXNoZWQgd2l0aCB0b28KICAgICAgICAgICAgICAgICAgICBtdWNoIHByZWNpcGl0YXRpb24gYWdhaW5zdCB0aGUgZW5lbXkncyBsaW5lIG9mIGJhdHRsZSwgYW5kIGFzIFBhbnNhIGhpbXNlbGYgd2FzCiAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcgaW4gdGhlIGZyb250IHJhbmtzLCBoZSByZWNlaXZlZCB0d28gZGFuZ2Vyb3VzIHdvdW5kcywgYW5kIHdhcyBib3JuZSBvdXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgYmF0dGxlLCB0byBwcmVzZXJ2ZSBoaXMgbGlmZSBmb3IgdGhlIHJlcHVibGljLiBCdXQgSSBwcm9ub3VuY2UgaGltIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgPGZvcmVpZ24gbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIGJ1dCBhIG1vc3QgaWxsdXN0cmlvdXMgPGZvcmVpZ24gbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj47IHdobywgYXMgaGUgaGFkIHBsZWRnZWQgaGltc2VsZiB0byBkaXNjaGFyZ2UKICAgICAgICAgICAgICAgICAgICBoaXMgZHV0eSB0byB0aGUgcmVwdWJsaWMgZWl0aGVyIGJ5IGRlYXRoIG9yIGJ5IHZpY3RvcnksIGhhcyBmdWxmaWxsZWQgb25lIGhhbGYKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgcHJvbWlzZTsgbWF5IHRoZSBpbW1vcnRhbCBnb2RzIHByZXZlbnQgdGhlIGZ1bGZpbGxtZW50IG9mIHRoZSBvdGhlciBoYWxmIQogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.9.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoYXQgdGl0bGUgY2FuIEkgbW9yZQogICAgICAgICAgICAgICAgICAgIHN1aXRhYmx5IGJlc3RvdyBvbiBQYW5zYT8gVGhvdWdoIGhlIGhhcywgaW5kZWVkLCB0aGUgdGl0bGUgb2YgdGhlIGhpZ2hlc3QgaG9ub3IKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcmVwdWJsaWMuIFdoYXQsIHRvbywgc2hhbGwgSSBjYWxsIEhpcnRpdXM/IEhlLCBpbmRlZWQsIGlzIGNvbnN1bDsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXR0ZXIgdGl0bGUgaXMgaW5kaWNhdGl2ZSBvZiB0aGUga2luZG5lc3Mgb2YgdGhlIFJvbWFuIHBlb3BsZTsgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgb2YgdmFsb3IgYW5kIHZpY3RvcnkuIFdoYXQ/IFNoYWxsIEkgaGVzaXRhdGUgdG8gY2FsbCBDYWVzYXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgYSBtYW4gYm9ybiBmb3IgdGhlIHJlcHVibGljIGJ5IHRoZSBleHByZXNzIGtpbmRuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGdvZHM/IEhlIHdobyB3YXMgdGhlIGZpcnN0IG1hbiB3aG8gdHVybmVkIGFzaWRlIHRoZSBzYXZhZ2UgYW5kIGRpc2dyYWNlZnVsCiAgICAgICAgICAgICAgICAgICAgY3J1ZWx0eSBvZiBBbnRvbml1cywgbm90IG9ubHkgZnJvbSBvdXIgdGhyb2F0cyBidXQgZnJvbSBvdXIgbGltYnMgYW5kIGJvd2Vscz8KICAgICAgICAgICAgICAgICAgICBXaGF0IG51bWVyb3VzIGFuZCB3aGF0IGltcG9ydGFudCB2aXJ0dWVzLCBPIHllIGltbW9ydGFsIGdvZHMsIHdlcmUgZGlzcGxheWVkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzaW5nbGUgZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.9.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIFBhbnNhIHdhcyB0aGUgbGVhZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIGluIGVuZ2FnaW5nIGluIGJhdHRsZSBhbmQgaW4gY29tYmF0aW5nIHdpdGggQW50b25pdXM7IE8gZ2VuZXJhbCB3b3J0aHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgTWFydGlhbCBsZWdpb24sIGxlZ2lvbiB3b3J0aHkgb2YgaXRzIGdlbmVyYWwhIEluZGVlZCwgaWYgaGUgaGFkIGJlZW4gYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHJlc3RyYWluIGl0cyBpcnJlc2lzdGlibGUgaW1wZXR1b3NpdHksIHRoZSB3aG9sZSB3YXIgd291bGQgaGF2ZSBiZWVuIHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGF0IG9uZSBiYXR0bGUuIEJ1dCBhcyB0aGUgbGVnaW9uLCBlYWdlciBmb3IgbGliZXJ0eSwgaGFkIHJ1c2hlZCB3aXRoIHRvbwogICAgICAgICAgICAgICAgICAgIG11Y2ggcHJlY2lwaXRhdGlvbiBhZ2FpbnN0IHRoZSBlbmVteSdzIGxpbmUgb2YgYmF0dGxlLCBhbmQgYXMgUGFuc2EgaGltc2VsZiB3YXMKICAgICAgICAgICAgICAgICAgICBmaWdodGluZyBpbiB0aGUgZnJvbnQgcmFua3MsIGhlIHJlY2VpdmVkIHR3byBkYW5nZXJvdXMgd291bmRzLCBhbmQgd2FzIGJvcm5lIG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBiYXR0bGUsIHRvIHByZXNlcnZlIGhpcyBsaWZlIGZvciB0aGUgcmVwdWJsaWMuIEJ1dCBJIHByb25vdW5jZSBoaW0gbm90CiAgICAgICAgICAgICAgICAgICAgb25seSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+LCBidXQgYSBtb3N0IGlsbHVzdHJpb3VzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj47IHdobywgYXMgaGUgaGFkIHBsZWRnZWQgaGltc2VsZiB0byBkaXNjaGFyZ2UKICAgICAgICAgICAgICAgICAgICBoaXMgZHV0eSB0byB0aGUgcmVwdWJsaWMgZWl0aGVyIGJ5IGRlYXRoIG9yIGJ5IHZpY3RvcnksIGhhcyBmdWxmaWxsZWQgb25lIGhhbGYKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgcHJvbWlzZTsgbWF5IHRoZSBpbW1vcnRhbCBnb2RzIHByZXZlbnQgdGhlIGZ1bGZpbGxtZW50IG9mIHRoZSBvdGhlciBoYWxmIQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['14.10.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoeSBuZWVkIEkgc3BlYWsgb2YgSGlydGl1cz8gd2hvLCB0aGUgbW9tZW50IGhlIGhlYXJkIG9mIHdoYXQgd2FzIGdvaW5nIG9uLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW5jcmVkaWJsZSBwcm9tcHRuZXNzIGFuZCBjb3VyYWdlIGxlZCBmb3J0aCB0d28gbGVnaW9ucyBvdXQgb2YgdGhlIGNhbXA7IHRoYXQKICAgICAgICAgICAgICAgICAgICBub2JsZSBmb3VydGggbGVnaW9uLCB3aGljaCwgaGF2aW5nIGRlc2VydGVkIEFudG9uaXVzLCBmb3JtZXJseSB1bml0ZWQgaXRzZWxmIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIE1hcnRpYWwgbGVnaW9uOyBhbmQgdGhlIHNldmVudGgsIHdoaWNoLCBjb25zaXN0aW5nIHdob2xseSBvZiB2ZXRlcmFucywgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHByb29mIGluIHRoYXQgYmF0dGxlIHRoYXQgdGhlIG5hbWUgb2YgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB3YXMgZGVhciB0byB0aG9zZSBzb2xkaWVycyB3aG8gcHJlc2VydmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlY29sbGVjdGlvbiBvZiB0aGUga2luZG5lc3Mgb2YgQ2Flc2FyLiBXaXRoIHRoZXNlIHR3ZW50eSBjb2hvcnRzLCB3aXRoIG5vCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeSwgd2hpbGUgSGlydGl1cyBoaW1zZWxmIHdhcyBiZWFyaW5nIHRoZSBlYWdsZSBvZiB0aGUgZm91cnRoCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uLOKAlGFuZCB3ZSBuZXZlciBoZWFyZCBvZiBhIG1vcmUgbm9ibGUgb2ZmaWNlIGJlaW5nIGFzc3VtZWQgYnkgYW55CiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCzigJRoZSBmb3VnaHQgd2l0aCB0aGUgdGhyZWUgbGVnaW9ucyBvZiBBbnRvbml1cyBhbmQgd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5LCBhbmQgb3ZlcnRocmV3LCBhbmQgcm91dGVkLCBhbmQgcHV0IHRvIHRoZSBzd29yZCB0aG9zZSBpbXBpb3VzIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZSByZWFsIGVuZW1pZXMgdG8gdGhpcyB0ZW1wbGUgb2YgdGhlIGFsbCBnb29kIGFuZCBhbGwgcG93ZXJmdWwgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkp1cGl0ZXI8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGFuZCB0byB0aGUgcmVzdCBvZiB0aGUgdGVtcGxlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBpbW1vcnRhbCBnb2RzLCBhbmQgdGhlIGhvdXNlcyBvZiB0aGUgY2l0eSwgYW5kIHRoZSBmcmVlZG9tIG9mIHRoZSBSb21hbiBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgYW5kIG91ciBsaXZlcyBhbmQgYWN0dWFsIGV4aXN0ZW5jZTsgc28gdGhhdCB0aGF0IGNoaWVmIGFuZCBsZWFkZXIgb2Ygcm9iYmVycwogICAgICAgICAgICAgICAgICAgIGZsZWQgYXdheSB3aXRoIGEgdmVyeSBmZXcgZm9sbG93ZXJzLCBjb25jZWFsZWQgYnkgdGhlIGRhcmtuZXNzIG9mIG5pZ2h0LCBhbmQKICAgICAgICAgICAgICAgICAgICBmcmlnaHRlbmVkIG91dCBvZiBhbGwgaGlzIHNlbnNlcy4gPC9wPgoJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdhcyBkZWFyIHRvIHRob3NlIHNvbGRpZXJzIHdobyBwcmVzZXJ2ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgcmVjb2xsZWN0aW9uIG9mIHRoZSBraW5kbmVzcyBvZiBDYWVzYXIuIFdpdGggdGhlc2UgdHdlbnR5IGNvaG9ydHMsIHdpdGggbm8KICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5LCB3aGlsZSBIaXJ0aXVzIGhpbXNlbGYgd2FzIGJlYXJpbmcgdGhlIGVhZ2xlIG9mIHRoZSBmb3VydGgKICAgICAgICAgICAgICAgICAgICBsZWdpb24s4oCUYW5kIHdlIG5ldmVyIGhlYXJkIG9mIGEgbW9yZSBub2JsZSBvZmZpY2UgYmVpbmcgYXNzdW1lZCBieSBhbnkKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsLOKAlGhlIGZvdWdodCB3aXRoIHRoZSB0aHJlZSBsZWdpb25zIG9mIEFudG9uaXVzIGFuZCB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIGNhdmFscnksIGFuZCBvdmVydGhyZXcsIGFuZCByb3V0ZWQsIGFuZCBwdXQgdG8gdGhlIHN3b3JkIHRob3NlIGltcGlvdXMgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgdGhlIHJlYWwgZW5lbWllcyB0byB0aGlzIHRlbXBsZSBvZiB0aGUgYWxsIGdvb2QgYW5kIGFsbCBwb3dlcmZ1bCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiwgYW5kIHRvIHRoZSByZXN0IG9mIHRoZSB0ZW1wbGVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGltbW9ydGFsIGdvZHMsIGFuZCB0aGUgaG91c2VzIG9mIHRoZSBjaXR5LCBhbmQgdGhlIGZyZWVkb20gb2YgdGhlIFJvbWFuIHBlb3BsZSwKICAgICAgICAgICAgICAgICAgICBhbmQgb3VyIGxpdmVzIGFuZCBhY3R1YWwgZXhpc3RlbmNlOyBzbyB0aGF0IHRoYXQgY2hpZWYgYW5kIGxlYWRlciBvZiByb2JiZXJzCiAgICAgICAgICAgICAgICAgICAgZmxlZCBhd2F5IHdpdGggYSB2ZXJ5IGZldyBmb2xsb3dlcnMsIGNvbmNlYWxlZCBieSB0aGUgZGFya25lc3Mgb2YgbmlnaHQsIGFuZAogICAgICAgICAgICAgICAgICAgIGZyaWdodGVuZWQgb3V0IG9mIGFsbCBoaXMgc2Vuc2VzLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48cCBjbGFzcz0idHJhbnNsYXRpb24iPiBPaCB3aGF0IGEgbW9zdCBibGVzc2VkIGRheSB3YXMgdGhhdCwgd2hpY2gsIHdoaWxlIHRoZSBjYXJjYXNzZXMgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICBwYXJyaWNpZGFsIHRyYWl0b3JzIHdlcmUgc3RyZXdlZCBhYm91dCBldmVyeSB3aGVyZSwgYmVoZWxkIEFudG9uaXVzIGZseWluZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgYSBmZXcgZm9sbG93ZXJzLCBiZWZvcmUgaGUgcmVhY2hlZCBoaXMgcGxhY2Ugb2YgY29uY2VhbG1lbnQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDwvcD4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.10.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdpbGwgYW55IG9uZSBoZXNpdGF0ZSB0byBjYWxsIENhZXNhciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+PwogICAgICAgICAgICAgICAgICAgIE1vc3QgY2VydGFpbmx5IGhpcyBhZ2Ugd2lsbCBub3QgZGV0ZXIgYW55IG9uZSBmcm9tIGFncmVlaW5nIHRvIHRoaXMgcHJvcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgc2luY2UgaGUgaGFzIGdvbmUgYmV5b25kIGhpcyBhZ2UgaW4gdmlydHVlLiBBbmQgdG8gbWUsIGluZGVlZCwgdGhlIHNlcnZpY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgQ2FpdXMgQ2Flc2FyIGhhdmUgYWx3YXlzIGFwcGVhcmVkIHRoZSBtb3JlIGRlc2VydmluZyBvZiB0aGFua3MsIGluIHByb3BvcnRpb24gYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgbGVzcyB0byBoYXZlIGJlZW4gZXhwZWN0ZWQgZnJvbSBhIG1hbiBvZiBoaXMgYWdlLiBGb3Igd2hlbiB3ZQogICAgICAgICAgICAgICAgICAgIGNvbmZlcnJlZCBtaWxpdGFyeSBjb21tYW5kIG9uIGhpbSB3ZSB3ZXJlIGluIGZhY3QgZW5jb3VyYWdpbmcgdGhlIGhvcGUgd2l0aAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhpcyBuYW1lIGluc3BpcmVkIHVzIGFuZCBub3cgdGhhdCBoZSBoYXMgZnVsZmlsbGVkIHRob3NlIGhvcGVzLCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBzYW5jdGlvbmVkIHRoZSBhdXRob3JpdHkgb2Ygb3VyIGRlY3JlZSBieSBoaXMgZXhwbG9pdHMuIFRoaXMgeW91bmcgbWFuIG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgbWluZCwgYXMgSGlydGl1cyBtb3N0IHRydWx5IGNhbGxzIGhpbSBpbiBoaXMgbGV0dGVyLCB3aXRoIGEgZmV3IGNvaG9ydHMgZGVmZW5kZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY2FtcCBvZiBtYW55IGxlZ2lvbnMgYW5kIGZvdWdodCBhIHN1Y2Nlc3NmdWwgYmF0dGxlIEFuZCBpbiB0aGlzIG1hbm5lciB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1YmxpYyBoYXMgb24gb25lIGRheSBiZWVuIHByZXNlcnZlZCBpbiBtYW55IHBsYWNlcyBieSB0aGUgdmFsb3IgYW5kIHdpc2RvbSwKICAgICAgICAgICAgICAgICAgICBhbmQgZ29vZCBmb3J0dW5lIG9mIHRocmVlIGltcGVyYXRvcnMgb2YgdGhlIFJvbWFuIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPj8KICAgICAgICAgICAgICAgICAgICBNb3N0IGNlcnRhaW5seSBoaXMgYWdlIHdpbGwgbm90IGRldGVyIGFueSBvbmUgZnJvbSBhZ3JlZWluZyB0byB0aGlzIHByb3Bvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgIHNpbmNlIGhlIGhhcyBnb25lIGJleW9uZCBoaXMgYWdlIGluIHZpcnR1ZS4gQW5kIHRvIG1lLCBpbmRlZWQsIHRoZSBzZXJ2aWNlcyBvZgogICAgICAgICAgICAgICAgICAgIENhaXVzIENhZXNhciBoYXZlIGFsd2F5cyBhcHBlYXJlZCB0aGUgbW9yZSBkZXNlcnZpbmcgb2YgdGhhbmtzLCBpbiBwcm9wb3J0aW9uIGFzCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGxlc3MgdG8gaGF2ZSBiZWVuIGV4cGVjdGVkIGZyb20gYSBtYW4gb2YgaGlzIGFnZS4gRm9yIHdoZW4gd2UKICAgICAgICAgICAgICAgICAgICBjb25mZXJyZWQgbWlsaXRhcnkgY29tbWFuZCBvbiBoaW0gd2Ugd2VyZSBpbiBmYWN0IGVuY291cmFnaW5nIHRoZSBob3BlIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGljaCBoaXMgbmFtZSBpbnNwaXJlZCB1cyBhbmQgbm93IHRoYXQgaGUgaGFzIGZ1bGZpbGxlZCB0aG9zZSBob3BlcywgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgc2FuY3Rpb25lZCB0aGUgYXV0aG9yaXR5IG9mIG91ciBkZWNyZWUgYnkgaGlzIGV4cGxvaXRzLiBUaGlzIHlvdW5nIG1hbiBvZiBncmVhdAogICAgICAgICAgICAgICAgICAgIG1pbmQsIGFzIEhpcnRpdXMgbW9zdCB0cnVseSBjYWxscyBoaW0gaW4gaGlzIGxldHRlciwgd2l0aCBhIGZldyBjb2hvcnRzIGRlZmVuZGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbXAgb2YgbWFueSBsZWdpb25zIGFuZCBmb3VnaHQgYSBzdWNjZXNzZnVsIGJhdHRsZSBBbmQgaW4gdGhpcyBtYW5uZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdWJsaWMgaGFzIG9uIG9uZSBkYXkgYmVlbiBwcmVzZXJ2ZWQgaW4gbWFueSBwbGFjZXMgYnkgdGhlIHZhbG9yIGFuZCB3aXNkb20sCiAgICAgICAgICAgICAgICAgICAgYW5kIGdvb2QgZm9ydHVuZSBvZiB0aHJlZSBpbXBlcmF0b3JzIG9mIHRoZSBSb21hbiBwZW9wbGUuIDwvdHJhbnNsYXRpb24+"
translation['14.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['14.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgdGhlcmVmb3JlIHByb3Bvc2Ugc3VwcGxpY2F0aW9ucyBvZiBmaWZ0eSBkYXlzIGluIHRoZSBqb2ludCBuYW1lcyBvZiB0aGUgdGhyZWUuCiAgICAgICAgICAgICAgICAgICAgVGhlIHJlYXNvbnMgSSB3aWxsIGVtYnJhY2UgaW4gdGhlIHdvcmRzIG9mIHRoZSByZXNvbHV0aW9uLCB1c2luZyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBsYW5ndWFnZSB0aGF0IEkgY2FuIGRldmlzZS4gPC9wPgoJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaXQgYmVjb21lcyBvdXIgZ29vZCBmYWl0aCBhbmQgb3VyIHBpZXR5IHRvIHNob3cgcGxhaW5seSB0byBvdXIgbW9zdCBnYWxsYW50CiAgICAgICAgICAgICAgICAgICAgc29sZGllcnMgaG93IG1pbmRmdWwgb2YgdGhlaXIgc2VydmljZXMgYW5kIGhvdyBncmF0ZWZ1bCBmb3IgdGhlbSB3ZSBhcmU7IGFuZAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZ2x5IEkgZ2l2ZSBteSB2b3RlIHRoYXQgb3VyIHByb21pc2VzLCBhbmQgdGhvc2UgcGxlZGdlcyB0b28gd2hpY2ggd2UKICAgICAgICAgICAgICAgICAgICBwcm9taXNlZCB0byBiZXN0b3cgb24gdGhlIGxlZ2lvbnMgd2hlbiB0aGUgd2FyIHdhcyBmaW5pc2hlZCwgYmUgcmVwZWF0ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gcGFzcyB0aGlzIGRheS4gRm9yIGl0IGlzIHF1aXRlIGZhaXIgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBob25vciBvZiB0aGUgc29sZGllcnMsIGVzcGVjaWFsbHkgb2Ygc3VjaCBzb2xkaWVycyBhcyB0aG9zZSwgc2hvdWxkIGJlIHVuaXRlZAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhhdCBvZiB0aGVpciBjb21tYW5kZXJzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBJIHdpc2gsIE8KICAgICAgICAgICAgICAgICAgICBjb25zY3JpcHQgZmF0aGVycywgdGhhdCBpdCB3YXMgbGF3ZnVsIGZvciB1cyB0byBkaXNwZW5zZSByZXdhcmRzIHRvIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVucywgYWx0aG91Z2ggd2Ugd2lsbCBnaXZlIHRob3NlIHdoaWNoIHdlIGhhdmUgcHJvbWlzZWQgd2l0aCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGNhcmVmdWwgdXN1cnkuIEJ1dCB0aGF0IHJlbWFpbnMsIGFzIEkgd2VsbCBob3BlLCB0byB0aGUgY29ucXVlcm9ycywgdG8gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBmYWl0aCBvZiB0aGUgc2VuYXRlIGlzIHBsZWRnZWQ7IGFuZCwgYXMgdGhleSBoYXZlIGFkaGVyZWQgdG8gaXQgYXQgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY3JpdGljYWwgcGVyaW9kIG9mIHRoZSByZXB1YmxpYywgd2UgYXJlIGJvdW5kIHRvIHRha2UgY2FyZSB0aGF0IHRoZXkgbmV2ZXIgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNhdXNlIHRvIHJlcGVudCBvZiB0aGVpciBjb25kdWN0LiBCdXQgaXQgaXMgZWFzeSBmb3IgdXMgdG8gZGVhbCBmYWlybHkgYnkgdGhvc2UKICAgICAgICAgICAgICAgICAgICBtZW4gd2hvc2UgdmVyeSBzZXJ2aWNlcywgdGhvdWdoIG11dGUsIGFwcGVhciB0byBkZW1hbmQgb3VyIGxpYmVyYWxpdHkuIFRoaXMgaXMgYQogICAgICAgICAgICAgICAgICAgIG11Y2ggbW9yZSBwcmFpc2V3b3J0aHkgYW5kIG1vcmUgaW1wb3J0YW50IGR1dHksIHRvIHBheSBhIHByb3BlciB0cmlidXRlIG9mCiAgICAgICAgICAgICAgICAgICAgZ3JhdGVmdWwgcmVjb2xsZWN0aW9uIHRvIHRoZSB2YWxvciBvZiB0aG9zZSBtZW4gd2hvIGhhdmUgc2hlZCB0aGVpciBibG9vZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiB0aGVpciBjb3VudHJ5LiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgSSB3aXNoIG1vcmUKICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9ucyBjb3VsZCBvY2N1ciB0byBtZSBpbiB0aGUgd2F5IG9mIGRvaW5nIGhvbm9yIHRvIHRob3NlIG1lbi4gVGhlIHR3bwogICAgICAgICAgICAgICAgICAgIGlkZWFzIHdoaWNoIHByaW5jaXBhbGx5IGRvIG9jY3VyIHRvIG1lLCBJIHdpbGwgYXQgYWxsIGV2ZW50cyBub3QgcGFzcyBvdmVyOyB0aGUKICAgICAgICAgICAgICAgICAgICBvbmUgb2Ygd2hpY2ggaGFzIHJlZmVyZW5jZSB0byB0aGUgZXZlcmxhc3RpbmcgZ2xvcnkgb2YgdGhvc2UgYnJhdmVzdCBvZiBtZW47IHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIG1heSB0ZW5kIHRvIG1pdGlnYXRlIHRoZSBzb3Jyb3cgYW5kIG1vdXJuaW5nIG9mIHRoZWlyIHJlbGF0aW9ucy4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.11.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIEkgd2lzaCwgTwogICAgICAgICAgICAgICAgICAgIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IGl0IHdhcyBsYXdmdWwgZm9yIHVzIHRvIGRpc3BlbnNlIHJld2FyZHMgdG8gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zLCBhbHRob3VnaCB3ZSB3aWxsIGdpdmUgdGhvc2Ugd2hpY2ggd2UgaGF2ZSBwcm9taXNlZCB3aXRoIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY2FyZWZ1bCB1c3VyeS4gQnV0IHRoYXQgcmVtYWlucywgYXMgSSB3ZWxsIGhvcGUsIHRvIHRoZSBjb25xdWVyb3JzLCB0byB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIGZhaXRoIG9mIHRoZSBzZW5hdGUgaXMgcGxlZGdlZDsgYW5kLCBhcyB0aGV5IGhhdmUgYWRoZXJlZCB0byBpdCBhdCBhIG1vc3QKICAgICAgICAgICAgICAgICAgICBjcml0aWNhbCBwZXJpb2Qgb2YgdGhlIHJlcHVibGljLCB3ZSBhcmUgYm91bmQgdG8gdGFrZSBjYXJlIHRoYXQgdGhleSBuZXZlciBoYXZlCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgdG8gcmVwZW50IG9mIHRoZWlyIGNvbmR1Y3QuIEJ1dCBpdCBpcyBlYXN5IGZvciB1cyB0byBkZWFsIGZhaXJseSBieSB0aG9zZQogICAgICAgICAgICAgICAgICAgIG1lbiB3aG9zZSB2ZXJ5IHNlcnZpY2VzLCB0aG91Z2ggbXV0ZSwgYXBwZWFyIHRvIGRlbWFuZCBvdXIgbGliZXJhbGl0eS4gVGhpcyBpcyBhCiAgICAgICAgICAgICAgICAgICAgbXVjaCBtb3JlIHByYWlzZXdvcnRoeSBhbmQgbW9yZSBpbXBvcnRhbnQgZHV0eSwgdG8gcGF5IGEgcHJvcGVyIHRyaWJ1dGUgb2YKICAgICAgICAgICAgICAgICAgICBncmF0ZWZ1bCByZWNvbGxlY3Rpb24gdG8gdGhlIHZhbG9yIG9mIHRob3NlIG1lbiB3aG8gaGF2ZSBzaGVkIHRoZWlyIGJsb29kIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNhdXNlIG9mIHRoZWlyIGNvdW50cnkuIDwvdHJhbnNsYXRpb24+"
translation['14.11.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIEkgd2lzaCBtb3JlCiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnMgY291bGQgb2NjdXIgdG8gbWUgaW4gdGhlIHdheSBvZiBkb2luZyBob25vciB0byB0aG9zZSBtZW4uIFRoZSB0d28KICAgICAgICAgICAgICAgICAgICBpZGVhcyB3aGljaCBwcmluY2lwYWxseSBkbyBvY2N1ciB0byBtZSwgSSB3aWxsIGF0IGFsbCBldmVudHMgbm90IHBhc3Mgb3ZlcjsgdGhlCiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHdoaWNoIGhhcyByZWZlcmVuY2UgdG8gdGhlIGV2ZXJsYXN0aW5nIGdsb3J5IG9mIHRob3NlIGJyYXZlc3Qgb2YgbWVuOyB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBtYXkgdGVuZCB0byBtaXRpZ2F0ZSB0aGUgc29ycm93IGFuZCBtb3VybmluZyBvZiB0aGVpciByZWxhdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgdGhlcmVmb3JlIGdpdmUgbXkgdm90ZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCB0aGUgbW9zdCBob25vcmFibGUgbW9udW1lbnQKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBiZSBlcmVjdGVkIHRvIHRoZSBzb2xkaWVycyBvZiB0aGUgTWFydGlhbCBsZWdpb24sIGFuZCB0byB0aG9zZSBzb2xkaWVycwogICAgICAgICAgICAgICAgICAgIGFsc28gd2hvIGRpZWQgZmlnaHRpbmcgYnkgdGhlaXIgc2lkZS4gR3JlYXQgYW5kIGluY3JlZGlibGUgYXJlIHRoZSBzZXJ2aWNlcyBkb25lCiAgICAgICAgICAgICAgICAgICAgYnkgdGhpcyBsZWdpb24gdG8gdGhlIHJlcHVibGljLiBUaGlzIHdhcyB0aGUgZmlyc3QgbGVnaW9uIHRvIHRlYXIgaXRzZWxmIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgcGlyYXRpY2FsIGJhbmQgb2YgQW50b25pdXM7IHRoaXMgd2FzIHRoZSBsZWdpb24gd2hpY2ggZW5jYW1wZWQgYXQgQWxiYTsgdGhpcwogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgbGVnaW9uIHRoYXQgd2VudCBvdmVyIHRvIENhZXNhcjsgYW5kIGl0IHdhcyBpbiBpbWl0YXRpb24gb2YgdGhlIGNvbmR1Y3QKICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGxlZ2lvbiB0aGF0IHRoZSBmb3VydGggbGVnaW9uIGhhcyBlYXJuZWQgYWxtb3N0IGVxdWFsIGdsb3J5IGZvciBpdHMKICAgICAgICAgICAgICAgICAgICB2aXJ0dWUuIFRoZSBmb3VydGggaXMgdmljdG9yaW91cyB3aXRob3V0IGhhdmluZyBsb3N0IGEgbWFuOyBzb21lIG9mIHRoZSBNYXJ0aWFsCiAgICAgICAgICAgICAgICAgICAgbGVnaW9uIGZlbGwgaW4gdGhlIHZlcnkgbW9tZW50IG9mIHZpY3RvcnkuIE9oIGhhcHB5IGRlYXRoLCB3aGljaCwgZHVlIHRvIG5hdHVyZSwKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBwYWlkIGluIHRoZSBjYXVzZSBvZiBvbmUncyBjb3VudHJ5ISA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICAgICAgICAgICAgICAgQnV0IEkgY29uc2lkZXIgeW91IG1lbiBib3JuIGZvciB5b3VyIGNvdW50cnk7IHlvdSB3aG9zZSB2ZXJ5IG5hbWUgaXMgZGVyaXZlZAogICAgICAgICAgICAgICAgICAgIGZyb20gTWFycywgc28gdGhhdCB0aGUgc2FtZSBnb2Qgd2hvIGJlZ290IHRoaXMgY2l0eSBmb3IgdGhlIGFkdmFudGFnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBuYXRpb25zLCBhcHBlYXJzIHRvIGhhdmUgYmVnb3R0ZW4geW91IGZvciB0aGUgYWR2YW50YWdlIG9mIHRoaXMgY2l0eS4gRGVhdGggaW4KICAgICAgICAgICAgICAgICAgICBmbGlnaHQgaXMgaW5mYW1vdXM7IGluIHZpY3RvcnkgZ2xvcmlvdXMuIEluIHRydXRoLCBNYXJzIGhpbXNlbGYgc2VlbXMgdG8gc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBicmF2ZXN0IG1lbiBmcm9tIHRoZSBiYXR0bGUgYXJyYXkuIFRob3NlIGltcGlvdXMgbWVuIHdob20geW91IHNsZXcsCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgZXZlbiBpbiB0aGUgc2hhZGVzIGJlbG93IHBheSB0aGUgcGVuYWx0eSBvZiB0aGVpciBwYXJyaWNpZGFsIHRyZWFzb24uIEJ1dAogICAgICAgICAgICAgICAgICAgIHlvdSwgd2hvIGhhdmUgcG91cmVkIGZvcnRoIHlvdXIgbGF0ZXN0IGJyZWF0aCBpbiB2aWN0b3J5LCBoYXZlIGVhcm5lZCBhbiBhYm9kZQogICAgICAgICAgICAgICAgICAgIGFuZCBwbGFjZSBhbW9uZyB0aGUgcGlvdXMuIEEgYnJpZWYgbGlmZSBoYXMgYmVlbiBhbGxvdHRlZCB0byB1cyBieSBuYXR1cmU7IGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBtZW1vcnkgb2YgYSB3ZWxsLXNwZW50IGxpZmUgaXMgaW1wZXJpc2hhYmxlLiBBbmQgaWYgdGhhdCBtZW1vcnkgd2VyZSBubwogICAgICAgICAgICAgICAgICAgIGxvbmdlciB0aGFuIHRoaXMgbGlmZSwgd2hvIHdvdWxkIGJlIHNvIHNlbnNlbGVzcyBhcyB0byBzdHJpdmUgdG8gYXR0YWluIGV2ZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdCBwcmFpc2UgYW5kIGdsb3J5IGJ5IHRoZSBtb3N0IGVub3Jtb3VzIGxhYm9ycyBhbmQgZGFuZ2Vycz8gPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.12.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgICAgICBCdXQgSSBjb25zaWRlciB5b3UgbWVuIGJvcm4gZm9yIHlvdXIgY291bnRyeTsgeW91IHdob3NlIHZlcnkgbmFtZSBpcyBkZXJpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBNYXJzLCBzbyB0aGF0IHRoZSBzYW1lIGdvZCB3aG8gYmVnb3QgdGhpcyBjaXR5IGZvciB0aGUgYWR2YW50YWdlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG5hdGlvbnMsIGFwcGVhcnMgdG8gaGF2ZSBiZWdvdHRlbiB5b3UgZm9yIHRoZSBhZHZhbnRhZ2Ugb2YgdGhpcyBjaXR5LiBEZWF0aCBpbgogICAgICAgICAgICAgICAgICAgIGZsaWdodCBpcyBpbmZhbW91czsgaW4gdmljdG9yeSBnbG9yaW91cy4gSW4gdHJ1dGgsIE1hcnMgaGltc2VsZiBzZWVtcyB0byBzZWxlY3QKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGJyYXZlc3QgbWVuIGZyb20gdGhlIGJhdHRsZSBhcnJheS4gVGhvc2UgaW1waW91cyBtZW4gd2hvbSB5b3Ugc2xldywKICAgICAgICAgICAgICAgICAgICBzaGFsbCBldmVuIGluIHRoZSBzaGFkZXMgYmVsb3cgcGF5IHRoZSBwZW5hbHR5IG9mIHRoZWlyIHBhcnJpY2lkYWwgdHJlYXNvbi4gQnV0CiAgICAgICAgICAgICAgICAgICAgeW91LCB3aG8gaGF2ZSBwb3VyZWQgZm9ydGggeW91ciBsYXRlc3QgYnJlYXRoIGluIHZpY3RvcnksIGhhdmUgZWFybmVkIGFuIGFib2RlCiAgICAgICAgICAgICAgICAgICAgYW5kIHBsYWNlIGFtb25nIHRoZSBwaW91cy4gQSBicmllZiBsaWZlIGhhcyBiZWVuIGFsbG90dGVkIHRvIHVzIGJ5IG5hdHVyZTsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbW9yeSBvZiBhIHdlbGwtc3BlbnQgbGlmZSBpcyBpbXBlcmlzaGFibGUuIEFuZCBpZiB0aGF0IG1lbW9yeSB3ZXJlIG5vCiAgICAgICAgICAgICAgICAgICAgbG9uZ2VyIHRoYW4gdGhpcyBsaWZlLCB3aG8gd291bGQgYmUgc28gc2Vuc2VsZXNzIGFzIHRvIHN0cml2ZSB0byBhdHRhaW4gZXZlbiB0aGUKICAgICAgICAgICAgICAgICAgICBoaWdoZXN0IHByYWlzZSBhbmQgZ2xvcnkgYnkgdGhlIG1vc3QgZW5vcm1vdXMgbGFib3JzIGFuZCBkYW5nZXJzPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IHRoZW4gaGF2ZSBmYXJlZCBtb3N0IGFkbWlyYWJseSwgYmVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgYnJhdmVzdCBvZiBzb2xkaWVycyB3aGlsZSB5b3UgbGl2ZWQsIGFuZCBub3cgdGhlIG1vc3QgaG9seSBvZiB3YXJyaW9ycywgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgYmUgaW1wb3NzaWJsZSBmb3IgeW91ciB2aXJ0dWUgdG8gYmUgYnVyaWVkLCBlaXRoZXIgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JnZXRmdWxuZXNzIG9mIHRoZSBtZW4gb2YgdGhlIHByZXNlbnQgYWdlLCBvciB0aGUgc2lsZW5jZSBvZiBwb3N0ZXJpdHksIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgUm9tYW4gcGVvcGxlIHdpbGwgaGF2ZSByYWlzZWQgdG8geW91IGFuIGltcGVyaXNoYWJsZSBtb251bWVudCwgSQogICAgICAgICAgICAgICAgICAgIG1heSBhbG1vc3Qgc2F5IHdpdGggdGhlaXIgb3duIGhhbmRzLiBNYW55IGFybWllcyBhdCB2YXJpb3VzIHRpbWVzIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFuZCBpbGx1c3RyaW91cyBpbiB0aGUgUHVuaWMsIGFuZCBHYWxsaWMsIGFuZCBJdGFsaWFuIHdhcnM7IGJ1dCB0byBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSBoYXZlIGhvbm9ycyBiZWVuIHBhaWQgb2YgdGhlIGRlc2NyaXB0aW9uIHdoaWNoIGFyZSBub3cgY29uZmVycmVkIG9uIHlvdS4KICAgICAgICAgICAgICAgICAgICBBbmQgSSB3aXNoIHRoYXQgd2UgY291bGQgcGF5IHlvdSBldmVuIGdyZWF0ZXIgaG9ub3JzLCBzaW5jZSB3ZSBoYXZlIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3UgdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIHNlcnZpY2VzLiBZb3UgaXQgd2FzIHdobyB0dXJuZWQgYXNpZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZnVyaW91cy4gQW50b25pdXMgZnJvbSB0aGlzIGNpdHk7IHlvdSBpdCB3YXMgd2hvIHJlcGVsbGVkIGhpbSB3aGVuIGVuZGVhdm9yaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gcmV0dXJuLiBUaGVyZSBzaGFsbCB0aGVyZWZvcmUgYmUgYSB2YXN0IG1vbnVtZW50IGVyZWN0ZWQgd2l0aCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHN1bXB0dW91cyB3b3JrIGFuZCBhbiBpbnNjcmlwdGlvbiBlbmdyYXZlZCB1cG9uIGl0IGFzIHRoZSBldmVybGFzdGluZyB3aXRuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBnb2RsaWtlIHZpcnR1ZSBBbmQgbmV2ZXIgc2hhbGwgdGhlIG1vc3QgZ3JhdGVmdWwgbGFuZ3VhZ2Ugb2YgYWxsIHdobyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBzZWUgb3IgaGVhciBvZiB5b3VyIG1vbnVtZW50IGNlYXNlIHRvIGJlIGhlYXJkIEFuZCBpbiB0aGlzIG1hbm5lciB5b3UsIGluCiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2UgZm9yIHlvdXIgbW9ydGFsIGNvbmRpdGlvbiBvZiBsaWZlLCBoYXZlIGF0dGFpbmVkIGltbW9ydGFsaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.12.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IHRoZW4gaGF2ZSBmYXJlZCBtb3N0IGFkbWlyYWJseSwgYmVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgYnJhdmVzdCBvZiBzb2xkaWVycyB3aGlsZSB5b3UgbGl2ZWQsIGFuZCBub3cgdGhlIG1vc3QgaG9seSBvZiB3YXJyaW9ycywgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgYmUgaW1wb3NzaWJsZSBmb3IgeW91ciB2aXJ0dWUgdG8gYmUgYnVyaWVkLCBlaXRoZXIgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JnZXRmdWxuZXNzIG9mIHRoZSBtZW4gb2YgdGhlIHByZXNlbnQgYWdlLCBvciB0aGUgc2lsZW5jZSBvZiBwb3N0ZXJpdHksIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgUm9tYW4gcGVvcGxlIHdpbGwgaGF2ZSByYWlzZWQgdG8geW91IGFuIGltcGVyaXNoYWJsZSBtb251bWVudCwgSQogICAgICAgICAgICAgICAgICAgIG1heSBhbG1vc3Qgc2F5IHdpdGggdGhlaXIgb3duIGhhbmRzLiBNYW55IGFybWllcyBhdCB2YXJpb3VzIHRpbWVzIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGdyZWF0IGFuZCBpbGx1c3RyaW91cyBpbiB0aGUgUHVuaWMsIGFuZCBHYWxsaWMsIGFuZCBJdGFsaWFuIHdhcnM7IGJ1dCB0byBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSBoYXZlIGhvbm9ycyBiZWVuIHBhaWQgb2YgdGhlIGRlc2NyaXB0aW9uIHdoaWNoIGFyZSBub3cgY29uZmVycmVkIG9uIHlvdS4KICAgICAgICAgICAgICAgICAgICBBbmQgSSB3aXNoIHRoYXQgd2UgY291bGQgcGF5IHlvdSBldmVuIGdyZWF0ZXIgaG9ub3JzLCBzaW5jZSB3ZSBoYXZlIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3UgdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIHNlcnZpY2VzLiBZb3UgaXQgd2FzIHdobyB0dXJuZWQgYXNpZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZnVyaW91cy4gQW50b25pdXMgZnJvbSB0aGlzIGNpdHk7IHlvdSBpdCB3YXMgd2hvIHJlcGVsbGVkIGhpbSB3aGVuIGVuZGVhdm9yaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gcmV0dXJuLiBUaGVyZSBzaGFsbCB0aGVyZWZvcmUgYmUgYSB2YXN0IG1vbnVtZW50IGVyZWN0ZWQgd2l0aCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHN1bXB0dW91cyB3b3JrIGFuZCBhbiBpbnNjcmlwdGlvbiBlbmdyYXZlZCB1cG9uIGl0IGFzIHRoZSBldmVybGFzdGluZyB3aXRuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBnb2RsaWtlIHZpcnR1ZSBBbmQgbmV2ZXIgc2hhbGwgdGhlIG1vc3QgZ3JhdGVmdWwgbGFuZ3VhZ2Ugb2YgYWxsIHdobyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBzZWUgb3IgaGVhciBvZiB5b3VyIG1vbnVtZW50IGNlYXNlIHRvIGJlIGhlYXJkIEFuZCBpbiB0aGlzIG1hbm5lciB5b3UsIGluCiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2UgZm9yIHlvdXIgbW9ydGFsIGNvbmRpdGlvbiBvZiBsaWZlLCBoYXZlIGF0dGFpbmVkIGltbW9ydGFsaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['14.13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIGdpZnQgb2YgZ2xvcnkgaXMgY29uZmVycmVkIG9uIHRoZXNlIG1vc3QKICAgICAgICAgICAgICAgICAgICBleGNlbGxlbnQgYW5kIGdhbGxhbnQgY2l0aXplbnMgYnkgdGhlIGhvbm9yIG9mIGEgbW9udW1lbnQsIGxldCB1cyBjb21mb3J0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmVsYXRpb25zLCB0byB3aG9tIHRoaXMgaW5kZWVkIGlzIHRoZSBiZXN0IGNvbnNvbGF0aW9uLiBUaGUgZ3JlYXRlc3QgY29tZm9ydCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVpciBwYXJlbnRzIGlzIHRoZSByZWZsZWN0aW9uIHRoYXQgdGhleSBoYXZlIHByb2R1Y2VkIHNvbnMgd2hvIGhhdmUgYmVlbiBzdWNoCiAgICAgICAgICAgICAgICAgICAgYnVsd2Fya3Mgb2YgdGhlIHJlcHVibGljOyBmb3IgdGhlaXIgY2hpbGRyZW4sIHRoYXQgdGhleSB3aWxsIGhhdmUgc3VjaCBleGFtcGxlcwogICAgICAgICAgICAgICAgICAgIG9mIHZpcnR1ZSBpbiB0aGVpciBmYW1pbHk7IGZvciB0aGVpciB3aXZlcywgdGhhdCB0aGUgaHVzYmFuZHMgd2hvbSB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBsb3N0IGFyZSBtZW4gd2hvbSBpdCBpcyBhIGNyZWRpdCB0byBwcmFpc2UsIGFuZCB0byBoYXZlIGEgcmlnaHQgdG8gbW91cm4gZm9yOwogICAgICAgICAgICAgICAgICAgIGFuZCBmb3IgdGhlaXIgYnJvdGhlcnMsIHRoYXQgdGhleSBtYXkgdHJ1c3QgdGhhdCwgYXMgdGhleSByZXNlbWJsZSB0aGVtIGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucywgc28gdGhleSBkbyBhbHNvIGluIHRoZWlyIHZpcnR1ZXMuIDwvcD4KCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V291bGQgdGhhdCB3ZSB3ZXJlIGFibGUgYnkgdGhlIGV4cHJlc3Npb24gb2Ygb3VyIHNlbnRpbWVudHMgYW5kIGJ5IG91ciB2b3RlcyB0bwogICAgICAgICAgICAgICAgICAgIHdpcGUgYXdheSB0aGUgdGVhcnMgb2YgYWxsIHRoZXNlIHBlcnNvbnM7IG9yIHRoYXQgYW55IHN1Y2ggb3JhdGlvbiBhcyB0aGlzIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgcHVibGljbHkgYWRkcmVzc2VkIHRvIHRoZW0sIHRvIGNhdXNlIHRoZW0gdG8gbGF5IGFzaWRlIHRoZWlyIGdyaWVmIGFuZAogICAgICAgICAgICAgICAgICAgIG1vdXJuaW5nLCBhbmQgdG8gcmVqb2ljZSByYXRoZXIsIHRoYXQsIHdoaWxlIG1hbnkgdmFyaW91cyBraW5kcyBvZiBkZWF0aCBpbXBlbmQKICAgICAgICAgICAgICAgICAgICBvdmVyIG1lbiwgdGhlIG1vc3QgaG9ub3JhYmxlIGtpbmQgb2YgYWxsIGhhcyBmYWxsZW4gdG8gdGhlIGxvdCBvZiB0aGVpciBmcmllbmRzOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZXkgYXJlIG5vdCB1bmJ1cmllZCwgbm9yIGRlc2VydGVkOyB0aG91Z2ggZXZlbiB0aGF0IGZhdGUsIHdoZW4KICAgICAgICAgICAgICAgICAgICBpbmN1cnJlZCBmb3Igb25lIGEgY291bnRyeSwgaXMgbm90IGFjY291bnRlZCBtaXNlcmFibGU7IG5vciBidXJuZWQgd2l0aCBlcXVhYmxlCiAgICAgICAgICAgICAgICAgICAgb2JzZXF1aWVzIGluIHNjYXR0ZXJlZCBncmF2ZXMsIGJ1dCBlbnRvbWJlZCBpbiBob25vcmFibGUgc2VwdWxjaGVycywgYW5kIGhvbm9yZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIHB1YmxpYyBvZmZlcmluZ3M7IGFuZCB3aXRoIGEgYnVpbGRpbmcgd2hpY2ggd2lsbCBiZSBhbiBhbHRhciBvZiB0aGVpciB2YWxvcgogICAgICAgICAgICAgICAgICAgIHRvIGluc3VyZSB0aGUgcmVjb2xsZWN0aW9uIG9mIGV0ZXJuYWwgYWdlcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICAgICAgICAgICAgPC9wPgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.13.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlIGl0IHdpbGwgYmUgdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIGNvbWZvcnQgdG8gdGhlaXIgcmVsYXRpb25zLCB0aGF0IGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgbW9udW1lbnQgYXJlIGNsZWFybHkgZGlzcGxheWVkIHRoZSB2YWxvciBvZiB0aGVpciBraW5zbWVuLCBhbmQgYWxzbwogICAgICAgICAgICAgICAgICAgIHRoZWlyIHBpZXR5LCBhbmQgdGhlIGdvb2QgZmFpdGggb2YgdGhlIHNlbmF0ZSwgYW5kIHRoZSBtZW1vcnkgb2YgdGhpcyBtb3N0CiAgICAgICAgICAgICAgICAgICAgaW5odW1hbiB3YXIsIGluIHdoaWNoLCBpZiB0aGUgdmFsb3Igb2YgdGhlIHNvbGRpZXJzIGhhZCBiZWVuIGxlc3MgY29uc3BpY3VvdXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIHZlcnkgbmFtZSBvZiB0aGUgUm9tYW4gcGVvcGxlIHdvdWxkIGhhdmUgcGVyaXNoZWQgYnkgdGhlIHBhcnJpY2lkYWwgdHJlYXNvbgogICAgICAgICAgICAgICAgICAgIG9mIE1hcmN1cy4gQW50b25pdXMuIEFuZCBJIHRoaW5rIGFsc28sIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRoYXQgdGhvc2UgcmV3YXJkcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlIHByb21pc2VkIHRvIGJlc3RvdyBvbiB0aGUgc29sZGllcnMgd2hlbiB3ZSBoYWQgcmVjb3ZlcmVkIHRoZSByZXB1YmxpYywKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgZ2l2ZSB3aXRoIGFidW5kYW50IHVzdXJ5IHRvIHRob3NlIHdobyBhcmUgYWxpdmUgYW5kIHZpY3RvcmlvdXMgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIGNvbWVzOyBhbmQgdGhhdCBpbiB0aGUgY2FzZSBvZiB0aGUgbWVuIHRvIHdob20gdGhvc2UgcmV3YXJkcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZWQsIGJ1dCB3aG8gaGF2ZSBkaWVkIGluIHRoZSBkZWZlbnNlIG9mIHRoZWlyIGNvdW50cnksIEkgdGhpbmsgdGhvc2Ugc2FtZQogICAgICAgICAgICAgICAgICAgIHJld2FyZHMgc2hvdWxkIGJlIGdpdmVuIHRvIHRoZWlyIHBhcmVudHMgb3IgY2hpbGRyZW4sIG9yIHdpdmVzIG9yIGJyb3RoZXJzLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['14.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGF0IEkgbWF5IHJlZHVjZSBteSBzZW50aW1lbnRzIGludG8gYSBmb3JtYWwgbW90aW9uLCBJIGdpdmUgbXkgdm90ZSB0aGF0LAogICAgICAgICAgICAgICAgICAgIOKAnEFzIENhaXVzIFBhbnNhLCBjb25zdWwsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIHNldAogICAgICAgICAgICAgICAgICAgIHRoZSBleGFtcGxlIG9mIGZpZ2h0aW5nIHdpdGggdGhlIGVuZW15IGluIGEgYmF0dGxlIGluIHdoaWNoIHRoZSBNYXJ0aWFsIGxlZ2lvbgogICAgICAgICAgICAgICAgICAgIGRlZmVuZGVkIHRoZSBmcmVlZG9tIG9mIHRoZSBSb21hbiBwZW9wbGUgd2l0aCBhZG1pcmFibGUgYW5kIGluY3JlZGlibGUgdmFsb3IsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBsZWdpb25zIG9mIHRoZSByZWNydWl0cyBiZWhhdmVkIGVxdWFsbHkgd2VsbDsgYW5kIGFzIENhaXVzIFBhbnNhLAogICAgICAgICAgICAgICAgICAgIGNvbnN1bCwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgd2hpbGUgZW5nYWdlZCBpbiB0aGUgbWlkZGxlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJhbmtzIG9mIHRoZSBlbmVteSByZWNlaXZlZCB3b3VuZHM7IGFuZCBhcyBBdWx1cyBIaXJ0aXVzLCBjb25zdWwsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIHRoZSBtb21lbnQgdGhhdCBoZSBoZWFyZCBvZiB0aGUgYmF0dGxlLCBhbmQKICAgICAgICAgICAgICAgICAgICBrbmV3IHdoYXQgd2FzIGdvaW5nIG9uLCB3aXRoIGEgbW9zdCBnYWxsYW50IGFuZCBsb3lhbCBzb3VsLCBsZWQgaGlzIGFybXkgb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhbXAgYW5kIGF0dGFja2VkIE1hcmN1cyBBbnRvbml1cyBhbmQgaGlzIGFybXksIGFuZCBwdXQgaGlzIHRyb29wcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzd29yZCwgd2l0aCBzbyBsaXR0bGUgaW5qdXJ5IHRvIGhpcyBvd24gYXJteSB0aGF0IGhlIGRpZCBub3QgbG9zZSBvbmUgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgbWFuOyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+IGFuZCBhcyBDYWl1cyBDYWVzYXIsIHByb3ByYWV0b3IsCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+LCB3aXRoIGdyZWF0IHBydWRlbmNlIGFuZCBlbmVyZ3kKICAgICAgICAgICAgICAgICAgICBkZWZlbmRlZCB0aGUgY2FtcCBzdWNjZXNzZnVsbHksIGFuZCByb3V0ZWQgYW5kIHB1dCB0byB0aGUgc3dvcmQgdGhlIGZvcmNlcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBlbmVteSB3aGljaCBoYWQgY29tZSBuZWFyIHRoZSBjYW1wOiA8L3A+CgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+LCBzZXQKICAgICAgICAgICAgICAgICAgICB0aGUgZXhhbXBsZSBvZiBmaWdodGluZyB3aXRoIHRoZSBlbmVteSBpbiBhIGJhdHRsZSBpbiB3aGljaCB0aGUgTWFydGlhbCBsZWdpb24KICAgICAgICAgICAgICAgICAgICBkZWZlbmRlZCB0aGUgZnJlZWRvbSBvZiB0aGUgUm9tYW4gcGVvcGxlIHdpdGggYWRtaXJhYmxlIGFuZCBpbmNyZWRpYmxlIHZhbG9yLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbGVnaW9ucyBvZiB0aGUgcmVjcnVpdHMgYmVoYXZlZCBlcXVhbGx5IHdlbGw7IGFuZCBhcyBDYWl1cyBQYW5zYSwKICAgICAgICAgICAgICAgICAgICBjb25zdWwsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyYXRvcjwvZm9yZWlnbj4sIHdoaWxlIGVuZ2FnZWQgaW4gdGhlIG1pZGRsZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSByYW5rcyBvZiB0aGUgZW5lbXkgcmVjZWl2ZWQgd291bmRzOyBhbmQgYXMgQXVsdXMgSGlydGl1cywgY29uc3VsLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5pbXBlcmF0b3I8L2ZvcmVpZ24+LCB0aGUgbW9tZW50IHRoYXQgaGUgaGVhcmQgb2YgdGhlIGJhdHRsZSwgYW5kCiAgICAgICAgICAgICAgICAgICAga25ldyB3aGF0IHdhcyBnb2luZyBvbiwgd2l0aCBhIG1vc3QgZ2FsbGFudCBhbmQgbG95YWwgc291bCwgbGVkIGhpcyBhcm15IG91dCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBjYW1wIGFuZCBhdHRhY2tlZCBNYXJjdXMgQW50b25pdXMgYW5kIGhpcyBhcm15LCBhbmQgcHV0IGhpcyB0cm9vcHMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3dvcmQsIHdpdGggc28gbGl0dGxlIGluanVyeSB0byBoaXMgb3duIGFybXkgdGhhdCBoZSBkaWQgbm90IGxvc2Ugb25lIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIG1hbjsgPC90cmFuc2xhdGlvbj4="
translation['14.14.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gYW5kIGFzIENhaXVzIENhZXNhciwgcHJvcHJhZXRvciwKICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJhdG9yPC9mb3JlaWduPiwgd2l0aCBncmVhdCBwcnVkZW5jZSBhbmQgZW5lcmd5CiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZWQgdGhlIGNhbXAgc3VjY2Vzc2Z1bGx5LCBhbmQgcm91dGVkIGFuZCBwdXQgdG8gdGhlIHN3b3JkIHRoZSBmb3JjZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZW5lbXkgd2hpY2ggaGFkIGNvbWUgbmVhciB0aGUgY2FtcDogPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4g4oCcT24gdGhlc2UgYWNjb3VudHMgdGhlIHNlbmF0ZSB0aGlua3MgYW5kIGRlY2xhcmVzIHRoYXQgdGhlIFJvbWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGhhcyBiZWVuIHJlbGVhc2VkIGZyb20gdGhlIG1vc3QgZGlzZ3JhY2VmdWwgYW5kIGNydWVsIHNsYXZlcnkgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgdmFsb3IsIGFuZCBtaWxpdGFyeSBza2lsbCwgYW5kIHBydWRlbmNlLCBhbmQgZmlybW5lc3MsIGFuZCBwZXJzZXZlcmFuY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIGdyZWF0bmVzcyBvZiBtaW5kIGFuZCBnb29kIGZvcnR1bmUgb2YgdGhlc2UgdGhlaXIgZ2VuZXJhbHMuIEFuZCBkZWNyZWVzIHRoYXQsIGFzCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYXZlIHByZXNlcnZlZCB0aGUgcmVwdWJsaWMsIHRoZSBjaXR5LCB0aGUgdGVtcGxlcyBvZiB0aGUgaW1tb3J0YWwgZ29kcywKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHkgYW5kIGZvcnR1bmVzIGFuZCBmYW1pbGllcyBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBieSB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBleGVydGlvbnMgaW4gYmF0dGxlLCBhbmQgYXQgdGhlIHJpc2sgb2YgdGhlaXIgb3duIGxpdmVzOyBvbiBhY2NvdW50IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdmlydHVvdXMgYW5kIGdhbGxhbnQgYW5kIHN1Y2Nlc3NmdWwgYWNoaWV2ZW1lbnRzLCBDYWl1cyBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cywKICAgICAgICAgICAgICAgICAgICB0aGUgY29uc3VscywgaW1wZXJhdG9ycywgb25lIG9yIGJvdGggb2YgdGhlbSwgb3IsIGluIHRoZWlyIGFic2VuY2UsIE1hcmN1cwogICAgICAgICAgICAgICAgICAgIENvcm51dHVzLCB0aGUgY2l0eSBwcmFldG9yLCBzaGFsbCBhcHBvaW50IGEgc3VwcGxpY2F0aW9uIGF0IGFsbCB0aGUgYWx0YXJzIGZvcgogICAgICAgICAgICAgICAgICAgIGZpZnR5IGRheXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFzIHRoZSB2YWxvciBvZiB0aGUgbGVnaW9ucwogICAgICAgICAgICAgICAgICAgIGhhcyBzaG93biBpdHNlbGYgd29ydGh5IG9mIHRoZWlyIG1vc3QgaWxsdXN0cmlvdXMgZ2VuZXJhbHMsIHRoZSBzZW5hdGUgd2lsbCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZWFnZXJuZXNzLCBub3cgdGhhdCB0aGUgcmVwdWJsaWMgaXMgcmVjb3ZlcmVkLCBiZXN0b3cgb24gb3VyIGxlZ2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgYXJtaWVzIGFsbCB0aGUgcmV3YXJkcyB3aGljaCBpdCBmb3JtZXJseSBwcm9taXNlZCB0aGVtLiBBbmQgYXMgdGhlIE1hcnRpYWwKICAgICAgICAgICAgICAgICAgICBsZWdpb24gd2FzIHRoZSBmaXJzdCB0byBlbmdhZ2Ugd2l0aCB0aGUgZW5lbXksIGFuZCBmb3VnaHQgaW4gc3VjaCBhIG1hbm5lcgogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgc3VwZXJpb3IgbnVtYmVycyBhcyB0byBzbGF5IG1hbnkgYW5kIHRha2Ugc29tZSBwcmlzb25lcnM7IGFuZCBhcyB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2hlZCB0aGVpciBibG9vZCBmb3IgdGhlaXIgY291bnRyeSB3aXRob3V0IGFueSBzaHJpbmtpbmc7IGFuZCBhcyB0aGUgc29sZGllcnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgbGVnaW9ucyBlbmNvdW50ZXJlZCBkZWF0aCB3aXRoIHNpbWlsYXIgdmFsb3IgaW4gZGVmZW5zZSBvZiB0aGUgc2FmZXR5CiAgICAgICAgICAgICAgICAgICAgYW5kIGZyZWVkb20gb2YgdGhlIFJvbWFuIHBlb3BsZTvigJR0aGUgc2VuYXRlIGRvZXMgZGVjcmVlIHRoYXQgQ2FpdXMKICAgICAgICAgICAgICAgICAgICBQYW5zYSBhbmQgQXVsdXMgSGlydGl1cywgdGhlIGNvbnN1bHMsIGltcGVyYXRvcnMsIG9uZSBvciBib3RoIG9mIHRoZW0gaWYgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcyBnb29kIHRvIHRoZW0sIHNoYWxsIHNlZSB0byB0aGUgaXNzdWluZyBvZiBhIGNvbnRyYWN0IGZvciwgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGVyZWN0aW5nLCB0aGUgbW9zdCBob25vcmFibGUgcG9zc2libGUgbW9udW1lbnQgdG8gdGhvc2UgbWVuIHdobyBzaGVkIHRoZWlyIGJsb29kCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBsaXZlcyBhbmQgbGliZXJ0aWVzIGFuZCBmb3J0dW5lcyBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgZm9yIHRoZSBjaXR5CiAgICAgICAgICAgICAgICAgICAgYW5kIHRlbXBsZXMgb2YgdGhlIGltbW9ydGFsIGdvZHM7IHRoYXQgZm9yIHRoYXQgcHVycG9zZSB0aGV5IHNoYWxsIG9yZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgcXVhZXN0b3JzIHRvIGZ1cm5pc2ggYW5kIHBheSBtb25leSwgaW4gb3JkZXIgdGhhdCBpdCBtYXkgYmUgd2l0bmVzcyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZXZlcmxhc3RpbmcgcmVjb2xsZWN0aW9uIG9mIHBvc3Rlcml0eSBvZiB0aGUgd2lja2VkbmVzcyBvZiBvdXIgbW9zdCBjcnVlbAogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMsIGFuZCB0aGUgZ29kbGlrZSB2YWxvciBvZiBvdXIgc29sZGllcnMuIEFuZCB0aGF0IHRoZSByZXdhcmRzIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHNlbmF0ZSBwcmV2aW91c2x5IGFwcG9pbnRlZCBmb3IgdGhlIHNvbGRpZXJzLCBiZSBwYWlkIHRvIHRoZSBwYXJlbnRzIG9yIGNoaWxkcmVuCiAgICAgICAgICAgICAgICAgICAgb3Igd2l2ZXMgb3IgYnJvdGhlcnMgb2YgdGhvc2UgbWVuIHdobyBpbiB0aGlzIHdhciBoYXZlIGZhbGxlbiBpbiBkZWZlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeTsgYW5kIHRoYXQgYWxsIGhvbm91cnMgYmUgYmVzdG93ZWQgb24gdGhlbSB3aGljaCBzaG91bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgYmVzdG93ZWQgb24gdGhlIHNvbGRpZXJzIHRoZW1zZWx2ZXMgaWYgdGhvc2UgbWVuIGhhZCBsaXZlZCB3aG8gZ2FpbmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHZpY3RvcnkgdGhlbiBieSBkZWF0aC7igJ08L3A+CgkJCTwvdHJhbnNsYXRpb24+"
