var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb24sIGhvd2V2ZXIsIGFwcGVhcnMgdG8gaGF2ZSBhY3F1aXJlZCBieSBoaXMgb3duIGVmZm9ydHMsIG5vdCBvbmx5IGFybXMgYW5kIHZlc3NlbHMgYW5kIGEgbWlsaXRhcnkgZm9yY2UsIGJ1dCBhbHNvIGZyaWVuZHMgYW5kIGNvLXdvcmtlcnMgZm9yIGhpcyBlbnRlcnByaXNlLiBIb3dldmVyLCBEaW9uIGRpZCBub3QsIGxpa2UgQnJ1dHVzLCB3aW4gd2VhbHRoIGFuZCBwb3dlciBmcm9tIHRoZSBjb3Vyc2Ugb2YgdGhlIHdhciBpdHNlbGYsIG5heSwgaGUgY29udHJpYnV0ZWQgaGlzIG93biB3ZWFsdGggZm9yIHRoZSB3YXIsIGV4cGVuZGluZyBpbiBiZWhhbGYgb2YgdGhlIGxpYmVydHkgb2YgaGlzIGNvdW50cnltZW4gdGhvc2UgcmVzb3VyY2VzIHdoaWNoIHN1cHBvcnRlZCBoaW0gaW4gaGlzIGV4aWxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCBpdCB3YXMgbm90IHNhZmUgZm9yIEJydXR1cyBhbmQgQ2Fzc2l1cyB0byBrZWVwIHF1aWV0IGFmdGVyIHRoZWlyIGJhbmlzaG1lbnQgZnJvbSBSb21lLCBidXQgc2luY2UgdGhleSB3ZXJlIGNvbmRlbW5lZCB0byBkZWF0aCBhbmQgcHVyc3VlZCwgaXQgd2FzIG9mIG5lY2Vzc2l0eSB0aGF0IHRoZXkgcmVzb3J0ZWQgdG8gd2FyOyBhbmQgaW4gY29tbWl0dGluZyB0aGVpciBwZXJzb25zIHRvIHRoZSBwcm90ZWN0aW9uIG9mIHRoZWlyIGFybXMgdGhleSBpbmN1cnJlZCBkYW5nZXIgaW4gdGhlaXIgb3duIGJlaGFsZiByYXRoZXIgdGhhbiBpbiBiZWhhbGYgb2YgdGhlaXIgY291bnRyeW1lbjsgd2hlcmVhcyBEaW9uIHdhcyBsaXZpbmcgd2l0aCBncmVhdGVyIGNvbmZpZGVuY2UgYW5kIHBsZWFzdXJlIGluIGhpcyBiYW5pc2htZW50IHRoYW4gdGhlIHR5cmFudCB3aG8gYmFuaXNoZWQgaGltLCBhbmQgeWV0IG9mIGhpcyBvd24gYWNjb3JkIGhlIGhhemFyZGVkIGEgcGVyaWwgc28gZ3JlYXQgaW4gb3JkZXIgdG8gc2F2ZSBTaWNpbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHZlcmlseSBpdCB3YXMgbm90IGEgbGlrZSB0aGluZyBmb3IgU3lyYWN1c2UgdG8gYmUgcmlkIG9mIERpb255c2l1cyBhbmQgUm9tZSBvZiBDYWVzYXIuIEZvciBEaW9ueXNpdXMgd2FzIGV2ZW4gYW4gYXZvd2VkIHR5cmFudCwgYW5kIGZpbGxlZCBTaWNpbHkgd2l0aCBjb3VudGxlc3MgaWxsczsgd2hlcmVhcyB0aGUgcnVsZSBvZiBDYWVzYXIsIGFsdGhvdWdoIGR1cmluZyBpdHMgZXN0YWJsaXNobWVudCBpdCBnYXZlIG5vIGxpdHRsZSB0cm91YmxlIHRvIGl0cyBvcHBvbmVudHMsIHN0aWxsLCBhZnRlciB0aGV5IGhhZCBiZWVuIG92ZXJwb3dlcmVkIGFuZCBoYWQgYWNjZXB0ZWQgaXQsIHRoZXkgc2F3IHRoYXQgaXQgd2FzIGEgdHlyYW5ueSBvbmx5IGluIG5hbWUgYW5kIGFwcGVhcmFuY2UsIGFuZCBubyBjcnVlbCBvciB0eXJhbm5pY2FsIGFjdCB3YXMgYXV0aG9yaXplZCBieSBpdDsgbmF5LCBpdCB3YXMgcGxhaW4gdGhhdCB0aGUgaWxscyBvZiB0aGUgc3RhdGUgcmVxdWlyZWQgYSBtb25hcmNoeSwgYW5kIHRoYXQgQ2Flc2FyLCBsaWtlIGEgbW9zdCBnZW50bGUgcGh5c2ljaWFuLCBoYWQgYmVlbiBhc3NpZ25lZCB0byB0aGVtIGJ5IEhlYXZlbiBpdHNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGUgUm9tYW4gcGVvcGxlIGZlbHQgYXQgb25jZSBhIHllYXJuaW5nIGZvciBDYWVzYXIsIGFuZCBpbiBjb25zZXF1ZW5jZSBiZWNhbWUgaGFyc2ggYW5kIGltcGxhY2FibGUgdG93YXJkcyBoaXMgbXVyZGVyZXJzOyB3aGVyZWFzIERpb24sIGZvciBsZXR0aW5nIERpb255c2l1cyBlc2NhcGUgZnJvbSBTeXJhY3VzZSwgYW5kIGZvciBub3QgZGVtb2xpc2hpbmcgdGhlIHRvbWIgb2YgdGhlIGZvcm1lciB0eXJhbnQsIHdhcyBoZWxkIG1vc3QgY3VscGFibGUgYnkgaGlzIGNvdW50cnltZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdmVyaWx5IGl0IHdhcyBub3QgYSBsaWtlIHRoaW5nIGZvciBTeXJhY3VzZSB0byBiZSByaWQgb2YgRGlvbnlzaXVzIGFuZCBSb21lIG9mIENhZXNhci4gRm9yIERpb255c2l1cyB3YXMgZXZlbiBhbiBhdm93ZWQgdHlyYW50LCBhbmQgZmlsbGVkIFNpY2lseSB3aXRoIGNvdW50bGVzcyBpbGxzOyB3aGVyZWFzIHRoZSBydWxlIG9mIENhZXNhciwgYWx0aG91Z2ggZHVyaW5nIGl0cyBlc3RhYmxpc2htZW50IGl0IGdhdmUgbm8gbGl0dGxlIHRyb3VibGUgdG8gaXRzIG9wcG9uZW50cywgc3RpbGwsIGFmdGVyIHRoZXkgaGFkIGJlZW4gb3ZlcnBvd2VyZWQgYW5kIGhhZCBhY2NlcHRlZCBpdCwgdGhleSBzYXcgdGhhdCBpdCB3YXMgYSB0eXJhbm55IG9ubHkgaW4gbmFtZSBhbmQgYXBwZWFyYW5jZSwgYW5kIG5vIGNydWVsIG9yIHR5cmFubmljYWwgYWN0IHdhcyBhdXRob3JpemVkIGJ5IGl0OyBuYXksIGl0IHdhcyBwbGFpbiB0aGF0IHRoZSBpbGxzIG9mIHRoZSBzdGF0ZSByZXF1aXJlZCBhIG1vbmFyY2h5LCBhbmQgdGhhdCBDYWVzYXIsIGxpa2UgYSBtb3N0IGdlbnRsZSBwaHlzaWNpYW4sIGhhZCBiZWVuIGFzc2lnbmVkIHRvIHRoZW0gYnkgSGVhdmVuIGl0c2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGUgUm9tYW4gcGVvcGxlIGZlbHQgYXQgb25jZSBhIHllYXJuaW5nIGZvciBDYWVzYXIsIGFuZCBpbiBjb25zZXF1ZW5jZSBiZWNhbWUgaGFyc2ggYW5kIGltcGxhY2FibGUgdG93YXJkcyBoaXMgbXVyZGVyZXJzOyB3aGVyZWFzIERpb24sIGZvciBsZXR0aW5nIERpb255c2l1cyBlc2NhcGUgZnJvbSBTeXJhY3VzZSwgYW5kIGZvciBub3QgZGVtb2xpc2hpbmcgdGhlIHRvbWIgb2YgdGhlIGZvcm1lciB0eXJhbnQsIHdhcyBoZWxkIG1vc3QgY3VscGFibGUgYnkgaGlzIGNvdW50cnltZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgYXMgcmVnYXJkcyB0aGVpciBhY3R1YWwgbWlsaXRhcnkgYWNoaWV2ZW1lbnRzLCBEaW9uIHdhcyBhIGNvbnN1bW1hdGUgZ2VuZXJhbDsgd2hlcmUgaGUgaGltc2VsZiBtYWRlIHRoZSBwbGFucywgaGUgYWNoaWV2ZWQgdGhlIGJlc3QgcmVzdWx0cywgYW5kIHdoZXJlIGZhaWx1cmUgd2FzIGR1ZSB0byBvdGhlcnMsIGhlIHJlc3RvcmVkIGFuZCBiZXR0ZXJlZCB0aGUgc2l0dWF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CcnV0dXMsIG9uIHRoZSBvdGhlciBoYW5kLCBhcyBpdCBzZWVtcywgd2FzIHVud2lzZSBpbiBlbnRlcmluZyB1cG9uIHRoZSBsYXN0IHN1cHJlbWUgc3RydWdnbGUsIGFuZCB3aGVuIGhlIHdhcyBkZWZlYXRlZCwgY291bGQgbm90IGZpbmQgYSB3YXkgdG8gcmVzdG9yZSBoaXMgY2F1c2UsIGJ1dCBnYXZlIHVwIGFuZCBhYmFuZG9uZWQgaGlzIGhvcGVzLCBub3QgZXZlbiBmYWNpbmcgYWR2ZXJzZSBmb3J0dW5lIHdpdGggYXMgbXVjaCByZXNvbHV0aW9uIGFzIFBvbXBleSwgYW5kIHRoYXQgdG9vIGFsdGhvdWdoIG9uIGxhbmQgaGUgaGFkIG11Y2ggZ3JvdW5kIGZvciBjb25maWRlbmNlIGxlZnQgaW4gaGlzIHRyb29wcywgYW5kIHdpdGggaGlzIGZsZWV0IHdhcyBzZWN1cmUgbWFzdGVyIG9mIGFsbCB0aGUgc2VhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0LCBhcyByZWdhcmRzIHRoZWlyIGFjdHVhbCBtaWxpdGFyeSBhY2hpZXZlbWVudHMsIERpb24gd2FzIGEgY29uc3VtbWF0ZSBnZW5lcmFsOyB3aGVyZSBoZSBoaW1zZWxmIG1hZGUgdGhlIHBsYW5zLCBoZSBhY2hpZXZlZCB0aGUgYmVzdCByZXN1bHRzLCBhbmQgd2hlcmUgZmFpbHVyZSB3YXMgZHVlIHRvIG90aGVycywgaGUgcmVzdG9yZWQgYW5kIGJldHRlcmVkIHRoZSBzaXR1YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJydXR1cywgb24gdGhlIG90aGVyIGhhbmQsIGFzIGl0IHNlZW1zLCB3YXMgdW53aXNlIGluIGVudGVyaW5nIHVwb24gdGhlIGxhc3Qgc3VwcmVtZSBzdHJ1Z2dsZSwgYW5kIHdoZW4gaGUgd2FzIGRlZmVhdGVkLCBjb3VsZCBub3QgZmluZCBhIHdheSB0byByZXN0b3JlIGhpcyBjYXVzZSwgYnV0IGdhdmUgdXAgYW5kIGFiYW5kb25lZCBoaXMgaG9wZXMsIG5vdCBldmVuIGZhY2luZyBhZHZlcnNlIGZvcnR1bmUgd2l0aCBhcyBtdWNoIHJlc29sdXRpb24gYXMgUG9tcGV5LCBhbmQgdGhhdCB0b28gYWx0aG91Z2ggb24gbGFuZCBoZSBoYWQgbXVjaCBncm91bmQgZm9yIGNvbmZpZGVuY2UgbGVmdCBpbiBoaXMgdHJvb3BzLCBhbmQgd2l0aCBoaXMgZmxlZXQgd2FzIHNlY3VyZSBtYXN0ZXIgb2YgYWxsIHRoZSBzZWEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZ3JhdmVzdCBjaGFyZ2Ugd2hpY2ggaXMgYnJvdWdodCBhZ2FpbnN0IEJydXR1cywgbmFtZWx5LCB0aGF0IGFsdGhvdWdoIGhpcyBsaWZlIHdhcyBzcGFyZWQgYnkgdGhlIGtpbmRuZXNzIG9mIENhZXNhciwgdG9nZXRoZXIgd2l0aCB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBmZWxsb3cgY2FwdGl2ZXMgZm9yIHdob20gaGUgd2lzaGVkIHRvIGludGVyY2VkZSwgYW5kIGFsdGhvdWdoIENhZXNhciBoZWxkIGhpbSBhIGZyaWVuZCBhbmQgaG9ub3VyZWQgaGltIGFib3ZlIG1hbnksIGhlIHN0cnVjayBkb3duIGhpcyBwcmVzZXJ2ZXIgd2l0aCBoaXMgb3duIGhhbmQs4oCUdGhpcyBjaGFyZ2Ugbm8gb25lIGNhbiBicmluZyBhZ2FpbnN0IERpb24uIE9uIHRoZSBjb250cmFyeSwgd2hpbGUgaGUgd2FzIGEgY291cnRpZXIgYW5kIGZyaWVuZCBvZiBEaW9ueXNpdXMsIGhlIHRyaWVkIHRvIHNldCB0aGUgc3RhdGUgaW4gb3JkZXIgYW5kIGhlbHAgaW4gcHJlc2VydmluZyBpdDsgYnV0IHdoZW4gaGUgaGFkIGJlZW4gYmFuaXNoZWQgZnJvbSBoaXMgY291bnRyeSwgd3JvbmdlZCBhcyBhIGh1c2JhbmQsIGFuZCBkZXByaXZlZCBvZiBoaXMgcHJvcGVydHksIGhlIG9wZW5seSByZXNvcnRlZCB0byBhIHdhciB0aGF0IHdhcyBsYXdmdWwgYW5kIGp1c3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvZXMgdGhpcyBhcmd1bWVudCByZXZlcnNlIGl0c2VsZiBhdCBvbmNlPyBGb3IgdGhhdCB3aGljaCByZWRvdW5kcyB0byB0aGUgcHJhaXNlIG9mIGJvdGggbWVuIGlzIHRoZWlyIGhvc3RpbGl0eSB0byB0eXJhbnRzIGFuZCBoYXRyZWQgb2YgdGhlaXIgYmFzZW5lc3MsIGFuZCB0aGlzIGlzIGRpc2ludGVyZXN0ZWQgYW5kIHNpbmNlcmUgaW4gdGhlIGNhc2Ugb2YgQnJ1dHVzLCBzaW5jZSB3aXRob3V0IGFueSBwcml2YXRlIGdyaWV2YW5jZSBhZ2FpbnN0IENhZXNhciBoZSByaXNrZWQgaGlzIGxpZmUgZm9yIHRoZSBjb21tb24gbGliZXJ0eTsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcywgaGFkIG5vdCBEaW9uIGhpbXNlbGYgYmVlbiBtaXN0cmVhdGVkLCBoZSB3b3VsZCBub3QgaGF2ZSBnb25lIHRvIHdhci4gQW5kIHRoaXMgaXMgbWFkZSBtYW5pZmVzdCBieSB0aGUgbGV0dGVycyBvZiBQbGF0bywgZnJvbSB3aGljaCBpdCBpcyBjbGVhciB0aGF0IERpb24gZGlkIG5vdCByZXZvbHQsIGJ1dCB3YXMgY2FzdCBvdXQgZnJvbSB0aGUgdHlyYW5ueSwgYW5kIHRoZXJlZm9yZSBvdmVydGhyZXcgRGlvbnlzaXVzLiBTdGlsbCBmdXJ0aGVyLCBpdCB3YXMgdGhlIHB1YmxpYyBnb29kIHRoYXQgbWFkZSBCcnV0dXMgYSBmcmllbmQgZXZlbiB0byBQb21wZXksIHdobyB3YXMgaGlzIGZvZSwgYW5kIGFuIGVuZW15IHRvIENhZXNhciwgc2luY2UgaGUgZGV0ZXJtaW5lZCBib3RoIGhhdHJlZCBhbmQgZnJpZW5kc2hpcCBieSBqdXN0aWNlIGFsb25lOyBEaW9uLCBvbiB0aGUgb3RoZXIgaGFuZCwgZ2F2ZSBEaW9ueXNpdXMgbXVjaCBzdXBwb3J0IGluIG9yZGVyIHRvIHdpbiBoaXMgZmF2b3VyLCB3aGVuIGhlIHdhcyBzZWN1cmUgaW4gaGlzIGNvbmZpZGVuY2UsIGFuZCB3aGVuIGhlIHdhcyBkaXNjcmVkaXRlZCBieSBoaW0sIGl0IHdhcyB0byBncmF0aWZ5IGFuZ2VyIHRoYXQgaGUgd2VudCB0byB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBEaW9uIHdhcyBub3QgdHJ1c3RlZCBldmVuIGJ5IGFsbCBoaXMgZnJpZW5kcywgd2hvIGZlbHQgdGhhdCBhZnRlciByZW1vdmluZyBEaW9ueXNpdXMgaGUgbWlnaHQgc2VjdXJlIHRoZSBnb3Zlcm5tZW50IGZvciBoaW1zZWxmLCBlbnRpY2luZyBoaXMgY291bnRyeW1lbiBhbG9uZyBieSBzb21lIG1pbGRlciBuYW1lIHRoYW4gdGhhdCBvZiB0eXJhbm55OyBidXQgdGhlIGVuZW1pZXMgb2YgQnJ1dHVzIHdlcmUgd29udCB0byBzYXkgdGhhdCBvZiBhbGwgdGhlIGNvbnNwaXJhdG9ycyBhZ2FpbnN0IENhZXNhciBoZSBhbG9uZSBoYWQgb25lIGFpbSBmcm9tIGZpcnN0IHRvIGxhc3QsIG5hbWVseSB0aGUgcmVzdG9yYXRpb24gdG8gdGhlIFJvbWFucyBvZiB0aGVpciBhbmNpZW50IGZvcm0gb2YgZ292ZXJubWVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZ3JhdmVzdCBjaGFyZ2Ugd2hpY2ggaXMgYnJvdWdodCBhZ2FpbnN0IEJydXR1cywgbmFtZWx5LCB0aGF0IGFsdGhvdWdoIGhpcyBsaWZlIHdhcyBzcGFyZWQgYnkgdGhlIGtpbmRuZXNzIG9mIENhZXNhciwgdG9nZXRoZXIgd2l0aCB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBmZWxsb3cgY2FwdGl2ZXMgZm9yIHdob20gaGUgd2lzaGVkIHRvIGludGVyY2VkZSwgYW5kIGFsdGhvdWdoIENhZXNhciBoZWxkIGhpbSBhIGZyaWVuZCBhbmQgaG9ub3VyZWQgaGltIGFib3ZlIG1hbnksIGhlIHN0cnVjayBkb3duIGhpcyBwcmVzZXJ2ZXIgd2l0aCBoaXMgb3duIGhhbmQs4oCUdGhpcyBjaGFyZ2Ugbm8gb25lIGNhbiBicmluZyBhZ2FpbnN0IERpb24uIE9uIHRoZSBjb250cmFyeSwgd2hpbGUgaGUgd2FzIGEgY291cnRpZXIgYW5kIGZyaWVuZCBvZiBEaW9ueXNpdXMsIGhlIHRyaWVkIHRvIHNldCB0aGUgc3RhdGUgaW4gb3JkZXIgYW5kIGhlbHAgaW4gcHJlc2VydmluZyBpdDsgYnV0IHdoZW4gaGUgaGFkIGJlZW4gYmFuaXNoZWQgZnJvbSBoaXMgY291bnRyeSwgd3JvbmdlZCBhcyBhIGh1c2JhbmQsIGFuZCBkZXByaXZlZCBvZiBoaXMgcHJvcGVydHksIGhlIG9wZW5seSByZXNvcnRlZCB0byBhIHdhciB0aGF0IHdhcyBsYXdmdWwgYW5kIGp1c3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvZXMgdGhpcyBhcmd1bWVudCByZXZlcnNlIGl0c2VsZiBhdCBvbmNlPyBGb3IgdGhhdCB3aGljaCByZWRvdW5kcyB0byB0aGUgcHJhaXNlIG9mIGJvdGggbWVuIGlzIHRoZWlyIGhvc3RpbGl0eSB0byB0eXJhbnRzIGFuZCBoYXRyZWQgb2YgdGhlaXIgYmFzZW5lc3MsIGFuZCB0aGlzIGlzIGRpc2ludGVyZXN0ZWQgYW5kIHNpbmNlcmUgaW4gdGhlIGNhc2Ugb2YgQnJ1dHVzLCBzaW5jZSB3aXRob3V0IGFueSBwcml2YXRlIGdyaWV2YW5jZSBhZ2FpbnN0IENhZXNhciBoZSByaXNrZWQgaGlzIGxpZmUgZm9yIHRoZSBjb21tb24gbGliZXJ0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMsIGhhZCBub3QgRGlvbiBoaW1zZWxmIGJlZW4gbWlzdHJlYXRlZCwgaGUgd291bGQgbm90IGhhdmUgZ29uZSB0byB3YXIuIEFuZCB0aGlzIGlzIG1hZGUgbWFuaWZlc3QgYnkgdGhlIGxldHRlcnMgb2YgUGxhdG8sIGZyb20gd2hpY2ggaXQgaXMgY2xlYXIgdGhhdCBEaW9uIGRpZCBub3QgcmV2b2x0LCBidXQgd2FzIGNhc3Qgb3V0IGZyb20gdGhlIHR5cmFubnksIGFuZCB0aGVyZWZvcmUgb3ZlcnRocmV3IERpb255c2l1cy4gU3RpbGwgZnVydGhlciwgaXQgd2FzIHRoZSBwdWJsaWMgZ29vZCB0aGF0IG1hZGUgQnJ1dHVzIGEgZnJpZW5kIGV2ZW4gdG8gUG9tcGV5LCB3aG8gd2FzIGhpcyBmb2UsIGFuZCBhbiBlbmVteSB0byBDYWVzYXIsIHNpbmNlIGhlIGRldGVybWluZWQgYm90aCBoYXRyZWQgYW5kIGZyaWVuZHNoaXAgYnkganVzdGljZSBhbG9uZTsgRGlvbiwgb24gdGhlIG90aGVyIGhhbmQsIGdhdmUgRGlvbnlzaXVzIG11Y2ggc3VwcG9ydCBpbiBvcmRlciB0byB3aW4gaGlzIGZhdm91ciwgd2hlbiBoZSB3YXMgc2VjdXJlIGluIGhpcyBjb25maWRlbmNlLCBhbmQgd2hlbiBoZSB3YXMgZGlzY3JlZGl0ZWQgYnkgaGltLCBpdCB3YXMgdG8gZ3JhdGlmeSBhbmdlciB0aGF0IGhlIHdlbnQgdG8gd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBEaW9uIHdhcyBub3QgdHJ1c3RlZCBldmVuIGJ5IGFsbCBoaXMgZnJpZW5kcywgd2hvIGZlbHQgdGhhdCBhZnRlciByZW1vdmluZyBEaW9ueXNpdXMgaGUgbWlnaHQgc2VjdXJlIHRoZSBnb3Zlcm5tZW50IGZvciBoaW1zZWxmLCBlbnRpY2luZyBoaXMgY291bnRyeW1lbiBhbG9uZyBieSBzb21lIG1pbGRlciBuYW1lIHRoYW4gdGhhdCBvZiB0eXJhbm55OyBidXQgdGhlIGVuZW1pZXMgb2YgQnJ1dHVzIHdlcmUgd29udCB0byBzYXkgdGhhdCBvZiBhbGwgdGhlIGNvbnNwaXJhdG9ycyBhZ2FpbnN0IENhZXNhciBoZSBhbG9uZSBoYWQgb25lIGFpbSBmcm9tIGZpcnN0IHRvIGxhc3QsIG5hbWVseSB0aGUgcmVzdG9yYXRpb24gdG8gdGhlIFJvbWFucyBvZiB0aGVpciBhbmNpZW50IGZvcm0gb2YgZ292ZXJubWVudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhcGFydCBmcm9tIHRoZXNlIGNvbnNpZGVyYXRpb25zLCB0aGUgc3RydWdnbGUgYWdhaW5zdCBEaW9ueXNpdXMgd2FzIHN1cmVseSB1bmxpa2UgdGhhdCBhZ2FpbnN0IENhZXNhci4gRm9yIERpb255c2l1cyBtdXN0IGhhdmUgYmVlbiBkZXNwaXNlZCBieSBldmVyeSBvbmUgb2YgaGlzIGFzc29jaWF0ZXMsIGRldm90ZWQgYXMgaGUgd2FzIHRvIHdpbmUsIGRpY2UsIGFuZCB3b21lbjsgYnV0IHRvIHBsYW4gdGhlIG92ZXJ0aHJvdyBvZiBDYWVzYXIsIGFuZCBub3cgdG8gZmVhciB0aGUgYWJpbGl0eSwgcG93ZXIsIGFuZCBnb29kIGZvcnR1bmUgb2YgdGhlIG1hbiB3aG9zZSB2ZXJ5IG5hbWUgcm9iYmVkIHRoZSBraW5ncyBvZiBQYXJ0aGlhIGFuZCBJbmRpYSBvZiB0aGVpciBzbGVlcCwgYmV0b2tlbmVkIGFuIGV4dHJhb3JkaW5hcnkgc3Bpcml0LCBhbmQgb25lIHdoaWNoIGZlYXIgY291bGQgbmV2ZXIgaW5kdWNlIHRvIHJlbWl0IGl0cyBsb2Z0eSBwdXJwb3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIERpb24gaGFkIG9ubHkgdG8gYmUgc2VlbiBpbiBTaWNpbHksIGFuZCBtYW55IHRob3VzYW5kcyBqb2luZWQgaGltIGluIGF0dGFja2luZyBEaW9ueXNpdXM7IHdoZXJlYXMgdGhlIGZhbWUgb2YgQ2Flc2FyLCBldmVuIGFmdGVyIGhlIGhhZCBmYWxsZW4sIHN1cHBvcnRlZCBoaXMgZnJpZW5kcywgYW5kIGhpcyBuYW1lIHJhaXNlZCB0aGUgaGVscGxlc3MgYm95IHdobyBhZG9wdGVkIGl0IHRvIGJlIGF0IG9uY2UgdGhlIGZvcmVtb3N0IFJvbWFuLCBhbmQgaGUgd29yZSBpdCBhcyBhIGNoYXJtIGFnYWluc3QgdGhlIHBvd2VyIGFuZCBoYXRyZWQgb2YgQW50b255LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhcGFydCBmcm9tIHRoZXNlIGNvbnNpZGVyYXRpb25zLCB0aGUgc3RydWdnbGUgYWdhaW5zdCBEaW9ueXNpdXMgd2FzIHN1cmVseSB1bmxpa2UgdGhhdCBhZ2FpbnN0IENhZXNhci4gRm9yIERpb255c2l1cyBtdXN0IGhhdmUgYmVlbiBkZXNwaXNlZCBieSBldmVyeSBvbmUgb2YgaGlzIGFzc29jaWF0ZXMsIGRldm90ZWQgYXMgaGUgd2FzIHRvIHdpbmUsIGRpY2UsIGFuZCB3b21lbjsgYnV0IHRvIHBsYW4gdGhlIG92ZXJ0aHJvdyBvZiBDYWVzYXIsIGFuZCBub3cgdG8gZmVhciB0aGUgYWJpbGl0eSwgcG93ZXIsIGFuZCBnb29kIGZvcnR1bmUgb2YgdGhlIG1hbiB3aG9zZSB2ZXJ5IG5hbWUgcm9iYmVkIHRoZSBraW5ncyBvZiBQYXJ0aGlhIGFuZCBJbmRpYSBvZiB0aGVpciBzbGVlcCwgYmV0b2tlbmVkIGFuIGV4dHJhb3JkaW5hcnkgc3Bpcml0LCBhbmQgb25lIHdoaWNoIGZlYXIgY291bGQgbmV2ZXIgaW5kdWNlIHRvIHJlbWl0IGl0cyBsb2Z0eSBwdXJwb3Nlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBEaW9uIGhhZCBvbmx5IHRvIGJlIHNlZW4gaW4gU2ljaWx5LCBhbmQgbWFueSB0aG91c2FuZHMgam9pbmVkIGhpbSBpbiBhdHRhY2tpbmcgRGlvbnlzaXVzOyB3aGVyZWFzIHRoZSBmYW1lIG9mIENhZXNhciwgZXZlbiBhZnRlciBoZSBoYWQgZmFsbGVuLCBzdXBwb3J0ZWQgaGlzIGZyaWVuZHMsIGFuZCBoaXMgbmFtZSByYWlzZWQgdGhlIGhlbHBsZXNzIGJveSB3aG8gYWRvcHRlZCBpdCB0byBiZSBhdCBvbmNlIHRoZSBmb3JlbW9zdCBSb21hbiwgYW5kIGhlIHdvcmUgaXQgYXMgYSBjaGFybSBhZ2FpbnN0IHRoZSBwb3dlciBhbmQgaGF0cmVkIG9mIEFudG9ueS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNob3VsZCBpdCBiZSBvYmplY3RlZCB0aGF0IERpb24gY2FzdCBvdXQgdGhlIHR5cmFudCBvbmx5IGFmdGVyIGdyZWF0IHN0cnVnZ2xlcywgd2hpbGUgQnJ1dHVzIHNsZXcgQ2Flc2FyIHVuYXJtZWQgYW5kIHVuZ3VhcmRlZCwgdGhpcyB2ZXJ5IGNpcmN1bXN0YW5jZSB3YXMgYSByZXN1bHQgb2YgdGhlIGhpZ2hlc3QgYWJpbGl0eSBhbmQgZ2VuZXJhbHNoaXAsIG5hbWVseSwgdGhhdCBhIG1hbiBlbnZlbG9wZWQgaW4gc3VjaCBncmVhdCBwb3dlciBzaG91bGQgYmUgdGFrZW4gdW5hcm1lZCBhbmQgdW5ndWFyZGVkLiBGb3Igbm90IG9uIGEgc3VkZGVuLCBub3IgYWxvbmUsIG9yIHdpdGggYSBmZXcgaGVscGVycyBvbmx5LCBkaWQgaGUgZmFsbCB1cG9uIGhpbSBhbmQgc2xheSBoaW0sIG5heSwgaGlzIHBsYW4gd2FzIGxvbmcgaW4gZm9ybWluZywgYW5kIGhpcyBhdHRhY2sgd2FzIG1hZGUgd2l0aCBtYW55IGhlbHBlcnMsIG5vdCBvbmUgb2Ygd2hvbSBwcm92ZWQgZmFsc2UgdG8gaGltLiBGb3IgZWl0aGVyIGhlIGNob3NlIG91dCBhdCBvbmNlIHRoZSBiZXN0IG1lbiwgb3IgaGlzIGNob2ljZSBvZiB0aGVtIGJlZm9yZSBvdGhlcnMsIGFuZCBoaXMgY29uZmlkZW5jZSBpbiB0aGVtLCBtYWRlIHRoZW0gZ29vZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERpb24gZWl0aGVyIGNob3NlIHVud2lzZWx5IGFuZCBlbnRydXN0ZWQgaGltc2VsZiB0byBiYWQgbWVuLCBvciBlbHNlIHRyZWF0ZWQgdGhlIG1lbiBvZiBoaXMgY2hvaWNlIHNvIGFzIHRvIHR1cm4gdGhlbSBmcm9tIGdvb2QgdG8gYmFkLCBuZWl0aGVyIG9mIHdoaWNoIG1pc3Rha2VzIGEgcHJ1ZGVudCBtYW4gb3VnaHQgdG8gbWFrZS4gQW5kIGluIGZhY3QgUGxhdG8gY2Vuc3VyZXMgaGltIGZvciBjaG9vc2luZyBzdWNoIGZyaWVuZHMgYXMgcHJvdmVkIGhpcyBydWluLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaG91bGQgaXQgYmUgb2JqZWN0ZWQgdGhhdCBEaW9uIGNhc3Qgb3V0IHRoZSB0eXJhbnQgb25seSBhZnRlciBncmVhdCBzdHJ1Z2dsZXMsIHdoaWxlIEJydXR1cyBzbGV3IENhZXNhciB1bmFybWVkIGFuZCB1bmd1YXJkZWQsIHRoaXMgdmVyeSBjaXJjdW1zdGFuY2Ugd2FzIGEgcmVzdWx0IG9mIHRoZSBoaWdoZXN0IGFiaWxpdHkgYW5kIGdlbmVyYWxzaGlwLCBuYW1lbHksIHRoYXQgYSBtYW4gZW52ZWxvcGVkIGluIHN1Y2ggZ3JlYXQgcG93ZXIgc2hvdWxkIGJlIHRha2VuIHVuYXJtZWQgYW5kIHVuZ3VhcmRlZC4gRm9yIG5vdCBvbiBhIHN1ZGRlbiwgbm9yIGFsb25lLCBvciB3aXRoIGEgZmV3IGhlbHBlcnMgb25seSwgZGlkIGhlIGZhbGwgdXBvbiBoaW0gYW5kIHNsYXkgaGltLCBuYXksIGhpcyBwbGFuIHdhcyBsb25nIGluIGZvcm1pbmcsIGFuZCBoaXMgYXR0YWNrIHdhcyBtYWRlIHdpdGggbWFueSBoZWxwZXJzLCBub3Qgb25lIG9mIHdob20gcHJvdmVkIGZhbHNlIHRvIGhpbS4gRm9yIGVpdGhlciBoZSBjaG9zZSBvdXQgYXQgb25jZSB0aGUgYmVzdCBtZW4sIG9yIGhpcyBjaG9pY2Ugb2YgdGhlbSBiZWZvcmUgb3RoZXJzLCBhbmQgaGlzIGNvbmZpZGVuY2UgaW4gdGhlbSwgbWFkZSB0aGVtIGdvb2QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEaW9uIGVpdGhlciBjaG9zZSB1bndpc2VseSBhbmQgZW50cnVzdGVkIGhpbXNlbGYgdG8gYmFkIG1lbiwgb3IgZWxzZSB0cmVhdGVkIHRoZSBtZW4gb2YgaGlzIGNob2ljZSBzbyBhcyB0byB0dXJuIHRoZW0gZnJvbSBnb29kIHRvIGJhZCwgbmVpdGhlciBvZiB3aGljaCBtaXN0YWtlcyBhIHBydWRlbnQgbWFuIG91Z2h0IHRvIG1ha2UuIEFuZCBpbiBmYWN0IFBsYXRvIGNlbnN1cmVzIGhpbSBmb3IgY2hvb3Npbmcgc3VjaCBmcmllbmRzIGFzIHByb3ZlZCBoaXMgcnVpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBubyBvbmUgYXJvc2UgdG8gYXZlbmdlIERpb24ncyBkZWF0aDsgYnV0IGluIHRoZSBjYXNlIG9mIEJydXR1cywgQW50b255LCBhbiBlbmVteSwgZ2F2ZSBoaW0gaWxsdXN0cmlvdXMgYnVyaWFsLCBhbmQgT2N0YXZpdXMsIGFuIGVuZW15LCBhY3R1YWxseSB0b29rIGNhcmUgdG8gcHJlc2VydmUgaGlzIGhvbm91cnMuIEZvciBhIGJyb256ZSBzdGF0dWUgb2YgaGltIHN0b29kIGluIE1lZGlvbGFudW0gaW4gQ2lzYWxwaW5lIEdhdWwuIFRoaXMgc3RhdHVlLCBhdCBhIGxhdGVyIHRpbWUsIE9jdGF2aXVzIG5vdGljZWQgYXMgaGUgcGFzc2VkIGJ5LCBmb3IgaXQgd2FzIGEgZ29vZCBsaWtlbmVzcyBhbmQgYW4gYXJ0aXN0aWMgcGllY2Ugb2Ygd29yazsgdGhlbiBzdG9wcGluZywgYWZ0ZXIgYSBsaXR0bGUsIGluIHRoZSBoZWFyaW5nIG9mIG1hbnkgaGUgc3VtbW9uZWQgdGhlIG1hZ2lzdHJhdGVzIGFuZCBkZWNsYXJlZCB0aGF0IGhlIGhhZCBjYXVnaHQgdGhlaXIgY2l0eSB2aW9sYXRpbmcgaXRzIHRyZWF0eSBhbmQgaGFyYm91cmluZyBhbiBlbmVteSBvZiBoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBhcyB3YXMgbmF0dXJhbCwgdGhleSBkZW5pZWQgaXQsIGFuZCBsb29rZWQgYXQgb25lIGFub3RoZXIgaW4gcGVycGxleGl0eSwgbm90IGtub3dpbmcgd2hhdCBoZSBtZWFudC4gVGhlbiBPY3Rhdml1cywgdHVybmluZyB0byB0aGUgc3RhdHVlIGFuZCBrbml0dGluZyBoaXMgYnJvd3MsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgaXMgbm90IHRoaXMgYW4gZW5lbXkgb2YgbWluZSB3aG8gc3RhbmRzIGhlcmU/PC9xPiBBdCB0aGlzLCB0aGUgbWFnaXN0cmF0ZXMgd2VyZSBzdGlsbCBtb3JlIGR1bWJmb3VuZGVkIGFuZCBoZWxkIHRoZWlyIHBlYWNlLiBCdXQgT2N0YXZpdXMsIHdpdGggYSBzbWlsZSwgcHJhaXNlZCB0aGUgR2F1bHMgYmVjYXVzZSB0aGV5IHdlcmUgdHJ1ZSB0byB0aGVpciBmcmllbmRzIGV2ZW4gaW4gYWR2ZXJzaXR5LCBhbmQgZ2F2ZSBvcmRlcnMgdGhhdCB0aGUgc3RhdHVlIHNob3VsZCByZW1haW4gd2hlcmUgaXQgd2FzLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBubyBvbmUgYXJvc2UgdG8gYXZlbmdlIERpb24ncyBkZWF0aDsgYnV0IGluIHRoZSBjYXNlIG9mIEJydXR1cywgQW50b255LCBhbiBlbmVteSwgZ2F2ZSBoaW0gaWxsdXN0cmlvdXMgYnVyaWFsLCBhbmQgT2N0YXZpdXMsIGFuIGVuZW15LCBhY3R1YWxseSB0b29rIGNhcmUgdG8gcHJlc2VydmUgaGlzIGhvbm91cnMuIEZvciBhIGJyb256ZSBzdGF0dWUgb2YgaGltIHN0b29kIGluIE1lZGlvbGFudW0gaW4gQ2lzYWxwaW5lIEdhdWwuIFRoaXMgc3RhdHVlLCBhdCBhIGxhdGVyIHRpbWUsIE9jdGF2aXVzIG5vdGljZWQgYXMgaGUgcGFzc2VkIGJ5LCBmb3IgaXQgd2FzIGEgZ29vZCBsaWtlbmVzcyBhbmQgYW4gYXJ0aXN0aWMgcGllY2Ugb2Ygd29yazsgdGhlbiBzdG9wcGluZywgYWZ0ZXIgYSBsaXR0bGUsIGluIHRoZSBoZWFyaW5nIG9mIG1hbnkgaGUgc3VtbW9uZWQgdGhlIG1hZ2lzdHJhdGVzIGFuZCBkZWNsYXJlZCB0aGF0IGhlIGhhZCBjYXVnaHQgdGhlaXIgY2l0eSB2aW9sYXRpbmcgaXRzIHRyZWF0eSBhbmQgaGFyYm91cmluZyBhbiBlbmVteSBvZiBoaXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
