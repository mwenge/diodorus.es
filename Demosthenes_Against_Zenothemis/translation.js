var translation={}
translation['32.Intro.1'] = ""
translation['32.Narr.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJOYXJyIiB1bml0PSJwYXJ0IiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBiZXR3ZWVuIHRoaXMgbWFuIFplbm90aGVtaXMgYW5kCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmIHRoZXJlIGhhcyBiZWVuIG5vIGNvbnRyYWN0IG9yIGFncmVlbWVudCBpbiB3cml0aW5nLCBhcyBoZSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VzIGluIGhpcyBjb21wbGFpbnQuIEhlIHN0YXRlcyB0aGF0IGhlIG1hZGUgYSBsb2FuIHRvIEhlZ2VzdHJhdHVzLCBhCiAgICAgICAgICAgICAgICAgICAgc2hpcG93bmVyLCBhbmQgdGhhdCBhZnRlciB0aGUgbGF0dGVyIHdhcyBsb3N0IGF0IHNlYSwgd2UgYXBwcm9wcmlhdGVkIHRoZSBjYXJnby4KICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIGhpcyBjaGFyZ2UgaW4gdGhlIGNvbXBsYWludC4gVGhlIHNhbWUgc3BlZWNoIHdpbGwgc3VmZmljZSB0byBwcm92ZSB0bwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGF0IGhpcyBhY3Rpb24gaXMgbm90IG1haW50YWluYWJsZSwgYW5kIHRvIG1ha2UgeW91IHNlZSB0aGUgd2hvbGUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcGxvdCBhbmQgaGlzIHJhc2NhbGl0eS4gPC90cmFuc2xhdGlvbj4="
translation['32.Narr.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIG9mIHlvdSBhbGwsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCBpZiB5b3UgZXZlciBhdHRlbmRlZCBjbG9zZWx5IHRvIGFueSBtYXR0ZXIsIHRvIGF0dGVuZCB0byB0aGlzLiBZb3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGhlYXIgb2YgYSBtYW4ncyBhdWRhY2l0eSBhbmQgdmlsbGFpbnkgdGhhdCBnbyBiZXlvbmQgYWxsIGJvdW5kcywgcHJvdmlkZWQgSQogICAgICAgICAgICAgICAgICAgIGFtIGFibGUsIGFzIEkgaG9wZSB0byBiZSwgdG8gdGVsbCB5b3UgdGhlIHdob2xlIHRhbGUgb2Ygd2hhdCBoZSBoYXMgZG9uZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.Narr.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5aZW5vdGhlbWlzLAogICAgICAgICAgICAgICAgICAgIHdobyBpcyBoZXJlIGJlZm9yZSB5b3UsIGJlaW5nIGFuIHVuZGVybGluZyBvZiBIZWdlc3RyYXR1cywgdGhlIHNoaXBvd25lciwgd2hvIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBpbiBoaXMgY29tcGxhaW50IHN0YXRlcyB0byBoYXZlIGJlZW4gbG9zdCBhdCBzZWEg77yIaG93LCBoZSBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IGFkZCwgYnV0IEkgd2lsbCB0ZWxsIHlvde+8iSwgY29uY29jdGVkIHdpdGggaGltIHRoZSBmb2xsb3dpbmcgZnJhdWQuCiAgICAgICAgICAgICAgICAgICAgQm90aCBvZiB0aGVtIGJvcnJvd2VkIG1vbmV5IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3lyYWN1c2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN5cmFjdXNlIj5TeXJhY3VzZTwvcGxhY2VOYW1lPi4gSGVnZXN0cmF0dXMgYWRtaXR0ZWQgdG8gdGhvc2UgbGVuZGluZyBtb25leSB0bwogICAgICAgICAgICAgICAgICAgIFplbm90aGVtaXMsIGlmIGlucXVpcmllcyB3ZXJlIG1hZGUsIHRoYXQgdGhlcmUgd2FzIG9uIGJvYXJkIHRoZSBzaGlwIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBhbW91bnQgb2YgZ3JhaW4gYmVsb25naW5nIHRvIHRoZSBsYXR0ZXI7IGFuZCB0aGUgcGxhaW50aWZmIGFkbWl0dGVkIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgbGVuZGluZyBtb25leSB0byBIZWdlc3RyYXR1cyB0aGF0IHRoZSBjYXJnbyBvZiB0aGUgc2hpcCB3YXMgaGlzLiBBcyBvbmUgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXBvd25lciBhbmQgdGhlIG90aGVyIGEgcGFzc2VuZ2VyLCB0aGV5IHdlcmUgbmF0dXJhbGx5IGJlbGlldmVkIGluIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIHNhaWQgb2Ygb25lIGFub3RoZXIuIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbW1lZGlhdGVseSBvbiBnZXR0aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5LCB0aGV5IHNlbnQgaXQgaG9tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXNzYWxpYTwvcGxhY2VOYW1lPiwgYW5kIHB1dCBub3RoaW5nIG9uIGJvYXJkIHRoZSBzaGlwLiBUaGUgYWdyZWVtZW50CiAgICAgICAgICAgICAgICAgICAgYmVpbmcsIGFzIGlzIHVzdWFsIGluIGFsbCBzdWNoIGNhc2VzLCB0aGF0IHRoZSBtb25leSB3YXMgdG8gYmUgcGFpZCBiYWNrIGlmIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXAgcmVhY2hlZCBwb3J0IHNhZmVseSwgdGhleSBsYWlkIGEgcGxvdCB0byBzaW5rIHRoZSBzaGlwLCB0aGF0IHNvIHRoZXkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBkZWZyYXVkIHRoZWlyIGNyZWRpdG9ycy4gSGVnZXN0cmF0dXMsIGFjY29yZGluZ2x5LCB3aGVuIHRoZXkgd2VyZSB0d28gb3IgdGhyZWUKICAgICAgICAgICAgICAgICAgICBkYXlzJyB2b3lhZ2UgZnJvbSBsYW5kLCB3ZW50IGRvd24gYnkgbmlnaHQgaW50byB0aGUgaG9sZCBvZiB0aGUgdmVzc2VsLCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBjdXQgYSBob2xlIGluIHRoZSBzaGlwJ3MgYm90dG9tLCB3aGlsZSBaZW5vdGhlbWlzLCBhcyB0aG91Z2gga25vd2luZwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgYWJvdXQgaXQsIHJlbWFpbmVkIG9uIGRlY2sgd2l0aCB0aGUgcmVzdCBvZiB0aGUgcGFzc2VuZ2Vycy4gV2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBub2lzZSB3YXMgaGVhcmQsIHRob3NlIG9uIHRoZSB2ZXNzZWwgc2F3IHRoYXQgc29tZXRoaW5nIHdyb25nIHdhcyBnb2luZyBvbiBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBob2xkLCBhbmQgcnVzaGVkIGRvd24gdG8gYmVhciBhaWQuIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlZ2VzdHJhdHVzLCBiZWluZyBjYXVnaHQgaW4gdGhlIGFjdCwgYW5kIGV4cGVjdGluZyB0byBwYXkgdGhlIHBlbmFsdHksIHRvb2sKICAgICAgICAgICAgICAgICAgICB0byBmbGlnaHQsIGFuZCwgaG90bHkgcHVyc3VlZCBieSB0aGUgb3RoZXJzLCBmbHVuZyBoaW1zZWxmIGludG8gdGhlIHNlYS4gSXQgd2FzCiAgICAgICAgICAgICAgICAgICAgZGFyaywgYW5kIGhlIG1pc3NlZCB0aGUgc2hpcCdzIGJvYXQsIGFuZCBzbyB3YXMgZHJvd25lZC4gVGh1cywgbWlzZXJhYmxlIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzLCBoZSBtZXQgYSBtaXNlcmFibGUgZW5kIGFzIGhlIGRlc2VydmVkLCBzdWZmZXJpbmcgdGhlIGZhdGUgd2hpY2ggaGUgcHVycG9zZWQKICAgICAgICAgICAgICAgICAgICB0byBicmluZyBhYm91dCBmb3Igb3RoZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['32.Narr.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGlzIGZlbGxvdywKICAgICAgICAgICAgICAgICAgICBoaXMgYXNzb2NpYXRlIGFuZCBhY2NvbXBsaWNlLCBhdCB0aGUgZmlyc3Qgb24gYm9hcmQgdGhlIHNoaXAgaW1tZWRpYXRlbHkgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgYXR0ZW1wdGVkIGNyaW1lLCBqdXN0IGFzIHRob3VnaCBoZSBrbmV3IG5vdGhpbmcgb2YgaXQgYnV0IHdhcyBoaW1zZWxmIGluCiAgICAgICAgICAgICAgICAgICAgdXR0ZXIgY29uc3Rlcm5hdGlvbiwgaGUgc291Z2h0IHRvIGluZHVjZSB0aGUgc2FpbGluZy1tYXN0ZXIgYW5kIHRoZSBzZWFtZW4gdG8KICAgICAgICAgICAgICAgICAgICBlbWJhcmsgaW4gdGhlIGJvYXQgYW5kIGFiYW5kb24gdGhlIHZlc3NlbCB3aXRoIGFsbCBzcGVlZCwgZGVjbGFyaW5nIHRoYXQgdGhlcmUKICAgICAgICAgICAgICAgICAgICB3YXMgbm8gaG9wZSBvZiBzYWZldHkgYW5kIHRoYXQgdGhlIHNoaXAgd291bGQgcHJlc2VudGx5IHNpbms7IHRoaW5raW5nIHRoYXQgdGh1cwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlc2lnbiBtaWdodCBiZSBhY2NvbXBsaXNoZWQsIHRoZSBzaGlwIGJlIGxvc3QsIGFuZCB0aGUgY3JlZGl0b3JzIHRodXMgYmUKICAgICAgICAgICAgICAgICAgICByb2JiZWQgb2YgdGhlaXIgbW9uZXkuIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgaGUgZmFpbGVkLCBmb3IKICAgICAgICAgICAgICAgICAgICBvdXIgYWdlbnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByZXN1bWFibHkgUHJvdHVzLCB3aG8gc2VlbXMgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBzYWlsZWQgYXMgc3VwZXJjYXJnby48L25vdGU+IHdobyB3YXMgb24gYm9hcmQsIG9wcG9zZWQgdGhlIHBsYW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHByb21pc2VkIHRoZSBzYWlsb3JzIGxhcmdlIHJld2FyZHMgaWYgdGhleSBzaG91bGQgYnJpbmcgdGhlIHNoaXAgc2FmZSBpbnRvIHBvcnQuCiAgICAgICAgICAgICAgICAgICAgVGhlIHNoaXAgc2FmZWx5IGJyb3VnaHQgdG8gQ2VwaGFsbGVuaWEsIHRoYW5rcyBjaGllZmx5IHRvIHRoZSBnb2RzLCBhbmQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIHRoZSBicmF2ZXJ5IG9mIHRoZSBzZWFtZW4uIEFnYWluIGFmdGVyIHRoaXMgaGUgc2NoZW1lZCB0b2dldGhlciB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIE1hc3NhbGlvdGVzLCB0aGUgZmVsbG93LWNvdW50cnltZW4gb2YgSGVnZXN0cmF0dXMsIHRvIHByZXZlbnQgdGhlIHZlc3NlbCBmcm9tCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGluZyBoZXIgdm95YWdlIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBzYXlpbmcgdGhhdCBoZSBoaW1zZWxmIHdhcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3ODEiPk1hc3NhbGlhPC9wbGFjZU5hbWU+OyB0aGF0IHRoZSBtb25leSBjYW1lIGZyb20gdGhlbmNlOyBhbmQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwb3duZXIgYW5kIHRoZSBsZW5kZXJzIHdlcmUgTWFzc2FsaW90ZXMuIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkluCiAgICAgICAgICAgICAgICAgICAgdGhpcywgdG9vLCBoZSBmYWlsZWQ7IGZvciB0aGUgbWFnaXN0cmF0ZXMgaW4gQ2VwaGFsbGVuaWEgZGVjaWRlZCB0aGF0IHRoZSB2ZXNzZWwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgcmV0dXJuIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZnJvbSB3aGljaAogICAgICAgICAgICAgICAgICAgIHBvcnQgc2hlIGhhZCBzZXQgc2FpbC4gVGhlbiB0aGUgbWFuLCB3aG9tIG5vIG9uZSB3b3VsZCBoYXZlIHRob3VnaHQgYXVkYWNpb3VzCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIHRvIGNvbWUgaGVyZSwgYWZ0ZXIgaGF2aW5nIHBsb3R0ZWQgYW5kIHdyb3VnaHQgc3VjaCBkZWVkc+KAlHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4sIEF0aGVuaWFucywgaGFzIHNvIHN1cnBhc3NlZCBhbGwgaW4gc2hhbWVsZXNzbmVzcyBhbmQgYXVkYWNpdHksIHRoYXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgY29tZSwgYnV0IGhhcyBhY3R1YWxseSBsYWlkIGNsYWltIHRvIG15IGdyYWluLCBhbmQgaGFzIGJyb3VnaHQgc3VpdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUhIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCwgdGhlbiwgaXMgdGhlIHJlYXNvbiBmb3IgdGhpcz8gQW5kIHdoYXQgY2FuIGhhdmUgaW5kdWNlZCB0aGUgZmVsbG93IHRvCiAgICAgICAgICAgICAgICAgICAgY29tZSBoZXJlIGFuZCBjb21tZW5jZSB0aGlzIHN1aXQ/IEkgd2lsbCB0ZWxsIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBIZWF2ZW4ga25vd3MgaXQgZ2l2ZXMgbWUgcGFpbiB0byBkbyBzbzsgYnV0IEkgbXVzdC4gVGhlcmUgZXhpc3RzIGluIHRoZSBQZWlyYWV1cwogICAgICAgICAgICAgICAgICAgIGEgZ2FuZyBvZiBzY291bmRyZWxzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgR3JlZWsgcGhyYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNy4zOSIgdmFsaWQ9InllcyI+RGVtLiAzNy4zOTwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzkuMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzkuMjwvYmlibD4sIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjkiIHZhbGlkPSJ5ZXMiPkRlbS4gNDAuOTwvYmlibD48L25vdGU+IGNsb3NlbHkKICAgICAgICAgICAgICAgICAgICBsZWFndWVkIHdpdGggb25lIGFub3RoZXIuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzcuMzkiIHZhbGlkPSJ5ZXMiPkRlbS4gMzcuMzk8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM5LjIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM5LjI8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC45IiB2YWxpZD0ieWVzIj5EZW0uIDQwLjk8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['32.Narr.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd291bGQga25vdyB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXQgb25jZSwgc2hvdWxkIHlvdSBzZWUgdGhlbS4gV2hlbiB0aGlzIG1hbiBaZW5vdGhlbWlzIHdhcyBzY2hlbWluZyB0byBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgdGhlIHZlc3NlbCBmcm9tIGNvbXBsZXRpbmcgaGVyIHZveWFnZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2UgY2hvc2Ugb25lIG9mIHRoZXNlIG1lbiBhZnRlciBjb25zdWx0aW5nIHdpdGggb25lCiAgICAgICAgICAgICAgICAgICAgICAgIGFub3RoZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByZWNpc2UgbWVhbmluZyBvZiB0aGUgcGhyYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOuiDOss6/z4XOu+G/hs+CPC9mb3JlaWduPiBpcyBkaXNwdXRlZC4gT3RoZXJzIHRha2UgaXQKICAgICAgICAgICAgICAgICAgICAgICAgYXMgbWVhbmluZyB0aGF0IHRoZSBtYW4gaW4gcXVlc3Rpb24gd2FzIGEgbWVtYmVyIG9mIHRoZSBBdGhlbmlhbiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Oss6/z4XOu+G9tTwvZm9yZWlnbj4sIG9yIFNlbmF0ZS48L25vdGU+IGFzIG91ciByZXByZXNlbnRhdGl2ZS4KICAgICAgICAgICAgICAgICAgICBIZSB3YXMga25vd24gdG8gdXMgYWZ0ZXIgYSBmYXNoaW9uLCBidXQgd2UgaGFkIG5vIGlkZWEgb2YgaGlzIHJlYWwgY2hhcmFjdGVyLgogICAgICAgICAgICAgICAgICAgIFRoaXMgd2FzIGluIGZhY3QgYSBwaWVjZSBvZiBtaXNmb3J0dW5lIGZvciB1cyBhcyBncmVhdCwgaWYgc28gbXVjaCBtYXkgYmUgc2FpZCwKICAgICAgICAgICAgICAgICAgICBhcyBvdXIgaGF2aW5nIHRvIGRlYWwgd2l0aCByYXNjYWxzIGF0IHRoZSBzdGFydC4gVGhpcyBtYW4gd2hvIHdhcyBzZW50IG91dCBieQogICAgICAgICAgICAgICAgICAgIHVz4oCUaGlzIG5hbWUgd2FzIEFyaXN0b3Bob24sIGFuZCBoZSBpcyB0aGUgc2FtZSBvbmUsIGFzIHdlIG5vdyBoZWFyLAogICAgICAgICAgICAgICAgICAgIHdobyBtYW5hZ2VkIHRoZSBidXNpbmVzcyBvZiBNaWNjYWxpb27igJRoYXMgZW50ZXJlZCBpbnRvIGFuIGFncmVlbWVudAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHBsYWludGlmZiwgYW5kIGhhcyBzb2xkIGhpbSBoaXMgc2VydmljZXMuIEluIGEgd29yZCBoZSBpcyB0aGUgb25lIHdobwogICAgICAgICAgICAgICAgICAgIGlzIG1hbmFnaW5nIHRoZSB3aG9sZSBhZmZhaXIsIGFuZCBaZW5vdGhlbWlzIGhhcyBiZWVuIGdsYWQgdG8gYWNjZXB0IHRoaXMgaGVscC4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQzrogzrLOv8+Fzrvhv4bPgjwvZm9yZWlnbj4gaXMgZGlzcHV0ZWQuIE90aGVycyB0YWtlIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGFzIG1lYW5pbmcgdGhhdCB0aGUgbWFuIGluIHF1ZXN0aW9uIHdhcyBhIG1lbWJlciBvZiB0aGUgQXRoZW5pYW4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrLOv8+FzrvhvbU8L2ZvcmVpZ24+LCBvciBTZW5hdGUuPC90cmFuc2xhdGlvbj4="
translation['32.Narr.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBoZSBmYWlsZWQgaW4gaGlzIHNjaGVtZSB0bwogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3kgdGhlIHZlc3NlbCwgbm90IGJlaW5nIGFibGUgdG8gcGF5IGJhY2sgdGhlaXIgbW9uZXkgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgY3JlZGl0b3Jz4oCUaG93IGNvdWxkIGhlIHBheSwgd2hlbiBhdCB0aGUgc3RhcnQgaGUgaGFkIHB1dCBub3RoaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgYm9hcmQ/4oCUaGUgbGF5cyBjbGFpbSB0byBteSBnb29kcywgYW5kIGRlY2xhcmVzIHRoYXQgaGUgaGFzIGxlbnQgbW9uZXkKICAgICAgICAgICAgICAgICAgICB0byBIZWdlc3RyYXR1cyBvbiB0aGUgc2VjdXJpdHkgb2YgdGhlIGdyYWluIHdoaWNoIG91ciBhZ2VudCBzYWlsaW5nIHdpdGggaGltIGhhZAogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlZC4gVGhlIGNyZWRpdG9ycywgd2hvIGhhZCBiZWVuIGRlY2VpdmVkIGluIHRoZSBmaXJzdCBpbnN0YW5jZSwgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpbnN0ZWFkIG9mIHJlY2VpdmluZyB0aGVpciBtb25leSwgdGhleSBoYXZlIGEgc2NvdW5kcmVsIGFzIHRoZWlyIGRlYnRvciBhbmQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIG1vcmUsIGFuZCBob3BpbmcgdGhhdCwgaWYgeW91IGFyZSBpbXBvc2VkIHVwb24gYnkgWmVub3RoZW1pcywgdGhleSBtYXkKICAgICAgICAgICAgICAgICAgICByZWNvdmVyIHRoZWlyIG93biBvdXQgb2YgbXkgcHJvcGVydHksIGFyZSBmb3JjZWQgdG8gbWFrZSBjb21tb24gY2F1c2Ugd2l0aCBoaW0KICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0byBwcm90ZWN0IHRoZWlyIG93biBpbnRlcmVzdHMsIGFsdGhvdWdoIHRoZXkga25vdyBoaW0gdG8gYmUgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFsc2UgY2hhcmdlcyBhZ2FpbnN0IG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['32.Narr.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCwgdG8gc3BlYWsgYnJpZWZseSwgaXMgdGhlIG1hdHRlciBvbiB3aGljaCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgdG8gY2FzdCB5b3VyIHZvdGVzLiBCdXQgSSB3aXNoIGZpcnN0IHRvIGJyaW5nIGJlZm9yZSB5b3UgdGhlIHdpdG5lc3NlcyB0byB3aGF0IEkKICAgICAgICAgICAgICAgICAgICBhbSBzYXlpbmcsIGFuZCB0aGVuIHRvIGluc3RydWN0IHlvdSByZWdhcmRpbmcgb3RoZXIgYXNwZWN0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHJlYWQgdGhlIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGUgdmVzc2VsCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBoZXJl4oCUZm9yIHRoZSBDZXBoYWxsZW5pYW5zIG9yZGVyZWQsIGRlc3BpdGUgdGhlIHBsYWludGlmZidzCiAgICAgICAgICAgICAgICAgICAgbWFjaGluYXRpb25zLCB0aGF0IGl0IHNob3VsZCBwdXQgaW50byB0aGUgcG9ydCBmcm9tIHdoaWNoIGl0IGZpcnN0CiAgICAgICAgICAgICAgICAgICAgc2FpbGVk4oCUdGhvc2Ugd2hvIGhhZCBsZW50IG1vbmV5IG9uIHRoZSBzaGlwIGltbWVkaWF0ZWx5IHRvb2sKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIGhlciwgYW5kIHRoZSBtYW4gd2hvIGhhZCBib3VnaHQgdGhlIGdyYWluIHRvb2sgcG9zc2Vzc2lvbiBvZiBpdDsKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgdGhlIG9uZSB3aG8gaGFkIGJvcnJvd2VkIHRoZSBtb25leSBvZiB1cy4gQWZ0ZXIgdGhpcyB0aGUgcGxhaW50aWZmIGNhbWUsCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHdpdGggaGltIEFyaXN0b3Bob24sIHRoZSBtYW4gc2VudCBvdXQgYXMgb3VyIHJlcHJlc2VudGF0aXZlLCBhbmQgbGFpZAogICAgICAgICAgICAgICAgICAgIGNsYWltIHRvIHRoZSBncmFpbiwgc2F5aW5nIHRoYXQgaGUgaGFkIGxlbnQgbW9uZXkgdG8gSGVnZXN0cmF0dXMuIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz7igJxXaGF0IGFyZSB5b3Ugc2F5aW5nLCBmZWxsb3c/4oCdCiAgICAgICAgICAgICAgICAgICAgZXhjbGFpbWVkIFByb3R1cyBpbW1lZGlhdGVseS4g77yIVGhpcyB3YXMgdGhlIG5hbWUgb2YgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICBpbXBvcnRlZCB0aGUgZ3JhaW4sIGFuZCB3aG8gb3dlZCB1cyB0aGUgbW9uZXku77yJIOKAnElzIGl0IHlvdQogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGdpdmVuIG1vbmV5IHRvIEhlZ2VzdHJhdHVzLCB5b3Ugd2hvIGFpZGVkIGhpbSB0byBkZWNlaXZlIHRoZSBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBtaWdodCBib3Jyb3cgb2YgdGhlbT8gV291bGQgeW91IHdobyBvZnRlbiBoZWFyZCBoaW0gc2F5IHRoYXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgdGhlaXIgbW9uZXkgd291bGQgbG9zZSBpdCwgd291bGQgeW91LCBJIHNheSwgaGVhcmluZyB0aGlzLCBoYXZlCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgeW91cnM/4oCdIOKAnFllcyzigJ0gc2FpZCBoZSBpbXB1ZGVudGx5LgogICAgICAgICAgICAgICAgICAgIOKAnFdlbGwsIHRoZW4s4oCdIGludGVycnVwdGVkIG9uZSBvZiB0aG9zZSBwcmVzZW50LAogICAgICAgICAgICAgICAgICAgIOKAnGlmIHdoYXQgeW91IHNheSBpcyBuZXZlciBzbyB0cnVlLCB5b3VyIHBhcnRuZXIgYW5kIGZlbGxvdy1jb3VudHJ5bWFuLAogICAgICAgICAgICAgICAgICAgIEhlZ2VzdHJhdHVzLCBoYXMgdGFrZW4geW91IGluLCBpdCBhcHBlYXJzLCBhbmQgZm9yIHRoYXQgaGFzIHBhc3NlZCBzZW50ZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIGRlYXRoIHVwb24gaGltc2VsZiwgYW5kIGlzIGRlYWQu4oCdIDwvdHJhbnNsYXRpb24+"
translation['32.Narr.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz7igJxZZXMs4oCdIHNhaWQgYW5vdGhlciBvZiB0aGUgYnlzdGFuZGVycywg4oCcYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIGZlbGxvdyBoYXMgY28tb3BlcmF0ZWQgd2l0aCBIZWdlc3RyYXR1cyBpbiB0aGUgd2hvbGUgbWF0dGVyLCBJIHdpbGwgZ2l2ZQogICAgICAgICAgICAgICAgICAgIHlvdSBhIHByb29mLiBGb3IgYmVmb3JlIHRoZSBhdHRlbXB0IHdhcyBtYWRlIHRvIGN1dCB0aHJvdWdoIHRoZSBzaGlwJ3MgYm90dG9tLAogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuIGFuZCBIZWdlc3RyYXR1cyBkZXBvc2l0ZWQgd2l0aCBvbmUgb2YgdGhlIHNoaXAncyBjb21wYW55IGEgd3JpdHRlbgogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudC4gWWV0LCBpZiB5b3UgaGFkIGNvbmZpZGVuY2UgaW4gaGltIHdoZW4geW91IGdhdmUgdGhlIG1vbmV5LCB3aHkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc291Z2h0IHNvbWUgc2VjdXJpdHkgZm9yIHlvdXJzZWxmIGJlZm9yZSB0aGUgY3JpbWU/IEJ1dCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBkaXN0cnVzdGVkIGhpbSwgd2h5IGRpZCB5b3Ugbm90LCBsaWtlIHRoZSBvdGhlcnMsIGdldCBhIGxlZ2FsIGFja25vd2xlZGdlbWVudAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBzYWlsaW5nP+KAnSA8L3RyYW5zbGF0aW9uPg=="
translation['32.Narr.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2h5IHJlbGF0ZSBhbGwKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBzYWlkPyBXZSBtYWRlIG5vIHByb2dyZXNzIGJ5IGFsbCB0aGlzIHRhbGtpbmc7IGhlIGhlbGQgb24gdG8gdGhlIGdyYWluLgogICAgICAgICAgICAgICAgICAgIFByb3R1cyB0cmllZCB0byBwdXQgaGltIG91dCwgYW5kIHNvIGRpZCBQaGVydGF0dXMsIFByb3R1cydzIHBhcnRuZXI7IGJ1dCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkbid0IGJ1ZGdlLCBkZWNsYXJpbmcgcG9pbnQtYmxhbmsgdGhhdCBoZSB3b3VsZCBub3QgYmUgcHV0IG91dCBvZiBwb3NzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgYnkgYW55b25lLCB1bmxlc3MgSSBteXNlbGYgc2hvdWxkIHB1dCBoaW0gb3V0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbWVhbmluZyBhcHBlYXJzIHRvIGJlIHRoYXQgWmVub3RoZW1pcyBjb25zaWRlcmVkIERlbW8sIHJhdGhlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgICAgIFByb3R1cywgYSBwZXJzb24gZnJvbSB3aG9tIGhlIG1pZ2h0IGhvcGUgdG8gd2luIGRhbWFnZXMgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGVqZWN0bWVudC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.Narr.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIFByb3R1cyBhbmQgSSBjaGFsbGVuZ2VkIGhpbSB0byBnbwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGUgU3lyYWN1c2FuIGF1dGhvcml0aWVzLCBhbmQsIGlmIGl0IHNob3VsZCBiZSBzaG93biB0aGF0IFByb3R1cyBoYWQKICAgICAgICAgICAgICAgICAgICBib3VnaHQgdGhlIGdyYWluLCB0aGF0IHRoZSBjdXN0b21zIGR1dGllcyB3ZXJlIHJlY29yZGVkIGluIGhpcyBuYW1lLCBhbmQgdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBoZSB3aG8gaGFkIHBhaWQgdGhlIHByaWNlLCB3ZSBkZW1hbmRlZCB0aGF0IFplbm90aGVtaXMgYmUgcHVuaXNoZWQgYXMgYQogICAgICAgICAgICAgICAgICAgIHJhc2NhbDsgaWYgdGhpcyB3ZXJlIG5vdCBwcm92ZWQsIHdlIGFncmVlZCB0aGF0IGhlIHNob3VsZCByZWNlaXZlIGJhY2sgYWxsIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGV4cGVuZGVkIGFuZCBhIHRhbGVudCBpbiBhZGRpdGlvbiBhbmQgdGhhdCB3ZSB3b3VsZCByZWxpbnF1aXNoIG91ciBjbGFpbSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBncmFpbi4gRGVzcGl0ZSB0aGlzIGNoYWxsZW5nZSBhbmQgYWxsIHRoYXQgUHJvdHVzIGFuZCBJIGNvdWxkIHNheSwgd2UgbWFkZQogICAgICAgICAgICAgICAgICAgIG5vIHByb2dyZXNzLCBidXQgSSBoYWQgdG8gY2hvb3NlIGVpdGhlciB0byBwdXQgWmVub3RoZW1pcyBvdXQsIG9yIHRvIGxvc2UgbXkKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3aGljaCBoYWQgYmVlbiBicm91Z2h0IHNhZmUgdG8gcG9ydCBhbmQgd2FzIHRoZXJlIGJlZm9yZSBteSBleWVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.Narr.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5Qcm90dXMgb24gaGlzIHBhcnQgYWRqdXJlZCB1cyBieSB0aGUgZ29kcwogICAgICAgICAgICAgICAgICAgIHRvIHB1dCBoaW0gb3V0LCBkZWNsYXJpbmcgaGltc2VsZiByZWFkeSB0byBzYWlsIGJhY2sgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+OyBidXQgaWYsIGRlc3BpdGUgdGhpcyB3aWxsaW5nbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGhpcywgSSBzaG91bGQgZ2l2ZSB1cCB0aGUgZ3JhaW4gdG8gWmVub3RoZW1pcywgaGUgc2FpZCBpdCBtYWRlIG5vIGRpZmZlcmVuY2UgdG8KICAgICAgICAgICAgICAgICAgICBoaW0uIFRvIHByb3ZlIHRoYXQgSSBhbSB0ZWxsaW5nIHRoZSB0cnV0aCBpbiB0aGlz4oCUdGhhdCB0aGUgcGxhaW50aWZmCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCB0byBiZSBwdXQgb3V0IG9mIHBvc3Nlc3Npb24gZXhjZXB0IGJ5IG1lLCB0aGF0IGhlIHJlZnVzZWQgdGhlIGNoYWxsZW5nZQogICAgICAgICAgICAgICAgICAgIHRvIHNhaWwgYmFjayB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4sIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGVkIHRoZSBhZ3JlZW1lbnQgaW4gdGhlIGNvdXJzZSBvZiB0aGUgdm95YWdl4oCUcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.Proof.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJQcm9vZiIgdW5pdD0icGFydCIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4sIHRoZXJlZm9yZSwgaGUgcmVmdXNlZCB0byBiZSBwdXQgb3V0IG9mIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBieSBQcm90dXMsIG9yIHRvIHNhaWwgYmFjayB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBmb3IgYW4gZXF1aXRhYmxlIHNldHRsZW1lbnQsIGFuZCB3aGVuIGl0IHdhcyBwcm92ZWQgdGhhdCBoZSB3YXMgYW4gYWNjb21wbGljZSBpbgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgdmlsbGFpbnkgb2YgSGVnZXN0cmF0dXMsIHRoZSBvbmx5IGNvdXJzZSBsZWZ0IGZvciB1cywgd2hvIGhhZCBsZW50IG91cgogICAgICAgICAgICAgICAgICAgIG1vbmV5IGhlcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBoYWQgdGFrZW4KICAgICAgICAgICAgICAgICAgICBvdmVyIHRoZSBncmFpbiBmcm9tIHRoZSBtYW4gd2hvIGhhZCBob25lc3RseSBwdXJjaGFzZWQgaXQgdGhlcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+LCB3YXMgdG8gZGlzcG9zc2VzcyB0aGUgcGxhaW50aWZmLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.Proof.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGVsc2UgY291bGQgd2UgaGF2ZSBkb25lPyBOb3Qgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdXMgcGFydG5lcnMgaGFkIGFzIHlldCBhbnkgaWRlYSB0aGF0IHlvdSB3b3VsZCBldmVyIGRlY2xhcmUgdGhlIGdyYWluIHRvIGJlIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4ncyBwcm9wZXJ0eeKAlGdyYWluIHdoaWNoIGhlIHRyaWVkIHRvIGluZHVjZSB0aGUgc2FpbG9ycyB0byBhYmFuZG9uLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgbWlnaHQgYmUgbG9zdCBieSB0aGUgc2lua2luZyBvZiB0aGUgc2hpcC4gVGhpcyBmYWN0IGlzIHRoZSBzdHJvbmdlc3QKICAgICAgICAgICAgICAgICAgICBwcm9vZiB0aGF0IG5vbmUgb2YgaXQgYmVsb25nZWQgdG8gaGltOyBmb3Igd2hvIHdvdWxkIGhhdmUgdHJpZWQgdG8gaW5kdWNlIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHdlcmUgYXR0ZW1wdGluZyB0byBzYXZlIGl0IHRvIGFiYW5kb24gZ3JhaW4gd2hpY2ggYmVsb25nZWQgdG8gaGltc2VsZj8gT3IKICAgICAgICAgICAgICAgICAgICB3aG8gd291bGQgbm90IGhhdmUgYWNjZXB0ZWQgdGhlIGNoYWxsZW5nZSBhbmQgaGF2ZSBzYWlsZWQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+LCB3aGVyZSB0aGVzZSBtYXR0ZXJzIG1pZ2h0IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgcHJvdmVkPyA8L3RyYW5zbGF0aW9uPg=="
translation['32.Proof.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3VyZWx5IEkgd2FzIG5vdCBnb2luZyB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgc28gcG9vciBhbiBvcGluaW9uIG9mIHlvdSBhcyB0byBpbWFnaW5lIHRoYXQgeW91IHdvdWxkIHZvdGUgdG8gYWxsb3cgdGhpcwogICAgICAgICAgICAgICAgICAgIG1hbiB0byBlbnRlciBhIHN1aXQgcmVnYXJkaW5nIHRoZXNlIGdvb2RzLCB3aG9zZSBlbnRyeSBpbnRvIHlvdXIgcG9ydCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBzb3VnaHQgYnkgZXZlcnkgbWVhbnMgdG8gcHJldmVudCzigJRmaXJzdCB3aGVuIGhlIHRyaWVkIHRvIGluZHVjZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYWlsb3JzIHRvIGFiYW5kb24gdGhlbSwgYW5kIGFnYWluIHdoZW4gaW4gQ2VwaGFsbGVuaWEgaGUgc3Ryb3ZlIHRvIHByZXZlbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2hpcCBmcm9tIHNhaWxpbmcgaGVyZS4gPC90cmFuc2xhdGlvbj4="
translation['32.Proof.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBpdCBub3QgYmUgYQogICAgICAgICAgICAgICAgICAgIHNoYW1lZnVsIGFuZCBvdXRyYWdlb3VzIHRoaW5nLCBpZiBDZXBoYWxsZW5pYW5zLCBpbiBvcmRlciB0byBzYXZlIHByb3BlcnR5IGZvcgogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgb3JkZXJlZCB0aGUgc2hpcCB0byBiZSBicm91Z2h0IGhlcmUsIGJ1dCB5b3UsIHdobyBhcmUgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBvcmRlciB0aGUgcHJvcGVydHkgb2YgeW91ciBjaXRpemVucyB0byBiZSBnaXZlbiB1cCB0byB0aG9zZSB3aG8gd2lzaGVkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaXQgaW50byB0aGUgc2VhLCBhbmQgc2hvdWxkIGFsbG93IHRoaXMgZmVsbG93IHRvIGVudGVyIGFuIGFjdGlvbiBmb3IgZ29vZHMKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBzY2hlbWVkIHRvIHByZXZlbnQgZnJvbSBiZWluZyBicm91Z2h0IGhlcmUgYXQgYWxsPyBEbyBub3QgZG8gdGhhdCwgSQogICAgICAgICAgICAgICAgICAgIGltcGxvcmUgeW91IGJ5IFpldXMgYW5kIHRoZSBHb2RzLiBOb3cgcmVhZCwgcGxlYXNlLCB0aGUgc3BlY2lhbCBwbGVhIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJlZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJQbGVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGxlYTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QbGVhPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHBsZWFzZSByZWFkIHRoZSBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.Proof.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBteSBwbGVhCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYWN0aW9uIGlzIG5vdCBhZG1pc3NpYmxlIGlzIGluIGhhcm1vbnkgd2l0aCB0aGUgbGF3cywgaGFzLCBJIHRoaW5rLAogICAgICAgICAgICAgICAgICAgIGJlZW4gc3VmZmljaWVudGx5IHByb3ZlZDsgYnV0IHlvdSBtdXN0IGhlYXIgdGhlIHRyaWNrIG9mIHRoaXMgY2xldmVyIGZlbGxvdwogICAgICAgICAgICAgICAgICAgIEFyaXN0b3Bob24sIHdobyBoYXMgY29uY29jdGVkIHRoZSB3aG9sZSBzY2hlbWUuIFdoZW4gdGhleSBzYXcgdGhhdCwgaW4gdGhlIGxpZ2h0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGZhY3RzLCB0aGV5IGhhZCBhYnNvbHV0ZWx5IG5vIGJhc2lzIG9mIHJpZ2h0LCB0aGV5IG1hZGUgb3ZlcnR1cmVzIHRvCiAgICAgICAgICAgICAgICAgICAgUHJvdHVzLCBhbmQgaW5kdWNlZCBoaW0gdG8gbGVhdmUgdGhlIG1hdHRlciB3aG9sbHkgaW4gdGhlaXIgaGFuZHMuIEZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGFzIGhhcyBub3cgYmVjb21lIHBsYWluIHRvIHVzLCB0aGV5IGhhZCBiZWVuIHdvcmtpbmcgdG8gdGhpcyBlbmQsIGJ1dCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHVuYWJsZSB0byBjYXJyeSB0aGVpciBwb2ludC4gPC90cmFuc2xhdGlvbj4="
translation['32.Proof.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgUHJvdHVzLAogICAgICAgICAgICAgICAgICAgIHNvIGxvbmcgYXMgaGUgdGhvdWdodCB0byBnZXQgYSBwcm9maXQgZm9yIGhpbXNlbGYgZnJvbSB0aGUgZ3JhaW4gYnkgZ29pbmcsIGNsdW5nCiAgICAgICAgICAgICAgICAgICAgdG8gaXQsIGFuZCBjaG9zZSByYXRoZXIgdG8gbWFrZSBoaXMgcHJvZml0LCBhbmQgdG8gcmVuZGVyIHRvIHVzIHdoYXQgd2FzIG91cgogICAgICAgICAgICAgICAgICAgIGR1ZSwgdGhhbiB0byBtYWtlIGNvbW1vbiBjYXVzZSB3aXRoIHRoZXNlIG1lbiwgc2hhcmluZyB3aXRoIHRoZW0gdGhlIGFkdmFudGFnZQogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBhbmQgZG9pbmcgdXMgYW4gaW5qdXJ5LiBCdXQgd2hlbiwgYWZ0ZXIgaGUgaGFkIGNvbWUgYmFjayBoZXJlIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGluZyBhYm91dCB0aGVzZSBtYXR0ZXJzLCBncmFpbiBmZWxsIGluIHByaWNlLCBoZSBzdHJhaWdodHdheSBjaGFuZ2VkIGhpcwogICAgICAgICAgICAgICAgICAgIG1pbmQuIDwvdHJhbnNsYXRpb24+"
translation['32.Proof.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgc2FtZSB0aW1lIO+8iGZvciwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlIHdob2xlIHRydXRoIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgdG9sZCB5b3XvvIksIHdlIG9uIG91ciBwYXJ0LCB3aG8gaGFkIG1hZGUgdGhlIGxvYW4sIGNhbWUgdG8gYSBxdWFycmVsIGFuZAogICAgICAgICAgICAgICAgICAgIGZlbHQgYml0dGVyIGFnYWluc3QgaGltIO+8iGZvciB0aGUgbG9zcyBvbiB0aGUgZ3JhaW4gd2FzIGZhbGxpbmcgb24KICAgICAgICAgICAgICAgICAgICB1c++8iSwgYW5kIGNoYXJnZWQgdGhhdCBoZSBoYWQgc2VjdXJlZCBmb3IgdXMgdGhpcyBwZXR0aWZvZ2dpbmcgc2NvdW5kcmVsCiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiBvdXIgbW9uZXkuIEFmdGVyIHRoaXMsIGJlaW5nIG1hbmlmZXN0bHkgbm9uZSB0b28gaG9uZXN0IGJ5IG5hdHVyZSwgaGUKICAgICAgICAgICAgICAgICAgICB3ZW50IG92ZXIgdG8gdGhlaXIgc2lkZSwgYW5kIGFncmVlZCB0byBsZXQganVkZ2VtZW50IGdvIGJ5IGRlZmF1bHQgaW4gdGhlIHN1aXQKICAgICAgICAgICAgICAgICAgICB3aGljaCBaZW5vdGhlbWlzIGhhZCBicm91Z2h0IGFnYWluc3QgaGltIGJlZm9yZSB0aGV5IGhhZCBjb21lIHRvIGFuIGFncmVlbWVudAogICAgICAgICAgICAgICAgICAgIHdpdGggb25lIGFub3RoZXIuIDwvdHJhbnNsYXRpb24+"
translation['32.Proof.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGlmIGhlIGhhZCBkcm9wcGVkIGhpcwogICAgICAgICAgICAgICAgICAgIHN1aXQgYWdhaW5zdCBQcm90dXMsIGl0IHdvdWxkIGhhdmUgYmVlbiBtYWRlIGNsZWFyIGF0IG9uY2UgdGhhdCBoaXMgYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB1cyB3YXMgYSBtYWxpY2lvdXMgb25lLCBhbmQgUHJvdHVzIHdvdWxkIG5vdCBjb25zZW50IHRvIGhhdmUganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gYWdhaW5zdCBoaW0gd2hpbGUgaGUgd2FzIGhlcmUgcHJlc2VudCwgaW4gb3JkZXIgdGhhdCwgaWYgdGhleSBzaG91bGQgZG8KICAgICAgICAgICAgICAgICAgICBmb3IgaGltIHdoYXQgdGhleSBoYWQgYWdyZWVk4oCUd2VsbCBhbmQgZ29vZDsgYnV0LCBpZiBub3QsIGhlIG1pZ2h0IGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGUganVkZ2VtZW50IGJ5IGRlZmF1bHQgc2V0IGFzaWRlLiBCdXQgd2h5IHNwZWFrIG9mIGFsbCB0aGlzPyBJZiBQcm90dXMgcmVhbGx5CiAgICAgICAgICAgICAgICAgICAgZGlkIHdoYXQgWmVub3RoZW1pcyBoZXJlIGhhcyB3cml0dGVuIGluIGhpcyBjb21wbGFpbnQsIGhlIGp1c3RseSBkZXNlcnZlcywgYXMgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcyB0byBtZSBhdCBsZWFzdCwgbm90IG1lcmVseSB0byBoYXZlIGp1ZGdlbWVudCBnaXZlbiBhZ2FpbnN0IGhpbSwgYnV0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcHV0IHRvIGRlYXRoLiBGb3IgaWYgaW4gZGFuZ2VyIGFuZCB0ZW1wZXN0IGhlIGRyYW5rIHNvIG11Y2ggd2luZSBhcyB0byBiZSBsaWtlIGEKICAgICAgICAgICAgICAgICAgICBtYWRtYW4sIHdoYXQgcHVuaXNobWVudCBkb2VzIGhlIG5vdCBkZXNlcnZlIHRvIHN1ZmZlcj8gPC90cmFuc2xhdGlvbj4="
translation['32.Proof.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5PciwgaWYgaGUgc3RvbGUgZG9jdW1lbnRzLCBvciBzZWNyZXRseSBicm9rZSB0aGUgc2VhbHM/CiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciwgdGhlIGZhY3RzIHJlZ2FyZGluZyBhbGwgdGhlc2UgdGhpbmdzIHlvdSB3aWxsIGRldGVybWluZSBpbiB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIG1pbmRzOyBidXQsIFplbm90aGVtaXMsIGRvIG5vdCBtaXggdXAgdGhhdCBhY3Rpb24gd2l0aCBtaW5lLiBJZiBQcm90dXMgaGFzCiAgICAgICAgICAgICAgICAgICAgd3JvbmdlZCB5b3UgaW4gd29yZCBvciBkZWVkLCB5b3UgaGF2ZSwgaXQgc2VlbXMsIGhhZCBzYXRpc2ZhY3Rpb24uIE5vIG9uZSBvZiB1cwogICAgICAgICAgICAgICAgICAgIHNvdWdodCB0byBoaW5kZXIgeW91LCBvciBub3cgYmVncyBmb3IgbGVuaWVuY3kgZm9yIGhpbS4gSWYgeW91IGhhdmUgYnJvdWdodCBhCiAgICAgICAgICAgICAgICAgICAgYmFzZWxlc3MgY2hhcmdlIGFnYWluc3QgaGltLCB0aGF0IGlzIG5vIGFmZmFpciBvZiBvdXJzLiBBaCwgYnV0IHRoZSBmZWxsb3cgaGFzCiAgICAgICAgICAgICAgICAgICAgZGlzYXBwZWFyZWQuIDwvdHJhbnNsYXRpb24+"
translation['32.Proof.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXM7IHRoYW5rcyB0byB5b3UsIHdobyB3aXNoZWQgdG8KICAgICAgICAgICAgICAgICAgICBkZXByaXZlIHVzIG9mIGhpcyB0ZXN0aW1vbnksIGFuZCB0byBiZSBhYmxlIHlvdXJzZWx2ZXMgdG8gc2F5IGFnYWluc3QgaGltCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgeW91IHBsZWFzZS4gRm9yIGlmIHRoZSBqdWRnZW1lbnQgYnkgZGVmYXVsdCBoYWQgbm90IGJlZW4gb2YgeW91ciBvd24KICAgICAgICAgICAgICAgICAgICBjb250cml2aW5nLCB5b3Ugd291bGQgYXQgdGhlIHNhbWUgdGltZSBoYXZlIGNhbGxlZCBoaW0gYmVmb3JlIHRoZSBQb2xlbWFyY2gsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmUgaGFkIGhpbSBwdXQgdW5kZXIgYmFpbDsgYW5kLCBpZiBoZSBoYWQgYXBwb2ludGVkIHN1cmV0aWVzLCBoZSB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBmb3JjZWQgdG8gcmVtYWluLCBvciB5b3Ugd291bGQgaGF2ZSBoYWQgcGVyc29ucyBmcm9tIHdob20geW91IGNvdWxkIHJlY292ZXIKICAgICAgICAgICAgICAgICAgICBkYW1hZ2VzOyBpZiBoZSBoYWQgbm90IGdpdmVuIGJhaWwsIGhlIHdvdWxkIGhhdmUgZ29uZSB0byBwcmlzb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6/4by0zrrOt868zrE8L2ZvcmVpZ24+LCDigJxsb2RnaW5nLOKAnSBpcyB1c2VkIGFzIGEgZXVwaGVtaXNtCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM61z4POvM+Jz4ThvbXPgc65zr/OvTwvZm9yZWlnbj4sCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHByaXNvbi7igJ0gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTYuNCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA1Ni40PC9iaWJsPjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ov+G8tM66zrfOvM6xPC9mb3JlaWduPiwg4oCcbG9kZ2luZyzigJ0gaXMgdXNlZCBhcyBhIGV1cGhlbWlzbQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOtc+DzrzPic+E4b21z4HOuc6/zr08L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICDigJxwcmlzb24u4oCdIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU2LjQiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNTYuNDwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['32.Proof.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IGlzLCB5b3UgaGF2ZSBtYWRlIGNvbW1vbiBjYXVzZTsgaGUKICAgICAgICAgICAgICAgICAgICB0aGlua3MgdGhhdCB0aHJvdWdoIHlvdXIgaGVscCBoZSB3aWxsIGVzY2FwZSBwYXlpbmcgdXMgdGhlIGRlZmljaWVuY3kgdGhhdCBoYXMKICAgICAgICAgICAgICAgICAgICBjb21lIGFib3V0OyBhbmQgeW91LCB0aHJvdWdoIGFjY3VzaW5nIGhpbSwgaG9wZSB0byBnZXQgY29udHJvbCBvZiBteSBwcm9wZXJ0eS4KICAgICAgICAgICAgICAgICAgICBIZXJlIGlzIGEgcHJvb2Ygb2YgdGhpcy4gSSBzaGFsbCBzdW1tb24gaGltIGFzIGEgd2l0bmVzczsgeW91LCBaZW5vdGhlbWlzLCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgaGF2ZSBoaW0gcHV0IHVuZGVyIGJhaWwsIG5vciBkbyB5b3Ugbm93IHN1bW1vbiBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['32.Proof.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgeWV0IGFub3RoZXIgd2F5IGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBob3BlIHRvIGRlY2VpdmUgYW5kIHRyaWNrIHlvdS4gVGhleSB3aWxsIGFjY3VzZSBEZW1vc3RoZW5lcywgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICBzYXkgdGhhdCBJIHJlbGllZCB1cG9uIGhpcyBoZWxwIHdoZW4gSSBwdXQgWmVub3RoZW1pcyBvdXQgb2YgcG9zc2Vzc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBncmFpbiwgYXNzdW1pbmcgdGhhdCB0aGlzIGNoYXJnZSB3aWxsIGJlIGNyZWRpdGVkIGJlY2F1c2UgaGUgaXMgYW4gb3JhdG9yIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgd2VsbC1rbm93biBwZXJzb25hZ2UuIERlbW9zdGhlbmVzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyBpbmRlZWQgbXkgYmxvb2QtcmVsYXRpb24g77yISSBzd2VhciB0byB5b3UgYnkKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGdvZHMgdGhhdCBJIHNoYWxsIHNwZWFrIHRoZSB0cnV0aO+8iSwgPC90cmFuc2xhdGlvbj4="
translation['32.Proof.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiBJIGFwcHJvYWNoZWQgaGltLCBhbmQgZW50cmVhdGVkIGhpbSB0byBiZSBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIGFpZCBtZSBpbiBhbnkgd2F5IGhlIGNvdWxkLCBoZSBzYWlkIHRvIG1lLCDigJ1EZW1vLCBJIHdpbGwgZG8gYXMKICAgICAgICAgICAgICAgICAgICB5b3UgYmlkIG1lOyBpdCB3b3VsZCBiZSBjcnVlbCB0byByZWZ1c2UgeW91LiBZb3UgbXVzdCwgaG93ZXZlciwgY29uc2lkZXIgYm90aAogICAgICAgICAgICAgICAgICAgIHlvdXIgb3duIGNpcmN1bXN0YW5jZXMgYW5kIG1pbmUuIE15IG93biBwb3NpdGlvbiBpcyB0aGlzOiBmcm9tIHRoZSB0aW1lIHdoZW4gSQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGJlZ2FuIHRvIHNwZWFrIG9uIHB1YmxpYyBhZmZhaXJzIEkgaGF2ZSBub3QgY29tZSBmb3J3YXJkIHRvIHBsZWFkIGluIGEKICAgICAgICAgICAgICAgICAgICBzaW5nbGUgcHJpdmF0ZSBjYXNlLCBidXQgLiAuIC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHNwZWVjaCBpcwogICAgICAgICAgICAgICAgICAgICAgICBtdXRpbGF0ZWQgYXQgdGhlIGVuZCwgYW5kIHRoZSBjb25jbHVkaW5nIHdvcmRzIHlpZWxkIG5vIHNhdGlzZmFjdG9yeQogICAgICAgICAgICAgICAgICAgICAgICBzZW5zZS48L25vdGU+PC90cmFuc2xhdGlvbj4="
