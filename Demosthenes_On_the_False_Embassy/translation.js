var translation={}
translation['19.Intro.1'] = ""
translation['19.Intro.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgSSBvYnNlcnZlIHRoYXQgbWVuIHdobyBlbnRlciBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBsaWZlIHdpdGggaG9uZXN0IGludGVudGlvbnMsIGV2ZW4gYWZ0ZXIgdGhleSBoYXZlIHN1Ym1pdHRlZCB0byBzY3J1dGlueSwgZG8KICAgICAgICAgICAgICAgICAgICBzdGlsbCBhY2tub3dsZWRnZSBhIHBlcnBldHVhbCByZXNwb25zaWJpbGl0eS4gQnV0IEFlc2NoaW5lcywgdGhlIGRlZmVuZGFudCwKICAgICAgICAgICAgICAgICAgICByZXZlcnNlcyB0aGlzIHByYWN0aWNlLiBCZWZvcmUgY29taW5nIGludG8gY291cnQgdG8ganVzdGlmeSBoaXMgcHJvY2VlZGluZ3MsIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIHB1dCBvdXQgb2YgdGhlIHdheSBvbmUgb2YgdGhlIG1lbiB3aG8gY2FsbGVkIGhpbSB0byBhY2NvdW50LCBhbmQgdGhlIG90aGVycwogICAgICAgICAgICAgICAgICAgIGhlIGlzIGNvbnN0YW50bHkgdGhyZWF0ZW5pbmcuIFNvIGhlIGlzIHRyeWluZyB0byBpbnRyb2R1Y2UgaW50byBwb2xpdGljcyBhIG1vc3QKICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXMgYW5kIGRlcGxvcmFibGUgcHJhY3RpY2U7IGZvciBpZiBhIG1hbiB3aG8gaGFzIHVuZGVydGFrZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RlcmVkIGFueSBwdWJsaWMgZnVuY3Rpb24gY2FuIGdldCByaWQgb2YgYWNjdXNlcnMgbm90IGJ5IGhpcyBob25lc3R5IGJ1dAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBmZWFyIGhlIGluc3BpcmVzLCB0aGUgcGVvcGxlIHdpbGwgc29vbiBsb3NlIGFsbCBjb250cm9sIG9mIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGFmZmFpcnMuIDwvdHJhbnNsYXRpb24+"
translation['19.Intro.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGlsZSBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBlbnRpcmUgY29uZmlkZW5jZSB0aGF0IEkgc2hhbGwgcHJvdmUgdGhhdCB0aGlzIG1hbiBpcyBndWlsdHkgb2Ygc2VyaW91cwogICAgICAgICAgICAgICAgICAgIGRlbGlucXVlbmNpZXMsIGFuZCB0aGF0IGhlIGRlc2VydmVzIHRoZSBtb3N0IHNldmVyZSBwdW5pc2htZW50LCB5ZXQsIGluIHNwaXRlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhc3N1cmFuY2UsIEkgaGF2ZSBhIG1pc2dpdmluZywgd2hpY2ggSSB3aWxsIGV4cGxhaW4gdG8geW91IHF1aXRlIGZyYW5rbHkuCiAgICAgICAgICAgICAgICAgICAgSXQgYXBwZWFycyB0byBtZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB0cmlhbHMgd2hpY2ggY29tZSBiZWZvcmUgeW91IGFyZSBhZmZlY3RlZCBxdWl0ZSBhcyBtdWNoIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgb2YgdGhlIGhvdXIgYXMgYnkgdGhlIGZhY3RzOyBhbmQgSSBhbSBhZnJhaWQgdGhhdCB0aGUgbG9uZyBsYXBzZSBvZgogICAgICAgICAgICAgICAgICAgIHRpbWUgc2luY2UgdGhlIGVtYmFzc3kgaGFzIGluY2xpbmVkIHlvdSB0byBmb3JnZXQgb3IgdG8gYWNxdWllc2NlIGluIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgaW5pcXVpdGllcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Intro.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkgd2lsbCwgdGhlbiwgc3VnZ2VzdCBhIG1ldGhvZCBieQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBtYXkgbmV2ZXJ0aGVsZXNzIHJlYWNoIGEganVzdCBjb25jbHVzaW9uIGFuZCBnaXZlIGEgcmlnaHRlb3VzIHZlcmRpY3QKICAgICAgICAgICAgICAgICAgICB0b2RheS4gQnkgY29uc2lkZXJhdGlvbiBhbW9uZyB5b3Vyc2VsdmVzLCBnZW50bGVtZW4sIHlvdSBzaG91bGQgZm9ybSBhIHRydWUKICAgICAgICAgICAgICAgICAgICBjb25jZXB0aW9uIG9mIHdoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSB2aW5kaWNhdGlvbiB3aGljaCB0aGUgc3RhdGUKICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBvZiBhbnkgYW1iYXNzYWRvci4gSGUgaXMgcmVzcG9uc2libGUgdGhlbiwgaW4gdGhlIGZpcnN0IHBsYWNlLCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0cyBoZSBoYXMgbWFkZTsgc2Vjb25kbHksIGZvciB0aGUgYWR2aWNlIGhlIGhhcyBvZmZlcmVkOyB0aGlyZGx5LCBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YW5jZSBvZiB5b3VyIGluc3RydWN0aW9uczsgdGhlbiB0aGVyZSBpcyB0aGUgcXVlc3Rpb24gb2YgdGltZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdGllczsgYW5kLCB0byBjcm93biBhbGwsIHdoZXRoZXIgaGUgaGFzIGRvbmUgaGlzIGJ1c2luZXNzIGNvcnJ1cHRseSBvcgogICAgICAgICAgICAgICAgICAgIHdpdGggaW50ZWdyaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoeSBhcmUgdGhlc2UgdGhlIHRvcGljcyBvZgogICAgICAgICAgICAgICAgICAgIGlucXVpcnk/IFlvdXIgY29uY2x1c2lvbnMgYXJlIGRlcml2ZWQgZnJvbSB0aGUgYW1iYXNzYWRvcidzIHJlcG9ydHM6IHlvdSByZWFjaCBhCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgZGVjaXNpb24gaWYgdGhleSBhcmUgdHJ1ZSwgYSB3cm9uZyBkZWNpc2lvbiBpZiB0aGV5IGFyZSBmYWxzZS4gVGhlIGFkdmljZQogICAgICAgICAgICAgICAgICAgIG9mIGFtYmFzc2Fkb3JzIHlvdSByZWdhcmQgYXMgdGhlIG1vcmUgdHJ1c3R3b3J0aHkgYmVjYXVzZSBpdCBpcyBnaXZlbiBieSBtZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgcHJlc3VtYWJseSB1bmRlcnN0YW5kIHRoZWlyIG93biBtaXNzaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvciwgdGhlbiwgb3VnaHQgZXZlciB0byBiZSBjb252aWN0ZWQgb2YgZGVmZWN0aXZlIG9yIG1pc2NoaWV2b3VzCiAgICAgICAgICAgICAgICAgICAgY291bnNlbHMuIFRoaXJkbHksIHdoZW4gaGUgaGFzIGJlZW4gZXhwcmVzc2x5IGluc3RydWN0ZWQgd2hhdCB0byBzYXkgYW5kIHdoYXQgdG8KICAgICAgICAgICAgICAgICAgICBkbyBieSByZXNvbHV0aW9uIG9mIHRoZSBBc3NlbWJseSwgaXQgaXMgaGlzIGR1dHkgdG8gY29uZHVjdCBoaXMgYnVzaW5lc3MKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gc3VjaCBpbnN0cnVjdGlvbnMuIFZlcnkgd2VsbDsgYnV0IGhvdyBkb2VzIHRoZSBxdWVzdGlvbiBvZiB0aW1lCiAgICAgICAgICAgICAgICAgICAgYXJpc2U/IEJlY2F1c2UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGluCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IHRyYW5zYWN0aW9ucyBvcHBvcnR1bml0aWVzIGFyZSBvZnRlbiBzaG9ydC1saXZlZDogb25jZSB3aWxsZnVsbHkKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXJlZCBhbmQgYmV0cmF5ZWQgdG8gdGhlIGVuZW15LCB0aGV5IGNhbm5vdCBiZSByZWNvdmVyZWQsIGRvIHdoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbC4gPC90cmFuc2xhdGlvbj4="
translation['19.Intro.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGFzIGZvciB0aGUgcXVlc3Rpb24gb2YgYnJpYmVyeSBvcgogICAgICAgICAgICAgICAgICAgIG5vIGJyaWJlcnksIG9mIGNvdXJzZSB5b3UgYXJlIGFncmVlZCB0aGF0IGl0IGlzIGEgc2NhbmRhbG91cyBhbmQgYWJvbWluYWJsZQogICAgICAgICAgICAgICAgICAgIG9mZmVuY2UgdG8gYWNjZXB0IG1vbmV5IGZvciBhY3RzIGluanVyaW91cyB0byB0aGUgY29tbW9ud2VhbHRoLiBUaGUgYXV0aG9yIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXR1dGUsIGhvd2V2ZXIsIG1hZGUgbm8gc3VjaCBkaXN0aW5jdGlvbjsgaGUgZm9yYmFkZSB0aGUgYWNjZXB0YW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHJld2FyZHMgYWJzb2x1dGVseSwgaG9sZGluZywgYXMgSSBzdXBwb3NlLCB0aGF0IHRoZSBtYW4gd2hvIHRha2VzIHRoZW0gYW5kIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmVieSBjb3JydXB0ZWQgY2FuIG5vIGxvbmdlciBiZSB0cnVzdGVkIGJ5IHRoZSBzdGF0ZSBhcyBhIGp1ZGdlIG9mIHNvdW5kCiAgICAgICAgICAgICAgICAgICAgcG9saWN5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBJIGNhbiBlc3RhYmxpc2ggYnkgY2xlYXIKICAgICAgICAgICAgICAgICAgICBwcm9vZnMgdGhhdCB0aGUgcmVwb3J0cyBvZiB0aGUgZGVmZW5kYW50LCBBZXNjaGluZXMsIHdlcmUgZW50aXJlbHkgdW50cnV0aGZ1bCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBoZSBwcmV2ZW50ZWQgdGhlIEFzc2VtYmx5IGZyb20gaGVhcmluZyB0aGUgdHJ1dGggZnJvbSBtZTsgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBjb3Vuc2VscyB3ZXJlIHRvdGFsbHkgb3Bwb3NlZCB0byB5b3VyIHRydWUgaW50ZXJlc3RzOyB0aGF0IGhlIGRpc29iZXllZCBhbGwgeW91cgogICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9ucyB3aGVuIG9uIGVtYmFzc3k7IHRoYXQgYnkgaGlzIHdhc3RlIG9mIHRpbWUgbWFueSBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0aWVzIHdlcmUgbG9zdCB0byB0aGUgY2l0eTsgYW5kIGZpbmFsbHkgdGhhdCBmb3IgYWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZGVsaW5xdWVuY2llcyBoZSwgYXMgd2VsbCBhcyBQaGlsb2NyYXRlcywgYWNjZXB0ZWQgcHJlc2VudHMgYW5kIHJld2FyZHM7CiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlIGhpbSBndWlsdHkgYW5kIGV4YWN0IGEgcGVuYWx0eSBhZGVxdWF0ZSB0byBoaXMgY3JpbWVzLiBCdXQgaWYgSSBmYWlsCiAgICAgICAgICAgICAgICAgICAgdG8gcHJvdmUgYWxsIHRoZXNlIGZpdmUgY2hhcmdlcywgb3IgYW55IG9uZSBvZiB0aGVtLCB0aGVuIGNhbGwgbWUgYW4gaW1wb3N0b3IsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFjcXVpdCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['19.Intro.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGhhdmUgbWFueSBmdXJ0aGVyIGNoYXJnZXMgdG8gYWRkLCBzdWNoIGFzIG11c3QgZXhjaXRlIHVuaXZlcnNhbCBhYmhvcnJlbmNlOwogICAgICAgICAgICAgICAgICAgIGJ1dCwgYnkgd2F5IG9mIHByZWZhY2UsIEkgd2lsbCBmaXJzdCByZW1pbmQgeW91IG9mIHdoYXQgZG91YnRsZXNzIG1vc3Qgb2YgeW91CiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXIs4oCUb2YgdGhlIHBhcnR5IHdpdGggd2hpY2ggQWVzY2hpbmVzIGF0IGZpcnN0IHJhbmdlZCBoaW1zZWxmIGluCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY3MsIGFuZCBvZiB0aGUgc3BlZWNoZXMgd2hpY2ggaGUgdGhvdWdodCBmaXQgdG8gbWFrZSBpbiBvcHBvc2l0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwLiBJbiB0aGlzIHdheSBJIGhvcGUgdG8gc2F0aXNmeSB5b3UgdGhhdCBoaXMgZWFybHkgYWN0cyBhbmQgc3BlZWNoZXMKICAgICAgICAgICAgICAgICAgICBzdXBwbHkgYWJ1bmRhbnQgcHJvb2Ygb2YgaGlzIHByZXNlbnQgY29ycnVwdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['19.Intro.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BZXNjaGluZXMsIHRoZW4sIHdhcyB0aGUgZmlyc3QgbWFuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXMgaGUgY2xhaW1lZCBhdCB0aGUgdGltZSBpbiBhCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoLCB0byBwZXJjZWl2ZSB0aGF0IFBoaWxpcCBoYWQgZGVzaWducyBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgYW5kIHdhcyBjb3JydXB0aW5nIHNvbWUgb2YgdGhlIG1hZ25hdGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT4uIEl0IHdhcyBoZSB3aG8sIHdpdGggSXNjaGFuZGVyLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICBOZW9wdG9sZW11cywgYXMgaGlzIHVuZGVyc3R1ZHksIGFkZHJlc3NlZCB0aGUgQ291bmNpbCwgYW5kIGFkZHJlc3NlZCB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSwgb24gdGhpcyBzdWJqZWN0LCBhbmQgcGVyc3VhZGVkIHRoZW0gdG8gc2VuZCBhbWJhc3NhZG9ycyB0byBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWsgc3RhdGVzIHRvIGNvbnZlbmUgYSBjb25mZXJlbmNlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBmb3IgdGhlIGNvbnNpZGVyYXRpb24gb2Ygd2FyIHdpdGggUGhpbGlwLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgaGUgd2hvIGFmdGVyd2FyZHMsIG9uIGhpcyByZXR1cm4gZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjczNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzM1Ij5BcmNhZGlhPC9wbGFjZU5hbWU+LCBnYXZlIGEgcmVwb3J0IG9mIHRoZSBmaW5lCiAgICAgICAgICAgICAgICAgICAgbG9uZyBvcmF0aW9ucyB3aGljaCBoZSBzYWlkIGhlIGhhZCBkZWxpdmVyZWQgYXMgeW91ciBzcG9rZXNtYW4gYmVmb3JlIHRoZSBUZW4KICAgICAgICAgICAgICAgICAgICBUaG91c2FuZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4gaW4KICAgICAgICAgICAgICAgICAgICByZXBseSB0byBQaGlsaXAncyBjaGFtcGlvbiBIaWVyb255bXVzLCBhbmQgaGUgbWFkZSBhIGxvbmcgc3Rvcnkgb2YgdGhlIGVub3Jtb3VzCiAgICAgICAgICAgICAgICAgICAgaGFybSB3aGljaCBjb3JydXB0IHN0YXRlc21lbiBpbiB0aGUgcGF5IG9mIFBoaWxpcCB3ZXJlIGRvaW5nIG5vdCBvbmx5IHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGNvdW50cmllcyBidXQgdG8gdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['19.Intro.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBvbiB0aGUgc3RyZW5ndGggb2YKICAgICAgICAgICAgICAgICAgICBoaXMgcG9saWN5IGF0IHRoYXQgdGltZSwgYW5kIG9mIHRoZSBzYW1wbGUgaGUgaGFkIGV4aGliaXRlZCBvZiBoaXMgY29uZHVjdCwgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgYWN0dWFsbHkgYXBwb2ludGVkIGFzIG9uZSBvZiB0aGUgYW1iYXNzYWRvcnMgd2hlbiB5b3Ugd2VyZSBpbmR1Y2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgQXJpc3RvZGVtdXMsIE5lb3B0b2xlbXVzLCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCB3aG8gaGFkIGJyb3VnaHQgZW50aXJlbHkgbWlzbGVhZGluZyByZXBvcnRzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB0byBzZW5kIGFuIGVtYmFzc3kgdG8gbmVnb3RpYXRlCiAgICAgICAgICAgICAgICAgICAgcGVhY2Ugd2l0aCBQaGlsaXAuIEhlIHdhcyBjaG9zZW4sIG5vdCBhcyBvbmUgd2hvIHdvdWxkIG1ha2UgdHJhZmZpYyBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzLCBub3QgYXMgb25lIHdobyBoYWQgYW55IGNvbmZpZGVuY2UgaW4gUGhpbGlwLCBidXQgYXMgb25lIG9mIHRoZSBwYXJ0eQogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FzIHRvIGtlZXAgYW4gZXllIG9uIHRoZSByZXN0LCBmb3IgaW4gdmlldyBvZiBoaXMgZWFybHkgc3BlZWNoZXMsIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBrbm93biBob3N0aWxpdHkgdG8gUGhpbGlwLCBpdCB3YXMgbmF0dXJhbCB0aGF0IHlvdSBzaG91bGQgYWxsIGhhdmUgc3VjaCBhbgogICAgICAgICAgICAgICAgICAgIG9waW5pb24gb2YgdGhlIG1hbi4gPC90cmFuc2xhdGlvbj4="
translation['19.Intro.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIGNhbWUgdG8gbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgdGhhdCB3ZSBzaG91bGQgYWN0IHRvZ2V0aGVyIG9uIHRoZSBlbWJhc3N5LCBiZWluZyBlc3BlY2lhbGx5IHVyZ2VudAogICAgICAgICAgICAgICAgICAgIHRoYXQgd2Ugc2hvdWxkIGpvaW50bHkga2VlcCB3YXRjaCB1cG9uIHRoYXQgaW5mYW1vdXMgc2NvdW5kcmVsIFBoaWxvY3JhdGVzLiBBbmQKICAgICAgICAgICAgICAgICAgICB1bnRpbCBhZnRlciBvdXIgcmV0dXJuIGZyb20gdGhlIGZpcnN0IGVtYmFzc3kgSSBhdCBsZWFzdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFkIG5vIHN1c3BpY2lvbiB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGNvcnJ1cHQgYW5kIGhhZCBhbHJlYWR5IHNvbGQgaGltc2VsZi4gRm9yIGFwYXJ0IGZyb20gdGhlIHNwZWVjaGVzIHdoaWNoLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgc2FpZCwgaGUgaGFkIG1hZGUgb24gZm9ybWVyIG9jY2FzaW9ucywgaGUgcm9zZSBhdCB0aGUgZmlyc3Qgb2YgdGhlIHR3bwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxpZXMgYXQgd2hpY2ggeW91IGRpc2N1c3NlZCB0ZXJtcyBvZiBwZWFjZSwgYW5kIGJlZ2FuIHdpdGggYW4gZXhvcmRpdW0KICAgICAgICAgICAgICAgICAgICB3aGljaCBJIGJlbGlldmUgSSBjYW4gcmVwZWF0IHRvIHlvdSBpbiB0aGUgdmVyeSB3b3JkcyBoZSB1c2VkOiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz7igJxJZiBQaGlsb2NyYXRlcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFkIGdpdmVuIG1hbnkgZGF5cyB0byBzdHVkeWluZyBob3cKICAgICAgICAgICAgICAgICAgICBiZXN0IGhlIGNvdWxkIHRod2FydCB0aGUgcGVhY2UsIEkgZG8gbm90IHRoaW5rIGhlIGNvdWxkIGhhdmUgZm91bmQgYSBiZXR0ZXIgd2F5CiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGUgcHJlc2VudCBwcm9wb3NhbC4gU3VjaCBhIHBlYWNlIGFzIHRoaXMgSSBmb3Igb25lIHdpbGwgbmV2ZXIgYWR2aXNlIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgdG8gbWFrZSwgc28gbG9uZyBhcyBhIHNpbmdsZSBBdGhlbmlhbiByZW1haW5zIGFsaXZlOyB5ZXQgSSBkbyBzYXkgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIG1ha2UgcGVhY2Uu4oCdIEluIHN1Y2ggdGVybXMgaGUgc3Bva2UsIGNvbmNpc2VseSBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIG1vZGVyYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['19.Intro.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlbiBvbiB0aGUgbmV4dCBkYXksIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcGVhY2Ugd2FzIHRvIGJlIHJhdGlmaWVkLCB3aGVuIEkgc3VwcG9ydGVkIHRoZSByZXNvbHV0aW9ucyBvZiBvdXIgYWxsaWVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBkaWQgd2hhdCBJIGNvdWxkIHRvIHNlY3VyZSBmYWlyIGFuZCBlcXVpdGFibGUgdGVybXMsIGFuZCB3aGVuIHRoZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBzeW1wYXRoaXplZCB3aXRoIG15IHB1cnBvc2UgYW5kIHJlZnVzZWQgdG8gaGVhciBhIHdvcmQgZnJvbSB0aGUgY29udGVtcHRpYmxlCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXMsIHVwIGp1bXBlZCB0aGUgdmVyeSBtYW4gd2hvIGhhZCBtYWRlIHRoZSBzcGVlY2ggSSBoYXZlIHF1b3RlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBoZWFkIG9mIGFsbCBvZiB5b3Ugb25seSB0aGUgZGF5IGJlZm9yZSwgYW5kIGFkZHJlc3NlZCB5b3UgaW4gc3VwcG9ydCBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzLCA8L3RyYW5zbGF0aW9uPg=="
translation['19.Intro.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz51c2luZyBsYW5ndWFnZSBmb3Igd2hpY2gsIGFzCiAgICAgICAgICAgICAgICAgICAgSGVhdmVuIGlzIG15IHdpdG5lc3MsIGhlIGRlc2VydmVzIHRvIGRpZSBtYW55IHRpbWVzIG92ZXIuIEhlIHRvbGQgeW91IHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gZm9yZ2V0IHRoZSBhY2hpZXZlbWVudHMgb2YgeW91ciBmb3JlZmF0aGVyczsgdGhhdCB5b3Ugc2hvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIHRvbGVyYXRlIGFsbCB0aGF0IHRhbGsgYWJvdXQgb2xkIHRyb3BoaWVzIGFuZCBzZWEtZmlnaHRzOyBhbmQgdGhhdCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGRyYWZ0IGFuZCBlbmFjdCBhIGxhdyBmb3JiaWRkaW5nIGFpZCB0byBhbnkgR3JlZWtzIHdobyBoYWQgbm90IHByZXZpb3VzbHkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGFpZCB0byB5b3UuIFRoaXMgc3BlZWNoIHRoZSBzaGFtZWxlc3MgcmVwcm9iYXRlIGZvdW5kIGNvdXJhZ2UgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIHdoaWxlIHRoZSBhbWJhc3NhZG9ycywgd2hvbSB5b3Ugc3VtbW9uZWQgZnJvbSB0aGUgR3JlZWsgY2l0aWVzIGF0IGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uLCBiZWZvcmUgaGUgaGFkIHNvbGQgaGltc2VsZiwgd2VyZSBzdGFuZGluZyBhdCBoaXMgZWxib3cgYW5kIGxpc3RlbmluZwogICAgICAgICAgICAgICAgICAgIHRvIHdoYXQgaGUgc2FpZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJOYXJyIiB1bml0PSJwYXJ0IiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgeW91IGFwcG9pbnRlZCBoaW0gYSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICB0aW1lLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcyBhbiBlbnZveSB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlIG9hdGggb2YgcmF0aWZpY2F0aW9uOyBhbmQgSSBzaGFsbCBzaG9ydGx5IGhhdmUgdG8gdGVsbCB5b3UgaG93IGhlCiAgICAgICAgICAgICAgICAgICAgYWdhaW4gd2FzdGVkIHRpbWUsIG1pc2hhbmRsZWQgYWxsIHRoZSBhZmZhaXJzIG9mIHRoZSBjb21tb253ZWFsdGgsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkbHkgZmVsbCBvdXQgd2l0aCBtZSBpbiByZWdhcmQgdG8gdGhlbSB3aGVuIEkgdHJpZWQgdG8gc3RhbmQgaW4gaGlzIHdheS4KICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCBieSByZWFzb24gb2YgdGhlIHBlcnNpc3RlbnQgbWlzY29uZHVjdCBvZiB0aGVzZSBtZW4sIGFuZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRpc29iZWRpZW5jZSB0byBpbnN0cnVjdGlvbnMsIHdlIGNhbWUgYmFjayBmcm9tIHRoZSBlbWJhc3N5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBvYXRoc+KAlHRoYXQgaXMgdGhlIGVtYmFzc3kgd2hpY2ggaXMgdGhlIHN1YmplY3Qgb2YgdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBzY3J1dGlueeKAlHdpdGhvdXQgaGF2aW5nIHJlYWxpemVkIGFueSBzaW5nbGUgb25lLCBncmVhdCBvciBzbWFsbCwgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYWR2YW50YWdlcyB3aGljaCB3ZXJlIHByb21pc2VkIG9yIGV4cGVjdGVkIHdoZW4geW91IGFwcHJvdmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHBlYWNlLOKAlHdpdGggbm90aGluZyBidXQgZGVjZXB0aW9uIGFuZCBkaXNhcHBvaW50bWVudC4gVGhlbiB3ZSByZXBhaXJlZAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBDb3VuY2lsLiBUaGVyZSBhcmUgbWFueSBleWUtd2l0bmVzc2VzIG9mIHdoYXQgSSBhbSBhYm91dCB0byByZWxhdGUsIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsLWhvdXNlIHdhcyB0aHJvbmdlZCB3aXRoIHNwZWN0YXRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5JIGNhbWUgZm9yd2FyZCBhbmQgcmVwb3J0ZWQgdGhlIHdob2xlIHRydXRoIHRvIHRoZSBDb3VuY2lsLiBJIGRlbm91bmNlZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiwgYW5kIHRvbGQgdGhlIHdob2xlIHN0b3J5LCBwb2ludCBieSBwb2ludCwgYmVnaW5uaW5nIHdpdGggdGhvc2UgZWFybGllcgogICAgICAgICAgICAgICAgICAgIGhvcGVzIGNyZWF0ZWQgYnkgdGhlIHJlcG9ydHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+IGFuZCBBcmlzdG9kZW11cywgZ29pbmcgb24gdG8gdGhlIG1vcmUgcmVjZW50IG9yYXRpb25zCiAgICAgICAgICAgICAgICAgICAgb2YgQWVzY2hpbmVzIGF0IHRoZSBhcHByb3ZhbCBvZiB0aGUgcGVhY2UsIGFuZCBzaG93aW5nIHRvIHdoYXQgc3RyYWl0cyB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIHJlZHVjZWQgdGhlIGNpdHkuIFRoZXJlIHJlbWFpbmVkIHRoZSBxdWVzdGlvbiBvZiB0aGUgUGhvY2lhbnMgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgYW5kIHdlIG11c3QKICAgICAgICAgICAgICAgICAgICBub3TigJRzdWNoIHdhcyBteSBhZHZpY2XigJR3ZSBtdXN0IG5vdCByZXBlYXQgb3VyIGV4cGVyaWVuY2UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRocm93IHRoZW0gb3ZlcmJvYXJkLCBhbmQgc28sIGluIHJlbGlhbmNlIHVwb24gYSBzdWNjZXNzaW9uIG9mIGlkbGUgaG9wZXMKICAgICAgICAgICAgICAgICAgICBhbmQgYXNzdXJhbmNlcywgYWxsb3cgb3Vyc2VsdmVzIHRvIGZhbGwgaW50byB0aGUgbGFzdCBleHRyZW1pdHkgb2YgZGlzYXN0ZXIuIEkKICAgICAgICAgICAgICAgICAgICBjb252aW5jZWQgdGhlIENvdW5jaWw7IDwvdHJhbnNsYXRpb24+"
translation['19.Narr.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiB0aGUgQXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICBtZXQsIGFuZCB3ZSBoYWQgdG8gYWRkcmVzcyB0aGUgd2hvbGUgYm9keSBvZiBjaXRpemVucywgQWVzY2hpbmVzIHRvb2sgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgdHVybiBvZiBhbGwgb2YgdXMuIEFuZCBoZXJlIEkgbW9zdCBlYXJuZXN0bHkgZW50cmVhdCB5b3UgdG8gdmVyaWZ5IG15IGFjY291bnQgYnkKICAgICAgICAgICAgICAgICAgICB5b3VyIG93biByZWNvbGxlY3Rpb25zOyBmb3IgSSBhbSBub3cgcmVsYXRpbmcgdHJhbnNhY3Rpb25zIHdoaWNoIHVsdGltYXRlbHkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHlvdXIgYWZmYWlycyB0byBjb21wbGV0ZSBhbmQgZmluYWwgcnVpbi4gSGUgdXR0ZXJseSBpZ25vcmVkIHRoZSBkdXR5IG9mCiAgICAgICAgICAgICAgICAgICAgZ2l2aW5nIGEgcmVwb3J0IG9mIHRoZSBkb2luZ3Mgb2YgdGhlIGVtYmFzc3kuIEhlIG5ldmVyIG1lbnRpb25lZCB0aGUgc3BlZWNoZXMKICAgICAgICAgICAgICAgICAgICBtYWRlIHRvIHRoZSBDb3VuY2lsLCBvciB0b2xkIHlvdSB3aGV0aGVyIGhlIGRpc3B1dGVkIHRoZSB0cnV0aCBvZiBteSBzdGF0ZW1lbnQuCiAgICAgICAgICAgICAgICAgICAgQnV0IGhlIG1hZGUgc3VjaCBhIGZpbmUgc3BlZWNoLCBzbyBmdWxsIG9mIGJpZyBwcm9taXNlcywgdGhhdCBoZSBjYXJyaWVkIHlvdSBhbGwKICAgICAgICAgICAgICAgICAgICBhd2F5IHdpdGggaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgZGVjbGFyZWQgdGhhdCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWx5IGNvbnZlcnRlZCBQaGlsaXAgdG8gdGhlIGludGVyZXN0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaW4gcmVzcGVjdCBvZiB0aGUgQW1waGljdHlvbmljIHF1ZXN0aW9uIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgZWxzZS4gSGUgd2VudCB0aHJvdWdoIGEgbG9uZyBkaWF0cmliZSBhZ2FpbnN0IHRoZSBUaGViYW5zLCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIHNhaWQgaGUgaGFkIGFkZHJlc3NlZCB0byBQaGlsaXAgaGltc2VsZiwgcmVjYXBpdHVsYXRpbmcgdGhlIG1haW4gcG9pbnRzLiBIZQogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgeW91IGEgY2FsY3VsYXRpb24gdGhhdCwgdGhhbmtzIHRvIGhpcyBkaXBsb21hY3ksIHdpdGhvdXQgbGVhdmluZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgaG9tZXMsIHdpdGhvdXQgYW55IGNhbXBhaWduaW5nIG9yIHdvcnJ5LCB3aXRoaW4gdHdvIG9yIHRocmVlIGRheXMgeW91IHdvdWxkIGhlYXIKICAgICAgICAgICAgICAgICAgICB0aGUgbmV3cyBvZiB0aGUgYmVsZWFndWVybWVudCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGluZGVwZW5kZW50bHkgb2YgdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MyI+Qm9lb3RpYTwvcGxhY2VOYW1lPiwgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5vZgogICAgICAgICAgICAgICAgICAgIHRoZSByZXBvcHVsYXRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiwgYW5kIG9mIHRoZSByZWNvdmVyeSBvZgogICAgICAgICAgICAgICAgICAgIEFwb2xsbydzIHRyZWFzdXJlLCBub3QgZnJvbSB0aGUgUGhvY2lhbnMsIGJ1dCBmcm9tIHRoZSBUaGViYW5zLCB3aG8gaGFkIHBsYW5uZWQKICAgICAgICAgICAgICAgICAgICB0aGUgc2VpenVyZSBvZiB0aGUgdGVtcGxlLiBJdCB3YXMgaGltc2VsZiwgaGUgYWRkZWQsIHdobyBoYWQgaW5zdHJ1Y3RlZCBQaGlsaXAKICAgICAgICAgICAgICAgICAgICB0aGF0IHRob3NlIHdobyBjb250cml2ZWQgdGhlIHByb2plY3Qgd2VyZSBxdWl0ZSBhcyBzYWNyaWxlZ2lvdXMgYXMgdGhlIG1lbiBieQogICAgICAgICAgICAgICAgICAgIHdob3NlIGhhbmRzIGl0IHdhcyBleGVjdXRlZDsgYW5kIHRoZXJlZm9yZSB0aGUgVGhlYmFucyBoYWQgc2V0IGEgcHJpY2Ugb24gaGlzCiAgICAgICAgICAgICAgICAgICAgaGVhZCEgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoYWQgZXZlbiBoZWFyZCBzb21lIEV1Ym9lYW5zLCB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIHRob3JvdWdobHkgZnJpZ2h0ZW5lZCBieSB0aGUgZnJpZW5kc2hpcCB0aGF0IGhhZCBiZWVuIGNlbWVudGVkIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICBQaGlsaXAgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdXR0ZXIgdGhlc2UgdmVyeQogICAgICAgICAgICAgICAgICAgIHdvcmRzOiDigJxHZW50bGVtZW4gb2YgdGhlIEVtYmFzc3ksIHdlIGtub3cgYWxsIGFib3V0IHRoZSB0ZXJtcyBvbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIGNvbmNsdWRlZCBwZWFjZSB3aXRoIFBoaWxpcCwgYW5kIHdlIGFyZSBhd2FyZSB0aGF0IHlvdSBoYXZlIGdpdmVuIHVwCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB0byBoaW0sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGFzIGFncmVlZCB0byBoYW5kIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgeW91LuKAnSBIZSBoYWQgYWxzbywgaGUgc2FpZCwgc2V0dGxlZCBhbm90aGVyIG1hdHRlciwgYnV0IGhlIHRob3VnaHQgaXQKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgbm90IHRvIG1lbnRpb24gaXQganVzdCB5ZXTigJRzb21lIG9mIGhpcyBjb2xsZWFndWVzIHdlcmUgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIHNvIGplYWxvdXMgb2YgaGltLiBUaGlzIHdhcyBhIHZlaWxlZCBhbGx1c2lvbiB0byBPcm9wdXMuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28sIGluIGFsbCB0aGUgZ2xvcnkgb2YgdGhlc2UgZGlzY2xvc3VyZXMsIHdpdGgKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHkgcmVnYXJkaW5nIGhpbSBhcyBhIGdyYW5kIHNwZWFrZXIgYW5kIGEgbWFydmVsbG91cyBtYW4sIGhlIGRlc2NlbmRlZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHRyaWJ1bmUgaW4gaGlzIG1vc3QgbWFqZXN0aWMgbWFubmVyLiBUaGVuIEkgcm9zZSwgYW5kIHNhaWQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBzdG9yeSB3YXMgbmV3cyB0byBtZS4gSSBhdHRlbXB0ZWQgdG8gcmVwZWF0IHRoZSBzdGF0ZW1lbnQgSSBoYWQgbWFkZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsOyBidXQgQWVzY2hpbmVzIGFuZCBQaGlsb2NyYXRlcyBwb3N0ZWQgdGhlbXNlbHZlcyBvbmUgb24gZWl0aGVyIHNpZGUKICAgICAgICAgICAgICAgICAgICBvZiBtZeKAlHNob3V0aW5nLCBpbnRlcnJ1cHRpbmcsIGFuZCBmaW5hbGx5IGplZXJpbmcuIFlvdSB3ZXJlIGFsbAogICAgICAgICAgICAgICAgICAgIGxhdWdoaW5nOyB5b3Ugd291bGQgbm90IGxpc3RlbiB0byBtZSwgYW5kIHlvdSBkaWQgbm90IHdhbnQgdG8gYmVsaWV2ZSBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB3aGF0IEFlc2NoaW5lcyBoYWQgcmVwb3J0ZWQuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSBtdXN0CiAgICAgICAgICAgICAgICAgICAgc2F5IHRoYXQgeW91ciBmZWVsaW5nIHdhcyBxdWl0ZSBuYXR1cmFsLiBGb3IgaG93IGNvdWxkIGFueW9uZSwgZmlsbGVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBhbnRpY2lwYXRpb24gb2YgdGhvc2Ugd29uZGVyZnVsIGJlbmVmaXRzLCBiZSBwYXRpZW50IG9mIGEgc3BlYWtlciB3aG8gdG9sZCB5b3UKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSB3b3VsZCBuZXZlciBnZXQgdGhlbSwgYW5kIGV2ZW4gZGVub3VuY2VkIHRoZSBjb25kdWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJlbmVmYWN0b3JzPyBBdCB0aGUgbW9tZW50LCBJIGltYWdpbmUsIGV2ZXJ5dGhpbmcgZWxzZSB3YXMgdGhyb3duIGludG8gdGhlIHNoYWRlCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGhvcGVzIGFuZCBleHBlY3RhdGlvbnMgdGhhdCB3ZXJlIHN1Z2dlc3RlZCB0byB5b3U7IGNvbnRyYWRpY3Rpb24gc2VlbWVkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbWVyZSBhbm5veWFuY2UgYW5kIG1hbGljZTsgYW5kIHRoZXNlIGdyZWF0IGFjaGlldmVtZW50cyB3ZXJlIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICBhbWF6aW5nbHkgZmluZSBhbmQgbW9zdCBiZW5lZmljaWFsIHRvIHRoZSBjb21tb253ZWFsdGguIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5IGhhdmUgSSBiZWd1biBieQogICAgICAgICAgICAgICAgICAgIHJldml2aW5nIHRoZXNlIG1lbW9yaWVzIGFuZCBxdW90aW5nIHRob3NlIG9sZCBzcGVlY2hlcz8gTXkgZmlyc3QgYW5kIGNoaWVmCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyB0aGF0LCB3aGVuCiAgICAgICAgICAgICAgICAgICAgeW91IGhlYXIgbWUgcmVsYXRlIHNvbWUgcGVyZm9ybWFuY2UgdGhhdCBzZWVtcyB0byB5b3UgYXRyb2Npb3VzIGFuZCBpbmNyZWRpYmxlLAogICAgICAgICAgICAgICAgICAgIG5vIG9uZSBtYXkgYXNrIGluIHN1cnByaXNlOiDigJxUaGVuIHdoeSBkaWQgeW91IG5vdCBzcGVhayBvdXQgYW5kIGdpdmUKICAgICAgICAgICAgICAgICAgICB1cyB0aGlzIGluZm9ybWF0aW9uIGluc3RhbnRseT/igJ0gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5idXQKICAgICAgICAgICAgICAgICAgICB0aGF0LCBieSByZWNhbGxpbmcgdGhlIGFzc3VyYW5jZXMgYnkgd2hpY2ggb24gZXZlcnkgb2NjYXNpb24gdGhlc2UgbWVuIHN0b3BwZWQKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgZnJvbSBnZXR0aW5nIHlvdXIgYXR0ZW50aW9uLCBhbmQgdGhhdCBtYWduaWZpY2VudCBwcm9taXNlIG9mIEFlc2NoaW5lcywKICAgICAgICAgICAgICAgICAgICB5b3UgbWF5IHJlYWxpemUgdGhhdCB5b3UgaGF2ZSB0byB0aGFuayBoaW0gZm9yIHRoaXMgY3Jvd25pbmcKICAgICAgICAgICAgICAgICAgICBpbmp1cnks4oCUdGhhdCB5b3Ugd2VyZSBwcmVjbHVkZWQgZnJvbSBsZWFybmluZyB0aGUgdHJ1dGggcHJvbXB0bHkgYW5kCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHByb3BlciB0aW1lLCBiZWluZyBjaGVhdGVkIGJ5IGhvcGVzIGFuZCBpbXBvc3R1cmVzIGFuZCB2YWluIGFzc3VyYW5jZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCBJIHNheSwgaXMgbXkgZmlyc3QgYW5kIG1haW4gcHVycG9zZQogICAgICAgICAgICAgICAgICAgIGluIHRoaXMgbmFycmF0aW9uLiBXaGF0IGlzIG15IHNlY29uZCBwdXJwb3NlPyBJdCBpcyBvbmUgb2Ygbm8gbGVzcyBpbXBvcnRhbmNlLiBJCiAgICAgICAgICAgICAgICAgICAgd2FudCB5b3UgdG8gcmVtaW5kIHlvdXJzZWx2ZXMgb2YgdGhhdCBwb2xpY3kgb2YgcHJlY2F1dGlvbiBhbmQgZGlzdHJ1c3Qgb2YKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgd2hpY2ggdGhpcyBtYW4gZGVsaWJlcmF0ZWx5IGNob3NlIHdoZW4gaGUgd2FzIHN0aWxsIHVuYnJpYmVkLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBjb21wYXJlIHRoZSBjb25maWRlbmNlIGFuZCBmcmllbmRzaGlwIHRoYXQgYWZ0ZXJ3YXJkcyBzcHJhbmcgdXAgc28gc3VkZGVubHk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlbiwgaWYgdGhlIGZhaXIgcmVwb3J0cyBoZSBsYWlkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSBoYXZlIHJlYWxseSBwcm92ZWQgdHJ1ZSwgYW5kIGlmIGFsbCB0aGUgcmVzdWx0cyBoYXZlIGJlZW4gZm9ydHVuYXRlLAogICAgICAgICAgICAgICAgICAgIHRvIGFkbWl0IHRoZSB2aWV3IHRoYXQgdGhhdCBmcmllbmRzaGlwIHdhcyBmb3JtZWQgZm9yIHRydXRoJ3Mgc2FrZSBhbmQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIGNpdHk7IGJ1dCwgaWYgdGhlIHNlcXVlbCBoYXMgZ2l2ZW4gdGhlIGxpZSB0byBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJlZGljdGlvbnMsIGlmIGl0IGhhcyBpbnZvbHZlZCB0aGUgY2l0eSBpbiBtdWNoIGRpc2hvbm9yIGFuZCBpbiBncmlldm91cwogICAgICAgICAgICAgICAgICAgIHBlcmlscywgdGhlbiBiZSBhc3N1cmVkIHRoYXQgaGlzIG93biBzb3JkaWQgZ3JlZWQgaGFzIHByb21wdGVkIHRoaXMgY2hhbmdlIG9mCiAgICAgICAgICAgICAgICAgICAgZnJvbnQsIGJlY2F1c2UgaGUgaGFzIHNvbGQgdGhlIHRydXRoIGZvciBhIGJyaWJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2aW5nIGFsbG93ZWQgbXlzZWxmIHRvIHJlZmVyIHRvCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb2xkIHNwZWVjaGVzLCBJIHdpc2ggdG8gcmVsYXRlIGZpcnN0IG9mIGFsbCBob3cgdGhlc2UgbWVuIHRvb2sgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3Mgb2YgdGhlIFBob2NpYW5zIG91dCBvZiB5b3VyIGhhbmRzLiBHZW50bGVtZW4gb2YgdGhlIGp1cnksIEkgaG9wZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiB5b3Ugd2lsbCByZWdhcmQgbXkgY2hhcmdlcyBhbmQgYWNjdXNhdGlvbnMgYXMgdG9vIGJpZyBmb3IgdGhlIGNhbGlicmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50LCBtZWFzdXJpbmcgaGltIGFnYWluc3QgdGhlIG1hZ25pdHVkZSBvZiB0aGUgdHJhbnNhY3Rpb25zLiBSZWZsZWN0CiAgICAgICAgICAgICAgICAgICAgcmF0aGVyIHRoYXQsIGlmIGFueSBtYW4gc29ldmVyLCBwbGFjZWQgYnkgeW91IGluIHRoZSBwb3NpdGlvbiBoZSBmaWxsZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRydXN0ZWQgdG8gZGVhbCB3aXRoIHRoZSBvY2Nhc2lvbnMgdGhhdCBhcm9zZSwgaGFkIHRha2VuIGhpcmUsIGFuZCBoYWQgc291Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZSBhbmQgbWlzbGVhZCB5b3UgYXMgQWVzY2hpbmVzIGRpZCwgaGUgd291bGQgaGF2ZSBicm91Z2h0IGFib3V0IGV4YWN0bHkKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBkaXNhc3RlciBhcyBBZXNjaGluZXMuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvdWdoIHlvdQogICAgICAgICAgICAgICAgICAgIG9mdGVuIGVtcGxveSBpbnNpZ25pZmljYW50IG1lbiBmb3IgcHVibGljIGJ1c2luZXNzLCBpdCBkb2VzIG5vdCBmb2xsb3cgdGhhdAogICAgICAgICAgICAgICAgICAgIHRob3NlIGFmZmFpcnMgYXJlIGluc2lnbmlmaWNhbnQgZm9yIHdoaWNoIHRoZSByZXN0IG9mIHRoZSB3b3JsZCBhY2tub3dsZWRnZXMgb3VyCiAgICAgICAgICAgICAgICAgICAgY29tcGV0ZW5jZS4gQXNzdXJlZGx5IG5vdC4gQWdhaW4sIGl0IHdhcyBQaGlsaXAsIG9mIGNvdXJzZSwgd2hvIHJlYWxseSBkZXN0cm95ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgUGhvY2lhbnM7IGJ1dCB0aGVzZSBtZW4gY28tb3BlcmF0ZWQuIFRoZSBxdWVzdGlvbiBvbiB3aGljaCB5b3UgYXJlIHRvIGZpeAogICAgICAgICAgICAgICAgICAgIHlvdXIgbWluZHMgaXMgd2hldGhlciB0aGV5IHB1cnBvc2VseSB3YXN0ZWQgYW5kIHRocmV3IGF3YXkgYW55IGNoYW5jZXMgdGhhdCBjYW1lCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGVtYmFzc3kgb2Ygc2F2aW5nIHRoZSBQaG9jaWFucy4gSSBkbyBub3Qgc3VnZ2VzdCB0aGF0IEFlc2NoaW5lcyBkZXN0cm95ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgUGhvY2lhbnMgYWxsIGJ5IGhpbXNlbGYuIEhvdyBjb3VsZCBoZT8gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+R2l2ZSBtZSB0aGUgcmVzb2x1dGlvbiB3aGljaCB0aGUgQ291bmNpbAogICAgICAgICAgICAgICAgICAgIGFkb3B0ZWQgb24gbXkgcmVwb3J0LCBhbmQgdGhlIGV2aWRlbmNlIG9mIHRoZSBtZW1iZXIgd2hvIG1vdmVkIGl0IG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbi4gVGhlc2UgZG9jdW1lbnRzIHdpbGwgc2F0aXNmeSB5b3UgdGhhdCBJIGRpZCBub3QgaG9sZCBteSBwZWFjZSB0aGVuLCB0bwogICAgICAgICAgICAgICAgICAgIHJ1biBhd2F5IGZyb20gbXkgYWN0aW9ucyBub3cs4oCUZm9yIEkgd2FzIGxheWluZyBteSBjb21wbGFpbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRyeWluZyB0byBmb3JlY2FzdCByZXN1bHRzLCBhdCB0aGUgZmlyc3Qgb3Bwb3J0dW5pdHk7IGFuZCBhbHNvIHRoYXQgdGhlIENvdW5jaWwsCiAgICAgICAgICAgICAgICAgICAgbm90IGJlaW5nIGRlYmFycmVkIGZyb20gaGVhcmluZyB0aGUgdHJ1dGggZnJvbSBtZSwgZGlkIG5vdCBnaXZlIHRoZXNlIG1lbiBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBhIHZvdGUgb2YgdGhhbmtzLCBvciBhbiBpbnZpdGF0aW9uIHRvIHRoZSBwdWJsaWMgZGlubmVyIGluIHRoZSBUb3duIEhhbGwuIFdlIGFyZQogICAgICAgICAgICAgICAgICAgIHRvbGQgdGhhdCB0aGVzZSBjb21wbGltZW50cyBoYWQgbmV2ZXIgYmVmb3JlIGJlZW4gd2l0aGhlbGQgZnJvbSBhbnkgYW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgZm91bmRhdGlvbiBvZiBBdGhlbnPigJRub3QgZXZlbiBmcm9tIFRpbWFnb3Jhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIEludHJvZHVjdGlvbiwgcHAuIDI0MS0yLjwvbm90ZT4gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSBjb25kZW1uZWQgdG8gZGVhdGguIFRoZXNlIG1lbiwgaG93ZXZlciwgaGFkIHRvIGdvIHdpdGhvdXQgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5SZWFkIGZpcnN0IHRoZSBkZXBvc2l0aW9uLCBhbmQgdGhlbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uLCB0byB0aGUganVyeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJSZXNvbHV0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlc29sdXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlc29sdXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBpcyBubyBjb21tZW5kYXRpb24sIG5vIGludml0YXRpb24KICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBDb3VuY2lsIHRvIHRoZSBhbWJhc3NhZG9ycyB0byBkaW5lIGluIHRoZSBUb3duIEhhbGwuIElmIEFlc2NoaW5lcyBzYXlzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzdWNoIGEgdGhpbmcgZXhpc3RzLCBsZXQgaGltIHByb2R1Y2UgYW5kIGV4aGliaXQgaXQsIGFuZCBJIHdpbGwgc2l0IGRvd24uCiAgICAgICAgICAgICAgICAgICAgQnV0IG5vOyB0aGVyZSBpcyBub25lLiBOb3csIGlmIGFsbCB0aGUgZW52b3lzIGFjdGVkIGFsaWtlLCB0aGUgQ291bmNpbCB3YXMgcmlnaHQKICAgICAgICAgICAgICAgICAgICBpbiB0aGFua2luZyBub2JvZHks4oCUZm9yIHdlIGhhZCBhbGwgaW4gdmVyeSB0cnV0aCBiZWhhdmVkIHNjYW5kYWxvdXNseQogICAgICAgICAgICAgICAgICAgIGluZGVlZC4gQnV0IGlmIHNvbWUgYWN0ZWQgcmlnaHRseSBhbmQgb3RoZXJzIHdyb25nbHksIHRoZSB3ZWxsLWNvbmR1Y3RlZCwgaXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBzZWVtLCBtdXN0IHN1Ym1pdCB0byBhIGRpc2NvdXJ0ZXN5IHByb3Zva2VkIGJ5IHRob3NlIHdobyBoYWQgcGxheWVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJvZ3VlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgdGhlbiBjYW4geW91IGZpbmQgYW4gZWFzeSBhbnN3ZXIgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb24sIFdobyB3YXMgdGhlIHJvZ3VlPyBDb25zdWx0IHlvdXIgb3duIHJlY29sbGVjdGlvbnMsIGFuZCBtYXJrIHdobwogICAgICAgICAgICAgICAgICAgIGRlbm91bmNlZCB0aGUgdHJhbnNhY3Rpb25zIGF0IHRoZSBvdXRzZXQuIEZvciBpdCBpcyBjbGVhciB0aGF0LCBpZiB0aGUgZXZpbC1kb2VyCiAgICAgICAgICAgICAgICAgICAgY291bGQgaG9sZCBoaXMgcGVhY2UsIGVzY2FwZSBpbW1lZGlhdGUgZGV0ZWN0aW9uLCBhbmQgbmV2ZXIgYWZ0ZXJ3YXJkcyBhbGxvdwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdG8gYmUgY2FsbGVkIHRvIGFjY291bnQsIHRoYXQgd2FzIGdvb2QgZW5vdWdoIGZvciBoaW07IHdoZXJlYXMgdGhlIG1hbgogICAgICAgICAgICAgICAgICAgIHdpdGggYSBnb29kIGNvbnNjaWVuY2UgYmV0aG91Z2h0IGhpbXNlbGYgdGhhdCBpdCB3b3VsZCBiZSB2ZXJ5IGhhcmQgaWYgYnkKICAgICAgICAgICAgICAgICAgICBrZWVwaW5nIHNpbGVuY2UgaGUgc2hvdWxkIGJlY29tZSBhIHJlcHV0ZWQgYWNjb21wbGljZSBpbiBzY2FuZGFsb3VzIGFuZCB3aWNrZWQKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLiBXZWxsIHRoZW4sIGl0IHdhcyBJIHdobyBkZW5vdW5jZWQgdGhlc2UgbWVuIGZyb20gdGhlIG91dHNldCwgYW5kIG5vbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGVtIGRlbm91bmNlZCBtZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlIENvdW5jaWwgYWRvcHRlZCB0aGlzIHJlc29sdXRpb24uIFdoZW4gdGhlIEFzc2VtYmx5IG1ldCwKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgd2FzIGFscmVhZHkgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LiBGb3IgdGhhdCBpcyB0aGUgYmVnaW5uaW5nIG9mIHRoZWlyIG1pc2RlZWRzOyB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIHN1cnJlbmRlcmVkIGNvbnRyb2wgdG8gUGhpbGlwIGFuZCB0aGVuLOKAlGFsdGhvdWdoIHRoZSByaWdodCBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBmb3IgeW91IHdhcywgZmlyc3QgdG8gaGVhciB0aGUgZmFjdHMsIG5leHQgdG8gZGVjaWRlLCBhbmQgZmluYWxseSB0byBjYXJyeSBvdXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY2lzaW9uLOKAlHlvdSBoZWFyZCBub3RoaW5nIHVudGlsIGhlIHdhcyBhbHJlYWR5IG9uIHRoZSBzcG90LCBhbmQKICAgICAgICAgICAgICAgICAgICBpdCB3YXMgbm8gZWFzeSBtYXR0ZXIgdG8gYWR2aXNlIHlvdSB3aGF0IHRvIGRvLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBubyBvbmUgcmVhZCB0aGUgcmVzb2x1dGlvbiB0byB0aGUgQXNzZW1ibHksIGFuZCB0aGUgcGVvcGxlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgaGVhcmQgaXQuIEhvd2V2ZXIsIEFlc2NoaW5lcyByb3NlIGFuZCBkZWxpdmVyZWQgdGhhdCBvcmF0aW9uIHdoaWNoIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFscmVhZHkgZGVzY3JpYmVkLCBhYm91dCB0aGUgd29uZGVyZnVsIGFkdmFudGFnZXMgaGUgaGFkIGluZHVjZWQgUGhpbGlwIHRvIGdyYW50CiAgICAgICAgICAgICAgICAgICAgdG8geW91LCBhbmQgdGhlIHByaWNlIHNldCBvbiBoaXMgaGVhZCBieSB0aGUgVGhlYmFucyBpbiBjb25zZXF1ZW5jZTsgYW5kIHNvLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIHlvdSB3ZXJlIGF0IGZpcnN0IGFsYXJtZWQgYXQgUGhpbGlwJ3MgYXBwcm9hY2gsIGFuZCBpbmRpZ25hbnQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBoYWQgZ2l2ZW4geW91IG5vIHdhcm5pbmcsIHlvdSBiZWNhbWUgYXMgbWlsZCBhcyBsYW1icywgZXhwZWN0aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgZ2V0IGFsbCB0aGF0IHlvdSBkZXNpcmVkLCBhbmQgcmVmdXNlZCB0byBoZWFyIGEgd29yZCBmcm9tIG1lIG9yIGFueW9uZSBlbHNlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBsZXR0ZXIgZnJvbSBQaGlsaXAgd2FzIHJlYWQuIEl0CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gY29tcG9zZWQgYnkgQWVzY2hpbmVzIHdpdGhvdXQgb3VyIGtub3dsZWRnZSwgYW5kIHdhcyBpbiBmYWN0IGEKICAgICAgICAgICAgICAgICAgICBkb3ducmlnaHQsIGV4cGxpY2l0IHdyaXR0ZW4gZGVmZW5jZSBvZiB0aGUgZXJyb3JzIHRoZXNlIG1lbiBoYWQgY29tbWl0dGVkLiBGb3IKICAgICAgICAgICAgICAgICAgICBpdCBhbGxlZ2VzIHRoYXQgUGhpbGlwIHN0b3BwZWQgdGhlbSB3aGVuIHRoZXkgd2FudGVkIHRvIHZpc2l0IHRoZSB0b3ducyBhbmQKICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHRoZSBvYXRocywgYW5kIHRoYXQgaGUgZGV0YWluZWQgdGhlbSBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgaGVscCBoaW0KICAgICAgICAgICAgICAgICAgICB0byByZWNvbmNpbGUgdGhlIEhhbGlhbnMgd2l0aCB0aGUgUGhhcnNhbGlhbnM7IFBoaWxpcCB0YWtlcyBvbiBoaXMgb3duIHNob3VsZGVycwogICAgICAgICAgICAgICAgICAgIHRoZSBidXJkZW4gb2YgYWxsIHRoZWlyIGRlbGlucXVlbmNpZXM6IDwvdHJhbnNsYXRpb24+"
translation['19.Narr.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgUGhvY2lhbnMgYW5kIHRoZSBUaGVzcGlhbnMsIGFuZCBvZiBhbGwgdGhlIHByb21pc2VzIHJlcG9ydGVkIHRvIHlvdSBieQogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyzigJRub3QgYSB3b3JkISBUaGUgam9iIHdhcyBub3QgbWFuYWdlZCBpbiB0aGlzIGZhc2hpb24gYnkgbWVyZQogICAgICAgICAgICAgICAgICAgIGFjY2lkZW50LiBGb3IgZGVyZWxpY3Rpb25zIG9mIGR1dHksIGZvciB3aGljaCB0aGV5IG91Z2h0IHRvIGhhdmUgYmVlbiBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAganVzdGljZSwgYW5kIGZvciB0aGVpciBmYWlsdXJlIHRvIGRvIHRoZWlyIHdvcmsgYWNjb3JkaW5nIHRvIHlvdXIgaW5zdHJ1Y3Rpb25zLAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB0YWtlcyBhbGwgdGhlIGJsYW1lLiBIZSB0ZWxscyB5b3UgaXQgd2FzIGhpcyBmYXVsdCzigJRhbmQgb2YKICAgICAgICAgICAgICAgICAgICBjb3Vyc2UgeW91IHdlcmUgbmV2ZXIgbGlrZWx5IHRvIGhhdmUgYW55IG9wcG9ydHVuaXR5IG9mIHB1bmlzaGluZyBoaW0hCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgb3RoZXIgaGFuZCwgYWxsIHRoZSBtYXR0ZXJzIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgd2FzIHRyeWluZyB0byBjaGVhdCB5b3UgYW5kIG92ZXJyZWFjaCB5b3Ugd2VyZSBsZWZ0IGZvciBBZXNjaGluZXMgdG8KICAgICAgICAgICAgICAgICAgICByZXBvcnQgYnkgd29yZCBvZiBtb3V0aCwgc28gdGhhdCB5b3UgbWlnaHQgbmV2ZXIgaGF2ZSBpdCBpbiB5b3VyIHBvd2VyIHRvCiAgICAgICAgICAgICAgICAgICAgaW5jcmltaW5hdGUgUGhpbGlwIG9yIHRocm93IGFueSBibGFtZSBvbiBoaW0sIGFzIHRoZSBhc3NlcnRpb25zIHdlcmUgbm90IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZm91bmQgaW4gdGhlIGxldHRlciBvciBpbiBhbnkgb3RoZXIgZGlyZWN0IGNvbW11bmljYXRpb24gb2YgaGlzLiBSZWFkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnkgdGhlIGxldHRlciB3cml0dGVuIGJ5IEFlc2NoaW5lcyBhbmQgZGlzcGF0Y2hlZCBieSBQaGlsaXAuIFlvdSB3aWxsIG9ic2VydmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGFncmVlcyBleGFjdGx5IHdpdGggbXkgZGVzY3JpcHRpb24uIFJlYWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LOKAlHN1Y2ggYSBuaWNlLCBjb3VydGVvdXMgbGV0dGVyISBCdXQgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMsIGFib3V0IHRoZSBUaGViYW5zLCBhYm91dCBldmVyeXRoaW5nIHRoYXQgQWVzY2hpbmVzCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZWTigJRub3QgYSBzY3JhcGUgb2YgdGhlIHBlbiEgVGhlcmUgaXMgbm90aGluZyBpbiBpdCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0LCBhcyB5b3Ugc2hhbGwgc2VlIGF0IG9uY2UuIEZvciBoZSB0ZWxscyB5b3UgdGhhdCBoZSBkZXRhaW5lZCB0aGVtIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG1pZ2h0IGhlbHAgaGltIHRvIHJlY29uY2lsZSB0aGUgSGFsaWFucy4gV2VsbCwgdGhlIHJlY29uY2lsaWF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIEhhbGlhbnMgY29uc2lzdGVkIGluIHRoZWlyIGJlaW5nIGNhc3Qgb3V0IG9mIHRoZWlyIGhvbWVzLCBhbmQgdGhlaXIgY291bnRyeQogICAgICAgICAgICAgICAgICAgIGRldmFzdGF0ZWQuIEFzIGZvciB0aGUgcHJpc29uZXJzLCB0aGlzIG1hbiwgd2hvIHdhbnRlZCB0byBrbm93IHdoYXQgaGUgY291bGQgZG8KICAgICAgICAgICAgICAgICAgICB0byBvYmxpZ2UgeW91LCBkZWNsYXJlcyB0aGF0IHRoZSBpZGVhIG9mIGdldHRpbmcgdGhlbSBsaWJlcmF0ZWQgbmV2ZXIgZW50ZXJlZAogICAgICAgICAgICAgICAgICAgIGhpcyBoZWFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Uga25vdyB0aGF0IGV2aWRlbmNlIGhhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgYmVlbiBnaXZlbiBiZWZvcmUgdGhlIEFzc2VtYmx5LOKAlGFuZCB0aGF0IGV2aWRlbmNlIHNoYWxsIG5vdyBiZQogICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkLOKAlHRoYXQgSSBoYWQgc3RhcnRlZCB3aXRoIGEgdGFsZW50IGluIG15IHBvY2tldCBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICByYW5zb207IGFuZCB0aGVyZWZvcmUsIHRvIHJvYiBtZSBvZiBhIHBhdHJpb3RpYyBhY3QsIEFlc2NoaW5lcyBwZXJzdWFkZWQgUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgdG8gd3JpdGUgdGhlc2Ugd29yZHMuIE5vdyBmb3IgdGhlIG1vc3QgaW1wb3J0YW50IHBvaW50LiBUaGUgbWFuIHdobywgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgbGV0dGVyLCB3aGljaCB3ZSBicm91Z2h0IGhvbWUsIHdyb3RlIHRoZXNlIHdvcmRzOiDigJxJIHdvdWxkIHdyaXRlCiAgICAgICAgICAgICAgICAgICAgbW9yZSBleHBsaWNpdGx5IG9mIHRoZSBiZW5lZml0cyBJIGludGVuZCB0byBjb25mZXIgb24geW91LCBpZiBJIHdlcmUgY2VydGFpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGFsbGlhbmNlIHdpbGwgYmUgbWFkZSzigJ3igJR0aGlzIG1hbiwgbm93IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgYWxsaWFuY2UgaGFzIGJlZW4gbWFkZSwgc2F5cyB0aGF0IGhlIGRvZXMgbm90IGtub3cgaG93IGhlIGNhbiBncmF0aWZ5IHlvdS4gTm90CiAgICAgICAgICAgICAgICAgICAga25vdyB0aGUgdmVyeSB0aGluZyBoZSBwcm9taXNlZCEgV2h5LCBoZSBtdXN0IGhhdmUga25vd24gaXQsIHVubGVzcyBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBob29kd2lua2luZyB1cyB0aHJvdWdob3V0LiBUbyBwcm92ZSwgaG93ZXZlciwgdGhhdCBoZSBkaWQgc28gd3JpdGUgYXQgdGhhdCB0aW1lLAogICAgICAgICAgICAgICAgICAgIHBsZWFzZSB0YWtlIGFuZCByZWFkIHRoZSBhY3R1YWwgcGFzc2FnZSBmcm9tIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIGxldHRlcizigJRiZWdpbm5pbmcgaGVyZS4gUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJFeGNlcnB0IGZyb20gdGhlIGxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHQgZnJvbSB0aGUgbGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV4Y2VycHQgZnJvbSB0aGUgbGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHNlZSB0aGF0LAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoZSBnb3QgaGlzIHBlYWNlLCBoZSBjb3ZlbmFudGVkIHRoYXQsIGlmIHlvdSBzaG91bGQgbWFrZSBhbGxpYW5jZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGltIGFzIHdlbGwsIGhlIHdvdWxkIHNwZWNpZnkgaW4gd3JpdGluZyB0aGUgZ3JlYXQgYmVuZWZpdHMgdGhhdCBoZSB3b3VsZCBjb25mZXIKICAgICAgICAgICAgICAgICAgICBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEJ1dCBub3cgdGhhdCBib3RoIHBlYWNlCiAgICAgICAgICAgICAgICAgICAgYW5kIGFsbGlhbmNlIGFyZSBjb25jbHVkZWQsIGhlIHNheXMgdGhhdCBoZSBkb2VzIG5vdCBrbm93IHdoYXQgaGUgY2FuIGRvIHRvCiAgICAgICAgICAgICAgICAgICAgb2JsaWdlIHlvdSwgYnV0IHRoYXQsIGlmIHlvdSB3aWxsIHRlbGwgaGltLCBoZSB3aWxsIGRvIGFueXRoaW5nIOKAnHRoYXQKICAgICAgICAgICAgICAgICAgICBpcyBjb25zaXN0ZW50IHdpdGggaGlzIG93biBob25vciBhbmQgcmVwdXRhdGlvbuKAneKAlHRha2luZwogICAgICAgICAgICAgICAgICAgIHJlZnVnZSBpbiB0aGlzIHNhdmluZyBjbGF1c2UsIGFuZCBsZWF2aW5nIGhpbXNlbGYgYSBsb29waG9sZSBpbiBjYXNlIHlvdSBtYWtlCiAgICAgICAgICAgICAgICAgICAgYW55IHByb3Bvc2FsIG9yIGFyZSBpbmR1Y2VkIHRvIGFzayBhbnkgZmF2b3IuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoaXMgY2hpY2FuZXJ5LCBhbmQgbXVjaCBiZXNpZGVzLCBtaWdodAogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBpbnN0YW50bHkgZGV0ZWN0ZWQsIGFuZCB5b3UgbWlnaHQgaGF2ZSBiZWVuIGluZm9ybWVkIGFuZCBzcGFyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FjcmlmaWNlIG9mIHlvdXIgaW50ZXJlc3RzLCBpZiB5b3UgaGFkIG5vdCBiZWVuIGNoZWF0ZWQgb3V0IG9mIHRoZSB0cnV0aCBieQogICAgICAgICAgICAgICAgICAgIHRoYXQgc3Rvcnkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiBhbmQgdGhlIGltbWluZW50IHB1bmlzaG1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucy4gWWV0IGlmIFBoaWxpcCdzIHByb21pc2VzIHdlcmUgbWVyZWx5IGZvciBzaG93LCBhbmQgaWYgdGhlIGNpdHkgd2FzIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZGVsdWRlZCwgaXQgd2FzIHJpZ2h0IHRvIG1lbnRpb24gdGhlbTsgaWYsIG9uIHRoZSBvdGhlciBoYW5kLCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICByZWFsbHkgdG8gYmUgZnVsZmlsbGVkLCBpdCB3YXMgYmVzdCB0byBzYXkgbm90aGluZyBhYm91dCB0aGVtLiBGb3IgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCB3YXMgc28gZmFyIG1hdHVyZWQgdGhhdCB0aGUgVGhlYmFucyBjb3VsZCBnYWluIG5vdGhpbmcgYnkgaGVhcmluZyBvZiBpdCwKICAgICAgICAgICAgICAgICAgICB3aHkgaGFzIGl0IG5vdCBiZWVuIGV4ZWN1dGVkPyBCdXQgaWYgaXQgaGFzIGJlZW4gdGh3YXJ0ZWQgYmVjYXVzZSB0aGV5IGhhZCBuZXdzCiAgICAgICAgICAgICAgICAgICAgb2YgaXQgaW4gdGltZSwgd2hvIGxldCB0aGUgc2VjcmV0IG91dD8gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5BZXNjaGluZXM/IE9oIG5vOyBpdCB3YXMgbmV2ZXIgbWVhbnQgdG8gY29tZSBvZmYsIGFuZCBoZSBuZWl0aGVyIHdhbnRlZCBpdCBub3IKICAgICAgICAgICAgICAgICAgICBleHBlY3RlZCBpdDsgbGV0IGhpbSBiZSBxdWl0IG9mIHRoZSBpbXB1dGF0aW9uIG9mIGJsYWJiaW5nISBUaGUgdHJ1dGggaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIGhpcyBwdXJwb3NlIHJlcXVpcmVkIHRoYXQgeW91IHNob3VsZCBiZSBob29kd2lua2VkIGJ5IHRoYXQgdGFsazsgdGhhdCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlIHRvIGhlYXIgdGhlIHRydXRoIGZyb20gbWUgYW5kIHNob3VsZCBzdGF5IGF0IGhvbWU7IGFuZCB0aGF0IHRoZXkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdHJpdW1waGFudGx5IGNhcnJ5IGEgZGVjcmVlIGVuc3VyaW5nIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgUGhvY2lhbnMuIFRoYXQgaXMKICAgICAgICAgICAgICAgICAgICB3aHkgdGhpcyB0aXNzdWUgb2YgbGllcyB3YXMgd292ZW47IHRoYXQgaXMgd2h5IGl0IHdhcyBtYWRlIHRoZSB0aGVtZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhciBoYXJhbmd1ZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHdoZW4gSSBoZWFyZCBoaW0gbWFraW5nIGFsbCB0aGVzZSBmaW5lIHByb21pc2VzLCBhbmQga25ldyB0byBhCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbnR5IHRoYXQgaGUgd2FzIGx5aW5nLOKAlGJ1dCBsZXQgbWUgdGVsbCB5b3Ugd2h5IEkga25ldy4gRmlyc3QsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSwgd2hlbiBQaGlsaXAgd2FzIG9uIHRoZSBwb2ludCBvZiBzd2VhcmluZyB0aGUgb2F0aCBvZiByYXRpZmljYXRpb24sIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zIHdlcmUgZXhwcmVzc2x5IGV4Y2x1ZGVkIGZyb20gdGhlIHRyZWF0eSBieSB0aGVzZSBtZW4gYW5kIHRoYXQgZXhjbHVzaW9uCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgYmVlbiBwYXNzZWQgb3ZlciBpbiBzaWxlbmNlLCBpZiB0aGUgUGhvY2lhbnMgd2VyZSB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBkZWxpdmVyZWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBjbGF1c2UgZXhjbHVkaW5nIHRoZSBQaG9jaWFucwogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBiZW5lZml0IG9mIHRoZSBwZWFjZSBoYWQgYmVlbiByZXNjaW5kZWQgYnkgdGhlIEFzc2VtYmx5CiAgICAgICAgICAgICAgICAgICAgICAgIO+8iFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjE1OSIgdmFsaWQ9InllcyI+RGVtLiAxOS4xNTk8L2JpYmw+77yJLiBBZXNjaGluZXMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhpcyBmcmllbmRzIHdlcmUgdGhlcmVmb3JlIGFjdGluZyB1bHRyYSB2aXJlcyBpbiByZXN0b3JpbmcgdGhlIGNsYXVzZSwKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IGFkbWluaXN0ZXJlZCB0aGUgb2F0aC4gSGFkIHRoZXkgYmVlbiByZWFsbHkgY29udmluY2VkIHRoYXQgUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVuZGVkIHRvIHNwYXJlIHRoZSBQaG9jaWFucywgdGhleSB3b3VsZCBoYXZlIHJldGFpbmVkIHRoZSBtb3JlIGdlbmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlLOKAnHRoZSBBdGhlbmlhbnMgYW5kIHRoZWlyIGFsbGllcy7igJ0gSXQgaXMgbW9yZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9iYWJsZSB0aGF0IFBoaWxpcCBoaW1zZWxmIGluc2lzdGVkIG9uIGV4Y2x1ZGluZyB0aGUgUGhvY2lhbnMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgd2VyZSBhcyBwb3dlcmxlc3MgYXMgdGhlIFJvbWFuIHNlbmF0b3JzIGJlZm9yZSBBbGFyaWMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGFuZCBzZWNvbmRseSBiZWNhdXNlIG5vbmUgb2YgdGhlIGFtYmFzc2Fkb3JzIGZyb20gUGhpbGlwLCBub3IgUGhpbGlwJ3Mgb3duCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLCBidXQgb25seSBBZXNjaGluZXMsIG1lbnRpb25lZCB0aGUgcHJvbWlzZXMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMTU5IiB2YWxpZD0ieWVzIj5EZW0uIDE5LjE1OTwvYmlibD7vvIkuIEFlc2NoaW5lcwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgaGlzIGZyaWVuZHMgd2VyZSB0aGVyZWZvcmUgYWN0aW5nIHVsdHJhIHZpcmVzIGluIHJlc3RvcmluZyB0aGUgY2xhdXNlLAogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgYWRtaW5pc3RlcmVkIHRoZSBvYXRoLiBIYWQgdGhleSBiZWVuIHJlYWxseSBjb252aW5jZWQgdGhhdCBQaGlsaXAKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gc3BhcmUgdGhlIFBob2NpYW5zLCB0aGV5IHdvdWxkIGhhdmUgcmV0YWluZWQgdGhlIG1vcmUgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBwaHJhc2Us4oCcdGhlIEF0aGVuaWFucyBhbmQgdGhlaXIgYWxsaWVzLuKAnSBJdCBpcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JhYmxlIHRoYXQgUGhpbGlwIGhpbXNlbGYgaW5zaXN0ZWQgb24gZXhjbHVkaW5nIHRoZSBQaG9jaWFucywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyB3ZXJlIGFzIHBvd2VybGVzcyBhcyB0aGUgUm9tYW4gc2VuYXRvcnMgYmVmb3JlIEFsYXJpYy48L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBkcmF3aW5nIG15IGNvbmNsdXNpb25zLCBJIHJvc2UgYW5kIHByZXNlbnRlZCBteXNlbGYsIGFuZCBtYWRlIGFuCiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdCB0byByZXBseS4gV2hlbiB5b3UgcmVmdXNlZCBtZSBhIGhlYXJpbmcsIEkgaGVsZCBteSBwZWFjZSwgZXhjZXB0IHRoYXQgSQogICAgICAgICAgICAgICAgICAgIHByb3Rlc3RlZOKAlGFuZCBJIGVudHJlYXQgdGhhdCB5b3Ugd2lsbCByZWNhbGwgdGhpc+KAlHRoYXQgSSBoYWQKICAgICAgICAgICAgICAgICAgICBubyBrbm93bGVkZ2Ugb2YgdGhlIHByb21pc2VzLCBub3RoaW5nIHRvIGRvIHdpdGggdGhlbSwgYW5kLCBJIGFkZGVkLCBubyBmYWl0aCBpbgogICAgICAgICAgICAgICAgICAgIHRoZW0uIEF0IHRoZSB3b3JkcyDigJxubyBmYWl0aCBpbiB0aGVtLOKAnSB5b3UgYmVjYW1lCiAgICAgICAgICAgICAgICAgICAgZXhhc3BlcmF0ZWQ7IGFuZCBJIHByb2NlZWRlZDog4oCcSWYgYW55IG9mIHRoZXNlIHByb21pc2VzIGNvbWUgdHJ1ZSwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBiZSBzdXJlIHlvdSBnaXZlIHRoYW5rcwogICAgICAgICAgICAgICAgICAgIGFuZCBob25vcnMgYW5kIGRlY29yYXRpb25zIHRvIHRoZXNlIGdlbnRsZW1lbjsgYnV0IG5vdCB0byBtZS4gSWYsIGhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzIHR1cm4gb3V0IG90aGVyd2lzZSwgc2VlIHRoYXQgaXQgaXMgb24gdGhlbSB0aGF0IHlvdSB2ZW50IHlvdXIgd3JhdGguIEkKICAgICAgICAgICAgICAgICAgICBzdGFuZCBhc2lkZS7igJ0gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz7igJxOb3QKICAgICAgICAgICAgICAgICAgICBub3cs4oCdIHNhaWQgQWVzY2hpbmVzLCBpbnRlcnJ1cHRpbmcgbWUsIOKAnGRvIG5vdCBzdGFuZCBhc2lkZQogICAgICAgICAgICAgICAgICAgIG5vdzsgb25seSBkbyBub3QgcHV0IGluIHlvdXIgY2xhaW0gdGhlbi7igJ0KICAgICAgICAgICAgICAgICAgICDigJxBZ3JlZWQ74oCdIHNhaWQgSSwg4oCcaWYgSSBkbywgSSBzaGFsbCBiZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3cm9uZy7igJ0gVGhlbiBQaGlsb2NyYXRlcyByb3NlLCBhbmQgc2FpZCwgaW4gYSB2ZXJ5IHN1cGVyY2lsaW91cwogICAgICAgICAgICAgICAgICAgIG1hbm5lcjog4oCcTm8gd29uZGVyIERlbW9zdGhlbmVzIGFuZCBJIGRpc2FncmVlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBIZSBkcmlua3Mgd2F0ZXI7IEkgZHJpbmsKICAgICAgICAgICAgICAgICAgICB3aW5lLuKAnSBBbmQgdGhlbiB5b3UgYWxsIGxhdWdoZWQuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGxvb2sgYXQgdGhlIGRlY3JlZSwgd2hpY2ggUGhpbG9jcmF0ZXMKICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmRzIGRyYWZ0ZWQgYW5kIGhhbmRlZCB0byB0aGUgY2xlcmsuIEl0IHNvdW5kcyB3ZWxsIGVub3VnaCB0byB0aGUgZWFyOwogICAgICAgICAgICAgICAgICAgIGJ1dCBpZiB5b3Ugd2lsbCB0YWtlIGludG8gYWNjb3VudCB0aGUgb2NjYXNpb24gb24gd2hpY2ggaXQgd2FzIHByb3Bvc2VkLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMgd2hpY2ggQWVzY2hpbmVzIHdhcyBtYWtpbmcgYXQgdGhlIHRpbWUsIGl0IHdpbGwgYmUgY2xlYXIgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBzaW1wbHkgaGFuZGluZyBvdmVyIHRoZSBQaG9jaWFucyB0byBQaGlsaXAgYW5kIHRoZSBUaGViYW5z4oCUSSBtaWdodAogICAgICAgICAgICAgICAgICAgIGFsbW9zdCBzYXksIHdpdGggc2hhY2tsZXMgb24gdGhlaXIgd3Jpc3RzLiBSZWFkIHRoZSBkZWNyZWUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IG9ic2VydmUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaG93IGZ1bGwgdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIGlzIG9mIGNvbXBsaW1lbnRzIGFuZCBmaW5lIHBocmFzZXM7IHRoYXQgaXQgcHJvdmlkZXMgdGhhdCB0aGUgcGVhY2UsIGFuZCBhbHNvCiAgICAgICAgICAgICAgICAgICAgdGhlIGFsbGlhbmNlLCBtYWRlIHdpdGggUGhpbGlwIHNoYWxsIGJlIGV4dGVuZGVkIHRvIGhpcyBwb3N0ZXJpdHk7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhhbmtzIGFyZSBnaXZlbiB0byBQaGlsaXAgZm9yIGhpcyBwcm9taXNlIG9mIGp1c3QgZGVhbGluZ3MuIEJ1dCBpdCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIHdobyBoYWQgbWFkZSBhbnkgcHJvbWlzZXM7IHNvIGZhciBmcm9tIHByb21pc2luZyBoZSBzYXlzIHRoYXQgaGUgZG9lcyBub3QKICAgICAgICAgICAgICAgICAgICBrbm93IHdoYXQgdG8gZG8gdG8gb2JsaWdlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgd2hvIHdhcyBQaGlsaXAncyBzcG9rZXNtYW4gYW5kIGdhdmUgdW5kZXJ0YWtpbmdzLiBUaGVuIFBoaWxvY3JhdGVzLAogICAgICAgICAgICAgICAgICAgIHRha2luZyBhZHZhbnRhZ2Ugb2YgeW91ciByZWFkeSBhY2NlcHRhbmNlIG9mIEFlc2NoaW5lcycgd29yZHMsIGluc2VydHMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGEgY2xhdXNlIHByb3ZpZGluZyB0aGF0LCBpZiB0aGUgUGhvY2lhbnMgc2hvdWxkIG5vdCBkbyB3aGF0IHdhcyByaWdodCBhbmQKICAgICAgICAgICAgICAgICAgICBnaXZlIHVwIHRoZSB0ZW1wbGUgdG8gdGhlIEFtcGhpY3R5b25pYyBDb3VuY2lsLCB0aGUgQXRoZW5pYW4gcGVvcGxlIHNob3VsZCBzZW5kCiAgICAgICAgICAgICAgICAgICAgYSBmb3JjZSB0byBjb2VyY2UgdGhlIHJlY2FsY2l0cmFudHMuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28sCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXMgeW91IHN0YXllZCBhdCBob21lCiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiB0YWtpbmcgdGhlIGZpZWxkLCBhcyB0aGUgTGFjZWRhZW1vbmlhbnMgaGFkIGRpc2Nlcm5lZCBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIHRyZWFjaGVyeSBhbmQgd2l0aGRyYXduLCBhbmQgYXMgbm8gbWVtYmVycyBvZiB0aGUgQ291bmNpbCB3ZXJlIG9uIHRoZSBzcG90CiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IHRoZSBUaGVzc2FsaWFucyBhbmQgdGhlIFRoZWJhbnMsIGhlIHJlYWxseSBoYXMgcHJvcG9zZWQsIHdpdGggdGhlIHV0bW9zdAogICAgICAgICAgICAgICAgICAgIGNpdmlsaXR5LCB0byBoYW5kIHRoZSB0ZW1wbGUgb3ZlciB0byB0aGVtLiBUaGUgd29yZGluZyBpcywg4oCcdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgQW1waGljdHlvbnM74oCdIGJ1dCB3aGF0IEFtcGhpY3R5b25zPyBUaGVyZSB3ZXJlIG5vbmUgdGhlcmUgZXhjZXB0CiAgICAgICAgICAgICAgICAgICAgVGhlc3NhbGlhbnMgYW5kIFRoZWJhbnMuIEhlIG1ha2VzIG5vIHN1Y2ggcHJvcG9zYWwgYXMgdGhhdCB0aGUgQW1waGljdHlvbmljCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCBzaG91bGQgYmUgY29udmVuZWQsIG9yIHRoYXQgb3BlcmF0aW9ucyBzaG91bGQgYmUgc3VzcGVuZGVkIHVudGlsIGl0CiAgICAgICAgICAgICAgICAgICAgbWVldHMsIG9yIHRoYXQgUHJveGVudXMgc2hvdWxkIG1hcmNoIGFnYWluc3QgdGhlIFBob2NpYW5zLCBvciB0aGF0IHRoZSBBdGhlbmlhbnMKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGFrZSB0aGUgZmllbGQuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAsIGhvd2V2ZXIsIGRpZAogICAgICAgICAgICAgICAgICAgIHNlbmQgeW91IHR3byBsZXR0ZXJzIG9mIHN1bW1vbnMuIFllcywgYnV0IG5vdCB3aXRoIHRoZSBpbnRlbnRpb24gdGhhdCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdGFrZSB0aGUgZmllbGQuIFRoYXQgaXMgY2VydGFpbjsgb3RoZXJ3aXNlIGhlIHdvdWxkIG5vdCBoYXZlIGRlc3Ryb3llZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgb2YgZ29pbmcgb3V0IGJlZm9yZSBoZSBzdW1tb25lZCB5b3UsIG5vciB3b3VsZCBoZSBoYXZlIGRldGFpbmVkIG1lCiAgICAgICAgICAgICAgICAgICAgd2hlbiBJIHdhbnRlZCB0byBzYWlsIGhvbWUsIG5vciBvcmRlcmVkIEFlc2NoaW5lcyB0byBtYWtlIHN0YXRlbWVudHMgY2FsY3VsYXRlZAogICAgICAgICAgICAgICAgICAgIHRvIGRldGVyIHlvdSBmcm9tIGdvaW5nIG91dC4gTm8sIGhpcyBvYmplY3Qgd2FzIHRoYXQgeW91LCBpbiB0aGUgYmVsaWVmIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBkbyBhbGwgdGhhdCB5b3Ugd2FudGVkLCBzaG91bGQgbWFrZSBubyBkZWNyZWUgcHJlanVkaWNpYWwgdG8gaGltLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMgbWlnaHQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCBhbmQgaG9sZCBvdXQgaW4gcmVsaWFuY2UgdXBvbiBob3BlcwogICAgICAgICAgICAgICAgICAgIGFmZm9yZGVkIGJ5IHlvdSwgYnV0IG1pZ2h0IG1ha2UgdW5jb25kaXRpb25hbCBzdXJyZW5kZXIgdG8gaGltIGluIHNoZWVyCiAgICAgICAgICAgICAgICAgICAgZGVzcGVyYXRpb24uIFJlYWQgUGhpbGlwJ3MgYWN0dWFsIGxldHRlcnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgbGV0dGVycywKICAgICAgICAgICAgICAgICAgICB0aGVuLCBkbyBzdW1tb24geW91LOKAlHllcywgaW5kZWVkLCBhdCBsYXN0ITxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZm9yY2Ugb2YgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8pM60zrcgzrPOtTwvZm9yZWlnbj5pcyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIuIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5LZW5uZWR5PC9zdXJuYW1lPjwvcGVyc05hbWU+IHRyYW5zbGF0ZXMgaXQKICAgICAgICAgICAgICAgICAgICAgICAg4oCcZm9yIHRoZSBmaXJzdCB0aW1lLOKAnSBwcmVzdW1hYmx5IG1lYW5pbmcgdGhlIGZpcnN0IHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaGFzIGV2ZXIgdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgcGFyYWdyYXBoIHN1Z2dlc3RzIHRoYXQgRGVtLiBpcyBpbnNpbnVhdGluZyB0aGF0IFBoaWxpcCwgd2hvc2UgYWltCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyB0byBrZWVwIHRoZSBBdGhlbmlhbnMgaW5hY3RpdmUsIGRlZmVycmVkIHRoZSBpbnZpdGF0aW9uIHRpbGwgaXQgd2FzIHRvbwogICAgICAgICAgICAgICAgICAgICAgICBsYXRlIGZvciB0aGVtIHRvIHB1dCBhIGZvcmNlIGluIHRoZSBmaWVsZCwgd2hldGhlciB0byBzdXBwb3J0IFBoaWxpcCBvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMuPC9ub3RlPiBCdXQgaWYgdGhlcmUgaGFkIGJlZW4gYW55IGhvbmVzdHkgaW4gdGhlIGxldHRlcnMsIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgdGhlIGR1dHkgb2YgdGhlc2UgbWVuIHRvIGV4aG9ydCB5b3UgdG8gdGFrZSB0aGUgZmllbGQsIGFuZCB0byBwcm9wb3NlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBQcm94ZW51cywgd2hvbSB0aGV5IGtuZXcgdG8gYmUgaW4gdGhvc2UgcGFydHMsIHNob3VsZCBhdCBvbmNlIG1hcmNoIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGFpZCBvZiBQaGlsaXAuIFRoZWlyIGFjdHVhbCBwb2xpY3kgd2FzIHZlcnkgZGlmZmVyZW50LiBOYXR1cmFsbHk7IGZvciB0aGV5IGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBhcHBseSB0aGVpciBtaW5kcyB0byB0aGUgcGhyYXNpbmcgb2YgdGhlIGxldHRlcjsgdGhleSB3ZXJlIGluIHRoZSBzZWNyZXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZW50aW9uIHdpdGggd2hpY2ggaXQgd2FzIHdyaXR0ZW4sIGFuZCB3aXRoIHRoYXQgaW50ZW50aW9uIHRoZXkgY29uY3VycmVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvb3BlcmF0ZWQuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8pM60zrcgzrPOtTwvZm9yZWlnbj5pcyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIuIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5LZW5uZWR5PC9zdXJuYW1lPjwvcGVyc05hbWU+IHRyYW5zbGF0ZXMgaXQKICAgICAgICAgICAgICAgICAgICAgICAg4oCcZm9yIHRoZSBmaXJzdCB0aW1lLOKAnSBwcmVzdW1hYmx5IG1lYW5pbmcgdGhlIGZpcnN0IHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+S2VubmVkeTwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaGFzIGV2ZXIgdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgcGFyYWdyYXBoIHN1Z2dlc3RzIHRoYXQgRGVtLiBpcyBpbnNpbnVhdGluZyB0aGF0IFBoaWxpcCwgd2hvc2UgYWltCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyB0byBrZWVwIHRoZSBBdGhlbmlhbnMgaW5hY3RpdmUsIGRlZmVycmVkIHRoZSBpbnZpdGF0aW9uIHRpbGwgaXQgd2FzIHRvbwogICAgICAgICAgICAgICAgICAgICAgICBsYXRlIGZvciB0aGVtIHRvIHB1dCBhIGZvcmNlIGluIHRoZSBmaWVsZCwgd2hldGhlciB0byBzdXBwb3J0IFBoaWxpcCBvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMuPC90cmFuc2xhdGlvbj4="
translation['19.Narr.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGVyZWZvcmUgdGhlIFBob2NpYW5zIGxlYXJuZWQgeW91ciBwb2xpY3kgZnJvbSB0aGUgcHJvY2VlZGluZ3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHksIHJlY2VpdmVkIHRoZSBkZWNyZWUgb2YgUGhpbG9jcmF0ZXMsIGFuZCB3ZXJlIGluZm9ybWVkIG9mIHRoZSByZXBvcnQKICAgICAgICAgICAgICAgICAgICBhbmQgcHJvbWlzZXMgb2YgQWVzY2hpbmVzLCB0aGVpciBydWluIHdhcyBjb21wbGV0ZS4gSnVzdCBjb25zaWRlci4gVGhlcmUgd2VyZQogICAgICAgICAgICAgICAgICAgIHNvbWUgbWVuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw0MDAzOTYzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDQwMDM5NjMiPlBob2NpczwvcGxhY2VOYW1lPiwgc2Vuc2libGUgbWVuLCB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgbm8gY29uZmlkZW5jZSBpbiBQaGlsaXAuIFRoZXkgd2VyZSBpbmR1Y2VkIHRvIHRydXN0IGhpbS4gV2h5PyBCZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25jZWl2ZWQgdGhhdCwgdGhvdWdoIFBoaWxpcCBoYWQgZGVjZWl2ZWQgdGhlbSB0ZW4gdGltZXMgb3ZlciwgaGUgd291bGQgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBoYXZlIGRhcmVkIHRvIGRlY2VpdmUgQXRoZW5pYW5zIGFuZCBlbnZveXMgb2YgdGhlIEF0aGVuaWFuIHBlb3BsZSwgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICByZXBvcnQgb2YgQWVzY2hpbmVzIHdhcyB0cnVlLCBhbmQgdGhhdCBkZXN0cnVjdGlvbiBoYWQgb3ZlcnRha2VuIG5vdCB0aGVtc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBUaGViYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIG90aGVycyB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHJlYWR5IGF0IGFsbCBoYXphcmRzIHRvIGhvbGQgb3V0IHRvIHRoZSBlbmQ7IGJ1dCBldmVuIHRoZXkgd2VyZSBtb2xsaWZpZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVyc3Vhc2lvbiB0aGF0IFBoaWxpcCB3YXMgdGhlaXIgZnJpZW5kLCBhbmQgdGhhdCwgaWYgdGhleSByZWZ1c2VkIGNvbXBsaWFuY2UsCiAgICAgICAgICAgICAgICAgICAgeW91LCBmcm9tIHdob20gdGhleSB3ZXJlIGV4cGVjdGluZyBzdWNjb3IsIHdvdWxkIHR1cm4gYWdhaW5zdCB0aGVtLiBBIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgcGFydHkgc3VwcG9zZWQgdGhhdCB5b3UgcmVncmV0dGVkIHlvdXIgdHJlYXR5IG9mIHBlYWNlIHdpdGggUGhpbGlwOyBidXQgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgbm93IGluZm9ybWVkIHRoYXQgeW91IGhhZCBhY3R1YWxseSBkZWNyZWVkIGFuIGV4dGVuc2lvbiBvZiB0aGUgdHJlYXR5IHRvCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgZGVzY2VuZGFudHMsIGFuZCBzbyB0aGV5IGFiYW5kb25lZCBhbGwgaG9wZSBvZiB5b3VyIGFzc2lzdGFuY2UuIEFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgd2h5IHRoZXNlIG1lbiBwYWNrZWQgYWxsIHRob3NlIHByb3Zpc2lvbnMgaW50byBvbmUgZGVjcmVlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBteSBqdWRnZW1lbnQgdGhleSBjb3VsZCBub3QgaGF2ZSBkb25lIHlvdSBhIG1vcmUKICAgICAgICAgICAgICAgICAgICBncmlldm91cyBpbmp1cnkuIFRvIHR1cm4gdGhlaXIgdHJlYXR5IG9mIHBlYWNlIHdpdGggYSBtb3J0YWwgbWFuLCBhIG1lcmUKICAgICAgICAgICAgICAgICAgICBwb3RlbnRhdGUgb2Ygb2NjYXNpb24sIGludG8gYSBjb3ZlbmFudCBvZiBpbW1vcnRhbCBpZ25vbWlueSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoOyB0byBzdHJpcCB0aGVpciBjaXR5IG9mIGFsbCBzaGUgaGFkLCBldmVuIG9mIHRoZSBsYXJnZXNzIG9mIGhlcgogICAgICAgICAgICAgICAgICAgIGdvb2QgZm9ydHVuZTsgaW4gdGhlIHZlcmllc3QgZXh0cmF2YWdhbmNlIG9mIG1hbGljZSB0byBoZWFwIGluanVyaWVzIG5vdCBvbmx5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIEF0aGVuaWFucyBvZiB0b2RheSBidXQgdXBvbiBhbGwgd2hvIHNoYWxsIGhlcmVhZnRlciBiZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyzigJRpcyBub3QgdGhhdCBhbiBhcHBhbGxpbmcgaW5pcXVpdHk/IDwvdHJhbnNsYXRpb24+"
translation['19.Narr.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlciB3b3VsZCB5b3UgaGF2ZSBjb25zZW50ZWQgdG8gYWRkIHRvIHRoZSB0cmVhdHkKICAgICAgICAgICAgICAgICAgICBieSBhZnRlcnRob3VnaHQgdGhlIHdvcmRzIOKAnGFuZCB0byBoaXMgcG9zdGVyaXR5LOKAnSBidXQgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91ciBjb25maWRlbmNlIGluIHRoZSBwcm9taXNlcyBhbGxlZ2VkIGJ5IEFlc2NoaW5lcy4gSW4gdGhvc2UgcHJvbWlzZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMgY29uZmlkZWQs4oCUYW5kIHBlcmlzaGVkISBUaGV5IHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgdG8KICAgICAgICAgICAgICAgICAgICBQaGlsaXA7IG9mIHRoZWlyIG93biBhY2NvcmQgdGhleSBwdXQgdGhlaXIgY2l0aWVzIGF0IGhpcyBtZXJjeTsgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdHJlYXRtZW50IGhhcyBleGFjdGx5IGNvbnRyYWRpY3RlZCBhbGwgdGhlIGFzc3VyYW5jZXMgb2YgQWVzY2hpbmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gZ2l2ZSB5b3UgdGhlCiAgICAgICAgICAgICAgICAgICAgY2xlYXJlc3QgcHJvb2YgdGhhdCB0aGF0IGRlc3RydWN0aW9uIHdhcyBlZmZlY3RlZCBpbiB0aGlzIHdheSBieSB0aGUgY29udHJpdmFuY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGVzZSBtZW4sIEkgd2lsbCBzdWJtaXQgYSByZWNrb25pbmcgb2YgdGhlIGRhdGVzIG9mIHRoZSBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zLiBJZiBhbnkgb2YgdGhlIGRlZmVuZGFudHMgY2hhbGxlbmdlcyBteSBjYWxjdWxhdGlvbiwgbGV0IGhpbSBzdGFuZAogICAgICAgICAgICAgICAgICAgIHVwIGFuZCBzcGVhayBpbiB0aGUgdGltZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pbiB0aGUgdGltZSwgZXRjLjogc2VlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEzOSIgdmFsaWQ9InllcyI+RGVtLiAxOC4xMzk8L2JpYmw+Ljwvbm90ZT4gYWxsb3R0ZWQgdG8gbWUuIE5vdyB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVhdHkgd2FzIG1hZGUgb24gdGhlIG5pbmV0ZWVudGggb2YgRWxhcGhlYm9saW9uLCBhbmQgd2Ugd2VyZSBhYnJvYWQgcmVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGhzIGZvciB0aHJlZSBlbnRpcmUgbW9udGhzLiBEdXJpbmcgdGhlIHdob2xlIG9mIHRoYXQgdGltZSB0aGUgUGhvY2lhbnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIHNhZmUuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTM5IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjEzOTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['19.Narr.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5XZSByZXR1cm5lZCBmcm9tIHRoZSBvYXRoLXRha2luZwogICAgICAgICAgICAgICAgICAgIGVtYmFzc3kgb24gdGhlIHRoaXJ0ZWVudGggb2YgU2Npcm9waG9yaW9uLCB3aGVuIFBoaWxpcCB3YXMgYWxyZWFkeSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kIG1ha2luZyBwcm9taXNlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFucyB3aGljaCB0aGV5IHdlcmUgbm90IGRpc3Bvc2VkIHRvIGJlbGlldmUuIFRoZSBwcm9vZiBvZiB0aGF0IGlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdGhleSB3b3VsZCBub3QgaGF2ZSByZXNvcnRlZCB0byB5b3UuIFRoZW4gdGhlIEFzc2VtYmx5LCBhdCB3aGljaCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBicm91Z2h0IHRoZSB3aG9sZSBidXNpbmVzcyB0byBydWluIHdpdGggdGhlaXIgbGllcyBhbmQgY2Fqb2xlcnksIHdhcyBoZWxkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHNpeHRlZW50aCBvZiBTY2lyb3Bob3Jpb24uIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBjYWxjdWxhdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBuZXdzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHJlYWNoZWQKICAgICAgICAgICAgICAgICAgICB0aGUgUGhvY2lhbnMgb24gdGhlIGZvdXJ0aCBkYXkgYWZ0ZXIgdGhhdCBkYXRlLCBmb3IgdGhlcmUgd2VyZSBQaG9jaWFuIGVudm95cyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXR5LCBhbmQgdGhleSB3ZXJlIGludGVyZXN0ZWQgaW4ga25vd2luZyB3aGF0IHJlcG9ydCB0aGVzZSBtZW4gd291bGQgc3VibWl0CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoYXQgZGVjcmVlIHlvdSB3b3VsZCBhZG9wdC4gVGhlcmVmb3JlIHRoZSB0d2VudGlldGggd2FzIHRoZSBkYXkgb24gd2hpY2ggd2UKICAgICAgICAgICAgICAgICAgICByZWNrb24gdGhhdCB0aGUgUGhvY2lhbnMgcmVjZWl2ZWQgdGhlIG5ld3MsIHRoYXQgaXMsIHRoZSBmb3VydGggZGF5IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNpeHRlZW50aC4gVGhlbiBmb2xsb3dlZCB0aGUgdHdlbnR5LWZpcnN0LCB0d2VudHktc2Vjb25kLCB0d2VudHktdGhpcmQ7IGFuZCBvbgogICAgICAgICAgICAgICAgICAgIHRoZSB0d2VudHktdGhpcmQgdGhlIGNvbnZlbnRpb24gd2FzIG1hZGUsIGFuZCB0aGUgZm9ydHVuZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+IHBlcmlzaGVkIGFuZCBjYW1lIHRvIGFuIGVuZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3csIHRoZW4sIGlzIHRoaXMgZGF0ZSBwcm92ZWQ/IE9uIHRoZQogICAgICAgICAgICAgICAgICAgIHR3ZW50eS1zZXZlbnRoLCB3aGVuIHlvdSB3ZXJlIGhvbGRpbmcgYW4gYXNzZW1ibHkgYXQgUGVpcmFldXMgdG8gZGlzY3VzcwogICAgICAgICAgICAgICAgICAgIGRvY2t5YXJkIGJ1c2luZXNzLCBEZXJjeWx1cyBhcnJpdmVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDaGFsY2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2lzIj5DaGFsY2lzPC9wbGFjZU5hbWU+IHdpdGggdGhlIGludGVsbGlnZW5jZSB0aGF0IFBoaWxpcCBoYWQgcHV0IHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGFmZmFpciBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgVGhlYmFucywgYW5kIGhlIGNvbXB1dGVkIHRoYXQgaXQgd2FzIHRoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZm91cnRoIGRheSBhZnRlciB0aGUgY29udmVudGlvbi4gVHdlbnR5LXRocmVlLCB0d2VudHktZm91ciwgdHdlbnR5LWZpdmUsCiAgICAgICAgICAgICAgICAgICAgdHdlbnR5LXNpeCwgdHdlbnR5LXNldmVuOiB0aGF0IG1ha2VzIGl0IHRoZSBmb3VydGggZGF5LiBUaGVyZWZvcmUgdGhlc2UgZGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgdG9nZXRoZXIgd2l0aCB0aGVpciBvd24gcmVwb3J0cyBhbmQgZGVjcmVlcywgYWxsIGNvbnZpY3QgdGhlc2UgbWVuIG9mIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGNvLW9wZXJhdGVkIHdpdGggUGhpbGlwLCBhbmQgdGhleSBzaGFyZSB3aXRoIGhpbSB0aGUgZ3VpbHQgb2YgdGhlIGRlc3RydWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhlIGNvbnNpZGVyYXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIG5vdCBhIGNpdHkgb2YgdGhlIFBob2NpYW5zIHdhcyB0YWtlbiBmb3JjaWJseSwgd2hldGhlciBieSBibG9ja2FkZSBvciBhc3NhdWx0LAogICAgICAgICAgICAgICAgICAgIGFuZCB5ZXQgdGhhdCB0aGV5IHdlcmUgYWxsIGJyb3VnaHQgdG8gdXR0ZXIgcnVpbiB1bmRlciB0aGUgY29udmVudGlvbiwgaXMgYQogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNpbmcgcHJvb2YgdGhhdCB0aGV5IHBlcmlzaGVkIGJlY2F1c2UgdGhleSBoYWQgYmVlbiBwZXJzdWFkZWQgdGhyb3VnaAogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiB0aGF0IFBoaWxpcCB3b3VsZCBkZWxpdmVyIHRoZW07IGZvciBhYm91dCBoaXMgY2hhcmFjdGVyIHRoZXkgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgaWxsdXNpb25zLiBOb3cgZ2l2ZSBtZSBvdXIgdHJlYXR5IHdpdGggdGhlIFBob2NpYW5zLCBhbmQgdGhlIEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgIGRlY3JlZXMsIHVuZGVyIHdoaWNoIHRoZXkgZGlzbWFudGxlZCB0aGVpciBkZWZlbmNlcy4gVGhlc2UgZG9jdW1lbnRzIHdpbGwgc2hvdwogICAgICAgICAgICAgICAgICAgIHlvdSBvbiB3aGF0IGZvb3RpbmcgeW91IHN0b29kIHdpdGggdGhlbSwgYW5kIHdoYXQgdHJlYXRtZW50IHRoZXkgaGF2ZSByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBmYXVsdCBvZiB0aGVzZSB3aWNrZWQgbWVuLiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFsbGlhbmNlIG9mIHRoZSBQaG9jaWFucyBhbmQgdGhlIEF0aGVuaWFucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsbGlhbmNlIG9mIHRoZSBQaG9jaWFucyBhbmQgdGhlIEF0aGVuaWFuczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGxpYW5jZSBvZiB0aGUgUGhvY2lhbnMgYW5kIHRoZSBBdGhlbmlhbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIHJlbGF0aW9ucyB0aGF0IHN1YnNpc3RlZCBiZXR3ZWVuIHlvdSBhbmQgdGhlbeKAlGZyaWVuZHNoaXAsIGFsbGlhbmNlLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nvci4gTm93IGhlYXIgd2hhdCB0aGV5IGhhdmUgc3VmZmVyZWQgdGhyb3VnaCB0aGUgbWFuIHdobyB0aHdhcnRlZCB0aGUgc3VjY29yCiAgICAgICAgICAgICAgICAgICAgeW91IG93ZWQgdGhlbS4gUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDb252ZW50aW9uIGJldHdlZW4gUGhpbGlwIGFuZCB0aGUgUGhvY2lhbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db252ZW50aW9uIGJldHdlZW4gUGhpbGlwIGFuZCB0aGUgUGhvY2lhbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29udmVudGlvbiBiZXR3ZWVuIFBoaWxpcCBhbmQgdGhlIFBob2NpYW5zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgaXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEEgY29udmVudGlvbiBiZXR3ZWVuIFBoaWxpcCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMsIGl0IHNheXMsIG5vdCBiZXR3ZWVuIHRoZSBUaGViYW5zIGFuZCB0aGUgUGhvY2lhbnMsIG9yIHRoZSBUaGVzc2FsaWFucwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgUGhvY2lhbnMsIG9yIHRoZSBMb2NyaWFucywgb3IgYW55IG90aGVyIG9mIHRoZSBuYXRpb25hbGl0aWVzIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmVzZW50LiBBZ2FpbiwgaXQgc2F5cyB0aGF0IHRoZSBQaG9jaWFucyBhcmUgdG8gc3VycmVuZGVyIHRoZWlyIGNpdGllcyB0bwogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwgbm90IHRvIHRoZSBUaGViYW5zLCBvciB0aGUgVGhlc3NhbGlhbnMsIG9yIGFueSBvdGhlciBwZW9wbGUuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5XaHk/IEJlY2F1c2UgeW91IGhhZCBiZWVuIGFzc3VyZWQgYnkgQWVzY2hpbmVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgaGFkIGNvbWUgdG8gZGVsaXZlciB0aGUgUGhvY2lhbnMuIEluIEFlc2NoaW5lcyB0aGV5IGhhZCBjb25maWRlbmNlOyB0bwogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyB0aGV5IGxvb2tlZCBmb3IgYWlkOyB3aXRoIEFlc2NoaW5lcyB0aGV5IHdlcmUgbWFraW5nIHRoZWlyIHBlYWNlLiBSZWFkCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIGRvY3VtZW50cy4gTm93IHlvdSBzaGFsbCBzZWUgdG8gd2hhdCBzdWZmZXJpbmdzIHRoZXkgd2VyZSBicm91Z2h0IGJ5CiAgICAgICAgICAgICAgICAgICAgdGhhdCBjb25maWRlbmNlLiBEb2VzIHRoZSBzdG9yeSBhZ3JlZSB3aXRoLCBkb2VzIGl0IGluIGFueSB3YXkgcmVzZW1ibGUsIHRob3NlCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0cyBvZiBBZXNjaGluZXM/IFJlYWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlcyBvZiB0aGUgQW1waGljdHlvbmljIENvdW5jaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzIG9mIHRoZSBBbXBoaWN0eW9uaWMgQ291bmNpbDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzIG9mIHRoZSBBbXBoaWN0eW9uaWMgQ291bmNpbDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbm90aGluZyBtb3JlIGF3ZnVsIG9yCiAgICAgICAgICAgICAgICAgICAgbW9yZSBtb21lbnRvdXMgaGFzIGJlZmFsbGVuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIHdpdGhpbiBsaXZpbmcgbWVtb3J5LCBub3IsIGFzIEkgYmVsaWV2ZSwgaW4gYWxsIHRoZSBoaXN0b3J5IG9mIHRoZSBwYXN0LiBZZXQKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgdGhlc2UgbWVuIGFsbCB0aGVzZSBncmVhdCBhbmQgdGVycmlibGUgdHJhbnNhY3Rpb25zIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGRvbWluYXRlZCBieSBhIHNpbmdsZSBpbmRpdmlkdWFsLCB0aG91Z2ggdGhlIGNpdHkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGlzIHN0aWxsIGluIGJlaW5nLCB0aGUgY2l0eSB3aG9zZQogICAgICAgICAgICAgICAgICAgIGFuY2VzdHJhbCBwcmVyb2dhdGl2ZSBpdCB3YXMgdG8gc3RhbmQgZm9ydGggYXMgdGhlIGNoYW1waW9uIG9mIHRoZSBIZWxsZW5pYwogICAgICAgICAgICAgICAgICAgIHJhY2UsIGFuZCBkZWNsYXJlIHRoYXQgc3VjaCB0aGluZ3Mgc2hhbGwgbm90IGJlLiBJbiB3aGF0IGZhc2hpb24gdGhlc2UgdW5oYXBweQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zIGhhdmUgcGVyaXNoZWQgeW91IG1heSBsZWFybiwgbm90IGZyb20gdGhlIGRlY3JlZXMgYWxvbmUsIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgZnJvbSB0aGUgZGVlZHMgdGhhdCBoYXZlIGJlZW4gd3JvdWdodOKAlGEKICAgICAgICAgICAgICAgICAgICBzcGVjdGFjbGUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIG1vdmUgdXMKICAgICAgICAgICAgICAgICAgICB0byB0ZXJyb3IgYW5kIHBpdHkgaW5kZWVkISBOb3QgbG9uZyBhZ28sIHdoZW4gd2Ugd2VyZSB0cmF2ZWxsaW5nIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRGVscGhpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxwaGkiPkRlbHBoaTwvcGxhY2VOYW1lPiwgbmVjZXNzaXR5IGNvbXBlbGxlZCB1cyB0byBsb29rIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGF0IHNjZW5l4oCUaG9tZXN0ZWFkcyBsZXZlbGxlZCB3aXRoIHRoZSBncm91bmQsIGNpdGllcyBzdHJpcHBlZCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlZmVuc2l2ZSB3YWxscywgYSBjb3VudHJ5c2lkZSBhbGwgZW1wdGllZCBvZiBpdHMgeW91bmcgbWVuOyBvbmx5IHdvbWVuLCBhCiAgICAgICAgICAgICAgICAgICAgZmV3IGxpdHRsZSBjaGlsZHJlbiwgYW5kIG9sZCBtZW4gc3RyaWNrZW4gd2l0aCBtaXNlcnkuIE5vIG1hbiBjb3VsZCBmaW5kIHdvcmRzCiAgICAgICAgICAgICAgICAgICAgYWRlcXVhdGUgdG8gdGhlIHdvZXMgdGhhdCBleGlzdCBpbiB0aGF0IGNvdW50cnkgdG9kYXkuIEFuZCB5ZXQgdGhlc2UgYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZeKAlHlvdSB0YWtlIHRoZSB3b3JkcyBvdXQgb2YgbXkgbW91dGjigJR0aGVzZSBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHdobyBpbiB0aGUgZGF5IG9mIG91ciB0cmlhbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pbiB0aGUgZGF5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIG91ciB0cmlhbDogPGRhdGUgYXV0aG5hbWU9Ii00MDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDQiPjQwNDwvZGF0ZT4gQi5DLiB3aGVuLCBhZnRlciB0aGUgbmF2YWwgZGVmZWF0CiAgICAgICAgICAgICAgICAgICAgICAgIGF0IEFlZ2lzcG90YW1pLCBhbmQgdGhlIHN1cnJlbmRlciBvZiB0aGUgY2l0eSB0byBMeXNhbmRlciwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGxheSBhdCB0aGUgbWVyY3kgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4uIEdyb3RlLCBjaC4gNjUuPC9ub3RlPiBvcGVubHkgY2FzdCB0aGVpciB2b3RlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgVGhlYmFucywgd2hlbiB0aGUgcXVlc3Rpb24gd2FzIHRoZSBlbnNsYXZlbWVudCBvZiB1cyBhbGwhIDxkYXRlIGF1dGhuYW1lPSItNDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDA0Ij40MDQ8L2RhdGU+IEIuQy4gd2hlbiwgYWZ0ZXIgdGhlIG5hdmFsIGRlZmVhdAogICAgICAgICAgICAgICAgICAgICAgICBhdCBBZWdpc3BvdGFtaSwgYW5kIHRoZSBzdXJyZW5kZXIgb2YgdGhlIGNpdHkgdG8gTHlzYW5kZXIsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBsYXkgYXQgdGhlIG1lcmN5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LiBHcm90ZSwgY2guIDY1LjwvdHJhbnNsYXRpb24+"
translation['19.Proof.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJQcm9vZiIgdW5pdD0icGFydCIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB3aGF0IHZvdGUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBqdWRnZW1lbnQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGRvCiAgICAgICAgICAgICAgICAgICAgeW91IHRoaW5rIHRoYXQgb3VyIGZvcmVmYXRoZXJzIHdvdWxkIGdpdmUsIGlmIHRoZXkgY291bGQgcmVjb3ZlciBjb25zY2lvdXNuZXNzLAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSB0cmlhbCBvZiB0aGUgbWVuIHdobyBkZXZpc2VkIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgUGhvY2lhbnM/IEkgY29uY2VpdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd291bGQgYWNjb3VudCBldmVuIHRob3NlIHdobyBzaG91bGQgc3RvbmUgdGhlbSB0byBkZWF0aCB3aXRoIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGhhbmRzIHRvIGJlIGZyZWUgb2YgYWxsIGJsb29kZ3VpbHRpbmVzcy4gRm9yIGlzIGl0IG5vdCBhbiBpZ25vbWlueeKAlG9yCiAgICAgICAgICAgICAgICAgICAgdXNlIGEgc3Ryb25nZXIgd29yZCBpZiBzdWNoIHRoZXJlIGJl4oCUdGhhdCwgYnkgdGhlIGZhdWx0IG9mIHRoZXNlIG1lbiwKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlIHdobyBzYXZlZCB1cyBhdCB0aGF0IGNyaXNpcywgYW5kIGdhdmUgZm9yIHVzIHRoZSB2ZXJkaWN0IG9mCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlcmFuY2UsIGhhdmUgcmVjZWl2ZWQgZXZpbCBpbiByZXF1aXRhbCBvZiBnb29kLCBhbmQgaGF2ZSBiZWVuIGFiYW5kb25lZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBlbmR1cmFuY2Ugb2YgYWZmbGljdGlvbnMgc3VjaCBhcyBubyBwZW9wbGUgb2YgdGhlIEdyZWVrcyBoYXMgZXZlciBrbm93bj8gQW5kCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIHRoZSBhdXRob3Igb2YgdGhvc2Ugd3JvbmdzPyBXaG8gaXMgdGhlIGNvbnRyaXZlciBvZiB0aGF0IGRlY2VwdGlvbj8gV2hvCiAgICAgICAgICAgICAgICAgICAgYnV0IEFlc2NoaW5lcz8gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgUGhpbGlwIGhhcyBtYW55CiAgICAgICAgICAgICAgICAgICAgY2xhaW1zIHRvIGNvbmdyYXR1bGF0aW9uIG9uIGhpcyBnb29kIGZvcnR1bmUsIGJ1dCBiZXlvbmQgdGhlbSBhbGwgaGUgbWlnaHQgd2VsbAogICAgICAgICAgICAgICAgICAgIGJlIGVzcGVjaWFsbHkgY29uZ3JhdHVsYXRlZCBmb3Igb25lIHRoaW5nLCBpbiB3aGljaCBJIHNvbGVtbmx5IGRlY2xhcmUgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgY2FuIG5hbWUgbm8gbWFuIG9mIG91ciB0aW1lIHdobyBoYXMgYmVlbiBlcXVhbGx5IGZvcnR1bmF0ZS4gU3VjaCBhY2hpZXZlbWVudHMgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgY2FwdHVyZSBvZiBncmVhdCBjaXRpZXMgYW5kIHRoZSBzdWJqdWdhdGlvbiBvZiBhIHZhc3QgdGVycml0b3J5IGFyZSwgSQogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UsIGVudmlhYmxlLCBhcyB0aGV5IGFyZSB1bmRvdWJ0ZWRseSBpbXBvc2luZzsgeWV0IHdlIGNvdWxkIG1lbnRpb24gbWFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIG1lbiB3aG8gaGF2ZSBkb25lIHRoZSBsaWtlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlIG9mIGdvb2QgZm9ydHVuZSBJIGhhdmUgaW4gbWluZCBpcyBwZWN1bGlhciB0byBoaW0gYW5kIGhhcyBiZWZhbGxlbiBubwogICAgICAgICAgICAgICAgICAgIG90aGVyIG1hbi4gV2hhdCBpcyBpdD8gSXQgaXMgdGhhdCwgd2hlbiBoZSBuZWVkZWQgc2NvdW5kcmVscyBmb3IgaGlzIHB1cnBvc2VzLAogICAgICAgICAgICAgICAgICAgIGhlIGZvdW5kIGJpZ2dlciBzY291bmRyZWxzIHRoYW4gaGUgd2FudGVkLiBGb3Igc3VyZWx5IHRoYXQgaXMgYSBmYWlyIGRlc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1lbiB3aG8gZGVjZWl2ZWQgeW91LCBoaXJpbmcgdGhlbXNlbHZlcyBvdXQgZm9yIGxpZXMgd2hpY2ggUGhpbGlwLCBpbgogICAgICAgICAgICAgICAgICAgIHNwaXRlIG9mIHRoZSBncmVhdCBpbnRlcmVzdHMgYXQgaXNzdWUsIGRpZCBub3QgZGFyZSB0byB0ZWxsIG9uIGhpcyBvd24gYWNjb3VudCwKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBuZXZlciB3cm90ZSBpbiBhbnkgbGV0dGVyIG9yIHB1dCBpbnRvIHRoZSBtb3V0aCBvZiBhbWJhc3NhZG9ycyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBvd24uIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5BbnRpcGF0ZXIgYW5kIFBhcm1lbmlvLCB0aG91Z2ggdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNlcnZpY2Ugb2YgYSBoYXJkIHRhc2ttYXN0ZXIsIGFuZCB0aG91Z2ggdGhleSB3ZXJlIG5vdCBsaWtlbHkgdG8gZmFsbCBpbgogICAgICAgICAgICAgICAgICAgIHdpdGggeW91IGFnYWluLCBuZXZlcnRoZWxlc3MgY2xhaW1lZCBleGVtcHRpb24gZnJvbSBzZXJ2aW5nIGFzIHRoZSBhZ2VudHMgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGJlZ3VpbGVtZW50OyBhbmQgeWV0IGNpdGl6ZW5zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlIGFwcG9pbnRlZCBlbnZveXMgb2YgdGhlIGZyZWVzdCBvZiBhbGwgY2l0aWVzLCBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gbXVzdCBuZWVkcyBlbmNvdW50ZXIgeW91IGFuZCBsb29rIHlvdSBpbiB0aGUgZmFjZSwgd2hvIG11c3QgbGl2ZSB3aXRoIHlvdQogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgcmVzdCBvZiB0aGVpciBsaWZlLCB3aG8gd291bGQgaGF2ZSB0byByZW5kZXIgeW91IGEgc3RyaWN0IGFjY291bnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBhY3Rpb25zLCBhY2NlcHRlZCBhIGNvbW1pc3Npb24gdG8gYmVndWlsZSB5b3UhIENvdWxkIGFueSBtZW4gYmUgbW9yZQogICAgICAgICAgICAgICAgICAgIHdpY2tlZCBvciBtb3JlIGxvc3QgdG8gYWxsIHNlbnNlIG9mIHNoYW1lPyA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gc2hvdyB5b3UgdGhhdCB0aGlzIG1hbiBpcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgYWNjdXJzZWQgYnkgeW91LCBhbmQgdGhhdCByZWxpZ2lvbiBhbmQgcGlldHkgZm9yYmlkIHlvdSB0byBhY3F1aXQgb25lIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIGd1aWx0eSBvZiBzdWNoIGZhbHNlaG9vZHMs4oCUcmVjaXRlIHRoZSBjdXJzZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXZlcnkgbWVldGluZyBvZiB0aGUgQXNzZW1ibHkgYW5kIG9mIHRoZSBDb3VuY2lsIG9wZW5lZCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSBvZiBwcmF5ZXIsIHdoaWNoIGluY2x1ZGVkIGEgY3Vyc2Ugb24gdGhlIGVuZW1pZXMgb2YgdGhlIHN0YXRlIGFuZCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXRlZCBieSB0aGUg4oCcbWFyc2hhbOKAnSDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuuG/hs+Bz4XOvjwvZm9yZWlnbj7vvIkgYXQgdGhlIGRpY3RhdGlvbiBvZiBhbiB1bmRlci1jbGVyay4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNlIGhhcyBub3doZXJlIGJlZW4gcHJlc2VydmVkLCBidXQgYSBwYXJvZHkgd2lsbCBiZSBmb3VuZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG9waC4gVGhlcy4gMzMxIiB2YWxpZD0ieWVzIj5BcmlzdG9waC4gVGhlcy4gMzMxIGZmLjwvYmlibD48L25vdGU+IFRha2UgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhZCBpdCBmcm9tIHRoZSBzdGF0dXRlOiBoZXJlIGl0IGlzLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs664b+Gz4HPhc6+PC9mb3JlaWduPu+8iSBhdCB0aGUgZGljdGF0aW9uIG9mIGFuIHVuZGVyLWNsZXJrLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc2UgaGFzIG5vd2hlcmUgYmVlbiBwcmVzZXJ2ZWQsIGJ1dCBhIHBhcm9keSB3aWxsIGJlIGZvdW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3BoLiBUaGVzLiAzMzEiIHZhbGlkPSJ5ZXMiPkFyaXN0b3BoLiBUaGVzLiAzMzEgZmYuPC9iaWJsPjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlByYXllciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlByYXllcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QcmF5ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGltcHJlY2F0aW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyBwcm9ub3VuY2VkLCBhcyB0aGUgbGF3IGRpcmVjdHMsCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIG1hcnNoYWwgb24geW91ciBiZWhhbGYgYXQgZXZlcnkgbWVldGluZyBvZiB0aGUgQXNzZW1ibHksIGFuZCBhZ2FpbiBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgQ291bmNpbCBhdCBhbGwgdGhlaXIgc2Vzc2lvbnMuIFRoZSBkZWZlbmRhbnQgY2Fubm90IHNheSB0aGF0IGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGZhbWlsaWFyIHdpdGggaXQsIGZvciwgd2hlbiBhY3RpbmcgYXMgY2xlcmsgdG8gdGhlIEFzc2VtYmx5IGFuZCBhcyBhbiBvZmZpY2VyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwsIGhlIHVzZWQgdG8gZGljdGF0ZSB0aGUgc3RhdHV0ZSB0byB0aGUgbWFyc2hhbC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCB5b3Ugbm90IGhhdmUgYWN0ZWQgYWJzdXJkbHkgYW5kIHByZXBvc3Rlcm91c2x5CiAgICAgICAgICAgICAgICAgICAgaWYgdG9kYXksIHdoZW4gdGhlIHBvd2VyIGlzIGluIHlvdXIgb3duIGhhbmRzLCB5b3Ugc2hvdWxkIHByZWNsdWRlIHlvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIGRvaW5nIHdoYXQgeW91IGVuam9pbiwgb3IgcmF0aGVyIHJlcXVpcmUsIHRoZSBnb2RzIHRvIGRvIG9uIHlvdXIgYmVoYWxmOyBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBzaG91bGQgeW91cnNlbHZlcyByZWxlYXNlIGEgbWFuIHdob20geW91IGhhdmUgaW1wbG9yZWQgdGhlbSB0byBleHRpcnBhdGUKICAgICAgICAgICAgICAgICAgICBhbG9uZyB3aXRoIGhpcyBob3VzZWhvbGQgYW5kIGhpcyBraW5kcmVkPyBOZXZlciEgTGVhdmUgdGhlIHVuZGV0ZWN0ZWQgc2lubmVyIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1c3RpY2Ugb2YgdGhlIGdvZHM7IGJ1dCBhYm91dCB0aGUgc2lubmVyIHdob20geW91IGhhdmUgY2F1Z2h0IHlvdXJzZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgbGF5IG5vIGZ1cnRoZXIgaW5qdW5jdGlvbnMgb24gdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBhbSBpbmZvcm1lZCB0aGF0IGhlIGhhcyBiZWNvbWUgc28gcHJvZmljaWVudCBpbgogICAgICAgICAgICAgICAgICAgIGVmZnJvbnRlcnkgYW5kIGhhcmRpaG9vZCB0aGF0IGhlIHdpbGwgZGlzYXZvdyBhbGwgaGlzIGFjdHPigJRoaXMKICAgICAgICAgICAgICAgICAgICByZXBvcnRzLCBoaXMgcHJvbWlzZXMsIGhpcyBkZWNlcHRpb25zIG9mIHRoZSBjaXR54oCUYXMgdGhvdWdoIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICBub3Qgb24gdHJpYWwgYmVmb3JlIGEganVyeSB0aGF0IGtub3dzIHRoZSB3aG9sZSB0cnV0aCwgYW5kIHRoYXQgaGUgd2lsbCBkZW5vdW5jZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHRoZSBMYWNlZGFlbW9uaWFucyx0aGVuIHRoZSBQaG9jaWFucywgYW5kIHRoZW4gSGVnZXNpcHB1cy4gVGhhdCBpcwogICAgICAgICAgICAgICAgICAgIGJ1ZmZvb25lcnksIG5heSwgYmFyZWZhY2VkIGltcHVkZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0ZXZlcgogICAgICAgICAgICAgICAgICAgIGhlIG1heSBzYXkganVzdCBub3cgYWJvdXQgdGhlIFBob2NpYW5zIG9yIHRoZSBMYWNlZGFlbW9uaWFucyBvcgogICAgICAgICAgICAgICAgICAgIEhlZ2VzaXBwdXMs4oCUdGhhdCB0aGV5IGRpZCBub3QgcmVjZWl2ZSBQcm94ZW51cywgdGhhdCB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIGlycmVsaWdpb3VzLCB0aGF0IHRoZXkgYXJl4oCUYW55dGhpbmcgaGUgY2FuIHNheSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZSzigJRzdXJlbHkgYWxsIHRoYXQgd2FzIGZpbmlzaGVkIGFuZCBkb25lIHdpdGggYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIHJldHVybiBvZiB0aGUgZW52b3lzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGNvdWxkIG5vdCBoYXZlIHN0b29kIGluIHRoZSB3YXkgb2YgdGhlIGRlbGl2ZXJhbmNlIG9mIHRoZSBQaG9jaWFucy4KICAgICAgICAgICAgICAgICAgICBXaG8gc2F5cyBzbz8gV2h5LCBBZXNjaGluZXMgaGVyZSwgdGhlIGRlZmVuZGFudCBoaW1zZWxmLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgZGlkIG5vdCBhbGxlZ2UgaW4gaGlzIHJlcG9ydCB0aGF0LCBidXQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zLCBidXQgZm9yIHRoZWlyIHJlZnVzYWwgdG8gcmVjZWl2ZSBQcm94ZW51cywgYnV0IGZvciBIZWdlc2lwcHVzLAogICAgICAgICAgICAgICAgICAgIGJ1dCBmb3IgdGhpcyBvciB0aGF0LCB0aGUgUGhvY2lhbnMgd291bGQgaGF2ZSBiZWVuIGRlbGl2ZXJlZC4gSGUgcGFzc2VkIG92ZXIgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgYW5kIGRlY2xhcmVkIGV4cGxpY2l0bHkgdGhhdCBiZWZvcmUgaGlzIHJldHVybiBoZSBoYWQgcGVyc3VhZGVkIFBoaWxpcCB0bwogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXIgdGhlIFBob2NpYW5zLCB0byByZXBvcHVsYXRlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4sIGFuZCB0byBwdXQgdGhlIHdob2xlIGJ1c2luZXNzIGludG8geW91ciBoYW5kczsgdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGFsbCBiZSBhY2NvbXBsaXNoZWQgd2l0aGluIHR3byBvciB0aHJlZSBkYXlzLCBhbmQgdGhhdCBpbiByZXZlbmdlIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgaGFkIHNldCBhIHByaWNlIHVwb24gaGlzIGhlYWQuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgbGlzdGVuIHRvIGFueXRoaW5nIHRoYXQgaGFkIGJlZW4gZG9uZSBieSBMYWNlZGFlbW9uaWFucyBvciBQaG9jaWFucyBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBoZSBtYWRlIGhpcyByZXBvcnQ7IGRvIG5vdCBsZXQgaGltIHRhbGsgYWJvdXQgaXQ7IGRvIG5vdCBwZXJtaXQgaGltIHRvIGRlbm91bmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW5zIGFuZCBjYWxsIHRoZW0gcmFzY2Fscy4gWW91IHNhdmVkIHRoZSBMYWNlZGFlbW9uaWFucyBpbiBvbGQgdGltZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhvc2UgYWNjdXJzZWQgRXVib2VhbnMgbGF0ZWx5LCBhbmQgbWFueSBvdGhlciBwZW9wbGVzLCBub3QgYmVjYXVzZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSB2aXJ0dW91cywgYnV0IGJlY2F1c2UgdGhlaXIgc2FmZXR5IHByb2ZpdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXMgdGhhdCBvZiB0aGUgUGhvY2lhbnMgd291bGQgdG9kYXkuIFdoYXQgdHJhbnNncmVzc2lvbgogICAgICAgICAgICAgICAgICAgIGRpZCB0aGUgUGhvY2lhbnMgb3IgdGhlIExhY2VkYWVtb25pYW5zIG9yIHlvdSBvciBhbnlvbmUgZWxzZSBjb21taXQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMnIHNwZWVjaCwgdGhhdCB0aGUgcHJvbWlzZXMgbWFkZSBieSBoaW0gdG8geW91IHRoZW4gc2hvdWxkIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGZ1bGZpbGxlZD8gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5Bc2sgaGltIHRoYXQgcXVlc3Rpb24uIEhlIGNhbiBwb2ludAogICAgICAgICAgICAgICAgICAgIHRvIG5vbmUuIEZvciBoZSBtYWRlIGhpcyBseWluZyByZXBvcnQsIHlvdSBiZWxpZXZlZCBpdCwgdGhlIFBob2NpYW5zIGhlYXJkIG9mCiAgICAgICAgICAgICAgICAgICAgaXQsIHN1cnJlbmRlcmVkLCBhbmQgcGVyaXNoZWQsIGFsbCB3aXRoaW4gYSBwZXJpb2Qgb2YgZml2ZSBkYXlzIG9ubHkuIEhlbmNlIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgY2xlYXJseSBldmlkZW50IHRoYXQgdGhlIHJ1aW4gb2YgdGhlIFBob2NpYW5zIHdhcyBub3RoaW5nIGJ1dCBhIGNvbmNvY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICBkZWNlaXQgYW5kIGFydGlmaWNlLiBGb3IgZHVyaW5nIHRoZSB0aW1lIHdoZW4gUGhpbGlwIHdhcyB1bmFibGUgdG8gbWFyY2ggYnkKICAgICAgICAgICAgICAgICAgICByZWFzb24gb2YgdGhlIHBlYWNlLCBidXQgd2FzIGFscmVhZHkgbGF5aW5nIGhpcyBwbGFucywgaGUgc2VudCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMsIHByb21pc2luZyB0byBkbyBldmVyeXRoaW5nIGZvciB0aGVtLCBzbyB0aGF0IHRoZSBQaG9jaWFucyBtaWdodAogICAgICAgICAgICAgICAgICAgIG5vdCwgdGhyb3VnaCB5b3VyIGFnZW5jeSwgc2VjdXJlIHRoZWlyIGhlbHAuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBoYWQgcmVhY2hlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIGFuZCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucywgZGV0ZWN0aW5nIHRoZSBzbmFyZSwKICAgICAgICAgICAgICAgICAgICBoYWQgd2l0aGRyYXduLCBoZSBzZW50IEFlc2NoaW5lcyBhcyBoaXMgYWdlbnQgaW4gYWR2YW5jZSBmb3IgeW91ciBkZWNlcHRpb24sCiAgICAgICAgICAgICAgICAgICAgbGVzdCwgd2hlbiB5b3UgZGlzY292ZXJlZCB0aGF0IGhlIHdhcyBhY3RpbmcgaW4gdGhlIGludGVyZXN0IG9mIHRoZSBUaGViYW5zLCBoZQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBpbnZvbHZlZCBvbmNlIG1vcmUgaW4gZGVsYXlzIGFuZCBmaWdodGluZyBhbmQgd2FzdGUgb2YgdGltZSB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zIHJlc2lzdGluZyBoaW0sIGFuZCB5b3UgaGVscGluZyB0aGVtLiBJbiB0aGlzIHdheSBoZSBob3BlZCB0byBvYnRhaW4KICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBtYXN0ZXJ5IHdpdGhvdXQgYSBzdHJ1Z2dsZS4gQW5kIHNvIGl0IGZlbGwgb3V0LiBBZXNjaGluZXMsIHRoZW4sIG11c3QKICAgICAgICAgICAgICAgICAgICBub3QgZXNjYXBlIHB1bmlzaG1lbnQgZm9yIGRlY2VpdmluZyB5b3UsIG1lcmVseSBiZWNhdXNlIFBoaWxpcCBkZWNlaXZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucyBhbmQgdGhlIFBob2NpYW5zLiBUaGF0IHdvdWxkIGJlIHVuanVzdCBpbmRlZWQuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYXMgYW4gb2Zmc2V0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgYWxsIG91ciBvdGhlciBsb3NzZXMgaGUgdGVsbHMgeW91IHRoYXQgdGhlIGNpdHkgc3RpbGwgcmV0YWlucyB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzNDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiwgSSBhZGp1cmUgeW91IG5vdCB0byBhY2NlcHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGV4Y3VzZS4gSW4gYWRkaXRpb24gdG8gdGhlIHdyb25ncyBoZSBoYXMgZG9uZSB5b3UgYnkgaGlzIGVtYmFzc3ksIHlvdSBtdXN0IG5vdAogICAgICAgICAgICAgICAgICAgIHN1ZmZlciBoaW0gYnkgaGlzIGRlZmVuY2UgYWxzbyB0byBmYXN0ZW4gdXBvbiB0aGUgY2l0eSB0aGUgcmVwcm9hY2ggdGhhdCwgd2hpbGUKICAgICAgICAgICAgICAgICAgICBzdGVhbHRoaWx5IHNlY3VyaW5nIHNvbWUgb2YgeW91ciBvd24gcG9zc2Vzc2lvbnMsIHlvdSBtYWRlIHNhY3JpZmljZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzYWZldHkgb2YgeW91ciBhbGxpZXMuIFlvdSBkaWQgbm8gc3VjaCB0aGluZy4gUGVhY2Ugd2FzIGNvbmNsdWRlZDsgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTAzNDUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gd2FzIHNlY3VyZTsgYW5kIHRoZW4gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvdXIgZW5zdWluZyBtb250aHMgdGhlIFBob2NpYW5zIHdlcmUgbm90IGltcGVyaWxsZWQsIHVudGlsIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWQsIGFuZCB0aGUgUGhvY2lhbnMgZGVzdHJveWVkLCBieSB0aGlzIG1hbidzIG1lbmRhY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgeW91IHdpbGwgZmluZCB0aGF0IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGlzIGluIGdyZWF0ZXIgZGFuZ2VyIG5vdyB0aGFuIHRoZW4uCiAgICAgICAgICAgICAgICAgICAgV2hlbiB3b3VsZCBpdCBoYXZlIGJlZW4gZWFzaWVyIHRvIHB1bmlzaCBQaGlsaXAgZm9yIHdyb25nZnVsIGFnZ3Jlc3Npb24gdXBvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgY291bnRyeeKAlGJlZm9yZSBoZSBmb3Jlc3RhbGxlZCB1cyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIG9yIHRvZGF5PyBTdXJlbHkgZmFyCiAgICAgICAgICAgICAgICAgICAgZWFzaWVyIHRoZW4hIFdoYXQsIHRoZW4sIGRvZXMgaXQgcHJvZml0IHVzIHRoYXQgd2Ugc3RpbGwgcmV0YWluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+LCBpZiB0aGUgbWFuLCB3aG8gd291bGQgaGF2ZSBpbnZhZGVkCiAgICAgICAgICAgICAgICAgICAgaXQgaWYgaGUgY291bGQsIGlzIGZyZWVkIGZyb20gdGhlIGFwcHJlaGVuc2lvbnMgYW5kIHBlcmlscyB0aGF0IGRldGVycmVkIGhpbT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoZWFyIG9mCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBhcmd1bWVudCBoZSB3aWxsIHVzZTogaGUgd2lsbCB3b25kZXIgd2h5IGhpcyBhY2N1c2VyIGlzIERlbW9zdGhlbmVzIGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCBvbmUgb2YgdGhlIFBob2NpYW5zLiBJIGhhZCBiZXR0ZXIgZXhwbGFpbiBhdCBvbmNlIGhvdyB0aGUgbWF0dGVyIHN0YW5kcy4gVGhlCiAgICAgICAgICAgICAgICAgICAgYmVzdCBhbmQgbW9zdCByZXNwZWN0YWJsZSBvZiB0aGUgZXhwYXRyaWF0ZWQgUGhvY2lhbnMsIGJlaW5nIGV4aWxlZCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBkaXN0cmVzcywgYXJlIGxpdmluZyBwZWFjZWFibHksIGFuZCBub25lIG9mIHRoZW0gd291bGQgYmUgd2lsbGluZyB0byBpbmN1cgogICAgICAgICAgICAgICAgICAgIHByaXZhdGUgYW5pbW9zaXR5IG9uIGFjY291bnQgb2YgdGhlIG1pc2ZvcnR1bmVzIG9mIHRoZSBuYXRpb24sIHdoaWxlIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGhhdmUgZG9uZSBhbnl0aGluZyBmb3IgYSBmZWUgZmluZCB0aGF0IHRoZXJlIGlzIG5vIG9uZSB0byBwYXkgaXQgdGhlbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSB3b3VsZCBuZXZlciBwYXkgYSBtYW4gYSBmYXJ0aGluZyB0bwogICAgICAgICAgICAgICAgICAgIHN0YW5kIGhlcmUgYnkgbXkgc2lkZSBhbmQgbWFrZSBhbiBvdXRjcnkgYWJvdXQgaGlzIHN1ZmZlcmluZ3MsIHNpbmNlIHRydXRoIGFuZAogICAgICAgICAgICAgICAgICAgIGZhY3QgY3J5IG91dCBsb3VkbHkgZW5vdWdoLiBOYXkgbW9yZSwgdGhlIGNvbW1vbmFsdHkgb2YgdGhlIFBob2NpYW5zIGFyZSBpbiBzdWNoCiAgICAgICAgICAgICAgICAgICAgYW4gZXZpbCBhbmQgcGl0aWFibGUgcGxpZ2h0IHRoYXQgdGhlcmUgaXMgbm8gcXVlc3Rpb24gd2l0aCB0aGVtIG9mIHByb3NlY3V0aW5nCiAgICAgICAgICAgICAgICAgICAgYXQgYW4gQXRoZW5pYW4gc2NydXRpbnnigJRvbmx5IG9mIGxpdmluZyBsaWtlIHNsYXZlcyBpbiBtb3J0YWwgdGVycm9yIG9mCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBhbmQgb2YgUGhpbGlwJ3MgbWVyY2VuYXJpZXMsIHdobyBhcmUgYmlsbGV0ZWQgb24gdGhlbSBhZnRlciB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGRpc2FybWVkIGFuZCBkaXN0cmlidXRlZCBhbW9uZyB2aWxsYWdlcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QgYWxsb3cgdGhpcyBwbGVhLiBObywgQWVzY2hpbmVzIG11c3QgcHJvdmUgZWl0aGVyIHRoYXQgdGhlIFBob2NpYW5zIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCBydWluZWQsIG9yIHRoYXQgaGUgZGlkIG5vdCBwcm9taXNlIHRoYXQgUGhpbGlwIHdvdWxkIHByb3RlY3QgdGhlbS4gVGhlc2UgYXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIHF1ZXN0aW9ucyBmb3IgYSBzY3J1dGlueSBvZiBhbiBlbWJhc3N5OiBXaGF0IGhhcyBiZWVuIGFjY29tcGxpc2hlZD8gV2hhdCBkaWQKICAgICAgICAgICAgICAgICAgICB5b3UgcmVwb3J0PyBJZiB0aGUgdHJ1dGgs4oCUZ28gaW4gcGVhY2U7IGlmIGZhbHNlaG9vZCzigJR0YWtlCiAgICAgICAgICAgICAgICAgICAgeW91ciBwdW5pc2htZW50LiBXaGF0IG1hdHRlciBpZiB0aGUgUGhvY2lhbnMgYXJlIG5vdCBpbiBjb3VydD8gWW91IGhhdmUgcGxheWVkCiAgICAgICAgICAgICAgICAgICAgeW91ciBwYXJ0IGluIHJlZHVjaW5nIHRoZW0gdG8gc3VjaCBzdHJhaXRzIHRoYXQgdGhleSBjYW4gbmVpdGhlciBoZWxwIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kcyBub3IgcmVwZWwgdGhlaXIgZW5lbWllcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsIGFwYXJ0IGZyb20gdGhlIGRpc2NyZWRpdCBhbmQgaW5mYW15IGF0dGFjaGVkCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlc2UgdHJhbnNhY3Rpb25zLCBpdCBpcyBlYXN5IHRvIHNob3cgdGhhdCB0aGV5IGhhdmUgaW52b2x2ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoIGluIHZlcnkgc2VyaW91cyBwZXJpbHMuIFlvdSBhbGwga25vdyB0aGF0IHRoZSBwcm93ZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zLCBhbmQgdGhlaXIgY29udHJvbCBvZiB0aGUgcGFzcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIGdhdmUgdXMgc2VjdXJpdHkgYWdhaW5zdCB0aGUgVGhlYmFucywgYW5kIGVuc3VyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5laXRoZXIgUGhpbGlwIG5vciB0aGUgVGhlYmFucyB3b3VsZCBpbnZhZGUgZWl0aGVyIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4sIG9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIG92ZXJib3JuZSBieSB0aGUgaW1wb3N0dXJlcyBhbmQKICAgICAgICAgICAgICAgICAgICBmYWxzZWhvb2RzIG9mIHRoZXNlIG1lbiwgeW91IGhhdmUgZmx1bmcgYXdheSB0aGUgc2VjdXJpdHkgb2YgcG9zaXRpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcyB3aGljaCB0aGUgY2l0eSBlbmpveWVkLiBUaGF0IHNlY3VyaXR5IHdhcyBmb3J0aWZpZWQgYnkgYXJtcyBhbmQgYW4KICAgICAgICAgICAgICAgICAgICB1bmJyb2tlbiBmcm9udCwgYnkgc3Ryb25naG9sZHMgb2Ygb3VyIGFsbGllcyBhbmQgYSBicm9hZCB0ZXJyaXRvcnk7IGFuZCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFjcXVpZXNjZWQgaW4gaXRzIGRldmFzdGF0aW9uLiBZb3VyIGZvcm1lciBleHBlZGl0aW9uIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgbWFkZSBhdCBhIGNvc3Qgb2YgbW9yZQogICAgICAgICAgICAgICAgICAgIHRoYW4gdHdvIGh1bmRyZWQgdGFsZW50cywgaWYgeW91IGluY2x1ZGUgdGhlIHByaXZhdGUgZXhwZW5zZXMgb2YgdGhlIHRyb29wcywgaGFzCiAgICAgICAgICAgICAgICAgICAgZ29uZSB0byB3YXN0ZTsgYW5kIHNvIGhhdmUgYWxsIHlvdXIgaG9wZXMgcmVzcGVjdGluZyB0aGUgVGhlYmFucy4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgYWxsIHRoZSBtYW55IHNoYW1lZnVsIHNlcnZpY2VzIHJlbmRlcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIHRvIFBoaWxpcCwgbGV0IG1lIG1lbnRpb24gdGhlIG9uZSB0aGF0IHJlYWxseSBpbXBsaWVkIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgaW5zb2xlbnQgZGlzZGFpbiBvZiB0aGUgY2l0eSBhbmQgb2YgeW91IGFsbC4gUGhpbGlwIHdhcyByZXNvbHZlZCBmcm9tIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIHRvIGRvIGZvciB0aGUgVGhlYmFucyBhbGwgdGhhdCBoZSBoYXMgZG9uZSwgYnV0IEFlc2NoaW5lcyBieSB0aGUgcGVydmVyc2lvbnMgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgcmVwb3J0IHJldmVhbGVkIHlvdXIgcmVwdWduYW5jZSwgYW5kIHNvIGludGVuc2lmaWVkIGJvdGggeW91ciBob3N0aWxpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgZnJpZW5kbGluZXNzIHRvd2FyZHMgdGhlIFRoZWJhbnMuIEhvdyBjb3VsZCB0aGUgbWFuIGhhdmUgdHJlYXRlZCB5b3UKICAgICAgICAgICAgICAgICAgICBtb3JlIGFycm9nYW50bHk/IDwvdHJhbnNsYXRpb24+"
translation['19.Proof.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgYW5kIHJlYWQgdGhlIGRlY3JlZXMgb2YgRGlvcGhhbnR1cyBhbmQgb2YgQ2FsbGlzdGhlbmVzLiBUaGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBzaG93IHlvdSBob3csIHdoZW4geW91IGRpZCB5b3VyIGR1dHksIHlvdSBtYWRlIGl0IGFuIG9jY2FzaW9uIG9mIHNlcnZpY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgcHJhaXNlIGFuZCB0aGFua3NnaXZpbmcsIGJvdGggYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBhYnJvYWQ7IGJ1dCB3aGVuIHlvdSBoYWQgYmVlbiBsZWQgYXN0cmF5IGJ5IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuLCB5b3UgYnJvdWdodCB5b3VyIHdpdmVzIGFuZCBjaGlsZHJlbiBpbiBmcm9tIHRoZSBjb3VudHJ5LCBhbmQgb3JkZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICBmZXN0aXZhbCBvZiBIZXJhY2xlcyB0byBiZSBoZWxkIHdpdGhpbiB0aGUgd2FsbHMsIGluIHRpbWUgb2YgcGVhY2UuIEl0IG1ha2VzIG1lCiAgICAgICAgICAgICAgICAgICAgd29uZGVyIHdoZXRoZXIgeW91IHdpbGwgcmVsZWFzZSB1bnB1bmlzaGVkIGEgbWFuIHdobyBoYXMgZGVwcml2ZWQgZXZlbiB0aGUgZ29kcwogICAgICAgICAgICAgICAgICAgIG9mIGltbWVtb3JpYWwgb2JzZXJ2YW5jZXMuIFJlYWQgdGhlIGRlY3JlZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28geW91IGRlY3JlZWQgYXQgdGhhdCB0aW1lLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhZ3JlZWFibHkgdG8geW91cgogICAgICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy4gTm93IHJlYWQgdGhlIG5leHQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWUgeW91IHRoZW4gbWFkZTsgYW5kIHlvdSBvd2UgaXQgdG8gdGhlc2UgbWVuLiBJdCB3YXMgbm90IHdpdGggc3VjaAogICAgICAgICAgICAgICAgICAgIGV4cGVjdGF0aW9ucyB0aGF0IHlvdSBlaXRoZXIgbWFkZSB0aGUgZmlyc3QgZHJhZnQgb2YgdGhlIHBlYWNlIGFuZCBhbGxpYW5jZSwgb3IKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50bHkgY29uc2VudGVkIHRvIGFkZCB0aGUgd29yZHMsIGFuZCB0byBoaXMgcG9zdGVyaXR5LCBidXQgaW4gdGhlIGhvcGUKICAgICAgICAgICAgICAgICAgICBvZiBtYXJ2ZWxsb3VzIGJlbmVmaXRzIHRocm91Z2ggdGhlaXIgYWdlbmN5LiBZZXMsIGFuZCBzaW5jZSB0aGVuIHlvdSBhbGwKICAgICAgICAgICAgICAgICAgICByZW1lbWJlciBob3cgbWFueSB0aW1lcyB5b3UgaGF2ZSBiZWVuIGFnaXRhdGVkIGJ5IG5ld3Mgb2YgUGhpbGlwJ3MgYXJteSBhbmQKICAgICAgICAgICAgICAgICAgICBhdXhpbGlhcmllcyBhdCBQb3J0aG11cyBvciBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4uIFRydWUsIGhlIGhhcyBub3QgeWV0IHNldCBmb290IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPjsgYnV0IHlvdSBtdXN0IG5vdCBsb29rIG9ubHkgYXQgdGhhdCBhbmQKICAgICAgICAgICAgICAgICAgICBhYmF0ZSB5b3VyIHZpZ2lsYW5jZSzigJR5b3UgbXVzdCBiZWFyIGluIG1pbmQgdGhhdCwgdGhhbmtzIHRvIHRoZXNlIG1lbiwKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgaXQgaW4gaGlzIHBvd2VyIHRvIGRvIHNvIHdoZW5ldmVyIGhlIGNob29zZXMuIFlvdSBtdXN0IGtlZXAgdGhhdCBkYW5nZXIKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91ciBleWVzLCBhbmQgYWJob3IgYW5kIHB1bmlzaCB0aGUgYXV0aG9yIGFuZCBwdXJ2ZXlvciBvZiB0aGF0IHBvd2VyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm8gZG91YnQKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgd2lsbCBlc2NoZXcgYSBkaXJlY3QgcmVwbHkgdG8gdGhlIGNoYXJnZXMgYWxsZWdlZCwgYW5kIGluIGhpcyBkZXNpcmUKICAgICAgICAgICAgICAgICAgICB0byBsZWFkIHlvdSBhcyBmYXIgYXMgcG9zc2libGUgYXdheSBmcm9tIHRoZSBmYWN0cywgaGUgd2lsbCBkaWxhdGUgb24gdGhlIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgYmxlc3NpbmdzIHRoYXQgcGVhY2UgYnJpbmdzIHRvIHRoZSB3b3JsZCBhbmQgc2V0IGFnYWluc3QgdGhlbSB0aGUgZXZpbHMgb2Ygd2FyLgogICAgICAgICAgICAgICAgICAgIEhlIHdpbGwgZXVsb2dpemUgcGVhY2UgaW4gZ2VuZXJhbCB0ZXJtcywgYW5kIHRoYXQgd2lsbCBiZSBoaXMgZGVmZW5jZS4gQnV0IGFsbAogICAgICAgICAgICAgICAgICAgIHRob3NlIGNvbnNpZGVyYXRpb25zIHRlbGwgYWdhaW5zdCBoaW0uIEZvciwgaWYgcGVhY2UsIHdoaWNoIGJyaW5ncyBibGVzc2luZ3MgdG8KICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGhhcyBicm91Z2h0IHNvIG11Y2ggdmV4YXRpb24gYW5kIGJld2lsZGVybWVudCB0byB5b3UsIHdoYXQgYXJlIHdlIHRvIHNheQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB0aGF0IHRoZXNlIG1lbiB3aXRoIHRoZWlyIGJyaWJlLXRha2luZyBoYXZlIHBlcnZlcnRlZCB0byBldmlsIGEgdGhpbmcgaW4KICAgICAgICAgICAgICAgICAgICBpdHNlbGYgZXhjZWxsZW50PyBXaGF0IG5leHQ/IDwvdHJhbnNsYXRpb24+"
translation['19.Proof.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5QZXJoYXBzIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBhc2s6IOKAnERvIHlvdSBub3QgcmV0YWluLCBhbmQgc2hhbGwgeW91IG5vdCByZXRhaW4gdGhyb3VnaCB0aGUgcGVhY2UsCiAgICAgICAgICAgICAgICAgICAgdGhyZWUgaHVuZHJlZCB3YXItZ2FsbGV5cyB3aXRoIHN0b3JlcyBhbmQgbW9uZXkgZm9yIHRoZW0/4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiByZXBseSB0byB0aGF0LCB5b3UgaGF2ZSB0byByZWZsZWN0IHRoYXQgUGhpbGlwIGFsc28KICAgICAgICAgICAgICAgICAgICBoYXMgZ3JlYXRseSBzdHJlbmd0aGVuZWQgaGlzIHBvc2l0aW9uIG93aW5nIHRvIHRoZSBwZWFjZSwgYXMgcmVnYXJkcyBoaXMKICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCByZXNvdXJjZXMgaW4gYXJtcywgaW4gdGVycml0b3J5LCBpbiByZXZlbnVlcywgd2hpY2ggbGFzdCBoYXZlIGluY3JlYXNlZAogICAgICAgICAgICAgICAgICAgIGxhcmdlbHkuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gaW5kZWVkIGhhdmUgb3VycywgdG8gc29tZQogICAgICAgICAgICAgICAgICAgIGV4dGVudC4gQnV0IGFzIHRvIHRob3NlIG90aGVyIHJlc291cmNlcywgb2YgcG9saWN5IGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGFsbGlhbmNlLOKAlGFuZCBpdCBpcyBieSB0aGVtIHRoYXQgYWxsIG5hdGlvbnMgaG9sZCBhZHZhbnRhZ2VzIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgb3IgZm9yIHN0cm9uZ2VyIHN0YXRlc+KAlGluIG91ciBjYXNlLCBiYXJ0ZXJlZCBhd2F5IGJ5IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuLCB0aGV5IGhhdmUgcGVyaXNoZWQsIG9yIGF0IGxlYXN0IGRldGVyaW9yYXRlZDogaGlzIGFyZSBub3cgZm9ybWlkYWJsZSBhbmQKICAgICAgICAgICAgICAgICAgICBmYXIgZ3JlYXRlci4gSXQgaXMgc3VyZWx5IHVuZmFpciB0aGF0LCB3aGlsZSBQaGlsaXAsIHRoYW5rcyB0byB0aGVzZSBtZW4sIGVuam95cwogICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkIGFsbGlhbmNlcyBhbmQgaW5jcmVhc2VkIHJldmVudWVzLCB0aGUgYWR2YW50YWdlcyB0aGF0IHdlIHNob3VsZCBpbiBhbnkKICAgICAgICAgICAgICAgICAgICBjYXNlIGhhdmUgZ2FpbmVkIGZyb20gdGhlIHBlYWNlIHNob3VsZCBiZSByZWNrb25lZCBieSB0aGVtIGFzIGEgc2V0LW9mZiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgdGhhdCB0aGV5IGhhdmUgc29sZC4gRm9yIG91ciBnYWlucyBhcmUgbm90IGEgY29tcGVuc2F0aW9uIGZvciBvdXIgbG9zc2VzOwogICAgICAgICAgICAgICAgICAgIGZhciBmcm9tIGl0ISBObzsgd2hhdCB3ZSBub3cgaGF2ZSB3b3VsZCBlcXVhbGx5IGhhdmUgYmVlbiBvdXJzLCBhbmQgd2hhdCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm90IHdvdWxkIGhhdmUgYmVlbiBhZGRlZCB0byB1cywgYnV0IGZvciB0aGVzZSBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3BlYWtpbmcgZ2VuZXJhbGx5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3Ugd2lsbCBkb3VidGxlc3MgYWdyZWUgdGhhdCwKICAgICAgICAgICAgICAgICAgICBob3dldmVyIG1hbnkgbWlzZm9ydHVuZXMgaGF2ZSBiZWZhbGxlbiB0aGUgY2l0eSwgaWYgQWVzY2hpbmVzIGhhZCBubyBoYW5kIGluCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgdGhleSBvdWdodCBub3QgdG8gYmUgdmlzaXRlZCB1cG9uIGhpbS4gT24gdGhlIG90aGVyIGhhbmQsIGlmIHRoZSByaWdodAogICAgICAgICAgICAgICAgICAgIHBvbGljeSBoYXMgYmVlbiB0YWtlbiBieSBvdGhlcnMsIGl0IGlzIG5vdCBmYWlyIHRoYXQgdGhlaXIgc3VjY2VzcyBzaG91bGQgc2F2ZQogICAgICAgICAgICAgICAgICAgIGhpbS4gVGFrZSBpbnRvIGFjY291bnQgZXZlcnl0aGluZyB0byB3aGljaCBoZSBjb250cmlidXRlZDsgcmVxdWl0ZSBoaW0gd2l0aAogICAgICAgICAgICAgICAgICAgIGdyYXRpdHVkZSwgaWYgaGUgZGVzZXJ2ZXMgaXQsIHdpdGggcmVzZW50bWVudCwgaWYgaGlzIGNvbmR1Y3QgcHJvdm9rZXMKICAgICAgICAgICAgICAgICAgICByZXNlbnRtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgdGhlbiB3aWxsIHlvdSByZWFjaCBhIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbj8gRG8gbm90IGFsbG93IGhpbSB0byBtYWtlIGEgaG90Y2gtcG90Y2ggb2YgdGhlIGZhdWx0cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFscywgdGhlIHdhciB3aXRoIFBoaWxpcCwgdGhlIGJsZXNzaW5ncyBvZiBwZWFjZTsgYnV0IGNvbnNpZGVyIG9uZSB0aGluZyBhdAogICAgICAgICAgICAgICAgICAgIGEgdGltZS4gRm9yIGV4YW1wbGUsIHdlIHdlcmUgYXQgd2FyIHdpdGggUGhpbGlwLiBUcnVlLiBEb2VzIGFueW9uZSBibGFtZQogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBmb3IgdGhhdD8gRG9lcyBhbnlvbmUgd2lzaCB0byBhcnJhaWduIGhpbSBmb3IgdGhlIGV2ZW50cyBvZiB0aGUgd2FyPwogICAgICAgICAgICAgICAgICAgIE5vdCBhIHNpbmdsZSBtYW4uIFRoZW4gc28gZmFyIGhlIGlzIGFjcXVpdHRlZDsgaGUgbmVlZCBub3Qgc2F5IGEgd29yZC4gQQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBzaG91bGQgYWRkdWNlIHdpdG5lc3NlcyBhbmQgc3VibWl0IHByb29mcyBvbiB0aGUgaXNzdWVzIGluIGRpc3B1dGUsCiAgICAgICAgICAgICAgICAgICAgbm90IG1pc2xlYWQgdGhlIGp1cnkgYnkgYWRkcmVzc2luZyBoaXMgZGVmZW5jZSB0byBwb2ludHMgb2YgYWdyZWVtZW50LiBZb3UgYXJlCiAgICAgICAgICAgICAgICAgICAgbm90IHRvIHNheSBhbnl0aGluZyBhYm91dCB0aGUgd2FyLCBBZXNjaGluZXMuIE5vIG9uZSBibGFtZXMgeW91IGZvciB0aGF0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzIGNlcnRhaW4gcGVyc29ucyBhZHZpc2VkIHVzIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBwZWFjZTsgd2UgdG9vayB0aGVpciBhZHZpY2U7IHdlIHNlbnQgYW1iYXNzYWRvcnM7IGFuZCB0aGV5IGJyb3VnaHQgYmFjayB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gZW52b3lzIGF1dGhvcml6ZWQgdG8KICAgICAgICAgICAgICAgICAgICBjb25jbHVkZSBwZWFjZS4gSGVyZSBhZ2FpbiBubyBvbmUgYmxhbWVzIEFlc2NoaW5lcy4gRG9lcyBhbnlvbmUgYWxsZWdlIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBicm9hY2hlZCB0aGUgcXVlc3Rpb24gb2YgcGVhY2U/IE9yIHRoYXQgaGUgYWN0ZWQgd3JvbmdseSB3aGVuIGhlIGJyb3VnaHQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGVzIGhlcmU/IE5vdCBhIHNpbmdsZSBtYW4uIFRoZW4gYWJvdXQgdGhlIG1lcmUgZmFjdCB0aGF0IHRoZSBjaXR5IG1hZGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSBoZSBuZWVkIG5vdCBzYXkgYSB3b3JkOyBmb3IgdGhhdCBoZSBpcyBub3QgY2hhcmdlYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5TdXBwb3NlIEkgYW0gYXNrZWQ6IOKAnFdoYXQgZG8geW91IG1lYW4sIHNpcj8KICAgICAgICAgICAgICAgICAgICBBdCB3aGF0IHBvaW50IGRvIHlvdSBiZWdpbiB5b3VyIGFjY3VzYXRpb25zP+KAnSBJIGJlZ2luIGF0IHRoaXMgcG9pbnQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIEF0aGVuc+KAlGF0IHRoZSB0aW1lIHdoZW4geW91IHdlcmUgZGVsaWJlcmF0aW5nLCBub3Qgd2hldGhlcgogICAgICAgICAgICAgICAgICAgIHBlYWNlIHNob3VsZCBvciBzaG91bGQgbm90IGJlIG1hZGXigJR0aGF0IHF1ZXN0aW9uIHdhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgZGVjaWRlZOKAlGJ1dCB3aGF0IHNvcnQgb2YgcGVhY2UuIFRoZW4gaGUgY29udHJhZGljdGVkIG1lbiB3aG8gc3Bva2UKICAgICAgICAgICAgICAgICAgICBob25lc3RseSwgYW5kIGhlIHN1cHBvcnRlZCB0aGUgbW92ZXIgb2YgYSB2ZW5hbCByZXNvbHV0aW9uLCBiZWluZyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgYnJpYmVkLiBBZnRlcndhcmRzLCB3aGVuIGFwcG9pbnRlZCB0byByZWNlaXZlIHRoZSBvYXRocyBvZiByYXRpZmljYXRpb24sIGhlCiAgICAgICAgICAgICAgICAgICAgZGlzb2JleWVkIGV2ZXJ5IG9uZSBvZiB5b3VyIGluc3RydWN0aW9uczsgaGUgYnJvdWdodCB0byBydWluIGFsbGllcyBvZiBvdXJzCiAgICAgICAgICAgICAgICAgICAgd2hvc2Ugc2FmZXR5IGhhZCBuZXZlciBiZWVuIGltcGVyaWxsZWQgaW4gdGltZSBvZiB3YXI7IGFuZCBoZSB0b2xkIGxpZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBib3RoIGluIHF1YW50aXR5IGFuZCBxdWFsaXR5IGV4Y2VlZCBhbGwgcmVjb3JkcyBvZiBodW1hbiBtZW5kYWNpdHkgYmVmb3JlIG9yCiAgICAgICAgICAgICAgICAgICAgc2luY2UuIEF0IHRoZSBvdXRzZXQsIHVudGlsIFBoaWxpcCBnb3QgYSBoZWFyaW5nIG9uIHRoZSBxdWVzdGlvbiBvZiBwZWFjZSwKICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q3Rlc2lwaG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IGFuZCBBcmlzdG9kZW11cyB1bmRlcnRvb2sKICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgaW5pdGlhdGlvbiBvZiB0aGUgaW1wb3N0dXJlLCBidXQsIHdoZW4gdGhlIGJ1c2luZXNzIHdhcyByaXBlIGZvcgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwgdGhleSBwYXNzZWQgaXQgb24gdG8gUGhpbG9jcmF0ZXMgYW5kIHRoZSBkZWZlbmRhbnQsIHdobyB0b29rIGl0IG92ZXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbXBsZXRlZCB0aGUgZW50ZXJwcmlzZSBvZiBkZXN0cnVjdGlvbi4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHRoYXQgaGUgaXMgYW5zd2VyYWJsZSBmb3IgaGlzIG1pc2RlZWRzLCBhbmQgbXVzdCBzdGFuZCBoaXMgdHJpYWwsCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgYXMgaGUgaXMgYSBrbmF2ZSwgYSBzY291bmRyZWwsIGFuZOKAlGEgZ292ZXJubWVudCBjbGVyayw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgb2Z0ZW4gYWxsdWRlcyBzY29ybmZ1bGx5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcycgcHJvZmVzc2lvbiBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os8+BzrHOvM68zrHPhM614b27z4I8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgc2VlbXMgZmlyc3QgdG8gaGF2ZSBiZWVuIHByaXZhdGUgc2VjcmV0YXJ5IHRvIHRoZSBzdGF0ZXNtZW4KICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RvcGhvbiBhbmQgRXVidWx1cy4gQWZ0ZXIgaGlzIGNhcmVlciBvbiB0aGUgc3RhZ2UsIGhlIG9idGFpbmVkIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyLWNsZXJrc2hpcCBpbiB0aGUgQ2l2aWwgU2VydmljZSwgYW5kIHN1YnNlcXVlbnRseSBiZWNhbWUgQ2xlcmsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW5jaWwgYW5kIEFzc2VtYmx5LiBUaGlzIHdhcyBhbiBvZmZpY2lhbCBvZiBzb21lIGRpZ25pdHk7IGhlIHdhcyBhcHBvaW50ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgcG9wdWxhciBlbGVjdGlvbiBhbmQgZW5qb3llZCB0aGUgcHJpdmlsZWdlIG9mIGZyZWUgbWFpbnRlbmFuY2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFByeXRhbmV1bSBvciBUb3duIEhhbGwuPC9ub3RlPiBoZSB3aWxsIGNvbmR1Y3QgaGlzIGRlZmVuY2UgYXMgaWYgaGUgd2VyZSBvbgogICAgICAgICAgICAgICAgICAgIHRyaWFsIGZvciB0aGUgcGVhY2UsIG5vdCB0byBtYWtlIGhpcyBqdXN0aWZpY2F0aW9uIGJyb2FkZXIgdGhhbiBoaXMKICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW504oCUdGhhdCB3b3VsZCBiZSBmb2xseeKAlGJ1dCBiZWNhdXNlIGhlIGNhbiBzZWUgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIGFjdHMgbm90aGluZyB0aGF0IGlzIGdvb2QsIG5vdGhpbmcgdGhhdCBpcyBub3QgY3JpbWluYWwsIHdoaWxlIGEgZGVmZW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwZWFjZSwgaWYgaXQgaGFzIG5vIG90aGVyIG1lcml0LCB3aWxsIGVuYWJsZSBoaW0gdG8gcG9zZSBhcyBhIEZyaWVuZCBvZgogICAgICAgICAgICAgICAgICAgIEh1bWFuaXR5LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os8+BzrHOvM68zrHPhM614b27z4I8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgc2VlbXMgZmlyc3QgdG8gaGF2ZSBiZWVuIHByaXZhdGUgc2VjcmV0YXJ5IHRvIHRoZSBzdGF0ZXNtZW4KICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RvcGhvbiBhbmQgRXVidWx1cy4gQWZ0ZXIgaGlzIGNhcmVlciBvbiB0aGUgc3RhZ2UsIGhlIG9idGFpbmVkIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyLWNsZXJrc2hpcCBpbiB0aGUgQ2l2aWwgU2VydmljZSwgYW5kIHN1YnNlcXVlbnRseSBiZWNhbWUgQ2xlcmsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW5jaWwgYW5kIEFzc2VtYmx5LiBUaGlzIHdhcyBhbiBvZmZpY2lhbCBvZiBzb21lIGRpZ25pdHk7IGhlIHdhcyBhcHBvaW50ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgcG9wdWxhciBlbGVjdGlvbiBhbmQgZW5qb3llZCB0aGUgcHJpdmlsZWdlIG9mIGZyZWUgbWFpbnRlbmFuY2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFByeXRhbmV1bSBvciBUb3duIEhhbGwuPC90cmFuc2xhdGlvbj4="
translation['19.Proof.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3BlYWtpbmcgb2YgdGhlIHBlYWNlLCBJIGZlYXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgc2FkbHkgZmVhciB0aGF0IHdlIGFyZSB1bmNvbnNjaW91c2x5IGVuam95aW5nIGl0IGxpa2UKICAgICAgICAgICAgICAgICAgICBtZW4gd2hvIGJvcnJvdyBtb25leSBhdCBhIGhpZ2ggcmF0ZSBvZiBpbnRlcmVzdC4gRm9yIHRoZXNlIG1lbiBoYXZlIGJldHJheWVkIHRoZQogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IGFuZCBndWFyYW50ZWUgb2YgdGhlIHBlYWNl4oCUdGhlIFBob2NpYW5zIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4uIEFueWhvdywgd2UgaGF2ZSBub3QgdG8KICAgICAgICAgICAgICAgICAgICB0aGFuayB0aGUgZGVmZW5kYW50IGZvciBwZWFjZS4gV2hhdCBJIGFtIGdvaW5nIHRvIHNheSBpcyBzdHJhbmdlLCBidXQgcXVpdGUKICAgICAgICAgICAgICAgICAgICB0cnVlLiBJZiBhbnkgbWFuIGlzIHJlYWxseSBwbGVhc2VkIHdpdGggdGhlIHBlYWNlLCBsZXQgaGltIGJlIGdyYXRlZnVsIHRvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbHMgd2hvbSBldmVyeW9uZSBkZW5vdW5jZXMuIEZvciwgaGFkIHRoZXkgZm91Z2h0IHRvIHlvdXIgc2F0aXNmYWN0aW9uLCB5b3UKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIHNjb3JuZWQgdGhlIHZlcnkgbmFtZSBvZiBwZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5QZWFjZSwgdGhlbiwgd2Ugb3dlIHRvIHRoZSBnZW5lcmFsczsgYSBwZXJpbG91cywgaW5zZWN1cmUsIGFuZCBwcmVjYXJpb3VzCiAgICAgICAgICAgICAgICAgICAgcGVhY2UgdG8gdGhlc2UgbWVuIGFuZCB0aGVpciB2ZW5hbGl0eS4gUHV0IGEgc3RvcCwgdGhlbiwgdG8gaGlzIGVsb3F1ZW5jZSBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoZSBwZWFjZS4gTWFrZSBoaW0gYWRkcmVzcyBoaW1zZWxmIHRvIGhpcyBvd24gcGVyZm9ybWFuY2VzLiBBZXNjaGluZXMgaXMgbm90IG9uCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgZm9yIHRoZSBwZWFjZTsgdGhlIHBlYWNlIGlzIGRpc2NyZWRpdGVkIHRocm91Z2ggQWVzY2hpbmVzLiBUaGF0IGlzIGVhc2lseQogICAgICAgICAgICAgICAgICAgIHByb3ZlZC4gU3VwcG9zZSB0aGF0IHRoZSBwZWFjZSBoYWQgYmVlbiBjb25jbHVkZWQsIGFuZCB0aGF0IHlvdSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhlcmVhZnRlciBiZWVuIGRlbHVkZWQsIGFuZCBub25lIG9mIHlvdXIgYWxsaWVzIGRlc3Ryb3llZOKAlHdoYXQgaHVtYW4KICAgICAgICAgICAgICAgICAgICBiZWluZyB3b3VsZCB0aGUgcGVhY2UgaGF2ZSBhZ2dyaWV2ZWQ/IEkgbWVhbiwgYXBhcnQgZnJvbSB0aGUgY29uc2lkZXJhdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIG5vdCBhIGdsb3Jpb3VzIHBlYWNlLiBGb3IgdGhhdCBmYXVsdCBBZXNjaGluZXMgaXMgaW5kZWVkIHBhcnRseSB0byBibGFtZSwKICAgICAgICAgICAgICAgICAgICBhcyBoZSBzdXBwb3J0ZWQgUGhpbG9jcmF0ZXMuIEhvd2V2ZXIsIGluIHRoZSBjYXNlIHN1cHBvc2VkLCBubyBpbmN1cmFibGUKICAgICAgICAgICAgICAgICAgICBtaXNjaGllZiB3b3VsZCBoYXZlIGJlZW4gZG9uZS4gQXMgdGhlIGNhc2Ugc3RhbmRzLCBoZSBpcyBhbnN3ZXJhYmxlIGZvciBhIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgZGVhbC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgSQogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgdGhhdCB5b3UgYXJlIHNhdGlzZmllZCB0aGF0IGFsbCB0aGlzIHJ1aW4gYW5kIG1pc2NoaWVmIHdhcyBzaGFtZWZ1bGx5CiAgICAgICAgICAgICAgICAgICAgYW5kIHdpY2tlZGx5IHBlcnBldHJhdGVkIGJ5IHRoZXNlIG1lbi4gRm9yIG15IHBhcnQsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgSSBhbQogICAgICAgICAgICAgICAgICAgIHNvIHJlbHVjdGFudCB0byBwbGF5IHRoZSBpbmZvcm1lciBpbiB0aGVzZSBtYXR0ZXJzLCBvciB0byBhc2sgeW91IHRvIGRvIHNvLAogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggYmx1bmRlcnMgZHVlIHRvIHN0dXBpZGl0eSBvciBzaW1wbGljaXR5IG9yIGFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIHNvcnQgb2YgaWdub3JhbmNlLCBJIGFjcXVpdCBBZXNjaGluZXMsIGFuZCBpbnZpdGUgeW91IHRvIGRvIHRoZSBsaWtlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGlnbm9yYW5jZSBpcyBub3QgYSBmYWlyIGV4Y3VzZSBpbgogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBsaWZlOyBubyBtYW4gaXMgcmVxdWlyZWQgb3IgY29tcGVsbGVkIGJ5IHlvdSB0byBoYW5kbGUgcG9saXRpY3MuIFdoZW4gYQogICAgICAgICAgICAgICAgICAgIG1hbiBwdXRzIGhpbXNlbGYgZm9yd2FyZCB3aXRoIGEgcGVyc3Vhc2lvbiBvZiBoaXMgb3duIGFiaWxpdHksIHlvdSByZWNlaXZlIGhpcwogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VzLCBhcyBraW5kbHkgYW5kIGNvdXJ0ZW91cyBwZW9wbGUgc2hvdWxkLCB3aXRoIGdvb2R3aWxsIGFuZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgamVhbG91c3k7IHlvdSBnaXZlIGhpbSBhcHBvaW50bWVudHMgYW5kIGVudHJ1c3QgaGltIHdpdGggcHVibGljIGJ1c2luZXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+SWYgaGUgc3VjY2VlZHMsIGhlIHdpbGwgYmUgaG9ub3JlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc28gZmFyIHdpbGwgZ2FpbiBhbiBhZHZhbnRhZ2Ugb3ZlciBvcmRpbmFyeSBwZW9wbGU7IGJ1dCBpZiBoZSBmYWlscywgc2hhbGwgaGUKICAgICAgICAgICAgICAgICAgICBwdXQgZm9yd2FyZCBleGN1c2VzIGFuZCBhcG9sb2dpZXM/IFRoYXQgd291bGQgYmUgdW5mYWlyLiBGb3IgaXQgd291bGQgYmUgdmVyeQogICAgICAgICAgICAgICAgICAgIHBvb3IgY29uc29sYXRpb24gaW5kZWVkIHRvIG91ciBydWluZWQgYWxsaWVzLCBvciB0byB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3QsIHRvIGJlIHRvbGQgdGhhdCB0aGVpciBzdWZmZXJpbmdzIHdlcmUgZHVlIHRvIHN0dXBpZGl0eSBvbiBteSBwYXJ0LCBub3QKICAgICAgICAgICAgICAgICAgICB0byBzYXkgb24gaGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBJIGFzayB5b3UgdG8KICAgICAgICAgICAgICAgICAgICBvdmVybG9vayBldmVuIHRoZSBzY2FuZGFsb3VzIGFuZCBvdXRyYWdlb3VzIG1pc2NvbmR1Y3Qgb2YgQWVzY2hpbmVzLCBpZiBpdCBpcwogICAgICAgICAgICAgICAgICAgIHNob3duIHRoYXQgaGUgZGlkIGFsbCB0aGlzIG1pc2NoaWVmIGJlY2F1c2UgaGUgd2FzIHNpbXBsZS1taW5kZWQgb3Igb3RoZXJ3aXNlCiAgICAgICAgICAgICAgICAgICAgaWdub3JhbnQuIEJ1dCBpZiBoZSBtYWxpY2lvdXNseSBhY2NlcHRlZCBtb25leSBhbmQgcmV3YXJkcywgYW5kIGlmIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHByb3ZlZCBmcm9tIHRoZSBmYWN0cyBvZiB0aGUgY2FzZSwgcHV0IGhpbSB0byBkZWF0aCBpZiBwb3NzaWJsZSwgb3IsCiAgICAgICAgICAgICAgICAgICAgZmFpbGluZyB0aGF0LCBtYWtlIGhpbSBhIGxpdmluZyBleGFtcGxlIHRvIG90aGVyIG1hbGVmYWN0b3JzLiBOb3cgY29uc2lkZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvb2Ygb2YgdGhlc2UgbWF0dGVycyBhbmQgaXRzIGp1c3RpY2UsIGFtb25nIHlvdXJzZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzc3VtaW5nIHRoYXQsIHdoZW4KICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgbWFkZSB0aG9zZSBzcGVlY2hlcyBhYm91dCB0aGUgUGhvY2lhbnMgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNTgiPlRoZXNwaWFlPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIGhlIGhhZCBub3Qgc29sZCBoaW1zZWxmLCBhbmQgd2FzIG5vdCB3aWxmdWxseSBkZWNlaXZpbmcKICAgICAgICAgICAgICAgICAgICB5b3UsIHdlIGFyZSByZWR1Y2VkIHRvIG9uZSBvZiB0d28gc3VwcG9zaXRpb25zLiBFaXRoZXIgaGUgaGFkIHRha2VuIGFuIGV4cGxpY2l0CiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSBmcm9tIFBoaWxpcCB0aGF0IGhlIHdvdWxkIGRvIGFuZCBwZXJmb3JtIGNlcnRhaW4gYWN0cywgb3IgZWxzZSwgYmVpbmcKICAgICAgICAgICAgICAgICAgICBzcGVsbGJvdW5kIGFuZCBkZWx1ZGVkIGJ5IFBoaWxpcCdzIGhhYml0dWFsIGNvdXJ0ZXN5LCBoZSBob25lc3RseSBleHBlY3RlZCBoaW0KICAgICAgICAgICAgICAgICAgICB0byBkbyB0aGVtLiBUaGVyZSBpcyBubyB0aGlyZCBhbHRlcm5hdGl2ZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBvbiBlaXRoZXIgb2YgdGhvc2Ugc3VwcG9zaXRpb25zLCBoZSBvdWdodCwgb2YgYWxsIG1lbiBpbiB0aGUgd29ybGQsIHRvCiAgICAgICAgICAgICAgICAgICAgZGV0ZXN0IFBoaWxpcC4gV2h5PyBCZWNhdXNlLCB0aGFua3MgdG8gUGhpbGlwLCBoZSBoYXMgZmFsbGVuIGludG8gdGhlIHV0bW9zdAogICAgICAgICAgICAgICAgICAgIGRhbmdlciBhbmQgaWdub21pbnkuIEhlIGhhcyBkZWNlaXZlZCB5b3U7IGhpcyByZXB1dGF0aW9uIGlzIHNoYXR0ZXJlZDsgaGUgaXMgb24KICAgICAgICAgICAgICAgICAgICBoaXMgdHJpYWwuIElmIGhlIGhhZCBiZWVuIHRyZWF0ZWQgYXMgaGUgZGVzZXJ2ZXMsIGhlIHdvdWxkIGhhdmUgYmVlbiBpbXBlYWNoZWQKICAgICAgICAgICAgICAgICAgICBsb25nIGFnbzsgYnV0LCBpbiBmYWN0LCBieSB5b3VyIHNpbXBsaWNpdHkgYW5kIHBsYWNhYmlsaXR5LCBoZSBpcyBvbmx5CiAgICAgICAgICAgICAgICAgICAgc3VibWl0dGluZyB0byB0aGUgdXN1YWwgc2NydXRpbnksIGFuZCBoYXMgY2hvc2VuIGhpcyBvd24gdGltZS4gSXMgdGhlcmUgdGhlbiBhbnkKICAgICAgICAgICAgICAgICAgICBtYW4gaW4gdGhhdCBib3ggd2hvIGhhcyBldmVyIGhlYXJkIHRoZSB2b2ljZSBvZiBBZXNjaGluZXMgZGVub3VuY2luZyBQaGlsaXAsIG9yCiAgICAgICAgICAgICAgICAgICAgaGFzIGtub3duIGhpbSB0byBwcmVzcyBob21lLCBvciBldmVuIG1lbnRpb24sIGhpcyBncmlldmFuY2UgYWdhaW5zdCBQaGlsaXA/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjEwNCB0byAxMDk8L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGEgbWFuISBFdmVyeSBtYW4gaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGlzIG1vcmUgcmVhZHkgdGhhbiBoZSBpcyB0byBkZW5vdW5jZQogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwgZXZlbiBjYXN1YWwgcGVvcGxlLCB3aG8gaGF2ZSBzdWZmZXJlZCBubyBwZXJzb25hbCB3cm9uZy4gSSB3YXMgZXhwZWN0aW5nCiAgICAgICAgICAgICAgICAgICAgaGltLCBpZiBoZSBoYWQgbm90IHNvbGQgaGltc2VsZiwgdG8gbWFrZSB0aGlzIHNwZWVjaDog4oCcTWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZGVhbCB3aXRoIG1lIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIGNob29zZS4gSSB3YXMgY3JlZHVsb3VzOyBJIHdhcyBkZWNlaXZlZDsgSSBtYWRlIGEgYmx1bmRlcjsgSSBhZG1pdCBpdC4gQmV3YXJlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBtYW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZG91YmxlLWZhY2VkLCBhIHRyaWNrc3RlciwgYSBzY291bmRyZWwuIFNlZSBob3cgaGUgaGFzIGJlaGF2ZWQgdG8gbWU7IHNlZSBob3cgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgbWFkZSBtZSBoaXMgZHVwZS7igJ0gQnV0IG5vOyBJIGhhdmUgbmV2ZXIgaGVhcmQgaGltIHRhbGsgbGlrZSB0aGF0LAogICAgICAgICAgICAgICAgICAgIG5vciBoYXZlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+V2h5PyBCZWNhdXNlIGhlIHdhcyBub3QgY2Fqb2xlZAogICAgICAgICAgICAgICAgICAgIGFuZCBob29kd2lua2VkOyBoZSBoYWQgc29sZCBoaW1zZWxmLCBhbmQgcG9ja2V0ZWQgdGhlIG1vbmV5LCBiZWZvcmUgaGUgbWFkZSBoaXMKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggYW5kIGJldHJheWVkIHVzIHRvIFBoaWxpcC4gVG8gUGhpbGlwIGhlIGhhcyBiZWVuIGEgdHJ1c3R5IGFuZAogICAgICAgICAgICAgICAgICAgIHdlbGwtYmVsb3ZlZCBoaXJlbGluZzsgdG8geW91IGEgdHJlYWNoZXJvdXMgYW1iYXNzYWRvciBhbmQgYSB0cmVhY2hlcm91cwogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHdvcnRoeSBvZiB0aHJlZWZvbGQgZGVzdHJ1Y3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgaXMgbm90IHRoZSBvbmx5IHByb29mIHRoYXQgaGUgd2FzIHBhaWQKICAgICAgICAgICAgICAgICAgICBmb3IgYWxsIHRoYXQgaGUgc2FpZC4gVGhlIG90aGVyIGRheSB0aGVyZSBjYW1lIHRvIHlvdSBzb21lIFRoZXNzYWxpYW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICBlbnZveXMgb2YgUGhpbGlwIHdpdGggdGhlbSwgdG8gYXNrIHlvdSB0byB2b3RlIGZvciBQaGlsaXAncyBhZG1pc3Npb24gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgQW1waGljdHlvbmljIENvdW5jaWwuIFdobyBvdWdodCB0byBoYXZlIGJlZW4gdGhlIHZlcnkgZmlyc3QgdG8gb3Bwb3NlIHRoZW0/CiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzLiBXaHkgPyBCZWNhdXNlIFBoaWxpcCdzIGFjdHMgaGFkIGZhbHNpZmllZCBoaXMgcmVwb3J0LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhhZCB0b2xkIHlvdSB0aGF0IFBoaWxpcCB3b3VsZCBmb3J0aWZ5CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNTgiPlRoZXNwaWFlPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4sIHdvdWxkIG5vdCBkZXN0cm95IHRoZSBQaG9jaWFucywKICAgICAgICAgICAgICAgICAgICBhbmQgd291bGQgcHV0IGEgc3RvcCB0byB0aGUgYWdncmVzc2lvbnMgb2YgdGhlIFRoZWJhbnM7IGJ1dCBQaGlsaXAgaGFzIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBkYW5nZXJvdXNseSBzdHJvbmcsIGhlIGhhcyBleHRlcm1pbmF0ZWQgdGhlIFBob2NpYW5zLCBhbmQsIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICBmb3J0aWZ5aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNTgiPlRoZXNwaWFlPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4sIGhlIGhhcyBlbnNsYXZlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAzNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDM0Ij5PcmNob21lbnVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTIzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjM1Ij5Db3JvbmVhPC9wbGFjZU5hbWU+IGFzIHdlbGwuIENvdWxkIGNvbnRyYWRpY3Rpb24gZ28gZnVydGhlcj8gWWV0IEFlc2NoaW5lcwogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgbm8gb3Bwb3NpdGlvbjsgaGUgbmV2ZXIgb3BlbmVkIGhpcyBsaXBzIG9yIG1hZGUgYSBzaW5nbGUgb2JqZWN0aW9uLiBUaGF0CiAgICAgICAgICAgICAgICAgICAgd2FzIGJhZOKAlGJ1dCBub3QgYmFkIGVub3VnaCBmb3IgaGltLiBIZSBkaWQgd2hhdCBubyBvdGhlciBtYW4gaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBkaWTigJRoZSBzcG9rZSBpbgogICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgb2YgdGhlIGVudm95cy4gRXZlbiB0aGF0IG1pc2NyZWFudCBQaGlsb2NyYXRlcyBkdXJzdCBub3QgZ28gc28gZmFyIGFzCiAgICAgICAgICAgICAgICAgICAgdGhhdOKAlG9ubHkgdGhpcyBtYW4gQWVzY2hpbmVzLiBXaGVuIHlvdSByYWlzZWQgYSBjbGFtb3IsIGFuZCByZWZ1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciBoaW0sIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+aGUgY2FtZSBkb3duIGZyb20gdGhlIHRyaWJ1bmUsCiAgICAgICAgICAgICAgICAgICAgZXhjbGFpbWluZywgaW4gb3JkZXIgdG8gY3V0IGEgZmlndXJlIGJlZm9yZSBQaGlsaXAncyBhbWJhc3NhZG9yc+KAlHlvdQogICAgICAgICAgICAgICAgICAgIGNhbm5vdCBoYXZlIGZvcmdvdHRlbiBpdDrigJTigJxQbGVudHkgb2Ygc2hvdXRlcnMsIGJ1dCB2ZXJ5IGZldwogICAgICAgICAgICAgICAgICAgIGZpZ2h0ZXJzLCB3aGVuIGl0IGNvbWVzIHRvIGZpZ2h0aW5nIeKAneKAlGJlaW5nIGhpbXNlbGYsIEkKICAgICAgICAgICAgICAgICAgICBzdXBwb3NlLCBzdWNoIGEgbWFydmVsbG91cyBmaWdodGVyLiBPIGhlYXZlbnMhIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgYW5vdGhlciBwb2ludDogaWYgd2Ugd2VyZSB1bmFibGUgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IGFueSBvbmUgbWFuIGFtb25nIHRoZSBhbWJhc3NhZG9ycyByZWNlaXZlZCBhbnl0aGluZywgb3IgaWYgdGhhdCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm90IGFzIGNsZWFyIGFzIGRheWxpZ2h0LCB3ZSBtaWdodCBoYXZlIGhhZCByZWNvdXJzZSB0byB0b3J0dXJlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPnRvcnR1cmU6IHRvIGdldCBldmlkZW5jZSBmcm9tIHNsYXZlcy48L25vdGU+IG9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGxpa2UuIEJ1dCB3aGVuIFBoaWxvY3JhdGVzIG5vdCBvbmx5IGNvbmZlc3NlZCBoaXMgZ2FpbnMgcmVwZWF0ZWRseSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSwgYnV0IHBhcmFkZWQgdGhlbSBiZWZvcmUgeW91ciBleWVzLCBkZWFsaW5nIGluIHdoZWF0LCBidWlsZGluZyBob3VzZXMsCiAgICAgICAgICAgICAgICAgICAgYm9hc3RpbmcgdGhhdCBoZSB3b3VsZCBnbyBhYnJvYWQgZXZlbiBpZiB5b3UgZGlkIG5vdCBhcHBvaW50IGhpbSwgaW1wb3J0aW5nCiAgICAgICAgICAgICAgICAgICAgdGltYmVyLCBjaGFuZ2luZyBoaXMgZ29sZCBvcGVubHkgYXQgdGhlIGJhbmtlcnMs4oCUaGUgYXNzdXJlZGx5IGNhbm5vdAogICAgICAgICAgICAgICAgICAgIGRlbnkgdGhhdCBoZSBoYXMgdGFrZW4gbW9uZXksIGFmdGVyIHRoYXQgYWRtaXNzaW9uIGFuZCB0aGF0IGRpc3BsYXkuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpbmsgdGhlbiBvZiBhIG1hbiwgd2hvIGhhZCBpdCBpbiBoaXMgcG93ZXIgdG8gYmUKICAgICAgICAgICAgICAgICAgICBjb3VudGVkIGFtb25nIHRoZSBpbm5vY2VudCwgY2hvb3NpbmcgdG8gZmFsbCBvdXQgd2l0aCB0aGVtIGFuZCB0byBiZSBhY2N1c2VkIGFzCiAgICAgICAgICAgICAgICAgICAgYW4gYWRoZXJlbnQgb2YgUGhpbG9jcmF0ZXMsIG1lcmVseSB0byBsZXQgUGhpbG9jcmF0ZXMgbWFrZSBtb25leSwgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICBhY2NlcHRzIG9ubHkgdGhlIGRpc2NyZWRpdCBhbmQgdGhlIHBlcmlsISBDb3VsZCBhbnkgaHVtYW4gYmVpbmcgYmUgc28gc2Vuc2VsZXNzLAogICAgICAgICAgICAgICAgICAgIG9yIHNvIHVubHVja3k/IE5vLCBpbmRlZWQuIFlvdSB3aWxsIGZpbmQgaGVyZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaWYgeW91IHdpbGwgb25seSBsb29rIGF0IGl0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHdheSwgYSBzdHJvbmcgYW5kIHN1ZmZpY2llbnQgcHJvb2YgdGhhdCBBZXNjaGluZXMgZGlkIHRha2UgYnJpYmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBsb29rCiAgICAgICAgICAgICAgICAgICAgYXQgYSByZWNlbnQsIGJ1dCBtb3N0IGNvbnZpbmNpbmcsIHByb29mIHRoYXQgaGUgc29sZCBoaW1zZWxmIHRvIFBoaWxpcC4gWW91CiAgICAgICAgICAgICAgICAgICAga25vdywgSSBhbSBzdXJlLCB0aGF0LCBub3QgbG9uZyBhZ28sIHdoZW4gSHlwZXJlaWRlcyBpbXBlYWNoZWQgUGhpbG9jcmF0ZXMsIEkKICAgICAgICAgICAgICAgICAgICByb3NlIGFuZCBzYWlkIHRoYXQgSSB3YXMgZGlzc2F0aXNmaWVkIHdpdGggdGhlIGltcGVhY2htZW50IGluIG9uZSByZXNwZWN0OiBpdAogICAgICAgICAgICAgICAgICAgIGltcGxpZWQgdGhhdCBhbGwgdGhlc2UgZ3JhdmUgbWlzZGVtZWFub3JzIGhhZCBiZWVuIGNvbW1pdHRlZCBieSBQaGlsb2NyYXRlcwogICAgICAgICAgICAgICAgICAgIGFsb25lLCBhbmQgbm90IGJ5IGFueSBvZiB0aGUgb3RoZXIgbmluZSBhbWJhc3NhZG9ycy4gVGhhdCwgSSByZW1hcmtlZCwgd2FzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZTsgZm9yIGJ5IGhpbXNlbGYgUGhpbG9jcmF0ZXMgd291bGQgaGF2ZSBjb3VudGVkIGZvciBub3RoaW5nLCBpZiBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBub25lIG9mIGhpcyBjb2xsZWFndWVzIHRvIGFjdCB3aXRoIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+4oCcSSBkbyBub3Qgd2lzaCzigJ0gSSBzYWlkLCDigJxlaXRoZXIgdG8gYWNxdWl0IG9yIHRvCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlIGFueSBtYW47IEkgd2FudCB0aGUgZ3VpbHQgdG8gYmUgZGV0ZWN0ZWQgYW5kIHRoZSBpbm5vY2VudCBjbGVhcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgcGxhaW4gZmFjdC4gVGhlcmVmb3JlIGxldCBhbnkgbWFuIHdobyBjaG9vc2VzIHN0YW5kIHVwIGFuZCBjb21lIGZvcndhcmQsIGFuZAogICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgdGhhdCBoZSBoYWQgbm8gcGFydCBpbiBQaGlsb2NyYXRlcycgZG9pbmdzLCBhbmQgZG9lcyBub3QgYXBwcm92ZSB0aGVtLgogICAgICAgICAgICAgICAgICAgIEV2ZXJ5IG1hbiB3aG8gZG9lcyB0aGlzLOKAnSBJIGFkZGVkLCDigJxJIGFjcXVpdC7igJ0gTm8KICAgICAgICAgICAgICAgICAgICBkb3VidCB5b3UgcmVtZW1iZXIgdGhlIGluY2lkZW50LiBXZWxsLCBubyBvbmUgY2FtZSBmb3J3YXJkIG9yIHByZXNlbnRlZCBoaW1zZWxmLgogICAgICAgICAgICAgICAgICAgIFRoZSByZXN0IGhhZCB2YXJpb3VzIGV4Y3VzZXM6IDwvdHJhbnNsYXRpb24+"
translation['19.Proof.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+b25lIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBsZWdhbGx5IGFjY291bnRhYmxlOyBhbm90aGVyIHdhcyBub3QgcHJlc2VudDsgYSB0aGlyZCBoYWQgYSBicm90aGVyLWluLWxhdyBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4uIEFlc2NoaW5lcyBoYWQgbm8gc3VjaAogICAgICAgICAgICAgICAgICAgIGV4Y3VzZS4gVGhlIHRydXRoIGlzLCBoZSBoYXMgc29sZCBoaW1zZWxmIG9uY2UgZm9yIGFsbC4gTm90IG9ubHkgaGFzIGhlIHRha2VuCiAgICAgICAgICAgICAgICAgICAgaGlyZSBmb3IgcGFzdCBhY3Rpb25zLCBidXQgaXQgaXMgZXZpZGVudCB0aGF0LCBpZiBoZSBlc2NhcGVzIG5vdywgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGhlbmNlZm9yd2FyZCwgYXMgYWdhaW5zdCB5b3UsIGJlIFBoaWxpcCdzIG1hbjsgYW5kIHNvLCBmb3IgZmVhciBvZiB1dHRlcmluZyBhCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIHdvcmQgaW5qdXJpb3VzIHRvIFBoaWxpcCwgZXZlbiB3aGVuIHlvdSBhY3F1aXQgaGltIGhlIGRvZXMgbm90IGFjY2VwdAogICAgICAgICAgICAgICAgICAgIGFjcXVpdHRhbC4gSGUgcHJlZmVycyBkaXNyZXB1dGUsIHByb3NlY3V0aW9uLCBhbnkgcHVuaXNobWVudCB0aGlzIGNvdXJ0IG1heQogICAgICAgICAgICAgICAgICAgIGluZmxpY3QgcmF0aGVyIHRoYW4gdG8gZG8gYW55dGhpbmcgZGlzYWdyZWVhYmxlIHRvIFBoaWxpcC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoeSB0aGlzIGZlbGxvdy1mZWVsaW5nPyBXaHkgdGhpcyBjb25jZXJuIGZvcgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzPyBUaG91Z2ggYWxsIGhpcyBhY3RzIG9uIGVtYmFzc3kgaGFkIGJlZW4gY29uc2lzdGVudCB3aXRoIGhvbm9yIGFuZAogICAgICAgICAgICAgICAgICAgIHNvdW5kIHBvbGljeSwgaWYgUGhpbG9jcmF0ZXMgYWRtaXR0ZWQsIGFzIGhlIGRpZCBhZG1pdCwgdGhhdCBoZSBoYWQgdGFrZW4KICAgICAgICAgICAgICAgICAgICBicmliZXMsIGFuIGluY29ycnVwdGlibGUgYW1iYXNzYWRvciB3b3VsZCBoYXZlIHRha2VuIGluZmluaXRlIHBhaW5zIHRvIGF2b2lkIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc2F2b3cgYWxsIGFzc29jaWF0aW9uIHdpdGggaGltLiBBZXNjaGluZXMgaGFzIG5vdCBkb25lIHNvLiBJcyBub3QgdGhhdCBhIHBsYWluCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IERvZXMgaXQgbm90CiAgICAgICAgICAgICAgICAgICAgcHJvY2xhaW0gYWxvdWQgdGhhdCBoZSBoYXMgdGFrZW4gYnJpYmVzLCBhbmQgdGhhdCBmcm9tIGZpcnN0IHRvIGxhc3QgaGUgd2VudAogICAgICAgICAgICAgICAgICAgIHdyb25nIGZvciBtb25leSdzIHNha2Us4oCUbm90IHRocm91Z2ggc3R1cGlkaXR5LCBvciBpZ25vcmFuY2UsIG9yCiAgICAgICAgICAgICAgICAgICAgYmx1bmRlcmluZz8gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPuKAnFdoYXQgd2l0bmVzcyzigJ0gaGUgd2lsbCBhc2ssIOKAnHRlc3RpZmllcyB0aGF0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHRha2VuIGJyaWJlcz/igJ0gQSBicmlsbGlhbnQgYXJndW1lbnQhIEZhY3RzLCBBZXNjaGluZXMsIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY3JlZGlibGUgb2YgYWxsIHdpdG5lc3Nlcy4gWW91IGNhbm5vdCBmaW5kIGZhdWx0IHdpdGggZmFjdHMsIGFuZCBzYXkgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIHdoYXQgdGhleSBhcmUgaW4gZGVmZXJlbmNlIHRvIHNvbWVib2R5LCBvciB0byBvYmxpZ2Ugc29tZWJvZHkuIFRoZXkgYXJlIHdoYXQKICAgICAgICAgICAgICAgICAgICB5b3VyIHRyZWFjaGVyeSBhbmQgcGVydmVyc2lvbiBoYXZlIG1hZGUgdGhlbSwgYW5kIHN1Y2ggdGhleSBhcHBlYXIgb24KICAgICAgICAgICAgICAgICAgICBleGFtaW5hdGlvbi4gQnV0IEkgaGF2ZSBhbm90aGVyIHdpdG5lc3MgYmVzaWRlcyB0aGUgZmFjdHMuIFlvdSBzaGFsbCB0aGlzIHZlcnkKICAgICAgICAgICAgICAgICAgICBtb21lbnQgZ2l2ZSBldmlkZW5jZSBhZ2FpbnN0IHlvdXJzZWxmLiBDb21lIGhlcmU6IHN0YW5kIHVwIGFuZCBhbnN3ZXIKICAgICAgICAgICAgICAgICAgICBtZSHigJROb3RoaW5nIHRvIHNheT8gWW91IGNhbm5vdCBwbGVhZCBpbmV4cGVyaWVuY2UuIFlvdSwgd2hvIHRha2UgdXAgYQogICAgICAgICAgICAgICAgICAgIG5ldyBwcm9zZWN1dGlvbiBhcyBlYXNpbHkgYXMgeW91IHN0dWR5IGEgbmV3IHBsYXksIGFuZCBjb252aWN0IHlvdXIgbWFuIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgYW5kIHVuZGVyIGEgdGltZS1saW1pdCwgeW91IG11c3QgYmUgYW4gdW5jb21tb25seSBjbGV2ZXIgc3BlYWtlciE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgYWxsdWRlcyB0byBBZXNjaGluZXMnIGZvcm1lcgogICAgICAgICAgICAgICAgICAgICAgICBwcm9mZXNzaW9uIG9mIGFjdG9yIGFuZCBhbHNvIHRvIHNvbWUgcmVjZW50IHRyaWFsIGluIHdoaWNoIEFlc2NoaW5lcyBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgYmVlbiBlbmdhZ2VkIO+8iHBvc3NpYmx5IHRoZSBhY3Rpb24gYWdhaW5zdCBUaW1hcmNodXM6IHNlZSBJbnRyb2QuCiAgICAgICAgICAgICAgICAgICAgICAgIHBwLiAyMzQtNe+8iSwgd2hlbiwgb3dpbmcgdG8gY29uZ2VzdGlvbiBpbiB0aGUgbGF3IGNvdXJ0cywgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgdG8gZWFjaCBzcGVha2VyIHdhcyBjdXQgZG93biB0byBhIG1pbmltdW0uIEJ1dCB0aGUgbWF0dGVyIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2N1cmUuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFtb25nIHRoZSBtYW55CiAgICAgICAgICAgICAgICAgICAgZmxhZ3JhbnQgbWlzZGVlZHMgY29tbWl0dGVkIGJ5IEFlc2NoaW5lcywgdGhlIHNpbmd1bGFyIGJhc2VuZXNzIG9mIHdoaWNoIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB5b3UgYWxsIGFwcHJlY2lhdGUsIHRoZXJlIGlzIG5vbmUgbW9yZSBmbGFncmFudCwgaW4gbXkganVkZ2VtZW50LCB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBJIGFtIGFib3V0IHRvIHJlbGF0ZSwgbm9uZSB0aGF0IHdpbGwgbW9yZSBwYWxwYWJseSBwcm92ZSBoaW0gdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHRha2VuIGJyaWJlcyBhbmQgc29sZCBldmVyeXRoaW5nLiBXaGVuIGZvciB0aGUgdGhpcmQgdGltZSB5b3Ugc2VudCB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgdG8gUGhpbGlwLCBmb3IgdGhlIGZ1bGZpbG1lbnQgb2YgdGhvc2UgbWFnbmlmaWNlbnQgZXhwZWN0YXRpb25zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggQWVzY2hpbmVzIGhhZCBndWFyYW50ZWVkLCB5b3UgcmVhcHBvaW50ZWQgbW9zdCBvZiB0aGUgZm9ybWVyIGVudm95cywKICAgICAgICAgICAgICAgICAgICBpbmNsdWRpbmcgQWVzY2hpbmVzIGFuZCBtZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+SSBpbW1lZGlhdGVseQogICAgICAgICAgICAgICAgICAgIGRlY2xpbmVkIHRoZSBhcHBvaW50bWVudCBvbiBhZmZpZGF2aXQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgY2l0aXplbgogICAgICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgdG8gYW55IG9mZmljZSBjb3VsZCBkZWNsaW5lIGl0LCBpZiBoZSB0b29rIGFuIG9hdGggYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSB0aGF0IGZvciByZWFzb25zIG9mIGhlYWx0aCwgZXRjLiwgaGUgd2FzIHVuYWJsZSB0byBzZXJ2ZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgYW5kIHdoZW4gY2VydGFpbiBwZXJzb25zIHdlcmUgY2xhbW9yb3VzIGFuZCBpbnNpc3RlZCB0aGF0IEkgc2hvdWxkIGdvLCBJCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdGhhdCBJIHdvdWxkIG5vdCBsZWF2ZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGJ1dCB0aGUgbm9taW5hdGlvbiBvZiBBZXNjaGluZXMgd2FzIHN0aWxsIHZhbGlkLiBBZnRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBkaXNwZXJzYWwgb2YgdGhlIEFzc2VtYmx5LCB0aGUgZW52b3lzIG1ldCBhbmQgZGlzY3Vzc2VkIHdoaWNoIG9mIHRoZW0gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgbGVmdCBiZWhpbmQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvIHdhdGNoIGFuZCBjb3VudGVyYWN0CiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLjwvbm90ZT4gZm9yIHRoZSB3aG9sZSBidXNpbmVzcyB3YXMgc3RpbGwgaW4gdGhlIGNsb3VkcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1dHVyZSB1bmNlcnRhaW4sIGFuZCBhbGwgc29ydHMgb2YgY29uZmVyZW5jZXMgYW5kIGRpc2N1c3Npb25zIHdlcmUgZ29pbmcgb24gaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWFya2V0LXBsYWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIGFmcmFpZCB0aGF0IGFuCiAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBtZWV0aW5nIG9mIHRoZSBBc3NlbWJseSBtaWdodCBzdWRkZW5seSBiZSBjb252ZW5lZCwgYW5kIHRoYXQgdGhlbiwKICAgICAgICAgICAgICAgICAgICBvbiBoZWFyaW5nIHRoZSB0cnV0aCBmcm9tIG1lLCB5b3UgbWlnaHQgYWRvcHQgc29tZSBhY2NlcHRhYmxlIHJlc29sdXRpb24gaW4KICAgICAgICAgICAgICAgICAgICBmYXZvciBvZiB0aGUgUGhvY2lhbnMsIGFuZCB0aGF0IHNvIFBoaWxpcCBtaWdodCBsb3NlIGNvbnRyb2wuIE9uZSBmcmllbmRseQogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24sIG9uZSBnbGVhbSBvZiBob3BlLCBhbmQgdGhlIFBob2NpYW5zIG1pZ2h0IGhhdmUgYmVlbiBzYXZlZC4gSWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCBmYWxsZW4gaW50byB0aGUgdHJhcCwgaXQgd2FzIGltcG9zc2libGXigJR5ZXMsCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZeKAlGZvciBQaGlsaXAgdG8gcmVtYWluIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPi4gVGhlcmUgd2FzIG5vIGNvcm4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSwgYXMgdGhlIHdhciBoYWQgcHJldmVudGVkIHNvd2luZzsgYW5kIHRoZSBjb252ZXlhbmNlIG9mIGNvcm4gd2FzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSBzbyBsb25nIGFzIHlvdXIgZmxlZXQgd2FzIHRoZXJlIGFuZCBjb21tYW5kZWQgdGhlIHNlYS4gVGhlIFBob2NpYW4KICAgICAgICAgICAgICAgICAgICBjaXRpZXMgd2VyZSBudW1lcm91cywgYW5kIG5vdCBlYXN5IG9mIGNhcHR1cmUsIHVubGVzcyBieSBwcm90cmFjdGVkIHNpZWdlLiBFdmVuCiAgICAgICAgICAgICAgICAgICAgaWYgUGhpbGlwIGhhZCB0YWtlbiBhIGNpdHkgYSBkYXksIHRoZXJlIHdlcmUgdHdlbnR5LXR3byBvZiB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFsbCB0aGVzZSByZWFzb25zIHRoZXkgbGVmdCBBZXNjaGluZXMgYXQgaG9tZSwKICAgICAgICAgICAgICAgICAgICBmZWFyaW5nIHRoYXQgeW91IG1pZ2h0IGJlIHVuZGVjZWl2ZWQgYW5kIGNoYW5nZSB5b3VyIHBvbGljeS4gTm93IHRvIGRlY2xpbmUgYW4KICAgICAgICAgICAgICAgICAgICBhcHBvaW50bWVudCBvbiBhZmZpZGF2aXQgd2l0aCBubyByZWFzb24gYWxsZWdlZCB3YXMgYSBzdHJhbmdlIG1vdmUgYW5kIHZlcnkKICAgICAgICAgICAgICAgICAgICBzdXNwaWNpb3VzLiDigJxXaGF0IGRvIHlvdSBtZWFuPyBBcmUgeW91IGRlY2xpbmluZyB0aGUgZW1iYXNzeT8gQXJlIHlvdQogICAgICAgICAgICAgICAgICAgIG5vdCBnb2luZyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gdG8gcmVhbGl6ZSBhbGwKICAgICAgICAgICAgICAgICAgICB0aG9zZSBncmFuZCBiZW5lZml0cyB3aGljaCB5b3UgYW5ub3VuY2VkIHlvdXJzZWxmP+KAnSBIb3dldmVyLCBoZSBoYWQgdG8KICAgICAgICAgICAgICAgICAgICByZW1haW4uIFdoYXQgd2FzIHRvIGJlIGRvbmU/IEhlIHBsZWFkZWQgaWxsLWhlYWx0aDsgYW5kIGhpcyBicm90aGVyLCB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBFeGVjZXN0dXMgdGhlIHBoeXNpY2lhbiB3aXRoIGhpbSwgcmVwYWlyZWQgdG8gdGhlIGNvdW5jaWwtaG91c2UsIG1hZGUgYWZmaWRhdml0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGlsbG5lc3MsIGFuZCByZWNlaXZlZCB0aGUgYXBwb2ludG1lbnQgaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyd2FyZHMsIHdoZW4gd2l0aGluIGZpdmUgb3Igc2l4IGRheXMgdGhlIFBob2NpYW5zIHdlcmUKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQsIHdoZW4gQWVzY2hpbmVzJyB3YWdlcyBzdG9wcGVkIGFzIHN1Y2ggdGhpbmdzIGRvLCB3aGVuIERlcmN5bHVzIGhhZAogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDaGFsY2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2lzIj5DaGFsY2lzPC9wbGFjZU5hbWU+IGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBpbmZvcm1lZCB5b3UsIGF0IHRoZSBhc3NlbWJseSBoZWxkIGF0IFBlaXJhZXVzLCBvZiB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMsIHdoZW4gdGhhdCBuZXdzIGZpbGxlZCB5b3Ugd2l0aCBpbmRpZ25hdGlvbiBvbiB0aGVpciBhY2NvdW50IGFuZCBhbGFybQogICAgICAgICAgICAgICAgICAgIG9uIHlvdXIgb3duLCB3aGVuIHlvdSB3ZXJlIHJlc29sdmluZyB0byBicmluZyBpbiB5b3VyIHdvbWVuIGFuZCBjaGlsZHJlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdW50cnksIHRvIHJlaW5zdGF0ZSB0aGUgZnJvbnRpZXIgZm9ydHJlc3NlcywgdG8gZm9ydGlmeSB0aGUgUGVpcmFldXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGhvbGQgdGhlIGZlc3RpdmFsIG9mIEhlcmFjbGVzIHdpdGhpbiB0aGUgd2FsbHMs4oCUIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+dGhlbiBhdCBsYXN0LCBhdCB0aGF0IGNyaXNpcywgd2hlbiB0aGUgY2l0eSB3YXMKICAgICAgICAgICAgICAgICAgICBlbmNvbXBhc3NlZCB3aXRoIGNvbmZ1c2lvbiBhbmQgdGVycm9yLCBvZmYgbWFyY2hlZCB0aGlzIHdpc2UsIGNsZXZlciwKICAgICAgICAgICAgICAgICAgICBzbW9vdGgtdG9uZ3VlZCBnZW50bGVtYW4sIHdpdGhvdXQgd2FpdGluZyBmb3IgQ291bmNpbCBvciBBc3NlbWJseSB0byByZWFwcG9pbnQKICAgICAgICAgICAgICAgICAgICBoaW0sIG9uIGhpcyBlbWJhc3N5IHRvIHRoZSBjb3VydCBvZiB0aGUgY2hpZWYgbWFsZWZhY3Rvci4gSGUgZm9yZ290IHRoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgc3dvcm4gdGhhdCBoZSB3YXMgdG9vIGlsbCB0byB0cmF2ZWw7IGZvcmdvdCB0aGF0IGFub3RoZXIgYW1iYXNzYWRvciBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNob3NlbiBpbiBoaXMgc3RlYWQsIGFuZCB0aGF0IHRoZSBsYXcgdmlzaXRzIHN1Y2ggY29uZHVjdCB3aXRoIGRlYXRoOyBmb3Jnb3QKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aXRoIHRoZSBUaGViYW5zIG5vdCBvbmx5IGhvbGRpbmcgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4gYnV0IGluIHBvc3Nlc3Npb24gb2YgdGhlIHRlcnJpdG9yeSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4sIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+aXQKICAgICAgICAgICAgICAgICAgICB3YXMgYSB2ZXJ5IG9kZCB0aGluZyBmb3IgYSBtYW4sIHdobyBoYWQgc29sZW1ubHkgYW5ub3VuY2VkIHRoYXQgdGhlIFRoZWJhbnMgaGFkCiAgICAgICAgICAgICAgICAgICAgc2V0IGEgcHJpY2UgdXBvbiBoaXMgaGVhZCwgdG8gd2FsayBzdHJhaWdodCBpbnRvIHRoZSBtaWRkbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IGFuZCB0aGUgVGhlYmFuIGVuY2FtcG1lbnQuCiAgICAgICAgICAgICAgICAgICAgTmV2ZXJ0aGVsZXNzLCBoZSB3YXMgc28gZXhjaXRlZCwgaGlzIGFwcGV0aXRlIGZvciBtb25leW1ha2luZyBhbmQgYnJpYmUtdGFraW5nCiAgICAgICAgICAgICAgICAgICAgd2FzIHNvIGtlZW4sIHRoYXQgaGUgcHV0IGFzaWRlIGFuZCBpZ25vcmVkIGFsbCB0aGVzZSBvYnN0YWNsZXMsIGFuZCBvZmYgaGUgd2VudC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgd2FzIGEKICAgICAgICAgICAgICAgICAgICByZW1hcmthYmxlIHByb2NlZWRpbmcsIGJ1dCBmYXIgc3RyYW5nZXIgc3RpbGwgd2FzIGhpcyBiZWhhdmlvciBhZnRlciBoaXMgYXJyaXZhbAogICAgICAgICAgICAgICAgICAgIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPi4gV2hpbGUgeW91IHdobyBhcmUgaGVyZQogICAgICAgICAgICAgICAgICAgIGFuZCBhbGwgb3RoZXIgQXRoZW5pYW5zIHJlZ2FyZGVkIHRoZSB0cmVhdG1lbnQgb2YgdGhlIFBob2NpYW5zIGFzIHNjYW5kYWxvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZW91cywgaW5zb211Y2ggdGhhdCB5b3Ugd291bGQgbm90IHNlbmQgYW55IG1lbWJlciBvZiBjb3VuY2lsIG9yIGFueSBqdWRnZQogICAgICAgICAgICAgICAgICAgIHRvIHJlcHJlc2VudCB5b3UgYXQgdGhlIFB5dGhpYW4gZ2FtZXMsIGJ1dCByZWxpbnF1aXNoZWQgdGhhdCB0aW1lLWhvbm9yZWQKICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0aW9uLCBBZXNjaGluZXMgYXR0ZW5kZWQgdGhlIHNlcnZpY2Ugb2YgdGhhbmtzZ2l2aW5nIHdoaWNoIHRoZSBUaGViYW5zIGFuZAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBoZWxkIHRvIGNlbGVicmF0ZSB0aGVpciB2aWN0b3J5IGFuZCB0aGVpciBwb2xpdGljYWwgc3VjY2Vzcywgd2FzIGEgZ3Vlc3QKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgYmFucXVldCwgYW5kIHRvb2sgcGFydCBpbiB0aGUgbGliYXRpb25zIGFuZCBkb3hvbG9naWVzIHdpdGggd2hpY2ggUGhpbGlwCiAgICAgICAgICAgICAgICAgICAgdGhhbmtlZCBIZWF2ZW4gZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgZm9ydHJlc3NlcywgdGhlIHRlcnJpdG9yeSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGFybWllcyBvZiB5b3VyIGFsbGllcy4gSGUgZXZlbiBqb2luZWQgUGhpbGlwIGluIHdlYXJpbmcgZ2FybGFuZHMgYW5kIHNpbmdpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgSHltbiBvZiBQcmFpc2UsIGFuZCBkcmFuayB0byBoaXMgaGVhbHRoIGluIHRoZSBsb3ZpbmctY3VwLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIHRoZXNlIHByb2NlZWRpbmdzCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHBvc3NpYmxlIGZvciB0aGUgZGVmZW5kYW50IHRvIGdpdmUgYW4gYWNjb3VudCBkaWZmZXJpbmcgZnJvbSBtaW5lLiBBcwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgYWZmaWRhdml0IG9mIHJlZnVzYWwsIHRoZXJlIGlzIGFuIGVudHJ5IGluIHRoZSByZWNvcmQtb2ZmaWNlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIFRlbXBsZSBvZiBEZW1ldGVyLCBvZiB3aGljaCB0aGUgcHVibGljIGNhcmV0YWtlciBpcyBpbiBjaGFyZ2UsIGFuZCBhIGRlY3JlZSBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGlzIG1lbnRpb25lZCBieSBuYW1lLiBBcyBmb3IgaGlzIGNvbmR1Y3Qgb3ZlciB5b25kZXIsIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBjb2xsZWFndWVzIHdobyB3ZXJlIHByZXNlbnQsIGFuZCBmcm9tIHdob20gSSBnb3QgbXkgaW5mb3JtYXRpb24sIHdpbGwgZ2l2ZQogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlIGFnYWluc3QgaGltLiBJIHdhcyBub3Qgb25lIG9mIGhpcyBjb2xsZWFndWVzLCBhcyBJIGhhZCBkZWNsaW5lZCBvbgogICAgICAgICAgICAgICAgICAgIG9hdGguIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+UmVhZCB0aGUgZGVjcmVlIGFuZCB0aGUgcmVjb3JkcywgYW5kCiAgICAgICAgICAgICAgICAgICAgY2FsbCB0aGUgd2l0bmVzc2VzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlJlY29yZHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWNvcmRzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlY29yZHM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGF0IGRvIHlvdSBpbWFnaW5lIHdlcmUgdGhlIHByYXllcnMKICAgICAgICAgICAgICAgICAgICBvZmZlcmVkIGJ5IFBoaWxpcCB3aGVuIGhlIG1hZGUgbGliYXRpb24/IE9yIGJ5IHRoZSBUaGViYW5zPyBTdXJlbHkgdGhleSBpbXBsb3JlZAogICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoIGFuZCB2aWN0b3J5IGZvciB0aGVtc2VsdmVzIGFuZCB0aGVpciBhbGxpZXMsIHdlYWtuZXNzIGFuZCBkZWZlYXQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGFsbGllcyBvZiB0aGUgUGhvY2lhbnMuIEluIHRoYXQgcHJheWVyIEFlc2NoaW5lcyBqb2luZWQuIEhlIGludm9rZWQgYSBjdXJzZQogICAgICAgICAgICAgICAgICAgIG9uIGhpcyBvd24gZmF0aGVybGFuZC4gSXQgaXMgZm9yIHlvdSB0byBtYWtlIHRoYXQgY3Vyc2UgcmVjb2lsIHVwb24gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGhlYWQuIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaGUgdG9vayBoaXMgZGVwYXJ0dXJlLCBoZSB3YXMgYnJlYWtpbmcgYSBsYXcgd2hvc2UgcGVuYWx0eSBpcyBkZWF0aDsgYWZ0ZXIgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJyaXZhbCwgaGUgaXMgYWdhaW4gcHJvdmVkIGd1aWx0eSBvZiBjb25kdWN0IHRoYXQgZGVzZXJ2ZXMgZGVhdGg7IGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBlYXJsaWVyIG1pc2NvbmR1Y3Qgb2YgdGhpcyBidXNpbmVzcyBvZiB0aGUgZW1iYXNzeSBoYWQgYmVlbiBiYWQgZW5vdWdoIHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGRlYXRoLiBZb3UgaGF2ZSB0aGVyZWZvcmUgdG8gY29uc2lkZXIgd2hhdCBwdW5pc2htZW50IHNoYWxsIGJlIHJpZ29yb3VzCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIHRvIGFmZm9yZCBhIHJldHJpYnV0aW9uIGFkZXF1YXRlIHRvIGFsbCB0aGVzZSB0cmFuc2dyZXNzaW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFzc3VyZWRseSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hlbiBhbGwgb2YgeW91IGFuZCB0aGUgd2hvbGUKICAgICAgICAgICAgICAgICAgICBuYXRpb24gcGFzc2VkIGNlbnN1cmUgdXBvbiBhbGwgdGhlIHJlc3VsdHMgb2YgdGhlIHBlYWNlLCB3aGVuIHlvdSByZWZ1c2VkCiAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhdGlvbiBpbiB0aGUgZG9pbmdzIG9mIHRoZSBBbXBoaWN0eW9uaWMgQ291bmNpbCwgd2hlbiB5b3VyIGF0dGl0dWRlCiAgICAgICAgICAgICAgICAgICAgdG93YXJkcyBQaGlsaXAgaXMgc3RpbGwgb25lIG9mIGFuZ2VyIGFuZCBzdXNwaWNpb24sIG1hcmtpbmcgdGhlIHdob2xlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3QgYXMgc2FjcmlsZWdpb3VzIGFuZCBzaGFtZWZ1bCwgYXMgd2VsbCBhcyB1bmp1c3QgYW5kIGluanVyaW91cyB0bwogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMs4oCUaXQgd291bGQgYmUgZGlzY3JlZGl0YWJsZSB0aGF0IHlvdSwgd2hvIGhhdmUgZW50ZXJlZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgY291cnQgdG8gYWRqdWRpY2F0ZSBhdCB0aGUgc2NydXRpbnkgb2YgdGhvc2UgdHJhbnNhY3Rpb25zLCBhbmQgaGF2ZSB0YWtlbiB0aGUKICAgICAgICAgICAgICAgICAgICBqdWRpY2lhbCBvYXRoIG9uIGJlaGFsZiBvZiB0aGUgY29tbW9ud2VhbHRoLCB0aGF0IHlvdSwgSSBzYXksIHdoZW4gdGhlIGF1dGhvciBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdyb25ncyBoYXMgYmVlbiBwbGFjZWQgaW4geW91ciBwb3dlciwgY2F1Z2h0IHJlZC1oYW5kZWQgYWZ0ZXIgcGVycGV0cmF0aW5nCiAgICAgICAgICAgICAgICAgICAgc3VjaCBjcmltZXMsIHNob3VsZCByZXR1cm4gYSB2ZXJkaWN0IG9mIGFjcXVpdHRhbC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+SXMgdGhlcmUgYSBtYW4gYW1vbmcgeW91ciBmZWxsb3ctY2l0aXplbnMsIG5heSwgaW4gYWxsIEdyZWVjZSwgd2hvCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QganVzdGx5IHVwYnJhaWQgeW91IGlmIGhlIHNlZXMgeW91IHZlbnRpbmcgeW91ciB3cmF0aCB1cG9uIFBoaWxpcCwgd2hvc2UKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlIGFkbWl0cyBvZiBtdWNoIGV4Y3VzZeKAlGZvciBoZSB3YXMgbWFraW5nIHBlYWNlIGFmdGVyIHdhciwgYW5kCiAgICAgICAgICAgICAgICAgICAgYnV5aW5nIGhpcyB3YXlzIGFuZCBtZWFucyBmcm9tIHdpbGxpbmcgc2VsbGVyc+KAlGFuZCBhY3F1aXR0aW5nIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4sIHdobyBtYWRlIGluZmFtb3VzIHRyYWZmaWMgb2YgeW91ciBpbnRlcmVzdHMsIGluIGRlZmlhbmNlIG9mIGxhd3MgdGhhdCB2aXNpdAogICAgICAgICAgICAgICAgICAgIHN1Y2ggb2ZmZW5jZXMgd2l0aCB0aGUgc2V2ZXJlc3QgcmV0cmlidXRpb24/IDwvdHJhbnNsYXRpb24+"
translation['19.Proof.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBlcmhhcHMgc29tZSBzdWNoIGFyZ3VtZW50IGFzIHRoaXMgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGFkZHJlc3NlZCB0byB5b3Us4oCUdGhhdCwgaWYgeW91IGNvbmRlbW4gdGhlIGRpcGxvbWF0aXN0cyB3aG8gbmVnb3RpYXRlZAogICAgICAgICAgICAgICAgICAgIHRoZSBwZWFjZSwgaXQgd2lsbCBiZSB0aGUgYmVnaW5uaW5nIG9mIGVubWl0eSB3aXRoIFBoaWxpcC4gSWYgdGhhdCBpcyB0cnVlLCBJIGRvCiAgICAgICAgICAgICAgICAgICAgbm90IHRoaW5rIEkgY291bGQgYnJpbmcgYW55IG1vcmUgZGFtYWdpbmcgY2hhcmdlIGFnYWluc3QgdGhlIGRlZmVuZGFudC4gSWYgdGhlCiAgICAgICAgICAgICAgICAgICAgcG90ZW50YXRlIHdobyBzcGVudCBoaXMgbW9uZXkgdG8gZ2V0IHRoZSBwZWFjZSBoYXMgaW5kZWVkIGJlY29tZSBzbyBwb3dlcmZ1bCBhbmQKICAgICAgICAgICAgICAgICAgICBmb3JtaWRhYmxlIHRoYXQgeW91IGFyZSB0byBpZ25vcmUganVzdGljZSBhbmQgdGhlIG9hdGggeW91IGhhdmUgc3dvcm4sIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIG9ubHkgaG93IHRvIG9ibGlnZSBQaGlsaXAsIHdoYXQgcGVuYWx0eSBjYW4gYmUgdG9vIHNldmVyZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgYXV0aG9ycyBvZiBoaXMgYWdncmFuZGl6ZW1lbnQ/IDwvdHJhbnNsYXRpb24+"
translation['19.Proof.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgSQogICAgICAgICAgICAgICAgICAgIHRoaW5rIEkgY2FuIHNhdGlzZnkgeW91IHRoYXQgdGhlaXIgcHVuaXNobWVudCB3aWxsIG1vcmUgcHJvYmFibHkgc293IHRoZSBzZWVkIG9mCiAgICAgICAgICAgICAgICAgICAgYSBwcm9maXRhYmxlIGZyaWVuZHNoaXAuIExldCBtZSB0ZWxsIHlvdSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBQaGlsaXAgZG9lcyBub3QgdW5kZXJ2YWx1ZSB5b3VyIGNpdHk7IGl0IHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHRob3VnaHQgeW91IGxlc3Mgc2VydmljZWFibGUgdGhhdCBoZSBwcmVmZXJyZWQgdGhlIFRoZWJhbnMgdG8geW91LgogICAgICAgICAgICAgICAgICAgIEJ1dCBoZSB3YXMgc2Nob29sZWQgYnkgdGhlc2UgbWVuIGFuZCB3YXMgaW5mb3JtZWQgYnkgdGhlbeKAlEkgb25jZSB0b2xkCiAgICAgICAgICAgICAgICAgICAgeW91IHRoaXMgaW4gQXNzZW1ibHksIGFuZCBub25lIG9mIHRoZW0gY29udHJhZGljdGVkIG1l4oCUIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCBhIGRlbW9jcmFjeSBpcyB0aGUgbW9zdCB1bnN0YWJsZSBhbmQgY2FwcmljaW91cwogICAgICAgICAgICAgICAgICAgIHRoaW5nIGluIHRoZSB3b3JsZCwgbGlrZSBhIHJlc3RsZXNzIHdhdmUgb2YgdGhlIHNlYSBydWZmbGVkIGJ5IHRoZSBicmVlemUgYXMKICAgICAgICAgICAgICAgICAgICBjaGFuY2Ugd2lsbCBoYXZlIGl0LiBPbmUgbWFuIGNvbWVzLCBhbm90aGVyIGdvZXM7IG5vIG9uZSBhdHRlbmRzIHRvLCBvciBldmVuCiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXJzLCB0aGUgY29tbW9uIHdlYWwuIFBoaWxpcCwgdGhleSBzYWlkLCBvdWdodCB0byBoYXZlIGZyaWVuZHMgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aG8gd291bGQgbWFuYWdlIGhpcwogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIGZvciBoaW0gYXMgaXQgYXJvc2UsIGFuZCBjYXJyeSBpdCB0aHJvdWdo4oCUdGhlIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIHNwZWFraW5nLCBmb3IgZXhhbXBsZTsgaWYgdGhhdCBwcm92aXNpb24gd2VyZSBtYWRlLCBoZSB3b3VsZCBlYXNpbHkgYWNjb21wbGlzaAogICAgICAgICAgICAgICAgICAgIGhlcmUgd2hhdGV2ZXIgaGUgZGVzaXJlZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGlmIGhlIGhhZCBoZWFyZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHBlcnNvbnMgd2hvIHRhbGtlZCBsaWtlIHRoYXQgdG8gaGltIGhhZCBiZWVuIGN1ZGdlbGxlZCB0byBkZWF0aAogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZWx5IGFmdGVyIHRoZWlyIHJldHVybiBob21lLCBJIGZhbmN5IGhlIHdvdWxkIGhhdmUgZG9uZSB3aGF0IHRoZSBLaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiBkaWQuIFlvdSByZW1lbWJlciB3aGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICB3YXM6IHRoZSBLaW5nIGhhZCBiZWVuIGludmVpZ2xlZCBieSBUaW1hZ29yYXMsIGFuZCBoYWQgbWFkZSBoaW0gYSBwcmVzZW50LCBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBzdG9yeSBnb2VzLCBvZiBmb3J0eSB0YWxlbnRzOyBidXQgd2hlbiBoZSBoZWFyZCB0aGF0IHRoZSBtYW4gaGFkIGJlZW4gcHV0IHRvCiAgICAgICAgICAgICAgICAgICAgZGVhdGggYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgaGFkIG5vdCBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29tcGV0ZW50IHRvIHdhcnJhbnQgaGlzIG93biBsaWZlLCBtdWNoIGxlc3MgdG8gZnVsZmlsIGhpcyB1bmRlcnRha2luZywgaGUKICAgICAgICAgICAgICAgICAgICByZWFsaXplZCB0aGF0IGhlIGhhZCBub3QgcGFpZCB0aGUgcHJpY2UgdG8gdGhlIG1hbiB3aG8gY291bGQgZGVsaXZlciB0aGUgZ29vZHMuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZpcnN0IHJlc3VsdCB3YXMgdGhhdCBoZSBhZ2FpbiBwbGFjZWQgaW4gc3ViamVjdGlvbiB0byB5b3UgdGhlIGNpdHkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCB3aGljaCBoZSBoYWQgcHV0CiAgICAgICAgICAgICAgICAgICAgb24gaGlzIG93biBsaXN0IG9mIGZyaWVuZHMgYW5kIGFsbGllczsgYW5kIHRoZSBzZWNvbmQsIHRoYXQgaGUgbmV2ZXJtb3JlIGdhdmUKICAgICAgICAgICAgICAgICAgICBtb25leSB0byBhbnlib2R5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlwIHdvdWxkIGhhdmUgZG9uZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGlmIGhlIGhhZCBzZWVuIGFueSBvZiB0aGVzZSBtZW4gYnJvdWdodCB0byBqdXN0aWNlOyBhbmQgaGUgd2lsbCBkbyB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lLCBpZiBoZSBzZWVzIHRoYXQgc2lnaHQgbm93LiBCdXQgd2hlbiBoZSBzZWVzIHRoZXNlIG1lbiBob2xkaW5nIHVwIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaGVhZHMgaGVyZSwgbWFraW5nIHNwZWVjaGVzLCBicmluZ2luZyBvdGhlciBwZW9wbGUgdG8gdHJpYWzigJR3aGF0IGlzIGhlCiAgICAgICAgICAgICAgICAgICAgdG8gZG8/IElzIGhlIHRvIG1ha2UgYSBwb2ludCBvZiBzcGVuZGluZyBhIGdyZWF0IGRlYWwgb2YgbW9uZXksIHdoZW4gYSBsaXR0bGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGRvPyBJcyBoZSB0byB0cnkgdG8gaHVtb3IgYWxsIG9mIHVzLCBpbnN0ZWFkIG9mIHR3byBvciB0aHJlZT8gTm87IHRoYXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBmb2xseS4gRm9yIGV2ZW4gaGlzIHBvbGljeSBvZiBwdWJsaWMgYmVuZXZvbGVuY2UgdG8gdGhlIFRoZWJhbnMgd2FzIGJ5CiAgICAgICAgICAgICAgICAgICAgbm8gbWVhbnMgb2YgaGlzIG93biBjaG9vc2luZzsgPC90cmFuc2xhdGlvbj4="
translation['19.Proof.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+aGUgd2FzCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIGJ5IHRoZWlyIGFtYmFzc2Fkb3JzLCBhbmQgSSB3aWxsIHRlbGwgeW91IGhvdy4gQW1iYXNzYWRvcnMgY2FtZSB0byBoaW0KICAgICAgICAgICAgICAgICAgICBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZXJlIGZyb20geW91LiBIZSBvZmZlcmVkIHRoZW0gbW9uZXnigJRhIHZlcnkgbGFyZ2Ugc3VtLCBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBhY2NvdW50LiBUaGUgVGhlYmFuIGFtYmFzc2Fkb3JzIGRlY2xpbmVkIHRoZSBvdmVydHVyZSwgYW5kIHdvdWxkIG5vdCB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIGJyaWJlLiBBZnRlcndhcmRzLCBhdCBhIHNhY3JpZmljaWFsIGJhbnF1ZXQsIHdoZW4gUGhpbGlwIHdhcyBkcmlua2luZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYW5kIHNob3dpbmcgdGhlbSBtdWNoIGNpdmlsaXR5LCBoZSBrZXB0IG9mZmVyaW5nIHRoZW0gcHJlc2VudHMsIGJlZ2lubmluZwogICAgICAgICAgICAgICAgICAgIHdpdGggY2FwdGl2ZXMgYW5kIHRoZSBsaWtlLCBhbmQgZW5kaW5nIHdpdGggZ29sZCBhbmQgc2lsdmVyIGdvYmxldHMuIEFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGdpZnRzIHRoZXkgcmVqZWN0ZWQsIGFuZCB3b3VsZCBvbiBubyBhY2NvdW50IGdpdmUgdGhlbXNlbHZlcyBhd2F5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCBQaGlsbywgb25lIG9mIHRoZSBhbWJhc3NhZG9ycywgbWFkZSBhIHNwZWVjaAogICAgICAgICAgICAgICAgICAgIHRoYXQgZGVzZXJ2ZWQgdG8gaGF2ZSBiZWVuIHNwb2tlbiBieSB5b3VyIHJlcHJlc2VudGF0aXZlcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaW5zdGVhZCBvZiBieSB0aGUgc3Bva2VzbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPi4gSGUgc2FpZCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGRlbGlnaHRlZCBhbmQgZ3JhdGlmaWVkIHRvIGZpbmQgUGhpbGlwIHNvIGNvdXJ0ZW91c2x5IGFuZCBnZW5lcm91c2x5IGluY2xpbmVkCiAgICAgICAgICAgICAgICAgICAgdG93YXJkcyB0aGVtOyB0aGF0IHRoZXkgd2VyZSBhbHJlYWR5IGhpcyBmcmllbmRzIGFuZCBndWVzdHMsIHdpdGhvdXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBnaWZ0czsgd291bGQgaGUgYmUgZ29vZCBlbm91Z2ggdG8gZGlyZWN0IGhpcyBiZW5ldm9sZW5jZSB0byB0aGUgcHVibGljIGJ1c2luZXNzCiAgICAgICAgICAgICAgICAgICAgb24gd2hpY2ggaGUgd2FzIGVuZ2FnZWQsIGFuZCBkbyBzb21ldGhpbmcgY3JlZGl0YWJsZSBib3RoIHRvIGhpbXNlbGYgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnM/IElmIHNvLCB0aGV5IGNvdWxkIHByb21pc2UgaGltIHRoZSBmcmllbmRzaGlwIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYXMgd2VsbCBhcyB0aGVpciBvd24uIDwvdHJhbnNsYXRpb24+"
translation['19.Proof.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGNvbnNpZGVyIHdoYXQgdGhlIFRoZWJhbnMgaGF2ZSBnYWluZWQgaW4gdGhlIGVuZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgcG9saWN5LCBhbmQsIGluIHRoZSBsaWdodCBvZiBhY3R1YWwgdHJ1dGgsIHNlZSB3aGF0IGEgZmluZSB0aGluZyBpdCBpcwogICAgICAgICAgICAgICAgICAgIHRvIHJlZnVzZSB0byBzZWxsIHlvdXIgY291bnRyeSEgVGhlIFRoZWJhbnMgaGF2ZSBnYWluZWQsIGluIHRoZSBmaXJzdCBwbGFjZSwKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgd2hlbiB0aGV5IHdlcmUgaW4gdHJvdWJsZSwgaGFyZCBwcmVzc2VkIGJ5IHRoZSB3YXIsIGFuZCBpbiBkYW5nZXIgb2YKICAgICAgICAgICAgICAgICAgICBkZWZlYXQ7IGFuZCBzZWNvbmRseSwgdGhlIGNvbXBsZXRlIG92ZXJ0aHJvdyBvZiB0aGVpciBlbmVtaWVzLCB0aGUgUGhvY2lhbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSB1dHRlciBkZXN0cnVjdGlvbiBvZiB0aGVpciBzdHJvbmdob2xkcyBhbmQgY2l0aWVzLiBJcyB0aGF0IGFsbD8gTm8sIGluZGVlZDsKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgYWxzbyBnYWluZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwMzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTAzNCI+T3JjaG9tZW51czwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTIzNSI+Q29yb25lYTwvcGxhY2VOYW1lPiwgQ29yc2lhLCBUaWxwaG9zYWV1bSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXMgbXVjaCBvZiB0aGUgUGhvY2lhbiB0ZXJyaXRvcnkgYXMgdGhleSB3YW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBpcyB0aGUgb3V0Y29tZSBvZiB0aGUgcGVhY2UgZm9yIHRoZSBUaGViYW4gcGVvcGxlOyBhbmQgbW9yZSB0aGV5IGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGRlc2lyZS4gQW5kIHdoYXQgaGF2ZSB0aGUgYW1iYXNzYWRvcnMgZ2FpbmVkPyBOb3RoaW5nIGF0CiAgICAgICAgICAgICAgICAgICAgYWxs4oCUZXhjZXB0IHRoZSBzYXRpc2ZhY3Rpb24gb2YgaGF2aW5nIGFjaGlldmVkIHRoZXNlIHJlc3VsdHMgZm9yIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gQWgsIGJ1dCB0aGF0IGlzIHdvcnRoIGhhdmluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgYSBnbG9yaW91cyByZXdhcmQsIGlmIHlvdSBzZXQgYW55IHN0b3JlIGJ5IHRoYXQgaG9ub3IKICAgICAgICAgICAgICAgICAgICBhbmQgZ29vZCByZXB1dGUgd2hpY2ggQWVzY2hpbmVzIGFuZCBoaXMgZnJpZW5kcyBiYXJ0ZXJlZCBmb3IgYSBicmliZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCB1cyBub3cgc2V0IHNpZGUgYnkgc2lkZSB0aGUgcmVzdWx0cyBvZiB0aGUgcGVhY2UgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9ud2VhbHRoIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgYW1iYXNzYWRvcnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdGl2ZWx5LCBhbmQgeW91IHNoYWxsIHNlZSB3aGV0aGVyIHRoZXJlIGlzIGFueSBlcXVpdmFsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIGNvbW1vbndlYWx0aCB0aGUgcmVzdWx0IGhhcyBiZWVuIHRoZSBsb3NzIG9mCiAgICAgICAgICAgICAgICAgICAgYWxsIHRob3NlIHBvc3Nlc3Npb25zIGFuZCBhbGwgdGhvc2UgYWxsaWVzLCBhbmQgYSBzd29ybiBwcm9taXNlIHRvIFBoaWxpcCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaWYgYW55IG1hbiBzaGFsbCBhdCBhbnkgdGltZSBhdHRlbXB0IHRvIHJlY292ZXIgdGhlbSwgeW91IHdpbGwgdGh3YXJ0IGhpbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdHJlYXQgdGhlIG1hbiB3aG8gd291bGQgcmVzdG9yZSB0byB5b3UgeW91ciBvd24gYXMgYW4gZW5lbXkgYW5kIGFuIGFkdmVyc2FyeSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG1hbiB3aG8gcm9iYmVkIHlvdSBhcyBhbiBhbGx5IGFuZCBhIGZyaWVuZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBhcmUgdGhlIHRlcm1zIHRoYXQgQWVzY2hpbmVzIHN1cHBvcnRlZCBhbmQgaGlzIGFjY29tcGxpY2UKICAgICAgICAgICAgICAgICAgICBQaGlsb2NyYXRlcyBwcm9wb3NlZC4gT24gdGhlIGZpcnN0IGRheSBJIGhhZCB0aGUgdXBwZXIgaGFuZCBhbmQgcGVyc3VhZGVkIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIGNvbmZpcm0gdGhlIGRlY2lzaW9uIG9mIHlvdXIgYWxsaWVzIGFuZCB0byBzdW1tb24gUGhpbGlwJ3MgYW1iYXNzYWRvcnMsIGJ1dAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBmb3JjZWQgYW4gYWRqb3Vybm1lbnQgdG8gdGhlIGZvbGxvd2luZyBkYXksIGFuZCB0aGVuIHBlcnN1YWRlZCB5b3UgdG8KICAgICAgICAgICAgICAgICAgICBhZG9wdCBQaGlsb2NyYXRlcycgcmVzb2x1dGlvbiwgd2hpY2ggaW5jbHVkZWQgYWxsIHRoZXNlIHByb3Bvc2FscyBhbmQgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgbW9yZSBvYmplY3Rpb25hYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcyB3aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBlYWNlIGhhcyBicm91Z2h0IHRvIHRoZSBjaXR5OiB5b3UgY291bGQgbm90IGVhc2lseSBpbnZlbnQgYW55dGhpbmcgbW9yZQogICAgICAgICAgICAgICAgICAgIGRpc2hvbm9yYWJsZS4gV2hhdCBoYXMgaXQgYnJvdWdodCB0byB0aGUgYW1iYXNzYWRvcnMgd2hvIGNvbnRyaXZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgZGlzaG9ub3I/IEkgc2F5IG5vdGhpbmcgb2YgdGhlIHdlYWx0aCB0aGF0IGxpZXMgYmVmb3JlIHlvdXIKICAgICAgICAgICAgICAgICAgICBleWVz4oCUaG91c2VzLCB0aW1iZXIsIGdyYWluOyBidXQgaW4gdGhlIGNvdW50cnkgb2Ygb3VyIHJ1aW5lZCBhbGxpZXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgZXN0YXRlcyBhbmQgZXh0ZW5zaXZlIGZhcm1zIGJyaW5naW5nIGluIGEgcmVudGFsIG9mIGEgdGFsZW50IHRvCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXMgYW5kIGhhbGYgYSB0YWxlbnQgdG8gQWVzY2hpbmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+U3VyZWx5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHN0cmFuZ2UgYW5kIGludG9sZXJhYmxlIHRoYXQgdGhlIGRpc2FzdGVycyBvZiB5b3VyIGFsbGllcyBoYXZlIGJlY29tZSB0aGUKICAgICAgICAgICAgICAgICAgICBlbW9sdW1lbnQgb2YgeW91ciBlbnZveXMsIGFuZCB0aGF0IG9uZSBhbmQgdGhlIHNhbWUgcGVhY2Ugc2hvdWxkIGhhdmUgYnJvdWdodCwKICAgICAgICAgICAgICAgICAgICB0byB0aGUgY2l0eSBzZW5kaW5nIGFtYmFzc2Fkb3JzLCB0aGUgZGVzdHJ1Y3Rpb24gb2YgYWxsaWVzLCBkaXNwb3NzZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIGlnbm9taW55IGluIGV4Y2hhbmdlIGZvciBob25vciwgYW5kIHRvIHRoZSBhbWJhc3NhZG9ycyB0aGVtc2VsdmVzIHdobwogICAgICAgICAgICAgICAgICAgIGludHJpZ3VlZCBhZ2FpbnN0IHRoZSBjaXR5LCByZXZlbnVlcywgcHJvcGVydHksIGVzdGF0ZXMsIGFuZCBvcHVsZW5jZSBpbgogICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlIGZvciBwZW51cnkuIFRvIHByb3ZlIHRoZSB0cnV0aCBvZiBteSBzdGF0ZW1lbnQsIGNhbGwgdGhlIHdpdG5lc3NlcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgc2hhbGwgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgc3VycHJpc2VkIGlmIGhlIGZpbmRzIGNvdXJhZ2UgdG8gdGVsbCB5b3UgdGhhdCB3ZSBjb3VsZCBub3QgbWFrZSBhbiBob25vcmFibGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgc3VjaCBhcyBJIHJlcXVpcmVkLCBiZWNhdXNlIHRoZSBnZW5lcmFscyBtaXNtYW5hZ2VkIHRoZSB3YXIuIElmIHNvLCBJIGJlZwogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IHdpbGwgbm90IGZvcmdldCB0byBhc2sgaGltIHdoZXRoZXIgaGUgcmVwcmVzZW50ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG9yIHNvbWUgb3RoZXIgY2l0eS4gSWYgYW5vdGhlciBjaXR5LAogICAgICAgICAgICAgICAgICAgIG9mIHdoaWNoIGhlIGNhbiBzYXkgdGhhdCBpdCBoYWQgY29tcGV0ZW50IGdlbmVyYWxzIGFuZCBoYXMgd29uIHRoZSB3YXIsIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGJyaWJlcyB3aXRoIHNvbWUgcmVhc29uOyBidXQgaWYgaGUgcmVwcmVzZW50ZWQgdGhpcyBjaXR5LCBob3cgY29tZXMgaXQKICAgICAgICAgICAgICAgICAgICB0aGF0IGJ5IHRlcm1zIG9mIHRyZWF0eSB0aGUgY2l0eSB0aGF0IHNlbnQgaGltIGhhcyBsb3N0IHByb3BlcnR5IGFuZCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZWQgaGlzIHByb3BlcnR5IGJ5IGhpcyByZXdhcmRzPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbgogICAgICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9yIG9uIHRoZSB3aW5uaW5nIHNpZGUgY2FuIG9ubHkgYmUgYnJpYmVkIHRvIGdhaW4gY29uY2Vzc2lvbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsb3NlcnPigJRhIG5hdHVyYWwgYW5kIGNvbXBhcmF0aXZlbHkgaGFybWxlc3MgcHJvY2VlZGluZzogYW4KICAgICAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvciBvbiB0aGUgbG9zaW5nIHNpZGUgaXMgYnJpYmVkIGJ5IHRoZSB3aW5uZXJzIHRvIG1ha2UgdGhlaXIgZ2FpbiwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhpcyBjb3VudHJ5J3MgbG9zcywgbW9yZSBjb21wbGV0ZS48L25vdGU+IEluIGNvbW1vbiBqdXN0aWNlLCB0aGUgY2l0eQogICAgICAgICAgICAgICAgICAgIGFuZCBpdHMgcmVwcmVzZW50YXRpdmVzIHNob3VsZCBoYXZlIGZhcmVkIGFsaWtlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Proof.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgYW5vdGhlciBwb2ludCBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb24sIGdlbnRsZW1lbiBvZiB0aGUganVyeS4gV2hvIGdhaW5lZCB0aGUgZ3JlYXRlciBhZHZhbnRhZ2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9ucywgdGhlIFBob2NpYW5zIG92ZXIgdGhlIFRoZWJhbnMsIG9yIFBoaWxpcCBvdmVyIHlvdT8gSSByZXBseSwgdGhlCiAgICAgICAgICAgICAgICAgICAgUGhvY2lhbnMgb3ZlciB0aGUgVGhlYmFucy4gVGhleSBoZWxkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDM0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwMzQiPk9yY2hvbWVudXM8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTIzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjM1Ij5Db3JvbmVhPC9wbGFjZU5hbWU+LCBhbmQgVGlscGhvc2FldW07IHRoZXkgaGFkIGtlcHQgd2l0aGluIHRoZSB3YWxscyB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW4gZ2Fycmlzb24gYXQgTmVvbjsgdGhleSBoYWQgc2xhaW4gdHdvIGh1bmRyZWQgYW5kIHNldmVudHkgVGhlYmFucyBhdAogICAgICAgICAgICAgICAgICAgIEhlZHlsZXVtLCBhbmQgYSB0cm9waHkgaGFkIGJlZW4gc2V0IHVwOyB0aGV5IHdlcmUgc3VwZXJpb3IgaW4gY2F2YWxyeSwgYW5kIHNvIGFuCiAgICAgICAgICAgICAgICAgICAgSWxpYWQgb2Ygd29lcyBlbmNvbXBhc3NlZCB0aGUgVGhlYmFucy4gPC90cmFuc2xhdGlvbj4="
translation['19.Proof.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+Tm8KICAgICAgICAgICAgICAgICAgICBzdWNoIGRpc2FzdGVyIGV2ZXIgYmVmZWxsLCBub3IsIEkgaG9wZSwgZXZlciB3aWxsIGJlZmFsbCwgeW91LiBUaGUgd29yc3QKICAgICAgICAgICAgICAgICAgICBtaXNmb3J0dW5lIG9mIHlvdXIgd2FyIHdpdGggUGhpbGlwIHdhcyB0aGF0IHlvdSBjb3VsZCBub3QgZG8gaGltIGFzIG11Y2ggaGFybSBhcwogICAgICAgICAgICAgICAgICAgIHlvdSB3aXNoZWQ7IGFnYWluc3QgZGVmZWF0IHlvdSB3ZXJlIGFic29sdXRlbHkgc2VjdXJlLiBUaGVuIHdoeSBkaWQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwZWFjZSBtZWFuLCBmb3IgdGhlIFRoZWJhbnMsIHdobyB3ZXJlIHNvIGJhZGx5IHdvcnN0ZWQgaW4gdGhlIHdhciwgdGhlIHJlY292ZXJ5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgb3duIHBvc3Nlc3Npb25zIGFuZCB0aGUgYWNxdWlzaXRpb24gb2YgcG9zc2Vzc2lvbnMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcmllcywgYW5kLCBmb3IgdGhlIEF0aGVuaWFucywgdGhlIGxvc3MgaW4gdGltZSBvZiBwZWFjZSBvZiBhZHZhbnRhZ2VzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2VyZSBtYWludGFpbmVkIGluIHRoZSB3YXI/IFRoZSByZWFzb24gaXMgdGhhdCB0aGVpciBhbWJhc3NhZG9ycyBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgc2VsbCB0aGVtLCBidXQgdGhlc2UgbWVuIGhhdmUgc29sZCB5b3UuIFRoYXQgbXkgYWNjb3VudCBpcyB0cnVlLCB5b3Ugd2lsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgZnVydGhlciBwcm9vZiBhcyB3ZSBwcm9jZWVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJOYXJyIiB1bml0PSJwYXJ0IiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gdGhlIHBlYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXMsIHdoaWNoIEFlc2NoaW5lcyBzdXBwb3J0ZWQgaW4gYSBzcGVlY2gsIGhhZCBiZWVuIGNvbmNsdWRlZCwgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBhY2NlcHRlZCB0aGUgb2F0aHMsIGFuZCBkZXBhcnRlZC4gU28gZmFyIG5vIGZhdGFsIG1pc2NoaWVmIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgZG9uZS4gVGhlIHBlYWNlIHdhcywgaW5kZWVkLCBkaXNjcmVkaXRhYmxlIGFuZCB1bndvcnRoeSBvZiBBdGhlbnPigJRidXQKICAgICAgICAgICAgICAgICAgICB0aGVuIHdlIHdlcmUgZ29pbmcgdG8gZ2V0IHRob3NlIHdvbmRlcmZ1bCBhZHZhbnRhZ2VzIGluIGV4Y2hhbmdlLiBJIGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICBjYWxsZWQgdXBvbiB5b3UsIGFuZCB0b2xkIHRoZSBlbnZveXMsIHRvIHNhaWwgZm9yIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+IGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBhbmQgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiwgb3IgYWxsb3cgUGhpbGlwIHRvIHNlaXplIGFuZCBob2xkLCBhbnkgb2YgdGhlIHBvc2l0aW9ucyB0aGVyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFudGltZTsgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIHdlbGwgSSBrbmV3IHRoYXQgaW5kb2xlbnQKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgbG9zZSBmb3IgZXZlciBhbnl0aGluZyB0aGF0IHRoZXkgbGV0IHNsaXAgaW4gdGhlIHRyYW5zaXRpb24gZnJvbSB3YXIgdG8KICAgICAgICAgICAgICAgICAgICBwZWFjZS4gTm8gb25lLCB3aG8gaGFzIGJlZW4gaW5kdWNlZCBieSBnZW5lcmFsIGNvbnNpZGVyYXRpb25zIHRvIHNoZWF0aGUgdGhlCiAgICAgICAgICAgICAgICAgICAgc3dvcmQsIGlzIGV2ZXIgaW5jbGluZWQgdG8gYmVnaW4gd2FyIG92ZXIgYWdhaW4gZm9yIHRoZSByZWNvdmVyeSBvZiBoaXMgbG9zc2VzOwogICAgICAgICAgICAgICAgICAgIGFuZCBzbyB0aGUgYXBwcm9wcmlhdG9yIHJldGFpbnMgcG9zc2Vzc2lvbi4gQXBhcnQgZnJvbSB0aGVzZSBjb25zaWRlcmF0aW9ucywgSQogICAgICAgICAgICAgICAgICAgIGNvbmNlaXZlZCB0aGF0LCBpZiB3ZSBzYWlsZWQgYXQgb25jZSwgdGhlIGNpdHkgd291bGQgZ2FpbiBvbmUgb2YgdHdvIGFkdmFudGFnZXMuCiAgICAgICAgICAgICAgICAgICAgRm9yIHdoZW4gd2Ugd2VyZSBvbiB0aGUgc3BvdCBhbmQgaGFkIGFjY2VwdGVkIGhpcyBvYXRoIGFjY29yZGluZyB0byB0aGUgZGVjcmVlLAogICAgICAgICAgICAgICAgICAgIGVpdGhlciBoZSB3b3VsZCByZXN0b3JlIHRoZSBwbGFjZXMgaGUgaGFkIHRha2VuIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBrZWVwIGhpcyBoYW5kcyBvZmYgdGhlIHJlc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+b3IsIGlmIGhlIHJlZnVzZWQsIHdlIGNvdWxkIHByb21wdGx5CiAgICAgICAgICAgICAgICAgICAgcmVwb3J0IGhpcyByZWZ1c2FsLiBJbiB0aGF0IGNhc2UgeW91LCBvYnNlcnZpbmcgaGlzIGdyYXNwaW5nIHNwaXJpdCBhbmQgcGVyZmlkeQogICAgICAgICAgICAgICAgICAgIGluIHRob3NlIGRpc3RhbnQgYW5kIGNvbXBhcmF0aXZlbHkgdW5pbXBvcnRhbnQgcGxhY2VzLCB3b3VsZCBubyBsb25nZXIgYmUKICAgICAgICAgICAgICAgICAgICBuZWdsaWdlbnQgb2YgdGhlIG1vcmUgaW1wb3J0YW50IGNvbmNlcm5zIHRoYXQgbGF5IG5lYXJlciBob21l4oCUSSBtZWFuCiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW5zIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgSWYgaGUgaGFkIG5vdCBzZWl6ZWQgdGhlIHBvc2l0aW9ucywgYW5kIGlmIHRoZXJlIGhhZCBiZWVuIG5vIGRlY2VwdGlvbiBvZiB5b3UsCiAgICAgICAgICAgICAgICAgICAgYWxsIHlvdXIgaW50ZXJlc3RzIHdlcmUgc2FmZSBlbm91Z2gsIGFuZCB5b3Ugd291bGQgZ2V0IGZhaXIgdHJlYXRtZW50IGZyb20gaGltCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBjb21wdWxzaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgYSByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0YXRpb247IGZvciBzbyBsb25nIGFzIHRoZSBQaG9jaWFucyB3ZXJlIHNhZmUsIGFzIHRoZXkgd2VyZSBhdCB0aGUgdGltZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIHRoZXJlIHdhcyBubyBtZW5hY2Ugd2hpY2ggUGhpbGlwIGNvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBicmFuZGlzaGVkIGluIHlvdXIgZmFjZSB0byBtYWtlIHlvdSBkaXNyZWdhcmQgYW55IG9mIHlvdXIganVzdCBjbGFpbXMuIEhlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBlaXRoZXIgYnkgYSBtYXJjaAogICAgICAgICAgICAgICAgICAgIGFjcm9zcyBjb3VudHJ5IG9yIGJ5IGdldHRpbmcgY29tbWFuZCBvZiB0aGUgc2Vhcy4gSWYgaGUgcmVmdXNlZCBqdXN0aWNlLCB5b3UKICAgICAgICAgICAgICAgICAgICBjb3VsZCBmb3J0aHdpdGggY2xvc2UgaGlzIHBvcnRzLCBzdG9wIGhpcyBzdXBwbHkgb2YgbW9uZXksIGFuZCBvdGhlcndpc2UgcmVkdWNlCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGEgc3RhdGUgb2YgYmxvY2thZGU7IGFuZCBzbyBoZSwgYW5kIG5vdCB5b3UsIHdvdWxkIGJlIHdob2xseSBkZXBlbmRlbnQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgY29udGluZ2VudCBiZW5lZml0cyBvZiB0aGUgcGVhY2UuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+SSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm93IHByb3ZlIHRvIHlvdSB0aGF0IEkgYW0gbm90IG1ha2luZyB1cCBhIHN0b3J5IG9yIGNsYWltaW5nIG1lcml0IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGV2ZW50LCBidXQgdGhhdCBJIGZvcm1lZCBteSBqdWRnZW1lbnQsIGtlcHQgbXkgZXllIG9uIHlvdXIgaW50ZXJlc3RzLCBhbmQgdG9sZAogICAgICAgICAgICAgICAgICAgIHRoZSBlbnZveXMsIHdpdGhvdXQgYW55IGRlbGF5LiBGaW5kaW5nIHRoYXQgeW91IGhhZCBnb3QgdG8gdGhlIGVuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZWd1bGFyIEFzc2VtYmxpZXMsIGFuZCB0aGF0IHRoZXJlIHdhcyBubyBtZWV0aW5nIGxlZnQsIGFuZCBvYnNlcnZpbmcgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBlbnZveXMgd2VyZSBzdGlsbCB3YXN0aW5nIHRpbWUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgb25jZSwgSSBwcm9wb3NlZCBhIGRlY3JlZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgbWVtYmVyIG9mIHRoZSBDb3VuY2lsLCB0byB3aGljaCB0aGUgQXNzZW1ibHkgaGFkIGdpdmVuIGF1dGhvcml0eSwgZGlyZWN0aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGVudm95cyB0byBzYWlsIGltbWVkaWF0ZWx5LCBhbmQgdGhlIGdlbmVyYWwgUHJveGVudXMgdG8gY29udmV5IHRoZW0gdG8gYW55IHBsYWNlCiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggaGUgc2hvdWxkIGFzY2VydGFpbiB0aGF0IFBoaWxpcCB3YXMgdG8gYmUgZm91bmQuIEkgZHJhZnRlZCBpdCwgYXMgSSBub3cKICAgICAgICAgICAgICAgICAgICByZWFkIGl0LCBpbiB0aG9zZSBleHByZXNzIHRlcm1zLiBQbGVhc2UgdGFrZSBhbmQgcmVhZCB0aGUgZGVjcmVlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvIEkgZ290IHRoZW0KICAgICAgICAgICAgICAgICAgICBhd2F5IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgcXVpdGUgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdpbGwsIGFzIHlvdSB3aWxsIGVhc2lseSBsZWFybiBmcm9tIHRoZWlyIHN1YnNlcXVlbnQgYmVoYXZpb3IuIFdoZW4gd2UgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBhdCBPcmV1cyBhbmQgam9pbmVkIFByb3hlbnVzLCBpbnN0ZWFkIG9mIG9iZXlpbmcgdGhlaXIgaW5zdHJ1Y3Rpb25zIGFuZAogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgYnkgc2VhLCB0aGV5IHN0YXJ0ZWQgb24gYSByb3VuZGFib3V0IHRvdXIuIFdlIGhhZCB3YXN0ZWQKICAgICAgICAgICAgICAgICAgICB0aHJlZS1hbmQtdHdlbnR5IGRheXMgYmVmb3JlIHdlIHJlYWNoZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+OyBhbmQgYWxsIHRoZSByZXN0IG9mIHRoZSB0aW1lLCBtYWtpbmcsIHdpdGggdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICBjb25zdW1lZCBieSB0aGUgam91cm5leSwgZmlmdHkgZGF5cyBpbiBhbGwsIHVudGlsIHRoZSBhcnJpdmFsIG9mIFBoaWxpcCwgd2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIGRhd2RsaW5nIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGVsbGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBlbGxhIj5QZWxsYTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+VGhyb3VnaG91dCB0aGF0IHBlcmlvZCBQaGlsaXAgd2FzIG9jY3VweWluZyBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNwb3Npbmcgb2YgRG9yaXNjdXMsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhyYWNpYW4gZm9ydHJlc3NlcywgdGhlIFNhY3JlZCBNb3VudCwgYW5kIHNvIGZvcnRoLCBpbiBzcGl0ZSBvZiB0aGUgcGVhY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGFybWlzdGljZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIEludHJvZC4gcC4gMjQwLjwvbm90ZT4gQWxsCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aW1lIEkgZGlkIG5vdCBzcGFyZSB3b3JkczsgSSB0YWxrZWQgdG8gdGhlbSBmaXJzdCBhcyBvbmUgY29tbXVuaWNhdGluZyBoaXMKICAgICAgICAgICAgICAgICAgICBvcGluaW9uLCB0aGVuIGFzIGluc3RydWN0aW5nIHRoZSBpZ25vcmFudCwgYW5kIGZpbmFsbHkgaW4gdW5jb21wcm9taXNpbmcKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSwgYXMgZGVhbGluZyB3aXRoIGNvcnJ1cHQgYW5kIHByb2ZsaWdhdGUgcGVyc29ucy4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG1hbiB3aG8gb3Blbmx5IGNvbnRyYWRpY3RlZCBtZSwgYW5kIHNldCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaW4gb3Bwb3NpdGlvbiB0byBteSBhZHZpY2UgYW5kIHlvdXIgZm9ybWFsIHJlc29sdXRpb25zLCB3YXMgQWVzY2hpbmVzLiBZb3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGxlYXJuIHByZXNlbnRseSB3aGV0aGVyIGhpcyBjb25kdWN0IHdhcyBhZ3JlZWFibGUgdG8gaGlzIGNvbGxlYWd1ZXMuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtb21lbnQsIEkgaGF2ZSBub3RoaW5nIHRvIHNheSBvZiB0aGVtIGJ5IHdheSBvZiBmYXVsdC1maW5kaW5nLiBUaGV5IG1heSBhbGwgc2hvdwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgaG9uZXN0IG1lbiB0b2RheSwgbm90IGJ5IGNvbXB1bHNpb24gYnV0IG9mIHRoZWlyIG93biBmcmVlIHdpbGwsIGFuZAogICAgICAgICAgICAgICAgICAgIGFzIGhhdmluZyBubyBzaGFyZSBpbiB0aG9zZSBpbmlxdWl0aWVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaG9zZQogICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJzIG9mIHRoZSBlbWJhc3N5IHdobyB3ZXJlIGlubm9jZW50IG1heSBjb21lIGZvcndhcmQgdm9sdW50YXJpbHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2F2b3cgQWVzY2hpbmVzLiBEZW1vc3RoZW5lcyB3aWxsIG5vdCBmb3JjZSB0aGVtIHRvIGNsZWFyIHRoZW1zZWx2ZXM7IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VzZXMgbm9uZSBidXQgdGhlIGNoaWVmIGN1bHByaXQuIFRoZSBuZXh0IHNlbnRlbmNlLCBob3dldmVyLCBoaW50cyB0aGF0LAogICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IGRvIG5vdCBkaXNhdm93IGhpbSwgdGhleSBtYXkgc2hhcmUgaGlzIGRpc2dyYWNlLjwvbm90ZT4gVGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWVkcyBkb25lIHdlcmUgZGlzZ3JhY2VmdWwsIG1vbnN0cm91cywgYW5kIHZlbmFsLCB5b3UgaGF2ZSBhbHJlYWR5IGRpc2NvdmVyZWQ7CiAgICAgICAgICAgICAgICAgICAgbGV0IGZhY3RzIGRpc2Nsb3NlIHdobyB3ZXJlIHRoZSBwYXJ0aWNpcGF0b3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBpdCBtYXkgYmUgdXJnZWQgdGhhdCB0aGV5IHNwZW50IGFsbAogICAgICAgICAgICAgICAgICAgIHRoaXMgdGltZSBzd2VhcmluZyBpbiB0aGUgYWxsaWVzLCBvciBkaXNjaGFyZ2luZyBzb21lIG90aGVyIHBhcnQgb2YgdGhlaXIgZHV0eS4KICAgICAgICAgICAgICAgICAgICBOb3QgYXQgYWxsOyB0aG91Z2ggdGhleSB3ZXJlIG9uIHRoZWlyIHRyYXZlbHMgZm9yIHRocmVlIHdob2xlIG1vbnRocywgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSB5b3UgYSB0aG91c2FuZCBkcmFjaG1hcyBmb3Igam91cm5leS1tb25leSwgdGhleSBkaWQgbm90IGdldCB0aGUKICAgICAgICAgICAgICAgICAgICBvYXRocyBmcm9tIGFueSBzaW5nbGUgY2l0eSBlaXRoZXIgb24gdGhlaXIgb3V0d2FyZCBqb3VybmV5IG9yIG9uIHRoZWlyIHdheSBob21lLgogICAgICAgICAgICAgICAgICAgIFRoZSBvYXRocyB3ZXJlIGFkbWluaXN0ZXJlZCBhdCB0aGUgaG9zdGVscnkgaW4gZnJvbnQgb2YgdGhlIFRlbXBsZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBUd2lucyzigJRhbnkgb2YgeW91IHdobyBoYXZlIGJlZW4gdG8gUGhlcmFlIHdpbGwga25vdyB0aGUgcGxhY2UgSQogICAgICAgICAgICAgICAgICAgIG1lYW4s4oCUYXQgdGhlIHRpbWUgd2hlbiBQaGlsaXAgd2FzIGFscmVhZHkgb24gaGlzIG1hcmNoIHRvd2FyZHMKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdpdGggaGlzIGFybXksIGFuZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgbWFubmVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHdhcwogICAgICAgICAgICAgICAgICAgIHRob3JvdWdobHkgZGlzY3JlZGl0YWJsZSB0byB0aGUgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+WWV0CiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIHdvdWxkIGhhdmUgcGFpZCBhbnkgc3VtIHRvIGhhdmUgbWF0dGVycyBtYW5hZ2VkIGluIHRoaXMgd2F5LiBGb3Igd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBoYWQgZmFpbGVkIHRvIGRyYXcgdGhlIHRyZWF0eSwgYXMgdGhleSBmaXJzdCB0cmllZCB0byBkbywgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgY2xhdXNlIGV4Y2VwdGluZyB0aGUgSGFsaWFucyBhbmQgdGhlIFBob2NpYW5zLCBhbmQgUGhpbG9jcmF0ZXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb21wZWxsZWQgYnkgeW91IHRvIGVyYXNlIHRob3NlIHdvcmRzIGFuZCB3cml0ZSBleHByZXNzbHksIOKAnHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyBhbmQgdGhlIEFsbGllcyBvZiB0aGUgQXRoZW5pYW5zLOKAnSB0byB0aGUgdHJlYXR5IHNvIGRyYXduCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGRpZCBub3Qgd2lzaCBhbnkgb2YgaGlzIGFsbGllcyB0byBoYXZlIHN3b3JuOyBmb3IgdGhlbiB0aGV5IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIGpvaW4gaW4gaGlzIGZvcmNpYmxlIG9jY3VwYXRpb24gb2YgdGhvc2UgcG9zc2Vzc2lvbnMgb2YgeW91cnMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBub3cgaG9sZHMsIGFuZCB0aGUgb2F0aCB3b3VsZCBoYXZlIGJlZW4gdGhlaXIgZXhjdXNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIGRpZCBoZSBkZXNpcmUgd2l0bmVzc2VzIG9mIHRoZSBwcm9taXNlcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCBvZiB3aGljaCBoZSB3YXMgb2J0YWluaW5nIHRoZSBwZWFjZSwgbm9yIGFueSBwdWJsaWMgZGlzY2xvc3VyZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmYWN0IHRoYXQgYWZ0ZXIgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgYmVlbiBiZWF0ZW4gaW4gdGhlIHdhciwgYW5kIHRoYXQgaXQgd2FzIFBoaWxpcCB3aG8gd2FzIHJlYWxseSBlYWdlciBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVhY2UsIGFuZCB3YXMgcmVhZHkgdG8gbWFrZSBsYXJnZSBwcm9taXNlcyB0byB0aGUgQXRoZW5pYW5zIGlmIGhlIGNvdWxkIGdldCBpdC4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUgaGUgZGlzYXBwcm92ZWQgb2YgdGhlc2UgbWVuIGdvaW5nIGFueXdoZXJlLCBsZXN0IHRoZSBmYWN0cyB0aGF0IEkgYW0KICAgICAgICAgICAgICAgICAgICBzdGF0aW5nIHNob3VsZCBiZWNvbWUgZ2VuZXJhbGx5IGtub3duOyBhbmQgdGhleSB3ZXJlIHJlYWR5IHRvIGdyYXRpZnkgaGltIHdpdGgKICAgICAgICAgICAgICAgICAgICBvc3RlbnRhdGlvdXMgZGVmZXJlbmNlIGFuZCBleHRyYXZhZ2FudCBhZHVsYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+WWV0LCB3aGVuIHRoZXkgYXJlIGNvbnZpY3RlZCBvZiBhbGwgdGhlc2UgZGVsaW5xdWVuY2llcywgb2YgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgc3F1YW5kZXJlZCB0aGVpciB0aW1lLCB0aHJvd24gYXdheSB0aGUgVGhyYWNpYW4gb3V0cG9zdHMsIGRvbmUgbm90aGluZyBhZ3JlZWFibGUKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdG8geW91ciBpbnN0cnVjdGlvbnMgb3IgdG8gc291bmQgcG9saWN5LCBhbmQgc2VudCBseWluZyBkaXNwYXRjaGVzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaG93IGNhbiB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5IGZpbmQgYSB3YXkgb2YgZXNjYXBlIGJlZm9yZSBhbiBpbnRlbGxpZ2VudCBhbmQgY29uc2NpZW50aW91cyBqdXJ5PwogICAgICAgICAgICAgICAgICAgIEhvd2V2ZXIsIHRvIHByb3ZlIHRoZSB0cnV0aCBvZiBteSBzdGF0ZW1lbnRzLCByZWFkIGZpcnN0IHRoZSBkZWNyZWUgZ2l2aW5nCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucyBmb3IgdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSBvYXRoLCB0aGVuIFBoaWxpcCdzIGxldHRlciwgYW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICB0aGUgZGVjcmVlIG9mIFBoaWxvY3JhdGVzLCBhbmQgdGhlIGRlY3JlZSBvZiB0aGUgQXNzZW1ibHkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlLAogICAgICAgICAgICAgICAgICAgIG1vcmVvdmVyLCB0aGF0IHdlIHNob3VsZCBoYXZlIGNhdWdodCBQaGlsaXAgYXQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4sIGlmIG15IGFkdmljZSBoYWQgYmVlbiB0YWtlbiBhbmQgeW91ciBkaXJlY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgb2JleWVkIGluIHRoZSB0ZXJtcyBvZiB0aGUgZGVjcmVlcywgY2FsbCB0aGUgd2l0bmVzc2VzIHdobyB3ZXJlIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIHRoZSBvdGhlciBkZXBvc2l0aW9uIHRlc3RpZnlpbmcKICAgICAgICAgICAgICAgICAgICB0byB0aGUgYW5zd2VyIG1hZGUgYnkgUGhpbGlwIHRvIEV1Y2xlaWRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FdWNsZWlkZXM6IHNlbnQgdG8gcHJvdGVzdCBhZ2FpbnN0IFBoaWxpcCdzIGludmFzaW9uIG9mIHRoZSBkb21pbmlvbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2Vyc29ibGVwdGVzLjwvbm90ZT4gaGVyZSwgd2hvIGFycml2ZWQgbGF0ZXIuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz7vvIhUaGUgRGVwb3NpdGlvbiBpcyByZWFk77yJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBzaG93CiAgICAgICAgICAgICAgICAgICAgeW91IHRoYXQgdGhlcmUgaXMgbm8gd2F5IG9mIGRlbnlpbmcgdGhhdCB0aGV5IHdlcmUgYWN0aW5nIGluIHRoZSBpbnRlcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxpcC4gV2hlbiB3ZSB3ZXJlIHNldHRpbmcgb3V0IG9uIHRoZSBmb3JtZXIgZW1iYXNzeSBmb3IgcGVhY2UsIHlvdSBzZW50CiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBhIGhlcmFsZCB0byBhcnJhbmdlIG91ciBzYWZlLWNvbmR1Y3QuIE9uIHRoYXQgb2NjYXNpb24sIGFzIHNvb24gYXMgdGhleQogICAgICAgICAgICAgICAgICAgIHJlYWNoZWQgT3JldXMsIHRoZXkgd2FzdGVkIG5vIHRpbWUgdGhlcmUgd2FpdGluZyBmb3IgdGhlIGhlcmFsZC4gQWx0aG91Z2ggSGFsdXMKICAgICAgICAgICAgICAgICAgICB3YXMgYmVsZWFndWVyZWQsIHRoZXkgY3Jvc3NlZCB0aGUgc2VhIHRoaXRoZXI7IHRoZW4gbGVmdCB0aGUgdG93biBhbmQgd2VudCB0bwogICAgICAgICAgICAgICAgICAgIFBhcm1lbmlvLCB3aG8gd2FzIGNvbmR1Y3RpbmcgdGhlIHNpZWdlOyBzZXQgb2ZmIHRocm91Z2ggdGhlIGVuZW1pZXMnIHBvc2l0aW9ucwogICAgICAgICAgICAgICAgICAgIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA4NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDg0Ij5QYWdhc2FlPC9wbGFjZU5hbWU+LCBhbmQgY29udGludWVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgam91cm5leSB0aWxsIHRoZXkgbWV0IHRoZSBoZXJhbGQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxMYXJpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMYXJpc3NhIj5MYXJpc3NhPC9wbGFjZU5hbWU+LiBTdWNoIHdhcyB0aGUgZW5lcmd5IGFuZCBnb29kd2lsbCB3aXRoIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICB0cmF2ZWxsZWQgdGhlbjsgPC90cmFuc2xhdGlvbj4="
translation['19.Narr.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IG5vdywgaW4gdGltZSBvZiBwZWFjZSwKICAgICAgICAgICAgICAgICAgICB3aXRoIGNvbXBsZXRlIHNlY3VyaXR5IGZvciB0cmF2ZWxsaW5nLCBhbmQgd2l0aCB5b3VyIGluanVuY3Rpb25zIG9mIGhhc3RlLCBpdAogICAgICAgICAgICAgICAgICAgIG5ldmVyIG9jY3VycmVkIHRvIHRoZW0gdG8gaGFzdGVuIHRoZWlyIGpvdXJuZXkgYnkgbGFuZCBvciB0byB0cmF2ZWwgYnkgc2VhLiBXaHkKICAgICAgICAgICAgICAgICAgICBzbz8gQmVjYXVzZSB0aGVuIGl0IHdhcyB0byBQaGlsaXAncyBhZHZhbnRhZ2UgdGhhdCBwZWFjZSBzaG91bGQgYmUgY29uY2x1ZGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhbGwgc3BlZWQsIGJ1dCBub3cgdGhhdCBhcyBtdWNoIHRpbWUgYXMgcG9zc2libGUgc2hvdWxkIGJlIHdhc3RlZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgYWRtaW5pc3RyYXRpb24gb2YgdGhlIG9hdGhzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgc3RhdGVtZW50IGFsc28gaXMgdHJ1ZSwgdGFrZSBhbmQgcmVhZCB0aGlzIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBjb3VsZCBtZW4gYmUgbW9yZSBjbGVhcmx5IGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIG9mIGFjdGluZyB0aHJvdWdob3V0IGluIHRoZSBpbnRlcmVzdCBvZiBQaGlsaXA/IEl0IHdhcyB0aGUgc2FtZSBqb3VybmV5OiB0aGV5CiAgICAgICAgICAgICAgICAgICAgbG9pdGVyZWQgd2hlbiB0aGV5IHNob3VsZCBoYXZlIGJlc3RpcnJlZCB0aGVtc2VsdmVzIGluIHlvdXIgc2VydmljZTsgdGhleQogICAgICAgICAgICAgICAgICAgIGh1cnJpZWQgd2hlbiB0aGV5IG91Z2h0IG5vdCB0byBoYXZlIG1vdmVkIGEgc3RlcCB1bnRpbCB0aGUgYXJyaXZhbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBoZXJhbGQuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UKICAgICAgICAgICAgICAgICAgICBuZXh0IHRoZSBwZXJpb2Qgb2Ygb3VyIGxvaXRlcmluZyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBlbGxhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQZWxsYSI+UGVsbGE8L3BsYWNlTmFtZT4sIGFuZCBjb21wYXJlIHRoZSBlbXBsb3ltZW50cyB3aGljaCB3ZSBzZXZlcmFsbHkgY2hvc2UgZm9yCiAgICAgICAgICAgICAgICAgICAgb3Vyc2VsdmVzLiBNaW5lIHdhcyB0byBzZWVrIG91dCBhbmQgcmVzY3VlIHRoZSBjYXB0aXZlcywgc3BlbmRpbmcgbW9uZXkgb2YgbXkKICAgICAgICAgICAgICAgICAgICBvd24sIGFuZCBhc2tpbmcgUGhpbGlwIHRvIGFwcGx5IHRvIHRoZWlyIHJhbnNvbSB0aGUgbW9uZXkgaGUgd2FzIHNwZW5kaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgaG9zcGl0YWJsZSBnaWZ0cyBmb3IgdXMuIEJ1dCB3aGF0IEFlc2NoaW5lcyBjb25zdGFudGx5IHRyaWVkIHRvIGVmZmVjdCwgeW91CiAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGVhciBpbiBhIG1vbWVudC4gV2hhdCB0aGVuIHdhcyBpdD8gSXQgd2FzIHRoYXQgUGhpbGlwIHNob3VsZCBnaXZlIHVzIGEKICAgICAgICAgICAgICAgICAgICBsdW1wIHN1bSBhcyBhIGNvbGxlY3RpdmUgcHJlc2VudC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.167'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjciIHVuaXQ9InNlY3Rpb24iIC8+WW91IG11c3QKICAgICAgICAgICAgICAgICAgICBrbm93IHRoYXQgUGhpbGlwIHdhcyBhbHJlYWR5IHNvdW5kaW5nIHVzIGFsbCBpbiB0aGlzIHdheTogaGUgc2VudCBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMgdG8gZWFjaCBvZiB1cyBpbiB0dXJuLCB3aXRoIHRoZSBvZmZlciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgb2YgYSByZWFsbHkgbGFyZ2Ugc3VtIGluIGdvbGQuCiAgICAgICAgICAgICAgICAgICAgSGF2aW5nIGZhaWxlZCBpbiBzb21lIGNhc2Ugb3Igb3RoZXIs4oCUaW4gd2hhdCBjYXNlIGxldCB0aGUgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2U7IGl0IGlzIG5vdCBmb3IgbWUgdG8gbmFtZSBteXNlbGYs4oCUaGUgY29uY2VpdmVkIHRoYXQgYQogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpdmUgcHJlc2VudCBtaWdodCBiZSBhY2NlcHRlZCBieSBhbGwgb2YgdXMgd2l0aG91dCBtaXNnaXZpbmc7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd291bGQgYmUgc2VjdXJpdHkgZm9yIHRob3NlIHdobyBoYWQgaW5kaXZpZHVhbGx5IHNvbGQgdGhlbXNlbHZlcywgaWYgd2UKICAgICAgICAgICAgICAgICAgICBhbGwgc2hhcmVkIGV2ZW4gdG8gYSB0cmlmbGluZyBleHRlbnQgaW4gdGhlIGdlbmVyYWwgYWNjZXB0YW5jZS4gQWNjb3JkaW5nbHkgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgb2ZmZXJlZCzigJRub21pbmFsbHksIGFzIGEgZm9ybSBvZiBob3NwaXRhbGl0eS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.168'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjgiIHVuaXQ9InNlY3Rpb24iIC8+SSBzdG9wcGVkIHRoYXQgbWFub2V1dnJlOyBhbmQgdGhlbiB0aGVzZSBtZW4gZGl2aWRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgbW9uZXkgYWxzbyBhbW9uZyB0aGVtc2VsdmVzLiBXaGVuIEkgYXNrZWQgUGhpbGlwIHRvIHNwZW5kIGl0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNhcHRpdmVzLCBoZSBjb3VsZCBub3Qgd2l0aCBkZWNlbmN5IGVpdGhlciBpbmZvcm0gYWdhaW5zdCB0aGVtIGJ5IHJlcGx5aW5nLAogICAgICAgICAgICAgICAgICAgIOKAnEl0IGlzIGluIHNvLWFuZC1zbydzIHBvY2tldHMs4oCdIG9yIGVzY2FwZSB0aGUgb3V0bGF5OyBzbyBoZQogICAgICAgICAgICAgICAgICAgIG1hZGUgbWUgdGhlIHByb21pc2UsIGJ1dCBldmFkZWQgcGVyZm9ybWFuY2UgYnkgc2F5aW5nIHRoYXQgaGUgd291bGQgc2VuZCB0aGUgbWVuCiAgICAgICAgICAgICAgICAgICAgaG9tZSBpbiB0aW1lIGZvciB0aGUgUGFuYXRoZW5haWMgRmVzdGl2YWwuIFJlYWQgdGhlIGRlcG9zaXRpb24gb2YgQXBvbGxvcGhhbmVzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuIHRob3NlIG9mIHRoZSBvdGhlciBwZXJzb25zIHdobyB3ZXJlIHRoZXJlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.169'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBub3cKICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSBob3cgbWFueSBvZiB0aGUgY2FwdGl2ZXMgSSByYW5zb21lZCBteXNlbGYuIEZvciB3aGlsZSB3ZSB3ZXJlIHN0YXlpbmcKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBlbGxhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQZWxsYSI+UGVsbGE8L3BsYWNlTmFtZT4sIGJlZm9yZSBQaGlsaXAncyBhcnJpdmFsLAogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlIHByaXNvbmVycyzigJRhbGwgaW4gZmFjdCB3aG8gd2VyZSBvdXQgb24KICAgICAgICAgICAgICAgICAgICBiYWlsLOKAlGhhdmluZywgSSBzdXBwb3NlLCBubyBjb25maWRlbmNlIHRoYXQgdGhleSB3b3VsZCBhZnRlcndhcmRzIGJlCiAgICAgICAgICAgICAgICAgICAgYWJsZSB0byBpbmR1Y2UgUGhpbGlwIHRvIG1vdmUsIHRvbGQgbWUgdGhhdCB0aGV5IHdlcmUgd2lsbGluZyB0byBwcm92aWRlIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biByYW5zb20gd2l0aG91dCBwdXR0aW5nIHRoZW1zZWx2ZXMgdW5kZXIgb2JsaWdhdGlvbiB0byBQaGlsaXAsIGFuZAogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgdG8gYm9ycm93IHRoZWlyIHJhbnNvbS1tb25leSwgdGhyZWUgbWluYXMsIGZpdmUgbWluYXMsIG9yIGFzIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYmUuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzAiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiBQaGlsaXAgYWdyZWVkIHRvIGdldCB0aGUKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIG9mIHRoZSByZXN0LCBJIGNhbGxlZCB0b2dldGhlciB0aGVzZSBtZW4sIHRvIHdob20gSSBoYWQgbGVudCB0aGUgbW9uZXkKICAgICAgICAgICAgICAgICAgICBhcyBhIGZyaWVuZGx5IGxvYW4sIHJlbWluZGVkIHRoZW0gb2YgdGhlIHRyYW5zYWN0aW9uLCBhbmQgbWFkZSB0aGVtIGEgZnJlZSBnaWZ0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgcmFuc29tLW1vbmV5LCBsZXN0IHRoZXkgc2hvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIHB1dCBpbnRvIGEgd29yc2UKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBieSB0aGVpciBpbXBldHVvc2l0eSwgb3IgdG8gaGF2ZSBiZWVuIHJhbnNvbWVkLCB0aG91Z2ggcG9vciBtZW4sIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIGV4cGVuc2UsIHdoaWxlIHRoZSByZXN0IHdlcmUgZXhwZWN0aW5nIGRlbGl2ZXJhbmNlIGZyb20gUGhpbGlwLiBUbwogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRoZSB0cnV0aCBvZiBteSBzdGF0ZW1lbnQsIHJlYWQgdGhlc2UgZGVwb3NpdGlvbnMgYWxzby48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.171'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldlbGwsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc3VtcyBvZiBtb25leSBJIGdhdmUgYXdheSBhcyBhIGZyZWUgZ2lmdCB0byBteSBmZWxsb3ctY2l0aXplbnMgaW4gZGlzdHJlc3MuIElmCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIGluIGFkZHJlc3NpbmcgeW91IHNob3VsZCBzYXkgcHJlc2VudGx5OiDigJxEZW1vc3RoZW5lcywgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IGluZmVycmVkIGZyb20gbXkgc3BlZWNoIGluIHN1cHBvcnQgb2YgUGhpbG9jcmF0ZXMgdGhhdCBvdXIgY29uZHVjdCB3YXMKICAgICAgICAgICAgICAgICAgICB0aG9yb3VnaGx5IGNvcnJ1cHQsIHdoeSBkaWQgeW91IGpvaW4gdXMgb24gdGhlIHN1YnNlcXVlbnQgZW1iYXNzeSB0byByZWNlaXZlIHRoZQogICAgICAgICAgICAgICAgICAgIG9hdGhzLCBpbnN0ZWFkIG9mIGV4Y3VzaW5nIHlvdXJzZWxmP+KAnSB5b3UgbXVzdCByZW1lbWJlciB0aGF0IEkgaGFkCiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZWQgdGhlIHByaXNvbmVycyB3aG9tIEkgZGVsaXZlcmVkIHRoYXQgSSB3b3VsZCBicmluZyB0aGUgcmFuc29tLW1vbmV5IGFuZAogICAgICAgICAgICAgICAgICAgIGRvIG15IHV0bW9zdCBmb3IgdGhlaXIgcmVzY3VlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Narr.172'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgaGF2ZSBiZWVuIHRvbyBiYWQgdG8gYnJlYWsgbXkgd29yZCBhbmQgYWJhbmRvbiBmZWxsb3ctY3JlYXR1cmVzIGFuZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVucyBpbiBtaXNmb3J0dW5lLiBIYWQgSSBkZWNsaW5lZCBvbiBvYXRoLCBhIHByaXZhdGUgZXhjdXJzaW9uIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3b3VsZCBoYXZlIGJlZW4gbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIGRlY2VudCBub3Igc2FmZS4gRXhjZXB0IGZvciBteSBzdHJvbmcgZGVzaXJlIHRvIGxpYmVyYXRlIHRob3NlIG1lbiwgbWF5IEkgZGllCiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmx5IGJlZm9yZSBteSB0aW1lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBHcmVlayBwaHJhc2UsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VycyBhbHNvIGF0IHRoZSBlbmQgb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGNvcm9uYTwvdGl0bGU+LCBzdWdnZXN0cyBieSBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgamluZ2xlIHRoZSBmb3JtdWxhIG9mIHNvbWUgY3Vyc2UsIGJ1dCBjYW5ub3QgYmUgd2VsbCByZXByb2R1Y2VkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2guPC9ub3RlPiBpZiBhbnkgcmV3YXJkIHdvdWxkIGhhdmUgaW5kdWNlZCBtZSB0byBhY2NlcHQgYW4gZW1iYXNzeQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlc2UgbWVuIGFzIG15IGNvbGxlYWd1ZXMuIEkgcHJvdmVkIHRoYXQgYnkgdHdpY2UgZXhjdXNpbmcgbXlzZWxmIHdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgdHdpY2UgYXBwb2ludGVkIG1lIHRvIHRoZSB0aGlyZCBlbWJhc3N5LCBhbmQgYWxzbyBieSBteSBjb25zdGFudCBvcHBvc2l0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSBvbiB0aGlzIGpvdXJuZXkuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGNvcm9uYTwvdGl0bGU+LCBzdWdnZXN0cyBieSBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgamluZ2xlIHRoZSBmb3JtdWxhIG9mIHNvbWUgY3Vyc2UsIGJ1dCBjYW5ub3QgYmUgd2VsbCByZXByb2R1Y2VkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2guPC90cmFuc2xhdGlvbj4="
translation['19.Narr.173'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvIHRoZSBidXNpbmVzcyB3aGljaCBJIGNvbnRyb2xsZWQgYnkgbXlzZWxmIG9uIHRoZSBlbWJhc3N5IHR1cm5lZAogICAgICAgICAgICAgICAgICAgIG91dCBpbiB0aGlzIGZhc2hpb24gdG8geW91ciBhZHZhbnRhZ2UsIGFsdGhvdWdoLCB3aGVyZSB0aGUgbWFqb3JpdHkgcHJldmFpbGVkLAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgd2VudCB0byBydWluLiBJbmRlZWQsIGlmIG15IGFkdmljZSBoYWQgYmVlbiB0YWtlbiwgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9ucyBtaWdodCBoYXZlIGhhZCBhbiBlcXVhbGx5IGZvcnR1bmF0ZSBpc3N1ZTsgZm9yIEkgd2FzIG5vdCBzbyBmb29saXNoCiAgICAgICAgICAgICAgICAgICAgYW5kIHN0dXBpZCBhcyB0byBsb3NlIG1vbmV5LCB3aGlsZSBvdGhlcnMgd2VyZSBtYWtpbmcgbW9uZXksIG91dCBvZiBzaGVlciBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzcGlyaXQsIGFuZCB0aGVuIG9iamVjdCB0byBhIGNvdXJzZSBvZiBhY3Rpb24gdGhhdCB3b3VsZCBoYXZlIGNvc3Qgbm8gZXhwZW5zZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBvZmZlcmVkIGZhciBncmVhdGVyIGFkdmFudGFnZXMgdG8gdGhlIHdob2xlIGNvbW1vbndlYWx0aC4gWWVzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgaXNzdWUgbWlnaHQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gZm9ydHVuYXRlIGluZGVlZDsgb25seSB0aGVzZSBtZW4gaGFkIHRoZWlyIHdheS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.174'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBub3cgSSBhc2sgeW91IHRvIGxvb2sgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0cyBvZiBBZXNjaGluZXMgYW5kIHRob3NlIG9mIFBoaWxvY3JhdGVzLCBpbiBjb21wYXJpc29uIHdpdGggbWluZTsgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXN0IHdpbGwgaGVscCB0byBleHBvc2UgdGhlbS4gRmlyc3QsIGluIHZpb2xhdGlvbiBib3RoIG9mIHRoZSBkZWNyZWUgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgYXNzdXJhbmNlcyBnaXZlbiB0byB5b3UsIHRoZXkgZXhjbHVkZWQgdGhlIEhhbGlhbnMsIHRoZSBQaG9jaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgQ2Vyc29ibGVwdGVzLCBmcm9tIHRoZSBiZW5lZml0cyBvZiB0aGUgdHJlYXR5LiBUaGVuIHRoZXkgYXR0ZW1wdGVkIHRvIHRhbXBlcgogICAgICAgICAgICAgICAgICAgIHdpdGggYW5kIHJlcGVhbCB0aGUgZGVjcmVlIGZyb20gd2hpY2ggb3VyIG93biBhdXRob3JpdHkgd2FzIGRlcml2ZWQuIE5leHQgdGhleQogICAgICAgICAgICAgICAgICAgIGVudGVyZWQgdGhlIENhcmRpYW5zIGFzIGFsbGllcyBvZiBQaGlsaXAsIGFuZCByZWZ1c2VkIGJ5IGEgZGVmaW5pdGUgdm90ZSB0byBzZW5kCiAgICAgICAgICAgICAgICAgICAgYSBkaXNwYXRjaCB3cml0dGVuIGJ5IG1lLCBidXQgdGhlbXNlbHZlcyBjb21wb3NlZCBhbmQgc2VudCBvbmUgdGhhdCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgY29udGFpbiBhbiBob25lc3Qgd29yZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.175'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYmVjYXVzZSBJCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0ZWQgdG8gdGhlaXIgYWN0cywgbm90IG9ubHkgdGhpbmtpbmcgdGhlbSBkaXNob25vcmFibGUgYnV0IGZlYXJpbmcgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc2hhcmUgdGhlIHJ1aW4gdGhleSB3ZXJlIGJyaW5naW5nIG9uIHRoZW1zZWx2ZXMsIG91ciBjaGl2YWxyb3VzIGZyaWVuZAogICAgICAgICAgICAgICAgICAgIGFjY3VzZWQgbWUgb2YgcHJvbWlzaW5nIHRvIFBoaWxpcCB0aGF0IEkgd291bGQgb3ZlcnRocm93IHRoZSBBdGhlbmlhbiBkZW1vY3JhY3ksCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgYWxsIHRoZSB0aW1lIGhlIHdhcyBoaW1zZWxmIGNvbnN0YW50bHkgaG9sZGluZyBwcml2YXRlIGNvbW11bmljYXRpb25zIHdpdGgKICAgICAgICAgICAgICAgICAgICBQaGlsaXAuIEkgbmVlZCBvbmx5IG1lbnRpb24gdGhhdCBub3QgSSBidXQgRGVyY3lsdXMsIHdpdGggdGhlIGhlbHAgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHNlcnZhbnQgb2YgbWluZSwgd2F0Y2hlZCBoaW0gYnkgbmlnaHQgYXQgUGhlcmFlLCBjYXVnaHQgaGltIGVtZXJnaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyB0ZW50LCBhbmQgdG9sZCB0aGUgc2VydmFudCB0byBsZXQgbWUga25vdywgYW5kIG5vdCB0byBmb3JnZXQgaXQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyBhbmQgdGhhdCBpbiB0aGUgZW5kIHRoaXMgaW1wdWRlbnQgYmxhY2tndWFyZCBzdGF5ZWQgd2l0aCBQaGlsaXAgZm9yIGEKICAgICAgICAgICAgICAgICAgICBkYXkgYW5kIGEgbmlnaHQgb24gb3VyIGRlcGFydHVyZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.176'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzYiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGggb2YgdGhlc2Ugc3RhdGVtZW50cywgaW4gdGhlIGZpcnN0IHBsYWNlIEkgd2lsbCBnaXZlIGV2aWRlbmNlIG15c2VsZiwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgZHVseSB3cml0dGVuIGRvd24gbXkgZGVwb3NpdGlvbiBhbmQgaW5jdXJyZWQgbGVnYWwgcmVzcG9uc2liaWxpdHk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgc2hvdWxkIGJlIHJlbWVtYmVyZWQgdGhhdCBhbGwgZXZpZGVuY2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIGNvdXJ0cyB3YXMgZGVwb3NpdGVkIGluIHdyaXRpbmcgYmVmb3JlIHRoZSB0cmlhbC4gVGhlcmUgd2FzIG5vCiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJhbCBldmlkZW5jZSBhbmQgbm8gY3Jvc3MtZXhhbWluYXRpb24uIEJ5IGF0dGVzdGluZyB1bmRlciBvYXRoIHRoZSB0cnV0aAogICAgICAgICAgICAgICAgICAgICAgICBvZiBoaXMgZGVwb3NpdGlvbiwgdGhlIHdpdG5lc3Mgb2YgY291cnNlIG1hZGUgaGltc2VsZiBhbnN3ZXJhYmxlIHRvIGEgY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHBlcmp1cnkuPC9ub3RlPjsgYW5kIEkgd2lsbCB0aGVuIGNhbGwgdGhlIG90aGVyIGFtYmFzc2Fkb3JzIGluIHR1cm4sIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbXBlbCB0aGVtIGVpdGhlciB0byB0ZXN0aWZ5LCBvciB0byB0YWtlIG9hdGggdGhhdCB0aGV5IGFyZSB1bmFibGUgdG8gdGVzdGlmeS4KICAgICAgICAgICAgICAgICAgICBJZiB0aGV5IHRha2UgdGhlIG9hdGgsIEkgc2hhbGwgZWFzaWx5IGNvbnZpY3QgdGhlbSBvZiBwZXJqdXJ5LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.177'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoYXZlIHNlZW4KICAgICAgICAgICAgICAgICAgICBob3cgSSB3YXMgaGFyYXNzZWQgYnkgdHJvdWJsZXMgYW5kIGFubm95YW5jZSB0aHJvdWdob3V0IHRoZSBleHBlZGl0aW9uLiBZb3UgY2FuCiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSBob3cgdGhleSBiZWhhdmVkIHRoZXJlLCB3aXRoIHRoZWlyIHBheW1hc3RlciBuZXh0IGRvb3IsIHdoZW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb25kdWN0IGhlcmUsIHVuZGVyIHRoZSBleWVzIG9mIHRoZSBwZW9wbGUsIHdobyBob2xkIHRoZSBwb3dlciB0byByZXdhcmQgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgY2hhc3Rpc2UsIGlzIHdoYXQgd2Uga25vdyBpdCB0byBiZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICByZWNhcGl0dWxhdGUgdGhlIGNoYXJnZXMgSSBoYXZlIGJyb3VnaHQgaG9tZSwgYW5kIHRvIHNob3cgdGhhdCBJIGhhdmUgZnVsZmlsbGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHVuZGVydGFraW5nIEkgZ2F2ZSBhdCB0aGUgb3V0c2V0IG9mIG15IHNwZWVjaC4gSSBoYXZlIHByb3ZlZCwgbm90IGJ5IHdvcmRzCiAgICAgICAgICAgICAgICAgICAgYnV0IGJ5IHRoZSB0ZXN0aW1vbnkgb2YgZmFjdHMsIHRoYXQgdGhlcmUgd2FzIG5vIHdvcmQgb2YgdHJ1dGggaW4gdGhlIHJlcG9ydCBvZgogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcywgYnV0IHRoYXQgaGUgc3VjY2Vzc2Z1bGx5IGRlY2VpdmVkIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.178'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzgiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIHByb3ZlZCB0aGF0IGhlIGlzIHRvIGJsYW1lIGZvciB5b3VyIHJlZnVzYWwgdG8gaGVhciB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBmcm9tIG1lLCBjYXB0aXZhdGVkIGFzIHlvdSB0aGVuIHdlcmUgYnkgaGlzIHByb21pc2VzIGFuZCBhc3N1cmFuY2VzOyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGNvdW5zZWxzIHdlcmUgZXhhY3RseSBvcHBvc2VkIHRvIHJpZ2h0IHBvbGljeTsgdGhhdCBoZSBzcG9rZSBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIHRlcm1zIG9mIHBlYWNlIHByb3Bvc2VkIGJ5IG91ciBhbGxpZXMsIGFuZCBpbiBmYXZvciBvZiB0aGUgcHJvcG9zYWxzIG9mCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXM7IHRoYXQgaGUgcHVycG9zZWx5IHdhc3RlZCB5b3VyIHRpbWUgdG8gZGViYXIgeW91IGZyb20gZ29pbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYWlkIG9mIHRoZSBQaG9jaWFucyBpZiB5b3Ugc2hvdWxkIHNvIGRlc2lyZTsgdGhhdCB0aHJvdWdob3V0IGhpcyBqb3VybmV5IGFicm9hZAogICAgICAgICAgICAgICAgICAgIGhpcyBzaW5zIHdlcmUgbWFueSBhbmQgZ3JpZXZvdXM7IHRoYXQgaGUgaGFzIGJldHJheWVkIGV2ZXJ5dGhpbmcsIHNvbGQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nLCB0YWtlbiBicmliZXMsIGFuZCBzdG9wcGVkIHNob3J0IG9mIG5vIGluaXF1aXR5LiBUaGF0LCB0aGVuLCBpcyB3aGF0CiAgICAgICAgICAgICAgICAgICAgSSB1bmRlcnRvb2sgdG8gcHJvdmU7IGFuZCB0aGF0IGlzIHdoYXQgSSBoYXZlIHByb3ZlZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.179'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG1hcmsgd2hhdCBmb2xsb3dzOyBmb3IgdGhlIGFyZ3VtZW50IEkgbm93IHB1dCBiZWZvcmUgeW91IGlzCiAgICAgICAgICAgICAgICAgICAgcGxhaW4gYW5kIHN0cmFpZ2h0Zm9yd2FyZC4gWW91IGhhdmUgc3dvcm4gdG8gZ2l2ZSBhIHZlcmRpY3QgYWNjb3JkaW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIGFuZCB0byB0aGUgZGVjcmVlcyBvZiB0aGUgcGVvcGxlIGFuZCBvZiB0aGUgQ291bmNpbCBvZiBGaXZlIEh1bmRyZWQ7IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3Qgb2YgdGhlIGRlZmVuZGFudCB3aGVuIGhvbGRpbmcgdGhlIG9mZmljZSBvZiBhbWJhc3NhZG9yIGhhcyBtYW5pZmVzdGx5CiAgICAgICAgICAgICAgICAgICAgdmlvbGF0ZWQgdGhvc2UgbGF3cywgdGhvc2UgZGVjcmVlcywgYW5kIHRoZSBwcmluY2lwbGVzIG9mIGp1c3RpY2U7IHRoZXJlZm9yZSBoZQogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgY29udmljdGVkIGJ5IGFuIGludGVsbGlnZW50IGp1cnkuIElmIGhlIGhhZCBjb21taXR0ZWQgbm8gb3RoZXIgY3JpbWUsCiAgICAgICAgICAgICAgICAgICAgdHdvIG9ubHkgb2YgaGlzIHRyYW5zZ3Jlc3Npb25zIGFyZSBzdWZmaWNpZW50IHRvIHB1dCBoaW0gdG8gZGVhdGgsIGZvciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBiZXRyYXllZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYXMgd2VsbCBhcyB0aGUgUGhvY2lhbnMKICAgICAgICAgICAgICAgICAgICB0byBQaGlsaXAuIDwvdHJhbnNsYXRpb24+"
translation['19.Narr.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IG5vIG1hbiBjb3VsZCBwb2ludCBvdXQgdHdvCiAgICAgICAgICAgICAgICAgICAgcGxhY2VzIGluIHRoZSB3aG9sZSB3b3JsZCBvZiBtb3JlIGltcG9ydGFuY2UgdG8gdGhlIGNvbW1vbndlYWx0aCB0aGFuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiBieSBsYW5kIGFuZCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiBieSBzZWE7IGFuZCBib3RoIG9mIHRoZW0gdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBpbmZhbW91c2x5IHNvbGQgYW5kIGRlbGl2ZXJlZCBpbnRvIHRoZSBoYW5kcyBvZiBQaGlsaXAuIFdoYXQgYW4gZW5vcm1vdXMKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlLCBhcGFydCBmcm9tIGFsbCB0aGUgcmVzdCwgaXMgdGhlIHN1cnJlbmRlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYW5kIHRoZSBUaHJhY2lhbiBvdXRwb3N0cywgSSBjb3VsZCBzaG93CiAgICAgICAgICAgICAgICAgICAgYnkgYSB0aG91c2FuZCByZWFzb25zOyBhbmQgaXQgd291bGQgYmUgZWFzeSB0byBwb2ludCB0byBtYW55IG1lbiB3aG8gZm9yIHN1Y2gKICAgICAgICAgICAgICAgICAgICBiZXRyYXlhbHMgaGF2ZSBiZWVuIHNlbnRlbmNlZCB0byBkZWF0aCBvciBtdWxjdGVkIGluIGxhcmdlIHN1bXMgb2YgbW9uZXkgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGNvdXJ0LOKAlEVyZ29waGlsdXMsIENlcGhpc29kb3R1cywgVGltb21hY2h1cywgYW5kLCBpbiBvbGQgdGltZXMsCiAgICAgICAgICAgICAgICAgICAgRXJnb2NsZXMsIERpb255c2l1cywgYW5kIG90aGVycywgb2Ygd2hvbSBJIG1heSBzYXkgdGhhdCBhbGwgb2YgdGhlbSB0b2dldGhlciBoYWQKICAgICAgICAgICAgICAgICAgICBpbmZsaWN0ZWQgZmV3ZXIgaW5qdXJpZXMgdXBvbiB0aGUgY29tbW9ud2VhbHRoIHRoYW4gdGhlIGRlZmVuZGFudC4gPC90cmFuc2xhdGlvbj4="
translation['19.Narr.181'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRob3NlIGRheXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSB3ZXJlIHN0aWxsIGNhcmVmdWwgdG8gYmUgb24KICAgICAgICAgICAgICAgICAgICB5b3VyIGd1YXJkIGFnYWluc3QgcGVyaWxzLCBhbmQgbm90IHNwYXJpbmcgb2YgcHJlY2F1dGlvbjsgbm93IHlvdSBvdmVybG9vawogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIHRoYXQgYXQgYW55IGdpdmVuIG1vbWVudCBkb2VzIG5vdCBkaXN0dXJiIHlvdSBvciBjYXVzZSBpbW1lZGlhdGUKICAgICAgICAgICAgICAgICAgICBhbm5veWFuY2UuIEFuZCB0aGVuIHlvdSBjb21lIGhlcmUgYW5kIHBhc3MgcmFuZG9tIHJlc29sdXRpb25zLOKAlHRoYXQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgc2hhbGwgc3dlYXIgZmlkZWxpdHkgdG8gQ2Vyc29ibGVwdGVzLOKAlHRoYXQgaGUgc2hhbGwgaGF2ZSBubwogICAgICAgICAgICAgICAgICAgIHNoYXJlIGluIEFtcGhpY3R5b25pYyBidXNpbmVzcyzigJR0aGF0IGhlIHNoYWxsIHJldmlzZSB0aGUgdGVybXMgb2YKICAgICAgICAgICAgICAgICAgICBwZWFjZS4gWWV0IGFsbCB5b3VyIHJlc29sdXRpb25zIHdvdWxkIGhhdmUgYmVlbiB1bm5lY2Vzc2FyeSwgaWYgb25seSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaGFkIGNob3NlbiB0byB0cmF2ZWwgYnkgc2VhIGFuZCB0byBkbyBoaXMgZHV0eS4gV2hhdCBtaWdodCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBzYXZlZCBieSBzYWlsaW5nLCBoZSBoYXMgbG9zdCBieSBpbnNpc3Rpbmcgb24gdHJhdmVsIGJ5IGxhbmQ7IGFuZCB3aGF0IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHNhdmVkIGJ5IHRlbGxpbmcgdGhlIHRydXRoLCBoZSBoYXMgbG9zdCBieSB0ZWxsaW5nIGxpZXMuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.182'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJDb25jbCIgdW5pdD0icGFydCIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IZSB3aWxsIHByZXNlbnRseSwgYXMgSSBhbSBpbmZvcm1lZCwgbWFrZSBpdCBhIGdyaWV2YW5jZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUsIGFuZCBoZSBhbG9uZSBvZiBhbGwgb3VyIGRlYmF0ZXJzLCBpcyB0byBiZSBjYWxsZWQgdG8gYWNjb3VudCBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoZXMuIEkgd2lsbCBzcGFyZSBoaW0gdGhlIHJldG9ydCB0aGF0IGFueSBtYW4gd2hvIHRha2VzIG1vbmV5IGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcyBtaWdodCByZWFzb25hYmx5IGJlIGJyb3VnaHQgdG8ganVzdGljZTsgYnV0IHRoZXJlIGlzIG9uZSBwb2ludCBvbiB3aGljaAogICAgICAgICAgICAgICAgICAgIEkgZG8gaW5zaXN0LiBJZiBBZXNjaGluZXMgdGFsa2VkIGxpa2UgYW4gaWRpb3QgYW5kIG1hZGUgYmx1bmRlcnMgYXMgYW4KICAgICAgICAgICAgICAgICAgICB1bm9mZmljaWFsIHBlcnNvbiwgZG8gbm90IGJlIGh5cGVyY3JpdGljYWwsIGxlYXZlIGhpbSBhbG9uZSwgbWFrZSBhbGxvd2FuY2VzLgogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBoZSBoYXMgcHVycG9zZWx5IGRlY2VpdmVkIHlvdSBmb3IgbW9uZXkgd2hpbGUgaG9sZGluZyBvZmZpY2UgYXMKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9yLCBkbyBub3QgbGV0IGhpbSBvZmYsIGRvIG5vdCBsaXN0ZW4gdG8gdGhlIHN1Z2dlc3Rpb24gdGhhdCBoZSBpcyBub3QKICAgICAgICAgICAgICAgICAgICB0byBiZSBwdXQgb24gaGlzIHRyaWFsIGZvciBtZXJlIHdvcmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.183'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhcmUgd2UgdG8gYnJpbmcgYW55IGFtYmFzc2Fkb3IgdG8ganVzdGljZSwgaWYgbm90IGZvciBoaXMgd29yZHM/CiAgICAgICAgICAgICAgICAgICAgQW1iYXNzYWRvcnMgaGF2ZSBjb250cm9sLCBub3Qgb3ZlciB3YXItc2hpcHMsIGFuZCBtaWxpdGFyeSBwb3NpdGlvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRyb29wcywgYW5kIGNpdGFkZWxzLOKAlHRoZXNlIGFyZSBuZXZlciBlbnRydXN0ZWQgdG8gdGhlbSzigJRidXQKICAgICAgICAgICAgICAgICAgICBvdmVyIHdvcmRzIGFuZCBvcHBvcnR1bml0aWVzLiBJZiBhbiBhbWJhc3NhZG9yIGhhcyBub3Qgd2FzdGVkIHRoZSBvcHBvcnR1bml0aWVzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0YXRlLCBoZSBpcyBubyB3cm9uZ2RvZXI7IGlmIGhlIGhhcyB3YXN0ZWQgdGhlbSwgaGUgaGFzIGRvbmUgd3JvbmcuIElmCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmRzIG9mIGhpcyByZXBvcnRzIGFyZSB0cnVlIGFuZCBwcm9maXRhYmxlIHdvcmRzLCBsZXQgaGltIGJlIGFjcXVpdHRlZDsgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBmYWxzZSwgdmVuYWwsIGFuZCBub3hpb3VzLCBsZXQgaGltIGJlIGNvbnZpY3RlZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.184'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODQiIHVuaXQ9InNlY3Rpb24iIC8+QSBtYW4gY2FuIGRvIG5vIGdyZWF0ZXIgd3JvbmcgdGhhbiBieSB0ZWxsaW5nIGxpZXMKICAgICAgICAgICAgICAgICAgICB0byBhIHBvcHVsYXIgYXNzZW1ibHk7IGZvciwgd2hlcmUgdGhlIHBvbGl0aWNhbCBzeXN0ZW0gaXMgYmFzZWQgdXBvbiBzcGVlY2hlcywKICAgICAgICAgICAgICAgICAgICBob3cgY2FuIGl0IGJlIHNhZmVseSBhZG1pbmlzdGVyZWQgaWYgdGhlIHNwZWVjaGVzIGFyZSBmYWxzZT8gSWYgaGUgYWN0dWFsbHkKICAgICAgICAgICAgICAgICAgICB0YWtlcyBicmliZXMgYW5kIHNwZWFrcyBpbiB0aGUgaW50ZXJlc3Qgb2Ygb3VyIGVuZW1pZXMsIHdpbGwgbm90IHlvdSBiZQogICAgICAgICAgICAgICAgICAgIGltcGVyaWxsZWQ/IEFnYWluLCB0byBmaWxjaCB5b3VyIG9wcG9ydHVuaXRpZXMgaXMgbm90IGFuIG9mZmVuY2UgZXF1aXZhbGVudCB0bwogICAgICAgICAgICAgICAgICAgIGZpbGNoaW5nIHRob3NlIG9mIGFuIG9saWdhcmNoeSBvciBhIG1vbmFyY2h5LCBidXQgZmFyIGdyZWF0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.185'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHRob3NlIHBvbGl0aWVzLCBJIHRha2UgaXQsIGV2ZXJ5dGhpbmcgaXMgZG9uZQogICAgICAgICAgICAgICAgICAgIHByb21wdGx5IGF0IHRoZSB3b3JkIG9mIGNvbW1hbmQ7IGJ1dCB3aXRoIHlvdSwgZmlyc3QgdGhlIENvdW5jaWwgbXVzdCBiZQogICAgICAgICAgICAgICAgICAgIGluZm9ybWVkLCBhbmQgbXVzdCBhZG9wdCBhIHByb3Zpc2lvbmFsIHJlc29sdXRpb24s4oCUYW5kIGV2ZW4gdGhhdCBub3QKICAgICAgICAgICAgICAgICAgICBhdCBhbnkgdGltZSwgYnV0IG9ubHkgYWZ0ZXIgd3JpdHRlbiBub3RpY2UgZ2l2ZW4gdG8gbWFyc2hhbHMgYW5kIGVtYmFzc2llczsgdGhlbgogICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsIG11c3QgY29udmVuZSBhbiBBc3NlbWJseSwgYnV0IG9ubHkgb24gYSBzdGF0dXRvcnkgZGF0ZS4gVGhlbiB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IGhvbmVzdCBkZWJhdGVycyBoYXZlIHRvIG1ha2UgZ29vZCB0aGVpciBhZHZhbnRhZ2UgYW5kIGFyZ3VlIGRvd24gYW4KICAgICAgICAgICAgICAgICAgICBpZ25vcmFudCBvciBkaXNob25lc3Qgb3Bwb3NpdGlvbjsgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.186'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGVuLCBhZnRlciBhbGwgdGhlc2UgcHJvY2VlZGluZ3MsIHdoZW4gYSBkZWNpc2lvbiBoYXMgYmVlbiBmb3JtZWQsIGFuZCBpdHMKICAgICAgICAgICAgICAgICAgICBwcm9wcmlldHkgZGVtb25zdHJhdGVkLCBmdXJ0aGVyIHRpbWUgbXVzdCBiZSBncmFudGVkIHRvIHRoZSBwb3ZlcnR5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBvcHVsYWNlIGZvciB0aGUgcHJvdmlzaW9uIG9mIHdoYXRldmVyIGlzIG5lZWRlZCwgdG8gZW5hYmxlIHRoZW0gdG8gZXhlY3V0ZSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbi4gU3VyZWx5IHRoZSBtYW4gd2hvLCB1bmRlciBhIGNvbnN0aXR1dGlvbiBsaWtlIG91cnMsIGRlc3Ryb3lzIHRoZQogICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXRpZXMgZm9yIHRoaXMgcHJvY2VkdXJlLCBoYXMgbm90IGRlc3Ryb3llZCBvcHBvcnR1bml0aWVzIG1lcmVseTsgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVseSByb2JiZWQgdXMgb2Ygb3VyIGNvbnRyb2wgb3ZlciBhZmZhaXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.187'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyB0aGVyZSBpcyBhbiBlYXN5IHBocmFzZSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkaXNwb3NhbCBvZiBldmVyeSBvbmUgd2hvIHdpc2hlcyB0byBkZWx1ZGUgeW91OiDigJxUaGUgZGlzdHVyYmVycyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb253ZWFsdGg7IHRoZSB0aHdhcnRlcnMgb2YgUGhpbGlwJ3MgcHVibGljIGJlbmVmYWN0aW9ucy7igJ0gSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IHNheSBhIHdvcmQgaW4gcmVwbHk7IEkgd2lsbCBvbmx5IHJlYWQgdG8geW91IFBoaWxpcCdzIGxldHRlcnMsIGFuZCByZW1pbmQKICAgICAgICAgICAgICAgICAgICB5b3Ugb2YgdGhlIHNldmVyYWwgb2NjYXNpb25zIG9mIHlvdXIgZGVjZXB0aW9uLCB0byBzaG93IGhvdyDigJx0aGUKICAgICAgICAgICAgICAgICAgICBCZW5lZmFjdG9y4oCdIGhhcyBmb3JmZWl0ZWQgYnkgaGlzIGJlZ3VpbGVtZW50cyB0aGF0IGZyaWdpZCBhbmQKICAgICAgICAgICAgICAgICAgICBuYXVzZWF0aW5nIHRpdGxlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlcnMgb2YgUGhpbGlwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVycyBvZiBQaGlsaXA8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVycyBvZiBQaGlsaXA8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.188'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFsdGhvdWdoIHNvCiAgICAgICAgICAgICAgICAgICAgbWFueSwgaW5kZWVkIGFsbCwgb2YgaGlzIGFjdHMgb24gZW1iYXNzeSB3ZXJlIHNvIGRpc2NyZWRpdGFibGUgYW5kIHVucGF0cmlvdGljLAogICAgICAgICAgICAgICAgICAgIGhlIGdvZXMgYWJvdXQgYXNraW5nOiDigJxBbmQgd2hhdCBhcmUgd2UgdG8gc2F5IG9mIERlbW9zdGhlbmVzLCB3aG8KICAgICAgICAgICAgICAgICAgICBkZW5vdW5jZXMgaGlzIG93biBjb2xsZWFndWVzP+KAnSBZZXMsIGluZGVlZDsgSSBkbyBhbmQgbXVzdCBkZW5vdW5jZQogICAgICAgICAgICAgICAgICAgIHRoZW0sIHdpbGxpbmdseSBvciB1bndpbGxpbmdseSwgaGF2aW5nIGJlZW4gdGhlIHZpY3RpbSBvZiB5b3VyIG1hY2hpbmF0aW9ucwogICAgICAgICAgICAgICAgICAgIHRocm91Z2hvdXQgdGhlIGV4cGVkaXRpb24sIGFuZCBiZWluZyBub3cgcmVkdWNlZCB0byB0aGUgYWx0ZXJuYXRpdmUgb2YgYXBwZWFyaW5nCiAgICAgICAgICAgICAgICAgICAgYXMgZWl0aGVyIHRoZSBhY2NvbXBsaWNlIG9yIHRoZSBhY2N1c2VyIG9mIHlvdXIgY3JpbWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.189'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODkiIHVuaXQ9InNlY3Rpb24iIC8+SSBkZWNsYXJlIEkgd2FzIG5vIGNvbGxlYWd1ZSBvZiB5b3VyczsgeW91cnMgd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzeSBvZiBmbGFncmFudCB3cm9uZywgbWluZSB3YXMgYW4gZW1iYXNzeSBvZiBsb3lhbCBzZXJ2aWNlLiBZb3VyIGNvbGxlYWd1ZQogICAgICAgICAgICAgICAgICAgIHdhcyBQaGlsb2NyYXRlcywgYW5kIHlvdSBhbmQgUGhyeW5vIHdlcmUgaGlzOyBmb3IgaXQgd2FzIHlvdSBhbmQgeW91ciBmcmllbmRzCiAgICAgICAgICAgICAgICAgICAgd2hvIGRpZCB0aGVzZSB0aGluZ3MgYW5kIHdobyBhcHByb3ZlZCBvZiB0aGVtLiBIYXJrIHRvIGhpcyBtZWxvZHJhbWF0aWMgd2hpbmU6CiAgICAgICAgICAgICAgICAgICAg4oCcV2hlcmUgaXMgdGhlIHNhbHQgb2YgZnJpZW5kc2hpcD8gd2hlcmUgaXMgdGhlIGdlbmlhbCBib2FyZD8gd2hlcmUgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgY3VwIG9mIGNvbW11bmlvbj/igJ0gYXMgaWYgZG9lcnMgb2YganVzdGljZSwgbm90IGRvZXJzIG9mIGluaXF1aXR5LAogICAgICAgICAgICAgICAgICAgIHdlcmUgdHJhaXRvcnMgdG8gdGhvc2Ugc3ltYm9scyEgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.190'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTAiIHVuaXQ9InNlY3Rpb24iIC8+SSBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgUHJlc2lkZW50czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZmlmdHkgUHJ5dGFuZXMsIGJlbG9uZ2luZyB0bwogICAgICAgICAgICAgICAgICAgICAgICBvbmUgdHJpYmUsIGFuZCBwZXJmb3JtaW5nIGZvciBvbmUgdGVudGggb2YgdGhlIHllYXIgdGhlIGZ1bmN0aW9ucyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQ291bmNpbCBvZiBGaXZlIEh1bmRyZWQuPC9ub3RlPiB1bml0ZSBpbiBhIHNhY3JpZmljaWFsIHNlcnZpY2UsIGRpbmUKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciwgYW5kIG1ha2UgbGliYXRpb24gdG9nZXRoZXI7IGJ1dCBpdCBkb2VzIG5vdCBmb2xsb3cgdGhhdCB0aGUgaG9uZXN0IG1lbgogICAgICAgICAgICAgICAgICAgIHRha2UgdGhlaXIgY3VlIGZyb20gdGhlIGtuYXZlczsgYXMgc29vbiBhcyB0aGV5IGRldGVjdCBvbmUgb2YgdGhlbXNlbHZlcyBpbgogICAgICAgICAgICAgICAgICAgIG1pc2NvbmR1Y3QsIHRoZXkgbGF5IGluZm9ybWF0aW9uIGJlZm9yZSB0aGUgQ291bmNpbCBhbmQgdGhlIEFzc2VtYmx5LiBJbiBqdXN0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgd2F5IHRoZSBDb3VuY2lsIGhvbGRzIGl0cyBzZXJ2aWNlIG9mIGluYXVndXJhdGlvbiBhbmQgaXRzIHNvY2lhbAogICAgICAgICAgICAgICAgICAgIGJhbnF1ZXQ7IHRoZSBjb21tYW5kZXJzIHVuaXRlIGluIHdvcnNoaXAgYW5kIGxpYmF0aW9uOyBhbmQgc28gb2YgYWxsLCBvciBuZWFybHkKICAgICAgICAgICAgICAgICAgICBhbGwsIHRoZSBwdWJsaWMgYXV0aG9yaXRpZXMuIERvIHRoZXkgZ2l2ZSBpbXB1bml0eSB0byBkZWxpbnF1ZW50IGNvbGxlYWd1ZXMgb24KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IG9mIHRoZXNlIG9ic2VydmFuY2VzPyBObywgaW5kZWVkISA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.191'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTEiIHVuaXQ9InNlY3Rpb24iIC8+PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDkxMjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwOTEyMCI+TGVvbjwvcGxhY2VOYW1lPiBkZW5vdW5jZWQgVGltYWdvcmFzLCBoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctYW1iYXNzYWRvciBmb3IgZm91ciB5ZWFyczsgRXVidWx1cyBoaXMgbWVzc21hdGVzLCBUaGFycmV4IGFuZCBTbWljeXRodXM7CiAgICAgICAgICAgICAgICAgICAgYW5kIGxvbmcgYWdvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+IGRlbm91bmNlZCBBZGVpbWFudHVzCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgc2VydmluZyB3aXRoIGhpbSBhcyBnZW5lcmFsLiBXaG8gd2VyZSB1bnRydWUgdG8gdGhlaXIgc2FsdCBhbmQgdG8gdGhlIGN1cAogICAgICAgICAgICAgICAgICAgIG9mIGZyaWVuZHNoaXAsIEFlc2NoaW5lcz8gVGhlIHRyYWl0b3JzLCB0aGUgZmFsc2UgYW1iYXNzYWRvcnMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBicmliZS10YWtlcnMsIG9yIHRoZWlyIGFjY3VzZXJzPyBUaGUgZXZpbC1kb2VycywgbGlrZSB5b3UsIGJyb2tlIGNvdmVuYW50IG5vdAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlaXIgZnJpZW5kcyBhbG9uZSBidXQgd2l0aCB0aGUgd2hvbGUgbmF0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.192'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHNob3cgeW91LCB0aGVuLCB0aGF0IHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIGFyZSB0aGUgYmFzZXN0IGFuZCBtb3N0IGRlcHJhdmVkIG9mIGFsbCBQaGlsaXAncyB2aXNpdG9ycywgcHJpdmF0ZSBhcyB3ZWxsIGFzCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNpYWws4oCUeWVzLCBvZiBhbGwgb2YgdGhlbSzigJRsZXQgbWUgdGVsbCB5b3UgYSB0cmlmbGluZwogICAgICAgICAgICAgICAgICAgIHN0b3J5IHRoYXQgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgZW1iYXNzeS4gQWZ0ZXIgUGhpbGlwIGhhZCB0YWtlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4sIGhlIHdhcyBob2xkaW5nIE9seW1waWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Ob3QgdGhlIGdyZWF0IE9seW1waWFuIEdhbWVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVsaXMiPkVsaXM8L3BsYWNlTmFtZT4sIGJ1dCBhIE1hY2Vkb25pYW4KICAgICAgICAgICAgICAgICAgICAgICAgZmVzdGl2YWwgaGVsZCBhdCBEaXVtLiBUaGUgZGF0ZSBpcyBwcm9iYWJseSB0aGUgc3ByaW5nIG9mIDxkYXRlIGF1dGhuYW1lPSItMzQ3IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzQ3Ij4zNDc8L2RhdGU+IEIuQy48L25vdGU+IGFuZCBoYWQgaW52aXRlZCBhbGwgc29ydHMgb2YgYXJ0aXN0cyB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZWxpZ2lvdXMgY2VsZWJyYXRpb24gYW5kIHRoZSBmZXN0aXZhbC4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+LCBidXQgYSBNYWNlZG9uaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGZlc3RpdmFsIGhlbGQgYXQgRGl1bS4gVGhlIGRhdGUgaXMgcHJvYmFibHkgdGhlIHNwcmluZyBvZiA8ZGF0ZSBhdXRobmFtZT0iLTM0NyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM0NyI+MzQ3PC9kYXRlPiBCLkMuPC90cmFuc2xhdGlvbj4="
translation['19.Concl.193'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTMiIHVuaXQ9InNlY3Rpb24iIC8+QXQKICAgICAgICAgICAgICAgICAgICB0aGUgZW50ZXJ0YWlubWVudCBhdCB3aGljaCBoZSBjcm93bmVkIHRoZSBzdWNjZXNzZnVsIGNvbXBldGl0b3JzLCBoZSBhc2tlZAogICAgICAgICAgICAgICAgICAgIFNhdHlydXMsIHRoZSBjb21lZGlhbiBvZiBvdXIgY2l0eSwgd2h5IGhlIHdhcyB0aGUgb25seSBndWVzdCB3aG8gaGFkIG5vdCBhc2tlZAogICAgICAgICAgICAgICAgICAgIGFueSBmYXZvcjsgaGFkIGhlIG9ic2VydmVkIGluIGhpbSBhbnkgaWxsaWJlcmFsaXR5IG9yIGRpc2NvdXJ0ZXN5IHRvd2FyZHMKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmPyBTYXR5cnVzLCBhcyB0aGUgc3RvcnkgZ29lcywgcmVwbGllZCB0aGF0IGhlIGRpZCBub3Qgd2FudCBhbnkgc3VjaCBnaWZ0CiAgICAgICAgICAgICAgICAgICAgYXMgdGhlIG90aGVycyB3ZXJlIGFza2luZzsgd2hhdCBoZSB3b3VsZCBsaWtlIHRvIGFzayB3YXMgYSBmYXZvciB3aGljaCBQaGlsaXAKICAgICAgICAgICAgICAgICAgICBjb3VsZCBncmFudCBxdWl0ZSBlYXNpbHksIGFuZCB5ZXQgaGUgZmVhcmVkIHRoYXQgaGlzIHJlcXVlc3Qgd291bGQgYmUKICAgICAgICAgICAgICAgICAgICB1bnN1Y2Nlc3NmdWwuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.194'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTQiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlwIGJhZGUgaGltIHNwZWFrIG91dCwKICAgICAgICAgICAgICAgICAgICBkZWNsYXJpbmcgd2l0aCB0aGUgZWFzeSBnZW5lcm9zaXR5IG9mIHlvdXRoIHRoYXQgdGhlcmUgd2FzIG5vdGhpbmcgaGUgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZG8gZm9yIGhpbS4gVGhlcmV1cG9uIFNhdHlydXMgdG9sZCBoaW0gdGhhdCBBcG9sbG9waGFuZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQeWRuYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUHlkbmEiPlB5ZG5hPC9wbGFjZU5hbWU+IGhhZCBiZWVuIGEgZnJpZW5kIG9mIGhpcywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBhZnRlciBoaXMgZGVhdGggYnkgYXNzYXNzaW5hdGlvbiBoaXMga2luc21lbiBpbiBhbGFybSBoYWQgc2VjcmV0bHkgcmVtb3ZlZCBoaXMKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlcnMsIHdobyB3ZXJlIHRoZW4gY2hpbGRyZW4sIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPi4gVGhlc2UgZ2lybHMgaGFkIGJlZW4gbWFkZSBjYXB0aXZlIHdoZW4gdGhlIHRvd24gd2FzCiAgICAgICAgICAgICAgICAgICAgdGFrZW4sIGFuZCB3ZXJlIG5vdyBpbiBQaGlsaXAncyBoYW5kcywgYW5kIG9mIG1hcnJpYWdlYWJsZSBhZ2UuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.195'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTUiIHVuaXQ9InNlY3Rpb24iIC8+4oCcSSBlYXJuZXN0bHkgYmVnIHlvdSzigJ0gaGUgd2VudAogICAgICAgICAgICAgICAgICAgIG9uLCDigJx0byBiZXN0b3cgdGhlbSBvbiBtZS4gQXQgdGhlIHNhbWUgdGltZSBJIHdpc2ggeW91IHRvIHVuZGVyc3RhbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IHNvcnQgb2YgZ2lmdCB5b3Ugd2lsbCBiZSBnaXZpbmcgbWUsIGlmIHlvdSBkbyBnaXZlIGl0LiBJdCB3aWxsIGJyaW5nIG1lIG5vCiAgICAgICAgICAgICAgICAgICAgZ2FpbiwgZm9yIEkgc2hhbGwgcHJvdmlkZSB0aGVtIHdpdGggZG93cmllcyBhbmQgZ2l2ZSB0aGVtIGluIG1hcnJpYWdlOyBhbmQgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIG5vdCBwZXJtaXQgdGhlbSB0byBzdWZmZXIgYW55IHRyZWF0bWVudCB1bndvcnRoeSBvZiBteXNlbGYgb3Igb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmYXRoZXIu4oCdIEl0IGlzIHNhaWQgdGhhdCwgd2hlbiB0aGUgb3RoZXIgZ3Vlc3RzIGhlYXJkIHRoaXMgc3BlZWNoLAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBzdWNoIGFuIG91dGJ1cnN0IG9mIGFwcGxhdXNlIGFuZCBhcHByb3ZhbCB0aGF0IFBoaWxpcCB3YXMgc3Ryb25nbHkKICAgICAgICAgICAgICAgICAgICBtb3ZlZCwgYW5kIGdyYW50ZWQgdGhlIGJvb24uIEFuZCB5ZXQgQXBvbGxvcGhhbmVzIHdhcyBvbmUgb2YgdGhlIG1lbiB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgc2xhaW4gUGhpbGlwJ3Mgb3duIGJyb3RoZXIgQWxleGFuZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.196'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBsZXQgdXMgY29tcGFyZSB0aGUgYmFucXVldCBvZiBTYXR5cnVzCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhbm90aGVyIGVudGVydGFpbm1lbnQgd2hpY2ggdGhlc2UgbWVuIGF0dGVuZGVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPjsgYW5kIHlvdSBzaGFsbCBzZWUgd2hldGhlciB0aGVyZSBpcwogICAgICAgICAgICAgICAgICAgIGFueSBzb3J0IG9mIHJlc2VtYmxhbmNlLiBUaGVzZSBtZW4gaGFkIGJlZW4gaW52aXRlZCB0byB0aGUgaG91c2Ugb2YgWGVub3Bocm9uLCBhCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIFBoYWVkaW11cywgd2hvIHdhcyBvbmUgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzLCBhbmQgb2ZmIHRoZXkgd2VudDsgYnV0IEkKICAgICAgICAgICAgICAgICAgICBkZWNsaW5lZCB0byBnby4gV2hlbiB0aGUgZHJpbmtpbmcgYmVnYW4sIFhlbm9waHJvbiBpbnRyb2R1Y2VkIGFuIE9seW50aGlhbgogICAgICAgICAgICAgICAgICAgIHdvbWFuLOKAlGEgaGFuZHNvbWUsIGJ1dCBhIGZyZWVib3JuIGFuZCwgYXMgdGhlIGV2ZW50IHByb3ZlZCwgYSBtb2Rlc3QKICAgICAgICAgICAgICAgICAgICBnaXJsLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.197'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTciIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIEkgYmVsaWV2ZSwgdGhleSBvbmx5IHRyaWVkIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBoZXIgZHJpbmsgcXVpZXRseSBhbmQgZWF0IGRlc3NlcnQ7IHNvIElhdHJvY2xlcyB0b2xkIG1lIHRoZSBmb2xsb3dpbmcgZGF5LgogICAgICAgICAgICAgICAgICAgIEJ1dCBhcyB0aGUgY2Fyb3VzZSB3ZW50IG9uLCBhbmQgdGhleSBiZWNhbWUgaGVhdGVkLCB0aGV5IG9yZGVyZWQgaGVyIHRvIHNpdCBkb3duCiAgICAgICAgICAgICAgICAgICAgYW5kIGdpdmUgdGhlbSBhIHNvbmcuIFRoZSBwb29yIGdpcmwgd2FzIGJld2lsZGVyZWQsIGZvciBzaGUgZGlkIG5vdCB3aXNoLCBhbmQKICAgICAgICAgICAgICAgICAgICBzaGUgZGlkIG5vdCBrbm93IGhvdywgdG8gc2luZy4gVGhlbiBBZXNjaGluZXMgYW5kIFBocnlubyBkZWNsYXJlZCB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGludG9sZXJhYmxlIGltcGVydGluZW5jZSBmb3IgYSBjYXB0aXZlLOKAlGFuZCBvbmUgb2YgdGhvc2UgdW5nb2RseSwKICAgICAgICAgICAgICAgICAgICBwZXJuaWNpb3VzIE9seW50aGlhbnMgdG9vLOKAlHRvIGdpdmUgaGVyc2VsZiBzdWNoIGFpcnMuIOKAnENhbGwKICAgICAgICAgICAgICAgICAgICBhIHNlcnZhbnQs4oCdIHRoZXkgY3JpZWQ7IOKAnGJyaW5nIGEgd2hpcCwgc29tZWJvZHku4oCdCiAgICAgICAgICAgICAgICAgICAgSW4gY2FtZSBhIGZsdW5rZXkgd2l0aCBhIGhvcnNld2hpcCwgYW5k4oCUSSBzdXBwb3NlIHRoZXkgd2VyZSB0aXBzeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaXQgZGlkIG5vdCB0YWtlIG11Y2ggdG8gaXJyaXRhdGUgdGhlbSx3aGVuIHNoZSBzYWlkIHNvbWV0aGluZyBhbmQgYmVnYW4gdG8gY3J5LAogICAgICAgICAgICAgICAgICAgIGhlIHRvcmUgb2ZmIGhlciBkcmVzcyBhbmQgZ2F2ZSBoZXIgYSBudW1iZXIgb2YgbGFzaGVzIG9uIHRoZSBiYWNrLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.198'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTgiIHVuaXQ9InNlY3Rpb24iIC8+TWFkZGVuZWQgYnkgdGhlc2UgaW5kaWduaXRpZXMsIHNoZSBqdW1wZWQgdG8gaGVyCiAgICAgICAgICAgICAgICAgICAgZmVldCwgdXBzZXQgdGhlIHRhYmxlLCBhbmQgZmVsbCBhdCB0aGUga25lZXMgb2YgSWF0cm9jbGVzLiBJZiBoZSBoYWQgbm90IHJlc2N1ZWQKICAgICAgICAgICAgICAgICAgICBoZXIsIHNoZSB3b3VsZCBoYXZlIHBlcmlzaGVkLCB0aGUgdmljdGltIG9mIGEgZHJ1bmtlbiBvcmd5LCBmb3IgdGhlIGRydW5rZW5uZXNzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBibGFja2d1YXJkIGlzIHNvbWV0aGluZyB0ZXJyaWJsZS4gVGhlIHN0b3J5IG9mIHRoaXMgZ2lybCB3YXMgdG9sZCBldmVuCiAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjczNSI+QXJjYWRpYTwvcGxhY2VOYW1lPiwgYXQgYSBtZWV0aW5nIG9mIHRoZSBUZW4KICAgICAgICAgICAgICAgICAgICAgICAgVGhvdXNhbmQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEFzc2VtYmx5IG9mIHRoZSBBcmNhZGlhbgogICAgICAgICAgICAgICAgICAgICAgICBDb25mZWRlcmFjeSwgbWVldGluZyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4uPC9ub3RlPjsgaXQgd2FzIHJlbGF0ZWQgYnkgRGlvcGhhbnR1cyBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGluIGEgcmVwb3J0IHdoaWNoIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGNvbXBlbCBoaW0gdG8gcmVwZWF0IGluIGV2aWRlbmNlOyBhbmQgaXQgd2FzIGNvbW1vbiB0YWxrIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+IGFuZCBldmVyeXdoZXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.199'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldpdGggYWxsIHRoaXMgb24gaGlzCiAgICAgICAgICAgICAgICAgICAgY29uc2NpZW5jZSB0aGUgdW5jbGVhbiBzY291bmRyZWwgd2lsbCBkYXJlIHRvIGxvb2sgeW91IGluIHRoZSBmYWNlLCBhbmQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgbG9uZyBoZSB3aWxsIGJlIGRlY2xhaW1pbmcgaW4gc29ub3JvdXMgYWNjZW50cyBhYm91dCBoaXMgYmxhbWVsZXNzIGxpZmUuIEl0CiAgICAgICAgICAgICAgICAgICAgbWFrZXMgbWUgY2hva2Ugd2l0aCByYWdlLiBBcyBpZiB0aGUganVyeSBkaWQgbm90IGtub3cgYWxsIGFib3V0IHlvdTogZmlyc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFjb2x5dGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPnRoZSBhY29seXRlLCBldGMuOiBzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNTkiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjU5IGZmLjwvYmlibD48L25vdGU+IHJlYWRpbmcgdGhlIHNlcnZpY2UtYm9va3MKICAgICAgICAgICAgICAgICAgICB3aGlsZSB5b3VyIG1vdGhlciBwZXJmb3JtZWQgaGVyIGhvY3VzLXBvY3VzLCByZWVsaW5nIGFuZCB0dW1ibGluZywgY2hpbGQgYXMgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSwgd2l0aCBiYWNjaGFuYWxzIGFuZCB0aXBzeSB3b3JzaGlwcGVyczsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNTkiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjU5IGZmLjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.200'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDAiIHVuaXQ9InNlY3Rpb24iIC8+dGhlbiB0aGUganVuaW9yIGNsZXJrLCBkb2luZyB0aGUgZGlydHkgd29yayBvZiBwdWJsaWMgb2ZmaWNlcyBmb3IgYSBmZXcKICAgICAgICAgICAgICAgICAgICBzaGlsbGluZ3MgYSBtb250aDogYW5kIGF0IGxhc3QsIG5vdCBzbyBsb25nIGFnbywgdGhlIHBhcmFzaXRlIG9mIHRoZSBncmVlbnJvb21zLAogICAgICAgICAgICAgICAgICAgIGVraW5nIG91dCBieSBzcG9uZ2luZyB3aGF0IHlvdSBlYXJuZWQgYXMgYSBwbGF5ZXIgb2YgdHJ1bXBlcnkgcGFydHMhIFdoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlmZSB5b3Ugd2lsbCBjbGFpbSwgYW5kIHdoZXJlIGhhdmUgeW91IGxpdmVkIGl0LCB3aGVuIHN1Y2ggaXMgdG9vIGNsZWFybHkgdGhlCiAgICAgICAgICAgICAgICAgICAgc29ydCBvZiBsaWZlIHlvdSByZWFsbHkgaGF2ZSBsaXZlZD8gQW5kIHRoZW4gdGhlIGFzc3VyYW5jZSBvZiB0aGUgbWFuISBCcmluZ2luZwogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgbWFuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRpbWFyY2h1czsgc2VlIEludHJvZC4gcC4KICAgICAgICAgICAgICAgICAgICAgICAgMjM0Ljwvbm90ZT4gYmVmb3JlIHRoaXMgY291cnQgb24gYSBjaGFyZ2Ugb2YgdW5uYXR1cmFsIGNyaW1lISBIb3dldmVyLCBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBsZXQgdGhhdCBnbyBmb3IgdGhlIHByZXNlbnQuIEZpcnN0IHJlYWQgdGhlc2UgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.201'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGhlaW5vdXMgY3JpbWVzIGFnYWluc3QgdGhlIGNvbW1vbndlYWx0aCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBoZSBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIHByb3ZlZCBndWlsdHkuIE5vIGVsZW1lbnQgb2YgYmFzZW5lc3MgaXMgbGFja2luZy4gQnJpYmUtdGFrZXIsIHN5Y29waGFudCwgZ3VpbHR5CiAgICAgICAgICAgICAgICAgICAgdW5kZXIgdGhlIGN1cnNlLCBhIGxpYXIsIGEgdHJhaXRvciB0byBoaXMgZnJpZW5kcyzigJRoZXJlIGFyZSBmbGFncmFudAogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgaW5kZWVkISBZZXQgaGUgd2lsbCBub3QgZGVmZW5kIGhpbXNlbGYgYWdhaW5zdCBhbnkgb25lIG9mIHRoZW07IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIG5vIGhvbmVzdCBhbmQgc3RyYWlnaHRmb3J3YXJkIGRlZmVuY2UgdG8gb2ZmZXIuIEFzIGZvciB0aGUgdG9waWNzIG9uIHdoaWNoLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgYW0gaW5mb3JtZWQsIGhlIGludGVuZHMgdG8gZHdlbGwsIHRoZXkgYm9yZGVyIG9uIGluc2FuaXR5LOKAlHRob3VnaCwKICAgICAgICAgICAgICAgICAgICBwZXJoYXBzLCBhIG1hbiBkZXZvaWQgb2YgYW55IGhvbmVzdCBwbGVhIGNhbm5vdCBoZWxwIHJlc29ydGluZyB0byBhbGwgbWFubmVyIG9mCiAgICAgICAgICAgICAgICAgICAgc2hpZnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.202'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkgaGVhciB0aGF0IGhlIHdpbGwgdGVsbCB5b3UgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgcGFydGljaXBhdGVkIGluIGFsbCB0aGUgYWN0cyBJIGFtIGRlbm91bmNpbmcsIHRoYXQgSSBhcHByb3ZlZCBvZiB0aGVtLCBhbmQKICAgICAgICAgICAgICAgICAgICBjby1vcGVyYXRlZCB3aXRoIGhpbSwgYW5kIG5vdyBoYXZlIHN1ZGRlbmx5IGNoYW5nZWQgbXkgbWluZCBhbmQgYmVjb21lIGhpcwogICAgICAgICAgICAgICAgICAgIGFjY3VzZXIuIFRoYXQgaXMgbm8gaG9uZXN0IGFuZCBkZWNlbnQgZGVmZW5jZSBhZ2FpbnN0IHNwZWNpZmljIGNoYXJnZXM7IGl0IGlzLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIGFuIGFjY3VzYXRpb24gYWdhaW5zdCBtZTsgZm9yIGlmIEkgYWN0ZWQgYXMgaGUgc2F5cywgSSBhbSBhIHdvcnRobGVzcwogICAgICAgICAgICAgICAgICAgIHBlcnNvbjsgYnV0IHRoYXQgaXMgZmFyIGZyb20gbWFraW5nIGhpcyBhY3Rpb25zIGEgd2hpdCBiZXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.203'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaXQgaXMgaW5jdW1iZW50IG9uIG1lLCBJIHN1cHBvc2UsIGZpcnN0LCB0bwogICAgICAgICAgICAgICAgICAgIHNhdGlzZnkgeW91IHRoYXQgdGhlIGFsbGVnYXRpb24sIGlmIGhlIG1ha2VzIGl0LCB3aWxsIGJlIGZhbHNlLCBhbmQgc2Vjb25kbHksIHRvCiAgICAgICAgICAgICAgICAgICAgc2hvdyB5b3Ugd2hhdCBpcyBhbiBob25lc3QgZGVmZW5jZS4gTm93IGl0IGlzIGFuIGhvbmVzdCBhbmQgc3RyYWlnaHRmb3J3YXJkCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSB0byBwcm92ZSBlaXRoZXIgdGhhdCB0aGUgYWN0cyBhbGxlZ2VkIHdlcmUgbmV2ZXIgY29tbWl0dGVkLCBvciB0aGF0LCBpZgogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRlZCwgdGhleSB3ZXJlIGZvciB0aGUgYWR2YW50YWdlIG9mIHRoZSBzdGF0ZS4gQnV0IGhlIGNhbm5vdCBtYWtlIGdvb2QKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgb2YgdGhlc2UgcG9zaXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.204'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY2Fubm90IGNsYWltIGFzCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlcyB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIFBob2NpYW5zLCBvciBQaGlsaXAncyBvY2N1cGF0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgb3IgdGhlIGFnZ3JhbmRpemVtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgb3IgdGhlIGludmFzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgb3IgdGhlIGRlc2lnbnMgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4sIG9yIHRoZSB1bnJhdGlmaWVkIHBlYWNlOwogICAgICAgICAgICAgICAgICAgIGZvciBoZSByZXBvcnRlZCBoaW1zZWxmIHRoYXQgZXhhY3RseSB0aGUgb3Bwb3NpdGUgd2FzIGdvaW5nIHRvIGhhcHBlbiBhbmQgd291bGQKICAgICAgICAgICAgICAgICAgICBiZSB0byB5b3VyIGFkdmFudGFnZS4gTmVpdGhlciBjYW4gaGUgY29udmluY2UgeW91LCBhZ2FpbnN0IHRoZSBldmlkZW5jZSBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3duIGV5ZXMgYW5kIHlvdXIgb3duIGtub3dsZWRnZSwgdGhhdCB0aGVzZSBkaXNhc3RlcnMgYXJlIGZhYnVsb3VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.205'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDUiIHVuaXQ9InNlY3Rpb24iIC8+TXkgcmVtYWluaW5nIGR1dHkgaXMgdG8gcHJvdmUgdGhhdCBJIGhhZCBubwogICAgICAgICAgICAgICAgICAgIHBhcnRuZXJzaGlwIHdpdGggdGhlc2UgbWVuIGluIGFueSBvZiB0aGVpciBkb2luZ3MuIElzIGl0IHlvdXIgd2lzaCB0aGF0IEkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgcHV0IGFzaWRlIHRoZSByZXN0IG9mIHRoZSBzdG9yeSzigJRob3cgSSBzcG9rZSBhZ2FpbnN0IHRoZW0gaW4gQXNzZW1ibHksCiAgICAgICAgICAgICAgICAgICAgaG93IEkgZmVsbCBvdXQgd2l0aCB0aGVtIG9uIHRoZSBqb3VybmV5LCBob3cgZnJvbSBmaXJzdCB0byBsYXN0IEkgcGVyc2lzdGVudGx5CiAgICAgICAgICAgICAgICAgICAgb3Bwb3NlZCB0aGVtLOKAlGFuZCBzaG91bGQgcHJvZHVjZSB0aGVzZSBtZW4gdGhlbXNlbHZlcyBhcyBteSB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICB0byB0ZXN0aWZ5IHRoYXQgbXkgY29uZHVjdCBhbmQgdGhlaXJzIGhhcyBiZWVuIHV0dGVybHkgYXQgdmFyaWFuY2UsIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkIG1vbmV5IHRvIHRod2FydCB5b3UsIGFuZCB0aGF0IEkgcmVmdXNlZCBpdD8gVGhlbiBvYnNlcnZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.206'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldob20gd291bGQgeW91IGNhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBkZXRlc3RhYmxlIHBlcnNvbiBpbiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdGhlIG1vc3Qgc3dvbGxlbiB3aXRoIGltcHVkZW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBzdXBlcmNpbGlvdXNuZXNzPyBObyBvbmUsIEkgYW0gc3VyZSwgd291bGQgbmFtZSwgZXZlbiBieSBhIHNsaXAgb2YgdGhlIHRvbmd1ZSwKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgYnV0IFBoaWxvY3JhdGVzLiBXaG8gaXMgdGhlIG1vc3QgdmVoZW1lbnQgc3BlYWtlciwgdGhlIG1hbiB3aG8gY2FuCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzcyBoaW1zZWxmIG1vc3QgZW1waGF0aWNhbGx5IHdpdGggdGhlIGFpZCBvZiBoaXMgYmlnIHZvaWNlPyBVbmRvdWJ0ZWRseQogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcy4gV2hvbSBkbyB0aGVzZSBtZW4gY2FsbCB0aW1pZCBhbmQgZmFpbnQtaGVhcnRlZCwgb3IsIGFzIEkgc2hvdWxkIHNheSwKICAgICAgICAgICAgICAgICAgICBkaWZmaWRlbnQsIGluIGFkZHJlc3NpbmcgYSBjcm93ZD8gTWU7IGZvciBJIG5ldmVyIHdvcnJpZWQgeW91OyBJIGhhdmUgbmV2ZXIKICAgICAgICAgICAgICAgICAgICB0cmllZCB0byBkcmFnb29uIHlvdSBhZ2FpbnN0IHlvdXIgaW5jbGluYXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.207'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDciIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgYXQgZXZlcnkgQXNzZW1ibHksIHdoZW5ldmVyIHRoZXJlIGlzIGFueSBkaXNjdXNzaW9uIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBidXNpbmVzcywgeW91IGhlYXIgbWUgZGVub3VuY2luZyBhbmQgaW5jcmltaW5hdGluZyB0aGVzZSBtZW4sIGFuZCBkZWNsYXJpbmcKICAgICAgICAgICAgICAgICAgICByb3VuZGx5IHRoYXQgdGhleSBoYXZlIHRha2VuIGJyaWJlcyBhbmQgbWFkZSB0cmFmZmljIG9mIGFsbCB0aGUgaW50ZXJlc3RzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbndlYWx0aDsgYW5kIG5vIG9uZSBvZiB0aGVtIGV2ZXIgY29udHJhZGljdHMgbWUsIG9yIG9wZW5zIGhpcyBtb3V0aCwgb3IKICAgICAgICAgICAgICAgICAgICBsZXRzIGhpbXNlbGYgYmUgc2Vlbi4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.208'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDgiIHVuaXQ9InNlY3Rpb24iIC8+SG93IGNvbWVzIGl0IHRoZW4gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGltcHVkZW50IG1lbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBsb3VkZXN0IHNwZWFrZXJzLCBhcmUgb3ZlcmJvcm5lIGJ5IG1lLCB0aGUgbmVydm91cyBtYW4sIHdobyBjYW4gc3BlYWsgbm8KICAgICAgICAgICAgICAgICAgICBsb3VkZXIgdGhhbiBhbm90aGVyPyBCZWNhdXNlIHRydXRoIGlzIHN0cm9uZywgYW5kIGNvbnNjaW91c25lc3Mgb2YgY29ycnVwdGlvbgogICAgICAgICAgICAgICAgICAgIHdlYWsuIENvbnNjaWVuY2UgcGFyYWx5c2VzIHRoZWlyIGF1ZGFjaXR5OyBjb25zY2llbmNlIGNyaXBwbGVzIHRoZWlyIHRvbmd1ZXMsCiAgICAgICAgICAgICAgICAgICAgY2xvc2VzIHRoZWlyIGxpcHMsIHN0aWZsZXMgdGhlbSwgcHV0cyB0aGVtIHRvIHNpbGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.209'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDkiIHVuaXQ9InNlY3Rpb24iIC8+WW91IHJlbWVtYmVyIHRoZSBtb3N0IHJlY2VudCBvY2Nhc2lvbiwgYXQgUGVpcmFldXMgb25seSB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBkYXksIHdoZW4geW91IHJlZnVzZWQgdG8gYXBwb2ludCBBZXNjaGluZXMgdG8gYW4gZW1iYXNzeSwgaG93IGhlIGJlbGxvd2VkIGF0IG1lOgogICAgICAgICAgICAgICAgICAgIOKAnEkgd2lsbCBpbXBlYWNoIHlvdSzigJRJIHdpbGwgaW5kaWN0IHlvdSzigJRhaGEhCiAgICAgICAgICAgICAgICAgICAgICAgIGFoYSHigJ08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IEluIHRoaXMgZXhjbGFtYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgcGVyaGFwcyBpbWl0YXRlcyB0aGUgbWVsb2RyYW1hdGljIHN0eWxlIGFuZCBpbnRvbmF0aW9uIG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkuIEFlc2NoaW5lcyBpcyBsaWtlIG91ciBzdGFnZSB2aWxsYWluLCBjcnlpbmcsIOKAnEFoYSEgQQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lIHdpbGwgY29tZS7igJ08L25vdGU+IEFuZCB5ZXQgYSB0aHJlYXQgb2YgaW1wZWFjaG1lbnQgaW52b2x2ZXMKICAgICAgICAgICAgICAgICAgICBlbmRsZXNzIHNwZWVjaGVzIGFuZCBsaXRpZ2F0aW9uOyBidXQgaGVyZSBhcmUganVzdCB0d28gb3IgdGhyZWUgc2ltcGxlIHdvcmRzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIHNsYXZlIGJvdWdodCB5ZXN0ZXJkYXkgY291bGQgZGVsaXZlcjog4oCcTWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGVyZSBpcyBhIHN0cmFuZ2UgdGhpbmchIFRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlcyBtZSBvZiBvZmZlbmNlcyBpbiB3aGljaCBoZSBoaW1zZWxmIHRvb2sgcGFydC4gSGUgc2F5cyB0aGF0IEkgaGF2ZSB0YWtlbgogICAgICAgICAgICAgICAgICAgIGJyaWJlcywgd2hlbiBoZSB0b29rIHRoZW0sIG9yIHNoYXJlZCB0aGVtLCBoaW1zZWxmLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.210'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTAiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbmV2ZXIgc3Bva2UsIGhlIG5ldmVyIHV0dGVyZWQgYSB3b3JkIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBzcGVlY2g7IG5vbmUgb2YgeW91IGhlYXJkIGl0OyBoZSBvbmx5IHZlbnRlZCBpZGxlIG1lbmFjZXMuIFRoZSByZWFzb24gaXMgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBjb25zY2lvdXMgb2YgZ3VpbHQ7IGhlIGNvd2VyZWQgbGlrZSBhIHNsYXZlIGJlZm9yZSB0aG9zZSB3b3JkczsgaGlzIHRob3VnaHRzCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBhcHByb2FjaCB0aGVtIGJ1dCByZWNvaWxlZCBmcm9tIHRoZW0sIGFycmVzdGVkIGJ5IGhpcyBldmlsIGNvbnNjaWVuY2UuCiAgICAgICAgICAgICAgICAgICAgTWVyZSB2YWd1ZSBpbnZlY3RpdmUgYW5kIGFidXNlIHRoZXJlIHdhcyBubyBvbmUgdG8gc3RvcC4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.211'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBub3cgY29tZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Ryb25nZXN0IHBvc3NpYmxlIHBvaW504oCUbm90IGEgbWF0dGVyIG9mIGFzc2VydGlvbiBidXQgb2YgZmFjdC4gSQogICAgICAgICAgICAgICAgICAgIHdpc2hlZCB0byBkbyB0aGUgaG9uZXN0IHRoaW5nLCBhbmQgdG8gZ2l2ZSBhbiBhY2NvdW50IG9mIG15c2VsZiB0d2ljZSwgYmVjYXVzZSBJCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYXBwb2ludGVkIGFtYmFzc2Fkb3IgdHdpY2U7IGJ1dCBBZXNjaGluZXMgYXBwcm9hY2hlZCB0aGUgQ291cnQgb2YKICAgICAgICAgICAgICAgICAgICBTY3J1dGlueSwgdGFraW5nIHdpdGggaGltIGEgY3Jvd2Qgb2Ygd2l0bmVzc2VzLCBhbmQgZm9yYmFkZSB0aGVtIHRvIHN1bW1vbiBtZSwKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZ3JvdW5kIHRoYXQgSSBoYWQgYWxyZWFkeSBzdWJtaXR0ZWQgdG8gc2NydXRpbnksIGFuZCB3YXMgbm8gbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgbGlhYmxlLiBXaGF0IHdhcyB0aGUgcmVhbCBtZWFuaW5nIG9mIHRoaXMgbHVkaWNyb3VzIHByb2NlZWRpbmc/IEhhdmluZyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQgaGlzIGFjY291bnQgb2YgdGhlIGVhcmxpZXIgZW1iYXNzeSwgd2l0aCB3aGljaCBub2JvZHkgZm91bmQgZmF1bHQsIGhlCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCB3aXNoIHRvIGNvbWUgaW50byBjb3VydCBpbiByZXNwZWN0IG9mIHRoZSBlbWJhc3N5IGZvciB3aGljaCBoZSBpcyBub3cKICAgICAgICAgICAgICAgICAgICB1bmRlciBleGFtaW5hdGlvbjsgYW5kIHRoYXQgaXMgdGhlIGVtYmFzc3kgdGhhdCBpbmNsdWRlcyBhbGwgaGlzIG1pc2RlZWRzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.212'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCBpZiBJIGNhbWUgaW50byBjb3VydCB0d2ljZSwgaGUgY291bGQKICAgICAgICAgICAgICAgICAgICBub3QgYXZvaWQgYSBzZWNvbmQgYXBwZWFyYW5jZSwgYW5kIHRoZXJlZm9yZSBoZSB3b3VsZCBub3QgbGV0IG1lIGJlIHN1bW1vbmVkLgogICAgICAgICAgICAgICAgICAgIFlldCB0aGF0IGFjdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcHJvdmVzCiAgICAgICAgICAgICAgICAgICAgdHdvIHByb3Bvc2l0aW9uczogZmlyc3QsIHRoYXQgQWVzY2hpbmVzIGhhcyBwcm9ub3VuY2VkIGhpcyBvd24gY29uZGVtbmF0aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgeW91IGNhbm5vdCBjb25zY2llbnRpb3VzbHkgYWNxdWl0IGhpbSB0b2RheTsgYW5kIHNlY29uZGx5LCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgaGF2ZSBhIHRydXRoZnVsIHdvcmQgdG8gc2F5IGFib3V0IG1lLCBvdGhlcndpc2UgaGUgd291bGQgaGF2ZSBzcG9rZW4KICAgICAgICAgICAgICAgICAgICBvdXQgYW5kIGRlbm91bmNlZCBtZSB0aGVuLCBpbnN0ZWFkIG9mIHRyeWluZyB0byBibG9jayBteSBzdW1tb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.213'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoZSB0cnV0aCBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHN0YXRlbWVudHMsIHBsZWFzZSBjYWxsIHRoZSB3aXRuZXNzZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlcmUgYW5kIGVsc2V3aGVyZSDvvIhlLmcuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjMzIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDE5LjIzMzwvYmlibD7vvIkgRGVtb3N0aGVuZXMgaGFzIHRpbWUgdG8gaW5zZXJ0IGEgZmV3IHJlbWFya3Mgd2hpbGUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHdpdG5lc3NlcyBhcmUgYmVpbmcgY29sbGVjdGVkIGFuZCBiZWZvcmUgdGhlaXIgZGVwb3NpdGlvbnMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjMzIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDE5LjIzMzwvYmlibD7vvIkgRGVtb3N0aGVuZXMgaGFzIHRpbWUgdG8gaW5zZXJ0IGEgZmV3IHJlbWFya3Mgd2hpbGUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHdpdG5lc3NlcyBhcmUgYmVpbmcgY29sbGVjdGVkIGFuZCBiZWZvcmUgdGhlaXIgZGVwb3NpdGlvbnMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmLCBob3dldmVyLCBoZSBzYXlzIHNjdXJyaWxvdXMgdGhpbmdzIGFib3V0IG1lLAogICAgICAgICAgICAgICAgICAgIG5vdCBwZXJ0aW5lbnQgdG8gdGhlIHF1ZXN0aW9uIG9mIHRoZSBlbWJhc3N5LCB0aGVyZSBhcmUgbWFueSByZWFzb25zIHdoeSB5b3UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGxpc3Rlbi4gSSBhbSBub3Qgb24gbXkgdHJpYWwgdG9kYXksIGFuZCBJIHNoYWxsIGhhdmUgbm8gc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgICAgIG9wcG9ydHVuaXR5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPm5vIHNlY29uZCBvcHBvcnR1bml0eTogbGl0LgogICAgICAgICAgICAgICAgICAgICAgICDigJxubyBvbmUgd2lsbCBoZXJlYWZ0ZXIgcG91ciB3YXRlciBmb3IgbWUs4oCdIGkuZS4gaW50byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2xlcHN5ZHJhIFs1N10uPC9ub3RlPiBvZiBzcGVha2luZy4gSXQgd2lsbCBvbmx5IG1lYW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGlzIGRlc3RpdHV0ZSBvZiBob25lc3QgYXJndW1lbnRzLiBObyBjdWxwcml0IHdvdWxkIGRlbGliZXJhdGVseSBjaG9vc2UgdG8KICAgICAgICAgICAgICAgICAgICBwcmVmZXIgYWNjdXNhdGlvbnMsIGlmIGhlIGhhZCBhbnkgZGVmZW5jZSB0byBvZmZlci4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.214'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTQiIHVuaXQ9InNlY3Rpb24iIC8+T3IgYWdhaW4sIGxvb2sgYXQgaXQgaW4gdGhpcyBsaWdodCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LiBTdXBwb3NlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIHdlcmUgb24gdHJpYWwsIHdpdGggQWVzY2hpbmVzIGZvciBteSBhY2N1c2VyLCBhbmQgUGhpbGlwIGZvciBteSBqdWRnZSwKICAgICAgICAgICAgICAgICAgICBhbmQgc3VwcG9zZSB0aGF0LCBiZWluZyB1bmFibGUgdG8gZGVueSBteSBndWlsdCwgSSB3ZXJlIHRvIHZpbGlmeSBBZXNjaGluZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbXVkIGF0IGhpbTsgZG8geW91IG5vdCB0aGluayB0aGF0IHRoYXQgaXMganVzdCB3aGF0IHdvdWxkIG1vdmUgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBpbmRpZ25hdGlvbiwgaGlzIG93biBiZW5lZmFjdG9ycyBjYWx1bW5pYXRlZCBiZWZvcmUgaGlzIG93biB0cmlidW5hbD8gRG8gbm90IGJlCiAgICAgICAgICAgICAgICAgICAgbGVzcyByaWdvcm91cyB0aGFuIFBoaWxpcCwgYnV0IGNvbXBlbCBoaW0gdG8gYWRkcmVzcyBoaXMgZGVmZW5jZSB0byB0aGUgcmVhbAogICAgICAgICAgICAgICAgICAgIGlzc3VlcyBvZiB0aGlzIGNvbnRyb3ZlcnN5LiBOb3cgcmVhZCB0aGUgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.215'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRodXMgaW4gbXkKICAgICAgICAgICAgICAgICAgICBjb25zY2lvdXNuZXNzIG9mIGlubm9jZW5jZSBJIHRob3VnaHQgaXQgbXkgZHV0eSB0byByZW5kZXIgbXkgYWNjb3VudCBhbmQgYWNjZXB0CiAgICAgICAgICAgICAgICAgICAgbXkgZnVsbCBsZWdhbCBsaWFiaWxpdHksIHdoaWxlIEFlc2NoaW5lcyBkaWQgbm90LiBJcyBteSBjb25kdWN0IHRoZW4gdGhlIGVjaG8gb2YKICAgICAgICAgICAgICAgICAgICBoaXM/IElzIGl0IGNvbXBldGVudCBmb3IgaGltIHRvIGxheSBiZWZvcmUgdGhpcyBjb3VydCBjaGFyZ2VzIHdoaWNoIGhlIGhhcyBuZXZlcgogICAgICAgICAgICAgICAgICAgIG1hZGUgYmVmb3JlPyBBc3N1cmVkbHkgbm90OyBhbmQgeWV0IGhlIHdpbGwgbGF5IHRoZW0sIGZvciBhIHZlcnkgZ29vZCByZWFzb24uCiAgICAgICAgICAgICAgICAgICAgRm9yIHlvdSBrbm93IHRoYXQsIGV2ZXIgc2luY2UgbWFua2luZCBhbmQgdGhlIGNyaW1pbmFsIGxhdyBmaXJzdCBjYW1lIGludG8KICAgICAgICAgICAgICAgICAgICBiZWluZywgbm8gY3VscHJpdCBoYXMgZXZlciBiZWVuIGNvbnZpY3RlZCB3aGlsZSBjb25mZXNzaW5nIGhpcyBndWlsdC4gVGhleQogICAgICAgICAgICAgICAgICAgIHZhcG9yLCB0aGV5IGdhaW5zYXksIHRoZXkgdGVsbCBsaWVzLCB0aGV5IGZvcmdlIGV4Y3VzZXMs4oCUYW55dGhpbmcgdG8KICAgICAgICAgICAgICAgICAgICBldmFkZSBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.216'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTYiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90IGJlIGR1cGVkIHRvZGF5IGJ5IGFueQogICAgICAgICAgICAgICAgICAgIG9mIHRoZXNlIHN0YWxlIHRyaWNrcy4gWW91IG11c3QgcGFzcyBqdWRnZW1lbnQgb24gdGhlIGZhY3RzLCBhY2NvcmRpbmcgdG8geW91cgogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZTsgeW91IG11c3QgcGF5IG5vIGhlZWQgZWl0aGVyIHRvIG15IGFzc2VydGlvbnMgb3IgdG8gaGlzLCBub3IgZXZlbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB3aXRuZXNzZXMgd2hvbSBoZSB3aWxsIGhhdmUgaW4gd2FpdGluZywgd2l0aCBQaGlsaXAgYXMgaGlzIHBheW1hc3RlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgc2VlIGhvdyBnbGlibHkgdGhleSB3aWxsIHRlc3RpZnkuIFlvdSBtdXN0IG5vdCBub3RpY2Ugd2hhdCBhIGZpbmUgbG91ZAogICAgICAgICAgICAgICAgICAgIHZvaWNlIGhlIGhhcywgYW5kIHdoYXQgYSBwb29yIHZvaWNlIEkgaGF2ZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.217'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTciIHVuaXQ9InNlY3Rpb24iIC8+SWYgeW91IGFyZSB3aXNlLCB5b3UgbXVzdCBub3QgdHJlYXQgdGhpcyB0cmlhbCBhcyBhIGNvbXBldGl0aW9uIG9mIGZvcmVuc2ljCiAgICAgICAgICAgICAgICAgICAgZWxvcXVlbmNlOyBidXQgaW4gcmVnYXJkIHRvIGEgZGlzaG9ub3JhYmxlIGFuZCBwZXJpbG91cyBjYXRhc3Ryb3BoZSwgY2FzdCBiYWNrCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGUgZ3VpbHR5IHRoZSBkaXNob25vciB0aGF0IGF0dGFjaGVzIHRvIGl0LCBhZnRlciByZXZpZXdpbmcgdHJhbnNhY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgdGhhdCBsaWUgd2l0aGluIHRoZSBrbm93bGVkZ2Ugb2YgeW91IGFsbC4gV2hhdCwgdGhlbiwgYXJlIHRoZSBmYWN0cyB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGtub3cgYW5kIEkgbmVlZCBub3QgcmVjb3VudD8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.218'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTgiIHVuaXQ9InNlY3Rpb24iIC8+SWYgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHByb21pc2VkIHJlc3VsdHMgb2YgdGhlIHBlYWNlIGhhdmUgY29tZSB0cnVlLCBpZiB5b3UgY29uZmVzcyB5b3Vyc2VsdmVzIHNvCiAgICAgICAgICAgICAgICAgICAgZWZmZW1pbmF0ZSBhbmQgc28gY293YXJkbHkgdGhhdCwgd2l0aCBubyBlbmVteSB3aXRoaW4geW91ciBib3JkZXJzLCBubyBibG9ja2FkZQogICAgICAgICAgICAgICAgICAgIG9mIHlvdXIgcG9ydHMsIG5vIGltcGVyaWxtZW50IG9mIHlvdXIgY2FwaXRhbCwgd2l0aCBjb3JuLXByaWNlcyBsb3cgYW5kIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgY29uZGl0aW9uIGFzIGZhdm9yYWJsZSBhcyBpdCBpcyB0b2RheSwgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.219'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTkiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdpdGggZm9yZWtub3dsZWRnZSBvbiB0aGUgYXNzdXJhbmNlIG9mIHlvdXIgYW1iYXNzYWRvcnMgdGhhdCB5b3VyIGFsbGllcwogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIHJ1aW5lZCwgdGhhdCB0aGUgVGhlYmFucyB3b3VsZCBnYWluIHN0cmVuZ3RoLCB0aGF0IFBoaWxpcCB3b3VsZCBvY2N1cHkKICAgICAgICAgICAgICAgICAgICB0aGUgbm9ydGhlcm4gcG9zaXRpb25zLCB0aGF0IGEgYmFzaXMgb2YgYXR0YWNrIHdvdWxkIGJlIGVzdGFibGlzaGVkIGFnYWluc3QgeW91CiAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LCBhbmQgdGhhdCBldmVyeXRoaW5nIHRoYXQgaGFzCiAgICAgICAgICAgICAgICAgICAgaW4gZmFjdCByZXN1bHRlZCB3b3VsZCBiZWZhbGwgeW91LCB5b3UgdGhlcmV1cG9uIGNoZWVyZnVsbHkgbWFkZSB0aGUgcGVhY2UsIGJ5CiAgICAgICAgICAgICAgICAgICAgYWxsIG1lYW5zIGFjcXVpdCBBZXNjaGluZXMsIGFuZCBkbyBub3QgY3Jvd24geW91ciBvdGhlciBkaXNob25vcnMgd2l0aCB0aGUgc2luCiAgICAgICAgICAgICAgICAgICAgb2YgcGVyanVyeS4gSGUgaGFzIGRvbmUgeW91IG5vIHdyb25nLCBhbmQgSSBhbSBhIG1hZG1hbiBhbmQgYSBmb29sIHRvIGFjY3VzZQogICAgICAgICAgICAgICAgICAgIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.220'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjAiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIHRoZSB0cnV0aCBpcyBvdGhlcndpc2UsIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBzcG9rZSBoYW5kc29tZWx5IG9mIFBoaWxpcCBhbmQgdG9sZCB5b3UgdGhhdCBoZSB3YXMgdGhlIGZyaWVuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgaGUgd291bGQgZGVsaXZlciB0aGUgUGhvY2lhbnMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3b3VsZCBjdXJiIHRoZSBhcnJvZ2FuY2Ugb2YgdGhlIFRoZWJhbnMsIHRoYXQgaGUgd291bGQgYmVzdG93IG9uIHlvdQogICAgICAgICAgICAgICAgICAgIG1hbnkgYm9vbnMgb2YgbW9yZSB2YWx1ZSB0aGFuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgYW5kIHdvdWxkIHJlc3RvcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGFuZCBPcm9wdXMsIGlmIG9ubHkgaGUgZ290IGhpcyBwZWFjZSzigJRpZiwgSQogICAgICAgICAgICAgICAgICAgIHNheSwgYnkgc3VjaCBhc3NlcnRpb25zIGFuZCBzdWNoIHByb21pc2VzIHRoZXkgaGF2ZSBkZWNlaXZlZCBhbmQgZGVsdWRlZCB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdlbGxuaWdoIHN0cmlwcGVkIHlvdSBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBmaW5kIGhpbSBndWlsdHksIGFuZCBkbyBub3QgcmVpbmZvcmNlIHRoZSBvdXRyYWdlcywgZm9yIEkKICAgICAgICAgICAgICAgICAgICBjYW4gZmluZCBubyBiZXR0ZXIgd29yZCzigJR0aGF0IHlvdSBoYXZlIGVuZHVyZWQsIGJ5IHJldHVybmluZyB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgaG9tZXMgbGFkZW4gd2l0aCB0aGUgY3Vyc2UgYW5kIHRoZSBndWlsdCBvZiBwZXJqdXJ5LCBmb3IgdGhlIHNha2Ugb2YgdGhlIGJyaWJlcwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYXZlIHBvY2tldGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.221'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBzaG91bGQgZnVydGhlciBhc2sgeW91cnNlbHZlcywgZ2VudGxlbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHdoeSwgaWYgdGhleSB3ZXJlIG5vdCBndWlsdHksIEkgc2hvdWxkIGhhdmUgZ29uZSBvdXQgb2YgbXkgd2F5IHRvIGFjY3VzZQogICAgICAgICAgICAgICAgICAgIHRoZW0uIFlvdSB3aWxsIGZpbmQgbm8gcmVhc29uLiBJcyBpdCBhZ3JlZWFibGUgdG8gaGF2ZSBtYW55IGVuZW1pZXM/IEl0IGlzCiAgICAgICAgICAgICAgICAgICAgaGFyZGx5IHNhZmUuIFBlcmhhcHMgSSBoYWQgYW4gb2xkIHN0YW5kaW5nIGZldWQgd2l0aCBBZXNjaGluZXM/IFRoYXQgaXMgbm90IHNvLgogICAgICAgICAgICAgICAgICAgIOKAnFdlbGwsIGJ1dCB5b3Ugd2VyZSBmcmlnaHRlbmVkIG9uIHlvdXIgb3duIGFjY291bnQsIGFuZCB3ZXJlIGNvd2FyZAogICAgICAgICAgICAgICAgICAgIGVub3VnaCB0byBzZWVrIHRoaXMgYXMgYSB3YXkgb2YgZXNjYXBlO+KAnSBmb3IgdGhhdCwgSSBoZWFyLCBpcyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgc3VnZ2VzdGlvbnMuIEJ1dCwgYnkgeW91ciBvd24gYWNjb3VudCwgQWVzY2hpbmVzLCB0aGVyZSBpcyBubyBjcmltZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIG5vIGplb3BhcmR5LiBJZiBoZSByZXBlYXRzIHRoZSBpbnNpbnVhdGlvbiwgZG8geW91LCBnZW50bGVtZW4sCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgdGhpczogaW4gYSBjYXNlIHdoZXJlIEksIHdobyBkaWQgbm8gd3Jvbmcgd2hhdGV2ZXIsIHdhcyB5ZXQgYWZyYWlkIGxlc3QKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4ncyBjb25kdWN0IHNob3VsZCBydWluIG1lLCB3aGF0IHB1bmlzaG1lbnQgb3VnaHQgdGhleSB0byBzdWZmZXIgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGVtc2VsdmVzIHRoZSBndWlsdHkgcGFydGllcz8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.222'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBub3QgbXkgcmVhc29uLiBUaGVuIHdoeSBhbSBJIGFjY3VzaW5nIHlvdT8gUGVyaGFwcyBhcyBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIGluZm9ybWVyLCB0byBnZXQgbW9uZXkgb3V0IG9mIHlvdT8gV2hpY2ggY291cnNlIHdhcyBtb3JlIHByb2ZpdGFibGUgZm9yIG1lLCB0bwogICAgICAgICAgICAgICAgICAgIHRha2UgbW9uZXkgZnJvbSBQaGlsaXAsIHdobyBvZmZlcmVkIG1lIGEgZ3JlYXQgZGVhbCzigJRhcyBtdWNoIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgZ2F2ZSB0aGVtLOKAlGFuZCBzbyB0byBtYWtlIGZyaWVuZHMgYm90aCB3aXRoIGhpbSBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZW0s4oCUZm9yIGluZGVlZCBJIG1pZ2h0IGhhdmUgaGFkIHRoZWlyIGZyaWVuZHNoaXAgaWYgSSBoYWQgYmVlbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpY2UsIGFuZCBldmVuIG5vdyB0aGVyZSBpcyBubyB2ZW5kZXR0YSBiZXR3ZWVuIHVzLCBvbmx5IHRoYXQgSSBoYWQgbm8KICAgICAgICAgICAgICAgICAgICBwYXJ0IGluIHRoZWlyIG1hbHByYWN0aWNlcywgb3IgdG8gbGV2eSBibGFja21haWwgb24gdGhlaXIgdGFraW5ncywgYW5kIHNvIGluY3VyCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgZW5taXR5IGFuZCB0aGVpcnM7IHRvIHNwZW5kIGFsbCBteSBtb25leSBvbiB0aGUgcmFuc29tIG9mIGNhcHRpdmVzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuIGV4cGVjdCB0byBnZXQgYSB0cmlmbGUgYmFjayBkaXNob25vcmFibHkgYW5kIGF0IHRoZSBjb3N0IG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsaXR5PyA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.223'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRoaW5nIGlzIGltcG9zc2libGUhIE5vOyBJCiAgICAgICAgICAgICAgICAgICAgbWFkZSBob25lc3QgcmVwb3J0czsgSSBrZXB0IG15IGhhbmRzIGNsZWFuIG9mIGNvcnJ1cHRpb24gZm9yIHRoZSBzYWtlIG9mIHRydXRoCiAgICAgICAgICAgICAgICAgICAgYW5kIGp1c3RpY2UgYW5kIG9mIG15IGZ1dHVyZSBjYXJlZXIsIGJlbGlldmluZywgYXMgb3RoZXJzIGhhdmUgYmVsaWV2ZWQsIHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICBob25lc3R5IHdvdWxkIGJlIHJld2FyZGVkIGJ5IHlvdXIgZmF2b3IsIGFuZCB0aGF0IG15IHB1YmxpYyBzcGlyaXQgbXVzdCBuZXZlciBiZQogICAgICAgICAgICAgICAgICAgIGJhcnRlcmVkIGF3YXkgZm9yIGFueSBlbW9sdW1lbnQuIEkgYWJob3IgdGhlc2UgbWVuIGJlY2F1c2UgdGhyb3VnaG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBlbWJhc3N5IEkgZm91bmQgdGhlbSB2aWNpb3VzIGFuZCB1bmdvZGx5LCBhbmQgYmVjYXVzZSBieSB0aGVpciBjb3JydXB0aW9uIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcm9iYmVkIG9mIHRoZSBkdWUgcmV3YXJkIG9mIG15IHBhdHJpb3Rpc20sIHRocm91Z2ggeW91ciBuYXR1cmFsCiAgICAgICAgICAgICAgICAgICAgZGlzc2F0aXNmYWN0aW9uIHdpdGggdGhlIHdob2xlIGJ1c2luZXNzLiBJIG5vdyBkZW5vdW5jZSB0aGVtLCBhbmQgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYXR0ZW5kZWQgdGhpcyBzY3J1dGlueSwgYmVjYXVzZSBJIGhhdmUgYSBjYXJlIGZvciB0aGUgZnV0dXJlLCBhbmQgZGVzaXJlIGEKICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbiByZWNvcmRlZCBpbiB0aGlzIGNhc2UgYW5kIGJ5IHRoaXMgY291cnQgdGhhdCBteSBjb25kdWN0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZXhhY3RseSBvcHBvc2VkIHRvIHRoZWlycy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.224'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBJIGFtCiAgICAgICAgICAgICAgICAgICAgYWZyYWlkLOKAlGZvciBhbGwgbXkgdGhvdWdodHMgc2hhbGwgYmUgbGFpZCBvcGVuIHRvIHlvdSzigJRJIGFtCiAgICAgICAgICAgICAgICAgICAgYWZyYWlkIHRoYXQgaGVyZWFmdGVyIHlvdSBtYXkgZGVzdHJveSBtZSB3aXRoIHRoZW0gaW4gZGVzcGl0ZSBvZiBteSBpbm5vY2VuY2UsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgdG9kYXkgeW91IGFyZSBzdXBpbmUuIEZvciBpbmRlZWQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBzZWVtIHRvIG1lIHRvIGhhdmUgYmVjb21lIGFsdG9nZXRoZXIgc2xhY2ssIGlkbHkKICAgICAgICAgICAgICAgICAgICB3YWl0aW5nIGZvciB0aGUgYWR2ZW50IG9mIGRpc2FzdGVyLiBZb3Ugc2VlIHRoZSBkaXN0cmVzc2VzIG9mIG90aGVycywgYnV0IHRha2UKICAgICAgICAgICAgICAgICAgICBubyBwcmVjYXV0aW9uIGZvciB5b3Vyc2VsdmVzOyB5b3UgaGF2ZSBubyB0aG91Z2h0IGZvciB0aGUgc3RlYWR5IGFuZCBhbGFybWluZwogICAgICAgICAgICAgICAgICAgIGRldGVyaW9yYXRpb24gb2YgeW91ciBjb21tb253ZWFsdGguIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.225'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRvIHlvdSBub3QgdGhpbmsgdGhpcyBhbiBleHRyZW1lbHkKICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXMgc3ltcHRvbT8g77yIRm9yIHRob3VnaCBJIGhhZCBkZWNpZGVkIHRvIHNheSBub3RoaW5nLCBJIGFtCiAgICAgICAgICAgICAgICAgICAgdGVtcHRlZCB0byBzcGVhayBvdXTvvIkgT2YgY291cnNlIHlvdSBrbm93IFB5dGhvY2xlcywgc29uIG9mIFB5dGhvZG9ydXMuCiAgICAgICAgICAgICAgICAgICAgSSB3YXMgb24gdGhlIG1vc3QgY2l2aWwgdGVybXMgd2l0aCBoaW0sIGFuZCB0aGVyZSBoYXMgYmVlbiBubyB1bnBsZWFzYW50bmVzcwogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gdXMgdG8gdGhpcyBkYXkuIEJ1dCBub3csIHNpbmNlIGhpcyB2aXNpdCB0byBQaGlsaXAsIGhlIHR1cm5zIGFzaWRlCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgaGUgbWVldHMgbWUsIGFuZCBpZiBoZSBjYW5ub3QgYXZvaWQgYW4gZW5jb3VudGVyLCBoZSBydXNoZXMgb2ZmIGFzIHNvb24KICAgICAgICAgICAgICAgICAgICBhcyBoZSBjYW4gZm9yIGZlYXIgaGUgc2hvdWxkIGJlIHNlZW4gdGFsa2luZyB0byBtZSwgd2hpbGUgaGUgd2lsbCBwZXJhbWJ1bGF0ZQogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBtYXJrZXQtcGxhY2UgZGlzY3Vzc2luZyBwbGFucyB3aXRoIEFlc2NoaW5lcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.226'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjYiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2hvY2tpbmcgYW5kIHNjYW5kYWxvdXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgUGhpbGlwIGhhcyBzdWNoIGFuIGFjdXRlCiAgICAgICAgICAgICAgICAgICAgcGVyY2VwdGlvbiBvZiB0aGUgZmlkZWxpdHkgb3IgdHJlYWNoZXJ5IG9mIHRoZSBtZW4gd2hvIGhhdmUgbWFkZSBzdWJzZXJ2aWVuY2UgdG8KICAgICAgICAgICAgICAgICAgICBoaW0gdGhlaXIgcG9saWN5LCB0aGF0IHRoZXkgYWxsIGV4cGVjdCB0aGF0IG5vdGhpbmcgdGhleSBkbyBldmVuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3aWxsIGVzY2FwZSB0aGUgbWFzdGVyJ3MgZXllLCBhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBzdG9vZCBhdCB0aGVpciB2ZXJ5IGVsYm93LCBhbmQgdGhhdCB0aGV5IG11c3QgbmVlZHMgY2hvb3NlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBmcmllbmRzIGFuZCBlbmVtaWVzIGluIG9iZWRpZW5jZSB0byBoaXMgd2lzaGVzOyB3aGlsZSB0aG9zZSB3aG9zZSBsaXZlcwogICAgICAgICAgICAgICAgICAgIGFyZSBkZXZvdGVkIHRvIHlvdXIgc2VydmljZSwgYW5kIHdobyBjb3ZldCBhbmQgaGF2ZSBuZXZlciBiZXRyYXllZCB0aGUgaG9ub3IKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBjYW4gYmVzdG93LCBlbmNvdW50ZXIgaW4geW91IHN1Y2ggZHVsbG5lc3Mgb2YgaGVhcmluZywgc3VjaCBkYXJrbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIHZpc2lvbiwgdGhhdCBoZXJlIGFtIEkgdG9kYXkgY29udGVuZGluZyBvbiBlcXVhbCB0ZXJtcyB3aXRoIHRoZXNlIHBlcm5pY2lvdXMKICAgICAgICAgICAgICAgICAgICBwZXJzb25zLCBldmVuIGluIGEgY291cnQgd2VsbCBhY3F1YWludGVkIHdpdGggdGhlIHdob2xlIGhpc3RvcnkuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.227'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjciIHVuaXQ9InNlY3Rpb24iIC8+V291bGQgeW91IGxpa2UgdG8ga25vdyB0aGUgcmVhc29uPyBJIHdpbGwgdGVsbCB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIEkgdHJ1c3QgdGhhdCB5b3Ugd2lsbCBub3QgdGFrZSBvZmZlbmNlIGF0IG15IGNhbmRvci4gUGhpbGlwLCBJIHRha2UgaXQsCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIG9uZSBib2R5IGFuZCBvbmUgc291bCBsb3ZlcyB0aG9zZSB3aG8gaGVscCBoaW0gYW5kIGhhdGVzIHRob3NlIHdobyBoYXJtCiAgICAgICAgICAgICAgICAgICAgaGltIHdpdGggaGlzIHdob2xlIGhlYXJ0LCB3aGVyZWFzIG5vIG9uZSBvZiB5b3UgcmVnYXJkcyB0aGUgYmVuZWZhY3RvciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb253ZWFsdGggYXMgaGlzIGJlbmVmYWN0b3IsIG9yIHRoZSBlbmVteSBvZiB0aGUgY29tbW9ud2VhbHRoIGFzIGhpcyBlbmVteS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.228'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9InNlY3Rpb24iIC8+RWFjaCBtYW4gaGFzIG90aGVyIG1vdGl2ZXMsIG9mIG1vcmUKICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbmNlIHRvIGhpbSwgYW5kIHRoZXJlYnkgeW91IGFyZSBvZnRlbiBsZWQgYXN0cmF5LOKAlGNvbXBhc3Npb24sCiAgICAgICAgICAgICAgICAgICAgamVhbG91c3ksIHJlc2VudG1lbnQsIGdvb2QgbmF0dXJlLCBhbmQgYSB0aG91c2FuZCBtb3JlLiBGb3IgZXZlbiB0aG91Z2ggYSBtYW4KICAgICAgICAgICAgICAgICAgICBlc2NhcGUgZXZlcnkgb3RoZXIgZGFuZ2VyLCBoZSBjYW4gbmV2ZXIgd2hvbGx5IGVzY2FwZSB0aG9zZSB3aG8gZG8gbm90IHdhbnQgc3VjaAogICAgICAgICAgICAgICAgICAgIGEgcGVyc29uIGFzIGhlIGlzIHRvIGV4aXN0LiBCdXQsIGxpdHRsZSBieSBsaXR0bGUsIGJ5IGFjY3VtdWxhdGlvbiBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIGVycm9ycyB0aGUgZm91bmRhdGlvbiBpcyBzYXBwZWQsIGFuZCB0aGUgaW50ZWdyaXR5IG9mIHB1YmxpYyBsaWZlIGNvbGxhcHNlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.229'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRvIG5vdCwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBnaXZlIHdheSB0byB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1vdGl2ZXMgdG9kYXkuIERvIG5vdCBhY3F1aXQgdGhlIG1hbiB3aG8gaGFzIGRvbmUgeW91IHN1Y2ggZ3JpZXZvdXMgd3JvbmcuIFRoaW5rCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHN0b3J5IHRoYXQgd2lsbCBiZSB0b2xkLCBpZiB5b3UgZG8gYWNxdWl0IGhpbS4gT25jZSB1cG9uIGEgdGltZSBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgd2VudCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0byBzZWUKICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIGFuZCB0aGVpciBuYW1lcyB3ZXJlIFBoaWxvY3JhdGVzLCBBZXNjaGluZXMsIFBocnlubywgYW5kIERlbW9zdGhlbmVzLgogICAgICAgICAgICAgICAgICAgIE9uZSBvZiB0aGVtIG5vdCBvbmx5IG1hZGUgbm8gZ2FpbiBmcm9tIGhpcyBtaXNzaW9uLCBidXQgZGVsaXZlcmVkIGNhcHRpdmVzIGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBleHBlbnNlOyBidXQgYW5vdGhlciB3ZW50IGFib3V0IGJ1eWluZyBoYXJsb3RzIGFuZCBmaXNoIHdpdGggdGhlIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgZm9yIHdoaWNoIGhlIGhhZCBzb2xkIGhpcyBjb3VudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.230'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzAiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgbmFtZWQgUGhyeW5vLCBhIGJvbGQsIGJhZCBtYW4sIHNlbnQgaGlzIHNvbiB0byBQaGlsaXAgYmVmb3JlIGhlIGhhZCBwdXQKICAgICAgICAgICAgICAgICAgICBoaW0gb24gdGhlIGxpc3Qgb2YgY2l0aXplbnM7IGJ1dCBhbm90aGVyIGRpZCBub3QgZG8gYW55dGhpbmcgdGhhdCB3YXMgdW53b3J0aHkKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgY291bnRyeSBvciBoaW1zZWxmLiBUaG91Z2ggaGUgd2FzIHN0aWxsIHBheWluZyBmb3IgYSBjaG9ydXMgYW5kIGEKICAgICAgICAgICAgICAgICAgICAgICAgbWFuLW9mLXdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBwZXJmb3JtaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICDigJxwdWJsaWMgc2VydmljZXPigJ0g77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrvhv4PPhM6/z4XPgc6z4b23zrHOuTwvZm9yZWlnbj7vvIkgb2YgdGhlIGNob3JhZ2lhIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoaWEuPC9ub3RlPiBoZSB0aG91Z2h0IGl0IG9ubHkgcmlnaHQgdG8gc3BlbmQgbW9yZSBtb25leSBvZiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgZnJlZSB3aWxsLCB0byByYW5zb20gY2FwdGl2ZXMsIGFuZCB0byBhbGxvdyBub25lIG9mIGhpcyBjb3VudHJ5bWVuIHRvIHN1ZmZlcgogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzIHRocm91Z2ggcG92ZXJ0eS4gQnV0IGFub3RoZXIsIGluc3RlYWQgb2YgZGVsaXZlcmluZyBhbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zIHdobyB3ZXJlIGFscmVhZHkgaW4gY2FwdGl2aXR5LCBoZWxwZWQgdG8gYnJpbmcgYSB3aG9sZSBkaXN0cmljdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGVuIHRob3VzYW5kIG9mIHRoZSBpbmZhbnRyeSBhbmQgYWJvdXQgYSB0aG91c2FuZCBvZiB0aGUgY2F2YWxyeSBvZiB0aGUgYWxsaWVzCiAgICAgICAgICAgICAgICAgICAgaW50byBjYXB0aXZpdHkgdG8gUGhpbGlwLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou+G/g8+Ezr/Phc+BzrPhvbfOsc65PC9mb3JlaWduPu+8iSBvZiB0aGUgY2hvcmFnaWEgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2hpYS48L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.231'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNlcXVlbCB3YXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBBdGhlbmlhbnMgY2F1Z2h0IHRoZXNlIGJhZCBtZW4sIGZvciB0aGV5IGtuZXcgYWxsIGFib3V0IGl0LAogICAgICAgICAgICAgICAgICAgIGFuZOKAlHdoYXQgZG8geW91IHRoaW5rPyBUaGV5IHJlbGVhc2VkIHRoZSBtZW4gd2hvIGhhZCB0YWtlbiBicmliZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFkIGRpc2dyYWNlZCB0aGVtc2VsdmVzLCB0aGUgY2l0eSwgYW5kIHRoZWlyIG93biBjaGlsZHJlbiwgYmVjYXVzZSB0aGV5IHRob3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2VyZSB2ZXJ5IHNlbnNpYmxlIG1lbiwgYW5kIHRoYXQgdGhlIGNpdHkgd2FzIGdvaW5nIG9uIG5pY2VseTsgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhleSB0aG91Z2h0IHRoYXQgdGhlIG1hbiB3aG8gYWNjdXNlZCB0aGVtIGhhZCBnb25lIG91dCBvZiBoaXMgbWluZCwgYW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHVuZGVyc3RhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGRpZCBub3Qga25vdyBldmVuIGhvdyB0byBmbGluZyBoaXMgbW9uZXkgYXdheS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.232'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldpdGggdGhpcyBleGFtcGxlIGJlZm9yZSBoaXMgZXllcywKICAgICAgICAgICAgICAgICAgICB3aG8sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdpbGwgZXZlciB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gcHJvdmUgaGltc2VsZiBhbiBob25lc3QgbWFuLCBvciB0byBnbyBvbiBlbWJhc3N5IGZvciBub3RoaW5nLCBpZiBoZSBpcwogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgdG8gbWFrZSBtb25leSBub3IgdG8gYmUgaGVsZCBtb3JlIHdvcnRoeSBvZiB5b3VyIGNvbmZpZGVuY2UgdGhhbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIG1hZGUgbW9uZXk/IFRvZGF5IHlvdSBhcmUgbm90IG1lcmVseSBhZGp1ZGdpbmcgdGhpcyBjYXNlOiB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRpbmcgZm9yIGFsbCBmdXR1cmUgdGltZSwgd2hldGhlciBldmVyeSBhbWJhc3NhZG9yIGlzIGJhc2VseSB0byBzZXJ2ZQogICAgICAgICAgICAgICAgICAgIHlvdXIgZW5lbWllcyBmb3IgaGlyZSwgb3Igd2l0aG91dCBmZWUgb3IgYnJpYmUgdG8gZ2l2ZSBoaXMgYmVzdCBzZXJ2aWNlIHRvIHlvdS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.233'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzMiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlc2UgbWF0dGVycyB5b3UgbmVlZCBubyBmdXJ0aGVyCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzczsgYnV0IHRvIHByb3ZlIHRoYXQgUGhyeW5vIGRpZCBzZW5kIGhpcyBzb24gdG8gUGhpbGlwLCBwbGVhc2UgY2FsbCB0aGUKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgQWVzY2hpbmVzIG5ldmVyIHByb3NlY3V0ZWQgUGhyeW5vCiAgICAgICAgICAgICAgICAgICAgZm9yIHNlbmRpbmcgaGlzIG93biBzb24gdG8gUGhpbGlwIHdpdGggYSBkaXNob25vcmFibGUgaW50ZW50aW9uLiBCdXQgaWYgYQogICAgICAgICAgICAgICAgICAgICAgICBtYW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGltYXJjaHVzLjwvbm90ZT4gaW4gdGhlIGJsb29tIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHlvdXRoIHdhcyBtb3JlIGNvbWVseSB0aGFuIG90aGVycywgYW5kIGlmLCBkaXNyZWdhcmRpbmcgdGhlIHN1c3BpY2lvbiB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIHBlcnNvbmFsIGNoYXJtIG1pZ2h0IHByb3Zva2UsIGhlIGhhcyBsaXZlZCByYXRoZXIgcmVja2xlc3NseSBpbiBsYXRlciB5ZWFycywKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgbXVzdCBuZWVkcyBwcm9jZWVkIGFnYWluc3QgdGhhdCBtYW4gZm9yIGltbW9yYWxpdHkuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.234'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBsZXQgbWUgc2F5IGEgd29yZAogICAgICAgICAgICAgICAgICAgIGFib3V0IG15IGVudGVydGFpbm1lbnQgYW5kIG15IGRlY3JlZS4gSSBoYWQgbmVhcmx5IGZvcmdvdHRlbiB0aG9zZSBhbGwtaW1wb3J0YW50CiAgICAgICAgICAgICAgICAgICAgdG9waWNzISBXaGVuIEkgd2FzIGRyYWZ0aW5nIHRoZSBwcm92aXNpb25hbCByZXNvbHV0aW9uIG9mIHRoZSBDb3VuY2lsIHJlc3BlY3RpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgZWFybGllciBlbWJhc3N5LCBhbmQgYWdhaW4gaW4gYWRkcmVzc2luZyB0aGUgcGVvcGxlIGF0IHRoZSBBc3NlbWJsaWVzIHRoYXQKICAgICAgICAgICAgICAgICAgICB3ZXJlIGhlbGQgdG8gZGlzY3VzcyB0aGUgdGVybXMgb2YgcGVhY2UsIEkgZm9sbG93ZWQgdGhlIHVzdWFsIGN1c3RvbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWQgYSB2b3RlIG9mIHRoYW5rcyBhbmQgYW4gaW52aXRhdGlvbiB0byB0aGUgcHVibGljIG1lc3MtdGFibGU7IGZvciBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGltZSBubyB3cm9uZ2Z1bCB3b3JkIG9yIGFjdCBvZiB0aGVpcnMgaGFkIGJlZW4gZGlzY2xvc2VkLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.235'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgYWxzbyB0cnVlIHRoYXQgSSBlbnRlcnRhaW5lZCBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzLCBhbmQgZGlkIHRoZSB0aGluZyB2ZXJ5IGhhbmRzb21lbHk7IGZvciwgaGF2aW5nIG9ic2VydmVkIGluIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGNvdW50cnkgdGhhdCB0aGV5IHRha2UgcHJpZGUgaW4gc3VjaCBob3NwaXRhbGl0eSBhcyBldmlkZW5jZSBvZiB3ZWFsdGggYW5kCiAgICAgICAgICAgICAgICAgICAgc3BsZW5kb3IsIEkgdGhvdWdodCBpdCBteSBkdXR5IHRvIG91dGRvIHRoZW0gd2l0aCBhIG1vcmUgc3RyaWtpbmcgZGlzcGxheSBvZgogICAgICAgICAgICAgICAgICAgIG11bmlmaWNlbmNlLiBPbiB0aGUgc3RyZW5ndGggb2YgdGhlc2UgaW5jaWRlbnRzLCBBZXNjaGluZXMgd2lsbCB0ZWxsIHlvdToKICAgICAgICAgICAgICAgICAgICDigJxEZW1vc3RoZW5lcyB0aGFua2VkIHVzLCBhbmQgZW50ZXJ0YWluZWQgdGhlIGFtYmFzc2Fkb3JzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZuKAneKAlHdpdGhvdXQgbWFya2luZyB0aGUgZGlzdGluY3Rpb24gb2YgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.236'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzYiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgdG9vayBwbGFjZSBiZWZvcmUgdGhlIGNvdW50cnkgaGFkIHN1ZmZlcmVkCiAgICAgICAgICAgICAgICAgICAgd3JvbmcsIGFuZCBiZWZvcmUgaXQgd2FzIGV2aWRlbnQgdGhhdCB0aGUgZW52b3lzIGhhZCBzb2xkIHRoZW1zZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGZpcnN0IHJldHVybiBvZiB0aGUgZW52b3lzLCB3aGVuIHRoZSBwZW9wbGUgaGFkIHN0aWxsIHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciB0aGVpciByZXBvcnQsIGFuZCB3aGVuIGl0IHdhcyBub3QgeWV0IGtub3duIHRoYXQgQWVzY2hpbmVzIHdvdWxkIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICBQaGlsb2NyYXRlcywgb3IgdGhhdCBQaGlsb2NyYXRlcyB3b3VsZCBtb3ZlIHN1Y2ggYSByZXNvbHV0aW9uLiBJZiBoZSBtZW50aW9ucwogICAgICAgICAgICAgICAgICAgIHRoZSBpbmNpZGVudHMsIGJlYXIgaW4gbWluZCB0aGF0IHRoZSBkYXRlcyB3ZXJlIGVhcmxpZXIgdGhhbiB0aGVpciBvZmZlbmNlcywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGhhdmUgbmV2ZXIgc2luY2UgaGFkIGFueSBpbnRpbWFjeSBvciBhbnkgYXNzb2NpYXRpb24gd2l0aCB0aGVtLiBSZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.237'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBlcmhhcHMgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGZpbmQgYSBicm90aGVyIHRvIHNwZWFrIGZvciBoaW0sIFBoaWxvY2hhcmVzIG9yIEFwaG9iZXR1czsgdG8gYm90aCBvZiB3aG9tCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbXVjaCB0aGF0IHlvdSBjYW4gc2F5IHdpdGgganVzdGljZS4g77yIT25lIG11c3QgY29udmVyc2UgcXVpdGUKICAgICAgICAgICAgICAgICAgICBmcmFua2x5LCB3aXRob3V0IGFueSByZXNlcnZlLu+8iSBXZSwgQXBob2JldHVzIGFuZCBQaGlsb2NoYXJlcywgYWx0aG91Z2gKICAgICAgICAgICAgICAgICAgICB5b3UsIFBoaWxvY2hhcmVzLCB3ZXJlIGEgcGFpbnRlciBvZiBhbGFiYXN0ZXIgYm94ZXMgYW5kIHRhbWJvdXJpbmVzLCBhbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGJyb3RoZXJzIG9yZGluYXJ5IHBlb3BsZSwganVuaW9yIGNsZXJrcyBhbmQgdGhlIGxpa2Us4oCUcmVzcGVjdGFibGUKICAgICAgICAgICAgICAgICAgICBvY2N1cGF0aW9ucywgYnV0IGhhcmRseSBzdWl0YWJsZSBmb3IgY29tbWFuZGluZyBvZmZpY2VycyzigJR3ZSwgSSBzYXksCiAgICAgICAgICAgICAgICAgICAgZGlnbmlmaWVkIHlvdSB3aXRoIGVtYmFzc2llcywgY29tbWFuZHMgYXMgZ2VuZXJhbHMsIGFuZCBvdGhlciBoaWdoIGRpc3RpbmN0aW9ucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.238'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzgiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiBpZiBub25lIG9mIHRoZSBmYW1pbHkgaGFkIGNvbW1pdHRlZAogICAgICAgICAgICAgICAgICAgIGFueSBjcmltZSwgeW91IHdvdWxkIGhhdmUgbm8gY2xhaW0gb24gb3VyIGdyYXRpdHVkZSwgYnV0IHdlIHNob3VsZCBoYXZlIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBjbGFpbSBvbiB5b3VyczsgZm9yIHdlIHBhc3NlZCBvdmVyIG1hbnkgbXVjaCBtb3JlIHdvcnRoeSBjbGFpbWFudHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGdsb3JpZmllZCB5b3UuIEJ1dCBpZiBpbiB0aGUgYWN0dWFsIGVuam95bWVudCBvZiB0aG9zZSBkaWduaXRpZXMgb25lIG9mIHlvdSBoYXMKICAgICAgICAgICAgICAgICAgICBjb21taXR0ZWQgYSBjcmltZSwgYW5kIHN1Y2ggYSBjcmltZSBhcyB0aGlzLCBkbyB5b3Ugbm90IGFsbCBkZXNlcnZlIGFiaG9ycmVuY2UKICAgICAgICAgICAgICAgICAgICBtdWNoIG1vcmUgdGhhbiBkZWxpdmVyYW5jZT8gVGhhdCBpcyBteSB2aWV3LiBIb3dldmVyLCB0aGV5IHdpbGwgc3Rvcm0gYW5kCiAgICAgICAgICAgICAgICAgICAgYmx1c3RlcizigJRmb3IgdGhleSBoYXZlIHZlcnkgbG91ZCB2b2ljZXMgYW5kIHZlcnkgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgbW9kZXN0eSzigJRhbmQgd2lsbCByZW1pbmQgeW91IHRoYXQg4oCcaXQgaXMgbm8gc2luIHRvIGhlbHAgeW91cgogICAgICAgICAgICAgICAgICAgIGtpbi7igJ0gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.239'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzkiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90IGdpdmUgd2F5IHRvIHRoZW0uIEl0CiAgICAgICAgICAgICAgICAgICAgaXMgdGhlaXIgYnVzaW5lc3MgdG8gdGhpbmsgb2YgQWVzY2hpbmVzOyBpdCBpcyB5b3VyIGJ1c2luZXNzIHRvIHRoaW5rIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIG9mIHRoZSB3aG9sZSBjb21tb253ZWFsdGgsIGFuZCBhYm92ZSBhbGwgb2YgdGhlIG9hdGggaW4gdmlydHVlIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IHNpdCBpbiB0aGF0IGJveC4gSWYgdGhleSBoYXZlIGJlc291Z2h0IGFueSBvZiB5b3UgdG8gZGVsaXZlciBoaW0sIGFzawogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgd2hldGhlciB0aGV5IG1lYW4gaW4gY2FzZSBoZSBpcyBub3QsIG9yIGluIGNhc2UgaGUgaXMsIGd1aWx0eSBvZiBhCiAgICAgICAgICAgICAgICAgICAgY3JpbWUgYWdhaW5zdCB0aGUgY29tbW9uIHdlYWwuIElmIHRoZXkgbWVhbiBpbiBjYXNlIGhlIGlzIG5vdCBndWlsdHksIEkgYWRtaXQKICAgICAgICAgICAgICAgICAgICB0aGUgcGxlYTsgYnV0IGlmIHRoZXkgbWVhbiwgZGVsaXZlciBoaW0gaW4gYW55IGNhc2UsIHRoZXkgaGF2ZSBlbnRyZWF0ZWQgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgcGVyanVyZSB5b3Vyc2VsdmVzLiBGb3IgdGhvdWdoIHRoZSB2b3RlIGlzIHNlY3JldCwgaXQgd2lsbCBub3QgZXNjYXBlIHRoZSBleWUgb2YKICAgICAgICAgICAgICAgICAgICBIZWF2ZW4uIFRoZSBsZWdpc2xhdG9yIHdpc2VseSBkaXNjZXJuZWQgaGVyZWluIHRoZSBlc3NlbmNlIG9mIHNlY3JldCB2b3RpbmcsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyBzdXBwbGlhbnQgc2hhbGwga25vdyB0aGUgbmFtZSBvZiB0aGUganVyb3Igd2hvIGhhcyBncmFudGVkIGhpcyBwcmF5ZXIsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBnb2RzIGFuZCB0aGUgZGl2aW5lIHNwaXJpdCB3aWxsIGtub3cgaGltIHdobyBoYXMgY2FzdCBhbiB1bnJpZ2h0ZW91cwogICAgICAgICAgICAgICAgICAgIHZvdGUuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.240'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDAiIHVuaXQ9InNlY3Rpb24iIC8+RmFyIGJldHRlciBmb3IgZWFjaCBvZiB5b3UgdG8gbWFrZSBnb29kCiAgICAgICAgICAgICAgICAgICAgaGlzIGhvcGVzIG9mIHRoZSBibGVzc2luZyBvZiBIZWF2ZW4gZm9yIGhpbXNlbGYgYW5kIGhpcyBjaGlsZHJlbiwgYnkgcmVjb3JkaW5nIGEKICAgICAgICAgICAgICAgICAgICByaWdodGVvdXMgYW5kIGEgZHV0aWZ1bCB2ZXJkaWN0LCB0aGFuIHRvIGJlc3RvdyBvbiB0aGVzZSBtZW4gYSBzZWNyZXQgYW5kCiAgICAgICAgICAgICAgICAgICAgdW5hY2tub3dsZWRnZWQgZmF2b3IsIGFuZCBhY3F1aXQgYSBtYW4gY29udmljdGVkIGJ5IGhpcyBvd24gdGVzdGltb255LiBGb3Igd2hhdAogICAgICAgICAgICAgICAgICAgIG1vcmUgcG93ZXJmdWwgZXZpZGVuY2UsIEFlc2NoaW5lcywgY2FuIEkgYWRkdWNlIGZvciB0aGUgbWFueSBjcmltZXMgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGVtYmFzc3kgdGhhbiB0aGUgZXZpZGVuY2UgeW91IGhhdmUgZ2l2ZW4gYWdhaW5zdCB5b3Vyc2VsZj8gWW91LCB3aG8gdGhvdWdodCBpdAogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSB0byBpbXBsaWNhdGUgaW4gc28gZ3JpZXZvdXMgYSBjYWxhbWl0eSBvbmUgd2hvIHB1cnBvc2VkIHRvIGJyaW5nIGEKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHlvdXIgbWlzY29uZHVjdCB0byBsaWdodCwgbXVzdCBzdXJlbHkgaGF2ZSBleHBlY3RlZCBhIHRlcnJpYmxlCiAgICAgICAgICAgICAgICAgICAgcmV0cmlidXRpb24gaWYgdGhlIGp1cnkgc2hvdWxkIGxlYXJuIHRoZSB0cnVlIGhpc3Rvcnkgb2YgeW91ciBkZWVkcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.241'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIHlvdSBhcmUgd2lzZSwgdGhhdAogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlIG9mIGhpcyB3aWxsIG5vdyBiZSB0dXJuZWQgdG8gaGlzIGRpc2FkdmFudGFnZSwgbm90IG9ubHkgYmVjYXVzZSBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBhIHBvd2VyZnVsIGluZGljYXRpb24gb2YgaGlzIG1pc2NvbmR1Y3QsIGJ1dCBiZWNhdXNlIGhlIGVtcGxveWVkIGluIGhpcwogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0aW9uIGFyZ3VtZW50cyB0aGF0IGFyZSBub3cgdmFsaWQgYWdhaW5zdCBoaW1zZWxmLiBGb3Igc3VyZWx5IHRoZQogICAgICAgICAgICAgICAgICAgIHByaW5jaXBsZXMgd2hpY2ggeW91LCBBZXNjaGluZXMsIGxhaWQgZG93biB3aGVuIHlvdSBwcm9zZWN1dGVkIFRpbWFyY2h1cyBvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgZXF1YWwgd2VpZ2h0IGZvciBvdGhlcnMgYWdhaW5zdCB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.242'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG9uIHRoYXQgb2NjYXNpb24gaGUgb2JzZXJ2ZWQgdG8gdGhlIGp1cnk6IOKAnERlbW9zdGhlbmVzIHdpbGwKICAgICAgICAgICAgICAgICAgICBjb25kdWN0IHRoaXMgbWFuJ3MgZGVmZW5jZSwgYW5kIHdpbGwgZGVub3VuY2UgbXkgY29uZHVjdCBvZiB0aGUgZW1iYXNzeTsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgaWYgaGUgbGVhZHMgeW91IGFzdHJheSBieSBoaXMgc3BlZWNoLCBoZSB3aWxsIGdvIGFib3V0IGluIGhpcyBjb25jZWl0ZWQKICAgICAgICAgICAgICAgICAgICB3YXksIGFuZCBib2FzdDogJ0hvdyBkaWQgSSBkbyBpdD8gV2hhdCBkaWQgSSBzYXk/IFdoeSwgSSBsZWQgdGhlIGp1cnkgY2xlYW4gYXdheQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHF1ZXN0aW9uOyBmaWxjaGVkIHRoZSB3aG9sZSBjYXNlIGZyb20gdGhlbSwgYW5kIGNhbWUgb2ZmIHRyaXVtcGhhbnQuJwogICAgICAgICAgICAgICAgICAgIOKAnSBUaGVuIGRvIG5vdCBmb2xsb3cgbXkgZXhhbXBsZTogYWRkcmVzcyB5b3VyIGRlZmVuY2UgdG8gdGhlIHJlYWwKICAgICAgICAgICAgICAgICAgICBpc3N1ZS4gWW91IGhhZCB5b3VyIG9wcG9ydHVuaXR5IG9mIGRlbm91bmNpbmcgYW5kIHNheWluZyB3aGF0IHlvdSBjaG9zZSB3aGVuIHlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgdGhlIHByb3NlY3V0b3IuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.243'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vcmVvdmVyLCBoYXZpbmcgbm8gd2l0bmVzc2VzIHRvIHByb2R1Y2UgaW4gc3VwcG9ydCBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbnMsIHlvdSBxdW90ZWQgdmVyc2VzIHRvIHRoZSBqdXJ5OjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPlJ1bW9yLCB0aGF0IG1hbnkgcGVvcGxlIHNwcmVhZCBhYnJvYWQsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkRpZXRoIG5vdCB3aG9sbHk6IFJ1bW9yIGlzIGEgZ29kLjwvbD4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5SdW1vciwgdGhhdCBtYW55IHBlb3BsZSBzcHJlYWQgYWJyb2FkLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EaWV0aCBub3Qgd2hvbGx5OiBSdW1vciBpcyBhIGdvZC48L2w+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBub3csIEFlc2NoaW5lcywgZXZlcnlib2R5IHNheXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBtYWRlIG1vbmV5IG91dCBvZiB5b3VyIGVtYmFzc3k7IHNvLCBvZiBjb3Vyc2UsIGFzIGFnYWluc3QgeW91LCB0aGUgcnVtb3IKICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbnkgcGVvcGxlIHNwcmVhZCBhYnJvYWQgZG9lcyBub3Qgd2hvbGx5IGRpZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.244'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDQiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgaG93IGZhciBtb3JlIG51bWVyb3VzIGFyZSB5b3VyIGFjY3VzZXJzCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aG9zZSBvZiBUaW1hcmNodXMsIG9ic2VydmUgdGhpcy4gSGUgd2FzIG5vdCBrbm93biBldmVuIHRvIGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnM7IGJ1dCB0aGVyZSBpcyBub3QgYSBtYW4gaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IG9yIGluIGZvcmVpZ24gcGFydHMgd2hvIGRvZXMgbm90IGF2ZXIgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBtYWRlIGdhaW4gb2YgeW91ciBlbWJhc3N5LiBJZiBydW1vciBpcyB0cnVlLCB0aGUgcnVtb3Igb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbXVsdGl0dWRlIGlzIGFnYWluc3QgeW91OyBhbmQgZm9yIHRoZSB2ZXJhY2l0eSwgYW5kIGV2ZW4gdGhlIGRpdmluaXR5LCBvZiBydW1vciwKICAgICAgICAgICAgICAgICAgICBhbmQgZm9yIHRoZSB3aXNkb20gb2YgdGhlIHBvZXQgd2hvIGNvbXBvc2VkIHRoZXNlIHZlcnNlcywgd2UgaGF2ZSB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIGFzc3VyYW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.245'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIHRoZXNlIGhlcm9pY3MgaGUgbmF0dXJhbGx5IHByb2NlZWRzIHRvIGNvbGxlY3QgYW5kIGRlY2xhaW0gc29tZSBpYW1iaWMKICAgICAgICAgICAgICAgICAgICBwb2V0cnksIGZvciBpbnN0YW5jZTo8Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5XaG9zbyBkZWxpZ2h0cyB0byB3YWxrIHdpdGggd2lja2VkIG1lbiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIGhpbSBJIGFzayBub3QsIGZvciBJIGtub3cgaGltIHN1Y2g8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIGFyZSB0aGUgbWVuIHdob3NlIGNvbnZlcnNlIHBsZWFzZXMgaGltLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+VW5rbm93bjwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8L2NpdD5UaGVuIGZvbGxvd3MgdGhlIHBhc3NhZ2UgYWJvdXQg4oCcdGhlIG1hbiB3aG8gZnJlcXVlbnRlZCBjb2NrcGl0cywKICAgICAgICAgICAgICAgICAgICBhbmQgY29uc29ydGVkIHdpdGggUGl0dGFsYWN1cyzigJ0gYW5kIHNvIGZvcnRoOyDigJxkbyB5b3Ugbm90CiAgICAgICAgICAgICAgICAgICAga25vdyB3aGF0IGhpcyBjaGFyYWN0ZXIgaXM/4oCdIFdlbGwsIEFlc2NoaW5lcywgeW91ciBpYW1iaWNzIHNoYWxsIG5vdwogICAgICAgICAgICAgICAgICAgIHNlcnZlIG15IHR1cm4gZm9yIGFuIG9ic2VydmF0aW9uIGFib3V0IHlvdS4gSSBzaGFsbCBiZSBzcGVha2luZyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3ByaWV0eSBvZiB0aGUgVHJhZ2ljIE11c2UsIHdoZW4gSSBzYXkgdG8gdGhlIGp1cnk6IFdob3NvIGRlbGlnaHRzIHRvIHdhbGsKICAgICAgICAgICAgICAgICAgICDvvIhlc3BlY2lhbGx5IG9uIGFuIGVtYmFzc3nvvIkgd2l0aCBQaGlsb2NyYXRlcywgb2YgaGltIEkgYXNrIG5vdCwKICAgICAgICAgICAgICAgICAgICBmb3IgSSBrbm93IGhpbSB3ZWxs4oCUdG8gaGF2ZSB0YWtlbiBicmliZXMsIGFzIFBoaWxvY3JhdGVzIGRpZCwgd2hvIG1hZGUKICAgICAgICAgICAgICAgICAgICBjb25mZXNzaW9uLiA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJ2ZXJzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIG1ldD0idSI+V2hvc28gZGVsaWdodHMgdG8gd2FsayB3aXRoIHdpY2tlZCBtZW4sPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiBoaW0gSSBhc2sgbm90LCBmb3IgSSBrbm93IGhpbSBzdWNoPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBhcmUgdGhlIG1lbiB3aG9zZSBjb252ZXJzZSBwbGVhc2VzIGhpbS48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5XaG9zbyBkZWxpZ2h0cyB0byB3YWxrIHdpdGggd2lja2VkIG1lbiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9mIGhpbSBJIGFzayBub3QsIGZvciBJIGtub3cgaGltIHN1Y2g8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIGFyZSB0aGUgbWVuIHdob3NlIGNvbnZlcnNlIHBsZWFzZXMgaGltLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+VW5rbm93bjwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.246'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldlbGwsIHdoZW4gaGUgdHJpZXMgdG8gaW5zdWx0IG90aGVyIHBlb3BsZSBieSBjYWxsaW5nIHRoZW0gc3BlZWNoLW1ha2VycyBhbmQKICAgICAgICAgICAgICAgICAgICBjaGFybGF0YW5zLCBoZSBzaGFsbCBiZSBzaG93biB0byBiZSBvcGVuIHRvIHRoZSBzYW1lIHJlcHJvYWNoLiBGb3IgdGhvc2UgaWFtYmljcwogICAgICAgICAgICAgICAgICAgIGNvbWUgZnJvbSB0aGUgUGhvZW5peCBvZiBFdXJpcGlkZXMuIFRoYXQgcGxheSB3YXMgbmV2ZXIgYWN0ZWQgYnkgVGhlb2RvcnVzIG9yCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvZGVtdXMsIGZvciB3aG9tIEFlc2NoaW5lcyBjb21tb25seSB0b29rIHRoZSBpbmZlcmlvciBwYXJ0czsgTW9sb24gaG93ZXZlcgogICAgICAgICAgICAgICAgICAgIHByb2R1Y2VkIGl0LCBhbmQgcGVyaGFwcyBzb21lIG90aGVyIHBsYXllcnMgb2YgdGhlIG9sZCBzY2hvb2wuIEJ1dCBTb3Bob2NsZXMnCiAgICAgICAgICAgICAgICAgICAgQW50aWdvbmUgd2FzIGZyZXF1ZW50bHkgYWN0ZWQgYnkgVGhlb2RvcnVzLCBhbmQgYWxzbyBieSBBcmlzdG9kZW11czsgYW5kIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBwbGF5IHRoZXJlIGFyZSBzb21lIGlhbWJpYyBsaW5lcywgYWRtaXJhYmx5IGFuZCBtb3N0IGluc3RydWN0aXZlbHkgY29tcG9zZWQuCiAgICAgICAgICAgICAgICAgICAgVGhhdCBwYXNzYWdlIEFlc2NoaW5lcyBvbWl0dGVkIHRvIHF1b3RlLCB0aG91Z2ggaGUgaGFzIG9mdGVuIHNwb2tlbiB0aGUgbGluZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGtub3dzIHRoZW0gYnkgaGVhcnQ7IDwvdHJhbnNsYXRpb24+"
translation['19.Concl.247'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDciIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIG9mIGNvdXJzZSB5b3UKICAgICAgICAgICAgICAgICAgICBhcmUgYXdhcmUgdGhhdCwgaW4gYWxsIHRyYWdpYyBkcmFtYXMsIGl0IGlzIHRoZSBlbnZpYWJsZSBwcml2aWxlZ2Ugb2YgdGhpcmQtcmF0ZQogICAgICAgICAgICAgICAgICAgIGFjdG9ycyB0byBjb21lIG9uIGFzIHR5cmFudHMsIGNhcnJ5aW5nIHRoZWlyIHJveWFsIHNjZXB0ZXJzLiBOb3cgeW91IHNoYWxsIHdlaWdoCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lcml0cyBvZiB0aGUgdmVyc2VzIHdoaWNoIHdlcmUgc3BlY2lhbGx5IHdyaXR0ZW4gYnkgdGhlIHBvZXQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvZiBDcmVvbi1BZXNjaGluZXMsIHRob3VnaCBoZSBmb3Jnb3QgdG8gcmVwZWF0IHRoZW0gdG8gaGltc2VsZiBpbgogICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gd2l0aCBoaXMgZW1iYXNzeSwgYW5kIGRpZCBub3QgcXVvdGUgdGhlbSB0byB0aGUganVyeS4gUmVhZC48Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklhbWJpY3MgZnJvbSB0aGUgQW50aWdvbmUgb2YgU29waG9jbGVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5XaG8gc2hhbGwgYXBwcmFpc2UgdGhlIHNwaXJpdCBvZiBhIG1hbiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhpcyBtaW5kLCBoaXMgdGVtcGVyLCB0aWxsIGhlIGhhdGggYmVlbiBwcm92ZWQ8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkluIG1pbmlzdHJ5IG9mIGxhd3MgYW5kIGdvdmVybm1lbnQ/PC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGhvbGQsIGFuZCBsb25nIGhhdmUgaGVsZCwgdGhhdCBtYW4gYSBrbmF2ZTwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvLCBzdGFuZGluZyBhdCB0aGUgaGVsbSBvZiBzdGF0ZSwgZGVzZXJ0czwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHdpc2VzdCBjb3Vuc2VsLCBvciBpbiBjcmF2ZW4gZmVhcjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgYW55LCBzZXRzIGEgY3VyYiB1cG9uIGhpcyBsaXBzLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIHB1dHMgaGlzIGZyaWVuZCBhYm92ZSBoaXMgZmF0aGVybGFuZDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBzY29ybiBhcyBub3RoaW5nIHdvcnRoOyBhbmQgZm9yIG15c2VsZiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3MgYWxsLXNlZWluZyBIZWF2ZW4hIEkgd2lsbCBub3QgaG9sZDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TXkgcGVhY2Ugd2hlbiBJIGRlc2NyeSB0aGUgY3Vyc2UgdGhhdCBjb21lczwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VG8gc2FwIG15IGNpdGl6ZW5zJyBzZWN1cml0eTs8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk5vciB3aWxsIEkgY291bnQgYXMga2luIG15IGNvdW50cnkncyBmb2VzOzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdlbGwgSSB3b3Qgb3VyIGNvdW50cnkgaXMgdGhlIHNoaXA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgc2F2ZXMgdXMgYWxsLCBzYWlsaW5nIG9uIGV2ZW4ga2VlbDo8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkVtYmFya2VkIGluIGhlciB3ZSBmZWFyIG5vIGRlYXJ0aCBvZiBmcmllbmRzLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+U29waC4gQW50LiAxNzUtMTkwPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDwvY2l0PgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklhbWJpY3MgZnJvbSB0aGUgQW50aWdvbmUgb2YgU29waG9jbGVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5XaG8gc2hhbGwgYXBwcmFpc2UgdGhlIHNwaXJpdCBvZiBhIG1hbiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhpcyBtaW5kLCBoaXMgdGVtcGVyLCB0aWxsIGhlIGhhdGggYmVlbiBwcm92ZWQ8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkluIG1pbmlzdHJ5IG9mIGxhd3MgYW5kIGdvdmVybm1lbnQ/PC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JIGhvbGQsIGFuZCBsb25nIGhhdmUgaGVsZCwgdGhhdCBtYW4gYSBrbmF2ZTwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvLCBzdGFuZGluZyBhdCB0aGUgaGVsbSBvZiBzdGF0ZSwgZGVzZXJ0czwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHdpc2VzdCBjb3Vuc2VsLCBvciBpbiBjcmF2ZW4gZmVhcjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgYW55LCBzZXRzIGEgY3VyYiB1cG9uIGhpcyBsaXBzLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIHB1dHMgaGlzIGZyaWVuZCBhYm92ZSBoaXMgZmF0aGVybGFuZDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBzY29ybiBhcyBub3RoaW5nIHdvcnRoOyBhbmQgZm9yIG15c2VsZiw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3MgYWxsLXNlZWluZyBIZWF2ZW4hIEkgd2lsbCBub3QgaG9sZDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TXkgcGVhY2Ugd2hlbiBJIGRlc2NyeSB0aGUgY3Vyc2UgdGhhdCBjb21lczwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VG8gc2FwIG15IGNpdGl6ZW5zJyBzZWN1cml0eTs8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk5vciB3aWxsIEkgY291bnQgYXMga2luIG15IGNvdW50cnkncyBmb2VzOzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdlbGwgSSB3b3Qgb3VyIGNvdW50cnkgaXMgdGhlIHNoaXA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgc2F2ZXMgdXMgYWxsLCBzYWlsaW5nIG9uIGV2ZW4ga2VlbDo8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkVtYmFya2VkIGluIGhlciB3ZSBmZWFyIG5vIGRlYXJ0aCBvZiBmcmllbmRzLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWFtYmljcyBmcm9tIHRoZSBBbnRpZ29uZSBvZiBTb3Bob2NsZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPldobyBzaGFsbCBhcHByYWlzZSB0aGUgc3Bpcml0IG9mIGEgbWFuLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzIG1pbmQsIGhpcyB0ZW1wZXIsIHRpbGwgaGUgaGF0aCBiZWVuIHByb3ZlZDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gbWluaXN0cnkgb2YgbGF3cyBhbmQgZ292ZXJubWVudD88L2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkkgaG9sZCwgYW5kIGxvbmcgaGF2ZSBoZWxkLCB0aGF0IG1hbiBhIGtuYXZlPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaG8sIHN0YW5kaW5nIGF0IHRoZSBoZWxtIG9mIHN0YXRlLCBkZXNlcnRzPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgd2lzZXN0IGNvdW5zZWwsIG9yIGluIGNyYXZlbiBmZWFyPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiBhbnksIHNldHMgYSBjdXJiIHVwb24gaGlzIGxpcHMuPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaG8gcHV0cyBoaXMgZnJpZW5kIGFib3ZlIGhpcyBmYXRoZXJsYW5kPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JIHNjb3JuIGFzIG5vdGhpbmcgd29ydGg7IGFuZCBmb3IgbXlzZWxmLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzcyBhbGwtc2VlaW5nIEhlYXZlbiEgSSB3aWxsIG5vdCBob2xkPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5NeSBwZWFjZSB3aGVuIEkgZGVzY3J5IHRoZSBjdXJzZSB0aGF0IGNvbWVzPC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UbyBzYXAgbXkgY2l0aXplbnMnIHNlY3VyaXR5OzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIHdpbGwgSSBjb3VudCBhcyBraW4gbXkgY291bnRyeSdzIGZvZXM7PC9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3Igd2VsbCBJIHdvdCBvdXIgY291bnRyeSBpcyB0aGUgc2hpcDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBzYXZlcyB1cyBhbGwsIHNhaWxpbmcgb24gZXZlbiBrZWVsOjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RW1iYXJrZWQgaW4gaGVyIHdlIGZlYXIgbm8gZGVhcnRoIG9mIGZyaWVuZHMuPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5Tb3BoLiBBbnQuIDE3NS0xOTA8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.248'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFlc2NoaW5lcyBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgcXVvdGUgYW55IG9mIHRoZXNlIGxpbmVzIGZvciBoaXMgb3duIGluc3RydWN0aW9uIG9uIGhpcyBlbWJhc3N5LiBIZSBwdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgaG9zcGl0YWxpdHkgYW5kIGZyaWVuZHNoaXAgb2YgUGhpbGlwIGZhciBhYm92ZSBoaXMgY291bnRyeSzigJRhbmQgZm91bmQKICAgICAgICAgICAgICAgICAgICBpdCBtb3JlIHByb2ZpdGFibGUuIEhlIGJhZGUgYSBsb25nIGZhcmV3ZWxsIHRvIHRoZSBzYWdlIFNvcGhvY2xlczsgYW5kIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBzYXcgdGhlIGN1cnNlIHRoYXQgY2FtZSzigJR0byB3aXQsIHRoZSBhcm15IGFkdmFuY2luZyB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgIFBob2NpYW5zLOKAlGhlIHNvdW5kZWQgbm8gd2FybmluZywgc2VudCBubyB0aW1lbHkgcmVwb3J0OyByYXRoZXIgaGUKICAgICAgICAgICAgICAgICAgICBoZWxwZWQgYm90aCB0byBjb25jZWFsIGFuZCB0byBleGVjdXRlIHRoZSBkZXNpZ24sIGFuZCBvYnN0cnVjdGVkIHRob3NlIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgdG8gdGVsbCB0aGUgdHJ1dGguIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.249'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDkiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZm9yZ290IHRoZSBzaGlwCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzYXZlczsgZm9yZ290IHRoYXQgZW1iYXJrZWQgaW4gaGVyIGhpcyBvd24gbW90aGVyLCBwZXJmb3JtaW5nIGhlciByaXRlcywKICAgICAgICAgICAgICAgICAgICBzY291cmluZyBoZXIgY2FuZGlkYXRlcywgbWFraW5nIGhlciBwaXR0YW5jZSBmcm9tIHRoZSBzdWJzdGFuY2Ugb2YgaGVyCiAgICAgICAgICAgICAgICAgICAgZW1wbG95ZXJzLCBoZXJlIHJlYXJlZCBoZXIgaG9wZWZ1bCBicm9vZCB0byBncmVhdG5lc3MuIEhlcmUsIHRvbywgaGlzIGZhdGhlciwKICAgICAgICAgICAgICAgICAgICB3aG8ga2VwdCBhbiBpbmZhbnQtc2Nob29sLCBsaXZlZCBhcyBiZXN0IGhlIGNvdWxkLOKAlG5leHQgZG9vciB0byBIZXJvcwogICAgICAgICAgICAgICAgICAgIHRoZSBwaHlzaWNpYW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlcm9zIHRoZSBQaHlzaWNpYW46IG9yIHRoZSBIZXJvCiAgICAgICAgICAgICAgICAgICAgICAgIFBoeXNpY2lhbjsgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTI5IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjEyOTwvYmlibD4sIGFuZCBub3RlLjwvbm90ZT4gYXMKICAgICAgICAgICAgICAgICAgICBJIGFtIHRvbGQgYnkgZWxkZXJseSBpbmZvcm1hbnRzLOKAlGFueWhvdywgaGUgbGl2ZWQgaW4gdGhpcyBjaXR5LiBUaGUKICAgICAgICAgICAgICAgICAgICBvZmZzcHJpbmcgb2YgdGhpcyBwYWlyIGVhcm5lZCBhIGxpdHRsZSBtb25leSBhcyBqdW5pb3IgY2xlcmtzIGFuZCBtZXNzZW5nZXJzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHB1YmxpYyBvZmZpY2VzLCB1bnRpbCwgYnkgeW91ciBmYXZvciwgdGhleSBiZWNhbWUgZnVsbC1mbGVkZ2VkIGNsZXJrcywgd2l0aAogICAgICAgICAgICAgICAgICAgIGZyZWUgbWFpbnRlbmFuY2UgZm9yIHR3byB5ZWFycyBpbiB0aGUgUm90dW5kYS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEyOSIgdmFsaWQ9InllcyI+RGVtLiAxOC4xMjk8L2JpYmw+LCBhbmQgbm90ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFByeXRhbmV1bSBvciBUb3duIEhhbGwuPC9ub3RlPiBGaW5hbGx5LCBmcm9tIHRoaXMgc2FtZSBjaXR5IEFlc2NoaW5lcwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGhpcyBjb21taXNzaW9uIGFzIGFtYmFzc2Fkb3IuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.250'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTAiIHVuaXQ9InNlY3Rpb24iIC8+SGUKICAgICAgICAgICAgICAgICAgICBjYXJlZCBmb3Igbm9uZSBvZiB0aGVzZSBvYmxpZ2F0aW9uczsgaGUgdG9vayBubyB0aG91Z2h0IHRoYXQgdGhlIHNoaXAgb2Ygc3RhdGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgc2FpbCBvbiBldmVuIGtlZWw7IGhlIHNjdXR0bGVkIGhlciBhbmQgc2FuayBoZXIsIGFuZCBzbyBmYXIgYXMgaW4gaGltIGxheQogICAgICAgICAgICAgICAgICAgIHB1dCBoZXIgYXQgdGhlIG1lcmN5IG9mIGhlciBmb2VzLiBBcmUgbm90IHlvdSB0aGVuIGEgY2hhcmxhdGFuPyBZZXMsIGFuZCBhIHZpbGUKICAgICAgICAgICAgICAgICAgICBvbmUgdG9vLiBBcmUgbm90IHlvdSBhIHNwZWVjaC13cml0ZXI/IFllcywgYW5kIGFuIHVucHJpbmNpcGxlZCBvbmUgdG8gYm9vdC4gWW91CiAgICAgICAgICAgICAgICAgICAgcGFzc2VkIG92ZXIgdGhlIHNwZWVjaCB0aGF0IHlvdSBzbyBvZnRlbiBzcG9rZSBvbiB0aGUgc3RhZ2UsIGFuZCBrbmV3IGJ5IGhlYXJ0OwogICAgICAgICAgICAgICAgICAgIHlvdSBodW50ZWQgdXAgcmFudCB0aGF0IGluIGFsbCB5b3VyIGNhcmVlciB5b3UgaGFkIG5ldmVyIGRlY2xhaW1lZCBpbiBjaGFyYWN0ZXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIHJldml2ZWQgaXQgZm9yIHRoZSB1bmRvaW5nIG9mIHlvdXIgb3duIGZlbGxvdy1jaXRpemVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.251'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCB1cyBub3cgdHVybiB0bwogICAgICAgICAgICAgICAgICAgIGhpcyByZW1hcmtzIGFib3V0IFNvbG9uLiBCeSB3YXkgb2YgY2Vuc3VyZSBhbmQgcmVwcm9hY2ggb2YgdGhlIGltcGV0dW91cyBzdHlsZQogICAgICAgICAgICAgICAgICAgIG9mIFRpbWFyY2h1cywgaGUgYWxsZWdlZCB0aGF0IGEgc3RhdHVlIG9mIFNvbG9uLCB3aXRoIGhpcyByb2JlIGRyYXduIHJvdW5kIGhpbQogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgaGFuZCBlbmZvbGRlZCwgaGFkIGJlZW4gc2V0IHVwIHRvIGV4ZW1wbGlmeSB0aGUgc2VsZi1yZXN0cmFpbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhciBvcmF0b3JzIG9mIHRoYXQgZ2VuZXJhdGlvbi4gUGVvcGxlIHdobyBsaXZlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4sIGhvd2V2ZXIsIGluZm9ybSB1cyB0aGF0IHRoaXMgc3RhdHVlCiAgICAgICAgICAgICAgICAgICAgd2FzIGVyZWN0ZWQgbGVzcyB0aGFuIGZpZnR5IHllYXJzIGFnby4gTm93IGZyb20gdGhlIGFnZSBvZiBTb2xvbiB0byB0aGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGRheSBhYm91dCB0d28gaHVuZHJlZCBhbmQgZm9ydHkgeWVhcnMgaGF2ZSBlbGFwc2VkLCBzbyB0aGF0IHRoZSBzY3VscHRvciB3aG8KICAgICAgICAgICAgICAgICAgICBkZXNpZ25lZCB0aGF0IGRpc3Bvc2l0aW9uIG9mIGRyYXBlcnkgaGFkIG5vdCBsaXZlZCBpbiBTb2xvbidzCiAgICAgICAgICAgICAgICAgICAgdGltZSzigJRub3IgZXZlbiBoaXMgZ3JhbmQtZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.252'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTIiIHVuaXQ9InNlY3Rpb24iIC8+SGUKICAgICAgICAgICAgICAgICAgICBpbGx1c3RyYXRlZCBoaXMgcmVtYXJrcyBieSByZXByZXNlbnRpbmcgdG8gdGhlIGp1cnkgdGhlIGF0dGl0dWRlIG9mIHRoZSBzdGF0dWU7CiAgICAgICAgICAgICAgICAgICAgYnV0IGhpcyBtaW1pY3J5IGRpZCBub3QgaW5jbHVkZSB3aGF0LCBwb2xpdGljYWxseSwgd291bGQgaGF2ZSBiZWVuIG11Y2ggbW9yZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdGFibGUgdGhhbiBhbiBhdHRpdHVkZSzigJRhIHZpZXcgb2YgU29sb24ncyBzcGlyaXQgYW5kIHB1cnBvc2UsIHNvCiAgICAgICAgICAgICAgICAgICAgd2lkZWx5IGRpZmZlcmVudCBmcm9tIGhpcyBvd24uIFdoZW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiBoYWQgcmV2b2x0ZWQsIGFuZCB0aGUgQXRoZW5pYW4gcGVvcGxlIGhhZCBmb3JiaWRkZW4KICAgICAgICAgICAgICAgICAgICB1bmRlciBwZW5hbHR5IG9mIGRlYXRoIGFueSBwcm9wb3NhbCBmb3IgaXRzIHJlY292ZXJ5LCBTb2xvbiwgYWNjZXB0aW5nIHRoZSByaXNrCiAgICAgICAgICAgICAgICAgICAgb2YgZGVhdGgsIGNvbXBvc2VkIGFuZCByZWNpdGVkIGFuIGVsZWdpYWMgcG9lbSwgYW5kIHNvIHJldHJpZXZlZCB0aGF0IGNvdW50cnkKICAgICAgICAgICAgICAgICAgICBmb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCByZW1vdmVkIGEgc3RhbmRpbmcKICAgICAgICAgICAgICAgICAgICBkaXNob25vci4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.253'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTMiIHVuaXQ9InNlY3Rpb24iIC8+QWVzY2hpbmVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgZ2F2ZQogICAgICAgICAgICAgICAgICAgIGF3YXkgYW5kIHNvbGQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCBhIGNpdHkKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgS2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gYW5kIGFsbAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gcmVjb2duaXplZCBhcyB5b3VycywKICAgICAgICAgICAgICAgICAgICBzcGVha2luZyBpbiBzdXBwb3J0IG9mIHRoZSByZXNvbHV0aW9uIG1vdmVkIGJ5IFBoaWxvY3JhdGVzLiBJdCB3YXMgaGlnaGx5CiAgICAgICAgICAgICAgICAgICAgYmVjb21pbmcgaW4gaGltLCB3YXMgaXQgbm90IHRvIHJlbWluZCB1cyBvZiBTb2xvbj8gTm90IGNvbnRlbnQgd2l0aCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWFuY2UgYXQgaG9tZSwgaGUgd2VudCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCBuZXZlciBtZW50aW9uZWQgdGhlIHBsYWNlIHdpdGggd2hpY2ggaGlzIG1pc3Npb24KICAgICAgICAgICAgICAgICAgICB3YXMgY29uY2VybmVkLiBTbyBoZSBzdGF0ZWQgaW4gaGlzIG93biByZXBvcnQsIGZvciBubyBkb3VidCB5b3UgcmVtZW1iZXIgaG93IGhlCiAgICAgICAgICAgICAgICAgICAgc2FpZCDigJxJLCB0b28sIGhhZCBzb21ldGhpbmcgdG8gc2F5IGFib3V0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgYnV0IEkgbGVmdCBpdCBvdXQgdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIGEgY2hhbmNlIG9mIGRlYWxpbmcgd2l0aCB0aGF0IHN1YmplY3Qu4oCdIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.254'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTQiIHVuaXQ9InNlY3Rpb24iIC8+SSByb3NlIGFuZCB0b2xkIHlvdSB0aGF0IGhlIGhhZCBuZXZlciBvbmNlIGxlZnQgdG8KICAgICAgICAgICAgICAgICAgICBtZSBhbnl0aGluZyB0aGF0IGhlIHdhbnRlZCB0byBzYXkgdG8gUGhpbGlwOiBoZSB3b3VsZCBzb29uZXIgZ2l2ZSBhIG1hbiBhIHNoYXJlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGxpZmUtYmxvb2QgdGhhbiBhIHNoYXJlIG9mIGhpcyBzcGVlY2guIFRoZSB0cnV0aCBpcyB0aGF0LCBoYXZpbmcgYWNjZXB0ZWQKICAgICAgICAgICAgICAgICAgICBtb25leSwgaGUgY291bGQgaGFyZGx5IGNvbmZyb250IFBoaWxpcCwgd2hvIGdhdmUgaGltIHRoZSBtb25leSBvbiBwdXJwb3NlIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBtaWdodCBub3QgcmVzdG9yZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgTm93LCBwbGVhc2UsIHRha2UgYW5kIHJlYWQgdGhlc2UgZWxlZ2lhYyB2ZXJzZXMgb2YgU29sb24sIHRvIHNob3cgdGhlIGp1cnkgaG93CiAgICAgICAgICAgICAgICAgICAgU29sb24gZGV0ZXN0ZWQgcGVvcGxlIGxpa2UgdGhlIGRlZmVuZGFudC4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.255'] = ""
translation['19.Concl.256'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGVhcmQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoYXQgU29sb24KICAgICAgICAgICAgICAgICAgICBzYXlzIG9mIG1lbiBvZiBzdWNoIGNoYXJhY3RlciwgYW5kIG9mIHRoZSBnb2RzIHdobyBwcm90ZWN0IG91ciBjaXR5LiBUaGF0IHNheWluZwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRoZSBwcm90ZWN0aW9uIG9mIG91ciBjaXR5IGJ5IHRoZSBnb2RzIGlzLCBhcyBJIGhvcGUgYW5kIGZpcm1seSBiZWxpZXZlLAogICAgICAgICAgICAgICAgICAgIGV0ZXJuYWxseSB0cnVlOyBhbmQgaW4gYSBtYW5uZXIgSSB0aGluayB0aGF0IGV2ZW4gdGhlIGV2ZW50cyBvZiB0aGlzIHNjcnV0aW55CiAgICAgICAgICAgICAgICAgICAgZnVybmlzaCB0aGUgY29tbW9ud2VhbHRoIHdpdGggYSBuZXcgZXhhbXBsZSBvZiB0aGUgZGl2aW5lIGZhdm9yLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.257'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGNvbnNpZGVyIHRoaXM6IGEgbWFuIHdobyBoYWQgc2NhbmRhbG91c2x5CiAgICAgICAgICAgICAgICAgICAgbWlzY29uZHVjdGVkIGhpcyBlbWJhc3N5LCBhbmQgd2hvIGhhZCBnaXZlbiBhd2F5IHdob2xlIHByb3ZpbmNlcyBpbiB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBnb2RzIHNob3VsZCBoYXZlIGJlZW4gd29yc2hpcHBlZCBieSB5b3UgYW5kIHlvdXIgYWxsaWVzLCBkaXNmcmFuY2hpc2VkIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgcHJvc2VjdXRlZCBoaW0gYXQgZHV0eSdzIGNhbGwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkRlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydHMgdGhhdCBUaW1hcmNodXMgcHJvc2VjdXRlZCBBZXNjaGluZXMgZnJvbSBwdXJlbHkgcGF0cmlvdGljIG1vdGl2ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBHcmVlaywgaG93ZXZlciwgYWRtaXRzIG9mIG1vcmUgdGhhbiBvbmUgaW50ZXJwcmV0YXRpb24uPC9ub3RlPiBBbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoYXQ/IFRoYXQgaGUgaGltc2VsZiBtYXkgd2luIG5laXRoZXIgY29tcGFzc2lvbiBub3IgaW5kdWxnZW5jZSBmb3IgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHRyYW5zZ3Jlc3Npb25zLiBNb3Jlb3ZlciwgaW4gYWNjdXNpbmcgaGltLCBoZSB3ZW50IG91dCBvZiBoaXMgd2F5IHRvIHNwZWFrIGV2aWwKICAgICAgICAgICAgICAgICAgICBvZiBtZSwgYW5kIGFnYWluIGF0IHRoZSBBc3NlbWJseSBoZSBkZWNsYXJlZCBoZSB3b3VsZCBsYXkgYW4gaW5kaWN0bWVudCwgd2l0aAogICAgICAgICAgICAgICAgICAgIG90aGVyIHN1Y2ggdGhyZWF0cy4gQW5kIHdoeT8gSW4gb3JkZXIgdGhhdCB5b3UgbWF5IGV4dGVuZCB5b3VyIGJlc3QgaW5kdWxnZW5jZQogICAgICAgICAgICAgICAgICAgIHRvIG1lIHdoZW4gSSwgd2hvIGhhdmUgdGhlIG1vc3QgYWNjdXJhdGUga25vd2xlZGdlIG9mIGhpcyB2aWxsYWluaWVzLCBhbmQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHdhdGNoZWQgaGltIGNsb3NlbHkgdGhyb3VnaG91dCwgYXBwZWFyIGFzIGhpcyBwcm9zZWN1dG9yLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.258'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTgiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHRoYW5rcyB0byBoaXMgY29udGludWFsIGV2YXNpb25zLCBoZSBoYXMgYXQKICAgICAgICAgICAgICAgICAgICBsYXN0IGJlZW4gYnJvdWdodCB0byB0cmlhbCBhdCB0aGUgdmVyeSBtb21lbnQgd2hlbiwgZm9yIHRoZSBzYWtlIG9mIHRoZSBmdXR1cmUKICAgICAgICAgICAgICAgICAgICBpZiBmb3Igbm8gb3RoZXIgcmVhc29uLCB5b3UgY2Fubm90IHBvc3NpYmx5LCBvciBjb25zaXN0ZW50bHkgd2l0aCB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5LCBhbGxvdyBhIG1hbiBzbyBzdGVlcGVkIGluIGNvcnJ1cHRpb24gdG8gZ28gc2NvdC1mcmVlOyBmb3IsIHdoaWxlIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzIHlvdXIgZHV0eSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICBhYmhvciBhbmQgdG8gY2hhc3Rpc2UgdHJhaXRvcnMgYW5kIGJyaWJlLW1vbmdlcnMsIGEgY29udmljdGlvbiBhdCB0aGlzIGNyaXNpcwogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgcGVjdWxpYXJseSBzZWFzb25hYmxlIGFuZCBwcm9maXRhYmxlIHRvIGFsbCBtYW5raW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.259'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTkiIHVuaXQ9InNlY3Rpb24iIC8+QSBzdHJhbmdlIGFuZCBkaXN0cmVzc2luZyBlcGlkZW1pYywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFzIGludmFkZWQgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgY2FsbGluZyBmb3IgZXh0cmFvcmRpbmFyeQogICAgICAgICAgICAgICAgICAgIGdvb2QgZm9ydHVuZSwgYW5kIGZvciB0aGUgbW9zdCBhbnhpb3VzIHRyZWF0bWVudCBvbiB5b3VyIHBhcnQuIFRoZSBtYWduYXRlcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzZXZlcmFsIGNpdGllcywgd2hvIGFyZSBlbnRydXN0ZWQgd2l0aCBwb2xpdGljYWwgYXV0aG9yaXR5LCBhcmUgYmV0cmF5aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIGluZGVwZW5kZW5jZSwgdW5oYXBweSBtZW4hIFRoZXkgYXJlIGltcG9zaW5nIG9uIHRoZW1zZWx2ZXMgYSBzZXJ2aXR1ZGUKICAgICAgICAgICAgICAgICAgICBvZiB0aGVpciBvd24gY2hvb3NpbmcsIGRpc2d1aXNpbmcgaXQgYnkgc3BlY2lvdXMgbmFtZXMsIGFzIHRoZSBmcmllbmRzaGlwIG9mCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwLCBmcmF0ZXJuaXR5LCBnb29kLWZlbGxvd3NoaXAsIGFuZCBzdWNoIGZsdW1tZXJ5LiBUaGUgcmVzdCBvZiB0aGUgcGVvcGxlLAogICAgICAgICAgICAgICAgICAgIGFuZCBhbGwgdGhlIHZhcmlvdXMgYXV0aG9yaXRpZXMgb2YgdGhlIHNldmVyYWwgc3RhdGVzLCBpbnN0ZWFkIG9mIGNoYXN0aXNpbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSBwZXJzb25zIGFuZCBwdXR0aW5nIHRoZW0gdG8gZGVhdGggb24gdGhlIHNwb3QsIGFzIHRoZXkgb3VnaHQsIGFyZSBmaWxsZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGFkbWlyYXRpb24gYW5kIGVudnksIGFuZCB3b3VsZCBhbGwgbGlrZSB0byBiZSBQaGlsaXAncyBmcmllbmRzIHRvby4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.260'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjAiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHRoaXMgaW5mYXR1YXRpb24sIHRoaXMgaGFua2VyaW5nCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgUGhpbGlwLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB1bnRpbAogICAgICAgICAgICAgICAgICAgIHZlcnkgcmVjZW50bHkgaGFkIG9ubHkgZGVzdHJveWVkIHRoZSBwcmVkb21pbmFuY2Ugb2YgdGhlIFRoZXNzYWxpYW5zIGFuZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsIHByZXN0aWdlLCBidXQgbm93IGl0IGlzIGFscmVhZHkgc2FwcGluZyB0aGVpciBpbmRlcGVuZGVuY2UsIGZvciBzb21lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY2l0YWRlbHMgYXJlIGFjdHVhbGx5IGdhcnJpc29uZWQgYnkgTWFjZWRvbmlhbnMuIEl0IGhhcyBpbnZhZGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXN1czwvcGxhY2VOYW1lPiBhbmQgY2F1c2VkIHRoZSBtYXNzYWNyZXMgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+LiBJdCBpbmZlY3RlZCB0aG9zZSB1bmhhcHB5CiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHdpdGggc3VjaCBkZWxpcmlvdXMgaW5zYW5pdHkgdGhhdCwgdG8gb3Zlcm1hc3RlciBvbmUgYW5vdGhlciBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBncmF0aWZ5IFBoaWxpcCwgdGhleSBzdGFpbmVkIHRoZWlyIGhhbmRzIHdpdGggdGhlIGJsb29kIG9mIHRoZWlyIG93biBraW5kcmVkIGFuZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVucy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.261'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaGFzIG5vdCBzdG9wcGVkIHRoZXJlLiBJdAogICAgICAgICAgICAgICAgICAgIGhhcyBlbnRlcmVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT4sIGFuZCB0dXJuZWQKICAgICAgICAgICAgICAgICAgICBBcmNhZGlhbiBwb2xpdGljcyB1cHNpZGUgZG93bjsgYW5kIG5vdyBtYW55IG9mIHRoYXQgbmF0aW9uLCB3aG8gb3VnaHQgdG8gcHJpZGUKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGFzIGhpZ2hseSBhcyB5b3UgdXBvbiB0aGVpciBpbmRlcGVuZGVuY2XigJRmb3IgeW91IGFuZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIHRoZSBvbmx5IGluZGlnZW5vdXMgcGVvcGxlcyBpbiBHcmVlY2XigJRhZG1pcmUgUGhpbGlwLCBzZXQgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgZWZmaWd5IGluIGJyb256ZSwgZGVjb3JhdGUgaXQgd2l0aCBnYXJsYW5kcywgYW5kLCB0byBjcm93biBhbGwsIGhhdmUgZW5hY3RlZCBhCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIHRoYXQsIGlmIGhlIGV2ZXIgdmlzaXRzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXN1czwvcGxhY2VOYW1lPiwgaGUgc2hhbGwgYmUgbWFkZSB3ZWxjb21lIHdpdGhpbiB0aGVpciB3YWxscy4gVGhlCiAgICAgICAgICAgICAgICAgICAgQXJnaXZlcyBoYXZlIGZvbGxvd2VkIHRoZWlyIGV4YW1wbGUuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.262'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjIiIHVuaXQ9InNlY3Rpb24iIC8+SG9seQogICAgICAgICAgICAgICAgICAgIE1vdGhlciBFYXJ0aCEgaWYgSSBhbSB0byBzcGVhayBhcyBhIHNhbmUgbWFuLCB3ZSBzdGFuZCBpbiBuZWVkIG9mIHRoZSB1dG1vc3QKICAgICAgICAgICAgICAgICAgICB2aWdpbGFuY2UsIHdoZW4gdGhpcyBpbmZlY3Rpb24sIG1vdmluZyBpbiBpdHMgY2lyY3VpdCwgaGFzIGludmFkZWQgb3VyIG93biBjaXR5LgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSB0YWtlIHlvdXIgcHJlY2F1dGlvbnMgbm93LCB3aGlsZSB3ZSBhcmUgc3RpbGwgc2VjdXJlLiBMZXQgdGhlIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJyb3VnaHQgaXQgaGVyZSBiZSBwdW5pc2hlZCB3aXRoIGluZmFteS4gSWYgbm90LCBiZXdhcmUgbGVzdCB5b3UgZGlzY2VybgogICAgICAgICAgICAgICAgICAgIHRoZSB3aXNkb20gb2YgbXkgd29yZHMgdG9vIGxhdGUsIHdoZW4geW91IGhhdmUgbG9zdCB0aGUgcG93ZXIgb2YgZG9pbmcgd2hhdCB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodC4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.263'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRvIHlvdQogICAgICAgICAgICAgICAgICAgIG5vdCBzZWUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoYXQgYQogICAgICAgICAgICAgICAgICAgIGNvbnNwaWN1b3VzIGFuZCBzdHJpa2luZyBleGFtcGxlIGlzIG9mZmVyZWQgYnkgdGhvc2UgbWlzZXJhYmxlIE9seW50aGlhbnMsIHdobwogICAgICAgICAgICAgICAgICAgIG93ZSB0aGVpciByYWluLCB1bmhhcHB5IG1lbiwgdG8gbm90aGluZyBzbyBtdWNoIGFzIHRvIHN1Y2ggY29uZHVjdCBhcyBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZXNjcmliZWQ/IFlvdSBtYXkgZWFzaWx5IGRpc2NvdmVyIHRoZSB0cnV0aCBieSBhIHJldmlldyBvZiB0aGVpciBleHBlcmllbmNlLiBBdAogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIHdoZW4gdGhlaXIgY2F2YWxyeSB3YXMgb25seSBmb3VyIGh1bmRyZWQgc3Ryb25nLCBhbmQgdGhlaXIgd2hvbGUgZm9yY2UKICAgICAgICAgICAgICAgICAgICBudW1iZXJlZCBubyBtb3JlIHRoYW4gZml2ZSB0aG91c2FuZCwgZm9yIHRoZXJlIHdhcyB0aGVuIG5vIGNvYWxpdGlvbiBvZiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgQ2hhbGNpZGlhbnMsIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.264'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjQiIHVuaXQ9InNlY3Rpb24iIC8+dGhleSB3ZXJlIGludmFkZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMgd2l0aCBhIGxhcmdlIGZvcmNlLCBib3RoIG5hdmFsIGFuZCBtaWxpdGFyeTsgYW5kIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXIgdGhhdCBpbiB0aG9zZSBkYXlzIHRoZSBMYWNlZGFlbW9uaWFucyBtYXkgYmUgc2FpZCB0byBoYXZlIGhlbGQgY29tbWFuZAogICAgICAgICAgICAgICAgICAgIGJvdGggb2YgbGFuZCBhbmQgb2Ygc2VhLiBZZXQgaW4gc3BpdGUgb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSBhdHRhY2tpbmcgZm9yY2UsCiAgICAgICAgICAgICAgICAgICAgdGhleSBuZXZlciBsb3N0IGEgdG93biBvciBldmVuIGFuIG91dHBvc3QsIHRoZXkgd29uIG1hbnkgZW5nYWdlbWVudHMsIHRoZXkgc2xldwogICAgICAgICAgICAgICAgICAgIHRocmVlIG9mIHRoZSBlbmVteSBjb21tYW5kZXJzLCBhbmQgZmluYWxseSBicm91Z2h0IHRoZSB3YXIgdG8gYW4gZW5kIG9uIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIHRlcm1zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Tb21lIENoYWxjaWRpYW4gY2l0aWVzIG9idGFpbmVkIGFpZAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBncm93aW5nIHBvd2VyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiwgYW5kIHRoZSB3YXIgbGFzdGVkIGZyb20gMzgyIHRvIDM3OSwgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgT2x5bnRoaWFucyBzdWVkIGZvciBwZWFjZSBhbmQgYmVjYW1lIG1lbWJlcnMgb2YgdGhlIFNwYXJ0YW4gQ29uZmVkZXJhY3ksIG5vdAogICAgICAgICAgICAgICAgICAgICAgICBleGFjdGx5IOKAnG9uIHRoZWlyIG93biB0ZXJtcy7igJ08L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIHdhciBsYXN0ZWQgZnJvbSAzODIgdG8gMzc5LCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBPbHludGhpYW5zIHN1ZWQgZm9yIHBlYWNlIGFuZCBiZWNhbWUgbWVtYmVycyBvZiB0aGUgU3BhcnRhbiBDb25mZWRlcmFjeSwgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0bHkg4oCcb24gdGhlaXIgb3duIHRlcm1zLuKAnTwvdHJhbnNsYXRpb24+"
translation['19.Concl.265'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gc29tZSBvZiB0aGVtIGJlZ2FuIHRvIGFjY2VwdCBicmliZXMsCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgcG9wdWxhY2Ugd2FzIHNvIHN0dXBpZCwgb3IsIGxldCB1cyBzYXksIHNvIHVubHVja3ksIGFzIHRvIGdpdmUgbW9yZQogICAgICAgICAgICAgICAgICAgIGNyZWRlbmNlIHRvIHRob3NlIHBlcnNvbnMgdGhhbiB0byBwYXRyaW90aWMgc3BlYWtlcnMsIHdoZW4gTGFzdGhlbmVzIGhhZCByb29mZWQKICAgICAgICAgICAgICAgICAgICBoaXMgaG91c2Ugd2l0aCB0aW1iZXIgc2VudCBhcyBhIHByZXNlbnQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCBFdXRoeWNyYXRlcyB3YXMga2VlcGluZyBhIGxhcmdlIGhlcmQgb2YgY2F0dGxlCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoaWNoIGhlIGhhZCBwYWlkIG5vdGhpbmcgdG8gYW55Ym9keSwgd2hlbiBvbmUgbWFuIHJldHVybmVkIGhvbWUgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgZmxvY2sgb2Ygc2hlZXAgYW5kIGFub3RoZXIgd2l0aCBhIHN0dWQgb2YgaG9yc2VzLCB3aGVuIHRoZSBtYXNzZXMsIHdob3NlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIHdlcmUgZW5kYW5nZXJlZCwgaW5zdGVhZCBvZiBiZWluZyBhbmdyeSBhbmQgZGVtYW5kaW5nIHRoZSBwdW5pc2htZW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRyYWl0b3JzLCBzdGFyZWQgYXQgdGhlbSwgZW52aWVkIHRoZW0sIGhvbm9yZWQgdGhlbSwgYW5kIHRob3VnaHQgdGhlbQogICAgICAgICAgICAgICAgICAgIGZpbmUgZmVsbG93cyzigJQgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.266'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjYiIHVuaXQ9InNlY3Rpb24iIC8+d2hlbiwgSSBzYXksIHRoZQogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIGhhZCBnb25lIHNvIGZhciBhcyB0aGF0LCBhbmQgY29ycnVwdGlvbiBoYWQgd29uIHRoZSBkYXksIHRoZW4sIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZXkgbnVtYmVyZWQgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCBhbmQgaGFkIGEgdGhvdXNhbmQgY2F2YWxyeSwgdGhvdWdoIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZWlyIG5laWdoYm9ycyB3ZXJlIGluIGFsbGlhbmNlIHdpdGggdGhlbSwgdGhvdWdoIHlvdSBjYW1lIHRvIHRoZWlyIGFpZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGVuIHRob3VzYW5kIG1lcmNlbmFyaWVzLCBmaWZ0eSB3YXItZ2FsbGV5cywgYW5kIGZvdXIgdGhvdXNhbmQgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4tZm9yY2UsIG5vdGhpbmcgY291bGQgc2F2ZSB0aGVtLiBCZWZvcmUgdGhlIHdhciBoYWQgbGFzdGVkIGEgeWVhciB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGxvc3QgZXZlcnkgdG93biBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE2Ij5DaGFsY2lkaWNlPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCB0cmVhY2hlcnksIGFuZCBQaGlsaXAgY291bGQgbm8gbG9uZ2VyIHBheSBhbnkgYXR0ZW50aW9uIHRvIHRoZSB0cmFpdG9ycywKICAgICAgICAgICAgICAgICAgICBhbmQgaGFyZGx5IGtuZXcgd2hhdCB0byBjYXB0dXJlIGZpcnN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.267'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjciIHVuaXQ9InNlY3Rpb24iIC8+SGUKICAgICAgICAgICAgICAgICAgICB0b29rIGZpdmUgaHVuZHJlZCBob3JzZW1lbiB3aXRoIGFsbCB0aGVpciBlcXVpcG1lbnQgYnkgdGhlIHRyZWFzb24gb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvZmZpY2Vyc+KAlGEgbnVtYmVyIGJleW9uZCBhbGwgcHJlY2VkZW50LiBUaGUgcGVycGV0cmF0b3JzIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBpbmZhbXkgd2VyZSBub3QgcHV0IHRvIHRoZSBibHVzaCBieSB0aGUgc3VuIHRoYXQgc2hvbmUgb24gdGhlaXIgc2hhbWUgb3IgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc29pbCBvZiB0aGVpciBuYXRpdmUgbGFuZCBvbiB3aGljaCB0aGV5IHN0b29kLCBieSB0ZW1wbGVzIG9yIGJ5IHNlcHVsY2hyZXMsIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGlnbm9taW55IHRoYXQgd2FpdGVkIG9uIHRoZWlyIGRlZWRzOiBzdWNoIG1hZG5lc3MsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHN1Y2ggb2JsaXF1aXR5LCBkb2VzIGNvcnJ1cHRpb24KICAgICAgICAgICAgICAgICAgICBlbmdlbmRlciEgVGhlcmVmb3JlIGl0IGJlaG92ZXMgeW91LCB5b3UgdGhlIGNvbW1vbmFsdHkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBrZWVwIHlvdXIgc2Vuc2VzLCB0byByZWZ1c2UKICAgICAgICAgICAgICAgICAgICB0b2xlcmF0aW9uIHRvIHN1Y2ggcHJhY3RpY2VzLCBhbmQgdG8gdmlzaXQgdGhlbSB3aXRoIHB1YmxpYyByZXRyaWJ1dGlvbi4gRm9yCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkIGl0IHdvdWxkIGJlIG1vbnN0cm91cyBpZiwgYWZ0ZXIgcGFzc2luZyBzbyBzdGVybiBhIGRlY3JlZSBvZiBjZW5zdXJlIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGUgbWVuIHdobyBiZXRyYXllZCB0aGUgT2x5bnRoaWFucywgeW91IHNob3VsZCBoYXZlIG5vIGNoYXN0aXNlbWVudCBmb3IgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gcmVwZWF0IHRoZWlyIGluaXF1aXR5IGluIHlvdXIgb3duIG1pZHN0LiBSZWFkIHRoZSBkZWNyZWUgY29uY2VybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgT2x5bnRoaWFucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.268'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkdlbnRsZW1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCBieSB0aGUgdW5pdmVyc2FsIGp1ZGdlbWVudCBvZiBHcmVla3MgYW5kIGJhcmJhcmlhbnMgYWxpa2UsIHlvdSBhY3RlZAogICAgICAgICAgICAgICAgICAgIHdlbGwgYW5kIHJpZ2h0ZW91c2x5IGluIHBhc3NpbmcgdGhpcyB2b3RlIG9mIGNlbnN1cmUgdXBvbiB0cmFpdG9ycyBhbmQKICAgICAgICAgICAgICAgICAgICByZXByb2JhdGVzLiBUaGVyZWZvcmUsIGluYXNtdWNoIGFzIGJyaWJlLXRha2luZyBpcyB0aGUgZm9yZXJ1bm5lciBvZiBzdWNoCiAgICAgICAgICAgICAgICAgICAgdHJlYXNvbnMsIGFuZCBmb3IgdGhlIHNha2Ugb2YgYnJpYmVzIG1lbiBjb21taXQgdGhlbSwgd2hlbmV2ZXIsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBzZWUgYW55IG1hbiB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBicmliZXMsIHlvdSBtYXkgYmUgc3VyZSB0aGF0IGhlIGlzIGFsc28gYSB0cmFpdG9yLiBJZiBvbmUgbWFuIGJldHJheXMKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0aWVzLCBhbm90aGVyIG5lZ290aWF0aW9ucywgYW5vdGhlciBzb2xkaWVyeSwgZWFjaCBvbmUgaXMgbWFraW5nIGhhdm9jCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGJ1c2luZXNzIGhlIGNvbnRyb2xzLCBhbmQgYWxsIGFsaWtlIGRlc2VydmUgeW91ciByZXByb2JhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.269'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjkiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZGVhbGluZyB3aXRoIHRoZW0geW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgeW91IGFsb25lIGFtb25nIHRoZSBuYXRpb25zIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmxkLCBjYW4gZmluZCBleGFtcGxlcyB0byBpbWl0YXRlIGluIHlvdXIgb3duIGhpc3RvcnksIGFuZCBtYXkgZW11bGF0ZSBpbgogICAgICAgICAgICAgICAgICAgIGFjdCB0aGUgZm9yZWZhdGhlcnMgd2hvbSB5b3UganVzdGx5IGNvbW1lbmQuIEZvciBpZiBhdCB0aGUgcHJlc2VudCB0aW1lIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBhdCBwZWFjZSwgYW5kIGNhbm5vdCBlbXVsYXRlIHRoZSBiYXR0bGVzLCB0aGUgY2FtcGFpZ25zLCB0aGUgaGF6YXJkcyBvZiB3YXIsIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSB3b24gcmVub3duLCB5b3UgbWF5IGF0IGxlYXN0IGltaXRhdGUgdGhlaXIgc291bmQganVkZ2VtZW50LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.270'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzAiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcyB3YW50ZWQgaW4gYWxsIGNpcmN1bXN0YW5jZXM7IGFuZAogICAgICAgICAgICAgICAgICAgIGFuIGhvbmVzdCBqdWRnZW1lbnQgY29zdHMgeW91IG5vIG1vcmUgcGFpbnMgYW5kIHZleGF0aW9uIHRoYW4gYSB2aWNpb3VzCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LiBFYWNoIG9mIHlvdSB3aWxsIHNpdCBpbiB0aGlzIGNvdXJ0IGZvciBqdXN0IGFzIGxvbmcgYSB0aW1lLCB3aGV0aGVyLAogICAgICAgICAgICAgICAgICAgIGJ5IHJlYWNoaW5nIGEgcmlnaHQgZGVjaXNpb24gYW5kIGdpdmluZyBhIHJpZ2h0IHZlcmRpY3QgdXBvbiB0aGlzIGNhc2UsIGhlCiAgICAgICAgICAgICAgICAgICAgYW1lbmRzIHRoZSBjb25kaXRpb24gb2YgdGhlIGNvbW1vbndlYWx0aCBhbmQgZG9lcyBjcmVkaXQgdG8gaGlzIGFuY2VzdHJ5LCBvciwgYnkKICAgICAgICAgICAgICAgICAgICBhIHdyb25nIGRlY2lzaW9uLCBpbXBhaXJzIHRoYXQgY29uZGl0aW9uIGFuZCBkaXNob25vcnMgdGhhdCBhbmNlc3RyeS4gV2hhdCwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB3YXMgdGhlaXIganVkZ2VtZW50IGluIHN1Y2ggYSBjYXNlP+KAlENsZXJrLCB0YWtlIHRoaXMgYW5kIHJlYWQKICAgICAgICAgICAgICAgICAgICBpdC7igJRGb3IgSSB3b3VsZCBoYXZlIHlvdSBrbm93IHRoYXQgeW91IGFyZSB0cmVhdGluZyB3aXRoIGluZGlmZmVyZW5jZQogICAgICAgICAgICAgICAgICAgIG9mZmVuY2VzIHN1Y2ggYXMgeW91ciBmb3JlZmF0aGVycyBvbmNlIHB1bmlzaGVkIHdpdGggZGVhdGguPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iU3RlbGEgSW5zY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGVsYSBJbnNjcmlwdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdGVsYSBJbnNjcmlwdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.271'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoZWFyLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZSByZWNvcmQgd2hpY2ggZGVjbGFyZXMKICAgICAgICAgICAgICAgICAgICBBcnRobWl1cywgc29uIG9mIFB5dGhvbmF4LCBvZiBaZWxlYSwgdG8gYmUgZW5lbXkgYW5kIGZvZW1hbiBvZiB0aGUgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBwZW9wbGUgYW5kIHRoZWlyIGFsbGllcywgaGltIGFuZCBhbGwgaGlzIGtpbmRyZWQuIEhpcyBvZmZlbmNlIHdhcyBjb252ZXlpbmcgZ29sZAogICAgICAgICAgICAgICAgICAgIGZyb20gYmFyYmFyaWFucyB0byBHcmVla3MuIEhlbmNlLCBhcHBhcmVudGx5LCB3ZSBtYXkgY29uY2x1ZGUgdGhhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzIHdlcmUgYW54aW91cyB0byBwcmV2ZW50IGFueSBtYW4sIGV2ZW4gYW4gYWxpZW4sIHRha2luZyByZXdhcmRzIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgaW5qdXJ5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPjsgYnV0IHlvdSB0YWtlIG5vCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0byBkaXNjb3VudGVuYW5jZSB3cm9uZ3MgZG9uZSBieSB5b3VyIG93biBjaXRpemVucyB0byB5b3VyIG93biBjaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.272'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzIiIHVuaXQ9InNlY3Rpb24iIC8+RG9lcyBhbnlvbmUgc2F5IHRoYXQgdGhpcyBpbnNjcmlwdGlvbiBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHNldCB1cCBqdXN0IGFueXdoZXJlPyBObzsgYWx0aG91Z2ggdGhlIHdob2xlIG9mIG91ciBjaXRhZGVsIGlzIGEgaG9seQogICAgICAgICAgICAgICAgICAgIHBsYWNlLCBhbmQgYWx0aG91Z2ggaXRzIGFyZWEgaXMgc28gbGFyZ2UsIHRoZSBpbnNjcmlwdGlvbiBzdGFuZHMgYXQgdGhlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgaGFuZCBiZXNpZGUgdGhlIGdyZWF0IGJyYXplbiBBdGhlbmUgd2hpY2ggd2FzIGRlZGljYXRlZCBieSB0aGUgc3RhdGUgYXMgYQogICAgICAgICAgICAgICAgICAgIG1lbW9yaWFsIG9mIHZpY3RvcnkgaW4gdGhlIFBlcnNpYW4gd2FyLCBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgR3JlZWtzLiBJbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIGRheXMsIHRoZXJlZm9yZSwganVzdGljZSB3YXMgc28gdmVuZXJhYmxlLCBhbmQgdGhlIHB1bmlzaG1lbnQgb2YgdGhlc2UgY3JpbWVzIHNvCiAgICAgICAgICAgICAgICAgICAgbWVyaXRvcmlvdXMsIHRoYXQgdGhlIHJldHJpYnV0aW9uIG9mIHN1Y2ggb2ZmZW5kZXJzIHdhcyBob25vcmVkIHdpdGggdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBhcyBQYWxsYXMgQXRoZW5lJ3Mgb3duIHByaXplIG9mIHZpY3RvcnkuIFRvZGF5IHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFk4oCUbW9ja2VyeSwgaW1wdW5pdHksIGRpc2hvbm9yLCB1bmxlc3MgeW91IHJlc3RyYWluIHRoZSBsaWNlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.273'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIG15IGp1ZGdlbWVudCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBkbyB3ZWxsLCBub3QgdG8gZW11bGF0ZSB5b3VyIGZvcmVmYXRoZXJzIGluIHNvbWUgb25lIHJlc3BlY3QgYWxvbmUsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRvIGZvbGxvdyB0aGVpciBjb25kdWN0IHN0ZXAgYnkgc3RlcC4gSSBhbSBzdXJlIHlvdSBoYXZlIGFsbCBoZWFyZCB0aGUgc3Rvcnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciB0cmVhdG1lbnQgb2YgQ2FsbGlhcywgc29uIG9mIEhpcHBvbmljdXMsIHdobyBuZWdvdGlhdGVkIHRoZSBjZWxlYnJhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHBlYWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxkYXRlIGF1dGhuYW1lPSItNDcwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDcwIj40NzA8L2RhdGU+IEIuQy4sCiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBiYXR0bGUgb2YgRXVyeW1lZG9uLjwvbm90ZT4gdW5kZXIgd2hpY2ggdGhlIEtpbmcgb2YgPGRhdGUgYXV0aG5hbWU9Ii00NzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00NzAiPjQ3MDwvZGF0ZT4gQi5DLiwKICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGJhdHRsZSBvZiBFdXJ5bWVkb24uPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+IHdhcyBub3QgdG8gYXBwcm9hY2ggd2l0aGluIGEgZGF5J3MgcmlkZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjb2FzdCwgbm9yIHNhaWwgd2l0aCBhIHNoaXAgb2Ygd2FyIGJldHdlZW4gdGhlIENoZWxpZG9uaWFuIGlzbGFuZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIEJsdWUgUm9ja3MuIEF0IHRoZSBpbnF1aXJ5IGludG8gaGlzIGNvbmR1Y3QgdGhleSBjYW1lIG5lYXIgdG8gcHV0dGluZyBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBkZWF0aCwgYW5kIG11bGN0ZWQgaGltIGluIGZpZnR5IHRhbGVudHMsIGJlY2F1c2UgaGUgd2FzIHNhaWQgdG8gaGF2ZSB0YWtlbgogICAgICAgICAgICAgICAgICAgIGJyaWJlcyBvbiBlbWJhc3N5LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.274'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzQiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IG5vIG9uZSBjYW4gY2l0ZSBhIG1vcmUKICAgICAgICAgICAgICAgICAgICBob25vcmFibGUgcGVhY2UgbWFkZSBieSB0aGUgY2l0eSBiZWZvcmUgb3Igc2luY2U7IGJ1dCB0aGF0IGlzIG5vdCB3aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICByZWdhcmRlZC4gVGhleSBhdHRyaWJ1dGVkIHRoZSBob25vcmFibGUgcGVhY2UgdG8gdGhlaXIgb3duIHZhbG9yIGFuZCB0byB0aGUgaGlnaAogICAgICAgICAgICAgICAgICAgIHJlcHV0ZSBvZiB0aGVpciBjaXR5LCB0aGUgcmVmdXNhbCBvciBhY2NlcHRhbmNlIG9mIG1vbmV5IHRvIHRoZSBjaGFyYWN0ZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcjsgYW5kIHRoZXkgZXhwZWN0ZWQgYW4gaG9uZXN0IGFuZCBpbmNvcnJ1cHRpYmxlIGNoYXJhY3RlciBpbiBhbnkgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIGVudGVyZWQgdGhlIHNlcnZpY2Ugb2YgdGhlIHN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.275'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzUiIHVuaXQ9InNlY3Rpb24iIC8+VGhleQogICAgICAgICAgICAgICAgICAgIGhlbGQgdGhlIHRha2luZyBvZiBicmliZXMgdG8gYmUgdG9vIGluaW1pY2FsIGFuZCB1bnByb2ZpdGFibGUgdG8gdGhlIHN0YXRlIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdG9sZXJhdGVkIGluIGFueSB0cmFuc2FjdGlvbiBvciBpbiBhbnkgcGVyc29uOyBidXQgeW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoYXZpbmcgYmVmb3JlIHlvdSBhIHBlYWNlIHdoaWNoIGF0CiAgICAgICAgICAgICAgICAgICAgb25jZSBoYXMgcHVsbGVkIGRvd24gdGhlIHdhbGxzIG9mIHlvdXIgYWxsaWVzIGFuZCBpcyBidWlsZGluZyB1cCB0aGUgaG91c2VzIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBhbWJhc3NhZG9ycywgd2hpY2ggcm9iYmVkIHRoZSBjaXR5IG9mIGhlciBwb3NzZXNzaW9ucyBhbmQgZWFybmVkIGZvciB0aGVtCiAgICAgICAgICAgICAgICAgICAgd2VhbHRoIGJleW9uZCB0aGUgZHJlYW1zIG9mIGF2YXJpY2UsIGluc3RlYWQgb2YgcHV0dGluZyB0aGVtIHRvIGRlYXRoIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBvd24gYWNjb3JkLCB3YWl0IGZvciB0aGUgYXBwZWFyYW5jZSBvZiBhIHByb3NlY3V0b3IuIFlvdSBhcmUgZ2l2aW5nIHRoZW0gYSB0cmlhbAogICAgICAgICAgICAgICAgICAgIG9mIHdvcmRzIHdpdGggdGhlaXIgZXZpbCBkZWVkcyBiZWZvcmUgeW91ciBleWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.276'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllldCB3ZSBuZWVkIG5vdCByZXN0cmljdCBvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICB0byBieWdvbmUgaGlzdG9yeSwgb3IgcmVseSB1cG9uIHRob3NlIGFuY2llbnQgcHJlY2VkZW50cyBpbiBvdXIgYXBwZWFsIHRvCiAgICAgICAgICAgICAgICAgICAgcmV0cmlidXRpdmUganVzdGljZS4gV2l0aGluIHlvdXIgb3duIGxpZmV0aW1lLCBpbiB0aGUgdGltZSBvZiB0aGUgZ2VuZXJhdGlvbiBub3cKICAgICAgICAgICAgICAgICAgICBsaXZpbmcsIG5vdCBhIGZldyBtZW4gaGF2ZSBiZWVuIHRyaWVkIGFuZCBjb25kZW1uZWQuIFBhc3NpbmcgYnkgb3RoZXIgaW5zdGFuY2VzLAogICAgICAgICAgICAgICAgICAgIGxldCBtZSByZWNhbGwgdG8geW91ciBtZW1vcnkgb25lIG9yIHR3byBtZW4gd2hvIGhhdmUgYmVlbiBwdW5pc2hlZCBieSBkZWF0aAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGFuIGVtYmFzc3kgZmFyIGxlc3MgbWlzY2hpZXZvdXMgdG8gdGhlIGNpdHkuIFBsZWFzZSB0YWtlIGFuZCByZWFkIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.277'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ5IHRoZSB0ZXJtcwogICAgICAgICAgICAgICAgICAgIG9mIHRoaXMgZGVjcmVlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UKICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQgdG8gZGVhdGggdGhlIGFtYmFzc2Fkb3JzIG5hbWVkLiBPbmUgb2YgdGhlbSB3YXMgRXBpY3JhdGVzLCB3aG8sIGFzIEkKICAgICAgICAgICAgICAgICAgICBhbSBpbmZvcm1lZCBieSBwZXJzb25zIG9sZGVyIHRoYW4gbXlzZWxmLCB3YXMgYW4gaG9uZXN0LCB1c2VmdWwsIGFuZCBwb3B1bGFyCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY2lhbiwgYW5kIG9uZSBvZiB0aGUgbWVuIHdobyBtYXJjaGVkIGZyb20gUGVpcmFldXMgYW5kIHJlc3RvcmVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZW1vY3JhY3kuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPnJlc3RvcmVkIHRoZSBkZW1vY3JhY3k6IHVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIFRocmFzeWJ1bHVzIFs8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI4MCIgdmFsaWQ9InllcyI+RGVtLiAxOS4yODA8L2JpYmw+XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItNDAzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDAzIj40MDM8L2RhdGU+IEIuQy4g77yIR3JvdGUsIGNoLgogICAgICAgICAgICAgICAgICAgICAgICA2NS7vvIkuPC9ub3RlPiBObyBzdWNoIGNvbnNpZGVyYXRpb24gYXZhaWxlZCBoaW07IGFuZCB0aGF0IHdhcyByaWdodCwKICAgICAgICAgICAgICAgICAgICBmb3IgYSBtYW4gd2hvIGFjY2VwdHMgc28gaW1wb3J0YW50IGEgbWlzc2lvbiBpcyBub3QgdG8gYmUgdmlydHVvdXMgYnkgaGFsdmVzLiBIZQogICAgICAgICAgICAgICAgICAgIG11c3Qgbm90IHVzZSB0aGUgcHVibGljIGNvbmZpZGVuY2UgaGUgaGFzIGVhcm5lZCBhcyBhbiBvcHBvcnR1bml0eSBmb3Iga25hdmVyeTsKICAgICAgICAgICAgICAgICAgICBoaXMgZHV0eSBpcyBzaW1wbHkgdG8gZG8geW91IG5vIHdpbGZ1bCB3cm9uZyBhdCBhbGwuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjgwIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjI4MDwvYmlibD5dLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4gQi5DLiDvvIhHcm90ZSwgY2guCiAgICAgICAgICAgICAgICAgICAgICAgIDY1Lu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.278'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzgiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgaWYgdGhlIHByZXNlbnQgZGVmZW5kYW50cyBoYXZlIG9taXR0ZWQgYW55IHNpbmdsZSBvbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWlzZGVlZHMgZm9yIHdoaWNoIHRob3NlIHBlcnNvbnMgd2VyZSBzZW50ZW5jZWQgdG8gZGVhdGgsIGV4ZWN1dGUgbWUgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc3BvdC4gTG9vayBhdCB0aGUgZGVjcmVlOiDigJxXaGVyZWFzIHRoZSBzYWlkIGFtYmFzc2Fkb3JzIGhhdmUgZGlzb2JleWVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaW5zdHJ1Y3Rpb25zLuKAnSBUaGF0IGlzIHRoZSBmaXJzdCBjaGFyZ2UgYWxsZWdlZC4gQW5kIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gZGlzb2JleSB0aGVpciBpbnN0cnVjdGlvbnM/IERpZCBub3QgdGhlIGRlY3JlZSBzYXksIOKAnGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgYW5kIHRoZSBBbGxpZXMgb2YgdGhlIEF0aGVuaWFucyzigJ0gYW5kIGRpZCBub3QgdGhleSBkZWNsYXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW5zIHRvIGJlIGV4Y2x1ZGVkPyBEaWQgaXQgbm90IGluc3RydWN0IHRoZW0gdG8gc3dlYXIgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFnaXN0cmF0ZXMgaW4gdGhlIHNldmVyYWwgY2l0aWVzLCBhbmQgZGlkIHRoZXkgbm90IHN3ZWFyIGluIG9ubHkgc3VjaCBwZXJzb25zCiAgICAgICAgICAgICAgICAgICAgYXMgUGhpbGlwIHNlbnQgdG8gdGhlbT8gRGlkIG5vdCB0aGUgZGVjcmVlIHNheSB0aGF0IHRoZXkgd2VyZSBub3QgdG8gbWVldCBQaGlsaXAKICAgICAgICAgICAgICAgICAgICBhbG9uZSBpbiBhbnkgcGxhY2Ugd2hhdHNvZXZlciwgYW5kIGRpZCB0aGV5IG5vdCBjb250aW51YWxseSBoYXZlIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBkZWFsaW5ncyB3aXRoIFBoaWxpcD8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.279'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzkiIHVuaXQ9InNlY3Rpb24iIC8+4oCcV2hlcmVhcyzigJ0gc2F5cyB0aGUgb2xkIGRlY3JlZSwg4oCcY2VydGFpbiBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXJlIGNvbnZpY3RlZCBvZiBtYWtpbmcgdW50cnV0aGZ1bCByZXBvcnRzIHRvIHRoZSBDb3VuY2lsLuKAnSBXaHksIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGFyZSBjb252aWN0ZWQgb2YgbWFraW5nIHVudHJ1dGhmdWwgcmVwb3J0cyBldmVuIHRvIHRoZSBBc3NlbWJseS4gT24gd2hhdAogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlP+KAlHlvdSByZW1lbWJlciB0aGF0IGJyaWxsaWFudCBxdWliYmxlLiBPbiB0aGUgZXZpZGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBmYWN0czogdGhlIHJlcG9ydCB3YXMgZXhhY3RseSBjb250cmFkaWN0ZWQgYnkgdGhlIGV2ZW50LiBJdCBnb2VzIG9uOgogICAgICAgICAgICAgICAgICAgIOKAnGFuZCBvZiBzZW5kaW5nIHVudHJ1dGhmdWwgZGlzcGF0Y2hlcy7igJ0gU28gZGlkIHRoZXkuCiAgICAgICAgICAgICAgICAgICAg4oCcQW5kIG9mIGJlYXJpbmcgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGFsbGllcywgYW5kIG9mIHRha2luZwogICAgICAgICAgICAgICAgICAgIGJyaWJlcy7igJ0gRm9yIOKAnGJlYXJpbmcgZmFsc2Ugd2l0bmVzc+KAnSByZWFkCiAgICAgICAgICAgICAgICAgICAg4oCcdXR0ZXJseSBkZXN0cm95aW5n4oCd4oCUYSB2YXN0bHkgZ3JlYXRlciBpbmp1cnkuIEJ1dAogICAgICAgICAgICAgICAgICAgIGFzIHRvIHRoZWlyIGhhdmluZyB0YWtlbiBicmliZXMsIHdlIHNob3VsZCBzdGlsbCwgaWYgdGhleSBkZW5pZWQgaXQsIGhhdmUgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIHRoZSBjaGFyZ2UgZ29vZDsgYnV0IHNpbmNlIHRoZXkgYWRtaXQgaXQsIHN1cmVseSB0aGVyZSBzaG91bGQgaGF2ZSBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5IGFycmVzdCBhbmQgcHVuaXNobWVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QnkgdGhlIGxlZ2FsCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Mga25vd24gYXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DOsc6zz4nOs+G9tTwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM+AzrHOs8+JzrPhvbU8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['19.Concl.280'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoYXQgZm9sbG93cywKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PyBTdWNoIGJlaW5nIHRoZSBmYWN0cywKICAgICAgICAgICAgICAgICAgICB3aWxsIHlvdSwgdGhlIGRlc2NlbmRhbnRzIG9mIHRoZXNlIG1lbiwgc29tZSBvZiB3aG9tIGFyZSBzdGlsbCBsaXZpbmcsIGJlCiAgICAgICAgICAgICAgICAgICAgY29udGVudCB0aGF0IEVwaWNyYXRlcywgdGhlIGNoYW1waW9uIG9mIGRlbW9jcmFjeSwgdGhlIGhlcm8gb2YgdGhlIG1hcmNoIGZyb20KICAgICAgICAgICAgICAgICAgICBQZWlyYWV1cywgc2hvdWxkIGhhdmUgYmVlbiBkZWdyYWRlZCBhbmQgcHVuaXNoZWQ7IHRoYXQgbW9yZSByZWNlbnRseQogICAgICAgICAgICAgICAgICAgIFRocmFzeWJ1bHVzLCBhIHNvbiBvZiBUaHJhc3lidWx1cyB0aGUgZ3JlYXQgZGVtb2NyYXQsIHdobyByZXN0b3JlZCBmcmVlCiAgICAgICAgICAgICAgICAgICAgZ292ZXJubWVudCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGh5bGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBoeWxlIj5QaHlsZTwvcGxhY2VOYW1lPiwgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBwYWlkIGEgZmluZSBvZiB0ZW4gdGFsZW50cyB0aGF0IGV2ZW4gYSBkZXNjZW5kYW50IG9mIEhhcm1vZGl1cyBhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3Qgb2YgYWxsIHlvdXIgYmVuZWZhY3RvcnMsIHRoZSBtZW4gdG8gd2hvbSwgaW4gcmVxdWl0YWwgb2YgdGhlaXIgZ2xvcmlvdXMKICAgICAgICAgICAgICAgICAgICBkZWVkcywgeW91IGhhdmUgYWxsb3R0ZWQgYnkgc3RhdHV0ZSBhIHNoYXJlIG9mIHlvdXIgbGliYXRpb25zIGFuZAogICAgICAgICAgICAgICAgICAgIGRyaW5rLW9mZmVyaW5ncyBpbiBldmVyeSB0ZW1wbGUgYW5kIGF0IGV2ZXJ5IHB1YmxpYyBzZXJ2aWNlLCB3aG9tLCBpbiBoeW1ucyBhbmQKICAgICAgICAgICAgICAgICAgICBpbiB3b3JzaGlwLCB5b3UgdHJlYXQgYXMgdGhlIGVxdWFscyBvZiBnb2RzIGFuZCBkZW1pZ29kcyzigJQgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.281'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODEiIHVuaXQ9InNlY3Rpb24iIC8+d2lsbCB5b3UgYmUgY29udGVudCB0aGF0IGFsbCB0aGVzZSBtZW4gc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHN1YmplY3RlZCB0byB0aGUgaW5leG9yYWJsZSBwZW5hbHR5IG9mIGxhdzsgdGhhdCB0aGV5IHNob3VsZCBmaW5kIG5vIHN1Y2NvcgogICAgICAgICAgICAgICAgICAgIGluIG1lcmN5IG9yIGNvbXBhc3Npb24sIGluIHdlZXBpbmcgY2hpbGRyZW4gYmVhcmluZyBob25vcmVkIG5hbWVzLCBvciBpbiBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBwbGVhPyBBbmQgdGhlbiwgd2hlbiB5b3UgaGF2ZSBpbiB5b3VyIHBvd2VyIGEgc29uIG9mIEF0cm9tZXR1cyB0aGUKICAgICAgICAgICAgICAgICAgICBkb21pbmllLCBhbmQgb2YgR2xhdWNvdGhlYSwgdGhlIGZ1Z2xld29tYW4gb2YgdGhvc2UgYmFjY2hhbmFsaWFuIHJvdXRzIGZvciB3aGljaAogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgcHJpZXN0ZXNzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjY29yZGluZyB0byBVbHBpYW4gaGVyIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIE5pbm8gYW5kIGhlciBjcmltZSB3YXMgbWl4aW5nIGEgbG92ZS1wb3Rpb24uPC9ub3RlPiBzdWZmZXJlZCBkZWF0aCwgd2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSByZWxlYXNlIHRoZSBzb24gb2Ygc3VjaCBwYXJlbnRzLCBhIG1hbiB3aG8gaGFzIG5ldmVyIGJlZW4gb2YgdGhlIHNsaWdodGVzdAogICAgICAgICAgICAgICAgICAgIHVzZSB0byB0aGUgY29tbW9ud2VhbHRoLCBuZWl0aGVyIGhlLCBub3IgaGlzIGZhdGhlciwgbm9yIGFueSBtZW1iZXIgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJlY2lvdXMgZmFtaWx5PyA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.282'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODIiIHVuaXQ9InNlY3Rpb24iIC8+SGFzIHRoZSBzdGF0ZSBldmVyIGhhZCB0bwogICAgICAgICAgICAgICAgICAgIHRoYW5rIGFueSBvbmUgb2YgdGhlbSBpbiB0aGUgd2hvbGUgY291cnNlIG9mIGhpcyBsaWZlIGZvciBzbyBtdWNoIGFzIGEgaG9yc2UsIG9yCiAgICAgICAgICAgICAgICAgICAgYSB3YXItZ2FsbGV5LCBvciBhIG1pbGl0YXJ5IGV4cGVkaXRpb24sIG9yIGEgY2hvcnVzLCBvciBhbnkgcHVibGljIHNlcnZpY2UsCiAgICAgICAgICAgICAgICAgICAgYXNzZXNzZWQgY29udHJpYnV0aW9uLCBvciBmcmVlIGdpZnQsIG9yIGZvciBhbnkgZGVlZCBvZiB2YWxvciBvciBhbnkgYmVuZWZpdAogICAgICAgICAgICAgICAgICAgIHdoYXRzb2V2ZXI/IFlldCBldmVuIGlmIGhlIGNvdWxkIGNsYWltIGNyZWRpdCBmb3IgYWxsIHRob3NlIHNlcnZpY2VzLCBidXQgY291bGQKICAgICAgICAgICAgICAgICAgICBub3QgYWRkIHRoYXQgaGUgaGFzIGJlZW4gYW4gaG9uZXN0IGFuZCBkaXNpbnRlcmVzdGVkIGFtYmFzc2Fkb3IsIGhlIG91Z2h0CiAgICAgICAgICAgICAgICAgICAgYXNzdXJlZGx5IHRvIHN1ZmZlciBkZWF0aC4gSWYgaGUgaGFzIG5laXRoZXIgdGhlIG9uZSBjbGFpbSBub3IgdGhlIG90aGVyLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdCBwdW5pc2ggaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.283'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODMiIHVuaXQ9InNlY3Rpb24iIC8+UmVtZW1iZXIgd2hhdCBoZSB0b2xkIHlvdQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgd2hlbiBoZSBwcm9zZWN1dGVkIFRpbWFyY2h1cyzigJR0aGF0IHRoZXJlIGlzIG5vIG1lcml0IGluIGEgY2l0eQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgbmVydmVsZXNzIGluIGl0cyBkZWFsaW5ncyB3aXRoIG1hbGVmYWN0b3JzLCBvciBpbiBhIHBvbGl0eSB3aGVyZQogICAgICAgICAgICAgICAgICAgIGluZHVsZ2VuY2UgYW5kIGltcG9ydHVuaXR5IGFyZSBzdHJvbmdlciB0aGFuIHRoZSBsYXdzLiBZb3UgbXVzdCBub3QsIGhlIHNhaWQsCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhbnkgcGl0eSBmb3IgVGltYXJjaHVzJ3MgbW90aGVyLCBhbiBhZ2VkIHdvbWFuLCBvciBoaXMgY2hpbGRyZW4sIG9yIGFueW9uZQogICAgICAgICAgICAgICAgICAgIGVsc2U6IHlvdSBtdXN0IGZpeCB5b3VyIG1pbmQgb24gdGhlIHRob3VnaHQgdGhhdCwgaWYgeW91IGRlc2VydCB0aGUgbGF3cyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9uLCB5b3Ugd2lsbCBmaW5kIG5vIG9uZSB0byBwaXR5IHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.284'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHVuZm9ydHVuYXRlIFRpbWFyY2h1cyBpcyBzdGlsbCBkaXNmcmFuY2hpc2VkIGJlY2F1c2UgaGUgd2FzIGEKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzIG9mIEFlc2NoaW5lcycgbWlzZGVlZHMsIGFuZCB3aHkgc2hvdWxkIHlvdSBhbGxvdyBBZXNjaGluZXMgdG8gZ28KICAgICAgICAgICAgICAgICAgICBzY290LWZyZWU/IElmIGhlIGRlbWFuZGVkIHN1Y2ggc2V2ZXJpdHkgb2YgcmV0cmlidXRpb24gZnJvbSBtZW4gd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHRyYW5zZ3Jlc3NlZCBvbmx5IGFnYWluc3QgaGltc2VsZiBhbmQgaGlzIGZyaWVuZHMsIHdoYXQgcmV0cmlidXRpb24gYXJlIHlvdSwgYQogICAgICAgICAgICAgICAgICAgIGxlZ2FsIGp1cnkgYm91bmQgYnkgb2F0aCwgdG8gZXhhY3QgZnJvbSBtZW4gd2hvIGhhdmUgZ3JpZXZvdXNseSB0cmFuc2dyZXNzZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBjb21tb253ZWFsdGgsIGFuZCBvZiB3aG9tIGhlIGlzIHByb3ZlZCB0byBiZSBvbmU/IDwvdHJhbnNsYXRpb24+"
translation['19.Concl.285'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2lsbCBzYXkgdGhhdCB0aGUgdHJpYWwgb2YgVGltYXJjaHVzIHdpbGwgaW1wcm92ZQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JhbHMgb2Ygb3VyIHlvdW5nIG1lbi4gVGhlbiB0aGlzIHRyaWFsIHdpbGwgaW1wcm92ZSB0aGUgaW50ZWdyaXR5IG9mIG91cgogICAgICAgICAgICAgICAgICAgIHN0YXRlc21lbiwgb24gd2hvbSBkZXBlbmQgdGhlIGdyYXZlc3QgcG9saXRpY2FsIGhhemFyZHM7IGFuZCB0aGV5IGFsc28gaGF2ZSBhCiAgICAgICAgICAgICAgICAgICAgY2xhaW0gb24geW91ciBjb25zaWRlcmF0aW9uLiBCdXQgbGV0IG1lIHNob3cgeW91IHRoYXQgaGUgZGlkIG5vdCBicmluZyBUaW1hcmNodXMKICAgICAgICAgICAgICAgICAgICB0byBydWluIGJlY2F1c2Ugb2YgaGlzIGFueGlvdXMgY2FyZeKAlEhlYXZlbiBoZWxwIHVzISBmb3IgdGhlIG1vZGVzdHkgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGNoaWxkcmVuLiBZb3VyIGNoaWxkcmVuLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUgYWxyZWFkeSBtb2Rlc3Q7IGFuZCBHb2QgZm9yYmlkIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHNob3VsZCBldmVyIGJlIGluIHN1Y2ggZXZpbCBjYXNlIGFzCiAgICAgICAgICAgICAgICAgICAgdG8gcmVxdWlyZSBhbiBBcGhvYmV0dXMgb3IgYW4gQWVzY2hpbmVzIHRvIHRlYWNoIHlvdW5nIHBlb3BsZSBtb2Rlc3R5IQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.286'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZGlkIGl0IGJlY2F1c2UgVGltYXJjaHVzIGhhZCBtb3ZlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsIGEgZGVjcmVlIG1ha2luZyB0aGUgY29udmV5YW5jZSBvZiBhcm1zIG9yIHNoaXBzJyB0YWNrbGUgdG8gUGhpbGlwIGEKICAgICAgICAgICAgICAgICAgICBjYXBpdGFsIG9mZmVuY2UuIEFzIGV2aWRlbmNlIG9mIHRoYXQsIGxldCBtZSBhc2sgaG93IGxvbmcgVGltYXJjaHVzIGhhZCBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgc3BlYWtlcj8gQSB2ZXJ5IGxvbmcgdGltZTsgYW5kIGR1cmluZyBhbGwgdGhhdCB0aW1lIEFlc2NoaW5lcyB3YXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyB5ZXQgaGUgbmV2ZXIgdG9vawogICAgICAgICAgICAgICAgICAgIG9mZmVuY2UsIGhlIG5ldmVyIGJlZ2FuIHRvIHRoaW5rIGl0IGEgc2hhbWUgdGhhdCBhIG1hbiBvZiBzdWNoIGNoYXJhY3RlciBzaG91bGQKICAgICAgICAgICAgICAgICAgICBtYWtlIHNwZWVjaGVzLCB1bnRpbCBoZSBoYWQgdmlzaXRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gYW5kIHNvbGQgaGltc2VsZi4gUGxlYXNlIHRha2UgYW5kIHJlYWQgdGhlIGFjdHVhbAogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBvZiBUaW1hcmNodXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.287'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdXIgc2FrZSBwcm9wb3NlZCB0aGUgcHJvaGliaXRpb24sIHVuZGVyIHBlbmFsdHkgb2YgZGVhdGgsIG9mIGNhcnJ5aW5nIGFybXMKICAgICAgICAgICAgICAgICAgICB0byBQaGlsaXAgaXMgdmlsaWZpZWQgYW5kIGRpc2dyYWNlZDsgdGhlIG1hbiB3aG8gc3VycmVuZGVyZWQgdG8gUGhpbGlwIHRoZQogICAgICAgICAgICAgICAgICAgIGFybWFtZW50cyBvZiBvdXIgYWxsaWVzIGlzIGhpcyBhY2N1c2VyLiBJbW1vcmFsaXR54oCUc2F2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrIeKAlHdhcyB0aGUgdGhlbWUgb2YgaGlzIHNwZWVjaCwgd2hpbGUgYXQgaGlzIHNpZGUgc3Rvb2QgaGlzIHR3bwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXJzLWluLWxhdywgdGhlIHZlcnkgc2lnaHQgb2Ygd2hvbSBpcyBlbm91Z2ggdG8gc2V0IHlvdSBpbiBhbgogICAgICAgICAgICAgICAgICAgIHVwcm9hcizigJR0aGUgZGlzZ3VzdGluZyBOaWNpYXMsIHdobyB3ZW50IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+IGFzIHRoZSBoaXJlbGluZyBvZiBDaGFicmlhcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGFib21pbmFibGUgQ3lyZWJpbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q3lyZWJyaW8sIGEgbmlja25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnE9mZmFs4oCdIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66z4XPgeG9tc6yzrnOsTwvZm9yZWlnbj49YnJhbu+8iTsgdGhlIG1hbidzIHJlYWwgbmFtZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgRXBpY3JhdGVzLjwvbm90ZT4gdGhlIHVubWFza2VkIGhhcmxlcXVpbiBvZiB0aGUgcGFnZWFudHMuIEJ1dCB0aGF0IHdhcwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmc6IHVuZGVyIGhpcyBleWVzIHNhdCBoaXMgYnJvdGhlciBBcGhvYmV0dXMuIEluIHRydXRoLCBvbiB0aGF0IGRheSBhbGwKICAgICAgICAgICAgICAgICAgICB0aGF0IGRlY2xhaW1pbmcgYWdhaW5zdCBpbW1vcmFsaXR5IHdhcyBsaWtlIHdhdGVyIGZsb3dpbmcgdXBzdHJlYW0uPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrPhc+B4b21zrLOuc6xPC9mb3JlaWduPj1icmFu77yJOyB0aGUgbWFuJ3MgcmVhbCBuYW1lIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBFcGljcmF0ZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGlzIG1ldGFwaG9yIHRvIGV4cHJlc3MgdG9wc3l0dXJ2eWRvbSBjZi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiA0MTAiIHZhbGlkPSJ5ZXMiPkV1ci4gTWVkLiA0MTA8L2JpYmw+4oCUPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byEzr3PiSDPgM6/z4TOsc684b+2zr0g4byxzrXPgeG/ts69IM+Hz4nPgc6/4b+mz4POuSDPgM6xzrPOseG9tywgzrrOseG9tiDOtOG9t866zrEgzrrOseG9tgogICAgICAgICAgICAgICAgICAgICAgICAgICAgz4DhvbHOvc+EzrEgz4DhvbHOu865zr0gz4PPhM+B4b2zz4bOtc+EzrHOuTwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiA0MTAiIHZhbGlkPSJ5ZXMiPkV1ci4gTWVkLiA0MTA8L2JpYmw+4oCUPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byEzr3PiSDPgM6/z4TOsc684b+2zr0g4byxzrXPgeG/ts69IM+Hz4nPgc6/4b+mz4POuSDPgM6xzrPOseG9tywgzrrOseG9tiDOtOG9t866zrEgzrrOseG9tgogICAgICAgICAgICAgICAgICAgICAgICAgICAgz4DhvbHOvc+EzrEgz4DhvbHOu865zr0gz4PPhM+B4b2zz4bOtc+EzrHOuTwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['19.Concl.288'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBub3csIHRvCiAgICAgICAgICAgICAgICAgICAgaWxsdXN0cmF0ZSB0aGUgZGlzY3JlZGl0IGludG8gd2hpY2ggb3VyIGNpdHkgaGFzIGJlZW4gZHJhZ2dlZCBieSB0aGlzIG1hbidzCiAgICAgICAgICAgICAgICAgICAgdHJpY2tlcnkgYW5kIG1lbmRhY2l0eSwgb21pdHRpbmcgbXVjaCB0aGF0IEkgbWlnaHQgbWVudGlvbiwgSSB3aWxsIHBvaW50IHRvIGEKICAgICAgICAgICAgICAgICAgICBzeW1wdG9tIHRoYXQgeW91IGhhdmUgYWxsIG9ic2VydmVkLiBJbiBmb3JtZXIgdGltZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gdXNlZCB0byB3YXRjaCBhbnhpb3VzbHkgZm9yIHlvdXIgZGVjaXNpb25zLiBUb2RheSB3ZQogICAgICAgICAgICAgICAgICAgIHByb3dsIHRoZSBzdHJlZXRzIHdvbmRlcmluZyB3aGF0IHRoZSBvdGhlciBjb21tdW5pdGllcyBoYXZlIHJlc29sdmVkLCBhbGwgYWdvZwogICAgICAgICAgICAgICAgICAgIHRvIGhlYXIgd2hhdCBpcyB0aGUgbmV3cyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpcyB0aGUgbmV3cyBmcm9tIHRoZSBBbXBoaWN0eW9ucywgd2hhdCB3aWxsIGJlIFBoaWxpcCdzIG5leHQgbW92ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBoZSBpcyBhbGl2ZSBvciBkZWFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.289'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODkiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGtub3cgdGhhdAogICAgICAgICAgICAgICAgICAgIHN1Y2ggaXMgb3VyIGJlaGF2aW9yLiBXaGF0IGFsYXJtcyBtZSBpcyB0aGUgdGhvdWdodCwgbm90IHRoYXQgUGhpbGlwIGlzIGFsaXZlLAogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0aGUgc3Bpcml0IHRoYXQKICAgICAgICAgICAgICAgICAgICBsb2F0aGVzIGFuZCBwdW5pc2hlcyBldmlsLWRvZXJzIGlzIGRlYWQuIFBoaWxpcCBkb2VzIG5vdCB0ZXJyaWZ5IG1lLCBpZiBvbmx5CiAgICAgICAgICAgICAgICAgICAgeW91ciBjb25kaXRpb24gaXMgaGVhbHRoeTsgYnV0IGlmIHRoZXJlIGlzIHRvIGJlIGltcHVuaXR5IGluIHRoaXMgY291cnQgZm9yIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBodW5nZXIgYWZ0ZXIgUGhpbGlwJ3MgcGF5LCBhbmQgaWYgbWVuIHdobyBoYXZlIHdvbiB5b3VyIGNvbmZpZGVuY2UsIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGhpdGhlcnRvIHNjb3JuZWQgdGhlIGltcHV0YXRpb24gb2YgaW50cmlndWluZyBmb3IgUGhpbGlwLCBhcmUgdG8gYXBwZWFyIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWR2b2NhdGVzLCB0aGF0IGRvZXMgdGVycmlmeSBtZS7igJQgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.290'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTAiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBkb2VzIHRoaXMgbWVhbiwgRXVidWx1cz8gQXQgdGhlIHRyaWFsIG9mIHlvdXIgY291c2luCiAgICAgICAgICAgICAgICAgICAgSGVnZXNpbGF1cywgYW5kIHJlY2VudGx5IGF0IHRoYXQgb2YgVGhyYXN5YnVsdXMsIGFuIHVuY2xlIG9mIE5pY2VyYXR1cywgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHZvdGUgb2YgdGhlIGp1cnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHZlcmRpY3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAg4oCcZ3VpbHR54oCdIG9yIOKAnG5vdCBndWlsdHku4oCdIEEgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgICAgIHZvdGUgd2FzIGluIHNvbWUgY2FzZXMg77yIZS5nLiBhdCB0aGUgdHJpYWwgb2YgU29jcmF0ZXPvvIkKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgdG8gZGVjaWRlIHRoZSBwdW5pc2htZW50Ljwvbm90ZT4geW91IHdvdWxkIG5vdCBldmVuIGFuc3dlciB3aGVuIHlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgY2FsbGVkOyBvbiB0aGUgcXVlc3Rpb24gb2YgZGFtYWdlcyB5b3UgZGlkIGdldCB1cCB0byBzcGVhaywgYnV0IHlvdSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgYSB3b3JkIHRvIHNheSBpbiB0aGVpciBmYXZvciwgYW5kIG1lcmVseSBhc2tlZCB0aGUganVyeSB0byBleGN1c2UgeW91LiBTbyB5b3UgZG8KICAgICAgICAgICAgICAgICAgICBub3QgbW91bnQgdGhlIHRyaWJ1bmUgZm9yIHlvdXIgb3duIGtpbnNtZW4gYW5kIGZvciBtZW4gd2hvIGhhdmUgYSBjbGFpbSBvbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMsIGFuZCB3aWxsIHlvdSBtb3VudCBpdCBmb3IgQWVzY2hpbmVzLCA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.291'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTEiIHVuaXQ9InNlY3Rpb24iIC8+d2hvLCB3aGVuIEFyaXN0b3Bob24gcHJvc2VjdXRlZCBQaGlsb25pY3VzLCBhbmQgaW4gZGVub3VuY2luZyBoaW0gZGVub3VuY2VkCiAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gcG9saWN5LCBqb2luZWQgaW4gdGhlIGF0dGFjayB1cG9uIHlvdSwgYW5kIHNvIHJhbmdlZCBoaW1zZWxmIHdpdGggeW91cgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXM/IEFmdGVyIHRlcnJpZnlpbmcgdGhlIHBlb3BsZSwgYW5kIHRlbGxpbmcgdGhlbSB0aGF0IHRoZXkgbXVzdCBnbyBkb3duIHRvCiAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMgYXQgb25jZSwgcGF5IHRoZSB3YXItdGF4IGFuZCB0dXJuIHRoZSB0aGVhdHJpYyBmdW5kIGludG8gYSB3YXItY2hlc3QsCiAgICAgICAgICAgICAgICAgICAgb3IgZWxzZSB2b3RlIGZvciB0aGUgcmVzb2x1dGlvbiB0aGF0IHdhcyBzdXBwb3J0ZWQgYnkgQWVzY2hpbmVzIGFuZCBtb3ZlZCBieQogICAgICAgICAgICAgICAgICAgIHRoYXQgYWJvbWluYWJsZSBQaGlsb2NyYXRlcywgd2l0aCB0aGUgcmVzdWx0IHRoYXQgd2UgZ290IGEgZGlzY3JlZGl0YWJsZSBpbnN0ZWFkCiAgICAgICAgICAgICAgICAgICAgb2YgYW4gZXF1aXRhYmxlIHBlYWNlLCA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.292'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGFmdGVyIGFsbCB0aGUgcnVpbgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGFzIGJlZW4gd3JvdWdodCBieSB0aGVpciBzdWJzZXF1ZW50IG1pc2RlZWRzLCBhcmUgeW91IHJlY29uY2lsZWQgd2l0aCB0aGVtCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhhdD8gSW4gdGhlIEFzc2VtYmx5IHlvdSBzb2xlbW5seSBjdXJzZWQgUGhpbGlwOyB5b3Ugc3dvcmUgYnkgdGhlIGhlYWQgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGNoaWxkcmVuIHRoYXQgeW91IGRlc2lyZWQgaGlzIHV0dGVyIGRlc3RydWN0aW9uLCBhbmQgd2lsbCB5b3Ugbm93IGJlIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGVyIG9mIEFlc2NoaW5lcz8gSG93IGNhbiBQaGlsaXAgYmUgdXR0ZXJseSBkZXN0cm95ZWQsIGlmIHlvdSByZXNjdWUgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVuIHdobyB0YWtlIGhpcyBicmliZXM/IDwvdHJhbnNsYXRpb24+"
translation['19.Concl.293'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTMiIHVuaXQ9InNlY3Rpb24iIC8+V2h5IGRpZCB5b3UKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGUgTW9lcm9jbGVzLCBiZWNhdXNlIGhlIGhhZCBleHRvcnRlZCB0d2VudHkgZHJhY2htYXMgYXBpZWNlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgbGVzc2VlcyBvZiB0aGUgc2lsdmVyLW1pbmVzOyB3aHkgZGlkIHlvdSBpbmRpY3QgQ2VwaGlzb3Bob24gZm9yIG1pc2FwcHJvcHJpYXRpbmcKICAgICAgICAgICAgICAgICAgICBzYWNyZWQgZnVuZHMsIGJlY2F1c2UgaGUgd2FzIHRocmVlIGRheXMgbGF0ZSBpbiBwYXlpbmcgc2V2ZW4gbWluYXMgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICBiYW5rLCBpZiwgaW5zdGVhZCBvZiBwcm9zZWN1dGluZywgeW91IG5vdyB0cnkgdG8gcmVzY3VlIG1lbiB3aG8gaGF2ZSBjb25mZXNzZWQsCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgYmVlbiBjYXVnaHQgaW4gdGhlIGFjdCwgd2hvIGFyZSBjb252aWN0ZWQgb2YgdGFraW5nIGJyaWJlcyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3Rpb24gb2Ygb3VyIGFsbGllcz8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.294'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTQiIHVuaXQ9InNlY3Rpb24iIC8+WWVzLCB0aGVzZSBhcmUKICAgICAgICAgICAgICAgICAgICBmb3JtaWRhYmxlIG9mZmVuY2VzLCBjYWxsaW5nIGZvciB0aGUgdXRtb3N0IHZpZ2lsYW5jZSBhbmQgcHJlY2F1dGlvbjsgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcyB5b3UgYnJvdWdodCBhZ2FpbnN0IHRob3NlIHR3byBtZW4gd2VyZSBjb21wYXJhdGl2ZWx5IGx1ZGljcm91cywgYXMgdGhlc2UKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyB3aWxsIHNob3cuIFdlcmUgdGhlcmUgYW55IHBlcnNvbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+IHdobyBlbWJlenpsZWQgcHVibGljIG1vbmV5PyBJbiBhbGwKICAgICAgICAgICAgICAgICAgICBwcm9iYWJpbGl0eSwgeWVzLiBEaWQgYW55IG9uZSBvZiB0aGVtIHRha2UgcGFydCBpbiB0aGUgcmVjZW50IG92ZXJ0aHJvdyBvZiBmcmVlCiAgICAgICAgICAgICAgICAgICAgZ292ZXJubWVudCB0aGVyZT8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.295'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTUiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG9uZS4gV2hlbiB0aGVyZSB3YXMKICAgICAgICAgICAgICAgICAgICBzdGlsbCBzdWNoIGEgY2l0eSBhcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGVyZSBhbnkgdGhpZXZlcyB0aGVyZT8gSSB0YWtlIGl0IHRoZXJlIHdlcmUuIERpZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gcGVyaXNoIHRocm91Z2ggdGhlaXIgc2lucz8gTm8uCiAgICAgICAgICAgICAgICAgICAgRG8geW91IHN1cHBvc2UgdGhlcmUgd2VyZSBubyB0aGlldmVzIGFuZCBwaWxmZXJlcnMgb2YgcHVibGljIGZ1bmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPj8gVGhlcmUgbXVzdCBoYXZlIGJlZW4gc3VjaC4gSGFzIGFueQogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVtIGJlZW4gc2hvd24gdG8gYmUgcmVzcG9uc2libGUgZm9yIHRoZSBwcmVzZW50IHBvbGl0aWNhbCB0cm91YmxlcwogICAgICAgICAgICAgICAgICAgIHRoZXJlPyBOb3Qgb25lLiBUaGVuIHdobyBhcmUgdGhlIHBlb3BsZSB3aG8gY29tbWl0IHRoZXNlIG1vbnN0cm91cyBjcmltZXM/CiAgICAgICAgICAgICAgICAgICAgUGVyc29ucyB3aG8gZmFuY3kgdGhlbXNlbHZlcyBpbXBvcnRhbnQgZW5vdWdoIHRvIGJlIGNhbGxlZCBmcmllbmRzIG9mIFBoaWxpcCwKICAgICAgICAgICAgICAgICAgICBtZW4gaXRjaGluZyBmb3IgbWlsaXRhcnkgY29tbWFuZHMgYW5kIGVhZ2VyIGZvciBwb2xpdGljYWwgZGlzdGluY3Rpb24sIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBjbGFpbSBzdXBlcmlvcml0eSBvdmVyIHRoZSBjb21tb24gaGVyZC4gQXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+IHRoZSBvdGhlciBkYXkgd2FzIG5vdCBQZXJpbGx1cyB0cmllZCBiZWZvcmUgdGhlIFRocmVlCiAgICAgICAgICAgICAgICAgICAgSHVuZHJlZCBvbiBhIGNoYXJnZSBvZiB2aXNpdGluZyBQaGlsaXA/IEFuZCBkaWQgbm90IFB0b2VvZG9ydXMsIHRoZSBmaXJzdCBtYW4gaW4KICAgICAgICAgICAgICAgICAgICBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+IGZvciB3ZWFsdGgsIGJpcnRoLCBhbmQKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uLCBjb21lIGZvcndhcmQgYW5kIGJlZyBoaW0gb2ZmLCBhbmQgdGhlbiBzZW5kIGhpbSBiYWNrIHRvIFBoaWxpcD8gVGhlCiAgICAgICAgICAgICAgICAgICAgc2VxdWVsIHdhcyB0aGF0IG9uZSBvZiB0aGUgcGFpciByZXR1cm5lZCB3aXRoIGFuIGFsaWVuIGFybXkgYXQgaGlzIGJhY2ssIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIHdhcyBoYXRjaGluZyB0aGUgcGxvdCBhdCBob21lLiBUYWtlIHRoYXQgYXMgYSBzcGVjaW1lbi4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.296'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTYiIHVuaXQ9InNlY3Rpb24iIC8+SW5kZWVkLCB0aGVyZSBpcyBubyBkYW5nZXIsIG5vIGRhbmdlciB3aGF0c29ldmVyLAogICAgICAgICAgICAgICAgICAgIHRoYXQgcmVxdWlyZXMgbW9yZSBhbnhpb3VzIHZpZ2lsYW5jZSB0aGFuIGFsbG93aW5nIGFueSBtYW4gdG8gYmVjb21lIHN0cm9uZ2VyCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGUgcGVvcGxlLiBMZXQgbm8gbWFuIGJlIGRlbGl2ZXJlZCwgYW5kIGxldCBubyBtYW4gYmUgZGVzdHJveWVkLCBtZXJlbHkKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoaXMgbWFuIG9yIHRoYXQgc28gZGVzaXJlczsgbGV0IGhlbSB3aG8gaXMgZGVsaXZlcmVkIG9yIGRlc3Ryb3llZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBldmlkZW5jZSBvZiBmYWN0cyBiZSBlbnRpdGxlZCB0byByZWNlaXZlIGZyb20gdGhpcyBjb3VydCB0aGUgdmVyZGljdCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgaGlzIGR1ZS4gVGhhdCBpcyB0aGUgZGVtb2NyYXRpYyBwcmluY2lwbGUuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.297'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTciIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBtYW55IG1lbgogICAgICAgICAgICAgICAgICAgIGhhdmUgdXBvbiBvY2Nhc2lvbiByaXNlbiB0byBwb3dlcuKAlHRoZSBncmVhdCBDYWxsaXN0cmF0dXMsIGZvcgogICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLCBBcmlzdG9waG9uLCBEaW9waGFudHVzLCBhbmQgb3RoZXJzIG9mIGVhcmxpZXIgZGF0ZS4gQnV0IHdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpZWxkIG9mIHRoZWlyIHN1cHJlbWFjeT8gVGhlIHBvcHVsYXIgYXNzZW1ibHkuIEluIGNvdXJ0cyBvZiBqdXN0aWNlIG5vIG1hbiB0bwogICAgICAgICAgICAgICAgICAgIHRoaXMgZGF5IGhhcyBldmVyIGJlZW4gc3VwZXJpb3IgdG8gdGhlIHBlb3BsZSwgb3IgdG8gdGhlIGxhd3MsIG9yIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGp1ZGljaWFsIG9hdGguIFRoZW4gcGVybWl0IG5vIHN1Y2ggc3VwZXJpb3JpdHkgdG8gQWVzY2hpbmVzIHRvZGF5LiBUbyBlbmZvcmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhcm5pbmcgdGhhdCBpdCBpcyBiZXR0ZXIgdG8gdGFrZSB0aG9zZSBwcmVjYXV0aW9ucyB0aGFuIHRvIGJlIGNyZWR1bG91cywgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgcmVhZCB0byB5b3UgYW4gb3JhY2xlIG9mIHRoZSBnb2RzLOKAlHRvIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG93ZXMgaGVyIHNhbHZhdGlvbiBmYXIgbW9yZSB0aGFuIHRvCiAgICAgICAgICAgICAgICAgICAgaGVyIG1vc3QgcHJvbWluZW50IHBvbGl0aWNpYW5zLiBSZWFkIHRoZSBvcmFjbGVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ik9yYWNsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yYWNsZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JhY2xlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.298'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBoZWFyIHRoZSBhZG1vbml0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBnb2RzLiBJZiB0aGV5IGFyZSBhZGRyZXNzZWQgdG8geW91IGluIHRpbWUgb2Ygd2FyLCB0aGV5IGJpZCB5b3UgYmV3YXJlIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBjb21tYW5kZXJzLCBmb3IgY29tbWFuZGVycyBhcmUgdGhlIGxlYWRlcnMgb2Ygd2FyZmFyZTsgaWYgYWZ0ZXIgY29uY2x1c2lvbgogICAgICAgICAgICAgICAgICAgIG9mIHBlYWNlLCBvZiB5b3VyIHN0YXRlc21lbiwgZm9yIHRoZXkgYXJlIHlvdXIgbGVhZGVycywgdGhleSBoYXZlIHlvdXIKICAgICAgICAgICAgICAgICAgICBvYmVkaWVuY2UsIGJ5IHRoZW0geW91IG1heSBoYXBseSBiZSBkZWNlaXZlZC4gVGhlIG9yYWNsZSBhbHNvIGJpZHMgeW91IGtlZXAgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoIHRvZ2V0aGVyLCB0aGF0IGFsbCBtYXkgYmUgb2Ygb25lIG1pbmQsIGFuZCBtYXkgbm90IGdyYXRpZnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5lbXkuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.299'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTkiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBkbyB5b3UgdGhpbmssIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IFdpbGwgUGhpbGlwIGJlIGdyYXRpZmllZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWxpdmVyYW5jZSBvciBieSB0aGUgcHVuaXNobWVudCBvZiB0aGUgbWFuIHdobyBoYXMgZG9uZSBhbGwgdGhpcyBtaXNjaGllZj8gQnkKICAgICAgICAgICAgICAgICAgICBoaXMgZGVsaXZlcmFuY2Ugc3VyZWx5OyBidXQgdGhlIG9yYWNsZSBiaWRzIHlvdSBzdHJpdmUgdGhhdCB0aGUgZW5lbXkgc2hhbGwgbm90CiAgICAgICAgICAgICAgICAgICAgcmVqb2ljZS4gVGhlcmVmb3JlLCB5b3UgYXJlIGFsbCBleGhvcnRlZCBieSBaZXVzLCBieSBEaW9uZSwgYnkgYWxsIHRoZSBnb2RzLCB0bwogICAgICAgICAgICAgICAgICAgIHB1bmlzaCB3aXRoIG9uZSBtaW5kIHRob3NlIHdobyBoYXZlIG1hZGUgdGhlbXNlbHZlcyB0aGUgc2VydmFudHMgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMuIFRoZXJlIGFyZSBmb2VzIHdpdGhvdXQ7IHRoZXJlIGFyZSB0cmFpdG9ycyB3aXRoaW4uIEl0IGlzIHRoZSBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgIG9mIGZvZXMgdG8gZ2l2ZSBicmliZXMsIG9mIHRyYWl0b3JzIHRvIHRha2UgYnJpYmVzLCBhbmQgdG8gcmVzY3VlIHRob3NlIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.300'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vcmVvdmVyLCBpdCBjYW4gYmUgc2hvd24gYnkgbWVyZSBodW1hbiByZWFzb25pbmcgdGhhdCBpdCBpcyBleHRyZW1lbHkKICAgICAgICAgICAgICAgICAgICBpbmp1cmlvdXMgYW5kIGRhbmdlcm91cyB0byBwZXJtaXQgdGhlIGludGltYWN5IG9mIGEgcHJvbWluZW50IHN0YXRlc21hbiB3aXRoIG1lbgogICAgICAgICAgICAgICAgICAgIHdob3NlIHB1cnBvc2VzIGFyZSBhdCB2YXJpYW5jZSB3aXRoIHRob3NlIG9mIHRoZSBwZW9wbGUuIElmIHlvdSB3aWxsIGNvbnNpZGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hhdCBtZWFucyBQaGlsaXAgYWNxdWlyZWQgaGlzIHBvbGl0aWNhbCBzdXByZW1hY3kgYW5kIHBlcmZvcm1lZCBoaXMgbW9zdCBzaWduYWwKICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMsIHlvdSB3aWxsIGZpbmQgdGhhdCBpdCB3YXMgYnkgYnV5aW5nIHRyZWFjaGVyeSBmcm9tIHdpbGxpbmcKICAgICAgICAgICAgICAgICAgICBzZWxsZXJzLCBhbmQgYnkgY29ycnVwdGluZyBsZWFkaW5nIHBvbGl0aWNpYW5zIGFuZCBzdGltdWxhdGluZyB0aGVpciBhbWJpdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.301'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDEiIHVuaXQ9InNlY3Rpb24iIC8+Qm90aCB0aGVzZSBwcmFjdGljZXMgaXQgaXMgd2l0aGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBwb3dlciwgaWYgeW91IHNvIGNob29zZSwgdG8gZnJ1c3RyYXRlIHRvZGF5LCBpZiB5b3Ugd2lsbCBmaXJzdCByZWZ1c2UgdG8gbGlzdGVuCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGRlZmVuZGVycyBvZiB0cmVhY2hlcnksIGFuZCBwcm92ZSB0aGF0IHRoZXkgY2Fubm90IGV4ZXJjaXNlIHRoYXQKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgb3ZlciB5b3Ugb2Ygd2hpY2ggdGhleSBib2FzdCwgYW5kIHRoZW4gcHVuaXNoIGJlZm9yZSB0aGUgZXllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JsZCB0aGUgbWFuIHdobyBoYXMgdHJhaXRvcm91c2x5IHNvbGQgaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.302'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDIiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGhhdmUgZ29vZCByZWFzb24sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIGJlIGluZGlnbmFudCB3aXRoIGV2ZXJ5IG1hbiB3aG8gYnkgc3VjaCBjb25kdWN0IGhhcwogICAgICAgICAgICAgICAgICAgIHRocm93biBvdmVyYm9hcmQgeW91ciBhbGxpZXMsIHlvdXIgZnJpZW5kcywgYW5kIHRob3NlIG9wcG9ydHVuaXRpZXMgb24gd2hpY2gsCiAgICAgICAgICAgICAgICAgICAgZm9yIGFueSBuYXRpb24sIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBkZXBlbmRzLCBidXQgd2l0aCBubyBtYW4gbW9yZSBmaWVyY2VseSBvcgogICAgICAgICAgICAgICAgICAgIG1vcmUgcmlnaHRlb3VzbHkgdGhhbiB3aXRoIEFlc2NoaW5lcy4gRm9yIGEgbWFuIHdobyBvbmNlIHJhbmdlZCBoaW1zZWxmIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gZGlzdHJ1c3RlZCBQaGlsaXAsIGFuZCBtYWRlIHVuYXNzaXN0ZWQgdGhlIGZpcnN0IGRpc2NvdmVyeSBvZiBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGhvc3RpbGl0eSB0byBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBhbmQgdGhlbgogICAgICAgICAgICAgICAgICAgIGJlY2FtZSBhIGRlc2VydGVyIGFuZCBhIHRyYWl0b3IgYW5kIHN1ZGRlbmx5IGFwcGVhcmVkIGFzIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgY2hhbXBpb27igJRkb2VzIGhlIG5vdCBkZXNlcnZlIGEgaHVuZHJlZCBkZWF0aHM/IDwvdHJhbnNsYXRpb24+"
translation['19.Concl.303'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDMiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHRoYXQgc3VjaCBhcmUgdGhlIGZhY3RzLCBoZSB3aWxsIG5vdCBiZSBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgZGVueS4gRm9yIHdobyBvcmlnaW5hbGx5IGludHJvZHVjZWQgSXNjaGFuZGVyIHRvIHlvdSwgZGVjbGFyaW5nIGhpbSB0byBoYXZlIGNvbWUKICAgICAgICAgICAgICAgICAgICBhcyB0aGUgcmVwcmVzZW50YXRpdmUgb2YgdGhlIEFyY2FkaWFuIGZyaWVuZHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PyBXaG8gcmFpc2VkIHRoZSBjcnkgdGhhdCBQaGlsaXAgd2FzIGZvcm1pbmcgY29hbGl0aW9ucwogICAgICAgICAgICAgICAgICAgIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc3VzPC9wbGFjZU5hbWU+IHdoaWxlIHlvdSBzbGVwdD8gV2hvIG1hZGUgdGhvc2UKICAgICAgICAgICAgICAgICAgICBsb25nIGFuZCBlbG9xdWVudCBzcGVlY2hlcywgYW5kIHJlYWQgdGhlIGRlY3JlZXMgb2YgTWlsdGlhZGVzIGFuZCBUaGVtaXN0YWNsZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG9hdGggd2hpY2ggb3VyIHlvdW5nIG1lbiB0YWtlIGluIHRoZSB0ZW1wbGUgb2YgQWdsYXVydXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWdsYXVydXM6IGRhdWdodGVyIG9mIENlY3JvcHMsIGxlZ2VuZGFyeSBraW5nIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT47IGNhbm9uaXplZCBmb3IgYW4gYWN0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHJpb3RpYyBzZWxmLWRldm90aW9uLiBJbiBoZXIgY2hhcGVsIHlvdW5nIEF0aGVuaWFucywgb24gYWRtaXNzaW9uIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwLCByZWNlaXZlZCB0aGVpciBhcm1zLCBhbmQgdG9vayB0aGUgb2F0aCBvZiBsb3lhbHR5Ljwvbm90ZT4/CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPjsgY2Fub25pemVkIGZvciBhbiBhY3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcGF0cmlvdGljIHNlbGYtZGV2b3Rpb24uIEluIGhlciBjaGFwZWwgeW91bmcgQXRoZW5pYW5zLCBvbiBhZG1pc3Npb24gdG8KICAgICAgICAgICAgICAgICAgICAgICAgY2l0aXplbnNoaXAsIHJlY2VpdmVkIHRoZWlyIGFybXMsIGFuZCB0b29rIHRoZSBvYXRoIG9mIGxveWFsdHkuPC90cmFuc2xhdGlvbj4="
translation['19.Concl.304'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDQiIHVuaXQ9InNlY3Rpb24iIC8+V2FzIGl0IG5vdCBBZXNjaGluZXM/IFdobyBwZXJzdWFkZWQgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gc2VuZCBlbWJhc3NpZXMgYWxtb3N0IGFzIGZhciBhcyB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3OTEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc5MSI+UmVkCiAgICAgICAgICAgICAgICAgICAgICAgIFNlYTwvcGxhY2VOYW1lPiwgZGVjbGFyaW5nIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHdhcyB0aGUgb2JqZWN0IG9mIFBoaWxpcCdzIGRlc2lnbnMsIGFuZCB0aGF0IGl0IHdhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBhbnRpY2lwYXRlIHRoZSBkYW5nZXIgYW5kIG5vdCBiZSBkaXNsb3lhbCB0byB0aGUgSGVsbGVuaWMgY2F1c2U/IFdhcyBpdAogICAgICAgICAgICAgICAgICAgIG5vdCBFdWJ1bHVzIHdobyBwcm9wb3NlZCB0aGUgZGVjcmVlLCBhbmQgdGhlIGRlZmVuZGFudCBBZXNjaGluZXMgd2hvIHdlbnQgYXMKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9yIHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4/IFdoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzYWlkIHRoZXJlIGFmdGVyIGhpcyBhcnJpdmFsLCBlaXRoZXIgaW4gY29udmVyc2F0aW9uIG9yIGluIHB1YmxpYyBzcGVlY2hlcywgaXMKICAgICAgICAgICAgICAgICAgICBiZXN0IGtub3duIHRvIGhpbXNlbGY6IHdoYXQgaGUgcmVwb3J0ZWQgb24gaGlzIHJldHVybiBJIGFtIHN1cmUgeW91IGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgZm9yZ290dGVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.305'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIG1hZGUgYSBzcGVlY2ggaW4gd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICByZXBlYXRlZGx5IGNhbGxlZCBQaGlsaXAgYSBiYXJiYXJpYW4gYW5kIGEgbWFuIG9mIGJsb29kLiBIZSB0b2xkIHlvdSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIEFyY2FkaWFucyB3ZXJlIGRlbGlnaHRlZCB0byBoZWFyIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdhcyByZWFsbHkgd2FraW5nIHVwIGFuZCBhdHRlbmRpbmcgdG8gYnVzaW5lc3MuIEhlCiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBhbiBpbmNpZGVudCB3aGljaCwgaGUgc2FpZCwgaGFkIGZpbGxlZCBoaW0gd2l0aCBkZWVwIGluZGlnbmF0aW9uLiBPbiBoaXMKICAgICAgICAgICAgICAgICAgICBqb3VybmV5IGhvbWUgaGUgaGFkIG1ldCBBdHJlc3RpZGFzIHRyYXZlbGxpbmcgZnJvbSBQaGlsaXAncyBjb3VydCB3aXRoIHNvbWUKICAgICAgICAgICAgICAgICAgICB0aGlydHkgd29tZW4gYW5kIGNoaWxkcmVuIGluIGhpcyB0cmFpbi4gSGUgd2FzIGFzdG9uaXNoZWQsIGFuZCBpbnF1aXJlZCBvZiBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJhdmVsbGVycyB3aG8gdGhlIG1hbiBhbmQgaGlzIHRocm9uZyBvZiBmb2xsb3dlcnMgd2VyZTsgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.306'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gaGUgd2FzIHRvbGQgdGhhdCB0aGV5IHdlcmUgT2x5bnRoaWFuCiAgICAgICAgICAgICAgICAgICAgY2FwdGl2ZXMgd2hvbSBBdHJlc3RpZGFzIHdhcyBicmluZ2luZyBhd2F5IHdpdGggaGltIGFzIGEgcHJlc2VudCBmcm9tIFBoaWxpcCwgaGUKICAgICAgICAgICAgICAgICAgICB0aG91Z2h0IGl0IGEgdGVycmlibGUgYnVzaW5lc3MsIGFuZCBidXJzdCBpbnRvIHRlYXJzLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGhlIHNvcnJvd2Z1bGx5IHJlZmxlY3RlZCwgaXMgaW4gZXZpbAogICAgICAgICAgICAgICAgICAgIHBsaWdodCBpbmRlZWQsIGlmIHNoZSBwZXJtaXRzIHN1Y2ggY3J1ZWx0aWVzIHRvIHBhc3MgdW5jaGVja2VkLiBIZSBjb3Vuc2VsbGVkCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIHNlbmQgZW52b3lzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICBkZW5vdW5jZSB0aGUgcGVyc29ucyB3aG8gd2VyZSBpbnRyaWd1aW5nIGZvciBQaGlsaXA7IGZvciwgaGUgc2FpZCwgaGUgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBpbmZvcm1lZCB0aGF0LCBpZiBvbmx5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3b3VsZAogICAgICAgICAgICAgICAgICAgIGdpdmUgYXR0ZW50aW9uIHRvIHRoZSBtYXR0ZXIgYW5kIHNlbmQgYW1iYXNzYWRvcnMsIHRoZSBpbnRyaWd1ZXJzIHdvdWxkIHByb21wdGx5CiAgICAgICAgICAgICAgICAgICAgYmUgYnJvdWdodCB0byBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.307'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDciIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgaGlzIHNwZWVjaCBvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgb2NjYXNpb247IGEgbm9ibGUgc3BlZWNoLCB3b3J0aHkgb2Ygb3VyIEF0aGVuaWFuIHRyYWRpdGlvbnMuIEJ1dCBhZnRlciBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB2aXNpdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgYW5kIGJlaGVsZCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gZW5lbXkgYW5kIHRoZSBlbmVteSBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGRpZCBoaXMgbGFuZ3VhZ2UgYmVhciB0aGUgc2xpZ2h0ZXN0IHJlc2VtYmxhbmNlIHRvIHRob3NlIHV0dGVyYW5jZXM/IE5vdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzdDogaGUgYmFkZSB5b3Ugbm90IHRvIHJlbWVtYmVyIHlvdXIgZm9yZWZhdGhlcnMsIG5vdCB0byB0YWxrIGFib3V0IHRyb3BoaWVzLAogICAgICAgICAgICAgICAgICAgIG5vdCB0byBjYXJyeSBzdWNjb3IgdG8gYW55Ym9keS4gQXMgZm9yIHRoZSBwZW9wbGUgd2hvIHJlY29tbWVuZGVkIHlvdSB0byBjb25zdWx0CiAgICAgICAgICAgICAgICAgICAgdGhlIEdyZWVrcyBvbiB0aGUgdGVybXMgb2YgcGVhY2Ugd2l0aCBQaGlsaXAsIGhlIHdhcyBhbWF6ZWQgYXQgdGhlIHN1Z2dlc3Rpb24KICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBuZWNlc3NhcnkgdGhhdCBhbnkgZm9yZWlnbmVyIHNob3VsZCBiZSBjb252aW5jZWQgd2hlbiB0aGUgcXVlc3Rpb25zCiAgICAgICAgICAgICAgICAgICAgd2VyZSBwdXJlbHkgZG9tZXN0aWMuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.308'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFzIGZvcgogICAgICAgICAgICAgICAgICAgIFBoaWxpcCzigJR3aHksIGdvb2QgSGVhdmVucywgaGUgd2FzIGEgR3JlZWsgb2YgdGhlIEdyZWVrcywgdGhlIGZpbmVzdAogICAgICAgICAgICAgICAgICAgIG9yYXRvciBhbmQgdGhlIG1vc3QgdGhvcm91Z2jigJRnb2luZyBmcmllbmQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHlvdSBjb3VsZCBmaW5kIGluIHRoZSB3aG9sZSB3b3JsZC4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IHRoZXJlIHdlcmUgc29tZSBxdWVlciwgaWxsLWNvbmRpdGlvbmVkIGZlbGxvd3MgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdobyBkaWQgbm90IGJsdXNoIHRvIGFidXNlIGhpbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlbiB0byBjYWxsIGhpbSBhIGJhcmJhcmlhbiEgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.309'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklzIGl0LCB0aGVuLCBjb25jZWl2YWJsZSB0aGF0IHRoZSBtYW4gd2hvIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZWFybGllciBvZiB0aG9zZSBzcGVlY2hlcyBzaG91bGQgYWxzbyBoYXZlIG1hZGUgdGhlIGxhdGVyIHVubGVzcyBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvcnJ1cHRlZD8gSXMgaXQgcG9zc2libGUgdGhhdCB0aGUgc2FtZSBtYW4gd2hvIHdhcyB0aGVuIGluZmxhbWVkIHdpdGgKICAgICAgICAgICAgICAgICAgICBhYmhvcnJlbmNlIG9mIEF0cmVzdGlkYXMgb24gYWNjb3VudCBvZiB0aG9zZSBPbHludGhpYW4gd29tZW4gYW5kIGNoaWxkcmVuLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3cgYmUgY29udGVudCB0byBjb29wZXJhdGUgd2l0aCBQaGlsb2NyYXRlcywgd2hvIGJyb3VnaHQgZnJlZS1ib3JuCiAgICAgICAgICAgICAgICAgICAgT2x5bnRoaWFuIGxhZGllcyB0byB0aGlzIGNpdHkgZm9yIHRoZWlyIGRpc2hvbm9yPyBQaGlsb2NyYXRlcyBpcyBub3cgc28KICAgICAgICAgICAgICAgICAgICBub3RvcmlvdXMgZm9yIHRoZSBpbmZhbW91cyBsaWZlIGhlIGhhcyBsaXZlZCB0aGF0IEkgbmVlZCBub3QgYXBwbHkgdG8gaGltIGFueQogICAgICAgICAgICAgICAgICAgIGRlZ3JhZGluZyBvciBvZmZlbnNpdmUgZXBpdGhldC4gV2hlbiBJIG1lcmVseSBtZW50aW9uIHRoYXQgaGUgZGlkIGJyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGxhZGllcywgdGhlcmUgaXMgbm90IGEgbWFuIGluIHRoaXMgY291cnQsIHdoZXRoZXIgb24gdGhlIGp1cnkgb3IgYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgb25sb29rZXJzLCB3aG8gZG9lcyBub3Qga25vdyB0aGUgc2VxdWVsLCBhbmQgd2hvIGRvZXMgbm90LCBJIGFtIHN1cmUsIGZlZWwKICAgICAgICAgICAgICAgICAgICBjb21wYXNzaW9uIGZvciB0aG9zZSBtaXNlcmFibGUgYW5kIHVuZm9ydHVuYXRlIGJlaW5ncy4gWWV0IEFlc2NoaW5lcyBoYWQgbm8KICAgICAgICAgICAgICAgICAgICBjb21wYXNzaW9uIGZvciB0aGVtLiBIZSBkaWQgbm90IHNoZWQgdGVhcnMgb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gb24gdGhlaXIgYWNjb3VudCwgaW5kaWduYW50IHRoYXQgdGhleSBzaG91bGQgc3VmZmVyCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZSBpbiBhbiBhbGxpZWQgY291bnRyeSBhdCB0aGUgaGFuZHMgb2YgQXRoZW5pYW4gYW1iYXNzYWRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.310'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vOyBvdXIgZGlzY3JlZGl0ZWQKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9yIHdpbGwga2VlcCBhbGwgaGlzIHRlYXJzIGZvciBoaW1zZWxmLiBWZXJ5IGxpa2VseSBoZSB3aWxsIGJyaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGludG8gY291cnQgYW5kIHB1dCB0aGVtIGluIGEgY29uc3BpY3VvdXMgcG9zaXRpb24uIEJ1dCBkbyB5b3UsCiAgICAgICAgICAgICAgICAgICAgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBhcyB5b3UgbG9vayBhdCB0aG9zZSBjaGlsZHJlbiBvZiBoaXMsIHJlZmxlY3QgaG93IG1hbnkKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBvZiB5b3VyIG93biBmcmllbmRzIGFuZCBhbGxpZXMgYXJlIHdhbmRlcmVycywgcm9hbWluZyB0aGUgd29ybGQgaW4KICAgICAgICAgICAgICAgICAgICBiZWdnYXJ5LCBzdWZmZXJpbmcgaGFyZHNoaXBzIHdoaWNoIHRoZXkgb3dlIHRvIHRoaXMgbWFuOyBhbmQgdGhhdCB0aGV5IGRlc2VydmUKICAgICAgICAgICAgICAgICAgICB5b3VyIGNvbXBhc3Npb24gaW5maW5pdGVseSBtb3JlIHRoYW4gdGhlIG9mZnNwcmluZyBvZiBhIG1hbGVmYWN0b3IgYW5kIGEKICAgICAgICAgICAgICAgICAgICB0cmFpdG9yLCB3aGlsZSwgYnkgYWRkaW5nIHRvIHRoZSB0cmVhdHkgb2YgcGVhY2UgdGhlIHdvcmRzIGFuZCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBvc3Rlcml0eSwgaGUgYW5kIGhpcyBmcmllbmRzIHJvYmJlZCB5b3VyIG93biBjaGlsZHJlbiBldmVuIG9mIGhvcGUuIFdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyBoaXMgdGVhcnMsIHJlbWVtYmVyIHRoYXQgeW91IGhvbGQgaW4geW91ciBwb3dlciBhIG1hbiB3aG8gYmFkZSB5b3Ugc2VuZAogICAgICAgICAgICAgICAgICAgIGFjY3VzZXJzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT4gdG8gdGVzdGlmeSBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIGFnZW50cyBvZiBQaGlsaXAuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.311'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIHRvZGF5IHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm8gbmVlZCB0byBzZW5kIGEgbWlzc2lvbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4sIHRvIG1ha2UgYSBsb25nIGpvdXJuZXksIG9yIHRvIHBheSB0cmF2ZWxsaW5nCiAgICAgICAgICAgICAgICAgICAgZXhwZW5zZXM7IHlvdSBoYXZlIG9ubHkgdG8gYWR2YW5jZSBvbmUgYnkgb25lIHRvIHRoaXMgcGxhdGZvcm0sIGFuZCB0aGVyZSBjYXN0IGEKICAgICAgICAgICAgICAgICAgICBqdXN0IGFuZCBhIHJpZ2h0ZW91cyB2b3RlIGZvciB5b3VyIGNvdW50cnkncyBzYWtlIGFnYWluc3QgdGhlIG1hbiB3aG8sIGhhdmluZyBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBvdXRzZXQsIGFzIEkgZGVzY3JpYmVkIHRvIHlvdSwgc3Bva2VuIHNvIGVsb3F1ZW50bHkgYWJvdXQgTWFyYXRob24gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4sIGFib3V0IGJhdHRsZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdmljdG9yaWVzLCBmcm9tIHRoZSBtb21lbnQgaGUgc2V0IGZvb3Qgb24gTWFjZWRvbmlhbiBzb2lsIGNvbnRyYWRpY3RlZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJhbmNlcywgZm9yYmFkZSB5b3UgdG8gcmVtZW1iZXIgdGhlIGV4YW1wbGUgb2YgeW91ciBmb3JlZmF0aGVycywgb3IgcmVjYWxsCiAgICAgICAgICAgICAgICAgICAgb2xkIHZpY3Rvcmllcywgb3IgY2Fycnkgc3VjY29yIHRvIHlvdXIgZnJpZW5kcywgb3IgdGFrZSBjb21tb24gY291bnNlbCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIEdyZWVrcywgYW5kIHdlbGwtbmlnaCBiYWRlIHlvdSB0byBkaXNtYW50bGUgdGhlIGRlZmVuY2VzIG9mIHlvdXIgY2l0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.312'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTIiIHVuaXQ9InNlY3Rpb24iIC8+Tm8gbW9yZSBkaXNncmFjZWZ1bCBzcGVlY2hlcyBoYXZlIGV2ZXIKICAgICAgICAgICAgICAgICAgICBiZWVuIG1hZGUgaW4geW91ciBoZWFyaW5nIGR1cmluZyB0aGUgd2hvbGUgY291cnNlIG9mIHlvdXIgaGlzdG9yeS4gTGl2ZXMgdGhlcmUgYQogICAgICAgICAgICAgICAgICAgIG1hbiwgR3JlZWsgb3IgYmFyYmFyaWFuLCBzbyBib29yaXNoLCBzbyB1bnZlcnNlZCBpbiBoaXN0b3J5LCBvciBzbyBpbGwtZGlzcG9zZWQKICAgICAgICAgICAgICAgICAgICB0byBvdXIgY29tbW9ud2VhbHRoIHRoYXQsIGlmIGhlIHdlcmUgYXNrZWQgdGhlIHF1ZXN0aW9uLCDigJxUZWxsIG1lLCBpbgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgY291bnRyeSB0aGF0IHdlIGNhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgIGluaGFiaXQgdG9kYXksIGlzIHRoZXJlIGFuIGFjcmUgdGhhdCB3b3VsZCBzdGlsbCBiZWFyIHRoYXQgbmFtZSwgb3IgcmVtYWluIHRoZQogICAgICAgICAgICAgICAgICAgIGhvbWUgb2YgdGhlIEdyZWVrcyB3aG8gbm93IHBvc3Nlc3MgaXQsIGlmIHRoZSBoZXJvZXMgb2YgTWFyYXRob24gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4sIG91ciBmb3JlZmF0aGVycywgaGFkIG5vdCBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRlZmVuY2UgcGVyZm9ybWVkIHRob3NlIGdsb3Jpb3VzIGRlZWRzIG9mIHZhbG9yLOKAnSBpcyB0aGVyZSBvbmUgbWFuIHdobwogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBtYWtlIHJlcGx5OiDigJxObzsgdGhlIHdob2xlIGNvdW50cnkgd291bGQgaGF2ZSBiZWNvbWUgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJleSBvZiB0aGUgYmFyYmFyaWFuIGludmFkZXJz4oCdPyA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.313'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTMiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiBhbW9uZyB5b3VyIGZvZXMgdGhlcmUgaXMgbm90IGEgbWFuIHdobyB3b3VsZCBkZXNwb2lsIHRob3NlIGhlcm9lcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1lZWQgb2YgcHJhaXNlIGFuZCBncmF0aXR1ZGU7IGFuZCBkb2VzIGFuIEFlc2NoaW5lcyBmb3JiaWQgeW91LCB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBkZXNjZW5kYW50cywgdG8gY29tbWVtb3JhdGUgdGhlaXIgbmFtZXPigJRhbGwgZm9yIHRoZSBzYWtlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIG1pc2VyYWJsZSBicmliZXM/IFRoZXJlIGFyZSBpbmRlZWQgcmV3YXJkcyBpbiB3aGljaCB0aGUgZGVhZCBoYXZlIG5vIHBhcnQgb3IKICAgICAgICAgICAgICAgICAgICBsb3Q7IGJ1dCB0aGUgcHJhaXNlIHRoYXQgd2FpdHMgb24gZ2xvcmlvdXMgYWNoaWV2ZW1lbnRzIGlzIHRoZSBwZWN1bGlhciBndWVyZG9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2Ugd2hvIGhhdmUgZ2xvcmlvdXNseSBkaWVk4oCUZm9yIHRoZW4gamVhbG91c3kgaXMgbm8gbG9uZ2VyIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYWR2ZXJzYXJ5LiBMZXQgdGhlIG1hbiB3aG8gd291bGQgcm9iIHRoZSBkZWFkIG9mIHRoZWlyIHJld2FyZCBiZSBzdHJpcHBlZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gaG9ub3JzOiB0aGF0IHJldHJpYnV0aW9uIHlvdSB3aWxsIGxldnkgb24gaGltIGZvciB5b3VyIGZvcmVmYXRoZXJzJyBzYWtlLiBCeQogICAgICAgICAgICAgICAgICAgIHRob3NlIHNwZWVjaGVzIG9mIHlvdXJzLCB5b3UgcmVwcm9iYXRlLCB5b3UgbWFkZSBoYXZvYyBvZiBvdXIgcG9saWN5LCB0cmFkdWNpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgZGlzcGFyYWdpbmcgd2l0aCB5b3VyIHRvbmd1ZSB0aGUgYWNoaWV2ZW1lbnRzIG9mIG91ciBmb3JlZmF0aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.314'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZyb20gdGhlc2UgcGVyZm9ybWFuY2VzIHlvdSBlbWVyZ2UgYSBsYW5kLW93bmVyLAogICAgICAgICAgICAgICAgICAgIGEgcGVyc29uIG9mIGhpZ2ggY29uc2lkZXJhdGlvbiEgVGFrZSBhbm90aGVyIHBvaW50LiBCZWZvcmUgaGUgZGlkIGFsbCB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWlzY2hpZWYgdG8gdGhlIGNvbW1vbndlYWx0aCwgaGUgdXNlZCB0byBhZG1pdCB0aGF0IGhlIGhhZCBiZWVuIGEgY2xlcms7IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGdyYXRlZnVsIHRvIHlvdSBmb3IgaGlzIGFwcG9pbnRtZW50czsgaGlzIGRlbWVhbm9yIHdhcyBxdWl0ZSBtb2Rlc3QuIEJ1dCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBwZXJwZXRyYXRlZCB3cm9uZ3Mgd2l0aG91dCBudW1iZXIsIGhlIGhhcyBiZWNvbWUgbWlnaHRpbHkgc3VwZXJjaWxpb3VzLgogICAgICAgICAgICAgICAgICAgIElmIGEgbWFuIHNwZWFrcyBvZiDigJxBZXNjaGluZXMsIHRoZSBtYW4gd2hvIHdhcyBvbmNlIGEKICAgICAgICAgICAgICAgICAgICBjbGVyayzigJ0gaGUgbWFrZXMgYSBwcml2YXRlIHF1YXJyZWwgb2YgaXQsIGFuZCB0YWxrcyBvZiBkZWZhbWF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLiBCZWhvbGQgaGltIHBhY2luZyB0aGUgbWFya2V0LXBsYWNlIHdpdGggdGhlIHN0YXRlbHkgc3RyaWRlIG9mCiAgICAgICAgICAgICAgICAgICAgUHl0aG9jbGVzLCBoaXMgbG9uZyByb2JlIHJlYWNoaW5nIHRvIGhpcyBhbmtsZXMsIGhpcyBjaGVla3MgcHVmZmVkIG91dCwgYXMgd2hvCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHNheSwg4oCcT25lIG9mIFBoaWxpcCdzIG1vc3QgaW50aW1hdGUgZnJpZW5kcywgYXQgeW91cgogICAgICAgICAgICAgICAgICAgIHNlcnZpY2Uh4oCdIEhlIGhhcyBqb2luZWQgdGhlIGNsaXF1ZSB0aGF0IHdhbnRzIHRvIGdldCByaWQgb2YKICAgICAgICAgICAgICAgICAgICBkZW1vY3JhY3ks4oCUdGhhdCByZWdhcmRzIHRoZSBlc3RhYmxpc2hlZCBwb2xpdGljYWwgb3JkZXIgYXMgYW4KICAgICAgICAgICAgICAgICAgICBpbmNvbnN0YW50IHdhdmUs4oCUbWVyZSBtaWRzdW1tZXIgbWFkbmVzcy4gQW5kIG9uY2UgaGUgbWFkZSBvYmVpc2FuY2UgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgUm90dW5kYSE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjQ5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOS4yNDk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI0OSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTkuMjQ5PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.315'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIHdpc2ggYnkKICAgICAgICAgICAgICAgICAgICBhIGJyaWVmIHJlY2FwaXR1bGF0aW9uIHRvIHJlbWluZCB5b3Ugb2YgdGhlIG1hbm5lciBpbiB3aGljaCBQaGlsaXAgZGlzY29tZml0ZWQKICAgICAgICAgICAgICAgICAgICB5b3VyIHBvbGljeSB3aXRoIHRoZXNlIHNjb3VuZHJlbHMgYXMgaGlzIGNvbmZlZGVyYXRlcy4gSXQgaXMgd2VsbCB3b3J0aCB3aGlsZSB0bwogICAgICAgICAgICAgICAgICAgIGV4YW1pbmUgYW5kIGNvbnRlbXBsYXRlIHRoZSB3aG9sZSBpbXBvc2l0aW9uLiBBdCB0aGUgb3V0c2V0IGhlIHdhcyByZWFsbHkKICAgICAgICAgICAgICAgICAgICBkZXNpcm91cyBvZiBwZWFjZSwgZm9yIGhpcyB3aG9sZSBjb3VudHJ5IHdhcyBvdmVycnVuIGJ5IGJhbmRpdHRpLCBhbmQgaGlzIHBvcnRzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBibG9ja2FkZWQsIHNvIHRoYXQgaGUgZ290IG5vIGFkdmFudGFnZSBmcm9tIGFsbCBoaXMgd2VhbHRoLiBBY2NvcmRpbmdseSBoZQogICAgICAgICAgICAgICAgICAgIHNlbnQgdGhvc2UgZW52b3lzIHdobyBhZGRyZXNzZWQgeW91IGluIGhpcyBuYW1lIHdpdGggc28gbXVjaAogICAgICAgICAgICAgICAgICAgIGNvdXJ0ZXN54oCUTmVvcHRvbGVtdXMsIEFyaXN0b2RlbXVzLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.316'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHNvb24gYXMgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdmlzaXRlZCBieSB1cyBhbWJhc3NhZG9ycywgaGUgcHJvbXB0bHkgdG9vayBBZXNjaGluZXMgaW50byBoaXMgcGF5LCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc3VwcG9ydCBhbmQgY28tb3BlcmF0ZSB3aXRoIHRoZSBpbmZhbW91cyBQaGlsb2NyYXRlcywgYW5kIG92ZXJwb3dlciB0aG9zZQogICAgICAgICAgICAgICAgICAgIG9mIHVzIHdob3NlIGludGVudGlvbnMgd2VyZSBob25lc3QuIEhlIHRoZW4gY29tcG9zZWQgYSBsZXR0ZXIgdG8geW91LCBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBiZXN0IG1lYW5zIG9mIG9idGFpbmluZyB0aGUgcGVhY2UgaGUgZGVzaXJlZC4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.317'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTciIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiB0aGVuIGl0IHdhcyBzdGlsbCBvdXQgb2YgaGlzIHBvd2VyIHRvIGFjaGlldmUgYW55IGltcG9ydGFudCByZXN1bHQgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGRpc2FkdmFudGFnZSwgdW5sZXNzIGhlIHNob3VsZCBkZXN0cm95IHRoZSBQaG9jaWFucy4gVGhhdCB3YXMgbm8gZWFzeSB0YXNrLAogICAgICAgICAgICAgICAgICAgIGZvciwgYXMgbHVjayB3b3VsZCBoYXZlIGl0LCBoaXMgYWZmYWlycyBoYWQgcmVhY2hlZCBhIGNyaXNpcyBvZiBzdWNoIGEgbmF0dXJlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBlaXRoZXIgaGUgY291bGQgbm90IHJlYWxpemUgYW55IG9mIGhpcyBwdXJwb3Nlcywgb3IgZWxzZSBoZSB3YXMgb2JsaWdlZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbW1pdCBmYWxzZWhvb2QgYW5kIHBlcmp1cnksIHdpdGggdGhlIHdob2xlIHdvcmxkLCBib3RoIEdyZWVrIGFuZCBiYXJiYXJpYW4sIHRvCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyBoaXMgd2lja2VkbmVzcy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.318'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGFjY2VwdCB0aGUgUGhvY2lhbnMgYXMgYWxsaWVzLCBhbmQgd2l0aCB5b3VyIGhlbHAgdGFrZSB0aGUgb2F0aCBvZiBmcmllbmRzaGlwIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgaGUgbXVzdCBhdCBvbmNlIHZpb2xhdGUgdGhlIG9hdGhzIGhlIGhhZCBhbHJlYWR5IHN3b3JuIHRvIHRoZSBUaGVzc2FsaWFucwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgVGhlYmFucywgd2l0aCB0aGUgbGF0dGVyIG9mIHdob20gaGUgaGFkIGNvdmVuYW50ZWQgdG8gaGVscCB0aGVtIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHN1Ymp1Z2F0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4sIGFuZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcm1lciB0byByZXN0b3JlIHRoZWlyIHJpZ2h0cyBhdCB0aGUgQW1waGljdHlvbmljIENvdW5jaWwuIElmLCBvbiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBoYW5kLCBoZSB3YXMgbG90aCB0byBhY2NlcHQgdGhlbeKAlGFuZCBpbiBmYWN0IHRoZSBwcm9zcGVjdCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgcGxlYXNlIGhpbeKAlGhlIGV4cGVjdGVkIHRoYXQgeW91IHdvdWxkIHNlbmQgdHJvb3BzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiB0byBzdG9wIGhpcyBwYXNzYWdlLCBhcwogICAgICAgICAgICAgICAgICAgIGluZGVlZCB5b3Ugd291bGQgaGF2ZSBkb25lIGlmIHlvdSBoYWQgbm90IGJlZW4gb3V0d2l0dGVkLiBJbiB0aGF0IGV2ZW50LCBoZQogICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWQgdGhhdCBoZSB3b3VsZCBiZSB1bmFibGUgdG8gZ2V0IHRocm91Z2guIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.319'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTkiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZGlkIG5vdCBuZWVkIGFueSBpbmZvcm1hdGlvbiBmcm9tIG90aGVycyB0byByZWFjaCB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbi4gSGUgd2FzIGhpbXNlbGYgYSBzdWZmaWNpZW50IHdpdG5lc3MsIGZvciwgYWZ0ZXIgaGlzIGZpcnN0IGRlZmVhdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBQaG9jaWFucyBhbmQgdGhlIG92ZXJ0aHJvdyBvZiB0aGVpciBsZWFkZXIgYW5kIGNvbW1hbmRlciBPbm9tYXJjaHVzLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIG5vIG9uZSBpbiB0aGUgd2hvbGUgd29ybGQsIEdyZWVrIG9yIGJhcmJhcmlhbiwgc2VudCBhaWQgdG8gdGhlbSBzYXZlCiAgICAgICAgICAgICAgICAgICAgeW91IGFsb25lLCBzbyBmYXIgZnJvbSBnZXR0aW5nIHRocm91Z2ggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LCBvciBhY2NvbXBsaXNoaW5nIGFueSBvZiB0aGUgcHVycG9zZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFzc2FnZSwgaGUgaGFkIGJlZW4gdW5hYmxlIGV2ZW4gdG8gYXBwcm9hY2ggdGhlIHBhc3MuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.320'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjAiIHVuaXQ9InNlY3Rpb24iIC8+SSB0YWtlIGl0IGhlIHdhcyBwZXJmZWN0bHkgd2VsbCBhd2FyZSB0aGF0IG5vdywgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiBhdCB2YXJpYW5jZSB3aXRoIGhpbeKAlHRoZQogICAgICAgICAgICAgICAgICAgIFBoZXJhZWFucywgZm9yIGV4YW1wbGUsIHJlZnVzaW5nIHRvIGpvaW4gaGlzIGZvbGxvd2luZ+KAlHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBnZXR0aW5nIHRoZSB3b3JzdCBvZiB0aGUgd2FyLCBkZWZlYXRlZCBpbiBhbiBlbmdhZ2VtZW50LCBhbmQgYSB0cm9waHkKICAgICAgICAgICAgICAgICAgICBlcmVjdGVkIGF0IHRoZWlyIGV4cGVuc2UsIGhlIHdvdWxkIGJlIHVuYWJsZSB0byBmb3JjZSB0aGUgcGFzc2FnZSBpZiB5b3Ugc2VudAogICAgICAgICAgICAgICAgICAgIHRyb29wcyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgY291bGQgbm90IGV2ZW4gbWFrZSB0aGUgYXR0ZW1wdCB3aXRob3V0IHNlcmlvdXMgbG9zcyB1bmxlc3MgaGUgc2hvdWxkIGFsc28KICAgICAgICAgICAgICAgICAgICByZXNvcnQgdG8gc29tZSB0cmlja2VyeS4g4oCcSG93LCB0aGVuLOKAnSBoZSB0aG91Z2h0LAogICAgICAgICAgICAgICAgICAgIOKAnHNoYWxsIEkgZXNjYXBlIG9wZW4gZmFsc2Vob29kLCBhbmQgYXR0YWluIGFsbCBteSBvYmplY3RzIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBpbmN1cnJpbmcgdGhlIGNoYXJnZSBvZiBwZXJqdXJ5PyBPbmx5IGlmIEkgY2FuIGZpbmQgQXRoZW5pYW5zIHRvIGhvb2Qtd2luayB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBwZW9wbGUsIGZvciB0aGVuIEkgc2hhbGwgaGF2ZSBubyBzaGFyZSBpbiB0aGUgZW5zdWluZwogICAgICAgICAgICAgICAgICAgIGRpc2hvbm9yLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.321'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHkgaGlzIGVudm95cwogICAgICAgICAgICAgICAgICAgIHdhcm5lZCB5b3UgdGhhdCBoZSB3b3VsZCBub3QgYWNjZXB0IHRoZSBQaG9jaWFuIGFsbGlhbmNlLCBidXQgdGhlbiBBZXNjaGluZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGlzIGZyaWVuZHMsIHRha2luZyB1cCB0aGUgdGFsZSwgYXNzdXJlZCB0aGUgcGVvcGxlIHRoYXQsIGFsdGhvdWdoIGZvciB0aGUgc2FrZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBUaGViYW5zIGFuZCB0aGUgVGhlc3NhbGlhbnMgUGhpbGlwIGNvdWxkIG5vdCB3aXRoIGRlY2VuY3kgYWNjZXB0IHRoZQogICAgICAgICAgICAgICAgICAgIGFsbGlhbmNlLCB5ZXQgaWYgaGUgc2hvdWxkIGJlY29tZSBtYXN0ZXIgb2YgdGhlIHNpdHVhdGlvbiwgYW5kIGdldCBoaXMgcGVhY2UsIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgdGhlcmVhZnRlciBkbyBleGFjdGx5IHdoYXQgd2Ugc2hvdWxkIG5vdyBhc2sgaGltIHRvIGFncmVlIHRvLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.322'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gb24gdGhlIHN0cmVuZ3RoIG9mIHRoZXNlIGV4cGVjdGF0aW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICBpbmR1Y2VtZW50cyBoZSBvYnRhaW5lZCBoaXMgcGVhY2UsIHdpdGggdGhlIFBob2NpYW5zIGV4Y2x1ZGVkOyBidXQgaXQgd2FzIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRvIHN0b3AgdGhlIHJlaW5mb3JjZW1lbnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+LCBmb3Igd2hpY2ggZmlmdHkgd2FyLWdhbGxleXMgd2VyZSBseWluZyBhdCBhbmNob3IKICAgICAgICAgICAgICAgICAgICB0byBlbmFibGUgeW91IHRvIGNoZWNrIFBoaWxpcCdzIGFkdmFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.323'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93CiAgICAgICAgICAgICAgICAgICAgY291bGQgaXQgYmUgZG9uZT8gV2hhdCBuZXcgYXJ0aWZpY2UgY291bGQgaGUgaW52ZW50IGZvciB0aGF0IHB1cnBvc2U/IFNvbWVvbmUKICAgICAgICAgICAgICAgICAgICBtdXN0IGZpbGNoIHlvdXIgb3Bwb3J0dW5pdGllcyBvZiBhY3Rpb24sIGFuZCBzdXJwcmlzZSB5b3Ugd2l0aCBhbiB1bmV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgY3Jpc2lzLCBzbyB0aGF0IHlvdSBtaWdodCBsb3NlIHRoZSBwb3dlciwgaWYgbm90IHRoZSB3aWxsLCBvZiBzZW5kaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cGVkaXRpb24uIFRoYXQsIHRoZW4sIHdhcyBjbGVhcmx5IHdoYXQgdGhlc2UgbWVuIHVuZGVydG9vay4gQXMgeW91IGhhdmUgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBoZWFyZCwgSSB3YXMgdW5hYmxlIHRvIGdldCBhd2F5IGluIHRpbWU7IEkgaGFkIGNoYXJ0ZXJlZCBhIHNoaXAsIGJ1dCB3YXMKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgZnJvbSBzYWlsaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.324'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGl0IHdhcyBmdXJ0aGVyCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRoYXQgdGhlIFBob2NpYW5zIHNob3VsZCBhY3F1aXJlIGNvbmZpZGVuY2UgaW4gUGhpbGlwIGFuZCBtYWtlIGEKICAgICAgICAgICAgICAgICAgICB2b2x1bnRhcnkgc3VycmVuZGVyLCBzbyB0aGF0IG5vIGRlbGF5IHNob3VsZCBpbnRlcnZlbmUsIGFuZCBubyB1bmZyaWVuZGx5CiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiBjb21lIHRvIGhhbmQgZnJvbSB5b3UuIOKAnFZlcnkgd2VsbCzigJ0gdGhvdWdodAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwg4oCcYSByZXBvcnQgc2hhbGwgYmUgbWFkZSBieSB0aGUgQXRoZW5pYW4gYW1iYXNzYWRvcnMgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFucyBhcmUgdG8gYmUgcHJvdGVjdGVkOyBhbmQgc28sIHRob3VnaCB0aGV5IHBlcnNpc3QgaW4gbWlzdHJ1c3RpbmcgbWUsCiAgICAgICAgICAgICAgICAgICAgdGhleSB3aWxsIGRlbGl2ZXIgdGhlbXNlbHZlcyBpbnRvIG15IGhhbmRzIHRocm91Z2ggY29uZmlkZW5jZSBpbiB0aGUgQXRoZW5pYW5zLgogICAgICAgICAgICAgICAgICAgIFdlIHdpbGwgZW5saXN0IHRoZSBzeW1wYXRoeSBvZiB0aGUgQXRoZW5pYW4gcGVvcGxlIGluIHRoZSBob3BlIHRoYXQsIHN1cHBvc2luZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdG8gaGF2ZSBnb3QgZXZlcnl0aGluZyB0aGV5IHdhbnQsIHRoZXkgd2lsbCBwYXNzIG5vIG9ic3RydWN0aXZlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbi4gVGhlc2UgbWVuIHNoYWxsIGNhcnJ5IGZyb20gdXMgc3VjaCBmbGF0dGVyaW5nIHJlcG9ydHMgYW5kIGFzc3VyYW5jZXMKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGF0c29ldmVyIG1heSBiZWZhbGwsIHRoZXkgd2lsbCBtYWtlIG5vIG1vdmVtZW50LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.325'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoaXMgbWFubmVyIGFuZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBhaWQgb2YgdGhpcyBhcnRpZmljZSBvdXIgcnVpbiB3YXMgYWNjb21wbGlzaGVkIGJ5IG1lbiB0aGVtc2VsdmVzIGRvb21lZCB0bwogICAgICAgICAgICAgICAgICAgIHBlcmRpdGlvbi4gRm9yIGF0IG9uY2UsIGluc3RlYWQgb2Ygd2l0bmVzc2luZyB0aGUgcmVzdG9yYXRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiwgeW91IGhlYXJkIG9mIHRoZSBlbnNsYXZlbWVudCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAzNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDM0Ij5PcmNob21lbnVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTIzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjM1Ij5Db3JvbmVhPC9wbGFjZU5hbWU+LiBJbnN0ZWFkIG9mIHRoZSBodW1pbGlhdGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kIHRoZSBhYmFzZW1lbnQgb2YgaGVyIHByaWRlIGFuZAogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSwgdGhlIHdhbGxzIG9mIHlvdXIgb3duIGFsbGllcyB0aGUgUGhvY2lhbnMgd2VyZSBkZW1vbGlzaGVkLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZW1vbGlzaGVkIGJ5IHRob3NlIHZlcnkgVGhlYmFucyB3aG9tIEFlc2NoaW5lcyBpbiBoaXMgc3BlZWNoIGhhZCBzZW50IHRvIGxpdmUKICAgICAgICAgICAgICAgICAgICBpbiBzY2F0dGVyZWQgdmlsbGFnZXMuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.326'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjYiIHVuaXQ9InNlY3Rpb24iIC8+SW5zdGVhZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzdXJyZW5kZXIgdG8geW91IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBpbiBleGNoYW5nZQogICAgICAgICAgICAgICAgICAgIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4sIFBoaWxpcCBpcwogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGluZyBwb3NpdGlvbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGFzIGEKICAgICAgICAgICAgICAgICAgICBiYXNlIG9mIGF0dGFjayB1cG9uIHlvdSwgYW5kIGlzIGNvbnN0YW50bHkgcGxvdHRpbmcgYWdhaW5zdCBHZXJhZXN0dXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPi4gSW5zdGVhZCBvZiByZWNvdmVyaW5nCiAgICAgICAgICAgICAgICAgICAgT3JvcHVzLCB3ZSBhcmUgbWFraW5nIGFuIGFybWVkIGV4cGVkaXRpb24gdG8gc2VjdXJlIERyeW11czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EcnltdXMsIFBhbmFjdHVzOiBmcm9udGllci10b3ducyBvbiB0aGUgZWRnZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYW5kIHRoZSBkaXN0cmljdCBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYW5hY3R1cyw8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EcnltdXMsIFBhbmFjdHVzOiBmcm9udGllci10b3ducwogICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZWRnZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYW4KICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb24gaW4gd2hpY2ggd2UgbmV2ZXIgZW5nYWdlZCBzbyBsb25nIGFzIHRoZSBQaG9jaWFucyB3ZXJlIHNhZmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['19.Concl.327'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjciIHVuaXQ9InNlY3Rpb24iIC8+SW5zdGVhZCBvZiB0aGUgcmUtZXN0YWJsaXNobWVudCBvZgogICAgICAgICAgICAgICAgICAgIGFuY2llbnQgcml0ZXMgaW4gdGhlIFRlbXBsZSBvZiBBcG9sbG8sIGFuZCB0aGUgcmVzdGl0dXRpb24gb2YgdHJlYXN1cmUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZ29kLCBtZW4gd2hvIHdlcmUgb25jZSBBbXBoaWN0eW9ucyBhcmUgZnVnaXRpdmVzIGFuZCBleGlsZXMsIGFuZCBtZW4gd2hvIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgaW4gYWxsIGZvcm1lciB0aW1lIHdlcmUgbWVtYmVycyBvZiBpdCwgTWFjZWRvbmlhbnMgYW5kIGJhcmJhcmlhbnMsIGFyZSBub3cKICAgICAgICAgICAgICAgICAgICBmb3JjaW5nIHRoZWlyIHdheSBpbnRvIHRoZSBBbXBoaWN0eW9uaWMgQ291bmNpbC4gSWYgYW55b25lIHNheXMgYSB3b3JkIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhY3JlZCB0cmVhc3VyZSwgaGUgaXMgdGhyb3duIGRvd24gdGhlIHByZWNpcGljZTsgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpcyByb2JiZWQgb2YgaGVyIHByZWNlZGVuY2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3VsdGF0aW9uIG9mIHRoZSBPcmFjbGUuIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.328'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjgiIHVuaXQ9InNlY3Rpb24iIC8+VG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRoZSB3aG9sZSBidXNpbmVzcyBpcyBhbiBpbnNvbHVibGUKICAgICAgICAgICAgICAgICAgICBwdXp6bGUuIFBoaWxpcCBoYXMgZXNjYXBlZCBmYWxzZWhvb2QsIGFuZCBoYXMgYWNjb21wbGlzaGVkIGFsbCBoaXMgcHVycG9zZXMsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgeW91LCBhZnRlciBleHBlY3RpbmcgdGhlIGNvbXBsZXRlIGZ1bGZpbG1lbnQsIGhhdmUgd2l0bmVzc2VkIHRoZSBlbnRpcmUKICAgICAgICAgICAgICAgICAgICBkaXNhcHBvaW50bWVudCwgb2YgeW91ciBkZXNpcmVzLiBZb3UgYXJlIG5vbWluYWxseSBhdCBwZWFjZTsgeWV0IHBlYWNlIGhhcwogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgeW91IGdyZWF0ZXIgY2FsYW1pdGllcyB0aGFuIHdhci4gTWVhbnRpbWUgdGhlc2UgbWVuIGhhdmUgbWFkZSBtb25leSBieQogICAgICAgICAgICAgICAgICAgIHlvdXIgbWlzZm9ydHVuZXMsIGFuZCB1bnRpbCB0b2RheSBoYXZlIG5ldmVyIGJlZW4gYnJvdWdodCB0byBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.329'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjkiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB0aGV5IGhhdmUgZG9uZSBpdCBhbGwgZm9yIGJyaWJlcywgYW5kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIHByaWNlIG9mIHRoZWlyIHBlcmZpZHkgaW4gdGhlaXIgcG9ja2V0cywgaGFzLCBJIHN1cHBvc2UsIGxvbmcgYWdvIGJlZW4KICAgICAgICAgICAgICAgICAgICBtYW5pZmVzdCB0byB5b3UgZm9yIG1hbnkgcmVhc29uczsgYW5kIEkgYW0gYWZyYWlkIHRoYXQsIGNvbnRyYXJ5IHRvIG15IGRlc2lyZSwgSQogICAgICAgICAgICAgICAgICAgIG1heSBiZSB3ZWFyeWluZyB5b3UgYnkgc3VibWl0dGluZyBkZXRhaWxlZCBwcm9vZnMgb2YgZmFjdHMgd2VsbCBrbm93biB0byB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.330'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzAiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgSSBtdXN0IGFzayB5b3UgdG8gbGlzdGVuIHRvIG9uZQogICAgICAgICAgICAgICAgICAgIG1vcmUgYXJndW1lbnQuIEdlbnRsZW1lbiBvZiB0aGUganVyeSwgd291bGQgeW91IHNldCB1cCBpbiB0aGUgbWFya2V0LXBsYWNlIGEKICAgICAgICAgICAgICAgICAgICBzdGF0dWUgb2YgYW55IG9mIHRoZSBhbWJhc3NhZG9ycyB3aG9tIFBoaWxpcCBzZW50PyBPciB3b3VsZCB5b3UgZ2l2ZSB0byB0aGVtCiAgICAgICAgICAgICAgICAgICAgZnJlZSBtYWludGVuYW5jZSBpbiB0aGUgVG93biBIYWxsLCBvciBhbnkgb2YgdGhlIG90aGVyIHByaXZpbGVnZXMgd2l0aCB3aGljaCB5b3UKICAgICAgICAgICAgICAgICAgICByZXdhcmQgeW91ciBiZW5lZmFjdG9ycz8gU3VyZWx5IG5vdDsgYnV0IHdoeSBub3Q/IEZvciBpbiB5b3UgdGhlcmUgaXMgbm8gbGFjayBvZgogICAgICAgICAgICAgICAgICAgIGdyYXRpdHVkZSBvciBqdXN0aWNlIG9yIGtpbmRuZXNzLiBJdCBpcywgeW91IHdpbGwgc2F54oCUYW5kIGl0IGlzIGEgZmFpcgogICAgICAgICAgICAgICAgICAgIGFuZCBob25lc3QgcmVwbHnigJRiZWNhdXNlIHRoZXkgZGlkIGV2ZXJ5dGhpbmcgZm9yIFBoaWxpcCBhbmQgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGZvciB1cy4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.331'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBkbyB5b3Ugc3VwcG9zZSB0aGF0IFBoaWxpcCBhY3RzCiAgICAgICAgICAgICAgICAgICAgb24gYW4gZW50aXJlbHkgZGlmZmVyZW50IHByaW5jaXBsZSBmcm9tIHlvdXJzLCBhbmQgZ2l2ZXMgYWxsIHRob3NlIGhhbmRzb21lCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudHMgdG8gQWVzY2hpbmVzIGFuZCBoaXMgZnJpZW5kcyBiZWNhdXNlIHRoZXkgY29uZHVjdGVkIHRoZWlyIG1pc3Npb24gZHVseQogICAgICAgICAgICAgICAgICAgIGFuZCBob25lc3RseSBpbiB5b3VyIGludGVyZXN0PyBUaGF0IGlzIG5vdCBzby4gWW91IGhhdmUgb2JzZXJ2ZWQgdGhlIHJlY2VwdGlvbgogICAgICAgICAgICAgICAgICAgIGhlIGdhdmUgdG8gdGhlIGVudm95IEhlZ2VzaXBwdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGVnZXNpcHB1cwogICAgICAgICAgICAgICAgICAgICAgICBbNzJdOiByZWNlbnRseSBzZW50IHRvIHByb3Rlc3QgYWdhaW5zdCBQaGlsaXAncyByZXRlbnRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgSGFsb25uZXN1czsgYXV0aG9yIG9mIHRoZSBzcGVlY2ggPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gSGFsb25uZXN1czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDciIHZhbGlkPSJ5ZXMiPkRlbS4gNzwvYmlibD7vvIkgYXR0cmlidXRlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcy48L25vdGU+IGFuZCBoaXMgY29sbGVhZ3Vlcy4gTm90IHRvIG1lbnRpb24gb3RoZXIgZGV0YWlscywgaGUKICAgICAgICAgICAgICAgICAgICBiYW5pc2hlZCBieSBwcm9jbGFtYXRpb24gdGhlIEF0aGVuaWFuIHBvZXQgWGVub2NsZWlkZXMgZm9yIG9mZmVyaW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICBob3NwaXRhbGl0eSBhcyBmZWxsb3ctY2l0aXplbnMuIFN1Y2ggaXMgaGlzIGJlaGF2aW9yIHRvd2FyZHMgeW91cgogICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGF0aXZlcyB3aGVuIHRoZXkgaG9uZXN0bHkgc3BlYWsgb3V0IHdoYXQgdGhleSB0aGluazsgdGhvc2Ugd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICBzb2xkIHRoZW1zZWx2ZXMgaGUgdHJlYXRzIGFzIGhlIHRyZWF0ZWQgQWVzY2hpbmVzIGFuZCBoaXMgZnJpZW5kcy4gTXkgYXJndW1lbnQKICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBvdGhlciB3aXRuZXNzZXMgYW5kIG5vIHN0cm9uZ2VyIHByb29mczsgbm9yIGNhbiBhbnlvbmUgZXJhc2UgdGhlc2UKICAgICAgICAgICAgICAgICAgICBwcm9vZnMgZnJvbSB5b3VyIG1pbmRzLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiBIYWxvbm5lc3VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNyIgdmFsaWQ9InllcyI+RGVtLiA3PC9iaWJsPu+8iSBhdHRyaWJ1dGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLjwvdHJhbnNsYXRpb24+"
translation['19.Concl.332'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvbWUgb25lIGNhbWUgdXAgdG8gbWUganVzdCBub3cgaW4gZnJvbnQgb2YgdGhlIGNvdXJ0LAogICAgICAgICAgICAgICAgICAgIGFuZCB0b2xkIG1lIGEgdmVyeSBvZGQgdGhpbmcuIEFlc2NoaW5lcywgaGUgc2FpZCwgaGFkIHByZXBhcmVkIGhpbXNlbGYgdG8KICAgICAgICAgICAgICAgICAgICBkZW5vdW5jZSB0aGUgZ2VuZXJhbCBDaGFyZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNoYXJlczogZm9yIHRoaXJ0eQogICAgICAgICAgICAgICAgICAgICAgICB5ZWFycyBhbiB1bmx1Y2t5LCBvciBpbmNvbXBldGVudCwgY29tbWFuZGVyIGJ5IGxhbmQgYW5kIHNlYTsgcG9saXRpY2FsbHksIGEKICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kIG9mIERlbW9zdGhlbmVzOyBoYWQgY29tbWFuZGVkIHRoZSB1bnN1Y2Nlc3NmdWwgZXhwZWRpdGlvbiBzZW50IHRvbwogICAgICAgICAgICAgICAgICAgICAgICBsYXRlIGZvciB0aGUgcmVsaWVmIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPi48L25vdGU+IGhvcGluZyB0byBjYWpvbGUgeW91IGJ5IGhpcyBlbG9xdWVudAogICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudCBvZiB0aGF0IHRvcGljLiBJIHdpbGwgbm90IGxheSB0b28gbXVjaCBzdHJlc3Mgb24gdGhlIG9ic2VydmF0aW9uIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgQ2hhcmVzIGhhcyBiZWVuIGJyb3VnaHQgdG8gdHJpYWwsIGhlIGhhcyBiZWVuIGZvdW5kIHRvIGhhdmUgYWN0ZWQKICAgICAgICAgICAgICAgICAgICBmYWl0aGZ1bGx5IGFuZCBsb3lhbGx5LCBzbyBmYXIgYXMgaW4gaGltIGxheSwgaW4geW91ciBpbnRlcmVzdHMsIHRob3VnaCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBvZnRlbiBmYWlsZWQgb2Ygc3VjY2VzcyBieSB0aGUgZmF1bHQgb2YgdGhlIHBlb3BsZSB3aG8gZG8gbWlzY2hpZWYgZm9yIG1vbmV5LiBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBnbyBzbyBmYXIgYXMgdG8gZ3JhbnQgZm9yIGFyZ3VtZW50J3Mgc2FrZSB0aGF0IGV2ZXJ5IHdvcmQgQWVzY2hpbmVzIHdpbGwKICAgICAgICAgICAgICAgICAgICB1dHRlciBhZ2FpbnN0IGhpbSBpcyB0cnVlLiBCdXQgZXZlbiBvbiB0aGF0IGFzc3VtcHRpb24gaXQgaXMgYWJzb2x1dGVseQogICAgICAgICAgICAgICAgICAgIHJpZGljdWxvdXMgdGhhdCBhIG1hbiBpbiBDaGFyZXMnIHBvc2l0aW9uIHNob3VsZCBiZSBkZW5vdW5jZWQgYnkgYSBtYW4gbGlrZQogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcy4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['19.Concl.333'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzMiIHVuaXQ9InNlY3Rpb24iIC8+T2JzZXJ2ZSB0aGF0IEkgZG8gbm90IGJsYW1lCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIGZvciBhbnkgb2YgdGhlIG1pc2FkdmVudHVyZXMgb2YgdGhlIHdhciwgZm9yIHdoaWNoIHRoZSBnZW5lcmFscyBhcmUKICAgICAgICAgICAgICAgICAgICBkdWx5IGNhbGxlZCB0byBhY2NvdW50LiBOb3IgZG8gSSBibGFtZSBoaW0gYmVjYXVzZSB0aGUgY2l0eSBtYWRlIHRoZSBwZWFjZTogc28KICAgICAgICAgICAgICAgICAgICBmYXIgSSBhY3F1aXQgaGltLiBXaGF0IHRoZW4gaXMgdGhlIGJhc2lzIG9mIG15IHNwZWVjaCBhbmQgb2YgbXkgaW5kaWN0bWVudD8KICAgICAgICAgICAgICAgICAgICBUaGF0LCB3aGVuIHRoZSBjaXR5IHdhcyBtYWtpbmcgdGhlIHBlYWNlLCBoZSBzdXBwb3J0ZWQgUGhpbG9jcmF0ZXMsIGFuZCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydCBzcGVha2VycyB3aG9zZSBwcm9wb3NhbHMgd2VyZSBwYXRyaW90aWM7IHRoYXQgaGUgdG9vayBicmliZXM7IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZWFmdGVyLCBvbiB0aGUgbGF0ZXIgZW1iYXNzeSwgaGUgZGVsaWJlcmF0ZWx5IHNxdWFuZGVyZWQgaGlzIG9wcG9ydHVuaXRpZXM7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBkZWNlaXZlZCB0aGUgY2l0eSwgYW5kIGNvbmZvdW5kZWQgaXRzIHBvbGljeSwgYnkgc3VnZ2VzdGluZyB0aGUgaG9wZQogICAgICAgICAgICAgICAgICAgIHRoYXQgUGhpbGlwIHdvdWxkIHNhdGlzZnkgYWxsIG91ciBkZXNpcmVzOyBhbmQgdGhhdCBzdWJzZXF1ZW50bHksIHdoZW4gb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgd2FybmVkIHlvdSB0byBiZXdhcmUgb2YgdGhlIHBlcnBldHJhdG9yIG9mIHNvIG1hbnkgaW5pcXVpdGllcywgaGUgYWRkcmVzc2VkIHlvdQogICAgICAgICAgICAgICAgICAgIGFzIGhpcyBhZHZvY2F0ZS4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.334'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXJlIG15IGFjY3VzYXRpb25zLiBEbwogICAgICAgICAgICAgICAgICAgIG5vdCBmb3JnZXQgdGhlbS4gRm9yIGEganVzdCBhbmQgZXF1aXRhYmxlIHBlYWNlIEkgd291bGQgYmUgZ3JhdGVmdWw7IEkgd291bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGNvbW1lbmRlZCBhbmQgYWR2aXNlZCB5b3UgdG8gZGVjb3JhdGUgbmVnb3RpYXRvcnMgd2hvIGhhZCBub3QgZmlyc3Qgc29sZAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW5kIHRoZW4gZGVjZWl2ZWQgeW91IHdpdGggZmFsc2Vob29kcy4gR3JhbnRlZCB0aGF0IHlvdSB3ZXJlIHdyb25nZWQKICAgICAgICAgICAgICAgICAgICBieSBhbnkgY29tbWFuZGVyLOKAlGhlIGlzIG5vdCBjb25jZXJuZWQgaW4gdGhlIHByZXNlbnQgaW5xdWlyeS4gRGlkIGFueQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlciBicmluZyBIYWx1cyB0byBkZXN0cnVjdGlvbj8gb3IgdGhlIFBob2NpYW5zPyBvciBEb3Jpc2N1cz8gb3IKICAgICAgICAgICAgICAgICAgICBDZXJzb2JsZXB0ZXM/IG9yIHRoZSBTYWNyZWQgTW91bnQ/IG9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPj8gV2FzIGl0IGEgY29tbWFuZGVyIHdobyBnYXZlIFBoaWxpcCBhbiBvcGVuIHJvYWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IHRocm91Z2ggdGhlIHRlcnJpdG9yeSBvZgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGFsbGllcz8gV2hvIGhhcyBtYWRlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyMzUiPkNvcm9uZWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDM0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwMzQiPk9yY2hvbWVudXM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGFsaWVuIGdyb3VuZCBmb3IgdXM/IFdobwogICAgICAgICAgICAgICAgICAgIG5lYXJseSBkaWQgdGhlIHNhbWUgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4gb25seQogICAgICAgICAgICAgICAgICAgIHllc3RlcmRheT8gV2hvIGhhcyBtYWRlIHRoZSBUaGViYW5zIHN0cm9uZz8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.335'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXJlIGVub3Jtb3VzIGxvc3NlcywgYnV0IGZvciBub25lIG9mIHRoZW0gaXMgYW55IGdlbmVyYWwgdG8gYmxhbWUuCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIGRvZXMgbm90IGhvbGQgYW55IG9mIHRoZXNlIGFkdmFudGFnZXMgYXMgYSBjb25jZXNzaW9uIG1hZGUgd2l0aCB5b3VyCiAgICAgICAgICAgICAgICAgICAgY29uc2VudCBpbiB0aGUgdGVybXMgb2YgcGVhY2UuIFdlIG93ZSB0aGVtIGFsbCB0byB0aGVzZSBtZW4gYW5kIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdmVuYWxpdHkuIElmLCB0aGVuLCBBZXNjaGluZXMgc2hpcmtzIHRoZSBpc3N1ZSwgaWYgaGUgdHJpZXMgdG8gbGVhZCB5b3UgYXN0cmF5CiAgICAgICAgICAgICAgICAgICAgYnkgdGFsa2luZyBvZiBhbnl0aGluZyByYXRoZXIgdGhhbiB0aGUgY2hhcmdlcyBJIGJyaW5nLCBJIHdpbGwgdGVsbCB5b3UgaG93IHRvCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSBoaXMgaXJyZWxldmFuY2UuIOKAnFdlIGFyZSBub3Qgc2l0dGluZyBpbiBqdWRnZW1lbnQgb24gYW55CiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnkgY29tbWFuZGVyLiBZb3UgYXJlIG5vdCBiZWluZyB0cmllZCBvbiB0aGUgY2hhcmdlcyB5b3UgcmVmdXRlLiBEbyBub3QKICAgICAgICAgICAgICAgICAgICB0ZWxsIHVzIHRoYXQgdGhpcyBtYW4gb3IgdGhhdCBtYW4gaXMgdG8gYmxhbWUgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBQaG9jaWFuczsgcHJvdmUgdG8gdXMgdGhhdCB5b3UgYXJlIG5vdCB0byBibGFtZS4gSWYgRGVtb3N0aGVuZXMgY29tbWl0dGVkIGFueQogICAgICAgICAgICAgICAgICAgIGNyaW1lLCB3aHkgYnJpbmcgaXQgdXAgbm93PyBXaHkgZGlkIHlvdSBub3QgbGF5IHlvdXIgY29tcGxhaW50IGF0IHRoZSBzdGF0dXRvcnkKICAgICAgICAgICAgICAgICAgICBpbnZlc3RpZ2F0aW9uIG9mIGhpcyBjb25kdWN0PyBGb3IgdGhhdCBzaWxlbmNlIGFsb25lIHlvdSBkZXNlcnZlIHlvdXIgZG9vbS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.Concl.336'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzYiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG5lZWQgbm90IHRlbGwgdXMgdGhhdCBwZWFjZSBpcyBhCiAgICAgICAgICAgICAgICAgICAgbG92ZWx5IGFuZCBwcm9maXRhYmxlIHRoaW5nOyBmb3Igbm9ib2R5IGJsYW1lcyB5b3UgYmVjYXVzZSB0aGUgY2l0eSBjb25jbHVkZWQKICAgICAgICAgICAgICAgICAgICBwZWFjZS4gRGVueSwgaWYgeW91IGNhbiwgdGhhdCB0aGUgcGVhY2Ugd2UgaGF2ZSBpcyBhIGRpc2dyYWNlZnVsIGFuZCBpZ25vbWluaW91cwogICAgICAgICAgICAgICAgICAgIHBlYWNlOyBkZW55IHRoYXQgYWZ0ZXIgaXRzIGNvbmNsdXNpb24gd2Ugd2VyZSBkZWNlaXZlZCwgYW5kIHRoYXQgYnkgdGhhdAogICAgICAgICAgICAgICAgICAgIGRlY2VwdGlvbiBhbGwgd2FzIGxvc3QuIFRoZSBibGFtZSBmb3IgYWxsIHRoZXNlIGNhbGFtaXRpZXMgaGFzIGJlZW4gYnJvdWdodCBob21lCiAgICAgICAgICAgICAgICAgICAgdG8geW91LiBXaHkgZG8geW91IHN0aWxsIHNwZWFrIHRoZSBwcmFpc2VzIG9mIHRoZSBtYW4gd2hvIGluZmxpY3RlZAogICAgICAgICAgICAgICAgICAgIHRoZW0/4oCdIEtlZXAgZ3VhcmQgb3ZlciBoaXMgdHJpY2tzIGluIHRoYXQgZmFzaGlvbiwgYW5kIGhlIHdpbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgdG8gc2F5LiBIZSB3aWxsIG9ubHkgYWdncmF2YXRlIHRoZSB0aHVuZGVycyBvZiBoaXMgdm9pY2UsIGFuZCBleGhhdXN0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3aXRoIGhpcyBvd24gdm9jaWZlcmF0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.337'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIHRoYXQgZmFtb3VzIHZvaWNlIG9mIGhpcywgaG93ZXZlciwgSSByZWFsbHkgbXVzdAogICAgICAgICAgICAgICAgICAgIG9mZmVyIHNvbWUgb2JzZXJ2YXRpb25zLiBGb3IgSSBhbSBpbmZvcm1lZCB0aGF0IGhlIHNldHMgZ3JlYXQgc3RvcmUgdGhlcmVieSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBob3BlcyB0byBvdmVyYXdlIHlvdSBieSBhbiBleGhpYml0aW9uIG9mIGhpc3RyaW9uaWMgdGFsZW50LiBXaGVuIGhlCiAgICAgICAgICAgICAgICAgICAgdHJpZWQgdG8gcmVwcmVzZW50IHRoZSB3b2VzIG9mIHRoZSBIb3VzZSBvZiBUaHllc3Rlcywgb3Igb2YgdGhlIG1lbiB3aG8gZm91Z2h0CiAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUcm95IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUcm95Ij5Ucm95PC9wbGFjZU5hbWU+LCB5b3UgZHJvdmUgaGltIGZyb20gdGhlIHN0YWdlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaXNzZXMgYW5kIGNhdC1jYWxscywgYW5kIGNhbWUgbmVhciB0byBwZWx0aW5nIGhpbSB3aXRoIHN0b25lcywgaW5zb211Y2gKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHRoZSBlbmQgaGUgZ2F2ZSB1cCBoaXMgcHJvZmVzc2lvbiBvZiBhY3RvciBvZiBzbWFsbCBwYXJ0czsgYW5kIEkgdGhpbmsKICAgICAgICAgICAgICAgICAgICB5b3Ugd291bGQgYmUgYmVoYXZpbmcgdmVyeSBzdHJhbmdlbHkgaWYgbm93LCB3aGVuIGhlIGhhcyB3cm91Z2h0IG1lYXN1cmFibGUKICAgICAgICAgICAgICAgICAgICBtaXNjaGllZiwgbm90IG9uIHRoZSBzdGFnZSwgYnV0IGluIGhpcyBkZWFsaW5ncyB3aXRoIHRoZSBtb3N0IG1vbWVudG91cyBhZmZhaXJzCiAgICAgICAgICAgICAgICAgICAgb2Ygc3RhdGUsIHlvdSBzaG91bGQgYmUgZmF2b3JhYmx5IGltcHJlc3NlZCBieSBoaXMgYmVhdXRpZnVsIHZvaWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.338'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzgiIHVuaXQ9InNlY3Rpb24iIC8+Tm8sIGdlbnRsZW1lbjsgeW91IG11c3Qgbm90IHlpZWxkIHRvIHVud29ydGh5CiAgICAgICAgICAgICAgICAgICAgZW1vdGlvbi4gSWYgeW91IGFyZSBob2xkaW5nIGFuIGV4YW1pbmF0aW9uIGZvciB0aGUgb2ZmaWNlIG9mIGhlcmFsZCwgeW91IGRvIHdlbGwKICAgICAgICAgICAgICAgICAgICB0byBsb29rIGZvciBhIG1hbiB3aXRoIGEgZmluZSBsb3VkIHZvaWNlOyBidXQgaWYgeW91IGFyZSBjaG9vc2luZyBhbiBhbWJhc3NhZG9yCiAgICAgICAgICAgICAgICAgICAgb3IgYSBjYW5kaWRhdGUgZm9yIHB1YmxpYyBvZmZpY2UsIHlvdSBzZWVrIGFuIGhvbmVzdCBtYW4sIGEgbWFuIHdobyBleGhpYml0cyBhCiAgICAgICAgICAgICAgICAgICAgcHJvdWQgc3Bpcml0IGFzIHlvdXIgcmVwcmVzZW50YXRpdmUsIGFuZCBhIHNwaXJpdCBvZiBlcXVhbGl0eSBhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW4uIEksIGZvciBleGFtcGxlLCBzaG93ZWQgbm8gcmVzcGVjdCBmb3IgUGhpbGlwOyBJIGtlcHQgbXkgcmVzcGVjdAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgY2FwdGl2ZXMsIEkgcmVzY3VlZCB0aGVtLCBJIHNwYXJlZCBubyBlZmZvcnQuIEFlc2NoaW5lcywgb24gdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgaGFuZCwgZ3JvdmVsbGVkIGF0IFBoaWxpcCdzIGZlZXQsIHNhbmcgaGlzIEh5bW4gb2YgVmljdG9yeSwgYW5kIGRpc3JlZ2FyZHMgeW91CiAgICAgICAgICAgICAgICAgICAgYWx0b2dldGhlci4gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.339'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMzkiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdoZW4geW91IG9ic2VydmUKICAgICAgICAgICAgICAgICAgICBlbG9xdWVuY2UsIG9yIHZvY2FsIHBvd2VyLCBvciBhbnkgc3VjaCBtZXJpdCwgaW4gYSByaWdodC1taW5kZWQgYW5kIHBhdHJpb3RpYwogICAgICAgICAgICAgICAgICAgIHNwZWFrZXIsIGJ5IGFsbCBtZWFucyBjb25ncmF0dWxhdGUgaGltIGFuZCBoZWxwIGhpbSB0byBleGVyY2lzZSBoaXMgZ2lmdCwgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91IGFsbCBzaGFyZSBpbiBpdHMgYWR2YW50YWdlcy4gQnV0IHdoZW4geW91IGZpbmQgc3VjaCBwb3dlcnMgaW4gdGhlIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiBhIGNvcnJ1cHQgYW5kIGV2aWwtbWluZGVkIG1hbiwgdGhlIHNsYXZlIG9mIGZpbHRoeSBsdWNyZSwgZGlzY291cmFnZSBoaW0sIGFuZAogICAgICAgICAgICAgICAgICAgIGxpc3RlbiB0byBoaW0gd2l0aCBhdmVyc2lvbiBhbmQgYW5pbW9zaXR5OyBmb3IgaWYga25hdmVyeSBlbmpveXMgaW4geW91ciBleWVzCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlcHV0YXRpb24gb2YgYWJpbGl0eSwgaXQgYmVjb21lcyBhIHBlcmlsIHRvIHRoZSBjb21tb253ZWFsdGguIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.340'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNDAiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGhhdmUgYmVmb3JlIHlvdXIgZXllcyB0aGUgZGFuZ2VycyB3aXRoIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgaXMgZW5jb21wYXNzZWQgYXMgdGhlIHJlc3VsdCBvZiB0aGUgcmVwdXRhdGlvbiBoZSBoYXMgYWNoaWV2ZWQuIE5vdyBvdGhlcgogICAgICAgICAgICAgICAgICAgIGZvcm1zIG9mIGFiaWxpdHkgYXJlIGFsbW9zdCB3aG9sbHkgaW5kZXBlbmRlbnQgb2YgY29uZGl0aW9uczsgYnV0IHRoZSBhYmlsaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNwZWFrZXIgaXMgcGFyYWx5emVkIGJ5IHRoZSByZWNhbGNpdHJhbmNlIG9mIGhpcyBhdWRpZW5jZS4gTGlzdGVuIHRvIGhpbSwKICAgICAgICAgICAgICAgICAgICB0aGVuLCBhcyB0byBhIGtuYXZlIGFuZCBhIGJyaWJlLXRha2VyLCB3aG8gd2lsbCBoYXZlIG5vIHRydXRoZnVsIHdvcmQgdG8gdXR0ZXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.Concl.341'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9ic2VydmUgaW4KICAgICAgICAgICAgICAgICAgICBjb25jbHVzaW9uIHRoYXQsIGFwYXJ0IGZyb20gYWxsIG90aGVyIHJlYXNvbnMsIHRoZSBjb252aWN0aW9uIG9mIHRoaXMgbWFuIGlzCiAgICAgICAgICAgICAgICAgICAgZW1pbmVudGx5IGRlc2lyYWJsZSBpbiB2aWV3IG9mIHlvdXIgZnV0dXJlIHJlbGF0aW9ucyB3aXRoIFBoaWxpcC4gRm9yIGlmIFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGV2ZXIgZmluZHMgaGltc2VsZiB1bmRlciB0aGUgbmVjZXNzaXR5IG9mIHRyZWF0aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3aXRoIGNvbW1vbiBqdXN0aWNlLCBoZSB3aWxsIGhhdmUgdG8KICAgICAgICAgICAgICAgICAgICByZW1vZGVsIGhpcyBtZXRob2RzLiBBdCBwcmVzZW50IGhpcyBjaG9zZW4gcG9saWN5IGlzIHRvIGNoZWF0IHRoZSBtYW55IGFuZCBjb3VydAogICAgICAgICAgICAgICAgICAgIHRoZSBmZXc7IGJ1dCwgd2hlbiBoZSBsZWFybnMgdGhhdCBoaXMgZmF2b3JpdGVzIGhhdmUgYmVlbiBicm91Z2h0IHRvIHJ1aW4sIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCB3aXNoIGZvciB0aGUgZnV0dXJlIHRvIGRlYWwgd2l0aCB0aGUgbWFueSwgd2hvIGFyZSB0aGUgcmVhbCBtYXN0ZXJzIG9mIG91cgogICAgICAgICAgICAgICAgICAgIHN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['19.Concl.342'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNDIiIHVuaXQ9InNlY3Rpb24iIC8+T3IgaWYgaGUgcGVyc2lzdHMgaW4gdGhlIGxhd2xlc3NuZXNzCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBpbnNvbGVuY2UgdGhhdCBoZSBkaXNwbGF5cyB0b2RheSwgeW91LCBieSBwdXR0aW5nIHRoZXNlIG1lbiBvdXQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2F5LCB3aWxsIGhhdmUgZGVsaXZlcmVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBmcm9tCiAgICAgICAgICAgICAgICAgICAgbWVuIHJlYWR5IHRvIGdvIHRvIGFsbCBsZW5ndGhzIGluIGhpcyBzZXJ2aWNlLiBGb3IgaWYgdGhlIGZlYXIgdGhhdCB0aGV5IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgY2FsbGVkIHRvIGFjY291bnQgZGlkIG5vdCBkZXRlciB0aGVtLCB3aGF0IGNvbmR1Y3QgY2FuIHlvdSBleHBlY3QgZnJvbSB0aGVtCiAgICAgICAgICAgICAgICAgICAgaWYgeW91IHNob3VsZCBnaXZlIHRoZW0gYSBsaWNlbmNlIHRvIGRvIHdoYXQgdGhleSBwbGVhc2U/IFdpbGwgdGhleSBub3Qgb3V0dmllCiAgICAgICAgICAgICAgICAgICAgRXV0aHljcmF0ZXMsIExhc3RoZW5lcywgYW5kIGFsbCB0aGUgdHJhaXRvcnMgb2YgaGlzdG9yeT8gPC90cmFuc2xhdGlvbj4="
translation['19.Concl.343'] = ""
