var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYmVpbmcgaGlzIGxpbmVhZ2UsIFZhbGVyaXVzLCBhcyB3ZSBhcmUgdG9sZCwgd2hpbGUgUm9tZSB3YXMgc3RpbGwgYSBraW5nZG9tLCB3YXMgY29uc3BpY3VvdXMgZm9yIGhpcyBlbG9xdWVuY2UgYW5kIHdlYWx0aCwgYWx3YXlzIGVtcGxveWluZyB0aGUgb25lIHdpdGggaW50ZWdyaXR5IGFuZCBib2xkbmVzcyBpbiB0aGUgc2VydmljZSBvZiBqdXN0aWNlLCB3aGlsZSB3aXRoIHRoZSBvdGhlciBoZSBnYXZlIGxpYmVyYWwgYW5kIGtpbmRseSBhaWQgdG8gdGhlIHBvb3IgYW5kIG5lZWR5LiBJdCB3YXMgdGhlcmVmb3JlIGNsZWFyIHRoYXQsIHNob3VsZCBSb21lIGJlY29tZSBhIGRlbW9jcmFjeSwgaGUgd291bGQgYXQgb25jZSBiZSBvbmUgb2YgaXRzIGZvcmVtb3N0IG1lbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFRhcnF1aW5pdXMgU3VwZXJidXMgaGFkIG5vdCBhY3F1aXJlZCBoaXMgcG93ZXIgaG9ub3VyYWJseSwgYnV0IGJ5IHRoZSB2aW9sYXRpb24gb2YgZGl2aW5lIGFuZCBodW1hbiBsYXdzOyBub3IgZGlkIGhlIGV4ZXJjaXNlIGl0IGluIGtpbmdseSBmYXNoaW9uLCBidXQgYWZ0ZXIgdGhlIG1hbm5lciBvZiBhbiBpbnNvbGVudCBhbmQgaGF1Z2h0eSB0eXJhbnQuIFRoZSBwZW9wbGUgdGhlcmVmb3JlIGhhdGVkIGhpbSwgcmVzZW50ZWQgaGlzIG9wcHJlc3Npb25zLCBhbmQgZm91bmQgb2NjYXNpb24gZm9yIHJldm9sdCBpbiB0aGUgZmF0ZSBvZiBMdWNyZXRpYSwgd2hvIG1hZGUgYXdheSB3aXRoIGhlcnNlbGYgYWZ0ZXIgdmlvbGVuY2UgaGFkIGJlZW4gZG9uZSB0byBoZXIuIEx1Y2l1cyBCcnV0dXMsIGVuZ2FnaW5nIGluIHRoZSByZXZvbHV0aW9uLCBjYW1lIHRvIFZhbGVyaXVzIGZpcnN0IG9mIGFsbCwgYW5kIHdpdGggaGlzIG1vc3QgemVhbG91cyBhc3Npc3RhbmNlIGRyb3ZlIG91dCB0aGUga2luZ3MuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDEuNTgiIHZhbGlkPSJ5ZXMiPkxpdnksIGkuIDU4IGYuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4yLjExIiB2YWxpZD0ieWVzIj5paS4gMiwgMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYXMgbG9uZyBhcyB0aGUgcGVvcGxlIHdhcyBsaWtlbHkgdG8gZWxlY3Qgb25lIG1hbiBhcyB0aGVpciBjb21tYW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGtpbmcsIFZhbGVyaXVzIGFjcXVpZXNjZWQsIHRoaW5raW5nIGl0IG1vcmUgZml0dGluZyB0aGF0IEJydXR1cyBzaG91bGQgaGF2ZSB0aGUgb2ZmaWNlLCBiZWNhdXNlIGhlIGhhZCBsZWQgdGhlIHdheSB0byBmcmVlZG9tLiBCdXQgdGhlIHZlcnkgbmFtZSBvZiBtb25hcmNoeSB3YXMgb2Rpb3VzIHRvIHRoZSBwZW9wbGUsIHdobyB0aG91Z2h0IHRoYXQgaXQgd291bGQgYmUgbGVzcyB2ZXhhdGlvdXMgdG8gc3VibWl0IHRvIGFuIGF1dGhvcml0eSB3aGljaCB3YXMgZGl2aWRlZCwgYW5kIHRoZXJlZm9yZSBwcm9wb3NlZCBhbmQgZGVtYW5kZWQgdGhhdCB0d28gbWVuIHNob3VsZCBiZSBlbGVjdGVkIHRvIHRoZSBoaWdoZXN0IG9mZmljZS4gVGhlbiBWYWxlcml1cywgd2hvIGhvcGVkIHRoYXQgaGUgd291bGQgYmUgY2hvc2VuIG5leHQgdG8gQnJ1dHVzLCBhbmQgd291bGQgYmUgY29uc3VsIHdpdGggaGltLCB3YXMgZGlzYXBwb2ludGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWdhaW5zdCB0aGUgd2lzaGVzIG9mIEJydXR1cywgVGFycXVpbml1cyBDb2xsYXRpbnVzLCB0aGUgaHVzYmFuZCBvZiBMdWNyZXRpYSwgd2FzIGVsZWN0ZWQgYXMgaGlzIGNvbGxlYWd1ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMS42MC40IiB2YWxpZD0ieWVzIj5MaXZ5LCBpLiA2MCwgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW5zdGVhZCBvZiBWYWxlcml1cy4gSGUgd2FzIGEgbWFuIG9mIG5vIGdyZWF0ZXIgZXhjZWxsZW5jZSB0aGFuIFZhbGVyaXVzLCBidXQgdGhlIGluZmx1ZW50aWFsIGNpdGl6ZW5zIHdlcmUgYWZyYWlkIG9mIHRoZSBraW5ncywgd2hvIHdlcmUgc3RpbGwgcHV0dGluZyBmb3J0aCBtYW55IGVmZm9ydHMgb3V0c2lkZSwgYW5kIHRyeWluZyB0byBhcHBlYXNlIHJlc2VudG1lbnQgaW5zaWRlIHRoZSBjaXR5LCBhbmQgdGhleSB0aGVyZWZvcmUgZGVzaXJlZCB0byBoYXZlIGFzIHRoZWlyIGNvbW1hbmRlciB0aGUgbW9zdCBwcm9ub3VuY2VkIGVuZW15IG9mIHRoZSByb3lhbCBmYW1pbHksIGJlbGlldmluZyB0aGF0IGhlIHdvdWxkIG1ha2Ugbm8gY29uY2Vzc2lvbnMgdG8gdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBUYXJxdWluaXVzIFN1cGVyYnVzIGhhZCBub3QgYWNxdWlyZWQgaGlzIHBvd2VyIGhvbm91cmFibHksIGJ1dCBieSB0aGUgdmlvbGF0aW9uIG9mIGRpdmluZSBhbmQgaHVtYW4gbGF3czsgbm9yIGRpZCBoZSBleGVyY2lzZSBpdCBpbiBraW5nbHkgZmFzaGlvbiwgYnV0IGFmdGVyIHRoZSBtYW5uZXIgb2YgYW4gaW5zb2xlbnQgYW5kIGhhdWdodHkgdHlyYW50LiBUaGUgcGVvcGxlIHRoZXJlZm9yZSBoYXRlZCBoaW0sIHJlc2VudGVkIGhpcyBvcHByZXNzaW9ucywgYW5kIGZvdW5kIG9jY2FzaW9uIGZvciByZXZvbHQgaW4gdGhlIGZhdGUgb2YgTHVjcmV0aWEsIHdobyBtYWRlIGF3YXkgd2l0aCBoZXJzZWxmIGFmdGVyIHZpb2xlbmNlIGhhZCBiZWVuIGRvbmUgdG8gaGVyLiBMdWNpdXMgQnJ1dHVzLCBlbmdhZ2luZyBpbiB0aGUgcmV2b2x1dGlvbiwgY2FtZSB0byBWYWxlcml1cyBmaXJzdCBvZiBhbGwsIGFuZCB3aXRoIGhpcyBtb3N0IHplYWxvdXMgYXNzaXN0YW5jZSBkcm92ZSBvdXQgdGhlIGtpbmdzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMS41OCIgdmFsaWQ9InllcyI+TGl2eSwgaS4gNTggZi48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMi4xMSIgdmFsaWQ9InllcyI+aWkuIDIsIDExLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAxLjU4IiB2YWxpZD0ieWVzIj5MaXZ5LCBpLiA1OCBmLjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4yLjExIiB2YWxpZD0ieWVzIj5paS4gMiwgMTEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIGxvbmcgYXMgdGhlIHBlb3BsZSB3YXMgbGlrZWx5IHRvIGVsZWN0IG9uZSBtYW4gYXMgdGhlaXIgY29tbWFuZGVyIGluIHBsYWNlIG9mIHRoZSBraW5nLCBWYWxlcml1cyBhY3F1aWVzY2VkLCB0aGlua2luZyBpdCBtb3JlIGZpdHRpbmcgdGhhdCBCcnV0dXMgc2hvdWxkIGhhdmUgdGhlIG9mZmljZSwgYmVjYXVzZSBoZSBoYWQgbGVkIHRoZSB3YXkgdG8gZnJlZWRvbS4gQnV0IHRoZSB2ZXJ5IG5hbWUgb2YgbW9uYXJjaHkgd2FzIG9kaW91cyB0byB0aGUgcGVvcGxlLCB3aG8gdGhvdWdodCB0aGF0IGl0IHdvdWxkIGJlIGxlc3MgdmV4YXRpb3VzIHRvIHN1Ym1pdCB0byBhbiBhdXRob3JpdHkgd2hpY2ggd2FzIGRpdmlkZWQsIGFuZCB0aGVyZWZvcmUgcHJvcG9zZWQgYW5kIGRlbWFuZGVkIHRoYXQgdHdvIG1lbiBzaG91bGQgYmUgZWxlY3RlZCB0byB0aGUgaGlnaGVzdCBvZmZpY2UuIFRoZW4gVmFsZXJpdXMsIHdobyBob3BlZCB0aGF0IGhlIHdvdWxkIGJlIGNob3NlbiBuZXh0IHRvIEJydXR1cywgYW5kIHdvdWxkIGJlIGNvbnN1bCB3aXRoIGhpbSwgd2FzIGRpc2FwcG9pbnRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgQnJ1dHVzLCBUYXJxdWluaXVzIENvbGxhdGludXMsIHRoZSBodXNiYW5kIG9mIEx1Y3JldGlhLCB3YXMgZWxlY3RlZCBhcyBoaXMgY29sbGVhZ3VlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMS42MC40IiB2YWxpZD0ieWVzIj5MaXZ5LCBpLiA2MCwgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW5zdGVhZCBvZiBWYWxlcml1cy4gSGUgd2FzIGEgbWFuIG9mIG5vIGdyZWF0ZXIgZXhjZWxsZW5jZSB0aGFuIFZhbGVyaXVzLCBidXQgdGhlIGluZmx1ZW50aWFsIGNpdGl6ZW5zIHdlcmUgYWZyYWlkIG9mIHRoZSBraW5ncywgd2hvIHdlcmUgc3RpbGwgcHV0dGluZyBmb3J0aCBtYW55IGVmZm9ydHMgb3V0c2lkZSwgYW5kIHRyeWluZyB0byBhcHBlYXNlIHJlc2VudG1lbnQgaW5zaWRlIHRoZSBjaXR5LCBhbmQgdGhleSB0aGVyZWZvcmUgZGVzaXJlZCB0byBoYXZlIGFzIHRoZWlyIGNvbW1hbmRlciB0aGUgbW9zdCBwcm9ub3VuY2VkIGVuZW15IG9mIHRoZSByb3lhbCBmYW1pbHksIGJlbGlldmluZyB0aGF0IGhlIHdvdWxkIG1ha2Ugbm8gY29uY2Vzc2lvbnMgdG8gdGhlbS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAxLjYwLjQiIHZhbGlkPSJ5ZXMiPkxpdnksIGkuIDYwLCA0LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5WYWxlcml1cywgYWNjb3JkaW5nbHksIHZleGVkIHRoYXQgaGlzIGRlc2lyZSB0byBkbyBoaXMgdXRtb3N0IGZvciBoaXMgY291bnRyeSBzaG91bGQgYmUgZG91YnRlZCwgbWVyZWx5IGJlY2F1c2UgaGUgaGFkIHJlY2VpdmVkIG5vIHByaXZhdGUgaW5qdXJ5IGF0IHRoZSBoYW5kcyBvZiB0aGUgdHlyYW50cywgd2l0aGRyZXcgZnJvbSB0aGUgc2VuYXRlLCBnYXZlIHVwIGhpcyBwcmFjdGljZSBhcyBhbiBhZHZvY2F0ZSwgYW5kIGFiYW5kb25lZCBlbnRpcmVseSBoaXMgcHVibGljIGFjdGl2aXRpZXMuIFRoaXMgY2F1c2VkIGFueGlvdXMgcmVtYXJrIGFtb25nIHRoZSBtdWx0aXR1ZGUuIFRoZXkgZmVhcmVkIGxlc3QsIGluIGhpcyB3cmF0aCwgaGUgc2hvdWxkIGF0dGFjaCBoaW1zZWxmIHRvIHRoZSByb3lhbCBleGlsZXMsIGFuZCBzdWJ2ZXJ0IHRoZSBlc3RhYmxpc2hlZCBvcmRlciBvZiB0aGUgY2l0eSwgd2hpY2ggd2FzIGluIGEgZGFuZ2Vyb3VzIHBhc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEJydXR1cywgd2hvIGhhZCBoaXMgc3VzcGljaW9ucyBvZiBjZXJ0YWluIG90aGVycyBhbHNvLCBkZXNpcmVkIHRoZSBzZW5hdG9ycyB0byB0YWtlIGEgc2FjcmlmaWNpYWwgb2F0aCwgYW5kIHNldCBhIGRheSBmb3IgdGhlIGNlcmVtb255LCBWYWxlcml1cyB3ZW50IGRvd24gd2l0aCBhIGdsYWQgY291bnRlbmFuY2UgaW50byB0aGUgZm9ydW0sIGFuZCB3YXMgdGhlIGZpcnN0IHRvIHRha2Ugb2F0aCB0aGF0IGhlIHdvdWxkIG1ha2Ugbm8gc3VibWlzc2lvbiBvciBjb25jZXNzaW9uIHRvIHRoZSBUYXJxdWlucywgYnV0IHdvdWxkIGZpZ2h0IHdpdGggYWxsIGhpcyBtaWdodCBpbiBkZWZlbmNlIG9mIGZyZWVkb20uIFRoaXMgcGxlYXNlZCB0aGUgc2VuYXRlIGFuZCBpbnNwaXJlZCB0aGUgY29uc3VscyB3aXRoIGNvdXJhZ2UuIEFuZCBoaXMgYWN0aW9ucyBzcGVlZGlseSBjb25maXJtZWQgaGlzIG9hdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBlbnZveXMgY2FtZSBmcm9tIFRhcnF1aW4gYnJpbmdpbmcgbGV0dGVycyBjYWxjdWxhdGVkIHRvIHNlZHVjZSB0aGUgcGVvcGxlLCBhbmQgc3BlY2lvdXMgd29yZHMgYnkgd2hpY2ggdGhleSB0aG91Z2h0IHRoZSBtdWx0aXR1ZGUgd2VyZSBtb3N0IGxpa2VseSB0byBiZSBjb3JydXB0ZWQsIGNvbWluZyBhcyB0aGV5IGRpZCBmcm9tIGEga2luZyB3aG8gc2VlbWVkIHRvIGhhdmUgaHVtYmxlZCBoaW1zZWxmLCBhbmQgdG8gYXNrIG9ubHkgbW9kZXJhdGUgdGVybXMuIFRoZXNlIGVudm95cyB0aGUgY29uc3VscyB0aG91Z2h0IHNob3VsZCBiZSBicm91Z2h0IGJlZm9yZSB0aGUgYXNzZW1ibGVkIHBlb3BsZSwgYnV0IFZhbGVyaXVzIHdvdWxkIG5vdCBzdWZmZXIgaXQuIEhlIHdhcyB1bmFsdGVyYWJseSBvcHBvc2VkIHRvIGdpdmluZyBwb29yIG1lbiwgd2hvIGNvbnNpZGVyZWQgd2FyIGEgZ3JlYXRlciBidXJkZW4gdGhhbiB0eXJhbm55LCBvY2Nhc2lvbnMgYW5kIGV4Y3VzZXMgZm9yIHJldm9sdXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5WYWxlcml1cywgYWNjb3JkaW5nbHksIHZleGVkIHRoYXQgaGlzIGRlc2lyZSB0byBkbyBoaXMgdXRtb3N0IGZvciBoaXMgY291bnRyeSBzaG91bGQgYmUgZG91YnRlZCwgbWVyZWx5IGJlY2F1c2UgaGUgaGFkIHJlY2VpdmVkIG5vIHByaXZhdGUgaW5qdXJ5IGF0IHRoZSBoYW5kcyBvZiB0aGUgdHlyYW50cywgd2l0aGRyZXcgZnJvbSB0aGUgc2VuYXRlLCBnYXZlIHVwIGhpcyBwcmFjdGljZSBhcyBhbiBhZHZvY2F0ZSwgYW5kIGFiYW5kb25lZCBlbnRpcmVseSBoaXMgcHVibGljIGFjdGl2aXRpZXMuIFRoaXMgY2F1c2VkIGFueGlvdXMgcmVtYXJrIGFtb25nIHRoZSBtdWx0aXR1ZGUuIFRoZXkgZmVhcmVkIGxlc3QsIGluIGhpcyB3cmF0aCwgaGUgc2hvdWxkIGF0dGFjaCBoaW1zZWxmIHRvIHRoZSByb3lhbCBleGlsZXMsIGFuZCBzdWJ2ZXJ0IHRoZSBlc3RhYmxpc2hlZCBvcmRlciBvZiB0aGUgY2l0eSwgd2hpY2ggd2FzIGluIGEgZGFuZ2Vyb3VzIHBhc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEJydXR1cywgd2hvIGhhZCBoaXMgc3VzcGljaW9ucyBvZiBjZXJ0YWluIG90aGVycyBhbHNvLCBkZXNpcmVkIHRoZSBzZW5hdG9ycyB0byB0YWtlIGEgc2FjcmlmaWNpYWwgb2F0aCwgYW5kIHNldCBhIGRheSBmb3IgdGhlIGNlcmVtb255LCBWYWxlcml1cyB3ZW50IGRvd24gd2l0aCBhIGdsYWQgY291bnRlbmFuY2UgaW50byB0aGUgZm9ydW0sIGFuZCB3YXMgdGhlIGZpcnN0IHRvIHRha2Ugb2F0aCB0aGF0IGhlIHdvdWxkIG1ha2Ugbm8gc3VibWlzc2lvbiBvciBjb25jZXNzaW9uIHRvIHRoZSBUYXJxdWlucywgYnV0IHdvdWxkIGZpZ2h0IHdpdGggYWxsIGhpcyBtaWdodCBpbiBkZWZlbmNlIG9mIGZyZWVkb20uIFRoaXMgcGxlYXNlZCB0aGUgc2VuYXRlIGFuZCBpbnNwaXJlZCB0aGUgY29uc3VscyB3aXRoIGNvdXJhZ2UuIEFuZCBoaXMgYWN0aW9ucyBzcGVlZGlseSBjb25maXJtZWQgaGlzIG9hdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBlbnZveXMgY2FtZSBmcm9tIFRhcnF1aW4gYnJpbmdpbmcgbGV0dGVycyBjYWxjdWxhdGVkIHRvIHNlZHVjZSB0aGUgcGVvcGxlLCBhbmQgc3BlY2lvdXMgd29yZHMgYnkgd2hpY2ggdGhleSB0aG91Z2h0IHRoZSBtdWx0aXR1ZGUgd2VyZSBtb3N0IGxpa2VseSB0byBiZSBjb3JydXB0ZWQsIGNvbWluZyBhcyB0aGV5IGRpZCBmcm9tIGEga2luZyB3aG8gc2VlbWVkIHRvIGhhdmUgaHVtYmxlZCBoaW1zZWxmLCBhbmQgdG8gYXNrIG9ubHkgbW9kZXJhdGUgdGVybXMuIFRoZXNlIGVudm95cyB0aGUgY29uc3VscyB0aG91Z2h0IHNob3VsZCBiZSBicm91Z2h0IGJlZm9yZSB0aGUgYXNzZW1ibGVkIHBlb3BsZSwgYnV0IFZhbGVyaXVzIHdvdWxkIG5vdCBzdWZmZXIgaXQuIEhlIHdhcyB1bmFsdGVyYWJseSBvcHBvc2VkIHRvIGdpdmluZyBwb29yIG1lbiwgd2hvIGNvbnNpZGVyZWQgd2FyIGEgZ3JlYXRlciBidXJkZW4gdGhhbiB0eXJhbm55LCBvY2Nhc2lvbnMgYW5kIGV4Y3VzZXMgZm9yIHJldm9sdXRpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgb3RoZXIgZW52b3lzIGNhbWUgYW5ub3VuY2luZyB0aGF0IFRhcnF1aW4gYWJkaWNhdGVkIGhpcyB0aHJvbmUgYW5kIGNlYXNlZCB0byB3YWdlIHdhciB1cG9uIHRoZSBjaXR5LCBidXQgZGVtYW5kZWQgZm9yIGhpbXNlbGYsIGhpcyBmcmllbmRzLCBhbmQgaGlzIGtpbnNtZW4sIHRoZWlyIG1vbmV5cyBhbmQgZWZmZWN0cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zLjUiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzLCA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGVyZXdpdGggdG8gbWFpbnRhaW4gdGhlbXNlbHZlcyBpbiBleGlsZS4gTWFueSB3ZXJlIGluY2xpbmVkIHRvIGdyYW50IHRoaXMgZmF2b3VyLCBhbmQgQ29sbGF0aW51cyBpbiBwYXJ0aWN1bGFyIGpvaW5lZCBpbiBhZHZvY2F0aW5nIGl0LCBidXQgQnJ1dHVzLCBhIG1hbiBvZiBoYXJzaCBhbmQgdW55aWVsZGluZyB0ZW1wZXIgcmFuIGZvcnRoIGludG8gdGhlIGZvcnVtIGFuZCBkZW5vdW5jZWQgaGlzIGNvbGxlYWd1ZSBhcyBhIHRyYWl0b3IsIGJlY2F1c2UgaGUgd291bGQgYmVzdG93IHRoZSBtZWFucyBmb3Igd2FnaW5nIHdhciBhbmQgbWFpbnRhaW5pbmcgdHlyYW5ueSBvbiBtZW4gdG8gd2hvbSBpdCB3ZXJlIGEgdGVycmlibGUgbWlzdGFrZSB0byB2b3RlIGV2ZW4gYSBiYXJlIHN1YnNpc3RlbmNlIGluIGV4aWxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBhbiBhc3NlbWJseSBvZiB0aGUgY2l0aXplbnMgd2FzIGhlbGQsIHRoZSBmaXJzdCB0byBzcGVhayBhbW9uZyB0aGVtIHdhcyBDYWl1cyBNaW51Y2l1cywgYSBwcml2YXRlIG1hbiwgd2hvIGV4aG9ydGVkIEJydXR1cyBhbmQgYWR2aXNlZCB0aGUgUm9tYW5zIHRvIHNlZSB0byBpdCB0aGF0IHRoZSB0cmVhc3VyZXMgZm91Z2h0IHdpdGggdGhlbSBhZ2FpbnN0IHRoZSB0eXJhbnRzLCByYXRoZXIgdGhhbiB3aXRoIHRoZSB0eXJhbnRzIGFnYWluc3QgdGhlbS4gSG93ZXZlciwgdGhlIFJvbWFucyBkZWNpZGVkIHRoYXQsIHNpbmNlIHRoZXkgaGFkIHRoZSBsaWJlcnR5IGZvciB3aGljaCB0aGV5IHdlcmUgYXQgd2FyLCB0aGV5IHdvdWxkIG5vdCBzYWNyaWZpY2UgcGVhY2UgZm9yIHRoZSBzYWtlIG9mIHdlYWx0aCwgYnV0IGNhc3QgdGhpcyBhbHNvIG91dCBhbG9uZyB3aXRoIHRoZSB0eXJhbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQuMyIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBvdGhlciBlbnZveXMgY2FtZSBhbm5vdW5jaW5nIHRoYXQgVGFycXVpbiBhYmRpY2F0ZWQgaGlzIHRocm9uZSBhbmQgY2Vhc2VkIHRvIHdhZ2Ugd2FyIHVwb24gdGhlIGNpdHksIGJ1dCBkZW1hbmRlZCBmb3IgaGltc2VsZiwgaGlzIGZyaWVuZHMsIGFuZCBoaXMga2luc21lbiwgdGhlaXIgbW9uZXlzIGFuZCBlZmZlY3RzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zLjUiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzLCA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGVyZXdpdGggdG8gbWFpbnRhaW4gdGhlbXNlbHZlcyBpbiBleGlsZS4gTWFueSB3ZXJlIGluY2xpbmVkIHRvIGdyYW50IHRoaXMgZmF2b3VyLCBhbmQgQ29sbGF0aW51cyBpbiBwYXJ0aWN1bGFyIGpvaW5lZCBpbiBhZHZvY2F0aW5nIGl0LCBidXQgQnJ1dHVzLCBhIG1hbiBvZiBoYXJzaCBhbmQgdW55aWVsZGluZyB0ZW1wZXIgcmFuIGZvcnRoIGludG8gdGhlIGZvcnVtIGFuZCBkZW5vdW5jZWQgaGlzIGNvbGxlYWd1ZSBhcyBhIHRyYWl0b3IsIGJlY2F1c2UgaGUgd291bGQgYmVzdG93IHRoZSBtZWFucyBmb3Igd2FnaW5nIHdhciBhbmQgbWFpbnRhaW5pbmcgdHlyYW5ueSBvbiBtZW4gdG8gd2hvbSBpdCB3ZXJlIGEgdGVycmlibGUgbWlzdGFrZSB0byB2b3RlIGV2ZW4gYSBiYXJlIHN1YnNpc3RlbmNlIGluIGV4aWxlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4zLjUiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAzLCA1LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGFuIGFzc2VtYmx5IG9mIHRoZSBjaXRpemVucyB3YXMgaGVsZCwgdGhlIGZpcnN0IHRvIHNwZWFrIGFtb25nIHRoZW0gd2FzIENhaXVzIE1pbnVjaXVzLCBhIHByaXZhdGUgbWFuLCB3aG8gZXhob3J0ZWQgQnJ1dHVzIGFuZCBhZHZpc2VkIHRoZSBSb21hbnMgdG8gc2VlIHRvIGl0IHRoYXQgdGhlIHRyZWFzdXJlcyBmb3VnaHQgd2l0aCB0aGVtIGFnYWluc3QgdGhlIHR5cmFudHMsIHJhdGhlciB0aGFuIHdpdGggdGhlIHR5cmFudHMgYWdhaW5zdCB0aGVtLiBIb3dldmVyLCB0aGUgUm9tYW5zIGRlY2lkZWQgdGhhdCwgc2luY2UgdGhleSBoYWQgdGhlIGxpYmVydHkgZm9yIHdoaWNoIHRoZXkgd2VyZSBhdCB3YXIsIHRoZXkgd291bGQgbm90IHNhY3JpZmljZSBwZWFjZSBmb3IgdGhlIHNha2Ugb2Ygd2VhbHRoLCBidXQgY2FzdCB0aGlzIGFsc28gb3V0IGFsb25nIHdpdGggdGhlIHR5cmFudHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQuMyIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40LjMiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0LCAzLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3cgdGhlIHdlYWx0aCwgb2YgY291cnNlLCB3YXMgb2YgdmVyeSBzbGlnaHQgY29uc2VxdWVuY2UgdG8gVGFycXVpbiwgYnV0IHRoZSBkZW1hbmQgZm9yIGl0IHdhcyBhdCBvbmNlIGEgdGVzdCBvZiB0aGUgcGVvcGxlJ3MgZGlzcG9zaXRpb24gYW5kIGEgbWVhbnMgb2YgaW5zdGlnYXRpbmcgdHJlYWNoZXJ5IGFtb25nIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IHdhcyB3aXRoIHRoaXMgdGhhdCB0aGUgZW52b3lzIGJ1c2llZCB0aGVtc2VsdmVzLCBtYWtpbmcgdGhlIHByb3BlcnR5IG1lcmVseSBhIHByZXRleHQgZm9yIHJlbWFpbmluZyBpbiB0aGUgY2l0eSwgYW5kIHNheWluZyB0aGF0IHRoZXkgd2VyZSBzZWxsaW5nIHBhcnQgb2YgaXQsIGFuZCByZXNlcnZpbmcgcGFydCwgYW5kIHNlbmRpbmcgcGFydCBvZiBpdCBhd2F5LiBBdCBsYXN0IHRoZXkgc3VjY2VlZGVkIGluIGNvcnJ1cHRpbmcgdHdvIG9mIHRoZSBub2JsZSBmYW1pbGllcyBvZiBSb21lLCB0aGF0IG9mIHRoZSBBcXVpbGxpaSwgd2hpY2ggaGFkIHRocmVlIHNlbmF0b3JzLCBhbmQgdGhhdCBvZiB0aGUgVml0ZWxsaWksIHdoaWNoIGhhZCB0d28uIEFsbCB0aGVzZSwgYnkgdGhlIG1vdGhlcidzIHNpZGUsIHdlcmUgbmVwaGV3cyBvZiBDb2xsYXRpbnVzIHRoZSBjb25zdWwsIGFuZCBiZXNpZGVzLCB0aGUgVml0ZWxsaWkgd2VyZSByZWxhdGVkIGluIGFub3RoZXIgbWFubmVyIHRvIEJydXR1cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEJydXR1cyBoYWQgbWFycmllZCBhIHNpc3RlciBvZiB0aGVpcnMsIGFuZCBzaGUgaGFkIGJvcm5lIGhpbSBzZXZlcmFsIHNvbnMuIFR3byBvZiB0aGVzZSwgd2hvIGhhZCBjb21lIHRvIG1hbmhvb2QsIGFuZCB3ZXJlIHRoZWlyIG5lYXIga2luZHJlZCBhbmQgY2xvc2UgY29tcGFuaW9ucywgdGhlIFZpdGVsbGlpIHdvbiBvdmVyIGFuZCBwZXJzdWFkZWQgdG8gam9pbiB0aGUgcGxvdCBmb3IgYmV0cmF5aW5nIHRoZSBjaXR5LCB0byBhbGx5IHRoZW1zZWx2ZXMgd2l0aCB0aGUgZ3JlYXQgZmFtaWx5IGFuZCB0aGUgcm95YWwgZXhwZWN0YXRpb25zIG9mIHRoZSBUYXJxdWlucywgYW5kIHJpZCB0aGVtc2VsdmVzIG9mIHRoZSBzdHVwaWRpdHkgYW5kIGNydWVsdHkgb2YgdGhlaXIgZmF0aGVyLiBGb3IgdGhleSBnYXZlIHRoZSBuYW1lIG9mIGNydWVsdHkgdG8gdGhhdCBmYXRoZXIncyBpbmV4b3JhYmxlIHRyZWF0bWVudCBvZiBjcmltaW5hbHMsIGFuZCBhcyBmb3IgaGlzIHN0dXBpZGl0eSwgaGUgaGFkIGZvciBhIGxvbmcgdGltZSwgYXMgaXQgYXBwZWFycywgZmVpZ25lZCBhbmQgYXNzdW1lZCB0aGlzLCB0byBpbnN1cmUgaGlzIHNhZmV0eSBmcm9tIHRoZSBjcnVlbCBkZXNpZ25zIG9mIHRoZSB0eXJhbnRzLCBhbmQgYWZ0ZXJ3YXJkcyB0aGUgc3VybmFtZSBvZiBCcnV0dXMsIHdoaWNoIGhhZCBiZWVuIGdpdmVuIGhpbSBmb3IgaXQsIGNsdW5nIHRvIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgd2l0aCB0aGlzIHRoYXQgdGhlIGVudm95cyBidXNpZWQgdGhlbXNlbHZlcywgbWFraW5nIHRoZSBwcm9wZXJ0eSBtZXJlbHkgYSBwcmV0ZXh0IGZvciByZW1haW5pbmcgaW4gdGhlIGNpdHksIGFuZCBzYXlpbmcgdGhhdCB0aGV5IHdlcmUgc2VsbGluZyBwYXJ0IG9mIGl0LCBhbmQgcmVzZXJ2aW5nIHBhcnQsIGFuZCBzZW5kaW5nIHBhcnQgb2YgaXQgYXdheS4gQXQgbGFzdCB0aGV5IHN1Y2NlZWRlZCBpbiBjb3JydXB0aW5nIHR3byBvZiB0aGUgbm9ibGUgZmFtaWxpZXMgb2YgUm9tZSwgdGhhdCBvZiB0aGUgQXF1aWxsaWksIHdoaWNoIGhhZCB0aHJlZSBzZW5hdG9ycywgYW5kIHRoYXQgb2YgdGhlIFZpdGVsbGlpLCB3aGljaCBoYWQgdHdvLiBBbGwgdGhlc2UsIGJ5IHRoZSBtb3RoZXIncyBzaWRlLCB3ZXJlIG5lcGhld3Mgb2YgQ29sbGF0aW51cyB0aGUgY29uc3VsLCBhbmQgYmVzaWRlcywgdGhlIFZpdGVsbGlpIHdlcmUgcmVsYXRlZCBpbiBhbm90aGVyIG1hbm5lciB0byBCcnV0dXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBCcnV0dXMgaGFkIG1hcnJpZWQgYSBzaXN0ZXIgb2YgdGhlaXJzLCBhbmQgc2hlIGhhZCBib3JuZSBoaW0gc2V2ZXJhbCBzb25zLiBUd28gb2YgdGhlc2UsIHdobyBoYWQgY29tZSB0byBtYW5ob29kLCBhbmQgd2VyZSB0aGVpciBuZWFyIGtpbmRyZWQgYW5kIGNsb3NlIGNvbXBhbmlvbnMsIHRoZSBWaXRlbGxpaSB3b24gb3ZlciBhbmQgcGVyc3VhZGVkIHRvIGpvaW4gdGhlIHBsb3QgZm9yIGJldHJheWluZyB0aGUgY2l0eSwgdG8gYWxseSB0aGVtc2VsdmVzIHdpdGggdGhlIGdyZWF0IGZhbWlseSBhbmQgdGhlIHJveWFsIGV4cGVjdGF0aW9ucyBvZiB0aGUgVGFycXVpbnMsIGFuZCByaWQgdGhlbXNlbHZlcyBvZiB0aGUgc3R1cGlkaXR5IGFuZCBjcnVlbHR5IG9mIHRoZWlyIGZhdGhlci4gRm9yIHRoZXkgZ2F2ZSB0aGUgbmFtZSBvZiBjcnVlbHR5IHRvIHRoYXQgZmF0aGVyJ3MgaW5leG9yYWJsZSB0cmVhdG1lbnQgb2YgY3JpbWluYWxzLCBhbmQgYXMgZm9yIGhpcyBzdHVwaWRpdHksIGhlIGhhZCBmb3IgYSBsb25nIHRpbWUsIGFzIGl0IGFwcGVhcnMsIGZlaWduZWQgYW5kIGFzc3VtZWQgdGhpcywgdG8gaW5zdXJlIGhpcyBzYWZldHkgZnJvbSB0aGUgY3J1ZWwgZGVzaWducyBvZiB0aGUgdHlyYW50cywgYW5kIGFmdGVyd2FyZHMgdGhlIHN1cm5hbWUgb2YgQnJ1dHVzLCB3aGljaCBoYWQgYmVlbiBnaXZlbiBoaW0gZm9yIGl0LCBjbHVuZyB0byBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgYWNjb3JkaW5nbHksIHRoZSB5b3V0aHMgaGFkIGJlZW4gcGVyc3VhZGVkIGFuZCBoZWxkIGNvbmZlcmVuY2Ugd2l0aCB0aGUgQXF1aWxsaWksIGl0IHdhcyBkZWNpZGVkIHRoYXQgYWxsIHRoZSBjb25zcGlyYXRvcnMgc2hvdWxkIHN3ZWFyIGEgZ3JlYXQgYW5kIGRyZWFkZnVsIG9hdGgsIHBvdXJpbmcgaW4gbGliYXRpb24gdGhlIGJsb29kIG9mIGEgc2xhaW4gbWFuLCBhbmQgdG91Y2hpbmcgaGlzIGVudHJhaWxzLiBGb3IgdGhpcyBwdXJwb3NlIHRoZXkgbWV0IGF0IHRoZSBob3VzZSBvZiB0aGUgQXF1aWxsaWkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgdGhlIGhvdXNlIG9mIHRoZSBWaXRlbGxpaSwgYWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNC41IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNCwgNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTm93IHRoZSByb29tIGluIHdoaWNoIHRoZSBjZXJlbW9ueSB3YXMgdG8gYmUgaGVsZCB3YXMsIGFzIHdhcyBuYXR1cmFsLCBkYXJrIGFuZCBzb21ld2hhdCBkZXNvbGF0ZS4gV2l0aG91dCB0aGVpciBrbm93aW5nIGl0LCB0aGVyZWZvcmUsIGEgc2xhdmUgbmFtZWQgVmluZGljaXVzIGhhZCBjb25jZWFsZWQgaGltc2VsZiB0aGVyZWluLCBub3Qgd2l0aCBkZXNpZ24sIG9yIHdpdGggYW55IGlua2xpbmcgb2Ygd2hhdCB3YXMgdG8gaGFwcGVuIHRoZXJlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSBtZXJlbHkgY2hhbmNlZCB0byBiZSB0aGVyZSwgYW5kIHdoZW4gdGhleSBjYW1lIGluIHdpdGggYW54aW91cyBoYXN0ZSwgaGUgd2FzIGFmcmFpZCB0byBiZSBzZWVuIGJ5IHRoZW0sIGFuZCBoaWQgaGltc2VsZiBiZWhpbmQgYSBjaGVzdCB0aGF0IGxheSB0aGVyZSwgc28gdGhhdCBoZSBzYXcgd2hhdCB0aGV5IGRpZCwgYW5kIGhlYXJkIHdoYXQgdGhleSByZXNvbHZlZCB1cG9uLiBUaGVpciBkZWNpc2lvbiB3YXMgdG8ga2lsbCB0aGUgY29uc3VscywgYW5kIHdoZW4gdGhleSBoYWQgd3JpdHRlbiBsZXR0ZXJzIHRvIFRhcnF1aW4gdG8gdGhpcyBlZmZlY3QsIHRoZXkgZ2F2ZSB0aGVtIHRvIGhpcyBlbnZveXMsIHdobyB3ZXJlIGxpdmluZyB0aGVyZSBhcyBndWVzdHMgb2YgdGhlIEFxdWlsbGlpLCBhbmQgd2VyZSB0aGVuIHByZXNlbnQgYXQgdGhlIGNvbnNwaXJhY3kuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBhY2NvcmRpbmdseSwgdGhlIHlvdXRocyBoYWQgYmVlbiBwZXJzdWFkZWQgYW5kIGhlbGQgY29uZmVyZW5jZSB3aXRoIHRoZSBBcXVpbGxpaSwgaXQgd2FzIGRlY2lkZWQgdGhhdCBhbGwgdGhlIGNvbnNwaXJhdG9ycyBzaG91bGQgc3dlYXIgYSBncmVhdCBhbmQgZHJlYWRmdWwgb2F0aCwgcG91cmluZyBpbiBsaWJhdGlvbiB0aGUgYmxvb2Qgb2YgYSBzbGFpbiBtYW4sIGFuZCB0b3VjaGluZyBoaXMgZW50cmFpbHMuIEZvciB0aGlzIHB1cnBvc2UgdGhleSBtZXQgYXQgdGhlIGhvdXNlIG9mIHRoZSBBcXVpbGxpaS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSBob3VzZSBvZiB0aGUgVml0ZWxsaWksIGFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNC41IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNCwgNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTm93IHRoZSByb29tIGluIHdoaWNoIHRoZSBjZXJlbW9ueSB3YXMgdG8gYmUgaGVsZCB3YXMsIGFzIHdhcyBuYXR1cmFsLCBkYXJrIGFuZCBzb21ld2hhdCBkZXNvbGF0ZS4gV2l0aG91dCB0aGVpciBrbm93aW5nIGl0LCB0aGVyZWZvcmUsIGEgc2xhdmUgbmFtZWQgVmluZGljaXVzIGhhZCBjb25jZWFsZWQgaGltc2VsZiB0aGVyZWluLCBub3Qgd2l0aCBkZXNpZ24sIG9yIHdpdGggYW55IGlua2xpbmcgb2Ygd2hhdCB3YXMgdG8gaGFwcGVuIHRoZXJlOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40LjUiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0LCA1LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIG1lcmVseSBjaGFuY2VkIHRvIGJlIHRoZXJlLCBhbmQgd2hlbiB0aGV5IGNhbWUgaW4gd2l0aCBhbnhpb3VzIGhhc3RlLCBoZSB3YXMgYWZyYWlkIHRvIGJlIHNlZW4gYnkgdGhlbSwgYW5kIGhpZCBoaW1zZWxmIGJlaGluZCBhIGNoZXN0IHRoYXQgbGF5IHRoZXJlLCBzbyB0aGF0IGhlIHNhdyB3aGF0IHRoZXkgZGlkLCBhbmQgaGVhcmQgd2hhdCB0aGV5IHJlc29sdmVkIHVwb24uIFRoZWlyIGRlY2lzaW9uIHdhcyB0byBraWxsIHRoZSBjb25zdWxzLCBhbmQgd2hlbiB0aGV5IGhhZCB3cml0dGVuIGxldHRlcnMgdG8gVGFycXVpbiB0byB0aGlzIGVmZmVjdCwgdGhleSBnYXZlIHRoZW0gdG8gaGlzIGVudm95cywgd2hvIHdlcmUgbGl2aW5nIHRoZXJlIGFzIGd1ZXN0cyBvZiB0aGUgQXF1aWxsaWksIGFuZCB3ZXJlIHRoZW4gcHJlc2VudCBhdCB0aGUgY29uc3BpcmFjeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlaXIgYnVzaW5lc3MgdHJhbnNhY3RlZCwgdGhlIGNvbnNwaXJhdG9ycyBkZXBhcnRlZCwgYW5kIHRoZW4gVmluZGljaXVzIHN0b2xlIHNlY3JldGx5IGF3YXkgZnJvbSB0aGUgaG91c2UuIEhlIGtuZXcgbm90IHdoYXQgdXNlIHRvIG1ha2Ugb2Ygd2hhdCBoYWQgYmVmYWxsZW4gaGltLCBidXQgd2FzIGF0IGEgbG9zcywgY29uc2lkZXJpbmcgaXQgYSBkcmVhZGZ1bCB0aGluZywgYXMgaXQgcmVhbGx5IHdhcywgdG8gYXJyYWlnbiB0aGUgc29ucyBvZiBCcnV0dXMgYmVmb3JlIHRoZWlyIGZhdGhlciwgb3IgdGhlIG5lcGhld3Mgb2YgQ29sbGF0aW51cyBiZWZvcmUgdGhlaXIgdW5jbGUsIG9uIHRoZSBtb3N0IGFib21pbmFibGUgY2hhcmdlcywgYW5kIHlldCBiZWxpZXZpbmcgdGhhdCBubyBSb21hbiBpbiBhIHByaXZhdGUgc3RhdGlvbiBjb3VsZCBiZSBlbnRydXN0ZWQgd2l0aCBzdWNoIGltcG9ydGFudCBzZWNyZXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGFzdCB0aGluZyB0aGF0IGhlIGNvdWxkIGRvLCBob3dldmVyLCB3YXMgdG8gaG9sZCBoaXMgcGVhY2UsIGFuZCBkcml2ZW4gb24gYnkgaGlzIGtub3dsZWRnZSBvZiB0aGUgYWZmYWlyLCBoZSBtYWRlIGhpcyB3YXkgc29tZWhvdyB0byBWYWxlcml1cywgYXR0cmFjdGVkIGVzcGVjaWFsbHkgYnkgdGhlIGFmZmFibGUgYW5kIGtpbmRseSB3YXlzIG9mIHRoZSBtYW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VmluZGljaXVzIGxhaWQgdGhlIG1hdHRlciBiZWZvcmUgdGhlIGNvbnN1bHMsIGFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQuNiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQsIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciBoZSB3YXMgZWFzaWx5IGFjY2Vzc2libGUgdG8gYWxsIHRoZSBuZWVkeSwgYWx3YXlzIGtlcHQgb3BlbiBob3VzZSwgYW5kIG5ldmVyIHJlZnVzZWQgdG8gaGVhciBvciBoZWxwIG9uZSBvZiB0aGUgbG93bHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGJ1c2luZXNzIHRyYW5zYWN0ZWQsIHRoZSBjb25zcGlyYXRvcnMgZGVwYXJ0ZWQsIGFuZCB0aGVuIFZpbmRpY2l1cyBzdG9sZSBzZWNyZXRseSBhd2F5IGZyb20gdGhlIGhvdXNlLiBIZSBrbmV3IG5vdCB3aGF0IHVzZSB0byBtYWtlIG9mIHdoYXQgaGFkIGJlZmFsbGVuIGhpbSwgYnV0IHdhcyBhdCBhIGxvc3MsIGNvbnNpZGVyaW5nIGl0IGEgZHJlYWRmdWwgdGhpbmcsIGFzIGl0IHJlYWxseSB3YXMsIHRvIGFycmFpZ24gdGhlIHNvbnMgb2YgQnJ1dHVzIGJlZm9yZSB0aGVpciBmYXRoZXIsIG9yIHRoZSBuZXBoZXdzIG9mIENvbGxhdGludXMgYmVmb3JlIHRoZWlyIHVuY2xlLCBvbiB0aGUgbW9zdCBhYm9taW5hYmxlIGNoYXJnZXMsIGFuZCB5ZXQgYmVsaWV2aW5nIHRoYXQgbm8gUm9tYW4gaW4gYSBwcml2YXRlIHN0YXRpb24gY291bGQgYmUgZW50cnVzdGVkIHdpdGggc3VjaCBpbXBvcnRhbnQgc2VjcmV0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXN0IHRoaW5nIHRoYXQgaGUgY291bGQgZG8sIGhvd2V2ZXIsIHdhcyB0byBob2xkIGhpcyBwZWFjZSwgYW5kIGRyaXZlbiBvbiBieSBoaXMga25vd2xlZGdlIG9mIHRoZSBhZmZhaXIsIGhlIG1hZGUgaGlzIHdheSBzb21laG93IHRvIFZhbGVyaXVzLCBhdHRyYWN0ZWQgZXNwZWNpYWxseSBieSB0aGUgYWZmYWJsZSBhbmQga2luZGx5IHdheXMgb2YgdGhlIG1hbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlZpbmRpY2l1cyBsYWlkIHRoZSBtYXR0ZXIgYmVmb3JlIHRoZSBjb25zdWxzLCBhY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjQuNiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDQsIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciBoZSB3YXMgZWFzaWx5IGFjY2Vzc2libGUgdG8gYWxsIHRoZSBuZWVkeSwgYWx3YXlzIGtlcHQgb3BlbiBob3VzZSwgYW5kIG5ldmVyIHJlZnVzZWQgdG8gaGVhciBvciBoZWxwIG9uZSBvZiB0aGUgbG93bHkuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi40LjYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA0LCA2LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiBWaW5kaWNpdXMgY2FtZSB0byBoaW0gYW5kIHRvbGQgaGltIHRoZSB3aG9sZSBzdG9yeSwgaW4gdGhlIHByZXNlbmNlIG9mIGhpcyBicm90aGVyIE1hcmN1cyBvbmx5LCBhbmQgb2YgaGlzIHdpZmUsIFZhbGVyaXVzIHdhcyBzdHJ1Y2sgd2l0aCBjb25zdGVybmF0aW9uIGFuZCBmZWFyLCBhbmQgd291bGQgbm90IG5vdyBsZXQgdGhlIG1hbiBnbywgYnV0IHNodXQgaGltIHVwIGluIGEgcm9vbSBhbmQgc2V0IGhpcyBvd24gd2lmZSB0byBndWFyZCB0aGUgZG9vci4gVGhlbiBoZSBvcmRlcmVkIGhpcyBicm90aGVyIHRvIHN1cnJvdW5kIHRoZSByb3lhbCByZXNpZGVuY2UsIHNlaXplIHRoZSBsZXR0ZXJzLCBpZiBwb3NzaWJsZSwgYW5kIHRha2UgdGhlIHNlcnZhbnRzIGludG8gY3VzdG9keS4gSGUgaGltc2VsZiwgd2l0aCB0aGUgbnVtZXJvdXMgY2xpZW50cyBhbmQgZnJpZW5kcyB3aG8gd2VyZSBhbHdheXMgYWJvdXQgaGltLCBhbmQgd2l0aCBhIGxhcmdlIGNvbXBhbnkgb2YgcmV0YWluZXJzLCB3ZW50IHRvIHRoZSBob3VzZSBvZiB0aGUgQXF1aWxsaWksIHdobyB3ZXJlIG5vdCBhdCBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHRvIHRoZSBzdXJwcmlzZSBvZiBldmVyeWJvZHksIGhlIGZvcmNlZCB0aGUgZG9vciwgYW5kIGNhbWUgdXBvbiB0aGUgbGV0dGVycyBseWluZyBpbiB0aGUgcXVhcnRlcnMgd2hlcmUgdGhlIGVudm95cyB3ZXJlIGxvZGdpbmcuIE1lYW50aW1lIHRoZSBBcXVpbGxpaSBjYW1lIHVwIGluIGhvdCBoYXN0ZSwgam9pbmVkIGJhdHRsZSBhdCB0aGUgZG9vciwgYW5kIHNvdWdodCB0byB0YWtlIGF3YXkgdGltZSBsZXR0ZXJzLiBCdXQgVmFsZXJpdXMgYW5kIGhpcyBwYXJ0eSByZXNpc3RlZCB0aGUgYXR0YWNrLCB0aHJldyB0aGVpciB0b2dhcyBhYm91dCB0aGVpciBvcHBvbmVudHMnIG5lY2tzLCBhbmQgYWZ0ZXIgbXVjaCBzdHJ1Z2dsaW5nIG9uIGJvdGggc2lkZXMsIGF0IGxhc3Qgc3VjY2VlZGVkIGluIHB1c2hpbmcgdGhlbSB0aHJvdWdoIHRoZSBzdHJlZXRzIGludG8gdGhlIGZvcnVtLiBUaGUgc2FtZSBzdWNjZXNzIHdhcyBoYWQgYXQgdGltZSByb3lhbCByZXNpZGVuY2UsIHdoZXJlIE1hcmN1cyBsYWlkIGhhbmRzIG9uIG90aGVyIGxldHRlcnMgd2hpY2ggd2VyZSB0byBiZSBjb252ZXllZCBhd2F5IGluIHRoZSBiYWdnYWdlLCBzZWl6ZWQgYXMgbWFueSBvZiB0aGUga2luZydzIHBlb3BsZSBhcyBoZSBjb3VsZCwgYW5kIGhhbGVkIHRoZW0gdG8gdGhlIGZvcnVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiBWaW5kaWNpdXMgY2FtZSB0byBoaW0gYW5kIHRvbGQgaGltIHRoZSB3aG9sZSBzdG9yeSwgaW4gdGhlIHByZXNlbmNlIG9mIGhpcyBicm90aGVyIE1hcmN1cyBvbmx5LCBhbmQgb2YgaGlzIHdpZmUsIFZhbGVyaXVzIHdhcyBzdHJ1Y2sgd2l0aCBjb25zdGVybmF0aW9uIGFuZCBmZWFyLCBhbmQgd291bGQgbm90IG5vdyBsZXQgdGhlIG1hbiBnbywgYnV0IHNodXQgaGltIHVwIGluIGEgcm9vbSBhbmQgc2V0IGhpcyBvd24gd2lmZSB0byBndWFyZCB0aGUgZG9vci4gVGhlbiBoZSBvcmRlcmVkIGhpcyBicm90aGVyIHRvIHN1cnJvdW5kIHRoZSByb3lhbCByZXNpZGVuY2UsIHNlaXplIHRoZSBsZXR0ZXJzLCBpZiBwb3NzaWJsZSwgYW5kIHRha2UgdGhlIHNlcnZhbnRzIGludG8gY3VzdG9keS4gSGUgaGltc2VsZiwgd2l0aCB0aGUgbnVtZXJvdXMgY2xpZW50cyBhbmQgZnJpZW5kcyB3aG8gd2VyZSBhbHdheXMgYWJvdXQgaGltLCBhbmQgd2l0aCBhIGxhcmdlIGNvbXBhbnkgb2YgcmV0YWluZXJzLCB3ZW50IHRvIHRoZSBob3VzZSBvZiB0aGUgQXF1aWxsaWksIHdobyB3ZXJlIG5vdCBhdCBob21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgdG8gdGhlIHN1cnByaXNlIG9mIGV2ZXJ5Ym9keSwgaGUgZm9yY2VkIHRoZSBkb29yLCBhbmQgY2FtZSB1cG9uIHRoZSBsZXR0ZXJzIGx5aW5nIGluIHRoZSBxdWFydGVycyB3aGVyZSB0aGUgZW52b3lzIHdlcmUgbG9kZ2luZy4gTWVhbnRpbWUgdGhlIEFxdWlsbGlpIGNhbWUgdXAgaW4gaG90IGhhc3RlLCBqb2luZWQgYmF0dGxlIGF0IHRoZSBkb29yLCBhbmQgc291Z2h0IHRvIHRha2UgYXdheSB0aW1lIGxldHRlcnMuIEJ1dCBWYWxlcml1cyBhbmQgaGlzIHBhcnR5IHJlc2lzdGVkIHRoZSBhdHRhY2ssIHRocmV3IHRoZWlyIHRvZ2FzIGFib3V0IHRoZWlyIG9wcG9uZW50cycgbmVja3MsIGFuZCBhZnRlciBtdWNoIHN0cnVnZ2xpbmcgb24gYm90aCBzaWRlcywgYXQgbGFzdCBzdWNjZWVkZWQgaW4gcHVzaGluZyB0aGVtIHRocm91Z2ggdGhlIHN0cmVldHMgaW50byB0aGUgZm9ydW0uIFRoZSBzYW1lIHN1Y2Nlc3Mgd2FzIGhhZCBhdCB0aW1lIHJveWFsIHJlc2lkZW5jZSwgd2hlcmUgTWFyY3VzIGxhaWQgaGFuZHMgb24gb3RoZXIgbGV0dGVycyB3aGljaCB3ZXJlIHRvIGJlIGNvbnZleWVkIGF3YXkgaW4gdGhlIGJhZ2dhZ2UsIHNlaXplZCBhcyBtYW55IG9mIHRoZSBraW5nJ3MgcGVvcGxlIGFzIGhlIGNvdWxkLCBhbmQgaGFsZWQgdGhlbSB0byB0aGUgZm9ydW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgY29uc3VscyBoYWQgcXVpZXRlZCB0aGUgdHVtdWx0LCBWYWxlcml1cyBvcmRlcmVkIFZpbmRpY2l1cyB0byBiZSBicm91Z2h0IGZyb20gaGlzIGhvdXNlLCB0aGUgZGVudW5jaWF0aW9uIHdhcyBtYWRlLCB0aGUgbGV0dGVycyB3ZXJlIHJlYWQgYWxvdWQsIGFuZCB0aGUgYWNjdXNlZCBoYWQgbm8gY291cmFnZSB0byByZXBseS4gTW9zdCBvZiB0aGUgcGVvcGxlIGhlbGQgdGhlaXIgcGVhY2UgZm9yIHZlcnkgc29ycm93LCBidXQgYSBmZXcgc3Bva2Ugb2YgZXhpbGUgYXMgYSBwZW5hbHR5LCB3aXNoaW5nIHRvIGRvIEJydXR1cyBhIGtpbmRuZXNzLiBUaGV5IHdlcmUgYWxzbyBzb21ld2hhdCBlbmNvdXJhZ2VkIHRvIGhvcGUgYnkgdGhlIHRlYXJzIG9mIENvbGxhdGludXMgYW5kIHRoZSBzaWxlbmNlIG9mIFZhbGVyaXVzLiBCdXQgQnJ1dHVzLCBjYWxsaW5nIGVhY2ggb2YgaGlzIHNvbnMgYnkgbmFtZSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lLCBUaXR1cywgY29tZSBUaWJlcml1cywgd2h5IGRvIHllIG5vdCBkZWZlbmQgeW91cnNlbHZlcyBhZ2FpbnN0IHRoaXMgZGVudW5jaWF0aW9uPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGV5IG1hZGUgbm8gYW5zd2VyLCB0aG91Z2ggaGUgcHV0IGhpcyBxdWVzdGlvbiB0byB0aGVtIHRocmljZSwgaGUgdHVybmVkIHRvIHRoZSBsaWN0b3JzIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHlvdXJzIG5vdyB0byBkbyB0aGUgcmVzdC48L3E+IFRoZXNlIHN0cmFpZ2h0d2F5IHNlaXplZCB0aGUgeW91bmcgbWVuLCB0b3JlIG9mZiB0aGVpciB0b2dhcywgYm91bmQgdGhlaXIgaGFuZHMgYmVoaW5kIHRoZWlyIGJhY2tzLCBhbmQgc2NvdXJnZWQgdGhlaXIgYm9kaWVzIHdpdGggdGhlaXIgcm9kcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlc3QgY291bGQgbm90IGVuZHVyZSB0byBsb29rIHVwb24gdGhlIHNpZ2h0LCBidXQgaXQgaXMgc2FpZCB0aGF0IHRoZSBmYXRoZXIgbmVpdGhlciB0dXJuZWQgaGlzIGdhemUgYXdheSwgbm9yIGFsbG93ZWQgYW55IHBpdHkgdG8gc29mdGVuIHRoZSBzdGVybiB3cmF0aCB0aGF0IHNhdCB1cG9uIGhpcyBjb3VudGVuYW5jZSwgYnV0IHdhdGNoZWQgdGhlIGRyZWFkZnVsIHB1bmlzaG1lbnQgb2YgaGlzIHNvbnMgdW50aWwgdGhlIGxpY3RvcnMgdGhyZXcgdGhlbSBvbiB0aGUgZ3JvdW5kIGFuZCBjdXQgb2ZmIHRoZWlyIGhlYWRzIHdpdGggdGhlIGF4ZS4gVGhlbiBoZSByb3NlIGFuZCB3ZW50IGF3YXksIGFmdGVyIGNvbW1pdHRpbmcgdGhlIG90aGVyIGN1bHByaXRzIHRvIHRoZSBqdWRnZW1lbnQgb2YgaGlzIGNvbGxlYWd1ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaXRoIHRoaXMgYWNjb3VudCwgY29tcGFyZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjUuNSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDUsIDUtOS48L2JpYmw+IEJydXR1cyBsb29rZWQgb24gCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5lbWluZW50ZSBhbmltbyBwYXRyaW8gaW50ZXIgcHVibGljYWUgcG9lbmFlIG1pbmlzdGVyaXVtPC9xPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gSGUgaGFkIGRvbmUgYSBkZWVkIHdoaWNoIGl0IGlzIGRpZmZpY3VsdCBmb3Igb25lIGVpdGhlciB0byBwcmFpc2Ugb3IgYmxhbWUgc3VmZmljaWVudGx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZWl0aGVyIHRoZSBsb2Z0aW5lc3Mgb2YgaGlzIHZpcnR1ZSBtYWRlIGhpcyBzcGlyaXQgaW5jYXBhYmxlIG9mIHN1ZmZlcmluZywgb3IgZWxzZSB0aGUgbWFnbml0dWRlIG9mIGhpcyBzdWZmZXJpbmcgbWFkZSBpdCBpbnNlbnNpYmxlIHRvIHBhaW4uIEluIG5laXRoZXIgY2FzZSB3YXMgaGlzIGFjdCBhIHRyaXZpYWwgb25lLCBvciBuYXR1cmFsIHRvIGEgbWFuLCBidXQgZWl0aGVyIGdvZC1saWtlIG9yIGJydXRpc2guIEhvd2V2ZXIsIGl0IGlzIHJpZ2h0IHRoYXQgb3VyIHZlcmRpY3Qgc2hvdWxkIGFjY29yZCB3aXRoIHRoZSByZXB1dGF0aW9uIG9mIHRoZSBtYW4sIHJhdGhlciB0aGFuIHRoYXQgaGlzIHZpcnR1ZSBzaG91bGQgYmUgZGlzY3JlZGl0ZWQgdGhyb3VnaCB3ZWFrbmVzcyBpbiB0aGUganVkZ2UuIEZvciB0aGUgUm9tYW5zIHRoaW5rIHRoYXQgdGhlIHdvcmsgb2YgUm9tdWx1cyBpbiBidWlsZGluZyB0aGUgY2l0eSB3YXMgbm90IHNvIGdyZWF0IGFzIHRoYXQgb2YgQnJ1dHVzIGluIGZvdW5kaW5nIGFuZCBlc3RhYmxpc2hpbmcgaXRzIGZvcm0gb2YgZ292ZXJubWVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBjb25zdWxzIGhhZCBxdWlldGVkIHRoZSB0dW11bHQsIFZhbGVyaXVzIG9yZGVyZWQgVmluZGljaXVzIHRvIGJlIGJyb3VnaHQgZnJvbSBoaXMgaG91c2UsIHRoZSBkZW51bmNpYXRpb24gd2FzIG1hZGUsIHRoZSBsZXR0ZXJzIHdlcmUgcmVhZCBhbG91ZCwgYW5kIHRoZSBhY2N1c2VkIGhhZCBubyBjb3VyYWdlIHRvIHJlcGx5LiBNb3N0IG9mIHRoZSBwZW9wbGUgaGVsZCB0aGVpciBwZWFjZSBmb3IgdmVyeSBzb3Jyb3csIGJ1dCBhIGZldyBzcG9rZSBvZiBleGlsZSBhcyBhIHBlbmFsdHksIHdpc2hpbmcgdG8gZG8gQnJ1dHVzIGEga2luZG5lc3MuIFRoZXkgd2VyZSBhbHNvIHNvbWV3aGF0IGVuY291cmFnZWQgdG8gaG9wZSBieSB0aGUgdGVhcnMgb2YgQ29sbGF0aW51cyBhbmQgdGhlIHNpbGVuY2Ugb2YgVmFsZXJpdXMuIEJ1dCBCcnV0dXMsIGNhbGxpbmcgZWFjaCBvZiBoaXMgc29ucyBieSBuYW1lLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q29tZSwgVGl0dXMsIGNvbWUgVGliZXJpdXMsIHdoeSBkbyB5ZSBub3QgZGVmZW5kIHlvdXJzZWx2ZXMgYWdhaW5zdCB0aGlzIGRlbnVuY2lhdGlvbj88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgbWFkZSBubyBhbnN3ZXIsIHRob3VnaCBoZSBwdXQgaGlzIHF1ZXN0aW9uIHRvIHRoZW0gdGhyaWNlLCBoZSB0dXJuZWQgdG8gdGhlIGxpY3RvcnMgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyB5b3VycyBub3cgdG8gZG8gdGhlIHJlc3QuPC9xPiBUaGVzZSBzdHJhaWdodHdheSBzZWl6ZWQgdGhlIHlvdW5nIG1lbiwgdG9yZSBvZmYgdGhlaXIgdG9nYXMsIGJvdW5kIHRoZWlyIGhhbmRzIGJlaGluZCB0aGVpciBiYWNrcywgYW5kIHNjb3VyZ2VkIHRoZWlyIGJvZGllcyB3aXRoIHRoZWlyIHJvZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IGNvdWxkIG5vdCBlbmR1cmUgdG8gbG9vayB1cG9uIHRoZSBzaWdodCwgYnV0IGl0IGlzIHNhaWQgdGhhdCB0aGUgZmF0aGVyIG5laXRoZXIgdHVybmVkIGhpcyBnYXplIGF3YXksIG5vciBhbGxvd2VkIGFueSBwaXR5IHRvIHNvZnRlbiB0aGUgc3Rlcm4gd3JhdGggdGhhdCBzYXQgdXBvbiBoaXMgY291bnRlbmFuY2UsIGJ1dCB3YXRjaGVkIHRoZSBkcmVhZGZ1bCBwdW5pc2htZW50IG9mIGhpcyBzb25zIHVudGlsIHRoZSBsaWN0b3JzIHRocmV3IHRoZW0gb24gdGhlIGdyb3VuZCBhbmQgY3V0IG9mZiB0aGVpciBoZWFkcyB3aXRoIHRoZSBheGUuIFRoZW4gaGUgcm9zZSBhbmQgd2VudCBhd2F5LCBhZnRlciBjb21taXR0aW5nIHRoZSBvdGhlciBjdWxwcml0cyB0byB0aGUganVkZ2VtZW50IG9mIGhpcyBjb2xsZWFndWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaXRoIHRoaXMgYWNjb3VudCwgY29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNS41IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNSwgNS05LjwvYmlibD4gQnJ1dHVzIGxvb2tlZCBvbiAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5lbWluZW50ZSBhbmltbyBwYXRyaW8gaW50ZXIgcHVibGljYWUgcG9lbmFlIG1pbmlzdGVyaXVtPC9xPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gSGUgaGFkIGRvbmUgYSBkZWVkIHdoaWNoIGl0IGlzIGRpZmZpY3VsdCBmb3Igb25lIGVpdGhlciB0byBwcmFpc2Ugb3IgYmxhbWUgc3VmZmljaWVudGx5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi41LjUiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA1LCA1LTkuPC9iaWJsPiBCcnV0dXMgbG9va2VkIG9uIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCIgbGFuZz0ibGEiPmVtaW5lbnRlIGFuaW1vIHBhdHJpbyBpbnRlciBwdWJsaWNhZSBwb2VuYWUgbWluaXN0ZXJpdW08L3E+LjwvcT4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+ZW1pbmVudGUgYW5pbW8gcGF0cmlvIGludGVyIHB1YmxpY2FlIHBvZW5hZSBtaW5pc3Rlcml1bTwvcT4uPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBlaXRoZXIgdGhlIGxvZnRpbmVzcyBvZiBoaXMgdmlydHVlIG1hZGUgaGlzIHNwaXJpdCBpbmNhcGFibGUgb2Ygc3VmZmVyaW5nLCBvciBlbHNlIHRoZSBtYWduaXR1ZGUgb2YgaGlzIHN1ZmZlcmluZyBtYWRlIGl0IGluc2Vuc2libGUgdG8gcGFpbi4gSW4gbmVpdGhlciBjYXNlIHdhcyBoaXMgYWN0IGEgdHJpdmlhbCBvbmUsIG9yIG5hdHVyYWwgdG8gYSBtYW4sIGJ1dCBlaXRoZXIgZ29kLWxpa2Ugb3IgYnJ1dGlzaC4gSG93ZXZlciwgaXQgaXMgcmlnaHQgdGhhdCBvdXIgdmVyZGljdCBzaG91bGQgYWNjb3JkIHdpdGggdGhlIHJlcHV0YXRpb24gb2YgdGhlIG1hbiwgcmF0aGVyIHRoYW4gdGhhdCBoaXMgdmlydHVlIHNob3VsZCBiZSBkaXNjcmVkaXRlZCB0aHJvdWdoIHdlYWtuZXNzIGluIHRoZSBqdWRnZS4gRm9yIHRoZSBSb21hbnMgdGhpbmsgdGhhdCB0aGUgd29yayBvZiBSb211bHVzIGluIGJ1aWxkaW5nIHRoZSBjaXR5IHdhcyBub3Qgc28gZ3JlYXQgYXMgdGhhdCBvZiBCcnV0dXMgaW4gZm91bmRpbmcgYW5kIGVzdGFibGlzaGluZyBpdHMgZm9ybSBvZiBnb3Zlcm5tZW50LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIEJydXR1cyBoYWQgbGVmdCB0aGUgZm9ydW0gYXQgdGhpcyB0aW1lLCBmb3IgYSBsb25nIHdoaWxlIGNvbnN0ZXJuYXRpb24sIGhvcnJvciwgYW5kIHNpbGVuY2UgcHJldmFpbGVkIGFtb25nIGFsbCB3aG8gcmVtYWluZWQsIGFzIHRoZXkgdGhvdWdodCBvZiB3aGF0IGhhZCBiZWVuIGRvbmUuIEJ1dCBzb29uIHRoZSB3ZWFrbmVzcyBhbmQgaGVzaXRhdGlvbiBvZiBDb2xsYXRpbnVzIGdhdmUgdGhlIEFxdWlsbGlpIGZyZXNoIGNvdXJhZ2U7IHRoZXkgZGVtYW5kZWQgdGltZSBpbiB3aGljaCB0byBtYWtlIHRoZWlyIGRlZmVuY2UsIGFuZCB0aGUgc3VycmVuZGVyIG9mIFZpbmRpY2l1cyB0byB0aGVtLCBzaW5jZSBoZSB3YXMgdGhlaXIgc2xhdmUsIGFuZCBvdWdodCBub3QgdG8gYmUgaW4gdGhlIGhhbmRzIG9mIHRoZWlyIGFjY3VzZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Db2xsYXRpbnVzIHdhcyB3aWxsaW5nIHRvIGdyYW50IHRoaXMgcmVxdWVzdCwgYW5kIHdhcyBhYm91dCB0byBkaXNzb2x2ZSB0aGUgYXNzZW1ibHkgd2l0aCB0aGlzIHVuZGVyc3RhbmRpbmc7IGJ1dCBWYWxlcml1cyB3YXMgbmVpdGhlciBhYmxlIHRvIHN1cnJlbmRlciB0aGUgc2xhdmUsIHdobyBoYWQgbWluZ2xlZCB3aXRoIHRoZSB0aHJvbmcgYWJvdXQgaGltLCBub3Igd291bGQgaGUgc3VmZmVyIHRoZSBwZW9wbGUgdG8gcmVsZWFzZSB0aGUgdHJhaXRvcnMgYW5kIHdpdGhkcmF3LiBTbyBhdCBsYXN0IGhlIHNlaXplZCB0aGUgcGVyc29ucyBvZiB0aGUgQXF1aWxsaWkgYW5kIHN1bW1vbmVkIEJydXR1cyB0byB0aGUgc2NlbmUsIGNyeWluZyBhbG91ZCB0aGF0IENvbGxhdGludXMgd2FzIGFjdGluZyBzaGFtZWZ1bGx5IGluIGxheWluZyB1cG9uIGhpcyBjb2xsZWFndWUgdGhlIG5lY2Vzc2l0eSBvZiBraWxsaW5nIGhpcyBvd24gc29ucywgYW5kIHRoZW4gdGhpbmtpbmcgaXQgbmVjZXNzYXJ5IGZvciBoaW1zZWxmIHRvIGJlc3RvdyB1cG9uIHRoZWlyIHdpdmVzIHRoZSBsaXZlcyBvZiBoaXMgY291bnRyeSdzIGJldHJheWVycyBhbmQgZm9lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbnN1bCB3YXMgaW5kaWduYW50IGF0IHRoaXMsIGFuZCBvcmRlcmVkIHRoYXQgVmluZGljaXVzIHNob3VsZCBiZSB0YWtlbiBhd2F5LCB3aGVyZXVwb24gdGhlIGxpY3RvcnMgcHVzaGVkIHRoZWlyIHdheSB0aHJvdWdoIHRoZSBjcm93ZCwgc2VpemVkIHRoZSBtYW4sIGFuZCBiZWF0IHRob3NlIHdobyB0cmllZCB0byByZXNjdWUgaGltLiBUaGVuIFZhbGVyaXVzIGFuZCBoaXMgZnJpZW5kcyBzdG9vZCBmb3J0aCBpbiB0aGUgbWFuJ3MgZGVmZW5jZSwgd2hpbGUgdGhlIHBlb3BsZSBzaG91dGVkIGZvciBCcnV0dXMgdG8gY29tZS4gSGUgdHVybmVkIGJhY2ssIHRoZXJlZm9yZSwgYW5kIGNhbWUsIGFuZCB3aGVuIHNpbGVuY2UgaGFkIGJlZW4gbWFkZSBmb3IgaGltLCBzYWlkIHRoYXQgZm9yIGhpcyBzb25zLCBoZSBoaW1zZWxmIHN1ZmZpY2VkIGFzIGp1ZGdlLCBidXQgaGUgd291bGQgbGVhdmUgdGltZSBmYXRlIG9mIHRoZSBvdGhlciB0cmFpdG9ycyB0byB0aGUgdm90ZXMgb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBmcmVlLCBhbmQgYW55IG9uZSB3aG8gd2lzaGVkIG1pZ2h0IHNwZWFrIGFuZCB0cnkgdG8gcGVyc3VhZGUgdGhlIHBlb3BsZS4gSG93ZXZlciwgYnkgdGhpcyB0aW1lIHRoZXJlIHdhcyBubyBuZWVkIG9mIG9yYXRvcnksIGJ1dCBhIHZvdGUgd2FzIHRha2VuIHdoaWNoIHVuYW5pbW91c2x5IGNvbmRlbW5lZCB0aGUgbWVuLCBhbmQgdGhleSB3ZXJlIGJlaGVhZGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBCcnV0dXMgaGFkIGxlZnQgdGhlIGZvcnVtIGF0IHRoaXMgdGltZSwgZm9yIGEgbG9uZyB3aGlsZSBjb25zdGVybmF0aW9uLCBob3Jyb3IsIGFuZCBzaWxlbmNlIHByZXZhaWxlZCBhbW9uZyBhbGwgd2hvIHJlbWFpbmVkLCBhcyB0aGV5IHRob3VnaHQgb2Ygd2hhdCBoYWQgYmVlbiBkb25lLiBCdXQgc29vbiB0aGUgd2Vha25lc3MgYW5kIGhlc2l0YXRpb24gb2YgQ29sbGF0aW51cyBnYXZlIHRoZSBBcXVpbGxpaSBmcmVzaCBjb3VyYWdlOyB0aGV5IGRlbWFuZGVkIHRpbWUgaW4gd2hpY2ggdG8gbWFrZSB0aGVpciBkZWZlbmNlLCBhbmQgdGhlIHN1cnJlbmRlciBvZiBWaW5kaWNpdXMgdG8gdGhlbSwgc2luY2UgaGUgd2FzIHRoZWlyIHNsYXZlLCBhbmQgb3VnaHQgbm90IHRvIGJlIGluIHRoZSBoYW5kcyBvZiB0aGVpciBhY2N1c2Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbGxhdGludXMgd2FzIHdpbGxpbmcgdG8gZ3JhbnQgdGhpcyByZXF1ZXN0LCBhbmQgd2FzIGFib3V0IHRvIGRpc3NvbHZlIHRoZSBhc3NlbWJseSB3aXRoIHRoaXMgdW5kZXJzdGFuZGluZzsgYnV0IFZhbGVyaXVzIHdhcyBuZWl0aGVyIGFibGUgdG8gc3VycmVuZGVyIHRoZSBzbGF2ZSwgd2hvIGhhZCBtaW5nbGVkIHdpdGggdGhlIHRocm9uZyBhYm91dCBoaW0sIG5vciB3b3VsZCBoZSBzdWZmZXIgdGhlIHBlb3BsZSB0byByZWxlYXNlIHRoZSB0cmFpdG9ycyBhbmQgd2l0aGRyYXcuIFNvIGF0IGxhc3QgaGUgc2VpemVkIHRoZSBwZXJzb25zIG9mIHRoZSBBcXVpbGxpaSBhbmQgc3VtbW9uZWQgQnJ1dHVzIHRvIHRoZSBzY2VuZSwgY3J5aW5nIGFsb3VkIHRoYXQgQ29sbGF0aW51cyB3YXMgYWN0aW5nIHNoYW1lZnVsbHkgaW4gbGF5aW5nIHVwb24gaGlzIGNvbGxlYWd1ZSB0aGUgbmVjZXNzaXR5IG9mIGtpbGxpbmcgaGlzIG93biBzb25zLCBhbmQgdGhlbiB0aGlua2luZyBpdCBuZWNlc3NhcnkgZm9yIGhpbXNlbGYgdG8gYmVzdG93IHVwb24gdGhlaXIgd2l2ZXMgdGhlIGxpdmVzIG9mIGhpcyBjb3VudHJ5J3MgYmV0cmF5ZXJzIGFuZCBmb2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zdWwgd2FzIGluZGlnbmFudCBhdCB0aGlzLCBhbmQgb3JkZXJlZCB0aGF0IFZpbmRpY2l1cyBzaG91bGQgYmUgdGFrZW4gYXdheSwgd2hlcmV1cG9uIHRoZSBsaWN0b3JzIHB1c2hlZCB0aGVpciB3YXkgdGhyb3VnaCB0aGUgY3Jvd2QsIHNlaXplZCB0aGUgbWFuLCBhbmQgYmVhdCB0aG9zZSB3aG8gdHJpZWQgdG8gcmVzY3VlIGhpbS4gVGhlbiBWYWxlcml1cyBhbmQgaGlzIGZyaWVuZHMgc3Rvb2QgZm9ydGggaW4gdGhlIG1hbidzIGRlZmVuY2UsIHdoaWxlIHRoZSBwZW9wbGUgc2hvdXRlZCBmb3IgQnJ1dHVzIHRvIGNvbWUuIEhlIHR1cm5lZCBiYWNrLCB0aGVyZWZvcmUsIGFuZCBjYW1lLCBhbmQgd2hlbiBzaWxlbmNlIGhhZCBiZWVuIG1hZGUgZm9yIGhpbSwgc2FpZCB0aGF0IGZvciBoaXMgc29ucywgaGUgaGltc2VsZiBzdWZmaWNlZCBhcyBqdWRnZSwgYnV0IGhlIHdvdWxkIGxlYXZlIHRpbWUgZmF0ZSBvZiB0aGUgb3RoZXIgdHJhaXRvcnMgdG8gdGhlIHZvdGVzIG9mIHRoZSBjaXRpemVucywgd2hvIHdlcmUgZnJlZSwgYW5kIGFueSBvbmUgd2hvIHdpc2hlZCBtaWdodCBzcGVhayBhbmQgdHJ5IHRvIHBlcnN1YWRlIHRoZSBwZW9wbGUuIEhvd2V2ZXIsIGJ5IHRoaXMgdGltZSB0aGVyZSB3YXMgbm8gbmVlZCBvZiBvcmF0b3J5LCBidXQgYSB2b3RlIHdhcyB0YWtlbiB3aGljaCB1bmFuaW1vdXNseSBjb25kZW1uZWQgdGhlIG1lbiwgYW5kIHRoZXkgd2VyZSBiZWhlYWRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q29sbGF0aW51cywgYXMgaXQgd291bGQgc2VlbSwgd2FzIGFscmVhZHkgdW5kZXIgc29tZSBzdXNwaWNpb24gb24gYWNjb3VudCBvZiBoaXMgcmVsYXRpb25zaGlwIHRvIHRoZSByb3lhbCBmYW1pbHksIGFuZCB0aGUgc2Vjb25kIG9mIGhpcyBuYW1lcyBhbHNvIHdhcyBoYXRlZnVsIHRvIHRpbWUgcGVvcGxlLCB3aG8gbG9hdGhlZCB0aGUgc291bmQgb2YgVGFycXVpbi4gQnV0IGFmdGVyIHRoZXNlIHJlY2VudCBldmVudHMsIGhlIHNhdyB0aGF0IGhlIHdhcyBhbHRvZ2V0aGVyIG9ibm94aW91cywgYW5kIHRoZXJlZm9yZSByZXNpZ25lZCBoaXMgb2ZmaWNlIGFuZCB3aXRoZHJldyBzZWNyZXRseSBmcm9tIHRoZSBjaXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjIuMyIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDIsIDMtMTAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEEgbmV3IGVsZWN0aW9uIHdhcyBjb25zZXF1ZW50bHkgaGVsZCwgYW5kIFZhbGVyaXVzIHdhcyB0cml1bXBoYW50bHkgZGVjbGFyZWQgY29uc3VsLCB0aHVzIHJlY2VpdmluZyBhIHdvcnRoeSByZXdhcmQgZm9yIGhpcyB6ZWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHJld2FyZCBoZSB0aG91Z2h0IHRoYXQgVmluZGljaXVzIG91Z2h0IHRvIHNoYXJlLCBhbmQgdGhlcmVmb3JlIGhhZCBhIGRlY3JlZSBwYXNzZWQgd2hpY2ggbWFkZSBoaW0sIGZpcnN0IG9mIGFsbCBmcmVlZG1lbiwgYSBjaXRpemVuIG9mIFJvbWUsIGFuZCBlbnRpdGxlZCBoaW0gdG8gdm90ZSB3aXRoIGFueSBjdXJpYSBpbiB3aGljaCBoZSBjaG9zZSB0byBiZSBlbnJvbGxlZC4gT3RoZXIgZnJlZWRtZW4gcmVjZWl2ZWQgdGhlIHJpZ2h0IG9mIHN1ZmZyYWdlIGluIG11Y2ggbGF0ZXIgdGltZXMgZnJvbSBBcHBpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXBwaXVzIENsYXVkaXVzIENhZWN1cywgY2Vuc29yIGluIDMxMiBCLkMuPC9ub3RlPiB3aG8gdGh1cyBjb3VydGVkIHBvcHVsYXJpdHkuIEFuZCBmcm9tIHRoaXMgVmluZGljaXVzLCBhcyB0aGV5IHNheSwgYSBwZXJmZWN0IG1hbnVtaXNzaW9uIGlzIHRvIHRoaXMgZGF5IGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+dmluZGljdGE8L2ZvcmVpZ24+LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNS4xMCIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDUsMTAuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbGxhdGludXMsIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyBhbHJlYWR5IHVuZGVyIHNvbWUgc3VzcGljaW9uIG9uIGFjY291bnQgb2YgaGlzIHJlbGF0aW9uc2hpcCB0byB0aGUgcm95YWwgZmFtaWx5LCBhbmQgdGhlIHNlY29uZCBvZiBoaXMgbmFtZXMgYWxzbyB3YXMgaGF0ZWZ1bCB0byB0aW1lIHBlb3BsZSwgd2hvIGxvYXRoZWQgdGhlIHNvdW5kIG9mIFRhcnF1aW4uIEJ1dCBhZnRlciB0aGVzZSByZWNlbnQgZXZlbnRzLCBoZSBzYXcgdGhhdCBoZSB3YXMgYWx0b2dldGhlciBvYm5veGlvdXMsIGFuZCB0aGVyZWZvcmUgcmVzaWduZWQgaGlzIG9mZmljZSBhbmQgd2l0aGRyZXcgc2VjcmV0bHkgZnJvbSB0aGUgY2l0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMi4zIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMiwgMy0xMC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQSBuZXcgZWxlY3Rpb24gd2FzIGNvbnNlcXVlbnRseSBoZWxkLCBhbmQgVmFsZXJpdXMgd2FzIHRyaXVtcGhhbnRseSBkZWNsYXJlZCBjb25zdWwsIHRodXMgcmVjZWl2aW5nIGEgd29ydGh5IHJld2FyZCBmb3IgaGlzIHplYWwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjIuMyIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDIsIDMtMTAuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgcmV3YXJkIGhlIHRob3VnaHQgdGhhdCBWaW5kaWNpdXMgb3VnaHQgdG8gc2hhcmUsIGFuZCB0aGVyZWZvcmUgaGFkIGEgZGVjcmVlIHBhc3NlZCB3aGljaCBtYWRlIGhpbSwgZmlyc3Qgb2YgYWxsIGZyZWVkbWVuLCBhIGNpdGl6ZW4gb2YgUm9tZSwgYW5kIGVudGl0bGVkIGhpbSB0byB2b3RlIHdpdGggYW55IGN1cmlhIGluIHdoaWNoIGhlIGNob3NlIHRvIGJlIGVucm9sbGVkLiBPdGhlciBmcmVlZG1lbiByZWNlaXZlZCB0aGUgcmlnaHQgb2Ygc3VmZnJhZ2UgaW4gbXVjaCBsYXRlciB0aW1lcyBmcm9tIEFwcGl1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFwcGl1cyBDbGF1ZGl1cyBDYWVjdXMsIGNlbnNvciBpbiAzMTIgQi5DLjwvbm90ZT4gd2hvIHRodXMgY291cnRlZCBwb3B1bGFyaXR5LiBBbmQgZnJvbSB0aGlzIFZpbmRpY2l1cywgYXMgdGhleSBzYXksIGEgcGVyZmVjdCBtYW51bWlzc2lvbiBpcyB0byB0aGlzIGRheSBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52aW5kaWN0YTwvZm9yZWlnbj4uPC9xPgogICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52aW5kaWN0YTwvZm9yZWlnbj4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjUuMTAiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA1LDEwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNS4xMCIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDUsMTAuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZSBwcm9wZXJ0eSBvZiB0aGUgcm95YWwgZmFtaWx5IHdhcyBnaXZlbiB0byB0aGUgUm9tYW5zIHRvIHBsdW5kZXIsIGFuZCB0aGVpciBob3VzZSBhbmQgcGFsYWNlIHdlcmUgcmF6ZWQgdG8gdGhlIGdyb3VuZC4gQnV0IHRoZSBwbGVhc2FudGVzdCBwYXJ0IG9mIHRoZSBmaWVsZCBvZiBNYXJzLCB3aGljaCBoYWQgYmVsb25nZWQgdG8gVGFycXVpbiwgd2FzIGRlZGljYXRlZCB0byB0aGF0IGdvZC4gTm93IGl0IGNoYW5jZWQgdGhhdCBpdCBoYWQganVzdCBiZWVuIHJlYXBlZCwgYW5kIHRoZSBncmFpbiBzdGlsbCBsYXkgdXBvbiB0aGUgZ3JvdW5kOyBidXQgc2luY2UgdGhlIGZpZWxkIGhhZCBiZWVuIGNvbnNlY3JhdGVkLCB0aGV5IHRob3VnaHQgaXQgbm90IHJpZ2h0IHRvIHRocmVzaCBpdCBvciB1c2UgaXQgaW4gYW55IHdheS4gVGhleSB0aGVyZWZvcmUgd2l0aCBvbmUgYWNjb3JkIGNhcnJpZWQgdGhlIHNoZWF2ZXMgdG8gdGhlIHJpdmVyIGFuZCBjYXN0IHRoZW0gaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGxpa2UgbWFubmVyIGFsc28gdGhleSBjYXN0IGluIHRoZSB0cmVlcyB3aGljaCBoYWQgYmVlbiBjdXQsIGFuZCBsZWZ0IHRoZSBwbGFjZSB3aG9sbHkgdW50aWxsZWQgYW5kIGJhcnJlbiBmb3IgdGhlIGdvZCBvZiB3YXIuIFRoZSBxdWFudGl0aWVzIG9mIHN0dWZmIHRodXMgaGVhcGVkIHRvZ2V0aGVyIHdlcmUgbm90IGJvcm5lIGFsb25nIGJ5IHRoZSBjdXJyZW50IHZlcnkgZmFyLCBidXQgdGhlIGFkdmFuY2VkIHBvcnRpb25zIHN0b3BwZWQgYW5kIGFjY3VtdWxhdGVkIGF0IHRoZSBzaGFsbG93cyB3aGljaCB0aGV5IGVuY291bnRlcmVkLiBUaGUgcG9ydGlvbnMgdGhhdCBmb2xsb3dlZCB0aGVzZSBjb3VsZCBub3QgZ2V0IHRocm91Z2ggdGhlbSwgYnV0IGltcGluZ2VkIHVwb24gdGhlbSBhbmQgYmxlbmRlZCBpbmV4dHJpY2FibHkgd2l0aCB0aGVtLCBhbmQgdGltZSBhZ2dyZWdhdGlvbiB3YXMgbWFkZSBpbmNyZWFzaW5nbHkgZmlybSBhbmQgZmFzdCBieSB0aGUgYWN0aW9uIG9mIHRoZSBzdHJlYW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIGJyb3VnaHQgYWxvbmcgZ3JlYXQgcXVhbnRpdGllcyBvZiBtdWQsIHRoZSBhZGRpdGlvbiBvZiB3aGljaCBpbmNyZWFzZWQgdGhlIHNpemUgYW5kIGNvaGVzaW9uIG9mIHRoZSBtYXNzLiBBbmQgYmVzaWRlcywgdGhlIGltcGFjdHMgb2YgdGhlIGN1cnJlbnQgd2VyZSBub3QgcnVkZSwgYnV0IHdpdGggYSBnZW50bGUgcHJlc3N1cmUgcHVzaGVkIGFuZCBtb3VsZGVkIGV2ZXJ5dGhpbmcgdG9nZXRoZXIuIE93aW5nIHRvIGl0cyBzaXplIGFuZCBwb3NpdGlvbiB0aGUgbWFzcyBhY3F1aXJlZCBmcmVzaCBzaXplLCBhbmQgYW4gZXh0ZW50IHN1ZmZpY2llbnQgdG8gcmVjZWl2ZSBtb3N0IG9mIHdoYXQgd2FzIGJyb3VnaHQgZG93biBieSB0aGUgcml2ZXIuIEl0IGlzIG5vdyBhIHNhY3JlZCBpc2xhbmQgb3ZlciBhZ2FpbnN0IHRoZSBjaXR5LCBjb250YWluaW5nIHRlbXBsZXMgb2YgdGhlIGdvZHMgYW5kIGNvdmVyZWQgd2Fsa3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNS4xIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNSwgMS00LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgaXMgY2FsbGVkIGluIHRoZSBMYXRpbiB0b25ndWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPkludGVyIGR1b3MgcG9udGVzPC9mb3JlaWduPi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0aGUgcHJvcGVydHkgb2YgdGhlIHJveWFsIGZhbWlseSB3YXMgZ2l2ZW4gdG8gdGhlIFJvbWFucyB0byBwbHVuZGVyLCBhbmQgdGhlaXIgaG91c2UgYW5kIHBhbGFjZSB3ZXJlIHJhemVkIHRvIHRoZSBncm91bmQuIEJ1dCB0aGUgcGxlYXNhbnRlc3QgcGFydCBvZiB0aGUgZmllbGQgb2YgTWFycywgd2hpY2ggaGFkIGJlbG9uZ2VkIHRvIFRhcnF1aW4sIHdhcyBkZWRpY2F0ZWQgdG8gdGhhdCBnb2QuIE5vdyBpdCBjaGFuY2VkIHRoYXQgaXQgaGFkIGp1c3QgYmVlbiByZWFwZWQsIGFuZCB0aGUgZ3JhaW4gc3RpbGwgbGF5IHVwb24gdGhlIGdyb3VuZDsgYnV0IHNpbmNlIHRoZSBmaWVsZCBoYWQgYmVlbiBjb25zZWNyYXRlZCwgdGhleSB0aG91Z2h0IGl0IG5vdCByaWdodCB0byB0aHJlc2ggaXQgb3IgdXNlIGl0IGluIGFueSB3YXkuIFRoZXkgdGhlcmVmb3JlIHdpdGggb25lIGFjY29yZCBjYXJyaWVkIHRoZSBzaGVhdmVzIHRvIHRoZSByaXZlciBhbmQgY2FzdCB0aGVtIGluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGxpa2UgbWFubmVyIGFsc28gdGhleSBjYXN0IGluIHRoZSB0cmVlcyB3aGljaCBoYWQgYmVlbiBjdXQsIGFuZCBsZWZ0IHRoZSBwbGFjZSB3aG9sbHkgdW50aWxsZWQgYW5kIGJhcnJlbiBmb3IgdGhlIGdvZCBvZiB3YXIuIFRoZSBxdWFudGl0aWVzIG9mIHN0dWZmIHRodXMgaGVhcGVkIHRvZ2V0aGVyIHdlcmUgbm90IGJvcm5lIGFsb25nIGJ5IHRoZSBjdXJyZW50IHZlcnkgZmFyLCBidXQgdGhlIGFkdmFuY2VkIHBvcnRpb25zIHN0b3BwZWQgYW5kIGFjY3VtdWxhdGVkIGF0IHRoZSBzaGFsbG93cyB3aGljaCB0aGV5IGVuY291bnRlcmVkLiBUaGUgcG9ydGlvbnMgdGhhdCBmb2xsb3dlZCB0aGVzZSBjb3VsZCBub3QgZ2V0IHRocm91Z2ggdGhlbSwgYnV0IGltcGluZ2VkIHVwb24gdGhlbSBhbmQgYmxlbmRlZCBpbmV4dHJpY2FibHkgd2l0aCB0aGVtLCBhbmQgdGltZSBhZ2dyZWdhdGlvbiB3YXMgbWFkZSBpbmNyZWFzaW5nbHkgZmlybSBhbmQgZmFzdCBieSB0aGUgYWN0aW9uIG9mIHRoZSBzdHJlYW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIGJyb3VnaHQgYWxvbmcgZ3JlYXQgcXVhbnRpdGllcyBvZiBtdWQsIHRoZSBhZGRpdGlvbiBvZiB3aGljaCBpbmNyZWFzZWQgdGhlIHNpemUgYW5kIGNvaGVzaW9uIG9mIHRoZSBtYXNzLiBBbmQgYmVzaWRlcywgdGhlIGltcGFjdHMgb2YgdGhlIGN1cnJlbnQgd2VyZSBub3QgcnVkZSwgYnV0IHdpdGggYSBnZW50bGUgcHJlc3N1cmUgcHVzaGVkIGFuZCBtb3VsZGVkIGV2ZXJ5dGhpbmcgdG9nZXRoZXIuIE93aW5nIHRvIGl0cyBzaXplIGFuZCBwb3NpdGlvbiB0aGUgbWFzcyBhY3F1aXJlZCBmcmVzaCBzaXplLCBhbmQgYW4gZXh0ZW50IHN1ZmZpY2llbnQgdG8gcmVjZWl2ZSBtb3N0IG9mIHdoYXQgd2FzIGJyb3VnaHQgZG93biBieSB0aGUgcml2ZXIuIEl0IGlzIG5vdyBhIHNhY3JlZCBpc2xhbmQgb3ZlciBhZ2FpbnN0IHRoZSBjaXR5LCBjb250YWluaW5nIHRlbXBsZXMgb2YgdGhlIGdvZHMgYW5kIGNvdmVyZWQgd2Fsa3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjUuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDUsIDEtNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGlzIGNhbGxlZCBpbiB0aGUgTGF0aW4gdG9uZ3VlIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjUuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDUsIDEtNC48L2JpYmw+CiAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkludGVyIGR1b3MgcG9udGVzPC9mb3JlaWduPi48L3E+CgkJCSAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkludGVyIGR1b3MgcG9udGVzPC9mb3JlaWduPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lLCBob3dldmVyLCBzYXkgdGhhdCB0aGlzIGRpZCBub3QgaGFwcGVuIHdoZW4gdGhlIGZpZWxkIG9mIFRhcnF1aW4gd2FzIGNvbnNlY3JhdGVkLCBidXQgaW4gbGF0ZXIgdGltZXMsIHdoZW4gVGFycXVpbmlhIGRldm90ZWQgYW5vdGhlciBmaWVsZCBhZGphY2VudCB0byB0aGlzLiBOb3cgVGFycXVpbmlhIHdhcyBhIGhvbHkgdmlyZ2luLCBvbmUgb2YgdGhlIFZlc3RhbHMsIGFuZCByZWNlaXZlZCBncmVhdCBob25vdXJzIGZvciB0aGlzIGFjdCwgYW1vbmcgd2hpY2ggd2FzIHRoaXMsIHRoYXQgb2YgYWxsIHdvbWVuIGhlciB0ZXN0aW1vbnkgYWxvbmUgc2hvdWxkIGJlIHJlY2VpdmVkLiBUaGUgcGVvcGxlIGFsc28gdm90ZWQgaGVyIHBlcm1pc3Npb24gdG8gbWFycnksIGJ1dCBzaGUgZGlkIG5vdCBhdmFpbCBoZXJzZWxmIG9mIGl0LiBUaGlzIGlzIGhvdyB0aGUgdGhpbmcgaGFwcGVuZWQsIGFzIHRoZSB0YWxlIHJ1bnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IHRoaXMgZGlkIG5vdCBoYXBwZW4gd2hlbiB0aGUgZmllbGQgb2YgVGFycXVpbiB3YXMgY29uc2VjcmF0ZWQsIGJ1dCBpbiBsYXRlciB0aW1lcywgd2hlbiBUYXJxdWluaWEgZGV2b3RlZCBhbm90aGVyIGZpZWxkIGFkamFjZW50IHRvIHRoaXMuIE5vdyBUYXJxdWluaWEgd2FzIGEgaG9seSB2aXJnaW4sIG9uZSBvZiB0aGUgVmVzdGFscywgYW5kIHJlY2VpdmVkIGdyZWF0IGhvbm91cnMgZm9yIHRoaXMgYWN0LCBhbW9uZyB3aGljaCB3YXMgdGhpcywgdGhhdCBvZiBhbGwgd29tZW4gaGVyIHRlc3RpbW9ueSBhbG9uZSBzaG91bGQgYmUgcmVjZWl2ZWQuIFRoZSBwZW9wbGUgYWxzbyB2b3RlZCBoZXIgcGVybWlzc2lvbiB0byBtYXJyeSwgYnV0IHNoZSBkaWQgbm90IGF2YWlsIGhlcnNlbGYgb2YgaXQuIFRoaXMgaXMgaG93IHRoZSB0aGluZyBoYXBwZW5lZCwgYXMgdGhlIHRhbGUgcnVucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgVGFycXVpbiwgZGVzcGFpcmluZyBvZiBhdHRlbXB0cyB0byByZWdhaW4gaGlzIHRocm9uZSBieSB0cmVhY2hlcnksIHdhcyBlYWdlcmx5IHdlbGNvbWVkIGJ5IHRoZSBUdXNjYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJ5IHRoZSBwZW9wbGUgb2YgVmVpaSBhbmQgVGFycXVpbmlpLCBhY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi42LjQiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA2LCA0IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyBzZXQgb3V0IHRvIHJlc3RvcmUgaGltIHdpdGggYSBncmVhdCBmb3JjZS4gVGhlIGNvbnN1bHMgbGVkIHRoZSBSb21hbnMgb3V0IHRvIG1lZXQgdGhlbSwgYW5kIGFycmF5ZWQgdGhlaXIgZm9yY2VzIGluIGNlcnRhaW4gc2FjcmVkIHByZWNpbmN0cywgb25lIG9mIHdoaWNoIHdhcyBjYWxsZWQgdGhlIEFyc2lhbiBncm92ZSwgdGhlIG90aGVyIHRoZSBBZXN1dmlhbiBtZWFkb3cuIFdoZW4gdGhlIGVuZ2FnZW1lbnQgYmVnYW4sIEFydW5zIHRoZSBzb24gb2YgVGFycXVpbiBhbmQgQnJ1dHVzIHRoZSBSb21hbiBjb25zdWwgZW5jb3VudGVyZWQgZWFjaCBvdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIG5vdCBieSBjaGFuY2UsIGJ1dCBib3RoIHdlcmUgZHJpdmVuIG9uIGJ5IGhhdHJlZCBhbmQgd3JhdGgsIHRoZSBvbmUgdG8gYXR0YWNrIGEgdHlyYW50IGFuZCBmb2Ugb2YgaGlzIGNvdW50cnksIHRoZSBvdGhlciB0byBhdmVuZ2UgaGltc2VsZiBvbiB0aGUgYXV0aG9yIG9mIGhpcyBleGlsZS4gVGhleSB1cmdlZCB0aGVpciBob3JzZXMgdG8gdGhlIGNvbWJhdCwgYnV0IHNpbmNlIHRoZXkgZW5nYWdlZCB3aXRoIGZ1cnkgcmF0aGVyIHRoYW4gY2FsY3VsYXRpb24sIHRoZXkgd2VyZSByZWNrbGVzcyBvZiB0aGVtc2VsdmVzLCBhbmQgZmVsbCBieSBvbmUgYW5vdGhlcidzIGhhbmRzLiBUaGUgYmF0dGxlIHdoaWNoIGhhZCBzdWNoIGEgZHJlYWRmdWwgYmVnaW5uaW5nIGVuZGVkIG5vIGxlc3MgZGlzYXN0cm91c2x5OyB0aGUgYXJtaWVzLCBhZnRlciBpbmZsaWN0aW5nIGFuZCBzdWZmZXJpbmcgZXF1YWwgbG9zc2VzLCB3ZXJlIHNlcGFyYXRlZCBieSBhIHRlbXBlc3QuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNy4xIiB2YWxpZD0ieWVzIj5MaXZ5IChpaS4gNywgMSksPC9iaWJsPiB0aGUgVHVzY2FucyBkZXBhcnRlZCBpbiB0ZXJyb3IgYWZ0ZXIgdGhlIGJhdHRsZS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgVGFycXVpbiwgZGVzcGFpcmluZyBvZiBhdHRlbXB0cyB0byByZWdhaW4gaGlzIHRocm9uZSBieSB0cmVhY2hlcnksIHdhcyBlYWdlcmx5IHdlbGNvbWVkIGJ5IHRoZSBUdXNjYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QnkgdGhlIHBlb3BsZSBvZiBWZWlpIGFuZCBUYXJxdWluaWksIGFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNi40IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNiwgNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aG8gc2V0IG91dCB0byByZXN0b3JlIGhpbSB3aXRoIGEgZ3JlYXQgZm9yY2UuIFRoZSBjb25zdWxzIGxlZCB0aGUgUm9tYW5zIG91dCB0byBtZWV0IHRoZW0sIGFuZCBhcnJheWVkIHRoZWlyIGZvcmNlcyBpbiBjZXJ0YWluIHNhY3JlZCBwcmVjaW5jdHMsIG9uZSBvZiB3aGljaCB3YXMgY2FsbGVkIHRoZSBBcnNpYW4gZ3JvdmUsIHRoZSBvdGhlciB0aGUgQWVzdXZpYW4gbWVhZG93LiBXaGVuIHRoZSBlbmdhZ2VtZW50IGJlZ2FuLCBBcnVucyB0aGUgc29uIG9mIFRhcnF1aW4gYW5kIEJydXR1cyB0aGUgUm9tYW4gY29uc3VsIGVuY291bnRlcmVkIGVhY2ggb3RoZXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjYuNCIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDYsIDQgZi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3QgYnkgY2hhbmNlLCBidXQgYm90aCB3ZXJlIGRyaXZlbiBvbiBieSBoYXRyZWQgYW5kIHdyYXRoLCB0aGUgb25lIHRvIGF0dGFjayBhIHR5cmFudCBhbmQgZm9lIG9mIGhpcyBjb3VudHJ5LCB0aGUgb3RoZXIgdG8gYXZlbmdlIGhpbXNlbGYgb24gdGhlIGF1dGhvciBvZiBoaXMgZXhpbGUuIFRoZXkgdXJnZWQgdGhlaXIgaG9yc2VzIHRvIHRoZSBjb21iYXQsIGJ1dCBzaW5jZSB0aGV5IGVuZ2FnZWQgd2l0aCBmdXJ5IHJhdGhlciB0aGFuIGNhbGN1bGF0aW9uLCB0aGV5IHdlcmUgcmVja2xlc3Mgb2YgdGhlbXNlbHZlcywgYW5kIGZlbGwgYnkgb25lIGFub3RoZXIncyBoYW5kcy4gVGhlIGJhdHRsZSB3aGljaCBoYWQgc3VjaCBhIGRyZWFkZnVsIGJlZ2lubmluZyBlbmRlZCBubyBsZXNzIGRpc2FzdHJvdXNseTsgdGhlIGFybWllcywgYWZ0ZXIgaW5mbGljdGluZyBhbmQgc3VmZmVyaW5nIGVxdWFsIGxvc3Nlcywgd2VyZSBzZXBhcmF0ZWQgYnkgYSB0ZW1wZXN0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi43LjEiIHZhbGlkPSJ5ZXMiPkxpdnkgKGlpLiA3LCAxKSw8L2JpYmw+IHRoZSBUdXNjYW5zIGRlcGFydGVkIGluIHRlcnJvciBhZnRlciB0aGUgYmF0dGxlLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjcuMSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDcsIDEpLDwvYmlibD4gdGhlIFR1c2NhbnMgZGVwYXJ0ZWQgaW4gdGVycm9yIGFmdGVyIHRoZSBiYXR0bGUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VmFsZXJpdXMgd2FzIHRoZXJlZm9yZSBpbiBwZXJwbGV4aXR5LCBub3Qga25vd2luZyB3aGF0IHRoZSBpc3N1ZSBvZiB0aGUgYmF0dGxlIHdhcywgYnV0IHNlZWluZyBoaXMgc29sZGllcnMgYXMgbXVjaCBkaXNoZWFydGVuZWQgYnkgdGhlaXIgb3duIGxvc3NlcyBhcyB0aGV5IHdlcmUgZW5jb3VyYWdlZCBieSB0aG9zZSBvZiB0aGVpciBlbmVtaWVzLiBTbyB1bmRpc3Rpbmd1aXNoYWJsZSBhbmQgZXF1YWwgd2FzIHRoZSBzbGF1Z2h0ZXIgb24gYm90aCBzaWRlcy4gRWFjaCBhcm15LCBob3dldmVyIHdhcyBtb3JlIGNvbnZpbmNlZCBvZiBkZWZlYXQgYnkgdGhlIG5lYXIgc2lnaHQgb2YgaXRzIG93biBkZWFkLCB0aGFuIGl0IGNvdWxkIGJlIG9mIHZpY3RvcnkgYnkgY29uamVjdHVyaW5nIHRob3NlIG9mIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gc3VjaCBhIG5pZ2h0IGNhbWUgb24gYXMgbXVzdCBuZWVkcyBmb2xsb3cgc3VjaCBhIGJhdHRsZSwgYW5kIGJvdGggY2FtcHMgd2VyZSBxdWlldCwgdGhleSBzYXkgdGhhdCB0aGUgZ3JvdmUgd2FzIHNoYWtlbiwgYW5kIGEgbG91ZCB2b2ljZSBpc3N1ZWQgZnJvbSBpdCBkZWNsYXJpbmcgdGhhdCB0aGUgVHVzY2FucyBoYWQgbG9zdCBvbmUgbWFuIG1vcmUgaW4gdGhlIGJhdHRsZSB0aGFuIHRoZSBSb21hbnMuIFRoZSB1dHRlcmFuY2Ugd2FzIG1hbmlmZXN0bHkgZnJvbSBzb21lIGdvZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TaWx2YW51cywgYXMgTGl2eSB0ZWxscyB0aGUgdGFsZSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi43LjIiIHZhbGlkPSJ5ZXMiPmlpLiA3LCAyPC9iaWJsPikuPC9ub3RlPiBmb3IgYXQgb25jZSB0aGUgUm9tYW5zIHdlcmUgaW5zcGlyZWQgYnkgaXQgdG8gbG91ZCBzaG91dHMgb2YgY291cmFnZSwgd2hpbGUgdGhlIFR1c2NhbnMgd2VyZSBwYW5pYy1zdHJpY2tlbiwgYWJhbmRvbmVkIHRoZWlyIGNhbXAgaW4gY29uZnVzaW9uLCBhbmQgd2VyZSBmb3IgdGhlIG1vc3QgcGFydCBkaXNwZXJzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aG9zZSB0aGF0IHJlbWFpbmVkLCBhIGxpdHRsZSBsZXNzIHRoYW4gZml2ZSB0aG91c2FuZCBpbiBudW1iZXIsIHRoZSBSb21hbnMgZmVsbCB1cG9uIHRoZW0sIHRvb2sgdGhlbSBwcmlzb25lcnMsIGFuZCBwbHVuZGVyZWQgdGhlIGNhbXAuIEFuZCB3aGVuIHRoZSBkZWFkIG9uIGJvdGggc2lkZXMgd2VyZSBudW1iZXJlZCwgdGhvc2Ugb2YgdGhlIGVuZW15IHdlcmUgZm91bmQgdG8gYmUgZWxldmVuIHRob3VzYW5kIGFuZCB0aHJlZSBodW5kcmVkLCBhbmQgdGhvc2Ugb2YgdGhlIFJvbWFucyBhcyBtYW55IGxlc3Mgb25lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlZhbGVyaXVzIHdhcyB0aGVyZWZvcmUgaW4gcGVycGxleGl0eSwgbm90IGtub3dpbmcgd2hhdCB0aGUgaXNzdWUgb2YgdGhlIGJhdHRsZSB3YXMsIGJ1dCBzZWVpbmcgaGlzIHNvbGRpZXJzIGFzIG11Y2ggZGlzaGVhcnRlbmVkIGJ5IHRoZWlyIG93biBsb3NzZXMgYXMgdGhleSB3ZXJlIGVuY291cmFnZWQgYnkgdGhvc2Ugb2YgdGhlaXIgZW5lbWllcy4gU28gdW5kaXN0aW5ndWlzaGFibGUgYW5kIGVxdWFsIHdhcyB0aGUgc2xhdWdodGVyIG9uIGJvdGggc2lkZXMuIEVhY2ggYXJteSwgaG93ZXZlciB3YXMgbW9yZSBjb252aW5jZWQgb2YgZGVmZWF0IGJ5IHRoZSBuZWFyIHNpZ2h0IG9mIGl0cyBvd24gZGVhZCwgdGhhbiBpdCBjb3VsZCBiZSBvZiB2aWN0b3J5IGJ5IGNvbmplY3R1cmluZyB0aG9zZSBvZiB0aGUgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHN1Y2ggYSBuaWdodCBjYW1lIG9uIGFzIG11c3QgbmVlZHMgZm9sbG93IHN1Y2ggYSBiYXR0bGUsIGFuZCBib3RoIGNhbXBzIHdlcmUgcXVpZXQsIHRoZXkgc2F5IHRoYXQgdGhlIGdyb3ZlIHdhcyBzaGFrZW4sIGFuZCBhIGxvdWQgdm9pY2UgaXNzdWVkIGZyb20gaXQgZGVjbGFyaW5nIHRoYXQgdGhlIFR1c2NhbnMgaGFkIGxvc3Qgb25lIG1hbiBtb3JlIGluIHRoZSBiYXR0bGUgdGhhbiB0aGUgUm9tYW5zLiBUaGUgdXR0ZXJhbmNlIHdhcyBtYW5pZmVzdGx5IGZyb20gc29tZSBnb2QsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TaWx2YW51cywgYXMgTGl2eSB0ZWxscyB0aGUgdGFsZSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjcuMiIgdmFsaWQ9InllcyI+aWkuIDcsIDI8L2JpYmw+KS48L25vdGU+IGZvciBhdCBvbmNlIHRoZSBSb21hbnMgd2VyZSBpbnNwaXJlZCBieSBpdCB0byBsb3VkIHNob3V0cyBvZiBjb3VyYWdlLCB3aGlsZSB0aGUgVHVzY2FucyB3ZXJlIHBhbmljLXN0cmlja2VuLCBhYmFuZG9uZWQgdGhlaXIgY2FtcCBpbiBjb25mdXNpb24sIGFuZCB3ZXJlIGZvciB0aGUgbW9zdCBwYXJ0IGRpc3BlcnNlZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuNy4yIiB2YWxpZD0ieWVzIj5paS4gNywgMjwvYmlibD4pLjwvdHJhbnNsYXRpb24+"
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aG9zZSB0aGF0IHJlbWFpbmVkLCBhIGxpdHRsZSBsZXNzIHRoYW4gZml2ZSB0aG91c2FuZCBpbiBudW1iZXIsIHRoZSBSb21hbnMgZmVsbCB1cG9uIHRoZW0sIHRvb2sgdGhlbSBwcmlzb25lcnMsIGFuZCBwbHVuZGVyZWQgdGhlIGNhbXAuIEFuZCB3aGVuIHRoZSBkZWFkIG9uIGJvdGggc2lkZXMgd2VyZSBudW1iZXJlZCwgdGhvc2Ugb2YgdGhlIGVuZW15IHdlcmUgZm91bmQgdG8gYmUgZWxldmVuIHRob3VzYW5kIGFuZCB0aHJlZSBodW5kcmVkLCBhbmQgdGhvc2Ugb2YgdGhlIFJvbWFucyBhcyBtYW55IGxlc3Mgb25lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIHNhaWQgdGhhdCB0aGlzIGJhdHRsZSB3YXMgZm91Z2h0IG9uIHRoZSBsYXN0IGRheSBvZiBGZWJydWFyeS4gVmFsZXJpdXMgY2VsZWJyYXRlZCBhIHRyaXVtcGggZm9yIGl0LCBiZWluZyB0aGUgZmlyc3QgY29uc3VsIHRvIGRyaXZlIGludG8gdGhlIGNpdHkgb24gYSBmb3VyLWhvcnNlIGNoYXJpb3QuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBwcm9jZWVkaW5nIGFmZm9yZGVkIGEgc3BlY3RhY2xlIHdoaWNoIHdhcyBpbXBvc2luZyBhbmQgbWFnbmlmaWNlbnQsIG5vdCBvZGlvdXMgYW5kIG9mZmVuc2l2ZSB0byB0aGUgc3BlY3RhdG9ycywgYXMgc29tZSBzYXk7IG90aGVyd2lzZSBpdCB3b3VsZCBub3QgaGF2ZSBiZWVuIGNvbnRpbnVlZCB3aXRoIHN1Y2ggYXJkb3VyIGFuZCBlbXVsYXRpb24gZm9yIGNvdW50bGVzcyB5ZWFycy4gVGhlIHBlb3BsZSB3ZXJlIGFsc28gcGxlYXNlZCB3aXRoIHRoZSBob25vdXJzIHdoaWNoIFZhbGVyaXVzIGJlc3Rvd2VkIHVwb24gaGlzIGNvbGxlYWd1ZSBhdCB0aGUgZnVuZXJhbCBjZXJlbW9uaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBldmVuIGRlbGl2ZXJlZCBhIGZ1bmVyYWwgb3JhdGlvbiBpbiBoaXMgaG9ub3VyLCB3aGljaCB3YXMgc28gYWRtaXJlZCBieSB0aGUgUm9tYW5zIGFuZCB3b24gc3VjaCBmYXZvdXIgdGhhdCBmcm9tIHRoYXQgdGltZSBvbiwgd2hlbiB0aGVpciBncmVhdCBhbmQgZ29vZCBtZW4gZGllZCwgZW5jb21pdW1zIHdlcmUgcHJvbm91bmNlZCB1cG9uIHRoZW0gYnkgdGhlIG1vc3QgZGlzdGluZ3Vpc2hlZCBjaXRpemVucy4gQW5kIHRoaXMgZnVuZXJhbCBvcmF0aW9uIG9mIGhpcyBpcyBzYWlkIHRvIGhhdmUgYmVlbiBlYXJsaWVyIHRoYW4gYW55IGFtb25nIHRoZSBHcmVla3MsIHVubGVzcyBBbmF4aW1lbmVzIHRoZSBvcmF0b3IgaXMgcmlnaHQgaW4gc2F5aW5nIHRoYXQgdGhlIGN1c3RvbSBvcmlnaW5hdGVkIHdpdGggU29sb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgcHJvY2VlZGluZyBhZmZvcmRlZCBhIHNwZWN0YWNsZSB3aGljaCB3YXMgaW1wb3NpbmcgYW5kIG1hZ25pZmljZW50LCBub3Qgb2Rpb3VzIGFuZCBvZmZlbnNpdmUgdG8gdGhlIHNwZWN0YXRvcnMsIGFzIHNvbWUgc2F5OyBvdGhlcndpc2UgaXQgd291bGQgbm90IGhhdmUgYmVlbiBjb250aW51ZWQgd2l0aCBzdWNoIGFyZG91ciBhbmQgZW11bGF0aW9uIGZvciBjb3VudGxlc3MgeWVhcnMuIFRoZSBwZW9wbGUgd2VyZSBhbHNvIHBsZWFzZWQgd2l0aCB0aGUgaG9ub3VycyB3aGljaCBWYWxlcml1cyBiZXN0b3dlZCB1cG9uIGhpcyBjb2xsZWFndWUgYXQgdGhlIGZ1bmVyYWwgY2VyZW1vbmllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIGV2ZW4gZGVsaXZlcmVkIGEgZnVuZXJhbCBvcmF0aW9uIGluIGhpcyBob25vdXIsIHdoaWNoIHdhcyBzbyBhZG1pcmVkIGJ5IHRoZSBSb21hbnMgYW5kIHdvbiBzdWNoIGZhdm91ciB0aGF0IGZyb20gdGhhdCB0aW1lIG9uLCB3aGVuIHRoZWlyIGdyZWF0IGFuZCBnb29kIG1lbiBkaWVkLCBlbmNvbWl1bXMgd2VyZSBwcm9ub3VuY2VkIHVwb24gdGhlbSBieSB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIGNpdGl6ZW5zLiBBbmQgdGhpcyBmdW5lcmFsIG9yYXRpb24gb2YgaGlzIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGVhcmxpZXIgdGhhbiBhbnkgYW1vbmcgdGhlIEdyZWVrcywgdW5sZXNzIEFuYXhpbWVuZXMgdGhlIG9yYXRvciBpcyByaWdodCBpbiBzYXlpbmcgdGhhdCB0aGUgY3VzdG9tIG9yaWdpbmF0ZWQgd2l0aCBTb2xvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgd2hpY2ggdGhlIHJhdGhlciBkaXNwbGVhc2VkIGFuZCBvZmZlbmRlZCB0aGUgcGVvcGxlIGluIFZhbGVyaXVzIHdhcyB0aGlzLiBCcnV0dXMsIHdob20gdGhleSByZWdhcmRlZCBhcyB0aGUgZmF0aGVyIG9mIHRoZWlyIGxpYmVydGllcywgd291bGQgbm90IGNvbnNlbnQgdG8gcnVsZSBhbG9uZSwgYnV0IG9uY2UgYW5kIGFnYWluIGNob3NlIGEgY29sbGVhZ3VlIHRvIHJ1bGUgd2l0aCBoaW0uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRoaXMgVmFsZXJpdXMsPC9xPiB0aGV5IHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gY29uY2VudHJhdGluZyBhbGwgcG93ZXIgdXBvbiBoaW1zZWxmLCBpcyBub3QgYSBzdWNjZXNzb3IgdG8gdGhlIGNvbnN1bGF0ZSBvZiBCcnV0dXMsIHRvIHdoaWNoIGhlIGhhcyBubyByaWdodCwgYnV0IHRvIHRpbWUgdHlyYW5ueSBvZiBUYXJxdWluLiAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHdoeSBzaG91bGQgaGUgZXh0b2wgQnJ1dHVzIGluIHdvcmRzLCB3aGlsZSBpbiBkZWVkcyBoZSBpbWl0YXRlcyBUYXJxdWluLCBkZXNjZW5kaW5nIHRvIHRoZSBmb3J1bSBhbG9uZSwgZXNjb3J0ZWQgYnkgYWxsIHRoZSByb2RzIGFuZCBheGVzIHRvZ2V0aGVyLCBmcm9tIGEgaG91c2Ugbm8gbGVzcyBzdGF0ZWx5IHRoYW4gdGhlIHJveWFsIGhvdXNlIHdoaWNoIGhlIGRlbW9saXNoZWQ/PC9xPiBGb3IsIGFzIGEgbWF0dGVyIG9mIGZhY3QsIFZhbGVyaXVzIHdhcyBsaXZpbmcgaW4gYSB2ZXJ5IHNwbGVuZGlkIGhvdXNlIG9uIHRoZSBzby1jYWxsZWQgVmVsaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZW1pbmVuY2Ugb2YgdGhlIFBhbGF0aW5lIGhpbGwuPC9ub3RlPiBJdCBodW5nIGhpZ2ggb3ZlciB0aGUgZm9ydW0sIGNvbW1hbmRlZCBhIHZpZXcgb2YgYWxsIHRoYXQgcGFzc2VkIHRoZXJlLCBhbmQgd2FzIHN1cnJvdW5kZWQgYnkgc3RlZXBzIGFuZCBoYXJkIHRvIGdldCBhdCwgc28gdGhhdCB3aGVuIGhlIGNhbWUgZG93biBmcm9tIGl0IHRoZSBzcGVjdGFjbGUgd2FzIGEgbG9mdHkgb25lLCBhbmQgdGhlIHBvbXAgb2YgaGlzIHByb2Nlc3Npb24gd29ydGh5IG9mIGEga2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIFZhbGVyaXVzIHNob3dlZCB3aGF0IGEgZ29vZCB0aGluZyBpdCBpcyBmb3IgbWVuIGluIHBvd2VyIGFuZCBoaWdoIHN0YXRpb24gdG8gaGF2ZSBlYXJzIHdoaWNoIGFyZSBvcGVuIHRvIGZyYW5rbmVzcyBhbmQgdHJ1dGggaW5zdGVhZCBvZiBmbGF0dGVyeS4gRm9yIHdoZW4gaGUgaGVhcmQgZnJvbSBoaXMgZnJpZW5kcywgd2hvIHNwYXJlZCBoaW0gbm8gZGV0YWlsLCB0aGF0IGhlIHdhcyB0aG91Z2h0IGJ5IHRpbWUgbXVsdGl0dWRlIHRvIGJlIHRyYW5zZ3Jlc3NpbmcsIGhlIHdhcyBub3Qgb2JzdGluYXRlIG5vciBleGFzcGVyYXRlZCwgYnV0IHF1aWNrbHkgZ290IHRvZ2V0aGVyIGEgbGFyZ2UgZm9yY2Ugb2Ygd29ya21lbiwgYW5kIHdoaWxlIGl0IHdhcyBzdGlsbCBuaWdodCB0b3JlIHRoZSBob3VzZSBkb3duLCBhbmQgcmF6ZWQgaXQgYWxsIHRvIHRoZSBncm91bmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtb3JuaW5nLCB0aGVyZWZvcmUsIHRoZSBSb21hbnMgc2F3IHdoYXQgaGFkIGhhcHBlbmVkLCBhbmQgY2FtZSBmbG9ja2luZyB0b2dldGhlci4gVGhleSB3ZXJlIG1vdmVkIHRvIGxvdmUgYW5kIGFkbWlyYXRpb24gYnkgdGhlIG1hbidzIG1hZ25hbmltaXR5LCBidXQgd2VyZSBkaXN0cmVzc2VkIGZvciB0aGUgaG91c2UsIGFuZCBtb3VybmVkIGZvciBpdHMgc3RhdGVseSBiZWF1dHksIGFzIGlmIGl0IGhhZCBiZWVuIGh1bWFuLCBub3cgdGhhdCBlbnZ5IGhhZCB1bmp1c3RseSBjb21wYXNzZWQgaXRzIGRlc3RydWN0aW9uLiBUaGV5IHdlcmUgYWxzbyBkaXN0cmVzc2VkIGZvciB0aGVpciBydWxlciwgd2hvLCBsaWtlIGEgaG9tZWxlc3MgbWFuLCB3YXMgbm93IHNoYXJpbmcgdGhlIGhvbWVzIG9mIG90aGVycy4gRm9yIFZhbGVyaXVzIHdhcyByZWNlaXZlZCBpbnRvIHRoZSBob3VzZXMgb2YgaGlzIGZyaWVuZHMgdW50aWwgdGhlIHBlb3BsZSBnYXZlIGhpbSBhIHNpdGUgYW5kIGJ1aWx0IGhpbSBhIGhvdXNlLCBvZiBtb3JlIG1vZGVzdCBkaW1lbnNpb25zIHRoYW4gdGhlIG9uZSBoZSBoYWQgbGl2ZWQgaW4gYmVmb3JlLCB3aGVyZSBub3cgc3RhbmRzIHRoZSB0ZW1wbGUgb2YgVmljYSBQb3RhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlZpY3RyZXNzIFBvc3Nlc3NvciwgYSBuYW1lIG9mIHRoZSBnb2RkZXNzIG9mIHZpY3RvcnksIHdob3NlIHRlbXBsZSB3YXMgYXQgdGhlIGZvb3Qgb2YgdGhlIFZlbGlhICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjcuMTIiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA3LCAxMjwvYmlibD4pLiBBY2NvcmRpbmcgdG8gTGl2eSwgVmFsZXJpdXMgd2FzIGJ1aWxkaW5nIHRoZSBob3VzZSBvbiB0aGUgVmVsaWEsIGJ1dCBpbiBvcmRlciB0byBhbGxheSB0aGUgcGVvcGxlJ3MgamVhbG91c3ksIGJyb3VnaHQgdGhlIG1hdGVyaWFscyB0byB0aGUgZm9vdCBvZiB0aGUgaGlsbCwgYW5kIGJ1aWx0IHRoZSBob3VzZSB0aGVyZS48L25vdGU+IHNvLWNhbGxlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgd2hpY2ggdGhlIHJhdGhlciBkaXNwbGVhc2VkIGFuZCBvZmZlbmRlZCB0aGUgcGVvcGxlIGluIFZhbGVyaXVzIHdhcyB0aGlzLiBCcnV0dXMsIHdob20gdGhleSByZWdhcmRlZCBhcyB0aGUgZmF0aGVyIG9mIHRoZWlyIGxpYmVydGllcywgd291bGQgbm90IGNvbnNlbnQgdG8gcnVsZSBhbG9uZSwgYnV0IG9uY2UgYW5kIGFnYWluIGNob3NlIGEgY29sbGVhZ3VlIHRvIHJ1bGUgd2l0aCBoaW0uIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyBWYWxlcml1cyw8L3E+IHRoZXkgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIGNvbmNlbnRyYXRpbmcgYWxsIHBvd2VyIHVwb24gaGltc2VsZiwgaXMgbm90IGEgc3VjY2Vzc29yIHRvIHRoZSBjb25zdWxhdGUgb2YgQnJ1dHVzLCB0byB3aGljaCBoZSBoYXMgbm8gcmlnaHQsIGJ1dCB0byB0aW1lIHR5cmFubnkgb2YgVGFycXVpbi4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHdoeSBzaG91bGQgaGUgZXh0b2wgQnJ1dHVzIGluIHdvcmRzLCB3aGlsZSBpbiBkZWVkcyBoZSBpbWl0YXRlcyBUYXJxdWluLCBkZXNjZW5kaW5nIHRvIHRoZSBmb3J1bSBhbG9uZSwgZXNjb3J0ZWQgYnkgYWxsIHRoZSByb2RzIGFuZCBheGVzIHRvZ2V0aGVyLCBmcm9tIGEgaG91c2Ugbm8gbGVzcyBzdGF0ZWx5IHRoYW4gdGhlIHJveWFsIGhvdXNlIHdoaWNoIGhlIGRlbW9saXNoZWQ/PC9xPiBGb3IsIGFzIGEgbWF0dGVyIG9mIGZhY3QsIFZhbGVyaXVzIHdhcyBsaXZpbmcgaW4gYSB2ZXJ5IHNwbGVuZGlkIGhvdXNlIG9uIHRoZSBzby1jYWxsZWQgVmVsaWEuPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPllldCB3aHkgc2hvdWxkIGhlIGV4dG9sIEJydXR1cyBpbiB3b3Jkcywgd2hpbGUgaW4gZGVlZHMgaGUgaW1pdGF0ZXMgVGFycXVpbiwgZGVzY2VuZGluZyB0byB0aGUgZm9ydW0gYWxvbmUsIGVzY29ydGVkIGJ5IGFsbCB0aGUgcm9kcyBhbmQgYXhlcyB0b2dldGhlciwgZnJvbSBhIGhvdXNlIG5vIGxlc3Mgc3RhdGVseSB0aGFuIHRoZSByb3lhbCBob3VzZSB3aGljaCBoZSBkZW1vbGlzaGVkPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZW1pbmVuY2Ugb2YgdGhlIFBhbGF0aW5lIGhpbGwuPC9ub3RlPiBJdCBodW5nIGhpZ2ggb3ZlciB0aGUgZm9ydW0sIGNvbW1hbmRlZCBhIHZpZXcgb2YgYWxsIHRoYXQgcGFzc2VkIHRoZXJlLCBhbmQgd2FzIHN1cnJvdW5kZWQgYnkgc3RlZXBzIGFuZCBoYXJkIHRvIGdldCBhdCwgc28gdGhhdCB3aGVuIGhlIGNhbWUgZG93biBmcm9tIGl0IHRoZSBzcGVjdGFjbGUgd2FzIGEgbG9mdHkgb25lLCBhbmQgdGhlIHBvbXAgb2YgaGlzIHByb2Nlc3Npb24gd29ydGh5IG9mIGEga2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBWYWxlcml1cyBzaG93ZWQgd2hhdCBhIGdvb2QgdGhpbmcgaXQgaXMgZm9yIG1lbiBpbiBwb3dlciBhbmQgaGlnaCBzdGF0aW9uIHRvIGhhdmUgZWFycyB3aGljaCBhcmUgb3BlbiB0byBmcmFua25lc3MgYW5kIHRydXRoIGluc3RlYWQgb2YgZmxhdHRlcnkuIEZvciB3aGVuIGhlIGhlYXJkIGZyb20gaGlzIGZyaWVuZHMsIHdobyBzcGFyZWQgaGltIG5vIGRldGFpbCwgdGhhdCBoZSB3YXMgdGhvdWdodCBieSB0aW1lIG11bHRpdHVkZSB0byBiZSB0cmFuc2dyZXNzaW5nLCBoZSB3YXMgbm90IG9ic3RpbmF0ZSBub3IgZXhhc3BlcmF0ZWQsIGJ1dCBxdWlja2x5IGdvdCB0b2dldGhlciBhIGxhcmdlIGZvcmNlIG9mIHdvcmttZW4sIGFuZCB3aGlsZSBpdCB3YXMgc3RpbGwgbmlnaHQgdG9yZSB0aGUgaG91c2UgZG93biwgYW5kIHJhemVkIGl0IGFsbCB0byB0aGUgZ3JvdW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtb3JuaW5nLCB0aGVyZWZvcmUsIHRoZSBSb21hbnMgc2F3IHdoYXQgaGFkIGhhcHBlbmVkLCBhbmQgY2FtZSBmbG9ja2luZyB0b2dldGhlci4gVGhleSB3ZXJlIG1vdmVkIHRvIGxvdmUgYW5kIGFkbWlyYXRpb24gYnkgdGhlIG1hbidzIG1hZ25hbmltaXR5LCBidXQgd2VyZSBkaXN0cmVzc2VkIGZvciB0aGUgaG91c2UsIGFuZCBtb3VybmVkIGZvciBpdHMgc3RhdGVseSBiZWF1dHksIGFzIGlmIGl0IGhhZCBiZWVuIGh1bWFuLCBub3cgdGhhdCBlbnZ5IGhhZCB1bmp1c3RseSBjb21wYXNzZWQgaXRzIGRlc3RydWN0aW9uLiBUaGV5IHdlcmUgYWxzbyBkaXN0cmVzc2VkIGZvciB0aGVpciBydWxlciwgd2hvLCBsaWtlIGEgaG9tZWxlc3MgbWFuLCB3YXMgbm93IHNoYXJpbmcgdGhlIGhvbWVzIG9mIG90aGVycy4gRm9yIFZhbGVyaXVzIHdhcyByZWNlaXZlZCBpbnRvIHRoZSBob3VzZXMgb2YgaGlzIGZyaWVuZHMgdW50aWwgdGhlIHBlb3BsZSBnYXZlIGhpbSBhIHNpdGUgYW5kIGJ1aWx0IGhpbSBhIGhvdXNlLCBvZiBtb3JlIG1vZGVzdCBkaW1lbnNpb25zIHRoYW4gdGhlIG9uZSBoZSBoYWQgbGl2ZWQgaW4gYmVmb3JlLCB3aGVyZSBub3cgc3RhbmRzIHRoZSB0ZW1wbGUgb2YgVmljYSBQb3RhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VmljdHJlc3MgUG9zc2Vzc29yLCBhIG5hbWUgb2YgdGhlIGdvZGRlc3Mgb2YgdmljdG9yeSwgd2hvc2UgdGVtcGxlIHdhcyBhdCB0aGUgZm9vdCBvZiB0aGUgVmVsaWEgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi43LjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNywgMTI8L2JpYmw+KS4gQWNjb3JkaW5nIHRvIExpdnksIFZhbGVyaXVzIHdhcyBidWlsZGluZyB0aGUgaG91c2Ugb24gdGhlIFZlbGlhLCBidXQgaW4gb3JkZXIgdG8gYWxsYXkgdGhlIHBlb3BsZSdzIGplYWxvdXN5LCBicm91Z2h0IHRoZSBtYXRlcmlhbHMgdG8gdGhlIGZvb3Qgb2YgdGhlIGhpbGwsIGFuZCBidWlsdCB0aGUgaG91c2UgdGhlcmUuPC9ub3RlPiBzby1jYWxsZWQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi43LjEyIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gNywgMTI8L2JpYmw+KS4gQWNjb3JkaW5nIHRvIExpdnksIFZhbGVyaXVzIHdhcyBidWlsZGluZyB0aGUgaG91c2Ugb24gdGhlIFZlbGlhLCBidXQgaW4gb3JkZXIgdG8gYWxsYXkgdGhlIHBlb3BsZSdzIGplYWxvdXN5LCBicm91Z2h0IHRoZSBtYXRlcmlhbHMgdG8gdGhlIGZvb3Qgb2YgdGhlIGhpbGwsIGFuZCBidWlsdCB0aGUgaG91c2UgdGhlcmUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2lzaGluZyBub3cgdG8gbWFrZSBub3Qgb25seSBoaW1zZWxmIGJ1dCBhbHNvIHRoZSBnb3Zlcm5tZW50LCBpbnN0ZWFkIG9mIGZvcm1pZGFibGUsIHN1Ym1pc3NpdmUgYW5kIGFncmVlYWJsZSB0byB0aGUgbXVsdGl0dWRlLCBoZSByZW1vdmVkIHRoZSBheGVzIGZyb20gdGhlIGxpY3RvcnMnIHJvZHMsIGFuZCB3aGVuIGhlIGNhbWUgaW50byB0aGUgYXNzZW1ibHksIGluY2xpbmVkIGFuZCBsb3dlcmVkIHRoZSByb2RzIHRoZW1zZWx2ZXMgdG8gdGhlIHBlb3BsZSwgZW1waGFzaXppbmcgdGhlIG1hamVzdHkgb2YgdGhlIGRlbW9jcmFjeS4gVGhpcyBjdXN0b20gdGhlIGNvbnN1bHMgb2JzZXJ2ZSB0byB0aGlzIGRheS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGJlZm9yZSB0aGUgbXVsdGl0dWRlIHdlcmUgYXdhcmUgb2YgaXQgaGUgaGFkIHN1Y2NlZWRlZCwgbm90IGJ5IGh1bWJsaW5nIGhpbXNlbGYsIGFzIHRoZXkgdGhvdWdodCwgYnV0IGJ5IGNoZWNraW5nIGFuZCByZW1vdmluZyB0aGVpciBlbnZpb3VzIGZlZWxpbmdzIHRocm91Z2ggc3VjaCBtb2RlcmF0aW9uIG9uIGhpcyBwYXJ0LCBpbiBhZGRpbmcgdG8gaGlzIHJlYWwgaW5mbHVlbmNlIG92ZXIgdGhlbSBqdXN0IGFzIG11Y2ggYXMgaGUgaGFkIHNlZW1lZCB0byB0YWtlIGF3YXkgZnJvbSBoaXMgYXV0aG9yaXR5LCBhbmQgdGhlIHBlb3BsZSBzdWJtaXR0ZWQgdG8gaGltIHdpdGggcGxlYXN1cmUgYW5kIGJvcmUgaGlzIHlva2Ugd2lsbGluZ2x5LiBUaGV5IHRoZXJlZm9yZSBjYWxsZWQgaGltIFB1YmxpY29sYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi44LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA4LCAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG5hbWUgd2hpY2ggc2lnbmlmaWVzIDxlbXBoPnBlb3BsZS1jaGVyaXNoZXI8L2VtcGg+LiBUaGlzIG5hbWUgcHJldmFpbGVkIG92ZXIgdGhlIG9sZGVyIG5hbWVzIHdoaWNoIGhlIGhhZCBib3JuZSwgYW5kIGl0IGlzIHRoZSBuYW1lIHdoaWNoIEkgc2hhbGwgdXNlIGZvciBoaW0gaW4gdGhlIHJlbWFpbmRlciBvZiB0aGlzIExpZmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldpc2hpbmcgbm93IHRvIG1ha2Ugbm90IG9ubHkgaGltc2VsZiBidXQgYWxzbyB0aGUgZ292ZXJubWVudCwgaW5zdGVhZCBvZiBmb3JtaWRhYmxlLCBzdWJtaXNzaXZlIGFuZCBhZ3JlZWFibGUgdG8gdGhlIG11bHRpdHVkZSwgaGUgcmVtb3ZlZCB0aGUgYXhlcyBmcm9tIHRoZSBsaWN0b3JzJyByb2RzLCBhbmQgd2hlbiBoZSBjYW1lIGludG8gdGhlIGFzc2VtYmx5LCBpbmNsaW5lZCBhbmQgbG93ZXJlZCB0aGUgcm9kcyB0aGVtc2VsdmVzIHRvIHRoZSBwZW9wbGUsIGVtcGhhc2l6aW5nIHRoZSBtYWplc3R5IG9mIHRoZSBkZW1vY3JhY3kuIFRoaXMgY3VzdG9tIHRoZSBjb25zdWxzIG9ic2VydmUgdG8gdGhpcyBkYXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZWZvcmUgdGhlIG11bHRpdHVkZSB3ZXJlIGF3YXJlIG9mIGl0IGhlIGhhZCBzdWNjZWVkZWQsIG5vdCBieSBodW1ibGluZyBoaW1zZWxmLCBhcyB0aGV5IHRob3VnaHQsIGJ1dCBieSBjaGVja2luZyBhbmQgcmVtb3ZpbmcgdGhlaXIgZW52aW91cyBmZWVsaW5ncyB0aHJvdWdoIHN1Y2ggbW9kZXJhdGlvbiBvbiBoaXMgcGFydCwgaW4gYWRkaW5nIHRvIGhpcyByZWFsIGluZmx1ZW5jZSBvdmVyIHRoZW0ganVzdCBhcyBtdWNoIGFzIGhlIGhhZCBzZWVtZWQgdG8gdGFrZSBhd2F5IGZyb20gaGlzIGF1dGhvcml0eSwgYW5kIHRoZSBwZW9wbGUgc3VibWl0dGVkIHRvIGhpbSB3aXRoIHBsZWFzdXJlIGFuZCBib3JlIGhpcyB5b2tlIHdpbGxpbmdseS4gVGhleSB0aGVyZWZvcmUgY2FsbGVkIGhpbSBQdWJsaWNvbGEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjguMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDgsIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGEgbmFtZSB3aGljaCBzaWduaWZpZXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjguMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDgsIDEuPC9iaWJsPgogICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBlb3BsZS1jaGVyaXNoZXI8L2VtcGg+LiBUaGlzIG5hbWUgcHJldmFpbGVkIG92ZXIgdGhlIG9sZGVyIG5hbWVzIHdoaWNoIGhlIGhhZCBib3JuZSwgYW5kIGl0IGlzIHRoZSBuYW1lIHdoaWNoIEkgc2hhbGwgdXNlIGZvciBoaW0gaW4gdGhlIHJlbWFpbmRlciBvZiB0aGlzIExpZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBwZXJtaXR0ZWQgYW55IHdobyB3aXNoZWQgdG8gZW50ZXIgdGhlIGxpc3RzIGFuZCBzdWUgZm9yIHRoZSBjb25zdWxzaGlwLiBCdXQgYmVmb3JlIHRoZSBpbnN0YWxsYXRpb24gb2YgaGlzIGNvbGxlYWd1ZSwgbm90IGtub3dpbmcgd2hvIGhlIHdvdWxkIGJlLCBidXQgZmVhcmluZyBhbiBvcHBvc2l0aW9uIGR1ZSB0byBzb21lIGplYWxvdXN5IG9yIGlnbm9yYW5jZSwgaGUgdXNlZCBoaXMgc29sZSBhdXRob3JpdHkgZm9yIHRoZSBlbmFjdG1lbnQgb2YgaGlzIGJlc3QgYW5kIG1vc3QgaW1wb3J0YW50IG1lYXN1cmVzLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlIGZpbGxlZCB1cCB0aGUgc2VuYXRlLCB3aGljaCB3YXMgbXVjaCByZWR1Y2VkIGluIG51bWJlcnM7IGZvciBzb21lIGhhZCBsb25nIGJlZm9yZSBiZWVuIHB1dCB0byBkZWF0aCBieSBUYXJxdWluLCBhbmQgb3RoZXJzIGhhZCByZWNlbnRseSBmYWxsZW4gaW4gdGhlIGJhdHRsZSB3aXRoIHRoZSBUdXNjYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gd2VyZSBlbnJvbGxlZCBpbiB0aGlzIGJvZHkgYnkgaGltIGFtb3VudGVkLCB0aGV5IHNheSwgdG8gYSBodW5kcmVkIGFuZCBzaXh0eS1mb3VyLiBBZnRlciB0aGlzIGhlIGVuYWN0ZWQgc2V2ZXJhbCBsYXdzLCBvbmUgb2Ygd2hpY2ggZXNwZWNpYWxseSBzdHJlbmd0aGVuZWQgdGhlIHBvc2l0aW9uIG9mIHRoZSBjb21tb25zIGJ5IGFsbG93aW5nIGEgZGVmZW5kYW50IHRvIGFwcGVhbCB0byB0aGUgcGVvcGxlIGZyb20gdGhlIGp1ZGdlbWVudCBvZiB0aGUgY29uc3Vscy4gQSBzZWNvbmQgbWFkZSBpdCBhIGNhcGl0YWwgb2ZmZW5jZSB0byBhc3N1bWUgYSBtYWdpc3RyYWN5IHdoaWNoIHRoZSBwZW9wbGUgaGFkIG5vdCBiZXN0b3dlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QSB0aGlyZCwgZm9sbG93aW5nIHRoZXNlLCBjYW1lIHRvIHRoZSByZWxpZWYgb2YgdGhlIHBvb3I7IGl0IGxpZnRlZCB0aGUgdGF4ZXMgZnJvbSB0aGUgY2l0aXplbnMsIHNvIHRoYXQgYWxsIGVuZ2FnZWQgbW9yZSB6ZWFsb3VzbHkgaW4gbWFudWZhY3R1cmVzIGFuZCBjb21tZXJjZS4gQW5kIHRoZSBvbmUgd2hpY2ggd2FzIGVuYWN0ZWQgYWdhaW5zdCBkaXNvYmVkaWVuY2UgdG8gdGhlIGNvbnN1bHMgd2FzIHRob3VnaHQgdG8gYmUgbm8gbGVzcyBwb3B1bGFyIGluIGl0cyBjaGFyYWN0ZXIsIGFuZCB0byBiZSBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhlIG1hbnkgcmF0aGVyIHRoYW4gb2YgdGhlIHBvd2VyZnVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGZpbmUgd2hpY2ggaXQgaW1wb3NlZCBvbiBkaXNvYmVkaWVuY2Ugd2FzIG9ubHkgdGhlIHdvcnRoIG9mIGZpdmUgb3hlbiBhbmQgdHdvIHNoZWVwLiBOb3cgdGhlIHZhbHVlIG9mIGEgc2hlZXAgd2FzIHRlbiBvYm9scyBhbmQgdGhhdCBvZiBhbiBveCwgYSBodW5kcmVkLCBmb3IgdGhlIFJvbWFucyBhdCB0aGF0IHRpbWUgZGlkIG5vdCB1c2UgbXVjaCBjb2luZWQgbW9uZXksIGJ1dCB0aGVpciB3ZWFsdGggY29uc2lzdGVkIGluIGZsb2NrcyBhbmQgaGVyZHMuIFRoZXJlZm9yZSB0byB0aGlzIGRheSB0aGV5IGNhbGwgdGhlaXIgc3Vic3RhbmNlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5wZWN1bGl1bTwvZm9yZWlnbj4sPC9xPiBmcm9tIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5wZWN1czwvZm9yZWlnbj4sPC9xPiAKICAgICAgICAgICAgPGVtcGg+Y2F0dGxlPC9lbXBoPjsgYW5kIHRoZWlyIG9sZGVzdCBjb2lucyBhcmUgc3RhbXBlZCB3aXRoIHRpbWUgZmlndXJlIG9mIGFuIG94LCBhIHNoZWVwLCBvciBhIGhvZy4gQW5kIHRoZXkgYWN0dWFsbHkgZ2F2ZSB0aGVpciBvd24gc29ucyBzdWNoIHN1cm5hbWVzIGFzIFN1aWxsaXVzLCBCdWJ1bGN1cywgQ2FwcmFyaXVzLCBhbmQgUG9yY2l1czsgdGhlIGxhc3QgdHdvIGZyb20gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPmNhcHJhPC9mb3JlaWduPgogICAgICAgICAgICA8L3E+IGFuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+cG9yY3VzPC9mb3JlaWduPiw8L3E+IHRoZWlyIHdvcmRzIGZvciA8ZW1waD5nb2F0PC9lbXBoPiBhbmQgPGVtcGg+cGlnPC9lbXBoPi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZmlyc3QgdHdvIGZyb20gZm9ybXMgb2YgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3VzLDwvcT4gCiAgICAgICAgICAgICAgIDxlbXBoPnN3aW5lPC9lbXBoPiwgYW5kIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJvcyw8L3E+IAogICAgICAgICAgICAgICA8ZW1waD5veDwvZW1waD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHBlcm1pdHRlZCBhbnkgd2hvIHdpc2hlZCB0byBlbnRlciB0aGUgbGlzdHMgYW5kIHN1ZSBmb3IgdGhlIGNvbnN1bHNoaXAuIEJ1dCBiZWZvcmUgdGhlIGluc3RhbGxhdGlvbiBvZiBoaXMgY29sbGVhZ3VlLCBub3Qga25vd2luZyB3aG8gaGUgd291bGQgYmUsIGJ1dCBmZWFyaW5nIGFuIG9wcG9zaXRpb24gZHVlIHRvIHNvbWUgamVhbG91c3kgb3IgaWdub3JhbmNlLCBoZSB1c2VkIGhpcyBzb2xlIGF1dGhvcml0eSBmb3IgdGhlIGVuYWN0bWVudCBvZiBoaXMgYmVzdCBhbmQgbW9zdCBpbXBvcnRhbnQgbWVhc3VyZXMuIEluIHRoZSBmaXJzdCBwbGFjZSwgaGUgZmlsbGVkIHVwIHRoZSBzZW5hdGUsIHdoaWNoIHdhcyBtdWNoIHJlZHVjZWQgaW4gbnVtYmVyczsgZm9yIHNvbWUgaGFkIGxvbmcgYmVmb3JlIGJlZW4gcHV0IHRvIGRlYXRoIGJ5IFRhcnF1aW4sIGFuZCBvdGhlcnMgaGFkIHJlY2VudGx5IGZhbGxlbiBpbiB0aGUgYmF0dGxlIHdpdGggdGhlIFR1c2NhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyB3ZXJlIGVucm9sbGVkIGluIHRoaXMgYm9keSBieSBoaW0gYW1vdW50ZWQsIHRoZXkgc2F5LCB0byBhIGh1bmRyZWQgYW5kIHNpeHR5LWZvdXIuIEFmdGVyIHRoaXMgaGUgZW5hY3RlZCBzZXZlcmFsIGxhd3MsIG9uZSBvZiB3aGljaCBlc3BlY2lhbGx5IHN0cmVuZ3RoZW5lZCB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbW1vbnMgYnkgYWxsb3dpbmcgYSBkZWZlbmRhbnQgdG8gYXBwZWFsIHRvIHRoZSBwZW9wbGUgZnJvbSB0aGUganVkZ2VtZW50IG9mIHRoZSBjb25zdWxzLiBBIHNlY29uZCBtYWRlIGl0IGEgY2FwaXRhbCBvZmZlbmNlIHRvIGFzc3VtZSBhIG1hZ2lzdHJhY3kgd2hpY2ggdGhlIHBlb3BsZSBoYWQgbm90IGJlc3Rvd2VkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgdGhpcmQsIGZvbGxvd2luZyB0aGVzZSwgY2FtZSB0byB0aGUgcmVsaWVmIG9mIHRoZSBwb29yOyBpdCBsaWZ0ZWQgdGhlIHRheGVzIGZyb20gdGhlIGNpdGl6ZW5zLCBzbyB0aGF0IGFsbCBlbmdhZ2VkIG1vcmUgemVhbG91c2x5IGluIG1hbnVmYWN0dXJlcyBhbmQgY29tbWVyY2UuIEFuZCB0aGUgb25lIHdoaWNoIHdhcyBlbmFjdGVkIGFnYWluc3QgZGlzb2JlZGllbmNlIHRvIHRoZSBjb25zdWxzIHdhcyB0aG91Z2h0IHRvIGJlIG5vIGxlc3MgcG9wdWxhciBpbiBpdHMgY2hhcmFjdGVyLCBhbmQgdG8gYmUgaW4gdGhlIGludGVyZXN0IG9mIHRoZSBtYW55IHJhdGhlciB0aGFuIG9mIHRoZSBwb3dlcmZ1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmluZSB3aGljaCBpdCBpbXBvc2VkIG9uIGRpc29iZWRpZW5jZSB3YXMgb25seSB0aGUgd29ydGggb2YgZml2ZSBveGVuIGFuZCB0d28gc2hlZXAuIE5vdyB0aGUgdmFsdWUgb2YgYSBzaGVlcCB3YXMgdGVuIG9ib2xzIGFuZCB0aGF0IG9mIGFuIG94LCBhIGh1bmRyZWQsIGZvciB0aGUgUm9tYW5zIGF0IHRoYXQgdGltZSBkaWQgbm90IHVzZSBtdWNoIGNvaW5lZCBtb25leSwgYnV0IHRoZWlyIHdlYWx0aCBjb25zaXN0ZWQgaW4gZmxvY2tzIGFuZCBoZXJkcy4gVGhlcmVmb3JlIHRvIHRoaXMgZGF5IHRoZXkgY2FsbCB0aGVpciBzdWJzdGFuY2UgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wZWN1bGl1bTwvZm9yZWlnbj4sPC9xPiBmcm9tIAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cGVjdWxpdW08L2ZvcmVpZ24+LDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBlY3VzPC9mb3JlaWduPiw8L3E+IAogICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wZWN1czwvZm9yZWlnbj4sPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5jYXR0bGU8L2VtcGg+OyBhbmQgdGhlaXIgb2xkZXN0IGNvaW5zIGFyZSBzdGFtcGVkIHdpdGggdGltZSBmaWd1cmUgb2YgYW4gb3gsIGEgc2hlZXAsIG9yIGEgaG9nLiBBbmQgdGhleSBhY3R1YWxseSBnYXZlIHRoZWlyIG93biBzb25zIHN1Y2ggc3VybmFtZXMgYXMgU3VpbGxpdXMsIEJ1YnVsY3VzLCBDYXByYXJpdXMsIGFuZCBQb3JjaXVzOyB0aGUgbGFzdCB0d28gZnJvbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNhcHJhPC9mb3JlaWduPgogICAgICAgICAgICA8L3E+IGFuZCAKCQkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNhcHJhPC9mb3JlaWduPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb3JjdXM8L2ZvcmVpZ24+LDwvcT4gdGhlaXIgd29yZHMgZm9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvcmN1czwvZm9yZWlnbj4sPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5nb2F0PC9lbXBoPiBhbmQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5waWc8L2VtcGg+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGZpcnN0IHR3byBmcm9tIGZvcm1zIG9mIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3VzLDwvcT4gCiAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+c3dpbmU8L2VtcGg+LCBhbmQgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ib3MsPC9xPiAKICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5veDwvZW1waD4uPC9ub3RlPgoJCQkgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnN1cyw8L3E+IAogICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnN3aW5lPC9lbXBoPiwgYW5kIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Ym9zLDwvcT4gCiAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+b3g8L2VtcGg+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBpbiB0aGVzZSBwYXJ0aWN1bGFycyBoZSBzaG93ZWQgaGltc2VsZiBhIHBvcHVsYXIgYW5kIG1vZGVyYXRlIGxhd2dpdmVyLCBpbiB0aGUgY2FzZSBvZiBhbiBpbW1vZGVyYXRlIG9mZmVuY2UgaGUgbWFkZSB0aGUgcGVuYWx0eSBzZXZlcmUuIEZvciBoZSBlbmFjdGVkIGEgbGF3IGJ5IHdoaWNoIGFueSBvbmUgd2hvIHNvdWdodCB0byBtYWtlIGhpbXNlbGYgdHlyYW50IG1pZ2h0IGJlIHNsYWluIHdpdGhvdXQgdHJpYWwsIGFuZCB0aGUgc2xheWVyIHNob3VsZCBiZSBmcmVlIGZyb20gYmxvb2QtZ3VpbHRpbmVzcyBpZiBoZSBwcm9kdWNlZCBwcm9vZnMgb2YgdGhlIGNyaW1lLiBGb3IgYWx0aG91Z2ggaXQgaXMgaW1wb3NzaWJsZSBmb3Igb25lIHdobyBhdHRlbXB0cyBzbyBncmVhdCBhIHRhc2sgdG8gZXNjYXBlIGFsbCBub3RpY2UsIGl0IGlzIG5vdCBpbXBvc3NpYmxlIGZvciBoaW0gdG8gZG8gc28gbG9uZyBlbm91Z2ggdG8gbWFrZSBoaW1zZWxmIHRvbyBwb3dlcmZ1bCB0byBiZSBicm91Z2h0IHRvIHRyaWFsLCB3aGljaCB0cmlhbCBoaXMgdmVyeSBjcmltZSBwcmVjbHVkZXMuIEhlIHRoZXJlZm9yZSBnYXZlIGFueSBvbmUgd2hvIHdhcyBhYmxlIHRvIGRvIHNvIHRoZSBwcml2aWxlZ2Ugb2YgYW50aWNpcGF0aW5nIHRoZSBjdWxwcml0J3MgdHJpYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIGluIHRoZXNlIHBhcnRpY3VsYXJzIGhlIHNob3dlZCBoaW1zZWxmIGEgcG9wdWxhciBhbmQgbW9kZXJhdGUgbGF3Z2l2ZXIsIGluIHRoZSBjYXNlIG9mIGFuIGltbW9kZXJhdGUgb2ZmZW5jZSBoZSBtYWRlIHRoZSBwZW5hbHR5IHNldmVyZS4gRm9yIGhlIGVuYWN0ZWQgYSBsYXcgYnkgd2hpY2ggYW55IG9uZSB3aG8gc291Z2h0IHRvIG1ha2UgaGltc2VsZiB0eXJhbnQgbWlnaHQgYmUgc2xhaW4gd2l0aG91dCB0cmlhbCwgYW5kIHRoZSBzbGF5ZXIgc2hvdWxkIGJlIGZyZWUgZnJvbSBibG9vZC1ndWlsdGluZXNzIGlmIGhlIHByb2R1Y2VkIHByb29mcyBvZiB0aGUgY3JpbWUuIEZvciBhbHRob3VnaCBpdCBpcyBpbXBvc3NpYmxlIGZvciBvbmUgd2hvIGF0dGVtcHRzIHNvIGdyZWF0IGEgdGFzayB0byBlc2NhcGUgYWxsIG5vdGljZSwgaXQgaXMgbm90IGltcG9zc2libGUgZm9yIGhpbSB0byBkbyBzbyBsb25nIGVub3VnaCB0byBtYWtlIGhpbXNlbGYgdG9vIHBvd2VyZnVsIHRvIGJlIGJyb3VnaHQgdG8gdHJpYWwsIHdoaWNoIHRyaWFsIGhpcyB2ZXJ5IGNyaW1lIHByZWNsdWRlcy4gSGUgdGhlcmVmb3JlIGdhdmUgYW55IG9uZSB3aG8gd2FzIGFibGUgdG8gZG8gc28gdGhlIHByaXZpbGVnZSBvZiBhbnRpY2lwYXRpbmcgdGhlIGN1bHByaXQncyB0cmlhbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyByZWNlaXZlZCBwcmFpc2UgZm9yIGhpcyBsYXcgY29uY2VybmluZyB0aGUgcHVibGljIHRyZWFzdXJ5LiBXaGVuIGl0IHdhcyBuZWNlc3NhcnkgZm9yIHRoZSBjaXRpemVucyB0byBjb250cmlidXRlIGZyb20gdGhlaXIgc3Vic3RhbmNlIG1lYW5zIGZvciBjYXJyeWluZyBvbiB0aGUgd2FyLCBoZSB3YXMgdW53aWxsaW5nIHRvIGFzc3VtZSB0aGUgYWRtaW5pc3RyYXRpb24gb2YgaXQgaGltc2VsZiwgb3IgdG8gYWxsb3cgaGlzIGZyaWVuZHMgdG8gZG8gc28sIG9yLCBpbmRlZWQsIHRvIGhhdmUgdGhlIHB1YmxpYyBtb25leXMgYnJvdWdodCBpbnRvIGFueSBwcml2YXRlIGhvdXNlLiBIZSB0aGVyZWZvcmUgbWFkZSB0aGUgdGVtcGxlIG9mIFNhdHVybiBhIHRyZWFzdXJ5LCBhcyBpdCBpcyB0byB0aGlzIGRheSwgYW5kIGdhdmUgdGhlIHBlb3BsZSB0aGUgcHJpdmlsZWdlIG9mIGFwcG9pbnRpbmcgdHdvIHlvdW5nIG1lbiBhcyBxdWFlc3RvcnMsIG9yIHRyZWFzdXJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCB0byBiZSB0aHVzIGFwcG9pbnRlZCB3ZXJlIFB1YmxpdXMgVmV0dXJpdXMgYW5kIE1hcmN1cyBNaW51Y2l1cywgYW5kIGxhcmdlIHN1bXMgb2YgbW9uZXkgd2VyZSBjb2xsZWN0ZWQuIEZvciBvbmUgaHVuZHJlZCBhbmQgdGhpcnR5IHRob3VzYW5kIG5hbWVzIHdlcmUgb24gdGhlIGFzc2Vzc21lbnQgbGlzdHMsIG9ycGhhbnMgYW5kIHdpZG93cyBiZWluZyBleGN1c2VkIGZyb20gdGhlIGNvbnRyaWJ1dGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMi4yIiB2YWxpZD0ieWVzIj5DYW1pbGx1cywgaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gcmVjZWl2ZWQgcHJhaXNlIGZvciBoaXMgbGF3IGNvbmNlcm5pbmcgdGhlIHB1YmxpYyB0cmVhc3VyeS4gV2hlbiBpdCB3YXMgbmVjZXNzYXJ5IGZvciB0aGUgY2l0aXplbnMgdG8gY29udHJpYnV0ZSBmcm9tIHRoZWlyIHN1YnN0YW5jZSBtZWFucyBmb3IgY2Fycnlpbmcgb24gdGhlIHdhciwgaGUgd2FzIHVud2lsbGluZyB0byBhc3N1bWUgdGhlIGFkbWluaXN0cmF0aW9uIG9mIGl0IGhpbXNlbGYsIG9yIHRvIGFsbG93IGhpcyBmcmllbmRzIHRvIGRvIHNvLCBvciwgaW5kZWVkLCB0byBoYXZlIHRoZSBwdWJsaWMgbW9uZXlzIGJyb3VnaHQgaW50byBhbnkgcHJpdmF0ZSBob3VzZS4gSGUgdGhlcmVmb3JlIG1hZGUgdGhlIHRlbXBsZSBvZiBTYXR1cm4gYSB0cmVhc3VyeSwgYXMgaXQgaXMgdG8gdGhpcyBkYXksIGFuZCBnYXZlIHRoZSBwZW9wbGUgdGhlIHByaXZpbGVnZSBvZiBhcHBvaW50aW5nIHR3byB5b3VuZyBtZW4gYXMgcXVhZXN0b3JzLCBvciB0cmVhc3VyZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCB0byBiZSB0aHVzIGFwcG9pbnRlZCB3ZXJlIFB1YmxpdXMgVmV0dXJpdXMgYW5kIE1hcmN1cyBNaW51Y2l1cywgYW5kIGxhcmdlIHN1bXMgb2YgbW9uZXkgd2VyZSBjb2xsZWN0ZWQuIEZvciBvbmUgaHVuZHJlZCBhbmQgdGhpcnR5IHRob3VzYW5kIG5hbWVzIHdlcmUgb24gdGhlIGFzc2Vzc21lbnQgbGlzdHMsIG9ycGhhbnMgYW5kIHdpZG93cyBiZWluZyBleGN1c2VkIGZyb20gdGhlIGNvbnRyaWJ1dGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDIuMiIgdmFsaWQ9InllcyI+Q2FtaWxsdXMsIGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDIuMiIgdmFsaWQ9InllcyI+Q2FtaWxsdXMsIGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYXR0ZXIgcmVndWxhdGVkLCBoZSBjYXVzZWQgTHVjcmV0aXVzLCB0aGUgZmF0aGVyIG9mIEx1Y3JldGlhLCB0byBiZSBhcHBvaW50ZWQgaGlzIGNvbGxlYWd1ZSBpbiB0aGUgY29uc3Vsc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi44LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA4LCAxLTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRvIGhpbSBoZSB5aWVsZGVkIHRoZSBwcmVjZWRlbmNlLCBhcyB0aGUgZWxkZXIgbWFuLCBhbmQgY29tbWl0dGVkIHRvIGhpbSB0aGUgc28tY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LDwvcT4gYSBwcml2aWxlZ2Ugb2Ygc2VuaW9yaXR5IHdoaWNoIGhhcyBjb250aW51ZWQgZnJvbSB0aGF0IGRheSB0byB0aGlzLiBCdXQgTHVjcmV0aXVzIGRpZWQgYSBmZXcgZGF5cyBhZnRlcndhcmRzLCBhbmQgaW4gYSBuZXcgZWxlY3Rpb24gTWFyY3VzIEhvcmF0aXVzIHdhcyBjaG9zZW4gY29uc3VsLCBhbmQgc2hhcmVkIHRoZSBvZmZpY2Ugd2l0aCBQdWJsaWNvbGEgZm9yIHRoZSByZW1haW5kZXIgb2YgdGhlIHllYXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWF0dGVyIHJlZ3VsYXRlZCwgaGUgY2F1c2VkIEx1Y3JldGl1cywgdGhlIGZhdGhlciBvZiBMdWNyZXRpYSwgdG8gYmUgYXBwb2ludGVkIGhpcyBjb2xsZWFndWUgaW4gdGhlIGNvbnN1bHNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjguMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDgsIDEtNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVG8gaGltIGhlIHlpZWxkZWQgdGhlIHByZWNlZGVuY2UsIGFzIHRoZSBlbGRlciBtYW4sIGFuZCBjb21taXR0ZWQgdG8gaGltIHRoZSBzby1jYWxsZWQgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuOC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gOCwgMS00LjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZmFzY2VzPC9mb3JlaWduPiw8L3E+IGEgcHJpdmlsZWdlIG9mIHNlbmlvcml0eSB3aGljaCBoYXMgY29udGludWVkIGZyb20gdGhhdCBkYXkgdG8gdGhpcy4gQnV0IEx1Y3JldGl1cyBkaWVkIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgYW5kIGluIGEgbmV3IGVsZWN0aW9uIE1hcmN1cyBIb3JhdGl1cyB3YXMgY2hvc2VuIGNvbnN1bCwgYW5kIHNoYXJlZCB0aGUgb2ZmaWNlIHdpdGggUHVibGljb2xhIGZvciB0aGUgcmVtYWluZGVyIG9mIHRoZSB5ZWFyLgoJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFRhcnF1aW4gd2FzIHN0aXJyaW5nIHVwIGluIFR1c2NhbnkgYW5vdGhlciB3YXIgYWdhaW5zdCB0aGUgUm9tYW5zLCBhIHRoaW5nIG9mIGdyZWF0IHBvcnRlbnQgaXMgc2FpZCB0byBoYXZlIGhhcHBlbmVkLiBXaGVuIFRhcnF1aW4gd2FzIHN0aWxsIGtpbmcsIGFuZCBoYWQgYWxsIGJ1dCBjb21wbGV0ZWQgdGhlIHRlbXBsZSBvZiBKdXBpdGVyIENhcGl0b2xpbnVzLCBlaXRoZXIgaW4gY29uc2VxdWVuY2Ugb2YgYW4gb3JhY2xlLCBvciBlbHNlIG9mIGhpcyBvd24gZ29vZCBwbGVhc3VyZSwgaGUgY29tbWlzc2lvbmVkIGNlcnRhaW4gVHVzY2FuIGNyYWZ0c21lbiBvZiBWZWlpIHRvIHBsYWNlIHVwb24gaXRzIHJvb2YgYSBjaGFyaW90IG9mIHRlcnJhIGNvdHRhLiBTb29uIGFmdGVyIHRoaXMgaGUgd2FzIGRyaXZlbiBmcm9tIGhpcyB0aHJvbmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUdXNjYW5zLCBob3dldmVyLCBtb2RlbGxlZCB0aGUgY2hhcmlvdCBhbmQgcHV0IGl0IGluIGEgZnVybmFjZSBmb3IgZmlyaW5nLCBidXQgdGhlIGNsYXkgZGlkIG5vdCBjb250cmFjdCBhbmQgc2hyaW5rIGluIHRoZSBmaXJlLCBhcyBpdCB1c3VhbGx5IGRvZXMsIHdoZW4gaXRzIG1vaXN0dXJlIGV2YXBvcmF0ZXMuIEluc3RlYWQgb2YgdGhpcywgaXQgZXhwYW5kZWQgYW5kIHN3ZWxsZWQgYW5kIHRvb2sgb24gc3VjaCBzaXplLCBzdHJlbmd0aCwgYW5kIGhhcmRuZXNzLCB0aGF0IGl0IGNvdWxkIHdpdGggZGlmZmljdWx0eSBiZSByZW1vdmVkLCBldmVuIGFmdGVyIHRoZSByb29mIG9mIHRoZSBmdXJuYWNlIGhhZCBiZWVuIHRha2VuIG9mZiBhbmQgaXRzIHNpZGVzIHRvcm4gYXdheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIHNlZXJzLCBhY2NvcmRpbmdseSwgdGhpcyBzZWVtZWQgYSBkaXZpbmUgcG9ydGVudCBvZiBwcm9zcGVyaXR5IGFuZCBwb3dlciBmb3IgdGhvc2Ugd2hvIHNob3VsZCBwb3NzZXNzIHRoZSBjaGFyaW90LCBhbmQgdGhlIHBlb3BsZSBvZiBWZWlpIGRldGVybWluZWQgbm90IHRvIGdpdmUgaXQgdXAuIFdoZW4gdGhlIFJvbWFucyBhc2tlZCBmb3IgaXQsIHRoZXkgd2VyZSB0b2xkIHRoYXQgaXQgYmVsb25nZWQgdG8gdGhlIFRhcnF1aW5zLCBub3QgdG8gdGhvc2Ugd2hvIGhhZCBleHBlbGxlZCB0aGUgVGFycXVpbnMuIEJ1dCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgdGhlcmUgd2VyZSBjaGFyaW90IHJhY2VzIGF0IFZlaWkuIEhlcmUgdGhlIHVzdWFsIGV4Y2l0aW5nIHNwZWN0YWNsZXMgd2VyZSB3aXRuZXNzZWQsIGJ1dCB3aGVuIHRoZSBjaGFyaW90ZWVyLCB3aXRoIGhpcyBnYXJsYW5kIG9uIGhpcyBoZWFkLCB3YXMgcXVpZXRseSBkcml2aW5nIGhpcyB2aWN0b3Jpb3VzIGNoYXJpb3Qgb3V0IG9mIHRoZSByYWNlLWNvdXJzZSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+aGlzIGhvcnNlcyB0b29rIGEgc3VkZGVuIGZyaWdodCwgdXBvbiBubyBhcHBhcmVudCBvY2Nhc2lvbiwgYnV0IGVpdGhlciBieSBzb21lIGRpdmluZSBvcmRlcmluZyBvciBieSBtZXJlc3QgY2hhbmNlLCBhbmQgZGFzaGVkIG9mZiBhdCB0aGUgdG9wIG9mIHRoZWlyIHNwZWVkIHRvd2FyZHMgUm9tZSwgY2hhcmlvdGVlciBhbmQgYWxsLiBJdCB3YXMgb2Ygbm8gdXNlIGZvciBoaW0gdG8gcmVpbiB0aGVtIGluIG9yIHRyeSB0byBjYWxtIHRoZW0gd2l0aCBoaXMgdm9pY2U7IGhlIHdhcyB3aGlybGVkIGhlbHBsZXNzbHkgYWxvbmcgdW50aWwgdGhleSByZWFjaGVkIHRoZSBDYXBpdG9sIGFuZCB0aHJldyBoaW0gb3V0IHRoZXJlLCBhdCB0aGUgZ2F0ZSBub3cgY2FsbGVkIFJhdHVtZW5hLiBUaGUgVmVpZW50aW5lcyB3ZXJlIGFtYXplZCBhbmQgdGVycmlmaWVkIGF0IHRoaXMgb2NjdXJyZW5jZSwgYW5kIHBlcm1pdHRlZCB0aGUgd29ya21lbiB0byBkZWxpdmVyIHRoZWlyIGNoYXJpb3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgVGFycXVpbiB3YXMgc3RpcnJpbmcgdXAgaW4gVHVzY2FueSBhbm90aGVyIHdhciBhZ2FpbnN0IHRoZSBSb21hbnMsIGEgdGhpbmcgb2YgZ3JlYXQgcG9ydGVudCBpcyBzYWlkIHRvIGhhdmUgaGFwcGVuZWQuIFdoZW4gVGFycXVpbiB3YXMgc3RpbGwga2luZywgYW5kIGhhZCBhbGwgYnV0IGNvbXBsZXRlZCB0aGUgdGVtcGxlIG9mIEp1cGl0ZXIgQ2FwaXRvbGludXMsIGVpdGhlciBpbiBjb25zZXF1ZW5jZSBvZiBhbiBvcmFjbGUsIG9yIGVsc2Ugb2YgaGlzIG93biBnb29kIHBsZWFzdXJlLCBoZSBjb21taXNzaW9uZWQgY2VydGFpbiBUdXNjYW4gY3JhZnRzbWVuIG9mIFZlaWkgdG8gcGxhY2UgdXBvbiBpdHMgcm9vZiBhIGNoYXJpb3Qgb2YgdGVycmEgY290dGEuIFNvb24gYWZ0ZXIgdGhpcyBoZSB3YXMgZHJpdmVuIGZyb20gaGlzIHRocm9uZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUdXNjYW5zLCBob3dldmVyLCBtb2RlbGxlZCB0aGUgY2hhcmlvdCBhbmQgcHV0IGl0IGluIGEgZnVybmFjZSBmb3IgZmlyaW5nLCBidXQgdGhlIGNsYXkgZGlkIG5vdCBjb250cmFjdCBhbmQgc2hyaW5rIGluIHRoZSBmaXJlLCBhcyBpdCB1c3VhbGx5IGRvZXMsIHdoZW4gaXRzIG1vaXN0dXJlIGV2YXBvcmF0ZXMuIEluc3RlYWQgb2YgdGhpcywgaXQgZXhwYW5kZWQgYW5kIHN3ZWxsZWQgYW5kIHRvb2sgb24gc3VjaCBzaXplLCBzdHJlbmd0aCwgYW5kIGhhcmRuZXNzLCB0aGF0IGl0IGNvdWxkIHdpdGggZGlmZmljdWx0eSBiZSByZW1vdmVkLCBldmVuIGFmdGVyIHRoZSByb29mIG9mIHRoZSBmdXJuYWNlIGhhZCBiZWVuIHRha2VuIG9mZiBhbmQgaXRzIHNpZGVzIHRvcm4gYXdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBzZWVycywgYWNjb3JkaW5nbHksIHRoaXMgc2VlbWVkIGEgZGl2aW5lIHBvcnRlbnQgb2YgcHJvc3Blcml0eSBhbmQgcG93ZXIgZm9yIHRob3NlIHdobyBzaG91bGQgcG9zc2VzcyB0aGUgY2hhcmlvdCwgYW5kIHRoZSBwZW9wbGUgb2YgVmVpaSBkZXRlcm1pbmVkIG5vdCB0byBnaXZlIGl0IHVwLiBXaGVuIHRoZSBSb21hbnMgYXNrZWQgZm9yIGl0LCB0aGV5IHdlcmUgdG9sZCB0aGF0IGl0IGJlbG9uZ2VkIHRvIHRoZSBUYXJxdWlucywgbm90IHRvIHRob3NlIHdobyBoYWQgZXhwZWxsZWQgdGhlIFRhcnF1aW5zLiBCdXQgYSBmZXcgZGF5cyBhZnRlcndhcmRzIHRoZXJlIHdlcmUgY2hhcmlvdCByYWNlcyBhdCBWZWlpLiBIZXJlIHRoZSB1c3VhbCBleGNpdGluZyBzcGVjdGFjbGVzIHdlcmUgd2l0bmVzc2VkLCBidXQgd2hlbiB0aGUgY2hhcmlvdGVlciwgd2l0aCBoaXMgZ2FybGFuZCBvbiBoaXMgaGVhZCwgd2FzIHF1aWV0bHkgZHJpdmluZyBoaXMgdmljdG9yaW91cyBjaGFyaW90IG91dCBvZiB0aGUgcmFjZS1jb3Vyc2UsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhpcyBob3JzZXMgdG9vayBhIHN1ZGRlbiBmcmlnaHQsIHVwb24gbm8gYXBwYXJlbnQgb2NjYXNpb24sIGJ1dCBlaXRoZXIgYnkgc29tZSBkaXZpbmUgb3JkZXJpbmcgb3IgYnkgbWVyZXN0IGNoYW5jZSwgYW5kIGRhc2hlZCBvZmYgYXQgdGhlIHRvcCBvZiB0aGVpciBzcGVlZCB0b3dhcmRzIFJvbWUsIGNoYXJpb3RlZXIgYW5kIGFsbC4gSXQgd2FzIG9mIG5vIHVzZSBmb3IgaGltIHRvIHJlaW4gdGhlbSBpbiBvciB0cnkgdG8gY2FsbSB0aGVtIHdpdGggaGlzIHZvaWNlOyBoZSB3YXMgd2hpcmxlZCBoZWxwbGVzc2x5IGFsb25nIHVudGlsIHRoZXkgcmVhY2hlZCB0aGUgQ2FwaXRvbCBhbmQgdGhyZXcgaGltIG91dCB0aGVyZSwgYXQgdGhlIGdhdGUgbm93IGNhbGxlZCBSYXR1bWVuYS4gVGhlIFZlaWVudGluZXMgd2VyZSBhbWF6ZWQgYW5kIHRlcnJpZmllZCBhdCB0aGlzIG9jY3VycmVuY2UsIGFuZCBwZXJtaXR0ZWQgdGhlIHdvcmttZW4gdG8gZGVsaXZlciB0aGVpciBjaGFyaW90LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgdGVtcGxlIG9mIEp1cGl0ZXIgQ2FwaXRvbGludXMgaGFkIGJlZW4gdm93ZWQgYnkgVGFycXVpbiwgdGhlIHNvbiBvZiBEZW1hcmF0dXMsIHdoZW4gaGUgd2FzIGF0IHdhciB3aXRoIHRoZSBTYWJpbmVzLCBidXQgaXQgd2FzIGFjdHVhbGx5IGJ1aWx0IGJ5IFRhcnF1aW5pdXMgU3VwZXJidXMsIHRoZSBzb24sIG9yIGdyYW5kc29uLCBvZiBoaW0gd2hvIHZvd2VkIGl0LiBIZSBkaWQgbm90LCBob3dldmVyLCBnZXQgc28gZmFyIGFzIHRvIGNvbnNlY3JhdGUgaXQsIGJ1dCB3YXMgZHJpdmVuIG91dCBiZWZvcmUgaXQgd2FzIHF1aXRlIGNvbXBsZXRlZC4gQWNjb3JkaW5nbHksIG5vdyB0aGF0IGl0IHdhcyBjb21wbGV0ZWx5IGZpbmlzaGVkIGFuZCBoYWQgcmVjZWl2ZWQgYWxsIHRpbWUgb3JuYW1lbnRzIHRoYXQgYmVsb25nZWQgdG8gaXQsIFB1YmxpY29sYSB3YXMgYW1iaXRpb3VzIHRvIGNvbnNlY3JhdGUgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGV4Y2l0ZWQgdGhlIGplYWxvdXN5IG9mIG1hbnkgb2YgdGhlIG5vYmlsaXR5LiBUaGV5IGNvdWxkIGJldHRlciBicm9vayBoaXMgb3RoZXIgaG9ub3VycywgdG8gd2hpY2gsIGFzIGxlZ2lzbGF0b3IgYW5kIG1pbGl0YXJ5IGNvbW1hbmRlciwgaGUgaGFkIGEgcmlnaHRmdWwgY2xhaW0uIEJ1dCB0aGlzIG9uZSB0aGV5IHRob3VnaHQgaGUgb3VnaHQgbm90IHRvIGhhdmUsIHNpbmNlIGl0IHdhcyBtb3JlIGFwcHJvcHJpYXRlIGZvciBvdGhlcnMsIGFuZCB0aGVyZWZvcmUgdGhleSBlbmNvdXJhZ2VkIGFuZCBpbmNpdGVkIEhvcmF0aXVzIHRvIGNsYWltIHRoZSBwcml2aWxlZ2UgdG8gY29uc2VjcmF0aW5nIHRoZSB0ZW1wbGUuIEF0IGEgdGltZSwgdGhlbiwgd2hlbiBQdWJsaWNvbGEgd2FzIG5lY2Vzc2FyaWx5IGFic2VudCBvbiBtaWxpdGFyeSBzZXJ2aWNlLCB0aGV5IGdvdCBhIHZvdGUgcGFzc2VkIHRoYXQgSG9yYXRpdXMgc2hvdWxkIHBlcmZvcm0gdGhlIGNvbnNlY3JhdGlvbiwgYW5kIGNvbmR1Y3RlZCBoaW0gdXAgdG8gdGhlIENhcGl0b2wsIGZlZWxpbmcgdGhhdCB0aGV5IGNvdWxkIG5vdCBoYXZlIGdhaW5lZCB0aGVpciBwb2ludCBoYWQgUHVibGljb2xhIGJlZW4gaW4gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IFB1YmxpY29sYSB3YXMgZGVzaWduYXRlZCBieSBsb3QsIGFnYWluc3QgaGlzIGluY2xpbmF0aW9uLCBmb3IgdGhlIGV4cGVkaXRpb24sIGFuZCBIb3JhdGl1cyBmb3IgdGhlIGNvbnNlY3JhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi44LjYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA4LCA2LTguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBpdCBpcyBwb3NzaWJsZSB0byBpbmZlciBob3cgdGhlIG1hdHRlciBzdG9vZCBiZXR3ZWVuIHRoZW0gZnJvbSB3aGF0IGhhcHBlbmVkIGF0IHRoZSBjb25zZWNyYXRpb24uIEl0IHdhcyB0aGUgSWRlcyBvZiBTZXB0ZW1iZXIsIGEgZGF5IHdoaWNoIG5lYXJseSBjb2luY2lkZXMgd2l0aCB0aGUgZnVsbCBtb29uIG9mIHRoZSBBdHRpYyBtb250aCBNZXRhZ2VpdG5pb247IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBwZW9wbGUgd2VyZSBhbGwgYXNzZW1ibGVkIG9uIHRoZSBDYXBpdG9sLCBzaWxlbmNlIGhhZCBiZWVuIHByb2NsYWltZWQsIGFuZCBIb3JhdGl1cywgYWZ0ZXIgcGVyZm9ybWluZyB0aGUgb3RoZXIgY2VyZW1vbmllcyBhbmQgbGF5aW5nIGhvbGQgdXBvbiB0aGUgZG9vciBvZiB0aGUgdGVtcGxlLCBhcyB0aGUgY3VzdG9tIGlzLCB3YXMgcHJvbm91bmNpbmcgdGhlIHVzdWFsIHdvcmRzIG9mIGNvbnNlY3JhdGlvbi4gQnV0IGp1c3QgdGhlbiBNYXJjdXMsIHRoZSBicm90aGVyIG9mIFB1YmxpY29sYSwgd2hvIGhhZCBsb25nIGJlZW4gc3RhbmRpbmcgYnkgdGhlIGRvb3IgYW5kIHdhcyB3YXRjaGluZyBoaXMgb3Bwb3J0dW5pdHksIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBDb25zdWwsIHRoeSBzb24gbGllcyBkZWFkIG9mIHNpY2tuZXNzIGluIHRoZSBjYW1wLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGRpc3RyZXNzZWQgYWxsIHdobyBoZWFyZCBpdDsgQnV0IEhvcmF0aXVzLCBub3QgYXQgYWxsIGRpc3R1cmJlZCwgbWVyZWx5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FzdCBmb3J0aCB0aGUgZGVhZCB0aGVuIHdoaXRoZXIgeWUgcGxlYXNlLCBmb3IgSSB0YWtlIG5vIG1vdXJuaW5nIHVwb24gbWUsPC9xPiBhbmQgZmluaXNoZWQgaGlzIGNvbnNlY3JhdGlvbi4gTm93IHRoZSBhbm5vdW5jZW1lbnQgd2FzIG5vdCB0cnVlLCBidXQgTWFyY3VzIHRob3VnaHQgYnkgaGlzIGZhbHNlaG9vZCB0byBkZXRlciBIb3JhdGl1cyBmcm9tIGhpcyBkdXR5LiBXb25kZXJmdWwsIHRoZXJlZm9yZSwgd2FzIHRoZSBmaXJtIHBvaXNlIG9mIHRoZSBtYW4sIHdoZXRoZXIgaGUgYXQgb25jZSBzYXcgdGhyb3VnaCB0aGUgZGVjZWl0LCBvciBiZWxpZXZlZCB0aGUgc3Rvcnkgd2l0aG91dCBsZXR0aW5nIGl0IG92ZXJjb21lIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi44LjYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA4LCA2LTguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRlbXBsZSBvZiBKdXBpdGVyIENhcGl0b2xpbnVzIGhhZCBiZWVuIHZvd2VkIGJ5IFRhcnF1aW4sIHRoZSBzb24gb2YgRGVtYXJhdHVzLCB3aGVuIGhlIHdhcyBhdCB3YXIgd2l0aCB0aGUgU2FiaW5lcywgYnV0IGl0IHdhcyBhY3R1YWxseSBidWlsdCBieSBUYXJxdWluaXVzIFN1cGVyYnVzLCB0aGUgc29uLCBvciBncmFuZHNvbiwgb2YgaGltIHdobyB2b3dlZCBpdC4gSGUgZGlkIG5vdCwgaG93ZXZlciwgZ2V0IHNvIGZhciBhcyB0byBjb25zZWNyYXRlIGl0LCBidXQgd2FzIGRyaXZlbiBvdXQgYmVmb3JlIGl0IHdhcyBxdWl0ZSBjb21wbGV0ZWQuIEFjY29yZGluZ2x5LCBub3cgdGhhdCBpdCB3YXMgY29tcGxldGVseSBmaW5pc2hlZCBhbmQgaGFkIHJlY2VpdmVkIGFsbCB0aW1lIG9ybmFtZW50cyB0aGF0IGJlbG9uZ2VkIHRvIGl0LCBQdWJsaWNvbGEgd2FzIGFtYml0aW91cyB0byBjb25zZWNyYXRlIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGV4Y2l0ZWQgdGhlIGplYWxvdXN5IG9mIG1hbnkgb2YgdGhlIG5vYmlsaXR5LiBUaGV5IGNvdWxkIGJldHRlciBicm9vayBoaXMgb3RoZXIgaG9ub3VycywgdG8gd2hpY2gsIGFzIGxlZ2lzbGF0b3IgYW5kIG1pbGl0YXJ5IGNvbW1hbmRlciwgaGUgaGFkIGEgcmlnaHRmdWwgY2xhaW0uIEJ1dCB0aGlzIG9uZSB0aGV5IHRob3VnaHQgaGUgb3VnaHQgbm90IHRvIGhhdmUsIHNpbmNlIGl0IHdhcyBtb3JlIGFwcHJvcHJpYXRlIGZvciBvdGhlcnMsIGFuZCB0aGVyZWZvcmUgdGhleSBlbmNvdXJhZ2VkIGFuZCBpbmNpdGVkIEhvcmF0aXVzIHRvIGNsYWltIHRoZSBwcml2aWxlZ2UgdG8gY29uc2VjcmF0aW5nIHRoZSB0ZW1wbGUuIEF0IGEgdGltZSwgdGhlbiwgd2hlbiBQdWJsaWNvbGEgd2FzIG5lY2Vzc2FyaWx5IGFic2VudCBvbiBtaWxpdGFyeSBzZXJ2aWNlLCB0aGV5IGdvdCBhIHZvdGUgcGFzc2VkIHRoYXQgSG9yYXRpdXMgc2hvdWxkIHBlcmZvcm0gdGhlIGNvbnNlY3JhdGlvbiwgYW5kIGNvbmR1Y3RlZCBoaW0gdXAgdG8gdGhlIENhcGl0b2wsIGZlZWxpbmcgdGhhdCB0aGV5IGNvdWxkIG5vdCBoYXZlIGdhaW5lZCB0aGVpciBwb2ludCBoYWQgUHVibGljb2xhIGJlZW4gaW4gdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IFB1YmxpY29sYSB3YXMgZGVzaWduYXRlZCBieSBsb3QsIGFnYWluc3QgaGlzIGluY2xpbmF0aW9uLCBmb3IgdGhlIGV4cGVkaXRpb24sIGFuZCBIb3JhdGl1cyBmb3IgdGhlIGNvbnNlY3JhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuOC42IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gOCwgNi04LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgaXQgaXMgcG9zc2libGUgdG8gaW5mZXIgaG93IHRoZSBtYXR0ZXIgc3Rvb2QgYmV0d2VlbiB0aGVtIGZyb20gd2hhdCBoYXBwZW5lZCBhdCB0aGUgY29uc2VjcmF0aW9uLiBJdCB3YXMgdGhlIElkZXMgb2YgU2VwdGVtYmVyLCBhIGRheSB3aGljaCBuZWFybHkgY29pbmNpZGVzIHdpdGggdGhlIGZ1bGwgbW9vbiBvZiB0aGUgQXR0aWMgbW9udGggTWV0YWdlaXRuaW9uOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi44LjYiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiA4LCA2LTguPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBwZW9wbGUgd2VyZSBhbGwgYXNzZW1ibGVkIG9uIHRoZSBDYXBpdG9sLCBzaWxlbmNlIGhhZCBiZWVuIHByb2NsYWltZWQsIGFuZCBIb3JhdGl1cywgYWZ0ZXIgcGVyZm9ybWluZyB0aGUgb3RoZXIgY2VyZW1vbmllcyBhbmQgbGF5aW5nIGhvbGQgdXBvbiB0aGUgZG9vciBvZiB0aGUgdGVtcGxlLCBhcyB0aGUgY3VzdG9tIGlzLCB3YXMgcHJvbm91bmNpbmcgdGhlIHVzdWFsIHdvcmRzIG9mIGNvbnNlY3JhdGlvbi4gQnV0IGp1c3QgdGhlbiBNYXJjdXMsIHRoZSBicm90aGVyIG9mIFB1YmxpY29sYSwgd2hvIGhhZCBsb25nIGJlZW4gc3RhbmRpbmcgYnkgdGhlIGRvb3IgYW5kIHdhcyB3YXRjaGluZyBoaXMgb3Bwb3J0dW5pdHksIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENvbnN1bCwgdGh5IHNvbiBsaWVzIGRlYWQgb2Ygc2lja25lc3MgaW4gdGhlIGNhbXAuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGlzdHJlc3NlZCBhbGwgd2hvIGhlYXJkIGl0OyBCdXQgSG9yYXRpdXMsIG5vdCBhdCBhbGwgZGlzdHVyYmVkLCBtZXJlbHkgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhc3QgZm9ydGggdGhlIGRlYWQgdGhlbiB3aGl0aGVyIHllIHBsZWFzZSwgZm9yIEkgdGFrZSBubyBtb3VybmluZyB1cG9uIG1lLDwvcT4gYW5kIGZpbmlzaGVkIGhpcyBjb25zZWNyYXRpb24uIE5vdyB0aGUgYW5ub3VuY2VtZW50IHdhcyBub3QgdHJ1ZSwgYnV0IE1hcmN1cyB0aG91Z2h0IGJ5IGhpcyBmYWxzZWhvb2QgdG8gZGV0ZXIgSG9yYXRpdXMgZnJvbSBoaXMgZHV0eS4gV29uZGVyZnVsLCB0aGVyZWZvcmUsIHdhcyB0aGUgZmlybSBwb2lzZSBvZiB0aGUgbWFuLCB3aGV0aGVyIGhlIGF0IG9uY2Ugc2F3IHRocm91Z2ggdGhlIGRlY2VpdCwgb3IgYmVsaWV2ZWQgdGhlIHN0b3J5IHdpdGhvdXQgbGV0dGluZyBpdCBvdmVyY29tZSBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjguNiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDgsIDYtOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjguNiIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDgsIDYtOC48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPiBYVi4gQSBzaW1pbGFyIGZvcnR1bmUgc2VlbXMgdG8gaGF2ZSBhdHRlbmRlZCB0aGUgZGVkaWNhdGlvbiBvZiB0aGUgc2Vjb25kIHRlbXBsZS4gVGhlIGZpcnN0LCBhcyBJIGhhdmUgc2FpZCwgd2FzIGJ1aWx0IGJ5IFRhcnF1aW4sIGJ1dCBjb25zZWNyYXRlZCBieSBIb3JhdGl1czsgdGhpcyB3YXMgZGVzdHJveWVkIGJ5IGZpcmUgZHVyaW5nIHRoZSBjaXZpbCB3YXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjgzIEIuQy48L25vdGU+IFRoZSBzZWNvbmQgdGVtcGxlIHdhcyBidWlsdCBieSBTdWxsYSwgYnV0IENhdHVsdXMgd2FzIGNvbW1pc3Npb25lZCB0byBjb25zZWNyYXRlIGl0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY5IEIuQy48L25vdGU+IGFmdGVyIHRoZSBkZWF0aCBvZiBTdWxsYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0ZW1wbGUsIHRvbyB3YXMgZGVzdHJveWVkLCBkdXJpbmcgdGhlIHRyb3VibG91cyB0aW1lcyBvZiBWaXRlbGxpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjkgQS5ELjwvbm90ZT4gYW5kIFZlc3Bhc2lhbiBiZWdhbiBhbmQgY29tcGxldGVseSBmaW5pc2hlZCB0aGUgdGhpcmQsIHdpdGggdGhlIGdvb2QgZm9ydHVuZSB0aGF0IGF0dGVuZGVkIGhpbSBpbiBhbGwgaGlzIHVuZGVydGFraW5ncy4gSGUgbGl2ZWQgdG8gc2VlIGl0IGNvbXBsZXRlZCwgYW5kIGRpZCBub3QgbGl2ZSB0byBzZWUgaXQgZGVzdHJveWVkLCBhcyBpdCB3YXMgc29vbiBhZnRlcjsgYW5kIGluIGR5aW5nIGJlZm9yZSBoaXMgd29yayB3YXMgZGVzdHJveWVkIGhlIHdhcyBqdXN0IHNvIG11Y2ggbW9yZSBmb3J0dW5hdGUgdGhhbiBTdWxsYSwgd2hvIGRpZWQgYmVmb3JlIGhpcyB3YXMgY29uc2VjcmF0ZWQuIEZvciB1cG9uIHRpbWUgZGVhdGggb2YgVmVzcGFzaWFuIHRoZSBDYXBpdG9sIHdhcyBidXJuZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODAgQS5ELjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhWLiBBIHNpbWlsYXIgZm9ydHVuZSBzZWVtcyB0byBoYXZlIGF0dGVuZGVkIHRoZSBkZWRpY2F0aW9uIG9mIHRoZSBzZWNvbmQgdGVtcGxlLiBUaGUgZmlyc3QsIGFzIEkgaGF2ZSBzYWlkLCB3YXMgYnVpbHQgYnkgVGFycXVpbiwgYnV0IGNvbnNlY3JhdGVkIGJ5IEhvcmF0aXVzOyB0aGlzIHdhcyBkZXN0cm95ZWQgYnkgZmlyZSBkdXJpbmcgdGhlIGNpdmlsIHdhcnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44MyBCLkMuPC9ub3RlPiBUaGUgc2Vjb25kIHRlbXBsZSB3YXMgYnVpbHQgYnkgU3VsbGEsIGJ1dCBDYXR1bHVzIHdhcyBjb21taXNzaW9uZWQgdG8gY29uc2VjcmF0ZSBpdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY5IEIuQy48L25vdGU+IGFmdGVyIHRoZSBkZWF0aCBvZiBTdWxsYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdGVtcGxlLCB0b28gd2FzIGRlc3Ryb3llZCwgZHVyaW5nIHRoZSB0cm91YmxvdXMgdGltZXMgb2YgVml0ZWxsaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjkgQS5ELjwvbm90ZT4gYW5kIFZlc3Bhc2lhbiBiZWdhbiBhbmQgY29tcGxldGVseSBmaW5pc2hlZCB0aGUgdGhpcmQsIHdpdGggdGhlIGdvb2QgZm9ydHVuZSB0aGF0IGF0dGVuZGVkIGhpbSBpbiBhbGwgaGlzIHVuZGVydGFraW5ncy4gSGUgbGl2ZWQgdG8gc2VlIGl0IGNvbXBsZXRlZCwgYW5kIGRpZCBub3QgbGl2ZSB0byBzZWUgaXQgZGVzdHJveWVkLCBhcyBpdCB3YXMgc29vbiBhZnRlcjsgYW5kIGluIGR5aW5nIGJlZm9yZSBoaXMgd29yayB3YXMgZGVzdHJveWVkIGhlIHdhcyBqdXN0IHNvIG11Y2ggbW9yZSBmb3J0dW5hdGUgdGhhbiBTdWxsYSwgd2hvIGRpZWQgYmVmb3JlIGhpcyB3YXMgY29uc2VjcmF0ZWQuIEZvciB1cG9uIHRpbWUgZGVhdGggb2YgVmVzcGFzaWFuIHRoZSBDYXBpdG9sIHdhcyBidXJuZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44MCBBLkQuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZm91cnRoIHRlbXBsZSwgd2hpY2ggaXMgbm93IHN0YW5kaW5nIG9uIHRoZSBzYW1lIHNpdGUgYXMgdGhlIG90aGVycywgd2FzIGJvdGggY29tcGxldGVkIGFuZCBjb25zZWNyYXRlZCBieSBEb21pdGlhbi4gSXQgaXMgc2FpZCB0aGF0IFRhcnF1aW4gZXhwZW5kZWQgdXBvbiBpdHMgZm91bmRhdGlvbnMgZm9ydHkgdGhvdXNhbmQgcG91bmRzIG9mIHNpbHZlci4gQnV0IHRpbWUgZ3JlYXRlc3Qgd2VhbHRoIG5vdyBhdHRyaWJ1dGVkIHRvIGFueSBwcml2YXRlIGNpdGl6ZW4gb2YgUm9tZSB3b3VsZCBub3QgcGF5IHRoZSBjb3N0IG9mIHRoZSBnaWxkaW5nIGFsb25lIG9mIHRoZSBwcmVzZW50IHRlbXBsZSwgd2hpY2ggd2FzIG1vcmUgdGhhbiB0d2VsdmUgdGhvdXNhbmQgdGFsZW50cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgcHVycG9zZXMgb2YgY29tcGFyaXNvbiBhIHRhbGVudCBtYXkgYmUgcmVja29uZWQgYXMgd29ydGggwqMyNTAsIG9yICQxMjAwLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdHMgcGlsbGFycyBhcmUgb2YgUGVudGVsaWMgbWFyYmxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBlbnRlbMOpIHdhcyBhbiBBdHRpYyBkZW1lIG9uIHRoZSBOLkUuIGVkZ2Ugb2YgdGhlIEF0aGVuaWFuIHBsYWluLCBuZWFyIHdoaWNoIGV4Y2VsbGVudCBtYXJibGUgd2FzIHF1YXJyaWVkIGZyb20gdGhlIG1vdW50YWluLiBUaGlzIHdhcyBjYWxsZWQgQnJpbGVzc3VzIGluIGVhcmxpZXIgdGltZXMsIHRoZW4gUGVudGVsaWN1cy48L25vdGU+IGFuZCB0aGVpciB0aGlja25lc3Mgd2FzIG9uY2UgbW9zdCBoYXBwaWx5IHByb3BvcnRpb25lZCB0byB0aGVpciBsZW5ndGg7IGZvciB3ZSBzYXcgdGhlbSBhdCBBdGhlbnMuIEJ1dCB3aGVuIHRoZXkgd2VyZSByZWN1dCBhbmQgc2NyYXBlZCBhdCBSb21lLCB0aGV5IGRpZCBub3QgZ2FpbiBhcyBtdWNoIGluIHBvbGlzaCBhcyB0aGV5IGxvc3QgaW4gc3ltbWV0cnkgYW5kIGJlYXV0eSwgYW5kIHRoZXkgbm93IGxvb2sgdG9vIHNsZW5kZXIgYW5kIHRoaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIGFueW9uZSB3aG8gaXMgYW1hemVkIGF0IHRoZSBjb3N0bGluZXNzIG9mIHRoZSBDYXBpdG9sIGhhZCBzZWVuIGEgc2luZ2xlIGNvbG9ubmFkZSBpbiB0aGUgcGFsYWNlIG9mIERvbWl0aWFuLCBvciBhIGJhc2lsaWNhIG9yIGEgYmF0aCwgb3IgdGhlIGFwYXJ0bWVudHMgZm9yIGhpcyBjb25jdWJpbmVzLCB0aGVuLCBhcyBFcGljaGFybXVzIHNheXMgdG8gdGhlIHNwZW5kdGhyaWZ0LAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD4nVGlzIG5vdCBiZW5lZmljZW50IHRob3UgYXJ0OyB0aG91IGFydCBkaXNlYXNlZDsgdGh5IG1hbmlhIGlzIHRvIGdpdmUsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPnNvIGhlIHdvdWxkIGhhdmUgYmVlbiBtb3ZlZCB0byBzYXkgdG8gRG9taXRpYW46IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+J1RpcyBub3QgcGlvdXMsIG5vciBub2JseSBhbWJpdGlvdXMgdGhhdCB0aG91IGFydDsgdGhvdSBhcnQgZGlzZWFzZWQ7IHRoeSBtYW5pYSBpcyB0byBidWlsZDsgbGlrZSB0aGUgZmFtb3VzIE1pZGFzLCB0aG91IGRlc2lyZXN0IHRoYXQgZXZlcnkgdGhpbmcgYmVjb21lIGdvbGQgYW5kIHN0b25lIGF0IHRoeSB0b3VjaC48L3E+IFNvIG11Y2gsIHRoZW4sIG9uIHRoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb3VydGggdGVtcGxlLCB3aGljaCBpcyBub3cgc3RhbmRpbmcgb24gdGhlIHNhbWUgc2l0ZSBhcyB0aGUgb3RoZXJzLCB3YXMgYm90aCBjb21wbGV0ZWQgYW5kIGNvbnNlY3JhdGVkIGJ5IERvbWl0aWFuLiBJdCBpcyBzYWlkIHRoYXQgVGFycXVpbiBleHBlbmRlZCB1cG9uIGl0cyBmb3VuZGF0aW9ucyBmb3J0eSB0aG91c2FuZCBwb3VuZHMgb2Ygc2lsdmVyLiBCdXQgdGltZSBncmVhdGVzdCB3ZWFsdGggbm93IGF0dHJpYnV0ZWQgdG8gYW55IHByaXZhdGUgY2l0aXplbiBvZiBSb21lIHdvdWxkIG5vdCBwYXkgdGhlIGNvc3Qgb2YgdGhlIGdpbGRpbmcgYWxvbmUgb2YgdGhlIHByZXNlbnQgdGVtcGxlLCB3aGljaCB3YXMgbW9yZSB0aGFuIHR3ZWx2ZSB0aG91c2FuZCB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHB1cnBvc2VzIG9mIGNvbXBhcmlzb24gYSB0YWxlbnQgbWF5IGJlIHJlY2tvbmVkIGFzIHdvcnRoIMKjMjUwLCBvciAkMTIwMC48L25vdGU+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0cyBwaWxsYXJzIGFyZSBvZiBQZW50ZWxpYyBtYXJibGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZW50ZWzDqSB3YXMgYW4gQXR0aWMgZGVtZSBvbiB0aGUgTi5FLiBlZGdlIG9mIHRoZSBBdGhlbmlhbiBwbGFpbiwgbmVhciB3aGljaCBleGNlbGxlbnQgbWFyYmxlIHdhcyBxdWFycmllZCBmcm9tIHRoZSBtb3VudGFpbi4gVGhpcyB3YXMgY2FsbGVkIEJyaWxlc3N1cyBpbiBlYXJsaWVyIHRpbWVzLCB0aGVuIFBlbnRlbGljdXMuPC9ub3RlPiBhbmQgdGhlaXIgdGhpY2tuZXNzIHdhcyBvbmNlIG1vc3QgaGFwcGlseSBwcm9wb3J0aW9uZWQgdG8gdGhlaXIgbGVuZ3RoOyBmb3Igd2Ugc2F3IHRoZW0gYXQgQXRoZW5zLiBCdXQgd2hlbiB0aGV5IHdlcmUgcmVjdXQgYW5kIHNjcmFwZWQgYXQgUm9tZSwgdGhleSBkaWQgbm90IGdhaW4gYXMgbXVjaCBpbiBwb2xpc2ggYXMgdGhleSBsb3N0IGluIHN5bW1ldHJ5IGFuZCBiZWF1dHksIGFuZCB0aGV5IG5vdyBsb29rIHRvbyBzbGVuZGVyIGFuZCB0aGluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIGFueW9uZSB3aG8gaXMgYW1hemVkIGF0IHRoZSBjb3N0bGluZXNzIG9mIHRoZSBDYXBpdG9sIGhhZCBzZWVuIGEgc2luZ2xlIGNvbG9ubmFkZSBpbiB0aGUgcGFsYWNlIG9mIERvbWl0aWFuLCBvciBhIGJhc2lsaWNhIG9yIGEgYmF0aCwgb3IgdGhlIGFwYXJ0bWVudHMgZm9yIGhpcyBjb25jdWJpbmVzLCB0aGVuLCBhcyBFcGljaGFybXVzIHNheXMgdG8gdGhlIHNwZW5kdGhyaWZ0LAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+J1RpcyBub3QgYmVuZWZpY2VudCB0aG91IGFydDsgdGhvdSBhcnQgZGlzZWFzZWQ7IHRoeSBtYW5pYSBpcyB0byBnaXZlLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT5zbyBoZSB3b3VsZCBoYXZlIGJlZW4gbW92ZWQgdG8gc2F5IHRvIERvbWl0aWFuOiAKCQkJCTxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+J1RpcyBub3QgYmVuZWZpY2VudCB0aG91IGFydDsgdGhvdSBhcnQgZGlzZWFzZWQ7IHRoeSBtYW5pYSBpcyB0byBnaXZlLDwvbD4KCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4nVGlzIG5vdCBwaW91cywgbm9yIG5vYmx5IGFtYml0aW91cyB0aGF0IHRob3UgYXJ0OyB0aG91IGFydCBkaXNlYXNlZDsgdGh5IG1hbmlhIGlzIHRvIGJ1aWxkOyBsaWtlIHRoZSBmYW1vdXMgTWlkYXMsIHRob3UgZGVzaXJlc3QgdGhhdCBldmVyeSB0aGluZyBiZWNvbWUgZ29sZCBhbmQgc3RvbmUgYXQgdGh5IHRvdWNoLjwvcT4gU28gbXVjaCwgdGhlbiwgb24gdGhpcyBoZWFkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gcmV0dXJuIHRvIFRhcnF1aW4sIGFmdGVyIHRoZSBncmVhdCBiYXR0bGUgaW4gd2hpY2ggaGUgbG9zdCBoaXMgc29uIGluIGEgZHVlbCB3aXRoIEJydXR1cywgaGUgZmxlZCBmb3IgcmVmdWdlIHRvIENsdXNpdW0sIGFuZCBiZWNhbWUgYSBzdXBwbGlhbnQgb2YgTGFycyBQb3JzZW5hLCB0aGUgbW9zdCBwb3dlcmZ1bCBraW5nIGluIEl0YWx5LCB3aG8gd2FzIHRob3VnaHQgYWxzbyB0byBiZSBhIG1hbiBvZiB3b3J0aCBhbmQgbm9ibGUgYW1iaXRpb25zLiBIZSBwcm9taXNlZCBUYXJxdWluIGhpcyBhaWQgYW5kIGFzc2lzdGFuY2UuIFNvIGluIHRoZSBmaXJzdCBwbGFjZSBoZSBzZW50IHRvIFJvbWUgYW5kIG9yZGVyZWQgdGhlbSB0byByZWNlaXZlIFRhcnF1aW4gYXMgdGhlaXIga2luZy4gVGhlbiB3aGVuIHRoZSBSb21hbnMgcmVmdXNlZCwgaGUgZGVjbGFyZWQgd2FyIHVwb24gdGhlbSwgcHJvY2xhaW1lZCB0aGUgdGltZSBhbmQgcGxhY2Ugb2YgaGlzIGF0dGFjaywgYW5kIG1hcmNoZWQgdGhpdGhlciB3aXRoIGEgZ3JlYXQgZm9yY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuOSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+UHVibGljb2xhIHdhcyBjaG9zZW4gY29uc3VsIGZvciB0aGUgc2Vjb25kIHRpbWUsIGluIGhpcyBhYnNlbmNlLCBhbmQgVGl0dXMgTHVjcmV0aXVzIGFzIGhpcyBjb2xsZWFndWUuIFJldHVybmluZywgdGhlcmVmb3JlLCB0byBSb21lLCBhbmQgd2lzaGluZywgaW4gdGhlIGZpcnN0IHBsYWNlLCB0byBzdXJwYXNzIFBvcnNlbmEgaW4gdGhlIGxvZnRpbmVzcyBvZiBoaXMgc3Bpcml0LCBoZSBidWlsdCB0aGUgY2l0eSBvZiBTaWdsaXVyaWEsIGFsdGhvdWdoIGhpcyBhZHZlcnNhcnkgd2FzIGFscmVhZHkgbmVhciBhdCBoYW5kLiBBZnRlciBoZSBoYWQgZm9ydGlmaWVkIGl0IGF0IGdyZWF0IGV4cGVuc2UsIGhlIHNlbnQgdG8gaXQgYSBjb2xvbnkgb2Ygc2V2ZW4gaHVuZHJlZCBtZW4sIGluZGljYXRpbmcgdGhhdCBoZSBoYWQgbm8gY29uY2VybiBvciBmZWFyIGFib3V0IHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGEgc2hhcnAgYXNzYXVsdCB3YXMgbWFkZSB1cG9uIGl0cyB3YWxsIGJ5IFBvcnNlbmEsIGFuZCBpdHMgZ2Fycmlzb24gd2FzIGRyaXZlbiBvdXQuIFRoZXkgZmxlZCB0byBSb21lLCB3aGVyZSB0aGUgcHVyc3VpbmcgZW5lbXkgYWxtb3N0IGZvbGxvd2VkIHRoZW0gaW50byB0aGUgY2l0eS4gQnV0IFB1YmxpY29sYSBwcm9tcHRseSBzYWxsaWVkIG91dCB0byB0aGVpciBhaWQgaW4gZnJvbnQgb2YgdGhlIGdhdGUsIGpvaW5lZCBiYXR0bGUgYnkgdGhlIHJpdmVyIHNpZGUgd2l0aCB0aGUgZW5lbXksIHdobyBwcmVzc2VkIG9uIGluIGdyZWF0IG51bWJlcnMsIGFuZCBoZWxkIG91dCBhZ2FpbnN0IHRoZW0gdW50aWwgaGUgd2FzIGRlc3BlcmF0ZWx5IHdvdW5kZWQgYW5kIGNhcnJpZWQgYm9kaWx5IG91dCBvZiB0aGUgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2FtZSBmYXRlIG92ZXJ0b29rIEx1Y3JldGl1cywgaGlzIGNvbGxlYWd1ZSwgYWxzbywgc28gdGhhdCBkaXNtYXkgZmVsbCB1cG9uIHRoZSBSb21hbnMsIGFuZCB0aGV5IGZsZWQgZm9yIHNhZmV0eSB0b3dhcmRzIHRoZSBjaXR5LiBCdXQgYXMgdGhlIGVuZW15IHdlcmUgZm9yY2luZyB0aGVpciB3YXkgb250byB0aGUgd29vZGVuIGJyaWRnZSwgUm9tZSB3YXMgaW4gZGFuZ2VyIG9mIGJlaW5nIHRha2VuIGJ5IHN0b3JtLiBIb3JhdGl1cyBDb2NsZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGV4cGxvaXQgb2YgSG9yYXRpdXMgaXMgbXVjaCBtb3JlIGRyYW1hdGljYWxseSBuYXJyYXRlZCBieSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjEwIiB2YWxpZD0ieWVzIj5MaXZ5IChpaS4gMTApLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBob3dldmVyLCBmaXJzdCwgYW5kIHdpdGggaGltIHR3byBvZiB0aGUgbW9zdCBpbGx1c3RyaW91cyBtZW4gb2YgdGhlIGNpdHksIEhlcm1pbml1cyBhbmQgTGFydGl1cywgZGVmZW5kZWQgdGhlIHdvb2RlbiBicmlkZ2UgYWdhaW5zdCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3JhdGl1cyBoYWQgYmVlbiBnaXZlbiBoaXMgc3VybmFtZSBvZiBDb2NsZXMgYmVjYXVzZSBoZSBoYWQgbG9zdCBvbmUgb2YgaGlzIGV5ZXMgaW4gdGhlIHdhcnMuIFNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGhpcyBub3NlIHdhcyBmbGF0IGFuZCBzdW5rZW4sIHNvIHRoYXQgdGhlcmUgd2FzIG5vdGhpbmcgdG8gc2VwYXJhdGUgaGlzIGV5ZXMsIGFuZCBoaXMgZXllLWJyb3dzIHJhbiB0b2dldGhlciwgYW5kIHRoYXQgZm9yIHRoaXMgcmVhc29uIHRoZSBtdWx0aXR1ZGUgd2lzaGVkIHRvIGNhbGwgaGltIEN5Y2xvcHMsIGJ1dCBieSBhIHNsaXAgb2YgdGhlIHRvbmd1ZSB0aGUgbmFtZSBvZiBDb2NsZXMgYmVjYW1lIGdlbmVyYWxseSBwcmV2YWxlbnQgaW5zdGVhZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBDb2NsZXMsIHN0YW5kaW5nIGF0IHRoZSBoZWFkIG9mIHRoZSBicmlkZ2UsIGtlcHQgdGhlIGVuZW15IGJhY2sgdW50aWwgaGlzIGNvbXBhbmlvbnMgaGFkIGN1dCB0aGUgYnJpZGdlIGluIHR3byBiZWhpbmQgaGltLiBUaGVuLCBhbGwgYWNjb3V0cmVkIGFzIGhlIHdhcywgaGUgcGx1bmdlZCBpbnRvIHRoZSByaXZlciBhbmQgc3dhbSBhY3Jvc3MgdG8gdGhlIG90aGVyIHNpZGUsIGluIHNwaXRlIG9mIGEgd291bmQgaW4gdGhlIGJ1dHRvY2tzIGZyb20gYSBUdXNjYW4gc3BlYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSwgb3V0IG9mIGFkbWlyYXRpb24gZm9yIGhpcyB2YWxvdXIsIHByb3Bvc2VkIHRoYXQgZXZlcnkgUm9tYW4gc2hvdWxkIGF0IG9uY2UgY29udHJpYnV0ZSBmb3IgaGltIGFzIG11Y2ggcHJvdmlzaW9uIGFzIGVhY2ggY29uc3VtZWQgaW4gYSBkYXksIGFuZCB0aGF0IGFmdGVyd2FyZHMgaGUgc2hvdWxkIGJlIGdpdmVuIGFzIG11Y2ggbGFuZCBhcyBoZSBjb3VsZCBwbG91Z2ggcm91bmQgaW4gYSBkYXkuIEJlc2lkZXMgdGhpcywgdGhleSBzZXQgdXAgYSBicm9uemUgc3RhdHVlIG9mIGhpbSBpbiB0aGUgdGVtcGxlIG9mIFZ1bGNhbiwgdG8gY29uc29sZSBoaW0gd2l0aCBob25vdXIgZm9yIHRoZSBsYW1lbmVzcyBjb25zZXF1ZW50IHVwb24gaGlzIHdvdW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJldHVybiB0byBUYXJxdWluLCBhZnRlciB0aGUgZ3JlYXQgYmF0dGxlIGluIHdoaWNoIGhlIGxvc3QgaGlzIHNvbiBpbiBhIGR1ZWwgd2l0aCBCcnV0dXMsIGhlIGZsZWQgZm9yIHJlZnVnZSB0byBDbHVzaXVtLCBhbmQgYmVjYW1lIGEgc3VwcGxpYW50IG9mIExhcnMgUG9yc2VuYSwgdGhlIG1vc3QgcG93ZXJmdWwga2luZyBpbiBJdGFseSwgd2hvIHdhcyB0aG91Z2h0IGFsc28gdG8gYmUgYSBtYW4gb2Ygd29ydGggYW5kIG5vYmxlIGFtYml0aW9ucy4gSGUgcHJvbWlzZWQgVGFycXVpbiBoaXMgYWlkIGFuZCBhc3Npc3RhbmNlLiBTbyBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgc2VudCB0byBSb21lIGFuZCBvcmRlcmVkIHRoZW0gdG8gcmVjZWl2ZSBUYXJxdWluIGFzIHRoZWlyIGtpbmcuIFRoZW4gd2hlbiB0aGUgUm9tYW5zIHJlZnVzZWQsIGhlIGRlY2xhcmVkIHdhciB1cG9uIHRoZW0sIHByb2NsYWltZWQgdGhlIHRpbWUgYW5kIHBsYWNlIG9mIGhpcyBhdHRhY2ssIGFuZCBtYXJjaGVkIHRoaXRoZXIgd2l0aCBhIGdyZWF0IGZvcmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi45IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi45IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gOS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSB3YXMgY2hvc2VuIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lLCBpbiBoaXMgYWJzZW5jZSwgYW5kIFRpdHVzIEx1Y3JldGl1cyBhcyBoaXMgY29sbGVhZ3VlLiBSZXR1cm5pbmcsIHRoZXJlZm9yZSwgdG8gUm9tZSwgYW5kIHdpc2hpbmcsIGluIHRoZSBmaXJzdCBwbGFjZSwgdG8gc3VycGFzcyBQb3JzZW5hIGluIHRoZSBsb2Z0aW5lc3Mgb2YgaGlzIHNwaXJpdCwgaGUgYnVpbHQgdGhlIGNpdHkgb2YgU2lnbGl1cmlhLCBhbHRob3VnaCBoaXMgYWR2ZXJzYXJ5IHdhcyBhbHJlYWR5IG5lYXIgYXQgaGFuZC4gQWZ0ZXIgaGUgaGFkIGZvcnRpZmllZCBpdCBhdCBncmVhdCBleHBlbnNlLCBoZSBzZW50IHRvIGl0IGEgY29sb255IG9mIHNldmVuIGh1bmRyZWQgbWVuLCBpbmRpY2F0aW5nIHRoYXQgaGUgaGFkIG5vIGNvbmNlcm4gb3IgZmVhciBhYm91dCB0aGUgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGEgc2hhcnAgYXNzYXVsdCB3YXMgbWFkZSB1cG9uIGl0cyB3YWxsIGJ5IFBvcnNlbmEsIGFuZCBpdHMgZ2Fycmlzb24gd2FzIGRyaXZlbiBvdXQuIFRoZXkgZmxlZCB0byBSb21lLCB3aGVyZSB0aGUgcHVyc3VpbmcgZW5lbXkgYWxtb3N0IGZvbGxvd2VkIHRoZW0gaW50byB0aGUgY2l0eS4gQnV0IFB1YmxpY29sYSBwcm9tcHRseSBzYWxsaWVkIG91dCB0byB0aGVpciBhaWQgaW4gZnJvbnQgb2YgdGhlIGdhdGUsIGpvaW5lZCBiYXR0bGUgYnkgdGhlIHJpdmVyIHNpZGUgd2l0aCB0aGUgZW5lbXksIHdobyBwcmVzc2VkIG9uIGluIGdyZWF0IG51bWJlcnMsIGFuZCBoZWxkIG91dCBhZ2FpbnN0IHRoZW0gdW50aWwgaGUgd2FzIGRlc3BlcmF0ZWx5IHdvdW5kZWQgYW5kIGNhcnJpZWQgYm9kaWx5IG91dCBvZiB0aGUgYmF0dGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzYW1lIGZhdGUgb3ZlcnRvb2sgTHVjcmV0aXVzLCBoaXMgY29sbGVhZ3VlLCBhbHNvLCBzbyB0aGF0IGRpc21heSBmZWxsIHVwb24gdGhlIFJvbWFucywgYW5kIHRoZXkgZmxlZCBmb3Igc2FmZXR5IHRvd2FyZHMgdGhlIGNpdHkuIEJ1dCBhcyB0aGUgZW5lbXkgd2VyZSBmb3JjaW5nIHRoZWlyIHdheSBvbnRvIHRoZSB3b29kZW4gYnJpZGdlLCBSb21lIHdhcyBpbiBkYW5nZXIgb2YgYmVpbmcgdGFrZW4gYnkgc3Rvcm0uIEhvcmF0aXVzIENvY2xlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBleHBsb2l0IG9mIEhvcmF0aXVzIGlzIG11Y2ggbW9yZSBkcmFtYXRpY2FsbHkgbmFycmF0ZWQgYnkgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjEwIiB2YWxpZD0ieWVzIj5MaXZ5IChpaS4gMTApLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBob3dldmVyLCBmaXJzdCwgYW5kIHdpdGggaGltIHR3byBvZiB0aGUgbW9zdCBpbGx1c3RyaW91cyBtZW4gb2YgdGhlIGNpdHksIEhlcm1pbml1cyBhbmQgTGFydGl1cywgZGVmZW5kZWQgdGhlIHdvb2RlbiBicmlkZ2UgYWdhaW5zdCB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xMCIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDEwKS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvcmF0aXVzIGhhZCBiZWVuIGdpdmVuIGhpcyBzdXJuYW1lIG9mIENvY2xlcyBiZWNhdXNlIGhlIGhhZCBsb3N0IG9uZSBvZiBoaXMgZXllcyBpbiB0aGUgd2Fycy4gU29tZSwgaG93ZXZlciwgc2F5IHRoYXQgaGlzIG5vc2Ugd2FzIGZsYXQgYW5kIHN1bmtlbiwgc28gdGhhdCB0aGVyZSB3YXMgbm90aGluZyB0byBzZXBhcmF0ZSBoaXMgZXllcywgYW5kIGhpcyBleWUtYnJvd3MgcmFuIHRvZ2V0aGVyLCBhbmQgdGhhdCBmb3IgdGhpcyByZWFzb24gdGhlIG11bHRpdHVkZSB3aXNoZWQgdG8gY2FsbCBoaW0gQ3ljbG9wcywgYnV0IGJ5IGEgc2xpcCBvZiB0aGUgdG9uZ3VlIHRoZSBuYW1lIG9mIENvY2xlcyBiZWNhbWUgZ2VuZXJhbGx5IHByZXZhbGVudCBpbnN0ZWFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgQ29jbGVzLCBzdGFuZGluZyBhdCB0aGUgaGVhZCBvZiB0aGUgYnJpZGdlLCBrZXB0IHRoZSBlbmVteSBiYWNrIHVudGlsIGhpcyBjb21wYW5pb25zIGhhZCBjdXQgdGhlIGJyaWRnZSBpbiB0d28gYmVoaW5kIGhpbS4gVGhlbiwgYWxsIGFjY291dHJlZCBhcyBoZSB3YXMsIGhlIHBsdW5nZWQgaW50byB0aGUgcml2ZXIgYW5kIHN3YW0gYWNyb3NzIHRvIHRoZSBvdGhlciBzaWRlLCBpbiBzcGl0ZSBvZiBhIHdvdW5kIGluIHRoZSBidXR0b2NrcyBmcm9tIGEgVHVzY2FuIHNwZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSwgb3V0IG9mIGFkbWlyYXRpb24gZm9yIGhpcyB2YWxvdXIsIHByb3Bvc2VkIHRoYXQgZXZlcnkgUm9tYW4gc2hvdWxkIGF0IG9uY2UgY29udHJpYnV0ZSBmb3IgaGltIGFzIG11Y2ggcHJvdmlzaW9uIGFzIGVhY2ggY29uc3VtZWQgaW4gYSBkYXksIGFuZCB0aGF0IGFmdGVyd2FyZHMgaGUgc2hvdWxkIGJlIGdpdmVuIGFzIG11Y2ggbGFuZCBhcyBoZSBjb3VsZCBwbG91Z2ggcm91bmQgaW4gYSBkYXkuIEJlc2lkZXMgdGhpcywgdGhleSBzZXQgdXAgYSBicm9uemUgc3RhdHVlIG9mIGhpbSBpbiB0aGUgdGVtcGxlIG9mIFZ1bGNhbiwgdG8gY29uc29sZSBoaW0gd2l0aCBob25vdXIgZm9yIHRoZSBsYW1lbmVzcyBjb25zZXF1ZW50IHVwb24gaGlzIHdvdW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBQb3JzZW5hIHdhcyBjbG9zZWx5IGludmVzdGluZyB0aGUgY2l0eSwgYSBmYW1pbmUgYWZmbGljdGVkIHRoZSBSb21hbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIExpdnksIGlpLiAxMiwgMS48L25vdGU+IGFuZCBhbm90aGVyIFR1c2NhbiBhcm15IG9uIGl0cyBvd24gYWNjb3VudCBpbnZhZGVkIHRoZWlyIHRlcnJpdG9yeS4gUHVibGljb2xhLCB3aG8gd2FzIG5vdyBjb25zdWwgZm9yIHRoZSB0aGlyZCB0aW1lLCB0aG91Z2h0IHRoYXQgUG9yc2VuYSBtdXN0IGJlIG1ldCBieSBhIHF1aWV0IGFuZCB3YXRjaGZ1bCByZXNpc3RhbmNlIHdpdGhpbiB0aGUgY2l0eTsgYnV0IGhlIHNhbGxpZWQgb3V0IHVwb24gdGhlIG90aGVyIFR1c2NhbiBhcm15LCBlbmdhZ2VkIGl0LCByb3V0ZWQgaXQsIGFuZCBzbGV3IGZpdmUgdGhvdXNhbmQgb2YgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgUG9yc2VuYSB3YXMgY2xvc2VseSBpbnZlc3RpbmcgdGhlIGNpdHksIGEgZmFtaW5lIGFmZmxpY3RlZCB0aGUgUm9tYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIExpdnksIGlpLiAxMiwgMS48L25vdGU+IGFuZCBhbm90aGVyIFR1c2NhbiBhcm15IG9uIGl0cyBvd24gYWNjb3VudCBpbnZhZGVkIHRoZWlyIHRlcnJpdG9yeS4gUHVibGljb2xhLCB3aG8gd2FzIG5vdyBjb25zdWwgZm9yIHRoZSB0aGlyZCB0aW1lLCB0aG91Z2h0IHRoYXQgUG9yc2VuYSBtdXN0IGJlIG1ldCBieSBhIHF1aWV0IGFuZCB3YXRjaGZ1bCByZXNpc3RhbmNlIHdpdGhpbiB0aGUgY2l0eTsgYnV0IGhlIHNhbGxpZWQgb3V0IHVwb24gdGhlIG90aGVyIFR1c2NhbiBhcm15LCBlbmdhZ2VkIGl0LCByb3V0ZWQgaXQsIGFuZCBzbGV3IGZpdmUgdGhvdXNhbmQgb2YgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgc3Rvcnkgb2YgTXVjaXVzIGhhcyBiZWVuIG9mdGVuIGFuZCB2YXJpb3VzbHkgdG9sZCwgYnV0IEkgbXVzdCBnaXZlIGl0IGFzIGl0IHNlZW1zIG1vc3QgY3JlZGlibGUgdG8gbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCdzIHZlcnNpb24gaXMgZmFyIGxlc3MgY29oZXJlbnQgYW5kIGRyYW1hdGljIHRoYW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjEyIiB2YWxpZD0ieWVzIj5MaXZ5J3MgKGlpLiAxMikuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYSBtYW4gZW5kb3dlZCB3aXRoIGV2ZXJ5IHZpcnR1ZSwgYnV0IG1vc3QgZXhjZWxsZW50IGluIHdhci4gRGVzaWduaW5nIHRvIGtpbGwgUG9yc2VuYSwgaGUgc3RvbGUgaW50byBoaXMgY2FtcCwgd2VhcmluZyBhIFR1c2NhbiBoYWJpdCwgYW5kIHVzaW5nIGEgc3BlZWNoIHRvIGNvcnJlc3BvbmQuIEFmdGVyIHdhbGtpbmcgYXJvdW5kIHRoZSB0cmlidW5hbCB3aGVyZSB0aGUga2luZyB3YXMgc2l0dGluZyB3aXRoaW4gb3RoZXJzLCBub3Qga25vd2luZyBoaW0gY2VydGFpbmx5LCBhbmQgZmVhcmluZyB0byBpbnF1aXJlIGFib3V0IGhpbSwgaGUgZHJldyBoaXMgc3dvcmQgYW5kIHNsZXcgdGhhdCBvbmUgb2YgdGhlIGdyb3VwIHdob20gaGUgdGhvdWdodCBtb3N0IGxpa2VseSB0byBiZSB0aGUga2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIGhlIHdhcyBzZWl6ZWQsIGFuZCB3YXMgYmVpbmcgcXVlc3Rpb25lZCwgd2hlbiBhIHNvcnQgb2YgcGFuIGNvbnRhaW5pbmcgbGl2ZSBjb2FscyB3YXMgYnJvdWdodCB0byBQb3JzZW5hLCB3aG8gd2FzIGFib3V0IHRvIG9mZmVyIHNhY3JpZmljZS4gTXVjaXVzIGhlbGQgaGlzIHJpZ2h0IGhhbmQgb3ZlciB0aGUgZmxhbWVzIGFuZCwgd2hpbGUgdGhlIGZsZXNoIHdhcyBidXJuaW5nLCBzdG9vZCBsb29raW5nIGF0IFBvcnNlbmEgd2l0aCBhIGJvbGQgYW5kIHN0ZWFkZmFzdCBjb3VudGVuYW5jZSwgdW50aWwgdGhlIGtpbmcgd2FzIG92ZXJjb21lIHdpdGhpbiBhZG1pcmF0aW9uIGFuZCByZWxlYXNlZCBoaW0sIGFuZCBoYW5kZWQgaGltIGJhY2sgaGlzIHN3b3JkLCByZWFjaGluZyBpdCBkb3duIHRvIGhpbSBmcm9tIHRoZSB0cmlidW5hbC4gTXVjaXVzIHN0cmV0Y2hlZCBvdXQgaGlzIGxlZnQgaGFuZCBhbmQgdG9vayBpdCAob24gd2hpY2ggYWNjb3VudCwgdGhleSBzYXksIGhlIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIFNjYWV2b2xhLCB3aGljaCBtZWFucyA8ZW1waD5MZWZ0LWhhbmRlZDwvZW1waD4pLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHNhaWQgdGhhdCBhbHRob3VnaCBoZSBoYWQgY29ucXVlcmVkIHRoZSBmZWFyIHdoaWNoIFBvcnNlbmEgaW5zcGlyZWQsIGhlIHdhcyB2YW5xdWlzaGVkIGJ5IHRoZSBub2JpbGl0eSB3aGljaCBoZSBkaXNwbGF5ZWQsIGFuZCB3b3VsZCByZXZlYWwgb3V0IG9mIGdyYXRpdHVkZSB3aGF0IGhlIHdvdWxkIG5vdCBoYXZlIGRpc2Nsb3NlZCB1bmRlciBjb21wdWxzaW9uLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRocmVlIGh1bmRyZWQgUm9tYW5zLCB0aGVuLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aXRoIHRoZSBzYW1lIHJlc29sdXRpb24gYXMgbWluZSwgYXJlIG5vdyBwcm93bGluZywgYWJvdXQgaW4gdGh5IGNhbXAgYW5kIHdhdGNoaW5nIHRoZWlyIG9wcG9ydHVuaXR5LiBJIHdhcyBjaG9zZW4gYnkgbG90IHRvIG1ha2UgdGhlIGZpcnN0IGF0dGVtcHQgdXBvbiB0aGVlLCBhbmQgSSBhbSBub3QgZGlzdHJlc3NlZCBhdCB3aGF0IGhhcyBoYXBwZW5lZCwgc28gbm9ibGUgaXMgdGhlIG1hbiB3aG9tIEkgZmFpbGVkIHRvIGtpbGwsIGFuZCBzbyB3b3J0aHkgdG8gYmUgYSBmcmllbmQgcmF0aGVyIHRoYW4gYW4gZW5lbXkgb2YgdGhlIFJvbWFucy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gaGVhcmluZyB0aGlzLCBQb3JzZW5hIGJlbGlldmVkIGl0IHRvIGJlIHRydWUsIGFuZCBmZWx0IG1vcmUgaW5jbGluZWQgdG8gY29tZSB0byB0ZXJtcywgbm90IHNvIG11Y2gsIEkgc3VwcG9zZSwgdGhyb3VnaCBmZWFyIG9mIHRoZSB0aHJlZSBodW5kcmVkLCBhcyBvdXQgb2Ygd29uZGVyaW5nIGFkbWlyYXRpb24gZm9yIHRoZSBsb2Z0eSBzcGlyaXQgYW5kIGJyYXZlcnkgb2YgdGhlIFJvbWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xMy4xIiB2YWxpZD0ieWVzIj5MaXZ5IChpaS4gMTMsIDEtNSk8L2JpYmw+LCBQb3JzZW5hIHdhcyBzbyB0ZXJyaWZpZWQgYnkgdGhlIGRpc2Nsb3N1cmVzIG9mIE11Y2l1cywgdGhhdCBoZSBtYWRlIHByb3Bvc2l0aW9ucyBvZiBwZWFjZSB0byB0aGUgUm9tYW5zLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoJ3MgdmVyc2lvbiBpcyBmYXIgbGVzcyBjb2hlcmVudCBhbmQgZHJhbWF0aWMgdGhhbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTIiIHZhbGlkPSJ5ZXMiPkxpdnkncyAoaWkuIDEyKS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xMiIgdmFsaWQ9InllcyI+TGl2eSdzIChpaS4gMTIpLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhIG1hbiBlbmRvd2VkIHdpdGggZXZlcnkgdmlydHVlLCBidXQgbW9zdCBleGNlbGxlbnQgaW4gd2FyLiBEZXNpZ25pbmcgdG8ga2lsbCBQb3JzZW5hLCBoZSBzdG9sZSBpbnRvIGhpcyBjYW1wLCB3ZWFyaW5nIGEgVHVzY2FuIGhhYml0LCBhbmQgdXNpbmcgYSBzcGVlY2ggdG8gY29ycmVzcG9uZC4gQWZ0ZXIgd2Fsa2luZyBhcm91bmQgdGhlIHRyaWJ1bmFsIHdoZXJlIHRoZSBraW5nIHdhcyBzaXR0aW5nIHdpdGhpbiBvdGhlcnMsIG5vdCBrbm93aW5nIGhpbSBjZXJ0YWlubHksIGFuZCBmZWFyaW5nIHRvIGlucXVpcmUgYWJvdXQgaGltLCBoZSBkcmV3IGhpcyBzd29yZCBhbmQgc2xldyB0aGF0IG9uZSBvZiB0aGUgZ3JvdXAgd2hvbSBoZSB0aG91Z2h0IG1vc3QgbGlrZWx5IHRvIGJlIHRoZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcyBoZSB3YXMgc2VpemVkLCBhbmQgd2FzIGJlaW5nIHF1ZXN0aW9uZWQsIHdoZW4gYSBzb3J0IG9mIHBhbiBjb250YWluaW5nIGxpdmUgY29hbHMgd2FzIGJyb3VnaHQgdG8gUG9yc2VuYSwgd2hvIHdhcyBhYm91dCB0byBvZmZlciBzYWNyaWZpY2UuIE11Y2l1cyBoZWxkIGhpcyByaWdodCBoYW5kIG92ZXIgdGhlIGZsYW1lcyBhbmQsIHdoaWxlIHRoZSBmbGVzaCB3YXMgYnVybmluZywgc3Rvb2QgbG9va2luZyBhdCBQb3JzZW5hIHdpdGggYSBib2xkIGFuZCBzdGVhZGZhc3QgY291bnRlbmFuY2UsIHVudGlsIHRoZSBraW5nIHdhcyBvdmVyY29tZSB3aXRoaW4gYWRtaXJhdGlvbiBhbmQgcmVsZWFzZWQgaGltLCBhbmQgaGFuZGVkIGhpbSBiYWNrIGhpcyBzd29yZCwgcmVhY2hpbmcgaXQgZG93biB0byBoaW0gZnJvbSB0aGUgdHJpYnVuYWwuIE11Y2l1cyBzdHJldGNoZWQgb3V0IGhpcyBsZWZ0IGhhbmQgYW5kIHRvb2sgaXQgKG9uIHdoaWNoIGFjY291bnQsIHRoZXkgc2F5LCBoZSByZWNlaXZlZCB0aGUgc3VybmFtZSBvZiBTY2Fldm9sYSwgd2hpY2ggbWVhbnMgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5MZWZ0LWhhbmRlZDwvZW1waD4pLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgc2FpZCB0aGF0IGFsdGhvdWdoIGhlIGhhZCBjb25xdWVyZWQgdGhlIGZlYXIgd2hpY2ggUG9yc2VuYSBpbnNwaXJlZCwgaGUgd2FzIHZhbnF1aXNoZWQgYnkgdGhlIG5vYmlsaXR5IHdoaWNoIGhlIGRpc3BsYXllZCwgYW5kIHdvdWxkIHJldmVhbCBvdXQgb2YgZ3JhdGl0dWRlIHdoYXQgaGUgd291bGQgbm90IGhhdmUgZGlzY2xvc2VkIHVuZGVyIGNvbXB1bHNpb24uIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHJlZSBodW5kcmVkIFJvbWFucywgdGhlbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aXRoIHRoZSBzYW1lIHJlc29sdXRpb24gYXMgbWluZSwgYXJlIG5vdyBwcm93bGluZywgYWJvdXQgaW4gdGh5IGNhbXAgYW5kIHdhdGNoaW5nIHRoZWlyIG9wcG9ydHVuaXR5LiBJIHdhcyBjaG9zZW4gYnkgbG90IHRvIG1ha2UgdGhlIGZpcnN0IGF0dGVtcHQgdXBvbiB0aGVlLCBhbmQgSSBhbSBub3QgZGlzdHJlc3NlZCBhdCB3aGF0IGhhcyBoYXBwZW5lZCwgc28gbm9ibGUgaXMgdGhlIG1hbiB3aG9tIEkgZmFpbGVkIHRvIGtpbGwsIGFuZCBzbyB3b3J0aHkgdG8gYmUgYSBmcmllbmQgcmF0aGVyIHRoYW4gYW4gZW5lbXkgb2YgdGhlIFJvbWFucy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhpcywgUG9yc2VuYSBiZWxpZXZlZCBpdCB0byBiZSB0cnVlLCBhbmQgZmVsdCBtb3JlIGluY2xpbmVkIHRvIGNvbWUgdG8gdGVybXMsIG5vdCBzbyBtdWNoLCBJIHN1cHBvc2UsIHRocm91Z2ggZmVhciBvZiB0aGUgdGhyZWUgaHVuZHJlZCwgYXMgb3V0IG9mIHdvbmRlcmluZyBhZG1pcmF0aW9uIGZvciB0aGUgbG9mdHkgc3Bpcml0IGFuZCBicmF2ZXJ5IG9mIHRoZSBSb21hbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjEzLjEiIHZhbGlkPSJ5ZXMiPkxpdnkgKGlpLiAxMywgMS01KTwvYmlibD4sIFBvcnNlbmEgd2FzIHNvIHRlcnJpZmllZCBieSB0aGUgZGlzY2xvc3VyZXMgb2YgTXVjaXVzLCB0aGF0IGhlIG1hZGUgcHJvcG9zaXRpb25zIG9mIHBlYWNlIHRvIHRoZSBSb21hbnMuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTMuMSIgdmFsaWQ9InllcyI+TGl2eSAoaWkuIDEzLCAxLTUpPC9iaWJsPiwgUG9yc2VuYSB3YXMgc28gdGVycmlmaWVkIGJ5IHRoZSBkaXNjbG9zdXJlcyBvZiBNdWNpdXMsIHRoYXQgaGUgbWFkZSBwcm9wb3NpdGlvbnMgb2YgcGVhY2UgdG8gdGhlIFJvbWFucy48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsbCBvdGhlciB3cml0ZXJzIGFncmVlIGluIGdpdmluZyB0aGlzIE11Y2l1cyB0aGUgc3VybmFtZSBvZiBTY2Fldm9sYSwgYnV0IEF0aGVub2RvcnVzLCB0aGUgc29uIG9mIFNhbmRvbiwgaW4gaGlzIGJvb2sgYWRkcmVzc2VkIHRvIE9jdGF2aWEsIHRoZSBzaXN0ZXIgb2YgQXVndXN0dXMgQ2Flc2FyLCBzYXlzIHRoYXQgaGlzIHN1cm5hbWUgd2FzIFBvc3R1bXVzLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSBoaW1zZWxmLCBtb3Jlb3ZlciwgdGhpbmtpbmcgdGhhdCBQb3JzZW5hIHdvdWxkIGJlIG1vcmUgdmFsdWFibGUgYXMgYSBmcmllbmQgYW5kIGFsbHkgb2YgdGltZSBjaXR5IHRoYW4gaGUgd2FzIGRhbmdlcm91cyBhcyBpdHMgZW5lbXksIGRpZCBub3Qgc2hyaW5rIGZyb20gbWFraW5nIHRoZSBraW5nIGFuIGFyYml0cmF0b3IgaW4gaGlzIGRpc3B1dGUgd2l0aCBUYXJxdWluIGJ1dCBvZnRlbiBib2xkbHkgY2hhbGxlbmdlZCBUYXJxdWluIHRvIGRvIHNvLCBjb25maWRlbnQgb2YgcHJvdmluZyB0aGF0IGhlIHdhcyB0aGUgYmFzZXN0IG9mIG1lbiBhbmQganVzdGx5IGRlcHJpdmVkIG9mIGhpcyBraW5nZG9tLiBBbmQgd2hlbiBUYXJxdWluIGdhdmUgaGltIGEgcm91Z2ggYW5zd2VyLCBzYXlpbmcgdGhhdCBoZSB3b3VsZCBtYWtlIG5vIG1hbiBoaXMganVkZ2UsIGxlYXN0IG9mIGFsbCBQb3JzZW5hLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5zZWVpbmcgdGhhdCBoZSB3YXMgc3dlcnZpbmcgZnJvbSBoaXMgYWxsaWFuY2Ugd2l0aCBoaW0sIFBvcnNlbmEgd2FzIGRpc3BsZWFzZWQgYW5kIHBlcmNlaXZlZCB0aGUgd2Vha25lc3Mgb2YgaGlzIGNhdXNlLiBIaXMgc29uIEFydW5zIGFsc28gcGxlYWRlZCBlYXJuZXN0bHkgd2l0aCBoaW0gaW4gYmVoYWxmIG9mIHRoZSBSb21hbnMuIENvbnNlcXVlbnRseSwgaGUgcHV0IGFuIGVuZCB0byBoaXMgd2FyIGFnYWluc3QgdGhlbSwgb24gY29uZGl0aW9uIHRoYXQgdGhleSBnYXZlIHVwIHRoZSB0ZXJyaXRvcnkgb2YgVHVzY2FueSB3aGljaCB0aGV5IGhhZCB0YWtlbiwgc2VudCBiYWNrIHRoZWlyIHByaXNvbmVycyBvZiB3YXIsIGFuZCByZWNlaXZlZCBiYWNrIHRoZWlyIGRlc2VydGVycy4gSW4gY29uZmlybWF0aW9uIG9mIHRoZXNlIGNvbmRpdGlvbnMsIHRoZSBSb21hbnMgZ2F2ZSBhcyBob3N0YWdlcyB0ZW4geW91bmcgbWVuIGZyb20gdGhlaXIgbm9ibGVzdCBmYW1pbGllcywgYW5kIGFzIG1hbnkgbWFpZGVucywgb2Ygd2hvbSBWYWxlcmlhLCBhIGRhdWdodGVyIG9mIFB1YmxpY29sYSwgd2FzIG9uZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHVibGljb2xhIGhpbXNlbGYsIG1vcmVvdmVyLCB0aGlua2luZyB0aGF0IFBvcnNlbmEgd291bGQgYmUgbW9yZSB2YWx1YWJsZSBhcyBhIGZyaWVuZCBhbmQgYWxseSBvZiB0aW1lIGNpdHkgdGhhbiBoZSB3YXMgZGFuZ2Vyb3VzIGFzIGl0cyBlbmVteSwgZGlkIG5vdCBzaHJpbmsgZnJvbSBtYWtpbmcgdGhlIGtpbmcgYW4gYXJiaXRyYXRvciBpbiBoaXMgZGlzcHV0ZSB3aXRoIFRhcnF1aW4gYnV0IG9mdGVuIGJvbGRseSBjaGFsbGVuZ2VkIFRhcnF1aW4gdG8gZG8gc28sIGNvbmZpZGVudCBvZiBwcm92aW5nIHRoYXQgaGUgd2FzIHRoZSBiYXNlc3Qgb2YgbWVuIGFuZCBqdXN0bHkgZGVwcml2ZWQgb2YgaGlzIGtpbmdkb20uIEFuZCB3aGVuIFRhcnF1aW4gZ2F2ZSBoaW0gYSByb3VnaCBhbnN3ZXIsIHNheWluZyB0aGF0IGhlIHdvdWxkIG1ha2Ugbm8gbWFuIGhpcyBqdWRnZSwgbGVhc3Qgb2YgYWxsIFBvcnNlbmEsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNlZWluZyB0aGF0IGhlIHdhcyBzd2VydmluZyBmcm9tIGhpcyBhbGxpYW5jZSB3aXRoIGhpbSwgUG9yc2VuYSB3YXMgZGlzcGxlYXNlZCBhbmQgcGVyY2VpdmVkIHRoZSB3ZWFrbmVzcyBvZiBoaXMgY2F1c2UuIEhpcyBzb24gQXJ1bnMgYWxzbyBwbGVhZGVkIGVhcm5lc3RseSB3aXRoIGhpbSBpbiBiZWhhbGYgb2YgdGhlIFJvbWFucy4gQ29uc2VxdWVudGx5LCBoZSBwdXQgYW4gZW5kIHRvIGhpcyB3YXIgYWdhaW5zdCB0aGVtLCBvbiBjb25kaXRpb24gdGhhdCB0aGV5IGdhdmUgdXAgdGhlIHRlcnJpdG9yeSBvZiBUdXNjYW55IHdoaWNoIHRoZXkgaGFkIHRha2VuLCBzZW50IGJhY2sgdGhlaXIgcHJpc29uZXJzIG9mIHdhciwgYW5kIHJlY2VpdmVkIGJhY2sgdGhlaXIgZGVzZXJ0ZXJzLiBJbiBjb25maXJtYXRpb24gb2YgdGhlc2UgY29uZGl0aW9ucywgdGhlIFJvbWFucyBnYXZlIGFzIGhvc3RhZ2VzIHRlbiB5b3VuZyBtZW4gZnJvbSB0aGVpciBub2JsZXN0IGZhbWlsaWVzLCBhbmQgYXMgbWFueSBtYWlkZW5zLCBvZiB3aG9tIFZhbGVyaWEsIGEgZGF1Z2h0ZXIgb2YgUHVibGljb2xhLCB3YXMgb25lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGVzZSBzdGlwdWxhdGlvbnMgaGFkIGJlZW4gY2FycmllZCBvdXQsIGFuZCB3aGVuIFBvcnNlbmEgaGFkIGFscmVhZHkgcmVtaXR0ZWQgYWxsIGhpcyB3YXJsaWtlIHByZXBhcmF0aW9ucyB0aHJvdWdoIGhpcyBjb25maWRlbmNlIGluIHRoZSB0cmVhdHksIHRoZXNlIFJvbWFuIG1haWRlbnMgd2VudCBkb3duIHRvIHRoZSByaXZlciB0byBiYXRoZSwgYXQgYSBwbGFjZSB3aGVyZSB0aGUgY3VydmluZyBiYW5rIGZvcm1lZCBhIGJheSBhbmQga2VwdCB0aGUgd2F0ZXIgZXNwZWNpYWxseSBzdGlsbCBhbmQgZnJlZSBmcm9tIHdhdmVzLiBBcyB0aGV5IHNhdyBubyBndWFyZCBuZWFyLCBub3IgYW55IG9uZSBlbHNlIHBhc3NpbmcgYnkgb3IgY3Jvc3NpbmcgdGhlIHN0cmVhbSwgdGhleSB3ZXJlIHNlaXplZCB3aXRoIGEgZGVzaXJlIHRvIHN3aW0gYXdheSwgbm90d2l0aHN0YW5kaW5nIHRoZSBkZXB0aCBhbmQgd2hpcmwgb2YgdGhlIHN0cm9uZyBjdXJyZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc29tZSBzYXkgdGhhdCBvbmUgb2YgdGhlbSwgbmFtZWQgQ2xvZWxpYSwgY3Jvc3NlZCB0aGUgc3RyZWFtIG9uIGhvcnNlYmFjaywgZXhob3J0aW5nIGFuZCBlbmNvdXJhZ2luZyB0aGUgcmVzdCBhcyB0aGV5IHN3YW0uIEJ1dCB3aGVuIHRoZXkgd2VyZSBjb21lIGluIHNhZmV0eSB0byBQdWJsaWNvbGEsIGhlIGJlc3Rvd2VkIG5vIGFkbWlyYXRpb24gb3IgYWZmZWN0aW9uIHVwb24gdGhlbSwgYnV0IHdhcyBkaXN0cmVzc2VkIGJlY2F1c2UgaGUgd291bGQgYmUgdGhvdWdodCBsZXNzIHRydWUgdG8gaGlzIHdvcmQgdGhhbiBQb3JzZW5hLCBhbmQgYmVjYXVzZSB0aGUgZGFyaW5nIGV4cGxvaXQgb2YgdGhlIG1haWRlbnMgd291bGQgYmUgY2FsbGVkIGEgYmFzZSBmcmF1ZCBvbiB0aGUgcGFydCBvZiB0aGUgUm9tYW5zLiBIZSBzZWl6ZWQgdGhlbSwgdGhlcmVmb3JlLCBhbmQgc2VudCB0aGVtIGJhY2sgYWdhaW4gdG8gUG9yc2VuYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRhcnF1aW4gYW5kIGhpcyBtZW4gZ290IHRpbWVseSBpbnRlbGxpZ2VuY2Ugb2YgdGhpcywgc2V0IGFuIGFtYnVzaCBmb3IgdGhlIGNvbnZveSBvZiB0aGUgbWFpZGVucywgYW5kIGF0dGFja2VkIHRoZW0gaW4gc3VwZXJpb3IgbnVtYmVycyBhcyB0aGV5IHBhc3NlZCBhbG9uZy4gVGhlIHBhcnR5IGF0dGFja2VkIGRlZmVuZGVkIHRoZW1zZWx2ZXMsIG5ldmVydGhlbGVzcywgYW5kIFZhbGVyaWEsIHRoZSBkYXVnaHRlciBvZiBQdWJsaWNvbGEsIGRhcnRlZCB0aHJvdWdoIHRoZSBjb21iYXRhbnRzIGFuZCBmbGVkLCBhbmQgd2l0aCB0aGUgaGVscCBvZiB0aHJlZSBhdHRlbmRhbnRzIHdobyBicm9rZSB0aHJvdWdoIHRoZSBjcm93ZCB3aXRoIGhlciwgbWFkZSBnb29kIGhlciBlc2NhcGUuIFRoZSByZXN0IG9mIHRoZSBtYWlkZW5zIHdlcmUgbWluZ2xlZCB3aXRoIHRoZSBjb21iYXRhbnRzIGFuZCBpbiBwZXJpbCBvZiB0aGVpciBsaXZlcy4gQnV0IEFydW5zLCB0aGUgc29uIG9mIFBvcnNlbmEsIGxlYXJuaW5nIG9mIHRoZSBhZmZhaXIsIGNhbWUgd2l0aCBhbGwgc3BlZWQgdG8gdGhlaXIgYXNzaXN0YW5jZSwgcHV0IHRoZWlyIGVuZW1pZXMgdG8gZmxpZ2h0LCBhbmQgcmVzY3VlZCB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2Ugc3RpcHVsYXRpb25zIGhhZCBiZWVuIGNhcnJpZWQgb3V0LCBhbmQgd2hlbiBQb3JzZW5hIGhhZCBhbHJlYWR5IHJlbWl0dGVkIGFsbCBoaXMgd2FybGlrZSBwcmVwYXJhdGlvbnMgdGhyb3VnaCBoaXMgY29uZmlkZW5jZSBpbiB0aGUgdHJlYXR5LCB0aGVzZSBSb21hbiBtYWlkZW5zIHdlbnQgZG93biB0byB0aGUgcml2ZXIgdG8gYmF0aGUsIGF0IGEgcGxhY2Ugd2hlcmUgdGhlIGN1cnZpbmcgYmFuayBmb3JtZWQgYSBiYXkgYW5kIGtlcHQgdGhlIHdhdGVyIGVzcGVjaWFsbHkgc3RpbGwgYW5kIGZyZWUgZnJvbSB3YXZlcy4gQXMgdGhleSBzYXcgbm8gZ3VhcmQgbmVhciwgbm9yIGFueSBvbmUgZWxzZSBwYXNzaW5nIGJ5IG9yIGNyb3NzaW5nIHRoZSBzdHJlYW0sIHRoZXkgd2VyZSBzZWl6ZWQgd2l0aCBhIGRlc2lyZSB0byBzd2ltIGF3YXksIG5vdHdpdGhzdGFuZGluZyB0aGUgZGVwdGggYW5kIHdoaXJsIG9mIHRoZSBzdHJvbmcgY3VycmVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzb21lIHNheSB0aGF0IG9uZSBvZiB0aGVtLCBuYW1lZCBDbG9lbGlhLCBjcm9zc2VkIHRoZSBzdHJlYW0gb24gaG9yc2ViYWNrLCBleGhvcnRpbmcgYW5kIGVuY291cmFnaW5nIHRoZSByZXN0IGFzIHRoZXkgc3dhbS4gQnV0IHdoZW4gdGhleSB3ZXJlIGNvbWUgaW4gc2FmZXR5IHRvIFB1YmxpY29sYSwgaGUgYmVzdG93ZWQgbm8gYWRtaXJhdGlvbiBvciBhZmZlY3Rpb24gdXBvbiB0aGVtLCBidXQgd2FzIGRpc3RyZXNzZWQgYmVjYXVzZSBoZSB3b3VsZCBiZSB0aG91Z2h0IGxlc3MgdHJ1ZSB0byBoaXMgd29yZCB0aGFuIFBvcnNlbmEsIGFuZCBiZWNhdXNlIHRoZSBkYXJpbmcgZXhwbG9pdCBvZiB0aGUgbWFpZGVucyB3b3VsZCBiZSBjYWxsZWQgYSBiYXNlIGZyYXVkIG9uIHRoZSBwYXJ0IG9mIHRoZSBSb21hbnMuIEhlIHNlaXplZCB0aGVtLCB0aGVyZWZvcmUsIGFuZCBzZW50IHRoZW0gYmFjayBhZ2FpbiB0byBQb3JzZW5hLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUYXJxdWluIGFuZCBoaXMgbWVuIGdvdCB0aW1lbHkgaW50ZWxsaWdlbmNlIG9mIHRoaXMsIHNldCBhbiBhbWJ1c2ggZm9yIHRoZSBjb252b3kgb2YgdGhlIG1haWRlbnMsIGFuZCBhdHRhY2tlZCB0aGVtIGluIHN1cGVyaW9yIG51bWJlcnMgYXMgdGhleSBwYXNzZWQgYWxvbmcuIFRoZSBwYXJ0eSBhdHRhY2tlZCBkZWZlbmRlZCB0aGVtc2VsdmVzLCBuZXZlcnRoZWxlc3MsIGFuZCBWYWxlcmlhLCB0aGUgZGF1Z2h0ZXIgb2YgUHVibGljb2xhLCBkYXJ0ZWQgdGhyb3VnaCB0aGUgY29tYmF0YW50cyBhbmQgZmxlZCwgYW5kIHdpdGggdGhlIGhlbHAgb2YgdGhyZWUgYXR0ZW5kYW50cyB3aG8gYnJva2UgdGhyb3VnaCB0aGUgY3Jvd2Qgd2l0aCBoZXIsIG1hZGUgZ29vZCBoZXIgZXNjYXBlLiBUaGUgcmVzdCBvZiB0aGUgbWFpZGVucyB3ZXJlIG1pbmdsZWQgd2l0aCB0aGUgY29tYmF0YW50cyBhbmQgaW4gcGVyaWwgb2YgdGhlaXIgbGl2ZXMuIEJ1dCBBcnVucywgdGhlIHNvbiBvZiBQb3JzZW5hLCBsZWFybmluZyBvZiB0aGUgYWZmYWlyLCBjYW1lIHdpdGggYWxsIHNwZWVkIHRvIHRoZWlyIGFzc2lzdGFuY2UsIHB1dCB0aGVpciBlbmVtaWVzIHRvIGZsaWdodCwgYW5kIHJlc2N1ZWQgdGhlIFJvbWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb3JzZW5hIHNhdyB0aGUgbWFpZGVucyB0aHVzIGJyb3VnaHQgYmFjaywgaGUgYXNrZWQgZm9yIHRoZSBvbmUgd2hvIGhhZCBiZWd1biB0aGUgZW50ZXJwcmlzZSBhbmQgZW5jb3VyYWdlZCB0aGUgcmVzdCBpbiBpdC4gQW5kIHdoZW4gaGUgaGVhcmQgQ2xvZWxpYSBuYW1lZCBhcyB0aGUgb25lLCBoZSBsb29rZWQgdXBvbiBoZXIgd2l0aCBhIGdyYWNpb3VzIGFuZCBiZWFtaW5nIGNvdW50ZW5hbmNlLCBhbmQgb3JkZXJpbmcgb25lIG9mIHRoZSByb3lhbCBob3JzZXMgdG8gYmUgYnJvdWdodCwgYWxsIGZpdHRpbmdseSBjYXBhcmlzb25lZCwgaGUgbWFkZSBoZXIgYSBwcmVzZW50IG9mIGl0LiBUaG9zZSB3aG8gc2F5IHRoYXQgQ2xvZWxpYSwgYW5kIENsb2VsaWEgYWxvbmUsIGNyb3NzZWQgdGhlIHJpdmVyIG9uIGhvcnNlYmFjaywgcHJvZHVjZSB0aGlzIGZhY3QgaW4gZXZpZGVuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBkaXNwdXRlIHRoZSBpbmZlcmVuY2UsIGFuZCBzYXkgdGhhdCB0aGUgVHVzY2FuIG1lcmVseSBob25vdXJlZCBpbiB0aGlzIHdheSB0aGUgbWFpZGVuJ3MgY291cmFnZS4gQnV0IGFuIGVxdWVzdHJpYW4gc3RhdHVlIG9mIGhlciBzdGFuZHMgYnkgdGhlIFZpYSBTYWNyYSwgYXMgeW91IGdvIHRvIHRoZSBQYWxhdGluZSwgdGhvdWdoIHNvbWUgc2F5IGl0IHJlcHJlc2VudHMgbm90IENsb2VsaWEsIGJ1dCBWYWxlcmlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBMaXZ5LCB3aG8gZ2l2ZXMgYSB2ZXJ5IGRpZmZlcmVudCB2ZXJzaW9uIG9mIHRoZSBDbG9lbGlhIGVwaXNvZGUgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTMuNiIgdmFsaWQ9InllcyI+aWkuIDEzLCA2LTExPC9iaWJsPiksIHRoZSBtYWlkZW5zIHdlcmUgaW5jaXRlZCBieSB0aGUgZXhhbXBsZSBvZiBNdWNpdXMgdG8gdGhlaXIgZGlzcGxheSBvZiBjb3VyYWdlLCBpbiBtZW1vcnkgb2Ygd2hpY2ggdGhlIFJvbWFucyBlcmVjdGVkIGF0IHRoZSB0b3Agb2YgdGhlIFZpYSBTYWNyYSBhbiBlcXVlc3RyaWFuIHN0YXR1ZSwgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj52aXJnbyBpbnNpZGVucyBlcXVvPC9mb3JlaWduPi48L3E+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9yc2VuYSBzYXcgdGhlIG1haWRlbnMgdGh1cyBicm91Z2h0IGJhY2ssIGhlIGFza2VkIGZvciB0aGUgb25lIHdobyBoYWQgYmVndW4gdGhlIGVudGVycHJpc2UgYW5kIGVuY291cmFnZWQgdGhlIHJlc3QgaW4gaXQuIEFuZCB3aGVuIGhlIGhlYXJkIENsb2VsaWEgbmFtZWQgYXMgdGhlIG9uZSwgaGUgbG9va2VkIHVwb24gaGVyIHdpdGggYSBncmFjaW91cyBhbmQgYmVhbWluZyBjb3VudGVuYW5jZSwgYW5kIG9yZGVyaW5nIG9uZSBvZiB0aGUgcm95YWwgaG9yc2VzIHRvIGJlIGJyb3VnaHQsIGFsbCBmaXR0aW5nbHkgY2FwYXJpc29uZWQsIGhlIG1hZGUgaGVyIGEgcHJlc2VudCBvZiBpdC4gVGhvc2Ugd2hvIHNheSB0aGF0IENsb2VsaWEsIGFuZCBDbG9lbGlhIGFsb25lLCBjcm9zc2VkIHRoZSByaXZlciBvbiBob3JzZWJhY2ssIHByb2R1Y2UgdGhpcyBmYWN0IGluIGV2aWRlbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBkaXNwdXRlIHRoZSBpbmZlcmVuY2UsIGFuZCBzYXkgdGhhdCB0aGUgVHVzY2FuIG1lcmVseSBob25vdXJlZCBpbiB0aGlzIHdheSB0aGUgbWFpZGVuJ3MgY291cmFnZS4gQnV0IGFuIGVxdWVzdHJpYW4gc3RhdHVlIG9mIGhlciBzdGFuZHMgYnkgdGhlIFZpYSBTYWNyYSwgYXMgeW91IGdvIHRvIHRoZSBQYWxhdGluZSwgdGhvdWdoIHNvbWUgc2F5IGl0IHJlcHJlc2VudHMgbm90IENsb2VsaWEsIGJ1dCBWYWxlcmlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIExpdnksIHdobyBnaXZlcyBhIHZlcnkgZGlmZmVyZW50IHZlcnNpb24gb2YgdGhlIENsb2VsaWEgZXBpc29kZSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjEzLjYiIHZhbGlkPSJ5ZXMiPmlpLiAxMywgNi0xMTwvYmlibD4pLCB0aGUgbWFpZGVucyB3ZXJlIGluY2l0ZWQgYnkgdGhlIGV4YW1wbGUgb2YgTXVjaXVzIHRvIHRoZWlyIGRpc3BsYXkgb2YgY291cmFnZSwgaW4gbWVtb3J5IG9mIHdoaWNoIHRoZSBSb21hbnMgZXJlY3RlZCBhdCB0aGUgdG9wIG9mIHRoZSBWaWEgU2FjcmEgYW4gZXF1ZXN0cmlhbiBzdGF0dWUsIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnZpcmdvIGluc2lkZW5zIGVxdW88L2ZvcmVpZ24+LjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTMuNiIgdmFsaWQ9InllcyI+aWkuIDEzLCA2LTExPC9iaWJsPiksIHRoZSBtYWlkZW5zIHdlcmUgaW5jaXRlZCBieSB0aGUgZXhhbXBsZSBvZiBNdWNpdXMgdG8gdGhlaXIgZGlzcGxheSBvZiBjb3VyYWdlLCBpbiBtZW1vcnkgb2Ygd2hpY2ggdGhlIFJvbWFucyBlcmVjdGVkIGF0IHRoZSB0b3Agb2YgdGhlIFZpYSBTYWNyYSBhbiBlcXVlc3RyaWFuIHN0YXR1ZSwgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dmlyZ28gaW5zaWRlbnMgZXF1bzwvZm9yZWlnbj4uPC9xPgogICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj52aXJnbyBpbnNpZGVucyBlcXVvPC9mb3JlaWduPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPlBvcnNlbmEsIHRodXMgcmVjb25jaWxlZCB3aXRoIHRoZSBSb21hbnMsIGdhdmUgdGhlIGNpdHkgbWFueSBwcm9vZnMgb2YgaGlzIG1hZ25hbmltaXR5LiBJbiBwYXJ0aWN1bGFyLCBoZSBvcmRlcmVkIGhpcyBUdXNjYW4gc29sZGllcnMsIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+d2hlbiB0aGV5IGV2YWN1YXRlZCB0aGVpciBjYW1wLCB0byB0YWtlIHdpdGhpbiB0aGVtIHRoZWlyIGFybXMgb25seSwgYW5kIG5vdGhpbmcgZWxzZSwgbGVhdmluZyBpdCBmdWxsIG9mIGFidW5kYW50IHByb3Zpc2lvbnMgYW5kIGFsbCBzb3J0cyBvZiB2YWx1YWJsZXMsIHdoaWNoIGhlIHR1cm5lZCBvdmVyIHRvIHRoZSBSb21hbnMuIFRoZXJlZm9yZSBpdCBpcyB0aGF0IGRvd24gdG8gdGhpcyB2ZXJ5IGRheSwgd2hlbiB0aGVyZSBpcyBhIHNhbGUgb2YgcHVibGljIHByb3BlcnR5LCBQb3JzZW5hJ3MgZ29vZHMgYXJlIGNyaWVkIGZpcnN0LCBhbmQgdGh1cyB0aGUgbWFuJ3Mga2luZG5lc3MgaXMgaG9ub3VyZWQgd2l0aGluIHBlcnBldHVhbCByZW1lbWJyYW5jZS4gTW9yZW92ZXIsIGEgYnJvbnplIHN0YXR1ZSBvZiBoaW0gdXNlZCB0byBzdGFuZCBuZWFyIHRoZSBzZW5hdGUtaG91c2UsIG9mIHNpbXBsZSBhbmQgYXJjaGFpYyB3b3JrbWFuc2hpcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xNC4xIiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMTQsIDEtNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPndoZW4gdGhleSBldmFjdWF0ZWQgdGhlaXIgY2FtcCwgdG8gdGFrZSB3aXRoaW4gdGhlbSB0aGVpciBhcm1zIG9ubHksIGFuZCBub3RoaW5nIGVsc2UsIGxlYXZpbmcgaXQgZnVsbCBvZiBhYnVuZGFudCBwcm92aXNpb25zIGFuZCBhbGwgc29ydHMgb2YgdmFsdWFibGVzLCB3aGljaCBoZSB0dXJuZWQgb3ZlciB0byB0aGUgUm9tYW5zLiBUaGVyZWZvcmUgaXQgaXMgdGhhdCBkb3duIHRvIHRoaXMgdmVyeSBkYXksIHdoZW4gdGhlcmUgaXMgYSBzYWxlIG9mIHB1YmxpYyBwcm9wZXJ0eSwgUG9yc2VuYSdzIGdvb2RzIGFyZSBjcmllZCBmaXJzdCwgYW5kIHRodXMgdGhlIG1hbidzIGtpbmRuZXNzIGlzIGhvbm91cmVkIHdpdGhpbiBwZXJwZXR1YWwgcmVtZW1icmFuY2UuIE1vcmVvdmVyLCBhIGJyb256ZSBzdGF0dWUgb2YgaGltIHVzZWQgdG8gc3RhbmQgbmVhciB0aGUgc2VuYXRlLWhvdXNlLCBvZiBzaW1wbGUgYW5kIGFyY2hhaWMgd29ya21hbnNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjE0LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAxNCwgMS00LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTQuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDE0LCAxLTQuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB3aGVuIHRoZSBTYWJpbmVzIGludmFkZWQgdGhlIFJvbWFuIHRlcnJpdG9yeSwgTWFyY3VzIFZhbGVyaXVzLCBhIGJyb3RoZXIgb2YgUHVibGljb2xhLCB3YXMgbWFkZSBjb25zdWwsIGFuZCB3aXRoIGhpbSBQb3N0dW1pdXMgVHViZXJ0dXMuIEluYXNtdWNoIGFzIHRoZSBtb3N0IGltcG9ydGFudCBzdGVwcyB3ZXJlIHRha2VuIHdpdGggdGhlIGFkdmljZSBhbmQgYXNzaXN0YW5jZSBvZiBQdWJsaWNvbGEsIE1hcmN1cyB3YXMgdmljdG9yaW91cyBpbiB0d28gZ3JlYXQgYmF0dGxlcywgYW5kIGluIHRoZSBzZWNvbmQgb2YgdGhlbSwgd2l0aG91dCBsb3NpbmcgYSBzaW5nbGUgUm9tYW4sIHNsZXcgdGhpcnRlZW4gdGhvdXNhbmQgb2YgdGhlIGVuZW15Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjE2LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAxNiwgMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoZSB0cml1bXBocywgaGUgYWxzbyBvYnRhaW5lZCB0aGUgaG9ub3VyIG9mIGEgaG91c2UgYnVpbHQgZm9yIGhpbSBhdCB0aGUgcHVibGljIGNoYXJnZSBvbiB0aGUgUGFsYXRpbmUuIEFuZCB3aGVyZWFzIHRoZSBkb29ycyBvZiBvdGhlciBob3VzZXMgYXQgdGhhdCB0aW1lIG9wZW5lZCBpbndhcmRzIGludG8gdGhlIHZlc3RpYnVsZSwgdGhleSBtYWRlIHRoZSBvdXRlciBkb29yIG9mIGhpcyBob3VzZSwgYW5kIG9mIGhpcyBhbG9uZSwgdG8gb3BlbiBvdXR3YXJkcywgaW4gb3JkZXIgdGhhdCBieSB0aGlzIGNvbmNlc3Npb24gaGUgbWlnaHQgYmUgY29uc3RhbnRseSBwYXJ0YWtpbmcgb2YgcHVibGljIGhvbm91ci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbiB0aGUgU2FiaW5lcyBpbnZhZGVkIHRoZSBSb21hbiB0ZXJyaXRvcnksIE1hcmN1cyBWYWxlcml1cywgYSBicm90aGVyIG9mIFB1YmxpY29sYSwgd2FzIG1hZGUgY29uc3VsLCBhbmQgd2l0aCBoaW0gUG9zdHVtaXVzIFR1YmVydHVzLiBJbmFzbXVjaCBhcyB0aGUgbW9zdCBpbXBvcnRhbnQgc3RlcHMgd2VyZSB0YWtlbiB3aXRoIHRoZSBhZHZpY2UgYW5kIGFzc2lzdGFuY2Ugb2YgUHVibGljb2xhLCBNYXJjdXMgd2FzIHZpY3RvcmlvdXMgaW4gdHdvIGdyZWF0IGJhdHRsZXMsIGFuZCBpbiB0aGUgc2Vjb25kIG9mIHRoZW0sIHdpdGhvdXQgbG9zaW5nIGEgc2luZ2xlIFJvbWFuLCBzbGV3IHRoaXJ0ZWVuIHRob3VzYW5kIG9mIHRoZSBlbmVteS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTYuMSIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDE2LCAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjE2LjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAxNiwgMS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhlIHRyaXVtcGhzLCBoZSBhbHNvIG9idGFpbmVkIHRoZSBob25vdXIgb2YgYSBob3VzZSBidWlsdCBmb3IgaGltIGF0IHRoZSBwdWJsaWMgY2hhcmdlIG9uIHRoZSBQYWxhdGluZS4gQW5kIHdoZXJlYXMgdGhlIGRvb3JzIG9mIG90aGVyIGhvdXNlcyBhdCB0aGF0IHRpbWUgb3BlbmVkIGlud2FyZHMgaW50byB0aGUgdmVzdGlidWxlLCB0aGV5IG1hZGUgdGhlIG91dGVyIGRvb3Igb2YgaGlzIGhvdXNlLCBhbmQgb2YgaGlzIGFsb25lLCB0byBvcGVuIG91dHdhcmRzLCBpbiBvcmRlciB0aGF0IGJ5IHRoaXMgY29uY2Vzc2lvbiBoZSBtaWdodCBiZSBjb25zdGFudGx5IHBhcnRha2luZyBvZiBwdWJsaWMgaG9ub3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHNheSB0aGF0IGFsbCBHcmVlayBkb29ycyB1c2VkIHRvIG9wZW4gb3V0d2FyZHMgaW4gdGhpcyB3YXksIGFuZCB0aGUgY29uY2x1c2lvbiBpcyBkcmF3biBmcm9tIHRoZWlyIGNvbWVkaWVzLCB3aGVyZSB0aG9zZSB3aG8gYXJlIGFib3V0IHRvIGdvIG91dCBvZiBhIGhvdXNlIGJlYXQgbm9pc2lseSBvbiB0aGUgaW5zaWRlIG9mIHRoZWlyIG93biBkb29ycywgaW4gb3JkZXIgdGhhdCBwZXJzb25zIHBhc3NpbmcgYnkgb3Igc3RhbmRpbmcgaW4gZnJvbnQgb2YgdGhlbSBtYXkgaGVhciwgYW5kIG5vdCBiZSB0YWtlbiBieSBzdXJwcmlzZSB3aGVuIHRoZSBkb29ycyBvcGVuIG91dCBpbnRvIHRoZSBzdHJlZXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F5IHRoYXQgYWxsIEdyZWVrIGRvb3JzIHVzZWQgdG8gb3BlbiBvdXR3YXJkcyBpbiB0aGlzIHdheSwgYW5kIHRoZSBjb25jbHVzaW9uIGlzIGRyYXduIGZyb20gdGhlaXIgY29tZWRpZXMsIHdoZXJlIHRob3NlIHdobyBhcmUgYWJvdXQgdG8gZ28gb3V0IG9mIGEgaG91c2UgYmVhdCBub2lzaWx5IG9uIHRoZSBpbnNpZGUgb2YgdGhlaXIgb3duIGRvb3JzLCBpbiBvcmRlciB0aGF0IHBlcnNvbnMgcGFzc2luZyBieSBvciBzdGFuZGluZyBpbiBmcm9udCBvZiB0aGVtIG1heSBoZWFyLCBhbmQgbm90IGJlIHRha2VuIGJ5IHN1cnByaXNlIHdoZW4gdGhlIGRvb3JzIG9wZW4gb3V0IGludG8gdGhlIHN0cmVldC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZvbGxvd2luZyB5ZWFyIFB1YmxpY29sYSB3YXMgY29uc3VsIGFnYWluLCBmb3IgdGhlIGZvdXJ0aCB0aW1lLCB3aGVuIHRoZXJlIHdhcyBleHBlY3RhdGlvbiBvZiBhIHdhciB3aXRoaW4gdGhlIFNhYmluZXMgYW5kIExhdGlucyBjb21iaW5lZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MaXZ5IGdpdmVzIGEgdmVyeSBicmllZiBhY2NvdW50IG9mIHRoaXMgd2FyICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjE2LjIiIHZhbGlkPSJ5ZXMiPmlpLiAxNiwgMi02PC9iaWJsPikuPC9ub3RlPiBBdCB0aGUgc2FtZSB0aW1lIGFsc28gYSBzb3J0IG9mIHN1cGVyc3RpdGlvdXMgdGVycm9yIHNlaXplZCB1cG9uIHRoZSBjaXR5IGJlY2F1c2UgYWxsIHRoZSB3b21lbiB3aG8gd2VyZSBwcmVnbmFudCB3ZXJlIGRlbGl2ZXJlZCBvZiBpbXBlcmZlY3Qgb2Zmc3ByaW5nLCBhbmQgYWxsIGJpcnRocyB3ZXJlIHByZW1hdHVyZS4gV2hlcmVmb3JlIGJ5IGRpcmVjdGlvbiBvZiB0aGUgU2lieWxsaW5lIGJvb2tzLCBQdWJsaWNvbGEgbWFkZSBwcm9waXRpYXRvcnkgc2FjcmlmaWNlcyB0byBQbHV0bywgYW5kIHJlbmV3ZWQgY2VydGFpbiBnYW1lcyB0aGF0IGhhZCBiZWVuIHJlY29tbWVuZGVkIGJ5IEFwb2xsbywgYW5kIGFmdGVyIGhlIGhhZCB0aHVzIG1hZGUgdGhlIGNpdHkgbW9yZSBjaGVlcmZ1bCBpbiBpdHMgbW9wZXMgYW5kIGV4cGVjdGF0aW9ucyBmcm9tIHRoZSBnb2RzLCBoZSB0dXJuZWQgaGlzIGF0dGVudGlvbiB0byB3aGF0IGl0IGZlYXJlZCBmcm9tIG1lbi4gRm9yIHRoZWlyIGVuZW1pZXMgd2VyZSBwbGFpbmx5IG1ha2luZyBncmVhdCBwcmVwYXJhdGlvbnMgYW5kIGEgcG93ZXJmdWwgbGVhZ3VlIGFnYWluc3QgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZvbGxvd2luZyB5ZWFyIFB1YmxpY29sYSB3YXMgY29uc3VsIGFnYWluLCBmb3IgdGhlIGZvdXJ0aCB0aW1lLCB3aGVuIHRoZXJlIHdhcyBleHBlY3RhdGlvbiBvZiBhIHdhciB3aXRoaW4gdGhlIFNhYmluZXMgYW5kIExhdGlucyBjb21iaW5lZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkxpdnkgZ2l2ZXMgYSB2ZXJ5IGJyaWVmIGFjY291bnQgb2YgdGhpcyB3YXIgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xNi4yIiB2YWxpZD0ieWVzIj5paS4gMTYsIDItNjwvYmlibD4pLjwvbm90ZT4gQXQgdGhlIHNhbWUgdGltZSBhbHNvIGEgc29ydCBvZiBzdXBlcnN0aXRpb3VzIHRlcnJvciBzZWl6ZWQgdXBvbiB0aGUgY2l0eSBiZWNhdXNlIGFsbCB0aGUgd29tZW4gd2hvIHdlcmUgcHJlZ25hbnQgd2VyZSBkZWxpdmVyZWQgb2YgaW1wZXJmZWN0IG9mZnNwcmluZywgYW5kIGFsbCBiaXJ0aHMgd2VyZSBwcmVtYXR1cmUuIFdoZXJlZm9yZSBieSBkaXJlY3Rpb24gb2YgdGhlIFNpYnlsbGluZSBib29rcywgUHVibGljb2xhIG1hZGUgcHJvcGl0aWF0b3J5IHNhY3JpZmljZXMgdG8gUGx1dG8sIGFuZCByZW5ld2VkIGNlcnRhaW4gZ2FtZXMgdGhhdCBoYWQgYmVlbiByZWNvbW1lbmRlZCBieSBBcG9sbG8sIGFuZCBhZnRlciBoZSBoYWQgdGh1cyBtYWRlIHRoZSBjaXR5IG1vcmUgY2hlZXJmdWwgaW4gaXRzIG1vcGVzIGFuZCBleHBlY3RhdGlvbnMgZnJvbSB0aGUgZ29kcywgaGUgdHVybmVkIGhpcyBhdHRlbnRpb24gdG8gd2hhdCBpdCBmZWFyZWQgZnJvbSBtZW4uIEZvciB0aGVpciBlbmVtaWVzIHdlcmUgcGxhaW5seSBtYWtpbmcgZ3JlYXQgcHJlcGFyYXRpb25zIGFuZCBhIHBvd2VyZnVsIGxlYWd1ZSBhZ2FpbnN0IHRoZW0uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xNi4yIiB2YWxpZD0ieWVzIj5paS4gMTYsIDItNjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYW1vbmcgdGhlIFNhYmluZXMgb25lIEFwcGl1cyBDbGF1c3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0dGl1cyBDbGF1c3VzIGFtb25nIHRoZSBTYWJpbmVzLCBBcHBpdXMgQ2xhdWRpdXMgYW1vbmcgdGhlIFJvbWFucywgYWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTYuNCIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDE2LCA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG1hbiB3aG9zZSB3ZWFsdGggbWFkZSBoaW0gcG93ZXJmdWwsIGFzIGhpcyBwZXJzb25hbCBwcm93ZXNzIG1hZGUgaGltIGlsbHVzdHJpb3VzLCBidXQgd2hvIHdhcyBtb3N0IGVtaW5lbnQgZm9yIGhpcyBsb2Z0eSBjaGFyYWN0ZXIgYW5kIGZvciBoaXMgZ3JlYXQgZWxvcXVlbmNlLiBIZSBjb3VsZCBub3QsIGhvd2V2ZXIsIGVzY2FwZSB0aGUgZmF0ZSBvZiBhbGwgZ3JlYXQgbWVuLCBidXQgd2FzIGFuIG9iamVjdCBvZiBqZWFsb3VzIGhhdGUsIGFuZCB3aGVuIGhlIHRyaWVkIHRvIHN0b3AgdGhlIHdhciwgdGhvc2Ugd2hvIGhhdGVkIGhpbSBjaGFyZ2VkIGhpbSB3aXRoaW4gdHJ5aW5nIHRvIGluY3JlYXNlIHRoZSBwb3dlciBvZiBSb21lLCB3aXRoIGEgdmlldyB0byBtYWtpbmcgaGltc2VsZiB0eXJhbnQgYW5kIG1hc3RlciBvZiBoaXMgb3duIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcmNlaXZpbmcgdGhhdCB0aGUgbXVsdGl0dWRlIGdhdmUgYSByZWFkeSBlYXIgdG8gdGhlc2Ugc3RvcmllcywgYW5kIHRoYXQgaGUgaGltc2VsZiB3YXMgb2Jub3hpb3VzIHRvIHRoZSB3YXIgcGFydHkgYW5kIHRoZSBtaWxpdGFyeSwgaGUgZmVhcmVkIHRoZSBpc3N1ZSwgYnV0IHdpdGggYSBsYXJnZSBhbmQgcG93ZXJmdWwgY290ZXJpZSBvZiBmcmllbmRzIGFuZCBraW5zbWVuIHRvIGRlZmVuZCBoaW0sIGNvbnRpbnVlZCBoaXMgb3Bwb3NpdGlvbi4gVGhpcyBtYWRlIHRoZSBTYWJpbmVzIHB1dCBvZmYgYW5kIGRlbGF5IHRoZSB3YXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYW1vbmcgdGhlIFNhYmluZXMgb25lIEFwcGl1cyBDbGF1c3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXR0aXVzIENsYXVzdXMgYW1vbmcgdGhlIFNhYmluZXMsIEFwcGl1cyBDbGF1ZGl1cyBhbW9uZyB0aGUgUm9tYW5zLCBhY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyLjE2LjQiIHZhbGlkPSJ5ZXMiPkxpdnksIGlpLiAxNiwgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSBtYW4gd2hvc2Ugd2VhbHRoIG1hZGUgaGltIHBvd2VyZnVsLCBhcyBoaXMgcGVyc29uYWwgcHJvd2VzcyBtYWRlIGhpbSBpbGx1c3RyaW91cywgYnV0IHdobyB3YXMgbW9zdCBlbWluZW50IGZvciBoaXMgbG9mdHkgY2hhcmFjdGVyIGFuZCBmb3IgaGlzIGdyZWF0IGVsb3F1ZW5jZS4gSGUgY291bGQgbm90LCBob3dldmVyLCBlc2NhcGUgdGhlIGZhdGUgb2YgYWxsIGdyZWF0IG1lbiwgYnV0IHdhcyBhbiBvYmplY3Qgb2YgamVhbG91cyBoYXRlLCBhbmQgd2hlbiBoZSB0cmllZCB0byBzdG9wIHRoZSB3YXIsIHRob3NlIHdobyBoYXRlZCBoaW0gY2hhcmdlZCBoaW0gd2l0aGluIHRyeWluZyB0byBpbmNyZWFzZSB0aGUgcG93ZXIgb2YgUm9tZSwgd2l0aCBhIHZpZXcgdG8gbWFraW5nIGhpbXNlbGYgdHlyYW50IGFuZCBtYXN0ZXIgb2YgaGlzIG93biBjb3VudHJ5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMi4xNi40IiB2YWxpZD0ieWVzIj5MaXZ5LCBpaS4gMTYsIDQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBlcmNlaXZpbmcgdGhhdCB0aGUgbXVsdGl0dWRlIGdhdmUgYSByZWFkeSBlYXIgdG8gdGhlc2Ugc3RvcmllcywgYW5kIHRoYXQgaGUgaGltc2VsZiB3YXMgb2Jub3hpb3VzIHRvIHRoZSB3YXIgcGFydHkgYW5kIHRoZSBtaWxpdGFyeSwgaGUgZmVhcmVkIHRoZSBpc3N1ZSwgYnV0IHdpdGggYSBsYXJnZSBhbmQgcG93ZXJmdWwgY290ZXJpZSBvZiBmcmllbmRzIGFuZCBraW5zbWVuIHRvIGRlZmVuZCBoaW0sIGNvbnRpbnVlZCBoaXMgb3Bwb3NpdGlvbi4gVGhpcyBtYWRlIHRoZSBTYWJpbmVzIHB1dCBvZmYgYW5kIGRlbGF5IHRoZSB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSwgYWNjb3JkaW5nbHksIG1ha2luZyBpdCBoaXMgYnVzaW5lc3Mgbm90IG9ubHkgdG8ga25vdyBhYm91dCB0aGVzZSBtYXR0ZXJzLCBidXQgYWxzbyB0byBmb21lbnQgYW5kIHByb21vdGUgdGhlIGZhY3Rpb24sIGtlcHQgc29tZSBvZiBoaXMgZm9sbG93ZXJzIGVtcGxveWVkIGluIGJyaW5naW5nIHRvIENsYXVzdXMgZnJvbSBoaW0gc3VjaCBtZXNzYWdlcyBhcyB0aGlzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlB1YmxpY29sYSB0aGlua3MgdGhlZSB0b28gd29ydGh5IGFuZCBqdXN0IGEgbWFuIHRvIGluZmxpY3QgYW55IGV2aWwgdXBvbiB0aHkgZmVsbG93IGNpdGl6ZW5zIGluIHNlbGYtZGVmZW5jZSwgZXZlbiB0aG91Z2ggdGhvdSBhcnQgd3JvbmdlZCBieSB0aGVtLiBCdXQgaWYgdGhvdSB3aXNoZXN0LCBmb3IgdGhpbmUgb3duIHNhZmV0eSwgdG8gY2hhbmdlIHRoaW5lIGFsbGVnaWFuY2UgYW5kIGZsZWUgZnJvbSB0aG9zZSB3aG8gaGF0ZSB0aGVlLCBoZSB3aWxsIHJlY2VpdmUgdGhlZSB3aXRoIHB1YmxpYyBhbmQgcHJpdmF0ZSBob25vdXJzIHdoaWNoIGFyZSB3b3J0aHkgb2YgdGhpbmUgb3duIGV4Y2VsbGVuY2UgYW5kIHRoZSBzcGxlbmRvdXIgb2YgUm9tZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmVwZWF0ZWQgY29uc2lkZXJhdGlvbiBvZiB0aGUgbWF0dGVyLCB0aGlzIGNvdXJzZSBzZWVtZWQgdG8gQ2xhdXN1cyB0aGUgYmVzdCB0aGF0IHdhcyBvcGVuIHRvIGhpbTsgaGUgdGhlcmVmb3JlIHN1bW1vbmVkIGhpcyBmcmllbmRzLCB3aG8gaW4gbGlrZSBtYW5uZXIgcGVyc3VhZGVkIG1hbnkgbW9yZSwgdG8gam9pbiBoaW0sIGFuZCB0YWtpbmcgZml2ZSB0aG91c2FuZCBmYW1pbGllcyBmcm9tIHRoZWlyIGhvbWVzLCB3aXZlcyBhbmQgY2hpbGRyZW4gaW5jbHVkZWQsIHRoZSBtb3N0IHBlYWNlZnVsIGZvbGsgYW1vbmcgdGhlIFNhYmluZXMsIG9mIGdlbnRsZSBhbmQgc2VkYXRlIGxpdmVzLCBoZSBsZWQgdGhlbSB0byBSb21lLiBQdWJsaWNvbGEga25ldyBiZWZvcmVoYW5kIG9mIHRoZWlyIGNvbWluZywgYW5kIGdhdmUgdGhlbSBhbiBlYWdlciBhbmQgYSBraW5kbHkgd2VsY29tZSwgYWRtaXR0aW5nIHRoZW0gdG8gYWxsIHJpZ2h0cyBhbmQgcHJpdmlsZWdlcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGF0IG9uY2UgaW5jb3Jwb3JhdGVkIHRoZSBmYW1pbGllcyBpbiB0aGUgUm9tYW4gc3RhdGUsIGFuZCBnYXZlIGVhY2ggb25lIHR3byBhY3JlcyBvZiBsYW5kIG9uIHRoZSByaXZlciBBbmlvLiBUbyBDbGF1c3VzLCBob3dldmVyLCBoZSBnYXZlIHR3ZW50eS1maXZlIGFjcmVzIG9mIGxhbmQsIGFuZCBlbnJvbGxlZCBoaW0gYW1vbmcgdGhlIHNlbmF0b3JzLiBUaGlzIHdhcyB0aGUgYmVnaW5uaW5nIG9mIGEgcG9saXRpY2FsIHBvd2VyIHdoaWNoIGhlIHVzZWQgc28gd2lzZWx5IHRoYXQgaGUgbW91bnRlZCB0byB0aGUgaGlnaGVzdCBkaWduaXR5IGFuZCBhY3F1aXJlZCBncmVhdCBpbmZsdWVuY2UuIFRoZSBDbGF1ZGlhbiBmYW1pbHksIHdoaWNoIGlzIGRlc2NlbmRlZCBmcm9tIGhpbSwgaXMgbm8gbGVzcyBpbGx1c3RyaW91cyB0aGFuIGFueSBpbiBSb21lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpY29sYSwgYWNjb3JkaW5nbHksIG1ha2luZyBpdCBoaXMgYnVzaW5lc3Mgbm90IG9ubHkgdG8ga25vdyBhYm91dCB0aGVzZSBtYXR0ZXJzLCBidXQgYWxzbyB0byBmb21lbnQgYW5kIHByb21vdGUgdGhlIGZhY3Rpb24sIGtlcHQgc29tZSBvZiBoaXMgZm9sbG93ZXJzIGVtcGxveWVkIGluIGJyaW5naW5nIHRvIENsYXVzdXMgZnJvbSBoaW0gc3VjaCBtZXNzYWdlcyBhcyB0aGlzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHVibGljb2xhIHRoaW5rcyB0aGVlIHRvbyB3b3J0aHkgYW5kIGp1c3QgYSBtYW4gdG8gaW5mbGljdCBhbnkgZXZpbCB1cG9uIHRoeSBmZWxsb3cgY2l0aXplbnMgaW4gc2VsZi1kZWZlbmNlLCBldmVuIHRob3VnaCB0aG91IGFydCB3cm9uZ2VkIGJ5IHRoZW0uIEJ1dCBpZiB0aG91IHdpc2hlc3QsIGZvciB0aGluZSBvd24gc2FmZXR5LCB0byBjaGFuZ2UgdGhpbmUgYWxsZWdpYW5jZSBhbmQgZmxlZSBmcm9tIHRob3NlIHdobyBoYXRlIHRoZWUsIGhlIHdpbGwgcmVjZWl2ZSB0aGVlIHdpdGggcHVibGljIGFuZCBwcml2YXRlIGhvbm91cnMgd2hpY2ggYXJlIHdvcnRoeSBvZiB0aGluZSBvd24gZXhjZWxsZW5jZSBhbmQgdGhlIHNwbGVuZG91ciBvZiBSb21lLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHJlcGVhdGVkIGNvbnNpZGVyYXRpb24gb2YgdGhlIG1hdHRlciwgdGhpcyBjb3Vyc2Ugc2VlbWVkIHRvIENsYXVzdXMgdGhlIGJlc3QgdGhhdCB3YXMgb3BlbiB0byBoaW07IGhlIHRoZXJlZm9yZSBzdW1tb25lZCBoaXMgZnJpZW5kcywgd2hvIGluIGxpa2UgbWFubmVyIHBlcnN1YWRlZCBtYW55IG1vcmUsIHRvIGpvaW4gaGltLCBhbmQgdGFraW5nIGZpdmUgdGhvdXNhbmQgZmFtaWxpZXMgZnJvbSB0aGVpciBob21lcywgd2l2ZXMgYW5kIGNoaWxkcmVuIGluY2x1ZGVkLCB0aGUgbW9zdCBwZWFjZWZ1bCBmb2xrIGFtb25nIHRoZSBTYWJpbmVzLCBvZiBnZW50bGUgYW5kIHNlZGF0ZSBsaXZlcywgaGUgbGVkIHRoZW0gdG8gUm9tZS4gUHVibGljb2xhIGtuZXcgYmVmb3JlaGFuZCBvZiB0aGVpciBjb21pbmcsIGFuZCBnYXZlIHRoZW0gYW4gZWFnZXIgYW5kIGEga2luZGx5IHdlbGNvbWUsIGFkbWl0dGluZyB0aGVtIHRvIGFsbCByaWdodHMgYW5kIHByaXZpbGVnZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBhdCBvbmNlIGluY29ycG9yYXRlZCB0aGUgZmFtaWxpZXMgaW4gdGhlIFJvbWFuIHN0YXRlLCBhbmQgZ2F2ZSBlYWNoIG9uZSB0d28gYWNyZXMgb2YgbGFuZCBvbiB0aGUgcml2ZXIgQW5pby4gVG8gQ2xhdXN1cywgaG93ZXZlciwgaGUgZ2F2ZSB0d2VudHktZml2ZSBhY3JlcyBvZiBsYW5kLCBhbmQgZW5yb2xsZWQgaGltIGFtb25nIHRoZSBzZW5hdG9ycy4gVGhpcyB3YXMgdGhlIGJlZ2lubmluZyBvZiBhIHBvbGl0aWNhbCBwb3dlciB3aGljaCBoZSB1c2VkIHNvIHdpc2VseSB0aGF0IGhlIG1vdW50ZWQgdG8gdGhlIGhpZ2hlc3QgZGlnbml0eSBhbmQgYWNxdWlyZWQgZ3JlYXQgaW5mbHVlbmNlLiBUaGUgQ2xhdWRpYW4gZmFtaWx5LCB3aGljaCBpcyBkZXNjZW5kZWQgZnJvbSBoaW0sIGlzIG5vIGxlc3MgaWxsdXN0cmlvdXMgdGhhbiBhbnkgaW4gUm9tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvdWdoIHRoZSBzY2hpc20gYW1vbmcgdGhlIFNhYmluZXMgd2FzIHRodXMgcmVtb3ZlZCBieSB0aGUgZW1pZ3JhdGlvbiBvZiB0aGVzZSBtZW4sIHRoZWlyIHBvcHVsYXIgbGVhZGVycyB3b3VsZCBub3Qgc3VmZmVyIHRoZW0gdG8gc2V0dGxlIGRvd24gaW50byBxdWlldCwgYnV0IGNvbXBsYWluZWQgYml0dGVybHkgdGhhdCBDbGF1c3VzLCBieSBiZWNvbWluZyBhbiBleGlsZSBhbmQgYW4gZW5lbXksIHNob3VsZCBicmluZyB0byBwYXNzIHdoYXQgaGUgY291bGQgbm90IGVmZmVjdCBieSBoaXMgcGVyc3Vhc2lvbnMgYXQgaG9tZSBuYW1lbHksIHRoYXQgUm9tZSBwYXkgbm8gcGVuYWx0eSBmb3IgaGVyIG91dHJhZ2VzLiBTZXR0aW5nIG91dCwgdGhlcmVmb3JlLCB3aXRoaW4gYSBsYXJnZSBhcm15LCB0aGV5IGVuY2FtcGVkIG5lYXIgRmlkZW5hZSwgYW5kIHBsYWNlZCB0d28gdGhvdXNhbmQgbWVuLWF0LWFybXMgaW4gYW1idXNoIGp1c3Qgb3V0c2lkZSBvZiBSb21lIGluIHdvb2RlZCBob2xsb3dzLiBUaGVpciBpbnRlbnRpb24gd2FzIHRoYXQgYSBmZXcgb2YgdGhlaXIgaG9yc2VtZW4sIGFzIHNvb24gYXMgaXQgd2FzIGRheSwgc2hvdWxkIGJvbGRseSByYXZhZ2UgdGhlIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSBoYWQgYmVlbiBvcmRlcmVkLCB3aGVuZXZlciB0aGV5IGFwcHJvYWNoZWQgdGhlIGNpdHkgYW5kIHdlcmUgYXR0YWNrZWQsIHRvIHJldGlyZSBncmFkdWFsbHkgdW50aWwgdGhleSBoYWQgZHJhd24gdGhlIGVuZW15IGludG8gdGhlIGFtYnVzY2FkZS4gVGhhdCB2ZXJ5IGRheSBQdWJsaWNvbGEgbGVhcm5lZCBvZiB0aGlzIHBsYW4gZnJvbSBkZXNlcnRlcnMsIGFuZCB0b29rIG1lYXN1cmVzIGFjY29yZGluZ2x5LCBkaXZpZGluZyB1cCBoaXMgZm9yY2VzLiBQb3N0dW1pdXMgQmFsYnVzLCBoaXMgc29uLWluLWxhdywgd2hpbGUgaXQgd2FzIHlldCBldmVuaW5nIHdlbnQgb3V0IHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuLWF0LWFybXMsIG9jY3VwaWVkIHRoZSBoaWxscyB1bmRlciB3aGljaCB0aGUgU2FiaW5lcyB3ZXJlIGx5aW5nIGluIGFtYnVzaCwgYW5kIGtlcHQgdGhlIGVuZW15IHVuZGVyIG9ic2VydmF0aW9uOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5MdWNyZXRpdXMsIGhpcyBjb2xsZWFndWUsIHJldGFpbmluZyBpbiB0aGUgY2l0eSB0aGUgbGlnaHRlc3QgYXJtZWQgYW5kIG1vc3QgaW1wZXR1b3VzIHRyb29wcywgd2FzIG9yZGVyZWQgdG8gYXR0YWNrIHRoZSBlbmVteSdzIGhvcnNlbWVuIGFzIHRoZXkgcmF2YWdlZCB0aGUgY291bnRyeTsgaGUgaGltc2VsZiB0b29rIHRoZSByZXN0IG9mIHRoZSBhcm15IGFuZCBlbmNpcmNsZWQgdGhlIGVuZW15IGluIHRoZWlyIGNhbXAuIEZhdm91cmVkIGJ5IGEgaGVhdnkgZm9nLCBhdCBicmVhayBvZiBkYXkgUG9zdHVtaXVzLCB3aXRoIGxvdWQgc2hvdXRzLCBmZWxsIHVwb24gdGhlIGFtYnVzY2FkZSBmcm9tIHRoZSBoZWlnaHRzLCB3aGlsZSBMdWNyZXRpdXMgaHVybGVkIGhpcyB0cm9vcHMgdXBvbiB0aGUgaG9yc2VtZW4gd2hlbiB0aGV5IHJvZGUgdG93YXJkcyB0aGUgY2l0eSwgYW5kIFB1YmxpY29sYSBhdHRhY2tlZCB0aGUgY2FtcCBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBwb2ludHMsIHRoZW4sIHRoZSBTYWJpbmVzIHdlcmUgd29yc3RlZCBhbmQgdW5kb25lLiBXaGVuZXZlciB0aGV5IHdlcmUsIHRoZXkgbWFkZSBubyBkZWZlbmNlLCBidXQgZmxlZCwgYW5kIHRoZSBSb21hbnMgc3RyYWlnaHR3YXkgc2xldyB0aGVtLiBUaGUgdmVyeSBob3BlcyB0aGV5IHBsYWNlZCBpbiBvbmUgYW5vdGhlciBwcm92ZWQgbW9zdCBmYXRhbCB0byB0aGVtLiBGb3IgZWFjaCBwYXJ0eSwgc3VwcG9zaW5nIHRoYXQgdGhlIG90aGVyIHdhcyBzYWZlLCBoYWQgbm8gdGhvdWdodCBvZiBpbiBob2xkaW5nIHRoZWlyIGdyb3VuZCBhbmQgZmlnaHRpbmcsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aG9zZSBpbiB0aGUgY2FtcCByYW4gdG93YXJkcyB0aG9zZSBpbiB0aGUgYW1idXNjYWRlLCB3aGlsZSB0aGVzZSwgb24gdGhlaXIgcGFydCwgcmFuIHRvIHRob3NlIGluIHRoZSBjYW1wLCBzbyB0aGF0IGZ1Z2l0aXZlcyBlbmNvdW50ZXJlZCBmdWdpdGl2ZXMsIGFuZCBmb3VuZCB0aG9zZSBuZWVkaW5nIHN1Y2NvdXIgZnJvbSB3aG9tIHRoZXkgZXhwZWN0ZWQgc3VjY291ciB0aGVtc2VsdmVzLiBBbmQgYWxsIHRoZSBTYWJpbmVzIHdvdWxkIGhhdmUgcGVyaXNoZWQsIGhhZCBub3QgdGhlIG5laWdoYm9yaW5nIGNpdHkgb2YgRmlkZW5hZSBhZmZvcmRlZCBhIHJlZnVnZSB0byBzb21lLCBlc3BlY2lhbGx5IHRvIHRob3NlIHdobyBmbGVkIGZyb20gdGhlIGNhbXAgd2hlbiBpdCB3YXMgY2FwdHVyZWQuIEFsbCB3aG8gZGlkIG5vdCBnYWluIHRoaXMgY2l0eSB3ZXJlIGVpdGhlciBzbGFpbiBvciBicm91Z2h0IGJhY2sgdG8gUm9tZSBhcyBwcmlzb25lcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvdWdoIHRoZSBzY2hpc20gYW1vbmcgdGhlIFNhYmluZXMgd2FzIHRodXMgcmVtb3ZlZCBieSB0aGUgZW1pZ3JhdGlvbiBvZiB0aGVzZSBtZW4sIHRoZWlyIHBvcHVsYXIgbGVhZGVycyB3b3VsZCBub3Qgc3VmZmVyIHRoZW0gdG8gc2V0dGxlIGRvd24gaW50byBxdWlldCwgYnV0IGNvbXBsYWluZWQgYml0dGVybHkgdGhhdCBDbGF1c3VzLCBieSBiZWNvbWluZyBhbiBleGlsZSBhbmQgYW4gZW5lbXksIHNob3VsZCBicmluZyB0byBwYXNzIHdoYXQgaGUgY291bGQgbm90IGVmZmVjdCBieSBoaXMgcGVyc3Vhc2lvbnMgYXQgaG9tZSBuYW1lbHksIHRoYXQgUm9tZSBwYXkgbm8gcGVuYWx0eSBmb3IgaGVyIG91dHJhZ2VzLiBTZXR0aW5nIG91dCwgdGhlcmVmb3JlLCB3aXRoaW4gYSBsYXJnZSBhcm15LCB0aGV5IGVuY2FtcGVkIG5lYXIgRmlkZW5hZSwgYW5kIHBsYWNlZCB0d28gdGhvdXNhbmQgbWVuLWF0LWFybXMgaW4gYW1idXNoIGp1c3Qgb3V0c2lkZSBvZiBSb21lIGluIHdvb2RlZCBob2xsb3dzLiBUaGVpciBpbnRlbnRpb24gd2FzIHRoYXQgYSBmZXcgb2YgdGhlaXIgaG9yc2VtZW4sIGFzIHNvb24gYXMgaXQgd2FzIGRheSwgc2hvdWxkIGJvbGRseSByYXZhZ2UgdGhlIGNvdW50cnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSBoYWQgYmVlbiBvcmRlcmVkLCB3aGVuZXZlciB0aGV5IGFwcHJvYWNoZWQgdGhlIGNpdHkgYW5kIHdlcmUgYXR0YWNrZWQsIHRvIHJldGlyZSBncmFkdWFsbHkgdW50aWwgdGhleSBoYWQgZHJhd24gdGhlIGVuZW15IGludG8gdGhlIGFtYnVzY2FkZS4gVGhhdCB2ZXJ5IGRheSBQdWJsaWNvbGEgbGVhcm5lZCBvZiB0aGlzIHBsYW4gZnJvbSBkZXNlcnRlcnMsIGFuZCB0b29rIG1lYXN1cmVzIGFjY29yZGluZ2x5LCBkaXZpZGluZyB1cCBoaXMgZm9yY2VzLiBQb3N0dW1pdXMgQmFsYnVzLCBoaXMgc29uLWluLWxhdywgd2hpbGUgaXQgd2FzIHlldCBldmVuaW5nIHdlbnQgb3V0IHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuLWF0LWFybXMsIG9jY3VwaWVkIHRoZSBoaWxscyB1bmRlciB3aGljaCB0aGUgU2FiaW5lcyB3ZXJlIGx5aW5nIGluIGFtYnVzaCwgYW5kIGtlcHQgdGhlIGVuZW15IHVuZGVyIG9ic2VydmF0aW9uOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx1Y3JldGl1cywgaGlzIGNvbGxlYWd1ZSwgcmV0YWluaW5nIGluIHRoZSBjaXR5IHRoZSBsaWdodGVzdCBhcm1lZCBhbmQgbW9zdCBpbXBldHVvdXMgdHJvb3BzLCB3YXMgb3JkZXJlZCB0byBhdHRhY2sgdGhlIGVuZW15J3MgaG9yc2VtZW4gYXMgdGhleSByYXZhZ2VkIHRoZSBjb3VudHJ5OyBoZSBoaW1zZWxmIHRvb2sgdGhlIHJlc3Qgb2YgdGhlIGFybXkgYW5kIGVuY2lyY2xlZCB0aGUgZW5lbXkgaW4gdGhlaXIgY2FtcC4gRmF2b3VyZWQgYnkgYSBoZWF2eSBmb2csIGF0IGJyZWFrIG9mIGRheSBQb3N0dW1pdXMsIHdpdGggbG91ZCBzaG91dHMsIGZlbGwgdXBvbiB0aGUgYW1idXNjYWRlIGZyb20gdGhlIGhlaWdodHMsIHdoaWxlIEx1Y3JldGl1cyBodXJsZWQgaGlzIHRyb29wcyB1cG9uIHRoZSBob3JzZW1lbiB3aGVuIHRoZXkgcm9kZSB0b3dhcmRzIHRoZSBjaXR5LCBhbmQgUHVibGljb2xhIGF0dGFja2VkIHRoZSBjYW1wIG9mIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBwb2ludHMsIHRoZW4sIHRoZSBTYWJpbmVzIHdlcmUgd29yc3RlZCBhbmQgdW5kb25lLiBXaGVuZXZlciB0aGV5IHdlcmUsIHRoZXkgbWFkZSBubyBkZWZlbmNlLCBidXQgZmxlZCwgYW5kIHRoZSBSb21hbnMgc3RyYWlnaHR3YXkgc2xldyB0aGVtLiBUaGUgdmVyeSBob3BlcyB0aGV5IHBsYWNlZCBpbiBvbmUgYW5vdGhlciBwcm92ZWQgbW9zdCBmYXRhbCB0byB0aGVtLiBGb3IgZWFjaCBwYXJ0eSwgc3VwcG9zaW5nIHRoYXQgdGhlIG90aGVyIHdhcyBzYWZlLCBoYWQgbm8gdGhvdWdodCBvZiBpbiBob2xkaW5nIHRoZWlyIGdyb3VuZCBhbmQgZmlnaHRpbmcsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aG9zZSBpbiB0aGUgY2FtcCByYW4gdG93YXJkcyB0aG9zZSBpbiB0aGUgYW1idXNjYWRlLCB3aGlsZSB0aGVzZSwgb24gdGhlaXIgcGFydCwgcmFuIHRvIHRob3NlIGluIHRoZSBjYW1wLCBzbyB0aGF0IGZ1Z2l0aXZlcyBlbmNvdW50ZXJlZCBmdWdpdGl2ZXMsIGFuZCBmb3VuZCB0aG9zZSBuZWVkaW5nIHN1Y2NvdXIgZnJvbSB3aG9tIHRoZXkgZXhwZWN0ZWQgc3VjY291ciB0aGVtc2VsdmVzLiBBbmQgYWxsIHRoZSBTYWJpbmVzIHdvdWxkIGhhdmUgcGVyaXNoZWQsIGhhZCBub3QgdGhlIG5laWdoYm9yaW5nIGNpdHkgb2YgRmlkZW5hZSBhZmZvcmRlZCBhIHJlZnVnZSB0byBzb21lLCBlc3BlY2lhbGx5IHRvIHRob3NlIHdobyBmbGVkIGZyb20gdGhlIGNhbXAgd2hlbiBpdCB3YXMgY2FwdHVyZWQuIEFsbCB3aG8gZGlkIG5vdCBnYWluIHRoaXMgY2l0eSB3ZXJlIGVpdGhlciBzbGFpbiBvciBicm91Z2h0IGJhY2sgdG8gUm9tZSBhcyBwcmlzb25lcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3VjY2VzcyB0aGUgUm9tYW5zLCBhbHRob3VnaCB0aGV5IHdlcmUgd29udCB0byBhdHRyaWJ1dGUgYWxsIHN1Y2ggZ3JlYXQgZXZlbnRzIHRvIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIGdvZHMsIGNvbnNpZGVyZWQgdG8gYmUgdGhlIHdvcmsgb2YgdGhlaXIgZ2VuZXJhbCBhbG9uZS4gQW5kIHRoZSBmaXJzdCB0aGluZyBoaXMgc29sZGllcnMgd2VyZSBoZWFyZCB0byBzYXkgd2FzIHRoYXQgUHVibGljb2xhIGhhZCBkZWxpdmVyZWQgdGhlaXIgZW5lbWllcyBpbnRvIHRoZWlyIGhhbmRzIGxhbWUsIGJsaW5kLCBhbmQgYWxsIGJ1dCBpbXByaXNvbmVkLCB0byBiZSBkaXNwYXRjaGVkIGJ5IHRoZWlyIHN3b3Jkcy4gR3JlYXQgd2VhbHRoIGFsc28gYWNjcnVlZCB0byB0aGUgcGVvcGxlIGZyb20gdGhlIHNwb2lscyBhbmQgcHJpc29uZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdWNjZXNzIHRoZSBSb21hbnMsIGFsdGhvdWdoIHRoZXkgd2VyZSB3b250IHRvIGF0dHJpYnV0ZSBhbGwgc3VjaCBncmVhdCBldmVudHMgdG8gdGhlIGluZmx1ZW5jZSBvZiB0aGUgZ29kcywgY29uc2lkZXJlZCB0byBiZSB0aGUgd29yayBvZiB0aGVpciBnZW5lcmFsIGFsb25lLiBBbmQgdGhlIGZpcnN0IHRoaW5nIGhpcyBzb2xkaWVycyB3ZXJlIGhlYXJkIHRvIHNheSB3YXMgdGhhdCBQdWJsaWNvbGEgaGFkIGRlbGl2ZXJlZCB0aGVpciBlbmVtaWVzIGludG8gdGhlaXIgaGFuZHMgbGFtZSwgYmxpbmQsIGFuZCBhbGwgYnV0IGltcHJpc29uZWQsIHRvIGJlIGRpc3BhdGNoZWQgYnkgdGhlaXIgc3dvcmRzLiBHcmVhdCB3ZWFsdGggYWxzbyBhY2NydWVkIHRvIHRoZSBwZW9wbGUgZnJvbSB0aGUgc3BvaWxzIGFuZCBwcmlzb25lcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQdWJsaWNvbGEsIGltbWVkaWF0ZWx5IGFmdGVyIGNlbGVicmF0aW5nIGhpcyB0cml1bXBoIGFuZCBoYW5kaW5nIHRoZSBjaXR5IG92ZXIgdG8gdGhlIGNvbnN1bHMgYXBwb2ludGVkIHRvIHN1Y2NlZWQgaGltLCBkaWVkLiBTbyBmYXIgYXMgaXQgY2FuIHBvc3NpYmx5IGJlIGFjaGlldmVkIGJ5IG1lbiB3aG8gYXJlIHJlZ2FyZGVkIGFzIGhvbm91cmFibGUgYW5kIGdvb2QsIGhlIGhhZCBicm91Z2h0IGhpcyBsaWZlIHRvIHBlcmZlY3Rpb24uIFRoZSBwZW9wbGUsIGFzIGlmIHRoZXkgaGFkIGRvbmUgbm90aGluZyB0byBzaG93IHRoZWlyIGVzdGVlbSBmb3IgaGltIHdoaWxlIGhlIHdhcyBhbGl2ZSwgYnV0IG93ZWQgaGltIGV2ZXJ5IGhvbWFnZSwgZGVjcmVlZCB0aGF0IGhpcyBib2R5IHNob3VsZCBiZSBidXJpZWQgYXQgdGhlIHB1YmxpYyBjaGFyZ2UsIGFuZCB0aGF0IGV2ZXJ5IG1hbiBzaG91bGQgY29udHJpYnV0ZSBhIHF1YWRyYW5zIHRvd2FyZHMgdGhlIGhvbm91ci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdvbWVuIGFsc28sIGJ5IHByaXZhdGUgYWdyZWVtZW50IGFtb25nc3QgdGhlbXNlbHZlcywgbW91cm5lZCBhIHdob2xlIHllYXIgZm9yIGhpbSwgd2l0aCBhIG1vdXJuaW5nIHdoaWNoIHdhcyBob25vdXJhYmxlIGFuZCBlbnZpYWJsZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gdGhlIGZvbGxvd2luZyB5ZWFyLCBBZ3JpcHBhIE1lbmVtdXMgYW5kIFAuIFBvc3R1bWl1cyBiZWluZyBjb25zdWxzLCBQLiBWYWxlcml1cywgYnkgdW5pdmVyc2FsIGNvbnNlbnQgdGhlIGZvcmVtb3N0IFJvbWFuIGluIHRoZSBhcnRzIG9mIHdhciBhbmQgcGVhY2UsIGRpZWQsIGluIHRoZSBoZWlnaHQgb2YgaGlzIGdsb3J5LCBidXQgc28gcG9vciB0aGF0IG1lYW5zIHRvIGRlZnJheSBoaXMgZnVuZXJhbCBleHBlbnNlcyB3ZXJlIGxhY2tpbmcuIEhlIHdhcyB0aGVyZWZvcmUgYnVyaWVkIGF0IHRoZSBwdWJsaWMgY2hhcmdlLCBhbmQgdGhlIG1hdHJvbnMgbW91cm5lZCBmb3IgaGltIGFzIHRoZXkgaGFkIGRvbmUgZm9yIEJydXR1czwvcT4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIuMTYuNyIgdmFsaWQ9InllcyI+TGl2eSwgaWkuIDE2LCA3PC9iaWJsPikuPC9ub3RlPiBIZSB3YXMgYnVyaWVkLCB0b28sIGJ5IGV4cHJlc3Mgdm90ZSBvZiB0aGUgY2l0aXplbnMsIHdpdGhpbiB0aGUgY2l0eSwgbmVhciB0aGUgc28tY2FsbGVkIFZlbGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMTAuMiIgdmFsaWQ9InllcyI+IGNoYXB0ZXIgeC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGFsbCBoaXMgZmFtaWx5IHdlcmUgdG8gaGF2ZSBwcml2aWxlZ2Ugb2YgYnVyaWFsIHRoZXJlLiBOb3csIGhvd2V2ZXIsIG5vbmUgb2YgdGhlIGZhbWlseSBpcyBhY3R1YWxseSBidXJpZWQgdGhlcmUsIGJ1dCB0aGUgYm9keSBpcyBjYXJyaWVkIHRoaXRoZXIgYW5kIHNldCBkb3duLCBhbmQgc29tZSBvbmUgdGFrZXMgYSBidXJuaW5nIHRvcmNoIGFuZCBtb2xkcyBpdCB1bmRlciB0aGUgYmllciBmb3IgYW4gaW5zdGFudCwgYW5kIHRoZW4gdGFrZXMgaXQgYXdheSwgYXR0ZXN0aW5nIGJ5IHRoaXMgYWN0IHRoYXQgdGhlIGRlY2Vhc2VkIGhhcyB0aGUgcmlnaHQgb2YgYnVyaWFsIHRoZXJlLCBidXQgcmVsaW5xdWlzaGVzIHRoZSBob25vdXIuIEFmdGVyIHRoaXMgdGhlIGJvZHkgaXMgYm9ybmUgYXdheS4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQdWJsaWNvbGEsIGltbWVkaWF0ZWx5IGFmdGVyIGNlbGVicmF0aW5nIGhpcyB0cml1bXBoIGFuZCBoYW5kaW5nIHRoZSBjaXR5IG92ZXIgdG8gdGhlIGNvbnN1bHMgYXBwb2ludGVkIHRvIHN1Y2NlZWQgaGltLCBkaWVkLiBTbyBmYXIgYXMgaXQgY2FuIHBvc3NpYmx5IGJlIGFjaGlldmVkIGJ5IG1lbiB3aG8gYXJlIHJlZ2FyZGVkIGFzIGhvbm91cmFibGUgYW5kIGdvb2QsIGhlIGhhZCBicm91Z2h0IGhpcyBsaWZlIHRvIHBlcmZlY3Rpb24uIFRoZSBwZW9wbGUsIGFzIGlmIHRoZXkgaGFkIGRvbmUgbm90aGluZyB0byBzaG93IHRoZWlyIGVzdGVlbSBmb3IgaGltIHdoaWxlIGhlIHdhcyBhbGl2ZSwgYnV0IG93ZWQgaGltIGV2ZXJ5IGhvbWFnZSwgZGVjcmVlZCB0aGF0IGhpcyBib2R5IHNob3VsZCBiZSBidXJpZWQgYXQgdGhlIHB1YmxpYyBjaGFyZ2UsIGFuZCB0aGF0IGV2ZXJ5IG1hbiBzaG91bGQgY29udHJpYnV0ZSBhIHF1YWRyYW5zIHRvd2FyZHMgdGhlIGhvbm91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
