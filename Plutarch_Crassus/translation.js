var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgd2hlbiBoZSB3YXMgZnVydGhlciBvbiBpbiB5ZWFycywgaGUgd2FzIGFjY3VzZWQgb2YgY3JpbWluYWwgaW50aW1hY3kgd2l0aCBMaWNpbmlhLCBvbmUgb2YgdGhlIHZlc3RhbCB2aXJnaW5zLCBhbmQgTGljaW5pYSB3YXMgZm9ybWFsbHkgcHJvc2VjdXRlZCBieSBhIGNlcnRhaW4gUGxvdGl1cy4gTm93IExpY2luaWEgd2FzIHRoZSBvd25lciBvZiBhIHBsZWFzYW50IHZpbGxhIGluIHRoZSBzdWJ1cmJzIHdoaWNoIENyYXNzdXMgd2lzaGVkIHRvIGdldCBhdCBhIGxvdyBwcmljZSwgYW5kIGl0IHdhcyBmb3IgdGhpcyByZWFzb24gdGhhdCBoZSB3YXMgZm9yZXZlciBob3ZlcmluZyBhYm91dCB0aGUgd29tYW4gYW5kIHBheWluZyBoaXMgY291cnQgdG8gaGVyLCB1bnRpbCBoZSBmZWxsIHVuZGVyIHRoZSBhYm9taW5hYmxlIHN1c3BpY2lvbi4gQW5kIGluIGEgd2F5IGl0IHdhcyBoaXMgYXZhcmljZSB0aGF0IGFic29sdmVkIGhpbSBmcm9tIHRoZSBjaGFyZ2Ugb2YgY29ycnVwdGluZyB0aGUgdmVzdGFsLCBhbmQgaGUgd2FzIGFjcXVpdHRlZCBieSB0aGUganVkZ2VzLiBCdXQgaGUgZGlkIG5vdCBsZXQgTGljaW5pYSBnbyB1bnRpbCBoZSBoYWQgYWNxdWlyZWQgaGVyIHByb3BlcnR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIGl0IGlzIHRydWUsIHNheSB0aGF0IHRoZSBtYW55IHZpcnR1ZXMgb2YgQ3Jhc3N1cyB3ZXJlIG9ic2N1cmVkIGJ5IGhpcyBzb2xlIHZpY2Ugb2YgYXZhcmljZTsgYW5kIGl0IGlzIGxpa2VseSB0aGF0IHRoZSBvbmUgdmljZSB3aGljaCBiZWNhbWUgc3Ryb25nZXIgdGhhbiBhbGwgdGhlIG90aGVycyBpbiBoaW0sIHdlYWtlbmVkIHRoZSByZXN0LiBUaGUgY2hpZWYgcHJvb2ZzIG9mIGhpcyBhdmFyaWNlIGFyZSBmb3VuZCBpbiB0aGUgd2F5IGhlIGdvdCBoaXMgcHJvcGVydHkgYW5kIGluIHRoZSBhbW91bnQgb2YgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCB0aGUgb3V0c2V0IGhlIHdhcyBwb3NzZXNzZWQgb2Ygbm90IG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIHRhbGVudHM7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggZ2l2ZXMgR3JlZWsgdmFsdWVzLiBUaGUgdGFsZW50IHdhcyBhIHN1bSBvZiBtb25leSBuZWFybHkgZXF1aXZhbGVudCB0byDCozI0MCwgb3IgJDEyMDAsIHdpdGggbWFueSB0aW1lcyB0aGUgcHVyY2hhc2luZyBwb3dlciBvZiBtb25leSB0by1kYXkuPC9ub3RlPiB0aGVuIGR1cmluZyBoaXMgY29uc3Vsc2hpcCBoZSBzYWNyaWZpY2VkIHRoZSB0ZW50aCBvZiBoaXMgZ29vZHMgdG8gSGVyY3VsZXMsIGZlYXN0ZWQgdGhlIHBlb3BsZSwgZ2F2ZSBldmVyeSBSb21hbiBvdXQgb2YgaGlzIG93biBtZWFucyBlbm91Z2ggdG8gbGl2ZSBvbiBmb3IgdGhyZWUgbW9udGhzLCBhbmQgc3RpbGwsIHdoZW4gaGUgbWFkZSBhIHByaXZhdGUgaW52ZW50b3J5IG9mIGhpcyBwcm9wZXJ0eSBiZWZvcmUgaGlzIFBhcnRoaWFuIGV4cGVkaXRpb24sIGhlIGZvdW5kIHRoYXQgaXQgaGFkIGEgdmFsdWUgb2Ygc2V2ZW50eS1vbmUgaHVuZHJlZCB0YWxlbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZ3JlYXRlc3QgcGFydCBvZiB0aGlzLCBpZiBvbmUgbXVzdCB0ZWxsIHRoZSBzY2FuZGFsb3VzIHRydXRoLCBoZSBnb3QgdG9nZXRoZXIgb3V0IG9mIGZpcmUgYW5kIHdhciwgbWFraW5nIHRoZSBwdWJsaWMgY2FsYW1pdGllcyBoaXMgZ3JlYXRlc3Qgc291cmNlIG9mIHJldmVudWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zLCBpdCBpcyB0cnVlLCBzYXkgdGhhdCB0aGUgbWFueSB2aXJ0dWVzIG9mIENyYXNzdXMgd2VyZSBvYnNjdXJlZCBieSBoaXMgc29sZSB2aWNlIG9mIGF2YXJpY2U7IGFuZCBpdCBpcyBsaWtlbHkgdGhhdCB0aGUgb25lIHZpY2Ugd2hpY2ggYmVjYW1lIHN0cm9uZ2VyIHRoYW4gYWxsIHRoZSBvdGhlcnMgaW4gaGltLCB3ZWFrZW5lZCB0aGUgcmVzdC4gVGhlIGNoaWVmIHByb29mcyBvZiBoaXMgYXZhcmljZSBhcmUgZm91bmQgaW4gdGhlIHdheSBoZSBnb3QgaGlzIHByb3BlcnR5IGFuZCBpbiB0aGUgYW1vdW50IG9mIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCB0aGUgb3V0c2V0IGhlIHdhcyBwb3NzZXNzZWQgb2Ygbm90IG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIHRhbGVudHM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCBnaXZlcyBHcmVlayB2YWx1ZXMuIFRoZSB0YWxlbnQgd2FzIGEgc3VtIG9mIG1vbmV5IG5lYXJseSBlcXVpdmFsZW50IHRvIMKjMjQwLCBvciAkMTIwMCwgd2l0aCBtYW55IHRpbWVzIHRoZSBwdXJjaGFzaW5nIHBvd2VyIG9mIG1vbmV5IHRvLWRheS48L25vdGU+IHRoZW4gZHVyaW5nIGhpcyBjb25zdWxzaGlwIGhlIHNhY3JpZmljZWQgdGhlIHRlbnRoIG9mIGhpcyBnb29kcyB0byBIZXJjdWxlcywgZmVhc3RlZCB0aGUgcGVvcGxlLCBnYXZlIGV2ZXJ5IFJvbWFuIG91dCBvZiBoaXMgb3duIG1lYW5zIGVub3VnaCB0byBsaXZlIG9uIGZvciB0aHJlZSBtb250aHMsIGFuZCBzdGlsbCwgd2hlbiBoZSBtYWRlIGEgcHJpdmF0ZSBpbnZlbnRvcnkgb2YgaGlzIHByb3BlcnR5IGJlZm9yZSBoaXMgUGFydGhpYW4gZXhwZWRpdGlvbiwgaGUgZm91bmQgdGhhdCBpdCBoYWQgYSB2YWx1ZSBvZiBzZXZlbnR5LW9uZSBodW5kcmVkIHRhbGVudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdGVzdCBwYXJ0IG9mIHRoaXMsIGlmIG9uZSBtdXN0IHRlbGwgdGhlIHNjYW5kYWxvdXMgdHJ1dGgsIGhlIGdvdCB0b2dldGhlciBvdXQgb2YgZmlyZSBhbmQgd2FyLCBtYWtpbmcgdGhlIHB1YmxpYyBjYWxhbWl0aWVzIGhpcyBncmVhdGVzdCBzb3VyY2Ugb2YgcmV2ZW51ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gRm9yIHdoZW4gU3VsbGEgdG9vayB0aGUgY2l0eSBhbmQgc29sZCB0aGUgcHJvcGVydHkgb2YgdGhvc2Ugd2hvbSBoZSBoYWQgcHV0IHRvIGRlYXRoLCBjb25zaWRlcmluZyBpdCBhbmQgY2FsbGluZyBpdCBzcG9pbCBvZiB3YXIsIGFuZCB3aXNoaW5nIHRvIGRlZmlsZSB3aXRoIGhpcyBjcmltZSBhcyBtYW55IGFuZCBhcyBpbmZsdWVudGlhbCBtZW4gYXMgaGUgY291bGQsIENyYXNzdXMgd2FzIG5ldmVyIHRpcmVkIG9mIGFjY2VwdGluZyBvciBvZiBidXlpbmcgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDYuNiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIHRoaXMsIG9ic2VydmluZyBob3cgbmF0dXJhbCBhbmQgZmFtaWxpYXIgYXQgUm9tZSB3ZXJlIHN1Y2ggZmF0YWxpdGllcyBhcyB0aGUgY29uZmxhZ3JhdGlvbiBhbmQgY29sbGFwc2Ugb2YgYnVpbGRpbmdzLCBvd2luZyB0byB0aGVpciBiZWluZyB0b28gbWFzc2l2ZSBhbmQgY2xvc2UgdG9nZXRoZXIsIGhlIHByb2NlZWRlZCB0byBidXkgc2xhdmVzIHdobyB3ZXJlIGFyY2hpdGVjdHMgYW5kIGJ1aWxkZXJzLiBUaGVuLCB3aGVuIGhlIGhhZCBvdmVyIGZpdmUgaHVuZHJlZCBvZiB0aGVzZSwgaGUgd291bGQgYnV5IGhvdXNlcyB0aGF0IHdlcmUgYWZpcmUsIGFuZCBob3VzZXMgd2hpY2ggYWRqb2luZWQgdGhvc2UgdGhhdCB3ZXJlIGFmaXJlLCBhbmQgdGhlc2UgdGhlaXIgb3duZXJzIHdvdWxkIGxldCBnbyBhdCBhIHRyaWZsaW5nIHByaWNlIG93aW5nIHRvIHRoZWlyIGZlYXIgYW5kIHVuY2VydGFpbnR5LiBJbiB0aGlzIHdheSB0aGUgbGFyZ2VzdCBwYXJ0IG9mIFJvbWUgY2FtZSBpbnRvIGhpcyBwb3NzZXNzaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhvdWdoIGhlIG93bmVkIHNvIG1hbnkgYXJ0aXNhbnMsIGhlIGJ1aWx0IG5vIGhvdXNlIGZvciBoaW1zZWxmIG90aGVyIHRoYW4gdGhlIG9uZSBpbiB3aGljaCBoZSBsaXZlZDsgaW5kZWVkLCBoZSB1c2VkIHRvIHNheSB0aGF0IG1lbiB3aG8gd2VyZSBmb25kIG9mIGJ1aWxkaW5nIHdlcmUgdGhlaXIgb3duIHVuZG9lcnMsIGFuZCBuZWVkZWQgbm8gb3RoZXIgZm9lcy4gQW5kIHRob3VnaCBoZSBvd25lZCBudW1iZXJsZXNzIHNpbHZlciBtaW5lcywgYW5kIGhpZ2hseSB2YWx1YWJsZSB0cmFjdHMgb2YgbGFuZCB3aXRoIHRoZSBsYWJvdXJlcnMgdXBvbiB0aGVtLCBuZXZlcnRoZWxlc3Mgb25lIG5pZ2h0IHJlZ2FyZCBhbGwgdGhpcyBhcyBub3RoaW5nIGNvbXBhcmVkIHdpdGggdGhlIHZhbHVlIG9mIGhpcyBzbGF2ZXM7IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNvIG1hbnkgYW5kIHNvIGNhcGFibGUgd2VyZSB0aGUgc2xhdmVzIGhlIHBvc3Nlc3NlZCzigJRyZWFkZXJzLCBhbWFudWVuc2VzLCBzaWx2ZXItIHNtaXRocywgc3Rld2FyZHMsIHRhYmxlLXNlcnZhbnRzOyBhbmQgaGUgaGltc2VsZiBkaXJlY3RlZCB0aGVpciBlZHVjYXRpb24sIGFuZCB0b29rIHBhcnQgaW4gaXQgaGltc2VsZiBhcyBhIHRlYWNoZXIsIGFuZCwgaW4gYSB3b3JkLCBoZSB0aG91Z2h0IHRoYXQgdGhlIGNoaWVmIGR1dHkgb2YgdGhlIG1hc3RlciB3YXMgdG8gY2FyZSBmb3IgaGlzIHNsYXZlcyBhcyB0aGUgbGl2aW5nIGltcGxlbWVudHMgb2YgaG91c2Vob2xkIG1hbmFnZW1lbnQuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDYuNiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiA2LjYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuIDYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIHRoaXMsIG9ic2VydmluZyBob3cgbmF0dXJhbCBhbmQgZmFtaWxpYXIgYXQgUm9tZSB3ZXJlIHN1Y2ggZmF0YWxpdGllcyBhcyB0aGUgY29uZmxhZ3JhdGlvbiBhbmQgY29sbGFwc2Ugb2YgYnVpbGRpbmdzLCBvd2luZyB0byB0aGVpciBiZWluZyB0b28gbWFzc2l2ZSBhbmQgY2xvc2UgdG9nZXRoZXIsIGhlIHByb2NlZWRlZCB0byBidXkgc2xhdmVzIHdobyB3ZXJlIGFyY2hpdGVjdHMgYW5kIGJ1aWxkZXJzLiBUaGVuLCB3aGVuIGhlIGhhZCBvdmVyIGZpdmUgaHVuZHJlZCBvZiB0aGVzZSwgaGUgd291bGQgYnV5IGhvdXNlcyB0aGF0IHdlcmUgYWZpcmUsIGFuZCBob3VzZXMgd2hpY2ggYWRqb2luZWQgdGhvc2UgdGhhdCB3ZXJlIGFmaXJlLCBhbmQgdGhlc2UgdGhlaXIgb3duZXJzIHdvdWxkIGxldCBnbyBhdCBhIHRyaWZsaW5nIHByaWNlIG93aW5nIHRvIHRoZWlyIGZlYXIgYW5kIHVuY2VydGFpbnR5LiBJbiB0aGlzIHdheSB0aGUgbGFyZ2VzdCBwYXJ0IG9mIFJvbWUgY2FtZSBpbnRvIGhpcyBwb3NzZXNzaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggaGUgb3duZWQgc28gbWFueSBhcnRpc2FucywgaGUgYnVpbHQgbm8gaG91c2UgZm9yIGhpbXNlbGYgb3RoZXIgdGhhbiB0aGUgb25lIGluIHdoaWNoIGhlIGxpdmVkOyBpbmRlZWQsIGhlIHVzZWQgdG8gc2F5IHRoYXQgbWVuIHdobyB3ZXJlIGZvbmQgb2YgYnVpbGRpbmcgd2VyZSB0aGVpciBvd24gdW5kb2VycywgYW5kIG5lZWRlZCBubyBvdGhlciBmb2VzLiBBbmQgdGhvdWdoIGhlIG93bmVkIG51bWJlcmxlc3Mgc2lsdmVyIG1pbmVzLCBhbmQgaGlnaGx5IHZhbHVhYmxlIHRyYWN0cyBvZiBsYW5kIHdpdGggdGhlIGxhYm91cmVycyB1cG9uIHRoZW0sIG5ldmVydGhlbGVzcyBvbmUgbmlnaHQgcmVnYXJkIGFsbCB0aGlzIGFzIG5vdGhpbmcgY29tcGFyZWQgd2l0aCB0aGUgdmFsdWUgb2YgaGlzIHNsYXZlczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNvIG1hbnkgYW5kIHNvIGNhcGFibGUgd2VyZSB0aGUgc2xhdmVzIGhlIHBvc3Nlc3NlZCzigJRyZWFkZXJzLCBhbWFudWVuc2VzLCBzaWx2ZXItIHNtaXRocywgc3Rld2FyZHMsIHRhYmxlLXNlcnZhbnRzOyBhbmQgaGUgaGltc2VsZiBkaXJlY3RlZCB0aGVpciBlZHVjYXRpb24sIGFuZCB0b29rIHBhcnQgaW4gaXQgaGltc2VsZiBhcyBhIHRlYWNoZXIsIGFuZCwgaW4gYSB3b3JkLCBoZSB0aG91Z2h0IHRoYXQgdGhlIGNoaWVmIGR1dHkgb2YgdGhlIG1hc3RlciB3YXMgdG8gY2FyZSBmb3IgaGlzIHNsYXZlcyBhcyB0aGUgbGl2aW5nIGltcGxlbWVudHMgb2YgaG91c2Vob2xkIG1hbmFnZW1lbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGlzIENyYXNzdXMgd2FzIHJpZ2h0LCBpZiwgYXMgaGUgdXNlZCB0byBzYXksIGhlIGhlbGQgdGhhdCBhbnl0aGluZyBlbHNlIHdhcyB0byBiZSBkb25lIGZvciBoaW0gYnkgaGlzIHNsYXZlcywgYnV0IGhpcyBzbGF2ZXMgd2VyZSB0byBiZSBnb3Zlcm5lZCBieSB0aGVpciBtYXN0ZXIuIEZvciBob3VzZWhvbGQgbWFuYWdlbWVudCwgYXMgd2Ugc2VlLCBpcyBhIGJyYW5jaCBvZiBmaW5hbmNlIGluIHNvIGZhciBhcyBpdCBkZWFscyB3aXRoIGxpZmVsZXNzIHRoaW5nczsgYnV0IGEgYnJhbmNoIG9mIHBvbGl0aWNzIHdoZW4gaXQgZGVhbHMgd2l0aCBtZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIj5BcmlzdG90bGUsIFBvbC4gaS4gMTI1M2IgMzIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEhlIHdhcyBub3QgcmlnaHQsIGhvd2V2ZXIsIGluIHRoaW5raW5nLCBhbmQgaW4gc2F5aW5nIHRvbywgdGhhdCBubyBvbmUgd2FzIHJpY2ggd2hvIGNvdWxkIG5vdCBzdXBwb3J0IGFuIGFybXkgb3V0IG9mIGhpcyBzdWJzdGFuY2U7IAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmZvciAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndhciBoYXMgbm8gZml4ZWQgcmF0aW9ucyw8L3E+IGFzIEtpbmcgQWNoaWRhbXVzIHNhaWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjcuMSIgdmFsaWQ9InllcyI+Q2xlb21lbmVzIHh4dmlpLiAxPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMTkwYSI+TW9yYWxzLCAxOTBhPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMjE5YSI+MjE5YTwvYmlibD4uIEluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDE3LjMiIHZhbGlkPSJ5ZXMiPkRlbW9zdGhlbmVzLCB4dmlpLiAzPC9iaWJsPiwgdGhlIHNheWluZyBpcyBwdXQgaW4gdGhlIG1vdXRoIG9mIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNyb2J5bHVzLDwvcT4gYXMgSGVnZXNpcHB1cyB0aGUgQXRoZW5pYW4gb3JhdG9yIHdhcyBmYW1pbGlhcmx5IGNhbGxlZC48L25vdGU+IGFuZCB0aGVyZWZvcmUgdGhlIHdlYWx0aCByZXF1aXNpdGUgZm9yIHdhciBjYW5ub3QgYmUgZGV0ZXJtaW5lZC4gRmFyIGRpZmZlcmVudCB3YXMgdGhlIG9waW5pb24gb2YgTWFyaXVzLCB3aG8gc2FpZCwgYWZ0ZXIgZGlzdHJpYnV0aW5nIHRvIGVhY2ggb2YgaGlzIHZldGVyYW5zIGZvdXJ0ZWVuIGFjcmVzIG9mIGxhbmQgYW5kIGRpc2NvdmVyaW5nIHRoYXQgdGhleSBkZXNpcmVkIG1vcmUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWF5IG5vIFJvbWFuIGV2ZXIgdGhpbmsgdGhhdCBsYW5kIHRvbyBzbWFsbCB3aGljaCBzdWZmaWNlcyB0byBtYWludGFpbiBoaW0uPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGlzIENyYXNzdXMgd2FzIHJpZ2h0LCBpZiwgYXMgaGUgdXNlZCB0byBzYXksIGhlIGhlbGQgdGhhdCBhbnl0aGluZyBlbHNlIHdhcyB0byBiZSBkb25lIGZvciBoaW0gYnkgaGlzIHNsYXZlcywgYnV0IGhpcyBzbGF2ZXMgd2VyZSB0byBiZSBnb3Zlcm5lZCBieSB0aGVpciBtYXN0ZXIuIEZvciBob3VzZWhvbGQgbWFuYWdlbWVudCwgYXMgd2Ugc2VlLCBpcyBhIGJyYW5jaCBvZiBmaW5hbmNlIGluIHNvIGZhciBhcyBpdCBkZWFscyB3aXRoIGxpZmVsZXNzIHRoaW5nczsgYnV0IGEgYnJhbmNoIG9mIHBvbGl0aWNzIHdoZW4gaXQgZGVhbHMgd2l0aCBtZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+QXJpc3RvdGxlLCBQb2wuIGkuIDEyNTNiIDMyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIZSB3YXMgbm90IHJpZ2h0LCBob3dldmVyLCBpbiB0aGlua2luZywgYW5kIGluIHNheWluZyB0b28sIHRoYXQgbm8gb25lIHdhcyByaWNoIHdobyBjb3VsZCBub3Qgc3VwcG9ydCBhbiBhcm15IG91dCBvZiBoaXMgc3Vic3RhbmNlOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkFyaXN0b3RsZSwgUG9sLiBpLiAxMjUzYiAzMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmZvciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2FyIGhhcyBubyBmaXhlZCByYXRpb25zLDwvcT4gYXMgS2luZyBBY2hpZGFtdXMgc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjcuMSIgdmFsaWQ9InllcyI+Q2xlb21lbmVzIHh4dmlpLiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTBhIj5Nb3JhbHMsIDE5MGE8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDIxOWEiPjIxOWE8L2JpYmw+LiBJbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDE3LjMiIHZhbGlkPSJ5ZXMiPkRlbW9zdGhlbmVzLCB4dmlpLiAzPC9iaWJsPiwgdGhlIHNheWluZyBpcyBwdXQgaW4gdGhlIG1vdXRoIG9mIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3JvYnlsdXMsPC9xPiBhcyBIZWdlc2lwcHVzIHRoZSBBdGhlbmlhbiBvcmF0b3Igd2FzIGZhbWlsaWFybHkgY2FsbGVkLjwvbm90ZT4gYW5kIHRoZXJlZm9yZSB0aGUgd2VhbHRoIHJlcXVpc2l0ZSBmb3Igd2FyIGNhbm5vdCBiZSBkZXRlcm1pbmVkLiBGYXIgZGlmZmVyZW50IHdhcyB0aGUgb3BpbmlvbiBvZiBNYXJpdXMsIHdobyBzYWlkLCBhZnRlciBkaXN0cmlidXRpbmcgdG8gZWFjaCBvZiBoaXMgdmV0ZXJhbnMgZm91cnRlZW4gYWNyZXMgb2YgbGFuZCBhbmQgZGlzY292ZXJpbmcgdGhhdCB0aGV5IGRlc2lyZWQgbW9yZSwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjcuMSIgdmFsaWQ9InllcyI+Q2xlb21lbmVzIHh4dmlpLiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTBhIj5Nb3JhbHMsIDE5MGE8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDIxOWEiPjIxOWE8L2JpYmw+LiBJbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDE3LjMiIHZhbGlkPSJ5ZXMiPkRlbW9zdGhlbmVzLCB4dmlpLiAzPC9iaWJsPiwgdGhlIHNheWluZyBpcyBwdXQgaW4gdGhlIG1vdXRoIG9mIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3JvYnlsdXMsPC9xPiBhcyBIZWdlc2lwcHVzIHRoZSBBdGhlbmlhbiBvcmF0b3Igd2FzIGZhbWlsaWFybHkgY2FsbGVkLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWF5IG5vIFJvbWFuIGV2ZXIgdGhpbmsgdGhhdCBsYW5kIHRvbyBzbWFsbCB3aGljaCBzdWZmaWNlcyB0byBtYWludGFpbiBoaW0uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENyYXNzdXMgd2FzIGdlbmVyb3VzIHdpdGggc3RyYW5nZXJzLCBmb3IgaGlzIGhvdXNlIHdhcyBvcGVuIHRvIGFsbDsgYW5kIGhlIHVzZWQgdG8gbGVuZCBtb25leSB0byBoaXMgZnJpZW5kcyB3aXRob3V0IGludGVyZXN0LCBidXQgaGUgd291bGQgZGVtYW5kIGl0IGJhY2sgZnJvbSB0aGUgYm9ycm93ZXIgcmVsZW50bGVzc2x5IHdoZW4gdGhlIHRpbWUgaGFkIGV4cGlyZWQsIGFuZCBzbyB0aGUgZ3JhdHVpdHkgb2YgdGhlIGxvYW4gd2FzIG1vcmUgYnVyZGVuc29tZSB0aGFuIGhlYXZ5IGludGVyZXN0LiBXaGVuIGhlIGVudGVydGFpbmVkIGF0IHRhYmxlLCBoaXMgaW52aXRlZCBndWVzdHMgd2VyZSBmb3IgdGhlIG1vc3QgcGFydCBwbGViZWlhbnMgYW5kIG1lbiBvZiB0aGUgcGVvcGxlLCBhbmQgdGhlIHNpbXBsaWNpdHkgb2YgdGhlIHJlcGFzdCB3YXMgY29tYmluZWQgd2l0aCBhIG5lYXRuZXNzIGFuZCBnb29kIGNoZWVyIHdoaWNoIGdhdmUgbW9yZSBwbGVhc3VyZSB0aGFuIGxhdmlzaCBleHBlbmRpdHVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBDcmFzc3VzIHdhcyBnZW5lcm91cyB3aXRoIHN0cmFuZ2VycywgZm9yIGhpcyBob3VzZSB3YXMgb3BlbiB0byBhbGw7IGFuZCBoZSB1c2VkIHRvIGxlbmQgbW9uZXkgdG8gaGlzIGZyaWVuZHMgd2l0aG91dCBpbnRlcmVzdCwgYnV0IGhlIHdvdWxkIGRlbWFuZCBpdCBiYWNrIGZyb20gdGhlIGJvcnJvd2VyIHJlbGVudGxlc3NseSB3aGVuIHRoZSB0aW1lIGhhZCBleHBpcmVkLCBhbmQgc28gdGhlIGdyYXR1aXR5IG9mIHRoZSBsb2FuIHdhcyBtb3JlIGJ1cmRlbnNvbWUgdGhhbiBoZWF2eSBpbnRlcmVzdC4gV2hlbiBoZSBlbnRlcnRhaW5lZCBhdCB0YWJsZSwgaGlzIGludml0ZWQgZ3Vlc3RzIHdlcmUgZm9yIHRoZSBtb3N0IHBhcnQgcGxlYmVpYW5zIGFuZCBtZW4gb2YgdGhlIHBlb3BsZSwgYW5kIHRoZSBzaW1wbGljaXR5IG9mIHRoZSByZXBhc3Qgd2FzIGNvbWJpbmVkIHdpdGggYSBuZWF0bmVzcyBhbmQgZ29vZCBjaGVlciB3aGljaCBnYXZlIG1vcmUgcGxlYXN1cmUgdGhhbiBsYXZpc2ggZXhwZW5kaXR1cmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgbGl0ZXJhcnkgcHVyc3VpdHMsIGhlIGN1bHRpdmF0ZWQgY2hpZWZseSB0aGUgYXJ0IG9mIHNwZWFraW5nIHdoaWNoIHdhcyBvZiBnZW5lcmFsIHNlcnZpY2UsIGFuZCBhZnRlciBtYWtpbmcgaGltc2VsZiBvbmUgb2YgdGhlIG1vc3QgcG93ZXJmdWwgc3BlYWtlcnMgYXQgUm9tZSwgaGlzIGNhcmUgYW5kIGFwcGxpY2F0aW9uIGVuYWJsZWQgaGltIHRvIHN1cnBhc3MgdGhvc2Ugd2hvIHdlcmUgbW9zdCBnaWZ0ZWQgYnkgbmF0dXJlLiBGb3IgdGhlcmUgd2FzIG5vIGNhc2UsIHRoZXkgc2F5LCBob3dldmVyIHRyaWZsaW5nIGFuZCBldmVuIGNvbnRlbXB0aWJsZSBpdCBtaWdodCBiZSwgd2hpY2ggaGUgdW5kZXJ0b29rIHdpdGhvdXQgcHJlcGFyYXRpb24sIGJ1dCBvZnRlbiwgd2hlbiBQb21wZXkgYW5kIENhZXNhciBhbmQgQ2ljZXJvIHdlcmUgdW53aWxsaW5nIHRvIHBsZWFkLCBoZSB3b3VsZCBwZXJmb3JtIGFsbCB0aGUgZHV0aWVzIG9mIGFuIGFkdm9jYXRlLiBBbmQgb24gdGhpcyBhY2NvdW50IGhlIGJlY2FtZSBtb3JlIHBvcHVsYXIgdGhhbiB0aGV5LCBiZWluZyBlc3RlZW1lZCBhIGNhcmVmdWwgbWFuLCBhbmQgb25lIHdobyB3YXMgcmVhZHkgd2l0aCBoaXMgaGVscC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgcGxlYXNlZCBwZW9wbGUgYWxzbyBieSB0aGUga2luZGx5IGFuZCB1bmFmZmVjdGVkIG1hbm5lciB3aXRoIHdoaWNoIGhlIGNsYXNwZWQgdGhlaXIgaGFuZHMgYW5kIGFkZHJlc3NlZCB0aGVtLiBGb3IgaGUgbmV2ZXIgbWV0IGEgUm9tYW4gc28gb2JzY3VyZSBhbmQgbG93bHkgdGhhdCBoZSBkaWQgbm90IHJldHVybiBoaXMgZ3JlZXRpbmcgYW5kIGNhbGwgaGltIGJ5IG5hbWUuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IGhlIHdhcyB3ZWxsIHZlcnNlZCBpbiBoaXN0b3J5LCBhbmQgd2FzIHNvbWV0aGluZyBvZiBhIHBoaWxvc29waGVyIHdpdGhhbCwgYXR0YWNoaW5nIGhpbXNlbGYgdG8gdGhlIGRvY3RyaW5lcyBvZiBBcmlzdG90bGUsIGluIHdoaWNoIGhlIGhhZCBBbGV4YW5kZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZXJoYXBzIEFsZXhhbmRlciBDb3JuZWxpdXMsIHN1cm5hbWVkIFBvbHloaXN0b3IsIGEgY29udGVtcG9yYXJ5IG9mIFN1bGxhLjwvbm90ZT4gYXMgYSB0ZWFjaGVyLiBUaGlzIG1hbiBnYXZlIHByb29mIG9mIGNvbnRlbnRlZG5lc3MgYW5kIG1lZWtuZXNzIGJ5IGhpcyBpbnRpbWFjeSB3aXRoIENyYXNzdXM7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmZvciBpdCBpcyBub3QgZWFzeSB0byBzYXkgd2hldGhlciBoZSB3YXMgcG9vcmVyIGJlZm9yZSBvciBhZnRlciBoaXMgcmVsYXRpb25zIHdpdGggaGlzIHB1cGlsLiBBdCBhbnkgcmF0ZSBoZSB3YXMgdGhlIG9ubHkgb25lIG9mIHRoZSBmcmllbmRzIG9mIENyYXNzdXMgd2hvIGFsd2F5cyBhY2NvbXBhbmllZCBoaW0gd2hlbiBoZSB3ZW50IGFicm9hZCwgYW5kIHRoZW4gaGUgd291bGQgcmVjZWl2ZSBhIGNsb2FrIGZvciB0aGUgam91cm5leSwgd2hpY2ggd291bGQgYmUgcmVjbGFpbWVkIG9uIGhpcyByZXR1cm4uIEJ1dCB0aGlzIHdhcyBsYXRlciBvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgbGl0ZXJhcnkgcHVyc3VpdHMsIGhlIGN1bHRpdmF0ZWQgY2hpZWZseSB0aGUgYXJ0IG9mIHNwZWFraW5nIHdoaWNoIHdhcyBvZiBnZW5lcmFsIHNlcnZpY2UsIGFuZCBhZnRlciBtYWtpbmcgaGltc2VsZiBvbmUgb2YgdGhlIG1vc3QgcG93ZXJmdWwgc3BlYWtlcnMgYXQgUm9tZSwgaGlzIGNhcmUgYW5kIGFwcGxpY2F0aW9uIGVuYWJsZWQgaGltIHRvIHN1cnBhc3MgdGhvc2Ugd2hvIHdlcmUgbW9zdCBnaWZ0ZWQgYnkgbmF0dXJlLiBGb3IgdGhlcmUgd2FzIG5vIGNhc2UsIHRoZXkgc2F5LCBob3dldmVyIHRyaWZsaW5nIGFuZCBldmVuIGNvbnRlbXB0aWJsZSBpdCBtaWdodCBiZSwgd2hpY2ggaGUgdW5kZXJ0b29rIHdpdGhvdXQgcHJlcGFyYXRpb24sIGJ1dCBvZnRlbiwgd2hlbiBQb21wZXkgYW5kIENhZXNhciBhbmQgQ2ljZXJvIHdlcmUgdW53aWxsaW5nIHRvIHBsZWFkLCBoZSB3b3VsZCBwZXJmb3JtIGFsbCB0aGUgZHV0aWVzIG9mIGFuIGFkdm9jYXRlLiBBbmQgb24gdGhpcyBhY2NvdW50IGhlIGJlY2FtZSBtb3JlIHBvcHVsYXIgdGhhbiB0aGV5LCBiZWluZyBlc3RlZW1lZCBhIGNhcmVmdWwgbWFuLCBhbmQgb25lIHdobyB3YXMgcmVhZHkgd2l0aCBoaXMgaGVscC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHBsZWFzZWQgcGVvcGxlIGFsc28gYnkgdGhlIGtpbmRseSBhbmQgdW5hZmZlY3RlZCBtYW5uZXIgd2l0aCB3aGljaCBoZSBjbGFzcGVkIHRoZWlyIGhhbmRzIGFuZCBhZGRyZXNzZWQgdGhlbS4gRm9yIGhlIG5ldmVyIG1ldCBhIFJvbWFuIHNvIG9ic2N1cmUgYW5kIGxvd2x5IHRoYXQgaGUgZGlkIG5vdCByZXR1cm4gaGlzIGdyZWV0aW5nIGFuZCBjYWxsIGhpbSBieSBuYW1lLiBJdCBpcyBzYWlkIGFsc28gdGhhdCBoZSB3YXMgd2VsbCB2ZXJzZWQgaW4gaGlzdG9yeSwgYW5kIHdhcyBzb21ldGhpbmcgb2YgYSBwaGlsb3NvcGhlciB3aXRoYWwsIGF0dGFjaGluZyBoaW1zZWxmIHRvIHRoZSBkb2N0cmluZXMgb2YgQXJpc3RvdGxlLCBpbiB3aGljaCBoZSBoYWQgQWxleGFuZGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZXJoYXBzIEFsZXhhbmRlciBDb3JuZWxpdXMsIHN1cm5hbWVkIFBvbHloaXN0b3IsIGEgY29udGVtcG9yYXJ5IG9mIFN1bGxhLjwvbm90ZT4gYXMgYSB0ZWFjaGVyLiBUaGlzIG1hbiBnYXZlIHByb29mIG9mIGNvbnRlbnRlZG5lc3MgYW5kIG1lZWtuZXNzIGJ5IGhpcyBpbnRpbWFjeSB3aXRoIENyYXNzdXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmZvciBpdCBpcyBub3QgZWFzeSB0byBzYXkgd2hldGhlciBoZSB3YXMgcG9vcmVyIGJlZm9yZSBvciBhZnRlciBoaXMgcmVsYXRpb25zIHdpdGggaGlzIHB1cGlsLiBBdCBhbnkgcmF0ZSBoZSB3YXMgdGhlIG9ubHkgb25lIG9mIHRoZSBmcmllbmRzIG9mIENyYXNzdXMgd2hvIGFsd2F5cyBhY2NvbXBhbmllZCBoaW0gd2hlbiBoZSB3ZW50IGFicm9hZCwgYW5kIHRoZW4gaGUgd291bGQgcmVjZWl2ZSBhIGNsb2FrIGZvciB0aGUgam91cm5leSwgd2hpY2ggd291bGQgYmUgcmVjbGFpbWVkIG9uIGhpcyByZXR1cm4uIEJ1dCB0aGlzIHdhcyBsYXRlciBvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENpbm5hIGFuZCBNYXJpdXMgZ290IHRoZSB1cHBlciBoYW5kLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg3IEIuQy4gQ3Jhc3N1cyB3YXMgdGhlbiBub3QgcXVpdGUgdHdlbnR5IHllYXJzIG9mIGFnZS48L25vdGU+IGl0IHdhcyBhdCBvbmNlIGFwcGFyZW50IHRoYXQgdGhleSB3b3VsZCByZS1lbnRlciB0aGUgY2l0eSBub3QgZm9yIHRoZSBnb29kIG9mIHRoZWlyIGNvdW50cnksIGJ1dCBmb3IgdGhlIGRvd25yaWdodCBkZXN0cnVjdGlvbiBhbmQgcnVpbiBvZiB0aGUgbm9ibGVzOyB0aG9zZSB3aG8gd2VyZSBjYXVnaHQgd2VyZSBzbGFpbiwgYW5kIGFtb25nIHRoZW0gd2VyZSB0aGUgZmF0aGVyIGFuZCBicm90aGVyIG9mIENyYXNzdXMuIENyYXNzdXMgaGltc2VsZiwgYmVpbmcgdmVyeSB5b3VuZywgZXNjYXBlZCB0aGUgaW1tZWRpYXRlIHBlcmlsLCBidXQgcGVyY2VpdmluZyB0aGF0IGhlIHdhcyBzdXJyb3VuZGVkIG9uIGFsbCBzaWRlcyBieSB0aGUgaHVudHNtZW4gb2YgdGhlIHR5cmFudHMsIGhlIHRvb2sgd2l0aCBoaW0gdGhyZWUgZnJpZW5kcyBhbmQgdGVuIHNlcnZhbnRzIGFuZCBmbGVkIHdpdGggZXhjZWVkaW5nIHNwZWVkIGludG8gU3BhaW4sIHdoZXJlIGhlIGhhZCBiZWVuIGJlZm9yZSwgd2hpbGUgaGlzIGZhdGhlciB3YXMgcHJhZXRvciB0aGVyZSwgYW5kIGhhZCBtYWRlIGZyaWVuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5kaW5nIGFsbCBtZW4gZmlsbGVkIHdpdGggZmVhciBhbmQgdHJlbWJsaW5nIGF0IHRoZSBjcnVlbHR5IG9mIE1hcml1cyBhcyB0aG91Z2ggaGUgd2VyZSBjbG9zZSB1cG9uIHRoZW0sIGhlIGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gcHJlc2VudCBoaW1zZWxmIHRvIGFueSBvbmUuIEluc3RlYWQsIGhlIHBsdW5nZWQgaW50byBzb21lIGZpZWxkcyBhbG9uZyB0aGUgc2VhLXNob3JlIGJlbG9uZ2luZyB0byBWaWJpdXMgUGFjaWFjdXMuIEluIHRoZXNlIHRoZXJlIHdhcyBhIHNwYWNpb3VzIGNhdmUsIHdoZXJlIGhlIGhpZCBoaW1zZWxmLiBIb3dldmVyLCBzaW5jZSBoaXMgcHJvdmlzaW9ucyB3ZXJlIG5vdyBydW5uaW5nIGxvdywgYW5kIHdpc2hpbmcgdG8gc291bmQgdGhlIG1hbiwgaGUgc2VudCBhIHNsYXZlIHRvIFZpYml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFZpYml1cywgb24gaGVhcmluZyB0aGUgbWVzc2FnZSwgd2FzIGRlbGlnaHRlZCB0aGF0IENyYXNzdXMgaGFkIGVzY2FwZWQsIGFuZCBhZnRlciBsZWFybmluZyB0aGUgbnVtYmVyIG9mIGhpcyBwYXJ0eSBhbmQgdGhlIHBsYWNlIG9mIHRoZWlyIGNvbmNlYWxtZW50LCBkaWQgbm90IGluZGVlZCBjb21lIGluIHBlcnNvbiB0byBzZWUgdGhlbSwgYnV0IGJyb3VnaHQgdGhlIG92ZXJzZWVyIG9mIHRoZSBwcm9wZXJ0eSBuZWFyIHRoZSBwbGFjZSwgYW5kIG9yZGVyZWQgaGltIHRvIGJyaW5nIGEgY29tcGxldGUgbWVhbCB0aGVyZSBldmVyeSBkYXksIHB1dCBpdCBuZWFyIHRoZSBjbGlmZiwgYW5kIHRoZW4gZ28gYXdheSB3aXRob3V0IGEgd29yZDsgaGUgd2FzIG5vdCB0byBtZWRkbGUgaW4gdGhlIG1hdHRlciBub3IgaW52ZXN0aWdhdGUgaXQsIGFuZCB3YXMgdGhyZWF0ZW5lZCB3aXRoIGRlYXRoIGlmIGhlIGRpZCBtZWRkbGUsIGFuZCBwcm9taXNlZCBoaXMgZnJlZWRvbSBpZiBoZSBjby1vcGVyYXRlZCBmYWl0aGZ1bGx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENpbm5hIGFuZCBNYXJpdXMgZ290IHRoZSB1cHBlciBoYW5kLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLiBDcmFzc3VzIHdhcyB0aGVuIG5vdCBxdWl0ZSB0d2VudHkgeWVhcnMgb2YgYWdlLjwvbm90ZT4gaXQgd2FzIGF0IG9uY2UgYXBwYXJlbnQgdGhhdCB0aGV5IHdvdWxkIHJlLWVudGVyIHRoZSBjaXR5IG5vdCBmb3IgdGhlIGdvb2Qgb2YgdGhlaXIgY291bnRyeSwgYnV0IGZvciB0aGUgZG93bnJpZ2h0IGRlc3RydWN0aW9uIGFuZCBydWluIG9mIHRoZSBub2JsZXM7IHRob3NlIHdobyB3ZXJlIGNhdWdodCB3ZXJlIHNsYWluLCBhbmQgYW1vbmcgdGhlbSB3ZXJlIHRoZSBmYXRoZXIgYW5kIGJyb3RoZXIgb2YgQ3Jhc3N1cy4gQ3Jhc3N1cyBoaW1zZWxmLCBiZWluZyB2ZXJ5IHlvdW5nLCBlc2NhcGVkIHRoZSBpbW1lZGlhdGUgcGVyaWwsIGJ1dCBwZXJjZWl2aW5nIHRoYXQgaGUgd2FzIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHRoZSBodW50c21lbiBvZiB0aGUgdHlyYW50cywgaGUgdG9vayB3aXRoIGhpbSB0aHJlZSBmcmllbmRzIGFuZCB0ZW4gc2VydmFudHMgYW5kIGZsZWQgd2l0aCBleGNlZWRpbmcgc3BlZWQgaW50byBTcGFpbiwgd2hlcmUgaGUgaGFkIGJlZW4gYmVmb3JlLCB3aGlsZSBoaXMgZmF0aGVyIHdhcyBwcmFldG9yIHRoZXJlLCBhbmQgaGFkIG1hZGUgZnJpZW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5kaW5nIGFsbCBtZW4gZmlsbGVkIHdpdGggZmVhciBhbmQgdHJlbWJsaW5nIGF0IHRoZSBjcnVlbHR5IG9mIE1hcml1cyBhcyB0aG91Z2ggaGUgd2VyZSBjbG9zZSB1cG9uIHRoZW0sIGhlIGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gcHJlc2VudCBoaW1zZWxmIHRvIGFueSBvbmUuIEluc3RlYWQsIGhlIHBsdW5nZWQgaW50byBzb21lIGZpZWxkcyBhbG9uZyB0aGUgc2VhLXNob3JlIGJlbG9uZ2luZyB0byBWaWJpdXMgUGFjaWFjdXMuIEluIHRoZXNlIHRoZXJlIHdhcyBhIHNwYWNpb3VzIGNhdmUsIHdoZXJlIGhlIGhpZCBoaW1zZWxmLiBIb3dldmVyLCBzaW5jZSBoaXMgcHJvdmlzaW9ucyB3ZXJlIG5vdyBydW5uaW5nIGxvdywgYW5kIHdpc2hpbmcgdG8gc291bmQgdGhlIG1hbiwgaGUgc2VudCBhIHNsYXZlIHRvIFZpYml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBWaWJpdXMsIG9uIGhlYXJpbmcgdGhlIG1lc3NhZ2UsIHdhcyBkZWxpZ2h0ZWQgdGhhdCBDcmFzc3VzIGhhZCBlc2NhcGVkLCBhbmQgYWZ0ZXIgbGVhcm5pbmcgdGhlIG51bWJlciBvZiBoaXMgcGFydHkgYW5kIHRoZSBwbGFjZSBvZiB0aGVpciBjb25jZWFsbWVudCwgZGlkIG5vdCBpbmRlZWQgY29tZSBpbiBwZXJzb24gdG8gc2VlIHRoZW0sIGJ1dCBicm91Z2h0IHRoZSBvdmVyc2VlciBvZiB0aGUgcHJvcGVydHkgbmVhciB0aGUgcGxhY2UsIGFuZCBvcmRlcmVkIGhpbSB0byBicmluZyBhIGNvbXBsZXRlIG1lYWwgdGhlcmUgZXZlcnkgZGF5LCBwdXQgaXQgbmVhciB0aGUgY2xpZmYsIGFuZCB0aGVuIGdvIGF3YXkgd2l0aG91dCBhIHdvcmQ7IGhlIHdhcyBub3QgdG8gbWVkZGxlIGluIHRoZSBtYXR0ZXIgbm9yIGludmVzdGlnYXRlIGl0LCBhbmQgd2FzIHRocmVhdGVuZWQgd2l0aCBkZWF0aCBpZiBoZSBkaWQgbWVkZGxlLCBhbmQgcHJvbWlzZWQgaGlzIGZyZWVkb20gaWYgaGUgY28tb3BlcmF0ZWQgZmFpdGhmdWxseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNhdmUgaXMgbm90IGZhciBhd2F5IGZyb20gdGhlIHNlYSwgYW5kIHRoZSBjbGlmZnMgd2hpY2ggZW5jbG9zZSBpdCBsZWF2ZSBhIHNtYWxsIGFuZCBpbmRpc3RpbmN0IHBhdGggbGVhZGluZyBpbnNpZGU7IGJ1dCB3aGVuIG9uZSBoYXMgZW50ZXJlZCwgaXQgb3BlbnMgb3V0IHRvIGEgd29uZGVyZnVsIGhlaWdodCwgYW5kIGF0IHRoZSBzaWRlcyBoYXMgcmVjZXNzZXMgb2YgZ3JlYXQgY2lyY3VtZmVyZW5jZSBvcGVuaW5nIGludG8gb25lIGFub3RoZXIuIFRoZXJlIGlzIG5vIGxhY2sgb2Ygd2F0ZXIgb3Igb2YgbGlnaHQsIGJ1dCBhIHNwcmluZyBvZiBwdXJlc3QgZmxvdyBpc3N1ZXMgZnJvbSB0aGUgYmFzZSBvZiB0aGUgY2xpZmYsIGFuZCBuYXR1cmFsIGZpc3N1cmVzIGluIHRoZSByb2NrLCB3aGVyZSBpdHMgZWRnZXMgam9pbiwgYWRtaXQgdGhlIGxpZ2h0IGZyb20gb3V0c2lkZSwgc28gdGhhdCBpbiB0aGUgZGF5LXRpbWUgdGhlIHBsYWNlIGlzIGJyaWdodC4gVGhlIGFpciBpbnNpZGUgaXMgZHJ5IGFuZCBwdXJlLCBvd2luZyB0byB0aGUgdGhpY2tuZXNzIG9mIHRoZSByb2NrLCB3aGljaCBkZWZsZWN0cyBhbGwgbW9pc3R1cmUgYW5kIGRyaXBwaW5nIHdhdGVyIGludG8gdGhlIHNwcmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIENyYXNzdXMgbGl2ZWQsIGFuZCBkYXkgYnkgZGF5IHRoZSBtYW4gY2FtZSB3aXRoIHRoZSBwcm92aXNpb25zLiBIZSBoaW1zZWxmIGRpZCBub3Qgc2VlIHRoZSBwYXJ0eSBvZiB0aGUgY2F2ZSwgbm9yIGV2ZW4ga25vdyB3aG8gdGhleSB3ZXJlLCBidXQgaGUgd2FzIHNlZW4gYnkgdGhlbSwgc2luY2UgdGhleSBrbmV3IGFuZCB3ZXJlIG9uIHRoZSB3YXRjaCBmb3IgdGhlIHRpbWUgb2YgaGlzIGNvbWluZy4gTm93LCB0aGUgbWVhbHMgd2VyZSBhYnVuZGFudCwgYW5kIHNvIHByZXBhcmVkIGFzIHRvIGdyYXRpZnkgdGhlIHRhc3RlIGFuZCBub3QgbWVyZWx5IHNhdGlzZnkgaHVuZ2VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgVmliaXVzIGhhZCBtYWRlIHVwIGhpcyBtaW5kIHRvIHBheSBDcmFzc3VzIGV2ZXJ5IHNvcnQgb2YgZnJpZW5kbHkgYXR0ZW50aW9uLCBhbmQgaXQgZXZlbiBvY2N1cnJlZCB0byBoaW0gdG8gY29uc2lkZXIgdGhlIHlvdXRoIG9mIGhpcyBndWVzdCwgdGhhdCBoZSB3YXMgcXVpdGUgYSB5b3VuZyBtYW4sIGFuZCB0aGF0IHNvbWUgcHJvdmlzaW9uIG11c3QgYmUgbWFkZSBmb3IgdGhlIGVuam95bWVudHMgYXBwcm9wcmlhdGUgdG8gaGlzIHllYXJzOyB0aGUgbWVyZSBzdXBwbHkgb2YgaGlzIHdhbnRzIGhlIHJlZ2FyZGVkIGFzIHRoZSB3b3JrIG9mIG9uZSB3aG8gcmVuZGVyZWQgaGVscCB1bmRlciBjb21wdWxzaW9uIHJhdGhlciB0aGFuIHdpdGggcmVhZHkgemVhbC4gU28gaGUgdG9vayB3aXRoIGhpbSB0d28gY29tZWx5IGZlbWFsZSBzbGF2ZXMgYW5kIHdlbnQgZG93biB0b3dhcmRzIHRoZSBzZWEuIFdoZW4gaGUgY2FtZSB0byB0aGUgcGxhY2Ugb2YgdGhlIGNhdmUsIGhlIHNob3dlZCB0aGVtIHRoZSBwYXRoIHVwIHRvIGl0LCBhbmQgYmFkZSB0aGVtIGdvIGluc2lkZSBhbmQgZmVhciBub3RoaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENyYXNzdXMgc2F3IHRoZW0gYXBwcm9hY2hpbmcsIGhlIHdhcyBhZnJhaWQgdGhhdCB0aGUgcGxhY2UgaGFkIGJlZW4gZGlzY292ZXJlZCBhbmQgd2FzIG5vdyBrbm93bi4gSGUgYXNrZWQgdGhlbSwgYWNjb3JkaW5nbHksIHdobyB0aGV5IHdlcmUgYW5kIHdoYXQgdGhleSB3YW50ZWQuIFRoZXkgYW5zd2VyZWQsIGFzIGluc3RydWN0ZWQsIHRoYXQgdGhleSB3ZXJlIGluIHNlYXJjaCBvZiBhIG1hc3RlciB3aG8gd2FzIGhpZGRlbiB0aGVyZS4gVGhlbiBDcmFzc3VzIHVuZGVyc3Rvb2QgdGhlIGtpbmRseSBqb2tlIHdoaWNoIFZpYml1cyB3YXMgcGxheWluZyB1cG9uIGhpbSwgYW5kIHJlY2VpdmVkIHRoZSBnaXJsczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZXkgbGl2ZWQgd2l0aCBoaW0gdGhlIHJlc3Qgb2YgdGhlIHRpbWUsIGNhcnJ5aW5nIHRoZSBuZWNlc3NhcnkgbWVzc2FnZXMgdG8gVmliaXVzLiBGZW5lc3RlbGxhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBSb21hbiBoaXN0b3JpYW4gd2hvIGZsb3VyaXNoZWQgdW5kZXIgQXVndXN0dXMuPC9ub3RlPiBzYXlzIHRoYXQgaGUgc2F3IG9uZSBvZiB0aGVzZSBzbGF2ZXMgaGltc2VsZiwgd2hlbiBzaGUgd2FzIG5vdyBhbiBvbGQgd29tYW4sIGFuZCBvZnRlbiBoZWFyZCBoZXIgbWVudGlvbiB0aGlzIGVwaXNvZGUgYW5kIHJlaGVhcnNlIGl0cyBkZXRhaWxzIHdpdGggemVzdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjYXZlIGlzIG5vdCBmYXIgYXdheSBmcm9tIHRoZSBzZWEsIGFuZCB0aGUgY2xpZmZzIHdoaWNoIGVuY2xvc2UgaXQgbGVhdmUgYSBzbWFsbCBhbmQgaW5kaXN0aW5jdCBwYXRoIGxlYWRpbmcgaW5zaWRlOyBidXQgd2hlbiBvbmUgaGFzIGVudGVyZWQsIGl0IG9wZW5zIG91dCB0byBhIHdvbmRlcmZ1bCBoZWlnaHQsIGFuZCBhdCB0aGUgc2lkZXMgaGFzIHJlY2Vzc2VzIG9mIGdyZWF0IGNpcmN1bWZlcmVuY2Ugb3BlbmluZyBpbnRvIG9uZSBhbm90aGVyLiBUaGVyZSBpcyBubyBsYWNrIG9mIHdhdGVyIG9yIG9mIGxpZ2h0LCBidXQgYSBzcHJpbmcgb2YgcHVyZXN0IGZsb3cgaXNzdWVzIGZyb20gdGhlIGJhc2Ugb2YgdGhlIGNsaWZmLCBhbmQgbmF0dXJhbCBmaXNzdXJlcyBpbiB0aGUgcm9jaywgd2hlcmUgaXRzIGVkZ2VzIGpvaW4sIGFkbWl0IHRoZSBsaWdodCBmcm9tIG91dHNpZGUsIHNvIHRoYXQgaW4gdGhlIGRheS10aW1lIHRoZSBwbGFjZSBpcyBicmlnaHQuIFRoZSBhaXIgaW5zaWRlIGlzIGRyeSBhbmQgcHVyZSwgb3dpbmcgdG8gdGhlIHRoaWNrbmVzcyBvZiB0aGUgcm9jaywgd2hpY2ggZGVmbGVjdHMgYWxsIG1vaXN0dXJlIGFuZCBkcmlwcGluZyB3YXRlciBpbnRvIHRoZSBzcHJpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIENyYXNzdXMgbGl2ZWQsIGFuZCBkYXkgYnkgZGF5IHRoZSBtYW4gY2FtZSB3aXRoIHRoZSBwcm92aXNpb25zLiBIZSBoaW1zZWxmIGRpZCBub3Qgc2VlIHRoZSBwYXJ0eSBvZiB0aGUgY2F2ZSwgbm9yIGV2ZW4ga25vdyB3aG8gdGhleSB3ZXJlLCBidXQgaGUgd2FzIHNlZW4gYnkgdGhlbSwgc2luY2UgdGhleSBrbmV3IGFuZCB3ZXJlIG9uIHRoZSB3YXRjaCBmb3IgdGhlIHRpbWUgb2YgaGlzIGNvbWluZy4gTm93LCB0aGUgbWVhbHMgd2VyZSBhYnVuZGFudCwgYW5kIHNvIHByZXBhcmVkIGFzIHRvIGdyYXRpZnkgdGhlIHRhc3RlIGFuZCBub3QgbWVyZWx5IHNhdGlzZnkgaHVuZ2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBWaWJpdXMgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gcGF5IENyYXNzdXMgZXZlcnkgc29ydCBvZiBmcmllbmRseSBhdHRlbnRpb24sIGFuZCBpdCBldmVuIG9jY3VycmVkIHRvIGhpbSB0byBjb25zaWRlciB0aGUgeW91dGggb2YgaGlzIGd1ZXN0LCB0aGF0IGhlIHdhcyBxdWl0ZSBhIHlvdW5nIG1hbiwgYW5kIHRoYXQgc29tZSBwcm92aXNpb24gbXVzdCBiZSBtYWRlIGZvciB0aGUgZW5qb3ltZW50cyBhcHByb3ByaWF0ZSB0byBoaXMgeWVhcnM7IHRoZSBtZXJlIHN1cHBseSBvZiBoaXMgd2FudHMgaGUgcmVnYXJkZWQgYXMgdGhlIHdvcmsgb2Ygb25lIHdobyByZW5kZXJlZCBoZWxwIHVuZGVyIGNvbXB1bHNpb24gcmF0aGVyIHRoYW4gd2l0aCByZWFkeSB6ZWFsLiBTbyBoZSB0b29rIHdpdGggaGltIHR3byBjb21lbHkgZmVtYWxlIHNsYXZlcyBhbmQgd2VudCBkb3duIHRvd2FyZHMgdGhlIHNlYS4gV2hlbiBoZSBjYW1lIHRvIHRoZSBwbGFjZSBvZiB0aGUgY2F2ZSwgaGUgc2hvd2VkIHRoZW0gdGhlIHBhdGggdXAgdG8gaXQsIGFuZCBiYWRlIHRoZW0gZ28gaW5zaWRlIGFuZCBmZWFyIG5vdGhpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ3Jhc3N1cyBzYXcgdGhlbSBhcHByb2FjaGluZywgaGUgd2FzIGFmcmFpZCB0aGF0IHRoZSBwbGFjZSBoYWQgYmVlbiBkaXNjb3ZlcmVkIGFuZCB3YXMgbm93IGtub3duLiBIZSBhc2tlZCB0aGVtLCBhY2NvcmRpbmdseSwgd2hvIHRoZXkgd2VyZSBhbmQgd2hhdCB0aGV5IHdhbnRlZC4gVGhleSBhbnN3ZXJlZCwgYXMgaW5zdHJ1Y3RlZCwgdGhhdCB0aGV5IHdlcmUgaW4gc2VhcmNoIG9mIGEgbWFzdGVyIHdobyB3YXMgaGlkZGVuIHRoZXJlLiBUaGVuIENyYXNzdXMgdW5kZXJzdG9vZCB0aGUga2luZGx5IGpva2Ugd2hpY2ggVmliaXVzIHdhcyBwbGF5aW5nIHVwb24gaGltLCBhbmQgcmVjZWl2ZWQgdGhlIGdpcmxzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGV5IGxpdmVkIHdpdGggaGltIHRoZSByZXN0IG9mIHRoZSB0aW1lLCBjYXJyeWluZyB0aGUgbmVjZXNzYXJ5IG1lc3NhZ2VzIHRvIFZpYml1cy4gRmVuZXN0ZWxsYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBSb21hbiBoaXN0b3JpYW4gd2hvIGZsb3VyaXNoZWQgdW5kZXIgQXVndXN0dXMuPC9ub3RlPiBzYXlzIHRoYXQgaGUgc2F3IG9uZSBvZiB0aGVzZSBzbGF2ZXMgaGltc2VsZiwgd2hlbiBzaGUgd2FzIG5vdyBhbiBvbGQgd29tYW4sIGFuZCBvZnRlbiBoZWFyZCBoZXIgbWVudGlvbiB0aGlzIGVwaXNvZGUgYW5kIHJlaGVhcnNlIGl0cyBkZXRhaWxzIHdpdGggemVzdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIENyYXNzdXMgcGFzc2VkIGVpZ2h0IG1vbnRocyBpbiBjb25jZWFsbWVudDsgYnV0IGFzIHNvb24gYXMgaGUgaGVhcmQgb2YgQ2lubmEncyBkZWF0aCwgaGUgZGlzY2xvc2VkIGhpbXNlbGYuIE1hbnkgZmxvY2tlZCB0byBoaXMgc3RhbmRhcmQsIG91dCBvZiB3aG9tIGhlIHNlbGVjdGVkIHR3ZW50eS1maXZlIGh1bmRyZWQgbWVuLCBhbmQgd2VudCBhYm91dCB2aXNpdGluZyB0aGUgY2l0aWVzLiBPbmUgb2YgdGhlc2UsIE1hbGFjYSwgaGUgcGx1bmRlcmVkLCBhcyBtYW55IHdyaXRlcnMgdGVzdGlmeSwgYnV0IHRoZXkgc2F5IHRoYXQgaGUgaGltc2VsZiBkZW5pZWQgdGhlIGNoYXJnZSBhbmQgcXVhcnJlbGxlZCB3aXRoIHRob3NlIHdobyBhZmZpcm1lZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBoZSBjb2xsZWN0ZWQgc2FpbGluZyB2ZXNzZWxzLCBjcm9zc2VkIGludG8gQWZyaWNhLCBhbmQgam9pbmVkIE1ldGVsbHVzIFBpdXMsIGFuIGlsbHVzdHJpb3VzIG1hbiwgd2hvIGhhZCBnb3QgdG9nZXRoZXIgYSBjb25zaWRlcmFibGUgYXJteS4gSG93ZXZlciwgaGUgcmVtYWluZWQgdGhlcmUgbm8gbG9uZyB0aW1lLCBidXQgYWZ0ZXIgZGlzc2Vuc2lvbiB3aXRoIE1ldGVsbHVzIHNldCBvdXQgYW5kIGpvaW5lZCBTdWxsYSwgd2l0aCB3aG9tIGhlIHN0b29kIGluIGEgcG9zaXRpb24gb2Ygc3BlY2lhbCBob25vdXIuIEJ1dCB3aGVuIFN1bGxhIGNyb3NzZWQgaW50byBJdGFseSwgaGUgd2lzaGVkIGFsbCB0aGUgeW91bmcgbWVuIHdpdGggaGltIHRvIHRha2UgYWN0aXZlIHBhcnQgaW4gdGhlIGNhbXBhaWduLCBhbmQgYXNzaWduZWQgZGlmZmVyZW50IG9uZXMgdG8gZGlmZmVyZW50IHVuZGVydGFraW5ncy4gQ3Jhc3N1cywgYmVpbmcgc2VudCBvdXQgdG8gcmFpc2UgYSBmb3JjZSBhbW9uZyB0aGUgTWFyc2ksIGFza2VkIGZvciBhbiBlc2NvcnQsIHNpbmNlIGhpcyByb2FkIHdvdWxkIHRha2UgaGltIHBhc3QgdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgd2FzIHdyb3RoLCBhbmQgc2FpZCB0byBoaW0gdmVoZW1lbnRseTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGdpdmUgdGhlZSBhcyBhbiBlc2NvcnQgdGh5IGZhdGhlciwgdGh5IGJyb3RoZXIsIHRoeSBmcmllbmRzLCBhbmQgdGh5IGtpbnNtZW4sIHdobyB3ZXJlIGlsbGVnYWxseSBhbmQgdW5qdXN0bHkgcHV0IHRvIGRlYXRoLCBhbmQgd2hvc2UgbXVyZGVyZXJzIEkgYW0gcHVyc3VpbmcuPC9xPiBUaHVzIHJlYnVrZWQgYW5kIGluY2l0ZWQsIENyYXNzdXMgc2V0IG91dCBhdCBvbmNlLCBhbmQgZm9yY2luZyBoaXMgd2F5IHZpZ29yb3VzbHkgdGhyb3VnaCB0aGUgZW5lbXksIHJhaXNlZCBhIGNvbnNpZGVyYWJsZSBmb3JjZSwgYW5kIHNob3dlZCBoaW1zZWxmIGFuIGVhZ2VyIHBhcnRpc2FuIG9mIFN1bGxhIGluIGhpcyBzdHJ1Z2dsZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIENyYXNzdXMgcGFzc2VkIGVpZ2h0IG1vbnRocyBpbiBjb25jZWFsbWVudDsgYnV0IGFzIHNvb24gYXMgaGUgaGVhcmQgb2YgQ2lubmEncyBkZWF0aCwgaGUgZGlzY2xvc2VkIGhpbXNlbGYuIE1hbnkgZmxvY2tlZCB0byBoaXMgc3RhbmRhcmQsIG91dCBvZiB3aG9tIGhlIHNlbGVjdGVkIHR3ZW50eS1maXZlIGh1bmRyZWQgbWVuLCBhbmQgd2VudCBhYm91dCB2aXNpdGluZyB0aGUgY2l0aWVzLiBPbmUgb2YgdGhlc2UsIE1hbGFjYSwgaGUgcGx1bmRlcmVkLCBhcyBtYW55IHdyaXRlcnMgdGVzdGlmeSwgYnV0IHRoZXkgc2F5IHRoYXQgaGUgaGltc2VsZiBkZW5pZWQgdGhlIGNoYXJnZSBhbmQgcXVhcnJlbGxlZCB3aXRoIHRob3NlIHdobyBhZmZpcm1lZCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgaGUgY29sbGVjdGVkIHNhaWxpbmcgdmVzc2VscywgY3Jvc3NlZCBpbnRvIEFmcmljYSwgYW5kIGpvaW5lZCBNZXRlbGx1cyBQaXVzLCBhbiBpbGx1c3RyaW91cyBtYW4sIHdobyBoYWQgZ290IHRvZ2V0aGVyIGEgY29uc2lkZXJhYmxlIGFybXkuIEhvd2V2ZXIsIGhlIHJlbWFpbmVkIHRoZXJlIG5vIGxvbmcgdGltZSwgYnV0IGFmdGVyIGRpc3NlbnNpb24gd2l0aCBNZXRlbGx1cyBzZXQgb3V0IGFuZCBqb2luZWQgU3VsbGEsIHdpdGggd2hvbSBoZSBzdG9vZCBpbiBhIHBvc2l0aW9uIG9mIHNwZWNpYWwgaG9ub3VyLiBCdXQgd2hlbiBTdWxsYSBjcm9zc2VkIGludG8gSXRhbHksIGhlIHdpc2hlZCBhbGwgdGhlIHlvdW5nIG1lbiB3aXRoIGhpbSB0byB0YWtlIGFjdGl2ZSBwYXJ0IGluIHRoZSBjYW1wYWlnbiwgYW5kIGFzc2lnbmVkIGRpZmZlcmVudCBvbmVzIHRvIGRpZmZlcmVudCB1bmRlcnRha2luZ3MuIENyYXNzdXMsIGJlaW5nIHNlbnQgb3V0IHRvIHJhaXNlIGEgZm9yY2UgYW1vbmcgdGhlIE1hcnNpLCBhc2tlZCBmb3IgYW4gZXNjb3J0LCBzaW5jZSBoaXMgcm9hZCB3b3VsZCB0YWtlIGhpbSBwYXN0IHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB3YXMgd3JvdGgsIGFuZCBzYWlkIHRvIGhpbSB2ZWhlbWVudGx5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBnaXZlIHRoZWUgYXMgYW4gZXNjb3J0IHRoeSBmYXRoZXIsIHRoeSBicm90aGVyLCB0aHkgZnJpZW5kcywgYW5kIHRoeSBraW5zbWVuLCB3aG8gd2VyZSBpbGxlZ2FsbHkgYW5kIHVuanVzdGx5IHB1dCB0byBkZWF0aCwgYW5kIHdob3NlIG11cmRlcmVycyBJIGFtIHB1cnN1aW5nLjwvcT4gVGh1cyByZWJ1a2VkIGFuZCBpbmNpdGVkLCBDcmFzc3VzIHNldCBvdXQgYXQgb25jZSwgYW5kIGZvcmNpbmcgaGlzIHdheSB2aWdvcm91c2x5IHRocm91Z2ggdGhlIGVuZW15LCByYWlzZWQgYSBjb25zaWRlcmFibGUgZm9yY2UsIGFuZCBzaG93ZWQgaGltc2VsZiBhbiBlYWdlciBwYXJ0aXNhbiBvZiBTdWxsYSBpbiBoaXMgc3RydWdnbGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PdXQgb2YgdGhlc2UgYWN0aXZpdGllcyBmaXJzdCBhcm9zZSwgYXMgdGhleSBzYXksIGhpcyBhbWJpdGlvdXMgcml2YWxyeSB3aXRoIFBvbXBleSBmb3IgZGlzdGluY3Rpb24gRm9yIGFsdGhvdWdoIFBvbXBleSB3YXMgdGhlIHlvdW5nZXIgbWFuLCBhbmQgdGhlIHNvbiBvZiBhIGZhdGhlciB3aG8gaGFkIGJlZW4gaW4gaWxsIHJlcHV0ZSBhdCBSb21lIGFuZCBoYXRlZCBtb3N0IGJpdHRlcmx5IGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMsIHN0aWxsLCBpbiB0aGUgZXZlbnRzIG9mIHRoaXMgdGltZSBoaXMgdGFsZW50cyBzaG9uZSBmb3J0aCBjb25zcGljdW91c2x5LCBhbmQgaGUgd2FzIHNlZW4gdG8gYmUgZ3JlYXQsIHNvIHRoYXQgU3VsbGEgcGFpZCBoaW0gaG9ub3VycyBub3QgdmVyeSBvZnRlbiBhY2NvcmRlZCB0byBtZW4gd2hvIHdlcmUgb2xkZXIgYW5kIG9mIGVxdWFsIHJhbmsgd2l0aCBoaW1zZWxmLCByaXNpbmcgYXQgaGlzIGFwcHJvYWNoLCB1bmNvdmVyaW5nIGhpcyBoZWFkLCBhbmQgc2FsdXRpbmcgaGltIGFzIEltcGVyYXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgaW5mbGFtZWQgYW5kIGdvYWRlZCBDcmFzc3VzLCBhbHRob3VnaCBpdCB3YXMgbm90IHdpdGhvdXQgZ29vZCByZWFzb24gdGhhdCBTdWxsYSB0aHVzIG1hZGUgbGVzcyBvZiBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk91dCBvZiB0aGVzZSBhY3Rpdml0aWVzIGZpcnN0IGFyb3NlLCBhcyB0aGV5IHNheSwgaGlzIGFtYml0aW91cyByaXZhbHJ5IHdpdGggUG9tcGV5IGZvciBkaXN0aW5jdGlvbiBGb3IgYWx0aG91Z2ggUG9tcGV5IHdhcyB0aGUgeW91bmdlciBtYW4sIGFuZCB0aGUgc29uIG9mIGEgZmF0aGVyIHdobyBoYWQgYmVlbiBpbiBpbGwgcmVwdXRlIGF0IFJvbWUgYW5kIGhhdGVkIG1vc3QgYml0dGVybHkgYnkgaGlzIGZlbGxvdy1jaXRpemVucywgc3RpbGwsIGluIHRoZSBldmVudHMgb2YgdGhpcyB0aW1lIGhpcyB0YWxlbnRzIHNob25lIGZvcnRoIGNvbnNwaWN1b3VzbHksIGFuZCBoZSB3YXMgc2VlbiB0byBiZSBncmVhdCwgc28gdGhhdCBTdWxsYSBwYWlkIGhpbSBob25vdXJzIG5vdCB2ZXJ5IG9mdGVuIGFjY29yZGVkIHRvIG1lbiB3aG8gd2VyZSBvbGRlciBhbmQgb2YgZXF1YWwgcmFuayB3aXRoIGhpbXNlbGYsIHJpc2luZyBhdCBoaXMgYXBwcm9hY2gsIHVuY292ZXJpbmcgaGlzIGhlYWQsIGFuZCBzYWx1dGluZyBoaW0gYXMgSW1wZXJhdG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIGluZmxhbWVkIGFuZCBnb2FkZWQgQ3Jhc3N1cywgYWx0aG91Z2ggaXQgd2FzIG5vdCB3aXRob3V0IGdvb2QgcmVhc29uIHRoYXQgU3VsbGEgdGh1cyBtYWRlIGxlc3Mgb2YgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciBoZSB3YXMgbGFja2luZyBpbiBleHBlcmllbmNlLCBhbmQgaGlzIGFjaGlldmVtZW50cyB3ZXJlIHJvYmJlZCBvZiB0aGVpciBmYXZvdXIgYnkgdGhlIGlubmF0ZSBjdXJzZXMgb2YgYXZhcmljZSBhbmQgbWVhbm5lc3Mgd2hpY2ggYmVzZXQgaGltLiBGb3IgaW5zdGFuY2UsIHdoZW4gaGUgY2FwdHVyZWQgdGhlIFVtYnJpYW4gY2l0eSBvZiBUdWRlciwgaXQgd2FzIGJlbGlldmVkIHRoYXQgaGUgYXBwcm9wcmlhdGVkIHRvIGhpbXNlbGYgbW9zdCBvZiB0aGUgc3BvaWwsIGFuZCBjaGFyZ2VzIHRvIHRoaXMgZWZmZWN0IHdlcmUgbGFpZCBiZWZvcmUgU3VsbGEuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRoZSBzdHJ1Z2dsZSBuZWFyIFJvbWUsIHdoaWNoIHdhcyB0aGUgbGFzdCBhbmQgZ3JlYXRlc3Qgb2YgYWxsLCB3aGlsZSBTdWxsYSB3YXMgZGVmZWF0ZWQgYW5kIGhpcyBhcm15IHJlcHVsc2VkIGFuZCBzaGF0dGVyZWQsIENyYXNzdXMgd2FzIHZpY3RvcmlvdXMgd2l0aCB0aGUgcmlnaHQgd2luZyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gUGx1dGFyY2gncyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjkuNSIgdmFsaWQ9InllcyI+U3VsbGEsIHh4aXguIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHB1cnN1ZWQgdGhlIGVuZW15IHRpbGwgbmlnaHRmYWxsLCBhbmQgdGhlbiBzZW50IHRvIFN1bGxhIGluZm9ybWluZyBoaW0gb2YgaGlzIHN1Y2Nlc3MgYW5kIGFza2luZyBzdXBwZXIgZm9yIGhpcyBzb2xkaWVycy4gSG93ZXZlciwgZHVyaW5nIHRoZSBwcm9zY3JpcHRpb25zIGFuZCBwdWJsaWMgY29uZmlzY2F0aW9ucyB3aGljaCBlbnN1ZWQsIGhlIGdvdCBhIGJhZCBuYW1lIGFnYWluLCBieSBwdXJjaGFzaW5nIGdyZWF0IGVzdGF0ZXMgYXQgYSBsb3cgcHJpY2UsIGFuZCBhc2tpbmcgZG9uYXRpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkIHRoYXQgaW4gQnJ1dHRpdW0gaGUgYWN0dWFsbHkgcHJvc2NyaWJlZCBhIG1hbiB3aXRob3V0IFN1bGxhJ3Mgb3JkZXJzLCBtZXJlbHkgdG8gZ2V0IGhpcyBwcm9wZXJ0eSwgYW5kIHRoYXQgZm9yIHRoaXMgcmVhc29uIFN1bGxhLCB3aG8gZGlzYXBwcm92ZWQgb2YgaGlzIGNvbmR1Y3QsIG5ldmVyIGVtcGxveWVkIGhpbSBhZ2FpbiBvbiBwdWJsaWMgYnVzaW5lc3MuIEFuZCB5ZXQgQ3Jhc3N1cyB3YXMgbW9zdCBleHBlcnQgaW4gd2lubmluZyBvdmVyIGFsbCBtZW4gYnkgaGlzIGZsYXR0ZXJpZXM7IG9uIHRoZSBvdGhlciBoYW5kLCBoZSBoaW1zZWxmIHdhcyBhbiBlYXN5IHByZXkgdG8gZmxhdHRlcnkgZnJvbSBhbnlib2R5LiBBbmQgdGhpcyB0b28gaXMgc2FpZCB0byBoYXZlIGJlZW4gYSBwZWN1bGlhcml0eSBvZiBoaXMsIHRoYXQsIG1vc3QgYXZhcmljaW91cyBhcyBoZSB3YXMgaGltc2VsZiwgaGUgcGFydGljdWxhcmx5IGhhdGVkIGFuZCBhYnVzZWQgdGhvc2Ugd2hvIHdlcmUgbGlrZSBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgc3RydWdnbGUgbmVhciBSb21lLCB3aGljaCB3YXMgdGhlIGxhc3QgYW5kIGdyZWF0ZXN0IG9mIGFsbCwgd2hpbGUgU3VsbGEgd2FzIGRlZmVhdGVkIGFuZCBoaXMgYXJteSByZXB1bHNlZCBhbmQgc2hhdHRlcmVkLCBDcmFzc3VzIHdhcyB2aWN0b3Jpb3VzIHdpdGggdGhlIHJpZ2h0IHdpbmcsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gUGx1dGFyY2gncyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAyOS41IiB2YWxpZD0ieWVzIj5TdWxsYSwgeHhpeC4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gcHVyc3VlZCB0aGUgZW5lbXkgdGlsbCBuaWdodGZhbGwsIGFuZCB0aGVuIHNlbnQgdG8gU3VsbGEgaW5mb3JtaW5nIGhpbSBvZiBoaXMgc3VjY2VzcyBhbmQgYXNraW5nIHN1cHBlciBmb3IgaGlzIHNvbGRpZXJzLiBIb3dldmVyLCBkdXJpbmcgdGhlIHByb3NjcmlwdGlvbnMgYW5kIHB1YmxpYyBjb25maXNjYXRpb25zIHdoaWNoIGVuc3VlZCwgaGUgZ290IGEgYmFkIG5hbWUgYWdhaW4sIGJ5IHB1cmNoYXNpbmcgZ3JlYXQgZXN0YXRlcyBhdCBhIGxvdyBwcmljZSwgYW5kIGFza2luZyBkb25hdGlvbnMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjkuNSIgdmFsaWQ9InllcyI+U3VsbGEsIHh4aXguIDUuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBpbiBCcnV0dGl1bSBoZSBhY3R1YWxseSBwcm9zY3JpYmVkIGEgbWFuIHdpdGhvdXQgU3VsbGEncyBvcmRlcnMsIG1lcmVseSB0byBnZXQgaGlzIHByb3BlcnR5LCBhbmQgdGhhdCBmb3IgdGhpcyByZWFzb24gU3VsbGEsIHdobyBkaXNhcHByb3ZlZCBvZiBoaXMgY29uZHVjdCwgbmV2ZXIgZW1wbG95ZWQgaGltIGFnYWluIG9uIHB1YmxpYyBidXNpbmVzcy4gQW5kIHlldCBDcmFzc3VzIHdhcyBtb3N0IGV4cGVydCBpbiB3aW5uaW5nIG92ZXIgYWxsIG1lbiBieSBoaXMgZmxhdHRlcmllczsgb24gdGhlIG90aGVyIGhhbmQsIGhlIGhpbXNlbGYgd2FzIGFuIGVhc3kgcHJleSB0byBmbGF0dGVyeSBmcm9tIGFueWJvZHkuIEFuZCB0aGlzIHRvbyBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhIHBlY3VsaWFyaXR5IG9mIGhpcywgdGhhdCwgbW9zdCBhdmFyaWNpb3VzIGFzIGhlIHdhcyBoaW1zZWxmLCBoZSBwYXJ0aWN1bGFybHkgaGF0ZWQgYW5kIGFidXNlZCB0aG9zZSB3aG8gd2VyZSBsaWtlIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaXQgdmV4ZWQgaGltIHRoYXQgUG9tcGV5IHdhcyBzdWNjZXNzZnVsIGluIGhpcyBjYW1wYWlnbnMsIGFuZCBjZWxlYnJhdGVkIGEgdHJpdW1waCBiZWZvcmUgYmVjb21pbmcgYSBzZW5hdG9yLCBhbmQgd2FzIGNhbGxlZCBNYWdudXMgKHRoYXQgaXMsIDxlbXBoPkdyZWF0PC9lbXBoPikgYnkgaGlzIGZlbGxvdy1jaXRpemVucy4gQW5kIG9uY2Ugd2hlbiBzb21lIG9uZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBvbXBleSB0aGUgR3JlYXQgaXMgY29taW5nLDwvcT4gQ3Jhc3N1cyBmZWxsIHRvIGxhdWdoaW5nIGFuZCBhc2tlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgZ3JlYXQgaXMgaGU/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlJlbm91bmNpbmcsIHRoZXJlZm9yZSwgYWxsIGVmZm9ydHMgdG8gZXF1YWwgUG9tcGV5IGluIG1pbGl0YXJ5IGFjaGlldmVtZW50cywgaGUgcGx1bmdlZCBpbnRvIHBvbGl0aWNzLCBhbmQgYnkgaGlzIHplYWxvdXMgbGFib3VycywgaGlzIGZhdm91cnMgYXMgYWR2b2NhdGUgYW5kIG1vbmV5LWxlbmRlciwgYW5kIGhpcyBjby1vcGVyYXRpb24gaW4gYWxsIHRoZSBzb2xpY2l0YXRpb25zIGFuZCBleGFtaW5hdGlvbnMgd2hpY2ggY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIGhhZCB0byBtYWtlIGFuZCB1bmRlcmdvLCBoZSBhY3F1aXJlZCBhbiBpbmZsdWVuY2UgYW5kIGEgcmVwdXRlIGVxdWFsIHRvIHRoYXQgd2hpY2ggUG9tcGV5IHBvc3Nlc3NlZCBmcm9tIGhpcyBtYW55IGFuZCBncmVhdCBleHBlZGl0aW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBleHBlcmllbmNlIG9mIGVhY2ggbWFuIHdhcyBwZWN1bGlhci4gRm9yIFBvbXBleSdzIG5hbWUgYW5kIHBvd2VyIHdlcmUgZ3JlYXRlciBpbiB0aGUgY2l0eSB3aGVuIGhlIHdhcyBhd2F5IGZyb20gaXQsIG93aW5nIHRvIGhpcyBjYW1wYWlnbnM7IGJ1dCB3aGVuIGhlIHdhcyBhdCBob21lLCBoZSB3YXMgb2Z0ZW4gbGVzcyBwb3dlcmZ1bCB0aGFuIENyYXNzdXMsIGJlY2F1c2UgdGhlIHBvbXAgYW5kIGNpcmN1bXN0YW5jZSBvZiBoaXMgbGlmZSBsZWQgaGltIHRvIHNodW4gY3Jvd2RzLCByZXRpcmUgZnJvbSB0aGUgZm9ydW0sIGFuZCByZW5kZXIgYWlkIHRvIGEgZmV3IG9ubHkgb2YgdGhvc2Ugd2hvIGFza2VkIGl0IG9mIGhpbSwgYW5kIHRoZW4gd2l0aCBubyBncmVhdCB6ZXN0LCB0aGF0IGhlIG1pZ2h0IGtlZXAgaGlzIGluZmx1ZW5jZSB0aGUgbW9yZSB1bmltcGFpcmVkIGZvciB1c2UgaW4gaGlzIG93biBiZWhhbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDcmFzc3VzIHdhcyBjb250aW51YWxseSByZWFkeSB3aXRoIGhpcyBzZXJ2aWNlcywgd2FzIGV2ZXIgYXQgaGFuZCBhbmQgZWFzeSBvZiBhY2Nlc3MsIGFuZCBhbHdheXMgdG9vayBhbiBhY3RpdmUgcGFydCBpbiB0aGUgZW50ZXJwcmlzZXMgb2YgdGhlIGhvdXIsIGFuZCBzbyBieSB0aGUgdW5pdmVyc2FsIGtpbmRuZXNzIG9mIGhpcyBiZWhhdmlvdXIgd29uIHRoZSBkYXkgb3ZlciBoaXMgcml2YWwncyBoYXVnaHR5IGJlYXJpbmcuIEJ1dCBpbiBkaWduaXR5IG9mIHBlcnNvbiwgcGVyc3Vhc2l2ZW5lc3Mgb2Ygc3BlZWNoLCBhbmQgd2lubmluZyBncmFjZSBvZiBmZWF0dXJlLCBib3RoIHdlcmUgc2FpZCB0byBiZSBhbGlrZSBnaWZ0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaXQgdmV4ZWQgaGltIHRoYXQgUG9tcGV5IHdhcyBzdWNjZXNzZnVsIGluIGhpcyBjYW1wYWlnbnMsIGFuZCBjZWxlYnJhdGVkIGEgdHJpdW1waCBiZWZvcmUgYmVjb21pbmcgYSBzZW5hdG9yLCBhbmQgd2FzIGNhbGxlZCBNYWdudXMgKHRoYXQgaXMsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3JlYXQ8L2VtcGg+KSBieSBoaXMgZmVsbG93LWNpdGl6ZW5zLiBBbmQgb25jZSB3aGVuIHNvbWUgb25lIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Qb21wZXkgdGhlIEdyZWF0IGlzIGNvbWluZyw8L3E+IENyYXNzdXMgZmVsbCB0byBsYXVnaGluZyBhbmQgYXNrZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib3cgZ3JlYXQgaXMgaGU/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlJlbm91bmNpbmcsIHRoZXJlZm9yZSwgYWxsIGVmZm9ydHMgdG8gZXF1YWwgUG9tcGV5IGluIG1pbGl0YXJ5IGFjaGlldmVtZW50cywgaGUgcGx1bmdlZCBpbnRvIHBvbGl0aWNzLCBhbmQgYnkgaGlzIHplYWxvdXMgbGFib3VycywgaGlzIGZhdm91cnMgYXMgYWR2b2NhdGUgYW5kIG1vbmV5LWxlbmRlciwgYW5kIGhpcyBjby1vcGVyYXRpb24gaW4gYWxsIHRoZSBzb2xpY2l0YXRpb25zIGFuZCBleGFtaW5hdGlvbnMgd2hpY2ggY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIGhhZCB0byBtYWtlIGFuZCB1bmRlcmdvLCBoZSBhY3F1aXJlZCBhbiBpbmZsdWVuY2UgYW5kIGEgcmVwdXRlIGVxdWFsIHRvIHRoYXQgd2hpY2ggUG9tcGV5IHBvc3Nlc3NlZCBmcm9tIGhpcyBtYW55IGFuZCBncmVhdCBleHBlZGl0aW9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgZXhwZXJpZW5jZSBvZiBlYWNoIG1hbiB3YXMgcGVjdWxpYXIuIEZvciBQb21wZXkncyBuYW1lIGFuZCBwb3dlciB3ZXJlIGdyZWF0ZXIgaW4gdGhlIGNpdHkgd2hlbiBoZSB3YXMgYXdheSBmcm9tIGl0LCBvd2luZyB0byBoaXMgY2FtcGFpZ25zOyBidXQgd2hlbiBoZSB3YXMgYXQgaG9tZSwgaGUgd2FzIG9mdGVuIGxlc3MgcG93ZXJmdWwgdGhhbiBDcmFzc3VzLCBiZWNhdXNlIHRoZSBwb21wIGFuZCBjaXJjdW1zdGFuY2Ugb2YgaGlzIGxpZmUgbGVkIGhpbSB0byBzaHVuIGNyb3dkcywgcmV0aXJlIGZyb20gdGhlIGZvcnVtLCBhbmQgcmVuZGVyIGFpZCB0byBhIGZldyBvbmx5IG9mIHRob3NlIHdobyBhc2tlZCBpdCBvZiBoaW0sIGFuZCB0aGVuIHdpdGggbm8gZ3JlYXQgemVzdCwgdGhhdCBoZSBtaWdodCBrZWVwIGhpcyBpbmZsdWVuY2UgdGhlIG1vcmUgdW5pbXBhaXJlZCBmb3IgdXNlIGluIGhpcyBvd24gYmVoYWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDcmFzc3VzIHdhcyBjb250aW51YWxseSByZWFkeSB3aXRoIGhpcyBzZXJ2aWNlcywgd2FzIGV2ZXIgYXQgaGFuZCBhbmQgZWFzeSBvZiBhY2Nlc3MsIGFuZCBhbHdheXMgdG9vayBhbiBhY3RpdmUgcGFydCBpbiB0aGUgZW50ZXJwcmlzZXMgb2YgdGhlIGhvdXIsIGFuZCBzbyBieSB0aGUgdW5pdmVyc2FsIGtpbmRuZXNzIG9mIGhpcyBiZWhhdmlvdXIgd29uIHRoZSBkYXkgb3ZlciBoaXMgcml2YWwncyBoYXVnaHR5IGJlYXJpbmcuIEJ1dCBpbiBkaWduaXR5IG9mIHBlcnNvbiwgcGVyc3Vhc2l2ZW5lc3Mgb2Ygc3BlZWNoLCBhbmQgd2lubmluZyBncmFjZSBvZiBmZWF0dXJlLCBib3RoIHdlcmUgc2FpZCB0byBiZSBhbGlrZSBnaWZ0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoaXMgZWFnZXIgcml2YWxyeSBkaWQgbm90IGNhcnJ5IENyYXNzdXMgYXdheSBpbnRvIGFueXRoaW5nIGxpa2UgaGF0cmVkIG9yIG1hbGljZTsgaGUgd2FzIG1lcmVseSB2ZXhlZCB0aGF0IFBvbXBleSBhbmQgQ2Flc2FyIHNob3VsZCBiZSBob25vdXJlZCBhYm92ZSBoaW1zZWxmLCBidXQgaGUgZGlkIG5vdCBhc3NvY2lhdGUgdGhpcyBhbWJpdGlvbiBvZiBoaXMgd2l0aCBlbm1pdHkgb3IgbWFsZXZvbGVuY2UuIEl0IGlzIHRydWUgdGhhdCBvbmNlIHdoZW4gQ2Flc2FyIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IHBpcmF0ZXMgaW4gQXNpYSBhbmQgd2FzIGhlbGQgYSBjbG9zZSBwcmlzb25lciBieSB0aGVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSBQbHV0YXJjaCdzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiAyIiB2YWxpZD0ieWVzIj5DYWVzYXIsIGNoYXB0ZXIgaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIGV4Y2xhaW1lZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENyYXNzdXMsIGhvdyBncmVhdCBhIHBsZWFzdXJlIHdpbHQgdGhvdSB0YXN0ZSB3aGVuIHRob3UgaGVhcmVzdCBvZiBteSBjYXB0dXJlITwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXJ3YXJkcywgYXQgbGVhc3QsIHRoZXkgd2VyZSBvbiBmcmllbmRseSB0ZXJtcyB3aXRoIG9uZSBhbm90aGVyLCBhbmQgb25jZSB3aGVuIENhZXNhciB3YXMgb24gdGhlIHBvaW50IG9mIHNldHRpbmcgb3V0IGZvciBTcGFpbiBhcyBwcmFldG9yLCBhbmQgaGFkIG5vIG1vbmV5LCBhbmQgaGlzIGNyZWRpdG9ycyBkZXNjZW5kZWQgdXBvbiBoaW0gYW5kIGJlZ2FuIHRvIGF0dGFjaCBoaXMgb3V0Zml0LCBDcmFzc3VzIGRpZCBub3QgbGVhdmUgaGltIGluIHRoZSBsdXJjaCwgYnV0IGZyZWVkIGhpbSBmcm9tIGVtYmFycmFzc21lbnQgYnkgbWFraW5nIGhpbXNlbGYgaGlzIHN1cmV0eSBmb3IgZWlnaHQgaHVuZHJlZCBhbmQgdGhpcnR5IHRhbGVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGFsbCBSb21lIHdhcyBkaXZpZGVkIGludG8gdGhyZWUgcG93ZXJmdWwgcGFydGllcywgdGhhdCBvZiBQb21wZXksIHRoYXQgb2YgQ2Flc2FyLCBhbmQgdGhhdCBvZiBDcmFzc3VzIChmb3IgQ2F0bydzIHJlcHV0YXRpb24gd2FzIGdyZWF0ZXIgdGhhbiBoaXMgcG93ZXIsIGFuZCBtZW4gYWRtaXJlZCBoaW0gbW9yZSB0aGFuIHRoZXkgZm9sbG93ZWQgaGltKSwgaXQgd2FzIHRoZSB0aG91Z2h0ZnVsIGFuZCBjb25zZXJ2YXRpdmUgcGFydCBvZiB0aGUgY2l0eSB3aGljaCBhdHRhY2hlZCBpdHNlbGYgdG8gUG9tcGV5LCB0aGUgdmlvbGVudCBhbmQgdm9sYXRpbGUgcGFydCB3aGljaCBzdXBwb3J0ZWQgdGhlIGhvcGVzIG9mIENhZXNhciwgd2hpbGUgQ3Jhc3N1cyB0b29rIGEgbWlkZGxlIGdyb3VuZCBhbmQgZHJldyBmcm9tIGJvdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgdmVyeSBtYW55IGNoYW5nZXMgaW4gaGlzIHBvbGl0aWNhbCB2aWV3cywgYW5kIHdhcyBuZWl0aGVyIGEgc3RlYWRmYXN0IGZyaWVuZCBub3IgYW4gaW1wbGFjYWJsZSBlbmVteSwgYnV0IHJlYWRpbHkgYWJhbmRvbmVkIGJvdGggaGlzIGZhdm91cnMgYW5kIGhpcyByZXNlbnRtZW50cyBhdCB0aGUgZGljdGF0ZXMgb2YgaGlzIGludGVyZXN0cywgc28gdGhhdCwgZnJlcXVlbnRseSwgd2l0aGluIGEgc2hvcnQgc3BhY2Ugb2YgdGltZSwgdGhlIHNhbWUgbWVuIGFuZCB0aGUgc2FtZSBtZWFzdXJlcyBmb3VuZCBpbiBoaW0gYm90aCBhbiBhZHZvY2F0ZSBhbmQgYW4gb3Bwb25lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBoYWQgZ3JlYXQgaW5mbHVlbmNlLCBib3RoIGZyb20gdGhlIGZhdm91cnMgd2hpY2ggaGUgYmVzdG93ZWQgYW5kIHRoZSBmZWFyIHdoaWNoIGhlIGluc3BpcmVkLCBidXQgbW9yZSBmcm9tIHRoZSBmZWFyLiBBdCBhbnkgcmF0ZS4gU2ljaW5uaXVzLCB3aG8gZ2F2ZSB0aGUgZ3JlYXRlc3QgYW5ub3lhbmNlIHRvIHRoZSBtYWdpc3RyYXRlcyBhbmQgcG9wdWxhciBsZWFkZXJzIG9mIGhpcyBkYXksIHdoZW4gYXNrZWQgd2h5IENyYXNzdXMgd2FzIHRoZSBvbmx5IG9uZSB3aG9tIGhlIGxldCBhbG9uZSBhbmQgZGlkIG5vdCB3b3JyeSwgc2FpZCB0aGF0IHRoZSBtYW4gaGFkIGhheSBvbiBoaXMgaG9ybi4gTm93IHRoZSBSb21hbnMgdXNlZCB0byBjb2lsIGhheSBhYm91dCB0aGUgaG9ybiBvZiBhbiBveCB0aGF0IGdvcmVkLCBzbyB0aGF0IHRob3NlIHdobyBlbmNvdW50ZXJlZCBpdCBtaWdodCBiZSBvbiB0aGVpciBndWFyZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCIgbGFuZz0ibGEiPmZvZW51bSBoYWJldCBpbiBjb3JudS48L3E+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9yLiBTLiAxLjQuMzQiIHZhbGlkPSJ5ZXMiPkhvci4gU2F0LiBpLiA0LCAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoaXMgZWFnZXIgcml2YWxyeSBkaWQgbm90IGNhcnJ5IENyYXNzdXMgYXdheSBpbnRvIGFueXRoaW5nIGxpa2UgaGF0cmVkIG9yIG1hbGljZTsgaGUgd2FzIG1lcmVseSB2ZXhlZCB0aGF0IFBvbXBleSBhbmQgQ2Flc2FyIHNob3VsZCBiZSBob25vdXJlZCBhYm92ZSBoaW1zZWxmLCBidXQgaGUgZGlkIG5vdCBhc3NvY2lhdGUgdGhpcyBhbWJpdGlvbiBvZiBoaXMgd2l0aCBlbm1pdHkgb3IgbWFsZXZvbGVuY2UuIEl0IGlzIHRydWUgdGhhdCBvbmNlIHdoZW4gQ2Flc2FyIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IHBpcmF0ZXMgaW4gQXNpYSBhbmQgd2FzIGhlbGQgYSBjbG9zZSBwcmlzb25lciBieSB0aGVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFBsdXRhcmNoJ3MgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMiIgdmFsaWQ9InllcyI+Q2Flc2FyLCBjaGFwdGVyIGlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSBleGNsYWltZWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMiIgdmFsaWQ9InllcyI+Q2Flc2FyLCBjaGFwdGVyIGlpLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENyYXNzdXMsIGhvdyBncmVhdCBhIHBsZWFzdXJlIHdpbHQgdGhvdSB0YXN0ZSB3aGVuIHRob3UgaGVhcmVzdCBvZiBteSBjYXB0dXJlITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlcndhcmRzLCBhdCBsZWFzdCwgdGhleSB3ZXJlIG9uIGZyaWVuZGx5IHRlcm1zIHdpdGggb25lIGFub3RoZXIsIGFuZCBvbmNlIHdoZW4gQ2Flc2FyIHdhcyBvbiB0aGUgcG9pbnQgb2Ygc2V0dGluZyBvdXQgZm9yIFNwYWluIGFzIHByYWV0b3IsIGFuZCBoYWQgbm8gbW9uZXksIGFuZCBoaXMgY3JlZGl0b3JzIGRlc2NlbmRlZCB1cG9uIGhpbSBhbmQgYmVnYW4gdG8gYXR0YWNoIGhpcyBvdXRmaXQsIENyYXNzdXMgZGlkIG5vdCBsZWF2ZSBoaW0gaW4gdGhlIGx1cmNoLCBidXQgZnJlZWQgaGltIGZyb20gZW1iYXJyYXNzbWVudCBieSBtYWtpbmcgaGltc2VsZiBoaXMgc3VyZXR5IGZvciBlaWdodCBodW5kcmVkIGFuZCB0aGlydHkgdGFsZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGFsbCBSb21lIHdhcyBkaXZpZGVkIGludG8gdGhyZWUgcG93ZXJmdWwgcGFydGllcywgdGhhdCBvZiBQb21wZXksIHRoYXQgb2YgQ2Flc2FyLCBhbmQgdGhhdCBvZiBDcmFzc3VzIChmb3IgQ2F0bydzIHJlcHV0YXRpb24gd2FzIGdyZWF0ZXIgdGhhbiBoaXMgcG93ZXIsIGFuZCBtZW4gYWRtaXJlZCBoaW0gbW9yZSB0aGFuIHRoZXkgZm9sbG93ZWQgaGltKSwgaXQgd2FzIHRoZSB0aG91Z2h0ZnVsIGFuZCBjb25zZXJ2YXRpdmUgcGFydCBvZiB0aGUgY2l0eSB3aGljaCBhdHRhY2hlZCBpdHNlbGYgdG8gUG9tcGV5LCB0aGUgdmlvbGVudCBhbmQgdm9sYXRpbGUgcGFydCB3aGljaCBzdXBwb3J0ZWQgdGhlIGhvcGVzIG9mIENhZXNhciwgd2hpbGUgQ3Jhc3N1cyB0b29rIGEgbWlkZGxlIGdyb3VuZCBhbmQgZHJldyBmcm9tIGJvdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgdmVyeSBtYW55IGNoYW5nZXMgaW4gaGlzIHBvbGl0aWNhbCB2aWV3cywgYW5kIHdhcyBuZWl0aGVyIGEgc3RlYWRmYXN0IGZyaWVuZCBub3IgYW4gaW1wbGFjYWJsZSBlbmVteSwgYnV0IHJlYWRpbHkgYWJhbmRvbmVkIGJvdGggaGlzIGZhdm91cnMgYW5kIGhpcyByZXNlbnRtZW50cyBhdCB0aGUgZGljdGF0ZXMgb2YgaGlzIGludGVyZXN0cywgc28gdGhhdCwgZnJlcXVlbnRseSwgd2l0aGluIGEgc2hvcnQgc3BhY2Ugb2YgdGltZSwgdGhlIHNhbWUgbWVuIGFuZCB0aGUgc2FtZSBtZWFzdXJlcyBmb3VuZCBpbiBoaW0gYm90aCBhbiBhZHZvY2F0ZSBhbmQgYW4gb3Bwb25lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBoYWQgZ3JlYXQgaW5mbHVlbmNlLCBib3RoIGZyb20gdGhlIGZhdm91cnMgd2hpY2ggaGUgYmVzdG93ZWQgYW5kIHRoZSBmZWFyIHdoaWNoIGhlIGluc3BpcmVkLCBidXQgbW9yZSBmcm9tIHRoZSBmZWFyLiBBdCBhbnkgcmF0ZS4gU2ljaW5uaXVzLCB3aG8gZ2F2ZSB0aGUgZ3JlYXRlc3QgYW5ub3lhbmNlIHRvIHRoZSBtYWdpc3RyYXRlcyBhbmQgcG9wdWxhciBsZWFkZXJzIG9mIGhpcyBkYXksIHdoZW4gYXNrZWQgd2h5IENyYXNzdXMgd2FzIHRoZSBvbmx5IG9uZSB3aG9tIGhlIGxldCBhbG9uZSBhbmQgZGlkIG5vdCB3b3JyeSwgc2FpZCB0aGF0IHRoZSBtYW4gaGFkIGhheSBvbiBoaXMgaG9ybi4gTm93IHRoZSBSb21hbnMgdXNlZCB0byBjb2lsIGhheSBhYm91dCB0aGUgaG9ybiBvZiBhbiBveCB0aGF0IGdvcmVkLCBzbyB0aGF0IHRob3NlIHdobyBlbmNvdW50ZXJlZCBpdCBtaWdodCBiZSBvbiB0aGVpciBndWFyZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5mb2VudW0gaGFiZXQgaW4gY29ybnUuPC9xPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9yLiBTLiAxLjQuMzQiIHZhbGlkPSJ5ZXMiPkhvci4gU2F0LiBpLiA0LCAzNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+Zm9lbnVtIGhhYmV0IGluIGNvcm51LjwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikhvci4gUy4gMS40LjM0IiB2YWxpZD0ieWVzIj5Ib3IuIFNhdC4gaS4gNCwgMzQuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBpbnN1cnJlY3Rpb24gb2YgdGhlIGdsYWRpYXRvcnMgYW5kIHRoZWlyIGRldmFzdGF0aW9uIG9mIEl0YWx5LCB3aGljaCBpcyBnZW5lcmFsbHkgY2FsbGVkIHRoZSB3YXIgb2YgU3BhcnRhY3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjczLTcxIEIuQy48L25vdGU+IGhhZCBpdHMgb3JpZ2luIGFzIGZvbGxvd3MuIEEgY2VydGFpbiBMZW50dWx1cyBCYXRpYXR1cyBoYWQgYSBzY2hvb2wgb2YgZ2xhZGlhdG9ycyBhdCBDYXB1YSwgbW9zdCBvZiB3aG9tIHdlcmUgR2F1bHMgYW5kIFRocmFjaWFucy4gVGhyb3VnaCBubyBtaXNjb25kdWN0IG9mIHRoZWlycywgYnV0IG93aW5nIHRvIHRoZSBpbmp1c3RpY2Ugb2YgdGhlaXIgb3duZXIsIHRoZXkgd2VyZSBrZXB0IGluIGNsb3NlIGNvbmZpbmVtZW50IGFuZCByZXNlcnZlZCBmb3IgZ2xhZGlhdG9yaWFsIGNvbWJhdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlR3byBodW5kcmVkIG9mIHRoZXNlIHBsYW5uZWQgdG8gbWFrZSB0aGVpciBlc2NhcGUsIGFuZCB3aGVuIGluZm9ybWF0aW9uIHdhcyBsYWlkIGFnYWluc3QgdGhlbSwgdGhvc2Ugd2hvIGdvdCB3aW5kIG9mIGl0IGFuZCBzdWNjZWVkZWQgaW4gZ2V0dGluZyBhd2F5LCBzZXZlbnR5LWVpZ2h0IGluIG51bWJlciwgc2VpemVkIGNsZWF2ZXJzIGFuZCBzcGl0cyBmcm9tIHNvbWUga2l0Y2hlbiBhbmQgc2FsbGllZCBvdXQuIE9uIHRoZSByb2FkIHRoZXkgZmVsbCBpbiB3aXRoIHdhZ2dvbnMgY29udmV5aW5nIGdsYWRpYXRvcnMnIHdlYXBvbnMgdG8gYW5vdGhlciBjaXR5OyB0aGVzZSB0aGV5IHBsdW5kZXJlZCBhbmQgYXJtZWQgdGhlbXNlbHZlcy4gVGhlbiB0aGV5IHRvb2sgdXAgYSBzdHJvbmcgcG9zaXRpb24gYW5kIGVsZWN0ZWQgdGhyZWUgbGVhZGVycy4gVGhlIGZpcnN0IG9mIHRoZXNlIHdhcyBTcGFydGFjdXMsIGEgVGhyYWNpYW4gb2YgTm9tYWRpYyBzdG9jaywgcG9zc2Vzc2VkIG5vdCBvbmx5IG9mIGdyZWF0IGNvdXJhZ2UgYW5kIHN0cmVuZ3RoLCBidXQgYWxzbyBpbiBzYWdhY2l0eSBhbmQgY3VsdHVyZSBzdXBlcmlvciB0byBoaXMgZm9ydHVuZSwgYW5kIG1vcmUgSGVsbGVuaWMgdGhhbiBUaHJhY2lhbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0IHdoZW4gaGUgd2FzIGZpcnN0IGJyb3VnaHQgdG8gUm9tZSB0byBiZSBzb2xkLCBhIHNlcnBlbnQgd2FzIHNlZW4gY29pbGVkIGFib3V0IGhpcyBmYWNlIGFzIGhlIHNsZXB0LCBhbmQgaGlzIHdpZmUsIHdobyB3YXMgb2YgdGhlIHNhbWUgdHJpYmUgYXMgU3BhcnRhY3VzLCBhIHByb3BoZXRlc3MsIGFuZCBzdWJqZWN0IHRvIHZpc2l0YXRpb25zIG9mIHRoZSBEaW9ueXNpYWMgZnJlbnp5LCBkZWNsYXJlZCBpdCB0aGUgc2lnbiBvZiBhIGdyZWF0IGFuZCBmb3JtaWRhYmxlIHBvd2VyIHdoaWNoIHdvdWxkIGF0dGVuZCBoaW0gdG8gYSBmb3J0dW5hdGUgaXNzdWUuIFRoaXMgd29tYW4gc2hhcmVkIGluIGhpcyBlc2NhcGUgYW5kIHdhcyB0aGVuIGxpdmluZyB3aXRoIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgaW5zdXJyZWN0aW9uIG9mIHRoZSBnbGFkaWF0b3JzIGFuZCB0aGVpciBkZXZhc3RhdGlvbiBvZiBJdGFseSwgd2hpY2ggaXMgZ2VuZXJhbGx5IGNhbGxlZCB0aGUgd2FyIG9mIFNwYXJ0YWN1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjczLTcxIEIuQy48L25vdGU+IGhhZCBpdHMgb3JpZ2luIGFzIGZvbGxvd3MuIEEgY2VydGFpbiBMZW50dWx1cyBCYXRpYXR1cyBoYWQgYSBzY2hvb2wgb2YgZ2xhZGlhdG9ycyBhdCBDYXB1YSwgbW9zdCBvZiB3aG9tIHdlcmUgR2F1bHMgYW5kIFRocmFjaWFucy4gVGhyb3VnaCBubyBtaXNjb25kdWN0IG9mIHRoZWlycywgYnV0IG93aW5nIHRvIHRoZSBpbmp1c3RpY2Ugb2YgdGhlaXIgb3duZXIsIHRoZXkgd2VyZSBrZXB0IGluIGNsb3NlIGNvbmZpbmVtZW50IGFuZCByZXNlcnZlZCBmb3IgZ2xhZGlhdG9yaWFsIGNvbWJhdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlR3byBodW5kcmVkIG9mIHRoZXNlIHBsYW5uZWQgdG8gbWFrZSB0aGVpciBlc2NhcGUsIGFuZCB3aGVuIGluZm9ybWF0aW9uIHdhcyBsYWlkIGFnYWluc3QgdGhlbSwgdGhvc2Ugd2hvIGdvdCB3aW5kIG9mIGl0IGFuZCBzdWNjZWVkZWQgaW4gZ2V0dGluZyBhd2F5LCBzZXZlbnR5LWVpZ2h0IGluIG51bWJlciwgc2VpemVkIGNsZWF2ZXJzIGFuZCBzcGl0cyBmcm9tIHNvbWUga2l0Y2hlbiBhbmQgc2FsbGllZCBvdXQuIE9uIHRoZSByb2FkIHRoZXkgZmVsbCBpbiB3aXRoIHdhZ2dvbnMgY29udmV5aW5nIGdsYWRpYXRvcnMnIHdlYXBvbnMgdG8gYW5vdGhlciBjaXR5OyB0aGVzZSB0aGV5IHBsdW5kZXJlZCBhbmQgYXJtZWQgdGhlbXNlbHZlcy4gVGhlbiB0aGV5IHRvb2sgdXAgYSBzdHJvbmcgcG9zaXRpb24gYW5kIGVsZWN0ZWQgdGhyZWUgbGVhZGVycy4gVGhlIGZpcnN0IG9mIHRoZXNlIHdhcyBTcGFydGFjdXMsIGEgVGhyYWNpYW4gb2YgTm9tYWRpYyBzdG9jaywgcG9zc2Vzc2VkIG5vdCBvbmx5IG9mIGdyZWF0IGNvdXJhZ2UgYW5kIHN0cmVuZ3RoLCBidXQgYWxzbyBpbiBzYWdhY2l0eSBhbmQgY3VsdHVyZSBzdXBlcmlvciB0byBoaXMgZm9ydHVuZSwgYW5kIG1vcmUgSGVsbGVuaWMgdGhhbiBUaHJhY2lhbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCB3aGVuIGhlIHdhcyBmaXJzdCBicm91Z2h0IHRvIFJvbWUgdG8gYmUgc29sZCwgYSBzZXJwZW50IHdhcyBzZWVuIGNvaWxlZCBhYm91dCBoaXMgZmFjZSBhcyBoZSBzbGVwdCwgYW5kIGhpcyB3aWZlLCB3aG8gd2FzIG9mIHRoZSBzYW1lIHRyaWJlIGFzIFNwYXJ0YWN1cywgYSBwcm9waGV0ZXNzLCBhbmQgc3ViamVjdCB0byB2aXNpdGF0aW9ucyBvZiB0aGUgRGlvbnlzaWFjIGZyZW56eSwgZGVjbGFyZWQgaXQgdGhlIHNpZ24gb2YgYSBncmVhdCBhbmQgZm9ybWlkYWJsZSBwb3dlciB3aGljaCB3b3VsZCBhdHRlbmQgaGltIHRvIGEgZm9ydHVuYXRlIGlzc3VlLiBUaGlzIHdvbWFuIHNoYXJlZCBpbiBoaXMgZXNjYXBlIGFuZCB3YXMgdGhlbiBsaXZpbmcgd2l0aCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgdGhlIGdsYWRpYXRvcnMgcmVwdWxzZWQgdGhlIHNvbGRpZXJzIHdobyBjYW1lIGFnYWluc3QgdGhlbSBmcm9tIENhcHVhLCBhbmQgZ2V0dGluZyBob2xkIG9mIG1hbnkgYXJtcyBvZiByZWFsIHdhcmZhcmUsIHRoZXkgZ2xhZGx5IHRvb2sgdGhlc2UgaW4gZXhjaGFuZ2UgZm9yIHRoZWlyIG93biwgY2FzdGluZyBhd2F5IHRoZWlyIGdsYWRpYXRvcmlhbCB3ZWFwb25zIGFzIGRpc2hvbm91cmFibGUgYW5kIGJhcmJhcm91cy4gVGhlbiBDbG9kaXVzIHRoZSBwcmFldG9yIHdhcyBzZW50IG91dCBmcm9tIFJvbWUgYWdhaW5zdCB0aGVtIHdpdGggdGhyZWUgdGhvdXNhbmQgc29sZGllcnMsIGFuZCBsYWlkIHNpZWdlIHRvIHRoZW0gb24gYSBoaWxsIHdoaWNoIGhhZCBodXQgb25lIGFzY2VudCwgYW5kIHRoYXQgYSBuYXJyb3cgYW5kIGRpZmZpY3VsdCBvbmUsIHdoaWNoIENsb2RpdXMgY2xvc2VseSB3YXRjaGVkOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5ldmVyeXdoZXJlIGVsc2UgdGhlcmUgd2VyZSBzbW9vdGggYW5kIHByZWNpcGl0b3VzIGNsaWZmcy4gQnV0IHRoZSB0b3Agb2YgdGhlIGhpbGwgd2FzIGNvdmVyZWQgd2l0aCBhIHdpbGQgdmluZSBvZiBhYnVuZGFudCBncm93dGgsIGZyb20gd2hpY2ggdGhlIGJlc2llZ2VkIGN1dCBvZmYgdGhlIHNlcnZpY2VhYmxlIGJyYW5jaGVzLCBhbmQgd292ZSB0aGVzZSBpbnRvIHN0cm9uZyBsYWRkZXJzIG9mIHN1Y2ggc3RyZW5ndGggYW5kIGxlbmd0aCB0aGF0IHdoZW4gdGhleSB3ZXJlIGZhc3RlbmVkIGF0IHRoZSB0b3AgdGhleSByZWFjaGVkIGFsb25nIHRoZSBmYWNlIG9mIHRoZSBjbGlmZiB0byB0aGUgcGxhaW4gYmVsb3cuIE9uIHRoZXNlIHRoZXkgZGVzY2VuZGVkIHNhZmVseSwgYWxsIGJ1dCBvbmUgbWFuLCB3aG8gcmVtYWluZWQgYWJvdmUgdG8gYXR0ZW5kIHRvIHRoZSBhcm1zLiBXaGVuIHRoZSByZXN0IGhhZCBnb3QgZG93biwgaGUgYmVnYW4gdG8gZHJvcCB0aGUgYXJtcywgYW5kIGFmdGVyIGhlIGhhZCB0aHJvd24gdGhlbSBhbGwgZG93biwgZ290IGF3YXkgaGltc2VsZiBhbHNvIGxhc3Qgb2YgYWxsIGluIHNhZmV0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T2YgYWxsIHRoaXMgdGhlIFJvbWFucyB3ZXJlIGlnbm9yYW50LCBhbmQgdGhlcmVmb3JlIHRoZWlyIGVuZW15IHN1cnJvdW5kZWQgdGhlbSwgdGhyZXcgdGhlbSBpbnRvIGNvbnN0ZXJuYXRpb24gYnkgdGhlIHN1ZGRlbm5lc3Mgb2YgdGhlIGF0dGFjaywgcHV0IHRoZW0gdG8gZmxpZ2h0LCBhbmQgdG9vayB0aGVpciBjYW1wLiBUaGV5IHdlcmUgYWxzbyBqb2luZWQgYnkgbWFueSBvZiB0aGUgaGVyZHNtZW4gYW5kIHNoZXBoZXJkcyBvZiB0aGUgcmVnaW9uLCBzdHVyZHkgbWVuIGFuZCBzd2lmdCBvZiBmb290LCBzb21lIG9mIHdob20gdGhleSBhcm1lZCBmdWxseSwgYW5kIGVtcGxveWVkIG90aGVycyBhcyBzY291dHMgYW5kIGxpZ2h0IGluZmFudHJ5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB0aGUgZ2xhZGlhdG9ycyByZXB1bHNlZCB0aGUgc29sZGllcnMgd2hvIGNhbWUgYWdhaW5zdCB0aGVtIGZyb20gQ2FwdWEsIGFuZCBnZXR0aW5nIGhvbGQgb2YgbWFueSBhcm1zIG9mIHJlYWwgd2FyZmFyZSwgdGhleSBnbGFkbHkgdG9vayB0aGVzZSBpbiBleGNoYW5nZSBmb3IgdGhlaXIgb3duLCBjYXN0aW5nIGF3YXkgdGhlaXIgZ2xhZGlhdG9yaWFsIHdlYXBvbnMgYXMgZGlzaG9ub3VyYWJsZSBhbmQgYmFyYmFyb3VzLiBUaGVuIENsb2RpdXMgdGhlIHByYWV0b3Igd2FzIHNlbnQgb3V0IGZyb20gUm9tZSBhZ2FpbnN0IHRoZW0gd2l0aCB0aHJlZSB0aG91c2FuZCBzb2xkaWVycywgYW5kIGxhaWQgc2llZ2UgdG8gdGhlbSBvbiBhIGhpbGwgd2hpY2ggaGFkIGh1dCBvbmUgYXNjZW50LCBhbmQgdGhhdCBhIG5hcnJvdyBhbmQgZGlmZmljdWx0IG9uZSwgd2hpY2ggQ2xvZGl1cyBjbG9zZWx5IHdhdGNoZWQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmV2ZXJ5d2hlcmUgZWxzZSB0aGVyZSB3ZXJlIHNtb290aCBhbmQgcHJlY2lwaXRvdXMgY2xpZmZzLiBCdXQgdGhlIHRvcCBvZiB0aGUgaGlsbCB3YXMgY292ZXJlZCB3aXRoIGEgd2lsZCB2aW5lIG9mIGFidW5kYW50IGdyb3d0aCwgZnJvbSB3aGljaCB0aGUgYmVzaWVnZWQgY3V0IG9mZiB0aGUgc2VydmljZWFibGUgYnJhbmNoZXMsIGFuZCB3b3ZlIHRoZXNlIGludG8gc3Ryb25nIGxhZGRlcnMgb2Ygc3VjaCBzdHJlbmd0aCBhbmQgbGVuZ3RoIHRoYXQgd2hlbiB0aGV5IHdlcmUgZmFzdGVuZWQgYXQgdGhlIHRvcCB0aGV5IHJlYWNoZWQgYWxvbmcgdGhlIGZhY2Ugb2YgdGhlIGNsaWZmIHRvIHRoZSBwbGFpbiBiZWxvdy4gT24gdGhlc2UgdGhleSBkZXNjZW5kZWQgc2FmZWx5LCBhbGwgYnV0IG9uZSBtYW4sIHdobyByZW1haW5lZCBhYm92ZSB0byBhdHRlbmQgdG8gdGhlIGFybXMuIFdoZW4gdGhlIHJlc3QgaGFkIGdvdCBkb3duLCBoZSBiZWdhbiB0byBkcm9wIHRoZSBhcm1zLCBhbmQgYWZ0ZXIgaGUgaGFkIHRocm93biB0aGVtIGFsbCBkb3duLCBnb3QgYXdheSBoaW1zZWxmIGFsc28gbGFzdCBvZiBhbGwgaW4gc2FmZXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mIGFsbCB0aGlzIHRoZSBSb21hbnMgd2VyZSBpZ25vcmFudCwgYW5kIHRoZXJlZm9yZSB0aGVpciBlbmVteSBzdXJyb3VuZGVkIHRoZW0sIHRocmV3IHRoZW0gaW50byBjb25zdGVybmF0aW9uIGJ5IHRoZSBzdWRkZW5uZXNzIG9mIHRoZSBhdHRhY2ssIHB1dCB0aGVtIHRvIGZsaWdodCwgYW5kIHRvb2sgdGhlaXIgY2FtcC4gVGhleSB3ZXJlIGFsc28gam9pbmVkIGJ5IG1hbnkgb2YgdGhlIGhlcmRzbWVuIGFuZCBzaGVwaGVyZHMgb2YgdGhlIHJlZ2lvbiwgc3R1cmR5IG1lbiBhbmQgc3dpZnQgb2YgZm9vdCwgc29tZSBvZiB3aG9tIHRoZXkgYXJtZWQgZnVsbHksIGFuZCBlbXBsb3llZCBvdGhlcnMgYXMgc2NvdXRzIGFuZCBsaWdodCBpbmZhbnRyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHNlY29uZCBwbGFjZSwgUHVibGl1cyBWYXJpbnVzLCB0aGUgcHJhZXRvciwgd2FzIHNlbnQgb3V0IGFnYWluc3QgdGhlbSwgd2hvc2UgbGlldXRlbmFudCwgYSBjZXJ0YWluIEZ1cml1cywgd2l0aCB0d28gdGhvdXNhbmQgc29sZGllcnMsIHRoZXkgZmlyc3QgZW5nYWdlZCBhbmQgcm91dGVkOyB0aGVuIFNwYXJ0YWN1cyBuYXJyb3dseSB3YXRjaGVkIHRoZSBtb3ZlbWVudHMgb2YgQ29zc2luaXVzLCB3aG8gaGFkIGJlZW4gc2VudCBvdXQgd2l0aCBhIGxhcmdlIGZvcmNlIHRvIGFkdmlzZSBhbmQgYXNzaXN0IFZhcmludXMgaW4gdGhlIGNvbW1hbmQsIGFuZCBjYW1lIG5lYXIgc2VpemluZyBoaW0gYXMgaGUgd2FzIGJhdGhpbmcgbmVhciBTYWxpbmFlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Db3NzaW5pdXMgYmFyZWx5IGVzY2FwZWQgd2l0aCBtdWNoIGRpZmZpY3VsdHksIGFuZCBTcGFydGFjdXMgYXQgb25jZSBzZWl6ZWQgaGlzIGJhZ2dhZ2UsIHByZXNzZWQgaGFyZCB1cG9uIGhpbSBpbiBwdXJzdWl0LCBhbmQgdG9vayBoaXMgY2FtcCB3aXRoIGdyZWF0IHNsYXVnaHRlcnMgQ29zc2luaXVzIGFsc28gZmVsbC4gQnkgZGVmZWF0aW5nIHRoZSBwcmFldG9yIGhpbXNlbGYgaW4gbWFueSBiYXR0bGVzLCBhbmQgZmluYWxseSBjYXB0dXJpbmcgaGlzIGxpY3RvcnMgYW5kIHRoZSB2ZXJ5IGhvcnNlIGhlIHJvZGUsIFNwYXJ0YWN1cyB3YXMgc29vbiBncmVhdCBhbmQgZm9ybWlkYWJsZTsgYnV0IGhlIHRvb2sgYSBwcm9wZXIgdmlldyBvZiB0aGUgc2l0dWF0aW9uLCBhbmQgc2luY2UgaGUgY291bGQgbm90IGV4cGVjdCB0byBvdmVyY29tZSB0aGUgUm9tYW4gcG93ZXIsIGJlZ2FuIHRvIGxlYWQgaGlzIGFybXkgdG93YXJkIHRoZSBBbHBzLCB0aGlua2luZyBpdCBuZWNlc3NhcnkgZm9yIHRoZW0gdG8gY3Jvc3MgdGhlIG1vdW50YWlucyBhbmQgZ28gdG8gdGhlaXIgcmVzcGVjdGl2ZSBob21lcywgc29tZSB0byBUaHJhY2UsIGFuZCBzb21lIHRvIEdhdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgbWVuIHdlcmUgbm93IHN0cm9uZyBpbiBudW1iZXJzIGFuZCBmdWxsIG9mIGNvbmZpZGVuY2UsIGFuZCB3b3VsZCBub3QgbGlzdGVuIHRvIGhpbSwgYnV0IHdlbnQgcmF2YWdpbmcgb3ZlciBJdGFseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIFB1YmxpdXMgVmFyaW51cywgdGhlIHByYWV0b3IsIHdhcyBzZW50IG91dCBhZ2FpbnN0IHRoZW0sIHdob3NlIGxpZXV0ZW5hbnQsIGEgY2VydGFpbiBGdXJpdXMsIHdpdGggdHdvIHRob3VzYW5kIHNvbGRpZXJzLCB0aGV5IGZpcnN0IGVuZ2FnZWQgYW5kIHJvdXRlZDsgdGhlbiBTcGFydGFjdXMgbmFycm93bHkgd2F0Y2hlZCB0aGUgbW92ZW1lbnRzIG9mIENvc3Npbml1cywgd2hvIGhhZCBiZWVuIHNlbnQgb3V0IHdpdGggYSBsYXJnZSBmb3JjZSB0byBhZHZpc2UgYW5kIGFzc2lzdCBWYXJpbnVzIGluIHRoZSBjb21tYW5kLCBhbmQgY2FtZSBuZWFyIHNlaXppbmcgaGltIGFzIGhlIHdhcyBiYXRoaW5nIG5lYXIgU2FsaW5hZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvc3Npbml1cyBiYXJlbHkgZXNjYXBlZCB3aXRoIG11Y2ggZGlmZmljdWx0eSwgYW5kIFNwYXJ0YWN1cyBhdCBvbmNlIHNlaXplZCBoaXMgYmFnZ2FnZSwgcHJlc3NlZCBoYXJkIHVwb24gaGltIGluIHB1cnN1aXQsIGFuZCB0b29rIGhpcyBjYW1wIHdpdGggZ3JlYXQgc2xhdWdodGVycyBDb3NzaW5pdXMgYWxzbyBmZWxsLiBCeSBkZWZlYXRpbmcgdGhlIHByYWV0b3IgaGltc2VsZiBpbiBtYW55IGJhdHRsZXMsIGFuZCBmaW5hbGx5IGNhcHR1cmluZyBoaXMgbGljdG9ycyBhbmQgdGhlIHZlcnkgaG9yc2UgaGUgcm9kZSwgU3BhcnRhY3VzIHdhcyBzb29uIGdyZWF0IGFuZCBmb3JtaWRhYmxlOyBidXQgaGUgdG9vayBhIHByb3BlciB2aWV3IG9mIHRoZSBzaXR1YXRpb24sIGFuZCBzaW5jZSBoZSBjb3VsZCBub3QgZXhwZWN0IHRvIG92ZXJjb21lIHRoZSBSb21hbiBwb3dlciwgYmVnYW4gdG8gbGVhZCBoaXMgYXJteSB0b3dhcmQgdGhlIEFscHMsIHRoaW5raW5nIGl0IG5lY2Vzc2FyeSBmb3IgdGhlbSB0byBjcm9zcyB0aGUgbW91bnRhaW5zIGFuZCBnbyB0byB0aGVpciByZXNwZWN0aXZlIGhvbWVzLCBzb21lIHRvIFRocmFjZSwgYW5kIHNvbWUgdG8gR2F1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgbWVuIHdlcmUgbm93IHN0cm9uZyBpbiBudW1iZXJzIGFuZCBmdWxsIG9mIGNvbmZpZGVuY2UsIGFuZCB3b3VsZCBub3QgbGlzdGVuIHRvIGhpbSwgYnV0IHdlbnQgcmF2YWdpbmcgb3ZlciBJdGFseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JdCB3YXMgbm93IG5vIGxvbmdlciB0aGUgaW5kaWduaXR5IGFuZCBkaXNncmFjZSBvZiB0aGUgcmV2b2x0IHRoYXQgaGFyYXNzZWQgdGhlIHNlbmF0ZSwgYnV0IHRoZXkgd2VyZSBjb25zdHJhaW5lZCBieSB0aGVpciBmZWFyIGFuZCBwZXJpbCB0byBzZW5kIGJvdGggY29uc3VscyBpbnRvIHRoZSBmaWVsZCwgYXMgdGhleSB3b3VsZCB0byBhIHdhciBvZiB0aGUgdXRtb3N0IGRpZmZpY3VsdHkgYW5kIG1hZ25pdHVkZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5HZWxsaXVzLCBvbmUgb2YgdGhlIGNvbnN1bHMsIGZlbGwgc3VkZGVubHkgdXBvbiB0aGUgR2VybWFucywgd2hvIHdlcmUgc28gaW5zb2xlbnQgYW5kIGJvbGQgYXMgdG8gc2VwYXJhdGUgdGhlbXNlbHZlcyBmcm9tIHRoZSBtYWluIGJvZHkgb2YgU3BhcnRhY3VzLCBhbmQgY3V0IHRoZW0gYWxsIHRvIHBpZWNlczsgYnV0IHdoZW4gTGVudHVsdXMsIHRoZSBvdGhlciBjb25zdWwsIGhhZCBzdXJyb3VuZGVkIHRoZSBlbmVteSB3aXRoIGxhcmdlIGZvcmNlcywgU3BhcnRhY3VzIHJ1c2hlZCB1cG9uIHRoZW0sIGpvaW5lZCBiYXR0bGUsIGRlZmVhdGVkIHRoZSBsZWdhdGVzIG9mIExlbnR1bHVzLCBhbmQgc2VpemVkIGFsbCB0aGVpciBiYWdnYWdlLiBUaGVuLCBhcyBoZSB3YXMgZm9yY2luZyBoaXMgd2F5IHRvd2FyZHMgdGhlIEFscHMsIGhlIHdhcyBtZXQgYnkgQ2Fzc2l1cywgdGhlIGdvdmVybm9yIG9mIENpc2FscGluZSBHYXVsLCB3aXRoIGFuIGFybXkgb2YgdGVuIHRob3VzYW5kIG1lbiwgYW5kIGluIHRoZSBiYXR0bGUgdGhhdCBlbnN1ZWQsIENhc3NpdXMgd2FzIGRlZmVhdGVkLCBsb3N0IG1hbnkgbWVuLCBhbmQgZXNjYXBlZCBoaW1zZWxmIHdpdGggZGlmZmljdWx0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkdlbGxpdXMsIG9uZSBvZiB0aGUgY29uc3VscywgZmVsbCBzdWRkZW5seSB1cG9uIHRoZSBHZXJtYW5zLCB3aG8gd2VyZSBzbyBpbnNvbGVudCBhbmQgYm9sZCBhcyB0byBzZXBhcmF0ZSB0aGVtc2VsdmVzIGZyb20gdGhlIG1haW4gYm9keSBvZiBTcGFydGFjdXMsIGFuZCBjdXQgdGhlbSBhbGwgdG8gcGllY2VzOyBidXQgd2hlbiBMZW50dWx1cywgdGhlIG90aGVyIGNvbnN1bCwgaGFkIHN1cnJvdW5kZWQgdGhlIGVuZW15IHdpdGggbGFyZ2UgZm9yY2VzLCBTcGFydGFjdXMgcnVzaGVkIHVwb24gdGhlbSwgam9pbmVkIGJhdHRsZSwgZGVmZWF0ZWQgdGhlIGxlZ2F0ZXMgb2YgTGVudHVsdXMsIGFuZCBzZWl6ZWQgYWxsIHRoZWlyIGJhZ2dhZ2UuIFRoZW4sIGFzIGhlIHdhcyBmb3JjaW5nIGhpcyB3YXkgdG93YXJkcyB0aGUgQWxwcywgaGUgd2FzIG1ldCBieSBDYXNzaXVzLCB0aGUgZ292ZXJub3Igb2YgQ2lzYWxwaW5lIEdhdWwsIHdpdGggYW4gYXJteSBvZiB0ZW4gdGhvdXNhbmQgbWVuLCBhbmQgaW4gdGhlIGJhdHRsZSB0aGF0IGVuc3VlZCwgQ2Fzc2l1cyB3YXMgZGVmZWF0ZWQsIGxvc3QgbWFueSBtZW4sIGFuZCBlc2NhcGVkIGhpbXNlbGYgd2l0aCBkaWZmaWN1bHR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBsZWFybmluZyBvZiB0aGlzLCB0aGUgU2VuYXRlIGFuZ3JpbHkgb3JkZXJlZCB0aGUgY29uc3VscyB0byBrZWVwIHF1aWV0LCBhbmQgY2hvc2UgQ3Jhc3N1cyB0byBjb25kdWN0IHRoZSB3YXIsIGFuZCBtYW55IG9mIHRoZSBub2JsZXMgd2VyZSBpbmR1Y2VkIGJ5IGhpcyByZXB1dGF0aW9uIGFuZCB0aGVpciBmcmllbmRzaGlwIGZvciBoaW0gdG8gc2VydmUgdW5kZXIgaGltLiBDcmFzc3VzIGhpbXNlbGYsIGFjY29yZGluZ2x5LCB0b29rIHBvc2l0aW9uIG9uIHRoZSBib3JkZXJzIG9mIFBpY2VudW0uIGV4cGVjdGluZyB0byByZWNlaXZlIHRoZSBhdHRhY2sgb2YgU3BhcnRhY3VzLCB3aG8gd2FzIGhhc3RlbmluZyB0aGl0aGVyOyBhbmQgaGUgc2VudCBNdW1taXVzLCBoaXMgbGVnYXRlLCB3aXRoIHR3byBsZWdpb25zLCBieSBhIGNpcmN1aXRvdXMgcm91dGUsIHdpdGggb3JkZXJzIHRvIGZvbGxvdyB0aGUgZW5lbXksIGJ1dCBub3QgdG8gam9pbiBiYXR0bGUgbm9yIGV2ZW4gc2tpcm1pc2ggd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NdW1taXVzLCBob3dldmVyLCBhdCB0aGUgZmlyc3QgcHJvbWlzaW5nIG9wcG9ydHVuaXR5LCBnYXZlIGJhdHRsZSBhbmQgd2FzIGRlZmVhdGVkOyBtYW55IG9mIGhpcyBtZW4gd2VyZSBzbGFpbiwgYW5kIG1hbnkgb2YgdGhlbSB0aHJldyBhd2F5IHRoZWlyIGFybXMgYW5kIGZsZWQgZm9yIHRoZWlyIGxpdmVzLiBDcmFzc3VzIGdhdmUgTXVtbWl1cyBoaW1zZWxmIGEgcm91Z2ggcmVjZXB0aW9uLCBhbmQgd2hlbiBoZSBhcm1lZCBoaXMgc29sZGllcnMgYW5ldywgbWFkZSB0aGVtIGdpdmUgcGxlZGdlcyB0aGF0IHRoZXkgd291bGQga2VlcCB0aGVpciBhcm1zLiBGaXZlIGh1bmRyZWQgb2YgdGhlbSwgbW9yZW92ZXIsIHdobyBoYWQgc2hvd24gdGhlIGdyZWF0ZXN0IGNvd2FyZGljZSBhbmQgYmVlbiBmaXJzdCB0byBmbHksIGhlIGRpdmlkZWQgaW50byBmaWZ0eSBkZWNhZGVzLCBhbmQgcHV0IHRvIGRlYXRoIG9uZSBmcm9tIGVhY2ggZGVjYWRlLCBvbiB3aG9tIHRoZSBsb3QgZmVsbCwgdGh1cyByZXZpdmluZywgYWZ0ZXIgdGhlIGxhcHNlIG9mIG1hbnkgeWVhcnMsIGFuIGFuY2llbnQgbW9kZSBvZiBwdW5pc2hpbmcgdGhlIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZGlzZ3JhY2UgYWxzbyBhdHRhY2hlcyB0byB0aGlzIG1hbm5lciBvZiBkZWF0aCwgYW5kIG1hbnkgaG9ycmlibGUgYW5kIHJlcHVsc2l2ZSBmZWF0dXJlcyBhdHRlbmQgdGhlIHB1bmlzaG1lbnQgd2hpY2ggdGhlIHdob2xlIGFybXkgd2l0bmVzc2VzLiAKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbGVhcm5pbmcgb2YgdGhpcywgdGhlIFNlbmF0ZSBhbmdyaWx5IG9yZGVyZWQgdGhlIGNvbnN1bHMgdG8ga2VlcCBxdWlldCwgYW5kIGNob3NlIENyYXNzdXMgdG8gY29uZHVjdCB0aGUgd2FyLCBhbmQgbWFueSBvZiB0aGUgbm9ibGVzIHdlcmUgaW5kdWNlZCBieSBoaXMgcmVwdXRhdGlvbiBhbmQgdGhlaXIgZnJpZW5kc2hpcCBmb3IgaGltIHRvIHNlcnZlIHVuZGVyIGhpbS4gQ3Jhc3N1cyBoaW1zZWxmLCBhY2NvcmRpbmdseSwgdG9vayBwb3NpdGlvbiBvbiB0aGUgYm9yZGVycyBvZiBQaWNlbnVtLiBleHBlY3RpbmcgdG8gcmVjZWl2ZSB0aGUgYXR0YWNrIG9mIFNwYXJ0YWN1cywgd2hvIHdhcyBoYXN0ZW5pbmcgdGhpdGhlcjsgYW5kIGhlIHNlbnQgTXVtbWl1cywgaGlzIGxlZ2F0ZSwgd2l0aCB0d28gbGVnaW9ucywgYnkgYSBjaXJjdWl0b3VzIHJvdXRlLCB3aXRoIG9yZGVycyB0byBmb2xsb3cgdGhlIGVuZW15LCBidXQgbm90IHRvIGpvaW4gYmF0dGxlIG5vciBldmVuIHNraXJtaXNoIHdpdGggdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk11bW1pdXMsIGhvd2V2ZXIsIGF0IHRoZSBmaXJzdCBwcm9taXNpbmcgb3Bwb3J0dW5pdHksIGdhdmUgYmF0dGxlIGFuZCB3YXMgZGVmZWF0ZWQ7IG1hbnkgb2YgaGlzIG1lbiB3ZXJlIHNsYWluLCBhbmQgbWFueSBvZiB0aGVtIHRocmV3IGF3YXkgdGhlaXIgYXJtcyBhbmQgZmxlZCBmb3IgdGhlaXIgbGl2ZXMuIENyYXNzdXMgZ2F2ZSBNdW1taXVzIGhpbXNlbGYgYSByb3VnaCByZWNlcHRpb24sIGFuZCB3aGVuIGhlIGFybWVkIGhpcyBzb2xkaWVycyBhbmV3LCBtYWRlIHRoZW0gZ2l2ZSBwbGVkZ2VzIHRoYXQgdGhleSB3b3VsZCBrZWVwIHRoZWlyIGFybXMuIEZpdmUgaHVuZHJlZCBvZiB0aGVtLCBtb3Jlb3Zlciwgd2hvIGhhZCBzaG93biB0aGUgZ3JlYXRlc3QgY293YXJkaWNlIGFuZCBiZWVuIGZpcnN0IHRvIGZseSwgaGUgZGl2aWRlZCBpbnRvIGZpZnR5IGRlY2FkZXMsIGFuZCBwdXQgdG8gZGVhdGggb25lIGZyb20gZWFjaCBkZWNhZGUsIG9uIHdob20gdGhlIGxvdCBmZWxsLCB0aHVzIHJldml2aW5nLCBhZnRlciB0aGUgbGFwc2Ugb2YgbWFueSB5ZWFycywgYW4gYW5jaWVudCBtb2RlIG9mIHB1bmlzaGluZyB0aGUgc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBkaXNncmFjZSBhbHNvIGF0dGFjaGVzIHRvIHRoaXMgbWFubmVyIG9mIGRlYXRoLCBhbmQgbWFueSBob3JyaWJsZSBhbmQgcmVwdWxzaXZlIGZlYXR1cmVzIGF0dGVuZCB0aGUgcHVuaXNobWVudCB3aGljaCB0aGUgd2hvbGUgYXJteSB3aXRuZXNzZXMuIAoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4gaGUgaGFkIHRodXMgZGlzY2lwbGluZWQgaGlzIG1lbiwgaGUgbGVkIHRoZW0gYWdhaW5zdCB0aGUgZW5lbXkuIEJ1dCBTcGFydGFjdXMgYXZvaWRlZCBoaW0sIGFuZCByZXRpcmVkIHRocm91Z2ggTHVjYW5pYSB0byB0aGUgc2VhLiBBdCB0aGUgU3RyYWl0cywgaGUgY2hhbmNlZCB1cG9uIHNvbWUgQ2lsaWNpYW4gcGlyYXRlIGNyYWZ0LCBhbmQgZGV0ZXJtaW5lZCB0byBzZWl6ZSBTaWNpbHkuIEJ5IHRocm93aW5nIHR3byB0aG91c2FuZCBtZW4gaW50byB0aGUgaXNsYW5kLCBoZSB0aG91Z2h0IHRvIGtpbmRsZSBhbmV3IHRoZSBzZXJ2aWxlIHdhciB0aGVyZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjEwMi05OSBCLkMuPC9ub3RlPiB3aGljaCBoYWQgbm90IGxvbmcgYmVlbiBleHRpbmd1aXNoZWQsIGFuZCBuZWVkZWQgb25seSBhIGxpdHRsZSBhZGRpdGlvbmFsIGZ1ZWwuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBDaWxpY2lhbnMsIGFmdGVyIGNvbWluZyB0byB0ZXJtcyB3aXRoIGhpbSBhbmQgcmVjZWl2aW5nIGhpcyBnaWZ0cywgZGVjZWl2ZWQgaGltIGFuZCBzYWlsZWQgYXdheS4gU28gU3BhcnRhY3VzIG1hcmNoZWQgYmFjayBhZ2FpbiBmcm9tIHRoZSBzZWEgYW5kIGVzdGFibGlzaGVkIGhpcyBhcm15IGluIHRoZSBwZW5pbnN1bGEgb2YgUmhlZ2l1bS4gQ3Jhc3N1cyBub3cgY2FtZSB1cCwgYW5kIG9ic2VydmluZyB0aGF0IHRoZSBuYXR1cmUgb2YgdGhlIHBsYWNlIHN1Z2dlc3RlZCB3aGF0IG11c3QgYmUgZG9uZSwgYmUgZGV0ZXJtaW5lZCB0byBidWlsZCBhIHdhbGwgYWNyb3NzIHRoZSBpc3RobXVzLCB0aGVyZWJ5IGF0IG9uY2Uga2VlcGluZyBoaXMgc29sZGllcnMgZnJvbSBpZGxlbmVzcywsIGFuZCBoaXMgZW5lbWllcyBmcm9tIHByb3Zpc2lvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgdGFzayB3YXMgYSBodWdlIG9uZSBhbmQgZGlmZmljdWx0LCBidXQgaGUgYWNjb21wbGlzaGVkIGFuZCBmaW5pc2hlZCBpdCwgY29udHJhcnkgdG8gYWxsIGV4cGVjdGF0aW9uLCBpbiBhIHNob3J0IHRpbWUsIHJ1bm5pbmcgYSBkaXRjaCBmcm9tIHNlYSB0byBzZWEgdGhyb3VnaCB0aGUgbmVjayBvZiBsYW5kIHRocmVlIGh1bmRyZWQgZnVybG9uZ3MgaW4gbGVuZ3RoIGFuZCBmaWZ0ZWVuIGZlZXQgaW4gd2lkdGggYW5kIGRlcHRoIGFsaWtlLiBBYm92ZSB0aGUgZGl0Y2ggaGUgYWxzbyBidWlsdCBhIHdhbGwgb2YgYXN0b25pc2hpbmcgaGVpZ2h0IGFuZCBzdHJlbmd0aC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgd29yayBTcGFydGFjdXMgbmVnbGVjdGVkIGFuZCBkZXNwaXNlZCBhdCBmaXJzdDsgYnV0IHNvb24gaGlzIHByb3Zpc2lvbnMgYmVnYW4gdG8gZmFpbCwgYW5kIHdoZW4gaGUgd2FudGVkIHRvIHNhbGx5IGZvcnRoIGZyb20gdGhlIHBlbmluc3VsYSwgaGUgc2F3IHRoYXQgaGUgd2FzIHdhbGxlZCBpbiwgYW5kIHRoYXQgdGhlcmUgd2FzIG5vdGhpbmcgbW9yZSB0byBiZSBoYWQgdGhlcmUuIEhlIHRoZXJlZm9yZSB3YWl0ZWQgZm9yIGEgc25vd3kgbmlnaHQgYW5kIGEgd2ludHJ5IHN0b3JtLCB3aGVuIGhlIGZpbGxlZCB1cCBhIHNtYWxsIHBvcnRpb24gb2YgdGhlIGRpdGNoIHdpdGggZWFydGggYW5kIHRpbWJlciBhbmQgdGhlIGJvdWdocyBvZiB0cmVlcywgYW5kIHNvIHRocmV3IGEgdGhpcmQgcGFydCBvZiBoaXMgZm9yY2UgYWNyb3NzLiAKCQkJPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjEwMi05OSBCLkMuPC9ub3RlPiB3aGljaCBoYWQgbm90IGxvbmcgYmVlbiBleHRpbmd1aXNoZWQsIGFuZCBuZWVkZWQgb25seSBhIGxpdHRsZSBhZGRpdGlvbmFsIGZ1ZWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgQ2lsaWNpYW5zLCBhZnRlciBjb21pbmcgdG8gdGVybXMgd2l0aCBoaW0gYW5kIHJlY2VpdmluZyBoaXMgZ2lmdHMsIGRlY2VpdmVkIGhpbSBhbmQgc2FpbGVkIGF3YXkuIFNvIFNwYXJ0YWN1cyBtYXJjaGVkIGJhY2sgYWdhaW4gZnJvbSB0aGUgc2VhIGFuZCBlc3RhYmxpc2hlZCBoaXMgYXJteSBpbiB0aGUgcGVuaW5zdWxhIG9mIFJoZWdpdW0uIENyYXNzdXMgbm93IGNhbWUgdXAsIGFuZCBvYnNlcnZpbmcgdGhhdCB0aGUgbmF0dXJlIG9mIHRoZSBwbGFjZSBzdWdnZXN0ZWQgd2hhdCBtdXN0IGJlIGRvbmUsIGJlIGRldGVybWluZWQgdG8gYnVpbGQgYSB3YWxsIGFjcm9zcyB0aGUgaXN0aG11cywgdGhlcmVieSBhdCBvbmNlIGtlZXBpbmcgaGlzIHNvbGRpZXJzIGZyb20gaWRsZW5lc3MsLCBhbmQgaGlzIGVuZW1pZXMgZnJvbSBwcm92aXNpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgdGFzayB3YXMgYSBodWdlIG9uZSBhbmQgZGlmZmljdWx0LCBidXQgaGUgYWNjb21wbGlzaGVkIGFuZCBmaW5pc2hlZCBpdCwgY29udHJhcnkgdG8gYWxsIGV4cGVjdGF0aW9uLCBpbiBhIHNob3J0IHRpbWUsIHJ1bm5pbmcgYSBkaXRjaCBmcm9tIHNlYSB0byBzZWEgdGhyb3VnaCB0aGUgbmVjayBvZiBsYW5kIHRocmVlIGh1bmRyZWQgZnVybG9uZ3MgaW4gbGVuZ3RoIGFuZCBmaWZ0ZWVuIGZlZXQgaW4gd2lkdGggYW5kIGRlcHRoIGFsaWtlLiBBYm92ZSB0aGUgZGl0Y2ggaGUgYWxzbyBidWlsdCBhIHdhbGwgb2YgYXN0b25pc2hpbmcgaGVpZ2h0IGFuZCBzdHJlbmd0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIHdvcmsgU3BhcnRhY3VzIG5lZ2xlY3RlZCBhbmQgZGVzcGlzZWQgYXQgZmlyc3Q7IGJ1dCBzb29uIGhpcyBwcm92aXNpb25zIGJlZ2FuIHRvIGZhaWwsIGFuZCB3aGVuIGhlIHdhbnRlZCB0byBzYWxseSBmb3J0aCBmcm9tIHRoZSBwZW5pbnN1bGEsIGhlIHNhdyB0aGF0IGhlIHdhcyB3YWxsZWQgaW4sIGFuZCB0aGF0IHRoZXJlIHdhcyBub3RoaW5nIG1vcmUgdG8gYmUgaGFkIHRoZXJlLiBIZSB0aGVyZWZvcmUgd2FpdGVkIGZvciBhIHNub3d5IG5pZ2h0IGFuZCBhIHdpbnRyeSBzdG9ybSwgd2hlbiBoZSBmaWxsZWQgdXAgYSBzbWFsbCBwb3J0aW9uIG9mIHRoZSBkaXRjaCB3aXRoIGVhcnRoIGFuZCB0aW1iZXIgYW5kIHRoZSBib3VnaHMgb2YgdHJlZXMsIGFuZCBzbyB0aHJldyBhIHRoaXJkIHBhcnQgb2YgaGlzIGZvcmNlIGFjcm9zcy4gCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNyYXNzdXMgd2FzIG5vdyBpbiBmZWFyIGxlc3Qgc29tZSBpbXB1bHNlIHRvIG1hcmNoIHVwb24gUm9tZSBzaG91bGQgc2VpemUgU3BhcnRhY3VzLCBidXQgdG9vayBoZWFydCB3aGVuIGhlIHNhdyB0aGF0IG1hbnkgb2YgdGhlIGdsYWRpYXRvcidzIG1lbiBoYWQgc2VjZWRlZCBhZnRlciBhIHF1YXJyZWwgd2l0aCBoaW0sIGFuZCB3ZXJlIGVuY2FtcGVkIGJ5IHRoZW1zZWx2ZXMgb24gYSBMdWNhbmlhbiBsYWtlLiBUaGlzIGxha2UsIHRoZXkgc2F5LCBjaGFuZ2VzIGZyb20gdGltZSB0byB0aW1lIGluIHRoZSBjaGFyYWN0ZXIgb2YgaXRzIHdhdGVyLCBiZWNvbWluZyBzd2VldCwgYW5kIHRoZW4gYWdhaW4gYml0dGVyIGFuZCB1bmRyaW5rYWJsZS4gVXBvbiB0aGlzIGRldGFjaG1lbnQgQ3Jhc3N1cyBmZWxsLCBhbmQgZHJvdmUgdGhlbSBhd2F5IGZyb20gdGhlIGxha2UsIGJ1dCBoZSB3YXMgcm9iYmVkIG9mIHRoZSBzbGF1Z2h0ZXIgYW5kIHB1cnN1aXQgb2YgdGhlIGZ1Z2l0aXZlcyBieSB0aGUgc3VkZGVuIGFwcGVhcmFuY2Ugb2YgU3BhcnRhY3VzLCB3aG8gY2hlY2tlZCB0aGVpciBmbGlnaHQuIAoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q3Jhc3N1cyB3YXMgbm93IGluIGZlYXIgbGVzdCBzb21lIGltcHVsc2UgdG8gbWFyY2ggdXBvbiBSb21lIHNob3VsZCBzZWl6ZSBTcGFydGFjdXMsIGJ1dCB0b29rIGhlYXJ0IHdoZW4gaGUgc2F3IHRoYXQgbWFueSBvZiB0aGUgZ2xhZGlhdG9yJ3MgbWVuIGhhZCBzZWNlZGVkIGFmdGVyIGEgcXVhcnJlbCB3aXRoIGhpbSwgYW5kIHdlcmUgZW5jYW1wZWQgYnkgdGhlbXNlbHZlcyBvbiBhIEx1Y2FuaWFuIGxha2UuIFRoaXMgbGFrZSwgdGhleSBzYXksIGNoYW5nZXMgZnJvbSB0aW1lIHRvIHRpbWUgaW4gdGhlIGNoYXJhY3RlciBvZiBpdHMgd2F0ZXIsIGJlY29taW5nIHN3ZWV0LCBhbmQgdGhlbiBhZ2FpbiBiaXR0ZXIgYW5kIHVuZHJpbmthYmxlLiBVcG9uIHRoaXMgZGV0YWNobWVudCBDcmFzc3VzIGZlbGwsIGFuZCBkcm92ZSB0aGVtIGF3YXkgZnJvbSB0aGUgbGFrZSwgYnV0IGhlIHdhcyByb2JiZWQgb2YgdGhlIHNsYXVnaHRlciBhbmQgcHVyc3VpdCBvZiB0aGUgZnVnaXRpdmVzIGJ5IHRoZSBzdWRkZW4gYXBwZWFyYW5jZSBvZiBTcGFydGFjdXMsIHdobyBjaGVja2VkIHRoZWlyIGZsaWdodC4gCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSB0aGlzIENyYXNzdXMgaGFkIHdyaXR0ZW4gdG8gdGhlIHNlbmF0ZSB0aGF0IHRoZXkgbXVzdCBzdW1tb24gTHVjdWxsdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYXJjdXMgTHVjdWxsdXMsIGJyb3RoZXIgb2YgTHVjaXVzLjwvbm90ZT4gZnJvbSBUaHJhY2UgYW5kIFBvbXBleSBmcm9tIFNwYWluLCBidXQgaGUgd2FzIHNvcnJ5IG5vdyB0aGF0IGhlIGhhZCBkb25lIHNvLCBhbmQgd2FzIGVhZ2VyIHRvIGJyaW5nIHRoZSB3YXIgdG8gYWlyIGVuZCBiZWZvcmUgdGhvc2UgZ2VuZXJhbHMgY2FtZS4gSGUga25ldyB0aGF0IHRoZSBzdWNjZXNzIHdvdWxkIGJlIGFzY3JpYmVkIHRvIHRoZSBvbmUgd2hvIGNhbWUgdXAgd2l0aCBhc3Npc3RhbmNlLCBhbmQgbm90IHRvIGhpbXNlbGYuIEFjY29yZGluZ2x5LCBpbiB0aGUgZmlyc3QgcGxhY2UsIGhlIGRldGVybWluZWQgdG8gYXR0YWNrIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gaGFkIHNlY2VkZWQgZnJvbSB0aGUgcmVzdCBhbmQgd2VyZSBjYW1wYWlnbmluZyBvbiB0aGVpciBvd24gYWNjb3VudCAodGhleSB3ZXJlIGNvbW1hbmRlZCBieSBDYWl1cyBDYW5pY2l1cyBhbmQgQ2FzdHVzKSwgYW5kIHdpdGggdGhpcyBpbiB2aWV3LCBzZW50IG91dCBzaXggdGhvdXNhbmQgbWVuIHRvIHByZW9jY3VweSBhIGNlcnRhaW4gZW1pbmVuY2UsIGJpZGRpbmcgdGhlbSBrZWVwIHRoZWlyIGF0dGVtcHQgYSBzZWNyZXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IGRpZCB0cnkgdG8gZWx1ZGUgb2JzZXJ2YXRpb24gYnkgY292ZXJpbmcgdXAgdGhlaXIgaGVsbWV0cywgYnV0IHRoZXkgd2VyZSBzZWVuIGJ5IHR3byB3b21lbiB3aG8gd2VyZSBzYWNyaWZpY2luZyBmb3IgdGhlIGVuZW15LCBhbmQgd291bGQgaGF2ZSBiZWVuIGluIHBlcmlsIG9mIHRoZWlyIGxpdmVzIGhhZCBub3QgQ3Jhc3N1cyBxdWlja2x5IG1hZGUgaGlzIGFwcGVhcmFuY2UgYW5kIGdpdmVuIGJhdHRsZSwgdGhlIG1vc3Qgc3R1YmJvcm5seSBjb250ZXN0ZWQgb2YgYWxsOyBmb3IgYWx0aG91Z2ggaGUgc2xldyB0d2VsdmUgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBtZW4gaW4gaXQsIGhlIGZvdW5kIG9ubHkgdHdvIHdobyB3ZXJlIHdvdW5kZWQgaW4gdGhlIGJhY2suIFRoZSByZXN0IGFsbCBkaWVkIHN0YW5kaW5nIGluIHRoZSByYW5rcyBhbmQgZmlnaHRpbmcgdGhlIFJvbWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSB0aGlzIENyYXNzdXMgaGFkIHdyaXR0ZW4gdG8gdGhlIHNlbmF0ZSB0aGF0IHRoZXkgbXVzdCBzdW1tb24gTHVjdWxsdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcmN1cyBMdWN1bGx1cywgYnJvdGhlciBvZiBMdWNpdXMuPC9ub3RlPiBmcm9tIFRocmFjZSBhbmQgUG9tcGV5IGZyb20gU3BhaW4sIGJ1dCBoZSB3YXMgc29ycnkgbm93IHRoYXQgaGUgaGFkIGRvbmUgc28sIGFuZCB3YXMgZWFnZXIgdG8gYnJpbmcgdGhlIHdhciB0byBhaXIgZW5kIGJlZm9yZSB0aG9zZSBnZW5lcmFscyBjYW1lLiBIZSBrbmV3IHRoYXQgdGhlIHN1Y2Nlc3Mgd291bGQgYmUgYXNjcmliZWQgdG8gdGhlIG9uZSB3aG8gY2FtZSB1cCB3aXRoIGFzc2lzdGFuY2UsIGFuZCBub3QgdG8gaGltc2VsZi4gQWNjb3JkaW5nbHksIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgZGV0ZXJtaW5lZCB0byBhdHRhY2sgdGhvc2Ugb2YgdGhlIGVuZW15IHdobyBoYWQgc2VjZWRlZCBmcm9tIHRoZSByZXN0IGFuZCB3ZXJlIGNhbXBhaWduaW5nIG9uIHRoZWlyIG93biBhY2NvdW50ICh0aGV5IHdlcmUgY29tbWFuZGVkIGJ5IENhaXVzIENhbmljaXVzIGFuZCBDYXN0dXMpLCBhbmQgd2l0aCB0aGlzIGluIHZpZXcsIHNlbnQgb3V0IHNpeCB0aG91c2FuZCBtZW4gdG8gcHJlb2NjdXB5IGEgY2VydGFpbiBlbWluZW5jZSwgYmlkZGluZyB0aGVtIGtlZXAgdGhlaXIgYXR0ZW1wdCBhIHNlY3JldC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IGRpZCB0cnkgdG8gZWx1ZGUgb2JzZXJ2YXRpb24gYnkgY292ZXJpbmcgdXAgdGhlaXIgaGVsbWV0cywgYnV0IHRoZXkgd2VyZSBzZWVuIGJ5IHR3byB3b21lbiB3aG8gd2VyZSBzYWNyaWZpY2luZyBmb3IgdGhlIGVuZW15LCBhbmQgd291bGQgaGF2ZSBiZWVuIGluIHBlcmlsIG9mIHRoZWlyIGxpdmVzIGhhZCBub3QgQ3Jhc3N1cyBxdWlja2x5IG1hZGUgaGlzIGFwcGVhcmFuY2UgYW5kIGdpdmVuIGJhdHRsZSwgdGhlIG1vc3Qgc3R1YmJvcm5seSBjb250ZXN0ZWQgb2YgYWxsOyBmb3IgYWx0aG91Z2ggaGUgc2xldyB0d2VsdmUgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBtZW4gaW4gaXQsIGhlIGZvdW5kIG9ubHkgdHdvIHdobyB3ZXJlIHdvdW5kZWQgaW4gdGhlIGJhY2suIFRoZSByZXN0IGFsbCBkaWVkIHN0YW5kaW5nIGluIHRoZSByYW5rcyBhbmQgZmlnaHRpbmcgdGhlIFJvbWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGRlZmVhdCBvZiB0aGlzIGRldGFjaG1lbnQsIFNwYXJ0YWN1cyByZXRpcmVkIHRvIHRoZSBtb3VudGFpbnMgb2YgUGV0ZWxpYSwgZm9sbG93ZWQgY2xvc2VseSBieSBRdWludHVzLCBvbmUgb2YgdGhlIG9mZmljZXJzIG9mIENyYXNzdXMsIGFuZCBieSBTY3JvcGhhcywgdGhlIHF1YWVzdG9yLCB3aG8gaHVuZyB1cG9uIHRoZSBlbmVteSByZWFyLiBCdXQgd2hlbiBTcGFydGFjdXMgZmFjZWQgYWJvdXQsIHRoZXJlIHdhcyBhIGdyZWF0IHJvdXQgb2YgdGhlIFJvbWFucywgYW5kIHRoZXkgYmFyZWx5IG1hbmFnZWQgdG8gZHJhZyB0aGUgcXVhZXN0b3IsIHdobyBoYWQgYmVlbiB3b3VuZGVkLCBhd2F5IGludG8gc2FmZXR5LiBUaGlzIHN1Y2Nlc3Mgd2FzIHRoZSBydWluIG9mIFNwYXJ0YWN1cywgZm9yIGl0IGZpbGxlZCBoaXMgc2xhdmVzIHdpdGggb3Zlci1jb25maWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdvdWxkIG5vIGxvbmdlciBjb25zZW50IHRvIGF2b2lkIGJhdHRsZSwgYW5kIHdvdWxkIG5vdCBldmVuIG9iZXkgdGhlaXIgbGVhZGVycywgYnV0IHN1cnJvdW5kZWQgdGhlbSBhcyBzb29uIGFzIHRoZXkgYmVnYW4gdG8gbWFyY2gsIHdpdGggYXJtcyBpbiB0aGVpciBoYW5kcywgYW5kIGZvcmNlZCB0aGVtIHRvIGxlYWQgYmFjayB0aHJvdWdoIEx1Y2FuaWEgYWdhaW5zdCB0aGUgUm9tYW5zLCB0aGUgdmVyeSB0aGluZyB3aGljaCBDcmFzc3VzIGFsc28gbW9zdCBkZXNpcmVkLiBGb3IgUG9tcGV5J3MgYXBwcm9hY2ggd2FzIGFscmVhZHkgYW5ub3VuY2VkLCBhbmQgdGhlcmUgd2VyZSBub3QgYSBmZXcgd2hvIHB1YmxpY2x5IHByb2NsYWltZWQgdGhhdCB0aGUgdmljdG9yeSBpbiB0aGlzIHdhciBiZWxvbmdlZCB0byBoaW07IGhlIGhhZCBvbmx5IHRvIGNvbWUgYW5kIGZpZ2h0IGFuZCBwdXQgYW4gZW5kIHRvIHRoZSB3YXIuIENyYXNzdXMsIHRoZXJlZm9yZSwgcHJlc3NlZCBvbiB0byBmaW5pc2ggdGhlIHN0cnVnZ2xlIGhpbXNlbGYsIGFuZCBoYXZpbmcgZW5jYW1wZWQgbmVhciB0aGUgZW5lbXksIGJlZ2FuIHRvIGRpZyBhIHRyZW5jaC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SW50byB0aGlzIHRoZSBzbGF2ZXMgbGVhcGVkIGFuZCBiZWdhbiB0byBmaWdodCB3aXRoIHRob3NlIHdobyB3ZXJlIHdvcmtpbmcgdGhlcmUsIGFuZCBzaW5jZSBmcmVzaCBtZW4gZnJvbSBib3RoIHNpZGVzIGtlcHQgY29taW5nIHVwIHRvIGhlbHAgdGhlaXIgY29tcmFkZXMsIFNwYXJ0YWN1cyBzYXcgdGhlIG5lY2Vzc2l0eSB0aGF0IHdhcyB1cG9uIGhpbSwgYW5kIGRyZXcgdXAgaGlzIHdob2xlIGFybXkgaW4gb3JkZXIgb2YgYmF0dGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBkZWZlYXQgb2YgdGhpcyBkZXRhY2htZW50LCBTcGFydGFjdXMgcmV0aXJlZCB0byB0aGUgbW91bnRhaW5zIG9mIFBldGVsaWEsIGZvbGxvd2VkIGNsb3NlbHkgYnkgUXVpbnR1cywgb25lIG9mIHRoZSBvZmZpY2VycyBvZiBDcmFzc3VzLCBhbmQgYnkgU2Nyb3BoYXMsIHRoZSBxdWFlc3Rvciwgd2hvIGh1bmcgdXBvbiB0aGUgZW5lbXkgcmVhci4gQnV0IHdoZW4gU3BhcnRhY3VzIGZhY2VkIGFib3V0LCB0aGVyZSB3YXMgYSBncmVhdCByb3V0IG9mIHRoZSBSb21hbnMsIGFuZCB0aGV5IGJhcmVseSBtYW5hZ2VkIHRvIGRyYWcgdGhlIHF1YWVzdG9yLCB3aG8gaGFkIGJlZW4gd291bmRlZCwgYXdheSBpbnRvIHNhZmV0eS4gVGhpcyBzdWNjZXNzIHdhcyB0aGUgcnVpbiBvZiBTcGFydGFjdXMsIGZvciBpdCBmaWxsZWQgaGlzIHNsYXZlcyB3aXRoIG92ZXItY29uZmlkZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd291bGQgbm8gbG9uZ2VyIGNvbnNlbnQgdG8gYXZvaWQgYmF0dGxlLCBhbmQgd291bGQgbm90IGV2ZW4gb2JleSB0aGVpciBsZWFkZXJzLCBidXQgc3Vycm91bmRlZCB0aGVtIGFzIHNvb24gYXMgdGhleSBiZWdhbiB0byBtYXJjaCwgd2l0aCBhcm1zIGluIHRoZWlyIGhhbmRzLCBhbmQgZm9yY2VkIHRoZW0gdG8gbGVhZCBiYWNrIHRocm91Z2ggTHVjYW5pYSBhZ2FpbnN0IHRoZSBSb21hbnMsIHRoZSB2ZXJ5IHRoaW5nIHdoaWNoIENyYXNzdXMgYWxzbyBtb3N0IGRlc2lyZWQuIEZvciBQb21wZXkncyBhcHByb2FjaCB3YXMgYWxyZWFkeSBhbm5vdW5jZWQsIGFuZCB0aGVyZSB3ZXJlIG5vdCBhIGZldyB3aG8gcHVibGljbHkgcHJvY2xhaW1lZCB0aGF0IHRoZSB2aWN0b3J5IGluIHRoaXMgd2FyIGJlbG9uZ2VkIHRvIGhpbTsgaGUgaGFkIG9ubHkgdG8gY29tZSBhbmQgZmlnaHQgYW5kIHB1dCBhbiBlbmQgdG8gdGhlIHdhci4gQ3Jhc3N1cywgdGhlcmVmb3JlLCBwcmVzc2VkIG9uIHRvIGZpbmlzaCB0aGUgc3RydWdnbGUgaGltc2VsZiwgYW5kIGhhdmluZyBlbmNhbXBlZCBuZWFyIHRoZSBlbmVteSwgYmVnYW4gdG8gZGlnIGEgdHJlbmNoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkludG8gdGhpcyB0aGUgc2xhdmVzIGxlYXBlZCBhbmQgYmVnYW4gdG8gZmlnaHQgd2l0aCB0aG9zZSB3aG8gd2VyZSB3b3JraW5nIHRoZXJlLCBhbmQgc2luY2UgZnJlc2ggbWVuIGZyb20gYm90aCBzaWRlcyBrZXB0IGNvbWluZyB1cCB0byBoZWxwIHRoZWlyIGNvbXJhZGVzLCBTcGFydGFjdXMgc2F3IHRoZSBuZWNlc3NpdHkgdGhhdCB3YXMgdXBvbiBoaW0sIGFuZCBkcmV3IHVwIGhpcyB3aG9sZSBhcm15IGluIG9yZGVyIG9mIGJhdHRsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiB0aGUgZmlyc3QgcGxhY2UsIHdoZW4gaGlzIGhvcnNlIHdhcyBicm91Z2h0IHRvIGhpbSwgaGUgZHJldyBoaXMgc3dvcmQsIGFuZCBzYXlpbmcgdGhhdCBpZiBoZSB3b24gdGhlIGRheSBoZSB3b3VsZCBoYXZlIG1hbnkgZmluZSBob3JzZXMgb2YgdGhlIGVuZW15J3MsIGJ1dCBpZiBoZSBsb3N0IGl0IEhlIGRpZCBub3Qgd2FudCBhbnksIGhlIHNsZXcgaGlzIGhvcnNlLiBUaGVuIHB1c2hpbmcgaGlzIHdheSB0b3dhcmRzIENyYXNzdXMgaGltc2VsZiB0aHJvdWdoIG1hbnkgZmx5aW5nIHdlYXBvbnMgYW5kIHdvdW5kZWQgbWVuLCBoZSBkaWQgbm90IGluZGVlZCByZWFjaCBoaW0sIGJ1dCBzbGV3IHR3byBjZW50dXJpb25zIHdobyBmZWxsIHVwb24gaGltIHRvZ2V0aGVyLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGFmdGVyIGhpcyBjb21wYW5pb25zIGhhZCB0YWtlbiB0byBmbGlnaHQsIGhlIHN0b29kIGFsb25lLCBzdXJyb3VuZGVkIGJ5IGEgbXVsdGl0dWRlIG9mIGZvZXMsIGFuZCB3YXMgc3RpbGwgZGVmZW5kaW5nIGhpbXNlbGYgd2hlbiBoZSB3YXMgY3V0IGRvd24uIEJ1dCBhbHRob3VnaCBDcmFzc3VzIGhhZCBiZWVuIGZvcnR1bmF0ZSwgaGFkIHNob3duIG1vc3QgZXhjZWxsZW50IGdlbmVyYWxzaGlwLCBhbmQgaGFkIGV4cG9zZWQgaGlzIHBlcnNvbiB0byBkYW5nZXIsIG5ldmVydGhlbGVzcywgaGlzIHN1Y2Nlc3MgZGlkIG5vdCBmYWlsIHRvIGVuaGFuY2UgdGhlIHJlcHV0YXRpb24gb2YgUG9tcGV5LiBGb3IgdGhlIGZ1Z2l0aXZlcyBmcm9tIHRoZSBiYXR0bGU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVpciBudW1iZXIgaXMgZ2l2ZW4gYXMgZml2ZSB0aG91c2FuZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjEuMiIgdmFsaWQ9InllcyI+UG9tcGV5LCB4eGkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGVuY291bnRlcmVkIHRoYXQgZ2VuZXJhbCBhbmQgd2VyZSBjdXQgdG8gcGllY2VzLCBzbyB0aGF0IGhlIGNvdWxkIHdyaXRlIHRvIHRoZSBzZW5hdGUgdGhhdCBpbiBvcGVuIGJhdHRsZSwgaW5kZWVkLCBDcmFzc3VzIGhhZCBjb25xdWVyZWQgdGhlIHNsYXZlcywgYnV0IHRoYXQgaGUgaGltc2VsZiBoYWQgZXh0aXJwYXRlZCB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXksIGFjY29yZGluZ2x5LCBmb3IgaGlzIHZpY3RvcmllcyBvdmVyIFNlcnRvcml1cyBhbmQgaW4gU3BhaW4sIGNlbGVicmF0ZWQgYSBzcGxlbmRpZCB0cml1bXBoOyBidXQgQ3Jhc3N1cywgZm9yIGFsbCBoaXMgc2VsZi0gYXBwcm92YWwsIGRpZCBub3QgdmVudHVyZSB0byBhc2sgZm9yIHRoZSBtYWpvciB0cml1bXBoLCBhbmQgaXQgd2FzIHRob3VnaHQgaWdub2JsZSBhbmQgbWVhbiBpbiBoaW0gdG8gY2VsZWJyYXRlIGV2ZW4gdGhlIG1pbm9yIHRyaXVtcGggb24gZm9vdCwgY2FsbGVkIHRoZSBvdmF0aW9uLCBmb3IgYSBzZXJ2aWxlIHdhci4gSG93IHRoZSBtaW5vciB0cml1bXBoIGRpZmZlcnMgZnJvbSB0aGUgbWFqb3IsIGFuZCB3aHkgaXQgaXMgbmFtZWQgYXMgaXQgaXMsIGhhcyBiZWVuIHRvbGQgaW4gbXkgbGlmZSBvZiBNYXJjZWxsdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyMiIgdmFsaWQ9InllcyI+Q2hhcHRlciB4eGlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGFmdGVyIGhpcyBjb21wYW5pb25zIGhhZCB0YWtlbiB0byBmbGlnaHQsIGhlIHN0b29kIGFsb25lLCBzdXJyb3VuZGVkIGJ5IGEgbXVsdGl0dWRlIG9mIGZvZXMsIGFuZCB3YXMgc3RpbGwgZGVmZW5kaW5nIGhpbXNlbGYgd2hlbiBoZSB3YXMgY3V0IGRvd24uIEJ1dCBhbHRob3VnaCBDcmFzc3VzIGhhZCBiZWVuIGZvcnR1bmF0ZSwgaGFkIHNob3duIG1vc3QgZXhjZWxsZW50IGdlbmVyYWxzaGlwLCBhbmQgaGFkIGV4cG9zZWQgaGlzIHBlcnNvbiB0byBkYW5nZXIsIG5ldmVydGhlbGVzcywgaGlzIHN1Y2Nlc3MgZGlkIG5vdCBmYWlsIHRvIGVuaGFuY2UgdGhlIHJlcHV0YXRpb24gb2YgUG9tcGV5LiBGb3IgdGhlIGZ1Z2l0aXZlcyBmcm9tIHRoZSBiYXR0bGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZWlyIG51bWJlciBpcyBnaXZlbiBhcyBmaXZlIHRob3VzYW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIxLjIiIHZhbGlkPSJ5ZXMiPlBvbXBleSwgeHhpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBlbmNvdW50ZXJlZCB0aGF0IGdlbmVyYWwgYW5kIHdlcmUgY3V0IHRvIHBpZWNlcywgc28gdGhhdCBoZSBjb3VsZCB3cml0ZSB0byB0aGUgc2VuYXRlIHRoYXQgaW4gb3BlbiBiYXR0bGUsIGluZGVlZCwgQ3Jhc3N1cyBoYWQgY29ucXVlcmVkIHRoZSBzbGF2ZXMsIGJ1dCB0aGF0IGhlIGhpbXNlbGYgaGFkIGV4dGlycGF0ZWQgdGhlIHdhci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyMS4yIiB2YWxpZD0ieWVzIj5Qb21wZXksIHh4aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgYWNjb3JkaW5nbHksIGZvciBoaXMgdmljdG9yaWVzIG92ZXIgU2VydG9yaXVzIGFuZCBpbiBTcGFpbiwgY2VsZWJyYXRlZCBhIHNwbGVuZGlkIHRyaXVtcGg7IGJ1dCBDcmFzc3VzLCBmb3IgYWxsIGhpcyBzZWxmLSBhcHByb3ZhbCwgZGlkIG5vdCB2ZW50dXJlIHRvIGFzayBmb3IgdGhlIG1ham9yIHRyaXVtcGgsIGFuZCBpdCB3YXMgdGhvdWdodCBpZ25vYmxlIGFuZCBtZWFuIGluIGhpbSB0byBjZWxlYnJhdGUgZXZlbiB0aGUgbWlub3IgdHJpdW1waCBvbiBmb290LCBjYWxsZWQgdGhlIG92YXRpb24sIGZvciBhIHNlcnZpbGUgd2FyLiBIb3cgdGhlIG1pbm9yIHRyaXVtcGggZGlmZmVycyBmcm9tIHRoZSBtYWpvciwgYW5kIHdoeSBpdCBpcyBuYW1lZCBhcyBpdCBpcywgaGFzIGJlZW4gdG9sZCBpbiBteSBsaWZlIG9mIE1hcmNlbGx1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyMiIgdmFsaWQ9InllcyI+Q2hhcHRlciB4eGlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyYy4gMjIiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHhpaS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBvbXBleSB3YXMgYXQgb25jZSBhc2tlZCB0byBzdGFuZCBmb3IgdGhlIGNvbnN1bHNoaXAsIGFuZCBDcmFzc3VzLCBhbHRob3VnaCBoZSBoYWQgaG9wZXMgb2YgYmVjb21pbmcgaGlzIGNvbGxlYWd1ZSwgZGlkIG5vdCBoZXNpdGF0ZSB0byBhc2sgUG9tcGV5J3MgYXNzaXN0YW5jZS4gUG9tcGV5IHJlY2VpdmVkIGhpcyByZXF1ZXN0IGdsYWRseSAoZm9yIGhlIHdhcyBkZXNpcm91cyBvZiBoYXZpbmcgQ3Jhc3N1cywgaW4gc29tZSB3YXkgb3Igb3RoZXIsIGFsd2F5cyBpbiBkZWJ0IHRvIGhpbSBmb3Igc29tZSBmYXZvdXIpLCBhbmQgZWFnZXJseSBwcm9tb3RlZCBoaXMgY2FuZGlkYXR1cmUsIGFuZCBmaW5hbGx5IHNhaWQgaW4gYSBzcGVlY2ggdG8gdGhlIGFzc2VtYmx5IHRoYXQgaGUgc2hvdWxkIGJlIG5vIGxlc3MgZ3JhdGVmdWwgdG8gdGhlbSBmb3IgdGhlIGNvbGxlYWd1ZSB0aGFuIGZvciB0aGUgb2ZmaWNlIHdoaWNoIGhlIGRlc2lyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gb25jZSB0aGV5IGhhZCBhc3N1bWVkIG9mZmljZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj43MCBCLkMuPC9ub3RlPiB0aGV5IGRpZCBub3QgcmVtYWluIG9uIHRoaXMgZnJpZW5kbHkgYmFzaXMsIGJ1dCBkaWZmZXJlZCBvbiBhbG1vc3QgZXZlcnkgbWVhc3VyZSwgcXVhcnJlbGxlZCB3aXRoIG9uZSBhbm90aGVyIGFib3V0IGV2ZXJ5dGhpbmcsIGFuZCBieSB0aGVpciBjb250ZW50aW91c25lc3MgcmVuZGVyZWQgdGhlaXIgY29uc3Vsc2hpcCBiYXJyZW4gcG9saXRpY2FsbHkgYW5kIHdpdGhvdXQgYWNoaWV2ZW1lbnQsIGV4Y2VwdCB0aGF0IENyYXNzdXMgbWFkZSBhIGdyZWF0IHNhY3JpZmljZSBpbiBob25vdXIgb2YgSGVyY3VsZXMsIGZlYXN0ZWQgdGhlIHBlb3BsZSBhdCB0ZW4gdGhvdXNhbmQgdGFibGVzLCBhbmQgbWFkZSB0aGVtIGFuIGFsbG93YW5jZSBvZiBncmFpbiBmb3IgdGhyZWUgbW9udGhzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBhdCBsYXN0IHRoZWlyIHRlcm0gb2Ygb2ZmaWNlIHdhcyBjbG9zaW5nLCBhbmQgdGhleSB3ZXJlIGFkZHJlc3NpbmcgdGhlIGFzc2VtYmx5LCBhIGNlcnRhaW4gbWFuLCBub3QgYSBub2JsZSwgYnV0IGEgUm9tYW4ga25pZ2h0LCBydXN0aWMgYW5kIHJ1ZGUgaW4gaGlzIHdheSBvZiBsaWZlLCBPbmF0aXVzIEF1cmVsaXVzLCBtb3VudGVkIHRoZSByb3N0cmEgYW5kIHJlY291bnRlZCB0byB0aGUgYXVkaWVuY2UgYSB2aXNpb24gdGhhdCBoYWQgY29tZSB0byBoaW0gaW4gaGlzIHNsZWVwLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkp1cGl0ZXIsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFwcGVhcmVkIHRvIG1lIGFuZCBiYWRlIG1lIGRlY2xhcmUgaW4gcHVibGljIHRoYXQgeW91IHNob3VsZCBub3Qgc3VmZmVyIHlvdXIgY29uc3VscyB0byBsYXkgZG93biB0aGVpciBvZmZpY2UgdW50aWwgdGhleSBiZWNvbWUgZnJpZW5kcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgbWFuIHNhaWQgdGhpcyBhbmQgdGhlIHBlb3BsZSB1cmdlZCBhIHJlY29uY2lsaWF0aW9uLCBQb21wZXksIGZvciBoaXMgcGFydCwgc3Rvb2QgbW90aW9ubGVzcywgYnV0IENyYXNzdXMgdG9vayB0aGUgaW5pdGlhdGl2ZSwgY2xhc3BlZCBoaW0gYnkgdGhlIGhhbmQsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZlbGxvdy1jaXRpemVucywgSSB0aGluayB0aGVyZSBpcyBub3RoaW5nIGh1bWlsaWF0aW5nIG9yIHVud29ydGh5IGluIG15IHRha2luZyB0aGUgZmlyc3Qgc3RlcCB0b3dhcmRzIGdvb2Qtd2lsbCBhbmQgZnJpZW5kc2hpcCB3aXRoIFBvbXBleSwgdG8gd2hvbSB5b3UgZ2F2ZSB0aGUgdGl0bGUgb2Yg4oCYR3JlYXTigJkgYmVmb3JlIGhlIGhhZCBncm93biBhIGJlYXJkLCBhbmQgdm90ZWQgaGltIGEgdHJpdW1waCBiZWZvcmUgaGUgd2FzIGEgc2VuYXRvci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgUG9tcGV5IHdhcyBhdCBvbmNlIGFza2VkIHRvIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcCwgYW5kIENyYXNzdXMsIGFsdGhvdWdoIGhlIGhhZCBob3BlcyBvZiBiZWNvbWluZyBoaXMgY29sbGVhZ3VlLCBkaWQgbm90IGhlc2l0YXRlIHRvIGFzayBQb21wZXkncyBhc3Npc3RhbmNlLiBQb21wZXkgcmVjZWl2ZWQgaGlzIHJlcXVlc3QgZ2xhZGx5IChmb3IgaGUgd2FzIGRlc2lyb3VzIG9mIGhhdmluZyBDcmFzc3VzLCBpbiBzb21lIHdheSBvciBvdGhlciwgYWx3YXlzIGluIGRlYnQgdG8gaGltIGZvciBzb21lIGZhdm91ciksIGFuZCBlYWdlcmx5IHByb21vdGVkIGhpcyBjYW5kaWRhdHVyZSwgYW5kIGZpbmFsbHkgc2FpZCBpbiBhIHNwZWVjaCB0byB0aGUgYXNzZW1ibHkgdGhhdCBoZSBzaG91bGQgYmUgbm8gbGVzcyBncmF0ZWZ1bCB0byB0aGVtIGZvciB0aGUgY29sbGVhZ3VlIHRoYW4gZm9yIHRoZSBvZmZpY2Ugd2hpY2ggaGUgZGVzaXJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gb25jZSB0aGV5IGhhZCBhc3N1bWVkIG9mZmljZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjcwIEIuQy48L25vdGU+IHRoZXkgZGlkIG5vdCByZW1haW4gb24gdGhpcyBmcmllbmRseSBiYXNpcywgYnV0IGRpZmZlcmVkIG9uIGFsbW9zdCBldmVyeSBtZWFzdXJlLCBxdWFycmVsbGVkIHdpdGggb25lIGFub3RoZXIgYWJvdXQgZXZlcnl0aGluZywgYW5kIGJ5IHRoZWlyIGNvbnRlbnRpb3VzbmVzcyByZW5kZXJlZCB0aGVpciBjb25zdWxzaGlwIGJhcnJlbiBwb2xpdGljYWxseSBhbmQgd2l0aG91dCBhY2hpZXZlbWVudCwgZXhjZXB0IHRoYXQgQ3Jhc3N1cyBtYWRlIGEgZ3JlYXQgc2FjcmlmaWNlIGluIGhvbm91ciBvZiBIZXJjdWxlcywgZmVhc3RlZCB0aGUgcGVvcGxlIGF0IHRlbiB0aG91c2FuZCB0YWJsZXMsIGFuZCBtYWRlIHRoZW0gYW4gYWxsb3dhbmNlIG9mIGdyYWluIGZvciB0aHJlZSBtb250aHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGF0IGxhc3QgdGhlaXIgdGVybSBvZiBvZmZpY2Ugd2FzIGNsb3NpbmcsIGFuZCB0aGV5IHdlcmUgYWRkcmVzc2luZyB0aGUgYXNzZW1ibHksIGEgY2VydGFpbiBtYW4sIG5vdCBhIG5vYmxlLCBidXQgYSBSb21hbiBrbmlnaHQsIHJ1c3RpYyBhbmQgcnVkZSBpbiBoaXMgd2F5IG9mIGxpZmUsIE9uYXRpdXMgQXVyZWxpdXMsIG1vdW50ZWQgdGhlIHJvc3RyYSBhbmQgcmVjb3VudGVkIHRvIHRoZSBhdWRpZW5jZSBhIHZpc2lvbiB0aGF0IGhhZCBjb21lIHRvIGhpbSBpbiBoaXMgc2xlZXAuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5KdXBpdGVyLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFwcGVhcmVkIHRvIG1lIGFuZCBiYWRlIG1lIGRlY2xhcmUgaW4gcHVibGljIHRoYXQgeW91IHNob3VsZCBub3Qgc3VmZmVyIHlvdXIgY29uc3VscyB0byBsYXkgZG93biB0aGVpciBvZmZpY2UgdW50aWwgdGhleSBiZWNvbWUgZnJpZW5kcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG1hbiBzYWlkIHRoaXMgYW5kIHRoZSBwZW9wbGUgdXJnZWQgYSByZWNvbmNpbGlhdGlvbiwgUG9tcGV5LCBmb3IgaGlzIHBhcnQsIHN0b29kIG1vdGlvbmxlc3MsIGJ1dCBDcmFzc3VzIHRvb2sgdGhlIGluaXRpYXRpdmUsIGNsYXNwZWQgaGltIGJ5IHRoZSBoYW5kLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZlbGxvdy1jaXRpemVucywgSSB0aGluayB0aGVyZSBpcyBub3RoaW5nIGh1bWlsaWF0aW5nIG9yIHVud29ydGh5IGluIG15IHRha2luZyB0aGUgZmlyc3Qgc3RlcCB0b3dhcmRzIGdvb2Qtd2lsbCBhbmQgZnJpZW5kc2hpcCB3aXRoIFBvbXBleSwgdG8gd2hvbSB5b3UgZ2F2ZSB0aGUgdGl0bGUgb2Yg4oCYR3JlYXTigJkgYmVmb3JlIGhlIGhhZCBncm93biBhIGJlYXJkLCBhbmQgdm90ZWQgaGltIGEgdHJpdW1waCBiZWZvcmUgaGUgd2FzIGEgc2VuYXRvci48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIHdlcmUgdGhlIG1lbW9yYWJsZSB0aGluZ3MgaW4gdGhlIGNvbnN1bHNoaXAgb2YgQ3Jhc3N1cywgYnV0IGhpcyBjZW5zb3JzaGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NjUgQi5DLjwvbm90ZT4gcGFzc2VkIHdpdGhvdXQgYW55IHJlc3VsdHMgb3IgYWNoaWV2ZW1lbnRzIHdoYXRldmVyLiBIZSBuZWl0aGVyIG1hZGUgYSByZXZpc2lvbiBvZiB0aGUgc2VuYXRlLCBub3IgYSBzY3J1dGlueSBvZiB0aGUga25pZ2h0cywgbm9yIGEgY2Vuc3VzIG9mIHRoZSBwZW9wbGUsIGFsdGhvdWdoIGhlIGhhZCBMdXRhdGl1cyBDYXR1bHVzLCB0aGUgZ2VudGxlc3Qgb2YgdGhlIFJvbWFucywgZm9yIGhpcyBjb2xsZWFndWUuIEJ1dCB0aGV5IHNheSB0aGF0IHdoZW4gQ3Jhc3N1cyBlbWJhcmtlZCB1cG9uIHRoZSBkYW5nZXJvdXMgYW5kIHZpb2xlbnQgcG9saWN5IG9mIG1ha2luZyBFZ3lwdCB0cmlidXRhcnkgdG8gUm9tZSwgQ2F0dWx1cyBvcHBvc2VkIGhpbSB2aWdvcm91c2x5LCB3aGVyZXVwb24sIGJlaW5nIGF0IHZhcmlhbmNlLCBib3RoIHZvbHVudGFyaWx5IGxhaWQgZG93biB0aGVpciBvZmZpY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2VyZSB0aGUgbWVtb3JhYmxlIHRoaW5ncyBpbiB0aGUgY29uc3Vsc2hpcCBvZiBDcmFzc3VzLCBidXQgaGlzIGNlbnNvcnNoaXA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY1IEIuQy48L25vdGU+IHBhc3NlZCB3aXRob3V0IGFueSByZXN1bHRzIG9yIGFjaGlldmVtZW50cyB3aGF0ZXZlci4gSGUgbmVpdGhlciBtYWRlIGEgcmV2aXNpb24gb2YgdGhlIHNlbmF0ZSwgbm9yIGEgc2NydXRpbnkgb2YgdGhlIGtuaWdodHMsIG5vciBhIGNlbnN1cyBvZiB0aGUgcGVvcGxlLCBhbHRob3VnaCBoZSBoYWQgTHV0YXRpdXMgQ2F0dWx1cywgdGhlIGdlbnRsZXN0IG9mIHRoZSBSb21hbnMsIGZvciBoaXMgY29sbGVhZ3VlLiBCdXQgdGhleSBzYXkgdGhhdCB3aGVuIENyYXNzdXMgZW1iYXJrZWQgdXBvbiB0aGUgZGFuZ2Vyb3VzIGFuZCB2aW9sZW50IHBvbGljeSBvZiBtYWtpbmcgRWd5cHQgdHJpYnV0YXJ5IHRvIFJvbWUsIENhdHVsdXMgb3Bwb3NlZCBoaW0gdmlnb3JvdXNseSwgd2hlcmV1cG9uLCBiZWluZyBhdCB2YXJpYW5jZSwgYm90aCB2b2x1bnRhcmlseSBsYWlkIGRvd24gdGhlaXIgb2ZmaWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgYWZmYWlyIG9mIENhdGlsaW5lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjYzLTYyIEIuQy48L25vdGU+IHdoaWNoIHdhcyB2ZXJ5IHNlcmlvdXMsIGFuZCBhbG1vc3Qgc3VidmVyc2l2ZSBvZiBSb21lLCBzb21lIHN1c3BpY2lvbiBhdHRhY2hlZCBpdHNlbGYgdG8gQ3Jhc3N1cywgYW5kIGEgbWFuIHB1YmxpY2x5IG5hbWVkIGhpbSBhcyBvbmUgb2YgdGhlIGNvbnNwaXJhdG9ycywgYnV0IG5vYm9keSBiZWxpZXZlZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgQ2ljZXJvLCBpbiBvbmUgb2YgaGlzIG9yYXRpb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBleHRhbnQuPC9ub3RlPiBwbGFpbmx5IGluY3VscGF0ZWQgQ3Jhc3N1cyBhbmQgQ2Flc2FyLiBUaGlzIG9yYXRpb24sIGl0IGlzIHRydWUsIHdhcyBub3QgcHVibGlzaGVkIHVudGlsIGFmdGVyIGJvdGggd2VyZSBkZWFkOyBidXQgaW4gdGhlIHRyZWF0aXNlIHVwb24gaGlzIGNvbnN1bHNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IGV4dGFudC48L25vdGU+IENpY2VybyBzYXlzIHRoYXQgQ3Jhc3N1cyBjYW1lIHRvIGhpbSBieSBuaWdodCB3aXRoIGEgbGV0dGVyIHdoaWNoIGdhdmUgZGV0YWlscyBvZiB0aGUgYWZmYWlyIG9mIENhdGlsaW5lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiBQbHV0YXJjaCdzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDE1IiB2YWxpZD0ieWVzIj5DaWNlcm8sIHh2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgZmVsdCB0aGF0IGhlIHdhcyBhdCBsYXN0IGVzdGFibGlzaGluZyB0aGUgZmFjdCBvZiBhIGNvbnNwaXJhY3kuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDcmFzc3VzLCBhY2NvcmRpbmdseSwgYWx3YXlzIGhhdGVkIENpY2VybyBmb3IgdGhpcywgYnV0IHdhcyBrZXB0IGZyb20gZG9pbmcgaGltIGFueSBvcGVuIGluanVyeSBieSBoaXMgc29uLiBGb3IgUHVibGl1cyBDcmFzc3VzLCBiZWluZyBnaXZlbiB0byBsaXRlcmF0dXJlIGFuZCBsZWFybmluZywgd2FzIGF0dGFjaGVkIHRvIENpY2Vybywgc28gbXVjaCBzbyB0aGF0IGhlIHB1dCBvbiBtb3VybmluZyB3aGVuIENpY2VybyBkaWQgYXQgdGhlIHRpbWUgb2YgaGlzIHRyaWFsLCBhbmQgcHJldmFpbGVkIHVwb24gdGhlIG90aGVyIHlvdW5nIG1lbiB0byBkbyB0aGUgc2FtZS4gQW5kIGZpbmFsbHkgaGUgcGVyc3VhZGVkIGhpcyBmYXRoZXIgdG8gYmVjb21lIENpY2VybydzIGZyaWVuZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBhZmZhaXIgb2YgQ2F0aWxpbmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj42My02MiBCLkMuPC9ub3RlPiB3aGljaCB3YXMgdmVyeSBzZXJpb3VzLCBhbmQgYWxtb3N0IHN1YnZlcnNpdmUgb2YgUm9tZSwgc29tZSBzdXNwaWNpb24gYXR0YWNoZWQgaXRzZWxmIHRvIENyYXNzdXMsIGFuZCBhIG1hbiBwdWJsaWNseSBuYW1lZCBoaW0gYXMgb25lIG9mIHRoZSBjb25zcGlyYXRvcnMsIGJ1dCBub2JvZHkgYmVsaWV2ZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgQ2ljZXJvLCBpbiBvbmUgb2YgaGlzIG9yYXRpb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IGV4dGFudC48L25vdGU+IHBsYWlubHkgaW5jdWxwYXRlZCBDcmFzc3VzIGFuZCBDYWVzYXIuIFRoaXMgb3JhdGlvbiwgaXQgaXMgdHJ1ZSwgd2FzIG5vdCBwdWJsaXNoZWQgdW50aWwgYWZ0ZXIgYm90aCB3ZXJlIGRlYWQ7IGJ1dCBpbiB0aGUgdHJlYXRpc2UgdXBvbiBoaXMgY29uc3Vsc2hpcCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCBleHRhbnQuPC9ub3RlPiBDaWNlcm8gc2F5cyB0aGF0IENyYXNzdXMgY2FtZSB0byBoaW0gYnkgbmlnaHQgd2l0aCBhIGxldHRlciB3aGljaCBnYXZlIGRldGFpbHMgb2YgdGhlIGFmZmFpciBvZiBDYXRpbGluZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiBQbHV0YXJjaCdzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMTUiIHZhbGlkPSJ5ZXMiPkNpY2VybywgeHYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBmZWx0IHRoYXQgaGUgd2FzIGF0IGxhc3QgZXN0YWJsaXNoaW5nIHRoZSBmYWN0IG9mIGEgY29uc3BpcmFjeS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDE1IiB2YWxpZD0ieWVzIj5DaWNlcm8sIHh2LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDcmFzc3VzLCBhY2NvcmRpbmdseSwgYWx3YXlzIGhhdGVkIENpY2VybyBmb3IgdGhpcywgYnV0IHdhcyBrZXB0IGZyb20gZG9pbmcgaGltIGFueSBvcGVuIGluanVyeSBieSBoaXMgc29uLiBGb3IgUHVibGl1cyBDcmFzc3VzLCBiZWluZyBnaXZlbiB0byBsaXRlcmF0dXJlIGFuZCBsZWFybmluZywgd2FzIGF0dGFjaGVkIHRvIENpY2Vybywgc28gbXVjaCBzbyB0aGF0IGhlIHB1dCBvbiBtb3VybmluZyB3aGVuIENpY2VybyBkaWQgYXQgdGhlIHRpbWUgb2YgaGlzIHRyaWFsLCBhbmQgcHJldmFpbGVkIHVwb24gdGhlIG90aGVyIHlvdW5nIG1lbiB0byBkbyB0aGUgc2FtZS4gQW5kIGZpbmFsbHkgaGUgcGVyc3VhZGVkIGhpcyBmYXRoZXIgdG8gYmVjb21lIENpY2VybydzIGZyaWVuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoZW4gQ2Flc2FyIGNhbWUgYmFjayBmcm9tIGhpcyBwcm92aW5jZSBhbmQgcHJlcGFyZWQgdG8gc2VlayB0aGUgY29uc3Vsc2hpcCwgaGUgc2F3IHRoYXQgUG9tcGV5IGFuZCBDcmFzc3VzIHdlcmUgb25jZSBtb3JlIGF0IG9kZHMgd2l0aCBlYWNoIG90aGVyLiBIZSB0aGVyZWZvcmUgZGlkIG5vdCB3aXNoIHRvIG1ha2Ugb25lIG9mIHRoZW0gYW4gZW5lbXkgYnkgYXNraW5nIHRoZSBhaWQgb2YgdGhlIG90aGVyLCBub3IgZGlkIGhlIGhhdmUgYW55IGhvcGUgb2Ygc3VjY2VzcyBpZiBuZWl0aGVyIG9mIHRoZW0gaGVscGVkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHRyaWVkIHRvIHJlY29uY2lsZSB0aGVtIGJ5IHBlcnNpc3RlbnRseSBzaG93aW5nIHRoZW0gdGhhdCB0aGVpciBtdXR1YWwgcnVpbiB3b3VsZCBvbmx5IGluY3JlYXNlIHRoZSBwb3dlciBvZiBzdWNoIG1lbiBhcyBDaWNlcm8sIENhdHVsdXMsIGFuZCBDYXRvLCBtZW4gd2hvc2UgaW5mbHVlbmNlIHdvdWxkIGJlIG5vdGhpbmcgaWYgQ3Jhc3N1cyBhbmQgUG9tcGV5IHdvdWxkIG9ubHkgdW5pdGUgdGhlaXIgZnJpZW5kcyBhbmQgYWRoZXJlbnRzLCBhbmQgd2l0aCBvbmUgbWlnaHQgYW5kIG9uZSBwdXJwb3NlIGRpcmVjdCB0aGUgYWZmYWlycyBvZiB0aGUgY2l0eS4gSGUgcGVyc3VhZGVkIHRoZW0sIHJlY29uY2lsZWQgdGhlbSwgYW5kIHdvbiB0aGVtIGJvdGggdG8gaGlzIHN1cHBvcnQsIGFuZCBjb25zdGl0dXRlZCB3aXRoIHRoYXQgdHJpdW12aXJhdGUgYW4gaXJyZXNpc3RpYmxlIHBvd2VyLCB3aXRoIHdoaWNoIGhlIG92ZXJ0aHJldyB0aGUgc2VuYXRlIGFuZCB0aGUgcGVvcGxlLCBub3QgYnkgbWFraW5nIGhpcyBwYXJ0bmVycyBncmVhdGVyLCB0aGUgb25lIHRocm91Z2ggdGhlIG90aGVyLCBidXQgYnkgbWFraW5nIGhpbXNlbGYgZ3JlYXRlc3Qgb2YgYWxsIHRocm91Z2ggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG93aW5nIHRvIHRoZSBzdXBwb3J0IG9mIGJvdGggaGUgd2FzIGF0IG9uY2UgdHJpdW1waGFudGx5IGVsZWN0ZWQgY29uc3VsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU5IEIuQy48L25vdGU+IEFuZCBkdXJpbmcgaGlzIGNvbnN1bHNoaXAgdGhleSB2b3RlZCBoaW0gYXJtaWVzIHRvIGNvbW1hbmQsIGFuZCBwdXQgR2F1bCBpbnRvIGhpcyBoYW5kcywgYW5kIHNvLCBhcyBpdCB3ZXJlLCBlc3RhYmxpc2hlZCBoaW0gaW4gYW4gYWNyb3BvbGlzLCB0aGlua2luZyB0byBzaGFyZSB0aGUgcmVzdCB3aXRoIG9uZSBhbm90aGVyIGF0IHRoZWlyIGxlaXN1cmUgaWYgdGhleSBzZWN1cmVkIHRvIGhpbSBoaXMgYWxsb3R0ZWQgcHJvdmluY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoZW4gQ2Flc2FyIGNhbWUgYmFjayBmcm9tIGhpcyBwcm92aW5jZSBhbmQgcHJlcGFyZWQgdG8gc2VlayB0aGUgY29uc3Vsc2hpcCwgaGUgc2F3IHRoYXQgUG9tcGV5IGFuZCBDcmFzc3VzIHdlcmUgb25jZSBtb3JlIGF0IG9kZHMgd2l0aCBlYWNoIG90aGVyLiBIZSB0aGVyZWZvcmUgZGlkIG5vdCB3aXNoIHRvIG1ha2Ugb25lIG9mIHRoZW0gYW4gZW5lbXkgYnkgYXNraW5nIHRoZSBhaWQgb2YgdGhlIG90aGVyLCBub3IgZGlkIGhlIGhhdmUgYW55IGhvcGUgb2Ygc3VjY2VzcyBpZiBuZWl0aGVyIG9mIHRoZW0gaGVscGVkIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSB0cmllZCB0byByZWNvbmNpbGUgdGhlbSBieSBwZXJzaXN0ZW50bHkgc2hvd2luZyB0aGVtIHRoYXQgdGhlaXIgbXV0dWFsIHJ1aW4gd291bGQgb25seSBpbmNyZWFzZSB0aGUgcG93ZXIgb2Ygc3VjaCBtZW4gYXMgQ2ljZXJvLCBDYXR1bHVzLCBhbmQgQ2F0bywgbWVuIHdob3NlIGluZmx1ZW5jZSB3b3VsZCBiZSBub3RoaW5nIGlmIENyYXNzdXMgYW5kIFBvbXBleSB3b3VsZCBvbmx5IHVuaXRlIHRoZWlyIGZyaWVuZHMgYW5kIGFkaGVyZW50cywgYW5kIHdpdGggb25lIG1pZ2h0IGFuZCBvbmUgcHVycG9zZSBkaXJlY3QgdGhlIGFmZmFpcnMgb2YgdGhlIGNpdHkuIEhlIHBlcnN1YWRlZCB0aGVtLCByZWNvbmNpbGVkIHRoZW0sIGFuZCB3b24gdGhlbSBib3RoIHRvIGhpcyBzdXBwb3J0LCBhbmQgY29uc3RpdHV0ZWQgd2l0aCB0aGF0IHRyaXVtdmlyYXRlIGFuIGlycmVzaXN0aWJsZSBwb3dlciwgd2l0aCB3aGljaCBoZSBvdmVydGhyZXcgdGhlIHNlbmF0ZSBhbmQgdGhlIHBlb3BsZSwgbm90IGJ5IG1ha2luZyBoaXMgcGFydG5lcnMgZ3JlYXRlciwgdGhlIG9uZSB0aHJvdWdoIHRoZSBvdGhlciwgYnV0IGJ5IG1ha2luZyBoaW1zZWxmIGdyZWF0ZXN0IG9mIGFsbCB0aHJvdWdoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvd2luZyB0byB0aGUgc3VwcG9ydCBvZiBib3RoIGhlIHdhcyBhdCBvbmNlIHRyaXVtcGhhbnRseSBlbGVjdGVkIGNvbnN1bC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU5IEIuQy48L25vdGU+IEFuZCBkdXJpbmcgaGlzIGNvbnN1bHNoaXAgdGhleSB2b3RlZCBoaW0gYXJtaWVzIHRvIGNvbW1hbmQsIGFuZCBwdXQgR2F1bCBpbnRvIGhpcyBoYW5kcywgYW5kIHNvLCBhcyBpdCB3ZXJlLCBlc3RhYmxpc2hlZCBoaW0gaW4gYW4gYWNyb3BvbGlzLCB0aGlua2luZyB0byBzaGFyZSB0aGUgcmVzdCB3aXRoIG9uZSBhbm90aGVyIGF0IHRoZWlyIGxlaXN1cmUgaWYgdGhleSBzZWN1cmVkIHRvIGhpbSBoaXMgYWxsb3R0ZWQgcHJvdmluY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBQb21wZXkgZGlkIGFsbCB0aGlzIGZyb20gYW4gdW5ib3VuZGVkIGxvdmUgb2YgcG93ZXI7IGJ1dCB0byB0aGF0IGFuY2llbnQgaW5maXJtaXR5IG9mIENyYXNzdXMsIGhpcyBhdmFyaWNlLCB0aGVyZSB3YXMgbm93IGFkZGVkIGEgZnJlc2ggYW5kIGFyZGVudCBwYXNzaW9uLCBpbiB2aWV3IG9mIHRoZSBnbG9yaW91cyBleHBsb2l0cyBvZiBDYWVzYXIsIGZvciB0cm9waGllcyBhbmQgdHJpdW1waHMuIEluIHRoZXNlIGFsb25lIGhlIHRob3VnaHQgaGltc2VsZiBpbmZlcmlvciB0byBDYWVzYXIsIGJ1dCBzdXBlcmlvciBpbiBldmVyeXRoaW5nIGVsc2UuIEFuZCBoaXMgcGFzc2lvbiBnYXZlIGhpbSBubyByZXN0IG5vciBwZWFjZSB1bnRpbCBpdCBlbmRlZCBpbiBhbiBpbmdsb3Jpb3VzIGRlYXRoIGFuZCBwdWJsaWMgY2FsYW1pdGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gQ2Flc2FyIGNhbWUgZG93biB0byB0aGUgY2l0eSBvZiBMdWNhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTYgQi5DLjwvbm90ZT4gZnJvbSBHYXVsLCBtYW55IFJvbWFucyBjYW1lIHRoaXRoZXIgdG8gbWVldCBoaW0sIGFuZCBhbW9uZyB0aGVtIFBvbXBleSBhbmQgQ3Jhc3N1cy4gVGhlc2UgaGVsZCBwcml2YXRlIGNvbmZlcmVuY2VzIHdpdGggQ2Flc2FyLCBhbmQgdGhlIHRocmVlIGRldGVybWluZWQgdG8gY2FycnkgbWF0dGVycyB3aXRoIGEgaGlnaGVyIGhhbmQsIGFuZCB0byBtYWtlIHRoZW1zZWx2ZXMgc29sZSBtYXN0ZXJzIG9mIHRoZSBzdGF0ZS4gQ2Flc2FyIHdhcyB0byByZW1haW4gaW4gaGlzIGNvbW1hbmQsIHdoaWxlIFBvbXBleSBhbmQgQ3Jhc3N1cyB3ZXJlIHRvIHRha2Ugb3RoZXIgcHJvdmluY2VzIGFuZCBhcm1pZXMuIEJ1dCB0aGUgb25seSB3YXkgdG8gc2VjdXJlIHRoaXMgZW5kIHdhcyBieSBzb2xpY2l0aW5nIGEgc2Vjb25kIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIFBvbXBleSBhbmQgQ3Jhc3N1cyB3ZXJlIGNhbmRpZGF0ZXMgZm9yIHRoaXMsIENhZXNhciB3YXMgdG8gY28tb3BlcmF0ZSB3aXRoIHRoZW0gYnkgd3JpdGluZyBsZXR0ZXJzIHRvIGhpcyBmcmllbmRzIGFuZCBieSBzZW5kaW5nIG1hbnkgb2YgaGlzIHNvbGRpZXJzIGhvbWUgdG8gc3VwcG9ydCB0aGVtIGF0IHRoZSBlbGVjdGlvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBQb21wZXkgZGlkIGFsbCB0aGlzIGZyb20gYW4gdW5ib3VuZGVkIGxvdmUgb2YgcG93ZXI7IGJ1dCB0byB0aGF0IGFuY2llbnQgaW5maXJtaXR5IG9mIENyYXNzdXMsIGhpcyBhdmFyaWNlLCB0aGVyZSB3YXMgbm93IGFkZGVkIGEgZnJlc2ggYW5kIGFyZGVudCBwYXNzaW9uLCBpbiB2aWV3IG9mIHRoZSBnbG9yaW91cyBleHBsb2l0cyBvZiBDYWVzYXIsIGZvciB0cm9waGllcyBhbmQgdHJpdW1waHMuIEluIHRoZXNlIGFsb25lIGhlIHRob3VnaHQgaGltc2VsZiBpbmZlcmlvciB0byBDYWVzYXIsIGJ1dCBzdXBlcmlvciBpbiBldmVyeXRoaW5nIGVsc2UuIEFuZCBoaXMgcGFzc2lvbiBnYXZlIGhpbSBubyByZXN0IG5vciBwZWFjZSB1bnRpbCBpdCBlbmRlZCBpbiBhbiBpbmdsb3Jpb3VzIGRlYXRoIGFuZCBwdWJsaWMgY2FsYW1pdGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIENhZXNhciBjYW1lIGRvd24gdG8gdGhlIGNpdHkgb2YgTHVjYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTYgQi5DLjwvbm90ZT4gZnJvbSBHYXVsLCBtYW55IFJvbWFucyBjYW1lIHRoaXRoZXIgdG8gbWVldCBoaW0sIGFuZCBhbW9uZyB0aGVtIFBvbXBleSBhbmQgQ3Jhc3N1cy4gVGhlc2UgaGVsZCBwcml2YXRlIGNvbmZlcmVuY2VzIHdpdGggQ2Flc2FyLCBhbmQgdGhlIHRocmVlIGRldGVybWluZWQgdG8gY2FycnkgbWF0dGVycyB3aXRoIGEgaGlnaGVyIGhhbmQsIGFuZCB0byBtYWtlIHRoZW1zZWx2ZXMgc29sZSBtYXN0ZXJzIG9mIHRoZSBzdGF0ZS4gQ2Flc2FyIHdhcyB0byByZW1haW4gaW4gaGlzIGNvbW1hbmQsIHdoaWxlIFBvbXBleSBhbmQgQ3Jhc3N1cyB3ZXJlIHRvIHRha2Ugb3RoZXIgcHJvdmluY2VzIGFuZCBhcm1pZXMuIEJ1dCB0aGUgb25seSB3YXkgdG8gc2VjdXJlIHRoaXMgZW5kIHdhcyBieSBzb2xpY2l0aW5nIGEgc2Vjb25kIGNvbnN1bHNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIFBvbXBleSBhbmQgQ3Jhc3N1cyB3ZXJlIGNhbmRpZGF0ZXMgZm9yIHRoaXMsIENhZXNhciB3YXMgdG8gY28tb3BlcmF0ZSB3aXRoIHRoZW0gYnkgd3JpdGluZyBsZXR0ZXJzIHRvIGhpcyBmcmllbmRzIGFuZCBieSBzZW5kaW5nIG1hbnkgb2YgaGlzIHNvbGRpZXJzIGhvbWUgdG8gc3VwcG9ydCB0aGVtIGF0IHRoZSBlbGVjdGlvbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhpcyB1bmRlcnN0YW5kaW5nLCBDcmFzc3VzIGFuZCBQb21wZXkgcmV0dXJuZWQgdG8gUm9tZSwgYW5kIHdlcmUgYXQgb25jZSBvYmplY3RzIG9mIHN1c3BpY2lvbjsgcmVwb3J0IHdhcyByaWZlIHRocm91Z2ggdGhlIHdob2xlIGNpdHkgdGhhdCB0aGVpciBtZWV0aW5nIHdpdGggQ2Flc2FyIGhhZCBiZWVuIGZvciBubyBnb29kIHB1cnBvc2UuIEluIHRoZSBzZW5hdGUsIGFsc28sIHdoZW4gTWFyY2VsbGludXMgYW5kIERvbWl0aXVzIGFza2VkIFBvbXBleSBpZiBoZSB3YXMgZ29pbmcgdG8gYmUgYSBjYW5kaWRhdGUgZm9yIHRoZSBjb25zdWxzaGlwLCBoZSByZXBsaWVkIHRoYXQgcGVyaGFwcyBoZSB3YXMsIGFuZCBwZXJoYXBzIGhlIHdhcyBub3Q7IGFuZCB3aGVuIGFza2VkIHRoZSBxdWVzdGlvbiBhZ2FpbiwgaGUgc2FpZCBoZSBzaG91bGQgc29saWNpdCB0aGUgdm90ZXMgb2YgdGhlIGdvb2QgY2l0aXplbnMsIGJ1dCBub3QgdGhvc2Ugb2YgdGhlIGJhZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgaGlzIGFuc3dlcnMgd2VyZSB0aG91Z2h0IHRvIGhhdmUgYmVlbiBtYWRlIGluIHByaWRlIGFuZCBhcnJvZ2FuY2UsIENyYXNzdXMgc2FpZCwgbW9yZSBtb2Rlc3RseSwgd2hlbiB0aGUgcXVlc3Rpb24gd2FzIHB1dCB0byBoaW0sIHRoYXQgaWYgaXQgd2FzIGZvciB0aGUgaW50ZXJlc3Qgb2YgdGhlIGNpdHksIGhlIHdvdWxkIGJlIGEgY2FuZGlkYXRlIGZvciB0aGUgb2ZmaWNlLCBidXQgb3RoZXJ3aXNlIGhlIHdvdWxkIGRlc2lzdC4gRm9yIHRoaXMgcmVhc29uIGRpdmVycyBwZXJzb25zIHdlcmUgZW1ib2xkZW5lZCB0byBzdWUgZm9yIHRoZSBjb25zdWxzaGlwLCBvbmUgb2Ygd2hvbSB3YXMgRG9taXRpdXMuIFdoZW4sIGhvd2V2ZXIsIFBvbXBleSBhbmQgQ3Jhc3N1cyBvcGVubHkgYW5ub3VuY2VkIHRoZWlyIGNhbmRpZGF0dXJlLCB0aGUgcmVzdCB0b29rIGZyaWdodCBhbmQgd2l0aGRyZXcgZnJvbSB0aGUgY29udGVzdDsgYnV0IENhdG8gZW5jb3VyYWdlZCBEb21pdGl1cywgd2hvIHdhcyBhIGtpbnNtYW4gYW5kIGZyaWVuZCBvZiBoaXMsIHRvIHByb2NlZWQsIHVyZ2luZyBhbmQgaW5jaXRpbmcgaGltIHRvIGNsaW5nIHRvIGhpcyBob3BlcywgYXNzdXJlZCB0aGF0IGhlIHdvdWxkIGRvIGJhdHRsZSBmb3IgdGhlIGNvbW1vbiBmcmVlZG9tLiBGb3IgaXQgd2FzIG5vdCB0aGUgY29uc3VsYXRlLCBoZSBzYWlkLCB3aGljaCBDcmFzc3VzIGFuZCBQb21wZXkgd2FudGVkLCBidXQgYSB0eXJhbm55LCBub3IgZGlkIHRoZWlyIGNvdXJzZSBvZiBhY3Rpb24gbWVhbiBzaW1wbHkgYSBjYW52YXNzIGZvciBvZmZpY2UsIGJ1dCByYXRoZXIgYSBzZWl6dXJlIG9mIHByb3ZpbmNlcyBhbmQgYXJtaWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGlzIHVuZGVyc3RhbmRpbmcsIENyYXNzdXMgYW5kIFBvbXBleSByZXR1cm5lZCB0byBSb21lLCBhbmQgd2VyZSBhdCBvbmNlIG9iamVjdHMgb2Ygc3VzcGljaW9uOyByZXBvcnQgd2FzIHJpZmUgdGhyb3VnaCB0aGUgd2hvbGUgY2l0eSB0aGF0IHRoZWlyIG1lZXRpbmcgd2l0aCBDYWVzYXIgaGFkIGJlZW4gZm9yIG5vIGdvb2QgcHVycG9zZS4gSW4gdGhlIHNlbmF0ZSwgYWxzbywgd2hlbiBNYXJjZWxsaW51cyBhbmQgRG9taXRpdXMgYXNrZWQgUG9tcGV5IGlmIGhlIHdhcyBnb2luZyB0byBiZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIGNvbnN1bHNoaXAsIGhlIHJlcGxpZWQgdGhhdCBwZXJoYXBzIGhlIHdhcywgYW5kIHBlcmhhcHMgaGUgd2FzIG5vdDsgYW5kIHdoZW4gYXNrZWQgdGhlIHF1ZXN0aW9uIGFnYWluLCBoZSBzYWlkIGhlIHNob3VsZCBzb2xpY2l0IHRoZSB2b3RlcyBvZiB0aGUgZ29vZCBjaXRpemVucywgYnV0IG5vdCB0aG9zZSBvZiB0aGUgYmFkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIGhpcyBhbnN3ZXJzIHdlcmUgdGhvdWdodCB0byBoYXZlIGJlZW4gbWFkZSBpbiBwcmlkZSBhbmQgYXJyb2dhbmNlLCBDcmFzc3VzIHNhaWQsIG1vcmUgbW9kZXN0bHksIHdoZW4gdGhlIHF1ZXN0aW9uIHdhcyBwdXQgdG8gaGltLCB0aGF0IGlmIGl0IHdhcyBmb3IgdGhlIGludGVyZXN0IG9mIHRoZSBjaXR5LCBoZSB3b3VsZCBiZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIG9mZmljZSwgYnV0IG90aGVyd2lzZSBoZSB3b3VsZCBkZXNpc3QuIEZvciB0aGlzIHJlYXNvbiBkaXZlcnMgcGVyc29ucyB3ZXJlIGVtYm9sZGVuZWQgdG8gc3VlIGZvciB0aGUgY29uc3Vsc2hpcCwgb25lIG9mIHdob20gd2FzIERvbWl0aXVzLiBXaGVuLCBob3dldmVyLCBQb21wZXkgYW5kIENyYXNzdXMgb3Blbmx5IGFubm91bmNlZCB0aGVpciBjYW5kaWRhdHVyZSwgdGhlIHJlc3QgdG9vayBmcmlnaHQgYW5kIHdpdGhkcmV3IGZyb20gdGhlIGNvbnRlc3Q7IGJ1dCBDYXRvIGVuY291cmFnZWQgRG9taXRpdXMsIHdobyB3YXMgYSBraW5zbWFuIGFuZCBmcmllbmQgb2YgaGlzLCB0byBwcm9jZWVkLCB1cmdpbmcgYW5kIGluY2l0aW5nIGhpbSB0byBjbGluZyB0byBoaXMgaG9wZXMsIGFzc3VyZWQgdGhhdCBoZSB3b3VsZCBkbyBiYXR0bGUgZm9yIHRoZSBjb21tb24gZnJlZWRvbS4gRm9yIGl0IHdhcyBub3QgdGhlIGNvbnN1bGF0ZSwgaGUgc2FpZCwgd2hpY2ggQ3Jhc3N1cyBhbmQgUG9tcGV5IHdhbnRlZCwgYnV0IGEgdHlyYW5ueSwgbm9yIGRpZCB0aGVpciBjb3Vyc2Ugb2YgYWN0aW9uIG1lYW4gc2ltcGx5IGEgY2FudmFzcyBmb3Igb2ZmaWNlLCBidXQgcmF0aGVyIGEgc2VpenVyZSBvZiBwcm92aW5jZXMgYW5kIGFybWllcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIHdvcmRzIGFuZCBzdWNoIHNlbnRpbWVudHMgQ2F0byBhbGwgYnV0IGZvcmNlZCBEb21pdGl1cyB0byBnbyBkb3duIHRvIHRoZSBmb3J1bSBhcyBhIGNhbmRpZGF0ZSwgYW5kIG1hbnkgam9pbmVkIHRoZWlyIHBhcnR5LiBNYW55LCB0b28sIHZvaWNlZCB0aGVpciBhbWF6ZW1lbnQgdGh1czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHByYXksIHNob3VsZCB0aGVzZSBtZW4gd2FudCBhIHNlY29uZCBjb25zdWxzaGlwPyBBbmQgd2h5IG9uY2UgbW9yZSB0b2dldGhlcj8gV2h5IG5vdCBoYXZlIG90aGVyIGNvbGxlYWd1ZXM/IFN1cmVseSB0aGVyZSBhcmUgbWFueSBtZW4gYW1vbmcgdXMgd2hvIGFyZSBub3QgdW53b3J0aHkgdG8gYmUgY29sbGVhZ3VlcyBvZiBQb21wZXkgYW5kIENyYXNzdXMhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsYXJtZWQgYXQgdGhpcywgdGhlIHBhcnRpc2FucyBvZiBDcmFzc3VzIGFuZCBQb21wZXkgYWJzdGFpbmVkLCBmcm9tIG5vIGRpc29yZGVyIG9yIHZpb2xlbmNlLCBob3dldmVyIGV4dHJlbWUsIGFuZCBjYXBwZWQgdGhlIGNsaW1heCBieSB3YXlsYXlpbmcgRG9taXRpdXMsIGFzIGhlIHdhcyBjb21pbmcgZG93biBpbnRvIHRoZSBmb3J1bSBiZWZvcmUgZGF5LWJyZWFrIHdpdGggaGlzIGZvbGxvd2Vycywga2lsbGluZyBoaXMgdG9yY2gtYmVhcmVyLCBhbmQgd291bmRpbmcgbWFueSwgYW1vbmcgd2hvbSB3YXMgQ2F0by4gQWZ0ZXIgcm91dGluZyB0aGVpciBvcHBvbmVudHMgYW5kIHNodXR0aW5nIHRoZW0gdXAgYXQgaG9tZSwgdGhleSBoYWQgdGhlbXNlbHZlcyBwcm9jbGFpbWVkIGNvbnN1bHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTUgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYSBzaG9ydCB0aW1lIGFmdGVyd2FyZHMgdGhleSBvbmNlIG1vcmUgc3Vycm91bmRlZCB0aGUgcm9zdHJhIHdpdGggYXJtZWQgbWVuLCBjYXN0IENhdG8gb3V0IG9mIHRoZSBmb3J1bSwgc2xldyBzZXZlcmFsIHdobyBtYWRlIHJlc2lzdGFuY2UsIGFuZCB0aGVuIGhhZCBhbm90aGVyIGZpdmUgeWVhcnMgYWRkZWQgdG8gdGhlIHByb2NvbnN1bHNoaXAgb2YgQ2Flc2FyIGluIEdhdWwsIGFuZCB0aGUgcHJvdmluY2VzIG9mIFN5cmlhIGFuZCBib3RoIFNwYWlucyB2b3RlZCB0byB0aGVtIHNlbHZlcy4gV2hlbiB0aGUgbG90IHdhcyBjYXN0LCBTeXJpYSBmZWxsIHRvIENyYXNzdXMsIGFuZCB0aGUgU3BhaW5zIHRvIFBvbXBleS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpdGggc3VjaCB3b3JkcyBhbmQgc3VjaCBzZW50aW1lbnRzIENhdG8gYWxsIGJ1dCBmb3JjZWQgRG9taXRpdXMgdG8gZ28gZG93biB0byB0aGUgZm9ydW0gYXMgYSBjYW5kaWRhdGUsIGFuZCBtYW55IGpvaW5lZCB0aGVpciBwYXJ0eS4gTWFueSwgdG9vLCB2b2ljZWQgdGhlaXIgYW1hemVtZW50IHRodXM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHByYXksIHNob3VsZCB0aGVzZSBtZW4gd2FudCBhIHNlY29uZCBjb25zdWxzaGlwPyBBbmQgd2h5IG9uY2UgbW9yZSB0b2dldGhlcj8gV2h5IG5vdCBoYXZlIG90aGVyIGNvbGxlYWd1ZXM/IFN1cmVseSB0aGVyZSBhcmUgbWFueSBtZW4gYW1vbmcgdXMgd2hvIGFyZSBub3QgdW53b3J0aHkgdG8gYmUgY29sbGVhZ3VlcyBvZiBQb21wZXkgYW5kIENyYXNzdXMhPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsYXJtZWQgYXQgdGhpcywgdGhlIHBhcnRpc2FucyBvZiBDcmFzc3VzIGFuZCBQb21wZXkgYWJzdGFpbmVkLCBmcm9tIG5vIGRpc29yZGVyIG9yIHZpb2xlbmNlLCBob3dldmVyIGV4dHJlbWUsIGFuZCBjYXBwZWQgdGhlIGNsaW1heCBieSB3YXlsYXlpbmcgRG9taXRpdXMsIGFzIGhlIHdhcyBjb21pbmcgZG93biBpbnRvIHRoZSBmb3J1bSBiZWZvcmUgZGF5LWJyZWFrIHdpdGggaGlzIGZvbGxvd2Vycywga2lsbGluZyBoaXMgdG9yY2gtYmVhcmVyLCBhbmQgd291bmRpbmcgbWFueSwgYW1vbmcgd2hvbSB3YXMgQ2F0by4gQWZ0ZXIgcm91dGluZyB0aGVpciBvcHBvbmVudHMgYW5kIHNodXR0aW5nIHRoZW0gdXAgYXQgaG9tZSwgdGhleSBoYWQgdGhlbXNlbHZlcyBwcm9jbGFpbWVkIGNvbnN1bHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj41NSBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhIHNob3J0IHRpbWUgYWZ0ZXJ3YXJkcyB0aGV5IG9uY2UgbW9yZSBzdXJyb3VuZGVkIHRoZSByb3N0cmEgd2l0aCBhcm1lZCBtZW4sIGNhc3QgQ2F0byBvdXQgb2YgdGhlIGZvcnVtLCBzbGV3IHNldmVyYWwgd2hvIG1hZGUgcmVzaXN0YW5jZSwgYW5kIHRoZW4gaGFkIGFub3RoZXIgZml2ZSB5ZWFycyBhZGRlZCB0byB0aGUgcHJvY29uc3Vsc2hpcCBvZiBDYWVzYXIgaW4gR2F1bCwgYW5kIHRoZSBwcm92aW5jZXMgb2YgU3lyaWEgYW5kIGJvdGggU3BhaW5zIHZvdGVkIHRvIHRoZW0gc2VsdmVzLiBXaGVuIHRoZSBsb3Qgd2FzIGNhc3QsIFN5cmlhIGZlbGwgdG8gQ3Jhc3N1cywgYW5kIHRoZSBTcGFpbnMgdG8gUG9tcGV5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIGxvdCBmZWxsIG91dCB0byB0aGUgc2F0aXNmYWN0aW9uIG9mIGV2ZXJ5Ym9keS4gRm9yIG1vc3Qgb2YgdGhlIHBlb3BsZSB3aXNoZWQgUG9tcGV5IHRvIGJlIG5vdCBmYXIgYXdheSBmcm9tIHRoZSBjaXR5OyBQb21wZXksIHdobyB3YXMgZm9uZCBvZiBoaXMgd2lmZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KdWxpYSwgQ2Flc2FyJ3MgZGF1Z2h0ZXIsIHdobyBkaWVkIGluIDU0IEIuQy48L25vdGU+IGludGVuZGVkIHRvIHNwZW5kIG1vc3Qgb2YgaGlzIHRpbWUgdGhlcmU7IGFuZCBhcyBmb3IgQ3Jhc3N1cywgYXMgc29vbiBhcyB0aGUgbG90IGZlbGwgb3V0LCBoZSBzaG93ZWQgYnkgaGlzIGpveSB0aGF0IGhlIHJlZ2FyZGVkIG5vIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBpbiBoaXMgd2hvbGUgbGlmZSBhcyBtb3JlIHJhZGlhbnQgdGhhbiB0aGUgb25lIHdoaWNoIGhhZCBub3cgY29tZSB0byBoaW0uIEFtb25nIHN0cmFuZ2VycyBhbmQgaW4gcHVibGljIGhlIGNvdWxkIHNjYXJjZWx5IGhvbGQgaGlzIHBlYWNlLCB3aGlsZSB0byBoaXMgaW50aW1hdGVzIGhlIG1hZGUgbWFueSBlbXB0eSBhbmQgeW91dGhmdWwgYm9hc3RzIHdoaWNoIGlsbCBiZWNhbWUgaGlzIHllYXJzIGFuZCBoaXMgZGlzcG9zaXRpb24sIGZvciBoZSBoYWQgYmVlbiBhbnl0aGluZyBidXQgYm9hc3RmdWwgb3IgYm9tYmFzdGljIGJlZm9yZSB0aGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm93LCBiZWluZyBhbHRvZ2V0aGVyIGV4YWx0ZWQgYW5kIG91dCBvZiBoaXMgc2Vuc2VzLCBoZSB3b3VsZCBub3QgY29uc2lkZXIgU3lyaWEgbm9yIGV2ZW4gUGFydGhpYSBhcyB0aGUgYm91bmRhcmllcyBvZiBoaXMgc3VjY2VzcywgYnV0IHRob3VnaHQgdG8gbWFrZSB0aGUgY2FtcGFpZ25zIG9mIEx1Y3VsbHVzIGFnYWluc3QgVGlncmFuZXMgYW5kIHRob3NlIG9mIFBvbXBleSBhZ2FpbnN0IE1pdGhyaWRhdGVzIHNlZW0gbWVyZSBjaGlsZCdzIHBsYXksIGFuZCBmbGV3IG9uIHRoZSB3aW5ncyBvZiBoaXMgaG9wZXMgYXMgZmFyIGFzIEJhY3RyaWEgYW5kIEluZGlhIGFuZCB0aGUgT3V0ZXIgU2VhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZSBsb3QgZmVsbCBvdXQgdG8gdGhlIHNhdGlzZmFjdGlvbiBvZiBldmVyeWJvZHkuIEZvciBtb3N0IG9mIHRoZSBwZW9wbGUgd2lzaGVkIFBvbXBleSB0byBiZSBub3QgZmFyIGF3YXkgZnJvbSB0aGUgY2l0eTsgUG9tcGV5LCB3aG8gd2FzIGZvbmQgb2YgaGlzIHdpZmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KdWxpYSwgQ2Flc2FyJ3MgZGF1Z2h0ZXIsIHdobyBkaWVkIGluIDU0IEIuQy48L25vdGU+IGludGVuZGVkIHRvIHNwZW5kIG1vc3Qgb2YgaGlzIHRpbWUgdGhlcmU7IGFuZCBhcyBmb3IgQ3Jhc3N1cywgYXMgc29vbiBhcyB0aGUgbG90IGZlbGwgb3V0LCBoZSBzaG93ZWQgYnkgaGlzIGpveSB0aGF0IGhlIHJlZ2FyZGVkIG5vIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBpbiBoaXMgd2hvbGUgbGlmZSBhcyBtb3JlIHJhZGlhbnQgdGhhbiB0aGUgb25lIHdoaWNoIGhhZCBub3cgY29tZSB0byBoaW0uIEFtb25nIHN0cmFuZ2VycyBhbmQgaW4gcHVibGljIGhlIGNvdWxkIHNjYXJjZWx5IGhvbGQgaGlzIHBlYWNlLCB3aGlsZSB0byBoaXMgaW50aW1hdGVzIGhlIG1hZGUgbWFueSBlbXB0eSBhbmQgeW91dGhmdWwgYm9hc3RzIHdoaWNoIGlsbCBiZWNhbWUgaGlzIHllYXJzIGFuZCBoaXMgZGlzcG9zaXRpb24sIGZvciBoZSBoYWQgYmVlbiBhbnl0aGluZyBidXQgYm9hc3RmdWwgb3IgYm9tYmFzdGljIGJlZm9yZSB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3csIGJlaW5nIGFsdG9nZXRoZXIgZXhhbHRlZCBhbmQgb3V0IG9mIGhpcyBzZW5zZXMsIGhlIHdvdWxkIG5vdCBjb25zaWRlciBTeXJpYSBub3IgZXZlbiBQYXJ0aGlhIGFzIHRoZSBib3VuZGFyaWVzIG9mIGhpcyBzdWNjZXNzLCBidXQgdGhvdWdodCB0byBtYWtlIHRoZSBjYW1wYWlnbnMgb2YgTHVjdWxsdXMgYWdhaW5zdCBUaWdyYW5lcyBhbmQgdGhvc2Ugb2YgUG9tcGV5IGFnYWluc3QgTWl0aHJpZGF0ZXMgc2VlbSBtZXJlIGNoaWxkJ3MgcGxheSwgYW5kIGZsZXcgb24gdGhlIHdpbmdzIG9mIGhpcyBob3BlcyBhcyBmYXIgYXMgQmFjdHJpYSBhbmQgSW5kaWEgYW5kIHRoZSBPdXRlciBTZWEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGluIHRoZSBkZWNyZWUgd2hpY2ggd2FzIHBhc3NlZCByZWdhcmRpbmcgaGlzIG1pc3Npb24gdGhlcmUgd2FzIG5vIG1lbnRpb24gb2YgYSBQYXJ0aGlhbiB3YXIuIEJ1dCBldmVyeWJvZHkga25ldyB0aGF0IENyYXNzdXMgd2FzIGFsbCBlYWdlcm5lc3MgZm9yIHRoaXMsIGFuZCBDYWVzYXIgd3JvdGUgdG8gaGltIGZyb20gR2F1bCBhcHByb3Zpbmcgb2YgaGlzIHByb2plY3QsIGFuZCBpbmNpdGluZyBoaW0gb24gdG8gdGhlIHdhci4gQW5kIHdoZW4gQXRlaXVzLCBvbmUgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIHRocmVhdGVuZWQgdG8gb3Bwb3NlIGhpcyBsZWF2aW5nIHRoZSBjaXR5LCBhbmQgYSBsYXJnZSBwYXJ0eSBhcm9zZSB3aGljaCB3YXMgZGlzcGxlYXNlZCB0aGF0IGFueW9uZSBzaG91bGQgZ28gb3V0IHRvIHdhZ2Ugd2FyIG9uIG1lbiB3aG8gaGFkIGRvbmUgdGhlIHN0YXRlIG5vIHdyb25nLCBidXQgd2VyZSBpbiB0cmVhdHkgcmVsYXRpb25zIHdpdGggaXQsIHRoZW4gQ3Jhc3N1cywgaW4gZmVhciwgYmVnZ2VkIFBvbXBleSB0byBjb21lIHRvIGhpcyBhaWQgYW5kIGpvaW4gaW4gZXNjb3J0aW5nIGhpbSBvdXQgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBncmVhdCB3YXMgUG9tcGV5J3MgcmVwdXRhdGlvbiB3aXRoIHRoZSBjcm93ZC4gQW5kIG5vdywgd2hlbiB0aGUgbXVsdGl0dWRlIGRyYXduIHVwIHRvIHJlc2lzdCB0aGUgcGFzc2FnZSBvZiBDcmFzc3VzLCBhbmQgdG8gYWJ1c2UgaGltLCBzYXcgUG9tcGV5J3MgYmVhbWluZyBjb3VudGVuYW5jZSBpbiBmcm9udCBvZiBoaW0sIHRoZXkgd2VyZSBtb2xsaWZpZWQsIGFuZCBnYXZlIHdheSBiZWZvcmUgdGhlbSBpbiBzaWxlbmNlLiBCdXQgQXRlaXVzLCBvbiBtZWV0aW5nIENyYXNzdXMsIGF0IGZpcnN0IHRyaWVkIHRvIHN0b3AgaGltIHdpdGggd29yZHMsIGFuZCBwcm90ZXN0ZWQgYWdhaW5zdCBoaXMgYWR2YW5jZTsgdGhlbiBoZSBiYWRlIGhpcyBhdHRlbmRhbnQgc2VpemUgdGhlIHBlcnNvbiBvZiBDcmFzc3VzIGFuZCBkZXRhaW4gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgb3RoZXIgdHJpYnVuZXMgd291bGQgbm90IHBlcm1pdCB0aGlzLCB0aGUgYXR0ZW5kYW50IHJlbGVhc2VkIENyYXNzdXMsIGJ1dCBBdGVpdXMgcmFuIG9uIGFoZWFkIHRvIHRoZSBjaXR5IGdhdGUsIHBsYWNlZCB0aGVyZSBhIGJsYXppbmcgYnJhemllciwgYW5kIHdoZW4gQ3Jhc3N1cyBjYW1lIHVwLCBjYXN0IGluY2Vuc2UgYW5kIGxpYmF0aW9ucyB1cG9uIGl0LCBhbmQgaW52b2tlZCBjdXJzZXMgd2hpY2ggd2VyZSBkcmVhZGZ1bCBhbmQgdGVycmlmeWluZyBpbiB0aGVtc2VsdmVzLCBhbmQgd2VyZSByZWluZm9yY2VkIGJ5IHN1bmRyeSBzdHJhbmdlIGFuZCBkcmVhZGZ1bCBnb2RzIHdob20gaGUgc3VtbW9uZWQgYW5kIGNhbGxlZCBieSBuYW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIHNheSB0aGF0IHRoZXNlIG15c3RlcmlvdXMgYW5kIGFuY2llbnQgY3Vyc2VzIGhhdmUgc3VjaCBwb3dlciB0aGF0IG5vIG9uZSBpbnZvbHZlZCBpbiB0aGVtIGV2ZXIgZXNjYXBlcywgYW5kIG1pc2ZvcnR1bmUgZmFsbHMgYWxzbyB1cG9uIHRoZSBvbmUgd2hvIHV0dGVycyB0aGVtLCB3aGVyZWZvcmUgdGhleSBhcmUgbm90IGVtcGxveWVkIGF0IHJhbmRvbSBub3IgYnkgbWFueS4gQW5kIGFjY29yZGluZ2x5IGF0IHRoaXMgdGltZSB0aGV5IGZvdW5kIGZhdWx0IHdpdGggQXRlaXVzIGJlY2F1c2UgaXQgd2FzIGZvciB0aGUgY2l0eSdzIHNha2UgdGhhdCBoZSB3YXMgYW5nZXJlZCBhdCBDcmFzc3VzLCBhbmQgeWV0IGhlIGhhZCBpbnZvbHZlZCB0aGUgY2l0eSBpbiBjdXJzZXMgd2hpY2ggYXdha2VuZWQgbXVjaCBzdXBlcnN0aXRpb3VzIHRlcnJvci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gdGhlIGRlY3JlZSB3aGljaCB3YXMgcGFzc2VkIHJlZ2FyZGluZyBoaXMgbWlzc2lvbiB0aGVyZSB3YXMgbm8gbWVudGlvbiBvZiBhIFBhcnRoaWFuIHdhci4gQnV0IGV2ZXJ5Ym9keSBrbmV3IHRoYXQgQ3Jhc3N1cyB3YXMgYWxsIGVhZ2VybmVzcyBmb3IgdGhpcywgYW5kIENhZXNhciB3cm90ZSB0byBoaW0gZnJvbSBHYXVsIGFwcHJvdmluZyBvZiBoaXMgcHJvamVjdCwgYW5kIGluY2l0aW5nIGhpbSBvbiB0byB0aGUgd2FyLiBBbmQgd2hlbiBBdGVpdXMsIG9uZSBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgdGhyZWF0ZW5lZCB0byBvcHBvc2UgaGlzIGxlYXZpbmcgdGhlIGNpdHksIGFuZCBhIGxhcmdlIHBhcnR5IGFyb3NlIHdoaWNoIHdhcyBkaXNwbGVhc2VkIHRoYXQgYW55b25lIHNob3VsZCBnbyBvdXQgdG8gd2FnZSB3YXIgb24gbWVuIHdobyBoYWQgZG9uZSB0aGUgc3RhdGUgbm8gd3JvbmcsIGJ1dCB3ZXJlIGluIHRyZWF0eSByZWxhdGlvbnMgd2l0aCBpdCwgdGhlbiBDcmFzc3VzLCBpbiBmZWFyLCBiZWdnZWQgUG9tcGV5IHRvIGNvbWUgdG8gaGlzIGFpZCBhbmQgam9pbiBpbiBlc2NvcnRpbmcgaGltIG91dCBvZiB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBncmVhdCB3YXMgUG9tcGV5J3MgcmVwdXRhdGlvbiB3aXRoIHRoZSBjcm93ZC4gQW5kIG5vdywgd2hlbiB0aGUgbXVsdGl0dWRlIGRyYXduIHVwIHRvIHJlc2lzdCB0aGUgcGFzc2FnZSBvZiBDcmFzc3VzLCBhbmQgdG8gYWJ1c2UgaGltLCBzYXcgUG9tcGV5J3MgYmVhbWluZyBjb3VudGVuYW5jZSBpbiBmcm9udCBvZiBoaW0sIHRoZXkgd2VyZSBtb2xsaWZpZWQsIGFuZCBnYXZlIHdheSBiZWZvcmUgdGhlbSBpbiBzaWxlbmNlLiBCdXQgQXRlaXVzLCBvbiBtZWV0aW5nIENyYXNzdXMsIGF0IGZpcnN0IHRyaWVkIHRvIHN0b3AgaGltIHdpdGggd29yZHMsIGFuZCBwcm90ZXN0ZWQgYWdhaW5zdCBoaXMgYWR2YW5jZTsgdGhlbiBoZSBiYWRlIGhpcyBhdHRlbmRhbnQgc2VpemUgdGhlIHBlcnNvbiBvZiBDcmFzc3VzIGFuZCBkZXRhaW4gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBvdGhlciB0cmlidW5lcyB3b3VsZCBub3QgcGVybWl0IHRoaXMsIHRoZSBhdHRlbmRhbnQgcmVsZWFzZWQgQ3Jhc3N1cywgYnV0IEF0ZWl1cyByYW4gb24gYWhlYWQgdG8gdGhlIGNpdHkgZ2F0ZSwgcGxhY2VkIHRoZXJlIGEgYmxhemluZyBicmF6aWVyLCBhbmQgd2hlbiBDcmFzc3VzIGNhbWUgdXAsIGNhc3QgaW5jZW5zZSBhbmQgbGliYXRpb25zIHVwb24gaXQsIGFuZCBpbnZva2VkIGN1cnNlcyB3aGljaCB3ZXJlIGRyZWFkZnVsIGFuZCB0ZXJyaWZ5aW5nIGluIHRoZW1zZWx2ZXMsIGFuZCB3ZXJlIHJlaW5mb3JjZWQgYnkgc3VuZHJ5IHN0cmFuZ2UgYW5kIGRyZWFkZnVsIGdvZHMgd2hvbSBoZSBzdW1tb25lZCBhbmQgY2FsbGVkIGJ5IG5hbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgc2F5IHRoYXQgdGhlc2UgbXlzdGVyaW91cyBhbmQgYW5jaWVudCBjdXJzZXMgaGF2ZSBzdWNoIHBvd2VyIHRoYXQgbm8gb25lIGludm9sdmVkIGluIHRoZW0gZXZlciBlc2NhcGVzLCBhbmQgbWlzZm9ydHVuZSBmYWxscyBhbHNvIHVwb24gdGhlIG9uZSB3aG8gdXR0ZXJzIHRoZW0sIHdoZXJlZm9yZSB0aGV5IGFyZSBub3QgZW1wbG95ZWQgYXQgcmFuZG9tIG5vciBieSBtYW55LiBBbmQgYWNjb3JkaW5nbHkgYXQgdGhpcyB0aW1lIHRoZXkgZm91bmQgZmF1bHQgd2l0aCBBdGVpdXMgYmVjYXVzZSBpdCB3YXMgZm9yIHRoZSBjaXR5J3Mgc2FrZSB0aGF0IGhlIHdhcyBhbmdlcmVkIGF0IENyYXNzdXMsIGFuZCB5ZXQgaGUgaGFkIGludm9sdmVkIHRoZSBjaXR5IGluIGN1cnNlcyB3aGljaCBhd2FrZW5lZCBtdWNoIHN1cGVyc3RpdGlvdXMgdGVycm9yLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ3Jhc3N1cyBjYW1lIHRvIEJydW5kaXNpdW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTQgQi5DLjwvbm90ZT4gQW5kIHRob3VnaCB0aGUgc2VhIHdhcyBzdGlsbCByb3VnaCB3aXRoIHdpbnRyeSBzdG9ybXMsIGhlIHdvdWxkIG5vdCB3YWl0LCBidXQgcHV0IG91dCwgYW5kIHNvIGxvc3QgYSBncmVhdCBudW1iZXIgb2YgaGlzIHZlc3NlbHMuIFdpdGggd2hhdCB3YXMgbGVmdCBvZiBoaXMgZm9yY2VzLCBob3dldmVyLCBoZSBodXJyaWVkIG9uIGJ5IGxhbmQgdGhyb3VnaCBHYWxhdGlhLiBBbmQgZmluZGluZyB0aGF0IEtpbmcgRGVpb3RhcnVzLCB3aG8gd2FzIG5vdyBhIHZlcnkgb2xkIG1hbiwgd2FzIGZvdW5kaW5nIGEgbmV3IGNpdHksIGhlIHJhbGxpZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCB5b3UgYXJlIGJlZ2lubmluZyB0byBidWlsZCBhdCB0aGUgdHdlbGZ0aCBob3VyLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR2FsYXRpYW4gbGF1Z2hlZCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgeW91IHlvdXJzZWxmLCBJbXBlcmF0b3IsIGFzIEkgc2VlLCBhcmUgbm90IG1hcmNoaW5nIHZlcnkgZWFybHkgaW4gdGhlIGRheSBhZ2FpbnN0IHRoZSBQYXJ0aGlhbnMuPC9xPiBOb3cgQ3Jhc3N1cyB3YXMgc2l4dHkgeWVhcnMgb2xkIGFuZCBvdmVyLCBhbmQgbG9va2VkIG9sZGVyIHRoYW4gaGlzIHllYXJzLiBPbiBoaXMgYXJyaXZhbCwgdGhpbmdzIHdlbnQgYXQgZmlyc3QgYXMgaGUgaGFkIGhvcGVkLCBmb3IgaGUgZWFzaWx5IGJyaWRnZWQgdGhlIEV1cGhyYXRlcyBhbmQgbGVkIGhpcyBhcm15IGFjcm9zcyBpbiBzYWZldHksIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgbWFueSBjaXRpZXMgaW4gTWVzb3BvdGFtaWEgd2hpY2ggY2FtZSBvdmVyIHRvIGhpbSBvZiB0aGVpciBvd24gYWNjb3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgb25lIG9mIHRoZW0sIG9mIHdoaWNoIEFwb2xsb25pdXMgd2FzIHR5cmFudCwgYSBodW5kcmVkIG9mIGhpcyBzb2xkaWVycyB3ZXJlIHNsYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0MC4xMyI+RGlvIENhc3NpdXMsIHhsLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlcmV1cG9uIGhlIGxlZCB1cCBoaXMgZm9yY2VzIGFnYWluc3QgaXQsIG1hc3RlcmVkIGl0LCBwbHVuZGVyZWQgaXRzIHByb3BlcnR5LCBhbmQgc29sZCBpdHMgaW5oYWJpdGFudHMgaW50byBzbGF2ZXJ5LiBUaGUgY2l0eSB3YXMgY2FsbGVkIFplbm9kb3RpYSBieSB0aGUgR3JlZWtzLiBGb3IgaXRzIGNhcHR1cmUgaGUgYWxsb3dlZCBoaXMgc29sZGllcnMgdG8gc2FsdXRlIGhpbSBhcyBJbXBlcmF0b3IsIHRoZXJlYnkgaW5jdXJyaW5nIG11Y2ggZGlzZ3JhY2UgYW5kIHNob3dpbmcgaGltc2VsZiBvZiBhIHBhbHRyeSBzcGlyaXQgYW5kIHdpdGhvdXQgZ29vZCBob3BlIGZvciB0aGUgZ3JlYXRlciBzdHJ1Z2dsZXMgdGhhdCBsYXkgYmVmb3JlIGhpbSwgc2luY2UgaGUgd2FzIHNvIGRlbGlnaHRlZCB3aXRoIGEgdHJpZmxpbmcgYWNxdWlzaXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGZ1cm5pc2hpbmcgdGhlIGNpdGllcyB3aGljaCBoYWQgY29tZSBvdmVyIHRvIGhpcyBzaWRlIHdpdGggZ2Fycmlzb25zLCB3aGljaCBhbW91bnRlZCBpbiBhbGwgdG8gc2V2ZW4gdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIGEgdGhvdXNhbmQgaG9yc2VtZW4sIGhlIGhpbXNlbGYgd2l0aGRyZXcgdG8gdGFrZSB1cCB3aW50ZXIgcXVhcnRlcnMgaW4gU3lyaWEsIGFuZCB0byBhd2FpdCB0aGVyZSBoaXMgc29uLCB3aG8gd2FzIGNvbWluZyBmcm9tIENhZXNhciBpbiBHYXVsLCBkZWNvcmF0ZWQgd2l0aCB0aGUgaW5zaWduaWEgb2YgaGlzIGRlZWRzIG9mIHZhbG91ciwgYW5kIGxlYWRpbmcgYSB0aG91c2FuZCBwaWNrZWQgaG9yc2VtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENyYXNzdXMgY2FtZSB0byBCcnVuZGlzaXVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTQgQi5DLjwvbm90ZT4gQW5kIHRob3VnaCB0aGUgc2VhIHdhcyBzdGlsbCByb3VnaCB3aXRoIHdpbnRyeSBzdG9ybXMsIGhlIHdvdWxkIG5vdCB3YWl0LCBidXQgcHV0IG91dCwgYW5kIHNvIGxvc3QgYSBncmVhdCBudW1iZXIgb2YgaGlzIHZlc3NlbHMuIFdpdGggd2hhdCB3YXMgbGVmdCBvZiBoaXMgZm9yY2VzLCBob3dldmVyLCBoZSBodXJyaWVkIG9uIGJ5IGxhbmQgdGhyb3VnaCBHYWxhdGlhLiBBbmQgZmluZGluZyB0aGF0IEtpbmcgRGVpb3RhcnVzLCB3aG8gd2FzIG5vdyBhIHZlcnkgb2xkIG1hbiwgd2FzIGZvdW5kaW5nIGEgbmV3IGNpdHksIGhlIHJhbGxpZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIEtpbmcsIHlvdSBhcmUgYmVnaW5uaW5nIHRvIGJ1aWxkIGF0IHRoZSB0d2VsZnRoIGhvdXIuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYWxhdGlhbiBsYXVnaGVkIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHlvdSB5b3Vyc2VsZiwgSW1wZXJhdG9yLCBhcyBJIHNlZSwgYXJlIG5vdCBtYXJjaGluZyB2ZXJ5IGVhcmx5IGluIHRoZSBkYXkgYWdhaW5zdCB0aGUgUGFydGhpYW5zLjwvcT4gTm93IENyYXNzdXMgd2FzIHNpeHR5IHllYXJzIG9sZCBhbmQgb3ZlciwgYW5kIGxvb2tlZCBvbGRlciB0aGFuIGhpcyB5ZWFycy4gT24gaGlzIGFycml2YWwsIHRoaW5ncyB3ZW50IGF0IGZpcnN0IGFzIGhlIGhhZCBob3BlZCwgZm9yIGhlIGVhc2lseSBicmlkZ2VkIHRoZSBFdXBocmF0ZXMgYW5kIGxlZCBoaXMgYXJteSBhY3Jvc3MgaW4gc2FmZXR5LCBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIG1hbnkgY2l0aWVzIGluIE1lc29wb3RhbWlhIHdoaWNoIGNhbWUgb3ZlciB0byBoaW0gb2YgdGhlaXIgb3duIGFjY29yZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBvbmUgb2YgdGhlbSwgb2Ygd2hpY2ggQXBvbGxvbml1cyB3YXMgdHlyYW50LCBhIGh1bmRyZWQgb2YgaGlzIHNvbGRpZXJzIHdlcmUgc2xhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0MC4xMyI+RGlvIENhc3NpdXMsIHhsLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlcmV1cG9uIGhlIGxlZCB1cCBoaXMgZm9yY2VzIGFnYWluc3QgaXQsIG1hc3RlcmVkIGl0LCBwbHVuZGVyZWQgaXRzIHByb3BlcnR5LCBhbmQgc29sZCBpdHMgaW5oYWJpdGFudHMgaW50byBzbGF2ZXJ5LiBUaGUgY2l0eSB3YXMgY2FsbGVkIFplbm9kb3RpYSBieSB0aGUgR3JlZWtzLiBGb3IgaXRzIGNhcHR1cmUgaGUgYWxsb3dlZCBoaXMgc29sZGllcnMgdG8gc2FsdXRlIGhpbSBhcyBJbXBlcmF0b3IsIHRoZXJlYnkgaW5jdXJyaW5nIG11Y2ggZGlzZ3JhY2UgYW5kIHNob3dpbmcgaGltc2VsZiBvZiBhIHBhbHRyeSBzcGlyaXQgYW5kIHdpdGhvdXQgZ29vZCBob3BlIGZvciB0aGUgZ3JlYXRlciBzdHJ1Z2dsZXMgdGhhdCBsYXkgYmVmb3JlIGhpbSwgc2luY2UgaGUgd2FzIHNvIGRlbGlnaHRlZCB3aXRoIGEgdHJpZmxpbmcgYWNxdWlzaXRpb24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0MC4xMyI+RGlvIENhc3NpdXMsIHhsLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGZ1cm5pc2hpbmcgdGhlIGNpdGllcyB3aGljaCBoYWQgY29tZSBvdmVyIHRvIGhpcyBzaWRlIHdpdGggZ2Fycmlzb25zLCB3aGljaCBhbW91bnRlZCBpbiBhbGwgdG8gc2V2ZW4gdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIGEgdGhvdXNhbmQgaG9yc2VtZW4sIGhlIGhpbXNlbGYgd2l0aGRyZXcgdG8gdGFrZSB1cCB3aW50ZXIgcXVhcnRlcnMgaW4gU3lyaWEsIGFuZCB0byBhd2FpdCB0aGVyZSBoaXMgc29uLCB3aG8gd2FzIGNvbWluZyBmcm9tIENhZXNhciBpbiBHYXVsLCBkZWNvcmF0ZWQgd2l0aCB0aGUgaW5zaWduaWEgb2YgaGlzIGRlZWRzIG9mIHZhbG91ciwgYW5kIGxlYWRpbmcgYSB0aG91c2FuZCBwaWNrZWQgaG9yc2VtZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpcyB3YXMgdGhvdWdodCB0byBiZSB0aGUgZmlyc3QgYmx1bmRlciB3aGljaCBDcmFzc3VzIGNvbW1pdHRlZCzigJRhZnRlciB0aGUgZXhwZWRpdGlvbiBpdHNlbGYsIHdoaWNoIHdhcyB0aGUgZ3JlYXRlc3Qgb2YgYWxsIGhpcyBibHVuZGVycyzigJRiZWNhdXNlLCB3aGVuIGhlIHNob3VsZCBoYXZlIGFkdmFuY2VkIGFuZCBjb21lIGludG8gdG91Y2ggd2l0aCBCYWJ5bG9uIGFuZCBTZWxldWNpYSwgY2l0aWVzIGFsd2F5cyBob3N0aWxlIHRvIHRoZSBQYXJ0aGlhbnMsIGhlIGdhdmUgaGlzIGVuZW1pZXMgdGltZSBmb3IgcHJlcGFyYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWdhaW4sIGZhdWx0IHdhcyBmb3VuZCB3aXRoIGhpbSBiZWNhdXNlIGhpcyBzb2pvdXJuIGluIFN5cmlhIHdhcyBkZXZvdGVkIHRvIG1lcmNlbmFyeSByYXRoZXIgdGhhbiBtaWxpdGFyeSBwdXJwb3Nlcy4gRm9yIGhlIG1hZGUgbm8gZXN0aW1hdGUgb2YgdGhlIG51bWJlciBvZiBoaXMgdHJvb3BzLCBhbmQgaW5zdGl0dXRlZCBubyBhdGhsZXRpYyBjb250ZXN0cyBmb3IgdGhlbSwgYnV0IHJlY2tvbmVkIHVwIHRoZSByZXZlbnVlcyBvZiBjaXRpZXMsIGFuZCBzcGVudCBtYW55IGRheXMgd2VpZ2hpbmcgZXhhY3RseSB0aGUgdHJlYXN1cmVzIG9mIHRoZSBnb2RkZXNzIGluIEhpZXJhcG9saXMsIGFuZCBwcmVzY3JpYmVkIHF1b3RhcyBvZiBzb2xkaWVycyBmb3IgZGlzdHJpY3RzIGFuZCBkeW5hc3RzIHRvIGZ1cm5pc2gsIG9ubHkgdG8gcmVtaXQgdGhlIHByZXNjcmlwdGlvbiB3aGVuIG1vbmV5IHdhcyBvZmZlcmVkIGhpbSwgdGhlcmVieSBsb3NpbmcgdGhlaXIgcmVzcGVjdCBhbmQgd2lubmluZyB0aGVpciBjb250ZW1wdC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBmaXJzdCB3YXJuaW5nIHNpZ24gY2FtZSB0byBoaW0gZnJvbSB0aGlzIHZlcnkgZ29kZGVzcywgd2hvbSBzb21lIGNhbGwgVmVudXMsIG90aGVycyBKdW5vLCB3aGlsZSBvdGhlcnMgc3RpbGwgcmVnYXJkIGhlciBhcyB0aGUgbmF0dXJhbCBjYXVzZSB3aGljaCBzdXBwbGllcyBmcm9tIG1vaXN0dXJlIHRoZSBiZWdpbm5pbmdzIGFuZCBzZWVkcyBvZiBldmVyeXRoaW5nLCBhbmQgcG9pbnRzIG91dCB0byBtYW5raW5kIHRoZSBzb3VyY2Ugb2YgYWxsIGJsZXNzaW5ncy4gRm9yIGFzIHRoZXkgd2VyZSBsZWF2aW5nIGhlciB0ZW1wbGUsIGZpcnN0IHRoZSB5b3V0aGZ1bCBDcmFzc3VzIHN0dW1ibGVkIGFuZCBmZWxsIGF0IHRoZSBnYXRlLCBhbmQgdGhlbiBoaXMgZmF0aGVyIGZlbGwgb3ZlciBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFnYWluLCBmYXVsdCB3YXMgZm91bmQgd2l0aCBoaW0gYmVjYXVzZSBoaXMgc29qb3VybiBpbiBTeXJpYSB3YXMgZGV2b3RlZCB0byBtZXJjZW5hcnkgcmF0aGVyIHRoYW4gbWlsaXRhcnkgcHVycG9zZXMuIEZvciBoZSBtYWRlIG5vIGVzdGltYXRlIG9mIHRoZSBudW1iZXIgb2YgaGlzIHRyb29wcywgYW5kIGluc3RpdHV0ZWQgbm8gYXRobGV0aWMgY29udGVzdHMgZm9yIHRoZW0sIGJ1dCByZWNrb25lZCB1cCB0aGUgcmV2ZW51ZXMgb2YgY2l0aWVzLCBhbmQgc3BlbnQgbWFueSBkYXlzIHdlaWdoaW5nIGV4YWN0bHkgdGhlIHRyZWFzdXJlcyBvZiB0aGUgZ29kZGVzcyBpbiBIaWVyYXBvbGlzLCBhbmQgcHJlc2NyaWJlZCBxdW90YXMgb2Ygc29sZGllcnMgZm9yIGRpc3RyaWN0cyBhbmQgZHluYXN0cyB0byBmdXJuaXNoLCBvbmx5IHRvIHJlbWl0IHRoZSBwcmVzY3JpcHRpb24gd2hlbiBtb25leSB3YXMgb2ZmZXJlZCBoaW0sIHRoZXJlYnkgbG9zaW5nIHRoZWlyIHJlc3BlY3QgYW5kIHdpbm5pbmcgdGhlaXIgY29udGVtcHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgZmlyc3Qgd2FybmluZyBzaWduIGNhbWUgdG8gaGltIGZyb20gdGhpcyB2ZXJ5IGdvZGRlc3MsIHdob20gc29tZSBjYWxsIFZlbnVzLCBvdGhlcnMgSnVubywgd2hpbGUgb3RoZXJzIHN0aWxsIHJlZ2FyZCBoZXIgYXMgdGhlIG5hdHVyYWwgY2F1c2Ugd2hpY2ggc3VwcGxpZXMgZnJvbSBtb2lzdHVyZSB0aGUgYmVnaW5uaW5ncyBhbmQgc2VlZHMgb2YgZXZlcnl0aGluZywgYW5kIHBvaW50cyBvdXQgdG8gbWFua2luZCB0aGUgc291cmNlIG9mIGFsbCBibGVzc2luZ3MuIEZvciBhcyB0aGV5IHdlcmUgbGVhdmluZyBoZXIgdGVtcGxlLCBmaXJzdCB0aGUgeW91dGhmdWwgQ3Jhc3N1cyBzdHVtYmxlZCBhbmQgZmVsbCBhdCB0aGUgZ2F0ZSwgYW5kIHRoZW4gaGlzIGZhdGhlciBmZWxsIG92ZXIgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5ObyBzb29uZXIgaGFkIGhlIGJlZ3VuIHRvIGFzc2VtYmxlIGhpcyBmb3JjZXMgZnJvbSB0aGVpciB3aW50ZXIgcXVhcnRlcnMgdGhhbiBlbnZveXMgY2FtZSB0byBoaW0gZnJvbSBBcnNhY2VzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gc3Vic2VxdWVudCBwYXNzYWdlcyBjYWxsZWQgSHlyb2Rlcy48L25vdGU+IHdpdGggYSB3b25kZXJmdWxseSBicmllZiBtZXNzYWdlLiBUaGV5IHNhaWQgdGhhdCBpZiB0aGUgYXJteSBoYWQgYmVlbiBzZW50IG91dCBieSB0aGUgUm9tYW4gcGVvcGxlLCBpdCBtZWFudCB3YXIgd2l0aG91dCB0cnVjZSBhbmQgd2l0aG91dCB0cmVhdHk7IGJ1dCBpZiBpdCB3YXMgYWdhaW5zdCB0aGUgd2lzaGVzIG9mIGhpcyBjb3VudHJ5LCBhcyB0aGV5IHdlcmUgaW5mb3JtZWQsIGFuZCBmb3IgaGlzIG93biBwcml2YXRlIGdhaW4gdGhhdCBDcmFzc3VzIGhhZCBjb21lIHVwIGluIGFybXMgYWdhaW5zdCB0aGUgUGFydGhpYW5zIGFuZCBvY2N1cGllZCB0aGVpciB0ZXJyaXRvcnksIHRoZW4gQXJzYWNlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHN1YnNlcXVlbnQgcGFzc2FnZXMgY2FsbGVkIEh5cm9kZXMuPC9ub3RlPiB3b3VsZCBhY3Qgd2l0aCBtb2RlcmF0aW9uLCB3b3VsZCB0YWtlIHBpdHkgb24gdGhlIG9sZCBhZ2Ugb2YgQ3Jhc3N1cywgYW5kIHJlbGVhc2UgdG8gdGhlIFJvbWFucyB0aGUgbWVuIHdob20gaGUgaGFkIHVuZGVyIHdhdGNoIGFuZCB3YXJkIHJhdGhlciB0aGFuIHdhdGNoaW5nIG92ZXIgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGlzIENyYXNzdXMgYm9hc3RmdWxseSByZXBsaWVkIHRoYXQgaGUgd291bGQgZ2l2ZSBoaXMgYW5zd2VyIGluIFNlbGV1Y2lhLCB3aGVyZXVwb24gdGhlIGVsZGVzdCBvZiB0aGUgZW52b3lzLCBWYWdpc2VzLCBidXJzdCBvdXQgbGF1Z2hpbmcgYW5kIHNhaWQsIHBvaW50aW5nIHRvIHRoZSBwYWxtIG9mIGhpcyB1cHR1cm5lZCBoYW5kOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gQ3Jhc3N1cywgaGFpciB3aWxsIGdyb3cgdGhlcmUgYmVmb3JlIHRob3Ugc2hhbHQgc2VlIFNlbGV1Y2lhLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQwLjE2Ij5EaW8gQ2Fzc2l1cywgeGwuIDE2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm8gc29vbmVyIGhhZCBoZSBiZWd1biB0byBhc3NlbWJsZSBoaXMgZm9yY2VzIGZyb20gdGhlaXIgd2ludGVyIHF1YXJ0ZXJzIHRoYW4gZW52b3lzIGNhbWUgdG8gaGltIGZyb20gQXJzYWNlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gc3Vic2VxdWVudCBwYXNzYWdlcyBjYWxsZWQgSHlyb2Rlcy48L25vdGU+IHdpdGggYSB3b25kZXJmdWxseSBicmllZiBtZXNzYWdlLiBUaGV5IHNhaWQgdGhhdCBpZiB0aGUgYXJteSBoYWQgYmVlbiBzZW50IG91dCBieSB0aGUgUm9tYW4gcGVvcGxlLCBpdCBtZWFudCB3YXIgd2l0aG91dCB0cnVjZSBhbmQgd2l0aG91dCB0cmVhdHk7IGJ1dCBpZiBpdCB3YXMgYWdhaW5zdCB0aGUgd2lzaGVzIG9mIGhpcyBjb3VudHJ5LCBhcyB0aGV5IHdlcmUgaW5mb3JtZWQsIGFuZCBmb3IgaGlzIG93biBwcml2YXRlIGdhaW4gdGhhdCBDcmFzc3VzIGhhZCBjb21lIHVwIGluIGFybXMgYWdhaW5zdCB0aGUgUGFydGhpYW5zIGFuZCBvY2N1cGllZCB0aGVpciB0ZXJyaXRvcnksIHRoZW4gQXJzYWNlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gc3Vic2VxdWVudCBwYXNzYWdlcyBjYWxsZWQgSHlyb2Rlcy48L25vdGU+IHdvdWxkIGFjdCB3aXRoIG1vZGVyYXRpb24sIHdvdWxkIHRha2UgcGl0eSBvbiB0aGUgb2xkIGFnZSBvZiBDcmFzc3VzLCBhbmQgcmVsZWFzZSB0byB0aGUgUm9tYW5zIHRoZSBtZW4gd2hvbSBoZSBoYWQgdW5kZXIgd2F0Y2ggYW5kIHdhcmQgcmF0aGVyIHRoYW4gd2F0Y2hpbmcgb3ZlciBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgQ3Jhc3N1cyBib2FzdGZ1bGx5IHJlcGxpZWQgdGhhdCBoZSB3b3VsZCBnaXZlIGhpcyBhbnN3ZXIgaW4gU2VsZXVjaWEsIHdoZXJldXBvbiB0aGUgZWxkZXN0IG9mIHRoZSBlbnZveXMsIFZhZ2lzZXMsIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgc2FpZCwgcG9pbnRpbmcgdG8gdGhlIHBhbG0gb2YgaGlzIHVwdHVybmVkIGhhbmQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENyYXNzdXMsIGhhaXIgd2lsbCBncm93IHRoZXJlIGJlZm9yZSB0aG91IHNoYWx0IHNlZSBTZWxldWNpYS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDAuMTYiPkRpbyBDYXNzaXVzLCB4bC4gMTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDAuMTYiPkRpbyBDYXNzaXVzLCB4bC4gMTYuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBlbWJhc3N5LCBhY2NvcmRpbmdseSwgcm9kZSBhd2F5IHRvIEtpbmcgSHlyb2RlcywgdG8gdGVsbCBoaW0gdGhlcmUgbXVzdCBiZSB3YXIuIEJ1dCBmcm9tIHRoZSBjaXRpZXMgb2YgTWVzb3BvdGFtaWEgaW4gd2hpY2ggdGhlIFJvbWFucyBoYWQgZ2Fycmlzb25zLCBjZXJ0YWluIG1lbiBtYWRlIHRoZWlyIGVzY2FwZSBhdCBncmVhdCBoYXphcmQgYW5kIGJyb3VnaHQgdGlkaW5ncyBvZiBzZXJpb3VzIGltcG9ydC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhhZCBiZWVuIGV5ZXdpdG5lc3NlcyBib3RoIG9mIHRoZSBudW1iZXJzIG9mIHRoZSBlbmVteSBhbmQgb2YgdGhlaXIgbW9kZSBvZiB3YXJmYXJlIHdoZW4gdGhleSBhdHRhY2tlZCB0aGVpciBjaXRpZXMsIGFuZCwgYXMgaXMgdXN1YWwsIHRoZXkgZXhhZ2dlcmF0ZWQgYWxsIHRoZSB0ZXJyb3JzIG9mIHRoZWlyIHJlcG9ydC4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIHRoZSBtZW4gcHVyc3VlZCw8L3E+IHRoZXkgZGVjbGFyZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlcmUgd2FzIG5vIGVzY2FwaW5nIHRoZW0sIGFuZCB3aGVuIHRoZXkgZmxlZCwgdGhlcmUgd2FzIG5vIHRha2luZyB0aGVtOyBhbmQgc3RyYW5nZSBtaXNzaWxlcyBhcmUgdGhlIHByZWN1cnNvcnMgb2YgdGhlaXIgYXBwZWFyYW5jZSwgd2hpY2ggcGllcmNlIHRocm91Z2ggZXZlcnkgb2JzdGFjbGUgYmVmb3JlIG9uZSBzZWVzIHdobyBzZW50IHRoZW07IGFuZCBhcyBmb3IgdGhlIGFybW91ciBvZiB0aGVpciBtYWlsLWNsYWQgaG9yc2VtZW4sIHNvbWUgb2YgaXQgaXMgbWFkZSB0byBmb3JjZSBpdHMgd2F5IHRocm91Z2ggZXZlcnl0aGluZywgYW5kIHNvbWUgb2YgaXQgdG8gZ2l2ZSB3YXkgdG8gbm90aGluZy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc29sZGllcnMgaGVhcmQgdGhpcywgdGhlaXIgY291cmFnZSBlYmJlZCBhd2F5LiBGb3IgdGhleSBoYWQgYmVlbiBmdWxseSBwZXJzdWFkZWQgdGhhdCB0aGUgUGFydGhpYW5zIHdlcmUgbm90IGRpZmZlcmVudCBhdCBhbGwgZnJvbSB0aGUgQXJtZW5pYW5zIG9yIGV2ZW4gdGhlIENhcHBhZG9jaWFucywgd2hvbSBMdWN1bGx1cyBoYWQgcm9iYmVkIGFuZCBwbHVuZGVyZWQgdGlsbCBoZSB3YXMgd2Vhcnkgb2YgaXQsIGFuZCB0aGV5IGhhZCB0aG91Z2h0IHRoYXQgdGhlIG1vc3QgZGlmZmljdWx0IHBhcnQgb2YgdGhlIHdhciB3b3VsZCBiZSB0aGUgbG9uZyBqb3VybmV5IGFuZCB0aGUgcHVyc3VpdCBvZiBtZW4gd2hvIHdvdWxkIG5vdCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzOyBidXQgbm93LCBjb250cmFyeSB0byB0aGVpciBob3BlcywgdGhleSB3ZXJlIGxlZCB0byBleHBlY3QgYSBzdHJ1Z2dsZSBhbmQgZ3JlYXQgcGVyaWwuIFRoZXJlZm9yZSBzb21lIG9mIHRoZSBvZmZpY2VycyB0aG91Z2h0IHRoYXQgQ3Jhc3N1cyBvdWdodCB0byBjYWxsIGEgaGFsdCBhbmQgcmVjb25zaWRlciB0aGUgd2hvbGUgdW5kZXJ0YWtpbmcuIEFtb25nIHRoZXNlIHdhcyBDYXNzaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhaXVzIENhc3N1cyBMb25naW51cywgYWZ0ZXJ3YXJkcyBvbmUgb2YgdGhlIGFzc2Fzc2lucyBvZiBDYWVzYXIuPC9ub3RlPiB0aGUgcXVhZXN0b3IuIFRoZSBzZWVycywgYWxzbywgcXVpZXRseSBsZXQgaXQgYmVjb21lIGtub3duIHRoYXQgdGhlIG9tZW5zIGZvciBDcmFzc3VzIHdoaWNoIGNhbWUgZnJvbSB0aGVpciBzYWNyaWZpY2VzIHdlcmUgYWx3YXlzIGJhZCBhbmQgaW5hdXNwaWNpb3VzLiBCdXQgQ3Jhc3N1cyBwYWlkIG5vIGhlZWQgdG8gdGhlbSwgbm9yIHRvIHRob3NlIHdobyBhZHZpc2VkIGFueXRoaW5nIGVsc2UgZXhjZXB0IHRvIHByZXNzIGZvcndhcmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkIGJlZW4gZXlld2l0bmVzc2VzIGJvdGggb2YgdGhlIG51bWJlcnMgb2YgdGhlIGVuZW15IGFuZCBvZiB0aGVpciBtb2RlIG9mIHdhcmZhcmUgd2hlbiB0aGV5IGF0dGFja2VkIHRoZWlyIGNpdGllcywgYW5kLCBhcyBpcyB1c3VhbCwgdGhleSBleGFnZ2VyYXRlZCBhbGwgdGhlIHRlcnJvcnMgb2YgdGhlaXIgcmVwb3J0LiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiB0aGUgbWVuIHB1cnN1ZWQsPC9xPiB0aGV5IGRlY2xhcmVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlcmUgd2FzIG5vIGVzY2FwaW5nIHRoZW0sIGFuZCB3aGVuIHRoZXkgZmxlZCwgdGhlcmUgd2FzIG5vIHRha2luZyB0aGVtOyBhbmQgc3RyYW5nZSBtaXNzaWxlcyBhcmUgdGhlIHByZWN1cnNvcnMgb2YgdGhlaXIgYXBwZWFyYW5jZSwgd2hpY2ggcGllcmNlIHRocm91Z2ggZXZlcnkgb2JzdGFjbGUgYmVmb3JlIG9uZSBzZWVzIHdobyBzZW50IHRoZW07IGFuZCBhcyBmb3IgdGhlIGFybW91ciBvZiB0aGVpciBtYWlsLWNsYWQgaG9yc2VtZW4sIHNvbWUgb2YgaXQgaXMgbWFkZSB0byBmb3JjZSBpdHMgd2F5IHRocm91Z2ggZXZlcnl0aGluZywgYW5kIHNvbWUgb2YgaXQgdG8gZ2l2ZSB3YXkgdG8gbm90aGluZy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHNvbGRpZXJzIGhlYXJkIHRoaXMsIHRoZWlyIGNvdXJhZ2UgZWJiZWQgYXdheS4gRm9yIHRoZXkgaGFkIGJlZW4gZnVsbHkgcGVyc3VhZGVkIHRoYXQgdGhlIFBhcnRoaWFucyB3ZXJlIG5vdCBkaWZmZXJlbnQgYXQgYWxsIGZyb20gdGhlIEFybWVuaWFucyBvciBldmVuIHRoZSBDYXBwYWRvY2lhbnMsIHdob20gTHVjdWxsdXMgaGFkIHJvYmJlZCBhbmQgcGx1bmRlcmVkIHRpbGwgaGUgd2FzIHdlYXJ5IG9mIGl0LCBhbmQgdGhleSBoYWQgdGhvdWdodCB0aGF0IHRoZSBtb3N0IGRpZmZpY3VsdCBwYXJ0IG9mIHRoZSB3YXIgd291bGQgYmUgdGhlIGxvbmcgam91cm5leSBhbmQgdGhlIHB1cnN1aXQgb2YgbWVuIHdobyB3b3VsZCBub3QgY29tZSB0byBjbG9zZSBxdWFydGVyczsgYnV0IG5vdywgY29udHJhcnkgdG8gdGhlaXIgaG9wZXMsIHRoZXkgd2VyZSBsZWQgdG8gZXhwZWN0IGEgc3RydWdnbGUgYW5kIGdyZWF0IHBlcmlsLiBUaGVyZWZvcmUgc29tZSBvZiB0aGUgb2ZmaWNlcnMgdGhvdWdodCB0aGF0IENyYXNzdXMgb3VnaHQgdG8gY2FsbCBhIGhhbHQgYW5kIHJlY29uc2lkZXIgdGhlIHdob2xlIHVuZGVydGFraW5nLiBBbW9uZyB0aGVzZSB3YXMgQ2Fzc2l1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhaXVzIENhc3N1cyBMb25naW51cywgYWZ0ZXJ3YXJkcyBvbmUgb2YgdGhlIGFzc2Fzc2lucyBvZiBDYWVzYXIuPC9ub3RlPiB0aGUgcXVhZXN0b3IuIFRoZSBzZWVycywgYWxzbywgcXVpZXRseSBsZXQgaXQgYmVjb21lIGtub3duIHRoYXQgdGhlIG9tZW5zIGZvciBDcmFzc3VzIHdoaWNoIGNhbWUgZnJvbSB0aGVpciBzYWNyaWZpY2VzIHdlcmUgYWx3YXlzIGJhZCBhbmQgaW5hdXNwaWNpb3VzLiBCdXQgQ3Jhc3N1cyBwYWlkIG5vIGhlZWQgdG8gdGhlbSwgbm9yIHRvIHRob3NlIHdobyBhZHZpc2VkIGFueXRoaW5nIGVsc2UgZXhjZXB0IHRvIHByZXNzIGZvcndhcmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBtb3N0IG9mIGFsbCwgQXJ0YWJhemVzIHRoZSBraW5nIG9mIEFybWVuaWEgZ2F2ZSBoaW0gY291cmFnZSwgZm9yIGhlIGNhbWUgdG8gaGlzIGNhbXAgd2l0aCBzaXggdGhvdXNhbmQgaG9yc2VtZW4uIFRoZXNlIHdlcmUgc2FpZCB0byBiZSB0aGUga2luZydzIGd1YXJkcyBhbmQgY291cmllcnM7IGJ1dCBoZSBwcm9taXNlZCB0ZW4gdGhvdXNhbmQgbWFpbC1jbGFkIGhvcnNlbWVuIGJlc2lkZXMsIGFuZCB0aGlydHkgdGhvdXNhbmQgZm9vdG1lbiwgdG8gYmUgbWFpbnRhaW5lZCBhdCBoaXMgb3duIGNvc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB0cmllZCB0byBwZXJzdWFkZSBDcmFzc3VzIHRvIGludmFkZSBQYXJ0aGlhIGJ5IHdheSBvZiBBcm1lbmlhLCBmb3IgdGh1cyBoZSB3b3VsZCBub3Qgb25seSBsZWFkIGhpcyBmb3JjZXMgYWxvbmcgaW4gdGhlIG1pZHN0IG9mIHBsZW50eSwgd2hpY2ggdGhlIGtpbmcgaGltc2VsZiB3b3VsZCBwcm92aWRlLCBidXQgd291bGQgYWxzbyBwcm9jZWVkIHdpdGggc2FmZXR5LCBjb25mcm9udGluZyB0aGUgY2F2YWxyeSBvZiB0aGUgUGFydGhpYW5zLCBpbiB3aGljaCBsYXkgdGhlaXIgc29sZSBzdHJlbmd0aCwgd2l0aCBtYW55IG1vdW50YWlucywgYW5kIGNvbnRpbnVvdXMgY3Jlc3RzLCBhbmQgcmVnaW9ucyB3aGVyZSB0aGUgaG9yc2UgY291bGQgbm90IHdlbGwgc2VydmUuIENyYXNzdXMgd2FzIHRvbGVyYWJseSB3ZWxsIHBsZWFzZWQgd2l0aCB0aGUga2luZydzIHplYWwgYW5kIHdpdGggdGhlIHNwbGVuZGlkIHJlaW5mb3JjZW1lbnRzIHdoaWNoIGhlIG9mZmVyZWQsIGJ1dCBzYWlkIGhlIHNob3VsZCBtYXJjaCB0aHJvdWdoIE1lc29wb3RhbWlhLCB3aGVyZSBoZSBoYWQgbGVmdCBtYW55IGJyYXZlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzLCB0aGUgQXJtZW5pYW4gcm9kZSBhd2F5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG1vc3Qgb2YgYWxsLCBBcnRhYmF6ZXMgdGhlIGtpbmcgb2YgQXJtZW5pYSBnYXZlIGhpbSBjb3VyYWdlLCBmb3IgaGUgY2FtZSB0byBoaXMgY2FtcCB3aXRoIHNpeCB0aG91c2FuZCBob3JzZW1lbi4gVGhlc2Ugd2VyZSBzYWlkIHRvIGJlIHRoZSBraW5nJ3MgZ3VhcmRzIGFuZCBjb3VyaWVyczsgYnV0IGhlIHByb21pc2VkIHRlbiB0aG91c2FuZCBtYWlsLWNsYWQgaG9yc2VtZW4gYmVzaWRlcywgYW5kIHRoaXJ0eSB0aG91c2FuZCBmb290bWVuLCB0byBiZSBtYWludGFpbmVkIGF0IGhpcyBvd24gY29zdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB0cmllZCB0byBwZXJzdWFkZSBDcmFzc3VzIHRvIGludmFkZSBQYXJ0aGlhIGJ5IHdheSBvZiBBcm1lbmlhLCBmb3IgdGh1cyBoZSB3b3VsZCBub3Qgb25seSBsZWFkIGhpcyBmb3JjZXMgYWxvbmcgaW4gdGhlIG1pZHN0IG9mIHBsZW50eSwgd2hpY2ggdGhlIGtpbmcgaGltc2VsZiB3b3VsZCBwcm92aWRlLCBidXQgd291bGQgYWxzbyBwcm9jZWVkIHdpdGggc2FmZXR5LCBjb25mcm9udGluZyB0aGUgY2F2YWxyeSBvZiB0aGUgUGFydGhpYW5zLCBpbiB3aGljaCBsYXkgdGhlaXIgc29sZSBzdHJlbmd0aCwgd2l0aCBtYW55IG1vdW50YWlucywgYW5kIGNvbnRpbnVvdXMgY3Jlc3RzLCBhbmQgcmVnaW9ucyB3aGVyZSB0aGUgaG9yc2UgY291bGQgbm90IHdlbGwgc2VydmUuIENyYXNzdXMgd2FzIHRvbGVyYWJseSB3ZWxsIHBsZWFzZWQgd2l0aCB0aGUga2luZydzIHplYWwgYW5kIHdpdGggdGhlIHNwbGVuZGlkIHJlaW5mb3JjZW1lbnRzIHdoaWNoIGhlIG9mZmVyZWQsIGJ1dCBzYWlkIGhlIHNob3VsZCBtYXJjaCB0aHJvdWdoIE1lc29wb3RhbWlhLCB3aGVyZSBoZSBoYWQgbGVmdCBtYW55IGJyYXZlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgdGhlIEFybWVuaWFuIHJvZGUgYXdheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3csIGFzIENyYXNzdXMgd2FzIHRha2luZyBoaXMgYXJteSBhY3Jvc3MgdGhlIEV1cGhyYXRlcyBhdCBaZXVnbWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHRvd24gaW4gU3lyaWEsIG9uIHRoZSByaWdodCBiYW5rIG9mIHRoZSBFdXBocmF0ZXMsIGRlcml2aW5nIGl0cyBuYW1lIGZyb20gYSBicmlkZ2Ugb2YgYm9hdHMgdGhlcmUgbWFkZSBhY3Jvc3MgdGhlIHJpdmVyLjwvbm90ZT4gbWFueSBleHRyYW9yZGluYXJ5IHBlYWxzIG9mIHRodW5kZXIgY3Jhc2hlZCBhYm91dCB0aGVtLCBhbmQgbWFueSBmbGFzaGVzIG9mIGxpZ2h0bmluZyBhbHNvIGRhcnRlZCBpbiB0aGVpciBmYWNlcywgYW5kIGEgd2luZCwgaGFsZiBtaXN0IGFuZCBoYWxmIGh1cnJpY2FuZSwgZmVsbCB1cG9uIHRoZWlyIHJhZnQsIGJyZWFraW5nIGl0IHVwIGFuZCBzaGF0dGVyaW5nIGl0IGluIG1hbnkgcGxhY2VzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFjZSB3aGVyZSBoZSB3YXMgaW50ZW5kaW5nIHRvIGVuY2FtcCB3YXMgYWxzbyBzbWl0dGVuIGJ5IHR3byB0aHVuZGVyYm9sdHMuIEFuZCBvbmUgb2YgdGhlIGdlbmVyYWwncyBob3JzZXMsIHJpY2hseSBjYXBhcmlzb25lZCwgdmlvbGVudGx5IGRyYWdnZWQgaXRzIGdyb29tIGFsb25nIHdpdGggaXQgaW50byB0aGUgcml2ZXIgYW5kIGRpc2FwcGVhcmVkIGJlbmVhdGggdGhlIHdhdmVzLiBJdCBpcyBzYWlkIGFsc28gdGhhdCB0aGUgZmlyc3QgZWFnbGUgd2hpY2ggd2FzIHJhaXNlZCBhbG9mdCwgZmFjZWQgYWJvdXQgb2YgaXRzIG93biBhY2NvcmQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQwLjE4Ij5EaW8gQ2Fzc2l1cywgeGwuIDE4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgYWxsIHRoaXMsIGl0IGhhcHBlbmVkIHRoYXQgd2hlbiB0aGVpciByYXRpb25zIHdlcmUgZGlzdHJpYnV0ZWQgdG8gdGhlIHNvbGRpZXJzIGFmdGVyIHRoZSBjcm9zc2luZyBvZiB0aGUgcml2ZXIsIGxlbnRpbHMgYW5kIHNhbHQgY2FtZSBmaXJzdCwgd2hpY2ggYXJlIGhlbGQgYnkgdGhlIFJvbWFucyB0byBiZSB0b2tlbnMgb2YgbW91cm5pbmcsIGFuZCBhcmUgc2V0IG91dCBhcyBvZmZlcmluZ3MgdG8gdGhlIGRlYWQuIE1vcmVvdmVyLCBDcmFzc3VzIGhpbXNlbGYsIHdoaWxlIGhhcmFuZ3VpbmcgaGlzIG1lbiwgbGV0IGZhbGwgYSBwaHJhc2Ugd2hpY2ggdGVycmlibHkgY29uZm91bmRlZCB0aGVtLiBIZSBzYWlkLCBuYW1lbHksIHRoYXQgaGUgc2hvdWxkIGRlc3Ryb3kgdGhlIGJyaWRnZSBvdmVyIHRoZSByaXZlciwgdGhhdCBub3Qgb25lIG9mIHRoZW0gbWlnaHQgcmV0dXJuLiBBbmQgYWx0aG91Z2ggaGUgb3VnaHQsIGFzIHNvb24gYXMgaGUgcGVyY2VpdmVkIHRoZSBzdHJhbmdlbmVzcyBvZiBoaXMgZXhwcmVzc2lvbiwgdG8gaGF2ZSByZWNhbGxlZCBpdCBhbmQgbWFkZSBoaXMgbWVhbmluZyBjbGVhciB0byBoaXMgdGltb3JvdXMgaGVhcmVycywgaGUgd2FzIHRvbyBvYnN0aW5hdGUgdG8gZG8gc28uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIGhlIHdhcyBtYWtpbmcgdGhlIGN1c3RvbWFyeSBzYWNyaWZpY2Ugb2YgcHVyaWZpY2F0aW9uIGZvciB0aGUgYXJteSwgYW5kIHRoZSBzZWVyIHBsYWNlZCB0aGUgdmlzY2VyYSBpbiBoaXMgaGFuZHMsIGhlIGxldCB0aGVtIGZhbGwgdG8gdGhlIGdyb3VuZDsgdGhlbiwgc2VlaW5nIHRoYXQgdGhlIGJ5c3RhbmRlcnMgd2VyZSBiZXlvbmQgbWVhc3VyZSBkaXN0cmVzc2VkIGF0IHRoZSBvY2N1cnJlbmNlLCBoZSBzbWlsZWQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VjaCBpcyBvbGQgYWdlOyBidXQgbm8gd2VhcG9uLCB5b3UgbWF5IGJlIHN1cmUsIHNoYWxsIGZhbGwgZnJvbSBpdHMgaGFuZHMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSB0b3duIGluIFN5cmlhLCBvbiB0aGUgcmlnaHQgYmFuayBvZiB0aGUgRXVwaHJhdGVzLCBkZXJpdmluZyBpdHMgbmFtZSBmcm9tIGEgYnJpZGdlIG9mIGJvYXRzIHRoZXJlIG1hZGUgYWNyb3NzIHRoZSByaXZlci48L25vdGU+IG1hbnkgZXh0cmFvcmRpbmFyeSBwZWFscyBvZiB0aHVuZGVyIGNyYXNoZWQgYWJvdXQgdGhlbSwgYW5kIG1hbnkgZmxhc2hlcyBvZiBsaWdodG5pbmcgYWxzbyBkYXJ0ZWQgaW4gdGhlaXIgZmFjZXMsIGFuZCBhIHdpbmQsIGhhbGYgbWlzdCBhbmQgaGFsZiBodXJyaWNhbmUsIGZlbGwgdXBvbiB0aGVpciByYWZ0LCBicmVha2luZyBpdCB1cCBhbmQgc2hhdHRlcmluZyBpdCBpbiBtYW55IHBsYWNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFjZSB3aGVyZSBoZSB3YXMgaW50ZW5kaW5nIHRvIGVuY2FtcCB3YXMgYWxzbyBzbWl0dGVuIGJ5IHR3byB0aHVuZGVyYm9sdHMuIEFuZCBvbmUgb2YgdGhlIGdlbmVyYWwncyBob3JzZXMsIHJpY2hseSBjYXBhcmlzb25lZCwgdmlvbGVudGx5IGRyYWdnZWQgaXRzIGdyb29tIGFsb25nIHdpdGggaXQgaW50byB0aGUgcml2ZXIgYW5kIGRpc2FwcGVhcmVkIGJlbmVhdGggdGhlIHdhdmVzLiBJdCBpcyBzYWlkIGFsc28gdGhhdCB0aGUgZmlyc3QgZWFnbGUgd2hpY2ggd2FzIHJhaXNlZCBhbG9mdCwgZmFjZWQgYWJvdXQgb2YgaXRzIG93biBhY2NvcmQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0MC4xOCI+RGlvIENhc3NpdXMsIHhsLiAxOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDAuMTgiPkRpbyBDYXNzaXVzLCB4bC4gMTguPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgYWxsIHRoaXMsIGl0IGhhcHBlbmVkIHRoYXQgd2hlbiB0aGVpciByYXRpb25zIHdlcmUgZGlzdHJpYnV0ZWQgdG8gdGhlIHNvbGRpZXJzIGFmdGVyIHRoZSBjcm9zc2luZyBvZiB0aGUgcml2ZXIsIGxlbnRpbHMgYW5kIHNhbHQgY2FtZSBmaXJzdCwgd2hpY2ggYXJlIGhlbGQgYnkgdGhlIFJvbWFucyB0byBiZSB0b2tlbnMgb2YgbW91cm5pbmcsIGFuZCBhcmUgc2V0IG91dCBhcyBvZmZlcmluZ3MgdG8gdGhlIGRlYWQuIE1vcmVvdmVyLCBDcmFzc3VzIGhpbXNlbGYsIHdoaWxlIGhhcmFuZ3VpbmcgaGlzIG1lbiwgbGV0IGZhbGwgYSBwaHJhc2Ugd2hpY2ggdGVycmlibHkgY29uZm91bmRlZCB0aGVtLiBIZSBzYWlkLCBuYW1lbHksIHRoYXQgaGUgc2hvdWxkIGRlc3Ryb3kgdGhlIGJyaWRnZSBvdmVyIHRoZSByaXZlciwgdGhhdCBub3Qgb25lIG9mIHRoZW0gbWlnaHQgcmV0dXJuLiBBbmQgYWx0aG91Z2ggaGUgb3VnaHQsIGFzIHNvb24gYXMgaGUgcGVyY2VpdmVkIHRoZSBzdHJhbmdlbmVzcyBvZiBoaXMgZXhwcmVzc2lvbiwgdG8gaGF2ZSByZWNhbGxlZCBpdCBhbmQgbWFkZSBoaXMgbWVhbmluZyBjbGVhciB0byBoaXMgdGltb3JvdXMgaGVhcmVycywgaGUgd2FzIHRvbyBvYnN0aW5hdGUgdG8gZG8gc28uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIGhlIHdhcyBtYWtpbmcgdGhlIGN1c3RvbWFyeSBzYWNyaWZpY2Ugb2YgcHVyaWZpY2F0aW9uIGZvciB0aGUgYXJteSwgYW5kIHRoZSBzZWVyIHBsYWNlZCB0aGUgdmlzY2VyYSBpbiBoaXMgaGFuZHMsIGhlIGxldCB0aGVtIGZhbGwgdG8gdGhlIGdyb3VuZDsgdGhlbiwgc2VlaW5nIHRoYXQgdGhlIGJ5c3RhbmRlcnMgd2VyZSBiZXlvbmQgbWVhc3VyZSBkaXN0cmVzc2VkIGF0IHRoZSBvY2N1cnJlbmNlLCBoZSBzbWlsZWQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdWNoIGlzIG9sZCBhZ2U7IGJ1dCBubyB3ZWFwb24sIHlvdSBtYXkgYmUgc3VyZSwgc2hhbGwgZmFsbCBmcm9tIGl0cyBoYW5kcy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGhlIG1hcmNoZWQgYWxvbmcgdGhlIHJpdmVyIHdpdGggc2V2ZW4gbGVnaW9ucyBvZiBtZW4tYXQtYXJtcywgbmVhcmx5IGZvdXIgdGhvdXNhbmQgaG9yc2VtZW4sIGFuZCBhYm91dCBhcyBtYW55IGxpZ2h0LWFybWVkIHRyb29wcy4gU29tZSBvZiBoaXMgc2NvdXRzIG5vdyBjYW1lIGJhY2sgZnJvbSB0aGVpciBleHBsb3JhdGlvbnMsIGFuZCByZXBvcnRlZCB0aGF0IHRoZSBjb3VudHJ5IHdhcyBkZXN0aXR1dGUgb2YgbWVuLCBidXQgdGhhdCB0aGV5IGhhZCBjb21lIHVwb24gdGhlIHRyYWNrcyBvZiBtYW55IGhvcnNlcyB3aGljaCBoYWQgYXBwYXJlbnRseSB3aGVlbGVkIGFib3V0IGFuZCBmbGVkIGZyb20gcHVyc3VpdC4gV2hlcmVmb3JlIENyYXNzdXMgaGltc2VsZiB3YXMgYWxsIHRoZSBtb3JlIGNvbmZpZGVudCwgYW5kIGhpcyBzb2xkaWVycyB3ZW50IHNvIGZhciBhcyB0byBkZXNwaXNlIHRoZSBQYXJ0aGlhbnMgdXR0ZXJseSwgYmVsaWV2aW5nIHRoYXQgdGhleSB3b3VsZCBub3QgY29tZSB0byBjbG9zZSBxdWFydGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCBuZXZlcnRoZWxlc3MsIENhc3NpdXMgb25jZSBtb3JlIGhhZCBhIGNvbmZlcmVuY2Ugd2l0aCBDcmFzc3VzLCBhbmQgYWR2aXNlZCBoaW0gYWJvdmUgYWxsIHRoaW5ncyB0byByZWN1cGVyYXRlIGhpcyBmb3JjZXMgaW4gb25lIG9mIHRoZSBnYXJyaXNvbmVkIGNpdGllcywgdW50aWwgaGUgc2hvdWxkIGdldCBzb21lIHN1cmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVuZW15OyBidXQgaWYgbm90IHRoaXMsIHRoZW4gdG8gYWR2YW5jZSBhZ2FpbnN0IFNlbGV1Y2lhIGFsb25nIHRoZSByaXZlci4gRm9yIGluIHRoaXMgd2F5IHRoZSB0cmFuc3BvcnRzIHdvdWxkIGtlZXAgdGhlbSBhYnVuZGFudGx5IHN1cHBsaWVkIHdpdGggcHJvdmlzaW9ucyBieSBwdXR0aW5nIGluIGF0IHRoZWlyIHN1Y2Nlc3NpdmUgZW5jYW1wbWVudHMsIGFuZCwgYnkgaGF2aW5nIHRoZSByaXZlciB0byBwcmV2ZW50IHRoZWlyIGJlaW5nIHN1cnJvdW5kZWQsIHRoZXkgd291bGQgYWx3YXlzIGZpZ2h0IHRoZWlyIGVuZW1pZXMgb24gZXZlbiB0ZXJtcyBhbmQgZmFjZSB0byBmYWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgbWFyY2hlZCBhbG9uZyB0aGUgcml2ZXIgd2l0aCBzZXZlbiBsZWdpb25zIG9mIG1lbi1hdC1hcm1zLCBuZWFybHkgZm91ciB0aG91c2FuZCBob3JzZW1lbiwgYW5kIGFib3V0IGFzIG1hbnkgbGlnaHQtYXJtZWQgdHJvb3BzLiBTb21lIG9mIGhpcyBzY291dHMgbm93IGNhbWUgYmFjayBmcm9tIHRoZWlyIGV4cGxvcmF0aW9ucywgYW5kIHJlcG9ydGVkIHRoYXQgdGhlIGNvdW50cnkgd2FzIGRlc3RpdHV0ZSBvZiBtZW4sIGJ1dCB0aGF0IHRoZXkgaGFkIGNvbWUgdXBvbiB0aGUgdHJhY2tzIG9mIG1hbnkgaG9yc2VzIHdoaWNoIGhhZCBhcHBhcmVudGx5IHdoZWVsZWQgYWJvdXQgYW5kIGZsZWQgZnJvbSBwdXJzdWl0LiBXaGVyZWZvcmUgQ3Jhc3N1cyBoaW1zZWxmIHdhcyBhbGwgdGhlIG1vcmUgY29uZmlkZW50LCBhbmQgaGlzIHNvbGRpZXJzIHdlbnQgc28gZmFyIGFzIHRvIGRlc3Bpc2UgdGhlIFBhcnRoaWFucyB1dHRlcmx5LCBiZWxpZXZpbmcgdGhhdCB0aGV5IHdvdWxkIG5vdCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgbmV2ZXJ0aGVsZXNzLCBDYXNzaXVzIG9uY2UgbW9yZSBoYWQgYSBjb25mZXJlbmNlIHdpdGggQ3Jhc3N1cywgYW5kIGFkdmlzZWQgaGltIGFib3ZlIGFsbCB0aGluZ3MgdG8gcmVjdXBlcmF0ZSBoaXMgZm9yY2VzIGluIG9uZSBvZiB0aGUgZ2Fycmlzb25lZCBjaXRpZXMsIHVudGlsIGhlIHNob3VsZCBnZXQgc29tZSBzdXJlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlbmVteTsgYnV0IGlmIG5vdCB0aGlzLCB0aGVuIHRvIGFkdmFuY2UgYWdhaW5zdCBTZWxldWNpYSBhbG9uZyB0aGUgcml2ZXIuIEZvciBpbiB0aGlzIHdheSB0aGUgdHJhbnNwb3J0cyB3b3VsZCBrZWVwIHRoZW0gYWJ1bmRhbnRseSBzdXBwbGllZCB3aXRoIHByb3Zpc2lvbnMgYnkgcHV0dGluZyBpbiBhdCB0aGVpciBzdWNjZXNzaXZlIGVuY2FtcG1lbnRzLCBhbmQsIGJ5IGhhdmluZyB0aGUgcml2ZXIgdG8gcHJldmVudCB0aGVpciBiZWluZyBzdXJyb3VuZGVkLCB0aGV5IHdvdWxkIGFsd2F5cyBmaWdodCB0aGVpciBlbmVtaWVzIG9uIGV2ZW4gdGVybXMgYW5kIGZhY2UgdG8gZmFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ3Jhc3N1cyB3YXMgc3RpbGwgaW52ZXN0aWdhdGluZyBhbmQgY29uc2lkZXJpbmcgdGhlc2UgbWF0dGVycywgdGhlcmUgY2FtZSBhbiBBcmFiIGNoaWVmdGFuLCBBcmlhbW5lcyBieSBuYW1lLCBhIGNyYWZ0eSBhbmQgdHJlYWNoZXJvdXMgbWFuLCBhbmQgb25lIHdobyBwcm92ZWQgdG8gYmUsIG9mIGFsbCB0aGUgbWlzY2hpZWZzIHdoaWNoIGZvcnR1bmUgY29tYmluZWQgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgUm9tYW5zLCB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgY29uc3VtbWF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBvZiB0aGUgc29sZGllcnMgd2hvIGhhZCBzZXJ2ZWQgdW5kZXIgUG9tcGV5IGluIHRoZXNlIHBhcnRzIGtuZXcgdGhhdCB0aGUgZmVsbG93IGhhZCBwcm9maXRlZCBieSB0aGUga2luZG5lc3Mgb2YgdGhhdCBjb21tYW5kZXIgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGEgZnJpZW5kIG9mIFJvbWU7IGJ1dCBub3csIHdpdGggdGhlIGtub3dsZWRnZSBvZiB0aGUgcm95YWwgZ2VuZXJhbHMsIGhlIHRyaWVkIHRvIHdvcmsgaGlzIHdheSBpbnRvIHRoZSBjb25maWRlbmNlIG9mIENyYXNzdXMsIHRvIHNlZSBpZiBoZSBjb3VsZCB0dXJuIGhpbSBhc2lkZSBhcyBmYXIgYXMgcG9zc2libGUgZnJvbSB0aGUgcml2ZXIgYW5kIHRoZSBmb290LWhpbGxzLCBhbmQgYnJpbmcgaGltIGRvd24gaW50byBhIGJvdW5kbGVzcyBwbGFpbiB3aGVyZSBoZSBjb3VsZCBiZSBzdXJyb3VuZGVkLiBGb3Igbm90aGluZyB3YXMgZmFydGhlciBmcm9tIHRoZSB0aG91Z2h0cyBvZiB0aGUgUGFydGhpYW5zIHRoYW4gdG8gYXR0YWNrIHRoZSBSb21hbnMgaW4gZnJvbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBjb21pbmcgdG8gQ3Jhc3N1cywgdGhlIEJhcmJhcmlhbiAoYW5kIGhlIHdhcyBhIHBsYXVzaWJsZSB0YWxrZXIsIHRvbykgbGF1ZGVkIFBvbXBleSBhcyBoaXMgYmVuZWZhY3RvciwgYW5kIGNvbXBsaW1lbnRlZCBDcmFzc3VzIG9uIGhpcyBmb3JjZXMuIEJ1dCB0aGVuIGhlIGNyaXRpY2l6ZWQgaGltIGZvciB3YXN0aW5nIHRpbWUgaW4gZGVsYXlzIGFuZCBwcmVwYXJhdGlvbnMsIGFzIGlmIGl0IHdhcyBhcm1zIHRoYXQgaGUgbmVlZGVkLCBhbmQgbm90IGhhbmRzIGFtaWQgdGhlIHN3aWZ0ZXN0IG9mIGZlZXQgdG8gZm9sbG93IGFmdGVyIG1lbiB3aG8gaGFkIGZvciBzb21lIHRpbWUgYmVlbiB0cnlpbmcgdG8gc25hdGNoIHVwIHRoZWlyIG1vc3QgdmFsdWFibGUgZ29vZHMgYW5kIHNsYXZlcyBhbmQgZmx5IHdpdGggdGhlbSBpbnRvIFNjeXRoaWEgb3IgSHlyY2FuaWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB5b3UgaW50ZW5kIHRvIGZpZ2h0LCB5b3Ugb3VnaHQgdG8gaGFzdGVuIG9uIGJlZm9yZSBhbGwgdGhlIGtpbmcncyBmb3JjZXMgYXJlIGNvbmNlbnRyYXRlZCBhbmQgaGUgaGFzIHJlZ2FpbmVkIGhpcyBjb3VyYWdlOyBzaW5jZSwgZm9yIHRoZSB0aW1lIGJlaW5nLCBTdXJlbmEgYW5kIFNpbGxhY2VzIGhhdmUgYmVlbiB0aHJvd24gZm9yd2FyZCB0byBzdXN0YWluIHlvdXIgcHVyc3VpdCwgYnV0IHRoZSBraW5nIGlzIG5vd2hlcmUgdG8gYmUgc2Vlbi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ3Jhc3N1cyB3YXMgc3RpbGwgaW52ZXN0aWdhdGluZyBhbmQgY29uc2lkZXJpbmcgdGhlc2UgbWF0dGVycywgdGhlcmUgY2FtZSBhbiBBcmFiIGNoaWVmdGFuLCBBcmlhbW5lcyBieSBuYW1lLCBhIGNyYWZ0eSBhbmQgdHJlYWNoZXJvdXMgbWFuLCBhbmQgb25lIHdobyBwcm92ZWQgdG8gYmUsIG9mIGFsbCB0aGUgbWlzY2hpZWZzIHdoaWNoIGZvcnR1bmUgY29tYmluZWQgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgUm9tYW5zLCB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgY29uc3VtbWF0ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlIHNvbGRpZXJzIHdobyBoYWQgc2VydmVkIHVuZGVyIFBvbXBleSBpbiB0aGVzZSBwYXJ0cyBrbmV3IHRoYXQgdGhlIGZlbGxvdyBoYWQgcHJvZml0ZWQgYnkgdGhlIGtpbmRuZXNzIG9mIHRoYXQgY29tbWFuZGVyIGFuZCB3YXMgdGhvdWdodCB0byBiZSBhIGZyaWVuZCBvZiBSb21lOyBidXQgbm93LCB3aXRoIHRoZSBrbm93bGVkZ2Ugb2YgdGhlIHJveWFsIGdlbmVyYWxzLCBoZSB0cmllZCB0byB3b3JrIGhpcyB3YXkgaW50byB0aGUgY29uZmlkZW5jZSBvZiBDcmFzc3VzLCB0byBzZWUgaWYgaGUgY291bGQgdHVybiBoaW0gYXNpZGUgYXMgZmFyIGFzIHBvc3NpYmxlIGZyb20gdGhlIHJpdmVyIGFuZCB0aGUgZm9vdC1oaWxscywgYW5kIGJyaW5nIGhpbSBkb3duIGludG8gYSBib3VuZGxlc3MgcGxhaW4gd2hlcmUgaGUgY291bGQgYmUgc3Vycm91bmRlZC4gRm9yIG5vdGhpbmcgd2FzIGZhcnRoZXIgZnJvbSB0aGUgdGhvdWdodHMgb2YgdGhlIFBhcnRoaWFucyB0aGFuIHRvIGF0dGFjayB0aGUgUm9tYW5zIGluIGZyb250LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBjb21pbmcgdG8gQ3Jhc3N1cywgdGhlIEJhcmJhcmlhbiAoYW5kIGhlIHdhcyBhIHBsYXVzaWJsZSB0YWxrZXIsIHRvbykgbGF1ZGVkIFBvbXBleSBhcyBoaXMgYmVuZWZhY3RvciwgYW5kIGNvbXBsaW1lbnRlZCBDcmFzc3VzIG9uIGhpcyBmb3JjZXMuIEJ1dCB0aGVuIGhlIGNyaXRpY2l6ZWQgaGltIGZvciB3YXN0aW5nIHRpbWUgaW4gZGVsYXlzIGFuZCBwcmVwYXJhdGlvbnMsIGFzIGlmIGl0IHdhcyBhcm1zIHRoYXQgaGUgbmVlZGVkLCBhbmQgbm90IGhhbmRzIGFtaWQgdGhlIHN3aWZ0ZXN0IG9mIGZlZXQgdG8gZm9sbG93IGFmdGVyIG1lbiB3aG8gaGFkIGZvciBzb21lIHRpbWUgYmVlbiB0cnlpbmcgdG8gc25hdGNoIHVwIHRoZWlyIG1vc3QgdmFsdWFibGUgZ29vZHMgYW5kIHNsYXZlcyBhbmQgZmx5IHdpdGggdGhlbSBpbnRvIFNjeXRoaWEgb3IgSHlyY2FuaWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB5ZXQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgeW91IGludGVuZCB0byBmaWdodCwgeW91IG91Z2h0IHRvIGhhc3RlbiBvbiBiZWZvcmUgYWxsIHRoZSBraW5nJ3MgZm9yY2VzIGFyZSBjb25jZW50cmF0ZWQgYW5kIGhlIGhhcyByZWdhaW5lZCBoaXMgY291cmFnZTsgc2luY2UsIGZvciB0aGUgdGltZSBiZWluZywgU3VyZW5hIGFuZCBTaWxsYWNlcyBoYXZlIGJlZW4gdGhyb3duIGZvcndhcmQgdG8gc3VzdGFpbiB5b3VyIHB1cnN1aXQsIGJ1dCB0aGUga2luZyBpcyBub3doZXJlIHRvIGJlIHNlZW4uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhpcyB3YXMgYWxsIGZhbHNlLiBGb3IgSHlyb2RlcyBoYWQgcHJvbXB0bHkgZGl2aWRlZCBoaXMgZm9yY2VzIGludG8gdHdvIHBhcnRzIGFuZCB3YXMgaGltc2VsZiBkZXZhc3RhdGluZyBBcm1lbmlhIHRvIHB1bmlzaCBBcnRhdmFzZGVzLCB3aGlsZSBoZSBkZXNwYXRjaGVkIFN1cmVuYSB0byBtZWV0IHRoZSBSb21hbnMuIEFuZCB0aGlzIHdhcyBub3QgYmVjYXVzZSBoZSBkZXNwaXNlZCB0aGVtLCBhcyBzb21lIHNheSwgZm9yIGhlIGNvdWxkIG5vdCBjb25zaXN0ZW50bHkgZGlzZGFpbiBDcmFzc3VzIGFzIGFuIGFudGFnb25pc3QsIGEgbWFuIHdobyB3YXMgZm9yZW1vc3Qgb2YgdGhlIFJvbWFucywgYW5kIHdhZ2Ugd2FyIG9uIEFydGF2YXNkZXMsIGF0dGFja2luZyBhbmQgdGFraW5nIHRoZSB2aWxsYWdlcyBvZiBBcm1lbmlhOyBvbiB0aGUgY29udHJhcnksIGl0IHNlZW1zIHRoYXQgaGUgd2FzIGluIGdyZWF0IGZlYXIgb2YgdGhlIGRhbmdlciB3aGljaCB0aHJlYXRlbmVkLCBhbmQgdGhlcmVmb3JlIGhlbGQgaGltc2VsZiBpbiByZXNlcnZlIGFuZCB3YXRjaGVkIGNsb3NlbHkgdGhlIGNvbWluZyBldmVudCwgd2hpbGUgaGUgc2VudCBTdXJlbmEgZm9yd2FyZCB0byBtYWtlIHRyaWFsIG9mIHRoZSBlbmVteSBpbiBiYXR0bGUgYW5kIHRvIGRpc3RyYWN0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgU3VyZW5hIGFuIG9yZGluYXJ5IG1hbiBhdCBhbGwsIGJ1dCBpbiB3ZWFsdGgsIGJpcnRoLCBhbmQgY29uc2lkZXJhdGlvbiwgaGUgc3Rvb2QgbmV4dCB0aGUga2luZywgd2hpbGUgaW4gdmFsb3VyIGFuZCBhYmlsaXR5IGhlIHdhcyB0aGUgZm9yZW1vc3QgUGFydGhpYW4gb2YgaGlzIHRpbWUsIGJlc2lkZXMgaGF2aW5nIG5vIGVxdWFsIGluIHN0YXR1cmUgYW5kIHBlcnNvbmFsIGJlYXV0eS4gSGUgdXNlZCB0byB0cmF2ZWwgb24gcHJpdmF0ZSBidXNpbmVzcyB3aXRoIGEgYmFnZ2FnZSB0cmFpbiBvZiBhIHRob3VzYW5kIGNhbWVscywgYW5kIHdhcyBmb2xsb3dlZCBieSB0d28gaHVuZHJlZCB3YWdnb25zIGZvciBoaXMgY29uY3ViaW5lcywgd2hpbGUgYSB0aG91c2FuZCBtYWlsLWNsYWQgaG9yc2VtZW4gYW5kIGEgc3RpbGwgZ3JlYXRlciBudW1iZXIgb2YgbGlnaHQtYXJtZWQgY2F2YWxyeSBzZXJ2ZWQgYXMgaGlzIGVzY29ydDsgYW5kIGhlIGhhZCBhbHRvZ2V0aGVyLCBhcyBob3JzZW1lbiwgdmFzc2FscywgYW5kIHNsYXZlcywgbm8gZmV3ZXIgdGhhbiB0ZW4gdGhvdXNhbmQgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaGUgZW5qb3llZCB0aGUgYW5jaWVudCBhbmQgaGVyZWRpdGFyeSBwcml2aWxlZ2Ugb2YgYmVpbmcgZmlyc3QgdG8gc2V0IHRoZSBjcm93biB1cG9uIHRoZSBoZWFkIG9mIHRoZSBQYXJ0aGlhbiBraW5nOyBhbmQgd2hlbiB0aGlzIHZlcnkgSHlyb2RlcyB3YXMgZHJpdmVuIG91dCBvZiBQYXJ0aGlhLCBoZSByZXN0b3JlZCBoaW0gdG8gaGlzIHRocm9uZSwgYW5kIGNhcHR1cmVkIGZvciBoaW0gU2VsZXVjaWEgdGhlIEdyZWF0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlbGV1Y2lhIG9uIHRoZSBUaWdyaXMsIGJ1aWx0IGJ5IFNlbGV1Y3VzIE5pY2F0b3IuPC9ub3RlPiBoYXZpbmcgYmVlbiB0aGUgZmlyc3QgdG8gbW91bnQgaXRzIHdhbGxzLCBhbWlkIGhhdmluZyByb3V0ZWQgd2l0aCBoaXMgb3duIGhhbmQgaGlzIG9wcG9uZW50cy4gQW5kIHRob3VnaCBhdCB0aGlzIHRpbWUgaGUgd2FzIG5vdCB5ZXQgdGhpcnR5IHllYXJzIG9mIGFnZSwgaGUgaGFkIHRoZSBoaWdoZXN0IHJlcHV0YXRpb24gZm9yIHBydWRlbmNlIGFuZCBzYWdhY2l0eSwgYW5kIGl0IHdhcyBlc3BlY2lhbGx5IGJ5IG1lYW5zIG9mIHRoZXNlIHF1YWxpdGllcyB0aGF0IGhlIGFsc28gYnJvdWdodCBDcmFzc3VzIHRvIHJ1aW4sIHdobywgYXQgZmlyc3QgYnkgcmVhc29uIG9mIGhpcyBib2xkbmVzcyBhbmQgY29uY2VpdCwgYW5kIHRoZW4gaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGZlYXJzIGFuZCBjYWxhbWl0aWVzLCB3YXMgYW4gZWFzeSB2aWN0aW0gb2YgZGVjZWl0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGlzIHdhcyBhbGwgZmFsc2UuIEZvciBIeXJvZGVzIGhhZCBwcm9tcHRseSBkaXZpZGVkIGhpcyBmb3JjZXMgaW50byB0d28gcGFydHMgYW5kIHdhcyBoaW1zZWxmIGRldmFzdGF0aW5nIEFybWVuaWEgdG8gcHVuaXNoIEFydGF2YXNkZXMsIHdoaWxlIGhlIGRlc3BhdGNoZWQgU3VyZW5hIHRvIG1lZXQgdGhlIFJvbWFucy4gQW5kIHRoaXMgd2FzIG5vdCBiZWNhdXNlIGhlIGRlc3Bpc2VkIHRoZW0sIGFzIHNvbWUgc2F5LCBmb3IgaGUgY291bGQgbm90IGNvbnNpc3RlbnRseSBkaXNkYWluIENyYXNzdXMgYXMgYW4gYW50YWdvbmlzdCwgYSBtYW4gd2hvIHdhcyBmb3JlbW9zdCBvZiB0aGUgUm9tYW5zLCBhbmQgd2FnZSB3YXIgb24gQXJ0YXZhc2RlcywgYXR0YWNraW5nIGFuZCB0YWtpbmcgdGhlIHZpbGxhZ2VzIG9mIEFybWVuaWE7IG9uIHRoZSBjb250cmFyeSwgaXQgc2VlbXMgdGhhdCBoZSB3YXMgaW4gZ3JlYXQgZmVhciBvZiB0aGUgZGFuZ2VyIHdoaWNoIHRocmVhdGVuZWQsIGFuZCB0aGVyZWZvcmUgaGVsZCBoaW1zZWxmIGluIHJlc2VydmUgYW5kIHdhdGNoZWQgY2xvc2VseSB0aGUgY29taW5nIGV2ZW50LCB3aGlsZSBoZSBzZW50IFN1cmVuYSBmb3J3YXJkIHRvIG1ha2UgdHJpYWwgb2YgdGhlIGVuZW15IGluIGJhdHRsZSBhbmQgdG8gZGlzdHJhY3QgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vciB3YXMgU3VyZW5hIGFuIG9yZGluYXJ5IG1hbiBhdCBhbGwsIGJ1dCBpbiB3ZWFsdGgsIGJpcnRoLCBhbmQgY29uc2lkZXJhdGlvbiwgaGUgc3Rvb2QgbmV4dCB0aGUga2luZywgd2hpbGUgaW4gdmFsb3VyIGFuZCBhYmlsaXR5IGhlIHdhcyB0aGUgZm9yZW1vc3QgUGFydGhpYW4gb2YgaGlzIHRpbWUsIGJlc2lkZXMgaGF2aW5nIG5vIGVxdWFsIGluIHN0YXR1cmUgYW5kIHBlcnNvbmFsIGJlYXV0eS4gSGUgdXNlZCB0byB0cmF2ZWwgb24gcHJpdmF0ZSBidXNpbmVzcyB3aXRoIGEgYmFnZ2FnZSB0cmFpbiBvZiBhIHRob3VzYW5kIGNhbWVscywgYW5kIHdhcyBmb2xsb3dlZCBieSB0d28gaHVuZHJlZCB3YWdnb25zIGZvciBoaXMgY29uY3ViaW5lcywgd2hpbGUgYSB0aG91c2FuZCBtYWlsLWNsYWQgaG9yc2VtZW4gYW5kIGEgc3RpbGwgZ3JlYXRlciBudW1iZXIgb2YgbGlnaHQtYXJtZWQgY2F2YWxyeSBzZXJ2ZWQgYXMgaGlzIGVzY29ydDsgYW5kIGhlIGhhZCBhbHRvZ2V0aGVyLCBhcyBob3JzZW1lbiwgdmFzc2FscywgYW5kIHNsYXZlcywgbm8gZmV3ZXIgdGhhbiB0ZW4gdGhvdXNhbmQgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSBlbmpveWVkIHRoZSBhbmNpZW50IGFuZCBoZXJlZGl0YXJ5IHByaXZpbGVnZSBvZiBiZWluZyBmaXJzdCB0byBzZXQgdGhlIGNyb3duIHVwb24gdGhlIGhlYWQgb2YgdGhlIFBhcnRoaWFuIGtpbmc7IGFuZCB3aGVuIHRoaXMgdmVyeSBIeXJvZGVzIHdhcyBkcml2ZW4gb3V0IG9mIFBhcnRoaWEsIGhlIHJlc3RvcmVkIGhpbSB0byBoaXMgdGhyb25lLCBhbmQgY2FwdHVyZWQgZm9yIGhpbSBTZWxldWNpYSB0aGUgR3JlYXQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWxldWNpYSBvbiB0aGUgVGlncmlzLCBidWlsdCBieSBTZWxldWN1cyBOaWNhdG9yLjwvbm90ZT4gaGF2aW5nIGJlZW4gdGhlIGZpcnN0IHRvIG1vdW50IGl0cyB3YWxscywgYW1pZCBoYXZpbmcgcm91dGVkIHdpdGggaGlzIG93biBoYW5kIGhpcyBvcHBvbmVudHMuIEFuZCB0aG91Z2ggYXQgdGhpcyB0aW1lIGhlIHdhcyBub3QgeWV0IHRoaXJ0eSB5ZWFycyBvZiBhZ2UsIGhlIGhhZCB0aGUgaGlnaGVzdCByZXB1dGF0aW9uIGZvciBwcnVkZW5jZSBhbmQgc2FnYWNpdHksIGFuZCBpdCB3YXMgZXNwZWNpYWxseSBieSBtZWFucyBvZiB0aGVzZSBxdWFsaXRpZXMgdGhhdCBoZSBhbHNvIGJyb3VnaHQgQ3Jhc3N1cyB0byBydWluLCB3aG8sIGF0IGZpcnN0IGJ5IHJlYXNvbiBvZiBoaXMgYm9sZG5lc3MgYW5kIGNvbmNlaXQsIGFuZCB0aGVuIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBmZWFycyBhbmQgY2FsYW1pdGllcywgd2FzIGFuIGVhc3kgdmljdGltIG9mIGRlY2VpdHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgYWNjb3JkaW5nbHksIGFmdGVyIHRoZSBCYXJiYXJpYW5zIGhhZCBwZXJzdWFkZWQgQ3Jhc3N1cywgaGUgZHJldyBoaW0gYXdheSBmcm9tIHRoZSByaXZlciBhbmQgbGVkIGhpbSB0aHJvdWdoIHRoZSBtaWRzdCBvZiB0aGUgcGxhaW5zLCBieSBhIHdheSB0aGF0IHdhcyBzdWl0YWJsZSBhbmQgZWFzeSBhdCBmaXJzdCwgYnV0IHNvb24gYmVjYW1lIHRyb3VibGVzb21lIHdoZW4gZGVlcCBzYW5kIHN1Y2NlZWRlZCwgYW5kIHBsYWlucyB3aGljaCBoYWQgbm8gdHJlZXMsIG5vIHdhdGVyLCBhbmQgbm8gbGltaXQgYW55d2hlcmUgd2hpY2ggdGhlIGV5ZSBjb3VsZCByZWFjaCwgc28gdGhhdCBub3Qgb25seSBkaWQgdGhpcnN0IGFuZCB0aGUgZGlmZmljdWx0aWVzIG9mIHRoZSBtYXJjaCBleGhhdXN0IHRoZSBtZW4sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIHdoYXRldmVyIG1ldCB0aGVpciBnYXplIGZpbGxlZCB0aGVtIHdpdGggYW4gb2JzdGluYXRlIGRlamVjdGlvbi4gRm9yIHRoZXkgc2F3IG5vIHBsYW50LCBubyBzdHJlYW0sIG5vIHByb2plY3Rpb24gb2Ygc2xvcGluZyBoaWxsLCBhbmQgbm8gZ3Jvd2luZyBncmFzcywgYnV0IG9ubHkgc2VhLWxpa2UgYmlsbG93cyBvZiBpbm51bWVyYWJsZSBkZXNlcnQgc2FuZC1oZWFwcyBlbnZlbG9waW5nIHRoZSBhcm15LiBUaGlzIG9mIGl0c2VsZiB3YXMgZW5vdWdoIHRvIGluZHVjZSBzdXNwaWNpb24gb2YgdHJlYWNoZXJ5LCBhbmQgc29vbiBtZXNzZW5nZXJzIGNhbWUgZnJvbSBBcnRhdmFzZGVzIHRoZSBBcm1lbmlhbiBkZWNsYXJpbmcgdGhhdCBsaW5lIHdhcyBpbnZvbHZlZCBpbiBhIGdyZWF0IHdhciB3aXRoIEh5cm9kZXMsIHdobyBoYWQgYXR0YWNrZWQgaGltIHdpdGggYW4gb3ZlcndoZWxtaW5nIGZvcmNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgY291bGQgbm90IHRoZXJlZm9yZSBzZW5kIENyYXNzdXMgYWlkLCBidXQgYWR2aXNlZCBoaW0gYWJvdmUgYWxsIHRoaW5ncyB0byB0dXJuIGhpcyBjb3Vyc2UgdGhpdGhlciwgam9pbiB0aGUgQXJtZW5pYW5zLCBhbmQgZmlnaHQgdGhlIGlzc3VlIG91dCB3aXRoIEh5cm9kZXM7IGJ1dCBpZiBub3QgdGhpcywgdGhlbiB0byBtYXJjaCBhbmQgZW5jYW1wIGFsd2F5cyB3aGVyZSBtb3VudGFpbnMgd2VyZSBuZWFyIGFuZCBjYXZhbHJ5IGNvdWxkIG5vdCBvcGVyYXRlLiBDcmFzc3VzIHNlbnQgbm8gcmVwbHkgaW4gd3JpdGluZywgYnV0IGFuc3dlcmVkIGF0IG9uY2UgaW4gcmFnZSBhbmQgcGVydmVyc2l0eSB0aGF0IGZvciB0aGUgcHJlc2VudCBoZSBoYWQgbm8gdGltZSB0byB3YXN0ZSBvbiB0aGUgQXJtZW5pYW5zLCBidXQgdGhhdCBhdCBhbm90aGVyIHRpbWUgaGUgd291bGQgY29tZSBhbmQgcHVuaXNoIEFydGF2YXNkZXMgZm9yIGhpcyB0cmVhY2hlcnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBhY2NvcmRpbmdseSwgYWZ0ZXIgdGhlIEJhcmJhcmlhbnMgaGFkIHBlcnN1YWRlZCBDcmFzc3VzLCBoZSBkcmV3IGhpbSBhd2F5IGZyb20gdGhlIHJpdmVyIGFuZCBsZWQgaGltIHRocm91Z2ggdGhlIG1pZHN0IG9mIHRoZSBwbGFpbnMsIGJ5IGEgd2F5IHRoYXQgd2FzIHN1aXRhYmxlIGFuZCBlYXN5IGF0IGZpcnN0LCBidXQgc29vbiBiZWNhbWUgdHJvdWJsZXNvbWUgd2hlbiBkZWVwIHNhbmQgc3VjY2VlZGVkLCBhbmQgcGxhaW5zIHdoaWNoIGhhZCBubyB0cmVlcywgbm8gd2F0ZXIsIGFuZCBubyBsaW1pdCBhbnl3aGVyZSB3aGljaCB0aGUgZXllIGNvdWxkIHJlYWNoLCBzbyB0aGF0IG5vdCBvbmx5IGRpZCB0aGlyc3QgYW5kIHRoZSBkaWZmaWN1bHRpZXMgb2YgdGhlIG1hcmNoIGV4aGF1c3QgdGhlIG1lbiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIHdoYXRldmVyIG1ldCB0aGVpciBnYXplIGZpbGxlZCB0aGVtIHdpdGggYW4gb2JzdGluYXRlIGRlamVjdGlvbi4gRm9yIHRoZXkgc2F3IG5vIHBsYW50LCBubyBzdHJlYW0sIG5vIHByb2plY3Rpb24gb2Ygc2xvcGluZyBoaWxsLCBhbmQgbm8gZ3Jvd2luZyBncmFzcywgYnV0IG9ubHkgc2VhLWxpa2UgYmlsbG93cyBvZiBpbm51bWVyYWJsZSBkZXNlcnQgc2FuZC1oZWFwcyBlbnZlbG9waW5nIHRoZSBhcm15LiBUaGlzIG9mIGl0c2VsZiB3YXMgZW5vdWdoIHRvIGluZHVjZSBzdXNwaWNpb24gb2YgdHJlYWNoZXJ5LCBhbmQgc29vbiBtZXNzZW5nZXJzIGNhbWUgZnJvbSBBcnRhdmFzZGVzIHRoZSBBcm1lbmlhbiBkZWNsYXJpbmcgdGhhdCBsaW5lIHdhcyBpbnZvbHZlZCBpbiBhIGdyZWF0IHdhciB3aXRoIEh5cm9kZXMsIHdobyBoYWQgYXR0YWNrZWQgaGltIHdpdGggYW4gb3ZlcndoZWxtaW5nIGZvcmNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBjb3VsZCBub3QgdGhlcmVmb3JlIHNlbmQgQ3Jhc3N1cyBhaWQsIGJ1dCBhZHZpc2VkIGhpbSBhYm92ZSBhbGwgdGhpbmdzIHRvIHR1cm4gaGlzIGNvdXJzZSB0aGl0aGVyLCBqb2luIHRoZSBBcm1lbmlhbnMsIGFuZCBmaWdodCB0aGUgaXNzdWUgb3V0IHdpdGggSHlyb2RlczsgYnV0IGlmIG5vdCB0aGlzLCB0aGVuIHRvIG1hcmNoIGFuZCBlbmNhbXAgYWx3YXlzIHdoZXJlIG1vdW50YWlucyB3ZXJlIG5lYXIgYW5kIGNhdmFscnkgY291bGQgbm90IG9wZXJhdGUuIENyYXNzdXMgc2VudCBubyByZXBseSBpbiB3cml0aW5nLCBidXQgYW5zd2VyZWQgYXQgb25jZSBpbiByYWdlIGFuZCBwZXJ2ZXJzaXR5IHRoYXQgZm9yIHRoZSBwcmVzZW50IGhlIGhhZCBubyB0aW1lIHRvIHdhc3RlIG9uIHRoZSBBcm1lbmlhbnMsIGJ1dCB0aGF0IGF0IGFub3RoZXIgdGltZSBoZSB3b3VsZCBjb21lIGFuZCBwdW5pc2ggQXJ0YXZhc2RlcyBmb3IgaGlzIHRyZWFjaGVyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhc3NpdXMgd2FzIG9uY2UgbW9yZSBncmVhdGx5IGRpc3BsZWFzZWQsIGFuZCB0aG91Z2ggaGUgc3RvcHBlZCBhZHZpc2luZyBDcmFzc3VzLCB3aG8gd2FzIGFuZ3J5IHdpdGggaGltLCBoZSBkaWQgcHJpdmF0ZWx5IGFidXNlIHRoZSBCYXJiYXJpYW4uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmFzZXN0IG9mIG1lbiw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hhdCBldmlsIHNwaXJpdCBicm91Z2h0IHlvdSB0byB1cz8gV2l0aCB3aGF0IGRydWdzIGFuZCBqdWdnbGVyeSBkaWQgeW91IHBlcnN1YWRlIENyYXNzdXMgdG8gcG91ciBoaXMgYXJteSBpbnRvIGEgeWF3bmluZyBhbmQgYWJ5c21hbCBkZXNlcnQgYW5kIGZvbGxvdyBhIHJvdXRlIG1vcmUgZml0IGZvciBhIHJvYmJlciBjaGllZiBvZiBOb21hZHMgdGhhbiBmb3IgYSBSb21hbiBpbXBlcmF0b3I/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgQmFyYmFyaWFuLCB3aG8gd2FzIGEgc3VidGxlIGZlbGxvdywgdHJpZWQgdG8gZW5jb3VyYWdlIHRoZW0gd2l0aCBhbGwgc2VydmlsaXR5LCBhbmQgZXhob3J0ZWQgdGhlbSB0byBlbmR1cmUgeWV0IGEgbGl0dGxlIHdoaWxlLCBhbmQgYXMgaGUgcmFuIGFsb25nIGJ5IHRoZSBzaWRlIG9mIHRoZSBzb2xkaWVycyBhbmQgZ2F2ZSB0aGVtIGhpcyBoZWxwLCBoZSB3b3VsZCBsYXVnaGluZ2x5IGJhbnRlciB0aGVtIGFuZCBzYXk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXMgaXQgdGhyb3VnaCBDYW1wYW5pYSB0aGF0IHlvdSB0aGluayB5b3UgYXJlIG1hcmNoaW5nLCB5ZWFybmluZyBmb3IgaXRzIGZvdW50YWlucyBhbmQgc3RyZWFtcyBhbmQgc2hhZGVzIGFuZCBiYXRocyAodG8gYmUgc3VyZSAhKSBhbmQgdGF2ZXJucz8gQnV0IHJlbWVtYmVyIHRoYXQgeW91IGFyZSB0cmF2ZXJzaW5nIHRoZSBib3JkZXIgbGFuZCBiZXR3ZWVuIEFzc3lyaWEgYW5kIEFyYWJpYS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgQmFyYmFyaWFuIHBsYXllZCB0aGUgdHV0b3Igd2l0aCB0aGUgUm9tYW5zLCBhbmQgcm9kZSBhd2F5IGJlZm9yZSBoaXMgZGVjZWl0IGhhZCBiZWNvbWUgbWFuaWZlc3QsIG5vdCwgaG93ZXZlciwgd2l0aG91dCB0aGUga25vd2xlZGdlIG9mIENyYXNzdXMsIG5heSwgaGUgYWN0dWFsbHkgcGVyc3VhZGVkIGhpbSB0aGF0IGhlIHdhcyBnb2luZyB0byB3b3JrIGluIGhpcyBpbnRlcmVzdHMgYW5kIGNvbmZvdW5kIHRoZSBjb3Vuc2VscyBvZiBoaXMgZW5lbWllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXNzaXVzIHdhcyBvbmNlIG1vcmUgZ3JlYXRseSBkaXNwbGVhc2VkLCBhbmQgdGhvdWdoIGhlIHN0b3BwZWQgYWR2aXNpbmcgQ3Jhc3N1cywgd2hvIHdhcyBhbmdyeSB3aXRoIGhpbSwgaGUgZGlkIHByaXZhdGVseSBhYnVzZSB0aGUgQmFyYmFyaWFuLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmFzZXN0IG9mIG1lbiw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aGF0IGV2aWwgc3Bpcml0IGJyb3VnaHQgeW91IHRvIHVzPyBXaXRoIHdoYXQgZHJ1Z3MgYW5kIGp1Z2dsZXJ5IGRpZCB5b3UgcGVyc3VhZGUgQ3Jhc3N1cyB0byBwb3VyIGhpcyBhcm15IGludG8gYSB5YXduaW5nIGFuZCBhYnlzbWFsIGRlc2VydCBhbmQgZm9sbG93IGEgcm91dGUgbW9yZSBmaXQgZm9yIGEgcm9iYmVyIGNoaWVmIG9mIE5vbWFkcyB0aGFuIGZvciBhIFJvbWFuIGltcGVyYXRvcj88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgQmFyYmFyaWFuLCB3aG8gd2FzIGEgc3VidGxlIGZlbGxvdywgdHJpZWQgdG8gZW5jb3VyYWdlIHRoZW0gd2l0aCBhbGwgc2VydmlsaXR5LCBhbmQgZXhob3J0ZWQgdGhlbSB0byBlbmR1cmUgeWV0IGEgbGl0dGxlIHdoaWxlLCBhbmQgYXMgaGUgcmFuIGFsb25nIGJ5IHRoZSBzaWRlIG9mIHRoZSBzb2xkaWVycyBhbmQgZ2F2ZSB0aGVtIGhpcyBoZWxwLCBoZSB3b3VsZCBsYXVnaGluZ2x5IGJhbnRlciB0aGVtIGFuZCBzYXk6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JcyBpdCB0aHJvdWdoIENhbXBhbmlhIHRoYXQgeW91IHRoaW5rIHlvdSBhcmUgbWFyY2hpbmcsIHllYXJuaW5nIGZvciBpdHMgZm91bnRhaW5zIGFuZCBzdHJlYW1zIGFuZCBzaGFkZXMgYW5kIGJhdGhzICh0byBiZSBzdXJlICEpIGFuZCB0YXZlcm5zPyBCdXQgcmVtZW1iZXIgdGhhdCB5b3UgYXJlIHRyYXZlcnNpbmcgdGhlIGJvcmRlciBsYW5kIGJldHdlZW4gQXNzeXJpYSBhbmQgQXJhYmlhLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlIEJhcmJhcmlhbiBwbGF5ZWQgdGhlIHR1dG9yIHdpdGggdGhlIFJvbWFucywgYW5kIHJvZGUgYXdheSBiZWZvcmUgaGlzIGRlY2VpdCBoYWQgYmVjb21lIG1hbmlmZXN0LCBub3QsIGhvd2V2ZXIsIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiBDcmFzc3VzLCBuYXksIGhlIGFjdHVhbGx5IHBlcnN1YWRlZCBoaW0gdGhhdCBoZSB3YXMgZ29pbmcgdG8gd29yayBpbiBoaXMgaW50ZXJlc3RzIGFuZCBjb25mb3VuZCB0aGUgY291bnNlbHMgb2YgaGlzIGVuZW1pZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBvbiB0aGF0IGRheSBDcmFzc3VzIGRpZCBub3QgbWFrZSBoaXMgYXBwZWFyYW5jZSBpbiBhIHB1cnBsZSByb2JlLCBhcyBpcyB0aGUgY3VzdG9tIHdpdGggUm9tYW4gZ2VuZXJhbHMsIGJ1dCBpbiBhIGJsYWNrIG9uZSwgYW5kIHRoYXQgaGUgY2hhbmdlZCBpdCBhcyBzb29uIGFzIGhlIG5vdGljZWQgaGlzIG1pc3Rha2U7IGFsc28gdGhhdCBzb21lIG9mIHRoZSBzdGFuZGFyZC1iZWFyZXJzIGhhZCBncmVhdCBkaWZmaWN1bHR5IGluIHJhaXNpbmcgdGhlaXIgc3RhbmRhcmRzLCB3aGljaCBzZWVtZWQgdG8gYmUgaW1iZWRkZWQsIGFzIGl0IHdlcmUsIGluIHRoZSBlYXJ0aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q3Jhc3N1cyBtYWRlIGxpZ2h0IG9mIHRoZXNlIHRoaW5ncyBhbWlkIGh1cnJpZWQgb24gdGhlIG1hcmNoLCBjb21wZWxsaW5nIHRoZSBtZW4tYXQtYXJtcyB0byBrZWVwIHVwIHdpdGggdGhlIGNhdmFscnksIHVudGlsIGEgZmV3IG9mIHRob3NlIHdobyBoYWQgYmVlbiBzZW50IG91dCBhcyBzY291dHMgY2FtZSByaWRpbmcgdXAgYW5kIGFubm91bmNlZCB0aGF0IHRoZSByZXN0IG9mIHRoZWlyIG51bWJlciBoYWQgYmVlbiBzbGFpbiBieSB0aGUgZW5lbXksIHRoYXQgdGhleSB0aGVtc2VsdmVzIGhhZCB3aXRoIGRpZmZpY3VsdHkgZXNjYXBlZCwgYW5kIHRoYXQgdGhlaXIgZm9lcyB3ZXJlIGNvbWluZyB1cCB0byBmaWdodCB0aGVtIHdpdGggYSBsYXJnZSBmb3JjZSBhbmQgZ3JlYXQgY29uZmlkZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHdlcmUgZ3JlYXRseSBkaXN0dXJiZWQsIG9mIGNvdXJzZSwgYnV0IENyYXNzdXMgd2FzIGFsdG9nZXRoZXIgZnJpZ2h0ZW5lZCBvdXQgb2YgaGlzIHNlbnNlcywgYW5kIGJlZ2FuIHRvIGRyYXcgdXAgaGlzIGZvcmNlcyBpbiBoYXN0ZSBhbmQgd2l0aCBubyBncmVhdCBjb25zaXN0ZW5jeS4gQXQgZmlyc3QsIGFzIENhc3NpdXMgcmVjb21tZW5kZWQsIGhlIGV4dGVuZGVkIHRoZSBsaW5lIG9mIGhpcyBtZW4tYXQtYXJtcyBhcyBmYXIgYXMgcG9zc2libGUgYWxvbmcgdGhlIHBsYWluLCB3aXRoIGxpdHRsZSBkZXB0aCwgdG8gcHJldmVudCB0aGUgZW5lbXkgZnJvbSBzdXJyb3VuZGluZyB0aGVtLCBhbmQgZGl2aWRlZCBhbGwgaGlzIGNhdmFscnkgYmV0d2VlbiB0aGUgdHdvIHdpbmdzLiBUaGVuIGhlIGNoYW5nZWQgaGlzIG1pbmQgYW5kIGNvbmNlbnRyYXRlZCBoaXMgbWVuLCBmb3JtaW5nIHRoZW0gaW4gYSBob2xsb3cgc3F1YXJlIG9mIGZvdXIgZnJvbnRzLCB3aXRoIHR3ZWx2ZSBjb2hvcnRzIG9uIGVhY2ggc2lkZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBlYWNoIGNvaG9ydCBoZSBwbGFjZWQgYSBzcXVhZHJvbiBvZiBob3JzZSwgdGhhdCBubyBwYXJ0IG9mIHRoZSBsaW5lIG1pZ2h0IGxhY2sgY2F2YWxyeSBzdXBwb3J0LCBidXQgdGhhdCB0aGUgd2hvbGUgYm9keSBtaWdodCBhZHZhbmNlIHRvIHRoZSBhdHRhY2sgd2l0aCBlcXVhbCBwcm90ZWN0aW9uIGV2ZXJ5d2hlcmUuIEhlIGdhdmUgb25lIG9mIHRoZSB3aW5ncyB0byBDYXNzaXVzLCBhbmQgb25lIHRvIHRoZSB5b3VuZyBDcmFzc3VzLCBhbmQgdG9vayBoaXMgb3duIHBvc2l0aW9uIGluIHRoZSBjZW50cmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0IG9uIHRoYXQgZGF5IENyYXNzdXMgZGlkIG5vdCBtYWtlIGhpcyBhcHBlYXJhbmNlIGluIGEgcHVycGxlIHJvYmUsIGFzIGlzIHRoZSBjdXN0b20gd2l0aCBSb21hbiBnZW5lcmFscywgYnV0IGluIGEgYmxhY2sgb25lLCBhbmQgdGhhdCBoZSBjaGFuZ2VkIGl0IGFzIHNvb24gYXMgaGUgbm90aWNlZCBoaXMgbWlzdGFrZTsgYWxzbyB0aGF0IHNvbWUgb2YgdGhlIHN0YW5kYXJkLWJlYXJlcnMgaGFkIGdyZWF0IGRpZmZpY3VsdHkgaW4gcmFpc2luZyB0aGVpciBzdGFuZGFyZHMsIHdoaWNoIHNlZW1lZCB0byBiZSBpbWJlZGRlZCwgYXMgaXQgd2VyZSwgaW4gdGhlIGVhcnRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNyYXNzdXMgbWFkZSBsaWdodCBvZiB0aGVzZSB0aGluZ3MgYW1pZCBodXJyaWVkIG9uIHRoZSBtYXJjaCwgY29tcGVsbGluZyB0aGUgbWVuLWF0LWFybXMgdG8ga2VlcCB1cCB3aXRoIHRoZSBjYXZhbHJ5LCB1bnRpbCBhIGZldyBvZiB0aG9zZSB3aG8gaGFkIGJlZW4gc2VudCBvdXQgYXMgc2NvdXRzIGNhbWUgcmlkaW5nIHVwIGFuZCBhbm5vdW5jZWQgdGhhdCB0aGUgcmVzdCBvZiB0aGVpciBudW1iZXIgaGFkIGJlZW4gc2xhaW4gYnkgdGhlIGVuZW15LCB0aGF0IHRoZXkgdGhlbXNlbHZlcyBoYWQgd2l0aCBkaWZmaWN1bHR5IGVzY2FwZWQsIGFuZCB0aGF0IHRoZWlyIGZvZXMgd2VyZSBjb21pbmcgdXAgdG8gZmlnaHQgdGhlbSB3aXRoIGEgbGFyZ2UgZm9yY2UgYW5kIGdyZWF0IGNvbmZpZGVuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB3ZXJlIGdyZWF0bHkgZGlzdHVyYmVkLCBvZiBjb3Vyc2UsIGJ1dCBDcmFzc3VzIHdhcyBhbHRvZ2V0aGVyIGZyaWdodGVuZWQgb3V0IG9mIGhpcyBzZW5zZXMsIGFuZCBiZWdhbiB0byBkcmF3IHVwIGhpcyBmb3JjZXMgaW4gaGFzdGUgYW5kIHdpdGggbm8gZ3JlYXQgY29uc2lzdGVuY3kuIEF0IGZpcnN0LCBhcyBDYXNzaXVzIHJlY29tbWVuZGVkLCBoZSBleHRlbmRlZCB0aGUgbGluZSBvZiBoaXMgbWVuLWF0LWFybXMgYXMgZmFyIGFzIHBvc3NpYmxlIGFsb25nIHRoZSBwbGFpbiwgd2l0aCBsaXR0bGUgZGVwdGgsIHRvIHByZXZlbnQgdGhlIGVuZW15IGZyb20gc3Vycm91bmRpbmcgdGhlbSwgYW5kIGRpdmlkZWQgYWxsIGhpcyBjYXZhbHJ5IGJldHdlZW4gdGhlIHR3byB3aW5ncy4gVGhlbiBoZSBjaGFuZ2VkIGhpcyBtaW5kIGFuZCBjb25jZW50cmF0ZWQgaGlzIG1lbiwgZm9ybWluZyB0aGVtIGluIGEgaG9sbG93IHNxdWFyZSBvZiBmb3VyIGZyb250cywgd2l0aCB0d2VsdmUgY29ob3J0cyBvbiBlYWNoIHNpZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggZWFjaCBjb2hvcnQgaGUgcGxhY2VkIGEgc3F1YWRyb24gb2YgaG9yc2UsIHRoYXQgbm8gcGFydCBvZiB0aGUgbGluZSBtaWdodCBsYWNrIGNhdmFscnkgc3VwcG9ydCwgYnV0IHRoYXQgdGhlIHdob2xlIGJvZHkgbWlnaHQgYWR2YW5jZSB0byB0aGUgYXR0YWNrIHdpdGggZXF1YWwgcHJvdGVjdGlvbiBldmVyeXdoZXJlLiBIZSBnYXZlIG9uZSBvZiB0aGUgd2luZ3MgdG8gQ2Fzc2l1cywgYW5kIG9uZSB0byB0aGUgeW91bmcgQ3Jhc3N1cywgYW5kIHRvb2sgaGlzIG93biBwb3NpdGlvbiBpbiB0aGUgY2VudHJlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFkdmFuY2luZyBpbiB0aGlzIGZvcm1hdGlvbiwgdGhleSBjYW1lIHRvIGEgc3RyZWFtIGNhbGxlZCBCYWxpc3N1cywgd2hpY2ggd2FzIG5vdCBsYXJnZSwgdG8gYmUgc3VyZSwgbm9yIHBsZW50aWZ1bCwgYnV0IGJ5IHRoaXMgdGltZSB0aGUgc29sZGllcnMgd2VyZSBkZWxpZ2h0ZWQgdG8gc2VlIGl0IGluIHRoZSBtaWRzdCBvZiB0aGUgZHJvdWdodCBhbmQgaGVhdCBhbmQgYWZ0ZXIgdGhlaXIgcHJldmlvdXMgdG9pbHNvbWUgbWFyY2ggd2l0aG91dCB3YXRlci4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3N0IG9mIHRoZSBvZmZpY2VycywgYWNjb3JkaW5nbHksIHRob3VnaHQgdGhleSBvdWdodCB0byBiaXZvdWFjIGFuZCBzcGVuZCB0aGUgbmlnaHQgdGhlcmUsIGFuZCBhZnRlciBsZWFybmluZyBhcyBtdWNoIGFzIHRoZXkgY291bGQgb2YgdGhlIG51bWJlciBhbmQgZGlzcG9zaXRpb24gb2YgdGhlIGVuZW15LCB0byBhZHZhbmNlIGFnYWluc3QgdGhlbSBhdCBkYXktYnJlYWsuIEJ1dCBDcmFzc3VzIHdhcyBjYXJyaWVkIGF3YXkgYnkgdGhlIGVhZ2VybmVzcyBvZiBoaXMgc29uIGFuZCB0aGUgY2F2YWxyeSB3aXRoIGhpbSwgd2hvIHVyZ2VkIGhpbSB0byBhZHZhbmNlIGFuZCBnaXZlIGJhdHRsZSwgYW5kIGhlIHRoZXJlZm9yZSBvcmRlcmVkIHRoYXQgdGhlIG1lbiB3aG8gbmVlZGVkIGl0IHNob3VsZCBlYXQgYW5kIGRyaW5rIGFzIHRoZXkgc3Rvb2QgaW4gdGhlIHJhbmtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVmb3JlIHRoZXkgd2VyZSBhbGwgd2VsbCBkb25lIHdpdGggdGhpcywgaGUgbGVkIHRoZW0gb24sIG5vdCBzbG93bHksIG5vciBoYWx0aW5nIGZyb20gdGltZSB0byB0aW1lLCBhcyBpcyB1c3VhbCBvbiB0aGUgd2F5IHRvIGJhdHRsZSwgYnV0IHdpdGggYSBxdWljayBhbmQgc3VzdGFpbmVkIHBhY2UgdW50aWwgdGhlIGVuZW15IGNhbWUgaW4gc2lnaHQsIHdobywgdG8gdGhlIHN1cnByaXNlIG9mIHRoZSBSb21hbnMsIGFwcGVhcmVkIHRvIGJlIG5laXRoZXIgbnVtZXJvdXMgbm9yIGZvcm1pZGFibGUuIEZvciBTdXJlbmEgaGFkIHZlaWxlZCBoaXMgbWFpbiBmb3JjZSBiZWhpbmQgaGlzIGFkdmFuY2UgZ3VhcmQsIGFuZCBjb25jZWFsZWQgdGhlIGdsZWFtIG9mIHRoZWlyIGFybW91ciBieSBvcmRlcmluZyB0aGVtIHRvIGNvdmVyIHRoZW1zZWx2ZXMgd2l0aCByb2JlcyBhbmQgc2tpbnMuIEJ1dCB3aGVuIHRoZXkgd2VyZSBuZWFyIHRoZSBSb21hbnMgYW5kIHRoZSBzaWduYWwgd2FzIHJhaXNlZCBieSB0aGVpciBjb21tYW5kZXIsIGZpcnN0IG9mIGFsbCB0aGV5IGZpbGxlZCB0aGUgcGxhaW4gd2l0aCB0aGUgc291bmQgb2YgYSBkZWVwIGFuZCB0ZXJyaWZ5aW5nIHJvYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUGFydGhpYW5zIGRvIG5vdCBpbmNpdGUgdGhlbXNlbHZlcyB0byBiYXR0bGUgd2l0aCBob3JucyBvciB0cnVtcGV0cywgYnV0IHRoZXkgaGF2ZSBob2xsb3cgZHJ1bXMgb2YgZGlzdGVuZGVkIGhpZGUsIGNvdmVyZWQgd2l0aCBicm9uemUgYmVsbHMsIGFuZCBvbiB0aGVzZSB0aGV5IGJlYXQgYWxsIGF0IG9uY2UgaW4gbWFueSBxdWFydGVycywgYW5kIHRoZSBpbnN0cnVtZW50cyBnaXZlIGZvcnRoIGEgbG93IGFuZCBkaXNtYWwgdG9uZSwgYSBibGVuZCBvZiB3aWxkIGJlYXN0J3Mgcm9hciBhbmQgaGFyc2ggdGh1bmRlciBwZWFsLiBUaGV5IGhhZCByaWdodGx5IGp1ZGdlZCB0aGF0LCBvZiBhbGwgdGhlIHNlbnNlcywgaGVhcmluZyBpcyB0aGUgb25lIG1vc3QgYXB0IHRvIGNvbmZvdW5kIHRoZSBzb3VsLCBzb29uZXN0IHJvdXNlcyBpdHMgZW1vdGlvbnMsIGFuZCBtb3N0IGVmZmVjdGl2ZWx5IHVuc2VhdHMgdGhlIGp1ZGdtZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIG9mZmljZXJzLCBhY2NvcmRpbmdseSwgdGhvdWdodCB0aGV5IG91Z2h0IHRvIGJpdm91YWMgYW5kIHNwZW5kIHRoZSBuaWdodCB0aGVyZSwgYW5kIGFmdGVyIGxlYXJuaW5nIGFzIG11Y2ggYXMgdGhleSBjb3VsZCBvZiB0aGUgbnVtYmVyIGFuZCBkaXNwb3NpdGlvbiBvZiB0aGUgZW5lbXksIHRvIGFkdmFuY2UgYWdhaW5zdCB0aGVtIGF0IGRheS1icmVhay4gQnV0IENyYXNzdXMgd2FzIGNhcnJpZWQgYXdheSBieSB0aGUgZWFnZXJuZXNzIG9mIGhpcyBzb24gYW5kIHRoZSBjYXZhbHJ5IHdpdGggaGltLCB3aG8gdXJnZWQgaGltIHRvIGFkdmFuY2UgYW5kIGdpdmUgYmF0dGxlLCBhbmQgaGUgdGhlcmVmb3JlIG9yZGVyZWQgdGhhdCB0aGUgbWVuIHdobyBuZWVkZWQgaXQgc2hvdWxkIGVhdCBhbmQgZHJpbmsgYXMgdGhleSBzdG9vZCBpbiB0aGUgcmFua3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZWZvcmUgdGhleSB3ZXJlIGFsbCB3ZWxsIGRvbmUgd2l0aCB0aGlzLCBoZSBsZWQgdGhlbSBvbiwgbm90IHNsb3dseSwgbm9yIGhhbHRpbmcgZnJvbSB0aW1lIHRvIHRpbWUsIGFzIGlzIHVzdWFsIG9uIHRoZSB3YXkgdG8gYmF0dGxlLCBidXQgd2l0aCBhIHF1aWNrIGFuZCBzdXN0YWluZWQgcGFjZSB1bnRpbCB0aGUgZW5lbXkgY2FtZSBpbiBzaWdodCwgd2hvLCB0byB0aGUgc3VycHJpc2Ugb2YgdGhlIFJvbWFucywgYXBwZWFyZWQgdG8gYmUgbmVpdGhlciBudW1lcm91cyBub3IgZm9ybWlkYWJsZS4gRm9yIFN1cmVuYSBoYWQgdmVpbGVkIGhpcyBtYWluIGZvcmNlIGJlaGluZCBoaXMgYWR2YW5jZSBndWFyZCwgYW5kIGNvbmNlYWxlZCB0aGUgZ2xlYW0gb2YgdGhlaXIgYXJtb3VyIGJ5IG9yZGVyaW5nIHRoZW0gdG8gY292ZXIgdGhlbXNlbHZlcyB3aXRoIHJvYmVzIGFuZCBza2lucy4gQnV0IHdoZW4gdGhleSB3ZXJlIG5lYXIgdGhlIFJvbWFucyBhbmQgdGhlIHNpZ25hbCB3YXMgcmFpc2VkIGJ5IHRoZWlyIGNvbW1hbmRlciwgZmlyc3Qgb2YgYWxsIHRoZXkgZmlsbGVkIHRoZSBwbGFpbiB3aXRoIHRoZSBzb3VuZCBvZiBhIGRlZXAgYW5kIHRlcnJpZnlpbmcgcm9hci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUGFydGhpYW5zIGRvIG5vdCBpbmNpdGUgdGhlbXNlbHZlcyB0byBiYXR0bGUgd2l0aCBob3JucyBvciB0cnVtcGV0cywgYnV0IHRoZXkgaGF2ZSBob2xsb3cgZHJ1bXMgb2YgZGlzdGVuZGVkIGhpZGUsIGNvdmVyZWQgd2l0aCBicm9uemUgYmVsbHMsIGFuZCBvbiB0aGVzZSB0aGV5IGJlYXQgYWxsIGF0IG9uY2UgaW4gbWFueSBxdWFydGVycywgYW5kIHRoZSBpbnN0cnVtZW50cyBnaXZlIGZvcnRoIGEgbG93IGFuZCBkaXNtYWwgdG9uZSwgYSBibGVuZCBvZiB3aWxkIGJlYXN0J3Mgcm9hciBhbmQgaGFyc2ggdGh1bmRlciBwZWFsLiBUaGV5IGhhZCByaWdodGx5IGp1ZGdlZCB0aGF0LCBvZiBhbGwgdGhlIHNlbnNlcywgaGVhcmluZyBpcyB0aGUgb25lIG1vc3QgYXB0IHRvIGNvbmZvdW5kIHRoZSBzb3VsLCBzb29uZXN0IHJvdXNlcyBpdHMgZW1vdGlvbnMsIGFuZCBtb3N0IGVmZmVjdGl2ZWx5IHVuc2VhdHMgdGhlIGp1ZGdtZW50LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGUgUm9tYW5zIHdlcmUgaW4gY29uc3Rlcm5hdGlvbiBhdCB0aGlzIGRpbiwgc3VkZGVubHkgdGhlaXIgZW5lbWllcyBkcm9wcGVkIHRoZSBjb3ZlcmluZ3Mgb2YgdGhlaXIgYXJtb3VyLCBhbmQgd2VyZSBzZWVuIHRvIGJlIHRoZW1zZWx2ZXMgYmxhemluZyBpbiBoZWxtZXRzIGFuZCBicmVhc3RwbGF0ZXMsIHRoZWlyIE1hcmdpYW5pYW4gc3RlZWwgZ2xpdHRlcmluZyBrZWVuIGFuZCBicmlnaHQsIGFuZCB0aGVpciBob3JzZXMgY2xhZCBpbiBwbGF0ZXMgb2YgYnJvbnplIGFuZCBzdGVlbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3VyZW5hIGhpbXNlbGYgaG93ZXZlciwgd2FzIHRoZSB0YWxsZXN0IGFuZCBmYWlyZXN0IG9mIHRoZW0gYWxsLCBhbHRob3VnaCBoaXMgZWZmZW1pbmF0ZSBiZWF1dHkgZGlkIG5vdCB3ZWxsIGNvcnJlc3BvbmQgdG8gaGlzIHJlcHV0YXRpb24gZm9yIHZhbG91ciwgYnV0IG1lIHdhcyBkcmVzc2VkIG1vcmUgaW4gdGhlIE1lZGlhbiBmYXNoaW9uLCB3aXRoIHBhaW50ZWQgZmFjZSBhbmQgcGFydGVkIGhhaXIsIHdoaWxlIHRoZSByZXN0IG9mIHRoZSBQYXJ0aGlhbnMgc3RpbGwgd29yZSB0aGVpciBoYWlyIGxvbmcgYW5kIGJ1bmNoZWQgb3ZlciB0aGVpciBmb3JlaGVhZHMsIGluIFNjeXRoaWFuIGZhc2hpb24sIHRvIG1ha2UgdGhlbXNlbHZlcyBsb29rIGZvcm1pZGFibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBmaXJzdCB0aGV5IHB1cnBvc2VkIHRvIGNoYXJnZSB1cG9uIHRoZSBSb21hbnMgd2l0aCB0aGVpciBsb25nIHNwZWFycywgYW5kIHRocm93IHRoZWlyIGZyb250IHJhbmtzIGludG8gY29uZnVzaW9uOyBidXQgd2hlbiB0aGV5IHNhdyB0aGUgZGVwdGggb2YgdGhlaXIgZm9ybWF0aW9uLCB3aGVyZSBzaGllbGQgd2FzIGxvY2tlZCB3aXRoIHNoaWVsZCwgYW5kIHRoZSBmaXJtbmVzcyBhbmQgY29tcG9zdXJlIG9mIHRoZSBtZW4sIHRoZXkgZHJldyBiYWNrLCBhbmQgd2hpbGUgc2VlbWluZyB0byBicmVhayB0aGVpciByYW5rcyBhbmQgZGlzcGVyc2UsIHRoZXkgc3Vycm91bmRlZCB0aGUgaG9sbG93IHNxdWFyZSBpbiB3aGljaCB0aGVpciBlbmVteSBzdG9vZCBiZWZvcmUgaGUgd2FzIGF3YXJlIG9mIHRoZSBtYW5ldXZlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQ3Jhc3N1cyBvcmRlcmVkIGhpcyBsaWdodC1hcm1lZCB0cm9vcHMgdG8gbWFrZSBhIGNoYXJnZSwgdGhleSBkaWQgbm90IGFkdmFuY2UgZmFyLCBidXQgZW5jb3VudGVyaW5nIGEgbXVsdGl0dWRlIG9mIGFycm93cywgYWJhbmRvbmVkIHRoZWlyIHVuZGVydGFraW5nIGFuZCByYW4gYmFjayBmb3Igc2hlbHRlciBhbW9uZyB0aGUgbWVuLWF0LWFybXMsIGFtb25nIHdob20gdGhleSBjYXVzZWQgdGhlIGJlZ2lubmluZyBvZiBkaXNvcmRlciBhbmQgZmVhciwgZm9yIHRoZXNlIG5vdyBzYXcgdGhlIHZlbG9jaXR5IGFuZCBmb3JjZSBvZiB0aGUgYXJyb3dzLCB3aGljaCBmcmFjdHVyZWQgYXJtb3VyLCBhbmQgdG9yZSB0aGVpciB3YXkgdGhyb3VnaCBldmVyeSBjb3ZlcmluZyBhbGlrZSwgd2hldGhlciBoYXJkIG9yIHNvZnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhlIFJvbWFucyB3ZXJlIGluIGNvbnN0ZXJuYXRpb24gYXQgdGhpcyBkaW4sIHN1ZGRlbmx5IHRoZWlyIGVuZW1pZXMgZHJvcHBlZCB0aGUgY292ZXJpbmdzIG9mIHRoZWlyIGFybW91ciwgYW5kIHdlcmUgc2VlbiB0byBiZSB0aGVtc2VsdmVzIGJsYXppbmcgaW4gaGVsbWV0cyBhbmQgYnJlYXN0cGxhdGVzLCB0aGVpciBNYXJnaWFuaWFuIHN0ZWVsIGdsaXR0ZXJpbmcga2VlbiBhbmQgYnJpZ2h0LCBhbmQgdGhlaXIgaG9yc2VzIGNsYWQgaW4gcGxhdGVzIG9mIGJyb256ZSBhbmQgc3RlZWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVuYSBoaW1zZWxmIGhvd2V2ZXIsIHdhcyB0aGUgdGFsbGVzdCBhbmQgZmFpcmVzdCBvZiB0aGVtIGFsbCwgYWx0aG91Z2ggaGlzIGVmZmVtaW5hdGUgYmVhdXR5IGRpZCBub3Qgd2VsbCBjb3JyZXNwb25kIHRvIGhpcyByZXB1dGF0aW9uIGZvciB2YWxvdXIsIGJ1dCBtZSB3YXMgZHJlc3NlZCBtb3JlIGluIHRoZSBNZWRpYW4gZmFzaGlvbiwgd2l0aCBwYWludGVkIGZhY2UgYW5kIHBhcnRlZCBoYWlyLCB3aGlsZSB0aGUgcmVzdCBvZiB0aGUgUGFydGhpYW5zIHN0aWxsIHdvcmUgdGhlaXIgaGFpciBsb25nIGFuZCBidW5jaGVkIG92ZXIgdGhlaXIgZm9yZWhlYWRzLCBpbiBTY3l0aGlhbiBmYXNoaW9uLCB0byBtYWtlIHRoZW1zZWx2ZXMgbG9vayBmb3JtaWRhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBmaXJzdCB0aGV5IHB1cnBvc2VkIHRvIGNoYXJnZSB1cG9uIHRoZSBSb21hbnMgd2l0aCB0aGVpciBsb25nIHNwZWFycywgYW5kIHRocm93IHRoZWlyIGZyb250IHJhbmtzIGludG8gY29uZnVzaW9uOyBidXQgd2hlbiB0aGV5IHNhdyB0aGUgZGVwdGggb2YgdGhlaXIgZm9ybWF0aW9uLCB3aGVyZSBzaGllbGQgd2FzIGxvY2tlZCB3aXRoIHNoaWVsZCwgYW5kIHRoZSBmaXJtbmVzcyBhbmQgY29tcG9zdXJlIG9mIHRoZSBtZW4sIHRoZXkgZHJldyBiYWNrLCBhbmQgd2hpbGUgc2VlbWluZyB0byBicmVhayB0aGVpciByYW5rcyBhbmQgZGlzcGVyc2UsIHRoZXkgc3Vycm91bmRlZCB0aGUgaG9sbG93IHNxdWFyZSBpbiB3aGljaCB0aGVpciBlbmVteSBzdG9vZCBiZWZvcmUgaGUgd2FzIGF3YXJlIG9mIHRoZSBtYW5ldXZlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENyYXNzdXMgb3JkZXJlZCBoaXMgbGlnaHQtYXJtZWQgdHJvb3BzIHRvIG1ha2UgYSBjaGFyZ2UsIHRoZXkgZGlkIG5vdCBhZHZhbmNlIGZhciwgYnV0IGVuY291bnRlcmluZyBhIG11bHRpdHVkZSBvZiBhcnJvd3MsIGFiYW5kb25lZCB0aGVpciB1bmRlcnRha2luZyBhbmQgcmFuIGJhY2sgZm9yIHNoZWx0ZXIgYW1vbmcgdGhlIG1lbi1hdC1hcm1zLCBhbW9uZyB3aG9tIHRoZXkgY2F1c2VkIHRoZSBiZWdpbm5pbmcgb2YgZGlzb3JkZXIgYW5kIGZlYXIsIGZvciB0aGVzZSBub3cgc2F3IHRoZSB2ZWxvY2l0eSBhbmQgZm9yY2Ugb2YgdGhlIGFycm93cywgd2hpY2ggZnJhY3R1cmVkIGFybW91ciwgYW5kIHRvcmUgdGhlaXIgd2F5IHRocm91Z2ggZXZlcnkgY292ZXJpbmcgYWxpa2UsIHdoZXRoZXIgaGFyZCBvciBzb2Z0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIFBhcnRoaWFucyBub3cgc3Rvb2QgYXQgbG9uZyBpbnRlcnZhbHMgZnJvbSBvbmUgYW5vdGhlciBhbmQgYmVnYW4gdG8gc2hvb3QgdGhlaXIgYXJyb3dzIGZyb20gYWxsIHNpZGVzIGF0IG9uY2UsIG5vdCB3aXRoIGFueSBhY2N1cmF0ZSBhaW0gKGZvciB0aGUgZGVtaXNlIGZvcm1hdGlvbiBvZiB0aGUgUm9tYW5zIHdvdWxkIG5vdCBzdWZmZXIgYW4gYXJjaGVyIHRvIG1pc3MgaGlzIG1hbiBldmVuIGlmIGhlIHdpc2hlZCBpdCksIGJ1dCBtYWtpbmcgdmlnb3JvdXMgYW5kIHBvd2VyZnVsIHNob3RzIGZyb20gYm93cyB3aGljaCB3ZXJlIGxhcmdlIGFuZCBtaWdodHkgYW5kIGN1cnZlZCBzbyBhcyB0byBkaXNjaGFyZ2UgdGhlaXIgbWlzc2lsZXMgd2l0aCBncmVhdCBmb3JjZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgdGhlIHBsaWdodCBvZiB0aGUgUm9tYW5zIHdhcyBhIGdyaWV2b3VzIG9uZTsgZm9yIGlmIHRoZXkga2VwdCB0aGVpciByYW5rcywgdGhleSB3ZXJlIHdvdW5kZWQgaW4gZ3JlYXQgbnVtYmVycywgYW5kIGlmIHRoZXkgdHJpZWQgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSwgdGhleSB3ZXJlIGp1c3QgYXMgZmFyIGZyb20gZWZmZWN0aW5nIGFueXRoaW5nIGFuZCBzdWZmZXJlZCBqdXN0IGFzIG11Y2guIEZvciB0aGUgUGFydGhpYW5zIHNob3QgYXMgdGhleSBmbGVkLCBhbmQgbmV4dCB0byB0aGUgU2N5dGhpYW5zLCB0aGV5IGRvIHRoaXMgbW9zdCBlZmZlY3RpdmVseTsgYW5kIGl0IGlzIGEgdmVyeSBjbGV2ZXIgdGhpbmcgdG8gc2VlayBzYWZldHkgd2hpbGUgc3RpbGwgZmlnaHRpbmcsIGFuZCB0byB0YWtlIGF3YXkgdGhlIHNoYW1lIG9mIGZsaWdodC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgUGFydGhpYW5zIG5vdyBzdG9vZCBhdCBsb25nIGludGVydmFscyBmcm9tIG9uZSBhbm90aGVyIGFuZCBiZWdhbiB0byBzaG9vdCB0aGVpciBhcnJvd3MgZnJvbSBhbGwgc2lkZXMgYXQgb25jZSwgbm90IHdpdGggYW55IGFjY3VyYXRlIGFpbSAoZm9yIHRoZSBkZW1pc2UgZm9ybWF0aW9uIG9mIHRoZSBSb21hbnMgd291bGQgbm90IHN1ZmZlciBhbiBhcmNoZXIgdG8gbWlzcyBoaXMgbWFuIGV2ZW4gaWYgaGUgd2lzaGVkIGl0KSwgYnV0IG1ha2luZyB2aWdvcm91cyBhbmQgcG93ZXJmdWwgc2hvdHMgZnJvbSBib3dzIHdoaWNoIHdlcmUgbGFyZ2UgYW5kIG1pZ2h0eSBhbmQgY3VydmVkIHNvIGFzIHRvIGRpc2NoYXJnZSB0aGVpciBtaXNzaWxlcyB3aXRoIGdyZWF0IGZvcmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIHRoZSBwbGlnaHQgb2YgdGhlIFJvbWFucyB3YXMgYSBncmlldm91cyBvbmU7IGZvciBpZiB0aGV5IGtlcHQgdGhlaXIgcmFua3MsIHRoZXkgd2VyZSB3b3VuZGVkIGluIGdyZWF0IG51bWJlcnMsIGFuZCBpZiB0aGV5IHRyaWVkIHRvIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCB0aGUgZW5lbXksIHRoZXkgd2VyZSBqdXN0IGFzIGZhciBmcm9tIGVmZmVjdGluZyBhbnl0aGluZyBhbmQgc3VmZmVyZWQganVzdCBhcyBtdWNoLiBGb3IgdGhlIFBhcnRoaWFucyBzaG90IGFzIHRoZXkgZmxlZCwgYW5kIG5leHQgdG8gdGhlIFNjeXRoaWFucywgdGhleSBkbyB0aGlzIG1vc3QgZWZmZWN0aXZlbHk7IGFuZCBpdCBpcyBhIHZlcnkgY2xldmVyIHRoaW5nIHRvIHNlZWsgc2FmZXR5IHdoaWxlIHN0aWxsIGZpZ2h0aW5nLCBhbmQgdG8gdGFrZSBhd2F5IHRoZSBzaGFtZSBvZiBmbGlnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBhcyBsb25nIGFzIHRoZXkgaGFkIGhvcGVzIHRoYXQgdGhlIGVuZW15IHdvdWxkIGV4aGF1c3QgdGhlaXIgbWlzc2lsZXMgYW5kIGRlc2lzdCBmcm9tIGJhdHRsZSBvciBmaWdodCBhdCBjbG9zZSBxdWFydGVycywgdGhlIFJvbWFucyBoZWxkIG91dDsgYnV0IHdoZW4gdGhleSBwZXJjZWl2ZWQgdGhhdCBtYW55IGNhbWVscyBsYWRlbiB3aXRoIGFycm93cyB3ZXJlIGF0IGhhbmQsIGZyb20gd2hpY2ggdGhlIFBhcnRoaWFucyB3aG8gZmlyc3QgZW5jaXJjbGVkIHRoZW0gdG9vayBhIGZyZXNoIHN1cHBseSwgdGhlbiBDcmFzc3VzLCBzZWVpbmcgbm8gZW5kIHRvIHRoaXMsIGJlZ2FuIHRvIGxvc2UgaGVhcnQsIGFuZCBzZW50IG1lc3NlbmdlcnMgdG8gaGlzIHNvbiB3aXRoIG9yZGVycyB0byBmb3JjZSBhbiBlbmdhZ2VtZW50IHdpdGggdGhlIGVuZW15IGJlZm9yZSBoZSB3YXMgc3Vycm91bmRlZDsgZm9yIGl0IHdhcyBoaXMgd2luZyBlc3BlY2lhbGx5IHdoaWNoIHRoZSBlbmVteSB3ZXJlIGF0dGFja2luZyBhbmQgc3Vycm91bmRpbmcgd2l0aCB0aGVpciBjYXZhbHJ5LCBpbiB0aGUgaG9wZSBvZiBnZXR0aW5nIGluIGhpcyByZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIHlvdW5nIHdhbiB0b29rIHRoaXJ0ZWVuIGh1bmRyZWQgaG9yc2VtZW4sIG9mIHdob20gYSB0aG91c2FuZCBoYWQgY29tZSBmcm9tIENhZXNhciwgZml2ZSBodW5kcmVkIGFyY2hlcnMsIGFuZCBlaWdodCBjb2hvcnRzIG9mIHRoZSBtZW4tYXQtYXJtcyB3aG8gd2VyZSBuZWFyZXN0IGhpbSwgYW5kIGxlZCB0aGVtIGFsbCB0byB0aGUgY2hhcmdlLiBCdXQgdGhlIFBhcnRoaWFucyB3aG8gd2VyZSB0cnlpbmcgdG8gZW52ZWxvcCBoaW0sIGVpdGhlciBiZWNhdXNlLCBhcyBzb21lIHNheSwgdGhleSBlbmNvdW50ZXJlZCBtYXJzaGVzLCBvciBiZWNhdXNlIHRoZXkgd2VyZSBtYW5ldXZlcmluZyB0byBhdHRhY2sgUHVibGl1cyBhcyBmYXIgYXMgcG9zc2libGUgZnJvbSBoaXMgZmF0aGVyLCB3aGVlbGVkIGFib3V0IGFuZCBtYWRlIG9mZi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBQdWJsaXVzLCBzaG91dGluZyB0aGF0IHRoZSBtZW4gZGlkIG5vdCBzdGFuZCB0aGVpciBncm91bmQsIHJvZGUgYWZ0ZXIgdGhlbSwgYW5kIHdpdGggaGltIENlbnNvcmludXMgYW5kIE1lZ2FiYWNjaHVzLCB0aGUgbGF0dGVyIGRpc3Rpbmd1aXNoZWQgZm9yIGhpcyBjb3VyYWdlIGFuZCBzdHJlbmd0aCwgQ2Vuc29yaW51cyBhIG1hbiBvZiBzZW5hdG9yaWFsIGRpZ25pdHkgYW5kIGEgcG93ZXJmdWwgc3BlYWtlciwgYW5kIGJvdGggb2YgdGhlbSBjb21yYWRlcyBvZiBQdWJsaXVzIGFuZCBuZWFybHkgb2YgdGhlIHNhbWUgYWdlLiBUaGUgY2F2YWxyeSBmb2xsb3dlZCBhZnRlciBQdWJsaXVzLCBhbmQgZXZlbiB0aGUgaW5mYW50cnkga2VwdCBwYWNlIHdpdGggdGhlbSBpbiB0aGUgemVhbCBhbmQgam95IHdoaWNoIHRoZWlyIGhvcGVzIGluc3BpcmVkOyBmb3IgdGhleSB0aG91Z2h0IHRoZXkgd2VyZSB2aWN0b3Jpb3VzIGFuZCBpbiBwdXJzdWl0IG9mIHRoZSBlbmVteSwgdW50aWwsIGFmdGVyIHRoZXkgaGFkIGdvbmUgZm9yd2FyZCBhIGxvbmcgZGlzdGFuY2UsIHRoZXkgcGVyY2VpdmVkIHRoZSBydXNlLiBGb3IgdGhlIHNlZW1pbmcgZnVnaXRpdmVzIHdoZWVsZWQgYWJvdXQgYW5kIHdlcmUgam9pbmVkIGF0IHRoZSBzYW1lIHRpbWUgYnkgb3RoZXJzIG1vcmUgbnVtZXJvdXMgc3RpbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIFJvbWFucyBoYWx0ZWQsIHN1cHBvc2luZyB0aGF0IHRoZSBlbmVteSB3b3VsZCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlbSwgc2luY2UgdGhleSB3ZXJlIHNvIGZldyBpbiBudW1iZXIuIEJ1dCB0aGUgUGFydGhpYW5zIHN0YXRpb25lZCB0aGVpciBtYWlsLWNsYWQgaG9yc2VtZW4gaW4gZnJvbnQgb2YgdGhlIFJvbWFucywgYW5kIHRoZW4gd2l0aCB0aGUgcmVzdCBvZiB0aGVpciBjYXZhbHJ5IGluIGxvb3NlIGFycmF5IHJvZGUgcm91bmQgdGhlbSwgdGVhcmluZyB1cCB0aGUgc3VyZmFjZSBvZiB0aGUgZ3JvdW5kLCBhbmQgcmFpc2luZyBmcm9tIHRoZSBkZXB0aHMgZ3JlYXQgaGVhcHMgb2Ygc2FuZCB3aGljaCBmZWxsIGluIGxpbWl0bGVzcyBzaG93ZXJzIG9mIGR1c3QsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgdGhlIFJvbWFucyBjb3VsZCBuZWl0aGVyIHNlZSBjbGVhcmx5IG5vciBzcGVhayBwbGFpbmx5LCBidXQsIGJlaW5nIGNyb3dkZWQgaW50byBhIG5hcnJvdyBjb21wYXNzIGFuZCBmYWxsaW5nIG9uZSB1cG9uIGFub3RoZXIsIHdlcmUgc2hvdCwgYW5kIGRpZWQgbm8gZWFzeSBub3IgZXZlbiBzcGVlZHkgZGVhdGguIEZvciwgaW4gdGhlIGFnb25pZXMgb2YgY29udnVsc2l2ZSBwYWluLCBhbWlkIHdyaXRoaW5nIGFib3V0IHRoZSBhcnJvd3MsIHRoZXkgd291bGQgYnJlYWsgdGhlbSBvZmYgaW4gdGhlaXIgd291bmRzLCBhbmQgdGhlbiBpbiB0cnlpbmcgdG8gcHVsbCBvdXQgYnkgZm9yY2UgdGhlIGJhcmJlZCBoZWFkcyB3aGljaCBoYWQgcGllcmNlZCB0aGVpciB2ZWlucyBhbmQgc2luZXdzLCB0aGV5IHRvcmUgYW5kIGRpc2ZpZ3VyZWQgdGhlbXNlbHZlcyB0aGUgbW9yZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGFzIGxvbmcgYXMgdGhleSBoYWQgaG9wZXMgdGhhdCB0aGUgZW5lbXkgd291bGQgZXhoYXVzdCB0aGVpciBtaXNzaWxlcyBhbmQgZGVzaXN0IGZyb20gYmF0dGxlIG9yIGZpZ2h0IGF0IGNsb3NlIHF1YXJ0ZXJzLCB0aGUgUm9tYW5zIGhlbGQgb3V0OyBidXQgd2hlbiB0aGV5IHBlcmNlaXZlZCB0aGF0IG1hbnkgY2FtZWxzIGxhZGVuIHdpdGggYXJyb3dzIHdlcmUgYXQgaGFuZCwgZnJvbSB3aGljaCB0aGUgUGFydGhpYW5zIHdobyBmaXJzdCBlbmNpcmNsZWQgdGhlbSB0b29rIGEgZnJlc2ggc3VwcGx5LCB0aGVuIENyYXNzdXMsIHNlZWluZyBubyBlbmQgdG8gdGhpcywgYmVnYW4gdG8gbG9zZSBoZWFydCwgYW5kIHNlbnQgbWVzc2VuZ2VycyB0byBoaXMgc29uIHdpdGggb3JkZXJzIHRvIGZvcmNlIGFuIGVuZ2FnZW1lbnQgd2l0aCB0aGUgZW5lbXkgYmVmb3JlIGhlIHdhcyBzdXJyb3VuZGVkOyBmb3IgaXQgd2FzIGhpcyB3aW5nIGVzcGVjaWFsbHkgd2hpY2ggdGhlIGVuZW15IHdlcmUgYXR0YWNraW5nIGFuZCBzdXJyb3VuZGluZyB3aXRoIHRoZWlyIGNhdmFscnksIGluIHRoZSBob3BlIG9mIGdldHRpbmcgaW4gaGlzIHJlYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgeW91bmcgd2FuIHRvb2sgdGhpcnRlZW4gaHVuZHJlZCBob3JzZW1lbiwgb2Ygd2hvbSBhIHRob3VzYW5kIGhhZCBjb21lIGZyb20gQ2Flc2FyLCBmaXZlIGh1bmRyZWQgYXJjaGVycywgYW5kIGVpZ2h0IGNvaG9ydHMgb2YgdGhlIG1lbi1hdC1hcm1zIHdobyB3ZXJlIG5lYXJlc3QgaGltLCBhbmQgbGVkIHRoZW0gYWxsIHRvIHRoZSBjaGFyZ2UuIEJ1dCB0aGUgUGFydGhpYW5zIHdobyB3ZXJlIHRyeWluZyB0byBlbnZlbG9wIGhpbSwgZWl0aGVyIGJlY2F1c2UsIGFzIHNvbWUgc2F5LCB0aGV5IGVuY291bnRlcmVkIG1hcnNoZXMsIG9yIGJlY2F1c2UgdGhleSB3ZXJlIG1hbmV1dmVyaW5nIHRvIGF0dGFjayBQdWJsaXVzIGFzIGZhciBhcyBwb3NzaWJsZSBmcm9tIGhpcyBmYXRoZXIsIHdoZWVsZWQgYWJvdXQgYW5kIG1hZGUgb2ZmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUHVibGl1cywgc2hvdXRpbmcgdGhhdCB0aGUgbWVuIGRpZCBub3Qgc3RhbmQgdGhlaXIgZ3JvdW5kLCByb2RlIGFmdGVyIHRoZW0sIGFuZCB3aXRoIGhpbSBDZW5zb3JpbnVzIGFuZCBNZWdhYmFjY2h1cywgdGhlIGxhdHRlciBkaXN0aW5ndWlzaGVkIGZvciBoaXMgY291cmFnZSBhbmQgc3RyZW5ndGgsIENlbnNvcmludXMgYSBtYW4gb2Ygc2VuYXRvcmlhbCBkaWduaXR5IGFuZCBhIHBvd2VyZnVsIHNwZWFrZXIsIGFuZCBib3RoIG9mIHRoZW0gY29tcmFkZXMgb2YgUHVibGl1cyBhbmQgbmVhcmx5IG9mIHRoZSBzYW1lIGFnZS4gVGhlIGNhdmFscnkgZm9sbG93ZWQgYWZ0ZXIgUHVibGl1cywgYW5kIGV2ZW4gdGhlIGluZmFudHJ5IGtlcHQgcGFjZSB3aXRoIHRoZW0gaW4gdGhlIHplYWwgYW5kIGpveSB3aGljaCB0aGVpciBob3BlcyBpbnNwaXJlZDsgZm9yIHRoZXkgdGhvdWdodCB0aGV5IHdlcmUgdmljdG9yaW91cyBhbmQgaW4gcHVyc3VpdCBvZiB0aGUgZW5lbXksIHVudGlsLCBhZnRlciB0aGV5IGhhZCBnb25lIGZvcndhcmQgYSBsb25nIGRpc3RhbmNlLCB0aGV5IHBlcmNlaXZlZCB0aGUgcnVzZS4gRm9yIHRoZSBzZWVtaW5nIGZ1Z2l0aXZlcyB3aGVlbGVkIGFib3V0IGFuZCB3ZXJlIGpvaW5lZCBhdCB0aGUgc2FtZSB0aW1lIGJ5IG90aGVycyBtb3JlIG51bWVyb3VzIHN0aWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIFJvbWFucyBoYWx0ZWQsIHN1cHBvc2luZyB0aGF0IHRoZSBlbmVteSB3b3VsZCBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlbSwgc2luY2UgdGhleSB3ZXJlIHNvIGZldyBpbiBudW1iZXIuIEJ1dCB0aGUgUGFydGhpYW5zIHN0YXRpb25lZCB0aGVpciBtYWlsLWNsYWQgaG9yc2VtZW4gaW4gZnJvbnQgb2YgdGhlIFJvbWFucywgYW5kIHRoZW4gd2l0aCB0aGUgcmVzdCBvZiB0aGVpciBjYXZhbHJ5IGluIGxvb3NlIGFycmF5IHJvZGUgcm91bmQgdGhlbSwgdGVhcmluZyB1cCB0aGUgc3VyZmFjZSBvZiB0aGUgZ3JvdW5kLCBhbmQgcmFpc2luZyBmcm9tIHRoZSBkZXB0aHMgZ3JlYXQgaGVhcHMgb2Ygc2FuZCB3aGljaCBmZWxsIGluIGxpbWl0bGVzcyBzaG93ZXJzIG9mIGR1c3QsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgdGhlIFJvbWFucyBjb3VsZCBuZWl0aGVyIHNlZSBjbGVhcmx5IG5vciBzcGVhayBwbGFpbmx5LCBidXQsIGJlaW5nIGNyb3dkZWQgaW50byBhIG5hcnJvdyBjb21wYXNzIGFuZCBmYWxsaW5nIG9uZSB1cG9uIGFub3RoZXIsIHdlcmUgc2hvdCwgYW5kIGRpZWQgbm8gZWFzeSBub3IgZXZlbiBzcGVlZHkgZGVhdGguIEZvciwgaW4gdGhlIGFnb25pZXMgb2YgY29udnVsc2l2ZSBwYWluLCBhbWlkIHdyaXRoaW5nIGFib3V0IHRoZSBhcnJvd3MsIHRoZXkgd291bGQgYnJlYWsgdGhlbSBvZmYgaW4gdGhlaXIgd291bmRzLCBhbmQgdGhlbiBpbiB0cnlpbmcgdG8gcHVsbCBvdXQgYnkgZm9yY2UgdGhlIGJhcmJlZCBoZWFkcyB3aGljaCBoYWQgcGllcmNlZCB0aGVpciB2ZWlucyBhbmQgc2luZXdzLCB0aGV5IHRvcmUgYW5kIGRpc2ZpZ3VyZWQgdGhlbXNlbHZlcyB0aGUgbW9yZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBtYW55IGRpZWQsIGFuZCB0aGUgc3Vydml2b3JzIGFsc28gd2VyZSBpbmNhcGFjaXRhdGVkIGZvciBmaWdodGluZy4gQW5kIHdoZW4gUHVibGl1cyB1cmdlZCB0aGVtIHRvIGNoYXJnZSB0aGUgZW5lbXkncyBtYWlsIGNsYWQgaG9yc2VtZW4sIHRoZXkgc2hvd2VkIGhpbSB0aGF0IHRoZWlyIGhhbmRzIHdlcmUgcml2ZXRlZCB0byB0aGVpciBzaGllbGRzIGFuZCB0aGVpciBmZWV0IG5haWxlZCB0aHJvdWdoIGFuZCB0aHJvdWdoIHRvIHRoZSBncm91bmQsIHNvIHRoYXQgdGhleSB3ZXJlIGhlbHBsZXNzIGVpdGhlciBmb3IgZmxpZ2h0IG9yIGZvciBzZWxmIGRlZmVuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpdXMgaGltc2VsZiwgYWNjb3JkaW5nbHksIGNoZWVyZWQgb24gaGlzIGNhdmFscnksIG1hZGUgYSB2aWdvcm91cyBjaGFyZ2Ugd2l0aCB0aGVtLCBhbmQgY2xvc2VkIHdpdGggdGhlIGVuZW15LiBCdXQgaGlzIHN0cnVnZ2xlIHdhcyBhbiB1bmVxdWFsIG9uZSBib3RoIG9mZmVuc2l2ZWx5IGFuZCBkZWZlbnNpdmVseSwgZm9yIGhpcyB0aHJ1c3Rpbmcgd2FzIGRvbmUgd2l0aCBzbWFsbCBhbmQgZmVlYmxlIHNwZWFycyBhZ2FpbnN0IGJyZWFzdHBsYXRlcyBvZiByYXcgaGlkZSBhbmQgc3RlZWwsIHdoZXJlYXMgdGhlIHRocnVzdHMgb2YgdGhlIGVuZW15IHdlcmUgbWFkZSB3aXRoIHBpa2VzIGFnYWluc3QgdGhlIGxpZ2h0bHkgZXF1aXBwZWQgYW5kIHVucHJvdGVjdGVkIGJvZGllcyBvZiB0aGUgR2F1bHMsIHNpbmNlIGl0IHdhcyB1cG9uIHRoZXNlIHRoYXQgUHVibGl1cyBjaGllZmx5IHJlbGllZCwgYW5kIHdpdGggdGhlc2UgaGUgZGlkIGluZGVlZCB3b3JrIHdvbmRlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGxhaWQgaG9sZCBvZiB0aGUgaG9uaW5nIHNwZWFycyBvZiB0aGUgUGFydGhpYW5zLCBhbmQgZ3JhcHBsaW5nIHdpdGggdGhlIG1lbiwgcHVzaGVkIHRoZW0gZnJvbSB0aGVpciBob3JzZXMsIGhhcmQgYXMgaXQgd2FzIHRvIG1vdmUgdGhlbSBvd2luZyB0byB0aGUgd2VpZ2h0IG9mIHRoZWlyIGFybW91cjsgYW5kIG1hbnkgb2YgdGhlIEdhdWxzIGZvcnNvb2sgdGhlaXIgb3duIGhvcnNlcywgYW5kIGNyYXdsaW5nIHVuZGVyIHRob3NlIG9mIHRoZSBlbmVteSwgc3RhYmJlZCB0aGVtIGluIHRoZSBiZWxseS4gVGhlc2Ugd291bGQgcmVhciB1cCBpbiB0aGVpciBhbmd1aXNoLCBhbmQgZGllIHRyYW1wbGluZyBvbiByaWRlcnMgYW5kIGZvZW1lbiBpbmRpc2NyaW1pbmF0ZWx5IG1pbmdsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgR2F1bHMgd2VyZSBkaXN0cmVzc2VkIGFib3ZlIGFsbCB0aGluZ3MgYnkgdGhlIGhlYXQgYW5kIHRoZWlyIHRoaXJzdCwgdG8gYm90aCBvZiB3aGljaCB0aGV5IHdlcmUgdW51c2VkOyBhbmQgbW9zdCBvZiB0aGVpciBob3JzZXMgaGFkIHBlcmlzaGVkIGJ5IGJlaW5nIGRyaXZlbiBhZ2FpbnN0IHRoZSBsb25nIHNwZWFycy4gVGhleSB3ZXJlIHRoZXJlZm9yZSBjb21wZWxsZWQgdG8gcmV0aXJlIHVwb24gdGhlIG1lbi1hdC1hcm1zLCB0YWtpbmcgd2l0aCB0aGVtIFB1YmxpdXMsIHdobyB3YXMgc2V2ZXJlbHkgd291bmRlZC4gQW5kIHNlZWluZyBhIHNhbmR5IGhpbGxvY2sgbmVhciBieSwgdGhleSBhbGwgcmV0aXJlZCB0byBpdCwgYW5kIGZhc3RlbmVkIHRoZWlyIGhvcnNlcyBpbiB0aGUgY2VudHJlOyB0aGVuIGxvY2tpbmcgdGhlaXIgc2hpZWxkcyB0b2dldGhlciBvbiB0aGUgb3V0c2lkZSwgdGhleSB0aG91Z2h0IHRoZXkgY291bGQgbW9yZSBlYXNpbHkgZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGUgQmFyYmFyaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCB0dXJuZWQgb3V0IGp1c3QgdGhlIG90aGVyIHdheS4gRm9yIG9uIGxldmVsIGdyb3VuZCwgdGhlIGZyb250IHJhbmtzIGRvLCB0byBzb21lIGV4dGVudCwgYWZmb3JkIHJlbGllZiB0byB0aG9zZSB3aG8gYXJlIGJlaGluZCB0aGVtLiBCdXQgaGVyZSwgd2hlcmUgdGhlIGluZXF1YWxpdHkgb2YgdGhlIGdyb3VuZCByYWlzZWQgb25lIG1hbiBhYm92ZSBhbm90aGVyLCBhbmQgbGlmdGVkIGV2ZXJ5IG1hbiB3aG8gd2FzIGJlaGluZCBhbm90aGVyIGludG8gZ3JlYXRlciBwcm9taW5lbmNlLCB0aGVyZSB3YXMgbm8gc3VjaCB0aGluZyBhcyBlc2NhcGUsIGJ1dCB0aGV5IHdlcmUgYWxsIGFsaWtlIGhpdCB3aXRoIGFycm93cywgYmV3YWlsaW5nIHRoZWlyIGluZ2xvcmlvdXMgYW1pZCBpbmVmZmVjdHVhbCBkZWF0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgbWFueSBkaWVkLCBhbmQgdGhlIHN1cnZpdm9ycyBhbHNvIHdlcmUgaW5jYXBhY2l0YXRlZCBmb3IgZmlnaHRpbmcuIEFuZCB3aGVuIFB1YmxpdXMgdXJnZWQgdGhlbSB0byBjaGFyZ2UgdGhlIGVuZW15J3MgbWFpbCBjbGFkIGhvcnNlbWVuLCB0aGV5IHNob3dlZCBoaW0gdGhhdCB0aGVpciBoYW5kcyB3ZXJlIHJpdmV0ZWQgdG8gdGhlaXIgc2hpZWxkcyBhbmQgdGhlaXIgZmVldCBuYWlsZWQgdGhyb3VnaCBhbmQgdGhyb3VnaCB0byB0aGUgZ3JvdW5kLCBzbyB0aGF0IHRoZXkgd2VyZSBoZWxwbGVzcyBlaXRoZXIgZm9yIGZsaWdodCBvciBmb3Igc2VsZiBkZWZlbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpdXMgaGltc2VsZiwgYWNjb3JkaW5nbHksIGNoZWVyZWQgb24gaGlzIGNhdmFscnksIG1hZGUgYSB2aWdvcm91cyBjaGFyZ2Ugd2l0aCB0aGVtLCBhbmQgY2xvc2VkIHdpdGggdGhlIGVuZW15LiBCdXQgaGlzIHN0cnVnZ2xlIHdhcyBhbiB1bmVxdWFsIG9uZSBib3RoIG9mZmVuc2l2ZWx5IGFuZCBkZWZlbnNpdmVseSwgZm9yIGhpcyB0aHJ1c3Rpbmcgd2FzIGRvbmUgd2l0aCBzbWFsbCBhbmQgZmVlYmxlIHNwZWFycyBhZ2FpbnN0IGJyZWFzdHBsYXRlcyBvZiByYXcgaGlkZSBhbmQgc3RlZWwsIHdoZXJlYXMgdGhlIHRocnVzdHMgb2YgdGhlIGVuZW15IHdlcmUgbWFkZSB3aXRoIHBpa2VzIGFnYWluc3QgdGhlIGxpZ2h0bHkgZXF1aXBwZWQgYW5kIHVucHJvdGVjdGVkIGJvZGllcyBvZiB0aGUgR2F1bHMsIHNpbmNlIGl0IHdhcyB1cG9uIHRoZXNlIHRoYXQgUHVibGl1cyBjaGllZmx5IHJlbGllZCwgYW5kIHdpdGggdGhlc2UgaGUgZGlkIGluZGVlZCB3b3JrIHdvbmRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGxhaWQgaG9sZCBvZiB0aGUgaG9uaW5nIHNwZWFycyBvZiB0aGUgUGFydGhpYW5zLCBhbmQgZ3JhcHBsaW5nIHdpdGggdGhlIG1lbiwgcHVzaGVkIHRoZW0gZnJvbSB0aGVpciBob3JzZXMsIGhhcmQgYXMgaXQgd2FzIHRvIG1vdmUgdGhlbSBvd2luZyB0byB0aGUgd2VpZ2h0IG9mIHRoZWlyIGFybW91cjsgYW5kIG1hbnkgb2YgdGhlIEdhdWxzIGZvcnNvb2sgdGhlaXIgb3duIGhvcnNlcywgYW5kIGNyYXdsaW5nIHVuZGVyIHRob3NlIG9mIHRoZSBlbmVteSwgc3RhYmJlZCB0aGVtIGluIHRoZSBiZWxseS4gVGhlc2Ugd291bGQgcmVhciB1cCBpbiB0aGVpciBhbmd1aXNoLCBhbmQgZGllIHRyYW1wbGluZyBvbiByaWRlcnMgYW5kIGZvZW1lbiBpbmRpc2NyaW1pbmF0ZWx5IG1pbmdsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgR2F1bHMgd2VyZSBkaXN0cmVzc2VkIGFib3ZlIGFsbCB0aGluZ3MgYnkgdGhlIGhlYXQgYW5kIHRoZWlyIHRoaXJzdCwgdG8gYm90aCBvZiB3aGljaCB0aGV5IHdlcmUgdW51c2VkOyBhbmQgbW9zdCBvZiB0aGVpciBob3JzZXMgaGFkIHBlcmlzaGVkIGJ5IGJlaW5nIGRyaXZlbiBhZ2FpbnN0IHRoZSBsb25nIHNwZWFycy4gVGhleSB3ZXJlIHRoZXJlZm9yZSBjb21wZWxsZWQgdG8gcmV0aXJlIHVwb24gdGhlIG1lbi1hdC1hcm1zLCB0YWtpbmcgd2l0aCB0aGVtIFB1YmxpdXMsIHdobyB3YXMgc2V2ZXJlbHkgd291bmRlZC4gQW5kIHNlZWluZyBhIHNhbmR5IGhpbGxvY2sgbmVhciBieSwgdGhleSBhbGwgcmV0aXJlZCB0byBpdCwgYW5kIGZhc3RlbmVkIHRoZWlyIGhvcnNlcyBpbiB0aGUgY2VudHJlOyB0aGVuIGxvY2tpbmcgdGhlaXIgc2hpZWxkcyB0b2dldGhlciBvbiB0aGUgb3V0c2lkZSwgdGhleSB0aG91Z2h0IHRoZXkgY291bGQgbW9yZSBlYXNpbHkgZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGUgQmFyYmFyaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgdHVybmVkIG91dCBqdXN0IHRoZSBvdGhlciB3YXkuIEZvciBvbiBsZXZlbCBncm91bmQsIHRoZSBmcm9udCByYW5rcyBkbywgdG8gc29tZSBleHRlbnQsIGFmZm9yZCByZWxpZWYgdG8gdGhvc2Ugd2hvIGFyZSBiZWhpbmQgdGhlbS4gQnV0IGhlcmUsIHdoZXJlIHRoZSBpbmVxdWFsaXR5IG9mIHRoZSBncm91bmQgcmFpc2VkIG9uZSBtYW4gYWJvdmUgYW5vdGhlciwgYW5kIGxpZnRlZCBldmVyeSBtYW4gd2hvIHdhcyBiZWhpbmQgYW5vdGhlciBpbnRvIGdyZWF0ZXIgcHJvbWluZW5jZSwgdGhlcmUgd2FzIG5vIHN1Y2ggdGhpbmcgYXMgZXNjYXBlLCBidXQgdGhleSB3ZXJlIGFsbCBhbGlrZSBoaXQgd2l0aCBhcnJvd3MsIGJld2FpbGluZyB0aGVpciBpbmdsb3Jpb3VzIGFtaWQgaW5lZmZlY3R1YWwgZGVhdGguCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmUgd2VyZSB3aXRoIFB1YmxpdXMgdHdvIEdyZWVrcywgb2YgdGhvc2Ugd2hvIGR3ZWx0IG5lYXIgYnkgaW4gQ2FycmhhZSwgSGllcm9ueW1udXMgYW5kIE5pY29tYWNodXMuIFRoZXNlIGpvaW5lZCBpbiB0cnlpbmcgdG8gcGVyc3VhZGUgaGltIHRvIHNsaXAgYXdheSB3aXRoIHRoZW0gYW5kIG1ha2UgdGhlaXIgZXNjYXBlIHRvIEljaG5hZSwgYSBjaXR5IHdoaWNoIGhhZCBlc3BvdXNlZCB0aGUgUm9tYW4gY2F1c2UgYW5kIHdhcyBub3QgZmFyIG9mZi4gQnV0IFB1YmxpdXMsIGRlY2xhcmluZyB0aGF0IG5vIGRlYXRoIGNvdWxkIGhhdmUgc3VjaCB0ZXJyb3JzIGZvciBoaW0gYXMgdG8gbWFrZSBoaW0gZGVzZXJ0IHRob3NlIHdobyB3ZXJlIHBlcmlzaGluZyBvbiBoaXMgYWNjb3VudCwgb3JkZXJlZCB0aGVtIHRvIHNhdmUgdGhlaXIgb3duIGxpdmVzLCBiYWRlIHRoZW0gZmFyZXdlbGwsIGFuZCBkaXNtaXNzZWQgdGhlbS4gVGhlbiBoZSBoaW1zZWxmLCBiZWluZyB1bmFibGUgdG8gdXNlIGhpcyBoYW5kLCB3aGljaCBoYWQgYmVlbiBwaWVyY2VkIHRocm91Z2ggd2l0aGluIGFuIGFycm93LCBwcmVzZW50ZWQgaGlzIHNpZGUgdG8gaGlzIHNoaWVsZC1iZWFyZXIgYW5kIG9yZGVyZWQgaGltIHRvIHN0cmlrZSBob21lIHdpdGggaGlzIHN3b3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbGlrZSBtYW5uZXIgYWxzbyBDZW5zb3JpbnVzIGlzIHNhaWQgdG8gaGF2ZSBkaWVkOyBidXQgTWVnYWJhY2NodXMgdG9vayBoaXMgb3duIGxpZmUsIGFuZCBzbyBkaWQgdGhlIG90aGVyIG1vc3Qgbm90YWJsZSBtZW4uIFRoZSBzdXJ2aXZvcidzIGZvdWdodCBvbiB1bnRpbCB0aGUgUGFydGhpYW5zIG1vdW50ZWQgdGhlIGhpbGwgYW5kIHRyYW5zZml4ZWQgdGhlbSB3aXRoIHRoZWlyIGxvbmcgc3BlYXJzLCBhbmQgdGhleSBzYXkgdGhhdCBub3QgbW9yZSB0aGFuIGZpdmUgaHVuZHJlZCB3ZXJlIHRha2VuIGFsaXZlLiBUaGVuIHRoZSBQYXJ0aGlhbnMgY3V0IG9mZiB0aGUgaGVhZCBvZiBQdWJsaXVzLCBhbmQgcm9kZSBvZmYgYXQgb25jZSB0byBhdHRhY2sgQ3Jhc3N1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmUgd2VyZSB3aXRoIFB1YmxpdXMgdHdvIEdyZWVrcywgb2YgdGhvc2Ugd2hvIGR3ZWx0IG5lYXIgYnkgaW4gQ2FycmhhZSwgSGllcm9ueW1udXMgYW5kIE5pY29tYWNodXMuIFRoZXNlIGpvaW5lZCBpbiB0cnlpbmcgdG8gcGVyc3VhZGUgaGltIHRvIHNsaXAgYXdheSB3aXRoIHRoZW0gYW5kIG1ha2UgdGhlaXIgZXNjYXBlIHRvIEljaG5hZSwgYSBjaXR5IHdoaWNoIGhhZCBlc3BvdXNlZCB0aGUgUm9tYW4gY2F1c2UgYW5kIHdhcyBub3QgZmFyIG9mZi4gQnV0IFB1YmxpdXMsIGRlY2xhcmluZyB0aGF0IG5vIGRlYXRoIGNvdWxkIGhhdmUgc3VjaCB0ZXJyb3JzIGZvciBoaW0gYXMgdG8gbWFrZSBoaW0gZGVzZXJ0IHRob3NlIHdobyB3ZXJlIHBlcmlzaGluZyBvbiBoaXMgYWNjb3VudCwgb3JkZXJlZCB0aGVtIHRvIHNhdmUgdGhlaXIgb3duIGxpdmVzLCBiYWRlIHRoZW0gZmFyZXdlbGwsIGFuZCBkaXNtaXNzZWQgdGhlbS4gVGhlbiBoZSBoaW1zZWxmLCBiZWluZyB1bmFibGUgdG8gdXNlIGhpcyBoYW5kLCB3aGljaCBoYWQgYmVlbiBwaWVyY2VkIHRocm91Z2ggd2l0aGluIGFuIGFycm93LCBwcmVzZW50ZWQgaGlzIHNpZGUgdG8gaGlzIHNoaWVsZC1iZWFyZXIgYW5kIG9yZGVyZWQgaGltIHRvIHN0cmlrZSBob21lIHdpdGggaGlzIHN3b3JkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsaWtlIG1hbm5lciBhbHNvIENlbnNvcmludXMgaXMgc2FpZCB0byBoYXZlIGRpZWQ7IGJ1dCBNZWdhYmFjY2h1cyB0b29rIGhpcyBvd24gbGlmZSwgYW5kIHNvIGRpZCB0aGUgb3RoZXIgbW9zdCBub3RhYmxlIG1lbi4gVGhlIHN1cnZpdm9yJ3MgZm91Z2h0IG9uIHVudGlsIHRoZSBQYXJ0aGlhbnMgbW91bnRlZCB0aGUgaGlsbCBhbmQgdHJhbnNmaXhlZCB0aGVtIHdpdGggdGhlaXIgbG9uZyBzcGVhcnMsIGFuZCB0aGV5IHNheSB0aGF0IG5vdCBtb3JlIHRoYW4gZml2ZSBodW5kcmVkIHdlcmUgdGFrZW4gYWxpdmUuIFRoZW4gdGhlIFBhcnRoaWFucyBjdXQgb2ZmIHRoZSBoZWFkIG9mIFB1YmxpdXMsIGFuZCByb2RlIG9mZiBhdCBvbmNlIHRvIGF0dGFjayBDcmFzc3VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc2l0dWF0aW9uIHdhcyBhcyBmb2xsb3dzLiBBZnRlciBvcmRlcmluZyBoaXMgc29uIHRvIGNoYXJnZSB0aGUgUGFydGhpYW5zIGFuZCByZWNlaXZpbmcgdGlkaW5ncyB0aGF0IHRoZSBlbmVteSB3ZXJlIHJvdXRlZCB0byBhIGdyZWF0IGRpc3RhbmNlIGFuZCBob3RseSBwdXJzdWVkLCBhbmQgYWZ0ZXIgbm90aWNpbmcgYWxzbyB0aGF0IGhpcyBpbW1lZGlhdGUgb3Bwb25lbnRzIHdlcmUgbm8gbG9uZ2VyIHByZXNzaW5nIGhpbSBzbyBoYXJkIChzaW5jZSBtb3N0IG9mIHRoZW0gaGFkIHN0cmVhbWVkIGF3YXkgdG8gd2hlcmUgUHVibGl1cyB3YXMpLCBoZSByZWNvdmVyZWQgYSBsaXR0bGUgY291cmFnZSwgYW5kIGRyYXdpbmcgaGlzIHRyb29wcyB0b2dldGhlciwgcG9zdGVkIHRoZW0gZm9yIHNhZmV0eSBvbiBzbG9waW5nIGdyb3VuZCwgaW4gaW1tZWRpYXRlIGV4cGVjdGF0aW9ucyB0aGF0IGhpcyBzb24gd291bGQgcmV0dXJuIGZyb20gdGhlIHB1cnN1aXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBtZXNzZW5nZXJzIHNlbnQgYnkgUHVibGl1cyB0byBoaXMgZmF0aGVyLCB3aGVuIGhlIGJlZ2FuIHRvIGJlIGluIGRhbmdlciwgdGhlIGZpcnN0IGZlbGwgaW4gd2l0aCB0aGUgQmFyYmFyaWFucyBhbmQgd2VyZSBzbGFpbjsgdGhlIG5leHQgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCB3aXRoIGRpZmZpY3VsdHkgYW5kIHJlcG9ydGVkIHRoYXQgUHVibGl1cyB3YXMgbG9zdCB1bmxlc3MgaGUgcmVjZWl2ZWQgc3BlZWR5IGFuZCBhYnVuZGFudCBhaWQgZnJvbSBoaXMgZmF0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IENyYXNzdXMgd2FzIGEgcHJleSB0byBtYW55IGNvbmZsaWN0aW5nIGVtb3Rpb25zLCBhbmQgbm8gbG9uZ2VyIGxvb2tlZCBhdCBhbnl0aGluZyB3aXRoIGNhbG0ganVkZ2VtZW50LiBIaXMgZmVhciBmb3IgdGhlIHdob2xlIGFybXkgZHJvdmUgaGltIHRvIHJlZnVzZSwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgaGlzIHllYXJuaW5nIGxvdmUgZm9yIGhpcyBzb24gaW1wZWxsZWQgaGltIHRvIGdyYW50IGFzc2lzdGFuY2U7IGJ1dCBhdCBsYXN0IGhlIGJlZ2FuIHRvIG1vdmUgaGlzIGZvcmNlcyBmb3J3YXJkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNpdHVhdGlvbiB3YXMgYXMgZm9sbG93cy4gQWZ0ZXIgb3JkZXJpbmcgaGlzIHNvbiB0byBjaGFyZ2UgdGhlIFBhcnRoaWFucyBhbmQgcmVjZWl2aW5nIHRpZGluZ3MgdGhhdCB0aGUgZW5lbXkgd2VyZSByb3V0ZWQgdG8gYSBncmVhdCBkaXN0YW5jZSBhbmQgaG90bHkgcHVyc3VlZCwgYW5kIGFmdGVyIG5vdGljaW5nIGFsc28gdGhhdCBoaXMgaW1tZWRpYXRlIG9wcG9uZW50cyB3ZXJlIG5vIGxvbmdlciBwcmVzc2luZyBoaW0gc28gaGFyZCAoc2luY2UgbW9zdCBvZiB0aGVtIGhhZCBzdHJlYW1lZCBhd2F5IHRvIHdoZXJlIFB1YmxpdXMgd2FzKSwgaGUgcmVjb3ZlcmVkIGEgbGl0dGxlIGNvdXJhZ2UsIGFuZCBkcmF3aW5nIGhpcyB0cm9vcHMgdG9nZXRoZXIsIHBvc3RlZCB0aGVtIGZvciBzYWZldHkgb24gc2xvcGluZyBncm91bmQsIGluIGltbWVkaWF0ZSBleHBlY3RhdGlvbnMgdGhhdCBoaXMgc29uIHdvdWxkIHJldHVybiBmcm9tIHRoZSBwdXJzdWl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBtZXNzZW5nZXJzIHNlbnQgYnkgUHVibGl1cyB0byBoaXMgZmF0aGVyLCB3aGVuIGhlIGJlZ2FuIHRvIGJlIGluIGRhbmdlciwgdGhlIGZpcnN0IGZlbGwgaW4gd2l0aCB0aGUgQmFyYmFyaWFucyBhbmQgd2VyZSBzbGFpbjsgdGhlIG5leHQgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCB3aXRoIGRpZmZpY3VsdHkgYW5kIHJlcG9ydGVkIHRoYXQgUHVibGl1cyB3YXMgbG9zdCB1bmxlc3MgaGUgcmVjZWl2ZWQgc3BlZWR5IGFuZCBhYnVuZGFudCBhaWQgZnJvbSBoaXMgZmF0aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgQ3Jhc3N1cyB3YXMgYSBwcmV5IHRvIG1hbnkgY29uZmxpY3RpbmcgZW1vdGlvbnMsIGFuZCBubyBsb25nZXIgbG9va2VkIGF0IGFueXRoaW5nIHdpdGggY2FsbSBqdWRnZW1lbnQuIEhpcyBmZWFyIGZvciB0aGUgd2hvbGUgYXJteSBkcm92ZSBoaW0gdG8gcmVmdXNlLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBoaXMgeWVhcm5pbmcgbG92ZSBmb3IgaGlzIHNvbiBpbXBlbGxlZCBoaW0gdG8gZ3JhbnQgYXNzaXN0YW5jZTsgYnV0IGF0IGxhc3QgaGUgYmVnYW4gdG8gbW92ZSBoaXMgZm9yY2VzIGZvcndhcmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXQgdGhpcyBwb2ludCwgaG93ZXZlciwgdGhlIGVuZW15IGNhbWUgdXAgd2l0aCBjbGFtb3VyIGFuZCBiYXR0bGUgY3JpZXMgd2hpY2ggbWFkZSB0aGVtIG1vcmUgZmVhcmZ1bCB0aGFuIGV2ZXIsIGFuZCBhZ2FpbiBtYW55IG9mIHRoZWlyIGRydW1zIGJlZ2FuIGJlbGxvd2luZyBhYm91dCB0aGUgUm9tYW5zLCB3aG8gYXdhaXRlZCB0aGUgYmVnaW5uaW5nIG9mIGEgc2Vjb25kIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIGNhcnJpZWQgdGhlIGhlYWQgb2YgUHVibGl1cyBmaXhlZCBoaWdoIHVwb24gYSBzcGVhciwgcm9kZSBjbG9zZSB1cCBhbmQgZGlzcGxheWVkIGl0LCBzY29ybmZ1bGx5IGFza2luZyBhZnRlciBoaXMgcGFyZW50cyBhbmQgZmFtaWx5LCBmb3Igc3VyZWx5LCB0aGV5IHNhaWQsIGl0IHdhcyBub3QgbWVldCB0aGF0IENyYXNzdXMsIG1vc3QgYmFzZSBhbmQgY293YXJkbHkgb2YgbWVuLCBzaG91bGQgYmUgdGhlIGZhdGhlciBvZiBhIHNvbiBzbyBub2JsZSBhbmQgb2Ygc3VjaCBzcGxlbmRpZCB2YWxvdXIuIFRoaXMgc3BlY3RhY2xlIHNoYXR0ZXJlZCBhbmQgdW5zdHJ1bmcgdGhlIHNwaXJpdHMgb2YgdGhlIFJvbWFucyBtb3JlIHRoYW4gYWxsIHRoZSByZXN0IG9mIHRoZWlyIHRlcnJpYmxlIGV4cGVyaWVuY2VzLCBhbmQgdGhleSB3ZXJlIGFsbCBmaWxsZWQsIG5vdCB3aXRoIGEgcGFzc2lvbiBmb3IgcmV2ZW5nZSwgYXMgd2FzIHRvIGhhdmUgYmVlbiBleHBlY3RlZCwgYnV0IHdpdGggc2h1ZGRlcmluZyBhbmQgdHJlbWJsaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IENyYXNzdXMsIGFzIHRoZXkgc2F5LCBzaG93ZWQgbW9yZSBicmlsbGlhbnQgcXVhbGl0aWVzIGluIHRoYXQgYXdmdWwgaG91ciB0aGFuIGV2ZXIgYmVmb3JlLCBmb3IgaGUgd2VudCB1cCBhbmQgZG93biB0aGUgcmFua3MgY3J5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1pbmUsIE8gUm9tYW5zLCBpcyB0aGlzIHNvcnJvdywgYW5kIG1pbmUgYWxvbmU7IGJ1dCB0aGUgZ3JlYXQgZm9ydHVuZSBhbmQgZ2xvcnkgb2YgUm9tZSBhYmlkZSB1bmJyb2tlbiBhbmQgdW5jb25xdWVyZWQgaW4geW91LCB3aG8gYXJlIGFsaXZlIGFuZCBzYWZlLiBBbWlkIG5vdyBpZiB5ZSBoYXZlIGFueSBwaXR5IGZvciBuaW5lLCB0aHVzIGJlcmVmdCBvZiB0aGUgbm9ibGVzdCBvZiBzb25zLCBzaG93IGl0IGJ5IHlvdXIgd3JhdGggYWdhaW5zdCB0aGUgZW5lbXkuIFJvYiB0aGVtIG9mIHRoZWlyIGpveTsgYXZlbmdlIHRoZWlyIGNydWVsdHk7IGJlIG5vdCBjYXN0IGRvd24gYXQgd2hhdCBoYXMgaGFwcGVuZWQsIGZvciBpdCBtdXN0IG5lZWRzIGJlIHRoYXQgdGhvc2Ugd2hvIGFpbSBhdCBncmVhdCBkZWVkcyBzaG91bGQgYWxzbyBzdWZmZXIgZ3JlYXRseS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3Qgd2l0aG91dCBibG9vZHkgbG9zc2VzIHRoYXQgZXZlbiBMdWN1bGx1cyBvdmVydGhyZXcgVGlncmFuZXMsIG9yIFNjaXBpbyBBbnRpb2NodXM7IGFuZCBvdXIgZmF0aGVycyBvZiBvbGQgbG9zdCBhIHRob3VzYW5kIHNoaXBzIG9mZiBTaWNpbHksIGFuZCBpbiBJdGFseSBtYW55IGltcGVyYXRvcnMgYW5kIGdlbmVyYWxzLCBub3Qgb25lIG9mIHdob20sIGJ5IGhpcyBkZWZlYXQsIHByZXZlbnRlZCB0aGVtIGZyb20gYWZ0ZXJ3YXJkcyBtYXN0ZXJpbmcgaGlzIGNvbnF1ZXJvcnMuIEZvciBpdCB3YXMgbm90IGJ5IGdvb2QgZm9ydHVuZSBtZXJlbHkgdGhhdCB0aGUgUm9tYW4gc3RhdGUgcmVhY2hlZCBpdHMgcHJlc2VudCBwbGVuaXR1ZGUgb2YgcG93ZXIsIGJ1dCBieSB0aGUgcGF0aWVudCBlbmR1cmFuY2UgYW5kIHZhbG91ciBvZiB0aG9zZSB3aG8gZnJlZWQgZGFuZ2VycyBpbiBpdHMgYmVoYWxmLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gY2FycmllZCB0aGUgaGVhZCBvZiBQdWJsaXVzIGZpeGVkIGhpZ2ggdXBvbiBhIHNwZWFyLCByb2RlIGNsb3NlIHVwIGFuZCBkaXNwbGF5ZWQgaXQsIHNjb3JuZnVsbHkgYXNraW5nIGFmdGVyIGhpcyBwYXJlbnRzIGFuZCBmYW1pbHksIGZvciBzdXJlbHksIHRoZXkgc2FpZCwgaXQgd2FzIG5vdCBtZWV0IHRoYXQgQ3Jhc3N1cywgbW9zdCBiYXNlIGFuZCBjb3dhcmRseSBvZiBtZW4sIHNob3VsZCBiZSB0aGUgZmF0aGVyIG9mIGEgc29uIHNvIG5vYmxlIGFuZCBvZiBzdWNoIHNwbGVuZGlkIHZhbG91ci4gVGhpcyBzcGVjdGFjbGUgc2hhdHRlcmVkIGFuZCB1bnN0cnVuZyB0aGUgc3Bpcml0cyBvZiB0aGUgUm9tYW5zIG1vcmUgdGhhbiBhbGwgdGhlIHJlc3Qgb2YgdGhlaXIgdGVycmlibGUgZXhwZXJpZW5jZXMsIGFuZCB0aGV5IHdlcmUgYWxsIGZpbGxlZCwgbm90IHdpdGggYSBwYXNzaW9uIGZvciByZXZlbmdlLCBhcyB3YXMgdG8gaGF2ZSBiZWVuIGV4cGVjdGVkLCBidXQgd2l0aCBzaHVkZGVyaW5nIGFuZCB0cmVtYmxpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQ3Jhc3N1cywgYXMgdGhleSBzYXksIHNob3dlZCBtb3JlIGJyaWxsaWFudCBxdWFsaXRpZXMgaW4gdGhhdCBhd2Z1bCBob3VyIHRoYW4gZXZlciBiZWZvcmUsIGZvciBoZSB3ZW50IHVwIGFuZCBkb3duIHRoZSByYW5rcyBjcnlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaW5lLCBPIFJvbWFucywgaXMgdGhpcyBzb3Jyb3csIGFuZCBtaW5lIGFsb25lOyBidXQgdGhlIGdyZWF0IGZvcnR1bmUgYW5kIGdsb3J5IG9mIFJvbWUgYWJpZGUgdW5icm9rZW4gYW5kIHVuY29ucXVlcmVkIGluIHlvdSwgd2hvIGFyZSBhbGl2ZSBhbmQgc2FmZS4gQW1pZCBub3cgaWYgeWUgaGF2ZSBhbnkgcGl0eSBmb3IgbmluZSwgdGh1cyBiZXJlZnQgb2YgdGhlIG5vYmxlc3Qgb2Ygc29ucywgc2hvdyBpdCBieSB5b3VyIHdyYXRoIGFnYWluc3QgdGhlIGVuZW15LiBSb2IgdGhlbSBvZiB0aGVpciBqb3k7IGF2ZW5nZSB0aGVpciBjcnVlbHR5OyBiZSBub3QgY2FzdCBkb3duIGF0IHdoYXQgaGFzIGhhcHBlbmVkLCBmb3IgaXQgbXVzdCBuZWVkcyBiZSB0aGF0IHRob3NlIHdobyBhaW0gYXQgZ3JlYXQgZGVlZHMgc2hvdWxkIGFsc28gc3VmZmVyIGdyZWF0bHkuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3Qgd2l0aG91dCBibG9vZHkgbG9zc2VzIHRoYXQgZXZlbiBMdWN1bGx1cyBvdmVydGhyZXcgVGlncmFuZXMsIG9yIFNjaXBpbyBBbnRpb2NodXM7IGFuZCBvdXIgZmF0aGVycyBvZiBvbGQgbG9zdCBhIHRob3VzYW5kIHNoaXBzIG9mZiBTaWNpbHksIGFuZCBpbiBJdGFseSBtYW55IGltcGVyYXRvcnMgYW5kIGdlbmVyYWxzLCBub3Qgb25lIG9mIHdob20sIGJ5IGhpcyBkZWZlYXQsIHByZXZlbnRlZCB0aGVtIGZyb20gYWZ0ZXJ3YXJkcyBtYXN0ZXJpbmcgaGlzIGNvbnF1ZXJvcnMuIEZvciBpdCB3YXMgbm90IGJ5IGdvb2QgZm9ydHVuZSBtZXJlbHkgdGhhdCB0aGUgUm9tYW4gc3RhdGUgcmVhY2hlZCBpdHMgcHJlc2VudCBwbGVuaXR1ZGUgb2YgcG93ZXIsIGJ1dCBieSB0aGUgcGF0aWVudCBlbmR1cmFuY2UgYW5kIHZhbG91ciBvZiB0aG9zZSB3aG8gZnJlZWQgZGFuZ2VycyBpbiBpdHMgYmVoYWxmLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3Qgd2l0aG91dCBibG9vZHkgbG9zc2VzIHRoYXQgZXZlbiBMdWN1bGx1cyBvdmVydGhyZXcgVGlncmFuZXMsIG9yIFNjaXBpbyBBbnRpb2NodXM7IGFuZCBvdXIgZmF0aGVycyBvZiBvbGQgbG9zdCBhIHRob3VzYW5kIHNoaXBzIG9mZiBTaWNpbHksIGFuZCBpbiBJdGFseSBtYW55IGltcGVyYXRvcnMgYW5kIGdlbmVyYWxzLCBub3Qgb25lIG9mIHdob20sIGJ5IGhpcyBkZWZlYXQsIHByZXZlbnRlZCB0aGVtIGZyb20gYWZ0ZXJ3YXJkcyBtYXN0ZXJpbmcgaGlzIGNvbnF1ZXJvcnMuIEZvciBpdCB3YXMgbm90IGJ5IGdvb2QgZm9ydHVuZSBtZXJlbHkgdGhhdCB0aGUgUm9tYW4gc3RhdGUgcmVhY2hlZCBpdHMgcHJlc2VudCBwbGVuaXR1ZGUgb2YgcG93ZXIsIGJ1dCBieSB0aGUgcGF0aWVudCBlbmR1cmFuY2UgYW5kIHZhbG91ciBvZiB0aG9zZSB3aG8gZnJlZWQgZGFuZ2VycyBpbiBpdHMgYmVoYWxmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkV2ZW4gYXMgaGUgc3Bva2Ugc3VjaCB3b3JkcyBvZiBlbmNvdXJhZ2VtZW50LCBDcmFzc3VzIHNhdyB0aGF0IG5vdCBtYW55IG9mIGhpcyBtZW4gbGlzdGVuZWQgd2l0aCBhbnkgZWFnZXJuZXNzLCBidXQgd2hlbiBoZSBhbHNvIGJhZGUgdGhlbSByYWlzZSB0aGUgYmF0dGxlIGNyeSwgaGUgZGlzY292ZXJlZCBob3cgZGVzcG9uZGVudCBoaXMgYXJteSB3YXMsIHNvIHdlYWssIGZlZWJsZSwgYW5kIHVuZXZlbiB3YXMgdGhlIHNob3V0IHRoZXkgbWFkZSwgd2hpbGUgdGhhdCB3aGljaCBjYW1lIGZyb20gdGhlIEJhcmJhcmlhbnMgd2FzIGNsZWFyIGFuZCBib2xkLiBUaGVuLCBhcyB0aGUgZW5lbXkgZ290IHRvIHdvcmssIHRoZWlyIGxpZ2h0LCBjYXZhbHJ5IHJvZGUgcm91bmQgb24gdGhlIGZsYW5rcyBvZiB0aGUgUm9tYW5zIGFuZCBzaG90IHRoZW0gd2l0aCBhcnJvd3MsIHdoaWxlIHRoZSBtYWlsLWNsYWQgaG9yc2VtZW4gaW4gZnJvbnQsIHBseWluZyB0aGVpciBsb25nIHNwZWFycywga2VwdCBkcml2aW5nIHRoZW0gdG9nZXRoZXIgaW50byBhIG5hcnJvdyBzcGFjZSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+ZXhjZXB0IHRob3NlIHdobywgdG8gZXNjYXBlIGRlYXRoIGZyb20gdGhlIGFycm93cywgbWFkZSBib2xkIHRvIHJ1c2ggZGVzcGVyYXRlbHkgdXBvbiB0aGVpciBmb2VzLiBUaGVzZSBkaWQgbGl0dGxlIGRhbWFnZSwgYnV0IG1ldCB3aXRoIGEgc3BlZWR5IGRlYXRoIGZyb20gZ3JlYXQgYW5kIGZhdGFsIHdvdW5kcywgc2luY2UgdGhlIHNwZWFyIHdoaWNoIHRoZSBQYXJ0aGlhbnMgdGhydXN0IGludG8gdGhlIGhvcnNlcyB3YXMgaGVhdnkgd2l0aCBzdGVlbCwgYW5kIG9mdGVuIGhhZCBpbXBldHVzIGVub3VnaCB0byBwaWVyY2UgdGhyb3VnaCB0d28gbWVuIGF0IG9uY2UuIEFmdGVyIGZpZ2h0aW5nIGluIHRoaXMgbWFubmVyIHRpbGwgbmlnaHQgY2FtZSBvbiwgdGhlIFBhcnRoaWFucyB3aXRoZHJldywgc2F5aW5nIHRoYXQgdGhleSB3b3VsZCBncmFudCBDcmFzc3VzIG9uZSBuaWdodCBpbiB3aGljaCB0byBiZXdhaWwgaGlzIHNvbiwgdW5sZXNzLCB3aXRoIGEgYmV0dGVyIHJlZ2FyZCBmb3IgaGlzIG93biBpbnRlcmVzdHMsIGhlIHNob3VsZCBjb25zZW50IHRvIGdvIHRvIEFyc2FjZXMgaW5zdGVhZCBvZiBiZWluZyBjYXJyaWVkIHRoZXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiBhcyBoZSBzcG9rZSBzdWNoIHdvcmRzIG9mIGVuY291cmFnZW1lbnQsIENyYXNzdXMgc2F3IHRoYXQgbm90IG1hbnkgb2YgaGlzIG1lbiBsaXN0ZW5lZCB3aXRoIGFueSBlYWdlcm5lc3MsIGJ1dCB3aGVuIGhlIGFsc28gYmFkZSB0aGVtIHJhaXNlIHRoZSBiYXR0bGUgY3J5LCBoZSBkaXNjb3ZlcmVkIGhvdyBkZXNwb25kZW50IGhpcyBhcm15IHdhcywgc28gd2VhaywgZmVlYmxlLCBhbmQgdW5ldmVuIHdhcyB0aGUgc2hvdXQgdGhleSBtYWRlLCB3aGlsZSB0aGF0IHdoaWNoIGNhbWUgZnJvbSB0aGUgQmFyYmFyaWFucyB3YXMgY2xlYXIgYW5kIGJvbGQuIFRoZW4sIGFzIHRoZSBlbmVteSBnb3QgdG8gd29yaywgdGhlaXIgbGlnaHQsIGNhdmFscnkgcm9kZSByb3VuZCBvbiB0aGUgZmxhbmtzIG9mIHRoZSBSb21hbnMgYW5kIHNob3QgdGhlbSB3aXRoIGFycm93cywgd2hpbGUgdGhlIG1haWwtY2xhZCBob3JzZW1lbiBpbiBmcm9udCwgcGx5aW5nIHRoZWlyIGxvbmcgc3BlYXJzLCBrZXB0IGRyaXZpbmcgdGhlbSB0b2dldGhlciBpbnRvIGEgbmFycm93IHNwYWNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmV4Y2VwdCB0aG9zZSB3aG8sIHRvIGVzY2FwZSBkZWF0aCBmcm9tIHRoZSBhcnJvd3MsIG1hZGUgYm9sZCB0byBydXNoIGRlc3BlcmF0ZWx5IHVwb24gdGhlaXIgZm9lcy4gVGhlc2UgZGlkIGxpdHRsZSBkYW1hZ2UsIGJ1dCBtZXQgd2l0aCBhIHNwZWVkeSBkZWF0aCBmcm9tIGdyZWF0IGFuZCBmYXRhbCB3b3VuZHMsIHNpbmNlIHRoZSBzcGVhciB3aGljaCB0aGUgUGFydGhpYW5zIHRocnVzdCBpbnRvIHRoZSBob3JzZXMgd2FzIGhlYXZ5IHdpdGggc3RlZWwsIGFuZCBvZnRlbiBoYWQgaW1wZXR1cyBlbm91Z2ggdG8gcGllcmNlIHRocm91Z2ggdHdvIG1lbiBhdCBvbmNlLiBBZnRlciBmaWdodGluZyBpbiB0aGlzIG1hbm5lciB0aWxsIG5pZ2h0IGNhbWUgb24sIHRoZSBQYXJ0aGlhbnMgd2l0aGRyZXcsIHNheWluZyB0aGF0IHRoZXkgd291bGQgZ3JhbnQgQ3Jhc3N1cyBvbmUgbmlnaHQgaW4gd2hpY2ggdG8gYmV3YWlsIGhpcyBzb24sIHVubGVzcywgd2l0aCBhIGJldHRlciByZWdhcmQgZm9yIGhpcyBvd24gaW50ZXJlc3RzLCBoZSBzaG91bGQgY29uc2VudCB0byBnbyB0byBBcnNhY2VzIGluc3RlYWQgb2YgYmVpbmcgY2FycmllZCB0aGVyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFBhcnRoaWFucywgdGhlbiwgYml2b3VhY2tlZCBuZWFyIGJ5LCBhbmQgd2VyZSBpbiBoaWdoIGhvcGVzOyBidXQgaXQgd2FzIGEgZ3JpZXZvdXMgbmlnaHQgZm9yIHRoZSBSb21hbnMuIFRoZXkgdG9vayBubyBzdGVwcyB0byBidXJ5IHRoZWlyIGRlYWQgbm9yIHRvIGNhcmUgZm9yIHRoZWlyIHdvdW5kZWQgYW5kIGR5aW5nLCBidXQgZXZlcnkgbWFuIHdhcyBsYW1lbnRpbmcgaGlzIG93biBmYXRlLiBFc2NhcGUgc2VlbWVkIGltcG9zc2libGUsIHdoZXRoZXIgdGhleSB3YWl0ZWQgdGhlcmUgZm9yIGRheSB0byBjb21lLCBvciBwbHVuZ2VkIGJ5IG5pZ2h0IGludG8gYSBsaW1pdGxlc3MgcGxhaW4uIEFtaWQgdGhlaXIgd291bmRlZCBjYXVzZWQgdGhlbSBtdWNoIHBlcnBsZXhpdHk6IHRoZXkgd2VyZSBzdXJlIHRvIGltcGVkZSBmbGlnaHQgaWYgdGhleSB3ZXJlIGNhcnJpZWQgYXdheSwgYW5kIGlmIHRoZXkgd2VyZSBsZWZ0IGJlaGluZCwgdGhlaXIgY3JpZXMgd291bGQgaGVyYWxkIHRvIHRoZSBlbmVteSB0aGUgcmV0cmVhdCBvZiB0aGVpciBjb21wYW5pb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbHRob3VnaCB0aGUgc29sZGllcnMgaGVsZCBDcmFzc3VzIHRvIGJsYW1lIGZvciBhbGwgdGhlaXIgaWxscywgc3RpbGwgdGhleSB5ZWFybmVkIHRvIHNlZSBoaXMgZmFjZSBhbmQgaGVhciBoaXMgdm9pY2UuIEJ1dCBoZSB3YXMgbHlpbmcgb24gdGhlIGdyb3VuZCBieSBoaW1zZWxmLCBlbnZlbG9wZWQgaW4gZGFya25lc3MsIHRvIHRoZSBtdWx0aXR1ZGUgYW4gaWxsdXN0cmF0aW9uIG9mIHRoZSB3YXlzIG9mIGZvcnR1bmUsIGJ1dCB0byB0aGUgd2lzZSBhaXIgZXhhbXBsZSBvZiBmb29saXNoIGFtYml0aW9uLCB3aGljaCB3b3VsZCBub3QgbGV0IGhpbSByZXN0IHNhdGlzZmllZCB0byBiZSBmaXJzdCBhbmQgZ3JlYXRlc3QgYW1vbmcgbWFueSBteXJpYWRzIG9mIG1lbiwgYnV0IG1hZGUgaGltIHRoaW5rLCBiZWNhdXNlIGhlIHdhcyBqdWRnZWQgaW5mZXJpb3IgdG8gdHdvIG1lbiBvbmx5LCB0aGF0IGhlIGxhY2tlZCBldmVyeXRoaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBQYXJ0aGlhbnMsIHRoZW4sIGJpdm91YWNrZWQgbmVhciBieSwgYW5kIHdlcmUgaW4gaGlnaCBob3BlczsgYnV0IGl0IHdhcyBhIGdyaWV2b3VzIG5pZ2h0IGZvciB0aGUgUm9tYW5zLiBUaGV5IHRvb2sgbm8gc3RlcHMgdG8gYnVyeSB0aGVpciBkZWFkIG5vciB0byBjYXJlIGZvciB0aGVpciB3b3VuZGVkIGFuZCBkeWluZywgYnV0IGV2ZXJ5IG1hbiB3YXMgbGFtZW50aW5nIGhpcyBvd24gZmF0ZS4gRXNjYXBlIHNlZW1lZCBpbXBvc3NpYmxlLCB3aGV0aGVyIHRoZXkgd2FpdGVkIHRoZXJlIGZvciBkYXkgdG8gY29tZSwgb3IgcGx1bmdlZCBieSBuaWdodCBpbnRvIGEgbGltaXRsZXNzIHBsYWluLiBBbWlkIHRoZWlyIHdvdW5kZWQgY2F1c2VkIHRoZW0gbXVjaCBwZXJwbGV4aXR5OiB0aGV5IHdlcmUgc3VyZSB0byBpbXBlZGUgZmxpZ2h0IGlmIHRoZXkgd2VyZSBjYXJyaWVkIGF3YXksIGFuZCBpZiB0aGV5IHdlcmUgbGVmdCBiZWhpbmQsIHRoZWlyIGNyaWVzIHdvdWxkIGhlcmFsZCB0byB0aGUgZW5lbXkgdGhlIHJldHJlYXQgb2YgdGhlaXIgY29tcGFuaW9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsdGhvdWdoIHRoZSBzb2xkaWVycyBoZWxkIENyYXNzdXMgdG8gYmxhbWUgZm9yIGFsbCB0aGVpciBpbGxzLCBzdGlsbCB0aGV5IHllYXJuZWQgdG8gc2VlIGhpcyBmYWNlIGFuZCBoZWFyIGhpcyB2b2ljZS4gQnV0IGhlIHdhcyBseWluZyBvbiB0aGUgZ3JvdW5kIGJ5IGhpbXNlbGYsIGVudmVsb3BlZCBpbiBkYXJrbmVzcywgdG8gdGhlIG11bHRpdHVkZSBhbiBpbGx1c3RyYXRpb24gb2YgdGhlIHdheXMgb2YgZm9ydHVuZSwgYnV0IHRvIHRoZSB3aXNlIGFpciBleGFtcGxlIG9mIGZvb2xpc2ggYW1iaXRpb24sIHdoaWNoIHdvdWxkIG5vdCBsZXQgaGltIHJlc3Qgc2F0aXNmaWVkIHRvIGJlIGZpcnN0IGFuZCBncmVhdGVzdCBhbW9uZyBtYW55IG15cmlhZHMgb2YgbWVuLCBidXQgbWFkZSBoaW0gdGhpbmssIGJlY2F1c2UgaGUgd2FzIGp1ZGdlZCBpbmZlcmlvciB0byB0d28gbWVuIG9ubHksIHRoYXQgaGUgbGFja2VkIGV2ZXJ5dGhpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdGhlbiwgT2N0YXZpdXMgdGhlIGxlZ2F0ZSBhbmQgQ2Fzc2l1cyB0cmllZCB0byByb3VzZSBoaW0gdXAgYW5kIGVuY291cmFnZSBoaW0uIEJ1dCBzaW5jZSBoZSB3YXMgaW4gdXR0ZXIgZGVzcGFpciwgdGhleSBjYWxsZWQgdG9nZXRoZXIgb24gdGhlaXIgb3duIGF1dGhvcml0eSB0aGUgY2VudHVyaW9ucyBhbWlkIGNhcHRhaW5zLCBhbmQgd2hlbiB0aGV5IGhhZCBkZWNpZGVkLCB1cG9uIGRlbGliZXJhdGlvbiwgbm90IHRvIHJlbWFpbiB3aGVyZSB0aGV5IHdlcmUsIHRoZXkgcHV0IHRoZSBhcm15IGluIG1vdGlvbiB3aXRob3V0IHRydW1wZXQgc2lnbmFsLCBhbmQgaW4gc2lsZW5jZSBhdCBmaXJzdC4gVGhlbiB0aGUgc2ljayBhbmQgd291bmRlZCBwZXJjZWl2ZWQgdGhhdCB0aGVpciBjb21yYWRlcyB3ZXJlIGFiYW5kb25pbmcgdGhlbSBhbmQgZHJlYWRmdWwgZGlzb3JkZXIgYW5kIGNvbmZ1c2lvbiwgYWNjb21wYW5pZWQgYnkgZ3JvYW5zIGFuZCBzaG91dHMsIGZpbGxlZCB0aGUgY2FtcC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFmdGVyIHRoaXMsIGFzIHRoZXkgdHJpZWQgdG8gYWR2YW5jZSwgZGlzb3JkZXIgYW5kIHBhbmljIHNlaXplZCB1cG9uIHRoZW0sIGZvciB0aGV5IGZlbHQgc3VyZSB0aGF0IHRoZSBlbmVteSB3YXMgY29pbmluZyBhZ2FpbnN0IHRoZW0uIEZyZXF1ZW50bHkgdGhleSB3b3VsZCBjaGFuZ2UgdGhlaXIgY291cnNlLCBmcmVxdWVudGx5IHRoZXkgd291bGQgZm9ybSBpbiBvcmRlciBvZiBiYXR0bGUsIHNvbWUgb2YgdGhlIHdvdW5kZWQgd2hvIGZvbGxvd2VkIHRoZW0gaGFkIHRvIGJlIHRha2VuIHVwLCBhbmQgb3RoZXJzIHRvIGJlIGxhaWQgZG93biwgYW5kIHNvIGFsbCB3ZXJlIGRlbGF5ZWQsIGV4Y2VwdCB0aHJlZSBodW5kcmVkIGhvcnNlbWVuIHVuZGVyIElnbmF0aXVzLCB3aG8gcmVhY2hlZCBDYXJyaGFlIGFib3V0IG1pZG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5JZ25hdGl1cyBoYWlsZWQgdGhlIHNlbnRpbmVscyBvbiB0aGUgd2FsbHMgaW4gdGhlIFJvbWFuIHRvbmd1ZSwgYW5kIHdoZW4gdGhleSBhbnN3ZXJlZCwgb3JkZXJlZCB0aGVtIHRvIHRlbGwgQ29wb25pdXMsIHRoZWlyIGNvbW1hbmRlciwgdGhhdCB0aGVyZSBoYWQgYmVlbiBhIGdyZWF0IGJhdHRsZSBiZXR3ZWVuIENyYXNzdXMgYW5kIHRoZSBQYXJ0aGlhbnMuIFRoZW4sIHdpdGhvdXQgYW5vdGhlciB3b3JkLCBhbmQgd2l0aG91dCBldmVuIHRlbGxpbmcgd2hvIGhlIHdhcywgaGUgcm9kZSBvZmYgdG8gWmV1Z21hLiBIZSBzYXZlZCBoaW1zZWxmIGFuZCBoaXMgbWVuLCBidXQgZ290IGEgYmFkIG5hbWUgZm9yIGRlc2VydGluZyBoaXMgZ2VuZXJhbC4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIG1lc3NhZ2Ugc2hvdXRlZCB0byBDb3Bvbml1cyBhdCB0aGF0IHRpbWUgd2FzIG9mIHNvbWUgYWR2YW50YWdlIHRvIENyYXNzdXMuIEZvciBDb3Bvbml1cywgY29uY2x1ZGluZyB0aGF0IHRoZSBoYXN0ZSBhbmQgYnJldml0eSBvZiB0aGUgbWVzc2FnZSBhcmd1ZWQgYSBiZWFyZXIgb2Ygbm8gZ29vZCBuZXdzLCBvcmRlcmVkIGhpcyBtZW4gdG8gYXJtIGZvcnRod2l0aCwgYW5kIGFzIHNvb24gYXMgaGUgbGVhcm5lZCB0aGF0IENyYXNzdXMgd2FzIG9uIHRoZSBtYXJjaCwgaGUgd2VudCBvdXQgdG8gbWVldCBoaW0sIHJlbGlldmVkIGhpbSwgYW5kIGVzY29ydGVkIGhpcyBhcm15IGludG8gdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdGhlbiwgT2N0YXZpdXMgdGhlIGxlZ2F0ZSBhbmQgQ2Fzc2l1cyB0cmllZCB0byByb3VzZSBoaW0gdXAgYW5kIGVuY291cmFnZSBoaW0uIEJ1dCBzaW5jZSBoZSB3YXMgaW4gdXR0ZXIgZGVzcGFpciwgdGhleSBjYWxsZWQgdG9nZXRoZXIgb24gdGhlaXIgb3duIGF1dGhvcml0eSB0aGUgY2VudHVyaW9ucyBhbWlkIGNhcHRhaW5zLCBhbmQgd2hlbiB0aGV5IGhhZCBkZWNpZGVkLCB1cG9uIGRlbGliZXJhdGlvbiwgbm90IHRvIHJlbWFpbiB3aGVyZSB0aGV5IHdlcmUsIHRoZXkgcHV0IHRoZSBhcm15IGluIG1vdGlvbiB3aXRob3V0IHRydW1wZXQgc2lnbmFsLCBhbmQgaW4gc2lsZW5jZSBhdCBmaXJzdC4gVGhlbiB0aGUgc2ljayBhbmQgd291bmRlZCBwZXJjZWl2ZWQgdGhhdCB0aGVpciBjb21yYWRlcyB3ZXJlIGFiYW5kb25pbmcgdGhlbSBhbmQgZHJlYWRmdWwgZGlzb3JkZXIgYW5kIGNvbmZ1c2lvbiwgYWNjb21wYW5pZWQgYnkgZ3JvYW5zIGFuZCBzaG91dHMsIGZpbGxlZCB0aGUgY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciB0aGlzLCBhcyB0aGV5IHRyaWVkIHRvIGFkdmFuY2UsIGRpc29yZGVyIGFuZCBwYW5pYyBzZWl6ZWQgdXBvbiB0aGVtLCBmb3IgdGhleSBmZWx0IHN1cmUgdGhhdCB0aGUgZW5lbXkgd2FzIGNvaW5pbmcgYWdhaW5zdCB0aGVtLiBGcmVxdWVudGx5IHRoZXkgd291bGQgY2hhbmdlIHRoZWlyIGNvdXJzZSwgZnJlcXVlbnRseSB0aGV5IHdvdWxkIGZvcm0gaW4gb3JkZXIgb2YgYmF0dGxlLCBzb21lIG9mIHRoZSB3b3VuZGVkIHdobyBmb2xsb3dlZCB0aGVtIGhhZCB0byBiZSB0YWtlbiB1cCwgYW5kIG90aGVycyB0byBiZSBsYWlkIGRvd24sIGFuZCBzbyBhbGwgd2VyZSBkZWxheWVkLCBleGNlcHQgdGhyZWUgaHVuZHJlZCBob3JzZW1lbiB1bmRlciBJZ25hdGl1cywgd2hvIHJlYWNoZWQgQ2FycmhhZSBhYm91dCBtaWRuaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPklnbmF0aXVzIGhhaWxlZCB0aGUgc2VudGluZWxzIG9uIHRoZSB3YWxscyBpbiB0aGUgUm9tYW4gdG9uZ3VlLCBhbmQgd2hlbiB0aGV5IGFuc3dlcmVkLCBvcmRlcmVkIHRoZW0gdG8gdGVsbCBDb3Bvbml1cywgdGhlaXIgY29tbWFuZGVyLCB0aGF0IHRoZXJlIGhhZCBiZWVuIGEgZ3JlYXQgYmF0dGxlIGJldHdlZW4gQ3Jhc3N1cyBhbmQgdGhlIFBhcnRoaWFucy4gVGhlbiwgd2l0aG91dCBhbm90aGVyIHdvcmQsIGFuZCB3aXRob3V0IGV2ZW4gdGVsbGluZyB3aG8gaGUgd2FzLCBoZSByb2RlIG9mZiB0byBaZXVnbWEuIEhlIHNhdmVkIGhpbXNlbGYgYW5kIGhpcyBtZW4sIGJ1dCBnb3QgYSBiYWQgbmFtZSBmb3IgZGVzZXJ0aW5nIGhpcyBnZW5lcmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBtZXNzYWdlIHNob3V0ZWQgdG8gQ29wb25pdXMgYXQgdGhhdCB0aW1lIHdhcyBvZiBzb21lIGFkdmFudGFnZSB0byBDcmFzc3VzLiBGb3IgQ29wb25pdXMsIGNvbmNsdWRpbmcgdGhhdCB0aGUgaGFzdGUgYW5kIGJyZXZpdHkgb2YgdGhlIG1lc3NhZ2UgYXJndWVkIGEgYmVhcmVyIG9mIG5vIGdvb2QgbmV3cywgb3JkZXJlZCBoaXMgbWVuIHRvIGFybSBmb3J0aHdpdGgsIGFuZCBhcyBzb29uIGFzIGhlIGxlYXJuZWQgdGhhdCBDcmFzc3VzIHdhcyBvbiB0aGUgbWFyY2gsIGhlIHdlbnQgb3V0IHRvIG1lZXQgaGltLCByZWxpZXZlZCBoaW0sIGFuZCBlc2NvcnRlZCBoaXMgYXJteSBpbnRvIHRoZSBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgdGhlIG5pZ2h0IHRoZSBQYXJ0aGlhbnMsIGFsdGhvdWdoIHRoZXkgd2VyZSBhd2FyZSBvZiB0aGUgZmxpZ2h0IG9mIHRoZSBSb21hbnMsIGRpZCBub3QgcHVyc3VlOyBidXQgYXMgc29vbiBhcyBkYXkgY2FtZSwgdGhleSBhdHRhY2tlZCBhbmQgc2xhdWdodGVyZWQgdGhvc2Ugd2hvIGhhZCBiZWVuIGxlZnQgYmVoaW5kIGluIHRoZSBSb21hbiBjYW1wLCB0byB0aGUgbnVtYmVyIG9mIGZvdXIgdGhvdXNhbmQsIGFuZCB0aGVuIHJvZGUgYWJvdXQgYW5kIHNlaXplZCBtYW55IHdobyB3ZXJlIHdhbmRlcmluZyBpbiB0aGUgcGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvdXIgY29ob3J0cyB0b2dldGhlciwgYWxzbywgd2hpY2ggVmFyZ29udGludXMgdGhlIGxlZ2F0ZSBoYWQgc3VmZmVyZWQgdG8gZ2V0IGRldGFjaGVkIGZyb20gdGhlIG1haW4gYm9keSB3aGlsZSBpdCB3YXMgc3RpbGwgZGFyaywgYW5kIHdoaWNoIGhhZCBsb3N0IHRoZWlyIHdheSwgd2VyZSBzdXJyb3VuZGVkIG9uIGEgc29ydCBvZiBoaWxsLCBhbmQgY3V0IHRvIHBpZWNlcyBhcyB0aGV5IGZvdWdodCwgYWxsIGV4Y2VwdCB0d2VudHkgbWVuLiBUaGUgUGFydGhpYW5zLCBhZG1pcmluZyB0aGVzZSBtZW4sIHdobyB0cmllZCB0byBwdXNoIHRoZWlyIHdheSB0aHJvdWdoIHRoZW0gd2l0aCBkcmF3biBzd29yZHMsIG1hZGUgd2F5IGZvciB0aGVtIGFuZCBzdWZmZXJlZCB0aGVtIHRvIHBhc3MgdGhyb3VnaCBhbmQgbWFyY2ggZGVsaWJlcmF0ZWx5IHRvIENhcnJoYWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RHVyaW5nIHRoZSBuaWdodCB0aGUgUGFydGhpYW5zLCBhbHRob3VnaCB0aGV5IHdlcmUgYXdhcmUgb2YgdGhlIGZsaWdodCBvZiB0aGUgUm9tYW5zLCBkaWQgbm90IHB1cnN1ZTsgYnV0IGFzIHNvb24gYXMgZGF5IGNhbWUsIHRoZXkgYXR0YWNrZWQgYW5kIHNsYXVnaHRlcmVkIHRob3NlIHdobyBoYWQgYmVlbiBsZWZ0IGJlaGluZCBpbiB0aGUgUm9tYW4gY2FtcCwgdG8gdGhlIG51bWJlciBvZiBmb3VyIHRob3VzYW5kLCBhbmQgdGhlbiByb2RlIGFib3V0IGFuZCBzZWl6ZWQgbWFueSB3aG8gd2VyZSB3YW5kZXJpbmcgaW4gdGhlIHBsYWluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvdXIgY29ob3J0cyB0b2dldGhlciwgYWxzbywgd2hpY2ggVmFyZ29udGludXMgdGhlIGxlZ2F0ZSBoYWQgc3VmZmVyZWQgdG8gZ2V0IGRldGFjaGVkIGZyb20gdGhlIG1haW4gYm9keSB3aGlsZSBpdCB3YXMgc3RpbGwgZGFyaywgYW5kIHdoaWNoIGhhZCBsb3N0IHRoZWlyIHdheSwgd2VyZSBzdXJyb3VuZGVkIG9uIGEgc29ydCBvZiBoaWxsLCBhbmQgY3V0IHRvIHBpZWNlcyBhcyB0aGV5IGZvdWdodCwgYWxsIGV4Y2VwdCB0d2VudHkgbWVuLiBUaGUgUGFydGhpYW5zLCBhZG1pcmluZyB0aGVzZSBtZW4sIHdobyB0cmllZCB0byBwdXNoIHRoZWlyIHdheSB0aHJvdWdoIHRoZW0gd2l0aCBkcmF3biBzd29yZHMsIG1hZGUgd2F5IGZvciB0aGVtIGFuZCBzdWZmZXJlZCB0aGVtIHRvIHBhc3MgdGhyb3VnaCBhbmQgbWFyY2ggZGVsaWJlcmF0ZWx5IHRvIENhcnJoYWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBmYWxzZSByZXBvcnQgbm93IHJlYWNoZWQgU3VyZW5hIHRoYXQgQ3Jhc3N1cywgYWxvbmcgd2l0aCwgdGhlIG1lbiBvZiBoaWdoZXN0IHJhbmssIGhhZCBtYWRlIGhpcyBlc2NhcGUsIGFuZCB0aGF0IHRoZSBmdWdpdGl2ZXMgd2hvIGhhZCBzdHJlYW1lZCBpbnRvIENhcnJoYWUgd2VyZSBhIG1peGVkIHJhYmJsZSB1bndvcnRoeSBvZiBoaXMgbm90aWNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1cHBvc2luZywgdGhlcmVmb3JlLCB0aGF0IGhlIGhhZCBsb3N0IHRoZSBmcnVpdHMgb2YgaGlzIHZpY3RvcnksIGJ1dCBiZWluZyBzdGlsbCBpbiBkb3VidCBhbmQgd2lzaGluZyB0byBsZWFybiB0aGUgdHJ1dGgsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgZWl0aGVyIHdhaXQgdGhlcmUgYW5kIGxheSBzaWVnZSB0byBDcmFzc3VzIGluIHRoZSBjaXR5LCBvciBlbHNlIGxldCBDYXJyaGFlIGFsb25lIGFuZCBwdXJzdWUgaGltLCBoZSBzZW50IG9uZSBvZiBoaXMgYXR0ZW5kYW50cyB3aG8gY291bGQgc3BlYWsgYm90aCBsYW5ndWFnZXMgdXAgdG8gdGhlIHdhbGxzLCB3aXRoIG9yZGVycyB0byBjYWxsIG91dCBpbiB0aGUgUm9tYW4gdG9uZ3VlIGZvciBDcmFzc3VzIGhpbXNlbGYgb3IgQ2Fzc2l1cywgc2F5aW5nIHRoYXQgU3VyZW5hIHdpc2hlZCB0byBoYXZlIGEgY29uZmVyZW5jZSB3aXRoIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBpbnRlcnByZXRlciBnYXZlIHRoaXMgbWVzc2FnZSwgYW5kIHdoZW4gaXQgd2FzIHJlcG9ydGVkIHRvIENyYXNzdXMsIGhlIGFjY2VwdGVkIHRoZSBpbnZpdGF0aW9uLiBBIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIHRoZXJlIGNhbWUgZnJvbSB0aGUgQmFyYmFyaWFucyBzb21lIEFyYWJzLCB3aG8ga25ldyBDcmFzc3VzIGFuZCBDYXNzaXVzIHdlbGwgYnkgc2lnaHQsIGhhdmluZyBiZWVuIGluIHRoZWlyIGNhbXAgYmVmb3JlIHRoZSBiYXR0bGUuIFdoZW4gdGhlc2UgbWVuIHNhdyBDYXNzaXVzIG9uIHRoZSB3YWxsLCB0aGV5IHNhaWQgdGhhdCBTdXJlbmEgcHJvcG9zZWQgYSB0cnVjZSwgYW5kIG9mZmVyZWQgdGhlbSBzYWZlIGNvbmR1Y3QgaWYgdGhleSB3b3VsZCBiZSBmcmllbmRzIG9mIHRoZSBraW5nIGFuZCBsZWF2ZSBNZXNvcG90YW1pYTsgZm9yIHRoaXMgaGUgc2F3IHdhcyBtb3JlIGFkdmFudGFnZW91cyB0byBib3RoIHBhcnRpZXMgdGhhbiBhbnkgcmVzb3J0IHRvIGV4dHJlbWUgbWVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNhc3NpdXMgYWNjZXB0ZWQgdGhlIHByb3Bvc2FsLCBhbmQgYXNrZWQgdGhhdCB0aW1lIGFuZCBwbGFjZSBiZSBmaXhlZCBmb3IgYSBjb25mZXJlbmNlIGJldHdlZW4gU3VyZW5hIGFuZCBDcmFzc3VzLiBUaGUgbWVuIHNhaWQgdGhhdCB0aGlzIHNob3VsZCBiZSBkb25lLCBhbmQgcm9kZSBhd2F5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1cHBvc2luZywgdGhlcmVmb3JlLCB0aGF0IGhlIGhhZCBsb3N0IHRoZSBmcnVpdHMgb2YgaGlzIHZpY3RvcnksIGJ1dCBiZWluZyBzdGlsbCBpbiBkb3VidCBhbmQgd2lzaGluZyB0byBsZWFybiB0aGUgdHJ1dGgsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgZWl0aGVyIHdhaXQgdGhlcmUgYW5kIGxheSBzaWVnZSB0byBDcmFzc3VzIGluIHRoZSBjaXR5LCBvciBlbHNlIGxldCBDYXJyaGFlIGFsb25lIGFuZCBwdXJzdWUgaGltLCBoZSBzZW50IG9uZSBvZiBoaXMgYXR0ZW5kYW50cyB3aG8gY291bGQgc3BlYWsgYm90aCBsYW5ndWFnZXMgdXAgdG8gdGhlIHdhbGxzLCB3aXRoIG9yZGVycyB0byBjYWxsIG91dCBpbiB0aGUgUm9tYW4gdG9uZ3VlIGZvciBDcmFzc3VzIGhpbXNlbGYgb3IgQ2Fzc2l1cywgc2F5aW5nIHRoYXQgU3VyZW5hIHdpc2hlZCB0byBoYXZlIGEgY29uZmVyZW5jZSB3aXRoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBpbnRlcnByZXRlciBnYXZlIHRoaXMgbWVzc2FnZSwgYW5kIHdoZW4gaXQgd2FzIHJlcG9ydGVkIHRvIENyYXNzdXMsIGhlIGFjY2VwdGVkIHRoZSBpbnZpdGF0aW9uLiBBIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIHRoZXJlIGNhbWUgZnJvbSB0aGUgQmFyYmFyaWFucyBzb21lIEFyYWJzLCB3aG8ga25ldyBDcmFzc3VzIGFuZCBDYXNzaXVzIHdlbGwgYnkgc2lnaHQsIGhhdmluZyBiZWVuIGluIHRoZWlyIGNhbXAgYmVmb3JlIHRoZSBiYXR0bGUuIFdoZW4gdGhlc2UgbWVuIHNhdyBDYXNzaXVzIG9uIHRoZSB3YWxsLCB0aGV5IHNhaWQgdGhhdCBTdXJlbmEgcHJvcG9zZWQgYSB0cnVjZSwgYW5kIG9mZmVyZWQgdGhlbSBzYWZlIGNvbmR1Y3QgaWYgdGhleSB3b3VsZCBiZSBmcmllbmRzIG9mIHRoZSBraW5nIGFuZCBsZWF2ZSBNZXNvcG90YW1pYTsgZm9yIHRoaXMgaGUgc2F3IHdhcyBtb3JlIGFkdmFudGFnZW91cyB0byBib3RoIHBhcnRpZXMgdGhhbiBhbnkgcmVzb3J0IHRvIGV4dHJlbWUgbWVhc3VyZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNhc3NpdXMgYWNjZXB0ZWQgdGhlIHByb3Bvc2FsLCBhbmQgYXNrZWQgdGhhdCB0aW1lIGFuZCBwbGFjZSBiZSBmaXhlZCBmb3IgYSBjb25mZXJlbmNlIGJldHdlZW4gU3VyZW5hIGFuZCBDcmFzc3VzLiBUaGUgbWVuIHNhaWQgdGhhdCB0aGlzIHNob3VsZCBiZSBkb25lLCBhbmQgcm9kZSBhd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgU3VyZW5hIHdhcyBkZWxpZ2h0ZWQgdGhhdCB0aGUgbWVuIHdlcmUgd2hlcmUgaGUgY291bGQgYmVzaWVnZSB0aGVtLCBhbmQgd2hlbiBkYXkgY2FtZSwgaGUgbGVkIGhpcyBQYXJ0aGlhbnMgdXAgYWdhaW5zdCB0aGUgY2l0eS4gV2l0aCBtYW55IGluc3VsdHMgdGhleSBvcmRlcmVkIHRpbWUgUm9tYW5zLCBpZiB0aGV5IHdpc2hlZCB0byBvYnRhaW4gYSB0cnVjZSwgdG8gZGVsaXZlciBDcmFzc3VzIGFuZCBDYXNzaXVzIGludG8gdGhlaXIgaGFuZHMgaW4gZmV0dGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyB3ZXJlIGRpc3RyZXNzZWQgdG8gZmluZCB0aGVtc2VsdmVzIGRlY2VpdmVkLCBhbmQgdGVsbGluZyBDcmFzc3VzIHRvIGFiYW5kb24gaGlzIGRpc3RhbnQgYW5kIHZhaW4gaG9wZXMgb2YgYWlkIGZyb20gdGhlIEFybWVuaWFucywgcHJlcGFyZWQgZm9yIGZsaWdodCwgb2Ygd2hpY2ggbm9uZSBvZiB0aGUgbWVuIG9mIENhcnJoYWUgd2VyZSB0byBrbm93IGJlZm9yZWhhbmQuIEJ1dCBBbmRyb21hY2h1cywgdGhlIG1vc3QgZmFpdGhsZXNzIG9mIG1lbiwgbGVhcm5lZCBvZiBpdCwgZm9yIENyYXNzdXMgbm90IG9ubHkgY29uZmlkZWQgdGhlIHNlY3JldCB0byBoaW0sIGJ1dCBtYWRlIGhpbSB0aGUgZ3VpZGUgZm9yIHRoZSBqb3VybmV5LiBBY2NvcmRpbmdseSwgZXZlcnl0aGluZyB3YXMga25vd24gdG8gdGhlIFBhcnRoaWFucywgZm9yIEFuZHJvbWFjaHVzIHJlcG9ydGVkIHRvIHRoZW0gYWxsIHRoZSBkZXRhaWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgaXQgaXMgbm90IHRoZSBjdXN0b20sIGFuZCBzbyBub3QgZWFzeSwgZm9yIHRoZSBQYXJ0aGlhbnMgdG8gZmlnaHQgYnkgbmlnaHQsIGFuZCBzaW5jZSBDcmFzc3VzIHNldCBvdXQgYnkgbmlnaHQsIEFuZHJvbWFjaHVzLCBieSBsZWFkaW5nIHRoZSBmdWdpdGl2ZXMgbm93IGJ5IG9uZSByb3V0ZSBhbmQgbm93IGJ5IGFub3RoZXIsIGNvbnRyaXZlZCB0aGF0IHRoZSBwdXJzdWVycyBzaG91bGQgbm90IGJlIGxlZnQgZmFyIGJlaGluZCwgYW5kIGZpbmFsbHkgaGUgZGl2ZXJ0ZWQgdGhlIG1hcmNoIGludG8gZGVlcCBtYXJzaGVzIGFuZCByZWdpb25zIGZ1bGwgb2YgZGl0Y2hlcywgdGh1cyBtYWtpbmcgaXQgZGlmZmljdWx0IGFuZCBjaXJjdWl0b3VzIGZvciB0aG9zZSB3aG8gc3RpbGwgZm9sbG93ZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2VyZSBzb21lIHdobyBjb25qZWN0dXJlZCB0aGF0IHRoZSwgdHdpc3RpbmcgYW5kIHR1cm5pbmcgb2YgQW5kcm9tYWNodXMgYm9kZWQgbm8gZ29vZCwgYW5kIHRoZXJlZm9yZSBkaWQgbm90IGZvbGxvdyBoaW0uIENhc3NpdXMsIGluZGVlZCwgd2VudCBiYWNrIGFnYWluIHRvIENhcnJoYWUsIGFuZCB3aGVuIGhpcyBndWlkZXMsIHdobyB3ZXJlIEFyYWJzLCB1cmdlZCBoaW0gdG8gd2FpdCB0aGVyZSB1bnRpbCB0aGUgbW9vbiBoYWQgcGFzc2VkIHRoZSBTY29ycGlvbiwgaGUgc2FpZCB0aGF0IGhlIGZlYXJlZCB0aGUgQXJjaGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2FnaXR0YXJpdXMsIHRoZSBzaWduIG9mIHRoZSB6b2RpYWMgZm9sbG93aW5nIFNjb3JwaW8uPC9ub3RlPiBldmVuIG1vcmUgdGhhbiB0aGUgU2NvcnBpb24sIGFuZCByb2RlIG9mZiBpbnRvIFN5cmlhIHdpdGggZml2ZSBodW5kcmVkIGhvcnNlbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgb3RoZXJzLCB0b28sIGVtcGxveWluZyB0cnVzdHkgZ3VpZGVzLCByZWFjaGVkIGEgaGlsbCBjb3VudHJ5IGNhbGxlZCBTaW5uYWNhLCBhbmQgZXN0YWJsaXNoZWQgdGhlbXNlbHZlcyBpbiBzYWZldHkgYmVmb3JlIGRheSBjYW1lLiBUaGVzZSB3ZXJlIGFib3V0IGZpdmUgdGhvdXNhbmQgbWVuLCBhbmQgdGhleSB3ZXJlIGxlZCBieSBPY3Rhdml1cywgYSBicmF2ZSBtYW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IFN1cmVuYSB3YXMgZGVsaWdodGVkIHRoYXQgdGhlIG1lbiB3ZXJlIHdoZXJlIGhlIGNvdWxkIGJlc2llZ2UgdGhlbSwgYW5kIHdoZW4gZGF5IGNhbWUsIGhlIGxlZCBoaXMgUGFydGhpYW5zIHVwIGFnYWluc3QgdGhlIGNpdHkuIFdpdGggbWFueSBpbnN1bHRzIHRoZXkgb3JkZXJlZCB0aW1lIFJvbWFucywgaWYgdGhleSB3aXNoZWQgdG8gb2J0YWluIGEgdHJ1Y2UsIHRvIGRlbGl2ZXIgQ3Jhc3N1cyBhbmQgQ2Fzc2l1cyBpbnRvIHRoZWlyIGhhbmRzIGluIGZldHRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBkaXN0cmVzc2VkIHRvIGZpbmQgdGhlbXNlbHZlcyBkZWNlaXZlZCwgYW5kIHRlbGxpbmcgQ3Jhc3N1cyB0byBhYmFuZG9uIGhpcyBkaXN0YW50IGFuZCB2YWluIGhvcGVzIG9mIGFpZCBmcm9tIHRoZSBBcm1lbmlhbnMsIHByZXBhcmVkIGZvciBmbGlnaHQsIG9mIHdoaWNoIG5vbmUgb2YgdGhlIG1lbiBvZiBDYXJyaGFlIHdlcmUgdG8ga25vdyBiZWZvcmVoYW5kLiBCdXQgQW5kcm9tYWNodXMsIHRoZSBtb3N0IGZhaXRobGVzcyBvZiBtZW4sIGxlYXJuZWQgb2YgaXQsIGZvciBDcmFzc3VzIG5vdCBvbmx5IGNvbmZpZGVkIHRoZSBzZWNyZXQgdG8gaGltLCBidXQgbWFkZSBoaW0gdGhlIGd1aWRlIGZvciB0aGUgam91cm5leS4gQWNjb3JkaW5nbHksIGV2ZXJ5dGhpbmcgd2FzIGtub3duIHRvIHRoZSBQYXJ0aGlhbnMsIGZvciBBbmRyb21hY2h1cyByZXBvcnRlZCB0byB0aGVtIGFsbCB0aGUgZGV0YWlscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCBpcyBub3QgdGhlIGN1c3RvbSwgYW5kIHNvIG5vdCBlYXN5LCBmb3IgdGhlIFBhcnRoaWFucyB0byBmaWdodCBieSBuaWdodCwgYW5kIHNpbmNlIENyYXNzdXMgc2V0IG91dCBieSBuaWdodCwgQW5kcm9tYWNodXMsIGJ5IGxlYWRpbmcgdGhlIGZ1Z2l0aXZlcyBub3cgYnkgb25lIHJvdXRlIGFuZCBub3cgYnkgYW5vdGhlciwgY29udHJpdmVkIHRoYXQgdGhlIHB1cnN1ZXJzIHNob3VsZCBub3QgYmUgbGVmdCBmYXIgYmVoaW5kLCBhbmQgZmluYWxseSBoZSBkaXZlcnRlZCB0aGUgbWFyY2ggaW50byBkZWVwIG1hcnNoZXMgYW5kIHJlZ2lvbnMgZnVsbCBvZiBkaXRjaGVzLCB0aHVzIG1ha2luZyBpdCBkaWZmaWN1bHQgYW5kIGNpcmN1aXRvdXMgZm9yIHRob3NlIHdobyBzdGlsbCBmb2xsb3dlZCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHNvbWUgd2hvIGNvbmplY3R1cmVkIHRoYXQgdGhlLCB0d2lzdGluZyBhbmQgdHVybmluZyBvZiBBbmRyb21hY2h1cyBib2RlZCBubyBnb29kLCBhbmQgdGhlcmVmb3JlIGRpZCBub3QgZm9sbG93IGhpbS4gQ2Fzc2l1cywgaW5kZWVkLCB3ZW50IGJhY2sgYWdhaW4gdG8gQ2FycmhhZSwgYW5kIHdoZW4gaGlzIGd1aWRlcywgd2hvIHdlcmUgQXJhYnMsIHVyZ2VkIGhpbSB0byB3YWl0IHRoZXJlIHVudGlsIHRoZSBtb29uIGhhZCBwYXNzZWQgdGhlIFNjb3JwaW9uLCBoZSBzYWlkIHRoYXQgaGUgZmVhcmVkIHRoZSBBcmNoZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNhZ2l0dGFyaXVzLCB0aGUgc2lnbiBvZiB0aGUgem9kaWFjIGZvbGxvd2luZyBTY29ycGlvLjwvbm90ZT4gZXZlbiBtb3JlIHRoYW4gdGhlIFNjb3JwaW9uLCBhbmQgcm9kZSBvZmYgaW50byBTeXJpYSB3aXRoIGZpdmUgaHVuZHJlZCBob3JzZW1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvdGhlcnMsIHRvbywgZW1wbG95aW5nIHRydXN0eSBndWlkZXMsIHJlYWNoZWQgYSBoaWxsIGNvdW50cnkgY2FsbGVkIFNpbm5hY2EsIGFuZCBlc3RhYmxpc2hlZCB0aGVtc2VsdmVzIGluIHNhZmV0eSBiZWZvcmUgZGF5IGNhbWUuIFRoZXNlIHdlcmUgYWJvdXQgZml2ZSB0aG91c2FuZCBtZW4sIGFuZCB0aGV5IHdlcmUgbGVkIGJ5IE9jdGF2aXVzLCBhIGJyYXZlIG1hbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgZGF5IGZvdW5kIENyYXNzdXMgYSBwcmV5IHRvIHRoZSB3aWxlcyBvZiBBbmRyb21hY2h1cyBpbiB0aGUgZGlmZmljdWx0IHBsYWNlcyBhbmQgdGhlIG1hcnNoLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgd2l0aCBoaW0gZm91ciBjb2hvcnRzIG9mIG1lbi1hdC1hcm1zLCBhIGZldyBob3JzZW1lbiBhbGwgdG9sZCwgYW5kIGZpdmUgbGljdG9ycy4gV2l0aCB0aGVzZSBoZSBnb3QgYmFjayBpbnRvIHRoZSByb2FkLCB3aXRoIGdyZWF0IGRpZmZpY3VsdHksIHdoZW4gdGhlIGVuZW15IGF0IG9uY2UgcHJlc3NlZCB1cG9uIGhpbSwgYW5kIHNpbmNlIGhlIHdhcyBhYm91dCB0d2VsdmUgZnVybG9uZ3Mgc2hvcnQgb2YgYSBqdW5jdGlvbiB3aXRoIE9jdGF2aXVzLCBoZSB0b29rIHJlZnVnZSBvbiBhbm90aGVyIGhpbGwsIG5vdCBzbyBkaWZmaWN1bHQgZm9yIGNhdmFscnkgbm9yIHlldCBzbyBzdHJvbmcgYSBwb3NpdGlvbiwgYnV0IG9uZSB0aGF0IGxheSBiZWxvdyBTaW5uYWNhIGFuZCB3YXMgY29ubmVjdGVkIHdpdGggaXQgYnkgYSBsb25nIHJpZGdlIHJ1bm5pbmcgdGhyb3VnaCB0aGUgbWlkc3Qgb2YgdGhlIHBsYWluLiBIaXMgZGFuZ2VyIHdhcyB0aGVyZWZvcmUgdG8gYmUgc2VlbiBieSBPY3Rhdml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIE9jdGF2aXVzIHJhbiBmaXJzdCB3aXRoIGEgZmV3IG1lbiB0byBicmluZyBoaW0gYWlkIGZyb20gdGhlIGhpZ2hlciBncm91bmQ7IHRoZW4gdGhlIHJlc3Qgb2YgaGlzIG1lbiwgcmVwcm9hY2hpbmcgdGhlbXNlbHZlcyB3aXRoIGNvd2FyZGljZSwgcGx1bmdlZCBmb3J3YXJkLCBhbmQgZmFsbGluZyB1cG9uIHRoZSBlbmVteSBhbmQgc3dlZXBpbmcgdGhlbSBmcm9tIHRoZSBoaWxsLCBlbnZlbG9wZWQgQ3Jhc3N1cyByb3VuZCBhYm91dCwgYW5kIGNvdmVyZWQgaGltIHdpdGggdGhlaXIgc2hpZWxkcywgYm9sZGx5IGRlY2xhcmluZyB0aGF0IG5vIFBhcnRoaWFuIG1pc3NpbGUgc2hvdWxkIHNtaXRlIHRoZWlyIGltcGVyYXRvciB1bnRpbCB0aGV5IGhhZCBhbGwgZGllZCBmaWdodGluZyBpbiBoaXMgZGVmZW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgd2l0aCBoaW0gZm91ciBjb2hvcnRzIG9mIG1lbi1hdC1hcm1zLCBhIGZldyBob3JzZW1lbiBhbGwgdG9sZCwgYW5kIGZpdmUgbGljdG9ycy4gV2l0aCB0aGVzZSBoZSBnb3QgYmFjayBpbnRvIHRoZSByb2FkLCB3aXRoIGdyZWF0IGRpZmZpY3VsdHksIHdoZW4gdGhlIGVuZW15IGF0IG9uY2UgcHJlc3NlZCB1cG9uIGhpbSwgYW5kIHNpbmNlIGhlIHdhcyBhYm91dCB0d2VsdmUgZnVybG9uZ3Mgc2hvcnQgb2YgYSBqdW5jdGlvbiB3aXRoIE9jdGF2aXVzLCBoZSB0b29rIHJlZnVnZSBvbiBhbm90aGVyIGhpbGwsIG5vdCBzbyBkaWZmaWN1bHQgZm9yIGNhdmFscnkgbm9yIHlldCBzbyBzdHJvbmcgYSBwb3NpdGlvbiwgYnV0IG9uZSB0aGF0IGxheSBiZWxvdyBTaW5uYWNhIGFuZCB3YXMgY29ubmVjdGVkIHdpdGggaXQgYnkgYSBsb25nIHJpZGdlIHJ1bm5pbmcgdGhyb3VnaCB0aGUgbWlkc3Qgb2YgdGhlIHBsYWluLiBIaXMgZGFuZ2VyIHdhcyB0aGVyZWZvcmUgdG8gYmUgc2VlbiBieSBPY3Rhdml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBPY3Rhdml1cyByYW4gZmlyc3Qgd2l0aCBhIGZldyBtZW4gdG8gYnJpbmcgaGltIGFpZCBmcm9tIHRoZSBoaWdoZXIgZ3JvdW5kOyB0aGVuIHRoZSByZXN0IG9mIGhpcyBtZW4sIHJlcHJvYWNoaW5nIHRoZW1zZWx2ZXMgd2l0aCBjb3dhcmRpY2UsIHBsdW5nZWQgZm9yd2FyZCwgYW5kIGZhbGxpbmcgdXBvbiB0aGUgZW5lbXkgYW5kIHN3ZWVwaW5nIHRoZW0gZnJvbSB0aGUgaGlsbCwgZW52ZWxvcGVkIENyYXNzdXMgcm91bmQgYWJvdXQsIGFuZCBjb3ZlcmVkIGhpbSB3aXRoIHRoZWlyIHNoaWVsZHMsIGJvbGRseSBkZWNsYXJpbmcgdGhhdCBubyBQYXJ0aGlhbiBtaXNzaWxlIHNob3VsZCBzbWl0ZSB0aGVpciBpbXBlcmF0b3IgdW50aWwgdGhleSBoYWQgYWxsIGRpZWQgZmlnaHRpbmcgaW4gaGlzIGRlZmVuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgU3VyZW5hLCBvYnNlcnZpbmcgdGhhdCBoaXMgUGFydGhpYW5zIHdlcmUgYWxyZWFkeSBsZXNzIGltcGV0dW91cyBpbiB0aGVpciBhdHRhY2tzLCBhbmQgdGhhdCBpZiBuaWdodCBzaG91bGQgY29tZSBvbiBhbmQgdGhlIFJvbWFucyBzaG91bGQgcmVhY2ggdGhlIGhpbGxzLCBpdCB3b3VsZCBiZSBhbHRvZ2V0aGVyIGltcG9zc2libGUgdG8gY2FwdHVyZSB0aGVtLCBicm91Z2h0IGEgc3RyYXRhZ2VtIHRvIGJlYXIgb24gQ3Jhc3N1cy4gU29tZSBvZiBoaXMgUm9tYW4gY2FwdGl2ZXMgd2VyZSBmaXJzdCByZWxlYXNlZCwgd2hvLCB3aGlsZSBpbiBoaXMgY2FtcCwgaGFkIGhlYXJkIHRoZSBCYXJiYXJpYW5zIHNheWluZyB0byBvbmUgYW5vdGhlciwgYXMgdGhleSBoYWQgYmVlbiBvcmRlcmVkIHRvIGRvLCB0aGF0IHRoZSBraW5nIGRpZCBub3Qgd2lzaCB0aGUgd2FyIGJldHdlZW4gaGltIGFuZCB0aGUgUm9tYW5zIHRvIGJlIHdhZ2VkIHJlbGVudGxlc3NseSwgYnV0IHByZWZlcnJlZCB0byByZWdhaW4gdGhlaXIgZnJpZW5kc2hpcCBieSBkb2luZyB0aGVtIHRoZSBmYXZvdXIgb2YgdHJlYXRpbmcgQ3Jhc3N1cyBraW5kbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIEJhcmJhcmlhbnMgY2Vhc2VkIGZpZ2h0aW5nLCBhbmQgU3VyZW5hIHdpdGggaGlzIGNoaWVmIG9mZmljZXJzIHJvZGUgcXVpZXRseSB1cCB0byB0aGUgaGlsbCwgdW5zdHJ1bmcgaGlzIGJvdywgaGVsZCBvdXQgaGlzIHJpZ2h0IGhhbmQsIGFuZCBpbnZpdGVkIENyYXNzdXMgdG8gY29tZSB0byB0ZXJtcywgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgaGF2ZSBwdXQgeW91ciB2YWxvdXIgYW5kIHBvd2VyIHRvIHRoZSB0ZXN0IGFnYWluc3QgdGhlIHdpc2hlcyBvZiB0aGUga2luZywgd2hvIG5vdyBvZiBoaXMgb3duIGFjY29yZCBzaG93cyB5b3UgdGhlIG1pbGRuZXNzIGFuZCBmcmllbmRsaW5lc3Mgb2YgaGlzIGZlZWxpbmdzIGJ5IG9mZmVyaW5nIHRvIG1ha2UgYSB0cnVjZSB3aXRoIHlvdSBpZiB5b3Ugd2lsbCB3aXRoZHJhdywgYW5kIGJ5IGFmZm9yZGluZyB5b3UgdGhlIG1lYW5zIG9mIHNhZmV0eS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBTdXJlbmEsIG9ic2VydmluZyB0aGF0IGhpcyBQYXJ0aGlhbnMgd2VyZSBhbHJlYWR5IGxlc3MgaW1wZXR1b3VzIGluIHRoZWlyIGF0dGFja3MsIGFuZCB0aGF0IGlmIG5pZ2h0IHNob3VsZCBjb21lIG9uIGFuZCB0aGUgUm9tYW5zIHNob3VsZCByZWFjaCB0aGUgaGlsbHMsIGl0IHdvdWxkIGJlIGFsdG9nZXRoZXIgaW1wb3NzaWJsZSB0byBjYXB0dXJlIHRoZW0sIGJyb3VnaHQgYSBzdHJhdGFnZW0gdG8gYmVhciBvbiBDcmFzc3VzLiBTb21lIG9mIGhpcyBSb21hbiBjYXB0aXZlcyB3ZXJlIGZpcnN0IHJlbGVhc2VkLCB3aG8sIHdoaWxlIGluIGhpcyBjYW1wLCBoYWQgaGVhcmQgdGhlIEJhcmJhcmlhbnMgc2F5aW5nIHRvIG9uZSBhbm90aGVyLCBhcyB0aGV5IGhhZCBiZWVuIG9yZGVyZWQgdG8gZG8sIHRoYXQgdGhlIGtpbmcgZGlkIG5vdCB3aXNoIHRoZSB3YXIgYmV0d2VlbiBoaW0gYW5kIHRoZSBSb21hbnMgdG8gYmUgd2FnZWQgcmVsZW50bGVzc2x5LCBidXQgcHJlZmVycmVkIHRvIHJlZ2FpbiB0aGVpciBmcmllbmRzaGlwIGJ5IGRvaW5nIHRoZW0gdGhlIGZhdm91ciBvZiB0cmVhdGluZyBDcmFzc3VzIGtpbmRseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIEJhcmJhcmlhbnMgY2Vhc2VkIGZpZ2h0aW5nLCBhbmQgU3VyZW5hIHdpdGggaGlzIGNoaWVmIG9mZmljZXJzIHJvZGUgcXVpZXRseSB1cCB0byB0aGUgaGlsbCwgdW5zdHJ1bmcgaGlzIGJvdywgaGVsZCBvdXQgaGlzIHJpZ2h0IGhhbmQsIGFuZCBpbnZpdGVkIENyYXNzdXMgdG8gY29tZSB0byB0ZXJtcywgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIHB1dCB5b3VyIHZhbG91ciBhbmQgcG93ZXIgdG8gdGhlIHRlc3QgYWdhaW5zdCB0aGUgd2lzaGVzIG9mIHRoZSBraW5nLCB3aG8gbm93IG9mIGhpcyBvd24gYWNjb3JkIHNob3dzIHlvdSB0aGUgbWlsZG5lc3MgYW5kIGZyaWVuZGxpbmVzcyBvZiBoaXMgZmVlbGluZ3MgYnkgb2ZmZXJpbmcgdG8gbWFrZSBhIHRydWNlIHdpdGggeW91IGlmIHlvdSB3aWxsIHdpdGhkcmF3LCBhbmQgYnkgYWZmb3JkaW5nIHlvdSB0aGUgbWVhbnMgb2Ygc2FmZXR5LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBTdXJlbmEgc2FpZCB0aGlzLCB0aGUgcmVzdCBvZiB0aGUgUm9tYW5zIGVhZ2VybHkgYWNjZXB0ZWQgaGlzIHByb3Bvc2FsIGFuZCB3ZXJlIGZ1bGwgb2Ygam95LCBidXQgQ3Jhc3N1cywgd2hvc2UgZXZlcnkgZGlzY29tZml0dXJlIGF0IHRoZSBoYW5kcyBvZiB0aGUgQmFyYmFyaWFucyBoYWQgYmVlbiBkdWUgdG8gZnJhdWQsIGFuZCB3aG8gdGhvdWdodCB0aGUgc3VkZGVubmVzcyBvZiB0aGVpciBjaGFuZ2UgYSBzdHJhbmdlIHRoaW5nLCB3b3VsZCBub3QgcmVwbHksIGJ1dCB0b29rIHRoZSBtYXR0ZXIgaW50byBjb25zaWRlcmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc29sZGllcnMsIGhvd2V2ZXIsIGNyaWVkIG91dCBhbmQgdXJnZWQgaGltIHRvIGFjY2VwdCwgdGhlbiBmZWxsIHRvIGFidXNpbmcgYW5kIHJldmlsaW5nIGhpbSBmb3IgcHV0dGluZyB0aGVtIGZvcndhcmQgdG8gZmlnaHQgbWVuIHdpdGggd2hvbSBoZSBoaW1zZWxmIGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gY29uZmVyIGV2ZW4gd2hlbiB0aGV5IGNhbWUgdW5hcm1lZC4gQXQgZmlyc3QgaGUgdHJpZWQgZW50cmVhdGllcyBhbmQgYXJndW1lbnRzLiBJZiB0aGV5IHdvdWxkIGhvbGQgb3V0IGZvciB3aGF0IHdhcyBsZWZ0IG9mIHRoZSBkYXksIGR1cmluZyB0aGUgbmlnaHQgdGhleSBjb3VsZCByZWFjaCB0aGUgbW91bnRhaW5zIGFuZCByb3VnaCBjb3VudHJ5OyBhbmQgaGUgc2hvd2VkIHRoZW0gdGhlIHJvYWQgdGhpdGhlciwgYW5kIGV4aG9ydGVkIHRoZW0gbm90IHRvIGFiYW5kb24gaG9wZSB3aGVuIHNhZmV0eSB3YXMgc28gbmVhci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBncmV3IGFuZ3J5IHdpdGggaGltLCBhbmQgZGFzaGVkIHRoZWlyIGFybXMgdG9nZXRoZXIsIGFuZCB0aHJlYXRlbmVkIGhpbSwgdGhlbiBoZSB3YXMgdGVycmlmaWVkIGFuZCBiZWdhbiB0byBnbyB0b3dhcmRzIFN1cmVuYS4gQXMgaGUgd2VudCwgaG93ZXZlciwgaGUgdHVybmVkIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9jdGF2aXVzIGFuZCBQZXRyb25pdXMgYW5kIHllIG90aGVyIFJvbWFuIGNvbW1hbmRlcnMgaGVyZSBwcmVzZW50LCB5ZSBzZWUgdGhhdCBJIGdvIGJlY2F1c2UgSSBtdXN0LCBhbmQgeWUgYXJlIGV5ZXdpdG5lc3NlcyBvZiB0aGUgc2hhbWVmdWwgdmlvbGVuY2UgSSBzdWZmZXI7IGJ1dCB0ZWxsIHRoZSB3b3JsZCwgaWYgeWUgZ2V0IHNhZmVseSBob21lLCB0aGF0IENyYXNzdXMgcGVyaXNoZWQgYmVjYXVzZSBoZSB3YXMgZGVjZWl2ZWQgYnkgaGlzIGVuZW1pZXMsIGFuZCBub3QgYmVjYXVzZSBoZSB3YXMgZGVsaXZlcmVkIHVwIHRvIHRoZW0gYnkgaGlzIGNvdW50cnltZW4uPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU3VyZW5hIHNhaWQgdGhpcywgdGhlIHJlc3Qgb2YgdGhlIFJvbWFucyBlYWdlcmx5IGFjY2VwdGVkIGhpcyBwcm9wb3NhbCBhbmQgd2VyZSBmdWxsIG9mIGpveSwgYnV0IENyYXNzdXMsIHdob3NlIGV2ZXJ5IGRpc2NvbWZpdHVyZSBhdCB0aGUgaGFuZHMgb2YgdGhlIEJhcmJhcmlhbnMgaGFkIGJlZW4gZHVlIHRvIGZyYXVkLCBhbmQgd2hvIHRob3VnaHQgdGhlIHN1ZGRlbm5lc3Mgb2YgdGhlaXIgY2hhbmdlIGEgc3RyYW5nZSB0aGluZywgd291bGQgbm90IHJlcGx5LCBidXQgdG9vayB0aGUgbWF0dGVyIGludG8gY29uc2lkZXJhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzb2xkaWVycywgaG93ZXZlciwgY3JpZWQgb3V0IGFuZCB1cmdlZCBoaW0gdG8gYWNjZXB0LCB0aGVuIGZlbGwgdG8gYWJ1c2luZyBhbmQgcmV2aWxpbmcgaGltIGZvciBwdXR0aW5nIHRoZW0gZm9yd2FyZCB0byBmaWdodCBtZW4gd2l0aCB3aG9tIGhlIGhpbXNlbGYgaGFkIG5vdCB0aGUgY291cmFnZSB0byBjb25mZXIgZXZlbiB3aGVuIHRoZXkgY2FtZSB1bmFybWVkLiBBdCBmaXJzdCBoZSB0cmllZCBlbnRyZWF0aWVzIGFuZCBhcmd1bWVudHMuIElmIHRoZXkgd291bGQgaG9sZCBvdXQgZm9yIHdoYXQgd2FzIGxlZnQgb2YgdGhlIGRheSwgZHVyaW5nIHRoZSBuaWdodCB0aGV5IGNvdWxkIHJlYWNoIHRoZSBtb3VudGFpbnMgYW5kIHJvdWdoIGNvdW50cnk7IGFuZCBoZSBzaG93ZWQgdGhlbSB0aGUgcm9hZCB0aGl0aGVyLCBhbmQgZXhob3J0ZWQgdGhlbSBub3QgdG8gYWJhbmRvbiBob3BlIHdoZW4gc2FmZXR5IHdhcyBzbyBuZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgZ3JldyBhbmdyeSB3aXRoIGhpbSwgYW5kIGRhc2hlZCB0aGVpciBhcm1zIHRvZ2V0aGVyLCBhbmQgdGhyZWF0ZW5lZCBoaW0sIHRoZW4gaGUgd2FzIHRlcnJpZmllZCBhbmQgYmVnYW4gdG8gZ28gdG93YXJkcyBTdXJlbmEuIEFzIGhlIHdlbnQsIGhvd2V2ZXIsIGhlIHR1cm5lZCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9jdGF2aXVzIGFuZCBQZXRyb25pdXMgYW5kIHllIG90aGVyIFJvbWFuIGNvbW1hbmRlcnMgaGVyZSBwcmVzZW50LCB5ZSBzZWUgdGhhdCBJIGdvIGJlY2F1c2UgSSBtdXN0LCBhbmQgeWUgYXJlIGV5ZXdpdG5lc3NlcyBvZiB0aGUgc2hhbWVmdWwgdmlvbGVuY2UgSSBzdWZmZXI7IGJ1dCB0ZWxsIHRoZSB3b3JsZCwgaWYgeWUgZ2V0IHNhZmVseSBob21lLCB0aGF0IENyYXNzdXMgcGVyaXNoZWQgYmVjYXVzZSBoZSB3YXMgZGVjZWl2ZWQgYnkgaGlzIGVuZW1pZXMsIGFuZCBub3QgYmVjYXVzZSBoZSB3YXMgZGVsaXZlcmVkIHVwIHRvIHRoZW0gYnkgaGlzIGNvdW50cnltZW4uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PY3Rhdml1cywgaG93ZXZlciwgYW5kIHRob3NlIGFib3V0IGh1bSwgZGlkIG5vdCByZW1haW4sIGJ1dCB3ZW50IGRvd24gZnJvbSB0aGUgaGlsbCB3aXRoIENyYXNzdXM7IHRoZSBsaWN0b3JzLCB3aG8gd2VyZSBmb2xsb3dpbmcgaGltLCBDcmFzc3VzIGRyb3ZlIGJhY2suIFRoZSBmaXJzdCBvZiB0aGUgQmFyYmFyaWFucyB0byBtZWV0IGhpbSB3ZXJlIHR3byBoYWxmLWJyZWVkIEdyZWVrcywgd2hvIGxlYXBlZCBmcm9tIHRoZWlyIGhvcnNlcyBhbmQgbWFkZSBvYmVpc2FuY2UgdG8gaGltOyB0aGVuIGFkZHJlc3NpbmcgaGltIGluIHRoZSBHcmVlayB0b25ndWUsIHRoZXkgdXJnZWQgaGltIHRvIHNlbmQgYSBwYXJ0eSBmb3J3YXJkIHRvIGFzc3VyZSB0aGVtc2VsdmVzIHRoYXQgU3VyZW5hIGFuZCB0aG9zZSBhYm91dCBoaW0gd2VyZSBhZHZhbmNpbmcgdG8gdGhlIGNvbmZlcmVuY2Ugd2l0aG91dCBhcm1vdXIgYW5kIHdpdGhvdXQgd2VhcG9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q3Jhc3N1cyByZXBsaWVkIHRoYXQgaWYgaGUgaGFkIHRoZSBsZWFzdCBjb25jZXJuIGZvciBoaXMgbGlmZSwgaGUgd291bGQgbm90IGhhdmUgY29tZSBpbnRvIHRoZWlyIGhhbmRzOyBidXQgbmV2ZXJ0aGVsZXNzIGhlIHNlbnQgdHdvIFJvc2NpaSwgYnJvdGhlcnMsIHRvIGVucXVpcmUgb24gd2hhdCB0ZXJtcyBhbmQgaW4gd2hhdCBudW1iZXJzIHRoZXkgc2hvdWxkIGhvbGQgdGhlaXIgbWVldGluZy4gVGhlc2UgbWVuIHdlcmUgcHJvbXB0bHkgc2VpemVkIGFuZCBkZXRhaW5lZCBieSBTdXJlbmEsIHdoaWxlIGhlIGhpbXNlbGYgd2l0aCBoaXMgY2hpZWYgb2ZmaWNlcnMgYWR2YW5jZWQgb24gaG9yc2ViYWNrLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBpcyB0aGlzPyB0aGUgUm9tYW4gaW1wZXJhdG9yIG9uIGZvb3QsIHdoaWxlIHdlIGFyZSBtb3VudGVkPzwvcT4gVGhlbiBoZSBvcmRlcmVkIGEgaG9yc2UgdG8gYmUgYnJvdWdodCB0byBDcmFzc3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDcmFzc3VzIGFuc3dlcmVkIHRoYXQgbmVpdGhlciBvZiB0aGVtIHdhcyBhdCBmYXVsdCwgc2luY2UgZWFjaCB3YXMgZm9sbG93aW5nIHRoZSBjdXN0b20gb2YgaGlzIGNvdW50cnkgaW4gdGhpcyBtZWV0aW5nIFN1cmVuYSBzYWlkIHRoYXQgZnJvbSB0aGF0IG1vbWVudCB0aGVyZSB3YXMgYSB0cnVjZSBhbmQgcGVhY2UgYmV0d2VlbiBLaW5nIEh5cm9kZXMgYW5kIHRoZSBSb21hbnMsIGJ1dCBpdCB3YXMgbmVjZXNzYXJ5IHRvIGdvIGZvcndhcmQgdG8gdGhlIHJpdmVyIEV1cGhyYXRlcyBhbmQgdGhlcmUgaGF2ZSB0aGUgY29udHJhY3RzIHB1dCBpbiB3cml0aW5nOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciB5b3UgUm9tYW5zIGF0IGxlYXN0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmUgbm90IHZlcnkgbWluZGZ1bCBvZiBhZ3JlZW1lbnRzLDwvcT4gYW5kIGhlIGhlbGQgb3V0IGhpcyByaWdodCBoYW5kIHRvIENyYXNzdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gd2hlbiBDcmFzc3VzIHByb3Bvc2VkIHRvIHNlbmQgZm9yIGEgaG9yc2UsIFN1cmVuYSBzYWlkIHRoZXJlIHdhcyBubyBuZWVkIG9mIGl0LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciB0aGUga2luZyBvZmZlcnMgeW91IHRoaXMgb25lLjwvcT4gQXQgdGhlIHNhbWUgdGltZSBhIGhvcnNlIHdpdGggZ29sZC1zdHVkZGVkIGJyaWRsZSBzdG9vZCBhdCBDcmFzc3VzJ3Mgc2lkZSwgYW5kIHRoZSBncm9vbXMgbGlmdGVkIENyYXNzdXMgdXAgYW5kIG1vdW50ZWQgaGltLCBhbmQgdGhlbiByYW4gYWxvbmcgYnkgaGltLCBxdWlja2VuaW5nIGhpcyBob3JzZSdzIHBhY2Ugd2l0aCBibG93cy4gT2N0YXZpdXMgd2FzIGZpcnN0IHRvIHNlaXplIHRoZSBicmlkbGUsIGFuZCBhZnRlciBoaW0gUGV0cm9uaXVzLCBvbmUgb2YgdGhlIGxlZ2lvbmFyeSB0cmlidW5lcyB0aGVuIHRoZSByZXN0IG9mIHRoZSBSb21hbnMgaW4gdGhlIHBhcnR5IHN1cnJvdW5kZWQgdGhlIGhvcnNlLCB0cnlpbmcgdG8gc3RvcCBoaW0sIGFuZCBkcmFnZ2luZyBhd2F5IHRob3NlIHdobyBjcm93ZGVkIGluIHVwb24gQ3Jhc3N1cyBvbiBlaXRoZXIgc2lkZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U2N1ZmZsaW5nIGZvbGxvd2VkLCBhbmQgYSB0dW11bHQsIHRoZW4gYmxvd3MuIE9jdGF2aXVzIGRyZXcgaGlzIHN3b3JkIGFuZCBzbGV3IHRoZSBncm9vbSBvZiBvbmUgb2YgdGhlIEJhcmJhcmlhbnMsIGJ1dCBhbm90aGVyIHNtb3RlIE9jdGF2aXVzIGRvd24gZnJvbSBiZWhpbmQuIFBldHJvbml1cyBoYWQgbm8gb2ZmZW5zaXZlIHdlYXBvbnMsIGJ1dCB3aGVuIGhlIHdhcyBzdHJ1Y2sgb24gdGhlIGJyZWFzdHBsYXRlLCBsZWFwZWQgZG93biBmcm9tIGhpcyBob3JzZSB1bndvdW5kZWQuIENyYXNzdXMgd2FzIGtpbGxlZCBieSBhIFBhcnRoaWFuIG5hbWVkIFBvbWF4YXRocmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2N0YXZpdXMsIGhvd2V2ZXIsIGFuZCB0aG9zZSBhYm91dCBodW0sIGRpZCBub3QgcmVtYWluLCBidXQgd2VudCBkb3duIGZyb20gdGhlIGhpbGwgd2l0aCBDcmFzc3VzOyB0aGUgbGljdG9ycywgd2hvIHdlcmUgZm9sbG93aW5nIGhpbSwgQ3Jhc3N1cyBkcm92ZSBiYWNrLiBUaGUgZmlyc3Qgb2YgdGhlIEJhcmJhcmlhbnMgdG8gbWVldCBoaW0gd2VyZSB0d28gaGFsZi1icmVlZCBHcmVla3MsIHdobyBsZWFwZWQgZnJvbSB0aGVpciBob3JzZXMgYW5kIG1hZGUgb2JlaXNhbmNlIHRvIGhpbTsgdGhlbiBhZGRyZXNzaW5nIGhpbSBpbiB0aGUgR3JlZWsgdG9uZ3VlLCB0aGV5IHVyZ2VkIGhpbSB0byBzZW5kIGEgcGFydHkgZm9yd2FyZCB0byBhc3N1cmUgdGhlbXNlbHZlcyB0aGF0IFN1cmVuYSBhbmQgdGhvc2UgYWJvdXQgaGltIHdlcmUgYWR2YW5jaW5nIHRvIHRoZSBjb25mZXJlbmNlIHdpdGhvdXQgYXJtb3VyIGFuZCB3aXRob3V0IHdlYXBvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNyYXNzdXMgcmVwbGllZCB0aGF0IGlmIGhlIGhhZCB0aGUgbGVhc3QgY29uY2VybiBmb3IgaGlzIGxpZmUsIGhlIHdvdWxkIG5vdCBoYXZlIGNvbWUgaW50byB0aGVpciBoYW5kczsgYnV0IG5ldmVydGhlbGVzcyBoZSBzZW50IHR3byBSb3NjaWksIGJyb3RoZXJzLCB0byBlbnF1aXJlIG9uIHdoYXQgdGVybXMgYW5kIGluIHdoYXQgbnVtYmVycyB0aGV5IHNob3VsZCBob2xkIHRoZWlyIG1lZXRpbmcuIFRoZXNlIG1lbiB3ZXJlIHByb21wdGx5IHNlaXplZCBhbmQgZGV0YWluZWQgYnkgU3VyZW5hLCB3aGlsZSBoZSBoaW1zZWxmIHdpdGggaGlzIGNoaWVmIG9mZmljZXJzIGFkdmFuY2VkIG9uIGhvcnNlYmFjaywgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBpcyB0aGlzPyB0aGUgUm9tYW4gaW1wZXJhdG9yIG9uIGZvb3QsIHdoaWxlIHdlIGFyZSBtb3VudGVkPzwvcT4gVGhlbiBoZSBvcmRlcmVkIGEgaG9yc2UgdG8gYmUgYnJvdWdodCB0byBDcmFzc3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENyYXNzdXMgYW5zd2VyZWQgdGhhdCBuZWl0aGVyIG9mIHRoZW0gd2FzIGF0IGZhdWx0LCBzaW5jZSBlYWNoIHdhcyBmb2xsb3dpbmcgdGhlIGN1c3RvbSBvZiBoaXMgY291bnRyeSBpbiB0aGlzIG1lZXRpbmcgU3VyZW5hIHNhaWQgdGhhdCBmcm9tIHRoYXQgbW9tZW50IHRoZXJlIHdhcyBhIHRydWNlIGFuZCBwZWFjZSBiZXR3ZWVuIEtpbmcgSHlyb2RlcyBhbmQgdGhlIFJvbWFucywgYnV0IGl0IHdhcyBuZWNlc3NhcnkgdG8gZ28gZm9yd2FyZCB0byB0aGUgcml2ZXIgRXVwaHJhdGVzIGFuZCB0aGVyZSBoYXZlIHRoZSBjb250cmFjdHMgcHV0IGluIHdyaXRpbmc7IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgeW91IFJvbWFucyBhdCBsZWFzdCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmUgbm90IHZlcnkgbWluZGZ1bCBvZiBhZ3JlZW1lbnRzLDwvcT4gYW5kIGhlIGhlbGQgb3V0IGhpcyByaWdodCBoYW5kIHRvIENyYXNzdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gd2hlbiBDcmFzc3VzIHByb3Bvc2VkIHRvIHNlbmQgZm9yIGEgaG9yc2UsIFN1cmVuYSBzYWlkIHRoZXJlIHdhcyBubyBuZWVkIG9mIGl0LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIHRoZSBraW5nIG9mZmVycyB5b3UgdGhpcyBvbmUuPC9xPiBBdCB0aGUgc2FtZSB0aW1lIGEgaG9yc2Ugd2l0aCBnb2xkLXN0dWRkZWQgYnJpZGxlIHN0b29kIGF0IENyYXNzdXMncyBzaWRlLCBhbmQgdGhlIGdyb29tcyBsaWZ0ZWQgQ3Jhc3N1cyB1cCBhbmQgbW91bnRlZCBoaW0sIGFuZCB0aGVuIHJhbiBhbG9uZyBieSBoaW0sIHF1aWNrZW5pbmcgaGlzIGhvcnNlJ3MgcGFjZSB3aXRoIGJsb3dzLiBPY3Rhdml1cyB3YXMgZmlyc3QgdG8gc2VpemUgdGhlIGJyaWRsZSwgYW5kIGFmdGVyIGhpbSBQZXRyb25pdXMsIG9uZSBvZiB0aGUgbGVnaW9uYXJ5IHRyaWJ1bmVzIHRoZW4gdGhlIHJlc3Qgb2YgdGhlIFJvbWFucyBpbiB0aGUgcGFydHkgc3Vycm91bmRlZCB0aGUgaG9yc2UsIHRyeWluZyB0byBzdG9wIGhpbSwgYW5kIGRyYWdnaW5nIGF3YXkgdGhvc2Ugd2hvIGNyb3dkZWQgaW4gdXBvbiBDcmFzc3VzIG9uIGVpdGhlciBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNjdWZmbGluZyBmb2xsb3dlZCwgYW5kIGEgdHVtdWx0LCB0aGVuIGJsb3dzLiBPY3Rhdml1cyBkcmV3IGhpcyBzd29yZCBhbmQgc2xldyB0aGUgZ3Jvb20gb2Ygb25lIG9mIHRoZSBCYXJiYXJpYW5zLCBidXQgYW5vdGhlciBzbW90ZSBPY3Rhdml1cyBkb3duIGZyb20gYmVoaW5kLiBQZXRyb25pdXMgaGFkIG5vIG9mZmVuc2l2ZSB3ZWFwb25zLCBidXQgd2hlbiBoZSB3YXMgc3RydWNrIG9uIHRoZSBicmVhc3RwbGF0ZSwgbGVhcGVkIGRvd24gZnJvbSBoaXMgaG9yc2UgdW53b3VuZGVkLiBDcmFzc3VzIHdhcyBraWxsZWQgYnkgYSBQYXJ0aGlhbiBuYW1lZCBQb21heGF0aHJlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgaG93ZXZlciwgc2F5IHRoYXQgaXQgd2FzIG5vdCB0aGlzIG1hbiwgYnV0IGFub3RoZXIsIHdobyBraWxsZWQgQ3Jhc3N1cywgYW5kIHRoYXQgdGhpcyBtYW4gY3V0IG9mZiB0aGUgaGVhZCBhbmQgcmlnaHQgaGFuZCBvZiBDcmFzc3VzIGFzIGhlIGxheSB1cG9uIHRoZSBncm91bmQuIFRoZXNlIGRldGFpbHMsIGhvd2V2ZXIsIGFyZSBtYXR0ZXJzIG9mIGNvbmplY3R1cmUgcmF0aGVyIHRoYW4gb2Yga25vd2xlZGdlLiBGb3Igb2YgdGhlIFJvbWFucyB3aG8gd2VyZSBwcmVzZW50IHRoZXJlIGFuZCBmaWdodGluZyBhYm91dCBDcmFzc3VzLCBzb21lIHdlcmUgc2xhaW4sIGFuZCBvdGhlcnMgZmxlZCBiYWNrIHRvIHRoZSBoaWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGl0aGVyIHRoZSBQYXJ0aGlhbnMgY2FtZSBhbmQgc2FpZCB0aGF0IGFzIGZvciBDcmFzc3VzLCBoZSBoYWQgbWV0IHdpdGggaGlzIGRlc2VydHMsIGJ1dCB0aGF0IFN1cmVuYSBvcmRlcmVkIHRoZSByZXN0IG9mIHRoZSBSb21hbnMgdG8gY29tZSBkb3duIHdpdGhvdXQgZmVhci4gVGhlcmV1cG9uIHNvbWUgb2YgdGhlbSB3ZW50IGRvd24gYW5kIGRlbGl2ZXJlZCB0aGVtc2VsdmVzIHVwLCBidXQgdGhlIHJlc3Qgc2NhdHRlcmVkIGR1cmluZyB0aGUgbmlnaHQsIGFuZCBvZiB0aGVzZSBhIHZlcnkgZmV3IG1hZGUgdGhlaXIgZXNjYXBlOyB0aGUgcmVzdCBvZiB0aGVtIHdlcmUgaHVudGVkIGRvd24gYnkgdGhlIEFyYWJzLCBjYXB0dXJlZCwgYW5kIGN1dCB0byBwaWVjZXMuIEluIHRoZSB3aG9sZSBjYW1wYWlnbiwgdHdlbnR5IHRob3VzYW5kIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBraWxsZWQsIGFuZCB0ZW4gdGhvdXNhbmQgdG8gaGF2ZSBiZWVuIHRha2VuIGFsaXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGl0IHdhcyBub3QgdGhpcyBtYW4sIGJ1dCBhbm90aGVyLCB3aG8ga2lsbGVkIENyYXNzdXMsIGFuZCB0aGF0IHRoaXMgbWFuIGN1dCBvZmYgdGhlIGhlYWQgYW5kIHJpZ2h0IGhhbmQgb2YgQ3Jhc3N1cyBhcyBoZSBsYXkgdXBvbiB0aGUgZ3JvdW5kLiBUaGVzZSBkZXRhaWxzLCBob3dldmVyLCBhcmUgbWF0dGVycyBvZiBjb25qZWN0dXJlIHJhdGhlciB0aGFuIG9mIGtub3dsZWRnZS4gRm9yIG9mIHRoZSBSb21hbnMgd2hvIHdlcmUgcHJlc2VudCB0aGVyZSBhbmQgZmlnaHRpbmcgYWJvdXQgQ3Jhc3N1cywgc29tZSB3ZXJlIHNsYWluLCBhbmQgb3RoZXJzIGZsZWQgYmFjayB0byB0aGUgaGlsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXRoZXIgdGhlIFBhcnRoaWFucyBjYW1lIGFuZCBzYWlkIHRoYXQgYXMgZm9yIENyYXNzdXMsIGhlIGhhZCBtZXQgd2l0aCBoaXMgZGVzZXJ0cywgYnV0IHRoYXQgU3VyZW5hIG9yZGVyZWQgdGhlIHJlc3Qgb2YgdGhlIFJvbWFucyB0byBjb21lIGRvd24gd2l0aG91dCBmZWFyLiBUaGVyZXVwb24gc29tZSBvZiB0aGVtIHdlbnQgZG93biBhbmQgZGVsaXZlcmVkIHRoZW1zZWx2ZXMgdXAsIGJ1dCB0aGUgcmVzdCBzY2F0dGVyZWQgZHVyaW5nIHRoZSBuaWdodCwgYW5kIG9mIHRoZXNlIGEgdmVyeSBmZXcgbWFkZSB0aGVpciBlc2NhcGU7IHRoZSByZXN0IG9mIHRoZW0gd2VyZSBodW50ZWQgZG93biBieSB0aGUgQXJhYnMsIGNhcHR1cmVkLCBhbmQgY3V0IHRvIHBpZWNlcy4gSW4gdGhlIHdob2xlIGNhbXBhaWduLCB0d2VudHkgdGhvdXNhbmQgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGtpbGxlZCwgYW5kIHRlbiB0aG91c2FuZCB0byBoYXZlIGJlZW4gdGFrZW4gYWxpdmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1cmVuYSBub3cgdG9vayB0aGUgaGVhZCBhbmQgaGFuZCBvZiBDcmFzc3VzIGFuZCBzZW50IHRoZW0gdG8gSHlyb2RlcyBpbiBBcm1lbmlhLCBidXQgaGUgaGltc2VsZiBzZW50IHdvcmQgYnkgbWVzc2VuZ2VycyB0byBTZWxldWNpYSB0aGF0IGhlIHdhcyBicmluZ2luZyBDcmFzc3VzIHRoZXJlIGFsaXZlLCBhbmQgcHJlcGFyZWQgYSBsYXVnaGFibGUgc29ydCBvZiBwcm9jZXNzaW9uIHdoaWNoIGhlIGluc3VsdGluZ2x5IGNhbGxlZCBhIHRyaXVtcGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgb25lIG9mIGhpcyBjYXB0aXZlcyB3aG8gYm9yZSB0aGUgZ3JlYXRlc3QgbGlrZW5lc3MgdG8gQ3Jhc3N1cywgQ2FpdXMgUGFjY2lhbnVzLCBwdXQgb24gYSB3b21hbidzIHJveWFsIHJvYmUsIGFuZCB1bmRlciBpbnN0cnVjdGlvbnMgdG8gYW5zd2VyIHRvIHRoZSBuYW1lIG9mIENyYXNzdXMgYW5kIHRoZSB0aXRsZSBvZiBJbXBlcmF0b3Igd2hlbiBzbyBhZGRyZXNzZWQsIHdhcyBjb25kdWN0ZWQgYWxvbmcgb24gaG9yc2ViYWNrLiBCZWZvcmUgaGltIHJvZGUgdHJ1bXBldGVycyBhbmQgYSBmZXcgbGljdG9ycyBib3JuZSBvbiBjYW1lbHM7IGZyb20gdGhlIGZhc2NlcyBvZiB0aGUgbGljdG9ycyBwdXJzZXMgd2VyZSBzdXNwZW5kZWQsIGFuZCB0byB0aGVpciBheGVzIHdlcmUgZmFzdGVuZWQgUm9tYW4gaGVhZHMgbmV3bHkgY3V0IG9mZjsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YmVoaW5kIHRoZXNlIGZvbGxvd2VkIGNvdXJ0ZXphbnMgb2YgU2VsZXVjaWEsIG11c2ljaWFucywgd2hvIHNhbmcgbWFueSBzY3Vycmlsb3VzIGFuZCByaWRpY3Vsb3VzIHNvbmdzIGFib3V0IHRoZSBlZmZlbWluYWN5IGFuZCBjb3dhcmRpY2Ugb2YgQ3Jhc3N1cyBhbmQgdGhlc2UgdGhpbmdzIHdlcmUgZm9yIGFsbCB0byBzZWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VyZW5hIG5vdyB0b29rIHRoZSBoZWFkIGFuZCBoYW5kIG9mIENyYXNzdXMgYW5kIHNlbnQgdGhlbSB0byBIeXJvZGVzIGluIEFybWVuaWEsIGJ1dCBoZSBoaW1zZWxmIHNlbnQgd29yZCBieSBtZXNzZW5nZXJzIHRvIFNlbGV1Y2lhIHRoYXQgaGUgd2FzIGJyaW5naW5nIENyYXNzdXMgdGhlcmUgYWxpdmUsIGFuZCBwcmVwYXJlZCBhIGxhdWdoYWJsZSBzb3J0IG9mIHByb2Nlc3Npb24gd2hpY2ggaGUgaW5zdWx0aW5nbHkgY2FsbGVkIGEgdHJpdW1waC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgb25lIG9mIGhpcyBjYXB0aXZlcyB3aG8gYm9yZSB0aGUgZ3JlYXRlc3QgbGlrZW5lc3MgdG8gQ3Jhc3N1cywgQ2FpdXMgUGFjY2lhbnVzLCBwdXQgb24gYSB3b21hbidzIHJveWFsIHJvYmUsIGFuZCB1bmRlciBpbnN0cnVjdGlvbnMgdG8gYW5zd2VyIHRvIHRoZSBuYW1lIG9mIENyYXNzdXMgYW5kIHRoZSB0aXRsZSBvZiBJbXBlcmF0b3Igd2hlbiBzbyBhZGRyZXNzZWQsIHdhcyBjb25kdWN0ZWQgYWxvbmcgb24gaG9yc2ViYWNrLiBCZWZvcmUgaGltIHJvZGUgdHJ1bXBldGVycyBhbmQgYSBmZXcgbGljdG9ycyBib3JuZSBvbiBjYW1lbHM7IGZyb20gdGhlIGZhc2NlcyBvZiB0aGUgbGljdG9ycyBwdXJzZXMgd2VyZSBzdXNwZW5kZWQsIGFuZCB0byB0aGVpciBheGVzIHdlcmUgZmFzdGVuZWQgUm9tYW4gaGVhZHMgbmV3bHkgY3V0IG9mZjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJlaGluZCB0aGVzZSBmb2xsb3dlZCBjb3VydGV6YW5zIG9mIFNlbGV1Y2lhLCBtdXNpY2lhbnMsIHdobyBzYW5nIG1hbnkgc2N1cnJpbG91cyBhbmQgcmlkaWN1bG91cyBzb25ncyBhYm91dCB0aGUgZWZmZW1pbmFjeSBhbmQgY293YXJkaWNlIG9mIENyYXNzdXMgYW5kIHRoZXNlIHRoaW5ncyB3ZXJlIGZvciBhbGwgdG8gc2VlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBiZWZvcmUgdGhlIGFzc2VtYmxlZCBzZW5hdGUgb2YgU2VsZXVjaWEsIFN1cmVuYSBicm91Z2h0IGxpY2VudGlvdXMgYm9va3Mgb2YgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaWxlc2lhY2E8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgYSBjb2xsZWN0aW9uIG9mIGxvdmUgc3RvcmllcywgdGhlIHNjZW5lcyBvZiB3aGljaCB3ZXJlIGxhaWQgaW4gTWlsZXR1cy4gT2YgaXRzIGF1dGhvciwgd2hvIGZsb3VyaXNoZWQgcGVyaGFwcyBpbiB0aGUgc2Vjb25kIGNlbnR1cnkgQi5DLiwgYWxtb3N0IG5vdGhpbmcgaXMga25vd24uPC9ub3RlPiBvZiBBcmlzdGlkZXMsIGFuZCBpbiB0aGlzIG1hdHRlciwgYXQgbGVhc3QsIHRoZXJlIHdhcyBubyBmYWxzZWhvb2Qgb24gaGlzIHBhcnQsIGZvciB0aGUgYm9va3Mgd2VyZSBmb3VuZCBpbiB0aGUgYmFnZ2FnZSBvZiBSb3NjaXVzLCBhbmQgZ2F2ZSBTdXJlbmEgb2NjYXNpb24gdG8gaGVhcCBtdWNoIGluc3VsdGluZyByaWRpY3VsZSB1cG9uIHRoZSBSb21hbnMsIHNpbmNlIHRoZXkgY291bGQgbm90LCBldmVuIHdoZW4gZ29pbmcgdG8gd2FyLCBsZXQgc3VjaCBzdWJqZWN0cyBhbmQgd3JpdGluZ3MgYWxvbmUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSBvZiBTZWxldWNpYSwgaG93ZXZlciwgYXBwcmVjaWF0ZWQgdGhlIHdpc2RvbSBvZiBBZXNvcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBmYWJsZSBvZiB0aGUgdHdvIHdhbGxldHMsIHdoaWNoIGV2ZXJ5b25lIGNhcnJpZXMsIG9uZSBpbiBmcm9udCBjb250YWluaW5nIGhpcyBuZWlnaGJvdXIncyBmYXVsdHMsIHdoaWNoIGFyZSB0aGVyZWZvcmUgYWx3YXlzIGJlZm9yZSBoaXMgZXllczsgYW5kIG9uZSBiZWhpbmQgY29udGFpbmluZyBoaXMgb3duIGZhdWx0cywgd2hpY2ggaGUgdGhlcmVmb3JlIG5ldmVyIHNlZXMuPC9ub3RlPiB3aGVuIHRoZXkgc2F3IFN1cmVuYSB3aXRoIGEgd2FsbGV0IG9mIG9ic2Nlbml0aWVzIGZyb20gdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWlsZXNpYWNhPC9xPiBpbiBmcm9udCBvZiBoaW0sIGJ1dCB0cmFpbGluZyBiZWhpbmQgaGltIGEgUGFydGhpYW4gU3liYXJpcyBpbiBzbyBtYW55IHdhZ2dvbi1sb2FkcyBvZiBjb25jdWJpbmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDIxLjYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLiA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZnRlciBhIGZhc2hpb24gaGlzIHRyYWluIHdhcyBhIGNvdW50ZXItcGFydCB0byB0aGUgZmFibGVkIGVjaGlkbmFlIGFuZCBzY3l0YWxhZSBhbW9uZyBzZXJwZW50cywgYnkgc2hvd2luZyBpdHMgY29uc3BpY3VvdXMgYW5kIGZvcndhcmQgcG9ydGlvbnMgZmVhcmZ1bCBhbmQgc2F2YWdlLCB3aXRoIHNwZWFycywgYXJjaGVyeSwgYW5kIGhvcnNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdHJhaWxpbmcgb2ZmIGluIHRoZSByZWFyIG9mIHRoZSBsaW5lIGludG8gZGFuY2VzLCBjeW1iYWxzLCBsdXRlcywgYW5kIG5vY3R1cm5hbCByZXZlbHMgd2l0aCB3b21lbi4gUm9zY2l1cyB3YXMgY2VydGFpbmx5IGN1bHBhYmxlLCBidXQgaXQgd2FzIHNoYW1lbGVzcyBpbiB0aGUgUGFydGhpYW5zIHRvIGZpbmQgZmF1bHQgd2l0aCB0aGUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaWxlc2lhY2EsPC9xPiB3aGVuIG1hbnkgb2YgdGhlIHJveWFsIGxpbmUgb2YgdGhlaXIgQXJzYWNpZGFlIHdlcmUgc3BydW5nIGZyb20gTWlsZXNpYW4gYW5kIElvbmlhbiBjb3VydGV6YW5zLgoJCQk8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWlsZXNpYWNhPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGEgY29sbGVjdGlvbiBvZiBsb3ZlIHN0b3JpZXMsIHRoZSBzY2VuZXMgb2Ygd2hpY2ggd2VyZSBsYWlkIGluIE1pbGV0dXMuIE9mIGl0cyBhdXRob3IsIHdobyBmbG91cmlzaGVkIHBlcmhhcHMgaW4gdGhlIHNlY29uZCBjZW50dXJ5IEIuQy4sIGFsbW9zdCBub3RoaW5nIGlzIGtub3duLjwvbm90ZT4gb2YgQXJpc3RpZGVzLCBhbmQgaW4gdGhpcyBtYXR0ZXIsIGF0IGxlYXN0LCB0aGVyZSB3YXMgbm8gZmFsc2Vob29kIG9uIGhpcyBwYXJ0LCBmb3IgdGhlIGJvb2tzIHdlcmUgZm91bmQgaW4gdGhlIGJhZ2dhZ2Ugb2YgUm9zY2l1cywgYW5kIGdhdmUgU3VyZW5hIG9jY2FzaW9uIHRvIGhlYXAgbXVjaCBpbnN1bHRpbmcgcmlkaWN1bGUgdXBvbiB0aGUgUm9tYW5zLCBzaW5jZSB0aGV5IGNvdWxkIG5vdCwgZXZlbiB3aGVuIGdvaW5nIHRvIHdhciwgbGV0IHN1Y2ggc3ViamVjdHMgYW5kIHdyaXRpbmdzIGFsb25lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgb2YgU2VsZXVjaWEsIGhvd2V2ZXIsIGFwcHJlY2lhdGVkIHRoZSB3aXNkb20gb2YgQWVzb3A8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBmYWJsZSBvZiB0aGUgdHdvIHdhbGxldHMsIHdoaWNoIGV2ZXJ5b25lIGNhcnJpZXMsIG9uZSBpbiBmcm9udCBjb250YWluaW5nIGhpcyBuZWlnaGJvdXIncyBmYXVsdHMsIHdoaWNoIGFyZSB0aGVyZWZvcmUgYWx3YXlzIGJlZm9yZSBoaXMgZXllczsgYW5kIG9uZSBiZWhpbmQgY29udGFpbmluZyBoaXMgb3duIGZhdWx0cywgd2hpY2ggaGUgdGhlcmVmb3JlIG5ldmVyIHNlZXMuPC9ub3RlPiB3aGVuIHRoZXkgc2F3IFN1cmVuYSB3aXRoIGEgd2FsbGV0IG9mIG9ic2Nlbml0aWVzIGZyb20gdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaWxlc2lhY2E8L3E+IGluIGZyb250IG9mIGhpbSwgYnV0IHRyYWlsaW5nIGJlaGluZCBoaW0gYSBQYXJ0aGlhbiBTeWJhcmlzIGluIHNvIG1hbnkgd2FnZ29uLWxvYWRzIG9mIGNvbmN1YmluZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDIxLjYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLiA2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBZnRlciBhIGZhc2hpb24gaGlzIHRyYWluIHdhcyBhIGNvdW50ZXItcGFydCB0byB0aGUgZmFibGVkIGVjaGlkbmFlIGFuZCBzY3l0YWxhZSBhbW9uZyBzZXJwZW50cywgYnkgc2hvd2luZyBpdHMgY29uc3BpY3VvdXMgYW5kIGZvcndhcmQgcG9ydGlvbnMgZmVhcmZ1bCBhbmQgc2F2YWdlLCB3aXRoIHNwZWFycywgYXJjaGVyeSwgYW5kIGhvcnNlLCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAyMS42IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aS4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0cmFpbGluZyBvZmYgaW4gdGhlIHJlYXIgb2YgdGhlIGxpbmUgaW50byBkYW5jZXMsIGN5bWJhbHMsIGx1dGVzLCBhbmQgbm9jdHVybmFsIHJldmVscyB3aXRoIHdvbWVuLiBSb3NjaXVzIHdhcyBjZXJ0YWlubHkgY3VscGFibGUsIGJ1dCBpdCB3YXMgc2hhbWVsZXNzIGluIHRoZSBQYXJ0aGlhbnMgdG8gZmluZCBmYXVsdCB3aXRoIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWlsZXNpYWNhLDwvcT4gd2hlbiBtYW55IG9mIHRoZSByb3lhbCBsaW5lIG9mIHRoZWlyIEFyc2FjaWRhZSB3ZXJlIHNwcnVuZyBmcm9tIE1pbGVzaWFuIGFuZCBJb25pYW4gY291cnRlemFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIGl0IGhhcHBlbmVkIHRoYXQgSHlyb2RlcyB3YXMgYXQgbGFzdCByZWNvbmNpbGVkIHdpdGggQXJ0YXZhc2RlcyB0aGUgQXJtZW5pYW4sIGFuZCBhZ3JlZWQgdG8gcmVjZWl2ZSB0aGUgbGF0dGVyJ3Mgc2lzdGVyIGFzIHdpZmUgZm9yIGhpcyBzb24gUGFjb3J1cywgYW5kIHRoZXJlIHdlcmUgcmVjaXByb2NhbCBiYW5xdWV0cyBhbmQgZHJpbmtpbmcgYm91dHMsIGF0IHdoaWNoIG1hbnkgR3JlZWsgY29tcG9zaXRpb25zIHdlcmUgaW50cm9kdWNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEh5cm9kZXMgd2FzIHdlbGwgYWNxdWFpbnRlZCBib3RoIHdpdGggdGhlIEdyZWVrIGxhbmd1YWdlIGFuZCBsaXRlcmF0dXJlLCBhbmQgQXJ0YXZhc2RlcyBhY3R1YWxseSBjb21wb3NlZCB0cmFnZWRpZXMsIGFuZCB3cm90ZSBvcmF0aW9ucyBhbmQgaGlzdG9yaWVzLCBzb21lIG9mIHdoaWNoIGFyZSBwcmVzZXJ2ZWQuIE5vdyB3aGVuIHRoZSBoZWFkIG9mIENyYXNzdXMgd2FzIGJyb3VnaHQgdG8gdGhlIGtpbmcncyBkb29yLCB0aGUgdGFibGVzIGhhZCBiZWVuIHJlbW92ZWQsIGFuZCBhIHRyYWdpYyBhY3RvciwgSmFzb24gYnkgbmFtZSwgb2YgVHJhbGxlcywgd2FzIHNpbmdpbmcgdGhhdCBwYXJ0IG9mIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJhY2NoYWU8L3E+IG9mIEV1cmlwaWRlcyB3aGVyZSBBZ2F2ZSBpcyBhYm91dCB0byBhcHBlYXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGVudGhldXMsIGtpbmcgb2YgVGhlYmVzLCB0aGUgc29uIG9mIEFnYXZlLCByZWZ1c2VkIHRvIHJlY29nbml6ZSB0aGUgZGl2aW5pdHkgb2YgRGlvbnlzdXMsIHdoZXJldXBvbiB0aGUgZ29kIGluZnVyaWF0ZWQgdGhlIHdvbWVuLCBhbmQgQWdhdmUga2lsbGVkIGhlciBvd24gc29uLiBTaGUgYXBwZWFycyBpbiB0aGUgPHRpdGxlPkJhY2NoYWU8L3RpdGxlPiB3aXRoIGhpcyBoZWFkIGluIGhlciBoYW5kLCBleHVsdGluZyBvdmVyIHRoZSBkZWF0aCBvZiB0aGUgc3VwcG9zZWQgd2lsZCBiZWFzdC48L25vdGU+IFdoaWxlIGhlIHdhcyByZWNlaXZpbmcgaGlzIGFwcGxhdXNlLCBTaWxsYWNlcyBzdG9vZCBhdCB0aGUgZG9vciBvZiB0aGUgYmFucXVldGluZy1oYWxsLCBhbmQgYWZ0ZXIgYSBsb3cgb2JlaXNhbmNlLCBjYXN0IHRoZSBoZWFkIG9mIENyYXNzdXMgaW50byB0aGUgY2VudHJlIG9mIHRoZSBjb21wYW55LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUGFydGhpYW5zIGxpZnRlZCBpdCB1cCB3aXRoIGNsYXBwaW5nIG9mIGhhbmRzIGFuZCBzaG91dHMgb2Ygam95LCBhbmQgYXQgdGhlIGtpbmcncyBiaWRkaW5nIGhpcyBzZXJ2YW50cyBnYXZlIFNpbGxhY2VzIGEgc2VhdCBhdCB0aGUgYmFucXVldC4gVGhlbiBKYXNvbiBoYW5kZWQgaGlzIGNvc3R1bWUgb2YgUGVudGhldXMgdG8gb25lIG9mIHRoZSBjaG9ydXMsIHNlaXplZCB0aGUgaGVhZCBvZiBDcmFzc3VzLCBhbmQgYXNzdW1pbmcgdGhlIHJvbGUgb2YgdGhlIGZyZW56aWVkIEFnYXZlLCBzYW5nIHRoZXNlIHZlcnNlcyB0aHJvdWdoIGFzIGlmIGluc3BpcmVkOgoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5XZSBicmluZyBmcm9tIHRoZSBtb3VudGFpbjwvbD4KCQkJCQkgICAgICAgICAgPGw+IEEgdGVuZHJpbCBmcmVzaC1jdXQgdG8gdGhlIHBhbGFjZSw8L2w+CgkJCQkJICAgICAgICAgIDxsPiBBIHdvbmRlcmZ1bCBwcmV5LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVsaWdodGVkIGV2ZXJ5Ym9keTsgYnV0IHdoZW4gdGhlIGZvbGxvd2luZyBkaWFsb2d1ZSB3aXRoIHRoZSBjaG9ydXMgd2FzIGNoYW50ZWQ6CgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPihDaG9ydXMpIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBzbGV3IGhpbT88L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCQkgICAgICAgICAgPGw+KEFnYXZlKSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaW5lIGlzIHRoZSBob25vdXIsPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+UG9tYXhhdGhyZXMsIHdobyBoYXBwZW5lZCB0byBiZSBvbmUgb2YgdGhlIGJhbnF1ZXRlcnMsIHNwcmFuZyB1cCBhbmQgbGFpZCBob2xkIG9mIHRoZSBoZWFkLCBmZWVsaW5nIHRoYXQgaXQgd2FzIG1vcmUgYXBwcm9wcmlhdGUgZm9yIGhpbSB0byBzYXkgdGhpcyB0aGFuIGZvciBKYXNvbi4gVGhlIGtpbmcgd2FzIGRlbGlnaHRlZCwgYW5kIGJlc3Rvd2VkIG9uIFBvbWF4YXRocmVzIHRoZSBjdXN0b21hcnkgZ2lmdHMsIHdoaWxlIHRvIEphc29uIEhlIGdhdmUgYSB0YWxlbnQuIFdpdGggc3VjaCBhIGZhcmNlIGFzIHRoaXMgdGhlIGV4cGVkaXRpb24gb2YgQ3Jhc3N1cyBpcyBzYWlkIHRvIGhhdmUgY2xvc2VkLCBqdXN0IGxpa2UgYSB0cmFnZWR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcG9ldCBjb21wZXRpbmcgYXQgdGhlIEF0aGVuaWFuIENpdHkgRGlvbnlzaWEgZXhoaWJpdGVkIHRocmVlIHRyYWdlZGllcyBhbmQgYSBzYXR5cmljIGRyYW1hLCAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgZm91ciBwbGF5cyBiZWluZyBwZXJmb3JtZWQgaW4gc3VjY2Vzc2lvbiBpbiB0aGUgY291cnNlIG9mIHRoZSBzYW1lIGRheS48L3E+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyB3YXMgZ29pbmcgb24sIGl0IGhhcHBlbmVkIHRoYXQgSHlyb2RlcyB3YXMgYXQgbGFzdCByZWNvbmNpbGVkIHdpdGggQXJ0YXZhc2RlcyB0aGUgQXJtZW5pYW4sIGFuZCBhZ3JlZWQgdG8gcmVjZWl2ZSB0aGUgbGF0dGVyJ3Mgc2lzdGVyIGFzIHdpZmUgZm9yIGhpcyBzb24gUGFjb3J1cywgYW5kIHRoZXJlIHdlcmUgcmVjaXByb2NhbCBiYW5xdWV0cyBhbmQgZHJpbmtpbmcgYm91dHMsIGF0IHdoaWNoIG1hbnkgR3JlZWsgY29tcG9zaXRpb25zIHdlcmUgaW50cm9kdWNlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBIeXJvZGVzIHdhcyB3ZWxsIGFjcXVhaW50ZWQgYm90aCB3aXRoIHRoZSBHcmVlayBsYW5ndWFnZSBhbmQgbGl0ZXJhdHVyZSwgYW5kIEFydGF2YXNkZXMgYWN0dWFsbHkgY29tcG9zZWQgdHJhZ2VkaWVzLCBhbmQgd3JvdGUgb3JhdGlvbnMgYW5kIGhpc3Rvcmllcywgc29tZSBvZiB3aGljaCBhcmUgcHJlc2VydmVkLiBOb3cgd2hlbiB0aGUgaGVhZCBvZiBDcmFzc3VzIHdhcyBicm91Z2h0IHRvIHRoZSBraW5nJ3MgZG9vciwgdGhlIHRhYmxlcyBoYWQgYmVlbiByZW1vdmVkLCBhbmQgYSB0cmFnaWMgYWN0b3IsIEphc29uIGJ5IG5hbWUsIG9mIFRyYWxsZXMsIHdhcyBzaW5naW5nIHRoYXQgcGFydCBvZiB0aGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJhY2NoYWU8L3E+IG9mIEV1cmlwaWRlcyB3aGVyZSBBZ2F2ZSBpcyBhYm91dCB0byBhcHBlYXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZW50aGV1cywga2luZyBvZiBUaGViZXMsIHRoZSBzb24gb2YgQWdhdmUsIHJlZnVzZWQgdG8gcmVjb2duaXplIHRoZSBkaXZpbml0eSBvZiBEaW9ueXN1cywgd2hlcmV1cG9uIHRoZSBnb2QgaW5mdXJpYXRlZCB0aGUgd29tZW4sIGFuZCBBZ2F2ZSBraWxsZWQgaGVyIG93biBzb24uIFNoZSBhcHBlYXJzIGluIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWNjaGFlPC90aXRsZT4gd2l0aCBoaXMgaGVhZCBpbiBoZXIgaGFuZCwgZXh1bHRpbmcgb3ZlciB0aGUgZGVhdGggb2YgdGhlIHN1cHBvc2VkIHdpbGQgYmVhc3QuPC9ub3RlPiBXaGlsZSBoZSB3YXMgcmVjZWl2aW5nIGhpcyBhcHBsYXVzZSwgU2lsbGFjZXMgc3Rvb2QgYXQgdGhlIGRvb3Igb2YgdGhlIGJhbnF1ZXRpbmctaGFsbCwgYW5kIGFmdGVyIGEgbG93IG9iZWlzYW5jZSwgY2FzdCB0aGUgaGVhZCBvZiBDcmFzc3VzIGludG8gdGhlIGNlbnRyZSBvZiB0aGUgY29tcGFueS4gCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CYWNjaGFlPC90aXRsZT4gd2l0aCBoaXMgaGVhZCBpbiBoZXIgaGFuZCwgZXh1bHRpbmcgb3ZlciB0aGUgZGVhdGggb2YgdGhlIHN1cHBvc2VkIHdpbGQgYmVhc3QuPC90cmFuc2xhdGlvbj4="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBQYXJ0aGlhbnMgbGlmdGVkIGl0IHVwIHdpdGggY2xhcHBpbmcgb2YgaGFuZHMgYW5kIHNob3V0cyBvZiBqb3ksIGFuZCBhdCB0aGUga2luZydzIGJpZGRpbmcgaGlzIHNlcnZhbnRzIGdhdmUgU2lsbGFjZXMgYSBzZWF0IGF0IHRoZSBiYW5xdWV0LiBUaGVuIEphc29uIGhhbmRlZCBoaXMgY29zdHVtZSBvZiBQZW50aGV1cyB0byBvbmUgb2YgdGhlIGNob3J1cywgc2VpemVkIHRoZSBoZWFkIG9mIENyYXNzdXMsIGFuZCBhc3N1bWluZyB0aGUgcm9sZSBvZiB0aGUgZnJlbnppZWQgQWdhdmUsIHNhbmcgdGhlc2UgdmVyc2VzIHRocm91Z2ggYXMgaWYgaW5zcGlyZWQ6CgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBicmluZyBmcm9tIHRoZSBtb3VudGFpbjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4gQSB0ZW5kcmlsIGZyZXNoLWN1dCB0byB0aGUgcGFsYWNlLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4gQSB3b25kZXJmdWwgcHJleS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2UgYnJpbmcgZnJvbSB0aGUgbW91bnRhaW48L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IEEgdGVuZHJpbCBmcmVzaC1jdXQgdG8gdGhlIHBhbGFjZSw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IEEgd29uZGVyZnVsIHByZXkuPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVsaWdodGVkIGV2ZXJ5Ym9keTsgYnV0IHdoZW4gdGhlIGZvbGxvd2luZyBkaWFsb2d1ZSB3aXRoIHRoZSBjaG9ydXMgd2FzIGNoYW50ZWQ6CgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4oQ2hvcnVzKSA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBzbGV3IGhpbT88L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4oQWdhdmUpIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWluZSBpcyB0aGUgaG9ub3VyLDwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPlBvbWF4YXRocmVzLCB3aG8gaGFwcGVuZWQgdG8gYmUgb25lIG9mIHRoZSBiYW5xdWV0ZXJzLCBzcHJhbmcgdXAgYW5kIGxhaWQgaG9sZCBvZiB0aGUgaGVhZCwgZmVlbGluZyB0aGF0IGl0IHdhcyBtb3JlIGFwcHJvcHJpYXRlIGZvciBoaW0gdG8gc2F5IHRoaXMgdGhhbiBmb3IgSmFzb24uIFRoZSBraW5nIHdhcyBkZWxpZ2h0ZWQsIGFuZCBiZXN0b3dlZCBvbiBQb21heGF0aHJlcyB0aGUgY3VzdG9tYXJ5IGdpZnRzLCB3aGlsZSB0byBKYXNvbiBIZSBnYXZlIGEgdGFsZW50LiBXaXRoIHN1Y2ggYSBmYXJjZSBhcyB0aGlzIHRoZSBleHBlZGl0aW9uIG9mIENyYXNzdXMgaXMgc2FpZCB0byBoYXZlIGNsb3NlZCwganVzdCBsaWtlIGEgdHJhZ2VkeS48bCBjbGFzcz0idHJhbnNsYXRpb24iPihDaG9ydXMpIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIHNsZXcgaGltPzwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJCSAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldobyBzbGV3IGhpbT88L3E+CiAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+KEFnYXZlKSA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1pbmUgaXMgdGhlIGhvbm91ciw8L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaW5lIGlzIHRoZSBob25vdXIsPC9xPgogICAgICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcG9ldCBjb21wZXRpbmcgYXQgdGhlIEF0aGVuaWFuIENpdHkgRGlvbnlzaWEgZXhoaWJpdGVkIHRocmVlIHRyYWdlZGllcyBhbmQgYSBzYXR5cmljIGRyYW1hLCAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBmb3VyIHBsYXlzIGJlaW5nIHBlcmZvcm1lZCBpbiBzdWNjZXNzaW9uIGluIHRoZSBjb3Vyc2Ugb2YgdGhlIHNhbWUgZGF5LjwvcT4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBmb3VyIHBsYXlzIGJlaW5nIHBlcmZvcm1lZCBpbiBzdWNjZXNzaW9uIGluIHRoZSBjb3Vyc2Ugb2YgdGhlIHNhbWUgZGF5LjwvcT4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd29ydGh5IHB1bmlzaG1lbnQgb3ZlcnRvb2sgYm90aCBIeXJvZGVzIGZvciBIaXMgY3J1ZWx0eSBhbmQgU3VyZW5hIGZvciBoaXMgdHJlYWNoZXJ5LiBGb3Igbm90IGxvbmcgYWZ0ZXIgdGhpcyBIeXJvZGVzIGJlY2FtZSBqZWFsb3VzIG9mIHRoZSByZXB1dGF0aW9uIG9mIFN1cmVuYSwgYW5kIHB1dCBoaW0gdG8gZGVhdGg7IGFuZCBhZnRlciBIeXJvZGVzIGhhZCBsb3N0IGhpcyBzb24gUGFjb3J1cywgd2hvIHdhcyBkZWZlYXRlZCBpbiBiYXR0bGUgYnkgdGhlIFJvbWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zOCBCLkMuIENmLiBQbHV0YXJjaCdzIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbnQuIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW50b255LDwvdGl0bGU+IHh4eGl2LiAxLjwvYmlibD4gQWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQ5LjIxIj5EaW8gQ2Fzc2l1cywgeGxpeCwgMjE8L2JpYmw+LCBQYWNvcnVzIGZlbGwgb24gdGhlIHNhbWUgZGF5IG9uIHdoaWNoIENyYXNzdXMgaGFkIGJlZW4gc2xhaW4gZmlmdGVlbiB5ZWFycyBiZWZvcmUuPC9ub3RlPiBhbmQgaGFkIGZhbGxlbiBpbnRvIGEgZGlzZWFzZSB3aGljaCByZXN1bHRlZCBpbiBkcm9wc3ksIEhpcyBzb24gUGhyYWF0ZXMgcGxvdHRlZCBhZ2FpbnN0IGhpcyBsaWZlIGFuZCBnYXZlIGhpbSBhY29uaXRlLiBBbmQgd2hlbiB0aGUgZGlzZWFzZSBhYnNvcmJlZCB0aGUgcG9pc29uIHNvIHRoYXQgaXQgd2FzIHRocm93biBvZmYgd2l0aCBpdCBhbmQgdGhlIHBhdGllbnQgdGhlcmVieSByZWxpZXZlZCwgUGhyYWF0ZXMgdG9vayB0aGUgc2hvcnRlc3QgcGF0aCBhbmQgc3RyYW5nbGVkIGhpcyBmYXRoZXIuIAoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
