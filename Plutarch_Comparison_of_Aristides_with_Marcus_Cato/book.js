var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgY2FzZSBvZiBBcmlzdGlkZXMsIEF0aGVucyB3YXMgbm90IHlldCBncmVhdCB3aGVuIGhlIHJvc2UgdG8gZW1pbmVuY2UsIGFuZCB0aGUgbGVhZGVycyBhbmQgZ2VuZXJhbHMgd2l0aCB3aG9tIGhlIGRlYWx0IHdlcmUgbWVuIG9mIG1vZGVyYXRlIGFuZCB1bmlmb3JtIGZvcnR1bmVzLiBUaGUgaGlnaGVzdCBhc3Nlc3NtZW50IG9mIHByb3BlcnR5IGluIHRob3NlIGRheXMgd2FzIGZpdmUgaHVuZHJlZCBidXNoZWxzIG9mIGdyYWluLCB0aGUgc2Vjb25kIHRocmVlIGh1bmRyZWQsIHRoZSB0aGlyZCBhbmQgbGFzdCB0d28gaHVuZHJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMgQ2F0bywgY29taW5nIGZyb20gYSBsaXR0bGUgdG93biBhbmQgZnJvbSB3YXlzIG9mIGxpZmUgZGVlbWVkIHJ1c3RpYywgcGx1bmdlZCBoZWFkbG9uZyBpbnRvIHRoZSBib3VuZGxlc3Mgc2VhIG9mIFJvbWFuIHBvbGl0aWNzIHdoZW4gdGhleSB3ZXJlIG5vIGxvbmdlciBjb25kdWN0ZWQgYnkgc3VjaCBtZW4gYXMgQ3VyaXVzLCBGYWJyaWNpdXMsIGFuZCBBdGlsaXVzLCBub3Igd2VsY29tZWQgYXMgbWFnaXN0cmF0ZXMgYW5kIGxlYWRlcnMgcG9vciBtZW4gd2hvIGhhZCBtb3VudGVkIHRoZSByb3N0cnVtIGFmdGVyIHdvcmtpbmcgd2l0aCB0aGVpciBvd24gaGFuZHMgYXQgdGhlIHBsb3VnaCBhbmQgdGhlIG1hdHRvY2ssIGJ1dCB3ZXJlIHdvbnQgdG8gaGF2ZSByZWdhcmQgcmF0aGVyIGZvciBncmVhdCBmYW1pbGllcyBhbmQgdGhlaXIgd2VhbHRoLCBsYXJnZXNzZXMsIGFuZCBzb2xpY2l0YXRpb25zLCB3aGlsZSB0aG9zZSB3aG8gc291Z2h0IG9mZmljZSwgc3VjaCB3YXMgbm93IHRoZSBwb3dlciBhbmQgYXJyb2dhbmNlIG9mIHRoZSBwZW9wbGUsIHdlcmUgd2FudG9ubHkgaGFuZGxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3QgdGhlIHNhbWUgdGhpbmcgdG8gaGF2ZSBUaGVtaXN0b2NsZXMgZm9yIGEgcml2YWwsIHdobyB3YXMgb2Ygbm8gaWxsdXN0cmlvdXMgZmFtaWx5IGFuZCBoYWQgb25seSBtb2RlcmF0ZSBwb3NzZXNzaW9ucyAoaGUgaXMgc2FpZCB0byBoYXZlIGJlZW4gd29ydGggdGhyZWUsIG9yLCBhdCBtb3N0LCBmaXZlIHRhbGVudHMgd2hlbiBoZSBlbnRlcmVkIHB1YmxpYyBsaWZlKSwgYXMgaXQgd2FzIHRvIGNvbXBldGUgZm9yIHByZS1lbWluZW5jZSB3aXRoIHN1Y2ggbWVuIGFzIFNjaXBpbyBBZnJpY2FudXMsIFNlcnZpdXMgR2FsYmEsIGFuZCBRdWludGl1cyBGbGFtaW5pbnVzLCBoYXZpbmcgbm8gb3RoZXIgYWR2YW50YWdlIHRoYW4gYSB0b25ndWUgd2hpY2ggc3Bva2UgYm9sZGx5IGZvciB0aGUgcmlnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgYXQgTWFyYXRob24sIGFuZCBhZ2FpbiBhdCBQbGF0YWVhLCBBcmlzdGlkZXMgd2FzIG9ubHkgb25lIG9mIHRlbiBnZW5lcmFscywgd2hpbGUgQ2F0byB3YXMgZWxlY3RlZCBvbmUgb2YgdHdvIGNvbnN1bHMgb3V0IG9mIG1hbnkgY29tcGV0aXRvcnMsIGFuZCBvbmUgb2YgdHdvIGNlbnNvcnMgb3ZlciB0aGUgaGVhZHMgb2Ygc2V2ZW4gb2YgdGhlIGZvcmVtb3N0IGFuZCBtb3N0IGlsbHVzdHJpb3VzIFJvbWFucywgd2hvIHN0b29kIGZvciB0aGUgb2ZmaWNlIHdpdGggaGltLiBGdXJ0aGVybW9yZSwgQXJpc3RpZGVzIHdhcyBub3QgdGhlIGZvcmVtb3N0IG1hbiBpbiBhbnkgb25lIG9mIGhpcyB2aWN0b3JpZXMsIGJ1dCBNaWx0aWFkZXMgaGFzIHRoZSBjaGllZiBob25vdXIgb2YgTWFyYXRob24sIFRoZW1pc3RvY2xlcyBvZiBTYWxhbWlzLCBhbmQgYXQgUGxhdGFlYSwgSGVyb2RvdHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDkuNjQiIHZhbGlkPSJ5ZXMiPml4LiA2NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc2F5cyBpdCB3YXMgUGF1c2FuaWFzIHdobyB3b24gdGhhdCBmYWlyZXN0IG9mIGFsbCB2aWN0b3JpZXMsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGV2ZW4gZm9yIHNlY29uZCBob25vdXJzIEFyaXN0aWRlcyBoYXMgc3VjaCByaXZhbHMgYXMgU29waGFuZXMsIEFtZWluaWFzLCBDYWxsaW1hY2h1cywgYW5kIEN5bmFlZ2VpcnVzLCB3aG8gZGlzcGxheWVkIHRoZSBncmVhdGVzdCB2YWxvdXIgaW4gdGhvc2UgYWN0aW9ucy4gQ2F0bywgb24gdGhlIG90aGVyIGhhbmQsIHdhcyBub3Qgb25seSBjaGllZiBpbiB0aGUgcGxhbnMgYW5kIGFjdGlvbnMgb2YgdGhlIFNwYW5pc2ggd2FyIGR1cmluZyBoaXMgb3duIGNvbnN1bGF0ZSwgYnV0IGFsc28gYXQgVGhlcm1vcHlsYWUsIHdoZW4gaGUgd2FzIGJ1dCBhIHRyaWJ1bmUgaW4gdGhlIGFybXkgYW5kIGFub3RoZXIgd2FzIGNvbnN1bCwgaGUgZ290IHRoZSBnbG9yeSBvZiB0aGUgdmljdG9yeSwgb3BlbmluZyB1cCBncmVhdCBtb3VudGFpbiBwYXNzZXMgZm9yIHRoZSBSb21hbnMgdG8gcnVzaCB0aHJvdWdoIHVwb24gQW50aW9jaHVzLCBhbmQgc3dpbmdpbmcgdGhlIHdhciByb3VuZCBpbnRvIHRoZSBraW5nJ3MgcmVhciwgd2hlbiBoZSBoYWQgZXllcyBvbmx5IGZvciB3aGF0IHdhcyBpbiBmcm9udCBvZiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgdmljdG9yeSB3YXMgbWFuaWZlc3RseSB0aGUgd29yayBvZiBDYXRvLCBhbmQgaXQgbm90IG9ubHkgZHJvdmUgQXNpYSBvdXQgb2YgSGVsbGFzLCBidXQgbWFkZSBpdCBhZnRlcndhcmRzIGFjY2Vzc2libGUgdG8gU2NpcGlvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzLCBhdCBNYXJhdGhvbiwgYW5kIGFnYWluIGF0IFBsYXRhZWEsIEFyaXN0aWRlcyB3YXMgb25seSBvbmUgb2YgdGVuIGdlbmVyYWxzLCB3aGlsZSBDYXRvIHdhcyBlbGVjdGVkIG9uZSBvZiB0d28gY29uc3VscyBvdXQgb2YgbWFueSBjb21wZXRpdG9ycywgYW5kIG9uZSBvZiB0d28gY2Vuc29ycyBvdmVyIHRoZSBoZWFkcyBvZiBzZXZlbiBvZiB0aGUgZm9yZW1vc3QgYW5kIG1vc3QgaWxsdXN0cmlvdXMgUm9tYW5zLCB3aG8gc3Rvb2QgZm9yIHRoZSBvZmZpY2Ugd2l0aCBoaW0uIEZ1cnRoZXJtb3JlLCBBcmlzdGlkZXMgd2FzIG5vdCB0aGUgZm9yZW1vc3QgbWFuIGluIGFueSBvbmUgb2YgaGlzIHZpY3RvcmllcywgYnV0IE1pbHRpYWRlcyBoYXMgdGhlIGNoaWVmIGhvbm91ciBvZiBNYXJhdGhvbiwgVGhlbWlzdG9jbGVzIG9mIFNhbGFtaXMsIGFuZCBhdCBQbGF0YWVhLCBIZXJvZG90dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDkuNjQiIHZhbGlkPSJ5ZXMiPml4LiA2NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc2F5cyBpdCB3YXMgUGF1c2FuaWFzIHdobyB3b24gdGhhdCBmYWlyZXN0IG9mIGFsbCB2aWN0b3JpZXMsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA5LjY0IiB2YWxpZD0ieWVzIj5peC4gNjQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGV2ZW4gZm9yIHNlY29uZCBob25vdXJzIEFyaXN0aWRlcyBoYXMgc3VjaCByaXZhbHMgYXMgU29waGFuZXMsIEFtZWluaWFzLCBDYWxsaW1hY2h1cywgYW5kIEN5bmFlZ2VpcnVzLCB3aG8gZGlzcGxheWVkIHRoZSBncmVhdGVzdCB2YWxvdXIgaW4gdGhvc2UgYWN0aW9ucy4gQ2F0bywgb24gdGhlIG90aGVyIGhhbmQsIHdhcyBub3Qgb25seSBjaGllZiBpbiB0aGUgcGxhbnMgYW5kIGFjdGlvbnMgb2YgdGhlIFNwYW5pc2ggd2FyIGR1cmluZyBoaXMgb3duIGNvbnN1bGF0ZSwgYnV0IGFsc28gYXQgVGhlcm1vcHlsYWUsIHdoZW4gaGUgd2FzIGJ1dCBhIHRyaWJ1bmUgaW4gdGhlIGFybXkgYW5kIGFub3RoZXIgd2FzIGNvbnN1bCwgaGUgZ290IHRoZSBnbG9yeSBvZiB0aGUgdmljdG9yeSwgb3BlbmluZyB1cCBncmVhdCBtb3VudGFpbiBwYXNzZXMgZm9yIHRoZSBSb21hbnMgdG8gcnVzaCB0aHJvdWdoIHVwb24gQW50aW9jaHVzLCBhbmQgc3dpbmdpbmcgdGhlIHdhciByb3VuZCBpbnRvIHRoZSBraW5nJ3MgcmVhciwgd2hlbiBoZSBoYWQgZXllcyBvbmx5IGZvciB3aGF0IHdhcyBpbiBmcm9udCBvZiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgdmljdG9yeSB3YXMgbWFuaWZlc3RseSB0aGUgd29yayBvZiBDYXRvLCBhbmQgaXQgbm90IG9ubHkgZHJvdmUgQXNpYSBvdXQgb2YgSGVsbGFzLCBidXQgbWFkZSBpdCBhZnRlcndhcmRzIGFjY2Vzc2libGUgdG8gU2NpcGlvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIHRydWUgdGhhdCBib3RoIHdlcmUgYWx3YXlzIHZpY3RvcmlvdXMgaW4gd2FyLCBidXQgaW4gcG9saXRpY3MgQXJpc3RpZGVzIGdvdCBhIGZhbGwsIGJlaW5nIGRyaXZlbiBpbnRvIGEgbWlub3JpdHkgYW5kIG9zdHJhY2lzZWQgYnkgVGhlbWlzdG9jbGVzLiBDYXRvLCBvbiB0aGUgY29udHJhcnksIHRob3VnaCBoZSBoYWQgZm9yIGhpcyBhbnRhZ29uaXN0cyBhbG1vc3QgYWxsIHRoZSBncmVhdGVzdCBhbmQgYWJsZXN0IG1lbiBpbiBSb21lLCBhbmQgdGhvdWdoIGhlIGtlcHQgb24gd3Jlc3RsaW5nIHdpdGggdGhlbSB1cCB0byBoaXMgb2xkIGFnZSwgbmV2ZXIgbG9zdCBoaXMgZm9vdGluZy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgaW52b2x2ZWQgaW4gY291bnRsZXNzIGNpdmlsIHByb2Nlc3NlcywgYm90aCBhcyBwbGFpbnRpZmYgYW5kIGRlZmVuZGFudDsgYXMgcGxhaW50aWZmLCBoZSBvZnRlbiB3b24gaGlzIGNhc2UsIGFzIGRlZmVuZGFudCwgaGUgbmV2ZXIgbG9zdCBpdCwgdGhhbmtzIHRvIHRoYXQgYnVsd2FyayBhbmQgZWZmaWNhY2lvdXMgd2VhcG9uIG9mIGhpcyBsaWZlLCBoaXMgZWxvcXVlbmNlLiBUbyB0aGlzLCBtb3JlIGp1c3RseSB0aGFuIHRvIGZvcnR1bmUgYW5kIHRoZSBndWFyZGlhbiBnZW5pdXMgb2YgdGhlIG1hbiwgd2UgbWF5IGFzY3JpYmUgdGhlIGZhY3QgdGhhdCBoZSB3YXMgbmV2ZXIgdmlzaXRlZCB3aXRoIGRpc2dyYWNlLiBUaGF0IHdhcyBhIGdyZWF0IHRyaWJ1dGUgd2hpY2ggd2FzIHBhaWQgQXJpc3RvdGxlIHRoZSBwaGlsb3NvcGhlciBieSBBbnRpcGF0ZXIsIHdoZW4gaGUgd3JvdGUgY29uY2VybmluZyBoaW0sIGFmdGVyIGhpcyBkZWF0aCwgdGhhdCBpbiBhZGRpdGlvbiB0byBhbGwgaGlzIG90aGVyIGdpZnRzLCB0aGUgbWFuIGhhZCBhbHNvIHRoZSBnaWZ0IG9mIHBlcnN1YXNpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBpbnZvbHZlZCBpbiBjb3VudGxlc3MgY2l2aWwgcHJvY2Vzc2VzLCBib3RoIGFzIHBsYWludGlmZiBhbmQgZGVmZW5kYW50OyBhcyBwbGFpbnRpZmYsIGhlIG9mdGVuIHdvbiBoaXMgY2FzZSwgYXMgZGVmZW5kYW50LCBoZSBuZXZlciBsb3N0IGl0LCB0aGFua3MgdG8gdGhhdCBidWx3YXJrIGFuZCBlZmZpY2FjaW91cyB3ZWFwb24gb2YgaGlzIGxpZmUsIGhpcyBlbG9xdWVuY2UuIFRvIHRoaXMsIG1vcmUganVzdGx5IHRoYW4gdG8gZm9ydHVuZSBhbmQgdGhlIGd1YXJkaWFuIGdlbml1cyBvZiB0aGUgbWFuLCB3ZSBtYXkgYXNjcmliZSB0aGUgZmFjdCB0aGF0IGhlIHdhcyBuZXZlciB2aXNpdGVkIHdpdGggZGlzZ3JhY2UuIFRoYXQgd2FzIGEgZ3JlYXQgdHJpYnV0ZSB3aGljaCB3YXMgcGFpZCBBcmlzdG90bGUgdGhlIHBoaWxvc29waGVyIGJ5IEFudGlwYXRlciwgd2hlbiBoZSB3cm90ZSBjb25jZXJuaW5nIGhpbSwgYWZ0ZXIgaGlzIGRlYXRoLCB0aGF0IGluIGFkZGl0aW9uIHRvIGFsbCBoaXMgb3RoZXIgZ2lmdHMsIHRoZSBtYW4gaGFkIGFsc28gdGhlIGdpZnQgb2YgcGVyc3Vhc2lvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYW4gaGFzIG5vIGhpZ2hlciBjYXBhY2l0eSB0aGFuIHRoYXQgZm9yIGNvbmR1Y3RpbmcgY2l0aWVzIGFuZCBzdGF0ZXMsIGFzIGlzIGdlbmVyYWxseSBhZG1pdHRlZC4gQnV0IHRoZSBhYmlsaXR5IHRvIGNvbmR1Y3QgYSBob3VzZWhvbGQgZW50ZXJzIGluIG5vIHNtYWxsIGRlZ3JlZSBpbnRvIHRoaXMgaGlnaGVyIHBvbGl0aWNhbCBjYXBhY2l0eSwgYXMgbW9zdCBiZWxpZXZlLiBGb3IgdGhlIGNpdHkgaXMgYnV0IGFuIG9yZ2FuaXNlZCBzdW0gdG90YWwgb2YgaG91c2Vob2xkcywgYW5kIGhhcyBwdWJsaWMgdmlnb3VyIG9ubHkgYXMgaXRzIGNpdGl6ZW5zIHByb3NwZXIgaW4gdGhlaXIgcHJpdmF0ZSBsaXZlcy4gV2hlbiBMeWN1cmd1cyBiYW5pc2hlZCBib3RoIHNpbHZlciBhbmQgZ29sZCBmcm9tIFNwYXJ0YSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGludHJvZHVjZWQgdGhlcmUgYSBjb2luYWdlIG9mIGlyb24gdGhhdCBoYWQgYmVlbiBydWluZWQgYnkgZmlyZSwgaGUgZGlkIG5vdCBzZXQgaGlzIGZlbGxvdyBjaXRpemVucyBmcmVlIGZyb20gdGhlIGR1dHkgb2YgZG9tZXN0aWMgZWNvbm9teS4gSGUgbWVyZWx5IHJlbW92ZWQgdGhlIHN3b2xsZW4gYW5kIGZldmVyaXNoIHdhbnRvbm5lc3Mgb2Ygd2VhbHRoLCBhbmQgc28gcHJvdmlkZWQgdGhhdCBhbGwgYWxpa2UgbWlnaHQgaGF2ZSBhbiBhYnVuZGFuY2Ugb2YgdGhlIG5lY2Vzc2FyeSBhbmQgdXNlZnVsIHRoaW5ncyBvZiBsaWZlLiBIZSBkaWQgdGhpcyBiZWNhdXNlLCBiZXR0ZXIgdGhhbiBhbnkgb3RoZXIgYW5jaWVudCBsZWdpc2xhdG9yLCBoZSBmb3Jlc2F3IHRoYXQgdGhlIGhlbHBsZXNzLCBob21lbGVzcywgYW5kIHBvdmVydHktc3RyaWNrZW4gY2l0aXplbiB3YXMgYSBncmVhdGVyIG1lbmFjZSB0byB0aGUgY29tbW9ud2VhbHRoIHRoYW4gb25lIHdobyB3YXMgcmljaCBhbmQgb3N0ZW50YXRpb3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvLCB0aGVuLCB3YXMgbm8gd2hpdCBsZXNzIGVmZmljaWVudCBpbiB0aGUgY29uZHVjdCBvZiBoaXMgaG91c2Vob2xkIHRoYW4gaW4gdGhhdCBvZiB0aGUgY2l0eS4gSGUgbm90IG9ubHkgaW5jcmVhc2VkIGhpcyBvd24gc3Vic3RhbmNlLCBidXQgYmVjYW1lIGEgcmVjb2duaXplZCB0ZWFjaGVyIG9mIGRvbWVzdGljIGVjb25vbXkgYW5kIGFncmljdWx0dXJlIGZvciBvdGhlcnMsIGFuZCBjb21waWxlZCBtYW55IHVzZWZ1bCBwcmVjZXB0cyBvbiB0aGVzZSBzdWJqZWN0cy4gQXJpc3RpZGVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgd2FzIHNvIHBvb3IgYXMgdG8gYnJpbmcgZXZlbiBoaXMgcmlnaHRlb3VzbmVzcyBpbnRvIGRpc3JlcHV0ZSwgYXMgcnVpbmluZyBhIGhvdXNlaG9sZCwgcmVkdWNpbmcgYSBtYW4gdG8gYmVnZ2FyeSwgYW5kIHByb2ZpdGluZyBldmVyeWJvZHkgcmF0aGVyIHRoYW4gaXRzIHBvc3Nlc3Nvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBIZXNpb2Q8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikhlcy4gV0QgMzA5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPldvcmtzIGFuZCBEYXlzPC90aXRsZT4sIDMwOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFzIG11Y2ggdG8gc2F5IGJ5IHdheSBvZiBleGhvcnRpbmcgdXMgdG8gcmlnaHRlb3VzbmVzcyBhbGxpZWQgd2l0aCBkb21lc3RpYyBlY29ub215LCBhbmQgYWJ1c2VzIGlkbGVuZXNzIGFzIGEgc291cmNlIG9mIGluanVzdGljZTsgSG9tZXIgYWxzbyBzYXlzIHdlbGw64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkxhYm91ciBJIG5ldmVyIGxpa2VkLDwvbD4KCQkJCQkgICAgICAgICAgPGw+Tm9yIGhvdXNlaG9sZCB0aHJpZnQsIHdoaWNoIGJyZWVkcyBnb29kIGNoaWxkcmVuLiA8L2w+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBzaGlwcyBlcXVpcHBlZCB3aXRoIG9hcnMgd2VyZSBldmVyIG15IGRlbGlnaHQsIDwvbD4KCQkJCQkgICAgICAgICAgPGw+QmF0dGxlcyBhbmQgcG9saXNoZWQgamF2ZWxpbnMgYW5kIGFycm93cyw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMTQuMjIyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgeGl2LiAyMjIgZmYuPC9iaWJsPiwgUGFsbWVyJ3MgdHJhbnNsYXRpb24uPC9ub3RlPgoJCQkJaW1wbHlpbmcgdGhhdCB0aGUgbWVuIHdobyBuZWdsZWN0IHRoZWlyIGhvdXNlaG9sZHMgYXJlIHRoZSB2ZXJ5IG9uZXMgdG8gbGl2ZSBieSBpbmp1c3RpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9pbCwgYXMgcGh5c2ljaWFucyB0ZWxsIHVzLCBpcyB2ZXJ5IGJlbmVmaWNpYWwgd2hlbiBleHRlcm5hbGx5IGFwcGxpZWQsIHRob3VnaCB2ZXJ5IGluanVyaW91cyB3aGVuIHVzZWQgaW50ZXJuYWxseS4gQnV0IHRoZSByaWdodGVvdXMgaXMgbm90IHNvLiBIZSBpcyBub3QgaGVscGZ1bCB0byBvdGhlcnMsIHdoaWxlIGhlZWRsZXNzIG9mIGhpbXNlbGYgYW5kIGhpcyBmYW1pbHkuIEluZGVlZCwgdGhlIHBvdmVydHkgb2YgQXJpc3RpZGVzIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIGEgYmxlbWlzaCBvbiBoaXMgcG9saXRpY2FsIGNhcmVlciwgaWYsIGFzIG1vc3Qgd3JpdGVycyBzdGF0ZSwgaGUgaGFkIG5vdCBmb3Jlc2lnaHQgZW5vdWdoIHRvIGxlYXZlIGhpcyBwb29yIGRhdWdodGVycyBhIG1hcnJpYWdlIHBvcnRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmlzdC4gMjcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGV2ZW4gdGhlIGNvc3Qgb2YgaGlzIG93biBidXJpYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCBmZWxsIG91dCB0aGF0IHRoZSBmYW1pbHkgb2YgQ2F0byBmdXJuaXNoZWQgUm9tZSB3aXRoIHByYWV0b3JzIGFuZCBjb25zdWxzIGRvd24gdG8gdGhlIGZvdXJ0aCBnZW5lcmF0aW9uLCBmb3IgaGlzIGdyYW5kc29ucywgYW5kIHRoZWlyIHNvbnMgYWZ0ZXIgdGhlbSwgZmlsbGVkIHRoZSBoaWdoZXN0IG9mZmljZXMgb2Ygc3RhdGUuIFdoZXJlYXMsIHRob3VnaCBBcmlzdGlkZXMgd2FzIGZvcmVtb3N0IG9mIHRoZSBHcmVla3MsIHRoZSBhYmplY3QgcG92ZXJ0eSBvZiBoaXMgZGVzY2VuZGFudHMgZm9yY2VkIHNvbWUgdG8gcGx5IGEgZm9ydHVuZS10ZWxsZXIncyB0cmFkZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyaXN0LiAyNy4gMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBvdGhlcnMsIGZvciB2ZXJ5IHdhbnQsIHRvIHNvbGljaXQgdGhlIHB1YmxpYyBib3VudHksIHdoaWxlIGl0IHJvYmJlZCB0aGVtIGFsbCBvZiBldmVyeSBhbWJpdGlvbiB0byBleGNlbCwgb3IgZXZlbiB0byBiZSB3b3J0aHkgb2YgdGhlaXIgZ3JlYXQgYW5jZXN0b3IuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYW4gaGFzIG5vIGhpZ2hlciBjYXBhY2l0eSB0aGFuIHRoYXQgZm9yIGNvbmR1Y3RpbmcgY2l0aWVzIGFuZCBzdGF0ZXMsIGFzIGlzIGdlbmVyYWxseSBhZG1pdHRlZC4gQnV0IHRoZSBhYmlsaXR5IHRvIGNvbmR1Y3QgYSBob3VzZWhvbGQgZW50ZXJzIGluIG5vIHNtYWxsIGRlZ3JlZSBpbnRvIHRoaXMgaGlnaGVyIHBvbGl0aWNhbCBjYXBhY2l0eSwgYXMgbW9zdCBiZWxpZXZlLiBGb3IgdGhlIGNpdHkgaXMgYnV0IGFuIG9yZ2FuaXNlZCBzdW0gdG90YWwgb2YgaG91c2Vob2xkcywgYW5kIGhhcyBwdWJsaWMgdmlnb3VyIG9ubHkgYXMgaXRzIGNpdGl6ZW5zIHByb3NwZXIgaW4gdGhlaXIgcHJpdmF0ZSBsaXZlcy4gV2hlbiBMeWN1cmd1cyBiYW5pc2hlZCBib3RoIHNpbHZlciBhbmQgZ29sZCBmcm9tIFNwYXJ0YSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbnRyb2R1Y2VkIHRoZXJlIGEgY29pbmFnZSBvZiBpcm9uIHRoYXQgaGFkIGJlZW4gcnVpbmVkIGJ5IGZpcmUsIGhlIGRpZCBub3Qgc2V0IGhpcyBmZWxsb3cgY2l0aXplbnMgZnJlZSBmcm9tIHRoZSBkdXR5IG9mIGRvbWVzdGljIGVjb25vbXkuIEhlIG1lcmVseSByZW1vdmVkIHRoZSBzd29sbGVuIGFuZCBmZXZlcmlzaCB3YW50b25uZXNzIG9mIHdlYWx0aCwgYW5kIHNvIHByb3ZpZGVkIHRoYXQgYWxsIGFsaWtlIG1pZ2h0IGhhdmUgYW4gYWJ1bmRhbmNlIG9mIHRoZSBuZWNlc3NhcnkgYW5kIHVzZWZ1bCB0aGluZ3Mgb2YgbGlmZS4gSGUgZGlkIHRoaXMgYmVjYXVzZSwgYmV0dGVyIHRoYW4gYW55IG90aGVyIGFuY2llbnQgbGVnaXNsYXRvciwgaGUgZm9yZXNhdyB0aGF0IHRoZSBoZWxwbGVzcywgaG9tZWxlc3MsIGFuZCBwb3ZlcnR5LXN0cmlja2VuIGNpdGl6ZW4gd2FzIGEgZ3JlYXRlciBtZW5hY2UgdG8gdGhlIGNvbW1vbndlYWx0aCB0aGFuIG9uZSB3aG8gd2FzIHJpY2ggYW5kIG9zdGVudGF0aW91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIHRoZW4sIHdhcyBubyB3aGl0IGxlc3MgZWZmaWNpZW50IGluIHRoZSBjb25kdWN0IG9mIGhpcyBob3VzZWhvbGQgdGhhbiBpbiB0aGF0IG9mIHRoZSBjaXR5LiBIZSBub3Qgb25seSBpbmNyZWFzZWQgaGlzIG93biBzdWJzdGFuY2UsIGJ1dCBiZWNhbWUgYSByZWNvZ25pemVkIHRlYWNoZXIgb2YgZG9tZXN0aWMgZWNvbm9teSBhbmQgYWdyaWN1bHR1cmUgZm9yIG90aGVycywgYW5kIGNvbXBpbGVkIG1hbnkgdXNlZnVsIHByZWNlcHRzIG9uIHRoZXNlIHN1YmplY3RzLiBBcmlzdGlkZXMsIG9uIHRoZSBvdGhlciBoYW5kLCB3YXMgc28gcG9vciBhcyB0byBicmluZyBldmVuIGhpcyByaWdodGVvdXNuZXNzIGludG8gZGlzcmVwdXRlLCBhcyBydWluaW5nIGEgaG91c2Vob2xkLCByZWR1Y2luZyBhIG1hbiB0byBiZWdnYXJ5LCBhbmQgcHJvZml0aW5nIGV2ZXJ5Ym9keSByYXRoZXIgdGhhbiBpdHMgcG9zc2Vzc29yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgSGVzaW9kPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGVzLiBXRCAzMDkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3JrcyBhbmQgRGF5czwvdGl0bGU+LCAzMDkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhhcyBtdWNoIHRvIHNheSBieSB3YXkgb2YgZXhob3J0aW5nIHVzIHRvIHJpZ2h0ZW91c25lc3MgYWxsaWVkIHdpdGggZG9tZXN0aWMgZWNvbm9teSwgYW5kIGFidXNlcyBpZGxlbmVzcyBhcyBhIHNvdXJjZSBvZiBpbmp1c3RpY2U7IEhvbWVyIGFsc28gc2F5cyB3ZWxsOuKAlAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGVzLiBXRCAzMDkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3JrcyBhbmQgRGF5czwvdGl0bGU+LCAzMDkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3JrcyBhbmQgRGF5czwvdGl0bGU+LCAzMDkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGFib3VyIEkgbmV2ZXIgbGlrZWQsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk5vciBob3VzZWhvbGQgdGhyaWZ0LCB3aGljaCBicmVlZHMgZ29vZCBjaGlsZHJlbi4gPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaGlwcyBlcXVpcHBlZCB3aXRoIG9hcnMgd2VyZSBldmVyIG15IGRlbGlnaHQsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CYXR0bGVzIGFuZCBwb2xpc2hlZCBqYXZlbGlucyBhbmQgYXJyb3dzLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MYWJvdXIgSSBuZXZlciBsaWtlZCw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIGhvdXNlaG9sZCB0aHJpZnQsIHdoaWNoIGJyZWVkcyBnb29kIGNoaWxkcmVuLiA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHNoaXBzIGVxdWlwcGVkIHdpdGggb2FycyB3ZXJlIGV2ZXIgbXkgZGVsaWdodCwgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJhdHRsZXMgYW5kIHBvbGlzaGVkIGphdmVsaW5zIGFuZCBhcnJvd3MsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxNC4yMjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHhpdi4gMjIyIGZmLjwvYmlibD4sIFBhbG1lcidzIHRyYW5zbGF0aW9uLjwvbm90ZT4KCQkJCWltcGx5aW5nIHRoYXQgdGhlIG1lbiB3aG8gbmVnbGVjdCB0aGVpciBob3VzZWhvbGRzIGFyZSB0aGUgdmVyeSBvbmVzIHRvIGxpdmUgYnkgaW5qdXN0aWNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDE0LjIyMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgeGl2LiAyMjIgZmYuPC9iaWJsPiwgUGFsbWVyJ3MgdHJhbnNsYXRpb24uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB4aXYuIDIyMiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9pbCwgYXMgcGh5c2ljaWFucyB0ZWxsIHVzLCBpcyB2ZXJ5IGJlbmVmaWNpYWwgd2hlbiBleHRlcm5hbGx5IGFwcGxpZWQsIHRob3VnaCB2ZXJ5IGluanVyaW91cyB3aGVuIHVzZWQgaW50ZXJuYWxseS4gQnV0IHRoZSByaWdodGVvdXMgaXMgbm90IHNvLiBIZSBpcyBub3QgaGVscGZ1bCB0byBvdGhlcnMsIHdoaWxlIGhlZWRsZXNzIG9mIGhpbXNlbGYgYW5kIGhpcyBmYW1pbHkuIEluZGVlZCwgdGhlIHBvdmVydHkgb2YgQXJpc3RpZGVzIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIGEgYmxlbWlzaCBvbiBoaXMgcG9saXRpY2FsIGNhcmVlciwgaWYsIGFzIG1vc3Qgd3JpdGVycyBzdGF0ZSwgaGUgaGFkIG5vdCBmb3Jlc2lnaHQgZW5vdWdoIHRvIGxlYXZlIGhpcyBwb29yIGRhdWdodGVycyBhIG1hcnJpYWdlIHBvcnRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJpc3QuIDI3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG9yIGV2ZW4gdGhlIGNvc3Qgb2YgaGlzIG93biBidXJpYWwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJpc3QuIDI3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDEuPC90cmFuc2xhdGlvbj4="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCBmZWxsIG91dCB0aGF0IHRoZSBmYW1pbHkgb2YgQ2F0byBmdXJuaXNoZWQgUm9tZSB3aXRoIHByYWV0b3JzIGFuZCBjb25zdWxzIGRvd24gdG8gdGhlIGZvdXJ0aCBnZW5lcmF0aW9uLCBmb3IgaGlzIGdyYW5kc29ucywgYW5kIHRoZWlyIHNvbnMgYWZ0ZXIgdGhlbSwgZmlsbGVkIHRoZSBoaWdoZXN0IG9mZmljZXMgb2Ygc3RhdGUuIFdoZXJlYXMsIHRob3VnaCBBcmlzdGlkZXMgd2FzIGZvcmVtb3N0IG9mIHRoZSBHcmVla3MsIHRoZSBhYmplY3QgcG92ZXJ0eSBvZiBoaXMgZGVzY2VuZGFudHMgZm9yY2VkIHNvbWUgdG8gcGx5IGEgZm9ydHVuZS10ZWxsZXIncyB0cmFkZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmlzdC4gMjcuIDMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBvdGhlcnMsIGZvciB2ZXJ5IHdhbnQsIHRvIHNvbGljaXQgdGhlIHB1YmxpYyBib3VudHksIHdoaWxlIGl0IHJvYmJlZCB0aGVtIGFsbCBvZiBldmVyeSBhbWJpdGlvbiB0byBleGNlbCwgb3IgZXZlbiB0byBiZSB3b3J0aHkgb2YgdGhlaXIgZ3JlYXQgYW5jZXN0b3IuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyaXN0LiAyNy4gMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaXN0aWRlczwvdGl0bGU+LCB4eHZpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaXN0aWRlczwvdGl0bGU+LCB4eHZpaS4gMy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBvc3NpYmx5IHRoaXMgcG9pbnQgaW52aXRlcyBkaXNjdXNzaW9uLiBQb3ZlcnR5IGlzIG5ldmVyIGRpc2hvbm91cmFibGUgaW4gaXRzZWxmLCBidXQgb25seSB3aGVuIGl0IGlzIGEgbWFyayBvZiBzbG90aCwgaW50ZW1wZXJhbmNlLCBleHRyYXZhZ2FuY2UsIG9yIHRob3VnaHRsZXNzbmVzcy4gV2hlbiwgb24gdGhlIG90aGVyIGhhbmQsIGl0IGlzIHRoZSBoYW5kbWFpZCBvZiBhIHNvYmVyLCBpbmR1c3RyaW91cywgcmlnaHRlb3VzLCBhbmQgYnJhdmUgbWFuLCB3aG8gZGV2b3RlcyBhbGwgaGlzIHBvd2VycyB0byB0aGUgc2VydmljZSBvZiB0aGUgcGVvcGxlLCBpdCBpcyB0aGUgc2lnbiBvZiBhIGxvZnR5IHNwaXJpdCB0aGF0IGhhcmJvdXJzIG5vIG1lYW4gdGhvdWdodHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGltcG9zc2libGUgZm9yIGEgbWFuIHRvIGRvIGdyZWF0IHRoaW5ncyB3aGVuIGhpcyB0aG91Z2h0cyBhcmUgYnVzeSB3aXRoIGxpdHRsZSB0aGluZ3M7IG5vciBjYW4gaGUgYWlkIHRoZSBtYW55IHdobyBhcmUgaW4gbmVlZCB3aGVuIGhlIGhpbXNlbGYgaXMgaW4gbmVlZCBvZiBtYW55IHRoaW5ncy4gQSBncmVhdCBlcXVpcG1lbnQgZm9yIHB1YmxpYyBzZXJ2aWNlIGNvbnNpc3RzLCBub3QgaW4gd2VhbHRoLCBidXQgaW4gY29udGVudGVkIGluZGVwZW5kZW5jZSwgd2hpY2ggcmVxdWlyZXMgbm8gcHJpdmF0ZSBzdXBlcmZsdWl0aWVzLCBhbmQgc28gcHV0cyBubyBoaW5kcmFuY2UgaW4gdGhlIHdheSBvZiBzZXJ2aW5nIHRoZSBjb21tb253ZWFsdGguIEdvZCBhbG9uZSBpcyBhYnNvbHV0ZWx5IGZyZWUgZnJvbSB3YW50czsgYnV0IHRoYXQgaXMgdGhlIG1vc3QgcGVyZmVjdCBhbmQgZ29kLWxpa2UgcXVhbGl0eSBpbiBodW1hbiBleGNlbGxlbmNlIHdoaWNoIHJlZHVjZXMgbWFuJ3Mgd2FudHMgdG8gdGhlaXIgbG93ZXN0IHRlcm1zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXMgYSBib2R5IHdoaWNoIGlzIHdlbGwgdGVtcGVyZWQgYW5kIHZpZ29yb3VzIG5lZWRzIG5vIHN1cGVyZmx1b3VzIGZvb2Qgb3IgcmFpbWVudCwgc28gYSBoZWFsdGh5IGluZGl2aWR1YWwgb3IgZmFtaWx5IGxpZmUgY2FuIGJlIGNvbmR1Y3RlZCB3aXRoIHRoZSBzaW1wbGVzdCBvdXRsYXlzLiBBIG1hbiBzaG91bGQgbWFrZSBoaXMgZ2FpbnMgdGFsbHkgd2l0aCBoaXMgbmVlZHMuIEhlIHdobyBoZWFwcyB1cCBtdWNoIHN1YnN0YW5jZSBhbmQgdXNlcyBsaXR0bGUgb2YgaXQsIGlzIG5vdCBjb250ZW50ZWQgYW5kIGluZGVwZW5kZW50LiBJZiBoZSBkb2VzIG5vdCBuZWVkIGl0LCBoZSBpcyBhIGZvb2wgZm9yIHByb3ZpZGluZyB3aGF0IGhlIGRvZXMgbm90IGNyYXZlOyBhbmQgaWYgaGUgY3JhdmVzIGl0LCBoZSBtYWtlcyBoaW1zZWxmIHdyZXRjaGVkIGJ5IHBhcnNpbW9uaW91c2x5IGN1cnRhaWxpbmcgaGlzIGVuam95bWVudCBvZiBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Qb3NzaWJseSB0aGlzIHBvaW50IGludml0ZXMgZGlzY3Vzc2lvbi4gUG92ZXJ0eSBpcyBuZXZlciBkaXNob25vdXJhYmxlIGluIGl0c2VsZiwgYnV0IG9ubHkgd2hlbiBpdCBpcyBhIG1hcmsgb2Ygc2xvdGgsIGludGVtcGVyYW5jZSwgZXh0cmF2YWdhbmNlLCBvciB0aG91Z2h0bGVzc25lc3MuIFdoZW4sIG9uIHRoZSBvdGhlciBoYW5kLCBpdCBpcyB0aGUgaGFuZG1haWQgb2YgYSBzb2JlciwgaW5kdXN0cmlvdXMsIHJpZ2h0ZW91cywgYW5kIGJyYXZlIG1hbiwgd2hvIGRldm90ZXMgYWxsIGhpcyBwb3dlcnMgdG8gdGhlIHNlcnZpY2Ugb2YgdGhlIHBlb3BsZSwgaXQgaXMgdGhlIHNpZ24gb2YgYSBsb2Z0eSBzcGlyaXQgdGhhdCBoYXJib3VycyBubyBtZWFuIHRob3VnaHRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGltcG9zc2libGUgZm9yIGEgbWFuIHRvIGRvIGdyZWF0IHRoaW5ncyB3aGVuIGhpcyB0aG91Z2h0cyBhcmUgYnVzeSB3aXRoIGxpdHRsZSB0aGluZ3M7IG5vciBjYW4gaGUgYWlkIHRoZSBtYW55IHdobyBhcmUgaW4gbmVlZCB3aGVuIGhlIGhpbXNlbGYgaXMgaW4gbmVlZCBvZiBtYW55IHRoaW5ncy4gQSBncmVhdCBlcXVpcG1lbnQgZm9yIHB1YmxpYyBzZXJ2aWNlIGNvbnNpc3RzLCBub3QgaW4gd2VhbHRoLCBidXQgaW4gY29udGVudGVkIGluZGVwZW5kZW5jZSwgd2hpY2ggcmVxdWlyZXMgbm8gcHJpdmF0ZSBzdXBlcmZsdWl0aWVzLCBhbmQgc28gcHV0cyBubyBoaW5kcmFuY2UgaW4gdGhlIHdheSBvZiBzZXJ2aW5nIHRoZSBjb21tb253ZWFsdGguIEdvZCBhbG9uZSBpcyBhYnNvbHV0ZWx5IGZyZWUgZnJvbSB3YW50czsgYnV0IHRoYXQgaXMgdGhlIG1vc3QgcGVyZmVjdCBhbmQgZ29kLWxpa2UgcXVhbGl0eSBpbiBodW1hbiBleGNlbGxlbmNlIHdoaWNoIHJlZHVjZXMgbWFuJ3Mgd2FudHMgdG8gdGhlaXIgbG93ZXN0IHRlcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyBhIGJvZHkgd2hpY2ggaXMgd2VsbCB0ZW1wZXJlZCBhbmQgdmlnb3JvdXMgbmVlZHMgbm8gc3VwZXJmbHVvdXMgZm9vZCBvciByYWltZW50LCBzbyBhIGhlYWx0aHkgaW5kaXZpZHVhbCBvciBmYW1pbHkgbGlmZSBjYW4gYmUgY29uZHVjdGVkIHdpdGggdGhlIHNpbXBsZXN0IG91dGxheXMuIEEgbWFuIHNob3VsZCBtYWtlIGhpcyBnYWlucyB0YWxseSB3aXRoIGhpcyBuZWVkcy4gSGUgd2hvIGhlYXBzIHVwIG11Y2ggc3Vic3RhbmNlIGFuZCB1c2VzIGxpdHRsZSBvZiBpdCwgaXMgbm90IGNvbnRlbnRlZCBhbmQgaW5kZXBlbmRlbnQuIElmIGhlIGRvZXMgbm90IG5lZWQgaXQsIGhlIGlzIGEgZm9vbCBmb3IgcHJvdmlkaW5nIHdoYXQgaGUgZG9lcyBub3QgY3JhdmU7IGFuZCBpZiBoZSBjcmF2ZXMgaXQsIGhlIG1ha2VzIGhpbXNlbGYgd3JldGNoZWQgYnkgcGFyc2ltb25pb3VzbHkgY3VydGFpbGluZyBoaXMgZW5qb3ltZW50IG9mIGl0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluZGVlZCwgSSB3b3VsZCBmYWluIGFzayBDYXRvIGhpbXNlbGYgdGhpcyBxdWVzdGlvbjogCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgd2VhbHRoIGlzIGEgdGhpbmcgdG8gYmUgZW5qb3llZCwgd2h5IGRvIHlvdSBwbHVtZSB5b3Vyc2VsZiBvbiBiZWluZyBzYXRpc2ZpZWQgd2l0aCBsaXR0bGUgd2hlbiBwb3NzZXNzZWQgb2YgbXVjaD88L3E+IEJ1dCBpZiBpdCBiZSBhIGZpbmUgdGhpbmcsIGFzIGluZGVlZCBpdCBpcywgdG8gZWF0IG9yZGluYXJ5IGJyZWFkLCBhbmQgdG8gZHJpbmsgc3VjaCB3aW5lIGFzIGxhYm91cmVycyBhbmQgc2VydmFudHMgZHJpbmssIGFuZCBub3QgdG8gd2FudCBwdXJwbGUgcm9iZXMgbm9yIGV2ZW4gcGxhc3RlcmVkIGhvdXNlcywgdGhlbiBBcmlzdGlkZXMgYW5kIEVwYW1pbm9uZGFzIGFuZCBNYW5pdXMgQ3VyaXVzIGFuZCBHYWl1cyBGYWJyaWNpdXMgd2VyZSBwZXJmZWN0bHkgcmlnaHQgaW4gdHVybmluZyB0aGVpciBiYWNrcyBvbiB0aGUgZ2FpbmluZyBvZiB3aGF0IHRoZXkgc2Nvcm5lZCB0byB1c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSBpdCB3YXMgbm90IHdvcnRoIHdoaWxlIGZvciBhIG1hbiB3aG8sIGxpa2UgQ2F0bywgZXN0ZWVtZWQgdHVybmlwcyBhIGRlbGVjdGFibGUgZGlzaCBhbmQgY29va2VkIHRoZW0gaGltc2VsZiwgd2hpbGUgaGlzIHdpZmUgd2FzIGtuZWFkaW5nIGJyZWFkLCB0byBiYWJibGUgc28gbXVjaCBhYm91dCBhIHBhbHRyeSBjb3BwZXIsIGFuZCB3cml0ZSBvbiB0aGUgb2NjdXBhdGlvbiBpbiB3aGljaCBvbmUgbWlnaHQgc29vbmVzdCBnZXQgcmljaC4gR3JlYXQgaXMgdGhlIHNpbXBsZSBsaWZlLCBhbmQgZ3JlYXQgaXRzIGluZGVwZW5kZW5jZSwgYnV0IG9ubHkgYmVjYXVzZSBpdCBmcmVlcyBhIG1hbiBmcm9tIHRoZSBhbnhpb3VzIGRlc2lyZSBvZiBzdXBlcmZsdW91cyB0aGluZ3MuIEhlbmNlIGl0IHdhcyB0aGF0IEFyaXN0aWRlcywgYXMgd2UgYXJlIHRvbGQsIHJlbWFya2VkIGF0IHRoZSB0cmlhbCBvZiBDYWxsaWFzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmlzdC4gMjUuIDUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QXJpc3RpZGVzPC90aXRsZT4sIHh4di4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBvbmx5IHRob3NlIHdobyB3ZXJlIHBvb3IgaW4gc3BpdGUgb2YgdGhlbXNlbHZlcyBzaG91bGQgYmUgYXNoYW1lZCBvZiB0aGVpciBwb3ZlcnR5OyB0aG9zZSB3aG8sIGxpa2UgaGltc2VsZiwgY2hvc2UgcG92ZXJ0eSwgc2hvdWxkIGdsb3J5IGluIGl0LiBBbmQgc3VyZWx5IGl0IHdlcmUgcmlkaWN1bG91cyB0byBzdXBwb3NlIHRoYXQgdGhlIHBvdmVydHkgb2YgQXJpc3RpZGVzIHdhcyBkdWUgdG8gaGlzIHNsb3RoLCB3aGVuLCB3aXRob3V0IGRvaW5nIGFueXRoaW5nIGRpc2dyYWNlZnVsLCBidXQgbWVyZWx5IGJ5IHN0cmlwcGluZyBhIHNpbmdsZSBCYXJiYXJpYW4sIG9yIHNlaXppbmcgYSBzaW5nbGUgdGVudCwgaGUgbWlnaHQgaGF2ZSBtYWRlIGhpbXNlbGYgcmljaC4gU28gbXVjaCBvbiB0aGlzIGhlYWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHdlYWx0aCBpcyBhIHRoaW5nIHRvIGJlIGVuam95ZWQsIHdoeSBkbyB5b3UgcGx1bWUgeW91cnNlbGYgb24gYmVpbmcgc2F0aXNmaWVkIHdpdGggbGl0dGxlIHdoZW4gcG9zc2Vzc2VkIG9mIG11Y2g/PC9xPiBCdXQgaWYgaXQgYmUgYSBmaW5lIHRoaW5nLCBhcyBpbmRlZWQgaXQgaXMsIHRvIGVhdCBvcmRpbmFyeSBicmVhZCwgYW5kIHRvIGRyaW5rIHN1Y2ggd2luZSBhcyBsYWJvdXJlcnMgYW5kIHNlcnZhbnRzIGRyaW5rLCBhbmQgbm90IHRvIHdhbnQgcHVycGxlIHJvYmVzIG5vciBldmVuIHBsYXN0ZXJlZCBob3VzZXMsIHRoZW4gQXJpc3RpZGVzIGFuZCBFcGFtaW5vbmRhcyBhbmQgTWFuaXVzIEN1cml1cyBhbmQgR2FpdXMgRmFicmljaXVzIHdlcmUgcGVyZmVjdGx5IHJpZ2h0IGluIHR1cm5pbmcgdGhlaXIgYmFja3Mgb24gdGhlIGdhaW5pbmcgb2Ygd2hhdCB0aGV5IHNjb3JuZWQgdG8gdXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSBpdCB3YXMgbm90IHdvcnRoIHdoaWxlIGZvciBhIG1hbiB3aG8sIGxpa2UgQ2F0bywgZXN0ZWVtZWQgdHVybmlwcyBhIGRlbGVjdGFibGUgZGlzaCBhbmQgY29va2VkIHRoZW0gaGltc2VsZiwgd2hpbGUgaGlzIHdpZmUgd2FzIGtuZWFkaW5nIGJyZWFkLCB0byBiYWJibGUgc28gbXVjaCBhYm91dCBhIHBhbHRyeSBjb3BwZXIsIGFuZCB3cml0ZSBvbiB0aGUgb2NjdXBhdGlvbiBpbiB3aGljaCBvbmUgbWlnaHQgc29vbmVzdCBnZXQgcmljaC4gR3JlYXQgaXMgdGhlIHNpbXBsZSBsaWZlLCBhbmQgZ3JlYXQgaXRzIGluZGVwZW5kZW5jZSwgYnV0IG9ubHkgYmVjYXVzZSBpdCBmcmVlcyBhIG1hbiBmcm9tIHRoZSBhbnhpb3VzIGRlc2lyZSBvZiBzdXBlcmZsdW91cyB0aGluZ3MuIEhlbmNlIGl0IHdhcyB0aGF0IEFyaXN0aWRlcywgYXMgd2UgYXJlIHRvbGQsIHJlbWFya2VkIGF0IHRoZSB0cmlhbCBvZiBDYWxsaWFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJpc3QuIDI1LiA1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpc3RpZGVzPC90aXRsZT4sIHh4di4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBvbmx5IHRob3NlIHdobyB3ZXJlIHBvb3IgaW4gc3BpdGUgb2YgdGhlbXNlbHZlcyBzaG91bGQgYmUgYXNoYW1lZCBvZiB0aGVpciBwb3ZlcnR5OyB0aG9zZSB3aG8sIGxpa2UgaGltc2VsZiwgY2hvc2UgcG92ZXJ0eSwgc2hvdWxkIGdsb3J5IGluIGl0LiBBbmQgc3VyZWx5IGl0IHdlcmUgcmlkaWN1bG91cyB0byBzdXBwb3NlIHRoYXQgdGhlIHBvdmVydHkgb2YgQXJpc3RpZGVzIHdhcyBkdWUgdG8gaGlzIHNsb3RoLCB3aGVuLCB3aXRob3V0IGRvaW5nIGFueXRoaW5nIGRpc2dyYWNlZnVsLCBidXQgbWVyZWx5IGJ5IHN0cmlwcGluZyBhIHNpbmdsZSBCYXJiYXJpYW4sIG9yIHNlaXppbmcgYSBzaW5nbGUgdGVudCwgaGUgbWlnaHQgaGF2ZSBtYWRlIGhpbXNlbGYgcmljaC4gU28gbXVjaCBvbiB0aGlzIGhlYWQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyaXN0LiAyNS4gNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaXN0aWRlczwvdGl0bGU+LCB4eHYuIDUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmlzdGlkZXM8L3RpdGxlPiwgeHh2LiA1LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG1pbGl0YXJ5IGNhbXBhaWducyBvZiBDYXRvIG1hZGUgbm8gZ3JlYXQgYWRkaXRpb24gdG8gdGhlIFJvbWFuIGVtcGlyZSwgd2hpY2ggd2FzIGdyZWF0IGFscmVhZHk7IGJ1dCB0aG9zZSBvZiBBcmlzdGlkZXMgaW5jbHVkZSB0aGUgZmFpcmVzdCwgbW9zdCBicmlsbGlhbnQsIGFuZCBtb3N0IGltcG9ydGFudCBhY3Rpb25zIG9mIHRoZSBHcmVla3MsIG5hbWVseSwgTWFyYXRob24sIFNhbGFtaXMsIGFuZCBQbGF0YWVhLiBBbmQgY2VydGFpbmx5IEFudGlvY2h1cyBpcyBub3Qgd29ydGh5IHRvIGJlIGNvbXBhcmVkIHdpdGggWGVyeGVzLCBub3IgdGhlIGRlbW9saXRpb24gb2YgdGhlIHdhbGxzIG9mIHRoZSBTcGFuaXNoIGNpdGllcyB3aXRoIHRoZSBkZXN0cnVjdGlvbiBvZiBzbyBtYW55IG15cmlhZHMgb2YgQmFyYmFyaWFucyBib3RoIGJ5IGxhbmQgYW5kIHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlc2Ugb2NjYXNpb25zIEFyaXN0aWRlcyB3YXMgaW5mZXJpb3IgdG8gbm8gb25lIGluIGFjdHVhbCBzZXJ2aWNlLCBidXQgaGUgbGVmdCB0aGUgZ2xvcnkgYW5kIHRoZSBsYXVyZWxzLCBhcyBoZSBkaWQgd2VhbHRoIGFuZCBzdWJzdGFuY2UsIHRvIHRob3NlIHdobyB3YW50ZWQgdGhlbSBtb3JlLCBiZWNhdXNlIGhlIHdhcyBzdXBlcmlvciB0byBhbGwgdGhlc2UgdGhpbmdzIGFsc28uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWlsaXRhcnkgY2FtcGFpZ25zIG9mIENhdG8gbWFkZSBubyBncmVhdCBhZGRpdGlvbiB0byB0aGUgUm9tYW4gZW1waXJlLCB3aGljaCB3YXMgZ3JlYXQgYWxyZWFkeTsgYnV0IHRob3NlIG9mIEFyaXN0aWRlcyBpbmNsdWRlIHRoZSBmYWlyZXN0LCBtb3N0IGJyaWxsaWFudCwgYW5kIG1vc3QgaW1wb3J0YW50IGFjdGlvbnMgb2YgdGhlIEdyZWVrcywgbmFtZWx5LCBNYXJhdGhvbiwgU2FsYW1pcywgYW5kIFBsYXRhZWEuIEFuZCBjZXJ0YWlubHkgQW50aW9jaHVzIGlzIG5vdCB3b3J0aHkgdG8gYmUgY29tcGFyZWQgd2l0aCBYZXJ4ZXMsIG5vciB0aGUgZGVtb2xpdGlvbiBvZiB0aGUgd2FsbHMgb2YgdGhlIFNwYW5pc2ggY2l0aWVzIHdpdGggdGhlIGRlc3RydWN0aW9uIG9mIHNvIG1hbnkgbXlyaWFkcyBvZiBCYXJiYXJpYW5zIGJvdGggYnkgbGFuZCBhbmQgc2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZXNlIG9jY2FzaW9ucyBBcmlzdGlkZXMgd2FzIGluZmVyaW9yIHRvIG5vIG9uZSBpbiBhY3R1YWwgc2VydmljZSwgYnV0IGhlIGxlZnQgdGhlIGdsb3J5IGFuZCB0aGUgbGF1cmVscywgYXMgaGUgZGlkIHdlYWx0aCBhbmQgc3Vic3RhbmNlLCB0byB0aG9zZSB3aG8gd2FudGVkIHRoZW0gbW9yZSwgYmVjYXVzZSBoZSB3YXMgc3VwZXJpb3IgdG8gYWxsIHRoZXNlIHRoaW5ncyBhbHNvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciBteSBvd24gcGFydCwgSSBkbyBub3QgYmxhbWUgQ2F0byBmb3IgaGlzIGNvbnN0YW50IGJvYXN0aW5nLCBhbmQgZm9yIHJhdGluZyBoaW1zZWxmIGFib3ZlIGV2ZXJ5Ym9keSBlbHNlLCBhbHRob3VnaCBoZSBkb2VzIHNheSwgaW4gb25lIG9mIGhpcyBzcGVlY2hlcywgdGhhdCBzZWxmLXByYWlzZSBhbmQgc2VsZi1kZXByZWNpYXRpb24gYXJlIGFsaWtlIGFic3VyZC4gQnV0IEkgcmVnYXJkIHRoZSBtYW4gd2hvIGlzIG9mdGVuIGxhdWRpbmcgaGltc2VsZiBhcyBsZXNzIGNvbXBsZXRlIGluIGV4Y2VsbGVuY2UgdGhhbiBvbmUgd2hvIGRvZXMgbm90IGV2ZW4gd2FudCBvdGhlcnMgdG8gZG8gc28uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RnJlZWRvbSBmcm9tIGFtYml0aW9uIGlzIG5vIHNsaWdodCByZXF1aXNpdGUgZm9yIHRoZSBnZW50bGVuZXNzIHdoaWNoIHNob3VsZCBtYXJrIGEgc3RhdGVzbWFuOyBhbmQsIG9uIHRoZSBjb250cmFyeSwgYW1iaXRpb24gaXMgaGFyc2gsIGFuZCB0aGUgZ3JlYXRlc3QgZm9tZW50ZXIgb2YgZW52eS4gRnJvbSB0aGlzIHNwaXJpdCBBcmlzdGlkZXMgd2FzIHdob2xseSBmcmVlLCB3aGVyZWFzIENhdG8gd2FzIHZlcnkgZnVsbCBvZiBpdC4gRm9yIGV4YW1wbGUsIEFyaXN0aWRlcyBjby1vcGVyYXRlZCB3aXRoIFRoZW1pc3RvY2xlcyBpbiBoaXMgZ3JlYXRlc3QgYWNoaWV2ZW1lbnRzLCBhbmQgYXMgb25lIG1pZ2h0IHNheSwgc3Rvb2QgZ3VhcmQgb3ZlciBoaW0gd2hpbGUgaGUgd2FzIGluIGNvbW1hbmQsIGFuZCB0aGVyZWJ5IHNhdmVkIEF0aGVuczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgQ2F0bywgYnkgaGlzIG9wcG9zaXRpb24gdG8gU2NpcGlvLCBhbG1vc3Qgdml0aWF0ZWQgYW5kIHJ1aW5lZCB0aGF0IHdvbmRlcmZ1bCBjYW1wYWlnbiBvZiBoaXMgYWdhaW5zdCB0aGUgQ2FydGhhZ2luaWFucywgaW4gd2hpY2ggaGUgb3ZlcnRocmV3IHRoZSBpbnZpbmNpYmxlIEhhbm5pYmFsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IFphbWEsIDIwMiBCLkMuPC9ub3RlPiBhbmQgZmluYWxseSwgYnkgcGVycGV0dWFsbHkgaW52ZW50aW5nIGFsbCBzb3J0cyBvZiBzdXNwaWNpb25zIGFuZCBjYWx1bW5pZXMgYWdhaW5zdCBoaW0sIGRyb3ZlIGhpbSBvdXQgb2YgUm9tZSwgYW5kIGJyb3VnaHQgZG93biBvbiBoaXMgYnJvdGhlcidzIGhlYWQgYSBtb3N0IHNoYW1lZnVsIGNvbmRlbW5hdGlvbiBmb3IgZW1iZXp6bGVtZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZyZWVkb20gZnJvbSBhbWJpdGlvbiBpcyBubyBzbGlnaHQgcmVxdWlzaXRlIGZvciB0aGUgZ2VudGxlbmVzcyB3aGljaCBzaG91bGQgbWFyayBhIHN0YXRlc21hbjsgYW5kLCBvbiB0aGUgY29udHJhcnksIGFtYml0aW9uIGlzIGhhcnNoLCBhbmQgdGhlIGdyZWF0ZXN0IGZvbWVudGVyIG9mIGVudnkuIEZyb20gdGhpcyBzcGlyaXQgQXJpc3RpZGVzIHdhcyB3aG9sbHkgZnJlZSwgd2hlcmVhcyBDYXRvIHdhcyB2ZXJ5IGZ1bGwgb2YgaXQuIEZvciBleGFtcGxlLCBBcmlzdGlkZXMgY28tb3BlcmF0ZWQgd2l0aCBUaGVtaXN0b2NsZXMgaW4gaGlzIGdyZWF0ZXN0IGFjaGlldmVtZW50cywgYW5kIGFzIG9uZSBtaWdodCBzYXksIHN0b29kIGd1YXJkIG92ZXIgaGltIHdoaWxlIGhlIHdhcyBpbiBjb21tYW5kLCBhbmQgdGhlcmVieSBzYXZlZCBBdGhlbnM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIENhdG8sIGJ5IGhpcyBvcHBvc2l0aW9uIHRvIFNjaXBpbywgYWxtb3N0IHZpdGlhdGVkIGFuZCBydWluZWQgdGhhdCB3b25kZXJmdWwgY2FtcGFpZ24gb2YgaGlzIGFnYWluc3QgdGhlIENhcnRoYWdpbmlhbnMsIGluIHdoaWNoIGhlIG92ZXJ0aHJldyB0aGUgaW52aW5jaWJsZSBIYW5uaWJhbCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IFphbWEsIDIwMiBCLkMuPC9ub3RlPiBhbmQgZmluYWxseSwgYnkgcGVycGV0dWFsbHkgaW52ZW50aW5nIGFsbCBzb3J0cyBvZiBzdXNwaWNpb25zIGFuZCBjYWx1bW5pZXMgYWdhaW5zdCBoaW0sIGRyb3ZlIGhpbSBvdXQgb2YgUm9tZSwgYW5kIGJyb3VnaHQgZG93biBvbiBoaXMgYnJvdGhlcidzIGhlYWQgYSBtb3N0IHNoYW1lZnVsIGNvbmRlbW5hdGlvbiBmb3IgZW1iZXp6bGVtZW50LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgbW9yZSwgdGhhdCB0ZW1wZXJhbmNlIHdoaWNoIENhdG8gYWx3YXlzIGRlY2tlZCBvdXQgd2l0aCB0aGUgZmFpcmVzdCBwcmFpc2VzLCBBcmlzdGlkZXMgbWFpbnRhaW5lZCBhbmQgcHJhY3Rpc2VkIGluIHVuc3VsbGllZCBwdXJpdHkgd2hlcmVhcyBDYXRvLCBieSBtYXJyeWluZyB1bndvcnRoaWx5IGFuZCB1bnNlYXNvbmFibHksIGZlbGwgdW5kZXIgbm8gc2xpZ2h0IG9yIGluc2lnbmlmaWNhbnQgY2Vuc3VyZSBpbiB0aGlzIHJlZ2FyZC4gSXQgd2FzIHN1cmVseSBxdWl0ZSBpbmRlY2VudCB0aGF0IGEgbWFuIG9mIGhpcyB5ZWFycyBzaG91bGQgYnJpbmcgaG9tZSBhcyBzdGVwbW90aGVyIHRvIGhpcyBncm93bi11cCBzb24gYW5kIHRoYXQgc29uJ3MgYnJpZGUsIGEgZ2lybCB3aG9zZSBmYXRoZXIgd2FzIGhpcyBhc3Npc3RhbnQgYW5kIHNlcnZlZCB0aGUgcHVibGljIGZvciBoaXJlLiBXaGV0aGVyIGhlIGRpZCB0aGlzIG1lcmVseSBmb3IgaGlzIG93biBwbGVhc3VyZSwgb3IgaW4gYW5nZXIsIHRvIHB1bmlzaCBoaXMgc29uIGZveCBvYmplY3RpbmcgdG8gaGlzIG1pc3RyZXNzLCBib3RoIHdoYXQgaGUgZGlkIGFuZCB3aGF0IGxlZCBoaW0gdG8gZG8gaXQgd2VyZSBkaXNncmFjZWZ1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBzYXJjYXN0aWMgcmVhc29uIGZvciBpdCB3aGljaCBoZSBnYXZlIGhpcyBzb24gd2FzIG5vdCBhIHRydWUgb25lLiBGb3IgaGFkIGhlIHdpc2hlZCB0byBiZWdldCBtb3JlIHNvbnMgYXMgZ29vZCwgaGUgc2hvdWxkIGhhdmUgcGxhbm5lZCBhdCB0aGUgb3V0c2V0IHRvIG1hcnJ5IGEgd29tYW4gb2YgZmFtaWx5LCBpbnN0ZWFkIG9mIGNvbnRlbnRpbmcgaGltc2VsZiwgYXMgbG9uZyBhcyBoZSBjb3VsZCBkbyBzbyBzZWNyZXRseSwgd2l0aCB0aGUgc29jaWV0eSBvZiBhIGxvdyBjb25jdWJpbmUsIGFuZCB3aGVuIGhlIHdhcyBkaXNjb3ZlcmVkLCBtYWtpbmcgYSBtYW4gaGlzIGZhdGhlci1pbi1sYXcgd2hvbSBoZSBjb3VsZCBtb3N0IGVhc2lseSBwZXJzdWFkZSwgcmF0aGVyIHRoYW4gb25lIHdob3NlIGFsbGlhbmNlIHdvdWxkIGJyaW5nIGhpbSBtb3N0IGhvbm91ci4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIG1vcmUsIHRoYXQgdGVtcGVyYW5jZSB3aGljaCBDYXRvIGFsd2F5cyBkZWNrZWQgb3V0IHdpdGggdGhlIGZhaXJlc3QgcHJhaXNlcywgQXJpc3RpZGVzIG1haW50YWluZWQgYW5kIHByYWN0aXNlZCBpbiB1bnN1bGxpZWQgcHVyaXR5IHdoZXJlYXMgQ2F0bywgYnkgbWFycnlpbmcgdW53b3J0aGlseSBhbmQgdW5zZWFzb25hYmx5LCBmZWxsIHVuZGVyIG5vIHNsaWdodCBvciBpbnNpZ25pZmljYW50IGNlbnN1cmUgaW4gdGhpcyByZWdhcmQuIEl0IHdhcyBzdXJlbHkgcXVpdGUgaW5kZWNlbnQgdGhhdCBhIG1hbiBvZiBoaXMgeWVhcnMgc2hvdWxkIGJyaW5nIGhvbWUgYXMgc3RlcG1vdGhlciB0byBoaXMgZ3Jvd24tdXAgc29uIGFuZCB0aGF0IHNvbidzIGJyaWRlLCBhIGdpcmwgd2hvc2UgZmF0aGVyIHdhcyBoaXMgYXNzaXN0YW50IGFuZCBzZXJ2ZWQgdGhlIHB1YmxpYyBmb3IgaGlyZS4gV2hldGhlciBoZSBkaWQgdGhpcyBtZXJlbHkgZm9yIGhpcyBvd24gcGxlYXN1cmUsIG9yIGluIGFuZ2VyLCB0byBwdW5pc2ggaGlzIHNvbiBmb3ggb2JqZWN0aW5nIHRvIGhpcyBtaXN0cmVzcywgYm90aCB3aGF0IGhlIGRpZCBhbmQgd2hhdCBsZWQgaGltIHRvIGRvIGl0IHdlcmUgZGlzZ3JhY2VmdWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
