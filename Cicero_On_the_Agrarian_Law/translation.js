var translation={}
translation['1.fr1'] = ""
translation['1.fr3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJmcjMiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5bVGhlIHdob2xlIG9mIHRoZSBQcm9wb250aXMgYW5kIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+CiAgICAgICB3aWxsIHRoZXJlZm9yZSBjb21lIHVuZGVyIHRoZSBwb3dlciBvZiB0aGUgcHJhZXRvcjsgdGhlIHdob2xlIGNvYXN0IG9mIHRoZSBMeWNpYW5zIGFuZAogICAgICAgQ2lsaWNpYW5zIHdpbGwgYmUgYWR2ZXJ0aXNlZCBmb3Igc2FsZTsgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc0OCI+TXlzaWE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYxMyI+UGhyeWdpYTwvcGxhY2VOYW1lPiB3aWxsIGJlIHN1YmplY3RlZCB0byB0aGUgc2FtZSBjb25kaXRpb25zCiAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlJodW5jayBoYXMgZW5jbG9zZWQgdGhpcyBzZW50ZW5jZSBpbiBicmFja2V0cywgYXMgdGhlIGdsb3NzIGFuZAogICAgICAgIGludGVycG9sYXRpb24gb2YgYW4gaWdub3JhbnQgbWFuOyBidXQgT3JlbGxpdXMgdGhpbmtzIHNvbWUgcGFydCBvZiBpdCByZWFsbHkgQ2ljZXJvJ3MsCiAgICAgICAgdGhvdWdoIG5vdCBmcmVlIGZyb20gY29ycnVwdGlvbnMuPC9ub3RlPl0gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49ImZyNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4KICAgICAgIHdpbGwgdGhlcmVmb3JlIGNvbWUgdW5kZXIgdGhlIHBvd2VyIG9mIHRoZSBwcmFldG9yOyB0aGUgd2hvbGUgY29hc3Qgb2YgdGhlIEx5Y2lhbnMgYW5kCiAgICAgICBDaWxpY2lhbnMgd2lsbCBiZSBhZHZlcnRpc2VkIGZvciBzYWxlOyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc0OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzQ4Ij5NeXNpYTwvcGxhY2VOYW1lPiBhbmQKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYxMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjEzIj5QaHJ5Z2lhPC9wbGFjZU5hbWU+IHdpbGwgYmUgc3ViamVjdGVkIHRvIHRoZSBzYW1lIGNvbmRpdGlvbnMKICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+Umh1bmNrIGhhcyBlbmNsb3NlZCB0aGlzIHNlbnRlbmNlIGluIGJyYWNrZXRzLCBhcyB0aGUgZ2xvc3MgYW5kCiAgICAgICAgaW50ZXJwb2xhdGlvbiBvZiBhbiBpZ25vcmFudCBtYW47IGJ1dCBPcmVsbGl1cyB0aGlua3Mgc29tZSBwYXJ0IG9mIGl0IHJlYWxseSBDaWNlcm8ncywKICAgICAgICB0aG91Z2ggbm90IGZyZWUgZnJvbSBjb3JydXB0aW9ucy48L25vdGU+XSA8L3RyYW5zbGF0aW9uPg=="
translation['1.fr4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJmcjQiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpPC9mb3JlaWduPiB3aWxsIHNlbGwgdGhlIGJvb3R5LCB0aGUgc3BvaWxzLCB0aGUgZGl2aXNpb24gb2YKICAgICAgIHRoZSBwbHVuZGVyLCB0aGUgdmVyeSBjYW1wIG9mIENuYWV1cyBQb21wZWl1cywgd2hpbGUgdGhlIGdlbmVyYWwgaXMgZm9yY2VkIHRvIHNpdCBzdGlsbC4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcmk8L2ZvcmVpZ24+IHdpbGwgc2VsbCB0aGUgYm9vdHksIHRoZSBzcG9pbHMsIHRoZSBkaXZpc2lvbiBvZgogICAgICAgdGhlIHBsdW5kZXIsIHRoZSB2ZXJ5IGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCB3aGlsZSB0aGUgZ2VuZXJhbCBpcyBmb3JjZWQgdG8gc2l0IHN0aWxsLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.fr4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBTZWUsIG5vdywgaW4gdGhlIHNlY29uZCBjaGFwdGVyIG9mIHRoaXMgbGF3LCBob3cKICAgICAgIHRoYXQgcHJvZmxpZ2F0ZSBkZWJhdWNoZWUgaXMgZGlzdHVyYmluZyB0aGUgcmVwdWJsaWMs4oCUaG93IGhlIGlzIHJ1aW5pbmcgYW5kCiAgICAgICBkaXNzaXBhdGluZyB0aGUgcG9zc2Vzc2lvbnMgbGVmdCB1cyBieSBvdXIgYW5jZXN0b3JzOyBzbyBhcyB0byBiZSBub3QgbGVzcyBhIHNwZW5kdGhyaWZ0IGluCiAgICAgICB0aGUgcGF0cmltb255IG9mIHRoZSBSb21hbiBwZW9wbGUgdGhhbiBpbiBoaXMgb3duLiBIZSBpcyBhZHZlcnRpc2luZyBmb3Igc2FsZSBieSBoaXMgbGF3IGFsbAogICAgICAgdGhlIHJldmVudWVzLCBmb3IgdGhlIGRlY2VtdmlycyB0byBzZWxsIHRoZW07IHRoYXQgaXMgdG8gc2F5LCBoZSBpcyBhZHZlcnRpc2luZyBhbiBhdWN0aW9uIG9mCiAgICAgICB0aGUgcHJvcGVydHkgb2YgdGhlIHN0YXRlLiBIZSB3YW50cyBsYW5kcyB0byBiZSBib3VnaHQsIGluIG9yZGVyIHRvIGJlIGRpc3RyaWJ1dGVkOyBoZSBpcwogICAgICAgc2Vla2luZyBtb25leS4gTm8gZG91YnQgaGUgd2lsbCBkZXZpc2Ugc29tZXRoaW5nLCBhbmQgYnJpbmcgaXQgZm9yd2FyZDsgZm9yIGluIHRoZSBwcmVjZWRpbmcKICAgICAgIGNoYXB0ZXJzIHRoZSBkaWduaXR5IG9mIHRoZSBSb21hbiBwZW9wbGUgd2FzIGF0dGFja2VkOyB0aGUgbmFtZSBvZiBvdXIgZG9taW5pb24gd2FzIGhlbGQgdXAKICAgICAgIGFzIGFuIG9iamVjdCBvZiBjb21tb24gaGF0cmVkIHRvIGFsbCB0aGUgbmF0aW9ucyBvZiB0aGUgZWFydGg7IGNpdGllcyB3aGljaCB3ZXJlIGF0IHBlYWNlCiAgICAgICB3aXRoIHVzLCBsYW5kcyBiZWxvbmdpbmcgdG8gdGhlIGFsbGllcywgdGhlIHJhbmtzIG9mIGtpbmdzIGluIGFsbGlhbmNlIHdpdGggdXMsIHdlcmUgYWxsIG1hZGUKICAgICAgIGEgcHJlc2VudCBvZiB0byB0aGUgZGVjZW12aXJzOyBhbmQgbm93IHRoZXkgd2FudCBhY3R1YWwgcmVhZHkgbW9uZXkgcGFpZCBkb3duIHRvIHRoZW0uCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIHdhaXRpbmcgdG8gc2VlIHdoYXQgdGhpcyB2aWdpbGFudCBhbmQgY2xldmVyIHRyaWJ1bmUKICAgICAgIGlzIGNvbnRyaXZpbmcuIExldCB0aGUgU2NhbnRpYW4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTY2FudGlhbiB3b29kIHdhcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPi48L25vdGU+IHdvb2QsIHNheXMgaGUsIGJlIHNvbGQuIERpZCB5b3UgdGhlbiBmaW5kCiAgICAgICB0aGlzIHdvb2QgbWVudGlvbmVkIGFtb25nIHRoZSBwb3NzZXNzaW9ucyB0aGF0IHdlcmUgbGVmdCwgb3IgaW4gdGhlIHBhc3R1cmUgbGFuZHMgb2YgdGhlCiAgICAgICBsZXNzb3JzPyBJZiB0aGVyZSBpcyBhbnl0aGluZyB3aGljaCB5b3UgaGF2ZSBodW50ZWQgb3V0LCBhbmQgZGlzY292ZXJlZCwgYnJvdWdodCB0byBsaWdodCBvdXQKICAgICAgIG9mIGRhcmtuZXNzLCBhbHRob3VnaCBpdCBpcyBub3QganVzdCwgc3RpbGwgdXNlIHRoYXQsIHNpbmNlIGl0IGlzIGNvbnZlbmllbnQsIGFuZCBzaW5jZSB5b3UKICAgICAgIHlvdXJzZWxmIHdlcmUgdGhlIHBlcnNvbiB0byBicmluZyBpdCBmb3J3YXJkLiBCdXQgc2hhbGwgeW91IHNlbGwgdGhlIFNjYW50aWFuIHdvb2Qgd2hpbGUgd2UKICAgICAgIGFyZSBjb25zdWxzLCBhbmQgd2hpbGUgdGhpcyBzZW5hdGUgaXMgaW4gZXhpc3RlbmNlPyBTaGFsbCB5b3UgdG91Y2ggYW55IG9mIHRoZSByZXZlbnVlcz8KICAgICAgIFNoYWxsIHlvdSB0YWtlIGF3YXkgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIHRoYXQgd2hpY2ggaXMgdGhlaXIgc3RyZW5ndGggaW4gdGltZSBvZiB3YXIsIHRoZWlyCiAgICAgICBvcm5hbWVudCBpbiB0aW1lIG9mIHBlYWNlPyBCdXQgdGhlbiBpbmRlZWQsIEkgc2hhbGwgdGhpbmsgbXlzZWxmIGEgbGF6aWVyIGNvbnN1bCB0aGFuIHRob3NlCiAgICAgICBmZWFybGVzcyBtZW4gd2hvIGZpbGxlZCB0aGlzIG9mZmljZSBpbiB0aGUgdGltZXMgb2Ygb3VyIGFuY2VzdG9yczsgYmVjYXVzZSB0aGUgcmV2ZW51ZXMgd2hpY2gKICAgICAgIHdlcmUgYWNxdWlyZWQgYnkgdGhlIFJvbWFuIHBlb3BsZSB3aGVuIHRoZXkgd2VyZSBjb25zdWxzLCB3aWxsIGJlIGNvbnNpZGVyZWQgbm90IGFibGUgdG8gYmUKICAgICAgIHByZXNlcnZlZCB3aGVuIEkgYW0gY29uc3VsLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['1.3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaXMgc2VsbGluZyBhbGwgdGhlIHBvc3Nlc3Npb25zIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBpbgogICAgICAgcmVndWxhciBvcmRlci4gRm9yc29vdGgsIGhlIGlzIHZlcnkgYnVzeSBpbiB0aGF0IG9jY3VwYXRpb24uIEZvciBkb2VzIG5vdCBvbWl0IG9uZS4gSGUgZ29lcwogICAgICAgdGhyb3VnaCB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+IGluIHRoZSBhY2NvdW50LWJvb2tzIG9mCiAgICAgICB0aGUgY2Vuc29ycy4gSGUgZG9lcyBub3Qgb21pdCBvbmUgc2luZ2xlIGhvdXNlLCBvciBvbmUgc2luZ2xlIGZpZWxkLiBZb3UgaGF2ZSBoZWFyZCBhbgogICAgICAgYXVjdGlvbiBvZiB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBnaXZlbiBub3RpY2Ugb2YgYnkgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhbmQKICAgICAgIGZpeGVkIGZvciB0aGUgbW9udGggb2YgSmFudWFyeSBhbmQgSSBzdXBwb3NlIHlvdSBkbyBub3QgZG91YnQsIHRoYXQgdGhleSB3aG8gcHJvY3VyZWQgdGhlc2UKICAgICAgIHRoaW5ncyBieSB0aGVpciBhcm1zIGFuZCB0aGVpciB2YWxvdXIsIGRpZCBub3Qgc2VsbCB0aGUgZm9yIHRoZSBzYWtlIG9mIHRoZSB0cmVhc3VyeSwgb24KICAgICAgIHB1cnBvc2UgdGhhdCB3ZSBtaWdodCBoYXZlIHNvbWV0aGluZyB0byBzZWxsIGZvciB0aGUgc2FrZSBvZiBicmliZXJ5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4KICAgICAgIHJlZ3VsYXIgb3JkZXIuIEZvcnNvb3RoLCBoZSBpcyB2ZXJ5IGJ1c3kgaW4gdGhhdCBvY2N1cGF0aW9uLiBGb3IgZG9lcyBub3Qgb21pdCBvbmUuIEhlIGdvZXMKICAgICAgIHRocm91Z2ggdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpbiB0aGUgYWNjb3VudC1ib29rcyBvZgogICAgICAgdGhlIGNlbnNvcnMuIEhlIGRvZXMgbm90IG9taXQgb25lIHNpbmdsZSBob3VzZSwgb3Igb25lIHNpbmdsZSBmaWVsZC4gWW91IGhhdmUgaGVhcmQgYW4KICAgICAgIGF1Y3Rpb24gb2YgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgZ2l2ZW4gbm90aWNlIG9mIGJ5IHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYW5kCiAgICAgICBmaXhlZCBmb3IgdGhlIG1vbnRoIG9mIEphbnVhcnkgYW5kIEkgc3VwcG9zZSB5b3UgZG8gbm90IGRvdWJ0LCB0aGF0IHRoZXkgd2hvIHByb2N1cmVkIHRoZXNlCiAgICAgICB0aGluZ3MgYnkgdGhlaXIgYXJtcyBhbmQgdGhlaXIgdmFsb3VyLCBkaWQgbm90IHNlbGwgdGhlIGZvciB0aGUgc2FrZSBvZiB0aGUgdHJlYXN1cnksIG9uCiAgICAgICBwdXJwb3NlIHRoYXQgd2UgbWlnaHQgaGF2ZSBzb21ldGhpbmcgdG8gc2VsbCBmb3IgdGhlIHNha2Ugb2YgYnJpYmVyeS4gPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNlZSwgbm93LCBob3cgbXVjaCBtb3JlIHVuZGlzZ3Vpc2VkbHkgdGhhbiBiZWZvcmUgaGUgcHJvY2VlZHMgb24gaGlzIGNvdXJzZS4gRm9yIGl0IGhhcwogICAgICAgYmVlbiBhbHJlYWR5IHNob3duIGJ5IGhvdyB0aGV5IGF0dGFja2VkIFBvbXBlaXVzIGluIHRoZSBlYXJsaWVyIHBhcnQgb2YgdGhlIGxhdzsgYW5kIG5vdyB0aGV5CiAgICAgICBzaGFsbCBzaG93IGl0IGFsc28gdGhlbXNlbHZlcy4gSGUgb3JkZXJzIHRoZSBsYW5kcyBiZWxvbmdpbmcgdG8gdGhlIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+CiAgICAgICB0byBiZSBzb2xkLiBUaGVzZSBsYW5kcyB0aGUgdmljdG9yeSBvZiBQdWJsaXVzIFNlcnZpbGl1cywgdGhhdCBtb3N0IGdhbGxhbnQgZ2VuZXJhbCwgaGFkIG1hZGUKICAgICAgIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLiBBZnRlciB0aGF0LCB0aGUgcm95YWwgZG9tYWlucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHdoaWNoIHdlcmUgYWNxdWlyZWQgcGFydGx5IGJ5IHRoZSB2YWxvdXIgb2YgVGl0dXMKICAgICAgIEZsYW1pbmludXMsIGFuZCBwYXJ0IGJ5IHRoYXQgb2YgTHVjaXVzIFBhdWxsdXMsIHdobyBjb25xdWVyZWQgUGVyc2VzLiBBZnRlciB0aGF0LCB0aGF0IG1vc3QKICAgICAgIGV4Y2VsbGVudCBhbmQgcHJvZHVjdGl2ZSBsYW5kIHdoaWNoIGJlbG9uZ3MgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LCB3aGljaCB3YXMgYWRkZWQgdG8gdGhlIHJldmVudWVzIG9mIHRoZSBSb21hbiBwZW9wbGUgYnkgdGhlIGNhbXBhaWducwogICAgICAgYW5kIHN1Y2Nlc3NlcyBvZiBMdWNpdXMgTXVtbWl1cy4gQWZ0ZXIgdGhhdCwgdGhleSBzZWxsIHRoZSBsYW5kcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiBuZWFyIENhcnRoYWdlbmEsIGFjcXVpcmVkIGJ5IHRoZSBkaXN0aW5ndWlzaGVkIHZhbG91ciBvZgogICAgICAgdGhlIHR3byBTY2lwaW9zLiBUaGVuIENhcnRoYWdlbmEgaXRzZWxmLCB3aGljaCBQdWJsaXVzIFNjaXBpbywgaGF2aW5nIHN0cmlwcGVkIGl0IG9mIGFsbCBpdHMKICAgICAgIGZvcnRpZmljYXRpb25zLCBjb25zZWNyYXRlZCB0byB0aGUgZXRlcm5hbCByZWNvbGxlY3Rpb24gb2YgbWVuLCB3aGV0aGVyIGhpcyBwdXJwb3NlIHdhcyB0bwogICAgICAga2VlcCB1cCB0aGUgbWVtb3J5IG9mIHRoZSBkaXNhc3RlciBvZiB0aGUgQ2FydGhhZ2luaWFucywgb3IgdG8gYmVhciB3aXRuZXNzIHRvIG91ciB2aWN0b3J5LAogICAgICAgb3IgdG8gZnVsZmlsbCBzb21lIHJlbGlnaW91cyBvYmxpZ2F0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSGF2aW5nIHNvbGQgYWxsCiAgICAgICB0aGVzZSBlbnNpZ25zIGFuZCBjcm93bnMsIGFzIGl0IHdlcmUsIG9mIHRoZSBlbXBpcmUsIHdpdGggd2hpY2ggdGhlIHJlcHVibGljIHdhcyBhZG9ybmVkLCBhbmQKICAgICAgIGhhbmRlZCBkb3duIHRvIHlvdSBieSB5b3VyIGFuY2VzdG9ycywgdGhleSB0aGVuIG9yZGVyIHRoZSBsYW5kcyB0byBiZSBzb2xkIHdoaWNoIHRoZSBraW5nCiAgICAgICBNaXRocmlkYXRlcyBwb3NzZXNzZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LiBEbyB0aGV5IG5vdCBzZWVtIHRvIGJlIHB1cnN1aW5nIHdpdGhvdXQgbXVjaCBkaXNndWlzZSwgYW5kIGFsbW9zdAogICAgICAgd2l0aCB0aGUgY3JpZXIncyBzcGVhciwgdGhlIGFybXkgb2YgQ25hZXVzIFBvbXBlaXVzLCB3aGVuIHRoZXkgb3JkZXIgdGhvc2UgbGFuZHMgdG8gYmUgc29sZAogICAgICAgaW4gd2hpY2ggaGUgaXMgbm93IGVuZ2FnZWQgYW5kIGNhcnJ5aW5nIG9uIHdhcj8gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNzgiPkF0dGFsaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwMTkiPk9seW1wdXM8L3BsYWNlTmFtZT4KICAgICAgIHRvIGJlIHNvbGQuIFRoZXNlIGxhbmRzIHRoZSB2aWN0b3J5IG9mIFB1YmxpdXMgU2VydmlsaXVzLCB0aGF0IG1vc3QgZ2FsbGFudCBnZW5lcmFsLCBoYWQgbWFkZQogICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUuIEFmdGVyIHRoYXQsIHRoZSByb3lhbCBkb21haW5zIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggd2VyZSBhY3F1aXJlZCBwYXJ0bHkgYnkgdGhlIHZhbG91ciBvZiBUaXR1cwogICAgICAgRmxhbWluaW51cywgYW5kIHBhcnQgYnkgdGhhdCBvZiBMdWNpdXMgUGF1bGx1cywgd2hvIGNvbnF1ZXJlZCBQZXJzZXMuIEFmdGVyIHRoYXQsIHRoYXQgbW9zdAogICAgICAgZXhjZWxsZW50IGFuZCBwcm9kdWN0aXZlIGxhbmQgd2hpY2ggYmVsb25ncyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4sIHdoaWNoIHdhcyBhZGRlZCB0byB0aGUgcmV2ZW51ZXMgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSB0aGUgY2FtcGFpZ25zCiAgICAgICBhbmQgc3VjY2Vzc2VzIG9mIEx1Y2l1cyBNdW1taXVzLiBBZnRlciB0aGF0LCB0aGV5IHNlbGwgdGhlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+IG5lYXIgQ2FydGhhZ2VuYSwgYWNxdWlyZWQgYnkgdGhlIGRpc3Rpbmd1aXNoZWQgdmFsb3VyIG9mCiAgICAgICB0aGUgdHdvIFNjaXBpb3MuIFRoZW4gQ2FydGhhZ2VuYSBpdHNlbGYsIHdoaWNoIFB1YmxpdXMgU2NpcGlvLCBoYXZpbmcgc3RyaXBwZWQgaXQgb2YgYWxsIGl0cwogICAgICAgZm9ydGlmaWNhdGlvbnMsIGNvbnNlY3JhdGVkIHRvIHRoZSBldGVybmFsIHJlY29sbGVjdGlvbiBvZiBtZW4sIHdoZXRoZXIgaGlzIHB1cnBvc2Ugd2FzIHRvCiAgICAgICBrZWVwIHVwIHRoZSBtZW1vcnkgb2YgdGhlIGRpc2FzdGVyIG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBvciB0byBiZWFyIHdpdG5lc3MgdG8gb3VyIHZpY3RvcnksCiAgICAgICBvciB0byBmdWxmaWxsIHNvbWUgcmVsaWdpb3VzIG9ibGlnYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBIYXZpbmcgc29sZCBhbGwKICAgICAgIHRoZXNlIGVuc2lnbnMgYW5kIGNyb3ducywgYXMgaXQgd2VyZSwgb2YgdGhlIGVtcGlyZSwgd2l0aCB3aGljaCB0aGUgcmVwdWJsaWMgd2FzIGFkb3JuZWQsIGFuZAogICAgICAgaGFuZGVkIGRvd24gdG8geW91IGJ5IHlvdXIgYW5jZXN0b3JzLCB0aGV5IHRoZW4gb3JkZXIgdGhlIGxhbmRzIHRvIGJlIHNvbGQgd2hpY2ggdGhlIGtpbmcKICAgICAgIE1pdGhyaWRhdGVzIHBvc3Nlc3NlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzYwIj5QYXBobGFnb25pYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDMwMTYiPkNhcHBhZG9jaWE8L3BsYWNlTmFtZT4uIERvIHRoZXkgbm90IHNlZW0gdG8gYmUgcHVyc3Vpbmcgd2l0aG91dCBtdWNoIGRpc2d1aXNlLCBhbmQgYWxtb3N0CiAgICAgICB3aXRoIHRoZSBjcmllcidzIHNwZWFyLCB0aGUgYXJteSBvZiBDbmFldXMgUG9tcGVpdXMsIHdoZW4gdGhleSBvcmRlciB0aG9zZSBsYW5kcyB0byBiZSBzb2xkCiAgICAgICBpbiB3aGljaCBoZSBpcyBub3cgZW5nYWdlZCBhbmQgY2Fycnlpbmcgb24gd2FyPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgaXMgdGhlIG1lYW5pbmcgb2YgdGhpcywgdGhhdCB0aGV5IGZpeCBubyBwbGFjZSBmb3IgdGhpcyBhdWN0aW9uIHdoaWNoIHRoZXkgYXJlCiAgICAgICBlc3RhYmxpc2hpbmc/IEZvciBwb3dlciBpcyBnaXZlbiB0byB0aGUgZGVjZW12aXJzIGJ5IHRoaXMgbGF3LCBvZiBob2xkaW5nIHRoZWlyIHNhbGVzIGluIGFueQogICAgICAgcGxhY2VzIHdoaWNoIHNlZW0gY29udmVuaWVudCB0byB0aGVtLiBUaGUgY2Vuc29ycyBhcmUgbm90IGFsbG93ZWQgdG8gbGV0IHRoZSBjb250cmFjdHMgZm9yCiAgICAgICBmYXJtaW5nIHRoZSByZXZlbnVlcywgZXhjZXB0IGluIHRoZSBzaWdodCBvZiB0aGUgUm9tYW4gcGVvcGxlLiBTaGFsbCB0aGVzZSBtZW4gYmUgYWxsb3dlZCB0bwogICAgICAgc2VsbCB0aGVtIGluIHRoZSBtb3N0IGRpc3RhbnQgY291bnRyaWVzPyBCdXQgZXZlbiB0aGUgbW9zdCBwcm9mbGlnYXRlIG1lbiwgd2hlbiB0aGV5IGhhdmUKICAgICAgIHNxdWFuZGVyZWQgdGhlaXIgcGF0cmltb255LCBwcmVmZXIgc2VsbGluZyB0aGVpciBwcm9wZXJ0eSBpbiB0aGUgYXVjdGlvbmVlcidzIHJvb21zLCByYXRoZXIKICAgICAgIHRoYW4gaW4gdGhlIHJvYWRzLCBvciBpbiB0aGUgc3RyZWV0cy4gVGhpcyBtYW4sIGJ5IGhpcyBsYXcsIGdpdmVzIGxlYXZlIHRvIHRoZSBkZWNlbXZpcnMgdG8KICAgICAgIHNlbGwgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgaW4gd2hhdGV2ZXIgZGFya25lc3MgYW5kIHdoYXRldmVyIHNvbGl0dWRlIHRoZXkgZmluZCBpdAogICAgICAgY29udmVuaWVudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IERvIHlvdSBub3QsIG1vcmVvdmVyLCBzZWUgaG93IGdyaWV2b3VzLCBob3cKICAgICAgIGZvcm1pZGFibGUsIGFuZCBob3cgcHJlZ25hbnQgd2l0aCBleHRvcnRpb24gdGhhdCBpbnZhc2lvbiBvZiB0aGUgZGVjZW12aXJzIGFuZCBvZiB0aGUKICAgICAgIG11bHRpdHVkZSB0aGF0IHdpbGwgZm9sbG93IGluIHRoZWlyIHRyYWluIHdpbGwgYmUgdG8gYWxsIHRoZSBwcm92aW5jZXMsIGFuZCBraW5nZG9tcywgYW5kCiAgICAgICBmcmVlIG5hdGlvbnM/IEluIHRoZSBjYXNlIG9mIHRob3NlIG1lbiBvbiB3aG9tIHlvdSBoYXZlIGNvbmZlcnJlZCBsaWV1dGVuYW5jaWVzIGZvciB0aGUgc2FrZQogICAgICAgb2YgZW50ZXJpbmcgb24gaW5oZXJpdGFuY2VzLCB0aG91Z2ggdGhleSB3ZW50IGFzIHByaXZhdGUgbWVuLCBvbiBwcml2YXRlIGJ1c2luZXNzLCBpbnZlc3RlZAogICAgICAgd2l0aCBubyBleGNlc3NpdmUgcG93ZXIgYW5kIG5vIHN1cHJlbWUgYXV0aG9yaXR5LCB5b3UgaGF2ZSBzdGlsbCBoZWFyZCBob3cgYnVyZGVuc29tZSB0aGVpcgogICAgICAgYXJyaXZhbCBoYXMgcHJvdmVkIHRvIHlvdXIgYWxsaWVzLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgYWxhcm0gYW5kIHdoYXQKICAgICAgIG1pc2ZvcnR1bmUsIHRoZW4gbXVzdCB5b3UgdGhpbmsgYWxsIG5hdGlvbnMgYXJlIHRocmVhdGVuZWQgd2l0aCBieSB0aGlzIGxhdywgd2hlbiBkZWNlbXZpcnMKICAgICAgIGFyZSBzZW50IGFsbCBvdmVyIHRoZSB3b3JsZCB3aXRoIHN1cHJlbWUgcG93ZXIs4oCUbWVuIG9mIHRoZSBncmVhdGVzdCBhdmFyaWNlLCBhbmQKICAgICAgIHdpdGggYW4gaW5zYXRpYWJsZSBkZXNpcmUgZm9yIGV2ZXJ5IHNvcnQgb2YgcHJvcGVydHk/IHdob3NlIGFycml2YWwgd2lsbCBiZSBncmlldm91cywgd2hvc2UKICAgICAgIGZvcmNlcyB3aWxsIGJlIGZvcm1pZGFibGUsIHdob3NlIGp1ZGljaWFsIGFuZCBhcmJpdHJhcnkgcG93ZXIgd2lsbCBiZSBhYnNvbHV0ZWx5IGludG9sZXJhYmxlLgogICAgICAgRm9yIHRoZXkgd2lsbCBoYXZlIHRoZSBwb3dlciBvZiBkZWNpZGluZyB3aGF0ZXZlciB0aGV5IHBsZWFzZSB0byBiZSBwdWJsaWMgcHJvcGVydHksIGFuZCBvZgogICAgICAgc2VsbGluZyB3aGF0ZXZlciB0aGV5IGRlY2lkZSB0byBiZSBzdWNoLiBFdmVuIHRoYXQgdmVyeSB0aGluZyB3aGljaCBjb25zY2llbnRpb3VzIG1lbiB3aWxsCiAgICAgICBub3QgZG8sIG5hbWVseSwgdGFraW5nIG1vbmV5IHRvIGFic3RhaW4gZnJvbSBzZWxsaW5nLCBpcyB0byBiZSBtYWRlIDxwYiBuPSIyMDYiIC8+IGxhd2Z1bCBmb3IKICAgICAgIHRoZW0gdG8gZG8gYnkgdGhlIGV4cHJlc3MgcHJvdmlzaW9ucyBvZiB0aGUgbGF3LiBGcm9tIHRoaXMgcHJvdmlzaW9uIHdoYXQgcGx1bmRlcmluZ3MsIHdoYXQKICAgICAgIGJhcmdhaW5pbmdzLCB3aGF0IGEgcmVndWxhciBhdWN0aW9uIG9mIGFsbCBsYXcgYW5kIG9mIGV2ZXJ5IG9uZSdzIGZvcnR1bmVzIG11c3QgaW5ldml0YWJseQogICAgICAgYXJpc2UhIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+IEV2ZW4gdGhhdCB3aGljaCBpbiB0aGUgZm9ybWVyIHBlcnQgb2YgdGhlIGxhdyBtYWRlCiAgICAgICBpbiB0aGUgY29uc3Vsc2hpcCBvZiBTdWxsYSBhbmQgUG9tcGVpdXMgd2FzIHN0cmljdGx5IGRlZmluZWQsIHRoYXQgdGhleSBoYXZlIG5vdyBsZWZ0IGF0IHRoZQogICAgICAgZGlzY3JldGlvbiBvZiB0aGVzZSBtZW4sIHdpdGhvdXQgYW55IHJlc3RyaWN0aW9uIG9yIGxpbWl0YXRpb24uIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3Ugbm90LCBtb3Jlb3Zlciwgc2VlIGhvdyBncmlldm91cywgaG93CiAgICAgICBmb3JtaWRhYmxlLCBhbmQgaG93IHByZWduYW50IHdpdGggZXh0b3J0aW9uIHRoYXQgaW52YXNpb24gb2YgdGhlIGRlY2VtdmlycyBhbmQgb2YgdGhlCiAgICAgICBtdWx0aXR1ZGUgdGhhdCB3aWxsIGZvbGxvdyBpbiB0aGVpciB0cmFpbiB3aWxsIGJlIHRvIGFsbCB0aGUgcHJvdmluY2VzLCBhbmQga2luZ2RvbXMsIGFuZAogICAgICAgZnJlZSBuYXRpb25zPyBJbiB0aGUgY2FzZSBvZiB0aG9zZSBtZW4gb24gd2hvbSB5b3UgaGF2ZSBjb25mZXJyZWQgbGlldXRlbmFuY2llcyBmb3IgdGhlIHNha2UKICAgICAgIG9mIGVudGVyaW5nIG9uIGluaGVyaXRhbmNlcywgdGhvdWdoIHRoZXkgd2VudCBhcyBwcml2YXRlIG1lbiwgb24gcHJpdmF0ZSBidXNpbmVzcywgaW52ZXN0ZWQKICAgICAgIHdpdGggbm8gZXhjZXNzaXZlIHBvd2VyIGFuZCBubyBzdXByZW1lIGF1dGhvcml0eSwgeW91IGhhdmUgc3RpbGwgaGVhcmQgaG93IGJ1cmRlbnNvbWUgdGhlaXIKICAgICAgIGFycml2YWwgaGFzIHByb3ZlZCB0byB5b3VyIGFsbGllcy4gPC90cmFuc2xhdGlvbj4="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGFsYXJtIGFuZCB3aGF0CiAgICAgICBtaXNmb3J0dW5lLCB0aGVuIG11c3QgeW91IHRoaW5rIGFsbCBuYXRpb25zIGFyZSB0aHJlYXRlbmVkIHdpdGggYnkgdGhpcyBsYXcsIHdoZW4gZGVjZW12aXJzCiAgICAgICBhcmUgc2VudCBhbGwgb3ZlciB0aGUgd29ybGQgd2l0aCBzdXByZW1lIHBvd2VyLOKAlG1lbiBvZiB0aGUgZ3JlYXRlc3QgYXZhcmljZSwgYW5kCiAgICAgICB3aXRoIGFuIGluc2F0aWFibGUgZGVzaXJlIGZvciBldmVyeSBzb3J0IG9mIHByb3BlcnR5PyB3aG9zZSBhcnJpdmFsIHdpbGwgYmUgZ3JpZXZvdXMsIHdob3NlCiAgICAgICBmb3JjZXMgd2lsbCBiZSBmb3JtaWRhYmxlLCB3aG9zZSBqdWRpY2lhbCBhbmQgYXJiaXRyYXJ5IHBvd2VyIHdpbGwgYmUgYWJzb2x1dGVseSBpbnRvbGVyYWJsZS4KICAgICAgIEZvciB0aGV5IHdpbGwgaGF2ZSB0aGUgcG93ZXIgb2YgZGVjaWRpbmcgd2hhdGV2ZXIgdGhleSBwbGVhc2UgdG8gYmUgcHVibGljIHByb3BlcnR5LCBhbmQgb2YKICAgICAgIHNlbGxpbmcgd2hhdGV2ZXIgdGhleSBkZWNpZGUgdG8gYmUgc3VjaC4gRXZlbiB0aGF0IHZlcnkgdGhpbmcgd2hpY2ggY29uc2NpZW50aW91cyBtZW4gd2lsbAogICAgICAgbm90IGRvLCBuYW1lbHksIHRha2luZyBtb25leSB0byBhYnN0YWluIGZyb20gc2VsbGluZywgaXMgdG8gYmUgbWFkZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIC8+IGxhd2Z1bCBmb3IKICAgICAgIHRoZW0gdG8gZG8gYnkgdGhlIGV4cHJlc3MgcHJvdmlzaW9ucyBvZiB0aGUgbGF3LiBGcm9tIHRoaXMgcHJvdmlzaW9uIHdoYXQgcGx1bmRlcmluZ3MsIHdoYXQKICAgICAgIGJhcmdhaW5pbmdzLCB3aGF0IGEgcmVndWxhciBhdWN0aW9uIG9mIGFsbCBsYXcgYW5kIG9mIGV2ZXJ5IG9uZSdzIGZvcnR1bmVzIG11c3QgaW5ldml0YWJseQogICAgICAgYXJpc2UhIDwvdHJhbnNsYXRpb24+"
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gRXZlbiB0aGF0IHdoaWNoIGluIHRoZSBmb3JtZXIgcGVydCBvZiB0aGUgbGF3IG1hZGUKICAgICAgIGluIHRoZSBjb25zdWxzaGlwIG9mIFN1bGxhIGFuZCBQb21wZWl1cyB3YXMgc3RyaWN0bHkgZGVmaW5lZCwgdGhhdCB0aGV5IGhhdmUgbm93IGxlZnQgYXQgdGhlCiAgICAgICBkaXNjcmV0aW9uIG9mIHRoZXNlIG1lbiwgd2l0aG91dCBhbnkgcmVzdHJpY3Rpb24gb3IgbGltaXRhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['1.10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgb3JkZXJzIHRoZXNlIHNhbWUgZGVjZW12aXJzIHRvIGltcG9zZSBhbiBleGNlZWRpbmdseSBoZWF2eSB0YXggb24gYWxsIHRoZSBwdWJsaWMKICAgICAgIGRvbWFpbnMsIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBiZSBhYmxlIGJvdGggdG8gcmVsZWFzZSB3aGF0IGxhbmRzIHRoZXkgY2hvb3NlIGFuZCB0bwogICAgICAgY29uZmlzY2F0ZSB3aGF0IHRoZXkgY2hvb3NlLiBBbmQgaW4gdGhpcyBwcm9jZWVkaW5nIGl0IGlzIGhhcmQgdG8gc2VlIHdoZXRoZXIgdGhlaXIgc2V2ZXJpdHkKICAgICAgIHdpbGwgYmUgbW9yZSBjcnVlbCBvciB0aGVpciBraW5kbmVzcyBtb3JlIGdhaW5mdWwuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3dldmVyLCB0aGVyZSBhcmUgaW4gdGhlIHdob2xlIGxhdyB0d28gZXhjZXB0aW9ucywgbm90IHNvIG11Y2ggdW5qdXN0IGFzIHN1c3BpY2lvdXMuIEluCiAgICAgICBpbXBvc2luZyB0aGUgdGF4IGl0IG1ha2VzIGFuIGV4Y2VwdGlvbiB3aXRoIHJlc3BlY3QgdG8gdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+OyBhbmQgaW4gc2VsbGluZyB0aGUgbGFuZCwgaGUgZXhjZXB0cyB0aG9zZSB3aXRoIHJlc3BlY3QKICAgICAgIHRvIHdoaWNoIHRoZXJlIHdhcyBhbiBleHByZXNzIHByb3Zpc2lvbiBpbiB0aGUgdHJlYXR5LiBUaGVzZSBsYW5kcyBhcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+LCBpbiB0aGUgb2NjdXBhdGlvbiBvZiBIaWVtcHNhbC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBIZXJlIEkgYXNrLCBpZiBzdWZmaWNpZW50IHByb3RlY3Rpb24gaXMgYWZmb3JkZWQgdG8gSGllbXBzYWwgYnkgdGhlIHRyZWF0eQogICAgICAgYW5kIGlmIHRoZSBSZWNlbnRvcmljIGRpc3RyaWN0IGlzIHByaXZhdGUgcHJvcGVydHksIHdoYXQgd2FzIHVzZSBvZiBleGNlcHRpbmcgdGhlc2UgbGFuZHMgYnkKICAgICAgIG5hbWUgaW4gdGhlIGxhdz8gSWYgdGhhdCB0cmVhdHkgaXRzZWxmIGhhcyBzb21lIG9ic2N1cml0eSBpbiBpdCwgYW5kIGlmIHRoZSBSZWNlbnRvcmljIGlzCiAgICAgICBzb21ldGltZXMgc2FpZCB0byBiZSBwdWJsaWMgcHJvcGVydHksIHdobyBkbyB5b3Ugc3VwcG9zZSB3aWxsIGJlbGlldmUgdGhhdCB0aGVyZSBoYXZlIGJlZW4KICAgICAgIHR3byBpbnRlcmVzdHMgZm91bmQgaW4gdGhlIHdvcmxkLCBhbmQgb25seSB0d28sIHdoaWNoIGhlIHNwYXJlZCBmb3Igbm90aGluZz8gRG9lcyB0aGVyZQogICAgICAgYXBwZWFyIHRvIGhhdmUgYmVlbiBhbnkgY29pbiBpbiB0aGUgd29ybGQgc28gY2FyZWZ1bGx5IGhpZGRlbiB0aGF0IHRoZSBhcmNoaXRlY3RzIG9mIHRoaXMgbGF3CiAgICAgICBoYXZlIGZhaWxlZCB0byBzY2VudCBpdCBvdXQ/IFRoZXkgYXJlIGRyYWluaW5nIHRoZSBwcm92aW5jZXMsIHRoZSBmcmVlIGNpdGllcywgb3VyIGFsbGllcywKICAgICAgIG91ciBmcmllbmRzLCBhbmQgZXZlbiB0aGUga2luZ3Mgd2hvIGFyZSBjb25mZWRlcmF0ZSB3aXRoIHVzLiBUaGV5IGFyZSBsYXlpbmcgYmFuZHMgb24gdGhlCiAgICAgICByZXZlbnVlIG9mIHRoZSBSb21hbiBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+OyBhbmQgaW4gc2VsbGluZyB0aGUgbGFuZCwgaGUgZXhjZXB0cyB0aG9zZSB3aXRoIHJlc3BlY3QKICAgICAgIHRvIHdoaWNoIHRoZXJlIHdhcyBhbiBleHByZXNzIHByb3Zpc2lvbiBpbiB0aGUgdHJlYXR5LiBUaGVzZSBsYW5kcyBhcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+LCBpbiB0aGUgb2NjdXBhdGlvbiBvZiBIaWVtcHNhbC4gPC90cmFuc2xhdGlvbj4="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gSGVyZSBJIGFzaywgaWYgc3VmZmljaWVudCBwcm90ZWN0aW9uIGlzIGFmZm9yZGVkIHRvIEhpZW1wc2FsIGJ5IHRoZSB0cmVhdHkKICAgICAgIGFuZCBpZiB0aGUgUmVjZW50b3JpYyBkaXN0cmljdCBpcyBwcml2YXRlIHByb3BlcnR5LCB3aGF0IHdhcyB1c2Ugb2YgZXhjZXB0aW5nIHRoZXNlIGxhbmRzIGJ5CiAgICAgICBuYW1lIGluIHRoZSBsYXc/IElmIHRoYXQgdHJlYXR5IGl0c2VsZiBoYXMgc29tZSBvYnNjdXJpdHkgaW4gaXQsIGFuZCBpZiB0aGUgUmVjZW50b3JpYyBpcwogICAgICAgc29tZXRpbWVzIHNhaWQgdG8gYmUgcHVibGljIHByb3BlcnR5LCB3aG8gZG8geW91IHN1cHBvc2Ugd2lsbCBiZWxpZXZlIHRoYXQgdGhlcmUgaGF2ZSBiZWVuCiAgICAgICB0d28gaW50ZXJlc3RzIGZvdW5kIGluIHRoZSB3b3JsZCwgYW5kIG9ubHkgdHdvLCB3aGljaCBoZSBzcGFyZWQgZm9yIG5vdGhpbmc/IERvZXMgdGhlcmUKICAgICAgIGFwcGVhciB0byBoYXZlIGJlZW4gYW55IGNvaW4gaW4gdGhlIHdvcmxkIHNvIGNhcmVmdWxseSBoaWRkZW4gdGhhdCB0aGUgYXJjaGl0ZWN0cyBvZiB0aGlzIGxhdwogICAgICAgaGF2ZSBmYWlsZWQgdG8gc2NlbnQgaXQgb3V0PyBUaGV5IGFyZSBkcmFpbmluZyB0aGUgcHJvdmluY2VzLCB0aGUgZnJlZSBjaXRpZXMsIG91ciBhbGxpZXMsCiAgICAgICBvdXIgZnJpZW5kcywgYW5kIGV2ZW4gdGhlIGtpbmdzIHdobyBhcmUgY29uZmVkZXJhdGUgd2l0aCB1cy4gVGhleSBhcmUgbGF5aW5nIGJhbmRzIG9uIHRoZQogICAgICAgcmV2ZW51ZSBvZiB0aGUgUm9tYW4gcGVvcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGF0IGlzIG5vdCBlbm91Z2guIExpc3RlbuKAlGxpc3RlbiwgeW91IHdobywgYnkgdGhlIG1vc3QgaG9ub3VyYWJsZSB2b3RlIG9mIHRoZQogICAgICAgcGVvcGxlIGFuZCBzZW5hdGUsIGhhdmUgY29tbWFuZGVkIGFybWllcyBhbmQgY2FycmllZCBvbiB3YXJzOuKAlOKAnFdoYXRldmVyCiAgICAgICBoYXMgY29tZSBvciBzaGFsbCBjb21lIHRvIGFueW9uZSwgb2YgYm9vdHksIG9mIHNwb2lscywgb2YgbW9uZXkgZ2l2ZW4gZm9yIGdvbGQgY3Jvd25zLCB3aGljaAogICAgICAgaGFzIG5laXRoZXIgYmVlbiBzcGVudCBvbiBhIG1vbnVtZW50LCBub3IgcGFpZCBpbnRvIHRoZSB0cmVhc3VyeSwgaXMgYWxsIHRvIGJlIHBhaWQgb3ZlciB0bwogICAgICAgdGhlIGRlY2Vtdmlycy7igJ0gRnJvbSB0aGlzIGNoYXB0ZXIgdGhleSBleHBlY3QgYSBncmVhdCBkZWFsLiBUaGUgcHJvcG9zZSBieSB0aGVpcgogICAgICAgcmVzb2x1dGlvbiBhbiBpbnZlc3RpZ2F0aW9uIGludG8gdGhlIGFmZmFpcnMgb2YgYWxsIG91ciBnZW5lcmFscyBhbmQgYWxsIHRoZWlyIGhlaXJzLiBCdXQKICAgICAgIHRoZXkgZXhwZWN0IHRvIGdvIHRoZSBncmVhdGVzdCBxdWFudGl0eSBvZiBtb25leSBmcm9tIEZhdXN0dXMuIFRoYXQgY2F1c2Ugd2hpY2ggdGhlIGp1ZGdlcwogICAgICAgdXBvbiB0aGVpciBvYXRoIHdvdWxkIG5vdCB1bmRlcnRha2UsIHRoZXNlIGRlY2VtdmlycyBoYXZlIHVuZGVydGFrZW4uIFRoZXkgdGhpbmssIHBlcmhhcHMsCiAgICAgICB0aGF0IGl0IHdhcyBkZWNsaW5lZCBieSB0aGUganVkZ2VzLCBvbiBwdXJwb3NlIHRvIGJlIHJlc2VydmVkIHRvIHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhhdCwgdGhlIGxhdyBtb3N0IGNhcmVmdWxseSBwcm92aWRlcyBmb3IgdGhlIGZ1dHVyZSwgdGhhdCwgd2hhdGV2ZXIKICAgICAgIG1vbmV5IGFueSBnZW5lcmFsIHJlY2VpdmVzLCBoZSBpcyBhdCBvbmNlIHRvIHBheSBvdmVyIHRvIHRoZSBkZWNlbXZpcnMuIEJ1dCBoZXJlIGhlIGV4Y2VwdHMKICAgICAgIFBvbXBlaXVzLCB2ZXJ5IG11Y2ggYXMsIGFzIGl0IHNlZW1zIHRvIG1lLCBpbiB0aGF0IGxhdyBieSB3aGljaCBhbGllbnMgYXJlIHNlbnQgYXdheSBmcm9tCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBhbiBleGNlcHRpb24gaXMgbWFkZSBpbiBmYXZvdXIgb2YgR2xhdWNpcHB1cy4KICAgICAgIEZvciB0aGUgZWZmZWN0IG9mIHRoaXMgZXhjZXB0aW9uIGlzIG5vdCB0byBjb25mZXIgYSBraW5kbmVzcyBvbiBvbmUgbWFuLCBidXQgbWVyZWx5IHRvIHNhdmUKICAgICAgIG9uZSBtYW4gZnJvbSBpbmp1c3RpY2UuIEJ1dCB0aGUgbWFuIHdob3NlIHNwb2lscyB0aGUgbGF3IHRodXMgc3BhcmVzLCBoYXMgaGlzIHJldmVudWVzCiAgICAgICBpbnZhZGVkIGJ5IHRoZSBzYW1lIGxhdy4gRm9yIGl0IG9yZGVycyBhbGwgdGhlIG1vbmV5IHdoaWNoIGlzIHJlY2VpdmVkIGFmdGVyIG91ciBjb25zdWxzaGlwCiAgICAgICBmcm9tIHRoZSBuZXcgcmV2ZW51ZXMsIHRvIGJlIHBsYWNlZCB0byB0aGUgdXNlIG9mIHRoZSBkZWNlbXZpcnMuIEFzIGlmIHdlIGRpZCBub3Qgc2VlIHRoYXQKICAgICAgIHRoZXkgd2VyZSB0aGlua2luZyBvZiBzZWxsaW5nIHRoZSByZXZlbnVlcyB3aGljaCBDbmFldXMgUG9tcGVpdXMgaGFzIGFkZGVkIHRvIHRoZSB3ZWFsdGggb2YKICAgICAgIHRoZSBSb21hbiBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhhdCwgdGhlIGxhdyBtb3N0IGNhcmVmdWxseSBwcm92aWRlcyBmb3IgdGhlIGZ1dHVyZSwgdGhhdCwgd2hhdGV2ZXIKICAgICAgIG1vbmV5IGFueSBnZW5lcmFsIHJlY2VpdmVzLCBoZSBpcyBhdCBvbmNlIHRvIHBheSBvdmVyIHRvIHRoZSBkZWNlbXZpcnMuIEJ1dCBoZXJlIGhlIGV4Y2VwdHMKICAgICAgIFBvbXBlaXVzLCB2ZXJ5IG11Y2ggYXMsIGFzIGl0IHNlZW1zIHRvIG1lLCBpbiB0aGF0IGxhdyBieSB3aGljaCBhbGllbnMgYXJlIHNlbnQgYXdheSBmcm9tCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGFuIGV4Y2VwdGlvbiBpcyBtYWRlIGluIGZhdm91ciBvZiBHbGF1Y2lwcHVzLgogICAgICAgRm9yIHRoZSBlZmZlY3Qgb2YgdGhpcyBleGNlcHRpb24gaXMgbm90IHRvIGNvbmZlciBhIGtpbmRuZXNzIG9uIG9uZSBtYW4sIGJ1dCBtZXJlbHkgdG8gc2F2ZQogICAgICAgb25lIG1hbiBmcm9tIGluanVzdGljZS4gQnV0IHRoZSBtYW4gd2hvc2Ugc3BvaWxzIHRoZSBsYXcgdGh1cyBzcGFyZXMsIGhhcyBoaXMgcmV2ZW51ZXMKICAgICAgIGludmFkZWQgYnkgdGhlIHNhbWUgbGF3LiBGb3IgaXQgb3JkZXJzIGFsbCB0aGUgbW9uZXkgd2hpY2ggaXMgcmVjZWl2ZWQgYWZ0ZXIgb3VyIGNvbnN1bHNoaXAKICAgICAgIGZyb20gdGhlIG5ldyByZXZlbnVlcywgdG8gYmUgcGxhY2VkIHRvIHRoZSB1c2Ugb2YgdGhlIGRlY2Vtdmlycy4gQXMgaWYgd2UgZGlkIG5vdCBzZWUgdGhhdAogICAgICAgdGhleSB3ZXJlIHRoaW5raW5nIG9mIHNlbGxpbmcgdGhlIHJldmVudWVzIHdoaWNoIENuYWV1cyBQb21wZWl1cyBoYXMgYWRkZWQgdG8gdGhlIHdlYWx0aCBvZgogICAgICAgdGhlIFJvbWFuIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['1.13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgbm93LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBtb25leSB3aGljaCBpcyB0byBiZWxvbmcgdG8gdGhlIGRlY2VtdmlycyBpcwogICAgICAgY29sbGVjdGVkIGFuZCBoZWFwZWQgdG9nZXRoZXIgZnJvbSBldmVyeSBwb3NzaWJsZSBzb3VyY2UsIGFuZCBieSBldmVyeSBpbWFnaW5hYmxlIGV4cGVkaWVudC4KICAgICAgIFRoZSB1bnBvcHVsYXJpdHkgYXJpc2luZyBmcm9tIHRoZWlyIHBvc3Nlc3Npb24gb2YgdGhpcyBsYXJnZSBzdW0gaXMgdG8gYmUgZGltaW5pc2hlZCwgZm9yIGl0CiAgICAgICBzaGFsbCBiZSBzcGVudCBpbiB0aGUgcHVyY2hhc2Ugb2YgbGFuZHMuIEV4Y2VlZGluZ2x5IHdlbGwuIFdobyB0aGVuIGlzIHRvIGJ1eSB0aG9zZSBsYW5kcz8KICAgICAgIFRoZXNlIHNhbWUgZGVjZW12aXJzLiBZb3UsIE8gUnVsbHVz4oCUIGZvciBJIHNheSBub3RoaW5nIG9mIHRoZSByZXN0IG9mCiAgICAgICB0aGVtLOKAlGFyZSB0byBidXkgd2hhdGV2ZXIgeW91IGxpa2U7IHRvIHNlbGwgd2hhdGV2ZXIgeW91IGxpa2UsIHRvIGJ1eSBvciBzZWxsIGF0CiAgICAgICB3aGF0ZXZlciBwcmljZSB5b3UgcGxlYXNlLiBGb3IgdGhhdCBhZG1pcmFibGUgbWFuIHRha2VzIGNhcmUgbm90IHRvIGJ1eSBvZiBhbnkgb25lIGFnYWluc3QKICAgICAgIGhpcyB3aWxsLiBBcyBpZiB3ZSBkaWQgbm90IHVuZGVyc3RhbmQgdGhhdCB0byBidXkgb2YgYSBtYW4gYWdhaW5zdCBoaXMgd2lsbCBpcyBhbiBpbmp1cmlvdXMKICAgICAgIHRoaW5nIHRvIGRvOyBidXQgdG8gYnV5IG9mIG9uZSB3aG8gaGFzIG5vIG9iamVjdGlvbiwgaXMgcHJvZml0YWJsZS4gSG93IG11Y2ggbGFuZCAodG8gc2F5CiAgICAgICBub3RoaW5nIG9mIG90aGVyIHBlb3BsZSkgd2lsbCB5b3VyIGZhdGhlci1pbi1sYXcgc2VsbCB5b3U/IGFuZCwgaWYgSSBoYXZlIGZvcm1lZCBhIHByb3BlcgogICAgICAgZXN0aW1hdGUgb2YgdGhlIGZhaXJuZXNzIG9mIGhpcyBkaXNwb3NpdGlvbiwgd2lsbCBoYXZlIG5vIG9iamVjdGlvbiB0byBzZWxsIHlvdT8gVGhlIHJlc3QKICAgICAgIHdpbGwgZG8gdGhlIHNhbWUgd2lsbGluZ2x5OyB0aGV5IHdpbGwgYmUgZ2xhZCB0byBleGNoYW5nZSB0aGUgdW5wb3B1bGFyaXR5IGF0dGFjaGluZyB0byB0aGUKICAgICAgIHBvc3Nlc3Npb24gb2YgbGFuZCBmb3IgbW9uZXk7IHRvIHJlY2VpdmUgd2hhdGV2ZXIgdGhleSBkZW1hbmQsIGFuZCB0byBwYXJ0IHdpdGggd2hhdCB0aGV5IGNhbgogICAgICAgc2NhcmNlbHkgcmV0YWluLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyBqdXN0IHNlZSB0aGUgYm91bmRsZXNzIGFuZAogICAgICAgaW50b2xlcmFibGUgbGljZW50aW91c25lc3Mgb2YgYWxsIHRoZXNlIG1lYXN1cmVzLiBNb25leSBoYXMgYmVlbiBjb2xsZWN0ZWQgZm9yIHRoZSBwdXJjaGFzZQogICAgICAgb2YgbGFuZHMuIE1vcmUtb3ZlciwgdGhlIGxhbmRzIGFyZSBub3QgdG8gYmUgYm91Z2h0IG9mIHBlb3BsZSBhZ2FpbnN0IHRoZWlyIHdpbGwuIFN1cHBvc2UgYWxsCiAgICAgICB0aGUgb3duZXJzIGFncmVlIG5vdCB0byBzZWxsLCB3aGF0IGlzIHRvIGhhcHBlbiB0aGVuPyBJcyB0aGUgbW9uZXkgdG8gYmUgcmVmdW5kZWQ/IFRoYXQKICAgICAgIGNhbm5vdCA8cGIgbj0iMjA4IiAvPiBiZS4gSXMgaXQgdG8gYmUgY29sbGVjdGVkPyBUaGUgbGF3IGZvcmJpZHMgdGhhdC4gSG93ZXZlciwgbGV0IHRoYXQgcGFzcy4KICAgICAgIFRoZXJlIGlzIG5vdGhpbmcgd2hpY2ggY2Fubm90IGJlIGJvdWdodCwgaWYgeW91IHdpbGwgb25seSBnaXZlIGFzIG11Y2ggYXMgdGhlIHNlbGxlciBhc2tzLgogICAgICAgTGV0IHVzIHBsdW5kZXIgdGhlIHdob2xlIHdvcmxkLCBsZXQgdXMgc2VsbCBvdXIgcmV2ZW51ZXMsIGxldCB1cyBleGhhdXN0IHRoZSB0cmVhc3VyeSwgaW4KICAgICAgIG9yZGVyIHRoYXQsIHdoZXRoZXIgbWVuIGJlIG93bmVycyBvZiB3ZWFsdGgsIG9yIG9mIG9kaXVtLCBvciBldmVuIG9mIGEgcGVzdGlsZW5jZSwgc3RpbGwKICAgICAgIHRoZWlyIGxhbmRzIG1heSBiZSBib3VnaHQuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gTm93IGp1c3Qgc2VlIHRoZSBib3VuZGxlc3MgYW5kCiAgICAgICBpbnRvbGVyYWJsZSBsaWNlbnRpb3VzbmVzcyBvZiBhbGwgdGhlc2UgbWVhc3VyZXMuIE1vbmV5IGhhcyBiZWVuIGNvbGxlY3RlZCBmb3IgdGhlIHB1cmNoYXNlCiAgICAgICBvZiBsYW5kcy4gTW9yZS1vdmVyLCB0aGUgbGFuZHMgYXJlIG5vdCB0byBiZSBib3VnaHQgb2YgcGVvcGxlIGFnYWluc3QgdGhlaXIgd2lsbC4gU3VwcG9zZSBhbGwKICAgICAgIHRoZSBvd25lcnMgYWdyZWUgbm90IHRvIHNlbGwsIHdoYXQgaXMgdG8gaGFwcGVuIHRoZW4/IElzIHRoZSBtb25leSB0byBiZSByZWZ1bmRlZD8gVGhhdAogICAgICAgY2Fubm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwOCIgLz4gYmUuIElzIGl0IHRvIGJlIGNvbGxlY3RlZD8gVGhlIGxhdyBmb3JiaWRzIHRoYXQuIEhvd2V2ZXIsIGxldCB0aGF0IHBhc3MuCiAgICAgICBUaGVyZSBpcyBub3RoaW5nIHdoaWNoIGNhbm5vdCBiZSBib3VnaHQsIGlmIHlvdSB3aWxsIG9ubHkgZ2l2ZSBhcyBtdWNoIGFzIHRoZSBzZWxsZXIgYXNrcy4KICAgICAgIExldCB1cyBwbHVuZGVyIHRoZSB3aG9sZSB3b3JsZCwgbGV0IHVzIHNlbGwgb3VyIHJldmVudWVzLCBsZXQgdXMgZXhoYXVzdCB0aGUgdHJlYXN1cnksIGluCiAgICAgICBvcmRlciB0aGF0LCB3aGV0aGVyIG1lbiBiZSBvd25lcnMgb2Ygd2VhbHRoLCBvciBvZiBvZGl1bSwgb3IgZXZlbiBvZiBhIHBlc3RpbGVuY2UsIHN0aWxsCiAgICAgICB0aGVpciBsYW5kcyBtYXkgYmUgYm91Z2h0LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcyB0byBoYXBwZW4gdGhlbj8gd2hhdCBzb3J0IG9mIG1lbiBhcmUgdG8gYmUKICAgICAgIGVzdGFibGlzaGVkIGFzIHNldHRsZXJzIGluIHRob3NlIGxhbmRzPyB3aGF0IGlzIHRvIGJlIHRoZSBzeXN0ZW0gYW5kIHBsYW4gYWRvcHRlZCBpbiB0aGUKICAgICAgIHdob2xlIGJ1c2luZXNzPyBDb2xvbmllcywgc2F5IHRoZSBsYXcsIHNoYWxsIGJlIGxlZCB0aGl0aGVyLCBhbmQgc2V0dGxlZCB0aGVyZS4gSG93IG1hbnk/IE9mCiAgICAgICB3aGF0IGNsYXNzIG9mIG1lbj8gV2hlcmUgYXJlIHRoZXkgdG8gYmUgZXN0YWJsaXNoZWQ/IEZvciB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSB0aGF0CiAgICAgICBhbGwgdGhlc2UgdGhpbmdzIGhhdmUgZ290IHRvIGJlIGNvbnNpZGVyZWQgd2hlbiB3ZSBhcmUgdGFsa2luZyBvZiBjb2xvbmllcz8gRGlkIHlvdSB0aGluaywgTwogICAgICAgUnVsbHVzLCB0aGF0IHdlIHdvdWxkIGdpdmUgdXAgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0bwogICAgICAgeW91IGFuZCB0byB0aG9zZSBjb250cml2ZXJzIG9mIGV2ZXJ5dGhpbmcgd2hvbSB5b3UgaGF2ZSBzZXQgdXAsIGluIGFuIHVuYXJtZWQgYW5kIGRlZmVuY2VsZXNzCiAgICAgICBzdGF0ZSwgZm9yIHlvdSB0byBzdHJlbmd0aGVuIGl0IHdpdGggZ2Fycmlzb25zIGFmdGVyd2FyZHM/IGZvciB5b3UgdG8gb2NjdXB5IGl0IHdpdGgKICAgICAgIGNvbG9uaWVzPyB0byBob2xkIGl0IGJvdW5kIGFuZCBmZXR0ZXJlZCBieSBldmVyeSBzb3J0IG9mIGNoYWluPyBGb3Igd2hlcmUgaXMgdGhlcmUgYW55IGNsYXVzZQogICAgICAgdG8gcHJldmVudCB5b3VyIGVzdGFibGlzaGluZyBhIGNvbG9ueSBvbiB0aGUgSmFuaWN1bGFuIEhpbGw/IG9yIGZyb20gb3BwcmVzc2luZyBhbmQKICAgICAgIG92ZXJ3aGVsbWluZyB0aGlzIGNpdHkgd2l0aCBzb21lIG90aGVyIGNpdHk/IFdlIHdpbGwgbm90IGRvIHNvLCBzYXlzIGhlLiBJbiB0aGUgZmlyc3QgcGxhY2UsCiAgICAgICBJIGRvbid0IGtub3cgdGhhdDsgaW4gdGhlIG5leHQgcGxhY2UsIEkgYW0gYWZyYWlkIG9mIHlvdTsgbGFzdGx5LCBJIHdpbGwgbmV2ZXIgcGVybWl0IG91cgogICAgICAgc2FmZXR5IHRvIGRlcGVuZCBvbiB5b3VyIGtpbmRuZXNzIHJhdGhlciB0aGFuIG9uIG91ciBvd24gcHJ1ZGVuY2UuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcyB0byBoYXBwZW4gdGhlbj8gd2hhdCBzb3J0IG9mIG1lbiBhcmUgdG8gYmUKICAgICAgIGVzdGFibGlzaGVkIGFzIHNldHRsZXJzIGluIHRob3NlIGxhbmRzPyB3aGF0IGlzIHRvIGJlIHRoZSBzeXN0ZW0gYW5kIHBsYW4gYWRvcHRlZCBpbiB0aGUKICAgICAgIHdob2xlIGJ1c2luZXNzPyBDb2xvbmllcywgc2F5IHRoZSBsYXcsIHNoYWxsIGJlIGxlZCB0aGl0aGVyLCBhbmQgc2V0dGxlZCB0aGVyZS4gSG93IG1hbnk/IE9mCiAgICAgICB3aGF0IGNsYXNzIG9mIG1lbj8gV2hlcmUgYXJlIHRoZXkgdG8gYmUgZXN0YWJsaXNoZWQ/IEZvciB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSB0aGF0CiAgICAgICBhbGwgdGhlc2UgdGhpbmdzIGhhdmUgZ290IHRvIGJlIGNvbnNpZGVyZWQgd2hlbiB3ZSBhcmUgdGFsa2luZyBvZiBjb2xvbmllcz8gRGlkIHlvdSB0aGluaywgTwogICAgICAgUnVsbHVzLCB0aGF0IHdlIHdvdWxkIGdpdmUgdXAgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHRvCiAgICAgICB5b3UgYW5kIHRvIHRob3NlIGNvbnRyaXZlcnMgb2YgZXZlcnl0aGluZyB3aG9tIHlvdSBoYXZlIHNldCB1cCwgaW4gYW4gdW5hcm1lZCBhbmQgZGVmZW5jZWxlc3MKICAgICAgIHN0YXRlLCBmb3IgeW91IHRvIHN0cmVuZ3RoZW4gaXQgd2l0aCBnYXJyaXNvbnMgYWZ0ZXJ3YXJkcz8gZm9yIHlvdSB0byBvY2N1cHkgaXQgd2l0aAogICAgICAgY29sb25pZXM/IHRvIGhvbGQgaXQgYm91bmQgYW5kIGZldHRlcmVkIGJ5IGV2ZXJ5IHNvcnQgb2YgY2hhaW4/IEZvciB3aGVyZSBpcyB0aGVyZSBhbnkgY2xhdXNlCiAgICAgICB0byBwcmV2ZW50IHlvdXIgZXN0YWJsaXNoaW5nIGEgY29sb255IG9uIHRoZSBKYW5pY3VsYW4gSGlsbD8gb3IgZnJvbSBvcHByZXNzaW5nIGFuZAogICAgICAgb3ZlcndoZWxtaW5nIHRoaXMgY2l0eSB3aXRoIHNvbWUgb3RoZXIgY2l0eT8gV2Ugd2lsbCBub3QgZG8gc28sIHNheXMgaGUuIEluIHRoZSBmaXJzdCBwbGFjZSwKICAgICAgIEkgZG9uJ3Qga25vdyB0aGF0OyBpbiB0aGUgbmV4dCBwbGFjZSwgSSBhbSBhZnJhaWQgb2YgeW91OyBsYXN0bHksIEkgd2lsbCBuZXZlciBwZXJtaXQgb3VyCiAgICAgICBzYWZldHkgdG8gZGVwZW5kIG9uIHlvdXIga2luZG5lc3MgcmF0aGVyIHRoYW4gb24gb3VyIG93biBwcnVkZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['1.16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBhcyB5b3Ugd2FudGVkIHRvIGZpbGwgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggeW91cgogICAgICAgY29sb25pZXMsIGRpZCB5b3UgdGhpbmsgdGhhdCBub3Qgb25lIG9mIHVzIHdvdWxkIHVuZGVyc3RhbmQgd2hhdCBzb3J0IG9mIGEgbWVhc3VyZSB0aGF0IHdhcz8KICAgICAgIEZvciBpdCBpcyB3cml0dGVuLCDigJxUaGUgZGVjZW12aXJzIG1heSBsZWFkIHdoYXRldmVyIHNldHRsZXJzIHRoZXkgY2hvb3NlIGludG8KICAgICAgIHdoYXRldmVyIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyB0aGV5IGxpa2U7IGFuZCB0aGV5IG1heSBhc3NpZ24gdGhlbSBsYW5kcyBpbiB3aGF0ZXZlcgogICAgICAgcGxhY2VzIHRoZXkgcGxlYXNlO+KAnSBzbyB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBvY2N1cGllZCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBzb2xkaWVycywgeW91IG1heSBoYXZlIG5vIGhvcGUgbGVmdCB5b3UsIEkKICAgICAgIHdpbGwgbm90IHNheSBvZiByZXRhaW5pbmcgeW91ciBkaWduaXR5LCBidXQgbm9uZSBldmVuIG9mIHJlY292ZXJpbmcgeW91ciBsaWJlcnR5LiBBbmQgdGhlc2UKICAgICAgIHRoaW5ncywgaW5kZWVkLCBJIG9iamVjdCB0byBvbiBzdXNwaWNpb24gYW5kIGZyb20gY29uamVjdHVyZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgbm93IGFsbCBtaXN0YWtlIG9uIGFueSBzaWRlIHNoYWxsIGJlIHJlbW92ZWQ7IG5vdyB0aGV5IHNoYWxsIHNob3cKICAgICAgIG9wZW5seSB0aGF0IHRoZSB2ZXJ5IG5hbWUgb2YgdGhpcyByZXB1YmxpYywgYW5kIHRoZSBzaXR1YXRpb24gb2YgdGhpcyBjaXR5IGFuZCBlbXBpcmUsIHRoYXQKICAgICAgIGV2ZW4gdGhpcyB2ZXJ5IHRlbXBsZSBvZiB0aGUgZ29vZCBhbmQgZ3JlYXQgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiwKICAgICAgIGFuZCB0aGlzIGNpdGFkZWwgb2YgYWxsIG5hdGlvbnMsIGlzIG9kaW91cyB0byB0aGVtLiBUaGV5IHdpc2ggc2V0dGxlcnMgdG8gYmUgY29uZHVjdGVkIHRvCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPi4gVGhleSB3aXNoIGFnYWluIHRvIG9wcG9zZSB0aGF0IGNpdHkgdG8KICAgICAgIHRoaXMgY2l0eS4gVGhleSB0aGluayBvZiByZW1vdmluZyBhbGwgdGhlaXIgcmljaGVzIHRoaXRoZXIgb2YgdHJhbnNmZXJyaW5nIHRoaXRoZXIgdGhlIG5hbWUKICAgICAgIG9mIHRoZSBlbXBpcmUuIFRoYXQgcGxhY2Ugd2hpY2gsIGJlY2F1c2Ugb2YgdGhlIGZlcnRpbGl0eSBvZiBpdHMgbGFuZHMgYW5kIGl0cyBhYnVuZGFuY2Ugb2YKICAgICAgIGV2ZXJ5IHNvcnQgb2YgcHJvZHVjdGlvbiwgaXMgc2FpZCB0byBiZSB0aGUgcGFyZW50IG9mIHByaWRlIGFuZCBjcnVlbHR54oCUaW4gdGhhdCBvdXIKICAgICAgIGNvbG9uaXN0cywgbWVuIHNlbGVjdGVkIGFzIGZpdCBmb3IgZXZlcnkgaW1hZ2luYWJsZSBwdXJwb3NlLCB3aWxsIGJlIHNldHRsZWQgYnkgdGhlCiAgICAgICBkZWNlbXZpcnMuIE5vIGRvdWJ0LCBpbiB0aGF0IGNpdHksIGluIHdoaWNoIG1lbiwgdGhvdWdoIGJvcm4gdG8gdGhlIGVuam95bWVudCBvZiBhbmNpZW50CiAgICAgICBkaWduaXRpZXMgYW5kIGhlcmVkaXRhcnkgZm9ydHVuZXMsIHdlcmUgc3RpbGwgdW5hYmxlIHRvIGJlYXIgd2l0aCBtb2RlcmF0aW9uIHRoZSBsdXh1cmlhbmNlCiAgICAgICBvZiB0aGVpciBmb3J0dW5lcywgeW91ciBzYXRlbGxpdGVzIHdpbGwgYmUgYWJsZSB0byByZXN0cmFpbiB0aGVpciBpbnNvbGVuY2UgYW5kIHRvIGJlaGF2ZQogICAgICAgd2l0aCBtb2Rlc3R5LiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBPdXIgYW5jZXN0b3JzIHJlbW92ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoZSBtYWdpc3RyYXRlcywgdGhlIHNlbmF0ZSwgdGhlIGdlbmVyYWwgY291bmNpbCwgYW5kCiAgICAgICBhbGwgdGhlIGVuc2lnbnMgb2YgdGhlIHJlcHVibGljLCBhbmQgbGVmdCBub3RoaW5nIHRoZXJlIGV4Y2VwdCB0aGUgYmFyZSBuYW1lIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT47IG5vdCBvdXQgb2YgY3J1ZWx0eSwgKGZvciB3aGF0IHdhcyBldmVyIG1vcmUgbWVyY2lmdWwKICAgICAgIHRoYW4gdGhleSB3ZXJlPyBmb3IgdGhleSBvZnRlbiByZXN0b3JlZCB0aGVpciBwcm9wZXJ0eSBldmVuIHRvIGZvcmVpZ24gZW5lbWllcyB3aGVuIHRoZXkgaGFkCiAgICAgICBiZWVuIHN1YmR1ZWQ7KSBidXQgb3V0IG9mIHdpc2RvbTsgYmVjYXVzZSB0aGV5IHNhdyB0aGF0IGlmIGFueSB0cmFjZSBvZiB0aGUgcmVwdWJsaWMgcmVtYWluZWQKICAgICAgIHdpdGhpbiB0aG9zZSB3YWxscywgdGhlIGNpdHkgaXRzZWxmIG1pZ2h0IGJlIGFibGUgdG8gYWZmb3JkIGEgaG9tZSB0byBzdXByZW1lIHBvd2VyLiBBbmQKICAgICAgIHdvdWxkIG5vdCB5b3UgdG9vIHNlZSBob3cgbWlzY2hpZXZvdXMgdGhlc2UgdGhpbmdzIHdlcmUsIGlmIHlvdSB3ZXJlIG5vdCBkZXNpcm91cyBvZgogICAgICAgb3ZlcnR1cm5pbmcgdGhlIHJlcHVibGljLCBhbmQgb2YgcHJvY3VyaW5nIGEgbmV3IHNvcnQgb2YgcG93ZXIgZm9yIHlvdXIgb3duIHNlbHZlcz8KICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggeW91cgogICAgICAgY29sb25pZXMsIGRpZCB5b3UgdGhpbmsgdGhhdCBub3Qgb25lIG9mIHVzIHdvdWxkIHVuZGVyc3RhbmQgd2hhdCBzb3J0IG9mIGEgbWVhc3VyZSB0aGF0IHdhcz8KICAgICAgIEZvciBpdCBpcyB3cml0dGVuLCDigJxUaGUgZGVjZW12aXJzIG1heSBsZWFkIHdoYXRldmVyIHNldHRsZXJzIHRoZXkgY2hvb3NlIGludG8KICAgICAgIHdoYXRldmVyIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyB0aGV5IGxpa2U7IGFuZCB0aGV5IG1heSBhc3NpZ24gdGhlbSBsYW5kcyBpbiB3aGF0ZXZlcgogICAgICAgcGxhY2VzIHRoZXkgcGxlYXNlO+KAnSBzbyB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBvY2N1cGllZCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBzb2xkaWVycywgeW91IG1heSBoYXZlIG5vIGhvcGUgbGVmdCB5b3UsIEkKICAgICAgIHdpbGwgbm90IHNheSBvZiByZXRhaW5pbmcgeW91ciBkaWduaXR5LCBidXQgbm9uZSBldmVuIG9mIHJlY292ZXJpbmcgeW91ciBsaWJlcnR5LiBBbmQgdGhlc2UKICAgICAgIHRoaW5ncywgaW5kZWVkLCBJIG9iamVjdCB0byBvbiBzdXNwaWNpb24gYW5kIGZyb20gY29uamVjdHVyZS4gPC90cmFuc2xhdGlvbj4="
translation['1.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyBhbGwgbWlzdGFrZSBvbiBhbnkgc2lkZSBzaGFsbCBiZSByZW1vdmVkOyBub3cgdGhleSBzaGFsbCBzaG93CiAgICAgICBvcGVubHkgdGhhdCB0aGUgdmVyeSBuYW1lIG9mIHRoaXMgcmVwdWJsaWMsIGFuZCB0aGUgc2l0dWF0aW9uIG9mIHRoaXMgY2l0eSBhbmQgZW1waXJlLCB0aGF0CiAgICAgICBldmVuIHRoaXMgdmVyeSB0ZW1wbGUgb2YgdGhlIGdvb2QgYW5kIGdyZWF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjwvcGVyc05hbWU+LAogICAgICAgYW5kIHRoaXMgY2l0YWRlbCBvZiBhbGwgbmF0aW9ucywgaXMgb2Rpb3VzIHRvIHRoZW0uIFRoZXkgd2lzaCBzZXR0bGVycyB0byBiZSBjb25kdWN0ZWQgdG8KICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4uIFRoZXkgd2lzaCBhZ2FpbiB0byBvcHBvc2UgdGhhdCBjaXR5IHRvCiAgICAgICB0aGlzIGNpdHkuIFRoZXkgdGhpbmsgb2YgcmVtb3ZpbmcgYWxsIHRoZWlyIHJpY2hlcyB0aGl0aGVyIG9mIHRyYW5zZmVycmluZyB0aGl0aGVyIHRoZSBuYW1lCiAgICAgICBvZiB0aGUgZW1waXJlLiBUaGF0IHBsYWNlIHdoaWNoLCBiZWNhdXNlIG9mIHRoZSBmZXJ0aWxpdHkgb2YgaXRzIGxhbmRzIGFuZCBpdHMgYWJ1bmRhbmNlIG9mCiAgICAgICBldmVyeSBzb3J0IG9mIHByb2R1Y3Rpb24sIGlzIHNhaWQgdG8gYmUgdGhlIHBhcmVudCBvZiBwcmlkZSBhbmQgY3J1ZWx0eeKAlGluIHRoYXQgb3VyCiAgICAgICBjb2xvbmlzdHMsIG1lbiBzZWxlY3RlZCBhcyBmaXQgZm9yIGV2ZXJ5IGltYWdpbmFibGUgcHVycG9zZSwgd2lsbCBiZSBzZXR0bGVkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiBObyBkb3VidCwgaW4gdGhhdCBjaXR5LCBpbiB3aGljaCBtZW4sIHRob3VnaCBib3JuIHRvIHRoZSBlbmpveW1lbnQgb2YgYW5jaWVudAogICAgICAgZGlnbml0aWVzIGFuZCBoZXJlZGl0YXJ5IGZvcnR1bmVzLCB3ZXJlIHN0aWxsIHVuYWJsZSB0byBiZWFyIHdpdGggbW9kZXJhdGlvbiB0aGUgbHV4dXJpYW5jZQogICAgICAgb2YgdGhlaXIgZm9ydHVuZXMsIHlvdXIgc2F0ZWxsaXRlcyB3aWxsIGJlIGFibGUgdG8gcmVzdHJhaW4gdGhlaXIgaW5zb2xlbmNlIGFuZCB0byBiZWhhdmUKICAgICAgIHdpdGggbW9kZXN0eS4gPC90cmFuc2xhdGlvbj4="
translation['1.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gT3VyIGFuY2VzdG9ycyByZW1vdmVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoZSBtYWdpc3RyYXRlcywgdGhlIHNlbmF0ZSwgdGhlIGdlbmVyYWwgY291bmNpbCwgYW5kCiAgICAgICBhbGwgdGhlIGVuc2lnbnMgb2YgdGhlIHJlcHVibGljLCBhbmQgbGVmdCBub3RoaW5nIHRoZXJlIGV4Y2VwdCB0aGUgYmFyZSBuYW1lIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjsgbm90IG91dCBvZiBjcnVlbHR5LCAoZm9yIHdoYXQgd2FzIGV2ZXIgbW9yZSBtZXJjaWZ1bAogICAgICAgdGhhbiB0aGV5IHdlcmU/IGZvciB0aGV5IG9mdGVuIHJlc3RvcmVkIHRoZWlyIHByb3BlcnR5IGV2ZW4gdG8gZm9yZWlnbiBlbmVtaWVzIHdoZW4gdGhleSBoYWQKICAgICAgIGJlZW4gc3ViZHVlZDspIGJ1dCBvdXQgb2Ygd2lzZG9tOyBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgaWYgYW55IHRyYWNlIG9mIHRoZSByZXB1YmxpYyByZW1haW5lZAogICAgICAgd2l0aGluIHRob3NlIHdhbGxzLCB0aGUgY2l0eSBpdHNlbGYgbWlnaHQgYmUgYWJsZSB0byBhZmZvcmQgYSBob21lIHRvIHN1cHJlbWUgcG93ZXIuIEFuZAogICAgICAgd291bGQgbm90IHlvdSB0b28gc2VlIGhvdyBtaXNjaGlldm91cyB0aGVzZSB0aGluZ3Mgd2VyZSwgaWYgeW91IHdlcmUgbm90IGRlc2lyb3VzIG9mCiAgICAgICBvdmVydHVybmluZyB0aGUgcmVwdWJsaWMsIGFuZCBvZiBwcm9jdXJpbmcgYSBuZXcgc29ydCBvZiBwb3dlciBmb3IgeW91ciBvd24gc2VsdmVzPwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB3aGF0IGlzIHRoZXJlIHRoYXQgaXMgZXNwZWNpYWxseSB0byBiZSBndWFyZGVkIGFnYWluc3QgaW4gdGhlIGVzdGFibGlzaG1lbnQgb2YKICAgICAgIGNvbG9uaWVzPyBJZiBpdCBiZSBsdXh1cnnigJQ8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIGNvcnJ1cHRlZCBIYW5uaWJhbCBoaW1zZWxmLiBJZiBpdCBiZSBwcmlkZeKAlHRoYXQgYXBwZWFycyBmcm9tIHRoZSBnZW5lcmFsIGFycm9nYW5jZQogICAgICAgb2YgdGhlIENhbXBhbmlhbnMgdG8gYmUgaW5uYXRlIHRoZXJlLiBJZiB3ZSB3YW50IGEgYnVsd2FyayBmb3IgdGhlIHN0YXRl4oCUdGhlbiBJCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIG5vdCBwbGFjZWQgaW4gZnJvbnQgb2YgdGhpcwogICAgICAgY2l0eSBhcyBhbiBvdXR3b3JrLCBidXQgaXMgb3Bwb3NlZCB0byBpdCBhcyBhbiBlbmVteS4gQnV0IGhvdyBpcyBpdCBhcm1lZD8gTyB5ZSBpbW1vcnRhbAogICAgICAgZ29kcyEgRm9yIGluIHRoZSBQdW5pYyB3YXIgYWxsIHRoZSBwb3dlciB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYWQsIGl0IGhhZCBmcm9tIGl0cyB1bmFzc2lzdGVkIHJlc291cmNlczsgYnV0IG5vdywgYWxsIHRoZSBjaXRpZXMgd2hpY2gKICAgICAgIGFyZSBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHdpbGwgYmUgb2NjdXBpZWQgYnkgY29sb25pc3RzLCBieQogICAgICAgdGhlIG9yZGVyIG9mIHRoZXNlIHNhbWUgZGVjZW12aXJzLiBGb3IsIGZvciB0aGlzIHJlYXNvbiwgdGhlIGxhdyBpdHNlbGYgYWxsb3dzLAogICAgICAg4oCcdGhhdCB0aGUgZGVjZW12aXJzIG1heSBsZWFkIHdob2V2ZXIgdGhleSBwbGVhc2UgYXMgc2V0dGxlcnMgdG8gZXZlcnkgdG93biB3aGljaAogICAgICAgdGhleSBjaG9vc2Uu4oCdIEFuZCBpdCBvcmRlcnMgdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIHRoYXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwNDcwMDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTA0NzAwMiI+U3RlbGxhPC9wbGFjZU5hbWU+LCB0byBiZSBkaXZpZGVkIGFtb25nIHRoZXNlIGNvbG9uaXN0cy4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIGNvcnJ1cHRlZCBIYW5uaWJhbCBoaW1zZWxmLiBJZiBpdCBiZSBwcmlkZeKAlHRoYXQgYXBwZWFycyBmcm9tIHRoZSBnZW5lcmFsIGFycm9nYW5jZQogICAgICAgb2YgdGhlIENhbXBhbmlhbnMgdG8gYmUgaW5uYXRlIHRoZXJlLiBJZiB3ZSB3YW50IGEgYnVsd2FyayBmb3IgdGhlIHN0YXRl4oCUdGhlbiBJCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIG5vdCBwbGFjZWQgaW4gZnJvbnQgb2YgdGhpcwogICAgICAgY2l0eSBhcyBhbiBvdXR3b3JrLCBidXQgaXMgb3Bwb3NlZCB0byBpdCBhcyBhbiBlbmVteS4gQnV0IGhvdyBpcyBpdCBhcm1lZD8gTyB5ZSBpbW1vcnRhbAogICAgICAgZ29kcyEgRm9yIGluIHRoZSBQdW5pYyB3YXIgYWxsIHRoZSBwb3dlciB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYWQsIGl0IGhhZCBmcm9tIGl0cyB1bmFzc2lzdGVkIHJlc291cmNlczsgYnV0IG5vdywgYWxsIHRoZSBjaXRpZXMgd2hpY2gKICAgICAgIGFyZSBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHdpbGwgYmUgb2NjdXBpZWQgYnkgY29sb25pc3RzLCBieQogICAgICAgdGhlIG9yZGVyIG9mIHRoZXNlIHNhbWUgZGVjZW12aXJzLiBGb3IsIGZvciB0aGlzIHJlYXNvbiwgdGhlIGxhdyBpdHNlbGYgYWxsb3dzLAogICAgICAg4oCcdGhhdCB0aGUgZGVjZW12aXJzIG1heSBsZWFkIHdob2V2ZXIgdGhleSBwbGVhc2UgYXMgc2V0dGxlcnMgdG8gZXZlcnkgdG93biB3aGljaAogICAgICAgdGhleSBjaG9vc2Uu4oCdIEFuZCBpdCBvcmRlcnMgdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIHRoYXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwNDcwMDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTA0NzAwMiI+U3RlbGxhPC9wbGFjZU5hbWU+LCB0byBiZSBkaXZpZGVkIGFtb25nIHRoZXNlIGNvbG9uaXN0cy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+IEkgZG8gbm90IGNvbXBsYWluIG9mIHRoZSBkaW1pbnV0aW9uIG9mIHRoZSByZXZlbnVlczsgbm9yCiAgICAgICBvZiB0aGUgd2lja2VkbmVzcyBvZiB0aGlzIGxvc3MgYW5kIGluanVyeS4gSSBwYXNzIG92ZXIgdGhvc2UgdGhpbmdzIHdoaWNoIHRoZXJlIGlzIG5vIG9uZSB3aG8KICAgICAgIGNhbm5vdCBjb21wbGFpbiBvZiB3aXRoIHRoZSBncmVhdGVzdCB3ZWlnaHQgYW5kIHRoZSBncmVhdGVzdCB0cnV0aDsgdGhhdCB3ZSBoYXZlIG5vdCBiZWVuCiAgICAgICBhYmxlIHRvIHByZXNlcnZlIHRoZSBtb3N0IGltcG9ydGFudCBwYXJ0IG9mIHRoZSBwdWJsaWMgcGF0cmltb255IG9mIHRoZSBzdGF0ZSwgdGhhdCB3aGljaCBoYXMKICAgICAgIGJlZW4gdG8gdXMgdGhlIHNvdXJjZSBvZiBvdXIgc3VwcGx5IG9mIGNvcm4sIG91ciBncmFuYXJ5IGluIHRpbWUgb2Ygd2FyLCBvdXIgcmV2ZW51ZSBwbGFjZWQKICAgICAgIHVuZGVyIGN1c3RvZHkgb2YgdGhlIHNlYWxzIGFuZCBib2x0cyBvZiB0aGUgcmVwdWJsaWM7IHRoYXQgd2UsIGluIHNob3J0LCBoYXZlIGFiYW5kb25lZCB0aGF0CiAgICAgICBkaXN0cmljdCB0byBQdWJsaXVzIFJ1bGx1cywgd2hpY2ggaXRzZWxmIGJ5IGl0cyBvd24gcmVzb3VyY2VzIGhhZCByZXNpc3RlZCBib3RoIHRoZSBhYnNvbHV0ZQogICAgICAgcG93ZXIgb2YgU3VsbGEsIGFuZCB0aGUgY29ycnVwdGluZyBsaWJlcmFsaXR5IG9mIHRoZSBHcmFjY2hpLiBJIGRvIG5vdCBzYXkgdGhhdCwgbm93IHRoYXQgc28KICAgICAgIG11Y2ggaGFzIGJlZW4gbG9zdCwgdGhpcyBpcyB0aGUgb25seSByZXZlbnVlIHdoaWNoIHJlbWFpbnMgaW4gdGhlIHJlcHVibGljOyB0aGUgb25seSBvbmUKICAgICAgIHdoaWNoLCB3aGlsZSBvdGhlciBzb3VyY2VzIG9mIGluY29tZSBhcmUgaW50ZXJydXB0ZWQsIGRvZXMgbm90IGZhaWwgdXM7IHRoZSBvbmx5IG9uZSB3aGljaCBpcwogICAgICAgc3BsZW5kaWQgaW4gcGVhY2UsIGlzOyBub3Qgd29ybiBvdXQgaW4gd2FyOyB3aGljaCBzdXBwb3J0cyBvdXIgc29sZGllcnksIGFuZCBpcyBub3QgYWZyYWlkIG9mCiAgICAgICBvdXIgZW5lbWllcy4gSSBwYXNzIG92ZXIgYWxsIHRoaXMgd2hpY2ggSSBtaWdodCBzYXk7IEkgcmVzZXJ2ZSB0aGF0IGZvciB0aGUgYXNzZW1ibHkgb2YgdGhlCiAgICAgICBwZW9wbGUuIEkgYW0gc3BlYWtpbmcgbm93IG9mIHRoZSBkYW5nZXIgdG8gb3VyIHNhZmV0eSBhbmQgdG8gb3VyIGxpYmVydHkuIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aGF0IGRvIHlvdSB0aGluayB3aWxsIHJlbWFpbiB0byB5b3UgdW5pbXBhaXJlZCBpbiB0aGUgd2hvbGUgcmVwdWJsaWMsCiAgICAgICBvciBpbiB5b3VyIGxpYmVydHksIG9yIGluIHlvdXIgZGlnbml0eSwgd2hlbiBSdWxsdXMsIGFuZCB0aG9zZSB3aG9tIHlvdSBhcmUgbXVjaCBtb3JlIGFmcmFpZAogICAgICAgb2YgdGhhbiB5b3UgYXJlIG9mIFJ1bGx1cywgd2l0aCBoaXMgd2hvbGUgYmFuZCBvZiBuZWVkeSBhbmQgdW5wcmluY2lwbGVkIG1lbiwgd2l0aCBhbGwgaGlzCiAgICAgICBmb3JjZXMsIHdpdGggYWxsIGhpcyBzaWx2ZXIgYW5kIGdvbGQsIHNoYWxsIGhhdmUgb2NjdXBpZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBhbmQgdGhlIGNpdGllcyBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPj8KICAgICAgIFRoZXNlIHRoaW5ncywgTyBjb25zY3JpcHQgZmF0aGVycywgSSB3aWxsIHJlc2lzdCBlYWdlcmx5IGFuZCB2aWdvcm91c2x5OyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IG1lbiwgd2hpbGUgSSBhbSBjb25zdWwsIHRvIGJyaW5nIGZvcnRoIHRob3NlIHBsYW5zIGFnYWluc3QgdGhlIHJlcHVibGljIHdoaWNoIHRoZXkKICAgICAgIGhhdmUgbG9uZyBiZWVuIG1lZGl0YXRpbmcuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBub3QgY29tcGxhaW4gb2YgdGhlIGRpbWludXRpb24gb2YgdGhlIHJldmVudWVzOyBub3IKICAgICAgIG9mIHRoZSB3aWNrZWRuZXNzIG9mIHRoaXMgbG9zcyBhbmQgaW5qdXJ5LiBJIHBhc3Mgb3ZlciB0aG9zZSB0aGluZ3Mgd2hpY2ggdGhlcmUgaXMgbm8gb25lIHdobwogICAgICAgY2Fubm90IGNvbXBsYWluIG9mIHdpdGggdGhlIGdyZWF0ZXN0IHdlaWdodCBhbmQgdGhlIGdyZWF0ZXN0IHRydXRoOyB0aGF0IHdlIGhhdmUgbm90IGJlZW4KICAgICAgIGFibGUgdG8gcHJlc2VydmUgdGhlIG1vc3QgaW1wb3J0YW50IHBhcnQgb2YgdGhlIHB1YmxpYyBwYXRyaW1vbnkgb2YgdGhlIHN0YXRlLCB0aGF0IHdoaWNoIGhhcwogICAgICAgYmVlbiB0byB1cyB0aGUgc291cmNlIG9mIG91ciBzdXBwbHkgb2YgY29ybiwgb3VyIGdyYW5hcnkgaW4gdGltZSBvZiB3YXIsIG91ciByZXZlbnVlIHBsYWNlZAogICAgICAgdW5kZXIgY3VzdG9keSBvZiB0aGUgc2VhbHMgYW5kIGJvbHRzIG9mIHRoZSByZXB1YmxpYzsgdGhhdCB3ZSwgaW4gc2hvcnQsIGhhdmUgYWJhbmRvbmVkIHRoYXQKICAgICAgIGRpc3RyaWN0IHRvIFB1YmxpdXMgUnVsbHVzLCB3aGljaCBpdHNlbGYgYnkgaXRzIG93biByZXNvdXJjZXMgaGFkIHJlc2lzdGVkIGJvdGggdGhlIGFic29sdXRlCiAgICAgICBwb3dlciBvZiBTdWxsYSwgYW5kIHRoZSBjb3JydXB0aW5nIGxpYmVyYWxpdHkgb2YgdGhlIEdyYWNjaGkuIEkgZG8gbm90IHNheSB0aGF0LCBub3cgdGhhdCBzbwogICAgICAgbXVjaCBoYXMgYmVlbiBsb3N0LCB0aGlzIGlzIHRoZSBvbmx5IHJldmVudWUgd2hpY2ggcmVtYWlucyBpbiB0aGUgcmVwdWJsaWM7IHRoZSBvbmx5IG9uZQogICAgICAgd2hpY2gsIHdoaWxlIG90aGVyIHNvdXJjZXMgb2YgaW5jb21lIGFyZSBpbnRlcnJ1cHRlZCwgZG9lcyBub3QgZmFpbCB1czsgdGhlIG9ubHkgb25lIHdoaWNoIGlzCiAgICAgICBzcGxlbmRpZCBpbiBwZWFjZSwgaXM7IG5vdCB3b3JuIG91dCBpbiB3YXI7IHdoaWNoIHN1cHBvcnRzIG91ciBzb2xkaWVyeSwgYW5kIGlzIG5vdCBhZnJhaWQgb2YKICAgICAgIG91ciBlbmVtaWVzLiBJIHBhc3Mgb3ZlciBhbGwgdGhpcyB3aGljaCBJIG1pZ2h0IHNheTsgSSByZXNlcnZlIHRoYXQgZm9yIHRoZSBhc3NlbWJseSBvZiB0aGUKICAgICAgIHBlb3BsZS4gSSBhbSBzcGVha2luZyBub3cgb2YgdGhlIGRhbmdlciB0byBvdXIgc2FmZXR5IGFuZCB0byBvdXIgbGliZXJ0eS4gPC90cmFuc2xhdGlvbj4="
translation['1.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoYXQgZG8geW91IHRoaW5rIHdpbGwgcmVtYWluIHRvIHlvdSB1bmltcGFpcmVkIGluIHRoZSB3aG9sZSByZXB1YmxpYywKICAgICAgIG9yIGluIHlvdXIgbGliZXJ0eSwgb3IgaW4geW91ciBkaWduaXR5LCB3aGVuIFJ1bGx1cywgYW5kIHRob3NlIHdob20geW91IGFyZSBtdWNoIG1vcmUgYWZyYWlkCiAgICAgICBvZiB0aGFuIHlvdSBhcmUgb2YgUnVsbHVzLCB3aXRoIGhpcyB3aG9sZSBiYW5kIG9mIG5lZWR5IGFuZCB1bnByaW5jaXBsZWQgbWVuLCB3aXRoIGFsbCBoaXMKICAgICAgIGZvcmNlcywgd2l0aCBhbGwgaGlzIHNpbHZlciBhbmQgZ29sZCwgc2hhbGwgaGF2ZSBvY2N1cGllZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gYW5kIHRoZSBjaXRpZXMgYXJvdW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPj8KICAgICAgIFRoZXNlIHRoaW5ncywgTyBjb25zY3JpcHQgZmF0aGVycywgSSB3aWxsIHJlc2lzdCBlYWdlcmx5IGFuZCB2aWdvcm91c2x5OyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IG1lbiwgd2hpbGUgSSBhbSBjb25zdWwsIHRvIGJyaW5nIGZvcnRoIHRob3NlIHBsYW5zIGFnYWluc3QgdGhlIHJlcHVibGljIHdoaWNoIHRoZXkKICAgICAgIGhhdmUgbG9uZyBiZWVuIG1lZGl0YXRpbmcuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgbWFkZSBhIGdyZWF0IG1pc3Rha2UsIE8gUnVsbHVzLCB5b3UgYW5kIHNvbWUgb2YgeW91cgogICAgICAgY29sbGVhZ3Vlcywgd2hlbiB5b3UgaG9wZWQgdGhhdCwgaW4gYmVpbmcgaW4gb3Bwb3NpdGlvbiB0byBhIGNvbnN1bCB3aG8gc3R1ZGllZCB0aGUgaW50ZXJlc3RzCiAgICAgICBvZiB0aGUgcGVvcGxlIGluIHJlYWxpdHksIG5vdCBieSBtYWtpbmcgYSB2YWluIHBhcmFkZSBvZiBzbyBkb2luZywgeW91IHdvdWxkIGJlIGFibGUgdG8gZ2FpbgogICAgICAgcG9wdWxhcml0eSB3aGlsZSBvdmVydHVybmluZyB0aGUgcmVwdWJsaWMuIEkgY2hhbGxlbmdlIHlvdTsgSSBpbnZpdGUgeW91IHRvIHRoZSBhc3NlbWJseTsgSQogICAgICAgd2lsbCBhY2NlcHQgdGhlIFJvbWFuIHBlb3BsZSBhcyBhbiB1bXBpcmUgYmV0d2VlbiB1cyA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IG1hZGUgYSBncmVhdCBtaXN0YWtlLCBPIFJ1bGx1cywgeW91IGFuZCBzb21lIG9mIHlvdXIKICAgICAgIGNvbGxlYWd1ZXMsIHdoZW4geW91IGhvcGVkIHRoYXQsIGluIGJlaW5nIGluIG9wcG9zaXRpb24gdG8gYSBjb25zdWwgd2hvIHN0dWRpZWQgdGhlIGludGVyZXN0cwogICAgICAgb2YgdGhlIHBlb3BsZSBpbiByZWFsaXR5LCBub3QgYnkgbWFraW5nIGEgdmFpbiBwYXJhZGUgb2Ygc28gZG9pbmcsIHlvdSB3b3VsZCBiZSBhYmxlIHRvIGdhaW4KICAgICAgIHBvcHVsYXJpdHkgd2hpbGUgb3ZlcnR1cm5pbmcgdGhlIHJlcHVibGljLiBJIGNoYWxsZW5nZSB5b3U7IEkgaW52aXRlIHlvdSB0byB0aGUgYXNzZW1ibHk7IEkKICAgICAgIHdpbGwgYWNjZXB0IHRoZSBSb21hbiBwZW9wbGUgYXMgYW4gdW1waXJlIGJldHdlZW4gdXMgPC90cmFuc2xhdGlvbj4="
translation['1.23.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gZmFjdCwgaWYgd2UgbG9vayByb3VuZCB0byBzdXJ2ZXkgZXZlcnl0aGluZyB3aGljaCBpczsgcGxlYXNhbnQgYW5kIGFjY2VwdGFibGUgdG8gdGhlCiAgICAgICBwZW9wbGUsIHdlIHNoYWxsIGZpbmQgdGhhdCBub3RoaW5nIGlzIHNvIHBvcHVsYXIgYXMgcGVhY2UsIGFuZCBjb25jb3JkLCBhbmQgZWFzZS4gWW91IGhhdmUKICAgICAgIGdpdmVuIHVwIHRvIG1lIGEgY2l0eSBtYWRlIGFueGlvdXMgd2l0aCBzdXNwaWNpb24sIGluIHN1c3BlbnNlIGZyb20gZmVhciwgaGFyYXNzZWQgdG8gZGVhdGgKICAgICAgIGJ5IHlvdXIgcHJvcG9zZWQgbGF3cywgYW5kIGFzc2VtYmxpZXMsIGFuZCBzZWRpdGlvbnMuIFlvdSBoYXZlIGluZmxhbWVkIHRoZSBob3BlcyBvZiB0aGUKICAgICAgIHdpY2tlZDsgeW91IGhhdmUgZmlsbGVkIHRoZSB2aXJ0dW91cyB3aXRoIGFsYXJtczsgeW91IGhhdmUgYmFuaXNoZWQgZ29vZCBmYWl0aCBmcm9tIHRoZQogICAgICAgZm9ydW0sIGFuZCBkaWduaXR5IGZyb20gdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+IEFtaWQgYWxsIHRoaXMKICAgICAgIGNvbW1vdGlvbiBhbmQgYWdpdGF0aW9uIG9mIG1pbmRzIGFuZCBjaXJjdW1zdGFuY2VzLCB3aGVuIHRoZSB2b2ljZSBhbmQgYXV0aG9yaXR5IG9mIHRoZQogICAgICAgY29uc3VsIGhhcyBzdWRkZW5seSwgZnJvbSBhbWlkIHN1Y2ggZ3JlYXQgZGFya25lc3MsIGRhd25lZCBvbiB0aGUgUm9tYW4gcGVvcGxlOyB3aGVuIGl0IGhhcwogICAgICAgc2hvd24gdGhhdCBub3RoaW5nIG5lZWQgYmUgZmVhcmVkOyB0aGF0IG5vIHJlZ3VsYXIgYXJteSwgbm8gYmFuZCBvZiBleHRlbXBvcmUgcnVmZmlhbnMsIG5vCiAgICAgICBjb2xvbnksIG5vIHNhbGUgb2YgdGhlIHJldmVudWVzLCBubyBuZXcgb2YgY29tbWFuZCwgbm8gcmVpZ24gb2YgZGVjZW12aXJzLCBubyBuZXcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBvciBvcHBvc2l0aW9uIHNlYXQgb2YgZW1waXJlLCB3aWxsIGJlIGFsbG93ZWQgdG8gZXhpc3QKICAgICAgIHdoaWxlIHdlIGFyZSBjb25zdWxzOyB0aGF0IHRoZSBncmVhdGVzdCB0cmFucXVpbGxpdHkgb2YgcGVhY2UgYW5kIGVhc2Ugd2lsbCBiZSBzZWN1cmVkOyB0aGVuLAogICAgICAgbm8gZG91YnQsIHdlIHNoYWxsIGhhdmUgbXVjaCByZWFzb24gdG8gZWFyIHRoYXQgdGhpcyBiZWF1dGlmdWwgYWdyYXJpYW4gbGF3IG9mIHlvdXJzIHdpbGwKICAgICAgIGFwcGVhciBwb3B1bGFyLiA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2hlbiBJIGhhdmUgZGlzcGxheWVkIHRoZSB3aWNrZWRuZXNzCiAgICAgICBvZiB5b3VyIGNvdW5zZWxzLCB0aGUgZGlzaG9uZXN0eSBvZiB5b3VyIGxhdywgYW5kIHRoZSB0cmVhY2hlcnkgd2hpY2ggaXMgcGxhbm5lZCBieSB0aG9zZQogICAgICAgcG9wdWxhciB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGFnYWluc3QgdGhlIFJvbWFuIHBlb3BsZTsgdGhlbiwgSSBzdXBwb3NlLCBJIHNoYWxsIGhhdmUgcmVhc29uCiAgICAgICB0byBmZWFyIHRoYXQgSSBzaGFsbCBub3QgYmUgYWxsb3dlZCB0byBhcHBlYXIgaW4gdGhlIGFzc2VtYmx5LCBmb3IgdGhlIHB1cnBvc2Ugb2Ygb3Bwb3NpbmcKICAgICAgIHlvdTsgZXNwZWNpYWxseSB3aGVuIEkgaGF2ZSBkZXRlcm1pbmVkIGFuZCByZXNvbHZlZCBzbyB0byBjb25kdWN0IG15c2VsZiBpbiBteSBjb25zdWxzaGlwLAogICAgICAgKGFuZCB0aGUgZHV0aWVzIG9mIHRoZSBjb25zdWxzaGlwIGNhbm5vdCBiZSBkaXNjaGFyZ2VkIHdpdGggZGlnbml0eSBhbmQgZnJlZWRvbSwgaW4gYW55IG90aGVyCiAgICAgICBtYW5uZXIsKSBhcyBuZWl0aGVyIHRvIGRlc2lyZSBhbnkgcHJvdmluY2UsIG5vciBob25vdXIsIG5vciBkaWduaXR5IG5vciBhZHZhbnRhZ2Ugbm9yCiAgICAgICBhbnl0aGluZyB3aGF0ZXZlciB3aGljaCBjYW4gaGF2ZSBhbnkgaGluZHJhbmNlIHRocm93biBpbiBpdHMgd2F5IGJ5IGFueSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlLiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgY29uc3VsIHN0YXRlcywgaW4gZnVsbCBzZW5hdGUsIG9uIHRoZSBjYWxlbmRzCiAgICAgICBvZiBKYW51YXJ5LCB0aGF0IGlmIHRoZSBwcmVzZW50IGNvbmRpdGlvbiBvZiB0aGUgcmVwdWJsaWMgY29udGludWVzLCBhbmQgaWYgbm8gbmV3IGV2ZW50CiAgICAgICBhcmlzZXMsIG9uIGFjY291bnQgb2Ygd2hpY2ggaGUgY2Fubm90IHdpdGggaG9ub3VyIGF2b2lkIGl0LCBoZSB3aWxsIG5vdCBnbyB0byBhbnkgcHJvdmluY2UuCiAgICAgICBCeSB0aGF0IG1lYW5zIEkgc2hhbGwgYmUgYWJsZSwgTyBjb25zY3JpcHQgZmF0aGVycywgc28gdG8gYmVoYXZlIG15c2VsZiBpbiB0aGlzIG1hZ2lzdHJhY3ksCiAgICAgICBhcyB0byBiZSBhYmxlIHRvIHJlc3RyYWluIGFueSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgd2hvIGlzIGhvc3RpbGUgdG8gdGhlCiAgICAgICByZXB1YmxpYyzigJR0byBkZXNwaXNlIGFueSBvbmUgd2hvIGlzIGhvc3RpbGUgdG8gbXlzZWxmLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW1pZCBhbGwgdGhpcwogICAgICAgY29tbW90aW9uIGFuZCBhZ2l0YXRpb24gb2YgbWluZHMgYW5kIGNpcmN1bXN0YW5jZXMsIHdoZW4gdGhlIHZvaWNlIGFuZCBhdXRob3JpdHkgb2YgdGhlCiAgICAgICBjb25zdWwgaGFzIHN1ZGRlbmx5LCBmcm9tIGFtaWQgc3VjaCBncmVhdCBkYXJrbmVzcywgZGF3bmVkIG9uIHRoZSBSb21hbiBwZW9wbGU7IHdoZW4gaXQgaGFzCiAgICAgICBzaG93biB0aGF0IG5vdGhpbmcgbmVlZCBiZSBmZWFyZWQ7IHRoYXQgbm8gcmVndWxhciBhcm15LCBubyBiYW5kIG9mIGV4dGVtcG9yZSBydWZmaWFucywgbm8KICAgICAgIGNvbG9ueSwgbm8gc2FsZSBvZiB0aGUgcmV2ZW51ZXMsIG5vIG5ldyBvZiBjb21tYW5kLCBubyByZWlnbiBvZiBkZWNlbXZpcnMsIG5vIG5ldyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gb3Igb3Bwb3NpdGlvbiBzZWF0IG9mIGVtcGlyZSwgd2lsbCBiZSBhbGxvd2VkIHRvIGV4aXN0CiAgICAgICB3aGlsZSB3ZSBhcmUgY29uc3VsczsgdGhhdCB0aGUgZ3JlYXRlc3QgdHJhbnF1aWxsaXR5IG9mIHBlYWNlIGFuZCBlYXNlIHdpbGwgYmUgc2VjdXJlZDsgdGhlbiwKICAgICAgIG5vIGRvdWJ0LCB3ZSBzaGFsbCBoYXZlIG11Y2ggcmVhc29uIHRvIGVhciB0aGF0IHRoaXMgYmVhdXRpZnVsIGFncmFyaWFuIGxhdyBvZiB5b3VycyB3aWxsCiAgICAgICBhcHBlYXIgcG9wdWxhci4gPC90cmFuc2xhdGlvbj4="
translation['1.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIGRpc3BsYXllZCB0aGUgd2lja2VkbmVzcwogICAgICAgb2YgeW91ciBjb3Vuc2VscywgdGhlIGRpc2hvbmVzdHkgb2YgeW91ciBsYXcsIGFuZCB0aGUgdHJlYWNoZXJ5IHdoaWNoIGlzIHBsYW5uZWQgYnkgdGhvc2UKICAgICAgIHBvcHVsYXIgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSBhZ2FpbnN0IHRoZSBSb21hbiBwZW9wbGU7IHRoZW4sIEkgc3VwcG9zZSwgSSBzaGFsbCBoYXZlIHJlYXNvbgogICAgICAgdG8gZmVhciB0aGF0IEkgc2hhbGwgbm90IGJlIGFsbG93ZWQgdG8gYXBwZWFyIGluIHRoZSBhc3NlbWJseSwgZm9yIHRoZSBwdXJwb3NlIG9mIG9wcG9zaW5nCiAgICAgICB5b3U7IGVzcGVjaWFsbHkgd2hlbiBJIGhhdmUgZGV0ZXJtaW5lZCBhbmQgcmVzb2x2ZWQgc28gdG8gY29uZHVjdCBteXNlbGYgaW4gbXkgY29uc3Vsc2hpcCwKICAgICAgIChhbmQgdGhlIGR1dGllcyBvZiB0aGUgY29uc3Vsc2hpcCBjYW5ub3QgYmUgZGlzY2hhcmdlZCB3aXRoIGRpZ25pdHkgYW5kIGZyZWVkb20sIGluIGFueSBvdGhlcgogICAgICAgbWFubmVyLCkgYXMgbmVpdGhlciB0byBkZXNpcmUgYW55IHByb3ZpbmNlLCBub3IgaG9ub3VyLCBub3IgZGlnbml0eSBub3IgYWR2YW50YWdlIG5vcgogICAgICAgYW55dGhpbmcgd2hhdGV2ZXIgd2hpY2ggY2FuIGhhdmUgYW55IGhpbmRyYW5jZSB0aHJvd24gaW4gaXRzIHdheSBieSBhbnkgdHJpYnVuZSBvZiB0aGUKICAgICAgIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['1.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGNvbnN1bCBzdGF0ZXMsIGluIGZ1bGwgc2VuYXRlLCBvbiB0aGUgY2FsZW5kcwogICAgICAgb2YgSmFudWFyeSwgdGhhdCBpZiB0aGUgcHJlc2VudCBjb25kaXRpb24gb2YgdGhlIHJlcHVibGljIGNvbnRpbnVlcywgYW5kIGlmIG5vIG5ldyBldmVudAogICAgICAgYXJpc2VzLCBvbiBhY2NvdW50IG9mIHdoaWNoIGhlIGNhbm5vdCB3aXRoIGhvbm91ciBhdm9pZCBpdCwgaGUgd2lsbCBub3QgZ28gdG8gYW55IHByb3ZpbmNlLgogICAgICAgQnkgdGhhdCBtZWFucyBJIHNoYWxsIGJlIGFibGUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHNvIHRvIGJlaGF2ZSBteXNlbGYgaW4gdGhpcyBtYWdpc3RyYWN5LAogICAgICAgYXMgdG8gYmUgYWJsZSB0byByZXN0cmFpbiBhbnkgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHdobyBpcyBob3N0aWxlIHRvIHRoZQogICAgICAgcmVwdWJsaWMs4oCUdG8gZGVzcGlzZSBhbnkgb25lIHdobyBpcyBob3N0aWxlIHRvIG15c2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['1.26.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBpbiB0aGUgbmFtZSBvZiB0aGUgaW1tb3J0YWwgZ29kcyEgSSBlbnRyZWF0IHlvdSwgcmVjb2xsZWN0IHlvdXJzZWx2ZXMsIE8KICAgICAgIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGU7IGRlc2VydCB0aG9zZSBtZW4gYnkgd2hvbSwgaW4gYSBzaG9ydCB0aW1lLCB1bmxlc3MgeW91IHRha2UgZ3JlYXQKICAgICAgIGNhcmUsIHlvdSB3aWxsIHlvdXJzZWx2ZXMgYmUgZGVzZXJ0ZWQuIENvbnNwaXJlIHdpdGggdXM7IGFncmVlIHdpdGggYWxsIHZpcnR1b3VzIG1lbiBkZWZlbmQKICAgICAgIG91ciBjb21tb24gcmVwdWJsaWMgd2l0aCBvbmUgY29tbW9uIHplYWwgYW5kIGFmZmVjdGlvbi4gVGhlcmUgYXJlIG1hbnkgc2VjcmV0IHdvdW5kcwogICAgICAgc3VzdGFpbmVkIGJ5IHRoZSByZXB1YmxpYy4gVGhlcmUgYXJlIG1hbnkgbWlzY2hpZXZvdXMgY291bnNlbHMgb2YgYWJhbmRvbmVkIGNpdGl6ZW5zIGRlc2lnbmVkCiAgICAgICBhZ2FpbnN0IGhlci4gVGhlcmUgaXMgbm8gZXh0ZXJuYWwgZGFuZ2VyLiBUaGVyZSBpcyBubyBraW5nIG5vIG5hdGlvbiwgbm8gcGVvcGxlIGluIHRoZSB3b3JsZAogICAgICAgd2hvbSB3ZSBuZWVkIGZlYXIuIFRoZSBldmlsIGlzIGNvbmZpbmVkIHdpdGhpbiBvdXIgb3duIHdhbGxzIGludGVybmFsIGFuZCBkb21lc3RpYyB2ZXJ5IG9uZQogICAgICAgb2YgdXMgdG8gdGhlIGJlc3Qgb2YgaGlzIHBvd2VyIG91Z2h0IHRvIHJlc2lzdCBhbmQgdG8gcmVtZWR5IHRoaXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IG1pc3Rha2UgaWYgeW91IHRoaW5rIHRoYXQgdGhlIHNlbmF0ZSBhcHByb3ZlcyBvZiB3aGF0IGlzIHNhaWQgYnkgbWUsCiAgICAgICBidXQgdGhhdCB0aGUgaW5jbGluYXRpb25zIG9mIHRoZSBwZW9wbGUgYXJlIGRpZmZlcmVudC4gQWxsIG1lbiwgd2hvIHdpc2ggdG8gYmUgc2FmZQogICAgICAgdGhlbXNlbHZlcywgd2lsbCBmb2xsb3cgdGhlIGF1dGhvcml0eSBvZiB0aGUgY29uc3VsLCBhIG1hbiB1bmluZmx1ZW5jZWQgYnkgZXZpbCBwYXNzaW9uOyBmcmVlCiAgICAgICBmcm9tIGFsbCBzdXNwaWNpb24gb2YgZ3VpbHQ7IGNhdXRpb3VzIGluIGRhbmdlcjsgbm90IGZlYXJmdWwgaW4gY29udGVzdC4gQnV0IGlmIGFueSBvbmUgb2YKICAgICAgIHlvdSBjaGVyaXNoZXMgYSBob3BlIHRoYXQgaGUgbWF5IGJlIGFibGUgaW4gYSB0dXJidWxlbnQgc3RhdGUgb2YgYWZmYWlycyB0byBwcm9tb3RlIGhpcyBvd24KICAgICAgIGludGVyZXN0cywgZmlyc3Qgb2YgYWxsLCBsZXQgaGltIGdpdmUgdXAgaG9waW5nIGFueSBzdWNoIHRoaW5nIGFzIGxvbmcgYXMgSSBhbSBjb25zdWwuIEluIHRoZQogICAgICAgbmV4dCBwbGFjZSwgbGV0IGhpbSB0YWtlIG1lIG15c2VsZiBhcyBhIHByb29m4oCUKG1lIHdob20gaGUgc2VlcyBub3cgY29uc3VsLCB0aG91Z2gKICAgICAgIGJvcm4gb25seSBpbiB0aGUgZXF1ZXN0cmlhbiByYW5rKeKAlG9mIHdoYXQgY291cnNlIG9mIGxpZmUgbW9zdCBlYXNpbHkgY29uZHVjdHMKICAgICAgIHZpcnR1b3VzIG1lbiB0byBob25vdXIgYW5kIGRpZ25pdHkuIEJ1dCBpZiB5b3UsIE8gY29uc2NyaXB0IGZhdGhlciwgYXNzaXN0IG1lIHdpdGggeW91ciB6ZWFsCiAgICAgICBhbmQgZW5lcmd5IGluIGRlZmVuZGluZyBvdXIgY29tbW9uIGRpZ25pdHksIHRoZW4sIGluIHRydXRoLCBJIHNoYWxsIGFjY29tcGxpc2ggdGhhdCBvZiB3aGljaAogICAgICAgb3VyIHJlcHVibGljIGlzIGF0IHByZXNlbnQgaW4gdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIG5lZWQuIEkgc2hhbGwgbWFrZSB0aGUgYXV0aG9yaXR5IG9mIHRoaXMKICAgICAgIG9yZGVyLCB3aGljaCBleGlzdGVkIHNvIGxvbmcgYW1vbmcgb3VyIGFuY2VzdG9ycywgYXBwZWFyIGFmdGVyIGEgbG9uZyBpbnRlcnZhbCB0byBiZSBhZ2FpbgogICAgICAgcmVzdG9yZWQgdG8gdGhlIHJlcHVibGljLjwvcD4KCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.27'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEl0IGlzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgY3VzdG9tcyBhbmQgZXN0YWJsaXNoZWQgdXNhZ2VzCiAgICAgICBvZiBvdXIgYW5jZXN0b3JzLCBPIFJvbWFucywgdGhhdCB0aG9zZSB3aG8sIGJ5IHlvdXIga2luZG5lc3MsIGhhdmUgb3ZlcnRha2VuIHRoZSBpbWFnZXMgb2YKICAgICAgIHRoZWlyIGZhbWlseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPuKAnFRob3NlIFJvbWFucyB3aG8gaGFkIHBhc3NlZCB0aHJvdWdoIG9uZSBvZiB0aGUKICAgICAgICBoaWdoIG9mZmljZXMgb2YgYWVkaWxlcywgcHJhZXRvciwgb3IgY29uc3VsIHdlcmUgYWxsb3dlZCB0byBoYXZlIHRoZWlyIGxpa2VuZXNzZXMgaGFuZGVkCiAgICAgICAgZG93biB0byBwb3N0ZXJpdHkuIFRoZXNlIGxpa2VuZXNzZXMgd2VyZSwgYWNjb3JkaW5nIHRvIENhc2F1Ym9uLCBidXN0czsgYnV0IGFjY29yZGluZyB0bwogICAgICAgIFNjaHdlaWdoYXVzZXIsIG1hc2tzOyB0aGV5IHdlcmUga2VwdCBpbiB0aGUgaGFsbCBvZiB0aGUgaG91c2UsIGluIG5pY2hlcyBhcHByb3ByaWF0ZWQgZm9yCiAgICAgICAgdGhlaXIgcmVjZXB0aW9uLCBhbmQgd2VyZSBicm91Z2h0IGZvcnRoIG9uIG9jY2FzaW9ucyBvZiBmdW5lcmFscywgdG9nZXRoZXIgd2l0aCB0aGVpciByb2JlcwogICAgICAgIG9mIG9mZmljZSwgdG8gaW1wZXJzb25hdGUgdGhlIGRlYWQuIFdob2V2ZXIgaGFkIHN1Y2ggaW1hZ2VzIGluIGhpcyBwb3NzZXNzaW9uIHdhcyA8Zm9yZWlnbiBsYW5nPSJsYSI+bm9iaWxpczwvZm9yZWlnbj4u4oCd4oCUUmlkZGxlLCBMYXQuIERpY3QuIHYuIDxmb3JlaWduIGxhbmc9ImxhIj5JbWFnbzwvZm9yZWlnbj4uPC9ub3RlPiBzaG91bGQsIHRoZSBmaXJzdCB0aW1lIHRoYXQgdGhleSBob2xkIGFuIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUsCiAgICAgICB0YWtlIGFuIG9wcG9ydHVuaXR5IG9mIHVuaXRpbmcgdGhhbmtzIHRvIHlvdSBmb3IgeW91ciBraW5kbmVzcyB3aXRoIGEgcGFuZWd5cmljIG9uIHRoZWlyCiAgICAgICBhbmNlc3RvcnMsIGFuZCBpbiB0aGUgc3BlZWNoIHRoZW4gbWFkZSwgc29tZSBtZW4gYXJlLCBvbiBzb21lIG9jY2FzaW9ucywgZm91bmQgd29ydGh5IG9mIHRoZQogICAgICAgcmFuayBvZiB0aGVpciBhbmNlc3RvcnMuIEJ1dCBtb3N0IG1lbiBvbmx5IGFjY29tcGxpc2ggdGhpcyzigJRuYW1lbHksIHRvIG1ha2UgaXQgc2VlbQogICAgICAgdGhhdCBzbyB2YXN0IGEgZGVidCBpcyBkdWUgdG8gdGhlaXIgYW5jZXN0b3JzLCB0aGF0IHRoZXJlIGlzIHNvbWV0aGluZyBzdGlsbCBsZWZ0IHRvIGJlIHBhaWQKICAgICAgIHRvIHRoZWlyIHBvc3Rlcml0eS48bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEksIGluZGVlZCwgaGF2ZSBubyBvcHBvcnR1bml0eSBvZgogICAgICAgc3BlYWtpbmcgYmVmb3JlIHlvdSBvZiBteSBhbmNlc3RvcnMsIG5vdCBiZWNhdXNlIHRoZXkgd2VyZSBub3Qgc3VjaCBtZW4gYXMgeW91IHNlZSBtZSBhbHNvIHRvCiAgICAgICBiZSwgd2hvIGFtIGJvcm4gb2YgdGhlaXIgYmxvb2QsIGFuZCBlZHVjYXRlZCBpbiB0aGVpciBwcmluY2lwbGVzLCBidXQgYmVjYXVzZSB0aGV5IGhhZCBuZXZlcgogICAgICAgYW55IHNoYXJlIG9mIHBvcHVsYXIgcHJhaXNlLCBvciBvZiB0aGUgbGlnaHQgb2YgaG9ub3VycyBjb25mZXJyZWQgYnkgeW91LiBBbmQgb2YgbXlzZWxmIEkKICAgICAgIGZlYXIgbGVzdCBpdCBtYXkgbG9vayBsaWtlIGFycm9nYW5jZSB0byBzcGVhaywgYW5kIHlldCBsaWtlIGluZ3JhdGl0dWRlIHRvIGJlIHNpbGVudC4KICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpdCBpcyBhIHZlcnkgdHJvdWJsZXNvbWUgdGhpbmcgZm9yIG1lIG15c2VsZiB0bwogICAgICAgZW51bWVyYXRlIHRvIHlvdSB0aGUgcHVyc3VpdHMgYnkgd2hpY2ggSSBoYXZlIGVhcm5lZCB0aGlzIGRpZ25pdHk7IGFuZCwgb24gdGhlIG90aGVyIGhhbmQsIEkKICAgICAgIGNhbm5vdCBwb3NzaWJseSBiZSBzaWxlbnQgYWJvdXQgeW91ciBncmVhdCBraW5kbmVzc2VzIHRvIG1lLiBXaGVyZWZvcmUgSSB3aWxsIGVtcGxveSBhCiAgICAgICByZWFzb25hYmxlIG1vZGVyYXRpb24gaW4gc3BlYWtpbmcsIHNvIGFzIHRvIG1lbnRpb24gdGhlIGtpbmRuZXNzIHdoaWNoIEkgaGF2ZSByZWNlaXZlZCBmcm9tCiAgICAgICB5b3UuIEkgd2lsbCBzcGVhayBzbGlnaHRseSBvZiB0aGUgcmVhc29ucyB3aHkgSSBhbSB0aG91Z2h0IHRvIGhhdmUgZGVzZXJ2ZWQgdGhlIGdyZWF0ZXN0CiAgICAgICBob25vdXIgeW91IGNhbiBjb25mZXIsIGFuZCB5b3VyIHNpbmd1bGFybHkgZmF2b3VyYWJsZSBqdWRnbWVudCBvZiBtZS48Z2FwIGRlc2M9IioqKioqIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBJdCBpcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGN1c3RvbXMgYW5kIGVzdGFibGlzaGVkIHVzYWdlcwogICAgICAgb2Ygb3VyIGFuY2VzdG9ycywgTyBSb21hbnMsIHRoYXQgdGhvc2Ugd2hvLCBieSB5b3VyIGtpbmRuZXNzLCBoYXZlIG92ZXJ0YWtlbiB0aGUgaW1hZ2VzIG9mCiAgICAgICB0aGVpciBmYW1pbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPuKAnFRob3NlIFJvbWFucyB3aG8gaGFkIHBhc3NlZCB0aHJvdWdoIG9uZSBvZiB0aGUKICAgICAgICBoaWdoIG9mZmljZXMgb2YgYWVkaWxlcywgcHJhZXRvciwgb3IgY29uc3VsIHdlcmUgYWxsb3dlZCB0byBoYXZlIHRoZWlyIGxpa2VuZXNzZXMgaGFuZGVkCiAgICAgICAgZG93biB0byBwb3N0ZXJpdHkuIFRoZXNlIGxpa2VuZXNzZXMgd2VyZSwgYWNjb3JkaW5nIHRvIENhc2F1Ym9uLCBidXN0czsgYnV0IGFjY29yZGluZyB0bwogICAgICAgIFNjaHdlaWdoYXVzZXIsIG1hc2tzOyB0aGV5IHdlcmUga2VwdCBpbiB0aGUgaGFsbCBvZiB0aGUgaG91c2UsIGluIG5pY2hlcyBhcHByb3ByaWF0ZWQgZm9yCiAgICAgICAgdGhlaXIgcmVjZXB0aW9uLCBhbmQgd2VyZSBicm91Z2h0IGZvcnRoIG9uIG9jY2FzaW9ucyBvZiBmdW5lcmFscywgdG9nZXRoZXIgd2l0aCB0aGVpciByb2JlcwogICAgICAgIG9mIG9mZmljZSwgdG8gaW1wZXJzb25hdGUgdGhlIGRlYWQuIFdob2V2ZXIgaGFkIHN1Y2ggaW1hZ2VzIGluIGhpcyBwb3NzZXNzaW9uIHdhcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub2JpbGlzPC9mb3JlaWduPi7igJ3igJRSaWRkbGUsIExhdC4gRGljdC4gdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+SW1hZ288L2ZvcmVpZ24+Ljwvbm90ZT4gc2hvdWxkLCB0aGUgZmlyc3QgdGltZSB0aGF0IHRoZXkgaG9sZCBhbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlLAogICAgICAgdGFrZSBhbiBvcHBvcnR1bml0eSBvZiB1bml0aW5nIHRoYW5rcyB0byB5b3UgZm9yIHlvdXIga2luZG5lc3Mgd2l0aCBhIHBhbmVneXJpYyBvbiB0aGVpcgogICAgICAgYW5jZXN0b3JzLCBhbmQgaW4gdGhlIHNwZWVjaCB0aGVuIG1hZGUsIHNvbWUgbWVuIGFyZSwgb24gc29tZSBvY2Nhc2lvbnMsIGZvdW5kIHdvcnRoeSBvZiB0aGUKICAgICAgIHJhbmsgb2YgdGhlaXIgYW5jZXN0b3JzLiBCdXQgbW9zdCBtZW4gb25seSBhY2NvbXBsaXNoIHRoaXMs4oCUbmFtZWx5LCB0byBtYWtlIGl0IHNlZW0KICAgICAgIHRoYXQgc28gdmFzdCBhIGRlYnQgaXMgZHVlIHRvIHRoZWlyIGFuY2VzdG9ycywgdGhhdCB0aGVyZSBpcyBzb21ldGhpbmcgc3RpbGwgbGVmdCB0byBiZSBwYWlkCiAgICAgICB0byB0aGVpciBwb3N0ZXJpdHkuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm9iaWxpczwvZm9yZWlnbj4u4oCd4oCUUmlkZGxlLCBMYXQuIERpY3QuIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkltYWdvPC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['2.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBJLCBpbmRlZWQsIGhhdmUgbm8gb3Bwb3J0dW5pdHkgb2YKICAgICAgIHNwZWFraW5nIGJlZm9yZSB5b3Ugb2YgbXkgYW5jZXN0b3JzLCBub3QgYmVjYXVzZSB0aGV5IHdlcmUgbm90IHN1Y2ggbWVuIGFzIHlvdSBzZWUgbWUgYWxzbyB0bwogICAgICAgYmUsIHdobyBhbSBib3JuIG9mIHRoZWlyIGJsb29kLCBhbmQgZWR1Y2F0ZWQgaW4gdGhlaXIgcHJpbmNpcGxlcywgYnV0IGJlY2F1c2UgdGhleSBoYWQgbmV2ZXIKICAgICAgIGFueSBzaGFyZSBvZiBwb3B1bGFyIHByYWlzZSwgb3Igb2YgdGhlIGxpZ2h0IG9mIGhvbm91cnMgY29uZmVycmVkIGJ5IHlvdS4gQW5kIG9mIG15c2VsZiBJCiAgICAgICBmZWFyIGxlc3QgaXQgbWF5IGxvb2sgbGlrZSBhcnJvZ2FuY2UgdG8gc3BlYWssIGFuZCB5ZXQgbGlrZSBpbmdyYXRpdHVkZSB0byBiZSBzaWxlbnQuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaXQgaXMgYSB2ZXJ5IHRyb3VibGVzb21lIHRoaW5nIGZvciBtZSBteXNlbGYgdG8KICAgICAgIGVudW1lcmF0ZSB0byB5b3UgdGhlIHB1cnN1aXRzIGJ5IHdoaWNoIEkgaGF2ZSBlYXJuZWQgdGhpcyBkaWduaXR5OyBhbmQsIG9uIHRoZSBvdGhlciBoYW5kLCBJCiAgICAgICBjYW5ub3QgcG9zc2libHkgYmUgc2lsZW50IGFib3V0IHlvdXIgZ3JlYXQga2luZG5lc3NlcyB0byBtZS4gV2hlcmVmb3JlIEkgd2lsbCBlbXBsb3kgYQogICAgICAgcmVhc29uYWJsZSBtb2RlcmF0aW9uIGluIHNwZWFraW5nLCBzbyBhcyB0byBtZW50aW9uIHRoZSBraW5kbmVzcyB3aGljaCBJIGhhdmUgcmVjZWl2ZWQgZnJvbQogICAgICAgeW91LiBJIHdpbGwgc3BlYWsgc2xpZ2h0bHkgb2YgdGhlIHJlYXNvbnMgd2h5IEkgYW0gdGhvdWdodCB0byBoYXZlIGRlc2VydmVkIHRoZSBncmVhdGVzdAogICAgICAgaG9ub3VyIHlvdSBjYW4gY29uZmVyLCBhbmQgeW91ciBzaW5ndWxhcmx5IGZhdm91cmFibGUganVkZ21lbnQgb2YgbWUuPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IioqKioqIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEFmdGVyIGEgdmVyeSBsb25nIGludGVydmFsLCBhbG1vc3QgYmV5b25kIHRoZSBtZW1vcnkgb2YKICAgICAgIG91ciB0aW1lcywgeW91IGhhdmUgZm9yIHRoZSBmaXJzdCB0aW1lIG1hZGUgbWUsIGEgbmV3IG1hbiwgY29uc3VsOyBhbmQgeW91IGhhdmUgb3BlbmVkIHRoYXQKICAgICAgIHJhbmsgd2hpY2ggdGhlIG5vYmxlcyBoYXZlIGhlbGQgc3RyZW5ndGhlbmVkIGJ5IGd1YXJkcywgYW5kIGZlbmNlZCByb3VuZCBpbiBldmVyeSBwb3NzaWJsZQogICAgICAgbWFubmVyLCBpbiBteSBpbnN0YW5jZSBmaXJzdCwgYW5kIGhhdmUgcmVzb2x2ZWQgdGhhdCBpdCBzaG91bGQgaW4gZnV0dXJlIGJlIG9wZW4gdG8gdmlydHVlLgogICAgICAgTm9yIGhhdmUgeW91IG9ubHkgbWFkZSBtZSBjb25zdWwsIHRob3VnaCB0aGF0IGlzIG9mIGl0c2VsZiBhIG1vc3QgaG9ub3VyYWJsZSB0aGluZywgYnV0IHlvdQogICAgICAgaGF2ZSBtYWRlIG1lIHNvIGluIHN1Y2ggYSB3YXkgYXMgdmVyeSBmZXcgbm9ibGVzIGluIHRoaXMgY2l0eSBoYXZlIGV2ZXIgYmVlbiBtYWRlIGNvbnN1bHMKICAgICAgIGJlZm9yZSBpbiwgYW5kIG5vIG5ldyBtYW4gd2hhdGV2ZXIgYmVmb3JlIG1lLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBZnRlciBhIHZlcnkgbG9uZyBpbnRlcnZhbCwgYWxtb3N0IGJleW9uZCB0aGUgbWVtb3J5IG9mCiAgICAgICBvdXIgdGltZXMsIHlvdSBoYXZlIGZvciB0aGUgZmlyc3QgdGltZSBtYWRlIG1lLCBhIG5ldyBtYW4sIGNvbnN1bDsgYW5kIHlvdSBoYXZlIG9wZW5lZCB0aGF0CiAgICAgICByYW5rIHdoaWNoIHRoZSBub2JsZXMgaGF2ZSBoZWxkIHN0cmVuZ3RoZW5lZCBieSBndWFyZHMsIGFuZCBmZW5jZWQgcm91bmQgaW4gZXZlcnkgcG9zc2libGUKICAgICAgIG1hbm5lciwgaW4gbXkgaW5zdGFuY2UgZmlyc3QsIGFuZCBoYXZlIHJlc29sdmVkIHRoYXQgaXQgc2hvdWxkIGluIGZ1dHVyZSBiZSBvcGVuIHRvIHZpcnR1ZS4KICAgICAgIE5vciBoYXZlIHlvdSBvbmx5IG1hZGUgbWUgY29uc3VsLCB0aG91Z2ggdGhhdCBpcyBvZiBpdHNlbGYgYSBtb3N0IGhvbm91cmFibGUgdGhpbmcsIGJ1dCB5b3UKICAgICAgIGhhdmUgbWFkZSBtZSBzbyBpbiBzdWNoIGEgd2F5IGFzIHZlcnkgZmV3IG5vYmxlcyBpbiB0aGlzIGNpdHkgaGF2ZSBldmVyIGJlZW4gbWFkZSBjb25zdWxzCiAgICAgICBiZWZvcmUgaW4sIGFuZCBubyBuZXcgbWFuIHdoYXRldmVyIGJlZm9yZSBtZS4gPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yLCBpbiB0cnV0aCwgaWYgeW91IHBsZWFzZSB0byByZWNvbGxlY3QsIHlvdSB3aWxsIGZpbmQgdGhhdCB0aG9zZSBuZXcgbWVuIHdobyBoYXZlIGF0IGFueQogICAgICAgdGltZSBiZWVuIG1hZGUgY29uc3VscyB3aXRob3V0IGEgcmVwdWxzZSwgaGF2ZSBiZWVuIGVsZWN0ZWQgYWZ0ZXIgbG9uZyB0b2lsLCBhbmQgb24gc29tZQogICAgICAgY3JpdGljYWwgZW1lcmdlbmN5LCBoYXZpbmcgc3Rvb2QgZm9yIGl0IG1hbnkgeWVhcnMgYWZ0ZXIgdGhleSBoYWQgYmVlbiBwcmFldG9ycywgYW5kIGEgZ29vZAogICAgICAgZGVhbCBsYXRlciB0aGFuIHRoZXkgbWlnaHQgaGF2ZSBkb25lIGFjY29yZGluZyB0byB0aGUgbGF3cyByZWd1bGF0aW5nIHRoZSBhZ2Ugb2YgY2FuZGlkYXRlcwogICAgICAgZm9yIHRoZSBvZmZpY2U7IGJ1dCB0aGF0IHRob3NlIHdobyBzdG9vZCBmb3IgaXQgaW4gdGhlaXIgcmVndWxhciB5ZWFyIHdlcmUgbm90IGVsZWN0ZWQKICAgICAgIHdpdGhvdXQgYSByZXB1bHNlOyB0aGF0IEkgYW0gdGhlIG9ubHkgb25lIG9mIGFsbCB0aGUgbmV3IG1lbiB3aG9tIHdlIGNhbiByZW1lbWJlciB3aG8gaGF2ZQogICAgICAgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwIHRoZSBmaXJzdCBtb21lbnQgdGhhdCBieSBsYXcgSSBjb3VsZCzigJR3aG8gaGF2ZSBiZWVuCiAgICAgICBlbGVjdGVkIGNvbnN1bCB0aGUgZmlyc3QgdGltZSB0aGF0IEkgaGF2ZSBzdG9vZDsgc28gdGhhdCB0aGlzIGhvbm91ciB3aGljaCB5b3UgaGF2ZSBjb25mZXJyZWQKICAgICAgIG9uIG1lLCBoYXZpbmcgYmVlbiBzb3VnaHQgYnkgbWUgYXQgdGhlIHByb3BlciB0aW1lLCBhcHBlYXJzIG5vdCB0byBoYXZlIGJlZW4gZmlsY2hlZCBieSBtZSBvbgogICAgICAgdGhlIG9jY2FzaW9uIG9mIHNvbWUgdW5wb3B1bGFyIGNhbmRpZGF0ZSBvZmZlcmluZyBoaW1zZWxmLOKAlG5vdCB0byBoYXZlIGJlZW4gZ2FpbmVkCiAgICAgICBieSBsb25nIHBlcnNldmVyYW5jZSBpbiBhc2tpbmcgZm9yIGl0LCBidXQgdG8gaGF2ZSBiZWVuIGZhaXJseSBlYXJuZWQgYnkgbXkgd29ydGggYW5kCiAgICAgICBkaWduaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcywgYWxzbywgaXMgYSBtb3N0IGhvbm9yYWJsZSB0aGluZyBmb3IgbWUsIE8KICAgICAgIFJvbWFucywgd2hpY2ggSSBtZW50aW9uZWQgYSBmZXcgbWludXRlcyBhZ28s4oCUdGhhdCBJIGFtIHRoZSBmaXJzdCBuZXcgbWFuIGZvciBtYW55CiAgICAgICB5ZWFycyBvbiB3aG9tIHlvdSBoYXZlIGNvbmZlcnJlZCB0aGlzIGhvbm91cizigJR0aGF0IHlvdSBoYXZlIGNvbmZlcnJlZCBpdCBvbiBteQogICAgICAgZmlyc3QgYXBwbGljYXRpb24sIGluIG15IHByb3BlciB5ZWFyLiBCdXQgeWV0IG5vdGhpbmcgY2FuIGJlIG1vcmUgc3BsZW5kaWQgb3IgbW9yZSBob25vdXJhYmxlCiAgICAgICBmb3IgbWUgdGhhbiB0aGlzIGNpcmN1bXN0YW5jZSzigJR0aGF0IGF0IHRoZSBjb21pdGlhIGF0IHdoaWNoIEkgd2FzIGVsZWN0ZWQgeW91CiAgICAgICBkZWxpdmVyZWQgbm90IHlvdXIgYmFsbG90LCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPjxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3BlcnNOYW1lPiBzYXlzICh3aXRoIGV4cHJlc3MgcmVmZXJlbmNlIHRvIHRoaXMgcGFzc2FnZSwpIOKAnHRoZSBtZXRob2QKICAgICAgICBvZiBjaG9vc2luZyBjb25zdWxzIHdhcyBub3QgYnkgYW4gb3BlbiB2b3RlLCBidXQgYnkgYSBraW5kIG9mIGJhbGxvdCBvciBsaXR0bGUgdGlja2V0cyBvZgogICAgICAgIHdvb2QgZGlzdHJpYnV0ZWQgdG8gdGhlIGNpdGl6ZW5zIHdpdGggdGhlIG5hbWVzIG9mIHRoZSBjYW5kaWRhdGVzIHNldmVyYWxseSBpbnNjcmliZWQgb24KICAgICAgICBlYWNoOyBidXQgaW4gQ2ljZXJvJ3MgY2FzZSwgdGhlIHBlb3BsZSB3ZXJlIG5vdCBjb250ZW50IHdpdGggdGhpcyBzZWNyZXQgYW5kIHNpbGVudCB3YXkgb2YKICAgICAgICB0ZXN0aWZ5aW5nIHRoZWlyIGluY2xpbmF0aW9ucyBidXQgYmVmb3JlIHRoZXkgY2FtZSB0byBhbnkgc2NydXRpbnksIGxvdWRseSBhbmQgdW5pdmVyc2FsbHkKICAgICAgICBwcm9jbGFpbWVkIENpY2VybyB0aGUgZmlyc3QgY29uc3VsOyBzbyB0aGF0LCBhcyBoZSBoaW1zZWxmIGRlY2xhcmVkIGluIGhpcyBzcGVlY2ggdG8gdGhlbQogICAgICAgIGFmdGVyIGhpcyBlbGVjdGlvbiBoZSB3YXMgbm90IGNob3NlbiBieSB0aGUgdm90ZXMgb2YgcGFydGljdWxhciBjaXRpemVucywgYnV0IGJ5IHRoZSBjb21tb24KICAgICAgICBzdWZmcmFnZSBvZiB0aGUgY2l0eTsgbm9yIGRlY2xhcmVkIGJ5IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGJ1dCBvZiB0aGUgd2hvbGUgUm9tYW4KICAgICAgICBwZW9wbGUu4oCdPC9ub3RlPiB0aGUgdmluZGljYXRpb24gb2YgeW91ciBzaWxlbnQgbGliZXJ0eSwgYnV0IHlvdXIgZWFnZXIgdm9pY2VzIGFzCiAgICAgICB0aGUgd2l0bmVzc2VzIG9mIHlvdXIgZ29vZC13aWxsIHRvd2FyZHMsIGFuZCB6ZWFsIGZvciBtZS4gQW5kIHNvIGl0IHdhcyBub3QgdGhlIGxhc3QgdHJpYmUgb2YKICAgICAgIHRoZSB2b3RlcywgYnV0IHRoZSB2ZXJ5IGZpcnN0IG1vbWVudCBvZiB5b3VyIG1lZXRpbmcs4oCUaXQgd2FzIG5vdCB0aGUgc2luZ2xlIHZvaWNlcwogICAgICAgb2YgdGhlIGNyaWVycywgYnV0IHRoZSB3aG9sZSBSb21hbiBwZW9wbGUgd2l0aCBvbmUgdm9pY2UgdGhhdCBkZWNsYXJlZCBtZSBjb25zdWwuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzLCBhbHNvLCBpcyBhIG1vc3QgaG9ub3JhYmxlIHRoaW5nIGZvciBtZSwgTwogICAgICAgUm9tYW5zLCB3aGljaCBJIG1lbnRpb25lZCBhIGZldyBtaW51dGVzIGFnbyzigJR0aGF0IEkgYW0gdGhlIGZpcnN0IG5ldyBtYW4gZm9yIG1hbnkKICAgICAgIHllYXJzIG9uIHdob20geW91IGhhdmUgY29uZmVycmVkIHRoaXMgaG9ub3VyLOKAlHRoYXQgeW91IGhhdmUgY29uZmVycmVkIGl0IG9uIG15CiAgICAgICBmaXJzdCBhcHBsaWNhdGlvbiwgaW4gbXkgcHJvcGVyIHllYXIuIEJ1dCB5ZXQgbm90aGluZyBjYW4gYmUgbW9yZSBzcGxlbmRpZCBvciBtb3JlIGhvbm91cmFibGUKICAgICAgIGZvciBtZSB0aGFuIHRoaXMgY2lyY3Vtc3RhbmNlLOKAlHRoYXQgYXQgdGhlIGNvbWl0aWEgYXQgd2hpY2ggSSB3YXMgZWxlY3RlZCB5b3UKICAgICAgIGRlbGl2ZXJlZCBub3QgeW91ciBiYWxsb3QsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlkZGxldG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHNheXMgKHdpdGggZXhwcmVzcyByZWZlcmVuY2UgdG8gdGhpcyBwYXNzYWdlLCkg4oCcdGhlIG1ldGhvZAogICAgICAgIG9mIGNob29zaW5nIGNvbnN1bHMgd2FzIG5vdCBieSBhbiBvcGVuIHZvdGUsIGJ1dCBieSBhIGtpbmQgb2YgYmFsbG90IG9yIGxpdHRsZSB0aWNrZXRzIG9mCiAgICAgICAgd29vZCBkaXN0cmlidXRlZCB0byB0aGUgY2l0aXplbnMgd2l0aCB0aGUgbmFtZXMgb2YgdGhlIGNhbmRpZGF0ZXMgc2V2ZXJhbGx5IGluc2NyaWJlZCBvbgogICAgICAgIGVhY2g7IGJ1dCBpbiBDaWNlcm8ncyBjYXNlLCB0aGUgcGVvcGxlIHdlcmUgbm90IGNvbnRlbnQgd2l0aCB0aGlzIHNlY3JldCBhbmQgc2lsZW50IHdheSBvZgogICAgICAgIHRlc3RpZnlpbmcgdGhlaXIgaW5jbGluYXRpb25zIGJ1dCBiZWZvcmUgdGhleSBjYW1lIHRvIGFueSBzY3J1dGlueSwgbG91ZGx5IGFuZCB1bml2ZXJzYWxseQogICAgICAgIHByb2NsYWltZWQgQ2ljZXJvIHRoZSBmaXJzdCBjb25zdWw7IHNvIHRoYXQsIGFzIGhlIGhpbXNlbGYgZGVjbGFyZWQgaW4gaGlzIHNwZWVjaCB0byB0aGVtCiAgICAgICAgYWZ0ZXIgaGlzIGVsZWN0aW9uIGhlIHdhcyBub3QgY2hvc2VuIGJ5IHRoZSB2b3RlcyBvZiBwYXJ0aWN1bGFyIGNpdGl6ZW5zLCBidXQgYnkgdGhlIGNvbW1vbgogICAgICAgIHN1ZmZyYWdlIG9mIHRoZSBjaXR5OyBub3IgZGVjbGFyZWQgYnkgdGhlIHZvaWNlIG9mIHRoZSBjcmllciwgYnV0IG9mIHRoZSB3aG9sZSBSb21hbgogICAgICAgIHBlb3BsZS7igJ08L25vdGU+IHRoZSB2aW5kaWNhdGlvbiBvZiB5b3VyIHNpbGVudCBsaWJlcnR5LCBidXQgeW91ciBlYWdlciB2b2ljZXMgYXMKICAgICAgIHRoZSB3aXRuZXNzZXMgb2YgeW91ciBnb29kLXdpbGwgdG93YXJkcywgYW5kIHplYWwgZm9yIG1lLiBBbmQgc28gaXQgd2FzIG5vdCB0aGUgbGFzdCB0cmliZSBvZgogICAgICAgdGhlIHZvdGVzLCBidXQgdGhlIHZlcnkgZmlyc3QgbW9tZW50IG9mIHlvdXIgbWVldGluZyzigJRpdCB3YXMgbm90IHRoZSBzaW5nbGUgdm9pY2VzCiAgICAgICBvZiB0aGUgY3JpZXJzLCBidXQgdGhlIHdob2xlIFJvbWFuIHBlb3BsZSB3aXRoIG9uZSB2b2ljZSB0aGF0IGRlY2xhcmVkIG1lIGNvbnN1bC4gPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3BlcnNOYW1lPiBzYXlzICh3aXRoIGV4cHJlc3MgcmVmZXJlbmNlIHRvIHRoaXMgcGFzc2FnZSwpIOKAnHRoZSBtZXRob2QKICAgICAgICBvZiBjaG9vc2luZyBjb25zdWxzIHdhcyBub3QgYnkgYW4gb3BlbiB2b3RlLCBidXQgYnkgYSBraW5kIG9mIGJhbGxvdCBvciBsaXR0bGUgdGlja2V0cyBvZgogICAgICAgIHdvb2QgZGlzdHJpYnV0ZWQgdG8gdGhlIGNpdGl6ZW5zIHdpdGggdGhlIG5hbWVzIG9mIHRoZSBjYW5kaWRhdGVzIHNldmVyYWxseSBpbnNjcmliZWQgb24KICAgICAgICBlYWNoOyBidXQgaW4gQ2ljZXJvJ3MgY2FzZSwgdGhlIHBlb3BsZSB3ZXJlIG5vdCBjb250ZW50IHdpdGggdGhpcyBzZWNyZXQgYW5kIHNpbGVudCB3YXkgb2YKICAgICAgICB0ZXN0aWZ5aW5nIHRoZWlyIGluY2xpbmF0aW9ucyBidXQgYmVmb3JlIHRoZXkgY2FtZSB0byBhbnkgc2NydXRpbnksIGxvdWRseSBhbmQgdW5pdmVyc2FsbHkKICAgICAgICBwcm9jbGFpbWVkIENpY2VybyB0aGUgZmlyc3QgY29uc3VsOyBzbyB0aGF0LCBhcyBoZSBoaW1zZWxmIGRlY2xhcmVkIGluIGhpcyBzcGVlY2ggdG8gdGhlbQogICAgICAgIGFmdGVyIGhpcyBlbGVjdGlvbiBoZSB3YXMgbm90IGNob3NlbiBieSB0aGUgdm90ZXMgb2YgcGFydGljdWxhciBjaXRpemVucywgYnV0IGJ5IHRoZSBjb21tb24KICAgICAgICBzdWZmcmFnZSBvZiB0aGUgY2l0eTsgbm9yIGRlY2xhcmVkIGJ5IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGJ1dCBvZiB0aGUgd2hvbGUgUm9tYW4KICAgICAgICBwZW9wbGUu4oCdPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['2.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgdGhpbmsgdGhpcyBlbWluZW50IGFuZCB1bnByZWNlZGVudGVkIGtpbmRuZXNzIG9mIHlvdXJzLCBPIFJvbWFucywgb2YgZ3JlYXQgd2VpZ2h0IGFzIGEKICAgICAgIHJld2FyZCBmb3IgbXkgY291cmFnZSwgYW5kIGFzIGEgc291cmNlIG9mIGpveSB0byBtZSwgYnV0IHN0aWxsIG1vcmUgY2FsY3VsYXRlZCB0byBpbXByZXNzIG1lCiAgICAgICB3aXRoIGNhcmUgYW5kIGFueGlldHkuIEZvciwgTyBSb21hbnMsIG1hbnkgYW5kIGdyYXZlIHRob3VnaHRzIG9jY3VweSBteSBtaW5kLCB3aGljaCBhbGxvdyBtZQogICAgICAgYnV0IGxpdHRsZSByZXN0IGRheSBvciBuaWdodC4gRmlyc3QsIHRoZXJlIGlzIGFueGlldHkgYWJvdXQgZGlzY2hhcmdpbmcgdGhlIGR1dGllcyBvZiB0aGUKICAgICAgIGNvbnN1bHNoaXAgd2hpY2ggaXMgYSBkaWZmaWN1bHQgYW5kIGltcG9ydGFudCBidXNpbmVzcyB0byBhbGwgbWVuLCBhbmQgZXNwZWNpYWxseSB0byBtZSBhYm92ZQogICAgICAgYWxsIG90aGVyIG1lbjsgZm9yIGlmIEkgZXJyLCBJIHNoYWxsIG9idGFpbiBubyBwYXJkb27igJRpZiBJIGRvIHdlbGwsIEkgc2hhbGwgZ2V0IGJ1dAogICAgICAgbGl0dGxlIHByYWlzZSwgYW5kIHRoYXQsIHRvbywgZXh0b3J0ZWQgZnJvbSB1bndpbGxpbmcgcGVvcGxl4oCUaWYgSSBhbSBpbiBkb3VidCwgSQogICAgICAgaGF2ZSBubyBmYWl0aGZ1bCBjb3Vuc2Vsb3JzIHRvIHdob20gSSBjYW4gYXBwbHnigJRpZiBJIGFtIGluIGRpZmZpY3VsdHksIEkgaGF2ZSBubwogICAgICAgc3VyZSBhc3Npc3RhbmNlIGZyb20gdGhlIG5vYmxlcyBvbiB3aGljaCBJIGNhbiBkZXBlbmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0LCBpZiBJIGFsb25lIHdlcmUgaW4gZGFuZ2VyLCBJIHdvdWxkIGJlYXIgaXQsIE8gUm9tYW5zLCB3aXRoIG1vcmUgZXF1YW5pbWl0eTsgYnV0IHRoZXJlCiAgICAgICBhcHBlYXJzIHRvIG1lIHRvIGJlIHNvbWUgbWVuIGRldGVybWluZWQsIGlmIHRoZXkgdGhpbmsgdGhhdCBJIGhhdmUgZG9uZSBhbnl0aGluZyB3cm9uZ2x5IG5vdAogICAgICAgb25seSBpbnRlbnRpb25hbGx5LCBidXQgZXZlbiBieSBjaGFuY2UsIHRvIGJsYW1lIGFsbCBvZiB5b3UgZm9yIGhhdmluZyBwcmVmZXJyZWQgbWUgdG8gdGhlCiAgICAgICBub2JsZXMuIEJ1dCBJIHRoaW5rLCBPIFJvbWFucyB0aGF0IEkgb3VnaHQgdG8gZW5kdXJlIGV2ZXJ5dGhpbmcgcmF0aGVyIHRoYW4gbm90IGRpc2NoYXJnZSB0aGUKICAgICAgIGR1dGllcyBvZiBteSBjb25zdWxzaGlwIGluIHN1Y2ggYSBtYW5uZXIsIGFzIGJ5IGFsbCBteSBhY3Rpb25zIGFuZCBjb3Vuc2VscyB0byBjb21wZWwgbWVuIHRvCiAgICAgICBwcmFpc2UgeW91ciBhY3Rpb24gYW5kIGNvdW5zZWwgd2l0aCByZXNwZWN0IHRvIG1lLiBUaGVyZSBpcyBhbHNvIHRoaXMgYWRkZWQgdG8gdGhlIGdyZWF0CiAgICAgICBsYWJvdXIgYW5kIGRpZmZpY3VsdHkgd2hpY2ggSSBzZWUgYmVmb3JlIG1lIGluIGRpc2NoYXJnaW5nIHRoZSBkdXRpZXMgb2YgbXkgb2ZmaWNlLCB0aGF0IEkKICAgICAgIGhhdmUgbWFkZSB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gYWRvcHQgdGhlIHNhbWUgcnVsZSBhbmQgcHJpbmNpcGxlIG9mIGNvbmR1Y3Qgd2hpY2gKICAgICAgIGZvcm1lciBjb25zdWxzIGhhdmU7IHNvbWUgb2Ygd2hvbSBoYXZlIGNhcmVmdWxseSBhdm9pZGVkIGFsbCBhcHByb2FjaCB0byB0aGlzIHBsYWNlLCBhbmQgdGhlCiAgICAgICBzaWdodCBvZiB5b3UsIGFuZCBvdGhlcnMgaGF2ZSBhdCBhbGwgZXZlbnRzIG5vdCBiZWVuIHZlcnkgZm9uZCBvZiBpdC4gQnV0IEkgbm90IG9ubHkgZGVjbGFyZQogICAgICAgaW4gdGhpcyBwbGFjZSB3aGVyZSBpdCBpcyBleGNlZWRpbmdseSBlYXN5IHRvIGRvIGl0LCBidXQgSSBzYWlkIGluIG15IHZlcnkgZmlyc3Qgc3BlZWNoIG9uCiAgICAgICB0aGUgZmlyc3Qgb2YgSmFudWFyeSwgaW4gdGhlIHNlbmF0ZSBpdHNlbGYsIHdoaWNoIGRpZCBub3Qgc2VlbSBsaWtlbHkgdG8gYmUgc28gZmF2b3VyYWJsZSBhCiAgICAgICBwbGFjZSBmb3IgdGhlIGV4cHJlc3Npb24sIHRoYXQgSSB3b3VsZCBiZSBhIGNvbnN1bCBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaXMgaXQgcG9zc2libGUgZm9yIG1lLCBrbm93aW5nLCBhcyBJIGRvLCB0aGF0IEkgaGF2ZSBiZWVuIG1hZGUKICAgICAgIGNvbnN1bCwgbm90IGJ5IHRoZSB6ZWFsIG9mIHRoZSBwb3dlcmZ1bCBjaXRpemVucywgbm9yIGJ5IHRoZSBwcmVwb25kZXJhdGluZyBpbmZsdWVuY2Ugb2YgYQogICAgICAgZmV3IG1lbiwgYnV0IGJ5IHRoZSBkZWxpYmVyYXRlIGp1ZGdtZW50IG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGF0LCB0b28sIGluIHN1Y2ggYSB3YXkgYXMKICAgICAgIHRvIGJlIHByZWZlcnJlZCB0byBtZW4gb2YgdGhlIHZlcnkgaGlnaGVzdCByYW5rLCB0byBhdm9pZCwgYm90aCBpbiB0aGlzIG1hZ2lzdHJhY3kgYW5kCiAgICAgICB0aHJvdWdob3V0IG15IHdob2xlIGxpZmUsIGRldm90aW5nIG15c2VsZiB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaXMgaXQgcG9zc2libGUgZm9yIG1lLCBrbm93aW5nLCBhcyBJIGRvLCB0aGF0IEkgaGF2ZSBiZWVuIG1hZGUKICAgICAgIGNvbnN1bCwgbm90IGJ5IHRoZSB6ZWFsIG9mIHRoZSBwb3dlcmZ1bCBjaXRpemVucywgbm9yIGJ5IHRoZSBwcmVwb25kZXJhdGluZyBpbmZsdWVuY2Ugb2YgYQogICAgICAgZmV3IG1lbiwgYnV0IGJ5IHRoZSBkZWxpYmVyYXRlIGp1ZGdtZW50IG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGF0LCB0b28sIGluIHN1Y2ggYSB3YXkgYXMKICAgICAgIHRvIGJlIHByZWZlcnJlZCB0byBtZW4gb2YgdGhlIHZlcnkgaGlnaGVzdCByYW5rLCB0byBhdm9pZCwgYm90aCBpbiB0aGlzIG1hZ2lzdHJhY3kgYW5kCiAgICAgICB0aHJvdWdob3V0IG15IHdob2xlIGxpZmUsIGRldm90aW5nIG15c2VsZiB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiwgaG93ZXZlciwgSSBzcGVhayBvZiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIEkgaGF2ZSBncmVhdCBuZWVkIG9mIHlvdXIgd2lzZG9tIGluCiAgICAgICBnaXZpbmcgdGhlIHByb3BlciBtZWFuaW5nIGFuZCBpbnRlcnByZXRhdGlvbiB0byB0aGlzIGV4cHJlc3Npb24uIEZvciB0aGVyZSBpcyBhIGdyZWF0IGVycm9yCiAgICAgICBhYnJvYWQsIGJ5IHJlYXNvbiBvZiB0aGUgdHJlYWNoZXJvdXMgcHJldGVuY2VzIG1hZGUgYnkgc29tZSBwZW9wbGUsIHdobywgdGhvdWdoIHRoZXkgb3Bwb3NlCiAgICAgICBhbmQgaGluZGVyIG5vdCBvbmx5IHRoZSBhZHZhbnRhZ2UgYnV0IGV2ZW4gdGhlIHNhZmV0eSBvZiB0aGUgcGVvcGxlLCBzdGlsbCBlbmRlYXZvdXIgYnkgdGhlaXIKICAgICAgIHNwZWVjaGVzIHRvIG1ha2UgbWVuIGJlbGlldmUgdGhlbSB6ZWFsb3VzIGZvciB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IEksIE8gUm9tYW5zLCBrbm93IGluIHdoYXQgY29uZGl0aW9uIEkgcmVjZWl2ZWQgdGhlIHJlcHVibGljIG9uIHRoZSBmaXJzdCBvZgogICAgICAgSmFudWFyeTogZnVsbCBvZiBhbnhpZXR5LCBmdWxsIG9mIGZlYXIuIFRoZXJlIHdhcyBubyBldmlsLCBubyBtaXNmb3J0dW5lIHdoaWNoIHRoZSBnb29kIHdlcmUKICAgICAgIG5vdCBkcmVhZGluZyBhbmQgdGhlIGJhZCBsb29raW5nIG91dCBmb3IuIEV2ZXJ5IHNvcnQgb2Ygc2VkaXRpb3VzIGRlc2lnbiBhZ2FpbnN0IHRoZSBleGlzdGluZwogICAgICAgY29uc3RpdHV0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGFnYWluc3QgeW91ciB0cmFucXVpbGxpdHksIHdhcyBzYWlkIHRvIGJlIGluCiAgICAgICBjb250ZW1wbGF0aW9uLOKAlHNvbWUgc3VjaCB0byBoYXZlIGJlZW4gYWN0dWFsbHkgc2V0IG9uIGZvb3QgdGhlIG1vbWVudCB3ZSB3ZXJlCiAgICAgICBlbGVjdGVkIGNvbnN1bHMuIEFsbCBjb25maWRlbmNlIHdhcyBiYW5pc2hlZCBmcm9tIHRoZSBmb3J1bSwgbm90IGJ5IHRoZSBzdHJva2Ugb2YgYW55IG5ldwogICAgICAgY2FsYW1pdHksIGJ1dCBieSB0aGUgZ2VuZXJhbCBzdXNwaWNpb24gZW50ZXJ0YWluZWQgb2YgdGhlIGNvdXJ0cyBvZiBqdXN0aWNlLCBhbmQgYnkgdGhlCiAgICAgICBkaXNvcmRlciBpbnRvIHdoaWNoIHRoZXkgaGFkIGZhbGxlbiwgYW5kIGJ5IHRoZSBjb25zdGFudCByZXZlcnNhbCBvZiBwcmV2aW91cyBkZWNpc2lvbnMuIE5ldwogICAgICAgYXV0aG9yaXR5LCBleHRyYW9yZGluYXJ5IHBvd2Vycywgc3VpdGVkIG5vdCB0byBjb21tYW5kZXJzLCBidXQgdG8ga2luZ3MsIHdlcmUgc3VwcG9zZWQgdG8gYmUKICAgICAgIGFpbWVkIGF0LiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJLCBPIFJvbWFucywga25vdyBpbiB3aGF0IGNvbmRpdGlvbiBJIHJlY2VpdmVkIHRoZSByZXB1YmxpYyBvbiB0aGUgZmlyc3Qgb2YKICAgICAgIEphbnVhcnk6IGZ1bGwgb2YgYW54aWV0eSwgZnVsbCBvZiBmZWFyLiBUaGVyZSB3YXMgbm8gZXZpbCwgbm8gbWlzZm9ydHVuZSB3aGljaCB0aGUgZ29vZCB3ZXJlCiAgICAgICBub3QgZHJlYWRpbmcgYW5kIHRoZSBiYWQgbG9va2luZyBvdXQgZm9yLiBFdmVyeSBzb3J0IG9mIHNlZGl0aW91cyBkZXNpZ24gYWdhaW5zdCB0aGUgZXhpc3RpbmcKICAgICAgIGNvbnN0aXR1dGlvbiBvZiB0aGUgcmVwdWJsaWMsIGFuZCBhZ2FpbnN0IHlvdXIgdHJhbnF1aWxsaXR5LCB3YXMgc2FpZCB0byBiZSBpbgogICAgICAgY29udGVtcGxhdGlvbizigJRzb21lIHN1Y2ggdG8gaGF2ZSBiZWVuIGFjdHVhbGx5IHNldCBvbiBmb290IHRoZSBtb21lbnQgd2Ugd2VyZQogICAgICAgZWxlY3RlZCBjb25zdWxzLiBBbGwgY29uZmlkZW5jZSB3YXMgYmFuaXNoZWQgZnJvbSB0aGUgZm9ydW0sIG5vdCBieSB0aGUgc3Ryb2tlIG9mIGFueSBuZXcKICAgICAgIGNhbGFtaXR5LCBidXQgYnkgdGhlIGdlbmVyYWwgc3VzcGljaW9uIGVudGVydGFpbmVkIG9mIHRoZSBjb3VydHMgb2YganVzdGljZSwgYW5kIGJ5IHRoZQogICAgICAgZGlzb3JkZXIgaW50byB3aGljaCB0aGV5IGhhZCBmYWxsZW4sIGFuZCBieSB0aGUgY29uc3RhbnQgcmV2ZXJzYWwgb2YgcHJldmlvdXMgZGVjaXNpb25zLiBOZXcKICAgICAgIGF1dGhvcml0eSwgZXh0cmFvcmRpbmFyeSBwb3dlcnMsIHN1aXRlZCBub3QgdG8gY29tbWFuZGVycywgYnV0IHRvIGtpbmdzLCB3ZXJlIHN1cHBvc2VkIHRvIGJlCiAgICAgICBhaW1lZCBhdC4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGFzIEkgZGlkIG5vdCBvbmx5IHN1c3BlY3QgdGhlc2UgdGhpbmdzLCBidXQgY2xlYXJseSBzYXcgdGhlbSwgKGZvciBpbmRlZWQgdGhlcmUgd2FzIG5vCiAgICAgICBzZWNyZXQgbWFkZSBvZiB3aGF0IHdhcyBiZWluZyBkb25lLCkgSSBzYWlkIGluIHRoZSBzZW5hdGUgdGhhdCBJIHdvdWxkIGluIHRoaXMgbWFnaXN0cmFjeQogICAgICAgcHJvdmUgYSBjb25zdWwgZGV2b3RlZCB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIEZvciB3aGF0IGlzIHRoZXJlIHNvIGFkdmFudGFnZW91cyB0bwogICAgICAgdGhlIHBlb3BsZSBhcyBwZWFjZT8gaW4gd2hpY2ggbm90IG9ubHkgdGhlIGFuaW1hbHMgdG8gd2hvbSBuYXR1cmUgaGFzIGdpdmVuIHNlbnNlLCBidXQgZXZlbgogICAgICAgdGhlIGhvdXNlcyBhbmQgZmllbGRzIGFwcGVhciB0byBtZSB0byByZWpvaWNlLiBXaGF0IGlzIHNvIGFkdmFudGFnZW91cyB0byB0aGUgcGVvcGxlIGFzCiAgICAgICBsaWJlcnR5PyB3aGljaCBpcyBzb3VnaHQgb3V0IGFuZCBwcmVmZXJyZWQgdG8gZXZlcnl0aGluZywgbm90IG9ubHkgYnkgbWVuLCBidXQgZXZlbiBieSB0aGUKICAgICAgIGJlYXN0cy4gV2hhdCBpcyBzbyBhZHZhbnRhZ2VvdXMgdG8gdGhlIHBlb3BsZSBhcyB0cmFucXVpbGxpdHk/IHdoaWNoIGlzIHNvIGRlbGlnaHRmdWwgYQogICAgICAgdGhpbmcsIHRoYXQgYm90aCB5b3UgYW5kIHlvdXIgYW5jZXN0b3JzLCBhbmQgZXZlcnkgYnJhdmUgbWFuLCB0aGlua3MgaXQgd29ydGggaGlzIHdoaWxlIHRvCiAgICAgICBlbmNvdW50ZXIgdGhlIGdyZWF0ZXN0IGxhYm91cnMsIGluIG9yZGVyIGF0IGxlbmd0aCB0byBlbmpveSB0cmFucXVpbGxpdHksIHBhcnRpY3VsYXJseSBpZiBoZQogICAgICAgYmUgYSBtYW4gaW4gY29tbWFuZCwgb3IgYSBtYW4gb2YgaGlnaCByYW5rLiBBbmQgd2UsIHRoZXJlZm9yZSwgYXJlIGJvdW5kIHRvIGdpdmUgZ3JlYXQgcHJhaXNlCiAgICAgICBhbmQgdG8gc2hvdyBncmVhdCBncmF0aXR1ZGUgdG8gb3VyIGFuY2VzdG9ycywgYmVjYXVzZSBpdCBpcyBvd2luZyB0byB0aGVpciBsYWJvdXJzIHRoYXQgd2UKICAgICAgIGFyZSBhYmxlIHRvIGVuam95IHRyYW5xdWlsbGl0eSB3aXRob3V0IHJpc2suIEhvdyB0aGVuIGNhbiBJIGF2b2lkIGJlaW5nIGRldm90ZWQgdG8gdGhlCiAgICAgICBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZSwgTyBSb21hbnMsIHdoZW4gSSBzZWUgYWxsIHRoZXNlIHRoaW5ncyzigJRvdXIgcGVhY2UgYWJyb2FkLAogICAgICAgYW5kIHRoZSBsaWJlcnR5IHdoaWNoIGJlbG9uZ3MgdG8gdGhlIFJvbWFuIHJhY2UgYW5kIFJvbWFuIG5hbWUsIGFuZCBvdXIgZG9tZXN0aWMKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIGV2ZXJ5dGhpbmcsIGluIHNob3J0LCB3aGljaCBpcyBjb25zaWRlcmVkIGJ5IHlvdSBhcyB2YWx1YWJsZSBvciBob25vdXJhYmxlLAogICAgICAgZW50cnVzdGVkIHRvIHRoZSBnb29kIGZhaXRoLCBhbmQsIGFzIGl0IHdlcmUsIHRvIHRoZSBwcm90ZWN0aW9uIG9mIG15IGNvbnN1bHNoaXA/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBPIFJvbWFucywgYSBwcm9taXNlZCBsaWJlcmFsaXR5IHdoaWNoLCBob3dldmVyIHlvdSBtYXkgYmUKICAgICAgIGVuY291cmFnZWQgYnkgd29yZHMgdG8gZXhwZWN0IGl0LCBjYW5ub3QgYmUgcGVyZm9ybWVkIGJ5IGFueSBwb3NzaWJsZSBtZWFucyB3aXRob3V0CiAgICAgICBleGhhdXN0aW5nIHRoZSB0cmVhc3VyeSwgb3VnaHQgbm90IHRvIGFwcGVhciB0byB5b3UgYW4gYWdyZWVhYmxlIG1lYXN1cmUsIG9yIG9uZSBjYWxjdWxhdGVkCiAgICAgICB0byBwcm9tb3RlIHlvdXIgcmVhbCBpbnRlcmVzdHMuIE5vciBhcmUgdGhlIGRpc3R1cmJhbmNlcyBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCB0aGUKICAgICAgIHJldmVyc2FscyBvZiBqdWRpY2lhbCBkZWNpc2lvbnMsIGFuZCB0aGUgcmVzdG9yYXRpb24gb2YgY29udmljdGVkIHBlcnNvbnMgdG8gYmUgY29uc2lkZXJlZCBhcwogICAgICAgbWVhc3VyZXMgYWR2YW50YWdlb3VzIHRvIHRoZSBwZW9wbGU7IGZvciB0aGV5IGFyZSByYXRoZXIgdGhlIHByZWx1ZGVzIHRvIHRoZSB0b3RhbCBydWluIG9mCiAgICAgICBjaXRpZXMgd2hvc2UgYWZmYWlycyBhcmUgYWxyZWFkeSBpbiBhIGZhbGxpbmcgYW5kIGFsbW9zdCBkZXNwZXJhdGUgc3RhdGUuIE5vciwgaWYgYW55IG1lbgogICAgICAgcHJvbWlzZSBsYW5kcyB0byB0aGUgUm9tYW4gcGVvcGxlLCBvciBpZiB0aGV5IGhvbGQgb3V0IHRvIHlvdSwgdW5kZXIgZmFsc2UgcHJldGVuY2VzLCBob3BlcwogICAgICAgb2Ygc3VjaCB0aGluZ3MsIHdoaWxlIGluIHNlY3JldCB0aGV5IGFyZSBrZWVwaW5nIGVudGlyZWx5IGRpZmZlcmVudCBvYmplY3RzIGluIHZpZXcsIGFyZSB0aGV5CiAgICAgICB0byBiZSB0aG91Z2h0IGRldm90ZWQgdG8gdGhlIHRydWUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBPIFJvbWFucywgYSBwcm9taXNlZCBsaWJlcmFsaXR5IHdoaWNoLCBob3dldmVyIHlvdSBtYXkgYmUKICAgICAgIGVuY291cmFnZWQgYnkgd29yZHMgdG8gZXhwZWN0IGl0LCBjYW5ub3QgYmUgcGVyZm9ybWVkIGJ5IGFueSBwb3NzaWJsZSBtZWFucyB3aXRob3V0CiAgICAgICBleGhhdXN0aW5nIHRoZSB0cmVhc3VyeSwgb3VnaHQgbm90IHRvIGFwcGVhciB0byB5b3UgYW4gYWdyZWVhYmxlIG1lYXN1cmUsIG9yIG9uZSBjYWxjdWxhdGVkCiAgICAgICB0byBwcm9tb3RlIHlvdXIgcmVhbCBpbnRlcmVzdHMuIE5vciBhcmUgdGhlIGRpc3R1cmJhbmNlcyBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCB0aGUKICAgICAgIHJldmVyc2FscyBvZiBqdWRpY2lhbCBkZWNpc2lvbnMsIGFuZCB0aGUgcmVzdG9yYXRpb24gb2YgY29udmljdGVkIHBlcnNvbnMgdG8gYmUgY29uc2lkZXJlZCBhcwogICAgICAgbWVhc3VyZXMgYWR2YW50YWdlb3VzIHRvIHRoZSBwZW9wbGU7IGZvciB0aGV5IGFyZSByYXRoZXIgdGhlIHByZWx1ZGVzIHRvIHRoZSB0b3RhbCBydWluIG9mCiAgICAgICBjaXRpZXMgd2hvc2UgYWZmYWlycyBhcmUgYWxyZWFkeSBpbiBhIGZhbGxpbmcgYW5kIGFsbW9zdCBkZXNwZXJhdGUgc3RhdGUuIE5vciwgaWYgYW55IG1lbgogICAgICAgcHJvbWlzZSBsYW5kcyB0byB0aGUgUm9tYW4gcGVvcGxlLCBvciBpZiB0aGV5IGhvbGQgb3V0IHRvIHlvdSwgdW5kZXIgZmFsc2UgcHJldGVuY2VzLCBob3BlcwogICAgICAgb2Ygc3VjaCB0aGluZ3MsIHdoaWxlIGluIHNlY3JldCB0aGV5IGFyZSBrZWVwaW5nIGVudGlyZWx5IGRpZmZlcmVudCBvYmplY3RzIGluIHZpZXcsIGFyZSB0aGV5CiAgICAgICB0byBiZSB0aG91Z2h0IGRldm90ZWQgdG8gdGhlIHRydWUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIEkgd2lsbCBzcGVhayB0aGUgdHJ1dGgsIE8gUm9tYW5zOyBJIGNhbm5vdCBmaW5kIGZhdWx0IHdpdGggdGhlIGdlbmVyYWwgcHJpbmNpcGxlIG9mIGFuCiAgICAgICBhZ3JhcmlhbiBsYXcsIGZvciBpdCBvY2N1cnMgdG8gbXkgbWluZCB0aGF0IHR3byBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgdHdvIG1vc3QgYWJsZSBtZW4sIHR3bwogICAgICAgbWVuIG1vc3QgdGhvcm91Z2hseSBhdHRhY2hlZCB0byB0aGUgUm9tYW4gcGVvcGxlLCBUaWJlcml1cyBhbmQgQ2FpdXMgR3JhY2NodXMsIGVzdGFibGlzaGVkCiAgICAgICB0aGUgcGVvcGxlIG9uIHB1YmxpYyBkb21haW5zIHdoaWNoIGhhZCBwcmV2aW91c2x5IGJlZW4gb2NjdXBpZWQgYnkgcHJpdmF0ZSBpbmRpdmlkdWFscy4gTm9yCiAgICAgICBhbSBJIGEgY29uc3VsIG9mIHN1Y2ggb3BpbmlvbnMgYXMgdG8gdGhpbmsgaXQgd3JvbmcsIGFzIG1vc3QgbWVuIGRvLCB0byBwcmFpc2UgdGhlIEdyYWNjaGk7CiAgICAgICBieSB3aG9zZSBjb3Vuc2VscywgYW5kIHdpc2RvbSwgYW5kIGxhd3MsIEkgc2VlIHRoYXQgbWFueSBwYXJ0cyBvZiB0aGUgcmVwdWJsaWMgaGF2ZSBiZWVuCiAgICAgICBncmVhdGx5IHN0cmVuZ3RoZW5lZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIHdoZW4gYXQgdGhlIHZlcnkKICAgICAgIGJlZ2lubmluZywgSSwgYmVpbmcgdGhlIGNvbnN1bCBlbGVjdCwgd2FzIGluZm9ybWVkIHRoYXQgdGhlIHRyaWJ1bmVzIGVsZWN0IG9mIHRoZSBwZW9wbGUgd2VyZQogICAgICAgZHJhd2luZyB1cCBhbiBhZ3JhcmlhbiBsYXcsIEkgd2lzaGVkIHRvIGFzY2VydGFpbiB3aGF0IHRoZWlyIHBsYW5zIHdlcmUuIEluIHRydXRoLCBJIHRob3VnaHQKICAgICAgIHRoYXQsIHNpbmNlIHdlIHdlcmUgYm90aCB0byBhY3QgYXMgbWFnaXN0cmF0ZXMgaW4gdGhlIHNhbWUgeWVhciwgaXQgd2FzIHJpZ2h0IHRoYXQgdGhlcmUKICAgICAgIHNob3VsZCBiZSBzb21lIHVuaW9uIGJldHdlZW4gdXMsIGZvciB0aGUgcHVycG9zZSBvZiBnb3Zlcm5pbmcgdGhlIHJlcHVibGljIHdpc2VseSBhbmQKICAgICAgIHN1Y2Nlc3NmdWxseS4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBJIHdpc2hlZCB0byBqb2luIHRoZW0gZmFtaWxpYXJseSBpbgogICAgICAgY29udmVyc2F0aW9uLCBJIHdhcyBzaHV0IG91dDsgdGhlaXIgcHJvamVjdHMgd2VyZSBjb25jZWFsZWQgZnJvbSBtZTogYW5kIHdoZW4gSSBhc3N1cmVkIHRoZW0KICAgICAgIHRoYXQsIGlmIHRoZSBsYXcgYXBwZWFyZWQgdG8gbWUgdG8gYmUgYWR2YW50YWdlb3VzIHRvIHRoZSBSb21hbiBwZW9wbGUsIEkgd291bGQgYXNzaXN0IHRoZW0KICAgICAgIGluIGl0IGFuZCBwcm9tb3RlIGl0LCBzdGlsbCB0aGV5IHJlamVjdGVkIHRoaXMgbGliZXJhbGl0eSBvZiBtaW5lIHdpdGggc2Nvcm4sIGFuZCBzYWlkIHRoYXQgSQogICAgICAgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8gYXBwcm92ZSBvZiBhbnkgbGliZXJhbCBtZWFzdXJlcy4gSSBjZWFzZWQgdG8gb2ZmZXIgbXlzZWxmIHRvCiAgICAgICB0aGVtLCBsZXN0IHBlcmNoYW5jZSBteSBpbXBvcnR1bml0eSBzaG91bGQgc2VlbSB0byB0aGVtIHRyZWFjaGVyb3VzIG9yIGltcHVkZW50LiBJbiB0aGUKICAgICAgIG1lYW50aW1lIHRoZXkgZGlkIG5vdCBjZWFzZSB0byBoYXZlIHNlY3JldCBtZWV0aW5ncyBhbW9uZyB0aGVtc2VsdmVzLCB0byBpbnZpdGUgc29tZSBwcml2YXRlCiAgICAgICBpbmRpdmlkdWFscyB0byB0aGVtLCBhbmQgdG8gY2hvb3NlIG5pZ2h0IGFuZCBkYXJrbmVzcyBmb3IgdGhlaXIgY2xhbmRlc3RpbmUgZGVsaWJlcmF0aW9ucy4KICAgICAgIEFuZCB3aGF0IGdyZWF0IGFsYXJtIHRoaXMgY29uZHVjdCBvZiB0aGVpcnMgY2F1c2VkIHVzLCB5b3UgbWF5IGVhc2lseSBkaXZpbmUgYnkgeW91ciBvd24KICAgICAgIGNvbmplY3R1cmVzIGZvdW5kZWQgb24gdGhlIGFueGlldHkgd2hpY2ggeW91IHlvdXJzZWx2ZXMgZXhwZXJpZW5jZWQgYXQgdGhhdCB0aW1lLiA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCB3aGVuIGF0IHRoZSB2ZXJ5CiAgICAgICBiZWdpbm5pbmcsIEksIGJlaW5nIHRoZSBjb25zdWwgZWxlY3QsIHdhcyBpbmZvcm1lZCB0aGF0IHRoZSB0cmlidW5lcyBlbGVjdCBvZiB0aGUgcGVvcGxlIHdlcmUKICAgICAgIGRyYXdpbmcgdXAgYW4gYWdyYXJpYW4gbGF3LCBJIHdpc2hlZCB0byBhc2NlcnRhaW4gd2hhdCB0aGVpciBwbGFucyB3ZXJlLiBJbiB0cnV0aCwgSSB0aG91Z2h0CiAgICAgICB0aGF0LCBzaW5jZSB3ZSB3ZXJlIGJvdGggdG8gYWN0IGFzIG1hZ2lzdHJhdGVzIGluIHRoZSBzYW1lIHllYXIsIGl0IHdhcyByaWdodCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgc29tZSB1bmlvbiBiZXR3ZWVuIHVzLCBmb3IgdGhlIHB1cnBvc2Ugb2YgZ292ZXJuaW5nIHRoZSByZXB1YmxpYyB3aXNlbHkgYW5kCiAgICAgICBzdWNjZXNzZnVsbHkuIDwvdHJhbnNsYXRpb24+"
translation['2.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBJIHdpc2hlZCB0byBqb2luIHRoZW0gZmFtaWxpYXJseSBpbgogICAgICAgY29udmVyc2F0aW9uLCBJIHdhcyBzaHV0IG91dDsgdGhlaXIgcHJvamVjdHMgd2VyZSBjb25jZWFsZWQgZnJvbSBtZTogYW5kIHdoZW4gSSBhc3N1cmVkIHRoZW0KICAgICAgIHRoYXQsIGlmIHRoZSBsYXcgYXBwZWFyZWQgdG8gbWUgdG8gYmUgYWR2YW50YWdlb3VzIHRvIHRoZSBSb21hbiBwZW9wbGUsIEkgd291bGQgYXNzaXN0IHRoZW0KICAgICAgIGluIGl0IGFuZCBwcm9tb3RlIGl0LCBzdGlsbCB0aGV5IHJlamVjdGVkIHRoaXMgbGliZXJhbGl0eSBvZiBtaW5lIHdpdGggc2Nvcm4sIGFuZCBzYWlkIHRoYXQgSQogICAgICAgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8gYXBwcm92ZSBvZiBhbnkgbGliZXJhbCBtZWFzdXJlcy4gSSBjZWFzZWQgdG8gb2ZmZXIgbXlzZWxmIHRvCiAgICAgICB0aGVtLCBsZXN0IHBlcmNoYW5jZSBteSBpbXBvcnR1bml0eSBzaG91bGQgc2VlbSB0byB0aGVtIHRyZWFjaGVyb3VzIG9yIGltcHVkZW50LiBJbiB0aGUKICAgICAgIG1lYW50aW1lIHRoZXkgZGlkIG5vdCBjZWFzZSB0byBoYXZlIHNlY3JldCBtZWV0aW5ncyBhbW9uZyB0aGVtc2VsdmVzLCB0byBpbnZpdGUgc29tZSBwcml2YXRlCiAgICAgICBpbmRpdmlkdWFscyB0byB0aGVtLCBhbmQgdG8gY2hvb3NlIG5pZ2h0IGFuZCBkYXJrbmVzcyBmb3IgdGhlaXIgY2xhbmRlc3RpbmUgZGVsaWJlcmF0aW9ucy4KICAgICAgIEFuZCB3aGF0IGdyZWF0IGFsYXJtIHRoaXMgY29uZHVjdCBvZiB0aGVpcnMgY2F1c2VkIHVzLCB5b3UgbWF5IGVhc2lseSBkaXZpbmUgYnkgeW91ciBvd24KICAgICAgIGNvbmplY3R1cmVzIGZvdW5kZWQgb24gdGhlIGFueGlldHkgd2hpY2ggeW91IHlvdXJzZWx2ZXMgZXhwZXJpZW5jZWQgYXQgdGhhdCB0aW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BdCBsYXN0IHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGVudGVyIG9uIHRoZWlyIG9mZmljZS4gVGhlIGFzc2VtYmx5IHRvIGJlIGNvbnZlbmVkIGJ5CiAgICAgICBQdWJsaXVzIFJ1bGx1cyB3YXMgYW54aW91c2x5IGxvb2tlZCBmb3IsIGJvdGggYmVjYXVzZSBoZSB3YXMgdGhlIGNoaWVmIG1vdmVyIG9mIHRoZSBhZ3JhcmlhbgogICAgICAgbGF3LCBhbmQgYmVjYXVzZSBoZSBiZWhhdmVkIHdpdGggbW9yZSB2aW9sZW5jZSB0aGFuIGhpcyBjb2xsZWFndWVzLiBGcm9tIHRoZSBtb21lbnQgdGhhdCBoZQogICAgICAgd2FzIGVsZWN0ZWQgdHJpYnVuZSwgaGUgcHV0IG9uIGFub3RoZXIgZXhwcmVzc2lvbiBvZiBjb3VudGVuYW5jZSwgYW5vdGhlciB0b25lIG9mIHZvaWNlLCBhCiAgICAgICBkaWZmZXJlbnQgZ2FpdDsgaGUgd2VudCBhYm91dCBpbiBhbiBvbGQtZmFzaGlvbmVkIGRyZXNzLCB3aXRob3V0IGFueSByZWdhcmQgdG8gbmVhdG5lc3MgaW4KICAgICAgIGhpcyBwZXJzb24sIHdpdGggbG9uZ2VyIGhhaXIgYW5kIGEgbW9yZSBhYnVuZGFudCBiZWFyZCB0aGFuIGJlZm9yZTsgc28gdGhhdCBoZSBzZWVtZWQgYnkgaGlzCiAgICAgICBleWVzIGFuZCBieSBoaXMgd2hvbGUgYXNwZWN0IHRvIGJlIHRocmVhdGVuaW5nIGV2ZXJ5IG9uZSB3aXRoIHRoZSBwb3dlciBvZiB0aGUgdHJpYnVuZXMsIGFuZAogICAgICAgdG8gYmUgbWVkaXRhdGluZyBldmlsIHRvIHRoZSByZXB1YmxpYy4gSSB3YXMgd2FpdGluZyBpbiBleHBlY3RhdGlvbiBvZiBoaXMgbGF3IGFuZCBvZiB0aGUKICAgICAgIGFzc2VtYmx5LiBBdCBmaXJzdCBubyBsYXcgYXQgYWxsIGlzIHByb3Bvc2VkLiBIZSBvcmRlcnMgYW4gYXNzZW1ibHkgdG8gYmUgc3VtbW9uZWQgYXMgaGlzCiAgICAgICBmaXJzdCBtZWFzdXJlLiBNZW4gZmxvY2sgdG8gaXQgd2l0aCB0aGUgbW9zdCBlYWdlciBleHBlY3RhdGlvbi4gSGUgbWFrZXMgYSBsb25nIGVub3VnaAogICAgICAgc3BlZWNoLCBleHByZXNzZWQgaW4gdmVyeSBnb29kIGxhbmd1YWdlLiBUaGVyZSB3YXMgb25lIHRoaW5nIHdoaWNoIHNlZW1lZCB0byBtZSBiYWQsIGFuZCB0aGF0CiAgICAgICB3YXMsIHRoYXQgb3V0IG9mIGFsbCB0aGUgY3Jvd2QgdGhlcmUgcHJlc2VudCwgbm90IG9uZSBtYW4gY291bGQgYmUgZm91bmQgd2hvIHdhcyBhYmxlIHRvCiAgICAgICB1bmRlcnN0YW5kIHdoYXQgaGUgbWVhbnQuIFdoZXRoZXIgaGUgZGlkIHRoaXMgd2l0aCBhbnkgaW5zaWRpb3VzIGRlc2lnbiwgb3Igd2hldGhlciB0aGF0IGlzCiAgICAgICB0aGUgc29ydCBvZiBlbG9xdWVuY2UgaW4gd2hpY2ggaGUgdGFrZXMgcGxlYXN1cmUsIEkgZG8gbm90IGtub3cuIFN0aWxsLCBpZiB0aGVyZSB3YXMgYW55IG9uZQogICAgICAgaW4gdGhlIGFzc2VtYmx5IGNsZXZlcmVyIHRoYW4gYW5vdGhlciwgaGUgc3VzcGVjdGVkIHRoYXQgaGUgd2FzIGludGVuZGluZyB0byBzYXkgc29tZXRoaW5nIG9yCiAgICAgICBvdGhlciBhYm91dCBhbiBhZ3JhcmlhbiBsYXcuIEF0IGxhc3QsIGFmdGVyIEkgaGFkIGJlZW4gZWxlY3RlZCBjb25zdWwsIHRoZSBsYXcgaXMgcHJvcG9zZWQKICAgICAgIHB1YmxpY2x5LiBCeSBteSBvcmRlciBzZXZlcmFsIGNsZXJrcyBtZWV0IGF0IG9uZSB0aW1lLCBhbmQgYnJpbmcgbWUgYW4gYWNjdXJhdGUgY29weSBvZiB0aGUKICAgICAgIGxhdy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgYXNzdXJlIHlvdSB3aXRoIHRoZSBtb3N0IHJlYWwgc2luY2VyaXR5LCBPIFJvbWFucywgdGhhdCBJIGFwcGxpZWQgbXlzZWxmIHRvIHRoZSByZWFkaW5nCiAgICAgICBhbmQgdW5kZXJzdGFuZGluZyBvZiB0aGlzIGxhdyB3aXRoIHRoZXNlIGZlZWxpbmdzLCB0aGF0IGlmIEkgaGFkIHRob3VnaHQgaXQgd2VsbCBhZGFwdGVkIHRvCiAgICAgICB5b3VyIGludGVyZXN0cywgYW5kIGFkdmFudGFnZW91cyB0byB0aGVtLCBJIHdvdWxkIGhhdmUgYmVlbiBhIGNoaWVmIG1vdmVyIGluIGFuZCBwcm9tb3RlciBvZgogICAgICAgaXQuIEZvciB0aGUgY29uc3Vsc2hpcCBoYXMgbm90LCBlaXRoZXIgYnkgbmF0dXJlLCBvciBieSBhbnkgaW5oZXJlbnQgZGlmZmVyZW5jZSBvZiBvYmplY3QsIG9yCiAgICAgICBieSBhbnkgaW5zdGluY3RpdmUgaGF0cmVkLCBhbnkgZW5taXR5IGFnYWluc3QgdGhlIHRyaWJ1bmVzaGlwLCB0aG91Z2ggZ29vZCBhbmQgZmVhcmxlc3MKICAgICAgIGNvbnN1bHMgaGF2ZSBvZnRlbiBvcHBvc2VkIHNlZGl0aW91cyBhbmQgd29ydGhsZXNzIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFuZCB0aG91Z2ggdGhlCiAgICAgICBwb3dlciBvZiB0aGUgdHJpYnVuZXMgaGFzIHNvbWV0aW1lcyBvcHBvc2VkIHRoZSBjYXByaWNpb3VzIGxpY2VudGlvdXNuZXNzIG9mIHRoZSBjb25zdWxzLiBJdAogICAgICAgaXMgbm90IHRoZSBkaXNzaW1pbGFyaXR5IG9mIHRoZWlyIHBvd2VycywgYnV0IHRoZSBkaXN1bmlvbiBvZiB0aGVpciBtaW5kcywgdGhhdCBjcmVhdGVzCiAgICAgICBkaXNzZW5zaW9uIGJldHdlZW4gdGhlbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIEkgYXBwbGllZCBteXNlbGYgdG8KICAgICAgIHRoZSBjb25zaWRlcmF0aW9uIG9mIHRoZSBsYXcgd2l0aCB0aGVzZSBmZWVsaW5ncywgdGhhdCBJIHdpc2hlZCB0byBmaW5kIGl0IGNhbGN1bGF0ZWQgdG8KICAgICAgIHByb21vdGUgeW91ciBpbnRlcmVzdHMsIGFuZCBzdWNoIGFuIG9uZSBhcyBhIGNvbnN1bCB3aG8gd2FzIHJlYWxseSwgbm90IGluIHdvcmQgb25seSwgZGV2b3RlZAogICAgICAgdG8gdGhlIHBlb3BsZTsgbWlnaHQgaG9uZXN0bHkgYW5kIGNoZWVyZnVsbHkgYWR2b2NhdGUuIEFuZCBmcm9tIHRoZSBmaXJzdCBjbGF1c2Ugb2YgdGhlCiAgICAgICBwcm9wb3NlZCBsYXcgdG8gdGhlIGxhc3QsIE8gUm9tYW5zLCBJIGZpbmQgbm90aGluZyBlbHNlIHRob3VnaHQgb2YsIG5vdGhpbmcgZWxzZSBpbnRlbmRlZCwKICAgICAgIG5vdGhpbmcgZWxzZSBhaW1lZCBhdCwgYnV0IHRvIGFwcG9pbnQgdGVuIGtpbmdzIG9mIHRoZSB0cmVhc3VyeSwgb2YgdGhlIHJldmVudWVzLCBvZiBhbGwgdGhlCiAgICAgICBwcm92aW5jZXMsIG9mIHRoZSB3aG9sZSBvZiB0aGUgcmVwdWJsaWMsIG9mIHRoZSBraW5nZG9tcyBhbGxpZWQgd2l0aCB1cywgb2YgdGhlIGZyZWUgbmF0aW9ucwogICAgICAgY29uZmVkZXJhdGUgd2l0aCB1c+KAlHRlbiBsb3JkcyBvZiB0aGUgd2hvbGUgd29ybGQsIHVuZGVyIHRoZSBwcmV0ZW5jZSBhbmQgbmFtZSBvZiBhbgogICAgICAgYWdyYXJpYW4gbGF3LiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCBJIGFwcGxpZWQgbXlzZWxmIHRvCiAgICAgICB0aGUgY29uc2lkZXJhdGlvbiBvZiB0aGUgbGF3IHdpdGggdGhlc2UgZmVlbGluZ3MsIHRoYXQgSSB3aXNoZWQgdG8gZmluZCBpdCBjYWxjdWxhdGVkIHRvCiAgICAgICBwcm9tb3RlIHlvdXIgaW50ZXJlc3RzLCBhbmQgc3VjaCBhbiBvbmUgYXMgYSBjb25zdWwgd2hvIHdhcyByZWFsbHksIG5vdCBpbiB3b3JkIG9ubHksIGRldm90ZWQKICAgICAgIHRvIHRoZSBwZW9wbGU7IG1pZ2h0IGhvbmVzdGx5IGFuZCBjaGVlcmZ1bGx5IGFkdm9jYXRlLiBBbmQgZnJvbSB0aGUgZmlyc3QgY2xhdXNlIG9mIHRoZQogICAgICAgcHJvcG9zZWQgbGF3IHRvIHRoZSBsYXN0LCBPIFJvbWFucywgSSBmaW5kIG5vdGhpbmcgZWxzZSB0aG91Z2h0IG9mLCBub3RoaW5nIGVsc2UgaW50ZW5kZWQsCiAgICAgICBub3RoaW5nIGVsc2UgYWltZWQgYXQsIGJ1dCB0byBhcHBvaW50IHRlbiBraW5ncyBvZiB0aGUgdHJlYXN1cnksIG9mIHRoZSByZXZlbnVlcywgb2YgYWxsIHRoZQogICAgICAgcHJvdmluY2VzLCBvZiB0aGUgd2hvbGUgb2YgdGhlIHJlcHVibGljLCBvZiB0aGUga2luZ2RvbXMgYWxsaWVkIHdpdGggdXMsIG9mIHRoZSBmcmVlIG5hdGlvbnMKICAgICAgIGNvbmZlZGVyYXRlIHdpdGggdXPigJR0ZW4gbG9yZHMgb2YgdGhlIHdob2xlIHdvcmxkLCB1bmRlciB0aGUgcHJldGVuY2UgYW5kIG5hbWUgb2YgYW4KICAgICAgIGFncmFyaWFuIGxhdy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBhc3NlcnQgdG8geW91LCBPIFJvbWFucywgdGhhdCBieSB0aGlzIGJlYXV0aWZ1bAogICAgICAgYWdyYXJpYW4gbGF3LCBieSB0aGlzIGxhdyBjYWxjdWxhdGVkIHNvbGVseSBmb3IgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSwgbm90aGluZyB3aGF0ZXZlciBpcwogICAgICAgZ2l2ZW4gdG8geW91LCBldmVyeXRoaW5nIGlzIHNhY3JpZmljZWQgdG8gYSBmZXcgcGFydGljdWxhciBtZW47IHRoYXQgbGFuZHMgYXJlIGRpc3BsYXllZAogICAgICAgYmVmb3JlIHRoZSBleWVzIG9mIHRoZSBSb21hbiBwZW9wbGUsIGxpYmVydHkgaXMgdGFrZW4gYXdheSBmcm9tIHRoZW07IHRoYXQgdGhlIGZvcnR1bmVzIG9mCiAgICAgICBzb21lIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGluY3JlYXNlZCwgdGhlIHB1YmxpYyB3ZWFsdGggaXMgZXhoYXVzdGVkOyBhbmQgbGFzdGx5LCB3aGljaCBpcwogICAgICAgdGhlIG1vc3Qgc2NhbmRhbG91cyB0aGluZyBvZiBhbGwsIHRoYXQgYnkgbWVhbnMgb2YgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHdob20gb3VyCiAgICAgICBhbmNlc3RvcnMgZGVzaWduZWQgdG8gYmUgdGhlIHByb3RlY3RvciBhbmQgZ3VhcmRpYW4gb2YgbGliZXJ0eSwga2luZ3MgYXJlIGJlaW5nIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgY2l0eS4gQW5kIHdoZW4gSSBoYXZlIHNob3duIHRvIHlvdSBhbGwgdGhlIGdyb3VuZHMgZm9yIHRoaXMgc3RhdGVtZW50LCBpZiB0aGV5IGFwcGVhcgogICAgICAgdG8geW91IHRvIGJlIGVycm9uZW91cywgSSB3aWxsIHlpZWxkIHRvIHlvdXIgYXV0aG9yaXR5LCBJIHdpbGwgYWJhbmRvbiBteSBvd24gb3BpbmlvbiwgYnV0IGlmCiAgICAgICB5b3UgYmVjb21lIGF3YXJlIHRoYXQgcGxvdHMgYXJlIGxhaWQgYWdhaW5zdCB5b3VyIGxpYmVydHksIHVuZGVyIGEgcHJldGVuY2Ugb2YgbGliZXJhbGl0eSwKICAgICAgIHRoZW4gZG8gbm90IGhlc2l0YXRlLCBub3cgdGhhdCB5b3UgaGF2ZSBhIGNvbnN1bCB0byBhc3Npc3QgeW91LCB0byBkZWZlbmQgdGhhdCBsaWJlcnR5IHdoaWNoCiAgICAgICB3YXMgZWFybmVkIGJ5IHRoZSBzd2VhdCBhbmQgYmxvb2Qgb2YgeW91ciBhbmNlc3RvcnMsIGFuZCBoYW5kZWQgZG93biB0byB5b3UsIHdpdGhvdXQgYW55CiAgICAgICB0cm91YmxlIG9uIHlvdXIgcGFydC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBhc3NlcnQgdG8geW91LCBPIFJvbWFucywgdGhhdCBieSB0aGlzIGJlYXV0aWZ1bAogICAgICAgYWdyYXJpYW4gbGF3LCBieSB0aGlzIGxhdyBjYWxjdWxhdGVkIHNvbGVseSBmb3IgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSwgbm90aGluZyB3aGF0ZXZlciBpcwogICAgICAgZ2l2ZW4gdG8geW91LCBldmVyeXRoaW5nIGlzIHNhY3JpZmljZWQgdG8gYSBmZXcgcGFydGljdWxhciBtZW47IHRoYXQgbGFuZHMgYXJlIGRpc3BsYXllZAogICAgICAgYmVmb3JlIHRoZSBleWVzIG9mIHRoZSBSb21hbiBwZW9wbGUsIGxpYmVydHkgaXMgdGFrZW4gYXdheSBmcm9tIHRoZW07IHRoYXQgdGhlIGZvcnR1bmVzIG9mCiAgICAgICBzb21lIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGluY3JlYXNlZCwgdGhlIHB1YmxpYyB3ZWFsdGggaXMgZXhoYXVzdGVkOyBhbmQgbGFzdGx5LCB3aGljaCBpcwogICAgICAgdGhlIG1vc3Qgc2NhbmRhbG91cyB0aGluZyBvZiBhbGwsIHRoYXQgYnkgbWVhbnMgb2YgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHdob20gb3VyCiAgICAgICBhbmNlc3RvcnMgZGVzaWduZWQgdG8gYmUgdGhlIHByb3RlY3RvciBhbmQgZ3VhcmRpYW4gb2YgbGliZXJ0eSwga2luZ3MgYXJlIGJlaW5nIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgY2l0eS4gQW5kIHdoZW4gSSBoYXZlIHNob3duIHRvIHlvdSBhbGwgdGhlIGdyb3VuZHMgZm9yIHRoaXMgc3RhdGVtZW50LCBpZiB0aGV5IGFwcGVhcgogICAgICAgdG8geW91IHRvIGJlIGVycm9uZW91cywgSSB3aWxsIHlpZWxkIHRvIHlvdXIgYXV0aG9yaXR5LCBJIHdpbGwgYWJhbmRvbiBteSBvd24gb3BpbmlvbiwgYnV0IGlmCiAgICAgICB5b3UgYmVjb21lIGF3YXJlIHRoYXQgcGxvdHMgYXJlIGxhaWQgYWdhaW5zdCB5b3VyIGxpYmVydHksIHVuZGVyIGEgcHJldGVuY2Ugb2YgbGliZXJhbGl0eSwKICAgICAgIHRoZW4gZG8gbm90IGhlc2l0YXRlLCBub3cgdGhhdCB5b3UgaGF2ZSBhIGNvbnN1bCB0byBhc3Npc3QgeW91LCB0byBkZWZlbmQgdGhhdCBsaWJlcnR5IHdoaWNoCiAgICAgICB3YXMgZWFybmVkIGJ5IHRoZSBzd2VhdCBhbmQgYmxvb2Qgb2YgeW91ciBhbmNlc3RvcnMsIGFuZCBoYW5kZWQgZG93biB0byB5b3UsIHdpdGhvdXQgYW55CiAgICAgICB0cm91YmxlIG9uIHlvdXIgcGFydC4gPC90cmFuc2xhdGlvbj4="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGZpcnN0IGNsYXVzZSBpbiB0aGlzIGFncmFyaWFuIGxhdyBpcyBvbmUgYnkgd2hpY2gsIGFzIHRoZXkgdGhpbmssIHlvdSBhcmUgYSBsaXR0bGUKICAgICAgIHByb3ZlZCwgdG8gc2VlIHdpdGggd2hhdCBmZWVsaW5ncyB5b3UgY2FuIGJlYXIgYSBkaW1pbnV0aW9uIG9mIHlvdXIgbGliZXJ0eS4gRm9yIGl0IG9yZGVycwogICAgICAg4oCcdGhlIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSB3aG8gaGFzIHBhc3NlZCB0aGlzIGxhdyB0byBjcmVhdGUgdGVuIGRlY2VtdmlycyBieSB0aGUKICAgICAgIHZvdGVzIG9mIHNldmVudGVlbiB0cmliZXMsIHNvIHRoYXQgd2hvbXNvZXZlciBhIG1ham9yaXR5IGNvbnNpc3Rpbmcgb2YgbmluZSB0cmliZXMgZWxlY3RzLAogICAgICAgc2hhbGwgYmUgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcjwvZm9yZWlnbj4u4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJIGFzaywgb24gd2hhdCBhY2NvdW50IHRoZSBmcmFtZXIgb2YgdGhpcyBsYXcgaGFzIGNvbW1lbmNlZCBoaXMgbGF3IGFuZCBoaXMKICAgICAgIG1lYXN1cmVzIGluIHN1Y2ggYSBtYW5uZXIsIGFzIHRvIGRlcHJpdmUgdGhlIFJvbWFuIHBlb3BsZSBvZiBpdHMgcmlnaHQgb2Ygdm90aW5nPyBBcyBvZnRlbiBhcwogICAgICAgYWdyYXJpYW4gbGF3cyBoYXZlIGJlZW4gcGFzc2VkLCBjb21taXNzaW9uZXJzLCBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnRyaXVtdmlyczwvZm9yZWlnbj4sCiAgICAgICBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnF1aW5xdWV2aXJzPC9mb3JlaWduPiwgYW5kIDxmb3JlaWduIGxhbmc9ImxhIj5kZWNlbXZpcnM8L2ZvcmVpZ24+IGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkLiBJIGFzayB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgd2hvIGlzIHNvIGF0dGFjaGVkIHRvIHRoZSBwZW9wbGUsIHdoZXRoZXIKICAgICAgIHRoZXkgd2VyZSBldmVyIGNyZWF0ZWQgZXhjZXB0IGJ5IHRoZSB3aG9sZSB0aGlydHktZml2ZSB0cmliZXM/IEluIHRydXRoLCBhcyBpdCBpcyBwcm9wZXIgZm9yCiAgICAgICBldmVyeSBwb3dlciwgYW5kIGV2ZXJ5IGNvbW1hbmQsIGFuZCBldmVyeSBjaGFyZ2Ugd2hpY2ggaXMgY29tbWl0dGVkIHRvIGFueSBvbmUsIHRvIHByb2NlZWQKICAgICAgIGZyb20gdGhlIGVudGlyZSBSb21hbiBwZW9wbGUsIHNvIGVzcGVjaWFsbHkgb3VnaHQgdGhvc2UgdG8gZG8gc28sIHdoaWNoIGFyZSBlc3RhYmxpc2hlZCBmb3IKICAgICAgIGFueSB1c2UgYW5kIGFkdmFudGFnZSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhcyB0aGF0IGlzIGEgY2FzZSBpbiB3aGljaCB0aGV5IGFsbCB0b2dldGhlcgogICAgICAgY2hvb3NlIHRoZSBtYW4gd2hvIHRoZXkgdGhpbmsgd2lsbCBtb3N0IHN0dWR5IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIGluIHdoaWNoCiAgICAgICBhbHNvIGVhY2ggaW5kaXZpZHVhbCBhbW9uZyB0aGVtIGJ5IGhpcyBvd24gemVhbCBhbmQgaGlzIG93biB2b3RlIGFzc2lzdHMgdG8gbWFrZSBhIHJvYWQgYnkKICAgICAgIHdoaWNoIGhlIG1heSBvYnRhaW4gc29tZSBpbmRpdmlkdWFsIGJlbmVmaXQgZm9yIGhpbXNlbGYuIFRoaXMgaXMgdGhlIHRyaWJ1bmUgdG8gd2hvbSBpdCBoYXMKICAgICAgIG9jY3VycmVkIGFib3ZlIGFsbCBvdGhlcnMgdG8gZGVwcml2ZSB0aGUgUm9tYW4gcGVvcGxlIG9mIHRoZWlyIHN1ZmZyYWdlcywgYW5kIHRvIGludml0ZSBhIGZldwogICAgICAgdHJpYmVzIG5vdCBieSBhbnkgZml4ZWQgY29uZGl0aW9uIG9mIGxhdywgYnV0IGJ5IHRoZSBraW5kbmVzcyBvZiBsb3RzIGRyYXduLCBhbmQgYnkgY2hhbmNlLAogICAgICAgdG8gdXN1cnAgdGhlIGxpYmVydGllcyBiZWxvbmdpbmcgdG8gYWxsLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiDigJxBbHNvCiAgICAgICBpbiB0aGUgc2FtZSBtYW5uZXIs4oCdIGl0IHNheXMgaW4gdGhlIHNlY29uZCBjbGF1c2UsIOKAnGFzIGluIHRoZSBjb21pdGlhIGZvcgogICAgICAgdGhlIGVsZWN0aW9uIG9mIGEgUG9udGlmZXggTWF4aW11cy7igJ0gSGUgZGlkIG5vdCBwZXJjZWl2ZSBldmVuIHRoaXMsIHRoYXQgb3VyCiAgICAgICBhbmNlc3RvcnMgZGlkIHJlYWxseSBzdHVkeSB0aGUgZ29vZCBvZiB0aGUgcGVvcGxlIHNvIG11Y2gsIHRoYXQsIHRob3VnaCBpdCB3YXMgbm90IGxhd2Z1bCBmb3IKICAgICAgIHRoYXQgb2ZmaWNlIHRvIGJlIGNvbmZlcnJlZCBieSB0aGUgcGVvcGxlLCBvbiBhY2NvdW50IG9mIHRoZSByZWxpZ2lvdXMgY2VyZW1vbmllcyB0aGVuIHVzZWQsCiAgICAgICBzdGlsbCwgdGhleSBjaG9zZSwgaW4gb3JkZXIgdG8gZG8gYWRkaXRpb25hbCBob25vdXIgdG8gdGhlIHByaWVzdGhvb2QsIHRoYXQgdGhlIHNhbmN0aW9uIG9mCiAgICAgICB0aGUgcGVvcGxlIHNob3VsZCBiZSBhc2tlZCBmb3IgaXQuIEFuZCBDbmFldXMgRG9taXRpdXMsIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhbmQgYSBtb3N0CiAgICAgICBlbWluZW50IG1hbiwgcGFzc2VkIHRoZSBzYW1lIGxhdyB3aXRoIHJlc3BlY3QgdG8gdGhlIG90aGVyIHByaWVzdGhvb2RzOyBlbmFjdGluZywgYmVjYXVzZSB0aGUKICAgICAgIHBlb3BsZSwgb24gYWNjb3VudCBvZiB0aGUgcmVxdWlyZW1lbnRzIG9mIHJlbGlnaW9uLCBjb3VsZCBub3QgY29uZmVyIHRoZSBwcmllc3Rob29kcywgdGhhdCBhCiAgICAgICBzbWFsbCBoYWxmIG9mIHRoZSBwZW9wbGUgc2hvdWxkIGJlIGludml0ZWQ7IGFuZCB0aGF0IHdob2V2ZXIgd2FzIHNlbGVjdGVkIGJ5IHRoYXQgaGFsZiBzaG91bGQKICAgICAgIGJlIGNob3NlbiBpbnRvIHRoZWlyIGJvZHkgYnkgdGhlIHNhY3JlZCBjb2xsZWdlLiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBTZWUgbm93CiAgICAgICBob3cgZ3JlYXQgYSBkaWZmZXJlbmNlIHRoZXJlIGlzIGJldHdlZW4gQ25hZXVzIERvbWl0aXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYSBtYW4gb2YKICAgICAgIHRoZSBoaWdoZXN0IHJhbmssIGFuZCBQdWJsaXVzIFJ1bGx1cywgd2hvIHRyaWVkIHlvdXIgcGF0aWVuY2UsIGFzIEkgaW1hZ2luZSwgd2hlbiBoZSBzYWlkCiAgICAgICB0aGF0IGhlIHdhcyBhIG5vYmxlLiBEb21pdGl1cyBjb250cml2ZWQgYSB3YXkgYnkgd2hpY2gsIGFzIGZhciBhcyBoZSB3YXMgYWJsZSwgYXMgZmFyIGFzIHdhcwogICAgICAgY29uc2lzdGVudCB3aXRoIHRoZSBsYXdzIG9mIG1lbiBhbmQgb2YgZ29kcywgaGUgbWlnaHQgY29uZmVyIG9uIGEgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIHdoYXQKICAgICAgIGNvdWxkIG5vdCBiZSBkb25lIGJ5IGFueSByZWd1bGFyIHByb2NlZWRpbmcgb24gdGhlIHBhcnQgb2YgdGhlIGVudGlyZSBwZW9wbGUuIEJ1dCB0aGlzIG1hbiwKICAgICAgIHdoZW4gdGhlcmUgd2FzIGEgdGhpbmcgd2hpY2ggaGFkIGFsd2F5cyBiZWxvbmdlZCB0byB0aGUgcGVvcGxlLCB3aGljaCBubyBvbmUgaGFkIGV2ZXIKICAgICAgIGltcGFpcmVkLCBhbmQgd2hpY2ggbm8gb25lIGhhZCBldmVyIGFsdGVyZWQs4oCUdGhlIHByaW5jaXBsZSwgbmFtZWx5LCB0aGF0IHRob3NlIHdobwogICAgICAgd2VyZSB0byBhc3NpZ24gbGFuZHMgdG8gdGhlIHBlb3BsZSwgc2hvdWxkIHJlY2VpdmUgYSBraW5kbmVzcyBmcm9tIHRoZSBSb21hbiBwZW9wbGUgYmVmb3JlCiAgICAgICB0aGV5IGNvbmZlcnJlZCBvbmUgb24gaXQ7IHRoYXQgdGhpcyBtYW4gaGFzIGVuZGVhdm91cmVkIGVudGlyZWx5IHRvIHRha2UgYXdheSBmcm9tIHlvdSwgYW5kCiAgICAgICB0byB3cmVzdCBvdXQgb2YgeW91ciBoYW5kcy4gVGhlIG9uZSBjb250cml2ZWQgc29tZWhvdyBvciBvdGhlciB0byBnaXZlIHRoYXQgd2hpY2ggY291bGQgbm90CiAgICAgICByZWFsbHkgYmUgZ2l2ZW4gZm9ybWFsbHkgdG8gdGhlIHBlb3BsZTsgdGhlIG90aGVyIGVuZGVhdm91cnMgc29tZWhvdyBvciBvdGhlciB0byB0YWtlIGF3YXkKICAgICAgIGZyb20gdGhlbSBieSBtYW5vZXV2cmUsIHdoYXQgY291bGQgbm90IHBvc3NpYmx5IGJlIHRha2VuIGZyb20gdGhlbSBieSBkaXJlY3QgcG93ZXIuCiAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcjwvZm9yZWlnbj4u4oCdIDwvdHJhbnNsYXRpb24+"
translation['2.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJIGFzaywgb24gd2hhdCBhY2NvdW50IHRoZSBmcmFtZXIgb2YgdGhpcyBsYXcgaGFzIGNvbW1lbmNlZCBoaXMgbGF3IGFuZCBoaXMKICAgICAgIG1lYXN1cmVzIGluIHN1Y2ggYSBtYW5uZXIsIGFzIHRvIGRlcHJpdmUgdGhlIFJvbWFuIHBlb3BsZSBvZiBpdHMgcmlnaHQgb2Ygdm90aW5nPyBBcyBvZnRlbiBhcwogICAgICAgYWdyYXJpYW4gbGF3cyBoYXZlIGJlZW4gcGFzc2VkLCBjb21taXNzaW9uZXJzLCBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dHJpdW12aXJzPC9mb3JlaWduPiwKICAgICAgIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5xdWlucXVldmlyczwvZm9yZWlnbj4sIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcnM8L2ZvcmVpZ24+IGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkLiBJIGFzayB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgd2hvIGlzIHNvIGF0dGFjaGVkIHRvIHRoZSBwZW9wbGUsIHdoZXRoZXIKICAgICAgIHRoZXkgd2VyZSBldmVyIGNyZWF0ZWQgZXhjZXB0IGJ5IHRoZSB3aG9sZSB0aGlydHktZml2ZSB0cmliZXM/IEluIHRydXRoLCBhcyBpdCBpcyBwcm9wZXIgZm9yCiAgICAgICBldmVyeSBwb3dlciwgYW5kIGV2ZXJ5IGNvbW1hbmQsIGFuZCBldmVyeSBjaGFyZ2Ugd2hpY2ggaXMgY29tbWl0dGVkIHRvIGFueSBvbmUsIHRvIHByb2NlZWQKICAgICAgIGZyb20gdGhlIGVudGlyZSBSb21hbiBwZW9wbGUsIHNvIGVzcGVjaWFsbHkgb3VnaHQgdGhvc2UgdG8gZG8gc28sIHdoaWNoIGFyZSBlc3RhYmxpc2hlZCBmb3IKICAgICAgIGFueSB1c2UgYW5kIGFkdmFudGFnZSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhcyB0aGF0IGlzIGEgY2FzZSBpbiB3aGljaCB0aGV5IGFsbCB0b2dldGhlcgogICAgICAgY2hvb3NlIHRoZSBtYW4gd2hvIHRoZXkgdGhpbmsgd2lsbCBtb3N0IHN0dWR5IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIGluIHdoaWNoCiAgICAgICBhbHNvIGVhY2ggaW5kaXZpZHVhbCBhbW9uZyB0aGVtIGJ5IGhpcyBvd24gemVhbCBhbmQgaGlzIG93biB2b3RlIGFzc2lzdHMgdG8gbWFrZSBhIHJvYWQgYnkKICAgICAgIHdoaWNoIGhlIG1heSBvYnRhaW4gc29tZSBpbmRpdmlkdWFsIGJlbmVmaXQgZm9yIGhpbXNlbGYuIFRoaXMgaXMgdGhlIHRyaWJ1bmUgdG8gd2hvbSBpdCBoYXMKICAgICAgIG9jY3VycmVkIGFib3ZlIGFsbCBvdGhlcnMgdG8gZGVwcml2ZSB0aGUgUm9tYW4gcGVvcGxlIG9mIHRoZWlyIHN1ZmZyYWdlcywgYW5kIHRvIGludml0ZSBhIGZldwogICAgICAgdHJpYmVzIG5vdCBieSBhbnkgZml4ZWQgY29uZGl0aW9uIG9mIGxhdywgYnV0IGJ5IHRoZSBraW5kbmVzcyBvZiBsb3RzIGRyYXduLCBhbmQgYnkgY2hhbmNlLAogICAgICAgdG8gdXN1cnAgdGhlIGxpYmVydGllcyBiZWxvbmdpbmcgdG8gYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQWxzbwogICAgICAgaW4gdGhlIHNhbWUgbWFubmVyLOKAnSBpdCBzYXlzIGluIHRoZSBzZWNvbmQgY2xhdXNlLCDigJxhcyBpbiB0aGUgY29taXRpYSBmb3IKICAgICAgIHRoZSBlbGVjdGlvbiBvZiBhIFBvbnRpZmV4IE1heGltdXMu4oCdIEhlIGRpZCBub3QgcGVyY2VpdmUgZXZlbiB0aGlzLCB0aGF0IG91cgogICAgICAgYW5jZXN0b3JzIGRpZCByZWFsbHkgc3R1ZHkgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSBzbyBtdWNoLCB0aGF0LCB0aG91Z2ggaXQgd2FzIG5vdCBsYXdmdWwgZm9yCiAgICAgICB0aGF0IG9mZmljZSB0byBiZSBjb25mZXJyZWQgYnkgdGhlIHBlb3BsZSwgb24gYWNjb3VudCBvZiB0aGUgcmVsaWdpb3VzIGNlcmVtb25pZXMgdGhlbiB1c2VkLAogICAgICAgc3RpbGwsIHRoZXkgY2hvc2UsIGluIG9yZGVyIHRvIGRvIGFkZGl0aW9uYWwgaG9ub3VyIHRvIHRoZSBwcmllc3Rob29kLCB0aGF0IHRoZSBzYW5jdGlvbiBvZgogICAgICAgdGhlIHBlb3BsZSBzaG91bGQgYmUgYXNrZWQgZm9yIGl0LiBBbmQgQ25hZXVzIERvbWl0aXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYW5kIGEgbW9zdAogICAgICAgZW1pbmVudCBtYW4sIHBhc3NlZCB0aGUgc2FtZSBsYXcgd2l0aCByZXNwZWN0IHRvIHRoZSBvdGhlciBwcmllc3Rob29kczsgZW5hY3RpbmcsIGJlY2F1c2UgdGhlCiAgICAgICBwZW9wbGUsIG9uIGFjY291bnQgb2YgdGhlIHJlcXVpcmVtZW50cyBvZiByZWxpZ2lvbiwgY291bGQgbm90IGNvbmZlciB0aGUgcHJpZXN0aG9vZHMsIHRoYXQgYQogICAgICAgc21hbGwgaGFsZiBvZiB0aGUgcGVvcGxlIHNob3VsZCBiZSBpbnZpdGVkOyBhbmQgdGhhdCB3aG9ldmVyIHdhcyBzZWxlY3RlZCBieSB0aGF0IGhhbGYgc2hvdWxkCiAgICAgICBiZSBjaG9zZW4gaW50byB0aGVpciBib2R5IGJ5IHRoZSBzYWNyZWQgY29sbGVnZS4gPC90cmFuc2xhdGlvbj4="
translation['2.7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gU2VlIG5vdwogICAgICAgaG93IGdyZWF0IGEgZGlmZmVyZW5jZSB0aGVyZSBpcyBiZXR3ZWVuIENuYWV1cyBEb21pdGl1cywgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGEgbWFuIG9mCiAgICAgICB0aGUgaGlnaGVzdCByYW5rLCBhbmQgUHVibGl1cyBSdWxsdXMsIHdobyB0cmllZCB5b3VyIHBhdGllbmNlLCBhcyBJIGltYWdpbmUsIHdoZW4gaGUgc2FpZAogICAgICAgdGhhdCBoZSB3YXMgYSBub2JsZS4gRG9taXRpdXMgY29udHJpdmVkIGEgd2F5IGJ5IHdoaWNoLCBhcyBmYXIgYXMgaGUgd2FzIGFibGUsIGFzIGZhciBhcyB3YXMKICAgICAgIGNvbnNpc3RlbnQgd2l0aCB0aGUgbGF3cyBvZiBtZW4gYW5kIG9mIGdvZHMsIGhlIG1pZ2h0IGNvbmZlciBvbiBhIHBvcnRpb24gb2YgdGhlIHBlb3BsZSB3aGF0CiAgICAgICBjb3VsZCBub3QgYmUgZG9uZSBieSBhbnkgcmVndWxhciBwcm9jZWVkaW5nIG9uIHRoZSBwYXJ0IG9mIHRoZSBlbnRpcmUgcGVvcGxlLiBCdXQgdGhpcyBtYW4sCiAgICAgICB3aGVuIHRoZXJlIHdhcyBhIHRoaW5nIHdoaWNoIGhhZCBhbHdheXMgYmVsb25nZWQgdG8gdGhlIHBlb3BsZSwgd2hpY2ggbm8gb25lIGhhZCBldmVyCiAgICAgICBpbXBhaXJlZCwgYW5kIHdoaWNoIG5vIG9uZSBoYWQgZXZlciBhbHRlcmVkLOKAlHRoZSBwcmluY2lwbGUsIG5hbWVseSwgdGhhdCB0aG9zZSB3aG8KICAgICAgIHdlcmUgdG8gYXNzaWduIGxhbmRzIHRvIHRoZSBwZW9wbGUsIHNob3VsZCByZWNlaXZlIGEga2luZG5lc3MgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIGJlZm9yZQogICAgICAgdGhleSBjb25mZXJyZWQgb25lIG9uIGl0OyB0aGF0IHRoaXMgbWFuIGhhcyBlbmRlYXZvdXJlZCBlbnRpcmVseSB0byB0YWtlIGF3YXkgZnJvbSB5b3UsIGFuZAogICAgICAgdG8gd3Jlc3Qgb3V0IG9mIHlvdXIgaGFuZHMuIFRoZSBvbmUgY29udHJpdmVkIHNvbWVob3cgb3Igb3RoZXIgdG8gZ2l2ZSB0aGF0IHdoaWNoIGNvdWxkIG5vdAogICAgICAgcmVhbGx5IGJlIGdpdmVuIGZvcm1hbGx5IHRvIHRoZSBwZW9wbGU7IHRoZSBvdGhlciBlbmRlYXZvdXJzIHNvbWVob3cgb3Igb3RoZXIgdG8gdGFrZSBhd2F5CiAgICAgICBmcm9tIHRoZW0gYnkgbWFub2V1dnJlLCB3aGF0IGNvdWxkIG5vdCBwb3NzaWJseSBiZSB0YWtlbiBmcm9tIHRoZW0gYnkgZGlyZWN0IHBvd2VyLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNvbWUgb25lIHdpbGwgYXNrIHdoYXQgd2FzIGhpcyBwdXJwb3NlIGluIHN1Y2ggaW5qdXN0aWNlIGFuZCBzdWNoIGltcHVkZW5jZS4gSGUgd2FzIG5vdAogICAgICAgd2l0aG91dCBhbiBvYmplY3QuIEJ1dCBnb29kIGZhaXRoIHRvd2FyZHMgdGhlIFJvbWFuIHBlb3BsZSwganVzdCBmZWVsaW5ncyB0b3dhcmRzIHlvdSBhbmQKICAgICAgIHlvdXIgbGliZXJ0eSwgaGUgd2FzIHV0dGVybHkgd2l0aG91dC4gRm9yIGhlIG9yZGVycyB0aGUgbWFuIHdobyBoYXMgcGFzc2VkIHRoZSBsYXcgdG8gaG9sZAogICAgICAgdGhlIGNvbWl0aWEgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgZGVjZW12aXJzLiBJIHdpbGwgc3RhdGUgdGhlIGNhc2UgbW9yZSBwbGFpbmx5LiBSdWxsdXMsIGFzCiAgICAgICBhIG1hbiBmYXIgZnJvbSBiZWluZyBjb3ZldG91cyBvciBhbWJpdGlvdXMsIG9yZGVycyBSdWxsdXMgdG8gaG9sZCB0aGUgY29taXRpYS4gSSBkbyBub3QgZmluZAogICAgICAgZmF1bHQgeWV0LiBJIHNlZSB0aGF0IG90aGVycyBoYXZlIGRvbmUgdGhlIHNhbWUgdGhpbmcuIE5vdyBzZWUgd2hhdCBpcyB0aGUgb2JqZWN0IG9mIHRoaXMsCiAgICAgICB3aGljaCBubyBvbmUgZWxzZSBldmVyIGRpZCwgd2l0aCByZXNwZWN0IHRvIHRoZSBzbWFsbGVyIGhhbGYgb2YgdGhlIHBlb3BsZS4gSGUgd2lsbCBob2xkIHRoZQogICAgICAgY29taXRpYTsgaGUgd2lzaGVzIHRvIGhhdmUgdGhlIGFwcG9pbnRtZW50IG9mIHRob3NlIG9mZmljZXJzIGZvciB3aG9tIGtpbmdseSBwb3dlciBpcyBzb3VnaHQKICAgICAgIHRvIGJlIHByb2N1cmVkIGJ5IHRoaXMgbGF3LiBIZSBoaW1zZWxmIHdpbGwgbm90IGVudHJ1c3QgaXQgdG8gdGhlIGVudGlyZSBwZW9wbGUsIG5vciBkbyB0aG9zZQogICAgICAgd2hvIHdlcmUgdGhlIG9yaWdpbmFsIGluc3RpZ2F0b3JzIG9mIHRoZXNlIGRlc2lnbnMgdGhpbmsgaXQgb3VnaHQgdG8gYmUgZW50cnVzdGVkIHRvIHRoZW0uCiAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgc2FtZSBSdWxsdXMgd2lsbCBjYXN0IGxvdHMgYmV0d2VlbiB0aGUgdHJpYmVzLiBIZSwKICAgICAgIGhhcHB5IG1hbiwgd2lsbCBwaWNrIG91dCB0aGUgdHJpYmVzIHdoaWNoIGhlIHByZWZlcnMuIFRob3NlIGRlY2VtdmlycyB3aG9tIHRoZSBuaW5lIHRyaWJlcwogICAgICAgc2VsZWN0ZWQgYnkgdGhpcyBzYW1lIFJ1bGx1cyBtYXkgY2hvb3NlIHRvIGFwcG9pbnQsIHdlIHNoYWxsIGhhdmUsIGFzIEkgc2hhbGwgcHJlc2VudGx5IHNob3csCiAgICAgICBmb3Igb3VyIGFic29sdXRlIG1hc3RlcnMgaW4gZXZlcnl0aGluZy4gQW5kIHRoZXksIHRoYXQgdGhleSBtYXkgYXBwZWFyIHRvIGJlIGdyYXRlZnVsIG1lbiwKICAgICAgIGFuZCB0byBiZSBtaW5kZnVsIG9mIGtpbmRuZXNzLCB3aWxsIGNvbmZlc3MgdGhhdCB0aGV5IGFyZSBpbmRlYnRlZCB0byB0aGUgbGVhZGluZyBtZW4gb2YKICAgICAgIHRoZXNlIG5pbmUgdHJpYmVzLiBCdXQgYXMgZm9yIHRoZSBvdGhlciBzaXgtYW5kLXR3ZW50eSB0cmliZXMsIHRoZXJlIHdpbGwgYmUgbm90aGluZyB3aGljaAogICAgICAgdGhleSB3aWxsIG5vdCB0aGluayB0aGF0IHRoZXkgaGF2ZSBhIHJpZ2h0IHRvIHJlZnVzZSB0aGVtLiBXaG8gYXJlIHRoZXksIHRoZW4sIHdob20gaGUgbWVhbnMKICAgICAgIHRvIGhhdmUgZWxlY3RlZCB0cmlidW5lcz8gSW4gdGhlIGZpcnN0IHBsYWNlLCBoaW1zZWxmLiBIb3cgY2FuIHRoYXQgYmUgbGF3ZnVsPyBGb3IgdGhlcmUgYXJlCiAgICAgICBvbGQgbGF3cywgYW5kIHRob3NlIHRvbyBub3QgbGF3cyBtYWRlIGJ5IGNvbnN1bHMsIGlmIHlvdSB0aGluayB0aGF0IHRoYXQgbWFrZXMgYW55CiAgICAgICBkaWZmZXJlbmNlLCBidXQgbWFkZSBieSB0cmlidW5lcywgdmVyeSBwbGVhc2luZyBhbmQgYWdyZWVhYmxlIHRvIHlvdSBhbmQgdG8geW91ciBhbmNlc3RvcnMuCiAgICAgICBUaGVyZSBpcyB0aGUgTGljaW5pYW4gbGF3LCBhbmQgdGhlIHNlY29uZCBBZWJ1dGlhbiBsYXc7IHdoaWNoIGV4Y2VwdHMgbm90IG9ubHkgdGhlIG1hbiB3aG8KICAgICAgIGhhcyBjYXVzZWQgYSBsYXcgdG8gYmUgcGFzc2VkIGNvbmNlcm5pbmcgYW55IGNvbW1pc3Npb24gb3IgcG93ZXIsIGJ1dCBhbHNvIGFsbCBoaXMgY29sbGVhZ3VlcwogICAgICAgYW5kIGFsbCBoaXMgY29ubmVjdGlvbnMsIGFuZCBpbmNhcGFjaXRhdGVzIHRoZW0gZnJvbSBiZWluZyBhcHBvaW50ZWQgdG8gYW55IHBvd2VyIG9yCiAgICAgICBjb21taXNzaW9uIHNvIGVzdGFibGlzaGVkLiA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0cnV0aCwgaWYgeW91IGNvbnN1bHQgdGhlCiAgICAgICBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZSwgcmVtb3ZlIHlvdXJzZWxmIGZyb20gYWxsIHN1c3BpY2lvbiBvZiBhbnkgYWR2YW50YWdlIHRvIHlvdXJzZWxmOwogICAgICAgYWxsb3cgdGhlIHBvd2VyIHRvIGFjY3J1ZSB0byBvdGhlcnMsIGdyYXRpdHVkZSBmb3IgdGhlIGdvb2QgeW91IGhhdmUgZG9uZSBtdXN0IGJlIGVub3VnaCBmb3IKICAgICAgIHlvdXJzZWxmLiBGb3Igc3VjaCBjb25kdWN0IGFzIHRoaXMgaXMgc2NhcmNlbHkgYmVjb21pbmcgaW4gYSBmcmVlIHBlb3BsZSwgaXQgaXMgc2NhcmNlbHkKICAgICAgIGNvbnNpc3RlbnQgd2l0aCB5b3VyIHNwaXJpdCBhbmQgZGlnbml0eS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIHNhbWUgUnVsbHVzIHdpbGwgY2FzdCBsb3RzIGJldHdlZW4gdGhlIHRyaWJlcy4gSGUsCiAgICAgICBoYXBweSBtYW4sIHdpbGwgcGljayBvdXQgdGhlIHRyaWJlcyB3aGljaCBoZSBwcmVmZXJzLiBUaG9zZSBkZWNlbXZpcnMgd2hvbSB0aGUgbmluZSB0cmliZXMKICAgICAgIHNlbGVjdGVkIGJ5IHRoaXMgc2FtZSBSdWxsdXMgbWF5IGNob29zZSB0byBhcHBvaW50LCB3ZSBzaGFsbCBoYXZlLCBhcyBJIHNoYWxsIHByZXNlbnRseSBzaG93LAogICAgICAgZm9yIG91ciBhYnNvbHV0ZSBtYXN0ZXJzIGluIGV2ZXJ5dGhpbmcuIEFuZCB0aGV5LCB0aGF0IHRoZXkgbWF5IGFwcGVhciB0byBiZSBncmF0ZWZ1bCBtZW4sCiAgICAgICBhbmQgdG8gYmUgbWluZGZ1bCBvZiBraW5kbmVzcywgd2lsbCBjb25mZXNzIHRoYXQgdGhleSBhcmUgaW5kZWJ0ZWQgdG8gdGhlIGxlYWRpbmcgbWVuIG9mCiAgICAgICB0aGVzZSBuaW5lIHRyaWJlcy4gQnV0IGFzIGZvciB0aGUgb3RoZXIgc2l4LWFuZC10d2VudHkgdHJpYmVzLCB0aGVyZSB3aWxsIGJlIG5vdGhpbmcgd2hpY2gKICAgICAgIHRoZXkgd2lsbCBub3QgdGhpbmsgdGhhdCB0aGV5IGhhdmUgYSByaWdodCB0byByZWZ1c2UgdGhlbS4gV2hvIGFyZSB0aGV5LCB0aGVuLCB3aG9tIGhlIG1lYW5zCiAgICAgICB0byBoYXZlIGVsZWN0ZWQgdHJpYnVuZXM/IEluIHRoZSBmaXJzdCBwbGFjZSwgaGltc2VsZi4gSG93IGNhbiB0aGF0IGJlIGxhd2Z1bD8gRm9yIHRoZXJlIGFyZQogICAgICAgb2xkIGxhd3MsIGFuZCB0aG9zZSB0b28gbm90IGxhd3MgbWFkZSBieSBjb25zdWxzLCBpZiB5b3UgdGhpbmsgdGhhdCB0aGF0IG1ha2VzIGFueQogICAgICAgZGlmZmVyZW5jZSwgYnV0IG1hZGUgYnkgdHJpYnVuZXMsIHZlcnkgcGxlYXNpbmcgYW5kIGFncmVlYWJsZSB0byB5b3UgYW5kIHRvIHlvdXIgYW5jZXN0b3JzLgogICAgICAgVGhlcmUgaXMgdGhlIExpY2luaWFuIGxhdywgYW5kIHRoZSBzZWNvbmQgQWVidXRpYW4gbGF3OyB3aGljaCBleGNlcHRzIG5vdCBvbmx5IHRoZSBtYW4gd2hvCiAgICAgICBoYXMgY2F1c2VkIGEgbGF3IHRvIGJlIHBhc3NlZCBjb25jZXJuaW5nIGFueSBjb21taXNzaW9uIG9yIHBvd2VyLCBidXQgYWxzbyBhbGwgaGlzIGNvbGxlYWd1ZXMKICAgICAgIGFuZCBhbGwgaGlzIGNvbm5lY3Rpb25zLCBhbmQgaW5jYXBhY2l0YXRlcyB0aGVtIGZyb20gYmVpbmcgYXBwb2ludGVkIHRvIGFueSBwb3dlciBvcgogICAgICAgY29tbWlzc2lvbiBzbyBlc3RhYmxpc2hlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdHJ1dGgsIGlmIHlvdSBjb25zdWx0IHRoZQogICAgICAgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIHJlbW92ZSB5b3Vyc2VsZiBmcm9tIGFsbCBzdXNwaWNpb24gb2YgYW55IGFkdmFudGFnZSB0byB5b3Vyc2VsZjsKICAgICAgIGFsbG93IHRoZSBwb3dlciB0byBhY2NydWUgdG8gb3RoZXJzLCBncmF0aXR1ZGUgZm9yIHRoZSBnb29kIHlvdSBoYXZlIGRvbmUgbXVzdCBiZSBlbm91Z2ggZm9yCiAgICAgICB5b3Vyc2VsZi4gRm9yIHN1Y2ggY29uZHVjdCBhcyB0aGlzIGlzIHNjYXJjZWx5IGJlY29taW5nIGluIGEgZnJlZSBwZW9wbGUsIGl0IGlzIHNjYXJjZWx5CiAgICAgICBjb25zaXN0ZW50IHdpdGggeW91ciBzcGlyaXQgYW5kIGRpZ25pdHkuIDwvdHJhbnNsYXRpb24+"
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIHBhc3NlZCB0aGUgbGF3PyBSdWxsdXMuIFdobyBwcmV2ZW50ZWQgdGhlIGdyZWF0ZXIgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIGZyb20gaGF2aW5nIGEKICAgICAgIHZvdGU/IFJ1bGx1cy4gV2hvIHByZXNpZGVkIG92ZXIgdGhlIGNvbWl0aWE/IFdobyBzdW1tb25lZCB0byB0aGUgZWxlY3Rpb24gd2hhdGV2ZXIgdHJpYmVzIGhlCiAgICAgICBwbGVhc2VkLCBoYXZpbmcgZHJhd24gdGhlIGxvdHMgZm9yIHRoZW0gd2l0aG91dCBhbnkgd2l0bmVzcyBiZWluZyBwcmVzZW50IHRvIHNlZSBmYWlyIHBsYXk/CiAgICAgICBXaG8gYXBwb2ludGVkIHdoYXRldmVyIGRlY2VtdmlycyBoZSBjaG9zZT8gVGhpcyBzYW1lIFJ1bGx1cy4gV2hvbSBkaWQgaGUgYXBwb2ludCBjaGllZiBvZiB0aGUKICAgICAgIGRlY2Vtdmlycz8gUnVsbHVzLiBJIGhhcmRseSBiZWxpZXZlIHRoYXQgaGUgY291bGQgaW5kdWNlIGhpcyBvd24gc2xhdmVzIHRvIGFwcHJvdmUgb2YgdGhpczsKICAgICAgIG11Y2ggbGVzcyB5b3UsIHdobyBhcmUgdGhlIG1hc3RlcnMgb2YgYWxsIG5hdGlvbnMuIFRoZXJlZm9yZSwgdGhlIG1vc3QgZXhjZWxsZW50IGxhd3Mgd2lsbCBiZQogICAgICAgcmVwZWFsZWQgYnkgdGhpcyBsYXcgd2l0aG91dCB0aGUgbGVhc3Qgc3VzcGljaW9uIG9mIHRoZSBmYWN0LiBIZSB3aWxsIHNlZWsgZm9yIGEgY29tbWlzc2lvbgogICAgICAgZm9yIGhpbXNlbGYgYnkgdmlydHVlIG9mIGhpcyBvd24gbGF3OyBoZSB3aWxsIGhvbGQgY29taXRpYSwgdGhvdWdoIHRoZSBncmVhdGVyIHBvcnRpb24gb2YgdGhlCiAgICAgICBwZW9wbGUgaXMgc3RyaXBwZWQgb2YgdGhlaXIgdm90ZXM7IGhlIHdpbGwgYXBwb2ludCB3aG9tc29ldmVyIGhlIHBsZWFzZXMsIGFuZCBoaW1zZWxmIGFtb25nCiAgICAgICB0aGVtOyBhbmQgZm9yc29vdGggaGUgd2lsbCBub3QgcmVqZWN0IGhpcyBvd24gY29sbGVhZ3VlcywgdGhlIGJhY2tlcnMgb2YgdGhpcyBhZ3JhcmlhbiBsYXcgYnkKICAgICAgIHdob20gdGhlIGZpcnN0IHBsYWNlIGluIHRoZSB1bnBvcHVsYXJpdHkgd2hpY2ggbWF5IHBvc3NpYmx5IGFyaXNlIGZyb20gZHJhd2luZyB0aGUgbGF3LCBhbmQKICAgICAgIGZyb20gaGF2aW5nIGhpcyBuYW1lIGF0IHRoZSBoZWFkIG9mIGl0LCBoYXMgaW5kZWVkIGJlZW4gY29uY2VkZWQgdG8gaGltLCBidXQgdGhlIHByb2ZpdCBmcm9tCiAgICAgICB0aGUgd2hvbGUgYnVzaW5lc3MsIHRoZXksIHdobyBpbiB0aGUgaG9wZSBvZiBpdCBhcmUgcGxhY2VkIGluIHRoaXMgcG9zaXRpb24sIHJlc2VydmUgdG8KICAgICAgIHRoZW1zZWx2ZXMgaW4gZXF1YWwgc2hhcmVzIHdpdGggaGltLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIGxhc3QgZm91ciBsaW5lcyBvZiB0aGlzCiAgICAgICAgcGFyYWdyYXBoIGFyZSB2ZXJ5IGNvcnJ1cHQgaW4gdGhlIG9yaWdpbmFsLCBhbmQgdGhlcmUgaXMgYSBnb29kIGRlYWwgb2YgdmFyaWV0eSBpbiB0aGUKICAgICAgICByZWFkaW5ncy48L25vdGU+CiAgICAgIDwvcD4KCQkJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBsYXN0IGZvdXIgbGluZXMgb2YgdGhpcwogICAgICAgIHBhcmFncmFwaCBhcmUgdmVyeSBjb3JydXB0IGluIHRoZSBvcmlnaW5hbCwgYW5kIHRoZXJlIGlzIGEgZ29vZCBkZWFsIG9mIHZhcmlldHkgaW4gdGhlCiAgICAgICAgcmVhZGluZ3MuPC9ub3RlPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyB0YWtlIG5vdGljZSBvZiB0aGUgZGlsaWdlbmNlIG9mIHRoZSBtYW4sIGlmCiAgICAgICBpbmRlZWQgeW91IHRoaW5rIHRoYXQgUnVsbHVzIGNvbnRyaXZlZCB0aGlzLCBvciB0aGF0IGl0IGlzIGEgdGhpbmcgd2hpY2ggY291bGQgcG9zc2libHkgaGF2ZQogICAgICAgb2NjdXJyZWQgdG8gUnVsbHVzLiBUaG9zZSBtZW4gd2hvIGZpcnN0IHByb2plY3RlZCB0aGVzZSBtZWFzdXJlcyBzYXcsIHRoYXQsIGlmIHlvdSBoYWQgdGhlCiAgICAgICBwb3dlciBvZiBtYWtpbmcgeW91ciBzZWxlY3Rpb24gb3V0IG9mIHRoZSB3aG9sZSBwZW9wbGUsIHdoYXRldmVyIHRoZSBtYXR0ZXIgbWlnaHQgYmUgaW4gd2hpY2gKICAgICAgIGdvb2QgZmFpdGgsIGludGVncml0eSwgdmlydHVlLCBhbmQgYXV0aG9yaXR5IHdlcmUgcmVxdWlyZWQsIHlvdSB3b3VsZCBiZXlvbmQgYWxsIHF1ZXN0aW9uCiAgICAgICBlbnRydXN0IGl0IHRvIENuYWV1cyBQb21wZWl1cyBhcyB0aGUgY2hpZWYgbWFuYWdlci4gSW4gdHJ1dGgsIGFmdGVyIHlvdSBoYWQgY2hvc2VuIG9uZSBtYW4KICAgICAgIG91dCBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBhbmQgYXBwb2ludGVkIGhpbSB0byBjb25kdWN0IGFsbCB5b3VyIHdhcnMgYWdhaW5zdCBhbGwgbmF0aW9ucyBieQogICAgICAgbGFuZCBhbmQgc2VhLCB0aGV5IHNhdyBwbGFpbmx5IHRoYXQgaXQgd2FzIG1vc3QgbmF0dXJhbCB0aGF0LCB3aGVuIHlvdSB3ZXJlIGFwcG9pbnRpbmcKICAgICAgIGRlY2Vtdmlycywgd2hldGhlciBpdCB3YXMgdG8gYmUgbG9va2VkIG9uIGFzIGNvbW1pdHRpbmcgYSB0cnVzdCB0bywgb3IgY29uZmVycmluZyBhbiBob25vdXIKICAgICAgIG9uIGEgbWFuLCB5b3Ugd291bGQgY29tbWl0IHRoZSBidXNpbmVzcyB0byBoaW0sIGFuZCBtb3N0IHJlYXNvbmFibGUgdGhhdCBoZSBzaG91bGQgaGF2ZSB0aGlzCiAgICAgICBjb21wbGltZW50IHBhaWQgaGltLiA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIGFuIGV4Y2VwdGlvbiBpcyBtYWRlIGJ5CiAgICAgICB0aGlzIGxhdywgbWVudGlvbmluZyBub3QgeW91dGgsIG5vciBhbnkgbGVnYWwgaW1wZWRpbWVudCwgbm9yIGFueSBjb21tYW5kIG9yIG1hZ2lzdHJhY3ksCiAgICAgICB3aGljaCBtaWdodCBiZSBlbmN1bWJlcmVkIHdpdGggb2JzdGFjbGVzIGFyaXNpbmcgZWl0aGVyIGZyb20gdGhlIGJ1c2luZXNzIHdpdGggd2hpY2ggaXQgd2FzCiAgICAgICBhbHJlYWR5IGxvYWRlZCwgb3IgZnJvbSB0aGUgbGF3cy4gVGhlcmUgaXMgbm90IGV2ZW4gYW4gZXhjZXB0aW9uIG1hZGUgaW4gdGhlIGNhc2Ugb2YgYW55CiAgICAgICBjb252aWN0ZWQgcGVyc29uLCB0byBwcmV2ZW50IGhpcyBiZWluZyBtYWRlIGEgPGZvcmVpZ24gbGFuZz0ibGEiPmRlY2VtdmlyPC9mb3JlaWduPi4gQ25hZXVzCiAgICAgICBQb21wZWl1cyBpcyBleGNlcHRlZCBhbmQgZGlzYWJsZWQgZnJvbSBiZWluZyBlbGVjdGVkIGEgY29sbGVhZ3VlIG9mIFB1YmxpdXMgUnVsbHVzIChmb3IgSSBzYXkKICAgICAgIG5vdGhpbmcgb2YgdGhlIHJlc3QpLiBGb3IgaGUgaGFzIHdvcmRlZCB0aGUgbGF3IHNvIHRoYXQgb25seSB0aG9zZSB3aG8gYXJlIHByZXNlbnQgY2FuIHN0YW5kCiAgICAgICBmb3IgdGhlIG9mZmljZTsgYSBjbGF1c2Ugd2hpY2ggd2FzIG5ldmVyIHlldCBmb3VuZCBpbiBhbnkgb3RoZXIgbGF3LCBub3QgZXZlbiBpbiB0aGUgbGF3cwogICAgICAgY29uY2VybmluZyB0aG9zZSBtYWdpc3RyYXRlcyB3aG8gYXJlIHBlcmlvZGljYWxseSBlbGVjdGVkLiBCdXQgdGhpcyBjbGF1c2Ugd2FzIGluc2VydGVkLCBpbgogICAgICAgb3JkZXIgdGhhdCBpZiB0aGUgbGF3IHBhc3NlZCB5b3UgbWlnaHQgbm90IGJlIGFibGUgdG8gZ2l2ZSBoaW0gYSBjb2xsZWFndWUgd2hvIHdvdWxkIGJlIGEKICAgICAgIGd1YXJkaWFuIG92ZXIgaGltLCBhbmQgYSBjaGVjayB1cG9uIGhpcyBjb3ZldG91c25lc3MuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyB0YWtlIG5vdGljZSBvZiB0aGUgZGlsaWdlbmNlIG9mIHRoZSBtYW4sIGlmCiAgICAgICBpbmRlZWQgeW91IHRoaW5rIHRoYXQgUnVsbHVzIGNvbnRyaXZlZCB0aGlzLCBvciB0aGF0IGl0IGlzIGEgdGhpbmcgd2hpY2ggY291bGQgcG9zc2libHkgaGF2ZQogICAgICAgb2NjdXJyZWQgdG8gUnVsbHVzLiBUaG9zZSBtZW4gd2hvIGZpcnN0IHByb2plY3RlZCB0aGVzZSBtZWFzdXJlcyBzYXcsIHRoYXQsIGlmIHlvdSBoYWQgdGhlCiAgICAgICBwb3dlciBvZiBtYWtpbmcgeW91ciBzZWxlY3Rpb24gb3V0IG9mIHRoZSB3aG9sZSBwZW9wbGUsIHdoYXRldmVyIHRoZSBtYXR0ZXIgbWlnaHQgYmUgaW4gd2hpY2gKICAgICAgIGdvb2QgZmFpdGgsIGludGVncml0eSwgdmlydHVlLCBhbmQgYXV0aG9yaXR5IHdlcmUgcmVxdWlyZWQsIHlvdSB3b3VsZCBiZXlvbmQgYWxsIHF1ZXN0aW9uCiAgICAgICBlbnRydXN0IGl0IHRvIENuYWV1cyBQb21wZWl1cyBhcyB0aGUgY2hpZWYgbWFuYWdlci4gSW4gdHJ1dGgsIGFmdGVyIHlvdSBoYWQgY2hvc2VuIG9uZSBtYW4KICAgICAgIG91dCBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBhbmQgYXBwb2ludGVkIGhpbSB0byBjb25kdWN0IGFsbCB5b3VyIHdhcnMgYWdhaW5zdCBhbGwgbmF0aW9ucyBieQogICAgICAgbGFuZCBhbmQgc2VhLCB0aGV5IHNhdyBwbGFpbmx5IHRoYXQgaXQgd2FzIG1vc3QgbmF0dXJhbCB0aGF0LCB3aGVuIHlvdSB3ZXJlIGFwcG9pbnRpbmcKICAgICAgIGRlY2Vtdmlycywgd2hldGhlciBpdCB3YXMgdG8gYmUgbG9va2VkIG9uIGFzIGNvbW1pdHRpbmcgYSB0cnVzdCB0bywgb3IgY29uZmVycmluZyBhbiBob25vdXIKICAgICAgIG9uIGEgbWFuLCB5b3Ugd291bGQgY29tbWl0IHRoZSBidXNpbmVzcyB0byBoaW0sIGFuZCBtb3N0IHJlYXNvbmFibGUgdGhhdCBoZSBzaG91bGQgaGF2ZSB0aGlzCiAgICAgICBjb21wbGltZW50IHBhaWQgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCBhbiBleGNlcHRpb24gaXMgbWFkZSBieQogICAgICAgdGhpcyBsYXcsIG1lbnRpb25pbmcgbm90IHlvdXRoLCBub3IgYW55IGxlZ2FsIGltcGVkaW1lbnQsIG5vciBhbnkgY29tbWFuZCBvciBtYWdpc3RyYWN5LAogICAgICAgd2hpY2ggbWlnaHQgYmUgZW5jdW1iZXJlZCB3aXRoIG9ic3RhY2xlcyBhcmlzaW5nIGVpdGhlciBmcm9tIHRoZSBidXNpbmVzcyB3aXRoIHdoaWNoIGl0IHdhcwogICAgICAgYWxyZWFkeSBsb2FkZWQsIG9yIGZyb20gdGhlIGxhd3MuIFRoZXJlIGlzIG5vdCBldmVuIGFuIGV4Y2VwdGlvbiBtYWRlIGluIHRoZSBjYXNlIG9mIGFueQogICAgICAgY29udmljdGVkIHBlcnNvbiwgdG8gcHJldmVudCBoaXMgYmVpbmcgbWFkZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlY2VtdmlyPC9mb3JlaWduPi4gQ25hZXVzCiAgICAgICBQb21wZWl1cyBpcyBleGNlcHRlZCBhbmQgZGlzYWJsZWQgZnJvbSBiZWluZyBlbGVjdGVkIGEgY29sbGVhZ3VlIG9mIFB1YmxpdXMgUnVsbHVzIChmb3IgSSBzYXkKICAgICAgIG5vdGhpbmcgb2YgdGhlIHJlc3QpLiBGb3IgaGUgaGFzIHdvcmRlZCB0aGUgbGF3IHNvIHRoYXQgb25seSB0aG9zZSB3aG8gYXJlIHByZXNlbnQgY2FuIHN0YW5kCiAgICAgICBmb3IgdGhlIG9mZmljZTsgYSBjbGF1c2Ugd2hpY2ggd2FzIG5ldmVyIHlldCBmb3VuZCBpbiBhbnkgb3RoZXIgbGF3LCBub3QgZXZlbiBpbiB0aGUgbGF3cwogICAgICAgY29uY2VybmluZyB0aG9zZSBtYWdpc3RyYXRlcyB3aG8gYXJlIHBlcmlvZGljYWxseSBlbGVjdGVkLiBCdXQgdGhpcyBjbGF1c2Ugd2FzIGluc2VydGVkLCBpbgogICAgICAgb3JkZXIgdGhhdCBpZiB0aGUgbGF3IHBhc3NlZCB5b3UgbWlnaHQgbm90IGJlIGFibGUgdG8gZ2l2ZSBoaW0gYSBjb2xsZWFndWUgd2hvIHdvdWxkIGJlIGEKICAgICAgIGd1YXJkaWFuIG92ZXIgaGltLCBhbmQgYSBjaGVjayB1cG9uIGhpcyBjb3ZldG91c25lc3MuIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUsIHNpbmNlIEkgc2VlIHRoYXQgeW91IGFyZSBtb3ZlZCBieSB0aGUgZGlnbml0eSBvZiB0aGUgbWFuLCBhbmQgYnkgdGhlIGluc3VsdCBwdXQgdXBvbgogICAgICAgaGltIGJ5IHRoaXMgbGF3LCBJIHdpbGwgcmV0dXJuIHRvIHRoZSBhc3NlcnRpb24gdGhhdCBJIG1hZGUgYXQgdGhlIGJlZ2lubmluZywgdGhhdCBhIGtpbmdseQogICAgICAgcG93ZXIgaXMgYmVpbmcgZXJlY3RlZCwgYW5kIHlvdXIgbGliZXJ0aWVzIGVudGlyZWx5IHRha2VuIGF3YXkgYnkgdGhpcyBsYXcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIHlvdSB0aGluaywgb3RoZXJ3aXNlLCB0aGF0IHdoZW4gYSBmZXcgbWVuIGhhZCBjYXN0IHRoZSBleWVzIG9mCiAgICAgICBjb3ZldG91c25lc3Mgb24gYWxsIHlvdXIgcG9zc2Vzc2lvbnMsIHRoZXkgd291bGQgbm90IGluIHRoZSB2ZXJ5IGZpcnN0IHBsYWNlIHRha2UgY2FyZSB0aGF0CiAgICAgICBDbmFldXMgUG9tcGVpdXMgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBhbGwgcG93ZXIgb2YgcHJvdGVjdGluZyB5b3VyIGxpYmVydHksIGZyb20gYWxsIHBvd2VyCiAgICAgICB0byBwcm9tb3RlLCBmcm9tIGFsbCBjb21taXNzaW9uIHRvIHdhdGNoIG92ZXIsIGFuZCBmcm9tIGFsbCBtZWFucyBvZiBwcm90ZWN0aW5nIHlvdXIKICAgICAgIGludGVyZXN0cz8gVGhleSBzYXcsIGFuZCB0aGV5IHNlZSBzdGlsbCwgdGhhdCBpZiwgdGhyb3VnaCB5b3VyIG93biBpbXBydWRlbmNlIGFuZCBteQogICAgICAgbmVnbGlnZW5jZSwgeW91IGFkb3B0IHRoaXMgbGF3LCB3aXRob3V0IHVuZGVyc3RhbmRpbmcgaXRzIGVmZmVjdCwgeW91IHdvdWxkIGFmdGVyd2FyZHMsIHdoZW4KICAgICAgIHlvdSB3ZXJlIGNyZWF0aW5nIGRlY2VtdmlycywgdGhpbmsgaXQgZXhwZWRpZW50IHRvIG9wcG9zZSBDbmFldXMgUG9tcGVpdXMgYXMgeW91ciBkZWZlbmNlCiAgICAgICBhZ2FpbnN0IGFsbCBkZWZlY3RzIGFuZCB3aWNrZWRuZXNzZXMgaW4gdGhlIGxhdy4gQW5kIGlzIHRoaXMgYSBzbGlnaHQgYXJndW1lbnQgdG8geW91LCB0aGF0CiAgICAgICB0aGVzZSBhcmUgbWVuIGJ5IHdob20gZG9taW5pb24gYW5kIHBvd2VyIG92ZXIgZXZlcnl0aGluZyBpcyBzb3VnaHQsIHdoZW4geW91IHNlZSB0aGF0IGhlLAogICAgICAgd2hvbSB0aGV5IHNlZSB3aWxsIHN1cmVseSBiZSB0aGUgcHJvdGVjdG9yIG9mIHlvdXIgbGliZXJ0eSwgaXMgdGhlIG9ubHkgb25lIHRvIHdob20gdGhhdAogICAgICAgZGlnbml0eSBpcyBkZW5pZWQ/IDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIHlvdSB0aGluaywgb3RoZXJ3aXNlLCB0aGF0IHdoZW4gYSBmZXcgbWVuIGhhZCBjYXN0IHRoZSBleWVzIG9mCiAgICAgICBjb3ZldG91c25lc3Mgb24gYWxsIHlvdXIgcG9zc2Vzc2lvbnMsIHRoZXkgd291bGQgbm90IGluIHRoZSB2ZXJ5IGZpcnN0IHBsYWNlIHRha2UgY2FyZSB0aGF0CiAgICAgICBDbmFldXMgUG9tcGVpdXMgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBhbGwgcG93ZXIgb2YgcHJvdGVjdGluZyB5b3VyIGxpYmVydHksIGZyb20gYWxsIHBvd2VyCiAgICAgICB0byBwcm9tb3RlLCBmcm9tIGFsbCBjb21taXNzaW9uIHRvIHdhdGNoIG92ZXIsIGFuZCBmcm9tIGFsbCBtZWFucyBvZiBwcm90ZWN0aW5nIHlvdXIKICAgICAgIGludGVyZXN0cz8gVGhleSBzYXcsIGFuZCB0aGV5IHNlZSBzdGlsbCwgdGhhdCBpZiwgdGhyb3VnaCB5b3VyIG93biBpbXBydWRlbmNlIGFuZCBteQogICAgICAgbmVnbGlnZW5jZSwgeW91IGFkb3B0IHRoaXMgbGF3LCB3aXRob3V0IHVuZGVyc3RhbmRpbmcgaXRzIGVmZmVjdCwgeW91IHdvdWxkIGFmdGVyd2FyZHMsIHdoZW4KICAgICAgIHlvdSB3ZXJlIGNyZWF0aW5nIGRlY2VtdmlycywgdGhpbmsgaXQgZXhwZWRpZW50IHRvIG9wcG9zZSBDbmFldXMgUG9tcGVpdXMgYXMgeW91ciBkZWZlbmNlCiAgICAgICBhZ2FpbnN0IGFsbCBkZWZlY3RzIGFuZCB3aWNrZWRuZXNzZXMgaW4gdGhlIGxhdy4gQW5kIGlzIHRoaXMgYSBzbGlnaHQgYXJndW1lbnQgdG8geW91LCB0aGF0CiAgICAgICB0aGVzZSBhcmUgbWVuIGJ5IHdob20gZG9taW5pb24gYW5kIHBvd2VyIG92ZXIgZXZlcnl0aGluZyBpcyBzb3VnaHQsIHdoZW4geW91IHNlZSB0aGF0IGhlLAogICAgICAgd2hvbSB0aGV5IHNlZSB3aWxsIHN1cmVseSBiZSB0aGUgcHJvdGVjdG9yIG9mIHlvdXIgbGliZXJ0eSwgaXMgdGhlIG9ubHkgb25lIHRvIHdob20gdGhhdAogICAgICAgZGlnbml0eSBpcyBkZW5pZWQ/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyBjb25zaWRlciB3aGF0IGEgcG93ZXIgaXMgZ2l2ZW4gdG8gdGhlIGRlY2VtdmlycywgYW5kCiAgICAgICBob3cgZ3JlYXQgaXMgaXRzIGV4dGVudC4gSW4gdGhlIGZpcnN0IHBsYWNlIGJlIGdpdmVzIHRoZSBkZWNlbXZpcnMgdGhlIGhvbm91ciBvZiBhIDxmb3JlaWduIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+CiAgICAgICAgPHA+VGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIGN1cmlhdGE8L2ZvcmVpZ24+LCBhdCB3aGljaCBhbG9uZSBhIDxmb3JlaWduIGxhbmc9ImxhIj5sZXgKICAgICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+IGNvdWxkIGhlIHBhc3NlZCwgd2FzIGEgbWVldGluZyBvZiB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnBvcHVsdXM8L2ZvcmVpZ24+IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEzOTYyIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+LCBhc3NlbWJsZWQgaW4gaXRzCiAgICAgICAgIHRyaWJlcyBvZiBob3VzZXM7IGFuZCBubyBtZW1iZXIgb2YgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4gY291bGQgdm90ZSBhdAogICAgICAgICBzdWNoIGEgbWVldGluZy4gVGhleSBtZXQgcHJpbmNpcGFsbHkgZm9yIHRoZSBzYWtlIG9mIGNvbmZpcm1pbmcgc29tZSBvcmRpbmFuY2Ugb2YgdGhlCiAgICAgICAgIHNlbmF0ZTsgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+c2VuYXR1cyBjb25zdWx0dW08L2ZvcmVpZ24+IHdhcyBhbiBpbmRpc3BlbnNhYmxlIHByZWxpbWluYXJ5LAogICAgICAgICBhbmQgd2l0aCByZWdhcmQgdG8gZWxlY3Rpb25zIGFuZCBsYXdzLCB0aGV5IGhhZCBtZXJlbHkgdGhlIHBvd2VyIG9mIGNvbmZpcm1pbmcgb3IgcmVqZWN0aW5nCiAgICAgICAgIHdoYXQgdGhlIHNlbmF0ZSBoYWQgYWxyZWFkeSBkZWNyZWVkLiBUaGUgPGZvcmVpZ24gbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiAoPGZvcmVpZ24gbGFuZz0ibGEiPmRlIGltcGVyaW88L2ZvcmVpZ24+KSx3aGljaCB3YXMgdGhlIHNhbWUgYXMgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5hdWN0b3JpdGFzCiAgICAgICAgICBwYXRydW08L2ZvcmVpZ24+LCB3YXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIGNvbmZlciB1cG9uIHRoZSBkaWN0YXRvciwgdGhlIGNvbnN1bHMsIGFuZCB0aGUKICAgICAgICAgb3RoZXIgbWFnaXN0cmF0ZXMgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcml1bTwvZm9yZWlnbj4gb3IgbWlsaXRhcnkgY29tbWFuZC4gVGhlCiAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+Y29taXRpYSBjdXJpYXRhPC9mb3JlaWduPiB3ZXJlIGhlbGQgYnkgdGhlIHBhdHJpY2lhbiBtYWdpc3RyYXRlcywgYW5kCiAgICAgICAgIHRoZXkgdm90ZWQgYnkgdGhlaXIgY3VyaWVzLjwvcD4KICAgICAgICA8cD5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gd2VyZSB0aGUgYXNzZW1ibHkgb2YgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnBsZWJzPC9mb3JlaWduPiB0b2dldGhlciwgYW5kIHRoZXkKICAgICAgICAgdm90ZWQgYnkgdGhlaXIgY2VudHVyaWVzIGJ5IGJhbGxvdC48L3A+CiAgICAgICAgPHA+VGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIHRyaWJ1dGE8L2ZvcmVpZ24+IHdlcmUgbm90IGVzdGFibGlzaGVkIHRpbGwgQi4gQy4gPGRhdGUgYXV0aG5hbWU9Ii00OTEiIHZhbHVlPSItNDkxIj40OTE8L2RhdGU+LiBUaGV5IHdlcmUgYW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIHRyaWJlcwogICAgICAgICBpbnRvIHdoaWNoIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+UGxlYnM8L2ZvcmVpZ24+IHdhcyBvcmlnaW5hbGx5IGRpdmlkZWQuIE5vIHF1YWxpZmljYXRpb24KICAgICAgICAgb2YgYmlydGggb3IgcHJvcGVydHkgd2FzIG5lY2Vzc2FyeSB0byBlbmFibGUgYSB0aGVtIHRvIHZvdGUgaW4gdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIHRyaWJ1dGE8L2ZvcmVpZ24+LiBUaGV5IHdlcmUgc3VtbW9uZWQgYnkgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj50cmlidW5pCiAgICAgICAgICBwbGViaXM8L2ZvcmVpZ24+LCB3aG8gd2VyZSBhbHNvIHRoZSBwcmVzaWRpbmcgbWFnaXN0cmF0ZXMgaW4gZ2VuZXJhbDsgYnV0IHRoZSBjb25zdWxzIG9yCiAgICAgICAgIHByYWV0b3JzIG1pZ2h0IHByZXNpZGUgaWYgdGhleSB3ZXJlIGNvbnZva2VkIGZvciB0aGUgZWxlY3Rpb24gb2YgaW5mZXJpb3IgbWFnaXN0cmF0ZXMsIHN1Y2gKICAgICAgICAgYXMgdGhlIHF1YWVzdG9yLCBwcm9wcmFldG9yLCBvciBwcm9jb25zdWwuIFNtaXRoLCBEaWN0LiBBbnQuIHAuIDI3NCwgdi4gPGZvcmVpZ24gbGFuZz0ibGEiPkNvbWl0aWE8L2ZvcmVpZ24+LCBxLiB2LiA8L3A+CiAgICAgICA8L25vdGU+IEJ1dCB0aGlzIGlzIHVuaGVhcmQtb2YgYW5kIGFic29sdXRlbHkgd2l0aG91dCBwcmVjZWRlbnQsIHRoYXQgYSBtYWdpc3RyYWN5IHNob3VsZCBiZQogICAgICAgY29uZmVycmVkIGJ5IGEgPGZvcmVpZ24gbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBvbiBhIG1hbiB3aG8gaGFzIG5vdCBwcmV2aW91c2x5CiAgICAgICByZWNlaXZlZCBpdCBpbiBzb21lIGNvbWl0aWEuIEhlIG9yZGVycyB0aGUgbGF3IHRvIGJlIGJyb3VnaHQgaW4gYnkgdGhhdCBwcmFldG9yIHdobyBpcwogICAgICAgYXBwb2ludGVkIGZpcnN0IHByYWV0b3IuIEJ1dCBob3c/IEluIG9yZGVyIHRoYXQgdGhlc2UgbWVuIG1heSByZWNlaXZlIHRoZSBkZWNlbXZpcmF0ZSB3aG9tCiAgICAgICB0aGUgcGVvcGxlIGhhcyBlbGVjdGVkLiBIZSBoYXMgZm9yZ290dGVuIHRoYXQgbm9uZSBoYXZlIGJlZW4gZWxlY3RlZCBieSB0aGUgY29tbW9uIHBlb3BsZS4KICAgICAgIEhlcmUgaXMgYSBwcmV0dHkgZmVsbG93IHRvIGJpbmQgdGhlIHdob2xlIHdvcmxkIHdpdGggbGF3cywgd2hvIGRvZXMgbm90IHJlY29sbGVjdCBpbiB0aGUKICAgICAgIHRoaXJkIGNsYXVzZSB3aGF0IGlzIHNldCBkb3duIGluIHRoZSBzZWNvbmQhIFRoaXMsIHRvbywgaXMgcXVpdGUgcGxhaW47IGJvdGggd2hhdCBwcml2aWxlZ2VzCiAgICAgICB5b3UgaGF2ZSByZWNlaXZlZCBmcm9tIHlvdXIgYW5jZXN0b3JzLCBhbmQgd2hhdCBpcyBsZWZ0IHRvIHlvdSBieSB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZS4KICAgICAgICA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.10.26'] = ""
translation['2.11'] = ""
translation['2.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gTm93LAogICAgICAgYmVjYXVzZSB5b3UgaGF2ZSBwcmVzZXJ2ZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRyaWJ1dGE8L2ZvcmVpZ24+LCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWF0YTwvZm9yZWlnbj4gaGF2ZSByZW1haW5lZCBvbmx5IGZvcgogICAgICAgdGhlIHNha2Ugb2YgdGhlIGF1c3BpY2VzLiBCdXQgdGhpcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGJlY2F1c2UgaGUgc2F3IHRoYXQgbm8gbWFuIGNvdWxkCiAgICAgICBwb3NzaWJseSBoYXZlIGFueSBhdXRob3JpdHkgY29uZmVycmVkIG9uIGhpbSB3aXRob3V0IHRoZSBhdXRob3JpdHkgb2YgdGhlIGJ1cmdoZXJzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgTGF0aW4gdGVybXMgYXJlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvcHVsdXM8L2ZvcmVpZ24+IGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4uIEZvciB0aGUgYmVzdCBhY2NvdW50IG9mIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPgogICAgICAgIHRvIGJlIGZvdW5kIGluIGEgc21hbGwgc3BhY2UsIHNlZSBTbWl0aCdzIERpY3QuIEFudC4gcC4gNzI2LCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QYXRyaWNpaTwvZm9yZWlnbj47IGFuZCBjb25zdWx0IHRoZSBzYW1lIGFkbWlyYWJsZSBib29rLCBwLiA3NjUsIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlBsZWJlczwvZm9yZWlnbj4sIG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBsZWJzPC9mb3JlaWduPi4gVGhlIHdvcmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG90ZXN0YXM8L2ZvcmVpZ24+LCB3aGljaCBJIGhhdmUgdHJhbnNsYXRlZCDigJxhdXRob3JpdHks4oCdIG1lYW5zCiAgICAgICAgc3RyaWN0bHkgb25seSBjaXZpbCBhdXRob3JpdHksIGluIG9wcG9zaXRpb24gdG8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJpdW08L2ZvcmVpZ24+LAogICAgICAgIG1pbGl0YXJ5IGNvbW1hbmQuPC9ub3RlPiBvciBvZiB0aGUgY29tbW9uYWx0eSwgY29uZmlybWVkIHRoYXQgYXV0aG9yaXR5IHdoaWNoIGhlIHByb3Bvc2VkIHRvCiAgICAgICBnaXZlIGJ5IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cGxlYnM8L2ZvcmVpZ24+LiBGb3IgdGhlIGJlc3QgYWNjb3VudCBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG9wdWx1czwvZm9yZWlnbj4KICAgICAgICB0byBiZSBmb3VuZCBpbiBhIHNtYWxsIHNwYWNlLCBzZWUgU21pdGgncyBEaWN0LiBBbnQuIHAuIDcyNiwgdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UGF0cmljaWk8L2ZvcmVpZ24+OyBhbmQgY29uc3VsdCB0aGUgc2FtZSBhZG1pcmFibGUgYm9vaywgcC4gNzY1LCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QbGViZXM8L2ZvcmVpZ24+LCBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4uIFRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvdGVzdGFzPC9mb3JlaWduPiwgd2hpY2ggSSBoYXZlIHRyYW5zbGF0ZWQg4oCcYXV0aG9yaXR5LOKAnSBtZWFucwogICAgICAgIHN0cmljdGx5IG9ubHkgY2l2aWwgYXV0aG9yaXR5LCBpbiBvcHBvc2l0aW9uIHRvIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiwKICAgICAgICBtaWxpdGFyeSBjb21tYW5kLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhdGEgY29taXRpYTwvZm9yZWlnbj4sIHdpdGggd2hpY2ggeW91IGhhdmUgbm90aGluZyB0byBkbywKICAgICAgIGFuZCB0b29rIGF3YXkgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgdHJpYnV0YTwvZm9yZWlnbj4gd2hpY2ggYmVsb25nZWQgdG8geW91LiBTbywKICAgICAgIHRob3VnaCB5b3VyIGFuY2VzdG9ycyBpbnRlbmRlZCB5b3UgdG8gZGVjaWRlIGF0IHR3byA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPgogICAgICAgYWJvdXQgZWFjaCBtYWdpc3RyYXRlLCB0aGlzIG1hbiwgc28gYXR0YWNoZWQgdG8gdGhlIGludGVyZXN0cyBvZiB0aGUgcGVvcGxlLCBkaWQgbm90IGxlYXZlCiAgICAgICB0aGUgcGVvcGxlIHRoZSBwb3dlciBvZiBldmVuIG9uZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGp1c3Qgbm90ZSB0aGUgc2NydXB1bG91c25lc3MgYW5kIHRoZSBkaWxpZ2VuY2Ugb2YgdGhlIG1hbi4gSGUgc2F3LCBhbmQKICAgICAgIHdhcyB0aG9yb3VnaGx5IGF3YXJlLCB0aGF0IHdpdGhvdXQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4gdGhlIGRlY2VtdmlycwogICAgICAgY291bGQgbm90IGhhdmUgYXV0aG9yaXR5LCBzaW5jZSB0aGV5IHdlcmUgZWxlY3RlZCBieSBvbmx5IG5pbmUgdHJpYmVzLiBTbyBoZSBkaXJlY3RzIHRoYXQKICAgICAgIHRoZXJlIHNob3VsZCBiZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBwYXNzZWQgYWJvdXQgdGhlbSwgYW5kIG9yZGVycyB0aGUKICAgICAgIHByYWV0b3IgdG8gcHJvcG9zZSBpdC4gSG93IHJpZGljdWxvdXMgc3VjaCBhIGNvbnRyaXZhbmNlIHdhcywgaXQgaXMgbm8gYnVzaW5lc3Mgb2YgbWluZSB0bwogICAgICAgc2F5LiBGb3IgaGUgb3JkZXJzIHRoYXQg4oCcaGUgd2hvIGhhcyBiZWVuIGVsZWN0ZWQgZmlyc3QgcHJhZXRvciwgc2hhbGwgcHJvcG9zZSBhCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+OyBidXQgaWYgaGUgYmUgYWJsZSB0byBwcm9wb3NlIGl0LCB0aGVuIHRoZSBsYXN0CiAgICAgICBwcmFldG9yIHNoYWxsIGRvIGl0LuKAnSBTbyB0aGF0IGhlIHNlZW1zIGVpdGhlciB0byBoYXZlIGJlZW4gcGxheWluZyB0aGUgZm9vbCBpbiB0aGlzCiAgICAgICBidXNpbmVzcywgb3IgZWxzZSB0byBoYXZlIGJlZW4gYWltaW5nIGF0IHNvbWV0aGluZyBJIGtub3cgbm90IHdoYXQuIEJ1dCwgaG93ZXZlciwgbGV0IHVzIHBhc3MKICAgICAgIG92ZXIgdGhpcywgd2hpY2ggaXMgZWl0aGVyIHNvIHBlcnZlcnNlLCBvciBzbyByaWRpY3Vsb3VzLCBvciBzbyBtYWxpY2lvdXMgYW5kIGN1bm5pbmcsIGFzIHRvCiAgICAgICBiZSB1bmludGVsbGlnaWJsZSwgYW5kIHJldHVybiB0byB0aGUgc2NydXB1bG91c25lc3Mgb2YgdGhlIG1hbi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgc2VlcyB0aGF0IG5vdGhpbmcgY2FuIGJlIGRvbmUgYnkgdGhlIGRlY2VtdmlycyBleGNlcHQgYnkgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4uIFdoYXQgd2FzIHRvIGhhcHBlbiBhZnRlcndhcmRzLCBpZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleAogICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+IHdlcmUgbm90IHBhc3NlZD8gUmVtYXJrIHRoZSBpbmdlbnVpdHkgb2YgdGhlIG1hbi4KICAgICAgIOKAnFRoZW4s4oCdIHNheXMgaGUsIOKAnHRoZSBkZWNlbXZpcnMgc2hhbGwgYmUgaW4gdGhlIHNhbWUgY29uZGl0aW9uCiAgICAgICBhcyB0aG9zZSB3aG8gYXJlIGFwcG9pbnRlZCBpbiB0aGUgc3RyaWN0ZXN0IGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3LuKAnSBJZiB0aGlzIGNhbgogICAgICAgYmUgYnJvdWdodCBhYm91dCwgdGhhdCwgaW4gdGhpcyBjaXR5IHdoaWNoIGlzIGZhciBzdXBlcmlvciB0byBhbGwgb3RoZXIgc3RhdGVzIGluIGl0cyByaWdodHMKICAgICAgIG9mIGxpYmVydHksIGFueSBvbmUgbWF5IGJlIGFibGUgdG8gb2J0YWluIGVpdGhlciBtaWxpdGFyeSBjb21tYW5kIG9yIGNpdmlsIGF1dGhvcml0eSB3aXRob3V0CiAgICAgICB0aGUgc2FuY3Rpb24gb2YgYW55IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LCB0aGVuIHdoYXQgaXMgdGhlIG5lY2Vzc2l0eSBmb3IKICAgICAgIG9yZGVyaW5nIGluIHRoZSB0aGlyZCBjaGFwdGVyIHRoYXQgc29tZSBvbmUgc2hhbGwgcHJvcG9zZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleAogICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+LCB3aGVuIGluIHRoZSBmb3VydGggY2hhcHRlciB5b3UgcGVybWl0IG1lbiB0byBoYXZlIHRoZSBzYW1lIHJpZ2h0cyB3aXRob3V0CiAgICAgICBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiwgd2hpY2ggdGhleSB3b3VsZCBoYXZlIGlmIHRoZXkgd2VyZSBlbGVjdGVkIGJ5IHRoZQogICAgICAgYnVyZ2hlcnMgYWNjb3JkaW5nIHRvIHRoZSBzdHJpY3Rlc3QgZm9ybSBvZiBsYXc/IEtpbmdzIGFyZSBiZWluZyBhcHBvaW50ZWQsIE8gUm9tYW5zLCBub3QKICAgICAgIGRlY2VtdmlyczsgYW5kIHRoZXkgYXJlIHN0YXJ0aW5nIHdpdGggc3VjaCBiZWdpbm5pbmdzIGFuZCBvbiBzdWNoIGZvdW5kYXRpb25zLCB0aGF0IHRoZSB3aG9sZQogICAgICAgb2YgeW91ciByaWdodHMsIGFuZCBwb3dlcnMsIGFuZCBsaWJlcnRpZXMgYXJlIGRlc3Ryb3llZCBub3Qgb25seSBmcm9tIHRoZSBtb21lbnQgdGhhdCB0aGV5CiAgICAgICBiZWdpbiB0byBhY3QsIGJ1dCBmcm9tIHRoZSBtb21lbnQgdGhhdCB0aGV5IGFyZSBhcHBvaW50ZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCByZW1hcmsgaG93IGNhcmVmdWxseSBoZSBwcmVzZXJ2ZXMgdGhlIHJpZ2h0cyBvZiB0aGUgdHJpYnVuaXRpYW4gcG93ZXIuIFRoZSBjb25zdWxzIGFyZQogICAgICAgb2Z0ZW4gaW50ZXJydXB0ZWQgaW4gcHJvcG9zaW5nIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LCBieSB0aGUKICAgICAgIGludGVyY2Vzc2lvbiBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZS4gTm90IHRoYXQgd2UgY29tcGxhaW4gdGhhdCB0aGUgdHJpYnVuZXMgc2hvdWxkCiAgICAgICBoYXZlIHRoaXMgcG93ZXI7IG9ubHksIGlmIGFueSBvbmUgdXNlcyBpdCBpbiBhIHJhbmRvbSBhbmQgaW5jb25zaWRlcmF0ZSBtYW5uZXIsIHdlIGZvcm0gb3VyCiAgICAgICBvd24gb3Bpbmlvbi4gQnV0IHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBieSBoaXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LAogICAgICAgd2hpY2ggdGhlIHByYWV0b3IgaXMgdG8gYnJpbmcgZm9yd2FyZCwgdGFrZXMgYXdheSB0aGUgcG93ZXIgb2YgaW50ZXJjZXNzaW9uLiBBbmQgd2hpbGUgaGUgaXMKICAgICAgIG1hZGUgdG8gYmUgYmxhbWVkIGZvciBjYXVzaW5nIHRoZSB0cmlidW5pdGlhbiBwb3dlciB0byBiZSBkaW1pbmlzaGVkIGJ5IGhpcyBpbnN0cnVtZW50YWxpdHksCiAgICAgICBoZSBpcyBhbHNvIHRvIGJlIGxhdWdoZWQgYXQsIGJlY2F1c2UgYSBjb25zdWwsIGlmIGhlIGJlIG5vdCBpbnZlc3RlZCB3aXRoIHRoZSBhdXRob3JpdHkgYnkgYQogICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiwgaGFzIG5vIHBvd2VyIHRvIGludGVyZmVyZSBpbiBtaWxpdGFyeSBhZmZhaXJzOyBhbmQKICAgICAgIHlldCBoZSBnaXZlcyB0aGlzIG1hbiB3aG9tIGhlIHByb2hpYml0cyBmcm9tIGludGVyY2VkaW5nLCB0aGUgdmVyeSBzYW1lIHBvd2VyLCBldmVuIGlmIHRoZQogICAgICAgdmV0byBiZSBpbnRlcnBvc2VkLCBhcyBpZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBoYWQgYmVlbiBwYXNzZWQuIFNvIHRoYXQKICAgICAgIEkgYW0gYXQgYSBsb3NzIHRvIHVuZGVyc3RhbmQgZWl0aGVyIHdoeSBoZSBwcm9oaWJpdHMgdGhlIGludGVyY2Vzc2lvbiwgb3Igd2h5IGhlIHRoaW5rcyB0aGF0CiAgICAgICBhbnkgb25lIHdpbGwgaW50ZXJjZWRlOyBhcyB0aGUgaW50ZXJjZXNzaW9uIHdpbGwgb25seSBwcm92ZSB0aGUgZm9sbHkgb2YgdGhlIGludGVyY2Vzc29yLCBhbmQKICAgICAgIHdpbGwgbm90IGhpbmRlciB0aGUgYnVzaW5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4sIGJ5IHRoZQogICAgICAgaW50ZXJjZXNzaW9uIG9mIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLiBOb3QgdGhhdCB3ZSBjb21wbGFpbiB0aGF0IHRoZSB0cmlidW5lcyBzaG91bGQKICAgICAgIGhhdmUgdGhpcyBwb3dlcjsgb25seSwgaWYgYW55IG9uZSB1c2VzIGl0IGluIGEgcmFuZG9tIGFuZCBpbmNvbnNpZGVyYXRlIG1hbm5lciwgd2UgZm9ybSBvdXIKICAgICAgIG93biBvcGluaW9uLiBCdXQgdGhpcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGJ5IGhpcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4sCiAgICAgICB3aGljaCB0aGUgcHJhZXRvciBpcyB0byBicmluZyBmb3J3YXJkLCB0YWtlcyBhd2F5IHRoZSBwb3dlciBvZiBpbnRlcmNlc3Npb24uIEFuZCB3aGlsZSBoZSBpcwogICAgICAgbWFkZSB0byBiZSBibGFtZWQgZm9yIGNhdXNpbmcgdGhlIHRyaWJ1bml0aWFuIHBvd2VyIHRvIGJlIGRpbWluaXNoZWQgYnkgaGlzIGluc3RydW1lbnRhbGl0eSwKICAgICAgIGhlIGlzIGFsc28gdG8gYmUgbGF1Z2hlZCBhdCwgYmVjYXVzZSBhIGNvbnN1bCwgaWYgaGUgYmUgbm90IGludmVzdGVkIHdpdGggdGhlIGF1dGhvcml0eSBieSBhCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LCBoYXMgbm8gcG93ZXIgdG8gaW50ZXJmZXJlIGluIG1pbGl0YXJ5IGFmZmFpcnM7IGFuZAogICAgICAgeWV0IGhlIGdpdmVzIHRoaXMgbWFuIHdob20gaGUgcHJvaGliaXRzIGZyb20gaW50ZXJjZWRpbmcsIHRoZSB2ZXJ5IHNhbWUgcG93ZXIsIGV2ZW4gaWYgdGhlCiAgICAgICB2ZXRvIGJlIGludGVycG9zZWQsIGFzIGlmIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+IGhhZCBiZWVuIHBhc3NlZC4gU28gdGhhdAogICAgICAgSSBhbSBhdCBhIGxvc3MgdG8gdW5kZXJzdGFuZCBlaXRoZXIgd2h5IGhlIHByb2hpYml0cyB0aGUgaW50ZXJjZXNzaW9uLCBvciB3aHkgaGUgdGhpbmtzIHRoYXQKICAgICAgIGFueSBvbmUgd2lsbCBpbnRlcmNlZGU7IGFzIHRoZSBpbnRlcmNlc3Npb24gd2lsbCBvbmx5IHByb3ZlIHRoZSBmb2xseSBvZiB0aGUgaW50ZXJjZXNzb3IsIGFuZAogICAgICAgd2lsbCBub3QgaGluZGVyIHRoZSBidXNpbmVzcy4gPC90cmFuc2xhdGlvbj4="
translation['2.12.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXQgdGhlcmUgdGhlbiBiZSBkZWNlbXZpcnMsIGFwcG9pbnRlZCBuZWl0aGVyIGJ5IHRoZSBnZW51aW5lIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LOKAlHRoYXQgaXMgdG8gc2F5LCBieSB0aGUgdm90ZXMgb2YgdGhlIHBlb3BsZSzigJRub3IgYnkKICAgICAgIHRoYXQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gY29udmVuZWQgaW4gYXBwZWFyYW5jZSwgdG8ga2VlcCB1cCBhbiBhbmNpZW50CiAgICAgICBjdXN0b20sIGJ5IHRoZSB0aGlydHkgbGljdG9ycyBmb3IgdGhlIHNha2Ugb2YgdGhlIGF1c3BpY2VzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+4oCcSW4gYWZ0ZXIgdGltZXMsIHdoZW4gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY3VyaWF0YTwvZm9yZWlnbj4gd2VyZQogICAgICAgIGxpdHRsZSBtb3JlIHRoYW4gYSBtYXR0ZXIgb2YgZm9ybSwgdGhlaXIgc3VmZnJhZ2VzIHdlcmUgcmVwcmVzZW50ZWQgYnkgdGhlIHRoaXJ0eSBsaWN0b3JzIG9mCiAgICAgICAgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhZTwvZm9yZWlnbj4sIHdob3NlIGR1dHkgaXQgd2FzIHRvIHN1bW1vbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWFlPC9mb3JlaWduPiB3aGVuIHRoZSBtZWV0aW5ncyBhY3R1YWxseSB0b29rIHBsYWNlLuKAneKAlFNtaXRoLCBEaWN0LgogICAgICAgIEFudC4gcC4gMjczIGEsIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNvbWl0aWE8L2ZvcmVpZ24+Ljwvbm90ZT4gU2VlIG5vdywgYWxzbywgaG93IG11Y2gKICAgICAgIGdyZWF0ZXIgaG9ub3VycyBoZSBjb25mZXJzIG9uIHRoZXNlIG1lbiB3aG8gaGF2ZSByZWNlaXZlZCBubyBhdXRob3JpdHkgZnJvbSB5b3UsIHRoYW4gd2UgaGF2ZQogICAgICAgcmVjZWl2ZWQsIHRvIHdob20geW91IGhhdmUgZ2l2ZW4gdGhlIG1vc3QgYW1wbGUgYXV0aG9yaXR5LCBIZSBvcmRlcnMgdGhlIGRlY2VtdmlycywgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBMYXRpbiBoYXMsIOKAnDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlY2VtdmlyaQogICAgICAgIHB1bGxhcmlpPC9mb3JlaWduPuKAnS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHVsbGFyaXVzPC9mb3JlaWduPiB3YXMgdGhlIG9mZmljZXIKICAgICAgICBhcHBvaW50ZWQgdG8gZmVlZCBhbmQgdGFrZSBjYXJlIG9mIHRoZSBzYWNyZWQgY2hpY2tlbnMgdGhhdCB3ZXJlIGtlcHQgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgdGFraW5nIHRoZSBhdXNwaWNlczsgYW5kIG11Y2ggd2FzIGluZmVycmVkIGZyb20gdGhlIHdheSBpbiB3aGljaCB0aGV5IHRvb2sgdGhlaXIgZm9vZCwgb3IKICAgICAgICBwZXJoYXBzIHJlZnVzZWQgaXQuPC9ub3RlPiB3aG8gaGF2ZSB0aGUgY2FyZSBvZiB0aGUgYXVzcGljZXMsIHRvIHRha2UgYXVzcGljZXMgZm9yIHRoZSBzYWtlCiAgICAgICBvZiBjb25kdWN0aW5nIHRoZSBjb2xvbmllcy4g4oCcQWNjb3JkaW5nLOKAnSBzYXlzIGhlLCDigJx0byB0aGUgc2FtZQogICAgICAgcmlnaHQgd2hpY2ggdGhlIHRyaXVtdmlycyBoYWQgYnkgdGhlIFNlbXByb25pYW4gbGF3LuKAnSBEbyB5b3UgdmVudHVyZSwgTyBSdWxsdXMsCiAgICAgICBldmVuIHRvIG1ha2UgbWVudGlvbiBvZiB0aGUgU2VtcHJvbmlhbiBsYXc/IGFuZCBkb2VzIG5vdCB0aGF0IGxhdyBpdHNlbGYgcmVtaW5kIHlvdSB0aGF0CiAgICAgICB0aGVzZSB0cml1bXZpcnMgaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgdGhlIHN1ZmZyYWdlcyBvZiB0aGUgdHJpYmVzPyBBbmQgd2hpbGUgeW91IGFyZQogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+IHZlcnkgZmFyIHJlbW92ZWQgZnJvbSB0aGUganVzdGljZSBhbmQgbW9kZXN0eSBvZgogICAgICAgVGliZXJpdXMgR3JhY2NodXMsIGRvIHlvdSB0aGluayB0aGF0IGEgbGF3IG1hZGUgb24gc28gZGlmZmVyZW50IGEgcHJpbmNpcGxlIG91Z2h0IHRvIGhhdmUgdGhlCiAgICAgICBzYW1lIGF1dGhvcml0eT8gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjMyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4s4oCUdGhhdCBpcyB0byBzYXksIGJ5IHRoZSB2b3RlcyBvZiB0aGUgcGVvcGxlLOKAlG5vciBieQogICAgICAgdGhhdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiBjb252ZW5lZCBpbiBhcHBlYXJhbmNlLCB0byBrZWVwIHVwIGFuIGFuY2llbnQKICAgICAgIGN1c3RvbSwgYnkgdGhlIHRoaXJ0eSBsaWN0b3JzIGZvciB0aGUgc2FrZSBvZiB0aGUgYXVzcGljZXMuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj7igJxJbiBhZnRlciB0aW1lcywgd2hlbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYSBjdXJpYXRhPC9mb3JlaWduPiB3ZXJlCiAgICAgICAgbGl0dGxlIG1vcmUgdGhhbiBhIG1hdHRlciBvZiBmb3JtLCB0aGVpciBzdWZmcmFnZXMgd2VyZSByZXByZXNlbnRlZCBieSB0aGUgdGhpcnR5IGxpY3RvcnMgb2YKICAgICAgICB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWFlPC9mb3JlaWduPiwgd2hvc2UgZHV0eSBpdCB3YXMgdG8gc3VtbW9uIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jdXJpYWU8L2ZvcmVpZ24+IHdoZW4gdGhlIG1lZXRpbmdzIGFjdHVhbGx5IHRvb2sgcGxhY2Uu4oCd4oCUU21pdGgsIERpY3QuCiAgICAgICAgQW50LiBwLiAyNzMgYSwgdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q29taXRpYTwvZm9yZWlnbj4uPC9ub3RlPiBTZWUgbm93LCBhbHNvLCBob3cgbXVjaAogICAgICAgZ3JlYXRlciBob25vdXJzIGhlIGNvbmZlcnMgb24gdGhlc2UgbWVuIHdobyBoYXZlIHJlY2VpdmVkIG5vIGF1dGhvcml0eSBmcm9tIHlvdSwgdGhhbiB3ZSBoYXZlCiAgICAgICByZWNlaXZlZCwgdG8gd2hvbSB5b3UgaGF2ZSBnaXZlbiB0aGUgbW9zdCBhbXBsZSBhdXRob3JpdHksIEhlIG9yZGVycyB0aGUgZGVjZW12aXJzLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGN1cmlhdGE8L2ZvcmVpZ24+IHdlcmUKICAgICAgICBsaXR0bGUgbW9yZSB0aGFuIGEgbWF0dGVyIG9mIGZvcm0sIHRoZWlyIHN1ZmZyYWdlcyB3ZXJlIHJlcHJlc2VudGVkIGJ5IHRoZSB0aGlydHkgbGljdG9ycyBvZgogICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jdXJpYWU8L2ZvcmVpZ24+LCB3aG9zZSBkdXR5IGl0IHdhcyB0byBzdW1tb24gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhZTwvZm9yZWlnbj4gd2hlbiB0aGUgbWVldGluZ3MgYWN0dWFsbHkgdG9vayBwbGFjZS7igJ3igJRTbWl0aCwgRGljdC4KICAgICAgICBBbnQuIHAuIDI3MyBhLCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5Db21pdGlhPC9mb3JlaWduPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIExhdGluIGhhcywg4oCcPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpCiAgICAgICAgcHVsbGFyaWk8L2ZvcmVpZ24+4oCdLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QdWxsYXJpdXM8L2ZvcmVpZ24+IHdhcyB0aGUgb2ZmaWNlcgogICAgICAgIGFwcG9pbnRlZCB0byBmZWVkIGFuZCB0YWtlIGNhcmUgb2YgdGhlIHNhY3JlZCBjaGlja2VucyB0aGF0IHdlcmUga2VwdCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICB0YWtpbmcgdGhlIGF1c3BpY2VzOyBhbmQgbXVjaCB3YXMgaW5mZXJyZWQgZnJvbSB0aGUgd2F5IGluIHdoaWNoIHRoZXkgdG9vayB0aGVpciBmb29kLCBvcgogICAgICAgIHBlcmhhcHMgcmVmdXNlZCBpdC48L25vdGU+IHdobyBoYXZlIHRoZSBjYXJlIG9mIHRoZSBhdXNwaWNlcywgdG8gdGFrZSBhdXNwaWNlcyBmb3IgdGhlIHNha2UKICAgICAgIG9mIGNvbmR1Y3RpbmcgdGhlIGNvbG9uaWVzLiDigJxBY2NvcmRpbmcs4oCdIHNheXMgaGUsIOKAnHRvIHRoZSBzYW1lCiAgICAgICByaWdodCB3aGljaCB0aGUgdHJpdW12aXJzIGhhZCBieSB0aGUgU2VtcHJvbmlhbiBsYXcu4oCdIERvIHlvdSB2ZW50dXJlLCBPIFJ1bGx1cywKICAgICAgIGV2ZW4gdG8gbWFrZSBtZW50aW9uIG9mIHRoZSBTZW1wcm9uaWFuIGxhdz8gYW5kIGRvZXMgbm90IHRoYXQgbGF3IGl0c2VsZiByZW1pbmQgeW91IHRoYXQKICAgICAgIHRoZXNlIHRyaXVtdmlycyBoYXZlIGJlZW4gY3JlYXRlZCBieSB0aGUgc3VmZnJhZ2VzIG9mIHRoZSB0cmliZXM/IEFuZCB3aGlsZSB5b3UgYXJlCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpCiAgICAgICAgcHVsbGFyaWk8L2ZvcmVpZ24+4oCdLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QdWxsYXJpdXM8L2ZvcmVpZ24+IHdhcyB0aGUgb2ZmaWNlcgogICAgICAgIGFwcG9pbnRlZCB0byBmZWVkIGFuZCB0YWtlIGNhcmUgb2YgdGhlIHNhY3JlZCBjaGlja2VucyB0aGF0IHdlcmUga2VwdCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICB0YWtpbmcgdGhlIGF1c3BpY2VzOyBhbmQgbXVjaCB3YXMgaW5mZXJyZWQgZnJvbSB0aGUgd2F5IGluIHdoaWNoIHRoZXkgdG9vayB0aGVpciBmb29kLCBvcgogICAgICAgIHBlcmhhcHMgcmVmdXNlZCBpdC48L3RyYW5zbGF0aW9uPg=="
translation['2.228'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+IHZlcnkgZmFyIHJlbW92ZWQgZnJvbSB0aGUganVzdGljZSBhbmQgbW9kZXN0eSBvZgogICAgICAgVGliZXJpdXMgR3JhY2NodXMsIGRvIHlvdSB0aGluayB0aGF0IGEgbGF3IG1hZGUgb24gc28gZGlmZmVyZW50IGEgcHJpbmNpcGxlIG91Z2h0IHRvIGhhdmUgdGhlCiAgICAgICBzYW1lIGF1dGhvcml0eT8gPC90cmFuc2xhdGlvbj4="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJlc2lkZXMgYWxsIHRoaXMsIGhlIGdpdmVzIHRoZW0gYXV0aG9yaXR5IHByYWV0b3JpYW4gaW4gbmFtZSwgYnV0IGtpbmdseSBpbiByZWFsaXR5LiBIZQogICAgICAgZGVzY3JpYmVzIHRoZWlyIHBvd2VyLCBhcyBhIHBvd2VyIGZvciBmaXZlIHllYXJzOyBidXQgaGUgbWFrZXMgaXQgcGVycGV0dWFsLiBGb3IgaGUKICAgICAgIHN0cmVuZ3RoZW5zIGl0IHdpdGggc3VjaCBidWx3YXJrcyBhbmQgZGVmZW5jZXMgdGhhdCBpdCB3aWxsIGJlIHF1aXRlIGltcG9zc2libGUgdG8gZGVwcml2ZQogICAgICAgdGhlbSBvZiBpdCBhZ2FpbnN0IHRoZWlyIG93biBjb25zZW50LiBUaGVuIGhlIGFkb3JucyB0aGVtIHdpdGggYXBwYXJpdG9ycywgYW5kIHNlY3JldGFyaWVzLAogICAgICAgYW5kIGNsZXJrcywgYW5kIGNyaWVycywgYW5kIGFyY2hpdGVjdHM7IGJlc2lkZXMgdGhhdCwgd2l0aCBtdWxlcywgYW5kIHRlbnRzLCBhbmQgY2VudHVyaWVzLAogICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVyZSBpcywgbm8gZG91YnQsIHNvbWUgY29ycnVwdGlvbiBoZXJlIGluIHRoZSB0ZXh0Ljwvbm90ZT4gYW5kIGFsbAogICAgICAgc29ydHMgb2YgZnVybml0dXJlOyBoZSBkcmF3cyBtb25leSBmb3IgdGhlaXIgZXhwZW5zZXMgZnJvbSB0aGUgdHJlYXN1cnk7IGhlIHN1cHBsaWVzIHRoZW0KICAgICAgIHdpdGggbW9yZSBtb25leSBmcm9tIHRoZSBhbGxpZXM7IGhlIGFwcG9pbnRzIHRoZW0gdHdvIGh1bmRyZWQgc3VydmV5b3JzIGZyb20gdGhlIGVxdWVzdHJpYW4KICAgICAgIGJvZHkgZXZlcnkgeWVhciBhcyB0aGVpciBwZXJzb25hbCBhdHRlbmRhbnRzLCBhbmQgYWxzbyBhcyBtaW5pc3RlcnMgYW5kIHNhdGVsbGl0ZXMgb2YgdGhlaXIKICAgICAgIHBvd2VyLiBZb3UgaGF2ZSBub3csIE8gUm9tYW5zLCB0aGUgZm9ybSBhbmQgdmVyeSBhcHBlYXJhbmNlIG9mIHR5cmFudHM7IHlvdSBzZWUgYWxsIHRoZQogICAgICAgZW5zaWducyBvZiBwb3dlciwgYnV0IG5vdCB5ZXQgdGhlIHBvd2VyIGl0c2VsZi4gRm9yLCBwZXJoYXBzLCBzb21lIG9uZSBtYXkgc2F5LAogICAgICAg4oCcV2VsbCwgd2hhdCBoYXJtIGRvIGFsbCB0aG9zZSBtZW4sIHNlY3JldGFyeSwgbGljdG9yLCBjcmllciwgYW5kIGNoaWNrZW4tZmVlZGVyIGRvCiAgICAgICBtZT/igJ0gSSB3aWxsIHRlbGwgeW91LiBUaGVzZSB0aGluZ3MgYXJlIG9mIHN1Y2ggYSBuYXR1cmUgdGhhdCB0aGUgbWFuIHdobyBoYXMgdGhlbQogICAgICAgd2l0aG91dCB0aGVpciBiZWluZyBjb25mZXJyZWQgYnkgeW91ciB2b3RlLCBtdXN0IHNlZW0gZWl0aGVyIGEgbW9uYXJjaCB3aXRoIGludG9sZXJhYmxlCiAgICAgICBwb3dlciwgb3IgaWYgaGUgYXNzdW1lcyB0aGVtIGFzIGEgcHJpdmF0ZSBpbmRpdmlkdWFsLCBhIG1hZG1hbi4gPC9wPgoJCQkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMsIG5vIGRvdWJ0LCBzb21lIGNvcnJ1cHRpb24gaGVyZSBpbiB0aGUgdGV4dC48L25vdGU+IGFuZCBhbGwKICAgICAgIHNvcnRzIG9mIGZ1cm5pdHVyZTsgaGUgZHJhd3MgbW9uZXkgZm9yIHRoZWlyIGV4cGVuc2VzIGZyb20gdGhlIHRyZWFzdXJ5OyBoZSBzdXBwbGllcyB0aGVtCiAgICAgICB3aXRoIG1vcmUgbW9uZXkgZnJvbSB0aGUgYWxsaWVzOyBoZSBhcHBvaW50cyB0aGVtIHR3byBodW5kcmVkIHN1cnZleW9ycyBmcm9tIHRoZSBlcXVlc3RyaWFuCiAgICAgICBib2R5IGV2ZXJ5IHllYXIgYXMgdGhlaXIgcGVyc29uYWwgYXR0ZW5kYW50cywgYW5kIGFsc28gYXMgbWluaXN0ZXJzIGFuZCBzYXRlbGxpdGVzIG9mIHRoZWlyCiAgICAgICBwb3dlci4gWW91IGhhdmUgbm93LCBPIFJvbWFucywgdGhlIGZvcm0gYW5kIHZlcnkgYXBwZWFyYW5jZSBvZiB0eXJhbnRzOyB5b3Ugc2VlIGFsbCB0aGUKICAgICAgIGVuc2lnbnMgb2YgcG93ZXIsIGJ1dCBub3QgeWV0IHRoZSBwb3dlciBpdHNlbGYuIEZvciwgcGVyaGFwcywgc29tZSBvbmUgbWF5IHNheSwKICAgICAgIOKAnFdlbGwsIHdoYXQgaGFybSBkbyBhbGwgdGhvc2UgbWVuLCBzZWNyZXRhcnksIGxpY3RvciwgY3JpZXIsIGFuZCBjaGlja2VuLWZlZWRlciBkbwogICAgICAgbWU/4oCdIEkgd2lsbCB0ZWxsIHlvdS4gVGhlc2UgdGhpbmdzIGFyZSBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgdGhlIG1hbiB3aG8gaGFzIHRoZW0KICAgICAgIHdpdGhvdXQgdGhlaXIgYmVpbmcgY29uZmVycmVkIGJ5IHlvdXIgdm90ZSwgbXVzdCBzZWVtIGVpdGhlciBhIG1vbmFyY2ggd2l0aCBpbnRvbGVyYWJsZQogICAgICAgcG93ZXIsIG9yIGlmIGhlIGFzc3VtZXMgdGhlbSBhcyBhIHByaXZhdGUgaW5kaXZpZHVhbCwgYSBtYWRtYW4uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPiBKdXN0IHNlZSB3aGF0IGdyZWF0IGF1dGhvcml0eSB0aGV5IGFyZSBpbnZlc3RlZCB3aXRoLAogICAgICAgYW5kIHlvdSB3aWxsIHNheSB0aGF0IGl0IGlzIG5vdCB0aGUgaW5zYW5pdHkgb2YgcHJpdmF0ZSBpbmRpdmlkdWFscywgYnV0IHRoZSBpbW1vZGVyYXRlCiAgICAgICBhcnJvZ2FuY2Ugb2Yga2luZ3MuIEZpcnN0IG9mIGFsbCwgdGhleSBhcmUgZW50cnVzdGVkIHdpdGggYm91bmRsZXNzIHBvd2VyIG9mIGFjcXVpcmluZwogICAgICAgZW5vcm1vdXMgc3VtcyBvZiBtb25leSBvdXQgb2YgeW91ciByZXZlbnVlcywgbm90IGJ5IGZhcm1pbmcgdGhlbSBidXQgYnkgYWxpZW5hdGluZyB0aGVtLiBJbgogICAgICAgdGhlIG5leHQgcGxhY2UsIHRoZXkgYXJlIGFsbG93ZWQgdG8gcHVyc3VlIGFuIGlucXVpcnkgaW50byB0aGUgY29uZHVjdCBvZiBldmVyeSBjb3VudHJ5IGFuZAogICAgICAgb2YgZXZlcnkgbmF0aW9uLCB3aXRob3V0IGFueSBiZW5jaCBvZiBqdWRnZXM7IHRvIHB1bmlzaCB3aXRob3V0IGFueSByaWdodCBvZiBhcHBlYWwgYmVpbmcKICAgICAgIGFsbG93ZWQ7IGFuZCB0byBjb25kZW1uIHdpdGhvdXQgdGhlcmUgYmVpbmcgYW55IG1lYW5zIG9mIHByb2N1cmluZyBhIHJldmVyc2FsIG9mIHRoZWlyCiAgICAgICBzZW50ZW5jZS4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSB3aWxsIGJlIGFibGUgZm9yIGZpdmUgeWVhcnMgdG8gc2l0IGluCiAgICAgICBqdWRnbWVudCBvbiB0aGUgY29uc3Vscywgb3IgZXZlbiBvbiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0aGVtc2VsdmVzOyBidXQgYWxsIHRoYXQgdGltZQogICAgICAgbm8gb25lIHdpbGwgYmUgYWJsZSB0byBzaXQgaW4ganVkZ21lbnQgb24gdGhlbS4gVGhleSB3aWxsIGJlIGFsbG93ZWQgdG8gZmlsbCBtYWdpc3RlcmlhbAogICAgICAgb2ZmaWNlczsgYnV0IHRoZXkgd2lsbCBub3QgYmUgYWxsb3dlZCB0byBiZSBwcm9zZWN1dGVkLiBUaGV5IHdpbGwgaGF2ZSBwb3dlciB0byBwdXJjaGFzZQogICAgICAgbGFuZHMsIGZyb20gd2hvbXNvZXZlciB0aGV5IGNob29zZSwgd2hhdGV2ZXIgdGhleSBjaG9vc2UsIGFuZCBhdCB3aGF0ZXZlciBwcmljZSB0aGV5IGNob29zZS4KICAgICAgIFRoZXkgYXJlIGFsbG93ZWQgdG8gZXN0YWJsaXNoIG5ldyBjb2xvbmllcywgdG8gcmVjcnVpdCBvbGQgb25lcywgdG8gZmlsbCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggdGhlaXIgY29sb25pc3RzOyB0aGV5IGhhdmUgYWJzb2x1dGUgYXV0aG9yaXR5IGZvcgogICAgICAgdmlzaXRpbmcgZXZlcnkgcHJvdmluY2UsIGZvciBkZXByaXZpbmcgZnJlZSBwZW9wbGUgb2YgdGhlaXIgbGFuZHMsIGZvciBnaXZpbmcgb3IgdGFraW5nIGF3YXkKICAgICAgIGtpbmdkb21zLCB3aGVuZXZlciB0aGV5IHBsZWFzZS4gVGhleSBtYXkgYmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPgogICAgICAgd2hlbiBpdCBpcyBjb252ZW5pZW50IHRvIHRoZW07IGJ1dCB0aGV5IGhhdmUgYSByaWdodCBhbHNvIHRvIHdhbmRlciBhYm91dCB3aGVyZXZlciB0aGV5IGxpa2UKICAgICAgIHdpdGggc3VwcmVtZSBjb21tYW5kLCBhbmQgd2l0aCBhIHBvd2VyIG9mIHNpdHRpbmcgaW4ganVkZ21lbnQgb24gZXZlcnl0aGluZy4gVGhleSBhcmUgYWxsb3dlZAogICAgICAgdG8gcHV0IGFuIGVuZCB0byBhbGwgY3JpbWluYWwgdHJpYWxzOyB0byByZW1vdmUgZnJvbSB0aGUgdHJpYnVuYWxzIHdob2V2ZXIgdGhleSB0aGluayBmaXQ7IHRvCiAgICAgICBkZWNpZGUgYnkgdGhlbXNlbHZlcyBvbiB0aGUgbW9zdCBpbXBvcnRhbnQgbWF0dGVyczsgdG8gZGVsZWdhdGUgdGhlaXIgcG93ZXIgdG8gYSBxdWFlc3RvcjsgdG8KICAgICAgIHNlbmQgYWJvdXQgc3VydmV5b3JzOyBhbmQgdG8gcmF0aWZ5IHdoYXRldmVyIHRoZSBzdXJ2ZXlvciBoYXMgcmVwb3J0ZWQgdG8gdGhhdCBzaW5nbGUKICAgICAgIGRlY2VtdmlyIGJ5IHdob20gaGUgaGFzIGJlZW4gc2VudC4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gSnVzdCBzZWUgd2hhdCBncmVhdCBhdXRob3JpdHkgdGhleSBhcmUgaW52ZXN0ZWQgd2l0aCwKICAgICAgIGFuZCB5b3Ugd2lsbCBzYXkgdGhhdCBpdCBpcyBub3QgdGhlIGluc2FuaXR5IG9mIHByaXZhdGUgaW5kaXZpZHVhbHMsIGJ1dCB0aGUgaW1tb2RlcmF0ZQogICAgICAgYXJyb2dhbmNlIG9mIGtpbmdzLiBGaXJzdCBvZiBhbGwsIHRoZXkgYXJlIGVudHJ1c3RlZCB3aXRoIGJvdW5kbGVzcyBwb3dlciBvZiBhY3F1aXJpbmcKICAgICAgIGVub3Jtb3VzIHN1bXMgb2YgbW9uZXkgb3V0IG9mIHlvdXIgcmV2ZW51ZXMsIG5vdCBieSBmYXJtaW5nIHRoZW0gYnV0IGJ5IGFsaWVuYXRpbmcgdGhlbS4gSW4KICAgICAgIHRoZSBuZXh0IHBsYWNlLCB0aGV5IGFyZSBhbGxvd2VkIHRvIHB1cnN1ZSBhbiBpbnF1aXJ5IGludG8gdGhlIGNvbmR1Y3Qgb2YgZXZlcnkgY291bnRyeSBhbmQKICAgICAgIG9mIGV2ZXJ5IG5hdGlvbiwgd2l0aG91dCBhbnkgYmVuY2ggb2YganVkZ2VzOyB0byBwdW5pc2ggd2l0aG91dCBhbnkgcmlnaHQgb2YgYXBwZWFsIGJlaW5nCiAgICAgICBhbGxvd2VkOyBhbmQgdG8gY29uZGVtbiB3aXRob3V0IHRoZXJlIGJlaW5nIGFueSBtZWFucyBvZiBwcm9jdXJpbmcgYSByZXZlcnNhbCBvZiB0aGVpcgogICAgICAgc2VudGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSB3aWxsIGJlIGFibGUgZm9yIGZpdmUgeWVhcnMgdG8gc2l0IGluCiAgICAgICBqdWRnbWVudCBvbiB0aGUgY29uc3Vscywgb3IgZXZlbiBvbiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0aGVtc2VsdmVzOyBidXQgYWxsIHRoYXQgdGltZQogICAgICAgbm8gb25lIHdpbGwgYmUgYWJsZSB0byBzaXQgaW4ganVkZ21lbnQgb24gdGhlbS4gVGhleSB3aWxsIGJlIGFsbG93ZWQgdG8gZmlsbCBtYWdpc3RlcmlhbAogICAgICAgb2ZmaWNlczsgYnV0IHRoZXkgd2lsbCBub3QgYmUgYWxsb3dlZCB0byBiZSBwcm9zZWN1dGVkLiBUaGV5IHdpbGwgaGF2ZSBwb3dlciB0byBwdXJjaGFzZQogICAgICAgbGFuZHMsIGZyb20gd2hvbXNvZXZlciB0aGV5IGNob29zZSwgd2hhdGV2ZXIgdGhleSBjaG9vc2UsIGFuZCBhdCB3aGF0ZXZlciBwcmljZSB0aGV5IGNob29zZS4KICAgICAgIFRoZXkgYXJlIGFsbG93ZWQgdG8gZXN0YWJsaXNoIG5ldyBjb2xvbmllcywgdG8gcmVjcnVpdCBvbGQgb25lcywgdG8gZmlsbCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBjb2xvbmlzdHM7IHRoZXkgaGF2ZSBhYnNvbHV0ZSBhdXRob3JpdHkgZm9yCiAgICAgICB2aXNpdGluZyBldmVyeSBwcm92aW5jZSwgZm9yIGRlcHJpdmluZyBmcmVlIHBlb3BsZSBvZiB0aGVpciBsYW5kcywgZm9yIGdpdmluZyBvciB0YWtpbmcgYXdheQogICAgICAga2luZ2RvbXMsIHdoZW5ldmVyIHRoZXkgcGxlYXNlLiBUaGV5IG1heSBiZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4KICAgICAgIHdoZW4gaXQgaXMgY29udmVuaWVudCB0byB0aGVtOyBidXQgdGhleSBoYXZlIGEgcmlnaHQgYWxzbyB0byB3YW5kZXIgYWJvdXQgd2hlcmV2ZXIgdGhleSBsaWtlCiAgICAgICB3aXRoIHN1cHJlbWUgY29tbWFuZCwgYW5kIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGluIGp1ZGdtZW50IG9uIGV2ZXJ5dGhpbmcuIFRoZXkgYXJlIGFsbG93ZWQKICAgICAgIHRvIHB1dCBhbiBlbmQgdG8gYWxsIGNyaW1pbmFsIHRyaWFsczsgdG8gcmVtb3ZlIGZyb20gdGhlIHRyaWJ1bmFscyB3aG9ldmVyIHRoZXkgdGhpbmsgZml0OyB0bwogICAgICAgZGVjaWRlIGJ5IHRoZW1zZWx2ZXMgb24gdGhlIG1vc3QgaW1wb3J0YW50IG1hdHRlcnM7IHRvIGRlbGVnYXRlIHRoZWlyIHBvd2VyIHRvIGEgcXVhZXN0b3I7IHRvCiAgICAgICBzZW5kIGFib3V0IHN1cnZleW9yczsgYW5kIHRvIHJhdGlmeSB3aGF0ZXZlciB0aGUgc3VydmV5b3IgaGFzIHJlcG9ydGVkIHRvIHRoYXQgc2luZ2xlCiAgICAgICBkZWNlbXZpciBieSB3aG9tIGhlIGhhcyBiZWVuIHNlbnQuIDwvdHJhbnNsYXRpb24+"
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIGEgZGVmZWN0IGluIG15IGxhbmd1YWdlLCBPIFJvbWFucywgd2hlbiBJIGNhbGwgdGhpcyBwb3dlciBhIGtpbmdseSBwb3dlci4gRm9yIGluCiAgICAgICB0cnV0aCwgaXQgaXMgc29tZXRoaW5nIG11Y2ggbW9yZSBjb25zaWRlcmFibGU7IGZvciB0aGVyZSBuZXZlciB3YXMgYW55IGtpbmdseSBwb3dlciB0aGF0LCBpZgogICAgICAgaXQgd2FzIG5vdCBkZWZpbmVkIGJ5IHNvbWUgZXhwcmVzcyBsYXcsIHdhcyBub3QgYXQgbGVhc3QgdW5kZXJzdG9vZCB0byBiZSBzdWJqZWN0IHRvIGNlcnRhaW4KICAgICAgIGxpbWl0YXRpb25zLiBCdXQgdGhpcyBwb3dlciBpcyBhYnNvbHV0ZWx5IHVuYm91bmRlZDsgaXQgaXMgb25lIHdpdGhpbiB3aGljaCBhbGwga2luZ2x5CiAgICAgICBwb3dlcnMsIGFuZCB5b3VyIG93biBpbXBlcmlhbCBhdXRob3JpdHksIHdoaWNoIGlzIG9mIHN1Y2ggd2lkZSBleHRlbnQsIGFuZCBhbGwgb3RoZXIgcG93ZXJzLAogICAgICAgd2hldGhlciBmcmVlbHkgZXhlcmNpc2VkIGJ5IHlvdXIgcGVybWlzc2lvbiwgb3IgZXhpc3Rpbmcgb25seSBieSB5b3VyIHRhY2l0IGNvdW50ZW5hbmNlLCBhcmUsCiAgICAgICBieSBleHByZXNzIHBlcm1pc3Npb24gb2YgdGhlIGxhdywgY29tcHJlaGVuZGVkLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGZpcnN0IHRoaW5nIHdoaWNoIGlzIGdpdmVuIHRvIHRoZW0gaXMsIGEgbGliZXJ0eSBvZiBzZWxsaW5nIGV2ZXJ5dGhpbmcgY29uY2VybmluZyB0aGUKICAgICAgIHNhbGUgb2Ygd2hpY2ggcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSB3ZXJlIHBhc3NlZCBpbiB0aGUgY29uc3Vsc2hpcCBvZiBNYXJjdXMgVHVsbGl1cyBhbmQKICAgICAgIENuYWV1cyBDb3JuZWxpdXMgb3IgYWZ0ZXJ3YXJkcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPiBXaHkgaXMgdGhpcyBzbyBvYnNjdXJlIGFuZAogICAgICAgc28gY29uY2VhbGVkPyBXaGF0IGlzIHRoZSBtZWFuaW5nIG9mIGl0PyBDb3VsZCBub3QgdGhvc2UgbWF0dGVycyBjb25jZXJuaW5nIHdoaWNoIHRoZSBzZW5hdGUKICAgICAgIHBhc3NlZCByZXNvbHV0aW9ucywgYmUgbWVudGlvbmVkIGluIHRoZSBsYXcgYnkgbmFtZT8gVGhlcmUgYXJlIHR3byByZWFzb25zIGZvciB0aGlzCiAgICAgICBvYnNjdXJpdHksIE8gUm9tYW5zOyBvbmUsIGEgcmVhc29uIG9mIG1vZGVzdHksIGlmIHRoZXJlIGNhbiBiZSBhbnkgbW9kZXN0eSBpbiBzdWNoIGlub3JkaW5hdGUKICAgICAgIGltcHVkZW5jZTsgdGhlIG90aGVyLCBhIHJlYXNvbiBvZiB3aWNrZWRuZXNzLiBGb3IgaXQgZG9lcyBub3QgZGFyZSB0byBuYW1lIHRob3NlIHRoaW5ncyB3aGljaAogICAgICAgdGhlIHNlbmF0ZSByZXNvbHZlZCB3ZXJlIHRvIGhlIHNvbGQsIG1lbnRpb25pbmcgdGhlbSBieSBuYW1lOyBmb3IgdGhleSBhcmUgcHVibGljIHBsYWNlcyBpbgogICAgICAgdGhlIGNpdHksIHRoZXkgYXJlIHNocmluZXMsIHdoaWNoIHNpbmNlIHRoZSByZXN0b3JhdGlvbiBvZiB0aGUgdHJpYnVuaXRpYW4gcG93ZXIgbm8gb25lIGhhcwogICAgICAgdG91Y2hlZCwgYW5kIHdoaWNoIG91ciBhbmNlc3RvcnMgcGFydGx5IGludGVuZGVkIHRvIGJlIHJlZnVnZXMgaW4gdGltZXMgb2YgZGFuZ2VyIGluIHRoZQogICAgICAgaGVhcnQgb2YgdGhlIGNpdHkuIEJ1dCBhbGwgdGhlc2UgdGhpbmdzIHRoZSBkZWNlbXZpcnMgd2lsbCBzZWxsIGJ5IHRoaXMgbGF3IG9mIHRoaXMgdHJpYnVuZQogICAgICAgb2YgdGhlIHBlb3BsZS4gQmVzaWRlcyB0aGVtLCB0aGVyZSB3aWxsIGJlIE1vdW50IEdhdXJ1czsgYmVzaWRlcyB0aGF0LCB0aGVyZSB3aWxsIGJlIHRoZQogICAgICAgb3NpZXItYmVkcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pbnR1cm5hZSIga2V5PSJwZXJzZXVzLE1pbnR1cm5hZSI+TWludHVybmFlPC9wbGFjZU5hbWU+OyBiZXNpZGVzIHRoZW0sIHRoYXQKICAgICAgIHZlcnkgc2FsYWJsZSByb2FkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsSGVyY3VsYW5ldW0iIGtleT0icGVyc2V1cyxIZXJjdWxhbmV1bSI+SGVyY3VsYW5ldW08L3BsYWNlTmFtZT4sIGEgcm9hZCBvZgogICAgICAgbWFueSBkZWxpZ2h0cyBhbmQgb2YgY29uc2lkZXJhYmxlIHZhbHVlOyBhbmQgbWFueSBvdGhlciB0aGluZ3Mgd2hpY2ggdGhlIHNlbmF0ZSBjb25zaWRlcmVkIGl0CiAgICAgICBhZHZpc2FibGUgdG8gc2VsbCBvbiBhY2NvdW50IG9mIHRoZSBzdHJhaXRzIHRvIHdoaWNoIHRoZSB0cmVhc3VyeSB3YXMgcmVkdWNlZCwgYnV0IHdoaWNoIHRoZQogICAgICAgY29uc3VscyBkaWQgbm90IHNlbGwgb24gYWNjb3VudCBvZiB0aGUgdW5wb3B1bGFyaXR5IHdoaWNoIHdvdWxkIGhhdmUgYXR0ZW5kZWQgc3VjaCBhIG1lYXN1cmUuCiAgICAgICAgPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgcGVyaGFwcyBpdCBpcyBvd2luZyB0byBzaGFtZSB0aGF0IHRoZXJlIGlzIG5vCiAgICAgICBtZW50aW9uIG9mIGFsbCB0aGVzZSB0aGluZ3MgaW4gdGhlIGxhdy4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGlzIHRoaXMgc28gb2JzY3VyZSBhbmQKICAgICAgIHNvIGNvbmNlYWxlZD8gV2hhdCBpcyB0aGUgbWVhbmluZyBvZiBpdD8gQ291bGQgbm90IHRob3NlIG1hdHRlcnMgY29uY2VybmluZyB3aGljaCB0aGUgc2VuYXRlCiAgICAgICBwYXNzZWQgcmVzb2x1dGlvbnMsIGJlIG1lbnRpb25lZCBpbiB0aGUgbGF3IGJ5IG5hbWU/IFRoZXJlIGFyZSB0d28gcmVhc29ucyBmb3IgdGhpcwogICAgICAgb2JzY3VyaXR5LCBPIFJvbWFuczsgb25lLCBhIHJlYXNvbiBvZiBtb2Rlc3R5LCBpZiB0aGVyZSBjYW4gYmUgYW55IG1vZGVzdHkgaW4gc3VjaCBpbm9yZGluYXRlCiAgICAgICBpbXB1ZGVuY2U7IHRoZSBvdGhlciwgYSByZWFzb24gb2Ygd2lja2VkbmVzcy4gRm9yIGl0IGRvZXMgbm90IGRhcmUgdG8gbmFtZSB0aG9zZSB0aGluZ3Mgd2hpY2gKICAgICAgIHRoZSBzZW5hdGUgcmVzb2x2ZWQgd2VyZSB0byBoZSBzb2xkLCBtZW50aW9uaW5nIHRoZW0gYnkgbmFtZTsgZm9yIHRoZXkgYXJlIHB1YmxpYyBwbGFjZXMgaW4KICAgICAgIHRoZSBjaXR5LCB0aGV5IGFyZSBzaHJpbmVzLCB3aGljaCBzaW5jZSB0aGUgcmVzdG9yYXRpb24gb2YgdGhlIHRyaWJ1bml0aWFuIHBvd2VyIG5vIG9uZSBoYXMKICAgICAgIHRvdWNoZWQsIGFuZCB3aGljaCBvdXIgYW5jZXN0b3JzIHBhcnRseSBpbnRlbmRlZCB0byBiZSByZWZ1Z2VzIGluIHRpbWVzIG9mIGRhbmdlciBpbiB0aGUKICAgICAgIGhlYXJ0IG9mIHRoZSBjaXR5LiBCdXQgYWxsIHRoZXNlIHRoaW5ncyB0aGUgZGVjZW12aXJzIHdpbGwgc2VsbCBieSB0aGlzIGxhdyBvZiB0aGlzIHRyaWJ1bmUKICAgICAgIG9mIHRoZSBwZW9wbGUuIEJlc2lkZXMgdGhlbSwgdGhlcmUgd2lsbCBiZSBNb3VudCBHYXVydXM7IGJlc2lkZXMgdGhhdCwgdGhlcmUgd2lsbCBiZSB0aGUKICAgICAgIG9zaWVyLWJlZHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNaW50dXJuYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1pbnR1cm5hZSI+TWludHVybmFlPC9wbGFjZU5hbWU+OyBiZXNpZGVzIHRoZW0sIHRoYXQKICAgICAgIHZlcnkgc2FsYWJsZSByb2FkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsSGVyY3VsYW5ldW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEhlcmN1bGFuZXVtIj5IZXJjdWxhbmV1bTwvcGxhY2VOYW1lPiwgYSByb2FkIG9mCiAgICAgICBtYW55IGRlbGlnaHRzIGFuZCBvZiBjb25zaWRlcmFibGUgdmFsdWU7IGFuZCBtYW55IG90aGVyIHRoaW5ncyB3aGljaCB0aGUgc2VuYXRlIGNvbnNpZGVyZWQgaXQKICAgICAgIGFkdmlzYWJsZSB0byBzZWxsIG9uIGFjY291bnQgb2YgdGhlIHN0cmFpdHMgdG8gd2hpY2ggdGhlIHRyZWFzdXJ5IHdhcyByZWR1Y2VkLCBidXQgd2hpY2ggdGhlCiAgICAgICBjb25zdWxzIGRpZCBub3Qgc2VsbCBvbiBhY2NvdW50IG9mIHRoZSB1bnBvcHVsYXJpdHkgd2hpY2ggd291bGQgaGF2ZSBhdHRlbmRlZCBzdWNoIGEgbWVhc3VyZS4KICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.14.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgcGVyaGFwcyBpdCBpcyBvd2luZyB0byBzaGFtZSB0aGF0IHRoZXJlIGlzIG5vCiAgICAgICBtZW50aW9uIG9mIGFsbCB0aGVzZSB0aGluZ3MgaW4gdGhlIGxhdy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGF0IGlzIG11Y2ggbW9yZSB0byBiZSBndWFyZGVkIGFnYWluc3QsIHdoYXQgaXMgYSBtdWNoIG1vcmUgcmVhbCBvYmplY3Qgb2YgZmVhciwgaXMsIHRoYXQKICAgICAgIGdyZWF0IHBvd2VyIGlzIHBlcm1pdHRlZCB0byB0aGUgYm9sZG5lc3Mgb2YgdGhlc2UgZGVjZW12aXJzIG9mIHRhbXBlcmluZyB3aXRoIHRoZSBwdWJsaWMKICAgICAgIGRvY3VtZW50cywgYW5kIGZvcmdpbmcgZGVjcmVlcyBvZiB0aGUgU2VuYXRlLCB3aGljaCBoYXZlIG5ldmVyIGJlZW4gbWFkZTsgYXMgYSBncmVhdCBtYW55IG9mCiAgICAgICB0aG9zZSBtZW4gd2hvIGhhdmUgYmVlbiBjb25zdWxzIG9mIGxhdGUgeWVhcnMgYXJlIGRlYWQuIFVubGVzcywgcGVyaGFwcywgSSBtYXkgYmUgdG9sZCwgdGhhdAogICAgICAgaXQgaXMgbm90IHJlYXNvbmFibGUgZm9yIHlvdSB0byBlbnRlcnRhaW4gYW55IHN1c3BpY2lvbnMgb2YgdGhlaXIgYXVkYWNpdHksIGZvciB3aG9zZQogICAgICAgY3VwaWRpdHkgdGhlIHdob2xlIHdvcmxkIGFwcGVhcnMgdG9vIG5hcnJvdy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.15.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgbm93IG9uZSBraW5kIG9mIHNhbGUsIHdoaWNoIEkgYW0gYXdhcmUgYXBwZWFycyB2ZXJ5IGltcG9ydGFudCB0byB5b3U7IGJ1dCBwcmF5IGdpdmUKICAgICAgIHlvdXIgYXR0ZW50aW9uIHRvIHdoYXQgZm9sbG93cywgYW5kIHlvdSB3aWxsIHNlZSB0aGF0IHRoaXMgaXMgb25seSBhIGtpbmQgb2Ygc3RlcCBhbmQgcm9hZCB0bwogICAgICAgb3RoZXIgbWVhc3VyZXMuIOKAnFdoYXRldmVyIGxhbmRzLCB3aGF0ZXZlciBwbGFjZXMsIHdoYXRldmVyIGJ1aWxkaW5ncy7igJ0KICAgICAgIFdoYXQgaXMgdGhlcmUgYmVzaWRlcz8gVGhlcmUgaXMgbXVjaCBwcm9wZXJ0eSBpbiBzbGF2ZXMsIGluIGNhdHRsZSwgaW4gYnVsbGlvbiwgaW4gbW9uZXksIGluCiAgICAgICBpdm9yeSwgaW4gcm9iZXMsIGluIGZ1cm5pdHVyZSwgaW4gYWxsIHNvcnRzIG9mIG90aGVyIHRoaW5ncy4gV2hhdCBzaGFsbCB0aGF0IHNheT8gRGlkIGhlCiAgICAgICB0aGluayBpdCB3b3VsZCBjYXVzZSB1bnBvcHVsYXJpdHkgdG8gbmFtZSBhbGwgdGhlc2UgdGhpbmdzPyBIZSB3YXMgbm90IGFmcmFpZCBvZgogICAgICAgdW5wb3B1bGFyaXR5LiBXaGF0IHRoZW4gd2FzIGhpcyBtb3RpdmU/IEhlIHRob3VnaHQgdGhlIGNhdGFsb2d1ZSBhIGxvbmcgb25lLCBhbmQgaGUgd2FzCiAgICAgICBhZnJhaWQgb2YgcGFzc2luZyBvdmVyIGFueXRoaW5nOyBzbyBoZSB3cm90ZSBpbiBhZGRpdGlvbiwg4oCcb3IgYW55dGhpbmcKICAgICAgIGVsc2U74oCdIGJ5IHdoaWNoIGJyaWVmIGZvcm11bGEgeW91IHNlZSB0aGF0IG5vdGhpbmcgY2FuIGJlIG9taXR0ZWQuIFdoYXRldmVyLAogICAgICAgdGhlcmVmb3JlLCB0aGVyZSBpcyBvdXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHRoYXQgaGFzIGJlZW4gbWFkZQogICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgYnkgTHVjaXVzIFN1bGxhIGFuZCBRdWludHVzIFBvbXBlaXVzIGluIHRoZWlyIGNvbnN1bHNoaXBzLAogICAgICAgb3IgYWZ0ZXJ3YXJkcywgdGhhdCBoZSBvcmRlcnMgdGhlIGRlY2VtdmlycyB0byBzZWxsLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ5CiAgICAgICB0aGlzIGNsYXVzZSwgSSBzYXksIE8gUm9tYW5zLCB0aGF0IGFsbCBuYXRpb25zLCBhbmQgcGVvcGxlLCBhbmQgcHJvdmluY2VzLCBhbmQga2luZ2RvbXMsIGFyZQogICAgICAgZ2l2ZW4gdXAgYW5kIGhhbmRlZCBvdmVyIHRvIHRoZSBkb21pbmlvbiwgYW5kIGp1ZGdtZW50LCBhbmQgcG93ZXIgb2YgdGhlIGRlY2Vtdmlycy4gVGhpcyBpcwogICAgICAgdGhlIGZpcnN0IHRoaW5nOyBmb3IgSSBhc2sgd2hhdCBwbGFjZSB0aGVyZSBpcyBhbnl3aGVyZSBpbiB0aGUgd29ybGQgd2hpY2ggdGhlIGRlY2VtdmlycyBtYXkKICAgICAgIG5vdCBiZSBhYmxlIHRvIHNheSBoYXMgYmVlbiBtYWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlPyBGb3IsIHdoZW4gdGhlIHNhbWUgcGVyc29uCiAgICAgICB3aG8gaGFzIG1hZGUgdGhlIGFzc2VydGlvbiBpcyBhbHNvIHRvIGp1ZGdlIG9mIHRoZSB0cnV0aCBvZiBpdCwgd2hhdCBpcyB0aGVyZSB3aGljaCBoZSBtYXkKICAgICAgIG5vdCBzYXksIHdoZW4gaGUgaXMgYWxzbyB0aGUgcGVyc29uIHRvIGRlY2lkZSBpbiB0aGUgcXVlc3Rpb24/IEl0IHdpbGwgYmUgdmVyeSBjb252ZW5pZW50IHRvCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTYxNDAiIGtleT0idGduLDcwMTYxNDAiPlBlcmdhbXVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTbXlybmEiIGtleT0icGVyc2V1cyxTbXlybmEiPlNteXJuYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU5IiBrZXk9InRnbiw3MDAyMzU5Ij5UcmFsbGVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI0OTkiIGtleT0idGduLDcwMDI0OTkiPkVwaGVzdXM8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pbGV0dXMiIGtleT0icGVyc2V1cyxNaWxldHVzIj5NaWxldHVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDeXppY3VzIiBrZXk9InBlcnNldXMsQ3l6aWN1cyI+Q3l6aWN1czwvcGxhY2VOYW1lPiwgYW5kLCBpbiBzaG9ydCwgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggaGFzIGJlZW4gcmVjb3ZlcmVkIHNpbmNlIHRoZSBjb25zdWxzaGlwIG9mIEx1Y2l1cyBTdWxsYSBhbmQgUXVpbnR1cyBQb21wZWl1cywgaGFzCiAgICAgICBiZWNvbWUgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUuIFdpbGwgbGFuZ3VhZ2UgZmFpbCBoaW0gaW4gd2hpY2ggdG8gYXNzZXJ0IHN1Y2ggYQogICAgICAgZG9jdHJpbmU/IG9yLCB3aGVuIHRoZSBzYW1lIHBlcnNvbiBtYWtlcyB0aGUgc3RhdGVtZW50IGFuZCBqdWRnZXMgb2YgdGhlIHRydXRoIG9mIGl0LCB3aWxsIGl0CiAgICAgICBiZSBpbXBvc3NpYmxlIHRvIGluZHVjZSBoaW0gdG8gZ2l2ZSBhIGZhbHNlIGRlY2lzaW9uPyBvciwgaWYgaGUgaXMgdW53aWxsaW5nIHRvIHBhc3Mgc2VudGVuY2UKICAgICAgIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aWxsIGhlIG5vdCBlc3RpbWF0ZSBhdCBoaXMgb3duIHByaWNlIGl0cwogICAgICAgcmVsZWFzZSBmcm9tIHRoZSBkcmVhZCBvZiBjb25kZW1uYXRpb24/IDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgd2lsbCBoZQogICAgICAgc2F54oCUKGFuZCBpdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIGZvciBhbnkgb25lIHRvIGFyZ3VlIGFnYWluc3QgdGhpcywgc2luY2UgaXQgaGFzCiAgICAgICBiZWVuIGFscmVhZHkgc2V0dGxlZCBhbmQgZGVjaWRlZCBieSB5b3UsIGFuZCBzaW5jZSB3ZSBoYXZlIGFscmVhZHkgdm90ZWQgaXQgdG8gYmUgb3VyCiAgICAgICBpbmhlcml0YW5jZSwp4oCUd2hhdCB3aWxsIGhlIHNheSB0byB0aGUga2luZ2RvbSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYwOCIga2V5PSJ0Z24sNzAxNjYwOCI+Qml0aHluaWE8L3BsYWNlTmFtZT4/IHdoaWNoIGhhcyB1bmRvdWJ0ZWRseSBiZWNvbWUgdGhlIHB1YmxpYyBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLgogICAgICAgSXMgdGhlcmUgYW55IHJlYXNvbiB3aHkgdGhlIGRlY2VtdmlycyBzaG91bGQgbm90IHNlbGwgYWxsIHRoZSBsYW5kcywgYW5kIGNpdGllcywgYW5kIG1pbGl0YXJ5CiAgICAgICBzdGF0aW9ucyBhbmQgaGFyYm91cnMsIGFuZCBpbiBzaG9ydCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MDgiIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PwogICAgICAgIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgdGhhdCBoYXMgYmVlbiBtYWRlCiAgICAgICB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSBMdWNpdXMgU3VsbGEgYW5kIFF1aW50dXMgUG9tcGVpdXMgaW4gdGhlaXIgY29uc3Vsc2hpcHMsCiAgICAgICBvciBhZnRlcndhcmRzLCB0aGF0IGhlIG9yZGVycyB0aGUgZGVjZW12aXJzIHRvIHNlbGwuIDwvdHJhbnNsYXRpb24+"
translation['2.15.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnkKICAgICAgIHRoaXMgY2xhdXNlLCBJIHNheSwgTyBSb21hbnMsIHRoYXQgYWxsIG5hdGlvbnMsIGFuZCBwZW9wbGUsIGFuZCBwcm92aW5jZXMsIGFuZCBraW5nZG9tcywgYXJlCiAgICAgICBnaXZlbiB1cCBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlIGRvbWluaW9uLCBhbmQganVkZ21lbnQsIGFuZCBwb3dlciBvZiB0aGUgZGVjZW12aXJzLiBUaGlzIGlzCiAgICAgICB0aGUgZmlyc3QgdGhpbmc7IGZvciBJIGFzayB3aGF0IHBsYWNlIHRoZXJlIGlzIGFueXdoZXJlIGluIHRoZSB3b3JsZCB3aGljaCB0aGUgZGVjZW12aXJzIG1heQogICAgICAgbm90IGJlIGFibGUgdG8gc2F5IGhhcyBiZWVuIG1hZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGU/IEZvciwgd2hlbiB0aGUgc2FtZSBwZXJzb24KICAgICAgIHdobyBoYXMgbWFkZSB0aGUgYXNzZXJ0aW9uIGlzIGFsc28gdG8ganVkZ2Ugb2YgdGhlIHRydXRoIG9mIGl0LCB3aGF0IGlzIHRoZXJlIHdoaWNoIGhlIG1heQogICAgICAgbm90IHNheSwgd2hlbiBoZSBpcyBhbHNvIHRoZSBwZXJzb24gdG8gZGVjaWRlIGluIHRoZSBxdWVzdGlvbj8gSXQgd2lsbCBiZSB2ZXJ5IGNvbnZlbmllbnQgdG8KICAgICAgIHNheSwgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2MTQwIj5QZXJnYW11czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU215cm5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTbXlybmEiPlNteXJuYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTkiPlRyYWxsZXM8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjQ5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNDk5Ij5FcGhlc3VzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNaWxldHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNaWxldHVzIj5NaWxldHVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDeXppY3VzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDeXppY3VzIj5DeXppY3VzPC9wbGFjZU5hbWU+LCBhbmQsIGluIHNob3J0LCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwKICAgICAgIHdoaWNoIGhhcyBiZWVuIHJlY292ZXJlZCBzaW5jZSB0aGUgY29uc3Vsc2hpcCBvZiBMdWNpdXMgU3VsbGEgYW5kIFF1aW50dXMgUG9tcGVpdXMsIGhhcwogICAgICAgYmVjb21lIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLiBXaWxsIGxhbmd1YWdlIGZhaWwgaGltIGluIHdoaWNoIHRvIGFzc2VydCBzdWNoIGEKICAgICAgIGRvY3RyaW5lPyBvciwgd2hlbiB0aGUgc2FtZSBwZXJzb24gbWFrZXMgdGhlIHN0YXRlbWVudCBhbmQganVkZ2VzIG9mIHRoZSB0cnV0aCBvZiBpdCwgd2lsbCBpdAogICAgICAgYmUgaW1wb3NzaWJsZSB0byBpbmR1Y2UgaGltIHRvIGdpdmUgYSBmYWxzZSBkZWNpc2lvbj8gb3IsIGlmIGhlIGlzIHVud2lsbGluZyB0byBwYXNzIHNlbnRlbmNlCiAgICAgICBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aWxsIGhlIG5vdCBlc3RpbWF0ZSBhdCBoaXMgb3duIHByaWNlIGl0cwogICAgICAgcmVsZWFzZSBmcm9tIHRoZSBkcmVhZCBvZiBjb25kZW1uYXRpb24/IDwvdHJhbnNsYXRpb24+"
translation['2.15.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB3aWxsIGhlCiAgICAgICBzYXnigJQoYW5kIGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIGFueSBvbmUgdG8gYXJndWUgYWdhaW5zdCB0aGlzLCBzaW5jZSBpdCBoYXMKICAgICAgIGJlZW4gYWxyZWFkeSBzZXR0bGVkIGFuZCBkZWNpZGVkIGJ5IHlvdSwgYW5kIHNpbmNlIHdlIGhhdmUgYWxyZWFkeSB2b3RlZCBpdCB0byBiZSBvdXIKICAgICAgIGluaGVyaXRhbmNlLCnigJR3aGF0IHdpbGwgaGUgc2F5IHRvIHRoZSBraW5nZG9tIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PyB3aGljaCBoYXMgdW5kb3VidGVkbHkgYmVjb21lIHRoZSBwdWJsaWMgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZS4KICAgICAgIElzIHRoZXJlIGFueSByZWFzb24gd2h5IHRoZSBkZWNlbXZpcnMgc2hvdWxkIG5vdCBzZWxsIGFsbCB0aGUgbGFuZHMsIGFuZCBjaXRpZXMsIGFuZCBtaWxpdGFyeQogICAgICAgc3RhdGlvbnMgYW5kIGhhcmJvdXJzLCBhbmQgaW4gc2hvcnQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgd2lsbCB0aGV5IGRvIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzIiPk1pdHlsZW5lPC9wbGFjZU5hbWU+PyB3aGljaCBoYXMKICAgICAgIHVuZG91YnRlZGx5IGJlY29tZSB5b3VycywgTyBSb21hbnMsIGJ5IHRoZSBsYXdzIG9mIHdhciBhbmQgYnkgdGhlIHJpZ2h0cyBvZiB2aWN0b3J5OyBhIGNpdHkKICAgICAgIGJvdGggYnkgbmF0dXJlIGFuZCBzaXR1YXRpb24sIGFuZCBieSB0aGUgZGVzY3JpcHRpb24gb2YgaXRzIGhvdXNlcywgYW5kIGJ5IGl0cyBnZW5lcmFsCiAgICAgICBiZWF1dHksIG1vc3QgZW1pbmVudGx5IHJlbWFya2FibGU7IGFuZCBpdHMgbGFuZHMgYXJlIHBsZWFzYW50IGFuZCBwcm9kdWN0aXZlLiBUaGF0IGNpdHksCiAgICAgICBmb3Jzb290aCwgY29tZXMgdW5kZXIgdGhlIHNhbWUgaGVhZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IHdpbGwgYmVjb21lIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwgYW5kIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4/IEhvdyBtdWNoIGl0IGlzIG91dCBvZiBzaWdodCEgaG93IGNvbXBsZXRlbHkgaXMgaXQKICAgICAgIGhpZGRlbiEgaG93IHN0ZWFsdGhpbHkgaXMgaXQgYWJhbmRvbmVkIGVudGlyZWx5IHRvIHRoZSBkZWNlbXZpcnMhIEZvciB3aG8gaXMgdGhlcmUgYW1vbmcgeW91CiAgICAgICB3aG8gaXMgaWdub3JhbnQgdGhhdCB0aGF0IGtpbmdkb20gaGFzIGJlY29tZSB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSB0aGUgd2lsbCBvZgogICAgICAga2luZyBBbGV4YW5kZXI/IEhlcmUgbm93IEksIHRoZSBjb25zdWwgb2YgdGhlIFJvbWFuIHBlb3BsZSwgbm90IG9ubHkgZ2l2ZSBubyBkZWNpc2lvbiwgYnV0IEkKICAgICAgIGRvIG5vdCBldmVuIGV4cHJlc3MgbXkgb3Bpbmlvbi4gRm9yIGl0IGFwcGVhcnMgdG8gbWUgYSBtb3N0IGltcG9ydGFudCBtYXR0ZXIgbm90IG1lcmVseSB0bwogICAgICAgZGVjaWRlIG9pbCwgYnV0IGV2ZW4gdG8gc3BlYWsgb2YuIEkgc2VlIGEgbWFuIHdobyBhc3N1cmVzIG1lIHRoYXQgdGhlIHdpbGwgd2FzIGNlcnRhaW5seQogICAgICAgbWFkZTsgSSBrbm93IHRoYXQgdGhlcmUgaXMgYSByZXNvbHV0aW9uIG9mIHRoZSBzZW5hdGUgZXh0YW50IHRvIHRoZSBlZmZlY3QgdGhhdCBpdCBhY2NlcHRlZAogICAgICAgdGhlIGluaGVyaXRhbmNlOyB3aGljaCB3YXMgcGFzc2VkIHdoZW4sIGFmdGVyIHRoZSBkZWF0aCBvZiBBbGV4YW5kZXIsIHdlIHNlbnQgYW1iYXNzYWRvcnMgdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjg2MiIga2V5PSJ0Z24sNzAwMjg2MiI+VHlyZTwvcGxhY2VOYW1lPiwgdG8gcmVjb3ZlciBmb3IgdGhlIHBlb3BsZSBtb25leSB3aGljaCBoYWQKICAgICAgIGJlZW4gZGVwb3NpdGVkIHRoZXJlIGJ5IGhpbS4gPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSByZWNvbGxlY3QgdGhhdCBMdWNpdXMKICAgICAgIFBoaWxpcHB1cyBoYXMgb2Z0ZW4gc3RhdGVkIHRoZXNlIHRoaW5ncyBwb3NpdGl2ZWx5IGluIHRoZSBzZW5hdGUuIEkgc2VlIHRoYXQgaXMgYWdyZWVkIHVwb24KICAgICAgIGJ5IGFsbCBtZW4sIHRoYXQgaGUsIHdobyBpcyBhdCB0aGlzIHByZXNlbnQgbW9tZW50IGluIHBvc3Nlc3Npb24gb2YgdGhlIGtpbmdkb20sIGlzIG5laXRoZXIKICAgICAgIG9mIHRoZSByb3lhbCBmYW1pbHkgbm9yIG9mIGFueSByb3lhbCBkaXNwb3NpdGlvbi4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjcyIj5NaXR5bGVuZTwvcGxhY2VOYW1lPj8gd2hpY2ggaGFzCiAgICAgICB1bmRvdWJ0ZWRseSBiZWNvbWUgeW91cnMsIE8gUm9tYW5zLCBieSB0aGUgbGF3cyBvZiB3YXIgYW5kIGJ5IHRoZSByaWdodHMgb2YgdmljdG9yeTsgYSBjaXR5CiAgICAgICBib3RoIGJ5IG5hdHVyZSBhbmQgc2l0dWF0aW9uLCBhbmQgYnkgdGhlIGRlc2NyaXB0aW9uIG9mIGl0cyBob3VzZXMsIGFuZCBieSBpdHMgZ2VuZXJhbAogICAgICAgYmVhdXR5LCBtb3N0IGVtaW5lbnRseSByZW1hcmthYmxlOyBhbmQgaXRzIGxhbmRzIGFyZSBwbGVhc2FudCBhbmQgcHJvZHVjdGl2ZS4gVGhhdCBjaXR5LAogICAgICAgZm9yc29vdGgsIGNvbWVzIHVuZGVyIHRoZSBzYW1lIGhlYWQuIDwvdHJhbnNsYXRpb24+"
translation['2.16.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB3aWxsIGJlY29tZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQWxleGFuZHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwgYW5kIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPj8gSG93IG11Y2ggaXQgaXMgb3V0IG9mIHNpZ2h0ISBob3cgY29tcGxldGVseSBpcyBpdAogICAgICAgaGlkZGVuISBob3cgc3RlYWx0aGlseSBpcyBpdCBhYmFuZG9uZWQgZW50aXJlbHkgdG8gdGhlIGRlY2VtdmlycyEgRm9yIHdobyBpcyB0aGVyZSBhbW9uZyB5b3UKICAgICAgIHdobyBpcyBpZ25vcmFudCB0aGF0IHRoYXQga2luZ2RvbSBoYXMgYmVjb21lIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlIGJ5IHRoZSB3aWxsIG9mCiAgICAgICBraW5nIEFsZXhhbmRlcj8gSGVyZSBub3cgSSwgdGhlIGNvbnN1bCBvZiB0aGUgUm9tYW4gcGVvcGxlLCBub3Qgb25seSBnaXZlIG5vIGRlY2lzaW9uLCBidXQgSQogICAgICAgZG8gbm90IGV2ZW4gZXhwcmVzcyBteSBvcGluaW9uLiBGb3IgaXQgYXBwZWFycyB0byBtZSBhIG1vc3QgaW1wb3J0YW50IG1hdHRlciBub3QgbWVyZWx5IHRvCiAgICAgICBkZWNpZGUgb2lsLCBidXQgZXZlbiB0byBzcGVhayBvZi4gSSBzZWUgYSBtYW4gd2hvIGFzc3VyZXMgbWUgdGhhdCB0aGUgd2lsbCB3YXMgY2VydGFpbmx5CiAgICAgICBtYWRlOyBJIGtub3cgdGhhdCB0aGVyZSBpcyBhIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSBleHRhbnQgdG8gdGhlIGVmZmVjdCB0aGF0IGl0IGFjY2VwdGVkCiAgICAgICB0aGUgaW5oZXJpdGFuY2U7IHdoaWNoIHdhcyBwYXNzZWQgd2hlbiwgYWZ0ZXIgdGhlIGRlYXRoIG9mIEFsZXhhbmRlciwgd2Ugc2VudCBhbWJhc3NhZG9ycyB0bwogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyODYyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NjIiPlR5cmU8L3BsYWNlTmFtZT4sIHRvIHJlY292ZXIgZm9yIHRoZSBwZW9wbGUgbW9uZXkgd2hpY2ggaGFkCiAgICAgICBiZWVuIGRlcG9zaXRlZCB0aGVyZSBieSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['2.16.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSByZWNvbGxlY3QgdGhhdCBMdWNpdXMKICAgICAgIFBoaWxpcHB1cyBoYXMgb2Z0ZW4gc3RhdGVkIHRoZXNlIHRoaW5ncyBwb3NpdGl2ZWx5IGluIHRoZSBzZW5hdGUuIEkgc2VlIHRoYXQgaXMgYWdyZWVkIHVwb24KICAgICAgIGJ5IGFsbCBtZW4sIHRoYXQgaGUsIHdobyBpcyBhdCB0aGlzIHByZXNlbnQgbW9tZW50IGluIHBvc3Nlc3Npb24gb2YgdGhlIGtpbmdkb20sIGlzIG5laXRoZXIKICAgICAgIG9mIHRoZSByb3lhbCBmYW1pbHkgbm9yIG9mIGFueSByb3lhbCBkaXNwb3NpdGlvbi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JdCBpcyBzYWlkLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGhhdCB0aGVyZSBpcyBubyB3aWxsOyB0aGF0IHRoZSBSb21hbiBwZW9wbGUgb3VnaHQgbm90IHRvCiAgICAgICBzZWVtIHRvIGNvdmV0IGV2ZXJ5IGtpbmdkb20gdW5kZXIgdGhlIHN1bjsgdGhhdCBvdXIgY2l0aXplbnMgd2lsbCBlbWlncmF0ZSB0byB0aG9zZSByZWdpb25zLAogICAgICAgb24gYWNjb3VudCBvZiB0aGUgZmVydGlsaXR5IG9mIHRoZSBzb2lsIGFuZCB0aGUgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmcgd2hpY2ggZXhpc3RzIHRoZXJlLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gV2lsbCBQdWJsaXVzIFJ1bGx1cywgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZGVjZW12aXJzLCBoaXMKICAgICAgIGNvbGxlYWd1ZXMsIGRlY2lkZSB1cG9uIHNvIGltcG9ydGFudCBhbiBhZmZhaXIgYXMgdGhpcz8gQW5kIHdoaWNoIHdheSB3aWxsIGhlIGRlY2lkZT8gRm9yCiAgICAgICBlYWNoIGFsdGVybmF0aXZlIGlzIHNvIGltcG9ydGFudCB0aGF0IGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIHlvdSB0byBlbnRydXN0IHRoZSBkZWNpc2lvbgogICAgICAgdG8gaGltLCBvciB0byBwdXQgdXAgd2l0aCBoaXMgc2VudGVuY2UuIFdpbGwgaGUgZGVzaXJlIHRvIGJlIHBvcHVsYXI/IEhlIHdpbGwgYWRqdWRnZSB0aGUKICAgICAgIGtpbmdkb20gdG8gdGhlIFJvbWFuIHBlb3BsZS4gSW4gY29uc2VxdWVuY2UsIGhlIHdpbGwgYWxzbywgaW4gYWNjb3JkYW5jZSB3aXRoIGhpcyBvd24gbGF3LAogICAgICAgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCBhbmQgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uIEhlIHdpbGwgYmUgZm91bmQgdG8gYmUgdGhlIGp1ZGdlLCB0aGUgYXJiaXRlciwgdGhlCiAgICAgICBtYXN0ZXIsIG9mIGEgbW9zdCB3ZWFsdGh5IGNpdHksIGFuZCBvZiBhIG1vc3QgYmVhdXRpZnVsIGNvdW50cnk7IHllcywgaGUgd2lsbCBiZSBmb3VuZCB0byBiZQogICAgICAgdGhlIGtpbmcgb2YgYSBtb3N0IG9wdWxlbnQga2luZ2RvbS4gV2lsbCBoZSBhYnN0YWluIGZyb20gdGFraW5nIGFsbCB0aGlzPyBmcm9tIGRlc2lyaW5nIGFsbAogICAgICAgdGhpcz8gSGUgd2lsbCBkZWNpZGUgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+IGJlbG9uZ3MKICAgICAgIHRvIHRoZSBraW5nOyBoZSB3aWxsIGJ5IGhpcyBzZW50ZW5jZSBkZXByaXZlIHRoZSBSb21hbiBwZW9wbGUgb2YgaXQuIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.16.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gV2lsbCBQdWJsaXVzIFJ1bGx1cywgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZGVjZW12aXJzLCBoaXMKICAgICAgIGNvbGxlYWd1ZXMsIGRlY2lkZSB1cG9uIHNvIGltcG9ydGFudCBhbiBhZmZhaXIgYXMgdGhpcz8gQW5kIHdoaWNoIHdheSB3aWxsIGhlIGRlY2lkZT8gRm9yCiAgICAgICBlYWNoIGFsdGVybmF0aXZlIGlzIHNvIGltcG9ydGFudCB0aGF0IGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIHlvdSB0byBlbnRydXN0IHRoZSBkZWNpc2lvbgogICAgICAgdG8gaGltLCBvciB0byBwdXQgdXAgd2l0aCBoaXMgc2VudGVuY2UuIFdpbGwgaGUgZGVzaXJlIHRvIGJlIHBvcHVsYXI/IEhlIHdpbGwgYWRqdWRnZSB0aGUKICAgICAgIGtpbmdkb20gdG8gdGhlIFJvbWFuIHBlb3BsZS4gSW4gY29uc2VxdWVuY2UsIGhlIHdpbGwgYWxzbywgaW4gYWNjb3JkYW5jZSB3aXRoIGhpcyBvd24gbGF3LAogICAgICAgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT4sIGFuZCBzZWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LiBIZSB3aWxsIGJlIGZvdW5kIHRvIGJlIHRoZSBqdWRnZSwgdGhlIGFyYml0ZXIsIHRoZQogICAgICAgbWFzdGVyLCBvZiBhIG1vc3Qgd2VhbHRoeSBjaXR5LCBhbmQgb2YgYSBtb3N0IGJlYXV0aWZ1bCBjb3VudHJ5OyB5ZXMsIGhlIHdpbGwgYmUgZm91bmQgdG8gYmUKICAgICAgIHRoZSBraW5nIG9mIGEgbW9zdCBvcHVsZW50IGtpbmdkb20uIFdpbGwgaGUgYWJzdGFpbiBmcm9tIHRha2luZyBhbGwgdGhpcz8gZnJvbSBkZXNpcmluZyBhbGwKICAgICAgIHRoaXM/IEhlIHdpbGwgZGVjaWRlIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+IGJlbG9uZ3MKICAgICAgIHRvIHRoZSBraW5nOyBoZSB3aWxsIGJ5IGhpcyBzZW50ZW5jZSBkZXByaXZlIHRoZSBSb21hbiBwZW9wbGUgb2YgaXQuIDwvdHJhbnNsYXRpb24+"
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.17.44'] = ""
translation['2.17.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gSnVzdCByZXZvbHZlIHRoZXNlIHRoaW5ncyBpbiB5b3VyCiAgICAgICBtaW5kcy4gLiAuIC4gLiBGb3JlaWduIG5hdGlvbnMgY2FuIHNjYXJjZWx5IGVuZHVyZSBvdXIgbGlldXRlbmFudHMsIHRob3VnaCB0aGV5IGFyZSBtZW4gb2YKICAgICAgIGJ1dCBzbGlnaHQgYXV0aG9yaXR5LCB3aGVuIHRoZXkgZ28gb24gZnJlZSBsaWV1dGVuYW5jaWVzLCBvbiBhY2NvdW50IG9mIHNvbWUgcHJpdmF0ZQogICAgICAgYnVzaW5lc3MuIEZvciB0aGUgbmFtZSBvZiBwb3dlciBpcyBhIGhhcmQgb25lIHRvIGJlYXIsIGFuZCBpcyBkcmVhZGVkIGV2ZW4gaW4gZXZlciBzbwogICAgICAgaW5jb25zaWRlcmFibGUgYSBwZXJzb247IGJlY2F1c2UsIHdoZW4gdGhleSBoYXZlIG9uY2UgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gdGhleSBjb25kdWN0IHRoZWlyIHByb2NlZWRpbmdzIG5vdCBpbiB0aGVpciBvd24gbmFtZSwgYnV0IGluIHlvdXJzLiBXaGF0CiAgICAgICBkbyB5b3Ugc3VwcG9zZSB3aWxsIGhhcHBlbiwgd2hlbiB0aG9zZSBkZWNlbXZpcnMgd2FuZGVyIGFsbCBvdmVyIHRoZSB3b3JsZCB3aXRoIHRoZWlyIHN1cHJlbWUKICAgICAgIHBvd2VyLCBhbmQgdGhlaXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZmFjZXM8L2ZvcmVpZ24+LCBhbmQgdGhlaXIgY2hvc2VuIGJhbmQgb2Ygc3VydmV5b3JzPyBXaGF0CiAgICAgICBkbyB5b3Ugc3VwcG9zZSB3aWxsIGJlIHRoZSBmZWVsaW5ncywgd2hhdCB0aGUgYWxhcm0sIHdoYXQgdGhlIGFjdHVhbCBkYW5nZXIgb2YgdGhvc2UgdW5oYXBweQogICAgICAgbmF0aW9ucz8gPC90cmFuc2xhdGlvbj4="
translation['2.17.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgdGhlcmUgYW55IHRlcnJvciBpbiBhYnNvbHV0ZSBwb3dlcj8gdGhleSB3aWxsCiAgICAgICBlbmR1cmUgaXQ74oCUaXMgdGhlcmUgYW55IGV4cGVuc2UgZW50YWlsZWQgYnkgdGhlIGFycml2YWwgb2Ygc3VjaCBtZW4/IHRoZXkgd2lsbCBiZWFyCiAgICAgICBpdDvigJRhcmUgYW55IHByZXNlbnRzIGV4YWN0ZWQgZnJvbSB0aGVtPyB0aGV5IHdpbGwgbm90IHJlZnVzZSB0aGVtLiBCdXQgd2hhdCBhCiAgICAgICBidXNpbmVzcyBpcyB0aGF0LCBPIFJvbWFucywgd2hlbiBhIGRlY2VtdmlyLCB3aG8gZWl0aGVyIGhhcyBjb21lIHRvIHNvbWUgY2l0eSBhZnRlciBiZWluZwogICAgICAgZXhwZWN0ZWQsIGFzIGEgZ3Vlc3QsIG9yIHVuZXhwZWN0ZWRseSwgYXMgYSBtYXN0ZXIsIHByb25vdW5jZXMgdGhhdCB2ZXJ5IHBsYWNlIHRvIHdoaWNoIGhlCiAgICAgICBoYXMgY29tZSwgdGhhdCBpZGVudGljYWwgaG9zcGl0YWJsZSBob3VzZSBpbiB3aGljaCBoZSBpcyByZWNlaXZlZCwgdG8gYmUgdGhlIHB1YmxpYyBwcm9wZXJ0eQogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZT8gSG93IGdyZWF0IHdpbGwgYmUgdGhlIG1pc2VyeSBvZiB0aGUgcGVvcGxlIGlmIGhlIHNheXMgdGhhdCBpdCBpcyBzbyEgSG93CiAgICAgICBncmVhdCB3aWxsIGJlIGhpcyBvd24gcHJpdmF0ZSBnYWluLCBpZiBoZSBzYXlzIHRoYXQgaXQgaXMgbm90ISBBbmQgdGhlIHNhbWUgbWVuIHdobyBkZXNpcmUKICAgICAgIGFsbCB0aGlzLCBhcmUgYWNjdXN0b21lZCBzb21ldGltZXMgdG8gY29tcGxhaW4gdGhhdCBldmVyeSBsYW5kIGFuZCBldmVyeSBzZWEgaGFzIGJlZW4gcHV0CiAgICAgICB1bmRlciB0aGUgcG93ZXIgb2YgQ25hZXVzIFBvbXBlaXVzLiBCdXQgYXJlIHRoZXNlIHR3byBjYXNlcywgdGhlIG9uZSwgb2YgbWFueSB0aGluZ3MgYmVpbmcKICAgICAgIGVudHJ1c3RlZCB0byBhIG1hbiwgdGhlIG90aGVyLCBvZiBldmVyeXRoaW5nIGJlaW5nIHNhY3JpZmljZWQgdG8gaGltLCBhdCBhbGwgc2ltaWxhcj8gSXMKICAgICAgIHRoZXJlIGFueSByZXNlbWJsYW5jZSBiZXR3ZWVuIGEgbWFuJ3MgYmVpbmcgYXBwb2ludGVkIGFzIGNoaWVmIG1hbmFnZXIgb2YgYSBidXNpbmVzcwogICAgICAgcmVxdWlyaW5nIHRvaWwgYW5kIGxhYm91ciwgYW5kIGEgbWFuJ3MgaGF2aW5nIHRoZSBjaGllZiBzaGFyZSBpbiBib290eSBhbmQgZ2FpbiBhbGxvdHRlZCB0bwogICAgICAgaGltPyBpbiBhIG1hbidzIGJlaW5nIHNlbnQgdG8gZGVsaXZlciBhbGxpZXMsIGFuZCBhIG1hbidzIGJlaW5nIHNlbnQgdG8gb3BwcmVzcyB0aGVtPyBMYXN0bHksCiAgICAgICBpZiB0aGVyZSBiZSBhaXJ5IGV4dHJhb3JkaW5hcnkgaG9ub3VyIGluIHF1ZXN0aW9uLCBkb2VzIGl0IG1ha2Ugbm8gZGlmZmVyZW5jZSB3aGV0aGVyIHRoZQogICAgICAgUm9tYW4gcGVvcGxlIGNvbmZlcnMgdGhhdCBob25vdXIgb24gYW55IG9uZSBpdCBjaG9vc2VzLCBvciB3aGV0aGVyIGhlIGltcHVkZW50bHkgZmlsY2hlcyBpdAogICAgICAgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIGJ5IGFuIHVuZGVyaGFuZCB0cmljayBvZiBsYXc/IDwvdHJhbnNsYXRpb24+"
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.18.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBoYXZlIG5vdyBzZWVuIGhvdyBtYW55IHRoaW5ncyBhbmQgd2hhdCB2YWx1YWJsZSB0aGluZ3MgdGhlIGRlY2VtdmlycyBhcmUgbGlrZWx5IHRvIHNlbGwKICAgICAgIHdpdGggdGhlIHNhbmN0aW9uIG9mIHRoZSBsYXcuIFRoYXQgaXMgbm90IGVub3VnaC4gV2hlbiB0aGV5IGhhdmUgc2F0ZWQgdGhlbXNlbHZlcyB3aXRoIHRoZQogICAgICAgYmxvb2Qgb2YgdGhlIGFsbGllcywgYW5kIG9mIGZvcmVpZ24gbmF0aW9ucywgYW5kIG9mIGtpbmdzLCB0aGV5IHdpbGwgdGhlbiBjdXQgdGhlIHNpbmV3cyBvZgogICAgICAgdGhlIFJvbWFuIHBlb3BsZTsgdGhleSB3aWxsIGxheSBoYW5kcyBvbiB5b3VyIHJldmVudWVzOyB0aGV5IHdpbGwgYnJlYWsgaW50byB5b3VyIHRyZWFzdXJ5LgogICAgICAgRm9yIGEgY2xhdXNlIGZvbGxvd3MsIGluIHdoaWNoIGhlIGlzIG5vdCBjb250ZW50IHdpdGggcGVybWl0dGluZywgaWYgYnkgY2hhbmNlIGFueSBtb25leQogICAgICAgc2hvdWxkIGJlIHdhbnRpbmcsICh3aGljaCwgaG93ZXZlciwgY2FuIGJlIGFtYXNzZWQgaW4gc3VjaCBxdWFudGl0aWVzIGZyb20gdGhlIGVmZmVjdCBvZiB0aGUKICAgICAgIHByZXZpb3VzIGNsYXVzZXMsIHRoYXQgaXQgb3VnaHQgbm90IHRvIGJlIHdhbnRpbmcsKSBidXQgd2hpY2ggYWN0dWFsbHkgKGFzIGlmIHRoYXQgd2FzIGxpa2VseQogICAgICAgdG8gYmUgdGhlIHNhbHZhdGlvbiBvZiB5b3UgYWxsKSBvcmRlcnMgYW5kIGNvbXBlbHMgdGhlIGRlY2VtdmlycyB0byBzZWxsIGFsbCB5b3VyIHJldmVudWVzLAogICAgICAgbmFtaW5nIGVhY2ggaXRlbSBzZXBhcmF0ZWx5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDgiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBkbyB5b3Ugbm93IHJlYWQgdG8gbWUgaW4KICAgICAgIHJlZ3VsYXIgb3JkZXIsIHRoZSBjYXRhbG9ndWUgb2YgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgd2hpY2ggaXMgZm9yIHNhbGUgYWNjb3JkaW5nCiAgICAgICB0byB0aGUgd3JpdHRlbiBwcm92aXNpb25zIG9mIHRoaXMgbGF3LiBBIGNhdGFsb2d1ZSB3aGljaCBJIHRoaW5rLCBpbiB0cnV0aCwgd2lsbCBiZSBtaXNlcmFibGUKICAgICAgIGFuZCBncmlldm91cyB0byB0aGUgdmVyeSBjcmllciBoaW1zZWxmLiBIZSBpcyBhcyBwcm9kaWdhbCBhIHNwZW5kdGhyaWZ0IHdpdGggcmVnYXJkIHRvIHRoZQogICAgICAgcHJvcGVydHkgb2YgdGhlIHJlcHVibGljLCBhcyBhIHByaXZhdGUgaW5kaXZpZHVhbCBpcyB3aXRoIHJlZ2FyZCB0byBoaXMgb3duIGVzdGF0ZSwgd2hvIHNlbGxzCiAgICAgICBoaXMgd29vZHMsIGJlZm9yZSBoZSBzZWxscyBoaXMgdmluZXlhcmRzLiBZb3UgaGFyZSBnb25lIGFsbCB0aHJvdWdoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgbm93IGdvIG9uIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPi4gVGhlcmUgaXMgbm90aGluZyBpbiB0aGF0IHByb3ZpbmNlIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGhhdmUgbGVmdCB0byB5b3UKICAgICAgIGFzIHlvdXIgb3duIHByb3BlcnR5LCBlaXRoZXIgaW4gdGhlIHRvd25zLCBvciBpbiB0aGUgZmllbGRzLCB3aGljaCBoZSBkb2VzIG5vdCBvcmRlciB0byBiZQogICAgICAgc29sZC4gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgcHJvcGVydHksIHdoaWNoLCBoYXZpbmcgYmVlbiBnYWluZWQgYnkKICAgICAgIHRoZWlyIHJlY2VudCB2aWN0b3J5LCB5b3VyIGFuY2VzdG9ycyBsZWZ0IHRvIHlvdSBpbiB0aGUgY2l0aWVzIGFuZCB0ZXJyaXRvcmllcyBvZiB0aGUgYWxsaWVzLAogICAgICAgYXMgYm90aCBhIGJvbmQgb2YgcGVhY2UgYW5kIGEgbW9udW1lbnQgb2Ygd2FyLCB3aWxsIHlvdSBub3csIHRob3VnaCB5b3UgcmVjZWl2ZWQgaXQgZnJvbQogICAgICAgdGhlbSwgc2VsbCBpdCBhdCB0aGlzIG1hbidzIGluc3RpZ2F0aW9uPyBIZXJlIGZvciBhIG1vbWVudCBJIHNlZW0sIE8gUm9tYW5zLCB0byBtb3ZlIHlvdXIKICAgICAgIGZlZWxpbmdzLCB3aGlsZSBJIG1ha2UgcGxhaW4gdG8geW91IHRoZSBwbG90cyB3aGVuIHRoZXkgdGhpbmsgaGF2ZSBlc2NhcGVkIGV2ZXJ5IG9uZSdzCiAgICAgICBub3RpY2UsIGFzIGhhdmluZyBiZWVuIGxhaWQgYnkgdGhlbSBhZ2FpbnN0IHRoZSBkaWduaXR5IG9mIENuYWV1cyBQb21wZWl1cy4gQW5kLCBJIGJlc2VlY2gKICAgICAgIHlvdSwgcGFyZG9uIG1lIGlmIEkgYW0gZm9yY2VkIHRvIG1ha2UgZnJlcXVlbnQgbWVudGlvbiBvZiB0aGF0IG1hbidzIG5hbWUuIFlvdSwgTyBSb21hbnMsCiAgICAgICBpbXBvc2VkIHRoaXMgY2hhcmFjdGVyIG9uIG1lLCB0d28geWVhcnMgYWdvLCBpbiB0aGlzIHZlcnkgc2FtZSBwbGFjZSwgYW5kIGJvdW5kIG1lIHRvIHNoYXJlCiAgICAgICB3aXRoIHlvdSBpbiB0aGUgcHJvdGVjdGlvbiBvZiBoaXMgZGlnbml0eSBkdXJpbmcgaGlzIGFic2VuY2UsIGluIHdoYXRldmVyIG1hbm5lciBJIGNvdWxkLiBJCiAgICAgICBoYXZlIGhpdGhlcnRvIGRvbmUgYWxsIHRoYXQgSSBjb3VsZCwgbm90IGJlY2F1c2UgSSB3YXMgcGVyc3VhZGVkIHRvIGl0IGJ5IG15IGludGltYWN5IHdpdGgKICAgICAgIGhpbSwgbm9yIGZyb20gYW55IGhvcGUgb2YgaG9ub3VyOyBvciBvZiBhbnkgbW9zdCBob25vdXJhYmxlIGRpZ25pdHk7IHdoaWNoIEkgaGF2ZSBnYWluZWQgYnkKICAgICAgIHlvdXIgbWVhbnMsIGluIGhpcyBhYnNlbmNlLCB0aG91Z2ggbm8gZG91YnQgd2l0aCBoaXMgcGVyZmVjdCBnb29kd2lsbC4gPG1pbGVzdG9uZSBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCB3aGVuIEkgcGVyY2VpdmUgdGhhdCBuZWFybHkgdGhlIHdob2xlIG9mIHRoaXMgbGF3IGlzIG1hZGUgcmVhZHksCiAgICAgICBhcyBpZiBpdCB3ZXJlIGFuIGVuZ2luZSwgZm9yIHRoZSBvYmplY3Qgb2Ygb3ZlcnRocm93aW5nIGhpcyBwb3dlciwgSSB3aWxsIGJvdGggcmVzaXN0IHRoZQogICAgICAgZGVzaWducyBvZiB0aGUgbWVuIHdobyBoYXZlIGNvbnRyaXZlZCBpdCwgYW5kIEkgd2lsbCBlbmFibGUgeW91IG5vdCBvbmx5IHRvIHBlcmNlaXZlLCBidXQgdG8KICAgICAgIGJlIGVudGlyZSBtYXN0ZXJzIG9mIHRoZSB3aG9sZSBwbG90IHdoaWNoIEkgbm93IHNlZSBpbiBwcmVwYXJhdGlvbi4gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.18.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGRvIHlvdSBub3cgcmVhZCB0byBtZSBpbgogICAgICAgcmVndWxhciBvcmRlciwgdGhlIGNhdGFsb2d1ZSBvZiB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSB3aGljaCBpcyBmb3Igc2FsZSBhY2NvcmRpbmcKICAgICAgIHRvIHRoZSB3cml0dGVuIHByb3Zpc2lvbnMgb2YgdGhpcyBsYXcuIEEgY2F0YWxvZ3VlIHdoaWNoIEkgdGhpbmssIGluIHRydXRoLCB3aWxsIGJlIG1pc2VyYWJsZQogICAgICAgYW5kIGdyaWV2b3VzIHRvIHRoZSB2ZXJ5IGNyaWVyIGhpbXNlbGYuIEhlIGlzIGFzIHByb2RpZ2FsIGEgc3BlbmR0aHJpZnQgd2l0aCByZWdhcmQgdG8gdGhlCiAgICAgICBwcm9wZXJ0eSBvZiB0aGUgcmVwdWJsaWMsIGFzIGEgcHJpdmF0ZSBpbmRpdmlkdWFsIGlzIHdpdGggcmVnYXJkIHRvIGhpcyBvd24gZXN0YXRlLCB3aG8gc2VsbHMKICAgICAgIGhpcyB3b29kcywgYmVmb3JlIGhlIHNlbGxzIGhpcyB2aW5leWFyZHMuIFlvdSBoYXJlIGdvbmUgYWxsIHRocm91Z2ggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIG5vdyBnbyBvbiBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPi4gVGhlcmUgaXMgbm90aGluZyBpbiB0aGF0IHByb3ZpbmNlIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGhhdmUgbGVmdCB0byB5b3UKICAgICAgIGFzIHlvdXIgb3duIHByb3BlcnR5LCBlaXRoZXIgaW4gdGhlIHRvd25zLCBvciBpbiB0aGUgZmllbGRzLCB3aGljaCBoZSBkb2VzIG5vdCBvcmRlciB0byBiZQogICAgICAgc29sZC4gPC90cmFuc2xhdGlvbj4="
translation['2.18.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgcHJvcGVydHksIHdoaWNoLCBoYXZpbmcgYmVlbiBnYWluZWQgYnkKICAgICAgIHRoZWlyIHJlY2VudCB2aWN0b3J5LCB5b3VyIGFuY2VzdG9ycyBsZWZ0IHRvIHlvdSBpbiB0aGUgY2l0aWVzIGFuZCB0ZXJyaXRvcmllcyBvZiB0aGUgYWxsaWVzLAogICAgICAgYXMgYm90aCBhIGJvbmQgb2YgcGVhY2UgYW5kIGEgbW9udW1lbnQgb2Ygd2FyLCB3aWxsIHlvdSBub3csIHRob3VnaCB5b3UgcmVjZWl2ZWQgaXQgZnJvbQogICAgICAgdGhlbSwgc2VsbCBpdCBhdCB0aGlzIG1hbidzIGluc3RpZ2F0aW9uPyBIZXJlIGZvciBhIG1vbWVudCBJIHNlZW0sIE8gUm9tYW5zLCB0byBtb3ZlIHlvdXIKICAgICAgIGZlZWxpbmdzLCB3aGlsZSBJIG1ha2UgcGxhaW4gdG8geW91IHRoZSBwbG90cyB3aGVuIHRoZXkgdGhpbmsgaGF2ZSBlc2NhcGVkIGV2ZXJ5IG9uZSdzCiAgICAgICBub3RpY2UsIGFzIGhhdmluZyBiZWVuIGxhaWQgYnkgdGhlbSBhZ2FpbnN0IHRoZSBkaWduaXR5IG9mIENuYWV1cyBQb21wZWl1cy4gQW5kLCBJIGJlc2VlY2gKICAgICAgIHlvdSwgcGFyZG9uIG1lIGlmIEkgYW0gZm9yY2VkIHRvIG1ha2UgZnJlcXVlbnQgbWVudGlvbiBvZiB0aGF0IG1hbidzIG5hbWUuIFlvdSwgTyBSb21hbnMsCiAgICAgICBpbXBvc2VkIHRoaXMgY2hhcmFjdGVyIG9uIG1lLCB0d28geWVhcnMgYWdvLCBpbiB0aGlzIHZlcnkgc2FtZSBwbGFjZSwgYW5kIGJvdW5kIG1lIHRvIHNoYXJlCiAgICAgICB3aXRoIHlvdSBpbiB0aGUgcHJvdGVjdGlvbiBvZiBoaXMgZGlnbml0eSBkdXJpbmcgaGlzIGFic2VuY2UsIGluIHdoYXRldmVyIG1hbm5lciBJIGNvdWxkLiBJCiAgICAgICBoYXZlIGhpdGhlcnRvIGRvbmUgYWxsIHRoYXQgSSBjb3VsZCwgbm90IGJlY2F1c2UgSSB3YXMgcGVyc3VhZGVkIHRvIGl0IGJ5IG15IGludGltYWN5IHdpdGgKICAgICAgIGhpbSwgbm9yIGZyb20gYW55IGhvcGUgb2YgaG9ub3VyOyBvciBvZiBhbnkgbW9zdCBob25vdXJhYmxlIGRpZ25pdHk7IHdoaWNoIEkgaGF2ZSBnYWluZWQgYnkKICAgICAgIHlvdXIgbWVhbnMsIGluIGhpcyBhYnNlbmNlLCB0aG91Z2ggbm8gZG91YnQgd2l0aCBoaXMgcGVyZmVjdCBnb29kd2lsbC4gPC90cmFuc2xhdGlvbj4="
translation['2.18.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCB3aGVuIEkgcGVyY2VpdmUgdGhhdCBuZWFybHkgdGhlIHdob2xlIG9mIHRoaXMgbGF3IGlzIG1hZGUgcmVhZHksCiAgICAgICBhcyBpZiBpdCB3ZXJlIGFuIGVuZ2luZSwgZm9yIHRoZSBvYmplY3Qgb2Ygb3ZlcnRocm93aW5nIGhpcyBwb3dlciwgSSB3aWxsIGJvdGggcmVzaXN0IHRoZQogICAgICAgZGVzaWducyBvZiB0aGUgbWVuIHdobyBoYXZlIGNvbnRyaXZlZCBpdCwgYW5kIEkgd2lsbCBlbmFibGUgeW91IG5vdCBvbmx5IHRvIHBlcmNlaXZlLCBidXQgdG8KICAgICAgIGJlIGVudGlyZSBtYXN0ZXJzIG9mIHRoZSB3aG9sZSBwbG90IHdoaWNoIEkgbm93IHNlZSBpbiBwcmVwYXJhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIG9yZGVycyBldmVyeXRoaW5nIHRvIGJlIHNvbGQgd2hpY2ggYmVsb25nZWQgdG8gdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+LCBhbmQgb2YgUGhhc2VsdXMsIGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGxhbmQgb2YgQWdlcmEsIG9mIE9yaW5kaWEsIGFuZCBvZiBHZWR1c2EuIEFsbCB0aGlzIGJlY2FtZSB5b3VyCiAgICAgICBwcm9wZXJ0eSBvd2luZyB0byB0aGUgY2FtcGFpZ25zIGFuZCB2aWN0b3J5IG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBtYW4sIFB1YmxpdXMgU2VydmlsaXVzLgogICAgICAgSGUgYWRkcyB0aGUgcm95YWwgZG9tYWluIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdAogICAgICAgcHJlc2VudCBmYXJtZWQgYnkgdGhlIHB1YmxpYyBjb250cmFjdG9yczsgYWZ0ZXIgdGhhdCwgaGUgYWRkcyB0aGUgbGFuZHMgYmVsb25naW5nIHRvIEF0dGFsdXMKICAgICAgIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPjsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25nZWQgdG8ga2luZyBQaGlsaXAgb3Iga2luZyBQZXJzZXM7IHdoaWNoCiAgICAgICBhbHNvIHdlcmUgbGV0IG91dCB0byBjb250cmFjdG9ycyBieSB0aGUgY2Vuc29ycywgYW5kIHdoaWNoIGFyZSBhIG1vc3QgY2VydGFpbiByZXZlbnVlLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgYWxzbyBwdXRzIHVwIHRvIGF1Y3Rpb24gdGhlIGxhbmRzIG9mIHRoZSBDb3JpbnRoaWFucywKICAgICAgIHJpY2ggYW5kIGZlcnRpbGUgbGFuZHM7IGFuZCB0aG9zZSBvZiB0aGUgQ3lyZW5hZWFucywgd2hpY2ggZGlkIGJlbG9uZyB0byBBcGlvbjsgYW5kIHRoZSBsYW5kcwogICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+IG5lYXIgQ2FydGhhZ2VuYTsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4gbmVhciB0aGUgb2xkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4gaXRzZWxm4oCUYSBwbGFjZSB3aGljaCBQdWJsaXVzIEFmcmljYW51cyBjb25zZWNyYXRlZCwgbm90IG9uCiAgICAgICBhY2NvdW50IG9mIGFueSByZWxpZ2lvdXMgZmVlbGluZyBmb3IgdGhlIHBsYWNlIGl0c2VsZiBhbmQgZm9yIGl0cyBhbnRpcXVpdHksIGJ1dCBpbgogICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBhZHZpY2Ugb2YgaGlzIGNvdW5zZWxvcnMsIGluIG9yZGVyIHRoYXQgdGhlIHBsYWNlIGl0c2VsZiBtaWdodCBiZWFyCiAgICAgICByZWNvcmQgb2YgdGhlIGRpc2FzdGVycyBvZiB0aGF0IHBlb3BsZSB3aGljaCBoYWQgY29udGVuZGVkIHdpdGggdXMgZm9yIHRoZSBlbXBpcmUgb2YgdGhlCiAgICAgICB3b3JsZC4gQnV0IFNjaXBpbyB3YXMgbm90IGFzIGRpbGlnZW50IGFzIFJ1bGx1cyBpczsgb3IgZWxzZSwgcGVyaGFwcywgaGUgY291bGQgbm90IGZpbmQgYQogICAgICAgcHVyY2hhc2VyIGZvciB0aGF0IHBsYWNlLiBIb3dldmVyLCBhbW9uZyB0aGVzZSByb3lhbCBkaXN0cmljdHMsIHRha2VuIGluIG91ciBhbmNpZW50IHdhcnMgYnkKICAgICAgIHRoZSBjb25zdW1tYXRlIHZhbG91ciBvZiBvdXIgZ2VuZXJhbHMsIGhlIGFkZHMgdGhlIHJveWFsIGxhbmRzIG9mIE1pdGhyaWRhdGVzLCB3aGljaCB3ZXJlIGluCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBhbmQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LCBhbmQgb3JkZXJzCiAgICAgICB0aGUgZGVjZW12aXJzIHRvIHNlbGwgdGhlbS4gPG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28gaW5kZWVkPyB3aGVuIG5vIGxhdwogICAgICAgaGFzIGJlZW4gcGFzc2VkIHRvIHRoYXQgZWZmZWN0LCB3aGVuIHRoZSB3b3JkcyBvZiBvdXIgY29tbWFuZGVyLWluLWNoaWVmIGhhdmUgbm90IHlldCBiZWVuCiAgICAgICBoZWFyZCwgd2hlbiB0aGUgd2FyIGlzIG5vdCB5ZXQgb3Zlciwgd2hlbiBraW5nIE1pdGhyaWRhdGVzLCBoYXZpbmcgbG9zdCBoaXMgYXJteSwgaGF2aW5nIGJlZW4KICAgICAgIGRyaXZlbiBmcm9tIGhpcyBraW5nZG9tLCBpcyBldmVuIG5vdyBwbGFubmluZyBzb21ldGhpbmcgYWdhaW5zdCB1cyBpbiB0aGUgbW9zdCBkaXN0YW50CiAgICAgICBjb3JuZXJzIG9mIHRoZSBlYXJ0aCwgYW5kIHdoaWxlIGhlIGlzIHN0aWxsIGRlZmVuZGVkIGJ5IHRoZSBNYWVvdGlzLCBhbmQgYnkgdGhvc2UgbWFyc2hlcywKICAgICAgIGFuZCBieSB0aGUgbmFycm93IGRlZmlsZXMgdGhyb3VnaCB3aGljaCB0aGUgb25seSBwYXNzZXMgbGllIGluIHRob3NlIGNvdW50cmllcywgYW5kIGJ5IHRoZQogICAgICAgaGVpZ2h0IG9mIHRoZSBtb3VudGFpbnMsIGZyb20gdGhlIGludmluY2libGUgYmFuZCBvZiBDbmFldXMgUG9tcGVpdXM7IHdoZW4gb3VyIGdlbmVyYWwgaXMKICAgICAgIGFjdHVhbGx5IGVuZ2FnZWQgaW4gdGhlIHdhciBhZ2FpbnN0IGhpbTsgYW5kIHdoaWxlIHRoZSBuYW1lIG9mIHdhciBzdGlsbCBsaW5nZXJzIGluIHRob3NlCiAgICAgICBkaXN0cmljdHM7IHNoYWxsIHRoZSBkZWNlbXZpcnMgc2VsbCB0aG9zZSBsYW5kcyBvdmVyIHdoaWNoIHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBjaXZpbAogICAgICAgYXV0aG9yaXR5IG9mIENuYWV1cyBQb21wZWl1cyBzdGlsbCBleHRlbmRzIGFuZCBvdWdodCB0byBleHRlbmQsIGFjY29yZGluZyB0byB0aGUgcHJpbmNpcGxlcwogICAgICAgYW5kIHVzYWdlcyBvZiBvdXIgYW5jZXN0b3JzPyA8bWlsZXN0b25lIG49IjUzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQsIEkgbWFrZSBubyBkb3VidCwgUHVibGl1cwogICAgICAgUnVsbHVzIChmb3IgaGUgbm93IGNvbmR1Y3RzIGhpbXNlbGYgaW4gc3VjaCBhIG1hbm5lciBhcyBzaG93cyB0aGF0IGhlIGFscmVhZHkgZmFuY2llcyBoaW1zZWxmCiAgICAgICBhIGRlY2VtdmlyIGVsZWN0KSB3aWxsIGhhc3RlbiB0byBhdHRlbmQgdGhhdCBhdWN0aW9uIGluIHByZWZlcmVuY2UgdG8gZXZlcnkgb3RoZXIuIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+LCBhbmQgb2YgUGhhc2VsdXMsIGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGxhbmQgb2YgQWdlcmEsIG9mIE9yaW5kaWEsIGFuZCBvZiBHZWR1c2EuIEFsbCB0aGlzIGJlY2FtZSB5b3VyCiAgICAgICBwcm9wZXJ0eSBvd2luZyB0byB0aGUgY2FtcGFpZ25zIGFuZCB2aWN0b3J5IG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBtYW4sIFB1YmxpdXMgU2VydmlsaXVzLgogICAgICAgSGUgYWRkcyB0aGUgcm95YWwgZG9tYWluIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdAogICAgICAgcHJlc2VudCBmYXJtZWQgYnkgdGhlIHB1YmxpYyBjb250cmFjdG9yczsgYWZ0ZXIgdGhhdCwgaGUgYWRkcyB0aGUgbGFuZHMgYmVsb25naW5nIHRvIEF0dGFsdXMKICAgICAgIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPjsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25nZWQgdG8ga2luZyBQaGlsaXAgb3Iga2luZyBQZXJzZXM7IHdoaWNoCiAgICAgICBhbHNvIHdlcmUgbGV0IG91dCB0byBjb250cmFjdG9ycyBieSB0aGUgY2Vuc29ycywgYW5kIHdoaWNoIGFyZSBhIG1vc3QgY2VydGFpbiByZXZlbnVlLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.19.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgYWxzbyBwdXRzIHVwIHRvIGF1Y3Rpb24gdGhlIGxhbmRzIG9mIHRoZSBDb3JpbnRoaWFucywKICAgICAgIHJpY2ggYW5kIGZlcnRpbGUgbGFuZHM7IGFuZCB0aG9zZSBvZiB0aGUgQ3lyZW5hZWFucywgd2hpY2ggZGlkIGJlbG9uZyB0byBBcGlvbjsgYW5kIHRoZSBsYW5kcwogICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4gbmVhciBDYXJ0aGFnZW5hOyBhbmQgdGhvc2UgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+IG5lYXIgdGhlIG9sZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4gaXRzZWxm4oCUYSBwbGFjZSB3aGljaCBQdWJsaXVzIEFmcmljYW51cyBjb25zZWNyYXRlZCwgbm90IG9uCiAgICAgICBhY2NvdW50IG9mIGFueSByZWxpZ2lvdXMgZmVlbGluZyBmb3IgdGhlIHBsYWNlIGl0c2VsZiBhbmQgZm9yIGl0cyBhbnRpcXVpdHksIGJ1dCBpbgogICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBhZHZpY2Ugb2YgaGlzIGNvdW5zZWxvcnMsIGluIG9yZGVyIHRoYXQgdGhlIHBsYWNlIGl0c2VsZiBtaWdodCBiZWFyCiAgICAgICByZWNvcmQgb2YgdGhlIGRpc2FzdGVycyBvZiB0aGF0IHBlb3BsZSB3aGljaCBoYWQgY29udGVuZGVkIHdpdGggdXMgZm9yIHRoZSBlbXBpcmUgb2YgdGhlCiAgICAgICB3b3JsZC4gQnV0IFNjaXBpbyB3YXMgbm90IGFzIGRpbGlnZW50IGFzIFJ1bGx1cyBpczsgb3IgZWxzZSwgcGVyaGFwcywgaGUgY291bGQgbm90IGZpbmQgYQogICAgICAgcHVyY2hhc2VyIGZvciB0aGF0IHBsYWNlLiBIb3dldmVyLCBhbW9uZyB0aGVzZSByb3lhbCBkaXN0cmljdHMsIHRha2VuIGluIG91ciBhbmNpZW50IHdhcnMgYnkKICAgICAgIHRoZSBjb25zdW1tYXRlIHZhbG91ciBvZiBvdXIgZ2VuZXJhbHMsIGhlIGFkZHMgdGhlIHJveWFsIGxhbmRzIG9mIE1pdGhyaWRhdGVzLCB3aGljaCB3ZXJlIGluCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc2MCI+UGFwaGxhZ29uaWE8L3BsYWNlTmFtZT4sIGFuZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4sIGFuZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMzAxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LCBhbmQgb3JkZXJzCiAgICAgICB0aGUgZGVjZW12aXJzIHRvIHNlbGwgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['2.19.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28gaW5kZWVkPyB3aGVuIG5vIGxhdwogICAgICAgaGFzIGJlZW4gcGFzc2VkIHRvIHRoYXQgZWZmZWN0LCB3aGVuIHRoZSB3b3JkcyBvZiBvdXIgY29tbWFuZGVyLWluLWNoaWVmIGhhdmUgbm90IHlldCBiZWVuCiAgICAgICBoZWFyZCwgd2hlbiB0aGUgd2FyIGlzIG5vdCB5ZXQgb3Zlciwgd2hlbiBraW5nIE1pdGhyaWRhdGVzLCBoYXZpbmcgbG9zdCBoaXMgYXJteSwgaGF2aW5nIGJlZW4KICAgICAgIGRyaXZlbiBmcm9tIGhpcyBraW5nZG9tLCBpcyBldmVuIG5vdyBwbGFubmluZyBzb21ldGhpbmcgYWdhaW5zdCB1cyBpbiB0aGUgbW9zdCBkaXN0YW50CiAgICAgICBjb3JuZXJzIG9mIHRoZSBlYXJ0aCwgYW5kIHdoaWxlIGhlIGlzIHN0aWxsIGRlZmVuZGVkIGJ5IHRoZSBNYWVvdGlzLCBhbmQgYnkgdGhvc2UgbWFyc2hlcywKICAgICAgIGFuZCBieSB0aGUgbmFycm93IGRlZmlsZXMgdGhyb3VnaCB3aGljaCB0aGUgb25seSBwYXNzZXMgbGllIGluIHRob3NlIGNvdW50cmllcywgYW5kIGJ5IHRoZQogICAgICAgaGVpZ2h0IG9mIHRoZSBtb3VudGFpbnMsIGZyb20gdGhlIGludmluY2libGUgYmFuZCBvZiBDbmFldXMgUG9tcGVpdXM7IHdoZW4gb3VyIGdlbmVyYWwgaXMKICAgICAgIGFjdHVhbGx5IGVuZ2FnZWQgaW4gdGhlIHdhciBhZ2FpbnN0IGhpbTsgYW5kIHdoaWxlIHRoZSBuYW1lIG9mIHdhciBzdGlsbCBsaW5nZXJzIGluIHRob3NlCiAgICAgICBkaXN0cmljdHM7IHNoYWxsIHRoZSBkZWNlbXZpcnMgc2VsbCB0aG9zZSBsYW5kcyBvdmVyIHdoaWNoIHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBjaXZpbAogICAgICAgYXV0aG9yaXR5IG9mIENuYWV1cyBQb21wZWl1cyBzdGlsbCBleHRlbmRzIGFuZCBvdWdodCB0byBleHRlbmQsIGFjY29yZGluZyB0byB0aGUgcHJpbmNpcGxlcwogICAgICAgYW5kIHVzYWdlcyBvZiBvdXIgYW5jZXN0b3JzPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.19.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBJIG1ha2Ugbm8gZG91YnQsIFB1YmxpdXMKICAgICAgIFJ1bGx1cyAoZm9yIGhlIG5vdyBjb25kdWN0cyBoaW1zZWxmIGluIHN1Y2ggYSBtYW5uZXIgYXMgc2hvd3MgdGhhdCBoZSBhbHJlYWR5IGZhbmNpZXMgaGltc2VsZgogICAgICAgYSBkZWNlbXZpciBlbGVjdCkgd2lsbCBoYXN0ZW4gdG8gYXR0ZW5kIHRoYXQgYXVjdGlvbiBpbiBwcmVmZXJlbmNlIHRvIGV2ZXJ5IG90aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlLCBmb3Jzb290aCwgYmVmb3JlIGhlIGFycml2ZXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYxOSI+UG9udHVzPC9wbGFjZU5hbWU+LCB3aWxsCiAgICAgICBzZW5kIGxldHRlcnMgdG8gQ25hZXVzIFBvbXBlaXVzLCBvZiB3aGljaCBJIHN1cHBvc2UgYSBjb3B5IGhhcyBhbHJlYWR5IGJlZW4gY29tcG9zZWQgaW4gdGhlc2UKICAgICAgIHRlcm1zOuKAlOKAnFB1YmxpdXMgU2VydmlsaXVzIFJ1bGx1cywgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBkZWNlbXZpciwgdG8KICAgICAgIENuYWV1cyBQb21wZWl1cywgdGhlIHNvbiBvZiBDbmFldXMsIGdyZWV0aW5nLuKAnSBJIGRvIG5vdCBzdXBwb3NlIHRoYXQgaGUgd2lsbCBhZGQKICAgICAgIOKAnE1hZ251czvigJ0gZm9yIGl0IGlzIG5vdCBsaWtlbHkgdGhhdCBoZSB3aWxsIGdyYW50IGhpbSBieSBhIHdvcmQgdGhhdAogICAgICAgZGlnbml0eSB3aGljaCBoZSBpcyBlbmRlYXZvdXJpbmcgdG8gZGltaW5pc2guIOKAnEkgd2lzaCB5b3UgdG8gdGFrZSBjYXJlIHRvIG1lZXQgbWUKICAgICAgIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2lub3BlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTaW5vcGUiPlNpbm9wZTwvcGxhY2VOYW1lPiwgYW5kIHRvIGJyaW5nIG1lIGFzc2lzdGFuY2UsIHdoaWxlIEkgYW0KICAgICAgIHNlbGxpbmcsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiBteSBsYXcsIHRob3NlIGxhbmRzIHdoaWNoIHlvdSBhY3F1aXJlZCBieSB5b3VyCiAgICAgICBsYWJvdXIu4oCdIE9yIHdpbGwgaGUgbm90IGludml0ZSBQb21wZWl1cz8gV2lsbCBoZSBzZWxsIHRoZSBzcG9pbHMgb2YgdGhlIGdlbmVyYWwgaW4KICAgICAgIGhpcyBvd24gcHJvdmluY2U/IEp1c3QgcGxhY2UgYmVmb3JlIHlvdXIgZXllcyBSdWxsdXMsIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgaG9sZGluZyBoaXMgYXVjdGlvbiBiZXR3ZWVuIHlvdXIgY2FtcCBhbmQgdGhhdCBvZiB0aGUgZW5lbXksIGFuZAogICAgICAga25vY2tpbmcgZG93biBsYW5kcyBzdXJyb3VuZGVkIGJ5IGhpcyBiZWF1dGlmdWwgYmFuZCBvZiBzdXJ2ZXlvcnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGRvZXMgdGhlIGluc3VsdCBjb25zaXN0IHNvbGVseSBpbiB0aGlzLCB0aG91Z2ggdGhpcyBpcyB2ZXJ5CiAgICAgICBwcmVwb3N0ZXJvdXMsIGFuZCB2ZXJ5IHVucHJlY2VkZW50ZWQsIHRoYXQgYW55dGhpbmcgd2hpY2ggaGFzIGJlZW4gYWNxdWlyZWQgaW4gd2FyLCB3aGlsZSB0aGUKICAgICAgIGdlbmVyYWwgaXMgc3RpbGwgY2Fycnlpbmcgb24gdGhlIHdhciwgc2hvdWxkIGJlIHNvbGQsIG9yIGV2ZW4gbGV0LiBCdXQgdGhlc2UgbWVuIGhhdmUKICAgICAgIHNvbWV0aGluZyBtb3JlIGluIHZpZXcgdGhhbiBtZXJlIGluc3VsdC4gVGhleSBob3BlLCBpZiBpdCBpcyBhbGxvd2VkIHRvIHRoZSBlbmVtaWVzIG9mIENuYWV1cwogICAgICAgUG9tcGVpdXMsIG5vdCBvbmx5IHRvIHN0cm9sbCBhYm91dCBvdGhlciBjb3VudHJpZXMsIGJ1dCBldmVuIHRvIGNvbWUgdG8gaGlzIHZlcnkgYXJteSB3aXRoCiAgICAgICBhYnNvbHV0ZSBhdXRob3JpdHksIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGFzIGp1ZGdlcyBpbiBldmVyeSBjYXNlLCB3aXRoIGJvdW5kbGVzcyBwb3dlciwKICAgICAgIGFuZCB3aXRoIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LCB0aGF0IHNvbWUgcGxvdCBtYXkgYmUgbGFpZCBhZ2FpbnN0IGhpbSBoaW1zZWxmOyBhbmQgdGhhdAogICAgICAgc29tZXRoaW5nIG1heSBiZSB0YWtlbiBmcm9tIGhpcyBhcm15LCBvciBwb3dlciwgb3IgcmVub3duLiBUaGV5IHRoaW5rIHRoYXQsIGlmIHRoZSBhcm15CiAgICAgICByZXBvc2VzIGFueSBob3BlIGluIENuYWV1cyBQb21wZWl1cyB3aXRoIHJlc3BlY3QgdG8gZWl0aGVyIGxhbmRzLCBvciBhbnkgb3RoZXIgYWR2YW50YWdlcywgaXQKICAgICAgIHdpbGwgZG8gc28gbm8gbG9uZ2VyIHdoZW4gaXQgc2VlcyB0aGF0IHRoZSBzdXByZW1lIHBvd2VyIGluIGFsbCB0aG9zZSBtYXR0ZXJzIGlzIHRyYW5zZmVycmVkCiAgICAgICB0byB0aGUgZGVjZW12aXJzLiA8bWlsZXN0b25lIG49IjU1IiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIG5vdCBjb25jZXJuZWQgYXQgdGhvc2UgbWVuIGJlaW5nIHNvCiAgICAgICBmb29saXNoLCBhcyB0byBob3BlIGZvciB0aGVzZSB0aGluZ3M7IGFuZCBzbyBpbXB1ZGVudCwgYXMgdG8gYXR0ZW1wdCB0byBjYXVzZSB0aGVtLiBXaGF0IEkgZG8KICAgICAgIGNvbXBsYWluIG9mIGlzLCB0aGF0IEkgYW0gc28gbXVjaCBkZXNwaXNlZCBieSB0aGVtLCB0aGF0IHRoZXkgc2hvdWxkIHNlbGVjdCB0aGUgcGVyaW9kIG9mIG15CiAgICAgICBjb25zdWxzaGlwLCBvZiBhbGwgdGltZXMgaW4gdGhlIHdvcmxkLCBmb3Igc2Vla2luZyB0byBicmluZyBhYm91dCBzdWNoIHByb2RpZ2lvdXMKICAgICAgIGFic3VyZGl0aWVzLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgd2lsbAogICAgICAgc2VuZCBsZXR0ZXJzIHRvIENuYWV1cyBQb21wZWl1cywgb2Ygd2hpY2ggSSBzdXBwb3NlIGEgY29weSBoYXMgYWxyZWFkeSBiZWVuIGNvbXBvc2VkIGluIHRoZXNlCiAgICAgICB0ZXJtczrigJTigJxQdWJsaXVzIFNlcnZpbGl1cyBSdWxsdXMsIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgZGVjZW12aXIsIHRvCiAgICAgICBDbmFldXMgUG9tcGVpdXMsIHRoZSBzb24gb2YgQ25hZXVzLCBncmVldGluZy7igJ0gSSBkbyBub3Qgc3VwcG9zZSB0aGF0IGhlIHdpbGwgYWRkCiAgICAgICDigJxNYWdudXM74oCdIGZvciBpdCBpcyBub3QgbGlrZWx5IHRoYXQgaGUgd2lsbCBncmFudCBoaW0gYnkgYSB3b3JkIHRoYXQKICAgICAgIGRpZ25pdHkgd2hpY2ggaGUgaXMgZW5kZWF2b3VyaW5nIHRvIGRpbWluaXNoLiDigJxJIHdpc2ggeW91IHRvIHRha2UgY2FyZSB0byBtZWV0IG1lCiAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNpbm9wZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU2lub3BlIj5TaW5vcGU8L3BsYWNlTmFtZT4sIGFuZCB0byBicmluZyBtZSBhc3Npc3RhbmNlLCB3aGlsZSBJIGFtCiAgICAgICBzZWxsaW5nLCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHByb3Zpc2lvbnMgb2YgbXkgbGF3LCB0aG9zZSBsYW5kcyB3aGljaCB5b3UgYWNxdWlyZWQgYnkgeW91cgogICAgICAgbGFib3VyLuKAnSBPciB3aWxsIGhlIG5vdCBpbnZpdGUgUG9tcGVpdXM/IFdpbGwgaGUgc2VsbCB0aGUgc3BvaWxzIG9mIHRoZSBnZW5lcmFsIGluCiAgICAgICBoaXMgb3duIHByb3ZpbmNlPyBKdXN0IHBsYWNlIGJlZm9yZSB5b3VyIGV5ZXMgUnVsbHVzLCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4sIGhvbGRpbmcgaGlzIGF1Y3Rpb24gYmV0d2VlbiB5b3VyIGNhbXAgYW5kIHRoYXQgb2YgdGhlIGVuZW15LCBhbmQKICAgICAgIGtub2NraW5nIGRvd24gbGFuZHMgc3Vycm91bmRlZCBieSBoaXMgYmVhdXRpZnVsIGJhbmQgb2Ygc3VydmV5b3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGRvZXMgdGhlIGluc3VsdCBjb25zaXN0IHNvbGVseSBpbiB0aGlzLCB0aG91Z2ggdGhpcyBpcyB2ZXJ5CiAgICAgICBwcmVwb3N0ZXJvdXMsIGFuZCB2ZXJ5IHVucHJlY2VkZW50ZWQsIHRoYXQgYW55dGhpbmcgd2hpY2ggaGFzIGJlZW4gYWNxdWlyZWQgaW4gd2FyLCB3aGlsZSB0aGUKICAgICAgIGdlbmVyYWwgaXMgc3RpbGwgY2Fycnlpbmcgb24gdGhlIHdhciwgc2hvdWxkIGJlIHNvbGQsIG9yIGV2ZW4gbGV0LiBCdXQgdGhlc2UgbWVuIGhhdmUKICAgICAgIHNvbWV0aGluZyBtb3JlIGluIHZpZXcgdGhhbiBtZXJlIGluc3VsdC4gVGhleSBob3BlLCBpZiBpdCBpcyBhbGxvd2VkIHRvIHRoZSBlbmVtaWVzIG9mIENuYWV1cwogICAgICAgUG9tcGVpdXMsIG5vdCBvbmx5IHRvIHN0cm9sbCBhYm91dCBvdGhlciBjb3VudHJpZXMsIGJ1dCBldmVuIHRvIGNvbWUgdG8gaGlzIHZlcnkgYXJteSB3aXRoCiAgICAgICBhYnNvbHV0ZSBhdXRob3JpdHksIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGFzIGp1ZGdlcyBpbiBldmVyeSBjYXNlLCB3aXRoIGJvdW5kbGVzcyBwb3dlciwKICAgICAgIGFuZCB3aXRoIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LCB0aGF0IHNvbWUgcGxvdCBtYXkgYmUgbGFpZCBhZ2FpbnN0IGhpbSBoaW1zZWxmOyBhbmQgdGhhdAogICAgICAgc29tZXRoaW5nIG1heSBiZSB0YWtlbiBmcm9tIGhpcyBhcm15LCBvciBwb3dlciwgb3IgcmVub3duLiBUaGV5IHRoaW5rIHRoYXQsIGlmIHRoZSBhcm15CiAgICAgICByZXBvc2VzIGFueSBob3BlIGluIENuYWV1cyBQb21wZWl1cyB3aXRoIHJlc3BlY3QgdG8gZWl0aGVyIGxhbmRzLCBvciBhbnkgb3RoZXIgYWR2YW50YWdlcywgaXQKICAgICAgIHdpbGwgZG8gc28gbm8gbG9uZ2VyIHdoZW4gaXQgc2VlcyB0aGF0IHRoZSBzdXByZW1lIHBvd2VyIGluIGFsbCB0aG9zZSBtYXR0ZXJzIGlzIHRyYW5zZmVycmVkCiAgICAgICB0byB0aGUgZGVjZW12aXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhbSBub3QgY29uY2VybmVkIGF0IHRob3NlIG1lbiBiZWluZyBzbwogICAgICAgZm9vbGlzaCwgYXMgdG8gaG9wZSBmb3IgdGhlc2UgdGhpbmdzOyBhbmQgc28gaW1wdWRlbnQsIGFzIHRvIGF0dGVtcHQgdG8gY2F1c2UgdGhlbS4gV2hhdCBJIGRvCiAgICAgICBjb21wbGFpbiBvZiBpcywgdGhhdCBJIGFtIHNvIG11Y2ggZGVzcGlzZWQgYnkgdGhlbSwgdGhhdCB0aGV5IHNob3VsZCBzZWxlY3QgdGhlIHBlcmlvZCBvZiBteQogICAgICAgY29uc3Vsc2hpcCwgb2YgYWxsIHRpbWVzIGluIHRoZSB3b3JsZCwgZm9yIHNlZWtpbmcgdG8gYnJpbmcgYWJvdXQgc3VjaCBwcm9kaWdpb3VzCiAgICAgICBhYnN1cmRpdGllcy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgaW4gdGhlIHNhbGUgb2YgYWxsIHRoZXNlIGxhbmRzIGFuZCBob3VzZXMgbGVhdmUgaXMgZ2l2ZW4gdG8gdGhlIGRlY2VtdmlycyDigJx0bwogICAgICAgaG9sZCB0aGVpciBzYWxlcyBpbiB3aGF0ZXZlciBwbGFjZXMgdGhleSB0aGluayBmaXQu4oCdIE9oIHRoZWlyIHBlcnZlcnRlZCBzZW5zZXMhIE9oCiAgICAgICB0aGVpciBsaWNlbnRpb3VzbmVzcywgc28gbmVjZXNzYXJ5IHRvIGJlIGNoZWNrZWQhIE9oIHRoZWlyIHByb2ZsaWdhdGUgYW5kIHdpY2tlZCBpbnRlbnRpb25zIQogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIG5vdCBsYXdmdWwgdG8gbGV0IHRoZSByZXZlbnVlcyBhbnl3aGVyZSBleGNlcHQgaW4gdGhpcyBjaXR5LCBpbiB0aGlzIHZlcnkgc3BvdCwgaW4KICAgICAgIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGFzc2VtYmx5IGhlcmUgcHJlc2VudC4gU2hhbGwgaXQgYmUgbGF3ZnVsIGZvciB5b3VyIG93biBwcm9wZXJ0eSB0byBiZQogICAgICAgc29sZCBhbmQgYWxpZW5hdGVkIGZyb20geW91IGZvciBldmVyIGluIHRoZSBkYXJrbmVzcyBvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzYwIj5QYXBobGFnb25pYTwvcGxhY2VOYW1lPiwgb3IgaW4gdGhlIGRlc2VydHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDMwMTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMzAxNiI+Q2FwcGFkb2NpYTwvcGxhY2VOYW1lPj8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU2IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVuIEx1Y2l1cyBTdWxsYSB3YXMgc2VsbGluZyBhdAogICAgICAgdGhhdCBmYXRhbCBhdWN0aW9uIG9mIGhpcyB0aGUgcHJvcGVydHkgb2YgY2l0aXplbnMgd2hvIGhhZCBub3QgYmVlbiBjb25kZW1uZWQsIGFuZCB3aGVuIGhlCiAgICAgICBzYWlkIHRoYXQgaGUgd2FzIHNlbGxpbmcgaGlzIHBsdW5kZXIsIHN0aWxsIGhlIHNvbGQgaXQgb24gdGhpcyBzcG90IHdoZXJlIEkgYW0gc3RhbmRpbmcgbm93OwogICAgICAgbm9yIGRpZCBoZSB2ZW50dXJlIHRvIGF2b2lkIHRoZSBzaWdodCBvZiB0aG9zZSBtZW4gdG8gd2hvc2UgZXllcyBoZSB3YXMgc28gaGF0ZWZ1bC4gU2hhbGwgdGhlCiAgICAgICBkZWNlbXZpcnMgc2VsbCB5b3VyIHJldmVudWVzLCBub3Qgb25seSB3aGVyZSB5b3UgeW91cnNlbHZlcyBhcmUgbm90IHdpdG5lc3NlcyBvZiB0aGUgc2FsZSwKICAgICAgIGJ1dCB3aGVyZSB0aGVyZSBpcyBub3QgZXZlbiBhIHB1YmxpYyBjcmllciBwcmVzZW50IGFzIGEgc3BlY3RhdG9yPyA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NzYwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBvciBpbiB0aGUgZGVzZXJ0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMzAxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+PyA8L3RyYW5zbGF0aW9uPg=="
translation['2.21.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBMdWNpdXMgU3VsbGEgd2FzIHNlbGxpbmcgYXQKICAgICAgIHRoYXQgZmF0YWwgYXVjdGlvbiBvZiBoaXMgdGhlIHByb3BlcnR5IG9mIGNpdGl6ZW5zIHdobyBoYWQgbm90IGJlZW4gY29uZGVtbmVkLCBhbmQgd2hlbiBoZQogICAgICAgc2FpZCB0aGF0IGhlIHdhcyBzZWxsaW5nIGhpcyBwbHVuZGVyLCBzdGlsbCBoZSBzb2xkIGl0IG9uIHRoaXMgc3BvdCB3aGVyZSBJIGFtIHN0YW5kaW5nIG5vdzsKICAgICAgIG5vciBkaWQgaGUgdmVudHVyZSB0byBhdm9pZCB0aGUgc2lnaHQgb2YgdGhvc2UgbWVuIHRvIHdob3NlIGV5ZXMgaGUgd2FzIHNvIGhhdGVmdWwuIFNoYWxsIHRoZQogICAgICAgZGVjZW12aXJzIHNlbGwgeW91ciByZXZlbnVlcywgbm90IG9ubHkgd2hlcmUgeW91IHlvdXJzZWx2ZXMgYXJlIG5vdCB3aXRuZXNzZXMgb2YgdGhlIHNhbGUsCiAgICAgICBidXQgd2hlcmUgdGhlcmUgaXMgbm90IGV2ZW4gYSBwdWJsaWMgY3JpZXIgcHJlc2VudCBhcyBhIHNwZWN0YXRvcj8gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVuIGZvbGxvd3PigJTigJxBbGwgdGhlIGxhbmRzIG91dCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJ0gd2l0aG91dCBhbnkgbGltaXQgYXMgdG8gdGltZSwgbm90IChhcyB3YXMgZW5hY3RlZCBiZWZvcmUpCiAgICAgICB0aG9zZSBhY3F1aXJlZCBieSBTdWxsYSBhbmQgUG9tcGVpdXMgd2hlbiB0aGV5IHdlcmUgY29uc3Vscy4gVGhlcmUgaXMgYW4gaW5xdWlyeSB0byBiZSBtYWRlCiAgICAgICBieSB0aGUgZGVjZW12aXJzLCB3aGV0aGVyIHRoZSBsYW5kIGJlIHByaXZhdGUgb3IgcHVibGljIHByb3BlcnR5OyBhbmQgYnkgdGhpcyBtZWFucyBhIGhlYXZ5CiAgICAgICB0YXggaXMgbGFpZCBvbiB0aGUgbGF1ZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU3IiB1bml0PSJzZWN0aW9uIiAvPiBXaG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSBob3cKICAgICAgIGdyZWF0IGEganVkaWNpYWwgcG93ZXIgdGhpcyBpcywgaG93IGludG9sZXJhYmxlLCBob3cgdHlyYW5uaWNhbD8gZm9yIHRoZW0gdG8gYmUgYWJsZSwgaW4KICAgICAgIHdoYXRldmVyIHBsYWNlcyB0aGV5IHBsZWFzZSwgd2l0aG91dCBhbnkgZGlzY3Vzc2lvbiBvciBmb3JtYWwgZGVjaXNpb24sIHdpdGhvdXQgYW55CiAgICAgICBhc3Nlc3NvcnMsIHRvIGNvbmZpc2NhdGUgcHJpdmF0ZSBwcm9wZXJ0eSwgYW5kIHRvIHJlbGVhc2UgcHVibGljIHByb3BlcnR5PyBJbiB0aGlzIGNsYXVzZSB0aGUKICAgICAgIFJlY2VudG9yaWMgZGlzdHJpY3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpcyBleGNlcHRlZDsgd2hpY2ggSQogICAgICAgYW0gZXhjZWVkaW5nbHkgZGVsaWdodGVkIGlzIGV4Y2VwdGVkLCBPIFJvbWFucywgYm90aCBvbiBhY2NvdW50IG9mIG15IGNvbm5lY3Rpb24gd2l0aCB0aGUKICAgICAgIHBlb3BsZSBvZiB0aGF0IGRpc3RyaWN0LCBhbmQgYmVjYXVzZSBvZiB0aGUganVzdGljZSBvZiB0aGUgZXhjZXB0aW9uLiBCdXQgd2hhdCBpbXB1ZGVuY2UgaXQKICAgICAgIGlzISBUaG9zZSB3aG8gYXJlIHRoZSBvY2N1cGllcnMgb2YgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QsIGRlZmVuZCB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQKICAgICAgIG9mIGxlbmd0aCBvZiBvY2N1cGF0aW9uLCBub3Qgb2YgcmlnaHQ7IHRoZXkgcmVseSBvbiB0aGUgcGl0eSBvZiB0aGUgc2VuYXRlLCBub3Qgb24gdGhlCiAgICAgICBjb25kaXRpb25zIG9uIHdoaWNoIHRoZXkgaG9sZCB0aGVpciBsYW5kcy4gRm9yIHRoZXkgY29uZmVzcyB0aGF0IGl0IGlzIHBhcnQgb2YgdGhlIHB1YmxpYwogICAgICAgZG9tYWluOyBidXQgc3RpbGwgdGhleSBzYXkgdGhhdCB0aGV5IG91Z2h0IG5vdCB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZAogICAgICAgdGhlaXIgbXVjaC1sb3ZlZCBob21lcywgYW5kIHRoZWlyIGhvdXNlaG9sZCBnb2RzLiBCdXQgaWYgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgYmUgcHJpdmF0ZQogICAgICAgcHJvcGVydHksIHdoeSBkbyB5b3UgZXhjZXB0IGl0PyBCdXQgaWYgaXQgYmUgcHVibGljLCB3aGVyZSB0aGVuIGlzIHRoZSBqdXN0aWNlIG9mIGFsbG93aW5nCiAgICAgICBvdGhlciBsYW5kcywgZXZlbiBpZiB0aGV5IGFyZSBwcml2YXRlIGxhbmRzLCB0byBiZSBhZGp1ZGdlZCB0byBiZSBwdWJsaWMsIGFuZCB0byBleGNlcHQgdGhpcwogICAgICAgZGlzdHJpY3QgYnkgbmFtZSB3aGljaCBjb25mZXNzZXMgdGhhdCBpdCBpcyBwdWJsaWMgcHJvcGVydHk/IFRoZXJlZm9yZSB0aGUgbGFuZCBvZiB0aG9zZSBtZW4KICAgICAgIGlzIGV4Y2VwdGVkIHdobyBoYXZlIGhhZCBhbnkgbWVhbnMgb2YgaW5mbHVlbmNpbmcgUnVsbHVzOyBhbGwgb3R0ZXIgbGFuZHMsIHdoZXJldmVyIHRoZXkKICAgICAgIGFyZeKAlHdpdGhvdXQgYW55IHNlbGVjdGlvbiBiZWluZyBtYWRlLCB3aXRob3V0IGFueSBleGFtaW5hdGlvbiBiZWluZyBpbnN0aXR1dGVkIGJ5CiAgICAgICB0aGUgcGVvcGxlLCB3aXRob3V0IGFueSBkZWNpc2lvbiBiZWluZyBjb21lIHRvIGJ5IHRoZSBzZW5hdGUsIGFyZSB0byBiZSBzb2xkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNTgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJ0gd2l0aG91dCBhbnkgbGltaXQgYXMgdG8gdGltZSwgbm90IChhcyB3YXMgZW5hY3RlZCBiZWZvcmUpCiAgICAgICB0aG9zZSBhY3F1aXJlZCBieSBTdWxsYSBhbmQgUG9tcGVpdXMgd2hlbiB0aGV5IHdlcmUgY29uc3Vscy4gVGhlcmUgaXMgYW4gaW5xdWlyeSB0byBiZSBtYWRlCiAgICAgICBieSB0aGUgZGVjZW12aXJzLCB3aGV0aGVyIHRoZSBsYW5kIGJlIHByaXZhdGUgb3IgcHVibGljIHByb3BlcnR5OyBhbmQgYnkgdGhpcyBtZWFucyBhIGhlYXZ5CiAgICAgICB0YXggaXMgbGFpZCBvbiB0aGUgbGF1ZC4gPC90cmFuc2xhdGlvbj4="
translation['2.21.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hvIGlzIHRoZXJlIHdobyBkb2VzIG5vdCBzZWUgaG93CiAgICAgICBncmVhdCBhIGp1ZGljaWFsIHBvd2VyIHRoaXMgaXMsIGhvdyBpbnRvbGVyYWJsZSwgaG93IHR5cmFubmljYWw/IGZvciB0aGVtIHRvIGJlIGFibGUsIGluCiAgICAgICB3aGF0ZXZlciBwbGFjZXMgdGhleSBwbGVhc2UsIHdpdGhvdXQgYW55IGRpc2N1c3Npb24gb3IgZm9ybWFsIGRlY2lzaW9uLCB3aXRob3V0IGFueQogICAgICAgYXNzZXNzb3JzLCB0byBjb25maXNjYXRlIHByaXZhdGUgcHJvcGVydHksIGFuZCB0byByZWxlYXNlIHB1YmxpYyBwcm9wZXJ0eT8gSW4gdGhpcyBjbGF1c2UgdGhlCiAgICAgICBSZWNlbnRvcmljIGRpc3RyaWN0IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpcyBleGNlcHRlZDsgd2hpY2ggSQogICAgICAgYW0gZXhjZWVkaW5nbHkgZGVsaWdodGVkIGlzIGV4Y2VwdGVkLCBPIFJvbWFucywgYm90aCBvbiBhY2NvdW50IG9mIG15IGNvbm5lY3Rpb24gd2l0aCB0aGUKICAgICAgIHBlb3BsZSBvZiB0aGF0IGRpc3RyaWN0LCBhbmQgYmVjYXVzZSBvZiB0aGUganVzdGljZSBvZiB0aGUgZXhjZXB0aW9uLiBCdXQgd2hhdCBpbXB1ZGVuY2UgaXQKICAgICAgIGlzISBUaG9zZSB3aG8gYXJlIHRoZSBvY2N1cGllcnMgb2YgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QsIGRlZmVuZCB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQKICAgICAgIG9mIGxlbmd0aCBvZiBvY2N1cGF0aW9uLCBub3Qgb2YgcmlnaHQ7IHRoZXkgcmVseSBvbiB0aGUgcGl0eSBvZiB0aGUgc2VuYXRlLCBub3Qgb24gdGhlCiAgICAgICBjb25kaXRpb25zIG9uIHdoaWNoIHRoZXkgaG9sZCB0aGVpciBsYW5kcy4gRm9yIHRoZXkgY29uZmVzcyB0aGF0IGl0IGlzIHBhcnQgb2YgdGhlIHB1YmxpYwogICAgICAgZG9tYWluOyBidXQgc3RpbGwgdGhleSBzYXkgdGhhdCB0aGV5IG91Z2h0IG5vdCB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZAogICAgICAgdGhlaXIgbXVjaC1sb3ZlZCBob21lcywgYW5kIHRoZWlyIGhvdXNlaG9sZCBnb2RzLiBCdXQgaWYgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgYmUgcHJpdmF0ZQogICAgICAgcHJvcGVydHksIHdoeSBkbyB5b3UgZXhjZXB0IGl0PyBCdXQgaWYgaXQgYmUgcHVibGljLCB3aGVyZSB0aGVuIGlzIHRoZSBqdXN0aWNlIG9mIGFsbG93aW5nCiAgICAgICBvdGhlciBsYW5kcywgZXZlbiBpZiB0aGV5IGFyZSBwcml2YXRlIGxhbmRzLCB0byBiZSBhZGp1ZGdlZCB0byBiZSBwdWJsaWMsIGFuZCB0byBleGNlcHQgdGhpcwogICAgICAgZGlzdHJpY3QgYnkgbmFtZSB3aGljaCBjb25mZXNzZXMgdGhhdCBpdCBpcyBwdWJsaWMgcHJvcGVydHk/IFRoZXJlZm9yZSB0aGUgbGFuZCBvZiB0aG9zZSBtZW4KICAgICAgIGlzIGV4Y2VwdGVkIHdobyBoYXZlIGhhZCBhbnkgbWVhbnMgb2YgaW5mbHVlbmNpbmcgUnVsbHVzOyBhbGwgb3R0ZXIgbGFuZHMsIHdoZXJldmVyIHRoZXkKICAgICAgIGFyZeKAlHdpdGhvdXQgYW55IHNlbGVjdGlvbiBiZWluZyBtYWRlLCB3aXRob3V0IGFueSBleGFtaW5hdGlvbiBiZWluZyBpbnN0aXR1dGVkIGJ5CiAgICAgICB0aGUgcGVvcGxlLCB3aXRob3V0IGFueSBkZWNpc2lvbiBiZWluZyBjb21lIHRvIGJ5IHRoZSBzZW5hdGUsIGFyZSB0byBiZSBzb2xkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.22.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFsc28gYW5vdGhlciBwcm9maXRhYmxlIGV4Y2VwdGlvbiBtYWRlIGluIHRoZSBmb3JtZXIgY2hhcHRlciBhY2NvcmRpbmcgdG8gd2hpY2gKICAgICAgIGV2ZXJ5dGhpbmcgaXMgdG8gYmUgc29sZC4gQW4gZXhjZXB0aW9uIHdoaWNoIGNvbXByZWhlbmRzIHRob3NlIGxhbmRzIHdoaWNoIGFyZSBwcm90ZWN0ZWQgYnkKICAgICAgIHRyZWF0eS4gSGUgaGVhcmQgdGhhdCB0aGlzIG1hdHRlciB3YXMgb2Z0ZW4gYWdpdGF0ZWQgaW4gdGhlIHNlbmF0ZSwgbm90IGJ5IG1lLCBidXQgYnkgb3RoZXJzLAogICAgICAgYW5kIHNvbWV0aW1lcyBhbHNvIGluIHRoaXMgcGxhY2U7IHRoYXQga2luZyBIaWVtcHNhbCB3YXMgaW4gcG9zc2Vzc2lvbiBvZiBsYW5kcyBvbiB0aGUgc2VhCiAgICAgICBjb2FzdCwgd2hpY2ggUHVibGl1cyBBZnJpY2FudXMgYWRqdWRnZWQgdG8gdGhlIFJvbWFuIHBlb3BsZTsgYW5kIHlldCBhZnRlcndhcmRzIGV4cHJlc3MKICAgICAgIHByb3Zpc2lvbiB3YXMgbWFkZSByZXNwZWN0aW5nIHRoZW0gaW4gYSB0cmVhdHksIGJ5IENhaXVzIENvdHRhLCB3aGVuIGNvbnN1bC4gQnV0LCBiZWNhdXNlIHlvdQogICAgICAgZGlkIG5vdCBvcmRlciB0aGlzIHRyZWF0eSB0byBiZSBtYWRlLCBIaWVtcHNhbCBpcyBpbiBmZWFyIGxlc3QgaXQgbWF5IG5vdCBiZSBjb25zaWRlcmVkIGZpcm0KICAgICAgIGFuZCBwcm9wZXJseSByYXRpZmllZC4gV2hhdD8gV2hhdCBzb3J0IG9mIHByb2NlZWRpbmcgaXMgdGhpcz8gWW91ciBkZWNpc2lvbiBpcyBub3Qgd2FpdGVkCiAgICAgICBmb3I7IHRoZSB3aG9sZSB0cmVhdHkgaXMgZXhjZXB0ZWQuIEl0IGlzIGFwcHJvdmVkIGJ5IFJ1bGx1cy4gQXMgaXQgbGltaXRzIHRoZSBwb3dlciBvZiBzYWxlCiAgICAgICB0byBiZSBnaXZlbiB0byB0aGUgZGVjZW12aXJzLCBJIGFtIGdsYWQgb2YgaXQ7IGFzIGl0IHByb3RlY3RzIHRoZSBpbnRlcmVzdHMgb2YgYSBraW5nIHdobyBpcwogICAgICAgb3VyIGZyaWVuZCwgSSBmaW5kIG5vIGZhdWx0IHdpdGggaXQ7IGJ1dCBteSBvcGluaW9uIGlzIHRoYXQgdGhlIGV4Y2VwdGlvbiB3YXMgbm90IG1hZGUgZm9yCiAgICAgICBub3RoaW5nOyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTkiIHVuaXQ9InNlY3Rpb24iIC8+IGZvciB0aGVyZSBpcyBjb25zdGFudGx5IGZsdXR0ZXJpbmcgYmVmb3JlIHRob3NlCiAgICAgICBtZW4ncyBleWVzIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPkp1YmE8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHRoZSBraW5nJ3Mgc29uLCB3aG9zZSBwdXJzZSBpcwogICAgICAgZXZlcnkgYml0IGFzIGxvbmcgYXMgaGlzIGhhaXIuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.22.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz4gZm9yIHRoZXJlIGlzIGNvbnN0YW50bHkgZmx1dHRlcmluZyBiZWZvcmUgdGhvc2UKICAgICAgIG1lbidzIGV5ZXMgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkp1YmE8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHRoZSBraW5nJ3Mgc29uLCB3aG9zZSBwdXJzZSBpcwogICAgICAgZXZlcnkgYml0IGFzIGxvbmcgYXMgaGlzIGhhaXIuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdWJhPC9zdXJuYW1lPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXZlbiBub3cgdGhlcmUgc2NhcmNlbHkgYXBwZWFycyB0byBiZSBhbnkgcGxhY2UgY2FwYWJsZSBvZiBjb250YWluaW5nIHN1Y2ggdmFzdCBoZWFwcyBvZgogICAgICAgbW9uZXkuIEhlIGluY3JlYXNlcyB0aGUgc3VtcywgaGUgYWRkcyB0byB0aGVtLCBoZSBrZWVwcyBvbiBhY2N1bXVsYXRpbmcuIOKAnFRvCiAgICAgICB3aG9tc29ldmVyIGdvbGQgb3Igc2lsdmVyIGNvbWVzLCBmcm9tIHNwb2lscywgZnJvbSBtb25leSBnaXZlbiBmb3IgY3Jvd25zLCBpZiBpdCBoYXMgbmVpdGhlcgogICAgICAgYmVlbiBwYWlkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgbm9yIHNwZW50IGluIGFueSBtb251bWVudC7igJ0gT2YgdGhhdCB0cmVhc3VyZSBoZQogICAgICAgb3JkZXJzIGEgcmV0dXJuIHRvIGJlIG1hZGUgdG8gdGhlIGRlY2VtdmlycywgYW5kIHRoZSB0cmVhc3VyZSBpcyB0byBiZSBwYWlkIG92ZXIgdG8gdGhlbS4gQnkKICAgICAgIHRoaXMgY2FzZSB5b3Ugc2VlIHRoYXQgYW4gaW52ZXN0aWdhdGlvbiBldmVuIGludG8gdGhlIGNvbmR1Y3Qgb2YgdGhlIG1vc3QgaWxsdXN0cmlvdXMgbWVuLAogICAgICAgd2hvIGhhdmUgY2FycmllZCBvbiB0aGUgd2FycyBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgdGhhdCBqdWRpY2lhbCBleGFtaW5hdGlvbnMgaW50byBjaGFyZ2VzCiAgICAgICBvZiBwZWN1bGF0aW9uIG9yIGV4dG9ydGlvbiwgYXJlIHRyYW5zZmVycmVkIHRvIHRoZSBkZWNlbXZpcnMuIFRoZXkgd2lsbCBoYXZlIGEgcG93ZXIgb2YKICAgICAgIGRlY2lkaW5nIHdoYXQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzcG9pbHMgd2hpY2ggaGF2ZSBiZWVuIGdhaW5lZCBieSBlYWNoIGluZGl2aWR1YWwsIHdoYXQKICAgICAgIHJldHVybiBoZSBoYXMgbWFkZSwgYW5kIHdoYXQgaGUgaGFzIGxlZnQuIEJ1dCB0aGlzIGxhdyBpcyBsYWlkIGRvd24gZm9yIGFsbCB5b3VyIGdlbmVyYWxzIGZvcgogICAgICAgdGhlIGZ1dHVyZSwgdGhhdCwgd2hvZXZlciBsZWF2ZXMgaGlzIHByb3ZpbmNlLCBtdXN0IG1ha2UgYSByZXR1cm4gdG8gdGhlc2Ugc2FtZSBkZWNlbXZpcnMsIG9mCiAgICAgICBob3cgbXVjaCBib290eSwgYW5kIHNwb2lscywgYW5kIGdvbGQgZ2l2ZW4gZm9yIHRoZSBwdXJwb3NlIG9mIGNyb3ducyBoZSBoYXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhlcmUgdGhpcyBhZG1pcmFibGUgbWFuIGV4Y2VwdHMgQ25hZXVzIFBvbXBlaXVzLCB3aG9tIGhlIGlzIHNvCiAgICAgICBmb25kIG9mLiBXaGVuY2UgZG9lcyB0aGlzIGFmZmVjdGlvbiBzbyBzdWRkZW4gYW5kIHByZXZpb3VzbHkgdW5rbm93biBvcmlnaW5hdGU/IGZvciBoZSBpcwogICAgICAgZXhjbHVkZWQgZnJvbSB0aGUgaG9ub3VyIG9mIHRoZSBkZWNlbXZpcmF0ZSBhbG1vc3QgYnkgbmFtZTsgaGlzIHBvd2VyIG9mIGRlY2lkaW5nIGp1ZGljaWFsbHksCiAgICAgICBvZiBnaXZpbmcgbGF3cywgb3Igb2YgbWFraW5nIGFueSBmb3JtYWwgaW5xdWlyeSByZXNwZWN0aW5nIHRoZSBsYW5kcyB3aGljaCBoYXZlIGJlZW4gdGFrZW4gYnkKICAgICAgIGhpcyB5b3VyLCBpcyB0YWtlbiBmcm9tIGhpbTsgZGVjZW12aXJzIGFyZSBzZW50IG5vdCBvbmx5IGludG8gaGlzIHByb3ZpbmNlIGJ1dCBpbnRvIGhpcyB2ZXJ5CiAgICAgICBjYW1wLCB3aXRoIG1pbGl0YXJ5IGF1dGhvcml0eSwgd2l0aCBpbW1lbnNlIHN1bXMgb2YgbW9uZXksIHdpdGggdW5saW1pdGVkIHBvd2VyLCBhbmQgd2l0aCBhCiAgICAgICByaWdodCBvZiBkZWNpZGluZyBvbiBldmVyeXRoaW5nLiBIaXMgcmlnaHRzIGFzIGEgZ2VuZXJhbCwgd2hpY2ggaGF2ZSBoaXRoZXJ0byBhbHdheXMgYmVlbgogICAgICAgbW9zdCBqZWFsb3VzbHkgcHJlc2VydmVkIHRvIGV2ZXJ5IGdlbmVyYWwgYXJlIGZvciB0aGUgZmlyc3QgdGltZSB0YWtlbiBmcm9tIGhpbS4gQnV0IGhlIGlzCiAgICAgICBleGNlcHRlZCBhcyB0aGUgb25seSBvbmUgd2hvIGlzIG5vdCBib3VuZCB0byBtYWtlIGEgcmV0dXJuIG9mIGhpcyBib290eS4gRG9lcyBpdCBzZWVtIHRoYXQKICAgICAgIHRoZSByZWFsIG9iamVjdCBvZiB0aGlzIGNsYXVzZSBpcyB0byBkbyBob25vdXIgdG8gdGhlIG1hbiwgb3IgdG8gZXhjaXRlIGEgZmVlbGluZyBvZgogICAgICAgdW5wb3B1bGFyaXR5IGFnYWluc3QgaGltPyA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.22.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhlcmUgdGhpcyBhZG1pcmFibGUgbWFuIGV4Y2VwdHMgQ25hZXVzIFBvbXBlaXVzLCB3aG9tIGhlIGlzIHNvCiAgICAgICBmb25kIG9mLiBXaGVuY2UgZG9lcyB0aGlzIGFmZmVjdGlvbiBzbyBzdWRkZW4gYW5kIHByZXZpb3VzbHkgdW5rbm93biBvcmlnaW5hdGU/IGZvciBoZSBpcwogICAgICAgZXhjbHVkZWQgZnJvbSB0aGUgaG9ub3VyIG9mIHRoZSBkZWNlbXZpcmF0ZSBhbG1vc3QgYnkgbmFtZTsgaGlzIHBvd2VyIG9mIGRlY2lkaW5nIGp1ZGljaWFsbHksCiAgICAgICBvZiBnaXZpbmcgbGF3cywgb3Igb2YgbWFraW5nIGFueSBmb3JtYWwgaW5xdWlyeSByZXNwZWN0aW5nIHRoZSBsYW5kcyB3aGljaCBoYXZlIGJlZW4gdGFrZW4gYnkKICAgICAgIGhpcyB5b3VyLCBpcyB0YWtlbiBmcm9tIGhpbTsgZGVjZW12aXJzIGFyZSBzZW50IG5vdCBvbmx5IGludG8gaGlzIHByb3ZpbmNlIGJ1dCBpbnRvIGhpcyB2ZXJ5CiAgICAgICBjYW1wLCB3aXRoIG1pbGl0YXJ5IGF1dGhvcml0eSwgd2l0aCBpbW1lbnNlIHN1bXMgb2YgbW9uZXksIHdpdGggdW5saW1pdGVkIHBvd2VyLCBhbmQgd2l0aCBhCiAgICAgICByaWdodCBvZiBkZWNpZGluZyBvbiBldmVyeXRoaW5nLiBIaXMgcmlnaHRzIGFzIGEgZ2VuZXJhbCwgd2hpY2ggaGF2ZSBoaXRoZXJ0byBhbHdheXMgYmVlbgogICAgICAgbW9zdCBqZWFsb3VzbHkgcHJlc2VydmVkIHRvIGV2ZXJ5IGdlbmVyYWwgYXJlIGZvciB0aGUgZmlyc3QgdGltZSB0YWtlbiBmcm9tIGhpbS4gQnV0IGhlIGlzCiAgICAgICBleGNlcHRlZCBhcyB0aGUgb25seSBvbmUgd2hvIGlzIG5vdCBib3VuZCB0byBtYWtlIGEgcmV0dXJuIG9mIGhpcyBib290eS4gRG9lcyBpdCBzZWVtIHRoYXQKICAgICAgIHRoZSByZWFsIG9iamVjdCBvZiB0aGlzIGNsYXVzZSBpcyB0byBkbyBob25vdXIgdG8gdGhlIG1hbiwgb3IgdG8gZXhjaXRlIGEgZmVlbGluZyBvZgogICAgICAgdW5wb3B1bGFyaXR5IGFnYWluc3QgaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.23.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkNuYWV1cyBQb21wZWl1cyB3aWxsIG1ha2UgYSBwcmVzZW50IG9mIHRoaXMgdG8gUnVsbHVzLiBIZSBoYXMgbm8gZGVzaXJlIHRvIGF2YWlsIGhpbXNlbGYgb2YKICAgICAgIHRoYXQga2luZG5lc3Mgb2YgdGhlIGxhdywgYW5kIG9mIHRoZSBnb29kLW5hdHVyZSBvZiB0aGUgZGVjZW12aXJzLiBGb3IgaWYgaXQgYmUganVzdCBmb3IKICAgICAgIGdlbmVyYWxzIG5vdCB0byBkZXZvdGUgdGhlaXIgc3BvaWxzIGFuZCBib290eSBlaXRoZXIgdG8gbW9udW1lbnRzIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBvciB0bwogICAgICAgdGhlIGRlY29yYXRpb25zIG9mIHRoZSBjaXR5LOKAlGJ1dCBpZiB0aGV5IGFyZSB0byBjYXJyeSBpdCBhbGwgdG8gdGhlIGRlY2VtdmlycyBhcwogICAgICAgdGhlaXIgbWFzdGVycyzigJR0aGVuIFBvbXBlaXVzIHdpc2hlcyBmb3Igbm90aGluZyBwYXJ0aWN1bGFyIGZvciBoaW1zZWxmOyBub3RoaW5nLiBIZQogICAgICAgd2lzaGVzIHRvIGxpdmUgdW5kZXIgdGhlIGNvbW1vbiBsYXcsIHVuZGVyIHRoZSBzYW1lIGxhdyBhcyB0aGUgcmVzdC4gSWYgaXQgYmUgdW5qdXN0LCBPCiAgICAgICBSb21hbnPigJRpZiBpdCBiZSBzaGFtZWZ1bCwgaWYgaXQgYmUgaW50b2xlcmFibGUgZm9yIHRoZXNlIGRlY2VtdmlycyB0byBiZSBhcHBvaW50ZWQKICAgICAgIGFzIGNvbXB0cm9sbGVycyBvZiBhbGwgdGhlIG1vbmV5IGNvbGxlY3RlZCBieSBldmVyeSBib2R5LCBhbmQgYXMgcGx1bmRlcmVycyBub3Qgb25seSBvZgogICAgICAgZm9yZWlnbiBraW5ncyBhbmQgY2l0aXplbnMgb2YgZm9yZWlnbiBuYXRpb25zLCBidXQgb2YgZXZlbiBvdXIgb3duIGdlbmVyYWxzLCB0aGVuIHRoZXkgZG8gbm90CiAgICAgICBzZWVtIHRvIG1lIHRvIGhhdmUgZXhjZXB0ZWQgUG9tcGVpdXMgZm9yIHRoZSBzYWtlIG9mIGRvaW5nIGhpbSBob25vdXIsIGJ1dCB0byBiZSBhZnJhaWQgdGhhdAogICAgICAgaGUgbWF5IG5vdCBiZSBhYmxlIHRvIHB1dCB1cCB3aXRoIHRoZSBzYW1lIGluc3VsdCBhcyB0aGUgcmVzdC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYyIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgUG9tcGVpdXMncyBmZWVsaW5ncyB3aWxsIGJlIHRoZXNlLCB0aGF0IGhlIHdpbGwgdGhpbmsgaXQgYmVjb21lcyBoaW0KICAgICAgIHRvIGJlYXIgd2hhdGV2ZXIgc2VlbXMgZml0dGluZyB0byB5b3U7IG9uIHRoZSBvdGhlciBoYW5kLCBpZiB0aGVyZSBiZSBhbnl0aGluZyB3aGljaCB5b3UKICAgICAgIGNhbm5vdCBiZWFyLCBoZSB3aWxsIHRha2UgY2FyZSB0aGF0IHlvdSBhcmUgbm90IGxvbmcgY29tcGVsbGVkIHRvIGJlYXIgaXQgYWdhaW5zdCB5b3VyIHdpbGwuCiAgICAgICBCdXQgdGhlIGxhdyBtYWtlcyBhIHByb3Zpc2lvbiB0aGF0LCDigJxpZiBhbnkgbW9uZXkgaXMgcmVjZWl2ZWQgZnJvbSBhbnkgbmV3IHNvdXJjZQogICAgICAgb2YgcmV2ZW51ZSBhZnRlciBvdXIgY29uc3Vsc2hpcCwgdGhlIGRlY2VtdmlycyBhcmUgdG8gYmUgYWxsb3dlZCB0byB1c2UgaXQu4oCdCiAgICAgICBNb3Jlb3ZlciwgaGUgc2VlcyB0aGF0IHRoZSBuZXcgc291cmNlcyBvZiByZXZlbnVlIHdpbGwgYmUgdGhvc2Ugd2hpY2ggUG9tcGVpdXMgaGFzIGFkZGVkIHRvCiAgICAgICB0aGUgcmVwdWJsaWMuIEFuZCBzbywgaGUgbGV0cyBvZmYgaGlzIHNwb2lscywgYnV0IHRoaW5rcyB0aGF0IGl0IGlzIHJpZ2h0IGZvciBoaW0gdG8gcmVhcCB0aGUKICAgICAgIGJlbmVmaXQgb2YgYWxsIHRoZSByZXZlbnVlcyBhY3F1aXJlZCBieSBoaXMgdmFsb3VyLiBMZXQgdGhlbiwgTyBSb21hbnMsIGFsbCB0aGUgbW9uZXkgd2hpY2gKICAgICAgIHRoZXJlIGlzIGluIHRoZSB3b3JsZCBjb25pYyBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgZGljdGF0b3JzOyBsZXQgbm90aGluZyBiZSBvbWl0dGVkOyBsZXQKICAgICAgIGV2ZXJ5IGNpdHksIGV2ZXJ5IGRpc3RyaWN0LCBldmVyeSBraW5nZG9tLCBhbmQgbGFzdGx5IGV2ZW4geW91ciBvd24gcmV2ZW51ZXMgYmUgc29sZCBieSB0aGVtOwogICAgICAgbGV0IHRoZSBzcG9pbHMgd29uIGJ5IHlvdXIgZ2VuZXJhbHMgYmUgYWRkZWQgdG8gdGhlIGhlYXAuIFlvdSBzZWUgbm93IHdoYXQgZW5vcm1vdXMsIHdoYXQKICAgICAgIGluY3JlZGlibGUgcmljaGVzIGFyZSBzb3VnaHQgdG8gYmUgYWNxdWlyZWQgYnkgeW91ciBkZWNlbXZpcnMgYnkgc3VjaCBleHRlbnNpdmUgc2FsZXMsIGJ5IHNvCiAgICAgICBtYW55IGRlY2lzaW9ucyB3aGljaCB0aGV5IGhhdmUgdGhlIHBvd2VyIHRvIG1ha2UsIGFuZCBieSBzdWNoIHVubGltaXRlZCBhdXRob3JpdHkgb3ZlcgogICAgICAgZXZlcnl0aGluZy4gPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjYzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.23.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFzIFBvbXBlaXVzJ3MgZmVlbGluZ3Mgd2lsbCBiZSB0aGVzZSwgdGhhdCBoZSB3aWxsIHRoaW5rIGl0IGJlY29tZXMgaGltCiAgICAgICB0byBiZWFyIHdoYXRldmVyIHNlZW1zIGZpdHRpbmcgdG8geW91OyBvbiB0aGUgb3RoZXIgaGFuZCwgaWYgdGhlcmUgYmUgYW55dGhpbmcgd2hpY2ggeW91CiAgICAgICBjYW5ub3QgYmVhciwgaGUgd2lsbCB0YWtlIGNhcmUgdGhhdCB5b3UgYXJlIG5vdCBsb25nIGNvbXBlbGxlZCB0byBiZWFyIGl0IGFnYWluc3QgeW91ciB3aWxsLgogICAgICAgQnV0IHRoZSBsYXcgbWFrZXMgYSBwcm92aXNpb24gdGhhdCwg4oCcaWYgYW55IG1vbmV5IGlzIHJlY2VpdmVkIGZyb20gYW55IG5ldyBzb3VyY2UKICAgICAgIG9mIHJldmVudWUgYWZ0ZXIgb3VyIGNvbnN1bHNoaXAsIHRoZSBkZWNlbXZpcnMgYXJlIHRvIGJlIGFsbG93ZWQgdG8gdXNlIGl0LuKAnQogICAgICAgTW9yZW92ZXIsIGhlIHNlZXMgdGhhdCB0aGUgbmV3IHNvdXJjZXMgb2YgcmV2ZW51ZSB3aWxsIGJlIHRob3NlIHdoaWNoIFBvbXBlaXVzIGhhcyBhZGRlZCB0bwogICAgICAgdGhlIHJlcHVibGljLiBBbmQgc28sIGhlIGxldHMgb2ZmIGhpcyBzcG9pbHMsIGJ1dCB0aGlua3MgdGhhdCBpdCBpcyByaWdodCBmb3IgaGltIHRvIHJlYXAgdGhlCiAgICAgICBiZW5lZml0IG9mIGFsbCB0aGUgcmV2ZW51ZXMgYWNxdWlyZWQgYnkgaGlzIHZhbG91ci4gTGV0IHRoZW4sIE8gUm9tYW5zLCBhbGwgdGhlIG1vbmV5IHdoaWNoCiAgICAgICB0aGVyZSBpcyBpbiB0aGUgd29ybGQgY29uaWMgaW50byB0aGUgaGFuZHMgb2YgdGhlIGRpY3RhdG9yczsgbGV0IG5vdGhpbmcgYmUgb21pdHRlZDsgbGV0CiAgICAgICBldmVyeSBjaXR5LCBldmVyeSBkaXN0cmljdCwgZXZlcnkga2luZ2RvbSwgYW5kIGxhc3RseSBldmVuIHlvdXIgb3duIHJldmVudWVzIGJlIHNvbGQgYnkgdGhlbTsKICAgICAgIGxldCB0aGUgc3BvaWxzIHdvbiBieSB5b3VyIGdlbmVyYWxzIGJlIGFkZGVkIHRvIHRoZSBoZWFwLiBZb3Ugc2VlIG5vdyB3aGF0IGVub3Jtb3VzLCB3aGF0CiAgICAgICBpbmNyZWRpYmxlIHJpY2hlcyBhcmUgc291Z2h0IHRvIGJlIGFjcXVpcmVkIGJ5IHlvdXIgZGVjZW12aXJzIGJ5IHN1Y2ggZXh0ZW5zaXZlIHNhbGVzLCBieSBzbwogICAgICAgbWFueSBkZWNpc2lvbnMgd2hpY2ggdGhleSBoYXZlIHRoZSBwb3dlciB0byBtYWtlLCBhbmQgYnkgc3VjaCB1bmxpbWl0ZWQgYXV0aG9yaXR5IG92ZXIKICAgICAgIGV2ZXJ5dGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.24.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyByZW1hcmsgdGhlaXIgb3RoZXIgaW1tZW5zZSBhbmQgaW50b2xlcmFibGUgZ2FpbnMsIGluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhhdCB0aGlzCiAgICAgICBwb3B1bGFyIG5hbWUgb2YgYW4gYWdyYXJpYW4gbGF3IGhhcyBvbmx5IGJlZW4gaHVudGVkIG91dCBhcyBhIG1lYW5zIG9mIGdyYXRpZnlpbmcgdGhlCiAgICAgICB1bnJlYXNvbmFibGUgYXZhcmljZSBvZiBwYXJ0aWN1bGFyIG1lbi4gSGUgb3JkZXJzIGxhbmRzIHRvIGJlIGJvdWdodCB3aXRoIHRoaXMgbW9uZXksIHRvCiAgICAgICB3aGljaCB5b3UgYXJlIHRvIGJlIGNvbmR1Y3RlZCBhcyBjb2xvbmlzdHMuIEkgYW0gbm90IGFjY3VzdG9tZWQsIE8gUm9tYW5zLCB0byBzcGVhayBvciBtZW4KICAgICAgIHdpdGggdW5uZWNlc3NhcnkgaGFyc2huZXNzIHVubGVzcyBJIGFtIHByb3Zva2VkLiBJIHdpc2ggaXQgd2VyZSBwb3NzaWJsZSBmb3IgdGhvc2UgbWVuIHRvIGJlCiAgICAgICBuYW1lZCBieSBtZSB3aXRob3V0IHNwZWFraW5nIGlsbCBvZiB0aGVtLCB3aG8gaG9wZSB0byBiZSB0aGVtc2VsdmVzIGFwcG9pbnRlZCBkZWNlbXZpcnM7IGFuZAogICAgICAgeW91IHNob3VsZCBxdWlja2x5IHNlZSB3aGF0IHNvcnQgb2YgbWVuIHRoZXkgYXJlIHRvIHdob20geW91IGhhdmUgY29tbWl0dGVkIHRoZSBwb3dlciBvZgogICAgICAgc2VsbGluZyBhbmQgYnV5aW5nIGV2ZXJ5dGhpbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCB0aGF0IHdoaWNoIEkgaGF2ZSBtYWRlCiAgICAgICB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gc2F5LCB5ZXQgeW91IGNhbiBzdGlsbCBmb3JtIGFuIGlkZWEgb2YgaW4geW91ciBtaW5kcy4gVGhpcyBvbmUKICAgICAgIHRoaW5nIGF0IGFsbCBldmVudHMgSSBhcHBlYXIgdG8gbXlzZWxmIHRvIGJlIGFibGUgdG8gc2F5IHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICB0cnV0aCzigJR0aGF0IGluIGZvcm1lciB0aW1lcyB3aGVuIHRoaXMgcmVwdWJsaWMgaGFkIHRoZSBMdXNjaW5pLCB0aGUgQ2FsYXRpbmksIHRoZQogICAgICAgQWNpZGluaSwgbWVuIGFkb3JuZWQgbm90IG9ubHkgd2l0aCB0aGUgaG9ub3VycyBjb25mZXJyZWQgb24gdGhlbSBieSB0aGUgcGVvcGxlLCBhbmQgYnkgdGhlaXIKICAgICAgIG93biBncmVhdCBleHBsb2l0cywgYnV0IGFsc28gYnkgdGhlIHBhdGllbmNlIHdpdGggd2hpY2ggdGhleSBlbmR1cmVkIHBvdmVydHk7IGFuZCB0aGVuIGFsc28KICAgICAgIHdoZW4gdGhlIENhdG9zLCBhbmQgdGhlIFBoaWxpLCBhbmQgTGFlbGlpIGxpdmVkLCBtZW4gd2hvc2Ugd2lzZG9tIGFuZCBtb2RlcmF0aW9uIHlvdSBoYWQKICAgICAgIG9idGFpbmVkIGEgdGhvcm91Z2gga25vd2xlZGdlIG9mIGluIHB1YmxpYywgYW5kIHByaXZhdGUsIGFuZCBmb3JlbnNpYywgYW5kIGRvbWVzdGljIGFmZmFpcnM7CiAgICAgICBzdGlsbCBzdWNoIGEgY2hhcmdlIGFzIHRoaXMgd2FzIGVudHJ1c3RlZCB0byBubyBvbmUsIHNvIGFzIHRvIGFsbG93IHRoZSBzYW1lIG1hbiB0byBiZSBib3RoCiAgICAgICBqdWRnZSBhbmQgc2VsbGVyLCBhbmQgdG8gYmUgc28gZm9yIGZpdmUgeWVhcnMgb3ZlciB0aGUgd2hvbGUgd29ybGQsIGFuZCBhbHNvIHRvIGhhdmUgcG93ZXIgdG8KICAgICAgIGFsaWVuYXRlIHRoZSBsYW5kcyBvZiB0aGUgUm9tYW4gcGVvcGxlIGZyb20gd2hpY2ggdGhlaXIgcmV2ZW51ZXMgYXJlIGRlcml2ZWQ7IGFuZCB3aGVuIGJ5CiAgICAgICB0aGVzZSBtZWFucyBoZSBoYWQgYW1hc3NlZCBhIHZhc3Qgc3VtIG9mIG1vbmV5IGFjY29yZGluZyB0byBoaXMgb3duIHBsZWFzdXJlLCB3aXRob3V0IGFueQogICAgICAgd2l0bmVzcywgdGhlbiBoZSB3YXMgdG8gYnV5IHdoYXRldmVyIGhlIHBsZWFzZWQgZnJvbSBhbnkgb25lIGhlIHBsZWFzZWQuIDxtaWxlc3RvbmUgbj0iNjUiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyB0aGVuIGRvIHlvdSwgTyBSb21hbnMsIGNvbW1pdCBhbGwgdGhlc2UgdGhpbmdzIHRvIHRoZXNlIG1lbiB3aG9tIHlvdQogICAgICAgc3VzcGVjdCBvZiBhaW1pbmcgYXQgdGhpcyBkZWNlbXZpcmF0ZTsgeW91IHdpbGwgZmluZCBzb21lIG9mIHRoZW0gdG8gd2hvbSBub3RoaW5nIGFwcGVhcnMKICAgICAgIHN1ZmZpY2llbnQgdG8gcG9zc2Vzcywgc29tZSB0byB3aG9tIG5vdGhpbmcgc2VlbXMgc3VmZmljaWVudCB0byBzcXVhbmRlci4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.24.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCB0aGF0IHdoaWNoIEkgaGF2ZSBtYWRlCiAgICAgICB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gc2F5LCB5ZXQgeW91IGNhbiBzdGlsbCBmb3JtIGFuIGlkZWEgb2YgaW4geW91ciBtaW5kcy4gVGhpcyBvbmUKICAgICAgIHRoaW5nIGF0IGFsbCBldmVudHMgSSBhcHBlYXIgdG8gbXlzZWxmIHRvIGJlIGFibGUgdG8gc2F5IHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICB0cnV0aCzigJR0aGF0IGluIGZvcm1lciB0aW1lcyB3aGVuIHRoaXMgcmVwdWJsaWMgaGFkIHRoZSBMdXNjaW5pLCB0aGUgQ2FsYXRpbmksIHRoZQogICAgICAgQWNpZGluaSwgbWVuIGFkb3JuZWQgbm90IG9ubHkgd2l0aCB0aGUgaG9ub3VycyBjb25mZXJyZWQgb24gdGhlbSBieSB0aGUgcGVvcGxlLCBhbmQgYnkgdGhlaXIKICAgICAgIG93biBncmVhdCBleHBsb2l0cywgYnV0IGFsc28gYnkgdGhlIHBhdGllbmNlIHdpdGggd2hpY2ggdGhleSBlbmR1cmVkIHBvdmVydHk7IGFuZCB0aGVuIGFsc28KICAgICAgIHdoZW4gdGhlIENhdG9zLCBhbmQgdGhlIFBoaWxpLCBhbmQgTGFlbGlpIGxpdmVkLCBtZW4gd2hvc2Ugd2lzZG9tIGFuZCBtb2RlcmF0aW9uIHlvdSBoYWQKICAgICAgIG9idGFpbmVkIGEgdGhvcm91Z2gga25vd2xlZGdlIG9mIGluIHB1YmxpYywgYW5kIHByaXZhdGUsIGFuZCBmb3JlbnNpYywgYW5kIGRvbWVzdGljIGFmZmFpcnM7CiAgICAgICBzdGlsbCBzdWNoIGEgY2hhcmdlIGFzIHRoaXMgd2FzIGVudHJ1c3RlZCB0byBubyBvbmUsIHNvIGFzIHRvIGFsbG93IHRoZSBzYW1lIG1hbiB0byBiZSBib3RoCiAgICAgICBqdWRnZSBhbmQgc2VsbGVyLCBhbmQgdG8gYmUgc28gZm9yIGZpdmUgeWVhcnMgb3ZlciB0aGUgd2hvbGUgd29ybGQsIGFuZCBhbHNvIHRvIGhhdmUgcG93ZXIgdG8KICAgICAgIGFsaWVuYXRlIHRoZSBsYW5kcyBvZiB0aGUgUm9tYW4gcGVvcGxlIGZyb20gd2hpY2ggdGhlaXIgcmV2ZW51ZXMgYXJlIGRlcml2ZWQ7IGFuZCB3aGVuIGJ5CiAgICAgICB0aGVzZSBtZWFucyBoZSBoYWQgYW1hc3NlZCBhIHZhc3Qgc3VtIG9mIG1vbmV5IGFjY29yZGluZyB0byBoaXMgb3duIHBsZWFzdXJlLCB3aXRob3V0IGFueQogICAgICAgd2l0bmVzcywgdGhlbiBoZSB3YXMgdG8gYnV5IHdoYXRldmVyIGhlIHBsZWFzZWQgZnJvbSBhbnkgb25lIGhlIHBsZWFzZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.24.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz4gTm93IHRoZW4gZG8geW91LCBPIFJvbWFucywgY29tbWl0IGFsbCB0aGVzZSB0aGluZ3MgdG8gdGhlc2UgbWVuIHdob20geW91CiAgICAgICBzdXNwZWN0IG9mIGFpbWluZyBhdCB0aGlzIGRlY2VtdmlyYXRlOyB5b3Ugd2lsbCBmaW5kIHNvbWUgb2YgdGhlbSB0byB3aG9tIG5vdGhpbmcgYXBwZWFycwogICAgICAgc3VmZmljaWVudCB0byBwb3NzZXNzLCBzb21lIHRvIHdob20gbm90aGluZyBzZWVtcyBzdWZmaWNpZW50IHRvIHNxdWFuZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUgSSB3aWxsIG5vdCBkaXNjdXNzIHdoYXQgaXMgc3VmZmljaWVudGx5IG5vdG9yaW91cywgTyBSb21hbnMsIG9yIGFyZ3VlIHRoYXQgaXQgaXMgbm90IGEKICAgICAgIGN1c3RvbSBoYW5kZWQgZG93biB0byB5b3UgZnJvbSB5b3VyIGFuY2VzdG9ycywgdGhhdCBsYW5kcyBtYXkgYmUgYm91Z2h0IGZyb20gcHJpdmF0ZQogICAgICAgaW5kaXZpZHVhbHMgZm9yIHRoZSBwdXJwb3NlIG9mIHNldHRsaW5nIHBvcnRpb25zIG9mIHRoZSBjb21tb24gcGVvcGxlIGluIHRoZW0gYnkgdGhlIHB1YmxpYwogICAgICAgYXV0aG9yaXR5OyBvciB0aGF0IHRoZXJlIGFyZSBub3QgbWFueSBsYXdzIGJ5IHdoaWNoIHByaXZhdGUgaW5kaXZpZHVhbHMgaGF2ZSBiZWVuIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgcHVibGljIGRvbWFpbnMuIEkgd2lsbCBhZG1pdCB0aGF0IEkgZXhwZWN0ZWQgc29tZXRoaW5nIG9mIHRoaXMgc29ydCBmcm9tIHRoaXMKICAgICAgIGlsbGl0ZXJhdGUgYW5kIGlsbC1tYW5uZXJlZCB0cmlidW5lIG9mIHRoZSBwZW9wbGU7IGJ1dCB0aGlzIG1vc3QgcHJvZml0YWJsZSBhbmQgYXQgdGhlIHNhbWUKICAgICAgIHRpbWUgbW9zdCBkaXNjcmVkaXRhYmxlIHRyYWZmaWMgaW4gYnV5aW5nIGFuZCBzZWxsaW5nLCBJIGhhdmUgYWx3YXlzIHRob3VnaHQgd2hvbGx5CiAgICAgICBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZHV0eSBvZiBhIHRyaWJ1bmUsIHdob2xseSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZGlnbml0eSBvZiB0aGUgUm9tYW4KICAgICAgIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY2IiB1bml0PSJzZWN0aW9uIiAvPiBIZSBvcmRlcnMgdGhhdCBsYW5kcyBiZSBzb2xkLiBGaXJzdCBvZiBhbGwgSSBhc2ssCiAgICAgICBXaGF0IGxhbmRzPyBpbiB3aGF0IHNpdHVhdGlvbnM/IEkgZG8gbm90IHdpc2ggdGhlIFJvbWFuIHBlb3BsZSB0byBiZSBrZXB0IGluIHN1c3BlbnNlIGFuZAogICAgICAgdW5jZXJ0YWludHkgd2l0aCBvYnNjdXJlIGhvcGVzIGFuZCBpZ25vcmFudCBleHBlY3RhdGlvbi4gVGhlcmUgaXMgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMxNzI3IiBrZXk9InRnbiwxMDMxNzI3Ij5BbGJhbjwvcGxhY2VOYW1lPiwgYW5kIHRoZSBTZXRpbm8sIGFuZCB0aGUgUHJpdmVybmF0ZSwgYW5kIHRoZSBGdW5kYW4sIGFuZAogICAgICAgdGhlIFZlc2NpbmUsIGFuZCB0aGUgRmFsZXJuaWFuIGRpc3RyaWN0OyB0aGVyZSBpcyB0aGUgZGlzdHJpY3Qgb2YgTGludGVybnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5MzEiIGtleT0idGduLDcwMDY5MzEiPkN1bWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhc2ludW0iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LiBJIGhlYXIuIEdvaW5nIG91dCBhdCB0aGUgb3RoZXIgZ2F0ZSB0aGVyZSBpcyB0aGUgQ2FwZW5hdGUsIGFuZAogICAgICAgRmFsaXNjYW4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMTEyNyIga2V5PSJ0Z24sNzAyMTEyNyI+U2FiaW5lPC9wbGFjZU5hbWU+IHRlcnJpdG9yeTsgdGhlcmUgYXJlIHRoZSBsYW5kcwogICAgICAgb2YgUmVhdGksIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbmFmcnVtIiBrZXk9InBlcnNldXMsVmVuYWZydW0iPlZlbmFmcnVtPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGxpZmFlIiBrZXk9InBlcnNldXMsQWxsaWZhZSI+QWxsaWZhZTwvcGxhY2VOYW1lPiwgYW5kIFRyZWJ1bGEuIFlvdSBoYXZlIG1vbmV5IGVub3VnaCB0byBiZSBhYmxlIG5vdAogICAgICAgb25seSB0byBidXkgYWxsIHRoZXNlIGxhbmRzIGFuZCBvdGhlcnMgbGlrZSB0aGVtLCBidXQgZXZlbiB0byBzdXJyb3VuZCB0aGVtIHdpdGggYSByaW5nCiAgICAgICBmZW5jZS4gPG1pbGVzdG9uZSBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGRvIHlvdSBub3QgZGVmaW5lIHRoZW0sIG5vciBuYW1lIHRoZW0sIHNvIHRoYXQKICAgICAgIGF0IGxlYXN0IHRoZSBSb21hbiBwZW9wbGUgbWF5IGJlIGFibGUgdG8gY29uc2lkZXIgd2hhdCBpdHMgb3duIGludGVyZXN0cyBhcmUtd2hhdCBpcwogICAgICAgZGVzaXJhYmxlIGZvciBpdOKAlGhvdyBtdWNoIHRydXN0IGl0IHRoaW5rcyBpdCBkZXNpcmFibGUgdG8gcmVwb3NlIGluIHlvdSBpbiB0aGUKICAgICAgIG1hdHRlciBvZiBidXlpbmcgYW5kIHNlbGxpbmcgdGhpbmdzID8gSSBkbyBkZWZpbmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBzYXlzIGhlLiBJdCBpcyBhIGRpc3RyaWN0IHN1ZmZpY2llbnRseSBtYXJrZWQgb3V0LiBJbmRlZWQsIGhvdyBsaXR0bGUKICAgICAgIGRpZmZlcmVuY2UgZG9lcyBpdCBtYWtlIHdoZXRoZXIgeW91IGFyZSBsZWQgZG93biB0byB0aGUgcm9vdHMgb2YgdGhlIE1hc3NpYyBIaWxsLCBvciBpbnRvCiAgICAgICBzb21lIG90aGVyIHBhcnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBvciBzb21ld2hlcmUgZWxzZSEgQ29tZSwKICAgICAgIHlvdSBkbyBub3QgZGVmaW5lIHRoZSBleGFjdCBzcG90LiBXaGF0IGRvIHlvdSBtZWFuPyBEbyB5b3UgbWVhbiB0aGUgbmF0dXJlIG9mIHRoZSBsYW5kPyBCdXQsCiAgICAgICBzYXlzIGhlLCB0aGUgbGF3IGRvZXMgc2F5LCDigJx3aGljaCBjYW4gYmUgcGxvdWdoZWQgb3IgY3VsdGl2YXRlZC7igJ0gV2hpY2gKICAgICAgIGNhbiBiZSBwbG91Z2hlZCBvciBjdWx0aXZhdGVkLCBoZSBzYXlzOyBub3QsIHdoaWNoIGhhcyBiZWVuIHBsb3VnaGVkIG9yIGN1bHRpdmF0ZWQuIElzIHRoaXMKICAgICAgIG5vdyBhIGxhdywgb3IgaXMgaXQgYW4gYWR2ZXJ0aXNlbWVudCBvZiBzb21lIHNhbGUgb2YgTmVyYXRpdXMgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcwogICAgICAgIHVua25vd24gd2hvIHRoaXMgbWFuIHdhcy4gUGVyaGFwcyBzb21lIHB1ZmZpbmcgYXVjdGlvbmVlci48L25vdGU+OyBpbiB3aG9zZSBkZXNjcmlwdGlvbnMKICAgICAgIHBlb3BsZSB1c2VkIHRvIGZpbmQgc3VjaCBzZW50ZW5jZXMgYXMgdGhlc2U64oCU4oCcVHdvIGh1bmRyZWQgYWNyZXMgaW4gd2hpY2gKICAgICAgIGFuIG9saXZlIGdhcmRlbiBtYXkgYmUgbWFkZS4gVGhyZWUgaHVuZHJlZCBhY3JlcyB3aGVyZSB2aW5lcyBjYW4gYmUgcGxhbnRlZC7igJ0gSXMKICAgICAgIHRoaXMgd2hhdCB5b3UgYXJlIGdvaW5nIHRvIGJ1eSB3aXRoIGFsbCB5b3VyIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LOKAlHNvbWV0aGluZwogICAgICAgd2hpY2ggY2FuIGJlIHBsb3VnaGVkIHVwIG9yIGN1bHRpdmF0ZWQ/IFdoeSwgd2hhdCBzb2lsIGlzIHRoZXJlIHNvIHRoaW4gYW5kIG1pc2VyYWJsZSB0aGF0IGl0CiAgICAgICBjYW5ub3QgYmUgYnJva2VuIHVwIGJ5IGEgcGxvdWdoPyBvciB3aGF0IGlzIHRoZXJlIHdoaWNoIGlzIHN1Y2ggYSBjb21wbGV0ZSBiZWQgb2Ygc3RvbmVzIHRoYXQKICAgICAgIHRoZSBza2lsbCBvZiBhbiBhZ3JpY3VsdHVyaXN0IGNhbm5vdCBnZXQgc29tZXRoaW5nIG91dCBvZiBpdD8gT2ggYnV0LCBzYXlzIGhlLCBJIGNhbm5vdCBuYW1lCiAgICAgICBhbnkgbGFuZHMgcG9zaXRpdmVseSwgYmVjYXVzZSBJIHRvdWNoIG5vbmUgYWdhaW5zdCB0aGUgd2lsbCBvZiB0aGUgb3duZXIuIFRoaXMgYWxzbyBpcyBtdWNoCiAgICAgICBtb3JlIHByb2ZpdGFibGUgdGhhbiBpZiBvbmUgdG9vayBsYW5kIGZyb20gYSBtYW4gYWdhaW5zdCBoaXMgd2lsbC4gRm9yIGEgY2FsY3VsYXRpb24gb2YgZ2FpbgogICAgICAgd2lsbCBiZSBlbnRlcmVkIGludG8gd2l0aCByZWZlcmVuY2UgdG8geW91ciBtb25leSwgYW5kIHRoZW4gb25seSB3aWxsIGxhbmQgYmUgc29sZCB3aGVuIHRoZQogICAgICAgc2FsZSBpcyBhZHZhbnRhZ2VvdXMgdG8gYm90aCBidXllciBhbmQgc2VsbGVyLiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNjgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.25.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgb3JkZXJzIHRoYXQgbGFuZHMgYmUgc29sZC4gRmlyc3Qgb2YgYWxsIEkgYXNrLAogICAgICAgV2hhdCBsYW5kcz8gaW4gd2hhdCBzaXR1YXRpb25zPyBJIGRvIG5vdCB3aXNoIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUga2VwdCBpbiBzdXNwZW5zZSBhbmQKICAgICAgIHVuY2VydGFpbnR5IHdpdGggb2JzY3VyZSBob3BlcyBhbmQgaWdub3JhbnQgZXhwZWN0YXRpb24uIFRoZXJlIGlzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAzMTcyNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDMxNzI3Ij5BbGJhbjwvcGxhY2VOYW1lPiwgYW5kIHRoZSBTZXRpbm8sIGFuZCB0aGUgUHJpdmVybmF0ZSwgYW5kIHRoZSBGdW5kYW4sIGFuZAogICAgICAgdGhlIFZlc2NpbmUsIGFuZCB0aGUgRmFsZXJuaWFuIGRpc3RyaWN0OyB0aGVyZSBpcyB0aGUgZGlzdHJpY3Qgb2YgTGludGVybnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjkzMSI+Q3VtYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FzaW51bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPi4gSSBoZWFyLiBHb2luZyBvdXQgYXQgdGhlIG90aGVyIGdhdGUgdGhlcmUgaXMgdGhlIENhcGVuYXRlLCBhbmQKICAgICAgIEZhbGlzY2FuLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMjExMjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMTEyNyI+U2FiaW5lPC9wbGFjZU5hbWU+IHRlcnJpdG9yeTsgdGhlcmUgYXJlIHRoZSBsYW5kcwogICAgICAgb2YgUmVhdGksIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbmFmcnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZW5hZnJ1bSI+VmVuYWZydW08L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsbGlmYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsbGlmYWUiPkFsbGlmYWU8L3BsYWNlTmFtZT4sIGFuZCBUcmVidWxhLiBZb3UgaGF2ZSBtb25leSBlbm91Z2ggdG8gYmUgYWJsZSBub3QKICAgICAgIG9ubHkgdG8gYnV5IGFsbCB0aGVzZSBsYW5kcyBhbmQgb3RoZXJzIGxpa2UgdGhlbSwgYnV0IGV2ZW4gdG8gc3Vycm91bmQgdGhlbSB3aXRoIGEgcmluZwogICAgICAgZmVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.25.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGRvIHlvdSBub3QgZGVmaW5lIHRoZW0sIG5vciBuYW1lIHRoZW0sIHNvIHRoYXQKICAgICAgIGF0IGxlYXN0IHRoZSBSb21hbiBwZW9wbGUgbWF5IGJlIGFibGUgdG8gY29uc2lkZXIgd2hhdCBpdHMgb3duIGludGVyZXN0cyBhcmUtd2hhdCBpcwogICAgICAgZGVzaXJhYmxlIGZvciBpdOKAlGhvdyBtdWNoIHRydXN0IGl0IHRoaW5rcyBpdCBkZXNpcmFibGUgdG8gcmVwb3NlIGluIHlvdSBpbiB0aGUKICAgICAgIG1hdHRlciBvZiBidXlpbmcgYW5kIHNlbGxpbmcgdGhpbmdzID8gSSBkbyBkZWZpbmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHNheXMgaGUuIEl0IGlzIGEgZGlzdHJpY3Qgc3VmZmljaWVudGx5IG1hcmtlZCBvdXQuIEluZGVlZCwgaG93IGxpdHRsZQogICAgICAgZGlmZmVyZW5jZSBkb2VzIGl0IG1ha2Ugd2hldGhlciB5b3UgYXJlIGxlZCBkb3duIHRvIHRoZSByb290cyBvZiB0aGUgTWFzc2ljIEhpbGwsIG9yIGludG8KICAgICAgIHNvbWUgb3RoZXIgcGFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgb3Igc29tZXdoZXJlIGVsc2UhIENvbWUsCiAgICAgICB5b3UgZG8gbm90IGRlZmluZSB0aGUgZXhhY3Qgc3BvdC4gV2hhdCBkbyB5b3UgbWVhbj8gRG8geW91IG1lYW4gdGhlIG5hdHVyZSBvZiB0aGUgbGFuZD8gQnV0LAogICAgICAgc2F5cyBoZSwgdGhlIGxhdyBkb2VzIHNheSwg4oCcd2hpY2ggY2FuIGJlIHBsb3VnaGVkIG9yIGN1bHRpdmF0ZWQu4oCdIFdoaWNoCiAgICAgICBjYW4gYmUgcGxvdWdoZWQgb3IgY3VsdGl2YXRlZCwgaGUgc2F5czsgbm90LCB3aGljaCBoYXMgYmVlbiBwbG91Z2hlZCBvciBjdWx0aXZhdGVkLiBJcyB0aGlzCiAgICAgICBub3cgYSBsYXcsIG9yIGlzIGl0IGFuIGFkdmVydGlzZW1lbnQgb2Ygc29tZSBzYWxlIG9mIE5lcmF0aXVzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcwogICAgICAgIHVua25vd24gd2hvIHRoaXMgbWFuIHdhcy4gUGVyaGFwcyBzb21lIHB1ZmZpbmcgYXVjdGlvbmVlci48L25vdGU+OyBpbiB3aG9zZSBkZXNjcmlwdGlvbnMKICAgICAgIHBlb3BsZSB1c2VkIHRvIGZpbmQgc3VjaCBzZW50ZW5jZXMgYXMgdGhlc2U64oCU4oCcVHdvIGh1bmRyZWQgYWNyZXMgaW4gd2hpY2gKICAgICAgIGFuIG9saXZlIGdhcmRlbiBtYXkgYmUgbWFkZS4gVGhyZWUgaHVuZHJlZCBhY3JlcyB3aGVyZSB2aW5lcyBjYW4gYmUgcGxhbnRlZC7igJ0gSXMKICAgICAgIHRoaXMgd2hhdCB5b3UgYXJlIGdvaW5nIHRvIGJ1eSB3aXRoIGFsbCB5b3VyIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LOKAlHNvbWV0aGluZwogICAgICAgd2hpY2ggY2FuIGJlIHBsb3VnaGVkIHVwIG9yIGN1bHRpdmF0ZWQ/IFdoeSwgd2hhdCBzb2lsIGlzIHRoZXJlIHNvIHRoaW4gYW5kIG1pc2VyYWJsZSB0aGF0IGl0CiAgICAgICBjYW5ub3QgYmUgYnJva2VuIHVwIGJ5IGEgcGxvdWdoPyBvciB3aGF0IGlzIHRoZXJlIHdoaWNoIGlzIHN1Y2ggYSBjb21wbGV0ZSBiZWQgb2Ygc3RvbmVzIHRoYXQKICAgICAgIHRoZSBza2lsbCBvZiBhbiBhZ3JpY3VsdHVyaXN0IGNhbm5vdCBnZXQgc29tZXRoaW5nIG91dCBvZiBpdD8gT2ggYnV0LCBzYXlzIGhlLCBJIGNhbm5vdCBuYW1lCiAgICAgICBhbnkgbGFuZHMgcG9zaXRpdmVseSwgYmVjYXVzZSBJIHRvdWNoIG5vbmUgYWdhaW5zdCB0aGUgd2lsbCBvZiB0aGUgb3duZXIuIFRoaXMgYWxzbyBpcyBtdWNoCiAgICAgICBtb3JlIHByb2ZpdGFibGUgdGhhbiBpZiBvbmUgdG9vayBsYW5kIGZyb20gYSBtYW4gYWdhaW5zdCBoaXMgd2lsbC4gRm9yIGEgY2FsY3VsYXRpb24gb2YgZ2FpbgogICAgICAgd2lsbCBiZSBlbnRlcmVkIGludG8gd2l0aCByZWZlcmVuY2UgdG8geW91ciBtb25leSwgYW5kIHRoZW4gb25seSB3aWxsIGxhbmQgYmUgc29sZCB3aGVuIHRoZQogICAgICAgc2FsZSBpcyBhZHZhbnRhZ2VvdXMgdG8gYm90aCBidXllciBhbmQgc2VsbGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.26.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBub3cgc2VlIHRoZSBmb3JjZSBvZiB0aGlzIGFncmFyaWFuIGxhdy4gRXZlbiB0aG9zZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZQogICAgICAgcHVibGljIGRvbWFpbnMgd2lsbCBub3QgcXVpdCBwb3NzZXNzaW9uLCB1bmxlc3MgdGhleSBhcmUgdGVtcHRlZCBieSBmYXZvdXJhYmxlIGNvbmRpdGlvbnMgYW5kCiAgICAgICBieSBhIGxhcmdlIHN1bSBvZiBtb25leS4gTWF0dGVycyBhcmUgY2hhbmdlZC4gRm9ybWVybHkgd2hlbiBtZW50aW9uIG9mIGFuIGFncmFyaWFuIGxhdyB3YXMKICAgICAgIG1hZGUgYnkgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGltbWVkaWF0ZWx5IGV2ZXJ5IG9uZSB3aG8gd2FzIGluIG9jY3VwYXRpb24gb2YgYW55IHB1YmxpYwogICAgICAgbGFuZHMsIG9yIHdobyBoYWQgYW55IHBvc3Nlc3Npb25zIHRoZSB0ZW51cmUgb2Ygd2hpY2ggd2FzIGluIHRoZSBsZWFzdCB1bnBvcHVsYXIsIGJlZ2FuIHRvIGJlCiAgICAgICBhbGFybWVkLiBCdXQgdGhpcyBsYXcgZW5yaWNoZXMgdGhvc2UgbWVuIHdpdGggZm9ydHVuZXMsIGFuZCByZWxpZXZlcyB0aGVtIGZyb20gdW5wb3B1bGFyaXR5LgogICAgICAgRm9yIGhvdyBtYW55IG1lbiwgTyBSb21hbnMsIGRvIHlvdSBzdXBwb3NlIHRoZXJlIGFyZSwgd2hvIGFyZSB1bmFibGUgdG8gc3RhbmQgdW5kZXIgdGhlCiAgICAgICBleHRlbnQgb2YgdGhlaXIgcG9zc2Vzc2lvbnMsIHdobyBhcmUgdW5hYmxlIHRvIGJlYXIgdGhlIHVucG9wdWxhcml0eSBpbmN1cnJlZCBieSB0aGUKICAgICAgIG93bmVyc2hpcCBvZiBsYW5kcyBncmFudGVkIGJ5IFN1bGxhPyB3aG8gd2lzaCB0byBzZWxsIHRoZW0sIGJ1dCBjYW5ub3QgZmluZCBhIHB1cmNoYXNlcj8gd2hvLAogICAgICAgaW4gZmFjdCwgd291bGQgYmUgZ2xhZCB0byBnZXQgcmlkIG9mIHRob3NlIGxhbmRzIGJ5IGFueSBtZWFucyB3aGF0ZXZlcj8gVGhleSB3aG8sIGEgbGl0dGxlCiAgICAgICB3aGlsZSBhZ28sIHdlcmUgaW4gY29uc3RhbnQgZHJlYWQsIGRheSBhbmQgbmlnaHQsIG9mIHRoZSBuYW1lIG9mIGEgdHJpYnVuZTsgd2hvIGZlYXJlZCB5b3VyCiAgICAgICBwb3dlciwgZHJlYWRlZCBldmVyeSBtZW50aW9uIG9mIGFuIGFncmFyaWFuIGxhdzsgdGhleSBub3cgd2lsbCBiZSBiZWdnZWQgYW5kIGVudHJlYXRlZCB0byBoZQogICAgICAgc28gZ29vZCBhcyB0byBnaXZlIHVwIHRvIHRoZSBkZWNlbXZpcnMgdGhvc2UgbGFuZHMgd2hpY2ggYXJlIHBhcnRseSBwdWJsaWMgcHJvcGVydHksIHRoZQogICAgICAgcG9zc2Vzc2lvbiBvZiB3aGljaCBpcyBmdWxsIG9mIHVucG9wdWxhcml0eSBhbmQgZGFuZ2VyLCBhdCB0aGVpciBvd24gcHJpY2UuIEFuZCB0aGlzIHNvbmcKICAgICAgIHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIGlzIHNpbmdpbmcgbm93LCBub3QgdG8geWVsbCwgYnV0IGluIGhpcyBvd24gaGVhcnQgdG8gaGltc2VsZi4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjkiIHVuaXQ9InNlY3Rpb24iIC8+IEhlIGhhcyBhIGZhdGhlci1pbi1sYXcsIGEgbW9zdCBleGNlbGxlbnQgbWFuLCB3aG8gaW4KICAgICAgIHRob3NlIGRhcmsgdGltZXMgb2YgdGhlIHJlcHVibGljIGdvdCBhcyBtdWNoIGxhbmQgYXMgaGUgd2FudGVkLiBIZSBub3cgc2VlaW5nIGhpbSB5aWVsZGluZywKICAgICAgIG9wcHJlc3NlZCB3ZWlnaGVkIGRvd24gd2l0aCB0aGUgYnVyZGVucyB3aGljaCBTdWxsYSBwdXQgdXBvbiBoaW0sIHdpc2hlcyB0byBjb21lIHRvIGhpcwogICAgICAgYXNzaXN0YW5jZSB3aXRoIHRoaXMgbGF3IG9mIGhpcywgc28gYXMgdG8gZW5hYmxlIGhpbSB0byBnZXQgcmlkIG9mIHRoZSBvZGl1bSBhdHRhY2hlZCB0byBoaW0sCiAgICAgICBhbmQgdG8gZ2V0IGEgc3VtIG9mIG1vbmV5IHRvby4gQW5kIHdpbGwgbm90IHlvdSBoZXNpdGF0ZSB0byBzZWxsIHlvdXIgcmV2ZW51ZXMsIGFjcXVpcmVkIGJ5CiAgICAgICB0aGUgcHJvZnVzZSBleHBlbmRpdHVyZSBvZiBsYWJvdXIgYW5kIGJsb29kIG9uIHRoZSBwYXJ0IG9mIHlvdXIgYW5jZXN0b3JzLCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgIGhlYXBpbmcgbW9yZSByaWNoZXMgb24gdGhlIGxhbmRvd25lcnMgd2hvIGhhdmUgYmVjb21lIHNvIHRocm91Z2ggU3VsbGEsIGFuZCBvZiByZWxlYXNpbmcgdGhlbQogICAgICAgZnJvbSBkYW5nZXI/IDxtaWxlc3RvbmUgbj0iNzAiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB0aGVyZSBhcmUgdHdvIGtpbmRzIG9mIGxhbmRzIGNvbmNlcm5lZCwgTwogICAgICAgUm9tYW5zLCBpbiB0aGlzIHB1cmNoYXNlIG9mIHRoZSBkZWNlbXZpcnMuIE9uZSBvZiB0aGVtIHRoZSBvd25lcnMgYXZvaWQgb24gYWNjb3VudCBvZiBpdHMKICAgICAgIHVucG9wdWxhcml0eTsgdGhlIG90aGVyIG9uIGFjY291bnQgb2YgaXRzIG1pc2VyYWJsZSBjb25kaXRpb24uIFRoZSBsYW5kIHNlaXplZCBhbmQKICAgICAgIGRpc3RyaWJ1dGVkIGJ5IFN1bGxhLCBhbmQgZXh0ZW5kZWQgYXMgZmFyIGFzIHBvc3NpYmxlIGJ5IHBhcnRpY3VsYXIgaW5kaXZpZHVhbHMsIGhhcyBzbyBtdWNoCiAgICAgICB1bnBvcHVsYXJpdHkgYXR0YWNoZWQgdG8gaXQsIHRoYXQgaXQgY2Fubm90IGJlYXIgdGhlIHJ1c3RsZSBvZiBhIGdlbnVpbmUgZmVhcmxlc3MgdHJpYnVuZSBvZgogICAgICAgdGhlIHBlb3BsZS4gQWxsIHRoaXMgbGFuZCwgYXQgd2hhdGV2ZXIgcHJpY2UgaXQgaXMgcHVyY2hhc2VkLCB3aWxsIGJlIHJldHVybmVkIHRvIHlvdSBhdCBhCiAgICAgICBncmVhdCBwcmljZS4gVGhlcmUgaXMgYW5vdGhlciBzb3J0IG9mIGxhbmRz4oCUdW5jdWx0aXZhdGVkIG9uIGFjY291bnQgb2YgdGhlaXIKICAgICAgIGJhcnJlbm5lc3MsIGRlc29sYXRlIGFuZCBkZXNlcnRlZCBvbiBhY2NvdW50IG9mIHRoZSB1bmhlYWx0aGluZXNzIG9mIHRoZQogICAgICAgc2l0dWF0aW9u4oCUd2hpY2ggd2lsbCBiZSBib3VnaHQgb2YgdGhvc2UgbWVuLCB3aG8gc2VlIHRoYXQgdGhleSBtdXN0IGFiYW5kb24gdGhlbSBpZgogICAgICAgdGhleSBkbyBub3Qgc2VsbCB0aGVtLiBBbmQgaW4gdHJ1dGgsIHRoYXQgaXMgd2hhdCB3YXMgc2FpZCBieSB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBpbgogICAgICAgdGhlIHNlbmF0ZSzigJR0aGF0IHRoZSBjb21tb24gcGVvcGxlIG9mIHRoZSBjaXR5IGhhZCB0b28gbXVjaCBpbmZsdWVuY2UgaW4gdGhlCiAgICAgICByZXB1YmxpYzsgdGhhdCBpdCBtdXN0IGJlIGRyYWluZWQgb2ZmLiBGb3IgdGhpcyBpcyB0aGUgZXhwcmVzc2lvbiB3aGljaCBoZSB1c2VkOyBhcyBpZiBoZQogICAgICAgd2VyZSBzcGVha2luZyBvZiBzb21lIHNld2VyLCBhbmQgbm90IG9mIGEgY2xhc3Mgb2YgZXhjZWxsZW50IGNpdGl6ZW5zLiA8bWlsZXN0b25lIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNzEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.26.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgaGFzIGEgZmF0aGVyLWluLWxhdywgYSBtb3N0IGV4Y2VsbGVudCBtYW4sIHdobyBpbgogICAgICAgdGhvc2UgZGFyayB0aW1lcyBvZiB0aGUgcmVwdWJsaWMgZ290IGFzIG11Y2ggbGFuZCBhcyBoZSB3YW50ZWQuIEhlIG5vdyBzZWVpbmcgaGltIHlpZWxkaW5nLAogICAgICAgb3BwcmVzc2VkIHdlaWdoZWQgZG93biB3aXRoIHRoZSBidXJkZW5zIHdoaWNoIFN1bGxhIHB1dCB1cG9uIGhpbSwgd2lzaGVzIHRvIGNvbWUgdG8gaGlzCiAgICAgICBhc3Npc3RhbmNlIHdpdGggdGhpcyBsYXcgb2YgaGlzLCBzbyBhcyB0byBlbmFibGUgaGltIHRvIGdldCByaWQgb2YgdGhlIG9kaXVtIGF0dGFjaGVkIHRvIGhpbSwKICAgICAgIGFuZCB0byBnZXQgYSBzdW0gb2YgbW9uZXkgdG9vLiBBbmQgd2lsbCBub3QgeW91IGhlc2l0YXRlIHRvIHNlbGwgeW91ciByZXZlbnVlcywgYWNxdWlyZWQgYnkKICAgICAgIHRoZSBwcm9mdXNlIGV4cGVuZGl0dXJlIG9mIGxhYm91ciBhbmQgYmxvb2Qgb24gdGhlIHBhcnQgb2YgeW91ciBhbmNlc3RvcnMsIGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgaGVhcGluZyBtb3JlIHJpY2hlcyBvbiB0aGUgbGFuZG93bmVycyB3aG8gaGF2ZSBiZWNvbWUgc28gdGhyb3VnaCBTdWxsYSwgYW5kIG9mIHJlbGVhc2luZyB0aGVtCiAgICAgICBmcm9tIGRhbmdlcj8gPC90cmFuc2xhdGlvbj4="
translation['2.26.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHRoZXJlIGFyZSB0d28ga2luZHMgb2YgbGFuZHMgY29uY2VybmVkLCBPCiAgICAgICBSb21hbnMsIGluIHRoaXMgcHVyY2hhc2Ugb2YgdGhlIGRlY2Vtdmlycy4gT25lIG9mIHRoZW0gdGhlIG93bmVycyBhdm9pZCBvbiBhY2NvdW50IG9mIGl0cwogICAgICAgdW5wb3B1bGFyaXR5OyB0aGUgb3RoZXIgb24gYWNjb3VudCBvZiBpdHMgbWlzZXJhYmxlIGNvbmRpdGlvbi4gVGhlIGxhbmQgc2VpemVkIGFuZAogICAgICAgZGlzdHJpYnV0ZWQgYnkgU3VsbGEsIGFuZCBleHRlbmRlZCBhcyBmYXIgYXMgcG9zc2libGUgYnkgcGFydGljdWxhciBpbmRpdmlkdWFscywgaGFzIHNvIG11Y2gKICAgICAgIHVucG9wdWxhcml0eSBhdHRhY2hlZCB0byBpdCwgdGhhdCBpdCBjYW5ub3QgYmVhciB0aGUgcnVzdGxlIG9mIGEgZ2VudWluZSBmZWFybGVzcyB0cmlidW5lIG9mCiAgICAgICB0aGUgcGVvcGxlLiBBbGwgdGhpcyBsYW5kLCBhdCB3aGF0ZXZlciBwcmljZSBpdCBpcyBwdXJjaGFzZWQsIHdpbGwgYmUgcmV0dXJuZWQgdG8geW91IGF0IGEKICAgICAgIGdyZWF0IHByaWNlLiBUaGVyZSBpcyBhbm90aGVyIHNvcnQgb2YgbGFuZHPigJR1bmN1bHRpdmF0ZWQgb24gYWNjb3VudCBvZiB0aGVpcgogICAgICAgYmFycmVubmVzcywgZGVzb2xhdGUgYW5kIGRlc2VydGVkIG9uIGFjY291bnQgb2YgdGhlIHVuaGVhbHRoaW5lc3Mgb2YgdGhlCiAgICAgICBzaXR1YXRpb27igJR3aGljaCB3aWxsIGJlIGJvdWdodCBvZiB0aG9zZSBtZW4sIHdobyBzZWUgdGhhdCB0aGV5IG11c3QgYWJhbmRvbiB0aGVtIGlmCiAgICAgICB0aGV5IGRvIG5vdCBzZWxsIHRoZW0uIEFuZCBpbiB0cnV0aCwgdGhhdCBpcyB3aGF0IHdhcyBzYWlkIGJ5IHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIGluCiAgICAgICB0aGUgc2VuYXRlLOKAlHRoYXQgdGhlIGNvbW1vbiBwZW9wbGUgb2YgdGhlIGNpdHkgaGFkIHRvbyBtdWNoIGluZmx1ZW5jZSBpbiB0aGUKICAgICAgIHJlcHVibGljOyB0aGF0IGl0IG11c3QgYmUgZHJhaW5lZCBvZmYuIEZvciB0aGlzIGlzIHRoZSBleHByZXNzaW9uIHdoaWNoIGhlIHVzZWQ7IGFzIGlmIGhlCiAgICAgICB3ZXJlIHNwZWFraW5nIG9mIHNvbWUgc2V3ZXIsIGFuZCBub3Qgb2YgYSBjbGFzcyBvZiBleGNlbGxlbnQgY2l0aXplbnMuIDwvdHJhbnNsYXRpb24+"
translation['2.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.27.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBkbyB5b3UsIE8gUm9tYW5zLCBpZiB5b3Ugd2lsbCBiZSBndWlkZWQgYnkgbWUsIHByZXNlcnZlIHlvdXIgcHJlc2VudCBwb3NzZXNzaW9uIG9mCiAgICAgICBwb3B1bGFyaXR5LCBvZiBsaWJlcnR5LCBvZiB5b3VyIHZvdGVzLCBvZiB5b3VyIGRpZ25pdHksIG9mIHRoZSBjaXR5LCBvZiB0aGUgZm9ydW0sIG9mIHRoZQogICAgICAgZ2FtZXMsIG9mIHRoZSBkYXlzIG9mIGZlc3RpdmFscywgYW5kIG9mIGFsbCB5b3VyIG90aGVyIGVuam95bWVudHMuIFVubGVzcywgYnkgY2hhbmNlLCB5b3UKICAgICAgIHByZWZlciBsZWF2aW5nIGFsbCB0aGVzZSB0aGluZ3MgYW5kIHRoaXMgbGlnaHQgb2YgdGhlIHJlcHVibGljLCB0byBiZSBzZXR0bGVkIGluIHRoZSBtaWRzdCBvZgogICAgICAgdGhlIGRyb3VnaHRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2lwb250dW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNpcG9udHVtIj5TaXBvbnR1bTwvcGxhY2VOYW1lPiwgb3IgaW4gdGhlCiAgICAgICBwZXN0aWxlbnRpYWwgZGlzdHJpY3RzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2FsYXBpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU2FsYXBpYSI+U2FsYXBpYTwvcGxhY2VOYW1lPiwgdW5kZXIgdGhlCiAgICAgICBsZWFkZXJzaGlwIG9mIFJ1bGx1cy4gQnV0IGxldCBoaW0gdGVsbCB1cyB3aGF0IGxhbmRzIGhlIGlzIGdvaW5nIHRvIGJ1eTsgbGV0IGhpbSBzaG93IHdoYXQgaGUKICAgICAgIGlzIGdvaW5nIHRvIGdpdmUsIGFuZCB0byB3aG9tIGhlIGlzIGdvaW5nIHRvIGdpdmUgaXQuIEJ1dCBjYW4geW91IHBvc3NpYmx5LCB0ZWxsIG1lLCBhbGxvdwogICAgICAgaGltIHRoZSBwb3dlciBvZiBzZWxsaW5nIGFueSBpbWFnaW5hYmxlIGNpdHksIG9yIGxhbmQsIG9yIHJldmVudWUsIG9yIGtpbmdkb20gdGhhdCBoZSBsaWtlcywKICAgICAgIGFuZCB0aGVuIGJ1eWluZyBzb21lIHRyYWN0IG9mIHNhbmQgb3Igc29tZSBzd2FtcD8gQWx0aG91Z2ggdGhpcyBpcyBhIHZlcnkgcmVtYXJrYWJsZSBwb2ludCwKICAgICAgIHRoYXQgYWNjb3JkaW5nIHRvIHRoaXMgbGF3IGV2ZXJ5dGhpbmcgaXMgdG8gYmUgc29sZCwgYWxsIHRoZSBtb25leSBpcyB0byBiZSBjb2xsZWN0ZWQgYW5kCiAgICAgICBhbWFzc2VkIHRvZ2V0aGVyLCBiZWZvcmUgb25lIHBlcmNoIG9mIGdyb3VuZCBpcyBib3VnaHQuIFRoZW4gdGhlIGxhdyBvcmRlcnMgaGltIHRvIHByb2NlZWQgdG8KICAgICAgIGJ1eTsgYnV0IGZvcmJpZHMgYW55IHB1cmNoYXNlcyB0byBiZSBtYWRlIGFnYWluc3QgdGhlIGluY2xpbmF0aW9uIG9yIHRoZSBvd25lci4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNpcG9udHVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTaXBvbnR1bSI+U2lwb250dW08L3BsYWNlTmFtZT4sIG9yIGluIHRoZQogICAgICAgcGVzdGlsZW50aWFsIGRpc3RyaWN0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNhbGFwaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNhbGFwaWEiPlNhbGFwaWE8L3BsYWNlTmFtZT4sIHVuZGVyIHRoZQogICAgICAgbGVhZGVyc2hpcCBvZiBSdWxsdXMuIEJ1dCBsZXQgaGltIHRlbGwgdXMgd2hhdCBsYW5kcyBoZSBpcyBnb2luZyB0byBidXk7IGxldCBoaW0gc2hvdyB3aGF0IGhlCiAgICAgICBpcyBnb2luZyB0byBnaXZlLCBhbmQgdG8gd2hvbSBoZSBpcyBnb2luZyB0byBnaXZlIGl0LiBCdXQgY2FuIHlvdSBwb3NzaWJseSwgdGVsbCBtZSwgYWxsb3cKICAgICAgIGhpbSB0aGUgcG93ZXIgb2Ygc2VsbGluZyBhbnkgaW1hZ2luYWJsZSBjaXR5LCBvciBsYW5kLCBvciByZXZlbnVlLCBvciBraW5nZG9tIHRoYXQgaGUgbGlrZXMsCiAgICAgICBhbmQgdGhlbiBidXlpbmcgc29tZSB0cmFjdCBvZiBzYW5kIG9yIHNvbWUgc3dhbXA/IEFsdGhvdWdoIHRoaXMgaXMgYSB2ZXJ5IHJlbWFya2FibGUgcG9pbnQsCiAgICAgICB0aGF0IGFjY29yZGluZyB0byB0aGlzIGxhdyBldmVyeXRoaW5nIGlzIHRvIGJlIHNvbGQsIGFsbCB0aGUgbW9uZXkgaXMgdG8gYmUgY29sbGVjdGVkIGFuZAogICAgICAgYW1hc3NlZCB0b2dldGhlciwgYmVmb3JlIG9uZSBwZXJjaCBvZiBncm91bmQgaXMgYm91Z2h0LiBUaGVuIHRoZSBsYXcgb3JkZXJzIGhpbSB0byBwcm9jZWVkIHRvCiAgICAgICBidXk7IGJ1dCBmb3JiaWRzIGFueSBwdXJjaGFzZXMgdG8gYmUgbWFkZSBhZ2FpbnN0IHRoZSBpbmNsaW5hdGlvbiBvciB0aGUgb3duZXIuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjcyIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFzayBub3csIHN1cHBvc2UgdGhlcmUgaXMgbm8gb25lIHdobyBpcyB3aWxsaW5nIHRvCiAgICAgICBzZWxsLCB3aGF0IGlzIHRvIGJlY29tZSBvZiB0aGUgbW9uZXk/IFRoZSBsYXcgc2F5cyBpdCBpcyBub3QgdG8gYmUgYnJvdWdodCBpbnRvIHRoZSB0cmVhc3VyeS4KICAgICAgIEl0IGZvcmJpZHMgaXRzIGJlaW5nIHJlZnVuZGVkLiBUaGUgZGVjZW12aXJzLCB0aGVuLCB3aWxsIGtlZXAgYWxsIHRoYXQgbW9uZXkuIExhbmQgd2lsbCBub3QKICAgICAgIGJlIGJvdWdodCBmb3IgeW91LiBBZnRlciBoYXZpbmcgYWxpZW5hdGVkIHlvdXIgcmV2ZW51ZXMsIGhhcmFzc2VkIHlvdXIgYWxsaWVzLCBkcmFpbmVkIHRoZQogICAgICAgY29uZmVkZXJhdGUga2luZ3MgYW5kIGFsbCBuYXRpb25zIG9mIHRoZWlyIHdob2xlIHByb3BlcnR5LCB0aGV5IHdpbGwgaGF2ZSB0aGUgbW9uZXksIGFuZCB5b3UKICAgICAgIHdpbGwgbm90IGhhdmUgdGhlIGxhbmRzLiBPaCwgc2F5cyBoZSwgdGhleSB3aWxsIGVhc2lseSBiZSBpbmR1Y2VkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgdGhlCiAgICAgICBzdW1zIG9mZmVyZWQgdG8gc2VsbCB0aGUgbGFuZHMuIFRoZW4gdGhlIGVmZmVjdCBvZiB0aGUgbGF3IGlzIHRvIGJlIHRodXM6IHRoYXQgd2UgYXJlIHRvIHNlbGwKICAgICAgIG91ciBwcm9wZXJ0eSBhdCB3aGF0ZXZlciBwcmljZSB3ZSBjYW4gZ2V0IGZvciBpdDsgYW5kIHRoYXQgd2UgYXJlIHRvIGJ1eSBvdGhlciBtZW4ncyBwcm9wZXJ0eQogICAgICAgYXQgd2hhdGV2ZXIgcHJpY2UgdGhleSBjaG9vc2UgdG8gcHV0IHVwb24gaXQuIDxtaWxlc3RvbmUgbj0iNzMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBkb2VzIHRoZQogICAgICAgbGF3IG9yZGVyIG1lbiB0byBiZSBjb25kdWN0ZWQgYXMgc2V0dGxlcnMgYnkgdGhvc2UgZGVjZW12aXJzLCBpbnRvIHRob3NlIGxhbmRzIHdoaWNoIGhhdmUKICAgICAgIGJlZW4gYm91Z2h0IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGlzIGxhdz8gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.27.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhc2sgbm93LCBzdXBwb3NlIHRoZXJlIGlzIG5vIG9uZSB3aG8gaXMgd2lsbGluZyB0bwogICAgICAgc2VsbCwgd2hhdCBpcyB0byBiZWNvbWUgb2YgdGhlIG1vbmV5PyBUaGUgbGF3IHNheXMgaXQgaXMgbm90IHRvIGJlIGJyb3VnaHQgaW50byB0aGUgdHJlYXN1cnkuCiAgICAgICBJdCBmb3JiaWRzIGl0cyBiZWluZyByZWZ1bmRlZC4gVGhlIGRlY2VtdmlycywgdGhlbiwgd2lsbCBrZWVwIGFsbCB0aGF0IG1vbmV5LiBMYW5kIHdpbGwgbm90CiAgICAgICBiZSBib3VnaHQgZm9yIHlvdS4gQWZ0ZXIgaGF2aW5nIGFsaWVuYXRlZCB5b3VyIHJldmVudWVzLCBoYXJhc3NlZCB5b3VyIGFsbGllcywgZHJhaW5lZCB0aGUKICAgICAgIGNvbmZlZGVyYXRlIGtpbmdzIGFuZCBhbGwgbmF0aW9ucyBvZiB0aGVpciB3aG9sZSBwcm9wZXJ0eSwgdGhleSB3aWxsIGhhdmUgdGhlIG1vbmV5LCBhbmQgeW91CiAgICAgICB3aWxsIG5vdCBoYXZlIHRoZSBsYW5kcy4gT2gsIHNheXMgaGUsIHRoZXkgd2lsbCBlYXNpbHkgYmUgaW5kdWNlZCBieSB0aGUgbWFnbml0dWRlIG9mIHRoZQogICAgICAgc3VtcyBvZmZlcmVkIHRvIHNlbGwgdGhlIGxhbmRzLiBUaGVuIHRoZSBlZmZlY3Qgb2YgdGhlIGxhdyBpcyB0byBiZSB0aHVzOiB0aGF0IHdlIGFyZSB0byBzZWxsCiAgICAgICBvdXIgcHJvcGVydHkgYXQgd2hhdGV2ZXIgcHJpY2Ugd2UgY2FuIGdldCBmb3IgaXQ7IGFuZCB0aGF0IHdlIGFyZSB0byBidXkgb3RoZXIgbWVuJ3MgcHJvcGVydHkKICAgICAgIGF0IHdoYXRldmVyIHByaWNlIHRoZXkgY2hvb3NlIHRvIHB1dCB1cG9uIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.27.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGRvZXMgdGhlCiAgICAgICBsYXcgb3JkZXIgbWVuIHRvIGJlIGNvbmR1Y3RlZCBhcyBzZXR0bGVycyBieSB0aG9zZSBkZWNlbXZpcnMsIGludG8gdGhvc2UgbGFuZHMgd2hpY2ggaGF2ZQogICAgICAgYmVlbiBib3VnaHQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBwcm92aXNpb25zIG9mIHRoaXMgbGF3PyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQ/IElzIG5vdCB0aGUgd2hvbGUgcGxhbiBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgaXQgZG9lcyBub3QgbWFrZSBhbnkgZGlmZmVyZW5jZSB0byB0aGUKICAgICAgIHJlcHVibGljIHdoZXRoZXIgYSBjb2xvbnkgaXMgbGVkIGludG8gdGhhdCBwbGFjZSBvciBub3Q/IElzIGl0IGEgcGxhY2Ugd2hpY2ggcmVxdWlyZXMgYQogICAgICAgY29sb255PyBbYSBwbGFjZSB3aGljaCByZWZ1c2VzIG9uZT9dIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqKiIgLz5BbmQgaW4gdGhpcyBjbGFzcyBvZiBwbGFjZXMsIGFzIGluIHRoZSBvdGhlciBwYXJ0cyBvZiB0aGUKICAgICAgIHJlcHVibGljLCBpdCBpcyB3b3J0aHdoaWxlIHRvIHJlY29sbGVjdCB0aGUgZGlsaWdlbmNlIGV4aGliaXRlZCBieSBvdXIgYW5jZXN0b3JzOyB3aG8KICAgICAgIGVzdGFibGlzaGVkIGNvbG9uaWVzIGluIHN1Y2ggc3VpdGFibGUgcGxhY2VzIHRvIGd1YXJkIGFnYWluc3QgYWxsIHN1c3BpY2lvbiBvZiBkYW5nZXIsIHRoYXQKICAgICAgIHRoZXkgYXBwZWFyZWQgdG8gYmUgbm90IHNvIG11Y2ggdG93bnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYXMKICAgICAgIGJ1bHdhcmtzIG9mIHRoZSBlbXBpcmUuIFRoZXNlIG1lbiBhcmUgZ29pbmcgdG8gbGVhZCBjb2xvbmllcyBpbnRvIHRob3NlIGxhbmRzIHdoaWNoIHRoZXkgaGF2ZQogICAgICAgYm91Z2h0LiBXaWxsIHRoZXkgZG8gc28sIGV2ZW4gaWYgaXQgYmUgbm90IGZvciB0aGUgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYyB0byBkbyBzbz8KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzQiIHVuaXQ9InNlY3Rpb24iIC8+IOKAnEFuZCBpbnRvIHdoYXRldmVyIHBsYWNlcyBiZXNpZGVzIHRoZXkgc2hhbGwKICAgICAgIHRoaW5rIGZpdC7igJ0gV2hhdCBpcyB0aGUgcmVhc29uLCB0aGVyZWZvcmUsIHRoYXQgdGhleSBtYXkgbm90IGJlIGFibGUgdG8gc2V0dGxlIGEKICAgICAgIGNvbG9ueSBvbiB0aGUgSmFuaWN1bGFuIEhpbGw7IGFuZCB0byBwbGFjZSBhIGdhcnJpc29uIG9mIHRoZWlyIG93biBmb3IgdGhlaXIgb3duIHByb3RlY3Rpb24KICAgICAgIG9uIHlvdXIgaGVhZHMgYW5kIG5lY2tzPyBXaWxsIHlvdSBub3QgZGVmaW5lIGhvdyBtYW55IGNvbG9uaWVzIHlvdSBjaG9vc2UgdG8gaGF2ZSBsZWQgZm9ydGgsCiAgICAgICBpbnRvIHdoYXQgZGlzdHJpY3RzIHRoZXkgYXJlIHRvIGJlIGxlZCwgYW5kIG9mIHdoYXQgbnVtYmVyIG9mIGNvbG9uaXN0cyB0aGV5IGFyZSB0byBjb25zaXN0PwogICAgICAgV2lsbCB5b3Ugb2NjdXB5IGEgcGxhY2Ugd2hpY2ggeW91IGNvbnNpZGVyIHN1aXRhYmxlIGZvciB0aGUgdmlvbGVuY2Ugd2hpY2ggcGVyaGFwcyB5b3UgYXJlCiAgICAgICBtZWRpdGF0aW5nPyBXaWxsIHlvdSBjb21wbGV0ZSB0aGUgbnVtYmVyIG9mIHRoZSBjb2xvbnksIGFuZCB3aWxsIHlvdSBzdHJlbmd0aGVuIGl0IGJ5CiAgICAgICB3aGF0ZXZlciBnYXJyaXNvbiB5b3UgbWF5IHRoaW5rIGFkdmlzYWJsZT8gV2lsbCB5b3UgZW1wbG95IHRoZSByZXZlbnVlcyBhbmQgYWxsIHRoZSByZXNvdXJjZXMKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gY29lcmNlIGFuZCBvcHByZXNzIHRoZSBSb21hbiBwZW9wbGUgaXRzZWxmLCBhbmQgdG8gYnJpbmcgaXQgdW5kZXIgdGhlCiAgICAgICBkb21pbmlvbiBhbmQgcG93ZXIgb2YgdGhvc2UgaW50b2xlcmFibGUgZGVjZW12aXJzPyA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNzUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKioqKioiIC8+QW5kIGluIHRoaXMgY2xhc3Mgb2YgcGxhY2VzLCBhcyBpbiB0aGUgb3RoZXIgcGFydHMgb2YgdGhlCiAgICAgICByZXB1YmxpYywgaXQgaXMgd29ydGh3aGlsZSB0byByZWNvbGxlY3QgdGhlIGRpbGlnZW5jZSBleGhpYml0ZWQgYnkgb3VyIGFuY2VzdG9yczsgd2hvCiAgICAgICBlc3RhYmxpc2hlZCBjb2xvbmllcyBpbiBzdWNoIHN1aXRhYmxlIHBsYWNlcyB0byBndWFyZCBhZ2FpbnN0IGFsbCBzdXNwaWNpb24gb2YgZGFuZ2VyLCB0aGF0CiAgICAgICB0aGV5IGFwcGVhcmVkIHRvIGJlIG5vdCBzbyBtdWNoIHRvd25zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGFzCiAgICAgICBidWx3YXJrcyBvZiB0aGUgZW1waXJlLiBUaGVzZSBtZW4gYXJlIGdvaW5nIHRvIGxlYWQgY29sb25pZXMgaW50byB0aG9zZSBsYW5kcyB3aGljaCB0aGV5IGhhdmUKICAgICAgIGJvdWdodC4gV2lsbCB0aGV5IGRvIHNvLCBldmVuIGlmIGl0IGJlIG5vdCBmb3IgdGhlIGludGVyZXN0cyBvZiB0aGUgcmVwdWJsaWMgdG8gZG8gc28/CiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.27.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQW5kIGludG8gd2hhdGV2ZXIgcGxhY2VzIGJlc2lkZXMgdGhleSBzaGFsbAogICAgICAgdGhpbmsgZml0LuKAnSBXaGF0IGlzIHRoZSByZWFzb24sIHRoZXJlZm9yZSwgdGhhdCB0aGV5IG1heSBub3QgYmUgYWJsZSB0byBzZXR0bGUgYQogICAgICAgY29sb255IG9uIHRoZSBKYW5pY3VsYW4gSGlsbDsgYW5kIHRvIHBsYWNlIGEgZ2Fycmlzb24gb2YgdGhlaXIgb3duIGZvciB0aGVpciBvd24gcHJvdGVjdGlvbgogICAgICAgb24geW91ciBoZWFkcyBhbmQgbmVja3M/IFdpbGwgeW91IG5vdCBkZWZpbmUgaG93IG1hbnkgY29sb25pZXMgeW91IGNob29zZSB0byBoYXZlIGxlZCBmb3J0aCwKICAgICAgIGludG8gd2hhdCBkaXN0cmljdHMgdGhleSBhcmUgdG8gYmUgbGVkLCBhbmQgb2Ygd2hhdCBudW1iZXIgb2YgY29sb25pc3RzIHRoZXkgYXJlIHRvIGNvbnNpc3Q/CiAgICAgICBXaWxsIHlvdSBvY2N1cHkgYSBwbGFjZSB3aGljaCB5b3UgY29uc2lkZXIgc3VpdGFibGUgZm9yIHRoZSB2aW9sZW5jZSB3aGljaCBwZXJoYXBzIHlvdSBhcmUKICAgICAgIG1lZGl0YXRpbmc/IFdpbGwgeW91IGNvbXBsZXRlIHRoZSBudW1iZXIgb2YgdGhlIGNvbG9ueSwgYW5kIHdpbGwgeW91IHN0cmVuZ3RoZW4gaXQgYnkKICAgICAgIHdoYXRldmVyIGdhcnJpc29uIHlvdSBtYXkgdGhpbmsgYWR2aXNhYmxlPyBXaWxsIHlvdSBlbXBsb3kgdGhlIHJldmVudWVzIGFuZCBhbGwgdGhlIHJlc291cmNlcwogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZSB0byBjb2VyY2UgYW5kIG9wcHJlc3MgdGhlIFJvbWFuIHBlb3BsZSBpdHNlbGYsIGFuZCB0byBicmluZyBpdCB1bmRlciB0aGUKICAgICAgIGRvbWluaW9uIGFuZCBwb3dlciBvZiB0aG9zZSBpbnRvbGVyYWJsZSBkZWNlbXZpcnM/IDwvdHJhbnNsYXRpb24+"
translation['2.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.28.75'] = ""
translation['2.28.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QsIHRoZSBtb3N0IGZlcnRpbGUgc2VjdGlvbiBvZiB0aGUgd2hvbGUgd29ybGQsIGlzCiAgICAgICB0byBiZSBkaXZpZGVkIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGlzIGxhdzsgYW5kIGEgY29sb255IGlzIHRvIGJlIGxlZCB0bwogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgYSBtb3N0IGhvbm91cmFibGUgYW5kIGJlYXV0aWZ1bCBjaXR5LiBCdXQKICAgICAgIHdoYXQgY2FuIHdlIHNheSB0byB0aGlzPyBJIHdpbGwgc3BlYWsgZmlyc3Qgb2YgeW91ciBhZHZhbnRhZ2UsIE8gUm9tYW5zLiBUaGVuIEkgd2lsbCByZWN1ciB0bwogICAgICAgdGhlIHF1ZXN0aW9uIG9mIGhvbm91ciBhbmQgZGlnbml0eTsgc28gdGhhdCwgaWYgYW55IG9uZSB0YWtlcyBwYXJ0aWN1bGFyIHBsZWFzdXJlIGluIHRoZQogICAgICAgZXhjZWxsZW5jZSBvZiBhbnkgdG93biBvciBhbnkgZGlzdHJpY3QsIGhlIG1heSBub3QgZXhwZWN0IGFueXRoaW5nOyBhbmQgaWYgYW55IG9uZSBpcwogICAgICAgaW5mbHVlbmNlZCBieSB0aGUgaWRlYSBvZiB0aGUgZGlnbml0eSBvZiB0aGUgYnVzaW5lc3MsIGhlIG1heSByZXNpc3QgdGhpcyBmaWN0aXRpb3VzCiAgICAgICBsaWJlcmFsaXR5LiBBbmQgZmlyc3Qgb2YgYWxsIEkgd2lsbCBzcGVhayBvZiB0aGUgdG93biwgaW4gY2FzZSB0aGVyZSBpcyBhbnkgb25lIHdob3NlIGZhbmN5CiAgICAgICBpcyBtb3JlIHRha2VuIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoYW4gd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIEhlIG9yZGVycyBmaXZlIHRob3VzYW5kIGNvbG9uaXN0cyB0byBiZSBlbnJvbGxlZCBmb3IKICAgICAgIHRoZSBwdXJwb3NlIG9mIGJlaW5nIHNldHRsZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+OyBhbmQgdG8gbWFrZQogICAgICAgdXAgdGhpcyBudW1iZXIsIGVhY2ggb2YgdGhlIGRlY2VtdmlycyBpcyB0byBjaG9vc2UgZml2ZSBodW5kcmVkIG1lbi4gSSBlbnRyZWF0IHlvdSwgZG8gbm90CiAgICAgICBkZWNlaXZlIHlvdXJzZWx2ZXMgYWJvdXQgdGhpcyBtYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['2.28.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz4gQ29uc2lkZXIgaXQgaW4gaXRzCiAgICAgICB0cnVlIGxpZ2h0LCBhbmQgd2l0aCBkdWUgY2FyZS4gRG8geW91IHRoaW5rIHRoYXQgaW4gdGhpcyBudW1iZXIgdGhlcmUgd2lsbCBiZSByb29tIGZvciB5b3UKICAgICAgIHlvdXJzZWx2ZXMsIG9yIGZvciBhbnkgbWVuIGxpa2UgeW914oCUcXVpZXQsIGVhc3kgbWVuPyBJZiB0aGVyZSBiZSByb29tIGZvciBhbGwgb2YKICAgICAgIHlvdSwgb3IgZXZlbiBmb3IgdGhlIGdyZWF0ZXIgcGFydCBvZiB5b3XigJRhbHRob3VnaCBteSByZWdhcmQgZm9yIHlvdXIgaG9ub3VyIGNvbXBlbHMKICAgICAgIG1lIHRvIGtlZXAgYXdha2UgZGF5IGFuZCBuaWdodCwgYW5kIHRvIHdhdGNoIHdpdGggZWFnZXIgZXllcyBldmVyeSBwYXJ0IG9mIHRoZQogICAgICAgcmVwdWJsaWPigJRzdGlsbCBJIHdpbGwgY2xvc2UgbXkgZXllcyBmb3IgYSB0aW1lLCBpZiB5b3VyIGFkdmFudGFnZSB3aWxsIGJlIGF0IGFsbAogICAgICAgcHJvbW90ZWQgYnkgbXkgZG9pbmcgc28uIEJ1dCwgaWYgYSBwbGFjZSBhbmQgYSBjaXR5IGlzIGJlaW5nIGxvb2tlZCBvdXQgZm9yIGZpdmUgdGhvdXNhbmQKICAgICAgIG1lbiwgcGlja2VkIG91dCBhcyBmaXQgaW5zdHJ1bWVudHMgZm9yIHZpb2xlbmNlLCBhbmQgYXRyb2NpdHksIGFuZCBzbGF1Z2h0ZXIsIGZyb20gd2hpY2ggdGhleQogICAgICAgbWF5IGJlIGFibGUgdG8gbWFrZSB3YXIsIGFuZCB3aGljaCBtYXkgYmUgYWJsZSB0byBlcXVpcCB0aGVtIHByb3Blcmx5IGZvciB3YXIs4oCUd2lsbAogICAgICAgeW91IHN0aWxsIHN1ZmZlciBhIHBvd2VyIHRvIGJlIHJhaXNlZCBhbmQgZ2Fycmlzb25zIHRvIGJlIGFybWVkIGluIHlvdXIgb3duIG5hbWUgYWdhaW5zdAogICAgICAgeW91cnNlbHZlcz8gV2lsbCB5b3UgYWxsb3cgY2l0aWVzIGFuZCBsYW5kcyBhbmQgZm9yY2VzIHRvIGJlIGFycmF5ZWQgYWdhaW5zdCB5b3VyIGludGVyZXN0PwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.28.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHRoZXkgdGhlbXNlbHZlcyBoYXZlIGRlc2lyZWQgdGhlIENhbXBhbmlhbiBkaXN0cmljdAogICAgICAgd2hpY2ggdGhleSBob2xkIG91dCBhIGhvcGUgb2YgdG8geW91LiBUaGV5IHdpbGwgbGVhZCB0aGl0aGVyIHRoZWlyIG93biBmcmllbmRzLCBpbiB3aG9zZSBuYW1lCiAgICAgICB0aGV5IHRoZW1zZWx2ZXMgbWF5IG9jY3VweSBpdCBhbmQgZW5qb3kgaXQuIEJlc2lkZXMgYWxsIHRoaXMsIHRoZXkgd2lsbCBtYWtlIHB1cmNoYXNlczsgdGhleQogICAgICAgd2lsbCBhZGQgdGhlIG90aGVyIHRlbiBhY3JlcyB0byB0aGVpciBwcmVzZW50IGVzdGF0ZS4gRm9yIGlmIHRoZXkgc2F5IHRoYXQgdGhhdCBpcyBub3QgbGF3ZnVsCiAgICAgICBieSB0aGUgbGF3OyBieSB0aGUgQ29ybmVsaWFuIGxhdyBpdCBjZXJ0YWlubHkgaXMgbm90LiBCdXQgd2Ugc2VlICh0byBzYXkgbm90aGluZyBhYm91dCBsYW5kcwogICAgICAgYXQgYSBkaXN0YW5jZSkgdGhhdCB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQcmFlbmVzdGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFByYWVuZXN0ZSI+UHJhZW5lc3RlPC9wbGFjZU5hbWU+CiAgICAgICBpcyBvY2N1cGllZCBieSBhIGZldyBwZW9wbGUuIEFuZCBJIGRvIG5vdCBzZWUgdGhhdCBhbnl0aGluZyBpcyB3YW50aW5nIHRvIHRoZWlyIGZvcnR1bmVzLAogICAgICAgZXhjZXB0IGZhcm1zIG9mIHN1Y2ggYSBkZXNjcmlwdGlvbiB0aGF0IHRoZXkgbWF5IGJlIGFibGUgYnkgdGhlIHN1cHBsaWVzIHdoaWNoIHRoZXkgZGVyaXZlCiAgICAgICBmcm9tIHRoZW0gdG8gc3VwcG9ydCB0aGVpciB2ZXJ5IGxhcmdlIGhvdXNlaG9sZHMsIGFuZCB0aGUgZXhwZW5zZSBvZiB0aGVpciBmYXJtcyBuZWFyCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDdW1hZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ3VtYWUiPkN1bWFlPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB1dGVvbGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFB1dGVvbGkiPlB1dGVvbGk8L3BsYWNlTmFtZT4uIEJ1dCBpZiBoZSBiZSB0aGlua2luZyBvZiB3aGF0IGlzIGZvciB5b3VyIGFkdmFudGFnZSwgdGhlbiBsZXQgaGltCiAgICAgICBjb21lLCBhbmQgbGV0IGhpbSBkaXNjdXNzIHdpdGggbWUsIGZhY2UgdG8gZmFjZSwgdGhlIGRlY2lzaW9uIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.29.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgYXNrZWQgaGltIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCB0byB3aGF0IG1lbiBoZSB3YXMgZ29pbmcgdG8gZGlzdHJpYnV0ZSB0aGF0IGxhbmQsIGFuZAogICAgICAgb24gd2hhdCBwcmluY2lwbGVzLiBIZSBhbnN3ZXJlZCB0aGF0IGhlIHNob3VsZCBiZWdpbiB3aXRoIHRoZSBSb21pbGlhbiB0cmliZS4gSW4gdGhlIGZpcnN0CiAgICAgICBwbGFjZSBub3csIHdoYXQgaXMgdGhlIG9iamVjdCBvZiBzdWNoIHByaWRlIGFuZCBhcnJvZ2FuY2UgYXMgdG8gY3V0IG9mZiBvbmUgcG9ydGlvbiBvZiB0aGUKICAgICAgIHBlb3BsZSwgYW5kIHRvIG5lZ2xlY3QgdGhlIG9yZGVyIG9mIHRoZSB0cmliZXM/IHRvIGNvbnRyaXZlIHRvIGdpdmUgbGFuZCB0byB0aGUgY291bnRyeQogICAgICAgcGVvcGxlIHdobyBoYXZlIGl0IGFscmVhZHksIGJlZm9yZSBhbnkgaXMgZ2l2ZW4gdG8gdGhlIGNpdHkgcGVvcGxlLCB0byB3aG9tIHRoZSBob3BlIG9mIGxhbmQKICAgICAgIGFuZCB0aGUgcGxlYXN1cmUgdGhleSBhcmUgdG8gZGVyaXZlIGZyb20gaXQgaXMgaGVsZCBvdXQgYXMgYW4gaW5kdWNlbWVudCA/IE9yIGlmIGhlIHNheXMgdGhhdAogICAgICAgdGhpcyBpcyBub3Qgd2hhdCBoZSBzYWlkLCBhbmQgaWYgaGUgaGFzIHNvbWUgcGxhbiBpbiBoaXMgaGVhZCB0byBzYXRpc2Z5IGFsbCBvZiB5b3UsIGxldCBoaW0KICAgICAgIHByb2R1Y2UgaXQ7IGxldCBoaW0gYWxsb3QgaXQgaW4gZGl2aXNpb25zIG9mIHRlbiBhY3JlczsgbGV0IGhpbSBwdXQgZm9ydGggeW91ciBuYW1lcyBpbiBhCiAgICAgICByZWd1bGFyIGFycmFuZ2VtZW50IGZyb20gdGhlIGRpc3RyaWN0IG9mIHRoZSBTdWJ1cmEgdG8gdGhhdCBvZiB0aGUgQXJudXMuIElmIHlvdSBwZXJjZWl2ZSBub3QKICAgICAgIG9ubHkgdGhhdCB0ZW4gYWNyZXMgYXJlIG5vdCBnaXZlbiB0byB5b3UsIGJ1dCB0aGF0IGl0IGlzIGFjdHVhbGx5IGltcG9zc2libGUgZm9yIHN1Y2ggYSBib2R5CiAgICAgICBvZiBtZW4gdG8gYmUgY29sbGVjdGVkIHRvZ2V0aGVyIGluIHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgd2lsbCB5b3UgbmV2ZXJ0aGVsZXNzIGFsbG93IHRoZSByZXB1YmxpYyB0byBiZSBoYXJhc3NlZCwgdGhlIG1hamVzdHkKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgZGVzcGlzZWQsIGFuZCB5b3UgeW91cnNlbHZlcyB0byBiZSBkZWx1ZGVkIGFueSBsb25nZXIgYnkgdGhlCiAgICAgICB0cmlidW5lIG9mIHRoZSBwZW9wbGU/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgd2lsbCB5b3UgbmV2ZXJ0aGVsZXNzIGFsbG93IHRoZSByZXB1YmxpYyB0byBiZSBoYXJhc3NlZCwgdGhlIG1hamVzdHkKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgZGVzcGlzZWQsIGFuZCB5b3UgeW91cnNlbHZlcyB0byBiZSBkZWx1ZGVkIGFueSBsb25nZXIgYnkgdGhlCiAgICAgICB0cmlidW5lIG9mIHRoZSBwZW9wbGU/IDwvdHJhbnNsYXRpb24+"
translation['2.29.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaWYgdGhhdCBsYW5kIGNvdWxkIHBvc3NpYmx5IGNvbWUgdG8geW91LCB3b3VsZCB5b3Ugbm90IHJhdGhlciB0aGF0IGl0IHJlbWFpbmVkIGFzIHBhcnQKICAgICAgIG9mIHlvdXIgcGF0cmltb255PyBXaWxsIHlvdSBhbGxvdyB0aGUgbW9zdCBiZWF1dGlmdWwgZXN0YXRlIGJlbG9uZ2luZyB0byB0aGUgUm9tYW4KICAgICAgIHBlb3BsZeKAlHRoZSBtYWluIHNvdXJjZSBvZiB5b3VyIHJpY2hlcywgeW91ciBjaGllZiBvcm5hbWVudCBpbiB0aW1lIG9mIHBlYWNlLCB5b3VyCiAgICAgICBjaGllZiBzb3VyY2Ugb2Ygc3VwcGx5IGluIHRpbWUgb2Ygd2FyLCB0aGUgZm91bmRhdGlvbiBvZiB5b3VyIHJldmVudWVzLCB0aGUgZ3JhbmFyeSBmcm9tCiAgICAgICB3aGljaCB5b3VyIGxlZ2lvbnMgYXJlIGZlZCwgeW91ciBjb25zb2xhdGlvbiBpbiB0aW1lIG9mIHNjYXJjaXR54oCUdG8gYmUgcnVpbmVkPyBIYXZlCiAgICAgICB5b3UgZm9yZ290dGVuIHdoYXQgZ3JlYXQgYXJtaWVzIHlvdSBzdXBwb3J0ZWQgYnkgbWVhbnMgb2YgdGhlIHByb2R1Y2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMwMDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4sIGluIHRoZSBJdGFsaWFuIHdhciwgd2hlbiB5b3UgaGFkIGxvc3QgYWxsIHlvdXIKICAgICAgIG9yZGluYXJ5IHNvdXJjZXMgb2YgcmV2ZW51ZT8gQXJlIHlvdSBpZ25vcmFudCB0aGF0IGFsbCB0aG9zZSBtYWduaWZpY2VudCByZXZlbnVlcyBvZiB0aGUKICAgICAgIFJvbWFuIHBlb3BsZSBhcmUgb2Z0ZW4gZGVwZW5kZW50IG9uIGEgdmVyeSBzbGlnaHQgaW1wdWxzZSBvZiBmb3J0dW5lLW9uIGEgY3JpdGljYWwgbW9tZW50PwogICAgICAgV2hhdCB3aWxsIGFsbCB0aGUgaGFyYm91cnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgd2hhdCB3aWxsIHRoZQogICAgICAgcGxhaW5zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+LCB3aGF0IHdpbGwgYWxsIG91ciB0cmFuc21hcmluZQogICAgICAgcmV2ZW51ZXMgYXZhaWwgdXMsIGlmIHRoZSB2ZXJ5IHNsaWdodGVzdCBhbGFybSBvZiBwaXJhdGVzIG9yIGVuZW1pZXMgYmUgb25jZSBnaXZlbj8KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODEiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBhcyBvdXIgcmV2ZW51ZXMgZGVyaXZlZCBmcm9tIHRoZSB0ZXJyaXRvcnkgb2YKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gYXJlIG9mIHN1Y2ggYSBuYXR1cmUgdGhhdCB0aGV5IGFyZSBhbHdheXMKICAgICAgIGF0IGhvbWUsIGFuZCB0aGF0IHRoZXkgYXJlIHByb3RlY3RlZCBieSB0aGUgYnVsd2FyayBvZiBhbGwgb3VyIEl0YWxpYW4gdG93bnMsIHNvIHRoZXkgYXJlCiAgICAgICBuZWl0aGVyIGhvc3RpbGUgdG8gdXMgaW4gdGltZSBvZiB3YXIsIG5vciB2YXJpYWJsZSBpbiB0aGVpciBwcm9kdWN0aXZlbmVzcywgbm9yIHVuZm9ydHVuYXRlCiAgICAgICBmcm9tIGFueSBhY2NpZGVudHMgb2YgY2xpbWF0ZSBvciBzb2lsLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+LCBpbiB0aGUgSXRhbGlhbiB3YXIsIHdoZW4geW91IGhhZCBsb3N0IGFsbCB5b3VyCiAgICAgICBvcmRpbmFyeSBzb3VyY2VzIG9mIHJldmVudWU/IEFyZSB5b3UgaWdub3JhbnQgdGhhdCBhbGwgdGhvc2UgbWFnbmlmaWNlbnQgcmV2ZW51ZXMgb2YgdGhlCiAgICAgICBSb21hbiBwZW9wbGUgYXJlIG9mdGVuIGRlcGVuZGVudCBvbiBhIHZlcnkgc2xpZ2h0IGltcHVsc2Ugb2YgZm9ydHVuZS1vbiBhIGNyaXRpY2FsIG1vbWVudD8KICAgICAgIFdoYXQgd2lsbCBhbGwgdGhlIGhhcmJvdXJzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIHdoYXQgd2lsbCB0aGUKICAgICAgIHBsYWlucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiwgd2hhdCB3aWxsIGFsbCBvdXIgdHJhbnNtYXJpbmUKICAgICAgIHJldmVudWVzIGF2YWlsIHVzLCBpZiB0aGUgdmVyeSBzbGlnaHRlc3QgYWxhcm0gb2YgcGlyYXRlcyBvciBlbmVtaWVzIGJlIG9uY2UgZ2l2ZW4/CiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.29.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFzIG91ciByZXZlbnVlcyBkZXJpdmVkIGZyb20gdGhlIHRlcnJpdG9yeSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IGFyZSBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgdGhleSBhcmUgYWx3YXlzCiAgICAgICBhdCBob21lLCBhbmQgdGhhdCB0aGV5IGFyZSBwcm90ZWN0ZWQgYnkgdGhlIGJ1bHdhcmsgb2YgYWxsIG91ciBJdGFsaWFuIHRvd25zLCBzbyB0aGV5IGFyZQogICAgICAgbmVpdGhlciBob3N0aWxlIHRvIHVzIGluIHRpbWUgb2Ygd2FyLCBub3IgdmFyaWFibGUgaW4gdGhlaXIgcHJvZHVjdGl2ZW5lc3MsIG5vciB1bmZvcnR1bmF0ZQogICAgICAgZnJvbSBhbnkgYWNjaWRlbnRzIG9mIGNsaW1hdGUgb3Igc29pbC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5PdXIgYW5jZXN0b3JzIHdlcmUgc28gZmFyIGZyb20gZGltaW5pc2hpbmcgd2hhdCB0aGV5IGhhZCB0YWtlbiBmcm9tIHRoZSBDYW1wYW5pYW5zLCB0aGF0CiAgICAgICB0aGV5IGV2ZW4gYm91Z2h0IGFkZGl0aW9uYWwgbGFuZHMgdG8gYmUgYWRkZWQgdG8gaXQsIGZyb20gdGhvc2UgZnJvbSB3aG9tIHRoZXkgY291bGQgbm90CiAgICAgICByZWFzb25hYmx5IHRha2UgaXQgd2l0aG91dCBwdXJjaGFzZS4gRm9yIHdoaWNoIHJlYXNvbiwgbmVpdGhlciB0aGUgdHdvIEdyYWNjaGksIHdobyB0aG91Z2h0IGEKICAgICAgIGdyZWF0IGRlYWwgb2Ygd2hhdCB3YXMgYWR2YW50YWdlb3VzIGZvciB0aGUgUm9tYW4gcGVvcGxlLCBub3IgTHVjaXVzIFN1bGxhLCB3aG8gZ2F2ZSBhd2F5CiAgICAgICBldmVyeXRoaW5nIHdpdGhvdXQgdGhlIHNsaWdodGVzdCBzY3J1cGxlIHRvIGFueSBvbmUgaGUgcGxlYXNlZCwgZXZlciB2ZW50dXJlZCB0byB0b3VjaCB0aGUKICAgICAgIENhbXBhbmlhbiB0ZXJyaXRvcnkuIFJ1bGx1cyB3YXMgdGhlIGZpcnN0IG1hbiB0byB2ZW50dXJlIHRvIHJlbW92ZSB0aGUgcmVwdWJsaWMgZnJvbSB0aGF0CiAgICAgICBwcm9wZXJ0eSwgb2Ygd2hpY2ggbmVpdGhlciB0aGUgbGliZXJhbGl0eSBvZiB0aGUgR3JhY2NoaSBub3IgdGhlIHVuY29udHJvbGxlZCBwb3dlciBvZiBTdWxsYQogICAgICAgaGFkIGRlcHJpdmVkIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgbGFuZCB3aGljaCBub3csIGFzIHlvdSBwYXNzIGJ5IGl0LCB5b3Ugc2F5IGlzIHlvdXJzLCBhbmQgd2hpY2ggZm9yZWlnbmVycyB3aG9zZSByb2FkCiAgICAgICBsaWVzIHRocm91Z2ggaXQgaGVhciBpcyB5b3Vycywgd2hlbiBpdCBpcyBkaXZpZGVkIHdpbGwgbmVpdGhlciBiZSBub3IgYmUgc2FpZCB0byBiZSB5b3Vycy4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB3aG8gYXJlIHRoZSBtZW4gd2hvIHdpbGwgcG9zc2VzcyBpdD8gSW4gdGhlIGZpcnN0CiAgICAgICBwbGFjZSB0aGV5IGFyZSBhY3RpdmUgbWVuLCBwcmVwYXJlZCBmb3IgZGVlZHMgb2YgdmlvbGVuY2UsIHdpbGxpbmcgZm9yIHNlZGl0aW9uLCB3aG8sIHRoZQogICAgICAgdmVyeSBtb21lbnQgdGhlIGRlY2VtdmlycyBjbGFwIHRoZWlyIGhhbmRzLCBtYXkgYmUgYXJtZWQgYWdhaW5zdCB0aGUgY2l0aXplbnMgYW5kIHJlYWR5IGZvcgogICAgICAgc2xhdWdodGVyLiBJbiB0aGUgbmV4dCBwbGFjZSwgeW91IHdpbGwgc2VlIHRoZSB3aG9sZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gZGlzdHJpYnV0ZWQgYW1vbmcgYSBmZXcgbWVuIGFscmVhZHkgcmljaCBpbiB3ZWFsdGggYW5kIHBvd2VyLgogICAgICAgTWVhbndoaWxlIHlvdSwgd2hvIGhhdmUgcmVjZWl2ZWQgZnJvbSB5b3VyIGFuY2VzdG9ycyB0aG9zZSBtb3N0IGJlYXV0aWZ1bCBob21lcywgaWYgSSBtYXkgc28KICAgICAgIHNheSwgb2YgeW91ciByZXZlbnVlcywgd2hpY2ggdGhleSB3b24gYnkgdGhlaXIgYXJtcywgd2lsbCBub3QgaGF2ZSBsZWZ0IHRvIHlvdSBvbmUgc2luZ2xlCiAgICAgICBjbG9kIG9mIGVhcnRoIG9mIGFsbCB5b3VyIHBhdGVybmFsIGhlcmVkaXRhcnkgcG9zc2Vzc2lvbnMuIEFuZCB0aGVyZSB3aWxsIGJlIHRoaXMgZGlmZmVyZW5jZQogICAgICAgYmV0d2VlbiB5b3VyIGRpbGlnZW5jZSBhbmQgdGhhdCBvciBwcml2YXRlIGluZGl2aWR1YWxzLCB0aGF0IHdoZW4gUHVibGl1cyBMZW50dWx1cywgd2hpbGUgaGUKICAgICAgIHdhcyBjaGllZiBvZiB0aGUgc2VuYXRlLCBoYWQgYmVlbiBzZW50IGludG8gdGhvc2UgcGFydHMgYnkgb3VyIGFuY2VzdG9ycywgaW4gb3JkZXIgdG8KICAgICAgIHB1cmNoYXNlIGF0IHRoZSBwdWJsaWMgZXhwZW5zZSB0aG9zZSBsYW5kcywgYmVpbmcgcHJpdmF0ZSBwcm9wZXJ0eSwgd2hpY2ggcHJvamVjdGVkIGludG8gdGhlCiAgICAgICBwdWJsaWMgZG9tYWluIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgaGUgaXMgc2FpZCB0byBoYXZlCiAgICAgICByZXBvcnRlZCB0aGF0IGhlIGhhZCBub3QgYmVlbiBhYmxlIHRvIHB1cmNoYXNlIGEgY2VydGFpbiBtYW4ncyBlc3RhdGUgZm9yIG1vbmV5OyBhbmQgdGhhdCBoZQogICAgICAgd2hvIGhhZCByZWZ1c2VkIHRvIHNlbGwgaXQsIGhhZCBnaXZlbiB0aGlzIHJlYXNvbiB3aHkgaGUgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8KICAgICAgIHNlbGwgaXQsIHRoYXQsIHRob3VnaCBoZSBoYWQgbWFueSBmYXJtcywgdGhpcyB3YXMgdGhlIG9ubHkgZmFybSBmcm9tIHdoaWNoIGhlIG5ldmVyIGhhZCBoYWQKICAgICAgIGFueSBiYWQgbmV3cy4gPG1pbGVzdG9uZSBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28/IERpZCB0aGlzIHJlYXNvbiB3ZWlnaCB3aXRoIGEKICAgICAgIHByaXZhdGUgaW5kaXZpZHVhbCBhbmQgc2hhbGwgaXQgbm90IHdlaWdoIHdpdGggdGhlIFJvbWFuIHBlb3BsZSB0byBwcmV2ZW50IHRoZWlyIGdpdmluZyB1cAogICAgICAgdGhlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiB0byBwcml2YXRlIGluZGl2aWR1YWxzIGZvcgogICAgICAgbm90aGluZywgYXQgdGhlIHJlcXVlc3Qgb2YgUnVsbHVzPyBBbmQgdGhlIFJvbWFuIHBlb3BsZSBtYXkgc2F5IHRoZSB2ZXJ5IHNhbWUgdGhpbmcgYWJvdXQKICAgICAgIHRoaXMgcmV2ZW51ZSwgdGhhdCBoZSBpcyBzYWlkIHRvIGhhdmUgc2FpZCBhYm91dCBoaXMgZmFybS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gZm9yIG1hbnkgeWVhcnMgZHVyaW5nIHRoZSBNaXRocmlkYXRpYyB3YXIgcHJvZHVjZWQgeW91IG5vIHJldmVudWUuIFRoZXJlCiAgICAgICB3YXMgbm8gcmV2ZW51ZSBmcm9tIHRoZSBTcGFpbnMgaW4gdGhlIHRpbWUgb2YgU2VydG9yaXVzLiBNYW5pdXMgQXF1aWxpdXMgZXZlbiBsZW50IGNvcm4gdG8KICAgICAgIHRoZSBTaWNpbGlhbiBjaXRpZXMgYXQgdGhlIHRpbWUgb2YgdGhlIFNlcnZpbGUgd2FyLiBCdXQgZnJvbSB0aGlzIHRyaWJ1dGFyeSBsYW5kIG5vIGJhZCBuZXdzCiAgICAgICB3YXMgZXZlciBoZWFyZC4gT3RoZXIgb2Ygb3VyIHJldmVudWVzIGFyZSBhdCB0aW1lcyB3ZWlnaGVkIGRvd24gYnkgdGhlIGRpc3RyZXNzZXMgb2Ygd2FyOyBidXQKICAgICAgIHRoZSBzaW5ld3Mgb2Ygd2FyIGFyZSBldmVuIHN1cHBsaWVkIHRvIHVzIGJ5IHRoaXMgdHJpYnV0YXJ5IGxhbmQuIDxtaWxlc3RvbmUgbj0iODQiIHVuaXQ9InNlY3Rpb24iIC8+IEJlc2lkZXMsIGluIHRoaXMgYWxsb3RtZW50IG9mIGxhbmRzIHdoaWNoIGlzIHRvIHRha2UgcGxhY2UsIGV2ZW4gdGhhdCwKICAgICAgIHdoaWNoIGlzIHNhaWQgaW4gb3RoZXIgY2FzZXMsIGNhbm5vdCBiZSBzYWlkIGhlcmUsIG5hbWVseSwgdGhhdCBsYW5kcyBvdWdodCBub3QgdG8gYmUgbGVmdAogICAgICAgZGVzZXJ0ZWQgYnkgdGhlIHBlb3BsZSwgYW5kIHdpdGhvdXQgdGhlIGN1bHRpdmF0aW9uIG9mIGZyZWUgbWVuLiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.30.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdobyBhcmUgdGhlIG1lbiB3aG8gd2lsbCBwb3NzZXNzIGl0PyBJbiB0aGUgZmlyc3QKICAgICAgIHBsYWNlIHRoZXkgYXJlIGFjdGl2ZSBtZW4sIHByZXBhcmVkIGZvciBkZWVkcyBvZiB2aW9sZW5jZSwgd2lsbGluZyBmb3Igc2VkaXRpb24sIHdobywgdGhlCiAgICAgICB2ZXJ5IG1vbWVudCB0aGUgZGVjZW12aXJzIGNsYXAgdGhlaXIgaGFuZHMsIG1heSBiZSBhcm1lZCBhZ2FpbnN0IHRoZSBjaXRpemVucyBhbmQgcmVhZHkgZm9yCiAgICAgICBzbGF1Z2h0ZXIuIEluIHRoZSBuZXh0IHBsYWNlLCB5b3Ugd2lsbCBzZWUgdGhlIHdob2xlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IGRpc3RyaWJ1dGVkIGFtb25nIGEgZmV3IG1lbiBhbHJlYWR5IHJpY2ggaW4gd2VhbHRoIGFuZCBwb3dlci4KICAgICAgIE1lYW53aGlsZSB5b3UsIHdobyBoYXZlIHJlY2VpdmVkIGZyb20geW91ciBhbmNlc3RvcnMgdGhvc2UgbW9zdCBiZWF1dGlmdWwgaG9tZXMsIGlmIEkgbWF5IHNvCiAgICAgICBzYXksIG9mIHlvdXIgcmV2ZW51ZXMsIHdoaWNoIHRoZXkgd29uIGJ5IHRoZWlyIGFybXMsIHdpbGwgbm90IGhhdmUgbGVmdCB0byB5b3Ugb25lIHNpbmdsZQogICAgICAgY2xvZCBvZiBlYXJ0aCBvZiBhbGwgeW91ciBwYXRlcm5hbCBoZXJlZGl0YXJ5IHBvc3Nlc3Npb25zLiBBbmQgdGhlcmUgd2lsbCBiZSB0aGlzIGRpZmZlcmVuY2UKICAgICAgIGJldHdlZW4geW91ciBkaWxpZ2VuY2UgYW5kIHRoYXQgb3IgcHJpdmF0ZSBpbmRpdmlkdWFscywgdGhhdCB3aGVuIFB1YmxpdXMgTGVudHVsdXMsIHdoaWxlIGhlCiAgICAgICB3YXMgY2hpZWYgb2YgdGhlIHNlbmF0ZSwgaGFkIGJlZW4gc2VudCBpbnRvIHRob3NlIHBhcnRzIGJ5IG91ciBhbmNlc3RvcnMsIGluIG9yZGVyIHRvCiAgICAgICBwdXJjaGFzZSBhdCB0aGUgcHVibGljIGV4cGVuc2UgdGhvc2UgbGFuZHMsIGJlaW5nIHByaXZhdGUgcHJvcGVydHksIHdoaWNoIHByb2plY3RlZCBpbnRvIHRoZQogICAgICAgcHVibGljIGRvbWFpbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgaGUgaXMgc2FpZCB0byBoYXZlCiAgICAgICByZXBvcnRlZCB0aGF0IGhlIGhhZCBub3QgYmVlbiBhYmxlIHRvIHB1cmNoYXNlIGEgY2VydGFpbiBtYW4ncyBlc3RhdGUgZm9yIG1vbmV5OyBhbmQgdGhhdCBoZQogICAgICAgd2hvIGhhZCByZWZ1c2VkIHRvIHNlbGwgaXQsIGhhZCBnaXZlbiB0aGlzIHJlYXNvbiB3aHkgaGUgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8KICAgICAgIHNlbGwgaXQsIHRoYXQsIHRob3VnaCBoZSBoYWQgbWFueSBmYXJtcywgdGhpcyB3YXMgdGhlIG9ubHkgZmFybSBmcm9tIHdoaWNoIGhlIG5ldmVyIGhhZCBoYWQKICAgICAgIGFueSBiYWQgbmV3cy4gPC90cmFuc2xhdGlvbj4="
translation['2.30.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28/IERpZCB0aGlzIHJlYXNvbiB3ZWlnaCB3aXRoIGEKICAgICAgIHByaXZhdGUgaW5kaXZpZHVhbCBhbmQgc2hhbGwgaXQgbm90IHdlaWdoIHdpdGggdGhlIFJvbWFuIHBlb3BsZSB0byBwcmV2ZW50IHRoZWlyIGdpdmluZyB1cAogICAgICAgdGhlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IHRvIHByaXZhdGUgaW5kaXZpZHVhbHMgZm9yCiAgICAgICBub3RoaW5nLCBhdCB0aGUgcmVxdWVzdCBvZiBSdWxsdXM/IEFuZCB0aGUgUm9tYW4gcGVvcGxlIG1heSBzYXkgdGhlIHZlcnkgc2FtZSB0aGluZyBhYm91dAogICAgICAgdGhpcyByZXZlbnVlLCB0aGF0IGhlIGlzIHNhaWQgdG8gaGF2ZSBzYWlkIGFib3V0IGhpcyBmYXJtLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGZvciBtYW55IHllYXJzIGR1cmluZyB0aGUgTWl0aHJpZGF0aWMgd2FyIHByb2R1Y2VkIHlvdSBubyByZXZlbnVlLiBUaGVyZQogICAgICAgd2FzIG5vIHJldmVudWUgZnJvbSB0aGUgU3BhaW5zIGluIHRoZSB0aW1lIG9mIFNlcnRvcml1cy4gTWFuaXVzIEFxdWlsaXVzIGV2ZW4gbGVudCBjb3JuIHRvCiAgICAgICB0aGUgU2ljaWxpYW4gY2l0aWVzIGF0IHRoZSB0aW1lIG9mIHRoZSBTZXJ2aWxlIHdhci4gQnV0IGZyb20gdGhpcyB0cmlidXRhcnkgbGFuZCBubyBiYWQgbmV3cwogICAgICAgd2FzIGV2ZXIgaGVhcmQuIE90aGVyIG9mIG91ciByZXZlbnVlcyBhcmUgYXQgdGltZXMgd2VpZ2hlZCBkb3duIGJ5IHRoZSBkaXN0cmVzc2VzIG9mIHdhcjsgYnV0CiAgICAgICB0aGUgc2luZXdzIG9mIHdhciBhcmUgZXZlbiBzdXBwbGllZCB0byB1cyBieSB0aGlzIHRyaWJ1dGFyeSBsYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.30.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz4gQmVzaWRlcywgaW4gdGhpcyBhbGxvdG1lbnQgb2YgbGFuZHMgd2hpY2ggaXMgdG8gdGFrZSBwbGFjZSwgZXZlbiB0aGF0LAogICAgICAgd2hpY2ggaXMgc2FpZCBpbiBvdGhlciBjYXNlcywgY2Fubm90IGJlIHNhaWQgaGVyZSwgbmFtZWx5LCB0aGF0IGxhbmRzIG91Z2h0IG5vdCB0byBiZSBsZWZ0CiAgICAgICBkZXNlcnRlZCBieSB0aGUgcGVvcGxlLCBhbmQgd2l0aG91dCB0aGUgY3VsdGl2YXRpb24gb2YgZnJlZSBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['2.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGlzIGlzIHdoYXQgSSBzYXks4oCUaWYgdGhlIENhbXBhbmlhbiBsYW5kIGJlIGRpdmlkZWQsIHRoZSBjb21tb24gcGVvcGxlIGlzCiAgICAgICBkcml2ZW4gb3V0IG9mIGFuZCBiYW5pc2hlZCBmcm9tIHRoZSBsYW5kcywgbm90IHNldHRsZWQgYW5kIGVzdGFibGlzaGVkIGluIHRoZW0uIEZvciB0aGUgd2hvbGUKICAgICAgIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QgaXMgY3VsdGl2YXRlZCBhbmQgb2NjdXBpZWQgYnkgdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBieSBhIG1vc3QKICAgICAgIHZpcnR1b3VzIGFuZCBtb2RlcmF0ZSBjb21tb24gcGVvcGxlLiBBbmQgdGhhdCByYWNlIG9mIG1lbiBvZiBtb3N0IHZpcnR1b3VzIGhhYml0cywgdGhhdCByYWNlCiAgICAgICBvZiBleGNlbGxlbnQgZmFybWVycyBhbmQgZXhjZWxsZW50IHNvbGRpZXJzLCBpcyB3aG9sbHkgZHJpdmVuIG91dCBieSB0aGlzIHRyaWJ1bmUgd2hvIGlzIHNvCiAgICAgICBkZXZvdGVkIHRvIHRoZSBwZW9wbGUuIEFuZCB0aGVzZSBtaXNlcmFibGUgbWVuLCBib3JuIGFuZCBicm91Z2h0IHVwIG9uIHRob3NlIGxhbmRzLCBwcmFjdGlzZWQKICAgICAgIGluIHRpbGxpbmcgdGhlIGdyb3VuZCwgd2lsbCBoYXZlIG5vIHBsYWNlIHRvIHdoaWNoLCB3aGVuIHNvIHN1ZGRlbmx5IGRyaXZlbiBvdXQsIHRoZXkgY2FuCiAgICAgICBiZXRha2UgdGhlbXNlbHZlcy4gVGhlIGVudGlyZSBwb3NzZXNzaW9uIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3Qgd2lsbCBiZSBnaXZlbiBvdmVyIHRvCiAgICAgICB0aGVzZSByb2J1c3QsIHZpZ29yb3VzLCBhbmQgYXVkYWNpb3VzIHNhdGVsbGl0ZXMgb2YgdGhlIGRlY2Vtdmlycy4gQW5kLCBhcyB5b3Ugbm93IHNheSBvZgogICAgICAgeW91ciBhbmNlc3RvcnMsIOKAnE91ciBhbmNlc3RvcnMgbGVmdCB1cyB0aGVzZSBsYW5kcyzigJ0gc28geW91ciBwb3N0ZXJpdHkKICAgICAgIHdpbGwgc2F5IG9mIHlvdSwg4oCcT3VyIGFuY2VzdG9ycyByZWNlaXZlZCB0aGVzZSBsYW5kcyBmcm9tIHRoZWlyIGFuY2VzdG9ycywgYnV0IGxvc3QKICAgICAgIHRoZW0u4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSB0aGluaywgaW5kZWVkLCB0aGF0IGlmIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2NCIga2V5PSJ0Z24sNzAwNjk2NCI+Q2FtcHVzIE1hcnRpdXM8L3BsYWNlTmFtZT4gd2VyZSB0byBiZSBkaXZpZGVkLCBhbmQgaWYgZXZlcnkgb25lIG9mIHlvdSBoYWQKICAgICAgIHR3byBmZWV0IG9mIHN0YW5kaW5nIGdyb3VuZCBhbGxvdHRlZCB0byBoaW0gaW4gaXQsIHN0aWxsIHlvdSB3b3VsZCBwcmVmZXIgdG8gZW5qb3kgdGhlIHdob2xlCiAgICAgICBvZiBpdCB0b2dldGhlciwgdGhhbiBmb3IgZWFjaCBpbmRpdmlkdWFsIHRvIGhhdmUgYSBzbWFsbCBwb3J0aW9uIGZvciBoaXMgb3duIHByaXZhdGUKICAgICAgIHByb3BlcnR5LiBXaGVyZWZvcmUsIGV2ZW4gaWYgc29tZSBwb3J0aW9uIG9mIHRoZXNlIGxhbmRzIHdlcmUgdG8gY29tZSB0byBldmVyeSBpbmRpdmlkdWFsCiAgICAgICBhbW9uZyB5b3Uu4oCUd2hpY2ggaXMgbm93IGluZGVlZCBoZWxkIG91dCB0byB5b3UgYXMgYSBsdXJlLCBidXQgaXMgaW4gcmVhbGl0eQogICAgICAgZGVzdGluZWQgZm9yIG90aGVycyzigJRzdGlsbCB0aGV5IHdvdWxkIGJlIGEgbW9yZSBob25vdXJhYmxlIHBvc3Nlc3Npb24gdG8geW91IHdoZW4KICAgICAgIHBvc3Nlc3NlZCBieSB0aGUgd2hvbGUgYm9keSwgdGhhbiBpZiBkaXN0cmlidXRlZCBpbiBiaXRzIHRvIGVhY2ggY2l0aXplbi4gQnV0IG5vdyB3aGVuIHlvdQogICAgICAgYXJlIG5vdCB0byBoYXZlIGFueSBzaGFyZSBpbiB0aGVtLCBidXQgd2hlbiB0aGV5IGFyZSBiZWluZyBwcmVwYXJlZCBmb3Igb3RoZXJzIGFuZCB0YWtlbiBmcm9tCiAgICAgICB5b3UsIHdpbGwgeW91IG5vdCBtb3N0IHZpZ29yb3VzbHkgcmVzaXN0IHRoaXMgbGF3IGFzIHlvdSB3b3VsZCBhbiBhcm1lZCBlbmVteSwgZmlnaHRpbmcgaW4KICAgICAgIGRlZmVuY2Ugb2YgeW91ciBsYW5kcy4gSGUgYWRkcyB0aGUgU3RlbGxhdGUgcGxhaW4gdG8gdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIGluIHRoZSB0d28KICAgICAgIHRvZ2V0aGVyIGhlIGFsbG90cyB0d2VsdmUgYWNyZXMgdG8gZWFjaCBzZXR0bGVyLiBBcyBpZiB0aGUgZGlmZmVyZW5jZSB3YXMgc2xpZ2h0IGJldHdlZW4gdGhlCiAgICAgICBTdGVsbGF0ZSBhbmQgQ2FtcGFuaWFuIGRpc3RyaWN0cyEgPG1pbGVzdG9uZSBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdyBhIG11bHRpdHVkZSBpcwogICAgICAgc291Z2h0IG91dCwgYnkgd2hpY2ggdGhvc2UgdG93bnMgYXJlIHRvIGJlIHBlb3BsZWQuIEZvciBJIGhhdmUgc2FpZCBiZWZvcmUgdGhhdCBsZWF2ZSBpcwogICAgICAgZ2l2ZW4gYnkgdGhlIGxhdyBmb3IgdGhlbSB0byBvY2N1cHkgd2l0aCB0aGVpciBzZXR0bGVycyB3aGF0ZXZlciBtdW5pY2lwYWxpdGllcyBhbmQgd2hhdGV2ZXIKICAgICAgIG9sZCBjb2xvbmllcyB0aGV5IGNob29zZS4gVGhleSB3aWxsIGZpbGwgdGhlIG11bmljaXBhbGl0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBrZXk9InBlcnNldXMsQ2FsZXMiPkNhbGVzPC9wbGFjZU5hbWU+OyB0aGV5IHdpbGwgb3ZlcndoZWxtIFRlYW51bTsgdGhleSB3aWxsIGV4dGVuZCBhIGNoYWluIG9mIGdhcnJpc29ucwogICAgICAgdGhyb3VnaCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0ZWxsYSIga2V5PSJwZXJzZXVzLEF0ZWxsYSI+QXRlbGxhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDdW1hZSIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDc0IiBrZXk9InRnbiw3MDA0NDc0Ij5OYXBsZXM8L3BsYWNlTmFtZT4sCiAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQb21wZWlpIiBrZXk9InBlcnNldXMsUG9tcGVpaSI+UG9tcGVpaTwvcGxhY2VOYW1lPiwgYW5kIE51Y2VyaWE7IGFuZCB0aGUgd2hvbGUgb2YKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB1dGVvbGkiIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdCBwcmVzZW50IGEgZnJlZSBjaXR5LCBpbgogICAgICAgdGhlIGZ1bGwgZW5qb3ltZW50IG9mIGl0cyBhbmNpZW50IHJpZ2h0cyBhbmQgbGliZXJ0aWVzLCB0aGV5IHdpbGwgb2NjdXB5IHdpdGggYSBuZXcgcGVvcGxlLAogICAgICAgYW5kIHdpdGggYSBmb3JlaWduIGJvZHkgb2YgbWVuLiA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.31.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSB0aGluaywgaW5kZWVkLCB0aGF0IGlmIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiB3ZXJlIHRvIGJlIGRpdmlkZWQsIGFuZCBpZiBldmVyeSBvbmUgb2YgeW91IGhhZAogICAgICAgdHdvIGZlZXQgb2Ygc3RhbmRpbmcgZ3JvdW5kIGFsbG90dGVkIHRvIGhpbSBpbiBpdCwgc3RpbGwgeW91IHdvdWxkIHByZWZlciB0byBlbmpveSB0aGUgd2hvbGUKICAgICAgIG9mIGl0IHRvZ2V0aGVyLCB0aGFuIGZvciBlYWNoIGluZGl2aWR1YWwgdG8gaGF2ZSBhIHNtYWxsIHBvcnRpb24gZm9yIGhpcyBvd24gcHJpdmF0ZQogICAgICAgcHJvcGVydHkuIFdoZXJlZm9yZSwgZXZlbiBpZiBzb21lIHBvcnRpb24gb2YgdGhlc2UgbGFuZHMgd2VyZSB0byBjb21lIHRvIGV2ZXJ5IGluZGl2aWR1YWwKICAgICAgIGFtb25nIHlvdS7igJR3aGljaCBpcyBub3cgaW5kZWVkIGhlbGQgb3V0IHRvIHlvdSBhcyBhIGx1cmUsIGJ1dCBpcyBpbiByZWFsaXR5CiAgICAgICBkZXN0aW5lZCBmb3Igb3RoZXJzLOKAlHN0aWxsIHRoZXkgd291bGQgYmUgYSBtb3JlIGhvbm91cmFibGUgcG9zc2Vzc2lvbiB0byB5b3Ugd2hlbgogICAgICAgcG9zc2Vzc2VkIGJ5IHRoZSB3aG9sZSBib2R5LCB0aGFuIGlmIGRpc3RyaWJ1dGVkIGluIGJpdHMgdG8gZWFjaCBjaXRpemVuLiBCdXQgbm93IHdoZW4geW91CiAgICAgICBhcmUgbm90IHRvIGhhdmUgYW55IHNoYXJlIGluIHRoZW0sIGJ1dCB3aGVuIHRoZXkgYXJlIGJlaW5nIHByZXBhcmVkIGZvciBvdGhlcnMgYW5kIHRha2VuIGZyb20KICAgICAgIHlvdSwgd2lsbCB5b3Ugbm90IG1vc3Qgdmlnb3JvdXNseSByZXNpc3QgdGhpcyBsYXcgYXMgeW91IHdvdWxkIGFuIGFybWVkIGVuZW15LCBmaWdodGluZyBpbgogICAgICAgZGVmZW5jZSBvZiB5b3VyIGxhbmRzLiBIZSBhZGRzIHRoZSBTdGVsbGF0ZSBwbGFpbiB0byB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCBhbmQgaW4gdGhlIHR3bwogICAgICAgdG9nZXRoZXIgaGUgYWxsb3RzIHR3ZWx2ZSBhY3JlcyB0byBlYWNoIHNldHRsZXIuIEFzIGlmIHRoZSBkaWZmZXJlbmNlIHdhcyBzbGlnaHQgYmV0d2VlbiB0aGUKICAgICAgIFN0ZWxsYXRlIGFuZCBDYW1wYW5pYW4gZGlzdHJpY3RzISA8L3RyYW5zbGF0aW9uPg=="
translation['2.31.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdyBhIG11bHRpdHVkZSBpcwogICAgICAgc291Z2h0IG91dCwgYnkgd2hpY2ggdGhvc2UgdG93bnMgYXJlIHRvIGJlIHBlb3BsZWQuIEZvciBJIGhhdmUgc2FpZCBiZWZvcmUgdGhhdCBsZWF2ZSBpcwogICAgICAgZ2l2ZW4gYnkgdGhlIGxhdyBmb3IgdGhlbSB0byBvY2N1cHkgd2l0aCB0aGVpciBzZXR0bGVycyB3aGF0ZXZlciBtdW5pY2lwYWxpdGllcyBhbmQgd2hhdGV2ZXIKICAgICAgIG9sZCBjb2xvbmllcyB0aGV5IGNob29zZS4gVGhleSB3aWxsIGZpbGwgdGhlIG11bmljaXBhbGl0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYWxlcyI+Q2FsZXM8L3BsYWNlTmFtZT47IHRoZXkgd2lsbCBvdmVyd2hlbG0gVGVhbnVtOyB0aGV5IHdpbGwgZXh0ZW5kIGEgY2hhaW4gb2YgZ2Fycmlzb25zCiAgICAgICB0aHJvdWdoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRlbGxhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGVsbGEiPkF0ZWxsYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NzQiPk5hcGxlczwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBvbXBlaWkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBvbXBlaWkiPlBvbXBlaWk8L3BsYWNlTmFtZT4sIGFuZCBOdWNlcmlhOyBhbmQgdGhlIHdob2xlIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdCBwcmVzZW50IGEgZnJlZSBjaXR5LCBpbgogICAgICAgdGhlIGZ1bGwgZW5qb3ltZW50IG9mIGl0cyBhbmNpZW50IHJpZ2h0cyBhbmQgbGliZXJ0aWVzLCB0aGV5IHdpbGwgb2NjdXB5IHdpdGggYSBuZXcgcGVvcGxlLAogICAgICAgYW5kIHdpdGggYSBmb3JlaWduIGJvZHkgb2YgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW4gdGhhdCBzdGFuZGFyZCBvZiBhIENhbXBhbmlhbiBjb2xvbnksIGdyZWF0bHkgdG8gYmUgZHJlYWRlZCBieSB0aGlzIGVtcGlyZSwgd2lsbCBiZQogICAgICAgZXJlY3RlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gYnkgdGhlIGRlY2Vtdmlycy4gVGhlbiB0aGF0IG90aGVyCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aGljaCBoYXMgYmVlbiBoZWFyZCBvZiBiZWZvcmUsIHdpbGwgYmUKICAgICAgIHNvdWdodCBpbiBvcHBvc2l0aW9uIHRvIHRoaXMgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB0aGUgY29tbW9uCiAgICAgICBjb3VudHJ5IG9mIGFsbCBvZiB1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijg3IiB1bml0PSJzZWN0aW9uIiAvPiBJbXBpb3VzIG1lbiBhcmUgZW5kZWF2b3VyaW5nIHRvCiAgICAgICB0cmFuc2ZlciBvdXIgcmVwdWJsaWMgdG8gdGhhdCB0b3duIGluIHdoaWNoIG91ciBhbmNlc3RvcnMgZGVjaWRlZCB0aGF0IHRoZXJlIHNob3VsZCBiZSBubwogICAgICAgcmVwdWJsaWMgYXQgYWxsLCB3aGVuIHRoZXkgcmVzb2x2ZWQgdGhhdCB0aGVyZSB3ZXJlIGJ1dCB0aHJlZSBjaXRpZXMgaW4gdGhlIHdob2xlIGVhcnRoLAogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCB3aGljaCBjb3VsZAogICAgICAgYXNwaXJlIHRvIHRoZSBwb3dlciBhbmQgbmFtZSBvZiB0aGUgaW1wZXJpYWwgY2l0eS4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXJ0aGFnZSIga2V5PSJwZXJzZXVzLENhcnRoYWdlIj5DYXJ0aGFnZTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBkZXN0cm95ZWQsIGJlY2F1c2UsIGJvdGggZnJvbSBpdHMgdmFzdCBwb3B1bGF0aW9uLCBhbmQgZnJvbQogICAgICAgdGhlIG5hdHVyYWwgYWR2YW50YWdlcyBvZiBpdHMgc2l0dWF0aW9uLCBiZWluZyBzdXJyb3VuZGVkIHdpdGggaGFyYm91cnMsIGFuZCBmb3J0aWZpZWQgd2l0aAogICAgICAgd2FsbHMsIGl0IGFwcGVhcmVkIHRvIHByb2plY3Qgb3V0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4sIGFuZCB0bwogICAgICAgdGhyZWF0ZW4gdGhlIG1vc3QgcHJvZHVjdGl2ZSBpc2xhbmRzIG9mIHRoZSBSb21hbiBwZW9wbGUuIE9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gdGhlcmUgaXMgc2NhcmNlbHkgYSB2ZXN0aWdlIGxlZnQuIEZvciBpdCB3YXMgc2l0dWF0ZWQgb24gdGhlIHN0cmFpdHMKICAgICAgIGFuZCBpbiB0aGUgdmVyeSBqYXdzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGluIHN1Y2ggYSB3YXkgdGhhdAogICAgICAgYnkgbGFuZCBpdCBoZWxkIHRoZSBrZXlzIG9mIG1hbnkgY291bnRyaWVzLCBhbmQgdGhhdCBpdCBhbG1vc3QgY29ubmVjdGVkIHR3byBzZWFzLCBlcXVhbGx5CiAgICAgICBkZXNpcmFibGUgZm9yIHB1cnBvc2VzIG9mIG5hdmlnYXRpb24sIHdoaWNoIHdlcmUgc2VwYXJhdGVkIGJ5IHRoZSBzbWFsbGVzdCBwb3NzaWJsZSBkaXN0YW5jZS4KICAgICAgIFRoZXNlIHRvd25zLCB0aG91Z2ggdGhleSB3ZXJlIG91dCBvZiB0aGUgc2lnaHQgb2YgdGhlIGVtcGlyZSwgb3VyIGFuY2VzdG9ycyBub3Qgb25seSBjcnVzaGVkLAogICAgICAgYnV0LCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIHV0dGVybHkgZGVzdHJveWVkLCB0aGF0IHRoZXkgbWlnaHQgbmV2ZXIgYmUgYWJsZSB0byByZWNvdmVyIGFuZAogICAgICAgcmlzZSBhZ2FpbiBhbmQgZmxvdXJpc2guIDxtaWxlc3RvbmUgbj0iODgiIHVuaXQ9InNlY3Rpb24iIC8+IENvbmNlcm5pbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0aGV5IGRlbGliZXJhdGVkIG11Y2ggYW5kIGxvbmcuIFB1YmxpYyBkb2N1bWVudHMgYXJlCiAgICAgICBleHRhbnQsIE8gUm9tYW5zOyBtYW55IHJlc29sdXRpb25zIG9mIHRoZSBzZW5hdGUgYXJlIGV4dGFudC4gVGhvc2Ugd2lzZSBtZW4gZGVjaWRlZCB0aGF0LCBpZgogICAgICAgdGhleSB0b29rIGF3YXkgZnJvbSB0aGUgQ2FtcGFuaWFucyB0aGVpciBsYW5kcywgdGhlaXIgbWFnaXN0cmF0ZXMsIHRoZWlyIHNlbmF0ZSwgYW5kIHRoZQogICAgICAgcHVibGljIGNvdW5jaWwgb2YgdGhhdCBjaXR5LCB0aGV5IHdvdWxkIGxlYXZlIG5vIGltYWdlIHdoYXRldmVyIG9mIHRoZSByZXB1YmxpYzsgdGhlcmUgd291bGQKICAgICAgIGJlIG5vIHJlYXNvbiB3aGF0ZXZlciBmb3IgdGhlaXIgZmVhcmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LgogICAgICAgVGhlcmVmb3JlIHlvdSB3aWxsIGZpbmQgdGhpcyB3cml0dGVuIGluIGFuY2llbnQgcmVjb3JkcywgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBjaXR5IHdoaWNoCiAgICAgICBtaWdodCBiZSBhYmxlIHRvIHN1cHBseSB0aGUgbWVhbnMgZm9yIHRoZSBjdWx0aXZhdGlvbiBvZiB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgYSBwbGFjZSBmb3IgY29sbGVjdGluZyB0aGUgY3JvcHMgaW4sIGFuZCBzdG9yaW5nIHRoZW0sIGluIG9yZGVyIHRoYXQgdGhlIGZhcm1lcnMsCiAgICAgICB3aGVuIHdlYXJpZWQgd2l0aCB0aGUgY3VsdGl2YXRpb24gb2YgdGhlIGxhbmRzLCBtaWdodCBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBob21lcyBhZmZvcmRlZAogICAgICAgdGhlbSBieSB0aGUgY2l0eTsgYW5kIHRoYXQgb24gdGhhdCBhY2NvdW50IHRoZSBidWlsZGluZ3Mgb2YgdGhlIGNpdHkgd2VyZSBub3QgZGVzdHJveWVkLgogICAgICAgIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBieSB0aGUgZGVjZW12aXJzLiBUaGVuIHRoYXQgb3RoZXIKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdoaWNoIGhhcyBiZWVuIGhlYXJkIG9mIGJlZm9yZSwgd2lsbCBiZQogICAgICAgc291Z2h0IGluIG9wcG9zaXRpb24gdG8gdGhpcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHRoZSBjb21tb24KICAgICAgIGNvdW50cnkgb2YgYWxsIG9mIHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.32.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz4gSW1waW91cyBtZW4gYXJlIGVuZGVhdm91cmluZyB0bwogICAgICAgdHJhbnNmZXIgb3VyIHJlcHVibGljIHRvIHRoYXQgdG93biBpbiB3aGljaCBvdXIgYW5jZXN0b3JzIGRlY2lkZWQgdGhhdCB0aGVyZSBzaG91bGQgYmUgbm8KICAgICAgIHJlcHVibGljIGF0IGFsbCwgd2hlbiB0aGV5IHJlc29sdmVkIHRoYXQgdGhlcmUgd2VyZSBidXQgdGhyZWUgY2l0aWVzIGluIHRoZSB3aG9sZSBlYXJ0aCwKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgd2hpY2ggY291bGQKICAgICAgIGFzcGlyZSB0byB0aGUgcG93ZXIgYW5kIG5hbWUgb2YgdGhlIGltcGVyaWFsIGNpdHkuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcnRoYWdlIj5DYXJ0aGFnZTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBkZXN0cm95ZWQsIGJlY2F1c2UsIGJvdGggZnJvbSBpdHMgdmFzdCBwb3B1bGF0aW9uLCBhbmQgZnJvbQogICAgICAgdGhlIG5hdHVyYWwgYWR2YW50YWdlcyBvZiBpdHMgc2l0dWF0aW9uLCBiZWluZyBzdXJyb3VuZGVkIHdpdGggaGFyYm91cnMsIGFuZCBmb3J0aWZpZWQgd2l0aAogICAgICAgd2FsbHMsIGl0IGFwcGVhcmVkIHRvIHByb2plY3Qgb3V0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiwgYW5kIHRvCiAgICAgICB0aHJlYXRlbiB0aGUgbW9zdCBwcm9kdWN0aXZlIGlzbGFuZHMgb2YgdGhlIFJvbWFuIHBlb3BsZS4gT2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+IHRoZXJlIGlzIHNjYXJjZWx5IGEgdmVzdGlnZSBsZWZ0LiBGb3IgaXQgd2FzIHNpdHVhdGVkIG9uIHRoZSBzdHJhaXRzCiAgICAgICBhbmQgaW4gdGhlIHZlcnkgamF3cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGluIHN1Y2ggYSB3YXkgdGhhdAogICAgICAgYnkgbGFuZCBpdCBoZWxkIHRoZSBrZXlzIG9mIG1hbnkgY291bnRyaWVzLCBhbmQgdGhhdCBpdCBhbG1vc3QgY29ubmVjdGVkIHR3byBzZWFzLCBlcXVhbGx5CiAgICAgICBkZXNpcmFibGUgZm9yIHB1cnBvc2VzIG9mIG5hdmlnYXRpb24sIHdoaWNoIHdlcmUgc2VwYXJhdGVkIGJ5IHRoZSBzbWFsbGVzdCBwb3NzaWJsZSBkaXN0YW5jZS4KICAgICAgIFRoZXNlIHRvd25zLCB0aG91Z2ggdGhleSB3ZXJlIG91dCBvZiB0aGUgc2lnaHQgb2YgdGhlIGVtcGlyZSwgb3VyIGFuY2VzdG9ycyBub3Qgb25seSBjcnVzaGVkLAogICAgICAgYnV0LCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIHV0dGVybHkgZGVzdHJveWVkLCB0aGF0IHRoZXkgbWlnaHQgbmV2ZXIgYmUgYWJsZSB0byByZWNvdmVyIGFuZAogICAgICAgcmlzZSBhZ2FpbiBhbmQgZmxvdXJpc2guIDwvdHJhbnNsYXRpb24+"
translation['2.32.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz4gQ29uY2VybmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gdGhleSBkZWxpYmVyYXRlZCBtdWNoIGFuZCBsb25nLiBQdWJsaWMgZG9jdW1lbnRzIGFyZQogICAgICAgZXh0YW50LCBPIFJvbWFuczsgbWFueSByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlIGFyZSBleHRhbnQuIFRob3NlIHdpc2UgbWVuIGRlY2lkZWQgdGhhdCwgaWYKICAgICAgIHRoZXkgdG9vayBhd2F5IGZyb20gdGhlIENhbXBhbmlhbnMgdGhlaXIgbGFuZHMsIHRoZWlyIG1hZ2lzdHJhdGVzLCB0aGVpciBzZW5hdGUsIGFuZCB0aGUKICAgICAgIHB1YmxpYyBjb3VuY2lsIG9mIHRoYXQgY2l0eSwgdGhleSB3b3VsZCBsZWF2ZSBubyBpbWFnZSB3aGF0ZXZlciBvZiB0aGUgcmVwdWJsaWM7IHRoZXJlIHdvdWxkCiAgICAgICBiZSBubyByZWFzb24gd2hhdGV2ZXIgZm9yIHRoZWlyIGZlYXJpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LgogICAgICAgVGhlcmVmb3JlIHlvdSB3aWxsIGZpbmQgdGhpcyB3cml0dGVuIGluIGFuY2llbnQgcmVjb3JkcywgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBjaXR5IHdoaWNoCiAgICAgICBtaWdodCBiZSBhYmxlIHRvIHN1cHBseSB0aGUgbWVhbnMgZm9yIHRoZSBjdWx0aXZhdGlvbiBvZiB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgYSBwbGFjZSBmb3IgY29sbGVjdGluZyB0aGUgY3JvcHMgaW4sIGFuZCBzdG9yaW5nIHRoZW0sIGluIG9yZGVyIHRoYXQgdGhlIGZhcm1lcnMsCiAgICAgICB3aGVuIHdlYXJpZWQgd2l0aCB0aGUgY3VsdGl2YXRpb24gb2YgdGhlIGxhbmRzLCBtaWdodCBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBob21lcyBhZmZvcmRlZAogICAgICAgdGhlbSBieSB0aGUgY2l0eTsgYW5kIHRoYXQgb24gdGhhdCBhY2NvdW50IHRoZSBidWlsZGluZ3Mgb2YgdGhlIGNpdHkgd2VyZSBub3QgZGVzdHJveWVkLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.33.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNlZSwgbm93LCBob3cgd2lkZSBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY291bnNlbHMgb2Ygb3VyIGFuY2VzdG9ycyBhbmQgdGhlIGluc2FuZQogICAgICAgcHJvamVjdHMgb2YgdGhlc2UgbWVuLiBUaGV5IGNob3NlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0byBiZSBhCiAgICAgICByZWZ1Z2UgZm9yIG91ciBmYXJtZXJzLOKAlGEgbWFya2V0IGZvciB0aGUgY291bnRyeSBwZW9wbGUs4oCUYSBiYXJuIGFuZAogICAgICAgZ3JhbmFyeSBmb3IgdGhlIENhbXBhbmlhbiBkaXN0cmljdC4gVGhlc2UgbWVuLCBoYXZpbmcgZXhwZWxsZWQgdGhlIGZhcm1lcnMsIGhhdmUgd2FzdGVkIGFuZAogICAgICAgc3F1YW5kZXJlZCB5b3VyIHJldmVudWVzLCBhcmUgcmFpc2luZyB0aGlzIHNhbWUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGludG8gdGhlIHNlYXQgb2YgYSBuZXcgcmVwdWJsaWMsIGFyZSBwcmVwYXJpbmcgYSB2YXN0IG1hc3MgdG8gYmUgYW4gZW5lbXkKICAgICAgIHRvIHRoZSBvbGQgcmVwdWJsaWMuIEJ1dCBpZiBvdXIgYW5jZXN0b3JzIGhhZCB0aG91Z2h0IHRoYXQgYW55IG9uZSBpbiBzdWNoIGFuIGlsbHVzdHJpb3VzCiAgICAgICBlbXBpcmUsIGluIHN1Y2ggYW4gYWRtaXJhYmxlIGNvbnN0aXR1dGlvbiBhcyB0aGF0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHdvdWxkIGhhdmUgYmVlbiBsaWtlCiAgICAgICBNYXJjdXMgQnJ1dHVzIG9yIFB1YmxpdXMgUnVsbHVzLCAoZm9yIHRoZXNlIGFyZSB0aGUgb25seSB0d28gbWVuIHdob20gd2UgaGF2ZSBoaXRoZXJ0byBzZWVuLAogICAgICAgd2hvIGhhdmUgd2lzaGVkIHRvIHRyYW5zZmVyIGFsbCB0aGlzIHJlcHVibGljIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwpIHRoZXkgd291bGQgbm90LCBpbiB0cnV0aCwgaGF2ZSBsZWZ0IGV2ZW4gdGhlIG5hbWUgb2YgdGhhdCBjaXR5IGluCiAgICAgICBleGlzdGVuY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgdGhvdWdodCwgdGhhdCBpbiB0aGUgY2FzZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIGV2ZW4gaWYgdGhleSBoYWQgdGFrZW4gYXdheSB0aGVpciBzZW5hdGVzIGFuZCB0aGVpciBtYWdpc3RyYXRlcywgYW5kCiAgICAgICBkZXByaXZlZCB0aGUgY2l0aXplbnMgb2YgdGhlIGxhbmRzLCBzdGlsbCBtZW4gd291bGQgbm90IGJlIHdhbnRpbmcgd2hvIHdvdWxkIHJlc3RvcmUgdGhvc2UKICAgICAgIGNpdGllcywgYW5kIGNoYW5nZSB0aGUgZXhpc3Rpbmcgc3RhdGUgb2YgdGhpbmdzIGluIHRoZW0gYmVmb3JlIHdlIGNvdWxkIGhlYXIgb2YgaXQuIEJ1dCBoZXJlLAogICAgICAgdW5kZXIgdGhlIHZlcnkgZXllcyBvZiB0aGUgc2VuYXRlIGFuZCBSb21hbiBwZW9wbGUsIHRoZXkgdGhvdWdodCB0aGF0IG5vdGhpbmcgY291bGQgdGFrZQogICAgICAgcGxhY2Ugd2hpY2ggbWlnaHQgbm90IGJlIHB1dCBkb3duIGFuZCBleHRpbmd1aXNoZWQgYmVmb3JlIGl0IGhhZCBnb3QgdG8gYW55IGhlYWQsIG9yIGhhZAogICAgICAgYXNzdW1lZCBhbnkgZGVmaW5pdGUgc2hhcGUuIE5vciBkaWQgdGhhdCBtYXR0ZXIgZGVjZWl2ZSB0aG9zZSBtZW4sIGVuZHVlZCBhcyB0aGV5IHdlcmUgd2l0aAogICAgICAgZGl2aW5lIHdpc2RvbSBhbmQgcHJ1ZGVuY2UuIEZvciBhZnRlciB0aGUgY29uc3Vsc2hpcCBvZiBRdWludHVzIEZ1bHZpdXMgYW5kIFF1aW50dXMgRmFiaXVzLAogICAgICAgYnkgd2hvbSwgd2hlbiB0aGV5IHdlcmUgY29uc3VscywgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3YXMKICAgICAgIGRlZmVhdGVkIGFuZCB0YWtlbiwgSSB3aWxsIG5vdCBzYXkgdGhlcmUgaGFzIGJlZW4gbm90aGluZyBkb25lLCBidXQgbm90aGluZyBoYXMgYmVlbiBldmVuCiAgICAgICBpbWFnaW5lZCBpbiB0aGF0IGNpdHkgYWdhaW5zdCB0aGlzIHJlcHVibGljLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0byBiZSBhCiAgICAgICByZWZ1Z2UgZm9yIG91ciBmYXJtZXJzLOKAlGEgbWFya2V0IGZvciB0aGUgY291bnRyeSBwZW9wbGUs4oCUYSBiYXJuIGFuZAogICAgICAgZ3JhbmFyeSBmb3IgdGhlIENhbXBhbmlhbiBkaXN0cmljdC4gVGhlc2UgbWVuLCBoYXZpbmcgZXhwZWxsZWQgdGhlIGZhcm1lcnMsIGhhdmUgd2FzdGVkIGFuZAogICAgICAgc3F1YW5kZXJlZCB5b3VyIHJldmVudWVzLCBhcmUgcmFpc2luZyB0aGlzIHNhbWUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGludG8gdGhlIHNlYXQgb2YgYSBuZXcgcmVwdWJsaWMsIGFyZSBwcmVwYXJpbmcgYSB2YXN0IG1hc3MgdG8gYmUgYW4gZW5lbXkKICAgICAgIHRvIHRoZSBvbGQgcmVwdWJsaWMuIEJ1dCBpZiBvdXIgYW5jZXN0b3JzIGhhZCB0aG91Z2h0IHRoYXQgYW55IG9uZSBpbiBzdWNoIGFuIGlsbHVzdHJpb3VzCiAgICAgICBlbXBpcmUsIGluIHN1Y2ggYW4gYWRtaXJhYmxlIGNvbnN0aXR1dGlvbiBhcyB0aGF0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHdvdWxkIGhhdmUgYmVlbiBsaWtlCiAgICAgICBNYXJjdXMgQnJ1dHVzIG9yIFB1YmxpdXMgUnVsbHVzLCAoZm9yIHRoZXNlIGFyZSB0aGUgb25seSB0d28gbWVuIHdob20gd2UgaGF2ZSBoaXRoZXJ0byBzZWVuLAogICAgICAgd2hvIGhhdmUgd2lzaGVkIHRvIHRyYW5zZmVyIGFsbCB0aGlzIHJlcHVibGljIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwpIHRoZXkgd291bGQgbm90LCBpbiB0cnV0aCwgaGF2ZSBsZWZ0IGV2ZW4gdGhlIG5hbWUgb2YgdGhhdCBjaXR5IGluCiAgICAgICBleGlzdGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.33.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgdGhvdWdodCwgdGhhdCBpbiB0aGUgY2FzZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXJ0aGFnZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FydGhhZ2UiPkNhcnRoYWdlPC9wbGFjZU5hbWU+LCBldmVuIGlmIHRoZXkgaGFkIHRha2VuIGF3YXkgdGhlaXIgc2VuYXRlcyBhbmQgdGhlaXIgbWFnaXN0cmF0ZXMsIGFuZAogICAgICAgZGVwcml2ZWQgdGhlIGNpdGl6ZW5zIG9mIHRoZSBsYW5kcywgc3RpbGwgbWVuIHdvdWxkIG5vdCBiZSB3YW50aW5nIHdobyB3b3VsZCByZXN0b3JlIHRob3NlCiAgICAgICBjaXRpZXMsIGFuZCBjaGFuZ2UgdGhlIGV4aXN0aW5nIHN0YXRlIG9mIHRoaW5ncyBpbiB0aGVtIGJlZm9yZSB3ZSBjb3VsZCBoZWFyIG9mIGl0LiBCdXQgaGVyZSwKICAgICAgIHVuZGVyIHRoZSB2ZXJ5IGV5ZXMgb2YgdGhlIHNlbmF0ZSBhbmQgUm9tYW4gcGVvcGxlLCB0aGV5IHRob3VnaHQgdGhhdCBub3RoaW5nIGNvdWxkIHRha2UKICAgICAgIHBsYWNlIHdoaWNoIG1pZ2h0IG5vdCBiZSBwdXQgZG93biBhbmQgZXh0aW5ndWlzaGVkIGJlZm9yZSBpdCBoYWQgZ290IHRvIGFueSBoZWFkLCBvciBoYWQKICAgICAgIGFzc3VtZWQgYW55IGRlZmluaXRlIHNoYXBlLiBOb3IgZGlkIHRoYXQgbWF0dGVyIGRlY2VpdmUgdGhvc2UgbWVuLCBlbmR1ZWQgYXMgdGhleSB3ZXJlIHdpdGgKICAgICAgIGRpdmluZSB3aXNkb20gYW5kIHBydWRlbmNlLiBGb3IgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgUXVpbnR1cyBGdWx2aXVzIGFuZCBRdWludHVzIEZhYml1cywKICAgICAgIGJ5IHdob20sIHdoZW4gdGhleSB3ZXJlIGNvbnN1bHMsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3YXMKICAgICAgIGRlZmVhdGVkIGFuZCB0YWtlbiwgSSB3aWxsIG5vdCBzYXkgdGhlcmUgaGFzIGJlZW4gbm90aGluZyBkb25lLCBidXQgbm90aGluZyBoYXMgYmVlbiBldmVuCiAgICAgICBpbWFnaW5lZCBpbiB0aGF0IGNpdHkgYWdhaW5zdCB0aGlzIHJlcHVibGljLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPk1hbnkgd2FycyBoYXZlIGJlZW4gd2FnZWQgc2luY2UgdGhhdCB0aW1lIHdpdGgga2luZ3Ms4oCUd2l0aCBQaGlsaXAsIGFuZCBBbnRpb2NodXMsCiAgICAgICBhbmQgUGVyc2VzLCBhbmQgUHNldWRvcGhpbGlwcHVzLCBhbmQgQXJpc3RvbmljdXMsIGFuZCBNaXRocmlkYXRlcywgYW5kIG90aGVycy4gTWFueSB0ZXJyaWJsZQogICAgICAgd2FycyBoYXZlIGV4aXN0ZWQgYmVzaWRlLeKAlHRoZSBDYXJ0aGFnaW5pYW4sIHRoZSBDb3JpbnRoaWFuLCBhbmQgdGhlIE51bWFudGlhbiB3YXJzLgogICAgICAgVGhlcmUgaGF2ZSBiZWVuIGFsc28gbWFueSBkb21lc3RpYyBzZWRpdGlvbnMsIHdoaWNoIEkgcGFzcyBvdmVyLiBUaGVyZSBoYXZlIGJlZW4gd2FycyB3aXRoCiAgICAgICBvdXIgYWxsaWVzLOKAlHRoZSBGcmVnZWxsYW4gd2FyLCB0aGUgTWFyc2ljIHdhcjsgaW4gYWxsIHdoaWNoIGRvbWVzdGljIGFuZCBmb3JlaWduCiAgICAgICB3YXJzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYXMgbm90IG9ubHkgbm90IGJlZW4gYW55IGhpbmRyYW5jZSB0bwogICAgICAgdXMsIGJ1dCBoYXMgYWZmb3JkZWQgdXMgbW9zdCBzZWFzb25hYmxlIGFzc2lzdGFuY2UsIGluIHByb3ZpZGluZyB0aGUgbWVhbnMgb2Ygd2FyLCBpbgogICAgICAgZXF1aXBwaW5nIG91ciBhcm1pZXMsIGFuZCByZWNlaXZpbmcgdGhlbSBpbiB0aGVpciBob3VzZXMgYW5kIGhvbWVzLiBUaGVyZSB3ZXJlIG5vIG1lbiBpbiB0aGUKICAgICAgIGNpdHksIHdobywgYnkgZXZpbC1kaXNwb3NlZCBhc3NlbWJsaWVzLCBieSB0dXJidWxlbnQgcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSwgb3IgYnkgdW5qdXN0CiAgICAgICBleGVydGlvbnMgb2YgYXV0aG9yaXR5LCB0aHJldyB0aGUgcmVwdWJsaWMgaW50byBjb25mdXNpb24sIGFuZCBzb3VnaHQgcHJldGV4dHMgZm9yCiAgICAgICByZXZvbHV0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOTEiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBubyBvbmUgaGFkIGFueSBwb3dlciBvZiBzdW1tb25pbmcgYW4KICAgICAgIGFzc2VtYmx5LCBvciBvZiBjb252ZW5pbmcgYW55IHB1YmxpYyBjb3VuY2lsLiBNZW4gd2VyZSBub3QgY2FycmllZCBhd2F5IGJ5IGFueSBkZXNpcmUgZm9yCiAgICAgICByZW5vd24sIGJlY2F1c2Ugd2hlcmUgdGhlcmUgYXJlIG5vIGhvbm91cnMgcHVibGljbHkgY29uZmVycmVkLCB0aGVyZSB0aGVyZSBjYW4gYmUgbm8gY292ZXRvdXMKICAgICAgIGRlc2lyZSBvZiByZXB1dGF0aW9uLiBUaGV5IHdlcmUgbm90IHF1YXJyZWxpbmcgd2l0aCBvbmUgYW5vdGhlciBvdXQgb2Ygcml2YWxyeSBvciBvdXQgb2YKICAgICAgIGFtYml0aW9uOyBmb3IgdGhleSBoYWQgbm90aGluZyBsZWZ0IHRvIHF1YXJyZWwgYWJvdXQs4oCUdGhleSBoYWQgbm90aGluZyB3aGljaCB0aGV5CiAgICAgICBjb3VsZCBzZWVrIGZvciBpbiBvcHBvc2l0aW9uIHRvIG9uZSBhbm90aGVyLOKAlHRoZXkgaGFkIG5vIHJvb20gZm9yIGRpc3NlbnNpb25zLgogICAgICAgVGhlcmVmb3JlLCBpdCB3YXMgaW4gYWNjb3JkYW5jZSB3aXRoIGEgZGVsaWJlcmF0ZSBzeXN0ZW0sIGFuZCB3aXRoIHJlYWwgd2lzZG9tLCB0aGF0IG91cgogICAgICAgYW5jZXN0b3JzIGNoYW5nZWQgdGhlIG5hdHVyYWwgYXJyb2dhbmNlIGFuZCBpbnRvbGVyYWJsZSBmZXJvY2l0eSBvZiB0aGUgQ2FtcGFuaWFucyBpbnRvIGEKICAgICAgIHRob3JvdWdobHkgaW5hY3RpdmUgYW5kIGxhenkgdHJhbnF1aWxsaXR5LiBBbmQgYnkgdGhpcyBtZWFucyB0aGV5IGF2b2lkZWQgdGhlIHJlcHJvYWNoIG9mCiAgICAgICBjcnVlbHR5LCBiZWNhdXNlIHRoZXkgZGlkIG5vdCBkZXN0cm95IGZyb20gb2ZmIHRoZSBmYWNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBhIG1vc3QgYmVhdXRpZnVsIGNpdHk7IGFuZCB0aGV5IDxwYiBuPSIyNTIiIC8+IHByb3ZpZGVkIHdlbGwgZm9yIHRoZQogICAgICAgZnV0dXJlLCBpbiB0aGF0LCBoYXZpbmcgY3V0IG91dCBhbGwgdGhlIHNpbmV3cyBvZiB0aGUgY2l0eSwgdGhleSBsZWZ0IHRoZSBjaXR5IGl0c2VsZgogICAgICAgZW5mZWVibGVkIGFuZCBkaXNhYmxlZC4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjkyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGhhcyBub3Qgb25seSBub3QgYmVlbiBhbnkgaGluZHJhbmNlIHRvCiAgICAgICB1cywgYnV0IGhhcyBhZmZvcmRlZCB1cyBtb3N0IHNlYXNvbmFibGUgYXNzaXN0YW5jZSwgaW4gcHJvdmlkaW5nIHRoZSBtZWFucyBvZiB3YXIsIGluCiAgICAgICBlcXVpcHBpbmcgb3VyIGFybWllcywgYW5kIHJlY2VpdmluZyB0aGVtIGluIHRoZWlyIGhvdXNlcyBhbmQgaG9tZXMuIFRoZXJlIHdlcmUgbm8gbWVuIGluIHRoZQogICAgICAgY2l0eSwgd2hvLCBieSBldmlsLWRpc3Bvc2VkIGFzc2VtYmxpZXMsIGJ5IHR1cmJ1bGVudCByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlLCBvciBieSB1bmp1c3QKICAgICAgIGV4ZXJ0aW9ucyBvZiBhdXRob3JpdHksIHRocmV3IHRoZSByZXB1YmxpYyBpbnRvIGNvbmZ1c2lvbiwgYW5kIHNvdWdodCBwcmV0ZXh0cyBmb3IKICAgICAgIHJldm9sdXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['2.33.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIG5vIG9uZSBoYWQgYW55IHBvd2VyIG9mIHN1bW1vbmluZyBhbgogICAgICAgYXNzZW1ibHksIG9yIG9mIGNvbnZlbmluZyBhbnkgcHVibGljIGNvdW5jaWwuIE1lbiB3ZXJlIG5vdCBjYXJyaWVkIGF3YXkgYnkgYW55IGRlc2lyZSBmb3IKICAgICAgIHJlbm93biwgYmVjYXVzZSB3aGVyZSB0aGVyZSBhcmUgbm8gaG9ub3VycyBwdWJsaWNseSBjb25mZXJyZWQsIHRoZXJlIHRoZXJlIGNhbiBiZSBubyBjb3ZldG91cwogICAgICAgZGVzaXJlIG9mIHJlcHV0YXRpb24uIFRoZXkgd2VyZSBub3QgcXVhcnJlbGluZyB3aXRoIG9uZSBhbm90aGVyIG91dCBvZiByaXZhbHJ5IG9yIG91dCBvZgogICAgICAgYW1iaXRpb247IGZvciB0aGV5IGhhZCBub3RoaW5nIGxlZnQgdG8gcXVhcnJlbCBhYm91dCzigJR0aGV5IGhhZCBub3RoaW5nIHdoaWNoIHRoZXkKICAgICAgIGNvdWxkIHNlZWsgZm9yIGluIG9wcG9zaXRpb24gdG8gb25lIGFub3RoZXIs4oCUdGhleSBoYWQgbm8gcm9vbSBmb3IgZGlzc2Vuc2lvbnMuCiAgICAgICBUaGVyZWZvcmUsIGl0IHdhcyBpbiBhY2NvcmRhbmNlIHdpdGggYSBkZWxpYmVyYXRlIHN5c3RlbSwgYW5kIHdpdGggcmVhbCB3aXNkb20sIHRoYXQgb3VyCiAgICAgICBhbmNlc3RvcnMgY2hhbmdlZCB0aGUgbmF0dXJhbCBhcnJvZ2FuY2UgYW5kIGludG9sZXJhYmxlIGZlcm9jaXR5IG9mIHRoZSBDYW1wYW5pYW5zIGludG8gYQogICAgICAgdGhvcm91Z2hseSBpbmFjdGl2ZSBhbmQgbGF6eSB0cmFucXVpbGxpdHkuIEFuZCBieSB0aGlzIG1lYW5zIHRoZXkgYXZvaWRlZCB0aGUgcmVwcm9hY2ggb2YKICAgICAgIGNydWVsdHksIGJlY2F1c2UgdGhleSBkaWQgbm90IGRlc3Ryb3kgZnJvbSBvZmYgdGhlIGZhY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYSBtb3N0IGJlYXV0aWZ1bCBjaXR5OyBhbmQgdGhleSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTIiIC8+IHByb3ZpZGVkIHdlbGwgZm9yIHRoZQogICAgICAgZnV0dXJlLCBpbiB0aGF0LCBoYXZpbmcgY3V0IG91dCBhbGwgdGhlIHNpbmV3cyBvZiB0aGUgY2l0eSwgdGhleSBsZWZ0IHRoZSBjaXR5IGl0c2VsZgogICAgICAgZW5mZWVibGVkIGFuZCBkaXNhYmxlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.34.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIGRlc2lnbnMgb2Ygb3VyIGFuY2VzdG9ycyBzZWVtZWQsIGFzIEkgaGF2ZSBzYWlkIGJlZm9yZSwgYmxhbWFibGUgaW4gdGhlIGV5ZXMgb2YKICAgICAgIE1hcmN1cyBCcnV0dXMgYW5kIFB1YmxpdXMgUnVsbHVzLiBOb3IsIE8gUHVibGl1cyBSdWxsdXMsIGRvIHRob3NlIG9tZW5zIGFuZCBhdXNwaWNlcwogICAgICAgZW5jb3VudGVyZWQgYnkgTWFyY3VzIEJydXR1cyBkZXRlciB5b3UgZnJvbSBzaW1pbGFyIG1hZG5lc3MuIEZvciBib3RoIGhlIHdobyBsZWQgYSBjb2xvbnkgdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqIiAvPiBhbmQgdGhleSB3aG8gdG9vayB1cG9uIHRoZW1zZWx2ZXMgdGhlIG1hZ2lzdHJhY3kgdGhlcmUsIGFuZCB3aG8gaGFkIGFueQogICAgICAgc2hhcmUgaW4gdGhlIGNvbmR1Y3RpbmcgYSBjb2xvbnkgdG8gdGhhdCBzcG90LCBhbmQgaW4gdGhlIGhvbm91cnMgdG8gYmUgaGFkIHRoZXJlLCBvciBpbiB0aGUKICAgICAgIG9mZmljZXMgdG8gYmUgZW5qb3llZCB0aGVyZSwgaGF2ZSBhbGwgc3VmZmVyZWQgdGhlIG1vc3QgdGVycmlibGUgcHVuaXNobWVudHMgYWxsb3R0ZWQgdG8gdGhlCiAgICAgICB3aWNrZWQuIEFuZCBzaW5jZSBJIGhhdmUgbWFkZSBtZW50aW9uIG9mIEJydXR1cyBhbmQgdGhhdCB0aW1lLCBJIHdpbGwgYWxzbyByZWxhdGUgd2hhdCBJIHNhdwogICAgICAgbXlzZWxmIHdoZW4gSSBoYWQgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4s4oCUd2hlbgogICAgICAgdGhlIGNvbG9ueSBoYWQgYmVlbiBqdXN0IGVzdGFibGlzaGVkIHRoZXJlIGJ5IEx1Y2l1cyBDb25zaWRpdXMgYW5kIFNleHR1cyBTYWx0aXVzIHRoZQogICAgICAgcHJhZXRvcnMsIChhcyB0aGV5IGNhbGxlZCB0aGVtc2VsdmVzLCkgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgaG93IG11Y2ggcHJpZGUgdGhlIHNpdHVhdGlvbgogICAgICAgaXRzZWxmIGluc3BpcmVzIGl0cyBpbmhhYml0YW50cyB3aXRoOyBzbyBncmVhdCB0aGF0IGl0IHdhcyB2ZXJ5IGludGVsbGlnaWJsZSBhbmQgdmlzaWJsZSB3aGVuCiAgICAgICB0aGUgY29sb255IGhhZCBvbmx5IGJlZW4gc2V0dGxlZCB0aGVyZSBhIGZldyBkYXlzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOTMiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpbgogICAgICAgdGhlIGZpcnN0IHBsYWNlLCBhcyBJIHNhaWQsIHRob3VnaCBzaW1pbGFyIG9mZmljZXJzIGluIHRoZSBvdGhlciBjb2xvbmllcyBhcmUgY2FsbGVkCiAgICAgICBkdXVtdmlycywgdGhlc2UgbWVuIGNob3NlIHRvIGNhbGwgdGhlbXNlbHZlcyBwcmFldG9ycy4gQnV0IGlmIHRoZWlyIGZpcnN0IHllYXIgb2Ygb2ZmaWNlCiAgICAgICBpbnNwaXJlZCB0aGVtIHdpdGggc3VjaCBkZXNpcmVzIGFzIHRoYXQsIGRvIG5vdCB5b3Ugc3VwcG9zZSB0aGF0IGluIGEgZmV3IHllYXJzIHRoZXkgd291bGQgYmUKICAgICAgIGxpa2VseSB0byB0YWtlIGEgZmFuY3kgdG8gdGhlIG5hbWUgb2YgY29uc3Vscz8gSW4gdGhlIG5leHQgcGxhY2UsIHRoZXkgd2VyZSBwcmVjZWRlZCBieQogICAgICAgbGljdG9ycywgbm90IHdpdGggc3RhdmVzLCBidXQgd2l0aCB0d28gPGZvcmVpZ24gbGFuZz0ibGEiPmZhY2VzPC9mb3JlaWduPiwganVzdCBhcyBsaWN0b3JzIGdvCiAgICAgICBiZWZvcmUgdGhlIHByYWV0b3JzIGhlcmUuIFRoZSBncmVhdGVyIHZpY3RpbXMgd2VyZSBwbGFjZWQgaW4gdGhlIGZvcnVtLCB3aGljaCwgYWZ0ZXIgdGhleSBoYWQKICAgICAgIGJlZW4gYXBwcm92ZWQgYnkgdGhlIGNvbGxlZ2Ugb2YgcHJpZXN0cywgd2VyZSBzYWNyaWZpY2VkIGF0IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGFuZCB0aGUKICAgICAgIG11c2ljIG9mIGEgZmx1dGUtcGxheWVyLCBieSB0aGUgcHJhZXRvcnMgZnJvbSB0aGVpciB0cmlidW5hbCwgYXMgdGhleSBhcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSB1cyB3aG8gYXJlIGNvbnN1bHMuIEFmdGVyIHRoYXQsIHRoZSBjb25zY3JpcHQgZmF0aGVycwogICAgICAgd2VyZSBzdW1tb25lZC4gQnV0IGFmdGVyIHRoaXMsIGl0IHdhcyBhbG1vc3QgbW9yZSB0aGFuIG9uZSBjb3VsZCBlbmR1cmUsIHRvIHNlZSB0aGUKICAgICAgIGNvdW50ZW5hbmNlIG9mIENvbnNpZGl1cy4gVGhlIG1hbiB3aG9tIHdlIGhhZCBzZWVuIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gc2hyaXZlbGVkIGFuZCB3YXN0ZWQgYXdheSwgaW4gYSBjb250ZW1wdGlibGUgYW5kIGFiamVjdCBjb25kaXRpb24sIHdoZW4gd2UKICAgICAgIHNhdyBoaW0gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3aXRoIENhbXBhbmlhbiBoYXVnaHRpbmVzcyBhbmQKICAgICAgIHJveWFsIHByaWRlLCB3ZSBzZWVtZWQgdG8gYmUgbG9va2luZyBhdCB0aGUgTWFnaWksIGFuZCBCbG9zc2lpIGFuZCBKdWJlbGlpLiA8bWlsZXN0b25lIG49Ijk0IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgbm93LCBpbiB3aGF0IGFsYXJtIGFsbCB0aGUgY29tbW9uIHBlb3BsZSB3ZXJlISBJbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzE3MjciIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBTZXBsYXNpYW4gcm9hZCwgd2hhdCBjcm93ZHMgYXNzZW1ibGVkLCBvZiBtZW4KICAgICAgIGlucXVpcmluZyB3aGF0IGVkaWN0IHRoZSBwcmFldG9yIGhhZCBpc3N1ZWQ/IHdoZXJlIGhlIHdhcyBzdXBwaW5nPyB3aGF0IGhlIGhhZCBzYWlkPyBBbmQgd2UKICAgICAgIHdobyBoYWQgY29tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgd2VyZSBub3QgY2FsbGVkIGd1ZXN0cywgYnV0IGZvcmVpZ25lcnMgYW5kIHN0cmFuZ2Vycy4KICAgICAgICA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqIiAvPiBhbmQgdGhleSB3aG8gdG9vayB1cG9uIHRoZW1zZWx2ZXMgdGhlIG1hZ2lzdHJhY3kgdGhlcmUsIGFuZCB3aG8gaGFkIGFueQogICAgICAgc2hhcmUgaW4gdGhlIGNvbmR1Y3RpbmcgYSBjb2xvbnkgdG8gdGhhdCBzcG90LCBhbmQgaW4gdGhlIGhvbm91cnMgdG8gYmUgaGFkIHRoZXJlLCBvciBpbiB0aGUKICAgICAgIG9mZmljZXMgdG8gYmUgZW5qb3llZCB0aGVyZSwgaGF2ZSBhbGwgc3VmZmVyZWQgdGhlIG1vc3QgdGVycmlibGUgcHVuaXNobWVudHMgYWxsb3R0ZWQgdG8gdGhlCiAgICAgICB3aWNrZWQuIEFuZCBzaW5jZSBJIGhhdmUgbWFkZSBtZW50aW9uIG9mIEJydXR1cyBhbmQgdGhhdCB0aW1lLCBJIHdpbGwgYWxzbyByZWxhdGUgd2hhdCBJIHNhdwogICAgICAgbXlzZWxmIHdoZW4gSSBoYWQgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4s4oCUd2hlbgogICAgICAgdGhlIGNvbG9ueSBoYWQgYmVlbiBqdXN0IGVzdGFibGlzaGVkIHRoZXJlIGJ5IEx1Y2l1cyBDb25zaWRpdXMgYW5kIFNleHR1cyBTYWx0aXVzIHRoZQogICAgICAgcHJhZXRvcnMsIChhcyB0aGV5IGNhbGxlZCB0aGVtc2VsdmVzLCkgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgaG93IG11Y2ggcHJpZGUgdGhlIHNpdHVhdGlvbgogICAgICAgaXRzZWxmIGluc3BpcmVzIGl0cyBpbmhhYml0YW50cyB3aXRoOyBzbyBncmVhdCB0aGF0IGl0IHdhcyB2ZXJ5IGludGVsbGlnaWJsZSBhbmQgdmlzaWJsZSB3aGVuCiAgICAgICB0aGUgY29sb255IGhhZCBvbmx5IGJlZW4gc2V0dGxlZCB0aGVyZSBhIGZldyBkYXlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.34.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGluCiAgICAgICB0aGUgZmlyc3QgcGxhY2UsIGFzIEkgc2FpZCwgdGhvdWdoIHNpbWlsYXIgb2ZmaWNlcnMgaW4gdGhlIG90aGVyIGNvbG9uaWVzIGFyZSBjYWxsZWQKICAgICAgIGR1dW12aXJzLCB0aGVzZSBtZW4gY2hvc2UgdG8gY2FsbCB0aGVtc2VsdmVzIHByYWV0b3JzLiBCdXQgaWYgdGhlaXIgZmlyc3QgeWVhciBvZiBvZmZpY2UKICAgICAgIGluc3BpcmVkIHRoZW0gd2l0aCBzdWNoIGRlc2lyZXMgYXMgdGhhdCwgZG8gbm90IHlvdSBzdXBwb3NlIHRoYXQgaW4gYSBmZXcgeWVhcnMgdGhleSB3b3VsZCBiZQogICAgICAgbGlrZWx5IHRvIHRha2UgYSBmYW5jeSB0byB0aGUgbmFtZSBvZiBjb25zdWxzPyBJbiB0aGUgbmV4dCBwbGFjZSwgdGhleSB3ZXJlIHByZWNlZGVkIGJ5CiAgICAgICBsaWN0b3JzLCBub3Qgd2l0aCBzdGF2ZXMsIGJ1dCB3aXRoIHR3byA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYWNlczwvZm9yZWlnbj4sIGp1c3QgYXMgbGljdG9ycyBnbwogICAgICAgYmVmb3JlIHRoZSBwcmFldG9ycyBoZXJlLiBUaGUgZ3JlYXRlciB2aWN0aW1zIHdlcmUgcGxhY2VkIGluIHRoZSBmb3J1bSwgd2hpY2gsIGFmdGVyIHRoZXkgaGFkCiAgICAgICBiZWVuIGFwcHJvdmVkIGJ5IHRoZSBjb2xsZWdlIG9mIHByaWVzdHMsIHdlcmUgc2FjcmlmaWNlZCBhdCB0aGUgdm9pY2Ugb2YgdGhlIGNyaWVyLCBhbmQgdGhlCiAgICAgICBtdXNpYyBvZiBhIGZsdXRlLXBsYXllciwgYnkgdGhlIHByYWV0b3JzIGZyb20gdGhlaXIgdHJpYnVuYWwsIGFzIHRoZXkgYXJlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSB1cyB3aG8gYXJlIGNvbnN1bHMuIEFmdGVyIHRoYXQsIHRoZSBjb25zY3JpcHQgZmF0aGVycwogICAgICAgd2VyZSBzdW1tb25lZC4gQnV0IGFmdGVyIHRoaXMsIGl0IHdhcyBhbG1vc3QgbW9yZSB0aGFuIG9uZSBjb3VsZCBlbmR1cmUsIHRvIHNlZSB0aGUKICAgICAgIGNvdW50ZW5hbmNlIG9mIENvbnNpZGl1cy4gVGhlIG1hbiB3aG9tIHdlIGhhZCBzZWVuIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBzaHJpdmVsZWQgYW5kIHdhc3RlZCBhd2F5LCBpbiBhIGNvbnRlbXB0aWJsZSBhbmQgYWJqZWN0IGNvbmRpdGlvbiwgd2hlbiB3ZQogICAgICAgc2F3IGhpbSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gd2l0aCBDYW1wYW5pYW4gaGF1Z2h0aW5lc3MgYW5kCiAgICAgICByb3lhbCBwcmlkZSwgd2Ugc2VlbWVkIHRvIGJlIGxvb2tpbmcgYXQgdGhlIE1hZ2lpLCBhbmQgQmxvc3NpaSBhbmQgSnViZWxpaS4gPC90cmFuc2xhdGlvbj4="
translation['2.34.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdywgaW4gd2hhdCBhbGFybSBhbGwgdGhlIGNvbW1vbiBwZW9wbGUgd2VyZSEgSW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMxNzI3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBTZXBsYXNpYW4gcm9hZCwgd2hhdCBjcm93ZHMgYXNzZW1ibGVkLCBvZiBtZW4KICAgICAgIGlucXVpcmluZyB3aGF0IGVkaWN0IHRoZSBwcmFldG9yIGhhZCBpc3N1ZWQ/IHdoZXJlIGhlIHdhcyBzdXBwaW5nPyB3aGF0IGhlIGhhZCBzYWlkPyBBbmQgd2UKICAgICAgIHdobyBoYWQgY29tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdlcmUgbm90IGNhbGxlZCBndWVzdHMsIGJ1dCBmb3JlaWduZXJzIGFuZCBzdHJhbmdlcnMuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.35.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk91Z2h0IHdlIG5vdCB0byB0aGluayB0aGF0IHRob3NlIG1lbiB3aG8gZm9yZXNhdyBhbGwgdGhlc2UgdGhpbmdzLCBPIFJvbWFucywgb3VnaHQgdG8gYmUKICAgICAgIHZlbmVyYXRlZCBhbmQgd29yc2hpcHBlZCBieSB1cywgYW5kIGNsYXNzZWQgYWxtb3N0IGluIHRoZSBudW1iZXIgb2YgdGhlIGltbW9ydGFsIGdvZHM/IEZvcgogICAgICAgd2hhdCB3YXMgaXQgd2hpY2ggdGhleSBzYXc/IFRoZXkgc2F3IHRoaXMsIHdoaWNoIEkgZW50cmVhdCB5b3Ugbm93IHRvIHJlbWFyayBhbmQgdGFrZSBub3RpY2UKICAgICAgIG9mLiBNYW5uZXJzIGFyZSBub3QgaW1wbGFudGVkIGluIG1lbiBzbyBtdWNoIGJ5IHRoZSBibG9vZCBhbmQgZmFtaWx5LCBhcyBieSB0aG9zZSB0aGluZ3MKICAgICAgIHdoaWNoIGFyZSBzdXBwbGllZCBieSB0aGUgbmF0dXJlIG9mIHRoZSBwbGFuIHRvd2FyZHMgZm9ybWluZyBoYWJpdHMgb2YgbGlmZSwgYnkgd2hpY2ggd2UgYXJlCiAgICAgICBub3VyaXNoZWQsIGFuZCBieSB3aGljaCB3ZSBsaXZlLiBUaGUgQ2FydGhhZ2luaWFucywgYSBmcmF1ZHVsZW50IGFuZCBseWluZyBuYXRpb24sIHdlcmUKICAgICAgIHRlbXB0ZWQgdG8gYSBmb25kbmVzcyBmb3IgZGVjZWl2aW5nIGJ5IGEgZGVzaXJlIG9mIGdhaW4sIG5vdCBieSB0aGVpciBibG9vZCwgYnV0IGJ5IHRoZQogICAgICAgY2hhcmFjdGVyIG9mIHRoZWlyIHNpdHVhdGlvbiBiZWNhdXNlLCBvd2luZyB0byB0aGUgbnVtYmVyIG9mIHRoZWlyIGhhcmJvdXJzLCB0aGV5IGhhZAogICAgICAgZnJlcXVlbnQgaW50ZXJjb3Vyc2Ugd2l0aCBtZXJjaGFudHMgYW5kIGZvcmVpZ25lcnMuIFRoZSBMaWd1cmlhbnMsIGJlaW5nIG1vdW50YWluZWVycywgYXJlIGEKICAgICAgIGhhcmR5IGFuZCBydXN0aWMgdHJpYmUuIFRoZSBsYW5kIGl0c2VsZiB0YXVnaHQgdGhlbSB0byBiZSBzbyBieSBwcm9kdWNpbmcgbm90aGluZyB3aGljaCB3YXMKICAgICAgIG5vdCBleHRyYWN0ZWQgZnJvbSBpdCBieSBza2lsbGZ1bCBjdWx0aXZhdGlvbiwgYW5kIGJ5IGdyZWF0IGxhYm91ci4gVGhlIENhbXBhbmlhbnMgd2VyZQogICAgICAgYWx3YXlzIHByb3VkIGZyb20gdGhlIGV4Y2VsbGVuY2Ugb2YgdGhlaXIgc29pbCwgYW5kIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgY3JvcHMsIGFuZCB0aGUKICAgICAgIGhlYWx0aGluZXNzLCBhbmQgcG9zaXRpb24sIGFuZCBiZWF1dHkgb2YgdGhlaXIgY2l0eS4gRnJvbSB0aGF0IGFidW5kYW5jZSwgYW5kIGZyb20gdGhpcwogICAgICAgYWZmbHVlbmNlIGluIGFsbCB0aGluZ3MsIGluIHRoZSBmaXJzdCBwbGFjZSwgb3JpZ2luYXRlZCB0aG9zZSBxdWFsaXRpZXM7IGFycm9nYW5jZSwgd2hpY2gKICAgICAgIGRlbWFuZGVkIG9mIG91ciBhbmNlc3RvcnMgdGhhdCBvbmUgb2YgdGhlIGNvbnN1bHMgc2hvdWxkIGJlIGNob3NlbiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjogYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIHRoYXQgbHV4dXJ5IHdoaWNoIGNvbnF1ZXJlZAogICAgICAgSGFubmliYWwgaGltc2VsZiBieSBwbGVhc3VyZSwgd2hvIHVwIHRvIHRoYXQgdGltZSBoYWQgcHJvdmVkIGludmluY2libGUgaW4gYXJtcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijk2IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVuIHRob3NlIGRlY2VtdmlycyBzaGFsbCwgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgb2YgUnVsbHVzLAogICAgICAgaGF2ZSBsZWQgc2l4IGh1bmRyZWQgY29sb25pc3RzIHRvIHRoYXQgcGxhY2U7IHdoZW4gdGhleSBzaGFsbCBoYXZlIGVzdGFibGlzaGVkIHRoZXJlIGEKICAgICAgIGh1bmRyZWQgZGVjdXJpb25zLCB0ZW4gYXVndXJzLCBhbmQgc2l4IHByaWVzdHMsIHdoYXQgZG8geW91IHN1cHBvc2UgdGhlaXIgY291cmFnZSwgYW5kCiAgICAgICB2aW9sZW5jZSwgYW5kIGZlcm9jaXR5IHdpbGwgYmUgdGhlbj8gVGhleSB3aWxsIGxhdWdoIGF0IGFuZCBkZXNwaXNlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHNpdHVhdGVkIGFtb25nIG1vdW50YWlucyBhbmQgdmFsbGV5cywgc3R1Y2sgdXAsIGFzIGl0CiAgICAgICB3ZXJlLCBhbmQgcmFpc2VkIGFsb2Z0LCBhbWlkIGdhcnJldHMsIHdpdGggbm90IHZlcnkgZ29vZCByb2FkcywgYW5kIHdpdGggdmVyeSBuYXJyb3cgc3RyZWV0cywKICAgICAgIGluIGNvbXBhcmlzb24gd2l0aCB0aGVpciBvd24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgc3RyZXRjaGVkIG91dAogICAgICAgYWxvbmcgYSBtb3N0IG9wZW4gcGxhaW4sIGFuZCBpbiBjb21wYXJpc29uIG9mIHRoZWlyIG93biBiZWF1dGlmdWwgdGhvcm91Z2hmYXJlcy4gQW5kIGFzIGZvcgogICAgICAgdGhlIGxhbmRzLCB0aGV5IHdpbGwgbm90IHRoaW5rIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTE2OCIga2V5PSJ0Z24sNzAwMTE2OCI+VmF0aWNhbjwvcGxhY2VOYW1lPiBvcgogICAgICAgUHVwaW5pYW4gZGlzdHJpY3QgZml0IHRvIGJlIGNvbXBhcmVkIGF0IGFsbCB0byB0aGVpciBmZXJ0aWxlIGFuZCBsdXh1cmlhbnQgcGxhaW5zLiBBbmQgYWxsCiAgICAgICB0aGUgYWJ1bmRhbmNlIG9mIG5laWdib3VyaW5nIHRvd25zIHdoaWNoIHN1cnJvdW5kIHVzIHRoZXkgd2lsbCBjb21wYXJlIGluIGxhdWdodGVyIGFuZCBzY29ybgogICAgICAgd2l0aCB0aGVpciBuZWlnaGJvdXJzLiBUaGV5IHdpbGwgY29tcGFyZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDI5NyIga2V5PSJ0Z24sNzAxMDI5NyI+TGFiaWNpPC9wbGFjZU5hbWU+LAogICAgICAgRmlkZW5hZSwgQ29sbGF0aWEs4oCUZXZlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhbnV2aXVtIiBrZXk9InBlcnNldXMsTGFudXZpdW0iPkxhbnV2aXVtPC9wbGFjZU5hbWU+CiAgICAgICBpdHNlbGYsIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyaWNpYSIga2V5PSJwZXJzZXVzLEFyaWNpYSI+QXJpY2lhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUdXNjdWx1bSIga2V5PSJwZXJzZXVzLFR1c2N1bHVtIj5UdXNjdWx1bTwvcGxhY2VOYW1lPiwgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBrZXk9InBlcnNldXMsQ2FsZXMiPkNhbGVzPC9wbGFjZU5hbWU+LCBhbmQgVGVhbnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ0NzQiIGtleT0idGduLDcwMDQ0NzQiPk5hcGxlczwvcGxhY2VOYW1lPiwgYW5kCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBrZXk9InBlcnNldXMsUHV0ZW9saSI+UHV0ZW9saTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGtleT0icGVyc2V1cyxDdW1hZSI+Q3VtYWU8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBvbXBlaWkiIGtleT0icGVyc2V1cyxQb21wZWlpIj5Qb21wZWlpPC9wbGFjZU5hbWU+LCBhbmQgTnVjZXJpYS4KICAgICAgICA8bWlsZXN0b25lIG49Ijk3IiB1bml0PSJzZWN0aW9uIiAvPiBCeSBhbGwgdGhlc2UgdGhpbmdzIHRoZXkgd2lsbCBiZSBlbGF0ZWQgYW5kIHB1ZmZlZCB1cCwKICAgICAgIHBlcmhhcHMgbm90IGF0IG9uY2UsIGJ1dCBjZXJ0YWlubHkgd2hlbiB0aGV5IGhhdmUgZ290IGEgbGl0dGxlIG1vcmUgYWdlIGFuZCB2aWdvdXIgdGhleSB3aWxsCiAgICAgICBub3QgYmUgYWJsZSB0byByZXN0cmFpbiB0aGVtc2VsdmVzOyB0aGV5IHdpbGwgZ28gb24gZnVydGhlciBhbmQgZnVydGhlci4gQSBzaW5nbGUgaW5kaXZpZHVhbCwKICAgICAgIHVubGVzcyBoZSBiZSBhIG1hbiBvZiBncmVhdCB3aXNkb20sIGNhbiBzY2FyY2VseSwgd2hlbiBwbGFjZWQgaW4gc2l0dWF0aW9ucyBvZiBncmVhdCB3ZWFsdGgKICAgICAgIG9yIHBvd2VyLCBjb250YWluIGhpbXNlbGYgd2l0aGluIHRoZSBsaW1pdHMgb2YgcHJvcHJpZXR5OyBtdWNoIGxlc3Mgd2lsbCB0aG9zZSBjb2xvbmlzdHMsCiAgICAgICBzb3VnaHQgb3V0IGFuZCBzZWxlY3RlZCBieSBSdWxsdXMsIGFuZCBvdGhlcnMgbGlrZSBSdWxsdXMsIHdoZW4gZXN0YWJsaXNoZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgaW4gdGhhdCBhYm9kZSBvZiBwcmlkZSwgYW5kIGluIHRoZSB2ZXJ5IGhvbWUgb2YKICAgICAgIGx1eHVyeSwgcmVmcmFpbiBmcm9tIGltbWVkaWF0ZWx5IGNvbnRyYWN0aW5nIHNvbWUgd2lja2VkbmVzcyBhbmQgaW5pcXVpdHkuIFllcywgYW5kIGl0IHdpbGwKICAgICAgIGJlIG11Y2ggbW9yZSB0aGUgY2FzZSB3aXRoIHRoZW0sIHRoYW4gd2l0aCB0aGUgb2xkIGdlbnVpbmUgQ2FtcGFuaWFucywgYmVjYXVzZSB0aGV5IHdlcmUgYm9ybgogICAgICAgYW5kIHRyYWluZWQgdXAgaW4gYSBmb3J0dW5lIHdoaWNoIHdhcyB0aGVpcnMgb2Ygb2xkLCBidXQgd2VyZSBkZXByYXZlZCBieSBhIHRvbyBncmVhdAogICAgICAgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmc7IGJ1dCB0aGVzZSBtZW4sIGJlaW5nIHRyYW5zZmVycmVkIGZyb20gdGhlIG1vc3QgZXh0cmVtZSBpbmRpZ2VuY2UgdG8KICAgICAgIGEgY29ycmVzcG9uZGluZyBhZmZsdWVuY2UsIHdpbGwgYmUgYWZmZWN0ZWQsIG5vdCBvbmx5IGJ5IHRoZSBleHRlbnQgb2YgdGhlaXIgcmljaGVzLCBidXQgYWxzbwogICAgICAgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZW0uIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjogYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIHRoYXQgbHV4dXJ5IHdoaWNoIGNvbnF1ZXJlZAogICAgICAgSGFubmliYWwgaGltc2VsZiBieSBwbGVhc3VyZSwgd2hvIHVwIHRvIHRoYXQgdGltZSBoYWQgcHJvdmVkIGludmluY2libGUgaW4gYXJtcy4gPC90cmFuc2xhdGlvbj4="
translation['2.35.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiB0aG9zZSBkZWNlbXZpcnMgc2hhbGwsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3IG9mIFJ1bGx1cywKICAgICAgIGhhdmUgbGVkIHNpeCBodW5kcmVkIGNvbG9uaXN0cyB0byB0aGF0IHBsYWNlOyB3aGVuIHRoZXkgc2hhbGwgaGF2ZSBlc3RhYmxpc2hlZCB0aGVyZSBhCiAgICAgICBodW5kcmVkIGRlY3VyaW9ucywgdGVuIGF1Z3VycywgYW5kIHNpeCBwcmllc3RzLCB3aGF0IGRvIHlvdSBzdXBwb3NlIHRoZWlyIGNvdXJhZ2UsIGFuZAogICAgICAgdmlvbGVuY2UsIGFuZCBmZXJvY2l0eSB3aWxsIGJlIHRoZW4/IFRoZXkgd2lsbCBsYXVnaCBhdCBhbmQgZGVzcGlzZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHNpdHVhdGVkIGFtb25nIG1vdW50YWlucyBhbmQgdmFsbGV5cywgc3R1Y2sgdXAsIGFzIGl0CiAgICAgICB3ZXJlLCBhbmQgcmFpc2VkIGFsb2Z0LCBhbWlkIGdhcnJldHMsIHdpdGggbm90IHZlcnkgZ29vZCByb2FkcywgYW5kIHdpdGggdmVyeSBuYXJyb3cgc3RyZWV0cywKICAgICAgIGluIGNvbXBhcmlzb24gd2l0aCB0aGVpciBvd24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCBzdHJldGNoZWQgb3V0CiAgICAgICBhbG9uZyBhIG1vc3Qgb3BlbiBwbGFpbiwgYW5kIGluIGNvbXBhcmlzb24gb2YgdGhlaXIgb3duIGJlYXV0aWZ1bCB0aG9yb3VnaGZhcmVzLiBBbmQgYXMgZm9yCiAgICAgICB0aGUgbGFuZHMsIHRoZXkgd2lsbCBub3QgdGhpbmsgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMTY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDExNjgiPlZhdGljYW48L3BsYWNlTmFtZT4gb3IKICAgICAgIFB1cGluaWFuIGRpc3RyaWN0IGZpdCB0byBiZSBjb21wYXJlZCBhdCBhbGwgdG8gdGhlaXIgZmVydGlsZSBhbmQgbHV4dXJpYW50IHBsYWlucy4gQW5kIGFsbAogICAgICAgdGhlIGFidW5kYW5jZSBvZiBuZWlnYm91cmluZyB0b3ducyB3aGljaCBzdXJyb3VuZCB1cyB0aGV5IHdpbGwgY29tcGFyZSBpbiBsYXVnaHRlciBhbmQgc2Nvcm4KICAgICAgIHdpdGggdGhlaXIgbmVpZ2hib3Vycy4gVGhleSB3aWxsIGNvbXBhcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAyOTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDI5NyI+TGFiaWNpPC9wbGFjZU5hbWU+LAogICAgICAgRmlkZW5hZSwgQ29sbGF0aWEs4oCUZXZlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhbnV2aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMYW51dml1bSI+TGFudXZpdW08L3BsYWNlTmFtZT4KICAgICAgIGl0c2VsZiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmljaWEiPkFyaWNpYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVHVzY3VsdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFR1c2N1bHVtIj5UdXNjdWx1bTwvcGxhY2VOYW1lPiwgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYWxlcyI+Q2FsZXM8L3BsYWNlTmFtZT4sIGFuZCBUZWFudW0sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDc0Ij5OYXBsZXM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHV0ZW9saSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUHV0ZW9saSI+UHV0ZW9saTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUG9tcGVpaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUG9tcGVpaSI+UG9tcGVpaTwvcGxhY2VOYW1lPiwgYW5kIE51Y2VyaWEuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.35.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz4gQnkgYWxsIHRoZXNlIHRoaW5ncyB0aGV5IHdpbGwgYmUgZWxhdGVkIGFuZCBwdWZmZWQgdXAsCiAgICAgICBwZXJoYXBzIG5vdCBhdCBvbmNlLCBidXQgY2VydGFpbmx5IHdoZW4gdGhleSBoYXZlIGdvdCBhIGxpdHRsZSBtb3JlIGFnZSBhbmQgdmlnb3VyIHRoZXkgd2lsbAogICAgICAgbm90IGJlIGFibGUgdG8gcmVzdHJhaW4gdGhlbXNlbHZlczsgdGhleSB3aWxsIGdvIG9uIGZ1cnRoZXIgYW5kIGZ1cnRoZXIuIEEgc2luZ2xlIGluZGl2aWR1YWwsCiAgICAgICB1bmxlc3MgaGUgYmUgYSBtYW4gb2YgZ3JlYXQgd2lzZG9tLCBjYW4gc2NhcmNlbHksIHdoZW4gcGxhY2VkIGluIHNpdHVhdGlvbnMgb2YgZ3JlYXQgd2VhbHRoCiAgICAgICBvciBwb3dlciwgY29udGFpbiBoaW1zZWxmIHdpdGhpbiB0aGUgbGltaXRzIG9mIHByb3ByaWV0eTsgbXVjaCBsZXNzIHdpbGwgdGhvc2UgY29sb25pc3RzLAogICAgICAgc291Z2h0IG91dCBhbmQgc2VsZWN0ZWQgYnkgUnVsbHVzLCBhbmQgb3RoZXJzIGxpa2UgUnVsbHVzLCB3aGVuIGVzdGFibGlzaGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgaW4gdGhhdCBhYm9kZSBvZiBwcmlkZSwgYW5kIGluIHRoZSB2ZXJ5IGhvbWUgb2YKICAgICAgIGx1eHVyeSwgcmVmcmFpbiBmcm9tIGltbWVkaWF0ZWx5IGNvbnRyYWN0aW5nIHNvbWUgd2lja2VkbmVzcyBhbmQgaW5pcXVpdHkuIFllcywgYW5kIGl0IHdpbGwKICAgICAgIGJlIG11Y2ggbW9yZSB0aGUgY2FzZSB3aXRoIHRoZW0sIHRoYW4gd2l0aCB0aGUgb2xkIGdlbnVpbmUgQ2FtcGFuaWFucywgYmVjYXVzZSB0aGV5IHdlcmUgYm9ybgogICAgICAgYW5kIHRyYWluZWQgdXAgaW4gYSBmb3J0dW5lIHdoaWNoIHdhcyB0aGVpcnMgb2Ygb2xkLCBidXQgd2VyZSBkZXByYXZlZCBieSBhIHRvbyBncmVhdAogICAgICAgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmc7IGJ1dCB0aGVzZSBtZW4sIGJlaW5nIHRyYW5zZmVycmVkIGZyb20gdGhlIG1vc3QgZXh0cmVtZSBpbmRpZ2VuY2UgdG8KICAgICAgIGEgY29ycmVzcG9uZGluZyBhZmZsdWVuY2UsIHdpbGwgYmUgYWZmZWN0ZWQsIG5vdCBvbmx5IGJ5IHRoZSBleHRlbnQgb2YgdGhlaXIgcmljaGVzLCBidXQgYWxzbwogICAgICAgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['2.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.36.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSwgTyBQdWJsaXVzIFJ1bGx1cywgaGF2ZSBjaG9zZW4gdG8gZm9sbG93IGluIHRoZSBmb290c3RlcHMgb2YgTWFyY3VzIEJydXR1cydzCiAgICAgICB3aWNrZWRuZXNzLCByYXRoZXIgdGhhbiB0byBiZSBndWlkZWQgYnkgdGhlIG1vbnVtZW50cyBvZiB0aGUgd2lzZG9tIG9mIG91ciBhbmNlc3RvcnMuIFlvdQogICAgICAgaGF2ZSBmbGF2b3VyZWQgYWxsIHRoaXMgd2l0aCB0aGVzZSBhZHZpY2VzIG9mIHlvdXJz4oCUdG8gc2VsbCB0aGUgb2xkIHJldmVudWVzLCBhbmQKICAgICAgIHRvIHdhc3RlIHRoZSBuZXcgb25lcyzigJR0byBvcHBvc2UgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+CiAgICAgICB0byB0aGlzIGNpdHkgaW4gYSByaXZhbHJ5IG9mIGRpZ25pdHnigJR0byBzdWJqZWN0IGFsbCBjaXRpZXMsIG5hdGlvbnMgYW5kIHByb3ZpbmNlcywKICAgICAgIGFsbCBmcmVlIHBlb3BsZXMsIGFuZCBraW5ncywgYW5kIHRoZSB3aG9sZSB3b3JsZCBpbiBzaG9ydCwgdG8geW91ciBsYXdzLCBhbmQganVyaXNkaWN0aW9uLAogICAgICAgYW5kIHBvd2VyLCBpbiBvcmRlciB0aGF0LCB3aGVuIHlvdSBoYXZlIGRyYWluZWQgYWxsIHRoZSBtb25leSBvdXQgb2YgdGhlIHRyZWFzdXJ5LCBhbmQKICAgICAgIGV4YWN0ZWQgYWxsIHRoYXQgbWF5IGJlIGR1ZSBmcm9tIHRoZSB0YXhlcywgYW5kIGV4dG9ydGVkIGFsbCB0aGF0IHlvdSBjYW4gZnJvbSBraW5ncywgYW5kCiAgICAgICBuYXRpb25zLCBhbmQgZXZlbiBmcm9tIG91ciBvd24gZ2VuZXJhbHMsIGFsbCBtZW4gbWF5IHN0aWxsIGJlIGZvcmNlZCB0byBwYXkgbW9uZXkgdG8geW91IGF0CiAgICAgICB5b3VyIG5vZDsgdGhhdCB5b3UsIGFsc28sIG9yIHlvdXIgZnJpZW5kcywgbWF5IGJ1eSB1cCBmcm9tIHRob3NlIHdobyBoYXZlIGJlY29tZSBwb3NzZXNzZWQgb2YKICAgICAgIHRoZW0sIGFzIG1lbWJlcnMgb2YgU3VsbGEncyBwYXJ0eSwgdGhlaXIgbGFuZHPigJRzb21lIG9mIHdoaWNoIHByb2R1Y2UgdG9vIG11Y2gKICAgICAgIHVucG9wdWxhcml0eSB0byB0aGVpciBvd25lcnMgdG8gYmUgd29ydGgga2VlcGluZzsgc29tZSBvZiB3aGljaCBhcmUgdW5oZWFsdGh5LCBhbmQgZGVzZXJ0ZWQKICAgICAgIG9uIHRoYXQgYWNjb3VudCBhbmQgY2hhcmdlIHRoZW0gdG8gdGhlIFJvbWFuIHBlb3BsZSBhdCB3aGF0ZXZlciBwcmljZSB5b3UgcGxlYXNlOyB0aGF0IHlvdQogICAgICAgbWF5IG9jY3VweSBhbGwgdGhlIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB3aXRoIG5ldyBzZXR0bGVyczsgdGhhdCB5b3UgbWF5IGVzdGFibGlzaCBjb2xvbmllcyBpbiB3aGF0ZXZlciBwbGFjZXMgeW91CiAgICAgICB0aGluayBmaXQsIGFuZCBpbiBhcyBtYW55IHBsYWNlcyBhcyBzZWVtcyBkZXNpcmFibGUgdG8geW91LDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIHRoYXQgeW91IG1heSBzdXJyb3VuZCwgYW5kIGhvbGQgaW4gc3ViamVjdGlvbiwgdGhlIHdob2xlIHJlcHVibGljIHdpdGggeW91ciBzb2xkaWVycywgYW5kCiAgICAgICB5b3VyIGNpdGllcyBhbmQgeW91ciBnYXJyaXNvbnMgLCB0aGF0IHlvdSBtYXkgYmUgYWJsZSB0byBwcm9zY3JpYmUgYW5kIHRvIGRlcHJpdmUgb2YgdGhlCiAgICAgICBzaWdodCBvZiB0aGVzZSBtZW4gQ25hZXVzIFBvbXBlaXVzIGhpbXNlbGYgYnkgd2hvc2UgcHJvdGVjdGlvbiBhbmQgYXNzaXN0YW5jZSB0aGUgUm9tYW4KICAgICAgIHBlb3BsZSBoYXMgcmVwZWF0ZWRseSBiZWVuIHRyaXVtcGhhbnQgb3ZlciBpdHMgbW9zdCBhY3RpdmUgZW5lbWllcyBhbmQgaXRzIG1vc3Qgd29ydGhsZXNzCiAgICAgICBjaXRpemVucyB0aGF0IHRoZXJlIG1heSBiZSBub3RoaW5nLCB3aGljaCBpcyBlaXRoZXIgY2FwYWJsZSBvZiBiZWluZyB0YW1wZXJlZCB3aXRoIGJ5IG1lYW5zCiAgICAgICBvZiBnb2xkIGFuZCBzaWx2ZXIsIG9yIGNhcnJpZWQgYnkgbnVtYmVycyBhbmQgdm90ZXMsIG9yIGFjY29tcGxpc2hlZCBieSBmb3JjZSBhbmQgdmlvbGVuY2UsCiAgICAgICB3aGljaCB5b3UgZG8gbm90IGhvbGQgaW4geW91ciBvd24gcG93ZXIsIGFuZCB1bmRlciB5b3VyIGRvbWluaW9uOyB0aGF0IG1lYW53aGlsZSB5b3UgbWF5IGdvCiAgICAgICBhdCBmdWxsIHNwZWVkIHRocm91Z2ggZXZlcnkgbmF0aW9uIGFuZCBldmVyeSBraW5nZG9tIHdpdGggdGhlIG1vc3QgYWJzb2x1dGUKICAgICAgIHBvd2VyLOKAlHdpdGggdW5yZXN0cmljdGVkIGF1dGhvcml0eSBhcyBqdWRnZXMsIGFuZCB3aXRoIGltbWVuc2Ugc3VtcyBvZiBtb25leTsgdGhhdAogICAgICAgeW91IG1heSBjb21lIGludG8gdGhlIGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCBhbmQgc2VsbCBoaXMgdmVyeSBjYW1wIGl0c2VsZiwgaWYgaXQgYmUKICAgICAgIGRlc2lyYWJsZSBmb3IgeW91IHRvIGRvIHNvOyB0aGF0IGluIHRoZSBtZWFudGltZSwgeW91LCBiZWluZyBmcmVlZCBmcm9tIGV2ZXJ5IHJlc3RyYWludCBvZgogICAgICAgbGF3LCBhbmQgZnJvbSBhbGwgZmVhciBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCBmcm9tIGFsbCBkYW5nZXIsIG1heSBiZSBhYmxlIHRvIHN0YW5kCiAgICAgICBmb3IgYWxsIHRoZSBvdGhlciBtYWdpc3RyYWNpZXM7IHNvIHRoYXQgbm8gb25lIG1heSBiZSBhYmxlIHRvIGJyaW5nIHlvdSBiZWZvcmUgdGhlIFJvbWFuCiAgICAgICBwZW9wbGUsIG9yIHN1bW1vbiB5b3UgYmVmb3JlIGFueSBjb3VydCzigJRzbyB0aGF0IHRoZSBzZW5hdGUgbWF5IG5vdCBiZSBhYmxlIHRvCiAgICAgICBjb21wZWwgeW91LCBub3IgdGhlIGNvbnN1bCB0byByZXN0cmFpbiB5b3UsIG5vciB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHRvIG9mZmVyIGFueQogICAgICAgaW1wZWRpbWVudCB0byB5b3UuIDxtaWxlc3RvbmUgbj0iMTAwIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPgogICAgICAgdG8gdGhpcyBjaXR5IGluIGEgcml2YWxyeSBvZiBkaWduaXR54oCUdG8gc3ViamVjdCBhbGwgY2l0aWVzLCBuYXRpb25zIGFuZCBwcm92aW5jZXMsCiAgICAgICBhbGwgZnJlZSBwZW9wbGVzLCBhbmQga2luZ3MsIGFuZCB0aGUgd2hvbGUgd29ybGQgaW4gc2hvcnQsIHRvIHlvdXIgbGF3cywgYW5kIGp1cmlzZGljdGlvbiwKICAgICAgIGFuZCBwb3dlciwgaW4gb3JkZXIgdGhhdCwgd2hlbiB5b3UgaGF2ZSBkcmFpbmVkIGFsbCB0aGUgbW9uZXkgb3V0IG9mIHRoZSB0cmVhc3VyeSwgYW5kCiAgICAgICBleGFjdGVkIGFsbCB0aGF0IG1heSBiZSBkdWUgZnJvbSB0aGUgdGF4ZXMsIGFuZCBleHRvcnRlZCBhbGwgdGhhdCB5b3UgY2FuIGZyb20ga2luZ3MsIGFuZAogICAgICAgbmF0aW9ucywgYW5kIGV2ZW4gZnJvbSBvdXIgb3duIGdlbmVyYWxzLCBhbGwgbWVuIG1heSBzdGlsbCBiZSBmb3JjZWQgdG8gcGF5IG1vbmV5IHRvIHlvdSBhdAogICAgICAgeW91ciBub2Q7IHRoYXQgeW91LCBhbHNvLCBvciB5b3VyIGZyaWVuZHMsIG1heSBidXkgdXAgZnJvbSB0aG9zZSB3aG8gaGF2ZSBiZWNvbWUgcG9zc2Vzc2VkIG9mCiAgICAgICB0aGVtLCBhcyBtZW1iZXJzIG9mIFN1bGxhJ3MgcGFydHksIHRoZWlyIGxhbmRz4oCUc29tZSBvZiB3aGljaCBwcm9kdWNlIHRvbyBtdWNoCiAgICAgICB1bnBvcHVsYXJpdHkgdG8gdGhlaXIgb3duZXJzIHRvIGJlIHdvcnRoIGtlZXBpbmc7IHNvbWUgb2Ygd2hpY2ggYXJlIHVuaGVhbHRoeSwgYW5kIGRlc2VydGVkCiAgICAgICBvbiB0aGF0IGFjY291bnQgYW5kIGNoYXJnZSB0aGVtIHRvIHRoZSBSb21hbiBwZW9wbGUgYXQgd2hhdGV2ZXIgcHJpY2UgeW91IHBsZWFzZTsgdGhhdCB5b3UKICAgICAgIG1heSBvY2N1cHkgYWxsIHRoZSBtdW5pY2lwYWxpdGllcyBhbmQgY29sb25pZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCBuZXcgc2V0dGxlcnM7IHRoYXQgeW91IG1heSBlc3RhYmxpc2ggY29sb25pZXMgaW4gd2hhdGV2ZXIgcGxhY2VzIHlvdQogICAgICAgdGhpbmsgZml0LCBhbmQgaW4gYXMgbWFueSBwbGFjZXMgYXMgc2VlbXMgZGVzaXJhYmxlIHRvIHlvdSw8L3RyYW5zbGF0aW9uPg=="
translation['2.36.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIHRoYXQgeW91IG1heSBzdXJyb3VuZCwgYW5kIGhvbGQgaW4gc3ViamVjdGlvbiwgdGhlIHdob2xlIHJlcHVibGljIHdpdGggeW91ciBzb2xkaWVycywgYW5kCiAgICAgICB5b3VyIGNpdGllcyBhbmQgeW91ciBnYXJyaXNvbnMgLCB0aGF0IHlvdSBtYXkgYmUgYWJsZSB0byBwcm9zY3JpYmUgYW5kIHRvIGRlcHJpdmUgb2YgdGhlCiAgICAgICBzaWdodCBvZiB0aGVzZSBtZW4gQ25hZXVzIFBvbXBlaXVzIGhpbXNlbGYgYnkgd2hvc2UgcHJvdGVjdGlvbiBhbmQgYXNzaXN0YW5jZSB0aGUgUm9tYW4KICAgICAgIHBlb3BsZSBoYXMgcmVwZWF0ZWRseSBiZWVuIHRyaXVtcGhhbnQgb3ZlciBpdHMgbW9zdCBhY3RpdmUgZW5lbWllcyBhbmQgaXRzIG1vc3Qgd29ydGhsZXNzCiAgICAgICBjaXRpemVucyB0aGF0IHRoZXJlIG1heSBiZSBub3RoaW5nLCB3aGljaCBpcyBlaXRoZXIgY2FwYWJsZSBvZiBiZWluZyB0YW1wZXJlZCB3aXRoIGJ5IG1lYW5zCiAgICAgICBvZiBnb2xkIGFuZCBzaWx2ZXIsIG9yIGNhcnJpZWQgYnkgbnVtYmVycyBhbmQgdm90ZXMsIG9yIGFjY29tcGxpc2hlZCBieSBmb3JjZSBhbmQgdmlvbGVuY2UsCiAgICAgICB3aGljaCB5b3UgZG8gbm90IGhvbGQgaW4geW91ciBvd24gcG93ZXIsIGFuZCB1bmRlciB5b3VyIGRvbWluaW9uOyB0aGF0IG1lYW53aGlsZSB5b3UgbWF5IGdvCiAgICAgICBhdCBmdWxsIHNwZWVkIHRocm91Z2ggZXZlcnkgbmF0aW9uIGFuZCBldmVyeSBraW5nZG9tIHdpdGggdGhlIG1vc3QgYWJzb2x1dGUKICAgICAgIHBvd2VyLOKAlHdpdGggdW5yZXN0cmljdGVkIGF1dGhvcml0eSBhcyBqdWRnZXMsIGFuZCB3aXRoIGltbWVuc2Ugc3VtcyBvZiBtb25leTsgdGhhdAogICAgICAgeW91IG1heSBjb21lIGludG8gdGhlIGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCBhbmQgc2VsbCBoaXMgdmVyeSBjYW1wIGl0c2VsZiwgaWYgaXQgYmUKICAgICAgIGRlc2lyYWJsZSBmb3IgeW91IHRvIGRvIHNvOyB0aGF0IGluIHRoZSBtZWFudGltZSwgeW91LCBiZWluZyBmcmVlZCBmcm9tIGV2ZXJ5IHJlc3RyYWludCBvZgogICAgICAgbGF3LCBhbmQgZnJvbSBhbGwgZmVhciBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCBmcm9tIGFsbCBkYW5nZXIsIG1heSBiZSBhYmxlIHRvIHN0YW5kCiAgICAgICBmb3IgYWxsIHRoZSBvdGhlciBtYWdpc3RyYWNpZXM7IHNvIHRoYXQgbm8gb25lIG1heSBiZSBhYmxlIHRvIGJyaW5nIHlvdSBiZWZvcmUgdGhlIFJvbWFuCiAgICAgICBwZW9wbGUsIG9yIHN1bW1vbiB5b3UgYmVmb3JlIGFueSBjb3VydCzigJRzbyB0aGF0IHRoZSBzZW5hdGUgbWF5IG5vdCBiZSBhYmxlIHRvCiAgICAgICBjb21wZWwgeW91LCBub3IgdGhlIGNvbnN1bCB0byByZXN0cmFpbiB5b3UsIG5vciB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHRvIG9mZmVyIGFueQogICAgICAgaW1wZWRpbWVudCB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['2.36.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBkbyBub3Qgd29uZGVyIHRoYXQgeW91LCBtZW4gb2Ygc3VjaCBmb2xseSBhbmQgaW50ZW1wZXJhbmNlIGFzIHlvdSBhcmUsIHNob3VsZCBoYXZlCiAgICAgICBkZXNpcmVkIHRoZXNlIHRoaW5nc+KAlEkgZG8gbWFydmVsIHRoYXQgeW91IHNob3VsZCBoYXZlIGhvcGVkIHRoYXQgeW91IGNvdWxkIG9idGFpbgogICAgICAgdGhlbSB3aGlsZSBJIGFtIGNvbnN1bC4gRm9yIGFzIGFsbCBjb25zdWxzIG91Z2h0IHRvIGV4ZXJjaXNlIHRoZSBncmVhdGVzdCBjYXJlIGFuZCBkaWxpZ2VuY2UKICAgICAgIGluIHRoZSBwcm90ZWN0aW9uIG9mIHRoZSByZXB1YmxpYywgc28sIGFib3ZlIGFsbCBvdGhlcnMsIG91Z2h0IHRoZXkgdG8gZG8gc28gd2hvIGhhdmUgbm90CiAgICAgICBiZWVuIG1hZGUgY29uc3VscyBpbiB0aGVpciBjcmFkbGVzLCBidXQgaW4gdGhlIENhbXB1cy4gTm8gYW5jZXN0b3JzIG9mIG1pbmUgd2VudCBiYWlsIHRvIHRoZQogICAgICAgUm9tYW4gcGVvcGxlIGZvciBtZTsgeW91IGdhdmUgY3JlZGl0IHRvIG1lOyBpdCBpcyBmcm9tIG1lIHRoYXQgeW91IG11c3QgY2xhaW0gd2hhdCBJIGFtIGJvdW5kCiAgICAgICB0byBwYXk7IGFsbCB5b3VyIGRlbWFuZHMgbXVzdCBiZSBtYWRlIG9uIG1lLiBBcywgd2hlbiBJIHN0b29kIGZvciB0aGUgY29uc3Vsc2hpcCwgbm8gYXV0aG9ycwogICAgICAgb2YgbXkgZmFtaWx5IHJlY29tbWVuZGVkIG1lIHRvIHlvdTsgc28sIGlmLiBJIGNvbW1pdCBhbnkgZmF1bHQsIHRoZXJlIGFyZSBubyBpbWFnZXMgb2YgbXkKICAgICAgIGFuY2VzdG9ycyB3aGljaCBjYW4gYmVnIG1lIG9mZiBmcm9tIHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgaWYgb25seSBsaWZlIGJlIGdyYW50ZWQgbWUsIGFzIGZhciBhcyBJIGNhbiBJIHdpbGwgZGVmZW5kIHRoZSBzdGF0ZSBmcm9tIHRoZQogICAgICAgd2lja2VkbmVzcyBhbmQgaW5zaWRpb3VzIGRlc2lnbnMgb2YgdGhvc2UgbWVuLiBJIHByb21pc2UgeW91IHRoaXMsIE8gUm9tYW5zLCB3aXRoIGdvb2QgZmFpdGg7CiAgICAgICB5b3UgaGF2ZSBlbnRydXN0ZWQgdGhlIHJlcHVibGljIHRvIGEgdmlnaWxhbnQgbWFuLCBub3QgdG8gYSB0aW1pZCBvbmU7IHRvIGEgZGlsaWdlbnQgbWFuLCBub3QKICAgICAgIHRvIGFuIGlkbGUgb25lLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAxIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIGNvbnN1bDsgaG93IHNob3VsZCBJIGZlYXIgYW4KICAgICAgIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGU/IEhvdyBzaG91bGQgSSBiZSBhZnJhaWQgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGU/IEhvdyBzaG91bGQgSSBiZQogICAgICAgZnJlcXVlbnRseSBvciBjYXVzZWxlc3NseSBhZ2l0YXRlZD8gSG93IHNob3VsZCBJIGZlYXIgbGVzdCBJIG1heSBoYXZlIHRvIGR3ZWxsIGluIGEgcHJpc29uLAogICAgICAgaWYgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgb3JkZXJzIG1lIHRvIGJlIGxlZCB0aGl0aGVyPyBmb3IgSSwgYXJtZWQgd2l0aCB5b3VyIGFybXMsIGFkb3JuZWQKICAgICAgIHdpdGggeW91ciBtb3N0IGhvbm91cmFibGUgZW5zaWducywgYW5kIHdpdGggY29tbWFuZCBhbmQgYXV0aG9yaXR5IGNvbmZlcnJlZCBieSB5b3UsIGhhdmUgbm90CiAgICAgICBiZWVuIGFmcmFpZCB0byBhZHZhbmNlIGludG8gdGhpcyBwbGFjZSwgYW5kLCB3aXRoIHlvdSBmb3IgbXkgYmFja2VycywgdG8gcmVzaXN0IHRoZQogICAgICAgd2lja2VkbmVzcyBvZiBtYW47IG5vciBkbyBJIGZlYXIgbGVzdCB0aGUgcmVwdWJsaWMsIGJlaW5nIGZvcnRpZmllZCB3aXRoIHN1Y2ggc3Ryb25nCiAgICAgICBwcm90ZWN0aW9uLCBtYXkgYmUgY29ucXVlcmVkIG9yIG92ZXJ3aGVsbWVkIGJ5IHRob3NlIG1lbi4gSWYgSSBoYWQgYmVlbiBhZnJhaWQgYmVmb3JlLCBzdGlsbAogICAgICAgbm93LCB3aXRoIHRoaXMgYXNzZW1ibHksIGFuZCB0aGlzIHBlb3BsZSwgSSBzaG91bGQgbm90IGZlYXIuIEZvciB3aG8gZXZlciBoYWQgYW4gYXNzZW1ibHkgc28KICAgICAgIHdlbGwgaW5jbGluZWQgdG8gaGVhciBoaW0gd2hpbGUgYWR2b2NhdGluZyBhbiBhZ3JhcmlhbiBsYXcsIGFzIEkgaGF2ZSBoYWQgd2hpbGUgYXJndWluZwogICAgICAgYWdhaW5zdCBvbmU/IGlmLCBpbmRlZWQsIEkgY2FuIGJlIHNhaWQgdG8gYmUgYXJndWluZyBhZ2FpbnN0IG9uZSwgYW5kIG5vdCByYXRoZXIgdXBzZXR0aW5nCiAgICAgICBhbmQgZGVzdHJveWluZyBvbmUuIDxtaWxlc3RvbmUgbj0iMTAyIiB1bml0PSJzZWN0aW9uIiAvPiBGcm9tIHdoaWNoLCBPIFJvbWFucywgaXQgbWF5IGJlCiAgICAgICBlYXNpbHkgdW5kZXJzdG9vZCB0aGF0IHRoZXJlIGlzIG5vdGhpbmcgc28gcG9wdWxhciwgYXMgdGhhdCB3aGljaCBJLCB0aGUgY29uc3VsIG9mIHRoZQogICAgICAgcGVvcGxlLCBhbSB0aGlzIHllYXIgYnJpbmdpbmcgdG8geW91OyBuYW1lbHksIHBlYWNlLCB0cmFucXVpbGxpdHkgYW5kIGVhc2UuIEFsbCB0aGUgdGhpbmdzCiAgICAgICB3aGljaCB3aGVuIHdlIHdlcmUgZWxlY3RlZCB5b3Ugd2VyZSBhZnJhaWQgbWlnaHQgaGFwcGVuLCBoYXZlIGJlZW4gZ3VhcmRlZCBhZ2FpbnN0IGJ5IG15CiAgICAgICBwcnVkZW5jZSBhbmQgY2F1dGlvbi4gWW91IG5vdCBvbmx5IHdpbGwgZW5qb3kgZWFzZSzigJR5b3Ugd2hvIGhhdmUgYWx3YXlzIHdpc2hlZCBmb3IKICAgICAgIGl0OyBidXQgSSB3aWxsIGV2ZW4gbWFrZSB0aG9zZSBtZW4gcXVpZXQsIHRvIHdob20gb3VyIHF1aWV0IGhhcyBiZWVuIGEgc291cmNlIG9mIGFubm95YW5jZS4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.37.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gY29uc3VsOyBob3cgc2hvdWxkIEkgZmVhciBhbgogICAgICAgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZT8gSG93IHNob3VsZCBJIGJlIGFmcmFpZCBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZT8gSG93IHNob3VsZCBJIGJlCiAgICAgICBmcmVxdWVudGx5IG9yIGNhdXNlbGVzc2x5IGFnaXRhdGVkPyBIb3cgc2hvdWxkIEkgZmVhciBsZXN0IEkgbWF5IGhhdmUgdG8gZHdlbGwgaW4gYSBwcmlzb24sCiAgICAgICBpZiBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBvcmRlcnMgbWUgdG8gYmUgbGVkIHRoaXRoZXI/IGZvciBJLCBhcm1lZCB3aXRoIHlvdXIgYXJtcywgYWRvcm5lZAogICAgICAgd2l0aCB5b3VyIG1vc3QgaG9ub3VyYWJsZSBlbnNpZ25zLCBhbmQgd2l0aCBjb21tYW5kIGFuZCBhdXRob3JpdHkgY29uZmVycmVkIGJ5IHlvdSwgaGF2ZSBub3QKICAgICAgIGJlZW4gYWZyYWlkIHRvIGFkdmFuY2UgaW50byB0aGlzIHBsYWNlLCBhbmQsIHdpdGggeW91IGZvciBteSBiYWNrZXJzLCB0byByZXNpc3QgdGhlCiAgICAgICB3aWNrZWRuZXNzIG9mIG1hbjsgbm9yIGRvIEkgZmVhciBsZXN0IHRoZSByZXB1YmxpYywgYmVpbmcgZm9ydGlmaWVkIHdpdGggc3VjaCBzdHJvbmcKICAgICAgIHByb3RlY3Rpb24sIG1heSBiZSBjb25xdWVyZWQgb3Igb3ZlcndoZWxtZWQgYnkgdGhvc2UgbWVuLiBJZiBJIGhhZCBiZWVuIGFmcmFpZCBiZWZvcmUsIHN0aWxsCiAgICAgICBub3csIHdpdGggdGhpcyBhc3NlbWJseSwgYW5kIHRoaXMgcGVvcGxlLCBJIHNob3VsZCBub3QgZmVhci4gRm9yIHdobyBldmVyIGhhZCBhbiBhc3NlbWJseSBzbwogICAgICAgd2VsbCBpbmNsaW5lZCB0byBoZWFyIGhpbSB3aGlsZSBhZHZvY2F0aW5nIGFuIGFncmFyaWFuIGxhdywgYXMgSSBoYXZlIGhhZCB3aGlsZSBhcmd1aW5nCiAgICAgICBhZ2FpbnN0IG9uZT8gaWYsIGluZGVlZCwgSSBjYW4gYmUgc2FpZCB0byBiZSBhcmd1aW5nIGFnYWluc3Qgb25lLCBhbmQgbm90IHJhdGhlciB1cHNldHRpbmcKICAgICAgIGFuZCBkZXN0cm95aW5nIG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['2.37.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+IEZyb20gd2hpY2gsIE8gUm9tYW5zLCBpdCBtYXkgYmUKICAgICAgIGVhc2lseSB1bmRlcnN0b29kIHRoYXQgdGhlcmUgaXMgbm90aGluZyBzbyBwb3B1bGFyLCBhcyB0aGF0IHdoaWNoIEksIHRoZSBjb25zdWwgb2YgdGhlCiAgICAgICBwZW9wbGUsIGFtIHRoaXMgeWVhciBicmluZ2luZyB0byB5b3U7IG5hbWVseSwgcGVhY2UsIHRyYW5xdWlsbGl0eSBhbmQgZWFzZS4gQWxsIHRoZSB0aGluZ3MKICAgICAgIHdoaWNoIHdoZW4gd2Ugd2VyZSBlbGVjdGVkIHlvdSB3ZXJlIGFmcmFpZCBtaWdodCBoYXBwZW4sIGhhdmUgYmVlbiBndWFyZGVkIGFnYWluc3QgYnkgbXkKICAgICAgIHBydWRlbmNlIGFuZCBjYXV0aW9uLiBZb3Ugbm90IG9ubHkgd2lsbCBlbmpveSBlYXNlLOKAlHlvdSB3aG8gaGF2ZSBhbHdheXMgd2lzaGVkIGZvcgogICAgICAgaXQ7IGJ1dCBJIHdpbGwgZXZlbiBtYWtlIHRob3NlIG1lbiBxdWlldCwgdG8gd2hvbSBvdXIgcXVpZXQgaGFzIGJlZW4gYSBzb3VyY2Ugb2YgYW5ub3lhbmNlLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRydXRoLCBob3dldmVyLCBwb3dlciwgcmljaGVzLCBhcmUgYWNjdXN0b21lZCB0byBiZSBhY3F1aXJlZCBieSB0aGVtIG91dCBvZiB0aGUgdHVtdWx0cwogICAgICAgYW5kIGRpc3NlbnNpb25zIG9mIHRoZSBjaXRpemVucy4gWW91LCB3aG9zZSBpbnRlcmVzdCBjb25zaXN0cyBpbiB0aGUgdm90ZXMgb2YgdGhlIHBlb3BsZSwKICAgICAgIHdob3NlIGxpYmVydHkgaXMgYmFzZWQgb24gdGhlIGxhd3MsIHdob3NlIGhvbm91cnMgZGVwZW5kIG9uIHRoZSBjb3VydHMgb2YganVzdGljZSBhbmQgb24gdGhlCiAgICAgICBlcXVpdHkgb2YgdGhlIG1hZ2lzdHJhdGVzLCBhbmQgd2hvc2UgZW5qb3ltZW50IG9mIHlvdXIgcHJvcGVydGllcyBkZXBlbmRzIG9uIHBlYWNlLCBvdWdodCB0bwogICAgICAgcHJlc2VydmUgdHJhbnF1aWxsaXR5IGJ5IGV2ZXJ5IG1lYW5zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaWYgdGhvc2UgbWVuCiAgICAgICB3aG8sIG9uIGFjY291bnQgb2YgaW5kb2xlbmNlLCBhcmUgbGl2aW5nIGluIHRyYW5xdWlsbGl0eSwgc3RpbGwgdGFrZSBwbGVhc3VyZSBpbiB0aGVpciBvd24KICAgICAgIGJhc2UgaW5kb2xlbmNlOyB5b3UsIGlmIGluIHRoZSBjYWxtIHF1aWV0IHdpdGggd2hpY2ggeW91IGdvdmVybiBmb3J0dW5lLCB5b3UgdGhpbmsgc3VjaCBhCiAgICAgICBjb25kaXRpb24gYXMgeW91IGVuam95IGJldHRlciwgc2hvdWxkIG1haW50YWluIGl0IGRpbGlnZW50bHk7IG5vdCBhcyBvbmUgdGhhdCBoYXMgYmVlbgogICAgICAgYWNxdWlyZWQgYnkgbGF6aW5lc3MsIGJ1dCBhcyBvbmUgdGhhdCBoYXMgYmVlbiBlYXJuZWQgYnkgdmlydHVlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPiBUaGlzCiAgICAgICAgYW5kIHRoZSBuZXh0IHNlbnRlbmNlIGFyZSBnaXZlbiB1cCBhcyBjb3JydXB0IGJ5IGV2ZXJ5IG9uZS4gTWFueSBkaWZmZXJlbnQgcmVhZGluZ3MgaGF2ZQogICAgICAgIGJlZW4gcHJvcG9zZWQ7IGFuZCBJIGhhdmUgZW5kZWF2b3VyZWQgdG8gZXh0cmFjdCB3aGF0IGFwcGVhcnMgdG8gaGF2ZSBiZWVuIENpY2VybydzIG1lYW5pbmcKICAgICAgICBmcm9tIHRoZW0sIGtlZXBpbmcgYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0byB0aGUgdGV4dCBvZiBPcmVsbGl1cy48L25vdGU+IEFuZCBJLCBieSB0aGUKICAgICAgIHVuYW5pbWl0eSB3aGljaCBJIGhhdmUgZXN0YWJsaXNoZWQgYmV0d2VlbiBteXNlbGYgYW5kIG15IGNvbGxlYWd1ZSwgaGF2ZSBwcm92aWRlZCBhZ2FpbnN0CiAgICAgICB0aG9zZSBtZW4gd2hvbSBJIGtuZXcgdG8gYmUgaG9zdGlsZSB0byBteSBjb25zdWxzaGlwIGJvdGggaW4gdGhlaXIgZGlzcG9zaXRpb25zIGFuZCBhY3Rpb25zLgogICAgICAgSSBoYXZlIHByb3ZpZGVkIGFnYWluc3QgZXZlcnl0aGluZzsgYW5kIEkgaGF2ZSBzb3VnaHQgdG8gcmVjYWxsIHRob3NlIG1lbiB0byB0aGVpciBsb3lhbHR5LiBJCiAgICAgICBoYXZlIGFsc28gZ2l2ZW4gbm90aWNlIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCB0byB0cnkgbm8gZGlzb3JkZXJseSBjb25kdWN0IHdoaWxlIEkgYW0KICAgICAgIGNvbnN1bC4gTXkgZ3JlYXRlc3QgYW5kIGZpcm1lc3Qgc3VwcG9ydCBpbiBvdXIgY29tbW9uIGZvcnR1bmVzLCBPIFJvbWFucywgd2lsbCBiZSwgaWYgeW91IGZvcgogICAgICAgdGhlIGZ1dHVyZSBiZWhhdmUsIGZvciB0aGUgc2FrZSBvZiBpdCwgdG8gdGhlIHJlcHVibGljIGluIHRoZSBzYW1lIG1hbm5lciBhcyB5b3UgaGF2ZSB0aGlzCiAgICAgICBkYXkgYmVoYXZlZCB0byBtZSBpbiB0aGlzIG1vc3QgbnVtZXJvdXMgYXNzZW1ibHksIGZvciB0aGUgc2FrZSBvZiB5b3VyIG93biBzYWZldHkuIEkgcHJvbWlzZQogICAgICAgeW91IG1vc3QgY2VydGFpbmx5LCBhbmQgcGxlZGdlIG15c2VsZiB0byBtYW5hZ2UgbWF0dGVycyBzbyB0aGF0IHRoZXkgd2hvIGhhdmUgZW52aWVkIHRoZQogICAgICAgaG9ub3VycyB3aGljaCBJIGhhdmUgZ2FpbmVkLCBzaGFsbCBhdCBsYXN0IGNvbmZlc3MsIHRoYXQgaW4gc2VsZWN0aW5nIGEgY29uc3VsIHlvdSBhbGwgc2hvd2VkCiAgICAgICB0aGUgZ3JlYXRlc3QgcG9zc2libGUgZm9yZXNpZ2h0LiA8L3A+CgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.37.103'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBPIFJvbWFucywgd291bGQgaGF2ZSBwdXJzdWVkIGEgbW9yZSBjb252ZW5pZW50IGNvdXJzZSwgaWYgdGhleQogICAgICAgaGFkIHNhaWQgdG8gbXkgZmFjZSwgaW4gbXkgcHJlc2VuY2UsIHRoZSB0aGluZ3Mgd2hpY2ggdGhleSBhbGxlZ2UgdG8geW91IGNvbmNlcm5pbmcgbWUuIEZvcgogICAgICAgdGhlbiwgdGhleSB3b3VsZCBoYXZlIGdpdmVuIHlvdSBhbiBvcHBvcnR1bml0eSBmb3IgYSBtb3JlIGp1c3QgZGVjaXNpb24gaW4gdGhlIG1hdHRlciwgYW5kCiAgICAgICB0aGV5IHdvdWxkIGhhdmUgZm9sbG93ZWQgdGhlIHVzYWdlcyBvZiB0aGVpciBwcmVkZWNlc3NvcnMsIGFuZCBoYXZlIG1haW50YWluZWQgdGhlaXIgb3duCiAgICAgICBwcml2aWxlZ2VzIGFuZCBwb3dlci4gQnV0LCBzaW5jZSB0aGV5IGhhdmUgc2h1bm5lZCBhbnkgb3BlbiBjb250ZXN0IGFuZCBkZWJhdGUgd2l0aCBtZSBhdAogICAgICAgcHJlc2VudCwgbm93LCBpZiB0aGV5IHBsZWFzZSwgbGV0IHRoZW0gY29tZSBmb3J0aCBpbnRvIHRoZSBhc3NlbWJseSB3aGljaCBJIGhhdmUgY29udmVuZWQsCiAgICAgICBhbmQgdGhvdWdoIHRoZXkgd291bGQgbm90IGNvbWUgZm9yd2FyZCB3aWxsaW5nbHkgd2hlbiBjaGFsbGVuZ2VkIGJ5IG1lLCBsZXQgdGhlbSBhdCBsZWFzdAogICAgICAgcmV0dXJuIHRvIGl0IG5vdyB0aGF0IEkgb3Blbmx5IGludml0ZSB0aGVtIGJhY2suIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlLCBPIFJvbWFucywgdGhhdCBzb21lIG1lbiBhcmUgbWFraW5nIGEgbm9pc2UgdG8gaW1wbHkgc29tZXRoaW5nIG9yIG90aGVyLCBhbmQgdGhhdAogICAgICAgdGhleSBubyBsb25nZXIgc2hvdyBtZSB0aGUgc2FtZSBjb3VudGVuYW5jZSBpbiB0aGlzIHByZXNlbnQgYXNzZW1ibHkgd2hpY2ggdGhleSBzaG93ZWQgbWUgYXQKICAgICAgIHRoZSBsYXN0IGFzc2VtYmx5IGluIHdoaWNoIEkgYWRkcmVzc2VkIHlvdS4gV2hlcmVmb3JlLCBJIGVudHJlYXQgeW91LCB3aG8gaGF2ZSBiZWxpZXZlZCBub25lCiAgICAgICBvZiBteSBlbmVtaWVzJyBzdG9yaWVzIGFib3V0IG1lLCB0byByZXRhaW4gdGhlIHNhbWUgZmF2b3VyYWJsZSBkaXNwb3NpdGlvbiB0b3dhcmRzIG1lIHRoYXQKICAgICAgIHlvdSBhbHdheXMgaGFkOyBidXQgZnJvbSB5b3UsIHdob20gSSBwZXJjZWl2ZSB0byBiZSBhIGxpdHRsZSBjaGFuZ2VkIHRvd2FyZHMgbWUsIEkgYmVnIHRoZQogICAgICAgbG9hbiBvZiB5b3VyIGdvb2Qgb3BpbmlvbiBvZiBtZSBmb3IgYSBzaG9ydCB0aW1lLCBvbiBjb25kaXRpb24gb2YgeW91ciByZXRhaW5pbmcgaXQgZm9yZXZlciwKICAgICAgIGlmIEkgcHJvdmUgdG8geW91IHdoYXQgSSBhbSBnb2luZyB0byBzYXksIGJ1dCBhYmFuZG9uaW5nIGl0IGFuZCB0cmFtcGxpbmcgaXQgdW5kZXIgZm9vdCBpbgogICAgICAgdGhpcyB2ZXJ5IHBsYWNlIGlmIEkgZmFpbCB0byBlc3RhYmxpc2ggaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdXIgbWluZHMgYW5kIGVhcnMsIE8gUm9tYW5zLCBhcmUgYmxvY2tlZCB1cCB3aXRoIHRoZSBhc3NlcnRpb24gdGhhdCBJIGFtIG9wcG9zaW5nIHRoZQogICAgICAgYWdyYXJpYW4gbGF3IGFuZCB5b3VyIGludGVyZXN0LCBvdXQgb2YgYSBkZXNpcmUgdG8gZ3JhdGlmeSB0aGUgc2V2ZW4gdHlyYW50cywgYW5kIHRoZSBvdGhlcgogICAgICAgcG9zc2Vzc29ycyBvZiBTdWxsYSdzIGFsbG90bWVudHMuIElmIHRoZXJlIGJlIGFueSBtZW4gd2hvIGhhdmUgYmVsaWV2ZWQgdGhlc2UgdGhpbmdzLCB0aGV5CiAgICAgICBtdXN0IGluZXZpdGFibHkgZmlyc3QgaGF2ZSBiZWxpZXZlZCB0aGlzLCB0aGF0IGJ5IHRoaXMgYWdyYXJpYW4gbGF3IHdoaWNoIGhhcyBiZWVuIHByb3Bvc2VkLAogICAgICAgdGhlIGxhbmRzIGFsbG90dGVkIGJ5IFN1bGxhIGFyZSB0YWtlbiBhd2F5IGZyb20gdGhlaXIgcHJlc2VudCBwb3NzZXNzb3JzIGFuZCBkaXZpZGVkIGFtb25nCiAgICAgICB5b3UsIG9yIGVsc2UsIHRoYXQgdGhlIHBvc3Nlc3Npb25zIG9mIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGRpbWluaXNoZWQsIGluIG9yZGVyIHRoYXQgeW91CiAgICAgICBtYXkgYmUgc2V0dGxlZCBvbiB0aGVpciBsYW5kcy4gSWYgSSBzaG93IHlvdSwgbm90IG9ubHkgdGhhdCBub3QgYW4gYXRvbSBvZiBsYXVkIG9mIFN1bGxhJ3MKICAgICAgIGFsbG90bWVudHMgaXMgdGFrZW4gZnJvbSBhbnkgb25lLCBidXQgZXZlbiB0aGF0IHRoYXQgZGVzY3JpcHRpb24gb2YgcHJvcGVydHkgaXMgZW5zdXJlZCB0bwogICAgICAgaXRzIHBvc3Nlc3NvcnMsIGFuZCBjb25maXJtZWQgaW4gYSBtb3N0IGltcHVkZW50IG1hbm5lcjsgaWYgSSBwcm92ZSwgdGhhdCBSdWxsdXMsIGJ5IGhpcyBsYXcsCiAgICAgICBwcm92aWRlcyBzbyBjYXJlZnVsbHkgZm9yIHRoZSBjYXNlIG9mIHRob3NlIGxhbmRzIHdoaWNoIGhhdmUgYmVlbiBhbGxvdHRlZCBieSBTdWxsYSwgdGhhdCBpdAogICAgICAgaXMgcGVyZmVjdGx5IHBsYWluIHRoYXQgdGhhdCBsYXcgd2FzIGRyYXduIHVwLCBub3QgYnkgYW55IHByb3RlY3RvciBvZiB5b3VyIGludGVyZXN0cywgYnV0IGJ5CiAgICAgICB0aGUgdHdpbiBsYXcgb2YgVmFsZ2l1czsgaXMgdGhlcmUgdGhlbiBhbnkgcmVhc29uIGF0IGFsbCwgd2h5IGhlIHNob3VsZCBkaXNwYXJhZ2Ugbm90IG9ubHkgbXkKICAgICAgIGRpbGlnZW5jZSBhbmQgcHJ1ZGVuY2UsIGJ1dCB5b3VycyBhbHNvLCBieSB0aGUgYWNjdXNhdGlvbnMgd2hpY2ggaGUgaGFzIGVtcGxveWVkIGFnYWluc3QgbWUKICAgICAgIGluIG15IGFic2VuY2U/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.2.4'] = ""
translation['3.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBPZiBhbGwgbGF3cyBJIHRoaW5rIHRoYXQgb25lIGlzIHRoZSBtb3N0IHVuanVzdCBhbmQgdGhlCiAgICAgICBtb3N0IHVubGlrZSBhIGxhdywgd2hpY2ggTHVjaXVzIEZsYWNjdXMsIHRoZSBpbnRlcnJleCwgcGFzc2VkIHJlc3BlY3RpbmcKICAgICAgIFN1bGxh4oCU4oCcVGhhdCBldmVyeXRoaW5nIHdoaWNoIGhlIGhhcyBkb25lIHNob3VsZCBiZSByYXRpZmllZC7igJ0KICAgICAgIEZvciwgYXMgaW4gb3RoZXIgc3RhdGVzLCB3aGVuIHR5cmFudHMgYXJlIGVzdGFibGlzaGVkLCBhbGwgbGF3cyBhcmUgZXh0aW5ndWlzaGVkIGFuZAogICAgICAgZGVzdHJveWVkIHRoaXMgbWFuIGVzdGFibGlzaGVkIGEgdHlyYW50IG9mIHRoZSByZXB1YmxpYyBieSBsYXcuIEl0IGlzIGFuIGludmlkaW91cyBsYXcsIGFzIEkKICAgICAgIHNhaWQgYmVmb3JlOyBidXQgc3RpbGwgaXQgaGFzIHNvbWUgZXhjdXNlLiBGb3IgaXQgYXBwZWFycyB0byBiZSBhIGxhdyBub3QgdXJnZWQgYnkgdGhlIG1hbgogICAgICAgYnV0IGJ5IHRoZSB0aW1lLiBXaGF0IHNoYWxsIHdlIHNheSBpZiB0aGlzIGxhdyBpcyBhIGZhciBtb3JlIGltcHVkZW50IG9uZT8gPC90cmFuc2xhdGlvbj4="
translation['3.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgYnkgdGhlIFZhbGVyaWFuIGFuZCBDb3JuZWxpYW4gbGF3IHRoaXMgcG93ZXIgaXMgdGFrZW4gYXdheSBhdCB0aGUgc2FtZQogICAgICAgdGltZSB0aGF0IGl0IGlzIGdpdmVuLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMgcHJvYmFibHkgc29tZSBjb3JydXB0aW9uIGluIHRoZSB0ZXh0CiAgICAgICAgaGVyZSBhbmQgaW4gdGhlIG5leHQgZmV3IHNlbnRlbmNlczsgT3JlbGxpdXMgbWFya3MgdGhlbSB3aXRoIGEgZGFnZ2VyLjwvbm90ZT4gQW4gaW1wdWRlbnQKICAgICAgIGNvdXJ0aW5nIG9mIHRoZSBwZW9wbGUgaXMgam9pbmVkIHdpdGggYSBiaXR0ZXIgaW5qdXJ5IGRvbmUgdG8gdGhlbS4gQnV0IHN0aWxsIGEgbWFuIGZyb20gd2hvbQogICAgICAgYW55IHByb3BlcnR5IGlzIHRha2VuIGFsd2F5cyBoYXMgc29tZSBob3BlIGFyaXNpbmcgZnJvbSB0aG9zZSBsYXdzOyBhbmQgaGUsIHRvIHdob20gYW55IGlzCiAgICAgICBnaXZlbiwgaGFzIHNvbWUgc2NydXBsZXMuIFRoZSBwcm92aXNpb24gaW4gUnVsbHVzJ3MgbGF3IGlzLCDigJxXaGF0ZXZlciBoYXMgYmVlbiBkb25lCiAgICAgICBzaW5jZSB0aGUgY29uc3Vsc2hpcCBvZiBDYWl1cyBNYXJpdXMgYW5kIENuYWV1cyBQYXBpcml1cy7igJ0gSG93IGNhcmVmdWxseSBkb2VzIGhlCiAgICAgICBhdm9pZCBzdXNwaWNpb24sIHdoZW4gaGUgbmFtZXMgdGhvc2UgY29uc3VscyBtb3N0IGVzcGVjaWFsbHkgd2hvIHdlcmUgdGhlIGdyZWF0ZXN0CiAgICAgICBhZHZlcnNhcmllcyBvZiBTdWxsYS4gRm9yLCBpZiBoZSBoYWQgbmFtZWQgU3VsbGEsIGhlIHRob3VnaHQgdGhhdCB0aGF0IHdvdWxkIGhhdmUgYmVlbiBhCiAgICAgICBwYWxwYWJsZSBhbmQgYWxzbyBhbiBpbnZpZGlvdXMgbWVhc3VyZS4gQW5kIHlldCwgd2hpY2ggb2YgeW91IGRpZCBoZSBleHBlY3QgdG8gYmUgc28gc3R1cGlkLAogICAgICAgYXMgbm90IHRvIGJlIGFibGUgdG8gcmVjb2xsZWN0IHRoYXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgdGhvc2UgbWVuIFN1bGxhCiAgICAgICBiZWNhbWUgZGljdGF0b3I/IDwvdHJhbnNsYXRpb24+"
translation['3.2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IHRoZW4gZG9lcyB0aGlzIE1hcmlhbiB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlIHNheSwgd2hlbiBoZSBpcyB0cnlpbmcgdG8gbWFrZSB1cywgd2hvIGFyZSBTdWxsYSdzIGZyaWVuZHMsIHVucG9wdWxhcj8KICAgICAgIOKAnFdoYXRldmVyIGhhcyBiZWVuIGdpdmVuLCBvciBhc3NpZ25lZCwgb3Igc29sZCwgb3IgZ3JhbnRlZCBieSBwdWJsaWMgYXV0aG9yaXR5LAogICAgICAgd2hldGhlciBsYW5kcywgb3IgaG91c2VzLCBvciBsYWtlcywgb3IgbWFyc2hlcywgb3Igc2l0ZXMsIG9yIHByb3BlcnRpZXMs4oCdIChoZSBoYXMKICAgICAgIG9taXR0ZWQgdG8gbWVudGlvbiB0aGUgc2t5IGFuZCBzZWEsIGJ1dCBoZSBoYXMgb21pdHRlZCBub3RoaW5nIGVsc2UsKSDigJxzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q2FyYm88L3N1cm5hbWU+PC9wZXJzTmFtZT4u4oCdIEJ5IHdob20sCiAgICAgICBPIFJ1bGx1cz8gV2hvIGhhcyBhbGxvdHRlZCBhbnl0aGluZyB3aGF0ZXZlciBzaW5jZSB0aGUgQ29uc3Vsc2hpcCBvZiBNYXJpdXMgYW5kIENhcmJvPyBXaG8KICAgICAgIGhhcyBnaXZlbiBhbnl0aGluZywgd2hvIGhhcyBncmFudGVkIGFueXRoaW5nLCBleGNlcHQgU3VsbGE/IOKAnExldCBhbGwgdGhvc2UgdGhpbmdzCiAgICAgICByZW1haW4gaW4gdGhlIHNhbWUgY29uZGl0aW9uLuKAnSBJbiB3aGF0IGNvbmRpdGlvbj8gSGUgaXMgdW5kZXJtaW5pbmcgc29tZXRoaW5nIG9yCiAgICAgICBvdGhlci4gVGhpcyBvdmVyIGFjdGl2ZSBhbmQgdG9vIGVuZXJnZXRpYyB0cmlidW5lIG9mIHRoZSBwZW9wbGUgaXMgcmVzY2luZGluZyB0aGUgYWN0cyBvZgogICAgICAgU3VsbGEuIOKAnEFzIHRob3NlIHRoaW5ncyB3aGljaCBoYXZlIGJlY29tZSBwcml2YXRlIHByb3BlcnR5IGFjY29yZGluZyB0byB0aGUgbW9zdAogICAgICAgcmVndWxhciBwb3NzaWJsZSBjb3Vyc2Ugb2YgbGF3LuKAnSBBcmUgdGhleSB0aGVuIHRvIGJlIGhlbGQgb24gYSBzdXJlciB0ZW51cmUgdGhhbiBhCiAgICAgICBtYW4ncyBwYXRlcm5hbCBhbmQgaGVyZWRpdGFyeSBwcm9wZXJ0eT8gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNhcmJvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['3.2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBKdXN0IHNvLiBCdXQgdGhlCiAgICAgICBWYWxlcmlhbiBsYXcgZG9lcyBub3Qgc2F5IHRoaXM7IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjI1NzA2MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMjU3MDYxIj5Db3JuZWxpYW48L3BsYWNlTmFtZT4gbGF3cwogICAgICAgZG8gbm90IHNhbmN0aW9uIHRoaXM7IFN1bGxhIGhpbXNlbGYgZG9lcyBub3QgZGVtYW5kIHRoaXMuIElmIHRob3NlIGxhbmRzIGhhdmUgYW55IGNvbm5lY3Rpb24KICAgICAgIHdpdGggbGVnYWwgcmlnaHQsIGlmIHRoZXkgaGF2ZSBhbnkgcmVzZW1ibGFuY2UgdG8gcHJpdmF0ZSBwcm9wZXJ0eSwgaWYgdGhleSBoYXZlIHRoZSBsZWFzdAogICAgICAgaG9wZSBvZiBiZWNvbWluZyBwZXJtYW5lbnQgcHJvcGVydHksIHRoZW4gdGhlcmUgaXMgbm90IG9uZSBvZiB0aG9zZSBtZW4gc28gaW1wdWRlbnQgYXMgbm90IHRvCiAgICAgICB0aGluayB0aGF0IGhlIGlzIGV4Y2VsbGVudGx5IHdlbGwgdHJlYXRlZC4gQnV0IHlvdSwgTyBSdWxsdXMsIHdoYXQgaXMgeW91ciBvYmplY3Q/IFRoYXQgdGhleQogICAgICAgbWF5IHJldGFpbiB3aGF0IHRoZXkgaGF2ZSBnb3Q/IFdobyBoaW5kZXJzIHRoZW0/IFRoYXQgdGhleSBtYXkgcmV0YWluIGl0IGFzIHByaXZhdGUgcHJvcGVydHk/CiAgICAgICBCdXQgdGhlIGxhdyBpcyBmcmFtZWQgaW4gc3VjaCBhIHdheSB0aGF0IHRoZSBmYXJtIG9mIHlvdXIgZmF0aGVyLWluLWxhdyBpbiB0aGUgSGlycGluZQogICAgICAgZGlzdHJpY3QsIG9yIHRoZSB3aG9sZSBIaXJwaW5lIGRpc3RyaWN0LCBmb3IgaGUgaXMgaW4gcG9zc2Vzc2lvbiBvZiBhbGwgb2YgaXQsIGlzIGhlbGQgYnkgaGltCiAgICAgICBvbiBhIHN1cmVyIHRlbnVyZSB0aGFuIG15IHBhdGVybmFsIGhlcmVkaXRhcnkgZXN0YXRlIGF0IEFycGludW0uIEZvciB0aGF0IGlzIHRoZSBlZmZlY3Qgb2YKICAgICAgIHRoZSBwcm92aXNpb24gb2YgeW91ciBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['3.2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhvc2UgZmFybXMgaW4gdHJ1dGggYXJlCiAgICAgICBoZWxkIGJ5IHRoZSBiZXN0IHJpZ2h0LCB3aGljaCBhcmUgaGVsZCBvbiB0aGUgYmVzdCBjb25kaXRpb25zLiBGcmVlIHRlbnVyZXMgYXJlIGhlbGQgYnkgYQogICAgICAgYmV0dGVyIHRlbnVyZSB0aGFuIHNlcnZpbGUgb25lcy4gQnkgdGhpcyBjbGF1c2UgYWxsIHRlbnVyZXMgd2hpY2ggaGF2ZSBoaXRoZXJ0byBiZWVuIHNlcnZpbGUKICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2VydmEgcHJhZWRpYTwvZm9yZWlnbj4gbWVhbiBzdWNoIGVzdGF0ZXMgYXMgd2VyZQogICAgICAgIGxpYWJsZSB0byBjZXJ0YWluIGJ1cmRlbnMgb3IgZHV0aWVzOyBoZWxkIGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiBjZXJ0YWluIHNlcnZpY2VzLjwvbm90ZT4KICAgICAgIHRlbnVyZXMgd2lsbCBiZSBzbyBubyBsb25nZXIuIEVuZnJhbmNoaXNlZCBlc3RhdGVzIGFyZSBpbiBhIGJldHRlciBjb25kaXRpb24gdGhhbiB0aG9zZSB3aGljaAogICAgICAgYXJlIGxpYWJsZSB0byBubyBvYmxpZ2F0aW9uczsgYnkgdGhlIHNhbWUgY2xhdXNlIGFsbCBsYW5kcyBzdWJqZWN0IHRvIHRoZSBwYXltZW50IG9mIGFueQogICAgICAgZmluZSwgaWYgb25seSB0aGV5IHdlcmUgYXNzaWduZWQgYnkgU3VsbGEsIGFyZSByZWxlYXNlZCBmcm9tIHN1Y2ggcGF5bWVudHMuIExhbmRzIHdoaWNoIGFyZQogICAgICAgZXhlbXB0IGZyb20gcGF5bWVudCBhcmUgaW4gYSBiZXR0ZXIgY29uZGl0aW9uIHRoYW4gdGhvc2Ugd2hpY2ggcGF5IGEgZmluZS4gSSwgaW4gbXkgVHVzY3VsYW4KICAgICAgIHZpbGxhLCBtdXN0IHBheSBhIHRheCBmb3IgdGhlIENyYWJyYW4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2VydmEgcHJhZWRpYTwvZm9yZWlnbj4gbWVhbiBzdWNoIGVzdGF0ZXMgYXMgd2VyZQogICAgICAgIGxpYWJsZSB0byBjZXJ0YWluIGJ1cmRlbnMgb3IgZHV0aWVzOyBoZWxkIGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiBjZXJ0YWluIHNlcnZpY2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNyYWJyYQogICAgICAgICBhcXVhPC9mb3JlaWduPiBpcyBzZXZlcmFsIHRpbWVzIG1lbnRpb25lZCBieSBDaWNlcm8gaW4gaGlzIGxldHRlcnMgYXMgYSBzbWFsbCBhcnRpZmljaWFsCiAgICAgICAgc3RyZWFtIHJ1bm5pbmcgdGhyb3VnaCBoaXMgVHVzY3VsYW4gcHJvcGVydHkuIEhlIGV2ZW4gaGFkIGEgbGF3LXN1aXQgcmVzcGVjdGluZyBpdCwgYXMKICAgICAgICBhcHBlYXJzIGZyb20gb25lIG9mIGhpcyBsZXR0ZXJzLiA8L25vdGU+IHdhdGVyLCBiZWNhdXNlIEkgcmVjZWl2ZWQgbXkgZXN0YXRlIHN1YmplY3QgdG8gdGhpcwogICAgICAgbGlhYmlsaXR5OyBidXQsIGlmIEkgaGFkIG9ubHkgaGFkIHRoZSBsYW5kIGdpdmVuIG1lIGJ5IFN1bGxhLCBJIHNob3VsZCBub3QgcGF5IGl0LCBhY2NvcmRpbmcKICAgICAgIHRvIHRoZSBsYXcgb2YgUnVsbHVzLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5DcmFicmEKICAgICAgICAgYXF1YTwvZm9yZWlnbj4gaXMgc2V2ZXJhbCB0aW1lcyBtZW50aW9uZWQgYnkgQ2ljZXJvIGluIGhpcyBsZXR0ZXJzIGFzIGEgc21hbGwgYXJ0aWZpY2lhbAogICAgICAgIHN0cmVhbSBydW5uaW5nIHRocm91Z2ggaGlzIFR1c2N1bGFuIHByb3BlcnR5LiBIZSBldmVuIGhhZCBhIGxhdy1zdWl0IHJlc3BlY3RpbmcgaXQsIGFzCiAgICAgICAgYXBwZWFycyBmcm9tIG9uZSBvZiBoaXMgbGV0dGVycy4gPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlIHlvdSwgTyBSb21hbnMsIG1vdmVkIGVpdGhlciBieSB0aGUgaW1wdWRlbmNlIG9mIHRoZSBsYXcgb3Igb2YgdGhlIHNwZWVjaCwgYXMgaW5kZWVkCiAgICAgICB5b3UgbXVzdCBiZSBmcm9tIHRoZSBuYXR1cmUgb2YgdGhlIGNhc2U7IGJ5IHRoZSBpbXB1ZGVuY2Ugb2YgdGhlIGxhdywgd2hpY2ggZ2l2ZXMgYSBiZXR0ZXIKICAgICAgIHRpdGxlIHRvIGVzdGF0ZXMgcG9zc2Vzc2VkIGJ5IHZpcnR1ZSBvZiBTdWxsYSdzIGRvbmF0aW9uIHRoYW4gdG8gaGVyZWRpdGFyeSBwcm9wZXJ0eTsgYnkgdGhlCiAgICAgICBpbXB1ZGVuY2Ugb2YgdGhlIHNwZWVjaCB3aGljaCwgaW4gc3VjaCBhIGNhdXNlIGlzIHRoYXQsIGRhcmVzIHRvIGFjY3VzZSBhbnkgb25lLCBhbmQgeWV0CiAgICAgICB2ZWhlbWVudGx5LCB0b28gdmVoZW1lbnRseSwgdG8gZGVmZW5kIHRoZSBwcmluY2lwbGVzIG9mIFN1bGxhLiBCdXQgaWYgdGhlIGxhdyBvbmx5IHJhdGlmaWVkCiAgICAgICBhbGwgdGhlIGFsbG90bWVudHMgd2hpY2ggaGFkIGJlZW4gZ2l2ZW4gYnkgU3VsbGEsIEkgc2hvdWxkIG5vdCBzYXkgYSB3b3JkLCBwcm92aWRlZCBoZSB3b3VsZAogICAgICAgY29uZmVzcyBoaW1zZWxmIHRvIGJlIGEgcGFydGlzYW4gb2YgU3VsbGEncy4gQnV0IGhlIGRvZXMgbm90IG9ubHkgcHJvdGVjdCB0aGVpciBleGlzdGluZwogICAgICAgaW50ZXJlc3RzLCBidXQgaGUgZXZlbiBhZGRzIHRvIHRoZWlyIHByZXNlbnQgcG9zc2Vzc2lvbnMgc29tZSBzb3J0IG9mIGdpZnQuIEFuZCBoZSwgd2hvCiAgICAgICBhY2N1c2VzIG1lLCBzYXlpbmcgdGhhdCB0aGUgcG9zc2Vzc2lvbnMgcmVzdGluZyBvbiBTdWxsYSdzIHRpdGxlIGFyZSBkZWZlbmRlZCBieSBtZSwgbm90IG9ubHkKICAgICAgIGNvbiBmaXJtcyB0aGVtIGhpbSBzZWxsLCBidXQgZXZlbiBpbnN0aXR1dGVzIGZyZXNoIGFsbG90bWVudHMsIGFuZCByaXNlcyB1cCBhbW9uZyB1cyBhIG5ldwogICAgICAgU3VsbGEuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGp1c3QgdGFrZSBub3RpY2Ugd2hhdCBncmVhdCBncmFudHMgb2YgbGFuZHMKICAgICAgIHRoaXMgcmVwcm92ZXIgb2Ygb3VycyBlbmRlYXZvdXJzIHRvIG1ha2UgYnkgb25lIHNpbmdsZSB3b3JkLiDigJxXaGF0ZXZlciBoYXMgYmVlbgogICAgICAgZ2l2ZW4sIG9yIHByZXNlbnRlZCwgb3IgZ3JhbnRlZCwgb3Igc29sZOKAneKAlEkgY2FuIGJlYXIgaXQ7IEkgaGVhciBpdDsgd2hhdAogICAgICAgY29tZXMgbmV4dD/igJTigJxzaGFsbCBiZSBoZWxkIGFzIGFic29sdXRlIHByb3BlcnR5LuKAnSBoYXMgYSB0cmlidW5lCiAgICAgICBvZiB0aGUgcGVvcGxlIHZlbnR1cmVkIHRvIHByb3Bvc2UgdGhhdCB3aGF0ZXZlciBhbnkgb25lIGhhcyBiZWNvbWUgcG9zc2Vzc2VkIG9mJyBzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5DYXJibzwvc3VybmFtZT48L3BlcnNOYW1lPiwgaGUgc2hhbGwgaG9sZCBieSB0aGUKICAgICAgIGZpcm1lc3QgcmlnaHQgdGhhdCBhbnkgb25lIGNhbiBob2xkIHByaXZhdGUgcHJvcGVydHk/IFN1cHBvc2UgaGUgZHJvdmUgb3V0IHRoZSBmb3JtZXIKICAgICAgIHByb3ByaWV0b3JzIGJ5IHZpb2xlbmNlPyBTdXBwb3NlIGhlIGJlY2FtZSBwb3NzZXNzZWQgb2YgaXQgaW4gc29tZSB1bmRlcmhhbmQgbWFubmVyLCBvciBvbmx5CiAgICAgICBieSBzb21lIG9uZSdzIHBlcm1pc3Npb24gZm9yIGEgdGltZT8gQnkgdGhpcyBsYXcgdGhlbiBhbGwgY2l2aWwgcmlnaHRzLCBhbGwgbGVnaXRpbWF0ZQogICAgICAgdGl0bGVzLCBhbGwgaW50ZXJkaWN0cyBvZiB0aGUgcHJhZXRvcnMgd2lsbCBiZSBwdXQgYW4gZW5kIHRvLiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPiBJdCBpcyBubyB1bmltcG9ydGFudCBjYXNlLCBpdCBpcyBubyBpbnNpZ25pZmljYW50IGluanVyeSB0aGF0IGlzIGNvbmNlYWxlZAogICAgICAgdW5kZXIgdGhpcyBleHByZXNzaW9uLCBPIFJvbWFucy4gRm9yIHRoZXJlIHdlcmUgbWFueSBlc3RhdGVzIGNvbmZpc2NhdGVkIGJ5IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjI1NzA2MSIga2V5PSJ0Z24sMjI1NzA2MSI+Q29ybmVsaWFuPC9wbGFjZU5hbWU+IGxhdywgd2hpY2ggd2VyZSBuZXZlciBhc3NpZ25lZCBvciBzb2xkIHRvIGFueSBvbmUsCiAgICAgICBidXQgd2hpY2ggYXJlIG9jY3VwaWVkIGluIHRoZSBtb3N0IGltcHVkZW50IG1hbm5lciBieSBhIGZldyBtZW4sIFRoZXNlIGFyZSB0aGUgbWVuIGZvciB3aG9tCiAgICAgICBoZSBwcm92aWRlcywgdGhlc2UgYXJlIHRoZSBtZW4gd2hvbSBoZSBkZWZlbmRzLCB3aG9tIGhlIG1ha2VzIHByaXZhdGUgcHJvcHJpZXRvcnMuIFRoZXNlCiAgICAgICBsYW5kcywgSSBzYXksIHdoaWNoIFN1bGxhIGdhdmUgdG8gbm8gb25lLCBSdWxsdXMgZG9lcyBub3QgY2hvb3NlIHRvIGFzc2lnbiB0byB5b3UsIGJ1dCB0bwogICAgICAgc2FjcmlmaWNlIHRvIHRoZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZW0uIEkgYXNrIHRoZSByZWFzb24gd2h5IHlvdSBzaG91bGQgYWxsb3cKICAgICAgIHRob3NlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwgaW4gdGhlIHR3byBTcGFpbnMsIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgd2hpY2ggeW91cgogICAgICAgYW5jZXN0b3JzIGFjcXVpcmVkIGZvciB5b3UsIHRvIGJlIHNvbGQsIHdoZW4geW91IHNlZSB0aG9zZSBsYW5kcyB3aGljaCBhcmUgeW91ciBvd24KICAgICAgIHNhY3JpZmljZWQgYnkgdGhlIHNhbWUgbGF3IHRvIHRoZWlyIGV4aXN0aW5nIG9jY3VwaWVycz8gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIE5vdyB5b3Ugd2lsbCB1bmRlcnN0YW5kIHRoZSB3aG9sZSBsYXcsIGFuZCBwZXJjZWl2ZSwgPHBiIG49IjI2MiIgLz4gdGhhdCBpdCBpcyBmcmFtZWQgdG8KICAgICAgIHNlY3VyZSB0aGUgcG93ZXIgb2YgYSBmZXcgaW5kaXZpZHVhbHMsIGFuZCBhZG1pcmFibHkgYWRhcHRlZCB0byB0aGUgY2lyY3Vtc3RhbmNlcyBvZiBTdWxsYSdzCiAgICAgICBhbGxvdG1lbnRzLiBGb3IgdGhpcyBtYW4ncyBmYXRoZXItaW4tbGF3IGlzIGEgbW9zdCBleGNlbGxlbnQgbWFuLCBub3IgYW0gSSBzYXlpbmcgYSB3b3JkCiAgICAgICBhZ2FpbnN0IGhpcyBjaGFyYWN0ZXI7IGJ1dCBJIGFtIGRpc2N1c3NpbmcgdGhlIGltcHVkZW5jZSBvZiBoaXMgc29uLWluLWxhdy4gRm9yIGhlIHdpc2hlcyB0bwogICAgICAga2VlcCB3aGF0IGhlIGhhcyBnb3QgcG9zc2Vzc2lvbiBvZiwgYW5kIGRvZXMgbm90IGNvbmNlYWwgdGhhdCBoZSBpcyBvbmUgb2YgU3VsbGEncyBwYXJ0eS4KICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGp1c3QgdGFrZSBub3RpY2Ugd2hhdCBncmVhdCBncmFudHMgb2YgbGFuZHMKICAgICAgIHRoaXMgcmVwcm92ZXIgb2Ygb3VycyBlbmRlYXZvdXJzIHRvIG1ha2UgYnkgb25lIHNpbmdsZSB3b3JkLiDigJxXaGF0ZXZlciBoYXMgYmVlbgogICAgICAgZ2l2ZW4sIG9yIHByZXNlbnRlZCwgb3IgZ3JhbnRlZCwgb3Igc29sZOKAneKAlEkgY2FuIGJlYXIgaXQ7IEkgaGVhciBpdDsgd2hhdAogICAgICAgY29tZXMgbmV4dD/igJTigJxzaGFsbCBiZSBoZWxkIGFzIGFic29sdXRlIHByb3BlcnR5LuKAnSBoYXMgYSB0cmlidW5lCiAgICAgICBvZiB0aGUgcGVvcGxlIHZlbnR1cmVkIHRvIHByb3Bvc2UgdGhhdCB3aGF0ZXZlciBhbnkgb25lIGhhcyBiZWNvbWUgcG9zc2Vzc2VkIG9mJyBzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q2FyYm88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGhlIHNoYWxsIGhvbGQgYnkgdGhlCiAgICAgICBmaXJtZXN0IHJpZ2h0IHRoYXQgYW55IG9uZSBjYW4gaG9sZCBwcml2YXRlIHByb3BlcnR5PyBTdXBwb3NlIGhlIGRyb3ZlIG91dCB0aGUgZm9ybWVyCiAgICAgICBwcm9wcmlldG9ycyBieSB2aW9sZW5jZT8gU3VwcG9zZSBoZSBiZWNhbWUgcG9zc2Vzc2VkIG9mIGl0IGluIHNvbWUgdW5kZXJoYW5kIG1hbm5lciwgb3Igb25seQogICAgICAgYnkgc29tZSBvbmUncyBwZXJtaXNzaW9uIGZvciBhIHRpbWU/IEJ5IHRoaXMgbGF3IHRoZW4gYWxsIGNpdmlsIHJpZ2h0cywgYWxsIGxlZ2l0aW1hdGUKICAgICAgIHRpdGxlcywgYWxsIGludGVyZGljdHMgb2YgdGhlIHByYWV0b3JzIHdpbGwgYmUgcHV0IGFuIGVuZCB0by4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNhcmJvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['3.3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gSXQgaXMgbm8gdW5pbXBvcnRhbnQgY2FzZSwgaXQgaXMgbm8gaW5zaWduaWZpY2FudCBpbmp1cnkgdGhhdCBpcyBjb25jZWFsZWQKICAgICAgIHVuZGVyIHRoaXMgZXhwcmVzc2lvbiwgTyBSb21hbnMuIEZvciB0aGVyZSB3ZXJlIG1hbnkgZXN0YXRlcyBjb25maXNjYXRlZCBieSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDIyNTcwNjEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjI1NzA2MSI+Q29ybmVsaWFuPC9wbGFjZU5hbWU+IGxhdywgd2hpY2ggd2VyZSBuZXZlciBhc3NpZ25lZCBvciBzb2xkIHRvIGFueSBvbmUsCiAgICAgICBidXQgd2hpY2ggYXJlIG9jY3VwaWVkIGluIHRoZSBtb3N0IGltcHVkZW50IG1hbm5lciBieSBhIGZldyBtZW4sIFRoZXNlIGFyZSB0aGUgbWVuIGZvciB3aG9tCiAgICAgICBoZSBwcm92aWRlcywgdGhlc2UgYXJlIHRoZSBtZW4gd2hvbSBoZSBkZWZlbmRzLCB3aG9tIGhlIG1ha2VzIHByaXZhdGUgcHJvcHJpZXRvcnMuIFRoZXNlCiAgICAgICBsYW5kcywgSSBzYXksIHdoaWNoIFN1bGxhIGdhdmUgdG8gbm8gb25lLCBSdWxsdXMgZG9lcyBub3QgY2hvb3NlIHRvIGFzc2lnbiB0byB5b3UsIGJ1dCB0bwogICAgICAgc2FjcmlmaWNlIHRvIHRoZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZW0uIEkgYXNrIHRoZSByZWFzb24gd2h5IHlvdSBzaG91bGQgYWxsb3cKICAgICAgIHRob3NlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4sIGluIHRoZSB0d28gU3BhaW5zLCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aGljaCB5b3VyCiAgICAgICBhbmNlc3RvcnMgYWNxdWlyZWQgZm9yIHlvdSwgdG8gYmUgc29sZCwgd2hlbiB5b3Ugc2VlIHRob3NlIGxhbmRzIHdoaWNoIGFyZSB5b3VyIG93bgogICAgICAgc2FjcmlmaWNlZCBieSB0aGUgc2FtZSBsYXcgdG8gdGhlaXIgZXhpc3Rpbmcgb2NjdXBpZXJzPyA8L3RyYW5zbGF0aW9uPg=="
translation['3.3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIE5vdyB5b3Ugd2lsbCB1bmRlcnN0YW5kIHRoZSB3aG9sZSBsYXcsIGFuZCBwZXJjZWl2ZSwgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYyIiAvPiB0aGF0IGl0IGlzIGZyYW1lZCB0bwogICAgICAgc2VjdXJlIHRoZSBwb3dlciBvZiBhIGZldyBpbmRpdmlkdWFscywgYW5kIGFkbWlyYWJseSBhZGFwdGVkIHRvIHRoZSBjaXJjdW1zdGFuY2VzIG9mIFN1bGxhJ3MKICAgICAgIGFsbG90bWVudHMuIEZvciB0aGlzIG1hbidzIGZhdGhlci1pbi1sYXcgaXMgYSBtb3N0IGV4Y2VsbGVudCBtYW4sIG5vciBhbSBJIHNheWluZyBhIHdvcmQKICAgICAgIGFnYWluc3QgaGlzIGNoYXJhY3RlcjsgYnV0IEkgYW0gZGlzY3Vzc2luZyB0aGUgaW1wdWRlbmNlIG9mIGhpcyBzb24taW4tbGF3LiBGb3IgaGUgd2lzaGVzIHRvCiAgICAgICBrZWVwIHdoYXQgaGUgaGFzIGdvdCBwb3NzZXNzaW9uIG9mLCBhbmQgZG9lcyBub3QgY29uY2VhbCB0aGF0IGhlIGlzIG9uZSBvZiBTdWxsYSdzIHBhcnR5LgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgbm93LCBieSB5b3VyIGluc3RydW1lbnRhbGl0eSwgaW4gb3JkZXIgdGhhdCBoZSBtYXkgaGltc2VsZiBoYXZlIHdoYXQgYmUgaGFzIG5vdCBnb3QKICAgICAgIHdpc2hlcyB0byBlc3RhYmxpc2ggdGhvc2UgdGl0bGVzIHdoaWNoIGF0IHByZXNlbnQgYXJlIGRvdWJ0ZnVsLiBBbmQgYXMgaGUgaXMgbW9yZSBjb3ZldG91cwogICAgICAgdGhhbiBTdWxsYSBoaW1zZWxmLCBJIGFtIGFjY3VzZWQgb2YgZGVmZW5kaW5nIHRoZSBhY3Rpb25zIG9mIFN1bGxhIHdoaWNoIEkgYW0gcmVzaXN0aW5nLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gTXkgZmF0aGVyLWluLWxhdywgc2F5cyBoZSwgaGFzIHNvbWUgaGl0aGVydG8gZGVzZXJ0ZWQgYW5kCiAgICAgICBkaXN0YW50IGZpZWxkcy4gQnkgbXkgbGF3IGhlIHdpbGwgYmUgYWJsZSB0byBzZWxsIHRoZW0gYXQgaGlzIG93biBwcmljZS4gSGUgaG9sZHMgdGhlbSBhdAogICAgICAgcHJlc2VudCBieSBhbiB1bmNlcnRhaW4gdGl0bGU7IGluIGZhY3QgaGUgaGFzIG5vIHJpZ2h0IGF0IGFsbCB0byB0aGVtOiB0aGV5IHdpbGwgYmUgY29uZmlybWVkCiAgICAgICB0byBoaW0gYnkgdGhlIGJlc3QgcG9zc2libGUgdGl0bGUuIEhlIGhhcyB0aGVtIGFzIHB1YmxpYyBwcm9wZXJ0eTsgSSB3aWxsIG1ha2UgdGhlbSBwcml2YXRlCiAgICAgICBwcm9wZXJ0eS4gTGFzdGx5LCBoZSBzaGFsbCBwb3NzZXNzLCB3aXRob3V0IGhhdmluZyB0aGUgc2xpZ2h0ZXN0IGFueGlldHkgYWJvdXQgdGhlbSBmb3IgdGhlCiAgICAgICBmdXR1cmUsIHRob3NlIGZhcm1zIHdoaWNoIGJlIGhhcyBwcm9jdXJlZCAoYnkgdGhlIHByb3NjcmlwdGlvbiBvZiB0aGVpciBmb3JtZXIgb3duZXJzKSB0byBiZQogICAgICAgam9pbmVkIHRvIHRoZSBhZG1pcmFibGUgYW5kIHByb2R1Y3RpdmUgZXN0YXRlIHdoaWNoIGJlIGhhZCBpbiB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPiwgYmVpbmcgY29udGlndW91cyB0byBpdCBiZWZvcmU7IHNvIGFzIHRvIG1ha2UgYWxsCiAgICAgICB0aGUgZGlmZmVyZW50IGZhcm1zIGludG8gb25lIHVuaW50ZXJydXB0ZWQgZXN0YXRlIGFzIGZhciBhcyB0aGUgZXllIGNhbiByZWFjaDsgYW5kIHJlc3BlY3RpbmcKICAgICAgIHdoaWNoIGF0IHByZXNlbnQgaGUgaXMgbm90IHdpdGhvdXQgYXBwcmVoZW5zaW9uLiA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gTXkgZmF0aGVyLWluLWxhdywgc2F5cyBoZSwgaGFzIHNvbWUgaGl0aGVydG8gZGVzZXJ0ZWQgYW5kCiAgICAgICBkaXN0YW50IGZpZWxkcy4gQnkgbXkgbGF3IGhlIHdpbGwgYmUgYWJsZSB0byBzZWxsIHRoZW0gYXQgaGlzIG93biBwcmljZS4gSGUgaG9sZHMgdGhlbSBhdAogICAgICAgcHJlc2VudCBieSBhbiB1bmNlcnRhaW4gdGl0bGU7IGluIGZhY3QgaGUgaGFzIG5vIHJpZ2h0IGF0IGFsbCB0byB0aGVtOiB0aGV5IHdpbGwgYmUgY29uZmlybWVkCiAgICAgICB0byBoaW0gYnkgdGhlIGJlc3QgcG9zc2libGUgdGl0bGUuIEhlIGhhcyB0aGVtIGFzIHB1YmxpYyBwcm9wZXJ0eTsgSSB3aWxsIG1ha2UgdGhlbSBwcml2YXRlCiAgICAgICBwcm9wZXJ0eS4gTGFzdGx5LCBoZSBzaGFsbCBwb3NzZXNzLCB3aXRob3V0IGhhdmluZyB0aGUgc2xpZ2h0ZXN0IGFueGlldHkgYWJvdXQgdGhlbSBmb3IgdGhlCiAgICAgICBmdXR1cmUsIHRob3NlIGZhcm1zIHdoaWNoIGJlIGhhcyBwcm9jdXJlZCAoYnkgdGhlIHByb3NjcmlwdGlvbiBvZiB0aGVpciBmb3JtZXIgb3duZXJzKSB0byBiZQogICAgICAgam9pbmVkIHRvIHRoZSBhZG1pcmFibGUgYW5kIHByb2R1Y3RpdmUgZXN0YXRlIHdoaWNoIGJlIGhhZCBpbiB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LCBiZWluZyBjb250aWd1b3VzIHRvIGl0IGJlZm9yZTsgc28gYXMgdG8gbWFrZSBhbGwKICAgICAgIHRoZSBkaWZmZXJlbnQgZmFybXMgaW50byBvbmUgdW5pbnRlcnJ1cHRlZCBlc3RhdGUgYXMgZmFyIGFzIHRoZSBleWUgY2FuIHJlYWNoOyBhbmQgcmVzcGVjdGluZwogICAgICAgd2hpY2ggYXQgcHJlc2VudCBoZSBpcyBub3Qgd2l0aG91dCBhcHByZWhlbnNpb24uIDwvdHJhbnNsYXRpb24+"
translation['3.4.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgc2luY2UgSSBoYXZlIHNob3duIGZvciB3aGF0IHJlYXNvbiBhbmQgZm9yIHdob3NlIHNha2UgYmUgaGFzIHByb3Bvc2VkIHRoaXMsIGxldCBoaW0KICAgICAgIHNob3cgd2hldGhlciBJIGFtIGRlZmVuZGluZyBhbnkgcGFydGljdWxhciBwcm9wcmlldG9yLCB3aGlsZSBJIHJlc2lzdCB0aGlzIGFncmFyaWFuIGxhdy4gWW91CiAgICAgICBhcmUgc2VsbGluZyB0aGUgU2NhbnRpYW4gd29vZC4gVGhlIFJvbWFuIHBlb3BsZSBpcyBpbiBwb3NzZXNzaW9uIG9mIGl0LiBJIGFtIGRlZmVuZGluZyB0aGUKICAgICAgIFJvbWFuIHBlb3BsZS4gWW91IGFyZSBkaXZpZGluZyB0aGUgZGlzdHJpY3Qgb2YgQ2FtcGFuaWEgSXQgaXMgeW91LCBPIFJvbWFucywgd2hvIGFyZSBub3cgaXRzCiAgICAgICBwcm9wcmlldG9ycy4gSSB3aWxsIG5vdCBnaXZlIGl0IHVwLiBJbiB0aGUgbmV4dCBwbGFjZSwgSSBzZWUgcG9zc2Vzc2lvbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCBpbiB0aGUgb3RoZXIgcHJvdmluY2VzLCBwdXQgdXAgZm9yIHNhbGUgYW5kIGFkdmVydGlzZWQuIFRoZSBmYXJtcyBhcmUgeW91cnMsIHRoZQogICAgICAgcG9zc2Vzc2lvbnMgYXJlIHlvdXJzLCBPIFJvbWFucy4gSSB3aWxsIHJlc2lzdCBhbmQgb3Bwb3NlIHN1Y2ggYSBtZWFzdXJlOyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgb3VzdGVkIGZyb20gaXRzIHBvc3Nlc3Npb25zIGJ5IGFueSBvbmUsIHdoaWxlIEkgYW0gY29uc3VsLgogICAgICAgRXNwZWNpYWxseSB3aGVuIG5vIGFkdmFudGFnZSBpcyBzb3VnaHQgZm9yIHlvdSBieSB0aGUgcHJvY2VlZGluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgeW91IG91Z2h0IG5vIGxvbmdlciB0byBsaWUgdW5kZXIgdGhpcyBtaXN0YWtlLiBJcyBhbnkgb25lIG9mIHlvdSBhIG1hbgogICAgICAgaW5jbGluZWQgdG8gdmlvbGVuY2UsIG9yIGF0cm9jaXR5LCBvciBtdXJkZXI/IE5vdCBvbmUuIEFuZCwgYmVsaWV2ZSBtZSwgaXQgaXMgZm9yIHN1Y2ggYSByYWNlCiAgICAgICBvZiBtZW4gYXMgdGhhdCB0aGF0IHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICB0aGF0IGJlYXV0aWZ1bCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIHJlc2VydmVkLiBJdCBpcyBhZ2FpbnN0CiAgICAgICB5b3UsIGFnYWluc3QgeW91ciBsaWJlcnR5LCBhZ2FpbnN0IENuYWV1cyBQb21wZWl1cyB0aGF0IGFuIGFybXkgaXMgYmVpbmcgcmFpc2VkLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIGJlaW5nIGdvdCByZWFkeSBpbiBvcHBvc2l0aW9uIHRvIHRoaXMgY2l0eTsgYmFuZHMKICAgICAgIG9mIGF1ZGFjaW91cyBtZW4gYXJlIGJlaW5nIGVxdWlwcGVkIGFnYWluc3QgeW91OyB0ZW4gZ2VuZXJhbHMgYXJlIGJlaW5nIGFwcG9pbnRlZCB0bwogICAgICAgY291bnRlcmJhbGFuY2UgQ25hZXVzIFBvbXBlaXVzLiBMZXQgdGhlbSBtZWV0IG1lIGZhY2UgdG8gZmFjZSwgYW5kIHNpbmNlIHRoZXkgaGF2ZSBzdW1tb25lZAogICAgICAgbWUgdG8gdGhpcyBhc3NlbWJseSBvZiB5b3VycywgYXQgeW91ciByZXF1ZXN0IGxldCB0aGVtIGhlcmUgYXJndWUgdGhlIGNhc2Ugd2l0aCBtZS48L3A+CgkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCBpbiB0aGUgb3RoZXIgcHJvdmluY2VzLCBwdXQgdXAgZm9yIHNhbGUgYW5kIGFkdmVydGlzZWQuIFRoZSBmYXJtcyBhcmUgeW91cnMsIHRoZQogICAgICAgcG9zc2Vzc2lvbnMgYXJlIHlvdXJzLCBPIFJvbWFucy4gSSB3aWxsIHJlc2lzdCBhbmQgb3Bwb3NlIHN1Y2ggYSBtZWFzdXJlOyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgb3VzdGVkIGZyb20gaXRzIHBvc3Nlc3Npb25zIGJ5IGFueSBvbmUsIHdoaWxlIEkgYW0gY29uc3VsLgogICAgICAgRXNwZWNpYWxseSB3aGVuIG5vIGFkdmFudGFnZSBpcyBzb3VnaHQgZm9yIHlvdSBieSB0aGUgcHJvY2VlZGluZy4gPC90cmFuc2xhdGlvbj4="
translation['3.4.16'] = ""
translation['1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4sIE8gQ2F0aWxpbmUsIGRvIHlvdSBtZWFuIHRvIGNlYXNlIGFidXNpbmcgb3VyIHBhdGllbmNlPyBIb3cgbG9uZyBpcyB0aGF0IG1hZG5lc3Mgb2YKICAgICAgIHlvdXJzIHN0aWxsIHRvIG1vY2sgdXM/IFdoZW4gaXMgdGhlcmUgdG8gYmUgYW4gZW5kIG9mIHRoYXQgdW5icmlkbGVkIGF1ZGFjaXR5IG9mIHlvdXJzLAogICAgICAgc3dhZ2dlcmluZyBhYm91dCBhcyBpdCBkb2VzIG5vdz8gRG8gbm90IHRoZSBuaWdodGx5IGd1YXJkcyBwbGFjZWQgb24gdGhlIFBhbGF0aW5lCiAgICAgICBIaWxs4oCUZG8gbm90IHRoZSB3YXRjaGVzIHBvc3RlZCB0aHJvdWdob3V0IHRoZSBjaXR54oCUZG9lcyBub3QgdGhlIGFsYXJtIG9mCiAgICAgICB0aGUgcGVvcGxlLCBhbmQgdGhlIHVuaW9uIG9mIGFsbCBnb29kIG1lbuKAlGRvZXMgbm90IHRoZSBwcmVjYXV0aW9uIHRha2VuIG9mCiAgICAgICBhc3NlbWJsaW5nIHRoZSBzZW5hdGUgaW4gdGhpcyBtb3N0IGRlZmVuc2libGUgcGxhY2XigJRkbyBub3QgdGhlIGxvb2tzIGFuZAogICAgICAgY291bnRlbmFuY2VzIG9mIHRoaXMgdmVuZXJhYmxlIGJvZHkgaGVyZSBwcmVzZW50LCBoYXZlIGFueSBlZmZlY3QgdXBvbiB5b3U/IERvIHlvdSBub3QgZmVlbAogICAgICAgdGhhdCB5b3VyIHBsYW5zIGFyZSBkZXRlY3RlZD8gRG8geW91IG5vdCBzZWUgdGhhdCB5b3VyIGNvbnNwaXJhY3kgaXMgYWxyZWFkeSBhcnJlc3RlZCBhbmQKICAgICAgIHJlbmRlcmVkIHBvd2VybGVzcyBieSB0aGUga25vd2xlZGdlIHdoaWNoIGV2ZXJ5IG9uZSBoZXJlIHBvc3Nlc3NlcyBvZiBpdD8gV2hhdCBpcyB0aGVyZSB0aGF0CiAgICAgICB5b3UgZGlkIGxhc3QgbmlnaHQsIHdoYXQgdGhlIG5pZ2h0IGJlZm9yZeKAlCB3aGVyZSBpcyBpdCB0aGF0IHlvdSB3ZXJl4oCUd2hvCiAgICAgICB3YXMgdGhlcmUgdGhhdCB5b3Ugc3VtbW9uZWQgdG8gbWVldCB5b3XigJR3aGF0IGRlc2lnbiB3YXMgdGhlcmUgd2hpY2ggd2FzIGFkb3B0ZWQgYnkKICAgICAgIHlvdSwgd2l0aCB3aGljaCB5b3UgdGhpbmsgdGhhdCBhbnkgb25lIG9mIHVzIGlzIHVuYWNxdWFpbnRlZD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNoYW1lIG9uIHRoZSBhZ2UgYW5kIG9uIGl0cyBwcmluY2lwbGVzISBUaGUgc2VuYXRlIGlzIGF3YXJlIG9mIHRoZXNlIHRoaW5nczsgdGhlIGNvbnN1bAogICAgICAgc2VlcyB0aGVtOyBhbmQgeWV0IHRoaXMgbWFuIGxpdmVzLiBMaXZlcyEgYXllLCBoZSBjb21lcyBldmVuIGludG8gdGhlIHNlbmF0ZS4gSGUgdGFrZXMgYSBwYXJ0CiAgICAgICBpbiB0aGUgcHVibGljIGRlbGliZXJhdGlvbnM7IGhlIGlzIHdhdGNoaW5nIGFuZCBtYXJraW5nIGRvd24gYW5kIGNoZWNraW5nIG9mZiBmb3Igc2xhdWdodGVyCiAgICAgICBldmVyeSBpbmRpdmlkdWFsIGFtb25nIHVzLiBBbmQgd2UsIGdhbGxhbnQgbWVuIHRoYXQgd2UgYXJlLCB0aGluayB0aGF0IHdlIGFyZSBkb2luZyBvdXIgZHV0eQogICAgICAgdG8gdGhlIHJlcHVibGljIGlmIHdlIGtlZXAgb3V0IG9mIHRoZSB3YXkgb2YgaGlzIGZyZW56aWVkIGF0dGFja3MuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Zb3Ugb3VnaHQsIE8gQ2F0aWxpbmUsIGxvbmcgYWdvIHRvIGhhdmUgYmVlbiBsZWQgdG8gZXhlY3V0aW9uIGJ5IGNvbW1hbmQgb2YgdGhlIGNvbnN1bC4KICAgICAgIFRoYXQgZGVzdHJ1Y3Rpb24gd2hpY2ggeW91IGhhdmUgYmVlbiBsb25nIHBsb3R0aW5nIGFnYWluc3QgdXMgb3VnaHQgdG8gaGF2ZSBhbHJlYWR5IGZhbGxlbiBvbgogICAgICAgeW91ciBvd24gaGVhZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQ/IERpZCBub3QgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgUHVibGl1cyBTY2lwaW8sIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIHdhcwogICAgICAgIFNjaXBpbyBOYXNpY2EsIHdobyBjYWxsZWQgb24gdGhlIGNvbnN1bCBNdWNpdXMgU2NhZXZvbGEgdG8gZG8gaGlzIGR1dHkgYW5kIHNhdmUgdGhlCiAgICAgICAgcmVwdWJsaWM7IGJ1dCBhcyBoZSByZWZ1c2VkIHRvIHB1dCBhbnkgb25lIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgU2NpcGlvIGNhbGxlZCBvbiBhbGwKICAgICAgICB0aGUgY2l0aXplbnMgdG8gZm9sbG93IGhpbSwgYW5kIHN0b3JtZWQgdGhlIENhcGl0b2wsIHdoaWNoIEdyYWNjaHVzIGhhZCBvY2N1cGllZCB3aXRoIGhpcwogICAgICAgIHBhcnR5LCBhbmQgc2xldyBtYW55IG9mIHRoZSBwYXJ0aXNhbnMgb2YgR3JhY2NodXMsIGFuZCBHcmFjY2h1cyBoaW1zZWxmLjwvbm90ZT4gdGhlIFBvbnRpZmV4CiAgICAgICBNYXhpbXVzLCBpbiBoaXMgY2FwYWNpdHkgb2YgYSBwcml2YXRlIGNpdGl6ZW4sIHB1dCB0byBkZWF0aCBUaWJlcml1cyBHcmFjY2h1cywgdGhvdWdoIGJ1dAogICAgICAgc2xpZ2h0bHkgdW5kZXJtaW5pbmcgdGhlIGNvbnN0aXR1dGlvbj8gQW5kIHNoYWxsIHdlLCB3aG8gYXJlIHRoZSBjb25zdWxzLCB0b2xlcmF0ZSBDYXRpbGluZSwKICAgICAgIG9wZW5seSBkZXNpcm91cyB0byBkZXN0cm95IHRoZSB3aG9sZSB3b3JsZCB3aXRoIGZpcmUgYW5kIHNsYXVnaHRlcj8gRm9yIEkgcGFzcyBvdmVyIG9sZGVyCiAgICAgICBpbnN0YW5jZXMsIHN1Y2ggYXMgaG93IENhaXVzIFNlcnZpbGl1cyBBaGFsYSB3aXRoIGhpcyBvd24gaGFuZCBzbGV3IFNwdXJpdXMgTWFlbGl1cyB3aGVuCiAgICAgICBwbG90dGluZyBhIHJldm9sdXRpb24gaW4gdGhlIHN0YXRlLiBUaGVyZSB3YXPigJR0aGVyZSB3YXMgb25jZSBzdWNoIHZpcnR1ZSBpbiB0aGlzCiAgICAgICByZXB1YmxpYywgdGhhdCBicmF2ZSBtZW4gd291bGQgcmVwcmVzcyBtaXNjaGlldm91cyBjaXRpemVucyB3aXRoIHNldmVyZXIgY2hhc3Rpc2VtZW50IHRoYW4KICAgICAgIHRoZSBtb3N0IGJpdHRlciBlbmVteS4gRm9yIHdlIGhhdmUgYSByZXNvbHV0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhpcyByZXNvbHV0aW9uIHdhcwogICAgICAgIGNvdWNoZWQgaW4gdGhlIGZvcm0gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmlkZWFudCBDb25zdWxlcyBuZXF1aWQgcmVzcHVibGljYSBkZXRyaW1lbnRpCiAgICAgICAgIGNhcGlhdDwvZm9yZWlnbj47IGFuZCBpdCBleGVtcHRlZCB0aGUgY29uc3VscyBmcm9tIGFsbCBvYmxpZ2F0aW9uIHRvIGF0dGVuZCB0byB0aGUgb3JkaW5hcnkKICAgICAgICBmb3JtcyBvZiBsYXcsIGFuZCBpbnZlc3RlZCB0aGVtIHdpdGggYWJzb2x1dGUgcG93ZXIgb3ZlciB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBjaXRpemVucyB3aG8KICAgICAgICB3ZXJlIGludHJpZ3VpbmcgYWdhaW5zdCB0aGUgcmVwdWJsaWMuIDwvbm90ZT4gb2YgdGhlIHNlbmF0ZSwgYSBmb3JtaWRhYmxlIGFuZCBhdXRob3JpdGF0aXZlCiAgICAgICBkZWNyZWUgYWdhaW5zdCB5b3UsIE8gQ2F0aWxpbmU7IHRoZSB3aXNkb20gb2YgdGhlIHJlcHVibGljIGlzIG5vdCBhdCBmYXVsdCwgbm9yIHRoZSBkaWduaXR5CiAgICAgICBvZiB0aGlzIHNlbmF0b3JpYWwgYm9keS4gV2UsIHdlIGFsb25lLOKAlEkgc2F5IGl0IG9wZW5seSwg4oCUd2UsIHRoZSBjb25zdWxzLAogICAgICAgYXJlIHdhaXRpbmcgaW4gb3VyIGR1dHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIHdhcwogICAgICAgIFNjaXBpbyBOYXNpY2EsIHdobyBjYWxsZWQgb24gdGhlIGNvbnN1bCBNdWNpdXMgU2NhZXZvbGEgdG8gZG8gaGlzIGR1dHkgYW5kIHNhdmUgdGhlCiAgICAgICAgcmVwdWJsaWM7IGJ1dCBhcyBoZSByZWZ1c2VkIHRvIHB1dCBhbnkgb25lIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgU2NpcGlvIGNhbGxlZCBvbiBhbGwKICAgICAgICB0aGUgY2l0aXplbnMgdG8gZm9sbG93IGhpbSwgYW5kIHN0b3JtZWQgdGhlIENhcGl0b2wsIHdoaWNoIEdyYWNjaHVzIGhhZCBvY2N1cGllZCB3aXRoIGhpcwogICAgICAgIHBhcnR5LCBhbmQgc2xldyBtYW55IG9mIHRoZSBwYXJ0aXNhbnMgb2YgR3JhY2NodXMsIGFuZCBHcmFjY2h1cyBoaW1zZWxmLjwvbm90ZT4gdGhlIFBvbnRpZmV4CiAgICAgICBNYXhpbXVzLCBpbiBoaXMgY2FwYWNpdHkgb2YgYSBwcml2YXRlIGNpdGl6ZW4sIHB1dCB0byBkZWF0aCBUaWJlcml1cyBHcmFjY2h1cywgdGhvdWdoIGJ1dAogICAgICAgc2xpZ2h0bHkgdW5kZXJtaW5pbmcgdGhlIGNvbnN0aXR1dGlvbj8gQW5kIHNoYWxsIHdlLCB3aG8gYXJlIHRoZSBjb25zdWxzLCB0b2xlcmF0ZSBDYXRpbGluZSwKICAgICAgIG9wZW5seSBkZXNpcm91cyB0byBkZXN0cm95IHRoZSB3aG9sZSB3b3JsZCB3aXRoIGZpcmUgYW5kIHNsYXVnaHRlcj8gRm9yIEkgcGFzcyBvdmVyIG9sZGVyCiAgICAgICBpbnN0YW5jZXMsIHN1Y2ggYXMgaG93IENhaXVzIFNlcnZpbGl1cyBBaGFsYSB3aXRoIGhpcyBvd24gaGFuZCBzbGV3IFNwdXJpdXMgTWFlbGl1cyB3aGVuCiAgICAgICBwbG90dGluZyBhIHJldm9sdXRpb24gaW4gdGhlIHN0YXRlLiBUaGVyZSB3YXPigJR0aGVyZSB3YXMgb25jZSBzdWNoIHZpcnR1ZSBpbiB0aGlzCiAgICAgICByZXB1YmxpYywgdGhhdCBicmF2ZSBtZW4gd291bGQgcmVwcmVzcyBtaXNjaGlldm91cyBjaXRpemVucyB3aXRoIHNldmVyZXIgY2hhc3Rpc2VtZW50IHRoYW4KICAgICAgIHRoZSBtb3N0IGJpdHRlciBlbmVteS4gRm9yIHdlIGhhdmUgYSByZXNvbHV0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhpcyByZXNvbHV0aW9uIHdhcwogICAgICAgIGNvdWNoZWQgaW4gdGhlIGZvcm0gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmlkZWFudCBDb25zdWxlcyBuZXF1aWQgcmVzcHVibGljYSBkZXRyaW1lbnRpCiAgICAgICAgIGNhcGlhdDwvZm9yZWlnbj47IGFuZCBpdCBleGVtcHRlZCB0aGUgY29uc3VscyBmcm9tIGFsbCBvYmxpZ2F0aW9uIHRvIGF0dGVuZCB0byB0aGUgb3JkaW5hcnkKICAgICAgICBmb3JtcyBvZiBsYXcsIGFuZCBpbnZlc3RlZCB0aGVtIHdpdGggYWJzb2x1dGUgcG93ZXIgb3ZlciB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBjaXRpemVucyB3aG8KICAgICAgICB3ZXJlIGludHJpZ3VpbmcgYWdhaW5zdCB0aGUgcmVwdWJsaWMuIDwvbm90ZT4gb2YgdGhlIHNlbmF0ZSwgYSBmb3JtaWRhYmxlIGFuZCBhdXRob3JpdGF0aXZlCiAgICAgICBkZWNyZWUgYWdhaW5zdCB5b3UsIE8gQ2F0aWxpbmU7IHRoZSB3aXNkb20gb2YgdGhlIHJlcHVibGljIGlzIG5vdCBhdCBmYXVsdCwgbm9yIHRoZSBkaWduaXR5CiAgICAgICBvZiB0aGlzIHNlbmF0b3JpYWwgYm9keS4gV2UsIHdlIGFsb25lLOKAlEkgc2F5IGl0IG9wZW5seSwg4oCUd2UsIHRoZSBjb25zdWxzLAogICAgICAgYXJlIHdhaXRpbmcgaW4gb3VyIGR1dHkuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZpZGVhbnQgQ29uc3VsZXMgbmVxdWlkIHJlc3B1YmxpY2EgZGV0cmltZW50aQogICAgICAgICBjYXBpYXQ8L2ZvcmVpZ24+OyBhbmQgaXQgZXhlbXB0ZWQgdGhlIGNvbnN1bHMgZnJvbSBhbGwgb2JsaWdhdGlvbiB0byBhdHRlbmQgdG8gdGhlIG9yZGluYXJ5CiAgICAgICAgZm9ybXMgb2YgbGF3LCBhbmQgaW52ZXN0ZWQgdGhlbSB3aXRoIGFic29sdXRlIHBvd2VyIG92ZXIgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnMgd2hvCiAgICAgICAgd2VyZSBpbnRyaWd1aW5nIGFnYWluc3QgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHNlbmF0ZSBvbmNlIHBhc3NlZCBhIGRlY3JlZSB0aGF0IEx1Y2l1cyBPcGltaXVzLCB0aGUgY29uc3VsLCBzaG91bGQgdGFrZSBjYXJlIHRoYXQgdGhlCiAgICAgICByZXB1YmxpYyBzdWZmZXJlZCBubyBpbmp1cnkuIE5vdCBvbmUgbmlnaHQgZWxhcHNlZC4gVGhlcmUgd2FzIHB1dCB0byBkZWF0aCwgb24gc29tZSBtZXJlCiAgICAgICBzdXNwaWNpb24gb2YgZGlzYWZmZWN0aW9uLCBDYWl1cyBHcmFjY2h1cywgYSBtYW4gd2hvc2UgZmFtaWx5IGhhZCBib3JuZSB0aGUgbW9zdCB1bmJsZW1pc2hlZAogICAgICAgcmVwdXRhdGlvbiBmb3IgbWFueSBnZW5lcmF0aW9ucy4gVGhlcmUgd2FzIHNsYWluIE1hcmN1cyBGdWx2aXVzLCBhIG1hbiBvZiBjb25zdWxhciByYW5rLCBhbmQKICAgICAgIGFsbCBoaXMgY2hpbGRyZW4uIEJ5IGEgbGlrZSBkZWNyZWUgb2YgdGhlIHNlbmF0ZSB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYyB3YXMgZW50cnVzdGVkIHRvCiAgICAgICBDYWl1cyBNYXJpdXMgYW5kIEx1Y2l1cyBWYWxlcml1cywgdGhlIGNvbnN1bHMuIERpZCBub3QgdGhlIHZlbmdlYW5jZSBvZiB0aGUgcmVwdWJsaWMsIGRpZCBub3QKICAgICAgIGV4ZWN1dGlvbiBvdmVydGFrZSBMdWNpdXMgU2F0dXJuaW51cywgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGFuZCBDYWl1cyBTZXJ2aWxpdXMsIHRoZQogICAgICAgcHJhZXRvciwgd2l0aG91dCB0aGUgZGVsYXkgb2Ygb25lIHNpbmdsZSBkYXk/IEJ1dCB3ZSwgZm9yIHRoZXNlIHR3ZW50eSBkYXlzIGhhdmUgYmVlbgogICAgICAgYWxsb3dpbmcgdGhlIGVkZ2Ugb2YgdGhlIHNlbmF0ZSdzIGF1dGhvcml0eSB0byBncm93IGJsdW50LCBhcyBpdCB3ZXJlLiBGb3Igd2UgYXJlIGluCiAgICAgICBwb3NzZXNzaW9uIG9mIGEgc2ltaWxhciBkZWNyZWUgb2YgdGhlIHNlbmF0ZSwgYnV0IHdlIGtlZXAgaXQgbG9ja2VkIHVwIGluIGl0cwogICAgICAgcGFyY2htZW504oCUYnVyaWVkLCBJIG1heSBzYXksIGluIHRoZSBzaGVhdGg7IGFuZCBhY2NvcmRpbmcgdG8gdGhpcyBkZWNyZWUgeW91IG91Z2h0LAogICAgICAgTyBDYXRpbGluZSwgdG8gYmUgcHV0IHRvIGRlYXRoIHRoaXMgaW5zdGFudC4gWW91IGxpdmUs4oCUYW5kIHlvdSBsaXZlLCBub3QgdG8gbGF5CiAgICAgICBhc2lkZSwgYnV0IHRvIHBlcnNpc3QgaW4geW91ciBhdWRhY2l0eS4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgd2lzaCwgTyBjb25zY3JpcHQgZmF0aGVycywgdG8gYmUgbWVyY2lmdWw7IEkgd2lzaCBub3QgdG8gYXBwZWFyIG5lZ2xpZ2VudCBhbWlkIHN1Y2gKICAgICAgIGRhbmdlciB0byB0aGUgc3RhdGU7IGJ1dCBJIGRvIG5vdyBhY2N1c2UgbXlzZWxmIG9mIHJlbWlzc25lc3MgYW5kIGN1bHBhYmxlIGluYWN0aXZpdHkuCiAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+IEEgY2FtcCBpcyBwaXRjaGVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgYXQgdGhlIGVudHJhbmNlIG9mIEV0cnVyaWEsIGluIGhvc3RpbGl0eSB0byB0aGUgcmVwdWJsaWM7IHRoZSBudW1iZXIgb2YKICAgICAgIHRoZSBlbmVteSBpbmNyZWFzZXMgZXZlcnkgZGF5OyBhbmQgeWV0IHRoZSBnZW5lcmFsIG9mIHRoYXQgY2FtcCwgdGhlIGxlYWRlciBvZiB0aG9zZSBlbmVtaWVzLAogICAgICAgd2Ugc2VlIHdpdGhpbiB0aGUgd2FsbHPigJR5ZXMsIGFuZCBldmVuIGluIHRoZSBzZW5hdGUsIOKAlHBsYW5uaW5nIGV2ZXJ5IGRheQogICAgICAgc29tZSBpbnRlcm5hbCBpbmp1cnkgdG8gdGhlIHJlcHVibGljLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoaXMgaXMgdGhlIHNhbWUgaW5jaWRlbnQgdGhhdCBpcwogICAgICAgIHRoZSBzdWJqZWN0IG9mIHRoZSBwcmVjZWRpbmcgb3JhdGlvbiBpbiBkZWZlbmNlIG9mIFJhYmlyaXVzLjwvbm90ZT4gSWYsIE8gQ2F0aWxpbmUsIEkgc2hvdWxkCiAgICAgICBub3cgb3JkZXIgeW91IHRvIGJlIGFycmVzdGVkLCB0byBiZSBwdXQgdG8gZGVhdGgsIEkgc2hvdWxkLCBJIHN1cHBvc2UsIGhhdmUgdG8gZmVhciBsZXN0IGFsbAogICAgICAgZ29vZCBtZW4gc2hvdWxkIHNheSB0aGF0IEkgaGFkIGFjdGVkIHRhcmRpbHksIHJhdGhlciB0aGFuIHRoYXQgYW55IG9uZSBzaG91bGQgYWZmaXJtIHRoYXQgSQogICAgICAgYWN0ZWQgY3J1ZWxseS4gQnV0IHlldCB0aGlzLCB3aGljaCBvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBsb25nIHNpbmNlLCBJIGhhdmUgZ29vZCByZWFzb24gZm9yCiAgICAgICBub3QgZG9pbmcgYXMgeWV0OyBJIHdpbGwgcHV0IHlvdSB0byBkZWF0aCwgdGhlbiwgd2hlbiB0aGVyZSBzaGFsbCBiZSBub3Qgb25lIHBlcnNvbiBwb3NzaWJsZQogICAgICAgdG8gYmUgZm91bmQgc28gd2lja2VkLCBzbyBhYmFuZG9uZWQsIHNvIGxpa2UgeW91cnNlbGYsIGFzIG5vdCB0byBhbGxvdyB0aGF0IGl0IGhhcyBiZWVuCiAgICAgICByaWdodGx5IGRvbmUuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gQXMgbG9uZyBhcyBvbmUgcGVyc29uIGV4aXN0cyB3aG8gY2FuIGRhcmUgdG8KICAgICAgIGRlZmVuZCB5b3UsIHlldCBzaGFsbCBsaXZlOyBidXQgeW91IHNoYWxsIGxpdmUgYXMgeW91IGRvIG5vdywgc3Vycm91bmRlZCBieSBteSBtYW55IGFuZAogICAgICAgdHJ1c3R5IGd1YXJkcywgc28gdGhhdCB5b3Ugc2hhbGwgbm90IGJlIGFibGUgdG8gc3RpciBvbmUgZmluZ2VyIGFnYWluc3QgdGhlIHJlcHVibGljOiBtYW55CiAgICAgICBleWVzIGFuZCBlYXJzIHNoYWxsIHN0aWxsIG9ic2VydmUgYW5kIHdhdGNoIHlvdSwgYXMgdGhleSBoYXZlIGhpdGhlcnRvIGRvbmUsIHRob3VnaCB5b3Ugc2hhbGwKICAgICAgIG5vdCBwZXJjZWl2ZSB0aGVtLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBBIGNhbXAgaXMgcGl0Y2hlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgYXQgdGhlIGVudHJhbmNlIG9mIEV0cnVyaWEsIGluIGhvc3RpbGl0eSB0byB0aGUgcmVwdWJsaWM7IHRoZSBudW1iZXIgb2YKICAgICAgIHRoZSBlbmVteSBpbmNyZWFzZXMgZXZlcnkgZGF5OyBhbmQgeWV0IHRoZSBnZW5lcmFsIG9mIHRoYXQgY2FtcCwgdGhlIGxlYWRlciBvZiB0aG9zZSBlbmVtaWVzLAogICAgICAgd2Ugc2VlIHdpdGhpbiB0aGUgd2FsbHPigJR5ZXMsIGFuZCBldmVuIGluIHRoZSBzZW5hdGUsIOKAlHBsYW5uaW5nIGV2ZXJ5IGRheQogICAgICAgc29tZSBpbnRlcm5hbCBpbmp1cnkgdG8gdGhlIHJlcHVibGljLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB0aGUgc2FtZSBpbmNpZGVudCB0aGF0IGlzCiAgICAgICAgdGhlIHN1YmplY3Qgb2YgdGhlIHByZWNlZGluZyBvcmF0aW9uIGluIGRlZmVuY2Ugb2YgUmFiaXJpdXMuPC9ub3RlPiBJZiwgTyBDYXRpbGluZSwgSSBzaG91bGQKICAgICAgIG5vdyBvcmRlciB5b3UgdG8gYmUgYXJyZXN0ZWQsIHRvIGJlIHB1dCB0byBkZWF0aCwgSSBzaG91bGQsIEkgc3VwcG9zZSwgaGF2ZSB0byBmZWFyIGxlc3QgYWxsCiAgICAgICBnb29kIG1lbiBzaG91bGQgc2F5IHRoYXQgSSBoYWQgYWN0ZWQgdGFyZGlseSwgcmF0aGVyIHRoYW4gdGhhdCBhbnkgb25lIHNob3VsZCBhZmZpcm0gdGhhdCBJCiAgICAgICBhY3RlZCBjcnVlbGx5LiBCdXQgeWV0IHRoaXMsIHdoaWNoIG91Z2h0IHRvIGhhdmUgYmVlbiBkb25lIGxvbmcgc2luY2UsIEkgaGF2ZSBnb29kIHJlYXNvbiBmb3IKICAgICAgIG5vdCBkb2luZyBhcyB5ZXQ7IEkgd2lsbCBwdXQgeW91IHRvIGRlYXRoLCB0aGVuLCB3aGVuIHRoZXJlIHNoYWxsIGJlIG5vdCBvbmUgcGVyc29uIHBvc3NpYmxlCiAgICAgICB0byBiZSBmb3VuZCBzbyB3aWNrZWQsIHNvIGFiYW5kb25lZCwgc28gbGlrZSB5b3Vyc2VsZiwgYXMgbm90IHRvIGFsbG93IHRoYXQgaXQgaGFzIGJlZW4KICAgICAgIHJpZ2h0bHkgZG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['1.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBBcyBsb25nIGFzIG9uZSBwZXJzb24gZXhpc3RzIHdobyBjYW4gZGFyZSB0bwogICAgICAgZGVmZW5kIHlvdSwgeWV0IHNoYWxsIGxpdmU7IGJ1dCB5b3Ugc2hhbGwgbGl2ZSBhcyB5b3UgZG8gbm93LCBzdXJyb3VuZGVkIGJ5IG15IG1hbnkgYW5kCiAgICAgICB0cnVzdHkgZ3VhcmRzLCBzbyB0aGF0IHlvdSBzaGFsbCBub3QgYmUgYWJsZSB0byBzdGlyIG9uZSBmaW5nZXIgYWdhaW5zdCB0aGUgcmVwdWJsaWM6IG1hbnkKICAgICAgIGV5ZXMgYW5kIGVhcnMgc2hhbGwgc3RpbGwgb2JzZXJ2ZSBhbmQgd2F0Y2ggeW91LCBhcyB0aGV5IGhhdmUgaGl0aGVydG8gZG9uZSwgdGhvdWdoIHlvdSBzaGFsbAogICAgICAgbm90IHBlcmNlaXZlIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQgaXMgdGhlcmUsIE8gQ2F0aWxpbmUsIHRoYXQgeW91IGNhbiBzdGlsbCBleHBlY3QsIGlmIG5pZ2h0IGlzIG5vdCBhYmxlIHRvIHZlaWwgeW91cgogICAgICAgbmVmYXJpb3VzIG1lZXRpbmdzIGluIGRhcmtuZXNzLCBhbmQgaWYgcHJpdmF0ZSBob3VzZXMgY2Fubm90IGNvbmNlYWwgdGhlIHZvaWNlIG9mIHlvdXIKICAgICAgIGNvbnNwaXJhY3kgd2l0aGluIHRoZWlyIHdhbGxzO+KAlGlmIGV2ZXJ5dGhpbmcgaXMgc2VlbiBhbmQgZGlzcGxheWVkPyBDaGFuZ2UgeW91cgogICAgICAgbWluZDogdHJ1c3QgbWU6IGZvcmdldCB0aGUgc2xhdWdodGVyIGFuZCBjb25mbGFncmF0aW9uIHlvdSBhcmUgbWVkaXRhdGluZy4gWW91IGFyZSBoZW1tZWQgaW4KICAgICAgIG9uIGFsbCBzaWRlczsgYWxsIHlvdXIgcGxhbnMgYXJlIGNsZWFyZXIgdGhhbiB0aGUgZGF5IHRvIHVzOyBsZXQgbWUgcmVtaW5kIHlvdSBvZiB0aGVtLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3UgcmVjb2xsZWN0IHRoYXQgb24gdGhlIDIxc3Qgb2YgT2N0b2JlciBJIHNhaWQgaW4gdGhlCiAgICAgICBzZW5hdGUsIHRoYXQgb24gYSBjZXJ0YWluIGRheSwgd2hpY2ggd2FzIHRvIGJlIHRoZSAyN3RoIG9mIE9jdG9iZXIsIEMuIE1hbmxpdXMsIHRoZSBzYXRlbGxpdGUKICAgICAgIGFuZCBzZXJ2YW50IG9mIHlvdXIgYXVkYWNpdHksIHdvdWxkIGJlIGluIGFybXM/IFdhcyBJIG1pc3Rha2VuLCBDYXRpbGluZSwgbm90IG9ubHkgaW4gc28KICAgICAgIGltcG9ydGFudCwgc28gYXRyb2Npb3VzLCBzbyBpbmNyZWRpYmxlIGEgZmFjdCwgYnV0LCB3aGF0IGlzIG11Y2ggbW9yZSByZW1hcmthYmxlLCBpbiB0aGUgdmVyeQogICAgICAgZGF5PyBJIHNhaWQgYWxzbyBpbiB0aGUgc2VuYXRlIHRoYXQgeW91IGhhZCBmaXhlZCB0aGUgbWFzc2FjcmUgb2YgdGhlIG5vYmxlcyBmb3IgdGhlIDI4dGggb2YKICAgICAgIE9jdG9iZXIsIHdoZW4gbWFueSBjaGllZiBtZW4gb2YgdGhlIHNlbmF0ZSBoYWQgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBub3Qgc28gbXVjaCBmb3IgdGhlIHNha2Ugb2Ygc2F2aW5nIHRoZW1zZWx2ZXMgYXMgb2YgY2hlY2tpbmcgeW91cgogICAgICAgZGVzaWducy4gQ2FuIHlvdSBkZW55IHRoYXQgb24gdGhhdCB2ZXJ5IGRheSB5b3Ugd2VyZSBzbyBoZW1tZWQgaW4gYnkgbXkgZ3VhcmRzIGFuZCBteQogICAgICAgdmlnaWxhbmNlLCB0aGF0IHlvdSB3ZXJlIHVuYWJsZSB0byBzdGlyIG9uZSBmaW5nZXIgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IHdoZW4geW91IHNhaWQgdGhhdAogICAgICAgeW91IHdvdWxkIGJlIGNvbnRlbnQgd2l0aCB0aGUgZmxpZ2h0IG9mIHRoZSByZXN0LCBhbmQgdGhlIHNsYXVnaHRlciBvZiB1cyB3aG8gcmVtYWluZWQ/CiAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyB3aGVuIHlvdSBtYWRlIHN1cmUgdGhhdCB5b3Ugd291bGQgYmUgYWJsZSB0byBzZWl6ZQogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHJhZW5lc3RlIiBrZXk9InBlcnNldXMsUHJhZW5lc3RlIj5QcmFlbmVzdGU8L3BsYWNlTmFtZT4gb24gdGhlIGZpcnN0IG9mIE5vdmVtYmVyIGJ5IGEKICAgICAgIG5vY3R1cm5hbCBhdHRhY2ssIGRpZCB5b3Ugbm90IGZpbmQgdGhhdCB0aGF0IGNvbG9ueSB3YXMgZm9ydGlmaWVkIGJ5IG15IG9yZGVyLCBieSBteQogICAgICAgZ2Fycmlzb24sIGJ5IG15IHdhdGNoZnVsbmVzcyBhbmQgY2FyZT8gWW91IGRvIG5vdGhpbmcsIHlvdSBwbGFuIG5vdGhpbmcsIHlvdSB0aGluayBvZiBub3RoaW5nCiAgICAgICB3aGljaCBJIG5vdCBvbmx5IGRvIG5vdCBoZWFyLCBidXQgd2hpY2ggSSBkbyBub3Qgc2VlIGFuZCBrbm93IGV2ZXJ5IHBhcnRpY3VsYXIgb2YuIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3UgcmVjb2xsZWN0IHRoYXQgb24gdGhlIDIxc3Qgb2YgT2N0b2JlciBJIHNhaWQgaW4gdGhlCiAgICAgICBzZW5hdGUsIHRoYXQgb24gYSBjZXJ0YWluIGRheSwgd2hpY2ggd2FzIHRvIGJlIHRoZSAyN3RoIG9mIE9jdG9iZXIsIEMuIE1hbmxpdXMsIHRoZSBzYXRlbGxpdGUKICAgICAgIGFuZCBzZXJ2YW50IG9mIHlvdXIgYXVkYWNpdHksIHdvdWxkIGJlIGluIGFybXM/IFdhcyBJIG1pc3Rha2VuLCBDYXRpbGluZSwgbm90IG9ubHkgaW4gc28KICAgICAgIGltcG9ydGFudCwgc28gYXRyb2Npb3VzLCBzbyBpbmNyZWRpYmxlIGEgZmFjdCwgYnV0LCB3aGF0IGlzIG11Y2ggbW9yZSByZW1hcmthYmxlLCBpbiB0aGUgdmVyeQogICAgICAgZGF5PyBJIHNhaWQgYWxzbyBpbiB0aGUgc2VuYXRlIHRoYXQgeW91IGhhZCBmaXhlZCB0aGUgbWFzc2FjcmUgb2YgdGhlIG5vYmxlcyBmb3IgdGhlIDI4dGggb2YKICAgICAgIE9jdG9iZXIsIHdoZW4gbWFueSBjaGllZiBtZW4gb2YgdGhlIHNlbmF0ZSBoYWQgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIG5vdCBzbyBtdWNoIGZvciB0aGUgc2FrZSBvZiBzYXZpbmcgdGhlbXNlbHZlcyBhcyBvZiBjaGVja2luZyB5b3VyCiAgICAgICBkZXNpZ25zLiBDYW4geW91IGRlbnkgdGhhdCBvbiB0aGF0IHZlcnkgZGF5IHlvdSB3ZXJlIHNvIGhlbW1lZCBpbiBieSBteSBndWFyZHMgYW5kIG15CiAgICAgICB2aWdpbGFuY2UsIHRoYXQgeW91IHdlcmUgdW5hYmxlIHRvIHN0aXIgb25lIGZpbmdlciBhZ2FpbnN0IHRoZSByZXB1YmxpYzsgd2hlbiB5b3Ugc2FpZCB0aGF0CiAgICAgICB5b3Ugd291bGQgYmUgY29udGVudCB3aXRoIHRoZSBmbGlnaHQgb2YgdGhlIHJlc3QsIGFuZCB0aGUgc2xhdWdodGVyIG9mIHVzIHdobyByZW1haW5lZD8KICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyB3aGVuIHlvdSBtYWRlIHN1cmUgdGhhdCB5b3Ugd291bGQgYmUgYWJsZSB0byBzZWl6ZQogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHJhZW5lc3RlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQcmFlbmVzdGUiPlByYWVuZXN0ZTwvcGxhY2VOYW1lPiBvbiB0aGUgZmlyc3Qgb2YgTm92ZW1iZXIgYnkgYQogICAgICAgbm9jdHVybmFsIGF0dGFjaywgZGlkIHlvdSBub3QgZmluZCB0aGF0IHRoYXQgY29sb255IHdhcyBmb3J0aWZpZWQgYnkgbXkgb3JkZXIsIGJ5IG15CiAgICAgICBnYXJyaXNvbiwgYnkgbXkgd2F0Y2hmdWxuZXNzIGFuZCBjYXJlPyBZb3UgZG8gbm90aGluZywgeW91IHBsYW4gbm90aGluZywgeW91IHRoaW5rIG9mIG5vdGhpbmcKICAgICAgIHdoaWNoIEkgbm90IG9ubHkgZG8gbm90IGhlYXIsIGJ1dCB3aGljaCBJIGRvIG5vdCBzZWUgYW5kIGtub3cgZXZlcnkgcGFydGljdWxhciBvZi4gPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlzdGVuIHdoaWxlIEkgc3BlYWsgb2YgdGhlIG5pZ2h0IGJlZm9yZS4gWW91IHNoYWxsIG5vdyBzZWUgdGhhdCBJIHdhdGNoIGZhciBtb3JlIGFjdGl2ZWx5CiAgICAgICBmb3IgdGhlIHNhZmV0eSB0aGFuIHlvdSBkbyBmb3IgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYy4gSSBzYXkgdGhhdCB5b3UgY2FtZSB0aGUgbmlnaHQKICAgICAgIGJlZm9yZSAoSSB3aWxsIHNheSBub3RoaW5nIG9ic2N1cmVseSkgaW50byB0aGUgU2N5dGhlLWRlYWxlcnMnIHN0cmVldCwgdG8gdGhlIGhvdXNlIG9mIE1hcmN1cwogICAgICAgTGVjY2E7IHRoYXQgbWFueSBvZiB5b3VyIGFjY29tcGxpY2VzIGluIHRoZSBzYW1lIGluc2FuaXR5IGFuZCB3aWNrZWRuZXNzIGNhbWUgaGVyZSB0b28uIERvCiAgICAgICB5b3UgZGFyZSB0byBkZW55IGl0PyBXaHkgYXJlIHNpbGVudD8gSSB3aWxsIHByb3ZlIGl0IGlmIHlvdSBkbyBkZW55IGl0OyBmb3IgSSBzZWUgaGVyZSBpbiB0aGUKICAgICAgIHNlbmF0ZSBzb21lIG1lbiB3aG8gd2VyZSB0aGVyZSB3aXRoIHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPk8geWUgaW1tb3J0YWwgZ29kcywgd2hlcmUgb24gZWFydGggYXJlIHdlPyBpbiB3aGF0IGNpdHkgYXJlIHdlIGxpdmluZz8gd2hhdCBjb25zdGl0dXRpb24gaXMKICAgICAgIG91cnM/IFRoZXJlIGFyZSBoZXJlLOKAlGhlcmUgaW4gb3VyIGJvZHksIE8gY29uc2NyaXB0IGZhdGhlcnMsIGluIHRoaXMgdGhlIG1vc3QgaG9seQogICAgICAgYW5kIGRpZ25pZmllZCBhc3NlbWJseSBvZiB0aGUgd2hvbGUgd29ybGQsIG1lbiB3aG8gbWVkaXRhdGUgbXkgZGVhdGgsIGFuZCB0aGUgZGVhdGggb2YgYWxsIG9mCiAgICAgICB1cywgYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHksIGFuZCBvZiB0aGUgd2hvbGUgd29ybGQuIEksIHRoZSBjb25zdWwgc2VlIHRoZW07IEkgYXNrCiAgICAgICB0aGVtIHRoZWlyIG9waW5pb24gYWJvdXQgdGhlIHJlcHVibGljLCBhbmQgSSBkbyBub3QgeWV0IGF0dGFjaywgZXZlbiBieSB3b3JkcywgdGhvc2Ugd2hvCiAgICAgICBvdWdodCB0byBiZSBwdXQgdG8gZGVhdGggYnkgdGhlIHN3b3JkLiBZb3Ugd2VyZSwgdGhlbiwgTyBDYXRpbGluZSwgYXQgTGVjY2EncyB0aGF0IG5pZ2h0OyB5b3UKICAgICAgIGRpdmlkZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaW50byBzZWN0aW9uczsgeW91IHNldHRsZWQgd2hlcmUgZXZlcnkKICAgICAgIG9uZSB3YXMgdG8gZ287IHlvdSBmaXhlZCB3aG9tIHlvdSB3ZXJlIHRvIGxlYXZlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgd2hvbSB5b3Ugd2VyZSB0byB0YWtlIHdpdGggeW91OyB5b3UgcG9ydGlvbmVkIG91dCB0aGUgZGl2aXNpb25zIG9mIHRoZQogICAgICAgY2l0eSBmb3IgY29uZmxhZ3JhdGlvbjsgeW91IHVuZGVydG9vayB0aGF0IHlvdSB5b3Vyc2VsZiB3b3VsZCBhdCBvbmNlIGxlYXZlIHRoZSBjaXR5LCBhbmQKICAgICAgIHNhaWQgdGhhdCB0aGVyZSB3YXMgdGhlbiBvbmx5IHRoaXMgdG8gZGVsYXkgeW91LCB0aGF0IEkgd2FzIHN0aWxsIGFsaXZlLiBUd28gUm9tYW4ga25pZ2h0cwogICAgICAgd2VyZSBmb3VuZCB0byBkZWxpdmVyIHlvdSBmcm9tIHRoaXMgYW54aWV0eSwgYW5kIHRvIHByb21pc2UgdGhhdCB2ZXJ5IG5pZ2h0LCBiZWZvcmUgZGF5YnJlYWssCiAgICAgICB0byBzbGF5IG1lIGluIG15IGJlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBBbGwgdGhpcyBJIGtuZXcgYWxtb3N0IGJlZm9yZSB5b3VyCiAgICAgICBtZWV0aW5nIGhhZCBicm9rZW4gdXAuIEkgc3RyZW5ndGhlbmVkIGFuZCBmb3J0aWZpZWQgbXkgaG91c2Ugd2l0aCBhIHN0cm9uZ2VyIGd1YXJkOyBJIHJlZnVzZWQKICAgICAgIGFkbWl0dGFuY2UsIHdoZW4gdGhleSBjYW1lLCB0byB0aG9zZSB3aG9tIHlvdSBzZW50IGluIHRoZSBtb3JuaW5nIHRvIHNhbHV0ZSBtZSwgYW5kIG9mIHdob20gSQogICAgICAgaGFkIGZvcmV0b2xkIHRvIG1hbnkgZW1pbmVudCBtZW4gdGhhdCB0aGV5IHdvdWxkIGNvbWUgdG8gbWUgYXQgdGhhdCB0aW1lLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpbnRvIHNlY3Rpb25zOyB5b3Ugc2V0dGxlZCB3aGVyZSBldmVyeQogICAgICAgb25lIHdhcyB0byBnbzsgeW91IGZpeGVkIHdob20geW91IHdlcmUgdG8gbGVhdmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aG9tIHlvdSB3ZXJlIHRvIHRha2Ugd2l0aCB5b3U7IHlvdSBwb3J0aW9uZWQgb3V0IHRoZSBkaXZpc2lvbnMgb2YgdGhlCiAgICAgICBjaXR5IGZvciBjb25mbGFncmF0aW9uOyB5b3UgdW5kZXJ0b29rIHRoYXQgeW91IHlvdXJzZWxmIHdvdWxkIGF0IG9uY2UgbGVhdmUgdGhlIGNpdHksIGFuZAogICAgICAgc2FpZCB0aGF0IHRoZXJlIHdhcyB0aGVuIG9ubHkgdGhpcyB0byBkZWxheSB5b3UsIHRoYXQgSSB3YXMgc3RpbGwgYWxpdmUuIFR3byBSb21hbiBrbmlnaHRzCiAgICAgICB3ZXJlIGZvdW5kIHRvIGRlbGl2ZXIgeW91IGZyb20gdGhpcyBhbnhpZXR5LCBhbmQgdG8gcHJvbWlzZSB0aGF0IHZlcnkgbmlnaHQsIGJlZm9yZSBkYXlicmVhaywKICAgICAgIHRvIHNsYXkgbWUgaW4gbXkgYmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoaXMgSSBrbmV3IGFsbW9zdCBiZWZvcmUgeW91cgogICAgICAgbWVldGluZyBoYWQgYnJva2VuIHVwLiBJIHN0cmVuZ3RoZW5lZCBhbmQgZm9ydGlmaWVkIG15IGhvdXNlIHdpdGggYSBzdHJvbmdlciBndWFyZDsgSSByZWZ1c2VkCiAgICAgICBhZG1pdHRhbmNlLCB3aGVuIHRoZXkgY2FtZSwgdG8gdGhvc2Ugd2hvbSB5b3Ugc2VudCBpbiB0aGUgbW9ybmluZyB0byBzYWx1dGUgbWUsIGFuZCBvZiB3aG9tIEkKICAgICAgIGhhZCBmb3JldG9sZCB0byBtYW55IGVtaW5lbnQgbWVuIHRoYXQgdGhleSB3b3VsZCBjb21lIHRvIG1lIGF0IHRoYXQgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMsIHRoZW4sIHRoaXMgaXMgdGhlIGNhc2UsIE8gQ2F0aWxpbmUsIGNvbnRpbnVlIGFzIHlvdSBoYXZlIGJlZ3VuLiBMZWF2ZSB0aGUgY2l0eSBhdCBsYXN0CiAgICAgICB0aGUgZ2F0ZXMgYXJlIG9wZW47IGRlcGFydC4gVGhhdCBNYW5saWFuIGNhbXAgb2YgeW91cnMgaGFzIGJlZW4gd2FpdGluZyB0b28gbG9uZyBmb3IgeW91IGFzCiAgICAgICBpdHMgZ2VuZXJhbC4gQW5kIGxlYWQgZm9ydGggd2l0aCB5b3UgYWxsIHlvdXIgZnJpZW5kcywgb3IgYXQgbGVhc3QgYXMgbWFueSBhcyB5b3UgY2FuOyBwdXJnZQogICAgICAgdGhlIGNpdHkgb2YgeW91ciBwcmVzZW5jZTsgeW91IHdpbGwgZGVsaXZlciBtZSBmcm9tIGEgZ3JlYXQgZmVhciwgd2hlbiB0aGVyZSBpcyBhIHdhbGwKICAgICAgIGJldHdlZW4gbWUgYW5kIHlvdS4gQW1vbmcgdXMgeW91IGNhbiBkd2VsbCBubyBsb25nZXLigJRJIHdpbGwgbm90IGJlYXIgaXQsIEkgd2lsbCBub3QKICAgICAgIHBlcm1pdCBpdCwgSSB3aWxsIG5vdCB0b2xlcmF0ZSBpdC4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gR3JlYXQgdGhhbmtzIGFyZSBkdWUKICAgICAgIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBhbmQgdG8gdGhpcyB2ZXJ5IEp1cGl0ZXIgU3RhdG9yLCBpbiB3aG9zZSB0ZW1wbGUgd2UgYXJlLCB0aGUgbW9zdAogICAgICAgYW5jaWVudCBwcm90ZWN0b3Igb2YgdGh1cyBjaXR5LCB0aGF0IHdlIGhhdmUgYWxyZWFkeSBzbyBvZnRlbiBlc2NhcGVkIHNvIGZvdWwsIHNvIGhvcnJpYmxlLAogICAgICAgYW5kIHNvIGRlYWRseSBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMuIEJ1dCB0aGUgc2FmZXR5IG9mIHRoZSBjb21tb253ZWFsdGggbXVzdCBub3QgYmUgdG9vCiAgICAgICBvZnRlbiBhbGxvd2VkIHRvIGJlIHJpc2tlZCBvbiBvbmUgbWFuLiBBcyBsb25nIGFzIHlvdSwgTyBDYXRpbGluZSwgcGxvdHRlZCBhZ2FpbnN0IG1lIHdoaWxlIEkKICAgICAgIHdhcyB0aGUgY29uc3VsIGVsZWN0LCBJIGRlZmVuZGVkIG15c2VsZiBub3Qgd2l0aCBhIHB1YmxpYyBndWFyZCwgYnV0IGJ5IG15IG93biBwcml2YXRlCiAgICAgICBkaWxpZ2VuY2UuIFdoZW4sIGluIHRoZSBuZXh0IGNvbnN1bGFyIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiwgeW91IHdpc2hlZCB0bwogICAgICAgc2xheSBtZSB3aGVuIEkgd2FzIGFjdHVhbGx5IGNvbnN1bCwgYW5kIHlvdXIgY29tcGV0aXRvcnMgYWxzbywgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2OTY0IiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiwgSSBjaGVja2VkIHlvdXIgbmVmYXJpb3VzIGF0dGVtcHQgYnkgdGhlCiAgICAgICBhc3Npc3RhbmNlIGFuZCByZXNvdXJjZXMgb2YgbXkgb3duIGZyaWVuZHMsIHdpdGhvdXQgZXhjaXRpbmcgYW55IGRpc3R1cmJhbmNlIHB1YmxpY2x5LiBJbgogICAgICAgc2hvcnQsIGFzIG9mdGVuIGFzIHlvdSBhdHRhY2tlZCBtZSwgSSBieSBteXNlbGYgb3Bwb3NlZCB5b3UsIGFuZCB0aGF0LCB0b28sIHRob3VnaCBJIHNhdyB0aGF0CiAgICAgICBteSBydWluIHdhcyBjb25uZWN0ZWQgd2l0aCBncmVhdCBkaXNhc3RlciB0byB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICBCdXQgbm93IHlvdSBhcmUgb3Blbmx5IGF0dGFja2luZyB0aGUgZW50aXJlIHJlcHVibGljLiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gR3JlYXQgdGhhbmtzIGFyZSBkdWUKICAgICAgIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBhbmQgdG8gdGhpcyB2ZXJ5IEp1cGl0ZXIgU3RhdG9yLCBpbiB3aG9zZSB0ZW1wbGUgd2UgYXJlLCB0aGUgbW9zdAogICAgICAgYW5jaWVudCBwcm90ZWN0b3Igb2YgdGh1cyBjaXR5LCB0aGF0IHdlIGhhdmUgYWxyZWFkeSBzbyBvZnRlbiBlc2NhcGVkIHNvIGZvdWwsIHNvIGhvcnJpYmxlLAogICAgICAgYW5kIHNvIGRlYWRseSBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMuIEJ1dCB0aGUgc2FmZXR5IG9mIHRoZSBjb21tb253ZWFsdGggbXVzdCBub3QgYmUgdG9vCiAgICAgICBvZnRlbiBhbGxvd2VkIHRvIGJlIHJpc2tlZCBvbiBvbmUgbWFuLiBBcyBsb25nIGFzIHlvdSwgTyBDYXRpbGluZSwgcGxvdHRlZCBhZ2FpbnN0IG1lIHdoaWxlIEkKICAgICAgIHdhcyB0aGUgY29uc3VsIGVsZWN0LCBJIGRlZmVuZGVkIG15c2VsZiBub3Qgd2l0aCBhIHB1YmxpYyBndWFyZCwgYnV0IGJ5IG15IG93biBwcml2YXRlCiAgICAgICBkaWxpZ2VuY2UuIFdoZW4sIGluIHRoZSBuZXh0IGNvbnN1bGFyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LCB5b3Ugd2lzaGVkIHRvCiAgICAgICBzbGF5IG1lIHdoZW4gSSB3YXMgYWN0dWFsbHkgY29uc3VsLCBhbmQgeW91ciBjb21wZXRpdG9ycyBhbHNvLCBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5NjQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjk2NCI+Q2FtcHVzIE1hcnRpdXM8L3BsYWNlTmFtZT4sIEkgY2hlY2tlZCB5b3VyIG5lZmFyaW91cyBhdHRlbXB0IGJ5IHRoZQogICAgICAgYXNzaXN0YW5jZSBhbmQgcmVzb3VyY2VzIG9mIG15IG93biBmcmllbmRzLCB3aXRob3V0IGV4Y2l0aW5nIGFueSBkaXN0dXJiYW5jZSBwdWJsaWNseS4gSW4KICAgICAgIHNob3J0LCBhcyBvZnRlbiBhcyB5b3UgYXR0YWNrZWQgbWUsIEkgYnkgbXlzZWxmIG9wcG9zZWQgeW91LCBhbmQgdGhhdCwgdG9vLCB0aG91Z2ggSSBzYXcgdGhhdAogICAgICAgbXkgcnVpbiB3YXMgY29ubmVjdGVkIHdpdGggZ3JlYXQgZGlzYXN0ZXIgdG8gdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIEJ1dCBub3cgeW91IGFyZSBvcGVubHkgYXR0YWNraW5nIHRoZSBlbnRpcmUgcmVwdWJsaWMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IGFyZSBzdW1tb25pbmcgdG8gZGVzdHJ1Y3Rpb24gYW5kIGRldmFzdGF0aW9uIHRoZSB0ZW1wbGVzIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGUKICAgICAgIGhvdXNlcyBvZiB0aGUgY2l0eSwgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnM7IGluIHNob3J0LCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4uIFdoZXJlZm9yZSwgc2luY2UgSSBkbyBub3QgeWV0IHZlbnR1cmUgdG8gZG8gdGhhdCB3aGljaCBpcyB0aGUgYmVzdAogICAgICAgdGhpbmcsIGFuZCB3aGljaCBiZWxvbmdzIHRvIG15IG9mZmljZSBhbmQgdG8gdGhlIGRpc2NpcGxpbmUgb2Ygb3VyIGFuY2VzdG9ycywgSSB3aWxsIGRvIHRoYXQKICAgICAgIHdoaWNoIGlzIG1vcmUgbWVyY2lmdWwgaWYgd2UgcmVnYXJkIGl0cyByaWdvdXIsIGFuZCBtb3JlIGV4cGVkaWVudCBmb3IgdGhlIHN0YXRlLiBGb3IgaWYgSQogICAgICAgb3JkZXIgeW91IHRvIGJlIHB1dCB0byBkZWF0aCwgdGhlIHJlc3Qgb2YgdGhlIGNvbnNwaXJhdG9ycyB3aWxsIHN0aWxsIHJlbWFpbiBpbiB0aGUgcmVwdWJsaWM7CiAgICAgICBpZiBhcyBJIGhhdmUgbG9uZyBiZWVuIGV4aG9ydGluZyB5b3UsIHlvdSBkZXBhcnQsIHlvdXIgY29tcGFuaW9ucywgdGhvc2Ugd29ydGhsZXNzIGRyZWdzIG9mCiAgICAgICB0aGUgcmVwdWJsaWMsIHdpbGwgYmUgZHJhd24gb2ZmIGZyb20gdGhlIGNpdHkgdG9vLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgaXMKICAgICAgIHRoZSBtYXR0ZXIsIENhdGlsaW5lPyBEbyB5b3UgaGVzaXRhdGUgdG8gZG8gdGhhdCB3aGljaCBJIG9yZGVyIHlvdSB3aGljaCB5b3Ugd2VyZSBhbHJlYWR5CiAgICAgICBkb2luZyBvZiB5b3VyIG93biBhY2NvcmQ/IFRoZSBjb25zdWwgb3JkZXJzIGFuIGVuZW15IHRvIGRlcGFydCBmcm9tIHRoZSBjaXR5LiBEbyB5b3UgYXNrIG1lLAogICAgICAgQXJlIHlvdSB0byBnbyBpbnRvIGJhbmlzaG1lbnQ/IEkgZG8gbm90IG9yZGVyIGl0OyBidXQsIGlmIHlvdSBjb25zdWx0IG1lLCBJIGFkdmlzZSBpdC4KICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gV2hlcmVmb3JlLCBzaW5jZSBJIGRvIG5vdCB5ZXQgdmVudHVyZSB0byBkbyB0aGF0IHdoaWNoIGlzIHRoZSBiZXN0CiAgICAgICB0aGluZywgYW5kIHdoaWNoIGJlbG9uZ3MgdG8gbXkgb2ZmaWNlIGFuZCB0byB0aGUgZGlzY2lwbGluZSBvZiBvdXIgYW5jZXN0b3JzLCBJIHdpbGwgZG8gdGhhdAogICAgICAgd2hpY2ggaXMgbW9yZSBtZXJjaWZ1bCBpZiB3ZSByZWdhcmQgaXRzIHJpZ291ciwgYW5kIG1vcmUgZXhwZWRpZW50IGZvciB0aGUgc3RhdGUuIEZvciBpZiBJCiAgICAgICBvcmRlciB5b3UgdG8gYmUgcHV0IHRvIGRlYXRoLCB0aGUgcmVzdCBvZiB0aGUgY29uc3BpcmF0b3JzIHdpbGwgc3RpbGwgcmVtYWluIGluIHRoZSByZXB1YmxpYzsKICAgICAgIGlmIGFzIEkgaGF2ZSBsb25nIGJlZW4gZXhob3J0aW5nIHlvdSwgeW91IGRlcGFydCwgeW91ciBjb21wYW5pb25zLCB0aG9zZSB3b3J0aGxlc3MgZHJlZ3Mgb2YKICAgICAgIHRoZSByZXB1YmxpYywgd2lsbCBiZSBkcmF3biBvZmYgZnJvbSB0aGUgY2l0eSB0b28uIDwvdHJhbnNsYXRpb24+"
translation['1.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcwogICAgICAgdGhlIG1hdHRlciwgQ2F0aWxpbmU/IERvIHlvdSBoZXNpdGF0ZSB0byBkbyB0aGF0IHdoaWNoIEkgb3JkZXIgeW91IHdoaWNoIHlvdSB3ZXJlIGFscmVhZHkKICAgICAgIGRvaW5nIG9mIHlvdXIgb3duIGFjY29yZD8gVGhlIGNvbnN1bCBvcmRlcnMgYW4gZW5lbXkgdG8gZGVwYXJ0IGZyb20gdGhlIGNpdHkuIERvIHlvdSBhc2sgbWUsCiAgICAgICBBcmUgeW91IHRvIGdvIGludG8gYmFuaXNobWVudD8gSSBkbyBub3Qgb3JkZXIgaXQ7IGJ1dCwgaWYgeW91IGNvbnN1bHQgbWUsIEkgYWR2aXNlIGl0LgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQgaXMgdGhlcmUsIE8gQ2F0aWxpbmUsIHRoYXQgY2FuIG5vdyBhZmZvcmQgeW91IGFueSBwbGVhc3VyZSBpbiB0aGlzIGNpdHk/IGZvciB0aGVyZQogICAgICAgaXMgbm8gb25lIGluIGl0LCBleGNlcHQgdGhhdCBiYW5kIG9mIHByb2ZsaWdhdGUgY29uc3BpcmF0b3JzIG9mIHlvdXJzLCB3aG8gZG9lcyBub3QgZmVhcgogICAgICAgeW91LOKAlG5vIG9uZSB3aG8gZG9lcyBub3QgaGF0ZSB5b3UuIFdoYXQgYnJhbmQgb2YgZG9tZXN0aWMgYmFzZW5lc3MgaXMgbm90IHN0YW1wZWQKICAgICAgIHVwb24geW91ciBsaWZlPyBXaGF0IGRpc2dyYWNlZnVsIGNpcmN1bXN0YW5jZSBpcyB3YW50aW5nIHRvIHlvdXIgaW5mYW15IGluIHlvdXIgcHJpdmF0ZQogICAgICAgYWZmYWlycz8gRnJvbSB3aGF0IGxpY2VudGlvdXNuZXNzIGhhdmUgeW91ciBleWVzLCBmcm9tIHdoYXQgYXRyb2NpdHkgaGF2ZSB5b3VyIGhhbmRzLCBmcm9tCiAgICAgICB3aGF0IGluaXF1aXR5IGhhcyB5b3VyIHdob2xlIGJvZHkgZXZlciBhYnN0YWluZWQ/IElzIHRoZXJlIG9uZSB5b3V0aCwgd2hlbiB5b3UgaGF2ZSBvbmNlCiAgICAgICBlbnRhbmdsZWQgaGltIGluIHRoZSB0ZW1wdGF0aW9ucyBvZiB5b3VyIGNvcnJ1cHRpb24sIHRvIHdob20geW91IGhhdmUgbm90IGhlbGQgb3V0IGEgc3dvcmQKICAgICAgIGZvciBhdWRhY2lvdXMgY3JpbWUsIG9yIGEgdG9yY2ggZm9yIGxpY2VudGlvdXMgd2lja2VkbmVzcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGF0PyB3aGVuIGxhdGVseSBieSB0aGUgZGVhdGggb2YgeW91ciBmb3JtZXIgd2lmZSB5b3UgaGFkIG1hZGUgeW91ciBob3VzZSBlbXB0eSBhbmQgcmVhZHkKICAgICAgIGZvciBhIG5ldyBicmlkYWwsIGRpZCB5b3Ugbm90IGV2ZW4gYWRkIGFub3RoZXIgaW5jcmVkaWJsZSB3aWNrZWRuZXNzIHRvIHRoaXMgd2lja2VkbmVzcz8gQnV0CiAgICAgICBJIHBhc3MgdGhhdCBvdmVyLCBhbmQgd2lsbGluZ2x5IGFsbG93IGl0IHRvIGJlIGJ1cmllZCBpbiBzaWxlbmNlLCB0aGF0IHNvIGhvcnJpYmxlIGEgY3JpbWUKICAgICAgIG1heSBub3QgYmUgc2VlbiB0byBoYXZlIGV4aXN0ZWQgaW4gdGhpcyBjaXR5LCBhbmQgbm90IHRvIGhhdmUgYmVlbiBjaGFzdGlzZWQuIEkgcGFzcyBvdmVyIHRoZQogICAgICAgcnVpbiBvZiB5b3VyIGZvcnR1bmUsIHdoaWNoIHlvdSBrbm93IGlzIGhhbmdpbmcgb3ZlciB5b3UgYWdhaW5zdCB0aGUgaWRlcyBvZiB0aGUgdmVyeSBuZXh0CiAgICAgICBtb250aDsgSSBjb21lIHRvIHRob3NlIHRoaW5ncyB3aGljaCByZWxhdGUgbm90IHRvIHRoZSBpbmZhbXkgb2YgeW91ciBwcml2YXRlIHZpY2VzLCBub3QgdG8KICAgICAgIHlvdXIgZG9tZXN0aWMgZGlmZmljdWx0aWVzIGFuZCBiYXNlbmVzcywgYnV0IHRvIHRoZSB3ZWxmYXJlIG9mIHRoZSByZXB1YmxpYyBhbmQgdG8gdGhlIGxpdmVzCiAgICAgICBhbmQgc2FmZXR5IG9mIHVzIGFsbC4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQ2FuIHRoZSBsaW1pdCBvZiB0aGlzIGxpZmUsIE8gQ2F0aWxpbmUsIGNhbiB0aGUgYnJlYXRoCiAgICAgICBvZiB0aGlzIGF0bW9zcGhlcmUgYmUgcGxlYXNhbnQgdG8geW91LCB3aGVuIHlvdSBrbm93IHRoYXQgdGhlcmUgaXMgbm90IG9uZSBtYW4gb2YgdGhvc2UgaGVyZQogICAgICAgcHJlc2VudCB3aG8gaXMgaWdub3JhbnQgdGhhdCB5b3UsIG9uIHRoZSBsYXN0IGRheSBvZiB0aGUgeWVhciwgd2hlbiBMZXBpZHVzIGFuZCBUdWxsdXMgd2VyZQogICAgICAgY29uc3Vscywgc3Rvb2QgaW4gdGhlIGFzc2VtYmx5IGFybWVkOyB0aGF0IHlvdSBoYWQgcHJlcGFyZWQgeW91ciBoYW5kIGZvciB0aGUgc2xhdWdodGVyIG9mCiAgICAgICB0aGUgY29uc3VscyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgbm8gcmVhc29uIG9yIGZlYXIgb2YgeW91cnMgaGluZGVyZWQgeW91cgogICAgICAgY3JpbWUgYW5kIG1hZG5lc3MsIGJ1dCB0aGUgZm9ydHVuZSBvZiB0aGUgcmVwdWJsaWM/IEFuZCBJIHNheSBubyBtb3JlIG9mIHRoZXNlIHRoaW5ncywgZm9yCiAgICAgICB0aGV5IGFyZSBub3QgdW5rbm93biB0byBldmVyeSBvbmUuIEhvdyBvZnRlbiBoYXZlIHlvdSBlbmRlYXZvdXJlZCB0byBzbGF5IG1lLCBib3RoIGFzIGNvbnN1bAogICAgICAgZWxlY3QgYW5kIGFzIGFjdHVhbCBjb25zdWw/IGhvdyBtYW55IHNob3RzIG9mIHlvdXJzLCBzbyBhaW1lZCB0aGF0IHRoZXkgc2VlbWVkIGltcG9zc2libGUgdG8KICAgICAgIGJlIGVzY2FwZWQsIGhhdmUgSSBhdm9pZGVkIGJ5IHNvbWUgc2xpZ2h0IHN0b29waW5nIGFzaWRlLCBhbmQgc29tZSBkb2RnaW5nLCBhcyBpdCB3ZXJlLCBvZiBteQogICAgICAgYm9keT8gWW91IGF0dGVtcHQgbm90aGluZywgeW91IGV4ZWN1dGUgbm90aGluZywgeW91IGRldmlzZSBub3RoaW5nIHRoYXQgY2FsbCBiZSBrZXB0IGhpZCBmcm9tCiAgICAgICBtZSBhdCB0aGUgcHJvcGVyIHRpbWU7IGFuZCB5ZXQgeW91IGRvIG5vdCBjZWFzZSB0byBhdHRlbXB0IGFuZCB0byBjb250cml2ZS4gPG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSG93IG9mdGVuIGFscmVhZHkgaGFzIHRoYXQgZGFnZ2VyIG9mIHlvdXJzIGJlZW4gd3Jlc3RlZCBmcm9tIHlvdXIgaGFuZHM/CiAgICAgICBob3cgb2Z0ZW4gaGFzIGl0IHNsaXBwZWQgdGhyb3VnaCB0aGVtIGJ5IHNvbWUgY2hhbmNlLCBhbmQgZHJvcHBlZCBkb3duPyBhbmQgeWV0IHlvdSBjYW5ub3QKICAgICAgIGFueSBsb25nZXIgZG8gd2l0aG91dCBpdDsgYW5kIHRvIHdoYXQgc2FjcmVkIG15c3RlcmllcyBpdCBpcyBjb25zZWNyYXRlZCBhbmQgZGV2b3RlZCBieSB5b3UgSQogICAgICAga25vdyBub3QsIHRoYXQgeW91IHRoaW5rIGl0IG5lY2Vzc2FyeSB0byBwbHVuZ2UgaXQgaW4gdGhlIGJvZHkgb2YgdGhlIGNvbnN1bC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQ2FuIHRoZSBsaW1pdCBvZiB0aGlzIGxpZmUsIE8gQ2F0aWxpbmUsIGNhbiB0aGUgYnJlYXRoCiAgICAgICBvZiB0aGlzIGF0bW9zcGhlcmUgYmUgcGxlYXNhbnQgdG8geW91LCB3aGVuIHlvdSBrbm93IHRoYXQgdGhlcmUgaXMgbm90IG9uZSBtYW4gb2YgdGhvc2UgaGVyZQogICAgICAgcHJlc2VudCB3aG8gaXMgaWdub3JhbnQgdGhhdCB5b3UsIG9uIHRoZSBsYXN0IGRheSBvZiB0aGUgeWVhciwgd2hlbiBMZXBpZHVzIGFuZCBUdWxsdXMgd2VyZQogICAgICAgY29uc3Vscywgc3Rvb2QgaW4gdGhlIGFzc2VtYmx5IGFybWVkOyB0aGF0IHlvdSBoYWQgcHJlcGFyZWQgeW91ciBoYW5kIGZvciB0aGUgc2xhdWdodGVyIG9mCiAgICAgICB0aGUgY29uc3VscyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgbm8gcmVhc29uIG9yIGZlYXIgb2YgeW91cnMgaGluZGVyZWQgeW91cgogICAgICAgY3JpbWUgYW5kIG1hZG5lc3MsIGJ1dCB0aGUgZm9ydHVuZSBvZiB0aGUgcmVwdWJsaWM/IEFuZCBJIHNheSBubyBtb3JlIG9mIHRoZXNlIHRoaW5ncywgZm9yCiAgICAgICB0aGV5IGFyZSBub3QgdW5rbm93biB0byBldmVyeSBvbmUuIEhvdyBvZnRlbiBoYXZlIHlvdSBlbmRlYXZvdXJlZCB0byBzbGF5IG1lLCBib3RoIGFzIGNvbnN1bAogICAgICAgZWxlY3QgYW5kIGFzIGFjdHVhbCBjb25zdWw/IGhvdyBtYW55IHNob3RzIG9mIHlvdXJzLCBzbyBhaW1lZCB0aGF0IHRoZXkgc2VlbWVkIGltcG9zc2libGUgdG8KICAgICAgIGJlIGVzY2FwZWQsIGhhdmUgSSBhdm9pZGVkIGJ5IHNvbWUgc2xpZ2h0IHN0b29waW5nIGFzaWRlLCBhbmQgc29tZSBkb2RnaW5nLCBhcyBpdCB3ZXJlLCBvZiBteQogICAgICAgYm9keT8gWW91IGF0dGVtcHQgbm90aGluZywgeW91IGV4ZWN1dGUgbm90aGluZywgeW91IGRldmlzZSBub3RoaW5nIHRoYXQgY2FsbCBiZSBrZXB0IGhpZCBmcm9tCiAgICAgICBtZSBhdCB0aGUgcHJvcGVyIHRpbWU7IGFuZCB5ZXQgeW91IGRvIG5vdCBjZWFzZSB0byBhdHRlbXB0IGFuZCB0byBjb250cml2ZS4gPC90cmFuc2xhdGlvbj4="
translation['1.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSG93IG9mdGVuIGFscmVhZHkgaGFzIHRoYXQgZGFnZ2VyIG9mIHlvdXJzIGJlZW4gd3Jlc3RlZCBmcm9tIHlvdXIgaGFuZHM/CiAgICAgICBob3cgb2Z0ZW4gaGFzIGl0IHNsaXBwZWQgdGhyb3VnaCB0aGVtIGJ5IHNvbWUgY2hhbmNlLCBhbmQgZHJvcHBlZCBkb3duPyBhbmQgeWV0IHlvdSBjYW5ub3QKICAgICAgIGFueSBsb25nZXIgZG8gd2l0aG91dCBpdDsgYW5kIHRvIHdoYXQgc2FjcmVkIG15c3RlcmllcyBpdCBpcyBjb25zZWNyYXRlZCBhbmQgZGV2b3RlZCBieSB5b3UgSQogICAgICAga25vdyBub3QsIHRoYXQgeW91IHRoaW5rIGl0IG5lY2Vzc2FyeSB0byBwbHVuZ2UgaXQgaW4gdGhlIGJvZHkgb2YgdGhlIGNvbnN1bC4gPC90cmFuc2xhdGlvbj4="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IG5vdywgd2hhdCBpcyB0aGF0IGxpZmUgb2YgeW91cnMgdGhhdCB5b3UgYXJlIGxlYWRpbmc/IEZvciBJIHdpbGwgc3BlYWsgdG8geW91IG5vdCBzbyBhcwogICAgICAgdG8gc2VlbSBpbmZsdWVuY2VkIGJ5IHRoZSBoYXRyZWQgSSBvdWdodCB0byBmZWVsLCBidXQgYnkgcGl0eSwgbm90aGluZyBvZiB3aGljaCBpcyBkdWUgdG8KICAgICAgIHlvdS4gWW91IGNhbWUgYSBsaXR0bGUgd2hpbGUgYWdvIGludG8gdGhlIHNlbmF0ZSBpbiBzbyBudW1lcm91cyBhbiBhc3NlbWJseSwgd2hvIG9mIHNvIG1hbnkKICAgICAgIGZyaWVuZHMgYW5kIGNvbm5lY3Rpb25zIG9mIHlvdXJzIHNhbHV0ZWQgeW91PyBJZiB0aGlzIGluIHRoZSBtZW1vcnkgb2YgbWFuIG5ldmVyIGhhcHBlbmVkIHRvCiAgICAgICBhbnkgb25lIGVsc2UsIGFyZSB5b3Ugd2FpdGluZyBmb3IgaW5zdWx0cyBieSB3b3JkIG9mIG1vdXRoLCB3aGVuIHlvdSBhcmUgb3ZlcndoZWxtZWQgYnkgdGhlCiAgICAgICBtb3N0IGlycmVzaXN0aWJsZSBjb25kZW1uYXRpb24gb2Ygc2lsZW5jZT8gSXMgaXQgbm90aGluZyB0aGF0IGF0IHlvdXIgYXJyaXZhbCBhbGwgdGhvc2Ugc2VhdHMKICAgICAgIHdlcmUgdmFjYXRlZD8gdGhhdCBhbGwgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLCB3aG8gaGFkIG9mdGVuIGJlZW4gbWFya2VkIG91dCBieSB5b3UgZm9yCiAgICAgICBzbGF1Z2h0ZXIsIHRoZSB2ZXJ5IG1vbWVudCB5b3Ugc2F0IGRvd24sIGxlZnQgdGhhdCBwYXJ0IG9mIHRoZSBiZW5jaGVzIGJhcmUgYW5kIHZhY2FudD8gV2l0aAogICAgICAgd2hhdCBmZWVsaW5ncyBkbyB5b3UgdGhpbmsgeW91IG91Z2h0IHRvIGJlYXIgdGhpcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBPbiBteQogICAgICAgaG9ub3VyLCBpZiBteSBzbGF2ZXMgZmVhcmVkIG1lIGFzIGFsbCB5b3VyIGZlbGxvdy1jaXRpemVucyBmZWFyIHlvdSwgSSBzaG91bGQgdGhpbmsgSSBtdXN0CiAgICAgICBsZWF2ZSBteSBob3VzZS4gRG8gbm90IHlvdSB0aGluayB5b3Ugc2hvdWxkIGxlYXZlIHRoZSBjaXR5PyBJZiBJIHNhdyB0aGF0IEkgd2FzIGV2ZW4KICAgICAgIHVuZGVzZXJ2ZWRseSBzbyBzdXNwZWN0ZWQgYW5kIGJhdGVkIGJ5IG15IGZlbGxvdy1jaXRpemVucywgSSB3b3VsZCByYXRoZXIgZmxlZSBmcm9tIHRoZWlyCiAgICAgICBzaWdodCB0aGFuIGJlIGdhemVkIGF0IGJ5IHRoZSBob3N0aWxlIGV5ZXMgb2YgZXZlcnkgb25lLiBBbmQgZG8geW91LCB3aG8sIGZyb20gdGhlCiAgICAgICBjb25zY2lvdXNuZXNzIG9mIHlvdXIgd2lja2VkbmVzcywga25vdyB0aGF0IHRoZSBoYXRyZWQgb2YgYWxsIG1lbiBpcyBqdXN0IGFuZCBoYXMgYmVlbiBsb25nCiAgICAgICBkdWUgdG8geW91LCBoZXNpdGF0ZSB0byBhdm9pZCB0aGUgc2lnaHQgYW5kIHByZXNlbmNlIG9mIHRob3NlIG1lbiB3aG9zZSBtaW5kcyBhbmQgc2Vuc2VzIHlvdQogICAgICAgb2ZmZW5kPyBJZiB5b3VyIHBhcmVudHMgZmVhcmVkIGFuZCBoYXRlZCB5b3UsIGFuZCBpZiB5b3UgY291bGQgYnkgbm8gbWVhbnMgcGFjaWZ5IHRoZW0sIHlvdQogICAgICAgd291bGQsIEkgdGhpbmssIGRlcGFydCBzb21ld2hlcmUgb3V0IG9mIHRoZWlyIHNpZ2h0LiBOb3csIHlvdXIgY291bnRyeSwgd2hpY2ggaXMgdGhlIGNvbW1vbgogICAgICAgcGFyZW50IG9mIGFsbCBvZiB1cywgaGF0ZXMgYW5kIGZlYXJzIHlvdSwgYW5kIGhhcyBubyBvdGhlciBvcGluaW9uIG9mIHlvdSwgdGhhbiB0aGF0IHlvdSBhcmUKICAgICAgIG1lZGl0YXRpbmcgcGFycmljaWRlIGluIGhlciBjYXNlOyBhbmQgd2lsbCB5b3UgbmVpdGhlciBmZWVsIGF3ZSBvZiBoZXIgYXV0aG9yaXR5LCBub3IKICAgICAgIGRlZmVyZW5jZSBmb3IgaGVyIGp1ZGdtZW50LCBub3IgZmVhciBvZiBoZXIgcG93ZXI/IDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gbXkKICAgICAgIGhvbm91ciwgaWYgbXkgc2xhdmVzIGZlYXJlZCBtZSBhcyBhbGwgeW91ciBmZWxsb3ctY2l0aXplbnMgZmVhciB5b3UsIEkgc2hvdWxkIHRoaW5rIEkgbXVzdAogICAgICAgbGVhdmUgbXkgaG91c2UuIERvIG5vdCB5b3UgdGhpbmsgeW91IHNob3VsZCBsZWF2ZSB0aGUgY2l0eT8gSWYgSSBzYXcgdGhhdCBJIHdhcyBldmVuCiAgICAgICB1bmRlc2VydmVkbHkgc28gc3VzcGVjdGVkIGFuZCBiYXRlZCBieSBteSBmZWxsb3ctY2l0aXplbnMsIEkgd291bGQgcmF0aGVyIGZsZWUgZnJvbSB0aGVpcgogICAgICAgc2lnaHQgdGhhbiBiZSBnYXplZCBhdCBieSB0aGUgaG9zdGlsZSBleWVzIG9mIGV2ZXJ5IG9uZS4gQW5kIGRvIHlvdSwgd2hvLCBmcm9tIHRoZQogICAgICAgY29uc2Npb3VzbmVzcyBvZiB5b3VyIHdpY2tlZG5lc3MsIGtub3cgdGhhdCB0aGUgaGF0cmVkIG9mIGFsbCBtZW4gaXMganVzdCBhbmQgaGFzIGJlZW4gbG9uZwogICAgICAgZHVlIHRvIHlvdSwgaGVzaXRhdGUgdG8gYXZvaWQgdGhlIHNpZ2h0IGFuZCBwcmVzZW5jZSBvZiB0aG9zZSBtZW4gd2hvc2UgbWluZHMgYW5kIHNlbnNlcyB5b3UKICAgICAgIG9mZmVuZD8gSWYgeW91ciBwYXJlbnRzIGZlYXJlZCBhbmQgaGF0ZWQgeW91LCBhbmQgaWYgeW91IGNvdWxkIGJ5IG5vIG1lYW5zIHBhY2lmeSB0aGVtLCB5b3UKICAgICAgIHdvdWxkLCBJIHRoaW5rLCBkZXBhcnQgc29tZXdoZXJlIG91dCBvZiB0aGVpciBzaWdodC4gTm93LCB5b3VyIGNvdW50cnksIHdoaWNoIGlzIHRoZSBjb21tb24KICAgICAgIHBhcmVudCBvZiBhbGwgb2YgdXMsIGhhdGVzIGFuZCBmZWFycyB5b3UsIGFuZCBoYXMgbm8gb3RoZXIgb3BpbmlvbiBvZiB5b3UsIHRoYW4gdGhhdCB5b3UgYXJlCiAgICAgICBtZWRpdGF0aW5nIHBhcnJpY2lkZSBpbiBoZXIgY2FzZTsgYW5kIHdpbGwgeW91IG5laXRoZXIgZmVlbCBhd2Ugb2YgaGVyIGF1dGhvcml0eSwgbm9yCiAgICAgICBkZWZlcmVuY2UgZm9yIGhlciBqdWRnbWVudCwgbm9yIGZlYXIgb2YgaGVyIHBvd2VyPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNoZSwgTyBDYXRpbGluZSwgdGh1cyBwbGVhZHMgd2l0aCB5b3UsIGFuZCBhZnRlciBhCiAgICAgICBtYW5uZXIgc2lsZW50bHkgc3BlYWtzIHRvIHlvdTrigJRUaGVyZSBoYXMgbm93IGZvciBtYW55IHllYXJzIGJlZW4gbm8gY3JpbWUgY29tbWl0dGVkCiAgICAgICBidXQgYnkgeW91OyBubyBhdHJvY2l0eSBoYXMgdGFrZW4gcGxhY2Ugd2l0aG91dCB5b3U7IHlvdSBhbG9uZSB1bnB1bmlzaGVkIGFuZCB1bnF1ZXN0aW9uZWQKICAgICAgIGhhdmUgbXVyZGVyZWQgdGhlIGNpdGl6ZW5zLCBoYXZlIGhhcmFzc2VkIGFuZCBwbHVuZGVyZWQgdGhlIGFsbGllczsgeW91IGFsb25lIGhhdmUgaGFkIHBvd2VyCiAgICAgICBub3Qgb25seSB0byBuZWdsZWN0IGFsbCBsYXdzIGFuZCBpbnZlc3RpZ2F0aW9ucywgYnV0IHRvIG92ZXJ0aHJvdyBhbmQgYnJlYWsgdGhyb3VnaCB0aGVtLgogICAgICAgWW91ciBmb3JtZXIgYWN0aW9ucywgdGhvdWdoIHRoZXkgb3VnaHQgbm90IHRvIGhhdmUgYmVlbiBib3JuZSwgeWV0IEkgZGlkIGJlYXIgYXMgd2VsbCBhcyBJCiAgICAgICBjb3VsZDsgYnV0IG5vdyB0aGF0IEkgc2hvdWxkIGJlIHdob2xseSBvY2N1cGllZCB3aXRoIGZlYXIgb2YgeW91IGFsb25lLCB0aGF0IGF0IGV2ZXJ5IHNvdW5kIEkKICAgICAgIHNob3VsZCBkcmVhZCBDYXRpbGluZSwgdGhhdCBubyBkZXNpZ24gc2hvdWxkIHNlZW0gcG9zc2libGUgdG8gYmUgZW50ZXJ0YWluZWQgYWdhaW5zdCBtZSB3aGljaAogICAgICAgZG9lcyBub3QgcHJvY2VlZCBmcm9tIHlvdXIgd2lja2VkbmVzcywgdGhpcyBpcyBubyBsb25nZXIgZW5kdXJhYmxlLiBEZXBhcnQsIHRoZW4sIGFuZCBkZWxpdmVyCiAgICAgICBtZSBmcm9tIHRoaXMgZmVhcjsgdGhhdCwgaWYgaXQgYmUgYSBqdXN0IG9uZSwgSSBtYXkgbm90IGJlIGRlc3Ryb3llZDsgaWYgYW4gaW1hZ2luYXJ5IG9uZSwKICAgICAgIHRoYXQgYXQgbGVhc3QgSSBtYXkgYXQgbGFzdCBjZWFzZSB0byBmZWFyLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNoZSwgTyBDYXRpbGluZSwgdGh1cyBwbGVhZHMgd2l0aCB5b3UsIGFuZCBhZnRlciBhCiAgICAgICBtYW5uZXIgc2lsZW50bHkgc3BlYWtzIHRvIHlvdTrigJRUaGVyZSBoYXMgbm93IGZvciBtYW55IHllYXJzIGJlZW4gbm8gY3JpbWUgY29tbWl0dGVkCiAgICAgICBidXQgYnkgeW91OyBubyBhdHJvY2l0eSBoYXMgdGFrZW4gcGxhY2Ugd2l0aG91dCB5b3U7IHlvdSBhbG9uZSB1bnB1bmlzaGVkIGFuZCB1bnF1ZXN0aW9uZWQKICAgICAgIGhhdmUgbXVyZGVyZWQgdGhlIGNpdGl6ZW5zLCBoYXZlIGhhcmFzc2VkIGFuZCBwbHVuZGVyZWQgdGhlIGFsbGllczsgeW91IGFsb25lIGhhdmUgaGFkIHBvd2VyCiAgICAgICBub3Qgb25seSB0byBuZWdsZWN0IGFsbCBsYXdzIGFuZCBpbnZlc3RpZ2F0aW9ucywgYnV0IHRvIG92ZXJ0aHJvdyBhbmQgYnJlYWsgdGhyb3VnaCB0aGVtLgogICAgICAgWW91ciBmb3JtZXIgYWN0aW9ucywgdGhvdWdoIHRoZXkgb3VnaHQgbm90IHRvIGhhdmUgYmVlbiBib3JuZSwgeWV0IEkgZGlkIGJlYXIgYXMgd2VsbCBhcyBJCiAgICAgICBjb3VsZDsgYnV0IG5vdyB0aGF0IEkgc2hvdWxkIGJlIHdob2xseSBvY2N1cGllZCB3aXRoIGZlYXIgb2YgeW91IGFsb25lLCB0aGF0IGF0IGV2ZXJ5IHNvdW5kIEkKICAgICAgIHNob3VsZCBkcmVhZCBDYXRpbGluZSwgdGhhdCBubyBkZXNpZ24gc2hvdWxkIHNlZW0gcG9zc2libGUgdG8gYmUgZW50ZXJ0YWluZWQgYWdhaW5zdCBtZSB3aGljaAogICAgICAgZG9lcyBub3QgcHJvY2VlZCBmcm9tIHlvdXIgd2lja2VkbmVzcywgdGhpcyBpcyBubyBsb25nZXIgZW5kdXJhYmxlLiBEZXBhcnQsIHRoZW4sIGFuZCBkZWxpdmVyCiAgICAgICBtZSBmcm9tIHRoaXMgZmVhcjsgdGhhdCwgaWYgaXQgYmUgYSBqdXN0IG9uZSwgSSBtYXkgbm90IGJlIGRlc3Ryb3llZDsgaWYgYW4gaW1hZ2luYXJ5IG9uZSwKICAgICAgIHRoYXQgYXQgbGVhc3QgSSBtYXkgYXQgbGFzdCBjZWFzZSB0byBmZWFyLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPklmLCBhcyBJIGhhdmUgc2FpZCwgeW91ciBjb3VudHJ5IHdlcmUgdGh1cyB0byBhZGRyZXNzIHlvdSwgb3VnaHQgc2hlIG5vdCB0byBvYnRhaW4gaGVyCiAgICAgICByZXF1ZXN0LCBldmVuIGlmIHNoZSB3ZXJlIG5vdCBhYmxlIHRvIGVuZm9yY2UgaXQ/IFdoYXQgc2hhbGwgSSBzYXkgb2YgeW91ciBoYXZpbmcgZ2l2ZW4KICAgICAgIHlvdXJzZWxmIGludG8gY3VzdG9keT8gd2hhdCBvZiB5b3VyIGhhdmluZyBzYWlkLCBmb3IgdGhlIHNha2Ugb2YgYXZvaWRpbmcgc3VzcGljaW9uLCB0aGF0IHlvdQogICAgICAgd2VyZSB3aWxsaW5nIHRvIGR3ZWxsIGluIHRoZSBob3VzZSBvZiBNYXJjdXMgTGVwaWR1cz8gQW5kIHdoZW4geW91IHdlcmUgbm90IHJlY2VpdmVkIGJ5IGhpbSwKICAgICAgIHlvdSBkYXJlZCBldmVuIHRvIGNvbWUgdG8gbWUsIGFuZCBiZWdnZWQgbWUgdG8ga2VlcCB5b3UgaW4gbXkgaG91c2U7IGFuZCB3aGVuIHlvdSBoYWQKICAgICAgIHJlY2VpdmVkIGFuc3dlciBmcm9tIG1lIHRoYXQgSSBjb3VsZCBub3QgcG9zc2libHkgYmUgc2FmZSBpbiB0aGUgc2FtZSBob3VzZSB3aXRoIHlvdSwgd2hlbiBJCiAgICAgICBjb25zaWRlcmVkIG15c2VsZiBpbiBncmVhdCBkYW5nZXIgYXMgbG9uZyBhcyB3ZSB3ZXJlIGluIHRoZSBzYW1lIGNpdHksIHlvdSBjYW1lIHRvIFF1aW50dXMKICAgICAgIE1ldGVsbHVzLCB0aGUgcHJhZXRvciwgYW5kIGJlaW5nIHJlamVjdGVkIGJ5IGhpbSwgeW91IHBhc3NlZCBvbiB0byB5b3VyIGFzc29jaWF0ZSwgdGhhdCBtb3N0CiAgICAgICBleGNlbGxlbnQgbWFuLCBNYXJjdXMgTWFyY2VsbHVzLCB3aG8gd291bGQgYmUsIEkgc3VwcG9zZSB5b3UgdGhvdWdodCwgbW9zdCBkaWxpZ2VudCBpbgogICAgICAgZ3VhcmRpbmcgeW91LCBtb3N0IHNhZ2FjaW91cyBoaSBzdXNwZWN0aW5nIHlvdSwgYW5kIG1vc3QgYm9sZCBpbiBwdW5pc2hpbmcgeW91OyBidXQgaG93IGZhcgogICAgICAgY2FuIHdlIHRoaW5rIHRoYXQgbWFuIG91Z2h0IHRvIGJlIGZyb20gYm9uZHMgYW5kIGltcHJpc29ubWVudCB3aG8gaGFzIGFscmVhZHkganVkZ2VkIGhpbXNlbGYKICAgICAgIGRlc2VydmluZyBvZiBiZWluZyBnaXZlbiBpbnRvIGN1c3RvZHk/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5TaW5jZSwgdGhlbiwgdGhpcyBpcyB0aGUgY2FzZSwgZG8geW91IGhlc2l0YXRlLCBPIENhdGlsaW5lLCBpZiB5b3UgY2Fubm90IHJlbWFpbiBoZXJlIHdpdGgKICAgICAgIHRyYW5xdWlsbGl0eSwgdG8gZGVwYXJ0IHRvIHNvbWUgZGlzdGFudCBsYXVkLCBhbmQgdG8gdHJ1c3QgeW91ciBsaWZlLCBzYXZlZCBmcm9tIGp1c3QgYW5kCiAgICAgICBkZXNlcnZlZCBwdW5pc2htZW50LCB0byBmbGlnaHQgYW5kIHNvbGl0dWRlPyBNYWtlIGEgbW90aW9uLCBzYXkgeW91LCB0byB0aGUgc2VuYXRlLCAoZm9yIHRoYXQKICAgICAgIGlzIHdoYXQgeW91IGRlbWFuZCkgYW5kIGlmIHRodXMgYm9keSB2b3RlcyB0aGF0IHlvdSBvdWdodCB0byBnbyBpbnRvIGJhbmlzaG1lbnQsIHlvdSBzYXkgdGhhdAogICAgICAgeW91IHdpbGwgb2JleS4gSSB3aWxsIG5vdCBtYWtlIHN1Y2ggYSBtb3Rpb24sIGl0IGlzIGNvbnRyYXJ5IHRvIG15IHByaW5jaXBsZXMsIGFuZCB5ZXQgSSB3aWxsCiAgICAgICBsZXQgeW91IHNlZSB3aGF0IHRoZXNlIG1lbiB0aGluayBvZiB5b3UuIEJlIGdvbmUgZnJvbSB0aGUgY2l0eSwgTyBDYXRpbGluZSwgZGVsaXZlciB0aGUKICAgICAgIHJlcHVibGljIGZyb20gZmVhcjsgZGVwYXJ0IGludG8gYmFuaXNobWVudCwgaWYgdGhhdCBpcyB0aGUgd29yZCB5b3UgYXJlIHdhaXRpbmcgZm9yLiBXaGF0CiAgICAgICBub3csIE8gQ2F0aWxpbmU/IERvIHlvdSBub3QgcGVyY2VpdmUsIGRvIHlvdSBub3Qgc2VlIHRoZSBzaWxlbmNlIG9mIHRoZXNlIG1lbjsgdGhleSBwZXJtaXQKICAgICAgIGl0LCB0aGV5IHNheSBub3RoaW5nOyB3aHkgd2FpdCB5b3UgZm9yIHRoZSBhdXRob3JpdHkgb2YgdGhlaXIgd29yZHMgd2hlbiB5b3Ugc2VlIHRoZWlyIHdpc2hlcwogICAgICAgaW4gdGhlaXIgc2lsZW5jZT8gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhhZCBJIHNhaWQgdGhlIHNhbWUgdG8gdGhpcyBleGNlbGxlbnQgeW91bmcgbWFuLAogICAgICAgUHVibGl1cyBTZXh0aXVzLCBvciB0byB0aGF0IGJyYXZlIG1hbiwgTWFyY3VzIE1hcmNlbGx1cywgYmVmb3JlIHRoaXMgdGltZSB0aGUgc2VuYXRlIHdvdWxkCiAgICAgICBkZXNlcnZlZGx5IGhhdmUgbGFpZCB2aW9sZW50IGhhbmRzIG9uIG1lLCBjb25zdWwgdGhvdWdoIEkgYmUsIGluIHRoaXMgdmVyeSB0ZW1wbGUuIEJ1dCB0bwogICAgICAgeW91LCBDYXRpbGluZSwgd2hpbGUgdGhleSBhcmUgcXVpZXQgdGhleSBhcHByb3ZlLCB3aGlsZSB0aGV5IHBlcm1pdCBtZSB0byBzcGVhayB0aGV5IHZvdGUsCiAgICAgICB3aGlsZSB0aGV5IGFyZSBzaWxlbnQgdGhleSBhcmUgbG91ZCBhbmQgZWxvcXVlbnQuIEFuZCBub3QgdGhleSBhbG9uZSwgd2hvc2UgYXV0aG9yaXR5CiAgICAgICBmb3Jzb290aCBpcyBkZWFyIHRvIHlvdSwgdGhvdWdoIHRoZWlyIGxpdmVzIGFyZSB1bmltcG9ydGFudCwgYnV0IHRoZSBSb21hbiBrbmlnaHRzIHRvbywgdGhvc2UKICAgICAgIG1vc3QgaG9ub3VyYWJsZSBhbmQgZXhjZWxsZW50IG1lbiwgYW5kIHRoZSBvdGhlciB2aXJ0dW91cyBjaXRpemVucyB3aG8gYXJlIG5vdyBzdXJyb3VuZGluZwogICAgICAgdGhlIHNlbmF0ZSwgd2hvc2UgbnVtYmVycyB5b3UgY291bGQgc2VlLCB3aG9zZSBkZXNpcmVzIHlvdSBjb3VsZCBrbm93LCBhbmQgd2hvc2Ugdm9pY2VzIHlvdSBhCiAgICAgICBmZXcgbWludXRlcyBhZ28gY291bGQgaGVhcizigJR5ZXMsIHdob3NlIHZlcnkgaGFuZHMgYW5kIHdlYXBvbnMgSSBoYXZlIGZvciBzb21lIHRpbWUKICAgICAgIGJlZW4gc2NhcmNlbHkgYWJsZSB0byBrZWVwIG9mZiBmcm9tIHlvdTsgYnV0IHRob3NlLCB0b28sIEkgd2lsbCBlYXNpbHkgYnJpbmcgdG8gYXR0ZW5kIHlvdSB0bwogICAgICAgdGhlIGdhdGVzIGlmIHlvdSBsZWF2ZSB0aGVzZSBwbGFjZXMgeW91IGhhdmUgYmVlbiBsb25nIGRlc2lyaW5nIHRvIGxheSB3YXN0ZS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhhZCBJIHNhaWQgdGhlIHNhbWUgdG8gdGhpcyBleGNlbGxlbnQgeW91bmcgbWFuLAogICAgICAgUHVibGl1cyBTZXh0aXVzLCBvciB0byB0aGF0IGJyYXZlIG1hbiwgTWFyY3VzIE1hcmNlbGx1cywgYmVmb3JlIHRoaXMgdGltZSB0aGUgc2VuYXRlIHdvdWxkCiAgICAgICBkZXNlcnZlZGx5IGhhdmUgbGFpZCB2aW9sZW50IGhhbmRzIG9uIG1lLCBjb25zdWwgdGhvdWdoIEkgYmUsIGluIHRoaXMgdmVyeSB0ZW1wbGUuIEJ1dCB0bwogICAgICAgeW91LCBDYXRpbGluZSwgd2hpbGUgdGhleSBhcmUgcXVpZXQgdGhleSBhcHByb3ZlLCB3aGlsZSB0aGV5IHBlcm1pdCBtZSB0byBzcGVhayB0aGV5IHZvdGUsCiAgICAgICB3aGlsZSB0aGV5IGFyZSBzaWxlbnQgdGhleSBhcmUgbG91ZCBhbmQgZWxvcXVlbnQuIEFuZCBub3QgdGhleSBhbG9uZSwgd2hvc2UgYXV0aG9yaXR5CiAgICAgICBmb3Jzb290aCBpcyBkZWFyIHRvIHlvdSwgdGhvdWdoIHRoZWlyIGxpdmVzIGFyZSB1bmltcG9ydGFudCwgYnV0IHRoZSBSb21hbiBrbmlnaHRzIHRvbywgdGhvc2UKICAgICAgIG1vc3QgaG9ub3VyYWJsZSBhbmQgZXhjZWxsZW50IG1lbiwgYW5kIHRoZSBvdGhlciB2aXJ0dW91cyBjaXRpemVucyB3aG8gYXJlIG5vdyBzdXJyb3VuZGluZwogICAgICAgdGhlIHNlbmF0ZSwgd2hvc2UgbnVtYmVycyB5b3UgY291bGQgc2VlLCB3aG9zZSBkZXNpcmVzIHlvdSBjb3VsZCBrbm93LCBhbmQgd2hvc2Ugdm9pY2VzIHlvdSBhCiAgICAgICBmZXcgbWludXRlcyBhZ28gY291bGQgaGVhcizigJR5ZXMsIHdob3NlIHZlcnkgaGFuZHMgYW5kIHdlYXBvbnMgSSBoYXZlIGZvciBzb21lIHRpbWUKICAgICAgIGJlZW4gc2NhcmNlbHkgYWJsZSB0byBrZWVwIG9mZiBmcm9tIHlvdTsgYnV0IHRob3NlLCB0b28sIEkgd2lsbCBlYXNpbHkgYnJpbmcgdG8gYXR0ZW5kIHlvdSB0bwogICAgICAgdGhlIGdhdGVzIGlmIHlvdSBsZWF2ZSB0aGVzZSBwbGFjZXMgeW91IGhhdmUgYmVlbiBsb25nIGRlc2lyaW5nIHRvIGxheSB3YXN0ZS4gPC90cmFuc2xhdGlvbj4="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5ZXQsIHdoeSBhbSBJIHNwZWFraW5nPyB0aGF0IGFueXRoaW5nIG1heSBjaGFuZ2UgeW91ciBwdXJwb3NlPyB0aGF0IHlvdSBtYXkgZXZlciBhbWVuZAogICAgICAgeW91ciBsaWZlPyB0aGF0IHlvdSBtYXkgbWVkaXRhdGUgZmxpZ2h0IG9yIHRoaW5rIG9mIHZvbHVudGFyeSBiYW5pc2htZW50PyBJIHdpc2ggdGhlIGdvZHMgbWF5CiAgICAgICBnaXZlIHlvdSBzdWNoIGEgbWluZDsgdGhvdWdoIEkgc2VlLCBpZiBhbGFybWVkIGF0IG15IHdvcmRzIHlvdSBicmluZyB5b3VyIG1pbmQgdG8gZ28gaW50bwogICAgICAgYmFuaXNobWVudCwgd2hhdCBhIHN0b3JtIG9mIHVucG9wdWxhcml0eSBoYW5ncyBvdmVyIG1lLCBpZiBub3QgYXQgcHJlc2VudCwgd2hpbGUgdGhlIG1lbW9yeQogICAgICAgb2YgeW91ciB3aWNrZWRuZXNzIGlzIGZyZXNoLCBhdCBhbGwgZXZlbnRzIGhlcmVhZnRlci4gQnV0IGl0IGlzIHdvcnRod2hpbGUgdG8gaW5jdXIgdGhhdCwgYXMKICAgICAgIGxvbmcgYXMgdGhhdCBpcyBidXQgYSBwcml2YXRlIG1pc2ZvcnR1bmUgb2YgbXkgb3duLCBhbmQgaXMgdW5jb25uZWN0ZWQgd2l0aCB0aGUgZGFuZ2VycyBvZgogICAgICAgdGhlIHJlcHVibGljLiBCdXQgd2UgY2Fubm90IGV4cGVjdCB0aGF0IHlvdSBzaG91bGQgYmUgY29uY2VybmVkIGF0IHlvdXIgb3duIHZpY2VzLCB0aGF0IHlvdQogICAgICAgc2hvdWxkIGZlYXIgdGhlIHBlbmFsdGllcyBvZiB0aGUgbGF3cywgb3IgdGhhdCB5b3Ugc2hvdWxkIHlpZWxkIHRvIHRoZSBuZWNlc3NpdGllcyBvZiB0aGUKICAgICAgIHJlcHVibGljLCBmb3IgeW91IGFyZSBub3QsIE8gQ2F0aWxpbmUsIG9uZSB3aG9tIGVpdGhlciBzaGFtZSBjYW4gcmVjYWxsIGZyb20gaW5mYW15LCBvciBmZWFyCiAgICAgICBmcm9tIGRhbmdlciwgb3IgcmVhc29uIGZyb20gbWFkbmVzcy4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIGdvIGZvcnRoLCBhbmQgaWYgeW91CiAgICAgICB0byBtYWtlIG1lLCB5b3VyIGVuZW15IGFzIHlvdSBjYWxsIG1lLCB1bnBvcHVsYXIsIGdvIHN0cmFpZ2h0IGludG8gYmFuaXNobWVudC4gSSBzaGFsbAogICAgICAgc2NhcmNlbHkgYmUgYWJsZSB0byBlbmR1ZSBhbGwgdGhhdCB3aWxsIGJlIHNhaWQgaWYgeW91IGRvIHNvOyBJIHNoYWxsIHNjYXJjZWx5IGJlIGFibGUgdG8KICAgICAgIHN1cHBvcnQgbXkgbG9hZCBvZiB1bnBvcHVsYXJpdHkgaWYgeW91IGRvIGdvIGludG8gYmFuaXNobWVudCBhdCB0aGUgY29tbWFuZCBvZiB0aGUgY29uc3VsOwogICAgICAgYnV0IGlmIHlvdSB3aXNoIHNlcnZlIG15IGNyZWRpdCBhbmQgcmVwdXRhdGlvbiwgZ28gZm9ydGggd2l0aCB5b3VyIGlsbC1vbWVuZWQgYmFuZCBvZgogICAgICAgcHJvZmxpZ2F0ZXM7IGJldGFrZSB5b3Vyc2VsZiB0byBNYW5pbGl1cywgcm91c2UgdXAgdGhlIGFiYW5kb25lZCBjaXRpemVucywgc2VwYXJhdGUgeW91cnNlbGYKICAgICAgIGZyb20gdGhlIGdvb2Qgb25lcywgd2FnZSB3YXIgYWdhaW5zdCB5b3VyIGNvdW50cnksIGV4dWx0IGluIHlvdXIgaW1waW91cyBiYW5kaXR0aSwgc28gdGhhdAogICAgICAgeW91IG1heSBub3Qgc2VlbSB0byBoYXZlIGJlZW4gZHJpdmVuIG91dCBieSBtZSBhbmQgZ29uZSB0byBzdHJhbmdlcnMsIGJ1dCB0byBoYXZlIGdvbmUKICAgICAgIGludml0ZWQgdG8geW91ciBvd24gZnJpZW5kcy48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIGdvIGZvcnRoLCBhbmQgaWYgeW91CiAgICAgICB0byBtYWtlIG1lLCB5b3VyIGVuZW15IGFzIHlvdSBjYWxsIG1lLCB1bnBvcHVsYXIsIGdvIHN0cmFpZ2h0IGludG8gYmFuaXNobWVudC4gSSBzaGFsbAogICAgICAgc2NhcmNlbHkgYmUgYWJsZSB0byBlbmR1ZSBhbGwgdGhhdCB3aWxsIGJlIHNhaWQgaWYgeW91IGRvIHNvOyBJIHNoYWxsIHNjYXJjZWx5IGJlIGFibGUgdG8KICAgICAgIHN1cHBvcnQgbXkgbG9hZCBvZiB1bnBvcHVsYXJpdHkgaWYgeW91IGRvIGdvIGludG8gYmFuaXNobWVudCBhdCB0aGUgY29tbWFuZCBvZiB0aGUgY29uc3VsOwogICAgICAgYnV0IGlmIHlvdSB3aXNoIHNlcnZlIG15IGNyZWRpdCBhbmQgcmVwdXRhdGlvbiwgZ28gZm9ydGggd2l0aCB5b3VyIGlsbC1vbWVuZWQgYmFuZCBvZgogICAgICAgcHJvZmxpZ2F0ZXM7IGJldGFrZSB5b3Vyc2VsZiB0byBNYW5pbGl1cywgcm91c2UgdXAgdGhlIGFiYW5kb25lZCBjaXRpemVucywgc2VwYXJhdGUgeW91cnNlbGYKICAgICAgIGZyb20gdGhlIGdvb2Qgb25lcywgd2FnZSB3YXIgYWdhaW5zdCB5b3VyIGNvdW50cnksIGV4dWx0IGluIHlvdXIgaW1waW91cyBiYW5kaXR0aSwgc28gdGhhdAogICAgICAgeW91IG1heSBub3Qgc2VlbSB0byBoYXZlIGJlZW4gZHJpdmVuIG91dCBieSBtZSBhbmQgZ29uZSB0byBzdHJhbmdlcnMsIGJ1dCB0byBoYXZlIGdvbmUKICAgICAgIGludml0ZWQgdG8geW91ciBvd24gZnJpZW5kcy48L3RyYW5zbGF0aW9uPg=="
translation['1.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaG91Z2ggd2h5IHNob3VsZCBJIGludml0ZSB5b3UsIGJ5IHdob20gSSBrbm93IG1lbiBoYXZlIGJlZW4gYWxyZWFkeSBzZW50IG9uIHRvIHdhaXQgaW4KICAgICAgIGFybXMgZm9yIHlvdSBhdCB0aGUgZm9ydW0gQXVyZWxpdW07IHdobyBJIGtub3cgaGFzIGZpeGVkIGFuZCBhZ3JlZWQgd2l0aCBNYW5saXVzIHVwb24gYQogICAgICAgc2V0dGxlZCBkYXk7IGJ5IHdob20gSSBrbm93IHRoYXQgdGhhdCBzaWx2ZXIgZWFnbGUsIHdoaWNoIEkgdHJ1c3Qgd2lsbCBiZSBydWlub3VzIGFuZCBmYXRhbAogICAgICAgdG8geW91IGFuZCB0byBhbGwgeW91ciBmcmllbmRzLCBhbmQgdG8gd2hpY2ggdGhlcmUgd2FzIHNldCB1cCBpbiB5b3VyIGhvdXNlIGEgc2hyaW5lIGFzIGl0CiAgICAgICB3ZXJlIG9mIHlvdXIgY3JpbWVzLCBoYXMgYmVlbiBhbHJlYWR5IHNlbnQgZm9yd2FyZC4gTmVlZCBJIGZlYXIgdGhhdCB5b3UgY2FuIGxvbmcgZG8gd2l0aG91dAogICAgICAgdGhhdCB3aGljaCB5b3UgdXNlZCB0byB3b3JzaGlwIHdoZW4gZ29pbmcgb3V0IHRvIGRvIG11cmRlciwgYW5kIGZyb20gd2hvc2UgYWx0YXJzIHlvdSBoYXZlCiAgICAgICBvZnRlbiB0cmFuc2ZlcnJlZCB5b3VyIGltcGlvdXMgaGFuZCB0byB0aGUgc2xhdWdodGVyIG9mIGNpdGl6ZW5zPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSB3aWxsIGdvIGF0IGxhc3Qgd2hlcmUgeW91ciB1bmJyaWRsZWQgYW5kIG1hZCBkZXNpcmUgaGFzIGJlZW4gbG9uZyBodXJyeWluZyB5b3UuIEFuZAogICAgICAgdGhpcyBjYXVzZXMgeW91IG5vIGdyaWVmOyBidXQgYW4gaW5jcmVkaWJsZSBwbGVhc3VyZS4gTmF0dXJlIGhhcyBmb3JtZWQgeW91LCBkZXNpcmUgaGFzCiAgICAgICB0cmFpbmVkIHlvdSwgZm9ydHVuZSBoYXMgcHJlc2VydmVkIHlvdSBmb3IgdGhpcyBpbnNhbml0eS4gTm90IG9ubHkgZGlkIHlvdSBuZXZlciBkZXNpcmUKICAgICAgIHF1aWV0LCBidXQgeW91IG5ldmVyIGV2ZW4gZGVzaXJlZCBhbnkgd2FyIGJ1dCBhIGNyaW1pbmFsIG9uZTsgeW91IGhhdmUgY29sbGVjdGVkIGEgYmF1ZCBvZgogICAgICAgcHJvZmxpZ2F0ZXMgYW5kIHdvcnRobGVzcyBtZW4sIGFiYW5kb25lZCBub3Qgb25seSBieSBhbGwgZm9ydHVuZSBidXQgZXZlbiBieSBob3BlLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVuIHdoYXQgaGFwcGluZXNzIHdpbGwgeW91IGVuam95IHdpdGggd2hhdCBkZWxpZ2h0CiAgICAgICB3aWxsIHlvdSBleHVsdCBpbiB3aGF0IHBsZWFzdXJlIHdpbGwgeW91IHJldmVsISB3aGVuIGluIHNvIG51bWVyb3VzIGEgYm9keSBvZiBmcmllbmRzLCB5b3UKICAgICAgIG5laXRoZXIgaGVhciBub3Igc2VlIG9uZSBnb29kIG1hbi4gQWxsIHRoZSB0b2lscyB5b3UgaGF2ZSBnb25lIHRocm91Z2ggaGF2ZSBhbHdheXMgcG9pbnRlZCB0bwogICAgICAgdGhpcyBzb3J0IG9mIGxpZmU7IHlvdXIgbHlpbmcgb24gdGhlIGdyb3VuZCBub3QgbWVyZWx5IHRvIGxpZSBpbiB3YWl0IHRvIGdyYXRpZnkgeW91ciB1bmNsZWFuCiAgICAgICBkZXNpcmVzLCBidXQgZXZlbiB0byBhY2NvbXBsaXNoIGNyaW1lczsgeW91ciB2aWdpbGFuY2UsIG5vdCBvbmx5IHdoZW4gcGxvdHRpbmcgYWdhaW5zdCB0aGUKICAgICAgIHNsZWVwIG9mIGh1c2JhbmRzLCBidXQgYWxzbyBhZ2FpbnN0IHRoZSBnb29kcyBvZiB5b3VyIG11cmRlcmVkIHZpY3RpbXMsIGhhdmUgYWxsIGJlZW4KICAgICAgIHByZXBhcmF0aW9ucyBmb3IgdGhpcy4gTm93IHlvdSBoYXZlIGFuIG9wcG9ydHVuaXR5IG9mIGRpc3BsYXlpbmcgeW91ciBzcGxlbmRpZCBlbmR1cmFuY2Ugb2YKICAgICAgIGh1bmdlciwgb2YgY29sZCwgb2Ygd2FudCBvZiBldmVyeXRoaW5nOyBieSB3aGljaCBpbiBhIHNob3J0IHRpbWUgeW91IHdpbGwgZmluZCB5b3Vyc2VsZiB3b3JuCiAgICAgICBvdXQuIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+IEFsbCB0aGlzIEkgZWZmZWN0ZWQgd2hlbiBJIHByb2N1cmVkIHlvdXIgcmVqZWN0aW9uCiAgICAgICBmcm9tIHRoZSBjb25zdWxzaGlwLCB0aGF0IHlvdSBzaG91bGQgYmUgcmVkdWNlZCB0byBtYWtlIGF0dGVtcHRzIG9uIHlvdXIgY291bnRyeSBhcyBhbiBleGlsZSwKICAgICAgIGluc3RlYWQgb2YgYmVpbmcgYWJsZSB0byBkaXN0cmVzcyBpdCBhcyBjb25zdWwsIGFuZCB0aGF0IHRoYXQgd2hpY2ggaGFkIGJlZW4gd2lja2VkbHkKICAgICAgIHVuZGVydGFrZW4gYnkgeW91IHNob3VsZCBiZSBjYWxsZWQgcGlyYWN5IHJhdGhlciB0aGFuIHdhci4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlbiB3aGF0IGhhcHBpbmVzcyB3aWxsIHlvdSBlbmpveSB3aXRoIHdoYXQgZGVsaWdodAogICAgICAgd2lsbCB5b3UgZXh1bHQgaW4gd2hhdCBwbGVhc3VyZSB3aWxsIHlvdSByZXZlbCEgd2hlbiBpbiBzbyBudW1lcm91cyBhIGJvZHkgb2YgZnJpZW5kcywgeW91CiAgICAgICBuZWl0aGVyIGhlYXIgbm9yIHNlZSBvbmUgZ29vZCBtYW4uIEFsbCB0aGUgdG9pbHMgeW91IGhhdmUgZ29uZSB0aHJvdWdoIGhhdmUgYWx3YXlzIHBvaW50ZWQgdG8KICAgICAgIHRoaXMgc29ydCBvZiBsaWZlOyB5b3VyIGx5aW5nIG9uIHRoZSBncm91bmQgbm90IG1lcmVseSB0byBsaWUgaW4gd2FpdCB0byBncmF0aWZ5IHlvdXIgdW5jbGVhbgogICAgICAgZGVzaXJlcywgYnV0IGV2ZW4gdG8gYWNjb21wbGlzaCBjcmltZXM7IHlvdXIgdmlnaWxhbmNlLCBub3Qgb25seSB3aGVuIHBsb3R0aW5nIGFnYWluc3QgdGhlCiAgICAgICBzbGVlcCBvZiBodXNiYW5kcywgYnV0IGFsc28gYWdhaW5zdCB0aGUgZ29vZHMgb2YgeW91ciBtdXJkZXJlZCB2aWN0aW1zLCBoYXZlIGFsbCBiZWVuCiAgICAgICBwcmVwYXJhdGlvbnMgZm9yIHRoaXMuIE5vdyB5b3UgaGF2ZSBhbiBvcHBvcnR1bml0eSBvZiBkaXNwbGF5aW5nIHlvdXIgc3BsZW5kaWQgZW5kdXJhbmNlIG9mCiAgICAgICBodW5nZXIsIG9mIGNvbGQsIG9mIHdhbnQgb2YgZXZlcnl0aGluZzsgYnkgd2hpY2ggaW4gYSBzaG9ydCB0aW1lIHlvdSB3aWxsIGZpbmQgeW91cnNlbGYgd29ybgogICAgICAgb3V0LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.10.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoaXMgSSBlZmZlY3RlZCB3aGVuIEkgcHJvY3VyZWQgeW91ciByZWplY3Rpb24KICAgICAgIGZyb20gdGhlIGNvbnN1bHNoaXAsIHRoYXQgeW91IHNob3VsZCBiZSByZWR1Y2VkIHRvIG1ha2UgYXR0ZW1wdHMgb24geW91ciBjb3VudHJ5IGFzIGFuIGV4aWxlLAogICAgICAgaW5zdGVhZCBvZiBiZWluZyBhYmxlIHRvIGRpc3RyZXNzIGl0IGFzIGNvbnN1bCwgYW5kIHRoYXQgdGhhdCB3aGljaCBoYWQgYmVlbiB3aWNrZWRseQogICAgICAgdW5kZXJ0YWtlbiBieSB5b3Ugc2hvdWxkIGJlIGNhbGxlZCBwaXJhY3kgcmF0aGVyIHRoYW4gd2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPktub3cgdGhhdCBJIG1heSByZW1vdmUgYW5kIGF2ZXJ0LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbnkgaW4gdGhlIGxlYXN0IHJlYXNvbmFibGUKICAgICAgIGNvbXBsYWludCBmcm9tIG15c2VsZjsgbGlzdGVuLCBJIGJlc2VlY2ggeW91LCBjYXJlZnVsbHkgdG8gd2hhdCBJIHNheSwgYW5kIGxheSBpdCB1cCBpbiB5b3VyCiAgICAgICBpbm1vc3QgaGVhcnRzIGFuZCBtaW5kcy4gSW4gdHJ1dGgsIGlmIG15IGNvdW50cnksIHdoaWNoIGlzIGZhciBkZWFyZXIgdG8gbWUgdGhhbiBteQogICAgICAgbGlmZSzigJRpZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4s4oCUaWYgdGhlIHdob2xlCiAgICAgICByZXB1YmxpYyB3ZXJlIHRvIGFkZHJlc3MgbWUsIOKAnE1hcmN1cyBUdWxsaXVzLCB3aGF0IGFyZSB5b3UgZG9pbmc/IHdpbGwgeW91IHBlcm1pdAogICAgICAgdGhhdCBtYW4gdG8gZGVwYXJ0IHdob20geW91IGhhdmUgYXNjZXJ0YWluZWQgdG8gYmUgYW4gZW5lbXk/IHdob20geW91IHNlZSByZWFkeSB0byBiZWNvbWUgdGhlCiAgICAgICBnZW5lcmFsIG9mIHRoZSB3YXI/IHdob20geW91IGtub3cgdG8gYmUgZXhwZWN0ZWQgaW4gdGhlIGNhbXAgb2YgdGhlIGVuZW15IGFzIHRoZWlyIGNoaWVmOyB0aGUKICAgICAgIGF1dGhvciBvZiBhbGwgdGhpcyB3aWNrZWRuZXNzLCB0aGUgaGVhZCBvZiB0aGUgY29uc3BpcmFjeSwgdGhlIGluc3RpZ2F0b3Igb2YgdGhlIHNsYXZlcyBhbmQKICAgICAgIGFiYW5kb25lZCBjaXRpemVucywgc28gdGhhdCBoZSBzaGFsbCBzZWVtIG5vdCBkcml2ZW4gb3V0IG9mIHRoZSBjaXR5IGJ5IHlvdSwgYnV0IGxldCBsb29zZSBieQogICAgICAgeW91IGFnYWluc3QgdGhlIGNpdHk/IFdpbGwgeW91IG5vdCBvcmRlciBoaW0gdG8gYmUgdGhyb3duIGludG8gcHJpc29uLCB0byBiZSBodXJyaWVkIG9mZiB0bwogICAgICAgZXhlY3V0aW9uLCB0byBiZSBwdXQgdG8gZGVhdGggd2l0aCB0aGUgbW9zdCBwcm9tcHQgc2V2ZXJpdHk/IFdoYXQgaGluZGVycyB5b3U/IGlzIGl0IHRoZQogICAgICAgY3VzdG9tcyBvZiBvdXIgYW5jZXN0b3JzPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBldmVuIHByaXZhdGUgbWVuIGhhdmUgb2Z0ZW4KICAgICAgIGluIHRoaXMgcmVwdWJsaWMgc2xhaW4gbWlzY2hpZXZvdXMgY2l0aXplbnMu4oCUSXMgaXQgdGhlIGxhd3Mgd2hpY2ggaGF2ZSBiZWVuIHBhc3NlZAogICAgICAgYWJvdXQgdGhlIHB1bmlzaG1lbnQgb2YgUm9tYW4gY2l0aXplbnM/IEJ1dCBpbiB0aGlzIGNpdHkgdGhvc2Ugd2hvIGhhdmUgcmViZWxsZWQgYWdhaW5zdCB0aGUKICAgICAgIHJlcHVibGljIGhhdmUgbmV2ZXIgaGFkIHRoZSByaWdodHMgb2YgY2l0aXplbnMu4oCURG8geW91IGZlYXIgb2RpdW0gd2l0aCBwb3N0ZXJpdHk/CiAgICAgICBZb3UgYXJlIHNob3dpbmcgZmluZSBncmF0aXR1ZGUgdG8gdGhlIFJvbWFuIHBlb3BsZSB3aGljaCBoYXMgcmFpc2VkIHlvdSwgYSBtYW4ga25vd24gb25seSBieQogICAgICAgeW91ciBvd24gYWN0aW9ucywgb2Ygbm8gYW5jZXN0cmFsIHJlbm93biwgdGhyb3VnaCBhbGwgdGhlIGRlZ3JlZXMgb2YgaG9ub3VyIGF0IHNvIGVhcmx5IGFuCiAgICAgICBhZ2UgdG8gdGhlIHZlcnkgaGlnaGVzdCBvZmZpY2UsIGlmIGZyb20gZmVhciBvZiB1bnBvcHVsYXJpdHkgb3Igb2YgYW55IGRhbmdlciB5b3UgbmVnbGVjdCB0aGUKICAgICAgIHNhZmV0eSBvZiB5b3VyIGZlbGxvdy1jaXRpemVucy4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIHlvdSBoYXZlIGEgZmVhciBvZgogICAgICAgdW5wb3B1bGFyaXR5LCBpcyB0aGF0IGFyaXNpbmcgZnJvbSB0aGUgaW1wdXRhdGlvbiBvZiB2aWdvdXIgYW5kIGJvbGRuZXNzLCBvciB0aGF0IGFyaXNpbmcKICAgICAgIGZyb20gdGhhdCBvZiBpbmFjdGl2aXR5IGFuZCBpbmRlY2lzaW9uIG1vc3QgdG8gYmUgZmVhcmVkPyBXaGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpcyBsYWlkIHdhc3RlIGJ5IHdhciwgd2hlbiBjaXRpZXMgYXJlIGF0dGFja2VkIGFuZCBob3VzZXMgaW4gZmxhbWVzLCBkbwogICAgICAgeW91IG5vdCB0aGluayB0aGF0IHlvdSB3aWxsIGJlIHRoZW4gY29uc3VtZWQgYnkgYSBwZXJmZWN0IGNvbmZsYWdyYXRpb24gb2YgaGF0cmVkP+KAnQogICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJRpZiB0aGUgd2hvbGUKICAgICAgIHJlcHVibGljIHdlcmUgdG8gYWRkcmVzcyBtZSwg4oCcTWFyY3VzIFR1bGxpdXMsIHdoYXQgYXJlIHlvdSBkb2luZz8gd2lsbCB5b3UgcGVybWl0CiAgICAgICB0aGF0IG1hbiB0byBkZXBhcnQgd2hvbSB5b3UgaGF2ZSBhc2NlcnRhaW5lZCB0byBiZSBhbiBlbmVteT8gd2hvbSB5b3Ugc2VlIHJlYWR5IHRvIGJlY29tZSB0aGUKICAgICAgIGdlbmVyYWwgb2YgdGhlIHdhcj8gd2hvbSB5b3Uga25vdyB0byBiZSBleHBlY3RlZCBpbiB0aGUgY2FtcCBvZiB0aGUgZW5lbXkgYXMgdGhlaXIgY2hpZWY7IHRoZQogICAgICAgYXV0aG9yIG9mIGFsbCB0aGlzIHdpY2tlZG5lc3MsIHRoZSBoZWFkIG9mIHRoZSBjb25zcGlyYWN5LCB0aGUgaW5zdGlnYXRvciBvZiB0aGUgc2xhdmVzIGFuZAogICAgICAgYWJhbmRvbmVkIGNpdGl6ZW5zLCBzbyB0aGF0IGhlIHNoYWxsIHNlZW0gbm90IGRyaXZlbiBvdXQgb2YgdGhlIGNpdHkgYnkgeW91LCBidXQgbGV0IGxvb3NlIGJ5CiAgICAgICB5b3UgYWdhaW5zdCB0aGUgY2l0eT8gV2lsbCB5b3Ugbm90IG9yZGVyIGhpbSB0byBiZSB0aHJvd24gaW50byBwcmlzb24sIHRvIGJlIGh1cnJpZWQgb2ZmIHRvCiAgICAgICBleGVjdXRpb24sIHRvIGJlIHB1dCB0byBkZWF0aCB3aXRoIHRoZSBtb3N0IHByb21wdCBzZXZlcml0eT8gV2hhdCBoaW5kZXJzIHlvdT8gaXMgaXQgdGhlCiAgICAgICBjdXN0b21zIG9mIG91ciBhbmNlc3RvcnM/IDwvdHJhbnNsYXRpb24+"
translation['1.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGV2ZW4gcHJpdmF0ZSBtZW4gaGF2ZSBvZnRlbgogICAgICAgaW4gdGhpcyByZXB1YmxpYyBzbGFpbiBtaXNjaGlldm91cyBjaXRpemVucy7igJRJcyBpdCB0aGUgbGF3cyB3aGljaCBoYXZlIGJlZW4gcGFzc2VkCiAgICAgICBhYm91dCB0aGUgcHVuaXNobWVudCBvZiBSb21hbiBjaXRpemVucz8gQnV0IGluIHRoaXMgY2l0eSB0aG9zZSB3aG8gaGF2ZSByZWJlbGxlZCBhZ2FpbnN0IHRoZQogICAgICAgcmVwdWJsaWMgaGF2ZSBuZXZlciBoYWQgdGhlIHJpZ2h0cyBvZiBjaXRpemVucy7igJREbyB5b3UgZmVhciBvZGl1bSB3aXRoIHBvc3Rlcml0eT8KICAgICAgIFlvdSBhcmUgc2hvd2luZyBmaW5lIGdyYXRpdHVkZSB0byB0aGUgUm9tYW4gcGVvcGxlIHdoaWNoIGhhcyByYWlzZWQgeW91LCBhIG1hbiBrbm93biBvbmx5IGJ5CiAgICAgICB5b3VyIG93biBhY3Rpb25zLCBvZiBubyBhbmNlc3RyYWwgcmVub3duLCB0aHJvdWdoIGFsbCB0aGUgZGVncmVlcyBvZiBob25vdXIgYXQgc28gZWFybHkgYW4KICAgICAgIGFnZSB0byB0aGUgdmVyeSBoaWdoZXN0IG9mZmljZSwgaWYgZnJvbSBmZWFyIG9mIHVucG9wdWxhcml0eSBvciBvZiBhbnkgZGFuZ2VyIHlvdSBuZWdsZWN0IHRoZQogICAgICAgc2FmZXR5IG9mIHlvdXIgZmVsbG93LWNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIHlvdSBoYXZlIGEgZmVhciBvZgogICAgICAgdW5wb3B1bGFyaXR5LCBpcyB0aGF0IGFyaXNpbmcgZnJvbSB0aGUgaW1wdXRhdGlvbiBvZiB2aWdvdXIgYW5kIGJvbGRuZXNzLCBvciB0aGF0IGFyaXNpbmcKICAgICAgIGZyb20gdGhhdCBvZiBpbmFjdGl2aXR5IGFuZCBpbmRlY2lzaW9uIG1vc3QgdG8gYmUgZmVhcmVkPyBXaGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGlzIGxhaWQgd2FzdGUgYnkgd2FyLCB3aGVuIGNpdGllcyBhcmUgYXR0YWNrZWQgYW5kIGhvdXNlcyBpbiBmbGFtZXMsIGRvCiAgICAgICB5b3Ugbm90IHRoaW5rIHRoYXQgeW91IHdpbGwgYmUgdGhlbiBjb25zdW1lZCBieSBhIHBlcmZlY3QgY29uZmxhZ3JhdGlvbiBvZiBoYXRyZWQ/4oCdCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoaXMgaG9seSBhZGRyZXNzIG9mIHRoZSByZXB1YmxpYywgYW5kIHRvIHRoZSBmZWVsaW5ncyBvZiB0aG9zZSBtZW4gd2hvIGVudGVydGFpbiB0aGUKICAgICAgIHNhbWUgb3BpbmlvbiwgSSB3aWxsIG1ha2UgdGhpcyBzaG9ydCBhbnN3ZXI64oCUSWYsIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgdGhvdWdodCBpdAogICAgICAgYmVzdCB0aGF0IENhdGlsaW5lIHNob3VsZCBiZSBwdW5pc2hlZCB3aXRoIGRlYXRoLCBJIHdvdWxkIG5vdCBoYXZlIGdpdmVuIHRoZSBzcGFjZSBvZiBvbmUKICAgICAgIGhvdXIgdG8gdGhpcyBnbGFkaWF0b3IgdG8gbGl2ZSBpbi4gSWYsIGZvcnNvb3RoLCB0aG9zZSBleGNlbGxlbnQgbWVuIGFuZCBtb3N0IGlsbHVzdHJpb3VzCiAgICAgICBjaXRpZXMgbm90IG9ubHkgZGlkIG5vdCBwb2xsdXRlIHRoZW1zZWx2ZXMsIGJ1dCBldmVuIGdsb3JpZmllZCB0aGVtc2VsdmVzIGJ5IHRoZSBibG9vZCBvZgogICAgICAgU2F0dXJuaW51cywgYW5kIHRoZSBHcmFjY2hpLCBhbmQgRmxhY2N1cywgYW5kIG1hbnkgb3RoZXJzIG9mIG9sZCB0aW1lLCBzdXJlbHkgSSBoYWQgbm8gY2F1c2UKICAgICAgIHRvIGZlYXIgbGVzdCBmb3Igc2xheWluZyB0aGlzIHBhcnJpY2lkYWwgbXVyZGVyZXIgb2YgdGhlIGNpdGl6ZW5zIGFueSB1bnBvcHVsYXJpdHkgc2hvdWxkCiAgICAgICBhY2NydWUgdG8gbWUgd2l0aCBwb3N0ZXJpdHkuIEFuZCBpZiBpdCBkaWQgdGhyZWF0ZW4gbWUgdG8gZXZlciBzbyBncmVhdCBhIGRlZ3JlZSwgeWV0IEkgaGF2ZQogICAgICAgYWx3YXlzIGJlZW4gb2YgdGhlIGRpc3Bvc2l0aW9uIHRvIHRoaW5rIHVucG9wdWxhcml0eSBlYXJuZWQgYnkgdmlydHVlIGFuZCBnbG9yeSwgbm90CiAgICAgICB1bnBvcHVsYXJpdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaG91Z2ggdGhlcmUgYXJlIHNvbWUgbWVuIGluIHRoaXMgYm9keSB3aG8gZWl0aGVyIGRvIG5vdCBzZWUgd2hhdCB0aHJlYXRlbnMsIG9yIGRpc3NlbWJsZQogICAgICAgd2hhdCB0aGV5IGRvIHNlZTsgd2hvIGhhdmUgZmVkIHRoZSBob3BlIG9mIENhdGlsaW5lIGJ5IG1pbGQgc2VudGltZW50cywgYW5kIGhhdmUgc3RyZW5ndGhlbmVkCiAgICAgICB0aGUgcmlzaW5nIGNvbnNwaXJhY3kgYnkgbm90IGJlbGlldmluZyBpdDsgaW5mbHVlbmNlZCBieSB3aG9zZSBhdXRob3JpdHkgbWFueSwgYW5kIHRoZXkgbm90CiAgICAgICB3aWNrZWQsIGJ1dCBvbmx5IGlnbm9yYW50LCBpZiBJIHB1bmlzaGVkIGhpbSB3b3VsZCBzYXkgdGhhdCBJIGhhZCBhY3RlZCBjcnVlbGx5IGFuZAogICAgICAgdHlyYW5pY2FsbHkuIEJ1dCBJIGtub3cgdGhhdCBpZiBoZSBhcnJpdmVzIGF0IHRoZSBjYW1wIG9mIE1hbmxpdXMgdG8gd2hpY2ggaGUgaXMgZ29pbmcsIHRoZXJlCiAgICAgICB3aWxsIGJlIG5vIG9uZSBzbyBzdHVwaWQgYXMgbm90IHRvIHNlZSB0aGF0IHRoZXJlIGhhcyBiZWVuIGEgY29uc3BpcmFjeTsgbm8gb25lIHNvIGhhcmRlbmVkCiAgICAgICBhcyBub3QgdG8gY29uZmVzcyBpdC4gQnV0IGlmIHRoaXMgbWFuIGFsb25lIHdlcmUgcHV0IHRvIGRlYXRoLCBJIGtub3cgdGhhdCB0aGlzIGRpc2Vhc2Ugb2YKICAgICAgIHRoZSByZXB1YmxpYyB3b3VsZCBiZSBvbmx5IGNoZWNrZWQgZm9yIGF3aGlsZSwgbm90IGVyYWRpY2F0ZWQgZm9yIGV2ZXIuIEJ1dCBpZiBoZSBiYW5pc2hlcwogICAgICAgaGltc2VsZjsgYW5kIHRha2VzIHdpdGggaGltIGFsbCBoaXMgZnJpZW5kcywgYW5kIGNvbGxlY3RzIGF0IG9uZSBwb2ludCBhbGwgdGhlIHJ1aW5lZCBtZW4KICAgICAgIGZyb20gZXZlcnkgcXVhcnRlciwgdGhlbiBub3Qgb25seSB3aWxsIHRoaXMgZnVsbC1ncm93biBwbGFndWUgb2YgdGhlIHJlcHVibGljIGJlIGV4dGluZ3Vpc2hlZAogICAgICAgYW5kIGVyYWRpY2F0ZWQsIGJ1dCBhbHNvIHRoZSByb290IGFuZCBzZWVkIG9mIGFsbCBmdXR1cmUgZXZpbHMgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.13.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGhhdmUgbm93IGZvciBhIGxvbmcgdGltZSwgTyBjb25zY3JpcHQgZmF0aGVycywgbGl2ZWQgYW1vbmcgdGhlc2UgZGFuZ2VycyBhbmQKICAgICAgIG1hY2hpbmF0aW9ucyBvZiBjb25zcGlyYWN5OyBidXQgc29tZWhvdyBvciBvdGhlciwgdGhlIHJpcGVuZXNzIG9mIGFsbCB3aWNrZWRuZXNzLCBhbmQgb2YgdGhpcwogICAgICAgbG9uZy1zdGFuZGluZyBtYWRuZXNzIGFuZCBhdWRhY2l0eSwgaGFzIGNvbWUgdG8gYSBoZWFkIGF0IHRoZSB0aW1lIG9mIG15IGNvbnN1bHNoaXAuIEJ1dCBpZgogICAgICAgdGhpcyBtYW4gYWxvbmUgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgcGlyYXRpY2FsIGNyZXcsIHdlIG1heSBhcHBlYXIsIHBlcmhhcHMsIGZvciBhIHNob3J0IHRpbWUKICAgICAgIHJlbGlldmVkIGZyb20gZmVhciBhbmQgYW54aWV0eSwgYnV0IHRoZSBkYW5nZXIgd2lsbCBzZXR0bGUgZG93biBhbmQgbGllIGhpZCBpbiB0aGUgdmVpbnMgYW5kCiAgICAgICBib3dlbHMgb2YgdGhlIHJlcHVibGljLiBBcyBpdCBvZnRlbiBoYXBwZW5zIHRoYXQgbWVuIGFmZmxpY3RlZCB3aXRoIGEgc2V2ZXJlIGRpc2Vhc2UsIHdoZW4KICAgICAgIHRoZXkgYXJlIHRvcnR1cmVkIHdpdGggaGVhdCBhbmQgZmV2ZXIsIGlmIHRoZXkgZHJpbmsgY29sZCB3YXRlciwgc2VlbSBhdCBmaXJzdCB0byBiZQogICAgICAgcmVsaWV2ZWQsIGJ1dCBhZnRlcndhcmRzIHN0aWZmZXIgbW9yZSBhbmQgbW9yZSBzZXZlcmVseTsgc28gdGhpcyBkaXNlYXNlIHdoaWNoIGlzIGluIHRoZQogICAgICAgcmVwdWJsaWMsIGlmIHJlbGlldmVkIGJ5IHRoZSBwdW5pc2htZW50IG9mIHRoaXMgbWFuLCB3aWxsIG9ubHkgZ2V0IHdvcnNlIGFuZCB3b3JzZSwgYXMgdGhlCiAgICAgICByZXN0IHdpbGwgYmUgc3RpbGwgYWxpdmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGxldCB0aGUgd29ydGhsZXNzIGJlIGdvbmUs4oCUbGV0IHRoZW0gc2VwYXJhdGUKICAgICAgIHRoZW1zZWx2ZXMgZnJvbSB0aGUgZ29vZCzigJRsZXQgdGhlbSBjb2xsZWN0IGluIG9uZSBwbGFjZSzigJRsZXQgdGhlbSwgYXMgSQogICAgICAgaGF2ZSBvZnRlbiBzYWlkIGJlZm9yZSwgYmUgc2VwYXJhdGVkIGZyb20gdXMgYnkgYSB3YWxsOyBsZXQgdGhlbSBjZWFzZSB0byBwbG90IGFnYWluc3QgdGhlCiAgICAgICBjb25zdWwgaW4gaGlzIG93biBob3VzZSzigJR0byBzdXJyb3VuZCB0aGUgdHJpYnVuYWwgb2YgdGhlIGNpdHkgcHJhZXRvcizigJR0bwogICAgICAgYmVzaWVnZSB0aGUgc2VuYXRlLWhvdXNlIHdpdGggc3dvcmRzLOKAlHRvIHByZXBhcmUgYnJhbmRzIGFuZCB0b3JjaGVzIHRvIGJ1cm4gdGhlCiAgICAgICBjaXR5OyBsZXQgaXQsIGluIHNob3J0LCBiZSB3cml0dGVuIG9uIHRoZSBicm93IG9mIGV2ZXJ5IGNpdGl6ZW4sIHdoYXQgYXJlIGhpcyBzZW50aW1lbnRzCiAgICAgICBhYm91dCB0aGUgcmVwdWJsaWMuIEkgcHJvbWlzZSB5b3UgdGhpcywgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCB0aGVyZSBzaGFsbCBiZSBzbyBtdWNoCiAgICAgICBkaWxpZ2VuY2UgaW4gdXMgdGhlIGNvbnN1bHMsIG11Y2ggYXV0aG9yaXR5IGluIHlvdSwgc28gbXVjaCB2aXJ0dWUgaW4gdGhlIFJvbWFuIGtuaWdodHMsIHNvCiAgICAgICBtdWNoIHVuYW5pbWl0eSBpbiBhbGwgZ29vZCBtZW4sIHRoYXQgeW91IHNoYWxsIHNlZSBldmVyeXRoaW5nIG1hZGUgcGxhaW4gYW5kIG1hbmlmZXN0IGJ5IHRoZQogICAgICAgZGVwYXJ0dXJlIG9mIENhdGlsaW5lLOKAlGV2ZXJ5dGhpbmcgY2hlY2tlZCBhbmQgcHVuaXNoZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.13.33'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgb3JnPSJ1bmlmb3JtIiBzYW1wbGU9ImNvbXBsZXRlIiB0eXBlPSJTcGVlY2giPgoJCQkJCQk8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPlRIRSBTRUNPTkQgT1JBVElPTiBPRiBNLiBULiBDSUNFUk8gQUdBSU5TVCBMVUNJVVMgQ0FUSUxJTkEuIEFERFJFU1NFRCBUTyBUSEUgUEVPUExFLiA8L2hlYWQ+CgkJCQkJCTxhcmd1bWVudCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJCQkJPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5USEUgQVJHVU1FTlQuPC9oZWFkPgoJCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZSBkaWQgbm90IHZlbnR1cmUgdG8gbWFrZSBhbnkgcmVwbHkgdG8gdGhlIGZvcm1lciBzcGVlY2gsIGJ1dCBoZSBiZWdnZWQgdGhlIHNlbmF0ZQogICAgICAgIG5vdCB0byBiZSB0b28gaGFzdHkgaW4gYmVsaWV2aW5nIGV2ZXJ5dGhpbmcgd2hpY2ggd2FzIHNhaWQgdG8gaGlzIHByZWp1ZGljZSBieSBvbmUgd2hvIGhhZAogICAgICAgIGFsd2F5cyBiZWVuIGhpcyBlbmVteSwgYXMgQ2ljZXJvIGhhZDsgYW5kIGFsbGVnZWQgaGlzIGhpZ2ggYmlydGgsIGFuZCB0aGUgc3Rha2Ugd2hpY2ggaGUgaGFkCiAgICAgICAgaW4gdGhlIHByb3NwZXJpdHkgb2YgdGhlIGNvbW1vbndlYWx0aCwgYXMgYXJndW1lbnRzIHRvIG1ha2UgaXQgYXBwZWFyIGltcHJvYmFibGUgdGhhdCBoZQogICAgICAgIHNob3VsZCBzZWVrIHRvIGluanVyZSBpdDsgYW5kIGNhbGxlZCBDaWNlcm8gYSBzdHJhbmdlciwgYW5kIGEgbmV3IGluaGFiaXRhbnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LiBCdXQgdGhlIHNlbmF0ZSBpbnRlcnJ1cHRlZCBoaW0gd2l0aCBhIGdlbmVyYWwgb3V0Y3J5LAogICAgICAgIGNhbGxpbmcgaGltIHRyYWl0b3IgYW5kIHBhcnJpY2lkZS4gVXBvbiB3aGljaCwgYmVpbmcgcmVuZGVyZWQgZnVyaW91cyBhbmQgZGVzcGVyYXRlLCBoZQogICAgICAgIGRlY2xhcmVkIGFsb3VkIHdoYXQgaGUgaGFkIGJlZm9yZSBzYWlkIHRvIENhdG8sIHRoYXQgc2luY2UgaGUgd2FzIGNpcmN1bXZlbnRlZCBhbmQgZHJpdmVuCiAgICAgICAgaGVhZGxvbmcgYnkgaGlzIGVuZW1pZXMsIGhlIHdvdWxkIHF1ZW5jaCB0aGUgZmxhbWUgd2hpY2ggaGlzIGVuZW1pZXMgd2VyZSBraW5kbGluZyBhcm91bmQKICAgICAgICBoaW0gaW4gdGhlIGNvbW1vbiBydWluLiBBbmQgc28gaGUgcnVzaGVkIG91dCBvZiB0aGUgdGVtcGxlLiBPbiBoaXMgYXJyaXZhbCBhdCBoaXMgb3duIGhvdXNlCiAgICAgICAgaGUgaGVsZCBhIGJyaWVmIGNvbmZlcmVuY2Ugd2l0aCB0aGUgb3RoZXIgY29uc3BpcmF0b3JzLCBpbiB3aGljaCBpdCB3YXMgcmVzb2x2ZWQgdGhhdCBoZQogICAgICAgIHNob3VsZCBnbyBhdCBvbmNlIHRvIHRoZSBjYW1wIG9mIE1hbmxpdXMsIGFuZCByZXR1cm4gYXMgc3BlZWRpbHkgYXMgaGUgY291bGQgYXQgdGhlIGhlYWQgb2YKICAgICAgICB0aGUgYXJteSB3aGljaCB3YXMgdGhlcmUgYXdhaXRpbmcgaGltLiBBY2NvcmRpbmdseSwgdGhhdCBuaWdodCBoZSBsZWZ0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB3aXRoIGEgc21hbGwgcmV0aW51ZSwgYW5kIG1hZGUgdGhlIGJlc3Qgb2YgaGlzIHdheQogICAgICAgIHRvd2FyZHMgRXRydXJpYS4gSGlzIGZyaWVuZHMgZ2F2ZSBvdXQgdGhhdCBoZSBoYWQgZ29uZSBpbnRvIHZvbHVudGFyeSBiYW5pc2htZW50IGF0CiAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3ODEiPk1hcnNlaWxsZXM8L3BsYWNlTmFtZT47IGFuZCBzcHJlYWQgdGhhdCByZXBvcnQgdGhyb3VnaCB0aGUKICAgICAgICBjaXR5IHRoZSBuZXh0IG1vcm5pbmcsIGluIG9yZGVyIHRvIGV4Y2l0ZSBvZGl1bSBhZ2FpbnN0IENpY2VybywgYXMgaGF2aW5nIGRyaXZlbiBoaW0gb3V0CiAgICAgICAgd2l0aG91dCBhbnkgdHJpYWwgb3IgcHJvb2Ygb2YgaGlzIGd1aWx0LiBCdXQgQ2ljZXJvIHdhcyBhd2FyZSBvZiBoaXMgbW90aW9ucywgYW5kIGtuZXcgdGhhdAogICAgICAgIGhlIGhhZCBwcmV2aW91c2x5IHNlbnQgYSBxdWFudGl0eSBvZiBhcm1zLCBhbmQgbWlsaXRhcnkgZW5zaWducywgYW5kIGVzcGVjaWFsbHkgYSBzaWx2ZXIKICAgICAgICBlYWdsZSB3aGljaCBoZSBoYWQgYmVlbiB1c2VkIHRvIGtlZXAgaW4gaGlzIG93biBob3VzZSB3aXRoIGEgc3VwZXJzdGl0aW91cyByZXZlcmVuY2UsCiAgICAgICAgYmVjYXVzZSBpdCBoYWQgYmVlbiB1c2VkIGJ5IHRoZSBncmVhdCBNYXJpdXMgaW4gaGlzIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgQ2ltYnJpLiBIb3dldmVyLAogICAgICAgIGhlIHRob3VnaHQgaXQgZGVzaXJhYmxlIHRvIGNvdW50ZXJhY3QgdGhlIHN0b3J5IG9mIGhpcyBoYXZpbmcgZ29uZSBpbnRvIGV4aWxlLCBhbmQgdGhlcmVmb3JlCiAgICAgICAgc3VtbW9uZWQgdGhlIHBlb3BsZSBpbnRvIHRoZSBmb3J1bSwgYW5kIG1hZGUgdGhlbSB0aGUgZm9sbG93aW5nIHNwZWVjaC48L3A+CgkJCQkJCTwvYXJndW1lbnQ+CgkJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkJCTxwPkF0IGxlbmd0aCwgTyBSb21hbnMsIHdlIGhhdmUgZGlzbWlzc2VkIGZyb20gdGhlIGNpdHksIG9yIGRyaXZlbiBvdXQsIG9yLCB3aGVuIGhlIHdhcwogICAgICAgZGVwYXJ0aW5nIG9mIGhpcyBvd24gYWNjb3JkLCB3ZSBoYXZlIHB1cnN1ZWQgd2l0aCB3b3JkcywgTHVjaXVzIENhdGlsaW5lLCBtYWQgd2l0aCBhdWRhY2l0eSwKICAgICAgIGJyZWF0aGluZyB3aWNrZWRuZXNzLCBpbXBpb3VzbHkgcGxhbm5pbmcgbWlzY2hpZWYgdG8gaGlzIGNvdW50cnksIHRocmVhdGVuaW5nIGZpcmUgYW5kIHN3b3JkCiAgICAgICB0byB5b3UgYW5kIHRvIHRoaXMgY2l0eS4gSGUgaXMgZ29uZSwgaGUgaGFzIGRlcGFydGVkLCBoZSBoYXMgZGlzYXBwZWFyZWQsIGhlIGhhcyBydXNoZWQgb3V0LgogICAgICAgTm8gaW5qdXJ5IHdpbGwgbm93IGJlIHByZXBhcmVkIGFnYWluc3QgdGhlc2Ugd2FsbHMgd2l0aGluIHRoZSB3YWxscyB0aGVtc2VsdmVzIGJ5IHRoYXQKICAgICAgIG1vbnN0ZXIgYW5kIHByb2RpZ3kgb2Ygd2lja2VkbmVzcy4gQW5kIHdlIGhhdmUsIHdpdGhvdXQgY29udHJvdmVyc3ksIGRlZmVhdGVkIGhpbSwgdGhlIHNvbGUKICAgICAgIGdlbmVyYWwgb2YgdGhpcyBkb21lc3RpYyB3YXIuIEZvciBub3cgdGhhdCBkYWdnZXIgd2lsbCBubyBsb25nZXIgaG92ZXIgYWJvdXQgb3VyIHNpZGVzOyB3ZQogICAgICAgc2hhbGwgbm90IGJlIGFmcmFpZCBpbiB0aGUgY2FtcHVzLCBpbiB0aGUgZm9ydW0sIGluIHRoZSBzZW5hdGUtaG91c2Us4oCUeWVzLCBhbmQKICAgICAgIHdpdGhpbiBvdXIgb3duIHByaXZhdGUgd2FsbHMsIGhlIHdhcyBtb3ZlZCBmcm9tIGhpcyBwbGFjZSB3aGVuIGhlIHdhcyBkcml2ZW4gZnJvbSB0aGUgY2l0eS4KICAgICAgIE5vdyB3ZSBzaGFsbCBvcGVubHkgY2Fycnkgb24gYSByZWd1bGFyIHdhciB3aXRoIGFuIGVuZW15IHdpdGhvdXQgaGluZHJhbmNlLiBCZXlvbmQgYWxsCiAgICAgICBxdWVzdGlvbiB3ZSBydWluIHRoZSBtYW47IHdlIGhhdmUgZGVmZWF0ZWQgaGltIHNwbGVuZGlkbHkgd2hlbiB3ZSBoYXZlIGRyaXZlbiBoaW0gZnJvbSBzZWNyZXQKICAgICAgIHRyZWFjaGVyeSBpbnRvIG9wZW4gd2FyZmFyZS4gPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IGhlIGhhcyBub3QgdGFrZW4gd2l0aAogICAgICAgaGltIGhpcyBzd29yZCByZWQgd2l0aCBibG9vZCBhcyBoZSBpbnRydWRlZOKAlHRoYXQgaGUgaGFzIGxlZnQgdXMKICAgICAgIGFsaXZlLOKAlHRoYXQgd2Ugd3Jlc3RlZCB0aGUgd2VhcG9uIGZyb20gaGlzIGhhbmRzLOKAlHRoYXQgaGUgaGFzIGxlZnQgdGhlCiAgICAgICBjaXRpemVucyBzYWZlIGFuZCB0aGUgY2l0eSBzdGFuZGluZywgd2hhdCBncmVhdCBhbmQgb3ZlcndoZWxtaW5nIGdyaWVmIG11c3QgeW91IHRoaW5rIHRoYXQKICAgICAgIHRoaXMgaXMgdG8gaGltLiBOb3cgaGUgbGllcyBwcm9zdHJhdGUsIE8gUm9tYW5zLCBhbmQgZmVlbHMgaGltc2VsZiBzdHJpY2tlbiBkb3duIGFuZCBhYmplY3QsCiAgICAgICBhbmQgb2Z0ZW4gY2FzdHMgYmFjayBoaXMgZXllcyB0b3dhcmRzIHRoaXMgY2l0eSwgd2hpY2ggaGUgbW91cm5zIG92ZXIgYXMgc25hdGNoZWQgZnJvbSBoaXMKICAgICAgIGphd3MsIGJ1dCB3aGljaCBzZWVtcyB0byBtZSB0byByZWpvaWNlIGF0IGhhdmluZyB2b21pdGVkIGZvcnRoIHN1Y2ggYSBwZXN0LCBhbmQgY2FzdCBpdCBvdXQKICAgICAgIG9mIGRvb3JzLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHA+QnV0IGlmIHRoZXJlIGJlIGFueSBvbmUgb2YgdGhhdCBkaXNwb3NpdGlvbiB3aGljaCBhbGwgbWVuIHNob3VsZCBoYXZlLCB3aG8geWV0IGJsYW1lcyBtZQogICAgICAgZ3JlYXRseSBmb3IgdGhlIHZlcnkgdGhpbmcgaW4gd2hpY2ggbXkgc3BlZWNoIGV4dWx0cyBhbmQgdHJpdW1waHMs4oCUbmFtZWx5LCB0aGF0IEkKICAgICAgIGRpZCBub3QgYXJyZXN0IHNvIGNhcGl0YWwgbW9ydGFsIGFuIGVuZW15IHJhdGhlciB0aGFuIGxldCBoaW0gZ28s4oCUdGhhdCBpcyBub3QgbXkKICAgICAgIGZhdWx0LCBPIGNpdGl6ZW5zLCBidXQgdGhlIGZhdWx0IG9mIHRoZSB0aW1lcy4gTHVjaXVzIENhdGlsaW5lIG91Z2h0IHRvIGhhdmUgYmVlbiB2aXNpdGVkCiAgICAgICB3aXRoIHRoZSBzZXZlcmVzdCBwdW5pc2htZW50LCBhbmQgdG8gaGF2ZSBiZWVuIHB1dCB0byBkZWF0aCBsb25nIHNpbmNlOyBhbmQgYm90aCB0aGUgY3VzdG9tcwogICAgICAgb2Ygb3VyIGFuY2VzdG9ycywgYW5kIHRoZSByaWdvdXIgb2YgbXkgb2ZmaWNlLCBhbmQgdGhlIHJlcHVibGljLCBkZW1hbmRlZCB0aGlzIG9mIG1lOyBidXQgaG93CiAgICAgICBtYW55LCB0aGluayB5b3UsIHdlcmUgdGhlcmUgd2hvIGRpZCBub3QgYmVsaWV2ZSB3aGF0IEkgcmVwb3J0ZWQ/IGhvdyBtYW55IHdobyBvdXQgb2YKICAgICAgIHN0dXBpZGl0eSBkaWQgbm90IHRoaW5rIHNvPyBob3cgbWFueSB3aG8gZXZlbiBkZWZlbmRlZCBoaW0s4oCUaG93IG1hbnkgd2hvLCBvdXQgb2YKICAgICAgIHRoZWlyIG93biBkZXByYXZpdHksIGZhdm91cmVkIGhpbT8gSWYsIGluIHRydXRoLCBJIGhhZCB0aG91Z2h0IHRoYXQsIGlmIGhlIHdlcmUgcmVtb3ZlZCwgYWxsCiAgICAgICBkYW5nZXIgd291bGQgaGUgcmVtb3ZlZCBmcm9tIHlvdSwgSSB3b3VsZCBsb25nIHNpbmNlIGhhdmUgY3V0IG9mZiBMdWNpdXMgQ2F0aWxpbmUsIGhhZCBpdAogICAgICAgYmVlbiBhdCB0aGUgcmlzaywgbm90IG9ubHkgb2YgbXkgcG9wdWxhcml0eSwgYnV0IGV2ZW4gb2YgbXkgbGlmZS4gPC9wPgoJCQkJCQk8cD48bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBhcyBJIHNhdyB0aGF0LCBzaW5jZSB0aGUgbWF0dGVyIHdhcyBub3QgZXZlbiB0aGVuCiAgICAgICBwcm92ZWQgdG8gYWxsIG9mIHlvdSwgaWYgSSBoYWQgcHVuaXNoZWQgaGltIHdpdGggZGVhdGgsIGFzIGhlIGhhZCBkZXNlcnZlZCwgSSBzaG91bGQgYmUgYm9ybmUKICAgICAgIGRvd24gYnkgdW5wb3B1bGFyaXR5LCBhbmQgc28gYmUgdW5hYmxlIHRvIGZvbGxvdyB1cCBoaXMgYWNjb21wbGljZXMsIEkgYnJvdWdodCB0aGUgYnVzaW5lc3MKICAgICAgIG9uIHRvIHRoaXMgcG9pbnQgdGhhdCB5b3UgbWlnaHQgYmUgYWJsZSB0byBjb21iYXQgb3Blbmx5IHdoZW4geW91IHNhdyB0aGUgZW5lbXkgd2l0aG91dAogICAgICAgZGlzZ3Vpc2UuIEJ1dCBob3cgZXhjZWVkaW5nbHkgSSB0aGluayB0aGlzIGVuZW15IHRvIGJlIGZlYXJlZCBub3cgdGhhdCBoZSBpcyBvdXQgb2YgZG9vcnMsCiAgICAgICB5b3UgbWF5IHNlZSBmcm9tIHRoaXPigJR0aGF0IEkgYW0gdmV4ZWQgZXZlbiB0aGF0IGJlIGhhcyBnb25lIGZyb20gdGhlIGNpdHkgd2l0aCBidXQKICAgICAgIGEgc21hbGwgcmV0aW51ZS4gSSB3aXNoIGhlIGhhZCB0YWtlbiB3aXRoIGhpbSBhbGwgaGlzIGZvcmNlcy4gSGUgaGFzIHRha2VuIHdpdGggaGltCiAgICAgICBUb25naWxsdXMsIHdpdGggd2hvbSBoZSBoYWQgYmVlbiBzYWlkIHRvIGhhdmUgYSBjcmltaW5hbCBpbnRpbWFjeSwgYW5kIFB1YmxpY2l1cywgYW5kCiAgICAgICBNdW5hdGl1cywgd2hvc2UgZGVidHMgY29udHJhY3RlZCBpbiB0YXZlcm5zIGNvdWxkIGNhdXNlIG5vIGdyZWF0IGRpc3F1aWV0dWRlIHRvIHRoZSByZXB1YmxpYy4KICAgICAgIEhlIGhhcyBsZWZ0IGJlaGluZCBoaW0gb3RoZXJz4oCUeW91IGFsbCBrbm93IHdoYXQgbWVuIHRoZXkgYXJlLCBob3cgb3ZlcndoZWxtZWQgd2l0aAogICAgICAgZGVidCwgaG93IHBvd2VyZnVsLCBob3cgbm9ibGUuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cD5UaGVyZWZvcmUsIHdpdGggb3VyIEdhbGxpYyBsZWdpb25zLCBhbmQgd2l0aCB0aGUgbGV2aWVzIHdoaWNoIFF1aW50dXMgTWV0ZWxsdXMgaGFzIHJhaXNlZAogICAgICAgaW4gdGhlIFBpY2VuaWFuIGFuZCBHYWxsaWMgdGVycml0b3J5LCBhbmQgd2l0aCB0aGVzZSB0cm9vcHMgd2hpY2ggYXJlIGV2ZXJ5IGRheSBiZWluZyBnb3QKICAgICAgIHJlYWR5IGJ5IHVzLCBJIHRob3JvdWdobHkgZGVzcGlzZSB0aGF0IGFybXkgY29tcG9zZWQgb2YgZGVzcGVyYXRlIG9sZCBtZW4sIG9mIGNsb3duaXNoCiAgICAgICBwcm9mbGlnYXRlcywgYW5kIHVuZWR1Y2F0ZWQgc3BlbmR0aHJpZnRzOyBvZiB0aG9zZSB3aG8gaGF2ZSBwcmVmZXJyZWQgdG8gZGVzZXJ0IHRoZWlyIGJhaWwKICAgICAgIHJhdGhlciB0aGFuIHRoYXQgYXJteSwgYW5kIHdoaWNoIHdpbGwgZmFsbCB0byBwaWVjZXMgaWYgSSBzaG93IHRoZW0gbm90IHRoZSBiYXR0bGUgYXJyYXkgb2YKICAgICAgIG91ciBhcm15LCBidXQgYW4gZWRpY3Qgb2YgdGhlIHByYWV0b3IuIEkgd2lzaCBoZSBoYWQgdGFrZW4gd2l0aCBoaW0gdGhvc2Ugc29sZGllcnMgb2YgaGlzLAogICAgICAgd2hvbSBJIHNlZSBob3ZlcmluZyBhYm91dCB0aGUgZm9ydW0sIHN0YW5kaW5nIGFib3V0IHRoZSBzZW5hdGUtaG91c2UsIGV2ZW4gY29taW5nIGludG8gdGhlCiAgICAgICBzZW5hdGUsIHdobyBzaGluZSB3aXRoIG9pbnRtZW50LCB3aG8gZ2xpdHRlciBpbiBwdXJwbGU7IGFuZCBpZiB0aGV5IHJlbWFpbiBoZXJlLCByZW1lbWJlcgogICAgICAgdGhhdCB0aGF0IGFybXkgaXMgbm90IHNvIG11Y2ggdG8gYmUgZmVhcmVkIGJ5IHVzIGFzIHRoZXNlIG1lbiB3aG8gaGF2ZSBkZXNlcnRlZCB0aGUgYXJteS4gQW5kCiAgICAgICB0aGV5IGFyZSB0aGUgbW9yZSB0byBiZSBmZWFyZWQsIGJlY2F1c2UgdGhleSBhcmUgYXdhcmUgdGhhdCBJIGtub3cgd2hhdCB0aGV5IGFyZSB0aGlua2luZyBvZgogICAgICAgYW5kIHlldCB0aGV5IGFyZSBub3QgaW5mbHVlbmNlZCBieSBpdC4gPC9wPgoJCQkJCQk8cD48bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+IEkga25vdyB0byB3aG9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzgwIiBrZXk9InRnbiw3MDEwMzgwIj5BcHVsaWE8L3BsYWNlTmFtZT4gaGFzIGJlZW4gYWxsb3R0ZWQsIHdobyBoYXMgRXRydXJpYSwgd2hvIHRoZSBQaWNlbmlhbiB0ZXJyaXRvcnksIHdobyB0aGUKICAgICAgIEdhbGxpYyBkaXN0cmljdCwgd2hvIGhhcyBiZWdnZWQgZm9yIGhpbXNlbGYgdGhlIG9mZmljZSBvZiBzcHJlYWRpbmcgZmlyZSBhbmQgc3dvcmQgYnkgbmlnaHQKICAgICAgIHRocm91Z2ggdGhlIGNpdHkuIFRoZXkga25vdyB0aGF0IGFsbCB0aGUgcGxhbnMgb2YgdGhlIHByZWNlZGluZyBuaWdodCBhcmUgYnJvdWdodCB0byBtZS4gSQogICAgICAgbGFpZCB0aGVtIGJlZm9yZSB0aGUgc2VuYXRlIHllc3RlcmRheS4gQ2F0aWxpbmUgaGltc2VsZiB3YXMgYWxhcm1lZCwgYW5kIGZsZWQuIFdoeSBkbyB0aGVzZQogICAgICAgbWVuIHdhaXQ/IFZlcmlseSwgdGhleSBhcmUgZ3JlYXRseSBtaXN0YWtlbiBpZiB0aGV5IHRoaW5rIHRoYXQgZm9ybWVyIGxlbml0eSBvZiBtaW5lIHdpbGwKICAgICAgIGxhc3QgZm9yZXZlci4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPHA+V2hhdCBJIGhhdmUgYmVlbiB3YWl0aW5nIGZvciwgdGhhdCBJIGhhdmUgZ2FpbmVkLOKAlG5hbWVseSwgdGhhdCB5b3Ugc2hvdWxkIGFsbCBzZWUKICAgICAgIHRoYXQgYSBjb25zcGlyYWN5IGhhcyBiZWVuIG9wZW5seSBmb3JtZWQgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IHVubGVzcywgaW5kZWVkLCB0aGVyZSBiZSBhbnkKICAgICAgIG9uZSB3aG8gdGhpbmtzIHRoYXQgdGhvc2Ugd2hvIGFyZSBsaWtlIENhdGlsaW5lIGRvIG5vdCBhZ3JlZSB3aXRoIENhdGlsaW5lLiBUaGVyZSBpcyBub3QgYW55CiAgICAgICBsb25nZXIgcm9vbSBmb3IgbGVuaXR5OyB0aGUgYnVzaW5lc3MgaXRzZWxmIGRlbWFuZHMgc2V2ZXJpdHkuIE9uZSB0aGluZywgZXZlbiBub3csIEkgd2lsbAogICAgICAgZ3JhbnQs4oCUbGV0IHRoZW0gZGVwYXJ0LCBsZXQgdGhlbSBiZSBnb25lLiBMZXQgdGhlbSBub3Qgc3VmZmVyIHRoZSB1bmhhcHB5IENhdGlsaW5lCiAgICAgICB0byBwaW5lIGF3YXkgZm9yIHdhbnQgb2YgdGhlbS4gSSB3aWxsIHRlbGwgdGhlbSB0aGUgcm9hZC4gSGUgd2VudCBieSB0aGUgQXVyZWxpYW4gcm9hZC4gSWYKICAgICAgIHRoZXkgbWFrZSBoYXN0ZSwgdGhleSB3aWxsIGNhdGNoIGhpbSBieSB0aGUgZXZlbmluZy4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk8gaGFwcHkKICAgICAgIHJlcHVibGljLCBpZiBpdCBjYW4gY2FzdCBmb3J0aCB0aGVzZSBkcmVncyBvZiB0aGUgcmVwdWJsaWMhIEV2ZW4gbm93LCB3aGVuIENhdGlsaW5lIGFsb25lIGlzCiAgICAgICBnb3QgcmlkIG9mOyB0aGUgcmVwdWJsaWMgc2VlbXMgdG8gbWUgcmVsaWV2ZWQgYW5kIHJlZnJlc2hlZDsgZm9yIHdoYXQgZXZpbCBvciB3aWNrZWRuZXNzIGNhbgogICAgICAgYmUgZGV2aXNlZCBvciBpbWFnaW5lZCB3aGljaCBoZSBkaWQgbm90IGNvbmNlaXZlPyBXaGF0IHByaXNvbmVyLCB3aGF0IGdsYWRpYXRvciwgd2hhdCB0aGllZjsKICAgICAgIHdoYXQgYXNzYXNzaW4sIHdoYXQgcGFycmljaWRlLCB3aGF0IGZvcmdlciBvZiB3aWxscywgd2hhdCBjaGVhdCwgd2hhdCBkZWJhdWNoZWUsIHdoYXQKICAgICAgIHNwZW5kdGhyaWZ0LCB3aGF0IGFkdWx0ZXJlciwgd2hhdCBhYmFuZG9uZWQgd29tYW4sIHdoYXQgY29ycnVwdGVyIG9mIHlvdXRoLCB3aGF0IHByb2ZsaWdhdGUsCiAgICAgICB3aGF0IHNjb3VuZHJlbCBjYW4gYmUgZm91bmQgaW4gYWxsIEl0YWx5LCB3aG8gZG9lcyBub3QgYXZvdyB0aGF0IGhlIGhhcyBiZWVuIG9uIHRlcm1zIG9mCiAgICAgICBpbnRpbWFjeSB3aXRoIENhdGlsaW5lPyBXaGF0IG11cmRlciBoYXMgYmVlbiBjb21taXR0ZWQgZm9yIHllYXJzIHdpdGhvdXQgaGltPyBXaGF0IG5lZmFyaW91cwogICAgICAgYWN0IG9mIGluZmFteSB0aGF0IGhhcyBub3QgYmVlbiBkb25lIGJ5IGhpbT8gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxwPkJ1dCBpbiB3aGF0IG90aGVyIG1hbiB3ZXJlIHRoZXJlIGV2ZXIgc28gbWFueSBhbGx1cmVtZW50cyBmb3IgeW91dGggYXMgaW4gaGltLCB3aG8gYm90aAogICAgICAgaW5kdWxnZWQgaW4gaW5mYW1vdXMgbG92ZSBmb3Igb3RoZXJzLCBhbmQgZW5jb3VyYWdlZCB0aGVpciBpbmZhbW91cyBhZmZlY3Rpb25zIGZvciBoaW1zZWxmLAogICAgICAgcHJvbWlzaW5nIHRvIHNvbWUgZW5qb3ltZW50IG9mIHRoZWlyIGx1c3QsIHRvIG90aGVycyB0aGUgZGVhdGggb2YgdGhlaXIgcGFyZW50cywgYW5kIG5vdCBvbmx5CiAgICAgICBpbnN0aWdhdGluZyB0aGVtIHRvIGluaXF1aXR5LCBidXQgZXZlbiBhc3Npc3RpbmcgdGhlbSBpbiBpdC4gQnV0IG5vdywgaG93IHN1ZGRlbmx5IGhhZCBoZQogICAgICAgY29sbGVjdGVkLCBub3Qgb25seSBvdXQgb2YgdGhlIGNpdHksIGJ1dCBldmVuIG91dCBvZiB0aGUgY291bnRyeSwgYSBudW1iZXIgb2YgYWJhbmRvbmVkIG1lbj8KICAgICAgIE5vIG9uZSwgbm90IG9ubHkgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYnV0IGluIGV2ZXJ5IGNvcm5lciBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgd2FzIG92ZXJ3aGVsbWVkIHdpdGggZGVidCB3aG9tIGhlIGRpZCBub3QKICAgICAgIGVubGlzdCBpbiB0aGlzIGluY3JlZGlibGUgYXNzb2NpYXRpb24gb2Ygd2lja2VkbmVzcy4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwPkFuZCwgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgdGhlIGRpdmVyc2l0eSBvZiBoaXMgcHVyc3VpdHMgYW5kIHRoZSB2YXJpZXR5IG9mIGhpcyBkZXNpZ25zLAogICAgICAgdGhlcmUgd2FzIG5vIG9uZSBpbiBhbnkgc2Nob29sIG9mIGdsYWRpYXRvcnMsIGF0IGFsbCBpbmNsaW5lZCB0byBhdWRhY2l0eSwgd2hvIGRvZXMgbm90IGF2b3cKICAgICAgIGhpbXNlbGYgdG8gYmUgYW4gaW50aW1hdGUgZnJpZW5kIG9mIENhdGlsaW5lLOKAlG5vIG9uZSBvbiB0aGUgc3RhZ2UsIGF0IGFsbCBvZiBhCiAgICAgICBmaWNrbGUgYW5kIHdvcnRobGVzcyBkaXNwb3NpdGlvbiwgd2hvIGRvZXMgbm90IHByb2Zlc3MgaGltc2VsZiBoaXMgY29tcGFuaW9uLiBBbmQgaGUsIHRyYWluZWQKICAgICAgIGluIHRoZSBwcmFjdGljZSBvZiBpbnN1bHQgYW5kIHdpY2tlZG5lc3MsIGluIGVuZHVyaW5nIGNvbGQsIGFuZCBodW5nZXIsIGFuZCB0aGlyc3QsIGFuZAogICAgICAgd2F0Y2hpbmcsIHdhcyBjYWxsZWQgYSBicmF2ZSBtYW4gYnkgdGhvc2UgZmVsbG93cywgd2hpbGUgYWxsIHRoZSBhcHBsaWFuY2VzIG9mIGluZHVzdHJ5IGFuZAogICAgICAgaW5zdHJ1bWVudHMgb2YgdmlydHVlIHdlcmUgZGV2b3RlZCB0byBsdXN0IGFuZCBhdHJvY2l0eS4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cD5CdXQgaWYgaGlzIGNvbXBhbmlvbnMgZm9sbG93IGhpbSzigJRpZiB0aGUgaW5mYW1vdXMgaGVyZCBvZiBkZXNwZXJhdGUgbWVuIGRlcGFydAogICAgICAgZnJvbSB0aGUgY2l0eSwgTyBoYXBweSBzaGFsbCB3ZSBiZSwgZm9ydHVuYXRlIHdpbGwgYmUgdGhlIHJlcHVibGljLCBpbGx1c3RyaW91cyB3aWxsIGJlIHRoZQogICAgICAgcmVub3duIG9mIG15IGNvbnN1bHNoaXAuIEZvciB0aGVpcnMgaXMgbm8gb3JkaW5hcnkgaW5zb2xlbmNlLOKAlG5vIGNvbW1vbiBhbmQKICAgICAgIGVuZHVyYWJsZSBhdWRhY2l0eS4gVGhleSB0aGluayBvZiBub3RoaW5nIGJ1dCBzbGF1Z2h0ZXIsIGNvbmZsYWdyYXRpb24sIGFuZCByYXBpbmUuIFRoZXkgaGF2ZQogICAgICAgZGlzc2lwYXRlZCB0aGVpciBwYXRyaW1vbmllcywgdGhleSBoYXZlIHNxdWFuZGVyZWQgdGhlaXIgZm9ydHVuZXMuIE1vbmV5IGhhcyBsb25nIGZhaWxlZAogICAgICAgdGhlbSwgYW5kIG5vdyBjcmVkaXQgYmVnaW5zIHRvIGZhaWw7IGJ1dCB0aGUgc2FtZSBkZXNpcmVzIHJlbWFpbiB3aGljaCB0aGV5IGhhZCBpbiB0aGVpciB0aW1lCiAgICAgICBvZiBhYnVuZGFuY2UuIEJ1dCBpZiBpbiB0aGVpciBkcmlua2luZyBhbmQgZ2FtYmxpbmcgcGFydGllcyB0aGV5IHdlcmUgY29udGVudCB3aXRoIGZlYXN0cyBhbmQKICAgICAgIGhhcmxvdHMsIHRoZXkgd291bGQgYmUgaW4gYSBob3BlbGVzcyBzdGF0ZSBpbmRlZWQ7IGJ1dCB5ZXQgdGhleSBtaWdodCBiZSBlbmR1cmVkLiBCdXQgd2hvIGNhbgogICAgICAgYmVhciB0aGlzLOKAlHRoYXQgaW5kb2xlbnQgbWVuIHNob3VsZCBwbG90IGFnYWluc3QgdGhlIGJyYXZlc3Qs4oCUZHJ1bmthcmRzCiAgICAgICBhZ2FpbnN0IHRoZSBzb2JlcizigJRtZW4gYXNsZWVwIGFnYWluc3QgbWVuIGF3YWtlLOKAlG1lbiBseWluZyBhdCBmZWFzdHMsCiAgICAgICBlbWJyYWNpbmcgYWJhbmRvbmVkIHdvbWVuLCBsYW5ndWlkIHdpdGggd2luZSwgY3JhbW1lZCB3aXRoIGZvb2QsIGNyb3duZWQgd2l0aCBjaGFwbGV0cywKICAgICAgIHJlZWtpbmcgd2l0aCBvaW50bWVudHMsIHdvcm4gb3V0IHdpdGggbHVzdCwgYmVsY2ggb3V0IGluIHRoZWlyIGRpc2NvdXJzZSB0aGUgbXVyZGVyIG9mIGFsbAogICAgICAgZ29vZCBtZW4sIGFuZCB0aGUgY29uZmxhZ3JhdGlvbiBvZiB0aGUgY2l0eT8gPC9wPgoJCQkJCQk8cD4KICAgICAgIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBJIGFtIGNvbmZpZGVudCB0aGF0IHNvbWUgZmF0ZSBpcyBoYW5naW5nIG92ZXIgdGhlc2UKICAgICAgIG1lbjsgYW5kIHRoYXQgdGhlIHB1bmlzaG1lbnQgbG9uZyBzaW5jZSBkdWUgdG8gdGhlaXIgaW5pcXVpdHksIGFuZCB3b3J0aGxlc3NuZXNzLCBhbmQKICAgICAgIHdpY2tlZG5lc3MsIGFuZCBsdXN0LCBpcyBlaXRoZXIgdmlzaWJseSBhdCBoYW5kIG9yIGF0IGxlYXN0IHJhcGlkbHkgYXBwcm9hY2hpbmcuIEFuZCBpZiBteQogICAgICAgY29uc3Vsc2hpcCBzaGFsbCBoYXZlIHJlbW92ZWQsIHNpbmNlIGl0IGNhbm5vdCBjdXJlIHRoZW0sIGl0IHdpbGwgaGF2ZSBhZGRlZCwgbm90IHNvbWUgYnJpZWYKICAgICAgIHNwYW4sIGJ1dCBtYW55IGFnZXMgb2YgZXhpc3RlbmNlIHRvIHRoZSByZXB1YmxpYy4gRm9yIHRoZXJlIGlzIG5vIG5hdGlvbiBmb3IgdXMgdG8KICAgICAgIGZlYXIs4oCUbm8ga2luZyB3aG8gY2FuIG1ha2Ugd2FyIG9uIHRoZSBSb21hbiBwZW9wbGUuIEFsbCBmb3JlaWduIGFmZmFpcnMgYXJlCiAgICAgICB0cmFucXVpbGl6ZWQsIGJvdGggYnkgbGFuZCBhbmQgc2VhLCBieSB0aGUgdmFsb3VyIG9mIG9uZSBtYW4uIERvbWVzdGljIHdhciBhbG9uZSByZW1haW5zLiBUaGUKICAgICAgIG9ubHkgcGxvdHMgYWdhaW5zdCB1cyBhcmUgd2l0aGluIG91ciBvd24gd2FsbHMs4oCUdGhlIGRhbmdlciBpcyB3aXRoaW4s4oCUdGhlCiAgICAgICBlbmVteSBpcyB3aXRoaW4uIFdlIG11c3Qgd2FyIHdpdGggbHV4dXJ5LCB3aXRoIG1hZG5lc3MsIHdpdGggd2lja2VkbmVzcy4gRm9yIHRoaXMgd2FyLCBPCiAgICAgICBjaXRpemVucywgSSBvZmZlciBteXNlbGYgYXMgdGhlIGdlbmVyYWwuIEkgdGFrZSBvbiBteXNlbGYgdGhlIGVubWl0eSBvZiBwcm9mbGlnYXRlIG1lbi4gV2hhdAogICAgICAgY2FuIGJlIGN1cmVkLCBJIHdpbGwgY3VyZSwgYnkgd2hhdGV2ZXIgbWVhbnMgaXQgbWF5IGJlIHBvc3NpYmxlLiBXaGF0IG11c3QgYmUgY3V0IGF3YXksIEkKICAgICAgIHdpbGwgbm90IHN1ZmZlciB0byBzcHJlYWQsIHRvIHRoZSBydWluIG9mIHRoZSByZXB1YmxpYy4gTGV0IHRoZW0gZGVwYXJ0LCBvciBsZXQgdGhlbSBzdGF5CiAgICAgICBxdWlldDsgb3IgaWYgdGhleSByZW1haW4gaW4gdGhlIGNpdHkgYW5kIGluIHRoZSBzYW1lIGRpc3Bvc2l0aW9uIGFzIGF0IHByZXNlbnQsIGxldCB0aGVtCiAgICAgICBleHBlY3Qgd2hhdCB0aGV5IGRlc2VydmUuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHA+QnV0IHRoZXJlIGFyZSBtZW4sIE8gUm9tYW5zLCB3aG8gc2F5IHRoYXQgQ2F0aWxpbmUgaGFzIGJlZW4gZHJpdmVuIGJ5IG1lIGludG8gYmFuaXNobWVudC4KICAgICAgIEJ1dCBpZiBJIGNvdWxkIGRvIHNvIGJ5IGEgd29yZCwgSSB3b3VsZCBkcml2ZSBvdXQgdGhvc2UgYWxzbyB3aG8gc2F5IHNvLiBGb3Jzb290aCwgdGhhdAogICAgICAgdGltaWQsIHRoYXQgZXhjZXNzaXZlbHkgYmFzaGZ1bCBtYW4gY291bGQgbm90IGJlYXIgdGhlIHZvaWNlIG9mIHRoZSBjb25zdWw7IGFzIHNvb24gYXMgaGUgd2FzCiAgICAgICBvcmRlcmVkIHRvIGdvIGludG8gYmFuaXNobWVudCwgaGUgb2JleWVkLCBoZSB3YXMgcXVpZXQuIFllc3RlcmRheSwgd2hlbiBJIGhhZCBiZWVuIGFsbCBidXQKICAgICAgIG11cmRlcmVkIGF0IG15IG93biBob3VzZSwgSSBjb252b2tlZCB0aGUgc2VuYXRlIGluIHRoZSB0ZW1wbGUgb2YgSnVwaXRlciBTdGF0b3I7IEkgcmVsYXRlZAogICAgICAgdGhlIHdob2xlIGFmZmFpciB0byB0aGUgY29uc2NyaXB0IGZhdGhlcnM7IGFuZCB3aGVuIENhdGlsaW5lIGNhbWUgdGhpdGhlciwgd2hhdCBzZW5hdG9yCiAgICAgICBhZGRyZXNzZWQgaGltPyB3aG8gc2FsdXRlZCBoaW0/IHdobyBsb29rZWQgdXBvbiBoaW0gbm90IHNvIG11Y2ggZXZlbiBhcyBhbiBhYmFuZG9uZWQgY2l0aXplbiwKICAgICAgIGFzIGFuIGltcGxhY2FibGUgZW5lbXk/IE5heSB0aGUgY2hpZWZzIG9mIHRoYXQgYm9keSBsZWZ0IHRoYXQgcGFydCBvZiB0aGUgYmVuY2hlcyB0byB3aGljaCBoZQogICAgICAgY2FtZSBuYWtlZCBhbmQgZW1wdHkuIDwvcD4KCQkJCQkJPHA+PG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJLCB0aGF0IHZpb2xlbnQgY29uc3VsLCB3aG8gZHJpdmUgY2l0aXplbnMgaW50bwogICAgICAgZXhpbGUgYnkgYSB3b3JkLCBhc2tlZCBvZiBDYXRpbGluZSB3aGV0aGVyIGhlIGhhZCBiZWVuIGF0IHRoZSBub2N0dXJuYWwgbWVldGluZyBhdCBNYXJjdXMKICAgICAgIExlY2NhJ3MsIG9yIG5vdDsgd2hlbiB0aGF0IG1vc3QgYXVkYWNpb3VzIG1hbiwgY29udmljdGVkIGJ5IGhpcyBvd24gY29uc2NpZW5jZSwgd2FzIGF0IGZpcnN0CiAgICAgICBzaWxlbnQuIEkgcmVsYXRlZCBhbGwgdGhlIG90aGVyIGNpcmN1bXN0YW5jZXM7IEkgZGVzY3JpYmVkIHdoYXQgaGUgaGFkIGRvbmUgdGhhdCBuaWdodCwgd2hlcmUKICAgICAgIGhlIGhhZCBiZWVuLCB3aGF0IGhlIGhhZCBhcnJhbmdlZCBmb3IgdGhlIG5leHQgbmlnaHQsIGhvdyB0aGUgcGxhbiBvZiB0aGUgd2hvbGUgd2FyIGhhZCBiZWVuCiAgICAgICBsYWlkIGRvd24gYnkgaGltLiBXaGVuIGhlIGhlc2l0YXRlZCwgd2hlbiBoZSB3YXMgY29udmljdGVkLCBJIGFza2VkIHdoeSBoZSBoZXNpdGF0ZWQgdG8gZ28KICAgICAgIHdoaXRoZXIgaGUgaGFkIGJlZW4gbG9uZyBiZWVuIHByZXBhcmluZyB0byBnbzsgd2hlbiBJIGtuZXcgdGhhdCBhcm1zLCB0aGF0IHRoZSBheGVzLCB0aGUKICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+ZmFzY2VzPC9mb3JlaWduPiwgYW5kIHRydW1wZXRzLCBhbmQgbWlsaXRhcnkgc3RhbmRhcmRzLCBhbmQgdGhhdCBzaWx2ZXIKICAgICAgIGVhZ2xlIHRvIHdoaWNoIGhlIGhhZCBtYWRlIGEgc2hyaW5lIGluIGhpcyBvd24gaG91c2UsIGhhZCBiZWVuIHNlbnQgb24/IDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+IERpZCBJIGRyaXZlIGhpbSBpbnRvIGV4aWxlIHdobyBJIGtuZXcgaGFkIGFscmVhZHkgZW50ZXJlZCB1cG9uIHdhcj8gSQogICAgICAgc3VwcG9zZSBNYW5saXVzLCB0aGF0IGNlbnR1cmlvbiB3aG8gaGFzIHBpdGNoZWQgaGlzIGNhbXAgaW4gdGhlIEZhZXN1bGFuIGRpc3RyaWN0LCBoYXMKICAgICAgIHByb2NsYWltZWQgd2FyIGFnYWluc3QgdGhlIFJvbWFuIHBlb3BsZSBpbiBoaXMgb3duIG5hbWU7IGFuZCB0aGF0IGNhbXAgaXMgbm90IG5vdyB3YWl0aW5nIGZvcgogICAgICAgQ2F0aWxpbmUgYXMgaXRzIGdlbmVyYWwsIGFuZCBoZSwgZHJpdmVuIGluZGVlZCBpbnRvIGV4aWxlLCB3aWxsIGdvIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+LCBhcyB0aGV5IHNheSwgYW5kIG5vdCB0byB0aGF0IGNhbXAuIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTxwPk8gdGhlIGhhcmQgbG90IG9mIHRob3NlLCBub3Qgb25seSBvZiB0aG9zZSB3aG8gZ292ZXJuLCBidXQgZXZlbiBvZiB0aG9zZSB3aG8gc2F2ZSB0aGUKICAgICAgIHJlcHVibGljLiBOb3csIGlmIEx1Y2l1cyBDYXRpbGluZSwgaGVtbWVkIGluIGFuZCByZW5kZXJlZCBwb3dlcmxlc3MgYnkgbXkgY291bnNlbHMsIGJ5IG15CiAgICAgICB0b2lscywgYnkgbXkgZGFuZ2Vycywgc2hvdWxkIG9uIGEgc3VkZGVuIGJlY29tZSBhbGFybWVkLCBzaG91bGQgY2hhbmdlIGhpcyBkZXNpZ25zLCBzaG91bGQKICAgICAgIGRlc2VydCBoaXMgZnJpZW5kcywgc2hvdWxkIGFiYW5kb24gaGlzIGRlc2lnbiBvZiBtYWtpbmcgd2FyLCBzaG91bGQgY2hhbmdlIGhpcyBwYXRoIGZyb20gdGhpcwogICAgICAgY291cnNlIG9mIHdpY2tlZG5lc3MgYW5kIHdhciwgYW5kIGJldGFrZSBoaW1zZWxmIHRvIGZsaWdodCBhbmQgZXhpbGUsIGhlIHdpbGwgbm90IGJlIHNhaWQgdG8KICAgICAgIGhhdmUgYmVlbiBkZXByaXZlZCBieSBtZSBvZiB0aGUgYXJtcyBvZiBoaXMgYXVkYWNpdHksIHRvIGhhdmUgYmVlbiBhc3RvdW5kZWQgYW5kIHRlcnJpZmllZCBieQogICAgICAgbXkgZGlsaWdlbmNlLCB0byBoYXZlIGJlZW4gZHJpdmVuIGZyb20gaGlzIGhvcGUgYW5kIGZyb20gaGlzIGVudGVycHJpc2UsIGJ1dCwgdW5jb25kZW1uZWQgYW5kCiAgICAgICBpbm5vY2VudCwgdG8gaGF2ZSBiZWVuIGRyaXZlbiBpbnRvIGJhbmlzaG1lbnQgYnkgdGhlIGNvbnN1bCBieSB0aHJlYXRzIGFuZCB2aW9sZW5jZTsgYW5kCiAgICAgICB0aGVyZSB3aWxsIGJlIHNvbWUgd2hvIHdpbGwgc2VlayB0byBoYXZlIGhpbSB0aG91Z2h0IG5vdCB3b3J0aGxlc3MgYnV0IHVuZm9ydHVuYXRlLCBhbmQgYmUKICAgICAgIGNvbnNpZGVyZWQgbm90IGEgbW9zdCBhY3RpdmUgY29uc3VsLCBidXQgYSBtb3N0IGNydWVsIHR5cmFudC4gPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhbSBub3QgdW53aWxsaW5nLCBPIFJvbWFucywgdG8gZW5kdXJlIHRoaXMgc3Rvcm0gb2YgZmFsc2UgYW5kIHVuanVzdAogICAgICAgdW5wb3B1bGFyaXR5IGFzIGxvbmcgYXMgdGhlIGRhbmdlciBvZiB0aGlzIGhvcnJpYmxlIGFuZCBuZWZhcmlvdXMgd2FyIGlzIHdhcmRlZCBvZmYgZnJvbSB5b3UuCiAgICAgICBMZXQgaGltIGJlIHNhaWQgdG8gYmUgYmFuaXNoZWQgYnkgbWUgYXMgbG9uZyBhcyBoZSBnb2VzIGludG8gYmFuaXNobWVudDsgYnV0LCBiZWxpZXZlIG1lLCBoZQogICAgICAgd2lsbCBub3QgZ28uIEkgd2lsbCBuZXZlciBhc2sgb2YgdGhlIGltbW9ydGFsIGdvZHMsIE8gUm9tYW5zLCBmb3IgdGhlIHNha2Ugb2YgbGlnaHRlbmluZyBteQogICAgICAgb3duIHVucG9wdWxhcml0eSwgZm9yIHlvdSB0byBoZWFyIHRoYXQgTHVjaXVzIENhdGlsaW5lIGlzIGxlYWRpbmcgYW4gYXJteSBvZiBlbmVtaWVzLCBhbmQgaXMKICAgICAgIGhvdmVyaW5nIGFib3V0IGluIGFybXM7IGJ1dCB5ZXQgaW4gdGhyZWUgZGF5cyB5b3Ugd2lsbCBoZWFyIGl0LiBBbmQgSSBtdWNoIG1vcmUgZmVhciB0aGF0IGl0CiAgICAgICB3aWxsIGJlIG9iamVjdGVkIHRvIG1lIHNvbWUgZGF5IG9yIG90aGVyLCB0aGF0IEkgaGF2ZSBsZXQgaGltIGVzY2FwZSwgcmF0aGVyIHRoYW4gdGhhdCBJIGhhdmUKICAgICAgIGJhbmlzaGVkIGhpbS4gQnV0IHdoZW4gdGhlcmUgYXJlIG1lbiB3aG8gc2F5IGhlIGhhcyBiZWVuIGJhbmlzaGVkIGJlY2F1c2UgaGUgaGFzIGdvbmUgYXdheSwKICAgICAgIHdoYXQgd291bGQgdGhlc2UgbWVuIHNheSBpZiBoZSBoYWQgYmVlbiBwdXQgdG8gZGVhdGg/IDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHA+QWx0aG91Z2ggdGhvc2UgbWVuIHdobyBrZWVwIHNheWluZyB0aGF0IENhdGlsaW5lIGlzIGdvaW5nIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+IGRvIG5vdCBjb21wbGFpbiBvZiB0aGlzIHNvIG11Y2ggYXMgdGhleSBmZWFyIGl0OyBmb3IgdGhlcmUgaXMgbm90CiAgICAgICBvbmUgb2YgdGhlbSBzbyBpbmNsaW5lZCB0byBwaXR5LCBhcyBub3QgdG8gcHJlZmVyIHRoYXQgaGUgc2hvdWxkIGdvIHRvIE1hbmxpdXMgcmF0aGVyIHRoYW4gdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPi4gQnV0IGhlLCBpZiBoZSBoYWQgbmV2ZXIgYmVmb3JlIHBsYW5uZWQKICAgICAgIHdoYXQgaGUgaXMgbm93IGRvaW5nLCB5ZXQgd291bGQgcmF0aGVyIGJlIHNsYWluIHdoaWxlIGxpdmluZyBhcyBhIGJhbmRpdCwgdGhhbiBsaXZlIGFzIGFuCiAgICAgICBleGlsZTsgYnV0IG5vdywgd2hlbiBub3RoaW5nIGhhcyBoYXBwZW5lZCB0byBoaW0gY29udHJhcnkgdG8gaGlzIG93biB3aXNoIGFuZAogICAgICAgZGVzaWduLOKAlGV4Y2VwdCwgaW5kZWVkLCB0aGF0IGhlIGhhcyBsZWZ0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2hpbGUgd2UgYXJlIGFsaXZlLOKAlGxldCB1cyB3aXNoIHJhdGhlciB0aGF0IGhlIG1heSBnbyBpbnRvIGV4aWxlCiAgICAgICB0aGFuIGNvbXBsYWluIG9mIGl0LiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwPkJ1dCB3aHkgYXJlIHdlIHNwZWFraW5nIHNvIGxvbmcgYWJvdXQgb25lIGVuZW15OyBhbmQgYWJvdXQgdGhhdCBlbmVteSB3aG8gbm93IGF2b3dzIHRoYXQgaGUKICAgICAgIGlzIG9uZTsgYW5kIHdob20gSSBub3cgZG8gbm90IGZlYXIsIGJlY2F1c2UsIGFzIEkgaGF2ZSBhbHdheXMgd2lzaGVkLCBhIHdhbGwgaXMgYmV0d2VlbiB1czsKICAgICAgIGFuZCBhcmUgc2F5aW5nIG5vdGhpbmcgYWJvdXQgdGhvc2Ugd2hvIGRpc3NlbWJsZSwgd2hvIHJlbWFpbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aG8gYXJlIGFtb25nIHVzPyBXaG9tLCBpbmRlZWQsIGlmIGl0IHdlcmUgYnkgYW55IG1lYW5zIHBvc3NpYmxlLCBJCiAgICAgICBzaG91bGQgYmUgYW54aW91cyBub3Qgc28gbXVjaCB0byBjaGFzdGlzZSBhcyB0byBjdXJlLCBhbmQgdG8gbWFrZSBmcmllbmRseSB0byB0aGUgcmVwdWJsaWM7CiAgICAgICBub3IsIGlmIHRoZXkgd2lsbCBsaXN0ZW4gdG8gbWUsIGRvIEkgcXVpdGUga25vdyB3aHkgdGhhdCBtYXkgbm90IGJlLiBGb3IgSSB3aWxsIHRlbGwgeW91LCBPCiAgICAgICBSb21hbnMsIG9mIHdoYXQgY2xhc3NlcyBvZiBtZW4gdGhvc2UgZm9yY2VzIGFyZSBtYWRlIHVwLCBhbmQgdGhlbiwgaWYgSSBjYW4sIEkgd2lsbCBhcHBseSB0bwogICAgICAgZWFjaCB0aGUgbWVkaWNpbmUgb2YgbXkgYWR2aWNlIGFuZCBwZXJzdWFzaW9uLiA8L3A+CgkJCQkJCTxwPjxtaWxlc3RvbmUgbj0iMTgiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZXJlIGlzIG9uZSBjbGFzcyBvZiB0aGVtLCB3aG8sIHdpdGggZW5vcm1vdXMgZGVidHMsCiAgICAgICBoYXZlIHN0aWxsIGdyZWF0ZXIgcG9zc2Vzc2lvbnMsIGFuZCB3aG8gY2FuIGJ5IG5vIG1lYW5zIGJlIGRldGFjaGVkIGZyb20gdGhlaXIgYWZmZWN0aW9uIHRvCiAgICAgICB0aGVtLiBPZiB0aGVzZSBtZW4gdGhlIGFwcGVhcmFuY2UgaXMgbW9zdCByZXNwZWN0YWJsZSwgZm9yIHRoZXkgYXJlIHdlYWx0aHksIGJ1dCB0aGVpcgogICAgICAgaW50ZW50aW9uIGFuZCB0aGVpciBjYXVzZSBhcmUgbW9zdCBzaGFtZWxlc3MuIFdpbGwgeW91IGJlIHJpY2ggaW4gbGFuZHMsIGluIGhvdXNlcywgaW4gbW9uZXksCiAgICAgICBpbiBzbGF2ZXMsIGluIGFsbCB0aGluZ3MsIGFuZCB5ZXQgaGVzaXRhdGUgdG8gZGltaW5pc2ggeW91ciBwb3NzZXNzaW9ucyB0byBhZGQgdG8geW91cgogICAgICAgY3JlZGl0PyBXaGF0IGFyZSB5b3UgZXhwZWN0aW5nPyBXYXI/IFdoYXQhIGluIHRoZSBkZXZhc3RhdGlvbiBvZiBhbGwgdGhpbmdzLCBkbyB5b3UgYmVsaWV2ZQogICAgICAgdGhhdCB5b3VyIG93biBwb3NzZXNzaW9ucyB3aWxsIGJlIGhlbGQgc2FjcmVkPyBkbyB5b3UgZXhwZWN0IGFuIGFib2xpdGlvbiBvZiBkZWJ0cz8gVGhleSBhcmUKICAgICAgIG1pc3Rha2VuIHdobyBleHBlY3QgdGhhdCBmcm9tIENhdGlsaW5lLiBUaGVyZSBtYXkgYmUgc2NoZWR1bGVzIG1hZGUgb3V0LCBvd2luZyB0byBteQogICAgICAgZXhlcnRpb25zLCBidXQgdGhleSB3aWxsIGJlIG9ubHkgY2F0YWxvZ3VlcyBvZiBzYWxlLiBOb3IgY2FuIHRob3NlIHdobyBoYXZlIHBvc3Nlc3Npb25zIGJlCiAgICAgICBzYWZlIGJ5IGFueSBvdGhlciBtZWFuczsgYW5kIGlmIHRoZXkgaGFkIGJlZW4gd2lsbGluZyB0byBhZG9wdCB0aGlzIHBsYW4gZWFybGllciwgYW5kIG5vdCwgYXMKICAgICAgIGlzIHZlcnkgZm9vbGlzaCwgdG8gc3RydWdnbGUgb24gYWdhaW5zdCB1c3VyeSB3aXRoIHRoZSBwcm9maXRzIG9mIHRoZWlyIGZhcm1zLCB3ZSBzaG91bGQgaGF2ZQogICAgICAgdGhlbSBub3cgcmljaGVyIGFuZCBiZXR0ZXIgY2l0aXplbnMuIEJ1dCBJIHRoaW5rIHRoZXNlIG1lbiBhcmUgdGhlIGxlYXN0IG9mIGFsbCB0byBiZQogICAgICAgZHJlYWRlZCwgYmVjYXVzZSB0aGV5IGNhbiBlaXRoZXIgYmUgcGVyc3VhZGVkIHRvIGFiYW5kb24gdGhlaXIgb3BpbmlvbnMsIG9yIGlmIHRoZXkgY2xpbmcgdG8KICAgICAgIHRoZW0sIHRoZXkgc2VlbSB0byBtZSBtb3JlIGxpa2VseSB0byBmb3JtIHdpc2hlcyBhZ2FpbnN0IHRoZSByZXB1YmxpYyB0aGFuIHRvIGJlYXIgYXJtcwogICAgICAgYWdhaW5zdCBpdC4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cD5UaGVyZSBpcyBhbm90aGVyIGNsYXNzIG9mIHRoZW0sIHdobywgYWx0aG91Z2ggdGhleSBhcmUgaGFyYXNzZWQgYnkgZGVidCwgeWV0IGFyZSBleHBlY3RpbmcKICAgICAgIHN1cHJlbWUgcG93ZXI7IHRoZXkgd2lzaCB0byBiZWNvbWUgbWFzdGVycy4gVGhleSB0aGluayB0aGF0IHdoZW4gdGhlIHJlcHVibGljIGlzIGluIGNvbmZ1c2lvbgogICAgICAgdGhleSBtYXkgZ2FpbiB0aG9zZSBob25vdXJzIHdoaWNoIHRoZXkgZGVzcGFpciBvZiB3aGVuIGl0IGlzIGluIHRyYW5xdWlsbGl0eS4gQW5kIHRoZXkgbXVzdCwKICAgICAgIEkgdGhpbmssIGJlIHRvbGQgdGhlIHNhbWUgYXMgZXZlcnkgb25lIGVsc2Us4oCUdG8gZGVzcGFpciBvZiBvYnRhaW5pbmcgd2hhdCB0aGV5IGFyZQogICAgICAgYWltaW5nIGF0OyB0aGF0IGluIHRoZSBmaXJzdCBwbGFjZSwgSSBteXNlbGYgYW0gd2F0Y2hmdWwgZm9yLCBhbSBwcmVzZW50IHRvLCBhbSBwcm92aWRpbmcgZm9yCiAgICAgICB0aGUgcmVwdWJsaWMuIEJlc2lkZXMgdGhhdCwgdGhlcmUgaXMgYSBoaWdoIHNwaXJpdCBpbiB0aGUgdmlydHVvdXMgY2l0aXplbnMsIGdyZWF0IHVuYW5pbWl0eSwKICAgICAgIGdyZWF0IG51bWJlcnMsIGFuZCBhbHNvIGEgZ3JlYXQgYm9keSBvZiB0cm9vcHMuIEFib3ZlIGFsbCB0aGF0LCB0aGUgaW1tb3J0YWwgZ29kcyB3aWxsIHN0YW5kCiAgICAgICBieSBhbmQgYnJpbmcgYWlkIHRvIHRoaXMgaW52aW5jaWJsZSBuYXRpb24sIHRoaXMgbW9zdCBpbGx1c3RyaW91cyBlbXBpcmUsIHRoaXMgbW9zdCBiZWF1dGlmdWwKICAgICAgIGNpdHksIGFnYWluc3Qgc3VjaCB3aWNrZWQgdmlvbGVuY2UuIEFuZCBpZiB0aGV5IGhhZCBhbHJlYWR5IGdvdCB0aGF0IHdoaWNoIHRoZXkgd2l0aCB0aGUKICAgICAgIGdyZWF0ZXN0IG1hZG5lc3Mgd2lzaCBmb3IsIGRvIHRoZXkgdGhpbmsgdGhhdCBpbiB0aGUgYXNoZXMgb2YgdGhlIGNpdHkgYW5kIGJsb29kIG9mIHRoZQogICAgICAgY2l0aXplbnMsIHdoaWNoIGluIHRoZWlyIHdpY2tlZCBhbmQgaW5mYW1vdXMgaGVhcnRzIHRoZXkgZGVzaXJlLCB0aGV5IHdpbGwgYmVjb21lIGNvbnN1bHMgYW5kCiAgICAgICBkaWN0YXRvcnMgYW5kIGV2ZW4ga2luZ3M/IERvIHRoZXkgbm90IHNlZSB0aGF0IHRoZXkgYXJlIHdpc2hpbmcgZm9yIHRoYXQgd2hpY2gsIGlmIHRoZXkgd2VyZQogICAgICAgdG8gb2J0YWluIGl0LCBtdXN0IGJlIGdpdmVuIHVwIHRvIHNvbWUgZnVnaXRpdmUgc2xhdmUsIG9yIHRvIHNvbWUgZ2xhZGlhdG9yPyA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxwPlRoZXJlIGlzIGEgdGhpcmQgY2xhc3MsIGFscmVhZHkgdG91Y2hlZCBieSBhZ2UsIGJ1dCBzdGlsbCB2aWdvcm91cyBmcm9tIGNvbnN0YW50IGV4ZXJjaXNlOwogICAgICAgb2Ygd2hpY2ggY2xhc3MgaXMgTWFubGl1cyBoaW1zZWxmOyB3aG9tIENhdGlsaW5lIGlzIG5vdyBzdWNjZWVkaW5nLiBUaGVzZSBhcmUgbWVuIG9mIHRob3NlCiAgICAgICBjb2xvbmllcyB3aGljaCBTdWxsYSBlc3RhYmxpc2hlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEZhZXN1bGFlIiBrZXk9InBlcnNldXMsRmFlc3VsYWUiPkZhZXN1bGFlPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggSSBrbm93IHRvIGJlIGNvbXBvc2VkLCBvbiB0aGUgd2hvbGUsIG9mIGV4Y2VsbGVudCBjaXRpemVucyBhbmQgYnJhdmUgbWVuOyBidXQgeWV0IHRoZXNlCiAgICAgICBhcmUgY29sb25pc3RzLCB3aG8sIGZyb20gYmVjb21pbmcgcG9zc2Vzc2VkIG9mIHVuZXhwZWN0ZWQgYW5kIHN1ZGRlbiB3ZWFsdGgsIGJvYXN0IHRoZW1zZWx2ZXMKICAgICAgIGV4dHJhdmFnYW50bHkgYW5kIGluc29sZW50bHk7IHRoZXNlIG1lbiwgd2hpbGUgdGhleSBidWlsZCBsaWtlIHJpY2ggbWVuLCB3aGlsZSB0aGV5IGRlbGlnaHQKICAgICAgIGluIGZhcm1zLCBpbiBsaXR0ZXJzLCBpbiB2YXN0IGZhbWlsaWVzIG9mIHNsYXZlcywgaW4gbHV4dXJpb3VzIGJhbnF1ZXRzLCBoYXZlIGluY3VycmVkIHN1Y2gKICAgICAgIGdyZWF0IGRlYnRzLCB0aGF0LCBpZiB0aGV5IHdvdWxkIGJlIHNhdmVkLCB0aGV5IG11c3QgcmFpc2UgU3VsbGEgZnJvbSB0aGUgZGVhZDsgYW5kIHRoZXkgaGF2ZQogICAgICAgZXZlbiBleGNpdGVkIHNvbWUgY291bnRyeW1lbiwgcG9vciBhbmQgbmVlZHkgbWVuLCB0byBlbnRlcnRhaW4gdGhlIHNhbWUgaG9wZXMgb2YgcGx1bmRlciBhcwogICAgICAgdGhlbXNlbHZlcy4gQW5kIGFsbCB0aGVzZSBtZW4sIE8gUm9tYW5zLCBJIHBsYWNlIGluIHRoZSBzYW1lIGNsYXNzIG9mIHJvYmJlcnMgYW5kIGJhbmRpdHRpLgogICAgICAgQnV0LCBJIHdhcm4gdGhlbSwgbGV0IHRoZW0gY2Vhc2UgdG8gYmUgbWFkLCBhbmQgdG8gdGhpbmsgb2YgcHJvc2NyaXB0aW9ucyBhbmQgZGljdGF0b3JzaGlwczsKICAgICAgIGZvciBzdWNoIGEgaG9ycm9yIG9mIHRoZXNlIHRpbWVzIGlzIGluZ3JhaW5lZCBpbnRvIHRoZSBjaXR5LCB0aGF0IG5vdCBldmVuIG1lbiwgYnV0IGl0IHNlZW1zCiAgICAgICB0byBtZSB0aGF0IGV2ZW4gdGhlIHZlcnkgY2F0dGxlIHdvdWxkIHJlZnVzZSB0byBiZWFyIHRoZW0gYWdhaW4uIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwPlRoZXJlIGlzIGEgZm91cnRoIGNsYXNzLCB2YXJpb3VzLCBwcm9taXNjdW91cyBhbmQgdHVyYnVsZW50OyB3aG8gaW5kZWVkIGFyZSBub3cKICAgICAgIG92ZXJ3aGVsbWVkOyB3aG8gd2lsbCBuZXZlciByZWNvdmVyIHRoZW1zZWx2ZXM7IHdobywgcGFydGx5IGZyb20gaW5kb2xlbmNlLCBwYXJ0bHkgZnJvbQogICAgICAgbWFuYWdpbmcgdGhlaXIgYWZmYWlycyBiYWRseSwgcGFydGx5IGZyb20gZXh0cmF2YWdhbmNlLCBhcmUgZW1iYXJyYXNzZWQgYnkgb2xkIGRlYnRzOyBhbmQKICAgICAgIHdvcm4gb3V0IHdpdGggYmFpbCBib25kcywgYW5kIGp1ZGdtZW50cywgYW5kIHNlaXp1cmVzIG9mIHRoZWlyIGdvb2RzLCBhcmUgc2FpZCB0byBiZSBiZXRha2luZwogICAgICAgdGhlbXNlbHZlcyBpbiBudW1iZXJzIHRvIHRoYXQgY2FtcCBib3RoIGZyb20gdGhlIGNpdHkgYW5kIHRoZSBjb3VudHJ5LiBUaGVzZSBtZW4gSSB0aGluayBub3QKICAgICAgIHNvIG11Y2ggYWN0aXZlIHNvbGRpZXJzIGFzIGxhenkgaW5zb2x2ZW50czsgd2hvLCBpZiB0aGV5IGNhbm5vdCBzdGFuZCBhdCBmaXJzdCwgbWF5IGZhbGwsIGJ1dAogICAgICAgZmFsbCBzbywgdGhhdCBub3Qgb25seSB0aGUgY2l0eSBidXQgZXZlbiB0aGVpciBuZWFyZXN0IG5laWdoYm91cnMga25vdyBub3RoaW5nIG9mIGl0LiBGb3IgSQogICAgICAgZG8gbm90IHVuZGVyc3RhbmQgd2h5LCBpZiB0aGV5IGNhbm5vdCBsaXZlIHdpdGggaG9ub3VyLCB0aGV5IHNob3VsZCB3aXNoIHRvIGRpZSBzaGFtZWZ1bGx5OwogICAgICAgb3Igd2lseSB0aGV5IHRoaW5rIHRoZXkgc2hhbGwgcGVyaXNoIHdpdGggbGVzcyBwYWluIGluIGEgY3Jvd2QsIHRoYW4gaWYgdGhleSBwZXJpc2ggYnkKICAgICAgIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHA+VGhlcmUgaXMgYSBmaWZ0aCBjbGFzcywgb2YgcGFycmljaWRlcywgYXNzYXNzaW5zLCBpbiBzaG9ydCBvZiBhbGwgaW5mYW1vdXMgY2hhcmFjdGVycywgd2hvbQogICAgICAgSSBkbyBub3Qgd2lzaCB0byByZWNhbGwgZnJvbSBDYXRpbGluZSwgYW5kIGluZGVlZCB0aGV5IGNhbm5vdCBiZSBzZXBhcmF0ZWQgZnJvbSBoaW0uIExldCB0aGVtCiAgICAgICBwZXJpc2ggaW4gdGhlaXIgd2lja2VkIHdhciwgc2luY2UgdGhleSBhcmUgc28gbnVtZXJvdXMgdGhhdCBhIHByaXNvbiBjYW5ub3QgY29udGFpbiB0aGVtLiA8L3A+CgkJCQkJCTxwPlRoZXJlIGlzIGEgbGFzdCBjbGFzcywgbGFzdCBub3Qgb25seSBpbiBudW1iZXIgYnV0IGluIHRoZSBzb3J0IG9mIG1lbiBhbmQgaW4gdGhlaXIgd2F5IG9mCiAgICAgICBsaWZlOyB0aGUgZXNwZWNpYWwgYm9keS1ndWFyZCBvZiBDYXRpbGluZSwgb2YgaGlzIGxldnlpbmc7IHllcywgdGhlIGZyaWVuZHMgb2YgaGlzIGVtYnJhY2VzCiAgICAgICBhbmQgb2YgaGlzIGJvc29tOyB3aG9tIHlvdSBzZWUgd2l0aCBjYXJlZnVsbHkgY29tYmVkIGhhaXIsIGdsb3NzeSwgYmVhcmRsZXNzLCBvciB3aXRoCiAgICAgICB3ZWxsLXRyaW1tZWQgYmVhcmRzOyB3aXRoIHR1bmljcyB3aXRoIHNsZWV2ZXMsIG9yIHJlYWNoaW5nIHRvIHRoZSBhbmtsZXM7IGNsb3RoZWQgd2l0aCB2ZWlscywKICAgICAgIG5vdCB3aXRoIHJvYmVzOyBhbGwgdGhlIGluZHVzdHJ5IG9mIHdob3NlIGxpZmUsIGFsbCB0aGUgbGFib3VyIG9mIHdob3NlIHdhdGNoZnVsbmVzcywgaXMKICAgICAgIGV4cGVuZGVkIGluIHN1cHBlcnMgbGFzdGluZyB0aWxsIGRheWJyZWFrLiA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxwPkluIHRoZXNlIGJhbmRzIGFyZSBhbGwgdGhlIGdhbWJsZXJzLCBhbGwgdGhlIGFkdWx0ZXJlcnMsIGFsbCB0aGUgdW5jbGVhbiBhbmQgc2hhbWVsZXNzCiAgICAgICBjaXRpemVucy4gVGhlc2UgYm95cywgc28gd2l0dHkgYW5kIGRlbGljYXRlLCBoYXZlIGxlYXJudCBub3Qgb25seSB0byBsb3ZlIGFuZCB0byBiZSBsb3ZlZCwKICAgICAgIG5vdCBvbmx5IHRvIHNpbmcgYW5kIHRvIGRhbmNlLCBidXQgYWxzbyB0byBicmFuZGlzaCBkYWdnZXJzIGFuZCB0byBhZG1pbmlzdGVyIHBvaXNvbnM7IGFuZAogICAgICAgdW5sZXNzIHRoZXkgYXJlIGRyaXZlbiBvdXQsIHVubGVzcyB0aGV5IGRpZSwgZXZlbiBzaG91bGQgQ2F0aWxpbmUgZGllLCBJIHdhcm4geW91IHRoYXQgdGhlCiAgICAgICBzY2hvb2wgb2YgQ2F0aWxpbmUgd291bGQgZXhpc3QgaW4gdGhlIHJlcHVibGljLiBCdXQgd2hhdCBkbyB0aG9zZSB3cmV0Y2hlcyB3YW50PyBBcmUgdGhleQogICAgICAgZ29pbmcgdG8gdGFrZSB0aGVpciB3aXZlcyB3aXRoIHRoZW0gdG8gdGhlIGNhbXA/IGhvdyBjYW4gdGhleSBkbyB3aXRob3V0IHRoZW0sIGVzcGVjaWFsbHkgaW4KICAgICAgIHRoZXNlIG5pZ2h0cz8gYW5kIGhvdyB3aWxsIHRoZXkgZW5kdXJlIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODUzMSIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlc2UgZnJvc3RzLCBhbmQgdGhpcyBzbm93PyB1bmxlc3MgdGhleSB0aGluayB0aGF0IHRoZXkgd2lsbAogICAgICAgYmVhciB0aGUgd2ludGVyIG1vcmUgZWFzaWx5IGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gaW4gdGhlIGhhYml0IG9mIGRhbmNpbmcgbmFrZWQgYXQgdGhlaXIKICAgICAgIGZlYXN0cy4gTyB3YXIgbXVjaCB0byBiZSBkcmVhZGVkLCB3aGVuIENhdGlsaW5lIGlzIGdvaW5nIHRvIGhhdmUgaGlzIGJvZHlndWFyZCBvZgogICAgICAgcHJvc3RpdHV0ZXMhIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwPkFycmF5IG5vdywgTyBSb21hbnMsIGFnYWluc3QgdGhlc2Ugc3BsZW5kaWQgdHJvb3BzIG9mIENhdGlsaW5lLCB5b3VyIGd1YXJkcyBhbmQgeW91cgogICAgICAgYXJtaWVzOyBhbmQgZmlyc3Qgb2YgYWxsIG9wcG9zZSB0byB0aGF0IHdvcm4tb3V0IGFuZCB3b3VuZGVkIGdsYWRpYXRvciB5b3VyIGNvbnN1bHMgYW5kCiAgICAgICBnZW5lcmFsczsgdGhlbiBhZ2FpbnN0IHRoYXQgYmFuaXNoZWQgYW5kIGVuZmVlYmxlZCB0cm9vcCBvZiBydWluZWQgbWVuIGxlYWQgb3V0IHRoZSBmbG93ZXIKICAgICAgIGFuZCBzdHJlbmd0aCBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGluc3RhbnRseSB0aGUgY2l0aWVzIG9mCiAgICAgICB0aGUgY29sb25pZXMgYW5kIG11bmljaXBhbGl0aWVzIHdpbGwgbWF0Y2ggdGhlIHJ1c3RpYyBtb3VuZHMgb2YgQ2F0aWxpbmU7IGFuZCBJIHdpbGwgbm90CiAgICAgICBjb25kZXNjZW5kIHRvIGNvbXBhcmUgdGhlIHJlc3Qgb2YgeW91ciB0cm9vcHMgYW5kIGVxdWlwbWVudHMgYW5kIGd1YXJkcyB3aXRoIHRoZSB3YW50IGFuZAogICAgICAgZGVzdGl0dXRpb24gb2YgdGhhdCBoaWdod2F5bWFuLiA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaWYsIG9taXR0aW5nIGFsbCB0aGVzZQogICAgICAgdGhpbmdzIGluIHdoaWNoIHdlIGFyZSByaWNoIGFuZCBvZiB3aGljaCBoZSBpcyBkZXN0aXR1dGUs4oCUdGhlIHNlbmF0ZSwgdGhlIFJvbWFuCiAgICAgICBrbmlnaHRzLCB0aGUgcGVvcGxlLCB0aGUgY2l0eSwgdGhlIHRyZWFzdXJ5LCB0aGUgcmV2ZW51ZXMsIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGFsbCB0aGUgcHJvdmluY2VzLCBmb3JlaWduIG5hdGlvbnMs4oCUaWYgSSBzYXksIG9taXR0aW5nIGFsbAogICAgICAgdGhlc2UgdGhpbmdzLCB3ZSBjaG9vc2UgdG8gY29tcGFyZSB0aGUgY2F1c2VzIHRoZW1zZWx2ZXMgd2hpY2ggYXJlIG9wcG9zZWQgdG8gb25lIGFub3RoZXIsIHdlCiAgICAgICBtYXkgdW5kZXJzdGFuZCBmcm9tIHRoYXQgYWxvbmUgaG93IHRob3JvdWdobHkgcHJvc3RyYXRlIHRoZXkgYXJlLiBGb3Igb24gdGhlIG9uZSBzaWRlIGFyZQogICAgICAgZmlnaHRpbmcgbW9kZXN0eSwgb24gdGhlIG90aGVyIHdhbnRvbm5lc3M7IG9uIHRoZSBvbmUgY2hhc3RpdHksIG9uIHRoZSBvdGhlciB1bmNsZWFubmVzczsgb24KICAgICAgIHRoZSBvbmUgaG9uZXN0eSwgb24gdGhlIG90aGVyIGZyYXVkOyBvbiB0aGUgb25lIHBpZXR5LCBvbiB0aGUgb3RoZXIgd2lja2VkbmVzczsgb24gdGhlIG9uZQogICAgICAgY29uc2lzdGVuY3ksIG9uIHRoZSBvdGhlciBpbnNhbml0eTsgb24gdGhlIG9uZSBob25vdXIsIG9uIHRoZSBvdGhlciBiYXNlbmVzczsgb24gdGhlIG9uZQogICAgICAgY29udGluZW5jZSwgb24gdGhlIG90aGVyIGx1c3Q7IGluIHNob3J0LCBlcXVpdHksIHRlbXBlcmFuY2UsIGZvcnRpdHVkZSwgcHJ1ZGVuY2UsIGFsbCB0aGUKICAgICAgIHZpcnR1ZXMgY29udGVuZCBhZ2FpbnN0IGluaXF1aXR5IHdpdGggbHV4dXJ5LCBhZ2FpbnN0IGluZG9sZW5jZSwgYWdhaW5zdCByYXNobmVzcywgYWdhaW5zdAogICAgICAgYWxsIHRoZSB2aWNlczsgbGFzdGx5LCBhYnVuZGFuY2UgY29udGVuZHMgYWdhaW5zdCBkZXN0aXR1dGlvbiwgZ29vZCBwbGFucyBhZ2FpbnN0IGJhZmZsZWQKICAgICAgIGRlc2lnbnMsIHdpc2RvbSBhZ2FpbnN0IG1hZG5lc3MsIHdlbGwtZm91bmRlZCBob3BlIGFnYWluc3QgdW5pdmVyc2FsIGRlc3BhaXIuIEluIGEgY29udGVzdAogICAgICAgYW5kIHdhciBvZiB0aGlzIHNvcnQsIGV2ZW4gaWYgdGhlIHplYWwgb2YgbWVuIHdlcmUgdG8gZmFpbCwgd2lsbCBub3QgdGhlIGltbW9ydGFsIGdvZHMgY29tcGVsCiAgICAgICBzdWNoIG51bWVyb3VzIGFuZCBleGNlc3NpdmUgdmljZXMgdG8gYmUgZGVmZWF0ZWQgYnkgdGhlc2UgbW9zdCBlbWluZW50IHZpcnR1ZXM/IDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwPkFuZCBhcyB0aGlzIGlzIHRoZSBjYXNlLCBPIFJvbWFucywgYXMgSSBoYXZlIHNhaWQgYmVmb3JlLCBkZWZlbmQgeW91ciBob3VzZSB3aXRoIGd1YXJkcyBhbmQKICAgICAgIHZpZ2lsYW5jZS4gPHBiIG49IjMwMiIgLz4gSSBoYXZlIHRha2VuIGNhcmUgYW5kIG1hZGUgYXJyYW5nZW1lbnRzIHRoYXQgdGhlcmUgc2hhbGwgYmUKICAgICAgIHN1ZmZpY2llbnQgcHJvdGVjdGlvbiBmb3IgdGhlIGNpdHkgd2l0aG91dCBkaXN0cmVzc2luZyB5b3UgYW5kIHdpdGhvdXQgYW55IHR1bXVsdC4gQWxsIHRoZQogICAgICAgY29sb25pc3RzIGFuZCBjaXRpemVucyBvZiB5b3VyIG11bmljaXBhbCB0b3ducywgYmVpbmcgaW5mb3JtZWQgYnkgbWUgb2YgdGhpcyBub2N0dXJuYWwgc2FsbHkKICAgICAgIG9mIENhdGlsaW5lLCB3aWxsIGVhc2lseSBkZWZlbmQgdGhlaXIgY2l0aWVzIGFuZCB0ZXJyaXRvcmllczsgdGhlIGdsYWRpYXRvcnMgd2hpY2ggaGUgdGhvdWdodAogICAgICAgd291bGQgYmUgaGlzIG1vc3QgbnVtZXJvdXMgYW5kIG1vc3QgdHJ1c3R5IGJhbmQsIGFsdGhvdWdoIHRoZXkgYXJlIGJldHRlciBkaXNwb3NlZCB0aGFuIHBhcnQKICAgICAgIG9mIHRoZSBwYXRyaWNpYW5zLCB3aWxsIGJlIGhlbGQgaW4gY2hlZWsgYnkgb3VyIHBvd2VyLiBRdWludHVzIE1ldGVsbHVzLCB3aG9tIEksIG1ha2luZwogICAgICAgcHJvdmlzaW9uIGZvciB0aGlzLCBzZW50IG9uIHRvIHRoZSBHYWxsaWMgYW5kIFBpY2VuaWFuIHRlcnJpdG9yeSwgd2lsbCBlaXRoZXIgb3ZlcndoZWxtIHRoZQogICAgICAgbWFuLCBvciB3aWxsIHByZXZlbnQgYWxsIGhpcyBtb3Rpb25zIGFuZCBhdHRlbXB0czsgYnV0IHdpdGggcmVzcGVjdCB0byB0aGUgYXJyYW5nZW1lbnQgb2YgYWxsCiAgICAgICBvdGhlciBtYXR0ZXJzLCBhbmQgbWF0dXJpbmcgYW5kIGFjdGluZyBvbiBvdXIgcGxhbnMsIHdlIHNoYWxsIGNvbnN1bHQgdGhlIHNlbmF0ZSwgd2hpY2gsIGFzCiAgICAgICB5b3UgYXJlIGF3YXJlLCBpcyBjb252ZW5lZC4gPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cD5Ob3cgb25jZSBtb3JlIEkgd2lzaCB0aG9zZSB3aG8gaGF2ZSByZW1haW5lZCBpbiB0aGUgY2l0eSwgYW5kIHdobywgY29udHJhcnkgdG8gdGhlIHNhZmV0eQogICAgICAgb2YgdGhlIGNpdHkgYW5kIG9mIGFsbCBvZiB5b3UsIGhhdmUgYmVlbiBsZWZ0IGluIHRoZSBjaXR5IGJ5IENhdGlsaW5lLCBhbHRob3VnaCB0aGV5IGFyZQogICAgICAgZW5lbWllcywgeWV0IGJlY2F1c2UgdGhleSB3ZXJlIGJvcm4gY2l0aXplbnMsIHRvIGJlIHdhcm5lZCBhZ2FpbiBhbmQgYWdhaW4gYnkgbWUuIElmIG15CiAgICAgICBsZW5pdHkgaGFzIGFwcGVhcmVkIHRvIGFueSBvbmUgdG9vIHJlbWlzcywgaXQgaGFzIGJlZW4gb25seSB3YWl0aW5nIHRoYXQgdGhhdCBtaWdodCBicmVhayBvdXQKICAgICAgIHdoaWNoIHdhcyBseWluZyBoaWQuIEFzIHRvIHRoZSBmdXR1cmUsIEkgY2Fubm90IG5vdyBmb3JnZXQgdGhhdCB0aGlzIGlzIG15IGNvdW50cnksIHRoYXQgSSBhbQogICAgICAgdGhlIGNvbnN1bCBvZiB0aGVzZSBjaXRpemVuczsgdGhhdCBJIG11c3QgZWl0aGVyIGxpdmUgd2l0aCB0aGVtLCBvciBkaWUgZm9yIHRoZW0uIFRoZXJlIGlzIG5vCiAgICAgICBndWFyZCBhdCB0aGUgZ2F0ZSwgbm8gb25lIHBsb3R0aW5nIGFnYWluc3QgdGhlaXIgcGF0aDsgaWYgYW55IG9uZSB3aXNoZXMgdG8gZ28sIGhlIGNhbgogICAgICAgcHJvdmlkZSBmb3IgaGltc2VsZjsgYnV0IGlmIGFueSBvbmUgc3RpcnMgaW4gdGhlIGNpdHksIGFuZCBpZiBJIGRldGVjdCBub3Qgb25seSBhbnkgYWN0aW9uLAogICAgICAgYnV0IGFueSBhdHRlbXB0IG9yIGRlc2lnbiBhZ2FpbnN0IHRoZSBjb3VudHJ5LCBoZSBzaGFsbCBmZWVsIHRoYXQgdGhlcmUgYXJlIGluIHRoaXMgY2l0eQogICAgICAgdmlnaWxhbnQgY29uc3VscywgZW1pbmVudCBtYWdpc3RyYXRlcywgYSBicmF2ZSBzZW5hdGUsIGFybXMsIGFuZCBwcmlzb25zOyB3aGljaCBvdXIgYW5jZXN0b3JzCiAgICAgICBhcHBvaW50ZWQgYXMgdGhlIGF2ZW5nZXJzIG9mIG5lZmFyaW91cyBhbmQgY29udmljdGVkIGNyaW1lcy4gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHA+QW5kIGFsbCB0aGlzIHNoYWxsIGJlIHNvIGRvbmUsIE8gUm9tYW5zLCB0aGF0IGFmZmFpcnMgb2YgdGhlIGdyZWF0ZXN0IGltcG9ydGFuY2Ugc2hhbGwgYmUKICAgICAgIHRyYW5zYWN0ZWQgd2l0aCB0aGUgbGVhc3QgcG9zc2libGUgZGlzdHVyYmFuY2U7IHRoZSBncmVhdGVzdCBkYW5nZXJzIHNoYWxsIGJlIGF2b2lkZWQgd2l0aG91dAogICAgICAgYW55IHR1bXVsdDsgYW4gaW50ZXJuYWwgY2l2aWwgd2FyIHRoZSBtb3N0IGNydWVsIGFuZCB0ZXJyaWJsZSBpbiB0aGUgbWVtb3J5IG9mIG1hbiwgc2hhbGwgYmUKICAgICAgIHB1dCBhbiBlbmQgdG8gYnkgbWUgYWxvbmUgaW4gdGhlIHJvYmUgb2YgcGVhY2UgYWN0aW5nIGFzIGdlbmVyYWwgYW5kIGNvbW1hbmRlci1pbi1jaGllZi4gQW5kCiAgICAgICB0aGlzIEkgd2lsbCBzbyBhcnJhbmdlLCBPIFJvbWFucywgdGhhdCBpZiBpdCBjYW4gYmUgYnkgYW55IG1lYW5zIG1hbmFnZWQsIGV2ZW4gdGhlIG1vc3QKICAgICAgIHdvcnRobGVzcyBtYW4gc2hhbGwgbm90IHN1ZmZlciB0aGUgcHVuaXNobWVudCBvZiBoaXMgY3JpbWVzIGluIHRoaXMgY2l0eS4gQnV0IGlmIHRoZSB2aW9sZW5jZQogICAgICAgb2Ygb3BlbiBhdWRhY2l0eSwgaWYgZGFuZ2VyIGltcGVuZGluZyBvdmVyIHRoZSByZXB1YmxpYyBkcml2ZXMgbWUgb2YgbmVjZXNzaXR5IGZyb20gdGhpcwogICAgICAgbWVyY2lmdWwgZGlzcG9zaXRpb24sIGF0IGFsbCBldmVudHMgSSB3aWxsIG1hbmFnZSB0aGlzLCB3aGljaCBzZWVtcyBzY2FyY2VseSBldmVuIHRvIGJlIGhvcGVkCiAgICAgICBmb3IgaW4gc28gZ3JlYXQgYW5kIHNvIHRyZWFjaGVyb3VzIGEgd2FyLCB0aGF0IG5vIGdvb2QgbWFuIHNoYWxsIGZhbGwsIGFuZCB0aGF0IHlvdSBtYXkgYWxsCiAgICAgICBiZSBzYXZlZCBieSB0aGUgcHVuaXNobWVudCBvZiBhIGZldy4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cD5BbmQgSSBwcm9taXNlIHlvdSB0aGlzLCBPIFJvbWFucywgcmVseWluZyBuZWl0aGVyIG9uIG15IG93biBwcnVkZW5jZSwgbm9yIG9uIGh1bWFuCiAgICAgICBjb3Vuc2VscywgYnV0IG9uIG1hbnkgYW5kIG1hbmlmZXN0IGludGltYXRpb25zIG9mIHRoZSB3aWxsIG9mIHRoZSBpbW1vcnRhbCBnb2RzOyB1bmRlciB3aG9zZQogICAgICAgZ3VpZGFuY2UgSSBmaXJzdCBlbnRlcnRhaW5lZCB0aGlzIGhvcGUgYW5kIHRoaXMgb3Bpbmlvbjsgd2hvIGFyZSBub3cgZGVmZW5kaW5nIHRoZWlyIHRlbXBsZXMKICAgICAgIGFuZCB0aGUgaG91c2VzIG9mIHRoZSBjaXR5LCBub3QgYWZhciBvZmYsIGFzIHRoZXkgd2VyZSB1c2VkIHRvLCBmcm9tIGEgZm9yZWlnbiBhbmQgZGlzdGFudAogICAgICAgZW5lbXksIGJ1dCBoZXJlIG9uIHRoZSBzcG90LCBieSB0aGVpciBvd24gZGl2aW5pdHkgYW5kIHByZXNlbnQgaGVscC4gQW5kIHlvdSwgTyBSb21hbnMsIG91Z2h0CiAgICAgICB0byBwcmF5IHRvIGFuZCBpbXBsb3JlIHRoZW0gdG8gZGVmZW5kIGZyb20gdGhlIG5lZmFyaW91cyB3aWNrZWRuZXNzIG9mIGFiYW5kb25lZCBjaXRpemVucywKICAgICAgIG5vdyB0aGF0IGFsbCB0aGUgZm9yY2VzIG9mIGFsbCBlbmVtaWVzIGFyZSBkZWZlYXRlZCBieSBsYW5kIGFuZCBzZWEsIHRoaXMgY2l0eSB3aGljaCB0aGV5CiAgICAgICBoYXZlIG9yZGFpbmVkIHRvIGJlIHRoZSBtb3N0IGJlYXV0aWZ1bCBhbmQgZmxvdXJpc2hpbmcgb2YgYWxsIGNpdGllcy48L3A+CgkJCQkJPC9kaXYxPgoJCQkJCTxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VEhFIFNFQ09ORCBPUkFUSU9OIE9GIE0uIFQuIENJQ0VSTyBBR0FJTlNUIExVQ0lVUyBDQVRJTElOQS4gQUREUkVTU0VEIFRPIFRIRSBQRU9QTEUuIDwvaGVhZD4KCQkJCQkJPGFyZ3VtZW50IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkJCQk8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPlRIRSBBUkdVTUVOVC48L2hlYWQ+CgkJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkNhdGlsaW5lIGRpZCBub3QgdmVudHVyZSB0byBtYWtlIGFueSByZXBseSB0byB0aGUgZm9ybWVyIHNwZWVjaCwgYnV0IGhlIGJlZ2dlZCB0aGUgc2VuYXRlCiAgICAgICAgbm90IHRvIGJlIHRvbyBoYXN0eSBpbiBiZWxpZXZpbmcgZXZlcnl0aGluZyB3aGljaCB3YXMgc2FpZCB0byBoaXMgcHJlanVkaWNlIGJ5IG9uZSB3aG8gaGFkCiAgICAgICAgYWx3YXlzIGJlZW4gaGlzIGVuZW15LCBhcyBDaWNlcm8gaGFkOyBhbmQgYWxsZWdlZCBoaXMgaGlnaCBiaXJ0aCwgYW5kIHRoZSBzdGFrZSB3aGljaCBoZSBoYWQKICAgICAgICBpbiB0aGUgcHJvc3Blcml0eSBvZiB0aGUgY29tbW9ud2VhbHRoLCBhcyBhcmd1bWVudHMgdG8gbWFrZSBpdCBhcHBlYXIgaW1wcm9iYWJsZSB0aGF0IGhlCiAgICAgICAgc2hvdWxkIHNlZWsgdG8gaW5qdXJlIGl0OyBhbmQgY2FsbGVkIENpY2VybyBhIHN0cmFuZ2VyLCBhbmQgYSBuZXcgaW5oYWJpdGFudCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIEJ1dCB0aGUgc2VuYXRlIGludGVycnVwdGVkIGhpbSB3aXRoIGEgZ2VuZXJhbCBvdXRjcnksCiAgICAgICAgY2FsbGluZyBoaW0gdHJhaXRvciBhbmQgcGFycmljaWRlLiBVcG9uIHdoaWNoLCBiZWluZyByZW5kZXJlZCBmdXJpb3VzIGFuZCBkZXNwZXJhdGUsIGhlCiAgICAgICAgZGVjbGFyZWQgYWxvdWQgd2hhdCBoZSBoYWQgYmVmb3JlIHNhaWQgdG8gQ2F0bywgdGhhdCBzaW5jZSBoZSB3YXMgY2lyY3VtdmVudGVkIGFuZCBkcml2ZW4KICAgICAgICBoZWFkbG9uZyBieSBoaXMgZW5lbWllcywgaGUgd291bGQgcXVlbmNoIHRoZSBmbGFtZSB3aGljaCBoaXMgZW5lbWllcyB3ZXJlIGtpbmRsaW5nIGFyb3VuZAogICAgICAgIGhpbSBpbiB0aGUgY29tbW9uIHJ1aW4uIEFuZCBzbyBoZSBydXNoZWQgb3V0IG9mIHRoZSB0ZW1wbGUuIE9uIGhpcyBhcnJpdmFsIGF0IGhpcyBvd24gaG91c2UKICAgICAgICBoZSBoZWxkIGEgYnJpZWYgY29uZmVyZW5jZSB3aXRoIHRoZSBvdGhlciBjb25zcGlyYXRvcnMsIGluIHdoaWNoIGl0IHdhcyByZXNvbHZlZCB0aGF0IGhlCiAgICAgICAgc2hvdWxkIGdvIGF0IG9uY2UgdG8gdGhlIGNhbXAgb2YgTWFubGl1cywgYW5kIHJldHVybiBhcyBzcGVlZGlseSBhcyBoZSBjb3VsZCBhdCB0aGUgaGVhZCBvZgogICAgICAgIHRoZSBhcm15IHdoaWNoIHdhcyB0aGVyZSBhd2FpdGluZyBoaW0uIEFjY29yZGluZ2x5LCB0aGF0IG5pZ2h0IGhlIGxlZnQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdpdGggYSBzbWFsbCByZXRpbnVlLCBhbmQgbWFkZSB0aGUgYmVzdCBvZiBoaXMgd2F5CiAgICAgICAgdG93YXJkcyBFdHJ1cmlhLiBIaXMgZnJpZW5kcyBnYXZlIG91dCB0aGF0IGhlIGhhZCBnb25lIGludG8gdm9sdW50YXJ5IGJhbmlzaG1lbnQgYXQKICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPjsgYW5kIHNwcmVhZCB0aGF0IHJlcG9ydCB0aHJvdWdoIHRoZQogICAgICAgIGNpdHkgdGhlIG5leHQgbW9ybmluZywgaW4gb3JkZXIgdG8gZXhjaXRlIG9kaXVtIGFnYWluc3QgQ2ljZXJvLCBhcyBoYXZpbmcgZHJpdmVuIGhpbSBvdXQKICAgICAgICB3aXRob3V0IGFueSB0cmlhbCBvciBwcm9vZiBvZiBoaXMgZ3VpbHQuIEJ1dCBDaWNlcm8gd2FzIGF3YXJlIG9mIGhpcyBtb3Rpb25zLCBhbmQga25ldyB0aGF0CiAgICAgICAgaGUgaGFkIHByZXZpb3VzbHkgc2VudCBhIHF1YW50aXR5IG9mIGFybXMsIGFuZCBtaWxpdGFyeSBlbnNpZ25zLCBhbmQgZXNwZWNpYWxseSBhIHNpbHZlcgogICAgICAgIGVhZ2xlIHdoaWNoIGhlIGhhZCBiZWVuIHVzZWQgdG8ga2VlcCBpbiBoaXMgb3duIGhvdXNlIHdpdGggYSBzdXBlcnN0aXRpb3VzIHJldmVyZW5jZSwKICAgICAgICBiZWNhdXNlIGl0IGhhZCBiZWVuIHVzZWQgYnkgdGhlIGdyZWF0IE1hcml1cyBpbiBoaXMgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBDaW1icmkuIEhvd2V2ZXIsCiAgICAgICAgaGUgdGhvdWdodCBpdCBkZXNpcmFibGUgdG8gY291bnRlcmFjdCB0aGUgc3Rvcnkgb2YgaGlzIGhhdmluZyBnb25lIGludG8gZXhpbGUsIGFuZCB0aGVyZWZvcmUKICAgICAgICBzdW1tb25lZCB0aGUgcGVvcGxlIGludG8gdGhlIGZvcnVtLCBhbmQgbWFkZSB0aGVtIHRoZSBmb2xsb3dpbmcgc3BlZWNoLjwvcD4KCQkJCQkJPC9hcmd1bWVudD4KCQkJCQkJPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5USEUgQVJHVU1FTlQuPC9oZWFkPgoJCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRpbGluZSBkaWQgbm90IHZlbnR1cmUgdG8gbWFrZSBhbnkgcmVwbHkgdG8gdGhlIGZvcm1lciBzcGVlY2gsIGJ1dCBoZSBiZWdnZWQgdGhlIHNlbmF0ZQogICAgICAgIG5vdCB0byBiZSB0b28gaGFzdHkgaW4gYmVsaWV2aW5nIGV2ZXJ5dGhpbmcgd2hpY2ggd2FzIHNhaWQgdG8gaGlzIHByZWp1ZGljZSBieSBvbmUgd2hvIGhhZAogICAgICAgIGFsd2F5cyBiZWVuIGhpcyBlbmVteSwgYXMgQ2ljZXJvIGhhZDsgYW5kIGFsbGVnZWQgaGlzIGhpZ2ggYmlydGgsIGFuZCB0aGUgc3Rha2Ugd2hpY2ggaGUgaGFkCiAgICAgICAgaW4gdGhlIHByb3NwZXJpdHkgb2YgdGhlIGNvbW1vbndlYWx0aCwgYXMgYXJndW1lbnRzIHRvIG1ha2UgaXQgYXBwZWFyIGltcHJvYmFibGUgdGhhdCBoZQogICAgICAgIHNob3VsZCBzZWVrIHRvIGluanVyZSBpdDsgYW5kIGNhbGxlZCBDaWNlcm8gYSBzdHJhbmdlciwgYW5kIGEgbmV3IGluaGFiaXRhbnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LiBCdXQgdGhlIHNlbmF0ZSBpbnRlcnJ1cHRlZCBoaW0gd2l0aCBhIGdlbmVyYWwgb3V0Y3J5LAogICAgICAgIGNhbGxpbmcgaGltIHRyYWl0b3IgYW5kIHBhcnJpY2lkZS4gVXBvbiB3aGljaCwgYmVpbmcgcmVuZGVyZWQgZnVyaW91cyBhbmQgZGVzcGVyYXRlLCBoZQogICAgICAgIGRlY2xhcmVkIGFsb3VkIHdoYXQgaGUgaGFkIGJlZm9yZSBzYWlkIHRvIENhdG8sIHRoYXQgc2luY2UgaGUgd2FzIGNpcmN1bXZlbnRlZCBhbmQgZHJpdmVuCiAgICAgICAgaGVhZGxvbmcgYnkgaGlzIGVuZW1pZXMsIGhlIHdvdWxkIHF1ZW5jaCB0aGUgZmxhbWUgd2hpY2ggaGlzIGVuZW1pZXMgd2VyZSBraW5kbGluZyBhcm91bmQKICAgICAgICBoaW0gaW4gdGhlIGNvbW1vbiBydWluLiBBbmQgc28gaGUgcnVzaGVkIG91dCBvZiB0aGUgdGVtcGxlLiBPbiBoaXMgYXJyaXZhbCBhdCBoaXMgb3duIGhvdXNlCiAgICAgICAgaGUgaGVsZCBhIGJyaWVmIGNvbmZlcmVuY2Ugd2l0aCB0aGUgb3RoZXIgY29uc3BpcmF0b3JzLCBpbiB3aGljaCBpdCB3YXMgcmVzb2x2ZWQgdGhhdCBoZQogICAgICAgIHNob3VsZCBnbyBhdCBvbmNlIHRvIHRoZSBjYW1wIG9mIE1hbmxpdXMsIGFuZCByZXR1cm4gYXMgc3BlZWRpbHkgYXMgaGUgY291bGQgYXQgdGhlIGhlYWQgb2YKICAgICAgICB0aGUgYXJteSB3aGljaCB3YXMgdGhlcmUgYXdhaXRpbmcgaGltLiBBY2NvcmRpbmdseSwgdGhhdCBuaWdodCBoZSBsZWZ0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB3aXRoIGEgc21hbGwgcmV0aW51ZSwgYW5kIG1hZGUgdGhlIGJlc3Qgb2YgaGlzIHdheQogICAgICAgIHRvd2FyZHMgRXRydXJpYS4gSGlzIGZyaWVuZHMgZ2F2ZSBvdXQgdGhhdCBoZSBoYWQgZ29uZSBpbnRvIHZvbHVudGFyeSBiYW5pc2htZW50IGF0CiAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA4NzgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDg3ODEiPk1hcnNlaWxsZXM8L3BsYWNlTmFtZT47IGFuZCBzcHJlYWQgdGhhdCByZXBvcnQgdGhyb3VnaCB0aGUKICAgICAgICBjaXR5IHRoZSBuZXh0IG1vcm5pbmcsIGluIG9yZGVyIHRvIGV4Y2l0ZSBvZGl1bSBhZ2FpbnN0IENpY2VybywgYXMgaGF2aW5nIGRyaXZlbiBoaW0gb3V0CiAgICAgICAgd2l0aG91dCBhbnkgdHJpYWwgb3IgcHJvb2Ygb2YgaGlzIGd1aWx0LiBCdXQgQ2ljZXJvIHdhcyBhd2FyZSBvZiBoaXMgbW90aW9ucywgYW5kIGtuZXcgdGhhdAogICAgICAgIGhlIGhhZCBwcmV2aW91c2x5IHNlbnQgYSBxdWFudGl0eSBvZiBhcm1zLCBhbmQgbWlsaXRhcnkgZW5zaWducywgYW5kIGVzcGVjaWFsbHkgYSBzaWx2ZXIKICAgICAgICBlYWdsZSB3aGljaCBoZSBoYWQgYmVlbiB1c2VkIHRvIGtlZXAgaW4gaGlzIG93biBob3VzZSB3aXRoIGEgc3VwZXJzdGl0aW91cyByZXZlcmVuY2UsCiAgICAgICAgYmVjYXVzZSBpdCBoYWQgYmVlbiB1c2VkIGJ5IHRoZSBncmVhdCBNYXJpdXMgaW4gaGlzIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgQ2ltYnJpLiBIb3dldmVyLAogICAgICAgIGhlIHRob3VnaHQgaXQgZGVzaXJhYmxlIHRvIGNvdW50ZXJhY3QgdGhlIHN0b3J5IG9mIGhpcyBoYXZpbmcgZ29uZSBpbnRvIGV4aWxlLCBhbmQgdGhlcmVmb3JlCiAgICAgICAgc3VtbW9uZWQgdGhlIHBlb3BsZSBpbnRvIHRoZSBmb3J1bSwgYW5kIG1hZGUgdGhlbSB0aGUgZm9sbG93aW5nIHNwZWVjaC48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPi4gQnV0IHRoZSBzZW5hdGUgaW50ZXJydXB0ZWQgaGltIHdpdGggYSBnZW5lcmFsIG91dGNyeSwKICAgICAgICBjYWxsaW5nIGhpbSB0cmFpdG9yIGFuZCBwYXJyaWNpZGUuIFVwb24gd2hpY2gsIGJlaW5nIHJlbmRlcmVkIGZ1cmlvdXMgYW5kIGRlc3BlcmF0ZSwgaGUKICAgICAgICBkZWNsYXJlZCBhbG91ZCB3aGF0IGhlIGhhZCBiZWZvcmUgc2FpZCB0byBDYXRvLCB0aGF0IHNpbmNlIGhlIHdhcyBjaXJjdW12ZW50ZWQgYW5kIGRyaXZlbgogICAgICAgIGhlYWRsb25nIGJ5IGhpcyBlbmVtaWVzLCBoZSB3b3VsZCBxdWVuY2ggdGhlIGZsYW1lIHdoaWNoIGhpcyBlbmVtaWVzIHdlcmUga2luZGxpbmcgYXJvdW5kCiAgICAgICAgaGltIGluIHRoZSBjb21tb24gcnVpbi4gQW5kIHNvIGhlIHJ1c2hlZCBvdXQgb2YgdGhlIHRlbXBsZS4gT24gaGlzIGFycml2YWwgYXQgaGlzIG93biBob3VzZQogICAgICAgIGhlIGhlbGQgYSBicmllZiBjb25mZXJlbmNlIHdpdGggdGhlIG90aGVyIGNvbnNwaXJhdG9ycywgaW4gd2hpY2ggaXQgd2FzIHJlc29sdmVkIHRoYXQgaGUKICAgICAgICBzaG91bGQgZ28gYXQgb25jZSB0byB0aGUgY2FtcCBvZiBNYW5saXVzLCBhbmQgcmV0dXJuIGFzIHNwZWVkaWx5IGFzIGhlIGNvdWxkIGF0IHRoZSBoZWFkIG9mCiAgICAgICAgdGhlIGFybXkgd2hpY2ggd2FzIHRoZXJlIGF3YWl0aW5nIGhpbS4gQWNjb3JkaW5nbHksIHRoYXQgbmlnaHQgaGUgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gd2l0aCBhIHNtYWxsIHJldGludWUsIGFuZCBtYWRlIHRoZSBiZXN0IG9mIGhpcyB3YXkKICAgICAgICB0b3dhcmRzIEV0cnVyaWEuIEhpcyBmcmllbmRzIGdhdmUgb3V0IHRoYXQgaGUgaGFkIGdvbmUgaW50byB2b2x1bnRhcnkgYmFuaXNobWVudCBhdAogICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+OyBhbmQgc3ByZWFkIHRoYXQgcmVwb3J0IHRocm91Z2ggdGhlCiAgICAgICAgY2l0eSB0aGUgbmV4dCBtb3JuaW5nLCBpbiBvcmRlciB0byBleGNpdGUgb2RpdW0gYWdhaW5zdCBDaWNlcm8sIGFzIGhhdmluZyBkcml2ZW4gaGltIG91dAogICAgICAgIHdpdGhvdXQgYW55IHRyaWFsIG9yIHByb29mIG9mIGhpcyBndWlsdC4gQnV0IENpY2VybyB3YXMgYXdhcmUgb2YgaGlzIG1vdGlvbnMsIGFuZCBrbmV3IHRoYXQKICAgICAgICBoZSBoYWQgcHJldmlvdXNseSBzZW50IGEgcXVhbnRpdHkgb2YgYXJtcywgYW5kIG1pbGl0YXJ5IGVuc2lnbnMsIGFuZCBlc3BlY2lhbGx5IGEgc2lsdmVyCiAgICAgICAgZWFnbGUgd2hpY2ggaGUgaGFkIGJlZW4gdXNlZCB0byBrZWVwIGluIGhpcyBvd24gaG91c2Ugd2l0aCBhIHN1cGVyc3RpdGlvdXMgcmV2ZXJlbmNlLAogICAgICAgIGJlY2F1c2UgaXQgaGFkIGJlZW4gdXNlZCBieSB0aGUgZ3JlYXQgTWFyaXVzIGluIGhpcyBleHBlZGl0aW9uIGFnYWluc3QgdGhlIENpbWJyaS4gSG93ZXZlciwKICAgICAgICBoZSB0aG91Z2h0IGl0IGRlc2lyYWJsZSB0byBjb3VudGVyYWN0IHRoZSBzdG9yeSBvZiBoaXMgaGF2aW5nIGdvbmUgaW50byBleGlsZSwgYW5kIHRoZXJlZm9yZQogICAgICAgIHN1bW1vbmVkIHRoZSBwZW9wbGUgaW50byB0aGUgZm9ydW0sIGFuZCBtYWRlIHRoZW0gdGhlIGZvbGxvd2luZyBzcGVlY2guPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IGxlbmd0aCwgTyBSb21hbnMsIHdlIGhhdmUgZGlzbWlzc2VkIGZyb20gdGhlIGNpdHksIG9yIGRyaXZlbiBvdXQsIG9yLCB3aGVuIGhlIHdhcwogICAgICAgZGVwYXJ0aW5nIG9mIGhpcyBvd24gYWNjb3JkLCB3ZSBoYXZlIHB1cnN1ZWQgd2l0aCB3b3JkcywgTHVjaXVzIENhdGlsaW5lLCBtYWQgd2l0aCBhdWRhY2l0eSwKICAgICAgIGJyZWF0aGluZyB3aWNrZWRuZXNzLCBpbXBpb3VzbHkgcGxhbm5pbmcgbWlzY2hpZWYgdG8gaGlzIGNvdW50cnksIHRocmVhdGVuaW5nIGZpcmUgYW5kIHN3b3JkCiAgICAgICB0byB5b3UgYW5kIHRvIHRoaXMgY2l0eS4gSGUgaXMgZ29uZSwgaGUgaGFzIGRlcGFydGVkLCBoZSBoYXMgZGlzYXBwZWFyZWQsIGhlIGhhcyBydXNoZWQgb3V0LgogICAgICAgTm8gaW5qdXJ5IHdpbGwgbm93IGJlIHByZXBhcmVkIGFnYWluc3QgdGhlc2Ugd2FsbHMgd2l0aGluIHRoZSB3YWxscyB0aGVtc2VsdmVzIGJ5IHRoYXQKICAgICAgIG1vbnN0ZXIgYW5kIHByb2RpZ3kgb2Ygd2lja2VkbmVzcy4gQW5kIHdlIGhhdmUsIHdpdGhvdXQgY29udHJvdmVyc3ksIGRlZmVhdGVkIGhpbSwgdGhlIHNvbGUKICAgICAgIGdlbmVyYWwgb2YgdGhpcyBkb21lc3RpYyB3YXIuIEZvciBub3cgdGhhdCBkYWdnZXIgd2lsbCBubyBsb25nZXIgaG92ZXIgYWJvdXQgb3VyIHNpZGVzOyB3ZQogICAgICAgc2hhbGwgbm90IGJlIGFmcmFpZCBpbiB0aGUgY2FtcHVzLCBpbiB0aGUgZm9ydW0sIGluIHRoZSBzZW5hdGUtaG91c2Us4oCUeWVzLCBhbmQKICAgICAgIHdpdGhpbiBvdXIgb3duIHByaXZhdGUgd2FsbHMsIGhlIHdhcyBtb3ZlZCBmcm9tIGhpcyBwbGFjZSB3aGVuIGhlIHdhcyBkcml2ZW4gZnJvbSB0aGUgY2l0eS4KICAgICAgIE5vdyB3ZSBzaGFsbCBvcGVubHkgY2Fycnkgb24gYSByZWd1bGFyIHdhciB3aXRoIGFuIGVuZW15IHdpdGhvdXQgaGluZHJhbmNlLiBCZXlvbmQgYWxsCiAgICAgICBxdWVzdGlvbiB3ZSBydWluIHRoZSBtYW47IHdlIGhhdmUgZGVmZWF0ZWQgaGltIHNwbGVuZGlkbHkgd2hlbiB3ZSBoYXZlIGRyaXZlbiBoaW0gZnJvbSBzZWNyZXQKICAgICAgIHRyZWFjaGVyeSBpbnRvIG9wZW4gd2FyZmFyZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgaGUgaGFzIG5vdCB0YWtlbiB3aXRoCiAgICAgICBoaW0gaGlzIHN3b3JkIHJlZCB3aXRoIGJsb29kIGFzIGhlIGludHJ1ZGVk4oCUdGhhdCBoZSBoYXMgbGVmdCB1cwogICAgICAgYWxpdmUs4oCUdGhhdCB3ZSB3cmVzdGVkIHRoZSB3ZWFwb24gZnJvbSBoaXMgaGFuZHMs4oCUdGhhdCBoZSBoYXMgbGVmdCB0aGUKICAgICAgIGNpdGl6ZW5zIHNhZmUgYW5kIHRoZSBjaXR5IHN0YW5kaW5nLCB3aGF0IGdyZWF0IGFuZCBvdmVyd2hlbG1pbmcgZ3JpZWYgbXVzdCB5b3UgdGhpbmsgdGhhdAogICAgICAgdGhpcyBpcyB0byBoaW0uIE5vdyBoZSBsaWVzIHByb3N0cmF0ZSwgTyBSb21hbnMsIGFuZCBmZWVscyBoaW1zZWxmIHN0cmlja2VuIGRvd24gYW5kIGFiamVjdCwKICAgICAgIGFuZCBvZnRlbiBjYXN0cyBiYWNrIGhpcyBleWVzIHRvd2FyZHMgdGhpcyBjaXR5LCB3aGljaCBoZSBtb3VybnMgb3ZlciBhcyBzbmF0Y2hlZCBmcm9tIGhpcwogICAgICAgamF3cywgYnV0IHdoaWNoIHNlZW1zIHRvIG1lIHRvIHJlam9pY2UgYXQgaGF2aW5nIHZvbWl0ZWQgZm9ydGggc3VjaCBhIHBlc3QsIGFuZCBjYXN0IGl0IG91dAogICAgICAgb2YgZG9vcnMuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IGhlIGhhcyBub3QgdGFrZW4gd2l0aAogICAgICAgaGltIGhpcyBzd29yZCByZWQgd2l0aCBibG9vZCBhcyBoZSBpbnRydWRlZOKAlHRoYXQgaGUgaGFzIGxlZnQgdXMKICAgICAgIGFsaXZlLOKAlHRoYXQgd2Ugd3Jlc3RlZCB0aGUgd2VhcG9uIGZyb20gaGlzIGhhbmRzLOKAlHRoYXQgaGUgaGFzIGxlZnQgdGhlCiAgICAgICBjaXRpemVucyBzYWZlIGFuZCB0aGUgY2l0eSBzdGFuZGluZywgd2hhdCBncmVhdCBhbmQgb3ZlcndoZWxtaW5nIGdyaWVmIG11c3QgeW91IHRoaW5rIHRoYXQKICAgICAgIHRoaXMgaXMgdG8gaGltLiBOb3cgaGUgbGllcyBwcm9zdHJhdGUsIE8gUm9tYW5zLCBhbmQgZmVlbHMgaGltc2VsZiBzdHJpY2tlbiBkb3duIGFuZCBhYmplY3QsCiAgICAgICBhbmQgb2Z0ZW4gY2FzdHMgYmFjayBoaXMgZXllcyB0b3dhcmRzIHRoaXMgY2l0eSwgd2hpY2ggaGUgbW91cm5zIG92ZXIgYXMgc25hdGNoZWQgZnJvbSBoaXMKICAgICAgIGphd3MsIGJ1dCB3aGljaCBzZWVtcyB0byBtZSB0byByZWpvaWNlIGF0IGhhdmluZyB2b21pdGVkIGZvcnRoIHN1Y2ggYSBwZXN0LCBhbmQgY2FzdCBpdCBvdXQKICAgICAgIG9mIGRvb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIHRoZXJlIGJlIGFueSBvbmUgb2YgdGhhdCBkaXNwb3NpdGlvbiB3aGljaCBhbGwgbWVuIHNob3VsZCBoYXZlLCB3aG8geWV0IGJsYW1lcyBtZQogICAgICAgZ3JlYXRseSBmb3IgdGhlIHZlcnkgdGhpbmcgaW4gd2hpY2ggbXkgc3BlZWNoIGV4dWx0cyBhbmQgdHJpdW1waHMs4oCUbmFtZWx5LCB0aGF0IEkKICAgICAgIGRpZCBub3QgYXJyZXN0IHNvIGNhcGl0YWwgbW9ydGFsIGFuIGVuZW15IHJhdGhlciB0aGFuIGxldCBoaW0gZ28s4oCUdGhhdCBpcyBub3QgbXkKICAgICAgIGZhdWx0LCBPIGNpdGl6ZW5zLCBidXQgdGhlIGZhdWx0IG9mIHRoZSB0aW1lcy4gTHVjaXVzIENhdGlsaW5lIG91Z2h0IHRvIGhhdmUgYmVlbiB2aXNpdGVkCiAgICAgICB3aXRoIHRoZSBzZXZlcmVzdCBwdW5pc2htZW50LCBhbmQgdG8gaGF2ZSBiZWVuIHB1dCB0byBkZWF0aCBsb25nIHNpbmNlOyBhbmQgYm90aCB0aGUgY3VzdG9tcwogICAgICAgb2Ygb3VyIGFuY2VzdG9ycywgYW5kIHRoZSByaWdvdXIgb2YgbXkgb2ZmaWNlLCBhbmQgdGhlIHJlcHVibGljLCBkZW1hbmRlZCB0aGlzIG9mIG1lOyBidXQgaG93CiAgICAgICBtYW55LCB0aGluayB5b3UsIHdlcmUgdGhlcmUgd2hvIGRpZCBub3QgYmVsaWV2ZSB3aGF0IEkgcmVwb3J0ZWQ/IGhvdyBtYW55IHdobyBvdXQgb2YKICAgICAgIHN0dXBpZGl0eSBkaWQgbm90IHRoaW5rIHNvPyBob3cgbWFueSB3aG8gZXZlbiBkZWZlbmRlZCBoaW0s4oCUaG93IG1hbnkgd2hvLCBvdXQgb2YKICAgICAgIHRoZWlyIG93biBkZXByYXZpdHksIGZhdm91cmVkIGhpbT8gSWYsIGluIHRydXRoLCBJIGhhZCB0aG91Z2h0IHRoYXQsIGlmIGhlIHdlcmUgcmVtb3ZlZCwgYWxsCiAgICAgICBkYW5nZXIgd291bGQgaGUgcmVtb3ZlZCBmcm9tIHlvdSwgSSB3b3VsZCBsb25nIHNpbmNlIGhhdmUgY3V0IG9mZiBMdWNpdXMgQ2F0aWxpbmUsIGhhZCBpdAogICAgICAgYmVlbiBhdCB0aGUgcmlzaywgbm90IG9ubHkgb2YgbXkgcG9wdWxhcml0eSwgYnV0IGV2ZW4gb2YgbXkgbGlmZS4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgSSBzYXcgdGhhdCwgc2luY2UgdGhlIG1hdHRlciB3YXMgbm90IGV2ZW4gdGhlbgogICAgICAgcHJvdmVkIHRvIGFsbCBvZiB5b3UsIGlmIEkgaGFkIHB1bmlzaGVkIGhpbSB3aXRoIGRlYXRoLCBhcyBoZSBoYWQgZGVzZXJ2ZWQsIEkgc2hvdWxkIGJlIGJvcm5lCiAgICAgICBkb3duIGJ5IHVucG9wdWxhcml0eSwgYW5kIHNvIGJlIHVuYWJsZSB0byBmb2xsb3cgdXAgaGlzIGFjY29tcGxpY2VzLCBJIGJyb3VnaHQgdGhlIGJ1c2luZXNzCiAgICAgICBvbiB0byB0aGlzIHBvaW50IHRoYXQgeW91IG1pZ2h0IGJlIGFibGUgdG8gY29tYmF0IG9wZW5seSB3aGVuIHlvdSBzYXcgdGhlIGVuZW15IHdpdGhvdXQKICAgICAgIGRpc2d1aXNlLiBCdXQgaG93IGV4Y2VlZGluZ2x5IEkgdGhpbmsgdGhpcyBlbmVteSB0byBiZSBmZWFyZWQgbm93IHRoYXQgaGUgaXMgb3V0IG9mIGRvb3JzLAogICAgICAgeW91IG1heSBzZWUgZnJvbSB0aGlz4oCUdGhhdCBJIGFtIHZleGVkIGV2ZW4gdGhhdCBiZSBoYXMgZ29uZSBmcm9tIHRoZSBjaXR5IHdpdGggYnV0CiAgICAgICBhIHNtYWxsIHJldGludWUuIEkgd2lzaCBoZSBoYWQgdGFrZW4gd2l0aCBoaW0gYWxsIGhpcyBmb3JjZXMuIEhlIGhhcyB0YWtlbiB3aXRoIGhpbQogICAgICAgVG9uZ2lsbHVzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gc2FpZCB0byBoYXZlIGEgY3JpbWluYWwgaW50aW1hY3ksIGFuZCBQdWJsaWNpdXMsIGFuZAogICAgICAgTXVuYXRpdXMsIHdob3NlIGRlYnRzIGNvbnRyYWN0ZWQgaW4gdGF2ZXJucyBjb3VsZCBjYXVzZSBubyBncmVhdCBkaXNxdWlldHVkZSB0byB0aGUgcmVwdWJsaWMuCiAgICAgICBIZSBoYXMgbGVmdCBiZWhpbmQgaGltIG90aGVyc+KAlHlvdSBhbGwga25vdyB3aGF0IG1lbiB0aGV5IGFyZSwgaG93IG92ZXJ3aGVsbWVkIHdpdGgKICAgICAgIGRlYnQsIGhvdyBwb3dlcmZ1bCwgaG93IG5vYmxlLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgSSBzYXcgdGhhdCwgc2luY2UgdGhlIG1hdHRlciB3YXMgbm90IGV2ZW4gdGhlbgogICAgICAgcHJvdmVkIHRvIGFsbCBvZiB5b3UsIGlmIEkgaGFkIHB1bmlzaGVkIGhpbSB3aXRoIGRlYXRoLCBhcyBoZSBoYWQgZGVzZXJ2ZWQsIEkgc2hvdWxkIGJlIGJvcm5lCiAgICAgICBkb3duIGJ5IHVucG9wdWxhcml0eSwgYW5kIHNvIGJlIHVuYWJsZSB0byBmb2xsb3cgdXAgaGlzIGFjY29tcGxpY2VzLCBJIGJyb3VnaHQgdGhlIGJ1c2luZXNzCiAgICAgICBvbiB0byB0aGlzIHBvaW50IHRoYXQgeW91IG1pZ2h0IGJlIGFibGUgdG8gY29tYmF0IG9wZW5seSB3aGVuIHlvdSBzYXcgdGhlIGVuZW15IHdpdGhvdXQKICAgICAgIGRpc2d1aXNlLiBCdXQgaG93IGV4Y2VlZGluZ2x5IEkgdGhpbmsgdGhpcyBlbmVteSB0byBiZSBmZWFyZWQgbm93IHRoYXQgaGUgaXMgb3V0IG9mIGRvb3JzLAogICAgICAgeW91IG1heSBzZWUgZnJvbSB0aGlz4oCUdGhhdCBJIGFtIHZleGVkIGV2ZW4gdGhhdCBiZSBoYXMgZ29uZSBmcm9tIHRoZSBjaXR5IHdpdGggYnV0CiAgICAgICBhIHNtYWxsIHJldGludWUuIEkgd2lzaCBoZSBoYWQgdGFrZW4gd2l0aCBoaW0gYWxsIGhpcyBmb3JjZXMuIEhlIGhhcyB0YWtlbiB3aXRoIGhpbQogICAgICAgVG9uZ2lsbHVzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gc2FpZCB0byBoYXZlIGEgY3JpbWluYWwgaW50aW1hY3ksIGFuZCBQdWJsaWNpdXMsIGFuZAogICAgICAgTXVuYXRpdXMsIHdob3NlIGRlYnRzIGNvbnRyYWN0ZWQgaW4gdGF2ZXJucyBjb3VsZCBjYXVzZSBubyBncmVhdCBkaXNxdWlldHVkZSB0byB0aGUgcmVwdWJsaWMuCiAgICAgICBIZSBoYXMgbGVmdCBiZWhpbmQgaGltIG90aGVyc+KAlHlvdSBhbGwga25vdyB3aGF0IG1lbiB0aGV5IGFyZSwgaG93IG92ZXJ3aGVsbWVkIHdpdGgKICAgICAgIGRlYnQsIGhvdyBwb3dlcmZ1bCwgaG93IG5vYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCB3aXRoIG91ciBHYWxsaWMgbGVnaW9ucywgYW5kIHdpdGggdGhlIGxldmllcyB3aGljaCBRdWludHVzIE1ldGVsbHVzIGhhcyByYWlzZWQKICAgICAgIGluIHRoZSBQaWNlbmlhbiBhbmQgR2FsbGljIHRlcnJpdG9yeSwgYW5kIHdpdGggdGhlc2UgdHJvb3BzIHdoaWNoIGFyZSBldmVyeSBkYXkgYmVpbmcgZ290CiAgICAgICByZWFkeSBieSB1cywgSSB0aG9yb3VnaGx5IGRlc3Bpc2UgdGhhdCBhcm15IGNvbXBvc2VkIG9mIGRlc3BlcmF0ZSBvbGQgbWVuLCBvZiBjbG93bmlzaAogICAgICAgcHJvZmxpZ2F0ZXMsIGFuZCB1bmVkdWNhdGVkIHNwZW5kdGhyaWZ0czsgb2YgdGhvc2Ugd2hvIGhhdmUgcHJlZmVycmVkIHRvIGRlc2VydCB0aGVpciBiYWlsCiAgICAgICByYXRoZXIgdGhhbiB0aGF0IGFybXksIGFuZCB3aGljaCB3aWxsIGZhbGwgdG8gcGllY2VzIGlmIEkgc2hvdyB0aGVtIG5vdCB0aGUgYmF0dGxlIGFycmF5IG9mCiAgICAgICBvdXIgYXJteSwgYnV0IGFuIGVkaWN0IG9mIHRoZSBwcmFldG9yLiBJIHdpc2ggaGUgaGFkIHRha2VuIHdpdGggaGltIHRob3NlIHNvbGRpZXJzIG9mIGhpcywKICAgICAgIHdob20gSSBzZWUgaG92ZXJpbmcgYWJvdXQgdGhlIGZvcnVtLCBzdGFuZGluZyBhYm91dCB0aGUgc2VuYXRlLWhvdXNlLCBldmVuIGNvbWluZyBpbnRvIHRoZQogICAgICAgc2VuYXRlLCB3aG8gc2hpbmUgd2l0aCBvaW50bWVudCwgd2hvIGdsaXR0ZXIgaW4gcHVycGxlOyBhbmQgaWYgdGhleSByZW1haW4gaGVyZSwgcmVtZW1iZXIKICAgICAgIHRoYXQgdGhhdCBhcm15IGlzIG5vdCBzbyBtdWNoIHRvIGJlIGZlYXJlZCBieSB1cyBhcyB0aGVzZSBtZW4gd2hvIGhhdmUgZGVzZXJ0ZWQgdGhlIGFybXkuIEFuZAogICAgICAgdGhleSBhcmUgdGhlIG1vcmUgdG8gYmUgZmVhcmVkLCBiZWNhdXNlIHRoZXkgYXJlIGF3YXJlIHRoYXQgSSBrbm93IHdoYXQgdGhleSBhcmUgdGhpbmtpbmcgb2YKICAgICAgIGFuZCB5ZXQgdGhleSBhcmUgbm90IGluZmx1ZW5jZWQgYnkgaXQuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBrbm93IHRvIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzODAiIGtleT0idGduLDcwMTAzODAiPkFwdWxpYTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBhbGxvdHRlZCwgd2hvIGhhcyBFdHJ1cmlhLCB3aG8gdGhlIFBpY2VuaWFuIHRlcnJpdG9yeSwgd2hvIHRoZQogICAgICAgR2FsbGljIGRpc3RyaWN0LCB3aG8gaGFzIGJlZ2dlZCBmb3IgaGltc2VsZiB0aGUgb2ZmaWNlIG9mIHNwcmVhZGluZyBmaXJlIGFuZCBzd29yZCBieSBuaWdodAogICAgICAgdGhyb3VnaCB0aGUgY2l0eS4gVGhleSBrbm93IHRoYXQgYWxsIHRoZSBwbGFucyBvZiB0aGUgcHJlY2VkaW5nIG5pZ2h0IGFyZSBicm91Z2h0IHRvIG1lLiBJCiAgICAgICBsYWlkIHRoZW0gYmVmb3JlIHRoZSBzZW5hdGUgeWVzdGVyZGF5LiBDYXRpbGluZSBoaW1zZWxmIHdhcyBhbGFybWVkLCBhbmQgZmxlZC4gV2h5IGRvIHRoZXNlCiAgICAgICBtZW4gd2FpdD8gVmVyaWx5LCB0aGV5IGFyZSBncmVhdGx5IG1pc3Rha2VuIGlmIHRoZXkgdGhpbmsgdGhhdCBmb3JtZXIgbGVuaXR5IG9mIG1pbmUgd2lsbAogICAgICAgbGFzdCBmb3JldmVyLiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBJIGtub3cgdG8gd2hvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzgwIj5BcHVsaWE8L3BsYWNlTmFtZT4gaGFzIGJlZW4gYWxsb3R0ZWQsIHdobyBoYXMgRXRydXJpYSwgd2hvIHRoZSBQaWNlbmlhbiB0ZXJyaXRvcnksIHdobyB0aGUKICAgICAgIEdhbGxpYyBkaXN0cmljdCwgd2hvIGhhcyBiZWdnZWQgZm9yIGhpbXNlbGYgdGhlIG9mZmljZSBvZiBzcHJlYWRpbmcgZmlyZSBhbmQgc3dvcmQgYnkgbmlnaHQKICAgICAgIHRocm91Z2ggdGhlIGNpdHkuIFRoZXkga25vdyB0aGF0IGFsbCB0aGUgcGxhbnMgb2YgdGhlIHByZWNlZGluZyBuaWdodCBhcmUgYnJvdWdodCB0byBtZS4gSQogICAgICAgbGFpZCB0aGVtIGJlZm9yZSB0aGUgc2VuYXRlIHllc3RlcmRheS4gQ2F0aWxpbmUgaGltc2VsZiB3YXMgYWxhcm1lZCwgYW5kIGZsZWQuIFdoeSBkbyB0aGVzZQogICAgICAgbWVuIHdhaXQ/IFZlcmlseSwgdGhleSBhcmUgZ3JlYXRseSBtaXN0YWtlbiBpZiB0aGV5IHRoaW5rIHRoYXQgZm9ybWVyIGxlbml0eSBvZiBtaW5lIHdpbGwKICAgICAgIGxhc3QgZm9yZXZlci4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBJIGhhdmUgYmVlbiB3YWl0aW5nIGZvciwgdGhhdCBJIGhhdmUgZ2FpbmVkLOKAlG5hbWVseSwgdGhhdCB5b3Ugc2hvdWxkIGFsbCBzZWUKICAgICAgIHRoYXQgYSBjb25zcGlyYWN5IGhhcyBiZWVuIG9wZW5seSBmb3JtZWQgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IHVubGVzcywgaW5kZWVkLCB0aGVyZSBiZSBhbnkKICAgICAgIG9uZSB3aG8gdGhpbmtzIHRoYXQgdGhvc2Ugd2hvIGFyZSBsaWtlIENhdGlsaW5lIGRvIG5vdCBhZ3JlZSB3aXRoIENhdGlsaW5lLiBUaGVyZSBpcyBub3QgYW55CiAgICAgICBsb25nZXIgcm9vbSBmb3IgbGVuaXR5OyB0aGUgYnVzaW5lc3MgaXRzZWxmIGRlbWFuZHMgc2V2ZXJpdHkuIE9uZSB0aGluZywgZXZlbiBub3csIEkgd2lsbAogICAgICAgZ3JhbnQs4oCUbGV0IHRoZW0gZGVwYXJ0LCBsZXQgdGhlbSBiZSBnb25lLiBMZXQgdGhlbSBub3Qgc3VmZmVyIHRoZSB1bmhhcHB5IENhdGlsaW5lCiAgICAgICB0byBwaW5lIGF3YXkgZm9yIHdhbnQgb2YgdGhlbS4gSSB3aWxsIHRlbGwgdGhlbSB0aGUgcm9hZC4gSGUgd2VudCBieSB0aGUgQXVyZWxpYW4gcm9hZC4gSWYKICAgICAgIHRoZXkgbWFrZSBoYXN0ZSwgdGhleSB3aWxsIGNhdGNoIGhpbSBieSB0aGUgZXZlbmluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+TyBoYXBweQogICAgICAgcmVwdWJsaWMsIGlmIGl0IGNhbiBjYXN0IGZvcnRoIHRoZXNlIGRyZWdzIG9mIHRoZSByZXB1YmxpYyEgRXZlbiBub3csIHdoZW4gQ2F0aWxpbmUgYWxvbmUgaXMKICAgICAgIGdvdCByaWQgb2Y7IHRoZSByZXB1YmxpYyBzZWVtcyB0byBtZSByZWxpZXZlZCBhbmQgcmVmcmVzaGVkOyBmb3Igd2hhdCBldmlsIG9yIHdpY2tlZG5lc3MgY2FuCiAgICAgICBiZSBkZXZpc2VkIG9yIGltYWdpbmVkIHdoaWNoIGhlIGRpZCBub3QgY29uY2VpdmU/IFdoYXQgcHJpc29uZXIsIHdoYXQgZ2xhZGlhdG9yLCB3aGF0IHRoaWVmOwogICAgICAgd2hhdCBhc3Nhc3Npbiwgd2hhdCBwYXJyaWNpZGUsIHdoYXQgZm9yZ2VyIG9mIHdpbGxzLCB3aGF0IGNoZWF0LCB3aGF0IGRlYmF1Y2hlZSwgd2hhdAogICAgICAgc3BlbmR0aHJpZnQsIHdoYXQgYWR1bHRlcmVyLCB3aGF0IGFiYW5kb25lZCB3b21hbiwgd2hhdCBjb3JydXB0ZXIgb2YgeW91dGgsIHdoYXQgcHJvZmxpZ2F0ZSwKICAgICAgIHdoYXQgc2NvdW5kcmVsIGNhbiBiZSBmb3VuZCBpbiBhbGwgSXRhbHksIHdobyBkb2VzIG5vdCBhdm93IHRoYXQgaGUgaGFzIGJlZW4gb24gdGVybXMgb2YKICAgICAgIGludGltYWN5IHdpdGggQ2F0aWxpbmU/IFdoYXQgbXVyZGVyIGhhcyBiZWVuIGNvbW1pdHRlZCBmb3IgeWVhcnMgd2l0aG91dCBoaW0/IFdoYXQgbmVmYXJpb3VzCiAgICAgICBhY3Qgb2YgaW5mYW15IHRoYXQgaGFzIG5vdCBiZWVuIGRvbmUgYnkgaGltPyA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk8gaGFwcHkKICAgICAgIHJlcHVibGljLCBpZiBpdCBjYW4gY2FzdCBmb3J0aCB0aGVzZSBkcmVncyBvZiB0aGUgcmVwdWJsaWMhIEV2ZW4gbm93LCB3aGVuIENhdGlsaW5lIGFsb25lIGlzCiAgICAgICBnb3QgcmlkIG9mOyB0aGUgcmVwdWJsaWMgc2VlbXMgdG8gbWUgcmVsaWV2ZWQgYW5kIHJlZnJlc2hlZDsgZm9yIHdoYXQgZXZpbCBvciB3aWNrZWRuZXNzIGNhbgogICAgICAgYmUgZGV2aXNlZCBvciBpbWFnaW5lZCB3aGljaCBoZSBkaWQgbm90IGNvbmNlaXZlPyBXaGF0IHByaXNvbmVyLCB3aGF0IGdsYWRpYXRvciwgd2hhdCB0aGllZjsKICAgICAgIHdoYXQgYXNzYXNzaW4sIHdoYXQgcGFycmljaWRlLCB3aGF0IGZvcmdlciBvZiB3aWxscywgd2hhdCBjaGVhdCwgd2hhdCBkZWJhdWNoZWUsIHdoYXQKICAgICAgIHNwZW5kdGhyaWZ0LCB3aGF0IGFkdWx0ZXJlciwgd2hhdCBhYmFuZG9uZWQgd29tYW4sIHdoYXQgY29ycnVwdGVyIG9mIHlvdXRoLCB3aGF0IHByb2ZsaWdhdGUsCiAgICAgICB3aGF0IHNjb3VuZHJlbCBjYW4gYmUgZm91bmQgaW4gYWxsIEl0YWx5LCB3aG8gZG9lcyBub3QgYXZvdyB0aGF0IGhlIGhhcyBiZWVuIG9uIHRlcm1zIG9mCiAgICAgICBpbnRpbWFjeSB3aXRoIENhdGlsaW5lPyBXaGF0IG11cmRlciBoYXMgYmVlbiBjb21taXR0ZWQgZm9yIHllYXJzIHdpdGhvdXQgaGltPyBXaGF0IG5lZmFyaW91cwogICAgICAgYWN0IG9mIGluZmFteSB0aGF0IGhhcyBub3QgYmVlbiBkb25lIGJ5IGhpbT8gPC90cmFuc2xhdGlvbj4="
translation['2.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpbiB3aGF0IG90aGVyIG1hbiB3ZXJlIHRoZXJlIGV2ZXIgc28gbWFueSBhbGx1cmVtZW50cyBmb3IgeW91dGggYXMgaW4gaGltLCB3aG8gYm90aAogICAgICAgaW5kdWxnZWQgaW4gaW5mYW1vdXMgbG92ZSBmb3Igb3RoZXJzLCBhbmQgZW5jb3VyYWdlZCB0aGVpciBpbmZhbW91cyBhZmZlY3Rpb25zIGZvciBoaW1zZWxmLAogICAgICAgcHJvbWlzaW5nIHRvIHNvbWUgZW5qb3ltZW50IG9mIHRoZWlyIGx1c3QsIHRvIG90aGVycyB0aGUgZGVhdGggb2YgdGhlaXIgcGFyZW50cywgYW5kIG5vdCBvbmx5CiAgICAgICBpbnN0aWdhdGluZyB0aGVtIHRvIGluaXF1aXR5LCBidXQgZXZlbiBhc3Npc3RpbmcgdGhlbSBpbiBpdC4gQnV0IG5vdywgaG93IHN1ZGRlbmx5IGhhZCBoZQogICAgICAgY29sbGVjdGVkLCBub3Qgb25seSBvdXQgb2YgdGhlIGNpdHksIGJ1dCBldmVuIG91dCBvZiB0aGUgY291bnRyeSwgYSBudW1iZXIgb2YgYWJhbmRvbmVkIG1lbj8KICAgICAgIE5vIG9uZSwgbm90IG9ubHkgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBidXQgaW4gZXZlcnkgY29ybmVyIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGRlYnQgd2hvbSBoZSBkaWQgbm90CiAgICAgICBlbmxpc3QgaW4gdGhpcyBpbmNyZWRpYmxlIGFzc29jaWF0aW9uIG9mIHdpY2tlZG5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYnV0IGluIGV2ZXJ5IGNvcm5lciBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCB3YXMgb3ZlcndoZWxtZWQgd2l0aCBkZWJ0IHdob20gaGUgZGlkIG5vdAogICAgICAgZW5saXN0IGluIHRoaXMgaW5jcmVkaWJsZSBhc3NvY2lhdGlvbiBvZiB3aWNrZWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kLCB0aGF0IHlvdSBtYXkgdW5kZXJzdGFuZCB0aGUgZGl2ZXJzaXR5IG9mIGhpcyBwdXJzdWl0cyBhbmQgdGhlIHZhcmlldHkgb2YgaGlzIGRlc2lnbnMsCiAgICAgICB0aGVyZSB3YXMgbm8gb25lIGluIGFueSBzY2hvb2wgb2YgZ2xhZGlhdG9ycywgYXQgYWxsIGluY2xpbmVkIHRvIGF1ZGFjaXR5LCB3aG8gZG9lcyBub3QgYXZvdwogICAgICAgaGltc2VsZiB0byBiZSBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgQ2F0aWxpbmUs4oCUbm8gb25lIG9uIHRoZSBzdGFnZSwgYXQgYWxsIG9mIGEKICAgICAgIGZpY2tsZSBhbmQgd29ydGhsZXNzIGRpc3Bvc2l0aW9uLCB3aG8gZG9lcyBub3QgcHJvZmVzcyBoaW1zZWxmIGhpcyBjb21wYW5pb24uIEFuZCBoZSwgdHJhaW5lZAogICAgICAgaW4gdGhlIHByYWN0aWNlIG9mIGluc3VsdCBhbmQgd2lja2VkbmVzcywgaW4gZW5kdXJpbmcgY29sZCwgYW5kIGh1bmdlciwgYW5kIHRoaXJzdCwgYW5kCiAgICAgICB3YXRjaGluZywgd2FzIGNhbGxlZCBhIGJyYXZlIG1hbiBieSB0aG9zZSBmZWxsb3dzLCB3aGlsZSBhbGwgdGhlIGFwcGxpYW5jZXMgb2YgaW5kdXN0cnkgYW5kCiAgICAgICBpbnN0cnVtZW50cyBvZiB2aXJ0dWUgd2VyZSBkZXZvdGVkIHRvIGx1c3QgYW5kIGF0cm9jaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaWYgaGlzIGNvbXBhbmlvbnMgZm9sbG93IGhpbSzigJRpZiB0aGUgaW5mYW1vdXMgaGVyZCBvZiBkZXNwZXJhdGUgbWVuIGRlcGFydAogICAgICAgZnJvbSB0aGUgY2l0eSwgTyBoYXBweSBzaGFsbCB3ZSBiZSwgZm9ydHVuYXRlIHdpbGwgYmUgdGhlIHJlcHVibGljLCBpbGx1c3RyaW91cyB3aWxsIGJlIHRoZQogICAgICAgcmVub3duIG9mIG15IGNvbnN1bHNoaXAuIEZvciB0aGVpcnMgaXMgbm8gb3JkaW5hcnkgaW5zb2xlbmNlLOKAlG5vIGNvbW1vbiBhbmQKICAgICAgIGVuZHVyYWJsZSBhdWRhY2l0eS4gVGhleSB0aGluayBvZiBub3RoaW5nIGJ1dCBzbGF1Z2h0ZXIsIGNvbmZsYWdyYXRpb24sIGFuZCByYXBpbmUuIFRoZXkgaGF2ZQogICAgICAgZGlzc2lwYXRlZCB0aGVpciBwYXRyaW1vbmllcywgdGhleSBoYXZlIHNxdWFuZGVyZWQgdGhlaXIgZm9ydHVuZXMuIE1vbmV5IGhhcyBsb25nIGZhaWxlZAogICAgICAgdGhlbSwgYW5kIG5vdyBjcmVkaXQgYmVnaW5zIHRvIGZhaWw7IGJ1dCB0aGUgc2FtZSBkZXNpcmVzIHJlbWFpbiB3aGljaCB0aGV5IGhhZCBpbiB0aGVpciB0aW1lCiAgICAgICBvZiBhYnVuZGFuY2UuIEJ1dCBpZiBpbiB0aGVpciBkcmlua2luZyBhbmQgZ2FtYmxpbmcgcGFydGllcyB0aGV5IHdlcmUgY29udGVudCB3aXRoIGZlYXN0cyBhbmQKICAgICAgIGhhcmxvdHMsIHRoZXkgd291bGQgYmUgaW4gYSBob3BlbGVzcyBzdGF0ZSBpbmRlZWQ7IGJ1dCB5ZXQgdGhleSBtaWdodCBiZSBlbmR1cmVkLiBCdXQgd2hvIGNhbgogICAgICAgYmVhciB0aGlzLOKAlHRoYXQgaW5kb2xlbnQgbWVuIHNob3VsZCBwbG90IGFnYWluc3QgdGhlIGJyYXZlc3Qs4oCUZHJ1bmthcmRzCiAgICAgICBhZ2FpbnN0IHRoZSBzb2JlcizigJRtZW4gYXNsZWVwIGFnYWluc3QgbWVuIGF3YWtlLOKAlG1lbiBseWluZyBhdCBmZWFzdHMsCiAgICAgICBlbWJyYWNpbmcgYWJhbmRvbmVkIHdvbWVuLCBsYW5ndWlkIHdpdGggd2luZSwgY3JhbW1lZCB3aXRoIGZvb2QsIGNyb3duZWQgd2l0aCBjaGFwbGV0cywKICAgICAgIHJlZWtpbmcgd2l0aCBvaW50bWVudHMsIHdvcm4gb3V0IHdpdGggbHVzdCwgYmVsY2ggb3V0IGluIHRoZWlyIGRpc2NvdXJzZSB0aGUgbXVyZGVyIG9mIGFsbAogICAgICAgZ29vZCBtZW4sIGFuZCB0aGUgY29uZmxhZ3JhdGlvbiBvZiB0aGUgY2l0eT8gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgSSBhbSBjb25maWRlbnQgdGhhdCBzb21lIGZhdGUgaXMgaGFuZ2luZyBvdmVyIHRoZXNlCiAgICAgICBtZW47IGFuZCB0aGF0IHRoZSBwdW5pc2htZW50IGxvbmcgc2luY2UgZHVlIHRvIHRoZWlyIGluaXF1aXR5LCBhbmQgd29ydGhsZXNzbmVzcywgYW5kCiAgICAgICB3aWNrZWRuZXNzLCBhbmQgbHVzdCwgaXMgZWl0aGVyIHZpc2libHkgYXQgaGFuZCBvciBhdCBsZWFzdCByYXBpZGx5IGFwcHJvYWNoaW5nLiBBbmQgaWYgbXkKICAgICAgIGNvbnN1bHNoaXAgc2hhbGwgaGF2ZSByZW1vdmVkLCBzaW5jZSBpdCBjYW5ub3QgY3VyZSB0aGVtLCBpdCB3aWxsIGhhdmUgYWRkZWQsIG5vdCBzb21lIGJyaWVmCiAgICAgICBzcGFuLCBidXQgbWFueSBhZ2VzIG9mIGV4aXN0ZW5jZSB0byB0aGUgcmVwdWJsaWMuIEZvciB0aGVyZSBpcyBubyBuYXRpb24gZm9yIHVzIHRvCiAgICAgICBmZWFyLOKAlG5vIGtpbmcgd2hvIGNhbiBtYWtlIHdhciBvbiB0aGUgUm9tYW4gcGVvcGxlLiBBbGwgZm9yZWlnbiBhZmZhaXJzIGFyZQogICAgICAgdHJhbnF1aWxpemVkLCBib3RoIGJ5IGxhbmQgYW5kIHNlYSwgYnkgdGhlIHZhbG91ciBvZiBvbmUgbWFuLiBEb21lc3RpYyB3YXIgYWxvbmUgcmVtYWlucy4gVGhlCiAgICAgICBvbmx5IHBsb3RzIGFnYWluc3QgdXMgYXJlIHdpdGhpbiBvdXIgb3duIHdhbGxzLOKAlHRoZSBkYW5nZXIgaXMgd2l0aGluLOKAlHRoZQogICAgICAgZW5lbXkgaXMgd2l0aGluLiBXZSBtdXN0IHdhciB3aXRoIGx1eHVyeSwgd2l0aCBtYWRuZXNzLCB3aXRoIHdpY2tlZG5lc3MuIEZvciB0aGlzIHdhciwgTwogICAgICAgY2l0aXplbnMsIEkgb2ZmZXIgbXlzZWxmIGFzIHRoZSBnZW5lcmFsLiBJIHRha2Ugb24gbXlzZWxmIHRoZSBlbm1pdHkgb2YgcHJvZmxpZ2F0ZSBtZW4uIFdoYXQKICAgICAgIGNhbiBiZSBjdXJlZCwgSSB3aWxsIGN1cmUsIGJ5IHdoYXRldmVyIG1lYW5zIGl0IG1heSBiZSBwb3NzaWJsZS4gV2hhdCBtdXN0IGJlIGN1dCBhd2F5LCBJCiAgICAgICB3aWxsIG5vdCBzdWZmZXIgdG8gc3ByZWFkLCB0byB0aGUgcnVpbiBvZiB0aGUgcmVwdWJsaWMuIExldCB0aGVtIGRlcGFydCwgb3IgbGV0IHRoZW0gc3RheQogICAgICAgcXVpZXQ7IG9yIGlmIHRoZXkgcmVtYWluIGluIHRoZSBjaXR5IGFuZCBpbiB0aGUgc2FtZSBkaXNwb3NpdGlvbiBhcyBhdCBwcmVzZW50LCBsZXQgdGhlbQogICAgICAgZXhwZWN0IHdoYXQgdGhleSBkZXNlcnZlLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgYW0gY29uZmlkZW50IHRoYXQgc29tZSBmYXRlIGlzIGhhbmdpbmcgb3ZlciB0aGVzZQogICAgICAgbWVuOyBhbmQgdGhhdCB0aGUgcHVuaXNobWVudCBsb25nIHNpbmNlIGR1ZSB0byB0aGVpciBpbmlxdWl0eSwgYW5kIHdvcnRobGVzc25lc3MsIGFuZAogICAgICAgd2lja2VkbmVzcywgYW5kIGx1c3QsIGlzIGVpdGhlciB2aXNpYmx5IGF0IGhhbmQgb3IgYXQgbGVhc3QgcmFwaWRseSBhcHByb2FjaGluZy4gQW5kIGlmIG15CiAgICAgICBjb25zdWxzaGlwIHNoYWxsIGhhdmUgcmVtb3ZlZCwgc2luY2UgaXQgY2Fubm90IGN1cmUgdGhlbSwgaXQgd2lsbCBoYXZlIGFkZGVkLCBub3Qgc29tZSBicmllZgogICAgICAgc3BhbiwgYnV0IG1hbnkgYWdlcyBvZiBleGlzdGVuY2UgdG8gdGhlIHJlcHVibGljLiBGb3IgdGhlcmUgaXMgbm8gbmF0aW9uIGZvciB1cyB0bwogICAgICAgZmVhcizigJRubyBraW5nIHdobyBjYW4gbWFrZSB3YXIgb24gdGhlIFJvbWFuIHBlb3BsZS4gQWxsIGZvcmVpZ24gYWZmYWlycyBhcmUKICAgICAgIHRyYW5xdWlsaXplZCwgYm90aCBieSBsYW5kIGFuZCBzZWEsIGJ5IHRoZSB2YWxvdXIgb2Ygb25lIG1hbi4gRG9tZXN0aWMgd2FyIGFsb25lIHJlbWFpbnMuIFRoZQogICAgICAgb25seSBwbG90cyBhZ2FpbnN0IHVzIGFyZSB3aXRoaW4gb3VyIG93biB3YWxscyzigJR0aGUgZGFuZ2VyIGlzIHdpdGhpbizigJR0aGUKICAgICAgIGVuZW15IGlzIHdpdGhpbi4gV2UgbXVzdCB3YXIgd2l0aCBsdXh1cnksIHdpdGggbWFkbmVzcywgd2l0aCB3aWNrZWRuZXNzLiBGb3IgdGhpcyB3YXIsIE8KICAgICAgIGNpdGl6ZW5zLCBJIG9mZmVyIG15c2VsZiBhcyB0aGUgZ2VuZXJhbC4gSSB0YWtlIG9uIG15c2VsZiB0aGUgZW5taXR5IG9mIHByb2ZsaWdhdGUgbWVuLiBXaGF0CiAgICAgICBjYW4gYmUgY3VyZWQsIEkgd2lsbCBjdXJlLCBieSB3aGF0ZXZlciBtZWFucyBpdCBtYXkgYmUgcG9zc2libGUuIFdoYXQgbXVzdCBiZSBjdXQgYXdheSwgSQogICAgICAgd2lsbCBub3Qgc3VmZmVyIHRvIHNwcmVhZCwgdG8gdGhlIHJ1aW4gb2YgdGhlIHJlcHVibGljLiBMZXQgdGhlbSBkZXBhcnQsIG9yIGxldCB0aGVtIHN0YXkKICAgICAgIHF1aWV0OyBvciBpZiB0aGV5IHJlbWFpbiBpbiB0aGUgY2l0eSBhbmQgaW4gdGhlIHNhbWUgZGlzcG9zaXRpb24gYXMgYXQgcHJlc2VudCwgbGV0IHRoZW0KICAgICAgIGV4cGVjdCB3aGF0IHRoZXkgZGVzZXJ2ZS4gPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGVyZSBhcmUgbWVuLCBPIFJvbWFucywgd2hvIHNheSB0aGF0IENhdGlsaW5lIGhhcyBiZWVuIGRyaXZlbiBieSBtZSBpbnRvIGJhbmlzaG1lbnQuCiAgICAgICBCdXQgaWYgSSBjb3VsZCBkbyBzbyBieSBhIHdvcmQsIEkgd291bGQgZHJpdmUgb3V0IHRob3NlIGFsc28gd2hvIHNheSBzby4gRm9yc29vdGgsIHRoYXQKICAgICAgIHRpbWlkLCB0aGF0IGV4Y2Vzc2l2ZWx5IGJhc2hmdWwgbWFuIGNvdWxkIG5vdCBiZWFyIHRoZSB2b2ljZSBvZiB0aGUgY29uc3VsOyBhcyBzb29uIGFzIGhlIHdhcwogICAgICAgb3JkZXJlZCB0byBnbyBpbnRvIGJhbmlzaG1lbnQsIGhlIG9iZXllZCwgaGUgd2FzIHF1aWV0LiBZZXN0ZXJkYXksIHdoZW4gSSBoYWQgYmVlbiBhbGwgYnV0CiAgICAgICBtdXJkZXJlZCBhdCBteSBvd24gaG91c2UsIEkgY29udm9rZWQgdGhlIHNlbmF0ZSBpbiB0aGUgdGVtcGxlIG9mIEp1cGl0ZXIgU3RhdG9yOyBJIHJlbGF0ZWQKICAgICAgIHRoZSB3aG9sZSBhZmZhaXIgdG8gdGhlIGNvbnNjcmlwdCBmYXRoZXJzOyBhbmQgd2hlbiBDYXRpbGluZSBjYW1lIHRoaXRoZXIsIHdoYXQgc2VuYXRvcgogICAgICAgYWRkcmVzc2VkIGhpbT8gd2hvIHNhbHV0ZWQgaGltPyB3aG8gbG9va2VkIHVwb24gaGltIG5vdCBzbyBtdWNoIGV2ZW4gYXMgYW4gYWJhbmRvbmVkIGNpdGl6ZW4sCiAgICAgICBhcyBhbiBpbXBsYWNhYmxlIGVuZW15PyBOYXkgdGhlIGNoaWVmcyBvZiB0aGF0IGJvZHkgbGVmdCB0aGF0IHBhcnQgb2YgdGhlIGJlbmNoZXMgdG8gd2hpY2ggaGUKICAgICAgIGNhbWUgbmFrZWQgYW5kIGVtcHR5LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBPbiB0aGlzIEksIHRoYXQgdmlvbGVudCBjb25zdWwsIHdobyBkcml2ZSBjaXRpemVucyBpbnRvCiAgICAgICBleGlsZSBieSBhIHdvcmQsIGFza2VkIG9mIENhdGlsaW5lIHdoZXRoZXIgaGUgaGFkIGJlZW4gYXQgdGhlIG5vY3R1cm5hbCBtZWV0aW5nIGF0IE1hcmN1cwogICAgICAgTGVjY2Encywgb3Igbm90OyB3aGVuIHRoYXQgbW9zdCBhdWRhY2lvdXMgbWFuLCBjb252aWN0ZWQgYnkgaGlzIG93biBjb25zY2llbmNlLCB3YXMgYXQgZmlyc3QKICAgICAgIHNpbGVudC4gSSByZWxhdGVkIGFsbCB0aGUgb3RoZXIgY2lyY3Vtc3RhbmNlczsgSSBkZXNjcmliZWQgd2hhdCBoZSBoYWQgZG9uZSB0aGF0IG5pZ2h0LCB3aGVyZQogICAgICAgaGUgaGFkIGJlZW4sIHdoYXQgaGUgaGFkIGFycmFuZ2VkIGZvciB0aGUgbmV4dCBuaWdodCwgaG93IHRoZSBwbGFuIG9mIHRoZSB3aG9sZSB3YXIgaGFkIGJlZW4KICAgICAgIGxhaWQgZG93biBieSBoaW0uIFdoZW4gaGUgaGVzaXRhdGVkLCB3aGVuIGhlIHdhcyBjb252aWN0ZWQsIEkgYXNrZWQgd2h5IGhlIGhlc2l0YXRlZCB0byBnbwogICAgICAgd2hpdGhlciBoZSBoYWQgYmVlbiBsb25nIGJlZW4gcHJlcGFyaW5nIHRvIGdvOyB3aGVuIEkga25ldyB0aGF0IGFybXMsIHRoYXQgdGhlIGF4ZXMsIHRoZQogICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LCBhbmQgdHJ1bXBldHMsIGFuZCBtaWxpdGFyeSBzdGFuZGFyZHMsIGFuZCB0aGF0IHNpbHZlcgogICAgICAgZWFnbGUgdG8gd2hpY2ggaGUgaGFkIG1hZGUgYSBzaHJpbmUgaW4gaGlzIG93biBob3VzZSwgaGFkIGJlZW4gc2VudCBvbj8gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIEkgZHJpdmUgaGltIGludG8gZXhpbGUgd2hvIEkga25ldyBoYWQgYWxyZWFkeSBlbnRlcmVkIHVwb24gd2FyPyBJCiAgICAgICBzdXBwb3NlIE1hbmxpdXMsIHRoYXQgY2VudHVyaW9uIHdobyBoYXMgcGl0Y2hlZCBoaXMgY2FtcCBpbiB0aGUgRmFlc3VsYW4gZGlzdHJpY3QsIGhhcwogICAgICAgcHJvY2xhaW1lZCB3YXIgYWdhaW5zdCB0aGUgUm9tYW4gcGVvcGxlIGluIGhpcyBvd24gbmFtZTsgYW5kIHRoYXQgY2FtcCBpcyBub3Qgbm93IHdhaXRpbmcgZm9yCiAgICAgICBDYXRpbGluZSBhcyBpdHMgZ2VuZXJhbCwgYW5kIGhlLCBkcml2ZW4gaW5kZWVkIGludG8gZXhpbGUsIHdpbGwgZ28gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGtleT0idGduLDcwMDg3ODEiPk1hcnNlaWxsZXM8L3BsYWNlTmFtZT4sIGFzIHRoZXkgc2F5LCBhbmQgbm90IHRvIHRoYXQgY2FtcC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJLCB0aGF0IHZpb2xlbnQgY29uc3VsLCB3aG8gZHJpdmUgY2l0aXplbnMgaW50bwogICAgICAgZXhpbGUgYnkgYSB3b3JkLCBhc2tlZCBvZiBDYXRpbGluZSB3aGV0aGVyIGhlIGhhZCBiZWVuIGF0IHRoZSBub2N0dXJuYWwgbWVldGluZyBhdCBNYXJjdXMKICAgICAgIExlY2NhJ3MsIG9yIG5vdDsgd2hlbiB0aGF0IG1vc3QgYXVkYWNpb3VzIG1hbiwgY29udmljdGVkIGJ5IGhpcyBvd24gY29uc2NpZW5jZSwgd2FzIGF0IGZpcnN0CiAgICAgICBzaWxlbnQuIEkgcmVsYXRlZCBhbGwgdGhlIG90aGVyIGNpcmN1bXN0YW5jZXM7IEkgZGVzY3JpYmVkIHdoYXQgaGUgaGFkIGRvbmUgdGhhdCBuaWdodCwgd2hlcmUKICAgICAgIGhlIGhhZCBiZWVuLCB3aGF0IGhlIGhhZCBhcnJhbmdlZCBmb3IgdGhlIG5leHQgbmlnaHQsIGhvdyB0aGUgcGxhbiBvZiB0aGUgd2hvbGUgd2FyIGhhZCBiZWVuCiAgICAgICBsYWlkIGRvd24gYnkgaGltLiBXaGVuIGhlIGhlc2l0YXRlZCwgd2hlbiBoZSB3YXMgY29udmljdGVkLCBJIGFza2VkIHdoeSBoZSBoZXNpdGF0ZWQgdG8gZ28KICAgICAgIHdoaXRoZXIgaGUgaGFkIGJlZW4gbG9uZyBiZWVuIHByZXBhcmluZyB0byBnbzsgd2hlbiBJIGtuZXcgdGhhdCBhcm1zLCB0aGF0IHRoZSBheGVzLCB0aGUKICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LCBhbmQgdHJ1bXBldHMsIGFuZCBtaWxpdGFyeSBzdGFuZGFyZHMsIGFuZCB0aGF0IHNpbHZlcgogICAgICAgZWFnbGUgdG8gd2hpY2ggaGUgaGFkIG1hZGUgYSBzaHJpbmUgaW4gaGlzIG93biBob3VzZSwgaGFkIGJlZW4gc2VudCBvbj8gPC90cmFuc2xhdGlvbj4="
translation['2.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIEkgZHJpdmUgaGltIGludG8gZXhpbGUgd2hvIEkga25ldyBoYWQgYWxyZWFkeSBlbnRlcmVkIHVwb24gd2FyPyBJCiAgICAgICBzdXBwb3NlIE1hbmxpdXMsIHRoYXQgY2VudHVyaW9uIHdobyBoYXMgcGl0Y2hlZCBoaXMgY2FtcCBpbiB0aGUgRmFlc3VsYW4gZGlzdHJpY3QsIGhhcwogICAgICAgcHJvY2xhaW1lZCB3YXIgYWdhaW5zdCB0aGUgUm9tYW4gcGVvcGxlIGluIGhpcyBvd24gbmFtZTsgYW5kIHRoYXQgY2FtcCBpcyBub3Qgbm93IHdhaXRpbmcgZm9yCiAgICAgICBDYXRpbGluZSBhcyBpdHMgZ2VuZXJhbCwgYW5kIGhlLCBkcml2ZW4gaW5kZWVkIGludG8gZXhpbGUsIHdpbGwgZ28gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiwgYXMgdGhleSBzYXksIGFuZCBub3QgdG8gdGhhdCBjYW1wLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyB0aGUgaGFyZCBsb3Qgb2YgdGhvc2UsIG5vdCBvbmx5IG9mIHRob3NlIHdobyBnb3Zlcm4sIGJ1dCBldmVuIG9mIHRob3NlIHdobyBzYXZlIHRoZQogICAgICAgcmVwdWJsaWMuIE5vdywgaWYgTHVjaXVzIENhdGlsaW5lLCBoZW1tZWQgaW4gYW5kIHJlbmRlcmVkIHBvd2VybGVzcyBieSBteSBjb3Vuc2VscywgYnkgbXkKICAgICAgIHRvaWxzLCBieSBteSBkYW5nZXJzLCBzaG91bGQgb24gYSBzdWRkZW4gYmVjb21lIGFsYXJtZWQsIHNob3VsZCBjaGFuZ2UgaGlzIGRlc2lnbnMsIHNob3VsZAogICAgICAgZGVzZXJ0IGhpcyBmcmllbmRzLCBzaG91bGQgYWJhbmRvbiBoaXMgZGVzaWduIG9mIG1ha2luZyB3YXIsIHNob3VsZCBjaGFuZ2UgaGlzIHBhdGggZnJvbSB0aGlzCiAgICAgICBjb3Vyc2Ugb2Ygd2lja2VkbmVzcyBhbmQgd2FyLCBhbmQgYmV0YWtlIGhpbXNlbGYgdG8gZmxpZ2h0IGFuZCBleGlsZSwgaGUgd2lsbCBub3QgYmUgc2FpZCB0bwogICAgICAgaGF2ZSBiZWVuIGRlcHJpdmVkIGJ5IG1lIG9mIHRoZSBhcm1zIG9mIGhpcyBhdWRhY2l0eSwgdG8gaGF2ZSBiZWVuIGFzdG91bmRlZCBhbmQgdGVycmlmaWVkIGJ5CiAgICAgICBteSBkaWxpZ2VuY2UsIHRvIGhhdmUgYmVlbiBkcml2ZW4gZnJvbSBoaXMgaG9wZSBhbmQgZnJvbSBoaXMgZW50ZXJwcmlzZSwgYnV0LCB1bmNvbmRlbW5lZCBhbmQKICAgICAgIGlubm9jZW50LCB0byBoYXZlIGJlZW4gZHJpdmVuIGludG8gYmFuaXNobWVudCBieSB0aGUgY29uc3VsIGJ5IHRocmVhdHMgYW5kIHZpb2xlbmNlOyBhbmQKICAgICAgIHRoZXJlIHdpbGwgYmUgc29tZSB3aG8gd2lsbCBzZWVrIHRvIGhhdmUgaGltIHRob3VnaHQgbm90IHdvcnRobGVzcyBidXQgdW5mb3J0dW5hdGUsIGFuZCBiZQogICAgICAgY29uc2lkZXJlZCBub3QgYSBtb3N0IGFjdGl2ZSBjb25zdWwsIGJ1dCBhIG1vc3QgY3J1ZWwgdHlyYW50LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gbm90IHVud2lsbGluZywgTyBSb21hbnMsIHRvIGVuZHVyZSB0aGlzIHN0b3JtIG9mIGZhbHNlIGFuZCB1bmp1c3QKICAgICAgIHVucG9wdWxhcml0eSBhcyBsb25nIGFzIHRoZSBkYW5nZXIgb2YgdGhpcyBob3JyaWJsZSBhbmQgbmVmYXJpb3VzIHdhciBpcyB3YXJkZWQgb2ZmIGZyb20geW91LgogICAgICAgTGV0IGhpbSBiZSBzYWlkIHRvIGJlIGJhbmlzaGVkIGJ5IG1lIGFzIGxvbmcgYXMgaGUgZ29lcyBpbnRvIGJhbmlzaG1lbnQ7IGJ1dCwgYmVsaWV2ZSBtZSwgaGUKICAgICAgIHdpbGwgbm90IGdvLiBJIHdpbGwgbmV2ZXIgYXNrIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBPIFJvbWFucywgZm9yIHRoZSBzYWtlIG9mIGxpZ2h0ZW5pbmcgbXkKICAgICAgIG93biB1bnBvcHVsYXJpdHksIGZvciB5b3UgdG8gaGVhciB0aGF0IEx1Y2l1cyBDYXRpbGluZSBpcyBsZWFkaW5nIGFuIGFybXkgb2YgZW5lbWllcywgYW5kIGlzCiAgICAgICBob3ZlcmluZyBhYm91dCBpbiBhcm1zOyBidXQgeWV0IGluIHRocmVlIGRheXMgeW91IHdpbGwgaGVhciBpdC4gQW5kIEkgbXVjaCBtb3JlIGZlYXIgdGhhdCBpdAogICAgICAgd2lsbCBiZSBvYmplY3RlZCB0byBtZSBzb21lIGRheSBvciBvdGhlciwgdGhhdCBJIGhhdmUgbGV0IGhpbSBlc2NhcGUsIHJhdGhlciB0aGFuIHRoYXQgSSBoYXZlCiAgICAgICBiYW5pc2hlZCBoaW0uIEJ1dCB3aGVuIHRoZXJlIGFyZSBtZW4gd2hvIHNheSBoZSBoYXMgYmVlbiBiYW5pc2hlZCBiZWNhdXNlIGhlIGhhcyBnb25lIGF3YXksCiAgICAgICB3aGF0IHdvdWxkIHRoZXNlIG1lbiBzYXkgaWYgaGUgaGFkIGJlZW4gcHV0IHRvIGRlYXRoPyA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhbSBub3QgdW53aWxsaW5nLCBPIFJvbWFucywgdG8gZW5kdXJlIHRoaXMgc3Rvcm0gb2YgZmFsc2UgYW5kIHVuanVzdAogICAgICAgdW5wb3B1bGFyaXR5IGFzIGxvbmcgYXMgdGhlIGRhbmdlciBvZiB0aGlzIGhvcnJpYmxlIGFuZCBuZWZhcmlvdXMgd2FyIGlzIHdhcmRlZCBvZmYgZnJvbSB5b3UuCiAgICAgICBMZXQgaGltIGJlIHNhaWQgdG8gYmUgYmFuaXNoZWQgYnkgbWUgYXMgbG9uZyBhcyBoZSBnb2VzIGludG8gYmFuaXNobWVudDsgYnV0LCBiZWxpZXZlIG1lLCBoZQogICAgICAgd2lsbCBub3QgZ28uIEkgd2lsbCBuZXZlciBhc2sgb2YgdGhlIGltbW9ydGFsIGdvZHMsIE8gUm9tYW5zLCBmb3IgdGhlIHNha2Ugb2YgbGlnaHRlbmluZyBteQogICAgICAgb3duIHVucG9wdWxhcml0eSwgZm9yIHlvdSB0byBoZWFyIHRoYXQgTHVjaXVzIENhdGlsaW5lIGlzIGxlYWRpbmcgYW4gYXJteSBvZiBlbmVtaWVzLCBhbmQgaXMKICAgICAgIGhvdmVyaW5nIGFib3V0IGluIGFybXM7IGJ1dCB5ZXQgaW4gdGhyZWUgZGF5cyB5b3Ugd2lsbCBoZWFyIGl0LiBBbmQgSSBtdWNoIG1vcmUgZmVhciB0aGF0IGl0CiAgICAgICB3aWxsIGJlIG9iamVjdGVkIHRvIG1lIHNvbWUgZGF5IG9yIG90aGVyLCB0aGF0IEkgaGF2ZSBsZXQgaGltIGVzY2FwZSwgcmF0aGVyIHRoYW4gdGhhdCBJIGhhdmUKICAgICAgIGJhbmlzaGVkIGhpbS4gQnV0IHdoZW4gdGhlcmUgYXJlIG1lbiB3aG8gc2F5IGhlIGhhcyBiZWVuIGJhbmlzaGVkIGJlY2F1c2UgaGUgaGFzIGdvbmUgYXdheSwKICAgICAgIHdoYXQgd291bGQgdGhlc2UgbWVuIHNheSBpZiBoZSBoYWQgYmVlbiBwdXQgdG8gZGVhdGg/IDwvdHJhbnNsYXRpb24+"
translation['2.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCB0aG9zZSBtZW4gd2hvIGtlZXAgc2F5aW5nIHRoYXQgQ2F0aWxpbmUgaXMgZ29pbmcgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiBkbyBub3QgY29tcGxhaW4gb2YgdGhpcyBzbyBtdWNoIGFzIHRoZXkgZmVhciBpdDsgZm9yIHRoZXJlIGlzIG5vdAogICAgICAgb25lIG9mIHRoZW0gc28gaW5jbGluZWQgdG8gcGl0eSwgYXMgbm90IHRvIHByZWZlciB0aGF0IGhlIHNob3VsZCBnbyB0byBNYW5saXVzIHJhdGhlciB0aGFuIHRvCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPi4gQnV0IGhlLCBpZiBoZSBoYWQgbmV2ZXIgYmVmb3JlIHBsYW5uZWQKICAgICAgIHdoYXQgaGUgaXMgbm93IGRvaW5nLCB5ZXQgd291bGQgcmF0aGVyIGJlIHNsYWluIHdoaWxlIGxpdmluZyBhcyBhIGJhbmRpdCwgdGhhbiBsaXZlIGFzIGFuCiAgICAgICBleGlsZTsgYnV0IG5vdywgd2hlbiBub3RoaW5nIGhhcyBoYXBwZW5lZCB0byBoaW0gY29udHJhcnkgdG8gaGlzIG93biB3aXNoIGFuZAogICAgICAgZGVzaWduLOKAlGV4Y2VwdCwgaW5kZWVkLCB0aGF0IGhlIGhhcyBsZWZ0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB3aGlsZSB3ZSBhcmUgYWxpdmUs4oCUbGV0IHVzIHdpc2ggcmF0aGVyIHRoYXQgaGUgbWF5IGdvIGludG8gZXhpbGUKICAgICAgIHRoYW4gY29tcGxhaW4gb2YgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+IGRvIG5vdCBjb21wbGFpbiBvZiB0aGlzIHNvIG11Y2ggYXMgdGhleSBmZWFyIGl0OyBmb3IgdGhlcmUgaXMgbm90CiAgICAgICBvbmUgb2YgdGhlbSBzbyBpbmNsaW5lZCB0byBwaXR5LCBhcyBub3QgdG8gcHJlZmVyIHRoYXQgaGUgc2hvdWxkIGdvIHRvIE1hbmxpdXMgcmF0aGVyIHRoYW4gdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+LiBCdXQgaGUsIGlmIGhlIGhhZCBuZXZlciBiZWZvcmUgcGxhbm5lZAogICAgICAgd2hhdCBoZSBpcyBub3cgZG9pbmcsIHlldCB3b3VsZCByYXRoZXIgYmUgc2xhaW4gd2hpbGUgbGl2aW5nIGFzIGEgYmFuZGl0LCB0aGFuIGxpdmUgYXMgYW4KICAgICAgIGV4aWxlOyBidXQgbm93LCB3aGVuIG5vdGhpbmcgaGFzIGhhcHBlbmVkIHRvIGhpbSBjb250cmFyeSB0byBoaXMgb3duIHdpc2ggYW5kCiAgICAgICBkZXNpZ24s4oCUZXhjZXB0LCBpbmRlZWQsIHRoYXQgaGUgaGFzIGxlZnQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdoaWxlIHdlIGFyZSBhbGl2ZSzigJRsZXQgdXMgd2lzaCByYXRoZXIgdGhhdCBoZSBtYXkgZ28gaW50byBleGlsZQogICAgICAgdGhhbiBjb21wbGFpbiBvZiBpdC4gPC90cmFuc2xhdGlvbj4="
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aHkgYXJlIHdlIHNwZWFraW5nIHNvIGxvbmcgYWJvdXQgb25lIGVuZW15OyBhbmQgYWJvdXQgdGhhdCBlbmVteSB3aG8gbm93IGF2b3dzIHRoYXQgaGUKICAgICAgIGlzIG9uZTsgYW5kIHdob20gSSBub3cgZG8gbm90IGZlYXIsIGJlY2F1c2UsIGFzIEkgaGF2ZSBhbHdheXMgd2lzaGVkLCBhIHdhbGwgaXMgYmV0d2VlbiB1czsKICAgICAgIGFuZCBhcmUgc2F5aW5nIG5vdGhpbmcgYWJvdXQgdGhvc2Ugd2hvIGRpc3NlbWJsZSwgd2hvIHJlbWFpbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdobyBhcmUgYW1vbmcgdXM/IFdob20sIGluZGVlZCwgaWYgaXQgd2VyZSBieSBhbnkgbWVhbnMgcG9zc2libGUsIEkKICAgICAgIHNob3VsZCBiZSBhbnhpb3VzIG5vdCBzbyBtdWNoIHRvIGNoYXN0aXNlIGFzIHRvIGN1cmUsIGFuZCB0byBtYWtlIGZyaWVuZGx5IHRvIHRoZSByZXB1YmxpYzsKICAgICAgIG5vciwgaWYgdGhleSB3aWxsIGxpc3RlbiB0byBtZSwgZG8gSSBxdWl0ZSBrbm93IHdoeSB0aGF0IG1heSBub3QgYmUuIEZvciBJIHdpbGwgdGVsbCB5b3UsIE8KICAgICAgIFJvbWFucywgb2Ygd2hhdCBjbGFzc2VzIG9mIG1lbiB0aG9zZSBmb3JjZXMgYXJlIG1hZGUgdXAsIGFuZCB0aGVuLCBpZiBJIGNhbiwgSSB3aWxsIGFwcGx5IHRvCiAgICAgICBlYWNoIHRoZSBtZWRpY2luZSBvZiBteSBhZHZpY2UgYW5kIHBlcnN1YXNpb24uIDwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aG8gYXJlIGFtb25nIHVzPyBXaG9tLCBpbmRlZWQsIGlmIGl0IHdlcmUgYnkgYW55IG1lYW5zIHBvc3NpYmxlLCBJCiAgICAgICBzaG91bGQgYmUgYW54aW91cyBub3Qgc28gbXVjaCB0byBjaGFzdGlzZSBhcyB0byBjdXJlLCBhbmQgdG8gbWFrZSBmcmllbmRseSB0byB0aGUgcmVwdWJsaWM7CiAgICAgICBub3IsIGlmIHRoZXkgd2lsbCBsaXN0ZW4gdG8gbWUsIGRvIEkgcXVpdGUga25vdyB3aHkgdGhhdCBtYXkgbm90IGJlLiBGb3IgSSB3aWxsIHRlbGwgeW91LCBPCiAgICAgICBSb21hbnMsIG9mIHdoYXQgY2xhc3NlcyBvZiBtZW4gdGhvc2UgZm9yY2VzIGFyZSBtYWRlIHVwLCBhbmQgdGhlbiwgaWYgSSBjYW4sIEkgd2lsbCBhcHBseSB0bwogICAgICAgZWFjaCB0aGUgbWVkaWNpbmUgb2YgbXkgYWR2aWNlIGFuZCBwZXJzdWFzaW9uLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgb25lIGNsYXNzIG9mIHRoZW0sIHdobywgd2l0aCBlbm9ybW91cyBkZWJ0cywKICAgICAgIGhhdmUgc3RpbGwgZ3JlYXRlciBwb3NzZXNzaW9ucywgYW5kIHdobyBjYW4gYnkgbm8gbWVhbnMgYmUgZGV0YWNoZWQgZnJvbSB0aGVpciBhZmZlY3Rpb24gdG8KICAgICAgIHRoZW0uIE9mIHRoZXNlIG1lbiB0aGUgYXBwZWFyYW5jZSBpcyBtb3N0IHJlc3BlY3RhYmxlLCBmb3IgdGhleSBhcmUgd2VhbHRoeSwgYnV0IHRoZWlyCiAgICAgICBpbnRlbnRpb24gYW5kIHRoZWlyIGNhdXNlIGFyZSBtb3N0IHNoYW1lbGVzcy4gV2lsbCB5b3UgYmUgcmljaCBpbiBsYW5kcywgaW4gaG91c2VzLCBpbiBtb25leSwKICAgICAgIGluIHNsYXZlcywgaW4gYWxsIHRoaW5ncywgYW5kIHlldCBoZXNpdGF0ZSB0byBkaW1pbmlzaCB5b3VyIHBvc3Nlc3Npb25zIHRvIGFkZCB0byB5b3VyCiAgICAgICBjcmVkaXQ/IFdoYXQgYXJlIHlvdSBleHBlY3Rpbmc/IFdhcj8gV2hhdCEgaW4gdGhlIGRldmFzdGF0aW9uIG9mIGFsbCB0aGluZ3MsIGRvIHlvdSBiZWxpZXZlCiAgICAgICB0aGF0IHlvdXIgb3duIHBvc3Nlc3Npb25zIHdpbGwgYmUgaGVsZCBzYWNyZWQ/IGRvIHlvdSBleHBlY3QgYW4gYWJvbGl0aW9uIG9mIGRlYnRzPyBUaGV5IGFyZQogICAgICAgbWlzdGFrZW4gd2hvIGV4cGVjdCB0aGF0IGZyb20gQ2F0aWxpbmUuIFRoZXJlIG1heSBiZSBzY2hlZHVsZXMgbWFkZSBvdXQsIG93aW5nIHRvIG15CiAgICAgICBleGVydGlvbnMsIGJ1dCB0aGV5IHdpbGwgYmUgb25seSBjYXRhbG9ndWVzIG9mIHNhbGUuIE5vciBjYW4gdGhvc2Ugd2hvIGhhdmUgcG9zc2Vzc2lvbnMgYmUKICAgICAgIHNhZmUgYnkgYW55IG90aGVyIG1lYW5zOyBhbmQgaWYgdGhleSBoYWQgYmVlbiB3aWxsaW5nIHRvIGFkb3B0IHRoaXMgcGxhbiBlYXJsaWVyLCBhbmQgbm90LCBhcwogICAgICAgaXMgdmVyeSBmb29saXNoLCB0byBzdHJ1Z2dsZSBvbiBhZ2FpbnN0IHVzdXJ5IHdpdGggdGhlIHByb2ZpdHMgb2YgdGhlaXIgZmFybXMsIHdlIHNob3VsZCBoYXZlCiAgICAgICB0aGVtIG5vdyByaWNoZXIgYW5kIGJldHRlciBjaXRpemVucy4gQnV0IEkgdGhpbmsgdGhlc2UgbWVuIGFyZSB0aGUgbGVhc3Qgb2YgYWxsIHRvIGJlCiAgICAgICBkcmVhZGVkLCBiZWNhdXNlIHRoZXkgY2FuIGVpdGhlciBiZSBwZXJzdWFkZWQgdG8gYWJhbmRvbiB0aGVpciBvcGluaW9ucywgb3IgaWYgdGhleSBjbGluZyB0bwogICAgICAgdGhlbSwgdGhleSBzZWVtIHRvIG1lIG1vcmUgbGlrZWx5IHRvIGZvcm0gd2lzaGVzIGFnYWluc3QgdGhlIHJlcHVibGljIHRoYW4gdG8gYmVhciBhcm1zCiAgICAgICBhZ2FpbnN0IGl0LiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgb25lIGNsYXNzIG9mIHRoZW0sIHdobywgd2l0aCBlbm9ybW91cyBkZWJ0cywKICAgICAgIGhhdmUgc3RpbGwgZ3JlYXRlciBwb3NzZXNzaW9ucywgYW5kIHdobyBjYW4gYnkgbm8gbWVhbnMgYmUgZGV0YWNoZWQgZnJvbSB0aGVpciBhZmZlY3Rpb24gdG8KICAgICAgIHRoZW0uIE9mIHRoZXNlIG1lbiB0aGUgYXBwZWFyYW5jZSBpcyBtb3N0IHJlc3BlY3RhYmxlLCBmb3IgdGhleSBhcmUgd2VhbHRoeSwgYnV0IHRoZWlyCiAgICAgICBpbnRlbnRpb24gYW5kIHRoZWlyIGNhdXNlIGFyZSBtb3N0IHNoYW1lbGVzcy4gV2lsbCB5b3UgYmUgcmljaCBpbiBsYW5kcywgaW4gaG91c2VzLCBpbiBtb25leSwKICAgICAgIGluIHNsYXZlcywgaW4gYWxsIHRoaW5ncywgYW5kIHlldCBoZXNpdGF0ZSB0byBkaW1pbmlzaCB5b3VyIHBvc3Nlc3Npb25zIHRvIGFkZCB0byB5b3VyCiAgICAgICBjcmVkaXQ/IFdoYXQgYXJlIHlvdSBleHBlY3Rpbmc/IFdhcj8gV2hhdCEgaW4gdGhlIGRldmFzdGF0aW9uIG9mIGFsbCB0aGluZ3MsIGRvIHlvdSBiZWxpZXZlCiAgICAgICB0aGF0IHlvdXIgb3duIHBvc3Nlc3Npb25zIHdpbGwgYmUgaGVsZCBzYWNyZWQ/IGRvIHlvdSBleHBlY3QgYW4gYWJvbGl0aW9uIG9mIGRlYnRzPyBUaGV5IGFyZQogICAgICAgbWlzdGFrZW4gd2hvIGV4cGVjdCB0aGF0IGZyb20gQ2F0aWxpbmUuIFRoZXJlIG1heSBiZSBzY2hlZHVsZXMgbWFkZSBvdXQsIG93aW5nIHRvIG15CiAgICAgICBleGVydGlvbnMsIGJ1dCB0aGV5IHdpbGwgYmUgb25seSBjYXRhbG9ndWVzIG9mIHNhbGUuIE5vciBjYW4gdGhvc2Ugd2hvIGhhdmUgcG9zc2Vzc2lvbnMgYmUKICAgICAgIHNhZmUgYnkgYW55IG90aGVyIG1lYW5zOyBhbmQgaWYgdGhleSBoYWQgYmVlbiB3aWxsaW5nIHRvIGFkb3B0IHRoaXMgcGxhbiBlYXJsaWVyLCBhbmQgbm90LCBhcwogICAgICAgaXMgdmVyeSBmb29saXNoLCB0byBzdHJ1Z2dsZSBvbiBhZ2FpbnN0IHVzdXJ5IHdpdGggdGhlIHByb2ZpdHMgb2YgdGhlaXIgZmFybXMsIHdlIHNob3VsZCBoYXZlCiAgICAgICB0aGVtIG5vdyByaWNoZXIgYW5kIGJldHRlciBjaXRpemVucy4gQnV0IEkgdGhpbmsgdGhlc2UgbWVuIGFyZSB0aGUgbGVhc3Qgb2YgYWxsIHRvIGJlCiAgICAgICBkcmVhZGVkLCBiZWNhdXNlIHRoZXkgY2FuIGVpdGhlciBiZSBwZXJzdWFkZWQgdG8gYWJhbmRvbiB0aGVpciBvcGluaW9ucywgb3IgaWYgdGhleSBjbGluZyB0bwogICAgICAgdGhlbSwgdGhleSBzZWVtIHRvIG1lIG1vcmUgbGlrZWx5IHRvIGZvcm0gd2lzaGVzIGFnYWluc3QgdGhlIHJlcHVibGljIHRoYW4gdG8gYmVhciBhcm1zCiAgICAgICBhZ2FpbnN0IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFub3RoZXIgY2xhc3Mgb2YgdGhlbSwgd2hvLCBhbHRob3VnaCB0aGV5IGFyZSBoYXJhc3NlZCBieSBkZWJ0LCB5ZXQgYXJlIGV4cGVjdGluZwogICAgICAgc3VwcmVtZSBwb3dlcjsgdGhleSB3aXNoIHRvIGJlY29tZSBtYXN0ZXJzLiBUaGV5IHRoaW5rIHRoYXQgd2hlbiB0aGUgcmVwdWJsaWMgaXMgaW4gY29uZnVzaW9uCiAgICAgICB0aGV5IG1heSBnYWluIHRob3NlIGhvbm91cnMgd2hpY2ggdGhleSBkZXNwYWlyIG9mIHdoZW4gaXQgaXMgaW4gdHJhbnF1aWxsaXR5LiBBbmQgdGhleSBtdXN0LAogICAgICAgSSB0aGluaywgYmUgdG9sZCB0aGUgc2FtZSBhcyBldmVyeSBvbmUgZWxzZSzigJR0byBkZXNwYWlyIG9mIG9idGFpbmluZyB3aGF0IHRoZXkgYXJlCiAgICAgICBhaW1pbmcgYXQ7IHRoYXQgaW4gdGhlIGZpcnN0IHBsYWNlLCBJIG15c2VsZiBhbSB3YXRjaGZ1bCBmb3IsIGFtIHByZXNlbnQgdG8sIGFtIHByb3ZpZGluZyBmb3IKICAgICAgIHRoZSByZXB1YmxpYy4gQmVzaWRlcyB0aGF0LCB0aGVyZSBpcyBhIGhpZ2ggc3Bpcml0IGluIHRoZSB2aXJ0dW91cyBjaXRpemVucywgZ3JlYXQgdW5hbmltaXR5LAogICAgICAgZ3JlYXQgbnVtYmVycywgYW5kIGFsc28gYSBncmVhdCBib2R5IG9mIHRyb29wcy4gQWJvdmUgYWxsIHRoYXQsIHRoZSBpbW1vcnRhbCBnb2RzIHdpbGwgc3RhbmQKICAgICAgIGJ5IGFuZCBicmluZyBhaWQgdG8gdGhpcyBpbnZpbmNpYmxlIG5hdGlvbiwgdGhpcyBtb3N0IGlsbHVzdHJpb3VzIGVtcGlyZSwgdGhpcyBtb3N0IGJlYXV0aWZ1bAogICAgICAgY2l0eSwgYWdhaW5zdCBzdWNoIHdpY2tlZCB2aW9sZW5jZS4gQW5kIGlmIHRoZXkgaGFkIGFscmVhZHkgZ290IHRoYXQgd2hpY2ggdGhleSB3aXRoIHRoZQogICAgICAgZ3JlYXRlc3QgbWFkbmVzcyB3aXNoIGZvciwgZG8gdGhleSB0aGluayB0aGF0IGluIHRoZSBhc2hlcyBvZiB0aGUgY2l0eSBhbmQgYmxvb2Qgb2YgdGhlCiAgICAgICBjaXRpemVucywgd2hpY2ggaW4gdGhlaXIgd2lja2VkIGFuZCBpbmZhbW91cyBoZWFydHMgdGhleSBkZXNpcmUsIHRoZXkgd2lsbCBiZWNvbWUgY29uc3VscyBhbmQKICAgICAgIGRpY3RhdG9ycyBhbmQgZXZlbiBraW5ncz8gRG8gdGhleSBub3Qgc2VlIHRoYXQgdGhleSBhcmUgd2lzaGluZyBmb3IgdGhhdCB3aGljaCwgaWYgdGhleSB3ZXJlCiAgICAgICB0byBvYnRhaW4gaXQsIG11c3QgYmUgZ2l2ZW4gdXAgdG8gc29tZSBmdWdpdGl2ZSBzbGF2ZSwgb3IgdG8gc29tZSBnbGFkaWF0b3I/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.9.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIHRoaXJkIGNsYXNzLCBhbHJlYWR5IHRvdWNoZWQgYnkgYWdlLCBidXQgc3RpbGwgdmlnb3JvdXMgZnJvbSBjb25zdGFudCBleGVyY2lzZTsKICAgICAgIG9mIHdoaWNoIGNsYXNzIGlzIE1hbmxpdXMgaGltc2VsZjsgd2hvbSBDYXRpbGluZSBpcyBub3cgc3VjY2VlZGluZy4gVGhlc2UgYXJlIG1lbiBvZiB0aG9zZQogICAgICAgY29sb25pZXMgd2hpY2ggU3VsbGEgZXN0YWJsaXNoZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxGYWVzdWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRmFlc3VsYWUiPkZhZXN1bGFlPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggSSBrbm93IHRvIGJlIGNvbXBvc2VkLCBvbiB0aGUgd2hvbGUsIG9mIGV4Y2VsbGVudCBjaXRpemVucyBhbmQgYnJhdmUgbWVuOyBidXQgeWV0IHRoZXNlCiAgICAgICBhcmUgY29sb25pc3RzLCB3aG8sIGZyb20gYmVjb21pbmcgcG9zc2Vzc2VkIG9mIHVuZXhwZWN0ZWQgYW5kIHN1ZGRlbiB3ZWFsdGgsIGJvYXN0IHRoZW1zZWx2ZXMKICAgICAgIGV4dHJhdmFnYW50bHkgYW5kIGluc29sZW50bHk7IHRoZXNlIG1lbiwgd2hpbGUgdGhleSBidWlsZCBsaWtlIHJpY2ggbWVuLCB3aGlsZSB0aGV5IGRlbGlnaHQKICAgICAgIGluIGZhcm1zLCBpbiBsaXR0ZXJzLCBpbiB2YXN0IGZhbWlsaWVzIG9mIHNsYXZlcywgaW4gbHV4dXJpb3VzIGJhbnF1ZXRzLCBoYXZlIGluY3VycmVkIHN1Y2gKICAgICAgIGdyZWF0IGRlYnRzLCB0aGF0LCBpZiB0aGV5IHdvdWxkIGJlIHNhdmVkLCB0aGV5IG11c3QgcmFpc2UgU3VsbGEgZnJvbSB0aGUgZGVhZDsgYW5kIHRoZXkgaGF2ZQogICAgICAgZXZlbiBleGNpdGVkIHNvbWUgY291bnRyeW1lbiwgcG9vciBhbmQgbmVlZHkgbWVuLCB0byBlbnRlcnRhaW4gdGhlIHNhbWUgaG9wZXMgb2YgcGx1bmRlciBhcwogICAgICAgdGhlbXNlbHZlcy4gQW5kIGFsbCB0aGVzZSBtZW4sIE8gUm9tYW5zLCBJIHBsYWNlIGluIHRoZSBzYW1lIGNsYXNzIG9mIHJvYmJlcnMgYW5kIGJhbmRpdHRpLgogICAgICAgQnV0LCBJIHdhcm4gdGhlbSwgbGV0IHRoZW0gY2Vhc2UgdG8gYmUgbWFkLCBhbmQgdG8gdGhpbmsgb2YgcHJvc2NyaXB0aW9ucyBhbmQgZGljdGF0b3JzaGlwczsKICAgICAgIGZvciBzdWNoIGEgaG9ycm9yIG9mIHRoZXNlIHRpbWVzIGlzIGluZ3JhaW5lZCBpbnRvIHRoZSBjaXR5LCB0aGF0IG5vdCBldmVuIG1lbiwgYnV0IGl0IHNlZW1zCiAgICAgICB0byBtZSB0aGF0IGV2ZW4gdGhlIHZlcnkgY2F0dGxlIHdvdWxkIHJlZnVzZSB0byBiZWFyIHRoZW0gYWdhaW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxGYWVzdWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRmFlc3VsYWUiPkZhZXN1bGFlPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggSSBrbm93IHRvIGJlIGNvbXBvc2VkLCBvbiB0aGUgd2hvbGUsIG9mIGV4Y2VsbGVudCBjaXRpemVucyBhbmQgYnJhdmUgbWVuOyBidXQgeWV0IHRoZXNlCiAgICAgICBhcmUgY29sb25pc3RzLCB3aG8sIGZyb20gYmVjb21pbmcgcG9zc2Vzc2VkIG9mIHVuZXhwZWN0ZWQgYW5kIHN1ZGRlbiB3ZWFsdGgsIGJvYXN0IHRoZW1zZWx2ZXMKICAgICAgIGV4dHJhdmFnYW50bHkgYW5kIGluc29sZW50bHk7IHRoZXNlIG1lbiwgd2hpbGUgdGhleSBidWlsZCBsaWtlIHJpY2ggbWVuLCB3aGlsZSB0aGV5IGRlbGlnaHQKICAgICAgIGluIGZhcm1zLCBpbiBsaXR0ZXJzLCBpbiB2YXN0IGZhbWlsaWVzIG9mIHNsYXZlcywgaW4gbHV4dXJpb3VzIGJhbnF1ZXRzLCBoYXZlIGluY3VycmVkIHN1Y2gKICAgICAgIGdyZWF0IGRlYnRzLCB0aGF0LCBpZiB0aGV5IHdvdWxkIGJlIHNhdmVkLCB0aGV5IG11c3QgcmFpc2UgU3VsbGEgZnJvbSB0aGUgZGVhZDsgYW5kIHRoZXkgaGF2ZQogICAgICAgZXZlbiBleGNpdGVkIHNvbWUgY291bnRyeW1lbiwgcG9vciBhbmQgbmVlZHkgbWVuLCB0byBlbnRlcnRhaW4gdGhlIHNhbWUgaG9wZXMgb2YgcGx1bmRlciBhcwogICAgICAgdGhlbXNlbHZlcy4gQW5kIGFsbCB0aGVzZSBtZW4sIE8gUm9tYW5zLCBJIHBsYWNlIGluIHRoZSBzYW1lIGNsYXNzIG9mIHJvYmJlcnMgYW5kIGJhbmRpdHRpLgogICAgICAgQnV0LCBJIHdhcm4gdGhlbSwgbGV0IHRoZW0gY2Vhc2UgdG8gYmUgbWFkLCBhbmQgdG8gdGhpbmsgb2YgcHJvc2NyaXB0aW9ucyBhbmQgZGljdGF0b3JzaGlwczsKICAgICAgIGZvciBzdWNoIGEgaG9ycm9yIG9mIHRoZXNlIHRpbWVzIGlzIGluZ3JhaW5lZCBpbnRvIHRoZSBjaXR5LCB0aGF0IG5vdCBldmVuIG1lbiwgYnV0IGl0IHNlZW1zCiAgICAgICB0byBtZSB0aGF0IGV2ZW4gdGhlIHZlcnkgY2F0dGxlIHdvdWxkIHJlZnVzZSB0byBiZWFyIHRoZW0gYWdhaW4uIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGEgZm91cnRoIGNsYXNzLCB2YXJpb3VzLCBwcm9taXNjdW91cyBhbmQgdHVyYnVsZW50OyB3aG8gaW5kZWVkIGFyZSBub3cKICAgICAgIG92ZXJ3aGVsbWVkOyB3aG8gd2lsbCBuZXZlciByZWNvdmVyIHRoZW1zZWx2ZXM7IHdobywgcGFydGx5IGZyb20gaW5kb2xlbmNlLCBwYXJ0bHkgZnJvbQogICAgICAgbWFuYWdpbmcgdGhlaXIgYWZmYWlycyBiYWRseSwgcGFydGx5IGZyb20gZXh0cmF2YWdhbmNlLCBhcmUgZW1iYXJyYXNzZWQgYnkgb2xkIGRlYnRzOyBhbmQKICAgICAgIHdvcm4gb3V0IHdpdGggYmFpbCBib25kcywgYW5kIGp1ZGdtZW50cywgYW5kIHNlaXp1cmVzIG9mIHRoZWlyIGdvb2RzLCBhcmUgc2FpZCB0byBiZSBiZXRha2luZwogICAgICAgdGhlbXNlbHZlcyBpbiBudW1iZXJzIHRvIHRoYXQgY2FtcCBib3RoIGZyb20gdGhlIGNpdHkgYW5kIHRoZSBjb3VudHJ5LiBUaGVzZSBtZW4gSSB0aGluayBub3QKICAgICAgIHNvIG11Y2ggYWN0aXZlIHNvbGRpZXJzIGFzIGxhenkgaW5zb2x2ZW50czsgd2hvLCBpZiB0aGV5IGNhbm5vdCBzdGFuZCBhdCBmaXJzdCwgbWF5IGZhbGwsIGJ1dAogICAgICAgZmFsbCBzbywgdGhhdCBub3Qgb25seSB0aGUgY2l0eSBidXQgZXZlbiB0aGVpciBuZWFyZXN0IG5laWdoYm91cnMga25vdyBub3RoaW5nIG9mIGl0LiBGb3IgSQogICAgICAgZG8gbm90IHVuZGVyc3RhbmQgd2h5LCBpZiB0aGV5IGNhbm5vdCBsaXZlIHdpdGggaG9ub3VyLCB0aGV5IHNob3VsZCB3aXNoIHRvIGRpZSBzaGFtZWZ1bGx5OwogICAgICAgb3Igd2lseSB0aGV5IHRoaW5rIHRoZXkgc2hhbGwgcGVyaXNoIHdpdGggbGVzcyBwYWluIGluIGEgY3Jvd2QsIHRoYW4gaWYgdGhleSBwZXJpc2ggYnkKICAgICAgIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIGZpZnRoIGNsYXNzLCBvZiBwYXJyaWNpZGVzLCBhc3Nhc3NpbnMsIGluIHNob3J0IG9mIGFsbCBpbmZhbW91cyBjaGFyYWN0ZXJzLCB3aG9tCiAgICAgICBJIGRvIG5vdCB3aXNoIHRvIHJlY2FsbCBmcm9tIENhdGlsaW5lLCBhbmQgaW5kZWVkIHRoZXkgY2Fubm90IGJlIHNlcGFyYXRlZCBmcm9tIGhpbS4gTGV0IHRoZW0KICAgICAgIHBlcmlzaCBpbiB0aGVpciB3aWNrZWQgd2FyLCBzaW5jZSB0aGV5IGFyZSBzbyBudW1lcm91cyB0aGF0IGEgcHJpc29uIGNhbm5vdCBjb250YWluIHRoZW0uIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIGxhc3QgY2xhc3MsIGxhc3Qgbm90IG9ubHkgaW4gbnVtYmVyIGJ1dCBpbiB0aGUgc29ydCBvZiBtZW4gYW5kIGluIHRoZWlyIHdheSBvZgogICAgICAgbGlmZTsgdGhlIGVzcGVjaWFsIGJvZHktZ3VhcmQgb2YgQ2F0aWxpbmUsIG9mIGhpcyBsZXZ5aW5nOyB5ZXMsIHRoZSBmcmllbmRzIG9mIGhpcyBlbWJyYWNlcwogICAgICAgYW5kIG9mIGhpcyBib3NvbTsgd2hvbSB5b3Ugc2VlIHdpdGggY2FyZWZ1bGx5IGNvbWJlZCBoYWlyLCBnbG9zc3ksIGJlYXJkbGVzcywgb3Igd2l0aAogICAgICAgd2VsbC10cmltbWVkIGJlYXJkczsgd2l0aCB0dW5pY3Mgd2l0aCBzbGVldmVzLCBvciByZWFjaGluZyB0byB0aGUgYW5rbGVzOyBjbG90aGVkIHdpdGggdmVpbHMsCiAgICAgICBub3Qgd2l0aCByb2JlczsgYWxsIHRoZSBpbmR1c3RyeSBvZiB3aG9zZSBsaWZlLCBhbGwgdGhlIGxhYm91ciBvZiB3aG9zZSB3YXRjaGZ1bG5lc3MsIGlzCiAgICAgICBleHBlbmRlZCBpbiBzdXBwZXJzIGxhc3RpbmcgdGlsbCBkYXlicmVhay4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiB0aGVzZSBiYW5kcyBhcmUgYWxsIHRoZSBnYW1ibGVycywgYWxsIHRoZSBhZHVsdGVyZXJzLCBhbGwgdGhlIHVuY2xlYW4gYW5kIHNoYW1lbGVzcwogICAgICAgY2l0aXplbnMuIFRoZXNlIGJveXMsIHNvIHdpdHR5IGFuZCBkZWxpY2F0ZSwgaGF2ZSBsZWFybnQgbm90IG9ubHkgdG8gbG92ZSBhbmQgdG8gYmUgbG92ZWQsCiAgICAgICBub3Qgb25seSB0byBzaW5nIGFuZCB0byBkYW5jZSwgYnV0IGFsc28gdG8gYnJhbmRpc2ggZGFnZ2VycyBhbmQgdG8gYWRtaW5pc3RlciBwb2lzb25zOyBhbmQKICAgICAgIHVubGVzcyB0aGV5IGFyZSBkcml2ZW4gb3V0LCB1bmxlc3MgdGhleSBkaWUsIGV2ZW4gc2hvdWxkIENhdGlsaW5lIGRpZSwgSSB3YXJuIHlvdSB0aGF0IHRoZQogICAgICAgc2Nob29sIG9mIENhdGlsaW5lIHdvdWxkIGV4aXN0IGluIHRoZSByZXB1YmxpYy4gQnV0IHdoYXQgZG8gdGhvc2Ugd3JldGNoZXMgd2FudD8gQXJlIHRoZXkKICAgICAgIGdvaW5nIHRvIHRha2UgdGhlaXIgd2l2ZXMgd2l0aCB0aGVtIHRvIHRoZSBjYW1wPyBob3cgY2FuIHRoZXkgZG8gd2l0aG91dCB0aGVtLCBlc3BlY2lhbGx5IGluCiAgICAgICB0aGVzZSBuaWdodHM/IGFuZCBob3cgd2lsbCB0aGV5IGVuZHVyZSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlc2UgZnJvc3RzLCBhbmQgdGhpcyBzbm93PyB1bmxlc3MgdGhleSB0aGluayB0aGF0IHRoZXkgd2lsbAogICAgICAgYmVhciB0aGUgd2ludGVyIG1vcmUgZWFzaWx5IGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gaW4gdGhlIGhhYml0IG9mIGRhbmNpbmcgbmFrZWQgYXQgdGhlaXIKICAgICAgIGZlYXN0cy4gTyB3YXIgbXVjaCB0byBiZSBkcmVhZGVkLCB3aGVuIENhdGlsaW5lIGlzIGdvaW5nIHRvIGhhdmUgaGlzIGJvZHlndWFyZCBvZgogICAgICAgcHJvc3RpdHV0ZXMhIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlc2UgZnJvc3RzLCBhbmQgdGhpcyBzbm93PyB1bmxlc3MgdGhleSB0aGluayB0aGF0IHRoZXkgd2lsbAogICAgICAgYmVhciB0aGUgd2ludGVyIG1vcmUgZWFzaWx5IGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gaW4gdGhlIGhhYml0IG9mIGRhbmNpbmcgbmFrZWQgYXQgdGhlaXIKICAgICAgIGZlYXN0cy4gTyB3YXIgbXVjaCB0byBiZSBkcmVhZGVkLCB3aGVuIENhdGlsaW5lIGlzIGdvaW5nIHRvIGhhdmUgaGlzIGJvZHlndWFyZCBvZgogICAgICAgcHJvc3RpdHV0ZXMhIDwvdHJhbnNsYXRpb24+"
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.11.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFycmF5IG5vdywgTyBSb21hbnMsIGFnYWluc3QgdGhlc2Ugc3BsZW5kaWQgdHJvb3BzIG9mIENhdGlsaW5lLCB5b3VyIGd1YXJkcyBhbmQgeW91cgogICAgICAgYXJtaWVzOyBhbmQgZmlyc3Qgb2YgYWxsIG9wcG9zZSB0byB0aGF0IHdvcm4tb3V0IGFuZCB3b3VuZGVkIGdsYWRpYXRvciB5b3VyIGNvbnN1bHMgYW5kCiAgICAgICBnZW5lcmFsczsgdGhlbiBhZ2FpbnN0IHRoYXQgYmFuaXNoZWQgYW5kIGVuZmVlYmxlZCB0cm9vcCBvZiBydWluZWQgbWVuIGxlYWQgb3V0IHRoZSBmbG93ZXIKICAgICAgIGFuZCBzdHJlbmd0aCBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaW5zdGFudGx5IHRoZSBjaXRpZXMgb2YKICAgICAgIHRoZSBjb2xvbmllcyBhbmQgbXVuaWNpcGFsaXRpZXMgd2lsbCBtYXRjaCB0aGUgcnVzdGljIG1vdW5kcyBvZiBDYXRpbGluZTsgYW5kIEkgd2lsbCBub3QKICAgICAgIGNvbmRlc2NlbmQgdG8gY29tcGFyZSB0aGUgcmVzdCBvZiB5b3VyIHRyb29wcyBhbmQgZXF1aXBtZW50cyBhbmQgZ3VhcmRzIHdpdGggdGhlIHdhbnQgYW5kCiAgICAgICBkZXN0aXR1dGlvbiBvZiB0aGF0IGhpZ2h3YXltYW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmLCBvbWl0dGluZyBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBpbiB3aGljaCB3ZSBhcmUgcmljaCBhbmQgb2Ygd2hpY2ggaGUgaXMgZGVzdGl0dXRlLOKAlHRoZSBzZW5hdGUsIHRoZSBSb21hbgogICAgICAga25pZ2h0cywgdGhlIHBlb3BsZSwgdGhlIGNpdHksIHRoZSB0cmVhc3VyeSwgdGhlIHJldmVudWVzLCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBhbGwgdGhlIHByb3ZpbmNlcywgZm9yZWlnbiBuYXRpb25zLOKAlGlmIEkgc2F5LCBvbWl0dGluZyBhbGwKICAgICAgIHRoZXNlIHRoaW5ncywgd2UgY2hvb3NlIHRvIGNvbXBhcmUgdGhlIGNhdXNlcyB0aGVtc2VsdmVzIHdoaWNoIGFyZSBvcHBvc2VkIHRvIG9uZSBhbm90aGVyLCB3ZQogICAgICAgbWF5IHVuZGVyc3RhbmQgZnJvbSB0aGF0IGFsb25lIGhvdyB0aG9yb3VnaGx5IHByb3N0cmF0ZSB0aGV5IGFyZS4gRm9yIG9uIHRoZSBvbmUgc2lkZSBhcmUKICAgICAgIGZpZ2h0aW5nIG1vZGVzdHksIG9uIHRoZSBvdGhlciB3YW50b25uZXNzOyBvbiB0aGUgb25lIGNoYXN0aXR5LCBvbiB0aGUgb3RoZXIgdW5jbGVhbm5lc3M7IG9uCiAgICAgICB0aGUgb25lIGhvbmVzdHksIG9uIHRoZSBvdGhlciBmcmF1ZDsgb24gdGhlIG9uZSBwaWV0eSwgb24gdGhlIG90aGVyIHdpY2tlZG5lc3M7IG9uIHRoZSBvbmUKICAgICAgIGNvbnNpc3RlbmN5LCBvbiB0aGUgb3RoZXIgaW5zYW5pdHk7IG9uIHRoZSBvbmUgaG9ub3VyLCBvbiB0aGUgb3RoZXIgYmFzZW5lc3M7IG9uIHRoZSBvbmUKICAgICAgIGNvbnRpbmVuY2UsIG9uIHRoZSBvdGhlciBsdXN0OyBpbiBzaG9ydCwgZXF1aXR5LCB0ZW1wZXJhbmNlLCBmb3J0aXR1ZGUsIHBydWRlbmNlLCBhbGwgdGhlCiAgICAgICB2aXJ0dWVzIGNvbnRlbmQgYWdhaW5zdCBpbmlxdWl0eSB3aXRoIGx1eHVyeSwgYWdhaW5zdCBpbmRvbGVuY2UsIGFnYWluc3QgcmFzaG5lc3MsIGFnYWluc3QKICAgICAgIGFsbCB0aGUgdmljZXM7IGxhc3RseSwgYWJ1bmRhbmNlIGNvbnRlbmRzIGFnYWluc3QgZGVzdGl0dXRpb24sIGdvb2QgcGxhbnMgYWdhaW5zdCBiYWZmbGVkCiAgICAgICBkZXNpZ25zLCB3aXNkb20gYWdhaW5zdCBtYWRuZXNzLCB3ZWxsLWZvdW5kZWQgaG9wZSBhZ2FpbnN0IHVuaXZlcnNhbCBkZXNwYWlyLiBJbiBhIGNvbnRlc3QKICAgICAgIGFuZCB3YXIgb2YgdGhpcyBzb3J0LCBldmVuIGlmIHRoZSB6ZWFsIG9mIG1lbiB3ZXJlIHRvIGZhaWwsIHdpbGwgbm90IHRoZSBpbW1vcnRhbCBnb2RzIGNvbXBlbAogICAgICAgc3VjaCBudW1lcm91cyBhbmQgZXhjZXNzaXZlIHZpY2VzIHRvIGJlIGRlZmVhdGVkIGJ5IHRoZXNlIG1vc3QgZW1pbmVudCB2aXJ0dWVzPyA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpbnN0YW50bHkgdGhlIGNpdGllcyBvZgogICAgICAgdGhlIGNvbG9uaWVzIGFuZCBtdW5pY2lwYWxpdGllcyB3aWxsIG1hdGNoIHRoZSBydXN0aWMgbW91bmRzIG9mIENhdGlsaW5lOyBhbmQgSSB3aWxsIG5vdAogICAgICAgY29uZGVzY2VuZCB0byBjb21wYXJlIHRoZSByZXN0IG9mIHlvdXIgdHJvb3BzIGFuZCBlcXVpcG1lbnRzIGFuZCBndWFyZHMgd2l0aCB0aGUgd2FudCBhbmQKICAgICAgIGRlc3RpdHV0aW9uIG9mIHRoYXQgaGlnaHdheW1hbi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmLCBvbWl0dGluZyBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBpbiB3aGljaCB3ZSBhcmUgcmljaCBhbmQgb2Ygd2hpY2ggaGUgaXMgZGVzdGl0dXRlLOKAlHRoZSBzZW5hdGUsIHRoZSBSb21hbgogICAgICAga25pZ2h0cywgdGhlIHBlb3BsZSwgdGhlIGNpdHksIHRoZSB0cmVhc3VyeSwgdGhlIHJldmVudWVzLCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGFsbCB0aGUgcHJvdmluY2VzLCBmb3JlaWduIG5hdGlvbnMs4oCUaWYgSSBzYXksIG9taXR0aW5nIGFsbAogICAgICAgdGhlc2UgdGhpbmdzLCB3ZSBjaG9vc2UgdG8gY29tcGFyZSB0aGUgY2F1c2VzIHRoZW1zZWx2ZXMgd2hpY2ggYXJlIG9wcG9zZWQgdG8gb25lIGFub3RoZXIsIHdlCiAgICAgICBtYXkgdW5kZXJzdGFuZCBmcm9tIHRoYXQgYWxvbmUgaG93IHRob3JvdWdobHkgcHJvc3RyYXRlIHRoZXkgYXJlLiBGb3Igb24gdGhlIG9uZSBzaWRlIGFyZQogICAgICAgZmlnaHRpbmcgbW9kZXN0eSwgb24gdGhlIG90aGVyIHdhbnRvbm5lc3M7IG9uIHRoZSBvbmUgY2hhc3RpdHksIG9uIHRoZSBvdGhlciB1bmNsZWFubmVzczsgb24KICAgICAgIHRoZSBvbmUgaG9uZXN0eSwgb24gdGhlIG90aGVyIGZyYXVkOyBvbiB0aGUgb25lIHBpZXR5LCBvbiB0aGUgb3RoZXIgd2lja2VkbmVzczsgb24gdGhlIG9uZQogICAgICAgY29uc2lzdGVuY3ksIG9uIHRoZSBvdGhlciBpbnNhbml0eTsgb24gdGhlIG9uZSBob25vdXIsIG9uIHRoZSBvdGhlciBiYXNlbmVzczsgb24gdGhlIG9uZQogICAgICAgY29udGluZW5jZSwgb24gdGhlIG90aGVyIGx1c3Q7IGluIHNob3J0LCBlcXVpdHksIHRlbXBlcmFuY2UsIGZvcnRpdHVkZSwgcHJ1ZGVuY2UsIGFsbCB0aGUKICAgICAgIHZpcnR1ZXMgY29udGVuZCBhZ2FpbnN0IGluaXF1aXR5IHdpdGggbHV4dXJ5LCBhZ2FpbnN0IGluZG9sZW5jZSwgYWdhaW5zdCByYXNobmVzcywgYWdhaW5zdAogICAgICAgYWxsIHRoZSB2aWNlczsgbGFzdGx5LCBhYnVuZGFuY2UgY29udGVuZHMgYWdhaW5zdCBkZXN0aXR1dGlvbiwgZ29vZCBwbGFucyBhZ2FpbnN0IGJhZmZsZWQKICAgICAgIGRlc2lnbnMsIHdpc2RvbSBhZ2FpbnN0IG1hZG5lc3MsIHdlbGwtZm91bmRlZCBob3BlIGFnYWluc3QgdW5pdmVyc2FsIGRlc3BhaXIuIEluIGEgY29udGVzdAogICAgICAgYW5kIHdhciBvZiB0aGlzIHNvcnQsIGV2ZW4gaWYgdGhlIHplYWwgb2YgbWVuIHdlcmUgdG8gZmFpbCwgd2lsbCBub3QgdGhlIGltbW9ydGFsIGdvZHMgY29tcGVsCiAgICAgICBzdWNoIG51bWVyb3VzIGFuZCBleGNlc3NpdmUgdmljZXMgdG8gYmUgZGVmZWF0ZWQgYnkgdGhlc2UgbW9zdCBlbWluZW50IHZpcnR1ZXM/IDwvdHJhbnNsYXRpb24+"
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.12.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBhcyB0aGlzIGlzIHRoZSBjYXNlLCBPIFJvbWFucywgYXMgSSBoYXZlIHNhaWQgYmVmb3JlLCBkZWZlbmQgeW91ciBob3VzZSB3aXRoIGd1YXJkcyBhbmQKICAgICAgIHZpZ2lsYW5jZS4gPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAyIiAvPiBJIGhhdmUgdGFrZW4gY2FyZSBhbmQgbWFkZSBhcnJhbmdlbWVudHMgdGhhdCB0aGVyZSBzaGFsbCBiZQogICAgICAgc3VmZmljaWVudCBwcm90ZWN0aW9uIGZvciB0aGUgY2l0eSB3aXRob3V0IGRpc3RyZXNzaW5nIHlvdSBhbmQgd2l0aG91dCBhbnkgdHVtdWx0LiBBbGwgdGhlCiAgICAgICBjb2xvbmlzdHMgYW5kIGNpdGl6ZW5zIG9mIHlvdXIgbXVuaWNpcGFsIHRvd25zLCBiZWluZyBpbmZvcm1lZCBieSBtZSBvZiB0aGlzIG5vY3R1cm5hbCBzYWxseQogICAgICAgb2YgQ2F0aWxpbmUsIHdpbGwgZWFzaWx5IGRlZmVuZCB0aGVpciBjaXRpZXMgYW5kIHRlcnJpdG9yaWVzOyB0aGUgZ2xhZGlhdG9ycyB3aGljaCBoZSB0aG91Z2h0CiAgICAgICB3b3VsZCBiZSBoaXMgbW9zdCBudW1lcm91cyBhbmQgbW9zdCB0cnVzdHkgYmFuZCwgYWx0aG91Z2ggdGhleSBhcmUgYmV0dGVyIGRpc3Bvc2VkIHRoYW4gcGFydAogICAgICAgb2YgdGhlIHBhdHJpY2lhbnMsIHdpbGwgYmUgaGVsZCBpbiBjaGVlayBieSBvdXIgcG93ZXIuIFF1aW50dXMgTWV0ZWxsdXMsIHdob20gSSwgbWFraW5nCiAgICAgICBwcm92aXNpb24gZm9yIHRoaXMsIHNlbnQgb24gdG8gdGhlIEdhbGxpYyBhbmQgUGljZW5pYW4gdGVycml0b3J5LCB3aWxsIGVpdGhlciBvdmVyd2hlbG0gdGhlCiAgICAgICBtYW4sIG9yIHdpbGwgcHJldmVudCBhbGwgaGlzIG1vdGlvbnMgYW5kIGF0dGVtcHRzOyBidXQgd2l0aCByZXNwZWN0IHRvIHRoZSBhcnJhbmdlbWVudCBvZiBhbGwKICAgICAgIG90aGVyIG1hdHRlcnMsIGFuZCBtYXR1cmluZyBhbmQgYWN0aW5nIG9uIG91ciBwbGFucywgd2Ugc2hhbGwgY29uc3VsdCB0aGUgc2VuYXRlLCB3aGljaCwgYXMKICAgICAgIHlvdSBhcmUgYXdhcmUsIGlzIGNvbnZlbmVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAyIiAvPiBJIGhhdmUgdGFrZW4gY2FyZSBhbmQgbWFkZSBhcnJhbmdlbWVudHMgdGhhdCB0aGVyZSBzaGFsbCBiZQogICAgICAgc3VmZmljaWVudCBwcm90ZWN0aW9uIGZvciB0aGUgY2l0eSB3aXRob3V0IGRpc3RyZXNzaW5nIHlvdSBhbmQgd2l0aG91dCBhbnkgdHVtdWx0LiBBbGwgdGhlCiAgICAgICBjb2xvbmlzdHMgYW5kIGNpdGl6ZW5zIG9mIHlvdXIgbXVuaWNpcGFsIHRvd25zLCBiZWluZyBpbmZvcm1lZCBieSBtZSBvZiB0aGlzIG5vY3R1cm5hbCBzYWxseQogICAgICAgb2YgQ2F0aWxpbmUsIHdpbGwgZWFzaWx5IGRlZmVuZCB0aGVpciBjaXRpZXMgYW5kIHRlcnJpdG9yaWVzOyB0aGUgZ2xhZGlhdG9ycyB3aGljaCBoZSB0aG91Z2h0CiAgICAgICB3b3VsZCBiZSBoaXMgbW9zdCBudW1lcm91cyBhbmQgbW9zdCB0cnVzdHkgYmFuZCwgYWx0aG91Z2ggdGhleSBhcmUgYmV0dGVyIGRpc3Bvc2VkIHRoYW4gcGFydAogICAgICAgb2YgdGhlIHBhdHJpY2lhbnMsIHdpbGwgYmUgaGVsZCBpbiBjaGVlayBieSBvdXIgcG93ZXIuIFF1aW50dXMgTWV0ZWxsdXMsIHdob20gSSwgbWFraW5nCiAgICAgICBwcm92aXNpb24gZm9yIHRoaXMsIHNlbnQgb24gdG8gdGhlIEdhbGxpYyBhbmQgUGljZW5pYW4gdGVycml0b3J5LCB3aWxsIGVpdGhlciBvdmVyd2hlbG0gdGhlCiAgICAgICBtYW4sIG9yIHdpbGwgcHJldmVudCBhbGwgaGlzIG1vdGlvbnMgYW5kIGF0dGVtcHRzOyBidXQgd2l0aCByZXNwZWN0IHRvIHRoZSBhcnJhbmdlbWVudCBvZiBhbGwKICAgICAgIG90aGVyIG1hdHRlcnMsIGFuZCBtYXR1cmluZyBhbmQgYWN0aW5nIG9uIG91ciBwbGFucywgd2Ugc2hhbGwgY29uc3VsdCB0aGUgc2VuYXRlLCB3aGljaCwgYXMKICAgICAgIHlvdSBhcmUgYXdhcmUsIGlzIGNvbnZlbmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.12.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3cgb25jZSBtb3JlIEkgd2lzaCB0aG9zZSB3aG8gaGF2ZSByZW1haW5lZCBpbiB0aGUgY2l0eSwgYW5kIHdobywgY29udHJhcnkgdG8gdGhlIHNhZmV0eQogICAgICAgb2YgdGhlIGNpdHkgYW5kIG9mIGFsbCBvZiB5b3UsIGhhdmUgYmVlbiBsZWZ0IGluIHRoZSBjaXR5IGJ5IENhdGlsaW5lLCBhbHRob3VnaCB0aGV5IGFyZQogICAgICAgZW5lbWllcywgeWV0IGJlY2F1c2UgdGhleSB3ZXJlIGJvcm4gY2l0aXplbnMsIHRvIGJlIHdhcm5lZCBhZ2FpbiBhbmQgYWdhaW4gYnkgbWUuIElmIG15CiAgICAgICBsZW5pdHkgaGFzIGFwcGVhcmVkIHRvIGFueSBvbmUgdG9vIHJlbWlzcywgaXQgaGFzIGJlZW4gb25seSB3YWl0aW5nIHRoYXQgdGhhdCBtaWdodCBicmVhayBvdXQKICAgICAgIHdoaWNoIHdhcyBseWluZyBoaWQuIEFzIHRvIHRoZSBmdXR1cmUsIEkgY2Fubm90IG5vdyBmb3JnZXQgdGhhdCB0aGlzIGlzIG15IGNvdW50cnksIHRoYXQgSSBhbQogICAgICAgdGhlIGNvbnN1bCBvZiB0aGVzZSBjaXRpemVuczsgdGhhdCBJIG11c3QgZWl0aGVyIGxpdmUgd2l0aCB0aGVtLCBvciBkaWUgZm9yIHRoZW0uIFRoZXJlIGlzIG5vCiAgICAgICBndWFyZCBhdCB0aGUgZ2F0ZSwgbm8gb25lIHBsb3R0aW5nIGFnYWluc3QgdGhlaXIgcGF0aDsgaWYgYW55IG9uZSB3aXNoZXMgdG8gZ28sIGhlIGNhbgogICAgICAgcHJvdmlkZSBmb3IgaGltc2VsZjsgYnV0IGlmIGFueSBvbmUgc3RpcnMgaW4gdGhlIGNpdHksIGFuZCBpZiBJIGRldGVjdCBub3Qgb25seSBhbnkgYWN0aW9uLAogICAgICAgYnV0IGFueSBhdHRlbXB0IG9yIGRlc2lnbiBhZ2FpbnN0IHRoZSBjb3VudHJ5LCBoZSBzaGFsbCBmZWVsIHRoYXQgdGhlcmUgYXJlIGluIHRoaXMgY2l0eQogICAgICAgdmlnaWxhbnQgY29uc3VscywgZW1pbmVudCBtYWdpc3RyYXRlcywgYSBicmF2ZSBzZW5hdGUsIGFybXMsIGFuZCBwcmlzb25zOyB3aGljaCBvdXIgYW5jZXN0b3JzCiAgICAgICBhcHBvaW50ZWQgYXMgdGhlIGF2ZW5nZXJzIG9mIG5lZmFyaW91cyBhbmQgY29udmljdGVkIGNyaW1lcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.13.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBhbGwgdGhpcyBzaGFsbCBiZSBzbyBkb25lLCBPIFJvbWFucywgdGhhdCBhZmZhaXJzIG9mIHRoZSBncmVhdGVzdCBpbXBvcnRhbmNlIHNoYWxsIGJlCiAgICAgICB0cmFuc2FjdGVkIHdpdGggdGhlIGxlYXN0IHBvc3NpYmxlIGRpc3R1cmJhbmNlOyB0aGUgZ3JlYXRlc3QgZGFuZ2VycyBzaGFsbCBiZSBhdm9pZGVkIHdpdGhvdXQKICAgICAgIGFueSB0dW11bHQ7IGFuIGludGVybmFsIGNpdmlsIHdhciB0aGUgbW9zdCBjcnVlbCBhbmQgdGVycmlibGUgaW4gdGhlIG1lbW9yeSBvZiBtYW4sIHNoYWxsIGJlCiAgICAgICBwdXQgYW4gZW5kIHRvIGJ5IG1lIGFsb25lIGluIHRoZSByb2JlIG9mIHBlYWNlIGFjdGluZyBhcyBnZW5lcmFsIGFuZCBjb21tYW5kZXItaW4tY2hpZWYuIEFuZAogICAgICAgdGhpcyBJIHdpbGwgc28gYXJyYW5nZSwgTyBSb21hbnMsIHRoYXQgaWYgaXQgY2FuIGJlIGJ5IGFueSBtZWFucyBtYW5hZ2VkLCBldmVuIHRoZSBtb3N0CiAgICAgICB3b3J0aGxlc3MgbWFuIHNoYWxsIG5vdCBzdWZmZXIgdGhlIHB1bmlzaG1lbnQgb2YgaGlzIGNyaW1lcyBpbiB0aGlzIGNpdHkuIEJ1dCBpZiB0aGUgdmlvbGVuY2UKICAgICAgIG9mIG9wZW4gYXVkYWNpdHksIGlmIGRhbmdlciBpbXBlbmRpbmcgb3ZlciB0aGUgcmVwdWJsaWMgZHJpdmVzIG1lIG9mIG5lY2Vzc2l0eSBmcm9tIHRoaXMKICAgICAgIG1lcmNpZnVsIGRpc3Bvc2l0aW9uLCBhdCBhbGwgZXZlbnRzIEkgd2lsbCBtYW5hZ2UgdGhpcywgd2hpY2ggc2VlbXMgc2NhcmNlbHkgZXZlbiB0byBiZSBob3BlZAogICAgICAgZm9yIGluIHNvIGdyZWF0IGFuZCBzbyB0cmVhY2hlcm91cyBhIHdhciwgdGhhdCBubyBnb29kIG1hbiBzaGFsbCBmYWxsLCBhbmQgdGhhdCB5b3UgbWF5IGFsbAogICAgICAgYmUgc2F2ZWQgYnkgdGhlIHB1bmlzaG1lbnQgb2YgYSBmZXcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.13.29'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgdGhpcyBkYXksIE8gUm9tYW5zLCB0aGUgcmVwdWJsaWMsIGFuZCBhbGwgeW91ciBsaXZlcywgeW91ciBnb29kcywgeW91ciBmb3J0dW5lcywKICAgICAgIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCB0aGlzIGhvbWUgb2YgbW9zdCBpbGx1c3RyaW91cyBlbXBpcmUsIHRodXMgbW9zdCBmb3J0dW5hdGUgYW5kCiAgICAgICBiZWF1dGlmdWwgY2l0eSwgYnkgdGhlIGdyZWF0IGxvdmUgb2YgdGhlIGltbW9ydGFsIGdvZHMgZm9yIHlvdSwgYnkgbXkgbGFib3VycyBhbmQgY291bnNlbHMKICAgICAgIGFuZCBkYW5nZXJzLCBzbmF0Y2hlZCBmcm9tIGZpcmUgYW5kIHN3b3JkLCBhbmQgYWxtb3N0IGZyb20gdGhlIHZlcnkgamF3cyBvZiBmYXRlLCBhbmQKICAgICAgIHByZXNlcnZlZCBhbmQgcmVzdG9yZWQgdG8geW91LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBpZiB0aG9zZSBkYXlzIG9uIHdoaWNoIHdlIGFyZSBwcmVzZXJ2ZWQgYXJlIG5vdCBsZXNzCiAgICAgICBwbGVhc2FudCB0byB1cywgb3IgbGVzcyBpbGx1c3RyaW91cywgdGhhbiB0aG9zZSBvbiB3aGljaCB3ZSBhcmUgYm9ybiwgYmVjYXVzZSB0aGUgam95IG9mCiAgICAgICBiZWluZyBzYXZlZCBpcyBjZXJ0YWluLCB0aGUgZ29vZCBmb3J0dW5lIG9mIGJlaW5nIGJvcm4gdW5jZXJ0YWluLCBhbmQgYmVjYXVzZSB3ZSBhcmUgYm9ybgogICAgICAgd2l0aG91dCBmZWVsaW5nIGl0LCBidXQgd2UgYXJlIHByZXNlcnZlZCB3aXRoIGdyZWF0IGRlbGlnaHQ7IHllczsgc2luY2Ugd2UgaGF2ZSwgYnkgb3VyCiAgICAgICBhZmZlY3Rpb24gYW5kIGJ5IG91ciBnb29kIHJlcG9ydCwgcmFpc2VkIHRvIHRoZSBpbW1vcnRhbCBnb2RzIHRoYXQgUm9tdWx1cyB3aG8gYnVpbHQgdGhpcwogICAgICAgY2l0eSwgaGUsIHRvbywgd2hvIGhhcyBwcmVzZXJ2ZWQgdGhpcyBjaXR5LCBidWlsdCBieSBoaW0sIGFuZCBlbWJlbGxpc2hlZCBhcyB5b3Ugc2VlIGl0LAogICAgICAgb3VnaHQgdG8gYmUgaGVsZCBpbiB0ZXJyb3IgYnkgeW91IGFuZCB5b3VyIHBvc3Rlcml0eTsgZm9yIHdlIGhhdmUgZXh0aW5ndWlzaGVkIGZsYW1lcyB3aGljaAogICAgICAgd2VyZSBhbG1vc3QgbGFpZCB1bmRlciBhbmQgcGxhY2VkIGFyb3VuZCB0aGUgdGVtcGxlcyBhbmQgc2hyaW5lcywgYW5kIGhvdXNlcyBhbmQgd2FsbHMgb2YgdGhlCiAgICAgICB3aG9sZSBjaXR5OyB3ZSBoYXZlIHR1cm5lZCB0aGUgZWRnZSBvZiBzd29yZHMgZHJhd24gYWdhaW5zdCB0aGUgcmVwdWJsaWMsIGFuZCBoYXZlIHR1cm5lZAogICAgICAgYXNpZGUgdGhlaXIgcG9pbnRzIGZyb20geW91ciB0aHJvYXRzLjxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNpbmNlIGFsbCB0aGlzIGhhcwogICAgICAgYmVlbiBkaXNwbGF5ZWQgaW4gdGhlIHNlbmF0ZSwgYW5kIG1hZGUgbWFuaWZlc3QsIGFuZCBkZXRlY3RlZCBieSBtZSwgSSB3aWxsIG5vdyBleHBsYWluIGl0CiAgICAgICBicmllZmx5LCB0aGF0IHlvdSwgTyBjaXRpemVucywgdGhhdCBhcmUgYXMgeWV0IGlnbm9yYW50IG9mIGl0LCBhbmQgYXJlIGluIHN1c3BlbnNlLCBtYXkgYmUKICAgICAgIGFibGUgdG8gc2VlIGhvdyBncmVhdCB0aGUgZGFuZ2VyIHdhcywgaG93IGV2aWRlbnQgYW5kIGJ5IHdoYXQgbWVhbnMgaXQgd2FzIGRldGVjdGVkIGFuZAogICAgICAgYXJyZXN0ZWQuIEZpcnN0IG9mIGFsbCwgc2luY2UgQ2F0aWxpbmUsIGEgZmV3IGRheXMgYWdvLCBidXJzdCBvdXQgb2YgdGhlIGNpdHksIHdoZW4gaGUgaGFkCiAgICAgICBsZWZ0IGJlaGluZCB0aGUgY29tcGFuaW9ucyBvZiBoaXMgd2lja2VkbmVzcywgdGhlIGFjdGl2ZSBsZWFkZXJzIG9mIHRoaXMgaW5mYW1vdXMgd2FyLCBJIGhhdmUKICAgICAgIGNvbnRpbnVhbGx5IHdhdGNoZWQgYW5kIHRha2VuIGNhcmUsIE8gUm9tYW5zLCBvZiB0aGUgbWVhbnMgYnkgd2hpY2ggd2UgbWlnaHQgYmUgc2FmZSBhbWlkCiAgICAgICBzdWNoIGdyZWF0IGFuZCBzdWNoIGNhcmVmdWxseSBjb25jZWFsZWQgdHJlYWNoZXJ5LiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgaWYgdGhvc2UgZGF5cyBvbiB3aGljaCB3ZSBhcmUgcHJlc2VydmVkIGFyZSBub3QgbGVzcwogICAgICAgcGxlYXNhbnQgdG8gdXMsIG9yIGxlc3MgaWxsdXN0cmlvdXMsIHRoYW4gdGhvc2Ugb24gd2hpY2ggd2UgYXJlIGJvcm4sIGJlY2F1c2UgdGhlIGpveSBvZgogICAgICAgYmVpbmcgc2F2ZWQgaXMgY2VydGFpbiwgdGhlIGdvb2QgZm9ydHVuZSBvZiBiZWluZyBib3JuIHVuY2VydGFpbiwgYW5kIGJlY2F1c2Ugd2UgYXJlIGJvcm4KICAgICAgIHdpdGhvdXQgZmVlbGluZyBpdCwgYnV0IHdlIGFyZSBwcmVzZXJ2ZWQgd2l0aCBncmVhdCBkZWxpZ2h0OyB5ZXM7IHNpbmNlIHdlIGhhdmUsIGJ5IG91cgogICAgICAgYWZmZWN0aW9uIGFuZCBieSBvdXIgZ29vZCByZXBvcnQsIHJhaXNlZCB0byB0aGUgaW1tb3J0YWwgZ29kcyB0aGF0IFJvbXVsdXMgd2hvIGJ1aWx0IHRoaXMKICAgICAgIGNpdHksIGhlLCB0b28sIHdobyBoYXMgcHJlc2VydmVkIHRoaXMgY2l0eSwgYnVpbHQgYnkgaGltLCBhbmQgZW1iZWxsaXNoZWQgYXMgeW91IHNlZSBpdCwKICAgICAgIG91Z2h0IHRvIGJlIGhlbGQgaW4gdGVycm9yIGJ5IHlvdSBhbmQgeW91ciBwb3N0ZXJpdHk7IGZvciB3ZSBoYXZlIGV4dGluZ3Vpc2hlZCBmbGFtZXMgd2hpY2gKICAgICAgIHdlcmUgYWxtb3N0IGxhaWQgdW5kZXIgYW5kIHBsYWNlZCBhcm91bmQgdGhlIHRlbXBsZXMgYW5kIHNocmluZXMsIGFuZCBob3VzZXMgYW5kIHdhbGxzIG9mIHRoZQogICAgICAgd2hvbGUgY2l0eTsgd2UgaGF2ZSB0dXJuZWQgdGhlIGVkZ2Ugb2Ygc3dvcmRzIGRyYXduIGFnYWluc3QgdGhlIHJlcHVibGljLCBhbmQgaGF2ZSB0dXJuZWQKICAgICAgIGFzaWRlIHRoZWlyIHBvaW50cyBmcm9tIHlvdXIgdGhyb2F0cy48L3RyYW5zbGF0aW9uPg=="
translation['3.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgc2luY2UgYWxsIHRoaXMgaGFzCiAgICAgICBiZWVuIGRpc3BsYXllZCBpbiB0aGUgc2VuYXRlLCBhbmQgbWFkZSBtYW5pZmVzdCwgYW5kIGRldGVjdGVkIGJ5IG1lLCBJIHdpbGwgbm93IGV4cGxhaW4gaXQKICAgICAgIGJyaWVmbHksIHRoYXQgeW91LCBPIGNpdGl6ZW5zLCB0aGF0IGFyZSBhcyB5ZXQgaWdub3JhbnQgb2YgaXQsIGFuZCBhcmUgaW4gc3VzcGVuc2UsIG1heSBiZQogICAgICAgYWJsZSB0byBzZWUgaG93IGdyZWF0IHRoZSBkYW5nZXIgd2FzLCBob3cgZXZpZGVudCBhbmQgYnkgd2hhdCBtZWFucyBpdCB3YXMgZGV0ZWN0ZWQgYW5kCiAgICAgICBhcnJlc3RlZC4gRmlyc3Qgb2YgYWxsLCBzaW5jZSBDYXRpbGluZSwgYSBmZXcgZGF5cyBhZ28sIGJ1cnN0IG91dCBvZiB0aGUgY2l0eSwgd2hlbiBoZSBoYWQKICAgICAgIGxlZnQgYmVoaW5kIHRoZSBjb21wYW5pb25zIG9mIGhpcyB3aWNrZWRuZXNzLCB0aGUgYWN0aXZlIGxlYWRlcnMgb2YgdGhpcyBpbmZhbW91cyB3YXIsIEkgaGF2ZQogICAgICAgY29udGludWFsbHkgd2F0Y2hlZCBhbmQgdGFrZW4gY2FyZSwgTyBSb21hbnMsIG9mIHRoZSBtZWFucyBieSB3aGljaCB3ZSBtaWdodCBiZSBzYWZlIGFtaWQKICAgICAgIHN1Y2ggZ3JlYXQgYW5kIHN1Y2ggY2FyZWZ1bGx5IGNvbmNlYWxlZCB0cmVhY2hlcnkuIDwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RnVydGhlciwgd2hlbiBJIGRyb3ZlIENhdGlsaW5lIG91dCBvZiB0aGUgY2l0eSwgKGZvciBJIGRvIG5vdCBmZWFyIHRoZSB1bnBvcHVsYXJpdHkgb2YgdGhpcwogICAgICAgZXhwcmVzc2lvbiwgd2hlbiB0aGF0IGlzIG1vcmUgdG8gYmUgZmVhcmVkIHRoYXQgSSBzaG91bGQgYmUgYmxhbWVkIGJlY2F1c2UgaGUgaGFzIGRlcGFydGVkCiAgICAgICBhbGl2ZSwpIGJ1dCB0aGVuIHdoZW4gSSB3aXNoZWQgaGltIHRvIGJlIHJlbW92ZWQsIEkgdGhvdWdodCBlaXRoZXIgdGhhdCB0aGUgcmVzdCBvZiB0aGUgYmFuZAogICAgICAgb2YgY29uc3BpcmF0b3JzIHdvdWxkIGRlcGFydCB3aXRoIGhpbSwgb3IgdGhhdCB0aGV5IHdobyByZW1haW5lZCB3b3VsZCBiZSB3ZWFrIGFuZCBwb3dlcmxlc3MKICAgICAgIHdpdGhvdXQgaGltLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIEksIGFzIEkgc2F3IHRoYXQgdGhvc2Ugd2hvbSBJIGtuZXcgdG8gYmUgaW5mbGFtZWQgd2l0aCB0aGUgZ3JlYXRlc3QgbWFkbmVzcyBhbmQKICAgICAgIHdpY2tlZG5lc3Mgd2VyZSBhbW9uZyB1cywgYW5kIGhhZCByZW1haW5lZCBhdCBSb21lLCBzcGVudCBhaWwgbXkgbmlnaHRzIGFuZCBkYXlzIGluIHRha2luZwogICAgICAgY2FyZSB0byBrbm93IGFuZCBzZWUgd2hhdCB0aGV5IHdlcmUgZG9pbmcsIGFuZCB3aGF0IHRoZXkgd2VyZSBjb250cml2aW5nIHRoYXQsIHNpbmNlIHdoYXQgSQogICAgICAgc2FpZCB3b3VsZCwgZnJvbSB0aGUgaW5jcmVkaWJsZSBlbm9ybWl0eSBvZiB0aGUgd2lja2VkbmVzcywgbWFrZSBsZXNzIGltcHJlc3Npb24gb24geW91cgogICAgICAgZWFycywgSSBtaWdodCBzbyBkZXRlY3QgdGhlIHdob2xlIGJ1c2luZXNzIHRoYXQgeW91IG1pZ2h0IHdpdGggYWxsIHlvdXIgaGVhcnRzIHByb3ZpZGUgZm9yCiAgICAgICB5b3VyIHNhZmV0eSwgd2hlbiB5b3Ugc2F3IHRoZSBjcmltZSB3aXRoIHlvdXIgb3duIGV5ZXMuIFRoZXJlZm9yZSwgd2hlbiBJIGZvdW5kIHRoYXQgdGhlCiAgICAgICBhbWJhc3NhZG9ycyBvZiB0aGUgQWxsb2Jyb2dlcyBoYWQgYmVlbiB0YW1wZXJlZCB3aXRoIGJ5IFB1YmxpdXMgTGVudHVsdXMsIGZvciB0aGUgc2FrZSBvZgogICAgICAgZXhjaXRpbmcgYSBUcmFuc2FscGluZSB3YXIgYW5kIGNvbW1vdGlvbiBpbiBHYXVsLCBhbmQgdGhhdCB0aGV5LCBvbiB0aGVpciByZXR1cm4gdG8gR2F1bCwgaGFkCiAgICAgICBiZWVuIHNlbnQgd2l0aCBsZXR0ZXJzIGFuZCBtZXNzYWdlcyB0byBDYXRpbGluZSBvbiB0aGUgc2FtZSByb2FkLCBhbmQgdGhhdCBWdWx0dXJjaXVzIGhhZAogICAgICAgYmVlbiBhZGRlZCB0byB0aGVtIGFzIGEgY29tcGFuaW9uLCBhbmQgdGhhdCBoZSB0b28gaGFkIGhhZCBsZXR0ZXJzIGdpdmVuIGhpbSBmb3IgQ2F0aWxpbmUsIEkKICAgICAgIHRob3VnaHQgdGhhdCBhbiBvcHBvcnR1bml0eSB3aXRzIGdpdmVuIG1lIG9mIGNvbnRyaXZpbmcgd2hhdCB3YXMgbW9zdCBkaWZmaWN1bHQsIGFuZCB3aGljaCBJCiAgICAgICB3YXMgYWx3YXlzIHdpc2hpbmcgdGhlIGltbW9ydGFsIGdvZHMgbWlnaHQgZ3JhbnQsIHRoYXQgdGhlIHdob2xlIGJ1c2luZXNzIG1pZ2h0IGJlIG1hbmlmZXN0bHkKICAgICAgIGRldGVjdGVkIG5vdCBieSBtZSBhbG9uZSwgYnV0IGJ5IHRoZSBzZW5hdGUgYWxzbywgYW5kIGJ5IHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlZm9yZSwgeWVzdGVyZGF5IEkgc3VtbW9uZWQgTHVjaXVzIEZsYWNjdXMgYW5kIEMuIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGJyYXZlIG1lbiBhbmQKICAgICAgIHdlbGwtYWZmZWN0ZWQgdG8gdGhlIHJlcHVibGljLiBJIGV4cGxhaW5lZCB0byB0aGVtIHRoZSB3aG9sZSBtYXR0ZXIsIGFuZCBzaG93ZWQgdGhlbSB3aGF0IEkKICAgICAgIHdpc2hlZCB0byBoYXZlIGRvbmUuIEJ1dCB0aGV5LCBmdWxsIG9mIG5vYmxlIGFuZCB3b3J0aHkgc2VudGltZW50cyB0b3dhcmRzIHRoZSByZXB1YmxpYywKICAgICAgIHdpdGhvdXQgaGVzaXRhdGlvbiwgYW5kIHdpdGhvdXQgYW55IGRlbGF5LCB1bmRlcnRvb2sgdGhlIGJ1c2luZXNzLCBhbmQgd2hlbiBpdCB3YXMgZXZlbmluZywKICAgICAgIHdlbnQgc2VjcmV0bHkgdG8gdGhlIE11bHZpYW4gYnJpZGdlLCBhbmQgdGhlcmUgc28gZGlzdHJpYnV0ZWQgdGhlbXNlbHZlcyBpbiB0aGUgbmVhcmVzdAogICAgICAgdmlsbGFzLCB0aGF0IHRoZSBUaWJlciBhbmQgdGhlIGJyaWRnZSB3YXMgYmV0d2VlbiB0aGVtLiBBbmQgdGhleSB0b29rIHRvIHRoZSBzYW1lIHBsYWNlLAogICAgICAgd2l0aG91dCBhbnkgb25lIGhhdmluZyB0aGUgbGVhc3Qgc3VzcGljaW9uIG9mIGl0LCBtYW55IGJyYXZlIG1lbiwgYW5kIEkgaGFkIHNlbnQgbWFueSBwaWNrZWQKICAgICAgIHlvdW5nIG1lbiBvZiB0aGUgcHJlZmVjdHVyZSBvZiBSZWF0ZSwgd2hvc2UgYXNzaXN0YW5jZSBJIGNvbnN0YW50bHkgZW1wbG95IGluIHRoZSBwcm90ZWN0aW9uCiAgICAgICBvZiB0aGUgcmVwdWJsaWMsIGFybWVkIHdpdGggc3dvcmRzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdGhlIG1lYW50aW1lLCBhYm91dAogICAgICAgdGhlIGVuZCBvZiB0aGUgdGhpcmQgd2F0Y2gsIHdoZW4gdGhlIGFtYmFzc2Fkb3JzIG9mIHRoZSBBbGxvYnJvZ2VzLCB3aXRoIGEgZ3JlYXQgcmV0aW51ZSBhbmQKICAgICAgIFZ1bHR1cmNpdXMgd2l0aCB0aGVtLCBiZWdhbiB0byBjb21lIHVwb24gdGhlIE11bHZpYW4gYnJpZGdlLCBhbiBhdHRhY2sgaXMgbWFkZSB1cG9uIHRoZW07CiAgICAgICBzd29yZHMgYXJlIGRyYXduIGJvdGggYnkgdGhlbSBhbmQgYnkgb3VyIHBlb3BsZTsgdGhlIG1hdHRlciB3YXMgdW5kZXJzdG9vZCBieSB0aGUgcHJhZXRvcnMKICAgICAgIGFsb25lLCBidXQgd2FzIHVua25vd24gdG8gdGhlIHJlc3QuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0aGUgbWVhbnRpbWUsIGFib3V0CiAgICAgICB0aGUgZW5kIG9mIHRoZSB0aGlyZCB3YXRjaCwgd2hlbiB0aGUgYW1iYXNzYWRvcnMgb2YgdGhlIEFsbG9icm9nZXMsIHdpdGggYSBncmVhdCByZXRpbnVlIGFuZAogICAgICAgVnVsdHVyY2l1cyB3aXRoIHRoZW0sIGJlZ2FuIHRvIGNvbWUgdXBvbiB0aGUgTXVsdmlhbiBicmlkZ2UsIGFuIGF0dGFjayBpcyBtYWRlIHVwb24gdGhlbTsKICAgICAgIHN3b3JkcyBhcmUgZHJhd24gYm90aCBieSB0aGVtIGFuZCBieSBvdXIgcGVvcGxlOyB0aGUgbWF0dGVyIHdhcyB1bmRlcnN0b29kIGJ5IHRoZSBwcmFldG9ycwogICAgICAgYWxvbmUsIGJ1dCB3YXMgdW5rbm93biB0byB0aGUgcmVzdC4gPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbiwgYnkgdGhlIGludGVydmVudGlvbiBvZiBQb210aW51cyBhbmQgRmxhY2N1cywgdGhlIGZpZ2h0IHdoaWNoIGhhZCBiZWd1biB3YXMgcHV0IGFuIGVuZAogICAgICAgdG87IGFsbCB0aGUgbGV0dGVycyB3aGljaCB3ZXJlIGluIHRoZSBoYW5kcyBvZiB0aGUgd2hvbGUgY29tcGFueSBhcmUgZGVsaXZlcmVkIHRvIHRoZQogICAgICAgcHJhZXRvcnMgd2l0aCB0aW1lIHNlYWxzIHVuYnJva2VuOyB0aGUgbWVuIHRoZW1zZWx2ZXMgYXJlIGFycmVzdGVkIGFuZCBicm91Z2h0IHRvIG1lIGF0CiAgICAgICBkYXlicmVhay4gQW5kIEkgaW1tZWRpYXRlbHkgc3VtbW9uZWQgdGhhdCBtb3N0IHdvcnRobGVzcyBjb250cml2ZXIgb2YgYWxsIHRoaXMgd2lja2VkbmVzcywKICAgICAgIEdhYmluaXVzLCBhcyB5ZXQgc3VzcGVjdGluZyBub3RoaW5nOyBhZnRlciBoaW0sIFAuIFN0YXRpbGl1cyBpcyBzZW50IGZvciwgYW5kIGFmdGVyIGhpbQogICAgICAgQ2V0aGVndXM7IGJ1dCBMZW50dWx1cyB3YXMgYSBsb25nIHRpbWUgaW4gY29taW5nLOKAlEkgc3VwcG9zZSwgYmVjYXVzZSwgY29udHJhcnkgdG8KICAgICAgIGhpcyBjdXN0b20sIGhlIGhhZCBiZWVuIHVwIGEgbG9uZyB0aW1lIHRoZSBuaWdodCBiZWZvcmUsIHdyaXRpbmcgbGV0dGVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIHRob3NlIG1vc3Qgbm9ibGUgYW5kIGV4Y2VsbGVudCBtZW4gb2YgdGhlIHdob2xlIGNpdHksIHdobywgaGVhcmluZyBvZiB0aGUgbWF0dGVyLAogICAgICAgY2FtZSBpbiBjcm93ZHMgdG8gbWUgaW4gdGhlIG1vcm5pbmcsIHRob3VnaHQgaXQgYmVzdCBmb3IgbWUgdG8gb3BlbiB0aGUgbGV0dGVycyBiZWZvcmUgSQogICAgICAgcmVsYXRlZCB0aGUgbWF0dGVyIHRvIHRoZSBzZW5hdGUsIGxlc3QsIGlmIG5vdGhpbmcgd2VyZSBmb3VuZCBpbiB0aGVtLCBzbyBncmVhdCBhIGRpc3R1cmJhbmNlCiAgICAgICBtaWdodCBzZWVtIHRvIGhhdmUgYmVlbiBjYXVzZWQgdG8gdGhlIHN0YXRlIGZvciBub3RoaW5nLCBJIHNhaWQgSSB3b3VsZCBuZXZlciBzbyBhY3QgYXMKICAgICAgIHNocmluayBmcm9tIHJlZmVycmluZyBtYXR0ZXIgb2YgcHVibGljIGRhbmdlciB0byB0aGUgcHVibGljIGNvdW5jaWwuIEluIHRydXRoIGlmLCBPIFJvbWFucywKICAgICAgIHRoZXNlIHRoaW5ncyB3aGljaCBoYWQgYmVlbiByZXBvcnRlZCB0byBtZSBoYWQgbm90IGJlZW4gZm91bmQgaW4gdGhlbSwgeWV0IEkgZGlkIG5vdCB0aGluayBJCiAgICAgICBvdWdodCwgaW4gc3VjaCBhIGNyaXNpcyBvZiB0aGUgcmVwdWJsaWMsIHRvIGJlIGFmcmFpZCBvZiB0aGUgaW1wdXRhdGlvbiBvZiBvdmVyLWRpbGlnZW5jZS4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4gSSBxdWlja2x5IHN1bW1vbmVkIGEgZnVsbCBzZW5hdGUsIGFzIHlvdSBzYXc7IGFuZAogICAgICAgbWVhbnRpbWUsIHdpdGhvdXQgYW55IGRlbGF5LCBieSB0aGUgYWR2aWNlIG9mIHRoZSBBbGxvYnJvZ2VzLCBJIHNlbnQgQ2FpdXMgU3VscGljaXVzIHRoZQogICAgICAgcHJhZXRvciwgYSBicmF2ZSBtYW4sIHRvIGJyaW5nIHdoYXRldmVyIGFybXMgaGUgY291bGQgZmluZCBpbiB0aGUgaG91c2Ugb2YgQ2V0aGVndXMsIHdoZW5jZQogICAgICAgaGUgZGlkIGJyaW5nIGEgZ3JlYXQgbnVtYmVyIG9mIHN3b3JkcyBhbmQgZGFnZ2Vycy4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJIHF1aWNrbHkgc3VtbW9uZWQgYSBmdWxsIHNlbmF0ZSwgYXMgeW91IHNhdzsgYW5kCiAgICAgICBtZWFudGltZSwgd2l0aG91dCBhbnkgZGVsYXksIGJ5IHRoZSBhZHZpY2Ugb2YgdGhlIEFsbG9icm9nZXMsIEkgc2VudCBDYWl1cyBTdWxwaWNpdXMgdGhlCiAgICAgICBwcmFldG9yLCBhIGJyYXZlIG1hbiwgdG8gYnJpbmcgd2hhdGV2ZXIgYXJtcyBoZSBjb3VsZCBmaW5kIGluIHRoZSBob3VzZSBvZiBDZXRoZWd1cywgd2hlbmNlCiAgICAgICBoZSBkaWQgYnJpbmcgYSBncmVhdCBudW1iZXIgb2Ygc3dvcmRzIGFuZCBkYWdnZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBpbnRyb2R1Y2VkIFZ1bHR1cmNpdXMgd2l0aG91dCB0aGUgR2F1bHMuIEJ5IHRoZSBjb21tYW5kIG9mIHRoZSBzZW5hdGUsIEkgcGxlZGdlZCBoaW0gdGhlCiAgICAgICBwdWJsaWMgZmFpdGggZm9yIGhpcyBzYWZldHkuIEkgZXhob3J0ZWQgaGltIGZlYXJsZXNzbHkgdG8gdGVsbCBhbGwgaGUga25ldy4gVGhlbiwgd2hlbiBoZSBoYWQKICAgICAgIHNjYXJjZWx5IHJlY292ZXJlZCBoaW1zZWxmIGZyb20gaGlzIGdyZWF0IGFsYXJtLCBoZSBzYWlkOiB0aGF0IGhlIGhhZCBtZXNzYWdlcyBhbmQgbGV0dGVycwogICAgICAgZm9yIENhdGlsaW5lLCBmcm9tIFB1YmxpdXMgTGVudHVsdXMsIHRvIGF2YWlsIGhpbXNlbGYgb2YgdGhlIGd1YXJkIG9mIHRoZSBzbGF2ZXMsIGFuZCB0byBjb21lCiAgICAgICB0b3dhcmRzIHRoZSBjaXR5IHdpdGggaGlzIGFybXkgYXMgcXVpY2tseSBhcyBwb3NzaWJsZTsgYW5kIHRoYXQgd2FzIHRvIGJlIGRvbmUgd2l0aCB0aGUKICAgICAgIGludGVudGlvbiB0aGF0LCB3aGVuIHRoZXkgaGFkIHNldCBmaXJlIHRvIHRoZSBjaXR5IG9uIGFsbCBzaWRlcyBhcyBpdCBoYWQgYmVlbiBhcnJhbmdlZCBhbmQKICAgICAgIGRpc3RyaWJ1dGVkLCBhbmQgaGFkIG1hZGUgYSBncmVhdCBtYXNzYWNyZSBvZiB0aGUgY2l0aXplbnMsIGhlIG1pZ2h0IGJlIGF0IGhhbmQgdG8gY2F0Y2gKICAgICAgIHRob3NlIHdobyBmbGVkLCBhbmQgdG8gam9pbiBoaW1zZWxmIHRvIHRoZSBsZWFkZXJzIHdpdGhpbiB0aGUgY2l0eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGUgR2F1bHMgYmVpbmcgaW50cm9kdWNlZCwgc2FpZCB0aGF0IGFuIG9hdGggaGFkIGJlZW4gYWRtaW5pc3RlcmVkIHRvCiAgICAgICAgPHBiIG49IjMwOCIgLz4gdGhlbSwgYW5kIGxldHRlcnMgZ2l2ZW4gdGhlbSBieSBQdWJsaXVzIExlbnR1bHVzLCBDZXRoZWd1cywgYW5kIFN0YXRpbGl1cywgZm9yCiAgICAgICB0aGVpciBuYXRpb247IGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW5qb2luZWQgYnkgdGhlbSwgYW5kIGJ5IEx1Y2l1cyBDYXNzaXVzLCB0byBzZW5kIGNhdmFscnkKICAgICAgIGludG8gSXRhbHkgYXMgZWFybHkgYXMgcG9zc2libGU7IHRoYXQgaW5mYW50cnkgc2hvdWxkIG5vdCBiZSB3YW50aW5nOyBhbmQgdGhhdCBMZW50dWx1cyBoYWQKICAgICAgIGFzc3VyZWQgaGltLCBmcm9tIHRoZSBTaWJ5bGxpbmUgb3JhY2xlcyBhbmQgdGhlIGFuc3dlcnMgb2Ygc29vdGhzYXllcnMsIHRoYXQgaGUgd2FzIHRoYXQKICAgICAgIHRoaXJkIENvcm5lbGl1cyB0byB3aG9tIHRoZSBraW5nZG9tIGFuZCBzb3ZlcmVpZ250eSBvdmVyIHRoaXMgY2l0eSB3YXMgZmF0ZWQgdG8gY29tZTsgdGhhdAogICAgICAgQ2lubmEgYW5kIFN1bGxhIGhhZCBiZWVuIGJlZm9yZSBoaW07IGFuZCB0aGF0IGhlIGhhZCBhbHNvIHNhaWQgdGhhdCB3YXMgdGhlIHllYXIgZGVzdGluZWQgdG8KICAgICAgIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHkgYW5kIGVtcGlyZSwgYmVpbmcgdGhlIHRlbnRoIHllYXIgYWZ0ZXIgdGhlIGFjcXVpdHRhbCBvZiB0aGUKICAgICAgIHZpcmdpbnMsIGFuZCB0aGUgdHdlbnRpZXRoIGFmdGVyIHRoZSBidXJuaW5nIG9mIHRoZSBDYXBpdG9sLiA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhleSBzYWlkIHRoZXJlIGhhZCBiZWVuIHRoaXMgZGlzcHV0ZSBiZXR3ZWVuIENldGhlZ3VzIGFuZCB0aGUgcmVzdCzigJR0aGF0CiAgICAgICBMZW50dWx1cyBhbmQgb3RoZXJzIHRob3VnaHQgaXQgYmVzdCB0aGF0IHRoZSBtYXNzYWNyZSBzaG91bGQgdGFrZSBwbGFjZSBhbmQgdGhlIGNpdHkgYmUgYnVybnQKICAgICAgIGF0IHRoZSBTYXR1cm5hbGlhLCBidXQgdGhhdCBDZXRoZWd1cyB0aG91Z2h0IGl0IHRvbyBsb25nIHRvIHdhaXQuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhlIEdhdWxzIGJlaW5nIGludHJvZHVjZWQsIHNhaWQgdGhhdCBhbiBvYXRoIGhhZCBiZWVuIGFkbWluaXN0ZXJlZCB0bwogICAgICAgIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwOCIgLz4gdGhlbSwgYW5kIGxldHRlcnMgZ2l2ZW4gdGhlbSBieSBQdWJsaXVzIExlbnR1bHVzLCBDZXRoZWd1cywgYW5kIFN0YXRpbGl1cywgZm9yCiAgICAgICB0aGVpciBuYXRpb247IGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW5qb2luZWQgYnkgdGhlbSwgYW5kIGJ5IEx1Y2l1cyBDYXNzaXVzLCB0byBzZW5kIGNhdmFscnkKICAgICAgIGludG8gSXRhbHkgYXMgZWFybHkgYXMgcG9zc2libGU7IHRoYXQgaW5mYW50cnkgc2hvdWxkIG5vdCBiZSB3YW50aW5nOyBhbmQgdGhhdCBMZW50dWx1cyBoYWQKICAgICAgIGFzc3VyZWQgaGltLCBmcm9tIHRoZSBTaWJ5bGxpbmUgb3JhY2xlcyBhbmQgdGhlIGFuc3dlcnMgb2Ygc29vdGhzYXllcnMsIHRoYXQgaGUgd2FzIHRoYXQKICAgICAgIHRoaXJkIENvcm5lbGl1cyB0byB3aG9tIHRoZSBraW5nZG9tIGFuZCBzb3ZlcmVpZ250eSBvdmVyIHRoaXMgY2l0eSB3YXMgZmF0ZWQgdG8gY29tZTsgdGhhdAogICAgICAgQ2lubmEgYW5kIFN1bGxhIGhhZCBiZWVuIGJlZm9yZSBoaW07IGFuZCB0aGF0IGhlIGhhZCBhbHNvIHNhaWQgdGhhdCB3YXMgdGhlIHllYXIgZGVzdGluZWQgdG8KICAgICAgIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHkgYW5kIGVtcGlyZSwgYmVpbmcgdGhlIHRlbnRoIHllYXIgYWZ0ZXIgdGhlIGFjcXVpdHRhbCBvZiB0aGUKICAgICAgIHZpcmdpbnMsIGFuZCB0aGUgdHdlbnRpZXRoIGFmdGVyIHRoZSBidXJuaW5nIG9mIHRoZSBDYXBpdG9sLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgc2FpZCB0aGVyZSBoYWQgYmVlbiB0aGlzIGRpc3B1dGUgYmV0d2VlbiBDZXRoZWd1cyBhbmQgdGhlIHJlc3Qs4oCUdGhhdAogICAgICAgTGVudHVsdXMgYW5kIG90aGVycyB0aG91Z2h0IGl0IGJlc3QgdGhhdCB0aGUgbWFzc2FjcmUgc2hvdWxkIHRha2UgcGxhY2UgYW5kIHRoZSBjaXR5IGJlIGJ1cm50CiAgICAgICBhdCB0aGUgU2F0dXJuYWxpYSwgYnV0IHRoYXQgQ2V0aGVndXMgdGhvdWdodCBpdCB0b28gbG9uZyB0byB3YWl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kLCBub3QgdG8gZGV0YWluIHlvdSwgTyBSb21hbnMsIHdlIG9yZGVyZWQgdGhlIGxldHRlcnMgdG8gYmUgYnJvdWdodCBmb3J3YXJkIHdoaWNoIHdlcmUKICAgICAgIHNhaWQgdG8gaGF2ZSBiZWVuIGdpdmVuIHRoZW0gYnkgZWFjaCBvZiB0aGUgbWVuLiBGaXJzdCBJIHNob3dlZCBoaXMgc2VhbCB0byBDZXRoZWd1czsgaGUKICAgICAgIHJlY29nbmlzZWQgaXQ6IHdlIGN1dCB0aGUgdGhyZWFkOyB3ZSByZWFkIHRoZSBsZXR0ZXIuIEl0IHdhcyB3cml0dGVuIHdpdGggaGlzIG93biBoYW5kOiB0aGF0CiAgICAgICBoZSB3b3VsZCBkbyBmb3IgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIHRoZSBBbGxvYnJvZ2VzIHdoYXQgaGUgaGFkIHByb21pc2VkIHRoZWlyCiAgICAgICBhbWJhc3NhZG9yczsgYW5kIHRoYXQgaGUgYmVnZ2VkIHRoZW0gYWxzbyB0byBkbyB3aGF0IHRoZWlyIGFtYmFzc2Fkb3JzIGhhZCBhcnJhbmdlZC4gVGhlbgogICAgICAgQ2V0aGVndXMsIHdobyBhIGxpdHRsZSBiZWZvcmUgaGFkIG1hZGUgYW5zd2VyIGFib3V0IHRoZSBzd29yZHMgYW5kIGRhZ2dlcnMgd2hpY2ggaGFkIGJlZW4KICAgICAgIGZvdW5kIGluIGhpcyBob3VzZSwgYW5kIGhhZCBzYWlkIHRoYXQgaGUgaGFkIGFsd2F5cyBiZWVuIGZvbmQgb2YgZmluZSBhcm1zLCBiZWluZyBzdHJpY2tlbgogICAgICAgZG93biBhbmQgZGVqZWN0ZWQgYXQgdGhlIHJlYWRpbmcgb2YgaGlzIGxldHRlcnMsIGNvbnZpY3RlZCBieSBoaXMgb3duIGNvbnNjaWVuY2UsIGJlY2FtZQogICAgICAgc3VkZGVubHkgc2lsZW50LiBTdGF0aWxpdXMsIGJlaW5nIGludHJvZHVjZWQsIG93bmVkIGhpcyBoYW5kd3JpdGluZyBhbmQgaGlzIHNlYWwuIEhpcyBsZXR0ZXJzCiAgICAgICB3ZXJlIHJlYWQsIG9mIG5lYXJseSB0aGUgc2FtZSB0ZW5vcjogaGUgY29uZmVzc2VkIGl0LiBUaGVuIEkgc2hvd2VkIExlbnR1bHVzIGhpcyBsZXR0ZXJzLCBhbmQKICAgICAgIGFza2VkIGhpbSB3aGV0aGVyIGhlIHJlY29nbmlzZWQgdGhlIHNlYWw/IEhlIG5vZGRlZCBhc3NlbnQuIEJ1dCBpdCBpcywgc2FpZCBJLCBhIHdlbGwta25vd24KICAgICAgIHNlYWw74oCUdGhlIGxpa2VuZXNzIG9mIHlvdXIgZ3JhbmRmYXRoZXIsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4sIHdobyBncmVhdGx5IGxvdmVkCiAgICAgICBoaXMgY291bnRyeSBhbmQgaGlzIGZlbGxvdy1jaXRpemVuczsgYW5kIGl0IGV2ZW4gdGhvdWdoIHNpbGVudCwgb3VnaHQgdG8gaGF2ZSBjYWxsZWQgeW91IGJhY2sKICAgICAgIGZyb20gc3VjaCB3aWNrZWRuZXNzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzIGFyZSByZWFkIG9mIHRoZSBzYW1lIHRlbm9yIHRvIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiB0aGUgQWxsb2Jyb2dlcy4gSSBvZmZlcmVkCiAgICAgICBoaW0gbGVhdmUsIGlmIGhlIHdpc2hlZCB0byBzYXkgYW55dGhpbmcgb2YgdGhlc2UgbWF0dGVyczogYW5kIGF0IGZpcnN0IGhlIGRlY2xpbmVkIHRvIHNwZWFrOwogICAgICAgYnV0IGEgbGl0dGxlIGFmdGVyd2FyZHMsIHdoZW4gdGhlIHdob2xlIGV4YW1pbmF0aW9uIGhhZCBiZWVuIGdvbmUgdGhyb3VnaCBhbmQgY29uY2x1ZGVkLCBoZQogICAgICAgcm9zZS4gSGUgYXNrZWQgdGhlIEdhdWxzIHdoYXQgaGUgaGFkIGhhZCB0byBkbyB3aXRoIHRoZW0/IHdoeSB0aGV5IGhhZCBjb21lIHRvIGhpcyBob3VzZT8gYW5kCiAgICAgICBoZSBhc2tlZCBWdWx0dXJjaXVzIHRvby4gQW5kIHdoZW4gdGhleSBoYWQgYW5zd2VyZWQgaGltIGJyaWVmbHkgYW5kIHN0ZWFkaWx5LCB1bmRlciB3aG9zZQogICAgICAgZ3VpZGFuY2UgdGhleSBoYWQgY29tZSB0byBoaW0sIGFuZCBob3cgb2Z0ZW47IGFuZCB3aGVuIHRoZXkgYXNrZWQgaGltIHdoZXRoZXIgaGUgaGFkIHNhaWQKICAgICAgIG5vdGhpbmcgdG8gdGhlbSBhYm91dCB0aGUgU2lieWxsaW5lIG9yYWNsZXMsIHRoZW4gaGUgb24gYSBzdWRkZW4sIG1hZCB3aXRoIHdpY2tlZG5lc3MsIHNob3dlZAogICAgICAgaG93IGdyZWF0IHdhcyB0aGUgcG93ZXIgb2YgY29uc2NpZW5jZTsgZm9yIHRob3VnaCBoZSBtaWdodCBoYXZlIGRlbmllZCBpdCwgaGUgc3VkZGVubHksCiAgICAgICBjb250cmFyeSB0byBldmVyeSBvbmUncyBleHBlY3RhdGlvbiBjb25mZXNzZWQgaXQ6IHNvIG5vdCBvbmx5IGRpZCBoaXMgZ2VuaXVzIGFuZCBza2lsbCBpbgogICAgICAgb3JhdG9yeSwgZm9yIHdoaWNoIGhlIHdhcyBhbHdheXMgZW1pbmVudCwgYnV0IGV2ZW4gdGhyb3VnaCB0aGUgcG93ZXIgb2YgaGlzIG1hbmlmZXN0IGFuZAogICAgICAgZGV0ZWN0ZWQgd2lja2VkbmVzcywgdGhhdCBpbXB1ZGVuY2UgaW4gd2hpY2ggaGUgc3VycGFzc2VkIGFsbCBtZW4sIGFuZCBhdWRhY2l0eSBkZXNlcnRlZCBoaW0uIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBWdWx0dXJjaXVzIG9uIGEgc3VkZGVuIG9yZGVyZWQgdGhlIGxldHRlcnMgdG8gYmUKICAgICAgIHByb2R1Y2VkIGFuZCBvcGVuZWQgd2hpY2ggaGUgc2FpZCBoYWQgYmVlbiBnaXZlbiB0byBoaW0gZm9yIENhdGlsaW5lLCBieSBMZW50dWx1cy4gQW5kIHRob3VnaAogICAgICAgTGVudHVsdXMgd2FzIGdyZWF0bHkgYWdpdGF0ZWQgYXQgdGhhdCwgeWV0IGhlIGFja25vd2xlZGdlZCBoaXMgc2VhbCBhbmQgaGlzIGhhbmR3cml0aW5nOyBidXQKICAgICAgIHRoZSBsZXR0ZXIgd2FzIGFub255bW91cywgYW5kIHJhbiB0aHVzOuKAlOKAnFdobyBJIGFtIHlvdSB3aWxsIGtub3cgZnJvbSBoaW0KICAgICAgIHdob20gSSBoYXZlIHNlbnQgdG8geW91OiB0YWtlIGNhcmUgdG8gYmVoYXZlIGxpa2UgYSBtYW4sIGFuZCBjb25zaWRlciB0byB3aGF0IHBsYWNlIHlvdSBoYXZlCiAgICAgICBwcm9jZWVkZWQsIGFuZCBwcm92aWRlIGZvciB3aGF0IGlzIG5vdyBuZWNlc3NhcnkgZm9yIHlvdTogdGFrZSBjYXJlIHRvIGFzc29jaWF0ZSB0byB5b3Vyc2VsZgogICAgICAgdGhlIGFzc2lzdGFuY2Ugb2YgZXZlcnkgb25lLCBldmVuIG9mIHRoZSBwb3dlcmxlc3Mu4oCdIFRoZW4gR2FiaW5pdXMgYmVpbmcKICAgICAgIGludHJvZHVjZWQsIHdoZW4gYXQgZmlyc3QgaGUgaGFkIGJlZ3VuIHRvIGFuc3dlciBpbXB1ZGVudGx5LCBhdCBsYXN0IGRlbmllZCBub3RoaW5nIG9mIHRob3NlCiAgICAgICB0aGluZ3Mgd2hpY2ggdGhlIEdhdWxzIGFsbGVnZWQgYWdhaW5zdCBoaW0uIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB0byBtZSwKICAgICAgIGluZGVlZCwgTyBSb21hbnMsIHRob3VnaCB0aGUgbGV0dGVycywgdGhlIHNlYWxzLCB0aGUgaGFuZHdyaXRpbmcsIGFuZCB0aGUgY29uZmVzc2lvbiBvZiBlYWNoCiAgICAgICBpbmRpdmlkdWFsIHNlZW1lZCBtb3N0IGNlcnRhaW4gaW5kaWNhdGlvbnMgYW5kIHByb29mcyBvZiB3aWNrZWRuZXNzLCB5ZXQgdGhlaXIgY29sb3VyLCB0aGVpcgogICAgICAgZXllcywgdGhlaXIgY291bnRlbmFuY2UsIHRoZWlyIHNpbGVuY2UsIGFwcGVhcmVkIG1vcmUgY2VydGFpbiBzdGlsbDsgZm9yIHRoZXkgc3Rvb2Qgc28KICAgICAgIHN0dXBlZmllZCwgdGhleSBrZXB0IHRoZWlyIGV5ZXMgc28gZml4ZWQgb24gdGhlIGdyb3VuZCwgYXQgdGltZXMgbG9va2luZyBzdGVhbHRoaWx5IGF0IG9uZQogICAgICAgYW5vdGhlciwgdGhhdCB0aGV5IGFwcGVhcmVkIG5vdyBub3Qgc28gbXVjaCB0byBiZSBpbmZvcm1lZCBhZ2FpbnN0IGJ5IG90aGVycyBhcyB0byBiZQogICAgICAgaW5mb3JtaW5nIGFnYWluc3QgdGhlbXNlbHZlcy4gPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IFZ1bHR1cmNpdXMgb24gYSBzdWRkZW4gb3JkZXJlZCB0aGUgbGV0dGVycyB0byBiZQogICAgICAgcHJvZHVjZWQgYW5kIG9wZW5lZCB3aGljaCBoZSBzYWlkIGhhZCBiZWVuIGdpdmVuIHRvIGhpbSBmb3IgQ2F0aWxpbmUsIGJ5IExlbnR1bHVzLiBBbmQgdGhvdWdoCiAgICAgICBMZW50dWx1cyB3YXMgZ3JlYXRseSBhZ2l0YXRlZCBhdCB0aGF0LCB5ZXQgaGUgYWNrbm93bGVkZ2VkIGhpcyBzZWFsIGFuZCBoaXMgaGFuZHdyaXRpbmc7IGJ1dAogICAgICAgdGhlIGxldHRlciB3YXMgYW5vbnltb3VzLCBhbmQgcmFuIHRodXM64oCU4oCcV2hvIEkgYW0geW91IHdpbGwga25vdyBmcm9tIGhpbQogICAgICAgd2hvbSBJIGhhdmUgc2VudCB0byB5b3U6IHRha2UgY2FyZSB0byBiZWhhdmUgbGlrZSBhIG1hbiwgYW5kIGNvbnNpZGVyIHRvIHdoYXQgcGxhY2UgeW91IGhhdmUKICAgICAgIHByb2NlZWRlZCwgYW5kIHByb3ZpZGUgZm9yIHdoYXQgaXMgbm93IG5lY2Vzc2FyeSBmb3IgeW91OiB0YWtlIGNhcmUgdG8gYXNzb2NpYXRlIHRvIHlvdXJzZWxmCiAgICAgICB0aGUgYXNzaXN0YW5jZSBvZiBldmVyeSBvbmUsIGV2ZW4gb2YgdGhlIHBvd2VybGVzcy7igJ0gVGhlbiBHYWJpbml1cyBiZWluZwogICAgICAgaW50cm9kdWNlZCwgd2hlbiBhdCBmaXJzdCBoZSBoYWQgYmVndW4gdG8gYW5zd2VyIGltcHVkZW50bHksIGF0IGxhc3QgZGVuaWVkIG5vdGhpbmcgb2YgdGhvc2UKICAgICAgIHRoaW5ncyB3aGljaCB0aGUgR2F1bHMgYWxsZWdlZCBhZ2FpbnN0IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['3.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRvIG1lLAogICAgICAgaW5kZWVkLCBPIFJvbWFucywgdGhvdWdoIHRoZSBsZXR0ZXJzLCB0aGUgc2VhbHMsIHRoZSBoYW5kd3JpdGluZywgYW5kIHRoZSBjb25mZXNzaW9uIG9mIGVhY2gKICAgICAgIGluZGl2aWR1YWwgc2VlbWVkIG1vc3QgY2VydGFpbiBpbmRpY2F0aW9ucyBhbmQgcHJvb2ZzIG9mIHdpY2tlZG5lc3MsIHlldCB0aGVpciBjb2xvdXIsIHRoZWlyCiAgICAgICBleWVzLCB0aGVpciBjb3VudGVuYW5jZSwgdGhlaXIgc2lsZW5jZSwgYXBwZWFyZWQgbW9yZSBjZXJ0YWluIHN0aWxsOyBmb3IgdGhleSBzdG9vZCBzbwogICAgICAgc3R1cGVmaWVkLCB0aGV5IGtlcHQgdGhlaXIgZXllcyBzbyBmaXhlZCBvbiB0aGUgZ3JvdW5kLCBhdCB0aW1lcyBsb29raW5nIHN0ZWFsdGhpbHkgYXQgb25lCiAgICAgICBhbm90aGVyLCB0aGF0IHRoZXkgYXBwZWFyZWQgbm93IG5vdCBzbyBtdWNoIHRvIGJlIGluZm9ybWVkIGFnYWluc3QgYnkgb3RoZXJzIGFzIHRvIGJlCiAgICAgICBpbmZvcm1pbmcgYWdhaW5zdCB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHByb2R1Y2VkIGFuZCBkaXZ1bGdlZCB0aGVzZSBwcm9vZnMsIE8gUm9tYW5zLCBJIGNvbnN1bHRlZCB0aGUgc2VuYXRlIHdoYXQgb3VnaHQgdG8KICAgICAgIGJlIGRvbmUgZm9yIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHJlcHVibGljLiBWaWdvcm91cyBhbmQgZmVhcmxlc3Mgb3BpbmlvbnMgd2VyZSBkZWxpdmVyZWQgYnkKICAgICAgIHRoZSBjaGllZiBtZW4sIHdoaWNoIHRoZSBzZW5hdGUgYWRvcHRlZCB3aXRob3V0IGFueSB2YXJpZXR5OyBhbmQgc2luY2UgdGhlIGRlY3JlZSBvZiB0aGUKICAgICAgIHNlbmF0ZSBpcyBub3QgeWV0IHdyaXR0ZW4gb3V0LCBJIHdpbGwgcmVsYXRlIHRvIHlvdSBmcm9tIG1lbW9yeSwgTyBjaXRpemVucywgd2hhdCB0aGUgc2VuYXRlCiAgICAgICBoYXMgZGVjcmVlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPiBGaXJzdCBvZiBhbGwsIGEgdm90ZSBvZiB0aGFua3MgdG8gbWUgaXMKICAgICAgIHBhc3NlZCBpbiB0aGUgbW9zdCBob25vdXJhYmxlIHdvcmRzLCBiZWNhdXNlIHRoZSByZXB1YmxpYyBoYXMgYmVlbiBkZWxpdmVyZWQgZnJvbSB0aGUKICAgICAgIGdyZWF0ZXN0IGRhbmdlcnMgYnkgbXkgdmFsb3VyIDxwYiBuPSIzMTAiIC8+IGFuZCB3aXNkb20sIGFuZCBwcnVkZW5jZS4gVGhlbiBMdWNpdXMgRmxhY2N1cyBhbmQKICAgICAgIENhaXVzIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGFyZSBkZXNlcnZlZGx5IGFuZCByaWdodGx5IHByYWlzZWQsIGJlY2F1c2UgSSBoYWQgYXZhaWxlZAogICAgICAgbXlzZWxmIG9mIHRoZWlyIGJyYXZlIGFuZCBsb3lhbCBhc3Npc3RhbmNlLiBBbmQgYWxzbywgcHJhaXNlIGlzIGdpdmVuIHRvIHRoYXQgYnJhdmUgbWFuLCBteQogICAgICAgY29sbGVhZ3VlLCBiZWNhdXNlIGhlIGhhZCByZW1vdmVkIGZyb20gaGlzIGNvdW5zZWxzLCBhbmQgZnJvbSB0aGUgY291bnNlbHMgb2YgdGhlIHJlcHVibGljLAogICAgICAgdGhlc2Ugd2hvIGhhZCBiZWVuIGFjY29tcGxpY2VzIGluIHRoaXMgY29uc3BpcmFjeS4gQW5kIHRoZXkgdm90ZWQgdGhhdCBQdWJsaXVzIExlbnR1bHVzLCB3aGVuCiAgICAgICBoZSBoYWQgYWJkaWNhdGVkIHRoZSBwcmFldG9yc2hpcCwgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFsc28sIHRoYXQgQ2FpdXMKICAgICAgIENldGhlZ3VzLCBMdWNpdXMgU3RhdGlsaXVzLCBQdWJsaXVzIEdhYmluaXVzLCB3aG8gd2VyZSBhbGwgcHJlc2VudCwgc2hvdWxkIGJlIGdpdmVuIGludG8KICAgICAgIGN1c3RvZHk6IGFuZCB0aGUgc2FtZSBkZWNyZWUgd2FzIHBhc3NlZCBhZ2FpbnN0IEx1Y2l1cyBDYXNzaXVzLCB3aG8gaGFkIGJlZ2dlZCBmb3IgaGltc2VsZgogICAgICAgdGhlIG9mZmljZSBvZiBidXJuaW5nIHRoZSBjaXR5OyBhZ2FpbnN0IE1hcmN1cyBDYXBhcml1cywgdG8gd2hvbSBpdCBoYWQgYmVlbiBwcm92ZWQgdGhhdAogICAgICAgQXB1bGlhIGhhZCBiZWVuIGFsbG90dGVkIGZvciB0aGUgcHVycG9zZSBvZiBleGNpdGluZyBkaXNhZmZlY3Rpb24gYW1vbmcgdGhlIHNoZXBoZXJkczsKICAgICAgIGFnYWluc3QgUHVibGl1cyBGdXJpdXMsIHdobyBiZWxvbmdzIHRvIHRoZSBjb2xvbmllcyB3aGljaCBMdWNpdXMgU3VsbGEgbGVkIHRvIEZhZXN1bGFlOwogICAgICAgYWdhaW5zdCBRdWludHVzIE1hbmxpdXMgQ2hpbG8sIHdobyB3YXMgYWx3YXlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1hbiBGdXJpdXMgaW4gaGlzCiAgICAgICB0YW1wZXJpbmcgd2l0aCB0aGUgQWxsb2Jyb2dlczsgYWdhaW5zdCBQdWJsaXVzIFVtYnJlbnVzLCBhIGZyZWVkbWFuLCBieSB3aG9tIGl0IHdhcyBwcm92ZWQKICAgICAgIHRoYXQgdGhlIEdhdWxzIHdlcmUgb3JpZ2luYWxseSBicm91Z2h0IHRvIEdhYmluaXVzLiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRmlyc3Qgb2YgYWxsLCBhIHZvdGUgb2YgdGhhbmtzIHRvIG1lIGlzCiAgICAgICBwYXNzZWQgaW4gdGhlIG1vc3QgaG9ub3VyYWJsZSB3b3JkcywgYmVjYXVzZSB0aGUgcmVwdWJsaWMgaGFzIGJlZW4gZGVsaXZlcmVkIGZyb20gdGhlCiAgICAgICBncmVhdGVzdCBkYW5nZXJzIGJ5IG15IHZhbG91ciA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTAiIC8+IGFuZCB3aXNkb20sIGFuZCBwcnVkZW5jZS4gVGhlbiBMdWNpdXMgRmxhY2N1cyBhbmQKICAgICAgIENhaXVzIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGFyZSBkZXNlcnZlZGx5IGFuZCByaWdodGx5IHByYWlzZWQsIGJlY2F1c2UgSSBoYWQgYXZhaWxlZAogICAgICAgbXlzZWxmIG9mIHRoZWlyIGJyYXZlIGFuZCBsb3lhbCBhc3Npc3RhbmNlLiBBbmQgYWxzbywgcHJhaXNlIGlzIGdpdmVuIHRvIHRoYXQgYnJhdmUgbWFuLCBteQogICAgICAgY29sbGVhZ3VlLCBiZWNhdXNlIGhlIGhhZCByZW1vdmVkIGZyb20gaGlzIGNvdW5zZWxzLCBhbmQgZnJvbSB0aGUgY291bnNlbHMgb2YgdGhlIHJlcHVibGljLAogICAgICAgdGhlc2Ugd2hvIGhhZCBiZWVuIGFjY29tcGxpY2VzIGluIHRoaXMgY29uc3BpcmFjeS4gQW5kIHRoZXkgdm90ZWQgdGhhdCBQdWJsaXVzIExlbnR1bHVzLCB3aGVuCiAgICAgICBoZSBoYWQgYWJkaWNhdGVkIHRoZSBwcmFldG9yc2hpcCwgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFsc28sIHRoYXQgQ2FpdXMKICAgICAgIENldGhlZ3VzLCBMdWNpdXMgU3RhdGlsaXVzLCBQdWJsaXVzIEdhYmluaXVzLCB3aG8gd2VyZSBhbGwgcHJlc2VudCwgc2hvdWxkIGJlIGdpdmVuIGludG8KICAgICAgIGN1c3RvZHk6IGFuZCB0aGUgc2FtZSBkZWNyZWUgd2FzIHBhc3NlZCBhZ2FpbnN0IEx1Y2l1cyBDYXNzaXVzLCB3aG8gaGFkIGJlZ2dlZCBmb3IgaGltc2VsZgogICAgICAgdGhlIG9mZmljZSBvZiBidXJuaW5nIHRoZSBjaXR5OyBhZ2FpbnN0IE1hcmN1cyBDYXBhcml1cywgdG8gd2hvbSBpdCBoYWQgYmVlbiBwcm92ZWQgdGhhdAogICAgICAgQXB1bGlhIGhhZCBiZWVuIGFsbG90dGVkIGZvciB0aGUgcHVycG9zZSBvZiBleGNpdGluZyBkaXNhZmZlY3Rpb24gYW1vbmcgdGhlIHNoZXBoZXJkczsKICAgICAgIGFnYWluc3QgUHVibGl1cyBGdXJpdXMsIHdobyBiZWxvbmdzIHRvIHRoZSBjb2xvbmllcyB3aGljaCBMdWNpdXMgU3VsbGEgbGVkIHRvIEZhZXN1bGFlOwogICAgICAgYWdhaW5zdCBRdWludHVzIE1hbmxpdXMgQ2hpbG8sIHdobyB3YXMgYWx3YXlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1hbiBGdXJpdXMgaW4gaGlzCiAgICAgICB0YW1wZXJpbmcgd2l0aCB0aGUgQWxsb2Jyb2dlczsgYWdhaW5zdCBQdWJsaXVzIFVtYnJlbnVzLCBhIGZyZWVkbWFuLCBieSB3aG9tIGl0IHdhcyBwcm92ZWQKICAgICAgIHRoYXQgdGhlIEdhdWxzIHdlcmUgb3JpZ2luYWxseSBicm91Z2h0IHRvIEdhYmluaXVzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB0aGUgc2VuYXRlLCBPIGNpdGl6ZW5zLCBhY3RlZCB3aXRoIHN1Y2ggbGVuaXR5LCB0aGF0LCBvdXQgb2Ygc28gZ3JlYXQgYSBjb25zcGlyYWN5LCBhbmQKICAgICAgIHN1Y2ggYSBudW1iZXIgYW5kIG11bHRpdHVkZSBvZiBkb21lc3RpYyBlbmVtaWVzLCBpdCB0aG91Z2h0IHRoYXQgc2luY2UgdGhlIHJlcHVibGljIHdhcwogICAgICAgc2F2ZWQsIHRoZSBtaW5kcyBvZiB0aGUgcmVzdCBtaWdodCBiZSByZXN0b3JlZCB0byBhIGhlYWx0aHkgc3RhdGUgYnkgdGhlIHB1bmlzaG1lbnQgb2YgbmluZQogICAgICAgbW9zdCBhYmFuZG9uZWQgbWVuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhbHNvIGEgc3VwcGxpY2F0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+QSBzdXBwbGljYXRpb24gd2FzIGEgc29sZW1uIHRoYW5rc2dpdmluZyB0byB0aGUgZ29kcywgZGVjcmVlZCBieSB0aGUgc2VuYXRlLAogICAgICAgIHdoZW4gYWxsIHRoZSB0ZW1wbGVzIHdlcmUgb3BlbmVkIGFuZCB0aGUgc3RhdHVlcyBvZiB0aGUgZ29kcyBwbGFjZWQgaW4gcHVibGljIHVwb24gY291Y2hlcwogICAgICAgICAoPGZvcmVpZ24gbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wYWx1ZGFtZW50dW08L2ZvcmVpZ24+LCBvciBtaWxpdGFyeSByb2JlLiA8L25vdGU+IHdhcyBkZWNyZWVkIGluIG15IG5hbWUsICh3aGljaCBpcyB0aGUKICAgICAgIGZpcnN0IHRpbWUgc2luY2UgdGhlIGJ1aWxkaW5nIG9mIHRoZSBjaXR5IHRoYXQgc3VjaCBhbiBob25vdXIgaGFzIGV2ZXIgYmVlbiBwYWlkIHRvIGEgbWFuIGluCiAgICAgICBhIGNpdmlsIGNhcGFjaXR5LCkgdG8gdGhlIGltbW9ydGFsIGdvZHMsIGZvciB0aGVpciBzaW5ndWxhciBraW5kbmVzcy4gQW5kIGl0IHdhcyBkZWNyZWVkIGluCiAgICAgICB0aGVzZSB3b3Jkcywg4oCcYmVjYXVzZSBJIGhhZCBkZWxpdmVyZWQgdGhlIGNpdHkgZnJvbSBjb25mbGFncmF0aW9ucywgdGhlIGNpdGl6ZW5zCiAgICAgICBmcm9tIG1hc3NhY3JlLCBhbmQgSXRhbHkgZnJvbSB3YXIu4oCdIEFuZCBpZiB0aGlzIHN1cHBsaWNhdGlvbiBiZSBjb21wYXJlZCB3aXRoCiAgICAgICBvdGhlcnMsIE8gY2l0aXplbnMsIHRoZXJlIGlzIHRoaXMgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZW0s4oCUdGhhdCBhbGwgb3RoZXJzIGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkIGJlY2F1c2Ugb2YgdGhlIHN1Y2Nlc3NlcyBvZiB0aGUgcmVwdWJsaWM7IHRoaXMgb25lIGFsb25lIGZvciBpdHMgcHJlc2VydmF0aW9uLgogICAgICAgQW5kIHRoYXQgd2hpY2ggd2FzIHRoZSBmaXJzdCB0aGluZyB0byBiZSBkb25lLCBoYXMgYmVlbiBkb25lIGFuZCBleGVjdXRlZDsgZm9yIFB1YmxpdXMKICAgICAgIExlbnR1bHVzLCB0aG91Z2gsIGJlaW5nIGNvbnZpY3RlZCBieSBwcm9vZnMgYW5kLCBieSBoaXMgb3duIGNvbmZlc3Npb24sIGJ5IHRoZSBqdWRnbWVudCBvZgogICAgICAgdGhlIHNlbmF0ZSBoZSBoYWQgbG9zdCBub3Qgb25seSB0aGUgcmlnaHRzIG9mIGEgcHJhZXRvciBidXQgYWxzbyB0aG9zZSBvZiBhIGNpdGl6ZW4sIHN0aWxsCiAgICAgICByZXNpZ25lZCBoaXMgb2ZmaWNlOyBzbyB0aGF0IHRob3VnaCBDYWl1cyBNYXJjaXVzLCB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgb2YgbWVuLCBoYWQgbm8KICAgICAgIHNjcnVwbGVzIGFib3V0IHB1dHRpbmcgdG8gZGVhdGggQ2FpdXMgR2xhdWNpdXMgdGhlIHByYWV0b3IgYWdhaW5zdCB3aG9tIG5vdGhpbmcgaGFkIGJlZW4KICAgICAgIGRlY3JlZWQgYnkgbmFtZSwgc3RpbGwgd2UgYXJlIHJlbGlldmVkIGZyb20gdGhhdCBzY3J1cGxlIGluIHRoZSBjYXNlIG9mIFB1YmxpdXMgTGVudHVsdXMsIHdobwogICAgICAgaXMgbm93IGEgcHJpdmF0ZSBpbmRpdmlkdWFsLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFsc28gYSBzdXBwbGljYXRpb24gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkEgc3VwcGxpY2F0aW9uIHdhcyBhIHNvbGVtbiB0aGFua3NnaXZpbmcgdG8gdGhlIGdvZHMsIGRlY3JlZWQgYnkgdGhlIHNlbmF0ZSwKICAgICAgICB3aGVuIGFsbCB0aGUgdGVtcGxlcyB3ZXJlIG9wZW5lZCBhbmQgdGhlIHN0YXR1ZXMgb2YgdGhlIGdvZHMgcGxhY2VkIGluIHB1YmxpYyB1cG9uIGNvdWNoZXMKICAgICAgICAgKDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBhbHVkYW1lbnR1bTwvZm9yZWlnbj4sIG9yIG1pbGl0YXJ5IHJvYmUuIDwvbm90ZT4gd2FzIGRlY3JlZWQgaW4gbXkgbmFtZSwgKHdoaWNoIGlzIHRoZQogICAgICAgZmlyc3QgdGltZSBzaW5jZSB0aGUgYnVpbGRpbmcgb2YgdGhlIGNpdHkgdGhhdCBzdWNoIGFuIGhvbm91ciBoYXMgZXZlciBiZWVuIHBhaWQgdG8gYSBtYW4gaW4KICAgICAgIGEgY2l2aWwgY2FwYWNpdHksKSB0byB0aGUgaW1tb3J0YWwgZ29kcywgZm9yIHRoZWlyIHNpbmd1bGFyIGtpbmRuZXNzLiBBbmQgaXQgd2FzIGRlY3JlZWQgaW4KICAgICAgIHRoZXNlIHdvcmRzLCDigJxiZWNhdXNlIEkgaGFkIGRlbGl2ZXJlZCB0aGUgY2l0eSBmcm9tIGNvbmZsYWdyYXRpb25zLCB0aGUgY2l0aXplbnMKICAgICAgIGZyb20gbWFzc2FjcmUsIGFuZCBJdGFseSBmcm9tIHdhci7igJ0gQW5kIGlmIHRoaXMgc3VwcGxpY2F0aW9uIGJlIGNvbXBhcmVkIHdpdGgKICAgICAgIG90aGVycywgTyBjaXRpemVucywgdGhlcmUgaXMgdGhpcyBkaWZmZXJlbmNlIGJldHdlZW4gdGhlbSzigJR0aGF0IGFsbCBvdGhlcnMgaGF2ZQogICAgICAgYmVlbiBhcHBvaW50ZWQgYmVjYXVzZSBvZiB0aGUgc3VjY2Vzc2VzIG9mIHRoZSByZXB1YmxpYzsgdGhpcyBvbmUgYWxvbmUgZm9yIGl0cyBwcmVzZXJ2YXRpb24uCiAgICAgICBBbmQgdGhhdCB3aGljaCB3YXMgdGhlIGZpcnN0IHRoaW5nIHRvIGJlIGRvbmUsIGhhcyBiZWVuIGRvbmUgYW5kIGV4ZWN1dGVkOyBmb3IgUHVibGl1cwogICAgICAgTGVudHVsdXMsIHRob3VnaCwgYmVpbmcgY29udmljdGVkIGJ5IHByb29mcyBhbmQsIGJ5IGhpcyBvd24gY29uZmVzc2lvbiwgYnkgdGhlIGp1ZGdtZW50IG9mCiAgICAgICB0aGUgc2VuYXRlIGhlIGhhZCBsb3N0IG5vdCBvbmx5IHRoZSByaWdodHMgb2YgYSBwcmFldG9yIGJ1dCBhbHNvIHRob3NlIG9mIGEgY2l0aXplbiwgc3RpbGwKICAgICAgIHJlc2lnbmVkIGhpcyBvZmZpY2U7IHNvIHRoYXQgdGhvdWdoIENhaXVzIE1hcmNpdXMsIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBvZiBtZW4sIGhhZCBubwogICAgICAgc2NydXBsZXMgYWJvdXQgcHV0dGluZyB0byBkZWF0aCBDYWl1cyBHbGF1Y2l1cyB0aGUgcHJhZXRvciBhZ2FpbnN0IHdob20gbm90aGluZyBoYWQgYmVlbgogICAgICAgZGVjcmVlZCBieSBuYW1lLCBzdGlsbCB3ZSBhcmUgcmVsaWV2ZWQgZnJvbSB0aGF0IHNjcnVwbGUgaW4gdGhlIGNhc2Ugb2YgUHVibGl1cyBMZW50dWx1cywgd2hvCiAgICAgICBpcyBub3cgYSBwcml2YXRlIGluZGl2aWR1YWwuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBhbHVkYW1lbnR1bTwvZm9yZWlnbj4sIG9yIG1pbGl0YXJ5IHJvYmUuIDwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgc2luY2UsIE8gY2l0aXplbnMgeW91IGhhdmUgdGhlIG5lZmFyaW91cyBsZWFkZXJzIG9mIHRoaXMgbW9zdCB3aWNrZWQgYW5kIGRhbmdlcm91cyB3YXIKICAgICAgIHRha2VuIHByaXNvbmVycyBhbmQgaW4geW91ciBncmFzcCwgeW91IG91Z2h0IHRvIHRoaW5rIHRoYXQgYWxsIHRoZSByZXNvdXJjZXMgb2YKICAgICAgIENhdGlsaW5lLOKAlGFsbCBoaXMgaG9wZXMgYW5kIGFsbCBoaXMgcG93ZXIsIG5vdyB0aGF0IHRoZXNlIGRhbmdlcnMgb2YgdGhlIGNpdHkgYXJlCiAgICAgICB3YXJkZWQgb2ZmLCBoYXZlIGZhbGxlbiB0byBwaWVjZXMuIEFuZCwgaW5kZWVkLCB3aGVuIEkgZHJvdmUgaGltIGZyb20gdGhlIGNpdHkgSSBmb3Jlc2F3IGluCiAgICAgICBteSBtaW5kLCBPIGNpdGl6ZW5zLCB0aGF0IGlmIENhdGlsaW5lIHdlcmUgcmVtb3ZlZCwgSSBoYWQgbm8gY2F1c2UgdG8gZmVhciBlaXRoZXIgdGhlCiAgICAgICBkcm93c2luZXNzIG9mIFB1YmxpdXMgTGVudHVsdXMsIG9yIHRoZSBmYXQgb2YgTHVjaXVzIENhc3NpdXMsIG9yIHRoZSBtYWQgcmFzaG5lc3Mgb2YgQ2Fzc2l1cwogICAgICAgQ2V0aGVndXMuIEhlIGFsb25lIHdhcyB0byBiZSBmZWFyZWQgb2YgYWxsIHRoZXNlIG1lbiwgYW5kIHRoYXQsIG9ubHkgYXMgbG9uZyBhcyBoZSB3YXMgd2l0aGluCiAgICAgICB0aGUgd2FsbHMgb2YgdGhlIGNpdHkuIEhlIGtuZXcgZXZlcnl0aGluZywgaGUgaGFkIGFjY2VzcyB0byBldmVyeWJvZHkuIEhlIGhhZCB0aGUgc2tpbGwgYW5kCiAgICAgICB0aGUgYXVkYWNpdHkgdG8gYWRkcmVzcywgdG8gdGVtcHQgYW5kIHRvIHRhbXBlciB3aXRoIGV2ZXJ5IG9uZS4gSGUgaGFkIGFjdXRlbmVzcyBzdWl0ZWQgdG8KICAgICAgIGNyaW1lOyBhbmQgbmVpdGhlciB0b25ndWUgbm9yIGhhbmQgZXZlciBmYWlsZWQgdG8gc3VwcG9ydCB0aGF0IGFjdXRlbmVzcy4gQWxyZWFkeSBoZSBoYWQgbWVuCiAgICAgICBoZSBjb3VsZCByZWx5IG9uIGNob3NlbiBhbmQgZGlzdHJpYnV0ZWQgZm9yIHRoZSBleGVjdXRpb24gb2YgYWxsIG90aGVyIGJ1c2luZXNzIGFuZCB3aGVuIGhlCiAgICAgICBoYWQgb3JkZXJlZCBhbnl0aGluZyB0byBiZSBkb25lIGhlIGRpZCBub3QgdGhpbmsgaXQgd2FzIGRvbmUgb24gdGhhdCBhY2NvdW50LiBUaGVyZSB3YXMKICAgICAgIG5vdGhpbmcgdG8gd2hpY2ggaGUgZGlkIG5vdCBwZXJzb25hbGx5IGF0dGVuZCBhbmQgc2VlIHRvLOKAlGZvciB3aGljaCBoZSBkaWQgbm90CiAgICAgICB3YXRjaCBhbmQgdG9pbC4gSGUgd2FzIGFibGUgdG8gZW5kdXJlIGNvbGQsIHRoaXJzdCwgYW5kIGh1bmdlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlVubGVzcyBJIGhhZCBkcml2ZW4gdGhpcyBtYW4sIHNvIGFjdGl2ZSwgc28gcmVhZHksIHNvIGF1ZGFjaW91cywgc28gY3JhZnR5LCBzbyB2aWdpbGFudCBpbgogICAgICAgd2lja2VkbmVzcywgc28gaW5kdXN0cmlvdXMgaW4gY3JpbWluYWwgZXhwbG9pdHMsIGZyb20gaGlzIHBsb3RzIHdpdGhpbiB0aGUgY2l0eSB0byB0aGUgb3BlbgogICAgICAgd2FyZmFyZSBvZiB0aGUgY2FtcCwgKEkgd2lsbCBleHByZXNzIG15IGhvbmVzdCBvcGluaW9uLCBPIGNpdGl6ZW5zLCkgSSBzaG91bGQgbm90IGVhc2lseSBoYXZlCiAgICAgICByZW1vdmVkIGZyb20geW91ciBuZWNrcyBzbyB2YXN0IGEgd2VpZ2h0IG9mIGV2aWwuIEhlIHdvdWxkIG5vdCBoYXZlIGRldGVybWluZWQgb24gdGhlCiAgICAgICBTYXR1cm5hbGlhIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgU2F0dXJuYWxpYSB3YXMgYSBmZWFzdCBvZiBTYXR1cm4gYXQgd2hpY2ggZXh0cmFvcmRpbmFyeQogICAgICAgIGxpY2VuY2UgYW5kIGluZHVsZ2VuY2Ugd2FzIGFsbG93ZWQgdG8gYWxsIHRoZSBzbGF2ZXM7IGl0IHRvb2sgcGxhY2UgYXQgdGhlIGVuZCBvZiBEZWNlbWJlciwKICAgICAgICB3aGlsZSB0aGlzIHNwZWVjaCBvZiBDaWNlcm8gd2FzIGRlbGl2ZXJlZCBlYXJseSBpbiBOb3ZlbWJlci48L25vdGU+IHRvIG1hc3NhY3JlIHlvdSBoZSB3b3VsZAogICAgICAgbm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxMiIgLz4gaGF2ZSBhbm5vdW5jZWQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGV2ZW4gdGhlIGRheSBvZiBpdHMKICAgICAgIGRvb20gc28gbG9uZyBiZWZvcmVoYW5kLOKAlGhlIHdvdWxkIG5ldmVyIGhhdmUgYWxsb3dlZCBoaXMgc2VhbCBhbmQgaGlzIGxldHRlcnMsIHRoZQogICAgICAgdW5kZW5pYWJsZSB3aXRuZXNzZXMgb2YgaGlzIGd1aWx0LCB0byBiZSB0YWtlbiwgd2hpY2ggbm93LCBzaW5jZSBoZSBpcyBhYnNlbnQsIGhhcyBiZWVuIHNvCiAgICAgICBkb25lIHRoYXQgbm8gbGFyY2VueSBpbiBhIHByaXZhdGUgaG91c2UgaGFzIGV2ZXIgYmVlbiBzbyB0aG9yb3VnaGx5IGFuZCBjbGVhcmx5IGRldGVjdGVkIGFzCiAgICAgICB0aGlzIHZhc3QgY29uc3BpcmFjeSBhZ2FpbnN0IHRoZSByZXB1YmxpYy4gQnV0IGlmIENhdGlsaW5lIGhhZCByZW1haW5lZCBpbiB0aGUgY2l0eSB0byB0aGlzCiAgICAgICBkYXksIGFsdGhvdWdoLCBhcyBsb25nIGFzIGhlIHdhcyBzbywgSSBtZXQgYWxsIGhpcyBkZXNpZ25zIGFuZCB3aXRoc3Rvb2QgdGhlbTsgeWV0LCB0byBzYXkKICAgICAgIHRoZSBsZWFzdCwgd2Ugc2hvdWxkIGhhdmUgaGFkIHRvIGZpZ2h0IHdpdGggaGltLCBhbmQgc2hvdWxkIG5ldmVyLCB3aGlsZSBoZSByZW1haW5lZCBhcyBhbgogICAgICAgZW5lbXkgaW4gdGhlIGNpdHksIGhhdmUgZGVsaXZlcmVkIHRoZSByZXB1YmxpYyBmcm9tIHN1Y2ggZGFuZ2Vycywgd2l0aCBzdWNoIGVhc2UsIHN1Y2gKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIHN1Y2ggc2lsZW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgU2F0dXJuYWxpYSB3YXMgYSBmZWFzdCBvZiBTYXR1cm4gYXQgd2hpY2ggZXh0cmFvcmRpbmFyeQogICAgICAgIGxpY2VuY2UgYW5kIGluZHVsZ2VuY2Ugd2FzIGFsbG93ZWQgdG8gYWxsIHRoZSBzbGF2ZXM7IGl0IHRvb2sgcGxhY2UgYXQgdGhlIGVuZCBvZiBEZWNlbWJlciwKICAgICAgICB3aGlsZSB0aGlzIHNwZWVjaCBvZiBDaWNlcm8gd2FzIGRlbGl2ZXJlZCBlYXJseSBpbiBOb3ZlbWJlci48L25vdGU+IHRvIG1hc3NhY3JlIHlvdSBoZSB3b3VsZAogICAgICAgbm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxMiIgLz4gaGF2ZSBhbm5vdW5jZWQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGV2ZW4gdGhlIGRheSBvZiBpdHMKICAgICAgIGRvb20gc28gbG9uZyBiZWZvcmVoYW5kLOKAlGhlIHdvdWxkIG5ldmVyIGhhdmUgYWxsb3dlZCBoaXMgc2VhbCBhbmQgaGlzIGxldHRlcnMsIHRoZQogICAgICAgdW5kZW5pYWJsZSB3aXRuZXNzZXMgb2YgaGlzIGd1aWx0LCB0byBiZSB0YWtlbiwgd2hpY2ggbm93LCBzaW5jZSBoZSBpcyBhYnNlbnQsIGhhcyBiZWVuIHNvCiAgICAgICBkb25lIHRoYXQgbm8gbGFyY2VueSBpbiBhIHByaXZhdGUgaG91c2UgaGFzIGV2ZXIgYmVlbiBzbyB0aG9yb3VnaGx5IGFuZCBjbGVhcmx5IGRldGVjdGVkIGFzCiAgICAgICB0aGlzIHZhc3QgY29uc3BpcmFjeSBhZ2FpbnN0IHRoZSByZXB1YmxpYy4gQnV0IGlmIENhdGlsaW5lIGhhZCByZW1haW5lZCBpbiB0aGUgY2l0eSB0byB0aGlzCiAgICAgICBkYXksIGFsdGhvdWdoLCBhcyBsb25nIGFzIGhlIHdhcyBzbywgSSBtZXQgYWxsIGhpcyBkZXNpZ25zIGFuZCB3aXRoc3Rvb2QgdGhlbTsgeWV0LCB0byBzYXkKICAgICAgIHRoZSBsZWFzdCwgd2Ugc2hvdWxkIGhhdmUgaGFkIHRvIGZpZ2h0IHdpdGggaGltLCBhbmQgc2hvdWxkIG5ldmVyLCB3aGlsZSBoZSByZW1haW5lZCBhcyBhbgogICAgICAgZW5lbXkgaW4gdGhlIGNpdHksIGhhdmUgZGVsaXZlcmVkIHRoZSByZXB1YmxpYyBmcm9tIHN1Y2ggZGFuZ2Vycywgd2l0aCBzdWNoIGVhc2UsIHN1Y2gKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIHN1Y2ggc2lsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsdGhvdWdoIGFsbCB0aGVzZSB0aGluZ3MsIE8gUm9tYW5zLCBoYXZlIGJlZW4gc28gbWFuYWdlZCBieSBtZW4gdGhhdCB0aGV5IGFwcGVhciB0byBoYXZlCiAgICAgICBiZWVuIGRvbmUgYW5kIHByb3ZpZGVkIGZvciBieSB0aGUgb3JkZXIgYW5kIGRlc2lnbiBvZiB0aGUgaW1tb3J0YWwgZ29kczsgYW5kIGFzIHdlIG1heQogICAgICAgY29uamVjdHVyZSB0aGlzIGJlY2F1c2UgdGhlIGRpcmVjdGlvbiBvZiBzdWNoIHdlaWdodHkgYWZmYWlycyBzY2FyY2VseSBhcHBlYXJzIGNhcGFibGUgb2YKICAgICAgIGhhdmluZyBiZWVuIGNhcnJpZWQgb3V0IGJ5IGh1bWFuIHdpc2RvbTsgc28sIHRvbywgdGhleSBoYXZlIGF0IHRoaXMgdGltZSBzbyBicm91Z2h0IHVzCiAgICAgICBwcmVzZW50IGFpZCBhbmQgYXNzaXN0YW5jZSwgdGhhdCB3ZSBjb3VsZCBhbG1vc3QgYmVob2xkIHRoZW0gd2l0aG91dCBleWVzLiBGb3IgdG8gc2F5IG5vdGhpbmcKICAgICAgIG9mIHRob3NlIHRoaW5ncywgbmFtZWx5LCB0aGUgZmlyZWJyYW5kcyBzZWVuIGluIHRoZSB3ZXN0IGluIHRoZSBuaWdodCB0aW1lLCBhbmQgdGhlIGhlYXQgb2YKICAgICAgIHRoZSBhdG1vc3BoZXJlLOKAlHRvIHBhc3Mgb3ZlciB0aGUgZmFsbGluZyBvZiB0aHVuZGVyYm9sdHMgYW5kIHRoZQogICAgICAgZWFydGhxdWFrZXMs4oCUdG8gc2F5IG5vdGhpbmcgb2YgYWxsIHRoZSBvdGhlciBwb3J0ZW50cyB3aGljaCBoYXZlIHRha2VuIHBsYWNlIGluCiAgICAgICBzdWNoIG51bWJlciBkdXJpbmcgbXkgY29uc3Vsc2hpcCwgdGhhdCB0aGUgaW1tb3J0YWwgZ29kcyB0aGVtc2VsdmVzIGhhdmUgYmVlbiBzZWVtaW5nIHRvCiAgICAgICBwcmVkaWN0IHdoYXQgaXMgbm93IHRha2luZyBwbGFjZTsgeWV0LCBhdCBhbGwgZXZlbnRzLCB0aGlzIHdoaWNoIEkgYW0gYWJvdXQgdG8gbWVudGlvbiwgTwogICAgICAgUm9tYW5zLCBtdXN0IGJlIG5laXRoZXIgcGFzc2VkIG92ZXIgbm9yIG9taXR0ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3IgeW91IHJlY29sbGVjdCwgSSBzdXBwb3NlLCB3aGVuIENvdHRhIGFuZCBUb3JxdWF0dXMgd2VyZSBjb25zdWxzLCB0aGF0IG1hbnkgdG93ZXJzIGluCiAgICAgICB0aGUgQ2FwaXRvbCB3ZXJlIHN0cnVjayB3aXRoIGxpZ2h0bmluZywgd2hlbiBib3RoIHRoZSBpbWFnZXMgb2YgdGhlIGltbW9ydGFsIGdvZHMgd2VyZSBtb3ZlZCwKICAgICAgIGFuZCB0aGUgc3RhdHVlcyBvZiBtYW55IGFuY2llbnQgbWVuIHdlcmUgdGhyb3duIGRvd24sIGFuZCB0aGUgYnJhemVuIHRhYmxldHMgb24gd2hpY2ggdGhlCiAgICAgICBsYXdzIHdlcmUgd3JpdHRlbiB3ZXJlIG1lbHRlZC4gRXZlbiBSb211bHVzLCB3aG8gYnVpbHQgdGhpcyBjaXR5LCB3YXMgc3RydWNrLCB3aGljaCwgeW91CiAgICAgICByZWNvbGxlY3QsIHN0b29kIGluIHRoZSBDYXBpdG9sLCBhIGdpbHQgc3RhdHVlLCBsaXR0bGUgYW5kIHN1Y2tpbmcsIGFuZCBjbGluZ2luZyB0byB0aGUgdGVhdHMKICAgICAgIG9mIHRoZSB3b2xmLiBBbmQgd2hlbiBhdCB0aGlzIHRpbWUgdGhlIHNvb3Roc2F5ZXJzIHdlcmUgYXNzZW1ibGVkIG91dCBvZiBhbGwgRXRydXJpYSwgdGhleQogICAgICAgc2FpZCB0aGF0IHNsYXVnaHRlciwgYW5kIGNvbmZsYWdyYXRpb24sIGFuZCB0aGUgb3ZlcnRocm93IG9mIHRoZSBsYXdzLCBhbmQgY2l2aWwgYW5kIGRvbWVzdGljCiAgICAgICB3YXIsIGFuZCB0aGUgZmFsbCBvZiB0aGUgd2hvbGUgY2l0eSBhbmQgZW1waXJlIHdhcyBhdCBoYW5kLCB1bmxlc3MgdGhlIGltbW9ydGFsIGdvZHMsIGJlaW5nCiAgICAgICBhcHBlYXNlZCBpbiBldmVyeSBwb3NzaWJsZSBtYW5uZXIsIGJ5IHRoZWlyIG93biBwb3dlciB0dXJuZWQgYXNpZGUsIGFzIEkgbWF5IHNheSwgdGhlIHZlcnkKICAgICAgIGZhdGVzIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZWZvcmUsIGFjY29yZGluZyB0byB0aGVpciBhbnN3ZXJzLCBnYW1lcyB3ZXJlIGNlbGVicmF0ZWQgZm9yIHRlbiBkYXlzLCBub3Igd2FzIGFueXRoaW5nCiAgICAgICBvbWl0dGVkIHdoaWNoIG1pZ2h0IHRlbmQgdG8gdGhlIGFwcGVhc2luZyBvZiB0aGUgZ29kcy4gQW5kIHRoZXkgZW5qb2luZWQgYWxzbyB0aGF0IHdlIHNob3VsZAogICAgICAgbWFrZSBhIGdyZWF0ZXIgc3RhdHVlIG9mIEp1cGl0ZXIsIGFuZCBwbGFjZSBpdCBpbiBhIGxvZnR5IHNpdHVhdGlvbiwgYW5kIChjb250cmFyeSB0byB3aGF0CiAgICAgICBoYWQgYmVlbiBkb25lIGJlZm9yZSkgdHVybiBpdCB0b3dhcmRzIHRoZSBlYXN0LiBBbmQgdGhleSBzYWlkIHRoYXQgdGhleSBob3BlZCB0aGF0IGlmIHRoYXQKICAgICAgIHN0YXR1ZSB3aGljaCB5b3Ugbm93IGJlaG9sZCBsb29rZWQgdXBvbiB0aGUgcmlzaW5nIG9mIHRoZSBzdW4sIGFuZCB0aGUgZm9ydW0sIGFuZCB0aGUKICAgICAgIHNlbmF0ZS1ob3VzZSwgdGhhdCB0aG9zZSBkZXNpZ25zIHdoaWNoIHdlcmUgc2VjcmV0bHkgZm9ybWVkIGFnYWluc3QgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eQogICAgICAgYW5kIGVtcGlyZSB3b3VsZCBiZSBicm91Z2h0IHRvIGxpZ2h0IHNvIGFzIHRvIGJlIGFibGUgdG8gYmUgdGhvcm91Z2hseSBzZWVuIGJ5IHRoZSBzZW5hdGUgYW5kCiAgICAgICBieSB0aGUgUm9tYW4gcGVvcGxlLiBBbmQgdGhlIGNvbnN1bHMgb3JkZXJlZCBpdCB0byBiZSBzbyBwbGFjZWQ7IGJ1dCBzbyBncmVhdCB3YXMgdGhlIGRlbGF5CiAgICAgICBpbiB0aGUgd29yaywgdGhhdCBpdCB3YXMgbmV2ZXIgc2V0IHVwIGJ5IHRoZSBmb3JtZXIgY29uc3VscyBub3IgYnkgdXMgYmVmb3JlIHRoaXMgZGF5LgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPiBIZXJlIHdobywgTyBSb21hbnMgY2FuIHRoZXJlIGJlIHNvIG9ic3RpbmF0ZSBhZ2FpbnN0IHRoZQogICAgICAgdHJ1dGgsIHNvIGhlYWRzdHJvbmcsIHNvIHZvaWQgb2Ygc2Vuc2UsIGFzIHRvIGRlbnkgdGhhdCBhbGwgdGhlc2UgdGhpbmdzIHdoaWNoIHdlIHNlZSwgYW5kCiAgICAgICBlc3BlY2lhbGx5IHRoaXMgY2l0eSwgaXMgZ292ZXJuZWQgYnkgdGhlIGRpdmluZSBhdXRob3JpdHkgYW5kIHBvd2VyIG9mIHRoZSBpbW1vcnRhbCBnb2RzPwogICAgICAgRm9yc29vdGgsIHdoZW4gdGhpcyBhbnN3ZXIgaGFkIGJlZW4gZ2l2ZW4sIHRoYXQgbWFzc2FjcmUsIGFuZCBjb25mbGFncmF0aW9uLCBhbmQgcnVpbiB3YXMKICAgICAgIHByZXBhcmVkIGZvciB0aGUgcmVwdWJsaWM7IGFuZCB0aGF0LCB0b28sIGJ5IHByb2ZsaWdhdGUgY2l0aXplbnMsIHdoaWNoLCBmcm9tIHRoZSBlbm9ybWl0eSBvZgogICAgICAgdGhlIHdpY2tlZG5lc3MsIGFwcGVhcmVkIGluY3JlZGlibGUgdG8gc29tZSBwZW9wbGUsIHlvdSBmb3VuZCB0aGF0IGl0IGhhZCBub3Qgb25seSBiZWVuCiAgICAgICBwbGFubmVkIGJ5IHdpY2tlZCBjaXRpemVucywgYnV0IGhhZCBldmVuIGJlZW4gdW5kZXJ0YWtlbiBhbmQgY29tbWVuY2VkLiBBbmQgaXMgbm90IHRoaXMgZmFjdAogICAgICAgc28gcHJlc2VudCB0aGF0IGl0IGFwcGVhcnMgdG8gaGF2ZSB0YWtlbiBwbGFjZSBieSB0aGUgZXhwcmVzcyB3aWxsIG9mIHRoZSBnb29kIGFuZCBtaWdodHkKICAgICAgIEp1cGl0ZXIsIHRoYXQsIHdoZW4gdGhpcyBkYXksIGVhcmx5IGluIHRoZSBtb3JuaW5nLCBib3RoIHRoZSBjb25zcGlyYXRvcnMgYW5kIHRoZWlyIGFjY3VzZXJzCiAgICAgICB3ZXJlIGJlaW5nIGxlZCBieSBteSBjb21tYW5kIHRocm91Z2ggdGhlIGZvcnVtIHRvIHRoZSBUZW1wbGUgb2YgQ29uY29yZCwgYXQgdGhhdCB2ZXJ5IHRpbWUKICAgICAgIHRoZSBzdGF0dWUgd2FzIGJlaW5nIGVyZWN0ZWQ/IEFuZCB3aGVuIGl0IHdhcyBzZXQgdXAgYW5kIHR1cm5lZCB0b3dhcmRzIHlvdSBhbmQgdG93YXJkcyB0aGUKICAgICAgIHNlbmF0ZSB0aGUgc2VuYXRlIGFuZCB5b3UgeW91cnNlbHZlcyBzYXcgZXZlcnl0aGluZyB3aGljaCBoYWQgYmVlbiBwbGFubmVkIGFnYWluc3QgdGhlCiAgICAgICB1bml2ZXJzYWwgc2FmZXR5IGJyb3VnaHQgdG8gbGlnaHQgYW5kIG1hZGUgbWFuaWZlc3QuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSGVyZSB3aG8sIE8gUm9tYW5zIGNhbiB0aGVyZSBiZSBzbyBvYnN0aW5hdGUgYWdhaW5zdCB0aGUKICAgICAgIHRydXRoLCBzbyBoZWFkc3Ryb25nLCBzbyB2b2lkIG9mIHNlbnNlLCBhcyB0byBkZW55IHRoYXQgYWxsIHRoZXNlIHRoaW5ncyB3aGljaCB3ZSBzZWUsIGFuZAogICAgICAgZXNwZWNpYWxseSB0aGlzIGNpdHksIGlzIGdvdmVybmVkIGJ5IHRoZSBkaXZpbmUgYXV0aG9yaXR5IGFuZCBwb3dlciBvZiB0aGUgaW1tb3J0YWwgZ29kcz8KICAgICAgIEZvcnNvb3RoLCB3aGVuIHRoaXMgYW5zd2VyIGhhZCBiZWVuIGdpdmVuLCB0aGF0IG1hc3NhY3JlLCBhbmQgY29uZmxhZ3JhdGlvbiwgYW5kIHJ1aW4gd2FzCiAgICAgICBwcmVwYXJlZCBmb3IgdGhlIHJlcHVibGljOyBhbmQgdGhhdCwgdG9vLCBieSBwcm9mbGlnYXRlIGNpdGl6ZW5zLCB3aGljaCwgZnJvbSB0aGUgZW5vcm1pdHkgb2YKICAgICAgIHRoZSB3aWNrZWRuZXNzLCBhcHBlYXJlZCBpbmNyZWRpYmxlIHRvIHNvbWUgcGVvcGxlLCB5b3UgZm91bmQgdGhhdCBpdCBoYWQgbm90IG9ubHkgYmVlbgogICAgICAgcGxhbm5lZCBieSB3aWNrZWQgY2l0aXplbnMsIGJ1dCBoYWQgZXZlbiBiZWVuIHVuZGVydGFrZW4gYW5kIGNvbW1lbmNlZC4gQW5kIGlzIG5vdCB0aGlzIGZhY3QKICAgICAgIHNvIHByZXNlbnQgdGhhdCBpdCBhcHBlYXJzIHRvIGhhdmUgdGFrZW4gcGxhY2UgYnkgdGhlIGV4cHJlc3Mgd2lsbCBvZiB0aGUgZ29vZCBhbmQgbWlnaHR5CiAgICAgICBKdXBpdGVyLCB0aGF0LCB3aGVuIHRoaXMgZGF5LCBlYXJseSBpbiB0aGUgbW9ybmluZywgYm90aCB0aGUgY29uc3BpcmF0b3JzIGFuZCB0aGVpciBhY2N1c2VycwogICAgICAgd2VyZSBiZWluZyBsZWQgYnkgbXkgY29tbWFuZCB0aHJvdWdoIHRoZSBmb3J1bSB0byB0aGUgVGVtcGxlIG9mIENvbmNvcmQsIGF0IHRoYXQgdmVyeSB0aW1lCiAgICAgICB0aGUgc3RhdHVlIHdhcyBiZWluZyBlcmVjdGVkPyBBbmQgd2hlbiBpdCB3YXMgc2V0IHVwIGFuZCB0dXJuZWQgdG93YXJkcyB5b3UgYW5kIHRvd2FyZHMgdGhlCiAgICAgICBzZW5hdGUgdGhlIHNlbmF0ZSBhbmQgeW91IHlvdXJzZWx2ZXMgc2F3IGV2ZXJ5dGhpbmcgd2hpY2ggaGFkIGJlZW4gcGxhbm5lZCBhZ2FpbnN0IHRoZQogICAgICAgdW5pdmVyc2FsIHNhZmV0eSBicm91Z2h0IHRvIGxpZ2h0IGFuZCBtYWRlIG1hbmlmZXN0LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG9uIHRoaXMgYWNjb3VudCB0aGV5IGRlc2VydmUgZXZlbiBncmVhdGVyIGhhdHJlZCBhbmQKICAgICAgIGdyZWF0ZXIgcHVuaXNobWVudCwgZm9yIGhhdmluZyBhdHRlbXB0ZWQgdG8gYXBwbHkgdGhlaXIgZmF0YWwgYW5kIHdpY2tlZCBmaXJlLCBub3Qgb25seSB0bwogICAgICAgeW91ciBob3VzZXMgYW5kIGhvbWVzLCBidXQgZXZlbiB0byB0aGUgc2hyaW5lcyBhbmQgdGVtcGxlcyBvZiB0aGUgR29kcy4gQW5kIGlmIEkgd2VyZSB0byBzYXkKICAgICAgIHRoYXQgaXQgd2FzIEkgd2hvIHJlc2lzdGVkIHRoZW0sIEkgc2hvdWxkIHRha2UgdG9vIG11Y2ggdG8gbXlzZWxmIGFuZCBvdWdodCBub3QgdG8gYmUgYm9ybmUuCiAgICAgICBIZeKAlGhlLCBKdXBpdGVyLCByZXNpc3RlZCB0aGVtLCBIZSBkZXRlcm1pbmVkIHRoYXQgdGhlIENhcGl0b2wgc2hvdWxkIGJlIHNhZmUsIGhlCiAgICAgICBzYXZlZCB0aGVzZSB0ZW1wbGVzLCBoZSBzYXZlZCB0aGlzIGNpdHksIGhlIHNhdmVkIGFsbCBvZiB5b3UuIDxwYiBuPSIzMTQiIC8+IEl0IGlzIHVuZGVyIHRoZQogICAgICAgZ3VpZGFuY2Ugb2YgdGhlIGltbW9ydGFsIGdvZHMsIE8gUm9tYW5zLCB0aGF0IEkgaGF2ZSBjaGVyaXNoZWQgdGhlIGludGVudGlvbiBhbmQgZGVzaXJlcwogICAgICAgd2hpY2ggSSBoYXZlLCBhbmQgaGF2ZSBhcnJpdmVkIGF0IHN1Y2ggdW5kZW5pYWJsZSBwcm9vZnMuIFN1cmVseSwgdGhhdCB0YW1wZXJpbmcgd2l0aCB0aGUKICAgICAgIEFsbG9icm9nZXMgd291bGQgbmV2ZXIgaGF2ZSB0YWtlbiBwbGFjZSwgc28gaW1wb3J0YW50IGEgbWF0dGVyIHdvdWxkIG5ldmVyIGhhdmUgYmVlbiBzbyBtYWRseQogICAgICAgZW50cnVzdGVkLCBieSBMZW50dWx1cyBhbmQgdGhlIHJlc3Qgb2Ygb3VyIGludGVybmFsIGVuZW1pZXMsIHRvIHN0cmFuZ2VycyBhbmQgZm9yZWlnbmVycywKICAgICAgIHN1Y2ggbGV0dGVycyB3b3VsZCBuZXZlciBoYXZlIGJlZW4gd3JpdHRlbiwgdW5sZXNzIGFsbCBwcnVkZW5jZSBoYWQgYmVlbiB0YWtlbiBieSB0aGUKICAgICAgIGltbW9ydGFsIGdvZHMgZnJvbSBzdWNoIHRlcnJpYmxlIGF1ZGFjaXR5LiBXaGF0IHNoYWxsIEkgc2F5PyBUaGF0IEdhdWxzLCBtZW4gZnJvbSBhIHN0YXRlCiAgICAgICBzY2FyY2VseSBhdCBwZWFjZSB3aXRoIHVzLCB0aGUgb25seSBuYXRpb24gZXhpc3Rpbmcgd2hpY2ggc2VlbXMgYm90aCB0byBiZSBhYmxlIHRvIG1ha2Ugd2FyCiAgICAgICBvbiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgbm90IHRvIGJlIHVud2lsbGluZyB0byBkbyBzbyzigJR0aGF0IHRoZXkgc2hvdWxkIGRpc3JlZ2FyZAogICAgICAgdGhlIGhvcGUgb2YgZW1waXJlIGFuZCBvZiB0aGUgZ3JlYXRlc3Qgc3VjY2VzcyB2b2x1bnRhcmlseSBvZmZlcmVkIHRvIHRoZW0gYnkgcGF0cmljaWFuczsgYW5kCiAgICAgICBzaG91bGQgcHJlZmVyIHlvdXIgc2FmZXR5IHRvIHRoZWlyIG93biBwb3dlcuKAlGRvIHlvdSBub3QgdGhpbmsgdGhhdCB0aGF0IHdhcyBjYXVzZWQKICAgICAgIGJ5IGRpdmluZSBpbnRlcnBvc2l0aW9uPyBlc3BlY2lhbGx5IHdoZW4gdGhleSBjb3VsZCBoYXZlIGRlc3Ryb3llZCB1cywgbm90IGJ5IGZpZ2h0aW5nLCBidXQKICAgICAgIGJ5IGtlZXBpbmcgc2lsZW5jZS4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG9uIHRoaXMgYWNjb3VudCB0aGV5IGRlc2VydmUgZXZlbiBncmVhdGVyIGhhdHJlZCBhbmQKICAgICAgIGdyZWF0ZXIgcHVuaXNobWVudCwgZm9yIGhhdmluZyBhdHRlbXB0ZWQgdG8gYXBwbHkgdGhlaXIgZmF0YWwgYW5kIHdpY2tlZCBmaXJlLCBub3Qgb25seSB0bwogICAgICAgeW91ciBob3VzZXMgYW5kIGhvbWVzLCBidXQgZXZlbiB0byB0aGUgc2hyaW5lcyBhbmQgdGVtcGxlcyBvZiB0aGUgR29kcy4gQW5kIGlmIEkgd2VyZSB0byBzYXkKICAgICAgIHRoYXQgaXQgd2FzIEkgd2hvIHJlc2lzdGVkIHRoZW0sIEkgc2hvdWxkIHRha2UgdG9vIG11Y2ggdG8gbXlzZWxmIGFuZCBvdWdodCBub3QgdG8gYmUgYm9ybmUuCiAgICAgICBIZeKAlGhlLCBKdXBpdGVyLCByZXNpc3RlZCB0aGVtLCBIZSBkZXRlcm1pbmVkIHRoYXQgdGhlIENhcGl0b2wgc2hvdWxkIGJlIHNhZmUsIGhlCiAgICAgICBzYXZlZCB0aGVzZSB0ZW1wbGVzLCBoZSBzYXZlZCB0aGlzIGNpdHksIGhlIHNhdmVkIGFsbCBvZiB5b3UuIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxNCIgLz4gSXQgaXMgdW5kZXIgdGhlCiAgICAgICBndWlkYW5jZSBvZiB0aGUgaW1tb3J0YWwgZ29kcywgTyBSb21hbnMsIHRoYXQgSSBoYXZlIGNoZXJpc2hlZCB0aGUgaW50ZW50aW9uIGFuZCBkZXNpcmVzCiAgICAgICB3aGljaCBJIGhhdmUsIGFuZCBoYXZlIGFycml2ZWQgYXQgc3VjaCB1bmRlbmlhYmxlIHByb29mcy4gU3VyZWx5LCB0aGF0IHRhbXBlcmluZyB3aXRoIHRoZQogICAgICAgQWxsb2Jyb2dlcyB3b3VsZCBuZXZlciBoYXZlIHRha2VuIHBsYWNlLCBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIgd291bGQgbmV2ZXIgaGF2ZSBiZWVuIHNvIG1hZGx5CiAgICAgICBlbnRydXN0ZWQsIGJ5IExlbnR1bHVzIGFuZCB0aGUgcmVzdCBvZiBvdXIgaW50ZXJuYWwgZW5lbWllcywgdG8gc3RyYW5nZXJzIGFuZCBmb3JlaWduZXJzLAogICAgICAgc3VjaCBsZXR0ZXJzIHdvdWxkIG5ldmVyIGhhdmUgYmVlbiB3cml0dGVuLCB1bmxlc3MgYWxsIHBydWRlbmNlIGhhZCBiZWVuIHRha2VuIGJ5IHRoZQogICAgICAgaW1tb3J0YWwgZ29kcyBmcm9tIHN1Y2ggdGVycmlibGUgYXVkYWNpdHkuIFdoYXQgc2hhbGwgSSBzYXk/IFRoYXQgR2F1bHMsIG1lbiBmcm9tIGEgc3RhdGUKICAgICAgIHNjYXJjZWx5IGF0IHBlYWNlIHdpdGggdXMsIHRoZSBvbmx5IG5hdGlvbiBleGlzdGluZyB3aGljaCBzZWVtcyBib3RoIHRvIGJlIGFibGUgdG8gbWFrZSB3YXIKICAgICAgIG9uIHRoZSBSb21hbiBwZW9wbGUsIGFuZCBub3QgdG8gYmUgdW53aWxsaW5nIHRvIGRvIHNvLOKAlHRoYXQgdGhleSBzaG91bGQgZGlzcmVnYXJkCiAgICAgICB0aGUgaG9wZSBvZiBlbXBpcmUgYW5kIG9mIHRoZSBncmVhdGVzdCBzdWNjZXNzIHZvbHVudGFyaWx5IG9mZmVyZWQgdG8gdGhlbSBieSBwYXRyaWNpYW5zOyBhbmQKICAgICAgIHNob3VsZCBwcmVmZXIgeW91ciBzYWZldHkgdG8gdGhlaXIgb3duIHBvd2Vy4oCUZG8geW91IG5vdCB0aGluayB0aGF0IHRoYXQgd2FzIGNhdXNlZAogICAgICAgYnkgZGl2aW5lIGludGVycG9zaXRpb24/IGVzcGVjaWFsbHkgd2hlbiB0aGV5IGNvdWxkIGhhdmUgZGVzdHJveWVkIHVzLCBub3QgYnkgZmlnaHRpbmcsIGJ1dAogICAgICAgYnkga2VlcGluZyBzaWxlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgTyBjaXRpemVucywgc2luY2UgYSBzdXBwbGljYXRpb24gaGFzIGJlZW4gZGVjcmVlZCBhdCBhbGwgdGhlIGFsdGFycywgY2VsZWJyYXRlCiAgICAgICB0aG9zZSBkYXlzIHdpdGggeW91ciB3aXZlcyBhbmQgY2hpbGRyZW47IGZvciBtYW55IGp1c3QgYW5kIGRlc2VydmVkIGhvbm91cnMgaGF2ZSBiZWVuIG9mdGVuCiAgICAgICBwYWlkIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBidXQganVzdGVyIG9uZXMgbmV2ZXIuIEZvciB5b3UgaGF2ZSBiZWVuIHNuYXRjaGVkIGZyb20gYSBtb3N0CiAgICAgICBjcnVlbCBhbmQgbWlzZXJhYmxlIGRlc3RydWN0aW9uLCBhbmQgeW91IGhhdmUgYmVlbiBzbmF0Y2hlZCBmcm9tIGl0IHdpdGhvdXQgc2xhdWdodGVyLAogICAgICAgd2l0aG91dCBibG9vZHNoZWQsIHdpdGhvdXQgYW4gYXJteSwgd2l0aG91dCBhIGJhdHRsZS4gWW91IGhhdmUgY29ucXVlcmVkIGluIHRoZSBnYXJiIG9mCiAgICAgICBwZWFjZSwgd2l0aCBtZSBpbiB0aGUgZ2FyYiBvZiBwZWFjZSBmb3IgeW91ciBvbmx5IGdlbmVyYWwgYW5kIGNvbW1hbmRlci4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gUmVtZW1iZXIsIE8gY2l0aXplbnMsIGFsbCBjaXZpbCBkaXNzZW5zaW9ucywgYW5kIG5vdAogICAgICAgb25seSB0aG9zZSB3aGljaCB5b3UgaGF2ZSBoZWFyZCBvZiBidXQgdGhlc2UgYWxzbyB3aGljaCB5b3UgeW91cnNlbHZlcyByZW1lbWJlciBhbmQgaGF2ZQogICAgICAgc2Vlbi4gTHVjaXVzIFN1bGxhIGNydXNoZWQgUHVibGl1cyBTdWxwaWNpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlN1bHBpY2l1cyBwcm9jdXJlZCBhIGxhdyB0bwogICAgICAgIGJlIHBhc3NlZCBmb3IgdGFraW5nIHRoZSBjb21tYW5kIGFnYWluc3QgTWl0aHJpZGF0ZXMgZnJvbSBTdWxsYSBhbmQgZ2l2aW5nIGl0IHRvIE1hcml1czsKICAgICAgICBTdWxsYSBjYW1lIHRvIFJvbWUgd2l0aCBoaXMgYXJteSBhbmQgc2xldyBTdWxwaWNpdXMsIHdoZW4gTWFyaXVzIGZsZWQgdG8gQWZyaWNhLiBTdWxsYSBtYWRlCiAgICAgICAgT2N0YXZpdXMgYW5kIENpbm5hIGNvbnN1bHMsIHdobyBxdWFycmVsZWQgYWZ0ZXIgaGUgd2FzIGdvbmUsIGFuZCBDaW5uYSB3ZW50IG92ZXIgdG8gdGhlCiAgICAgICAgcGFydHkgb2YgTWFyaXVzLCB3aG8gcmV0dXJuZWQgdG8gUm9tZS4gTGVwaWR1cyBhbmQgQ2F0dWx1cyB3ZXJlIGNvbnN1bHMgdGhlIHllYXIgYWZ0ZXIgdGhlCiAgICAgICAgZGVhdGggb2YgU3VsbGEsIGFuZCB0aGV5IHF1YXJyZWxlZCBiZWNhdXNlIExlcGlkdXMgd2lzaGVkIHRvIHJlc2NpbmQgYWxsIHRoZSBhY3RzIG9mIFN1bGxhLgogICAgICAgIExlcGlkdXMgd2FzIGRlZmVhdGVkLCBmbGVkIHRvIFNhcmRpbmlhLCBhbmQgZGllZCB0aGVyZS48L25vdGU+OyBoZSBkcm92ZSBmcm9tIHRoZSBjaXR5IENhaXVzCiAgICAgICBNYXJpdXMgdGhlIGd1YXJkaWFuIG9mIHRoaXMgY2l0eTsgYW5kIG9mIG1hbnkgb3RoZXIgYnJhdmUgbWVuIHNvbWUgaGUgZHJvdmUgZnJvbSB0aGUgY2l0eSwKICAgICAgIGFuZCBzb21lIGhlIG11cmRlcmVkLiBDbmFldXMgT2N0YXZpdXMgdGhlIGNvbnN1bCBkcm92ZSBoaXMgY29sbGVhZ3VlIGJ5IGZvcmNlIG9mIGFybXMgb3V0IG9mCiAgICAgICB0aGUgY2l0eTsgYWxsIHRoaXMgcGxhY2Ugd2FzIGNyb3dkZWQgd2l0aCBoZWFwcyBvZiBjYXJjYXNzZXMgYW5kIGZsb3dlZCB3aXRoIHRoZSBibG9vZCBvZgogICAgICAgY2l0aXplbnM7IGFmdGVyd2FyZHMgQ2lubmEgYW5kIE1hcml1cyBnb3QgdGhlIHVwcGVyIGhhbmQ7IGFuZCB0aGVuIG1vc3QgaWxsdXN0cmlvdXMgbWVuIHdlcmUKICAgICAgIHB1dCB0byBkZWF0aCwgYW5kIHRoZSBzcGlyaXRzIG9mIHRoZSBzdGF0ZSB3ZXJlIGV4dGluZ3Vpc2hlZC4gQWZ0ZXJ3YXJkcyBTdWxsYSBhdmVuZ2VkIHRoZQogICAgICAgY3J1ZWx0eSBvZiB0aGlzIHZpY3Rvcnk7IGl0IGlzIG5lZWRsZXNzIHRvIHNheSB3aXRoIHdoYXQgYSBkaW1pbnV0aW9uIG9mIHRoZSBjaXRpemVucyBhbmQKICAgICAgIHdpdGggd2hhdCBkaXNhc3RlcnMgdG8gdGhlIHJlcHVibGljIE1hcmN1cyBMZXBpZHVzIGRpc2FncmVlZCB3aXRoIHRoYXQgbW9zdCBlbWluZW50IGFuZCBicmF2ZQogICAgICAgbWFuIFF1aW50dXMsIENhdHVsdXMuIEhpcyBkZWF0aCBkaWQgbm90IGNhdXNlIGFzIG11Y2ggZ3JpZWYgdG8gdGhlIHJlcHVibGljIGFzIHRoYXQgb2YgdGhlCiAgICAgICBvdGhlcnMuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gUmVtZW1iZXIsIE8gY2l0aXplbnMsIGFsbCBjaXZpbCBkaXNzZW5zaW9ucywgYW5kIG5vdAogICAgICAgb25seSB0aG9zZSB3aGljaCB5b3UgaGF2ZSBoZWFyZCBvZiBidXQgdGhlc2UgYWxzbyB3aGljaCB5b3UgeW91cnNlbHZlcyByZW1lbWJlciBhbmQgaGF2ZQogICAgICAgc2Vlbi4gTHVjaXVzIFN1bGxhIGNydXNoZWQgUHVibGl1cyBTdWxwaWNpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+U3VscGljaXVzIHByb2N1cmVkIGEgbGF3IHRvCiAgICAgICAgYmUgcGFzc2VkIGZvciB0YWtpbmcgdGhlIGNvbW1hbmQgYWdhaW5zdCBNaXRocmlkYXRlcyBmcm9tIFN1bGxhIGFuZCBnaXZpbmcgaXQgdG8gTWFyaXVzOwogICAgICAgIFN1bGxhIGNhbWUgdG8gUm9tZSB3aXRoIGhpcyBhcm15IGFuZCBzbGV3IFN1bHBpY2l1cywgd2hlbiBNYXJpdXMgZmxlZCB0byBBZnJpY2EuIFN1bGxhIG1hZGUKICAgICAgICBPY3Rhdml1cyBhbmQgQ2lubmEgY29uc3Vscywgd2hvIHF1YXJyZWxlZCBhZnRlciBoZSB3YXMgZ29uZSwgYW5kIENpbm5hIHdlbnQgb3ZlciB0byB0aGUKICAgICAgICBwYXJ0eSBvZiBNYXJpdXMsIHdobyByZXR1cm5lZCB0byBSb21lLiBMZXBpZHVzIGFuZCBDYXR1bHVzIHdlcmUgY29uc3VscyB0aGUgeWVhciBhZnRlciB0aGUKICAgICAgICBkZWF0aCBvZiBTdWxsYSwgYW5kIHRoZXkgcXVhcnJlbGVkIGJlY2F1c2UgTGVwaWR1cyB3aXNoZWQgdG8gcmVzY2luZCBhbGwgdGhlIGFjdHMgb2YgU3VsbGEuCiAgICAgICAgTGVwaWR1cyB3YXMgZGVmZWF0ZWQsIGZsZWQgdG8gU2FyZGluaWEsIGFuZCBkaWVkIHRoZXJlLjwvbm90ZT47IGhlIGRyb3ZlIGZyb20gdGhlIGNpdHkgQ2FpdXMKICAgICAgIE1hcml1cyB0aGUgZ3VhcmRpYW4gb2YgdGhpcyBjaXR5OyBhbmQgb2YgbWFueSBvdGhlciBicmF2ZSBtZW4gc29tZSBoZSBkcm92ZSBmcm9tIHRoZSBjaXR5LAogICAgICAgYW5kIHNvbWUgaGUgbXVyZGVyZWQuIENuYWV1cyBPY3Rhdml1cyB0aGUgY29uc3VsIGRyb3ZlIGhpcyBjb2xsZWFndWUgYnkgZm9yY2Ugb2YgYXJtcyBvdXQgb2YKICAgICAgIHRoZSBjaXR5OyBhbGwgdGhpcyBwbGFjZSB3YXMgY3Jvd2RlZCB3aXRoIGhlYXBzIG9mIGNhcmNhc3NlcyBhbmQgZmxvd2VkIHdpdGggdGhlIGJsb29kIG9mCiAgICAgICBjaXRpemVuczsgYWZ0ZXJ3YXJkcyBDaW5uYSBhbmQgTWFyaXVzIGdvdCB0aGUgdXBwZXIgaGFuZDsgYW5kIHRoZW4gbW9zdCBpbGx1c3RyaW91cyBtZW4gd2VyZQogICAgICAgcHV0IHRvIGRlYXRoLCBhbmQgdGhlIHNwaXJpdHMgb2YgdGhlIHN0YXRlIHdlcmUgZXh0aW5ndWlzaGVkLiBBZnRlcndhcmRzIFN1bGxhIGF2ZW5nZWQgdGhlCiAgICAgICBjcnVlbHR5IG9mIHRoaXMgdmljdG9yeTsgaXQgaXMgbmVlZGxlc3MgdG8gc2F5IHdpdGggd2hhdCBhIGRpbWludXRpb24gb2YgdGhlIGNpdGl6ZW5zIGFuZAogICAgICAgd2l0aCB3aGF0IGRpc2FzdGVycyB0byB0aGUgcmVwdWJsaWMgTWFyY3VzIExlcGlkdXMgZGlzYWdyZWVkIHdpdGggdGhhdCBtb3N0IGVtaW5lbnQgYW5kIGJyYXZlCiAgICAgICBtYW4gUXVpbnR1cywgQ2F0dWx1cy4gSGlzIGRlYXRoIGRpZCBub3QgY2F1c2UgYXMgbXVjaCBncmllZiB0byB0aGUgcmVwdWJsaWMgYXMgdGhhdCBvZiB0aGUKICAgICAgIG90aGVycy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoZXNlIGRpc3NlbnNpb25zLCBPIFJvbWFucywgd2VyZSBzdWNoIGFzIGNvbmNlcm5lZAogICAgICAgbm90IHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgcmVwdWJsaWMsIGJ1dCBvbmx5IGEgY2hhbmdlIGluIHRoZSBjb25zdGl0dXRpb24uIFRoZXkgZGlkIG5vdCB3aXNoCiAgICAgICB0aGF0IHRoZXJlIHNob3VsZCBiZSBubyByZXB1YmxpYywgYnV0IHRoYXQgdGhleSB0aGVtc2VsdmVzIHNob3VsZCBiZSB0aGUgY2hpZWYgbWVuIGluIHRoYXQKICAgICAgIHdoaWNoIGV4aXN0ZWQ7IG5vciBkaWQgdGhleSBkZXNpcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgYnVybnQsIGJ1dCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgc2hvdWxkIGZsb3VyaXNoIGluIGl0LiBBbmQgeWV0IGFsbCB0aG9zZSBkaXNzZW5zaW9ucywgbm9uZSBvZiB3aGljaCBhaW1lZCBhdCB0aGUgZGVzdHJ1Y3Rpb24KICAgICAgIG9mIHRoZSByZXB1YmxpYywgd2VyZSBzdWNoIHRoYXQgdGhleSB3ZXJlIHRvIGJlIHRlcm1pbmF0ZWQgbm90IGJ5IGEgcmVjb25jaWxpYXRpb24gYW5kCiAgICAgICBjb25jb3JkLCBidXQgb25seSBieSBpbnRlcm5lY2luZSB3YXIgYW1vbmcgdGhlIGNpdGl6ZW5zLiBCdXQgaW4gdGhpcyB3YXIgYWxvbmUsIHRoZSBncmVhdGVzdAogICAgICAgYW5kIG1vc3QgY3J1ZWwgaW4gdGhlIG1lbW9yeSBvZiBtYW4s4oCUYSB3YXIgc3VjaCBhcyBldmVuIHRoZSBjb3VudHJpZXMgb2YgdGhlCiAgICAgICBiYXJiYXJpYW5zIGhhdmUgbmV2ZXIgd2FnZWQgd2l0aCB0aGVpciBvd24gdHJpYmVzLOKAlGEgd2FyIGluIHdoaWNoIHRoaXMgbGF3IHdhcyBsYWlkCiAgICAgICBkb3duIGJ5IExlbnR1bHVzLCBhbmQgQ2F0aWxpbmUsIGFuZCBDYXNzaXVzIGFuZCBDZXRoZWd1cyB0aGF0IGV2ZXJ5IG9uZSwgd2hvIGNvdWxkIGxpdmUgaW4KICAgICAgIHNhZmV0eSBhcyBsb25nIGFzIHRoZSBjaXR5IHJlbWFpbmVkIGluIHNhZmV0eSwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgYW4gZW5lbXksIGluIHRoaXMgd2FyCiAgICAgICBJIGhhdmUgc28gbWFuYWdlZCBtYXR0ZXJzLCBPIFJvbWFucyB0aGF0IHlvdSBzaG91bGQgYWxsIGJlIHByZXNlcnZlZCBpbiBzYWZldHk7IGFuZCB0aG91Z2gKICAgICAgIHlvdXIgZW5lbWllcyBoYWQgdGhvdWdodCB0aGF0IG9ubHkgc3VjaCBhIG51bWJlciBvZiB0aGUgY2l0aXplbnMgd291bGQgYmUgbGVmdCBhcyBoYWQgaGVsZAogICAgICAgb3V0IGFnYWluc3QgYW4gaW50ZXJtaW5hYmxlIG1hc3NhY3JlIGFuZCBvbmx5IHNvIG11Y2ggb2YgdGhlIGNpdHkgYXMgdGhlIGZsYW1lcyBjb3VsZCBub3QKICAgICAgIGRldm91ciwgSSBoYXZlIHByZXNlcnZlZCBib3RoIHRoZSBjaXR5IGFuZCB0aGUgY2l0aXplbnMgdW5odXJ0IGFuZCB1bmRpbWluaXNoZWQuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoZXNlIGRpc3NlbnNpb25zLCBPIFJvbWFucywgd2VyZSBzdWNoIGFzIGNvbmNlcm5lZAogICAgICAgbm90IHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgcmVwdWJsaWMsIGJ1dCBvbmx5IGEgY2hhbmdlIGluIHRoZSBjb25zdGl0dXRpb24uIFRoZXkgZGlkIG5vdCB3aXNoCiAgICAgICB0aGF0IHRoZXJlIHNob3VsZCBiZSBubyByZXB1YmxpYywgYnV0IHRoYXQgdGhleSB0aGVtc2VsdmVzIHNob3VsZCBiZSB0aGUgY2hpZWYgbWVuIGluIHRoYXQKICAgICAgIHdoaWNoIGV4aXN0ZWQ7IG5vciBkaWQgdGhleSBkZXNpcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgYnVybnQsIGJ1dCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgc2hvdWxkIGZsb3VyaXNoIGluIGl0LiBBbmQgeWV0IGFsbCB0aG9zZSBkaXNzZW5zaW9ucywgbm9uZSBvZiB3aGljaCBhaW1lZCBhdCB0aGUgZGVzdHJ1Y3Rpb24KICAgICAgIG9mIHRoZSByZXB1YmxpYywgd2VyZSBzdWNoIHRoYXQgdGhleSB3ZXJlIHRvIGJlIHRlcm1pbmF0ZWQgbm90IGJ5IGEgcmVjb25jaWxpYXRpb24gYW5kCiAgICAgICBjb25jb3JkLCBidXQgb25seSBieSBpbnRlcm5lY2luZSB3YXIgYW1vbmcgdGhlIGNpdGl6ZW5zLiBCdXQgaW4gdGhpcyB3YXIgYWxvbmUsIHRoZSBncmVhdGVzdAogICAgICAgYW5kIG1vc3QgY3J1ZWwgaW4gdGhlIG1lbW9yeSBvZiBtYW4s4oCUYSB3YXIgc3VjaCBhcyBldmVuIHRoZSBjb3VudHJpZXMgb2YgdGhlCiAgICAgICBiYXJiYXJpYW5zIGhhdmUgbmV2ZXIgd2FnZWQgd2l0aCB0aGVpciBvd24gdHJpYmVzLOKAlGEgd2FyIGluIHdoaWNoIHRoaXMgbGF3IHdhcyBsYWlkCiAgICAgICBkb3duIGJ5IExlbnR1bHVzLCBhbmQgQ2F0aWxpbmUsIGFuZCBDYXNzaXVzIGFuZCBDZXRoZWd1cyB0aGF0IGV2ZXJ5IG9uZSwgd2hvIGNvdWxkIGxpdmUgaW4KICAgICAgIHNhZmV0eSBhcyBsb25nIGFzIHRoZSBjaXR5IHJlbWFpbmVkIGluIHNhZmV0eSwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgYW4gZW5lbXksIGluIHRoaXMgd2FyCiAgICAgICBJIGhhdmUgc28gbWFuYWdlZCBtYXR0ZXJzLCBPIFJvbWFucyB0aGF0IHlvdSBzaG91bGQgYWxsIGJlIHByZXNlcnZlZCBpbiBzYWZldHk7IGFuZCB0aG91Z2gKICAgICAgIHlvdXIgZW5lbWllcyBoYWQgdGhvdWdodCB0aGF0IG9ubHkgc3VjaCBhIG51bWJlciBvZiB0aGUgY2l0aXplbnMgd291bGQgYmUgbGVmdCBhcyBoYWQgaGVsZAogICAgICAgb3V0IGFnYWluc3QgYW4gaW50ZXJtaW5hYmxlIG1hc3NhY3JlIGFuZCBvbmx5IHNvIG11Y2ggb2YgdGhlIGNpdHkgYXMgdGhlIGZsYW1lcyBjb3VsZCBub3QKICAgICAgIGRldm91ciwgSSBoYXZlIHByZXNlcnZlZCBib3RoIHRoZSBjaXR5IGFuZCB0aGUgY2l0aXplbnMgdW5odXJ0IGFuZCB1bmRpbWluaXNoZWQuIDwvdHJhbnNsYXRpb24+"
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGZvciB0aGVzZSBleHBsb2l0cywgaW1wb3J0YW50IGFzIHRoZXkgYXJlLCBPIFJvbWFucywKICAgICAgIEkgYXNrIGZyb20geW91IG5vIHJld2FyZCBvZiB2aXJ0dWUsIG5vIGJhZGdlIG9mIGhvbm91ciwgbm8gbW9udW1lbnQgb2YgbXkgZ2xvcnksIGJleW9uZCB0aGUKICAgICAgIGV2ZXJsYXN0aW5nIHJlY29sbGVjdGlvbiBvZiB0aGlzIGRheS4gSW4geW91ciBtaW5kcyBJIHdpc2ggYWxsIG15IHRyaXVtcGhzLCBhbGwgbXkKICAgICAgIGRlY29yYXRpb25zIG9mIGhvbm91cjsgdGhlIG1vbnVtZW50cyBvZiBteSBnbG9yeSwgdGhlIGJhZGdlcyBvZiBteSByZW5vd24sIHRvIGJlIHN0b3JlZCBhbmQKICAgICAgIGxhaWQgdXAuIE5vdGhpbmcgdm9pY2VsZXNzIGNhbiBkZWxpZ2h0IG1lLCBub3RoaW5nIHNpbGVudCzigJRub3RoaW5nLCBpbiBzaG9ydCwgc3VjaAogICAgICAgYXMgZXZlbiB0aG9zZSB3aG8gYXJlIGxlc3Mgd29ydGh5IGNhbiBvYnRhaW4uIEluIHlvdXIgbWVtb3J5LCBPIFJvbWFucywgbXkgbmFtZSBzaGFsbCBiZQogICAgICAgY2hlcmlzaGVkLCBpbiB5b3VyIGRpc2NvdXJzZXMgaXQgc2hhbGwgZ3JvdywgaW4gdGhlIG1vbnVtZW50cyBvZiB5b3VyIGxldHRlcnMgaXQgc2hhbGwgZ3JvdwogICAgICAgb2xkIGFuZCBzdHJlbmd0aGVuOyBhbmQgSSBmZWVsIGFzc3VyZWQgPHBiIG49IjMxNiIgLz4gdGhhdCB0aGUgc2FtZSBkYXkgd2hpY2ggSSBob3BlIHdpbGwgYmUKICAgICAgIGZvciBldmVybGFzdGluZzsgd2lsbCBiZSByZW1lbWJlcmVkIGZvciBldmVyLCBzbyBhcyB0byB0ZW5kIGJvdGggdG8gdGhlIHNhZmV0eSBvZiB0aGUgY2l0eQogICAgICAgYW5kIHRoZSByZWNvbGxlY3Rpb24gb2YgbXkgY29uc3Vsc2hpcDsgYW5kIHRoYXQgaXQgd2lsbCBiZSByZW1lbWJlcmVkIHRoYXQgdGhlcmUgZXhpc3RlZCBpbgogICAgICAgdGhpcyBjaXR5IGF0IHRoZSBzYW1lIHRpbWUgdHdvIGNpdGl6ZW5zLCBvbmUgb2Ygd2hvbSBsaW1pdGVkIHRoZSBib3VuZGFyaWVzIG9mIHlvdXIgZW1waXJlCiAgICAgICBvbmx5IGJ5IHRoZSByZWdpb25zIG9mIGhlYXZlbiwgbm90IGJ5IHRob3NlIG9mIHRoZSBlYXJ0aCwgd2hpbGUgdGhlIG90aGVyIHByZXNlcnZlZCB0aGUgYWJvZGUKICAgICAgIGFuZCBob21lIG9mIHRoYXQgc2FtZSBlbXBpcmUuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.11.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGZvciB0aGVzZSBleHBsb2l0cywgaW1wb3J0YW50IGFzIHRoZXkgYXJlLCBPIFJvbWFucywKICAgICAgIEkgYXNrIGZyb20geW91IG5vIHJld2FyZCBvZiB2aXJ0dWUsIG5vIGJhZGdlIG9mIGhvbm91ciwgbm8gbW9udW1lbnQgb2YgbXkgZ2xvcnksIGJleW9uZCB0aGUKICAgICAgIGV2ZXJsYXN0aW5nIHJlY29sbGVjdGlvbiBvZiB0aGlzIGRheS4gSW4geW91ciBtaW5kcyBJIHdpc2ggYWxsIG15IHRyaXVtcGhzLCBhbGwgbXkKICAgICAgIGRlY29yYXRpb25zIG9mIGhvbm91cjsgdGhlIG1vbnVtZW50cyBvZiBteSBnbG9yeSwgdGhlIGJhZGdlcyBvZiBteSByZW5vd24sIHRvIGJlIHN0b3JlZCBhbmQKICAgICAgIGxhaWQgdXAuIE5vdGhpbmcgdm9pY2VsZXNzIGNhbiBkZWxpZ2h0IG1lLCBub3RoaW5nIHNpbGVudCzigJRub3RoaW5nLCBpbiBzaG9ydCwgc3VjaAogICAgICAgYXMgZXZlbiB0aG9zZSB3aG8gYXJlIGxlc3Mgd29ydGh5IGNhbiBvYnRhaW4uIEluIHlvdXIgbWVtb3J5LCBPIFJvbWFucywgbXkgbmFtZSBzaGFsbCBiZQogICAgICAgY2hlcmlzaGVkLCBpbiB5b3VyIGRpc2NvdXJzZXMgaXQgc2hhbGwgZ3JvdywgaW4gdGhlIG1vbnVtZW50cyBvZiB5b3VyIGxldHRlcnMgaXQgc2hhbGwgZ3JvdwogICAgICAgb2xkIGFuZCBzdHJlbmd0aGVuOyBhbmQgSSBmZWVsIGFzc3VyZWQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzE2IiAvPiB0aGF0IHRoZSBzYW1lIGRheSB3aGljaCBJIGhvcGUgd2lsbCBiZQogICAgICAgZm9yIGV2ZXJsYXN0aW5nOyB3aWxsIGJlIHJlbWVtYmVyZWQgZm9yIGV2ZXIsIHNvIGFzIHRvIHRlbmQgYm90aCB0byB0aGUgc2FmZXR5IG9mIHRoZSBjaXR5CiAgICAgICBhbmQgdGhlIHJlY29sbGVjdGlvbiBvZiBteSBjb25zdWxzaGlwOyBhbmQgdGhhdCBpdCB3aWxsIGJlIHJlbWVtYmVyZWQgdGhhdCB0aGVyZSBleGlzdGVkIGluCiAgICAgICB0aGlzIGNpdHkgYXQgdGhlIHNhbWUgdGltZSB0d28gY2l0aXplbnMsIG9uZSBvZiB3aG9tIGxpbWl0ZWQgdGhlIGJvdW5kYXJpZXMgb2YgeW91ciBlbXBpcmUKICAgICAgIG9ubHkgYnkgdGhlIHJlZ2lvbnMgb2YgaGVhdmVuLCBub3QgYnkgdGhvc2Ugb2YgdGhlIGVhcnRoLCB3aGlsZSB0aGUgb3RoZXIgcHJlc2VydmVkIHRoZSBhYm9kZQogICAgICAgYW5kIGhvbWUgb2YgdGhhdCBzYW1lIGVtcGlyZS4gPC90cmFuc2xhdGlvbj4="
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.12.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSB0aGUgZm9ydHVuZSBhbmQgY29uZGl0aW9uIG9mIHRob3NlIGV4cGxvaXRzIHdoaWNoIEkgaGF2ZSBwZXJmb3JtZWQgaXMgbm90IHRoZQogICAgICAgc2FtZSB3aXRoIHRoYXQgb2YgdGhvc2UgbWVuIHdobyBoYXZlIGRpcmVjdGVkIGZvcmVpZ24gd2Fyc+KAlGJlY2F1c2UgSSBtdXN0IGxpdmUKICAgICAgIGFtb25nIHRob3NlIHdob20gSSBoYXZlIGRlZmVhdGVkIGFuZCBzdWJkdWVkLCB0aGV5IGhhdmUgbGVmdCB0aGVpciBlbmVtaWVzIGVpdGhlciBzbGFpbiBvcgogICAgICAgY3J1c2hlZCzigJRpdCBpcyB5b3VyIGJ1c2luZXNzLCBPIFJvbWFucywgdG8gdGFrZSBjYXJlLCBpZiB0aGVpciBnb29kIGRlZWRzIGFyZSBhCiAgICAgICBiZW5lZml0IHRvIG90aGVycywgdGhhdCBtaW5lIHNoYWxsIG5ldmVyIGJlIGFuIGluanVyeSB0byBtZS4gRm9yIHRoYXQgdGhlIHdpY2tlZCBhbmQKICAgICAgIHByb2ZsaWdhdGUgZGVzaWducyBvZiBhdWRhY2lvdXMgbWVuIHNoYWxsIG5vdCBiZSBhYmxlIHRvIGluanVyZSB5b3UsIEkgaGF2ZSB0YWtlbiBjYXJlOyBpdCBpcwogICAgICAgeW91ciBidXNpbmVzcyB0byB0YWtlIGNhcmUgdGhhdCB0aGV5IGRvIG5vdCBpbmp1cmUgbWUuIEFsdGhvdWdoLCBPIFJvbWFucywgbm8gaW5qdXJ5IGNhbiBiZQogICAgICAgZG9uZSB0byBtZSBieSB0aGVtLOKAlGZvciB0aGVyZSBpcyBhIGdyZWF0IHByb3RlY3Rpb24gaW4gdGhlIGFmZmVjdGlvbiBvZiBhbGwgZ29vZAogICAgICAgbWVuLCB3aGljaCBpcyBwcm9jdXJlZCBmb3IgbWUgZm9yIGV2ZXI7IHRoZXJlIGlzIGdyZWF0IGRpZ25pdHkgaW4gdGhlIHJlcHVibGljLCB3aGljaCB3aWxsCiAgICAgICBhbHdheXMgc2lsZW50bHkgZGVmZW5kIG1lOyB0aGVyZSBpcyBncmVhdCBwb3dlciBpbiBjb25zY2llbmNlLCBhbmQgdGhvc2Ugd2hvIG5lZ2xlY3QgaXQgd2hlbgogICAgICAgdGhleSBkZXNpcmUgdG8gYXR0YWNrIG1lIHdpbGwgZGVzdHJveSB0aGVtc2VsdmVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.12.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBtb3Jlb3ZlciB0aGF0IGRpc3Bvc2l0aW9uIGluIG1lLCBPIFJvbWFucywgdGhhdCBJIG5vdCBvbmx5IHdpbGwgeWllbGQgdG8gdGhlCiAgICAgICBhdWRhY2l0eSBvZiBubyBvbmUsIGJ1dCB0aGF0IEkgYWx3YXlzIHZvbHVudGFyaWx5IGF0dGFjayB0aGUgd29ydGhsZXNzLiBBbmQgaWYgYWxsIHRoZQogICAgICAgdmlvbGVuY2Ugb2YgZG9tZXN0aWMgZW5lbWllcyBiZWluZyB3YXJkZWQgb2ZmIGZyb20geW91IHR1cm5zIGl0c2VsZiB1cG9uIG1lIGFsb25lLCB5b3Ugd2lsbAogICAgICAgaGF2ZSB0byB0YWtlIGNhcmUsIE8gUm9tYW47IGluIHdoYXQgY29uZGl0aW9uIHlvdSB3aXNoIHRob3NlIG1lbiB0byBiZSBmb3IgdGhlIGZ1dHVyZSwgd2hvCiAgICAgICBmb3IgeW91ciBzYWZldHkgaGF2ZSBleHBvc2VkIHRoZW1zZWx2ZXMgdG8gdW5wb3B1bGFyaXR5IGFuZCB0byBhbGwgc29ydHMgb2YgZGFuZ2Vycy4gQXMgZm9yCiAgICAgICBtZSwgbXlzZWxmOyB3aGF0IGlzIHRoZXJlIHdoaWNoIG5vdyBjYW4gYmUgZ2FpbmVkIGJ5IG1lIGZvciB0aGUgZW5qb3ltZW50IG9mIGxpZmUsIGVzcGVjaWFsbHkKICAgICAgIHdoZW4gbmVpdGhlciBpbiBjcmVkaXQgYW1vbmcgeW91LCBub3IgaW4gdGhlIGdsb3J5IG9mIHZpcnR1ZSwgZG8gSSBzZWUgYW55IGhpZ2hlciBwb2ludCB0bwogICAgICAgd2hpY2ggSSBjYW4gYmUgZGVzaXJvdXMgdG8gY2xpbWI/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.12.29'] = ""
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBsb29rcyBhbmQgZXllcyBvZiB5b3UgYWxsIGFyZSB0dXJuZWQgdG93YXJkcyBtZTsgSSBzZWUKICAgICAgIHRoYXQgeW91IGFyZSBhbnhpb3VzIG5vdCBvbmx5IGZvciB5b3VyIG93biBkYW5nZXIgYW5kIHRoYXQgb2YgdGhlIHJlcHVibGljLCBidXQgZXZlbiwgaWYgdGhhdAogICAgICAgYmUgcmVtb3ZlZCwgZm9yIG1pbmUuIFlvdXIgZ29vZC13aWxsIGlzIGRlbGlnaHRmdWwgdG8gb25lIGFtaWQgZXZpbHMsIGFuZCBwbGVhc2luZyBhbWlkCiAgICAgICBncmllZjsgYnV0IEkgZW50cmVhdCB5b3UsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBsYXkgaXQgYXNpZGUgbm93LCBhbmQsIGZvcmdldHRpbmcKICAgICAgIG15IHNhZmV0eSwgdGhpbmsgb2YgeW91cnNlbHZlcyBhbmQgb2YgeW91ciBjaGlsZHJlbi4gSWYgaW5kZWVkLCB0aGlzIGNvbmRpdGlvbiBvZiB0aGUKICAgICAgIGNvbnN1bHNoaXAgaGFzIGJlZW4gYWxsb3R0ZWQgdG8gbWUsIHRoYXQgSSBzaG91bGQgYmVhciBhbGwgYml0dGVybmVzcywgYWxsIHBhaW5zIGFuZAogICAgICAgdG9ydHVyZXMsIEkgd2lsbCBiZWFyIHRoZW0gbm90IG9ubHkgYnJhdmVseSBidXQgZXZlbiBjaGVlcmZ1bGx5LCBwcm92aWRlZCB0aGF0IGJ5IG15IHRvaWxzCiAgICAgICBkaWduaXR5IGFuZCBzYWZldHkgYXJlIHByb2N1cmVkIGZvciB5b3UgYW5kIGZvciB0aGUgUm9tYW4gcGVvcGxlLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gdGhhdCBjb25zdWwsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvIHdob20gbmVpdGhlcgogICAgICAgdGhlIGZvcnVtIGluIHdoaWNoIGFsbCBqdXN0aWNlIGlzIGNvbnRhaW5lZCwgbm9yIHRoZSBDYW1wdXMgTWFydGl1cywgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUKICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPkNhbXB1cyBNYXJ0aXVzPC9mb3JlaWduPiB3YXMgY29uc2VjcmF0ZWQgb3IgcmVzdG9yZWQgdG8gTWFycyBhZnRlciB0aGUKICAgICAgICBleHB1bHNpb24gb2YgdGhlIFRhcnF1aW5zOyB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gYXQgd2hpY2ggYWxsCiAgICAgICAgbWFnaXN0cmF0ZXMgd2VyZSBjcmVhdGVkIHdlcmUgaGVsZCB0aGVyZS48L25vdGU+IGNvbnNlY3JhdGVkIHRvIHRoZSBjb25zdWxhciBhc3NlbWJsaWVzLCBub3IKICAgICAgIHRoZSBzZW5hdGUgaG91c2UsIHRoZSBjaGllZiBhc3Npc3RhbmNlIG9mIGFsbCBuYXRpb25zLCBub3IgbXkgb3duIGhvbWUsIHRoZSBjb21tb24gcmVmdWdlIG9mCiAgICAgICBhbGwgbWVuLCBub3IgbXkgYmVkIGRldm90ZWQgdG8gcmVzdCwgaW4gc2hvcnQsIG5vdCBldmVuIHRoaXMgc2VhdCBvZiBob25vdXIsIHRoaXMgY3VydWxlCiAgICAgICBjaGFpciBoYXMgZXZlciBiZWVuIGZyZWUgZnJvbSB0aGUgZGFuZ2VyIG9mIGRlYXRoLCBvciBmcm9tIHBsb3RzIGFuZCB0cmVhY2hlcnkuIEkgaGF2ZSBiZWVuCiAgICAgICBzaWxlbnQgYWJvdXQgbWFueSB0aGluZ3MsIEkgaGF2ZSBib3JuZSBtdWNoLCBJIGhhdmUgY29uY2VkZWQgbXVjaCwgSSBoYXZlIHJlbWVkaWVkIG1hbnkKICAgICAgIHRoaW5ncyB3aXRoIHNvbWUgcGFpbiB0byBteXNlbGYgYW1pZCB0aGUgYWxhcm0gb2YgeW91IGFsbC4gTm93IGlmIHRoZSBpbW1vcnRhbCBnb2RzIGhhdmUKICAgICAgIGRldGVybWluZWQgdGhhdCB0aGVyZSBzaGFsbCBiZSB0aGlzIGVuZCB0byBteSBjb25zdWxzaGlwIHRoYXQgSSBzaG91bGQgc25hdGNoIHlvdSwgTwogICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIGFuZCB0aGUgUm9tYW4gcGVvcGxlIGZyb20gbWlzZXJhYmxlIHNsYXVnaHRlciwgeW91ciB3aXZlcyBhbmQgY2hpbGRyZW4gYW5kCiAgICAgICB0aGUgdmVzdGFsIHZpcmdpbnMgZnJvbSBtb3N0IGJpdHRlciBkaXN0cmVzcywgdGhlIHRlbXBsZXMgYW5kIHNocmluZXMgb2YgdGhlIGdvZHMgYW5kIHRoaXMKICAgICAgIG1vc3QgbG92ZWx5IGNvdW50cnkgb2YgYWxsIG9mIHVzLCBmcm9tIGltcGlvdXMgZmxhbWVzLCBhbGwgSXRhbHkgZnJvbSB3YXIgYW5kIGRldmFzdGF0aW9uLAogICAgICAgdGhlbiB3aGF0ZXZlciBmb3J0dW5lIGlzIGxhaWQgdXAgZm9yIG1lIGJ5IG15c2VsZiBpdCBzaGFsbCBiZSBib3JuZS4gSWYsIGluZGVlZCwgUHVibGl1cwogICAgICAgTGVudHVsdXMsIGJlaW5nIGxlZCBvbiBieSBzb290aHNheWVycyBiZWxpZXZlZCB0aGF0IGhpcyBuYW1lIHdhcyBjb25uZWN0ZWQgYnkgZGVzdGlueSB3aXRoCiAgICAgICB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIHJlcHVibGljLCB3aHkgc2hvdWxkIG5vdCBJIHJlam9pY2UgdGhhdCBteSBjb25zdWxzaGlwIGhhcyB0YWtlbiBwbGFjZQogICAgICAgYWxtb3N0IGJ5IHRoZSBleHByZXNzIGFwcG9pbnRtZW50IG9mIGZhdGUgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIHJlcHVibGljPyA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIHRoYXQgY29uc3VsLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0byB3aG9tIG5laXRoZXIKICAgICAgIHRoZSBmb3J1bSBpbiB3aGljaCBhbGwganVzdGljZSBpcyBjb250YWluZWQsIG5vciB0aGUgQ2FtcHVzIE1hcnRpdXMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUKICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q2FtcHVzIE1hcnRpdXM8L2ZvcmVpZ24+IHdhcyBjb25zZWNyYXRlZCBvciByZXN0b3JlZCB0byBNYXJzIGFmdGVyIHRoZQogICAgICAgIGV4cHVsc2lvbiBvZiB0aGUgVGFycXVpbnM7IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGNlbnR1cmlhdGE8L2ZvcmVpZ24+IGF0IHdoaWNoIGFsbAogICAgICAgIG1hZ2lzdHJhdGVzIHdlcmUgY3JlYXRlZCB3ZXJlIGhlbGQgdGhlcmUuPC9ub3RlPiBjb25zZWNyYXRlZCB0byB0aGUgY29uc3VsYXIgYXNzZW1ibGllcywgbm9yCiAgICAgICB0aGUgc2VuYXRlIGhvdXNlLCB0aGUgY2hpZWYgYXNzaXN0YW5jZSBvZiBhbGwgbmF0aW9ucywgbm9yIG15IG93biBob21lLCB0aGUgY29tbW9uIHJlZnVnZSBvZgogICAgICAgYWxsIG1lbiwgbm9yIG15IGJlZCBkZXZvdGVkIHRvIHJlc3QsIGluIHNob3J0LCBub3QgZXZlbiB0aGlzIHNlYXQgb2YgaG9ub3VyLCB0aGlzIGN1cnVsZQogICAgICAgY2hhaXIgaGFzIGV2ZXIgYmVlbiBmcmVlIGZyb20gdGhlIGRhbmdlciBvZiBkZWF0aCwgb3IgZnJvbSBwbG90cyBhbmQgdHJlYWNoZXJ5LiBJIGhhdmUgYmVlbgogICAgICAgc2lsZW50IGFib3V0IG1hbnkgdGhpbmdzLCBJIGhhdmUgYm9ybmUgbXVjaCwgSSBoYXZlIGNvbmNlZGVkIG11Y2gsIEkgaGF2ZSByZW1lZGllZCBtYW55CiAgICAgICB0aGluZ3Mgd2l0aCBzb21lIHBhaW4gdG8gbXlzZWxmIGFtaWQgdGhlIGFsYXJtIG9mIHlvdSBhbGwuIE5vdyBpZiB0aGUgaW1tb3J0YWwgZ29kcyBoYXZlCiAgICAgICBkZXRlcm1pbmVkIHRoYXQgdGhlcmUgc2hhbGwgYmUgdGhpcyBlbmQgdG8gbXkgY29uc3Vsc2hpcCB0aGF0IEkgc2hvdWxkIHNuYXRjaCB5b3UsIE8KICAgICAgIGNvbnNjcmlwdCBmYXRoZXJzLCBhbmQgdGhlIFJvbWFuIHBlb3BsZSBmcm9tIG1pc2VyYWJsZSBzbGF1Z2h0ZXIsIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuIGFuZAogICAgICAgdGhlIHZlc3RhbCB2aXJnaW5zIGZyb20gbW9zdCBiaXR0ZXIgZGlzdHJlc3MsIHRoZSB0ZW1wbGVzIGFuZCBzaHJpbmVzIG9mIHRoZSBnb2RzIGFuZCB0aGlzCiAgICAgICBtb3N0IGxvdmVseSBjb3VudHJ5IG9mIGFsbCBvZiB1cywgZnJvbSBpbXBpb3VzIGZsYW1lcywgYWxsIEl0YWx5IGZyb20gd2FyIGFuZCBkZXZhc3RhdGlvbiwKICAgICAgIHRoZW4gd2hhdGV2ZXIgZm9ydHVuZSBpcyBsYWlkIHVwIGZvciBtZSBieSBteXNlbGYgaXQgc2hhbGwgYmUgYm9ybmUuIElmLCBpbmRlZWQsIFB1YmxpdXMKICAgICAgIExlbnR1bHVzLCBiZWluZyBsZWQgb24gYnkgc29vdGhzYXllcnMgYmVsaWV2ZWQgdGhhdCBoaXMgbmFtZSB3YXMgY29ubmVjdGVkIGJ5IGRlc3Rpbnkgd2l0aAogICAgICAgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgd2h5IHNob3VsZCBub3QgSSByZWpvaWNlIHRoYXQgbXkgY29uc3Vsc2hpcCBoYXMgdGFrZW4gcGxhY2UKICAgICAgIGFsbW9zdCBieSB0aGUgZXhwcmVzcyBhcHBvaW50bWVudCBvZiBmYXRlIGZvciB0aGUgcHJlc2VydmF0aW9uIG9mIHRoZSByZXB1YmxpYz8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q2FtcHVzIE1hcnRpdXM8L2ZvcmVpZ24+IHdhcyBjb25zZWNyYXRlZCBvciByZXN0b3JlZCB0byBNYXJzIGFmdGVyIHRoZQogICAgICAgIGV4cHVsc2lvbiBvZiB0aGUgVGFycXVpbnM7IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGNlbnR1cmlhdGE8L2ZvcmVpZ24+IGF0IHdoaWNoIGFsbAogICAgICAgIG1hZ2lzdHJhdGVzIHdlcmUgY3JlYXRlZCB3ZXJlIGhlbGQgdGhlcmUuPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBjb25zdWx0IHRoZSB3ZWxmYXJlIG9mIHlvdXJzZWx2ZXMsIHByb3ZpZGUgZm9yIHRoYXQgb2YgdGhlCiAgICAgICByZXB1YmxpYzsgcHJlc2VydmUgeW91cnNlbHZlcywgeW91ciB3aXZlcywgeW91ciBjaGlsZHJlbiwgYW5kIHlvdXIgZm9ydHVuZXM7IGRlZmVuZCB0aGUgbmFtZQogICAgICAgYW5kIHNhZmV0eSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBjZWFzZSB0byBzcGFyZSBtZSwgYW5kIHRvIHRoaW5rIG9mIG1lLiBGb3IsIGluIHRoZSBmaXJzdAogICAgICAgcGxhY2UsIEkgb3VnaHQgdG8gaG9wZSB0aGF0IGFsbCB0aGUgZ29kcyB3aG8gcHJlc2lkZSBvdmVyIHRoaXMgY2l0eSB3aWxsIHNob3cgbWUgZ3JhdGl0dWRlIGluCiAgICAgICBwcm9wb3J0aW9uIGFzIEkgZGVzZXJ2ZSBpdDsgYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIGlmIGFueXRoaW5nIGRvZXMgaGFwcGVuIHRvIG1lLCBJIHNoYWxsCiAgICAgICBmYWxsIHdpdGggYSBjb250ZW50ZWQgYW5kIHByZXBhcmVkIG1pbmQ7IGFuZCwgaW5kZWVkLCBkZWF0aCBjYW5ub3QgYmUgZGlzZ3JhY2VmdWwgdG8gYSBicmF2ZQogICAgICAgbWFuLCBub3IgcHJlbWF0dXJlIHRvIG9uZSBvZiBjb25zdWxhciByYW5rLCBub3IgbWlzZXJhYmxlIHRvIGEgd2lzZSBtYW4uIE5vdCB0aGF0IEkgYW0gYSBtYW4KICAgICAgIG9mIHNvIGlyb24gYSBkaXNwb3NpdGlvbiBhcyBub3QgdG8gYmUgbW92ZWQgYnkgdGhlIGdyaWVmIG9mIGEgbW9zdCBkZWFyIGFuZCBhZmZlY3Rpb25hdGUKICAgICAgIGJyb3RoZXIgbm93IHByZXNlbnQsIGFuZCBieSB0aGUgdGVhcnMgb2YgYWxsIHRoZXNlIG1lbiBieSB3aG9tIHlvdSBub3cgc2VlIG1lIHN1cnJvdW5kZWQuIE5vcgogICAgICAgZG9lcyBteSBmYWludGluZyB3aWZlLCBteSBkYXVnaHRlciBwcm9zdHJhdGUgd2l0aCBmZWFyLCBhbmQgbXkgbGl0dGxlIHNvbiB3aG9tIHRoZSByZXB1YmxpYwogICAgICAgc2VlbXMgdG8gbWUgdG8gZW1icmFjZSBhcyBhIHNvcnQgb2YgaG9zdGFnZSBmb3IgbXkgY29uc3Vsc2hpcCwgdGhlIHNvbi1pbi1sYXcgd2hvLCBhd2FpdGluZwogICAgICAgdGhlIGVuZCBvZiB0aGF0IGRheSwgaXMgbm93IHN0YW5kaW5nIGluIG15IHNpZ2h0LCBmYWlsIG9mdGVuIHRvIHJlY2FsbCBteSBtaW5kIHRvIG15IGhvbWUuIEkKICAgICAgIGFtIG1vdmVkIGJ5IGFsbCB0aGVzZSBjaXJjdW1zdGFuY2VzLCBidXQgaW4gc3VjaCBhIGRpcmVjdGlvbiBhcyB0byB3aXNoIHRoYXQgdGhleSBhbGwgbWF5IGJlCiAgICAgICBzYWZlIHRvZ2V0aGVyIHdpdGggeW91LCBldmVuIGlmIHNvbWUgdmlvbGVuY2Ugb3ZlcndoZWxtcyBtZSwgcmF0aGVyIHRoYW4gdGhhdCBib3RoIHRoZXkgYW5kCiAgICAgICBhcmUgc2hvdWxkIHBlcmlzaCB0b2dldGhlciB3aXRoIHRoZSByZXB1YmxpYy4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGF0dGVuZCB0byB0aGUgc2FmZXR5IG9mCiAgICAgICB0aGUgcmVwdWJsaWM7IGxvb2sgcm91bmQgdXBvbiBhbGwgdGhlIHN0b3JtcyB3aGljaCBhcmUgaW1wZW5kaW5nLCB1bmxlc3MgeW91IGd1YXJkIGFnYWluc3QKICAgICAgIHRoZW0uIEl0IGlzIG5vdCBUaWJlcml1cyBHcmFjY2h1cywgd2hvIHdpc2hlZCB0byBiZSBtYWRlIGEgc2Vjb25kIHRpbWUgYSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlOyBpdCBpcyBub3QgQ2FpdXMgR3JhY2NodXMsIHdobyBlbmRlYXZvdXJlZCB0byBleGNpdGUgdGhlIHBhcnRpc2FucyA8cGIgbj0iMzIwIiAvPiBvZgogICAgICAgdGhlIGFncmFyaWFuIGxhdzsgaXQgaXMgbm90IEx1Y2l1cyBTYXR1cm5pbnVzLCB3aG8gc2xldyBNZW1taXVzLCB3aG8gaXMgbm93IGluIHNvbWUgZGFuZ2VyLAogICAgICAgd2hvIGlzIG5vdyBicm91Z2h0IGJlZm9yZSB0aGUgdHJpYnVuYWwgb2YgeW91ciBzZXZlcml0eS4gVGhleSBhcmUgbm93IGluIHlvdXIgaGFuZHMgd2hvCiAgICAgICB3aXRoc3Rvb2QgYWxsIFJvbWUsIHdpdGggdGhlIG9iamVjdCBvZiBicmluZ2luZyBjb25mbGFncmF0aW9uIG9uIHRoZSB3aG9sZSBjaXR5LCBtYXNzYWNyZSBvbgogICAgICAgYWxsIG9mIHlvdSwgYW5kIG9mIHJlY2VpdmluZyBDYXRpbGluZTsgdGhlaXIgbGV0dGVycyBhcmUgaW4geW91ciBwb3NzZXNzaW9uLCB0aGVpciBzZWFscywKICAgICAgIHRoZWlyIGhhbmR3cml0aW5nLCBhbmQgdGhlIGNvbmZlc3Npb24gb2YgZWFjaCBpbmRpdmlkdWFsIG9mIHRoZW07IHRoZSBBbGxvYnJvZ2VzIGFyZSB0YW1wZXJlZAogICAgICAgd2l0aCwgdGhlIHNsYXZlcyBhcmUgZXhjaXRlZCwgQ2F0aWxpbmUgaXMgc2VudCBmb3I7IHRoZSBkZXNpZ24gaXMgYWN0dWFsbHkgYmVndW4gdG8gYmUgcHV0IGluCiAgICAgICBleGVjdXRpb24sIHRoYXQgYWxsIHNob3VsZCBiZSBwdXQgdG8gZGVhdGgsIHNvIHRoYXQgbm8gb25lIHNob3VsZCBiZSBsZWZ0IGV2ZW4gdG8gbW91cm4gdGhlCiAgICAgICBuYW1lIG9mIHRoZSByZXB1YmxpYywgYW5kIHRvIGxhbWVudCBvdmVyIHRoZSBkb3duZmFsbCBvZiBzbyBtaWdodHkgYSBkb21pbmlvbi4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGF0dGVuZCB0byB0aGUgc2FmZXR5IG9mCiAgICAgICB0aGUgcmVwdWJsaWM7IGxvb2sgcm91bmQgdXBvbiBhbGwgdGhlIHN0b3JtcyB3aGljaCBhcmUgaW1wZW5kaW5nLCB1bmxlc3MgeW91IGd1YXJkIGFnYWluc3QKICAgICAgIHRoZW0uIEl0IGlzIG5vdCBUaWJlcml1cyBHcmFjY2h1cywgd2hvIHdpc2hlZCB0byBiZSBtYWRlIGEgc2Vjb25kIHRpbWUgYSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlOyBpdCBpcyBub3QgQ2FpdXMgR3JhY2NodXMsIHdobyBlbmRlYXZvdXJlZCB0byBleGNpdGUgdGhlIHBhcnRpc2FucyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjAiIC8+IG9mCiAgICAgICB0aGUgYWdyYXJpYW4gbGF3OyBpdCBpcyBub3QgTHVjaXVzIFNhdHVybmludXMsIHdobyBzbGV3IE1lbW1pdXMsIHdobyBpcyBub3cgaW4gc29tZSBkYW5nZXIsCiAgICAgICB3aG8gaXMgbm93IGJyb3VnaHQgYmVmb3JlIHRoZSB0cmlidW5hbCBvZiB5b3VyIHNldmVyaXR5LiBUaGV5IGFyZSBub3cgaW4geW91ciBoYW5kcyB3aG8KICAgICAgIHdpdGhzdG9vZCBhbGwgUm9tZSwgd2l0aCB0aGUgb2JqZWN0IG9mIGJyaW5naW5nIGNvbmZsYWdyYXRpb24gb24gdGhlIHdob2xlIGNpdHksIG1hc3NhY3JlIG9uCiAgICAgICBhbGwgb2YgeW91LCBhbmQgb2YgcmVjZWl2aW5nIENhdGlsaW5lOyB0aGVpciBsZXR0ZXJzIGFyZSBpbiB5b3VyIHBvc3Nlc3Npb24sIHRoZWlyIHNlYWxzLAogICAgICAgdGhlaXIgaGFuZHdyaXRpbmcsIGFuZCB0aGUgY29uZmVzc2lvbiBvZiBlYWNoIGluZGl2aWR1YWwgb2YgdGhlbTsgdGhlIEFsbG9icm9nZXMgYXJlIHRhbXBlcmVkCiAgICAgICB3aXRoLCB0aGUgc2xhdmVzIGFyZSBleGNpdGVkLCBDYXRpbGluZSBpcyBzZW50IGZvcjsgdGhlIGRlc2lnbiBpcyBhY3R1YWxseSBiZWd1biB0byBiZSBwdXQgaW4KICAgICAgIGV4ZWN1dGlvbiwgdGhhdCBhbGwgc2hvdWxkIGJlIHB1dCB0byBkZWF0aCwgc28gdGhhdCBubyBvbmUgc2hvdWxkIGJlIGxlZnQgZXZlbiB0byBtb3VybiB0aGUKICAgICAgIG5hbWUgb2YgdGhlIHJlcHVibGljLCBhbmQgdG8gbGFtZW50IG92ZXIgdGhlIGRvd25mYWxsIG9mIHNvIG1pZ2h0eSBhIGRvbWluaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsIHRoZXNlIHRoaW5ncyB0aGUgd2l0bmVzc2VzIGhhdmUgaW5mb3JtZWQgeW91IG9mOyB0aGUgcHJpc29uZXJzIGhhdmUgY29uZmVzc2VkLCB5b3UgYnkKICAgICAgIG1hbnkganVkZ21lbnRzIGhhdmUgYWxyZWFkeSBkZWNpZGVkOyBmaXJzdCwgYmVjYXVzZSB5b3UgaGF2ZSB0aGFua2VkIG1lIGluIHVucHJlY2VkZW50ZWQKICAgICAgIGxhbmd1YWdlLCBhbmQgaGF2ZSBwYXNzZWQgYSB2b3RlIHRoYXQgdGhlIGNvbnNwaXJhY3kgb2YgYWJhbmRvbmVkIG1lbiBoYXMgYmVlbiBsYWlkIG9wZW4gYnkKICAgICAgIG15IHZpcnR1ZSBhbmQgZGlsaWdlbmNlOyBzZWNvbmRseSwgYmVjYXVzZSB5b3UgaGF2ZSBjb21wZWxsZWQgUHVibGl1cyBMZW50dWx1cyB0byBhYmRpY2F0ZQogICAgICAgdGhlIHByYWV0b3JzaGlwOyBhZ2FpbiwgYmVjYXVzZSB5b3UgaGF2ZSB2b3RlZCB0aGF0IGhlIGFuZCB0aGUgb3RoZXJzIGFib3V0IHdob20geW91IGhhdmUKICAgICAgIGRlY2lkZWQgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFib3ZlIGFsbCBiZWNhdXNlIHlvdSBoYXZlIGRlY3JlZWQgYSBzdXBwbGljYXRpb24KICAgICAgIGluIG15IG5hbWUsIGFuIGhvbm91ciB3aGljaCBoYXMgbmV2ZXIgYmVlbiBwYWlkIHRvIGFueSBvbmUgYmVmb3JlIGFjdGluZyBpbiBhIGNpdmlsIGNhcGFjaXR5OwogICAgICAgbGFzdCBvZiBhbGwgYmVjYXVzZSB5ZXN0ZXJkYXkgeW91IGdhdmUgbW9zdCBhbXBsZSByZXdhcmRzIHRvIHRoZSBhbWJhc3NhZG9ycyBvZiB0aGUKICAgICAgIEFsbG9icm9nZXMgYW5kIHRvIFRpdHVzIFZ1bHR1cmNpdXM7IGFsbCB3aGljaCBhY3RzIGFyZSBzdWNoIHRoYXQgdGhleSwgd2hvIGhhdmUgYmVlbiBnaXZlbgogICAgICAgaW50byBjdXN0b2R5IGJ5IG5hbWUsIHdpdGhvdXQgYW55IGRvdWJ0IHNlZW0gYWxyZWFkeSBjb25kZW1uZWQgYnkgeW91LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBJIGhhdmUgZGV0ZXJtaW5lZCB0byByZWZlciB0aGUgYnVzaW5lc3MgdG8geW91IGFzIGEgZnJlc2ggbWF0dGVyLCBPIGNvbnNjcmlwdCBmYXRoZXJzLAogICAgICAgYm90aCBhcyB0byB0aGUgZmFjdCwgd2hhdCB5b3UgdGhpbmsgb2YgaXQgYW5kIGFzIHRvIHRoZSBwdW5pc2htZW50LCB3aGF0IHlvdSB2b3RlLiBJIHdpbGwKICAgICAgIHN0YXRlIHdoYXQgaXQgYmVob3ZlcyB0aGUgY29uc3VsIHRvIHN0YXRlLiBJIGhhdmUgc2VlbiBmb3IgYSBsb25nIHRpbWUgZ3JlYXQgbWFkbmVzcyBleGlzdGluZwogICAgICAgaW4gdGhlIHJlcHVibGljLCBhbmQgbmV3IGRlc2lnbnMgYmVpbmcgZm9ybWVkLCBhbmQgZXZpbCBwYXNzaW9ucyBiZWluZyBzdGlycmVkIHVwOyBidXQgSQogICAgICAgbmV2ZXIgdGhvdWdodCB0aGF0IHNvIGdyZWF0LCBzbyBkZXN0cnVjdGl2ZSBhIGNvbnNwaXJhY3kgYXMgdGhpcyB3YXMgYmVpbmcgbWVkaXRhdGVkIGJ5CiAgICAgICBjaXRpemVucy4gTm93IHRvIHdoYXRldmVyIHBvaW50IHlvdXIgbWluZHMgYW5kIG9waW5pb25zIGluY2xpbmUsIHlvdSBtdXN0IGRlY2lkZSBiZWZvcmUKICAgICAgIG5pZ2h0LiBZb3Ugc2VlIGhvdyBncmVhdCBhIGNyaW1lIGhhcyBiZWVuIG1hZGUga25vd24gdG8geW91OyBpZiB5b3UgdGhpbmsgdGhhdCBidXQgZmV3IGFyZQogICAgICAgaW1wbGljYXRlZCBpbiBpdCB5b3UgYXJlIGdyZWF0bHkgbWlzdGFrZW47IHRoaXMgZXZpbCBoYXMgc3ByZWFkIHdpZGVyIHRoYW4geW91IHRoaW5rOyBpdCBoYXMKICAgICAgIHNwcmVhZCBub3Qgb25seSB0aHJvdWdob3V0IEl0YWx5LCBidXQgaXQgaGFzIGV2ZW4gY3Jvc3NlZCB0aGUgQWxwcywgYW5kIGNyZWVwaW5nIHN0ZWFsdGhpbHkKICAgICAgIG9uLCBpdCBoYXMgYWxyZWFkeSBvY2N1cGllZCBtYW55IG9mIHRoZSBwcm92aW5jZXM7IGl0IGNhbiBieSBubyBtZWFucyBiZSBjcnVzaGVkIGJ5CiAgICAgICB0b2xlcmF0aW5nIGl0LCBhbmQgYnkgdGVtcG9yaXNpbmcgd2l0aCBpdDsgaG93ZXZlciB5b3UgZGV0ZXJtaW5lIG9uIGNoYXN0aXNpbmcgaXQsIHlvdSBtdXN0CiAgICAgICBhY3Qgd2l0aCBwcm9tcHRpdHVkZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBzZWUgdGhhdCBhcyB5ZXQgdGhlcmUgYXJlIHR3byBvcGluaW9ucy4gT25lIHRoYXQgb2YgRGVjaXVzIFNpbGFudXMsIHdobyB0aGlua3MgdGhhdCB0aG9zZQogICAgICAgd2hvIGhhdmUgZW5kZWF2b3VyZWQgdG8gZGVzdHJveSBhbGwgdGhlc2UgdGhpbmdzIHNob3VsZCBiZSBwdW5pc2hlZCB3aXRoIGRlYXRoIHRoZSBvdGhlciwKICAgICAgIHRoYXQgb2YgQ2FpdXMgQ2Flc2FyLCB3aG8gb2JqZWN0cyB0byB0aGUgcHVuaXNobWVudCBvZiBkZWF0aCwgYnV0IGFkb3B0cyB0aGUgbW9zdCBleHRyZW1lCiAgICAgICBzZXZlcml0eSBvZiBhbGwgb3RoZXIgcHVuaXNobWVudC4gRWFjaCBhY3RzIGluIGEgbWFubmVyIHN1aXRhYmxlIHRvIGhpcyBvd24gZGlnbml0eSBhbmQgdG8KICAgICAgIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGJ1c2luZXNzIHdpdGggdGhlIGdyZWF0ZXN0IHNldmVyaXR5LiBUaGUgb25lIHRoaW5rcyB0aGF0IGl0IGlzIG5vdCByaWdodAogICAgICAgdGhhdCB0aG9zZSwgd2hvIGhhdmUgYXR0ZW1wdGVkIHRvIGRlcHJpdmUgYWxsIG9yIHVzIGFuZCB0aGUgd2hpbGUgUm9tYW4gcGVvcGxlIG9mIGxpZmUsIHRvCiAgICAgICBkZXN0cm95IHRoZSBlbXBpcmUsIHRvIGV4dGluZ3Vpc2ggdGhlIG5hbWUgb2YgdGhlIFJvbWFuIHBlb3BsZSwgc2hvdWxkIGVuam95IGxpZmUgYW5kIHRoZQogICAgICAgYnJlYXRoIG9mIGhlYXZlbiBjb21tb24gdG8gdXMgYWxsLCBmb3Igb25lIG1vbWVudDsgYW5kIGhlIHJlbWVtYmVycyB0aGF0IHRoaXMgc29ydCBvZgogICAgICAgcHVuaXNobWVudCBoYXMgb2Z0ZW4gYmVlbiBlbXBsb3llZCBhZ2FpbnN0IHdvcnRobGVzcyBjaXRpemVucyBpbiB0aGlzIHJlcHVibGljLiBUaGUgb3RoZXIKICAgICAgIGZlZWxzIHRoYXQgZGVhdGggd2FzIG5vdCBhcHBvaW50ZWQgYnkgdGhlIGltbW9ydGFsIGdvZHMgZm9yIHRoZSBzYWtlIG9mIHB1bmlzaG1lbnQsIGJ1dCB0aGF0CiAgICAgICBpdCBpcyBlaXRoZXIgYSBuZWNlc3NpdHkgb2YgbmF0dXJlLCBvciBhIHJlc3QgZnJvbSB0b2lscyBhbmQgbWlzZXJpZXM7IHRoZXJlZm9yZSB3aXNlIG1lbgogICAgICAgaGF2ZSBuZXZlciBtZXQgaXQgdW53aWxsaW5nbHksIGJyYXZlIG1lbiBoYXZlIG9mdGVuIGVuY291bnRlcmVkIGl0IGV2ZW4gdm9sdW50YXJpbHkuIEJ1dAogICAgICAgaW1wcmlzb25tZW50IGFuZCB0aGF0IHRvbyBwZXJwZXR1YWwsIHdhcyBjZXJ0YWlubHkgaW52ZW50ZWQgZm9yIHRoZSBleHRyYW9yZGluYXJ5IHB1bmlzaG1lbnQKICAgICAgIG9mIG5lZmFyaW91cyB3aWNrZWRuZXNzOyB0aGVyZWZvcmUgaGUgcHJvcG9zZXMgdGhhdCB0aGV5IHNob3VsZCBiZSBkaXN0cmlidXRlZCBhbW9uZyB0aGUKICAgICAgIG11bmljaXBhbCB0b3ducy4gVGhpcyBwcm9wb3NpdGlvbiBzZWVtcyB0byBoYXZlIGluIGl0IGluanVzdGljZSBpZiB5b3UgY29tbWFuZDsgaXQgZGlmZmljdWx0eQogICAgICAgaWYgeW91IHJlcXVlc3QgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCBpdCwgaG93ZXZlciwgYmUgc28gZGVjcmVlZCBpZiB5b3UgbGlrZS4gRm9yIEkgd2lsbCB1bmRlcnRha2UsIGFuZCwgYXMgSSBob3BlLCBJIHNoYWxsCiAgICAgICBmaW5kIG9uZSB3aG8gd2lsbCBub3QgdGhpbmsgaXQgc3VpdGFibGUgdG8gaGlzIGRpZ25pdHkgdG8gcmVmdXNlIHdoYXQgeW91IGRlY2lkZSBvbiBmb3IgdGhlCiAgICAgICBzYWtlIG9mIHRoZSB1bml2ZXJzYWwgc2FmZXR5LiBIZSBpbXBvc2VzIGJlc2lkZXMgYSBzZXZlcmUgcHVuaXNobWVudCBvbiB0aGUgYnVyZ2Vzc2VzIG9mIHRoZQogICAgICAgbXVuaWNpcGFsIHRvd24gaWYgYW55IG9mIHRoZSBwcmlzb25lcnMgZXNjYXBlOyBoZSBzdXJyb3VuZHMgdGhlbSB3aXRoIHRoZSBtb3N0IHRlcnJpYmxlCiAgICAgICBndWFyZCwgYW5kIHdpdGggZXZlcnl0aGluZyB3b3J0aHkgb2YgdGhlIHdpY2tlZG5lc3Mgb2YgYWJhbmRvbmVkIG1lbi4gQW5kIGhlIHByb3Bvc2VzIHRvCiAgICAgICBlc3RhYmxpc2ggYSBkZWNyZWUgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBhbGxldmlhdGUgdGhlIHB1bmlzaG1lbnQgb2YgdGhvc2Ugd2hvbSBoZSBpcwogICAgICAgY29uZGVtbmluZyBieSBhIHZvdGUgb2YgZWl0aGVyIHRoZSBzZW5hdGUgb3IgdGhlIHBlb3BsZS4gSGUgdGFrZXMgYXdheSBldmVuIGhvcGUsIHdoaWNoIGFsb25lCiAgICAgICBjYW4gY29tZm9ydCBtZW4gaW4gdGhlaXIgbWlzZXJpZXM7IGJlc2lkZXMgdGhpcywgaGUgdm90ZXMgdGhhdCB0aGVpciBnb29kcyBzaG91bGQgYmUKICAgICAgIGNvbmZpc2NhdGVkOyBoZSBsZWF2ZXMgbGlmZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjIiIC8+IGFsb25lIHRvIHRoZXNlIGluZmFtb3VzIG1lbiwgYW5kIGlmIGhlIGhhZCB0YWtlbgogICAgICAgdGhhdCBhd2F5OyBoZSB3b3VsZCBoYXZlIHJlbGlldmVkIHRoZW0gYnkgb25lIHBhbmcgb2YgbWFueSB0b3J0dXJlcyBvZiBtaW5kIGFuZCBib2R5LCBhbmQgb2YKICAgICAgIGFsbCB0aGUgcHVuaXNobWVudCBvZiB0aGVpciBjcmltZXMuIFRoZXJlZm9yZSwgdGhhdCB0aGVyZSBtaWdodCBiZSBzb21lIGRyZWFkIGluIGxpZmUgdG8gdGhlCiAgICAgICB3aWNrZWQsIG1lbiBvZiBvbGQgaGF2ZSBiZWxpZXZlZCB0aGF0IHRoZXJlIHdlcmUgc29tZSBwdW5pc2htZW50cyBvZiB0aGF0IHNvcnQgYXBwb2ludGVkIGZvcgogICAgICAgdGhlIHdpY2tlZCBpbiB0aGUgc2hhZGVzIGJlbG93OyBiZWNhdXNlIGluIHRydXRoIHRoZXkgcGVyY2VpdmVkIHRoYXQgaWYgdGhpcyB3ZXJlIHRha2VuIGF3YXkKICAgICAgIGRlYXRoIGl0c2VsZiB3b3VsZCBub3QgYmUgdGVycmlibGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyMiIgLz4gYWxvbmUgdG8gdGhlc2UgaW5mYW1vdXMgbWVuLCBhbmQgaWYgaGUgaGFkIHRha2VuCiAgICAgICB0aGF0IGF3YXk7IGhlIHdvdWxkIGhhdmUgcmVsaWV2ZWQgdGhlbSBieSBvbmUgcGFuZyBvZiBtYW55IHRvcnR1cmVzIG9mIG1pbmQgYW5kIGJvZHksIGFuZCBvZgogICAgICAgYWxsIHRoZSBwdW5pc2htZW50IG9mIHRoZWlyIGNyaW1lcy4gVGhlcmVmb3JlLCB0aGF0IHRoZXJlIG1pZ2h0IGJlIHNvbWUgZHJlYWQgaW4gbGlmZSB0byB0aGUKICAgICAgIHdpY2tlZCwgbWVuIG9mIG9sZCBoYXZlIGJlbGlldmVkIHRoYXQgdGhlcmUgd2VyZSBzb21lIHB1bmlzaG1lbnRzIG9mIHRoYXQgc29ydCBhcHBvaW50ZWQgZm9yCiAgICAgICB0aGUgd2lja2VkIGluIHRoZSBzaGFkZXMgYmVsb3c7IGJlY2F1c2UgaW4gdHJ1dGggdGhleSBwZXJjZWl2ZWQgdGhhdCBpZiB0aGlzIHdlcmUgdGFrZW4gYXdheQogICAgICAgZGVhdGggaXRzZWxmIHdvdWxkIG5vdCBiZSB0ZXJyaWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJIHNlZSB3aGF0IGlzIG15IGludGVyZXN0OyBpZiB5b3UgZm9sbG93IHRoZSBvcGluaW9uIG9mIENhaXVzCiAgICAgICBDYWVzYXIsIChzaW5jZSBoZSBoYXMgYWRvcHRlZCB0aGlzIHBhdGggaW4gdGhlIHJlcHVibGljIHdoaWNoIGlzIGFjY291bnRlZCB0aGUgcG9wdWxhciBvbmUsKQogICAgICAgcGVyaGFwcyBzaW5jZSBoZSBpcyB0aGUgYXV0aG9yIGFuZCBwcm9tb3RlciBvZiB0aGlzIG9waW5pb24sIHRoZSBwb3B1bGFyIHZpb2xlbmNlIHdpbGwgYmUKICAgICAgIGxlc3MgdG8gYmUgZHJlYWRlZCBieSBtZTsgaWYgeW91IGFkb3B0IHRoZSBvdGhlciBvcGluaW9uLCBJIGtub3cgbm90IHdoZXRoZXIgSSBhbSBub3QgbGlrZWx5CiAgICAgICB0byBoYXZlIG1vcmUgdHJvdWJsZTsgYnV0IHN0aWxsIGxldCB0aGUgYWR2YW50YWdlIG9mIHRoZSByZXB1YmxpYyBvdXR3ZWlnaCB0aGUgY29uc2lkZXJhdGlvbgogICAgICAgb2YgbXkgZGFuZ2VyLiBGb3Igd2UgaGF2ZSBmcm9tIENhaXVzIENhZXNhciwgYXMgaGlzIG93biBkaWduaXR5IGFuZCBhcyB0aGUgaWxsdXN0cmlvdXMKICAgICAgIGNoYXJhY3RlciBvZiBoaXMgYW5jZXN0b3JzIGRlbWFuZGVkLCBhIHZvdGUgYXMgYSBob3N0YWdlIG9mIGhpcyBsYXN0aW5nIGdvb2Qtd2lsbCB0byB0aGUKICAgICAgIHJlcHVibGljOyBpdCBoYXMgYmVlbiBjbGVhcmx5IHNlZW4gaG93IGdyZWF0IGlzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxlbml0eSBvZgogICAgICAgZGVtYWdvZ3VlcywgYW5kIGEgZGlzcG9zaXRpb24gcmVhbGx5IGF0dGFjaGVkIHRvIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBJIHNlZSB0aGF0IG9mIHRob3NlIG1lbiB3aG8gd2lzaCB0byBiZSBjb25zaWRlcmVkIGF0dGFjaGVkIHRvIHRoZQogICAgICAgcGVvcGxlIG9uZSBtYW4gaXMgYWJzZW50LCB0aGF0IHRoZXkgbWF5IG5vdCBzZWVtIGZvcnNvb3RoIHRvIGdpdmUgYSB2b3RlIGFib3V0IHRoZSBsaXZlcyBvZgogICAgICAgUm9tYW4gY2l0aXplbnMuIEhlIG9ubHkgdGhyZWUgZGF5cyBhZ28gZ2F2ZSBSb21hbiBjaXRpemVucyBpbnRvIGN1c3RvZHksIGFuZCBkZWNyZWVkIG1lIGEKICAgICAgIHN1cHBsaWNhdGlvbiwgYW5kIHZvdGVkIG1vc3QgbWFnbmlmaWNlbnQgcmV3YXJkcyB0byB0aGUgd2l0bmVzc2VzIG9ubHkgeWVzdGVyZGF5LiBJdCBpcyBub3QKICAgICAgIG5vdyBkb3VidGZ1bCB0byBhbnkgb25lIHdoYXQgaGUsIHdobyB2b3RlZCBmb3IgdGhlIGltcHJpc29ubWVudCBvZiB0aGUgY3JpbWluYWxzLAogICAgICAgY29uZ3JhdHVsYXRpb24gdG8gaGltIHdobyBoYWQgZGV0ZWN0ZWQgdGhlbSwgYW5kIHJld2FyZHMgdG8gdGhvc2Ugd2hvIGhhZCBwcm92ZWQgdGhlIGNyaW1lLAogICAgICAgdGhpbmtzIG9mIHRoZSB3aG9sZSBtYXR0ZXIsIGFuZCBvZiB0aGUgY2F1c2UuIEJ1dCBDYWl1cyBDYWVzYXIgY29uc2lkZXJzIHRoYXQgdGhlIFNlbXByb25pYW4KICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTZW1wcm9uaWFuIGxhdyB3YXMgcHJvcG9zZWQgYnkgQ2FpdXMgR3JhY2NodXMsIEIuQy4gPGRhdGUgYXV0aG5hbWU9Ii0xMjMiIHZhbHVlPSItMTIzIj4xMjM8L2RhdGU+LCBhbmQgZW5hY3RlZCB0aGF0IHRoZSBwZW9wbGUgb25seSBzaG91bGQgZGVjaWRlIHJlc3BlY3RpbmcgdGhlIGxpZmUKICAgICAgICBvciBjaXZpbCBjb25kaXRpb24gb2YgYSBjaXRpemVuLiBJdCBpcyBhbGx1ZGVkIHRvIGFsc28gaW4gdGhlIG9yYXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmFiLlBlcmQuIDQiIHZhbGlkPSJ5ZXMiPlBybyBSYWJpci4gYy4gNDwvYmlibD4sIHdoZXJlIENpY2VybyBzYXlzLCDigJxDYWl1cyBHcmFjY2h1cwogICAgICAgIHBhc3NlZCBhIGxhdyB0aGF0IG5vIGRlY2lzaW9uIHNob3VsZCBiZSBjb21lIHRvIGFib3V0IHRoZSBsaWZlIG9mIGEgUm9tYW4gY2l0aXplbiB3aXRob3V0CiAgICAgICAgeW91ciBjb21tYW5kLOKAnSBzcGVha2luZyB0byB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPlF1aXJpdGVzPC9mb3JlaWduPi48L25vdGU+IGxhdwogICAgICAgd2FzIHBhc3NlZCBhYm91dCBSb21hbiBjaXRpemVucywgYnV0IHRoYXQgaGUgd2hvIGlzIGFuIGVuZW15IG9mIHRoZSByZXB1YmxpYyBjYW4gYnkgbm8gbWVhbnMKICAgICAgIGJlIGEgY2l0aXplbjsgYW5kIG1vcmVvdmVyIHRoYXQgdGhlIHZlcnkgcHJvcG9zZXIgb2YgdGhlIFNlbXByb25pYW4gbGF3IHN1ZmZlcmVkIHB1bmlzaG1lbnQKICAgICAgIGJ5IHRoZSBjb21tYW5kIG9mIHRoZSBwZW9wbGUuIEhlIGFsc28gZGVuaWVzIHRoYXQgTGVudHVsdXMsIGEgYnJpYmVyIGFuZCBhIHNwZW5kdGhyaWZ0LCBhZnRlcgogICAgICAgaGUgaGFzIGZvcm1lZCBzdWNoIGNydWVsIGFuZCBiaXR0ZXIgcGxhbnMgYWJvdXQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBSb21hbiBwZW9wbGUgYW5kIHRoZQogICAgICAgcnVpbiBvZiB0aGlzIGNpdHksIGNhbiBiZSBjYWxsZWQgYSBmcmllbmQgb2YgdGhlIHBlb3BsZS4gVGhlcmVmb3JlIHRoaXMgbW9zdCBnZW50bGUgYW5kCiAgICAgICBtZXJjaWZ1bCBtYW4gZG9lcyBub3QgaGVzaXRhdGUgdG8gY29tbWl0IFB1YmxpdXMgTGVudHVsdXMgdG8gZXRlcm5hbCBkYXJrbmVzcyBhbmQKICAgICAgIGltcHJpc29ubWVudCwgYW5kIGVzdGFibGlzaGVzIGEgbGF3IHRvIGFsbCBwb3N0ZXJpdHkgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBib2FzdCBvZgogICAgICAgYWxsZXZpYXRpbmcgaGlzIHB1bmlzaG1lbnQgb3IgaGVyZWFmdGVyIHRvIGFwcGVhciBhIGZyaWVuZCBvZiB0aGUgcGVvcGxlIHRvIHRoZSBkZXN0cnVjdGlvbgogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZS4gSGUgYWRkcyBhbHNvIHRoZSBjb25maXNjYXRpb24gb2YgdGhlaXIgZ29vZHMsIHNvIHRoYXQgd2FudCBhbHNvIGFuZAogICAgICAgYmVnZ2FyeSBtYXkgYmUgYWRkZWQgdG8gYWxsIHRoZSB0b3JtZW50cyBvZiBtaW5kIGFuZCBib2R5LiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gSSBzZWUgdGhhdCBvZiB0aG9zZSBtZW4gd2hvIHdpc2ggdG8gYmUgY29uc2lkZXJlZCBhdHRhY2hlZCB0byB0aGUKICAgICAgIHBlb3BsZSBvbmUgbWFuIGlzIGFic2VudCwgdGhhdCB0aGV5IG1heSBub3Qgc2VlbSBmb3Jzb290aCB0byBnaXZlIGEgdm90ZSBhYm91dCB0aGUgbGl2ZXMgb2YKICAgICAgIFJvbWFuIGNpdGl6ZW5zLiBIZSBvbmx5IHRocmVlIGRheXMgYWdvIGdhdmUgUm9tYW4gY2l0aXplbnMgaW50byBjdXN0b2R5LCBhbmQgZGVjcmVlZCBtZSBhCiAgICAgICBzdXBwbGljYXRpb24sIGFuZCB2b3RlZCBtb3N0IG1hZ25pZmljZW50IHJld2FyZHMgdG8gdGhlIHdpdG5lc3NlcyBvbmx5IHllc3RlcmRheS4gSXQgaXMgbm90CiAgICAgICBub3cgZG91YnRmdWwgdG8gYW55IG9uZSB3aGF0IGhlLCB3aG8gdm90ZWQgZm9yIHRoZSBpbXByaXNvbm1lbnQgb2YgdGhlIGNyaW1pbmFscywKICAgICAgIGNvbmdyYXR1bGF0aW9uIHRvIGhpbSB3aG8gaGFkIGRldGVjdGVkIHRoZW0sIGFuZCByZXdhcmRzIHRvIHRob3NlIHdobyBoYWQgcHJvdmVkIHRoZSBjcmltZSwKICAgICAgIHRoaW5rcyBvZiB0aGUgd2hvbGUgbWF0dGVyLCBhbmQgb2YgdGhlIGNhdXNlLiBCdXQgQ2FpdXMgQ2Flc2FyIGNvbnNpZGVycyB0aGF0IHRoZSBTZW1wcm9uaWFuCiAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTZW1wcm9uaWFuIGxhdyB3YXMgcHJvcG9zZWQgYnkgQ2FpdXMgR3JhY2NodXMsIEIuQy4gPGRhdGUgYXV0aG5hbWU9Ii0xMjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0xMjMiPjEyMzwvZGF0ZT4sIGFuZCBlbmFjdGVkIHRoYXQgdGhlIHBlb3BsZSBvbmx5IHNob3VsZCBkZWNpZGUgcmVzcGVjdGluZyB0aGUgbGlmZQogICAgICAgIG9yIGNpdmlsIGNvbmRpdGlvbiBvZiBhIGNpdGl6ZW4uIEl0IGlzIGFsbHVkZWQgdG8gYWxzbyBpbiB0aGUgb3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFJhYi5QZXJkLiA0IiB2YWxpZD0ieWVzIj5Qcm8gUmFiaXIuIGMuIDQ8L2JpYmw+LCB3aGVyZSBDaWNlcm8gc2F5cywg4oCcQ2FpdXMgR3JhY2NodXMKICAgICAgICBwYXNzZWQgYSBsYXcgdGhhdCBubyBkZWNpc2lvbiBzaG91bGQgYmUgY29tZSB0byBhYm91dCB0aGUgbGlmZSBvZiBhIFJvbWFuIGNpdGl6ZW4gd2l0aG91dAogICAgICAgIHlvdXIgY29tbWFuZCzigJ0gc3BlYWtpbmcgdG8gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlF1aXJpdGVzPC9mb3JlaWduPi48L25vdGU+IGxhdwogICAgICAgd2FzIHBhc3NlZCBhYm91dCBSb21hbiBjaXRpemVucywgYnV0IHRoYXQgaGUgd2hvIGlzIGFuIGVuZW15IG9mIHRoZSByZXB1YmxpYyBjYW4gYnkgbm8gbWVhbnMKICAgICAgIGJlIGEgY2l0aXplbjsgYW5kIG1vcmVvdmVyIHRoYXQgdGhlIHZlcnkgcHJvcG9zZXIgb2YgdGhlIFNlbXByb25pYW4gbGF3IHN1ZmZlcmVkIHB1bmlzaG1lbnQKICAgICAgIGJ5IHRoZSBjb21tYW5kIG9mIHRoZSBwZW9wbGUuIEhlIGFsc28gZGVuaWVzIHRoYXQgTGVudHVsdXMsIGEgYnJpYmVyIGFuZCBhIHNwZW5kdGhyaWZ0LCBhZnRlcgogICAgICAgaGUgaGFzIGZvcm1lZCBzdWNoIGNydWVsIGFuZCBiaXR0ZXIgcGxhbnMgYWJvdXQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBSb21hbiBwZW9wbGUgYW5kIHRoZQogICAgICAgcnVpbiBvZiB0aGlzIGNpdHksIGNhbiBiZSBjYWxsZWQgYSBmcmllbmQgb2YgdGhlIHBlb3BsZS4gVGhlcmVmb3JlIHRoaXMgbW9zdCBnZW50bGUgYW5kCiAgICAgICBtZXJjaWZ1bCBtYW4gZG9lcyBub3QgaGVzaXRhdGUgdG8gY29tbWl0IFB1YmxpdXMgTGVudHVsdXMgdG8gZXRlcm5hbCBkYXJrbmVzcyBhbmQKICAgICAgIGltcHJpc29ubWVudCwgYW5kIGVzdGFibGlzaGVzIGEgbGF3IHRvIGFsbCBwb3N0ZXJpdHkgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBib2FzdCBvZgogICAgICAgYWxsZXZpYXRpbmcgaGlzIHB1bmlzaG1lbnQgb3IgaGVyZWFmdGVyIHRvIGFwcGVhciBhIGZyaWVuZCBvZiB0aGUgcGVvcGxlIHRvIHRoZSBkZXN0cnVjdGlvbgogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZS4gSGUgYWRkcyBhbHNvIHRoZSBjb25maXNjYXRpb24gb2YgdGhlaXIgZ29vZHMsIHNvIHRoYXQgd2FudCBhbHNvIGFuZAogICAgICAgYmVnZ2FyeSBtYXkgYmUgYWRkZWQgdG8gYWxsIHRoZSB0b3JtZW50cyBvZiBtaW5kIGFuZCBib2R5LiA8ZGF0ZSBhdXRobmFtZT0iLTEyMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTEyMyI+MTIzPC9kYXRlPiwgYW5kIGVuYWN0ZWQgdGhhdCB0aGUgcGVvcGxlIG9ubHkgc2hvdWxkIGRlY2lkZSByZXNwZWN0aW5nIHRoZSBsaWZlCiAgICAgICAgb3IgY2l2aWwgY29uZGl0aW9uIG9mIGEgY2l0aXplbi4gSXQgaXMgYWxsdWRlZCB0byBhbHNvIGluIHRoZSBvcmF0aW9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmFiLlBlcmQuIDQiIHZhbGlkPSJ5ZXMiPlBybyBSYWJpci4gYy4gNDwvYmlibD4sIHdoZXJlIENpY2VybyBzYXlzLCDigJxDYWl1cyBHcmFjY2h1cwogICAgICAgIHBhc3NlZCBhIGxhdyB0aGF0IG5vIGRlY2lzaW9uIHNob3VsZCBiZSBjb21lIHRvIGFib3V0IHRoZSBsaWZlIG9mIGEgUm9tYW4gY2l0aXplbiB3aXRob3V0CiAgICAgICAgeW91ciBjb21tYW5kLOKAnSBzcGVha2luZyB0byB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UXVpcml0ZXM8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.6.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgaWYgeW91IGRlY2lkZSBvbiB0aGlzIHlvdSBnaXZlIG1lIGEgY29tcGFuaW9uIGluIG15IGFkZHJlc3MsIGRlYXIgYW5kIGFjY2VwdGFibGUKICAgICAgIHRvIHRoZSBSb21hbiBwZW9wbGU7IG9yIGlmIHlvdSBwcmVmZXIgdG8gYWRvcHQgdGhlIG9waW5pb24gb2YgU2lsYW51cywgeW91IHdpbGwgZWFzaWx5IGRlZmVuZAogICAgICAgbWUgYW5kIHlvdXJzZWx2ZXMgZnJvbSB0aGUgcmVwcm9hY2ggb2YgY3J1ZWx0eSwgYW5kIEkgd2lsbCBwcmV2YWlsIHRoYXQgaXQgc2hhbGwgYmUgbXVjaAogICAgICAgbGlnaHRlci4gQWx0aG91Z2gsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdoYXQgY3J1ZWx0eSBjYW4gdGhlcmUgYmUgaW4gY2hhc3Rpc2luZyB0aGUgZW5vcm1pdHkKICAgICAgIG9mIHN1Y2ggZXhjZXNzaXZlIHdpY2tlZG5lc3M/IEZvciBJIGRlY2lkZSBmcm9tIG15IG93biBmZWVsaW5nLiBGb3Igc28gbWF5IEkgYmUgYWxsb3dlZDsgdG8KICAgICAgIGVuam95IHRoZSByZXB1YmxpYyBpbiBzYWZldHkgaW4geW91ciBjb21wYW55LCBhcyBJIGFtIG5vdCBtb3ZlZCB0byBiZSBzb21ld2hhdCB2ZWhlbWVudCBpbgogICAgICAgdGhpcyBjYXVzZSBieSBhbnkgc2V2ZXJpdHkgb2YgZGlzcG9zaXRpb24sIChmb3Igd2hvIGlzIG1vcmUgbWVyY2lmdWwgdGhhbiBJIGFtPykgYnV0IHJhdGhlcgogICAgICAgYnkgYSBzaW5ndWxhciBodW1hbml0eSBhbmQgbWVyY2lmdWxuZXNzLiBGb3IgSSBzZWVtIHRvIG15c2VsZiB0byBzZWUgdGhpcyBjaXR5LCB0aGUgbGlnaHQgb2YKICAgICAgIHRoZSB3b3JsZCBhbmQgdGhlIGNpdGFkZWwgb2YgYWxsIG5hdGlvbnMsIGZhbGxpbmcgb24gYSBzdWRkZW4gYnkgb25lIGNvbmZsYWdyYXRpb24uIEkgc2VlIGluCiAgICAgICBteSBtaW5kJ3MgZXllIG1pc2VyYWJsZSBhbmQgdW5idXJpZWQgaGVhcHMgb2YgY2l0aWVzIGluIG15IGJ1cmllZCBjb3VudHJ5OyB0aGUgc2lnaHQgb2YKICAgICAgIENldGhlZ3VzIGFuZCBoaXMgbWFkbmVzcyByYWdpbmcgYW1pZCB5b3VyIHNsYXVnaHRlciBpcyBldmVyIHByZXNlbnQgdG8gbXkgc2lnaHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIHNldCBiZWZvcmUgbXlzZWxmIExlbnR1bHVzIHJlaWduaW5nLCBhcyBoZSBoaW1zZWxmCiAgICAgICBjb25mZXNzZXMgdGhhdCBoZSBoYWQgaG9wZWQgd2FzIGhpcyBkZXN0aW55LCBhbmQgdGhpcyBHYWJpbml1cyBhcnJheWVkIGluIHRoZSBwdXJwbGUgYW5kCiAgICAgICBDYXRpbGluZSBhcnJpdmVkIHdpdGggaGlzIGFybXksIHRoZW4gSSBzaHVkZGVyIGF0IHRoZSBsYW1lbnRhdGlvbiBvZiBtYXRyb25zLCBhbmQgdGhlIGZsaWdodAogICAgICAgb2YgdmlyZ2lucyBhbmQgb2YgYm95cyBhbmQgdGhlIGluc3VsdHMgb2YgdGhlIHZlc3RhbCB2aXJnaW5zOyBhbmQgYmVjYXVzZSB0aGVzZSB0aGluZ3MgYXBwZWFyCiAgICAgICB0byBtZSBleGNlZWRpbmdseSBtaXNlcmFibGUgYW5kIHBpdGlhYmxlLCB0aGVyZWZvcmUgSSBzaG93IG15c2VsZiBzZXZlcmUgYW5kIHJpZ29yb3VzIHRvCiAgICAgICB0aG9zZSB3aG8gaGF2ZSB3aXNoZWQgdG8gYnJpbmcgYWJvdXQgdGhpcyBzdGF0ZSBvZiB0aGluZ3MuIEkgYXNrLCBmb3Jzb290aCwgaWYgYW55IGZhdGhlciBvZgogICAgICAgYSBmYW1pbHksIHN1cHBvc2luZyBoaXMgY2hpbGRyZW4gaGFkIGJlZW4gc2xhaW4gYnkgYSBzbGF2ZSwgaGlzIHdpZmUgbXVyZGVyZWQsIGhpcyBob3VzZQogICAgICAgYnVybnQsIHdlcmUgbm90IHRvIGluZmxpY3Qgb24gaGlzIHNsYXZlcyB0aGUgc2V2ZXJlc3QgcG9zc2libGUgcHVuaXNobWVudCB3b3VsZCBoZSBhcHBlYXIKICAgICAgIGNsZW1lbnQgYW5kIG1lcmNpZnVsIG9yIG1vc3QgaW5odW1hbiBhbmQgY3J1ZWw/IFRvIG1lIGhlIHdvdWxkIHNlZW0gdW5uYXR1cmFsIGFuZAogICAgICAgaGFyZC1oZWFydGVkIHdobyBkaWQgbm90IHNvb3RoZSBoaXMgb3duIHBhaW4gYW5kIGFuZ3Vpc2ggYnkgdGhlIHBhaW4gYW5kIHRvcnR1cmUgb2YgdGhlCiAgICAgICBjcmltaW5hbC4gQW5kIHNvIHdlLCA8cGIgbj0iMzI0IiAvPiBpbiB0aGUgY2FzZSBvZiB0aGVzZSBtZW4gd2hvIGRlc2lyZWQgdG8gbXVyZGVyIHVzLCBhbmQgb3VyCiAgICAgICB3aXZlcywgYW5kIG91ciBjaGlsZHJlbizigJR3aG8gZW5kZWF2b3VyZWQgdG8gZGVzdHJveSB0aGUgaG91c2VzIG9mIGV2ZXJ5IGluZGl2aWR1YWwKICAgICAgIGFtb25nIHVzLCBhbmQgYWxzbyB0aGUgcmVwdWJsaWMsIHRoZSBob21lIG9mIGFsbCzigJR3aG8gZGVzaWduZWQgdG8gcGxhY2UgdGhlIG5hdGlvbgogICAgICAgb2YgdGhlIEFsbG9icm9nZXMgb24gdGhlIHJlbGljcyBvZiB0aGlzIGNpdHksIGFuZCBvbiB0aGUgYXNoZXMgb2YgdGhlIGVtcGlyZSBkZXN0cm95ZWQgYnkKICAgICAgIGZpcmU74oCUaWYgd2UgYXJlIHZlcnkgcmlnb3JvdXMsIHdlIHNoYWxsIGJlIGNvbnNpZGVyZWQgbWVyY2lmdWw7IGlmIHdlIGNob29zZSB0byBiZQogICAgICAgbGF4LCB3ZSBtdXN0IGVuZHVyZSB0aGUgY2hhcmFjdGVyIG9mIHRoZSBncmVhdGVzdCBjcnVlbHR5LCB0byB0aGUgZGFtYWdlIG9mIG91ciBjb3VudHJ5IGFuZAogICAgICAgb3VyIGZlbGxvdy1jaXRpemVucy4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIHNldCBiZWZvcmUgbXlzZWxmIExlbnR1bHVzIHJlaWduaW5nLCBhcyBoZSBoaW1zZWxmCiAgICAgICBjb25mZXNzZXMgdGhhdCBoZSBoYWQgaG9wZWQgd2FzIGhpcyBkZXN0aW55LCBhbmQgdGhpcyBHYWJpbml1cyBhcnJheWVkIGluIHRoZSBwdXJwbGUgYW5kCiAgICAgICBDYXRpbGluZSBhcnJpdmVkIHdpdGggaGlzIGFybXksIHRoZW4gSSBzaHVkZGVyIGF0IHRoZSBsYW1lbnRhdGlvbiBvZiBtYXRyb25zLCBhbmQgdGhlIGZsaWdodAogICAgICAgb2YgdmlyZ2lucyBhbmQgb2YgYm95cyBhbmQgdGhlIGluc3VsdHMgb2YgdGhlIHZlc3RhbCB2aXJnaW5zOyBhbmQgYmVjYXVzZSB0aGVzZSB0aGluZ3MgYXBwZWFyCiAgICAgICB0byBtZSBleGNlZWRpbmdseSBtaXNlcmFibGUgYW5kIHBpdGlhYmxlLCB0aGVyZWZvcmUgSSBzaG93IG15c2VsZiBzZXZlcmUgYW5kIHJpZ29yb3VzIHRvCiAgICAgICB0aG9zZSB3aG8gaGF2ZSB3aXNoZWQgdG8gYnJpbmcgYWJvdXQgdGhpcyBzdGF0ZSBvZiB0aGluZ3MuIEkgYXNrLCBmb3Jzb290aCwgaWYgYW55IGZhdGhlciBvZgogICAgICAgYSBmYW1pbHksIHN1cHBvc2luZyBoaXMgY2hpbGRyZW4gaGFkIGJlZW4gc2xhaW4gYnkgYSBzbGF2ZSwgaGlzIHdpZmUgbXVyZGVyZWQsIGhpcyBob3VzZQogICAgICAgYnVybnQsIHdlcmUgbm90IHRvIGluZmxpY3Qgb24gaGlzIHNsYXZlcyB0aGUgc2V2ZXJlc3QgcG9zc2libGUgcHVuaXNobWVudCB3b3VsZCBoZSBhcHBlYXIKICAgICAgIGNsZW1lbnQgYW5kIG1lcmNpZnVsIG9yIG1vc3QgaW5odW1hbiBhbmQgY3J1ZWw/IFRvIG1lIGhlIHdvdWxkIHNlZW0gdW5uYXR1cmFsIGFuZAogICAgICAgaGFyZC1oZWFydGVkIHdobyBkaWQgbm90IHNvb3RoZSBoaXMgb3duIHBhaW4gYW5kIGFuZ3Vpc2ggYnkgdGhlIHBhaW4gYW5kIHRvcnR1cmUgb2YgdGhlCiAgICAgICBjcmltaW5hbC4gQW5kIHNvIHdlLCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjQiIC8+IGluIHRoZSBjYXNlIG9mIHRoZXNlIG1lbiB3aG8gZGVzaXJlZCB0byBtdXJkZXIgdXMsIGFuZCBvdXIKICAgICAgIHdpdmVzLCBhbmQgb3VyIGNoaWxkcmVuLOKAlHdobyBlbmRlYXZvdXJlZCB0byBkZXN0cm95IHRoZSBob3VzZXMgb2YgZXZlcnkgaW5kaXZpZHVhbAogICAgICAgYW1vbmcgdXMsIGFuZCBhbHNvIHRoZSByZXB1YmxpYywgdGhlIGhvbWUgb2YgYWxsLOKAlHdobyBkZXNpZ25lZCB0byBwbGFjZSB0aGUgbmF0aW9uCiAgICAgICBvZiB0aGUgQWxsb2Jyb2dlcyBvbiB0aGUgcmVsaWNzIG9mIHRoaXMgY2l0eSwgYW5kIG9uIHRoZSBhc2hlcyBvZiB0aGUgZW1waXJlIGRlc3Ryb3llZCBieQogICAgICAgZmlyZTvigJRpZiB3ZSBhcmUgdmVyeSByaWdvcm91cywgd2Ugc2hhbGwgYmUgY29uc2lkZXJlZCBtZXJjaWZ1bDsgaWYgd2UgY2hvb3NlIHRvIGJlCiAgICAgICBsYXgsIHdlIG11c3QgZW5kdXJlIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGdyZWF0ZXN0IGNydWVsdHksIHRvIHRoZSBkYW1hZ2Ugb2Ygb3VyIGNvdW50cnkgYW5kCiAgICAgICBvdXIgZmVsbG93LWNpdGl6ZW5zLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBVbmxlc3MsIGluZGVlZCwgTHVjaXVzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlCiAgICAgICAgYnJvdGhlci1pbi1sYXcgb2YgTHVjaXVzIENhZXNhciB3YXMgTWFyY3VzIEZ1bHZpdXMsIHdob3NlIGRlYXRoLCBhdCB0aGUgY29tbWFuZCBvZiBPcGltaXVzCiAgICAgICAgdGhlIGNvbnN1bCwgaXMgcmVmZXJyZWQgdG8gYXQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDIuMSIgdmFsaWQ9InllcyI+Q2F0LiAyLiBjaGFwMTwvYmlibD4uIEhlIHNlbnQgaGlzCiAgICAgICAgc29uIHRvIHRoZSBjb25zdWwgdG8gdHJlYXQgZm9yIGhpcyBzdXJyZW5kZXIsIHdob20gT3BpbWl1cyBzZW50IGJhY2sgdGhlIGZpcnN0IHRpbWUsIGFuZAogICAgICAgIGZvcmJhZGUgdG8gcmV0dXJuIHRvIGhpbTsgd2hlbiBoZSBkaWQgcmV0dXJuLCBoZSBwdXQgaGltIHRvIGRlYXRoLjwvbm90ZT4gQ2Flc2FyLCBhCiAgICAgICB0aG9yb3VnaGx5IGJyYXZlIG1hbiBhbmQgb2YgdGhlIGJlc3QgZGlzcG9zaXRpb24gdG93YXJkcyB0aGUgcmVwdWJsaWMsIHNlZW1lZCB0byBhbnkgb25lIHRvCiAgICAgICBiZSB0b28gY3J1ZWwgdGhyZWUsIGRheXMgYWdvLCB3aGVuIGhlIHNhaWQgdGhhdCB0aGUgaHVzYmFuZCBvZiBoaXMgb3duIHNpc3RlciwgYSBtb3N0CiAgICAgICBleGNlbGxlbnQgd29tYW4sIChpbiBoaXMgcHJlc2VuY2UgYW5kIGluIGhpcyBoZWFyaW5nLCkgb3VnaHQgdG8gYmUgZGVwcml2ZWQgb2YKICAgICAgIGxpZmUs4oCUIHdoZW4gaGUgc2FpZCB0aGF0IGhpcyBncmFuZGZhdGhlciBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYnkgY29tbWFuZCBvZiB0aGUKICAgICAgIGNvbnN1bCBhbmQgaGlzIHlvdXRoZnVsIHNvbiwgc2VudCBhcyBhbiBhbWJhc3NhZG9yIGJ5IGhpcyBmYXRoZXIsIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBpbgogICAgICAgcHJpc29uLiBBbmQgd2hhdCBkZWVkIGhhZCB0aGV5IGRvbmUgbGlrZSB0aGVzZSBtZW4/IGhhZCB0aGV5IGZvcm1lZCBhbnkgcGxhbiBmb3IgZGVzdHJveWluZwogICAgICAgdGhlIHJlcHVibGljPyBBdCB0aGF0IHRpbWUgZ3JlYXQgY29ycnVwdGlvbiB3YXMgcmlmZSBpbiB0aGUgcmVwdWJsaWMsIGFuZCB0aGVyZSB3YXMgdGhlCiAgICAgICBncmVhdGVzdCBzdHJpZmUgYmV0d2VlbiBwYXJ0aWVzLiBBbmQsIGF0IHRoYXQgdGltZSwgdGhlIGdyYW5kZmF0aGVyIG9mIHRoaXMgTGVudHVsdXMsIGEgbW9zdAogICAgICAgaWxsdXN0cmlvdXMgbWFuLCBwdXQgb24gaGlzIGFybW91ciBhbmQgcHVyc3VlZCBHcmFjY2h1czsgaGUgZXZlbiByZWNlaXZlZCBhIHNldmVyZSB3b3VuZCB0aGF0CiAgICAgICB0aGVyZSBtaWdodCBiZSBubyBkaW1pbnV0aW9uIG9mIHRoZSBncmVhdCBkaWduaXR5IG9mIHRoZSByZXB1YmxpYy4gQnV0IHRoaXMgbWFuLCBoaXMKICAgICAgIGdyYW5kc29uLCBpbnZpdGVkIHRoZSBHYXVscyB0byBvdmVydGhyb3cgdGhlIGZvdW5kYXRpb25zIG9mIHRoZSByZXB1YmxpYzsgaGUgc3RpcnJlZCB1cCB0aGUKICAgICAgIHNsYXZlcywgaGUgc3VtbW9uZWQgQ2F0aWxpbmUsIGhlIGRpc3RyaWJ1dGVkIHVzIHRvIENldGhlZ3VzIHRvIGJlIG1hc3NhY3JlZCwgYW5kIHRoZSByZXN0IG9mCiAgICAgICB0aGUgY2l0aXplbnMgdG8gR2FiaW5pdXMgdG8gYmUgYXNzYXNzaW5hdGVkLCB0aGUgY2l0eSBoZSBhbGxvdHRlZCB0byBDYXNzaXVzIHRvIGJ1cm4sIGFuZCB0aGUKICAgICAgIHBsdW5kZXJpbmcgYW5kIGRldmFzdGF0aW5nIG9mIGFsbCBJdGFseSBoZSBhc3NpZ25lZCB0byBDYXRpbGluZS4gWW91IGZlYXIsIEkgdGhpbmssIGxlc3QgaW4KICAgICAgIHRoZSBjYXNlIG9mIHN1Y2ggdW5oZWFyZCBvZiBhbmQgYWJvbWluYWJsZSB3aWNrZWRuZXNzIHlvdSBzaG91bGQgc2VlbSB0byBkZWNpZGUgYW55dGhpbmcgd2l0aAogICAgICAgdG9vIGdyZWF0IHNldmVyaXR5OyB3aGVuIHdlIG91Z2h0IG11Y2ggbW9yZSB0byBmZWFyIGxlc3QgYnkgYmVpbmcgcmVtaXNzIGluIHB1bmlzaGluZyB3ZQogICAgICAgc2hvdWxkIGFwcGVhciBjcnVlbCB0byBvdXIgY291bnRyeSwgcmF0aGVyIHRoYW4gYXBwZWFyIGJ5IHRoZSBzZXZlcml0eSBvZiBvdXIgaXJyaXRhdGlvbiB0b28KICAgICAgIHJpZ29yb3VzIHRvIGl0cyBtb3N0IGJpdHRlciBlbmVtaWVzLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gVW5sZXNzLCBpbmRlZWQsIEx1Y2l1cyA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlCiAgICAgICAgYnJvdGhlci1pbi1sYXcgb2YgTHVjaXVzIENhZXNhciB3YXMgTWFyY3VzIEZ1bHZpdXMsIHdob3NlIGRlYXRoLCBhdCB0aGUgY29tbWFuZCBvZiBPcGltaXVzCiAgICAgICAgdGhlIGNvbnN1bCwgaXMgcmVmZXJyZWQgdG8gYXQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMi4xIiB2YWxpZD0ieWVzIj5DYXQuIDIuIGNoYXAxPC9iaWJsPi4gSGUgc2VudCBoaXMKICAgICAgICBzb24gdG8gdGhlIGNvbnN1bCB0byB0cmVhdCBmb3IgaGlzIHN1cnJlbmRlciwgd2hvbSBPcGltaXVzIHNlbnQgYmFjayB0aGUgZmlyc3QgdGltZSwgYW5kCiAgICAgICAgZm9yYmFkZSB0byByZXR1cm4gdG8gaGltOyB3aGVuIGhlIGRpZCByZXR1cm4sIGhlIHB1dCBoaW0gdG8gZGVhdGguPC9ub3RlPiBDYWVzYXIsIGEKICAgICAgIHRob3JvdWdobHkgYnJhdmUgbWFuIGFuZCBvZiB0aGUgYmVzdCBkaXNwb3NpdGlvbiB0b3dhcmRzIHRoZSByZXB1YmxpYywgc2VlbWVkIHRvIGFueSBvbmUgdG8KICAgICAgIGJlIHRvbyBjcnVlbCB0aHJlZSwgZGF5cyBhZ28sIHdoZW4gaGUgc2FpZCB0aGF0IHRoZSBodXNiYW5kIG9mIGhpcyBvd24gc2lzdGVyLCBhIG1vc3QKICAgICAgIGV4Y2VsbGVudCB3b21hbiwgKGluIGhpcyBwcmVzZW5jZSBhbmQgaW4gaGlzIGhlYXJpbmcsKSBvdWdodCB0byBiZSBkZXByaXZlZCBvZgogICAgICAgbGlmZSzigJQgd2hlbiBoZSBzYWlkIHRoYXQgaGlzIGdyYW5kZmF0aGVyIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBieSBjb21tYW5kIG9mIHRoZQogICAgICAgY29uc3VsIGFuZCBoaXMgeW91dGhmdWwgc29uLCBzZW50IGFzIGFuIGFtYmFzc2Fkb3IgYnkgaGlzIGZhdGhlciwgaGFkIGJlZW4gcHV0IHRvIGRlYXRoIGluCiAgICAgICBwcmlzb24uIEFuZCB3aGF0IGRlZWQgaGFkIHRoZXkgZG9uZSBsaWtlIHRoZXNlIG1lbj8gaGFkIHRoZXkgZm9ybWVkIGFueSBwbGFuIGZvciBkZXN0cm95aW5nCiAgICAgICB0aGUgcmVwdWJsaWM/IEF0IHRoYXQgdGltZSBncmVhdCBjb3JydXB0aW9uIHdhcyByaWZlIGluIHRoZSByZXB1YmxpYywgYW5kIHRoZXJlIHdhcyB0aGUKICAgICAgIGdyZWF0ZXN0IHN0cmlmZSBiZXR3ZWVuIHBhcnRpZXMuIEFuZCwgYXQgdGhhdCB0aW1lLCB0aGUgZ3JhbmRmYXRoZXIgb2YgdGhpcyBMZW50dWx1cywgYSBtb3N0CiAgICAgICBpbGx1c3RyaW91cyBtYW4sIHB1dCBvbiBoaXMgYXJtb3VyIGFuZCBwdXJzdWVkIEdyYWNjaHVzOyBoZSBldmVuIHJlY2VpdmVkIGEgc2V2ZXJlIHdvdW5kIHRoYXQKICAgICAgIHRoZXJlIG1pZ2h0IGJlIG5vIGRpbWludXRpb24gb2YgdGhlIGdyZWF0IGRpZ25pdHkgb2YgdGhlIHJlcHVibGljLiBCdXQgdGhpcyBtYW4sIGhpcwogICAgICAgZ3JhbmRzb24sIGludml0ZWQgdGhlIEdhdWxzIHRvIG92ZXJ0aHJvdyB0aGUgZm91bmRhdGlvbnMgb2YgdGhlIHJlcHVibGljOyBoZSBzdGlycmVkIHVwIHRoZQogICAgICAgc2xhdmVzLCBoZSBzdW1tb25lZCBDYXRpbGluZSwgaGUgZGlzdHJpYnV0ZWQgdXMgdG8gQ2V0aGVndXMgdG8gYmUgbWFzc2FjcmVkLCBhbmQgdGhlIHJlc3Qgb2YKICAgICAgIHRoZSBjaXRpemVucyB0byBHYWJpbml1cyB0byBiZSBhc3Nhc3NpbmF0ZWQsIHRoZSBjaXR5IGhlIGFsbG90dGVkIHRvIENhc3NpdXMgdG8gYnVybiwgYW5kIHRoZQogICAgICAgcGx1bmRlcmluZyBhbmQgZGV2YXN0YXRpbmcgb2YgYWxsIEl0YWx5IGhlIGFzc2lnbmVkIHRvIENhdGlsaW5lLiBZb3UgZmVhciwgSSB0aGluaywgbGVzdCBpbgogICAgICAgdGhlIGNhc2Ugb2Ygc3VjaCB1bmhlYXJkIG9mIGFuZCBhYm9taW5hYmxlIHdpY2tlZG5lc3MgeW91IHNob3VsZCBzZWVtIHRvIGRlY2lkZSBhbnl0aGluZyB3aXRoCiAgICAgICB0b28gZ3JlYXQgc2V2ZXJpdHk7IHdoZW4gd2Ugb3VnaHQgbXVjaCBtb3JlIHRvIGZlYXIgbGVzdCBieSBiZWluZyByZW1pc3MgaW4gcHVuaXNoaW5nIHdlCiAgICAgICBzaG91bGQgYXBwZWFyIGNydWVsIHRvIG91ciBjb3VudHJ5LCByYXRoZXIgdGhhbiBhcHBlYXIgYnkgdGhlIHNldmVyaXR5IG9mIG91ciBpcnJpdGF0aW9uIHRvbwogICAgICAgcmlnb3JvdXMgdG8gaXRzIG1vc3QgYml0dGVyIGVuZW1pZXMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDIuMSIgdmFsaWQ9InllcyI+Q2F0LiAyLiBjaGFwMTwvYmlibD4uIEhlIHNlbnQgaGlzCiAgICAgICAgc29uIHRvIHRoZSBjb25zdWwgdG8gdHJlYXQgZm9yIGhpcyBzdXJyZW5kZXIsIHdob20gT3BpbWl1cyBzZW50IGJhY2sgdGhlIGZpcnN0IHRpbWUsIGFuZAogICAgICAgIGZvcmJhZGUgdG8gcmV0dXJuIHRvIGhpbTsgd2hlbiBoZSBkaWQgcmV0dXJuLCBoZSBwdXQgaGltIHRvIGRlYXRoLjwvdHJhbnNsYXRpb24+"
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.7.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJIGNhbm5vdCBjb25jZWFsIHdoYXQgSSBoZWFyOyBmb3Igc2F5aW5ncyBhcmUgYnJ1aXRlZCBhYm91dCwgd2hpY2gKICAgICAgIGNvbWUgdG8gbXkgZWFycywgb2YgdGhvc2UgbWVuIHdobyBzZWVtIHRvIGZlYXIgdGhhdCBJIG1heSBub3QgaGF2ZSBmb3JjZSBlbm91Z2ggdG8gcHV0IGluCiAgICAgICBleGVjdXRpb24gdGhlIHRoaW5ncyB3aGljaCB5b3UgZGV0ZXJtaW5lIG9uIHRoaXMgZGF5LiBFdmVyeXRoaW5nIGlzIHByb3ZpZGVkIGZvciwgYW5kCiAgICAgICBwcmVwYXJlZCwgYW5kIGFycmFuZ2VkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBib3RoIGJ5IG15IGV4Y2VlZGluZyBjYXJlIGFuZCBkaWxpZ2VuY2UsIGFuZAogICAgICAgYWxzbyBieSB0aGUgc3RpbGwgZ3JlYXRlciB6ZWFsIG9mIHRoZSBSb21hbiBwZW9wbGUgZm9yIHRoZSByZXRhaW5pbmcgb2YgdGhlaXIgc3VwcmVtZQogICAgICAgZG9taW5pb24sIGFuZCBmb3IgdGhlIHByZXNlcnZpbmcgb2YgdGhlIGZvcnR1bmVzIG9mIGFsbC4gQWxsIG1lbiBvZiBhbGwgcmFua3MgYXJlIHByZXNlbnQsCiAgICAgICBhbmQgb2YgYWxsIGFnZXM7IHRoZSBmb3J1bSBpcyBmdWxsLCB0aGUgdGVtcGxlcyBhcm91bmQgdGhlIGZvcnVtIGFyZSBmdWxsLCBhbGwgdGhlIGFwcHJvYWNoZXMKICAgICAgIHRvIHRoaXMgcGxhY2UgYW5kIHRvIHRoaXMgdGVtcGxlIGFyZSBmdWxsLiBGb3IgdGhpcyBpcyB0aGUgb25seSBjYXVzZSB0aGF0IGhhcyBldmVyIGJlZW4KICAgICAgIGtub3duIHNpbmNlIHRoZSBmaXJzdCBmb3VuZGF0aW9uIG9mIHRoZSBjaXR5LCBpbiB3aGljaCBhbGwgbWVuIHdlcmUgb2Ygb25lIGFuZCB0aGUgc2FtZQogICAgICAgb3BpbmlvbuKAlGV4Y2VwdCB0aG9zZSwgd2hvLCBhcyB0aGV5IHNhdyB0aGV5IG11c3QgYmUgcnVpbmVkLCBwcmVmZXJyZWQgdG8gcGVyaXNoIGluCiAgICAgICBjb21wYW55IHdpdGggYWxsIHRoZSB3b3JsZCByYXRoZXIgdGhhbiBieSB0aGVtc2VsdmVzLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVzZSBtZW4gSSBleGNlcHQsIGFuZCBJIHdpbGxpbmdseSBzZXQgYXBhcnQgZnJvbSB0aGUKICAgICAgIHJlc3Q7IGZvciBJIGRvIG5vdCB0aGluayB0aGF0IHRoZXkgc2hvdWxkIGJlIGNsYXNzZWQgaW4gdGhlIG51bWJlciBvZiB3b3J0aGxlc3MgY2l0aXplbnMsIGJ1dAogICAgICAgaW4gdGhhdCBvZiB0aGUgbW9zdCBiaXR0ZXIgZW5lbWllcy4gQnV0LCBhcyBmb3IgdGhlIHJlc3QsIE8geWUgaW1tb3J0YWwgZ29kcyEgaW4gd2hhdCBjcm93ZHMsCiAgICAgICB3aXRoIHdoYXQgemVhbCwgd2l0aCB3aGF0IHZpcnR1ZSBkbyB0aGV5IGFncmVlIGluIGRlZmVuY2Ugb2YgdGhlIGNvbW1vbiBkaWduaXR5IGFuZCBzYWZldHkuCiAgICAgICBXaHkgc2hvdWxkIEkgaGVyZSBzcGVhayBvZiB0aGUgUm9tYW4ga25pZ2h0cz8gd2hvIHlpZWxkIHRvIHlvdSB0aGUgc3VwcmVtYWN5IGluIHJhbmsgYW5kCiAgICAgICB3aXNkb20sIGluIG9yZGVyIHRvIHZpZSB3aXRoIHlvdSBpbiBsb3ZlIGZvciB0aGUgcmVwdWJsaWMs4oCUd2hvbSB0aGlzIGRheSBhbmQgdGhpcwogICAgICAgY2F1c2Ugbm93IHJldW5pdGUgd2l0aCB5b3UgaW4gYWxsaWFuY2UgYW5kIHVuYW5pbWl0eSB3aXRoIHlvdXIgYm9keSByZWNvbmNpbGVkIGFmdGVyIGEKICAgICAgIGRpc2FncmVlbWVudCBvZiBtYW55IHllYXJzLiBBbmQgaWYgd2UgY2FuIHByZXNlcnZlIGZvciBldmVyIGluIHRoZSByZXB1YmxpYyB0aGlzIHVuaW9uIG5vdwogICAgICAgZXN0YWJsaXNoZWQgaW4gbmF5IGNvbnN1bHNoaXAsIEkgcGxlZGdlIG15c2VsZiB0byB5b3UgdGhhdCBubyBjaXZpbCBhbmQgZG9tZXN0aWMgY2FsYW1pdHkgY2FuCiAgICAgICBoZXJlYWZ0ZXIgcmVhY2ggYW55IHBhcnQgb2YgdGhlIHJlcHVibGljLiBJIHNlZSB0aGF0IHRoZSB0cmlidW5lcyBvZiB0aGUKICAgICAgIHRyZWFzdXJ54oCUZXhjZWxsZW50IG1lbuKAlGhhdmUgdW5pdGVkIHdpdGggc2ltaWxhciB6ZWFsIGluIGRlZmVuY2Ugb2YgdGhlCiAgICAgICByZXB1YmxpYywgYW5kIGFsbCB0aGUgbm90YXJpZXMuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIG5vdGFyaWVzIGF0IFJvbWUgd2VyZSBpbiB0aGUgcGF5IG9mCiAgICAgICAgdGhlIHN0YXRlOyB0aGV5IHdlcmUgY2hpZWZseSBlbXBsb3llZCBpbiBtYWtpbmcgdXAgdGhlIHB1YmxpYyBhY2NvdW50cy4gSW4gdGhlIHRpbWUgb2YKICAgICAgICBDaWNlcm8gaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGxhd2Z1bCBmb3IgYW55IG9uZSB0byBvYnRhaW4gdGhlIG9mZmljZSBvZiA8Zm9yZWlnbiBsYW5nPSJsYSI+c2NyaWJhPC9mb3JlaWduPiBieSBwdXJjaGFzZSwgKHNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBWZXIuIDIuMi43OSIgdmFsaWQ9InllcyI+Q2ljLiBpbiBWZXJyLiAyLjc5PC9iaWJsPiwpCiAgICAgICAgYW5kIGZyZWVkbWVuIGFuZCB0aGVpciBzb25zIGZyZXF1ZW50bHkgYXZhaWxlZCB0aGVtc2VsdmVzIG9mIHRoaXMgcHJpdmlsZWdlLiA8L25vdGU+IEZvciBhcwogICAgICAgdGhpcyBkYXkgaGFkIGJ5IGNoYW5jZSBicm91Z2h0IHRoZW0gaW4gY3Jvd2RzIHRvIHRoZSB0cmVhc3VyeSwgSSBzZWUgdGhhdCB0aGV5IHdlcmUgZGl2ZXJ0ZWQKICAgICAgIGZyb20gYW4gYW54aWV0eSBmb3IgdGhlIG1vbmV5IGR1ZSB0byB0aGVtLCBmcm9tIGFuIGV4cGVjdGF0aW9uIG9mIHRoZWlyIGNhcGl0YWwsIHRvIGEgcmVnYXJkCiAgICAgICBmb3IgdGhlIGNvbW1vbiBzYWZldHkuIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBlbnRpcmUgbXVsdGl0dWRlIG9mIGhvbmVzdCBtZW4sCiAgICAgICBldmVuIHRoZSBwb29yZXN0IGlzIHByZXNlbnQ7IGZvciB3aG8gaXMgdGhlcmUgdG8gd2hvbSB0aGVzZSB0ZW1wbGVzLCB0aGUgc2lnaHQgb2YgdGhlIGNpdHksCiAgICAgICB0aGUgcG9zc2Vzc2lvbiBvZiBsaWJlcnR5LOKAlGluIHNob3J0OyB0aGlzIGxpZ2h0IGFuZCB0aGlzIHNvaWwgb2YgaGlzLCBjb21tb24gdG8gdXMKICAgICAgIGFsbCwgaXMgbm90IGJvdGggZGVhciBhbmQgcGxlYXNhbnQgYW5kIGRlbGlnaHRmdWw/IDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlc2UgbWVuIEkgZXhjZXB0LCBhbmQgSSB3aWxsaW5nbHkgc2V0IGFwYXJ0IGZyb20gdGhlCiAgICAgICByZXN0OyBmb3IgSSBkbyBub3QgdGhpbmsgdGhhdCB0aGV5IHNob3VsZCBiZSBjbGFzc2VkIGluIHRoZSBudW1iZXIgb2Ygd29ydGhsZXNzIGNpdGl6ZW5zLCBidXQKICAgICAgIGluIHRoYXQgb2YgdGhlIG1vc3QgYml0dGVyIGVuZW1pZXMuIEJ1dCwgYXMgZm9yIHRoZSByZXN0LCBPIHllIGltbW9ydGFsIGdvZHMhIGluIHdoYXQgY3Jvd2RzLAogICAgICAgd2l0aCB3aGF0IHplYWwsIHdpdGggd2hhdCB2aXJ0dWUgZG8gdGhleSBhZ3JlZSBpbiBkZWZlbmNlIG9mIHRoZSBjb21tb24gZGlnbml0eSBhbmQgc2FmZXR5LgogICAgICAgV2h5IHNob3VsZCBJIGhlcmUgc3BlYWsgb2YgdGhlIFJvbWFuIGtuaWdodHM/IHdobyB5aWVsZCB0byB5b3UgdGhlIHN1cHJlbWFjeSBpbiByYW5rIGFuZAogICAgICAgd2lzZG9tLCBpbiBvcmRlciB0byB2aWUgd2l0aCB5b3UgaW4gbG92ZSBmb3IgdGhlIHJlcHVibGljLOKAlHdob20gdGhpcyBkYXkgYW5kIHRoaXMKICAgICAgIGNhdXNlIG5vdyByZXVuaXRlIHdpdGggeW91IGluIGFsbGlhbmNlIGFuZCB1bmFuaW1pdHkgd2l0aCB5b3VyIGJvZHkgcmVjb25jaWxlZCBhZnRlciBhCiAgICAgICBkaXNhZ3JlZW1lbnQgb2YgbWFueSB5ZWFycy4gQW5kIGlmIHdlIGNhbiBwcmVzZXJ2ZSBmb3IgZXZlciBpbiB0aGUgcmVwdWJsaWMgdGhpcyB1bmlvbiBub3cKICAgICAgIGVzdGFibGlzaGVkIGluIG5heSBjb25zdWxzaGlwLCBJIHBsZWRnZSBteXNlbGYgdG8geW91IHRoYXQgbm8gY2l2aWwgYW5kIGRvbWVzdGljIGNhbGFtaXR5IGNhbgogICAgICAgaGVyZWFmdGVyIHJlYWNoIGFueSBwYXJ0IG9mIHRoZSByZXB1YmxpYy4gSSBzZWUgdGhhdCB0aGUgdHJpYnVuZXMgb2YgdGhlCiAgICAgICB0cmVhc3VyeeKAlGV4Y2VsbGVudCBtZW7igJRoYXZlIHVuaXRlZCB3aXRoIHNpbWlsYXIgemVhbCBpbiBkZWZlbmNlIG9mIHRoZQogICAgICAgcmVwdWJsaWMsIGFuZCBhbGwgdGhlIG5vdGFyaWVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIG5vdGFyaWVzIGF0IFJvbWUgd2VyZSBpbiB0aGUgcGF5IG9mCiAgICAgICAgdGhlIHN0YXRlOyB0aGV5IHdlcmUgY2hpZWZseSBlbXBsb3llZCBpbiBtYWtpbmcgdXAgdGhlIHB1YmxpYyBhY2NvdW50cy4gSW4gdGhlIHRpbWUgb2YKICAgICAgICBDaWNlcm8gaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGxhd2Z1bCBmb3IgYW55IG9uZSB0byBvYnRhaW4gdGhlIG9mZmljZSBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zY3JpYmE8L2ZvcmVpZ24+IGJ5IHB1cmNoYXNlLCAoc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAyLjIuNzkiIHZhbGlkPSJ5ZXMiPkNpYy4gaW4gVmVyci4gMi43OTwvYmlibD4sKQogICAgICAgIGFuZCBmcmVlZG1lbiBhbmQgdGhlaXIgc29ucyBmcmVxdWVudGx5IGF2YWlsZWQgdGhlbXNlbHZlcyBvZiB0aGlzIHByaXZpbGVnZS4gPC9ub3RlPiBGb3IgYXMKICAgICAgIHRoaXMgZGF5IGhhZCBieSBjaGFuY2UgYnJvdWdodCB0aGVtIGluIGNyb3dkcyB0byB0aGUgdHJlYXN1cnksIEkgc2VlIHRoYXQgdGhleSB3ZXJlIGRpdmVydGVkCiAgICAgICBmcm9tIGFuIGFueGlldHkgZm9yIHRoZSBtb25leSBkdWUgdG8gdGhlbSwgZnJvbSBhbiBleHBlY3RhdGlvbiBvZiB0aGVpciBjYXBpdGFsLCB0byBhIHJlZ2FyZAogICAgICAgZm9yIHRoZSBjb21tb24gc2FmZXR5LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zY3JpYmE8L2ZvcmVpZ24+IGJ5IHB1cmNoYXNlLCAoc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAyLjIuNzkiIHZhbGlkPSJ5ZXMiPkNpYy4gaW4gVmVyci4gMi43OTwvYmlibD4sKQogICAgICAgIGFuZCBmcmVlZG1lbiBhbmQgdGhlaXIgc29ucyBmcmVxdWVudGx5IGF2YWlsZWQgdGhlbXNlbHZlcyBvZiB0aGlzIHByaXZpbGVnZS4gPC90cmFuc2xhdGlvbj4="
translation['4.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGVudGlyZSBtdWx0aXR1ZGUgb2YgaG9uZXN0IG1lbiwKICAgICAgIGV2ZW4gdGhlIHBvb3Jlc3QgaXMgcHJlc2VudDsgZm9yIHdobyBpcyB0aGVyZSB0byB3aG9tIHRoZXNlIHRlbXBsZXMsIHRoZSBzaWdodCBvZiB0aGUgY2l0eSwKICAgICAgIHRoZSBwb3NzZXNzaW9uIG9mIGxpYmVydHks4oCUaW4gc2hvcnQ7IHRoaXMgbGlnaHQgYW5kIHRoaXMgc29pbCBvZiBoaXMsIGNvbW1vbiB0byB1cwogICAgICAgYWxsLCBpcyBub3QgYm90aCBkZWFyIGFuZCBwbGVhc2FudCBhbmQgZGVsaWdodGZ1bD8gPC90cmFuc2xhdGlvbj4="
translation['4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXQgaXMgd29ydGggd2hpbGUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvIGtub3cgdGhlIGluY2xpbmF0aW9ucyBvZiB0aGUgZnJlZWRtZW47IHdobywKICAgICAgIGhhdmluZyBieSB0aGVpciBnb29kIGZvcnR1bmUgb2J0YWluZWQgdGhlIHJpZ2h0cyBvZiBjaXRpemVucywgY29uc2lkZXIgdGhpcyB0byBiZSByZWFsbHkKICAgICAgIHRoZWlyIGNvdW50cnksIHdoaWNoIHNvbWUgd2hvIGhhdmUgYmVlbiBib3JuIGhlcmUsIGFuZCBib3JuIGluIHRoZSBoaWdoZXN0IHJhbmssIGhhdmUKICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgbm90IHRoZWlyIG93biBjb3VudHJ5LCBidXQgYSBjaXR5IG9mIGVuZW1pZXMuIEJ1dCB3aHkgc2hvdWxkIEkgc3BlYWsgb2YgbWVuCiAgICAgICBvZiB0aGlzIGJvZHkgd2hvbSB0aGVpciBwcml2YXRlIGZvcnR1bmVzLCB3aG9tIHRoZWlyIGNvbW1vbiByZXB1YmxpYywgd2hvbSwgaW4gc2hvcnQsIHRoYXQKICAgICAgIGxpYmVydHkgd2hpY2ggaXMgbW9zdCBkZWxpZ2h0ZnVsIGhhcyBjYWxsZWQgZm9ydGggdG8gZGVmZW5kIHRoZSBzYWZldHkgb2YgdGhlaXIgY291bnRyeT8KICAgICAgIFRoZXJlIGlzIG5vIHNsYXZlIHdobyBpcyBvbmx5IGluIGFuIGVuZHVyYWJsZSBjb25kaXRpb24gb2Ygc2xhdmVyeSB3aG8gZG9lcyBub3Qgc2h1ZGRlciBhdAogICAgICAgdGhlIGF1ZGFjaXR5IG9mIGNpdGl6ZW5zLCB3aG8gZG9lcyBub3QgZGVzaXJlIHRoYXQgdGhlc2UgdGhpbmdzIG1heSBzdGFuZCwgd2hvIGRvZXMgbm90CiAgICAgICBjb250cmlidXRlIGFsbCB0aGUgZ29vZC13aWxsIHRoYXQgaGUgY2FuLCBhbmQgYWxsIHRoYXQgaGUgZGFyZXMsIHRvIHRoZSBjb21tb24gc2FmZXR5LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIGlmIHRoaXMgY29uc2lkZXJhdGlvbiBtb3ZlcyBhbnkgb25lLCB0aGF0IGl0CiAgICAgICBoYXMgYmVlbiBoZWFyZCB0aGF0IHNvbWUgdG9vbCBvZiBMZW50dWx1cyBpcyBydW5uaW5nIGFib3V0IHRoZSBzaG9wcyzigJRpcyBob3BpbmcKICAgICAgIHRoYXQgdGhlIG1pbmRzIG9mIHNvbWUgcG9vciBhbmQgaWdub3JhbnQgbWVuIG1heSBiZSBjb3JydXB0ZWQgYnkgYnJpYmVyeTsgdGhhdCwgaW5kZWVkLCBoYXMKICAgICAgIGJlZW4gYXR0ZW1wdGVkIGFuZCBiZWd1biwgYnV0IG5vIG9uZSBoYXMgYmVlbiBmb3VuZCBlaXRoZXIgc28gd3JldGNoZWQgaW4gdGhlaXIgZm9ydHVuZSBvciBzbwogICAgICAgYWJhbmRvbmVkIGluIHRoZWlyIGluY2xpbmF0aW9uIGFzIG5vdCB0byB3aXNoIHRoZSBwbGFjZSBvZiB0aGVpciBzZWF0IGFuZCB3b3JrIGFuZCBkYWlseQogICAgICAgZ2FpbiwgdGhlaXIgY2hhbWJlciBhbmQgdGhlaXIgYmVkLCBhbmQsIGluIHNob3J0LCB0aGUgdHJhbnF1aWwgY291cnNlIG9mIHRoZWlyIGxpdmVzLCB0byBiZQogICAgICAgc3RpbGwgcHJlc2VydmVkIHRvIHRoZW0uIEFuZCBmYXIgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aG9zZSB3aG8gYXJlIGluIHRoZQogICAgICAgc2hvcHMs4oCUeWVzLCBpbmRlZWQsIChmb3IgdGhhdCBpcyB0aGUgbW9yZSBjb3JyZWN0IHdheSBvZiBzcGVha2luZywpIHRoZSB3aG9sZSBvZgogICAgICAgdGhpcyBjbGFzcyBpcyBvZiBhbGwgdGhlIG1vc3QgYXR0YWNoZWQgdG8gdHJhbnF1aWxsaXR5OyB0aGVpciB3aG9sZSBzdG9jaywgaW5kZWVkLCB0aGVpcgogICAgICAgd2hvbGUgZW1wbG95bWVudCBhbmQgbGl2ZWxpaG9vZCwgZXhpc3RzIGJ5IHRoZSBwZWFjZWZ1bCBpbnRlcmNvdXJzZSBvZiB0aGUgY2l0aXplbnMsIGFuZCBpcwogICAgICAgd2hvbGx5IHN1cHBvcnRlZCBieSBwZWFjZS4gQW5kIGlmIHRoZWlyIGdhaW5zIGFyZSBkaW1pbmlzaGVkIHdoZW5ldmVyIHRoZWlyIHNob3BzIGFyZSBzaHV0LAogICAgICAgd2hhdCB3aWxsIHRoZXkgYmUgd2hlbiB0aGV5IGFyZSBidXJudD8gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBhcyB0aGlzIGlzIHRoZQogICAgICAgY2FzZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIHByb3RlY3Rpb24gb2YgdGhlIFJvbWFuIHBlb3BsZSBpcyBub3Qgd2FudGluZyB0byB5b3U7IGRvIHlvdQogICAgICAgdGFrZSBjYXJlIHRoYXQgeW91IGRvIG5vdCBzZWVtIHRvIGJlIHdhbnRpbmcgdG8gdGhlIFJvbWFuIHBlb3BsZS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBpZiB0aGlzIGNvbnNpZGVyYXRpb24gbW92ZXMgYW55IG9uZSwgdGhhdCBpdAogICAgICAgaGFzIGJlZW4gaGVhcmQgdGhhdCBzb21lIHRvb2wgb2YgTGVudHVsdXMgaXMgcnVubmluZyBhYm91dCB0aGUgc2hvcHMs4oCUaXMgaG9waW5nCiAgICAgICB0aGF0IHRoZSBtaW5kcyBvZiBzb21lIHBvb3IgYW5kIGlnbm9yYW50IG1lbiBtYXkgYmUgY29ycnVwdGVkIGJ5IGJyaWJlcnk7IHRoYXQsIGluZGVlZCwgaGFzCiAgICAgICBiZWVuIGF0dGVtcHRlZCBhbmQgYmVndW4sIGJ1dCBubyBvbmUgaGFzIGJlZW4gZm91bmQgZWl0aGVyIHNvIHdyZXRjaGVkIGluIHRoZWlyIGZvcnR1bmUgb3Igc28KICAgICAgIGFiYW5kb25lZCBpbiB0aGVpciBpbmNsaW5hdGlvbiBhcyBub3QgdG8gd2lzaCB0aGUgcGxhY2Ugb2YgdGhlaXIgc2VhdCBhbmQgd29yayBhbmQgZGFpbHkKICAgICAgIGdhaW4sIHRoZWlyIGNoYW1iZXIgYW5kIHRoZWlyIGJlZCwgYW5kLCBpbiBzaG9ydCwgdGhlIHRyYW5xdWlsIGNvdXJzZSBvZiB0aGVpciBsaXZlcywgdG8gYmUKICAgICAgIHN0aWxsIHByZXNlcnZlZCB0byB0aGVtLiBBbmQgZmFyIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhvc2Ugd2hvIGFyZSBpbiB0aGUKICAgICAgIHNob3BzLOKAlHllcywgaW5kZWVkLCAoZm9yIHRoYXQgaXMgdGhlIG1vcmUgY29ycmVjdCB3YXkgb2Ygc3BlYWtpbmcsKSB0aGUgd2hvbGUgb2YKICAgICAgIHRoaXMgY2xhc3MgaXMgb2YgYWxsIHRoZSBtb3N0IGF0dGFjaGVkIHRvIHRyYW5xdWlsbGl0eTsgdGhlaXIgd2hvbGUgc3RvY2ssIGluZGVlZCwgdGhlaXIKICAgICAgIHdob2xlIGVtcGxveW1lbnQgYW5kIGxpdmVsaWhvb2QsIGV4aXN0cyBieSB0aGUgcGVhY2VmdWwgaW50ZXJjb3Vyc2Ugb2YgdGhlIGNpdGl6ZW5zLCBhbmQgaXMKICAgICAgIHdob2xseSBzdXBwb3J0ZWQgYnkgcGVhY2UuIEFuZCBpZiB0aGVpciBnYWlucyBhcmUgZGltaW5pc2hlZCB3aGVuZXZlciB0aGVpciBzaG9wcyBhcmUgc2h1dCwKICAgICAgIHdoYXQgd2lsbCB0aGV5IGJlIHdoZW4gdGhleSBhcmUgYnVybnQ/IDwvdHJhbnNsYXRpb24+"
translation['4.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBhcyB0aGlzIGlzIHRoZQogICAgICAgY2FzZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIHByb3RlY3Rpb24gb2YgdGhlIFJvbWFuIHBlb3BsZSBpcyBub3Qgd2FudGluZyB0byB5b3U7IGRvIHlvdQogICAgICAgdGFrZSBjYXJlIHRoYXQgeW91IGRvIG5vdCBzZWVtIHRvIGJlIHdhbnRpbmcgdG8gdGhlIFJvbWFuIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IGhhdmUgYSBjb25zdWwgcHJlc2VydmVkIG91dCBvZiBtYW55IGRhbmdlcnMgYW5kIHBsb3RzLCBhbmQgZnJvbSBkZWF0aCBpdHNlbGYgbm90IGZvcgogICAgICAgaGlzIG93biBsaWZlLCBidXQgZm9yIHlvdXIgc2FmZXR5LiBBbGwgcmFua3MgYWdyZWUgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIHJlcHVibGljIHdpdGgKICAgICAgIGhlYXJ0IGFuZCB3aWxsLCB3aXRoIHplYWwsIHdpdGggdmlydHVlLCB3aXRoIHRoZWlyIHZvaWNlLiBZb3VyIGNvbW1vbiBjb3VudHJ5LCBiZXNpZWdlZCBieQogICAgICAgdGhlIGhhbmRzIGFuZCB3ZWFwb25zIG9mIGFuIGltcGlvdXMgY29uc3BpcmFjeSwgc3RyZXRjaGVzIGZvcnRoIGhlciBoYW5kcyB0byB5b3UgYXMgYQogICAgICAgc3VwcGxpYW50OyB0byB5b3Ugc2hlIHJlY29tbWVuZHMgaGVyc2VsZiB0byB5b3Ugc2hlIHJlY29tbWVuZHMgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnMsCiAgICAgICBhbmQgdGhlIGNpdGFkZWwsIGFuZCB0aGUgQ2FwaXRvbCwgYW5kIHRoZSBhbHRhcnMgb2YgdGhlIGhvdXNlaG9sZCBnb2RzLCBhbmQgdGhlIGV0ZXJuYWwKICAgICAgIGluZXh0aW5ndWlzaGFibGUgZmlyZSBvZiBWZXN0YSwgYW5kIGFsbCB0aGUgdGVtcGxlcyBvZiBhbGwgdGhlIGdvZHMsIGFuZCB0aGUgYWx0YXJzIGFuZCB0aGUKICAgICAgIHdhbGxzIGFuZCB0aGUgaG91c2VzIG9mIHRoZSBjaXR5LiBNb3Jlb3ZlciwgeW91ciBvd24gbGl2ZXMsIHRob3NlIG9mIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuLAogICAgICAgdGhlIGZvcnR1bmVzIG9mIGFsbCBtZW4sIHlvdXIgaG9tZXMsIHlvdXIgaGVhcnRoOyBhcmUgdGhpcyBkYXkgaW50ZXJlc3RlZCBpbiB5b3VyIGRlY2lzaW9uLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgaGF2ZSBhIGxlYWRlciBtaW5kZnVsIG9mIHlvdSwgZm9yZ2V0ZnVsIG9mCiAgICAgICBoaW1zZWxm4oCUYW4gb3Bwb3J0dW5pdHkgd2hpY2ggaXMgbm90IGFsd2F5cyBnaXZlbiB0byBtZW47IHlvdSBoYXZlIGFsbCByYW5rcywgYWxsCiAgICAgICBpbmRpdmlkdWFscywgdGhlIHdob2xlIFJvbWFuIHBlb3BsZSwgKGEgdGhpbmcgd2hpY2ggaW4gY2l2aWwgdHJhbnNhY3Rpb25zIHdlIHNlZSB0aGlzIGRheSBmb3IKICAgICAgIHRoZSBmaXJzdCB0aW1lLCkgZnVsbCBvZiBvbmUgYW5kIHRoZSBzYW1lIGZlZWxpbmcuIFRoaW5rIHdpdGggd2hhdCBncmVhdCBsYWJvdXIgdGhpcyBvdXIKICAgICAgIGRvbWluaW9uIHdhcyBmb3VuZGVkLCBieSB3aGF0IHZpcnR1ZSB0aGlzIG91ciBsaWJlcnR5IHdhcyBlc3RhYmxpc2hlZCwgYnkgd2hhdCBraW5kIGZhdm91ciBvZgogICAgICAgdGhlIGdvZHMgb3VyIGZvcnR1bmVzIHdlcmUgYWdncmFuZGl6ZWQgYW5kIGVubm9ibGVkLCBhbmQgaG93IG5lYXJseSBvbmUgbmlnaHQgZGVzdHJveWVkIHRoZW0KICAgICAgIGFsbC4gVGhhdCB0aGlzIG1heSBuZXZlciBoZXJlYWZ0ZXIgYmUgYWJsZSBub3Qgb25seSB0byBiZSBkb25lLCBidXQgbm90IGV2ZW4gdG8gYmUgdGhvdWdodCBvZgogICAgICAgeW91IG11c3QgdGhpcyBkYXkgdGFrZSBjYXJlLiBBbmQgSSBoYXZlIHNwb2tlbiB0aHVzLCBub3QgaW4gb3JkZXIgdG8gc3RpciB5b3UgdXAgd2hvIGFsbW9zdAogICAgICAgb3V0cnVuIG1lIG15c2VsZiBidXQgdGhhdCBteSB2b2ljZSwgd2hpY2ggb3VnaHQgdG8gYmUgdGhlIGNoaWVmIHZvaWNlIGluIHRoZSByZXB1YmxpYywgbWF5CiAgICAgICBhcHBlYXIgdG8gaGF2ZSBmdWxmaWxsZWQgdGhlIGR1dHkgd2hpY2ggYmVsb25ncyB0byBtZSBhcyBjb25zdWwuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IGhhdmUgYSBsZWFkZXIgbWluZGZ1bCBvZiB5b3UsIGZvcmdldGZ1bCBvZgogICAgICAgaGltc2VsZuKAlGFuIG9wcG9ydHVuaXR5IHdoaWNoIGlzIG5vdCBhbHdheXMgZ2l2ZW4gdG8gbWVuOyB5b3UgaGF2ZSBhbGwgcmFua3MsIGFsbAogICAgICAgaW5kaXZpZHVhbHMsIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUsIChhIHRoaW5nIHdoaWNoIGluIGNpdmlsIHRyYW5zYWN0aW9ucyB3ZSBzZWUgdGhpcyBkYXkgZm9yCiAgICAgICB0aGUgZmlyc3QgdGltZSwpIGZ1bGwgb2Ygb25lIGFuZCB0aGUgc2FtZSBmZWVsaW5nLiBUaGluayB3aXRoIHdoYXQgZ3JlYXQgbGFib3VyIHRoaXMgb3VyCiAgICAgICBkb21pbmlvbiB3YXMgZm91bmRlZCwgYnkgd2hhdCB2aXJ0dWUgdGhpcyBvdXIgbGliZXJ0eSB3YXMgZXN0YWJsaXNoZWQsIGJ5IHdoYXQga2luZCBmYXZvdXIgb2YKICAgICAgIHRoZSBnb2RzIG91ciBmb3J0dW5lcyB3ZXJlIGFnZ3JhbmRpemVkIGFuZCBlbm5vYmxlZCwgYW5kIGhvdyBuZWFybHkgb25lIG5pZ2h0IGRlc3Ryb3llZCB0aGVtCiAgICAgICBhbGwuIFRoYXQgdGhpcyBtYXkgbmV2ZXIgaGVyZWFmdGVyIGJlIGFibGUgbm90IG9ubHkgdG8gYmUgZG9uZSwgYnV0IG5vdCBldmVuIHRvIGJlIHRob3VnaHQgb2YKICAgICAgIHlvdSBtdXN0IHRoaXMgZGF5IHRha2UgY2FyZS4gQW5kIEkgaGF2ZSBzcG9rZW4gdGh1cywgbm90IGluIG9yZGVyIHRvIHN0aXIgeW91IHVwIHdobyBhbG1vc3QKICAgICAgIG91dHJ1biBtZSBteXNlbGYgYnV0IHRoYXQgbXkgdm9pY2UsIHdoaWNoIG91Z2h0IHRvIGJlIHRoZSBjaGllZiB2b2ljZSBpbiB0aGUgcmVwdWJsaWMsIG1heQogICAgICAgYXBwZWFyIHRvIGhhdmUgZnVsZmlsbGVkIHRoZSBkdXR5IHdoaWNoIGJlbG9uZ3MgdG8gbWUgYXMgY29uc3VsLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['4.10.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgYmVmb3JlIEkgcmV0dXJuIHRvIHRoZSBkZWNpc2lvbiwgSSB3aWxsIHNheSBhIGZldyB3b3JkcyBjb25jZXJuaW5nIG15c2VsZi4gQXMgbnVtZXJvdXMKICAgICAgIGFzIGlzIHRoZSBiYW5kIG9mIGNvbnNwaXJhdG9yc+KAlGFuZCB5b3Ugc2VlIHRoYXQgaXQgaXMgdmVyeSBncmVhdCzigJRzbwogICAgICAgbnVtZXJvdXMgYSBtdWx0aXR1ZGUgb2YgZW5lbWllcyBkbyBJIHNlZSB0aGF0IEkgaGF2ZSBicm91Z2h0IHVwb24gbXlzZWxmLiBCdXQgSSBjb25zaWRlciB0aGVtCiAgICAgICBiYXNlIGFuZCBwb3dlcmxlc3MgYW5kIGRlc3BpY2FibGUgYW5kIGFiamVjdC4gQnV0IGlmIGF0IGFueSB0aW1lIHRoYXQgYmFuZCBzaGFsbCBiZSBleGNpdGVkCiAgICAgICBieSB0aGUgd2lja2VkbmVzcyBhbmQgbWFkbmVzcyBvZiBhbnkgb25lLCBhbmQgc2hhbGwgc2hvdyBpdHNlbGYgbW9yZSBwb3dlcmZ1bCB0aGFuIHlvdXIKICAgICAgIGRpZ25pdHkgYW5kIHRoYXQgb2YgdGhlIHJlcHVibGljLCB5ZXQuIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgc2hhbGwgbmV2ZXIgcmVwZW50IG9mIG15CiAgICAgICBhY3Rpb25zIGFuZCBvZiBteSBhZHZpY2UuIERlYXRoLCBpbmRlZWQsIHdoaWNoIHRoZXkgcGVyaGFwcyB0aHJlYXRlbiBtZSB3aXRoLCBpcyBwcmVwYXJlZCBmb3IKICAgICAgIGFsbCBtZW47IHN1Y2ggZ2xvcnkgZHVyaW5nIGxpZmUgYXMgeW91IGhhdmUgaG9ub3VyZWQgbWUgd2l0aCBieSB5b3VyIGRlY3JlZXMgbm8gb25lIGhhcyBldmVyCiAgICAgICBhdHRhaW5lZCB0by4gRm9yIHlvdSBoYXZlIHBhc3NlZCB2b3RlcyBvZiBjb25ncmF0dWxhdGlvbiB0byBvdGhlcnMgZm9yIGhhdmluZyBnb3Zlcm5lZCB0aGUKICAgICAgIHJlcHVibGljIHN1Y2Nlc3NmdWxseSwgYnV0IHRvIG1lIGFsb25lIGZvciBoYXZpbmcgc2F2ZWQgaXQgPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IFNjaXBpbyBiZSB0aG91Z2h0IGlsbHVzdHJpb3VzLCBoZSBieSB3aG9zZSB3aXNkb20KICAgICAgIGFuZCB2YWxvdXIgSGFubmliYWwgd2FzIGNvbXBlbGxlZCB0byByZXR1cm4gaW50byBBZnJpY2EsIGFuZCB0byBkZXBhcnQgZnJvbSBJdGFseS4gTGV0IHRoZQogICAgICAgc2Vjb25kIEFmcmljYW51cyBiZSBleHRvbGxlZCB3aXRoIGNvbnNwaWN1b3VzIHByYWlzZSwgd2hvIGRlc3Ryb3llZCB0d28gY2l0aWVzIG1vc3QgaG9zdGlsZQogICAgICAgdG8gdGhpcyBlbXBpcmUsIENhcnRoYWdlIGFuZCBOdW1hbnRpYS4gTGV0IEx1Y2l1cyBQYXVsbHVzIGJlIHRob3VnaHQgYSBncmVhdCBtYW4sIGhlIHdob3NlCiAgICAgICB0cml1bXBoYWwgY2FyIHdhcyBncmFjZWQgPHBiIG49IjMyOCIgLz4gYnkgUGVyc2VzLCBwcmV2aW91c2x5IGEgbW9zdCBwb3dlcmZ1bCBhbmQgbm9ibGUKICAgICAgIG1vbmFyY2guIExldCBNYXJpdXMgYmUgaGVsZCBpbiBldGVybmFsIGhvbm91ciwgd2hvIHR3aWNlIGRlbGl2ZXJlZCBJdGFseSBmcm9tIHNpZWdlLCBhbmQgZnJvbQogICAgICAgdGhlIGZlYXIgb2Ygc2xhdmVyeS4gTGV0IFBvbXBleSBiZSBwcmVmZXJyZWQgdG8gdGhlbSBhbGzigJRQb21wZXksIHdob3NlIGV4cGxvaXRzIGFuZAogICAgICAgd2hvc2UgdmlydHVlcyBhcmUgYm91bmRlZCBieSB0aGUgc2FtZSBkaXN0cmljdHMgYW5kIGxpbWl0cyBhcyB0aGUgY291cnNlIG9mIHRoZSBzdW4uIFRoZXJlCiAgICAgICB3aWxsIGJlLCBmb3Jzb290aCwgYW1vbmcgdGhlIHByYWlzZXMgb2YgdGhlc2UgbWVuLCBzb21lIHJvb20gZm9yIG15IGdsb3J5LCB1bmxlc3MgaGFwbHkgaXQgYmUKICAgICAgIGEgZ3JlYXRlciBkZWVkIHRvIG9wZW4gdG8gdXMgcHJvdmluY2VzIHdoaXRoZXIgd2UgbWF5IGZseSwgdGhhbiB0byB0YWtlIGNhcmUgdGhhdCB0aG9zZSB3aG8KICAgICAgIGFyZSBhdCBhIGRpc3RhbmNlIG1heSwgd2hlbiBjb25xdWVyb3JzOyBoYXZlIGEgaG9tZSB0byByZXR1cm4gdG8uIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IFNjaXBpbyBiZSB0aG91Z2h0IGlsbHVzdHJpb3VzLCBoZSBieSB3aG9zZSB3aXNkb20KICAgICAgIGFuZCB2YWxvdXIgSGFubmliYWwgd2FzIGNvbXBlbGxlZCB0byByZXR1cm4gaW50byBBZnJpY2EsIGFuZCB0byBkZXBhcnQgZnJvbSBJdGFseS4gTGV0IHRoZQogICAgICAgc2Vjb25kIEFmcmljYW51cyBiZSBleHRvbGxlZCB3aXRoIGNvbnNwaWN1b3VzIHByYWlzZSwgd2hvIGRlc3Ryb3llZCB0d28gY2l0aWVzIG1vc3QgaG9zdGlsZQogICAgICAgdG8gdGhpcyBlbXBpcmUsIENhcnRoYWdlIGFuZCBOdW1hbnRpYS4gTGV0IEx1Y2l1cyBQYXVsbHVzIGJlIHRob3VnaHQgYSBncmVhdCBtYW4sIGhlIHdob3NlCiAgICAgICB0cml1bXBoYWwgY2FyIHdhcyBncmFjZWQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzI4IiAvPiBieSBQZXJzZXMsIHByZXZpb3VzbHkgYSBtb3N0IHBvd2VyZnVsIGFuZCBub2JsZQogICAgICAgbW9uYXJjaC4gTGV0IE1hcml1cyBiZSBoZWxkIGluIGV0ZXJuYWwgaG9ub3VyLCB3aG8gdHdpY2UgZGVsaXZlcmVkIEl0YWx5IGZyb20gc2llZ2UsIGFuZCBmcm9tCiAgICAgICB0aGUgZmVhciBvZiBzbGF2ZXJ5LiBMZXQgUG9tcGV5IGJlIHByZWZlcnJlZCB0byB0aGVtIGFsbOKAlFBvbXBleSwgd2hvc2UgZXhwbG9pdHMgYW5kCiAgICAgICB3aG9zZSB2aXJ0dWVzIGFyZSBib3VuZGVkIGJ5IHRoZSBzYW1lIGRpc3RyaWN0cyBhbmQgbGltaXRzIGFzIHRoZSBjb3Vyc2Ugb2YgdGhlIHN1bi4gVGhlcmUKICAgICAgIHdpbGwgYmUsIGZvcnNvb3RoLCBhbW9uZyB0aGUgcHJhaXNlcyBvZiB0aGVzZSBtZW4sIHNvbWUgcm9vbSBmb3IgbXkgZ2xvcnksIHVubGVzcyBoYXBseSBpdCBiZQogICAgICAgYSBncmVhdGVyIGRlZWQgdG8gb3BlbiB0byB1cyBwcm92aW5jZXMgd2hpdGhlciB3ZSBtYXkgZmx5LCB0aGFuIHRvIHRha2UgY2FyZSB0aGF0IHRob3NlIHdobwogICAgICAgYXJlIGF0IGEgZGlzdGFuY2UgbWF5LCB3aGVuIGNvbnF1ZXJvcnM7IGhhdmUgYSBob21lIHRvIHJldHVybiB0by4gPC90cmFuc2xhdGlvbj4="
translation['4.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCBpbiBvbmUgcG9pbnQgdGhlIGNpcmN1bXN0YW5jZXMgb2YgZm9yZWlnbiB0cml1bXBoIGFyZSBiZXR0ZXIgdGhhbiB0aG9zZSBvZgogICAgICAgZG9tZXN0aWMgdmljdG9yeTsgYmVjYXVzZSBmb3JlaWduIGVuZW1pZXMsIGVpdGhlciBpZiB0aGV5IGJlIGNydXNoZWQgYmVjb21lIG9uZSdzIHNlcnZhbnRzLAogICAgICAgb3IgaWYgdGhleSBiZSByZWNlaXZlZCBpbnRvIHRoZSBzdGF0ZSwgdGhpbmsgdGhlbXNlbHZlcyBib3VuZCB0byB1cyBieSBvYmxpZ2F0aW9uczsgYnV0IHRob3NlCiAgICAgICBvZiB0aGUgbnVtYmVyIG9mIGNpdGl6ZW5zIHdobyBiZWNvbWUgZGVwcmF2ZWQgYnkgbWFkbmVzcyBhbmQgb25jZSBiZWdpbiB0byBiZSBlbmVtaWVzIHRvCiAgICAgICB0aGVpciBjb3VudHJ5LOKAlHRob3NlIG1lbiwgd2hlbiB5b3UgaGF2ZSBkZWZlYXRlZCB0aGVpciBhdHRlbXB0cyB0byBpbmp1cmUgdGhlCiAgICAgICByZXB1YmxpYywgeW91IGNhbiBuZWl0aGVyIHJlc3RyYWluIGJ5IGZvcmNlIG5vciBjb25jaWxpYXRlIGJ5IGtpbmRuZXNzLiBTbyB0aGF0IEkgc2VlIHRoYXQgYW4KICAgICAgIGV0ZXJuYWwgd2FyIHdpdGggYWxsIHdpY2tlZCBjaXRpemVucyBoYXMgYmVlbiB1bmRlcnRha2VuIGJ5IG1lOyB3aGljaCwgaG93ZXZlciwgSSBhbQogICAgICAgY29uZmlkZW50IGNhbiBlYXNpbHkgYmUgZHJpdmVuIGJhY2sgZnJvbSBtZSBhbmQgbWluZSBieSB5b3VyIGFpZCwgYW5kIGJ5IHRoYXQgb2YgYWxsIGdvb2QKICAgICAgIG1lbiwgYW5kIGJ5IHRoZSBtZW1vcnkgb2Ygc3VjaCBncmVhdCBkYW5nZXJzLCB3aGljaCB3aWxsIHJlbWFpbiwgbm90IG9ubHkgYW1vbmcgdGhpcyBwZW9wbGUKICAgICAgIHdoaWNoIGhhcyBiZWVuIHNhdmVkLCBidXQgaW4gdGhlIGRpc2NvdXJzZSBhbmQgbWluZHMgb2YgYWxsIG5hdGlvbnMgZm9yZXZlci4gTm9yLCBpbiB0cnV0aCwKICAgICAgIGNhbiBhbnkgcG93ZXIgYmUgZm91bmQgd2hpY2ggd2lsbCBiZSBhYmxlIHRvIHVuZGVybWluZSBhbmQgZGVzdHJveSB5b3VyIHVuaW9uIHdpdGggdGhlIFJvbWFuCiAgICAgICBrbmlnaHRzLCBhbmQgc3VjaCB1bmFuaW1pdHkgYXMgZXhpc3RzIGFtb25nIGFsbCBnb29kIG1lbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['4.11.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzLCB0aGVuLCB0aGlzIGlzIHRoZSBjYXNlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBpbnN0ZWFkIG9mIG15IG1pbGl0YXJ5CiAgICAgICBjb21tYW5k4oCUaW5zdGVhZCBvZiB0aGUgYXJteSzigJTigJRpbnN0ZWFkIG9mIHRoZSBwcm92aW5jZSA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+Q2ljZXJvLCBpbiBvcmRlciB0byB0ZW1wdCBBbnRvbml1cyB0byBhaWQgaGltIGluIGNvdW50ZXJhY3RpbmcgdGhlCiAgICAgICAgdHJlYXNvbmFibGUgZGVzaWducyBvZiBDYXRpbGluZSwgaGFkIGdpdmVuIHVwIHRvIGhpbSB0aGUgcHJvdmluY2Ugb2YgTWFjZWRvbmlhLCB3aGljaCBoYWQKICAgICAgICBmYWxsZW4gdG8gaGlzIG93biBsb3Q7IGFuZCBoYXZpbmcgYWNjZXB0ZWQgdGhhdCBvciBDaXNhbHBpbmUgR2F1bCBpbiBleGNoYW5nZSBmb3IgaXQsIGhlCiAgICAgICAgZ2F2ZSB0aGF0IGFsc28gdG8gUXVpbnR1cyBNZXRlbGx1czsgYmVpbmcgcmVzb2x2ZWQgdG8gcmVjZWl2ZSBubyBlbW9sdW1lbnQsIGRpcmVjdGx5IG9yCiAgICAgICAgaW5kaXJlY3RseSwgZnJvbSBoaXMgY29uc3Vsc2hpcC48L25vdGU+IHdoaWNoIEkgaGF2ZSBuZWdsZWN0ZWQsIGFuZCB0aGUgb3RoZXIgYmFkZ2VzIG9mCiAgICAgICBob25vdXIgd2hpY2ggaGF2ZSBiZWVuIHJlamVjdGVkIGJ5IG1lIGZvciB0aGUgc2FrZSBvZiBwcm90ZWN0aW5nIHRoZSBjaXR5IGFuZCB5b3VyCiAgICAgICBzYWZldHks4oCUaW4gcGxhY2Ugb2YgdGhlIHRpZXMgb2YgY2xpZW50c2hpcCBhbmQgaG9zcGl0YWxpdHkgd2l0aCBjaXRpemVucyBpbiB0aGUKICAgICAgIHByb3ZpbmNlcywgd2hpY2gsIGhvd2V2ZXIsIGJ5IG15IGluZmx1ZW5jZSBpbiB0aGUgY2l0eSwgSSBzdHVkeSB0byBwcmVzZXJ2ZSB3aXRoIGFzIG11Y2ggdG9pbAogICAgICAgYXMgSSBsYWJvdXIgdG8gYWNxdWlyZSB0aGVtLOKAlGluIHBsYWNlIG9mIGFsbCB0aGVzZSB0aGluZ3MsIGFuZCBpbiByZXdhcmQgZm9yIG15CiAgICAgICBzaW5ndWxhciB6ZWFsIGluIHlvdXIgYmVoYWxmLCBhbmQgZm9yIHRoaXMgZGlsaWdlbmNlIGluIHNhdmluZyB0aGUgcmVwdWJsaWMgd2hpY2ggeW91IGJlaG9sZCwKICAgICAgIEkgYXNrIG5vdGhpbmcgb2YgeW91IGJ1dCB0aGUgcmVjb2xsZWN0aW9uIG9mIHRoaXMgdGltZSBhbmQgb2YgbXkgd2hvbGUgY29uc3Vsc2hpcC4gQW5kIGFzCiAgICAgICBsb25nIGFzIHRoYXQgaXMgZml4ZWQgaW4geW91ciBtaW5kcywgSSBzdGlsbCB0aGluayBJIGFtIGZlbmNlZCByb3VuZCBieSB0aGUgc3Ryb25nZXN0IHdhbGwuCiAgICAgICBCdXQgaWYgdGhlIHZpb2xlbmNlIG9mIHdpY2tlZCBtZW4gc2hhbGwgZGVjZWl2ZSBhbmQgb3ZlcnBvd2VyIG15IGV4cGVjdGF0aW9ucywgSSByZWNvbW1lbmQgdG8KICAgICAgIHlvdSBteSBsaXR0bGUgc29uLCB0byB3aG9tLCBpbiB0cnV0aCwgaXQgd2lsbCBiZSBwcm90ZWN0aW9uIGVub3VnaCwgbm90IG9ubHkgZm9yIGhpcyBzYWZldHksCiAgICAgICBidXQgZXZlbiBmb3IgaGlzIGRpZ25pdHkgaWYgeW91IHJlY29sbGVjdCB0aGF0IGhlIGlzIHRoZSBzb24gb2YgaGltIHdobyBoYXMgc2F2ZWQgYWxsIHRoZXNlCiAgICAgICB0aGluZ3MgYXQgaGlzIG93biBzaW5nbGUgcmlzay4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5DaWNlcm8sIGluIG9yZGVyIHRvIHRlbXB0IEFudG9uaXVzIHRvIGFpZCBoaW0gaW4gY291bnRlcmFjdGluZyB0aGUKICAgICAgICB0cmVhc29uYWJsZSBkZXNpZ25zIG9mIENhdGlsaW5lLCBoYWQgZ2l2ZW4gdXAgdG8gaGltIHRoZSBwcm92aW5jZSBvZiBNYWNlZG9uaWEsIHdoaWNoIGhhZAogICAgICAgIGZhbGxlbiB0byBoaXMgb3duIGxvdDsgYW5kIGhhdmluZyBhY2NlcHRlZCB0aGF0IG9yIENpc2FscGluZSBHYXVsIGluIGV4Y2hhbmdlIGZvciBpdCwgaGUKICAgICAgICBnYXZlIHRoYXQgYWxzbyB0byBRdWludHVzIE1ldGVsbHVzOyBiZWluZyByZXNvbHZlZCB0byByZWNlaXZlIG5vIGVtb2x1bWVudCwgZGlyZWN0bHkgb3IKICAgICAgICBpbmRpcmVjdGx5LCBmcm9tIGhpcyBjb25zdWxzaGlwLjwvbm90ZT4gd2hpY2ggSSBoYXZlIG5lZ2xlY3RlZCwgYW5kIHRoZSBvdGhlciBiYWRnZXMgb2YKICAgICAgIGhvbm91ciB3aGljaCBoYXZlIGJlZW4gcmVqZWN0ZWQgYnkgbWUgZm9yIHRoZSBzYWtlIG9mIHByb3RlY3RpbmcgdGhlIGNpdHkgYW5kIHlvdXIKICAgICAgIHNhZmV0eSzigJRpbiBwbGFjZSBvZiB0aGUgdGllcyBvZiBjbGllbnRzaGlwIGFuZCBob3NwaXRhbGl0eSB3aXRoIGNpdGl6ZW5zIGluIHRoZQogICAgICAgcHJvdmluY2VzLCB3aGljaCwgaG93ZXZlciwgYnkgbXkgaW5mbHVlbmNlIGluIHRoZSBjaXR5LCBJIHN0dWR5IHRvIHByZXNlcnZlIHdpdGggYXMgbXVjaCB0b2lsCiAgICAgICBhcyBJIGxhYm91ciB0byBhY3F1aXJlIHRoZW0s4oCUaW4gcGxhY2Ugb2YgYWxsIHRoZXNlIHRoaW5ncywgYW5kIGluIHJld2FyZCBmb3IgbXkKICAgICAgIHNpbmd1bGFyIHplYWwgaW4geW91ciBiZWhhbGYsIGFuZCBmb3IgdGhpcyBkaWxpZ2VuY2UgaW4gc2F2aW5nIHRoZSByZXB1YmxpYyB3aGljaCB5b3UgYmVob2xkLAogICAgICAgSSBhc2sgbm90aGluZyBvZiB5b3UgYnV0IHRoZSByZWNvbGxlY3Rpb24gb2YgdGhpcyB0aW1lIGFuZCBvZiBteSB3aG9sZSBjb25zdWxzaGlwLiBBbmQgYXMKICAgICAgIGxvbmcgYXMgdGhhdCBpcyBmaXhlZCBpbiB5b3VyIG1pbmRzLCBJIHN0aWxsIHRoaW5rIEkgYW0gZmVuY2VkIHJvdW5kIGJ5IHRoZSBzdHJvbmdlc3Qgd2FsbC4KICAgICAgIEJ1dCBpZiB0aGUgdmlvbGVuY2Ugb2Ygd2lja2VkIG1lbiBzaGFsbCBkZWNlaXZlIGFuZCBvdmVycG93ZXIgbXkgZXhwZWN0YXRpb25zLCBJIHJlY29tbWVuZCB0bwogICAgICAgeW91IG15IGxpdHRsZSBzb24sIHRvIHdob20sIGluIHRydXRoLCBpdCB3aWxsIGJlIHByb3RlY3Rpb24gZW5vdWdoLCBub3Qgb25seSBmb3IgaGlzIHNhZmV0eSwKICAgICAgIGJ1dCBldmVuIGZvciBoaXMgZGlnbml0eSBpZiB5b3UgcmVjb2xsZWN0IHRoYXQgaGUgaXMgdGhlIHNvbiBvZiBoaW0gd2hvIGhhcyBzYXZlZCBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBhdCBoaXMgb3duIHNpbmdsZSByaXNrLiA8L3RyYW5zbGF0aW9uPg=="
var translation={}
translation['1.fr1'] = ""
translation['1.fr3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJmcjMiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5bVGhlIHdob2xlIG9mIHRoZSBQcm9wb250aXMgYW5kIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+CiAgICAgICB3aWxsIHRoZXJlZm9yZSBjb21lIHVuZGVyIHRoZSBwb3dlciBvZiB0aGUgcHJhZXRvcjsgdGhlIHdob2xlIGNvYXN0IG9mIHRoZSBMeWNpYW5zIGFuZAogICAgICAgQ2lsaWNpYW5zIHdpbGwgYmUgYWR2ZXJ0aXNlZCBmb3Igc2FsZTsgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc0OCI+TXlzaWE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYxMyI+UGhyeWdpYTwvcGxhY2VOYW1lPiB3aWxsIGJlIHN1YmplY3RlZCB0byB0aGUgc2FtZSBjb25kaXRpb25zCiAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlJodW5jayBoYXMgZW5jbG9zZWQgdGhpcyBzZW50ZW5jZSBpbiBicmFja2V0cywgYXMgdGhlIGdsb3NzIGFuZAogICAgICAgIGludGVycG9sYXRpb24gb2YgYW4gaWdub3JhbnQgbWFuOyBidXQgT3JlbGxpdXMgdGhpbmtzIHNvbWUgcGFydCBvZiBpdCByZWFsbHkgQ2ljZXJvJ3MsCiAgICAgICAgdGhvdWdoIG5vdCBmcmVlIGZyb20gY29ycnVwdGlvbnMuPC9ub3RlPl0gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49ImZyNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4KICAgICAgIHdpbGwgdGhlcmVmb3JlIGNvbWUgdW5kZXIgdGhlIHBvd2VyIG9mIHRoZSBwcmFldG9yOyB0aGUgd2hvbGUgY29hc3Qgb2YgdGhlIEx5Y2lhbnMgYW5kCiAgICAgICBDaWxpY2lhbnMgd2lsbCBiZSBhZHZlcnRpc2VkIGZvciBzYWxlOyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc0OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzQ4Ij5NeXNpYTwvcGxhY2VOYW1lPiBhbmQKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYxMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjEzIj5QaHJ5Z2lhPC9wbGFjZU5hbWU+IHdpbGwgYmUgc3ViamVjdGVkIHRvIHRoZSBzYW1lIGNvbmRpdGlvbnMKICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+Umh1bmNrIGhhcyBlbmNsb3NlZCB0aGlzIHNlbnRlbmNlIGluIGJyYWNrZXRzLCBhcyB0aGUgZ2xvc3MgYW5kCiAgICAgICAgaW50ZXJwb2xhdGlvbiBvZiBhbiBpZ25vcmFudCBtYW47IGJ1dCBPcmVsbGl1cyB0aGlua3Mgc29tZSBwYXJ0IG9mIGl0IHJlYWxseSBDaWNlcm8ncywKICAgICAgICB0aG91Z2ggbm90IGZyZWUgZnJvbSBjb3JydXB0aW9ucy48L25vdGU+XSA8L3RyYW5zbGF0aW9uPg=="
translation['1.fr4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJmcjQiIHVuaXQ9InNlY3Rpb24iIC8+PHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpPC9mb3JlaWduPiB3aWxsIHNlbGwgdGhlIGJvb3R5LCB0aGUgc3BvaWxzLCB0aGUgZGl2aXNpb24gb2YKICAgICAgIHRoZSBwbHVuZGVyLCB0aGUgdmVyeSBjYW1wIG9mIENuYWV1cyBQb21wZWl1cywgd2hpbGUgdGhlIGdlbmVyYWwgaXMgZm9yY2VkIHRvIHNpdCBzdGlsbC4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcmk8L2ZvcmVpZ24+IHdpbGwgc2VsbCB0aGUgYm9vdHksIHRoZSBzcG9pbHMsIHRoZSBkaXZpc2lvbiBvZgogICAgICAgdGhlIHBsdW5kZXIsIHRoZSB2ZXJ5IGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCB3aGlsZSB0aGUgZ2VuZXJhbCBpcyBmb3JjZWQgdG8gc2l0IHN0aWxsLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.fr4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBTZWUsIG5vdywgaW4gdGhlIHNlY29uZCBjaGFwdGVyIG9mIHRoaXMgbGF3LCBob3cKICAgICAgIHRoYXQgcHJvZmxpZ2F0ZSBkZWJhdWNoZWUgaXMgZGlzdHVyYmluZyB0aGUgcmVwdWJsaWMs4oCUaG93IGhlIGlzIHJ1aW5pbmcgYW5kCiAgICAgICBkaXNzaXBhdGluZyB0aGUgcG9zc2Vzc2lvbnMgbGVmdCB1cyBieSBvdXIgYW5jZXN0b3JzOyBzbyBhcyB0byBiZSBub3QgbGVzcyBhIHNwZW5kdGhyaWZ0IGluCiAgICAgICB0aGUgcGF0cmltb255IG9mIHRoZSBSb21hbiBwZW9wbGUgdGhhbiBpbiBoaXMgb3duLiBIZSBpcyBhZHZlcnRpc2luZyBmb3Igc2FsZSBieSBoaXMgbGF3IGFsbAogICAgICAgdGhlIHJldmVudWVzLCBmb3IgdGhlIGRlY2VtdmlycyB0byBzZWxsIHRoZW07IHRoYXQgaXMgdG8gc2F5LCBoZSBpcyBhZHZlcnRpc2luZyBhbiBhdWN0aW9uIG9mCiAgICAgICB0aGUgcHJvcGVydHkgb2YgdGhlIHN0YXRlLiBIZSB3YW50cyBsYW5kcyB0byBiZSBib3VnaHQsIGluIG9yZGVyIHRvIGJlIGRpc3RyaWJ1dGVkOyBoZSBpcwogICAgICAgc2Vla2luZyBtb25leS4gTm8gZG91YnQgaGUgd2lsbCBkZXZpc2Ugc29tZXRoaW5nLCBhbmQgYnJpbmcgaXQgZm9yd2FyZDsgZm9yIGluIHRoZSBwcmVjZWRpbmcKICAgICAgIGNoYXB0ZXJzIHRoZSBkaWduaXR5IG9mIHRoZSBSb21hbiBwZW9wbGUgd2FzIGF0dGFja2VkOyB0aGUgbmFtZSBvZiBvdXIgZG9taW5pb24gd2FzIGhlbGQgdXAKICAgICAgIGFzIGFuIG9iamVjdCBvZiBjb21tb24gaGF0cmVkIHRvIGFsbCB0aGUgbmF0aW9ucyBvZiB0aGUgZWFydGg7IGNpdGllcyB3aGljaCB3ZXJlIGF0IHBlYWNlCiAgICAgICB3aXRoIHVzLCBsYW5kcyBiZWxvbmdpbmcgdG8gdGhlIGFsbGllcywgdGhlIHJhbmtzIG9mIGtpbmdzIGluIGFsbGlhbmNlIHdpdGggdXMsIHdlcmUgYWxsIG1hZGUKICAgICAgIGEgcHJlc2VudCBvZiB0byB0aGUgZGVjZW12aXJzOyBhbmQgbm93IHRoZXkgd2FudCBhY3R1YWwgcmVhZHkgbW9uZXkgcGFpZCBkb3duIHRvIHRoZW0uCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIHdhaXRpbmcgdG8gc2VlIHdoYXQgdGhpcyB2aWdpbGFudCBhbmQgY2xldmVyIHRyaWJ1bmUKICAgICAgIGlzIGNvbnRyaXZpbmcuIExldCB0aGUgU2NhbnRpYW4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTY2FudGlhbiB3b29kIHdhcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPi48L25vdGU+IHdvb2QsIHNheXMgaGUsIGJlIHNvbGQuIERpZCB5b3UgdGhlbiBmaW5kCiAgICAgICB0aGlzIHdvb2QgbWVudGlvbmVkIGFtb25nIHRoZSBwb3NzZXNzaW9ucyB0aGF0IHdlcmUgbGVmdCwgb3IgaW4gdGhlIHBhc3R1cmUgbGFuZHMgb2YgdGhlCiAgICAgICBsZXNzb3JzPyBJZiB0aGVyZSBpcyBhbnl0aGluZyB3aGljaCB5b3UgaGF2ZSBodW50ZWQgb3V0LCBhbmQgZGlzY292ZXJlZCwgYnJvdWdodCB0byBsaWdodCBvdXQKICAgICAgIG9mIGRhcmtuZXNzLCBhbHRob3VnaCBpdCBpcyBub3QganVzdCwgc3RpbGwgdXNlIHRoYXQsIHNpbmNlIGl0IGlzIGNvbnZlbmllbnQsIGFuZCBzaW5jZSB5b3UKICAgICAgIHlvdXJzZWxmIHdlcmUgdGhlIHBlcnNvbiB0byBicmluZyBpdCBmb3J3YXJkLiBCdXQgc2hhbGwgeW91IHNlbGwgdGhlIFNjYW50aWFuIHdvb2Qgd2hpbGUgd2UKICAgICAgIGFyZSBjb25zdWxzLCBhbmQgd2hpbGUgdGhpcyBzZW5hdGUgaXMgaW4gZXhpc3RlbmNlPyBTaGFsbCB5b3UgdG91Y2ggYW55IG9mIHRoZSByZXZlbnVlcz8KICAgICAgIFNoYWxsIHlvdSB0YWtlIGF3YXkgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIHRoYXQgd2hpY2ggaXMgdGhlaXIgc3RyZW5ndGggaW4gdGltZSBvZiB3YXIsIHRoZWlyCiAgICAgICBvcm5hbWVudCBpbiB0aW1lIG9mIHBlYWNlPyBCdXQgdGhlbiBpbmRlZWQsIEkgc2hhbGwgdGhpbmsgbXlzZWxmIGEgbGF6aWVyIGNvbnN1bCB0aGFuIHRob3NlCiAgICAgICBmZWFybGVzcyBtZW4gd2hvIGZpbGxlZCB0aGlzIG9mZmljZSBpbiB0aGUgdGltZXMgb2Ygb3VyIGFuY2VzdG9yczsgYmVjYXVzZSB0aGUgcmV2ZW51ZXMgd2hpY2gKICAgICAgIHdlcmUgYWNxdWlyZWQgYnkgdGhlIFJvbWFuIHBlb3BsZSB3aGVuIHRoZXkgd2VyZSBjb25zdWxzLCB3aWxsIGJlIGNvbnNpZGVyZWQgbm90IGFibGUgdG8gYmUKICAgICAgIHByZXNlcnZlZCB3aGVuIEkgYW0gY29uc3VsLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['1.3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgaXMgc2VsbGluZyBhbGwgdGhlIHBvc3Nlc3Npb25zIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBpbgogICAgICAgcmVndWxhciBvcmRlci4gRm9yc29vdGgsIGhlIGlzIHZlcnkgYnVzeSBpbiB0aGF0IG9jY3VwYXRpb24uIEZvciBkb2VzIG5vdCBvbWl0IG9uZS4gSGUgZ29lcwogICAgICAgdGhyb3VnaCB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+IGluIHRoZSBhY2NvdW50LWJvb2tzIG9mCiAgICAgICB0aGUgY2Vuc29ycy4gSGUgZG9lcyBub3Qgb21pdCBvbmUgc2luZ2xlIGhvdXNlLCBvciBvbmUgc2luZ2xlIGZpZWxkLiBZb3UgaGF2ZSBoZWFyZCBhbgogICAgICAgYXVjdGlvbiBvZiB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBnaXZlbiBub3RpY2Ugb2YgYnkgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhbmQKICAgICAgIGZpeGVkIGZvciB0aGUgbW9udGggb2YgSmFudWFyeSBhbmQgSSBzdXBwb3NlIHlvdSBkbyBub3QgZG91YnQsIHRoYXQgdGhleSB3aG8gcHJvY3VyZWQgdGhlc2UKICAgICAgIHRoaW5ncyBieSB0aGVpciBhcm1zIGFuZCB0aGVpciB2YWxvdXIsIGRpZCBub3Qgc2VsbCB0aGUgZm9yIHRoZSBzYWtlIG9mIHRoZSB0cmVhc3VyeSwgb24KICAgICAgIHB1cnBvc2UgdGhhdCB3ZSBtaWdodCBoYXZlIHNvbWV0aGluZyB0byBzZWxsIGZvciB0aGUgc2FrZSBvZiBicmliZXJ5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4KICAgICAgIHJlZ3VsYXIgb3JkZXIuIEZvcnNvb3RoLCBoZSBpcyB2ZXJ5IGJ1c3kgaW4gdGhhdCBvY2N1cGF0aW9uLiBGb3IgZG9lcyBub3Qgb21pdCBvbmUuIEhlIGdvZXMKICAgICAgIHRocm91Z2ggdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpbiB0aGUgYWNjb3VudC1ib29rcyBvZgogICAgICAgdGhlIGNlbnNvcnMuIEhlIGRvZXMgbm90IG9taXQgb25lIHNpbmdsZSBob3VzZSwgb3Igb25lIHNpbmdsZSBmaWVsZC4gWW91IGhhdmUgaGVhcmQgYW4KICAgICAgIGF1Y3Rpb24gb2YgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgZ2l2ZW4gbm90aWNlIG9mIGJ5IHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYW5kCiAgICAgICBmaXhlZCBmb3IgdGhlIG1vbnRoIG9mIEphbnVhcnkgYW5kIEkgc3VwcG9zZSB5b3UgZG8gbm90IGRvdWJ0LCB0aGF0IHRoZXkgd2hvIHByb2N1cmVkIHRoZXNlCiAgICAgICB0aGluZ3MgYnkgdGhlaXIgYXJtcyBhbmQgdGhlaXIgdmFsb3VyLCBkaWQgbm90IHNlbGwgdGhlIGZvciB0aGUgc2FrZSBvZiB0aGUgdHJlYXN1cnksIG9uCiAgICAgICBwdXJwb3NlIHRoYXQgd2UgbWlnaHQgaGF2ZSBzb21ldGhpbmcgdG8gc2VsbCBmb3IgdGhlIHNha2Ugb2YgYnJpYmVyeS4gPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNlZSwgbm93LCBob3cgbXVjaCBtb3JlIHVuZGlzZ3Vpc2VkbHkgdGhhbiBiZWZvcmUgaGUgcHJvY2VlZHMgb24gaGlzIGNvdXJzZS4gRm9yIGl0IGhhcwogICAgICAgYmVlbiBhbHJlYWR5IHNob3duIGJ5IGhvdyB0aGV5IGF0dGFja2VkIFBvbXBlaXVzIGluIHRoZSBlYXJsaWVyIHBhcnQgb2YgdGhlIGxhdzsgYW5kIG5vdyB0aGV5CiAgICAgICBzaGFsbCBzaG93IGl0IGFsc28gdGhlbXNlbHZlcy4gSGUgb3JkZXJzIHRoZSBsYW5kcyBiZWxvbmdpbmcgdG8gdGhlIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+CiAgICAgICB0byBiZSBzb2xkLiBUaGVzZSBsYW5kcyB0aGUgdmljdG9yeSBvZiBQdWJsaXVzIFNlcnZpbGl1cywgdGhhdCBtb3N0IGdhbGxhbnQgZ2VuZXJhbCwgaGFkIG1hZGUKICAgICAgIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLiBBZnRlciB0aGF0LCB0aGUgcm95YWwgZG9tYWlucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHdoaWNoIHdlcmUgYWNxdWlyZWQgcGFydGx5IGJ5IHRoZSB2YWxvdXIgb2YgVGl0dXMKICAgICAgIEZsYW1pbmludXMsIGFuZCBwYXJ0IGJ5IHRoYXQgb2YgTHVjaXVzIFBhdWxsdXMsIHdobyBjb25xdWVyZWQgUGVyc2VzLiBBZnRlciB0aGF0LCB0aGF0IG1vc3QKICAgICAgIGV4Y2VsbGVudCBhbmQgcHJvZHVjdGl2ZSBsYW5kIHdoaWNoIGJlbG9uZ3MgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LCB3aGljaCB3YXMgYWRkZWQgdG8gdGhlIHJldmVudWVzIG9mIHRoZSBSb21hbiBwZW9wbGUgYnkgdGhlIGNhbXBhaWducwogICAgICAgYW5kIHN1Y2Nlc3NlcyBvZiBMdWNpdXMgTXVtbWl1cy4gQWZ0ZXIgdGhhdCwgdGhleSBzZWxsIHRoZSBsYW5kcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA5NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDk1Ij5TcGFpbjwvcGxhY2VOYW1lPiBuZWFyIENhcnRoYWdlbmEsIGFjcXVpcmVkIGJ5IHRoZSBkaXN0aW5ndWlzaGVkIHZhbG91ciBvZgogICAgICAgdGhlIHR3byBTY2lwaW9zLiBUaGVuIENhcnRoYWdlbmEgaXRzZWxmLCB3aGljaCBQdWJsaXVzIFNjaXBpbywgaGF2aW5nIHN0cmlwcGVkIGl0IG9mIGFsbCBpdHMKICAgICAgIGZvcnRpZmljYXRpb25zLCBjb25zZWNyYXRlZCB0byB0aGUgZXRlcm5hbCByZWNvbGxlY3Rpb24gb2YgbWVuLCB3aGV0aGVyIGhpcyBwdXJwb3NlIHdhcyB0bwogICAgICAga2VlcCB1cCB0aGUgbWVtb3J5IG9mIHRoZSBkaXNhc3RlciBvZiB0aGUgQ2FydGhhZ2luaWFucywgb3IgdG8gYmVhciB3aXRuZXNzIHRvIG91ciB2aWN0b3J5LAogICAgICAgb3IgdG8gZnVsZmlsbCBzb21lIHJlbGlnaW91cyBvYmxpZ2F0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSGF2aW5nIHNvbGQgYWxsCiAgICAgICB0aGVzZSBlbnNpZ25zIGFuZCBjcm93bnMsIGFzIGl0IHdlcmUsIG9mIHRoZSBlbXBpcmUsIHdpdGggd2hpY2ggdGhlIHJlcHVibGljIHdhcyBhZG9ybmVkLCBhbmQKICAgICAgIGhhbmRlZCBkb3duIHRvIHlvdSBieSB5b3VyIGFuY2VzdG9ycywgdGhleSB0aGVuIG9yZGVyIHRoZSBsYW5kcyB0byBiZSBzb2xkIHdoaWNoIHRoZSBraW5nCiAgICAgICBNaXRocmlkYXRlcyBwb3NzZXNzZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LiBEbyB0aGV5IG5vdCBzZWVtIHRvIGJlIHB1cnN1aW5nIHdpdGhvdXQgbXVjaCBkaXNndWlzZSwgYW5kIGFsbW9zdAogICAgICAgd2l0aCB0aGUgY3JpZXIncyBzcGVhciwgdGhlIGFybXkgb2YgQ25hZXVzIFBvbXBlaXVzLCB3aGVuIHRoZXkgb3JkZXIgdGhvc2UgbGFuZHMgdG8gYmUgc29sZAogICAgICAgaW4gd2hpY2ggaGUgaXMgbm93IGVuZ2FnZWQgYW5kIGNhcnJ5aW5nIG9uIHdhcj8gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNzgiPkF0dGFsaWE8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwMTkiPk9seW1wdXM8L3BsYWNlTmFtZT4KICAgICAgIHRvIGJlIHNvbGQuIFRoZXNlIGxhbmRzIHRoZSB2aWN0b3J5IG9mIFB1YmxpdXMgU2VydmlsaXVzLCB0aGF0IG1vc3QgZ2FsbGFudCBnZW5lcmFsLCBoYWQgbWFkZQogICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUuIEFmdGVyIHRoYXQsIHRoZSByb3lhbCBkb21haW5zIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggd2VyZSBhY3F1aXJlZCBwYXJ0bHkgYnkgdGhlIHZhbG91ciBvZiBUaXR1cwogICAgICAgRmxhbWluaW51cywgYW5kIHBhcnQgYnkgdGhhdCBvZiBMdWNpdXMgUGF1bGx1cywgd2hvIGNvbnF1ZXJlZCBQZXJzZXMuIEFmdGVyIHRoYXQsIHRoYXQgbW9zdAogICAgICAgZXhjZWxsZW50IGFuZCBwcm9kdWN0aXZlIGxhbmQgd2hpY2ggYmVsb25ncyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4sIHdoaWNoIHdhcyBhZGRlZCB0byB0aGUgcmV2ZW51ZXMgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSB0aGUgY2FtcGFpZ25zCiAgICAgICBhbmQgc3VjY2Vzc2VzIG9mIEx1Y2l1cyBNdW1taXVzLiBBZnRlciB0aGF0LCB0aGV5IHNlbGwgdGhlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDk1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+IG5lYXIgQ2FydGhhZ2VuYSwgYWNxdWlyZWQgYnkgdGhlIGRpc3Rpbmd1aXNoZWQgdmFsb3VyIG9mCiAgICAgICB0aGUgdHdvIFNjaXBpb3MuIFRoZW4gQ2FydGhhZ2VuYSBpdHNlbGYsIHdoaWNoIFB1YmxpdXMgU2NpcGlvLCBoYXZpbmcgc3RyaXBwZWQgaXQgb2YgYWxsIGl0cwogICAgICAgZm9ydGlmaWNhdGlvbnMsIGNvbnNlY3JhdGVkIHRvIHRoZSBldGVybmFsIHJlY29sbGVjdGlvbiBvZiBtZW4sIHdoZXRoZXIgaGlzIHB1cnBvc2Ugd2FzIHRvCiAgICAgICBrZWVwIHVwIHRoZSBtZW1vcnkgb2YgdGhlIGRpc2FzdGVyIG9mIHRoZSBDYXJ0aGFnaW5pYW5zLCBvciB0byBiZWFyIHdpdG5lc3MgdG8gb3VyIHZpY3RvcnksCiAgICAgICBvciB0byBmdWxmaWxsIHNvbWUgcmVsaWdpb3VzIG9ibGlnYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBIYXZpbmcgc29sZCBhbGwKICAgICAgIHRoZXNlIGVuc2lnbnMgYW5kIGNyb3ducywgYXMgaXQgd2VyZSwgb2YgdGhlIGVtcGlyZSwgd2l0aCB3aGljaCB0aGUgcmVwdWJsaWMgd2FzIGFkb3JuZWQsIGFuZAogICAgICAgaGFuZGVkIGRvd24gdG8geW91IGJ5IHlvdXIgYW5jZXN0b3JzLCB0aGV5IHRoZW4gb3JkZXIgdGhlIGxhbmRzIHRvIGJlIHNvbGQgd2hpY2ggdGhlIGtpbmcKICAgICAgIE1pdGhyaWRhdGVzIHBvc3Nlc3NlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzYwIj5QYXBobGFnb25pYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDMwMTYiPkNhcHBhZG9jaWE8L3BsYWNlTmFtZT4uIERvIHRoZXkgbm90IHNlZW0gdG8gYmUgcHVyc3Vpbmcgd2l0aG91dCBtdWNoIGRpc2d1aXNlLCBhbmQgYWxtb3N0CiAgICAgICB3aXRoIHRoZSBjcmllcidzIHNwZWFyLCB0aGUgYXJteSBvZiBDbmFldXMgUG9tcGVpdXMsIHdoZW4gdGhleSBvcmRlciB0aG9zZSBsYW5kcyB0byBiZSBzb2xkCiAgICAgICBpbiB3aGljaCBoZSBpcyBub3cgZW5nYWdlZCBhbmQgY2Fycnlpbmcgb24gd2FyPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHdoYXQgaXMgdGhlIG1lYW5pbmcgb2YgdGhpcywgdGhhdCB0aGV5IGZpeCBubyBwbGFjZSBmb3IgdGhpcyBhdWN0aW9uIHdoaWNoIHRoZXkgYXJlCiAgICAgICBlc3RhYmxpc2hpbmc/IEZvciBwb3dlciBpcyBnaXZlbiB0byB0aGUgZGVjZW12aXJzIGJ5IHRoaXMgbGF3LCBvZiBob2xkaW5nIHRoZWlyIHNhbGVzIGluIGFueQogICAgICAgcGxhY2VzIHdoaWNoIHNlZW0gY29udmVuaWVudCB0byB0aGVtLiBUaGUgY2Vuc29ycyBhcmUgbm90IGFsbG93ZWQgdG8gbGV0IHRoZSBjb250cmFjdHMgZm9yCiAgICAgICBmYXJtaW5nIHRoZSByZXZlbnVlcywgZXhjZXB0IGluIHRoZSBzaWdodCBvZiB0aGUgUm9tYW4gcGVvcGxlLiBTaGFsbCB0aGVzZSBtZW4gYmUgYWxsb3dlZCB0bwogICAgICAgc2VsbCB0aGVtIGluIHRoZSBtb3N0IGRpc3RhbnQgY291bnRyaWVzPyBCdXQgZXZlbiB0aGUgbW9zdCBwcm9mbGlnYXRlIG1lbiwgd2hlbiB0aGV5IGhhdmUKICAgICAgIHNxdWFuZGVyZWQgdGhlaXIgcGF0cmltb255LCBwcmVmZXIgc2VsbGluZyB0aGVpciBwcm9wZXJ0eSBpbiB0aGUgYXVjdGlvbmVlcidzIHJvb21zLCByYXRoZXIKICAgICAgIHRoYW4gaW4gdGhlIHJvYWRzLCBvciBpbiB0aGUgc3RyZWV0cy4gVGhpcyBtYW4sIGJ5IGhpcyBsYXcsIGdpdmVzIGxlYXZlIHRvIHRoZSBkZWNlbXZpcnMgdG8KICAgICAgIHNlbGwgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgaW4gd2hhdGV2ZXIgZGFya25lc3MgYW5kIHdoYXRldmVyIHNvbGl0dWRlIHRoZXkgZmluZCBpdAogICAgICAgY29udmVuaWVudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IERvIHlvdSBub3QsIG1vcmVvdmVyLCBzZWUgaG93IGdyaWV2b3VzLCBob3cKICAgICAgIGZvcm1pZGFibGUsIGFuZCBob3cgcHJlZ25hbnQgd2l0aCBleHRvcnRpb24gdGhhdCBpbnZhc2lvbiBvZiB0aGUgZGVjZW12aXJzIGFuZCBvZiB0aGUKICAgICAgIG11bHRpdHVkZSB0aGF0IHdpbGwgZm9sbG93IGluIHRoZWlyIHRyYWluIHdpbGwgYmUgdG8gYWxsIHRoZSBwcm92aW5jZXMsIGFuZCBraW5nZG9tcywgYW5kCiAgICAgICBmcmVlIG5hdGlvbnM/IEluIHRoZSBjYXNlIG9mIHRob3NlIG1lbiBvbiB3aG9tIHlvdSBoYXZlIGNvbmZlcnJlZCBsaWV1dGVuYW5jaWVzIGZvciB0aGUgc2FrZQogICAgICAgb2YgZW50ZXJpbmcgb24gaW5oZXJpdGFuY2VzLCB0aG91Z2ggdGhleSB3ZW50IGFzIHByaXZhdGUgbWVuLCBvbiBwcml2YXRlIGJ1c2luZXNzLCBpbnZlc3RlZAogICAgICAgd2l0aCBubyBleGNlc3NpdmUgcG93ZXIgYW5kIG5vIHN1cHJlbWUgYXV0aG9yaXR5LCB5b3UgaGF2ZSBzdGlsbCBoZWFyZCBob3cgYnVyZGVuc29tZSB0aGVpcgogICAgICAgYXJyaXZhbCBoYXMgcHJvdmVkIHRvIHlvdXIgYWxsaWVzLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgYWxhcm0gYW5kIHdoYXQKICAgICAgIG1pc2ZvcnR1bmUsIHRoZW4gbXVzdCB5b3UgdGhpbmsgYWxsIG5hdGlvbnMgYXJlIHRocmVhdGVuZWQgd2l0aCBieSB0aGlzIGxhdywgd2hlbiBkZWNlbXZpcnMKICAgICAgIGFyZSBzZW50IGFsbCBvdmVyIHRoZSB3b3JsZCB3aXRoIHN1cHJlbWUgcG93ZXIs4oCUbWVuIG9mIHRoZSBncmVhdGVzdCBhdmFyaWNlLCBhbmQKICAgICAgIHdpdGggYW4gaW5zYXRpYWJsZSBkZXNpcmUgZm9yIGV2ZXJ5IHNvcnQgb2YgcHJvcGVydHk/IHdob3NlIGFycml2YWwgd2lsbCBiZSBncmlldm91cywgd2hvc2UKICAgICAgIGZvcmNlcyB3aWxsIGJlIGZvcm1pZGFibGUsIHdob3NlIGp1ZGljaWFsIGFuZCBhcmJpdHJhcnkgcG93ZXIgd2lsbCBiZSBhYnNvbHV0ZWx5IGludG9sZXJhYmxlLgogICAgICAgRm9yIHRoZXkgd2lsbCBoYXZlIHRoZSBwb3dlciBvZiBkZWNpZGluZyB3aGF0ZXZlciB0aGV5IHBsZWFzZSB0byBiZSBwdWJsaWMgcHJvcGVydHksIGFuZCBvZgogICAgICAgc2VsbGluZyB3aGF0ZXZlciB0aGV5IGRlY2lkZSB0byBiZSBzdWNoLiBFdmVuIHRoYXQgdmVyeSB0aGluZyB3aGljaCBjb25zY2llbnRpb3VzIG1lbiB3aWxsCiAgICAgICBub3QgZG8sIG5hbWVseSwgdGFraW5nIG1vbmV5IHRvIGFic3RhaW4gZnJvbSBzZWxsaW5nLCBpcyB0byBiZSBtYWRlIDxwYiBuPSIyMDYiIC8+IGxhd2Z1bCBmb3IKICAgICAgIHRoZW0gdG8gZG8gYnkgdGhlIGV4cHJlc3MgcHJvdmlzaW9ucyBvZiB0aGUgbGF3LiBGcm9tIHRoaXMgcHJvdmlzaW9uIHdoYXQgcGx1bmRlcmluZ3MsIHdoYXQKICAgICAgIGJhcmdhaW5pbmdzLCB3aGF0IGEgcmVndWxhciBhdWN0aW9uIG9mIGFsbCBsYXcgYW5kIG9mIGV2ZXJ5IG9uZSdzIGZvcnR1bmVzIG11c3QgaW5ldml0YWJseQogICAgICAgYXJpc2UhIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+IEV2ZW4gdGhhdCB3aGljaCBpbiB0aGUgZm9ybWVyIHBlcnQgb2YgdGhlIGxhdyBtYWRlCiAgICAgICBpbiB0aGUgY29uc3Vsc2hpcCBvZiBTdWxsYSBhbmQgUG9tcGVpdXMgd2FzIHN0cmljdGx5IGRlZmluZWQsIHRoYXQgdGhleSBoYXZlIG5vdyBsZWZ0IGF0IHRoZQogICAgICAgZGlzY3JldGlvbiBvZiB0aGVzZSBtZW4sIHdpdGhvdXQgYW55IHJlc3RyaWN0aW9uIG9yIGxpbWl0YXRpb24uIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3Ugbm90LCBtb3Jlb3Zlciwgc2VlIGhvdyBncmlldm91cywgaG93CiAgICAgICBmb3JtaWRhYmxlLCBhbmQgaG93IHByZWduYW50IHdpdGggZXh0b3J0aW9uIHRoYXQgaW52YXNpb24gb2YgdGhlIGRlY2VtdmlycyBhbmQgb2YgdGhlCiAgICAgICBtdWx0aXR1ZGUgdGhhdCB3aWxsIGZvbGxvdyBpbiB0aGVpciB0cmFpbiB3aWxsIGJlIHRvIGFsbCB0aGUgcHJvdmluY2VzLCBhbmQga2luZ2RvbXMsIGFuZAogICAgICAgZnJlZSBuYXRpb25zPyBJbiB0aGUgY2FzZSBvZiB0aG9zZSBtZW4gb24gd2hvbSB5b3UgaGF2ZSBjb25mZXJyZWQgbGlldXRlbmFuY2llcyBmb3IgdGhlIHNha2UKICAgICAgIG9mIGVudGVyaW5nIG9uIGluaGVyaXRhbmNlcywgdGhvdWdoIHRoZXkgd2VudCBhcyBwcml2YXRlIG1lbiwgb24gcHJpdmF0ZSBidXNpbmVzcywgaW52ZXN0ZWQKICAgICAgIHdpdGggbm8gZXhjZXNzaXZlIHBvd2VyIGFuZCBubyBzdXByZW1lIGF1dGhvcml0eSwgeW91IGhhdmUgc3RpbGwgaGVhcmQgaG93IGJ1cmRlbnNvbWUgdGhlaXIKICAgICAgIGFycml2YWwgaGFzIHByb3ZlZCB0byB5b3VyIGFsbGllcy4gPC90cmFuc2xhdGlvbj4="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IGFsYXJtIGFuZCB3aGF0CiAgICAgICBtaXNmb3J0dW5lLCB0aGVuIG11c3QgeW91IHRoaW5rIGFsbCBuYXRpb25zIGFyZSB0aHJlYXRlbmVkIHdpdGggYnkgdGhpcyBsYXcsIHdoZW4gZGVjZW12aXJzCiAgICAgICBhcmUgc2VudCBhbGwgb3ZlciB0aGUgd29ybGQgd2l0aCBzdXByZW1lIHBvd2VyLOKAlG1lbiBvZiB0aGUgZ3JlYXRlc3QgYXZhcmljZSwgYW5kCiAgICAgICB3aXRoIGFuIGluc2F0aWFibGUgZGVzaXJlIGZvciBldmVyeSBzb3J0IG9mIHByb3BlcnR5PyB3aG9zZSBhcnJpdmFsIHdpbGwgYmUgZ3JpZXZvdXMsIHdob3NlCiAgICAgICBmb3JjZXMgd2lsbCBiZSBmb3JtaWRhYmxlLCB3aG9zZSBqdWRpY2lhbCBhbmQgYXJiaXRyYXJ5IHBvd2VyIHdpbGwgYmUgYWJzb2x1dGVseSBpbnRvbGVyYWJsZS4KICAgICAgIEZvciB0aGV5IHdpbGwgaGF2ZSB0aGUgcG93ZXIgb2YgZGVjaWRpbmcgd2hhdGV2ZXIgdGhleSBwbGVhc2UgdG8gYmUgcHVibGljIHByb3BlcnR5LCBhbmQgb2YKICAgICAgIHNlbGxpbmcgd2hhdGV2ZXIgdGhleSBkZWNpZGUgdG8gYmUgc3VjaC4gRXZlbiB0aGF0IHZlcnkgdGhpbmcgd2hpY2ggY29uc2NpZW50aW91cyBtZW4gd2lsbAogICAgICAgbm90IGRvLCBuYW1lbHksIHRha2luZyBtb25leSB0byBhYnN0YWluIGZyb20gc2VsbGluZywgaXMgdG8gYmUgbWFkZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIC8+IGxhd2Z1bCBmb3IKICAgICAgIHRoZW0gdG8gZG8gYnkgdGhlIGV4cHJlc3MgcHJvdmlzaW9ucyBvZiB0aGUgbGF3LiBGcm9tIHRoaXMgcHJvdmlzaW9uIHdoYXQgcGx1bmRlcmluZ3MsIHdoYXQKICAgICAgIGJhcmdhaW5pbmdzLCB3aGF0IGEgcmVndWxhciBhdWN0aW9uIG9mIGFsbCBsYXcgYW5kIG9mIGV2ZXJ5IG9uZSdzIGZvcnR1bmVzIG11c3QgaW5ldml0YWJseQogICAgICAgYXJpc2UhIDwvdHJhbnNsYXRpb24+"
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gRXZlbiB0aGF0IHdoaWNoIGluIHRoZSBmb3JtZXIgcGVydCBvZiB0aGUgbGF3IG1hZGUKICAgICAgIGluIHRoZSBjb25zdWxzaGlwIG9mIFN1bGxhIGFuZCBQb21wZWl1cyB3YXMgc3RyaWN0bHkgZGVmaW5lZCwgdGhhdCB0aGV5IGhhdmUgbm93IGxlZnQgYXQgdGhlCiAgICAgICBkaXNjcmV0aW9uIG9mIHRoZXNlIG1lbiwgd2l0aG91dCBhbnkgcmVzdHJpY3Rpb24gb3IgbGltaXRhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['1.10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgb3JkZXJzIHRoZXNlIHNhbWUgZGVjZW12aXJzIHRvIGltcG9zZSBhbiBleGNlZWRpbmdseSBoZWF2eSB0YXggb24gYWxsIHRoZSBwdWJsaWMKICAgICAgIGRvbWFpbnMsIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBiZSBhYmxlIGJvdGggdG8gcmVsZWFzZSB3aGF0IGxhbmRzIHRoZXkgY2hvb3NlIGFuZCB0bwogICAgICAgY29uZmlzY2F0ZSB3aGF0IHRoZXkgY2hvb3NlLiBBbmQgaW4gdGhpcyBwcm9jZWVkaW5nIGl0IGlzIGhhcmQgdG8gc2VlIHdoZXRoZXIgdGhlaXIgc2V2ZXJpdHkKICAgICAgIHdpbGwgYmUgbW9yZSBjcnVlbCBvciB0aGVpciBraW5kbmVzcyBtb3JlIGdhaW5mdWwuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3dldmVyLCB0aGVyZSBhcmUgaW4gdGhlIHdob2xlIGxhdyB0d28gZXhjZXB0aW9ucywgbm90IHNvIG11Y2ggdW5qdXN0IGFzIHN1c3BpY2lvdXMuIEluCiAgICAgICBpbXBvc2luZyB0aGUgdGF4IGl0IG1ha2VzIGFuIGV4Y2VwdGlvbiB3aXRoIHJlc3BlY3QgdG8gdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+OyBhbmQgaW4gc2VsbGluZyB0aGUgbGFuZCwgaGUgZXhjZXB0cyB0aG9zZSB3aXRoIHJlc3BlY3QKICAgICAgIHRvIHdoaWNoIHRoZXJlIHdhcyBhbiBleHByZXNzIHByb3Zpc2lvbiBpbiB0aGUgdHJlYXR5LiBUaGVzZSBsYW5kcyBhcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+LCBpbiB0aGUgb2NjdXBhdGlvbiBvZiBIaWVtcHNhbC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBIZXJlIEkgYXNrLCBpZiBzdWZmaWNpZW50IHByb3RlY3Rpb24gaXMgYWZmb3JkZWQgdG8gSGllbXBzYWwgYnkgdGhlIHRyZWF0eQogICAgICAgYW5kIGlmIHRoZSBSZWNlbnRvcmljIGRpc3RyaWN0IGlzIHByaXZhdGUgcHJvcGVydHksIHdoYXQgd2FzIHVzZSBvZiBleGNlcHRpbmcgdGhlc2UgbGFuZHMgYnkKICAgICAgIG5hbWUgaW4gdGhlIGxhdz8gSWYgdGhhdCB0cmVhdHkgaXRzZWxmIGhhcyBzb21lIG9ic2N1cml0eSBpbiBpdCwgYW5kIGlmIHRoZSBSZWNlbnRvcmljIGlzCiAgICAgICBzb21ldGltZXMgc2FpZCB0byBiZSBwdWJsaWMgcHJvcGVydHksIHdobyBkbyB5b3Ugc3VwcG9zZSB3aWxsIGJlbGlldmUgdGhhdCB0aGVyZSBoYXZlIGJlZW4KICAgICAgIHR3byBpbnRlcmVzdHMgZm91bmQgaW4gdGhlIHdvcmxkLCBhbmQgb25seSB0d28sIHdoaWNoIGhlIHNwYXJlZCBmb3Igbm90aGluZz8gRG9lcyB0aGVyZQogICAgICAgYXBwZWFyIHRvIGhhdmUgYmVlbiBhbnkgY29pbiBpbiB0aGUgd29ybGQgc28gY2FyZWZ1bGx5IGhpZGRlbiB0aGF0IHRoZSBhcmNoaXRlY3RzIG9mIHRoaXMgbGF3CiAgICAgICBoYXZlIGZhaWxlZCB0byBzY2VudCBpdCBvdXQ/IFRoZXkgYXJlIGRyYWluaW5nIHRoZSBwcm92aW5jZXMsIHRoZSBmcmVlIGNpdGllcywgb3VyIGFsbGllcywKICAgICAgIG91ciBmcmllbmRzLCBhbmQgZXZlbiB0aGUga2luZ3Mgd2hvIGFyZSBjb25mZWRlcmF0ZSB3aXRoIHVzLiBUaGV5IGFyZSBsYXlpbmcgYmFuZHMgb24gdGhlCiAgICAgICByZXZlbnVlIG9mIHRoZSBSb21hbiBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzEyMiI+U2ljaWx5PC9wbGFjZU5hbWU+OyBhbmQgaW4gc2VsbGluZyB0aGUgbGFuZCwgaGUgZXhjZXB0cyB0aG9zZSB3aXRoIHJlc3BlY3QKICAgICAgIHRvIHdoaWNoIHRoZXJlIHdhcyBhbiBleHByZXNzIHByb3Zpc2lvbiBpbiB0aGUgdHJlYXR5LiBUaGVzZSBsYW5kcyBhcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+LCBpbiB0aGUgb2NjdXBhdGlvbiBvZiBIaWVtcHNhbC4gPC90cmFuc2xhdGlvbj4="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gSGVyZSBJIGFzaywgaWYgc3VmZmljaWVudCBwcm90ZWN0aW9uIGlzIGFmZm9yZGVkIHRvIEhpZW1wc2FsIGJ5IHRoZSB0cmVhdHkKICAgICAgIGFuZCBpZiB0aGUgUmVjZW50b3JpYyBkaXN0cmljdCBpcyBwcml2YXRlIHByb3BlcnR5LCB3aGF0IHdhcyB1c2Ugb2YgZXhjZXB0aW5nIHRoZXNlIGxhbmRzIGJ5CiAgICAgICBuYW1lIGluIHRoZSBsYXc/IElmIHRoYXQgdHJlYXR5IGl0c2VsZiBoYXMgc29tZSBvYnNjdXJpdHkgaW4gaXQsIGFuZCBpZiB0aGUgUmVjZW50b3JpYyBpcwogICAgICAgc29tZXRpbWVzIHNhaWQgdG8gYmUgcHVibGljIHByb3BlcnR5LCB3aG8gZG8geW91IHN1cHBvc2Ugd2lsbCBiZWxpZXZlIHRoYXQgdGhlcmUgaGF2ZSBiZWVuCiAgICAgICB0d28gaW50ZXJlc3RzIGZvdW5kIGluIHRoZSB3b3JsZCwgYW5kIG9ubHkgdHdvLCB3aGljaCBoZSBzcGFyZWQgZm9yIG5vdGhpbmc/IERvZXMgdGhlcmUKICAgICAgIGFwcGVhciB0byBoYXZlIGJlZW4gYW55IGNvaW4gaW4gdGhlIHdvcmxkIHNvIGNhcmVmdWxseSBoaWRkZW4gdGhhdCB0aGUgYXJjaGl0ZWN0cyBvZiB0aGlzIGxhdwogICAgICAgaGF2ZSBmYWlsZWQgdG8gc2NlbnQgaXQgb3V0PyBUaGV5IGFyZSBkcmFpbmluZyB0aGUgcHJvdmluY2VzLCB0aGUgZnJlZSBjaXRpZXMsIG91ciBhbGxpZXMsCiAgICAgICBvdXIgZnJpZW5kcywgYW5kIGV2ZW4gdGhlIGtpbmdzIHdobyBhcmUgY29uZmVkZXJhdGUgd2l0aCB1cy4gVGhleSBhcmUgbGF5aW5nIGJhbmRzIG9uIHRoZQogICAgICAgcmV2ZW51ZSBvZiB0aGUgUm9tYW4gcGVvcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGF0IGlzIG5vdCBlbm91Z2guIExpc3RlbuKAlGxpc3RlbiwgeW91IHdobywgYnkgdGhlIG1vc3QgaG9ub3VyYWJsZSB2b3RlIG9mIHRoZQogICAgICAgcGVvcGxlIGFuZCBzZW5hdGUsIGhhdmUgY29tbWFuZGVkIGFybWllcyBhbmQgY2FycmllZCBvbiB3YXJzOuKAlOKAnFdoYXRldmVyCiAgICAgICBoYXMgY29tZSBvciBzaGFsbCBjb21lIHRvIGFueW9uZSwgb2YgYm9vdHksIG9mIHNwb2lscywgb2YgbW9uZXkgZ2l2ZW4gZm9yIGdvbGQgY3Jvd25zLCB3aGljaAogICAgICAgaGFzIG5laXRoZXIgYmVlbiBzcGVudCBvbiBhIG1vbnVtZW50LCBub3IgcGFpZCBpbnRvIHRoZSB0cmVhc3VyeSwgaXMgYWxsIHRvIGJlIHBhaWQgb3ZlciB0bwogICAgICAgdGhlIGRlY2Vtdmlycy7igJ0gRnJvbSB0aGlzIGNoYXB0ZXIgdGhleSBleHBlY3QgYSBncmVhdCBkZWFsLiBUaGUgcHJvcG9zZSBieSB0aGVpcgogICAgICAgcmVzb2x1dGlvbiBhbiBpbnZlc3RpZ2F0aW9uIGludG8gdGhlIGFmZmFpcnMgb2YgYWxsIG91ciBnZW5lcmFscyBhbmQgYWxsIHRoZWlyIGhlaXJzLiBCdXQKICAgICAgIHRoZXkgZXhwZWN0IHRvIGdvIHRoZSBncmVhdGVzdCBxdWFudGl0eSBvZiBtb25leSBmcm9tIEZhdXN0dXMuIFRoYXQgY2F1c2Ugd2hpY2ggdGhlIGp1ZGdlcwogICAgICAgdXBvbiB0aGVpciBvYXRoIHdvdWxkIG5vdCB1bmRlcnRha2UsIHRoZXNlIGRlY2VtdmlycyBoYXZlIHVuZGVydGFrZW4uIFRoZXkgdGhpbmssIHBlcmhhcHMsCiAgICAgICB0aGF0IGl0IHdhcyBkZWNsaW5lZCBieSB0aGUganVkZ2VzLCBvbiBwdXJwb3NlIHRvIGJlIHJlc2VydmVkIHRvIHRoZW0uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhhdCwgdGhlIGxhdyBtb3N0IGNhcmVmdWxseSBwcm92aWRlcyBmb3IgdGhlIGZ1dHVyZSwgdGhhdCwgd2hhdGV2ZXIKICAgICAgIG1vbmV5IGFueSBnZW5lcmFsIHJlY2VpdmVzLCBoZSBpcyBhdCBvbmNlIHRvIHBheSBvdmVyIHRvIHRoZSBkZWNlbXZpcnMuIEJ1dCBoZXJlIGhlIGV4Y2VwdHMKICAgICAgIFBvbXBlaXVzLCB2ZXJ5IG11Y2ggYXMsIGFzIGl0IHNlZW1zIHRvIG1lLCBpbiB0aGF0IGxhdyBieSB3aGljaCBhbGllbnMgYXJlIHNlbnQgYXdheSBmcm9tCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBhbiBleGNlcHRpb24gaXMgbWFkZSBpbiBmYXZvdXIgb2YgR2xhdWNpcHB1cy4KICAgICAgIEZvciB0aGUgZWZmZWN0IG9mIHRoaXMgZXhjZXB0aW9uIGlzIG5vdCB0byBjb25mZXIgYSBraW5kbmVzcyBvbiBvbmUgbWFuLCBidXQgbWVyZWx5IHRvIHNhdmUKICAgICAgIG9uZSBtYW4gZnJvbSBpbmp1c3RpY2UuIEJ1dCB0aGUgbWFuIHdob3NlIHNwb2lscyB0aGUgbGF3IHRodXMgc3BhcmVzLCBoYXMgaGlzIHJldmVudWVzCiAgICAgICBpbnZhZGVkIGJ5IHRoZSBzYW1lIGxhdy4gRm9yIGl0IG9yZGVycyBhbGwgdGhlIG1vbmV5IHdoaWNoIGlzIHJlY2VpdmVkIGFmdGVyIG91ciBjb25zdWxzaGlwCiAgICAgICBmcm9tIHRoZSBuZXcgcmV2ZW51ZXMsIHRvIGJlIHBsYWNlZCB0byB0aGUgdXNlIG9mIHRoZSBkZWNlbXZpcnMuIEFzIGlmIHdlIGRpZCBub3Qgc2VlIHRoYXQKICAgICAgIHRoZXkgd2VyZSB0aGlua2luZyBvZiBzZWxsaW5nIHRoZSByZXZlbnVlcyB3aGljaCBDbmFldXMgUG9tcGVpdXMgaGFzIGFkZGVkIHRvIHRoZSB3ZWFsdGggb2YKICAgICAgIHRoZSBSb21hbiBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQWZ0ZXIgdGhhdCwgdGhlIGxhdyBtb3N0IGNhcmVmdWxseSBwcm92aWRlcyBmb3IgdGhlIGZ1dHVyZSwgdGhhdCwgd2hhdGV2ZXIKICAgICAgIG1vbmV5IGFueSBnZW5lcmFsIHJlY2VpdmVzLCBoZSBpcyBhdCBvbmNlIHRvIHBheSBvdmVyIHRvIHRoZSBkZWNlbXZpcnMuIEJ1dCBoZXJlIGhlIGV4Y2VwdHMKICAgICAgIFBvbXBlaXVzLCB2ZXJ5IG11Y2ggYXMsIGFzIGl0IHNlZW1zIHRvIG1lLCBpbiB0aGF0IGxhdyBieSB3aGljaCBhbGllbnMgYXJlIHNlbnQgYXdheSBmcm9tCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IGFuIGV4Y2VwdGlvbiBpcyBtYWRlIGluIGZhdm91ciBvZiBHbGF1Y2lwcHVzLgogICAgICAgRm9yIHRoZSBlZmZlY3Qgb2YgdGhpcyBleGNlcHRpb24gaXMgbm90IHRvIGNvbmZlciBhIGtpbmRuZXNzIG9uIG9uZSBtYW4sIGJ1dCBtZXJlbHkgdG8gc2F2ZQogICAgICAgb25lIG1hbiBmcm9tIGluanVzdGljZS4gQnV0IHRoZSBtYW4gd2hvc2Ugc3BvaWxzIHRoZSBsYXcgdGh1cyBzcGFyZXMsIGhhcyBoaXMgcmV2ZW51ZXMKICAgICAgIGludmFkZWQgYnkgdGhlIHNhbWUgbGF3LiBGb3IgaXQgb3JkZXJzIGFsbCB0aGUgbW9uZXkgd2hpY2ggaXMgcmVjZWl2ZWQgYWZ0ZXIgb3VyIGNvbnN1bHNoaXAKICAgICAgIGZyb20gdGhlIG5ldyByZXZlbnVlcywgdG8gYmUgcGxhY2VkIHRvIHRoZSB1c2Ugb2YgdGhlIGRlY2Vtdmlycy4gQXMgaWYgd2UgZGlkIG5vdCBzZWUgdGhhdAogICAgICAgdGhleSB3ZXJlIHRoaW5raW5nIG9mIHNlbGxpbmcgdGhlIHJldmVudWVzIHdoaWNoIENuYWV1cyBQb21wZWl1cyBoYXMgYWRkZWQgdG8gdGhlIHdlYWx0aCBvZgogICAgICAgdGhlIFJvbWFuIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['1.13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgbm93LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBtb25leSB3aGljaCBpcyB0byBiZWxvbmcgdG8gdGhlIGRlY2VtdmlycyBpcwogICAgICAgY29sbGVjdGVkIGFuZCBoZWFwZWQgdG9nZXRoZXIgZnJvbSBldmVyeSBwb3NzaWJsZSBzb3VyY2UsIGFuZCBieSBldmVyeSBpbWFnaW5hYmxlIGV4cGVkaWVudC4KICAgICAgIFRoZSB1bnBvcHVsYXJpdHkgYXJpc2luZyBmcm9tIHRoZWlyIHBvc3Nlc3Npb24gb2YgdGhpcyBsYXJnZSBzdW0gaXMgdG8gYmUgZGltaW5pc2hlZCwgZm9yIGl0CiAgICAgICBzaGFsbCBiZSBzcGVudCBpbiB0aGUgcHVyY2hhc2Ugb2YgbGFuZHMuIEV4Y2VlZGluZ2x5IHdlbGwuIFdobyB0aGVuIGlzIHRvIGJ1eSB0aG9zZSBsYW5kcz8KICAgICAgIFRoZXNlIHNhbWUgZGVjZW12aXJzLiBZb3UsIE8gUnVsbHVz4oCUIGZvciBJIHNheSBub3RoaW5nIG9mIHRoZSByZXN0IG9mCiAgICAgICB0aGVtLOKAlGFyZSB0byBidXkgd2hhdGV2ZXIgeW91IGxpa2U7IHRvIHNlbGwgd2hhdGV2ZXIgeW91IGxpa2UsIHRvIGJ1eSBvciBzZWxsIGF0CiAgICAgICB3aGF0ZXZlciBwcmljZSB5b3UgcGxlYXNlLiBGb3IgdGhhdCBhZG1pcmFibGUgbWFuIHRha2VzIGNhcmUgbm90IHRvIGJ1eSBvZiBhbnkgb25lIGFnYWluc3QKICAgICAgIGhpcyB3aWxsLiBBcyBpZiB3ZSBkaWQgbm90IHVuZGVyc3RhbmQgdGhhdCB0byBidXkgb2YgYSBtYW4gYWdhaW5zdCBoaXMgd2lsbCBpcyBhbiBpbmp1cmlvdXMKICAgICAgIHRoaW5nIHRvIGRvOyBidXQgdG8gYnV5IG9mIG9uZSB3aG8gaGFzIG5vIG9iamVjdGlvbiwgaXMgcHJvZml0YWJsZS4gSG93IG11Y2ggbGFuZCAodG8gc2F5CiAgICAgICBub3RoaW5nIG9mIG90aGVyIHBlb3BsZSkgd2lsbCB5b3VyIGZhdGhlci1pbi1sYXcgc2VsbCB5b3U/IGFuZCwgaWYgSSBoYXZlIGZvcm1lZCBhIHByb3BlcgogICAgICAgZXN0aW1hdGUgb2YgdGhlIGZhaXJuZXNzIG9mIGhpcyBkaXNwb3NpdGlvbiwgd2lsbCBoYXZlIG5vIG9iamVjdGlvbiB0byBzZWxsIHlvdT8gVGhlIHJlc3QKICAgICAgIHdpbGwgZG8gdGhlIHNhbWUgd2lsbGluZ2x5OyB0aGV5IHdpbGwgYmUgZ2xhZCB0byBleGNoYW5nZSB0aGUgdW5wb3B1bGFyaXR5IGF0dGFjaGluZyB0byB0aGUKICAgICAgIHBvc3Nlc3Npb24gb2YgbGFuZCBmb3IgbW9uZXk7IHRvIHJlY2VpdmUgd2hhdGV2ZXIgdGhleSBkZW1hbmQsIGFuZCB0byBwYXJ0IHdpdGggd2hhdCB0aGV5IGNhbgogICAgICAgc2NhcmNlbHkgcmV0YWluLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyBqdXN0IHNlZSB0aGUgYm91bmRsZXNzIGFuZAogICAgICAgaW50b2xlcmFibGUgbGljZW50aW91c25lc3Mgb2YgYWxsIHRoZXNlIG1lYXN1cmVzLiBNb25leSBoYXMgYmVlbiBjb2xsZWN0ZWQgZm9yIHRoZSBwdXJjaGFzZQogICAgICAgb2YgbGFuZHMuIE1vcmUtb3ZlciwgdGhlIGxhbmRzIGFyZSBub3QgdG8gYmUgYm91Z2h0IG9mIHBlb3BsZSBhZ2FpbnN0IHRoZWlyIHdpbGwuIFN1cHBvc2UgYWxsCiAgICAgICB0aGUgb3duZXJzIGFncmVlIG5vdCB0byBzZWxsLCB3aGF0IGlzIHRvIGhhcHBlbiB0aGVuPyBJcyB0aGUgbW9uZXkgdG8gYmUgcmVmdW5kZWQ/IFRoYXQKICAgICAgIGNhbm5vdCA8cGIgbj0iMjA4IiAvPiBiZS4gSXMgaXQgdG8gYmUgY29sbGVjdGVkPyBUaGUgbGF3IGZvcmJpZHMgdGhhdC4gSG93ZXZlciwgbGV0IHRoYXQgcGFzcy4KICAgICAgIFRoZXJlIGlzIG5vdGhpbmcgd2hpY2ggY2Fubm90IGJlIGJvdWdodCwgaWYgeW91IHdpbGwgb25seSBnaXZlIGFzIG11Y2ggYXMgdGhlIHNlbGxlciBhc2tzLgogICAgICAgTGV0IHVzIHBsdW5kZXIgdGhlIHdob2xlIHdvcmxkLCBsZXQgdXMgc2VsbCBvdXIgcmV2ZW51ZXMsIGxldCB1cyBleGhhdXN0IHRoZSB0cmVhc3VyeSwgaW4KICAgICAgIG9yZGVyIHRoYXQsIHdoZXRoZXIgbWVuIGJlIG93bmVycyBvZiB3ZWFsdGgsIG9yIG9mIG9kaXVtLCBvciBldmVuIG9mIGEgcGVzdGlsZW5jZSwgc3RpbGwKICAgICAgIHRoZWlyIGxhbmRzIG1heSBiZSBib3VnaHQuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gTm93IGp1c3Qgc2VlIHRoZSBib3VuZGxlc3MgYW5kCiAgICAgICBpbnRvbGVyYWJsZSBsaWNlbnRpb3VzbmVzcyBvZiBhbGwgdGhlc2UgbWVhc3VyZXMuIE1vbmV5IGhhcyBiZWVuIGNvbGxlY3RlZCBmb3IgdGhlIHB1cmNoYXNlCiAgICAgICBvZiBsYW5kcy4gTW9yZS1vdmVyLCB0aGUgbGFuZHMgYXJlIG5vdCB0byBiZSBib3VnaHQgb2YgcGVvcGxlIGFnYWluc3QgdGhlaXIgd2lsbC4gU3VwcG9zZSBhbGwKICAgICAgIHRoZSBvd25lcnMgYWdyZWUgbm90IHRvIHNlbGwsIHdoYXQgaXMgdG8gaGFwcGVuIHRoZW4/IElzIHRoZSBtb25leSB0byBiZSByZWZ1bmRlZD8gVGhhdAogICAgICAgY2Fubm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwOCIgLz4gYmUuIElzIGl0IHRvIGJlIGNvbGxlY3RlZD8gVGhlIGxhdyBmb3JiaWRzIHRoYXQuIEhvd2V2ZXIsIGxldCB0aGF0IHBhc3MuCiAgICAgICBUaGVyZSBpcyBub3RoaW5nIHdoaWNoIGNhbm5vdCBiZSBib3VnaHQsIGlmIHlvdSB3aWxsIG9ubHkgZ2l2ZSBhcyBtdWNoIGFzIHRoZSBzZWxsZXIgYXNrcy4KICAgICAgIExldCB1cyBwbHVuZGVyIHRoZSB3aG9sZSB3b3JsZCwgbGV0IHVzIHNlbGwgb3VyIHJldmVudWVzLCBsZXQgdXMgZXhoYXVzdCB0aGUgdHJlYXN1cnksIGluCiAgICAgICBvcmRlciB0aGF0LCB3aGV0aGVyIG1lbiBiZSBvd25lcnMgb2Ygd2VhbHRoLCBvciBvZiBvZGl1bSwgb3IgZXZlbiBvZiBhIHBlc3RpbGVuY2UsIHN0aWxsCiAgICAgICB0aGVpciBsYW5kcyBtYXkgYmUgYm91Z2h0LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcyB0byBoYXBwZW4gdGhlbj8gd2hhdCBzb3J0IG9mIG1lbiBhcmUgdG8gYmUKICAgICAgIGVzdGFibGlzaGVkIGFzIHNldHRsZXJzIGluIHRob3NlIGxhbmRzPyB3aGF0IGlzIHRvIGJlIHRoZSBzeXN0ZW0gYW5kIHBsYW4gYWRvcHRlZCBpbiB0aGUKICAgICAgIHdob2xlIGJ1c2luZXNzPyBDb2xvbmllcywgc2F5IHRoZSBsYXcsIHNoYWxsIGJlIGxlZCB0aGl0aGVyLCBhbmQgc2V0dGxlZCB0aGVyZS4gSG93IG1hbnk/IE9mCiAgICAgICB3aGF0IGNsYXNzIG9mIG1lbj8gV2hlcmUgYXJlIHRoZXkgdG8gYmUgZXN0YWJsaXNoZWQ/IEZvciB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSB0aGF0CiAgICAgICBhbGwgdGhlc2UgdGhpbmdzIGhhdmUgZ290IHRvIGJlIGNvbnNpZGVyZWQgd2hlbiB3ZSBhcmUgdGFsa2luZyBvZiBjb2xvbmllcz8gRGlkIHlvdSB0aGluaywgTwogICAgICAgUnVsbHVzLCB0aGF0IHdlIHdvdWxkIGdpdmUgdXAgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB0bwogICAgICAgeW91IGFuZCB0byB0aG9zZSBjb250cml2ZXJzIG9mIGV2ZXJ5dGhpbmcgd2hvbSB5b3UgaGF2ZSBzZXQgdXAsIGluIGFuIHVuYXJtZWQgYW5kIGRlZmVuY2VsZXNzCiAgICAgICBzdGF0ZSwgZm9yIHlvdSB0byBzdHJlbmd0aGVuIGl0IHdpdGggZ2Fycmlzb25zIGFmdGVyd2FyZHM/IGZvciB5b3UgdG8gb2NjdXB5IGl0IHdpdGgKICAgICAgIGNvbG9uaWVzPyB0byBob2xkIGl0IGJvdW5kIGFuZCBmZXR0ZXJlZCBieSBldmVyeSBzb3J0IG9mIGNoYWluPyBGb3Igd2hlcmUgaXMgdGhlcmUgYW55IGNsYXVzZQogICAgICAgdG8gcHJldmVudCB5b3VyIGVzdGFibGlzaGluZyBhIGNvbG9ueSBvbiB0aGUgSmFuaWN1bGFuIEhpbGw/IG9yIGZyb20gb3BwcmVzc2luZyBhbmQKICAgICAgIG92ZXJ3aGVsbWluZyB0aGlzIGNpdHkgd2l0aCBzb21lIG90aGVyIGNpdHk/IFdlIHdpbGwgbm90IGRvIHNvLCBzYXlzIGhlLiBJbiB0aGUgZmlyc3QgcGxhY2UsCiAgICAgICBJIGRvbid0IGtub3cgdGhhdDsgaW4gdGhlIG5leHQgcGxhY2UsIEkgYW0gYWZyYWlkIG9mIHlvdTsgbGFzdGx5LCBJIHdpbGwgbmV2ZXIgcGVybWl0IG91cgogICAgICAgc2FmZXR5IHRvIGRlcGVuZCBvbiB5b3VyIGtpbmRuZXNzIHJhdGhlciB0aGFuIG9uIG91ciBvd24gcHJ1ZGVuY2UuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcyB0byBoYXBwZW4gdGhlbj8gd2hhdCBzb3J0IG9mIG1lbiBhcmUgdG8gYmUKICAgICAgIGVzdGFibGlzaGVkIGFzIHNldHRsZXJzIGluIHRob3NlIGxhbmRzPyB3aGF0IGlzIHRvIGJlIHRoZSBzeXN0ZW0gYW5kIHBsYW4gYWRvcHRlZCBpbiB0aGUKICAgICAgIHdob2xlIGJ1c2luZXNzPyBDb2xvbmllcywgc2F5IHRoZSBsYXcsIHNoYWxsIGJlIGxlZCB0aGl0aGVyLCBhbmQgc2V0dGxlZCB0aGVyZS4gSG93IG1hbnk/IE9mCiAgICAgICB3aGF0IGNsYXNzIG9mIG1lbj8gV2hlcmUgYXJlIHRoZXkgdG8gYmUgZXN0YWJsaXNoZWQ/IEZvciB3aG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSB0aGF0CiAgICAgICBhbGwgdGhlc2UgdGhpbmdzIGhhdmUgZ290IHRvIGJlIGNvbnNpZGVyZWQgd2hlbiB3ZSBhcmUgdGFsa2luZyBvZiBjb2xvbmllcz8gRGlkIHlvdSB0aGluaywgTwogICAgICAgUnVsbHVzLCB0aGF0IHdlIHdvdWxkIGdpdmUgdXAgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHRvCiAgICAgICB5b3UgYW5kIHRvIHRob3NlIGNvbnRyaXZlcnMgb2YgZXZlcnl0aGluZyB3aG9tIHlvdSBoYXZlIHNldCB1cCwgaW4gYW4gdW5hcm1lZCBhbmQgZGVmZW5jZWxlc3MKICAgICAgIHN0YXRlLCBmb3IgeW91IHRvIHN0cmVuZ3RoZW4gaXQgd2l0aCBnYXJyaXNvbnMgYWZ0ZXJ3YXJkcz8gZm9yIHlvdSB0byBvY2N1cHkgaXQgd2l0aAogICAgICAgY29sb25pZXM/IHRvIGhvbGQgaXQgYm91bmQgYW5kIGZldHRlcmVkIGJ5IGV2ZXJ5IHNvcnQgb2YgY2hhaW4/IEZvciB3aGVyZSBpcyB0aGVyZSBhbnkgY2xhdXNlCiAgICAgICB0byBwcmV2ZW50IHlvdXIgZXN0YWJsaXNoaW5nIGEgY29sb255IG9uIHRoZSBKYW5pY3VsYW4gSGlsbD8gb3IgZnJvbSBvcHByZXNzaW5nIGFuZAogICAgICAgb3ZlcndoZWxtaW5nIHRoaXMgY2l0eSB3aXRoIHNvbWUgb3RoZXIgY2l0eT8gV2Ugd2lsbCBub3QgZG8gc28sIHNheXMgaGUuIEluIHRoZSBmaXJzdCBwbGFjZSwKICAgICAgIEkgZG9uJ3Qga25vdyB0aGF0OyBpbiB0aGUgbmV4dCBwbGFjZSwgSSBhbSBhZnJhaWQgb2YgeW91OyBsYXN0bHksIEkgd2lsbCBuZXZlciBwZXJtaXQgb3VyCiAgICAgICBzYWZldHkgdG8gZGVwZW5kIG9uIHlvdXIga2luZG5lc3MgcmF0aGVyIHRoYW4gb24gb3VyIG93biBwcnVkZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['1.16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBhcyB5b3Ugd2FudGVkIHRvIGZpbGwgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggeW91cgogICAgICAgY29sb25pZXMsIGRpZCB5b3UgdGhpbmsgdGhhdCBub3Qgb25lIG9mIHVzIHdvdWxkIHVuZGVyc3RhbmQgd2hhdCBzb3J0IG9mIGEgbWVhc3VyZSB0aGF0IHdhcz8KICAgICAgIEZvciBpdCBpcyB3cml0dGVuLCDigJxUaGUgZGVjZW12aXJzIG1heSBsZWFkIHdoYXRldmVyIHNldHRsZXJzIHRoZXkgY2hvb3NlIGludG8KICAgICAgIHdoYXRldmVyIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyB0aGV5IGxpa2U7IGFuZCB0aGV5IG1heSBhc3NpZ24gdGhlbSBsYW5kcyBpbiB3aGF0ZXZlcgogICAgICAgcGxhY2VzIHRoZXkgcGxlYXNlO+KAnSBzbyB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBvY2N1cGllZCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBzb2xkaWVycywgeW91IG1heSBoYXZlIG5vIGhvcGUgbGVmdCB5b3UsIEkKICAgICAgIHdpbGwgbm90IHNheSBvZiByZXRhaW5pbmcgeW91ciBkaWduaXR5LCBidXQgbm9uZSBldmVuIG9mIHJlY292ZXJpbmcgeW91ciBsaWJlcnR5LiBBbmQgdGhlc2UKICAgICAgIHRoaW5ncywgaW5kZWVkLCBJIG9iamVjdCB0byBvbiBzdXNwaWNpb24gYW5kIGZyb20gY29uamVjdHVyZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgbm93IGFsbCBtaXN0YWtlIG9uIGFueSBzaWRlIHNoYWxsIGJlIHJlbW92ZWQ7IG5vdyB0aGV5IHNoYWxsIHNob3cKICAgICAgIG9wZW5seSB0aGF0IHRoZSB2ZXJ5IG5hbWUgb2YgdGhpcyByZXB1YmxpYywgYW5kIHRoZSBzaXR1YXRpb24gb2YgdGhpcyBjaXR5IGFuZCBlbXBpcmUsIHRoYXQKICAgICAgIGV2ZW4gdGhpcyB2ZXJ5IHRlbXBsZSBvZiB0aGUgZ29vZCBhbmQgZ3JlYXQgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48L3BlcnNOYW1lPiwKICAgICAgIGFuZCB0aGlzIGNpdGFkZWwgb2YgYWxsIG5hdGlvbnMsIGlzIG9kaW91cyB0byB0aGVtLiBUaGV5IHdpc2ggc2V0dGxlcnMgdG8gYmUgY29uZHVjdGVkIHRvCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPi4gVGhleSB3aXNoIGFnYWluIHRvIG9wcG9zZSB0aGF0IGNpdHkgdG8KICAgICAgIHRoaXMgY2l0eS4gVGhleSB0aGluayBvZiByZW1vdmluZyBhbGwgdGhlaXIgcmljaGVzIHRoaXRoZXIgb2YgdHJhbnNmZXJyaW5nIHRoaXRoZXIgdGhlIG5hbWUKICAgICAgIG9mIHRoZSBlbXBpcmUuIFRoYXQgcGxhY2Ugd2hpY2gsIGJlY2F1c2Ugb2YgdGhlIGZlcnRpbGl0eSBvZiBpdHMgbGFuZHMgYW5kIGl0cyBhYnVuZGFuY2Ugb2YKICAgICAgIGV2ZXJ5IHNvcnQgb2YgcHJvZHVjdGlvbiwgaXMgc2FpZCB0byBiZSB0aGUgcGFyZW50IG9mIHByaWRlIGFuZCBjcnVlbHR54oCUaW4gdGhhdCBvdXIKICAgICAgIGNvbG9uaXN0cywgbWVuIHNlbGVjdGVkIGFzIGZpdCBmb3IgZXZlcnkgaW1hZ2luYWJsZSBwdXJwb3NlLCB3aWxsIGJlIHNldHRsZWQgYnkgdGhlCiAgICAgICBkZWNlbXZpcnMuIE5vIGRvdWJ0LCBpbiB0aGF0IGNpdHksIGluIHdoaWNoIG1lbiwgdGhvdWdoIGJvcm4gdG8gdGhlIGVuam95bWVudCBvZiBhbmNpZW50CiAgICAgICBkaWduaXRpZXMgYW5kIGhlcmVkaXRhcnkgZm9ydHVuZXMsIHdlcmUgc3RpbGwgdW5hYmxlIHRvIGJlYXIgd2l0aCBtb2RlcmF0aW9uIHRoZSBsdXh1cmlhbmNlCiAgICAgICBvZiB0aGVpciBmb3J0dW5lcywgeW91ciBzYXRlbGxpdGVzIHdpbGwgYmUgYWJsZSB0byByZXN0cmFpbiB0aGVpciBpbnNvbGVuY2UgYW5kIHRvIGJlaGF2ZQogICAgICAgd2l0aCBtb2Rlc3R5LiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBPdXIgYW5jZXN0b3JzIHJlbW92ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoZSBtYWdpc3RyYXRlcywgdGhlIHNlbmF0ZSwgdGhlIGdlbmVyYWwgY291bmNpbCwgYW5kCiAgICAgICBhbGwgdGhlIGVuc2lnbnMgb2YgdGhlIHJlcHVibGljLCBhbmQgbGVmdCBub3RoaW5nIHRoZXJlIGV4Y2VwdCB0aGUgYmFyZSBuYW1lIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT47IG5vdCBvdXQgb2YgY3J1ZWx0eSwgKGZvciB3aGF0IHdhcyBldmVyIG1vcmUgbWVyY2lmdWwKICAgICAgIHRoYW4gdGhleSB3ZXJlPyBmb3IgdGhleSBvZnRlbiByZXN0b3JlZCB0aGVpciBwcm9wZXJ0eSBldmVuIHRvIGZvcmVpZ24gZW5lbWllcyB3aGVuIHRoZXkgaGFkCiAgICAgICBiZWVuIHN1YmR1ZWQ7KSBidXQgb3V0IG9mIHdpc2RvbTsgYmVjYXVzZSB0aGV5IHNhdyB0aGF0IGlmIGFueSB0cmFjZSBvZiB0aGUgcmVwdWJsaWMgcmVtYWluZWQKICAgICAgIHdpdGhpbiB0aG9zZSB3YWxscywgdGhlIGNpdHkgaXRzZWxmIG1pZ2h0IGJlIGFibGUgdG8gYWZmb3JkIGEgaG9tZSB0byBzdXByZW1lIHBvd2VyLiBBbmQKICAgICAgIHdvdWxkIG5vdCB5b3UgdG9vIHNlZSBob3cgbWlzY2hpZXZvdXMgdGhlc2UgdGhpbmdzIHdlcmUsIGlmIHlvdSB3ZXJlIG5vdCBkZXNpcm91cyBvZgogICAgICAgb3ZlcnR1cm5pbmcgdGhlIHJlcHVibGljLCBhbmQgb2YgcHJvY3VyaW5nIGEgbmV3IHNvcnQgb2YgcG93ZXIgZm9yIHlvdXIgb3duIHNlbHZlcz8KICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggeW91cgogICAgICAgY29sb25pZXMsIGRpZCB5b3UgdGhpbmsgdGhhdCBub3Qgb25lIG9mIHVzIHdvdWxkIHVuZGVyc3RhbmQgd2hhdCBzb3J0IG9mIGEgbWVhc3VyZSB0aGF0IHdhcz8KICAgICAgIEZvciBpdCBpcyB3cml0dGVuLCDigJxUaGUgZGVjZW12aXJzIG1heSBsZWFkIHdoYXRldmVyIHNldHRsZXJzIHRoZXkgY2hvb3NlIGludG8KICAgICAgIHdoYXRldmVyIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyB0aGV5IGxpa2U7IGFuZCB0aGV5IG1heSBhc3NpZ24gdGhlbSBsYW5kcyBpbiB3aGF0ZXZlcgogICAgICAgcGxhY2VzIHRoZXkgcGxlYXNlO+KAnSBzbyB0aGF0LCB3aGVuIHRoZXkgaGF2ZSBvY2N1cGllZCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBzb2xkaWVycywgeW91IG1heSBoYXZlIG5vIGhvcGUgbGVmdCB5b3UsIEkKICAgICAgIHdpbGwgbm90IHNheSBvZiByZXRhaW5pbmcgeW91ciBkaWduaXR5LCBidXQgbm9uZSBldmVuIG9mIHJlY292ZXJpbmcgeW91ciBsaWJlcnR5LiBBbmQgdGhlc2UKICAgICAgIHRoaW5ncywgaW5kZWVkLCBJIG9iamVjdCB0byBvbiBzdXNwaWNpb24gYW5kIGZyb20gY29uamVjdHVyZS4gPC90cmFuc2xhdGlvbj4="
translation['1.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyBhbGwgbWlzdGFrZSBvbiBhbnkgc2lkZSBzaGFsbCBiZSByZW1vdmVkOyBub3cgdGhleSBzaGFsbCBzaG93CiAgICAgICBvcGVubHkgdGhhdCB0aGUgdmVyeSBuYW1lIG9mIHRoaXMgcmVwdWJsaWMsIGFuZCB0aGUgc2l0dWF0aW9uIG9mIHRoaXMgY2l0eSBhbmQgZW1waXJlLCB0aGF0CiAgICAgICBldmVuIHRoaXMgdmVyeSB0ZW1wbGUgb2YgdGhlIGdvb2QgYW5kIGdyZWF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdXBpdGVyPC9zdXJuYW1lPjwvcGVyc05hbWU+LAogICAgICAgYW5kIHRoaXMgY2l0YWRlbCBvZiBhbGwgbmF0aW9ucywgaXMgb2Rpb3VzIHRvIHRoZW0uIFRoZXkgd2lzaCBzZXR0bGVycyB0byBiZSBjb25kdWN0ZWQgdG8KICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+SnVwaXRlcjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4uIFRoZXkgd2lzaCBhZ2FpbiB0byBvcHBvc2UgdGhhdCBjaXR5IHRvCiAgICAgICB0aGlzIGNpdHkuIFRoZXkgdGhpbmsgb2YgcmVtb3ZpbmcgYWxsIHRoZWlyIHJpY2hlcyB0aGl0aGVyIG9mIHRyYW5zZmVycmluZyB0aGl0aGVyIHRoZSBuYW1lCiAgICAgICBvZiB0aGUgZW1waXJlLiBUaGF0IHBsYWNlIHdoaWNoLCBiZWNhdXNlIG9mIHRoZSBmZXJ0aWxpdHkgb2YgaXRzIGxhbmRzIGFuZCBpdHMgYWJ1bmRhbmNlIG9mCiAgICAgICBldmVyeSBzb3J0IG9mIHByb2R1Y3Rpb24sIGlzIHNhaWQgdG8gYmUgdGhlIHBhcmVudCBvZiBwcmlkZSBhbmQgY3J1ZWx0eeKAlGluIHRoYXQgb3VyCiAgICAgICBjb2xvbmlzdHMsIG1lbiBzZWxlY3RlZCBhcyBmaXQgZm9yIGV2ZXJ5IGltYWdpbmFibGUgcHVycG9zZSwgd2lsbCBiZSBzZXR0bGVkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiBObyBkb3VidCwgaW4gdGhhdCBjaXR5LCBpbiB3aGljaCBtZW4sIHRob3VnaCBib3JuIHRvIHRoZSBlbmpveW1lbnQgb2YgYW5jaWVudAogICAgICAgZGlnbml0aWVzIGFuZCBoZXJlZGl0YXJ5IGZvcnR1bmVzLCB3ZXJlIHN0aWxsIHVuYWJsZSB0byBiZWFyIHdpdGggbW9kZXJhdGlvbiB0aGUgbHV4dXJpYW5jZQogICAgICAgb2YgdGhlaXIgZm9ydHVuZXMsIHlvdXIgc2F0ZWxsaXRlcyB3aWxsIGJlIGFibGUgdG8gcmVzdHJhaW4gdGhlaXIgaW5zb2xlbmNlIGFuZCB0byBiZWhhdmUKICAgICAgIHdpdGggbW9kZXN0eS4gPC90cmFuc2xhdGlvbj4="
translation['1.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gT3VyIGFuY2VzdG9ycyByZW1vdmVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoZSBtYWdpc3RyYXRlcywgdGhlIHNlbmF0ZSwgdGhlIGdlbmVyYWwgY291bmNpbCwgYW5kCiAgICAgICBhbGwgdGhlIGVuc2lnbnMgb2YgdGhlIHJlcHVibGljLCBhbmQgbGVmdCBub3RoaW5nIHRoZXJlIGV4Y2VwdCB0aGUgYmFyZSBuYW1lIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjsgbm90IG91dCBvZiBjcnVlbHR5LCAoZm9yIHdoYXQgd2FzIGV2ZXIgbW9yZSBtZXJjaWZ1bAogICAgICAgdGhhbiB0aGV5IHdlcmU/IGZvciB0aGV5IG9mdGVuIHJlc3RvcmVkIHRoZWlyIHByb3BlcnR5IGV2ZW4gdG8gZm9yZWlnbiBlbmVtaWVzIHdoZW4gdGhleSBoYWQKICAgICAgIGJlZW4gc3ViZHVlZDspIGJ1dCBvdXQgb2Ygd2lzZG9tOyBiZWNhdXNlIHRoZXkgc2F3IHRoYXQgaWYgYW55IHRyYWNlIG9mIHRoZSByZXB1YmxpYyByZW1haW5lZAogICAgICAgd2l0aGluIHRob3NlIHdhbGxzLCB0aGUgY2l0eSBpdHNlbGYgbWlnaHQgYmUgYWJsZSB0byBhZmZvcmQgYSBob21lIHRvIHN1cHJlbWUgcG93ZXIuIEFuZAogICAgICAgd291bGQgbm90IHlvdSB0b28gc2VlIGhvdyBtaXNjaGlldm91cyB0aGVzZSB0aGluZ3Mgd2VyZSwgaWYgeW91IHdlcmUgbm90IGRlc2lyb3VzIG9mCiAgICAgICBvdmVydHVybmluZyB0aGUgcmVwdWJsaWMsIGFuZCBvZiBwcm9jdXJpbmcgYSBuZXcgc29ydCBvZiBwb3dlciBmb3IgeW91ciBvd24gc2VsdmVzPwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB3aGF0IGlzIHRoZXJlIHRoYXQgaXMgZXNwZWNpYWxseSB0byBiZSBndWFyZGVkIGFnYWluc3QgaW4gdGhlIGVzdGFibGlzaG1lbnQgb2YKICAgICAgIGNvbG9uaWVzPyBJZiBpdCBiZSBsdXh1cnnigJQ8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIGNvcnJ1cHRlZCBIYW5uaWJhbCBoaW1zZWxmLiBJZiBpdCBiZSBwcmlkZeKAlHRoYXQgYXBwZWFycyBmcm9tIHRoZSBnZW5lcmFsIGFycm9nYW5jZQogICAgICAgb2YgdGhlIENhbXBhbmlhbnMgdG8gYmUgaW5uYXRlIHRoZXJlLiBJZiB3ZSB3YW50IGEgYnVsd2FyayBmb3IgdGhlIHN0YXRl4oCUdGhlbiBJCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIG5vdCBwbGFjZWQgaW4gZnJvbnQgb2YgdGhpcwogICAgICAgY2l0eSBhcyBhbiBvdXR3b3JrLCBidXQgaXMgb3Bwb3NlZCB0byBpdCBhcyBhbiBlbmVteS4gQnV0IGhvdyBpcyBpdCBhcm1lZD8gTyB5ZSBpbW1vcnRhbAogICAgICAgZ29kcyEgRm9yIGluIHRoZSBQdW5pYyB3YXIgYWxsIHRoZSBwb3dlciB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYWQsIGl0IGhhZCBmcm9tIGl0cyB1bmFzc2lzdGVkIHJlc291cmNlczsgYnV0IG5vdywgYWxsIHRoZSBjaXRpZXMgd2hpY2gKICAgICAgIGFyZSBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHdpbGwgYmUgb2NjdXBpZWQgYnkgY29sb25pc3RzLCBieQogICAgICAgdGhlIG9yZGVyIG9mIHRoZXNlIHNhbWUgZGVjZW12aXJzLiBGb3IsIGZvciB0aGlzIHJlYXNvbiwgdGhlIGxhdyBpdHNlbGYgYWxsb3dzLAogICAgICAg4oCcdGhhdCB0aGUgZGVjZW12aXJzIG1heSBsZWFkIHdob2V2ZXIgdGhleSBwbGVhc2UgYXMgc2V0dGxlcnMgdG8gZXZlcnkgdG93biB3aGljaAogICAgICAgdGhleSBjaG9vc2Uu4oCdIEFuZCBpdCBvcmRlcnMgdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIHRoYXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwNDcwMDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTA0NzAwMiI+U3RlbGxhPC9wbGFjZU5hbWU+LCB0byBiZSBkaXZpZGVkIGFtb25nIHRoZXNlIGNvbG9uaXN0cy4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIGNvcnJ1cHRlZCBIYW5uaWJhbCBoaW1zZWxmLiBJZiBpdCBiZSBwcmlkZeKAlHRoYXQgYXBwZWFycyBmcm9tIHRoZSBnZW5lcmFsIGFycm9nYW5jZQogICAgICAgb2YgdGhlIENhbXBhbmlhbnMgdG8gYmUgaW5uYXRlIHRoZXJlLiBJZiB3ZSB3YW50IGEgYnVsd2FyayBmb3IgdGhlIHN0YXRl4oCUdGhlbiBJCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIG5vdCBwbGFjZWQgaW4gZnJvbnQgb2YgdGhpcwogICAgICAgY2l0eSBhcyBhbiBvdXR3b3JrLCBidXQgaXMgb3Bwb3NlZCB0byBpdCBhcyBhbiBlbmVteS4gQnV0IGhvdyBpcyBpdCBhcm1lZD8gTyB5ZSBpbW1vcnRhbAogICAgICAgZ29kcyEgRm9yIGluIHRoZSBQdW5pYyB3YXIgYWxsIHRoZSBwb3dlciB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYWQsIGl0IGhhZCBmcm9tIGl0cyB1bmFzc2lzdGVkIHJlc291cmNlczsgYnV0IG5vdywgYWxsIHRoZSBjaXRpZXMgd2hpY2gKICAgICAgIGFyZSBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHdpbGwgYmUgb2NjdXBpZWQgYnkgY29sb25pc3RzLCBieQogICAgICAgdGhlIG9yZGVyIG9mIHRoZXNlIHNhbWUgZGVjZW12aXJzLiBGb3IsIGZvciB0aGlzIHJlYXNvbiwgdGhlIGxhdyBpdHNlbGYgYWxsb3dzLAogICAgICAg4oCcdGhhdCB0aGUgZGVjZW12aXJzIG1heSBsZWFkIHdob2V2ZXIgdGhleSBwbGVhc2UgYXMgc2V0dGxlcnMgdG8gZXZlcnkgdG93biB3aGljaAogICAgICAgdGhleSBjaG9vc2Uu4oCdIEFuZCBpdCBvcmRlcnMgdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIHRoYXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwNDcwMDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTA0NzAwMiI+U3RlbGxhPC9wbGFjZU5hbWU+LCB0byBiZSBkaXZpZGVkIGFtb25nIHRoZXNlIGNvbG9uaXN0cy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9InNlY3Rpb24iIC8+IEkgZG8gbm90IGNvbXBsYWluIG9mIHRoZSBkaW1pbnV0aW9uIG9mIHRoZSByZXZlbnVlczsgbm9yCiAgICAgICBvZiB0aGUgd2lja2VkbmVzcyBvZiB0aGlzIGxvc3MgYW5kIGluanVyeS4gSSBwYXNzIG92ZXIgdGhvc2UgdGhpbmdzIHdoaWNoIHRoZXJlIGlzIG5vIG9uZSB3aG8KICAgICAgIGNhbm5vdCBjb21wbGFpbiBvZiB3aXRoIHRoZSBncmVhdGVzdCB3ZWlnaHQgYW5kIHRoZSBncmVhdGVzdCB0cnV0aDsgdGhhdCB3ZSBoYXZlIG5vdCBiZWVuCiAgICAgICBhYmxlIHRvIHByZXNlcnZlIHRoZSBtb3N0IGltcG9ydGFudCBwYXJ0IG9mIHRoZSBwdWJsaWMgcGF0cmltb255IG9mIHRoZSBzdGF0ZSwgdGhhdCB3aGljaCBoYXMKICAgICAgIGJlZW4gdG8gdXMgdGhlIHNvdXJjZSBvZiBvdXIgc3VwcGx5IG9mIGNvcm4sIG91ciBncmFuYXJ5IGluIHRpbWUgb2Ygd2FyLCBvdXIgcmV2ZW51ZSBwbGFjZWQKICAgICAgIHVuZGVyIGN1c3RvZHkgb2YgdGhlIHNlYWxzIGFuZCBib2x0cyBvZiB0aGUgcmVwdWJsaWM7IHRoYXQgd2UsIGluIHNob3J0LCBoYXZlIGFiYW5kb25lZCB0aGF0CiAgICAgICBkaXN0cmljdCB0byBQdWJsaXVzIFJ1bGx1cywgd2hpY2ggaXRzZWxmIGJ5IGl0cyBvd24gcmVzb3VyY2VzIGhhZCByZXNpc3RlZCBib3RoIHRoZSBhYnNvbHV0ZQogICAgICAgcG93ZXIgb2YgU3VsbGEsIGFuZCB0aGUgY29ycnVwdGluZyBsaWJlcmFsaXR5IG9mIHRoZSBHcmFjY2hpLiBJIGRvIG5vdCBzYXkgdGhhdCwgbm93IHRoYXQgc28KICAgICAgIG11Y2ggaGFzIGJlZW4gbG9zdCwgdGhpcyBpcyB0aGUgb25seSByZXZlbnVlIHdoaWNoIHJlbWFpbnMgaW4gdGhlIHJlcHVibGljOyB0aGUgb25seSBvbmUKICAgICAgIHdoaWNoLCB3aGlsZSBvdGhlciBzb3VyY2VzIG9mIGluY29tZSBhcmUgaW50ZXJydXB0ZWQsIGRvZXMgbm90IGZhaWwgdXM7IHRoZSBvbmx5IG9uZSB3aGljaCBpcwogICAgICAgc3BsZW5kaWQgaW4gcGVhY2UsIGlzOyBub3Qgd29ybiBvdXQgaW4gd2FyOyB3aGljaCBzdXBwb3J0cyBvdXIgc29sZGllcnksIGFuZCBpcyBub3QgYWZyYWlkIG9mCiAgICAgICBvdXIgZW5lbWllcy4gSSBwYXNzIG92ZXIgYWxsIHRoaXMgd2hpY2ggSSBtaWdodCBzYXk7IEkgcmVzZXJ2ZSB0aGF0IGZvciB0aGUgYXNzZW1ibHkgb2YgdGhlCiAgICAgICBwZW9wbGUuIEkgYW0gc3BlYWtpbmcgbm93IG9mIHRoZSBkYW5nZXIgdG8gb3VyIHNhZmV0eSBhbmQgdG8gb3VyIGxpYmVydHkuIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB3aGF0IGRvIHlvdSB0aGluayB3aWxsIHJlbWFpbiB0byB5b3UgdW5pbXBhaXJlZCBpbiB0aGUgd2hvbGUgcmVwdWJsaWMsCiAgICAgICBvciBpbiB5b3VyIGxpYmVydHksIG9yIGluIHlvdXIgZGlnbml0eSwgd2hlbiBSdWxsdXMsIGFuZCB0aG9zZSB3aG9tIHlvdSBhcmUgbXVjaCBtb3JlIGFmcmFpZAogICAgICAgb2YgdGhhbiB5b3UgYXJlIG9mIFJ1bGx1cywgd2l0aCBoaXMgd2hvbGUgYmFuZCBvZiBuZWVkeSBhbmQgdW5wcmluY2lwbGVkIG1lbiwgd2l0aCBhbGwgaGlzCiAgICAgICBmb3JjZXMsIHdpdGggYWxsIGhpcyBzaWx2ZXIgYW5kIGdvbGQsIHNoYWxsIGhhdmUgb2NjdXBpZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBhbmQgdGhlIGNpdGllcyBhcm91bmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPj8KICAgICAgIFRoZXNlIHRoaW5ncywgTyBjb25zY3JpcHQgZmF0aGVycywgSSB3aWxsIHJlc2lzdCBlYWdlcmx5IGFuZCB2aWdvcm91c2x5OyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IG1lbiwgd2hpbGUgSSBhbSBjb25zdWwsIHRvIGJyaW5nIGZvcnRoIHRob3NlIHBsYW5zIGFnYWluc3QgdGhlIHJlcHVibGljIHdoaWNoIHRoZXkKICAgICAgIGhhdmUgbG9uZyBiZWVuIG1lZGl0YXRpbmcuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBub3QgY29tcGxhaW4gb2YgdGhlIGRpbWludXRpb24gb2YgdGhlIHJldmVudWVzOyBub3IKICAgICAgIG9mIHRoZSB3aWNrZWRuZXNzIG9mIHRoaXMgbG9zcyBhbmQgaW5qdXJ5LiBJIHBhc3Mgb3ZlciB0aG9zZSB0aGluZ3Mgd2hpY2ggdGhlcmUgaXMgbm8gb25lIHdobwogICAgICAgY2Fubm90IGNvbXBsYWluIG9mIHdpdGggdGhlIGdyZWF0ZXN0IHdlaWdodCBhbmQgdGhlIGdyZWF0ZXN0IHRydXRoOyB0aGF0IHdlIGhhdmUgbm90IGJlZW4KICAgICAgIGFibGUgdG8gcHJlc2VydmUgdGhlIG1vc3QgaW1wb3J0YW50IHBhcnQgb2YgdGhlIHB1YmxpYyBwYXRyaW1vbnkgb2YgdGhlIHN0YXRlLCB0aGF0IHdoaWNoIGhhcwogICAgICAgYmVlbiB0byB1cyB0aGUgc291cmNlIG9mIG91ciBzdXBwbHkgb2YgY29ybiwgb3VyIGdyYW5hcnkgaW4gdGltZSBvZiB3YXIsIG91ciByZXZlbnVlIHBsYWNlZAogICAgICAgdW5kZXIgY3VzdG9keSBvZiB0aGUgc2VhbHMgYW5kIGJvbHRzIG9mIHRoZSByZXB1YmxpYzsgdGhhdCB3ZSwgaW4gc2hvcnQsIGhhdmUgYWJhbmRvbmVkIHRoYXQKICAgICAgIGRpc3RyaWN0IHRvIFB1YmxpdXMgUnVsbHVzLCB3aGljaCBpdHNlbGYgYnkgaXRzIG93biByZXNvdXJjZXMgaGFkIHJlc2lzdGVkIGJvdGggdGhlIGFic29sdXRlCiAgICAgICBwb3dlciBvZiBTdWxsYSwgYW5kIHRoZSBjb3JydXB0aW5nIGxpYmVyYWxpdHkgb2YgdGhlIEdyYWNjaGkuIEkgZG8gbm90IHNheSB0aGF0LCBub3cgdGhhdCBzbwogICAgICAgbXVjaCBoYXMgYmVlbiBsb3N0LCB0aGlzIGlzIHRoZSBvbmx5IHJldmVudWUgd2hpY2ggcmVtYWlucyBpbiB0aGUgcmVwdWJsaWM7IHRoZSBvbmx5IG9uZQogICAgICAgd2hpY2gsIHdoaWxlIG90aGVyIHNvdXJjZXMgb2YgaW5jb21lIGFyZSBpbnRlcnJ1cHRlZCwgZG9lcyBub3QgZmFpbCB1czsgdGhlIG9ubHkgb25lIHdoaWNoIGlzCiAgICAgICBzcGxlbmRpZCBpbiBwZWFjZSwgaXM7IG5vdCB3b3JuIG91dCBpbiB3YXI7IHdoaWNoIHN1cHBvcnRzIG91ciBzb2xkaWVyeSwgYW5kIGlzIG5vdCBhZnJhaWQgb2YKICAgICAgIG91ciBlbmVtaWVzLiBJIHBhc3Mgb3ZlciBhbGwgdGhpcyB3aGljaCBJIG1pZ2h0IHNheTsgSSByZXNlcnZlIHRoYXQgZm9yIHRoZSBhc3NlbWJseSBvZiB0aGUKICAgICAgIHBlb3BsZS4gSSBhbSBzcGVha2luZyBub3cgb2YgdGhlIGRhbmdlciB0byBvdXIgc2FmZXR5IGFuZCB0byBvdXIgbGliZXJ0eS4gPC90cmFuc2xhdGlvbj4="
translation['1.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHdoYXQgZG8geW91IHRoaW5rIHdpbGwgcmVtYWluIHRvIHlvdSB1bmltcGFpcmVkIGluIHRoZSB3aG9sZSByZXB1YmxpYywKICAgICAgIG9yIGluIHlvdXIgbGliZXJ0eSwgb3IgaW4geW91ciBkaWduaXR5LCB3aGVuIFJ1bGx1cywgYW5kIHRob3NlIHdob20geW91IGFyZSBtdWNoIG1vcmUgYWZyYWlkCiAgICAgICBvZiB0aGFuIHlvdSBhcmUgb2YgUnVsbHVzLCB3aXRoIGhpcyB3aG9sZSBiYW5kIG9mIG5lZWR5IGFuZCB1bnByaW5jaXBsZWQgbWVuLCB3aXRoIGFsbCBoaXMKICAgICAgIGZvcmNlcywgd2l0aCBhbGwgaGlzIHNpbHZlciBhbmQgZ29sZCwgc2hhbGwgaGF2ZSBvY2N1cGllZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gYW5kIHRoZSBjaXRpZXMgYXJvdW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPj8KICAgICAgIFRoZXNlIHRoaW5ncywgTyBjb25zY3JpcHQgZmF0aGVycywgSSB3aWxsIHJlc2lzdCBlYWdlcmx5IGFuZCB2aWdvcm91c2x5OyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IG1lbiwgd2hpbGUgSSBhbSBjb25zdWwsIHRvIGJyaW5nIGZvcnRoIHRob3NlIHBsYW5zIGFnYWluc3QgdGhlIHJlcHVibGljIHdoaWNoIHRoZXkKICAgICAgIGhhdmUgbG9uZyBiZWVuIG1lZGl0YXRpbmcuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgbWFkZSBhIGdyZWF0IG1pc3Rha2UsIE8gUnVsbHVzLCB5b3UgYW5kIHNvbWUgb2YgeW91cgogICAgICAgY29sbGVhZ3Vlcywgd2hlbiB5b3UgaG9wZWQgdGhhdCwgaW4gYmVpbmcgaW4gb3Bwb3NpdGlvbiB0byBhIGNvbnN1bCB3aG8gc3R1ZGllZCB0aGUgaW50ZXJlc3RzCiAgICAgICBvZiB0aGUgcGVvcGxlIGluIHJlYWxpdHksIG5vdCBieSBtYWtpbmcgYSB2YWluIHBhcmFkZSBvZiBzbyBkb2luZywgeW91IHdvdWxkIGJlIGFibGUgdG8gZ2FpbgogICAgICAgcG9wdWxhcml0eSB3aGlsZSBvdmVydHVybmluZyB0aGUgcmVwdWJsaWMuIEkgY2hhbGxlbmdlIHlvdTsgSSBpbnZpdGUgeW91IHRvIHRoZSBhc3NlbWJseTsgSQogICAgICAgd2lsbCBhY2NlcHQgdGhlIFJvbWFuIHBlb3BsZSBhcyBhbiB1bXBpcmUgYmV0d2VlbiB1cyA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IG1hZGUgYSBncmVhdCBtaXN0YWtlLCBPIFJ1bGx1cywgeW91IGFuZCBzb21lIG9mIHlvdXIKICAgICAgIGNvbGxlYWd1ZXMsIHdoZW4geW91IGhvcGVkIHRoYXQsIGluIGJlaW5nIGluIG9wcG9zaXRpb24gdG8gYSBjb25zdWwgd2hvIHN0dWRpZWQgdGhlIGludGVyZXN0cwogICAgICAgb2YgdGhlIHBlb3BsZSBpbiByZWFsaXR5LCBub3QgYnkgbWFraW5nIGEgdmFpbiBwYXJhZGUgb2Ygc28gZG9pbmcsIHlvdSB3b3VsZCBiZSBhYmxlIHRvIGdhaW4KICAgICAgIHBvcHVsYXJpdHkgd2hpbGUgb3ZlcnR1cm5pbmcgdGhlIHJlcHVibGljLiBJIGNoYWxsZW5nZSB5b3U7IEkgaW52aXRlIHlvdSB0byB0aGUgYXNzZW1ibHk7IEkKICAgICAgIHdpbGwgYWNjZXB0IHRoZSBSb21hbiBwZW9wbGUgYXMgYW4gdW1waXJlIGJldHdlZW4gdXMgPC90cmFuc2xhdGlvbj4="
translation['1.23.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gZmFjdCwgaWYgd2UgbG9vayByb3VuZCB0byBzdXJ2ZXkgZXZlcnl0aGluZyB3aGljaCBpczsgcGxlYXNhbnQgYW5kIGFjY2VwdGFibGUgdG8gdGhlCiAgICAgICBwZW9wbGUsIHdlIHNoYWxsIGZpbmQgdGhhdCBub3RoaW5nIGlzIHNvIHBvcHVsYXIgYXMgcGVhY2UsIGFuZCBjb25jb3JkLCBhbmQgZWFzZS4gWW91IGhhdmUKICAgICAgIGdpdmVuIHVwIHRvIG1lIGEgY2l0eSBtYWRlIGFueGlvdXMgd2l0aCBzdXNwaWNpb24sIGluIHN1c3BlbnNlIGZyb20gZmVhciwgaGFyYXNzZWQgdG8gZGVhdGgKICAgICAgIGJ5IHlvdXIgcHJvcG9zZWQgbGF3cywgYW5kIGFzc2VtYmxpZXMsIGFuZCBzZWRpdGlvbnMuIFlvdSBoYXZlIGluZmxhbWVkIHRoZSBob3BlcyBvZiB0aGUKICAgICAgIHdpY2tlZDsgeW91IGhhdmUgZmlsbGVkIHRoZSB2aXJ0dW91cyB3aXRoIGFsYXJtczsgeW91IGhhdmUgYmFuaXNoZWQgZ29vZCBmYWl0aCBmcm9tIHRoZQogICAgICAgZm9ydW0sIGFuZCBkaWduaXR5IGZyb20gdGhlIHJlcHVibGljLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+IEFtaWQgYWxsIHRoaXMKICAgICAgIGNvbW1vdGlvbiBhbmQgYWdpdGF0aW9uIG9mIG1pbmRzIGFuZCBjaXJjdW1zdGFuY2VzLCB3aGVuIHRoZSB2b2ljZSBhbmQgYXV0aG9yaXR5IG9mIHRoZQogICAgICAgY29uc3VsIGhhcyBzdWRkZW5seSwgZnJvbSBhbWlkIHN1Y2ggZ3JlYXQgZGFya25lc3MsIGRhd25lZCBvbiB0aGUgUm9tYW4gcGVvcGxlOyB3aGVuIGl0IGhhcwogICAgICAgc2hvd24gdGhhdCBub3RoaW5nIG5lZWQgYmUgZmVhcmVkOyB0aGF0IG5vIHJlZ3VsYXIgYXJteSwgbm8gYmFuZCBvZiBleHRlbXBvcmUgcnVmZmlhbnMsIG5vCiAgICAgICBjb2xvbnksIG5vIHNhbGUgb2YgdGhlIHJldmVudWVzLCBubyBuZXcgb2YgY29tbWFuZCwgbm8gcmVpZ24gb2YgZGVjZW12aXJzLCBubyBuZXcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBvciBvcHBvc2l0aW9uIHNlYXQgb2YgZW1waXJlLCB3aWxsIGJlIGFsbG93ZWQgdG8gZXhpc3QKICAgICAgIHdoaWxlIHdlIGFyZSBjb25zdWxzOyB0aGF0IHRoZSBncmVhdGVzdCB0cmFucXVpbGxpdHkgb2YgcGVhY2UgYW5kIGVhc2Ugd2lsbCBiZSBzZWN1cmVkOyB0aGVuLAogICAgICAgbm8gZG91YnQsIHdlIHNoYWxsIGhhdmUgbXVjaCByZWFzb24gdG8gZWFyIHRoYXQgdGhpcyBiZWF1dGlmdWwgYWdyYXJpYW4gbGF3IG9mIHlvdXJzIHdpbGwKICAgICAgIGFwcGVhciBwb3B1bGFyLiA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgd2hlbiBJIGhhdmUgZGlzcGxheWVkIHRoZSB3aWNrZWRuZXNzCiAgICAgICBvZiB5b3VyIGNvdW5zZWxzLCB0aGUgZGlzaG9uZXN0eSBvZiB5b3VyIGxhdywgYW5kIHRoZSB0cmVhY2hlcnkgd2hpY2ggaXMgcGxhbm5lZCBieSB0aG9zZQogICAgICAgcG9wdWxhciB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGFnYWluc3QgdGhlIFJvbWFuIHBlb3BsZTsgdGhlbiwgSSBzdXBwb3NlLCBJIHNoYWxsIGhhdmUgcmVhc29uCiAgICAgICB0byBmZWFyIHRoYXQgSSBzaGFsbCBub3QgYmUgYWxsb3dlZCB0byBhcHBlYXIgaW4gdGhlIGFzc2VtYmx5LCBmb3IgdGhlIHB1cnBvc2Ugb2Ygb3Bwb3NpbmcKICAgICAgIHlvdTsgZXNwZWNpYWxseSB3aGVuIEkgaGF2ZSBkZXRlcm1pbmVkIGFuZCByZXNvbHZlZCBzbyB0byBjb25kdWN0IG15c2VsZiBpbiBteSBjb25zdWxzaGlwLAogICAgICAgKGFuZCB0aGUgZHV0aWVzIG9mIHRoZSBjb25zdWxzaGlwIGNhbm5vdCBiZSBkaXNjaGFyZ2VkIHdpdGggZGlnbml0eSBhbmQgZnJlZWRvbSwgaW4gYW55IG90aGVyCiAgICAgICBtYW5uZXIsKSBhcyBuZWl0aGVyIHRvIGRlc2lyZSBhbnkgcHJvdmluY2UsIG5vciBob25vdXIsIG5vciBkaWduaXR5IG5vciBhZHZhbnRhZ2Ugbm9yCiAgICAgICBhbnl0aGluZyB3aGF0ZXZlciB3aGljaCBjYW4gaGF2ZSBhbnkgaGluZHJhbmNlIHRocm93biBpbiBpdHMgd2F5IGJ5IGFueSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlLiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgY29uc3VsIHN0YXRlcywgaW4gZnVsbCBzZW5hdGUsIG9uIHRoZSBjYWxlbmRzCiAgICAgICBvZiBKYW51YXJ5LCB0aGF0IGlmIHRoZSBwcmVzZW50IGNvbmRpdGlvbiBvZiB0aGUgcmVwdWJsaWMgY29udGludWVzLCBhbmQgaWYgbm8gbmV3IGV2ZW50CiAgICAgICBhcmlzZXMsIG9uIGFjY291bnQgb2Ygd2hpY2ggaGUgY2Fubm90IHdpdGggaG9ub3VyIGF2b2lkIGl0LCBoZSB3aWxsIG5vdCBnbyB0byBhbnkgcHJvdmluY2UuCiAgICAgICBCeSB0aGF0IG1lYW5zIEkgc2hhbGwgYmUgYWJsZSwgTyBjb25zY3JpcHQgZmF0aGVycywgc28gdG8gYmVoYXZlIG15c2VsZiBpbiB0aGlzIG1hZ2lzdHJhY3ksCiAgICAgICBhcyB0byBiZSBhYmxlIHRvIHJlc3RyYWluIGFueSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgd2hvIGlzIGhvc3RpbGUgdG8gdGhlCiAgICAgICByZXB1YmxpYyzigJR0byBkZXNwaXNlIGFueSBvbmUgd2hvIGlzIGhvc3RpbGUgdG8gbXlzZWxmLiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gQW1pZCBhbGwgdGhpcwogICAgICAgY29tbW90aW9uIGFuZCBhZ2l0YXRpb24gb2YgbWluZHMgYW5kIGNpcmN1bXN0YW5jZXMsIHdoZW4gdGhlIHZvaWNlIGFuZCBhdXRob3JpdHkgb2YgdGhlCiAgICAgICBjb25zdWwgaGFzIHN1ZGRlbmx5LCBmcm9tIGFtaWQgc3VjaCBncmVhdCBkYXJrbmVzcywgZGF3bmVkIG9uIHRoZSBSb21hbiBwZW9wbGU7IHdoZW4gaXQgaGFzCiAgICAgICBzaG93biB0aGF0IG5vdGhpbmcgbmVlZCBiZSBmZWFyZWQ7IHRoYXQgbm8gcmVndWxhciBhcm15LCBubyBiYW5kIG9mIGV4dGVtcG9yZSBydWZmaWFucywgbm8KICAgICAgIGNvbG9ueSwgbm8gc2FsZSBvZiB0aGUgcmV2ZW51ZXMsIG5vIG5ldyBvZiBjb21tYW5kLCBubyByZWlnbiBvZiBkZWNlbXZpcnMsIG5vIG5ldyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gb3Igb3Bwb3NpdGlvbiBzZWF0IG9mIGVtcGlyZSwgd2lsbCBiZSBhbGxvd2VkIHRvIGV4aXN0CiAgICAgICB3aGlsZSB3ZSBhcmUgY29uc3VsczsgdGhhdCB0aGUgZ3JlYXRlc3QgdHJhbnF1aWxsaXR5IG9mIHBlYWNlIGFuZCBlYXNlIHdpbGwgYmUgc2VjdXJlZDsgdGhlbiwKICAgICAgIG5vIGRvdWJ0LCB3ZSBzaGFsbCBoYXZlIG11Y2ggcmVhc29uIHRvIGVhciB0aGF0IHRoaXMgYmVhdXRpZnVsIGFncmFyaWFuIGxhdyBvZiB5b3VycyB3aWxsCiAgICAgICBhcHBlYXIgcG9wdWxhci4gPC90cmFuc2xhdGlvbj4="
translation['1.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIGRpc3BsYXllZCB0aGUgd2lja2VkbmVzcwogICAgICAgb2YgeW91ciBjb3Vuc2VscywgdGhlIGRpc2hvbmVzdHkgb2YgeW91ciBsYXcsIGFuZCB0aGUgdHJlYWNoZXJ5IHdoaWNoIGlzIHBsYW5uZWQgYnkgdGhvc2UKICAgICAgIHBvcHVsYXIgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSBhZ2FpbnN0IHRoZSBSb21hbiBwZW9wbGU7IHRoZW4sIEkgc3VwcG9zZSwgSSBzaGFsbCBoYXZlIHJlYXNvbgogICAgICAgdG8gZmVhciB0aGF0IEkgc2hhbGwgbm90IGJlIGFsbG93ZWQgdG8gYXBwZWFyIGluIHRoZSBhc3NlbWJseSwgZm9yIHRoZSBwdXJwb3NlIG9mIG9wcG9zaW5nCiAgICAgICB5b3U7IGVzcGVjaWFsbHkgd2hlbiBJIGhhdmUgZGV0ZXJtaW5lZCBhbmQgcmVzb2x2ZWQgc28gdG8gY29uZHVjdCBteXNlbGYgaW4gbXkgY29uc3Vsc2hpcCwKICAgICAgIChhbmQgdGhlIGR1dGllcyBvZiB0aGUgY29uc3Vsc2hpcCBjYW5ub3QgYmUgZGlzY2hhcmdlZCB3aXRoIGRpZ25pdHkgYW5kIGZyZWVkb20sIGluIGFueSBvdGhlcgogICAgICAgbWFubmVyLCkgYXMgbmVpdGhlciB0byBkZXNpcmUgYW55IHByb3ZpbmNlLCBub3IgaG9ub3VyLCBub3IgZGlnbml0eSBub3IgYWR2YW50YWdlIG5vcgogICAgICAgYW55dGhpbmcgd2hhdGV2ZXIgd2hpY2ggY2FuIGhhdmUgYW55IGhpbmRyYW5jZSB0aHJvd24gaW4gaXRzIHdheSBieSBhbnkgdHJpYnVuZSBvZiB0aGUKICAgICAgIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['1.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGNvbnN1bCBzdGF0ZXMsIGluIGZ1bGwgc2VuYXRlLCBvbiB0aGUgY2FsZW5kcwogICAgICAgb2YgSmFudWFyeSwgdGhhdCBpZiB0aGUgcHJlc2VudCBjb25kaXRpb24gb2YgdGhlIHJlcHVibGljIGNvbnRpbnVlcywgYW5kIGlmIG5vIG5ldyBldmVudAogICAgICAgYXJpc2VzLCBvbiBhY2NvdW50IG9mIHdoaWNoIGhlIGNhbm5vdCB3aXRoIGhvbm91ciBhdm9pZCBpdCwgaGUgd2lsbCBub3QgZ28gdG8gYW55IHByb3ZpbmNlLgogICAgICAgQnkgdGhhdCBtZWFucyBJIHNoYWxsIGJlIGFibGUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHNvIHRvIGJlaGF2ZSBteXNlbGYgaW4gdGhpcyBtYWdpc3RyYWN5LAogICAgICAgYXMgdG8gYmUgYWJsZSB0byByZXN0cmFpbiBhbnkgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHdobyBpcyBob3N0aWxlIHRvIHRoZQogICAgICAgcmVwdWJsaWMs4oCUdG8gZGVzcGlzZSBhbnkgb25lIHdobyBpcyBob3N0aWxlIHRvIG15c2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['1.26.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBpbiB0aGUgbmFtZSBvZiB0aGUgaW1tb3J0YWwgZ29kcyEgSSBlbnRyZWF0IHlvdSwgcmVjb2xsZWN0IHlvdXJzZWx2ZXMsIE8KICAgICAgIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGU7IGRlc2VydCB0aG9zZSBtZW4gYnkgd2hvbSwgaW4gYSBzaG9ydCB0aW1lLCB1bmxlc3MgeW91IHRha2UgZ3JlYXQKICAgICAgIGNhcmUsIHlvdSB3aWxsIHlvdXJzZWx2ZXMgYmUgZGVzZXJ0ZWQuIENvbnNwaXJlIHdpdGggdXM7IGFncmVlIHdpdGggYWxsIHZpcnR1b3VzIG1lbiBkZWZlbmQKICAgICAgIG91ciBjb21tb24gcmVwdWJsaWMgd2l0aCBvbmUgY29tbW9uIHplYWwgYW5kIGFmZmVjdGlvbi4gVGhlcmUgYXJlIG1hbnkgc2VjcmV0IHdvdW5kcwogICAgICAgc3VzdGFpbmVkIGJ5IHRoZSByZXB1YmxpYy4gVGhlcmUgYXJlIG1hbnkgbWlzY2hpZXZvdXMgY291bnNlbHMgb2YgYWJhbmRvbmVkIGNpdGl6ZW5zIGRlc2lnbmVkCiAgICAgICBhZ2FpbnN0IGhlci4gVGhlcmUgaXMgbm8gZXh0ZXJuYWwgZGFuZ2VyLiBUaGVyZSBpcyBubyBraW5nIG5vIG5hdGlvbiwgbm8gcGVvcGxlIGluIHRoZSB3b3JsZAogICAgICAgd2hvbSB3ZSBuZWVkIGZlYXIuIFRoZSBldmlsIGlzIGNvbmZpbmVkIHdpdGhpbiBvdXIgb3duIHdhbGxzIGludGVybmFsIGFuZCBkb21lc3RpYyB2ZXJ5IG9uZQogICAgICAgb2YgdXMgdG8gdGhlIGJlc3Qgb2YgaGlzIHBvd2VyIG91Z2h0IHRvIHJlc2lzdCBhbmQgdG8gcmVtZWR5IHRoaXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IG1pc3Rha2UgaWYgeW91IHRoaW5rIHRoYXQgdGhlIHNlbmF0ZSBhcHByb3ZlcyBvZiB3aGF0IGlzIHNhaWQgYnkgbWUsCiAgICAgICBidXQgdGhhdCB0aGUgaW5jbGluYXRpb25zIG9mIHRoZSBwZW9wbGUgYXJlIGRpZmZlcmVudC4gQWxsIG1lbiwgd2hvIHdpc2ggdG8gYmUgc2FmZQogICAgICAgdGhlbXNlbHZlcywgd2lsbCBmb2xsb3cgdGhlIGF1dGhvcml0eSBvZiB0aGUgY29uc3VsLCBhIG1hbiB1bmluZmx1ZW5jZWQgYnkgZXZpbCBwYXNzaW9uOyBmcmVlCiAgICAgICBmcm9tIGFsbCBzdXNwaWNpb24gb2YgZ3VpbHQ7IGNhdXRpb3VzIGluIGRhbmdlcjsgbm90IGZlYXJmdWwgaW4gY29udGVzdC4gQnV0IGlmIGFueSBvbmUgb2YKICAgICAgIHlvdSBjaGVyaXNoZXMgYSBob3BlIHRoYXQgaGUgbWF5IGJlIGFibGUgaW4gYSB0dXJidWxlbnQgc3RhdGUgb2YgYWZmYWlycyB0byBwcm9tb3RlIGhpcyBvd24KICAgICAgIGludGVyZXN0cywgZmlyc3Qgb2YgYWxsLCBsZXQgaGltIGdpdmUgdXAgaG9waW5nIGFueSBzdWNoIHRoaW5nIGFzIGxvbmcgYXMgSSBhbSBjb25zdWwuIEluIHRoZQogICAgICAgbmV4dCBwbGFjZSwgbGV0IGhpbSB0YWtlIG1lIG15c2VsZiBhcyBhIHByb29m4oCUKG1lIHdob20gaGUgc2VlcyBub3cgY29uc3VsLCB0aG91Z2gKICAgICAgIGJvcm4gb25seSBpbiB0aGUgZXF1ZXN0cmlhbiByYW5rKeKAlG9mIHdoYXQgY291cnNlIG9mIGxpZmUgbW9zdCBlYXNpbHkgY29uZHVjdHMKICAgICAgIHZpcnR1b3VzIG1lbiB0byBob25vdXIgYW5kIGRpZ25pdHkuIEJ1dCBpZiB5b3UsIE8gY29uc2NyaXB0IGZhdGhlciwgYXNzaXN0IG1lIHdpdGggeW91ciB6ZWFsCiAgICAgICBhbmQgZW5lcmd5IGluIGRlZmVuZGluZyBvdXIgY29tbW9uIGRpZ25pdHksIHRoZW4sIGluIHRydXRoLCBJIHNoYWxsIGFjY29tcGxpc2ggdGhhdCBvZiB3aGljaAogICAgICAgb3VyIHJlcHVibGljIGlzIGF0IHByZXNlbnQgaW4gdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIG5lZWQuIEkgc2hhbGwgbWFrZSB0aGUgYXV0aG9yaXR5IG9mIHRoaXMKICAgICAgIG9yZGVyLCB3aGljaCBleGlzdGVkIHNvIGxvbmcgYW1vbmcgb3VyIGFuY2VzdG9ycywgYXBwZWFyIGFmdGVyIGEgbG9uZyBpbnRlcnZhbCB0byBiZSBhZ2FpbgogICAgICAgcmVzdG9yZWQgdG8gdGhlIHJlcHVibGljLjwvcD4KCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.27'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEl0IGlzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgY3VzdG9tcyBhbmQgZXN0YWJsaXNoZWQgdXNhZ2VzCiAgICAgICBvZiBvdXIgYW5jZXN0b3JzLCBPIFJvbWFucywgdGhhdCB0aG9zZSB3aG8sIGJ5IHlvdXIga2luZG5lc3MsIGhhdmUgb3ZlcnRha2VuIHRoZSBpbWFnZXMgb2YKICAgICAgIHRoZWlyIGZhbWlseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPuKAnFRob3NlIFJvbWFucyB3aG8gaGFkIHBhc3NlZCB0aHJvdWdoIG9uZSBvZiB0aGUKICAgICAgICBoaWdoIG9mZmljZXMgb2YgYWVkaWxlcywgcHJhZXRvciwgb3IgY29uc3VsIHdlcmUgYWxsb3dlZCB0byBoYXZlIHRoZWlyIGxpa2VuZXNzZXMgaGFuZGVkCiAgICAgICAgZG93biB0byBwb3N0ZXJpdHkuIFRoZXNlIGxpa2VuZXNzZXMgd2VyZSwgYWNjb3JkaW5nIHRvIENhc2F1Ym9uLCBidXN0czsgYnV0IGFjY29yZGluZyB0bwogICAgICAgIFNjaHdlaWdoYXVzZXIsIG1hc2tzOyB0aGV5IHdlcmUga2VwdCBpbiB0aGUgaGFsbCBvZiB0aGUgaG91c2UsIGluIG5pY2hlcyBhcHByb3ByaWF0ZWQgZm9yCiAgICAgICAgdGhlaXIgcmVjZXB0aW9uLCBhbmQgd2VyZSBicm91Z2h0IGZvcnRoIG9uIG9jY2FzaW9ucyBvZiBmdW5lcmFscywgdG9nZXRoZXIgd2l0aCB0aGVpciByb2JlcwogICAgICAgIG9mIG9mZmljZSwgdG8gaW1wZXJzb25hdGUgdGhlIGRlYWQuIFdob2V2ZXIgaGFkIHN1Y2ggaW1hZ2VzIGluIGhpcyBwb3NzZXNzaW9uIHdhcyA8Zm9yZWlnbiBsYW5nPSJsYSI+bm9iaWxpczwvZm9yZWlnbj4u4oCd4oCUUmlkZGxlLCBMYXQuIERpY3QuIHYuIDxmb3JlaWduIGxhbmc9ImxhIj5JbWFnbzwvZm9yZWlnbj4uPC9ub3RlPiBzaG91bGQsIHRoZSBmaXJzdCB0aW1lIHRoYXQgdGhleSBob2xkIGFuIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUsCiAgICAgICB0YWtlIGFuIG9wcG9ydHVuaXR5IG9mIHVuaXRpbmcgdGhhbmtzIHRvIHlvdSBmb3IgeW91ciBraW5kbmVzcyB3aXRoIGEgcGFuZWd5cmljIG9uIHRoZWlyCiAgICAgICBhbmNlc3RvcnMsIGFuZCBpbiB0aGUgc3BlZWNoIHRoZW4gbWFkZSwgc29tZSBtZW4gYXJlLCBvbiBzb21lIG9jY2FzaW9ucywgZm91bmQgd29ydGh5IG9mIHRoZQogICAgICAgcmFuayBvZiB0aGVpciBhbmNlc3RvcnMuIEJ1dCBtb3N0IG1lbiBvbmx5IGFjY29tcGxpc2ggdGhpcyzigJRuYW1lbHksIHRvIG1ha2UgaXQgc2VlbQogICAgICAgdGhhdCBzbyB2YXN0IGEgZGVidCBpcyBkdWUgdG8gdGhlaXIgYW5jZXN0b3JzLCB0aGF0IHRoZXJlIGlzIHNvbWV0aGluZyBzdGlsbCBsZWZ0IHRvIGJlIHBhaWQKICAgICAgIHRvIHRoZWlyIHBvc3Rlcml0eS48bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEksIGluZGVlZCwgaGF2ZSBubyBvcHBvcnR1bml0eSBvZgogICAgICAgc3BlYWtpbmcgYmVmb3JlIHlvdSBvZiBteSBhbmNlc3RvcnMsIG5vdCBiZWNhdXNlIHRoZXkgd2VyZSBub3Qgc3VjaCBtZW4gYXMgeW91IHNlZSBtZSBhbHNvIHRvCiAgICAgICBiZSwgd2hvIGFtIGJvcm4gb2YgdGhlaXIgYmxvb2QsIGFuZCBlZHVjYXRlZCBpbiB0aGVpciBwcmluY2lwbGVzLCBidXQgYmVjYXVzZSB0aGV5IGhhZCBuZXZlcgogICAgICAgYW55IHNoYXJlIG9mIHBvcHVsYXIgcHJhaXNlLCBvciBvZiB0aGUgbGlnaHQgb2YgaG9ub3VycyBjb25mZXJyZWQgYnkgeW91LiBBbmQgb2YgbXlzZWxmIEkKICAgICAgIGZlYXIgbGVzdCBpdCBtYXkgbG9vayBsaWtlIGFycm9nYW5jZSB0byBzcGVhaywgYW5kIHlldCBsaWtlIGluZ3JhdGl0dWRlIHRvIGJlIHNpbGVudC4KICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpdCBpcyBhIHZlcnkgdHJvdWJsZXNvbWUgdGhpbmcgZm9yIG1lIG15c2VsZiB0bwogICAgICAgZW51bWVyYXRlIHRvIHlvdSB0aGUgcHVyc3VpdHMgYnkgd2hpY2ggSSBoYXZlIGVhcm5lZCB0aGlzIGRpZ25pdHk7IGFuZCwgb24gdGhlIG90aGVyIGhhbmQsIEkKICAgICAgIGNhbm5vdCBwb3NzaWJseSBiZSBzaWxlbnQgYWJvdXQgeW91ciBncmVhdCBraW5kbmVzc2VzIHRvIG1lLiBXaGVyZWZvcmUgSSB3aWxsIGVtcGxveSBhCiAgICAgICByZWFzb25hYmxlIG1vZGVyYXRpb24gaW4gc3BlYWtpbmcsIHNvIGFzIHRvIG1lbnRpb24gdGhlIGtpbmRuZXNzIHdoaWNoIEkgaGF2ZSByZWNlaXZlZCBmcm9tCiAgICAgICB5b3UuIEkgd2lsbCBzcGVhayBzbGlnaHRseSBvZiB0aGUgcmVhc29ucyB3aHkgSSBhbSB0aG91Z2h0IHRvIGhhdmUgZGVzZXJ2ZWQgdGhlIGdyZWF0ZXN0CiAgICAgICBob25vdXIgeW91IGNhbiBjb25mZXIsIGFuZCB5b3VyIHNpbmd1bGFybHkgZmF2b3VyYWJsZSBqdWRnbWVudCBvZiBtZS48Z2FwIGRlc2M9IioqKioqIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBJdCBpcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGN1c3RvbXMgYW5kIGVzdGFibGlzaGVkIHVzYWdlcwogICAgICAgb2Ygb3VyIGFuY2VzdG9ycywgTyBSb21hbnMsIHRoYXQgdGhvc2Ugd2hvLCBieSB5b3VyIGtpbmRuZXNzLCBoYXZlIG92ZXJ0YWtlbiB0aGUgaW1hZ2VzIG9mCiAgICAgICB0aGVpciBmYW1pbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPuKAnFRob3NlIFJvbWFucyB3aG8gaGFkIHBhc3NlZCB0aHJvdWdoIG9uZSBvZiB0aGUKICAgICAgICBoaWdoIG9mZmljZXMgb2YgYWVkaWxlcywgcHJhZXRvciwgb3IgY29uc3VsIHdlcmUgYWxsb3dlZCB0byBoYXZlIHRoZWlyIGxpa2VuZXNzZXMgaGFuZGVkCiAgICAgICAgZG93biB0byBwb3N0ZXJpdHkuIFRoZXNlIGxpa2VuZXNzZXMgd2VyZSwgYWNjb3JkaW5nIHRvIENhc2F1Ym9uLCBidXN0czsgYnV0IGFjY29yZGluZyB0bwogICAgICAgIFNjaHdlaWdoYXVzZXIsIG1hc2tzOyB0aGV5IHdlcmUga2VwdCBpbiB0aGUgaGFsbCBvZiB0aGUgaG91c2UsIGluIG5pY2hlcyBhcHByb3ByaWF0ZWQgZm9yCiAgICAgICAgdGhlaXIgcmVjZXB0aW9uLCBhbmQgd2VyZSBicm91Z2h0IGZvcnRoIG9uIG9jY2FzaW9ucyBvZiBmdW5lcmFscywgdG9nZXRoZXIgd2l0aCB0aGVpciByb2JlcwogICAgICAgIG9mIG9mZmljZSwgdG8gaW1wZXJzb25hdGUgdGhlIGRlYWQuIFdob2V2ZXIgaGFkIHN1Y2ggaW1hZ2VzIGluIGhpcyBwb3NzZXNzaW9uIHdhcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub2JpbGlzPC9mb3JlaWduPi7igJ3igJRSaWRkbGUsIExhdC4gRGljdC4gdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+SW1hZ288L2ZvcmVpZ24+Ljwvbm90ZT4gc2hvdWxkLCB0aGUgZmlyc3QgdGltZSB0aGF0IHRoZXkgaG9sZCBhbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlLAogICAgICAgdGFrZSBhbiBvcHBvcnR1bml0eSBvZiB1bml0aW5nIHRoYW5rcyB0byB5b3UgZm9yIHlvdXIga2luZG5lc3Mgd2l0aCBhIHBhbmVneXJpYyBvbiB0aGVpcgogICAgICAgYW5jZXN0b3JzLCBhbmQgaW4gdGhlIHNwZWVjaCB0aGVuIG1hZGUsIHNvbWUgbWVuIGFyZSwgb24gc29tZSBvY2Nhc2lvbnMsIGZvdW5kIHdvcnRoeSBvZiB0aGUKICAgICAgIHJhbmsgb2YgdGhlaXIgYW5jZXN0b3JzLiBCdXQgbW9zdCBtZW4gb25seSBhY2NvbXBsaXNoIHRoaXMs4oCUbmFtZWx5LCB0byBtYWtlIGl0IHNlZW0KICAgICAgIHRoYXQgc28gdmFzdCBhIGRlYnQgaXMgZHVlIHRvIHRoZWlyIGFuY2VzdG9ycywgdGhhdCB0aGVyZSBpcyBzb21ldGhpbmcgc3RpbGwgbGVmdCB0byBiZSBwYWlkCiAgICAgICB0byB0aGVpciBwb3N0ZXJpdHkuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm9iaWxpczwvZm9yZWlnbj4u4oCd4oCUUmlkZGxlLCBMYXQuIERpY3QuIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkltYWdvPC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['2.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBJLCBpbmRlZWQsIGhhdmUgbm8gb3Bwb3J0dW5pdHkgb2YKICAgICAgIHNwZWFraW5nIGJlZm9yZSB5b3Ugb2YgbXkgYW5jZXN0b3JzLCBub3QgYmVjYXVzZSB0aGV5IHdlcmUgbm90IHN1Y2ggbWVuIGFzIHlvdSBzZWUgbWUgYWxzbyB0bwogICAgICAgYmUsIHdobyBhbSBib3JuIG9mIHRoZWlyIGJsb29kLCBhbmQgZWR1Y2F0ZWQgaW4gdGhlaXIgcHJpbmNpcGxlcywgYnV0IGJlY2F1c2UgdGhleSBoYWQgbmV2ZXIKICAgICAgIGFueSBzaGFyZSBvZiBwb3B1bGFyIHByYWlzZSwgb3Igb2YgdGhlIGxpZ2h0IG9mIGhvbm91cnMgY29uZmVycmVkIGJ5IHlvdS4gQW5kIG9mIG15c2VsZiBJCiAgICAgICBmZWFyIGxlc3QgaXQgbWF5IGxvb2sgbGlrZSBhcnJvZ2FuY2UgdG8gc3BlYWssIGFuZCB5ZXQgbGlrZSBpbmdyYXRpdHVkZSB0byBiZSBzaWxlbnQuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaXQgaXMgYSB2ZXJ5IHRyb3VibGVzb21lIHRoaW5nIGZvciBtZSBteXNlbGYgdG8KICAgICAgIGVudW1lcmF0ZSB0byB5b3UgdGhlIHB1cnN1aXRzIGJ5IHdoaWNoIEkgaGF2ZSBlYXJuZWQgdGhpcyBkaWduaXR5OyBhbmQsIG9uIHRoZSBvdGhlciBoYW5kLCBJCiAgICAgICBjYW5ub3QgcG9zc2libHkgYmUgc2lsZW50IGFib3V0IHlvdXIgZ3JlYXQga2luZG5lc3NlcyB0byBtZS4gV2hlcmVmb3JlIEkgd2lsbCBlbXBsb3kgYQogICAgICAgcmVhc29uYWJsZSBtb2RlcmF0aW9uIGluIHNwZWFraW5nLCBzbyBhcyB0byBtZW50aW9uIHRoZSBraW5kbmVzcyB3aGljaCBJIGhhdmUgcmVjZWl2ZWQgZnJvbQogICAgICAgeW91LiBJIHdpbGwgc3BlYWsgc2xpZ2h0bHkgb2YgdGhlIHJlYXNvbnMgd2h5IEkgYW0gdGhvdWdodCB0byBoYXZlIGRlc2VydmVkIHRoZSBncmVhdGVzdAogICAgICAgaG9ub3VyIHlvdSBjYW4gY29uZmVyLCBhbmQgeW91ciBzaW5ndWxhcmx5IGZhdm91cmFibGUganVkZ21lbnQgb2YgbWUuPGdhcCBjbGFzcz0idHJhbnNsYXRpb24iIGRlc2M9IioqKioqIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IEFmdGVyIGEgdmVyeSBsb25nIGludGVydmFsLCBhbG1vc3QgYmV5b25kIHRoZSBtZW1vcnkgb2YKICAgICAgIG91ciB0aW1lcywgeW91IGhhdmUgZm9yIHRoZSBmaXJzdCB0aW1lIG1hZGUgbWUsIGEgbmV3IG1hbiwgY29uc3VsOyBhbmQgeW91IGhhdmUgb3BlbmVkIHRoYXQKICAgICAgIHJhbmsgd2hpY2ggdGhlIG5vYmxlcyBoYXZlIGhlbGQgc3RyZW5ndGhlbmVkIGJ5IGd1YXJkcywgYW5kIGZlbmNlZCByb3VuZCBpbiBldmVyeSBwb3NzaWJsZQogICAgICAgbWFubmVyLCBpbiBteSBpbnN0YW5jZSBmaXJzdCwgYW5kIGhhdmUgcmVzb2x2ZWQgdGhhdCBpdCBzaG91bGQgaW4gZnV0dXJlIGJlIG9wZW4gdG8gdmlydHVlLgogICAgICAgTm9yIGhhdmUgeW91IG9ubHkgbWFkZSBtZSBjb25zdWwsIHRob3VnaCB0aGF0IGlzIG9mIGl0c2VsZiBhIG1vc3QgaG9ub3VyYWJsZSB0aGluZywgYnV0IHlvdQogICAgICAgaGF2ZSBtYWRlIG1lIHNvIGluIHN1Y2ggYSB3YXkgYXMgdmVyeSBmZXcgbm9ibGVzIGluIHRoaXMgY2l0eSBoYXZlIGV2ZXIgYmVlbiBtYWRlIGNvbnN1bHMKICAgICAgIGJlZm9yZSBpbiwgYW5kIG5vIG5ldyBtYW4gd2hhdGV2ZXIgYmVmb3JlIG1lLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBZnRlciBhIHZlcnkgbG9uZyBpbnRlcnZhbCwgYWxtb3N0IGJleW9uZCB0aGUgbWVtb3J5IG9mCiAgICAgICBvdXIgdGltZXMsIHlvdSBoYXZlIGZvciB0aGUgZmlyc3QgdGltZSBtYWRlIG1lLCBhIG5ldyBtYW4sIGNvbnN1bDsgYW5kIHlvdSBoYXZlIG9wZW5lZCB0aGF0CiAgICAgICByYW5rIHdoaWNoIHRoZSBub2JsZXMgaGF2ZSBoZWxkIHN0cmVuZ3RoZW5lZCBieSBndWFyZHMsIGFuZCBmZW5jZWQgcm91bmQgaW4gZXZlcnkgcG9zc2libGUKICAgICAgIG1hbm5lciwgaW4gbXkgaW5zdGFuY2UgZmlyc3QsIGFuZCBoYXZlIHJlc29sdmVkIHRoYXQgaXQgc2hvdWxkIGluIGZ1dHVyZSBiZSBvcGVuIHRvIHZpcnR1ZS4KICAgICAgIE5vciBoYXZlIHlvdSBvbmx5IG1hZGUgbWUgY29uc3VsLCB0aG91Z2ggdGhhdCBpcyBvZiBpdHNlbGYgYSBtb3N0IGhvbm91cmFibGUgdGhpbmcsIGJ1dCB5b3UKICAgICAgIGhhdmUgbWFkZSBtZSBzbyBpbiBzdWNoIGEgd2F5IGFzIHZlcnkgZmV3IG5vYmxlcyBpbiB0aGlzIGNpdHkgaGF2ZSBldmVyIGJlZW4gbWFkZSBjb25zdWxzCiAgICAgICBiZWZvcmUgaW4sIGFuZCBubyBuZXcgbWFuIHdoYXRldmVyIGJlZm9yZSBtZS4gPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yLCBpbiB0cnV0aCwgaWYgeW91IHBsZWFzZSB0byByZWNvbGxlY3QsIHlvdSB3aWxsIGZpbmQgdGhhdCB0aG9zZSBuZXcgbWVuIHdobyBoYXZlIGF0IGFueQogICAgICAgdGltZSBiZWVuIG1hZGUgY29uc3VscyB3aXRob3V0IGEgcmVwdWxzZSwgaGF2ZSBiZWVuIGVsZWN0ZWQgYWZ0ZXIgbG9uZyB0b2lsLCBhbmQgb24gc29tZQogICAgICAgY3JpdGljYWwgZW1lcmdlbmN5LCBoYXZpbmcgc3Rvb2QgZm9yIGl0IG1hbnkgeWVhcnMgYWZ0ZXIgdGhleSBoYWQgYmVlbiBwcmFldG9ycywgYW5kIGEgZ29vZAogICAgICAgZGVhbCBsYXRlciB0aGFuIHRoZXkgbWlnaHQgaGF2ZSBkb25lIGFjY29yZGluZyB0byB0aGUgbGF3cyByZWd1bGF0aW5nIHRoZSBhZ2Ugb2YgY2FuZGlkYXRlcwogICAgICAgZm9yIHRoZSBvZmZpY2U7IGJ1dCB0aGF0IHRob3NlIHdobyBzdG9vZCBmb3IgaXQgaW4gdGhlaXIgcmVndWxhciB5ZWFyIHdlcmUgbm90IGVsZWN0ZWQKICAgICAgIHdpdGhvdXQgYSByZXB1bHNlOyB0aGF0IEkgYW0gdGhlIG9ubHkgb25lIG9mIGFsbCB0aGUgbmV3IG1lbiB3aG9tIHdlIGNhbiByZW1lbWJlciB3aG8gaGF2ZQogICAgICAgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwIHRoZSBmaXJzdCBtb21lbnQgdGhhdCBieSBsYXcgSSBjb3VsZCzigJR3aG8gaGF2ZSBiZWVuCiAgICAgICBlbGVjdGVkIGNvbnN1bCB0aGUgZmlyc3QgdGltZSB0aGF0IEkgaGF2ZSBzdG9vZDsgc28gdGhhdCB0aGlzIGhvbm91ciB3aGljaCB5b3UgaGF2ZSBjb25mZXJyZWQKICAgICAgIG9uIG1lLCBoYXZpbmcgYmVlbiBzb3VnaHQgYnkgbWUgYXQgdGhlIHByb3BlciB0aW1lLCBhcHBlYXJzIG5vdCB0byBoYXZlIGJlZW4gZmlsY2hlZCBieSBtZSBvbgogICAgICAgdGhlIG9jY2FzaW9uIG9mIHNvbWUgdW5wb3B1bGFyIGNhbmRpZGF0ZSBvZmZlcmluZyBoaW1zZWxmLOKAlG5vdCB0byBoYXZlIGJlZW4gZ2FpbmVkCiAgICAgICBieSBsb25nIHBlcnNldmVyYW5jZSBpbiBhc2tpbmcgZm9yIGl0LCBidXQgdG8gaGF2ZSBiZWVuIGZhaXJseSBlYXJuZWQgYnkgbXkgd29ydGggYW5kCiAgICAgICBkaWduaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhpcywgYWxzbywgaXMgYSBtb3N0IGhvbm9yYWJsZSB0aGluZyBmb3IgbWUsIE8KICAgICAgIFJvbWFucywgd2hpY2ggSSBtZW50aW9uZWQgYSBmZXcgbWludXRlcyBhZ28s4oCUdGhhdCBJIGFtIHRoZSBmaXJzdCBuZXcgbWFuIGZvciBtYW55CiAgICAgICB5ZWFycyBvbiB3aG9tIHlvdSBoYXZlIGNvbmZlcnJlZCB0aGlzIGhvbm91cizigJR0aGF0IHlvdSBoYXZlIGNvbmZlcnJlZCBpdCBvbiBteQogICAgICAgZmlyc3QgYXBwbGljYXRpb24sIGluIG15IHByb3BlciB5ZWFyLiBCdXQgeWV0IG5vdGhpbmcgY2FuIGJlIG1vcmUgc3BsZW5kaWQgb3IgbW9yZSBob25vdXJhYmxlCiAgICAgICBmb3IgbWUgdGhhbiB0aGlzIGNpcmN1bXN0YW5jZSzigJR0aGF0IGF0IHRoZSBjb21pdGlhIGF0IHdoaWNoIEkgd2FzIGVsZWN0ZWQgeW91CiAgICAgICBkZWxpdmVyZWQgbm90IHlvdXIgYmFsbG90LCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPjxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3BlcnNOYW1lPiBzYXlzICh3aXRoIGV4cHJlc3MgcmVmZXJlbmNlIHRvIHRoaXMgcGFzc2FnZSwpIOKAnHRoZSBtZXRob2QKICAgICAgICBvZiBjaG9vc2luZyBjb25zdWxzIHdhcyBub3QgYnkgYW4gb3BlbiB2b3RlLCBidXQgYnkgYSBraW5kIG9mIGJhbGxvdCBvciBsaXR0bGUgdGlja2V0cyBvZgogICAgICAgIHdvb2QgZGlzdHJpYnV0ZWQgdG8gdGhlIGNpdGl6ZW5zIHdpdGggdGhlIG5hbWVzIG9mIHRoZSBjYW5kaWRhdGVzIHNldmVyYWxseSBpbnNjcmliZWQgb24KICAgICAgICBlYWNoOyBidXQgaW4gQ2ljZXJvJ3MgY2FzZSwgdGhlIHBlb3BsZSB3ZXJlIG5vdCBjb250ZW50IHdpdGggdGhpcyBzZWNyZXQgYW5kIHNpbGVudCB3YXkgb2YKICAgICAgICB0ZXN0aWZ5aW5nIHRoZWlyIGluY2xpbmF0aW9ucyBidXQgYmVmb3JlIHRoZXkgY2FtZSB0byBhbnkgc2NydXRpbnksIGxvdWRseSBhbmQgdW5pdmVyc2FsbHkKICAgICAgICBwcm9jbGFpbWVkIENpY2VybyB0aGUgZmlyc3QgY29uc3VsOyBzbyB0aGF0LCBhcyBoZSBoaW1zZWxmIGRlY2xhcmVkIGluIGhpcyBzcGVlY2ggdG8gdGhlbQogICAgICAgIGFmdGVyIGhpcyBlbGVjdGlvbiBoZSB3YXMgbm90IGNob3NlbiBieSB0aGUgdm90ZXMgb2YgcGFydGljdWxhciBjaXRpemVucywgYnV0IGJ5IHRoZSBjb21tb24KICAgICAgICBzdWZmcmFnZSBvZiB0aGUgY2l0eTsgbm9yIGRlY2xhcmVkIGJ5IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGJ1dCBvZiB0aGUgd2hvbGUgUm9tYW4KICAgICAgICBwZW9wbGUu4oCdPC9ub3RlPiB0aGUgdmluZGljYXRpb24gb2YgeW91ciBzaWxlbnQgbGliZXJ0eSwgYnV0IHlvdXIgZWFnZXIgdm9pY2VzIGFzCiAgICAgICB0aGUgd2l0bmVzc2VzIG9mIHlvdXIgZ29vZC13aWxsIHRvd2FyZHMsIGFuZCB6ZWFsIGZvciBtZS4gQW5kIHNvIGl0IHdhcyBub3QgdGhlIGxhc3QgdHJpYmUgb2YKICAgICAgIHRoZSB2b3RlcywgYnV0IHRoZSB2ZXJ5IGZpcnN0IG1vbWVudCBvZiB5b3VyIG1lZXRpbmcs4oCUaXQgd2FzIG5vdCB0aGUgc2luZ2xlIHZvaWNlcwogICAgICAgb2YgdGhlIGNyaWVycywgYnV0IHRoZSB3aG9sZSBSb21hbiBwZW9wbGUgd2l0aCBvbmUgdm9pY2UgdGhhdCBkZWNsYXJlZCBtZSBjb25zdWwuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzLCBhbHNvLCBpcyBhIG1vc3QgaG9ub3JhYmxlIHRoaW5nIGZvciBtZSwgTwogICAgICAgUm9tYW5zLCB3aGljaCBJIG1lbnRpb25lZCBhIGZldyBtaW51dGVzIGFnbyzigJR0aGF0IEkgYW0gdGhlIGZpcnN0IG5ldyBtYW4gZm9yIG1hbnkKICAgICAgIHllYXJzIG9uIHdob20geW91IGhhdmUgY29uZmVycmVkIHRoaXMgaG9ub3VyLOKAlHRoYXQgeW91IGhhdmUgY29uZmVycmVkIGl0IG9uIG15CiAgICAgICBmaXJzdCBhcHBsaWNhdGlvbiwgaW4gbXkgcHJvcGVyIHllYXIuIEJ1dCB5ZXQgbm90aGluZyBjYW4gYmUgbW9yZSBzcGxlbmRpZCBvciBtb3JlIGhvbm91cmFibGUKICAgICAgIGZvciBtZSB0aGFuIHRoaXMgY2lyY3Vtc3RhbmNlLOKAlHRoYXQgYXQgdGhlIGNvbWl0aWEgYXQgd2hpY2ggSSB3YXMgZWxlY3RlZCB5b3UKICAgICAgIGRlbGl2ZXJlZCBub3QgeW91ciBiYWxsb3QsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlkZGxldG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHNheXMgKHdpdGggZXhwcmVzcyByZWZlcmVuY2UgdG8gdGhpcyBwYXNzYWdlLCkg4oCcdGhlIG1ldGhvZAogICAgICAgIG9mIGNob29zaW5nIGNvbnN1bHMgd2FzIG5vdCBieSBhbiBvcGVuIHZvdGUsIGJ1dCBieSBhIGtpbmQgb2YgYmFsbG90IG9yIGxpdHRsZSB0aWNrZXRzIG9mCiAgICAgICAgd29vZCBkaXN0cmlidXRlZCB0byB0aGUgY2l0aXplbnMgd2l0aCB0aGUgbmFtZXMgb2YgdGhlIGNhbmRpZGF0ZXMgc2V2ZXJhbGx5IGluc2NyaWJlZCBvbgogICAgICAgIGVhY2g7IGJ1dCBpbiBDaWNlcm8ncyBjYXNlLCB0aGUgcGVvcGxlIHdlcmUgbm90IGNvbnRlbnQgd2l0aCB0aGlzIHNlY3JldCBhbmQgc2lsZW50IHdheSBvZgogICAgICAgIHRlc3RpZnlpbmcgdGhlaXIgaW5jbGluYXRpb25zIGJ1dCBiZWZvcmUgdGhleSBjYW1lIHRvIGFueSBzY3J1dGlueSwgbG91ZGx5IGFuZCB1bml2ZXJzYWxseQogICAgICAgIHByb2NsYWltZWQgQ2ljZXJvIHRoZSBmaXJzdCBjb25zdWw7IHNvIHRoYXQsIGFzIGhlIGhpbXNlbGYgZGVjbGFyZWQgaW4gaGlzIHNwZWVjaCB0byB0aGVtCiAgICAgICAgYWZ0ZXIgaGlzIGVsZWN0aW9uIGhlIHdhcyBub3QgY2hvc2VuIGJ5IHRoZSB2b3RlcyBvZiBwYXJ0aWN1bGFyIGNpdGl6ZW5zLCBidXQgYnkgdGhlIGNvbW1vbgogICAgICAgIHN1ZmZyYWdlIG9mIHRoZSBjaXR5OyBub3IgZGVjbGFyZWQgYnkgdGhlIHZvaWNlIG9mIHRoZSBjcmllciwgYnV0IG9mIHRoZSB3aG9sZSBSb21hbgogICAgICAgIHBlb3BsZS7igJ08L25vdGU+IHRoZSB2aW5kaWNhdGlvbiBvZiB5b3VyIHNpbGVudCBsaWJlcnR5LCBidXQgeW91ciBlYWdlciB2b2ljZXMgYXMKICAgICAgIHRoZSB3aXRuZXNzZXMgb2YgeW91ciBnb29kLXdpbGwgdG93YXJkcywgYW5kIHplYWwgZm9yIG1lLiBBbmQgc28gaXQgd2FzIG5vdCB0aGUgbGFzdCB0cmliZSBvZgogICAgICAgdGhlIHZvdGVzLCBidXQgdGhlIHZlcnkgZmlyc3QgbW9tZW50IG9mIHlvdXIgbWVldGluZyzigJRpdCB3YXMgbm90IHRoZSBzaW5nbGUgdm9pY2VzCiAgICAgICBvZiB0aGUgY3JpZXJzLCBidXQgdGhlIHdob2xlIFJvbWFuIHBlb3BsZSB3aXRoIG9uZSB2b2ljZSB0aGF0IGRlY2xhcmVkIG1lIGNvbnN1bC4gPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3BlcnNOYW1lPiBzYXlzICh3aXRoIGV4cHJlc3MgcmVmZXJlbmNlIHRvIHRoaXMgcGFzc2FnZSwpIOKAnHRoZSBtZXRob2QKICAgICAgICBvZiBjaG9vc2luZyBjb25zdWxzIHdhcyBub3QgYnkgYW4gb3BlbiB2b3RlLCBidXQgYnkgYSBraW5kIG9mIGJhbGxvdCBvciBsaXR0bGUgdGlja2V0cyBvZgogICAgICAgIHdvb2QgZGlzdHJpYnV0ZWQgdG8gdGhlIGNpdGl6ZW5zIHdpdGggdGhlIG5hbWVzIG9mIHRoZSBjYW5kaWRhdGVzIHNldmVyYWxseSBpbnNjcmliZWQgb24KICAgICAgICBlYWNoOyBidXQgaW4gQ2ljZXJvJ3MgY2FzZSwgdGhlIHBlb3BsZSB3ZXJlIG5vdCBjb250ZW50IHdpdGggdGhpcyBzZWNyZXQgYW5kIHNpbGVudCB3YXkgb2YKICAgICAgICB0ZXN0aWZ5aW5nIHRoZWlyIGluY2xpbmF0aW9ucyBidXQgYmVmb3JlIHRoZXkgY2FtZSB0byBhbnkgc2NydXRpbnksIGxvdWRseSBhbmQgdW5pdmVyc2FsbHkKICAgICAgICBwcm9jbGFpbWVkIENpY2VybyB0aGUgZmlyc3QgY29uc3VsOyBzbyB0aGF0LCBhcyBoZSBoaW1zZWxmIGRlY2xhcmVkIGluIGhpcyBzcGVlY2ggdG8gdGhlbQogICAgICAgIGFmdGVyIGhpcyBlbGVjdGlvbiBoZSB3YXMgbm90IGNob3NlbiBieSB0aGUgdm90ZXMgb2YgcGFydGljdWxhciBjaXRpemVucywgYnV0IGJ5IHRoZSBjb21tb24KICAgICAgICBzdWZmcmFnZSBvZiB0aGUgY2l0eTsgbm9yIGRlY2xhcmVkIGJ5IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGJ1dCBvZiB0aGUgd2hvbGUgUm9tYW4KICAgICAgICBwZW9wbGUu4oCdPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pZGRsZXRvbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['2.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgdGhpbmsgdGhpcyBlbWluZW50IGFuZCB1bnByZWNlZGVudGVkIGtpbmRuZXNzIG9mIHlvdXJzLCBPIFJvbWFucywgb2YgZ3JlYXQgd2VpZ2h0IGFzIGEKICAgICAgIHJld2FyZCBmb3IgbXkgY291cmFnZSwgYW5kIGFzIGEgc291cmNlIG9mIGpveSB0byBtZSwgYnV0IHN0aWxsIG1vcmUgY2FsY3VsYXRlZCB0byBpbXByZXNzIG1lCiAgICAgICB3aXRoIGNhcmUgYW5kIGFueGlldHkuIEZvciwgTyBSb21hbnMsIG1hbnkgYW5kIGdyYXZlIHRob3VnaHRzIG9jY3VweSBteSBtaW5kLCB3aGljaCBhbGxvdyBtZQogICAgICAgYnV0IGxpdHRsZSByZXN0IGRheSBvciBuaWdodC4gRmlyc3QsIHRoZXJlIGlzIGFueGlldHkgYWJvdXQgZGlzY2hhcmdpbmcgdGhlIGR1dGllcyBvZiB0aGUKICAgICAgIGNvbnN1bHNoaXAgd2hpY2ggaXMgYSBkaWZmaWN1bHQgYW5kIGltcG9ydGFudCBidXNpbmVzcyB0byBhbGwgbWVuLCBhbmQgZXNwZWNpYWxseSB0byBtZSBhYm92ZQogICAgICAgYWxsIG90aGVyIG1lbjsgZm9yIGlmIEkgZXJyLCBJIHNoYWxsIG9idGFpbiBubyBwYXJkb27igJRpZiBJIGRvIHdlbGwsIEkgc2hhbGwgZ2V0IGJ1dAogICAgICAgbGl0dGxlIHByYWlzZSwgYW5kIHRoYXQsIHRvbywgZXh0b3J0ZWQgZnJvbSB1bndpbGxpbmcgcGVvcGxl4oCUaWYgSSBhbSBpbiBkb3VidCwgSQogICAgICAgaGF2ZSBubyBmYWl0aGZ1bCBjb3Vuc2Vsb3JzIHRvIHdob20gSSBjYW4gYXBwbHnigJRpZiBJIGFtIGluIGRpZmZpY3VsdHksIEkgaGF2ZSBubwogICAgICAgc3VyZSBhc3Npc3RhbmNlIGZyb20gdGhlIG5vYmxlcyBvbiB3aGljaCBJIGNhbiBkZXBlbmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0LCBpZiBJIGFsb25lIHdlcmUgaW4gZGFuZ2VyLCBJIHdvdWxkIGJlYXIgaXQsIE8gUm9tYW5zLCB3aXRoIG1vcmUgZXF1YW5pbWl0eTsgYnV0IHRoZXJlCiAgICAgICBhcHBlYXJzIHRvIG1lIHRvIGJlIHNvbWUgbWVuIGRldGVybWluZWQsIGlmIHRoZXkgdGhpbmsgdGhhdCBJIGhhdmUgZG9uZSBhbnl0aGluZyB3cm9uZ2x5IG5vdAogICAgICAgb25seSBpbnRlbnRpb25hbGx5LCBidXQgZXZlbiBieSBjaGFuY2UsIHRvIGJsYW1lIGFsbCBvZiB5b3UgZm9yIGhhdmluZyBwcmVmZXJyZWQgbWUgdG8gdGhlCiAgICAgICBub2JsZXMuIEJ1dCBJIHRoaW5rLCBPIFJvbWFucyB0aGF0IEkgb3VnaHQgdG8gZW5kdXJlIGV2ZXJ5dGhpbmcgcmF0aGVyIHRoYW4gbm90IGRpc2NoYXJnZSB0aGUKICAgICAgIGR1dGllcyBvZiBteSBjb25zdWxzaGlwIGluIHN1Y2ggYSBtYW5uZXIsIGFzIGJ5IGFsbCBteSBhY3Rpb25zIGFuZCBjb3Vuc2VscyB0byBjb21wZWwgbWVuIHRvCiAgICAgICBwcmFpc2UgeW91ciBhY3Rpb24gYW5kIGNvdW5zZWwgd2l0aCByZXNwZWN0IHRvIG1lLiBUaGVyZSBpcyBhbHNvIHRoaXMgYWRkZWQgdG8gdGhlIGdyZWF0CiAgICAgICBsYWJvdXIgYW5kIGRpZmZpY3VsdHkgd2hpY2ggSSBzZWUgYmVmb3JlIG1lIGluIGRpc2NoYXJnaW5nIHRoZSBkdXRpZXMgb2YgbXkgb2ZmaWNlLCB0aGF0IEkKICAgICAgIGhhdmUgbWFkZSB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gYWRvcHQgdGhlIHNhbWUgcnVsZSBhbmQgcHJpbmNpcGxlIG9mIGNvbmR1Y3Qgd2hpY2gKICAgICAgIGZvcm1lciBjb25zdWxzIGhhdmU7IHNvbWUgb2Ygd2hvbSBoYXZlIGNhcmVmdWxseSBhdm9pZGVkIGFsbCBhcHByb2FjaCB0byB0aGlzIHBsYWNlLCBhbmQgdGhlCiAgICAgICBzaWdodCBvZiB5b3UsIGFuZCBvdGhlcnMgaGF2ZSBhdCBhbGwgZXZlbnRzIG5vdCBiZWVuIHZlcnkgZm9uZCBvZiBpdC4gQnV0IEkgbm90IG9ubHkgZGVjbGFyZQogICAgICAgaW4gdGhpcyBwbGFjZSB3aGVyZSBpdCBpcyBleGNlZWRpbmdseSBlYXN5IHRvIGRvIGl0LCBidXQgSSBzYWlkIGluIG15IHZlcnkgZmlyc3Qgc3BlZWNoIG9uCiAgICAgICB0aGUgZmlyc3Qgb2YgSmFudWFyeSwgaW4gdGhlIHNlbmF0ZSBpdHNlbGYsIHdoaWNoIGRpZCBub3Qgc2VlbSBsaWtlbHkgdG8gYmUgc28gZmF2b3VyYWJsZSBhCiAgICAgICBwbGFjZSBmb3IgdGhlIGV4cHJlc3Npb24sIHRoYXQgSSB3b3VsZCBiZSBhIGNvbnN1bCBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaXMgaXQgcG9zc2libGUgZm9yIG1lLCBrbm93aW5nLCBhcyBJIGRvLCB0aGF0IEkgaGF2ZSBiZWVuIG1hZGUKICAgICAgIGNvbnN1bCwgbm90IGJ5IHRoZSB6ZWFsIG9mIHRoZSBwb3dlcmZ1bCBjaXRpemVucywgbm9yIGJ5IHRoZSBwcmVwb25kZXJhdGluZyBpbmZsdWVuY2Ugb2YgYQogICAgICAgZmV3IG1lbiwgYnV0IGJ5IHRoZSBkZWxpYmVyYXRlIGp1ZGdtZW50IG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGF0LCB0b28sIGluIHN1Y2ggYSB3YXkgYXMKICAgICAgIHRvIGJlIHByZWZlcnJlZCB0byBtZW4gb2YgdGhlIHZlcnkgaGlnaGVzdCByYW5rLCB0byBhdm9pZCwgYm90aCBpbiB0aGlzIG1hZ2lzdHJhY3kgYW5kCiAgICAgICB0aHJvdWdob3V0IG15IHdob2xlIGxpZmUsIGRldm90aW5nIG15c2VsZiB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBOb3IgaXMgaXQgcG9zc2libGUgZm9yIG1lLCBrbm93aW5nLCBhcyBJIGRvLCB0aGF0IEkgaGF2ZSBiZWVuIG1hZGUKICAgICAgIGNvbnN1bCwgbm90IGJ5IHRoZSB6ZWFsIG9mIHRoZSBwb3dlcmZ1bCBjaXRpemVucywgbm9yIGJ5IHRoZSBwcmVwb25kZXJhdGluZyBpbmZsdWVuY2Ugb2YgYQogICAgICAgZmV3IG1lbiwgYnV0IGJ5IHRoZSBkZWxpYmVyYXRlIGp1ZGdtZW50IG9mIHRoZSBSb21hbiBwZW9wbGUsIGFuZCB0aGF0LCB0b28sIGluIHN1Y2ggYSB3YXkgYXMKICAgICAgIHRvIGJlIHByZWZlcnJlZCB0byBtZW4gb2YgdGhlIHZlcnkgaGlnaGVzdCByYW5rLCB0byBhdm9pZCwgYm90aCBpbiB0aGlzIG1hZ2lzdHJhY3kgYW5kCiAgICAgICB0aHJvdWdob3V0IG15IHdob2xlIGxpZmUsIGRldm90aW5nIG15c2VsZiB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlbiwgaG93ZXZlciwgSSBzcGVhayBvZiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIEkgaGF2ZSBncmVhdCBuZWVkIG9mIHlvdXIgd2lzZG9tIGluCiAgICAgICBnaXZpbmcgdGhlIHByb3BlciBtZWFuaW5nIGFuZCBpbnRlcnByZXRhdGlvbiB0byB0aGlzIGV4cHJlc3Npb24uIEZvciB0aGVyZSBpcyBhIGdyZWF0IGVycm9yCiAgICAgICBhYnJvYWQsIGJ5IHJlYXNvbiBvZiB0aGUgdHJlYWNoZXJvdXMgcHJldGVuY2VzIG1hZGUgYnkgc29tZSBwZW9wbGUsIHdobywgdGhvdWdoIHRoZXkgb3Bwb3NlCiAgICAgICBhbmQgaGluZGVyIG5vdCBvbmx5IHRoZSBhZHZhbnRhZ2UgYnV0IGV2ZW4gdGhlIHNhZmV0eSBvZiB0aGUgcGVvcGxlLCBzdGlsbCBlbmRlYXZvdXIgYnkgdGhlaXIKICAgICAgIHNwZWVjaGVzIHRvIG1ha2UgbWVuIGJlbGlldmUgdGhlbSB6ZWFsb3VzIGZvciB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+IEksIE8gUm9tYW5zLCBrbm93IGluIHdoYXQgY29uZGl0aW9uIEkgcmVjZWl2ZWQgdGhlIHJlcHVibGljIG9uIHRoZSBmaXJzdCBvZgogICAgICAgSmFudWFyeTogZnVsbCBvZiBhbnhpZXR5LCBmdWxsIG9mIGZlYXIuIFRoZXJlIHdhcyBubyBldmlsLCBubyBtaXNmb3J0dW5lIHdoaWNoIHRoZSBnb29kIHdlcmUKICAgICAgIG5vdCBkcmVhZGluZyBhbmQgdGhlIGJhZCBsb29raW5nIG91dCBmb3IuIEV2ZXJ5IHNvcnQgb2Ygc2VkaXRpb3VzIGRlc2lnbiBhZ2FpbnN0IHRoZSBleGlzdGluZwogICAgICAgY29uc3RpdHV0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGFnYWluc3QgeW91ciB0cmFucXVpbGxpdHksIHdhcyBzYWlkIHRvIGJlIGluCiAgICAgICBjb250ZW1wbGF0aW9uLOKAlHNvbWUgc3VjaCB0byBoYXZlIGJlZW4gYWN0dWFsbHkgc2V0IG9uIGZvb3QgdGhlIG1vbWVudCB3ZSB3ZXJlCiAgICAgICBlbGVjdGVkIGNvbnN1bHMuIEFsbCBjb25maWRlbmNlIHdhcyBiYW5pc2hlZCBmcm9tIHRoZSBmb3J1bSwgbm90IGJ5IHRoZSBzdHJva2Ugb2YgYW55IG5ldwogICAgICAgY2FsYW1pdHksIGJ1dCBieSB0aGUgZ2VuZXJhbCBzdXNwaWNpb24gZW50ZXJ0YWluZWQgb2YgdGhlIGNvdXJ0cyBvZiBqdXN0aWNlLCBhbmQgYnkgdGhlCiAgICAgICBkaXNvcmRlciBpbnRvIHdoaWNoIHRoZXkgaGFkIGZhbGxlbiwgYW5kIGJ5IHRoZSBjb25zdGFudCByZXZlcnNhbCBvZiBwcmV2aW91cyBkZWNpc2lvbnMuIE5ldwogICAgICAgYXV0aG9yaXR5LCBleHRyYW9yZGluYXJ5IHBvd2Vycywgc3VpdGVkIG5vdCB0byBjb21tYW5kZXJzLCBidXQgdG8ga2luZ3MsIHdlcmUgc3VwcG9zZWQgdG8gYmUKICAgICAgIGFpbWVkIGF0LiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJLCBPIFJvbWFucywga25vdyBpbiB3aGF0IGNvbmRpdGlvbiBJIHJlY2VpdmVkIHRoZSByZXB1YmxpYyBvbiB0aGUgZmlyc3Qgb2YKICAgICAgIEphbnVhcnk6IGZ1bGwgb2YgYW54aWV0eSwgZnVsbCBvZiBmZWFyLiBUaGVyZSB3YXMgbm8gZXZpbCwgbm8gbWlzZm9ydHVuZSB3aGljaCB0aGUgZ29vZCB3ZXJlCiAgICAgICBub3QgZHJlYWRpbmcgYW5kIHRoZSBiYWQgbG9va2luZyBvdXQgZm9yLiBFdmVyeSBzb3J0IG9mIHNlZGl0aW91cyBkZXNpZ24gYWdhaW5zdCB0aGUgZXhpc3RpbmcKICAgICAgIGNvbnN0aXR1dGlvbiBvZiB0aGUgcmVwdWJsaWMsIGFuZCBhZ2FpbnN0IHlvdXIgdHJhbnF1aWxsaXR5LCB3YXMgc2FpZCB0byBiZSBpbgogICAgICAgY29udGVtcGxhdGlvbizigJRzb21lIHN1Y2ggdG8gaGF2ZSBiZWVuIGFjdHVhbGx5IHNldCBvbiBmb290IHRoZSBtb21lbnQgd2Ugd2VyZQogICAgICAgZWxlY3RlZCBjb25zdWxzLiBBbGwgY29uZmlkZW5jZSB3YXMgYmFuaXNoZWQgZnJvbSB0aGUgZm9ydW0sIG5vdCBieSB0aGUgc3Ryb2tlIG9mIGFueSBuZXcKICAgICAgIGNhbGFtaXR5LCBidXQgYnkgdGhlIGdlbmVyYWwgc3VzcGljaW9uIGVudGVydGFpbmVkIG9mIHRoZSBjb3VydHMgb2YganVzdGljZSwgYW5kIGJ5IHRoZQogICAgICAgZGlzb3JkZXIgaW50byB3aGljaCB0aGV5IGhhZCBmYWxsZW4sIGFuZCBieSB0aGUgY29uc3RhbnQgcmV2ZXJzYWwgb2YgcHJldmlvdXMgZGVjaXNpb25zLiBOZXcKICAgICAgIGF1dGhvcml0eSwgZXh0cmFvcmRpbmFyeSBwb3dlcnMsIHN1aXRlZCBub3QgdG8gY29tbWFuZGVycywgYnV0IHRvIGtpbmdzLCB3ZXJlIHN1cHBvc2VkIHRvIGJlCiAgICAgICBhaW1lZCBhdC4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGFzIEkgZGlkIG5vdCBvbmx5IHN1c3BlY3QgdGhlc2UgdGhpbmdzLCBidXQgY2xlYXJseSBzYXcgdGhlbSwgKGZvciBpbmRlZWQgdGhlcmUgd2FzIG5vCiAgICAgICBzZWNyZXQgbWFkZSBvZiB3aGF0IHdhcyBiZWluZyBkb25lLCkgSSBzYWlkIGluIHRoZSBzZW5hdGUgdGhhdCBJIHdvdWxkIGluIHRoaXMgbWFnaXN0cmFjeQogICAgICAgcHJvdmUgYSBjb25zdWwgZGV2b3RlZCB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIEZvciB3aGF0IGlzIHRoZXJlIHNvIGFkdmFudGFnZW91cyB0bwogICAgICAgdGhlIHBlb3BsZSBhcyBwZWFjZT8gaW4gd2hpY2ggbm90IG9ubHkgdGhlIGFuaW1hbHMgdG8gd2hvbSBuYXR1cmUgaGFzIGdpdmVuIHNlbnNlLCBidXQgZXZlbgogICAgICAgdGhlIGhvdXNlcyBhbmQgZmllbGRzIGFwcGVhciB0byBtZSB0byByZWpvaWNlLiBXaGF0IGlzIHNvIGFkdmFudGFnZW91cyB0byB0aGUgcGVvcGxlIGFzCiAgICAgICBsaWJlcnR5PyB3aGljaCBpcyBzb3VnaHQgb3V0IGFuZCBwcmVmZXJyZWQgdG8gZXZlcnl0aGluZywgbm90IG9ubHkgYnkgbWVuLCBidXQgZXZlbiBieSB0aGUKICAgICAgIGJlYXN0cy4gV2hhdCBpcyBzbyBhZHZhbnRhZ2VvdXMgdG8gdGhlIHBlb3BsZSBhcyB0cmFucXVpbGxpdHk/IHdoaWNoIGlzIHNvIGRlbGlnaHRmdWwgYQogICAgICAgdGhpbmcsIHRoYXQgYm90aCB5b3UgYW5kIHlvdXIgYW5jZXN0b3JzLCBhbmQgZXZlcnkgYnJhdmUgbWFuLCB0aGlua3MgaXQgd29ydGggaGlzIHdoaWxlIHRvCiAgICAgICBlbmNvdW50ZXIgdGhlIGdyZWF0ZXN0IGxhYm91cnMsIGluIG9yZGVyIGF0IGxlbmd0aCB0byBlbmpveSB0cmFucXVpbGxpdHksIHBhcnRpY3VsYXJseSBpZiBoZQogICAgICAgYmUgYSBtYW4gaW4gY29tbWFuZCwgb3IgYSBtYW4gb2YgaGlnaCByYW5rLiBBbmQgd2UsIHRoZXJlZm9yZSwgYXJlIGJvdW5kIHRvIGdpdmUgZ3JlYXQgcHJhaXNlCiAgICAgICBhbmQgdG8gc2hvdyBncmVhdCBncmF0aXR1ZGUgdG8gb3VyIGFuY2VzdG9ycywgYmVjYXVzZSBpdCBpcyBvd2luZyB0byB0aGVpciBsYWJvdXJzIHRoYXQgd2UKICAgICAgIGFyZSBhYmxlIHRvIGVuam95IHRyYW5xdWlsbGl0eSB3aXRob3V0IHJpc2suIEhvdyB0aGVuIGNhbiBJIGF2b2lkIGJlaW5nIGRldm90ZWQgdG8gdGhlCiAgICAgICBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZSwgTyBSb21hbnMsIHdoZW4gSSBzZWUgYWxsIHRoZXNlIHRoaW5ncyzigJRvdXIgcGVhY2UgYWJyb2FkLAogICAgICAgYW5kIHRoZSBsaWJlcnR5IHdoaWNoIGJlbG9uZ3MgdG8gdGhlIFJvbWFuIHJhY2UgYW5kIFJvbWFuIG5hbWUsIGFuZCBvdXIgZG9tZXN0aWMKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIGV2ZXJ5dGhpbmcsIGluIHNob3J0LCB3aGljaCBpcyBjb25zaWRlcmVkIGJ5IHlvdSBhcyB2YWx1YWJsZSBvciBob25vdXJhYmxlLAogICAgICAgZW50cnVzdGVkIHRvIHRoZSBnb29kIGZhaXRoLCBhbmQsIGFzIGl0IHdlcmUsIHRvIHRoZSBwcm90ZWN0aW9uIG9mIG15IGNvbnN1bHNoaXA/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBPIFJvbWFucywgYSBwcm9taXNlZCBsaWJlcmFsaXR5IHdoaWNoLCBob3dldmVyIHlvdSBtYXkgYmUKICAgICAgIGVuY291cmFnZWQgYnkgd29yZHMgdG8gZXhwZWN0IGl0LCBjYW5ub3QgYmUgcGVyZm9ybWVkIGJ5IGFueSBwb3NzaWJsZSBtZWFucyB3aXRob3V0CiAgICAgICBleGhhdXN0aW5nIHRoZSB0cmVhc3VyeSwgb3VnaHQgbm90IHRvIGFwcGVhciB0byB5b3UgYW4gYWdyZWVhYmxlIG1lYXN1cmUsIG9yIG9uZSBjYWxjdWxhdGVkCiAgICAgICB0byBwcm9tb3RlIHlvdXIgcmVhbCBpbnRlcmVzdHMuIE5vciBhcmUgdGhlIGRpc3R1cmJhbmNlcyBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCB0aGUKICAgICAgIHJldmVyc2FscyBvZiBqdWRpY2lhbCBkZWNpc2lvbnMsIGFuZCB0aGUgcmVzdG9yYXRpb24gb2YgY29udmljdGVkIHBlcnNvbnMgdG8gYmUgY29uc2lkZXJlZCBhcwogICAgICAgbWVhc3VyZXMgYWR2YW50YWdlb3VzIHRvIHRoZSBwZW9wbGU7IGZvciB0aGV5IGFyZSByYXRoZXIgdGhlIHByZWx1ZGVzIHRvIHRoZSB0b3RhbCBydWluIG9mCiAgICAgICBjaXRpZXMgd2hvc2UgYWZmYWlycyBhcmUgYWxyZWFkeSBpbiBhIGZhbGxpbmcgYW5kIGFsbW9zdCBkZXNwZXJhdGUgc3RhdGUuIE5vciwgaWYgYW55IG1lbgogICAgICAgcHJvbWlzZSBsYW5kcyB0byB0aGUgUm9tYW4gcGVvcGxlLCBvciBpZiB0aGV5IGhvbGQgb3V0IHRvIHlvdSwgdW5kZXIgZmFsc2UgcHJldGVuY2VzLCBob3BlcwogICAgICAgb2Ygc3VjaCB0aGluZ3MsIHdoaWxlIGluIHNlY3JldCB0aGV5IGFyZSBrZWVwaW5nIGVudGlyZWx5IGRpZmZlcmVudCBvYmplY3RzIGluIHZpZXcsIGFyZSB0aGV5CiAgICAgICB0byBiZSB0aG91Z2h0IGRldm90ZWQgdG8gdGhlIHRydWUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBPIFJvbWFucywgYSBwcm9taXNlZCBsaWJlcmFsaXR5IHdoaWNoLCBob3dldmVyIHlvdSBtYXkgYmUKICAgICAgIGVuY291cmFnZWQgYnkgd29yZHMgdG8gZXhwZWN0IGl0LCBjYW5ub3QgYmUgcGVyZm9ybWVkIGJ5IGFueSBwb3NzaWJsZSBtZWFucyB3aXRob3V0CiAgICAgICBleGhhdXN0aW5nIHRoZSB0cmVhc3VyeSwgb3VnaHQgbm90IHRvIGFwcGVhciB0byB5b3UgYW4gYWdyZWVhYmxlIG1lYXN1cmUsIG9yIG9uZSBjYWxjdWxhdGVkCiAgICAgICB0byBwcm9tb3RlIHlvdXIgcmVhbCBpbnRlcmVzdHMuIE5vciBhcmUgdGhlIGRpc3R1cmJhbmNlcyBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCB0aGUKICAgICAgIHJldmVyc2FscyBvZiBqdWRpY2lhbCBkZWNpc2lvbnMsIGFuZCB0aGUgcmVzdG9yYXRpb24gb2YgY29udmljdGVkIHBlcnNvbnMgdG8gYmUgY29uc2lkZXJlZCBhcwogICAgICAgbWVhc3VyZXMgYWR2YW50YWdlb3VzIHRvIHRoZSBwZW9wbGU7IGZvciB0aGV5IGFyZSByYXRoZXIgdGhlIHByZWx1ZGVzIHRvIHRoZSB0b3RhbCBydWluIG9mCiAgICAgICBjaXRpZXMgd2hvc2UgYWZmYWlycyBhcmUgYWxyZWFkeSBpbiBhIGZhbGxpbmcgYW5kIGFsbW9zdCBkZXNwZXJhdGUgc3RhdGUuIE5vciwgaWYgYW55IG1lbgogICAgICAgcHJvbWlzZSBsYW5kcyB0byB0aGUgUm9tYW4gcGVvcGxlLCBvciBpZiB0aGV5IGhvbGQgb3V0IHRvIHlvdSwgdW5kZXIgZmFsc2UgcHJldGVuY2VzLCBob3BlcwogICAgICAgb2Ygc3VjaCB0aGluZ3MsIHdoaWxlIGluIHNlY3JldCB0aGV5IGFyZSBrZWVwaW5nIGVudGlyZWx5IGRpZmZlcmVudCBvYmplY3RzIGluIHZpZXcsIGFyZSB0aGV5CiAgICAgICB0byBiZSB0aG91Z2h0IGRldm90ZWQgdG8gdGhlIHRydWUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIEkgd2lsbCBzcGVhayB0aGUgdHJ1dGgsIE8gUm9tYW5zOyBJIGNhbm5vdCBmaW5kIGZhdWx0IHdpdGggdGhlIGdlbmVyYWwgcHJpbmNpcGxlIG9mIGFuCiAgICAgICBhZ3JhcmlhbiBsYXcsIGZvciBpdCBvY2N1cnMgdG8gbXkgbWluZCB0aGF0IHR3byBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgdHdvIG1vc3QgYWJsZSBtZW4sIHR3bwogICAgICAgbWVuIG1vc3QgdGhvcm91Z2hseSBhdHRhY2hlZCB0byB0aGUgUm9tYW4gcGVvcGxlLCBUaWJlcml1cyBhbmQgQ2FpdXMgR3JhY2NodXMsIGVzdGFibGlzaGVkCiAgICAgICB0aGUgcGVvcGxlIG9uIHB1YmxpYyBkb21haW5zIHdoaWNoIGhhZCBwcmV2aW91c2x5IGJlZW4gb2NjdXBpZWQgYnkgcHJpdmF0ZSBpbmRpdmlkdWFscy4gTm9yCiAgICAgICBhbSBJIGEgY29uc3VsIG9mIHN1Y2ggb3BpbmlvbnMgYXMgdG8gdGhpbmsgaXQgd3JvbmcsIGFzIG1vc3QgbWVuIGRvLCB0byBwcmFpc2UgdGhlIEdyYWNjaGk7CiAgICAgICBieSB3aG9zZSBjb3Vuc2VscywgYW5kIHdpc2RvbSwgYW5kIGxhd3MsIEkgc2VlIHRoYXQgbWFueSBwYXJ0cyBvZiB0aGUgcmVwdWJsaWMgaGF2ZSBiZWVuCiAgICAgICBncmVhdGx5IHN0cmVuZ3RoZW5lZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIHdoZW4gYXQgdGhlIHZlcnkKICAgICAgIGJlZ2lubmluZywgSSwgYmVpbmcgdGhlIGNvbnN1bCBlbGVjdCwgd2FzIGluZm9ybWVkIHRoYXQgdGhlIHRyaWJ1bmVzIGVsZWN0IG9mIHRoZSBwZW9wbGUgd2VyZQogICAgICAgZHJhd2luZyB1cCBhbiBhZ3JhcmlhbiBsYXcsIEkgd2lzaGVkIHRvIGFzY2VydGFpbiB3aGF0IHRoZWlyIHBsYW5zIHdlcmUuIEluIHRydXRoLCBJIHRob3VnaHQKICAgICAgIHRoYXQsIHNpbmNlIHdlIHdlcmUgYm90aCB0byBhY3QgYXMgbWFnaXN0cmF0ZXMgaW4gdGhlIHNhbWUgeWVhciwgaXQgd2FzIHJpZ2h0IHRoYXQgdGhlcmUKICAgICAgIHNob3VsZCBiZSBzb21lIHVuaW9uIGJldHdlZW4gdXMsIGZvciB0aGUgcHVycG9zZSBvZiBnb3Zlcm5pbmcgdGhlIHJlcHVibGljIHdpc2VseSBhbmQKICAgICAgIHN1Y2Nlc3NmdWxseS4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBJIHdpc2hlZCB0byBqb2luIHRoZW0gZmFtaWxpYXJseSBpbgogICAgICAgY29udmVyc2F0aW9uLCBJIHdhcyBzaHV0IG91dDsgdGhlaXIgcHJvamVjdHMgd2VyZSBjb25jZWFsZWQgZnJvbSBtZTogYW5kIHdoZW4gSSBhc3N1cmVkIHRoZW0KICAgICAgIHRoYXQsIGlmIHRoZSBsYXcgYXBwZWFyZWQgdG8gbWUgdG8gYmUgYWR2YW50YWdlb3VzIHRvIHRoZSBSb21hbiBwZW9wbGUsIEkgd291bGQgYXNzaXN0IHRoZW0KICAgICAgIGluIGl0IGFuZCBwcm9tb3RlIGl0LCBzdGlsbCB0aGV5IHJlamVjdGVkIHRoaXMgbGliZXJhbGl0eSBvZiBtaW5lIHdpdGggc2Nvcm4sIGFuZCBzYWlkIHRoYXQgSQogICAgICAgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8gYXBwcm92ZSBvZiBhbnkgbGliZXJhbCBtZWFzdXJlcy4gSSBjZWFzZWQgdG8gb2ZmZXIgbXlzZWxmIHRvCiAgICAgICB0aGVtLCBsZXN0IHBlcmNoYW5jZSBteSBpbXBvcnR1bml0eSBzaG91bGQgc2VlbSB0byB0aGVtIHRyZWFjaGVyb3VzIG9yIGltcHVkZW50LiBJbiB0aGUKICAgICAgIG1lYW50aW1lIHRoZXkgZGlkIG5vdCBjZWFzZSB0byBoYXZlIHNlY3JldCBtZWV0aW5ncyBhbW9uZyB0aGVtc2VsdmVzLCB0byBpbnZpdGUgc29tZSBwcml2YXRlCiAgICAgICBpbmRpdmlkdWFscyB0byB0aGVtLCBhbmQgdG8gY2hvb3NlIG5pZ2h0IGFuZCBkYXJrbmVzcyBmb3IgdGhlaXIgY2xhbmRlc3RpbmUgZGVsaWJlcmF0aW9ucy4KICAgICAgIEFuZCB3aGF0IGdyZWF0IGFsYXJtIHRoaXMgY29uZHVjdCBvZiB0aGVpcnMgY2F1c2VkIHVzLCB5b3UgbWF5IGVhc2lseSBkaXZpbmUgYnkgeW91ciBvd24KICAgICAgIGNvbmplY3R1cmVzIGZvdW5kZWQgb24gdGhlIGFueGlldHkgd2hpY2ggeW91IHlvdXJzZWx2ZXMgZXhwZXJpZW5jZWQgYXQgdGhhdCB0aW1lLiA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCB3aGVuIGF0IHRoZSB2ZXJ5CiAgICAgICBiZWdpbm5pbmcsIEksIGJlaW5nIHRoZSBjb25zdWwgZWxlY3QsIHdhcyBpbmZvcm1lZCB0aGF0IHRoZSB0cmlidW5lcyBlbGVjdCBvZiB0aGUgcGVvcGxlIHdlcmUKICAgICAgIGRyYXdpbmcgdXAgYW4gYWdyYXJpYW4gbGF3LCBJIHdpc2hlZCB0byBhc2NlcnRhaW4gd2hhdCB0aGVpciBwbGFucyB3ZXJlLiBJbiB0cnV0aCwgSSB0aG91Z2h0CiAgICAgICB0aGF0LCBzaW5jZSB3ZSB3ZXJlIGJvdGggdG8gYWN0IGFzIG1hZ2lzdHJhdGVzIGluIHRoZSBzYW1lIHllYXIsIGl0IHdhcyByaWdodCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgc29tZSB1bmlvbiBiZXR3ZWVuIHVzLCBmb3IgdGhlIHB1cnBvc2Ugb2YgZ292ZXJuaW5nIHRoZSByZXB1YmxpYyB3aXNlbHkgYW5kCiAgICAgICBzdWNjZXNzZnVsbHkuIDwvdHJhbnNsYXRpb24+"
translation['2.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBJIHdpc2hlZCB0byBqb2luIHRoZW0gZmFtaWxpYXJseSBpbgogICAgICAgY29udmVyc2F0aW9uLCBJIHdhcyBzaHV0IG91dDsgdGhlaXIgcHJvamVjdHMgd2VyZSBjb25jZWFsZWQgZnJvbSBtZTogYW5kIHdoZW4gSSBhc3N1cmVkIHRoZW0KICAgICAgIHRoYXQsIGlmIHRoZSBsYXcgYXBwZWFyZWQgdG8gbWUgdG8gYmUgYWR2YW50YWdlb3VzIHRvIHRoZSBSb21hbiBwZW9wbGUsIEkgd291bGQgYXNzaXN0IHRoZW0KICAgICAgIGluIGl0IGFuZCBwcm9tb3RlIGl0LCBzdGlsbCB0aGV5IHJlamVjdGVkIHRoaXMgbGliZXJhbGl0eSBvZiBtaW5lIHdpdGggc2Nvcm4sIGFuZCBzYWlkIHRoYXQgSQogICAgICAgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8gYXBwcm92ZSBvZiBhbnkgbGliZXJhbCBtZWFzdXJlcy4gSSBjZWFzZWQgdG8gb2ZmZXIgbXlzZWxmIHRvCiAgICAgICB0aGVtLCBsZXN0IHBlcmNoYW5jZSBteSBpbXBvcnR1bml0eSBzaG91bGQgc2VlbSB0byB0aGVtIHRyZWFjaGVyb3VzIG9yIGltcHVkZW50LiBJbiB0aGUKICAgICAgIG1lYW50aW1lIHRoZXkgZGlkIG5vdCBjZWFzZSB0byBoYXZlIHNlY3JldCBtZWV0aW5ncyBhbW9uZyB0aGVtc2VsdmVzLCB0byBpbnZpdGUgc29tZSBwcml2YXRlCiAgICAgICBpbmRpdmlkdWFscyB0byB0aGVtLCBhbmQgdG8gY2hvb3NlIG5pZ2h0IGFuZCBkYXJrbmVzcyBmb3IgdGhlaXIgY2xhbmRlc3RpbmUgZGVsaWJlcmF0aW9ucy4KICAgICAgIEFuZCB3aGF0IGdyZWF0IGFsYXJtIHRoaXMgY29uZHVjdCBvZiB0aGVpcnMgY2F1c2VkIHVzLCB5b3UgbWF5IGVhc2lseSBkaXZpbmUgYnkgeW91ciBvd24KICAgICAgIGNvbmplY3R1cmVzIGZvdW5kZWQgb24gdGhlIGFueGlldHkgd2hpY2ggeW91IHlvdXJzZWx2ZXMgZXhwZXJpZW5jZWQgYXQgdGhhdCB0aW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BdCBsYXN0IHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGVudGVyIG9uIHRoZWlyIG9mZmljZS4gVGhlIGFzc2VtYmx5IHRvIGJlIGNvbnZlbmVkIGJ5CiAgICAgICBQdWJsaXVzIFJ1bGx1cyB3YXMgYW54aW91c2x5IGxvb2tlZCBmb3IsIGJvdGggYmVjYXVzZSBoZSB3YXMgdGhlIGNoaWVmIG1vdmVyIG9mIHRoZSBhZ3JhcmlhbgogICAgICAgbGF3LCBhbmQgYmVjYXVzZSBoZSBiZWhhdmVkIHdpdGggbW9yZSB2aW9sZW5jZSB0aGFuIGhpcyBjb2xsZWFndWVzLiBGcm9tIHRoZSBtb21lbnQgdGhhdCBoZQogICAgICAgd2FzIGVsZWN0ZWQgdHJpYnVuZSwgaGUgcHV0IG9uIGFub3RoZXIgZXhwcmVzc2lvbiBvZiBjb3VudGVuYW5jZSwgYW5vdGhlciB0b25lIG9mIHZvaWNlLCBhCiAgICAgICBkaWZmZXJlbnQgZ2FpdDsgaGUgd2VudCBhYm91dCBpbiBhbiBvbGQtZmFzaGlvbmVkIGRyZXNzLCB3aXRob3V0IGFueSByZWdhcmQgdG8gbmVhdG5lc3MgaW4KICAgICAgIGhpcyBwZXJzb24sIHdpdGggbG9uZ2VyIGhhaXIgYW5kIGEgbW9yZSBhYnVuZGFudCBiZWFyZCB0aGFuIGJlZm9yZTsgc28gdGhhdCBoZSBzZWVtZWQgYnkgaGlzCiAgICAgICBleWVzIGFuZCBieSBoaXMgd2hvbGUgYXNwZWN0IHRvIGJlIHRocmVhdGVuaW5nIGV2ZXJ5IG9uZSB3aXRoIHRoZSBwb3dlciBvZiB0aGUgdHJpYnVuZXMsIGFuZAogICAgICAgdG8gYmUgbWVkaXRhdGluZyBldmlsIHRvIHRoZSByZXB1YmxpYy4gSSB3YXMgd2FpdGluZyBpbiBleHBlY3RhdGlvbiBvZiBoaXMgbGF3IGFuZCBvZiB0aGUKICAgICAgIGFzc2VtYmx5LiBBdCBmaXJzdCBubyBsYXcgYXQgYWxsIGlzIHByb3Bvc2VkLiBIZSBvcmRlcnMgYW4gYXNzZW1ibHkgdG8gYmUgc3VtbW9uZWQgYXMgaGlzCiAgICAgICBmaXJzdCBtZWFzdXJlLiBNZW4gZmxvY2sgdG8gaXQgd2l0aCB0aGUgbW9zdCBlYWdlciBleHBlY3RhdGlvbi4gSGUgbWFrZXMgYSBsb25nIGVub3VnaAogICAgICAgc3BlZWNoLCBleHByZXNzZWQgaW4gdmVyeSBnb29kIGxhbmd1YWdlLiBUaGVyZSB3YXMgb25lIHRoaW5nIHdoaWNoIHNlZW1lZCB0byBtZSBiYWQsIGFuZCB0aGF0CiAgICAgICB3YXMsIHRoYXQgb3V0IG9mIGFsbCB0aGUgY3Jvd2QgdGhlcmUgcHJlc2VudCwgbm90IG9uZSBtYW4gY291bGQgYmUgZm91bmQgd2hvIHdhcyBhYmxlIHRvCiAgICAgICB1bmRlcnN0YW5kIHdoYXQgaGUgbWVhbnQuIFdoZXRoZXIgaGUgZGlkIHRoaXMgd2l0aCBhbnkgaW5zaWRpb3VzIGRlc2lnbiwgb3Igd2hldGhlciB0aGF0IGlzCiAgICAgICB0aGUgc29ydCBvZiBlbG9xdWVuY2UgaW4gd2hpY2ggaGUgdGFrZXMgcGxlYXN1cmUsIEkgZG8gbm90IGtub3cuIFN0aWxsLCBpZiB0aGVyZSB3YXMgYW55IG9uZQogICAgICAgaW4gdGhlIGFzc2VtYmx5IGNsZXZlcmVyIHRoYW4gYW5vdGhlciwgaGUgc3VzcGVjdGVkIHRoYXQgaGUgd2FzIGludGVuZGluZyB0byBzYXkgc29tZXRoaW5nIG9yCiAgICAgICBvdGhlciBhYm91dCBhbiBhZ3JhcmlhbiBsYXcuIEF0IGxhc3QsIGFmdGVyIEkgaGFkIGJlZW4gZWxlY3RlZCBjb25zdWwsIHRoZSBsYXcgaXMgcHJvcG9zZWQKICAgICAgIHB1YmxpY2x5LiBCeSBteSBvcmRlciBzZXZlcmFsIGNsZXJrcyBtZWV0IGF0IG9uZSB0aW1lLCBhbmQgYnJpbmcgbWUgYW4gYWNjdXJhdGUgY29weSBvZiB0aGUKICAgICAgIGxhdy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgYXNzdXJlIHlvdSB3aXRoIHRoZSBtb3N0IHJlYWwgc2luY2VyaXR5LCBPIFJvbWFucywgdGhhdCBJIGFwcGxpZWQgbXlzZWxmIHRvIHRoZSByZWFkaW5nCiAgICAgICBhbmQgdW5kZXJzdGFuZGluZyBvZiB0aGlzIGxhdyB3aXRoIHRoZXNlIGZlZWxpbmdzLCB0aGF0IGlmIEkgaGFkIHRob3VnaHQgaXQgd2VsbCBhZGFwdGVkIHRvCiAgICAgICB5b3VyIGludGVyZXN0cywgYW5kIGFkdmFudGFnZW91cyB0byB0aGVtLCBJIHdvdWxkIGhhdmUgYmVlbiBhIGNoaWVmIG1vdmVyIGluIGFuZCBwcm9tb3RlciBvZgogICAgICAgaXQuIEZvciB0aGUgY29uc3Vsc2hpcCBoYXMgbm90LCBlaXRoZXIgYnkgbmF0dXJlLCBvciBieSBhbnkgaW5oZXJlbnQgZGlmZmVyZW5jZSBvZiBvYmplY3QsIG9yCiAgICAgICBieSBhbnkgaW5zdGluY3RpdmUgaGF0cmVkLCBhbnkgZW5taXR5IGFnYWluc3QgdGhlIHRyaWJ1bmVzaGlwLCB0aG91Z2ggZ29vZCBhbmQgZmVhcmxlc3MKICAgICAgIGNvbnN1bHMgaGF2ZSBvZnRlbiBvcHBvc2VkIHNlZGl0aW91cyBhbmQgd29ydGhsZXNzIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUsIGFuZCB0aG91Z2ggdGhlCiAgICAgICBwb3dlciBvZiB0aGUgdHJpYnVuZXMgaGFzIHNvbWV0aW1lcyBvcHBvc2VkIHRoZSBjYXByaWNpb3VzIGxpY2VudGlvdXNuZXNzIG9mIHRoZSBjb25zdWxzLiBJdAogICAgICAgaXMgbm90IHRoZSBkaXNzaW1pbGFyaXR5IG9mIHRoZWlyIHBvd2VycywgYnV0IHRoZSBkaXN1bmlvbiBvZiB0aGVpciBtaW5kcywgdGhhdCBjcmVhdGVzCiAgICAgICBkaXNzZW5zaW9uIGJldHdlZW4gdGhlbS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIEkgYXBwbGllZCBteXNlbGYgdG8KICAgICAgIHRoZSBjb25zaWRlcmF0aW9uIG9mIHRoZSBsYXcgd2l0aCB0aGVzZSBmZWVsaW5ncywgdGhhdCBJIHdpc2hlZCB0byBmaW5kIGl0IGNhbGN1bGF0ZWQgdG8KICAgICAgIHByb21vdGUgeW91ciBpbnRlcmVzdHMsIGFuZCBzdWNoIGFuIG9uZSBhcyBhIGNvbnN1bCB3aG8gd2FzIHJlYWxseSwgbm90IGluIHdvcmQgb25seSwgZGV2b3RlZAogICAgICAgdG8gdGhlIHBlb3BsZTsgbWlnaHQgaG9uZXN0bHkgYW5kIGNoZWVyZnVsbHkgYWR2b2NhdGUuIEFuZCBmcm9tIHRoZSBmaXJzdCBjbGF1c2Ugb2YgdGhlCiAgICAgICBwcm9wb3NlZCBsYXcgdG8gdGhlIGxhc3QsIE8gUm9tYW5zLCBJIGZpbmQgbm90aGluZyBlbHNlIHRob3VnaHQgb2YsIG5vdGhpbmcgZWxzZSBpbnRlbmRlZCwKICAgICAgIG5vdGhpbmcgZWxzZSBhaW1lZCBhdCwgYnV0IHRvIGFwcG9pbnQgdGVuIGtpbmdzIG9mIHRoZSB0cmVhc3VyeSwgb2YgdGhlIHJldmVudWVzLCBvZiBhbGwgdGhlCiAgICAgICBwcm92aW5jZXMsIG9mIHRoZSB3aG9sZSBvZiB0aGUgcmVwdWJsaWMsIG9mIHRoZSBraW5nZG9tcyBhbGxpZWQgd2l0aCB1cywgb2YgdGhlIGZyZWUgbmF0aW9ucwogICAgICAgY29uZmVkZXJhdGUgd2l0aCB1c+KAlHRlbiBsb3JkcyBvZiB0aGUgd2hvbGUgd29ybGQsIHVuZGVyIHRoZSBwcmV0ZW5jZSBhbmQgbmFtZSBvZiBhbgogICAgICAgYWdyYXJpYW4gbGF3LiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCBJIGFwcGxpZWQgbXlzZWxmIHRvCiAgICAgICB0aGUgY29uc2lkZXJhdGlvbiBvZiB0aGUgbGF3IHdpdGggdGhlc2UgZmVlbGluZ3MsIHRoYXQgSSB3aXNoZWQgdG8gZmluZCBpdCBjYWxjdWxhdGVkIHRvCiAgICAgICBwcm9tb3RlIHlvdXIgaW50ZXJlc3RzLCBhbmQgc3VjaCBhbiBvbmUgYXMgYSBjb25zdWwgd2hvIHdhcyByZWFsbHksIG5vdCBpbiB3b3JkIG9ubHksIGRldm90ZWQKICAgICAgIHRvIHRoZSBwZW9wbGU7IG1pZ2h0IGhvbmVzdGx5IGFuZCBjaGVlcmZ1bGx5IGFkdm9jYXRlLiBBbmQgZnJvbSB0aGUgZmlyc3QgY2xhdXNlIG9mIHRoZQogICAgICAgcHJvcG9zZWQgbGF3IHRvIHRoZSBsYXN0LCBPIFJvbWFucywgSSBmaW5kIG5vdGhpbmcgZWxzZSB0aG91Z2h0IG9mLCBub3RoaW5nIGVsc2UgaW50ZW5kZWQsCiAgICAgICBub3RoaW5nIGVsc2UgYWltZWQgYXQsIGJ1dCB0byBhcHBvaW50IHRlbiBraW5ncyBvZiB0aGUgdHJlYXN1cnksIG9mIHRoZSByZXZlbnVlcywgb2YgYWxsIHRoZQogICAgICAgcHJvdmluY2VzLCBvZiB0aGUgd2hvbGUgb2YgdGhlIHJlcHVibGljLCBvZiB0aGUga2luZ2RvbXMgYWxsaWVkIHdpdGggdXMsIG9mIHRoZSBmcmVlIG5hdGlvbnMKICAgICAgIGNvbmZlZGVyYXRlIHdpdGggdXPigJR0ZW4gbG9yZHMgb2YgdGhlIHdob2xlIHdvcmxkLCB1bmRlciB0aGUgcHJldGVuY2UgYW5kIG5hbWUgb2YgYW4KICAgICAgIGFncmFyaWFuIGxhdy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBhc3NlcnQgdG8geW91LCBPIFJvbWFucywgdGhhdCBieSB0aGlzIGJlYXV0aWZ1bAogICAgICAgYWdyYXJpYW4gbGF3LCBieSB0aGlzIGxhdyBjYWxjdWxhdGVkIHNvbGVseSBmb3IgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSwgbm90aGluZyB3aGF0ZXZlciBpcwogICAgICAgZ2l2ZW4gdG8geW91LCBldmVyeXRoaW5nIGlzIHNhY3JpZmljZWQgdG8gYSBmZXcgcGFydGljdWxhciBtZW47IHRoYXQgbGFuZHMgYXJlIGRpc3BsYXllZAogICAgICAgYmVmb3JlIHRoZSBleWVzIG9mIHRoZSBSb21hbiBwZW9wbGUsIGxpYmVydHkgaXMgdGFrZW4gYXdheSBmcm9tIHRoZW07IHRoYXQgdGhlIGZvcnR1bmVzIG9mCiAgICAgICBzb21lIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGluY3JlYXNlZCwgdGhlIHB1YmxpYyB3ZWFsdGggaXMgZXhoYXVzdGVkOyBhbmQgbGFzdGx5LCB3aGljaCBpcwogICAgICAgdGhlIG1vc3Qgc2NhbmRhbG91cyB0aGluZyBvZiBhbGwsIHRoYXQgYnkgbWVhbnMgb2YgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHdob20gb3VyCiAgICAgICBhbmNlc3RvcnMgZGVzaWduZWQgdG8gYmUgdGhlIHByb3RlY3RvciBhbmQgZ3VhcmRpYW4gb2YgbGliZXJ0eSwga2luZ3MgYXJlIGJlaW5nIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgY2l0eS4gQW5kIHdoZW4gSSBoYXZlIHNob3duIHRvIHlvdSBhbGwgdGhlIGdyb3VuZHMgZm9yIHRoaXMgc3RhdGVtZW50LCBpZiB0aGV5IGFwcGVhcgogICAgICAgdG8geW91IHRvIGJlIGVycm9uZW91cywgSSB3aWxsIHlpZWxkIHRvIHlvdXIgYXV0aG9yaXR5LCBJIHdpbGwgYWJhbmRvbiBteSBvd24gb3BpbmlvbiwgYnV0IGlmCiAgICAgICB5b3UgYmVjb21lIGF3YXJlIHRoYXQgcGxvdHMgYXJlIGxhaWQgYWdhaW5zdCB5b3VyIGxpYmVydHksIHVuZGVyIGEgcHJldGVuY2Ugb2YgbGliZXJhbGl0eSwKICAgICAgIHRoZW4gZG8gbm90IGhlc2l0YXRlLCBub3cgdGhhdCB5b3UgaGF2ZSBhIGNvbnN1bCB0byBhc3Npc3QgeW91LCB0byBkZWZlbmQgdGhhdCBsaWJlcnR5IHdoaWNoCiAgICAgICB3YXMgZWFybmVkIGJ5IHRoZSBzd2VhdCBhbmQgYmxvb2Qgb2YgeW91ciBhbmNlc3RvcnMsIGFuZCBoYW5kZWQgZG93biB0byB5b3UsIHdpdGhvdXQgYW55CiAgICAgICB0cm91YmxlIG9uIHlvdXIgcGFydC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBkbyBhc3NlcnQgdG8geW91LCBPIFJvbWFucywgdGhhdCBieSB0aGlzIGJlYXV0aWZ1bAogICAgICAgYWdyYXJpYW4gbGF3LCBieSB0aGlzIGxhdyBjYWxjdWxhdGVkIHNvbGVseSBmb3IgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSwgbm90aGluZyB3aGF0ZXZlciBpcwogICAgICAgZ2l2ZW4gdG8geW91LCBldmVyeXRoaW5nIGlzIHNhY3JpZmljZWQgdG8gYSBmZXcgcGFydGljdWxhciBtZW47IHRoYXQgbGFuZHMgYXJlIGRpc3BsYXllZAogICAgICAgYmVmb3JlIHRoZSBleWVzIG9mIHRoZSBSb21hbiBwZW9wbGUsIGxpYmVydHkgaXMgdGFrZW4gYXdheSBmcm9tIHRoZW07IHRoYXQgdGhlIGZvcnR1bmVzIG9mCiAgICAgICBzb21lIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGluY3JlYXNlZCwgdGhlIHB1YmxpYyB3ZWFsdGggaXMgZXhoYXVzdGVkOyBhbmQgbGFzdGx5LCB3aGljaCBpcwogICAgICAgdGhlIG1vc3Qgc2NhbmRhbG91cyB0aGluZyBvZiBhbGwsIHRoYXQgYnkgbWVhbnMgb2YgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHdob20gb3VyCiAgICAgICBhbmNlc3RvcnMgZGVzaWduZWQgdG8gYmUgdGhlIHByb3RlY3RvciBhbmQgZ3VhcmRpYW4gb2YgbGliZXJ0eSwga2luZ3MgYXJlIGJlaW5nIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgY2l0eS4gQW5kIHdoZW4gSSBoYXZlIHNob3duIHRvIHlvdSBhbGwgdGhlIGdyb3VuZHMgZm9yIHRoaXMgc3RhdGVtZW50LCBpZiB0aGV5IGFwcGVhcgogICAgICAgdG8geW91IHRvIGJlIGVycm9uZW91cywgSSB3aWxsIHlpZWxkIHRvIHlvdXIgYXV0aG9yaXR5LCBJIHdpbGwgYWJhbmRvbiBteSBvd24gb3BpbmlvbiwgYnV0IGlmCiAgICAgICB5b3UgYmVjb21lIGF3YXJlIHRoYXQgcGxvdHMgYXJlIGxhaWQgYWdhaW5zdCB5b3VyIGxpYmVydHksIHVuZGVyIGEgcHJldGVuY2Ugb2YgbGliZXJhbGl0eSwKICAgICAgIHRoZW4gZG8gbm90IGhlc2l0YXRlLCBub3cgdGhhdCB5b3UgaGF2ZSBhIGNvbnN1bCB0byBhc3Npc3QgeW91LCB0byBkZWZlbmQgdGhhdCBsaWJlcnR5IHdoaWNoCiAgICAgICB3YXMgZWFybmVkIGJ5IHRoZSBzd2VhdCBhbmQgYmxvb2Qgb2YgeW91ciBhbmNlc3RvcnMsIGFuZCBoYW5kZWQgZG93biB0byB5b3UsIHdpdGhvdXQgYW55CiAgICAgICB0cm91YmxlIG9uIHlvdXIgcGFydC4gPC90cmFuc2xhdGlvbj4="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGZpcnN0IGNsYXVzZSBpbiB0aGlzIGFncmFyaWFuIGxhdyBpcyBvbmUgYnkgd2hpY2gsIGFzIHRoZXkgdGhpbmssIHlvdSBhcmUgYSBsaXR0bGUKICAgICAgIHByb3ZlZCwgdG8gc2VlIHdpdGggd2hhdCBmZWVsaW5ncyB5b3UgY2FuIGJlYXIgYSBkaW1pbnV0aW9uIG9mIHlvdXIgbGliZXJ0eS4gRm9yIGl0IG9yZGVycwogICAgICAg4oCcdGhlIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSB3aG8gaGFzIHBhc3NlZCB0aGlzIGxhdyB0byBjcmVhdGUgdGVuIGRlY2VtdmlycyBieSB0aGUKICAgICAgIHZvdGVzIG9mIHNldmVudGVlbiB0cmliZXMsIHNvIHRoYXQgd2hvbXNvZXZlciBhIG1ham9yaXR5IGNvbnNpc3Rpbmcgb2YgbmluZSB0cmliZXMgZWxlY3RzLAogICAgICAgc2hhbGwgYmUgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcjwvZm9yZWlnbj4u4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJIGFzaywgb24gd2hhdCBhY2NvdW50IHRoZSBmcmFtZXIgb2YgdGhpcyBsYXcgaGFzIGNvbW1lbmNlZCBoaXMgbGF3IGFuZCBoaXMKICAgICAgIG1lYXN1cmVzIGluIHN1Y2ggYSBtYW5uZXIsIGFzIHRvIGRlcHJpdmUgdGhlIFJvbWFuIHBlb3BsZSBvZiBpdHMgcmlnaHQgb2Ygdm90aW5nPyBBcyBvZnRlbiBhcwogICAgICAgYWdyYXJpYW4gbGF3cyBoYXZlIGJlZW4gcGFzc2VkLCBjb21taXNzaW9uZXJzLCBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnRyaXVtdmlyczwvZm9yZWlnbj4sCiAgICAgICBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnF1aW5xdWV2aXJzPC9mb3JlaWduPiwgYW5kIDxmb3JlaWduIGxhbmc9ImxhIj5kZWNlbXZpcnM8L2ZvcmVpZ24+IGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkLiBJIGFzayB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgd2hvIGlzIHNvIGF0dGFjaGVkIHRvIHRoZSBwZW9wbGUsIHdoZXRoZXIKICAgICAgIHRoZXkgd2VyZSBldmVyIGNyZWF0ZWQgZXhjZXB0IGJ5IHRoZSB3aG9sZSB0aGlydHktZml2ZSB0cmliZXM/IEluIHRydXRoLCBhcyBpdCBpcyBwcm9wZXIgZm9yCiAgICAgICBldmVyeSBwb3dlciwgYW5kIGV2ZXJ5IGNvbW1hbmQsIGFuZCBldmVyeSBjaGFyZ2Ugd2hpY2ggaXMgY29tbWl0dGVkIHRvIGFueSBvbmUsIHRvIHByb2NlZWQKICAgICAgIGZyb20gdGhlIGVudGlyZSBSb21hbiBwZW9wbGUsIHNvIGVzcGVjaWFsbHkgb3VnaHQgdGhvc2UgdG8gZG8gc28sIHdoaWNoIGFyZSBlc3RhYmxpc2hlZCBmb3IKICAgICAgIGFueSB1c2UgYW5kIGFkdmFudGFnZSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhcyB0aGF0IGlzIGEgY2FzZSBpbiB3aGljaCB0aGV5IGFsbCB0b2dldGhlcgogICAgICAgY2hvb3NlIHRoZSBtYW4gd2hvIHRoZXkgdGhpbmsgd2lsbCBtb3N0IHN0dWR5IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIGluIHdoaWNoCiAgICAgICBhbHNvIGVhY2ggaW5kaXZpZHVhbCBhbW9uZyB0aGVtIGJ5IGhpcyBvd24gemVhbCBhbmQgaGlzIG93biB2b3RlIGFzc2lzdHMgdG8gbWFrZSBhIHJvYWQgYnkKICAgICAgIHdoaWNoIGhlIG1heSBvYnRhaW4gc29tZSBpbmRpdmlkdWFsIGJlbmVmaXQgZm9yIGhpbXNlbGYuIFRoaXMgaXMgdGhlIHRyaWJ1bmUgdG8gd2hvbSBpdCBoYXMKICAgICAgIG9jY3VycmVkIGFib3ZlIGFsbCBvdGhlcnMgdG8gZGVwcml2ZSB0aGUgUm9tYW4gcGVvcGxlIG9mIHRoZWlyIHN1ZmZyYWdlcywgYW5kIHRvIGludml0ZSBhIGZldwogICAgICAgdHJpYmVzIG5vdCBieSBhbnkgZml4ZWQgY29uZGl0aW9uIG9mIGxhdywgYnV0IGJ5IHRoZSBraW5kbmVzcyBvZiBsb3RzIGRyYXduLCBhbmQgYnkgY2hhbmNlLAogICAgICAgdG8gdXN1cnAgdGhlIGxpYmVydGllcyBiZWxvbmdpbmcgdG8gYWxsLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPiDigJxBbHNvCiAgICAgICBpbiB0aGUgc2FtZSBtYW5uZXIs4oCdIGl0IHNheXMgaW4gdGhlIHNlY29uZCBjbGF1c2UsIOKAnGFzIGluIHRoZSBjb21pdGlhIGZvcgogICAgICAgdGhlIGVsZWN0aW9uIG9mIGEgUG9udGlmZXggTWF4aW11cy7igJ0gSGUgZGlkIG5vdCBwZXJjZWl2ZSBldmVuIHRoaXMsIHRoYXQgb3VyCiAgICAgICBhbmNlc3RvcnMgZGlkIHJlYWxseSBzdHVkeSB0aGUgZ29vZCBvZiB0aGUgcGVvcGxlIHNvIG11Y2gsIHRoYXQsIHRob3VnaCBpdCB3YXMgbm90IGxhd2Z1bCBmb3IKICAgICAgIHRoYXQgb2ZmaWNlIHRvIGJlIGNvbmZlcnJlZCBieSB0aGUgcGVvcGxlLCBvbiBhY2NvdW50IG9mIHRoZSByZWxpZ2lvdXMgY2VyZW1vbmllcyB0aGVuIHVzZWQsCiAgICAgICBzdGlsbCwgdGhleSBjaG9zZSwgaW4gb3JkZXIgdG8gZG8gYWRkaXRpb25hbCBob25vdXIgdG8gdGhlIHByaWVzdGhvb2QsIHRoYXQgdGhlIHNhbmN0aW9uIG9mCiAgICAgICB0aGUgcGVvcGxlIHNob3VsZCBiZSBhc2tlZCBmb3IgaXQuIEFuZCBDbmFldXMgRG9taXRpdXMsIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhbmQgYSBtb3N0CiAgICAgICBlbWluZW50IG1hbiwgcGFzc2VkIHRoZSBzYW1lIGxhdyB3aXRoIHJlc3BlY3QgdG8gdGhlIG90aGVyIHByaWVzdGhvb2RzOyBlbmFjdGluZywgYmVjYXVzZSB0aGUKICAgICAgIHBlb3BsZSwgb24gYWNjb3VudCBvZiB0aGUgcmVxdWlyZW1lbnRzIG9mIHJlbGlnaW9uLCBjb3VsZCBub3QgY29uZmVyIHRoZSBwcmllc3Rob29kcywgdGhhdCBhCiAgICAgICBzbWFsbCBoYWxmIG9mIHRoZSBwZW9wbGUgc2hvdWxkIGJlIGludml0ZWQ7IGFuZCB0aGF0IHdob2V2ZXIgd2FzIHNlbGVjdGVkIGJ5IHRoYXQgaGFsZiBzaG91bGQKICAgICAgIGJlIGNob3NlbiBpbnRvIHRoZWlyIGJvZHkgYnkgdGhlIHNhY3JlZCBjb2xsZWdlLiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBTZWUgbm93CiAgICAgICBob3cgZ3JlYXQgYSBkaWZmZXJlbmNlIHRoZXJlIGlzIGJldHdlZW4gQ25hZXVzIERvbWl0aXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYSBtYW4gb2YKICAgICAgIHRoZSBoaWdoZXN0IHJhbmssIGFuZCBQdWJsaXVzIFJ1bGx1cywgd2hvIHRyaWVkIHlvdXIgcGF0aWVuY2UsIGFzIEkgaW1hZ2luZSwgd2hlbiBoZSBzYWlkCiAgICAgICB0aGF0IGhlIHdhcyBhIG5vYmxlLiBEb21pdGl1cyBjb250cml2ZWQgYSB3YXkgYnkgd2hpY2gsIGFzIGZhciBhcyBoZSB3YXMgYWJsZSwgYXMgZmFyIGFzIHdhcwogICAgICAgY29uc2lzdGVudCB3aXRoIHRoZSBsYXdzIG9mIG1lbiBhbmQgb2YgZ29kcywgaGUgbWlnaHQgY29uZmVyIG9uIGEgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIHdoYXQKICAgICAgIGNvdWxkIG5vdCBiZSBkb25lIGJ5IGFueSByZWd1bGFyIHByb2NlZWRpbmcgb24gdGhlIHBhcnQgb2YgdGhlIGVudGlyZSBwZW9wbGUuIEJ1dCB0aGlzIG1hbiwKICAgICAgIHdoZW4gdGhlcmUgd2FzIGEgdGhpbmcgd2hpY2ggaGFkIGFsd2F5cyBiZWxvbmdlZCB0byB0aGUgcGVvcGxlLCB3aGljaCBubyBvbmUgaGFkIGV2ZXIKICAgICAgIGltcGFpcmVkLCBhbmQgd2hpY2ggbm8gb25lIGhhZCBldmVyIGFsdGVyZWQs4oCUdGhlIHByaW5jaXBsZSwgbmFtZWx5LCB0aGF0IHRob3NlIHdobwogICAgICAgd2VyZSB0byBhc3NpZ24gbGFuZHMgdG8gdGhlIHBlb3BsZSwgc2hvdWxkIHJlY2VpdmUgYSBraW5kbmVzcyBmcm9tIHRoZSBSb21hbiBwZW9wbGUgYmVmb3JlCiAgICAgICB0aGV5IGNvbmZlcnJlZCBvbmUgb24gaXQ7IHRoYXQgdGhpcyBtYW4gaGFzIGVuZGVhdm91cmVkIGVudGlyZWx5IHRvIHRha2UgYXdheSBmcm9tIHlvdSwgYW5kCiAgICAgICB0byB3cmVzdCBvdXQgb2YgeW91ciBoYW5kcy4gVGhlIG9uZSBjb250cml2ZWQgc29tZWhvdyBvciBvdGhlciB0byBnaXZlIHRoYXQgd2hpY2ggY291bGQgbm90CiAgICAgICByZWFsbHkgYmUgZ2l2ZW4gZm9ybWFsbHkgdG8gdGhlIHBlb3BsZTsgdGhlIG90aGVyIGVuZGVhdm91cnMgc29tZWhvdyBvciBvdGhlciB0byB0YWtlIGF3YXkKICAgICAgIGZyb20gdGhlbSBieSBtYW5vZXV2cmUsIHdoYXQgY291bGQgbm90IHBvc3NpYmx5IGJlIHRha2VuIGZyb20gdGhlbSBieSBkaXJlY3QgcG93ZXIuCiAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcjwvZm9yZWlnbj4u4oCdIDwvdHJhbnNsYXRpb24+"
translation['2.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJIGFzaywgb24gd2hhdCBhY2NvdW50IHRoZSBmcmFtZXIgb2YgdGhpcyBsYXcgaGFzIGNvbW1lbmNlZCBoaXMgbGF3IGFuZCBoaXMKICAgICAgIG1lYXN1cmVzIGluIHN1Y2ggYSBtYW5uZXIsIGFzIHRvIGRlcHJpdmUgdGhlIFJvbWFuIHBlb3BsZSBvZiBpdHMgcmlnaHQgb2Ygdm90aW5nPyBBcyBvZnRlbiBhcwogICAgICAgYWdyYXJpYW4gbGF3cyBoYXZlIGJlZW4gcGFzc2VkLCBjb21taXNzaW9uZXJzLCBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dHJpdW12aXJzPC9mb3JlaWduPiwKICAgICAgIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5xdWlucXVldmlyczwvZm9yZWlnbj4sIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5kZWNlbXZpcnM8L2ZvcmVpZ24+IGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkLiBJIGFzayB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgd2hvIGlzIHNvIGF0dGFjaGVkIHRvIHRoZSBwZW9wbGUsIHdoZXRoZXIKICAgICAgIHRoZXkgd2VyZSBldmVyIGNyZWF0ZWQgZXhjZXB0IGJ5IHRoZSB3aG9sZSB0aGlydHktZml2ZSB0cmliZXM/IEluIHRydXRoLCBhcyBpdCBpcyBwcm9wZXIgZm9yCiAgICAgICBldmVyeSBwb3dlciwgYW5kIGV2ZXJ5IGNvbW1hbmQsIGFuZCBldmVyeSBjaGFyZ2Ugd2hpY2ggaXMgY29tbWl0dGVkIHRvIGFueSBvbmUsIHRvIHByb2NlZWQKICAgICAgIGZyb20gdGhlIGVudGlyZSBSb21hbiBwZW9wbGUsIHNvIGVzcGVjaWFsbHkgb3VnaHQgdGhvc2UgdG8gZG8gc28sIHdoaWNoIGFyZSBlc3RhYmxpc2hlZCBmb3IKICAgICAgIGFueSB1c2UgYW5kIGFkdmFudGFnZSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBhcyB0aGF0IGlzIGEgY2FzZSBpbiB3aGljaCB0aGV5IGFsbCB0b2dldGhlcgogICAgICAgY2hvb3NlIHRoZSBtYW4gd2hvIHRoZXkgdGhpbmsgd2lsbCBtb3N0IHN0dWR5IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIGluIHdoaWNoCiAgICAgICBhbHNvIGVhY2ggaW5kaXZpZHVhbCBhbW9uZyB0aGVtIGJ5IGhpcyBvd24gemVhbCBhbmQgaGlzIG93biB2b3RlIGFzc2lzdHMgdG8gbWFrZSBhIHJvYWQgYnkKICAgICAgIHdoaWNoIGhlIG1heSBvYnRhaW4gc29tZSBpbmRpdmlkdWFsIGJlbmVmaXQgZm9yIGhpbXNlbGYuIFRoaXMgaXMgdGhlIHRyaWJ1bmUgdG8gd2hvbSBpdCBoYXMKICAgICAgIG9jY3VycmVkIGFib3ZlIGFsbCBvdGhlcnMgdG8gZGVwcml2ZSB0aGUgUm9tYW4gcGVvcGxlIG9mIHRoZWlyIHN1ZmZyYWdlcywgYW5kIHRvIGludml0ZSBhIGZldwogICAgICAgdHJpYmVzIG5vdCBieSBhbnkgZml4ZWQgY29uZGl0aW9uIG9mIGxhdywgYnV0IGJ5IHRoZSBraW5kbmVzcyBvZiBsb3RzIGRyYXduLCBhbmQgYnkgY2hhbmNlLAogICAgICAgdG8gdXN1cnAgdGhlIGxpYmVydGllcyBiZWxvbmdpbmcgdG8gYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQWxzbwogICAgICAgaW4gdGhlIHNhbWUgbWFubmVyLOKAnSBpdCBzYXlzIGluIHRoZSBzZWNvbmQgY2xhdXNlLCDigJxhcyBpbiB0aGUgY29taXRpYSBmb3IKICAgICAgIHRoZSBlbGVjdGlvbiBvZiBhIFBvbnRpZmV4IE1heGltdXMu4oCdIEhlIGRpZCBub3QgcGVyY2VpdmUgZXZlbiB0aGlzLCB0aGF0IG91cgogICAgICAgYW5jZXN0b3JzIGRpZCByZWFsbHkgc3R1ZHkgdGhlIGdvb2Qgb2YgdGhlIHBlb3BsZSBzbyBtdWNoLCB0aGF0LCB0aG91Z2ggaXQgd2FzIG5vdCBsYXdmdWwgZm9yCiAgICAgICB0aGF0IG9mZmljZSB0byBiZSBjb25mZXJyZWQgYnkgdGhlIHBlb3BsZSwgb24gYWNjb3VudCBvZiB0aGUgcmVsaWdpb3VzIGNlcmVtb25pZXMgdGhlbiB1c2VkLAogICAgICAgc3RpbGwsIHRoZXkgY2hvc2UsIGluIG9yZGVyIHRvIGRvIGFkZGl0aW9uYWwgaG9ub3VyIHRvIHRoZSBwcmllc3Rob29kLCB0aGF0IHRoZSBzYW5jdGlvbiBvZgogICAgICAgdGhlIHBlb3BsZSBzaG91bGQgYmUgYXNrZWQgZm9yIGl0LiBBbmQgQ25hZXVzIERvbWl0aXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYW5kIGEgbW9zdAogICAgICAgZW1pbmVudCBtYW4sIHBhc3NlZCB0aGUgc2FtZSBsYXcgd2l0aCByZXNwZWN0IHRvIHRoZSBvdGhlciBwcmllc3Rob29kczsgZW5hY3RpbmcsIGJlY2F1c2UgdGhlCiAgICAgICBwZW9wbGUsIG9uIGFjY291bnQgb2YgdGhlIHJlcXVpcmVtZW50cyBvZiByZWxpZ2lvbiwgY291bGQgbm90IGNvbmZlciB0aGUgcHJpZXN0aG9vZHMsIHRoYXQgYQogICAgICAgc21hbGwgaGFsZiBvZiB0aGUgcGVvcGxlIHNob3VsZCBiZSBpbnZpdGVkOyBhbmQgdGhhdCB3aG9ldmVyIHdhcyBzZWxlY3RlZCBieSB0aGF0IGhhbGYgc2hvdWxkCiAgICAgICBiZSBjaG9zZW4gaW50byB0aGVpciBib2R5IGJ5IHRoZSBzYWNyZWQgY29sbGVnZS4gPC90cmFuc2xhdGlvbj4="
translation['2.7.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gU2VlIG5vdwogICAgICAgaG93IGdyZWF0IGEgZGlmZmVyZW5jZSB0aGVyZSBpcyBiZXR3ZWVuIENuYWV1cyBEb21pdGl1cywgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGEgbWFuIG9mCiAgICAgICB0aGUgaGlnaGVzdCByYW5rLCBhbmQgUHVibGl1cyBSdWxsdXMsIHdobyB0cmllZCB5b3VyIHBhdGllbmNlLCBhcyBJIGltYWdpbmUsIHdoZW4gaGUgc2FpZAogICAgICAgdGhhdCBoZSB3YXMgYSBub2JsZS4gRG9taXRpdXMgY29udHJpdmVkIGEgd2F5IGJ5IHdoaWNoLCBhcyBmYXIgYXMgaGUgd2FzIGFibGUsIGFzIGZhciBhcyB3YXMKICAgICAgIGNvbnNpc3RlbnQgd2l0aCB0aGUgbGF3cyBvZiBtZW4gYW5kIG9mIGdvZHMsIGhlIG1pZ2h0IGNvbmZlciBvbiBhIHBvcnRpb24gb2YgdGhlIHBlb3BsZSB3aGF0CiAgICAgICBjb3VsZCBub3QgYmUgZG9uZSBieSBhbnkgcmVndWxhciBwcm9jZWVkaW5nIG9uIHRoZSBwYXJ0IG9mIHRoZSBlbnRpcmUgcGVvcGxlLiBCdXQgdGhpcyBtYW4sCiAgICAgICB3aGVuIHRoZXJlIHdhcyBhIHRoaW5nIHdoaWNoIGhhZCBhbHdheXMgYmVsb25nZWQgdG8gdGhlIHBlb3BsZSwgd2hpY2ggbm8gb25lIGhhZCBldmVyCiAgICAgICBpbXBhaXJlZCwgYW5kIHdoaWNoIG5vIG9uZSBoYWQgZXZlciBhbHRlcmVkLOKAlHRoZSBwcmluY2lwbGUsIG5hbWVseSwgdGhhdCB0aG9zZSB3aG8KICAgICAgIHdlcmUgdG8gYXNzaWduIGxhbmRzIHRvIHRoZSBwZW9wbGUsIHNob3VsZCByZWNlaXZlIGEga2luZG5lc3MgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIGJlZm9yZQogICAgICAgdGhleSBjb25mZXJyZWQgb25lIG9uIGl0OyB0aGF0IHRoaXMgbWFuIGhhcyBlbmRlYXZvdXJlZCBlbnRpcmVseSB0byB0YWtlIGF3YXkgZnJvbSB5b3UsIGFuZAogICAgICAgdG8gd3Jlc3Qgb3V0IG9mIHlvdXIgaGFuZHMuIFRoZSBvbmUgY29udHJpdmVkIHNvbWVob3cgb3Igb3RoZXIgdG8gZ2l2ZSB0aGF0IHdoaWNoIGNvdWxkIG5vdAogICAgICAgcmVhbGx5IGJlIGdpdmVuIGZvcm1hbGx5IHRvIHRoZSBwZW9wbGU7IHRoZSBvdGhlciBlbmRlYXZvdXJzIHNvbWVob3cgb3Igb3RoZXIgdG8gdGFrZSBhd2F5CiAgICAgICBmcm9tIHRoZW0gYnkgbWFub2V1dnJlLCB3aGF0IGNvdWxkIG5vdCBwb3NzaWJseSBiZSB0YWtlbiBmcm9tIHRoZW0gYnkgZGlyZWN0IHBvd2VyLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNvbWUgb25lIHdpbGwgYXNrIHdoYXQgd2FzIGhpcyBwdXJwb3NlIGluIHN1Y2ggaW5qdXN0aWNlIGFuZCBzdWNoIGltcHVkZW5jZS4gSGUgd2FzIG5vdAogICAgICAgd2l0aG91dCBhbiBvYmplY3QuIEJ1dCBnb29kIGZhaXRoIHRvd2FyZHMgdGhlIFJvbWFuIHBlb3BsZSwganVzdCBmZWVsaW5ncyB0b3dhcmRzIHlvdSBhbmQKICAgICAgIHlvdXIgbGliZXJ0eSwgaGUgd2FzIHV0dGVybHkgd2l0aG91dC4gRm9yIGhlIG9yZGVycyB0aGUgbWFuIHdobyBoYXMgcGFzc2VkIHRoZSBsYXcgdG8gaG9sZAogICAgICAgdGhlIGNvbWl0aWEgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgZGVjZW12aXJzLiBJIHdpbGwgc3RhdGUgdGhlIGNhc2UgbW9yZSBwbGFpbmx5LiBSdWxsdXMsIGFzCiAgICAgICBhIG1hbiBmYXIgZnJvbSBiZWluZyBjb3ZldG91cyBvciBhbWJpdGlvdXMsIG9yZGVycyBSdWxsdXMgdG8gaG9sZCB0aGUgY29taXRpYS4gSSBkbyBub3QgZmluZAogICAgICAgZmF1bHQgeWV0LiBJIHNlZSB0aGF0IG90aGVycyBoYXZlIGRvbmUgdGhlIHNhbWUgdGhpbmcuIE5vdyBzZWUgd2hhdCBpcyB0aGUgb2JqZWN0IG9mIHRoaXMsCiAgICAgICB3aGljaCBubyBvbmUgZWxzZSBldmVyIGRpZCwgd2l0aCByZXNwZWN0IHRvIHRoZSBzbWFsbGVyIGhhbGYgb2YgdGhlIHBlb3BsZS4gSGUgd2lsbCBob2xkIHRoZQogICAgICAgY29taXRpYTsgaGUgd2lzaGVzIHRvIGhhdmUgdGhlIGFwcG9pbnRtZW50IG9mIHRob3NlIG9mZmljZXJzIGZvciB3aG9tIGtpbmdseSBwb3dlciBpcyBzb3VnaHQKICAgICAgIHRvIGJlIHByb2N1cmVkIGJ5IHRoaXMgbGF3LiBIZSBoaW1zZWxmIHdpbGwgbm90IGVudHJ1c3QgaXQgdG8gdGhlIGVudGlyZSBwZW9wbGUsIG5vciBkbyB0aG9zZQogICAgICAgd2hvIHdlcmUgdGhlIG9yaWdpbmFsIGluc3RpZ2F0b3JzIG9mIHRoZXNlIGRlc2lnbnMgdGhpbmsgaXQgb3VnaHQgdG8gYmUgZW50cnVzdGVkIHRvIHRoZW0uCiAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPiBUaGUgc2FtZSBSdWxsdXMgd2lsbCBjYXN0IGxvdHMgYmV0d2VlbiB0aGUgdHJpYmVzLiBIZSwKICAgICAgIGhhcHB5IG1hbiwgd2lsbCBwaWNrIG91dCB0aGUgdHJpYmVzIHdoaWNoIGhlIHByZWZlcnMuIFRob3NlIGRlY2VtdmlycyB3aG9tIHRoZSBuaW5lIHRyaWJlcwogICAgICAgc2VsZWN0ZWQgYnkgdGhpcyBzYW1lIFJ1bGx1cyBtYXkgY2hvb3NlIHRvIGFwcG9pbnQsIHdlIHNoYWxsIGhhdmUsIGFzIEkgc2hhbGwgcHJlc2VudGx5IHNob3csCiAgICAgICBmb3Igb3VyIGFic29sdXRlIG1hc3RlcnMgaW4gZXZlcnl0aGluZy4gQW5kIHRoZXksIHRoYXQgdGhleSBtYXkgYXBwZWFyIHRvIGJlIGdyYXRlZnVsIG1lbiwKICAgICAgIGFuZCB0byBiZSBtaW5kZnVsIG9mIGtpbmRuZXNzLCB3aWxsIGNvbmZlc3MgdGhhdCB0aGV5IGFyZSBpbmRlYnRlZCB0byB0aGUgbGVhZGluZyBtZW4gb2YKICAgICAgIHRoZXNlIG5pbmUgdHJpYmVzLiBCdXQgYXMgZm9yIHRoZSBvdGhlciBzaXgtYW5kLXR3ZW50eSB0cmliZXMsIHRoZXJlIHdpbGwgYmUgbm90aGluZyB3aGljaAogICAgICAgdGhleSB3aWxsIG5vdCB0aGluayB0aGF0IHRoZXkgaGF2ZSBhIHJpZ2h0IHRvIHJlZnVzZSB0aGVtLiBXaG8gYXJlIHRoZXksIHRoZW4sIHdob20gaGUgbWVhbnMKICAgICAgIHRvIGhhdmUgZWxlY3RlZCB0cmlidW5lcz8gSW4gdGhlIGZpcnN0IHBsYWNlLCBoaW1zZWxmLiBIb3cgY2FuIHRoYXQgYmUgbGF3ZnVsPyBGb3IgdGhlcmUgYXJlCiAgICAgICBvbGQgbGF3cywgYW5kIHRob3NlIHRvbyBub3QgbGF3cyBtYWRlIGJ5IGNvbnN1bHMsIGlmIHlvdSB0aGluayB0aGF0IHRoYXQgbWFrZXMgYW55CiAgICAgICBkaWZmZXJlbmNlLCBidXQgbWFkZSBieSB0cmlidW5lcywgdmVyeSBwbGVhc2luZyBhbmQgYWdyZWVhYmxlIHRvIHlvdSBhbmQgdG8geW91ciBhbmNlc3RvcnMuCiAgICAgICBUaGVyZSBpcyB0aGUgTGljaW5pYW4gbGF3LCBhbmQgdGhlIHNlY29uZCBBZWJ1dGlhbiBsYXc7IHdoaWNoIGV4Y2VwdHMgbm90IG9ubHkgdGhlIG1hbiB3aG8KICAgICAgIGhhcyBjYXVzZWQgYSBsYXcgdG8gYmUgcGFzc2VkIGNvbmNlcm5pbmcgYW55IGNvbW1pc3Npb24gb3IgcG93ZXIsIGJ1dCBhbHNvIGFsbCBoaXMgY29sbGVhZ3VlcwogICAgICAgYW5kIGFsbCBoaXMgY29ubmVjdGlvbnMsIGFuZCBpbmNhcGFjaXRhdGVzIHRoZW0gZnJvbSBiZWluZyBhcHBvaW50ZWQgdG8gYW55IHBvd2VyIG9yCiAgICAgICBjb21taXNzaW9uIHNvIGVzdGFibGlzaGVkLiA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0cnV0aCwgaWYgeW91IGNvbnN1bHQgdGhlCiAgICAgICBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZSwgcmVtb3ZlIHlvdXJzZWxmIGZyb20gYWxsIHN1c3BpY2lvbiBvZiBhbnkgYWR2YW50YWdlIHRvIHlvdXJzZWxmOwogICAgICAgYWxsb3cgdGhlIHBvd2VyIHRvIGFjY3J1ZSB0byBvdGhlcnMsIGdyYXRpdHVkZSBmb3IgdGhlIGdvb2QgeW91IGhhdmUgZG9uZSBtdXN0IGJlIGVub3VnaCBmb3IKICAgICAgIHlvdXJzZWxmLiBGb3Igc3VjaCBjb25kdWN0IGFzIHRoaXMgaXMgc2NhcmNlbHkgYmVjb21pbmcgaW4gYSBmcmVlIHBlb3BsZSwgaXQgaXMgc2NhcmNlbHkKICAgICAgIGNvbnNpc3RlbnQgd2l0aCB5b3VyIHNwaXJpdCBhbmQgZGlnbml0eS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIHNhbWUgUnVsbHVzIHdpbGwgY2FzdCBsb3RzIGJldHdlZW4gdGhlIHRyaWJlcy4gSGUsCiAgICAgICBoYXBweSBtYW4sIHdpbGwgcGljayBvdXQgdGhlIHRyaWJlcyB3aGljaCBoZSBwcmVmZXJzLiBUaG9zZSBkZWNlbXZpcnMgd2hvbSB0aGUgbmluZSB0cmliZXMKICAgICAgIHNlbGVjdGVkIGJ5IHRoaXMgc2FtZSBSdWxsdXMgbWF5IGNob29zZSB0byBhcHBvaW50LCB3ZSBzaGFsbCBoYXZlLCBhcyBJIHNoYWxsIHByZXNlbnRseSBzaG93LAogICAgICAgZm9yIG91ciBhYnNvbHV0ZSBtYXN0ZXJzIGluIGV2ZXJ5dGhpbmcuIEFuZCB0aGV5LCB0aGF0IHRoZXkgbWF5IGFwcGVhciB0byBiZSBncmF0ZWZ1bCBtZW4sCiAgICAgICBhbmQgdG8gYmUgbWluZGZ1bCBvZiBraW5kbmVzcywgd2lsbCBjb25mZXNzIHRoYXQgdGhleSBhcmUgaW5kZWJ0ZWQgdG8gdGhlIGxlYWRpbmcgbWVuIG9mCiAgICAgICB0aGVzZSBuaW5lIHRyaWJlcy4gQnV0IGFzIGZvciB0aGUgb3RoZXIgc2l4LWFuZC10d2VudHkgdHJpYmVzLCB0aGVyZSB3aWxsIGJlIG5vdGhpbmcgd2hpY2gKICAgICAgIHRoZXkgd2lsbCBub3QgdGhpbmsgdGhhdCB0aGV5IGhhdmUgYSByaWdodCB0byByZWZ1c2UgdGhlbS4gV2hvIGFyZSB0aGV5LCB0aGVuLCB3aG9tIGhlIG1lYW5zCiAgICAgICB0byBoYXZlIGVsZWN0ZWQgdHJpYnVuZXM/IEluIHRoZSBmaXJzdCBwbGFjZSwgaGltc2VsZi4gSG93IGNhbiB0aGF0IGJlIGxhd2Z1bD8gRm9yIHRoZXJlIGFyZQogICAgICAgb2xkIGxhd3MsIGFuZCB0aG9zZSB0b28gbm90IGxhd3MgbWFkZSBieSBjb25zdWxzLCBpZiB5b3UgdGhpbmsgdGhhdCB0aGF0IG1ha2VzIGFueQogICAgICAgZGlmZmVyZW5jZSwgYnV0IG1hZGUgYnkgdHJpYnVuZXMsIHZlcnkgcGxlYXNpbmcgYW5kIGFncmVlYWJsZSB0byB5b3UgYW5kIHRvIHlvdXIgYW5jZXN0b3JzLgogICAgICAgVGhlcmUgaXMgdGhlIExpY2luaWFuIGxhdywgYW5kIHRoZSBzZWNvbmQgQWVidXRpYW4gbGF3OyB3aGljaCBleGNlcHRzIG5vdCBvbmx5IHRoZSBtYW4gd2hvCiAgICAgICBoYXMgY2F1c2VkIGEgbGF3IHRvIGJlIHBhc3NlZCBjb25jZXJuaW5nIGFueSBjb21taXNzaW9uIG9yIHBvd2VyLCBidXQgYWxzbyBhbGwgaGlzIGNvbGxlYWd1ZXMKICAgICAgIGFuZCBhbGwgaGlzIGNvbm5lY3Rpb25zLCBhbmQgaW5jYXBhY2l0YXRlcyB0aGVtIGZyb20gYmVpbmcgYXBwb2ludGVkIHRvIGFueSBwb3dlciBvcgogICAgICAgY29tbWlzc2lvbiBzbyBlc3RhYmxpc2hlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.8.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdHJ1dGgsIGlmIHlvdSBjb25zdWx0IHRoZQogICAgICAgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIHJlbW92ZSB5b3Vyc2VsZiBmcm9tIGFsbCBzdXNwaWNpb24gb2YgYW55IGFkdmFudGFnZSB0byB5b3Vyc2VsZjsKICAgICAgIGFsbG93IHRoZSBwb3dlciB0byBhY2NydWUgdG8gb3RoZXJzLCBncmF0aXR1ZGUgZm9yIHRoZSBnb29kIHlvdSBoYXZlIGRvbmUgbXVzdCBiZSBlbm91Z2ggZm9yCiAgICAgICB5b3Vyc2VsZi4gRm9yIHN1Y2ggY29uZHVjdCBhcyB0aGlzIGlzIHNjYXJjZWx5IGJlY29taW5nIGluIGEgZnJlZSBwZW9wbGUsIGl0IGlzIHNjYXJjZWx5CiAgICAgICBjb25zaXN0ZW50IHdpdGggeW91ciBzcGlyaXQgYW5kIGRpZ25pdHkuIDwvdHJhbnNsYXRpb24+"
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIHBhc3NlZCB0aGUgbGF3PyBSdWxsdXMuIFdobyBwcmV2ZW50ZWQgdGhlIGdyZWF0ZXIgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIGZyb20gaGF2aW5nIGEKICAgICAgIHZvdGU/IFJ1bGx1cy4gV2hvIHByZXNpZGVkIG92ZXIgdGhlIGNvbWl0aWE/IFdobyBzdW1tb25lZCB0byB0aGUgZWxlY3Rpb24gd2hhdGV2ZXIgdHJpYmVzIGhlCiAgICAgICBwbGVhc2VkLCBoYXZpbmcgZHJhd24gdGhlIGxvdHMgZm9yIHRoZW0gd2l0aG91dCBhbnkgd2l0bmVzcyBiZWluZyBwcmVzZW50IHRvIHNlZSBmYWlyIHBsYXk/CiAgICAgICBXaG8gYXBwb2ludGVkIHdoYXRldmVyIGRlY2VtdmlycyBoZSBjaG9zZT8gVGhpcyBzYW1lIFJ1bGx1cy4gV2hvbSBkaWQgaGUgYXBwb2ludCBjaGllZiBvZiB0aGUKICAgICAgIGRlY2Vtdmlycz8gUnVsbHVzLiBJIGhhcmRseSBiZWxpZXZlIHRoYXQgaGUgY291bGQgaW5kdWNlIGhpcyBvd24gc2xhdmVzIHRvIGFwcHJvdmUgb2YgdGhpczsKICAgICAgIG11Y2ggbGVzcyB5b3UsIHdobyBhcmUgdGhlIG1hc3RlcnMgb2YgYWxsIG5hdGlvbnMuIFRoZXJlZm9yZSwgdGhlIG1vc3QgZXhjZWxsZW50IGxhd3Mgd2lsbCBiZQogICAgICAgcmVwZWFsZWQgYnkgdGhpcyBsYXcgd2l0aG91dCB0aGUgbGVhc3Qgc3VzcGljaW9uIG9mIHRoZSBmYWN0LiBIZSB3aWxsIHNlZWsgZm9yIGEgY29tbWlzc2lvbgogICAgICAgZm9yIGhpbXNlbGYgYnkgdmlydHVlIG9mIGhpcyBvd24gbGF3OyBoZSB3aWxsIGhvbGQgY29taXRpYSwgdGhvdWdoIHRoZSBncmVhdGVyIHBvcnRpb24gb2YgdGhlCiAgICAgICBwZW9wbGUgaXMgc3RyaXBwZWQgb2YgdGhlaXIgdm90ZXM7IGhlIHdpbGwgYXBwb2ludCB3aG9tc29ldmVyIGhlIHBsZWFzZXMsIGFuZCBoaW1zZWxmIGFtb25nCiAgICAgICB0aGVtOyBhbmQgZm9yc29vdGggaGUgd2lsbCBub3QgcmVqZWN0IGhpcyBvd24gY29sbGVhZ3VlcywgdGhlIGJhY2tlcnMgb2YgdGhpcyBhZ3JhcmlhbiBsYXcgYnkKICAgICAgIHdob20gdGhlIGZpcnN0IHBsYWNlIGluIHRoZSB1bnBvcHVsYXJpdHkgd2hpY2ggbWF5IHBvc3NpYmx5IGFyaXNlIGZyb20gZHJhd2luZyB0aGUgbGF3LCBhbmQKICAgICAgIGZyb20gaGF2aW5nIGhpcyBuYW1lIGF0IHRoZSBoZWFkIG9mIGl0LCBoYXMgaW5kZWVkIGJlZW4gY29uY2VkZWQgdG8gaGltLCBidXQgdGhlIHByb2ZpdCBmcm9tCiAgICAgICB0aGUgd2hvbGUgYnVzaW5lc3MsIHRoZXksIHdobyBpbiB0aGUgaG9wZSBvZiBpdCBhcmUgcGxhY2VkIGluIHRoaXMgcG9zaXRpb24sIHJlc2VydmUgdG8KICAgICAgIHRoZW1zZWx2ZXMgaW4gZXF1YWwgc2hhcmVzIHdpdGggaGltLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIGxhc3QgZm91ciBsaW5lcyBvZiB0aGlzCiAgICAgICAgcGFyYWdyYXBoIGFyZSB2ZXJ5IGNvcnJ1cHQgaW4gdGhlIG9yaWdpbmFsLCBhbmQgdGhlcmUgaXMgYSBnb29kIGRlYWwgb2YgdmFyaWV0eSBpbiB0aGUKICAgICAgICByZWFkaW5ncy48L25vdGU+CiAgICAgIDwvcD4KCQkJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBsYXN0IGZvdXIgbGluZXMgb2YgdGhpcwogICAgICAgIHBhcmFncmFwaCBhcmUgdmVyeSBjb3JydXB0IGluIHRoZSBvcmlnaW5hbCwgYW5kIHRoZXJlIGlzIGEgZ29vZCBkZWFsIG9mIHZhcmlldHkgaW4gdGhlCiAgICAgICAgcmVhZGluZ3MuPC9ub3RlPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyB0YWtlIG5vdGljZSBvZiB0aGUgZGlsaWdlbmNlIG9mIHRoZSBtYW4sIGlmCiAgICAgICBpbmRlZWQgeW91IHRoaW5rIHRoYXQgUnVsbHVzIGNvbnRyaXZlZCB0aGlzLCBvciB0aGF0IGl0IGlzIGEgdGhpbmcgd2hpY2ggY291bGQgcG9zc2libHkgaGF2ZQogICAgICAgb2NjdXJyZWQgdG8gUnVsbHVzLiBUaG9zZSBtZW4gd2hvIGZpcnN0IHByb2plY3RlZCB0aGVzZSBtZWFzdXJlcyBzYXcsIHRoYXQsIGlmIHlvdSBoYWQgdGhlCiAgICAgICBwb3dlciBvZiBtYWtpbmcgeW91ciBzZWxlY3Rpb24gb3V0IG9mIHRoZSB3aG9sZSBwZW9wbGUsIHdoYXRldmVyIHRoZSBtYXR0ZXIgbWlnaHQgYmUgaW4gd2hpY2gKICAgICAgIGdvb2QgZmFpdGgsIGludGVncml0eSwgdmlydHVlLCBhbmQgYXV0aG9yaXR5IHdlcmUgcmVxdWlyZWQsIHlvdSB3b3VsZCBiZXlvbmQgYWxsIHF1ZXN0aW9uCiAgICAgICBlbnRydXN0IGl0IHRvIENuYWV1cyBQb21wZWl1cyBhcyB0aGUgY2hpZWYgbWFuYWdlci4gSW4gdHJ1dGgsIGFmdGVyIHlvdSBoYWQgY2hvc2VuIG9uZSBtYW4KICAgICAgIG91dCBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBhbmQgYXBwb2ludGVkIGhpbSB0byBjb25kdWN0IGFsbCB5b3VyIHdhcnMgYWdhaW5zdCBhbGwgbmF0aW9ucyBieQogICAgICAgbGFuZCBhbmQgc2VhLCB0aGV5IHNhdyBwbGFpbmx5IHRoYXQgaXQgd2FzIG1vc3QgbmF0dXJhbCB0aGF0LCB3aGVuIHlvdSB3ZXJlIGFwcG9pbnRpbmcKICAgICAgIGRlY2Vtdmlycywgd2hldGhlciBpdCB3YXMgdG8gYmUgbG9va2VkIG9uIGFzIGNvbW1pdHRpbmcgYSB0cnVzdCB0bywgb3IgY29uZmVycmluZyBhbiBob25vdXIKICAgICAgIG9uIGEgbWFuLCB5b3Ugd291bGQgY29tbWl0IHRoZSBidXNpbmVzcyB0byBoaW0sIGFuZCBtb3N0IHJlYXNvbmFibGUgdGhhdCBoZSBzaG91bGQgaGF2ZSB0aGlzCiAgICAgICBjb21wbGltZW50IHBhaWQgaGltLiA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVyZWZvcmUsIGFuIGV4Y2VwdGlvbiBpcyBtYWRlIGJ5CiAgICAgICB0aGlzIGxhdywgbWVudGlvbmluZyBub3QgeW91dGgsIG5vciBhbnkgbGVnYWwgaW1wZWRpbWVudCwgbm9yIGFueSBjb21tYW5kIG9yIG1hZ2lzdHJhY3ksCiAgICAgICB3aGljaCBtaWdodCBiZSBlbmN1bWJlcmVkIHdpdGggb2JzdGFjbGVzIGFyaXNpbmcgZWl0aGVyIGZyb20gdGhlIGJ1c2luZXNzIHdpdGggd2hpY2ggaXQgd2FzCiAgICAgICBhbHJlYWR5IGxvYWRlZCwgb3IgZnJvbSB0aGUgbGF3cy4gVGhlcmUgaXMgbm90IGV2ZW4gYW4gZXhjZXB0aW9uIG1hZGUgaW4gdGhlIGNhc2Ugb2YgYW55CiAgICAgICBjb252aWN0ZWQgcGVyc29uLCB0byBwcmV2ZW50IGhpcyBiZWluZyBtYWRlIGEgPGZvcmVpZ24gbGFuZz0ibGEiPmRlY2VtdmlyPC9mb3JlaWduPi4gQ25hZXVzCiAgICAgICBQb21wZWl1cyBpcyBleGNlcHRlZCBhbmQgZGlzYWJsZWQgZnJvbSBiZWluZyBlbGVjdGVkIGEgY29sbGVhZ3VlIG9mIFB1YmxpdXMgUnVsbHVzIChmb3IgSSBzYXkKICAgICAgIG5vdGhpbmcgb2YgdGhlIHJlc3QpLiBGb3IgaGUgaGFzIHdvcmRlZCB0aGUgbGF3IHNvIHRoYXQgb25seSB0aG9zZSB3aG8gYXJlIHByZXNlbnQgY2FuIHN0YW5kCiAgICAgICBmb3IgdGhlIG9mZmljZTsgYSBjbGF1c2Ugd2hpY2ggd2FzIG5ldmVyIHlldCBmb3VuZCBpbiBhbnkgb3RoZXIgbGF3LCBub3QgZXZlbiBpbiB0aGUgbGF3cwogICAgICAgY29uY2VybmluZyB0aG9zZSBtYWdpc3RyYXRlcyB3aG8gYXJlIHBlcmlvZGljYWxseSBlbGVjdGVkLiBCdXQgdGhpcyBjbGF1c2Ugd2FzIGluc2VydGVkLCBpbgogICAgICAgb3JkZXIgdGhhdCBpZiB0aGUgbGF3IHBhc3NlZCB5b3UgbWlnaHQgbm90IGJlIGFibGUgdG8gZ2l2ZSBoaW0gYSBjb2xsZWFndWUgd2hvIHdvdWxkIGJlIGEKICAgICAgIGd1YXJkaWFuIG92ZXIgaGltLCBhbmQgYSBjaGVjayB1cG9uIGhpcyBjb3ZldG91c25lc3MuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IG5vdyB0YWtlIG5vdGljZSBvZiB0aGUgZGlsaWdlbmNlIG9mIHRoZSBtYW4sIGlmCiAgICAgICBpbmRlZWQgeW91IHRoaW5rIHRoYXQgUnVsbHVzIGNvbnRyaXZlZCB0aGlzLCBvciB0aGF0IGl0IGlzIGEgdGhpbmcgd2hpY2ggY291bGQgcG9zc2libHkgaGF2ZQogICAgICAgb2NjdXJyZWQgdG8gUnVsbHVzLiBUaG9zZSBtZW4gd2hvIGZpcnN0IHByb2plY3RlZCB0aGVzZSBtZWFzdXJlcyBzYXcsIHRoYXQsIGlmIHlvdSBoYWQgdGhlCiAgICAgICBwb3dlciBvZiBtYWtpbmcgeW91ciBzZWxlY3Rpb24gb3V0IG9mIHRoZSB3aG9sZSBwZW9wbGUsIHdoYXRldmVyIHRoZSBtYXR0ZXIgbWlnaHQgYmUgaW4gd2hpY2gKICAgICAgIGdvb2QgZmFpdGgsIGludGVncml0eSwgdmlydHVlLCBhbmQgYXV0aG9yaXR5IHdlcmUgcmVxdWlyZWQsIHlvdSB3b3VsZCBiZXlvbmQgYWxsIHF1ZXN0aW9uCiAgICAgICBlbnRydXN0IGl0IHRvIENuYWV1cyBQb21wZWl1cyBhcyB0aGUgY2hpZWYgbWFuYWdlci4gSW4gdHJ1dGgsIGFmdGVyIHlvdSBoYWQgY2hvc2VuIG9uZSBtYW4KICAgICAgIG91dCBvZiBhbGwgdGhlIGNpdGl6ZW5zLCBhbmQgYXBwb2ludGVkIGhpbSB0byBjb25kdWN0IGFsbCB5b3VyIHdhcnMgYWdhaW5zdCBhbGwgbmF0aW9ucyBieQogICAgICAgbGFuZCBhbmQgc2VhLCB0aGV5IHNhdyBwbGFpbmx5IHRoYXQgaXQgd2FzIG1vc3QgbmF0dXJhbCB0aGF0LCB3aGVuIHlvdSB3ZXJlIGFwcG9pbnRpbmcKICAgICAgIGRlY2Vtdmlycywgd2hldGhlciBpdCB3YXMgdG8gYmUgbG9va2VkIG9uIGFzIGNvbW1pdHRpbmcgYSB0cnVzdCB0bywgb3IgY29uZmVycmluZyBhbiBob25vdXIKICAgICAgIG9uIGEgbWFuLCB5b3Ugd291bGQgY29tbWl0IHRoZSBidXNpbmVzcyB0byBoaW0sIGFuZCBtb3N0IHJlYXNvbmFibGUgdGhhdCBoZSBzaG91bGQgaGF2ZSB0aGlzCiAgICAgICBjb21wbGltZW50IHBhaWQgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmVmb3JlLCBhbiBleGNlcHRpb24gaXMgbWFkZSBieQogICAgICAgdGhpcyBsYXcsIG1lbnRpb25pbmcgbm90IHlvdXRoLCBub3IgYW55IGxlZ2FsIGltcGVkaW1lbnQsIG5vciBhbnkgY29tbWFuZCBvciBtYWdpc3RyYWN5LAogICAgICAgd2hpY2ggbWlnaHQgYmUgZW5jdW1iZXJlZCB3aXRoIG9ic3RhY2xlcyBhcmlzaW5nIGVpdGhlciBmcm9tIHRoZSBidXNpbmVzcyB3aXRoIHdoaWNoIGl0IHdhcwogICAgICAgYWxyZWFkeSBsb2FkZWQsIG9yIGZyb20gdGhlIGxhd3MuIFRoZXJlIGlzIG5vdCBldmVuIGFuIGV4Y2VwdGlvbiBtYWRlIGluIHRoZSBjYXNlIG9mIGFueQogICAgICAgY29udmljdGVkIHBlcnNvbiwgdG8gcHJldmVudCBoaXMgYmVpbmcgbWFkZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlY2VtdmlyPC9mb3JlaWduPi4gQ25hZXVzCiAgICAgICBQb21wZWl1cyBpcyBleGNlcHRlZCBhbmQgZGlzYWJsZWQgZnJvbSBiZWluZyBlbGVjdGVkIGEgY29sbGVhZ3VlIG9mIFB1YmxpdXMgUnVsbHVzIChmb3IgSSBzYXkKICAgICAgIG5vdGhpbmcgb2YgdGhlIHJlc3QpLiBGb3IgaGUgaGFzIHdvcmRlZCB0aGUgbGF3IHNvIHRoYXQgb25seSB0aG9zZSB3aG8gYXJlIHByZXNlbnQgY2FuIHN0YW5kCiAgICAgICBmb3IgdGhlIG9mZmljZTsgYSBjbGF1c2Ugd2hpY2ggd2FzIG5ldmVyIHlldCBmb3VuZCBpbiBhbnkgb3RoZXIgbGF3LCBub3QgZXZlbiBpbiB0aGUgbGF3cwogICAgICAgY29uY2VybmluZyB0aG9zZSBtYWdpc3RyYXRlcyB3aG8gYXJlIHBlcmlvZGljYWxseSBlbGVjdGVkLiBCdXQgdGhpcyBjbGF1c2Ugd2FzIGluc2VydGVkLCBpbgogICAgICAgb3JkZXIgdGhhdCBpZiB0aGUgbGF3IHBhc3NlZCB5b3UgbWlnaHQgbm90IGJlIGFibGUgdG8gZ2l2ZSBoaW0gYSBjb2xsZWFndWUgd2hvIHdvdWxkIGJlIGEKICAgICAgIGd1YXJkaWFuIG92ZXIgaGltLCBhbmQgYSBjaGVjayB1cG9uIGhpcyBjb3ZldG91c25lc3MuIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUsIHNpbmNlIEkgc2VlIHRoYXQgeW91IGFyZSBtb3ZlZCBieSB0aGUgZGlnbml0eSBvZiB0aGUgbWFuLCBhbmQgYnkgdGhlIGluc3VsdCBwdXQgdXBvbgogICAgICAgaGltIGJ5IHRoaXMgbGF3LCBJIHdpbGwgcmV0dXJuIHRvIHRoZSBhc3NlcnRpb24gdGhhdCBJIG1hZGUgYXQgdGhlIGJlZ2lubmluZywgdGhhdCBhIGtpbmdseQogICAgICAgcG93ZXIgaXMgYmVpbmcgZXJlY3RlZCwgYW5kIHlvdXIgbGliZXJ0aWVzIGVudGlyZWx5IHRha2VuIGF3YXkgYnkgdGhpcyBsYXcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIHlvdSB0aGluaywgb3RoZXJ3aXNlLCB0aGF0IHdoZW4gYSBmZXcgbWVuIGhhZCBjYXN0IHRoZSBleWVzIG9mCiAgICAgICBjb3ZldG91c25lc3Mgb24gYWxsIHlvdXIgcG9zc2Vzc2lvbnMsIHRoZXkgd291bGQgbm90IGluIHRoZSB2ZXJ5IGZpcnN0IHBsYWNlIHRha2UgY2FyZSB0aGF0CiAgICAgICBDbmFldXMgUG9tcGVpdXMgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBhbGwgcG93ZXIgb2YgcHJvdGVjdGluZyB5b3VyIGxpYmVydHksIGZyb20gYWxsIHBvd2VyCiAgICAgICB0byBwcm9tb3RlLCBmcm9tIGFsbCBjb21taXNzaW9uIHRvIHdhdGNoIG92ZXIsIGFuZCBmcm9tIGFsbCBtZWFucyBvZiBwcm90ZWN0aW5nIHlvdXIKICAgICAgIGludGVyZXN0cz8gVGhleSBzYXcsIGFuZCB0aGV5IHNlZSBzdGlsbCwgdGhhdCBpZiwgdGhyb3VnaCB5b3VyIG93biBpbXBydWRlbmNlIGFuZCBteQogICAgICAgbmVnbGlnZW5jZSwgeW91IGFkb3B0IHRoaXMgbGF3LCB3aXRob3V0IHVuZGVyc3RhbmRpbmcgaXRzIGVmZmVjdCwgeW91IHdvdWxkIGFmdGVyd2FyZHMsIHdoZW4KICAgICAgIHlvdSB3ZXJlIGNyZWF0aW5nIGRlY2VtdmlycywgdGhpbmsgaXQgZXhwZWRpZW50IHRvIG9wcG9zZSBDbmFldXMgUG9tcGVpdXMgYXMgeW91ciBkZWZlbmNlCiAgICAgICBhZ2FpbnN0IGFsbCBkZWZlY3RzIGFuZCB3aWNrZWRuZXNzZXMgaW4gdGhlIGxhdy4gQW5kIGlzIHRoaXMgYSBzbGlnaHQgYXJndW1lbnQgdG8geW91LCB0aGF0CiAgICAgICB0aGVzZSBhcmUgbWVuIGJ5IHdob20gZG9taW5pb24gYW5kIHBvd2VyIG92ZXIgZXZlcnl0aGluZyBpcyBzb3VnaHQsIHdoZW4geW91IHNlZSB0aGF0IGhlLAogICAgICAgd2hvbSB0aGV5IHNlZSB3aWxsIHN1cmVseSBiZSB0aGUgcHJvdGVjdG9yIG9mIHlvdXIgbGliZXJ0eSwgaXMgdGhlIG9ubHkgb25lIHRvIHdob20gdGhhdAogICAgICAgZGlnbml0eSBpcyBkZW5pZWQ/IDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIHlvdSB0aGluaywgb3RoZXJ3aXNlLCB0aGF0IHdoZW4gYSBmZXcgbWVuIGhhZCBjYXN0IHRoZSBleWVzIG9mCiAgICAgICBjb3ZldG91c25lc3Mgb24gYWxsIHlvdXIgcG9zc2Vzc2lvbnMsIHRoZXkgd291bGQgbm90IGluIHRoZSB2ZXJ5IGZpcnN0IHBsYWNlIHRha2UgY2FyZSB0aGF0CiAgICAgICBDbmFldXMgUG9tcGVpdXMgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBhbGwgcG93ZXIgb2YgcHJvdGVjdGluZyB5b3VyIGxpYmVydHksIGZyb20gYWxsIHBvd2VyCiAgICAgICB0byBwcm9tb3RlLCBmcm9tIGFsbCBjb21taXNzaW9uIHRvIHdhdGNoIG92ZXIsIGFuZCBmcm9tIGFsbCBtZWFucyBvZiBwcm90ZWN0aW5nIHlvdXIKICAgICAgIGludGVyZXN0cz8gVGhleSBzYXcsIGFuZCB0aGV5IHNlZSBzdGlsbCwgdGhhdCBpZiwgdGhyb3VnaCB5b3VyIG93biBpbXBydWRlbmNlIGFuZCBteQogICAgICAgbmVnbGlnZW5jZSwgeW91IGFkb3B0IHRoaXMgbGF3LCB3aXRob3V0IHVuZGVyc3RhbmRpbmcgaXRzIGVmZmVjdCwgeW91IHdvdWxkIGFmdGVyd2FyZHMsIHdoZW4KICAgICAgIHlvdSB3ZXJlIGNyZWF0aW5nIGRlY2VtdmlycywgdGhpbmsgaXQgZXhwZWRpZW50IHRvIG9wcG9zZSBDbmFldXMgUG9tcGVpdXMgYXMgeW91ciBkZWZlbmNlCiAgICAgICBhZ2FpbnN0IGFsbCBkZWZlY3RzIGFuZCB3aWNrZWRuZXNzZXMgaW4gdGhlIGxhdy4gQW5kIGlzIHRoaXMgYSBzbGlnaHQgYXJndW1lbnQgdG8geW91LCB0aGF0CiAgICAgICB0aGVzZSBhcmUgbWVuIGJ5IHdob20gZG9taW5pb24gYW5kIHBvd2VyIG92ZXIgZXZlcnl0aGluZyBpcyBzb3VnaHQsIHdoZW4geW91IHNlZSB0aGF0IGhlLAogICAgICAgd2hvbSB0aGV5IHNlZSB3aWxsIHN1cmVseSBiZSB0aGUgcHJvdGVjdG9yIG9mIHlvdXIgbGliZXJ0eSwgaXMgdGhlIG9ubHkgb25lIHRvIHdob20gdGhhdAogICAgICAgZGlnbml0eSBpcyBkZW5pZWQ/IDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyBjb25zaWRlciB3aGF0IGEgcG93ZXIgaXMgZ2l2ZW4gdG8gdGhlIGRlY2VtdmlycywgYW5kCiAgICAgICBob3cgZ3JlYXQgaXMgaXRzIGV4dGVudC4gSW4gdGhlIGZpcnN0IHBsYWNlIGJlIGdpdmVzIHRoZSBkZWNlbXZpcnMgdGhlIGhvbm91ciBvZiBhIDxmb3JlaWduIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+CiAgICAgICAgPHA+VGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIGN1cmlhdGE8L2ZvcmVpZ24+LCBhdCB3aGljaCBhbG9uZSBhIDxmb3JlaWduIGxhbmc9ImxhIj5sZXgKICAgICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+IGNvdWxkIGhlIHBhc3NlZCwgd2FzIGEgbWVldGluZyBvZiB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnBvcHVsdXM8L2ZvcmVpZ24+IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEzOTYyIiBrZXk9InRnbiw3MDEzOTYyIj5Sb21lPC9wbGFjZU5hbWU+LCBhc3NlbWJsZWQgaW4gaXRzCiAgICAgICAgIHRyaWJlcyBvZiBob3VzZXM7IGFuZCBubyBtZW1iZXIgb2YgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4gY291bGQgdm90ZSBhdAogICAgICAgICBzdWNoIGEgbWVldGluZy4gVGhleSBtZXQgcHJpbmNpcGFsbHkgZm9yIHRoZSBzYWtlIG9mIGNvbmZpcm1pbmcgc29tZSBvcmRpbmFuY2Ugb2YgdGhlCiAgICAgICAgIHNlbmF0ZTsgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+c2VuYXR1cyBjb25zdWx0dW08L2ZvcmVpZ24+IHdhcyBhbiBpbmRpc3BlbnNhYmxlIHByZWxpbWluYXJ5LAogICAgICAgICBhbmQgd2l0aCByZWdhcmQgdG8gZWxlY3Rpb25zIGFuZCBsYXdzLCB0aGV5IGhhZCBtZXJlbHkgdGhlIHBvd2VyIG9mIGNvbmZpcm1pbmcgb3IgcmVqZWN0aW5nCiAgICAgICAgIHdoYXQgdGhlIHNlbmF0ZSBoYWQgYWxyZWFkeSBkZWNyZWVkLiBUaGUgPGZvcmVpZ24gbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiAoPGZvcmVpZ24gbGFuZz0ibGEiPmRlIGltcGVyaW88L2ZvcmVpZ24+KSx3aGljaCB3YXMgdGhlIHNhbWUgYXMgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5hdWN0b3JpdGFzCiAgICAgICAgICBwYXRydW08L2ZvcmVpZ24+LCB3YXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIGNvbmZlciB1cG9uIHRoZSBkaWN0YXRvciwgdGhlIGNvbnN1bHMsIGFuZCB0aGUKICAgICAgICAgb3RoZXIgbWFnaXN0cmF0ZXMgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5pbXBlcml1bTwvZm9yZWlnbj4gb3IgbWlsaXRhcnkgY29tbWFuZC4gVGhlCiAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+Y29taXRpYSBjdXJpYXRhPC9mb3JlaWduPiB3ZXJlIGhlbGQgYnkgdGhlIHBhdHJpY2lhbiBtYWdpc3RyYXRlcywgYW5kCiAgICAgICAgIHRoZXkgdm90ZWQgYnkgdGhlaXIgY3VyaWVzLjwvcD4KICAgICAgICA8cD5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gd2VyZSB0aGUgYXNzZW1ibHkgb2YgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gbGFuZz0ibGEiPnBsZWJzPC9mb3JlaWduPiB0b2dldGhlciwgYW5kIHRoZXkKICAgICAgICAgdm90ZWQgYnkgdGhlaXIgY2VudHVyaWVzIGJ5IGJhbGxvdC48L3A+CiAgICAgICAgPHA+VGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIHRyaWJ1dGE8L2ZvcmVpZ24+IHdlcmUgbm90IGVzdGFibGlzaGVkIHRpbGwgQi4gQy4gPGRhdGUgYXV0aG5hbWU9Ii00OTEiIHZhbHVlPSItNDkxIj40OTE8L2RhdGU+LiBUaGV5IHdlcmUgYW4gYXNzZW1ibHkgb2YgdGhlIHBlb3BsZSBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIHRyaWJlcwogICAgICAgICBpbnRvIHdoaWNoIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+UGxlYnM8L2ZvcmVpZ24+IHdhcyBvcmlnaW5hbGx5IGRpdmlkZWQuIE5vIHF1YWxpZmljYXRpb24KICAgICAgICAgb2YgYmlydGggb3IgcHJvcGVydHkgd2FzIG5lY2Vzc2FyeSB0byBlbmFibGUgYSB0aGVtIHRvIHZvdGUgaW4gdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhIHRyaWJ1dGE8L2ZvcmVpZ24+LiBUaGV5IHdlcmUgc3VtbW9uZWQgYnkgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj50cmlidW5pCiAgICAgICAgICBwbGViaXM8L2ZvcmVpZ24+LCB3aG8gd2VyZSBhbHNvIHRoZSBwcmVzaWRpbmcgbWFnaXN0cmF0ZXMgaW4gZ2VuZXJhbDsgYnV0IHRoZSBjb25zdWxzIG9yCiAgICAgICAgIHByYWV0b3JzIG1pZ2h0IHByZXNpZGUgaWYgdGhleSB3ZXJlIGNvbnZva2VkIGZvciB0aGUgZWxlY3Rpb24gb2YgaW5mZXJpb3IgbWFnaXN0cmF0ZXMsIHN1Y2gKICAgICAgICAgYXMgdGhlIHF1YWVzdG9yLCBwcm9wcmFldG9yLCBvciBwcm9jb25zdWwuIFNtaXRoLCBEaWN0LiBBbnQuIHAuIDI3NCwgdi4gPGZvcmVpZ24gbGFuZz0ibGEiPkNvbWl0aWE8L2ZvcmVpZ24+LCBxLiB2LiA8L3A+CiAgICAgICA8L25vdGU+IEJ1dCB0aGlzIGlzIHVuaGVhcmQtb2YgYW5kIGFic29sdXRlbHkgd2l0aG91dCBwcmVjZWRlbnQsIHRoYXQgYSBtYWdpc3RyYWN5IHNob3VsZCBiZQogICAgICAgY29uZmVycmVkIGJ5IGEgPGZvcmVpZ24gbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBvbiBhIG1hbiB3aG8gaGFzIG5vdCBwcmV2aW91c2x5CiAgICAgICByZWNlaXZlZCBpdCBpbiBzb21lIGNvbWl0aWEuIEhlIG9yZGVycyB0aGUgbGF3IHRvIGJlIGJyb3VnaHQgaW4gYnkgdGhhdCBwcmFldG9yIHdobyBpcwogICAgICAgYXBwb2ludGVkIGZpcnN0IHByYWV0b3IuIEJ1dCBob3c/IEluIG9yZGVyIHRoYXQgdGhlc2UgbWVuIG1heSByZWNlaXZlIHRoZSBkZWNlbXZpcmF0ZSB3aG9tCiAgICAgICB0aGUgcGVvcGxlIGhhcyBlbGVjdGVkLiBIZSBoYXMgZm9yZ290dGVuIHRoYXQgbm9uZSBoYXZlIGJlZW4gZWxlY3RlZCBieSB0aGUgY29tbW9uIHBlb3BsZS4KICAgICAgIEhlcmUgaXMgYSBwcmV0dHkgZmVsbG93IHRvIGJpbmQgdGhlIHdob2xlIHdvcmxkIHdpdGggbGF3cywgd2hvIGRvZXMgbm90IHJlY29sbGVjdCBpbiB0aGUKICAgICAgIHRoaXJkIGNsYXVzZSB3aGF0IGlzIHNldCBkb3duIGluIHRoZSBzZWNvbmQhIFRoaXMsIHRvbywgaXMgcXVpdGUgcGxhaW47IGJvdGggd2hhdCBwcml2aWxlZ2VzCiAgICAgICB5b3UgaGF2ZSByZWNlaXZlZCBmcm9tIHlvdXIgYW5jZXN0b3JzLCBhbmQgd2hhdCBpcyBsZWZ0IHRvIHlvdSBieSB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZS4KICAgICAgICA8bWlsZXN0b25lIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.10.26'] = ""
translation['2.11'] = ""
translation['2.11.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gTm93LAogICAgICAgYmVjYXVzZSB5b3UgaGF2ZSBwcmVzZXJ2ZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gYW5kIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRyaWJ1dGE8L2ZvcmVpZ24+LCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWF0YTwvZm9yZWlnbj4gaGF2ZSByZW1haW5lZCBvbmx5IGZvcgogICAgICAgdGhlIHNha2Ugb2YgdGhlIGF1c3BpY2VzLiBCdXQgdGhpcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGJlY2F1c2UgaGUgc2F3IHRoYXQgbm8gbWFuIGNvdWxkCiAgICAgICBwb3NzaWJseSBoYXZlIGFueSBhdXRob3JpdHkgY29uZmVycmVkIG9uIGhpbSB3aXRob3V0IHRoZSBhdXRob3JpdHkgb2YgdGhlIGJ1cmdoZXJzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgTGF0aW4gdGVybXMgYXJlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvcHVsdXM8L2ZvcmVpZ24+IGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4uIEZvciB0aGUgYmVzdCBhY2NvdW50IG9mIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPgogICAgICAgIHRvIGJlIGZvdW5kIGluIGEgc21hbGwgc3BhY2UsIHNlZSBTbWl0aCdzIERpY3QuIEFudC4gcC4gNzI2LCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QYXRyaWNpaTwvZm9yZWlnbj47IGFuZCBjb25zdWx0IHRoZSBzYW1lIGFkbWlyYWJsZSBib29rLCBwLiA3NjUsIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlBsZWJlczwvZm9yZWlnbj4sIG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBsZWJzPC9mb3JlaWduPi4gVGhlIHdvcmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG90ZXN0YXM8L2ZvcmVpZ24+LCB3aGljaCBJIGhhdmUgdHJhbnNsYXRlZCDigJxhdXRob3JpdHks4oCdIG1lYW5zCiAgICAgICAgc3RyaWN0bHkgb25seSBjaXZpbCBhdXRob3JpdHksIGluIG9wcG9zaXRpb24gdG8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aW1wZXJpdW08L2ZvcmVpZ24+LAogICAgICAgIG1pbGl0YXJ5IGNvbW1hbmQuPC9ub3RlPiBvciBvZiB0aGUgY29tbW9uYWx0eSwgY29uZmlybWVkIHRoYXQgYXV0aG9yaXR5IHdoaWNoIGhlIHByb3Bvc2VkIHRvCiAgICAgICBnaXZlIGJ5IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb3B1bHVzPC9mb3JlaWduPiBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cGxlYnM8L2ZvcmVpZ24+LiBGb3IgdGhlIGJlc3QgYWNjb3VudCBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG9wdWx1czwvZm9yZWlnbj4KICAgICAgICB0byBiZSBmb3VuZCBpbiBhIHNtYWxsIHNwYWNlLCBzZWUgU21pdGgncyBEaWN0LiBBbnQuIHAuIDcyNiwgdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UGF0cmljaWk8L2ZvcmVpZ24+OyBhbmQgY29uc3VsdCB0aGUgc2FtZSBhZG1pcmFibGUgYm9vaywgcC4gNzY1LCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QbGViZXM8L2ZvcmVpZ24+LCBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wbGViczwvZm9yZWlnbj4uIFRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBvdGVzdGFzPC9mb3JlaWduPiwgd2hpY2ggSSBoYXZlIHRyYW5zbGF0ZWQg4oCcYXV0aG9yaXR5LOKAnSBtZWFucwogICAgICAgIHN0cmljdGx5IG9ubHkgY2l2aWwgYXV0aG9yaXR5LCBpbiBvcHBvc2l0aW9uIHRvIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiwKICAgICAgICBtaWxpdGFyeSBjb21tYW5kLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhdGEgY29taXRpYTwvZm9yZWlnbj4sIHdpdGggd2hpY2ggeW91IGhhdmUgbm90aGluZyB0byBkbywKICAgICAgIGFuZCB0b29rIGF3YXkgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgdHJpYnV0YTwvZm9yZWlnbj4gd2hpY2ggYmVsb25nZWQgdG8geW91LiBTbywKICAgICAgIHRob3VnaCB5b3VyIGFuY2VzdG9ycyBpbnRlbmRlZCB5b3UgdG8gZGVjaWRlIGF0IHR3byA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPgogICAgICAgYWJvdXQgZWFjaCBtYWdpc3RyYXRlLCB0aGlzIG1hbiwgc28gYXR0YWNoZWQgdG8gdGhlIGludGVyZXN0cyBvZiB0aGUgcGVvcGxlLCBkaWQgbm90IGxlYXZlCiAgICAgICB0aGUgcGVvcGxlIHRoZSBwb3dlciBvZiBldmVuIG9uZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGp1c3Qgbm90ZSB0aGUgc2NydXB1bG91c25lc3MgYW5kIHRoZSBkaWxpZ2VuY2Ugb2YgdGhlIG1hbi4gSGUgc2F3LCBhbmQKICAgICAgIHdhcyB0aG9yb3VnaGx5IGF3YXJlLCB0aGF0IHdpdGhvdXQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4gdGhlIGRlY2VtdmlycwogICAgICAgY291bGQgbm90IGhhdmUgYXV0aG9yaXR5LCBzaW5jZSB0aGV5IHdlcmUgZWxlY3RlZCBieSBvbmx5IG5pbmUgdHJpYmVzLiBTbyBoZSBkaXJlY3RzIHRoYXQKICAgICAgIHRoZXJlIHNob3VsZCBiZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBwYXNzZWQgYWJvdXQgdGhlbSwgYW5kIG9yZGVycyB0aGUKICAgICAgIHByYWV0b3IgdG8gcHJvcG9zZSBpdC4gSG93IHJpZGljdWxvdXMgc3VjaCBhIGNvbnRyaXZhbmNlIHdhcywgaXQgaXMgbm8gYnVzaW5lc3Mgb2YgbWluZSB0bwogICAgICAgc2F5LiBGb3IgaGUgb3JkZXJzIHRoYXQg4oCcaGUgd2hvIGhhcyBiZWVuIGVsZWN0ZWQgZmlyc3QgcHJhZXRvciwgc2hhbGwgcHJvcG9zZSBhCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+OyBidXQgaWYgaGUgYmUgYWJsZSB0byBwcm9wb3NlIGl0LCB0aGVuIHRoZSBsYXN0CiAgICAgICBwcmFldG9yIHNoYWxsIGRvIGl0LuKAnSBTbyB0aGF0IGhlIHNlZW1zIGVpdGhlciB0byBoYXZlIGJlZW4gcGxheWluZyB0aGUgZm9vbCBpbiB0aGlzCiAgICAgICBidXNpbmVzcywgb3IgZWxzZSB0byBoYXZlIGJlZW4gYWltaW5nIGF0IHNvbWV0aGluZyBJIGtub3cgbm90IHdoYXQuIEJ1dCwgaG93ZXZlciwgbGV0IHVzIHBhc3MKICAgICAgIG92ZXIgdGhpcywgd2hpY2ggaXMgZWl0aGVyIHNvIHBlcnZlcnNlLCBvciBzbyByaWRpY3Vsb3VzLCBvciBzbyBtYWxpY2lvdXMgYW5kIGN1bm5pbmcsIGFzIHRvCiAgICAgICBiZSB1bmludGVsbGlnaWJsZSwgYW5kIHJldHVybiB0byB0aGUgc2NydXB1bG91c25lc3Mgb2YgdGhlIG1hbi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgc2VlcyB0aGF0IG5vdGhpbmcgY2FuIGJlIGRvbmUgYnkgdGhlIGRlY2VtdmlycyBleGNlcHQgYnkgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4uIFdoYXQgd2FzIHRvIGhhcHBlbiBhZnRlcndhcmRzLCBpZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleAogICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+IHdlcmUgbm90IHBhc3NlZD8gUmVtYXJrIHRoZSBpbmdlbnVpdHkgb2YgdGhlIG1hbi4KICAgICAgIOKAnFRoZW4s4oCdIHNheXMgaGUsIOKAnHRoZSBkZWNlbXZpcnMgc2hhbGwgYmUgaW4gdGhlIHNhbWUgY29uZGl0aW9uCiAgICAgICBhcyB0aG9zZSB3aG8gYXJlIGFwcG9pbnRlZCBpbiB0aGUgc3RyaWN0ZXN0IGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3LuKAnSBJZiB0aGlzIGNhbgogICAgICAgYmUgYnJvdWdodCBhYm91dCwgdGhhdCwgaW4gdGhpcyBjaXR5IHdoaWNoIGlzIGZhciBzdXBlcmlvciB0byBhbGwgb3RoZXIgc3RhdGVzIGluIGl0cyByaWdodHMKICAgICAgIG9mIGxpYmVydHksIGFueSBvbmUgbWF5IGJlIGFibGUgdG8gb2J0YWluIGVpdGhlciBtaWxpdGFyeSBjb21tYW5kIG9yIGNpdmlsIGF1dGhvcml0eSB3aXRob3V0CiAgICAgICB0aGUgc2FuY3Rpb24gb2YgYW55IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LCB0aGVuIHdoYXQgaXMgdGhlIG5lY2Vzc2l0eSBmb3IKICAgICAgIG9yZGVyaW5nIGluIHRoZSB0aGlyZCBjaGFwdGVyIHRoYXQgc29tZSBvbmUgc2hhbGwgcHJvcG9zZSBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleAogICAgICAgIGN1cmlhdGE8L2ZvcmVpZ24+LCB3aGVuIGluIHRoZSBmb3VydGggY2hhcHRlciB5b3UgcGVybWl0IG1lbiB0byBoYXZlIHRoZSBzYW1lIHJpZ2h0cyB3aXRob3V0CiAgICAgICBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiwgd2hpY2ggdGhleSB3b3VsZCBoYXZlIGlmIHRoZXkgd2VyZSBlbGVjdGVkIGJ5IHRoZQogICAgICAgYnVyZ2hlcnMgYWNjb3JkaW5nIHRvIHRoZSBzdHJpY3Rlc3QgZm9ybSBvZiBsYXc/IEtpbmdzIGFyZSBiZWluZyBhcHBvaW50ZWQsIE8gUm9tYW5zLCBub3QKICAgICAgIGRlY2VtdmlyczsgYW5kIHRoZXkgYXJlIHN0YXJ0aW5nIHdpdGggc3VjaCBiZWdpbm5pbmdzIGFuZCBvbiBzdWNoIGZvdW5kYXRpb25zLCB0aGF0IHRoZSB3aG9sZQogICAgICAgb2YgeW91ciByaWdodHMsIGFuZCBwb3dlcnMsIGFuZCBsaWJlcnRpZXMgYXJlIGRlc3Ryb3llZCBub3Qgb25seSBmcm9tIHRoZSBtb21lbnQgdGhhdCB0aGV5CiAgICAgICBiZWdpbiB0byBhY3QsIGJ1dCBmcm9tIHRoZSBtb21lbnQgdGhhdCB0aGV5IGFyZSBhcHBvaW50ZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCByZW1hcmsgaG93IGNhcmVmdWxseSBoZSBwcmVzZXJ2ZXMgdGhlIHJpZ2h0cyBvZiB0aGUgdHJpYnVuaXRpYW4gcG93ZXIuIFRoZSBjb25zdWxzIGFyZQogICAgICAgb2Z0ZW4gaW50ZXJydXB0ZWQgaW4gcHJvcG9zaW5nIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LCBieSB0aGUKICAgICAgIGludGVyY2Vzc2lvbiBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZS4gTm90IHRoYXQgd2UgY29tcGxhaW4gdGhhdCB0aGUgdHJpYnVuZXMgc2hvdWxkCiAgICAgICBoYXZlIHRoaXMgcG93ZXI7IG9ubHksIGlmIGFueSBvbmUgdXNlcyBpdCBpbiBhIHJhbmRvbSBhbmQgaW5jb25zaWRlcmF0ZSBtYW5uZXIsIHdlIGZvcm0gb3VyCiAgICAgICBvd24gb3Bpbmlvbi4gQnV0IHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBieSBoaXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LAogICAgICAgd2hpY2ggdGhlIHByYWV0b3IgaXMgdG8gYnJpbmcgZm9yd2FyZCwgdGFrZXMgYXdheSB0aGUgcG93ZXIgb2YgaW50ZXJjZXNzaW9uLiBBbmQgd2hpbGUgaGUgaXMKICAgICAgIG1hZGUgdG8gYmUgYmxhbWVkIGZvciBjYXVzaW5nIHRoZSB0cmlidW5pdGlhbiBwb3dlciB0byBiZSBkaW1pbmlzaGVkIGJ5IGhpcyBpbnN0cnVtZW50YWxpdHksCiAgICAgICBoZSBpcyBhbHNvIHRvIGJlIGxhdWdoZWQgYXQsIGJlY2F1c2UgYSBjb25zdWwsIGlmIGhlIGJlIG5vdCBpbnZlc3RlZCB3aXRoIHRoZSBhdXRob3JpdHkgYnkgYQogICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiwgaGFzIG5vIHBvd2VyIHRvIGludGVyZmVyZSBpbiBtaWxpdGFyeSBhZmZhaXJzOyBhbmQKICAgICAgIHlldCBoZSBnaXZlcyB0aGlzIG1hbiB3aG9tIGhlIHByb2hpYml0cyBmcm9tIGludGVyY2VkaW5nLCB0aGUgdmVyeSBzYW1lIHBvd2VyLCBldmVuIGlmIHRoZQogICAgICAgdmV0byBiZSBpbnRlcnBvc2VkLCBhcyBpZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxleCBjdXJpYXRhPC9mb3JlaWduPiBoYWQgYmVlbiBwYXNzZWQuIFNvIHRoYXQKICAgICAgIEkgYW0gYXQgYSBsb3NzIHRvIHVuZGVyc3RhbmQgZWl0aGVyIHdoeSBoZSBwcm9oaWJpdHMgdGhlIGludGVyY2Vzc2lvbiwgb3Igd2h5IGhlIHRoaW5rcyB0aGF0CiAgICAgICBhbnkgb25lIHdpbGwgaW50ZXJjZWRlOyBhcyB0aGUgaW50ZXJjZXNzaW9uIHdpbGwgb25seSBwcm92ZSB0aGUgZm9sbHkgb2YgdGhlIGludGVyY2Vzc29yLCBhbmQKICAgICAgIHdpbGwgbm90IGhpbmRlciB0aGUgYnVzaW5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4sIGJ5IHRoZQogICAgICAgaW50ZXJjZXNzaW9uIG9mIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLiBOb3QgdGhhdCB3ZSBjb21wbGFpbiB0aGF0IHRoZSB0cmlidW5lcyBzaG91bGQKICAgICAgIGhhdmUgdGhpcyBwb3dlcjsgb25seSwgaWYgYW55IG9uZSB1c2VzIGl0IGluIGEgcmFuZG9tIGFuZCBpbmNvbnNpZGVyYXRlIG1hbm5lciwgd2UgZm9ybSBvdXIKICAgICAgIG93biBvcGluaW9uLiBCdXQgdGhpcyB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGJ5IGhpcyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5sZXggY3VyaWF0YTwvZm9yZWlnbj4sCiAgICAgICB3aGljaCB0aGUgcHJhZXRvciBpcyB0byBicmluZyBmb3J3YXJkLCB0YWtlcyBhd2F5IHRoZSBwb3dlciBvZiBpbnRlcmNlc3Npb24uIEFuZCB3aGlsZSBoZSBpcwogICAgICAgbWFkZSB0byBiZSBibGFtZWQgZm9yIGNhdXNpbmcgdGhlIHRyaWJ1bml0aWFuIHBvd2VyIHRvIGJlIGRpbWluaXNoZWQgYnkgaGlzIGluc3RydW1lbnRhbGl0eSwKICAgICAgIGhlIGlzIGFsc28gdG8gYmUgbGF1Z2hlZCBhdCwgYmVjYXVzZSBhIGNvbnN1bCwgaWYgaGUgYmUgbm90IGludmVzdGVkIHdpdGggdGhlIGF1dGhvcml0eSBieSBhCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+LCBoYXMgbm8gcG93ZXIgdG8gaW50ZXJmZXJlIGluIG1pbGl0YXJ5IGFmZmFpcnM7IGFuZAogICAgICAgeWV0IGhlIGdpdmVzIHRoaXMgbWFuIHdob20gaGUgcHJvaGliaXRzIGZyb20gaW50ZXJjZWRpbmcsIHRoZSB2ZXJ5IHNhbWUgcG93ZXIsIGV2ZW4gaWYgdGhlCiAgICAgICB2ZXRvIGJlIGludGVycG9zZWQsIGFzIGlmIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bGV4IGN1cmlhdGE8L2ZvcmVpZ24+IGhhZCBiZWVuIHBhc3NlZC4gU28gdGhhdAogICAgICAgSSBhbSBhdCBhIGxvc3MgdG8gdW5kZXJzdGFuZCBlaXRoZXIgd2h5IGhlIHByb2hpYml0cyB0aGUgaW50ZXJjZXNzaW9uLCBvciB3aHkgaGUgdGhpbmtzIHRoYXQKICAgICAgIGFueSBvbmUgd2lsbCBpbnRlcmNlZGU7IGFzIHRoZSBpbnRlcmNlc3Npb24gd2lsbCBvbmx5IHByb3ZlIHRoZSBmb2xseSBvZiB0aGUgaW50ZXJjZXNzb3IsIGFuZAogICAgICAgd2lsbCBub3QgaGluZGVyIHRoZSBidXNpbmVzcy4gPC90cmFuc2xhdGlvbj4="
translation['2.12.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXQgdGhlcmUgdGhlbiBiZSBkZWNlbXZpcnMsIGFwcG9pbnRlZCBuZWl0aGVyIGJ5IHRoZSBnZW51aW5lIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LOKAlHRoYXQgaXMgdG8gc2F5LCBieSB0aGUgdm90ZXMgb2YgdGhlIHBlb3BsZSzigJRub3IgYnkKICAgICAgIHRoYXQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4gY29udmVuZWQgaW4gYXBwZWFyYW5jZSwgdG8ga2VlcCB1cCBhbiBhbmNpZW50CiAgICAgICBjdXN0b20sIGJ5IHRoZSB0aGlydHkgbGljdG9ycyBmb3IgdGhlIHNha2Ugb2YgdGhlIGF1c3BpY2VzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+4oCcSW4gYWZ0ZXIgdGltZXMsIHdoZW4gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWEgY3VyaWF0YTwvZm9yZWlnbj4gd2VyZQogICAgICAgIGxpdHRsZSBtb3JlIHRoYW4gYSBtYXR0ZXIgb2YgZm9ybSwgdGhlaXIgc3VmZnJhZ2VzIHdlcmUgcmVwcmVzZW50ZWQgYnkgdGhlIHRoaXJ0eSBsaWN0b3JzIG9mCiAgICAgICAgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhZTwvZm9yZWlnbj4sIHdob3NlIGR1dHkgaXQgd2FzIHRvIHN1bW1vbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWFlPC9mb3JlaWduPiB3aGVuIHRoZSBtZWV0aW5ncyBhY3R1YWxseSB0b29rIHBsYWNlLuKAneKAlFNtaXRoLCBEaWN0LgogICAgICAgIEFudC4gcC4gMjczIGEsIHYuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNvbWl0aWE8L2ZvcmVpZ24+Ljwvbm90ZT4gU2VlIG5vdywgYWxzbywgaG93IG11Y2gKICAgICAgIGdyZWF0ZXIgaG9ub3VycyBoZSBjb25mZXJzIG9uIHRoZXNlIG1lbiB3aG8gaGF2ZSByZWNlaXZlZCBubyBhdXRob3JpdHkgZnJvbSB5b3UsIHRoYW4gd2UgaGF2ZQogICAgICAgcmVjZWl2ZWQsIHRvIHdob20geW91IGhhdmUgZ2l2ZW4gdGhlIG1vc3QgYW1wbGUgYXV0aG9yaXR5LCBIZSBvcmRlcnMgdGhlIGRlY2VtdmlycywgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBMYXRpbiBoYXMsIOKAnDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmRlY2VtdmlyaQogICAgICAgIHB1bGxhcmlpPC9mb3JlaWduPuKAnS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UHVsbGFyaXVzPC9mb3JlaWduPiB3YXMgdGhlIG9mZmljZXIKICAgICAgICBhcHBvaW50ZWQgdG8gZmVlZCBhbmQgdGFrZSBjYXJlIG9mIHRoZSBzYWNyZWQgY2hpY2tlbnMgdGhhdCB3ZXJlIGtlcHQgZm9yIHRoZSBwdXJwb3NlIG9mCiAgICAgICAgdGFraW5nIHRoZSBhdXNwaWNlczsgYW5kIG11Y2ggd2FzIGluZmVycmVkIGZyb20gdGhlIHdheSBpbiB3aGljaCB0aGV5IHRvb2sgdGhlaXIgZm9vZCwgb3IKICAgICAgICBwZXJoYXBzIHJlZnVzZWQgaXQuPC9ub3RlPiB3aG8gaGF2ZSB0aGUgY2FyZSBvZiB0aGUgYXVzcGljZXMsIHRvIHRha2UgYXVzcGljZXMgZm9yIHRoZSBzYWtlCiAgICAgICBvZiBjb25kdWN0aW5nIHRoZSBjb2xvbmllcy4g4oCcQWNjb3JkaW5nLOKAnSBzYXlzIGhlLCDigJx0byB0aGUgc2FtZQogICAgICAgcmlnaHQgd2hpY2ggdGhlIHRyaXVtdmlycyBoYWQgYnkgdGhlIFNlbXByb25pYW4gbGF3LuKAnSBEbyB5b3UgdmVudHVyZSwgTyBSdWxsdXMsCiAgICAgICBldmVuIHRvIG1ha2UgbWVudGlvbiBvZiB0aGUgU2VtcHJvbmlhbiBsYXc/IGFuZCBkb2VzIG5vdCB0aGF0IGxhdyBpdHNlbGYgcmVtaW5kIHlvdSB0aGF0CiAgICAgICB0aGVzZSB0cml1bXZpcnMgaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgdGhlIHN1ZmZyYWdlcyBvZiB0aGUgdHJpYmVzPyBBbmQgd2hpbGUgeW91IGFyZQogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+IHZlcnkgZmFyIHJlbW92ZWQgZnJvbSB0aGUganVzdGljZSBhbmQgbW9kZXN0eSBvZgogICAgICAgVGliZXJpdXMgR3JhY2NodXMsIGRvIHlvdSB0aGluayB0aGF0IGEgbGF3IG1hZGUgb24gc28gZGlmZmVyZW50IGEgcHJpbmNpcGxlIG91Z2h0IHRvIGhhdmUgdGhlCiAgICAgICBzYW1lIGF1dGhvcml0eT8gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjMyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYTwvZm9yZWlnbj4s4oCUdGhhdCBpcyB0byBzYXksIGJ5IHRoZSB2b3RlcyBvZiB0aGUgcGVvcGxlLOKAlG5vciBieQogICAgICAgdGhhdCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiBjb252ZW5lZCBpbiBhcHBlYXJhbmNlLCB0byBrZWVwIHVwIGFuIGFuY2llbnQKICAgICAgIGN1c3RvbSwgYnkgdGhlIHRoaXJ0eSBsaWN0b3JzIGZvciB0aGUgc2FrZSBvZiB0aGUgYXVzcGljZXMuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj7igJxJbiBhZnRlciB0aW1lcywgd2hlbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29taXRpYSBjdXJpYXRhPC9mb3JlaWduPiB3ZXJlCiAgICAgICAgbGl0dGxlIG1vcmUgdGhhbiBhIG1hdHRlciBvZiBmb3JtLCB0aGVpciBzdWZmcmFnZXMgd2VyZSByZXByZXNlbnRlZCBieSB0aGUgdGhpcnR5IGxpY3RvcnMgb2YKICAgICAgICB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y3VyaWFlPC9mb3JlaWduPiwgd2hvc2UgZHV0eSBpdCB3YXMgdG8gc3VtbW9uIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jdXJpYWU8L2ZvcmVpZ24+IHdoZW4gdGhlIG1lZXRpbmdzIGFjdHVhbGx5IHRvb2sgcGxhY2Uu4oCd4oCUU21pdGgsIERpY3QuCiAgICAgICAgQW50LiBwLiAyNzMgYSwgdi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q29taXRpYTwvZm9yZWlnbj4uPC9ub3RlPiBTZWUgbm93LCBhbHNvLCBob3cgbXVjaAogICAgICAgZ3JlYXRlciBob25vdXJzIGhlIGNvbmZlcnMgb24gdGhlc2UgbWVuIHdobyBoYXZlIHJlY2VpdmVkIG5vIGF1dGhvcml0eSBmcm9tIHlvdSwgdGhhbiB3ZSBoYXZlCiAgICAgICByZWNlaXZlZCwgdG8gd2hvbSB5b3UgaGF2ZSBnaXZlbiB0aGUgbW9zdCBhbXBsZSBhdXRob3JpdHksIEhlIG9yZGVycyB0aGUgZGVjZW12aXJzLCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGN1cmlhdGE8L2ZvcmVpZ24+IHdlcmUKICAgICAgICBsaXR0bGUgbW9yZSB0aGFuIGEgbWF0dGVyIG9mIGZvcm0sIHRoZWlyIHN1ZmZyYWdlcyB3ZXJlIHJlcHJlc2VudGVkIGJ5IHRoZSB0aGlydHkgbGljdG9ycyBvZgogICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jdXJpYWU8L2ZvcmVpZ24+LCB3aG9zZSBkdXR5IGl0IHdhcyB0byBzdW1tb24gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmN1cmlhZTwvZm9yZWlnbj4gd2hlbiB0aGUgbWVldGluZ3MgYWN0dWFsbHkgdG9vayBwbGFjZS7igJ3igJRTbWl0aCwgRGljdC4KICAgICAgICBBbnQuIHAuIDI3MyBhLCB2LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5Db21pdGlhPC9mb3JlaWduPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIExhdGluIGhhcywg4oCcPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpCiAgICAgICAgcHVsbGFyaWk8L2ZvcmVpZ24+4oCdLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QdWxsYXJpdXM8L2ZvcmVpZ24+IHdhcyB0aGUgb2ZmaWNlcgogICAgICAgIGFwcG9pbnRlZCB0byBmZWVkIGFuZCB0YWtlIGNhcmUgb2YgdGhlIHNhY3JlZCBjaGlja2VucyB0aGF0IHdlcmUga2VwdCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICB0YWtpbmcgdGhlIGF1c3BpY2VzOyBhbmQgbXVjaCB3YXMgaW5mZXJyZWQgZnJvbSB0aGUgd2F5IGluIHdoaWNoIHRoZXkgdG9vayB0aGVpciBmb29kLCBvcgogICAgICAgIHBlcmhhcHMgcmVmdXNlZCBpdC48L25vdGU+IHdobyBoYXZlIHRoZSBjYXJlIG9mIHRoZSBhdXNwaWNlcywgdG8gdGFrZSBhdXNwaWNlcyBmb3IgdGhlIHNha2UKICAgICAgIG9mIGNvbmR1Y3RpbmcgdGhlIGNvbG9uaWVzLiDigJxBY2NvcmRpbmcs4oCdIHNheXMgaGUsIOKAnHRvIHRoZSBzYW1lCiAgICAgICByaWdodCB3aGljaCB0aGUgdHJpdW12aXJzIGhhZCBieSB0aGUgU2VtcHJvbmlhbiBsYXcu4oCdIERvIHlvdSB2ZW50dXJlLCBPIFJ1bGx1cywKICAgICAgIGV2ZW4gdG8gbWFrZSBtZW50aW9uIG9mIHRoZSBTZW1wcm9uaWFuIGxhdz8gYW5kIGRvZXMgbm90IHRoYXQgbGF3IGl0c2VsZiByZW1pbmQgeW91IHRoYXQKICAgICAgIHRoZXNlIHRyaXVtdmlycyBoYXZlIGJlZW4gY3JlYXRlZCBieSB0aGUgc3VmZnJhZ2VzIG9mIHRoZSB0cmliZXM/IEFuZCB3aGlsZSB5b3UgYXJlCiAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZGVjZW12aXJpCiAgICAgICAgcHVsbGFyaWk8L2ZvcmVpZ24+4oCdLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5QdWxsYXJpdXM8L2ZvcmVpZ24+IHdhcyB0aGUgb2ZmaWNlcgogICAgICAgIGFwcG9pbnRlZCB0byBmZWVkIGFuZCB0YWtlIGNhcmUgb2YgdGhlIHNhY3JlZCBjaGlja2VucyB0aGF0IHdlcmUga2VwdCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgICB0YWtpbmcgdGhlIGF1c3BpY2VzOyBhbmQgbXVjaCB3YXMgaW5mZXJyZWQgZnJvbSB0aGUgd2F5IGluIHdoaWNoIHRoZXkgdG9vayB0aGVpciBmb29kLCBvcgogICAgICAgIHBlcmhhcHMgcmVmdXNlZCBpdC48L3RyYW5zbGF0aW9uPg=="
translation['2.228'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+IHZlcnkgZmFyIHJlbW92ZWQgZnJvbSB0aGUganVzdGljZSBhbmQgbW9kZXN0eSBvZgogICAgICAgVGliZXJpdXMgR3JhY2NodXMsIGRvIHlvdSB0aGluayB0aGF0IGEgbGF3IG1hZGUgb24gc28gZGlmZmVyZW50IGEgcHJpbmNpcGxlIG91Z2h0IHRvIGhhdmUgdGhlCiAgICAgICBzYW1lIGF1dGhvcml0eT8gPC90cmFuc2xhdGlvbj4="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJlc2lkZXMgYWxsIHRoaXMsIGhlIGdpdmVzIHRoZW0gYXV0aG9yaXR5IHByYWV0b3JpYW4gaW4gbmFtZSwgYnV0IGtpbmdseSBpbiByZWFsaXR5LiBIZQogICAgICAgZGVzY3JpYmVzIHRoZWlyIHBvd2VyLCBhcyBhIHBvd2VyIGZvciBmaXZlIHllYXJzOyBidXQgaGUgbWFrZXMgaXQgcGVycGV0dWFsLiBGb3IgaGUKICAgICAgIHN0cmVuZ3RoZW5zIGl0IHdpdGggc3VjaCBidWx3YXJrcyBhbmQgZGVmZW5jZXMgdGhhdCBpdCB3aWxsIGJlIHF1aXRlIGltcG9zc2libGUgdG8gZGVwcml2ZQogICAgICAgdGhlbSBvZiBpdCBhZ2FpbnN0IHRoZWlyIG93biBjb25zZW50LiBUaGVuIGhlIGFkb3JucyB0aGVtIHdpdGggYXBwYXJpdG9ycywgYW5kIHNlY3JldGFyaWVzLAogICAgICAgYW5kIGNsZXJrcywgYW5kIGNyaWVycywgYW5kIGFyY2hpdGVjdHM7IGJlc2lkZXMgdGhhdCwgd2l0aCBtdWxlcywgYW5kIHRlbnRzLCBhbmQgY2VudHVyaWVzLAogICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGVyZSBpcywgbm8gZG91YnQsIHNvbWUgY29ycnVwdGlvbiBoZXJlIGluIHRoZSB0ZXh0Ljwvbm90ZT4gYW5kIGFsbAogICAgICAgc29ydHMgb2YgZnVybml0dXJlOyBoZSBkcmF3cyBtb25leSBmb3IgdGhlaXIgZXhwZW5zZXMgZnJvbSB0aGUgdHJlYXN1cnk7IGhlIHN1cHBsaWVzIHRoZW0KICAgICAgIHdpdGggbW9yZSBtb25leSBmcm9tIHRoZSBhbGxpZXM7IGhlIGFwcG9pbnRzIHRoZW0gdHdvIGh1bmRyZWQgc3VydmV5b3JzIGZyb20gdGhlIGVxdWVzdHJpYW4KICAgICAgIGJvZHkgZXZlcnkgeWVhciBhcyB0aGVpciBwZXJzb25hbCBhdHRlbmRhbnRzLCBhbmQgYWxzbyBhcyBtaW5pc3RlcnMgYW5kIHNhdGVsbGl0ZXMgb2YgdGhlaXIKICAgICAgIHBvd2VyLiBZb3UgaGF2ZSBub3csIE8gUm9tYW5zLCB0aGUgZm9ybSBhbmQgdmVyeSBhcHBlYXJhbmNlIG9mIHR5cmFudHM7IHlvdSBzZWUgYWxsIHRoZQogICAgICAgZW5zaWducyBvZiBwb3dlciwgYnV0IG5vdCB5ZXQgdGhlIHBvd2VyIGl0c2VsZi4gRm9yLCBwZXJoYXBzLCBzb21lIG9uZSBtYXkgc2F5LAogICAgICAg4oCcV2VsbCwgd2hhdCBoYXJtIGRvIGFsbCB0aG9zZSBtZW4sIHNlY3JldGFyeSwgbGljdG9yLCBjcmllciwgYW5kIGNoaWNrZW4tZmVlZGVyIGRvCiAgICAgICBtZT/igJ0gSSB3aWxsIHRlbGwgeW91LiBUaGVzZSB0aGluZ3MgYXJlIG9mIHN1Y2ggYSBuYXR1cmUgdGhhdCB0aGUgbWFuIHdobyBoYXMgdGhlbQogICAgICAgd2l0aG91dCB0aGVpciBiZWluZyBjb25mZXJyZWQgYnkgeW91ciB2b3RlLCBtdXN0IHNlZW0gZWl0aGVyIGEgbW9uYXJjaCB3aXRoIGludG9sZXJhYmxlCiAgICAgICBwb3dlciwgb3IgaWYgaGUgYXNzdW1lcyB0aGVtIGFzIGEgcHJpdmF0ZSBpbmRpdmlkdWFsLCBhIG1hZG1hbi4gPC9wPgoJCQkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMsIG5vIGRvdWJ0LCBzb21lIGNvcnJ1cHRpb24gaGVyZSBpbiB0aGUgdGV4dC48L25vdGU+IGFuZCBhbGwKICAgICAgIHNvcnRzIG9mIGZ1cm5pdHVyZTsgaGUgZHJhd3MgbW9uZXkgZm9yIHRoZWlyIGV4cGVuc2VzIGZyb20gdGhlIHRyZWFzdXJ5OyBoZSBzdXBwbGllcyB0aGVtCiAgICAgICB3aXRoIG1vcmUgbW9uZXkgZnJvbSB0aGUgYWxsaWVzOyBoZSBhcHBvaW50cyB0aGVtIHR3byBodW5kcmVkIHN1cnZleW9ycyBmcm9tIHRoZSBlcXVlc3RyaWFuCiAgICAgICBib2R5IGV2ZXJ5IHllYXIgYXMgdGhlaXIgcGVyc29uYWwgYXR0ZW5kYW50cywgYW5kIGFsc28gYXMgbWluaXN0ZXJzIGFuZCBzYXRlbGxpdGVzIG9mIHRoZWlyCiAgICAgICBwb3dlci4gWW91IGhhdmUgbm93LCBPIFJvbWFucywgdGhlIGZvcm0gYW5kIHZlcnkgYXBwZWFyYW5jZSBvZiB0eXJhbnRzOyB5b3Ugc2VlIGFsbCB0aGUKICAgICAgIGVuc2lnbnMgb2YgcG93ZXIsIGJ1dCBub3QgeWV0IHRoZSBwb3dlciBpdHNlbGYuIEZvciwgcGVyaGFwcywgc29tZSBvbmUgbWF5IHNheSwKICAgICAgIOKAnFdlbGwsIHdoYXQgaGFybSBkbyBhbGwgdGhvc2UgbWVuLCBzZWNyZXRhcnksIGxpY3RvciwgY3JpZXIsIGFuZCBjaGlja2VuLWZlZWRlciBkbwogICAgICAgbWU/4oCdIEkgd2lsbCB0ZWxsIHlvdS4gVGhlc2UgdGhpbmdzIGFyZSBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgdGhlIG1hbiB3aG8gaGFzIHRoZW0KICAgICAgIHdpdGhvdXQgdGhlaXIgYmVpbmcgY29uZmVycmVkIGJ5IHlvdXIgdm90ZSwgbXVzdCBzZWVtIGVpdGhlciBhIG1vbmFyY2ggd2l0aCBpbnRvbGVyYWJsZQogICAgICAgcG93ZXIsIG9yIGlmIGhlIGFzc3VtZXMgdGhlbSBhcyBhIHByaXZhdGUgaW5kaXZpZHVhbCwgYSBtYWRtYW4uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPiBKdXN0IHNlZSB3aGF0IGdyZWF0IGF1dGhvcml0eSB0aGV5IGFyZSBpbnZlc3RlZCB3aXRoLAogICAgICAgYW5kIHlvdSB3aWxsIHNheSB0aGF0IGl0IGlzIG5vdCB0aGUgaW5zYW5pdHkgb2YgcHJpdmF0ZSBpbmRpdmlkdWFscywgYnV0IHRoZSBpbW1vZGVyYXRlCiAgICAgICBhcnJvZ2FuY2Ugb2Yga2luZ3MuIEZpcnN0IG9mIGFsbCwgdGhleSBhcmUgZW50cnVzdGVkIHdpdGggYm91bmRsZXNzIHBvd2VyIG9mIGFjcXVpcmluZwogICAgICAgZW5vcm1vdXMgc3VtcyBvZiBtb25leSBvdXQgb2YgeW91ciByZXZlbnVlcywgbm90IGJ5IGZhcm1pbmcgdGhlbSBidXQgYnkgYWxpZW5hdGluZyB0aGVtLiBJbgogICAgICAgdGhlIG5leHQgcGxhY2UsIHRoZXkgYXJlIGFsbG93ZWQgdG8gcHVyc3VlIGFuIGlucXVpcnkgaW50byB0aGUgY29uZHVjdCBvZiBldmVyeSBjb3VudHJ5IGFuZAogICAgICAgb2YgZXZlcnkgbmF0aW9uLCB3aXRob3V0IGFueSBiZW5jaCBvZiBqdWRnZXM7IHRvIHB1bmlzaCB3aXRob3V0IGFueSByaWdodCBvZiBhcHBlYWwgYmVpbmcKICAgICAgIGFsbG93ZWQ7IGFuZCB0byBjb25kZW1uIHdpdGhvdXQgdGhlcmUgYmVpbmcgYW55IG1lYW5zIG9mIHByb2N1cmluZyBhIHJldmVyc2FsIG9mIHRoZWlyCiAgICAgICBzZW50ZW5jZS4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSB3aWxsIGJlIGFibGUgZm9yIGZpdmUgeWVhcnMgdG8gc2l0IGluCiAgICAgICBqdWRnbWVudCBvbiB0aGUgY29uc3Vscywgb3IgZXZlbiBvbiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0aGVtc2VsdmVzOyBidXQgYWxsIHRoYXQgdGltZQogICAgICAgbm8gb25lIHdpbGwgYmUgYWJsZSB0byBzaXQgaW4ganVkZ21lbnQgb24gdGhlbS4gVGhleSB3aWxsIGJlIGFsbG93ZWQgdG8gZmlsbCBtYWdpc3RlcmlhbAogICAgICAgb2ZmaWNlczsgYnV0IHRoZXkgd2lsbCBub3QgYmUgYWxsb3dlZCB0byBiZSBwcm9zZWN1dGVkLiBUaGV5IHdpbGwgaGF2ZSBwb3dlciB0byBwdXJjaGFzZQogICAgICAgbGFuZHMsIGZyb20gd2hvbXNvZXZlciB0aGV5IGNob29zZSwgd2hhdGV2ZXIgdGhleSBjaG9vc2UsIGFuZCBhdCB3aGF0ZXZlciBwcmljZSB0aGV5IGNob29zZS4KICAgICAgIFRoZXkgYXJlIGFsbG93ZWQgdG8gZXN0YWJsaXNoIG5ldyBjb2xvbmllcywgdG8gcmVjcnVpdCBvbGQgb25lcywgdG8gZmlsbCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IHdpdGggdGhlaXIgY29sb25pc3RzOyB0aGV5IGhhdmUgYWJzb2x1dGUgYXV0aG9yaXR5IGZvcgogICAgICAgdmlzaXRpbmcgZXZlcnkgcHJvdmluY2UsIGZvciBkZXByaXZpbmcgZnJlZSBwZW9wbGUgb2YgdGhlaXIgbGFuZHMsIGZvciBnaXZpbmcgb3IgdGFraW5nIGF3YXkKICAgICAgIGtpbmdkb21zLCB3aGVuZXZlciB0aGV5IHBsZWFzZS4gVGhleSBtYXkgYmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPgogICAgICAgd2hlbiBpdCBpcyBjb252ZW5pZW50IHRvIHRoZW07IGJ1dCB0aGV5IGhhdmUgYSByaWdodCBhbHNvIHRvIHdhbmRlciBhYm91dCB3aGVyZXZlciB0aGV5IGxpa2UKICAgICAgIHdpdGggc3VwcmVtZSBjb21tYW5kLCBhbmQgd2l0aCBhIHBvd2VyIG9mIHNpdHRpbmcgaW4ganVkZ21lbnQgb24gZXZlcnl0aGluZy4gVGhleSBhcmUgYWxsb3dlZAogICAgICAgdG8gcHV0IGFuIGVuZCB0byBhbGwgY3JpbWluYWwgdHJpYWxzOyB0byByZW1vdmUgZnJvbSB0aGUgdHJpYnVuYWxzIHdob2V2ZXIgdGhleSB0aGluayBmaXQ7IHRvCiAgICAgICBkZWNpZGUgYnkgdGhlbXNlbHZlcyBvbiB0aGUgbW9zdCBpbXBvcnRhbnQgbWF0dGVyczsgdG8gZGVsZWdhdGUgdGhlaXIgcG93ZXIgdG8gYSBxdWFlc3RvcjsgdG8KICAgICAgIHNlbmQgYWJvdXQgc3VydmV5b3JzOyBhbmQgdG8gcmF0aWZ5IHdoYXRldmVyIHRoZSBzdXJ2ZXlvciBoYXMgcmVwb3J0ZWQgdG8gdGhhdCBzaW5nbGUKICAgICAgIGRlY2VtdmlyIGJ5IHdob20gaGUgaGFzIGJlZW4gc2VudC4gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz4gSnVzdCBzZWUgd2hhdCBncmVhdCBhdXRob3JpdHkgdGhleSBhcmUgaW52ZXN0ZWQgd2l0aCwKICAgICAgIGFuZCB5b3Ugd2lsbCBzYXkgdGhhdCBpdCBpcyBub3QgdGhlIGluc2FuaXR5IG9mIHByaXZhdGUgaW5kaXZpZHVhbHMsIGJ1dCB0aGUgaW1tb2RlcmF0ZQogICAgICAgYXJyb2dhbmNlIG9mIGtpbmdzLiBGaXJzdCBvZiBhbGwsIHRoZXkgYXJlIGVudHJ1c3RlZCB3aXRoIGJvdW5kbGVzcyBwb3dlciBvZiBhY3F1aXJpbmcKICAgICAgIGVub3Jtb3VzIHN1bXMgb2YgbW9uZXkgb3V0IG9mIHlvdXIgcmV2ZW51ZXMsIG5vdCBieSBmYXJtaW5nIHRoZW0gYnV0IGJ5IGFsaWVuYXRpbmcgdGhlbS4gSW4KICAgICAgIHRoZSBuZXh0IHBsYWNlLCB0aGV5IGFyZSBhbGxvd2VkIHRvIHB1cnN1ZSBhbiBpbnF1aXJ5IGludG8gdGhlIGNvbmR1Y3Qgb2YgZXZlcnkgY291bnRyeSBhbmQKICAgICAgIG9mIGV2ZXJ5IG5hdGlvbiwgd2l0aG91dCBhbnkgYmVuY2ggb2YganVkZ2VzOyB0byBwdW5pc2ggd2l0aG91dCBhbnkgcmlnaHQgb2YgYXBwZWFsIGJlaW5nCiAgICAgICBhbGxvd2VkOyBhbmQgdG8gY29uZGVtbiB3aXRob3V0IHRoZXJlIGJlaW5nIGFueSBtZWFucyBvZiBwcm9jdXJpbmcgYSByZXZlcnNhbCBvZiB0aGVpcgogICAgICAgc2VudGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhleSB3aWxsIGJlIGFibGUgZm9yIGZpdmUgeWVhcnMgdG8gc2l0IGluCiAgICAgICBqdWRnbWVudCBvbiB0aGUgY29uc3Vscywgb3IgZXZlbiBvbiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSB0aGVtc2VsdmVzOyBidXQgYWxsIHRoYXQgdGltZQogICAgICAgbm8gb25lIHdpbGwgYmUgYWJsZSB0byBzaXQgaW4ganVkZ21lbnQgb24gdGhlbS4gVGhleSB3aWxsIGJlIGFsbG93ZWQgdG8gZmlsbCBtYWdpc3RlcmlhbAogICAgICAgb2ZmaWNlczsgYnV0IHRoZXkgd2lsbCBub3QgYmUgYWxsb3dlZCB0byBiZSBwcm9zZWN1dGVkLiBUaGV5IHdpbGwgaGF2ZSBwb3dlciB0byBwdXJjaGFzZQogICAgICAgbGFuZHMsIGZyb20gd2hvbXNvZXZlciB0aGV5IGNob29zZSwgd2hhdGV2ZXIgdGhleSBjaG9vc2UsIGFuZCBhdCB3aGF0ZXZlciBwcmljZSB0aGV5IGNob29zZS4KICAgICAgIFRoZXkgYXJlIGFsbG93ZWQgdG8gZXN0YWJsaXNoIG5ldyBjb2xvbmllcywgdG8gcmVjcnVpdCBvbGQgb25lcywgdG8gZmlsbCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCB0aGVpciBjb2xvbmlzdHM7IHRoZXkgaGF2ZSBhYnNvbHV0ZSBhdXRob3JpdHkgZm9yCiAgICAgICB2aXNpdGluZyBldmVyeSBwcm92aW5jZSwgZm9yIGRlcHJpdmluZyBmcmVlIHBlb3BsZSBvZiB0aGVpciBsYW5kcywgZm9yIGdpdmluZyBvciB0YWtpbmcgYXdheQogICAgICAga2luZ2RvbXMsIHdoZW5ldmVyIHRoZXkgcGxlYXNlLiBUaGV5IG1heSBiZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4KICAgICAgIHdoZW4gaXQgaXMgY29udmVuaWVudCB0byB0aGVtOyBidXQgdGhleSBoYXZlIGEgcmlnaHQgYWxzbyB0byB3YW5kZXIgYWJvdXQgd2hlcmV2ZXIgdGhleSBsaWtlCiAgICAgICB3aXRoIHN1cHJlbWUgY29tbWFuZCwgYW5kIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGluIGp1ZGdtZW50IG9uIGV2ZXJ5dGhpbmcuIFRoZXkgYXJlIGFsbG93ZWQKICAgICAgIHRvIHB1dCBhbiBlbmQgdG8gYWxsIGNyaW1pbmFsIHRyaWFsczsgdG8gcmVtb3ZlIGZyb20gdGhlIHRyaWJ1bmFscyB3aG9ldmVyIHRoZXkgdGhpbmsgZml0OyB0bwogICAgICAgZGVjaWRlIGJ5IHRoZW1zZWx2ZXMgb24gdGhlIG1vc3QgaW1wb3J0YW50IG1hdHRlcnM7IHRvIGRlbGVnYXRlIHRoZWlyIHBvd2VyIHRvIGEgcXVhZXN0b3I7IHRvCiAgICAgICBzZW5kIGFib3V0IHN1cnZleW9yczsgYW5kIHRvIHJhdGlmeSB3aGF0ZXZlciB0aGUgc3VydmV5b3IgaGFzIHJlcG9ydGVkIHRvIHRoYXQgc2luZ2xlCiAgICAgICBkZWNlbXZpciBieSB3aG9tIGhlIGhhcyBiZWVuIHNlbnQuIDwvdHJhbnNsYXRpb24+"
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIGEgZGVmZWN0IGluIG15IGxhbmd1YWdlLCBPIFJvbWFucywgd2hlbiBJIGNhbGwgdGhpcyBwb3dlciBhIGtpbmdseSBwb3dlci4gRm9yIGluCiAgICAgICB0cnV0aCwgaXQgaXMgc29tZXRoaW5nIG11Y2ggbW9yZSBjb25zaWRlcmFibGU7IGZvciB0aGVyZSBuZXZlciB3YXMgYW55IGtpbmdseSBwb3dlciB0aGF0LCBpZgogICAgICAgaXQgd2FzIG5vdCBkZWZpbmVkIGJ5IHNvbWUgZXhwcmVzcyBsYXcsIHdhcyBub3QgYXQgbGVhc3QgdW5kZXJzdG9vZCB0byBiZSBzdWJqZWN0IHRvIGNlcnRhaW4KICAgICAgIGxpbWl0YXRpb25zLiBCdXQgdGhpcyBwb3dlciBpcyBhYnNvbHV0ZWx5IHVuYm91bmRlZDsgaXQgaXMgb25lIHdpdGhpbiB3aGljaCBhbGwga2luZ2x5CiAgICAgICBwb3dlcnMsIGFuZCB5b3VyIG93biBpbXBlcmlhbCBhdXRob3JpdHksIHdoaWNoIGlzIG9mIHN1Y2ggd2lkZSBleHRlbnQsIGFuZCBhbGwgb3RoZXIgcG93ZXJzLAogICAgICAgd2hldGhlciBmcmVlbHkgZXhlcmNpc2VkIGJ5IHlvdXIgcGVybWlzc2lvbiwgb3IgZXhpc3Rpbmcgb25seSBieSB5b3VyIHRhY2l0IGNvdW50ZW5hbmNlLCBhcmUsCiAgICAgICBieSBleHByZXNzIHBlcm1pc3Npb24gb2YgdGhlIGxhdywgY29tcHJlaGVuZGVkLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGZpcnN0IHRoaW5nIHdoaWNoIGlzIGdpdmVuIHRvIHRoZW0gaXMsIGEgbGliZXJ0eSBvZiBzZWxsaW5nIGV2ZXJ5dGhpbmcgY29uY2VybmluZyB0aGUKICAgICAgIHNhbGUgb2Ygd2hpY2ggcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSB3ZXJlIHBhc3NlZCBpbiB0aGUgY29uc3Vsc2hpcCBvZiBNYXJjdXMgVHVsbGl1cyBhbmQKICAgICAgIENuYWV1cyBDb3JuZWxpdXMgb3IgYWZ0ZXJ3YXJkcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPiBXaHkgaXMgdGhpcyBzbyBvYnNjdXJlIGFuZAogICAgICAgc28gY29uY2VhbGVkPyBXaGF0IGlzIHRoZSBtZWFuaW5nIG9mIGl0PyBDb3VsZCBub3QgdGhvc2UgbWF0dGVycyBjb25jZXJuaW5nIHdoaWNoIHRoZSBzZW5hdGUKICAgICAgIHBhc3NlZCByZXNvbHV0aW9ucywgYmUgbWVudGlvbmVkIGluIHRoZSBsYXcgYnkgbmFtZT8gVGhlcmUgYXJlIHR3byByZWFzb25zIGZvciB0aGlzCiAgICAgICBvYnNjdXJpdHksIE8gUm9tYW5zOyBvbmUsIGEgcmVhc29uIG9mIG1vZGVzdHksIGlmIHRoZXJlIGNhbiBiZSBhbnkgbW9kZXN0eSBpbiBzdWNoIGlub3JkaW5hdGUKICAgICAgIGltcHVkZW5jZTsgdGhlIG90aGVyLCBhIHJlYXNvbiBvZiB3aWNrZWRuZXNzLiBGb3IgaXQgZG9lcyBub3QgZGFyZSB0byBuYW1lIHRob3NlIHRoaW5ncyB3aGljaAogICAgICAgdGhlIHNlbmF0ZSByZXNvbHZlZCB3ZXJlIHRvIGhlIHNvbGQsIG1lbnRpb25pbmcgdGhlbSBieSBuYW1lOyBmb3IgdGhleSBhcmUgcHVibGljIHBsYWNlcyBpbgogICAgICAgdGhlIGNpdHksIHRoZXkgYXJlIHNocmluZXMsIHdoaWNoIHNpbmNlIHRoZSByZXN0b3JhdGlvbiBvZiB0aGUgdHJpYnVuaXRpYW4gcG93ZXIgbm8gb25lIGhhcwogICAgICAgdG91Y2hlZCwgYW5kIHdoaWNoIG91ciBhbmNlc3RvcnMgcGFydGx5IGludGVuZGVkIHRvIGJlIHJlZnVnZXMgaW4gdGltZXMgb2YgZGFuZ2VyIGluIHRoZQogICAgICAgaGVhcnQgb2YgdGhlIGNpdHkuIEJ1dCBhbGwgdGhlc2UgdGhpbmdzIHRoZSBkZWNlbXZpcnMgd2lsbCBzZWxsIGJ5IHRoaXMgbGF3IG9mIHRoaXMgdHJpYnVuZQogICAgICAgb2YgdGhlIHBlb3BsZS4gQmVzaWRlcyB0aGVtLCB0aGVyZSB3aWxsIGJlIE1vdW50IEdhdXJ1czsgYmVzaWRlcyB0aGF0LCB0aGVyZSB3aWxsIGJlIHRoZQogICAgICAgb3NpZXItYmVkcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pbnR1cm5hZSIga2V5PSJwZXJzZXVzLE1pbnR1cm5hZSI+TWludHVybmFlPC9wbGFjZU5hbWU+OyBiZXNpZGVzIHRoZW0sIHRoYXQKICAgICAgIHZlcnkgc2FsYWJsZSByb2FkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsSGVyY3VsYW5ldW0iIGtleT0icGVyc2V1cyxIZXJjdWxhbmV1bSI+SGVyY3VsYW5ldW08L3BsYWNlTmFtZT4sIGEgcm9hZCBvZgogICAgICAgbWFueSBkZWxpZ2h0cyBhbmQgb2YgY29uc2lkZXJhYmxlIHZhbHVlOyBhbmQgbWFueSBvdGhlciB0aGluZ3Mgd2hpY2ggdGhlIHNlbmF0ZSBjb25zaWRlcmVkIGl0CiAgICAgICBhZHZpc2FibGUgdG8gc2VsbCBvbiBhY2NvdW50IG9mIHRoZSBzdHJhaXRzIHRvIHdoaWNoIHRoZSB0cmVhc3VyeSB3YXMgcmVkdWNlZCwgYnV0IHdoaWNoIHRoZQogICAgICAgY29uc3VscyBkaWQgbm90IHNlbGwgb24gYWNjb3VudCBvZiB0aGUgdW5wb3B1bGFyaXR5IHdoaWNoIHdvdWxkIGhhdmUgYXR0ZW5kZWQgc3VjaCBhIG1lYXN1cmUuCiAgICAgICAgPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgcGVyaGFwcyBpdCBpcyBvd2luZyB0byBzaGFtZSB0aGF0IHRoZXJlIGlzIG5vCiAgICAgICBtZW50aW9uIG9mIGFsbCB0aGVzZSB0aGluZ3MgaW4gdGhlIGxhdy4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGlzIHRoaXMgc28gb2JzY3VyZSBhbmQKICAgICAgIHNvIGNvbmNlYWxlZD8gV2hhdCBpcyB0aGUgbWVhbmluZyBvZiBpdD8gQ291bGQgbm90IHRob3NlIG1hdHRlcnMgY29uY2VybmluZyB3aGljaCB0aGUgc2VuYXRlCiAgICAgICBwYXNzZWQgcmVzb2x1dGlvbnMsIGJlIG1lbnRpb25lZCBpbiB0aGUgbGF3IGJ5IG5hbWU/IFRoZXJlIGFyZSB0d28gcmVhc29ucyBmb3IgdGhpcwogICAgICAgb2JzY3VyaXR5LCBPIFJvbWFuczsgb25lLCBhIHJlYXNvbiBvZiBtb2Rlc3R5LCBpZiB0aGVyZSBjYW4gYmUgYW55IG1vZGVzdHkgaW4gc3VjaCBpbm9yZGluYXRlCiAgICAgICBpbXB1ZGVuY2U7IHRoZSBvdGhlciwgYSByZWFzb24gb2Ygd2lja2VkbmVzcy4gRm9yIGl0IGRvZXMgbm90IGRhcmUgdG8gbmFtZSB0aG9zZSB0aGluZ3Mgd2hpY2gKICAgICAgIHRoZSBzZW5hdGUgcmVzb2x2ZWQgd2VyZSB0byBoZSBzb2xkLCBtZW50aW9uaW5nIHRoZW0gYnkgbmFtZTsgZm9yIHRoZXkgYXJlIHB1YmxpYyBwbGFjZXMgaW4KICAgICAgIHRoZSBjaXR5LCB0aGV5IGFyZSBzaHJpbmVzLCB3aGljaCBzaW5jZSB0aGUgcmVzdG9yYXRpb24gb2YgdGhlIHRyaWJ1bml0aWFuIHBvd2VyIG5vIG9uZSBoYXMKICAgICAgIHRvdWNoZWQsIGFuZCB3aGljaCBvdXIgYW5jZXN0b3JzIHBhcnRseSBpbnRlbmRlZCB0byBiZSByZWZ1Z2VzIGluIHRpbWVzIG9mIGRhbmdlciBpbiB0aGUKICAgICAgIGhlYXJ0IG9mIHRoZSBjaXR5LiBCdXQgYWxsIHRoZXNlIHRoaW5ncyB0aGUgZGVjZW12aXJzIHdpbGwgc2VsbCBieSB0aGlzIGxhdyBvZiB0aGlzIHRyaWJ1bmUKICAgICAgIG9mIHRoZSBwZW9wbGUuIEJlc2lkZXMgdGhlbSwgdGhlcmUgd2lsbCBiZSBNb3VudCBHYXVydXM7IGJlc2lkZXMgdGhhdCwgdGhlcmUgd2lsbCBiZSB0aGUKICAgICAgIG9zaWVyLWJlZHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNaW50dXJuYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1pbnR1cm5hZSI+TWludHVybmFlPC9wbGFjZU5hbWU+OyBiZXNpZGVzIHRoZW0sIHRoYXQKICAgICAgIHZlcnkgc2FsYWJsZSByb2FkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsSGVyY3VsYW5ldW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEhlcmN1bGFuZXVtIj5IZXJjdWxhbmV1bTwvcGxhY2VOYW1lPiwgYSByb2FkIG9mCiAgICAgICBtYW55IGRlbGlnaHRzIGFuZCBvZiBjb25zaWRlcmFibGUgdmFsdWU7IGFuZCBtYW55IG90aGVyIHRoaW5ncyB3aGljaCB0aGUgc2VuYXRlIGNvbnNpZGVyZWQgaXQKICAgICAgIGFkdmlzYWJsZSB0byBzZWxsIG9uIGFjY291bnQgb2YgdGhlIHN0cmFpdHMgdG8gd2hpY2ggdGhlIHRyZWFzdXJ5IHdhcyByZWR1Y2VkLCBidXQgd2hpY2ggdGhlCiAgICAgICBjb25zdWxzIGRpZCBub3Qgc2VsbCBvbiBhY2NvdW50IG9mIHRoZSB1bnBvcHVsYXJpdHkgd2hpY2ggd291bGQgaGF2ZSBhdHRlbmRlZCBzdWNoIGEgbWVhc3VyZS4KICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.14.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz4gSG93ZXZlciwgcGVyaGFwcyBpdCBpcyBvd2luZyB0byBzaGFtZSB0aGF0IHRoZXJlIGlzIG5vCiAgICAgICBtZW50aW9uIG9mIGFsbCB0aGVzZSB0aGluZ3MgaW4gdGhlIGxhdy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGF0IGlzIG11Y2ggbW9yZSB0byBiZSBndWFyZGVkIGFnYWluc3QsIHdoYXQgaXMgYSBtdWNoIG1vcmUgcmVhbCBvYmplY3Qgb2YgZmVhciwgaXMsIHRoYXQKICAgICAgIGdyZWF0IHBvd2VyIGlzIHBlcm1pdHRlZCB0byB0aGUgYm9sZG5lc3Mgb2YgdGhlc2UgZGVjZW12aXJzIG9mIHRhbXBlcmluZyB3aXRoIHRoZSBwdWJsaWMKICAgICAgIGRvY3VtZW50cywgYW5kIGZvcmdpbmcgZGVjcmVlcyBvZiB0aGUgU2VuYXRlLCB3aGljaCBoYXZlIG5ldmVyIGJlZW4gbWFkZTsgYXMgYSBncmVhdCBtYW55IG9mCiAgICAgICB0aG9zZSBtZW4gd2hvIGhhdmUgYmVlbiBjb25zdWxzIG9mIGxhdGUgeWVhcnMgYXJlIGRlYWQuIFVubGVzcywgcGVyaGFwcywgSSBtYXkgYmUgdG9sZCwgdGhhdAogICAgICAgaXQgaXMgbm90IHJlYXNvbmFibGUgZm9yIHlvdSB0byBlbnRlcnRhaW4gYW55IHN1c3BpY2lvbnMgb2YgdGhlaXIgYXVkYWNpdHksIGZvciB3aG9zZQogICAgICAgY3VwaWRpdHkgdGhlIHdob2xlIHdvcmxkIGFwcGVhcnMgdG9vIG5hcnJvdy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.15.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgbm93IG9uZSBraW5kIG9mIHNhbGUsIHdoaWNoIEkgYW0gYXdhcmUgYXBwZWFycyB2ZXJ5IGltcG9ydGFudCB0byB5b3U7IGJ1dCBwcmF5IGdpdmUKICAgICAgIHlvdXIgYXR0ZW50aW9uIHRvIHdoYXQgZm9sbG93cywgYW5kIHlvdSB3aWxsIHNlZSB0aGF0IHRoaXMgaXMgb25seSBhIGtpbmQgb2Ygc3RlcCBhbmQgcm9hZCB0bwogICAgICAgb3RoZXIgbWVhc3VyZXMuIOKAnFdoYXRldmVyIGxhbmRzLCB3aGF0ZXZlciBwbGFjZXMsIHdoYXRldmVyIGJ1aWxkaW5ncy7igJ0KICAgICAgIFdoYXQgaXMgdGhlcmUgYmVzaWRlcz8gVGhlcmUgaXMgbXVjaCBwcm9wZXJ0eSBpbiBzbGF2ZXMsIGluIGNhdHRsZSwgaW4gYnVsbGlvbiwgaW4gbW9uZXksIGluCiAgICAgICBpdm9yeSwgaW4gcm9iZXMsIGluIGZ1cm5pdHVyZSwgaW4gYWxsIHNvcnRzIG9mIG90aGVyIHRoaW5ncy4gV2hhdCBzaGFsbCB0aGF0IHNheT8gRGlkIGhlCiAgICAgICB0aGluayBpdCB3b3VsZCBjYXVzZSB1bnBvcHVsYXJpdHkgdG8gbmFtZSBhbGwgdGhlc2UgdGhpbmdzPyBIZSB3YXMgbm90IGFmcmFpZCBvZgogICAgICAgdW5wb3B1bGFyaXR5LiBXaGF0IHRoZW4gd2FzIGhpcyBtb3RpdmU/IEhlIHRob3VnaHQgdGhlIGNhdGFsb2d1ZSBhIGxvbmcgb25lLCBhbmQgaGUgd2FzCiAgICAgICBhZnJhaWQgb2YgcGFzc2luZyBvdmVyIGFueXRoaW5nOyBzbyBoZSB3cm90ZSBpbiBhZGRpdGlvbiwg4oCcb3IgYW55dGhpbmcKICAgICAgIGVsc2U74oCdIGJ5IHdoaWNoIGJyaWVmIGZvcm11bGEgeW91IHNlZSB0aGF0IG5vdGhpbmcgY2FuIGJlIG9taXR0ZWQuIFdoYXRldmVyLAogICAgICAgdGhlcmVmb3JlLCB0aGVyZSBpcyBvdXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHRoYXQgaGFzIGJlZW4gbWFkZQogICAgICAgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgYnkgTHVjaXVzIFN1bGxhIGFuZCBRdWludHVzIFBvbXBlaXVzIGluIHRoZWlyIGNvbnN1bHNoaXBzLAogICAgICAgb3IgYWZ0ZXJ3YXJkcywgdGhhdCBoZSBvcmRlcnMgdGhlIGRlY2VtdmlycyB0byBzZWxsLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ5CiAgICAgICB0aGlzIGNsYXVzZSwgSSBzYXksIE8gUm9tYW5zLCB0aGF0IGFsbCBuYXRpb25zLCBhbmQgcGVvcGxlLCBhbmQgcHJvdmluY2VzLCBhbmQga2luZ2RvbXMsIGFyZQogICAgICAgZ2l2ZW4gdXAgYW5kIGhhbmRlZCBvdmVyIHRvIHRoZSBkb21pbmlvbiwgYW5kIGp1ZGdtZW50LCBhbmQgcG93ZXIgb2YgdGhlIGRlY2Vtdmlycy4gVGhpcyBpcwogICAgICAgdGhlIGZpcnN0IHRoaW5nOyBmb3IgSSBhc2sgd2hhdCBwbGFjZSB0aGVyZSBpcyBhbnl3aGVyZSBpbiB0aGUgd29ybGQgd2hpY2ggdGhlIGRlY2VtdmlycyBtYXkKICAgICAgIG5vdCBiZSBhYmxlIHRvIHNheSBoYXMgYmVlbiBtYWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlPyBGb3IsIHdoZW4gdGhlIHNhbWUgcGVyc29uCiAgICAgICB3aG8gaGFzIG1hZGUgdGhlIGFzc2VydGlvbiBpcyBhbHNvIHRvIGp1ZGdlIG9mIHRoZSB0cnV0aCBvZiBpdCwgd2hhdCBpcyB0aGVyZSB3aGljaCBoZSBtYXkKICAgICAgIG5vdCBzYXksIHdoZW4gaGUgaXMgYWxzbyB0aGUgcGVyc29uIHRvIGRlY2lkZSBpbiB0aGUgcXVlc3Rpb24/IEl0IHdpbGwgYmUgdmVyeSBjb252ZW5pZW50IHRvCiAgICAgICBzYXksIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTYxNDAiIGtleT0idGduLDcwMTYxNDAiPlBlcmdhbXVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTbXlybmEiIGtleT0icGVyc2V1cyxTbXlybmEiPlNteXJuYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU5IiBrZXk9InRnbiw3MDAyMzU5Ij5UcmFsbGVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI0OTkiIGtleT0idGduLDcwMDI0OTkiPkVwaGVzdXM8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pbGV0dXMiIGtleT0icGVyc2V1cyxNaWxldHVzIj5NaWxldHVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDeXppY3VzIiBrZXk9InBlcnNldXMsQ3l6aWN1cyI+Q3l6aWN1czwvcGxhY2VOYW1lPiwgYW5kLCBpbiBzaG9ydCwgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggaGFzIGJlZW4gcmVjb3ZlcmVkIHNpbmNlIHRoZSBjb25zdWxzaGlwIG9mIEx1Y2l1cyBTdWxsYSBhbmQgUXVpbnR1cyBQb21wZWl1cywgaGFzCiAgICAgICBiZWNvbWUgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUuIFdpbGwgbGFuZ3VhZ2UgZmFpbCBoaW0gaW4gd2hpY2ggdG8gYXNzZXJ0IHN1Y2ggYQogICAgICAgZG9jdHJpbmU/IG9yLCB3aGVuIHRoZSBzYW1lIHBlcnNvbiBtYWtlcyB0aGUgc3RhdGVtZW50IGFuZCBqdWRnZXMgb2YgdGhlIHRydXRoIG9mIGl0LCB3aWxsIGl0CiAgICAgICBiZSBpbXBvc3NpYmxlIHRvIGluZHVjZSBoaW0gdG8gZ2l2ZSBhIGZhbHNlIGRlY2lzaW9uPyBvciwgaWYgaGUgaXMgdW53aWxsaW5nIHRvIHBhc3Mgc2VudGVuY2UKICAgICAgIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aWxsIGhlIG5vdCBlc3RpbWF0ZSBhdCBoaXMgb3duIHByaWNlIGl0cwogICAgICAgcmVsZWFzZSBmcm9tIHRoZSBkcmVhZCBvZiBjb25kZW1uYXRpb24/IDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgd2lsbCBoZQogICAgICAgc2F54oCUKGFuZCBpdCBpcyBxdWl0ZSBpbXBvc3NpYmxlIGZvciBhbnkgb25lIHRvIGFyZ3VlIGFnYWluc3QgdGhpcywgc2luY2UgaXQgaGFzCiAgICAgICBiZWVuIGFscmVhZHkgc2V0dGxlZCBhbmQgZGVjaWRlZCBieSB5b3UsIGFuZCBzaW5jZSB3ZSBoYXZlIGFscmVhZHkgdm90ZWQgaXQgdG8gYmUgb3VyCiAgICAgICBpbmhlcml0YW5jZSwp4oCUd2hhdCB3aWxsIGhlIHNheSB0byB0aGUga2luZ2RvbSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYwOCIga2V5PSJ0Z24sNzAxNjYwOCI+Qml0aHluaWE8L3BsYWNlTmFtZT4/IHdoaWNoIGhhcyB1bmRvdWJ0ZWRseSBiZWNvbWUgdGhlIHB1YmxpYyBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLgogICAgICAgSXMgdGhlcmUgYW55IHJlYXNvbiB3aHkgdGhlIGRlY2VtdmlycyBzaG91bGQgbm90IHNlbGwgYWxsIHRoZSBsYW5kcywgYW5kIGNpdGllcywgYW5kIG1pbGl0YXJ5CiAgICAgICBzdGF0aW9ucyBhbmQgaGFyYm91cnMsIGFuZCBpbiBzaG9ydCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MDgiIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PwogICAgICAgIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgdGhhdCBoYXMgYmVlbiBtYWRlCiAgICAgICB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSBMdWNpdXMgU3VsbGEgYW5kIFF1aW50dXMgUG9tcGVpdXMgaW4gdGhlaXIgY29uc3Vsc2hpcHMsCiAgICAgICBvciBhZnRlcndhcmRzLCB0aGF0IGhlIG9yZGVycyB0aGUgZGVjZW12aXJzIHRvIHNlbGwuIDwvdHJhbnNsYXRpb24+"
translation['2.15.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnkKICAgICAgIHRoaXMgY2xhdXNlLCBJIHNheSwgTyBSb21hbnMsIHRoYXQgYWxsIG5hdGlvbnMsIGFuZCBwZW9wbGUsIGFuZCBwcm92aW5jZXMsIGFuZCBraW5nZG9tcywgYXJlCiAgICAgICBnaXZlbiB1cCBhbmQgaGFuZGVkIG92ZXIgdG8gdGhlIGRvbWluaW9uLCBhbmQganVkZ21lbnQsIGFuZCBwb3dlciBvZiB0aGUgZGVjZW12aXJzLiBUaGlzIGlzCiAgICAgICB0aGUgZmlyc3QgdGhpbmc7IGZvciBJIGFzayB3aGF0IHBsYWNlIHRoZXJlIGlzIGFueXdoZXJlIGluIHRoZSB3b3JsZCB3aGljaCB0aGUgZGVjZW12aXJzIG1heQogICAgICAgbm90IGJlIGFibGUgdG8gc2F5IGhhcyBiZWVuIG1hZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGU/IEZvciwgd2hlbiB0aGUgc2FtZSBwZXJzb24KICAgICAgIHdobyBoYXMgbWFkZSB0aGUgYXNzZXJ0aW9uIGlzIGFsc28gdG8ganVkZ2Ugb2YgdGhlIHRydXRoIG9mIGl0LCB3aGF0IGlzIHRoZXJlIHdoaWNoIGhlIG1heQogICAgICAgbm90IHNheSwgd2hlbiBoZSBpcyBhbHNvIHRoZSBwZXJzb24gdG8gZGVjaWRlIGluIHRoZSBxdWVzdGlvbj8gSXQgd2lsbCBiZSB2ZXJ5IGNvbnZlbmllbnQgdG8KICAgICAgIHNheSwgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2MTQwIj5QZXJnYW11czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU215cm5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTbXlybmEiPlNteXJuYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTkiPlRyYWxsZXM8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjQ5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNDk5Ij5FcGhlc3VzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNaWxldHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNaWxldHVzIj5NaWxldHVzPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDeXppY3VzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDeXppY3VzIj5DeXppY3VzPC9wbGFjZU5hbWU+LCBhbmQsIGluIHNob3J0LCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwKICAgICAgIHdoaWNoIGhhcyBiZWVuIHJlY292ZXJlZCBzaW5jZSB0aGUgY29uc3Vsc2hpcCBvZiBMdWNpdXMgU3VsbGEgYW5kIFF1aW50dXMgUG9tcGVpdXMsIGhhcwogICAgICAgYmVjb21lIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlLiBXaWxsIGxhbmd1YWdlIGZhaWwgaGltIGluIHdoaWNoIHRvIGFzc2VydCBzdWNoIGEKICAgICAgIGRvY3RyaW5lPyBvciwgd2hlbiB0aGUgc2FtZSBwZXJzb24gbWFrZXMgdGhlIHN0YXRlbWVudCBhbmQganVkZ2VzIG9mIHRoZSB0cnV0aCBvZiBpdCwgd2lsbCBpdAogICAgICAgYmUgaW1wb3NzaWJsZSB0byBpbmR1Y2UgaGltIHRvIGdpdmUgYSBmYWxzZSBkZWNpc2lvbj8gb3IsIGlmIGhlIGlzIHVud2lsbGluZyB0byBwYXNzIHNlbnRlbmNlCiAgICAgICBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aWxsIGhlIG5vdCBlc3RpbWF0ZSBhdCBoaXMgb3duIHByaWNlIGl0cwogICAgICAgcmVsZWFzZSBmcm9tIHRoZSBkcmVhZCBvZiBjb25kZW1uYXRpb24/IDwvdHJhbnNsYXRpb24+"
translation['2.15.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB3aWxsIGhlCiAgICAgICBzYXnigJQoYW5kIGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIGFueSBvbmUgdG8gYXJndWUgYWdhaW5zdCB0aGlzLCBzaW5jZSBpdCBoYXMKICAgICAgIGJlZW4gYWxyZWFkeSBzZXR0bGVkIGFuZCBkZWNpZGVkIGJ5IHlvdSwgYW5kIHNpbmNlIHdlIGhhdmUgYWxyZWFkeSB2b3RlZCBpdCB0byBiZSBvdXIKICAgICAgIGluaGVyaXRhbmNlLCnigJR3aGF0IHdpbGwgaGUgc2F5IHRvIHRoZSBraW5nZG9tIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PyB3aGljaCBoYXMgdW5kb3VidGVkbHkgYmVjb21lIHRoZSBwdWJsaWMgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZS4KICAgICAgIElzIHRoZXJlIGFueSByZWFzb24gd2h5IHRoZSBkZWNlbXZpcnMgc2hvdWxkIG5vdCBzZWxsIGFsbCB0aGUgbGFuZHMsIGFuZCBjaXRpZXMsIGFuZCBtaWxpdGFyeQogICAgICAgc3RhdGlvbnMgYW5kIGhhcmJvdXJzLCBhbmQgaW4gc2hvcnQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+PwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQgd2lsbCB0aGV5IGRvIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzIiPk1pdHlsZW5lPC9wbGFjZU5hbWU+PyB3aGljaCBoYXMKICAgICAgIHVuZG91YnRlZGx5IGJlY29tZSB5b3VycywgTyBSb21hbnMsIGJ5IHRoZSBsYXdzIG9mIHdhciBhbmQgYnkgdGhlIHJpZ2h0cyBvZiB2aWN0b3J5OyBhIGNpdHkKICAgICAgIGJvdGggYnkgbmF0dXJlIGFuZCBzaXR1YXRpb24sIGFuZCBieSB0aGUgZGVzY3JpcHRpb24gb2YgaXRzIGhvdXNlcywgYW5kIGJ5IGl0cyBnZW5lcmFsCiAgICAgICBiZWF1dHksIG1vc3QgZW1pbmVudGx5IHJlbWFya2FibGU7IGFuZCBpdHMgbGFuZHMgYXJlIHBsZWFzYW50IGFuZCBwcm9kdWN0aXZlLiBUaGF0IGNpdHksCiAgICAgICBmb3Jzb290aCwgY29tZXMgdW5kZXIgdGhlIHNhbWUgaGVhZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IHdpbGwgYmVjb21lIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwgYW5kIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4/IEhvdyBtdWNoIGl0IGlzIG91dCBvZiBzaWdodCEgaG93IGNvbXBsZXRlbHkgaXMgaXQKICAgICAgIGhpZGRlbiEgaG93IHN0ZWFsdGhpbHkgaXMgaXQgYWJhbmRvbmVkIGVudGlyZWx5IHRvIHRoZSBkZWNlbXZpcnMhIEZvciB3aG8gaXMgdGhlcmUgYW1vbmcgeW91CiAgICAgICB3aG8gaXMgaWdub3JhbnQgdGhhdCB0aGF0IGtpbmdkb20gaGFzIGJlY29tZSB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSBieSB0aGUgd2lsbCBvZgogICAgICAga2luZyBBbGV4YW5kZXI/IEhlcmUgbm93IEksIHRoZSBjb25zdWwgb2YgdGhlIFJvbWFuIHBlb3BsZSwgbm90IG9ubHkgZ2l2ZSBubyBkZWNpc2lvbiwgYnV0IEkKICAgICAgIGRvIG5vdCBldmVuIGV4cHJlc3MgbXkgb3Bpbmlvbi4gRm9yIGl0IGFwcGVhcnMgdG8gbWUgYSBtb3N0IGltcG9ydGFudCBtYXR0ZXIgbm90IG1lcmVseSB0bwogICAgICAgZGVjaWRlIG9pbCwgYnV0IGV2ZW4gdG8gc3BlYWsgb2YuIEkgc2VlIGEgbWFuIHdobyBhc3N1cmVzIG1lIHRoYXQgdGhlIHdpbGwgd2FzIGNlcnRhaW5seQogICAgICAgbWFkZTsgSSBrbm93IHRoYXQgdGhlcmUgaXMgYSByZXNvbHV0aW9uIG9mIHRoZSBzZW5hdGUgZXh0YW50IHRvIHRoZSBlZmZlY3QgdGhhdCBpdCBhY2NlcHRlZAogICAgICAgdGhlIGluaGVyaXRhbmNlOyB3aGljaCB3YXMgcGFzc2VkIHdoZW4sIGFmdGVyIHRoZSBkZWF0aCBvZiBBbGV4YW5kZXIsIHdlIHNlbnQgYW1iYXNzYWRvcnMgdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjg2MiIga2V5PSJ0Z24sNzAwMjg2MiI+VHlyZTwvcGxhY2VOYW1lPiwgdG8gcmVjb3ZlciBmb3IgdGhlIHBlb3BsZSBtb25leSB3aGljaCBoYWQKICAgICAgIGJlZW4gZGVwb3NpdGVkIHRoZXJlIGJ5IGhpbS4gPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSByZWNvbGxlY3QgdGhhdCBMdWNpdXMKICAgICAgIFBoaWxpcHB1cyBoYXMgb2Z0ZW4gc3RhdGVkIHRoZXNlIHRoaW5ncyBwb3NpdGl2ZWx5IGluIHRoZSBzZW5hdGUuIEkgc2VlIHRoYXQgaXMgYWdyZWVkIHVwb24KICAgICAgIGJ5IGFsbCBtZW4sIHRoYXQgaGUsIHdobyBpcyBhdCB0aGlzIHByZXNlbnQgbW9tZW50IGluIHBvc3Nlc3Npb24gb2YgdGhlIGtpbmdkb20sIGlzIG5laXRoZXIKICAgICAgIG9mIHRoZSByb3lhbCBmYW1pbHkgbm9yIG9mIGFueSByb3lhbCBkaXNwb3NpdGlvbi4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjcyIj5NaXR5bGVuZTwvcGxhY2VOYW1lPj8gd2hpY2ggaGFzCiAgICAgICB1bmRvdWJ0ZWRseSBiZWNvbWUgeW91cnMsIE8gUm9tYW5zLCBieSB0aGUgbGF3cyBvZiB3YXIgYW5kIGJ5IHRoZSByaWdodHMgb2YgdmljdG9yeTsgYSBjaXR5CiAgICAgICBib3RoIGJ5IG5hdHVyZSBhbmQgc2l0dWF0aW9uLCBhbmQgYnkgdGhlIGRlc2NyaXB0aW9uIG9mIGl0cyBob3VzZXMsIGFuZCBieSBpdHMgZ2VuZXJhbAogICAgICAgYmVhdXR5LCBtb3N0IGVtaW5lbnRseSByZW1hcmthYmxlOyBhbmQgaXRzIGxhbmRzIGFyZSBwbGVhc2FudCBhbmQgcHJvZHVjdGl2ZS4gVGhhdCBjaXR5LAogICAgICAgZm9yc29vdGgsIGNvbWVzIHVuZGVyIHRoZSBzYW1lIGhlYWQuIDwvdHJhbnNsYXRpb24+"
translation['2.16.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCB3aWxsIGJlY29tZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQWxleGFuZHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQWxleGFuZHJpYSI+QWxleGFuZHJpYTwvcGxhY2VOYW1lPiwgYW5kIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPj8gSG93IG11Y2ggaXQgaXMgb3V0IG9mIHNpZ2h0ISBob3cgY29tcGxldGVseSBpcyBpdAogICAgICAgaGlkZGVuISBob3cgc3RlYWx0aGlseSBpcyBpdCBhYmFuZG9uZWQgZW50aXJlbHkgdG8gdGhlIGRlY2VtdmlycyEgRm9yIHdobyBpcyB0aGVyZSBhbW9uZyB5b3UKICAgICAgIHdobyBpcyBpZ25vcmFudCB0aGF0IHRoYXQga2luZ2RvbSBoYXMgYmVjb21lIHRoZSBwcm9wZXJ0eSBvZiB0aGUgUm9tYW4gcGVvcGxlIGJ5IHRoZSB3aWxsIG9mCiAgICAgICBraW5nIEFsZXhhbmRlcj8gSGVyZSBub3cgSSwgdGhlIGNvbnN1bCBvZiB0aGUgUm9tYW4gcGVvcGxlLCBub3Qgb25seSBnaXZlIG5vIGRlY2lzaW9uLCBidXQgSQogICAgICAgZG8gbm90IGV2ZW4gZXhwcmVzcyBteSBvcGluaW9uLiBGb3IgaXQgYXBwZWFycyB0byBtZSBhIG1vc3QgaW1wb3J0YW50IG1hdHRlciBub3QgbWVyZWx5IHRvCiAgICAgICBkZWNpZGUgb2lsLCBidXQgZXZlbiB0byBzcGVhayBvZi4gSSBzZWUgYSBtYW4gd2hvIGFzc3VyZXMgbWUgdGhhdCB0aGUgd2lsbCB3YXMgY2VydGFpbmx5CiAgICAgICBtYWRlOyBJIGtub3cgdGhhdCB0aGVyZSBpcyBhIHJlc29sdXRpb24gb2YgdGhlIHNlbmF0ZSBleHRhbnQgdG8gdGhlIGVmZmVjdCB0aGF0IGl0IGFjY2VwdGVkCiAgICAgICB0aGUgaW5oZXJpdGFuY2U7IHdoaWNoIHdhcyBwYXNzZWQgd2hlbiwgYWZ0ZXIgdGhlIGRlYXRoIG9mIEFsZXhhbmRlciwgd2Ugc2VudCBhbWJhc3NhZG9ycyB0bwogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyODYyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI4NjIiPlR5cmU8L3BsYWNlTmFtZT4sIHRvIHJlY292ZXIgZm9yIHRoZSBwZW9wbGUgbW9uZXkgd2hpY2ggaGFkCiAgICAgICBiZWVuIGRlcG9zaXRlZCB0aGVyZSBieSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['2.16.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSByZWNvbGxlY3QgdGhhdCBMdWNpdXMKICAgICAgIFBoaWxpcHB1cyBoYXMgb2Z0ZW4gc3RhdGVkIHRoZXNlIHRoaW5ncyBwb3NpdGl2ZWx5IGluIHRoZSBzZW5hdGUuIEkgc2VlIHRoYXQgaXMgYWdyZWVkIHVwb24KICAgICAgIGJ5IGFsbCBtZW4sIHRoYXQgaGUsIHdobyBpcyBhdCB0aGlzIHByZXNlbnQgbW9tZW50IGluIHBvc3Nlc3Npb24gb2YgdGhlIGtpbmdkb20sIGlzIG5laXRoZXIKICAgICAgIG9mIHRoZSByb3lhbCBmYW1pbHkgbm9yIG9mIGFueSByb3lhbCBkaXNwb3NpdGlvbi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JdCBpcyBzYWlkLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGhhdCB0aGVyZSBpcyBubyB3aWxsOyB0aGF0IHRoZSBSb21hbiBwZW9wbGUgb3VnaHQgbm90IHRvCiAgICAgICBzZWVtIHRvIGNvdmV0IGV2ZXJ5IGtpbmdkb20gdW5kZXIgdGhlIHN1bjsgdGhhdCBvdXIgY2l0aXplbnMgd2lsbCBlbWlncmF0ZSB0byB0aG9zZSByZWdpb25zLAogICAgICAgb24gYWNjb3VudCBvZiB0aGUgZmVydGlsaXR5IG9mIHRoZSBzb2lsIGFuZCB0aGUgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmcgd2hpY2ggZXhpc3RzIHRoZXJlLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gV2lsbCBQdWJsaXVzIFJ1bGx1cywgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZGVjZW12aXJzLCBoaXMKICAgICAgIGNvbGxlYWd1ZXMsIGRlY2lkZSB1cG9uIHNvIGltcG9ydGFudCBhbiBhZmZhaXIgYXMgdGhpcz8gQW5kIHdoaWNoIHdheSB3aWxsIGhlIGRlY2lkZT8gRm9yCiAgICAgICBlYWNoIGFsdGVybmF0aXZlIGlzIHNvIGltcG9ydGFudCB0aGF0IGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIHlvdSB0byBlbnRydXN0IHRoZSBkZWNpc2lvbgogICAgICAgdG8gaGltLCBvciB0byBwdXQgdXAgd2l0aCBoaXMgc2VudGVuY2UuIFdpbGwgaGUgZGVzaXJlIHRvIGJlIHBvcHVsYXI/IEhlIHdpbGwgYWRqdWRnZSB0aGUKICAgICAgIGtpbmdkb20gdG8gdGhlIFJvbWFuIHBlb3BsZS4gSW4gY29uc2VxdWVuY2UsIGhlIHdpbGwgYWxzbywgaW4gYWNjb3JkYW5jZSB3aXRoIGhpcyBvd24gbGF3LAogICAgICAgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+LCBhbmQgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uIEhlIHdpbGwgYmUgZm91bmQgdG8gYmUgdGhlIGp1ZGdlLCB0aGUgYXJiaXRlciwgdGhlCiAgICAgICBtYXN0ZXIsIG9mIGEgbW9zdCB3ZWFsdGh5IGNpdHksIGFuZCBvZiBhIG1vc3QgYmVhdXRpZnVsIGNvdW50cnk7IHllcywgaGUgd2lsbCBiZSBmb3VuZCB0byBiZQogICAgICAgdGhlIGtpbmcgb2YgYSBtb3N0IG9wdWxlbnQga2luZ2RvbS4gV2lsbCBoZSBhYnN0YWluIGZyb20gdGFraW5nIGFsbCB0aGlzPyBmcm9tIGRlc2lyaW5nIGFsbAogICAgICAgdGhpcz8gSGUgd2lsbCBkZWNpZGUgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+IGJlbG9uZ3MKICAgICAgIHRvIHRoZSBraW5nOyBoZSB3aWxsIGJ5IGhpcyBzZW50ZW5jZSBkZXByaXZlIHRoZSBSb21hbiBwZW9wbGUgb2YgaXQuIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.16.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz4gV2lsbCBQdWJsaXVzIFJ1bGx1cywgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZGVjZW12aXJzLCBoaXMKICAgICAgIGNvbGxlYWd1ZXMsIGRlY2lkZSB1cG9uIHNvIGltcG9ydGFudCBhbiBhZmZhaXIgYXMgdGhpcz8gQW5kIHdoaWNoIHdheSB3aWxsIGhlIGRlY2lkZT8gRm9yCiAgICAgICBlYWNoIGFsdGVybmF0aXZlIGlzIHNvIGltcG9ydGFudCB0aGF0IGl0IGlzIHF1aXRlIGltcG9zc2libGUgZm9yIHlvdSB0byBlbnRydXN0IHRoZSBkZWNpc2lvbgogICAgICAgdG8gaGltLCBvciB0byBwdXQgdXAgd2l0aCBoaXMgc2VudGVuY2UuIFdpbGwgaGUgZGVzaXJlIHRvIGJlIHBvcHVsYXI/IEhlIHdpbGwgYWRqdWRnZSB0aGUKICAgICAgIGtpbmdkb20gdG8gdGhlIFJvbWFuIHBlb3BsZS4gSW4gY29uc2VxdWVuY2UsIGhlIHdpbGwgYWxzbywgaW4gYWNjb3JkYW5jZSB3aXRoIGhpcyBvd24gbGF3LAogICAgICAgc2VsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsZXhhbmRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsZXhhbmRyaWEiPkFsZXhhbmRyaWE8L3BsYWNlTmFtZT4sIGFuZCBzZWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+LiBIZSB3aWxsIGJlIGZvdW5kIHRvIGJlIHRoZSBqdWRnZSwgdGhlIGFyYml0ZXIsIHRoZQogICAgICAgbWFzdGVyLCBvZiBhIG1vc3Qgd2VhbHRoeSBjaXR5LCBhbmQgb2YgYSBtb3N0IGJlYXV0aWZ1bCBjb3VudHJ5OyB5ZXMsIGhlIHdpbGwgYmUgZm91bmQgdG8gYmUKICAgICAgIHRoZSBraW5nIG9mIGEgbW9zdCBvcHVsZW50IGtpbmdkb20uIFdpbGwgaGUgYWJzdGFpbiBmcm9tIHRha2luZyBhbGwgdGhpcz8gZnJvbSBkZXNpcmluZyBhbGwKICAgICAgIHRoaXM/IEhlIHdpbGwgZGVjaWRlIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGV4YW5kcmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbGV4YW5kcmlhIj5BbGV4YW5kcmlhPC9wbGFjZU5hbWU+IGJlbG9uZ3MKICAgICAgIHRvIHRoZSBraW5nOyBoZSB3aWxsIGJ5IGhpcyBzZW50ZW5jZSBkZXByaXZlIHRoZSBSb21hbiBwZW9wbGUgb2YgaXQuIDwvdHJhbnNsYXRpb24+"
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.17.44'] = ""
translation['2.17.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz4gSnVzdCByZXZvbHZlIHRoZXNlIHRoaW5ncyBpbiB5b3VyCiAgICAgICBtaW5kcy4gLiAuIC4gLiBGb3JlaWduIG5hdGlvbnMgY2FuIHNjYXJjZWx5IGVuZHVyZSBvdXIgbGlldXRlbmFudHMsIHRob3VnaCB0aGV5IGFyZSBtZW4gb2YKICAgICAgIGJ1dCBzbGlnaHQgYXV0aG9yaXR5LCB3aGVuIHRoZXkgZ28gb24gZnJlZSBsaWV1dGVuYW5jaWVzLCBvbiBhY2NvdW50IG9mIHNvbWUgcHJpdmF0ZQogICAgICAgYnVzaW5lc3MuIEZvciB0aGUgbmFtZSBvZiBwb3dlciBpcyBhIGhhcmQgb25lIHRvIGJlYXIsIGFuZCBpcyBkcmVhZGVkIGV2ZW4gaW4gZXZlciBzbwogICAgICAgaW5jb25zaWRlcmFibGUgYSBwZXJzb247IGJlY2F1c2UsIHdoZW4gdGhleSBoYXZlIG9uY2UgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gdGhleSBjb25kdWN0IHRoZWlyIHByb2NlZWRpbmdzIG5vdCBpbiB0aGVpciBvd24gbmFtZSwgYnV0IGluIHlvdXJzLiBXaGF0CiAgICAgICBkbyB5b3Ugc3VwcG9zZSB3aWxsIGhhcHBlbiwgd2hlbiB0aG9zZSBkZWNlbXZpcnMgd2FuZGVyIGFsbCBvdmVyIHRoZSB3b3JsZCB3aXRoIHRoZWlyIHN1cHJlbWUKICAgICAgIHBvd2VyLCBhbmQgdGhlaXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+ZmFjZXM8L2ZvcmVpZ24+LCBhbmQgdGhlaXIgY2hvc2VuIGJhbmQgb2Ygc3VydmV5b3JzPyBXaGF0CiAgICAgICBkbyB5b3Ugc3VwcG9zZSB3aWxsIGJlIHRoZSBmZWVsaW5ncywgd2hhdCB0aGUgYWxhcm0sIHdoYXQgdGhlIGFjdHVhbCBkYW5nZXIgb2YgdGhvc2UgdW5oYXBweQogICAgICAgbmF0aW9ucz8gPC90cmFuc2xhdGlvbj4="
translation['2.17.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgdGhlcmUgYW55IHRlcnJvciBpbiBhYnNvbHV0ZSBwb3dlcj8gdGhleSB3aWxsCiAgICAgICBlbmR1cmUgaXQ74oCUaXMgdGhlcmUgYW55IGV4cGVuc2UgZW50YWlsZWQgYnkgdGhlIGFycml2YWwgb2Ygc3VjaCBtZW4/IHRoZXkgd2lsbCBiZWFyCiAgICAgICBpdDvigJRhcmUgYW55IHByZXNlbnRzIGV4YWN0ZWQgZnJvbSB0aGVtPyB0aGV5IHdpbGwgbm90IHJlZnVzZSB0aGVtLiBCdXQgd2hhdCBhCiAgICAgICBidXNpbmVzcyBpcyB0aGF0LCBPIFJvbWFucywgd2hlbiBhIGRlY2VtdmlyLCB3aG8gZWl0aGVyIGhhcyBjb21lIHRvIHNvbWUgY2l0eSBhZnRlciBiZWluZwogICAgICAgZXhwZWN0ZWQsIGFzIGEgZ3Vlc3QsIG9yIHVuZXhwZWN0ZWRseSwgYXMgYSBtYXN0ZXIsIHByb25vdW5jZXMgdGhhdCB2ZXJ5IHBsYWNlIHRvIHdoaWNoIGhlCiAgICAgICBoYXMgY29tZSwgdGhhdCBpZGVudGljYWwgaG9zcGl0YWJsZSBob3VzZSBpbiB3aGljaCBoZSBpcyByZWNlaXZlZCwgdG8gYmUgdGhlIHB1YmxpYyBwcm9wZXJ0eQogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZT8gSG93IGdyZWF0IHdpbGwgYmUgdGhlIG1pc2VyeSBvZiB0aGUgcGVvcGxlIGlmIGhlIHNheXMgdGhhdCBpdCBpcyBzbyEgSG93CiAgICAgICBncmVhdCB3aWxsIGJlIGhpcyBvd24gcHJpdmF0ZSBnYWluLCBpZiBoZSBzYXlzIHRoYXQgaXQgaXMgbm90ISBBbmQgdGhlIHNhbWUgbWVuIHdobyBkZXNpcmUKICAgICAgIGFsbCB0aGlzLCBhcmUgYWNjdXN0b21lZCBzb21ldGltZXMgdG8gY29tcGxhaW4gdGhhdCBldmVyeSBsYW5kIGFuZCBldmVyeSBzZWEgaGFzIGJlZW4gcHV0CiAgICAgICB1bmRlciB0aGUgcG93ZXIgb2YgQ25hZXVzIFBvbXBlaXVzLiBCdXQgYXJlIHRoZXNlIHR3byBjYXNlcywgdGhlIG9uZSwgb2YgbWFueSB0aGluZ3MgYmVpbmcKICAgICAgIGVudHJ1c3RlZCB0byBhIG1hbiwgdGhlIG90aGVyLCBvZiBldmVyeXRoaW5nIGJlaW5nIHNhY3JpZmljZWQgdG8gaGltLCBhdCBhbGwgc2ltaWxhcj8gSXMKICAgICAgIHRoZXJlIGFueSByZXNlbWJsYW5jZSBiZXR3ZWVuIGEgbWFuJ3MgYmVpbmcgYXBwb2ludGVkIGFzIGNoaWVmIG1hbmFnZXIgb2YgYSBidXNpbmVzcwogICAgICAgcmVxdWlyaW5nIHRvaWwgYW5kIGxhYm91ciwgYW5kIGEgbWFuJ3MgaGF2aW5nIHRoZSBjaGllZiBzaGFyZSBpbiBib290eSBhbmQgZ2FpbiBhbGxvdHRlZCB0bwogICAgICAgaGltPyBpbiBhIG1hbidzIGJlaW5nIHNlbnQgdG8gZGVsaXZlciBhbGxpZXMsIGFuZCBhIG1hbidzIGJlaW5nIHNlbnQgdG8gb3BwcmVzcyB0aGVtPyBMYXN0bHksCiAgICAgICBpZiB0aGVyZSBiZSBhaXJ5IGV4dHJhb3JkaW5hcnkgaG9ub3VyIGluIHF1ZXN0aW9uLCBkb2VzIGl0IG1ha2Ugbm8gZGlmZmVyZW5jZSB3aGV0aGVyIHRoZQogICAgICAgUm9tYW4gcGVvcGxlIGNvbmZlcnMgdGhhdCBob25vdXIgb24gYW55IG9uZSBpdCBjaG9vc2VzLCBvciB3aGV0aGVyIGhlIGltcHVkZW50bHkgZmlsY2hlcyBpdAogICAgICAgZnJvbSB0aGUgUm9tYW4gcGVvcGxlIGJ5IGFuIHVuZGVyaGFuZCB0cmljayBvZiBsYXc/IDwvdHJhbnNsYXRpb24+"
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.18.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBoYXZlIG5vdyBzZWVuIGhvdyBtYW55IHRoaW5ncyBhbmQgd2hhdCB2YWx1YWJsZSB0aGluZ3MgdGhlIGRlY2VtdmlycyBhcmUgbGlrZWx5IHRvIHNlbGwKICAgICAgIHdpdGggdGhlIHNhbmN0aW9uIG9mIHRoZSBsYXcuIFRoYXQgaXMgbm90IGVub3VnaC4gV2hlbiB0aGV5IGhhdmUgc2F0ZWQgdGhlbXNlbHZlcyB3aXRoIHRoZQogICAgICAgYmxvb2Qgb2YgdGhlIGFsbGllcywgYW5kIG9mIGZvcmVpZ24gbmF0aW9ucywgYW5kIG9mIGtpbmdzLCB0aGV5IHdpbGwgdGhlbiBjdXQgdGhlIHNpbmV3cyBvZgogICAgICAgdGhlIFJvbWFuIHBlb3BsZTsgdGhleSB3aWxsIGxheSBoYW5kcyBvbiB5b3VyIHJldmVudWVzOyB0aGV5IHdpbGwgYnJlYWsgaW50byB5b3VyIHRyZWFzdXJ5LgogICAgICAgRm9yIGEgY2xhdXNlIGZvbGxvd3MsIGluIHdoaWNoIGhlIGlzIG5vdCBjb250ZW50IHdpdGggcGVybWl0dGluZywgaWYgYnkgY2hhbmNlIGFueSBtb25leQogICAgICAgc2hvdWxkIGJlIHdhbnRpbmcsICh3aGljaCwgaG93ZXZlciwgY2FuIGJlIGFtYXNzZWQgaW4gc3VjaCBxdWFudGl0aWVzIGZyb20gdGhlIGVmZmVjdCBvZiB0aGUKICAgICAgIHByZXZpb3VzIGNsYXVzZXMsIHRoYXQgaXQgb3VnaHQgbm90IHRvIGJlIHdhbnRpbmcsKSBidXQgd2hpY2ggYWN0dWFsbHkgKGFzIGlmIHRoYXQgd2FzIGxpa2VseQogICAgICAgdG8gYmUgdGhlIHNhbHZhdGlvbiBvZiB5b3UgYWxsKSBvcmRlcnMgYW5kIGNvbXBlbHMgdGhlIGRlY2VtdmlycyB0byBzZWxsIGFsbCB5b3VyIHJldmVudWVzLAogICAgICAgbmFtaW5nIGVhY2ggaXRlbSBzZXBhcmF0ZWx5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDgiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBkbyB5b3Ugbm93IHJlYWQgdG8gbWUgaW4KICAgICAgIHJlZ3VsYXIgb3JkZXIsIHRoZSBjYXRhbG9ndWUgb2YgdGhlIHByb3BlcnR5IG9mIHRoZSBSb21hbiBwZW9wbGUgd2hpY2ggaXMgZm9yIHNhbGUgYWNjb3JkaW5nCiAgICAgICB0byB0aGUgd3JpdHRlbiBwcm92aXNpb25zIG9mIHRoaXMgbGF3LiBBIGNhdGFsb2d1ZSB3aGljaCBJIHRoaW5rLCBpbiB0cnV0aCwgd2lsbCBiZSBtaXNlcmFibGUKICAgICAgIGFuZCBncmlldm91cyB0byB0aGUgdmVyeSBjcmllciBoaW1zZWxmLiBIZSBpcyBhcyBwcm9kaWdhbCBhIHNwZW5kdGhyaWZ0IHdpdGggcmVnYXJkIHRvIHRoZQogICAgICAgcHJvcGVydHkgb2YgdGhlIHJlcHVibGljLCBhcyBhIHByaXZhdGUgaW5kaXZpZHVhbCBpcyB3aXRoIHJlZ2FyZCB0byBoaXMgb3duIGVzdGF0ZSwgd2hvIHNlbGxzCiAgICAgICBoaXMgd29vZHMsIGJlZm9yZSBoZSBzZWxscyBoaXMgdmluZXlhcmRzLiBZb3UgaGFyZSBnb25lIGFsbCB0aHJvdWdoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgbm93IGdvIG9uIGludG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPi4gVGhlcmUgaXMgbm90aGluZyBpbiB0aGF0IHByb3ZpbmNlIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGhhdmUgbGVmdCB0byB5b3UKICAgICAgIGFzIHlvdXIgb3duIHByb3BlcnR5LCBlaXRoZXIgaW4gdGhlIHRvd25zLCBvciBpbiB0aGUgZmllbGRzLCB3aGljaCBoZSBkb2VzIG5vdCBvcmRlciB0byBiZQogICAgICAgc29sZC4gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgcHJvcGVydHksIHdoaWNoLCBoYXZpbmcgYmVlbiBnYWluZWQgYnkKICAgICAgIHRoZWlyIHJlY2VudCB2aWN0b3J5LCB5b3VyIGFuY2VzdG9ycyBsZWZ0IHRvIHlvdSBpbiB0aGUgY2l0aWVzIGFuZCB0ZXJyaXRvcmllcyBvZiB0aGUgYWxsaWVzLAogICAgICAgYXMgYm90aCBhIGJvbmQgb2YgcGVhY2UgYW5kIGEgbW9udW1lbnQgb2Ygd2FyLCB3aWxsIHlvdSBub3csIHRob3VnaCB5b3UgcmVjZWl2ZWQgaXQgZnJvbQogICAgICAgdGhlbSwgc2VsbCBpdCBhdCB0aGlzIG1hbidzIGluc3RpZ2F0aW9uPyBIZXJlIGZvciBhIG1vbWVudCBJIHNlZW0sIE8gUm9tYW5zLCB0byBtb3ZlIHlvdXIKICAgICAgIGZlZWxpbmdzLCB3aGlsZSBJIG1ha2UgcGxhaW4gdG8geW91IHRoZSBwbG90cyB3aGVuIHRoZXkgdGhpbmsgaGF2ZSBlc2NhcGVkIGV2ZXJ5IG9uZSdzCiAgICAgICBub3RpY2UsIGFzIGhhdmluZyBiZWVuIGxhaWQgYnkgdGhlbSBhZ2FpbnN0IHRoZSBkaWduaXR5IG9mIENuYWV1cyBQb21wZWl1cy4gQW5kLCBJIGJlc2VlY2gKICAgICAgIHlvdSwgcGFyZG9uIG1lIGlmIEkgYW0gZm9yY2VkIHRvIG1ha2UgZnJlcXVlbnQgbWVudGlvbiBvZiB0aGF0IG1hbidzIG5hbWUuIFlvdSwgTyBSb21hbnMsCiAgICAgICBpbXBvc2VkIHRoaXMgY2hhcmFjdGVyIG9uIG1lLCB0d28geWVhcnMgYWdvLCBpbiB0aGlzIHZlcnkgc2FtZSBwbGFjZSwgYW5kIGJvdW5kIG1lIHRvIHNoYXJlCiAgICAgICB3aXRoIHlvdSBpbiB0aGUgcHJvdGVjdGlvbiBvZiBoaXMgZGlnbml0eSBkdXJpbmcgaGlzIGFic2VuY2UsIGluIHdoYXRldmVyIG1hbm5lciBJIGNvdWxkLiBJCiAgICAgICBoYXZlIGhpdGhlcnRvIGRvbmUgYWxsIHRoYXQgSSBjb3VsZCwgbm90IGJlY2F1c2UgSSB3YXMgcGVyc3VhZGVkIHRvIGl0IGJ5IG15IGludGltYWN5IHdpdGgKICAgICAgIGhpbSwgbm9yIGZyb20gYW55IGhvcGUgb2YgaG9ub3VyOyBvciBvZiBhbnkgbW9zdCBob25vdXJhYmxlIGRpZ25pdHk7IHdoaWNoIEkgaGF2ZSBnYWluZWQgYnkKICAgICAgIHlvdXIgbWVhbnMsIGluIGhpcyBhYnNlbmNlLCB0aG91Z2ggbm8gZG91YnQgd2l0aCBoaXMgcGVyZmVjdCBnb29kd2lsbC4gPG1pbGVzdG9uZSBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCB3aGVuIEkgcGVyY2VpdmUgdGhhdCBuZWFybHkgdGhlIHdob2xlIG9mIHRoaXMgbGF3IGlzIG1hZGUgcmVhZHksCiAgICAgICBhcyBpZiBpdCB3ZXJlIGFuIGVuZ2luZSwgZm9yIHRoZSBvYmplY3Qgb2Ygb3ZlcnRocm93aW5nIGhpcyBwb3dlciwgSSB3aWxsIGJvdGggcmVzaXN0IHRoZQogICAgICAgZGVzaWducyBvZiB0aGUgbWVuIHdobyBoYXZlIGNvbnRyaXZlZCBpdCwgYW5kIEkgd2lsbCBlbmFibGUgeW91IG5vdCBvbmx5IHRvIHBlcmNlaXZlLCBidXQgdG8KICAgICAgIGJlIGVudGlyZSBtYXN0ZXJzIG9mIHRoZSB3aG9sZSBwbG90IHdoaWNoIEkgbm93IHNlZSBpbiBwcmVwYXJhdGlvbi4gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.18.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGRvIHlvdSBub3cgcmVhZCB0byBtZSBpbgogICAgICAgcmVndWxhciBvcmRlciwgdGhlIGNhdGFsb2d1ZSBvZiB0aGUgcHJvcGVydHkgb2YgdGhlIFJvbWFuIHBlb3BsZSB3aGljaCBpcyBmb3Igc2FsZSBhY2NvcmRpbmcKICAgICAgIHRvIHRoZSB3cml0dGVuIHByb3Zpc2lvbnMgb2YgdGhpcyBsYXcuIEEgY2F0YWxvZ3VlIHdoaWNoIEkgdGhpbmssIGluIHRydXRoLCB3aWxsIGJlIG1pc2VyYWJsZQogICAgICAgYW5kIGdyaWV2b3VzIHRvIHRoZSB2ZXJ5IGNyaWVyIGhpbXNlbGYuIEhlIGlzIGFzIHByb2RpZ2FsIGEgc3BlbmR0aHJpZnQgd2l0aCByZWdhcmQgdG8gdGhlCiAgICAgICBwcm9wZXJ0eSBvZiB0aGUgcmVwdWJsaWMsIGFzIGEgcHJpdmF0ZSBpbmRpdmlkdWFsIGlzIHdpdGggcmVnYXJkIHRvIGhpcyBvd24gZXN0YXRlLCB3aG8gc2VsbHMKICAgICAgIGhpcyB3b29kcywgYmVmb3JlIGhlIHNlbGxzIGhpcyB2aW5leWFyZHMuIFlvdSBoYXJlIGdvbmUgYWxsIHRocm91Z2ggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIG5vdyBnbyBvbiBpbnRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPi4gVGhlcmUgaXMgbm90aGluZyBpbiB0aGF0IHByb3ZpbmNlIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGhhdmUgbGVmdCB0byB5b3UKICAgICAgIGFzIHlvdXIgb3duIHByb3BlcnR5LCBlaXRoZXIgaW4gdGhlIHRvd25zLCBvciBpbiB0aGUgZmllbGRzLCB3aGljaCBoZSBkb2VzIG5vdCBvcmRlciB0byBiZQogICAgICAgc29sZC4gPC90cmFuc2xhdGlvbj4="
translation['2.18.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoYXQgcHJvcGVydHksIHdoaWNoLCBoYXZpbmcgYmVlbiBnYWluZWQgYnkKICAgICAgIHRoZWlyIHJlY2VudCB2aWN0b3J5LCB5b3VyIGFuY2VzdG9ycyBsZWZ0IHRvIHlvdSBpbiB0aGUgY2l0aWVzIGFuZCB0ZXJyaXRvcmllcyBvZiB0aGUgYWxsaWVzLAogICAgICAgYXMgYm90aCBhIGJvbmQgb2YgcGVhY2UgYW5kIGEgbW9udW1lbnQgb2Ygd2FyLCB3aWxsIHlvdSBub3csIHRob3VnaCB5b3UgcmVjZWl2ZWQgaXQgZnJvbQogICAgICAgdGhlbSwgc2VsbCBpdCBhdCB0aGlzIG1hbidzIGluc3RpZ2F0aW9uPyBIZXJlIGZvciBhIG1vbWVudCBJIHNlZW0sIE8gUm9tYW5zLCB0byBtb3ZlIHlvdXIKICAgICAgIGZlZWxpbmdzLCB3aGlsZSBJIG1ha2UgcGxhaW4gdG8geW91IHRoZSBwbG90cyB3aGVuIHRoZXkgdGhpbmsgaGF2ZSBlc2NhcGVkIGV2ZXJ5IG9uZSdzCiAgICAgICBub3RpY2UsIGFzIGhhdmluZyBiZWVuIGxhaWQgYnkgdGhlbSBhZ2FpbnN0IHRoZSBkaWduaXR5IG9mIENuYWV1cyBQb21wZWl1cy4gQW5kLCBJIGJlc2VlY2gKICAgICAgIHlvdSwgcGFyZG9uIG1lIGlmIEkgYW0gZm9yY2VkIHRvIG1ha2UgZnJlcXVlbnQgbWVudGlvbiBvZiB0aGF0IG1hbidzIG5hbWUuIFlvdSwgTyBSb21hbnMsCiAgICAgICBpbXBvc2VkIHRoaXMgY2hhcmFjdGVyIG9uIG1lLCB0d28geWVhcnMgYWdvLCBpbiB0aGlzIHZlcnkgc2FtZSBwbGFjZSwgYW5kIGJvdW5kIG1lIHRvIHNoYXJlCiAgICAgICB3aXRoIHlvdSBpbiB0aGUgcHJvdGVjdGlvbiBvZiBoaXMgZGlnbml0eSBkdXJpbmcgaGlzIGFic2VuY2UsIGluIHdoYXRldmVyIG1hbm5lciBJIGNvdWxkLiBJCiAgICAgICBoYXZlIGhpdGhlcnRvIGRvbmUgYWxsIHRoYXQgSSBjb3VsZCwgbm90IGJlY2F1c2UgSSB3YXMgcGVyc3VhZGVkIHRvIGl0IGJ5IG15IGludGltYWN5IHdpdGgKICAgICAgIGhpbSwgbm9yIGZyb20gYW55IGhvcGUgb2YgaG9ub3VyOyBvciBvZiBhbnkgbW9zdCBob25vdXJhYmxlIGRpZ25pdHk7IHdoaWNoIEkgaGF2ZSBnYWluZWQgYnkKICAgICAgIHlvdXIgbWVhbnMsIGluIGhpcyBhYnNlbmNlLCB0aG91Z2ggbm8gZG91YnQgd2l0aCBoaXMgcGVyZmVjdCBnb29kd2lsbC4gPC90cmFuc2xhdGlvbj4="
translation['2.18.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCB3aGVuIEkgcGVyY2VpdmUgdGhhdCBuZWFybHkgdGhlIHdob2xlIG9mIHRoaXMgbGF3IGlzIG1hZGUgcmVhZHksCiAgICAgICBhcyBpZiBpdCB3ZXJlIGFuIGVuZ2luZSwgZm9yIHRoZSBvYmplY3Qgb2Ygb3ZlcnRocm93aW5nIGhpcyBwb3dlciwgSSB3aWxsIGJvdGggcmVzaXN0IHRoZQogICAgICAgZGVzaWducyBvZiB0aGUgbWVuIHdobyBoYXZlIGNvbnRyaXZlZCBpdCwgYW5kIEkgd2lsbCBlbmFibGUgeW91IG5vdCBvbmx5IHRvIHBlcmNlaXZlLCBidXQgdG8KICAgICAgIGJlIGVudGlyZSBtYXN0ZXJzIG9mIHRoZSB3aG9sZSBwbG90IHdoaWNoIEkgbm93IHNlZSBpbiBwcmVwYXJhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIG9yZGVycyBldmVyeXRoaW5nIHRvIGJlIHNvbGQgd2hpY2ggYmVsb25nZWQgdG8gdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+LCBhbmQgb2YgUGhhc2VsdXMsIGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGxhbmQgb2YgQWdlcmEsIG9mIE9yaW5kaWEsIGFuZCBvZiBHZWR1c2EuIEFsbCB0aGlzIGJlY2FtZSB5b3VyCiAgICAgICBwcm9wZXJ0eSBvd2luZyB0byB0aGUgY2FtcGFpZ25zIGFuZCB2aWN0b3J5IG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBtYW4sIFB1YmxpdXMgU2VydmlsaXVzLgogICAgICAgSGUgYWRkcyB0aGUgcm95YWwgZG9tYWluIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdAogICAgICAgcHJlc2VudCBmYXJtZWQgYnkgdGhlIHB1YmxpYyBjb250cmFjdG9yczsgYWZ0ZXIgdGhhdCwgaGUgYWRkcyB0aGUgbGFuZHMgYmVsb25naW5nIHRvIEF0dGFsdXMKICAgICAgIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPjsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25nZWQgdG8ga2luZyBQaGlsaXAgb3Iga2luZyBQZXJzZXM7IHdoaWNoCiAgICAgICBhbHNvIHdlcmUgbGV0IG91dCB0byBjb250cmFjdG9ycyBieSB0aGUgY2Vuc29ycywgYW5kIHdoaWNoIGFyZSBhIG1vc3QgY2VydGFpbiByZXZlbnVlLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgYWxzbyBwdXRzIHVwIHRvIGF1Y3Rpb24gdGhlIGxhbmRzIG9mIHRoZSBDb3JpbnRoaWFucywKICAgICAgIHJpY2ggYW5kIGZlcnRpbGUgbGFuZHM7IGFuZCB0aG9zZSBvZiB0aGUgQ3lyZW5hZWFucywgd2hpY2ggZGlkIGJlbG9uZyB0byBBcGlvbjsgYW5kIHRoZSBsYW5kcwogICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGtleT0idGduLDEwMDAwOTUiPlNwYWluPC9wbGFjZU5hbWU+IG5lYXIgQ2FydGhhZ2VuYTsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4gbmVhciB0aGUgb2xkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4gaXRzZWxm4oCUYSBwbGFjZSB3aGljaCBQdWJsaXVzIEFmcmljYW51cyBjb25zZWNyYXRlZCwgbm90IG9uCiAgICAgICBhY2NvdW50IG9mIGFueSByZWxpZ2lvdXMgZmVlbGluZyBmb3IgdGhlIHBsYWNlIGl0c2VsZiBhbmQgZm9yIGl0cyBhbnRpcXVpdHksIGJ1dCBpbgogICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBhZHZpY2Ugb2YgaGlzIGNvdW5zZWxvcnMsIGluIG9yZGVyIHRoYXQgdGhlIHBsYWNlIGl0c2VsZiBtaWdodCBiZWFyCiAgICAgICByZWNvcmQgb2YgdGhlIGRpc2FzdGVycyBvZiB0aGF0IHBlb3BsZSB3aGljaCBoYWQgY29udGVuZGVkIHdpdGggdXMgZm9yIHRoZSBlbXBpcmUgb2YgdGhlCiAgICAgICB3b3JsZC4gQnV0IFNjaXBpbyB3YXMgbm90IGFzIGRpbGlnZW50IGFzIFJ1bGx1cyBpczsgb3IgZWxzZSwgcGVyaGFwcywgaGUgY291bGQgbm90IGZpbmQgYQogICAgICAgcHVyY2hhc2VyIGZvciB0aGF0IHBsYWNlLiBIb3dldmVyLCBhbW9uZyB0aGVzZSByb3lhbCBkaXN0cmljdHMsIHRha2VuIGluIG91ciBhbmNpZW50IHdhcnMgYnkKICAgICAgIHRoZSBjb25zdW1tYXRlIHZhbG91ciBvZiBvdXIgZ2VuZXJhbHMsIGhlIGFkZHMgdGhlIHJveWFsIGxhbmRzIG9mIE1pdGhyaWRhdGVzLCB3aGljaCB3ZXJlIGluCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBhbmQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAzMDE2IiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LCBhbmQgb3JkZXJzCiAgICAgICB0aGUgZGVjZW12aXJzIHRvIHNlbGwgdGhlbS4gPG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28gaW5kZWVkPyB3aGVuIG5vIGxhdwogICAgICAgaGFzIGJlZW4gcGFzc2VkIHRvIHRoYXQgZWZmZWN0LCB3aGVuIHRoZSB3b3JkcyBvZiBvdXIgY29tbWFuZGVyLWluLWNoaWVmIGhhdmUgbm90IHlldCBiZWVuCiAgICAgICBoZWFyZCwgd2hlbiB0aGUgd2FyIGlzIG5vdCB5ZXQgb3Zlciwgd2hlbiBraW5nIE1pdGhyaWRhdGVzLCBoYXZpbmcgbG9zdCBoaXMgYXJteSwgaGF2aW5nIGJlZW4KICAgICAgIGRyaXZlbiBmcm9tIGhpcyBraW5nZG9tLCBpcyBldmVuIG5vdyBwbGFubmluZyBzb21ldGhpbmcgYWdhaW5zdCB1cyBpbiB0aGUgbW9zdCBkaXN0YW50CiAgICAgICBjb3JuZXJzIG9mIHRoZSBlYXJ0aCwgYW5kIHdoaWxlIGhlIGlzIHN0aWxsIGRlZmVuZGVkIGJ5IHRoZSBNYWVvdGlzLCBhbmQgYnkgdGhvc2UgbWFyc2hlcywKICAgICAgIGFuZCBieSB0aGUgbmFycm93IGRlZmlsZXMgdGhyb3VnaCB3aGljaCB0aGUgb25seSBwYXNzZXMgbGllIGluIHRob3NlIGNvdW50cmllcywgYW5kIGJ5IHRoZQogICAgICAgaGVpZ2h0IG9mIHRoZSBtb3VudGFpbnMsIGZyb20gdGhlIGludmluY2libGUgYmFuZCBvZiBDbmFldXMgUG9tcGVpdXM7IHdoZW4gb3VyIGdlbmVyYWwgaXMKICAgICAgIGFjdHVhbGx5IGVuZ2FnZWQgaW4gdGhlIHdhciBhZ2FpbnN0IGhpbTsgYW5kIHdoaWxlIHRoZSBuYW1lIG9mIHdhciBzdGlsbCBsaW5nZXJzIGluIHRob3NlCiAgICAgICBkaXN0cmljdHM7IHNoYWxsIHRoZSBkZWNlbXZpcnMgc2VsbCB0aG9zZSBsYW5kcyBvdmVyIHdoaWNoIHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBjaXZpbAogICAgICAgYXV0aG9yaXR5IG9mIENuYWV1cyBQb21wZWl1cyBzdGlsbCBleHRlbmRzIGFuZCBvdWdodCB0byBleHRlbmQsIGFjY29yZGluZyB0byB0aGUgcHJpbmNpcGxlcwogICAgICAgYW5kIHVzYWdlcyBvZiBvdXIgYW5jZXN0b3JzPyA8bWlsZXN0b25lIG49IjUzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQsIEkgbWFrZSBubyBkb3VidCwgUHVibGl1cwogICAgICAgUnVsbHVzIChmb3IgaGUgbm93IGNvbmR1Y3RzIGhpbXNlbGYgaW4gc3VjaCBhIG1hbm5lciBhcyBzaG93cyB0aGF0IGhlIGFscmVhZHkgZmFuY2llcyBoaW1zZWxmCiAgICAgICBhIGRlY2VtdmlyIGVsZWN0KSB3aWxsIGhhc3RlbiB0byBhdHRlbmQgdGhhdCBhdWN0aW9uIGluIHByZWZlcmVuY2UgdG8gZXZlcnkgb3RoZXIuIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzc4Ij5BdHRhbGlhPC9wbGFjZU5hbWU+LCBhbmQgb2YgUGhhc2VsdXMsIGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDE5Ij5PbHltcHVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGxhbmQgb2YgQWdlcmEsIG9mIE9yaW5kaWEsIGFuZCBvZiBHZWR1c2EuIEFsbCB0aGlzIGJlY2FtZSB5b3VyCiAgICAgICBwcm9wZXJ0eSBvd2luZyB0byB0aGUgY2FtcGFpZ25zIGFuZCB2aWN0b3J5IG9mIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBtYW4sIFB1YmxpdXMgU2VydmlsaXVzLgogICAgICAgSGUgYWRkcyB0aGUgcm95YWwgZG9tYWluIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjA4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MDgiPkJpdGh5bmlhPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdAogICAgICAgcHJlc2VudCBmYXJtZWQgYnkgdGhlIHB1YmxpYyBjb250cmFjdG9yczsgYWZ0ZXIgdGhhdCwgaGUgYWRkcyB0aGUgbGFuZHMgYmVsb25naW5nIHRvIEF0dGFsdXMKICAgICAgIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPjsgYW5kIHRob3NlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25nZWQgdG8ga2luZyBQaGlsaXAgb3Iga2luZyBQZXJzZXM7IHdoaWNoCiAgICAgICBhbHNvIHdlcmUgbGV0IG91dCB0byBjb250cmFjdG9ycyBieSB0aGUgY2Vuc29ycywgYW5kIHdoaWNoIGFyZSBhIG1vc3QgY2VydGFpbiByZXZlbnVlLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.19.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgYWxzbyBwdXRzIHVwIHRvIGF1Y3Rpb24gdGhlIGxhbmRzIG9mIHRoZSBDb3JpbnRoaWFucywKICAgICAgIHJpY2ggYW5kIGZlcnRpbGUgbGFuZHM7IGFuZCB0aG9zZSBvZiB0aGUgQ3lyZW5hZWFucywgd2hpY2ggZGlkIGJlbG9uZyB0byBBcGlvbjsgYW5kIHRoZSBsYW5kcwogICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA5NSI+U3BhaW48L3BsYWNlTmFtZT4gbmVhciBDYXJ0aGFnZW5hOyBhbmQgdGhvc2UgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEyNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTI0MiI+QWZyaWNhPC9wbGFjZU5hbWU+IG5lYXIgdGhlIG9sZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4gaXRzZWxm4oCUYSBwbGFjZSB3aGljaCBQdWJsaXVzIEFmcmljYW51cyBjb25zZWNyYXRlZCwgbm90IG9uCiAgICAgICBhY2NvdW50IG9mIGFueSByZWxpZ2lvdXMgZmVlbGluZyBmb3IgdGhlIHBsYWNlIGl0c2VsZiBhbmQgZm9yIGl0cyBhbnRpcXVpdHksIGJ1dCBpbgogICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBhZHZpY2Ugb2YgaGlzIGNvdW5zZWxvcnMsIGluIG9yZGVyIHRoYXQgdGhlIHBsYWNlIGl0c2VsZiBtaWdodCBiZWFyCiAgICAgICByZWNvcmQgb2YgdGhlIGRpc2FzdGVycyBvZiB0aGF0IHBlb3BsZSB3aGljaCBoYWQgY29udGVuZGVkIHdpdGggdXMgZm9yIHRoZSBlbXBpcmUgb2YgdGhlCiAgICAgICB3b3JsZC4gQnV0IFNjaXBpbyB3YXMgbm90IGFzIGRpbGlnZW50IGFzIFJ1bGx1cyBpczsgb3IgZWxzZSwgcGVyaGFwcywgaGUgY291bGQgbm90IGZpbmQgYQogICAgICAgcHVyY2hhc2VyIGZvciB0aGF0IHBsYWNlLiBIb3dldmVyLCBhbW9uZyB0aGVzZSByb3lhbCBkaXN0cmljdHMsIHRha2VuIGluIG91ciBhbmNpZW50IHdhcnMgYnkKICAgICAgIHRoZSBjb25zdW1tYXRlIHZhbG91ciBvZiBvdXIgZ2VuZXJhbHMsIGhlIGFkZHMgdGhlIHJveWFsIGxhbmRzIG9mIE1pdGhyaWRhdGVzLCB3aGljaCB3ZXJlIGluCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc2MCI+UGFwaGxhZ29uaWE8L3BsYWNlTmFtZT4sIGFuZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4sIGFuZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMzAxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+LCBhbmQgb3JkZXJzCiAgICAgICB0aGUgZGVjZW12aXJzIHRvIHNlbGwgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['2.19.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28gaW5kZWVkPyB3aGVuIG5vIGxhdwogICAgICAgaGFzIGJlZW4gcGFzc2VkIHRvIHRoYXQgZWZmZWN0LCB3aGVuIHRoZSB3b3JkcyBvZiBvdXIgY29tbWFuZGVyLWluLWNoaWVmIGhhdmUgbm90IHlldCBiZWVuCiAgICAgICBoZWFyZCwgd2hlbiB0aGUgd2FyIGlzIG5vdCB5ZXQgb3Zlciwgd2hlbiBraW5nIE1pdGhyaWRhdGVzLCBoYXZpbmcgbG9zdCBoaXMgYXJteSwgaGF2aW5nIGJlZW4KICAgICAgIGRyaXZlbiBmcm9tIGhpcyBraW5nZG9tLCBpcyBldmVuIG5vdyBwbGFubmluZyBzb21ldGhpbmcgYWdhaW5zdCB1cyBpbiB0aGUgbW9zdCBkaXN0YW50CiAgICAgICBjb3JuZXJzIG9mIHRoZSBlYXJ0aCwgYW5kIHdoaWxlIGhlIGlzIHN0aWxsIGRlZmVuZGVkIGJ5IHRoZSBNYWVvdGlzLCBhbmQgYnkgdGhvc2UgbWFyc2hlcywKICAgICAgIGFuZCBieSB0aGUgbmFycm93IGRlZmlsZXMgdGhyb3VnaCB3aGljaCB0aGUgb25seSBwYXNzZXMgbGllIGluIHRob3NlIGNvdW50cmllcywgYW5kIGJ5IHRoZQogICAgICAgaGVpZ2h0IG9mIHRoZSBtb3VudGFpbnMsIGZyb20gdGhlIGludmluY2libGUgYmFuZCBvZiBDbmFldXMgUG9tcGVpdXM7IHdoZW4gb3VyIGdlbmVyYWwgaXMKICAgICAgIGFjdHVhbGx5IGVuZ2FnZWQgaW4gdGhlIHdhciBhZ2FpbnN0IGhpbTsgYW5kIHdoaWxlIHRoZSBuYW1lIG9mIHdhciBzdGlsbCBsaW5nZXJzIGluIHRob3NlCiAgICAgICBkaXN0cmljdHM7IHNoYWxsIHRoZSBkZWNlbXZpcnMgc2VsbCB0aG9zZSBsYW5kcyBvdmVyIHdoaWNoIHRoZSBtaWxpdGFyeSBjb21tYW5kIGFuZCBjaXZpbAogICAgICAgYXV0aG9yaXR5IG9mIENuYWV1cyBQb21wZWl1cyBzdGlsbCBleHRlbmRzIGFuZCBvdWdodCB0byBleHRlbmQsIGFjY29yZGluZyB0byB0aGUgcHJpbmNpcGxlcwogICAgICAgYW5kIHVzYWdlcyBvZiBvdXIgYW5jZXN0b3JzPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.19.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBJIG1ha2Ugbm8gZG91YnQsIFB1YmxpdXMKICAgICAgIFJ1bGx1cyAoZm9yIGhlIG5vdyBjb25kdWN0cyBoaW1zZWxmIGluIHN1Y2ggYSBtYW5uZXIgYXMgc2hvd3MgdGhhdCBoZSBhbHJlYWR5IGZhbmNpZXMgaGltc2VsZgogICAgICAgYSBkZWNlbXZpciBlbGVjdCkgd2lsbCBoYXN0ZW4gdG8gYXR0ZW5kIHRoYXQgYXVjdGlvbiBpbiBwcmVmZXJlbmNlIHRvIGV2ZXJ5IG90aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlLCBmb3Jzb290aCwgYmVmb3JlIGhlIGFycml2ZXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYxOSI+UG9udHVzPC9wbGFjZU5hbWU+LCB3aWxsCiAgICAgICBzZW5kIGxldHRlcnMgdG8gQ25hZXVzIFBvbXBlaXVzLCBvZiB3aGljaCBJIHN1cHBvc2UgYSBjb3B5IGhhcyBhbHJlYWR5IGJlZW4gY29tcG9zZWQgaW4gdGhlc2UKICAgICAgIHRlcm1zOuKAlOKAnFB1YmxpdXMgU2VydmlsaXVzIFJ1bGx1cywgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBkZWNlbXZpciwgdG8KICAgICAgIENuYWV1cyBQb21wZWl1cywgdGhlIHNvbiBvZiBDbmFldXMsIGdyZWV0aW5nLuKAnSBJIGRvIG5vdCBzdXBwb3NlIHRoYXQgaGUgd2lsbCBhZGQKICAgICAgIOKAnE1hZ251czvigJ0gZm9yIGl0IGlzIG5vdCBsaWtlbHkgdGhhdCBoZSB3aWxsIGdyYW50IGhpbSBieSBhIHdvcmQgdGhhdAogICAgICAgZGlnbml0eSB3aGljaCBoZSBpcyBlbmRlYXZvdXJpbmcgdG8gZGltaW5pc2guIOKAnEkgd2lzaCB5b3UgdG8gdGFrZSBjYXJlIHRvIG1lZXQgbWUKICAgICAgIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2lub3BlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTaW5vcGUiPlNpbm9wZTwvcGxhY2VOYW1lPiwgYW5kIHRvIGJyaW5nIG1lIGFzc2lzdGFuY2UsIHdoaWxlIEkgYW0KICAgICAgIHNlbGxpbmcsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiBteSBsYXcsIHRob3NlIGxhbmRzIHdoaWNoIHlvdSBhY3F1aXJlZCBieSB5b3VyCiAgICAgICBsYWJvdXIu4oCdIE9yIHdpbGwgaGUgbm90IGludml0ZSBQb21wZWl1cz8gV2lsbCBoZSBzZWxsIHRoZSBzcG9pbHMgb2YgdGhlIGdlbmVyYWwgaW4KICAgICAgIGhpcyBvd24gcHJvdmluY2U/IEp1c3QgcGxhY2UgYmVmb3JlIHlvdXIgZXllcyBSdWxsdXMsIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgaG9sZGluZyBoaXMgYXVjdGlvbiBiZXR3ZWVuIHlvdXIgY2FtcCBhbmQgdGhhdCBvZiB0aGUgZW5lbXksIGFuZAogICAgICAga25vY2tpbmcgZG93biBsYW5kcyBzdXJyb3VuZGVkIGJ5IGhpcyBiZWF1dGlmdWwgYmFuZCBvZiBzdXJ2ZXlvcnMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGRvZXMgdGhlIGluc3VsdCBjb25zaXN0IHNvbGVseSBpbiB0aGlzLCB0aG91Z2ggdGhpcyBpcyB2ZXJ5CiAgICAgICBwcmVwb3N0ZXJvdXMsIGFuZCB2ZXJ5IHVucHJlY2VkZW50ZWQsIHRoYXQgYW55dGhpbmcgd2hpY2ggaGFzIGJlZW4gYWNxdWlyZWQgaW4gd2FyLCB3aGlsZSB0aGUKICAgICAgIGdlbmVyYWwgaXMgc3RpbGwgY2Fycnlpbmcgb24gdGhlIHdhciwgc2hvdWxkIGJlIHNvbGQsIG9yIGV2ZW4gbGV0LiBCdXQgdGhlc2UgbWVuIGhhdmUKICAgICAgIHNvbWV0aGluZyBtb3JlIGluIHZpZXcgdGhhbiBtZXJlIGluc3VsdC4gVGhleSBob3BlLCBpZiBpdCBpcyBhbGxvd2VkIHRvIHRoZSBlbmVtaWVzIG9mIENuYWV1cwogICAgICAgUG9tcGVpdXMsIG5vdCBvbmx5IHRvIHN0cm9sbCBhYm91dCBvdGhlciBjb3VudHJpZXMsIGJ1dCBldmVuIHRvIGNvbWUgdG8gaGlzIHZlcnkgYXJteSB3aXRoCiAgICAgICBhYnNvbHV0ZSBhdXRob3JpdHksIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGFzIGp1ZGdlcyBpbiBldmVyeSBjYXNlLCB3aXRoIGJvdW5kbGVzcyBwb3dlciwKICAgICAgIGFuZCB3aXRoIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LCB0aGF0IHNvbWUgcGxvdCBtYXkgYmUgbGFpZCBhZ2FpbnN0IGhpbSBoaW1zZWxmOyBhbmQgdGhhdAogICAgICAgc29tZXRoaW5nIG1heSBiZSB0YWtlbiBmcm9tIGhpcyBhcm15LCBvciBwb3dlciwgb3IgcmVub3duLiBUaGV5IHRoaW5rIHRoYXQsIGlmIHRoZSBhcm15CiAgICAgICByZXBvc2VzIGFueSBob3BlIGluIENuYWV1cyBQb21wZWl1cyB3aXRoIHJlc3BlY3QgdG8gZWl0aGVyIGxhbmRzLCBvciBhbnkgb3RoZXIgYWR2YW50YWdlcywgaXQKICAgICAgIHdpbGwgZG8gc28gbm8gbG9uZ2VyIHdoZW4gaXQgc2VlcyB0aGF0IHRoZSBzdXByZW1lIHBvd2VyIGluIGFsbCB0aG9zZSBtYXR0ZXJzIGlzIHRyYW5zZmVycmVkCiAgICAgICB0byB0aGUgZGVjZW12aXJzLiA8bWlsZXN0b25lIG49IjU1IiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIG5vdCBjb25jZXJuZWQgYXQgdGhvc2UgbWVuIGJlaW5nIHNvCiAgICAgICBmb29saXNoLCBhcyB0byBob3BlIGZvciB0aGVzZSB0aGluZ3M7IGFuZCBzbyBpbXB1ZGVudCwgYXMgdG8gYXR0ZW1wdCB0byBjYXVzZSB0aGVtLiBXaGF0IEkgZG8KICAgICAgIGNvbXBsYWluIG9mIGlzLCB0aGF0IEkgYW0gc28gbXVjaCBkZXNwaXNlZCBieSB0aGVtLCB0aGF0IHRoZXkgc2hvdWxkIHNlbGVjdCB0aGUgcGVyaW9kIG9mIG15CiAgICAgICBjb25zdWxzaGlwLCBvZiBhbGwgdGltZXMgaW4gdGhlIHdvcmxkLCBmb3Igc2Vla2luZyB0byBicmluZyBhYm91dCBzdWNoIHByb2RpZ2lvdXMKICAgICAgIGFic3VyZGl0aWVzLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjE5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MTkiPlBvbnR1czwvcGxhY2VOYW1lPiwgd2lsbAogICAgICAgc2VuZCBsZXR0ZXJzIHRvIENuYWV1cyBQb21wZWl1cywgb2Ygd2hpY2ggSSBzdXBwb3NlIGEgY29weSBoYXMgYWxyZWFkeSBiZWVuIGNvbXBvc2VkIGluIHRoZXNlCiAgICAgICB0ZXJtczrigJTigJxQdWJsaXVzIFNlcnZpbGl1cyBSdWxsdXMsIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgZGVjZW12aXIsIHRvCiAgICAgICBDbmFldXMgUG9tcGVpdXMsIHRoZSBzb24gb2YgQ25hZXVzLCBncmVldGluZy7igJ0gSSBkbyBub3Qgc3VwcG9zZSB0aGF0IGhlIHdpbGwgYWRkCiAgICAgICDigJxNYWdudXM74oCdIGZvciBpdCBpcyBub3QgbGlrZWx5IHRoYXQgaGUgd2lsbCBncmFudCBoaW0gYnkgYSB3b3JkIHRoYXQKICAgICAgIGRpZ25pdHkgd2hpY2ggaGUgaXMgZW5kZWF2b3VyaW5nIHRvIGRpbWluaXNoLiDigJxJIHdpc2ggeW91IHRvIHRha2UgY2FyZSB0byBtZWV0IG1lCiAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNpbm9wZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU2lub3BlIj5TaW5vcGU8L3BsYWNlTmFtZT4sIGFuZCB0byBicmluZyBtZSBhc3Npc3RhbmNlLCB3aGlsZSBJIGFtCiAgICAgICBzZWxsaW5nLCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHByb3Zpc2lvbnMgb2YgbXkgbGF3LCB0aG9zZSBsYW5kcyB3aGljaCB5b3UgYWNxdWlyZWQgYnkgeW91cgogICAgICAgbGFib3VyLuKAnSBPciB3aWxsIGhlIG5vdCBpbnZpdGUgUG9tcGVpdXM/IFdpbGwgaGUgc2VsbCB0aGUgc3BvaWxzIG9mIHRoZSBnZW5lcmFsIGluCiAgICAgICBoaXMgb3duIHByb3ZpbmNlPyBKdXN0IHBsYWNlIGJlZm9yZSB5b3VyIGV5ZXMgUnVsbHVzLCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4sIGhvbGRpbmcgaGlzIGF1Y3Rpb24gYmV0d2VlbiB5b3VyIGNhbXAgYW5kIHRoYXQgb2YgdGhlIGVuZW15LCBhbmQKICAgICAgIGtub2NraW5nIGRvd24gbGFuZHMgc3Vycm91bmRlZCBieSBoaXMgYmVhdXRpZnVsIGJhbmQgb2Ygc3VydmV5b3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz4gTm9yIGRvZXMgdGhlIGluc3VsdCBjb25zaXN0IHNvbGVseSBpbiB0aGlzLCB0aG91Z2ggdGhpcyBpcyB2ZXJ5CiAgICAgICBwcmVwb3N0ZXJvdXMsIGFuZCB2ZXJ5IHVucHJlY2VkZW50ZWQsIHRoYXQgYW55dGhpbmcgd2hpY2ggaGFzIGJlZW4gYWNxdWlyZWQgaW4gd2FyLCB3aGlsZSB0aGUKICAgICAgIGdlbmVyYWwgaXMgc3RpbGwgY2Fycnlpbmcgb24gdGhlIHdhciwgc2hvdWxkIGJlIHNvbGQsIG9yIGV2ZW4gbGV0LiBCdXQgdGhlc2UgbWVuIGhhdmUKICAgICAgIHNvbWV0aGluZyBtb3JlIGluIHZpZXcgdGhhbiBtZXJlIGluc3VsdC4gVGhleSBob3BlLCBpZiBpdCBpcyBhbGxvd2VkIHRvIHRoZSBlbmVtaWVzIG9mIENuYWV1cwogICAgICAgUG9tcGVpdXMsIG5vdCBvbmx5IHRvIHN0cm9sbCBhYm91dCBvdGhlciBjb3VudHJpZXMsIGJ1dCBldmVuIHRvIGNvbWUgdG8gaGlzIHZlcnkgYXJteSB3aXRoCiAgICAgICBhYnNvbHV0ZSBhdXRob3JpdHksIHdpdGggYSBwb3dlciBvZiBzaXR0aW5nIGFzIGp1ZGdlcyBpbiBldmVyeSBjYXNlLCB3aXRoIGJvdW5kbGVzcyBwb3dlciwKICAgICAgIGFuZCB3aXRoIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LCB0aGF0IHNvbWUgcGxvdCBtYXkgYmUgbGFpZCBhZ2FpbnN0IGhpbSBoaW1zZWxmOyBhbmQgdGhhdAogICAgICAgc29tZXRoaW5nIG1heSBiZSB0YWtlbiBmcm9tIGhpcyBhcm15LCBvciBwb3dlciwgb3IgcmVub3duLiBUaGV5IHRoaW5rIHRoYXQsIGlmIHRoZSBhcm15CiAgICAgICByZXBvc2VzIGFueSBob3BlIGluIENuYWV1cyBQb21wZWl1cyB3aXRoIHJlc3BlY3QgdG8gZWl0aGVyIGxhbmRzLCBvciBhbnkgb3RoZXIgYWR2YW50YWdlcywgaXQKICAgICAgIHdpbGwgZG8gc28gbm8gbG9uZ2VyIHdoZW4gaXQgc2VlcyB0aGF0IHRoZSBzdXByZW1lIHBvd2VyIGluIGFsbCB0aG9zZSBtYXR0ZXJzIGlzIHRyYW5zZmVycmVkCiAgICAgICB0byB0aGUgZGVjZW12aXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.20.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhbSBub3QgY29uY2VybmVkIGF0IHRob3NlIG1lbiBiZWluZyBzbwogICAgICAgZm9vbGlzaCwgYXMgdG8gaG9wZSBmb3IgdGhlc2UgdGhpbmdzOyBhbmQgc28gaW1wdWRlbnQsIGFzIHRvIGF0dGVtcHQgdG8gY2F1c2UgdGhlbS4gV2hhdCBJIGRvCiAgICAgICBjb21wbGFpbiBvZiBpcywgdGhhdCBJIGFtIHNvIG11Y2ggZGVzcGlzZWQgYnkgdGhlbSwgdGhhdCB0aGV5IHNob3VsZCBzZWxlY3QgdGhlIHBlcmlvZCBvZiBteQogICAgICAgY29uc3Vsc2hpcCwgb2YgYWxsIHRpbWVzIGluIHRoZSB3b3JsZCwgZm9yIHNlZWtpbmcgdG8gYnJpbmcgYWJvdXQgc3VjaCBwcm9kaWdpb3VzCiAgICAgICBhYnN1cmRpdGllcy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgaW4gdGhlIHNhbGUgb2YgYWxsIHRoZXNlIGxhbmRzIGFuZCBob3VzZXMgbGVhdmUgaXMgZ2l2ZW4gdG8gdGhlIGRlY2VtdmlycyDigJx0bwogICAgICAgaG9sZCB0aGVpciBzYWxlcyBpbiB3aGF0ZXZlciBwbGFjZXMgdGhleSB0aGluayBmaXQu4oCdIE9oIHRoZWlyIHBlcnZlcnRlZCBzZW5zZXMhIE9oCiAgICAgICB0aGVpciBsaWNlbnRpb3VzbmVzcywgc28gbmVjZXNzYXJ5IHRvIGJlIGNoZWNrZWQhIE9oIHRoZWlyIHByb2ZsaWdhdGUgYW5kIHdpY2tlZCBpbnRlbnRpb25zIQogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IGlzIG5vdCBsYXdmdWwgdG8gbGV0IHRoZSByZXZlbnVlcyBhbnl3aGVyZSBleGNlcHQgaW4gdGhpcyBjaXR5LCBpbiB0aGlzIHZlcnkgc3BvdCwgaW4KICAgICAgIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGFzc2VtYmx5IGhlcmUgcHJlc2VudC4gU2hhbGwgaXQgYmUgbGF3ZnVsIGZvciB5b3VyIG93biBwcm9wZXJ0eSB0byBiZQogICAgICAgc29sZCBhbmQgYWxpZW5hdGVkIGZyb20geW91IGZvciBldmVyIGluIHRoZSBkYXJrbmVzcyBvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjc2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NzYwIj5QYXBobGFnb25pYTwvcGxhY2VOYW1lPiwgb3IgaW4gdGhlIGRlc2VydHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDMwMTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMzAxNiI+Q2FwcGFkb2NpYTwvcGxhY2VOYW1lPj8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU2IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVuIEx1Y2l1cyBTdWxsYSB3YXMgc2VsbGluZyBhdAogICAgICAgdGhhdCBmYXRhbCBhdWN0aW9uIG9mIGhpcyB0aGUgcHJvcGVydHkgb2YgY2l0aXplbnMgd2hvIGhhZCBub3QgYmVlbiBjb25kZW1uZWQsIGFuZCB3aGVuIGhlCiAgICAgICBzYWlkIHRoYXQgaGUgd2FzIHNlbGxpbmcgaGlzIHBsdW5kZXIsIHN0aWxsIGhlIHNvbGQgaXQgb24gdGhpcyBzcG90IHdoZXJlIEkgYW0gc3RhbmRpbmcgbm93OwogICAgICAgbm9yIGRpZCBoZSB2ZW50dXJlIHRvIGF2b2lkIHRoZSBzaWdodCBvZiB0aG9zZSBtZW4gdG8gd2hvc2UgZXllcyBoZSB3YXMgc28gaGF0ZWZ1bC4gU2hhbGwgdGhlCiAgICAgICBkZWNlbXZpcnMgc2VsbCB5b3VyIHJldmVudWVzLCBub3Qgb25seSB3aGVyZSB5b3UgeW91cnNlbHZlcyBhcmUgbm90IHdpdG5lc3NlcyBvZiB0aGUgc2FsZSwKICAgICAgIGJ1dCB3aGVyZSB0aGVyZSBpcyBub3QgZXZlbiBhIHB1YmxpYyBjcmllciBwcmVzZW50IGFzIGEgc3BlY3RhdG9yPyA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NzYwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY3NjAiPlBhcGhsYWdvbmlhPC9wbGFjZU5hbWU+LCBvciBpbiB0aGUgZGVzZXJ0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMzAxNiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAzMDE2Ij5DYXBwYWRvY2lhPC9wbGFjZU5hbWU+PyA8L3RyYW5zbGF0aW9uPg=="
translation['2.21.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiBMdWNpdXMgU3VsbGEgd2FzIHNlbGxpbmcgYXQKICAgICAgIHRoYXQgZmF0YWwgYXVjdGlvbiBvZiBoaXMgdGhlIHByb3BlcnR5IG9mIGNpdGl6ZW5zIHdobyBoYWQgbm90IGJlZW4gY29uZGVtbmVkLCBhbmQgd2hlbiBoZQogICAgICAgc2FpZCB0aGF0IGhlIHdhcyBzZWxsaW5nIGhpcyBwbHVuZGVyLCBzdGlsbCBoZSBzb2xkIGl0IG9uIHRoaXMgc3BvdCB3aGVyZSBJIGFtIHN0YW5kaW5nIG5vdzsKICAgICAgIG5vciBkaWQgaGUgdmVudHVyZSB0byBhdm9pZCB0aGUgc2lnaHQgb2YgdGhvc2UgbWVuIHRvIHdob3NlIGV5ZXMgaGUgd2FzIHNvIGhhdGVmdWwuIFNoYWxsIHRoZQogICAgICAgZGVjZW12aXJzIHNlbGwgeW91ciByZXZlbnVlcywgbm90IG9ubHkgd2hlcmUgeW91IHlvdXJzZWx2ZXMgYXJlIG5vdCB3aXRuZXNzZXMgb2YgdGhlIHNhbGUsCiAgICAgICBidXQgd2hlcmUgdGhlcmUgaXMgbm90IGV2ZW4gYSBwdWJsaWMgY3JpZXIgcHJlc2VudCBhcyBhIHNwZWN0YXRvcj8gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVuIGZvbGxvd3PigJTigJxBbGwgdGhlIGxhbmRzIG91dCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJ0gd2l0aG91dCBhbnkgbGltaXQgYXMgdG8gdGltZSwgbm90IChhcyB3YXMgZW5hY3RlZCBiZWZvcmUpCiAgICAgICB0aG9zZSBhY3F1aXJlZCBieSBTdWxsYSBhbmQgUG9tcGVpdXMgd2hlbiB0aGV5IHdlcmUgY29uc3Vscy4gVGhlcmUgaXMgYW4gaW5xdWlyeSB0byBiZSBtYWRlCiAgICAgICBieSB0aGUgZGVjZW12aXJzLCB3aGV0aGVyIHRoZSBsYW5kIGJlIHByaXZhdGUgb3IgcHVibGljIHByb3BlcnR5OyBhbmQgYnkgdGhpcyBtZWFucyBhIGhlYXZ5CiAgICAgICB0YXggaXMgbGFpZCBvbiB0aGUgbGF1ZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU3IiB1bml0PSJzZWN0aW9uIiAvPiBXaG8gaXMgdGhlcmUgd2hvIGRvZXMgbm90IHNlZSBob3cKICAgICAgIGdyZWF0IGEganVkaWNpYWwgcG93ZXIgdGhpcyBpcywgaG93IGludG9sZXJhYmxlLCBob3cgdHlyYW5uaWNhbD8gZm9yIHRoZW0gdG8gYmUgYWJsZSwgaW4KICAgICAgIHdoYXRldmVyIHBsYWNlcyB0aGV5IHBsZWFzZSwgd2l0aG91dCBhbnkgZGlzY3Vzc2lvbiBvciBmb3JtYWwgZGVjaXNpb24sIHdpdGhvdXQgYW55CiAgICAgICBhc3Nlc3NvcnMsIHRvIGNvbmZpc2NhdGUgcHJpdmF0ZSBwcm9wZXJ0eSwgYW5kIHRvIHJlbGVhc2UgcHVibGljIHByb3BlcnR5PyBJbiB0aGlzIGNsYXVzZSB0aGUKICAgICAgIFJlY2VudG9yaWMgZGlzdHJpY3QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpcyBleGNlcHRlZDsgd2hpY2ggSQogICAgICAgYW0gZXhjZWVkaW5nbHkgZGVsaWdodGVkIGlzIGV4Y2VwdGVkLCBPIFJvbWFucywgYm90aCBvbiBhY2NvdW50IG9mIG15IGNvbm5lY3Rpb24gd2l0aCB0aGUKICAgICAgIHBlb3BsZSBvZiB0aGF0IGRpc3RyaWN0LCBhbmQgYmVjYXVzZSBvZiB0aGUganVzdGljZSBvZiB0aGUgZXhjZXB0aW9uLiBCdXQgd2hhdCBpbXB1ZGVuY2UgaXQKICAgICAgIGlzISBUaG9zZSB3aG8gYXJlIHRoZSBvY2N1cGllcnMgb2YgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QsIGRlZmVuZCB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQKICAgICAgIG9mIGxlbmd0aCBvZiBvY2N1cGF0aW9uLCBub3Qgb2YgcmlnaHQ7IHRoZXkgcmVseSBvbiB0aGUgcGl0eSBvZiB0aGUgc2VuYXRlLCBub3Qgb24gdGhlCiAgICAgICBjb25kaXRpb25zIG9uIHdoaWNoIHRoZXkgaG9sZCB0aGVpciBsYW5kcy4gRm9yIHRoZXkgY29uZmVzcyB0aGF0IGl0IGlzIHBhcnQgb2YgdGhlIHB1YmxpYwogICAgICAgZG9tYWluOyBidXQgc3RpbGwgdGhleSBzYXkgdGhhdCB0aGV5IG91Z2h0IG5vdCB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZAogICAgICAgdGhlaXIgbXVjaC1sb3ZlZCBob21lcywgYW5kIHRoZWlyIGhvdXNlaG9sZCBnb2RzLiBCdXQgaWYgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgYmUgcHJpdmF0ZQogICAgICAgcHJvcGVydHksIHdoeSBkbyB5b3UgZXhjZXB0IGl0PyBCdXQgaWYgaXQgYmUgcHVibGljLCB3aGVyZSB0aGVuIGlzIHRoZSBqdXN0aWNlIG9mIGFsbG93aW5nCiAgICAgICBvdGhlciBsYW5kcywgZXZlbiBpZiB0aGV5IGFyZSBwcml2YXRlIGxhbmRzLCB0byBiZSBhZGp1ZGdlZCB0byBiZSBwdWJsaWMsIGFuZCB0byBleGNlcHQgdGhpcwogICAgICAgZGlzdHJpY3QgYnkgbmFtZSB3aGljaCBjb25mZXNzZXMgdGhhdCBpdCBpcyBwdWJsaWMgcHJvcGVydHk/IFRoZXJlZm9yZSB0aGUgbGFuZCBvZiB0aG9zZSBtZW4KICAgICAgIGlzIGV4Y2VwdGVkIHdobyBoYXZlIGhhZCBhbnkgbWVhbnMgb2YgaW5mbHVlbmNpbmcgUnVsbHVzOyBhbGwgb3R0ZXIgbGFuZHMsIHdoZXJldmVyIHRoZXkKICAgICAgIGFyZeKAlHdpdGhvdXQgYW55IHNlbGVjdGlvbiBiZWluZyBtYWRlLCB3aXRob3V0IGFueSBleGFtaW5hdGlvbiBiZWluZyBpbnN0aXR1dGVkIGJ5CiAgICAgICB0aGUgcGVvcGxlLCB3aXRob3V0IGFueSBkZWNpc2lvbiBiZWluZyBjb21lIHRvIGJ5IHRoZSBzZW5hdGUsIGFyZSB0byBiZSBzb2xkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNTgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJ0gd2l0aG91dCBhbnkgbGltaXQgYXMgdG8gdGltZSwgbm90IChhcyB3YXMgZW5hY3RlZCBiZWZvcmUpCiAgICAgICB0aG9zZSBhY3F1aXJlZCBieSBTdWxsYSBhbmQgUG9tcGVpdXMgd2hlbiB0aGV5IHdlcmUgY29uc3Vscy4gVGhlcmUgaXMgYW4gaW5xdWlyeSB0byBiZSBtYWRlCiAgICAgICBieSB0aGUgZGVjZW12aXJzLCB3aGV0aGVyIHRoZSBsYW5kIGJlIHByaXZhdGUgb3IgcHVibGljIHByb3BlcnR5OyBhbmQgYnkgdGhpcyBtZWFucyBhIGhlYXZ5CiAgICAgICB0YXggaXMgbGFpZCBvbiB0aGUgbGF1ZC4gPC90cmFuc2xhdGlvbj4="
translation['2.21.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hvIGlzIHRoZXJlIHdobyBkb2VzIG5vdCBzZWUgaG93CiAgICAgICBncmVhdCBhIGp1ZGljaWFsIHBvd2VyIHRoaXMgaXMsIGhvdyBpbnRvbGVyYWJsZSwgaG93IHR5cmFubmljYWw/IGZvciB0aGVtIHRvIGJlIGFibGUsIGluCiAgICAgICB3aGF0ZXZlciBwbGFjZXMgdGhleSBwbGVhc2UsIHdpdGhvdXQgYW55IGRpc2N1c3Npb24gb3IgZm9ybWFsIGRlY2lzaW9uLCB3aXRob3V0IGFueQogICAgICAgYXNzZXNzb3JzLCB0byBjb25maXNjYXRlIHByaXZhdGUgcHJvcGVydHksIGFuZCB0byByZWxlYXNlIHB1YmxpYyBwcm9wZXJ0eT8gSW4gdGhpcyBjbGF1c2UgdGhlCiAgICAgICBSZWNlbnRvcmljIGRpc3RyaWN0IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiBpcyBleGNlcHRlZDsgd2hpY2ggSQogICAgICAgYW0gZXhjZWVkaW5nbHkgZGVsaWdodGVkIGlzIGV4Y2VwdGVkLCBPIFJvbWFucywgYm90aCBvbiBhY2NvdW50IG9mIG15IGNvbm5lY3Rpb24gd2l0aCB0aGUKICAgICAgIHBlb3BsZSBvZiB0aGF0IGRpc3RyaWN0LCBhbmQgYmVjYXVzZSBvZiB0aGUganVzdGljZSBvZiB0aGUgZXhjZXB0aW9uLiBCdXQgd2hhdCBpbXB1ZGVuY2UgaXQKICAgICAgIGlzISBUaG9zZSB3aG8gYXJlIHRoZSBvY2N1cGllcnMgb2YgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QsIGRlZmVuZCB0aGVtc2VsdmVzIG9uIHRoZSBncm91bmQKICAgICAgIG9mIGxlbmd0aCBvZiBvY2N1cGF0aW9uLCBub3Qgb2YgcmlnaHQ7IHRoZXkgcmVseSBvbiB0aGUgcGl0eSBvZiB0aGUgc2VuYXRlLCBub3Qgb24gdGhlCiAgICAgICBjb25kaXRpb25zIG9uIHdoaWNoIHRoZXkgaG9sZCB0aGVpciBsYW5kcy4gRm9yIHRoZXkgY29uZmVzcyB0aGF0IGl0IGlzIHBhcnQgb2YgdGhlIHB1YmxpYwogICAgICAgZG9tYWluOyBidXQgc3RpbGwgdGhleSBzYXkgdGhhdCB0aGV5IG91Z2h0IG5vdCB0byBiZSByZW1vdmVkIGZyb20gdGhlaXIgcG9zc2Vzc2lvbnMsIGFuZAogICAgICAgdGhlaXIgbXVjaC1sb3ZlZCBob21lcywgYW5kIHRoZWlyIGhvdXNlaG9sZCBnb2RzLiBCdXQgaWYgdGhlIFJlY2VudG9yaWMgZGlzdHJpY3QgYmUgcHJpdmF0ZQogICAgICAgcHJvcGVydHksIHdoeSBkbyB5b3UgZXhjZXB0IGl0PyBCdXQgaWYgaXQgYmUgcHVibGljLCB3aGVyZSB0aGVuIGlzIHRoZSBqdXN0aWNlIG9mIGFsbG93aW5nCiAgICAgICBvdGhlciBsYW5kcywgZXZlbiBpZiB0aGV5IGFyZSBwcml2YXRlIGxhbmRzLCB0byBiZSBhZGp1ZGdlZCB0byBiZSBwdWJsaWMsIGFuZCB0byBleGNlcHQgdGhpcwogICAgICAgZGlzdHJpY3QgYnkgbmFtZSB3aGljaCBjb25mZXNzZXMgdGhhdCBpdCBpcyBwdWJsaWMgcHJvcGVydHk/IFRoZXJlZm9yZSB0aGUgbGFuZCBvZiB0aG9zZSBtZW4KICAgICAgIGlzIGV4Y2VwdGVkIHdobyBoYXZlIGhhZCBhbnkgbWVhbnMgb2YgaW5mbHVlbmNpbmcgUnVsbHVzOyBhbGwgb3R0ZXIgbGFuZHMsIHdoZXJldmVyIHRoZXkKICAgICAgIGFyZeKAlHdpdGhvdXQgYW55IHNlbGVjdGlvbiBiZWluZyBtYWRlLCB3aXRob3V0IGFueSBleGFtaW5hdGlvbiBiZWluZyBpbnN0aXR1dGVkIGJ5CiAgICAgICB0aGUgcGVvcGxlLCB3aXRob3V0IGFueSBkZWNpc2lvbiBiZWluZyBjb21lIHRvIGJ5IHRoZSBzZW5hdGUsIGFyZSB0byBiZSBzb2xkIGJ5IHRoZQogICAgICAgZGVjZW12aXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.22.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFsc28gYW5vdGhlciBwcm9maXRhYmxlIGV4Y2VwdGlvbiBtYWRlIGluIHRoZSBmb3JtZXIgY2hhcHRlciBhY2NvcmRpbmcgdG8gd2hpY2gKICAgICAgIGV2ZXJ5dGhpbmcgaXMgdG8gYmUgc29sZC4gQW4gZXhjZXB0aW9uIHdoaWNoIGNvbXByZWhlbmRzIHRob3NlIGxhbmRzIHdoaWNoIGFyZSBwcm90ZWN0ZWQgYnkKICAgICAgIHRyZWF0eS4gSGUgaGVhcmQgdGhhdCB0aGlzIG1hdHRlciB3YXMgb2Z0ZW4gYWdpdGF0ZWQgaW4gdGhlIHNlbmF0ZSwgbm90IGJ5IG1lLCBidXQgYnkgb3RoZXJzLAogICAgICAgYW5kIHNvbWV0aW1lcyBhbHNvIGluIHRoaXMgcGxhY2U7IHRoYXQga2luZyBIaWVtcHNhbCB3YXMgaW4gcG9zc2Vzc2lvbiBvZiBsYW5kcyBvbiB0aGUgc2VhCiAgICAgICBjb2FzdCwgd2hpY2ggUHVibGl1cyBBZnJpY2FudXMgYWRqdWRnZWQgdG8gdGhlIFJvbWFuIHBlb3BsZTsgYW5kIHlldCBhZnRlcndhcmRzIGV4cHJlc3MKICAgICAgIHByb3Zpc2lvbiB3YXMgbWFkZSByZXNwZWN0aW5nIHRoZW0gaW4gYSB0cmVhdHksIGJ5IENhaXVzIENvdHRhLCB3aGVuIGNvbnN1bC4gQnV0LCBiZWNhdXNlIHlvdQogICAgICAgZGlkIG5vdCBvcmRlciB0aGlzIHRyZWF0eSB0byBiZSBtYWRlLCBIaWVtcHNhbCBpcyBpbiBmZWFyIGxlc3QgaXQgbWF5IG5vdCBiZSBjb25zaWRlcmVkIGZpcm0KICAgICAgIGFuZCBwcm9wZXJseSByYXRpZmllZC4gV2hhdD8gV2hhdCBzb3J0IG9mIHByb2NlZWRpbmcgaXMgdGhpcz8gWW91ciBkZWNpc2lvbiBpcyBub3Qgd2FpdGVkCiAgICAgICBmb3I7IHRoZSB3aG9sZSB0cmVhdHkgaXMgZXhjZXB0ZWQuIEl0IGlzIGFwcHJvdmVkIGJ5IFJ1bGx1cy4gQXMgaXQgbGltaXRzIHRoZSBwb3dlciBvZiBzYWxlCiAgICAgICB0byBiZSBnaXZlbiB0byB0aGUgZGVjZW12aXJzLCBJIGFtIGdsYWQgb2YgaXQ7IGFzIGl0IHByb3RlY3RzIHRoZSBpbnRlcmVzdHMgb2YgYSBraW5nIHdobyBpcwogICAgICAgb3VyIGZyaWVuZCwgSSBmaW5kIG5vIGZhdWx0IHdpdGggaXQ7IGJ1dCBteSBvcGluaW9uIGlzIHRoYXQgdGhlIGV4Y2VwdGlvbiB3YXMgbm90IG1hZGUgZm9yCiAgICAgICBub3RoaW5nOyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTkiIHVuaXQ9InNlY3Rpb24iIC8+IGZvciB0aGVyZSBpcyBjb25zdGFudGx5IGZsdXR0ZXJpbmcgYmVmb3JlIHRob3NlCiAgICAgICBtZW4ncyBleWVzIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPkp1YmE8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHRoZSBraW5nJ3Mgc29uLCB3aG9zZSBwdXJzZSBpcwogICAgICAgZXZlcnkgYml0IGFzIGxvbmcgYXMgaGlzIGhhaXIuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.22.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz4gZm9yIHRoZXJlIGlzIGNvbnN0YW50bHkgZmx1dHRlcmluZyBiZWZvcmUgdGhvc2UKICAgICAgIG1lbidzIGV5ZXMgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkp1YmE8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHRoZSBraW5nJ3Mgc29uLCB3aG9zZSBwdXJzZSBpcwogICAgICAgZXZlcnkgYml0IGFzIGxvbmcgYXMgaGlzIGhhaXIuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5KdWJhPC9zdXJuYW1lPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXZlbiBub3cgdGhlcmUgc2NhcmNlbHkgYXBwZWFycyB0byBiZSBhbnkgcGxhY2UgY2FwYWJsZSBvZiBjb250YWluaW5nIHN1Y2ggdmFzdCBoZWFwcyBvZgogICAgICAgbW9uZXkuIEhlIGluY3JlYXNlcyB0aGUgc3VtcywgaGUgYWRkcyB0byB0aGVtLCBoZSBrZWVwcyBvbiBhY2N1bXVsYXRpbmcuIOKAnFRvCiAgICAgICB3aG9tc29ldmVyIGdvbGQgb3Igc2lsdmVyIGNvbWVzLCBmcm9tIHNwb2lscywgZnJvbSBtb25leSBnaXZlbiBmb3IgY3Jvd25zLCBpZiBpdCBoYXMgbmVpdGhlcgogICAgICAgYmVlbiBwYWlkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgbm9yIHNwZW50IGluIGFueSBtb251bWVudC7igJ0gT2YgdGhhdCB0cmVhc3VyZSBoZQogICAgICAgb3JkZXJzIGEgcmV0dXJuIHRvIGJlIG1hZGUgdG8gdGhlIGRlY2VtdmlycywgYW5kIHRoZSB0cmVhc3VyZSBpcyB0byBiZSBwYWlkIG92ZXIgdG8gdGhlbS4gQnkKICAgICAgIHRoaXMgY2FzZSB5b3Ugc2VlIHRoYXQgYW4gaW52ZXN0aWdhdGlvbiBldmVuIGludG8gdGhlIGNvbmR1Y3Qgb2YgdGhlIG1vc3QgaWxsdXN0cmlvdXMgbWVuLAogICAgICAgd2hvIGhhdmUgY2FycmllZCBvbiB0aGUgd2FycyBvZiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgdGhhdCBqdWRpY2lhbCBleGFtaW5hdGlvbnMgaW50byBjaGFyZ2VzCiAgICAgICBvZiBwZWN1bGF0aW9uIG9yIGV4dG9ydGlvbiwgYXJlIHRyYW5zZmVycmVkIHRvIHRoZSBkZWNlbXZpcnMuIFRoZXkgd2lsbCBoYXZlIGEgcG93ZXIgb2YKICAgICAgIGRlY2lkaW5nIHdoYXQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzcG9pbHMgd2hpY2ggaGF2ZSBiZWVuIGdhaW5lZCBieSBlYWNoIGluZGl2aWR1YWwsIHdoYXQKICAgICAgIHJldHVybiBoZSBoYXMgbWFkZSwgYW5kIHdoYXQgaGUgaGFzIGxlZnQuIEJ1dCB0aGlzIGxhdyBpcyBsYWlkIGRvd24gZm9yIGFsbCB5b3VyIGdlbmVyYWxzIGZvcgogICAgICAgdGhlIGZ1dHVyZSwgdGhhdCwgd2hvZXZlciBsZWF2ZXMgaGlzIHByb3ZpbmNlLCBtdXN0IG1ha2UgYSByZXR1cm4gdG8gdGhlc2Ugc2FtZSBkZWNlbXZpcnMsIG9mCiAgICAgICBob3cgbXVjaCBib290eSwgYW5kIHNwb2lscywgYW5kIGdvbGQgZ2l2ZW4gZm9yIHRoZSBwdXJwb3NlIG9mIGNyb3ducyBoZSBoYXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhlcmUgdGhpcyBhZG1pcmFibGUgbWFuIGV4Y2VwdHMgQ25hZXVzIFBvbXBlaXVzLCB3aG9tIGhlIGlzIHNvCiAgICAgICBmb25kIG9mLiBXaGVuY2UgZG9lcyB0aGlzIGFmZmVjdGlvbiBzbyBzdWRkZW4gYW5kIHByZXZpb3VzbHkgdW5rbm93biBvcmlnaW5hdGU/IGZvciBoZSBpcwogICAgICAgZXhjbHVkZWQgZnJvbSB0aGUgaG9ub3VyIG9mIHRoZSBkZWNlbXZpcmF0ZSBhbG1vc3QgYnkgbmFtZTsgaGlzIHBvd2VyIG9mIGRlY2lkaW5nIGp1ZGljaWFsbHksCiAgICAgICBvZiBnaXZpbmcgbGF3cywgb3Igb2YgbWFraW5nIGFueSBmb3JtYWwgaW5xdWlyeSByZXNwZWN0aW5nIHRoZSBsYW5kcyB3aGljaCBoYXZlIGJlZW4gdGFrZW4gYnkKICAgICAgIGhpcyB5b3VyLCBpcyB0YWtlbiBmcm9tIGhpbTsgZGVjZW12aXJzIGFyZSBzZW50IG5vdCBvbmx5IGludG8gaGlzIHByb3ZpbmNlIGJ1dCBpbnRvIGhpcyB2ZXJ5CiAgICAgICBjYW1wLCB3aXRoIG1pbGl0YXJ5IGF1dGhvcml0eSwgd2l0aCBpbW1lbnNlIHN1bXMgb2YgbW9uZXksIHdpdGggdW5saW1pdGVkIHBvd2VyLCBhbmQgd2l0aCBhCiAgICAgICByaWdodCBvZiBkZWNpZGluZyBvbiBldmVyeXRoaW5nLiBIaXMgcmlnaHRzIGFzIGEgZ2VuZXJhbCwgd2hpY2ggaGF2ZSBoaXRoZXJ0byBhbHdheXMgYmVlbgogICAgICAgbW9zdCBqZWFsb3VzbHkgcHJlc2VydmVkIHRvIGV2ZXJ5IGdlbmVyYWwgYXJlIGZvciB0aGUgZmlyc3QgdGltZSB0YWtlbiBmcm9tIGhpbS4gQnV0IGhlIGlzCiAgICAgICBleGNlcHRlZCBhcyB0aGUgb25seSBvbmUgd2hvIGlzIG5vdCBib3VuZCB0byBtYWtlIGEgcmV0dXJuIG9mIGhpcyBib290eS4gRG9lcyBpdCBzZWVtIHRoYXQKICAgICAgIHRoZSByZWFsIG9iamVjdCBvZiB0aGlzIGNsYXVzZSBpcyB0byBkbyBob25vdXIgdG8gdGhlIG1hbiwgb3IgdG8gZXhjaXRlIGEgZmVlbGluZyBvZgogICAgICAgdW5wb3B1bGFyaXR5IGFnYWluc3QgaGltPyA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNjEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.22.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhlcmUgdGhpcyBhZG1pcmFibGUgbWFuIGV4Y2VwdHMgQ25hZXVzIFBvbXBlaXVzLCB3aG9tIGhlIGlzIHNvCiAgICAgICBmb25kIG9mLiBXaGVuY2UgZG9lcyB0aGlzIGFmZmVjdGlvbiBzbyBzdWRkZW4gYW5kIHByZXZpb3VzbHkgdW5rbm93biBvcmlnaW5hdGU/IGZvciBoZSBpcwogICAgICAgZXhjbHVkZWQgZnJvbSB0aGUgaG9ub3VyIG9mIHRoZSBkZWNlbXZpcmF0ZSBhbG1vc3QgYnkgbmFtZTsgaGlzIHBvd2VyIG9mIGRlY2lkaW5nIGp1ZGljaWFsbHksCiAgICAgICBvZiBnaXZpbmcgbGF3cywgb3Igb2YgbWFraW5nIGFueSBmb3JtYWwgaW5xdWlyeSByZXNwZWN0aW5nIHRoZSBsYW5kcyB3aGljaCBoYXZlIGJlZW4gdGFrZW4gYnkKICAgICAgIGhpcyB5b3VyLCBpcyB0YWtlbiBmcm9tIGhpbTsgZGVjZW12aXJzIGFyZSBzZW50IG5vdCBvbmx5IGludG8gaGlzIHByb3ZpbmNlIGJ1dCBpbnRvIGhpcyB2ZXJ5CiAgICAgICBjYW1wLCB3aXRoIG1pbGl0YXJ5IGF1dGhvcml0eSwgd2l0aCBpbW1lbnNlIHN1bXMgb2YgbW9uZXksIHdpdGggdW5saW1pdGVkIHBvd2VyLCBhbmQgd2l0aCBhCiAgICAgICByaWdodCBvZiBkZWNpZGluZyBvbiBldmVyeXRoaW5nLiBIaXMgcmlnaHRzIGFzIGEgZ2VuZXJhbCwgd2hpY2ggaGF2ZSBoaXRoZXJ0byBhbHdheXMgYmVlbgogICAgICAgbW9zdCBqZWFsb3VzbHkgcHJlc2VydmVkIHRvIGV2ZXJ5IGdlbmVyYWwgYXJlIGZvciB0aGUgZmlyc3QgdGltZSB0YWtlbiBmcm9tIGhpbS4gQnV0IGhlIGlzCiAgICAgICBleGNlcHRlZCBhcyB0aGUgb25seSBvbmUgd2hvIGlzIG5vdCBib3VuZCB0byBtYWtlIGEgcmV0dXJuIG9mIGhpcyBib290eS4gRG9lcyBpdCBzZWVtIHRoYXQKICAgICAgIHRoZSByZWFsIG9iamVjdCBvZiB0aGlzIGNsYXVzZSBpcyB0byBkbyBob25vdXIgdG8gdGhlIG1hbiwgb3IgdG8gZXhjaXRlIGEgZmVlbGluZyBvZgogICAgICAgdW5wb3B1bGFyaXR5IGFnYWluc3QgaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.23.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkNuYWV1cyBQb21wZWl1cyB3aWxsIG1ha2UgYSBwcmVzZW50IG9mIHRoaXMgdG8gUnVsbHVzLiBIZSBoYXMgbm8gZGVzaXJlIHRvIGF2YWlsIGhpbXNlbGYgb2YKICAgICAgIHRoYXQga2luZG5lc3Mgb2YgdGhlIGxhdywgYW5kIG9mIHRoZSBnb29kLW5hdHVyZSBvZiB0aGUgZGVjZW12aXJzLiBGb3IgaWYgaXQgYmUganVzdCBmb3IKICAgICAgIGdlbmVyYWxzIG5vdCB0byBkZXZvdGUgdGhlaXIgc3BvaWxzIGFuZCBib290eSBlaXRoZXIgdG8gbW9udW1lbnRzIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBvciB0bwogICAgICAgdGhlIGRlY29yYXRpb25zIG9mIHRoZSBjaXR5LOKAlGJ1dCBpZiB0aGV5IGFyZSB0byBjYXJyeSBpdCBhbGwgdG8gdGhlIGRlY2VtdmlycyBhcwogICAgICAgdGhlaXIgbWFzdGVycyzigJR0aGVuIFBvbXBlaXVzIHdpc2hlcyBmb3Igbm90aGluZyBwYXJ0aWN1bGFyIGZvciBoaW1zZWxmOyBub3RoaW5nLiBIZQogICAgICAgd2lzaGVzIHRvIGxpdmUgdW5kZXIgdGhlIGNvbW1vbiBsYXcsIHVuZGVyIHRoZSBzYW1lIGxhdyBhcyB0aGUgcmVzdC4gSWYgaXQgYmUgdW5qdXN0LCBPCiAgICAgICBSb21hbnPigJRpZiBpdCBiZSBzaGFtZWZ1bCwgaWYgaXQgYmUgaW50b2xlcmFibGUgZm9yIHRoZXNlIGRlY2VtdmlycyB0byBiZSBhcHBvaW50ZWQKICAgICAgIGFzIGNvbXB0cm9sbGVycyBvZiBhbGwgdGhlIG1vbmV5IGNvbGxlY3RlZCBieSBldmVyeSBib2R5LCBhbmQgYXMgcGx1bmRlcmVycyBub3Qgb25seSBvZgogICAgICAgZm9yZWlnbiBraW5ncyBhbmQgY2l0aXplbnMgb2YgZm9yZWlnbiBuYXRpb25zLCBidXQgb2YgZXZlbiBvdXIgb3duIGdlbmVyYWxzLCB0aGVuIHRoZXkgZG8gbm90CiAgICAgICBzZWVtIHRvIG1lIHRvIGhhdmUgZXhjZXB0ZWQgUG9tcGVpdXMgZm9yIHRoZSBzYWtlIG9mIGRvaW5nIGhpbSBob25vdXIsIGJ1dCB0byBiZSBhZnJhaWQgdGhhdAogICAgICAgaGUgbWF5IG5vdCBiZSBhYmxlIHRvIHB1dCB1cCB3aXRoIHRoZSBzYW1lIGluc3VsdCBhcyB0aGUgcmVzdC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYyIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgUG9tcGVpdXMncyBmZWVsaW5ncyB3aWxsIGJlIHRoZXNlLCB0aGF0IGhlIHdpbGwgdGhpbmsgaXQgYmVjb21lcyBoaW0KICAgICAgIHRvIGJlYXIgd2hhdGV2ZXIgc2VlbXMgZml0dGluZyB0byB5b3U7IG9uIHRoZSBvdGhlciBoYW5kLCBpZiB0aGVyZSBiZSBhbnl0aGluZyB3aGljaCB5b3UKICAgICAgIGNhbm5vdCBiZWFyLCBoZSB3aWxsIHRha2UgY2FyZSB0aGF0IHlvdSBhcmUgbm90IGxvbmcgY29tcGVsbGVkIHRvIGJlYXIgaXQgYWdhaW5zdCB5b3VyIHdpbGwuCiAgICAgICBCdXQgdGhlIGxhdyBtYWtlcyBhIHByb3Zpc2lvbiB0aGF0LCDigJxpZiBhbnkgbW9uZXkgaXMgcmVjZWl2ZWQgZnJvbSBhbnkgbmV3IHNvdXJjZQogICAgICAgb2YgcmV2ZW51ZSBhZnRlciBvdXIgY29uc3Vsc2hpcCwgdGhlIGRlY2VtdmlycyBhcmUgdG8gYmUgYWxsb3dlZCB0byB1c2UgaXQu4oCdCiAgICAgICBNb3Jlb3ZlciwgaGUgc2VlcyB0aGF0IHRoZSBuZXcgc291cmNlcyBvZiByZXZlbnVlIHdpbGwgYmUgdGhvc2Ugd2hpY2ggUG9tcGVpdXMgaGFzIGFkZGVkIHRvCiAgICAgICB0aGUgcmVwdWJsaWMuIEFuZCBzbywgaGUgbGV0cyBvZmYgaGlzIHNwb2lscywgYnV0IHRoaW5rcyB0aGF0IGl0IGlzIHJpZ2h0IGZvciBoaW0gdG8gcmVhcCB0aGUKICAgICAgIGJlbmVmaXQgb2YgYWxsIHRoZSByZXZlbnVlcyBhY3F1aXJlZCBieSBoaXMgdmFsb3VyLiBMZXQgdGhlbiwgTyBSb21hbnMsIGFsbCB0aGUgbW9uZXkgd2hpY2gKICAgICAgIHRoZXJlIGlzIGluIHRoZSB3b3JsZCBjb25pYyBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgZGljdGF0b3JzOyBsZXQgbm90aGluZyBiZSBvbWl0dGVkOyBsZXQKICAgICAgIGV2ZXJ5IGNpdHksIGV2ZXJ5IGRpc3RyaWN0LCBldmVyeSBraW5nZG9tLCBhbmQgbGFzdGx5IGV2ZW4geW91ciBvd24gcmV2ZW51ZXMgYmUgc29sZCBieSB0aGVtOwogICAgICAgbGV0IHRoZSBzcG9pbHMgd29uIGJ5IHlvdXIgZ2VuZXJhbHMgYmUgYWRkZWQgdG8gdGhlIGhlYXAuIFlvdSBzZWUgbm93IHdoYXQgZW5vcm1vdXMsIHdoYXQKICAgICAgIGluY3JlZGlibGUgcmljaGVzIGFyZSBzb3VnaHQgdG8gYmUgYWNxdWlyZWQgYnkgeW91ciBkZWNlbXZpcnMgYnkgc3VjaCBleHRlbnNpdmUgc2FsZXMsIGJ5IHNvCiAgICAgICBtYW55IGRlY2lzaW9ucyB3aGljaCB0aGV5IGhhdmUgdGhlIHBvd2VyIHRvIG1ha2UsIGFuZCBieSBzdWNoIHVubGltaXRlZCBhdXRob3JpdHkgb3ZlcgogICAgICAgZXZlcnl0aGluZy4gPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjYzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.23.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFzIFBvbXBlaXVzJ3MgZmVlbGluZ3Mgd2lsbCBiZSB0aGVzZSwgdGhhdCBoZSB3aWxsIHRoaW5rIGl0IGJlY29tZXMgaGltCiAgICAgICB0byBiZWFyIHdoYXRldmVyIHNlZW1zIGZpdHRpbmcgdG8geW91OyBvbiB0aGUgb3RoZXIgaGFuZCwgaWYgdGhlcmUgYmUgYW55dGhpbmcgd2hpY2ggeW91CiAgICAgICBjYW5ub3QgYmVhciwgaGUgd2lsbCB0YWtlIGNhcmUgdGhhdCB5b3UgYXJlIG5vdCBsb25nIGNvbXBlbGxlZCB0byBiZWFyIGl0IGFnYWluc3QgeW91ciB3aWxsLgogICAgICAgQnV0IHRoZSBsYXcgbWFrZXMgYSBwcm92aXNpb24gdGhhdCwg4oCcaWYgYW55IG1vbmV5IGlzIHJlY2VpdmVkIGZyb20gYW55IG5ldyBzb3VyY2UKICAgICAgIG9mIHJldmVudWUgYWZ0ZXIgb3VyIGNvbnN1bHNoaXAsIHRoZSBkZWNlbXZpcnMgYXJlIHRvIGJlIGFsbG93ZWQgdG8gdXNlIGl0LuKAnQogICAgICAgTW9yZW92ZXIsIGhlIHNlZXMgdGhhdCB0aGUgbmV3IHNvdXJjZXMgb2YgcmV2ZW51ZSB3aWxsIGJlIHRob3NlIHdoaWNoIFBvbXBlaXVzIGhhcyBhZGRlZCB0bwogICAgICAgdGhlIHJlcHVibGljLiBBbmQgc28sIGhlIGxldHMgb2ZmIGhpcyBzcG9pbHMsIGJ1dCB0aGlua3MgdGhhdCBpdCBpcyByaWdodCBmb3IgaGltIHRvIHJlYXAgdGhlCiAgICAgICBiZW5lZml0IG9mIGFsbCB0aGUgcmV2ZW51ZXMgYWNxdWlyZWQgYnkgaGlzIHZhbG91ci4gTGV0IHRoZW4sIE8gUm9tYW5zLCBhbGwgdGhlIG1vbmV5IHdoaWNoCiAgICAgICB0aGVyZSBpcyBpbiB0aGUgd29ybGQgY29uaWMgaW50byB0aGUgaGFuZHMgb2YgdGhlIGRpY3RhdG9yczsgbGV0IG5vdGhpbmcgYmUgb21pdHRlZDsgbGV0CiAgICAgICBldmVyeSBjaXR5LCBldmVyeSBkaXN0cmljdCwgZXZlcnkga2luZ2RvbSwgYW5kIGxhc3RseSBldmVuIHlvdXIgb3duIHJldmVudWVzIGJlIHNvbGQgYnkgdGhlbTsKICAgICAgIGxldCB0aGUgc3BvaWxzIHdvbiBieSB5b3VyIGdlbmVyYWxzIGJlIGFkZGVkIHRvIHRoZSBoZWFwLiBZb3Ugc2VlIG5vdyB3aGF0IGVub3Jtb3VzLCB3aGF0CiAgICAgICBpbmNyZWRpYmxlIHJpY2hlcyBhcmUgc291Z2h0IHRvIGJlIGFjcXVpcmVkIGJ5IHlvdXIgZGVjZW12aXJzIGJ5IHN1Y2ggZXh0ZW5zaXZlIHNhbGVzLCBieSBzbwogICAgICAgbWFueSBkZWNpc2lvbnMgd2hpY2ggdGhleSBoYXZlIHRoZSBwb3dlciB0byBtYWtlLCBhbmQgYnkgc3VjaCB1bmxpbWl0ZWQgYXV0aG9yaXR5IG92ZXIKICAgICAgIGV2ZXJ5dGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.24.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyByZW1hcmsgdGhlaXIgb3RoZXIgaW1tZW5zZSBhbmQgaW50b2xlcmFibGUgZ2FpbnMsIGluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhhdCB0aGlzCiAgICAgICBwb3B1bGFyIG5hbWUgb2YgYW4gYWdyYXJpYW4gbGF3IGhhcyBvbmx5IGJlZW4gaHVudGVkIG91dCBhcyBhIG1lYW5zIG9mIGdyYXRpZnlpbmcgdGhlCiAgICAgICB1bnJlYXNvbmFibGUgYXZhcmljZSBvZiBwYXJ0aWN1bGFyIG1lbi4gSGUgb3JkZXJzIGxhbmRzIHRvIGJlIGJvdWdodCB3aXRoIHRoaXMgbW9uZXksIHRvCiAgICAgICB3aGljaCB5b3UgYXJlIHRvIGJlIGNvbmR1Y3RlZCBhcyBjb2xvbmlzdHMuIEkgYW0gbm90IGFjY3VzdG9tZWQsIE8gUm9tYW5zLCB0byBzcGVhayBvciBtZW4KICAgICAgIHdpdGggdW5uZWNlc3NhcnkgaGFyc2huZXNzIHVubGVzcyBJIGFtIHByb3Zva2VkLiBJIHdpc2ggaXQgd2VyZSBwb3NzaWJsZSBmb3IgdGhvc2UgbWVuIHRvIGJlCiAgICAgICBuYW1lZCBieSBtZSB3aXRob3V0IHNwZWFraW5nIGlsbCBvZiB0aGVtLCB3aG8gaG9wZSB0byBiZSB0aGVtc2VsdmVzIGFwcG9pbnRlZCBkZWNlbXZpcnM7IGFuZAogICAgICAgeW91IHNob3VsZCBxdWlja2x5IHNlZSB3aGF0IHNvcnQgb2YgbWVuIHRoZXkgYXJlIHRvIHdob20geW91IGhhdmUgY29tbWl0dGVkIHRoZSBwb3dlciBvZgogICAgICAgc2VsbGluZyBhbmQgYnV5aW5nIGV2ZXJ5dGhpbmcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCB0aGF0IHdoaWNoIEkgaGF2ZSBtYWRlCiAgICAgICB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gc2F5LCB5ZXQgeW91IGNhbiBzdGlsbCBmb3JtIGFuIGlkZWEgb2YgaW4geW91ciBtaW5kcy4gVGhpcyBvbmUKICAgICAgIHRoaW5nIGF0IGFsbCBldmVudHMgSSBhcHBlYXIgdG8gbXlzZWxmIHRvIGJlIGFibGUgdG8gc2F5IHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICB0cnV0aCzigJR0aGF0IGluIGZvcm1lciB0aW1lcyB3aGVuIHRoaXMgcmVwdWJsaWMgaGFkIHRoZSBMdXNjaW5pLCB0aGUgQ2FsYXRpbmksIHRoZQogICAgICAgQWNpZGluaSwgbWVuIGFkb3JuZWQgbm90IG9ubHkgd2l0aCB0aGUgaG9ub3VycyBjb25mZXJyZWQgb24gdGhlbSBieSB0aGUgcGVvcGxlLCBhbmQgYnkgdGhlaXIKICAgICAgIG93biBncmVhdCBleHBsb2l0cywgYnV0IGFsc28gYnkgdGhlIHBhdGllbmNlIHdpdGggd2hpY2ggdGhleSBlbmR1cmVkIHBvdmVydHk7IGFuZCB0aGVuIGFsc28KICAgICAgIHdoZW4gdGhlIENhdG9zLCBhbmQgdGhlIFBoaWxpLCBhbmQgTGFlbGlpIGxpdmVkLCBtZW4gd2hvc2Ugd2lzZG9tIGFuZCBtb2RlcmF0aW9uIHlvdSBoYWQKICAgICAgIG9idGFpbmVkIGEgdGhvcm91Z2gga25vd2xlZGdlIG9mIGluIHB1YmxpYywgYW5kIHByaXZhdGUsIGFuZCBmb3JlbnNpYywgYW5kIGRvbWVzdGljIGFmZmFpcnM7CiAgICAgICBzdGlsbCBzdWNoIGEgY2hhcmdlIGFzIHRoaXMgd2FzIGVudHJ1c3RlZCB0byBubyBvbmUsIHNvIGFzIHRvIGFsbG93IHRoZSBzYW1lIG1hbiB0byBiZSBib3RoCiAgICAgICBqdWRnZSBhbmQgc2VsbGVyLCBhbmQgdG8gYmUgc28gZm9yIGZpdmUgeWVhcnMgb3ZlciB0aGUgd2hvbGUgd29ybGQsIGFuZCBhbHNvIHRvIGhhdmUgcG93ZXIgdG8KICAgICAgIGFsaWVuYXRlIHRoZSBsYW5kcyBvZiB0aGUgUm9tYW4gcGVvcGxlIGZyb20gd2hpY2ggdGhlaXIgcmV2ZW51ZXMgYXJlIGRlcml2ZWQ7IGFuZCB3aGVuIGJ5CiAgICAgICB0aGVzZSBtZWFucyBoZSBoYWQgYW1hc3NlZCBhIHZhc3Qgc3VtIG9mIG1vbmV5IGFjY29yZGluZyB0byBoaXMgb3duIHBsZWFzdXJlLCB3aXRob3V0IGFueQogICAgICAgd2l0bmVzcywgdGhlbiBoZSB3YXMgdG8gYnV5IHdoYXRldmVyIGhlIHBsZWFzZWQgZnJvbSBhbnkgb25lIGhlIHBsZWFzZWQuIDxtaWxlc3RvbmUgbj0iNjUiIHVuaXQ9InNlY3Rpb24iIC8+IE5vdyB0aGVuIGRvIHlvdSwgTyBSb21hbnMsIGNvbW1pdCBhbGwgdGhlc2UgdGhpbmdzIHRvIHRoZXNlIG1lbiB3aG9tIHlvdQogICAgICAgc3VzcGVjdCBvZiBhaW1pbmcgYXQgdGhpcyBkZWNlbXZpcmF0ZTsgeW91IHdpbGwgZmluZCBzb21lIG9mIHRoZW0gdG8gd2hvbSBub3RoaW5nIGFwcGVhcnMKICAgICAgIHN1ZmZpY2llbnQgdG8gcG9zc2Vzcywgc29tZSB0byB3aG9tIG5vdGhpbmcgc2VlbXMgc3VmZmljaWVudCB0byBzcXVhbmRlci4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.24.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0LCB0aGF0IHdoaWNoIEkgaGF2ZSBtYWRlCiAgICAgICB1cCBteSBtaW5kIHRoYXQgSSBvdWdodCBub3QgdG8gc2F5LCB5ZXQgeW91IGNhbiBzdGlsbCBmb3JtIGFuIGlkZWEgb2YgaW4geW91ciBtaW5kcy4gVGhpcyBvbmUKICAgICAgIHRoaW5nIGF0IGFsbCBldmVudHMgSSBhcHBlYXIgdG8gbXlzZWxmIHRvIGJlIGFibGUgdG8gc2F5IHdpdGggdGhlIGdyZWF0ZXN0CiAgICAgICB0cnV0aCzigJR0aGF0IGluIGZvcm1lciB0aW1lcyB3aGVuIHRoaXMgcmVwdWJsaWMgaGFkIHRoZSBMdXNjaW5pLCB0aGUgQ2FsYXRpbmksIHRoZQogICAgICAgQWNpZGluaSwgbWVuIGFkb3JuZWQgbm90IG9ubHkgd2l0aCB0aGUgaG9ub3VycyBjb25mZXJyZWQgb24gdGhlbSBieSB0aGUgcGVvcGxlLCBhbmQgYnkgdGhlaXIKICAgICAgIG93biBncmVhdCBleHBsb2l0cywgYnV0IGFsc28gYnkgdGhlIHBhdGllbmNlIHdpdGggd2hpY2ggdGhleSBlbmR1cmVkIHBvdmVydHk7IGFuZCB0aGVuIGFsc28KICAgICAgIHdoZW4gdGhlIENhdG9zLCBhbmQgdGhlIFBoaWxpLCBhbmQgTGFlbGlpIGxpdmVkLCBtZW4gd2hvc2Ugd2lzZG9tIGFuZCBtb2RlcmF0aW9uIHlvdSBoYWQKICAgICAgIG9idGFpbmVkIGEgdGhvcm91Z2gga25vd2xlZGdlIG9mIGluIHB1YmxpYywgYW5kIHByaXZhdGUsIGFuZCBmb3JlbnNpYywgYW5kIGRvbWVzdGljIGFmZmFpcnM7CiAgICAgICBzdGlsbCBzdWNoIGEgY2hhcmdlIGFzIHRoaXMgd2FzIGVudHJ1c3RlZCB0byBubyBvbmUsIHNvIGFzIHRvIGFsbG93IHRoZSBzYW1lIG1hbiB0byBiZSBib3RoCiAgICAgICBqdWRnZSBhbmQgc2VsbGVyLCBhbmQgdG8gYmUgc28gZm9yIGZpdmUgeWVhcnMgb3ZlciB0aGUgd2hvbGUgd29ybGQsIGFuZCBhbHNvIHRvIGhhdmUgcG93ZXIgdG8KICAgICAgIGFsaWVuYXRlIHRoZSBsYW5kcyBvZiB0aGUgUm9tYW4gcGVvcGxlIGZyb20gd2hpY2ggdGhlaXIgcmV2ZW51ZXMgYXJlIGRlcml2ZWQ7IGFuZCB3aGVuIGJ5CiAgICAgICB0aGVzZSBtZWFucyBoZSBoYWQgYW1hc3NlZCBhIHZhc3Qgc3VtIG9mIG1vbmV5IGFjY29yZGluZyB0byBoaXMgb3duIHBsZWFzdXJlLCB3aXRob3V0IGFueQogICAgICAgd2l0bmVzcywgdGhlbiBoZSB3YXMgdG8gYnV5IHdoYXRldmVyIGhlIHBsZWFzZWQgZnJvbSBhbnkgb25lIGhlIHBsZWFzZWQuIDwvdHJhbnNsYXRpb24+"
translation['2.24.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz4gTm93IHRoZW4gZG8geW91LCBPIFJvbWFucywgY29tbWl0IGFsbCB0aGVzZSB0aGluZ3MgdG8gdGhlc2UgbWVuIHdob20geW91CiAgICAgICBzdXNwZWN0IG9mIGFpbWluZyBhdCB0aGlzIGRlY2VtdmlyYXRlOyB5b3Ugd2lsbCBmaW5kIHNvbWUgb2YgdGhlbSB0byB3aG9tIG5vdGhpbmcgYXBwZWFycwogICAgICAgc3VmZmljaWVudCB0byBwb3NzZXNzLCBzb21lIHRvIHdob20gbm90aGluZyBzZWVtcyBzdWZmaWNpZW50IHRvIHNxdWFuZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUgSSB3aWxsIG5vdCBkaXNjdXNzIHdoYXQgaXMgc3VmZmljaWVudGx5IG5vdG9yaW91cywgTyBSb21hbnMsIG9yIGFyZ3VlIHRoYXQgaXQgaXMgbm90IGEKICAgICAgIGN1c3RvbSBoYW5kZWQgZG93biB0byB5b3UgZnJvbSB5b3VyIGFuY2VzdG9ycywgdGhhdCBsYW5kcyBtYXkgYmUgYm91Z2h0IGZyb20gcHJpdmF0ZQogICAgICAgaW5kaXZpZHVhbHMgZm9yIHRoZSBwdXJwb3NlIG9mIHNldHRsaW5nIHBvcnRpb25zIG9mIHRoZSBjb21tb24gcGVvcGxlIGluIHRoZW0gYnkgdGhlIHB1YmxpYwogICAgICAgYXV0aG9yaXR5OyBvciB0aGF0IHRoZXJlIGFyZSBub3QgbWFueSBsYXdzIGJ5IHdoaWNoIHByaXZhdGUgaW5kaXZpZHVhbHMgaGF2ZSBiZWVuIGVzdGFibGlzaGVkCiAgICAgICBpbiB0aGUgcHVibGljIGRvbWFpbnMuIEkgd2lsbCBhZG1pdCB0aGF0IEkgZXhwZWN0ZWQgc29tZXRoaW5nIG9mIHRoaXMgc29ydCBmcm9tIHRoaXMKICAgICAgIGlsbGl0ZXJhdGUgYW5kIGlsbC1tYW5uZXJlZCB0cmlidW5lIG9mIHRoZSBwZW9wbGU7IGJ1dCB0aGlzIG1vc3QgcHJvZml0YWJsZSBhbmQgYXQgdGhlIHNhbWUKICAgICAgIHRpbWUgbW9zdCBkaXNjcmVkaXRhYmxlIHRyYWZmaWMgaW4gYnV5aW5nIGFuZCBzZWxsaW5nLCBJIGhhdmUgYWx3YXlzIHRob3VnaHQgd2hvbGx5CiAgICAgICBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZHV0eSBvZiBhIHRyaWJ1bmUsIHdob2xseSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZGlnbml0eSBvZiB0aGUgUm9tYW4KICAgICAgIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY2IiB1bml0PSJzZWN0aW9uIiAvPiBIZSBvcmRlcnMgdGhhdCBsYW5kcyBiZSBzb2xkLiBGaXJzdCBvZiBhbGwgSSBhc2ssCiAgICAgICBXaGF0IGxhbmRzPyBpbiB3aGF0IHNpdHVhdGlvbnM/IEkgZG8gbm90IHdpc2ggdGhlIFJvbWFuIHBlb3BsZSB0byBiZSBrZXB0IGluIHN1c3BlbnNlIGFuZAogICAgICAgdW5jZXJ0YWludHkgd2l0aCBvYnNjdXJlIGhvcGVzIGFuZCBpZ25vcmFudCBleHBlY3RhdGlvbi4gVGhlcmUgaXMgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMxNzI3IiBrZXk9InRnbiwxMDMxNzI3Ij5BbGJhbjwvcGxhY2VOYW1lPiwgYW5kIHRoZSBTZXRpbm8sIGFuZCB0aGUgUHJpdmVybmF0ZSwgYW5kIHRoZSBGdW5kYW4sIGFuZAogICAgICAgdGhlIFZlc2NpbmUsIGFuZCB0aGUgRmFsZXJuaWFuIGRpc3RyaWN0OyB0aGVyZSBpcyB0aGUgZGlzdHJpY3Qgb2YgTGludGVybnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5MzEiIGtleT0idGduLDcwMDY5MzEiPkN1bWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhc2ludW0iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LiBJIGhlYXIuIEdvaW5nIG91dCBhdCB0aGUgb3RoZXIgZ2F0ZSB0aGVyZSBpcyB0aGUgQ2FwZW5hdGUsIGFuZAogICAgICAgRmFsaXNjYW4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAyMTEyNyIga2V5PSJ0Z24sNzAyMTEyNyI+U2FiaW5lPC9wbGFjZU5hbWU+IHRlcnJpdG9yeTsgdGhlcmUgYXJlIHRoZSBsYW5kcwogICAgICAgb2YgUmVhdGksIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbmFmcnVtIiBrZXk9InBlcnNldXMsVmVuYWZydW0iPlZlbmFmcnVtPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbGxpZmFlIiBrZXk9InBlcnNldXMsQWxsaWZhZSI+QWxsaWZhZTwvcGxhY2VOYW1lPiwgYW5kIFRyZWJ1bGEuIFlvdSBoYXZlIG1vbmV5IGVub3VnaCB0byBiZSBhYmxlIG5vdAogICAgICAgb25seSB0byBidXkgYWxsIHRoZXNlIGxhbmRzIGFuZCBvdGhlcnMgbGlrZSB0aGVtLCBidXQgZXZlbiB0byBzdXJyb3VuZCB0aGVtIHdpdGggYSByaW5nCiAgICAgICBmZW5jZS4gPG1pbGVzdG9uZSBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGRvIHlvdSBub3QgZGVmaW5lIHRoZW0sIG5vciBuYW1lIHRoZW0sIHNvIHRoYXQKICAgICAgIGF0IGxlYXN0IHRoZSBSb21hbiBwZW9wbGUgbWF5IGJlIGFibGUgdG8gY29uc2lkZXIgd2hhdCBpdHMgb3duIGludGVyZXN0cyBhcmUtd2hhdCBpcwogICAgICAgZGVzaXJhYmxlIGZvciBpdOKAlGhvdyBtdWNoIHRydXN0IGl0IHRoaW5rcyBpdCBkZXNpcmFibGUgdG8gcmVwb3NlIGluIHlvdSBpbiB0aGUKICAgICAgIG1hdHRlciBvZiBidXlpbmcgYW5kIHNlbGxpbmcgdGhpbmdzID8gSSBkbyBkZWZpbmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBzYXlzIGhlLiBJdCBpcyBhIGRpc3RyaWN0IHN1ZmZpY2llbnRseSBtYXJrZWQgb3V0LiBJbmRlZWQsIGhvdyBsaXR0bGUKICAgICAgIGRpZmZlcmVuY2UgZG9lcyBpdCBtYWtlIHdoZXRoZXIgeW91IGFyZSBsZWQgZG93biB0byB0aGUgcm9vdHMgb2YgdGhlIE1hc3NpYyBIaWxsLCBvciBpbnRvCiAgICAgICBzb21lIG90aGVyIHBhcnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBvciBzb21ld2hlcmUgZWxzZSEgQ29tZSwKICAgICAgIHlvdSBkbyBub3QgZGVmaW5lIHRoZSBleGFjdCBzcG90LiBXaGF0IGRvIHlvdSBtZWFuPyBEbyB5b3UgbWVhbiB0aGUgbmF0dXJlIG9mIHRoZSBsYW5kPyBCdXQsCiAgICAgICBzYXlzIGhlLCB0aGUgbGF3IGRvZXMgc2F5LCDigJx3aGljaCBjYW4gYmUgcGxvdWdoZWQgb3IgY3VsdGl2YXRlZC7igJ0gV2hpY2gKICAgICAgIGNhbiBiZSBwbG91Z2hlZCBvciBjdWx0aXZhdGVkLCBoZSBzYXlzOyBub3QsIHdoaWNoIGhhcyBiZWVuIHBsb3VnaGVkIG9yIGN1bHRpdmF0ZWQuIElzIHRoaXMKICAgICAgIG5vdyBhIGxhdywgb3IgaXMgaXQgYW4gYWR2ZXJ0aXNlbWVudCBvZiBzb21lIHNhbGUgb2YgTmVyYXRpdXMgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcwogICAgICAgIHVua25vd24gd2hvIHRoaXMgbWFuIHdhcy4gUGVyaGFwcyBzb21lIHB1ZmZpbmcgYXVjdGlvbmVlci48L25vdGU+OyBpbiB3aG9zZSBkZXNjcmlwdGlvbnMKICAgICAgIHBlb3BsZSB1c2VkIHRvIGZpbmQgc3VjaCBzZW50ZW5jZXMgYXMgdGhlc2U64oCU4oCcVHdvIGh1bmRyZWQgYWNyZXMgaW4gd2hpY2gKICAgICAgIGFuIG9saXZlIGdhcmRlbiBtYXkgYmUgbWFkZS4gVGhyZWUgaHVuZHJlZCBhY3JlcyB3aGVyZSB2aW5lcyBjYW4gYmUgcGxhbnRlZC7igJ0gSXMKICAgICAgIHRoaXMgd2hhdCB5b3UgYXJlIGdvaW5nIHRvIGJ1eSB3aXRoIGFsbCB5b3VyIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LOKAlHNvbWV0aGluZwogICAgICAgd2hpY2ggY2FuIGJlIHBsb3VnaGVkIHVwIG9yIGN1bHRpdmF0ZWQ/IFdoeSwgd2hhdCBzb2lsIGlzIHRoZXJlIHNvIHRoaW4gYW5kIG1pc2VyYWJsZSB0aGF0IGl0CiAgICAgICBjYW5ub3QgYmUgYnJva2VuIHVwIGJ5IGEgcGxvdWdoPyBvciB3aGF0IGlzIHRoZXJlIHdoaWNoIGlzIHN1Y2ggYSBjb21wbGV0ZSBiZWQgb2Ygc3RvbmVzIHRoYXQKICAgICAgIHRoZSBza2lsbCBvZiBhbiBhZ3JpY3VsdHVyaXN0IGNhbm5vdCBnZXQgc29tZXRoaW5nIG91dCBvZiBpdD8gT2ggYnV0LCBzYXlzIGhlLCBJIGNhbm5vdCBuYW1lCiAgICAgICBhbnkgbGFuZHMgcG9zaXRpdmVseSwgYmVjYXVzZSBJIHRvdWNoIG5vbmUgYWdhaW5zdCB0aGUgd2lsbCBvZiB0aGUgb3duZXIuIFRoaXMgYWxzbyBpcyBtdWNoCiAgICAgICBtb3JlIHByb2ZpdGFibGUgdGhhbiBpZiBvbmUgdG9vayBsYW5kIGZyb20gYSBtYW4gYWdhaW5zdCBoaXMgd2lsbC4gRm9yIGEgY2FsY3VsYXRpb24gb2YgZ2FpbgogICAgICAgd2lsbCBiZSBlbnRlcmVkIGludG8gd2l0aCByZWZlcmVuY2UgdG8geW91ciBtb25leSwgYW5kIHRoZW4gb25seSB3aWxsIGxhbmQgYmUgc29sZCB3aGVuIHRoZQogICAgICAgc2FsZSBpcyBhZHZhbnRhZ2VvdXMgdG8gYm90aCBidXllciBhbmQgc2VsbGVyLiA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNjgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.25.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgb3JkZXJzIHRoYXQgbGFuZHMgYmUgc29sZC4gRmlyc3Qgb2YgYWxsIEkgYXNrLAogICAgICAgV2hhdCBsYW5kcz8gaW4gd2hhdCBzaXR1YXRpb25zPyBJIGRvIG5vdCB3aXNoIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUga2VwdCBpbiBzdXNwZW5zZSBhbmQKICAgICAgIHVuY2VydGFpbnR5IHdpdGggb2JzY3VyZSBob3BlcyBhbmQgaWdub3JhbnQgZXhwZWN0YXRpb24uIFRoZXJlIGlzIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAzMTcyNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDMxNzI3Ij5BbGJhbjwvcGxhY2VOYW1lPiwgYW5kIHRoZSBTZXRpbm8sIGFuZCB0aGUgUHJpdmVybmF0ZSwgYW5kIHRoZSBGdW5kYW4sIGFuZAogICAgICAgdGhlIFZlc2NpbmUsIGFuZCB0aGUgRmFsZXJuaWFuIGRpc3RyaWN0OyB0aGVyZSBpcyB0aGUgZGlzdHJpY3Qgb2YgTGludGVybnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjkzMSI+Q3VtYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FzaW51bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPi4gSSBoZWFyLiBHb2luZyBvdXQgYXQgdGhlIG90aGVyIGdhdGUgdGhlcmUgaXMgdGhlIENhcGVuYXRlLCBhbmQKICAgICAgIEZhbGlzY2FuLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMjExMjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAyMTEyNyI+U2FiaW5lPC9wbGFjZU5hbWU+IHRlcnJpdG9yeTsgdGhlcmUgYXJlIHRoZSBsYW5kcwogICAgICAgb2YgUmVhdGksIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFZlbmFmcnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxWZW5hZnJ1bSI+VmVuYWZydW08L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFsbGlmYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFsbGlmYWUiPkFsbGlmYWU8L3BsYWNlTmFtZT4sIGFuZCBUcmVidWxhLiBZb3UgaGF2ZSBtb25leSBlbm91Z2ggdG8gYmUgYWJsZSBub3QKICAgICAgIG9ubHkgdG8gYnV5IGFsbCB0aGVzZSBsYW5kcyBhbmQgb3RoZXJzIGxpa2UgdGhlbSwgYnV0IGV2ZW4gdG8gc3Vycm91bmQgdGhlbSB3aXRoIGEgcmluZwogICAgICAgZmVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.25.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz4gV2h5IGRvIHlvdSBub3QgZGVmaW5lIHRoZW0sIG5vciBuYW1lIHRoZW0sIHNvIHRoYXQKICAgICAgIGF0IGxlYXN0IHRoZSBSb21hbiBwZW9wbGUgbWF5IGJlIGFibGUgdG8gY29uc2lkZXIgd2hhdCBpdHMgb3duIGludGVyZXN0cyBhcmUtd2hhdCBpcwogICAgICAgZGVzaXJhYmxlIGZvciBpdOKAlGhvdyBtdWNoIHRydXN0IGl0IHRoaW5rcyBpdCBkZXNpcmFibGUgdG8gcmVwb3NlIGluIHlvdSBpbiB0aGUKICAgICAgIG1hdHRlciBvZiBidXlpbmcgYW5kIHNlbGxpbmcgdGhpbmdzID8gSSBkbyBkZWZpbmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHNheXMgaGUuIEl0IGlzIGEgZGlzdHJpY3Qgc3VmZmljaWVudGx5IG1hcmtlZCBvdXQuIEluZGVlZCwgaG93IGxpdHRsZQogICAgICAgZGlmZmVyZW5jZSBkb2VzIGl0IG1ha2Ugd2hldGhlciB5b3UgYXJlIGxlZCBkb3duIHRvIHRoZSByb290cyBvZiB0aGUgTWFzc2ljIEhpbGwsIG9yIGludG8KICAgICAgIHNvbWUgb3RoZXIgcGFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgb3Igc29tZXdoZXJlIGVsc2UhIENvbWUsCiAgICAgICB5b3UgZG8gbm90IGRlZmluZSB0aGUgZXhhY3Qgc3BvdC4gV2hhdCBkbyB5b3UgbWVhbj8gRG8geW91IG1lYW4gdGhlIG5hdHVyZSBvZiB0aGUgbGFuZD8gQnV0LAogICAgICAgc2F5cyBoZSwgdGhlIGxhdyBkb2VzIHNheSwg4oCcd2hpY2ggY2FuIGJlIHBsb3VnaGVkIG9yIGN1bHRpdmF0ZWQu4oCdIFdoaWNoCiAgICAgICBjYW4gYmUgcGxvdWdoZWQgb3IgY3VsdGl2YXRlZCwgaGUgc2F5czsgbm90LCB3aGljaCBoYXMgYmVlbiBwbG91Z2hlZCBvciBjdWx0aXZhdGVkLiBJcyB0aGlzCiAgICAgICBub3cgYSBsYXcsIG9yIGlzIGl0IGFuIGFkdmVydGlzZW1lbnQgb2Ygc29tZSBzYWxlIG9mIE5lcmF0aXVzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5JdCBpcwogICAgICAgIHVua25vd24gd2hvIHRoaXMgbWFuIHdhcy4gUGVyaGFwcyBzb21lIHB1ZmZpbmcgYXVjdGlvbmVlci48L25vdGU+OyBpbiB3aG9zZSBkZXNjcmlwdGlvbnMKICAgICAgIHBlb3BsZSB1c2VkIHRvIGZpbmQgc3VjaCBzZW50ZW5jZXMgYXMgdGhlc2U64oCU4oCcVHdvIGh1bmRyZWQgYWNyZXMgaW4gd2hpY2gKICAgICAgIGFuIG9saXZlIGdhcmRlbiBtYXkgYmUgbWFkZS4gVGhyZWUgaHVuZHJlZCBhY3JlcyB3aGVyZSB2aW5lcyBjYW4gYmUgcGxhbnRlZC7igJ0gSXMKICAgICAgIHRoaXMgd2hhdCB5b3UgYXJlIGdvaW5nIHRvIGJ1eSB3aXRoIGFsbCB5b3VyIGNvdW50bGVzcyBzdW1zIG9mIG1vbmV5LOKAlHNvbWV0aGluZwogICAgICAgd2hpY2ggY2FuIGJlIHBsb3VnaGVkIHVwIG9yIGN1bHRpdmF0ZWQ/IFdoeSwgd2hhdCBzb2lsIGlzIHRoZXJlIHNvIHRoaW4gYW5kIG1pc2VyYWJsZSB0aGF0IGl0CiAgICAgICBjYW5ub3QgYmUgYnJva2VuIHVwIGJ5IGEgcGxvdWdoPyBvciB3aGF0IGlzIHRoZXJlIHdoaWNoIGlzIHN1Y2ggYSBjb21wbGV0ZSBiZWQgb2Ygc3RvbmVzIHRoYXQKICAgICAgIHRoZSBza2lsbCBvZiBhbiBhZ3JpY3VsdHVyaXN0IGNhbm5vdCBnZXQgc29tZXRoaW5nIG91dCBvZiBpdD8gT2ggYnV0LCBzYXlzIGhlLCBJIGNhbm5vdCBuYW1lCiAgICAgICBhbnkgbGFuZHMgcG9zaXRpdmVseSwgYmVjYXVzZSBJIHRvdWNoIG5vbmUgYWdhaW5zdCB0aGUgd2lsbCBvZiB0aGUgb3duZXIuIFRoaXMgYWxzbyBpcyBtdWNoCiAgICAgICBtb3JlIHByb2ZpdGFibGUgdGhhbiBpZiBvbmUgdG9vayBsYW5kIGZyb20gYSBtYW4gYWdhaW5zdCBoaXMgd2lsbC4gRm9yIGEgY2FsY3VsYXRpb24gb2YgZ2FpbgogICAgICAgd2lsbCBiZSBlbnRlcmVkIGludG8gd2l0aCByZWZlcmVuY2UgdG8geW91ciBtb25leSwgYW5kIHRoZW4gb25seSB3aWxsIGxhbmQgYmUgc29sZCB3aGVuIHRoZQogICAgICAgc2FsZSBpcyBhZHZhbnRhZ2VvdXMgdG8gYm90aCBidXllciBhbmQgc2VsbGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.26.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBub3cgc2VlIHRoZSBmb3JjZSBvZiB0aGlzIGFncmFyaWFuIGxhdy4gRXZlbiB0aG9zZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZQogICAgICAgcHVibGljIGRvbWFpbnMgd2lsbCBub3QgcXVpdCBwb3NzZXNzaW9uLCB1bmxlc3MgdGhleSBhcmUgdGVtcHRlZCBieSBmYXZvdXJhYmxlIGNvbmRpdGlvbnMgYW5kCiAgICAgICBieSBhIGxhcmdlIHN1bSBvZiBtb25leS4gTWF0dGVycyBhcmUgY2hhbmdlZC4gRm9ybWVybHkgd2hlbiBtZW50aW9uIG9mIGFuIGFncmFyaWFuIGxhdyB3YXMKICAgICAgIG1hZGUgYnkgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGltbWVkaWF0ZWx5IGV2ZXJ5IG9uZSB3aG8gd2FzIGluIG9jY3VwYXRpb24gb2YgYW55IHB1YmxpYwogICAgICAgbGFuZHMsIG9yIHdobyBoYWQgYW55IHBvc3Nlc3Npb25zIHRoZSB0ZW51cmUgb2Ygd2hpY2ggd2FzIGluIHRoZSBsZWFzdCB1bnBvcHVsYXIsIGJlZ2FuIHRvIGJlCiAgICAgICBhbGFybWVkLiBCdXQgdGhpcyBsYXcgZW5yaWNoZXMgdGhvc2UgbWVuIHdpdGggZm9ydHVuZXMsIGFuZCByZWxpZXZlcyB0aGVtIGZyb20gdW5wb3B1bGFyaXR5LgogICAgICAgRm9yIGhvdyBtYW55IG1lbiwgTyBSb21hbnMsIGRvIHlvdSBzdXBwb3NlIHRoZXJlIGFyZSwgd2hvIGFyZSB1bmFibGUgdG8gc3RhbmQgdW5kZXIgdGhlCiAgICAgICBleHRlbnQgb2YgdGhlaXIgcG9zc2Vzc2lvbnMsIHdobyBhcmUgdW5hYmxlIHRvIGJlYXIgdGhlIHVucG9wdWxhcml0eSBpbmN1cnJlZCBieSB0aGUKICAgICAgIG93bmVyc2hpcCBvZiBsYW5kcyBncmFudGVkIGJ5IFN1bGxhPyB3aG8gd2lzaCB0byBzZWxsIHRoZW0sIGJ1dCBjYW5ub3QgZmluZCBhIHB1cmNoYXNlcj8gd2hvLAogICAgICAgaW4gZmFjdCwgd291bGQgYmUgZ2xhZCB0byBnZXQgcmlkIG9mIHRob3NlIGxhbmRzIGJ5IGFueSBtZWFucyB3aGF0ZXZlcj8gVGhleSB3aG8sIGEgbGl0dGxlCiAgICAgICB3aGlsZSBhZ28sIHdlcmUgaW4gY29uc3RhbnQgZHJlYWQsIGRheSBhbmQgbmlnaHQsIG9mIHRoZSBuYW1lIG9mIGEgdHJpYnVuZTsgd2hvIGZlYXJlZCB5b3VyCiAgICAgICBwb3dlciwgZHJlYWRlZCBldmVyeSBtZW50aW9uIG9mIGFuIGFncmFyaWFuIGxhdzsgdGhleSBub3cgd2lsbCBiZSBiZWdnZWQgYW5kIGVudHJlYXRlZCB0byBoZQogICAgICAgc28gZ29vZCBhcyB0byBnaXZlIHVwIHRvIHRoZSBkZWNlbXZpcnMgdGhvc2UgbGFuZHMgd2hpY2ggYXJlIHBhcnRseSBwdWJsaWMgcHJvcGVydHksIHRoZQogICAgICAgcG9zc2Vzc2lvbiBvZiB3aGljaCBpcyBmdWxsIG9mIHVucG9wdWxhcml0eSBhbmQgZGFuZ2VyLCBhdCB0aGVpciBvd24gcHJpY2UuIEFuZCB0aGlzIHNvbmcKICAgICAgIHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIGlzIHNpbmdpbmcgbm93LCBub3QgdG8geWVsbCwgYnV0IGluIGhpcyBvd24gaGVhcnQgdG8gaGltc2VsZi4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjkiIHVuaXQ9InNlY3Rpb24iIC8+IEhlIGhhcyBhIGZhdGhlci1pbi1sYXcsIGEgbW9zdCBleGNlbGxlbnQgbWFuLCB3aG8gaW4KICAgICAgIHRob3NlIGRhcmsgdGltZXMgb2YgdGhlIHJlcHVibGljIGdvdCBhcyBtdWNoIGxhbmQgYXMgaGUgd2FudGVkLiBIZSBub3cgc2VlaW5nIGhpbSB5aWVsZGluZywKICAgICAgIG9wcHJlc3NlZCB3ZWlnaGVkIGRvd24gd2l0aCB0aGUgYnVyZGVucyB3aGljaCBTdWxsYSBwdXQgdXBvbiBoaW0sIHdpc2hlcyB0byBjb21lIHRvIGhpcwogICAgICAgYXNzaXN0YW5jZSB3aXRoIHRoaXMgbGF3IG9mIGhpcywgc28gYXMgdG8gZW5hYmxlIGhpbSB0byBnZXQgcmlkIG9mIHRoZSBvZGl1bSBhdHRhY2hlZCB0byBoaW0sCiAgICAgICBhbmQgdG8gZ2V0IGEgc3VtIG9mIG1vbmV5IHRvby4gQW5kIHdpbGwgbm90IHlvdSBoZXNpdGF0ZSB0byBzZWxsIHlvdXIgcmV2ZW51ZXMsIGFjcXVpcmVkIGJ5CiAgICAgICB0aGUgcHJvZnVzZSBleHBlbmRpdHVyZSBvZiBsYWJvdXIgYW5kIGJsb29kIG9uIHRoZSBwYXJ0IG9mIHlvdXIgYW5jZXN0b3JzLCBmb3IgdGhlIHB1cnBvc2Ugb2YKICAgICAgIGhlYXBpbmcgbW9yZSByaWNoZXMgb24gdGhlIGxhbmRvd25lcnMgd2hvIGhhdmUgYmVjb21lIHNvIHRocm91Z2ggU3VsbGEsIGFuZCBvZiByZWxlYXNpbmcgdGhlbQogICAgICAgZnJvbSBkYW5nZXI/IDxtaWxlc3RvbmUgbj0iNzAiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciB0aGVyZSBhcmUgdHdvIGtpbmRzIG9mIGxhbmRzIGNvbmNlcm5lZCwgTwogICAgICAgUm9tYW5zLCBpbiB0aGlzIHB1cmNoYXNlIG9mIHRoZSBkZWNlbXZpcnMuIE9uZSBvZiB0aGVtIHRoZSBvd25lcnMgYXZvaWQgb24gYWNjb3VudCBvZiBpdHMKICAgICAgIHVucG9wdWxhcml0eTsgdGhlIG90aGVyIG9uIGFjY291bnQgb2YgaXRzIG1pc2VyYWJsZSBjb25kaXRpb24uIFRoZSBsYW5kIHNlaXplZCBhbmQKICAgICAgIGRpc3RyaWJ1dGVkIGJ5IFN1bGxhLCBhbmQgZXh0ZW5kZWQgYXMgZmFyIGFzIHBvc3NpYmxlIGJ5IHBhcnRpY3VsYXIgaW5kaXZpZHVhbHMsIGhhcyBzbyBtdWNoCiAgICAgICB1bnBvcHVsYXJpdHkgYXR0YWNoZWQgdG8gaXQsIHRoYXQgaXQgY2Fubm90IGJlYXIgdGhlIHJ1c3RsZSBvZiBhIGdlbnVpbmUgZmVhcmxlc3MgdHJpYnVuZSBvZgogICAgICAgdGhlIHBlb3BsZS4gQWxsIHRoaXMgbGFuZCwgYXQgd2hhdGV2ZXIgcHJpY2UgaXQgaXMgcHVyY2hhc2VkLCB3aWxsIGJlIHJldHVybmVkIHRvIHlvdSBhdCBhCiAgICAgICBncmVhdCBwcmljZS4gVGhlcmUgaXMgYW5vdGhlciBzb3J0IG9mIGxhbmRz4oCUdW5jdWx0aXZhdGVkIG9uIGFjY291bnQgb2YgdGhlaXIKICAgICAgIGJhcnJlbm5lc3MsIGRlc29sYXRlIGFuZCBkZXNlcnRlZCBvbiBhY2NvdW50IG9mIHRoZSB1bmhlYWx0aGluZXNzIG9mIHRoZQogICAgICAgc2l0dWF0aW9u4oCUd2hpY2ggd2lsbCBiZSBib3VnaHQgb2YgdGhvc2UgbWVuLCB3aG8gc2VlIHRoYXQgdGhleSBtdXN0IGFiYW5kb24gdGhlbSBpZgogICAgICAgdGhleSBkbyBub3Qgc2VsbCB0aGVtLiBBbmQgaW4gdHJ1dGgsIHRoYXQgaXMgd2hhdCB3YXMgc2FpZCBieSB0aGlzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBpbgogICAgICAgdGhlIHNlbmF0ZSzigJR0aGF0IHRoZSBjb21tb24gcGVvcGxlIG9mIHRoZSBjaXR5IGhhZCB0b28gbXVjaCBpbmZsdWVuY2UgaW4gdGhlCiAgICAgICByZXB1YmxpYzsgdGhhdCBpdCBtdXN0IGJlIGRyYWluZWQgb2ZmLiBGb3IgdGhpcyBpcyB0aGUgZXhwcmVzc2lvbiB3aGljaCBoZSB1c2VkOyBhcyBpZiBoZQogICAgICAgd2VyZSBzcGVha2luZyBvZiBzb21lIHNld2VyLCBhbmQgbm90IG9mIGEgY2xhc3Mgb2YgZXhjZWxsZW50IGNpdGl6ZW5zLiA8bWlsZXN0b25lIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNzEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.26.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz4gSGUgaGFzIGEgZmF0aGVyLWluLWxhdywgYSBtb3N0IGV4Y2VsbGVudCBtYW4sIHdobyBpbgogICAgICAgdGhvc2UgZGFyayB0aW1lcyBvZiB0aGUgcmVwdWJsaWMgZ290IGFzIG11Y2ggbGFuZCBhcyBoZSB3YW50ZWQuIEhlIG5vdyBzZWVpbmcgaGltIHlpZWxkaW5nLAogICAgICAgb3BwcmVzc2VkIHdlaWdoZWQgZG93biB3aXRoIHRoZSBidXJkZW5zIHdoaWNoIFN1bGxhIHB1dCB1cG9uIGhpbSwgd2lzaGVzIHRvIGNvbWUgdG8gaGlzCiAgICAgICBhc3Npc3RhbmNlIHdpdGggdGhpcyBsYXcgb2YgaGlzLCBzbyBhcyB0byBlbmFibGUgaGltIHRvIGdldCByaWQgb2YgdGhlIG9kaXVtIGF0dGFjaGVkIHRvIGhpbSwKICAgICAgIGFuZCB0byBnZXQgYSBzdW0gb2YgbW9uZXkgdG9vLiBBbmQgd2lsbCBub3QgeW91IGhlc2l0YXRlIHRvIHNlbGwgeW91ciByZXZlbnVlcywgYWNxdWlyZWQgYnkKICAgICAgIHRoZSBwcm9mdXNlIGV4cGVuZGl0dXJlIG9mIGxhYm91ciBhbmQgYmxvb2Qgb24gdGhlIHBhcnQgb2YgeW91ciBhbmNlc3RvcnMsIGZvciB0aGUgcHVycG9zZSBvZgogICAgICAgaGVhcGluZyBtb3JlIHJpY2hlcyBvbiB0aGUgbGFuZG93bmVycyB3aG8gaGF2ZSBiZWNvbWUgc28gdGhyb3VnaCBTdWxsYSwgYW5kIG9mIHJlbGVhc2luZyB0aGVtCiAgICAgICBmcm9tIGRhbmdlcj8gPC90cmFuc2xhdGlvbj4="
translation['2.26.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHRoZXJlIGFyZSB0d28ga2luZHMgb2YgbGFuZHMgY29uY2VybmVkLCBPCiAgICAgICBSb21hbnMsIGluIHRoaXMgcHVyY2hhc2Ugb2YgdGhlIGRlY2Vtdmlycy4gT25lIG9mIHRoZW0gdGhlIG93bmVycyBhdm9pZCBvbiBhY2NvdW50IG9mIGl0cwogICAgICAgdW5wb3B1bGFyaXR5OyB0aGUgb3RoZXIgb24gYWNjb3VudCBvZiBpdHMgbWlzZXJhYmxlIGNvbmRpdGlvbi4gVGhlIGxhbmQgc2VpemVkIGFuZAogICAgICAgZGlzdHJpYnV0ZWQgYnkgU3VsbGEsIGFuZCBleHRlbmRlZCBhcyBmYXIgYXMgcG9zc2libGUgYnkgcGFydGljdWxhciBpbmRpdmlkdWFscywgaGFzIHNvIG11Y2gKICAgICAgIHVucG9wdWxhcml0eSBhdHRhY2hlZCB0byBpdCwgdGhhdCBpdCBjYW5ub3QgYmVhciB0aGUgcnVzdGxlIG9mIGEgZ2VudWluZSBmZWFybGVzcyB0cmlidW5lIG9mCiAgICAgICB0aGUgcGVvcGxlLiBBbGwgdGhpcyBsYW5kLCBhdCB3aGF0ZXZlciBwcmljZSBpdCBpcyBwdXJjaGFzZWQsIHdpbGwgYmUgcmV0dXJuZWQgdG8geW91IGF0IGEKICAgICAgIGdyZWF0IHByaWNlLiBUaGVyZSBpcyBhbm90aGVyIHNvcnQgb2YgbGFuZHPigJR1bmN1bHRpdmF0ZWQgb24gYWNjb3VudCBvZiB0aGVpcgogICAgICAgYmFycmVubmVzcywgZGVzb2xhdGUgYW5kIGRlc2VydGVkIG9uIGFjY291bnQgb2YgdGhlIHVuaGVhbHRoaW5lc3Mgb2YgdGhlCiAgICAgICBzaXR1YXRpb27igJR3aGljaCB3aWxsIGJlIGJvdWdodCBvZiB0aG9zZSBtZW4sIHdobyBzZWUgdGhhdCB0aGV5IG11c3QgYWJhbmRvbiB0aGVtIGlmCiAgICAgICB0aGV5IGRvIG5vdCBzZWxsIHRoZW0uIEFuZCBpbiB0cnV0aCwgdGhhdCBpcyB3aGF0IHdhcyBzYWlkIGJ5IHRoaXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIGluCiAgICAgICB0aGUgc2VuYXRlLOKAlHRoYXQgdGhlIGNvbW1vbiBwZW9wbGUgb2YgdGhlIGNpdHkgaGFkIHRvbyBtdWNoIGluZmx1ZW5jZSBpbiB0aGUKICAgICAgIHJlcHVibGljOyB0aGF0IGl0IG11c3QgYmUgZHJhaW5lZCBvZmYuIEZvciB0aGlzIGlzIHRoZSBleHByZXNzaW9uIHdoaWNoIGhlIHVzZWQ7IGFzIGlmIGhlCiAgICAgICB3ZXJlIHNwZWFraW5nIG9mIHNvbWUgc2V3ZXIsIGFuZCBub3Qgb2YgYSBjbGFzcyBvZiBleGNlbGxlbnQgY2l0aXplbnMuIDwvdHJhbnNsYXRpb24+"
translation['2.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.27.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBkbyB5b3UsIE8gUm9tYW5zLCBpZiB5b3Ugd2lsbCBiZSBndWlkZWQgYnkgbWUsIHByZXNlcnZlIHlvdXIgcHJlc2VudCBwb3NzZXNzaW9uIG9mCiAgICAgICBwb3B1bGFyaXR5LCBvZiBsaWJlcnR5LCBvZiB5b3VyIHZvdGVzLCBvZiB5b3VyIGRpZ25pdHksIG9mIHRoZSBjaXR5LCBvZiB0aGUgZm9ydW0sIG9mIHRoZQogICAgICAgZ2FtZXMsIG9mIHRoZSBkYXlzIG9mIGZlc3RpdmFscywgYW5kIG9mIGFsbCB5b3VyIG90aGVyIGVuam95bWVudHMuIFVubGVzcywgYnkgY2hhbmNlLCB5b3UKICAgICAgIHByZWZlciBsZWF2aW5nIGFsbCB0aGVzZSB0aGluZ3MgYW5kIHRoaXMgbGlnaHQgb2YgdGhlIHJlcHVibGljLCB0byBiZSBzZXR0bGVkIGluIHRoZSBtaWRzdCBvZgogICAgICAgdGhlIGRyb3VnaHRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2lwb250dW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNpcG9udHVtIj5TaXBvbnR1bTwvcGxhY2VOYW1lPiwgb3IgaW4gdGhlCiAgICAgICBwZXN0aWxlbnRpYWwgZGlzdHJpY3RzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU2FsYXBpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU2FsYXBpYSI+U2FsYXBpYTwvcGxhY2VOYW1lPiwgdW5kZXIgdGhlCiAgICAgICBsZWFkZXJzaGlwIG9mIFJ1bGx1cy4gQnV0IGxldCBoaW0gdGVsbCB1cyB3aGF0IGxhbmRzIGhlIGlzIGdvaW5nIHRvIGJ1eTsgbGV0IGhpbSBzaG93IHdoYXQgaGUKICAgICAgIGlzIGdvaW5nIHRvIGdpdmUsIGFuZCB0byB3aG9tIGhlIGlzIGdvaW5nIHRvIGdpdmUgaXQuIEJ1dCBjYW4geW91IHBvc3NpYmx5LCB0ZWxsIG1lLCBhbGxvdwogICAgICAgaGltIHRoZSBwb3dlciBvZiBzZWxsaW5nIGFueSBpbWFnaW5hYmxlIGNpdHksIG9yIGxhbmQsIG9yIHJldmVudWUsIG9yIGtpbmdkb20gdGhhdCBoZSBsaWtlcywKICAgICAgIGFuZCB0aGVuIGJ1eWluZyBzb21lIHRyYWN0IG9mIHNhbmQgb3Igc29tZSBzd2FtcD8gQWx0aG91Z2ggdGhpcyBpcyBhIHZlcnkgcmVtYXJrYWJsZSBwb2ludCwKICAgICAgIHRoYXQgYWNjb3JkaW5nIHRvIHRoaXMgbGF3IGV2ZXJ5dGhpbmcgaXMgdG8gYmUgc29sZCwgYWxsIHRoZSBtb25leSBpcyB0byBiZSBjb2xsZWN0ZWQgYW5kCiAgICAgICBhbWFzc2VkIHRvZ2V0aGVyLCBiZWZvcmUgb25lIHBlcmNoIG9mIGdyb3VuZCBpcyBib3VnaHQuIFRoZW4gdGhlIGxhdyBvcmRlcnMgaGltIHRvIHByb2NlZWQgdG8KICAgICAgIGJ1eTsgYnV0IGZvcmJpZHMgYW55IHB1cmNoYXNlcyB0byBiZSBtYWRlIGFnYWluc3QgdGhlIGluY2xpbmF0aW9uIG9yIHRoZSBvd25lci4gPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNpcG9udHVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTaXBvbnR1bSI+U2lwb250dW08L3BsYWNlTmFtZT4sIG9yIGluIHRoZQogICAgICAgcGVzdGlsZW50aWFsIGRpc3RyaWN0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNhbGFwaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNhbGFwaWEiPlNhbGFwaWE8L3BsYWNlTmFtZT4sIHVuZGVyIHRoZQogICAgICAgbGVhZGVyc2hpcCBvZiBSdWxsdXMuIEJ1dCBsZXQgaGltIHRlbGwgdXMgd2hhdCBsYW5kcyBoZSBpcyBnb2luZyB0byBidXk7IGxldCBoaW0gc2hvdyB3aGF0IGhlCiAgICAgICBpcyBnb2luZyB0byBnaXZlLCBhbmQgdG8gd2hvbSBoZSBpcyBnb2luZyB0byBnaXZlIGl0LiBCdXQgY2FuIHlvdSBwb3NzaWJseSwgdGVsbCBtZSwgYWxsb3cKICAgICAgIGhpbSB0aGUgcG93ZXIgb2Ygc2VsbGluZyBhbnkgaW1hZ2luYWJsZSBjaXR5LCBvciBsYW5kLCBvciByZXZlbnVlLCBvciBraW5nZG9tIHRoYXQgaGUgbGlrZXMsCiAgICAgICBhbmQgdGhlbiBidXlpbmcgc29tZSB0cmFjdCBvZiBzYW5kIG9yIHNvbWUgc3dhbXA/IEFsdGhvdWdoIHRoaXMgaXMgYSB2ZXJ5IHJlbWFya2FibGUgcG9pbnQsCiAgICAgICB0aGF0IGFjY29yZGluZyB0byB0aGlzIGxhdyBldmVyeXRoaW5nIGlzIHRvIGJlIHNvbGQsIGFsbCB0aGUgbW9uZXkgaXMgdG8gYmUgY29sbGVjdGVkIGFuZAogICAgICAgYW1hc3NlZCB0b2dldGhlciwgYmVmb3JlIG9uZSBwZXJjaCBvZiBncm91bmQgaXMgYm91Z2h0LiBUaGVuIHRoZSBsYXcgb3JkZXJzIGhpbSB0byBwcm9jZWVkIHRvCiAgICAgICBidXk7IGJ1dCBmb3JiaWRzIGFueSBwdXJjaGFzZXMgdG8gYmUgbWFkZSBhZ2FpbnN0IHRoZSBpbmNsaW5hdGlvbiBvciB0aGUgb3duZXIuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjcyIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFzayBub3csIHN1cHBvc2UgdGhlcmUgaXMgbm8gb25lIHdobyBpcyB3aWxsaW5nIHRvCiAgICAgICBzZWxsLCB3aGF0IGlzIHRvIGJlY29tZSBvZiB0aGUgbW9uZXk/IFRoZSBsYXcgc2F5cyBpdCBpcyBub3QgdG8gYmUgYnJvdWdodCBpbnRvIHRoZSB0cmVhc3VyeS4KICAgICAgIEl0IGZvcmJpZHMgaXRzIGJlaW5nIHJlZnVuZGVkLiBUaGUgZGVjZW12aXJzLCB0aGVuLCB3aWxsIGtlZXAgYWxsIHRoYXQgbW9uZXkuIExhbmQgd2lsbCBub3QKICAgICAgIGJlIGJvdWdodCBmb3IgeW91LiBBZnRlciBoYXZpbmcgYWxpZW5hdGVkIHlvdXIgcmV2ZW51ZXMsIGhhcmFzc2VkIHlvdXIgYWxsaWVzLCBkcmFpbmVkIHRoZQogICAgICAgY29uZmVkZXJhdGUga2luZ3MgYW5kIGFsbCBuYXRpb25zIG9mIHRoZWlyIHdob2xlIHByb3BlcnR5LCB0aGV5IHdpbGwgaGF2ZSB0aGUgbW9uZXksIGFuZCB5b3UKICAgICAgIHdpbGwgbm90IGhhdmUgdGhlIGxhbmRzLiBPaCwgc2F5cyBoZSwgdGhleSB3aWxsIGVhc2lseSBiZSBpbmR1Y2VkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgdGhlCiAgICAgICBzdW1zIG9mZmVyZWQgdG8gc2VsbCB0aGUgbGFuZHMuIFRoZW4gdGhlIGVmZmVjdCBvZiB0aGUgbGF3IGlzIHRvIGJlIHRodXM6IHRoYXQgd2UgYXJlIHRvIHNlbGwKICAgICAgIG91ciBwcm9wZXJ0eSBhdCB3aGF0ZXZlciBwcmljZSB3ZSBjYW4gZ2V0IGZvciBpdDsgYW5kIHRoYXQgd2UgYXJlIHRvIGJ1eSBvdGhlciBtZW4ncyBwcm9wZXJ0eQogICAgICAgYXQgd2hhdGV2ZXIgcHJpY2UgdGhleSBjaG9vc2UgdG8gcHV0IHVwb24gaXQuIDxtaWxlc3RvbmUgbj0iNzMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBkb2VzIHRoZQogICAgICAgbGF3IG9yZGVyIG1lbiB0byBiZSBjb25kdWN0ZWQgYXMgc2V0dGxlcnMgYnkgdGhvc2UgZGVjZW12aXJzLCBpbnRvIHRob3NlIGxhbmRzIHdoaWNoIGhhdmUKICAgICAgIGJlZW4gYm91Z2h0IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGlzIGxhdz8gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.27.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhc2sgbm93LCBzdXBwb3NlIHRoZXJlIGlzIG5vIG9uZSB3aG8gaXMgd2lsbGluZyB0bwogICAgICAgc2VsbCwgd2hhdCBpcyB0byBiZWNvbWUgb2YgdGhlIG1vbmV5PyBUaGUgbGF3IHNheXMgaXQgaXMgbm90IHRvIGJlIGJyb3VnaHQgaW50byB0aGUgdHJlYXN1cnkuCiAgICAgICBJdCBmb3JiaWRzIGl0cyBiZWluZyByZWZ1bmRlZC4gVGhlIGRlY2VtdmlycywgdGhlbiwgd2lsbCBrZWVwIGFsbCB0aGF0IG1vbmV5LiBMYW5kIHdpbGwgbm90CiAgICAgICBiZSBib3VnaHQgZm9yIHlvdS4gQWZ0ZXIgaGF2aW5nIGFsaWVuYXRlZCB5b3VyIHJldmVudWVzLCBoYXJhc3NlZCB5b3VyIGFsbGllcywgZHJhaW5lZCB0aGUKICAgICAgIGNvbmZlZGVyYXRlIGtpbmdzIGFuZCBhbGwgbmF0aW9ucyBvZiB0aGVpciB3aG9sZSBwcm9wZXJ0eSwgdGhleSB3aWxsIGhhdmUgdGhlIG1vbmV5LCBhbmQgeW91CiAgICAgICB3aWxsIG5vdCBoYXZlIHRoZSBsYW5kcy4gT2gsIHNheXMgaGUsIHRoZXkgd2lsbCBlYXNpbHkgYmUgaW5kdWNlZCBieSB0aGUgbWFnbml0dWRlIG9mIHRoZQogICAgICAgc3VtcyBvZmZlcmVkIHRvIHNlbGwgdGhlIGxhbmRzLiBUaGVuIHRoZSBlZmZlY3Qgb2YgdGhlIGxhdyBpcyB0byBiZSB0aHVzOiB0aGF0IHdlIGFyZSB0byBzZWxsCiAgICAgICBvdXIgcHJvcGVydHkgYXQgd2hhdGV2ZXIgcHJpY2Ugd2UgY2FuIGdldCBmb3IgaXQ7IGFuZCB0aGF0IHdlIGFyZSB0byBidXkgb3RoZXIgbWVuJ3MgcHJvcGVydHkKICAgICAgIGF0IHdoYXRldmVyIHByaWNlIHRoZXkgY2hvb3NlIHRvIHB1dCB1cG9uIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.27.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGRvZXMgdGhlCiAgICAgICBsYXcgb3JkZXIgbWVuIHRvIGJlIGNvbmR1Y3RlZCBhcyBzZXR0bGVycyBieSB0aG9zZSBkZWNlbXZpcnMsIGludG8gdGhvc2UgbGFuZHMgd2hpY2ggaGF2ZQogICAgICAgYmVlbiBib3VnaHQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBwcm92aXNpb25zIG9mIHRoaXMgbGF3PyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQ/IElzIG5vdCB0aGUgd2hvbGUgcGxhbiBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgaXQgZG9lcyBub3QgbWFrZSBhbnkgZGlmZmVyZW5jZSB0byB0aGUKICAgICAgIHJlcHVibGljIHdoZXRoZXIgYSBjb2xvbnkgaXMgbGVkIGludG8gdGhhdCBwbGFjZSBvciBub3Q/IElzIGl0IGEgcGxhY2Ugd2hpY2ggcmVxdWlyZXMgYQogICAgICAgY29sb255PyBbYSBwbGFjZSB3aGljaCByZWZ1c2VzIG9uZT9dIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqKiIgLz5BbmQgaW4gdGhpcyBjbGFzcyBvZiBwbGFjZXMsIGFzIGluIHRoZSBvdGhlciBwYXJ0cyBvZiB0aGUKICAgICAgIHJlcHVibGljLCBpdCBpcyB3b3J0aHdoaWxlIHRvIHJlY29sbGVjdCB0aGUgZGlsaWdlbmNlIGV4aGliaXRlZCBieSBvdXIgYW5jZXN0b3JzOyB3aG8KICAgICAgIGVzdGFibGlzaGVkIGNvbG9uaWVzIGluIHN1Y2ggc3VpdGFibGUgcGxhY2VzIHRvIGd1YXJkIGFnYWluc3QgYWxsIHN1c3BpY2lvbiBvZiBkYW5nZXIsIHRoYXQKICAgICAgIHRoZXkgYXBwZWFyZWQgdG8gYmUgbm90IHNvIG11Y2ggdG93bnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYXMKICAgICAgIGJ1bHdhcmtzIG9mIHRoZSBlbXBpcmUuIFRoZXNlIG1lbiBhcmUgZ29pbmcgdG8gbGVhZCBjb2xvbmllcyBpbnRvIHRob3NlIGxhbmRzIHdoaWNoIHRoZXkgaGF2ZQogICAgICAgYm91Z2h0LiBXaWxsIHRoZXkgZG8gc28sIGV2ZW4gaWYgaXQgYmUgbm90IGZvciB0aGUgaW50ZXJlc3RzIG9mIHRoZSByZXB1YmxpYyB0byBkbyBzbz8KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzQiIHVuaXQ9InNlY3Rpb24iIC8+IOKAnEFuZCBpbnRvIHdoYXRldmVyIHBsYWNlcyBiZXNpZGVzIHRoZXkgc2hhbGwKICAgICAgIHRoaW5rIGZpdC7igJ0gV2hhdCBpcyB0aGUgcmVhc29uLCB0aGVyZWZvcmUsIHRoYXQgdGhleSBtYXkgbm90IGJlIGFibGUgdG8gc2V0dGxlIGEKICAgICAgIGNvbG9ueSBvbiB0aGUgSmFuaWN1bGFuIEhpbGw7IGFuZCB0byBwbGFjZSBhIGdhcnJpc29uIG9mIHRoZWlyIG93biBmb3IgdGhlaXIgb3duIHByb3RlY3Rpb24KICAgICAgIG9uIHlvdXIgaGVhZHMgYW5kIG5lY2tzPyBXaWxsIHlvdSBub3QgZGVmaW5lIGhvdyBtYW55IGNvbG9uaWVzIHlvdSBjaG9vc2UgdG8gaGF2ZSBsZWQgZm9ydGgsCiAgICAgICBpbnRvIHdoYXQgZGlzdHJpY3RzIHRoZXkgYXJlIHRvIGJlIGxlZCwgYW5kIG9mIHdoYXQgbnVtYmVyIG9mIGNvbG9uaXN0cyB0aGV5IGFyZSB0byBjb25zaXN0PwogICAgICAgV2lsbCB5b3Ugb2NjdXB5IGEgcGxhY2Ugd2hpY2ggeW91IGNvbnNpZGVyIHN1aXRhYmxlIGZvciB0aGUgdmlvbGVuY2Ugd2hpY2ggcGVyaGFwcyB5b3UgYXJlCiAgICAgICBtZWRpdGF0aW5nPyBXaWxsIHlvdSBjb21wbGV0ZSB0aGUgbnVtYmVyIG9mIHRoZSBjb2xvbnksIGFuZCB3aWxsIHlvdSBzdHJlbmd0aGVuIGl0IGJ5CiAgICAgICB3aGF0ZXZlciBnYXJyaXNvbiB5b3UgbWF5IHRoaW5rIGFkdmlzYWJsZT8gV2lsbCB5b3UgZW1wbG95IHRoZSByZXZlbnVlcyBhbmQgYWxsIHRoZSByZXNvdXJjZXMKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gY29lcmNlIGFuZCBvcHByZXNzIHRoZSBSb21hbiBwZW9wbGUgaXRzZWxmLCBhbmQgdG8gYnJpbmcgaXQgdW5kZXIgdGhlCiAgICAgICBkb21pbmlvbiBhbmQgcG93ZXIgb2YgdGhvc2UgaW50b2xlcmFibGUgZGVjZW12aXJzPyA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNzUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVzYz0iKioqKioiIC8+QW5kIGluIHRoaXMgY2xhc3Mgb2YgcGxhY2VzLCBhcyBpbiB0aGUgb3RoZXIgcGFydHMgb2YgdGhlCiAgICAgICByZXB1YmxpYywgaXQgaXMgd29ydGh3aGlsZSB0byByZWNvbGxlY3QgdGhlIGRpbGlnZW5jZSBleGhpYml0ZWQgYnkgb3VyIGFuY2VzdG9yczsgd2hvCiAgICAgICBlc3RhYmxpc2hlZCBjb2xvbmllcyBpbiBzdWNoIHN1aXRhYmxlIHBsYWNlcyB0byBndWFyZCBhZ2FpbnN0IGFsbCBzdXNwaWNpb24gb2YgZGFuZ2VyLCB0aGF0CiAgICAgICB0aGV5IGFwcGVhcmVkIHRvIGJlIG5vdCBzbyBtdWNoIHRvd25zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGFzCiAgICAgICBidWx3YXJrcyBvZiB0aGUgZW1waXJlLiBUaGVzZSBtZW4gYXJlIGdvaW5nIHRvIGxlYWQgY29sb25pZXMgaW50byB0aG9zZSBsYW5kcyB3aGljaCB0aGV5IGhhdmUKICAgICAgIGJvdWdodC4gV2lsbCB0aGV5IGRvIHNvLCBldmVuIGlmIGl0IGJlIG5vdCBmb3IgdGhlIGludGVyZXN0cyBvZiB0aGUgcmVwdWJsaWMgdG8gZG8gc28/CiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.27.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz4g4oCcQW5kIGludG8gd2hhdGV2ZXIgcGxhY2VzIGJlc2lkZXMgdGhleSBzaGFsbAogICAgICAgdGhpbmsgZml0LuKAnSBXaGF0IGlzIHRoZSByZWFzb24sIHRoZXJlZm9yZSwgdGhhdCB0aGV5IG1heSBub3QgYmUgYWJsZSB0byBzZXR0bGUgYQogICAgICAgY29sb255IG9uIHRoZSBKYW5pY3VsYW4gSGlsbDsgYW5kIHRvIHBsYWNlIGEgZ2Fycmlzb24gb2YgdGhlaXIgb3duIGZvciB0aGVpciBvd24gcHJvdGVjdGlvbgogICAgICAgb24geW91ciBoZWFkcyBhbmQgbmVja3M/IFdpbGwgeW91IG5vdCBkZWZpbmUgaG93IG1hbnkgY29sb25pZXMgeW91IGNob29zZSB0byBoYXZlIGxlZCBmb3J0aCwKICAgICAgIGludG8gd2hhdCBkaXN0cmljdHMgdGhleSBhcmUgdG8gYmUgbGVkLCBhbmQgb2Ygd2hhdCBudW1iZXIgb2YgY29sb25pc3RzIHRoZXkgYXJlIHRvIGNvbnNpc3Q/CiAgICAgICBXaWxsIHlvdSBvY2N1cHkgYSBwbGFjZSB3aGljaCB5b3UgY29uc2lkZXIgc3VpdGFibGUgZm9yIHRoZSB2aW9sZW5jZSB3aGljaCBwZXJoYXBzIHlvdSBhcmUKICAgICAgIG1lZGl0YXRpbmc/IFdpbGwgeW91IGNvbXBsZXRlIHRoZSBudW1iZXIgb2YgdGhlIGNvbG9ueSwgYW5kIHdpbGwgeW91IHN0cmVuZ3RoZW4gaXQgYnkKICAgICAgIHdoYXRldmVyIGdhcnJpc29uIHlvdSBtYXkgdGhpbmsgYWR2aXNhYmxlPyBXaWxsIHlvdSBlbXBsb3kgdGhlIHJldmVudWVzIGFuZCBhbGwgdGhlIHJlc291cmNlcwogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZSB0byBjb2VyY2UgYW5kIG9wcHJlc3MgdGhlIFJvbWFuIHBlb3BsZSBpdHNlbGYsIGFuZCB0byBicmluZyBpdCB1bmRlciB0aGUKICAgICAgIGRvbWluaW9uIGFuZCBwb3dlciBvZiB0aG9zZSBpbnRvbGVyYWJsZSBkZWNlbXZpcnM/IDwvdHJhbnNsYXRpb24+"
translation['2.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.28.75'] = ""
translation['2.28.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QsIHRoZSBtb3N0IGZlcnRpbGUgc2VjdGlvbiBvZiB0aGUgd2hvbGUgd29ybGQsIGlzCiAgICAgICB0byBiZSBkaXZpZGVkIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGlzIGxhdzsgYW5kIGEgY29sb255IGlzIHRvIGJlIGxlZCB0bwogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgYSBtb3N0IGhvbm91cmFibGUgYW5kIGJlYXV0aWZ1bCBjaXR5LiBCdXQKICAgICAgIHdoYXQgY2FuIHdlIHNheSB0byB0aGlzPyBJIHdpbGwgc3BlYWsgZmlyc3Qgb2YgeW91ciBhZHZhbnRhZ2UsIE8gUm9tYW5zLiBUaGVuIEkgd2lsbCByZWN1ciB0bwogICAgICAgdGhlIHF1ZXN0aW9uIG9mIGhvbm91ciBhbmQgZGlnbml0eTsgc28gdGhhdCwgaWYgYW55IG9uZSB0YWtlcyBwYXJ0aWN1bGFyIHBsZWFzdXJlIGluIHRoZQogICAgICAgZXhjZWxsZW5jZSBvZiBhbnkgdG93biBvciBhbnkgZGlzdHJpY3QsIGhlIG1heSBub3QgZXhwZWN0IGFueXRoaW5nOyBhbmQgaWYgYW55IG9uZSBpcwogICAgICAgaW5mbHVlbmNlZCBieSB0aGUgaWRlYSBvZiB0aGUgZGlnbml0eSBvZiB0aGUgYnVzaW5lc3MsIGhlIG1heSByZXNpc3QgdGhpcyBmaWN0aXRpb3VzCiAgICAgICBsaWJlcmFsaXR5LiBBbmQgZmlyc3Qgb2YgYWxsIEkgd2lsbCBzcGVhayBvZiB0aGUgdG93biwgaW4gY2FzZSB0aGVyZSBpcyBhbnkgb25lIHdob3NlIGZhbmN5CiAgICAgICBpcyBtb3JlIHRha2VuIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IHRoYW4gd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4uIEhlIG9yZGVycyBmaXZlIHRob3VzYW5kIGNvbG9uaXN0cyB0byBiZSBlbnJvbGxlZCBmb3IKICAgICAgIHRoZSBwdXJwb3NlIG9mIGJlaW5nIHNldHRsZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+OyBhbmQgdG8gbWFrZQogICAgICAgdXAgdGhpcyBudW1iZXIsIGVhY2ggb2YgdGhlIGRlY2VtdmlycyBpcyB0byBjaG9vc2UgZml2ZSBodW5kcmVkIG1lbi4gSSBlbnRyZWF0IHlvdSwgZG8gbm90CiAgICAgICBkZWNlaXZlIHlvdXJzZWx2ZXMgYWJvdXQgdGhpcyBtYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['2.28.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz4gQ29uc2lkZXIgaXQgaW4gaXRzCiAgICAgICB0cnVlIGxpZ2h0LCBhbmQgd2l0aCBkdWUgY2FyZS4gRG8geW91IHRoaW5rIHRoYXQgaW4gdGhpcyBudW1iZXIgdGhlcmUgd2lsbCBiZSByb29tIGZvciB5b3UKICAgICAgIHlvdXJzZWx2ZXMsIG9yIGZvciBhbnkgbWVuIGxpa2UgeW914oCUcXVpZXQsIGVhc3kgbWVuPyBJZiB0aGVyZSBiZSByb29tIGZvciBhbGwgb2YKICAgICAgIHlvdSwgb3IgZXZlbiBmb3IgdGhlIGdyZWF0ZXIgcGFydCBvZiB5b3XigJRhbHRob3VnaCBteSByZWdhcmQgZm9yIHlvdXIgaG9ub3VyIGNvbXBlbHMKICAgICAgIG1lIHRvIGtlZXAgYXdha2UgZGF5IGFuZCBuaWdodCwgYW5kIHRvIHdhdGNoIHdpdGggZWFnZXIgZXllcyBldmVyeSBwYXJ0IG9mIHRoZQogICAgICAgcmVwdWJsaWPigJRzdGlsbCBJIHdpbGwgY2xvc2UgbXkgZXllcyBmb3IgYSB0aW1lLCBpZiB5b3VyIGFkdmFudGFnZSB3aWxsIGJlIGF0IGFsbAogICAgICAgcHJvbW90ZWQgYnkgbXkgZG9pbmcgc28uIEJ1dCwgaWYgYSBwbGFjZSBhbmQgYSBjaXR5IGlzIGJlaW5nIGxvb2tlZCBvdXQgZm9yIGZpdmUgdGhvdXNhbmQKICAgICAgIG1lbiwgcGlja2VkIG91dCBhcyBmaXQgaW5zdHJ1bWVudHMgZm9yIHZpb2xlbmNlLCBhbmQgYXRyb2NpdHksIGFuZCBzbGF1Z2h0ZXIsIGZyb20gd2hpY2ggdGhleQogICAgICAgbWF5IGJlIGFibGUgdG8gbWFrZSB3YXIsIGFuZCB3aGljaCBtYXkgYmUgYWJsZSB0byBlcXVpcCB0aGVtIHByb3Blcmx5IGZvciB3YXIs4oCUd2lsbAogICAgICAgeW91IHN0aWxsIHN1ZmZlciBhIHBvd2VyIHRvIGJlIHJhaXNlZCBhbmQgZ2Fycmlzb25zIHRvIGJlIGFybWVkIGluIHlvdXIgb3duIG5hbWUgYWdhaW5zdAogICAgICAgeW91cnNlbHZlcz8gV2lsbCB5b3UgYWxsb3cgY2l0aWVzIGFuZCBsYW5kcyBhbmQgZm9yY2VzIHRvIGJlIGFycmF5ZWQgYWdhaW5zdCB5b3VyIGludGVyZXN0PwogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.28.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIHRoZXkgdGhlbXNlbHZlcyBoYXZlIGRlc2lyZWQgdGhlIENhbXBhbmlhbiBkaXN0cmljdAogICAgICAgd2hpY2ggdGhleSBob2xkIG91dCBhIGhvcGUgb2YgdG8geW91LiBUaGV5IHdpbGwgbGVhZCB0aGl0aGVyIHRoZWlyIG93biBmcmllbmRzLCBpbiB3aG9zZSBuYW1lCiAgICAgICB0aGV5IHRoZW1zZWx2ZXMgbWF5IG9jY3VweSBpdCBhbmQgZW5qb3kgaXQuIEJlc2lkZXMgYWxsIHRoaXMsIHRoZXkgd2lsbCBtYWtlIHB1cmNoYXNlczsgdGhleQogICAgICAgd2lsbCBhZGQgdGhlIG90aGVyIHRlbiBhY3JlcyB0byB0aGVpciBwcmVzZW50IGVzdGF0ZS4gRm9yIGlmIHRoZXkgc2F5IHRoYXQgdGhhdCBpcyBub3QgbGF3ZnVsCiAgICAgICBieSB0aGUgbGF3OyBieSB0aGUgQ29ybmVsaWFuIGxhdyBpdCBjZXJ0YWlubHkgaXMgbm90LiBCdXQgd2Ugc2VlICh0byBzYXkgbm90aGluZyBhYm91dCBsYW5kcwogICAgICAgYXQgYSBkaXN0YW5jZSkgdGhhdCB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQcmFlbmVzdGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFByYWVuZXN0ZSI+UHJhZW5lc3RlPC9wbGFjZU5hbWU+CiAgICAgICBpcyBvY2N1cGllZCBieSBhIGZldyBwZW9wbGUuIEFuZCBJIGRvIG5vdCBzZWUgdGhhdCBhbnl0aGluZyBpcyB3YW50aW5nIHRvIHRoZWlyIGZvcnR1bmVzLAogICAgICAgZXhjZXB0IGZhcm1zIG9mIHN1Y2ggYSBkZXNjcmlwdGlvbiB0aGF0IHRoZXkgbWF5IGJlIGFibGUgYnkgdGhlIHN1cHBsaWVzIHdoaWNoIHRoZXkgZGVyaXZlCiAgICAgICBmcm9tIHRoZW0gdG8gc3VwcG9ydCB0aGVpciB2ZXJ5IGxhcmdlIGhvdXNlaG9sZHMsIGFuZCB0aGUgZXhwZW5zZSBvZiB0aGVpciBmYXJtcyBuZWFyCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDdW1hZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ3VtYWUiPkN1bWFlPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB1dGVvbGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFB1dGVvbGkiPlB1dGVvbGk8L3BsYWNlTmFtZT4uIEJ1dCBpZiBoZSBiZSB0aGlua2luZyBvZiB3aGF0IGlzIGZvciB5b3VyIGFkdmFudGFnZSwgdGhlbiBsZXQgaGltCiAgICAgICBjb21lLCBhbmQgbGV0IGhpbSBkaXNjdXNzIHdpdGggbWUsIGZhY2UgdG8gZmFjZSwgdGhlIGRlY2lzaW9uIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.29.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgYXNrZWQgaGltIG9uIHRoZSBmaXJzdCBvZiBKYW51YXJ5LCB0byB3aGF0IG1lbiBoZSB3YXMgZ29pbmcgdG8gZGlzdHJpYnV0ZSB0aGF0IGxhbmQsIGFuZAogICAgICAgb24gd2hhdCBwcmluY2lwbGVzLiBIZSBhbnN3ZXJlZCB0aGF0IGhlIHNob3VsZCBiZWdpbiB3aXRoIHRoZSBSb21pbGlhbiB0cmliZS4gSW4gdGhlIGZpcnN0CiAgICAgICBwbGFjZSBub3csIHdoYXQgaXMgdGhlIG9iamVjdCBvZiBzdWNoIHByaWRlIGFuZCBhcnJvZ2FuY2UgYXMgdG8gY3V0IG9mZiBvbmUgcG9ydGlvbiBvZiB0aGUKICAgICAgIHBlb3BsZSwgYW5kIHRvIG5lZ2xlY3QgdGhlIG9yZGVyIG9mIHRoZSB0cmliZXM/IHRvIGNvbnRyaXZlIHRvIGdpdmUgbGFuZCB0byB0aGUgY291bnRyeQogICAgICAgcGVvcGxlIHdobyBoYXZlIGl0IGFscmVhZHksIGJlZm9yZSBhbnkgaXMgZ2l2ZW4gdG8gdGhlIGNpdHkgcGVvcGxlLCB0byB3aG9tIHRoZSBob3BlIG9mIGxhbmQKICAgICAgIGFuZCB0aGUgcGxlYXN1cmUgdGhleSBhcmUgdG8gZGVyaXZlIGZyb20gaXQgaXMgaGVsZCBvdXQgYXMgYW4gaW5kdWNlbWVudCA/IE9yIGlmIGhlIHNheXMgdGhhdAogICAgICAgdGhpcyBpcyBub3Qgd2hhdCBoZSBzYWlkLCBhbmQgaWYgaGUgaGFzIHNvbWUgcGxhbiBpbiBoaXMgaGVhZCB0byBzYXRpc2Z5IGFsbCBvZiB5b3UsIGxldCBoaW0KICAgICAgIHByb2R1Y2UgaXQ7IGxldCBoaW0gYWxsb3QgaXQgaW4gZGl2aXNpb25zIG9mIHRlbiBhY3JlczsgbGV0IGhpbSBwdXQgZm9ydGggeW91ciBuYW1lcyBpbiBhCiAgICAgICByZWd1bGFyIGFycmFuZ2VtZW50IGZyb20gdGhlIGRpc3RyaWN0IG9mIHRoZSBTdWJ1cmEgdG8gdGhhdCBvZiB0aGUgQXJudXMuIElmIHlvdSBwZXJjZWl2ZSBub3QKICAgICAgIG9ubHkgdGhhdCB0ZW4gYWNyZXMgYXJlIG5vdCBnaXZlbiB0byB5b3UsIGJ1dCB0aGF0IGl0IGlzIGFjdHVhbGx5IGltcG9zc2libGUgZm9yIHN1Y2ggYSBib2R5CiAgICAgICBvZiBtZW4gdG8gYmUgY29sbGVjdGVkIHRvZ2V0aGVyIGluIHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgd2lsbCB5b3UgbmV2ZXJ0aGVsZXNzIGFsbG93IHRoZSByZXB1YmxpYyB0byBiZSBoYXJhc3NlZCwgdGhlIG1hamVzdHkKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgZGVzcGlzZWQsIGFuZCB5b3UgeW91cnNlbHZlcyB0byBiZSBkZWx1ZGVkIGFueSBsb25nZXIgYnkgdGhlCiAgICAgICB0cmlidW5lIG9mIHRoZSBwZW9wbGU/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgd2lsbCB5b3UgbmV2ZXJ0aGVsZXNzIGFsbG93IHRoZSByZXB1YmxpYyB0byBiZSBoYXJhc3NlZCwgdGhlIG1hamVzdHkKICAgICAgIG9mIHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgZGVzcGlzZWQsIGFuZCB5b3UgeW91cnNlbHZlcyB0byBiZSBkZWx1ZGVkIGFueSBsb25nZXIgYnkgdGhlCiAgICAgICB0cmlidW5lIG9mIHRoZSBwZW9wbGU/IDwvdHJhbnNsYXRpb24+"
translation['2.29.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaWYgdGhhdCBsYW5kIGNvdWxkIHBvc3NpYmx5IGNvbWUgdG8geW91LCB3b3VsZCB5b3Ugbm90IHJhdGhlciB0aGF0IGl0IHJlbWFpbmVkIGFzIHBhcnQKICAgICAgIG9mIHlvdXIgcGF0cmltb255PyBXaWxsIHlvdSBhbGxvdyB0aGUgbW9zdCBiZWF1dGlmdWwgZXN0YXRlIGJlbG9uZ2luZyB0byB0aGUgUm9tYW4KICAgICAgIHBlb3BsZeKAlHRoZSBtYWluIHNvdXJjZSBvZiB5b3VyIHJpY2hlcywgeW91ciBjaGllZiBvcm5hbWVudCBpbiB0aW1lIG9mIHBlYWNlLCB5b3VyCiAgICAgICBjaGllZiBzb3VyY2Ugb2Ygc3VwcGx5IGluIHRpbWUgb2Ygd2FyLCB0aGUgZm91bmRhdGlvbiBvZiB5b3VyIHJldmVudWVzLCB0aGUgZ3JhbmFyeSBmcm9tCiAgICAgICB3aGljaCB5b3VyIGxlZ2lvbnMgYXJlIGZlZCwgeW91ciBjb25zb2xhdGlvbiBpbiB0aW1lIG9mIHNjYXJjaXR54oCUdG8gYmUgcnVpbmVkPyBIYXZlCiAgICAgICB5b3UgZm9yZ290dGVuIHdoYXQgZ3JlYXQgYXJtaWVzIHlvdSBzdXBwb3J0ZWQgYnkgbWVhbnMgb2YgdGhlIHByb2R1Y2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMwMDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4sIGluIHRoZSBJdGFsaWFuIHdhciwgd2hlbiB5b3UgaGFkIGxvc3QgYWxsIHlvdXIKICAgICAgIG9yZGluYXJ5IHNvdXJjZXMgb2YgcmV2ZW51ZT8gQXJlIHlvdSBpZ25vcmFudCB0aGF0IGFsbCB0aG9zZSBtYWduaWZpY2VudCByZXZlbnVlcyBvZiB0aGUKICAgICAgIFJvbWFuIHBlb3BsZSBhcmUgb2Z0ZW4gZGVwZW5kZW50IG9uIGEgdmVyeSBzbGlnaHQgaW1wdWxzZSBvZiBmb3J0dW5lLW9uIGEgY3JpdGljYWwgbW9tZW50PwogICAgICAgV2hhdCB3aWxsIGFsbCB0aGUgaGFyYm91cnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgd2hhdCB3aWxsIHRoZQogICAgICAgcGxhaW5zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxNDAiPlN5cmlhPC9wbGFjZU5hbWU+LCB3aGF0IHdpbGwgYWxsIG91ciB0cmFuc21hcmluZQogICAgICAgcmV2ZW51ZXMgYXZhaWwgdXMsIGlmIHRoZSB2ZXJ5IHNsaWdodGVzdCBhbGFybSBvZiBwaXJhdGVzIG9yIGVuZW1pZXMgYmUgb25jZSBnaXZlbj8KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODEiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBhcyBvdXIgcmV2ZW51ZXMgZGVyaXZlZCBmcm9tIHRoZSB0ZXJyaXRvcnkgb2YKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gYXJlIG9mIHN1Y2ggYSBuYXR1cmUgdGhhdCB0aGV5IGFyZSBhbHdheXMKICAgICAgIGF0IGhvbWUsIGFuZCB0aGF0IHRoZXkgYXJlIHByb3RlY3RlZCBieSB0aGUgYnVsd2FyayBvZiBhbGwgb3VyIEl0YWxpYW4gdG93bnMsIHNvIHRoZXkgYXJlCiAgICAgICBuZWl0aGVyIGhvc3RpbGUgdG8gdXMgaW4gdGltZSBvZiB3YXIsIG5vciB2YXJpYWJsZSBpbiB0aGVpciBwcm9kdWN0aXZlbmVzcywgbm9yIHVuZm9ydHVuYXRlCiAgICAgICBmcm9tIGFueSBhY2NpZGVudHMgb2YgY2xpbWF0ZSBvciBzb2lsLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+LCBpbiB0aGUgSXRhbGlhbiB3YXIsIHdoZW4geW91IGhhZCBsb3N0IGFsbCB5b3VyCiAgICAgICBvcmRpbmFyeSBzb3VyY2VzIG9mIHJldmVudWU/IEFyZSB5b3UgaWdub3JhbnQgdGhhdCBhbGwgdGhvc2UgbWFnbmlmaWNlbnQgcmV2ZW51ZXMgb2YgdGhlCiAgICAgICBSb21hbiBwZW9wbGUgYXJlIG9mdGVuIGRlcGVuZGVudCBvbiBhIHZlcnkgc2xpZ2h0IGltcHVsc2Ugb2YgZm9ydHVuZS1vbiBhIGNyaXRpY2FsIG1vbWVudD8KICAgICAgIFdoYXQgd2lsbCBhbGwgdGhlIGhhcmJvdXJzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIHdoYXQgd2lsbCB0aGUKICAgICAgIHBsYWlucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDE0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTQwIj5TeXJpYTwvcGxhY2VOYW1lPiwgd2hhdCB3aWxsIGFsbCBvdXIgdHJhbnNtYXJpbmUKICAgICAgIHJldmVudWVzIGF2YWlsIHVzLCBpZiB0aGUgdmVyeSBzbGlnaHRlc3QgYWxhcm0gb2YgcGlyYXRlcyBvciBlbmVtaWVzIGJlIG9uY2UgZ2l2ZW4/CiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.29.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGFzIG91ciByZXZlbnVlcyBkZXJpdmVkIGZyb20gdGhlIHRlcnJpdG9yeSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IGFyZSBvZiBzdWNoIGEgbmF0dXJlIHRoYXQgdGhleSBhcmUgYWx3YXlzCiAgICAgICBhdCBob21lLCBhbmQgdGhhdCB0aGV5IGFyZSBwcm90ZWN0ZWQgYnkgdGhlIGJ1bHdhcmsgb2YgYWxsIG91ciBJdGFsaWFuIHRvd25zLCBzbyB0aGV5IGFyZQogICAgICAgbmVpdGhlciBob3N0aWxlIHRvIHVzIGluIHRpbWUgb2Ygd2FyLCBub3IgdmFyaWFibGUgaW4gdGhlaXIgcHJvZHVjdGl2ZW5lc3MsIG5vciB1bmZvcnR1bmF0ZQogICAgICAgZnJvbSBhbnkgYWNjaWRlbnRzIG9mIGNsaW1hdGUgb3Igc29pbC4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5PdXIgYW5jZXN0b3JzIHdlcmUgc28gZmFyIGZyb20gZGltaW5pc2hpbmcgd2hhdCB0aGV5IGhhZCB0YWtlbiBmcm9tIHRoZSBDYW1wYW5pYW5zLCB0aGF0CiAgICAgICB0aGV5IGV2ZW4gYm91Z2h0IGFkZGl0aW9uYWwgbGFuZHMgdG8gYmUgYWRkZWQgdG8gaXQsIGZyb20gdGhvc2UgZnJvbSB3aG9tIHRoZXkgY291bGQgbm90CiAgICAgICByZWFzb25hYmx5IHRha2UgaXQgd2l0aG91dCBwdXJjaGFzZS4gRm9yIHdoaWNoIHJlYXNvbiwgbmVpdGhlciB0aGUgdHdvIEdyYWNjaGksIHdobyB0aG91Z2h0IGEKICAgICAgIGdyZWF0IGRlYWwgb2Ygd2hhdCB3YXMgYWR2YW50YWdlb3VzIGZvciB0aGUgUm9tYW4gcGVvcGxlLCBub3IgTHVjaXVzIFN1bGxhLCB3aG8gZ2F2ZSBhd2F5CiAgICAgICBldmVyeXRoaW5nIHdpdGhvdXQgdGhlIHNsaWdodGVzdCBzY3J1cGxlIHRvIGFueSBvbmUgaGUgcGxlYXNlZCwgZXZlciB2ZW50dXJlZCB0byB0b3VjaCB0aGUKICAgICAgIENhbXBhbmlhbiB0ZXJyaXRvcnkuIFJ1bGx1cyB3YXMgdGhlIGZpcnN0IG1hbiB0byB2ZW50dXJlIHRvIHJlbW92ZSB0aGUgcmVwdWJsaWMgZnJvbSB0aGF0CiAgICAgICBwcm9wZXJ0eSwgb2Ygd2hpY2ggbmVpdGhlciB0aGUgbGliZXJhbGl0eSBvZiB0aGUgR3JhY2NoaSBub3IgdGhlIHVuY29udHJvbGxlZCBwb3dlciBvZiBTdWxsYQogICAgICAgaGFkIGRlcHJpdmVkIGl0LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgbGFuZCB3aGljaCBub3csIGFzIHlvdSBwYXNzIGJ5IGl0LCB5b3Ugc2F5IGlzIHlvdXJzLCBhbmQgd2hpY2ggZm9yZWlnbmVycyB3aG9zZSByb2FkCiAgICAgICBsaWVzIHRocm91Z2ggaXQgaGVhciBpcyB5b3Vycywgd2hlbiBpdCBpcyBkaXZpZGVkIHdpbGwgbmVpdGhlciBiZSBub3IgYmUgc2FpZCB0byBiZSB5b3Vycy4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iODIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB3aG8gYXJlIHRoZSBtZW4gd2hvIHdpbGwgcG9zc2VzcyBpdD8gSW4gdGhlIGZpcnN0CiAgICAgICBwbGFjZSB0aGV5IGFyZSBhY3RpdmUgbWVuLCBwcmVwYXJlZCBmb3IgZGVlZHMgb2YgdmlvbGVuY2UsIHdpbGxpbmcgZm9yIHNlZGl0aW9uLCB3aG8sIHRoZQogICAgICAgdmVyeSBtb21lbnQgdGhlIGRlY2VtdmlycyBjbGFwIHRoZWlyIGhhbmRzLCBtYXkgYmUgYXJtZWQgYWdhaW5zdCB0aGUgY2l0aXplbnMgYW5kIHJlYWR5IGZvcgogICAgICAgc2xhdWdodGVyLiBJbiB0aGUgbmV4dCBwbGFjZSwgeW91IHdpbGwgc2VlIHRoZSB3aG9sZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gZGlzdHJpYnV0ZWQgYW1vbmcgYSBmZXcgbWVuIGFscmVhZHkgcmljaCBpbiB3ZWFsdGggYW5kIHBvd2VyLgogICAgICAgTWVhbndoaWxlIHlvdSwgd2hvIGhhdmUgcmVjZWl2ZWQgZnJvbSB5b3VyIGFuY2VzdG9ycyB0aG9zZSBtb3N0IGJlYXV0aWZ1bCBob21lcywgaWYgSSBtYXkgc28KICAgICAgIHNheSwgb2YgeW91ciByZXZlbnVlcywgd2hpY2ggdGhleSB3b24gYnkgdGhlaXIgYXJtcywgd2lsbCBub3QgaGF2ZSBsZWZ0IHRvIHlvdSBvbmUgc2luZ2xlCiAgICAgICBjbG9kIG9mIGVhcnRoIG9mIGFsbCB5b3VyIHBhdGVybmFsIGhlcmVkaXRhcnkgcG9zc2Vzc2lvbnMuIEFuZCB0aGVyZSB3aWxsIGJlIHRoaXMgZGlmZmVyZW5jZQogICAgICAgYmV0d2VlbiB5b3VyIGRpbGlnZW5jZSBhbmQgdGhhdCBvciBwcml2YXRlIGluZGl2aWR1YWxzLCB0aGF0IHdoZW4gUHVibGl1cyBMZW50dWx1cywgd2hpbGUgaGUKICAgICAgIHdhcyBjaGllZiBvZiB0aGUgc2VuYXRlLCBoYWQgYmVlbiBzZW50IGludG8gdGhvc2UgcGFydHMgYnkgb3VyIGFuY2VzdG9ycywgaW4gb3JkZXIgdG8KICAgICAgIHB1cmNoYXNlIGF0IHRoZSBwdWJsaWMgZXhwZW5zZSB0aG9zZSBsYW5kcywgYmVpbmcgcHJpdmF0ZSBwcm9wZXJ0eSwgd2hpY2ggcHJvamVjdGVkIGludG8gdGhlCiAgICAgICBwdWJsaWMgZG9tYWluIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgaGUgaXMgc2FpZCB0byBoYXZlCiAgICAgICByZXBvcnRlZCB0aGF0IGhlIGhhZCBub3QgYmVlbiBhYmxlIHRvIHB1cmNoYXNlIGEgY2VydGFpbiBtYW4ncyBlc3RhdGUgZm9yIG1vbmV5OyBhbmQgdGhhdCBoZQogICAgICAgd2hvIGhhZCByZWZ1c2VkIHRvIHNlbGwgaXQsIGhhZCBnaXZlbiB0aGlzIHJlYXNvbiB3aHkgaGUgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8KICAgICAgIHNlbGwgaXQsIHRoYXQsIHRob3VnaCBoZSBoYWQgbWFueSBmYXJtcywgdGhpcyB3YXMgdGhlIG9ubHkgZmFybSBmcm9tIHdoaWNoIGhlIG5ldmVyIGhhZCBoYWQKICAgICAgIGFueSBiYWQgbmV3cy4gPG1pbGVzdG9uZSBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28/IERpZCB0aGlzIHJlYXNvbiB3ZWlnaCB3aXRoIGEKICAgICAgIHByaXZhdGUgaW5kaXZpZHVhbCBhbmQgc2hhbGwgaXQgbm90IHdlaWdoIHdpdGggdGhlIFJvbWFuIHBlb3BsZSB0byBwcmV2ZW50IHRoZWlyIGdpdmluZyB1cAogICAgICAgdGhlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiB0byBwcml2YXRlIGluZGl2aWR1YWxzIGZvcgogICAgICAgbm90aGluZywgYXQgdGhlIHJlcXVlc3Qgb2YgUnVsbHVzPyBBbmQgdGhlIFJvbWFuIHBlb3BsZSBtYXkgc2F5IHRoZSB2ZXJ5IHNhbWUgdGhpbmcgYWJvdXQKICAgICAgIHRoaXMgcmV2ZW51ZSwgdGhhdCBoZSBpcyBzYWlkIHRvIGhhdmUgc2FpZCBhYm91dCBoaXMgZmFybS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4gZm9yIG1hbnkgeWVhcnMgZHVyaW5nIHRoZSBNaXRocmlkYXRpYyB3YXIgcHJvZHVjZWQgeW91IG5vIHJldmVudWUuIFRoZXJlCiAgICAgICB3YXMgbm8gcmV2ZW51ZSBmcm9tIHRoZSBTcGFpbnMgaW4gdGhlIHRpbWUgb2YgU2VydG9yaXVzLiBNYW5pdXMgQXF1aWxpdXMgZXZlbiBsZW50IGNvcm4gdG8KICAgICAgIHRoZSBTaWNpbGlhbiBjaXRpZXMgYXQgdGhlIHRpbWUgb2YgdGhlIFNlcnZpbGUgd2FyLiBCdXQgZnJvbSB0aGlzIHRyaWJ1dGFyeSBsYW5kIG5vIGJhZCBuZXdzCiAgICAgICB3YXMgZXZlciBoZWFyZC4gT3RoZXIgb2Ygb3VyIHJldmVudWVzIGFyZSBhdCB0aW1lcyB3ZWlnaGVkIGRvd24gYnkgdGhlIGRpc3RyZXNzZXMgb2Ygd2FyOyBidXQKICAgICAgIHRoZSBzaW5ld3Mgb2Ygd2FyIGFyZSBldmVuIHN1cHBsaWVkIHRvIHVzIGJ5IHRoaXMgdHJpYnV0YXJ5IGxhbmQuIDxtaWxlc3RvbmUgbj0iODQiIHVuaXQ9InNlY3Rpb24iIC8+IEJlc2lkZXMsIGluIHRoaXMgYWxsb3RtZW50IG9mIGxhbmRzIHdoaWNoIGlzIHRvIHRha2UgcGxhY2UsIGV2ZW4gdGhhdCwKICAgICAgIHdoaWNoIGlzIHNhaWQgaW4gb3RoZXIgY2FzZXMsIGNhbm5vdCBiZSBzYWlkIGhlcmUsIG5hbWVseSwgdGhhdCBsYW5kcyBvdWdodCBub3QgdG8gYmUgbGVmdAogICAgICAgZGVzZXJ0ZWQgYnkgdGhlIHBlb3BsZSwgYW5kIHdpdGhvdXQgdGhlIGN1bHRpdmF0aW9uIG9mIGZyZWUgbWVuLiA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.30.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHdobyBhcmUgdGhlIG1lbiB3aG8gd2lsbCBwb3NzZXNzIGl0PyBJbiB0aGUgZmlyc3QKICAgICAgIHBsYWNlIHRoZXkgYXJlIGFjdGl2ZSBtZW4sIHByZXBhcmVkIGZvciBkZWVkcyBvZiB2aW9sZW5jZSwgd2lsbGluZyBmb3Igc2VkaXRpb24sIHdobywgdGhlCiAgICAgICB2ZXJ5IG1vbWVudCB0aGUgZGVjZW12aXJzIGNsYXAgdGhlaXIgaGFuZHMsIG1heSBiZSBhcm1lZCBhZ2FpbnN0IHRoZSBjaXRpemVucyBhbmQgcmVhZHkgZm9yCiAgICAgICBzbGF1Z2h0ZXIuIEluIHRoZSBuZXh0IHBsYWNlLCB5b3Ugd2lsbCBzZWUgdGhlIHdob2xlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IGRpc3RyaWJ1dGVkIGFtb25nIGEgZmV3IG1lbiBhbHJlYWR5IHJpY2ggaW4gd2VhbHRoIGFuZCBwb3dlci4KICAgICAgIE1lYW53aGlsZSB5b3UsIHdobyBoYXZlIHJlY2VpdmVkIGZyb20geW91ciBhbmNlc3RvcnMgdGhvc2UgbW9zdCBiZWF1dGlmdWwgaG9tZXMsIGlmIEkgbWF5IHNvCiAgICAgICBzYXksIG9mIHlvdXIgcmV2ZW51ZXMsIHdoaWNoIHRoZXkgd29uIGJ5IHRoZWlyIGFybXMsIHdpbGwgbm90IGhhdmUgbGVmdCB0byB5b3Ugb25lIHNpbmdsZQogICAgICAgY2xvZCBvZiBlYXJ0aCBvZiBhbGwgeW91ciBwYXRlcm5hbCBoZXJlZGl0YXJ5IHBvc3Nlc3Npb25zLiBBbmQgdGhlcmUgd2lsbCBiZSB0aGlzIGRpZmZlcmVuY2UKICAgICAgIGJldHdlZW4geW91ciBkaWxpZ2VuY2UgYW5kIHRoYXQgb3IgcHJpdmF0ZSBpbmRpdmlkdWFscywgdGhhdCB3aGVuIFB1YmxpdXMgTGVudHVsdXMsIHdoaWxlIGhlCiAgICAgICB3YXMgY2hpZWYgb2YgdGhlIHNlbmF0ZSwgaGFkIGJlZW4gc2VudCBpbnRvIHRob3NlIHBhcnRzIGJ5IG91ciBhbmNlc3RvcnMsIGluIG9yZGVyIHRvCiAgICAgICBwdXJjaGFzZSBhdCB0aGUgcHVibGljIGV4cGVuc2UgdGhvc2UgbGFuZHMsIGJlaW5nIHByaXZhdGUgcHJvcGVydHksIHdoaWNoIHByb2plY3RlZCBpbnRvIHRoZQogICAgICAgcHVibGljIGRvbWFpbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMDA1Ij5DYW1wYW5pYTwvcGxhY2VOYW1lPiwgaGUgaXMgc2FpZCB0byBoYXZlCiAgICAgICByZXBvcnRlZCB0aGF0IGhlIGhhZCBub3QgYmVlbiBhYmxlIHRvIHB1cmNoYXNlIGEgY2VydGFpbiBtYW4ncyBlc3RhdGUgZm9yIG1vbmV5OyBhbmQgdGhhdCBoZQogICAgICAgd2hvIGhhZCByZWZ1c2VkIHRvIHNlbGwgaXQsIGhhZCBnaXZlbiB0aGlzIHJlYXNvbiB3aHkgaGUgY291bGQgbm90IHBvc3NpYmx5IGJlIGluZHVjZWQgdG8KICAgICAgIHNlbGwgaXQsIHRoYXQsIHRob3VnaCBoZSBoYWQgbWFueSBmYXJtcywgdGhpcyB3YXMgdGhlIG9ubHkgZmFybSBmcm9tIHdoaWNoIGhlIG5ldmVyIGhhZCBoYWQKICAgICAgIGFueSBiYWQgbmV3cy4gPC90cmFuc2xhdGlvbj4="
translation['2.30.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz4gSXMgaXQgc28/IERpZCB0aGlzIHJlYXNvbiB3ZWlnaCB3aXRoIGEKICAgICAgIHByaXZhdGUgaW5kaXZpZHVhbCBhbmQgc2hhbGwgaXQgbm90IHdlaWdoIHdpdGggdGhlIFJvbWFuIHBlb3BsZSB0byBwcmV2ZW50IHRoZWlyIGdpdmluZyB1cAogICAgICAgdGhlIGRpc3RyaWN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMDA1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMwMDUiPkNhbXBhbmlhPC9wbGFjZU5hbWU+IHRvIHByaXZhdGUgaW5kaXZpZHVhbHMgZm9yCiAgICAgICBub3RoaW5nLCBhdCB0aGUgcmVxdWVzdCBvZiBSdWxsdXM/IEFuZCB0aGUgUm9tYW4gcGVvcGxlIG1heSBzYXkgdGhlIHZlcnkgc2FtZSB0aGluZyBhYm91dAogICAgICAgdGhpcyByZXZlbnVlLCB0aGF0IGhlIGlzIHNhaWQgdG8gaGF2ZSBzYWlkIGFib3V0IGhpcyBmYXJtLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGZvciBtYW55IHllYXJzIGR1cmluZyB0aGUgTWl0aHJpZGF0aWMgd2FyIHByb2R1Y2VkIHlvdSBubyByZXZlbnVlLiBUaGVyZQogICAgICAgd2FzIG5vIHJldmVudWUgZnJvbSB0aGUgU3BhaW5zIGluIHRoZSB0aW1lIG9mIFNlcnRvcml1cy4gTWFuaXVzIEFxdWlsaXVzIGV2ZW4gbGVudCBjb3JuIHRvCiAgICAgICB0aGUgU2ljaWxpYW4gY2l0aWVzIGF0IHRoZSB0aW1lIG9mIHRoZSBTZXJ2aWxlIHdhci4gQnV0IGZyb20gdGhpcyB0cmlidXRhcnkgbGFuZCBubyBiYWQgbmV3cwogICAgICAgd2FzIGV2ZXIgaGVhcmQuIE90aGVyIG9mIG91ciByZXZlbnVlcyBhcmUgYXQgdGltZXMgd2VpZ2hlZCBkb3duIGJ5IHRoZSBkaXN0cmVzc2VzIG9mIHdhcjsgYnV0CiAgICAgICB0aGUgc2luZXdzIG9mIHdhciBhcmUgZXZlbiBzdXBwbGllZCB0byB1cyBieSB0aGlzIHRyaWJ1dGFyeSBsYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.30.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz4gQmVzaWRlcywgaW4gdGhpcyBhbGxvdG1lbnQgb2YgbGFuZHMgd2hpY2ggaXMgdG8gdGFrZSBwbGFjZSwgZXZlbiB0aGF0LAogICAgICAgd2hpY2ggaXMgc2FpZCBpbiBvdGhlciBjYXNlcywgY2Fubm90IGJlIHNhaWQgaGVyZSwgbmFtZWx5LCB0aGF0IGxhbmRzIG91Z2h0IG5vdCB0byBiZSBsZWZ0CiAgICAgICBkZXNlcnRlZCBieSB0aGUgcGVvcGxlLCBhbmQgd2l0aG91dCB0aGUgY3VsdGl2YXRpb24gb2YgZnJlZSBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['2.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGlzIGlzIHdoYXQgSSBzYXks4oCUaWYgdGhlIENhbXBhbmlhbiBsYW5kIGJlIGRpdmlkZWQsIHRoZSBjb21tb24gcGVvcGxlIGlzCiAgICAgICBkcml2ZW4gb3V0IG9mIGFuZCBiYW5pc2hlZCBmcm9tIHRoZSBsYW5kcywgbm90IHNldHRsZWQgYW5kIGVzdGFibGlzaGVkIGluIHRoZW0uIEZvciB0aGUgd2hvbGUKICAgICAgIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3QgaXMgY3VsdGl2YXRlZCBhbmQgb2NjdXBpZWQgYnkgdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBieSBhIG1vc3QKICAgICAgIHZpcnR1b3VzIGFuZCBtb2RlcmF0ZSBjb21tb24gcGVvcGxlLiBBbmQgdGhhdCByYWNlIG9mIG1lbiBvZiBtb3N0IHZpcnR1b3VzIGhhYml0cywgdGhhdCByYWNlCiAgICAgICBvZiBleGNlbGxlbnQgZmFybWVycyBhbmQgZXhjZWxsZW50IHNvbGRpZXJzLCBpcyB3aG9sbHkgZHJpdmVuIG91dCBieSB0aGlzIHRyaWJ1bmUgd2hvIGlzIHNvCiAgICAgICBkZXZvdGVkIHRvIHRoZSBwZW9wbGUuIEFuZCB0aGVzZSBtaXNlcmFibGUgbWVuLCBib3JuIGFuZCBicm91Z2h0IHVwIG9uIHRob3NlIGxhbmRzLCBwcmFjdGlzZWQKICAgICAgIGluIHRpbGxpbmcgdGhlIGdyb3VuZCwgd2lsbCBoYXZlIG5vIHBsYWNlIHRvIHdoaWNoLCB3aGVuIHNvIHN1ZGRlbmx5IGRyaXZlbiBvdXQsIHRoZXkgY2FuCiAgICAgICBiZXRha2UgdGhlbXNlbHZlcy4gVGhlIGVudGlyZSBwb3NzZXNzaW9uIG9mIHRoZSBDYW1wYW5pYW4gZGlzdHJpY3Qgd2lsbCBiZSBnaXZlbiBvdmVyIHRvCiAgICAgICB0aGVzZSByb2J1c3QsIHZpZ29yb3VzLCBhbmQgYXVkYWNpb3VzIHNhdGVsbGl0ZXMgb2YgdGhlIGRlY2Vtdmlycy4gQW5kLCBhcyB5b3Ugbm93IHNheSBvZgogICAgICAgeW91ciBhbmNlc3RvcnMsIOKAnE91ciBhbmNlc3RvcnMgbGVmdCB1cyB0aGVzZSBsYW5kcyzigJ0gc28geW91ciBwb3N0ZXJpdHkKICAgICAgIHdpbGwgc2F5IG9mIHlvdSwg4oCcT3VyIGFuY2VzdG9ycyByZWNlaXZlZCB0aGVzZSBsYW5kcyBmcm9tIHRoZWlyIGFuY2VzdG9ycywgYnV0IGxvc3QKICAgICAgIHRoZW0u4oCdIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSB0aGluaywgaW5kZWVkLCB0aGF0IGlmIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2NCIga2V5PSJ0Z24sNzAwNjk2NCI+Q2FtcHVzIE1hcnRpdXM8L3BsYWNlTmFtZT4gd2VyZSB0byBiZSBkaXZpZGVkLCBhbmQgaWYgZXZlcnkgb25lIG9mIHlvdSBoYWQKICAgICAgIHR3byBmZWV0IG9mIHN0YW5kaW5nIGdyb3VuZCBhbGxvdHRlZCB0byBoaW0gaW4gaXQsIHN0aWxsIHlvdSB3b3VsZCBwcmVmZXIgdG8gZW5qb3kgdGhlIHdob2xlCiAgICAgICBvZiBpdCB0b2dldGhlciwgdGhhbiBmb3IgZWFjaCBpbmRpdmlkdWFsIHRvIGhhdmUgYSBzbWFsbCBwb3J0aW9uIGZvciBoaXMgb3duIHByaXZhdGUKICAgICAgIHByb3BlcnR5LiBXaGVyZWZvcmUsIGV2ZW4gaWYgc29tZSBwb3J0aW9uIG9mIHRoZXNlIGxhbmRzIHdlcmUgdG8gY29tZSB0byBldmVyeSBpbmRpdmlkdWFsCiAgICAgICBhbW9uZyB5b3Uu4oCUd2hpY2ggaXMgbm93IGluZGVlZCBoZWxkIG91dCB0byB5b3UgYXMgYSBsdXJlLCBidXQgaXMgaW4gcmVhbGl0eQogICAgICAgZGVzdGluZWQgZm9yIG90aGVycyzigJRzdGlsbCB0aGV5IHdvdWxkIGJlIGEgbW9yZSBob25vdXJhYmxlIHBvc3Nlc3Npb24gdG8geW91IHdoZW4KICAgICAgIHBvc3Nlc3NlZCBieSB0aGUgd2hvbGUgYm9keSwgdGhhbiBpZiBkaXN0cmlidXRlZCBpbiBiaXRzIHRvIGVhY2ggY2l0aXplbi4gQnV0IG5vdyB3aGVuIHlvdQogICAgICAgYXJlIG5vdCB0byBoYXZlIGFueSBzaGFyZSBpbiB0aGVtLCBidXQgd2hlbiB0aGV5IGFyZSBiZWluZyBwcmVwYXJlZCBmb3Igb3RoZXJzIGFuZCB0YWtlbiBmcm9tCiAgICAgICB5b3UsIHdpbGwgeW91IG5vdCBtb3N0IHZpZ29yb3VzbHkgcmVzaXN0IHRoaXMgbGF3IGFzIHlvdSB3b3VsZCBhbiBhcm1lZCBlbmVteSwgZmlnaHRpbmcgaW4KICAgICAgIGRlZmVuY2Ugb2YgeW91ciBsYW5kcy4gSGUgYWRkcyB0aGUgU3RlbGxhdGUgcGxhaW4gdG8gdGhlIENhbXBhbmlhbiBkaXN0cmljdCwgYW5kIGluIHRoZSB0d28KICAgICAgIHRvZ2V0aGVyIGhlIGFsbG90cyB0d2VsdmUgYWNyZXMgdG8gZWFjaCBzZXR0bGVyLiBBcyBpZiB0aGUgZGlmZmVyZW5jZSB3YXMgc2xpZ2h0IGJldHdlZW4gdGhlCiAgICAgICBTdGVsbGF0ZSBhbmQgQ2FtcGFuaWFuIGRpc3RyaWN0cyEgPG1pbGVzdG9uZSBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdyBhIG11bHRpdHVkZSBpcwogICAgICAgc291Z2h0IG91dCwgYnkgd2hpY2ggdGhvc2UgdG93bnMgYXJlIHRvIGJlIHBlb3BsZWQuIEZvciBJIGhhdmUgc2FpZCBiZWZvcmUgdGhhdCBsZWF2ZSBpcwogICAgICAgZ2l2ZW4gYnkgdGhlIGxhdyBmb3IgdGhlbSB0byBvY2N1cHkgd2l0aCB0aGVpciBzZXR0bGVycyB3aGF0ZXZlciBtdW5pY2lwYWxpdGllcyBhbmQgd2hhdGV2ZXIKICAgICAgIG9sZCBjb2xvbmllcyB0aGV5IGNob29zZS4gVGhleSB3aWxsIGZpbGwgdGhlIG11bmljaXBhbGl0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBrZXk9InBlcnNldXMsQ2FsZXMiPkNhbGVzPC9wbGFjZU5hbWU+OyB0aGV5IHdpbGwgb3ZlcndoZWxtIFRlYW51bTsgdGhleSB3aWxsIGV4dGVuZCBhIGNoYWluIG9mIGdhcnJpc29ucwogICAgICAgdGhyb3VnaCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0ZWxsYSIga2V5PSJwZXJzZXVzLEF0ZWxsYSI+QXRlbGxhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDdW1hZSIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDc0IiBrZXk9InRnbiw3MDA0NDc0Ij5OYXBsZXM8L3BsYWNlTmFtZT4sCiAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQb21wZWlpIiBrZXk9InBlcnNldXMsUG9tcGVpaSI+UG9tcGVpaTwvcGxhY2VOYW1lPiwgYW5kIE51Y2VyaWE7IGFuZCB0aGUgd2hvbGUgb2YKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB1dGVvbGkiIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdCBwcmVzZW50IGEgZnJlZSBjaXR5LCBpbgogICAgICAgdGhlIGZ1bGwgZW5qb3ltZW50IG9mIGl0cyBhbmNpZW50IHJpZ2h0cyBhbmQgbGliZXJ0aWVzLCB0aGV5IHdpbGwgb2NjdXB5IHdpdGggYSBuZXcgcGVvcGxlLAogICAgICAgYW5kIHdpdGggYSBmb3JlaWduIGJvZHkgb2YgbWVuLiA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.31.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz4gSSB0aGluaywgaW5kZWVkLCB0aGF0IGlmIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjk2NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiB3ZXJlIHRvIGJlIGRpdmlkZWQsIGFuZCBpZiBldmVyeSBvbmUgb2YgeW91IGhhZAogICAgICAgdHdvIGZlZXQgb2Ygc3RhbmRpbmcgZ3JvdW5kIGFsbG90dGVkIHRvIGhpbSBpbiBpdCwgc3RpbGwgeW91IHdvdWxkIHByZWZlciB0byBlbmpveSB0aGUgd2hvbGUKICAgICAgIG9mIGl0IHRvZ2V0aGVyLCB0aGFuIGZvciBlYWNoIGluZGl2aWR1YWwgdG8gaGF2ZSBhIHNtYWxsIHBvcnRpb24gZm9yIGhpcyBvd24gcHJpdmF0ZQogICAgICAgcHJvcGVydHkuIFdoZXJlZm9yZSwgZXZlbiBpZiBzb21lIHBvcnRpb24gb2YgdGhlc2UgbGFuZHMgd2VyZSB0byBjb21lIHRvIGV2ZXJ5IGluZGl2aWR1YWwKICAgICAgIGFtb25nIHlvdS7igJR3aGljaCBpcyBub3cgaW5kZWVkIGhlbGQgb3V0IHRvIHlvdSBhcyBhIGx1cmUsIGJ1dCBpcyBpbiByZWFsaXR5CiAgICAgICBkZXN0aW5lZCBmb3Igb3RoZXJzLOKAlHN0aWxsIHRoZXkgd291bGQgYmUgYSBtb3JlIGhvbm91cmFibGUgcG9zc2Vzc2lvbiB0byB5b3Ugd2hlbgogICAgICAgcG9zc2Vzc2VkIGJ5IHRoZSB3aG9sZSBib2R5LCB0aGFuIGlmIGRpc3RyaWJ1dGVkIGluIGJpdHMgdG8gZWFjaCBjaXRpemVuLiBCdXQgbm93IHdoZW4geW91CiAgICAgICBhcmUgbm90IHRvIGhhdmUgYW55IHNoYXJlIGluIHRoZW0sIGJ1dCB3aGVuIHRoZXkgYXJlIGJlaW5nIHByZXBhcmVkIGZvciBvdGhlcnMgYW5kIHRha2VuIGZyb20KICAgICAgIHlvdSwgd2lsbCB5b3Ugbm90IG1vc3Qgdmlnb3JvdXNseSByZXNpc3QgdGhpcyBsYXcgYXMgeW91IHdvdWxkIGFuIGFybWVkIGVuZW15LCBmaWdodGluZyBpbgogICAgICAgZGVmZW5jZSBvZiB5b3VyIGxhbmRzLiBIZSBhZGRzIHRoZSBTdGVsbGF0ZSBwbGFpbiB0byB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCBhbmQgaW4gdGhlIHR3bwogICAgICAgdG9nZXRoZXIgaGUgYWxsb3RzIHR3ZWx2ZSBhY3JlcyB0byBlYWNoIHNldHRsZXIuIEFzIGlmIHRoZSBkaWZmZXJlbmNlIHdhcyBzbGlnaHQgYmV0d2VlbiB0aGUKICAgICAgIFN0ZWxsYXRlIGFuZCBDYW1wYW5pYW4gZGlzdHJpY3RzISA8L3RyYW5zbGF0aW9uPg=="
translation['2.31.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdyBhIG11bHRpdHVkZSBpcwogICAgICAgc291Z2h0IG91dCwgYnkgd2hpY2ggdGhvc2UgdG93bnMgYXJlIHRvIGJlIHBlb3BsZWQuIEZvciBJIGhhdmUgc2FpZCBiZWZvcmUgdGhhdCBsZWF2ZSBpcwogICAgICAgZ2l2ZW4gYnkgdGhlIGxhdyBmb3IgdGhlbSB0byBvY2N1cHkgd2l0aCB0aGVpciBzZXR0bGVycyB3aGF0ZXZlciBtdW5pY2lwYWxpdGllcyBhbmQgd2hhdGV2ZXIKICAgICAgIG9sZCBjb2xvbmllcyB0aGV5IGNob29zZS4gVGhleSB3aWxsIGZpbGwgdGhlIG11bmljaXBhbGl0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYWxlcyI+Q2FsZXM8L3BsYWNlTmFtZT47IHRoZXkgd2lsbCBvdmVyd2hlbG0gVGVhbnVtOyB0aGV5IHdpbGwgZXh0ZW5kIGEgY2hhaW4gb2YgZ2Fycmlzb25zCiAgICAgICB0aHJvdWdoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRlbGxhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGVsbGEiPkF0ZWxsYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA0NDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDQ0NzQiPk5hcGxlczwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBvbXBlaWkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBvbXBlaWkiPlBvbXBlaWk8L3BsYWNlTmFtZT4sIGFuZCBOdWNlcmlhOyBhbmQgdGhlIHdob2xlIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQdXRlb2xpIj5QdXRlb2xpPC9wbGFjZU5hbWU+LCB3aGljaCBpcyBhdCBwcmVzZW50IGEgZnJlZSBjaXR5LCBpbgogICAgICAgdGhlIGZ1bGwgZW5qb3ltZW50IG9mIGl0cyBhbmNpZW50IHJpZ2h0cyBhbmQgbGliZXJ0aWVzLCB0aGV5IHdpbGwgb2NjdXB5IHdpdGggYSBuZXcgcGVvcGxlLAogICAgICAgYW5kIHdpdGggYSBmb3JlaWduIGJvZHkgb2YgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW4gdGhhdCBzdGFuZGFyZCBvZiBhIENhbXBhbmlhbiBjb2xvbnksIGdyZWF0bHkgdG8gYmUgZHJlYWRlZCBieSB0aGlzIGVtcGlyZSwgd2lsbCBiZQogICAgICAgZXJlY3RlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gYnkgdGhlIGRlY2Vtdmlycy4gVGhlbiB0aGF0IG90aGVyCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aGljaCBoYXMgYmVlbiBoZWFyZCBvZiBiZWZvcmUsIHdpbGwgYmUKICAgICAgIHNvdWdodCBpbiBvcHBvc2l0aW9uIHRvIHRoaXMgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB0aGUgY29tbW9uCiAgICAgICBjb3VudHJ5IG9mIGFsbCBvZiB1cy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijg3IiB1bml0PSJzZWN0aW9uIiAvPiBJbXBpb3VzIG1lbiBhcmUgZW5kZWF2b3VyaW5nIHRvCiAgICAgICB0cmFuc2ZlciBvdXIgcmVwdWJsaWMgdG8gdGhhdCB0b3duIGluIHdoaWNoIG91ciBhbmNlc3RvcnMgZGVjaWRlZCB0aGF0IHRoZXJlIHNob3VsZCBiZSBubwogICAgICAgcmVwdWJsaWMgYXQgYWxsLCB3aGVuIHRoZXkgcmVzb2x2ZWQgdGhhdCB0aGVyZSB3ZXJlIGJ1dCB0aHJlZSBjaXRpZXMgaW4gdGhlIHdob2xlIGVhcnRoLAogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCB3aGljaCBjb3VsZAogICAgICAgYXNwaXJlIHRvIHRoZSBwb3dlciBhbmQgbmFtZSBvZiB0aGUgaW1wZXJpYWwgY2l0eS4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXJ0aGFnZSIga2V5PSJwZXJzZXVzLENhcnRoYWdlIj5DYXJ0aGFnZTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBkZXN0cm95ZWQsIGJlY2F1c2UsIGJvdGggZnJvbSBpdHMgdmFzdCBwb3B1bGF0aW9uLCBhbmQgZnJvbQogICAgICAgdGhlIG5hdHVyYWwgYWR2YW50YWdlcyBvZiBpdHMgc2l0dWF0aW9uLCBiZWluZyBzdXJyb3VuZGVkIHdpdGggaGFyYm91cnMsIGFuZCBmb3J0aWZpZWQgd2l0aAogICAgICAgd2FsbHMsIGl0IGFwcGVhcmVkIHRvIHByb2plY3Qgb3V0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBrZXk9InRnbiw3MDAxMjQyIj5BZnJpY2E8L3BsYWNlTmFtZT4sIGFuZCB0bwogICAgICAgdGhyZWF0ZW4gdGhlIG1vc3QgcHJvZHVjdGl2ZSBpc2xhbmRzIG9mIHRoZSBSb21hbiBwZW9wbGUuIE9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gdGhlcmUgaXMgc2NhcmNlbHkgYSB2ZXN0aWdlIGxlZnQuIEZvciBpdCB3YXMgc2l0dWF0ZWQgb24gdGhlIHN0cmFpdHMKICAgICAgIGFuZCBpbiB0aGUgdmVyeSBqYXdzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGluIHN1Y2ggYSB3YXkgdGhhdAogICAgICAgYnkgbGFuZCBpdCBoZWxkIHRoZSBrZXlzIG9mIG1hbnkgY291bnRyaWVzLCBhbmQgdGhhdCBpdCBhbG1vc3QgY29ubmVjdGVkIHR3byBzZWFzLCBlcXVhbGx5CiAgICAgICBkZXNpcmFibGUgZm9yIHB1cnBvc2VzIG9mIG5hdmlnYXRpb24sIHdoaWNoIHdlcmUgc2VwYXJhdGVkIGJ5IHRoZSBzbWFsbGVzdCBwb3NzaWJsZSBkaXN0YW5jZS4KICAgICAgIFRoZXNlIHRvd25zLCB0aG91Z2ggdGhleSB3ZXJlIG91dCBvZiB0aGUgc2lnaHQgb2YgdGhlIGVtcGlyZSwgb3VyIGFuY2VzdG9ycyBub3Qgb25seSBjcnVzaGVkLAogICAgICAgYnV0LCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIHV0dGVybHkgZGVzdHJveWVkLCB0aGF0IHRoZXkgbWlnaHQgbmV2ZXIgYmUgYWJsZSB0byByZWNvdmVyIGFuZAogICAgICAgcmlzZSBhZ2FpbiBhbmQgZmxvdXJpc2guIDxtaWxlc3RvbmUgbj0iODgiIHVuaXQ9InNlY3Rpb24iIC8+IENvbmNlcm5pbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0aGV5IGRlbGliZXJhdGVkIG11Y2ggYW5kIGxvbmcuIFB1YmxpYyBkb2N1bWVudHMgYXJlCiAgICAgICBleHRhbnQsIE8gUm9tYW5zOyBtYW55IHJlc29sdXRpb25zIG9mIHRoZSBzZW5hdGUgYXJlIGV4dGFudC4gVGhvc2Ugd2lzZSBtZW4gZGVjaWRlZCB0aGF0LCBpZgogICAgICAgdGhleSB0b29rIGF3YXkgZnJvbSB0aGUgQ2FtcGFuaWFucyB0aGVpciBsYW5kcywgdGhlaXIgbWFnaXN0cmF0ZXMsIHRoZWlyIHNlbmF0ZSwgYW5kIHRoZQogICAgICAgcHVibGljIGNvdW5jaWwgb2YgdGhhdCBjaXR5LCB0aGV5IHdvdWxkIGxlYXZlIG5vIGltYWdlIHdoYXRldmVyIG9mIHRoZSByZXB1YmxpYzsgdGhlcmUgd291bGQKICAgICAgIGJlIG5vIHJlYXNvbiB3aGF0ZXZlciBmb3IgdGhlaXIgZmVhcmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LgogICAgICAgVGhlcmVmb3JlIHlvdSB3aWxsIGZpbmQgdGhpcyB3cml0dGVuIGluIGFuY2llbnQgcmVjb3JkcywgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBjaXR5IHdoaWNoCiAgICAgICBtaWdodCBiZSBhYmxlIHRvIHN1cHBseSB0aGUgbWVhbnMgZm9yIHRoZSBjdWx0aXZhdGlvbiBvZiB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgYSBwbGFjZSBmb3IgY29sbGVjdGluZyB0aGUgY3JvcHMgaW4sIGFuZCBzdG9yaW5nIHRoZW0sIGluIG9yZGVyIHRoYXQgdGhlIGZhcm1lcnMsCiAgICAgICB3aGVuIHdlYXJpZWQgd2l0aCB0aGUgY3VsdGl2YXRpb24gb2YgdGhlIGxhbmRzLCBtaWdodCBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBob21lcyBhZmZvcmRlZAogICAgICAgdGhlbSBieSB0aGUgY2l0eTsgYW5kIHRoYXQgb24gdGhhdCBhY2NvdW50IHRoZSBidWlsZGluZ3Mgb2YgdGhlIGNpdHkgd2VyZSBub3QgZGVzdHJveWVkLgogICAgICAgIDxtaWxlc3RvbmUgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBieSB0aGUgZGVjZW12aXJzLiBUaGVuIHRoYXQgb3RoZXIKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdoaWNoIGhhcyBiZWVuIGhlYXJkIG9mIGJlZm9yZSwgd2lsbCBiZQogICAgICAgc291Z2h0IGluIG9wcG9zaXRpb24gdG8gdGhpcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHRoZSBjb21tb24KICAgICAgIGNvdW50cnkgb2YgYWxsIG9mIHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.32.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz4gSW1waW91cyBtZW4gYXJlIGVuZGVhdm91cmluZyB0bwogICAgICAgdHJhbnNmZXIgb3VyIHJlcHVibGljIHRvIHRoYXQgdG93biBpbiB3aGljaCBvdXIgYW5jZXN0b3JzIGRlY2lkZWQgdGhhdCB0aGVyZSBzaG91bGQgYmUgbm8KICAgICAgIHJlcHVibGljIGF0IGFsbCwgd2hlbiB0aGV5IHJlc29sdmVkIHRoYXQgdGhlcmUgd2VyZSBidXQgdGhyZWUgY2l0aWVzIGluIHRoZSB3aG9sZSBlYXJ0aCwKICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcnRoYWdlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgd2hpY2ggY291bGQKICAgICAgIGFzcGlyZSB0byB0aGUgcG93ZXIgYW5kIG5hbWUgb2YgdGhlIGltcGVyaWFsIGNpdHkuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcnRoYWdlIj5DYXJ0aGFnZTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBkZXN0cm95ZWQsIGJlY2F1c2UsIGJvdGggZnJvbSBpdHMgdmFzdCBwb3B1bGF0aW9uLCBhbmQgZnJvbQogICAgICAgdGhlIG5hdHVyYWwgYWR2YW50YWdlcyBvZiBpdHMgc2l0dWF0aW9uLCBiZWluZyBzdXJyb3VuZGVkIHdpdGggaGFyYm91cnMsIGFuZCBmb3J0aWZpZWQgd2l0aAogICAgICAgd2FsbHMsIGl0IGFwcGVhcmVkIHRvIHByb2plY3Qgb3V0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDIiPkFmcmljYTwvcGxhY2VOYW1lPiwgYW5kIHRvCiAgICAgICB0aHJlYXRlbiB0aGUgbW9zdCBwcm9kdWN0aXZlIGlzbGFuZHMgb2YgdGhlIFJvbWFuIHBlb3BsZS4gT2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+IHRoZXJlIGlzIHNjYXJjZWx5IGEgdmVzdGlnZSBsZWZ0LiBGb3IgaXQgd2FzIHNpdHVhdGVkIG9uIHRoZSBzdHJhaXRzCiAgICAgICBhbmQgaW4gdGhlIHZlcnkgamF3cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGluIHN1Y2ggYSB3YXkgdGhhdAogICAgICAgYnkgbGFuZCBpdCBoZWxkIHRoZSBrZXlzIG9mIG1hbnkgY291bnRyaWVzLCBhbmQgdGhhdCBpdCBhbG1vc3QgY29ubmVjdGVkIHR3byBzZWFzLCBlcXVhbGx5CiAgICAgICBkZXNpcmFibGUgZm9yIHB1cnBvc2VzIG9mIG5hdmlnYXRpb24sIHdoaWNoIHdlcmUgc2VwYXJhdGVkIGJ5IHRoZSBzbWFsbGVzdCBwb3NzaWJsZSBkaXN0YW5jZS4KICAgICAgIFRoZXNlIHRvd25zLCB0aG91Z2ggdGhleSB3ZXJlIG91dCBvZiB0aGUgc2lnaHQgb2YgdGhlIGVtcGlyZSwgb3VyIGFuY2VzdG9ycyBub3Qgb25seSBjcnVzaGVkLAogICAgICAgYnV0LCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIHV0dGVybHkgZGVzdHJveWVkLCB0aGF0IHRoZXkgbWlnaHQgbmV2ZXIgYmUgYWJsZSB0byByZWNvdmVyIGFuZAogICAgICAgcmlzZSBhZ2FpbiBhbmQgZmxvdXJpc2guIDwvdHJhbnNsYXRpb24+"
translation['2.32.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz4gQ29uY2VybmluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gdGhleSBkZWxpYmVyYXRlZCBtdWNoIGFuZCBsb25nLiBQdWJsaWMgZG9jdW1lbnRzIGFyZQogICAgICAgZXh0YW50LCBPIFJvbWFuczsgbWFueSByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlIGFyZSBleHRhbnQuIFRob3NlIHdpc2UgbWVuIGRlY2lkZWQgdGhhdCwgaWYKICAgICAgIHRoZXkgdG9vayBhd2F5IGZyb20gdGhlIENhbXBhbmlhbnMgdGhlaXIgbGFuZHMsIHRoZWlyIG1hZ2lzdHJhdGVzLCB0aGVpciBzZW5hdGUsIGFuZCB0aGUKICAgICAgIHB1YmxpYyBjb3VuY2lsIG9mIHRoYXQgY2l0eSwgdGhleSB3b3VsZCBsZWF2ZSBubyBpbWFnZSB3aGF0ZXZlciBvZiB0aGUgcmVwdWJsaWM7IHRoZXJlIHdvdWxkCiAgICAgICBiZSBubyByZWFzb24gd2hhdGV2ZXIgZm9yIHRoZWlyIGZlYXJpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LgogICAgICAgVGhlcmVmb3JlIHlvdSB3aWxsIGZpbmQgdGhpcyB3cml0dGVuIGluIGFuY2llbnQgcmVjb3JkcywgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBjaXR5IHdoaWNoCiAgICAgICBtaWdodCBiZSBhYmxlIHRvIHN1cHBseSB0aGUgbWVhbnMgZm9yIHRoZSBjdWx0aXZhdGlvbiBvZiB0aGUgQ2FtcGFuaWFuIGRpc3RyaWN0LCB0aGF0IHRoZXJlCiAgICAgICBzaG91bGQgYmUgYSBwbGFjZSBmb3IgY29sbGVjdGluZyB0aGUgY3JvcHMgaW4sIGFuZCBzdG9yaW5nIHRoZW0sIGluIG9yZGVyIHRoYXQgdGhlIGZhcm1lcnMsCiAgICAgICB3aGVuIHdlYXJpZWQgd2l0aCB0aGUgY3VsdGl2YXRpb24gb2YgdGhlIGxhbmRzLCBtaWdodCBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBob21lcyBhZmZvcmRlZAogICAgICAgdGhlbSBieSB0aGUgY2l0eTsgYW5kIHRoYXQgb24gdGhhdCBhY2NvdW50IHRoZSBidWlsZGluZ3Mgb2YgdGhlIGNpdHkgd2VyZSBub3QgZGVzdHJveWVkLgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.33.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlNlZSwgbm93LCBob3cgd2lkZSBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY291bnNlbHMgb2Ygb3VyIGFuY2VzdG9ycyBhbmQgdGhlIGluc2FuZQogICAgICAgcHJvamVjdHMgb2YgdGhlc2UgbWVuLiBUaGV5IGNob3NlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0byBiZSBhCiAgICAgICByZWZ1Z2UgZm9yIG91ciBmYXJtZXJzLOKAlGEgbWFya2V0IGZvciB0aGUgY291bnRyeSBwZW9wbGUs4oCUYSBiYXJuIGFuZAogICAgICAgZ3JhbmFyeSBmb3IgdGhlIENhbXBhbmlhbiBkaXN0cmljdC4gVGhlc2UgbWVuLCBoYXZpbmcgZXhwZWxsZWQgdGhlIGZhcm1lcnMsIGhhdmUgd2FzdGVkIGFuZAogICAgICAgc3F1YW5kZXJlZCB5b3VyIHJldmVudWVzLCBhcmUgcmFpc2luZyB0aGlzIHNhbWUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGludG8gdGhlIHNlYXQgb2YgYSBuZXcgcmVwdWJsaWMsIGFyZSBwcmVwYXJpbmcgYSB2YXN0IG1hc3MgdG8gYmUgYW4gZW5lbXkKICAgICAgIHRvIHRoZSBvbGQgcmVwdWJsaWMuIEJ1dCBpZiBvdXIgYW5jZXN0b3JzIGhhZCB0aG91Z2h0IHRoYXQgYW55IG9uZSBpbiBzdWNoIGFuIGlsbHVzdHJpb3VzCiAgICAgICBlbXBpcmUsIGluIHN1Y2ggYW4gYWRtaXJhYmxlIGNvbnN0aXR1dGlvbiBhcyB0aGF0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHdvdWxkIGhhdmUgYmVlbiBsaWtlCiAgICAgICBNYXJjdXMgQnJ1dHVzIG9yIFB1YmxpdXMgUnVsbHVzLCAoZm9yIHRoZXNlIGFyZSB0aGUgb25seSB0d28gbWVuIHdob20gd2UgaGF2ZSBoaXRoZXJ0byBzZWVuLAogICAgICAgd2hvIGhhdmUgd2lzaGVkIHRvIHRyYW5zZmVyIGFsbCB0aGlzIHJlcHVibGljIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwpIHRoZXkgd291bGQgbm90LCBpbiB0cnV0aCwgaGF2ZSBsZWZ0IGV2ZW4gdGhlIG5hbWUgb2YgdGhhdCBjaXR5IGluCiAgICAgICBleGlzdGVuY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgdGhvdWdodCwgdGhhdCBpbiB0aGUgY2FzZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FydGhhZ2UiIGtleT0icGVyc2V1cyxDYXJ0aGFnZSI+Q2FydGhhZ2U8L3BsYWNlTmFtZT4sIGV2ZW4gaWYgdGhleSBoYWQgdGFrZW4gYXdheSB0aGVpciBzZW5hdGVzIGFuZCB0aGVpciBtYWdpc3RyYXRlcywgYW5kCiAgICAgICBkZXByaXZlZCB0aGUgY2l0aXplbnMgb2YgdGhlIGxhbmRzLCBzdGlsbCBtZW4gd291bGQgbm90IGJlIHdhbnRpbmcgd2hvIHdvdWxkIHJlc3RvcmUgdGhvc2UKICAgICAgIGNpdGllcywgYW5kIGNoYW5nZSB0aGUgZXhpc3Rpbmcgc3RhdGUgb2YgdGhpbmdzIGluIHRoZW0gYmVmb3JlIHdlIGNvdWxkIGhlYXIgb2YgaXQuIEJ1dCBoZXJlLAogICAgICAgdW5kZXIgdGhlIHZlcnkgZXllcyBvZiB0aGUgc2VuYXRlIGFuZCBSb21hbiBwZW9wbGUsIHRoZXkgdGhvdWdodCB0aGF0IG5vdGhpbmcgY291bGQgdGFrZQogICAgICAgcGxhY2Ugd2hpY2ggbWlnaHQgbm90IGJlIHB1dCBkb3duIGFuZCBleHRpbmd1aXNoZWQgYmVmb3JlIGl0IGhhZCBnb3QgdG8gYW55IGhlYWQsIG9yIGhhZAogICAgICAgYXNzdW1lZCBhbnkgZGVmaW5pdGUgc2hhcGUuIE5vciBkaWQgdGhhdCBtYXR0ZXIgZGVjZWl2ZSB0aG9zZSBtZW4sIGVuZHVlZCBhcyB0aGV5IHdlcmUgd2l0aAogICAgICAgZGl2aW5lIHdpc2RvbSBhbmQgcHJ1ZGVuY2UuIEZvciBhZnRlciB0aGUgY29uc3Vsc2hpcCBvZiBRdWludHVzIEZ1bHZpdXMgYW5kIFF1aW50dXMgRmFiaXVzLAogICAgICAgYnkgd2hvbSwgd2hlbiB0aGV5IHdlcmUgY29uc3VscywgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3YXMKICAgICAgIGRlZmVhdGVkIGFuZCB0YWtlbiwgSSB3aWxsIG5vdCBzYXkgdGhlcmUgaGFzIGJlZW4gbm90aGluZyBkb25lLCBidXQgbm90aGluZyBoYXMgYmVlbiBldmVuCiAgICAgICBpbWFnaW5lZCBpbiB0aGF0IGNpdHkgYWdhaW5zdCB0aGlzIHJlcHVibGljLiA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB0byBiZSBhCiAgICAgICByZWZ1Z2UgZm9yIG91ciBmYXJtZXJzLOKAlGEgbWFya2V0IGZvciB0aGUgY291bnRyeSBwZW9wbGUs4oCUYSBiYXJuIGFuZAogICAgICAgZ3JhbmFyeSBmb3IgdGhlIENhbXBhbmlhbiBkaXN0cmljdC4gVGhlc2UgbWVuLCBoYXZpbmcgZXhwZWxsZWQgdGhlIGZhcm1lcnMsIGhhdmUgd2FzdGVkIGFuZAogICAgICAgc3F1YW5kZXJlZCB5b3VyIHJldmVudWVzLCBhcmUgcmFpc2luZyB0aGlzIHNhbWUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGludG8gdGhlIHNlYXQgb2YgYSBuZXcgcmVwdWJsaWMsIGFyZSBwcmVwYXJpbmcgYSB2YXN0IG1hc3MgdG8gYmUgYW4gZW5lbXkKICAgICAgIHRvIHRoZSBvbGQgcmVwdWJsaWMuIEJ1dCBpZiBvdXIgYW5jZXN0b3JzIGhhZCB0aG91Z2h0IHRoYXQgYW55IG9uZSBpbiBzdWNoIGFuIGlsbHVzdHJpb3VzCiAgICAgICBlbXBpcmUsIGluIHN1Y2ggYW4gYWRtaXJhYmxlIGNvbnN0aXR1dGlvbiBhcyB0aGF0IG9mIHRoZSBSb21hbiBwZW9wbGUsIHdvdWxkIGhhdmUgYmVlbiBsaWtlCiAgICAgICBNYXJjdXMgQnJ1dHVzIG9yIFB1YmxpdXMgUnVsbHVzLCAoZm9yIHRoZXNlIGFyZSB0aGUgb25seSB0d28gbWVuIHdob20gd2UgaGF2ZSBoaXRoZXJ0byBzZWVuLAogICAgICAgd2hvIGhhdmUgd2lzaGVkIHRvIHRyYW5zZmVyIGFsbCB0aGlzIHJlcHVibGljIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwpIHRoZXkgd291bGQgbm90LCBpbiB0cnV0aCwgaGF2ZSBsZWZ0IGV2ZW4gdGhlIG5hbWUgb2YgdGhhdCBjaXR5IGluCiAgICAgICBleGlzdGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['2.33.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgdGhvdWdodCwgdGhhdCBpbiB0aGUgY2FzZSBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXJ0aGFnZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FydGhhZ2UiPkNhcnRoYWdlPC9wbGFjZU5hbWU+LCBldmVuIGlmIHRoZXkgaGFkIHRha2VuIGF3YXkgdGhlaXIgc2VuYXRlcyBhbmQgdGhlaXIgbWFnaXN0cmF0ZXMsIGFuZAogICAgICAgZGVwcml2ZWQgdGhlIGNpdGl6ZW5zIG9mIHRoZSBsYW5kcywgc3RpbGwgbWVuIHdvdWxkIG5vdCBiZSB3YW50aW5nIHdobyB3b3VsZCByZXN0b3JlIHRob3NlCiAgICAgICBjaXRpZXMsIGFuZCBjaGFuZ2UgdGhlIGV4aXN0aW5nIHN0YXRlIG9mIHRoaW5ncyBpbiB0aGVtIGJlZm9yZSB3ZSBjb3VsZCBoZWFyIG9mIGl0LiBCdXQgaGVyZSwKICAgICAgIHVuZGVyIHRoZSB2ZXJ5IGV5ZXMgb2YgdGhlIHNlbmF0ZSBhbmQgUm9tYW4gcGVvcGxlLCB0aGV5IHRob3VnaHQgdGhhdCBub3RoaW5nIGNvdWxkIHRha2UKICAgICAgIHBsYWNlIHdoaWNoIG1pZ2h0IG5vdCBiZSBwdXQgZG93biBhbmQgZXh0aW5ndWlzaGVkIGJlZm9yZSBpdCBoYWQgZ290IHRvIGFueSBoZWFkLCBvciBoYWQKICAgICAgIGFzc3VtZWQgYW55IGRlZmluaXRlIHNoYXBlLiBOb3IgZGlkIHRoYXQgbWF0dGVyIGRlY2VpdmUgdGhvc2UgbWVuLCBlbmR1ZWQgYXMgdGhleSB3ZXJlIHdpdGgKICAgICAgIGRpdmluZSB3aXNkb20gYW5kIHBydWRlbmNlLiBGb3IgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgUXVpbnR1cyBGdWx2aXVzIGFuZCBRdWludHVzIEZhYml1cywKICAgICAgIGJ5IHdob20sIHdoZW4gdGhleSB3ZXJlIGNvbnN1bHMsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3YXMKICAgICAgIGRlZmVhdGVkIGFuZCB0YWtlbiwgSSB3aWxsIG5vdCBzYXkgdGhlcmUgaGFzIGJlZW4gbm90aGluZyBkb25lLCBidXQgbm90aGluZyBoYXMgYmVlbiBldmVuCiAgICAgICBpbWFnaW5lZCBpbiB0aGF0IGNpdHkgYWdhaW5zdCB0aGlzIHJlcHVibGljLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPk1hbnkgd2FycyBoYXZlIGJlZW4gd2FnZWQgc2luY2UgdGhhdCB0aW1lIHdpdGgga2luZ3Ms4oCUd2l0aCBQaGlsaXAsIGFuZCBBbnRpb2NodXMsCiAgICAgICBhbmQgUGVyc2VzLCBhbmQgUHNldWRvcGhpbGlwcHVzLCBhbmQgQXJpc3RvbmljdXMsIGFuZCBNaXRocmlkYXRlcywgYW5kIG90aGVycy4gTWFueSB0ZXJyaWJsZQogICAgICAgd2FycyBoYXZlIGV4aXN0ZWQgYmVzaWRlLeKAlHRoZSBDYXJ0aGFnaW5pYW4sIHRoZSBDb3JpbnRoaWFuLCBhbmQgdGhlIE51bWFudGlhbiB3YXJzLgogICAgICAgVGhlcmUgaGF2ZSBiZWVuIGFsc28gbWFueSBkb21lc3RpYyBzZWRpdGlvbnMsIHdoaWNoIEkgcGFzcyBvdmVyLiBUaGVyZSBoYXZlIGJlZW4gd2FycyB3aXRoCiAgICAgICBvdXIgYWxsaWVzLOKAlHRoZSBGcmVnZWxsYW4gd2FyLCB0aGUgTWFyc2ljIHdhcjsgaW4gYWxsIHdoaWNoIGRvbWVzdGljIGFuZCBmb3JlaWduCiAgICAgICB3YXJzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiBoYXMgbm90IG9ubHkgbm90IGJlZW4gYW55IGhpbmRyYW5jZSB0bwogICAgICAgdXMsIGJ1dCBoYXMgYWZmb3JkZWQgdXMgbW9zdCBzZWFzb25hYmxlIGFzc2lzdGFuY2UsIGluIHByb3ZpZGluZyB0aGUgbWVhbnMgb2Ygd2FyLCBpbgogICAgICAgZXF1aXBwaW5nIG91ciBhcm1pZXMsIGFuZCByZWNlaXZpbmcgdGhlbSBpbiB0aGVpciBob3VzZXMgYW5kIGhvbWVzLiBUaGVyZSB3ZXJlIG5vIG1lbiBpbiB0aGUKICAgICAgIGNpdHksIHdobywgYnkgZXZpbC1kaXNwb3NlZCBhc3NlbWJsaWVzLCBieSB0dXJidWxlbnQgcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSwgb3IgYnkgdW5qdXN0CiAgICAgICBleGVydGlvbnMgb2YgYXV0aG9yaXR5LCB0aHJldyB0aGUgcmVwdWJsaWMgaW50byBjb25mdXNpb24sIGFuZCBzb3VnaHQgcHJldGV4dHMgZm9yCiAgICAgICByZXZvbHV0aW9uLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOTEiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBubyBvbmUgaGFkIGFueSBwb3dlciBvZiBzdW1tb25pbmcgYW4KICAgICAgIGFzc2VtYmx5LCBvciBvZiBjb252ZW5pbmcgYW55IHB1YmxpYyBjb3VuY2lsLiBNZW4gd2VyZSBub3QgY2FycmllZCBhd2F5IGJ5IGFueSBkZXNpcmUgZm9yCiAgICAgICByZW5vd24sIGJlY2F1c2Ugd2hlcmUgdGhlcmUgYXJlIG5vIGhvbm91cnMgcHVibGljbHkgY29uZmVycmVkLCB0aGVyZSB0aGVyZSBjYW4gYmUgbm8gY292ZXRvdXMKICAgICAgIGRlc2lyZSBvZiByZXB1dGF0aW9uLiBUaGV5IHdlcmUgbm90IHF1YXJyZWxpbmcgd2l0aCBvbmUgYW5vdGhlciBvdXQgb2Ygcml2YWxyeSBvciBvdXQgb2YKICAgICAgIGFtYml0aW9uOyBmb3IgdGhleSBoYWQgbm90aGluZyBsZWZ0IHRvIHF1YXJyZWwgYWJvdXQs4oCUdGhleSBoYWQgbm90aGluZyB3aGljaCB0aGV5CiAgICAgICBjb3VsZCBzZWVrIGZvciBpbiBvcHBvc2l0aW9uIHRvIG9uZSBhbm90aGVyLOKAlHRoZXkgaGFkIG5vIHJvb20gZm9yIGRpc3NlbnNpb25zLgogICAgICAgVGhlcmVmb3JlLCBpdCB3YXMgaW4gYWNjb3JkYW5jZSB3aXRoIGEgZGVsaWJlcmF0ZSBzeXN0ZW0sIGFuZCB3aXRoIHJlYWwgd2lzZG9tLCB0aGF0IG91cgogICAgICAgYW5jZXN0b3JzIGNoYW5nZWQgdGhlIG5hdHVyYWwgYXJyb2dhbmNlIGFuZCBpbnRvbGVyYWJsZSBmZXJvY2l0eSBvZiB0aGUgQ2FtcGFuaWFucyBpbnRvIGEKICAgICAgIHRob3JvdWdobHkgaW5hY3RpdmUgYW5kIGxhenkgdHJhbnF1aWxsaXR5LiBBbmQgYnkgdGhpcyBtZWFucyB0aGV5IGF2b2lkZWQgdGhlIHJlcHJvYWNoIG9mCiAgICAgICBjcnVlbHR5LCBiZWNhdXNlIHRoZXkgZGlkIG5vdCBkZXN0cm95IGZyb20gb2ZmIHRoZSBmYWNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBhIG1vc3QgYmVhdXRpZnVsIGNpdHk7IGFuZCB0aGV5IDxwYiBuPSIyNTIiIC8+IHByb3ZpZGVkIHdlbGwgZm9yIHRoZQogICAgICAgZnV0dXJlLCBpbiB0aGF0LCBoYXZpbmcgY3V0IG91dCBhbGwgdGhlIHNpbmV3cyBvZiB0aGUgY2l0eSwgdGhleSBsZWZ0IHRoZSBjaXR5IGl0c2VsZgogICAgICAgZW5mZWVibGVkIGFuZCBkaXNhYmxlZC4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjkyIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGhhcyBub3Qgb25seSBub3QgYmVlbiBhbnkgaGluZHJhbmNlIHRvCiAgICAgICB1cywgYnV0IGhhcyBhZmZvcmRlZCB1cyBtb3N0IHNlYXNvbmFibGUgYXNzaXN0YW5jZSwgaW4gcHJvdmlkaW5nIHRoZSBtZWFucyBvZiB3YXIsIGluCiAgICAgICBlcXVpcHBpbmcgb3VyIGFybWllcywgYW5kIHJlY2VpdmluZyB0aGVtIGluIHRoZWlyIGhvdXNlcyBhbmQgaG9tZXMuIFRoZXJlIHdlcmUgbm8gbWVuIGluIHRoZQogICAgICAgY2l0eSwgd2hvLCBieSBldmlsLWRpc3Bvc2VkIGFzc2VtYmxpZXMsIGJ5IHR1cmJ1bGVudCByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlLCBvciBieSB1bmp1c3QKICAgICAgIGV4ZXJ0aW9ucyBvZiBhdXRob3JpdHksIHRocmV3IHRoZSByZXB1YmxpYyBpbnRvIGNvbmZ1c2lvbiwgYW5kIHNvdWdodCBwcmV0ZXh0cyBmb3IKICAgICAgIHJldm9sdXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['2.33.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIG5vIG9uZSBoYWQgYW55IHBvd2VyIG9mIHN1bW1vbmluZyBhbgogICAgICAgYXNzZW1ibHksIG9yIG9mIGNvbnZlbmluZyBhbnkgcHVibGljIGNvdW5jaWwuIE1lbiB3ZXJlIG5vdCBjYXJyaWVkIGF3YXkgYnkgYW55IGRlc2lyZSBmb3IKICAgICAgIHJlbm93biwgYmVjYXVzZSB3aGVyZSB0aGVyZSBhcmUgbm8gaG9ub3VycyBwdWJsaWNseSBjb25mZXJyZWQsIHRoZXJlIHRoZXJlIGNhbiBiZSBubyBjb3ZldG91cwogICAgICAgZGVzaXJlIG9mIHJlcHV0YXRpb24uIFRoZXkgd2VyZSBub3QgcXVhcnJlbGluZyB3aXRoIG9uZSBhbm90aGVyIG91dCBvZiByaXZhbHJ5IG9yIG91dCBvZgogICAgICAgYW1iaXRpb247IGZvciB0aGV5IGhhZCBub3RoaW5nIGxlZnQgdG8gcXVhcnJlbCBhYm91dCzigJR0aGV5IGhhZCBub3RoaW5nIHdoaWNoIHRoZXkKICAgICAgIGNvdWxkIHNlZWsgZm9yIGluIG9wcG9zaXRpb24gdG8gb25lIGFub3RoZXIs4oCUdGhleSBoYWQgbm8gcm9vbSBmb3IgZGlzc2Vuc2lvbnMuCiAgICAgICBUaGVyZWZvcmUsIGl0IHdhcyBpbiBhY2NvcmRhbmNlIHdpdGggYSBkZWxpYmVyYXRlIHN5c3RlbSwgYW5kIHdpdGggcmVhbCB3aXNkb20sIHRoYXQgb3VyCiAgICAgICBhbmNlc3RvcnMgY2hhbmdlZCB0aGUgbmF0dXJhbCBhcnJvZ2FuY2UgYW5kIGludG9sZXJhYmxlIGZlcm9jaXR5IG9mIHRoZSBDYW1wYW5pYW5zIGludG8gYQogICAgICAgdGhvcm91Z2hseSBpbmFjdGl2ZSBhbmQgbGF6eSB0cmFucXVpbGxpdHkuIEFuZCBieSB0aGlzIG1lYW5zIHRoZXkgYXZvaWRlZCB0aGUgcmVwcm9hY2ggb2YKICAgICAgIGNydWVsdHksIGJlY2F1c2UgdGhleSBkaWQgbm90IGRlc3Ryb3kgZnJvbSBvZmYgdGhlIGZhY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYSBtb3N0IGJlYXV0aWZ1bCBjaXR5OyBhbmQgdGhleSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTIiIC8+IHByb3ZpZGVkIHdlbGwgZm9yIHRoZQogICAgICAgZnV0dXJlLCBpbiB0aGF0LCBoYXZpbmcgY3V0IG91dCBhbGwgdGhlIHNpbmV3cyBvZiB0aGUgY2l0eSwgdGhleSBsZWZ0IHRoZSBjaXR5IGl0c2VsZgogICAgICAgZW5mZWVibGVkIGFuZCBkaXNhYmxlZC4gPC90cmFuc2xhdGlvbj4="
translation['2.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.34.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIGRlc2lnbnMgb2Ygb3VyIGFuY2VzdG9ycyBzZWVtZWQsIGFzIEkgaGF2ZSBzYWlkIGJlZm9yZSwgYmxhbWFibGUgaW4gdGhlIGV5ZXMgb2YKICAgICAgIE1hcmN1cyBCcnV0dXMgYW5kIFB1YmxpdXMgUnVsbHVzLiBOb3IsIE8gUHVibGl1cyBSdWxsdXMsIGRvIHRob3NlIG9tZW5zIGFuZCBhdXNwaWNlcwogICAgICAgZW5jb3VudGVyZWQgYnkgTWFyY3VzIEJydXR1cyBkZXRlciB5b3UgZnJvbSBzaW1pbGFyIG1hZG5lc3MuIEZvciBib3RoIGhlIHdobyBsZWQgYSBjb2xvbnkgdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqIiAvPiBhbmQgdGhleSB3aG8gdG9vayB1cG9uIHRoZW1zZWx2ZXMgdGhlIG1hZ2lzdHJhY3kgdGhlcmUsIGFuZCB3aG8gaGFkIGFueQogICAgICAgc2hhcmUgaW4gdGhlIGNvbmR1Y3RpbmcgYSBjb2xvbnkgdG8gdGhhdCBzcG90LCBhbmQgaW4gdGhlIGhvbm91cnMgdG8gYmUgaGFkIHRoZXJlLCBvciBpbiB0aGUKICAgICAgIG9mZmljZXMgdG8gYmUgZW5qb3llZCB0aGVyZSwgaGF2ZSBhbGwgc3VmZmVyZWQgdGhlIG1vc3QgdGVycmlibGUgcHVuaXNobWVudHMgYWxsb3R0ZWQgdG8gdGhlCiAgICAgICB3aWNrZWQuIEFuZCBzaW5jZSBJIGhhdmUgbWFkZSBtZW50aW9uIG9mIEJydXR1cyBhbmQgdGhhdCB0aW1lLCBJIHdpbGwgYWxzbyByZWxhdGUgd2hhdCBJIHNhdwogICAgICAgbXlzZWxmIHdoZW4gSSBoYWQgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4s4oCUd2hlbgogICAgICAgdGhlIGNvbG9ueSBoYWQgYmVlbiBqdXN0IGVzdGFibGlzaGVkIHRoZXJlIGJ5IEx1Y2l1cyBDb25zaWRpdXMgYW5kIFNleHR1cyBTYWx0aXVzIHRoZQogICAgICAgcHJhZXRvcnMsIChhcyB0aGV5IGNhbGxlZCB0aGVtc2VsdmVzLCkgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgaG93IG11Y2ggcHJpZGUgdGhlIHNpdHVhdGlvbgogICAgICAgaXRzZWxmIGluc3BpcmVzIGl0cyBpbmhhYml0YW50cyB3aXRoOyBzbyBncmVhdCB0aGF0IGl0IHdhcyB2ZXJ5IGludGVsbGlnaWJsZSBhbmQgdmlzaWJsZSB3aGVuCiAgICAgICB0aGUgY29sb255IGhhZCBvbmx5IGJlZW4gc2V0dGxlZCB0aGVyZSBhIGZldyBkYXlzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOTMiIHVuaXQ9InNlY3Rpb24iIC8+IEZvciBpbgogICAgICAgdGhlIGZpcnN0IHBsYWNlLCBhcyBJIHNhaWQsIHRob3VnaCBzaW1pbGFyIG9mZmljZXJzIGluIHRoZSBvdGhlciBjb2xvbmllcyBhcmUgY2FsbGVkCiAgICAgICBkdXVtdmlycywgdGhlc2UgbWVuIGNob3NlIHRvIGNhbGwgdGhlbXNlbHZlcyBwcmFldG9ycy4gQnV0IGlmIHRoZWlyIGZpcnN0IHllYXIgb2Ygb2ZmaWNlCiAgICAgICBpbnNwaXJlZCB0aGVtIHdpdGggc3VjaCBkZXNpcmVzIGFzIHRoYXQsIGRvIG5vdCB5b3Ugc3VwcG9zZSB0aGF0IGluIGEgZmV3IHllYXJzIHRoZXkgd291bGQgYmUKICAgICAgIGxpa2VseSB0byB0YWtlIGEgZmFuY3kgdG8gdGhlIG5hbWUgb2YgY29uc3Vscz8gSW4gdGhlIG5leHQgcGxhY2UsIHRoZXkgd2VyZSBwcmVjZWRlZCBieQogICAgICAgbGljdG9ycywgbm90IHdpdGggc3RhdmVzLCBidXQgd2l0aCB0d28gPGZvcmVpZ24gbGFuZz0ibGEiPmZhY2VzPC9mb3JlaWduPiwganVzdCBhcyBsaWN0b3JzIGdvCiAgICAgICBiZWZvcmUgdGhlIHByYWV0b3JzIGhlcmUuIFRoZSBncmVhdGVyIHZpY3RpbXMgd2VyZSBwbGFjZWQgaW4gdGhlIGZvcnVtLCB3aGljaCwgYWZ0ZXIgdGhleSBoYWQKICAgICAgIGJlZW4gYXBwcm92ZWQgYnkgdGhlIGNvbGxlZ2Ugb2YgcHJpZXN0cywgd2VyZSBzYWNyaWZpY2VkIGF0IHRoZSB2b2ljZSBvZiB0aGUgY3JpZXIsIGFuZCB0aGUKICAgICAgIG11c2ljIG9mIGEgZmx1dGUtcGxheWVyLCBieSB0aGUgcHJhZXRvcnMgZnJvbSB0aGVpciB0cmlidW5hbCwgYXMgdGhleSBhcmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSB1cyB3aG8gYXJlIGNvbnN1bHMuIEFmdGVyIHRoYXQsIHRoZSBjb25zY3JpcHQgZmF0aGVycwogICAgICAgd2VyZSBzdW1tb25lZC4gQnV0IGFmdGVyIHRoaXMsIGl0IHdhcyBhbG1vc3QgbW9yZSB0aGFuIG9uZSBjb3VsZCBlbmR1cmUsIHRvIHNlZSB0aGUKICAgICAgIGNvdW50ZW5hbmNlIG9mIENvbnNpZGl1cy4gVGhlIG1hbiB3aG9tIHdlIGhhZCBzZWVuIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gc2hyaXZlbGVkIGFuZCB3YXN0ZWQgYXdheSwgaW4gYSBjb250ZW1wdGlibGUgYW5kIGFiamVjdCBjb25kaXRpb24sIHdoZW4gd2UKICAgICAgIHNhdyBoaW0gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiB3aXRoIENhbXBhbmlhbiBoYXVnaHRpbmVzcyBhbmQKICAgICAgIHJveWFsIHByaWRlLCB3ZSBzZWVtZWQgdG8gYmUgbG9va2luZyBhdCB0aGUgTWFnaWksIGFuZCBCbG9zc2lpIGFuZCBKdWJlbGlpLiA8bWlsZXN0b25lIG49Ijk0IiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgbm93LCBpbiB3aGF0IGFsYXJtIGFsbCB0aGUgY29tbW9uIHBlb3BsZSB3ZXJlISBJbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMzE3MjciIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBTZXBsYXNpYW4gcm9hZCwgd2hhdCBjcm93ZHMgYXNzZW1ibGVkLCBvZiBtZW4KICAgICAgIGlucXVpcmluZyB3aGF0IGVkaWN0IHRoZSBwcmFldG9yIGhhZCBpc3N1ZWQ/IHdoZXJlIGhlIHdhcyBzdXBwaW5nPyB3aGF0IGhlIGhhZCBzYWlkPyBBbmQgd2UKICAgICAgIHdobyBoYWQgY29tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgd2VyZSBub3QgY2FsbGVkIGd1ZXN0cywgYnV0IGZvcmVpZ25lcnMgYW5kIHN0cmFuZ2Vycy4KICAgICAgICA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4KICAgICAgIDxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiBkZXNjPSIqKioqIiAvPiBhbmQgdGhleSB3aG8gdG9vayB1cG9uIHRoZW1zZWx2ZXMgdGhlIG1hZ2lzdHJhY3kgdGhlcmUsIGFuZCB3aG8gaGFkIGFueQogICAgICAgc2hhcmUgaW4gdGhlIGNvbmR1Y3RpbmcgYSBjb2xvbnkgdG8gdGhhdCBzcG90LCBhbmQgaW4gdGhlIGhvbm91cnMgdG8gYmUgaGFkIHRoZXJlLCBvciBpbiB0aGUKICAgICAgIG9mZmljZXMgdG8gYmUgZW5qb3llZCB0aGVyZSwgaGF2ZSBhbGwgc3VmZmVyZWQgdGhlIG1vc3QgdGVycmlibGUgcHVuaXNobWVudHMgYWxsb3R0ZWQgdG8gdGhlCiAgICAgICB3aWNrZWQuIEFuZCBzaW5jZSBJIGhhdmUgbWFkZSBtZW50aW9uIG9mIEJydXR1cyBhbmQgdGhhdCB0aW1lLCBJIHdpbGwgYWxzbyByZWxhdGUgd2hhdCBJIHNhdwogICAgICAgbXlzZWxmIHdoZW4gSSBoYWQgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4s4oCUd2hlbgogICAgICAgdGhlIGNvbG9ueSBoYWQgYmVlbiBqdXN0IGVzdGFibGlzaGVkIHRoZXJlIGJ5IEx1Y2l1cyBDb25zaWRpdXMgYW5kIFNleHR1cyBTYWx0aXVzIHRoZQogICAgICAgcHJhZXRvcnMsIChhcyB0aGV5IGNhbGxlZCB0aGVtc2VsdmVzLCkgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgaG93IG11Y2ggcHJpZGUgdGhlIHNpdHVhdGlvbgogICAgICAgaXRzZWxmIGluc3BpcmVzIGl0cyBpbmhhYml0YW50cyB3aXRoOyBzbyBncmVhdCB0aGF0IGl0IHdhcyB2ZXJ5IGludGVsbGlnaWJsZSBhbmQgdmlzaWJsZSB3aGVuCiAgICAgICB0aGUgY29sb255IGhhZCBvbmx5IGJlZW4gc2V0dGxlZCB0aGVyZSBhIGZldyBkYXlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.34.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGluCiAgICAgICB0aGUgZmlyc3QgcGxhY2UsIGFzIEkgc2FpZCwgdGhvdWdoIHNpbWlsYXIgb2ZmaWNlcnMgaW4gdGhlIG90aGVyIGNvbG9uaWVzIGFyZSBjYWxsZWQKICAgICAgIGR1dW12aXJzLCB0aGVzZSBtZW4gY2hvc2UgdG8gY2FsbCB0aGVtc2VsdmVzIHByYWV0b3JzLiBCdXQgaWYgdGhlaXIgZmlyc3QgeWVhciBvZiBvZmZpY2UKICAgICAgIGluc3BpcmVkIHRoZW0gd2l0aCBzdWNoIGRlc2lyZXMgYXMgdGhhdCwgZG8gbm90IHlvdSBzdXBwb3NlIHRoYXQgaW4gYSBmZXcgeWVhcnMgdGhleSB3b3VsZCBiZQogICAgICAgbGlrZWx5IHRvIHRha2UgYSBmYW5jeSB0byB0aGUgbmFtZSBvZiBjb25zdWxzPyBJbiB0aGUgbmV4dCBwbGFjZSwgdGhleSB3ZXJlIHByZWNlZGVkIGJ5CiAgICAgICBsaWN0b3JzLCBub3Qgd2l0aCBzdGF2ZXMsIGJ1dCB3aXRoIHR3byA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYWNlczwvZm9yZWlnbj4sIGp1c3QgYXMgbGljdG9ycyBnbwogICAgICAgYmVmb3JlIHRoZSBwcmFldG9ycyBoZXJlLiBUaGUgZ3JlYXRlciB2aWN0aW1zIHdlcmUgcGxhY2VkIGluIHRoZSBmb3J1bSwgd2hpY2gsIGFmdGVyIHRoZXkgaGFkCiAgICAgICBiZWVuIGFwcHJvdmVkIGJ5IHRoZSBjb2xsZWdlIG9mIHByaWVzdHMsIHdlcmUgc2FjcmlmaWNlZCBhdCB0aGUgdm9pY2Ugb2YgdGhlIGNyaWVyLCBhbmQgdGhlCiAgICAgICBtdXNpYyBvZiBhIGZsdXRlLXBsYXllciwgYnkgdGhlIHByYWV0b3JzIGZyb20gdGhlaXIgdHJpYnVuYWwsIGFzIHRoZXkgYXJlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBieSB1cyB3aG8gYXJlIGNvbnN1bHMuIEFmdGVyIHRoYXQsIHRoZSBjb25zY3JpcHQgZmF0aGVycwogICAgICAgd2VyZSBzdW1tb25lZC4gQnV0IGFmdGVyIHRoaXMsIGl0IHdhcyBhbG1vc3QgbW9yZSB0aGFuIG9uZSBjb3VsZCBlbmR1cmUsIHRvIHNlZSB0aGUKICAgICAgIGNvdW50ZW5hbmNlIG9mIENvbnNpZGl1cy4gVGhlIG1hbiB3aG9tIHdlIGhhZCBzZWVuIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiBzaHJpdmVsZWQgYW5kIHdhc3RlZCBhd2F5LCBpbiBhIGNvbnRlbXB0aWJsZSBhbmQgYWJqZWN0IGNvbmRpdGlvbiwgd2hlbiB3ZQogICAgICAgc2F3IGhpbSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gd2l0aCBDYW1wYW5pYW4gaGF1Z2h0aW5lc3MgYW5kCiAgICAgICByb3lhbCBwcmlkZSwgd2Ugc2VlbWVkIHRvIGJlIGxvb2tpbmcgYXQgdGhlIE1hZ2lpLCBhbmQgQmxvc3NpaSBhbmQgSnViZWxpaS4gPC90cmFuc2xhdGlvbj4="
translation['2.34.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG5vdywgaW4gd2hhdCBhbGFybSBhbGwgdGhlIGNvbW1vbiBwZW9wbGUgd2VyZSEgSW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDMxNzI3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMzE3MjciPkFsYmFuPC9wbGFjZU5hbWU+IGFuZCBTZXBsYXNpYW4gcm9hZCwgd2hhdCBjcm93ZHMgYXNzZW1ibGVkLCBvZiBtZW4KICAgICAgIGlucXVpcmluZyB3aGF0IGVkaWN0IHRoZSBwcmFldG9yIGhhZCBpc3N1ZWQ/IHdoZXJlIGhlIHdhcyBzdXBwaW5nPyB3aGF0IGhlIGhhZCBzYWlkPyBBbmQgd2UKICAgICAgIHdobyBoYWQgY29tZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXB1YSI+Q2FwdWE8L3BsYWNlTmFtZT4gZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdlcmUgbm90IGNhbGxlZCBndWVzdHMsIGJ1dCBmb3JlaWduZXJzIGFuZCBzdHJhbmdlcnMuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.35.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk91Z2h0IHdlIG5vdCB0byB0aGluayB0aGF0IHRob3NlIG1lbiB3aG8gZm9yZXNhdyBhbGwgdGhlc2UgdGhpbmdzLCBPIFJvbWFucywgb3VnaHQgdG8gYmUKICAgICAgIHZlbmVyYXRlZCBhbmQgd29yc2hpcHBlZCBieSB1cywgYW5kIGNsYXNzZWQgYWxtb3N0IGluIHRoZSBudW1iZXIgb2YgdGhlIGltbW9ydGFsIGdvZHM/IEZvcgogICAgICAgd2hhdCB3YXMgaXQgd2hpY2ggdGhleSBzYXc/IFRoZXkgc2F3IHRoaXMsIHdoaWNoIEkgZW50cmVhdCB5b3Ugbm93IHRvIHJlbWFyayBhbmQgdGFrZSBub3RpY2UKICAgICAgIG9mLiBNYW5uZXJzIGFyZSBub3QgaW1wbGFudGVkIGluIG1lbiBzbyBtdWNoIGJ5IHRoZSBibG9vZCBhbmQgZmFtaWx5LCBhcyBieSB0aG9zZSB0aGluZ3MKICAgICAgIHdoaWNoIGFyZSBzdXBwbGllZCBieSB0aGUgbmF0dXJlIG9mIHRoZSBwbGFuIHRvd2FyZHMgZm9ybWluZyBoYWJpdHMgb2YgbGlmZSwgYnkgd2hpY2ggd2UgYXJlCiAgICAgICBub3VyaXNoZWQsIGFuZCBieSB3aGljaCB3ZSBsaXZlLiBUaGUgQ2FydGhhZ2luaWFucywgYSBmcmF1ZHVsZW50IGFuZCBseWluZyBuYXRpb24sIHdlcmUKICAgICAgIHRlbXB0ZWQgdG8gYSBmb25kbmVzcyBmb3IgZGVjZWl2aW5nIGJ5IGEgZGVzaXJlIG9mIGdhaW4sIG5vdCBieSB0aGVpciBibG9vZCwgYnV0IGJ5IHRoZQogICAgICAgY2hhcmFjdGVyIG9mIHRoZWlyIHNpdHVhdGlvbiBiZWNhdXNlLCBvd2luZyB0byB0aGUgbnVtYmVyIG9mIHRoZWlyIGhhcmJvdXJzLCB0aGV5IGhhZAogICAgICAgZnJlcXVlbnQgaW50ZXJjb3Vyc2Ugd2l0aCBtZXJjaGFudHMgYW5kIGZvcmVpZ25lcnMuIFRoZSBMaWd1cmlhbnMsIGJlaW5nIG1vdW50YWluZWVycywgYXJlIGEKICAgICAgIGhhcmR5IGFuZCBydXN0aWMgdHJpYmUuIFRoZSBsYW5kIGl0c2VsZiB0YXVnaHQgdGhlbSB0byBiZSBzbyBieSBwcm9kdWNpbmcgbm90aGluZyB3aGljaCB3YXMKICAgICAgIG5vdCBleHRyYWN0ZWQgZnJvbSBpdCBieSBza2lsbGZ1bCBjdWx0aXZhdGlvbiwgYW5kIGJ5IGdyZWF0IGxhYm91ci4gVGhlIENhbXBhbmlhbnMgd2VyZQogICAgICAgYWx3YXlzIHByb3VkIGZyb20gdGhlIGV4Y2VsbGVuY2Ugb2YgdGhlaXIgc29pbCwgYW5kIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgY3JvcHMsIGFuZCB0aGUKICAgICAgIGhlYWx0aGluZXNzLCBhbmQgcG9zaXRpb24sIGFuZCBiZWF1dHkgb2YgdGhlaXIgY2l0eS4gRnJvbSB0aGF0IGFidW5kYW5jZSwgYW5kIGZyb20gdGhpcwogICAgICAgYWZmbHVlbmNlIGluIGFsbCB0aGluZ3MsIGluIHRoZSBmaXJzdCBwbGFjZSwgb3JpZ2luYXRlZCB0aG9zZSBxdWFsaXRpZXM7IGFycm9nYW5jZSwgd2hpY2gKICAgICAgIGRlbWFuZGVkIG9mIG91ciBhbmNlc3RvcnMgdGhhdCBvbmUgb2YgdGhlIGNvbnN1bHMgc2hvdWxkIGJlIGNob3NlbiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjogYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIHRoYXQgbHV4dXJ5IHdoaWNoIGNvbnF1ZXJlZAogICAgICAgSGFubmliYWwgaGltc2VsZiBieSBwbGVhc3VyZSwgd2hvIHVwIHRvIHRoYXQgdGltZSBoYWQgcHJvdmVkIGludmluY2libGUgaW4gYXJtcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijk2IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVuIHRob3NlIGRlY2VtdmlycyBzaGFsbCwgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgb2YgUnVsbHVzLAogICAgICAgaGF2ZSBsZWQgc2l4IGh1bmRyZWQgY29sb25pc3RzIHRvIHRoYXQgcGxhY2U7IHdoZW4gdGhleSBzaGFsbCBoYXZlIGVzdGFibGlzaGVkIHRoZXJlIGEKICAgICAgIGh1bmRyZWQgZGVjdXJpb25zLCB0ZW4gYXVndXJzLCBhbmQgc2l4IHByaWVzdHMsIHdoYXQgZG8geW91IHN1cHBvc2UgdGhlaXIgY291cmFnZSwgYW5kCiAgICAgICB2aW9sZW5jZSwgYW5kIGZlcm9jaXR5IHdpbGwgYmUgdGhlbj8gVGhleSB3aWxsIGxhdWdoIGF0IGFuZCBkZXNwaXNlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHNpdHVhdGVkIGFtb25nIG1vdW50YWlucyBhbmQgdmFsbGV5cywgc3R1Y2sgdXAsIGFzIGl0CiAgICAgICB3ZXJlLCBhbmQgcmFpc2VkIGFsb2Z0LCBhbWlkIGdhcnJldHMsIHdpdGggbm90IHZlcnkgZ29vZCByb2FkcywgYW5kIHdpdGggdmVyeSBuYXJyb3cgc3RyZWV0cywKICAgICAgIGluIGNvbXBhcmlzb24gd2l0aCB0aGVpciBvd24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgc3RyZXRjaGVkIG91dAogICAgICAgYWxvbmcgYSBtb3N0IG9wZW4gcGxhaW4sIGFuZCBpbiBjb21wYXJpc29uIG9mIHRoZWlyIG93biBiZWF1dGlmdWwgdGhvcm91Z2hmYXJlcy4gQW5kIGFzIGZvcgogICAgICAgdGhlIGxhbmRzLCB0aGV5IHdpbGwgbm90IHRoaW5rIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTE2OCIga2V5PSJ0Z24sNzAwMTE2OCI+VmF0aWNhbjwvcGxhY2VOYW1lPiBvcgogICAgICAgUHVwaW5pYW4gZGlzdHJpY3QgZml0IHRvIGJlIGNvbXBhcmVkIGF0IGFsbCB0byB0aGVpciBmZXJ0aWxlIGFuZCBsdXh1cmlhbnQgcGxhaW5zLiBBbmQgYWxsCiAgICAgICB0aGUgYWJ1bmRhbmNlIG9mIG5laWdib3VyaW5nIHRvd25zIHdoaWNoIHN1cnJvdW5kIHVzIHRoZXkgd2lsbCBjb21wYXJlIGluIGxhdWdodGVyIGFuZCBzY29ybgogICAgICAgd2l0aCB0aGVpciBuZWlnaGJvdXJzLiBUaGV5IHdpbGwgY29tcGFyZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDI5NyIga2V5PSJ0Z24sNzAxMDI5NyI+TGFiaWNpPC9wbGFjZU5hbWU+LAogICAgICAgRmlkZW5hZSwgQ29sbGF0aWEs4oCUZXZlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhbnV2aXVtIiBrZXk9InBlcnNldXMsTGFudXZpdW0iPkxhbnV2aXVtPC9wbGFjZU5hbWU+CiAgICAgICBpdHNlbGYsIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyaWNpYSIga2V5PSJwZXJzZXVzLEFyaWNpYSI+QXJpY2lhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUdXNjdWx1bSIga2V5PSJwZXJzZXVzLFR1c2N1bHVtIj5UdXNjdWx1bTwvcGxhY2VOYW1lPiwgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBrZXk9InBlcnNldXMsQ2FsZXMiPkNhbGVzPC9wbGFjZU5hbWU+LCBhbmQgVGVhbnVtLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDQ0NzQiIGtleT0idGduLDcwMDQ0NzQiPk5hcGxlczwvcGxhY2VOYW1lPiwgYW5kCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQdXRlb2xpIiBrZXk9InBlcnNldXMsUHV0ZW9saSI+UHV0ZW9saTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGtleT0icGVyc2V1cyxDdW1hZSI+Q3VtYWU8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBvbXBlaWkiIGtleT0icGVyc2V1cyxQb21wZWlpIj5Qb21wZWlpPC9wbGFjZU5hbWU+LCBhbmQgTnVjZXJpYS4KICAgICAgICA8bWlsZXN0b25lIG49Ijk3IiB1bml0PSJzZWN0aW9uIiAvPiBCeSBhbGwgdGhlc2UgdGhpbmdzIHRoZXkgd2lsbCBiZSBlbGF0ZWQgYW5kIHB1ZmZlZCB1cCwKICAgICAgIHBlcmhhcHMgbm90IGF0IG9uY2UsIGJ1dCBjZXJ0YWlubHkgd2hlbiB0aGV5IGhhdmUgZ290IGEgbGl0dGxlIG1vcmUgYWdlIGFuZCB2aWdvdXIgdGhleSB3aWxsCiAgICAgICBub3QgYmUgYWJsZSB0byByZXN0cmFpbiB0aGVtc2VsdmVzOyB0aGV5IHdpbGwgZ28gb24gZnVydGhlciBhbmQgZnVydGhlci4gQSBzaW5nbGUgaW5kaXZpZHVhbCwKICAgICAgIHVubGVzcyBoZSBiZSBhIG1hbiBvZiBncmVhdCB3aXNkb20sIGNhbiBzY2FyY2VseSwgd2hlbiBwbGFjZWQgaW4gc2l0dWF0aW9ucyBvZiBncmVhdCB3ZWFsdGgKICAgICAgIG9yIHBvd2VyLCBjb250YWluIGhpbXNlbGYgd2l0aGluIHRoZSBsaW1pdHMgb2YgcHJvcHJpZXR5OyBtdWNoIGxlc3Mgd2lsbCB0aG9zZSBjb2xvbmlzdHMsCiAgICAgICBzb3VnaHQgb3V0IGFuZCBzZWxlY3RlZCBieSBSdWxsdXMsIGFuZCBvdGhlcnMgbGlrZSBSdWxsdXMsIHdoZW4gZXN0YWJsaXNoZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgaW4gdGhhdCBhYm9kZSBvZiBwcmlkZSwgYW5kIGluIHRoZSB2ZXJ5IGhvbWUgb2YKICAgICAgIGx1eHVyeSwgcmVmcmFpbiBmcm9tIGltbWVkaWF0ZWx5IGNvbnRyYWN0aW5nIHNvbWUgd2lja2VkbmVzcyBhbmQgaW5pcXVpdHkuIFllcywgYW5kIGl0IHdpbGwKICAgICAgIGJlIG11Y2ggbW9yZSB0aGUgY2FzZSB3aXRoIHRoZW0sIHRoYW4gd2l0aCB0aGUgb2xkIGdlbnVpbmUgQ2FtcGFuaWFucywgYmVjYXVzZSB0aGV5IHdlcmUgYm9ybgogICAgICAgYW5kIHRyYWluZWQgdXAgaW4gYSBmb3J0dW5lIHdoaWNoIHdhcyB0aGVpcnMgb2Ygb2xkLCBidXQgd2VyZSBkZXByYXZlZCBieSBhIHRvbyBncmVhdAogICAgICAgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmc7IGJ1dCB0aGVzZSBtZW4sIGJlaW5nIHRyYW5zZmVycmVkIGZyb20gdGhlIG1vc3QgZXh0cmVtZSBpbmRpZ2VuY2UgdG8KICAgICAgIGEgY29ycmVzcG9uZGluZyBhZmZsdWVuY2UsIHdpbGwgYmUgYWZmZWN0ZWQsIG5vdCBvbmx5IGJ5IHRoZSBleHRlbnQgb2YgdGhlaXIgcmljaGVzLCBidXQgYWxzbwogICAgICAgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZW0uIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPjogYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIHRoYXQgbHV4dXJ5IHdoaWNoIGNvbnF1ZXJlZAogICAgICAgSGFubmliYWwgaGltc2VsZiBieSBwbGVhc3VyZSwgd2hvIHVwIHRvIHRoYXQgdGltZSBoYWQgcHJvdmVkIGludmluY2libGUgaW4gYXJtcy4gPC90cmFuc2xhdGlvbj4="
translation['2.35.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlbiB0aG9zZSBkZWNlbXZpcnMgc2hhbGwsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3IG9mIFJ1bGx1cywKICAgICAgIGhhdmUgbGVkIHNpeCBodW5kcmVkIGNvbG9uaXN0cyB0byB0aGF0IHBsYWNlOyB3aGVuIHRoZXkgc2hhbGwgaGF2ZSBlc3RhYmxpc2hlZCB0aGVyZSBhCiAgICAgICBodW5kcmVkIGRlY3VyaW9ucywgdGVuIGF1Z3VycywgYW5kIHNpeCBwcmllc3RzLCB3aGF0IGRvIHlvdSBzdXBwb3NlIHRoZWlyIGNvdXJhZ2UsIGFuZAogICAgICAgdmlvbGVuY2UsIGFuZCBmZXJvY2l0eSB3aWxsIGJlIHRoZW4/IFRoZXkgd2lsbCBsYXVnaCBhdCBhbmQgZGVzcGlzZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHNpdHVhdGVkIGFtb25nIG1vdW50YWlucyBhbmQgdmFsbGV5cywgc3R1Y2sgdXAsIGFzIGl0CiAgICAgICB3ZXJlLCBhbmQgcmFpc2VkIGFsb2Z0LCBhbWlkIGdhcnJldHMsIHdpdGggbm90IHZlcnkgZ29vZCByb2FkcywgYW5kIHdpdGggdmVyeSBuYXJyb3cgc3RyZWV0cywKICAgICAgIGluIGNvbXBhcmlzb24gd2l0aCB0aGVpciBvd24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+LCBzdHJldGNoZWQgb3V0CiAgICAgICBhbG9uZyBhIG1vc3Qgb3BlbiBwbGFpbiwgYW5kIGluIGNvbXBhcmlzb24gb2YgdGhlaXIgb3duIGJlYXV0aWZ1bCB0aG9yb3VnaGZhcmVzLiBBbmQgYXMgZm9yCiAgICAgICB0aGUgbGFuZHMsIHRoZXkgd2lsbCBub3QgdGhpbmsgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMTY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDExNjgiPlZhdGljYW48L3BsYWNlTmFtZT4gb3IKICAgICAgIFB1cGluaWFuIGRpc3RyaWN0IGZpdCB0byBiZSBjb21wYXJlZCBhdCBhbGwgdG8gdGhlaXIgZmVydGlsZSBhbmQgbHV4dXJpYW50IHBsYWlucy4gQW5kIGFsbAogICAgICAgdGhlIGFidW5kYW5jZSBvZiBuZWlnYm91cmluZyB0b3ducyB3aGljaCBzdXJyb3VuZCB1cyB0aGV5IHdpbGwgY29tcGFyZSBpbiBsYXVnaHRlciBhbmQgc2Nvcm4KICAgICAgIHdpdGggdGhlaXIgbmVpZ2hib3Vycy4gVGhleSB3aWxsIGNvbXBhcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAyOTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDI5NyI+TGFiaWNpPC9wbGFjZU5hbWU+LAogICAgICAgRmlkZW5hZSwgQ29sbGF0aWEs4oCUZXZlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExhbnV2aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMYW51dml1bSI+TGFudXZpdW08L3BsYWNlTmFtZT4KICAgICAgIGl0c2VsZiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJpY2lhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmljaWEiPkFyaWNpYTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVHVzY3VsdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFR1c2N1bHVtIj5UdXNjdWx1bTwvcGxhY2VOYW1lPiwgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhbGVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYWxlcyI+Q2FsZXM8L3BsYWNlTmFtZT4sIGFuZCBUZWFudW0sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNDQ3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA0NDc0Ij5OYXBsZXM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHV0ZW9saSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUHV0ZW9saSI+UHV0ZW9saTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ3VtYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEN1bWFlIj5DdW1hZTwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUG9tcGVpaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUG9tcGVpaSI+UG9tcGVpaTwvcGxhY2VOYW1lPiwgYW5kIE51Y2VyaWEuCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.35.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz4gQnkgYWxsIHRoZXNlIHRoaW5ncyB0aGV5IHdpbGwgYmUgZWxhdGVkIGFuZCBwdWZmZWQgdXAsCiAgICAgICBwZXJoYXBzIG5vdCBhdCBvbmNlLCBidXQgY2VydGFpbmx5IHdoZW4gdGhleSBoYXZlIGdvdCBhIGxpdHRsZSBtb3JlIGFnZSBhbmQgdmlnb3VyIHRoZXkgd2lsbAogICAgICAgbm90IGJlIGFibGUgdG8gcmVzdHJhaW4gdGhlbXNlbHZlczsgdGhleSB3aWxsIGdvIG9uIGZ1cnRoZXIgYW5kIGZ1cnRoZXIuIEEgc2luZ2xlIGluZGl2aWR1YWwsCiAgICAgICB1bmxlc3MgaGUgYmUgYSBtYW4gb2YgZ3JlYXQgd2lzZG9tLCBjYW4gc2NhcmNlbHksIHdoZW4gcGxhY2VkIGluIHNpdHVhdGlvbnMgb2YgZ3JlYXQgd2VhbHRoCiAgICAgICBvciBwb3dlciwgY29udGFpbiBoaW1zZWxmIHdpdGhpbiB0aGUgbGltaXRzIG9mIHByb3ByaWV0eTsgbXVjaCBsZXNzIHdpbGwgdGhvc2UgY29sb25pc3RzLAogICAgICAgc291Z2h0IG91dCBhbmQgc2VsZWN0ZWQgYnkgUnVsbHVzLCBhbmQgb3RoZXJzIGxpa2UgUnVsbHVzLCB3aGVuIGVzdGFibGlzaGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPiwgaW4gdGhhdCBhYm9kZSBvZiBwcmlkZSwgYW5kIGluIHRoZSB2ZXJ5IGhvbWUgb2YKICAgICAgIGx1eHVyeSwgcmVmcmFpbiBmcm9tIGltbWVkaWF0ZWx5IGNvbnRyYWN0aW5nIHNvbWUgd2lja2VkbmVzcyBhbmQgaW5pcXVpdHkuIFllcywgYW5kIGl0IHdpbGwKICAgICAgIGJlIG11Y2ggbW9yZSB0aGUgY2FzZSB3aXRoIHRoZW0sIHRoYW4gd2l0aCB0aGUgb2xkIGdlbnVpbmUgQ2FtcGFuaWFucywgYmVjYXVzZSB0aGV5IHdlcmUgYm9ybgogICAgICAgYW5kIHRyYWluZWQgdXAgaW4gYSBmb3J0dW5lIHdoaWNoIHdhcyB0aGVpcnMgb2Ygb2xkLCBidXQgd2VyZSBkZXByYXZlZCBieSBhIHRvbyBncmVhdAogICAgICAgYWJ1bmRhbmNlIG9mIGV2ZXJ5dGhpbmc7IGJ1dCB0aGVzZSBtZW4sIGJlaW5nIHRyYW5zZmVycmVkIGZyb20gdGhlIG1vc3QgZXh0cmVtZSBpbmRpZ2VuY2UgdG8KICAgICAgIGEgY29ycmVzcG9uZGluZyBhZmZsdWVuY2UsIHdpbGwgYmUgYWZmZWN0ZWQsIG5vdCBvbmx5IGJ5IHRoZSBleHRlbnQgb2YgdGhlaXIgcmljaGVzLCBidXQgYWxzbwogICAgICAgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['2.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.36.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSwgTyBQdWJsaXVzIFJ1bGx1cywgaGF2ZSBjaG9zZW4gdG8gZm9sbG93IGluIHRoZSBmb290c3RlcHMgb2YgTWFyY3VzIEJydXR1cydzCiAgICAgICB3aWNrZWRuZXNzLCByYXRoZXIgdGhhbiB0byBiZSBndWlkZWQgYnkgdGhlIG1vbnVtZW50cyBvZiB0aGUgd2lzZG9tIG9mIG91ciBhbmNlc3RvcnMuIFlvdQogICAgICAgaGF2ZSBmbGF2b3VyZWQgYWxsIHRoaXMgd2l0aCB0aGVzZSBhZHZpY2VzIG9mIHlvdXJz4oCUdG8gc2VsbCB0aGUgb2xkIHJldmVudWVzLCBhbmQKICAgICAgIHRvIHdhc3RlIHRoZSBuZXcgb25lcyzigJR0byBvcHBvc2UgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXB1YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+CiAgICAgICB0byB0aGlzIGNpdHkgaW4gYSByaXZhbHJ5IG9mIGRpZ25pdHnigJR0byBzdWJqZWN0IGFsbCBjaXRpZXMsIG5hdGlvbnMgYW5kIHByb3ZpbmNlcywKICAgICAgIGFsbCBmcmVlIHBlb3BsZXMsIGFuZCBraW5ncywgYW5kIHRoZSB3aG9sZSB3b3JsZCBpbiBzaG9ydCwgdG8geW91ciBsYXdzLCBhbmQganVyaXNkaWN0aW9uLAogICAgICAgYW5kIHBvd2VyLCBpbiBvcmRlciB0aGF0LCB3aGVuIHlvdSBoYXZlIGRyYWluZWQgYWxsIHRoZSBtb25leSBvdXQgb2YgdGhlIHRyZWFzdXJ5LCBhbmQKICAgICAgIGV4YWN0ZWQgYWxsIHRoYXQgbWF5IGJlIGR1ZSBmcm9tIHRoZSB0YXhlcywgYW5kIGV4dG9ydGVkIGFsbCB0aGF0IHlvdSBjYW4gZnJvbSBraW5ncywgYW5kCiAgICAgICBuYXRpb25zLCBhbmQgZXZlbiBmcm9tIG91ciBvd24gZ2VuZXJhbHMsIGFsbCBtZW4gbWF5IHN0aWxsIGJlIGZvcmNlZCB0byBwYXkgbW9uZXkgdG8geW91IGF0CiAgICAgICB5b3VyIG5vZDsgdGhhdCB5b3UsIGFsc28sIG9yIHlvdXIgZnJpZW5kcywgbWF5IGJ1eSB1cCBmcm9tIHRob3NlIHdobyBoYXZlIGJlY29tZSBwb3NzZXNzZWQgb2YKICAgICAgIHRoZW0sIGFzIG1lbWJlcnMgb2YgU3VsbGEncyBwYXJ0eSwgdGhlaXIgbGFuZHPigJRzb21lIG9mIHdoaWNoIHByb2R1Y2UgdG9vIG11Y2gKICAgICAgIHVucG9wdWxhcml0eSB0byB0aGVpciBvd25lcnMgdG8gYmUgd29ydGgga2VlcGluZzsgc29tZSBvZiB3aGljaCBhcmUgdW5oZWFsdGh5LCBhbmQgZGVzZXJ0ZWQKICAgICAgIG9uIHRoYXQgYWNjb3VudCBhbmQgY2hhcmdlIHRoZW0gdG8gdGhlIFJvbWFuIHBlb3BsZSBhdCB3aGF0ZXZlciBwcmljZSB5b3UgcGxlYXNlOyB0aGF0IHlvdQogICAgICAgbWF5IG9jY3VweSBhbGwgdGhlIG11bmljaXBhbGl0aWVzIGFuZCBjb2xvbmllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiB3aXRoIG5ldyBzZXR0bGVyczsgdGhhdCB5b3UgbWF5IGVzdGFibGlzaCBjb2xvbmllcyBpbiB3aGF0ZXZlciBwbGFjZXMgeW91CiAgICAgICB0aGluayBmaXQsIGFuZCBpbiBhcyBtYW55IHBsYWNlcyBhcyBzZWVtcyBkZXNpcmFibGUgdG8geW91LDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIHRoYXQgeW91IG1heSBzdXJyb3VuZCwgYW5kIGhvbGQgaW4gc3ViamVjdGlvbiwgdGhlIHdob2xlIHJlcHVibGljIHdpdGggeW91ciBzb2xkaWVycywgYW5kCiAgICAgICB5b3VyIGNpdGllcyBhbmQgeW91ciBnYXJyaXNvbnMgLCB0aGF0IHlvdSBtYXkgYmUgYWJsZSB0byBwcm9zY3JpYmUgYW5kIHRvIGRlcHJpdmUgb2YgdGhlCiAgICAgICBzaWdodCBvZiB0aGVzZSBtZW4gQ25hZXVzIFBvbXBlaXVzIGhpbXNlbGYgYnkgd2hvc2UgcHJvdGVjdGlvbiBhbmQgYXNzaXN0YW5jZSB0aGUgUm9tYW4KICAgICAgIHBlb3BsZSBoYXMgcmVwZWF0ZWRseSBiZWVuIHRyaXVtcGhhbnQgb3ZlciBpdHMgbW9zdCBhY3RpdmUgZW5lbWllcyBhbmQgaXRzIG1vc3Qgd29ydGhsZXNzCiAgICAgICBjaXRpemVucyB0aGF0IHRoZXJlIG1heSBiZSBub3RoaW5nLCB3aGljaCBpcyBlaXRoZXIgY2FwYWJsZSBvZiBiZWluZyB0YW1wZXJlZCB3aXRoIGJ5IG1lYW5zCiAgICAgICBvZiBnb2xkIGFuZCBzaWx2ZXIsIG9yIGNhcnJpZWQgYnkgbnVtYmVycyBhbmQgdm90ZXMsIG9yIGFjY29tcGxpc2hlZCBieSBmb3JjZSBhbmQgdmlvbGVuY2UsCiAgICAgICB3aGljaCB5b3UgZG8gbm90IGhvbGQgaW4geW91ciBvd24gcG93ZXIsIGFuZCB1bmRlciB5b3VyIGRvbWluaW9uOyB0aGF0IG1lYW53aGlsZSB5b3UgbWF5IGdvCiAgICAgICBhdCBmdWxsIHNwZWVkIHRocm91Z2ggZXZlcnkgbmF0aW9uIGFuZCBldmVyeSBraW5nZG9tIHdpdGggdGhlIG1vc3QgYWJzb2x1dGUKICAgICAgIHBvd2VyLOKAlHdpdGggdW5yZXN0cmljdGVkIGF1dGhvcml0eSBhcyBqdWRnZXMsIGFuZCB3aXRoIGltbWVuc2Ugc3VtcyBvZiBtb25leTsgdGhhdAogICAgICAgeW91IG1heSBjb21lIGludG8gdGhlIGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCBhbmQgc2VsbCBoaXMgdmVyeSBjYW1wIGl0c2VsZiwgaWYgaXQgYmUKICAgICAgIGRlc2lyYWJsZSBmb3IgeW91IHRvIGRvIHNvOyB0aGF0IGluIHRoZSBtZWFudGltZSwgeW91LCBiZWluZyBmcmVlZCBmcm9tIGV2ZXJ5IHJlc3RyYWludCBvZgogICAgICAgbGF3LCBhbmQgZnJvbSBhbGwgZmVhciBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCBmcm9tIGFsbCBkYW5nZXIsIG1heSBiZSBhYmxlIHRvIHN0YW5kCiAgICAgICBmb3IgYWxsIHRoZSBvdGhlciBtYWdpc3RyYWNpZXM7IHNvIHRoYXQgbm8gb25lIG1heSBiZSBhYmxlIHRvIGJyaW5nIHlvdSBiZWZvcmUgdGhlIFJvbWFuCiAgICAgICBwZW9wbGUsIG9yIHN1bW1vbiB5b3UgYmVmb3JlIGFueSBjb3VydCzigJRzbyB0aGF0IHRoZSBzZW5hdGUgbWF5IG5vdCBiZSBhYmxlIHRvCiAgICAgICBjb21wZWwgeW91LCBub3IgdGhlIGNvbnN1bCB0byByZXN0cmFpbiB5b3UsIG5vciB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHRvIG9mZmVyIGFueQogICAgICAgaW1wZWRpbWVudCB0byB5b3UuIDxtaWxlc3RvbmUgbj0iMTAwIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2FwdWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENhcHVhIj5DYXB1YTwvcGxhY2VOYW1lPgogICAgICAgdG8gdGhpcyBjaXR5IGluIGEgcml2YWxyeSBvZiBkaWduaXR54oCUdG8gc3ViamVjdCBhbGwgY2l0aWVzLCBuYXRpb25zIGFuZCBwcm92aW5jZXMsCiAgICAgICBhbGwgZnJlZSBwZW9wbGVzLCBhbmQga2luZ3MsIGFuZCB0aGUgd2hvbGUgd29ybGQgaW4gc2hvcnQsIHRvIHlvdXIgbGF3cywgYW5kIGp1cmlzZGljdGlvbiwKICAgICAgIGFuZCBwb3dlciwgaW4gb3JkZXIgdGhhdCwgd2hlbiB5b3UgaGF2ZSBkcmFpbmVkIGFsbCB0aGUgbW9uZXkgb3V0IG9mIHRoZSB0cmVhc3VyeSwgYW5kCiAgICAgICBleGFjdGVkIGFsbCB0aGF0IG1heSBiZSBkdWUgZnJvbSB0aGUgdGF4ZXMsIGFuZCBleHRvcnRlZCBhbGwgdGhhdCB5b3UgY2FuIGZyb20ga2luZ3MsIGFuZAogICAgICAgbmF0aW9ucywgYW5kIGV2ZW4gZnJvbSBvdXIgb3duIGdlbmVyYWxzLCBhbGwgbWVuIG1heSBzdGlsbCBiZSBmb3JjZWQgdG8gcGF5IG1vbmV5IHRvIHlvdSBhdAogICAgICAgeW91ciBub2Q7IHRoYXQgeW91LCBhbHNvLCBvciB5b3VyIGZyaWVuZHMsIG1heSBidXkgdXAgZnJvbSB0aG9zZSB3aG8gaGF2ZSBiZWNvbWUgcG9zc2Vzc2VkIG9mCiAgICAgICB0aGVtLCBhcyBtZW1iZXJzIG9mIFN1bGxhJ3MgcGFydHksIHRoZWlyIGxhbmRz4oCUc29tZSBvZiB3aGljaCBwcm9kdWNlIHRvbyBtdWNoCiAgICAgICB1bnBvcHVsYXJpdHkgdG8gdGhlaXIgb3duZXJzIHRvIGJlIHdvcnRoIGtlZXBpbmc7IHNvbWUgb2Ygd2hpY2ggYXJlIHVuaGVhbHRoeSwgYW5kIGRlc2VydGVkCiAgICAgICBvbiB0aGF0IGFjY291bnQgYW5kIGNoYXJnZSB0aGVtIHRvIHRoZSBSb21hbiBwZW9wbGUgYXQgd2hhdGV2ZXIgcHJpY2UgeW91IHBsZWFzZTsgdGhhdCB5b3UKICAgICAgIG1heSBvY2N1cHkgYWxsIHRoZSBtdW5pY2lwYWxpdGllcyBhbmQgY29sb25pZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gd2l0aCBuZXcgc2V0dGxlcnM7IHRoYXQgeW91IG1heSBlc3RhYmxpc2ggY29sb25pZXMgaW4gd2hhdGV2ZXIgcGxhY2VzIHlvdQogICAgICAgdGhpbmsgZml0LCBhbmQgaW4gYXMgbWFueSBwbGFjZXMgYXMgc2VlbXMgZGVzaXJhYmxlIHRvIHlvdSw8L3RyYW5zbGF0aW9uPg=="
translation['2.36.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIHRoYXQgeW91IG1heSBzdXJyb3VuZCwgYW5kIGhvbGQgaW4gc3ViamVjdGlvbiwgdGhlIHdob2xlIHJlcHVibGljIHdpdGggeW91ciBzb2xkaWVycywgYW5kCiAgICAgICB5b3VyIGNpdGllcyBhbmQgeW91ciBnYXJyaXNvbnMgLCB0aGF0IHlvdSBtYXkgYmUgYWJsZSB0byBwcm9zY3JpYmUgYW5kIHRvIGRlcHJpdmUgb2YgdGhlCiAgICAgICBzaWdodCBvZiB0aGVzZSBtZW4gQ25hZXVzIFBvbXBlaXVzIGhpbXNlbGYgYnkgd2hvc2UgcHJvdGVjdGlvbiBhbmQgYXNzaXN0YW5jZSB0aGUgUm9tYW4KICAgICAgIHBlb3BsZSBoYXMgcmVwZWF0ZWRseSBiZWVuIHRyaXVtcGhhbnQgb3ZlciBpdHMgbW9zdCBhY3RpdmUgZW5lbWllcyBhbmQgaXRzIG1vc3Qgd29ydGhsZXNzCiAgICAgICBjaXRpemVucyB0aGF0IHRoZXJlIG1heSBiZSBub3RoaW5nLCB3aGljaCBpcyBlaXRoZXIgY2FwYWJsZSBvZiBiZWluZyB0YW1wZXJlZCB3aXRoIGJ5IG1lYW5zCiAgICAgICBvZiBnb2xkIGFuZCBzaWx2ZXIsIG9yIGNhcnJpZWQgYnkgbnVtYmVycyBhbmQgdm90ZXMsIG9yIGFjY29tcGxpc2hlZCBieSBmb3JjZSBhbmQgdmlvbGVuY2UsCiAgICAgICB3aGljaCB5b3UgZG8gbm90IGhvbGQgaW4geW91ciBvd24gcG93ZXIsIGFuZCB1bmRlciB5b3VyIGRvbWluaW9uOyB0aGF0IG1lYW53aGlsZSB5b3UgbWF5IGdvCiAgICAgICBhdCBmdWxsIHNwZWVkIHRocm91Z2ggZXZlcnkgbmF0aW9uIGFuZCBldmVyeSBraW5nZG9tIHdpdGggdGhlIG1vc3QgYWJzb2x1dGUKICAgICAgIHBvd2VyLOKAlHdpdGggdW5yZXN0cmljdGVkIGF1dGhvcml0eSBhcyBqdWRnZXMsIGFuZCB3aXRoIGltbWVuc2Ugc3VtcyBvZiBtb25leTsgdGhhdAogICAgICAgeW91IG1heSBjb21lIGludG8gdGhlIGNhbXAgb2YgQ25hZXVzIFBvbXBlaXVzLCBhbmQgc2VsbCBoaXMgdmVyeSBjYW1wIGl0c2VsZiwgaWYgaXQgYmUKICAgICAgIGRlc2lyYWJsZSBmb3IgeW91IHRvIGRvIHNvOyB0aGF0IGluIHRoZSBtZWFudGltZSwgeW91LCBiZWluZyBmcmVlZCBmcm9tIGV2ZXJ5IHJlc3RyYWludCBvZgogICAgICAgbGF3LCBhbmQgZnJvbSBhbGwgZmVhciBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UsIGFuZCBmcm9tIGFsbCBkYW5nZXIsIG1heSBiZSBhYmxlIHRvIHN0YW5kCiAgICAgICBmb3IgYWxsIHRoZSBvdGhlciBtYWdpc3RyYWNpZXM7IHNvIHRoYXQgbm8gb25lIG1heSBiZSBhYmxlIHRvIGJyaW5nIHlvdSBiZWZvcmUgdGhlIFJvbWFuCiAgICAgICBwZW9wbGUsIG9yIHN1bW1vbiB5b3UgYmVmb3JlIGFueSBjb3VydCzigJRzbyB0aGF0IHRoZSBzZW5hdGUgbWF5IG5vdCBiZSBhYmxlIHRvCiAgICAgICBjb21wZWwgeW91LCBub3IgdGhlIGNvbnN1bCB0byByZXN0cmFpbiB5b3UsIG5vciB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHRvIG9mZmVyIGFueQogICAgICAgaW1wZWRpbWVudCB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['2.36.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBkbyBub3Qgd29uZGVyIHRoYXQgeW91LCBtZW4gb2Ygc3VjaCBmb2xseSBhbmQgaW50ZW1wZXJhbmNlIGFzIHlvdSBhcmUsIHNob3VsZCBoYXZlCiAgICAgICBkZXNpcmVkIHRoZXNlIHRoaW5nc+KAlEkgZG8gbWFydmVsIHRoYXQgeW91IHNob3VsZCBoYXZlIGhvcGVkIHRoYXQgeW91IGNvdWxkIG9idGFpbgogICAgICAgdGhlbSB3aGlsZSBJIGFtIGNvbnN1bC4gRm9yIGFzIGFsbCBjb25zdWxzIG91Z2h0IHRvIGV4ZXJjaXNlIHRoZSBncmVhdGVzdCBjYXJlIGFuZCBkaWxpZ2VuY2UKICAgICAgIGluIHRoZSBwcm90ZWN0aW9uIG9mIHRoZSByZXB1YmxpYywgc28sIGFib3ZlIGFsbCBvdGhlcnMsIG91Z2h0IHRoZXkgdG8gZG8gc28gd2hvIGhhdmUgbm90CiAgICAgICBiZWVuIG1hZGUgY29uc3VscyBpbiB0aGVpciBjcmFkbGVzLCBidXQgaW4gdGhlIENhbXB1cy4gTm8gYW5jZXN0b3JzIG9mIG1pbmUgd2VudCBiYWlsIHRvIHRoZQogICAgICAgUm9tYW4gcGVvcGxlIGZvciBtZTsgeW91IGdhdmUgY3JlZGl0IHRvIG1lOyBpdCBpcyBmcm9tIG1lIHRoYXQgeW91IG11c3QgY2xhaW0gd2hhdCBJIGFtIGJvdW5kCiAgICAgICB0byBwYXk7IGFsbCB5b3VyIGRlbWFuZHMgbXVzdCBiZSBtYWRlIG9uIG1lLiBBcywgd2hlbiBJIHN0b29kIGZvciB0aGUgY29uc3Vsc2hpcCwgbm8gYXV0aG9ycwogICAgICAgb2YgbXkgZmFtaWx5IHJlY29tbWVuZGVkIG1lIHRvIHlvdTsgc28sIGlmLiBJIGNvbW1pdCBhbnkgZmF1bHQsIHRoZXJlIGFyZSBubyBpbWFnZXMgb2YgbXkKICAgICAgIGFuY2VzdG9ycyB3aGljaCBjYW4gYmVnIG1lIG9mZiBmcm9tIHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgaWYgb25seSBsaWZlIGJlIGdyYW50ZWQgbWUsIGFzIGZhciBhcyBJIGNhbiBJIHdpbGwgZGVmZW5kIHRoZSBzdGF0ZSBmcm9tIHRoZQogICAgICAgd2lja2VkbmVzcyBhbmQgaW5zaWRpb3VzIGRlc2lnbnMgb2YgdGhvc2UgbWVuLiBJIHByb21pc2UgeW91IHRoaXMsIE8gUm9tYW5zLCB3aXRoIGdvb2QgZmFpdGg7CiAgICAgICB5b3UgaGF2ZSBlbnRydXN0ZWQgdGhlIHJlcHVibGljIHRvIGEgdmlnaWxhbnQgbWFuLCBub3QgdG8gYSB0aW1pZCBvbmU7IHRvIGEgZGlsaWdlbnQgbWFuLCBub3QKICAgICAgIHRvIGFuIGlkbGUgb25lLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAxIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIGNvbnN1bDsgaG93IHNob3VsZCBJIGZlYXIgYW4KICAgICAgIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGU/IEhvdyBzaG91bGQgSSBiZSBhZnJhaWQgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGU/IEhvdyBzaG91bGQgSSBiZQogICAgICAgZnJlcXVlbnRseSBvciBjYXVzZWxlc3NseSBhZ2l0YXRlZD8gSG93IHNob3VsZCBJIGZlYXIgbGVzdCBJIG1heSBoYXZlIHRvIGR3ZWxsIGluIGEgcHJpc29uLAogICAgICAgaWYgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgb3JkZXJzIG1lIHRvIGJlIGxlZCB0aGl0aGVyPyBmb3IgSSwgYXJtZWQgd2l0aCB5b3VyIGFybXMsIGFkb3JuZWQKICAgICAgIHdpdGggeW91ciBtb3N0IGhvbm91cmFibGUgZW5zaWducywgYW5kIHdpdGggY29tbWFuZCBhbmQgYXV0aG9yaXR5IGNvbmZlcnJlZCBieSB5b3UsIGhhdmUgbm90CiAgICAgICBiZWVuIGFmcmFpZCB0byBhZHZhbmNlIGludG8gdGhpcyBwbGFjZSwgYW5kLCB3aXRoIHlvdSBmb3IgbXkgYmFja2VycywgdG8gcmVzaXN0IHRoZQogICAgICAgd2lja2VkbmVzcyBvZiBtYW47IG5vciBkbyBJIGZlYXIgbGVzdCB0aGUgcmVwdWJsaWMsIGJlaW5nIGZvcnRpZmllZCB3aXRoIHN1Y2ggc3Ryb25nCiAgICAgICBwcm90ZWN0aW9uLCBtYXkgYmUgY29ucXVlcmVkIG9yIG92ZXJ3aGVsbWVkIGJ5IHRob3NlIG1lbi4gSWYgSSBoYWQgYmVlbiBhZnJhaWQgYmVmb3JlLCBzdGlsbAogICAgICAgbm93LCB3aXRoIHRoaXMgYXNzZW1ibHksIGFuZCB0aGlzIHBlb3BsZSwgSSBzaG91bGQgbm90IGZlYXIuIEZvciB3aG8gZXZlciBoYWQgYW4gYXNzZW1ibHkgc28KICAgICAgIHdlbGwgaW5jbGluZWQgdG8gaGVhciBoaW0gd2hpbGUgYWR2b2NhdGluZyBhbiBhZ3JhcmlhbiBsYXcsIGFzIEkgaGF2ZSBoYWQgd2hpbGUgYXJndWluZwogICAgICAgYWdhaW5zdCBvbmU/IGlmLCBpbmRlZWQsIEkgY2FuIGJlIHNhaWQgdG8gYmUgYXJndWluZyBhZ2FpbnN0IG9uZSwgYW5kIG5vdCByYXRoZXIgdXBzZXR0aW5nCiAgICAgICBhbmQgZGVzdHJveWluZyBvbmUuIDxtaWxlc3RvbmUgbj0iMTAyIiB1bml0PSJzZWN0aW9uIiAvPiBGcm9tIHdoaWNoLCBPIFJvbWFucywgaXQgbWF5IGJlCiAgICAgICBlYXNpbHkgdW5kZXJzdG9vZCB0aGF0IHRoZXJlIGlzIG5vdGhpbmcgc28gcG9wdWxhciwgYXMgdGhhdCB3aGljaCBJLCB0aGUgY29uc3VsIG9mIHRoZQogICAgICAgcGVvcGxlLCBhbSB0aGlzIHllYXIgYnJpbmdpbmcgdG8geW91OyBuYW1lbHksIHBlYWNlLCB0cmFucXVpbGxpdHkgYW5kIGVhc2UuIEFsbCB0aGUgdGhpbmdzCiAgICAgICB3aGljaCB3aGVuIHdlIHdlcmUgZWxlY3RlZCB5b3Ugd2VyZSBhZnJhaWQgbWlnaHQgaGFwcGVuLCBoYXZlIGJlZW4gZ3VhcmRlZCBhZ2FpbnN0IGJ5IG15CiAgICAgICBwcnVkZW5jZSBhbmQgY2F1dGlvbi4gWW91IG5vdCBvbmx5IHdpbGwgZW5qb3kgZWFzZSzigJR5b3Ugd2hvIGhhdmUgYWx3YXlzIHdpc2hlZCBmb3IKICAgICAgIGl0OyBidXQgSSB3aWxsIGV2ZW4gbWFrZSB0aG9zZSBtZW4gcXVpZXQsIHRvIHdob20gb3VyIHF1aWV0IGhhcyBiZWVuIGEgc291cmNlIG9mIGFubm95YW5jZS4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.37.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gY29uc3VsOyBob3cgc2hvdWxkIEkgZmVhciBhbgogICAgICAgYXNzZW1ibHkgb2YgdGhlIHBlb3BsZT8gSG93IHNob3VsZCBJIGJlIGFmcmFpZCBvZiB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZT8gSG93IHNob3VsZCBJIGJlCiAgICAgICBmcmVxdWVudGx5IG9yIGNhdXNlbGVzc2x5IGFnaXRhdGVkPyBIb3cgc2hvdWxkIEkgZmVhciBsZXN0IEkgbWF5IGhhdmUgdG8gZHdlbGwgaW4gYSBwcmlzb24sCiAgICAgICBpZiBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSBvcmRlcnMgbWUgdG8gYmUgbGVkIHRoaXRoZXI/IGZvciBJLCBhcm1lZCB3aXRoIHlvdXIgYXJtcywgYWRvcm5lZAogICAgICAgd2l0aCB5b3VyIG1vc3QgaG9ub3VyYWJsZSBlbnNpZ25zLCBhbmQgd2l0aCBjb21tYW5kIGFuZCBhdXRob3JpdHkgY29uZmVycmVkIGJ5IHlvdSwgaGF2ZSBub3QKICAgICAgIGJlZW4gYWZyYWlkIHRvIGFkdmFuY2UgaW50byB0aGlzIHBsYWNlLCBhbmQsIHdpdGggeW91IGZvciBteSBiYWNrZXJzLCB0byByZXNpc3QgdGhlCiAgICAgICB3aWNrZWRuZXNzIG9mIG1hbjsgbm9yIGRvIEkgZmVhciBsZXN0IHRoZSByZXB1YmxpYywgYmVpbmcgZm9ydGlmaWVkIHdpdGggc3VjaCBzdHJvbmcKICAgICAgIHByb3RlY3Rpb24sIG1heSBiZSBjb25xdWVyZWQgb3Igb3ZlcndoZWxtZWQgYnkgdGhvc2UgbWVuLiBJZiBJIGhhZCBiZWVuIGFmcmFpZCBiZWZvcmUsIHN0aWxsCiAgICAgICBub3csIHdpdGggdGhpcyBhc3NlbWJseSwgYW5kIHRoaXMgcGVvcGxlLCBJIHNob3VsZCBub3QgZmVhci4gRm9yIHdobyBldmVyIGhhZCBhbiBhc3NlbWJseSBzbwogICAgICAgd2VsbCBpbmNsaW5lZCB0byBoZWFyIGhpbSB3aGlsZSBhZHZvY2F0aW5nIGFuIGFncmFyaWFuIGxhdywgYXMgSSBoYXZlIGhhZCB3aGlsZSBhcmd1aW5nCiAgICAgICBhZ2FpbnN0IG9uZT8gaWYsIGluZGVlZCwgSSBjYW4gYmUgc2FpZCB0byBiZSBhcmd1aW5nIGFnYWluc3Qgb25lLCBhbmQgbm90IHJhdGhlciB1cHNldHRpbmcKICAgICAgIGFuZCBkZXN0cm95aW5nIG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['2.37.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+IEZyb20gd2hpY2gsIE8gUm9tYW5zLCBpdCBtYXkgYmUKICAgICAgIGVhc2lseSB1bmRlcnN0b29kIHRoYXQgdGhlcmUgaXMgbm90aGluZyBzbyBwb3B1bGFyLCBhcyB0aGF0IHdoaWNoIEksIHRoZSBjb25zdWwgb2YgdGhlCiAgICAgICBwZW9wbGUsIGFtIHRoaXMgeWVhciBicmluZ2luZyB0byB5b3U7IG5hbWVseSwgcGVhY2UsIHRyYW5xdWlsbGl0eSBhbmQgZWFzZS4gQWxsIHRoZSB0aGluZ3MKICAgICAgIHdoaWNoIHdoZW4gd2Ugd2VyZSBlbGVjdGVkIHlvdSB3ZXJlIGFmcmFpZCBtaWdodCBoYXBwZW4sIGhhdmUgYmVlbiBndWFyZGVkIGFnYWluc3QgYnkgbXkKICAgICAgIHBydWRlbmNlIGFuZCBjYXV0aW9uLiBZb3Ugbm90IG9ubHkgd2lsbCBlbmpveSBlYXNlLOKAlHlvdSB3aG8gaGF2ZSBhbHdheXMgd2lzaGVkIGZvcgogICAgICAgaXQ7IGJ1dCBJIHdpbGwgZXZlbiBtYWtlIHRob3NlIG1lbiBxdWlldCwgdG8gd2hvbSBvdXIgcXVpZXQgaGFzIGJlZW4gYSBzb3VyY2Ugb2YgYW5ub3lhbmNlLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRydXRoLCBob3dldmVyLCBwb3dlciwgcmljaGVzLCBhcmUgYWNjdXN0b21lZCB0byBiZSBhY3F1aXJlZCBieSB0aGVtIG91dCBvZiB0aGUgdHVtdWx0cwogICAgICAgYW5kIGRpc3NlbnNpb25zIG9mIHRoZSBjaXRpemVucy4gWW91LCB3aG9zZSBpbnRlcmVzdCBjb25zaXN0cyBpbiB0aGUgdm90ZXMgb2YgdGhlIHBlb3BsZSwKICAgICAgIHdob3NlIGxpYmVydHkgaXMgYmFzZWQgb24gdGhlIGxhd3MsIHdob3NlIGhvbm91cnMgZGVwZW5kIG9uIHRoZSBjb3VydHMgb2YganVzdGljZSBhbmQgb24gdGhlCiAgICAgICBlcXVpdHkgb2YgdGhlIG1hZ2lzdHJhdGVzLCBhbmQgd2hvc2UgZW5qb3ltZW50IG9mIHlvdXIgcHJvcGVydGllcyBkZXBlbmRzIG9uIHBlYWNlLCBvdWdodCB0bwogICAgICAgcHJlc2VydmUgdHJhbnF1aWxsaXR5IGJ5IGV2ZXJ5IG1lYW5zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAzIiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgaWYgdGhvc2UgbWVuCiAgICAgICB3aG8sIG9uIGFjY291bnQgb2YgaW5kb2xlbmNlLCBhcmUgbGl2aW5nIGluIHRyYW5xdWlsbGl0eSwgc3RpbGwgdGFrZSBwbGVhc3VyZSBpbiB0aGVpciBvd24KICAgICAgIGJhc2UgaW5kb2xlbmNlOyB5b3UsIGlmIGluIHRoZSBjYWxtIHF1aWV0IHdpdGggd2hpY2ggeW91IGdvdmVybiBmb3J0dW5lLCB5b3UgdGhpbmsgc3VjaCBhCiAgICAgICBjb25kaXRpb24gYXMgeW91IGVuam95IGJldHRlciwgc2hvdWxkIG1haW50YWluIGl0IGRpbGlnZW50bHk7IG5vdCBhcyBvbmUgdGhhdCBoYXMgYmVlbgogICAgICAgYWNxdWlyZWQgYnkgbGF6aW5lc3MsIGJ1dCBhcyBvbmUgdGhhdCBoYXMgYmVlbiBlYXJuZWQgYnkgdmlydHVlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPiBUaGlzCiAgICAgICAgYW5kIHRoZSBuZXh0IHNlbnRlbmNlIGFyZSBnaXZlbiB1cCBhcyBjb3JydXB0IGJ5IGV2ZXJ5IG9uZS4gTWFueSBkaWZmZXJlbnQgcmVhZGluZ3MgaGF2ZQogICAgICAgIGJlZW4gcHJvcG9zZWQ7IGFuZCBJIGhhdmUgZW5kZWF2b3VyZWQgdG8gZXh0cmFjdCB3aGF0IGFwcGVhcnMgdG8gaGF2ZSBiZWVuIENpY2VybydzIG1lYW5pbmcKICAgICAgICBmcm9tIHRoZW0sIGtlZXBpbmcgYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0byB0aGUgdGV4dCBvZiBPcmVsbGl1cy48L25vdGU+IEFuZCBJLCBieSB0aGUKICAgICAgIHVuYW5pbWl0eSB3aGljaCBJIGhhdmUgZXN0YWJsaXNoZWQgYmV0d2VlbiBteXNlbGYgYW5kIG15IGNvbGxlYWd1ZSwgaGF2ZSBwcm92aWRlZCBhZ2FpbnN0CiAgICAgICB0aG9zZSBtZW4gd2hvbSBJIGtuZXcgdG8gYmUgaG9zdGlsZSB0byBteSBjb25zdWxzaGlwIGJvdGggaW4gdGhlaXIgZGlzcG9zaXRpb25zIGFuZCBhY3Rpb25zLgogICAgICAgSSBoYXZlIHByb3ZpZGVkIGFnYWluc3QgZXZlcnl0aGluZzsgYW5kIEkgaGF2ZSBzb3VnaHQgdG8gcmVjYWxsIHRob3NlIG1lbiB0byB0aGVpciBsb3lhbHR5LiBJCiAgICAgICBoYXZlIGFsc28gZ2l2ZW4gbm90aWNlIHRvIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCB0byB0cnkgbm8gZGlzb3JkZXJseSBjb25kdWN0IHdoaWxlIEkgYW0KICAgICAgIGNvbnN1bC4gTXkgZ3JlYXRlc3QgYW5kIGZpcm1lc3Qgc3VwcG9ydCBpbiBvdXIgY29tbW9uIGZvcnR1bmVzLCBPIFJvbWFucywgd2lsbCBiZSwgaWYgeW91IGZvcgogICAgICAgdGhlIGZ1dHVyZSBiZWhhdmUsIGZvciB0aGUgc2FrZSBvZiBpdCwgdG8gdGhlIHJlcHVibGljIGluIHRoZSBzYW1lIG1hbm5lciBhcyB5b3UgaGF2ZSB0aGlzCiAgICAgICBkYXkgYmVoYXZlZCB0byBtZSBpbiB0aGlzIG1vc3QgbnVtZXJvdXMgYXNzZW1ibHksIGZvciB0aGUgc2FrZSBvZiB5b3VyIG93biBzYWZldHkuIEkgcHJvbWlzZQogICAgICAgeW91IG1vc3QgY2VydGFpbmx5LCBhbmQgcGxlZGdlIG15c2VsZiB0byBtYW5hZ2UgbWF0dGVycyBzbyB0aGF0IHRoZXkgd2hvIGhhdmUgZW52aWVkIHRoZQogICAgICAgaG9ub3VycyB3aGljaCBJIGhhdmUgZ2FpbmVkLCBzaGFsbCBhdCBsYXN0IGNvbmZlc3MsIHRoYXQgaW4gc2VsZWN0aW5nIGEgY29uc3VsIHlvdSBhbGwgc2hvd2VkCiAgICAgICB0aGUgZ3JlYXRlc3QgcG9zc2libGUgZm9yZXNpZ2h0LiA8L3A+CgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.37.103'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlLCBPIFJvbWFucywgd291bGQgaGF2ZSBwdXJzdWVkIGEgbW9yZSBjb252ZW5pZW50IGNvdXJzZSwgaWYgdGhleQogICAgICAgaGFkIHNhaWQgdG8gbXkgZmFjZSwgaW4gbXkgcHJlc2VuY2UsIHRoZSB0aGluZ3Mgd2hpY2ggdGhleSBhbGxlZ2UgdG8geW91IGNvbmNlcm5pbmcgbWUuIEZvcgogICAgICAgdGhlbiwgdGhleSB3b3VsZCBoYXZlIGdpdmVuIHlvdSBhbiBvcHBvcnR1bml0eSBmb3IgYSBtb3JlIGp1c3QgZGVjaXNpb24gaW4gdGhlIG1hdHRlciwgYW5kCiAgICAgICB0aGV5IHdvdWxkIGhhdmUgZm9sbG93ZWQgdGhlIHVzYWdlcyBvZiB0aGVpciBwcmVkZWNlc3NvcnMsIGFuZCBoYXZlIG1haW50YWluZWQgdGhlaXIgb3duCiAgICAgICBwcml2aWxlZ2VzIGFuZCBwb3dlci4gQnV0LCBzaW5jZSB0aGV5IGhhdmUgc2h1bm5lZCBhbnkgb3BlbiBjb250ZXN0IGFuZCBkZWJhdGUgd2l0aCBtZSBhdAogICAgICAgcHJlc2VudCwgbm93LCBpZiB0aGV5IHBsZWFzZSwgbGV0IHRoZW0gY29tZSBmb3J0aCBpbnRvIHRoZSBhc3NlbWJseSB3aGljaCBJIGhhdmUgY29udmVuZWQsCiAgICAgICBhbmQgdGhvdWdoIHRoZXkgd291bGQgbm90IGNvbWUgZm9yd2FyZCB3aWxsaW5nbHkgd2hlbiBjaGFsbGVuZ2VkIGJ5IG1lLCBsZXQgdGhlbSBhdCBsZWFzdAogICAgICAgcmV0dXJuIHRvIGl0IG5vdyB0aGF0IEkgb3Blbmx5IGludml0ZSB0aGVtIGJhY2suIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlLCBPIFJvbWFucywgdGhhdCBzb21lIG1lbiBhcmUgbWFraW5nIGEgbm9pc2UgdG8gaW1wbHkgc29tZXRoaW5nIG9yIG90aGVyLCBhbmQgdGhhdAogICAgICAgdGhleSBubyBsb25nZXIgc2hvdyBtZSB0aGUgc2FtZSBjb3VudGVuYW5jZSBpbiB0aGlzIHByZXNlbnQgYXNzZW1ibHkgd2hpY2ggdGhleSBzaG93ZWQgbWUgYXQKICAgICAgIHRoZSBsYXN0IGFzc2VtYmx5IGluIHdoaWNoIEkgYWRkcmVzc2VkIHlvdS4gV2hlcmVmb3JlLCBJIGVudHJlYXQgeW91LCB3aG8gaGF2ZSBiZWxpZXZlZCBub25lCiAgICAgICBvZiBteSBlbmVtaWVzJyBzdG9yaWVzIGFib3V0IG1lLCB0byByZXRhaW4gdGhlIHNhbWUgZmF2b3VyYWJsZSBkaXNwb3NpdGlvbiB0b3dhcmRzIG1lIHRoYXQKICAgICAgIHlvdSBhbHdheXMgaGFkOyBidXQgZnJvbSB5b3UsIHdob20gSSBwZXJjZWl2ZSB0byBiZSBhIGxpdHRsZSBjaGFuZ2VkIHRvd2FyZHMgbWUsIEkgYmVnIHRoZQogICAgICAgbG9hbiBvZiB5b3VyIGdvb2Qgb3BpbmlvbiBvZiBtZSBmb3IgYSBzaG9ydCB0aW1lLCBvbiBjb25kaXRpb24gb2YgeW91ciByZXRhaW5pbmcgaXQgZm9yZXZlciwKICAgICAgIGlmIEkgcHJvdmUgdG8geW91IHdoYXQgSSBhbSBnb2luZyB0byBzYXksIGJ1dCBhYmFuZG9uaW5nIGl0IGFuZCB0cmFtcGxpbmcgaXQgdW5kZXIgZm9vdCBpbgogICAgICAgdGhpcyB2ZXJ5IHBsYWNlIGlmIEkgZmFpbCB0byBlc3RhYmxpc2ggaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdXIgbWluZHMgYW5kIGVhcnMsIE8gUm9tYW5zLCBhcmUgYmxvY2tlZCB1cCB3aXRoIHRoZSBhc3NlcnRpb24gdGhhdCBJIGFtIG9wcG9zaW5nIHRoZQogICAgICAgYWdyYXJpYW4gbGF3IGFuZCB5b3VyIGludGVyZXN0LCBvdXQgb2YgYSBkZXNpcmUgdG8gZ3JhdGlmeSB0aGUgc2V2ZW4gdHlyYW50cywgYW5kIHRoZSBvdGhlcgogICAgICAgcG9zc2Vzc29ycyBvZiBTdWxsYSdzIGFsbG90bWVudHMuIElmIHRoZXJlIGJlIGFueSBtZW4gd2hvIGhhdmUgYmVsaWV2ZWQgdGhlc2UgdGhpbmdzLCB0aGV5CiAgICAgICBtdXN0IGluZXZpdGFibHkgZmlyc3QgaGF2ZSBiZWxpZXZlZCB0aGlzLCB0aGF0IGJ5IHRoaXMgYWdyYXJpYW4gbGF3IHdoaWNoIGhhcyBiZWVuIHByb3Bvc2VkLAogICAgICAgdGhlIGxhbmRzIGFsbG90dGVkIGJ5IFN1bGxhIGFyZSB0YWtlbiBhd2F5IGZyb20gdGhlaXIgcHJlc2VudCBwb3NzZXNzb3JzIGFuZCBkaXZpZGVkIGFtb25nCiAgICAgICB5b3UsIG9yIGVsc2UsIHRoYXQgdGhlIHBvc3Nlc3Npb25zIG9mIHByaXZhdGUgaW5kaXZpZHVhbHMgYXJlIGRpbWluaXNoZWQsIGluIG9yZGVyIHRoYXQgeW91CiAgICAgICBtYXkgYmUgc2V0dGxlZCBvbiB0aGVpciBsYW5kcy4gSWYgSSBzaG93IHlvdSwgbm90IG9ubHkgdGhhdCBub3QgYW4gYXRvbSBvZiBsYXVkIG9mIFN1bGxhJ3MKICAgICAgIGFsbG90bWVudHMgaXMgdGFrZW4gZnJvbSBhbnkgb25lLCBidXQgZXZlbiB0aGF0IHRoYXQgZGVzY3JpcHRpb24gb2YgcHJvcGVydHkgaXMgZW5zdXJlZCB0bwogICAgICAgaXRzIHBvc3Nlc3NvcnMsIGFuZCBjb25maXJtZWQgaW4gYSBtb3N0IGltcHVkZW50IG1hbm5lcjsgaWYgSSBwcm92ZSwgdGhhdCBSdWxsdXMsIGJ5IGhpcyBsYXcsCiAgICAgICBwcm92aWRlcyBzbyBjYXJlZnVsbHkgZm9yIHRoZSBjYXNlIG9mIHRob3NlIGxhbmRzIHdoaWNoIGhhdmUgYmVlbiBhbGxvdHRlZCBieSBTdWxsYSwgdGhhdCBpdAogICAgICAgaXMgcGVyZmVjdGx5IHBsYWluIHRoYXQgdGhhdCBsYXcgd2FzIGRyYXduIHVwLCBub3QgYnkgYW55IHByb3RlY3RvciBvZiB5b3VyIGludGVyZXN0cywgYnV0IGJ5CiAgICAgICB0aGUgdHdpbiBsYXcgb2YgVmFsZ2l1czsgaXMgdGhlcmUgdGhlbiBhbnkgcmVhc29uIGF0IGFsbCwgd2h5IGhlIHNob3VsZCBkaXNwYXJhZ2Ugbm90IG9ubHkgbXkKICAgICAgIGRpbGlnZW5jZSBhbmQgcHJ1ZGVuY2UsIGJ1dCB5b3VycyBhbHNvLCBieSB0aGUgYWNjdXNhdGlvbnMgd2hpY2ggaGUgaGFzIGVtcGxveWVkIGFnYWluc3QgbWUKICAgICAgIGluIG15IGFic2VuY2U/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.2.4'] = ""
translation['3.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBPZiBhbGwgbGF3cyBJIHRoaW5rIHRoYXQgb25lIGlzIHRoZSBtb3N0IHVuanVzdCBhbmQgdGhlCiAgICAgICBtb3N0IHVubGlrZSBhIGxhdywgd2hpY2ggTHVjaXVzIEZsYWNjdXMsIHRoZSBpbnRlcnJleCwgcGFzc2VkIHJlc3BlY3RpbmcKICAgICAgIFN1bGxh4oCU4oCcVGhhdCBldmVyeXRoaW5nIHdoaWNoIGhlIGhhcyBkb25lIHNob3VsZCBiZSByYXRpZmllZC7igJ0KICAgICAgIEZvciwgYXMgaW4gb3RoZXIgc3RhdGVzLCB3aGVuIHR5cmFudHMgYXJlIGVzdGFibGlzaGVkLCBhbGwgbGF3cyBhcmUgZXh0aW5ndWlzaGVkIGFuZAogICAgICAgZGVzdHJveWVkIHRoaXMgbWFuIGVzdGFibGlzaGVkIGEgdHlyYW50IG9mIHRoZSByZXB1YmxpYyBieSBsYXcuIEl0IGlzIGFuIGludmlkaW91cyBsYXcsIGFzIEkKICAgICAgIHNhaWQgYmVmb3JlOyBidXQgc3RpbGwgaXQgaGFzIHNvbWUgZXhjdXNlLiBGb3IgaXQgYXBwZWFycyB0byBiZSBhIGxhdyBub3QgdXJnZWQgYnkgdGhlIG1hbgogICAgICAgYnV0IGJ5IHRoZSB0aW1lLiBXaGF0IHNoYWxsIHdlIHNheSBpZiB0aGlzIGxhdyBpcyBhIGZhciBtb3JlIGltcHVkZW50IG9uZT8gPC90cmFuc2xhdGlvbj4="
translation['3.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgYnkgdGhlIFZhbGVyaWFuIGFuZCBDb3JuZWxpYW4gbGF3IHRoaXMgcG93ZXIgaXMgdGFrZW4gYXdheSBhdCB0aGUgc2FtZQogICAgICAgdGltZSB0aGF0IGl0IGlzIGdpdmVuLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlcmUgaXMgcHJvYmFibHkgc29tZSBjb3JydXB0aW9uIGluIHRoZSB0ZXh0CiAgICAgICAgaGVyZSBhbmQgaW4gdGhlIG5leHQgZmV3IHNlbnRlbmNlczsgT3JlbGxpdXMgbWFya3MgdGhlbSB3aXRoIGEgZGFnZ2VyLjwvbm90ZT4gQW4gaW1wdWRlbnQKICAgICAgIGNvdXJ0aW5nIG9mIHRoZSBwZW9wbGUgaXMgam9pbmVkIHdpdGggYSBiaXR0ZXIgaW5qdXJ5IGRvbmUgdG8gdGhlbS4gQnV0IHN0aWxsIGEgbWFuIGZyb20gd2hvbQogICAgICAgYW55IHByb3BlcnR5IGlzIHRha2VuIGFsd2F5cyBoYXMgc29tZSBob3BlIGFyaXNpbmcgZnJvbSB0aG9zZSBsYXdzOyBhbmQgaGUsIHRvIHdob20gYW55IGlzCiAgICAgICBnaXZlbiwgaGFzIHNvbWUgc2NydXBsZXMuIFRoZSBwcm92aXNpb24gaW4gUnVsbHVzJ3MgbGF3IGlzLCDigJxXaGF0ZXZlciBoYXMgYmVlbiBkb25lCiAgICAgICBzaW5jZSB0aGUgY29uc3Vsc2hpcCBvZiBDYWl1cyBNYXJpdXMgYW5kIENuYWV1cyBQYXBpcml1cy7igJ0gSG93IGNhcmVmdWxseSBkb2VzIGhlCiAgICAgICBhdm9pZCBzdXNwaWNpb24sIHdoZW4gaGUgbmFtZXMgdGhvc2UgY29uc3VscyBtb3N0IGVzcGVjaWFsbHkgd2hvIHdlcmUgdGhlIGdyZWF0ZXN0CiAgICAgICBhZHZlcnNhcmllcyBvZiBTdWxsYS4gRm9yLCBpZiBoZSBoYWQgbmFtZWQgU3VsbGEsIGhlIHRob3VnaHQgdGhhdCB0aGF0IHdvdWxkIGhhdmUgYmVlbiBhCiAgICAgICBwYWxwYWJsZSBhbmQgYWxzbyBhbiBpbnZpZGlvdXMgbWVhc3VyZS4gQW5kIHlldCwgd2hpY2ggb2YgeW91IGRpZCBoZSBleHBlY3QgdG8gYmUgc28gc3R1cGlkLAogICAgICAgYXMgbm90IHRvIGJlIGFibGUgdG8gcmVjb2xsZWN0IHRoYXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgdGhvc2UgbWVuIFN1bGxhCiAgICAgICBiZWNhbWUgZGljdGF0b3I/IDwvdHJhbnNsYXRpb24+"
translation['3.2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0IHRoZW4gZG9lcyB0aGlzIE1hcmlhbiB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlIHNheSwgd2hlbiBoZSBpcyB0cnlpbmcgdG8gbWFrZSB1cywgd2hvIGFyZSBTdWxsYSdzIGZyaWVuZHMsIHVucG9wdWxhcj8KICAgICAgIOKAnFdoYXRldmVyIGhhcyBiZWVuIGdpdmVuLCBvciBhc3NpZ25lZCwgb3Igc29sZCwgb3IgZ3JhbnRlZCBieSBwdWJsaWMgYXV0aG9yaXR5LAogICAgICAgd2hldGhlciBsYW5kcywgb3IgaG91c2VzLCBvciBsYWtlcywgb3IgbWFyc2hlcywgb3Igc2l0ZXMsIG9yIHByb3BlcnRpZXMs4oCdIChoZSBoYXMKICAgICAgIG9taXR0ZWQgdG8gbWVudGlvbiB0aGUgc2t5IGFuZCBzZWEsIGJ1dCBoZSBoYXMgb21pdHRlZCBub3RoaW5nIGVsc2UsKSDigJxzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q2FyYm88L3N1cm5hbWU+PC9wZXJzTmFtZT4u4oCdIEJ5IHdob20sCiAgICAgICBPIFJ1bGx1cz8gV2hvIGhhcyBhbGxvdHRlZCBhbnl0aGluZyB3aGF0ZXZlciBzaW5jZSB0aGUgQ29uc3Vsc2hpcCBvZiBNYXJpdXMgYW5kIENhcmJvPyBXaG8KICAgICAgIGhhcyBnaXZlbiBhbnl0aGluZywgd2hvIGhhcyBncmFudGVkIGFueXRoaW5nLCBleGNlcHQgU3VsbGE/IOKAnExldCBhbGwgdGhvc2UgdGhpbmdzCiAgICAgICByZW1haW4gaW4gdGhlIHNhbWUgY29uZGl0aW9uLuKAnSBJbiB3aGF0IGNvbmRpdGlvbj8gSGUgaXMgdW5kZXJtaW5pbmcgc29tZXRoaW5nIG9yCiAgICAgICBvdGhlci4gVGhpcyBvdmVyIGFjdGl2ZSBhbmQgdG9vIGVuZXJnZXRpYyB0cmlidW5lIG9mIHRoZSBwZW9wbGUgaXMgcmVzY2luZGluZyB0aGUgYWN0cyBvZgogICAgICAgU3VsbGEuIOKAnEFzIHRob3NlIHRoaW5ncyB3aGljaCBoYXZlIGJlY29tZSBwcml2YXRlIHByb3BlcnR5IGFjY29yZGluZyB0byB0aGUgbW9zdAogICAgICAgcmVndWxhciBwb3NzaWJsZSBjb3Vyc2Ugb2YgbGF3LuKAnSBBcmUgdGhleSB0aGVuIHRvIGJlIGhlbGQgb24gYSBzdXJlciB0ZW51cmUgdGhhbiBhCiAgICAgICBtYW4ncyBwYXRlcm5hbCBhbmQgaGVyZWRpdGFyeSBwcm9wZXJ0eT8gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNhcmJvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['3.2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBKdXN0IHNvLiBCdXQgdGhlCiAgICAgICBWYWxlcmlhbiBsYXcgZG9lcyBub3Qgc2F5IHRoaXM7IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjI1NzA2MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMjU3MDYxIj5Db3JuZWxpYW48L3BsYWNlTmFtZT4gbGF3cwogICAgICAgZG8gbm90IHNhbmN0aW9uIHRoaXM7IFN1bGxhIGhpbXNlbGYgZG9lcyBub3QgZGVtYW5kIHRoaXMuIElmIHRob3NlIGxhbmRzIGhhdmUgYW55IGNvbm5lY3Rpb24KICAgICAgIHdpdGggbGVnYWwgcmlnaHQsIGlmIHRoZXkgaGF2ZSBhbnkgcmVzZW1ibGFuY2UgdG8gcHJpdmF0ZSBwcm9wZXJ0eSwgaWYgdGhleSBoYXZlIHRoZSBsZWFzdAogICAgICAgaG9wZSBvZiBiZWNvbWluZyBwZXJtYW5lbnQgcHJvcGVydHksIHRoZW4gdGhlcmUgaXMgbm90IG9uZSBvZiB0aG9zZSBtZW4gc28gaW1wdWRlbnQgYXMgbm90IHRvCiAgICAgICB0aGluayB0aGF0IGhlIGlzIGV4Y2VsbGVudGx5IHdlbGwgdHJlYXRlZC4gQnV0IHlvdSwgTyBSdWxsdXMsIHdoYXQgaXMgeW91ciBvYmplY3Q/IFRoYXQgdGhleQogICAgICAgbWF5IHJldGFpbiB3aGF0IHRoZXkgaGF2ZSBnb3Q/IFdobyBoaW5kZXJzIHRoZW0/IFRoYXQgdGhleSBtYXkgcmV0YWluIGl0IGFzIHByaXZhdGUgcHJvcGVydHk/CiAgICAgICBCdXQgdGhlIGxhdyBpcyBmcmFtZWQgaW4gc3VjaCBhIHdheSB0aGF0IHRoZSBmYXJtIG9mIHlvdXIgZmF0aGVyLWluLWxhdyBpbiB0aGUgSGlycGluZQogICAgICAgZGlzdHJpY3QsIG9yIHRoZSB3aG9sZSBIaXJwaW5lIGRpc3RyaWN0LCBmb3IgaGUgaXMgaW4gcG9zc2Vzc2lvbiBvZiBhbGwgb2YgaXQsIGlzIGhlbGQgYnkgaGltCiAgICAgICBvbiBhIHN1cmVyIHRlbnVyZSB0aGFuIG15IHBhdGVybmFsIGhlcmVkaXRhcnkgZXN0YXRlIGF0IEFycGludW0uIEZvciB0aGF0IGlzIHRoZSBlZmZlY3Qgb2YKICAgICAgIHRoZSBwcm92aXNpb24gb2YgeW91ciBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['3.2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgdGhvc2UgZmFybXMgaW4gdHJ1dGggYXJlCiAgICAgICBoZWxkIGJ5IHRoZSBiZXN0IHJpZ2h0LCB3aGljaCBhcmUgaGVsZCBvbiB0aGUgYmVzdCBjb25kaXRpb25zLiBGcmVlIHRlbnVyZXMgYXJlIGhlbGQgYnkgYQogICAgICAgYmV0dGVyIHRlbnVyZSB0aGFuIHNlcnZpbGUgb25lcy4gQnkgdGhpcyBjbGF1c2UgYWxsIHRlbnVyZXMgd2hpY2ggaGF2ZSBoaXRoZXJ0byBiZWVuIHNlcnZpbGUKICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2VydmEgcHJhZWRpYTwvZm9yZWlnbj4gbWVhbiBzdWNoIGVzdGF0ZXMgYXMgd2VyZQogICAgICAgIGxpYWJsZSB0byBjZXJ0YWluIGJ1cmRlbnMgb3IgZHV0aWVzOyBoZWxkIGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiBjZXJ0YWluIHNlcnZpY2VzLjwvbm90ZT4KICAgICAgIHRlbnVyZXMgd2lsbCBiZSBzbyBubyBsb25nZXIuIEVuZnJhbmNoaXNlZCBlc3RhdGVzIGFyZSBpbiBhIGJldHRlciBjb25kaXRpb24gdGhhbiB0aG9zZSB3aGljaAogICAgICAgYXJlIGxpYWJsZSB0byBubyBvYmxpZ2F0aW9uczsgYnkgdGhlIHNhbWUgY2xhdXNlIGFsbCBsYW5kcyBzdWJqZWN0IHRvIHRoZSBwYXltZW50IG9mIGFueQogICAgICAgZmluZSwgaWYgb25seSB0aGV5IHdlcmUgYXNzaWduZWQgYnkgU3VsbGEsIGFyZSByZWxlYXNlZCBmcm9tIHN1Y2ggcGF5bWVudHMuIExhbmRzIHdoaWNoIGFyZQogICAgICAgZXhlbXB0IGZyb20gcGF5bWVudCBhcmUgaW4gYSBiZXR0ZXIgY29uZGl0aW9uIHRoYW4gdGhvc2Ugd2hpY2ggcGF5IGEgZmluZS4gSSwgaW4gbXkgVHVzY3VsYW4KICAgICAgIHZpbGxhLCBtdXN0IHBheSBhIHRheCBmb3IgdGhlIENyYWJyYW4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2VydmEgcHJhZWRpYTwvZm9yZWlnbj4gbWVhbiBzdWNoIGVzdGF0ZXMgYXMgd2VyZQogICAgICAgIGxpYWJsZSB0byBjZXJ0YWluIGJ1cmRlbnMgb3IgZHV0aWVzOyBoZWxkIGJ5IHRoZSBwZXJmb3JtYW5jZSBvZiBjZXJ0YWluIHNlcnZpY2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkNyYWJyYQogICAgICAgICBhcXVhPC9mb3JlaWduPiBpcyBzZXZlcmFsIHRpbWVzIG1lbnRpb25lZCBieSBDaWNlcm8gaW4gaGlzIGxldHRlcnMgYXMgYSBzbWFsbCBhcnRpZmljaWFsCiAgICAgICAgc3RyZWFtIHJ1bm5pbmcgdGhyb3VnaCBoaXMgVHVzY3VsYW4gcHJvcGVydHkuIEhlIGV2ZW4gaGFkIGEgbGF3LXN1aXQgcmVzcGVjdGluZyBpdCwgYXMKICAgICAgICBhcHBlYXJzIGZyb20gb25lIG9mIGhpcyBsZXR0ZXJzLiA8L25vdGU+IHdhdGVyLCBiZWNhdXNlIEkgcmVjZWl2ZWQgbXkgZXN0YXRlIHN1YmplY3QgdG8gdGhpcwogICAgICAgbGlhYmlsaXR5OyBidXQsIGlmIEkgaGFkIG9ubHkgaGFkIHRoZSBsYW5kIGdpdmVuIG1lIGJ5IFN1bGxhLCBJIHNob3VsZCBub3QgcGF5IGl0LCBhY2NvcmRpbmcKICAgICAgIHRvIHRoZSBsYXcgb2YgUnVsbHVzLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5DcmFicmEKICAgICAgICAgYXF1YTwvZm9yZWlnbj4gaXMgc2V2ZXJhbCB0aW1lcyBtZW50aW9uZWQgYnkgQ2ljZXJvIGluIGhpcyBsZXR0ZXJzIGFzIGEgc21hbGwgYXJ0aWZpY2lhbAogICAgICAgIHN0cmVhbSBydW5uaW5nIHRocm91Z2ggaGlzIFR1c2N1bGFuIHByb3BlcnR5LiBIZSBldmVuIGhhZCBhIGxhdy1zdWl0IHJlc3BlY3RpbmcgaXQsIGFzCiAgICAgICAgYXBwZWFycyBmcm9tIG9uZSBvZiBoaXMgbGV0dGVycy4gPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlIHlvdSwgTyBSb21hbnMsIG1vdmVkIGVpdGhlciBieSB0aGUgaW1wdWRlbmNlIG9mIHRoZSBsYXcgb3Igb2YgdGhlIHNwZWVjaCwgYXMgaW5kZWVkCiAgICAgICB5b3UgbXVzdCBiZSBmcm9tIHRoZSBuYXR1cmUgb2YgdGhlIGNhc2U7IGJ5IHRoZSBpbXB1ZGVuY2Ugb2YgdGhlIGxhdywgd2hpY2ggZ2l2ZXMgYSBiZXR0ZXIKICAgICAgIHRpdGxlIHRvIGVzdGF0ZXMgcG9zc2Vzc2VkIGJ5IHZpcnR1ZSBvZiBTdWxsYSdzIGRvbmF0aW9uIHRoYW4gdG8gaGVyZWRpdGFyeSBwcm9wZXJ0eTsgYnkgdGhlCiAgICAgICBpbXB1ZGVuY2Ugb2YgdGhlIHNwZWVjaCB3aGljaCwgaW4gc3VjaCBhIGNhdXNlIGlzIHRoYXQsIGRhcmVzIHRvIGFjY3VzZSBhbnkgb25lLCBhbmQgeWV0CiAgICAgICB2ZWhlbWVudGx5LCB0b28gdmVoZW1lbnRseSwgdG8gZGVmZW5kIHRoZSBwcmluY2lwbGVzIG9mIFN1bGxhLiBCdXQgaWYgdGhlIGxhdyBvbmx5IHJhdGlmaWVkCiAgICAgICBhbGwgdGhlIGFsbG90bWVudHMgd2hpY2ggaGFkIGJlZW4gZ2l2ZW4gYnkgU3VsbGEsIEkgc2hvdWxkIG5vdCBzYXkgYSB3b3JkLCBwcm92aWRlZCBoZSB3b3VsZAogICAgICAgY29uZmVzcyBoaW1zZWxmIHRvIGJlIGEgcGFydGlzYW4gb2YgU3VsbGEncy4gQnV0IGhlIGRvZXMgbm90IG9ubHkgcHJvdGVjdCB0aGVpciBleGlzdGluZwogICAgICAgaW50ZXJlc3RzLCBidXQgaGUgZXZlbiBhZGRzIHRvIHRoZWlyIHByZXNlbnQgcG9zc2Vzc2lvbnMgc29tZSBzb3J0IG9mIGdpZnQuIEFuZCBoZSwgd2hvCiAgICAgICBhY2N1c2VzIG1lLCBzYXlpbmcgdGhhdCB0aGUgcG9zc2Vzc2lvbnMgcmVzdGluZyBvbiBTdWxsYSdzIHRpdGxlIGFyZSBkZWZlbmRlZCBieSBtZSwgbm90IG9ubHkKICAgICAgIGNvbiBmaXJtcyB0aGVtIGhpbSBzZWxsLCBidXQgZXZlbiBpbnN0aXR1dGVzIGZyZXNoIGFsbG90bWVudHMsIGFuZCByaXNlcyB1cCBhbW9uZyB1cyBhIG5ldwogICAgICAgU3VsbGEuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGp1c3QgdGFrZSBub3RpY2Ugd2hhdCBncmVhdCBncmFudHMgb2YgbGFuZHMKICAgICAgIHRoaXMgcmVwcm92ZXIgb2Ygb3VycyBlbmRlYXZvdXJzIHRvIG1ha2UgYnkgb25lIHNpbmdsZSB3b3JkLiDigJxXaGF0ZXZlciBoYXMgYmVlbgogICAgICAgZ2l2ZW4sIG9yIHByZXNlbnRlZCwgb3IgZ3JhbnRlZCwgb3Igc29sZOKAneKAlEkgY2FuIGJlYXIgaXQ7IEkgaGVhciBpdDsgd2hhdAogICAgICAgY29tZXMgbmV4dD/igJTigJxzaGFsbCBiZSBoZWxkIGFzIGFic29sdXRlIHByb3BlcnR5LuKAnSBoYXMgYSB0cmlidW5lCiAgICAgICBvZiB0aGUgcGVvcGxlIHZlbnR1cmVkIHRvIHByb3Bvc2UgdGhhdCB3aGF0ZXZlciBhbnkgb25lIGhhcyBiZWNvbWUgcG9zc2Vzc2VkIG9mJyBzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5DYXJibzwvc3VybmFtZT48L3BlcnNOYW1lPiwgaGUgc2hhbGwgaG9sZCBieSB0aGUKICAgICAgIGZpcm1lc3QgcmlnaHQgdGhhdCBhbnkgb25lIGNhbiBob2xkIHByaXZhdGUgcHJvcGVydHk/IFN1cHBvc2UgaGUgZHJvdmUgb3V0IHRoZSBmb3JtZXIKICAgICAgIHByb3ByaWV0b3JzIGJ5IHZpb2xlbmNlPyBTdXBwb3NlIGhlIGJlY2FtZSBwb3NzZXNzZWQgb2YgaXQgaW4gc29tZSB1bmRlcmhhbmQgbWFubmVyLCBvciBvbmx5CiAgICAgICBieSBzb21lIG9uZSdzIHBlcm1pc3Npb24gZm9yIGEgdGltZT8gQnkgdGhpcyBsYXcgdGhlbiBhbGwgY2l2aWwgcmlnaHRzLCBhbGwgbGVnaXRpbWF0ZQogICAgICAgdGl0bGVzLCBhbGwgaW50ZXJkaWN0cyBvZiB0aGUgcHJhZXRvcnMgd2lsbCBiZSBwdXQgYW4gZW5kIHRvLiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPiBJdCBpcyBubyB1bmltcG9ydGFudCBjYXNlLCBpdCBpcyBubyBpbnNpZ25pZmljYW50IGluanVyeSB0aGF0IGlzIGNvbmNlYWxlZAogICAgICAgdW5kZXIgdGhpcyBleHByZXNzaW9uLCBPIFJvbWFucy4gRm9yIHRoZXJlIHdlcmUgbWFueSBlc3RhdGVzIGNvbmZpc2NhdGVkIGJ5IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjI1NzA2MSIga2V5PSJ0Z24sMjI1NzA2MSI+Q29ybmVsaWFuPC9wbGFjZU5hbWU+IGxhdywgd2hpY2ggd2VyZSBuZXZlciBhc3NpZ25lZCBvciBzb2xkIHRvIGFueSBvbmUsCiAgICAgICBidXQgd2hpY2ggYXJlIG9jY3VwaWVkIGluIHRoZSBtb3N0IGltcHVkZW50IG1hbm5lciBieSBhIGZldyBtZW4sIFRoZXNlIGFyZSB0aGUgbWVuIGZvciB3aG9tCiAgICAgICBoZSBwcm92aWRlcywgdGhlc2UgYXJlIHRoZSBtZW4gd2hvbSBoZSBkZWZlbmRzLCB3aG9tIGhlIG1ha2VzIHByaXZhdGUgcHJvcHJpZXRvcnMuIFRoZXNlCiAgICAgICBsYW5kcywgSSBzYXksIHdoaWNoIFN1bGxhIGdhdmUgdG8gbm8gb25lLCBSdWxsdXMgZG9lcyBub3QgY2hvb3NlIHRvIGFzc2lnbiB0byB5b3UsIGJ1dCB0bwogICAgICAgc2FjcmlmaWNlIHRvIHRoZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZW0uIEkgYXNrIHRoZSByZWFzb24gd2h5IHlvdSBzaG91bGQgYWxsb3cKICAgICAgIHRob3NlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDMxMjIiIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwgaW4gdGhlIHR3byBTcGFpbnMsIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiwgd2hpY2ggeW91cgogICAgICAgYW5jZXN0b3JzIGFjcXVpcmVkIGZvciB5b3UsIHRvIGJlIHNvbGQsIHdoZW4geW91IHNlZSB0aG9zZSBsYW5kcyB3aGljaCBhcmUgeW91ciBvd24KICAgICAgIHNhY3JpZmljZWQgYnkgdGhlIHNhbWUgbGF3IHRvIHRoZWlyIGV4aXN0aW5nIG9jY3VwaWVycz8gPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIE5vdyB5b3Ugd2lsbCB1bmRlcnN0YW5kIHRoZSB3aG9sZSBsYXcsIGFuZCBwZXJjZWl2ZSwgPHBiIG49IjI2MiIgLz4gdGhhdCBpdCBpcyBmcmFtZWQgdG8KICAgICAgIHNlY3VyZSB0aGUgcG93ZXIgb2YgYSBmZXcgaW5kaXZpZHVhbHMsIGFuZCBhZG1pcmFibHkgYWRhcHRlZCB0byB0aGUgY2lyY3Vtc3RhbmNlcyBvZiBTdWxsYSdzCiAgICAgICBhbGxvdG1lbnRzLiBGb3IgdGhpcyBtYW4ncyBmYXRoZXItaW4tbGF3IGlzIGEgbW9zdCBleGNlbGxlbnQgbWFuLCBub3IgYW0gSSBzYXlpbmcgYSB3b3JkCiAgICAgICBhZ2FpbnN0IGhpcyBjaGFyYWN0ZXI7IGJ1dCBJIGFtIGRpc2N1c3NpbmcgdGhlIGltcHVkZW5jZSBvZiBoaXMgc29uLWluLWxhdy4gRm9yIGhlIHdpc2hlcyB0bwogICAgICAga2VlcCB3aGF0IGhlIGhhcyBnb3QgcG9zc2Vzc2lvbiBvZiwgYW5kIGRvZXMgbm90IGNvbmNlYWwgdGhhdCBoZSBpcyBvbmUgb2YgU3VsbGEncyBwYXJ0eS4KICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gRm9yIGp1c3QgdGFrZSBub3RpY2Ugd2hhdCBncmVhdCBncmFudHMgb2YgbGFuZHMKICAgICAgIHRoaXMgcmVwcm92ZXIgb2Ygb3VycyBlbmRlYXZvdXJzIHRvIG1ha2UgYnkgb25lIHNpbmdsZSB3b3JkLiDigJxXaGF0ZXZlciBoYXMgYmVlbgogICAgICAgZ2l2ZW4sIG9yIHByZXNlbnRlZCwgb3IgZ3JhbnRlZCwgb3Igc29sZOKAneKAlEkgY2FuIGJlYXIgaXQ7IEkgaGVhciBpdDsgd2hhdAogICAgICAgY29tZXMgbmV4dD/igJTigJxzaGFsbCBiZSBoZWxkIGFzIGFic29sdXRlIHByb3BlcnR5LuKAnSBoYXMgYSB0cmlidW5lCiAgICAgICBvZiB0aGUgcGVvcGxlIHZlbnR1cmVkIHRvIHByb3Bvc2UgdGhhdCB3aGF0ZXZlciBhbnkgb25lIGhhcyBiZWNvbWUgcG9zc2Vzc2VkIG9mJyBzaW5jZSB0aGUKICAgICAgIGNvbnN1bHNoaXAgb2YgTWFyaXVzIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q2FyYm88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGhlIHNoYWxsIGhvbGQgYnkgdGhlCiAgICAgICBmaXJtZXN0IHJpZ2h0IHRoYXQgYW55IG9uZSBjYW4gaG9sZCBwcml2YXRlIHByb3BlcnR5PyBTdXBwb3NlIGhlIGRyb3ZlIG91dCB0aGUgZm9ybWVyCiAgICAgICBwcm9wcmlldG9ycyBieSB2aW9sZW5jZT8gU3VwcG9zZSBoZSBiZWNhbWUgcG9zc2Vzc2VkIG9mIGl0IGluIHNvbWUgdW5kZXJoYW5kIG1hbm5lciwgb3Igb25seQogICAgICAgYnkgc29tZSBvbmUncyBwZXJtaXNzaW9uIGZvciBhIHRpbWU/IEJ5IHRoaXMgbGF3IHRoZW4gYWxsIGNpdmlsIHJpZ2h0cywgYWxsIGxlZ2l0aW1hdGUKICAgICAgIHRpdGxlcywgYWxsIGludGVyZGljdHMgb2YgdGhlIHByYWV0b3JzIHdpbGwgYmUgcHV0IGFuIGVuZCB0by4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNhcmJvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['3.3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gSXQgaXMgbm8gdW5pbXBvcnRhbnQgY2FzZSwgaXQgaXMgbm8gaW5zaWduaWZpY2FudCBpbmp1cnkgdGhhdCBpcyBjb25jZWFsZWQKICAgICAgIHVuZGVyIHRoaXMgZXhwcmVzc2lvbiwgTyBSb21hbnMuIEZvciB0aGVyZSB3ZXJlIG1hbnkgZXN0YXRlcyBjb25maXNjYXRlZCBieSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDIyNTcwNjEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjI1NzA2MSI+Q29ybmVsaWFuPC9wbGFjZU5hbWU+IGxhdywgd2hpY2ggd2VyZSBuZXZlciBhc3NpZ25lZCBvciBzb2xkIHRvIGFueSBvbmUsCiAgICAgICBidXQgd2hpY2ggYXJlIG9jY3VwaWVkIGluIHRoZSBtb3N0IGltcHVkZW50IG1hbm5lciBieSBhIGZldyBtZW4sIFRoZXNlIGFyZSB0aGUgbWVuIGZvciB3aG9tCiAgICAgICBoZSBwcm92aWRlcywgdGhlc2UgYXJlIHRoZSBtZW4gd2hvbSBoZSBkZWZlbmRzLCB3aG9tIGhlIG1ha2VzIHByaXZhdGUgcHJvcHJpZXRvcnMuIFRoZXNlCiAgICAgICBsYW5kcywgSSBzYXksIHdoaWNoIFN1bGxhIGdhdmUgdG8gbm8gb25lLCBSdWxsdXMgZG9lcyBub3QgY2hvb3NlIHRvIGFzc2lnbiB0byB5b3UsIGJ1dCB0bwogICAgICAgc2FjcmlmaWNlIHRvIHRoZSBtZW4gd2hvIGFyZSBpbiBvY2N1cGF0aW9uIG9mIHRoZW0uIEkgYXNrIHRoZSByZWFzb24gd2h5IHlvdSBzaG91bGQgYWxsb3cKICAgICAgIHRob3NlIGxhbmRzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4sIGluIHRoZSB0d28gU3BhaW5zLCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCB3aGljaCB5b3VyCiAgICAgICBhbmNlc3RvcnMgYWNxdWlyZWQgZm9yIHlvdSwgdG8gYmUgc29sZCwgd2hlbiB5b3Ugc2VlIHRob3NlIGxhbmRzIHdoaWNoIGFyZSB5b3VyIG93bgogICAgICAgc2FjcmlmaWNlZCBieSB0aGUgc2FtZSBsYXcgdG8gdGhlaXIgZXhpc3Rpbmcgb2NjdXBpZXJzPyA8L3RyYW5zbGF0aW9uPg=="
translation['3.3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIE5vdyB5b3Ugd2lsbCB1bmRlcnN0YW5kIHRoZSB3aG9sZSBsYXcsIGFuZCBwZXJjZWl2ZSwgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYyIiAvPiB0aGF0IGl0IGlzIGZyYW1lZCB0bwogICAgICAgc2VjdXJlIHRoZSBwb3dlciBvZiBhIGZldyBpbmRpdmlkdWFscywgYW5kIGFkbWlyYWJseSBhZGFwdGVkIHRvIHRoZSBjaXJjdW1zdGFuY2VzIG9mIFN1bGxhJ3MKICAgICAgIGFsbG90bWVudHMuIEZvciB0aGlzIG1hbidzIGZhdGhlci1pbi1sYXcgaXMgYSBtb3N0IGV4Y2VsbGVudCBtYW4sIG5vciBhbSBJIHNheWluZyBhIHdvcmQKICAgICAgIGFnYWluc3QgaGlzIGNoYXJhY3RlcjsgYnV0IEkgYW0gZGlzY3Vzc2luZyB0aGUgaW1wdWRlbmNlIG9mIGhpcyBzb24taW4tbGF3LiBGb3IgaGUgd2lzaGVzIHRvCiAgICAgICBrZWVwIHdoYXQgaGUgaGFzIGdvdCBwb3NzZXNzaW9uIG9mLCBhbmQgZG9lcyBub3QgY29uY2VhbCB0aGF0IGhlIGlzIG9uZSBvZiBTdWxsYSdzIHBhcnR5LgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgbm93LCBieSB5b3VyIGluc3RydW1lbnRhbGl0eSwgaW4gb3JkZXIgdGhhdCBoZSBtYXkgaGltc2VsZiBoYXZlIHdoYXQgYmUgaGFzIG5vdCBnb3QKICAgICAgIHdpc2hlcyB0byBlc3RhYmxpc2ggdGhvc2UgdGl0bGVzIHdoaWNoIGF0IHByZXNlbnQgYXJlIGRvdWJ0ZnVsLiBBbmQgYXMgaGUgaXMgbW9yZSBjb3ZldG91cwogICAgICAgdGhhbiBTdWxsYSBoaW1zZWxmLCBJIGFtIGFjY3VzZWQgb2YgZGVmZW5kaW5nIHRoZSBhY3Rpb25zIG9mIFN1bGxhIHdoaWNoIEkgYW0gcmVzaXN0aW5nLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gTXkgZmF0aGVyLWluLWxhdywgc2F5cyBoZSwgaGFzIHNvbWUgaGl0aGVydG8gZGVzZXJ0ZWQgYW5kCiAgICAgICBkaXN0YW50IGZpZWxkcy4gQnkgbXkgbGF3IGhlIHdpbGwgYmUgYWJsZSB0byBzZWxsIHRoZW0gYXQgaGlzIG93biBwcmljZS4gSGUgaG9sZHMgdGhlbSBhdAogICAgICAgcHJlc2VudCBieSBhbiB1bmNlcnRhaW4gdGl0bGU7IGluIGZhY3QgaGUgaGFzIG5vIHJpZ2h0IGF0IGFsbCB0byB0aGVtOiB0aGV5IHdpbGwgYmUgY29uZmlybWVkCiAgICAgICB0byBoaW0gYnkgdGhlIGJlc3QgcG9zc2libGUgdGl0bGUuIEhlIGhhcyB0aGVtIGFzIHB1YmxpYyBwcm9wZXJ0eTsgSSB3aWxsIG1ha2UgdGhlbSBwcml2YXRlCiAgICAgICBwcm9wZXJ0eS4gTGFzdGx5LCBoZSBzaGFsbCBwb3NzZXNzLCB3aXRob3V0IGhhdmluZyB0aGUgc2xpZ2h0ZXN0IGFueGlldHkgYWJvdXQgdGhlbSBmb3IgdGhlCiAgICAgICBmdXR1cmUsIHRob3NlIGZhcm1zIHdoaWNoIGJlIGhhcyBwcm9jdXJlZCAoYnkgdGhlIHByb3NjcmlwdGlvbiBvZiB0aGVpciBmb3JtZXIgb3duZXJzKSB0byBiZQogICAgICAgam9pbmVkIHRvIHRoZSBhZG1pcmFibGUgYW5kIHByb2R1Y3RpdmUgZXN0YXRlIHdoaWNoIGJlIGhhZCBpbiB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBrZXk9InBlcnNldXMsQ2FzaW51bSI+Q2FzaW51bTwvcGxhY2VOYW1lPiwgYmVpbmcgY29udGlndW91cyB0byBpdCBiZWZvcmU7IHNvIGFzIHRvIG1ha2UgYWxsCiAgICAgICB0aGUgZGlmZmVyZW50IGZhcm1zIGludG8gb25lIHVuaW50ZXJydXB0ZWQgZXN0YXRlIGFzIGZhciBhcyB0aGUgZXllIGNhbiByZWFjaDsgYW5kIHJlc3BlY3RpbmcKICAgICAgIHdoaWNoIGF0IHByZXNlbnQgaGUgaXMgbm90IHdpdGhvdXQgYXBwcmVoZW5zaW9uLiA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gTXkgZmF0aGVyLWluLWxhdywgc2F5cyBoZSwgaGFzIHNvbWUgaGl0aGVydG8gZGVzZXJ0ZWQgYW5kCiAgICAgICBkaXN0YW50IGZpZWxkcy4gQnkgbXkgbGF3IGhlIHdpbGwgYmUgYWJsZSB0byBzZWxsIHRoZW0gYXQgaGlzIG93biBwcmljZS4gSGUgaG9sZHMgdGhlbSBhdAogICAgICAgcHJlc2VudCBieSBhbiB1bmNlcnRhaW4gdGl0bGU7IGluIGZhY3QgaGUgaGFzIG5vIHJpZ2h0IGF0IGFsbCB0byB0aGVtOiB0aGV5IHdpbGwgYmUgY29uZmlybWVkCiAgICAgICB0byBoaW0gYnkgdGhlIGJlc3QgcG9zc2libGUgdGl0bGUuIEhlIGhhcyB0aGVtIGFzIHB1YmxpYyBwcm9wZXJ0eTsgSSB3aWxsIG1ha2UgdGhlbSBwcml2YXRlCiAgICAgICBwcm9wZXJ0eS4gTGFzdGx5LCBoZSBzaGFsbCBwb3NzZXNzLCB3aXRob3V0IGhhdmluZyB0aGUgc2xpZ2h0ZXN0IGFueGlldHkgYWJvdXQgdGhlbSBmb3IgdGhlCiAgICAgICBmdXR1cmUsIHRob3NlIGZhcm1zIHdoaWNoIGJlIGhhcyBwcm9jdXJlZCAoYnkgdGhlIHByb3NjcmlwdGlvbiBvZiB0aGVpciBmb3JtZXIgb3duZXJzKSB0byBiZQogICAgICAgam9pbmVkIHRvIHRoZSBhZG1pcmFibGUgYW5kIHByb2R1Y3RpdmUgZXN0YXRlIHdoaWNoIGJlIGhhZCBpbiB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDYXNpbnVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDYXNpbnVtIj5DYXNpbnVtPC9wbGFjZU5hbWU+LCBiZWluZyBjb250aWd1b3VzIHRvIGl0IGJlZm9yZTsgc28gYXMgdG8gbWFrZSBhbGwKICAgICAgIHRoZSBkaWZmZXJlbnQgZmFybXMgaW50byBvbmUgdW5pbnRlcnJ1cHRlZCBlc3RhdGUgYXMgZmFyIGFzIHRoZSBleWUgY2FuIHJlYWNoOyBhbmQgcmVzcGVjdGluZwogICAgICAgd2hpY2ggYXQgcHJlc2VudCBoZSBpcyBub3Qgd2l0aG91dCBhcHByZWhlbnNpb24uIDwvdHJhbnNsYXRpb24+"
translation['3.4.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgc2luY2UgSSBoYXZlIHNob3duIGZvciB3aGF0IHJlYXNvbiBhbmQgZm9yIHdob3NlIHNha2UgYmUgaGFzIHByb3Bvc2VkIHRoaXMsIGxldCBoaW0KICAgICAgIHNob3cgd2hldGhlciBJIGFtIGRlZmVuZGluZyBhbnkgcGFydGljdWxhciBwcm9wcmlldG9yLCB3aGlsZSBJIHJlc2lzdCB0aGlzIGFncmFyaWFuIGxhdy4gWW91CiAgICAgICBhcmUgc2VsbGluZyB0aGUgU2NhbnRpYW4gd29vZC4gVGhlIFJvbWFuIHBlb3BsZSBpcyBpbiBwb3NzZXNzaW9uIG9mIGl0LiBJIGFtIGRlZmVuZGluZyB0aGUKICAgICAgIFJvbWFuIHBlb3BsZS4gWW91IGFyZSBkaXZpZGluZyB0aGUgZGlzdHJpY3Qgb2YgQ2FtcGFuaWEgSXQgaXMgeW91LCBPIFJvbWFucywgd2hvIGFyZSBub3cgaXRzCiAgICAgICBwcm9wcmlldG9ycy4gSSB3aWxsIG5vdCBnaXZlIGl0IHVwLiBJbiB0aGUgbmV4dCBwbGFjZSwgSSBzZWUgcG9zc2Vzc2lvbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCBpbiB0aGUgb3RoZXIgcHJvdmluY2VzLCBwdXQgdXAgZm9yIHNhbGUgYW5kIGFkdmVydGlzZWQuIFRoZSBmYXJtcyBhcmUgeW91cnMsIHRoZQogICAgICAgcG9zc2Vzc2lvbnMgYXJlIHlvdXJzLCBPIFJvbWFucy4gSSB3aWxsIHJlc2lzdCBhbmQgb3Bwb3NlIHN1Y2ggYSBtZWFzdXJlOyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgb3VzdGVkIGZyb20gaXRzIHBvc3Nlc3Npb25zIGJ5IGFueSBvbmUsIHdoaWxlIEkgYW0gY29uc3VsLgogICAgICAgRXNwZWNpYWxseSB3aGVuIG5vIGFkdmFudGFnZSBpcyBzb3VnaHQgZm9yIHlvdSBieSB0aGUgcHJvY2VlZGluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPiBGb3IgeW91IG91Z2h0IG5vIGxvbmdlciB0byBsaWUgdW5kZXIgdGhpcyBtaXN0YWtlLiBJcyBhbnkgb25lIG9mIHlvdSBhIG1hbgogICAgICAgaW5jbGluZWQgdG8gdmlvbGVuY2UsIG9yIGF0cm9jaXR5LCBvciBtdXJkZXI/IE5vdCBvbmUuIEFuZCwgYmVsaWV2ZSBtZSwgaXQgaXMgZm9yIHN1Y2ggYSByYWNlCiAgICAgICBvZiBtZW4gYXMgdGhhdCB0aGF0IHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzAwNSIga2V5PSJ0Z24sNzAwMzAwNSI+Q2FtcGFuaWE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICB0aGF0IGJlYXV0aWZ1bCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIHJlc2VydmVkLiBJdCBpcyBhZ2FpbnN0CiAgICAgICB5b3UsIGFnYWluc3QgeW91ciBsaWJlcnR5LCBhZ2FpbnN0IENuYWV1cyBQb21wZWl1cyB0aGF0IGFuIGFybXkgaXMgYmVpbmcgcmFpc2VkLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENhcHVhIiBrZXk9InBlcnNldXMsQ2FwdWEiPkNhcHVhPC9wbGFjZU5hbWU+IGlzIGJlaW5nIGdvdCByZWFkeSBpbiBvcHBvc2l0aW9uIHRvIHRoaXMgY2l0eTsgYmFuZHMKICAgICAgIG9mIGF1ZGFjaW91cyBtZW4gYXJlIGJlaW5nIGVxdWlwcGVkIGFnYWluc3QgeW91OyB0ZW4gZ2VuZXJhbHMgYXJlIGJlaW5nIGFwcG9pbnRlZCB0bwogICAgICAgY291bnRlcmJhbGFuY2UgQ25hZXVzIFBvbXBlaXVzLiBMZXQgdGhlbSBtZWV0IG1lIGZhY2UgdG8gZmFjZSwgYW5kIHNpbmNlIHRoZXkgaGF2ZSBzdW1tb25lZAogICAgICAgbWUgdG8gdGhpcyBhc3NlbWJseSBvZiB5b3VycywgYXQgeW91ciByZXF1ZXN0IGxldCB0aGVtIGhlcmUgYXJndWUgdGhlIGNhc2Ugd2l0aCBtZS48L3A+CgkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAzMTIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDMxMjIiPlNpY2lseTwvcGxhY2VOYW1lPiwKICAgICAgIGFuZCBpbiB0aGUgb3RoZXIgcHJvdmluY2VzLCBwdXQgdXAgZm9yIHNhbGUgYW5kIGFkdmVydGlzZWQuIFRoZSBmYXJtcyBhcmUgeW91cnMsIHRoZQogICAgICAgcG9zc2Vzc2lvbnMgYXJlIHlvdXJzLCBPIFJvbWFucy4gSSB3aWxsIHJlc2lzdCBhbmQgb3Bwb3NlIHN1Y2ggYSBtZWFzdXJlOyBhbmQgSSB3aWxsIG5vdAogICAgICAgcGVybWl0IHRoZSBSb21hbiBwZW9wbGUgdG8gYmUgb3VzdGVkIGZyb20gaXRzIHBvc3Nlc3Npb25zIGJ5IGFueSBvbmUsIHdoaWxlIEkgYW0gY29uc3VsLgogICAgICAgRXNwZWNpYWxseSB3aGVuIG5vIGFkdmFudGFnZSBpcyBzb3VnaHQgZm9yIHlvdSBieSB0aGUgcHJvY2VlZGluZy4gPC90cmFuc2xhdGlvbj4="
translation['3.4.16'] = ""
translation['1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4sIE8gQ2F0aWxpbmUsIGRvIHlvdSBtZWFuIHRvIGNlYXNlIGFidXNpbmcgb3VyIHBhdGllbmNlPyBIb3cgbG9uZyBpcyB0aGF0IG1hZG5lc3Mgb2YKICAgICAgIHlvdXJzIHN0aWxsIHRvIG1vY2sgdXM/IFdoZW4gaXMgdGhlcmUgdG8gYmUgYW4gZW5kIG9mIHRoYXQgdW5icmlkbGVkIGF1ZGFjaXR5IG9mIHlvdXJzLAogICAgICAgc3dhZ2dlcmluZyBhYm91dCBhcyBpdCBkb2VzIG5vdz8gRG8gbm90IHRoZSBuaWdodGx5IGd1YXJkcyBwbGFjZWQgb24gdGhlIFBhbGF0aW5lCiAgICAgICBIaWxs4oCUZG8gbm90IHRoZSB3YXRjaGVzIHBvc3RlZCB0aHJvdWdob3V0IHRoZSBjaXR54oCUZG9lcyBub3QgdGhlIGFsYXJtIG9mCiAgICAgICB0aGUgcGVvcGxlLCBhbmQgdGhlIHVuaW9uIG9mIGFsbCBnb29kIG1lbuKAlGRvZXMgbm90IHRoZSBwcmVjYXV0aW9uIHRha2VuIG9mCiAgICAgICBhc3NlbWJsaW5nIHRoZSBzZW5hdGUgaW4gdGhpcyBtb3N0IGRlZmVuc2libGUgcGxhY2XigJRkbyBub3QgdGhlIGxvb2tzIGFuZAogICAgICAgY291bnRlbmFuY2VzIG9mIHRoaXMgdmVuZXJhYmxlIGJvZHkgaGVyZSBwcmVzZW50LCBoYXZlIGFueSBlZmZlY3QgdXBvbiB5b3U/IERvIHlvdSBub3QgZmVlbAogICAgICAgdGhhdCB5b3VyIHBsYW5zIGFyZSBkZXRlY3RlZD8gRG8geW91IG5vdCBzZWUgdGhhdCB5b3VyIGNvbnNwaXJhY3kgaXMgYWxyZWFkeSBhcnJlc3RlZCBhbmQKICAgICAgIHJlbmRlcmVkIHBvd2VybGVzcyBieSB0aGUga25vd2xlZGdlIHdoaWNoIGV2ZXJ5IG9uZSBoZXJlIHBvc3Nlc3NlcyBvZiBpdD8gV2hhdCBpcyB0aGVyZSB0aGF0CiAgICAgICB5b3UgZGlkIGxhc3QgbmlnaHQsIHdoYXQgdGhlIG5pZ2h0IGJlZm9yZeKAlCB3aGVyZSBpcyBpdCB0aGF0IHlvdSB3ZXJl4oCUd2hvCiAgICAgICB3YXMgdGhlcmUgdGhhdCB5b3Ugc3VtbW9uZWQgdG8gbWVldCB5b3XigJR3aGF0IGRlc2lnbiB3YXMgdGhlcmUgd2hpY2ggd2FzIGFkb3B0ZWQgYnkKICAgICAgIHlvdSwgd2l0aCB3aGljaCB5b3UgdGhpbmsgdGhhdCBhbnkgb25lIG9mIHVzIGlzIHVuYWNxdWFpbnRlZD8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNoYW1lIG9uIHRoZSBhZ2UgYW5kIG9uIGl0cyBwcmluY2lwbGVzISBUaGUgc2VuYXRlIGlzIGF3YXJlIG9mIHRoZXNlIHRoaW5nczsgdGhlIGNvbnN1bAogICAgICAgc2VlcyB0aGVtOyBhbmQgeWV0IHRoaXMgbWFuIGxpdmVzLiBMaXZlcyEgYXllLCBoZSBjb21lcyBldmVuIGludG8gdGhlIHNlbmF0ZS4gSGUgdGFrZXMgYSBwYXJ0CiAgICAgICBpbiB0aGUgcHVibGljIGRlbGliZXJhdGlvbnM7IGhlIGlzIHdhdGNoaW5nIGFuZCBtYXJraW5nIGRvd24gYW5kIGNoZWNraW5nIG9mZiBmb3Igc2xhdWdodGVyCiAgICAgICBldmVyeSBpbmRpdmlkdWFsIGFtb25nIHVzLiBBbmQgd2UsIGdhbGxhbnQgbWVuIHRoYXQgd2UgYXJlLCB0aGluayB0aGF0IHdlIGFyZSBkb2luZyBvdXIgZHV0eQogICAgICAgdG8gdGhlIHJlcHVibGljIGlmIHdlIGtlZXAgb3V0IG9mIHRoZSB3YXkgb2YgaGlzIGZyZW56aWVkIGF0dGFja3MuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Zb3Ugb3VnaHQsIE8gQ2F0aWxpbmUsIGxvbmcgYWdvIHRvIGhhdmUgYmVlbiBsZWQgdG8gZXhlY3V0aW9uIGJ5IGNvbW1hbmQgb2YgdGhlIGNvbnN1bC4KICAgICAgIFRoYXQgZGVzdHJ1Y3Rpb24gd2hpY2ggeW91IGhhdmUgYmVlbiBsb25nIHBsb3R0aW5nIGFnYWluc3QgdXMgb3VnaHQgdG8gaGF2ZSBhbHJlYWR5IGZhbGxlbiBvbgogICAgICAgeW91ciBvd24gaGVhZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoYXQ/IERpZCBub3QgdGhhdCBtb3N0IGlsbHVzdHJpb3VzIG1hbiwgUHVibGl1cyBTY2lwaW8sIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIHdhcwogICAgICAgIFNjaXBpbyBOYXNpY2EsIHdobyBjYWxsZWQgb24gdGhlIGNvbnN1bCBNdWNpdXMgU2NhZXZvbGEgdG8gZG8gaGlzIGR1dHkgYW5kIHNhdmUgdGhlCiAgICAgICAgcmVwdWJsaWM7IGJ1dCBhcyBoZSByZWZ1c2VkIHRvIHB1dCBhbnkgb25lIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgU2NpcGlvIGNhbGxlZCBvbiBhbGwKICAgICAgICB0aGUgY2l0aXplbnMgdG8gZm9sbG93IGhpbSwgYW5kIHN0b3JtZWQgdGhlIENhcGl0b2wsIHdoaWNoIEdyYWNjaHVzIGhhZCBvY2N1cGllZCB3aXRoIGhpcwogICAgICAgIHBhcnR5LCBhbmQgc2xldyBtYW55IG9mIHRoZSBwYXJ0aXNhbnMgb2YgR3JhY2NodXMsIGFuZCBHcmFjY2h1cyBoaW1zZWxmLjwvbm90ZT4gdGhlIFBvbnRpZmV4CiAgICAgICBNYXhpbXVzLCBpbiBoaXMgY2FwYWNpdHkgb2YgYSBwcml2YXRlIGNpdGl6ZW4sIHB1dCB0byBkZWF0aCBUaWJlcml1cyBHcmFjY2h1cywgdGhvdWdoIGJ1dAogICAgICAgc2xpZ2h0bHkgdW5kZXJtaW5pbmcgdGhlIGNvbnN0aXR1dGlvbj8gQW5kIHNoYWxsIHdlLCB3aG8gYXJlIHRoZSBjb25zdWxzLCB0b2xlcmF0ZSBDYXRpbGluZSwKICAgICAgIG9wZW5seSBkZXNpcm91cyB0byBkZXN0cm95IHRoZSB3aG9sZSB3b3JsZCB3aXRoIGZpcmUgYW5kIHNsYXVnaHRlcj8gRm9yIEkgcGFzcyBvdmVyIG9sZGVyCiAgICAgICBpbnN0YW5jZXMsIHN1Y2ggYXMgaG93IENhaXVzIFNlcnZpbGl1cyBBaGFsYSB3aXRoIGhpcyBvd24gaGFuZCBzbGV3IFNwdXJpdXMgTWFlbGl1cyB3aGVuCiAgICAgICBwbG90dGluZyBhIHJldm9sdXRpb24gaW4gdGhlIHN0YXRlLiBUaGVyZSB3YXPigJR0aGVyZSB3YXMgb25jZSBzdWNoIHZpcnR1ZSBpbiB0aGlzCiAgICAgICByZXB1YmxpYywgdGhhdCBicmF2ZSBtZW4gd291bGQgcmVwcmVzcyBtaXNjaGlldm91cyBjaXRpemVucyB3aXRoIHNldmVyZXIgY2hhc3Rpc2VtZW50IHRoYW4KICAgICAgIHRoZSBtb3N0IGJpdHRlciBlbmVteS4gRm9yIHdlIGhhdmUgYSByZXNvbHV0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhpcyByZXNvbHV0aW9uIHdhcwogICAgICAgIGNvdWNoZWQgaW4gdGhlIGZvcm0gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmlkZWFudCBDb25zdWxlcyBuZXF1aWQgcmVzcHVibGljYSBkZXRyaW1lbnRpCiAgICAgICAgIGNhcGlhdDwvZm9yZWlnbj47IGFuZCBpdCBleGVtcHRlZCB0aGUgY29uc3VscyBmcm9tIGFsbCBvYmxpZ2F0aW9uIHRvIGF0dGVuZCB0byB0aGUgb3JkaW5hcnkKICAgICAgICBmb3JtcyBvZiBsYXcsIGFuZCBpbnZlc3RlZCB0aGVtIHdpdGggYWJzb2x1dGUgcG93ZXIgb3ZlciB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBjaXRpemVucyB3aG8KICAgICAgICB3ZXJlIGludHJpZ3VpbmcgYWdhaW5zdCB0aGUgcmVwdWJsaWMuIDwvbm90ZT4gb2YgdGhlIHNlbmF0ZSwgYSBmb3JtaWRhYmxlIGFuZCBhdXRob3JpdGF0aXZlCiAgICAgICBkZWNyZWUgYWdhaW5zdCB5b3UsIE8gQ2F0aWxpbmU7IHRoZSB3aXNkb20gb2YgdGhlIHJlcHVibGljIGlzIG5vdCBhdCBmYXVsdCwgbm9yIHRoZSBkaWduaXR5CiAgICAgICBvZiB0aGlzIHNlbmF0b3JpYWwgYm9keS4gV2UsIHdlIGFsb25lLOKAlEkgc2F5IGl0IG9wZW5seSwg4oCUd2UsIHRoZSBjb25zdWxzLAogICAgICAgYXJlIHdhaXRpbmcgaW4gb3VyIGR1dHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGlzIHdhcwogICAgICAgIFNjaXBpbyBOYXNpY2EsIHdobyBjYWxsZWQgb24gdGhlIGNvbnN1bCBNdWNpdXMgU2NhZXZvbGEgdG8gZG8gaGlzIGR1dHkgYW5kIHNhdmUgdGhlCiAgICAgICAgcmVwdWJsaWM7IGJ1dCBhcyBoZSByZWZ1c2VkIHRvIHB1dCBhbnkgb25lIHRvIGRlYXRoIHdpdGhvdXQgYSB0cmlhbCwgU2NpcGlvIGNhbGxlZCBvbiBhbGwKICAgICAgICB0aGUgY2l0aXplbnMgdG8gZm9sbG93IGhpbSwgYW5kIHN0b3JtZWQgdGhlIENhcGl0b2wsIHdoaWNoIEdyYWNjaHVzIGhhZCBvY2N1cGllZCB3aXRoIGhpcwogICAgICAgIHBhcnR5LCBhbmQgc2xldyBtYW55IG9mIHRoZSBwYXJ0aXNhbnMgb2YgR3JhY2NodXMsIGFuZCBHcmFjY2h1cyBoaW1zZWxmLjwvbm90ZT4gdGhlIFBvbnRpZmV4CiAgICAgICBNYXhpbXVzLCBpbiBoaXMgY2FwYWNpdHkgb2YgYSBwcml2YXRlIGNpdGl6ZW4sIHB1dCB0byBkZWF0aCBUaWJlcml1cyBHcmFjY2h1cywgdGhvdWdoIGJ1dAogICAgICAgc2xpZ2h0bHkgdW5kZXJtaW5pbmcgdGhlIGNvbnN0aXR1dGlvbj8gQW5kIHNoYWxsIHdlLCB3aG8gYXJlIHRoZSBjb25zdWxzLCB0b2xlcmF0ZSBDYXRpbGluZSwKICAgICAgIG9wZW5seSBkZXNpcm91cyB0byBkZXN0cm95IHRoZSB3aG9sZSB3b3JsZCB3aXRoIGZpcmUgYW5kIHNsYXVnaHRlcj8gRm9yIEkgcGFzcyBvdmVyIG9sZGVyCiAgICAgICBpbnN0YW5jZXMsIHN1Y2ggYXMgaG93IENhaXVzIFNlcnZpbGl1cyBBaGFsYSB3aXRoIGhpcyBvd24gaGFuZCBzbGV3IFNwdXJpdXMgTWFlbGl1cyB3aGVuCiAgICAgICBwbG90dGluZyBhIHJldm9sdXRpb24gaW4gdGhlIHN0YXRlLiBUaGVyZSB3YXPigJR0aGVyZSB3YXMgb25jZSBzdWNoIHZpcnR1ZSBpbiB0aGlzCiAgICAgICByZXB1YmxpYywgdGhhdCBicmF2ZSBtZW4gd291bGQgcmVwcmVzcyBtaXNjaGlldm91cyBjaXRpemVucyB3aXRoIHNldmVyZXIgY2hhc3Rpc2VtZW50IHRoYW4KICAgICAgIHRoZSBtb3N0IGJpdHRlciBlbmVteS4gRm9yIHdlIGhhdmUgYSByZXNvbHV0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj4gVGhpcyByZXNvbHV0aW9uIHdhcwogICAgICAgIGNvdWNoZWQgaW4gdGhlIGZvcm0gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmlkZWFudCBDb25zdWxlcyBuZXF1aWQgcmVzcHVibGljYSBkZXRyaW1lbnRpCiAgICAgICAgIGNhcGlhdDwvZm9yZWlnbj47IGFuZCBpdCBleGVtcHRlZCB0aGUgY29uc3VscyBmcm9tIGFsbCBvYmxpZ2F0aW9uIHRvIGF0dGVuZCB0byB0aGUgb3JkaW5hcnkKICAgICAgICBmb3JtcyBvZiBsYXcsIGFuZCBpbnZlc3RlZCB0aGVtIHdpdGggYWJzb2x1dGUgcG93ZXIgb3ZlciB0aGUgbGl2ZXMgb2YgYWxsIHRoZSBjaXRpemVucyB3aG8KICAgICAgICB3ZXJlIGludHJpZ3VpbmcgYWdhaW5zdCB0aGUgcmVwdWJsaWMuIDwvbm90ZT4gb2YgdGhlIHNlbmF0ZSwgYSBmb3JtaWRhYmxlIGFuZCBhdXRob3JpdGF0aXZlCiAgICAgICBkZWNyZWUgYWdhaW5zdCB5b3UsIE8gQ2F0aWxpbmU7IHRoZSB3aXNkb20gb2YgdGhlIHJlcHVibGljIGlzIG5vdCBhdCBmYXVsdCwgbm9yIHRoZSBkaWduaXR5CiAgICAgICBvZiB0aGlzIHNlbmF0b3JpYWwgYm9keS4gV2UsIHdlIGFsb25lLOKAlEkgc2F5IGl0IG9wZW5seSwg4oCUd2UsIHRoZSBjb25zdWxzLAogICAgICAgYXJlIHdhaXRpbmcgaW4gb3VyIGR1dHkuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZpZGVhbnQgQ29uc3VsZXMgbmVxdWlkIHJlc3B1YmxpY2EgZGV0cmltZW50aQogICAgICAgICBjYXBpYXQ8L2ZvcmVpZ24+OyBhbmQgaXQgZXhlbXB0ZWQgdGhlIGNvbnN1bHMgZnJvbSBhbGwgb2JsaWdhdGlvbiB0byBhdHRlbmQgdG8gdGhlIG9yZGluYXJ5CiAgICAgICAgZm9ybXMgb2YgbGF3LCBhbmQgaW52ZXN0ZWQgdGhlbSB3aXRoIGFic29sdXRlIHBvd2VyIG92ZXIgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnMgd2hvCiAgICAgICAgd2VyZSBpbnRyaWd1aW5nIGFnYWluc3QgdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIHNlbmF0ZSBvbmNlIHBhc3NlZCBhIGRlY3JlZSB0aGF0IEx1Y2l1cyBPcGltaXVzLCB0aGUgY29uc3VsLCBzaG91bGQgdGFrZSBjYXJlIHRoYXQgdGhlCiAgICAgICByZXB1YmxpYyBzdWZmZXJlZCBubyBpbmp1cnkuIE5vdCBvbmUgbmlnaHQgZWxhcHNlZC4gVGhlcmUgd2FzIHB1dCB0byBkZWF0aCwgb24gc29tZSBtZXJlCiAgICAgICBzdXNwaWNpb24gb2YgZGlzYWZmZWN0aW9uLCBDYWl1cyBHcmFjY2h1cywgYSBtYW4gd2hvc2UgZmFtaWx5IGhhZCBib3JuZSB0aGUgbW9zdCB1bmJsZW1pc2hlZAogICAgICAgcmVwdXRhdGlvbiBmb3IgbWFueSBnZW5lcmF0aW9ucy4gVGhlcmUgd2FzIHNsYWluIE1hcmN1cyBGdWx2aXVzLCBhIG1hbiBvZiBjb25zdWxhciByYW5rLCBhbmQKICAgICAgIGFsbCBoaXMgY2hpbGRyZW4uIEJ5IGEgbGlrZSBkZWNyZWUgb2YgdGhlIHNlbmF0ZSB0aGUgc2FmZXR5IG9mIHRoZSByZXB1YmxpYyB3YXMgZW50cnVzdGVkIHRvCiAgICAgICBDYWl1cyBNYXJpdXMgYW5kIEx1Y2l1cyBWYWxlcml1cywgdGhlIGNvbnN1bHMuIERpZCBub3QgdGhlIHZlbmdlYW5jZSBvZiB0aGUgcmVwdWJsaWMsIGRpZCBub3QKICAgICAgIGV4ZWN1dGlvbiBvdmVydGFrZSBMdWNpdXMgU2F0dXJuaW51cywgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIGFuZCBDYWl1cyBTZXJ2aWxpdXMsIHRoZQogICAgICAgcHJhZXRvciwgd2l0aG91dCB0aGUgZGVsYXkgb2Ygb25lIHNpbmdsZSBkYXk/IEJ1dCB3ZSwgZm9yIHRoZXNlIHR3ZW50eSBkYXlzIGhhdmUgYmVlbgogICAgICAgYWxsb3dpbmcgdGhlIGVkZ2Ugb2YgdGhlIHNlbmF0ZSdzIGF1dGhvcml0eSB0byBncm93IGJsdW50LCBhcyBpdCB3ZXJlLiBGb3Igd2UgYXJlIGluCiAgICAgICBwb3NzZXNzaW9uIG9mIGEgc2ltaWxhciBkZWNyZWUgb2YgdGhlIHNlbmF0ZSwgYnV0IHdlIGtlZXAgaXQgbG9ja2VkIHVwIGluIGl0cwogICAgICAgcGFyY2htZW504oCUYnVyaWVkLCBJIG1heSBzYXksIGluIHRoZSBzaGVhdGg7IGFuZCBhY2NvcmRpbmcgdG8gdGhpcyBkZWNyZWUgeW91IG91Z2h0LAogICAgICAgTyBDYXRpbGluZSwgdG8gYmUgcHV0IHRvIGRlYXRoIHRoaXMgaW5zdGFudC4gWW91IGxpdmUs4oCUYW5kIHlvdSBsaXZlLCBub3QgdG8gbGF5CiAgICAgICBhc2lkZSwgYnV0IHRvIHBlcnNpc3QgaW4geW91ciBhdWRhY2l0eS4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgd2lzaCwgTyBjb25zY3JpcHQgZmF0aGVycywgdG8gYmUgbWVyY2lmdWw7IEkgd2lzaCBub3QgdG8gYXBwZWFyIG5lZ2xpZ2VudCBhbWlkIHN1Y2gKICAgICAgIGRhbmdlciB0byB0aGUgc3RhdGU7IGJ1dCBJIGRvIG5vdyBhY2N1c2UgbXlzZWxmIG9mIHJlbWlzc25lc3MgYW5kIGN1bHBhYmxlIGluYWN0aXZpdHkuCiAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+IEEgY2FtcCBpcyBwaXRjaGVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgYXQgdGhlIGVudHJhbmNlIG9mIEV0cnVyaWEsIGluIGhvc3RpbGl0eSB0byB0aGUgcmVwdWJsaWM7IHRoZSBudW1iZXIgb2YKICAgICAgIHRoZSBlbmVteSBpbmNyZWFzZXMgZXZlcnkgZGF5OyBhbmQgeWV0IHRoZSBnZW5lcmFsIG9mIHRoYXQgY2FtcCwgdGhlIGxlYWRlciBvZiB0aG9zZSBlbmVtaWVzLAogICAgICAgd2Ugc2VlIHdpdGhpbiB0aGUgd2FsbHPigJR5ZXMsIGFuZCBldmVuIGluIHRoZSBzZW5hdGUsIOKAlHBsYW5uaW5nIGV2ZXJ5IGRheQogICAgICAgc29tZSBpbnRlcm5hbCBpbmp1cnkgdG8gdGhlIHJlcHVibGljLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoaXMgaXMgdGhlIHNhbWUgaW5jaWRlbnQgdGhhdCBpcwogICAgICAgIHRoZSBzdWJqZWN0IG9mIHRoZSBwcmVjZWRpbmcgb3JhdGlvbiBpbiBkZWZlbmNlIG9mIFJhYmlyaXVzLjwvbm90ZT4gSWYsIE8gQ2F0aWxpbmUsIEkgc2hvdWxkCiAgICAgICBub3cgb3JkZXIgeW91IHRvIGJlIGFycmVzdGVkLCB0byBiZSBwdXQgdG8gZGVhdGgsIEkgc2hvdWxkLCBJIHN1cHBvc2UsIGhhdmUgdG8gZmVhciBsZXN0IGFsbAogICAgICAgZ29vZCBtZW4gc2hvdWxkIHNheSB0aGF0IEkgaGFkIGFjdGVkIHRhcmRpbHksIHJhdGhlciB0aGFuIHRoYXQgYW55IG9uZSBzaG91bGQgYWZmaXJtIHRoYXQgSQogICAgICAgYWN0ZWQgY3J1ZWxseS4gQnV0IHlldCB0aGlzLCB3aGljaCBvdWdodCB0byBoYXZlIGJlZW4gZG9uZSBsb25nIHNpbmNlLCBJIGhhdmUgZ29vZCByZWFzb24gZm9yCiAgICAgICBub3QgZG9pbmcgYXMgeWV0OyBJIHdpbGwgcHV0IHlvdSB0byBkZWF0aCwgdGhlbiwgd2hlbiB0aGVyZSBzaGFsbCBiZSBub3Qgb25lIHBlcnNvbiBwb3NzaWJsZQogICAgICAgdG8gYmUgZm91bmQgc28gd2lja2VkLCBzbyBhYmFuZG9uZWQsIHNvIGxpa2UgeW91cnNlbGYsIGFzIG5vdCB0byBhbGxvdyB0aGF0IGl0IGhhcyBiZWVuCiAgICAgICByaWdodGx5IGRvbmUuIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gQXMgbG9uZyBhcyBvbmUgcGVyc29uIGV4aXN0cyB3aG8gY2FuIGRhcmUgdG8KICAgICAgIGRlZmVuZCB5b3UsIHlldCBzaGFsbCBsaXZlOyBidXQgeW91IHNoYWxsIGxpdmUgYXMgeW91IGRvIG5vdywgc3Vycm91bmRlZCBieSBteSBtYW55IGFuZAogICAgICAgdHJ1c3R5IGd1YXJkcywgc28gdGhhdCB5b3Ugc2hhbGwgbm90IGJlIGFibGUgdG8gc3RpciBvbmUgZmluZ2VyIGFnYWluc3QgdGhlIHJlcHVibGljOiBtYW55CiAgICAgICBleWVzIGFuZCBlYXJzIHNoYWxsIHN0aWxsIG9ic2VydmUgYW5kIHdhdGNoIHlvdSwgYXMgdGhleSBoYXZlIGhpdGhlcnRvIGRvbmUsIHRob3VnaCB5b3Ugc2hhbGwKICAgICAgIG5vdCBwZXJjZWl2ZSB0aGVtLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPiBBIGNhbXAgaXMgcGl0Y2hlZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgYXQgdGhlIGVudHJhbmNlIG9mIEV0cnVyaWEsIGluIGhvc3RpbGl0eSB0byB0aGUgcmVwdWJsaWM7IHRoZSBudW1iZXIgb2YKICAgICAgIHRoZSBlbmVteSBpbmNyZWFzZXMgZXZlcnkgZGF5OyBhbmQgeWV0IHRoZSBnZW5lcmFsIG9mIHRoYXQgY2FtcCwgdGhlIGxlYWRlciBvZiB0aG9zZSBlbmVtaWVzLAogICAgICAgd2Ugc2VlIHdpdGhpbiB0aGUgd2FsbHPigJR5ZXMsIGFuZCBldmVuIGluIHRoZSBzZW5hdGUsIOKAlHBsYW5uaW5nIGV2ZXJ5IGRheQogICAgICAgc29tZSBpbnRlcm5hbCBpbmp1cnkgdG8gdGhlIHJlcHVibGljLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB0aGUgc2FtZSBpbmNpZGVudCB0aGF0IGlzCiAgICAgICAgdGhlIHN1YmplY3Qgb2YgdGhlIHByZWNlZGluZyBvcmF0aW9uIGluIGRlZmVuY2Ugb2YgUmFiaXJpdXMuPC9ub3RlPiBJZiwgTyBDYXRpbGluZSwgSSBzaG91bGQKICAgICAgIG5vdyBvcmRlciB5b3UgdG8gYmUgYXJyZXN0ZWQsIHRvIGJlIHB1dCB0byBkZWF0aCwgSSBzaG91bGQsIEkgc3VwcG9zZSwgaGF2ZSB0byBmZWFyIGxlc3QgYWxsCiAgICAgICBnb29kIG1lbiBzaG91bGQgc2F5IHRoYXQgSSBoYWQgYWN0ZWQgdGFyZGlseSwgcmF0aGVyIHRoYW4gdGhhdCBhbnkgb25lIHNob3VsZCBhZmZpcm0gdGhhdCBJCiAgICAgICBhY3RlZCBjcnVlbGx5LiBCdXQgeWV0IHRoaXMsIHdoaWNoIG91Z2h0IHRvIGhhdmUgYmVlbiBkb25lIGxvbmcgc2luY2UsIEkgaGF2ZSBnb29kIHJlYXNvbiBmb3IKICAgICAgIG5vdCBkb2luZyBhcyB5ZXQ7IEkgd2lsbCBwdXQgeW91IHRvIGRlYXRoLCB0aGVuLCB3aGVuIHRoZXJlIHNoYWxsIGJlIG5vdCBvbmUgcGVyc29uIHBvc3NpYmxlCiAgICAgICB0byBiZSBmb3VuZCBzbyB3aWNrZWQsIHNvIGFiYW5kb25lZCwgc28gbGlrZSB5b3Vyc2VsZiwgYXMgbm90IHRvIGFsbG93IHRoYXQgaXQgaGFzIGJlZW4KICAgICAgIHJpZ2h0bHkgZG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['1.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBBcyBsb25nIGFzIG9uZSBwZXJzb24gZXhpc3RzIHdobyBjYW4gZGFyZSB0bwogICAgICAgZGVmZW5kIHlvdSwgeWV0IHNoYWxsIGxpdmU7IGJ1dCB5b3Ugc2hhbGwgbGl2ZSBhcyB5b3UgZG8gbm93LCBzdXJyb3VuZGVkIGJ5IG15IG1hbnkgYW5kCiAgICAgICB0cnVzdHkgZ3VhcmRzLCBzbyB0aGF0IHlvdSBzaGFsbCBub3QgYmUgYWJsZSB0byBzdGlyIG9uZSBmaW5nZXIgYWdhaW5zdCB0aGUgcmVwdWJsaWM6IG1hbnkKICAgICAgIGV5ZXMgYW5kIGVhcnMgc2hhbGwgc3RpbGwgb2JzZXJ2ZSBhbmQgd2F0Y2ggeW91LCBhcyB0aGV5IGhhdmUgaGl0aGVydG8gZG9uZSwgdGhvdWdoIHlvdSBzaGFsbAogICAgICAgbm90IHBlcmNlaXZlIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQgaXMgdGhlcmUsIE8gQ2F0aWxpbmUsIHRoYXQgeW91IGNhbiBzdGlsbCBleHBlY3QsIGlmIG5pZ2h0IGlzIG5vdCBhYmxlIHRvIHZlaWwgeW91cgogICAgICAgbmVmYXJpb3VzIG1lZXRpbmdzIGluIGRhcmtuZXNzLCBhbmQgaWYgcHJpdmF0ZSBob3VzZXMgY2Fubm90IGNvbmNlYWwgdGhlIHZvaWNlIG9mIHlvdXIKICAgICAgIGNvbnNwaXJhY3kgd2l0aGluIHRoZWlyIHdhbGxzO+KAlGlmIGV2ZXJ5dGhpbmcgaXMgc2VlbiBhbmQgZGlzcGxheWVkPyBDaGFuZ2UgeW91cgogICAgICAgbWluZDogdHJ1c3QgbWU6IGZvcmdldCB0aGUgc2xhdWdodGVyIGFuZCBjb25mbGFncmF0aW9uIHlvdSBhcmUgbWVkaXRhdGluZy4gWW91IGFyZSBoZW1tZWQgaW4KICAgICAgIG9uIGFsbCBzaWRlczsgYWxsIHlvdXIgcGxhbnMgYXJlIGNsZWFyZXIgdGhhbiB0aGUgZGF5IHRvIHVzOyBsZXQgbWUgcmVtaW5kIHlvdSBvZiB0aGVtLgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3UgcmVjb2xsZWN0IHRoYXQgb24gdGhlIDIxc3Qgb2YgT2N0b2JlciBJIHNhaWQgaW4gdGhlCiAgICAgICBzZW5hdGUsIHRoYXQgb24gYSBjZXJ0YWluIGRheSwgd2hpY2ggd2FzIHRvIGJlIHRoZSAyN3RoIG9mIE9jdG9iZXIsIEMuIE1hbmxpdXMsIHRoZSBzYXRlbGxpdGUKICAgICAgIGFuZCBzZXJ2YW50IG9mIHlvdXIgYXVkYWNpdHksIHdvdWxkIGJlIGluIGFybXM/IFdhcyBJIG1pc3Rha2VuLCBDYXRpbGluZSwgbm90IG9ubHkgaW4gc28KICAgICAgIGltcG9ydGFudCwgc28gYXRyb2Npb3VzLCBzbyBpbmNyZWRpYmxlIGEgZmFjdCwgYnV0LCB3aGF0IGlzIG11Y2ggbW9yZSByZW1hcmthYmxlLCBpbiB0aGUgdmVyeQogICAgICAgZGF5PyBJIHNhaWQgYWxzbyBpbiB0aGUgc2VuYXRlIHRoYXQgeW91IGhhZCBmaXhlZCB0aGUgbWFzc2FjcmUgb2YgdGhlIG5vYmxlcyBmb3IgdGhlIDI4dGggb2YKICAgICAgIE9jdG9iZXIsIHdoZW4gbWFueSBjaGllZiBtZW4gb2YgdGhlIHNlbmF0ZSBoYWQgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBub3Qgc28gbXVjaCBmb3IgdGhlIHNha2Ugb2Ygc2F2aW5nIHRoZW1zZWx2ZXMgYXMgb2YgY2hlY2tpbmcgeW91cgogICAgICAgZGVzaWducy4gQ2FuIHlvdSBkZW55IHRoYXQgb24gdGhhdCB2ZXJ5IGRheSB5b3Ugd2VyZSBzbyBoZW1tZWQgaW4gYnkgbXkgZ3VhcmRzIGFuZCBteQogICAgICAgdmlnaWxhbmNlLCB0aGF0IHlvdSB3ZXJlIHVuYWJsZSB0byBzdGlyIG9uZSBmaW5nZXIgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IHdoZW4geW91IHNhaWQgdGhhdAogICAgICAgeW91IHdvdWxkIGJlIGNvbnRlbnQgd2l0aCB0aGUgZmxpZ2h0IG9mIHRoZSByZXN0LCBhbmQgdGhlIHNsYXVnaHRlciBvZiB1cyB3aG8gcmVtYWluZWQ/CiAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyB3aGVuIHlvdSBtYWRlIHN1cmUgdGhhdCB5b3Ugd291bGQgYmUgYWJsZSB0byBzZWl6ZQogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHJhZW5lc3RlIiBrZXk9InBlcnNldXMsUHJhZW5lc3RlIj5QcmFlbmVzdGU8L3BsYWNlTmFtZT4gb24gdGhlIGZpcnN0IG9mIE5vdmVtYmVyIGJ5IGEKICAgICAgIG5vY3R1cm5hbCBhdHRhY2ssIGRpZCB5b3Ugbm90IGZpbmQgdGhhdCB0aGF0IGNvbG9ueSB3YXMgZm9ydGlmaWVkIGJ5IG15IG9yZGVyLCBieSBteQogICAgICAgZ2Fycmlzb24sIGJ5IG15IHdhdGNoZnVsbmVzcyBhbmQgY2FyZT8gWW91IGRvIG5vdGhpbmcsIHlvdSBwbGFuIG5vdGhpbmcsIHlvdSB0aGluayBvZiBub3RoaW5nCiAgICAgICB3aGljaCBJIG5vdCBvbmx5IGRvIG5vdCBoZWFyLCBidXQgd2hpY2ggSSBkbyBub3Qgc2VlIGFuZCBrbm93IGV2ZXJ5IHBhcnRpY3VsYXIgb2YuIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPiBEbyB5b3UgcmVjb2xsZWN0IHRoYXQgb24gdGhlIDIxc3Qgb2YgT2N0b2JlciBJIHNhaWQgaW4gdGhlCiAgICAgICBzZW5hdGUsIHRoYXQgb24gYSBjZXJ0YWluIGRheSwgd2hpY2ggd2FzIHRvIGJlIHRoZSAyN3RoIG9mIE9jdG9iZXIsIEMuIE1hbmxpdXMsIHRoZSBzYXRlbGxpdGUKICAgICAgIGFuZCBzZXJ2YW50IG9mIHlvdXIgYXVkYWNpdHksIHdvdWxkIGJlIGluIGFybXM/IFdhcyBJIG1pc3Rha2VuLCBDYXRpbGluZSwgbm90IG9ubHkgaW4gc28KICAgICAgIGltcG9ydGFudCwgc28gYXRyb2Npb3VzLCBzbyBpbmNyZWRpYmxlIGEgZmFjdCwgYnV0LCB3aGF0IGlzIG11Y2ggbW9yZSByZW1hcmthYmxlLCBpbiB0aGUgdmVyeQogICAgICAgZGF5PyBJIHNhaWQgYWxzbyBpbiB0aGUgc2VuYXRlIHRoYXQgeW91IGhhZCBmaXhlZCB0aGUgbWFzc2FjcmUgb2YgdGhlIG5vYmxlcyBmb3IgdGhlIDI4dGggb2YKICAgICAgIE9jdG9iZXIsIHdoZW4gbWFueSBjaGllZiBtZW4gb2YgdGhlIHNlbmF0ZSBoYWQgbGVmdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIG5vdCBzbyBtdWNoIGZvciB0aGUgc2FrZSBvZiBzYXZpbmcgdGhlbXNlbHZlcyBhcyBvZiBjaGVja2luZyB5b3VyCiAgICAgICBkZXNpZ25zLiBDYW4geW91IGRlbnkgdGhhdCBvbiB0aGF0IHZlcnkgZGF5IHlvdSB3ZXJlIHNvIGhlbW1lZCBpbiBieSBteSBndWFyZHMgYW5kIG15CiAgICAgICB2aWdpbGFuY2UsIHRoYXQgeW91IHdlcmUgdW5hYmxlIHRvIHN0aXIgb25lIGZpbmdlciBhZ2FpbnN0IHRoZSByZXB1YmxpYzsgd2hlbiB5b3Ugc2FpZCB0aGF0CiAgICAgICB5b3Ugd291bGQgYmUgY29udGVudCB3aXRoIHRoZSBmbGlnaHQgb2YgdGhlIHJlc3QsIGFuZCB0aGUgc2xhdWdodGVyIG9mIHVzIHdobyByZW1haW5lZD8KICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBXaGF0PyB3aGVuIHlvdSBtYWRlIHN1cmUgdGhhdCB5b3Ugd291bGQgYmUgYWJsZSB0byBzZWl6ZQogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHJhZW5lc3RlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQcmFlbmVzdGUiPlByYWVuZXN0ZTwvcGxhY2VOYW1lPiBvbiB0aGUgZmlyc3Qgb2YgTm92ZW1iZXIgYnkgYQogICAgICAgbm9jdHVybmFsIGF0dGFjaywgZGlkIHlvdSBub3QgZmluZCB0aGF0IHRoYXQgY29sb255IHdhcyBmb3J0aWZpZWQgYnkgbXkgb3JkZXIsIGJ5IG15CiAgICAgICBnYXJyaXNvbiwgYnkgbXkgd2F0Y2hmdWxuZXNzIGFuZCBjYXJlPyBZb3UgZG8gbm90aGluZywgeW91IHBsYW4gbm90aGluZywgeW91IHRoaW5rIG9mIG5vdGhpbmcKICAgICAgIHdoaWNoIEkgbm90IG9ubHkgZG8gbm90IGhlYXIsIGJ1dCB3aGljaCBJIGRvIG5vdCBzZWUgYW5kIGtub3cgZXZlcnkgcGFydGljdWxhciBvZi4gPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlzdGVuIHdoaWxlIEkgc3BlYWsgb2YgdGhlIG5pZ2h0IGJlZm9yZS4gWW91IHNoYWxsIG5vdyBzZWUgdGhhdCBJIHdhdGNoIGZhciBtb3JlIGFjdGl2ZWx5CiAgICAgICBmb3IgdGhlIHNhZmV0eSB0aGFuIHlvdSBkbyBmb3IgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYy4gSSBzYXkgdGhhdCB5b3UgY2FtZSB0aGUgbmlnaHQKICAgICAgIGJlZm9yZSAoSSB3aWxsIHNheSBub3RoaW5nIG9ic2N1cmVseSkgaW50byB0aGUgU2N5dGhlLWRlYWxlcnMnIHN0cmVldCwgdG8gdGhlIGhvdXNlIG9mIE1hcmN1cwogICAgICAgTGVjY2E7IHRoYXQgbWFueSBvZiB5b3VyIGFjY29tcGxpY2VzIGluIHRoZSBzYW1lIGluc2FuaXR5IGFuZCB3aWNrZWRuZXNzIGNhbWUgaGVyZSB0b28uIERvCiAgICAgICB5b3UgZGFyZSB0byBkZW55IGl0PyBXaHkgYXJlIHNpbGVudD8gSSB3aWxsIHByb3ZlIGl0IGlmIHlvdSBkbyBkZW55IGl0OyBmb3IgSSBzZWUgaGVyZSBpbiB0aGUKICAgICAgIHNlbmF0ZSBzb21lIG1lbiB3aG8gd2VyZSB0aGVyZSB3aXRoIHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPk8geWUgaW1tb3J0YWwgZ29kcywgd2hlcmUgb24gZWFydGggYXJlIHdlPyBpbiB3aGF0IGNpdHkgYXJlIHdlIGxpdmluZz8gd2hhdCBjb25zdGl0dXRpb24gaXMKICAgICAgIG91cnM/IFRoZXJlIGFyZSBoZXJlLOKAlGhlcmUgaW4gb3VyIGJvZHksIE8gY29uc2NyaXB0IGZhdGhlcnMsIGluIHRoaXMgdGhlIG1vc3QgaG9seQogICAgICAgYW5kIGRpZ25pZmllZCBhc3NlbWJseSBvZiB0aGUgd2hvbGUgd29ybGQsIG1lbiB3aG8gbWVkaXRhdGUgbXkgZGVhdGgsIGFuZCB0aGUgZGVhdGggb2YgYWxsIG9mCiAgICAgICB1cywgYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHksIGFuZCBvZiB0aGUgd2hvbGUgd29ybGQuIEksIHRoZSBjb25zdWwgc2VlIHRoZW07IEkgYXNrCiAgICAgICB0aGVtIHRoZWlyIG9waW5pb24gYWJvdXQgdGhlIHJlcHVibGljLCBhbmQgSSBkbyBub3QgeWV0IGF0dGFjaywgZXZlbiBieSB3b3JkcywgdGhvc2Ugd2hvCiAgICAgICBvdWdodCB0byBiZSBwdXQgdG8gZGVhdGggYnkgdGhlIHN3b3JkLiBZb3Ugd2VyZSwgdGhlbiwgTyBDYXRpbGluZSwgYXQgTGVjY2EncyB0aGF0IG5pZ2h0OyB5b3UKICAgICAgIGRpdmlkZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaW50byBzZWN0aW9uczsgeW91IHNldHRsZWQgd2hlcmUgZXZlcnkKICAgICAgIG9uZSB3YXMgdG8gZ287IHlvdSBmaXhlZCB3aG9tIHlvdSB3ZXJlIHRvIGxlYXZlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgd2hvbSB5b3Ugd2VyZSB0byB0YWtlIHdpdGggeW91OyB5b3UgcG9ydGlvbmVkIG91dCB0aGUgZGl2aXNpb25zIG9mIHRoZQogICAgICAgY2l0eSBmb3IgY29uZmxhZ3JhdGlvbjsgeW91IHVuZGVydG9vayB0aGF0IHlvdSB5b3Vyc2VsZiB3b3VsZCBhdCBvbmNlIGxlYXZlIHRoZSBjaXR5LCBhbmQKICAgICAgIHNhaWQgdGhhdCB0aGVyZSB3YXMgdGhlbiBvbmx5IHRoaXMgdG8gZGVsYXkgeW91LCB0aGF0IEkgd2FzIHN0aWxsIGFsaXZlLiBUd28gUm9tYW4ga25pZ2h0cwogICAgICAgd2VyZSBmb3VuZCB0byBkZWxpdmVyIHlvdSBmcm9tIHRoaXMgYW54aWV0eSwgYW5kIHRvIHByb21pc2UgdGhhdCB2ZXJ5IG5pZ2h0LCBiZWZvcmUgZGF5YnJlYWssCiAgICAgICB0byBzbGF5IG1lIGluIG15IGJlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBBbGwgdGhpcyBJIGtuZXcgYWxtb3N0IGJlZm9yZSB5b3VyCiAgICAgICBtZWV0aW5nIGhhZCBicm9rZW4gdXAuIEkgc3RyZW5ndGhlbmVkIGFuZCBmb3J0aWZpZWQgbXkgaG91c2Ugd2l0aCBhIHN0cm9uZ2VyIGd1YXJkOyBJIHJlZnVzZWQKICAgICAgIGFkbWl0dGFuY2UsIHdoZW4gdGhleSBjYW1lLCB0byB0aG9zZSB3aG9tIHlvdSBzZW50IGluIHRoZSBtb3JuaW5nIHRvIHNhbHV0ZSBtZSwgYW5kIG9mIHdob20gSQogICAgICAgaGFkIGZvcmV0b2xkIHRvIG1hbnkgZW1pbmVudCBtZW4gdGhhdCB0aGV5IHdvdWxkIGNvbWUgdG8gbWUgYXQgdGhhdCB0aW1lLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpbnRvIHNlY3Rpb25zOyB5b3Ugc2V0dGxlZCB3aGVyZSBldmVyeQogICAgICAgb25lIHdhcyB0byBnbzsgeW91IGZpeGVkIHdob20geW91IHdlcmUgdG8gbGVhdmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aG9tIHlvdSB3ZXJlIHRvIHRha2Ugd2l0aCB5b3U7IHlvdSBwb3J0aW9uZWQgb3V0IHRoZSBkaXZpc2lvbnMgb2YgdGhlCiAgICAgICBjaXR5IGZvciBjb25mbGFncmF0aW9uOyB5b3UgdW5kZXJ0b29rIHRoYXQgeW91IHlvdXJzZWxmIHdvdWxkIGF0IG9uY2UgbGVhdmUgdGhlIGNpdHksIGFuZAogICAgICAgc2FpZCB0aGF0IHRoZXJlIHdhcyB0aGVuIG9ubHkgdGhpcyB0byBkZWxheSB5b3UsIHRoYXQgSSB3YXMgc3RpbGwgYWxpdmUuIFR3byBSb21hbiBrbmlnaHRzCiAgICAgICB3ZXJlIGZvdW5kIHRvIGRlbGl2ZXIgeW91IGZyb20gdGhpcyBhbnhpZXR5LCBhbmQgdG8gcHJvbWlzZSB0aGF0IHZlcnkgbmlnaHQsIGJlZm9yZSBkYXlicmVhaywKICAgICAgIHRvIHNsYXkgbWUgaW4gbXkgYmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoaXMgSSBrbmV3IGFsbW9zdCBiZWZvcmUgeW91cgogICAgICAgbWVldGluZyBoYWQgYnJva2VuIHVwLiBJIHN0cmVuZ3RoZW5lZCBhbmQgZm9ydGlmaWVkIG15IGhvdXNlIHdpdGggYSBzdHJvbmdlciBndWFyZDsgSSByZWZ1c2VkCiAgICAgICBhZG1pdHRhbmNlLCB3aGVuIHRoZXkgY2FtZSwgdG8gdGhvc2Ugd2hvbSB5b3Ugc2VudCBpbiB0aGUgbW9ybmluZyB0byBzYWx1dGUgbWUsIGFuZCBvZiB3aG9tIEkKICAgICAgIGhhZCBmb3JldG9sZCB0byBtYW55IGVtaW5lbnQgbWVuIHRoYXQgdGhleSB3b3VsZCBjb21lIHRvIG1lIGF0IHRoYXQgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMsIHRoZW4sIHRoaXMgaXMgdGhlIGNhc2UsIE8gQ2F0aWxpbmUsIGNvbnRpbnVlIGFzIHlvdSBoYXZlIGJlZ3VuLiBMZWF2ZSB0aGUgY2l0eSBhdCBsYXN0CiAgICAgICB0aGUgZ2F0ZXMgYXJlIG9wZW47IGRlcGFydC4gVGhhdCBNYW5saWFuIGNhbXAgb2YgeW91cnMgaGFzIGJlZW4gd2FpdGluZyB0b28gbG9uZyBmb3IgeW91IGFzCiAgICAgICBpdHMgZ2VuZXJhbC4gQW5kIGxlYWQgZm9ydGggd2l0aCB5b3UgYWxsIHlvdXIgZnJpZW5kcywgb3IgYXQgbGVhc3QgYXMgbWFueSBhcyB5b3UgY2FuOyBwdXJnZQogICAgICAgdGhlIGNpdHkgb2YgeW91ciBwcmVzZW5jZTsgeW91IHdpbGwgZGVsaXZlciBtZSBmcm9tIGEgZ3JlYXQgZmVhciwgd2hlbiB0aGVyZSBpcyBhIHdhbGwKICAgICAgIGJldHdlZW4gbWUgYW5kIHlvdS4gQW1vbmcgdXMgeW91IGNhbiBkd2VsbCBubyBsb25nZXLigJRJIHdpbGwgbm90IGJlYXIgaXQsIEkgd2lsbCBub3QKICAgICAgIHBlcm1pdCBpdCwgSSB3aWxsIG5vdCB0b2xlcmF0ZSBpdC4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gR3JlYXQgdGhhbmtzIGFyZSBkdWUKICAgICAgIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBhbmQgdG8gdGhpcyB2ZXJ5IEp1cGl0ZXIgU3RhdG9yLCBpbiB3aG9zZSB0ZW1wbGUgd2UgYXJlLCB0aGUgbW9zdAogICAgICAgYW5jaWVudCBwcm90ZWN0b3Igb2YgdGh1cyBjaXR5LCB0aGF0IHdlIGhhdmUgYWxyZWFkeSBzbyBvZnRlbiBlc2NhcGVkIHNvIGZvdWwsIHNvIGhvcnJpYmxlLAogICAgICAgYW5kIHNvIGRlYWRseSBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMuIEJ1dCB0aGUgc2FmZXR5IG9mIHRoZSBjb21tb253ZWFsdGggbXVzdCBub3QgYmUgdG9vCiAgICAgICBvZnRlbiBhbGxvd2VkIHRvIGJlIHJpc2tlZCBvbiBvbmUgbWFuLiBBcyBsb25nIGFzIHlvdSwgTyBDYXRpbGluZSwgcGxvdHRlZCBhZ2FpbnN0IG1lIHdoaWxlIEkKICAgICAgIHdhcyB0aGUgY29uc3VsIGVsZWN0LCBJIGRlZmVuZGVkIG15c2VsZiBub3Qgd2l0aCBhIHB1YmxpYyBndWFyZCwgYnV0IGJ5IG15IG93biBwcml2YXRlCiAgICAgICBkaWxpZ2VuY2UuIFdoZW4sIGluIHRoZSBuZXh0IGNvbnN1bGFyIDxmb3JlaWduIGxhbmc9ImxhIj5jb21pdGlhPC9mb3JlaWduPiwgeW91IHdpc2hlZCB0bwogICAgICAgc2xheSBtZSB3aGVuIEkgd2FzIGFjdHVhbGx5IGNvbnN1bCwgYW5kIHlvdXIgY29tcGV0aXRvcnMgYWxzbywgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2OTY0IiBrZXk9InRnbiw3MDA2OTY0Ij5DYW1wdXMgTWFydGl1czwvcGxhY2VOYW1lPiwgSSBjaGVja2VkIHlvdXIgbmVmYXJpb3VzIGF0dGVtcHQgYnkgdGhlCiAgICAgICBhc3Npc3RhbmNlIGFuZCByZXNvdXJjZXMgb2YgbXkgb3duIGZyaWVuZHMsIHdpdGhvdXQgZXhjaXRpbmcgYW55IGRpc3R1cmJhbmNlIHB1YmxpY2x5LiBJbgogICAgICAgc2hvcnQsIGFzIG9mdGVuIGFzIHlvdSBhdHRhY2tlZCBtZSwgSSBieSBteXNlbGYgb3Bwb3NlZCB5b3UsIGFuZCB0aGF0LCB0b28sIHRob3VnaCBJIHNhdyB0aGF0CiAgICAgICBteSBydWluIHdhcyBjb25uZWN0ZWQgd2l0aCBncmVhdCBkaXNhc3RlciB0byB0aGUgcmVwdWJsaWMuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgICBCdXQgbm93IHlvdSBhcmUgb3Blbmx5IGF0dGFja2luZyB0aGUgZW50aXJlIHJlcHVibGljLiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gR3JlYXQgdGhhbmtzIGFyZSBkdWUKICAgICAgIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBhbmQgdG8gdGhpcyB2ZXJ5IEp1cGl0ZXIgU3RhdG9yLCBpbiB3aG9zZSB0ZW1wbGUgd2UgYXJlLCB0aGUgbW9zdAogICAgICAgYW5jaWVudCBwcm90ZWN0b3Igb2YgdGh1cyBjaXR5LCB0aGF0IHdlIGhhdmUgYWxyZWFkeSBzbyBvZnRlbiBlc2NhcGVkIHNvIGZvdWwsIHNvIGhvcnJpYmxlLAogICAgICAgYW5kIHNvIGRlYWRseSBhbiBlbmVteSB0byB0aGUgcmVwdWJsaWMuIEJ1dCB0aGUgc2FmZXR5IG9mIHRoZSBjb21tb253ZWFsdGggbXVzdCBub3QgYmUgdG9vCiAgICAgICBvZnRlbiBhbGxvd2VkIHRvIGJlIHJpc2tlZCBvbiBvbmUgbWFuLiBBcyBsb25nIGFzIHlvdSwgTyBDYXRpbGluZSwgcGxvdHRlZCBhZ2FpbnN0IG1lIHdoaWxlIEkKICAgICAgIHdhcyB0aGUgY29uc3VsIGVsZWN0LCBJIGRlZmVuZGVkIG15c2VsZiBub3Qgd2l0aCBhIHB1YmxpYyBndWFyZCwgYnV0IGJ5IG15IG93biBwcml2YXRlCiAgICAgICBkaWxpZ2VuY2UuIFdoZW4sIGluIHRoZSBuZXh0IGNvbnN1bGFyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvbWl0aWE8L2ZvcmVpZ24+LCB5b3Ugd2lzaGVkIHRvCiAgICAgICBzbGF5IG1lIHdoZW4gSSB3YXMgYWN0dWFsbHkgY29uc3VsLCBhbmQgeW91ciBjb21wZXRpdG9ycyBhbHNvLCBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY5NjQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjk2NCI+Q2FtcHVzIE1hcnRpdXM8L3BsYWNlTmFtZT4sIEkgY2hlY2tlZCB5b3VyIG5lZmFyaW91cyBhdHRlbXB0IGJ5IHRoZQogICAgICAgYXNzaXN0YW5jZSBhbmQgcmVzb3VyY2VzIG9mIG15IG93biBmcmllbmRzLCB3aXRob3V0IGV4Y2l0aW5nIGFueSBkaXN0dXJiYW5jZSBwdWJsaWNseS4gSW4KICAgICAgIHNob3J0LCBhcyBvZnRlbiBhcyB5b3UgYXR0YWNrZWQgbWUsIEkgYnkgbXlzZWxmIG9wcG9zZWQgeW91LCBhbmQgdGhhdCwgdG9vLCB0aG91Z2ggSSBzYXcgdGhhdAogICAgICAgbXkgcnVpbiB3YXMgY29ubmVjdGVkIHdpdGggZ3JlYXQgZGlzYXN0ZXIgdG8gdGhlIHJlcHVibGljLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgIEJ1dCBub3cgeW91IGFyZSBvcGVubHkgYXR0YWNraW5nIHRoZSBlbnRpcmUgcmVwdWJsaWMuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IGFyZSBzdW1tb25pbmcgdG8gZGVzdHJ1Y3Rpb24gYW5kIGRldmFzdGF0aW9uIHRoZSB0ZW1wbGVzIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCB0aGUKICAgICAgIGhvdXNlcyBvZiB0aGUgY2l0eSwgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnM7IGluIHNob3J0LCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4uIFdoZXJlZm9yZSwgc2luY2UgSSBkbyBub3QgeWV0IHZlbnR1cmUgdG8gZG8gdGhhdCB3aGljaCBpcyB0aGUgYmVzdAogICAgICAgdGhpbmcsIGFuZCB3aGljaCBiZWxvbmdzIHRvIG15IG9mZmljZSBhbmQgdG8gdGhlIGRpc2NpcGxpbmUgb2Ygb3VyIGFuY2VzdG9ycywgSSB3aWxsIGRvIHRoYXQKICAgICAgIHdoaWNoIGlzIG1vcmUgbWVyY2lmdWwgaWYgd2UgcmVnYXJkIGl0cyByaWdvdXIsIGFuZCBtb3JlIGV4cGVkaWVudCBmb3IgdGhlIHN0YXRlLiBGb3IgaWYgSQogICAgICAgb3JkZXIgeW91IHRvIGJlIHB1dCB0byBkZWF0aCwgdGhlIHJlc3Qgb2YgdGhlIGNvbnNwaXJhdG9ycyB3aWxsIHN0aWxsIHJlbWFpbiBpbiB0aGUgcmVwdWJsaWM7CiAgICAgICBpZiBhcyBJIGhhdmUgbG9uZyBiZWVuIGV4aG9ydGluZyB5b3UsIHlvdSBkZXBhcnQsIHlvdXIgY29tcGFuaW9ucywgdGhvc2Ugd29ydGhsZXNzIGRyZWdzIG9mCiAgICAgICB0aGUgcmVwdWJsaWMsIHdpbGwgYmUgZHJhd24gb2ZmIGZyb20gdGhlIGNpdHkgdG9vLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IFdoYXQgaXMKICAgICAgIHRoZSBtYXR0ZXIsIENhdGlsaW5lPyBEbyB5b3UgaGVzaXRhdGUgdG8gZG8gdGhhdCB3aGljaCBJIG9yZGVyIHlvdSB3aGljaCB5b3Ugd2VyZSBhbHJlYWR5CiAgICAgICBkb2luZyBvZiB5b3VyIG93biBhY2NvcmQ/IFRoZSBjb25zdWwgb3JkZXJzIGFuIGVuZW15IHRvIGRlcGFydCBmcm9tIHRoZSBjaXR5LiBEbyB5b3UgYXNrIG1lLAogICAgICAgQXJlIHlvdSB0byBnbyBpbnRvIGJhbmlzaG1lbnQ/IEkgZG8gbm90IG9yZGVyIGl0OyBidXQsIGlmIHlvdSBjb25zdWx0IG1lLCBJIGFkdmlzZSBpdC4KICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPi4gV2hlcmVmb3JlLCBzaW5jZSBJIGRvIG5vdCB5ZXQgdmVudHVyZSB0byBkbyB0aGF0IHdoaWNoIGlzIHRoZSBiZXN0CiAgICAgICB0aGluZywgYW5kIHdoaWNoIGJlbG9uZ3MgdG8gbXkgb2ZmaWNlIGFuZCB0byB0aGUgZGlzY2lwbGluZSBvZiBvdXIgYW5jZXN0b3JzLCBJIHdpbGwgZG8gdGhhdAogICAgICAgd2hpY2ggaXMgbW9yZSBtZXJjaWZ1bCBpZiB3ZSByZWdhcmQgaXRzIHJpZ291ciwgYW5kIG1vcmUgZXhwZWRpZW50IGZvciB0aGUgc3RhdGUuIEZvciBpZiBJCiAgICAgICBvcmRlciB5b3UgdG8gYmUgcHV0IHRvIGRlYXRoLCB0aGUgcmVzdCBvZiB0aGUgY29uc3BpcmF0b3JzIHdpbGwgc3RpbGwgcmVtYWluIGluIHRoZSByZXB1YmxpYzsKICAgICAgIGlmIGFzIEkgaGF2ZSBsb25nIGJlZW4gZXhob3J0aW5nIHlvdSwgeW91IGRlcGFydCwgeW91ciBjb21wYW5pb25zLCB0aG9zZSB3b3J0aGxlc3MgZHJlZ3Mgb2YKICAgICAgIHRoZSByZXB1YmxpYywgd2lsbCBiZSBkcmF3biBvZmYgZnJvbSB0aGUgY2l0eSB0b28uIDwvdHJhbnNsYXRpb24+"
translation['1.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hhdCBpcwogICAgICAgdGhlIG1hdHRlciwgQ2F0aWxpbmU/IERvIHlvdSBoZXNpdGF0ZSB0byBkbyB0aGF0IHdoaWNoIEkgb3JkZXIgeW91IHdoaWNoIHlvdSB3ZXJlIGFscmVhZHkKICAgICAgIGRvaW5nIG9mIHlvdXIgb3duIGFjY29yZD8gVGhlIGNvbnN1bCBvcmRlcnMgYW4gZW5lbXkgdG8gZGVwYXJ0IGZyb20gdGhlIGNpdHkuIERvIHlvdSBhc2sgbWUsCiAgICAgICBBcmUgeW91IHRvIGdvIGludG8gYmFuaXNobWVudD8gSSBkbyBub3Qgb3JkZXIgaXQ7IGJ1dCwgaWYgeW91IGNvbnN1bHQgbWUsIEkgYWR2aXNlIGl0LgogICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIHdoYXQgaXMgdGhlcmUsIE8gQ2F0aWxpbmUsIHRoYXQgY2FuIG5vdyBhZmZvcmQgeW91IGFueSBwbGVhc3VyZSBpbiB0aGlzIGNpdHk/IGZvciB0aGVyZQogICAgICAgaXMgbm8gb25lIGluIGl0LCBleGNlcHQgdGhhdCBiYW5kIG9mIHByb2ZsaWdhdGUgY29uc3BpcmF0b3JzIG9mIHlvdXJzLCB3aG8gZG9lcyBub3QgZmVhcgogICAgICAgeW91LOKAlG5vIG9uZSB3aG8gZG9lcyBub3QgaGF0ZSB5b3UuIFdoYXQgYnJhbmQgb2YgZG9tZXN0aWMgYmFzZW5lc3MgaXMgbm90IHN0YW1wZWQKICAgICAgIHVwb24geW91ciBsaWZlPyBXaGF0IGRpc2dyYWNlZnVsIGNpcmN1bXN0YW5jZSBpcyB3YW50aW5nIHRvIHlvdXIgaW5mYW15IGluIHlvdXIgcHJpdmF0ZQogICAgICAgYWZmYWlycz8gRnJvbSB3aGF0IGxpY2VudGlvdXNuZXNzIGhhdmUgeW91ciBleWVzLCBmcm9tIHdoYXQgYXRyb2NpdHkgaGF2ZSB5b3VyIGhhbmRzLCBmcm9tCiAgICAgICB3aGF0IGluaXF1aXR5IGhhcyB5b3VyIHdob2xlIGJvZHkgZXZlciBhYnN0YWluZWQ/IElzIHRoZXJlIG9uZSB5b3V0aCwgd2hlbiB5b3UgaGF2ZSBvbmNlCiAgICAgICBlbnRhbmdsZWQgaGltIGluIHRoZSB0ZW1wdGF0aW9ucyBvZiB5b3VyIGNvcnJ1cHRpb24sIHRvIHdob20geW91IGhhdmUgbm90IGhlbGQgb3V0IGEgc3dvcmQKICAgICAgIGZvciBhdWRhY2lvdXMgY3JpbWUsIG9yIGEgdG9yY2ggZm9yIGxpY2VudGlvdXMgd2lja2VkbmVzcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGF0PyB3aGVuIGxhdGVseSBieSB0aGUgZGVhdGggb2YgeW91ciBmb3JtZXIgd2lmZSB5b3UgaGFkIG1hZGUgeW91ciBob3VzZSBlbXB0eSBhbmQgcmVhZHkKICAgICAgIGZvciBhIG5ldyBicmlkYWwsIGRpZCB5b3Ugbm90IGV2ZW4gYWRkIGFub3RoZXIgaW5jcmVkaWJsZSB3aWNrZWRuZXNzIHRvIHRoaXMgd2lja2VkbmVzcz8gQnV0CiAgICAgICBJIHBhc3MgdGhhdCBvdmVyLCBhbmQgd2lsbGluZ2x5IGFsbG93IGl0IHRvIGJlIGJ1cmllZCBpbiBzaWxlbmNlLCB0aGF0IHNvIGhvcnJpYmxlIGEgY3JpbWUKICAgICAgIG1heSBub3QgYmUgc2VlbiB0byBoYXZlIGV4aXN0ZWQgaW4gdGhpcyBjaXR5LCBhbmQgbm90IHRvIGhhdmUgYmVlbiBjaGFzdGlzZWQuIEkgcGFzcyBvdmVyIHRoZQogICAgICAgcnVpbiBvZiB5b3VyIGZvcnR1bmUsIHdoaWNoIHlvdSBrbm93IGlzIGhhbmdpbmcgb3ZlciB5b3UgYWdhaW5zdCB0aGUgaWRlcyBvZiB0aGUgdmVyeSBuZXh0CiAgICAgICBtb250aDsgSSBjb21lIHRvIHRob3NlIHRoaW5ncyB3aGljaCByZWxhdGUgbm90IHRvIHRoZSBpbmZhbXkgb2YgeW91ciBwcml2YXRlIHZpY2VzLCBub3QgdG8KICAgICAgIHlvdXIgZG9tZXN0aWMgZGlmZmljdWx0aWVzIGFuZCBiYXNlbmVzcywgYnV0IHRvIHRoZSB3ZWxmYXJlIG9mIHRoZSByZXB1YmxpYyBhbmQgdG8gdGhlIGxpdmVzCiAgICAgICBhbmQgc2FmZXR5IG9mIHVzIGFsbC4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQ2FuIHRoZSBsaW1pdCBvZiB0aGlzIGxpZmUsIE8gQ2F0aWxpbmUsIGNhbiB0aGUgYnJlYXRoCiAgICAgICBvZiB0aGlzIGF0bW9zcGhlcmUgYmUgcGxlYXNhbnQgdG8geW91LCB3aGVuIHlvdSBrbm93IHRoYXQgdGhlcmUgaXMgbm90IG9uZSBtYW4gb2YgdGhvc2UgaGVyZQogICAgICAgcHJlc2VudCB3aG8gaXMgaWdub3JhbnQgdGhhdCB5b3UsIG9uIHRoZSBsYXN0IGRheSBvZiB0aGUgeWVhciwgd2hlbiBMZXBpZHVzIGFuZCBUdWxsdXMgd2VyZQogICAgICAgY29uc3Vscywgc3Rvb2QgaW4gdGhlIGFzc2VtYmx5IGFybWVkOyB0aGF0IHlvdSBoYWQgcHJlcGFyZWQgeW91ciBoYW5kIGZvciB0aGUgc2xhdWdodGVyIG9mCiAgICAgICB0aGUgY29uc3VscyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgbm8gcmVhc29uIG9yIGZlYXIgb2YgeW91cnMgaGluZGVyZWQgeW91cgogICAgICAgY3JpbWUgYW5kIG1hZG5lc3MsIGJ1dCB0aGUgZm9ydHVuZSBvZiB0aGUgcmVwdWJsaWM/IEFuZCBJIHNheSBubyBtb3JlIG9mIHRoZXNlIHRoaW5ncywgZm9yCiAgICAgICB0aGV5IGFyZSBub3QgdW5rbm93biB0byBldmVyeSBvbmUuIEhvdyBvZnRlbiBoYXZlIHlvdSBlbmRlYXZvdXJlZCB0byBzbGF5IG1lLCBib3RoIGFzIGNvbnN1bAogICAgICAgZWxlY3QgYW5kIGFzIGFjdHVhbCBjb25zdWw/IGhvdyBtYW55IHNob3RzIG9mIHlvdXJzLCBzbyBhaW1lZCB0aGF0IHRoZXkgc2VlbWVkIGltcG9zc2libGUgdG8KICAgICAgIGJlIGVzY2FwZWQsIGhhdmUgSSBhdm9pZGVkIGJ5IHNvbWUgc2xpZ2h0IHN0b29waW5nIGFzaWRlLCBhbmQgc29tZSBkb2RnaW5nLCBhcyBpdCB3ZXJlLCBvZiBteQogICAgICAgYm9keT8gWW91IGF0dGVtcHQgbm90aGluZywgeW91IGV4ZWN1dGUgbm90aGluZywgeW91IGRldmlzZSBub3RoaW5nIHRoYXQgY2FsbCBiZSBrZXB0IGhpZCBmcm9tCiAgICAgICBtZSBhdCB0aGUgcHJvcGVyIHRpbWU7IGFuZCB5ZXQgeW91IGRvIG5vdCBjZWFzZSB0byBhdHRlbXB0IGFuZCB0byBjb250cml2ZS4gPG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSG93IG9mdGVuIGFscmVhZHkgaGFzIHRoYXQgZGFnZ2VyIG9mIHlvdXJzIGJlZW4gd3Jlc3RlZCBmcm9tIHlvdXIgaGFuZHM/CiAgICAgICBob3cgb2Z0ZW4gaGFzIGl0IHNsaXBwZWQgdGhyb3VnaCB0aGVtIGJ5IHNvbWUgY2hhbmNlLCBhbmQgZHJvcHBlZCBkb3duPyBhbmQgeWV0IHlvdSBjYW5ub3QKICAgICAgIGFueSBsb25nZXIgZG8gd2l0aG91dCBpdDsgYW5kIHRvIHdoYXQgc2FjcmVkIG15c3RlcmllcyBpdCBpcyBjb25zZWNyYXRlZCBhbmQgZGV2b3RlZCBieSB5b3UgSQogICAgICAga25vdyBub3QsIHRoYXQgeW91IHRoaW5rIGl0IG5lY2Vzc2FyeSB0byBwbHVuZ2UgaXQgaW4gdGhlIGJvZHkgb2YgdGhlIGNvbnN1bC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQ2FuIHRoZSBsaW1pdCBvZiB0aGlzIGxpZmUsIE8gQ2F0aWxpbmUsIGNhbiB0aGUgYnJlYXRoCiAgICAgICBvZiB0aGlzIGF0bW9zcGhlcmUgYmUgcGxlYXNhbnQgdG8geW91LCB3aGVuIHlvdSBrbm93IHRoYXQgdGhlcmUgaXMgbm90IG9uZSBtYW4gb2YgdGhvc2UgaGVyZQogICAgICAgcHJlc2VudCB3aG8gaXMgaWdub3JhbnQgdGhhdCB5b3UsIG9uIHRoZSBsYXN0IGRheSBvZiB0aGUgeWVhciwgd2hlbiBMZXBpZHVzIGFuZCBUdWxsdXMgd2VyZQogICAgICAgY29uc3Vscywgc3Rvb2QgaW4gdGhlIGFzc2VtYmx5IGFybWVkOyB0aGF0IHlvdSBoYWQgcHJlcGFyZWQgeW91ciBoYW5kIGZvciB0aGUgc2xhdWdodGVyIG9mCiAgICAgICB0aGUgY29uc3VscyBhbmQgY2hpZWYgbWVuIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgbm8gcmVhc29uIG9yIGZlYXIgb2YgeW91cnMgaGluZGVyZWQgeW91cgogICAgICAgY3JpbWUgYW5kIG1hZG5lc3MsIGJ1dCB0aGUgZm9ydHVuZSBvZiB0aGUgcmVwdWJsaWM/IEFuZCBJIHNheSBubyBtb3JlIG9mIHRoZXNlIHRoaW5ncywgZm9yCiAgICAgICB0aGV5IGFyZSBub3QgdW5rbm93biB0byBldmVyeSBvbmUuIEhvdyBvZnRlbiBoYXZlIHlvdSBlbmRlYXZvdXJlZCB0byBzbGF5IG1lLCBib3RoIGFzIGNvbnN1bAogICAgICAgZWxlY3QgYW5kIGFzIGFjdHVhbCBjb25zdWw/IGhvdyBtYW55IHNob3RzIG9mIHlvdXJzLCBzbyBhaW1lZCB0aGF0IHRoZXkgc2VlbWVkIGltcG9zc2libGUgdG8KICAgICAgIGJlIGVzY2FwZWQsIGhhdmUgSSBhdm9pZGVkIGJ5IHNvbWUgc2xpZ2h0IHN0b29waW5nIGFzaWRlLCBhbmQgc29tZSBkb2RnaW5nLCBhcyBpdCB3ZXJlLCBvZiBteQogICAgICAgYm9keT8gWW91IGF0dGVtcHQgbm90aGluZywgeW91IGV4ZWN1dGUgbm90aGluZywgeW91IGRldmlzZSBub3RoaW5nIHRoYXQgY2FsbCBiZSBrZXB0IGhpZCBmcm9tCiAgICAgICBtZSBhdCB0aGUgcHJvcGVyIHRpbWU7IGFuZCB5ZXQgeW91IGRvIG5vdCBjZWFzZSB0byBhdHRlbXB0IGFuZCB0byBjb250cml2ZS4gPC90cmFuc2xhdGlvbj4="
translation['1.6.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gSG93IG9mdGVuIGFscmVhZHkgaGFzIHRoYXQgZGFnZ2VyIG9mIHlvdXJzIGJlZW4gd3Jlc3RlZCBmcm9tIHlvdXIgaGFuZHM/CiAgICAgICBob3cgb2Z0ZW4gaGFzIGl0IHNsaXBwZWQgdGhyb3VnaCB0aGVtIGJ5IHNvbWUgY2hhbmNlLCBhbmQgZHJvcHBlZCBkb3duPyBhbmQgeWV0IHlvdSBjYW5ub3QKICAgICAgIGFueSBsb25nZXIgZG8gd2l0aG91dCBpdDsgYW5kIHRvIHdoYXQgc2FjcmVkIG15c3RlcmllcyBpdCBpcyBjb25zZWNyYXRlZCBhbmQgZGV2b3RlZCBieSB5b3UgSQogICAgICAga25vdyBub3QsIHRoYXQgeW91IHRoaW5rIGl0IG5lY2Vzc2FyeSB0byBwbHVuZ2UgaXQgaW4gdGhlIGJvZHkgb2YgdGhlIGNvbnN1bC4gPC90cmFuc2xhdGlvbj4="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IG5vdywgd2hhdCBpcyB0aGF0IGxpZmUgb2YgeW91cnMgdGhhdCB5b3UgYXJlIGxlYWRpbmc/IEZvciBJIHdpbGwgc3BlYWsgdG8geW91IG5vdCBzbyBhcwogICAgICAgdG8gc2VlbSBpbmZsdWVuY2VkIGJ5IHRoZSBoYXRyZWQgSSBvdWdodCB0byBmZWVsLCBidXQgYnkgcGl0eSwgbm90aGluZyBvZiB3aGljaCBpcyBkdWUgdG8KICAgICAgIHlvdS4gWW91IGNhbWUgYSBsaXR0bGUgd2hpbGUgYWdvIGludG8gdGhlIHNlbmF0ZSBpbiBzbyBudW1lcm91cyBhbiBhc3NlbWJseSwgd2hvIG9mIHNvIG1hbnkKICAgICAgIGZyaWVuZHMgYW5kIGNvbm5lY3Rpb25zIG9mIHlvdXJzIHNhbHV0ZWQgeW91PyBJZiB0aGlzIGluIHRoZSBtZW1vcnkgb2YgbWFuIG5ldmVyIGhhcHBlbmVkIHRvCiAgICAgICBhbnkgb25lIGVsc2UsIGFyZSB5b3Ugd2FpdGluZyBmb3IgaW5zdWx0cyBieSB3b3JkIG9mIG1vdXRoLCB3aGVuIHlvdSBhcmUgb3ZlcndoZWxtZWQgYnkgdGhlCiAgICAgICBtb3N0IGlycmVzaXN0aWJsZSBjb25kZW1uYXRpb24gb2Ygc2lsZW5jZT8gSXMgaXQgbm90aGluZyB0aGF0IGF0IHlvdXIgYXJyaXZhbCBhbGwgdGhvc2Ugc2VhdHMKICAgICAgIHdlcmUgdmFjYXRlZD8gdGhhdCBhbGwgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rLCB3aG8gaGFkIG9mdGVuIGJlZW4gbWFya2VkIG91dCBieSB5b3UgZm9yCiAgICAgICBzbGF1Z2h0ZXIsIHRoZSB2ZXJ5IG1vbWVudCB5b3Ugc2F0IGRvd24sIGxlZnQgdGhhdCBwYXJ0IG9mIHRoZSBiZW5jaGVzIGJhcmUgYW5kIHZhY2FudD8gV2l0aAogICAgICAgd2hhdCBmZWVsaW5ncyBkbyB5b3UgdGhpbmsgeW91IG91Z2h0IHRvIGJlYXIgdGhpcz8gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBPbiBteQogICAgICAgaG9ub3VyLCBpZiBteSBzbGF2ZXMgZmVhcmVkIG1lIGFzIGFsbCB5b3VyIGZlbGxvdy1jaXRpemVucyBmZWFyIHlvdSwgSSBzaG91bGQgdGhpbmsgSSBtdXN0CiAgICAgICBsZWF2ZSBteSBob3VzZS4gRG8gbm90IHlvdSB0aGluayB5b3Ugc2hvdWxkIGxlYXZlIHRoZSBjaXR5PyBJZiBJIHNhdyB0aGF0IEkgd2FzIGV2ZW4KICAgICAgIHVuZGVzZXJ2ZWRseSBzbyBzdXNwZWN0ZWQgYW5kIGJhdGVkIGJ5IG15IGZlbGxvdy1jaXRpemVucywgSSB3b3VsZCByYXRoZXIgZmxlZSBmcm9tIHRoZWlyCiAgICAgICBzaWdodCB0aGFuIGJlIGdhemVkIGF0IGJ5IHRoZSBob3N0aWxlIGV5ZXMgb2YgZXZlcnkgb25lLiBBbmQgZG8geW91LCB3aG8sIGZyb20gdGhlCiAgICAgICBjb25zY2lvdXNuZXNzIG9mIHlvdXIgd2lja2VkbmVzcywga25vdyB0aGF0IHRoZSBoYXRyZWQgb2YgYWxsIG1lbiBpcyBqdXN0IGFuZCBoYXMgYmVlbiBsb25nCiAgICAgICBkdWUgdG8geW91LCBoZXNpdGF0ZSB0byBhdm9pZCB0aGUgc2lnaHQgYW5kIHByZXNlbmNlIG9mIHRob3NlIG1lbiB3aG9zZSBtaW5kcyBhbmQgc2Vuc2VzIHlvdQogICAgICAgb2ZmZW5kPyBJZiB5b3VyIHBhcmVudHMgZmVhcmVkIGFuZCBoYXRlZCB5b3UsIGFuZCBpZiB5b3UgY291bGQgYnkgbm8gbWVhbnMgcGFjaWZ5IHRoZW0sIHlvdQogICAgICAgd291bGQsIEkgdGhpbmssIGRlcGFydCBzb21ld2hlcmUgb3V0IG9mIHRoZWlyIHNpZ2h0LiBOb3csIHlvdXIgY291bnRyeSwgd2hpY2ggaXMgdGhlIGNvbW1vbgogICAgICAgcGFyZW50IG9mIGFsbCBvZiB1cywgaGF0ZXMgYW5kIGZlYXJzIHlvdSwgYW5kIGhhcyBubyBvdGhlciBvcGluaW9uIG9mIHlvdSwgdGhhbiB0aGF0IHlvdSBhcmUKICAgICAgIG1lZGl0YXRpbmcgcGFycmljaWRlIGluIGhlciBjYXNlOyBhbmQgd2lsbCB5b3UgbmVpdGhlciBmZWVsIGF3ZSBvZiBoZXIgYXV0aG9yaXR5LCBub3IKICAgICAgIGRlZmVyZW5jZSBmb3IgaGVyIGp1ZGdtZW50LCBub3IgZmVhciBvZiBoZXIgcG93ZXI/IDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gbXkKICAgICAgIGhvbm91ciwgaWYgbXkgc2xhdmVzIGZlYXJlZCBtZSBhcyBhbGwgeW91ciBmZWxsb3ctY2l0aXplbnMgZmVhciB5b3UsIEkgc2hvdWxkIHRoaW5rIEkgbXVzdAogICAgICAgbGVhdmUgbXkgaG91c2UuIERvIG5vdCB5b3UgdGhpbmsgeW91IHNob3VsZCBsZWF2ZSB0aGUgY2l0eT8gSWYgSSBzYXcgdGhhdCBJIHdhcyBldmVuCiAgICAgICB1bmRlc2VydmVkbHkgc28gc3VzcGVjdGVkIGFuZCBiYXRlZCBieSBteSBmZWxsb3ctY2l0aXplbnMsIEkgd291bGQgcmF0aGVyIGZsZWUgZnJvbSB0aGVpcgogICAgICAgc2lnaHQgdGhhbiBiZSBnYXplZCBhdCBieSB0aGUgaG9zdGlsZSBleWVzIG9mIGV2ZXJ5IG9uZS4gQW5kIGRvIHlvdSwgd2hvLCBmcm9tIHRoZQogICAgICAgY29uc2Npb3VzbmVzcyBvZiB5b3VyIHdpY2tlZG5lc3MsIGtub3cgdGhhdCB0aGUgaGF0cmVkIG9mIGFsbCBtZW4gaXMganVzdCBhbmQgaGFzIGJlZW4gbG9uZwogICAgICAgZHVlIHRvIHlvdSwgaGVzaXRhdGUgdG8gYXZvaWQgdGhlIHNpZ2h0IGFuZCBwcmVzZW5jZSBvZiB0aG9zZSBtZW4gd2hvc2UgbWluZHMgYW5kIHNlbnNlcyB5b3UKICAgICAgIG9mZmVuZD8gSWYgeW91ciBwYXJlbnRzIGZlYXJlZCBhbmQgaGF0ZWQgeW91LCBhbmQgaWYgeW91IGNvdWxkIGJ5IG5vIG1lYW5zIHBhY2lmeSB0aGVtLCB5b3UKICAgICAgIHdvdWxkLCBJIHRoaW5rLCBkZXBhcnQgc29tZXdoZXJlIG91dCBvZiB0aGVpciBzaWdodC4gTm93LCB5b3VyIGNvdW50cnksIHdoaWNoIGlzIHRoZSBjb21tb24KICAgICAgIHBhcmVudCBvZiBhbGwgb2YgdXMsIGhhdGVzIGFuZCBmZWFycyB5b3UsIGFuZCBoYXMgbm8gb3RoZXIgb3BpbmlvbiBvZiB5b3UsIHRoYW4gdGhhdCB5b3UgYXJlCiAgICAgICBtZWRpdGF0aW5nIHBhcnJpY2lkZSBpbiBoZXIgY2FzZTsgYW5kIHdpbGwgeW91IG5laXRoZXIgZmVlbCBhd2Ugb2YgaGVyIGF1dGhvcml0eSwgbm9yCiAgICAgICBkZWZlcmVuY2UgZm9yIGhlciBqdWRnbWVudCwgbm9yIGZlYXIgb2YgaGVyIHBvd2VyPyA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNoZSwgTyBDYXRpbGluZSwgdGh1cyBwbGVhZHMgd2l0aCB5b3UsIGFuZCBhZnRlciBhCiAgICAgICBtYW5uZXIgc2lsZW50bHkgc3BlYWtzIHRvIHlvdTrigJRUaGVyZSBoYXMgbm93IGZvciBtYW55IHllYXJzIGJlZW4gbm8gY3JpbWUgY29tbWl0dGVkCiAgICAgICBidXQgYnkgeW91OyBubyBhdHJvY2l0eSBoYXMgdGFrZW4gcGxhY2Ugd2l0aG91dCB5b3U7IHlvdSBhbG9uZSB1bnB1bmlzaGVkIGFuZCB1bnF1ZXN0aW9uZWQKICAgICAgIGhhdmUgbXVyZGVyZWQgdGhlIGNpdGl6ZW5zLCBoYXZlIGhhcmFzc2VkIGFuZCBwbHVuZGVyZWQgdGhlIGFsbGllczsgeW91IGFsb25lIGhhdmUgaGFkIHBvd2VyCiAgICAgICBub3Qgb25seSB0byBuZWdsZWN0IGFsbCBsYXdzIGFuZCBpbnZlc3RpZ2F0aW9ucywgYnV0IHRvIG92ZXJ0aHJvdyBhbmQgYnJlYWsgdGhyb3VnaCB0aGVtLgogICAgICAgWW91ciBmb3JtZXIgYWN0aW9ucywgdGhvdWdoIHRoZXkgb3VnaHQgbm90IHRvIGhhdmUgYmVlbiBib3JuZSwgeWV0IEkgZGlkIGJlYXIgYXMgd2VsbCBhcyBJCiAgICAgICBjb3VsZDsgYnV0IG5vdyB0aGF0IEkgc2hvdWxkIGJlIHdob2xseSBvY2N1cGllZCB3aXRoIGZlYXIgb2YgeW91IGFsb25lLCB0aGF0IGF0IGV2ZXJ5IHNvdW5kIEkKICAgICAgIHNob3VsZCBkcmVhZCBDYXRpbGluZSwgdGhhdCBubyBkZXNpZ24gc2hvdWxkIHNlZW0gcG9zc2libGUgdG8gYmUgZW50ZXJ0YWluZWQgYWdhaW5zdCBtZSB3aGljaAogICAgICAgZG9lcyBub3QgcHJvY2VlZCBmcm9tIHlvdXIgd2lja2VkbmVzcywgdGhpcyBpcyBubyBsb25nZXIgZW5kdXJhYmxlLiBEZXBhcnQsIHRoZW4sIGFuZCBkZWxpdmVyCiAgICAgICBtZSBmcm9tIHRoaXMgZmVhcjsgdGhhdCwgaWYgaXQgYmUgYSBqdXN0IG9uZSwgSSBtYXkgbm90IGJlIGRlc3Ryb3llZDsgaWYgYW4gaW1hZ2luYXJ5IG9uZSwKICAgICAgIHRoYXQgYXQgbGVhc3QgSSBtYXkgYXQgbGFzdCBjZWFzZSB0byBmZWFyLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.7.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNoZSwgTyBDYXRpbGluZSwgdGh1cyBwbGVhZHMgd2l0aCB5b3UsIGFuZCBhZnRlciBhCiAgICAgICBtYW5uZXIgc2lsZW50bHkgc3BlYWtzIHRvIHlvdTrigJRUaGVyZSBoYXMgbm93IGZvciBtYW55IHllYXJzIGJlZW4gbm8gY3JpbWUgY29tbWl0dGVkCiAgICAgICBidXQgYnkgeW91OyBubyBhdHJvY2l0eSBoYXMgdGFrZW4gcGxhY2Ugd2l0aG91dCB5b3U7IHlvdSBhbG9uZSB1bnB1bmlzaGVkIGFuZCB1bnF1ZXN0aW9uZWQKICAgICAgIGhhdmUgbXVyZGVyZWQgdGhlIGNpdGl6ZW5zLCBoYXZlIGhhcmFzc2VkIGFuZCBwbHVuZGVyZWQgdGhlIGFsbGllczsgeW91IGFsb25lIGhhdmUgaGFkIHBvd2VyCiAgICAgICBub3Qgb25seSB0byBuZWdsZWN0IGFsbCBsYXdzIGFuZCBpbnZlc3RpZ2F0aW9ucywgYnV0IHRvIG92ZXJ0aHJvdyBhbmQgYnJlYWsgdGhyb3VnaCB0aGVtLgogICAgICAgWW91ciBmb3JtZXIgYWN0aW9ucywgdGhvdWdoIHRoZXkgb3VnaHQgbm90IHRvIGhhdmUgYmVlbiBib3JuZSwgeWV0IEkgZGlkIGJlYXIgYXMgd2VsbCBhcyBJCiAgICAgICBjb3VsZDsgYnV0IG5vdyB0aGF0IEkgc2hvdWxkIGJlIHdob2xseSBvY2N1cGllZCB3aXRoIGZlYXIgb2YgeW91IGFsb25lLCB0aGF0IGF0IGV2ZXJ5IHNvdW5kIEkKICAgICAgIHNob3VsZCBkcmVhZCBDYXRpbGluZSwgdGhhdCBubyBkZXNpZ24gc2hvdWxkIHNlZW0gcG9zc2libGUgdG8gYmUgZW50ZXJ0YWluZWQgYWdhaW5zdCBtZSB3aGljaAogICAgICAgZG9lcyBub3QgcHJvY2VlZCBmcm9tIHlvdXIgd2lja2VkbmVzcywgdGhpcyBpcyBubyBsb25nZXIgZW5kdXJhYmxlLiBEZXBhcnQsIHRoZW4sIGFuZCBkZWxpdmVyCiAgICAgICBtZSBmcm9tIHRoaXMgZmVhcjsgdGhhdCwgaWYgaXQgYmUgYSBqdXN0IG9uZSwgSSBtYXkgbm90IGJlIGRlc3Ryb3llZDsgaWYgYW4gaW1hZ2luYXJ5IG9uZSwKICAgICAgIHRoYXQgYXQgbGVhc3QgSSBtYXkgYXQgbGFzdCBjZWFzZSB0byBmZWFyLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPklmLCBhcyBJIGhhdmUgc2FpZCwgeW91ciBjb3VudHJ5IHdlcmUgdGh1cyB0byBhZGRyZXNzIHlvdSwgb3VnaHQgc2hlIG5vdCB0byBvYnRhaW4gaGVyCiAgICAgICByZXF1ZXN0LCBldmVuIGlmIHNoZSB3ZXJlIG5vdCBhYmxlIHRvIGVuZm9yY2UgaXQ/IFdoYXQgc2hhbGwgSSBzYXkgb2YgeW91ciBoYXZpbmcgZ2l2ZW4KICAgICAgIHlvdXJzZWxmIGludG8gY3VzdG9keT8gd2hhdCBvZiB5b3VyIGhhdmluZyBzYWlkLCBmb3IgdGhlIHNha2Ugb2YgYXZvaWRpbmcgc3VzcGljaW9uLCB0aGF0IHlvdQogICAgICAgd2VyZSB3aWxsaW5nIHRvIGR3ZWxsIGluIHRoZSBob3VzZSBvZiBNYXJjdXMgTGVwaWR1cz8gQW5kIHdoZW4geW91IHdlcmUgbm90IHJlY2VpdmVkIGJ5IGhpbSwKICAgICAgIHlvdSBkYXJlZCBldmVuIHRvIGNvbWUgdG8gbWUsIGFuZCBiZWdnZWQgbWUgdG8ga2VlcCB5b3UgaW4gbXkgaG91c2U7IGFuZCB3aGVuIHlvdSBoYWQKICAgICAgIHJlY2VpdmVkIGFuc3dlciBmcm9tIG1lIHRoYXQgSSBjb3VsZCBub3QgcG9zc2libHkgYmUgc2FmZSBpbiB0aGUgc2FtZSBob3VzZSB3aXRoIHlvdSwgd2hlbiBJCiAgICAgICBjb25zaWRlcmVkIG15c2VsZiBpbiBncmVhdCBkYW5nZXIgYXMgbG9uZyBhcyB3ZSB3ZXJlIGluIHRoZSBzYW1lIGNpdHksIHlvdSBjYW1lIHRvIFF1aW50dXMKICAgICAgIE1ldGVsbHVzLCB0aGUgcHJhZXRvciwgYW5kIGJlaW5nIHJlamVjdGVkIGJ5IGhpbSwgeW91IHBhc3NlZCBvbiB0byB5b3VyIGFzc29jaWF0ZSwgdGhhdCBtb3N0CiAgICAgICBleGNlbGxlbnQgbWFuLCBNYXJjdXMgTWFyY2VsbHVzLCB3aG8gd291bGQgYmUsIEkgc3VwcG9zZSB5b3UgdGhvdWdodCwgbW9zdCBkaWxpZ2VudCBpbgogICAgICAgZ3VhcmRpbmcgeW91LCBtb3N0IHNhZ2FjaW91cyBoaSBzdXNwZWN0aW5nIHlvdSwgYW5kIG1vc3QgYm9sZCBpbiBwdW5pc2hpbmcgeW91OyBidXQgaG93IGZhcgogICAgICAgY2FuIHdlIHRoaW5rIHRoYXQgbWFuIG91Z2h0IHRvIGJlIGZyb20gYm9uZHMgYW5kIGltcHJpc29ubWVudCB3aG8gaGFzIGFscmVhZHkganVkZ2VkIGhpbXNlbGYKICAgICAgIGRlc2VydmluZyBvZiBiZWluZyBnaXZlbiBpbnRvIGN1c3RvZHk/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5TaW5jZSwgdGhlbiwgdGhpcyBpcyB0aGUgY2FzZSwgZG8geW91IGhlc2l0YXRlLCBPIENhdGlsaW5lLCBpZiB5b3UgY2Fubm90IHJlbWFpbiBoZXJlIHdpdGgKICAgICAgIHRyYW5xdWlsbGl0eSwgdG8gZGVwYXJ0IHRvIHNvbWUgZGlzdGFudCBsYXVkLCBhbmQgdG8gdHJ1c3QgeW91ciBsaWZlLCBzYXZlZCBmcm9tIGp1c3QgYW5kCiAgICAgICBkZXNlcnZlZCBwdW5pc2htZW50LCB0byBmbGlnaHQgYW5kIHNvbGl0dWRlPyBNYWtlIGEgbW90aW9uLCBzYXkgeW91LCB0byB0aGUgc2VuYXRlLCAoZm9yIHRoYXQKICAgICAgIGlzIHdoYXQgeW91IGRlbWFuZCkgYW5kIGlmIHRodXMgYm9keSB2b3RlcyB0aGF0IHlvdSBvdWdodCB0byBnbyBpbnRvIGJhbmlzaG1lbnQsIHlvdSBzYXkgdGhhdAogICAgICAgeW91IHdpbGwgb2JleS4gSSB3aWxsIG5vdCBtYWtlIHN1Y2ggYSBtb3Rpb24sIGl0IGlzIGNvbnRyYXJ5IHRvIG15IHByaW5jaXBsZXMsIGFuZCB5ZXQgSSB3aWxsCiAgICAgICBsZXQgeW91IHNlZSB3aGF0IHRoZXNlIG1lbiB0aGluayBvZiB5b3UuIEJlIGdvbmUgZnJvbSB0aGUgY2l0eSwgTyBDYXRpbGluZSwgZGVsaXZlciB0aGUKICAgICAgIHJlcHVibGljIGZyb20gZmVhcjsgZGVwYXJ0IGludG8gYmFuaXNobWVudCwgaWYgdGhhdCBpcyB0aGUgd29yZCB5b3UgYXJlIHdhaXRpbmcgZm9yLiBXaGF0CiAgICAgICBub3csIE8gQ2F0aWxpbmU/IERvIHlvdSBub3QgcGVyY2VpdmUsIGRvIHlvdSBub3Qgc2VlIHRoZSBzaWxlbmNlIG9mIHRoZXNlIG1lbjsgdGhleSBwZXJtaXQKICAgICAgIGl0LCB0aGV5IHNheSBub3RoaW5nOyB3aHkgd2FpdCB5b3UgZm9yIHRoZSBhdXRob3JpdHkgb2YgdGhlaXIgd29yZHMgd2hlbiB5b3Ugc2VlIHRoZWlyIHdpc2hlcwogICAgICAgaW4gdGhlaXIgc2lsZW5jZT8gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhhZCBJIHNhaWQgdGhlIHNhbWUgdG8gdGhpcyBleGNlbGxlbnQgeW91bmcgbWFuLAogICAgICAgUHVibGl1cyBTZXh0aXVzLCBvciB0byB0aGF0IGJyYXZlIG1hbiwgTWFyY3VzIE1hcmNlbGx1cywgYmVmb3JlIHRoaXMgdGltZSB0aGUgc2VuYXRlIHdvdWxkCiAgICAgICBkZXNlcnZlZGx5IGhhdmUgbGFpZCB2aW9sZW50IGhhbmRzIG9uIG1lLCBjb25zdWwgdGhvdWdoIEkgYmUsIGluIHRoaXMgdmVyeSB0ZW1wbGUuIEJ1dCB0bwogICAgICAgeW91LCBDYXRpbGluZSwgd2hpbGUgdGhleSBhcmUgcXVpZXQgdGhleSBhcHByb3ZlLCB3aGlsZSB0aGV5IHBlcm1pdCBtZSB0byBzcGVhayB0aGV5IHZvdGUsCiAgICAgICB3aGlsZSB0aGV5IGFyZSBzaWxlbnQgdGhleSBhcmUgbG91ZCBhbmQgZWxvcXVlbnQuIEFuZCBub3QgdGhleSBhbG9uZSwgd2hvc2UgYXV0aG9yaXR5CiAgICAgICBmb3Jzb290aCBpcyBkZWFyIHRvIHlvdSwgdGhvdWdoIHRoZWlyIGxpdmVzIGFyZSB1bmltcG9ydGFudCwgYnV0IHRoZSBSb21hbiBrbmlnaHRzIHRvbywgdGhvc2UKICAgICAgIG1vc3QgaG9ub3VyYWJsZSBhbmQgZXhjZWxsZW50IG1lbiwgYW5kIHRoZSBvdGhlciB2aXJ0dW91cyBjaXRpemVucyB3aG8gYXJlIG5vdyBzdXJyb3VuZGluZwogICAgICAgdGhlIHNlbmF0ZSwgd2hvc2UgbnVtYmVycyB5b3UgY291bGQgc2VlLCB3aG9zZSBkZXNpcmVzIHlvdSBjb3VsZCBrbm93LCBhbmQgd2hvc2Ugdm9pY2VzIHlvdSBhCiAgICAgICBmZXcgbWludXRlcyBhZ28gY291bGQgaGVhcizigJR5ZXMsIHdob3NlIHZlcnkgaGFuZHMgYW5kIHdlYXBvbnMgSSBoYXZlIGZvciBzb21lIHRpbWUKICAgICAgIGJlZW4gc2NhcmNlbHkgYWJsZSB0byBrZWVwIG9mZiBmcm9tIHlvdTsgYnV0IHRob3NlLCB0b28sIEkgd2lsbCBlYXNpbHkgYnJpbmcgdG8gYXR0ZW5kIHlvdSB0bwogICAgICAgdGhlIGdhdGVzIGlmIHlvdSBsZWF2ZSB0aGVzZSBwbGFjZXMgeW91IGhhdmUgYmVlbiBsb25nIGRlc2lyaW5nIHRvIGxheSB3YXN0ZS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.8.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGhhZCBJIHNhaWQgdGhlIHNhbWUgdG8gdGhpcyBleGNlbGxlbnQgeW91bmcgbWFuLAogICAgICAgUHVibGl1cyBTZXh0aXVzLCBvciB0byB0aGF0IGJyYXZlIG1hbiwgTWFyY3VzIE1hcmNlbGx1cywgYmVmb3JlIHRoaXMgdGltZSB0aGUgc2VuYXRlIHdvdWxkCiAgICAgICBkZXNlcnZlZGx5IGhhdmUgbGFpZCB2aW9sZW50IGhhbmRzIG9uIG1lLCBjb25zdWwgdGhvdWdoIEkgYmUsIGluIHRoaXMgdmVyeSB0ZW1wbGUuIEJ1dCB0bwogICAgICAgeW91LCBDYXRpbGluZSwgd2hpbGUgdGhleSBhcmUgcXVpZXQgdGhleSBhcHByb3ZlLCB3aGlsZSB0aGV5IHBlcm1pdCBtZSB0byBzcGVhayB0aGV5IHZvdGUsCiAgICAgICB3aGlsZSB0aGV5IGFyZSBzaWxlbnQgdGhleSBhcmUgbG91ZCBhbmQgZWxvcXVlbnQuIEFuZCBub3QgdGhleSBhbG9uZSwgd2hvc2UgYXV0aG9yaXR5CiAgICAgICBmb3Jzb290aCBpcyBkZWFyIHRvIHlvdSwgdGhvdWdoIHRoZWlyIGxpdmVzIGFyZSB1bmltcG9ydGFudCwgYnV0IHRoZSBSb21hbiBrbmlnaHRzIHRvbywgdGhvc2UKICAgICAgIG1vc3QgaG9ub3VyYWJsZSBhbmQgZXhjZWxsZW50IG1lbiwgYW5kIHRoZSBvdGhlciB2aXJ0dW91cyBjaXRpemVucyB3aG8gYXJlIG5vdyBzdXJyb3VuZGluZwogICAgICAgdGhlIHNlbmF0ZSwgd2hvc2UgbnVtYmVycyB5b3UgY291bGQgc2VlLCB3aG9zZSBkZXNpcmVzIHlvdSBjb3VsZCBrbm93LCBhbmQgd2hvc2Ugdm9pY2VzIHlvdSBhCiAgICAgICBmZXcgbWludXRlcyBhZ28gY291bGQgaGVhcizigJR5ZXMsIHdob3NlIHZlcnkgaGFuZHMgYW5kIHdlYXBvbnMgSSBoYXZlIGZvciBzb21lIHRpbWUKICAgICAgIGJlZW4gc2NhcmNlbHkgYWJsZSB0byBrZWVwIG9mZiBmcm9tIHlvdTsgYnV0IHRob3NlLCB0b28sIEkgd2lsbCBlYXNpbHkgYnJpbmcgdG8gYXR0ZW5kIHlvdSB0bwogICAgICAgdGhlIGdhdGVzIGlmIHlvdSBsZWF2ZSB0aGVzZSBwbGFjZXMgeW91IGhhdmUgYmVlbiBsb25nIGRlc2lyaW5nIHRvIGxheSB3YXN0ZS4gPC90cmFuc2xhdGlvbj4="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['1.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5ZXQsIHdoeSBhbSBJIHNwZWFraW5nPyB0aGF0IGFueXRoaW5nIG1heSBjaGFuZ2UgeW91ciBwdXJwb3NlPyB0aGF0IHlvdSBtYXkgZXZlciBhbWVuZAogICAgICAgeW91ciBsaWZlPyB0aGF0IHlvdSBtYXkgbWVkaXRhdGUgZmxpZ2h0IG9yIHRoaW5rIG9mIHZvbHVudGFyeSBiYW5pc2htZW50PyBJIHdpc2ggdGhlIGdvZHMgbWF5CiAgICAgICBnaXZlIHlvdSBzdWNoIGEgbWluZDsgdGhvdWdoIEkgc2VlLCBpZiBhbGFybWVkIGF0IG15IHdvcmRzIHlvdSBicmluZyB5b3VyIG1pbmQgdG8gZ28gaW50bwogICAgICAgYmFuaXNobWVudCwgd2hhdCBhIHN0b3JtIG9mIHVucG9wdWxhcml0eSBoYW5ncyBvdmVyIG1lLCBpZiBub3QgYXQgcHJlc2VudCwgd2hpbGUgdGhlIG1lbW9yeQogICAgICAgb2YgeW91ciB3aWNrZWRuZXNzIGlzIGZyZXNoLCBhdCBhbGwgZXZlbnRzIGhlcmVhZnRlci4gQnV0IGl0IGlzIHdvcnRod2hpbGUgdG8gaW5jdXIgdGhhdCwgYXMKICAgICAgIGxvbmcgYXMgdGhhdCBpcyBidXQgYSBwcml2YXRlIG1pc2ZvcnR1bmUgb2YgbXkgb3duLCBhbmQgaXMgdW5jb25uZWN0ZWQgd2l0aCB0aGUgZGFuZ2VycyBvZgogICAgICAgdGhlIHJlcHVibGljLiBCdXQgd2UgY2Fubm90IGV4cGVjdCB0aGF0IHlvdSBzaG91bGQgYmUgY29uY2VybmVkIGF0IHlvdXIgb3duIHZpY2VzLCB0aGF0IHlvdQogICAgICAgc2hvdWxkIGZlYXIgdGhlIHBlbmFsdGllcyBvZiB0aGUgbGF3cywgb3IgdGhhdCB5b3Ugc2hvdWxkIHlpZWxkIHRvIHRoZSBuZWNlc3NpdGllcyBvZiB0aGUKICAgICAgIHJlcHVibGljLCBmb3IgeW91IGFyZSBub3QsIE8gQ2F0aWxpbmUsIG9uZSB3aG9tIGVpdGhlciBzaGFtZSBjYW4gcmVjYWxsIGZyb20gaW5mYW15LCBvciBmZWFyCiAgICAgICBmcm9tIGRhbmdlciwgb3IgcmVhc29uIGZyb20gbWFkbmVzcy4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIGdvIGZvcnRoLCBhbmQgaWYgeW91CiAgICAgICB0byBtYWtlIG1lLCB5b3VyIGVuZW15IGFzIHlvdSBjYWxsIG1lLCB1bnBvcHVsYXIsIGdvIHN0cmFpZ2h0IGludG8gYmFuaXNobWVudC4gSSBzaGFsbAogICAgICAgc2NhcmNlbHkgYmUgYWJsZSB0byBlbmR1ZSBhbGwgdGhhdCB3aWxsIGJlIHNhaWQgaWYgeW91IGRvIHNvOyBJIHNoYWxsIHNjYXJjZWx5IGJlIGFibGUgdG8KICAgICAgIHN1cHBvcnQgbXkgbG9hZCBvZiB1bnBvcHVsYXJpdHkgaWYgeW91IGRvIGdvIGludG8gYmFuaXNobWVudCBhdCB0aGUgY29tbWFuZCBvZiB0aGUgY29uc3VsOwogICAgICAgYnV0IGlmIHlvdSB3aXNoIHNlcnZlIG15IGNyZWRpdCBhbmQgcmVwdXRhdGlvbiwgZ28gZm9ydGggd2l0aCB5b3VyIGlsbC1vbWVuZWQgYmFuZCBvZgogICAgICAgcHJvZmxpZ2F0ZXM7IGJldGFrZSB5b3Vyc2VsZiB0byBNYW5pbGl1cywgcm91c2UgdXAgdGhlIGFiYW5kb25lZCBjaXRpemVucywgc2VwYXJhdGUgeW91cnNlbGYKICAgICAgIGZyb20gdGhlIGdvb2Qgb25lcywgd2FnZSB3YXIgYWdhaW5zdCB5b3VyIGNvdW50cnksIGV4dWx0IGluIHlvdXIgaW1waW91cyBiYW5kaXR0aSwgc28gdGhhdAogICAgICAgeW91IG1heSBub3Qgc2VlbSB0byBoYXZlIGJlZW4gZHJpdmVuIG91dCBieSBtZSBhbmQgZ29uZSB0byBzdHJhbmdlcnMsIGJ1dCB0byBoYXZlIGdvbmUKICAgICAgIGludml0ZWQgdG8geW91ciBvd24gZnJpZW5kcy48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.9.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsIGdvIGZvcnRoLCBhbmQgaWYgeW91CiAgICAgICB0byBtYWtlIG1lLCB5b3VyIGVuZW15IGFzIHlvdSBjYWxsIG1lLCB1bnBvcHVsYXIsIGdvIHN0cmFpZ2h0IGludG8gYmFuaXNobWVudC4gSSBzaGFsbAogICAgICAgc2NhcmNlbHkgYmUgYWJsZSB0byBlbmR1ZSBhbGwgdGhhdCB3aWxsIGJlIHNhaWQgaWYgeW91IGRvIHNvOyBJIHNoYWxsIHNjYXJjZWx5IGJlIGFibGUgdG8KICAgICAgIHN1cHBvcnQgbXkgbG9hZCBvZiB1bnBvcHVsYXJpdHkgaWYgeW91IGRvIGdvIGludG8gYmFuaXNobWVudCBhdCB0aGUgY29tbWFuZCBvZiB0aGUgY29uc3VsOwogICAgICAgYnV0IGlmIHlvdSB3aXNoIHNlcnZlIG15IGNyZWRpdCBhbmQgcmVwdXRhdGlvbiwgZ28gZm9ydGggd2l0aCB5b3VyIGlsbC1vbWVuZWQgYmFuZCBvZgogICAgICAgcHJvZmxpZ2F0ZXM7IGJldGFrZSB5b3Vyc2VsZiB0byBNYW5pbGl1cywgcm91c2UgdXAgdGhlIGFiYW5kb25lZCBjaXRpemVucywgc2VwYXJhdGUgeW91cnNlbGYKICAgICAgIGZyb20gdGhlIGdvb2Qgb25lcywgd2FnZSB3YXIgYWdhaW5zdCB5b3VyIGNvdW50cnksIGV4dWx0IGluIHlvdXIgaW1waW91cyBiYW5kaXR0aSwgc28gdGhhdAogICAgICAgeW91IG1heSBub3Qgc2VlbSB0byBoYXZlIGJlZW4gZHJpdmVuIG91dCBieSBtZSBhbmQgZ29uZSB0byBzdHJhbmdlcnMsIGJ1dCB0byBoYXZlIGdvbmUKICAgICAgIGludml0ZWQgdG8geW91ciBvd24gZnJpZW5kcy48L3RyYW5zbGF0aW9uPg=="
translation['1.9.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaG91Z2ggd2h5IHNob3VsZCBJIGludml0ZSB5b3UsIGJ5IHdob20gSSBrbm93IG1lbiBoYXZlIGJlZW4gYWxyZWFkeSBzZW50IG9uIHRvIHdhaXQgaW4KICAgICAgIGFybXMgZm9yIHlvdSBhdCB0aGUgZm9ydW0gQXVyZWxpdW07IHdobyBJIGtub3cgaGFzIGZpeGVkIGFuZCBhZ3JlZWQgd2l0aCBNYW5saXVzIHVwb24gYQogICAgICAgc2V0dGxlZCBkYXk7IGJ5IHdob20gSSBrbm93IHRoYXQgdGhhdCBzaWx2ZXIgZWFnbGUsIHdoaWNoIEkgdHJ1c3Qgd2lsbCBiZSBydWlub3VzIGFuZCBmYXRhbAogICAgICAgdG8geW91IGFuZCB0byBhbGwgeW91ciBmcmllbmRzLCBhbmQgdG8gd2hpY2ggdGhlcmUgd2FzIHNldCB1cCBpbiB5b3VyIGhvdXNlIGEgc2hyaW5lIGFzIGl0CiAgICAgICB3ZXJlIG9mIHlvdXIgY3JpbWVzLCBoYXMgYmVlbiBhbHJlYWR5IHNlbnQgZm9yd2FyZC4gTmVlZCBJIGZlYXIgdGhhdCB5b3UgY2FuIGxvbmcgZG8gd2l0aG91dAogICAgICAgdGhhdCB3aGljaCB5b3UgdXNlZCB0byB3b3JzaGlwIHdoZW4gZ29pbmcgb3V0IHRvIGRvIG11cmRlciwgYW5kIGZyb20gd2hvc2UgYWx0YXJzIHlvdSBoYXZlCiAgICAgICBvZnRlbiB0cmFuc2ZlcnJlZCB5b3VyIGltcGlvdXMgaGFuZCB0byB0aGUgc2xhdWdodGVyIG9mIGNpdGl6ZW5zPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSB3aWxsIGdvIGF0IGxhc3Qgd2hlcmUgeW91ciB1bmJyaWRsZWQgYW5kIG1hZCBkZXNpcmUgaGFzIGJlZW4gbG9uZyBodXJyeWluZyB5b3UuIEFuZAogICAgICAgdGhpcyBjYXVzZXMgeW91IG5vIGdyaWVmOyBidXQgYW4gaW5jcmVkaWJsZSBwbGVhc3VyZS4gTmF0dXJlIGhhcyBmb3JtZWQgeW91LCBkZXNpcmUgaGFzCiAgICAgICB0cmFpbmVkIHlvdSwgZm9ydHVuZSBoYXMgcHJlc2VydmVkIHlvdSBmb3IgdGhpcyBpbnNhbml0eS4gTm90IG9ubHkgZGlkIHlvdSBuZXZlciBkZXNpcmUKICAgICAgIHF1aWV0LCBidXQgeW91IG5ldmVyIGV2ZW4gZGVzaXJlZCBhbnkgd2FyIGJ1dCBhIGNyaW1pbmFsIG9uZTsgeW91IGhhdmUgY29sbGVjdGVkIGEgYmF1ZCBvZgogICAgICAgcHJvZmxpZ2F0ZXMgYW5kIHdvcnRobGVzcyBtZW4sIGFiYW5kb25lZCBub3Qgb25seSBieSBhbGwgZm9ydHVuZSBidXQgZXZlbiBieSBob3BlLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVuIHdoYXQgaGFwcGluZXNzIHdpbGwgeW91IGVuam95IHdpdGggd2hhdCBkZWxpZ2h0CiAgICAgICB3aWxsIHlvdSBleHVsdCBpbiB3aGF0IHBsZWFzdXJlIHdpbGwgeW91IHJldmVsISB3aGVuIGluIHNvIG51bWVyb3VzIGEgYm9keSBvZiBmcmllbmRzLCB5b3UKICAgICAgIG5laXRoZXIgaGVhciBub3Igc2VlIG9uZSBnb29kIG1hbi4gQWxsIHRoZSB0b2lscyB5b3UgaGF2ZSBnb25lIHRocm91Z2ggaGF2ZSBhbHdheXMgcG9pbnRlZCB0bwogICAgICAgdGhpcyBzb3J0IG9mIGxpZmU7IHlvdXIgbHlpbmcgb24gdGhlIGdyb3VuZCBub3QgbWVyZWx5IHRvIGxpZSBpbiB3YWl0IHRvIGdyYXRpZnkgeW91ciB1bmNsZWFuCiAgICAgICBkZXNpcmVzLCBidXQgZXZlbiB0byBhY2NvbXBsaXNoIGNyaW1lczsgeW91ciB2aWdpbGFuY2UsIG5vdCBvbmx5IHdoZW4gcGxvdHRpbmcgYWdhaW5zdCB0aGUKICAgICAgIHNsZWVwIG9mIGh1c2JhbmRzLCBidXQgYWxzbyBhZ2FpbnN0IHRoZSBnb29kcyBvZiB5b3VyIG11cmRlcmVkIHZpY3RpbXMsIGhhdmUgYWxsIGJlZW4KICAgICAgIHByZXBhcmF0aW9ucyBmb3IgdGhpcy4gTm93IHlvdSBoYXZlIGFuIG9wcG9ydHVuaXR5IG9mIGRpc3BsYXlpbmcgeW91ciBzcGxlbmRpZCBlbmR1cmFuY2Ugb2YKICAgICAgIGh1bmdlciwgb2YgY29sZCwgb2Ygd2FudCBvZiBldmVyeXRoaW5nOyBieSB3aGljaCBpbiBhIHNob3J0IHRpbWUgeW91IHdpbGwgZmluZCB5b3Vyc2VsZiB3b3JuCiAgICAgICBvdXQuIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+IEFsbCB0aGlzIEkgZWZmZWN0ZWQgd2hlbiBJIHByb2N1cmVkIHlvdXIgcmVqZWN0aW9uCiAgICAgICBmcm9tIHRoZSBjb25zdWxzaGlwLCB0aGF0IHlvdSBzaG91bGQgYmUgcmVkdWNlZCB0byBtYWtlIGF0dGVtcHRzIG9uIHlvdXIgY291bnRyeSBhcyBhbiBleGlsZSwKICAgICAgIGluc3RlYWQgb2YgYmVpbmcgYWJsZSB0byBkaXN0cmVzcyBpdCBhcyBjb25zdWwsIGFuZCB0aGF0IHRoYXQgd2hpY2ggaGFkIGJlZW4gd2lja2VkbHkKICAgICAgIHVuZGVydGFrZW4gYnkgeW91IHNob3VsZCBiZSBjYWxsZWQgcGlyYWN5IHJhdGhlciB0aGFuIHdhci4gPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.10.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlbiB3aGF0IGhhcHBpbmVzcyB3aWxsIHlvdSBlbmpveSB3aXRoIHdoYXQgZGVsaWdodAogICAgICAgd2lsbCB5b3UgZXh1bHQgaW4gd2hhdCBwbGVhc3VyZSB3aWxsIHlvdSByZXZlbCEgd2hlbiBpbiBzbyBudW1lcm91cyBhIGJvZHkgb2YgZnJpZW5kcywgeW91CiAgICAgICBuZWl0aGVyIGhlYXIgbm9yIHNlZSBvbmUgZ29vZCBtYW4uIEFsbCB0aGUgdG9pbHMgeW91IGhhdmUgZ29uZSB0aHJvdWdoIGhhdmUgYWx3YXlzIHBvaW50ZWQgdG8KICAgICAgIHRoaXMgc29ydCBvZiBsaWZlOyB5b3VyIGx5aW5nIG9uIHRoZSBncm91bmQgbm90IG1lcmVseSB0byBsaWUgaW4gd2FpdCB0byBncmF0aWZ5IHlvdXIgdW5jbGVhbgogICAgICAgZGVzaXJlcywgYnV0IGV2ZW4gdG8gYWNjb21wbGlzaCBjcmltZXM7IHlvdXIgdmlnaWxhbmNlLCBub3Qgb25seSB3aGVuIHBsb3R0aW5nIGFnYWluc3QgdGhlCiAgICAgICBzbGVlcCBvZiBodXNiYW5kcywgYnV0IGFsc28gYWdhaW5zdCB0aGUgZ29vZHMgb2YgeW91ciBtdXJkZXJlZCB2aWN0aW1zLCBoYXZlIGFsbCBiZWVuCiAgICAgICBwcmVwYXJhdGlvbnMgZm9yIHRoaXMuIE5vdyB5b3UgaGF2ZSBhbiBvcHBvcnR1bml0eSBvZiBkaXNwbGF5aW5nIHlvdXIgc3BsZW5kaWQgZW5kdXJhbmNlIG9mCiAgICAgICBodW5nZXIsIG9mIGNvbGQsIG9mIHdhbnQgb2YgZXZlcnl0aGluZzsgYnkgd2hpY2ggaW4gYSBzaG9ydCB0aW1lIHlvdSB3aWxsIGZpbmQgeW91cnNlbGYgd29ybgogICAgICAgb3V0LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.10.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4gQWxsIHRoaXMgSSBlZmZlY3RlZCB3aGVuIEkgcHJvY3VyZWQgeW91ciByZWplY3Rpb24KICAgICAgIGZyb20gdGhlIGNvbnN1bHNoaXAsIHRoYXQgeW91IHNob3VsZCBiZSByZWR1Y2VkIHRvIG1ha2UgYXR0ZW1wdHMgb24geW91ciBjb3VudHJ5IGFzIGFuIGV4aWxlLAogICAgICAgaW5zdGVhZCBvZiBiZWluZyBhYmxlIHRvIGRpc3RyZXNzIGl0IGFzIGNvbnN1bCwgYW5kIHRoYXQgdGhhdCB3aGljaCBoYWQgYmVlbiB3aWNrZWRseQogICAgICAgdW5kZXJ0YWtlbiBieSB5b3Ugc2hvdWxkIGJlIGNhbGxlZCBwaXJhY3kgcmF0aGVyIHRoYW4gd2FyLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPktub3cgdGhhdCBJIG1heSByZW1vdmUgYW5kIGF2ZXJ0LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBhbnkgaW4gdGhlIGxlYXN0IHJlYXNvbmFibGUKICAgICAgIGNvbXBsYWludCBmcm9tIG15c2VsZjsgbGlzdGVuLCBJIGJlc2VlY2ggeW91LCBjYXJlZnVsbHkgdG8gd2hhdCBJIHNheSwgYW5kIGxheSBpdCB1cCBpbiB5b3VyCiAgICAgICBpbm1vc3QgaGVhcnRzIGFuZCBtaW5kcy4gSW4gdHJ1dGgsIGlmIG15IGNvdW50cnksIHdoaWNoIGlzIGZhciBkZWFyZXIgdG8gbWUgdGhhbiBteQogICAgICAgbGlmZSzigJRpZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4s4oCUaWYgdGhlIHdob2xlCiAgICAgICByZXB1YmxpYyB3ZXJlIHRvIGFkZHJlc3MgbWUsIOKAnE1hcmN1cyBUdWxsaXVzLCB3aGF0IGFyZSB5b3UgZG9pbmc/IHdpbGwgeW91IHBlcm1pdAogICAgICAgdGhhdCBtYW4gdG8gZGVwYXJ0IHdob20geW91IGhhdmUgYXNjZXJ0YWluZWQgdG8gYmUgYW4gZW5lbXk/IHdob20geW91IHNlZSByZWFkeSB0byBiZWNvbWUgdGhlCiAgICAgICBnZW5lcmFsIG9mIHRoZSB3YXI/IHdob20geW91IGtub3cgdG8gYmUgZXhwZWN0ZWQgaW4gdGhlIGNhbXAgb2YgdGhlIGVuZW15IGFzIHRoZWlyIGNoaWVmOyB0aGUKICAgICAgIGF1dGhvciBvZiBhbGwgdGhpcyB3aWNrZWRuZXNzLCB0aGUgaGVhZCBvZiB0aGUgY29uc3BpcmFjeSwgdGhlIGluc3RpZ2F0b3Igb2YgdGhlIHNsYXZlcyBhbmQKICAgICAgIGFiYW5kb25lZCBjaXRpemVucywgc28gdGhhdCBoZSBzaGFsbCBzZWVtIG5vdCBkcml2ZW4gb3V0IG9mIHRoZSBjaXR5IGJ5IHlvdSwgYnV0IGxldCBsb29zZSBieQogICAgICAgeW91IGFnYWluc3QgdGhlIGNpdHk/IFdpbGwgeW91IG5vdCBvcmRlciBoaW0gdG8gYmUgdGhyb3duIGludG8gcHJpc29uLCB0byBiZSBodXJyaWVkIG9mZiB0bwogICAgICAgZXhlY3V0aW9uLCB0byBiZSBwdXQgdG8gZGVhdGggd2l0aCB0aGUgbW9zdCBwcm9tcHQgc2V2ZXJpdHk/IFdoYXQgaGluZGVycyB5b3U/IGlzIGl0IHRoZQogICAgICAgY3VzdG9tcyBvZiBvdXIgYW5jZXN0b3JzPyA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBldmVuIHByaXZhdGUgbWVuIGhhdmUgb2Z0ZW4KICAgICAgIGluIHRoaXMgcmVwdWJsaWMgc2xhaW4gbWlzY2hpZXZvdXMgY2l0aXplbnMu4oCUSXMgaXQgdGhlIGxhd3Mgd2hpY2ggaGF2ZSBiZWVuIHBhc3NlZAogICAgICAgYWJvdXQgdGhlIHB1bmlzaG1lbnQgb2YgUm9tYW4gY2l0aXplbnM/IEJ1dCBpbiB0aGlzIGNpdHkgdGhvc2Ugd2hvIGhhdmUgcmViZWxsZWQgYWdhaW5zdCB0aGUKICAgICAgIHJlcHVibGljIGhhdmUgbmV2ZXIgaGFkIHRoZSByaWdodHMgb2YgY2l0aXplbnMu4oCURG8geW91IGZlYXIgb2RpdW0gd2l0aCBwb3N0ZXJpdHk/CiAgICAgICBZb3UgYXJlIHNob3dpbmcgZmluZSBncmF0aXR1ZGUgdG8gdGhlIFJvbWFuIHBlb3BsZSB3aGljaCBoYXMgcmFpc2VkIHlvdSwgYSBtYW4ga25vd24gb25seSBieQogICAgICAgeW91ciBvd24gYWN0aW9ucywgb2Ygbm8gYW5jZXN0cmFsIHJlbm93biwgdGhyb3VnaCBhbGwgdGhlIGRlZ3JlZXMgb2YgaG9ub3VyIGF0IHNvIGVhcmx5IGFuCiAgICAgICBhZ2UgdG8gdGhlIHZlcnkgaGlnaGVzdCBvZmZpY2UsIGlmIGZyb20gZmVhciBvZiB1bnBvcHVsYXJpdHkgb3Igb2YgYW55IGRhbmdlciB5b3UgbmVnbGVjdCB0aGUKICAgICAgIHNhZmV0eSBvZiB5b3VyIGZlbGxvdy1jaXRpemVucy4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIHlvdSBoYXZlIGEgZmVhciBvZgogICAgICAgdW5wb3B1bGFyaXR5LCBpcyB0aGF0IGFyaXNpbmcgZnJvbSB0aGUgaW1wdXRhdGlvbiBvZiB2aWdvdXIgYW5kIGJvbGRuZXNzLCBvciB0aGF0IGFyaXNpbmcKICAgICAgIGZyb20gdGhhdCBvZiBpbmFjdGl2aXR5IGFuZCBpbmRlY2lzaW9uIG1vc3QgdG8gYmUgZmVhcmVkPyBXaGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpcyBsYWlkIHdhc3RlIGJ5IHdhciwgd2hlbiBjaXRpZXMgYXJlIGF0dGFja2VkIGFuZCBob3VzZXMgaW4gZmxhbWVzLCBkbwogICAgICAgeW91IG5vdCB0aGluayB0aGF0IHlvdSB3aWxsIGJlIHRoZW4gY29uc3VtZWQgYnkgYSBwZXJmZWN0IGNvbmZsYWdyYXRpb24gb2YgaGF0cmVkP+KAnQogICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPizigJRpZiB0aGUgd2hvbGUKICAgICAgIHJlcHVibGljIHdlcmUgdG8gYWRkcmVzcyBtZSwg4oCcTWFyY3VzIFR1bGxpdXMsIHdoYXQgYXJlIHlvdSBkb2luZz8gd2lsbCB5b3UgcGVybWl0CiAgICAgICB0aGF0IG1hbiB0byBkZXBhcnQgd2hvbSB5b3UgaGF2ZSBhc2NlcnRhaW5lZCB0byBiZSBhbiBlbmVteT8gd2hvbSB5b3Ugc2VlIHJlYWR5IHRvIGJlY29tZSB0aGUKICAgICAgIGdlbmVyYWwgb2YgdGhlIHdhcj8gd2hvbSB5b3Uga25vdyB0byBiZSBleHBlY3RlZCBpbiB0aGUgY2FtcCBvZiB0aGUgZW5lbXkgYXMgdGhlaXIgY2hpZWY7IHRoZQogICAgICAgYXV0aG9yIG9mIGFsbCB0aGlzIHdpY2tlZG5lc3MsIHRoZSBoZWFkIG9mIHRoZSBjb25zcGlyYWN5LCB0aGUgaW5zdGlnYXRvciBvZiB0aGUgc2xhdmVzIGFuZAogICAgICAgYWJhbmRvbmVkIGNpdGl6ZW5zLCBzbyB0aGF0IGhlIHNoYWxsIHNlZW0gbm90IGRyaXZlbiBvdXQgb2YgdGhlIGNpdHkgYnkgeW91LCBidXQgbGV0IGxvb3NlIGJ5CiAgICAgICB5b3UgYWdhaW5zdCB0aGUgY2l0eT8gV2lsbCB5b3Ugbm90IG9yZGVyIGhpbSB0byBiZSB0aHJvd24gaW50byBwcmlzb24sIHRvIGJlIGh1cnJpZWQgb2ZmIHRvCiAgICAgICBleGVjdXRpb24sIHRvIGJlIHB1dCB0byBkZWF0aCB3aXRoIHRoZSBtb3N0IHByb21wdCBzZXZlcml0eT8gV2hhdCBoaW5kZXJzIHlvdT8gaXMgaXQgdGhlCiAgICAgICBjdXN0b21zIG9mIG91ciBhbmNlc3RvcnM/IDwvdHJhbnNsYXRpb24+"
translation['1.11.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGV2ZW4gcHJpdmF0ZSBtZW4gaGF2ZSBvZnRlbgogICAgICAgaW4gdGhpcyByZXB1YmxpYyBzbGFpbiBtaXNjaGlldm91cyBjaXRpemVucy7igJRJcyBpdCB0aGUgbGF3cyB3aGljaCBoYXZlIGJlZW4gcGFzc2VkCiAgICAgICBhYm91dCB0aGUgcHVuaXNobWVudCBvZiBSb21hbiBjaXRpemVucz8gQnV0IGluIHRoaXMgY2l0eSB0aG9zZSB3aG8gaGF2ZSByZWJlbGxlZCBhZ2FpbnN0IHRoZQogICAgICAgcmVwdWJsaWMgaGF2ZSBuZXZlciBoYWQgdGhlIHJpZ2h0cyBvZiBjaXRpemVucy7igJREbyB5b3UgZmVhciBvZGl1bSB3aXRoIHBvc3Rlcml0eT8KICAgICAgIFlvdSBhcmUgc2hvd2luZyBmaW5lIGdyYXRpdHVkZSB0byB0aGUgUm9tYW4gcGVvcGxlIHdoaWNoIGhhcyByYWlzZWQgeW91LCBhIG1hbiBrbm93biBvbmx5IGJ5CiAgICAgICB5b3VyIG93biBhY3Rpb25zLCBvZiBubyBhbmNlc3RyYWwgcmVub3duLCB0aHJvdWdoIGFsbCB0aGUgZGVncmVlcyBvZiBob25vdXIgYXQgc28gZWFybHkgYW4KICAgICAgIGFnZSB0byB0aGUgdmVyeSBoaWdoZXN0IG9mZmljZSwgaWYgZnJvbSBmZWFyIG9mIHVucG9wdWxhcml0eSBvciBvZiBhbnkgZGFuZ2VyIHlvdSBuZWdsZWN0IHRoZQogICAgICAgc2FmZXR5IG9mIHlvdXIgZmVsbG93LWNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.11.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmIHlvdSBoYXZlIGEgZmVhciBvZgogICAgICAgdW5wb3B1bGFyaXR5LCBpcyB0aGF0IGFyaXNpbmcgZnJvbSB0aGUgaW1wdXRhdGlvbiBvZiB2aWdvdXIgYW5kIGJvbGRuZXNzLCBvciB0aGF0IGFyaXNpbmcKICAgICAgIGZyb20gdGhhdCBvZiBpbmFjdGl2aXR5IGFuZCBpbmRlY2lzaW9uIG1vc3QgdG8gYmUgZmVhcmVkPyBXaGVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+IGlzIGxhaWQgd2FzdGUgYnkgd2FyLCB3aGVuIGNpdGllcyBhcmUgYXR0YWNrZWQgYW5kIGhvdXNlcyBpbiBmbGFtZXMsIGRvCiAgICAgICB5b3Ugbm90IHRoaW5rIHRoYXQgeW91IHdpbGwgYmUgdGhlbiBjb25zdW1lZCBieSBhIHBlcmZlY3QgY29uZmxhZ3JhdGlvbiBvZiBoYXRyZWQ/4oCdCiAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoaXMgaG9seSBhZGRyZXNzIG9mIHRoZSByZXB1YmxpYywgYW5kIHRvIHRoZSBmZWVsaW5ncyBvZiB0aG9zZSBtZW4gd2hvIGVudGVydGFpbiB0aGUKICAgICAgIHNhbWUgb3BpbmlvbiwgSSB3aWxsIG1ha2UgdGhpcyBzaG9ydCBhbnN3ZXI64oCUSWYsIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgdGhvdWdodCBpdAogICAgICAgYmVzdCB0aGF0IENhdGlsaW5lIHNob3VsZCBiZSBwdW5pc2hlZCB3aXRoIGRlYXRoLCBJIHdvdWxkIG5vdCBoYXZlIGdpdmVuIHRoZSBzcGFjZSBvZiBvbmUKICAgICAgIGhvdXIgdG8gdGhpcyBnbGFkaWF0b3IgdG8gbGl2ZSBpbi4gSWYsIGZvcnNvb3RoLCB0aG9zZSBleGNlbGxlbnQgbWVuIGFuZCBtb3N0IGlsbHVzdHJpb3VzCiAgICAgICBjaXRpZXMgbm90IG9ubHkgZGlkIG5vdCBwb2xsdXRlIHRoZW1zZWx2ZXMsIGJ1dCBldmVuIGdsb3JpZmllZCB0aGVtc2VsdmVzIGJ5IHRoZSBibG9vZCBvZgogICAgICAgU2F0dXJuaW51cywgYW5kIHRoZSBHcmFjY2hpLCBhbmQgRmxhY2N1cywgYW5kIG1hbnkgb3RoZXJzIG9mIG9sZCB0aW1lLCBzdXJlbHkgSSBoYWQgbm8gY2F1c2UKICAgICAgIHRvIGZlYXIgbGVzdCBmb3Igc2xheWluZyB0aGlzIHBhcnJpY2lkYWwgbXVyZGVyZXIgb2YgdGhlIGNpdGl6ZW5zIGFueSB1bnBvcHVsYXJpdHkgc2hvdWxkCiAgICAgICBhY2NydWUgdG8gbWUgd2l0aCBwb3N0ZXJpdHkuIEFuZCBpZiBpdCBkaWQgdGhyZWF0ZW4gbWUgdG8gZXZlciBzbyBncmVhdCBhIGRlZ3JlZSwgeWV0IEkgaGF2ZQogICAgICAgYWx3YXlzIGJlZW4gb2YgdGhlIGRpc3Bvc2l0aW9uIHRvIHRoaW5rIHVucG9wdWxhcml0eSBlYXJuZWQgYnkgdmlydHVlIGFuZCBnbG9yeSwgbm90CiAgICAgICB1bnBvcHVsYXJpdHkuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.12.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaG91Z2ggdGhlcmUgYXJlIHNvbWUgbWVuIGluIHRoaXMgYm9keSB3aG8gZWl0aGVyIGRvIG5vdCBzZWUgd2hhdCB0aHJlYXRlbnMsIG9yIGRpc3NlbWJsZQogICAgICAgd2hhdCB0aGV5IGRvIHNlZTsgd2hvIGhhdmUgZmVkIHRoZSBob3BlIG9mIENhdGlsaW5lIGJ5IG1pbGQgc2VudGltZW50cywgYW5kIGhhdmUgc3RyZW5ndGhlbmVkCiAgICAgICB0aGUgcmlzaW5nIGNvbnNwaXJhY3kgYnkgbm90IGJlbGlldmluZyBpdDsgaW5mbHVlbmNlZCBieSB3aG9zZSBhdXRob3JpdHkgbWFueSwgYW5kIHRoZXkgbm90CiAgICAgICB3aWNrZWQsIGJ1dCBvbmx5IGlnbm9yYW50LCBpZiBJIHB1bmlzaGVkIGhpbSB3b3VsZCBzYXkgdGhhdCBJIGhhZCBhY3RlZCBjcnVlbGx5IGFuZAogICAgICAgdHlyYW5pY2FsbHkuIEJ1dCBJIGtub3cgdGhhdCBpZiBoZSBhcnJpdmVzIGF0IHRoZSBjYW1wIG9mIE1hbmxpdXMgdG8gd2hpY2ggaGUgaXMgZ29pbmcsIHRoZXJlCiAgICAgICB3aWxsIGJlIG5vIG9uZSBzbyBzdHVwaWQgYXMgbm90IHRvIHNlZSB0aGF0IHRoZXJlIGhhcyBiZWVuIGEgY29uc3BpcmFjeTsgbm8gb25lIHNvIGhhcmRlbmVkCiAgICAgICBhcyBub3QgdG8gY29uZmVzcyBpdC4gQnV0IGlmIHRoaXMgbWFuIGFsb25lIHdlcmUgcHV0IHRvIGRlYXRoLCBJIGtub3cgdGhhdCB0aGlzIGRpc2Vhc2Ugb2YKICAgICAgIHRoZSByZXB1YmxpYyB3b3VsZCBiZSBvbmx5IGNoZWNrZWQgZm9yIGF3aGlsZSwgbm90IGVyYWRpY2F0ZWQgZm9yIGV2ZXIuIEJ1dCBpZiBoZSBiYW5pc2hlcwogICAgICAgaGltc2VsZjsgYW5kIHRha2VzIHdpdGggaGltIGFsbCBoaXMgZnJpZW5kcywgYW5kIGNvbGxlY3RzIGF0IG9uZSBwb2ludCBhbGwgdGhlIHJ1aW5lZCBtZW4KICAgICAgIGZyb20gZXZlcnkgcXVhcnRlciwgdGhlbiBub3Qgb25seSB3aWxsIHRoaXMgZnVsbC1ncm93biBwbGFndWUgb2YgdGhlIHJlcHVibGljIGJlIGV4dGluZ3Vpc2hlZAogICAgICAgYW5kIGVyYWRpY2F0ZWQsIGJ1dCBhbHNvIHRoZSByb290IGFuZCBzZWVkIG9mIGFsbCBmdXR1cmUgZXZpbHMgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['1.13.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldlIGhhdmUgbm93IGZvciBhIGxvbmcgdGltZSwgTyBjb25zY3JpcHQgZmF0aGVycywgbGl2ZWQgYW1vbmcgdGhlc2UgZGFuZ2VycyBhbmQKICAgICAgIG1hY2hpbmF0aW9ucyBvZiBjb25zcGlyYWN5OyBidXQgc29tZWhvdyBvciBvdGhlciwgdGhlIHJpcGVuZXNzIG9mIGFsbCB3aWNrZWRuZXNzLCBhbmQgb2YgdGhpcwogICAgICAgbG9uZy1zdGFuZGluZyBtYWRuZXNzIGFuZCBhdWRhY2l0eSwgaGFzIGNvbWUgdG8gYSBoZWFkIGF0IHRoZSB0aW1lIG9mIG15IGNvbnN1bHNoaXAuIEJ1dCBpZgogICAgICAgdGhpcyBtYW4gYWxvbmUgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgcGlyYXRpY2FsIGNyZXcsIHdlIG1heSBhcHBlYXIsIHBlcmhhcHMsIGZvciBhIHNob3J0IHRpbWUKICAgICAgIHJlbGlldmVkIGZyb20gZmVhciBhbmQgYW54aWV0eSwgYnV0IHRoZSBkYW5nZXIgd2lsbCBzZXR0bGUgZG93biBhbmQgbGllIGhpZCBpbiB0aGUgdmVpbnMgYW5kCiAgICAgICBib3dlbHMgb2YgdGhlIHJlcHVibGljLiBBcyBpdCBvZnRlbiBoYXBwZW5zIHRoYXQgbWVuIGFmZmxpY3RlZCB3aXRoIGEgc2V2ZXJlIGRpc2Vhc2UsIHdoZW4KICAgICAgIHRoZXkgYXJlIHRvcnR1cmVkIHdpdGggaGVhdCBhbmQgZmV2ZXIsIGlmIHRoZXkgZHJpbmsgY29sZCB3YXRlciwgc2VlbSBhdCBmaXJzdCB0byBiZQogICAgICAgcmVsaWV2ZWQsIGJ1dCBhZnRlcndhcmRzIHN0aWZmZXIgbW9yZSBhbmQgbW9yZSBzZXZlcmVseTsgc28gdGhpcyBkaXNlYXNlIHdoaWNoIGlzIGluIHRoZQogICAgICAgcmVwdWJsaWMsIGlmIHJlbGlldmVkIGJ5IHRoZSBwdW5pc2htZW50IG9mIHRoaXMgbWFuLCB3aWxsIG9ubHkgZ2V0IHdvcnNlIGFuZCB3b3JzZSwgYXMgdGhlCiAgICAgICByZXN0IHdpbGwgYmUgc3RpbGwgYWxpdmUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGxldCB0aGUgd29ydGhsZXNzIGJlIGdvbmUs4oCUbGV0IHRoZW0gc2VwYXJhdGUKICAgICAgIHRoZW1zZWx2ZXMgZnJvbSB0aGUgZ29vZCzigJRsZXQgdGhlbSBjb2xsZWN0IGluIG9uZSBwbGFjZSzigJRsZXQgdGhlbSwgYXMgSQogICAgICAgaGF2ZSBvZnRlbiBzYWlkIGJlZm9yZSwgYmUgc2VwYXJhdGVkIGZyb20gdXMgYnkgYSB3YWxsOyBsZXQgdGhlbSBjZWFzZSB0byBwbG90IGFnYWluc3QgdGhlCiAgICAgICBjb25zdWwgaW4gaGlzIG93biBob3VzZSzigJR0byBzdXJyb3VuZCB0aGUgdHJpYnVuYWwgb2YgdGhlIGNpdHkgcHJhZXRvcizigJR0bwogICAgICAgYmVzaWVnZSB0aGUgc2VuYXRlLWhvdXNlIHdpdGggc3dvcmRzLOKAlHRvIHByZXBhcmUgYnJhbmRzIGFuZCB0b3JjaGVzIHRvIGJ1cm4gdGhlCiAgICAgICBjaXR5OyBsZXQgaXQsIGluIHNob3J0LCBiZSB3cml0dGVuIG9uIHRoZSBicm93IG9mIGV2ZXJ5IGNpdGl6ZW4sIHdoYXQgYXJlIGhpcyBzZW50aW1lbnRzCiAgICAgICBhYm91dCB0aGUgcmVwdWJsaWMuIEkgcHJvbWlzZSB5b3UgdGhpcywgTyBjb25zY3JpcHQgZmF0aGVycywgdGhhdCB0aGVyZSBzaGFsbCBiZSBzbyBtdWNoCiAgICAgICBkaWxpZ2VuY2UgaW4gdXMgdGhlIGNvbnN1bHMsIG11Y2ggYXV0aG9yaXR5IGluIHlvdSwgc28gbXVjaCB2aXJ0dWUgaW4gdGhlIFJvbWFuIGtuaWdodHMsIHNvCiAgICAgICBtdWNoIHVuYW5pbWl0eSBpbiBhbGwgZ29vZCBtZW4sIHRoYXQgeW91IHNoYWxsIHNlZSBldmVyeXRoaW5nIG1hZGUgcGxhaW4gYW5kIG1hbmlmZXN0IGJ5IHRoZQogICAgICAgZGVwYXJ0dXJlIG9mIENhdGlsaW5lLOKAlGV2ZXJ5dGhpbmcgY2hlY2tlZCBhbmQgcHVuaXNoZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.13.33'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IGxlbmd0aCwgTyBSb21hbnMsIHdlIGhhdmUgZGlzbWlzc2VkIGZyb20gdGhlIGNpdHksIG9yIGRyaXZlbiBvdXQsIG9yLCB3aGVuIGhlIHdhcwogICAgICAgZGVwYXJ0aW5nIG9mIGhpcyBvd24gYWNjb3JkLCB3ZSBoYXZlIHB1cnN1ZWQgd2l0aCB3b3JkcywgTHVjaXVzIENhdGlsaW5lLCBtYWQgd2l0aCBhdWRhY2l0eSwKICAgICAgIGJyZWF0aGluZyB3aWNrZWRuZXNzLCBpbXBpb3VzbHkgcGxhbm5pbmcgbWlzY2hpZWYgdG8gaGlzIGNvdW50cnksIHRocmVhdGVuaW5nIGZpcmUgYW5kIHN3b3JkCiAgICAgICB0byB5b3UgYW5kIHRvIHRoaXMgY2l0eS4gSGUgaXMgZ29uZSwgaGUgaGFzIGRlcGFydGVkLCBoZSBoYXMgZGlzYXBwZWFyZWQsIGhlIGhhcyBydXNoZWQgb3V0LgogICAgICAgTm8gaW5qdXJ5IHdpbGwgbm93IGJlIHByZXBhcmVkIGFnYWluc3QgdGhlc2Ugd2FsbHMgd2l0aGluIHRoZSB3YWxscyB0aGVtc2VsdmVzIGJ5IHRoYXQKICAgICAgIG1vbnN0ZXIgYW5kIHByb2RpZ3kgb2Ygd2lja2VkbmVzcy4gQW5kIHdlIGhhdmUsIHdpdGhvdXQgY29udHJvdmVyc3ksIGRlZmVhdGVkIGhpbSwgdGhlIHNvbGUKICAgICAgIGdlbmVyYWwgb2YgdGhpcyBkb21lc3RpYyB3YXIuIEZvciBub3cgdGhhdCBkYWdnZXIgd2lsbCBubyBsb25nZXIgaG92ZXIgYWJvdXQgb3VyIHNpZGVzOyB3ZQogICAgICAgc2hhbGwgbm90IGJlIGFmcmFpZCBpbiB0aGUgY2FtcHVzLCBpbiB0aGUgZm9ydW0sIGluIHRoZSBzZW5hdGUtaG91c2Us4oCUeWVzLCBhbmQKICAgICAgIHdpdGhpbiBvdXIgb3duIHByaXZhdGUgd2FsbHMsIGhlIHdhcyBtb3ZlZCBmcm9tIGhpcyBwbGFjZSB3aGVuIGhlIHdhcyBkcml2ZW4gZnJvbSB0aGUgY2l0eS4KICAgICAgIE5vdyB3ZSBzaGFsbCBvcGVubHkgY2Fycnkgb24gYSByZWd1bGFyIHdhciB3aXRoIGFuIGVuZW15IHdpdGhvdXQgaGluZHJhbmNlLiBCZXlvbmQgYWxsCiAgICAgICBxdWVzdGlvbiB3ZSBydWluIHRoZSBtYW47IHdlIGhhdmUgZGVmZWF0ZWQgaGltIHNwbGVuZGlkbHkgd2hlbiB3ZSBoYXZlIGRyaXZlbiBoaW0gZnJvbSBzZWNyZXQKICAgICAgIHRyZWFjaGVyeSBpbnRvIG9wZW4gd2FyZmFyZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgaGUgaGFzIG5vdCB0YWtlbiB3aXRoCiAgICAgICBoaW0gaGlzIHN3b3JkIHJlZCB3aXRoIGJsb29kIGFzIGhlIGludHJ1ZGVk4oCUdGhhdCBoZSBoYXMgbGVmdCB1cwogICAgICAgYWxpdmUs4oCUdGhhdCB3ZSB3cmVzdGVkIHRoZSB3ZWFwb24gZnJvbSBoaXMgaGFuZHMs4oCUdGhhdCBoZSBoYXMgbGVmdCB0aGUKICAgICAgIGNpdGl6ZW5zIHNhZmUgYW5kIHRoZSBjaXR5IHN0YW5kaW5nLCB3aGF0IGdyZWF0IGFuZCBvdmVyd2hlbG1pbmcgZ3JpZWYgbXVzdCB5b3UgdGhpbmsgdGhhdAogICAgICAgdGhpcyBpcyB0byBoaW0uIE5vdyBoZSBsaWVzIHByb3N0cmF0ZSwgTyBSb21hbnMsIGFuZCBmZWVscyBoaW1zZWxmIHN0cmlja2VuIGRvd24gYW5kIGFiamVjdCwKICAgICAgIGFuZCBvZnRlbiBjYXN0cyBiYWNrIGhpcyBleWVzIHRvd2FyZHMgdGhpcyBjaXR5LCB3aGljaCBoZSBtb3VybnMgb3ZlciBhcyBzbmF0Y2hlZCBmcm9tIGhpcwogICAgICAgamF3cywgYnV0IHdoaWNoIHNlZW1zIHRvIG1lIHRvIHJlam9pY2UgYXQgaGF2aW5nIHZvbWl0ZWQgZm9ydGggc3VjaCBhIHBlc3QsIGFuZCBjYXN0IGl0IG91dAogICAgICAgb2YgZG9vcnMuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IGhlIGhhcyBub3QgdGFrZW4gd2l0aAogICAgICAgaGltIGhpcyBzd29yZCByZWQgd2l0aCBibG9vZCBhcyBoZSBpbnRydWRlZOKAlHRoYXQgaGUgaGFzIGxlZnQgdXMKICAgICAgIGFsaXZlLOKAlHRoYXQgd2Ugd3Jlc3RlZCB0aGUgd2VhcG9uIGZyb20gaGlzIGhhbmRzLOKAlHRoYXQgaGUgaGFzIGxlZnQgdGhlCiAgICAgICBjaXRpemVucyBzYWZlIGFuZCB0aGUgY2l0eSBzdGFuZGluZywgd2hhdCBncmVhdCBhbmQgb3ZlcndoZWxtaW5nIGdyaWVmIG11c3QgeW91IHRoaW5rIHRoYXQKICAgICAgIHRoaXMgaXMgdG8gaGltLiBOb3cgaGUgbGllcyBwcm9zdHJhdGUsIE8gUm9tYW5zLCBhbmQgZmVlbHMgaGltc2VsZiBzdHJpY2tlbiBkb3duIGFuZCBhYmplY3QsCiAgICAgICBhbmQgb2Z0ZW4gY2FzdHMgYmFjayBoaXMgZXllcyB0b3dhcmRzIHRoaXMgY2l0eSwgd2hpY2ggaGUgbW91cm5zIG92ZXIgYXMgc25hdGNoZWQgZnJvbSBoaXMKICAgICAgIGphd3MsIGJ1dCB3aGljaCBzZWVtcyB0byBtZSB0byByZWpvaWNlIGF0IGhhdmluZyB2b21pdGVkIGZvcnRoIHN1Y2ggYSBwZXN0LCBhbmQgY2FzdCBpdCBvdXQKICAgICAgIG9mIGRvb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGlmIHRoZXJlIGJlIGFueSBvbmUgb2YgdGhhdCBkaXNwb3NpdGlvbiB3aGljaCBhbGwgbWVuIHNob3VsZCBoYXZlLCB3aG8geWV0IGJsYW1lcyBtZQogICAgICAgZ3JlYXRseSBmb3IgdGhlIHZlcnkgdGhpbmcgaW4gd2hpY2ggbXkgc3BlZWNoIGV4dWx0cyBhbmQgdHJpdW1waHMs4oCUbmFtZWx5LCB0aGF0IEkKICAgICAgIGRpZCBub3QgYXJyZXN0IHNvIGNhcGl0YWwgbW9ydGFsIGFuIGVuZW15IHJhdGhlciB0aGFuIGxldCBoaW0gZ28s4oCUdGhhdCBpcyBub3QgbXkKICAgICAgIGZhdWx0LCBPIGNpdGl6ZW5zLCBidXQgdGhlIGZhdWx0IG9mIHRoZSB0aW1lcy4gTHVjaXVzIENhdGlsaW5lIG91Z2h0IHRvIGhhdmUgYmVlbiB2aXNpdGVkCiAgICAgICB3aXRoIHRoZSBzZXZlcmVzdCBwdW5pc2htZW50LCBhbmQgdG8gaGF2ZSBiZWVuIHB1dCB0byBkZWF0aCBsb25nIHNpbmNlOyBhbmQgYm90aCB0aGUgY3VzdG9tcwogICAgICAgb2Ygb3VyIGFuY2VzdG9ycywgYW5kIHRoZSByaWdvdXIgb2YgbXkgb2ZmaWNlLCBhbmQgdGhlIHJlcHVibGljLCBkZW1hbmRlZCB0aGlzIG9mIG1lOyBidXQgaG93CiAgICAgICBtYW55LCB0aGluayB5b3UsIHdlcmUgdGhlcmUgd2hvIGRpZCBub3QgYmVsaWV2ZSB3aGF0IEkgcmVwb3J0ZWQ/IGhvdyBtYW55IHdobyBvdXQgb2YKICAgICAgIHN0dXBpZGl0eSBkaWQgbm90IHRoaW5rIHNvPyBob3cgbWFueSB3aG8gZXZlbiBkZWZlbmRlZCBoaW0s4oCUaG93IG1hbnkgd2hvLCBvdXQgb2YKICAgICAgIHRoZWlyIG93biBkZXByYXZpdHksIGZhdm91cmVkIGhpbT8gSWYsIGluIHRydXRoLCBJIGhhZCB0aG91Z2h0IHRoYXQsIGlmIGhlIHdlcmUgcmVtb3ZlZCwgYWxsCiAgICAgICBkYW5nZXIgd291bGQgaGUgcmVtb3ZlZCBmcm9tIHlvdSwgSSB3b3VsZCBsb25nIHNpbmNlIGhhdmUgY3V0IG9mZiBMdWNpdXMgQ2F0aWxpbmUsIGhhZCBpdAogICAgICAgYmVlbiBhdCB0aGUgcmlzaywgbm90IG9ubHkgb2YgbXkgcG9wdWxhcml0eSwgYnV0IGV2ZW4gb2YgbXkgbGlmZS4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgSSBzYXcgdGhhdCwgc2luY2UgdGhlIG1hdHRlciB3YXMgbm90IGV2ZW4gdGhlbgogICAgICAgcHJvdmVkIHRvIGFsbCBvZiB5b3UsIGlmIEkgaGFkIHB1bmlzaGVkIGhpbSB3aXRoIGRlYXRoLCBhcyBoZSBoYWQgZGVzZXJ2ZWQsIEkgc2hvdWxkIGJlIGJvcm5lCiAgICAgICBkb3duIGJ5IHVucG9wdWxhcml0eSwgYW5kIHNvIGJlIHVuYWJsZSB0byBmb2xsb3cgdXAgaGlzIGFjY29tcGxpY2VzLCBJIGJyb3VnaHQgdGhlIGJ1c2luZXNzCiAgICAgICBvbiB0byB0aGlzIHBvaW50IHRoYXQgeW91IG1pZ2h0IGJlIGFibGUgdG8gY29tYmF0IG9wZW5seSB3aGVuIHlvdSBzYXcgdGhlIGVuZW15IHdpdGhvdXQKICAgICAgIGRpc2d1aXNlLiBCdXQgaG93IGV4Y2VlZGluZ2x5IEkgdGhpbmsgdGhpcyBlbmVteSB0byBiZSBmZWFyZWQgbm93IHRoYXQgaGUgaXMgb3V0IG9mIGRvb3JzLAogICAgICAgeW91IG1heSBzZWUgZnJvbSB0aGlz4oCUdGhhdCBJIGFtIHZleGVkIGV2ZW4gdGhhdCBiZSBoYXMgZ29uZSBmcm9tIHRoZSBjaXR5IHdpdGggYnV0CiAgICAgICBhIHNtYWxsIHJldGludWUuIEkgd2lzaCBoZSBoYWQgdGFrZW4gd2l0aCBoaW0gYWxsIGhpcyBmb3JjZXMuIEhlIGhhcyB0YWtlbiB3aXRoIGhpbQogICAgICAgVG9uZ2lsbHVzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gc2FpZCB0byBoYXZlIGEgY3JpbWluYWwgaW50aW1hY3ksIGFuZCBQdWJsaWNpdXMsIGFuZAogICAgICAgTXVuYXRpdXMsIHdob3NlIGRlYnRzIGNvbnRyYWN0ZWQgaW4gdGF2ZXJucyBjb3VsZCBjYXVzZSBubyBncmVhdCBkaXNxdWlldHVkZSB0byB0aGUgcmVwdWJsaWMuCiAgICAgICBIZSBoYXMgbGVmdCBiZWhpbmQgaGltIG90aGVyc+KAlHlvdSBhbGwga25vdyB3aGF0IG1lbiB0aGV5IGFyZSwgaG93IG92ZXJ3aGVsbWVkIHdpdGgKICAgICAgIGRlYnQsIGhvdyBwb3dlcmZ1bCwgaG93IG5vYmxlLiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgYXMgSSBzYXcgdGhhdCwgc2luY2UgdGhlIG1hdHRlciB3YXMgbm90IGV2ZW4gdGhlbgogICAgICAgcHJvdmVkIHRvIGFsbCBvZiB5b3UsIGlmIEkgaGFkIHB1bmlzaGVkIGhpbSB3aXRoIGRlYXRoLCBhcyBoZSBoYWQgZGVzZXJ2ZWQsIEkgc2hvdWxkIGJlIGJvcm5lCiAgICAgICBkb3duIGJ5IHVucG9wdWxhcml0eSwgYW5kIHNvIGJlIHVuYWJsZSB0byBmb2xsb3cgdXAgaGlzIGFjY29tcGxpY2VzLCBJIGJyb3VnaHQgdGhlIGJ1c2luZXNzCiAgICAgICBvbiB0byB0aGlzIHBvaW50IHRoYXQgeW91IG1pZ2h0IGJlIGFibGUgdG8gY29tYmF0IG9wZW5seSB3aGVuIHlvdSBzYXcgdGhlIGVuZW15IHdpdGhvdXQKICAgICAgIGRpc2d1aXNlLiBCdXQgaG93IGV4Y2VlZGluZ2x5IEkgdGhpbmsgdGhpcyBlbmVteSB0byBiZSBmZWFyZWQgbm93IHRoYXQgaGUgaXMgb3V0IG9mIGRvb3JzLAogICAgICAgeW91IG1heSBzZWUgZnJvbSB0aGlz4oCUdGhhdCBJIGFtIHZleGVkIGV2ZW4gdGhhdCBiZSBoYXMgZ29uZSBmcm9tIHRoZSBjaXR5IHdpdGggYnV0CiAgICAgICBhIHNtYWxsIHJldGludWUuIEkgd2lzaCBoZSBoYWQgdGFrZW4gd2l0aCBoaW0gYWxsIGhpcyBmb3JjZXMuIEhlIGhhcyB0YWtlbiB3aXRoIGhpbQogICAgICAgVG9uZ2lsbHVzLCB3aXRoIHdob20gaGUgaGFkIGJlZW4gc2FpZCB0byBoYXZlIGEgY3JpbWluYWwgaW50aW1hY3ksIGFuZCBQdWJsaWNpdXMsIGFuZAogICAgICAgTXVuYXRpdXMsIHdob3NlIGRlYnRzIGNvbnRyYWN0ZWQgaW4gdGF2ZXJucyBjb3VsZCBjYXVzZSBubyBncmVhdCBkaXNxdWlldHVkZSB0byB0aGUgcmVwdWJsaWMuCiAgICAgICBIZSBoYXMgbGVmdCBiZWhpbmQgaGltIG90aGVyc+KAlHlvdSBhbGwga25vdyB3aGF0IG1lbiB0aGV5IGFyZSwgaG93IG92ZXJ3aGVsbWVkIHdpdGgKICAgICAgIGRlYnQsIGhvdyBwb3dlcmZ1bCwgaG93IG5vYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmVmb3JlLCB3aXRoIG91ciBHYWxsaWMgbGVnaW9ucywgYW5kIHdpdGggdGhlIGxldmllcyB3aGljaCBRdWludHVzIE1ldGVsbHVzIGhhcyByYWlzZWQKICAgICAgIGluIHRoZSBQaWNlbmlhbiBhbmQgR2FsbGljIHRlcnJpdG9yeSwgYW5kIHdpdGggdGhlc2UgdHJvb3BzIHdoaWNoIGFyZSBldmVyeSBkYXkgYmVpbmcgZ290CiAgICAgICByZWFkeSBieSB1cywgSSB0aG9yb3VnaGx5IGRlc3Bpc2UgdGhhdCBhcm15IGNvbXBvc2VkIG9mIGRlc3BlcmF0ZSBvbGQgbWVuLCBvZiBjbG93bmlzaAogICAgICAgcHJvZmxpZ2F0ZXMsIGFuZCB1bmVkdWNhdGVkIHNwZW5kdGhyaWZ0czsgb2YgdGhvc2Ugd2hvIGhhdmUgcHJlZmVycmVkIHRvIGRlc2VydCB0aGVpciBiYWlsCiAgICAgICByYXRoZXIgdGhhbiB0aGF0IGFybXksIGFuZCB3aGljaCB3aWxsIGZhbGwgdG8gcGllY2VzIGlmIEkgc2hvdyB0aGVtIG5vdCB0aGUgYmF0dGxlIGFycmF5IG9mCiAgICAgICBvdXIgYXJteSwgYnV0IGFuIGVkaWN0IG9mIHRoZSBwcmFldG9yLiBJIHdpc2ggaGUgaGFkIHRha2VuIHdpdGggaGltIHRob3NlIHNvbGRpZXJzIG9mIGhpcywKICAgICAgIHdob20gSSBzZWUgaG92ZXJpbmcgYWJvdXQgdGhlIGZvcnVtLCBzdGFuZGluZyBhYm91dCB0aGUgc2VuYXRlLWhvdXNlLCBldmVuIGNvbWluZyBpbnRvIHRoZQogICAgICAgc2VuYXRlLCB3aG8gc2hpbmUgd2l0aCBvaW50bWVudCwgd2hvIGdsaXR0ZXIgaW4gcHVycGxlOyBhbmQgaWYgdGhleSByZW1haW4gaGVyZSwgcmVtZW1iZXIKICAgICAgIHRoYXQgdGhhdCBhcm15IGlzIG5vdCBzbyBtdWNoIHRvIGJlIGZlYXJlZCBieSB1cyBhcyB0aGVzZSBtZW4gd2hvIGhhdmUgZGVzZXJ0ZWQgdGhlIGFybXkuIEFuZAogICAgICAgdGhleSBhcmUgdGhlIG1vcmUgdG8gYmUgZmVhcmVkLCBiZWNhdXNlIHRoZXkgYXJlIGF3YXJlIHRoYXQgSSBrbm93IHdoYXQgdGhleSBhcmUgdGhpbmtpbmcgb2YKICAgICAgIGFuZCB5ZXQgdGhleSBhcmUgbm90IGluZmx1ZW5jZWQgYnkgaXQuIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSSBrbm93IHRvIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzODAiIGtleT0idGduLDcwMTAzODAiPkFwdWxpYTwvcGxhY2VOYW1lPiBoYXMgYmVlbiBhbGxvdHRlZCwgd2hvIGhhcyBFdHJ1cmlhLCB3aG8gdGhlIFBpY2VuaWFuIHRlcnJpdG9yeSwgd2hvIHRoZQogICAgICAgR2FsbGljIGRpc3RyaWN0LCB3aG8gaGFzIGJlZ2dlZCBmb3IgaGltc2VsZiB0aGUgb2ZmaWNlIG9mIHNwcmVhZGluZyBmaXJlIGFuZCBzd29yZCBieSBuaWdodAogICAgICAgdGhyb3VnaCB0aGUgY2l0eS4gVGhleSBrbm93IHRoYXQgYWxsIHRoZSBwbGFucyBvZiB0aGUgcHJlY2VkaW5nIG5pZ2h0IGFyZSBicm91Z2h0IHRvIG1lLiBJCiAgICAgICBsYWlkIHRoZW0gYmVmb3JlIHRoZSBzZW5hdGUgeWVzdGVyZGF5LiBDYXRpbGluZSBoaW1zZWxmIHdhcyBhbGFybWVkLCBhbmQgZmxlZC4gV2h5IGRvIHRoZXNlCiAgICAgICBtZW4gd2FpdD8gVmVyaWx5LCB0aGV5IGFyZSBncmVhdGx5IG1pc3Rha2VuIGlmIHRoZXkgdGhpbmsgdGhhdCBmb3JtZXIgbGVuaXR5IG9mIG1pbmUgd2lsbAogICAgICAgbGFzdCBmb3JldmVyLiA8bWlsZXN0b25lIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBJIGtub3cgdG8gd2hvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzgwIj5BcHVsaWE8L3BsYWNlTmFtZT4gaGFzIGJlZW4gYWxsb3R0ZWQsIHdobyBoYXMgRXRydXJpYSwgd2hvIHRoZSBQaWNlbmlhbiB0ZXJyaXRvcnksIHdobyB0aGUKICAgICAgIEdhbGxpYyBkaXN0cmljdCwgd2hvIGhhcyBiZWdnZWQgZm9yIGhpbXNlbGYgdGhlIG9mZmljZSBvZiBzcHJlYWRpbmcgZmlyZSBhbmQgc3dvcmQgYnkgbmlnaHQKICAgICAgIHRocm91Z2ggdGhlIGNpdHkuIFRoZXkga25vdyB0aGF0IGFsbCB0aGUgcGxhbnMgb2YgdGhlIHByZWNlZGluZyBuaWdodCBhcmUgYnJvdWdodCB0byBtZS4gSQogICAgICAgbGFpZCB0aGVtIGJlZm9yZSB0aGUgc2VuYXRlIHllc3RlcmRheS4gQ2F0aWxpbmUgaGltc2VsZiB3YXMgYWxhcm1lZCwgYW5kIGZsZWQuIFdoeSBkbyB0aGVzZQogICAgICAgbWVuIHdhaXQ/IFZlcmlseSwgdGhleSBhcmUgZ3JlYXRseSBtaXN0YWtlbiBpZiB0aGV5IHRoaW5rIHRoYXQgZm9ybWVyIGxlbml0eSBvZiBtaW5lIHdpbGwKICAgICAgIGxhc3QgZm9yZXZlci4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hhdCBJIGhhdmUgYmVlbiB3YWl0aW5nIGZvciwgdGhhdCBJIGhhdmUgZ2FpbmVkLOKAlG5hbWVseSwgdGhhdCB5b3Ugc2hvdWxkIGFsbCBzZWUKICAgICAgIHRoYXQgYSBjb25zcGlyYWN5IGhhcyBiZWVuIG9wZW5seSBmb3JtZWQgYWdhaW5zdCB0aGUgcmVwdWJsaWM7IHVubGVzcywgaW5kZWVkLCB0aGVyZSBiZSBhbnkKICAgICAgIG9uZSB3aG8gdGhpbmtzIHRoYXQgdGhvc2Ugd2hvIGFyZSBsaWtlIENhdGlsaW5lIGRvIG5vdCBhZ3JlZSB3aXRoIENhdGlsaW5lLiBUaGVyZSBpcyBub3QgYW55CiAgICAgICBsb25nZXIgcm9vbSBmb3IgbGVuaXR5OyB0aGUgYnVzaW5lc3MgaXRzZWxmIGRlbWFuZHMgc2V2ZXJpdHkuIE9uZSB0aGluZywgZXZlbiBub3csIEkgd2lsbAogICAgICAgZ3JhbnQs4oCUbGV0IHRoZW0gZGVwYXJ0LCBsZXQgdGhlbSBiZSBnb25lLiBMZXQgdGhlbSBub3Qgc3VmZmVyIHRoZSB1bmhhcHB5IENhdGlsaW5lCiAgICAgICB0byBwaW5lIGF3YXkgZm9yIHdhbnQgb2YgdGhlbS4gSSB3aWxsIHRlbGwgdGhlbSB0aGUgcm9hZC4gSGUgd2VudCBieSB0aGUgQXVyZWxpYW4gcm9hZC4gSWYKICAgICAgIHRoZXkgbWFrZSBoYXN0ZSwgdGhleSB3aWxsIGNhdGNoIGhpbSBieSB0aGUgZXZlbmluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+TyBoYXBweQogICAgICAgcmVwdWJsaWMsIGlmIGl0IGNhbiBjYXN0IGZvcnRoIHRoZXNlIGRyZWdzIG9mIHRoZSByZXB1YmxpYyEgRXZlbiBub3csIHdoZW4gQ2F0aWxpbmUgYWxvbmUgaXMKICAgICAgIGdvdCByaWQgb2Y7IHRoZSByZXB1YmxpYyBzZWVtcyB0byBtZSByZWxpZXZlZCBhbmQgcmVmcmVzaGVkOyBmb3Igd2hhdCBldmlsIG9yIHdpY2tlZG5lc3MgY2FuCiAgICAgICBiZSBkZXZpc2VkIG9yIGltYWdpbmVkIHdoaWNoIGhlIGRpZCBub3QgY29uY2VpdmU/IFdoYXQgcHJpc29uZXIsIHdoYXQgZ2xhZGlhdG9yLCB3aGF0IHRoaWVmOwogICAgICAgd2hhdCBhc3Nhc3Npbiwgd2hhdCBwYXJyaWNpZGUsIHdoYXQgZm9yZ2VyIG9mIHdpbGxzLCB3aGF0IGNoZWF0LCB3aGF0IGRlYmF1Y2hlZSwgd2hhdAogICAgICAgc3BlbmR0aHJpZnQsIHdoYXQgYWR1bHRlcmVyLCB3aGF0IGFiYW5kb25lZCB3b21hbiwgd2hhdCBjb3JydXB0ZXIgb2YgeW91dGgsIHdoYXQgcHJvZmxpZ2F0ZSwKICAgICAgIHdoYXQgc2NvdW5kcmVsIGNhbiBiZSBmb3VuZCBpbiBhbGwgSXRhbHksIHdobyBkb2VzIG5vdCBhdm93IHRoYXQgaGUgaGFzIGJlZW4gb24gdGVybXMgb2YKICAgICAgIGludGltYWN5IHdpdGggQ2F0aWxpbmU/IFdoYXQgbXVyZGVyIGhhcyBiZWVuIGNvbW1pdHRlZCBmb3IgeWVhcnMgd2l0aG91dCBoaW0/IFdoYXQgbmVmYXJpb3VzCiAgICAgICBhY3Qgb2YgaW5mYW15IHRoYXQgaGFzIG5vdCBiZWVuIGRvbmUgYnkgaGltPyA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk8gaGFwcHkKICAgICAgIHJlcHVibGljLCBpZiBpdCBjYW4gY2FzdCBmb3J0aCB0aGVzZSBkcmVncyBvZiB0aGUgcmVwdWJsaWMhIEV2ZW4gbm93LCB3aGVuIENhdGlsaW5lIGFsb25lIGlzCiAgICAgICBnb3QgcmlkIG9mOyB0aGUgcmVwdWJsaWMgc2VlbXMgdG8gbWUgcmVsaWV2ZWQgYW5kIHJlZnJlc2hlZDsgZm9yIHdoYXQgZXZpbCBvciB3aWNrZWRuZXNzIGNhbgogICAgICAgYmUgZGV2aXNlZCBvciBpbWFnaW5lZCB3aGljaCBoZSBkaWQgbm90IGNvbmNlaXZlPyBXaGF0IHByaXNvbmVyLCB3aGF0IGdsYWRpYXRvciwgd2hhdCB0aGllZjsKICAgICAgIHdoYXQgYXNzYXNzaW4sIHdoYXQgcGFycmljaWRlLCB3aGF0IGZvcmdlciBvZiB3aWxscywgd2hhdCBjaGVhdCwgd2hhdCBkZWJhdWNoZWUsIHdoYXQKICAgICAgIHNwZW5kdGhyaWZ0LCB3aGF0IGFkdWx0ZXJlciwgd2hhdCBhYmFuZG9uZWQgd29tYW4sIHdoYXQgY29ycnVwdGVyIG9mIHlvdXRoLCB3aGF0IHByb2ZsaWdhdGUsCiAgICAgICB3aGF0IHNjb3VuZHJlbCBjYW4gYmUgZm91bmQgaW4gYWxsIEl0YWx5LCB3aG8gZG9lcyBub3QgYXZvdyB0aGF0IGhlIGhhcyBiZWVuIG9uIHRlcm1zIG9mCiAgICAgICBpbnRpbWFjeSB3aXRoIENhdGlsaW5lPyBXaGF0IG11cmRlciBoYXMgYmVlbiBjb21taXR0ZWQgZm9yIHllYXJzIHdpdGhvdXQgaGltPyBXaGF0IG5lZmFyaW91cwogICAgICAgYWN0IG9mIGluZmFteSB0aGF0IGhhcyBub3QgYmVlbiBkb25lIGJ5IGhpbT8gPC90cmFuc2xhdGlvbj4="
translation['2.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpbiB3aGF0IG90aGVyIG1hbiB3ZXJlIHRoZXJlIGV2ZXIgc28gbWFueSBhbGx1cmVtZW50cyBmb3IgeW91dGggYXMgaW4gaGltLCB3aG8gYm90aAogICAgICAgaW5kdWxnZWQgaW4gaW5mYW1vdXMgbG92ZSBmb3Igb3RoZXJzLCBhbmQgZW5jb3VyYWdlZCB0aGVpciBpbmZhbW91cyBhZmZlY3Rpb25zIGZvciBoaW1zZWxmLAogICAgICAgcHJvbWlzaW5nIHRvIHNvbWUgZW5qb3ltZW50IG9mIHRoZWlyIGx1c3QsIHRvIG90aGVycyB0aGUgZGVhdGggb2YgdGhlaXIgcGFyZW50cywgYW5kIG5vdCBvbmx5CiAgICAgICBpbnN0aWdhdGluZyB0aGVtIHRvIGluaXF1aXR5LCBidXQgZXZlbiBhc3Npc3RpbmcgdGhlbSBpbiBpdC4gQnV0IG5vdywgaG93IHN1ZGRlbmx5IGhhZCBoZQogICAgICAgY29sbGVjdGVkLCBub3Qgb25seSBvdXQgb2YgdGhlIGNpdHksIGJ1dCBldmVuIG91dCBvZiB0aGUgY291bnRyeSwgYSBudW1iZXIgb2YgYWJhbmRvbmVkIG1lbj8KICAgICAgIE5vIG9uZSwgbm90IG9ubHkgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCBidXQgaW4gZXZlcnkgY29ybmVyIG9mCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGRlYnQgd2hvbSBoZSBkaWQgbm90CiAgICAgICBlbmxpc3QgaW4gdGhpcyBpbmNyZWRpYmxlIGFzc29jaWF0aW9uIG9mIHdpY2tlZG5lc3MuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgYnV0IGluIGV2ZXJ5IGNvcm5lciBvZgogICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDgwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCB3YXMgb3ZlcndoZWxtZWQgd2l0aCBkZWJ0IHdob20gaGUgZGlkIG5vdAogICAgICAgZW5saXN0IGluIHRoaXMgaW5jcmVkaWJsZSBhc3NvY2lhdGlvbiBvZiB3aWNrZWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kLCB0aGF0IHlvdSBtYXkgdW5kZXJzdGFuZCB0aGUgZGl2ZXJzaXR5IG9mIGhpcyBwdXJzdWl0cyBhbmQgdGhlIHZhcmlldHkgb2YgaGlzIGRlc2lnbnMsCiAgICAgICB0aGVyZSB3YXMgbm8gb25lIGluIGFueSBzY2hvb2wgb2YgZ2xhZGlhdG9ycywgYXQgYWxsIGluY2xpbmVkIHRvIGF1ZGFjaXR5LCB3aG8gZG9lcyBub3QgYXZvdwogICAgICAgaGltc2VsZiB0byBiZSBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgQ2F0aWxpbmUs4oCUbm8gb25lIG9uIHRoZSBzdGFnZSwgYXQgYWxsIG9mIGEKICAgICAgIGZpY2tsZSBhbmQgd29ydGhsZXNzIGRpc3Bvc2l0aW9uLCB3aG8gZG9lcyBub3QgcHJvZmVzcyBoaW1zZWxmIGhpcyBjb21wYW5pb24uIEFuZCBoZSwgdHJhaW5lZAogICAgICAgaW4gdGhlIHByYWN0aWNlIG9mIGluc3VsdCBhbmQgd2lja2VkbmVzcywgaW4gZW5kdXJpbmcgY29sZCwgYW5kIGh1bmdlciwgYW5kIHRoaXJzdCwgYW5kCiAgICAgICB3YXRjaGluZywgd2FzIGNhbGxlZCBhIGJyYXZlIG1hbiBieSB0aG9zZSBmZWxsb3dzLCB3aGlsZSBhbGwgdGhlIGFwcGxpYW5jZXMgb2YgaW5kdXN0cnkgYW5kCiAgICAgICBpbnN0cnVtZW50cyBvZiB2aXJ0dWUgd2VyZSBkZXZvdGVkIHRvIGx1c3QgYW5kIGF0cm9jaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaWYgaGlzIGNvbXBhbmlvbnMgZm9sbG93IGhpbSzigJRpZiB0aGUgaW5mYW1vdXMgaGVyZCBvZiBkZXNwZXJhdGUgbWVuIGRlcGFydAogICAgICAgZnJvbSB0aGUgY2l0eSwgTyBoYXBweSBzaGFsbCB3ZSBiZSwgZm9ydHVuYXRlIHdpbGwgYmUgdGhlIHJlcHVibGljLCBpbGx1c3RyaW91cyB3aWxsIGJlIHRoZQogICAgICAgcmVub3duIG9mIG15IGNvbnN1bHNoaXAuIEZvciB0aGVpcnMgaXMgbm8gb3JkaW5hcnkgaW5zb2xlbmNlLOKAlG5vIGNvbW1vbiBhbmQKICAgICAgIGVuZHVyYWJsZSBhdWRhY2l0eS4gVGhleSB0aGluayBvZiBub3RoaW5nIGJ1dCBzbGF1Z2h0ZXIsIGNvbmZsYWdyYXRpb24sIGFuZCByYXBpbmUuIFRoZXkgaGF2ZQogICAgICAgZGlzc2lwYXRlZCB0aGVpciBwYXRyaW1vbmllcywgdGhleSBoYXZlIHNxdWFuZGVyZWQgdGhlaXIgZm9ydHVuZXMuIE1vbmV5IGhhcyBsb25nIGZhaWxlZAogICAgICAgdGhlbSwgYW5kIG5vdyBjcmVkaXQgYmVnaW5zIHRvIGZhaWw7IGJ1dCB0aGUgc2FtZSBkZXNpcmVzIHJlbWFpbiB3aGljaCB0aGV5IGhhZCBpbiB0aGVpciB0aW1lCiAgICAgICBvZiBhYnVuZGFuY2UuIEJ1dCBpZiBpbiB0aGVpciBkcmlua2luZyBhbmQgZ2FtYmxpbmcgcGFydGllcyB0aGV5IHdlcmUgY29udGVudCB3aXRoIGZlYXN0cyBhbmQKICAgICAgIGhhcmxvdHMsIHRoZXkgd291bGQgYmUgaW4gYSBob3BlbGVzcyBzdGF0ZSBpbmRlZWQ7IGJ1dCB5ZXQgdGhleSBtaWdodCBiZSBlbmR1cmVkLiBCdXQgd2hvIGNhbgogICAgICAgYmVhciB0aGlzLOKAlHRoYXQgaW5kb2xlbnQgbWVuIHNob3VsZCBwbG90IGFnYWluc3QgdGhlIGJyYXZlc3Qs4oCUZHJ1bmthcmRzCiAgICAgICBhZ2FpbnN0IHRoZSBzb2JlcizigJRtZW4gYXNsZWVwIGFnYWluc3QgbWVuIGF3YWtlLOKAlG1lbiBseWluZyBhdCBmZWFzdHMsCiAgICAgICBlbWJyYWNpbmcgYWJhbmRvbmVkIHdvbWVuLCBsYW5ndWlkIHdpdGggd2luZSwgY3JhbW1lZCB3aXRoIGZvb2QsIGNyb3duZWQgd2l0aCBjaGFwbGV0cywKICAgICAgIHJlZWtpbmcgd2l0aCBvaW50bWVudHMsIHdvcm4gb3V0IHdpdGggbHVzdCwgYmVsY2ggb3V0IGluIHRoZWlyIGRpc2NvdXJzZSB0aGUgbXVyZGVyIG9mIGFsbAogICAgICAgZ29vZCBtZW4sIGFuZCB0aGUgY29uZmxhZ3JhdGlvbiBvZiB0aGUgY2l0eT8gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgSSBhbSBjb25maWRlbnQgdGhhdCBzb21lIGZhdGUgaXMgaGFuZ2luZyBvdmVyIHRoZXNlCiAgICAgICBtZW47IGFuZCB0aGF0IHRoZSBwdW5pc2htZW50IGxvbmcgc2luY2UgZHVlIHRvIHRoZWlyIGluaXF1aXR5LCBhbmQgd29ydGhsZXNzbmVzcywgYW5kCiAgICAgICB3aWNrZWRuZXNzLCBhbmQgbHVzdCwgaXMgZWl0aGVyIHZpc2libHkgYXQgaGFuZCBvciBhdCBsZWFzdCByYXBpZGx5IGFwcHJvYWNoaW5nLiBBbmQgaWYgbXkKICAgICAgIGNvbnN1bHNoaXAgc2hhbGwgaGF2ZSByZW1vdmVkLCBzaW5jZSBpdCBjYW5ub3QgY3VyZSB0aGVtLCBpdCB3aWxsIGhhdmUgYWRkZWQsIG5vdCBzb21lIGJyaWVmCiAgICAgICBzcGFuLCBidXQgbWFueSBhZ2VzIG9mIGV4aXN0ZW5jZSB0byB0aGUgcmVwdWJsaWMuIEZvciB0aGVyZSBpcyBubyBuYXRpb24gZm9yIHVzIHRvCiAgICAgICBmZWFyLOKAlG5vIGtpbmcgd2hvIGNhbiBtYWtlIHdhciBvbiB0aGUgUm9tYW4gcGVvcGxlLiBBbGwgZm9yZWlnbiBhZmZhaXJzIGFyZQogICAgICAgdHJhbnF1aWxpemVkLCBib3RoIGJ5IGxhbmQgYW5kIHNlYSwgYnkgdGhlIHZhbG91ciBvZiBvbmUgbWFuLiBEb21lc3RpYyB3YXIgYWxvbmUgcmVtYWlucy4gVGhlCiAgICAgICBvbmx5IHBsb3RzIGFnYWluc3QgdXMgYXJlIHdpdGhpbiBvdXIgb3duIHdhbGxzLOKAlHRoZSBkYW5nZXIgaXMgd2l0aGluLOKAlHRoZQogICAgICAgZW5lbXkgaXMgd2l0aGluLiBXZSBtdXN0IHdhciB3aXRoIGx1eHVyeSwgd2l0aCBtYWRuZXNzLCB3aXRoIHdpY2tlZG5lc3MuIEZvciB0aGlzIHdhciwgTwogICAgICAgY2l0aXplbnMsIEkgb2ZmZXIgbXlzZWxmIGFzIHRoZSBnZW5lcmFsLiBJIHRha2Ugb24gbXlzZWxmIHRoZSBlbm1pdHkgb2YgcHJvZmxpZ2F0ZSBtZW4uIFdoYXQKICAgICAgIGNhbiBiZSBjdXJlZCwgSSB3aWxsIGN1cmUsIGJ5IHdoYXRldmVyIG1lYW5zIGl0IG1heSBiZSBwb3NzaWJsZS4gV2hhdCBtdXN0IGJlIGN1dCBhd2F5LCBJCiAgICAgICB3aWxsIG5vdCBzdWZmZXIgdG8gc3ByZWFkLCB0byB0aGUgcnVpbiBvZiB0aGUgcmVwdWJsaWMuIExldCB0aGVtIGRlcGFydCwgb3IgbGV0IHRoZW0gc3RheQogICAgICAgcXVpZXQ7IG9yIGlmIHRoZXkgcmVtYWluIGluIHRoZSBjaXR5IGFuZCBpbiB0aGUgc2FtZSBkaXNwb3NpdGlvbiBhcyBhdCBwcmVzZW50LCBsZXQgdGhlbQogICAgICAgZXhwZWN0IHdoYXQgdGhleSBkZXNlcnZlLiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IEkgYW0gY29uZmlkZW50IHRoYXQgc29tZSBmYXRlIGlzIGhhbmdpbmcgb3ZlciB0aGVzZQogICAgICAgbWVuOyBhbmQgdGhhdCB0aGUgcHVuaXNobWVudCBsb25nIHNpbmNlIGR1ZSB0byB0aGVpciBpbmlxdWl0eSwgYW5kIHdvcnRobGVzc25lc3MsIGFuZAogICAgICAgd2lja2VkbmVzcywgYW5kIGx1c3QsIGlzIGVpdGhlciB2aXNpYmx5IGF0IGhhbmQgb3IgYXQgbGVhc3QgcmFwaWRseSBhcHByb2FjaGluZy4gQW5kIGlmIG15CiAgICAgICBjb25zdWxzaGlwIHNoYWxsIGhhdmUgcmVtb3ZlZCwgc2luY2UgaXQgY2Fubm90IGN1cmUgdGhlbSwgaXQgd2lsbCBoYXZlIGFkZGVkLCBub3Qgc29tZSBicmllZgogICAgICAgc3BhbiwgYnV0IG1hbnkgYWdlcyBvZiBleGlzdGVuY2UgdG8gdGhlIHJlcHVibGljLiBGb3IgdGhlcmUgaXMgbm8gbmF0aW9uIGZvciB1cyB0bwogICAgICAgZmVhcizigJRubyBraW5nIHdobyBjYW4gbWFrZSB3YXIgb24gdGhlIFJvbWFuIHBlb3BsZS4gQWxsIGZvcmVpZ24gYWZmYWlycyBhcmUKICAgICAgIHRyYW5xdWlsaXplZCwgYm90aCBieSBsYW5kIGFuZCBzZWEsIGJ5IHRoZSB2YWxvdXIgb2Ygb25lIG1hbi4gRG9tZXN0aWMgd2FyIGFsb25lIHJlbWFpbnMuIFRoZQogICAgICAgb25seSBwbG90cyBhZ2FpbnN0IHVzIGFyZSB3aXRoaW4gb3VyIG93biB3YWxscyzigJR0aGUgZGFuZ2VyIGlzIHdpdGhpbizigJR0aGUKICAgICAgIGVuZW15IGlzIHdpdGhpbi4gV2UgbXVzdCB3YXIgd2l0aCBsdXh1cnksIHdpdGggbWFkbmVzcywgd2l0aCB3aWNrZWRuZXNzLiBGb3IgdGhpcyB3YXIsIE8KICAgICAgIGNpdGl6ZW5zLCBJIG9mZmVyIG15c2VsZiBhcyB0aGUgZ2VuZXJhbC4gSSB0YWtlIG9uIG15c2VsZiB0aGUgZW5taXR5IG9mIHByb2ZsaWdhdGUgbWVuLiBXaGF0CiAgICAgICBjYW4gYmUgY3VyZWQsIEkgd2lsbCBjdXJlLCBieSB3aGF0ZXZlciBtZWFucyBpdCBtYXkgYmUgcG9zc2libGUuIFdoYXQgbXVzdCBiZSBjdXQgYXdheSwgSQogICAgICAgd2lsbCBub3Qgc3VmZmVyIHRvIHNwcmVhZCwgdG8gdGhlIHJ1aW4gb2YgdGhlIHJlcHVibGljLiBMZXQgdGhlbSBkZXBhcnQsIG9yIGxldCB0aGVtIHN0YXkKICAgICAgIHF1aWV0OyBvciBpZiB0aGV5IHJlbWFpbiBpbiB0aGUgY2l0eSBhbmQgaW4gdGhlIHNhbWUgZGlzcG9zaXRpb24gYXMgYXQgcHJlc2VudCwgbGV0IHRoZW0KICAgICAgIGV4cGVjdCB3aGF0IHRoZXkgZGVzZXJ2ZS4gPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGVyZSBhcmUgbWVuLCBPIFJvbWFucywgd2hvIHNheSB0aGF0IENhdGlsaW5lIGhhcyBiZWVuIGRyaXZlbiBieSBtZSBpbnRvIGJhbmlzaG1lbnQuCiAgICAgICBCdXQgaWYgSSBjb3VsZCBkbyBzbyBieSBhIHdvcmQsIEkgd291bGQgZHJpdmUgb3V0IHRob3NlIGFsc28gd2hvIHNheSBzby4gRm9yc29vdGgsIHRoYXQKICAgICAgIHRpbWlkLCB0aGF0IGV4Y2Vzc2l2ZWx5IGJhc2hmdWwgbWFuIGNvdWxkIG5vdCBiZWFyIHRoZSB2b2ljZSBvZiB0aGUgY29uc3VsOyBhcyBzb29uIGFzIGhlIHdhcwogICAgICAgb3JkZXJlZCB0byBnbyBpbnRvIGJhbmlzaG1lbnQsIGhlIG9iZXllZCwgaGUgd2FzIHF1aWV0LiBZZXN0ZXJkYXksIHdoZW4gSSBoYWQgYmVlbiBhbGwgYnV0CiAgICAgICBtdXJkZXJlZCBhdCBteSBvd24gaG91c2UsIEkgY29udm9rZWQgdGhlIHNlbmF0ZSBpbiB0aGUgdGVtcGxlIG9mIEp1cGl0ZXIgU3RhdG9yOyBJIHJlbGF0ZWQKICAgICAgIHRoZSB3aG9sZSBhZmZhaXIgdG8gdGhlIGNvbnNjcmlwdCBmYXRoZXJzOyBhbmQgd2hlbiBDYXRpbGluZSBjYW1lIHRoaXRoZXIsIHdoYXQgc2VuYXRvcgogICAgICAgYWRkcmVzc2VkIGhpbT8gd2hvIHNhbHV0ZWQgaGltPyB3aG8gbG9va2VkIHVwb24gaGltIG5vdCBzbyBtdWNoIGV2ZW4gYXMgYW4gYWJhbmRvbmVkIGNpdGl6ZW4sCiAgICAgICBhcyBhbiBpbXBsYWNhYmxlIGVuZW15PyBOYXkgdGhlIGNoaWVmcyBvZiB0aGF0IGJvZHkgbGVmdCB0aGF0IHBhcnQgb2YgdGhlIGJlbmNoZXMgdG8gd2hpY2ggaGUKICAgICAgIGNhbWUgbmFrZWQgYW5kIGVtcHR5LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBPbiB0aGlzIEksIHRoYXQgdmlvbGVudCBjb25zdWwsIHdobyBkcml2ZSBjaXRpemVucyBpbnRvCiAgICAgICBleGlsZSBieSBhIHdvcmQsIGFza2VkIG9mIENhdGlsaW5lIHdoZXRoZXIgaGUgaGFkIGJlZW4gYXQgdGhlIG5vY3R1cm5hbCBtZWV0aW5nIGF0IE1hcmN1cwogICAgICAgTGVjY2Encywgb3Igbm90OyB3aGVuIHRoYXQgbW9zdCBhdWRhY2lvdXMgbWFuLCBjb252aWN0ZWQgYnkgaGlzIG93biBjb25zY2llbmNlLCB3YXMgYXQgZmlyc3QKICAgICAgIHNpbGVudC4gSSByZWxhdGVkIGFsbCB0aGUgb3RoZXIgY2lyY3Vtc3RhbmNlczsgSSBkZXNjcmliZWQgd2hhdCBoZSBoYWQgZG9uZSB0aGF0IG5pZ2h0LCB3aGVyZQogICAgICAgaGUgaGFkIGJlZW4sIHdoYXQgaGUgaGFkIGFycmFuZ2VkIGZvciB0aGUgbmV4dCBuaWdodCwgaG93IHRoZSBwbGFuIG9mIHRoZSB3aG9sZSB3YXIgaGFkIGJlZW4KICAgICAgIGxhaWQgZG93biBieSBoaW0uIFdoZW4gaGUgaGVzaXRhdGVkLCB3aGVuIGhlIHdhcyBjb252aWN0ZWQsIEkgYXNrZWQgd2h5IGhlIGhlc2l0YXRlZCB0byBnbwogICAgICAgd2hpdGhlciBoZSBoYWQgYmVlbiBsb25nIGJlZW4gcHJlcGFyaW5nIHRvIGdvOyB3aGVuIEkga25ldyB0aGF0IGFybXMsIHRoYXQgdGhlIGF4ZXMsIHRoZQogICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LCBhbmQgdHJ1bXBldHMsIGFuZCBtaWxpdGFyeSBzdGFuZGFyZHMsIGFuZCB0aGF0IHNpbHZlcgogICAgICAgZWFnbGUgdG8gd2hpY2ggaGUgaGFkIG1hZGUgYSBzaHJpbmUgaW4gaGlzIG93biBob3VzZSwgaGFkIGJlZW4gc2VudCBvbj8gPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIEkgZHJpdmUgaGltIGludG8gZXhpbGUgd2hvIEkga25ldyBoYWQgYWxyZWFkeSBlbnRlcmVkIHVwb24gd2FyPyBJCiAgICAgICBzdXBwb3NlIE1hbmxpdXMsIHRoYXQgY2VudHVyaW9uIHdobyBoYXMgcGl0Y2hlZCBoaXMgY2FtcCBpbiB0aGUgRmFlc3VsYW4gZGlzdHJpY3QsIGhhcwogICAgICAgcHJvY2xhaW1lZCB3YXIgYWdhaW5zdCB0aGUgUm9tYW4gcGVvcGxlIGluIGhpcyBvd24gbmFtZTsgYW5kIHRoYXQgY2FtcCBpcyBub3Qgbm93IHdhaXRpbmcgZm9yCiAgICAgICBDYXRpbGluZSBhcyBpdHMgZ2VuZXJhbCwgYW5kIGhlLCBkcml2ZW4gaW5kZWVkIGludG8gZXhpbGUsIHdpbGwgZ28gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGtleT0idGduLDcwMDg3ODEiPk1hcnNlaWxsZXM8L3BsYWNlTmFtZT4sIGFzIHRoZXkgc2F5LCBhbmQgbm90IHRvIHRoYXQgY2FtcC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gT24gdGhpcyBJLCB0aGF0IHZpb2xlbnQgY29uc3VsLCB3aG8gZHJpdmUgY2l0aXplbnMgaW50bwogICAgICAgZXhpbGUgYnkgYSB3b3JkLCBhc2tlZCBvZiBDYXRpbGluZSB3aGV0aGVyIGhlIGhhZCBiZWVuIGF0IHRoZSBub2N0dXJuYWwgbWVldGluZyBhdCBNYXJjdXMKICAgICAgIExlY2NhJ3MsIG9yIG5vdDsgd2hlbiB0aGF0IG1vc3QgYXVkYWNpb3VzIG1hbiwgY29udmljdGVkIGJ5IGhpcyBvd24gY29uc2NpZW5jZSwgd2FzIGF0IGZpcnN0CiAgICAgICBzaWxlbnQuIEkgcmVsYXRlZCBhbGwgdGhlIG90aGVyIGNpcmN1bXN0YW5jZXM7IEkgZGVzY3JpYmVkIHdoYXQgaGUgaGFkIGRvbmUgdGhhdCBuaWdodCwgd2hlcmUKICAgICAgIGhlIGhhZCBiZWVuLCB3aGF0IGhlIGhhZCBhcnJhbmdlZCBmb3IgdGhlIG5leHQgbmlnaHQsIGhvdyB0aGUgcGxhbiBvZiB0aGUgd2hvbGUgd2FyIGhhZCBiZWVuCiAgICAgICBsYWlkIGRvd24gYnkgaGltLiBXaGVuIGhlIGhlc2l0YXRlZCwgd2hlbiBoZSB3YXMgY29udmljdGVkLCBJIGFza2VkIHdoeSBoZSBoZXNpdGF0ZWQgdG8gZ28KICAgICAgIHdoaXRoZXIgaGUgaGFkIGJlZW4gbG9uZyBiZWVuIHByZXBhcmluZyB0byBnbzsgd2hlbiBJIGtuZXcgdGhhdCBhcm1zLCB0aGF0IHRoZSBheGVzLCB0aGUKICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mYXNjZXM8L2ZvcmVpZ24+LCBhbmQgdHJ1bXBldHMsIGFuZCBtaWxpdGFyeSBzdGFuZGFyZHMsIGFuZCB0aGF0IHNpbHZlcgogICAgICAgZWFnbGUgdG8gd2hpY2ggaGUgaGFkIG1hZGUgYSBzaHJpbmUgaW4gaGlzIG93biBob3VzZSwgaGFkIGJlZW4gc2VudCBvbj8gPC90cmFuc2xhdGlvbj4="
translation['2.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRGlkIEkgZHJpdmUgaGltIGludG8gZXhpbGUgd2hvIEkga25ldyBoYWQgYWxyZWFkeSBlbnRlcmVkIHVwb24gd2FyPyBJCiAgICAgICBzdXBwb3NlIE1hbmxpdXMsIHRoYXQgY2VudHVyaW9uIHdobyBoYXMgcGl0Y2hlZCBoaXMgY2FtcCBpbiB0aGUgRmFlc3VsYW4gZGlzdHJpY3QsIGhhcwogICAgICAgcHJvY2xhaW1lZCB3YXIgYWdhaW5zdCB0aGUgUm9tYW4gcGVvcGxlIGluIGhpcyBvd24gbmFtZTsgYW5kIHRoYXQgY2FtcCBpcyBub3Qgbm93IHdhaXRpbmcgZm9yCiAgICAgICBDYXRpbGluZSBhcyBpdHMgZ2VuZXJhbCwgYW5kIGhlLCBkcml2ZW4gaW5kZWVkIGludG8gZXhpbGUsIHdpbGwgZ28gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiwgYXMgdGhleSBzYXksIGFuZCBub3QgdG8gdGhhdCBjYW1wLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TyB0aGUgaGFyZCBsb3Qgb2YgdGhvc2UsIG5vdCBvbmx5IG9mIHRob3NlIHdobyBnb3Zlcm4sIGJ1dCBldmVuIG9mIHRob3NlIHdobyBzYXZlIHRoZQogICAgICAgcmVwdWJsaWMuIE5vdywgaWYgTHVjaXVzIENhdGlsaW5lLCBoZW1tZWQgaW4gYW5kIHJlbmRlcmVkIHBvd2VybGVzcyBieSBteSBjb3Vuc2VscywgYnkgbXkKICAgICAgIHRvaWxzLCBieSBteSBkYW5nZXJzLCBzaG91bGQgb24gYSBzdWRkZW4gYmVjb21lIGFsYXJtZWQsIHNob3VsZCBjaGFuZ2UgaGlzIGRlc2lnbnMsIHNob3VsZAogICAgICAgZGVzZXJ0IGhpcyBmcmllbmRzLCBzaG91bGQgYWJhbmRvbiBoaXMgZGVzaWduIG9mIG1ha2luZyB3YXIsIHNob3VsZCBjaGFuZ2UgaGlzIHBhdGggZnJvbSB0aGlzCiAgICAgICBjb3Vyc2Ugb2Ygd2lja2VkbmVzcyBhbmQgd2FyLCBhbmQgYmV0YWtlIGhpbXNlbGYgdG8gZmxpZ2h0IGFuZCBleGlsZSwgaGUgd2lsbCBub3QgYmUgc2FpZCB0bwogICAgICAgaGF2ZSBiZWVuIGRlcHJpdmVkIGJ5IG1lIG9mIHRoZSBhcm1zIG9mIGhpcyBhdWRhY2l0eSwgdG8gaGF2ZSBiZWVuIGFzdG91bmRlZCBhbmQgdGVycmlmaWVkIGJ5CiAgICAgICBteSBkaWxpZ2VuY2UsIHRvIGhhdmUgYmVlbiBkcml2ZW4gZnJvbSBoaXMgaG9wZSBhbmQgZnJvbSBoaXMgZW50ZXJwcmlzZSwgYnV0LCB1bmNvbmRlbW5lZCBhbmQKICAgICAgIGlubm9jZW50LCB0byBoYXZlIGJlZW4gZHJpdmVuIGludG8gYmFuaXNobWVudCBieSB0aGUgY29uc3VsIGJ5IHRocmVhdHMgYW5kIHZpb2xlbmNlOyBhbmQKICAgICAgIHRoZXJlIHdpbGwgYmUgc29tZSB3aG8gd2lsbCBzZWVrIHRvIGhhdmUgaGltIHRob3VnaHQgbm90IHdvcnRobGVzcyBidXQgdW5mb3J0dW5hdGUsIGFuZCBiZQogICAgICAgY29uc2lkZXJlZCBub3QgYSBtb3N0IGFjdGl2ZSBjb25zdWwsIGJ1dCBhIG1vc3QgY3J1ZWwgdHlyYW50LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gbm90IHVud2lsbGluZywgTyBSb21hbnMsIHRvIGVuZHVyZSB0aGlzIHN0b3JtIG9mIGZhbHNlIGFuZCB1bmp1c3QKICAgICAgIHVucG9wdWxhcml0eSBhcyBsb25nIGFzIHRoZSBkYW5nZXIgb2YgdGhpcyBob3JyaWJsZSBhbmQgbmVmYXJpb3VzIHdhciBpcyB3YXJkZWQgb2ZmIGZyb20geW91LgogICAgICAgTGV0IGhpbSBiZSBzYWlkIHRvIGJlIGJhbmlzaGVkIGJ5IG1lIGFzIGxvbmcgYXMgaGUgZ29lcyBpbnRvIGJhbmlzaG1lbnQ7IGJ1dCwgYmVsaWV2ZSBtZSwgaGUKICAgICAgIHdpbGwgbm90IGdvLiBJIHdpbGwgbmV2ZXIgYXNrIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBPIFJvbWFucywgZm9yIHRoZSBzYWtlIG9mIGxpZ2h0ZW5pbmcgbXkKICAgICAgIG93biB1bnBvcHVsYXJpdHksIGZvciB5b3UgdG8gaGVhciB0aGF0IEx1Y2l1cyBDYXRpbGluZSBpcyBsZWFkaW5nIGFuIGFybXkgb2YgZW5lbWllcywgYW5kIGlzCiAgICAgICBob3ZlcmluZyBhYm91dCBpbiBhcm1zOyBidXQgeWV0IGluIHRocmVlIGRheXMgeW91IHdpbGwgaGVhciBpdC4gQW5kIEkgbXVjaCBtb3JlIGZlYXIgdGhhdCBpdAogICAgICAgd2lsbCBiZSBvYmplY3RlZCB0byBtZSBzb21lIGRheSBvciBvdGhlciwgdGhhdCBJIGhhdmUgbGV0IGhpbSBlc2NhcGUsIHJhdGhlciB0aGFuIHRoYXQgSSBoYXZlCiAgICAgICBiYW5pc2hlZCBoaW0uIEJ1dCB3aGVuIHRoZXJlIGFyZSBtZW4gd2hvIHNheSBoZSBoYXMgYmVlbiBiYW5pc2hlZCBiZWNhdXNlIGhlIGhhcyBnb25lIGF3YXksCiAgICAgICB3aGF0IHdvdWxkIHRoZXNlIG1lbiBzYXkgaWYgaGUgaGFkIGJlZW4gcHV0IHRvIGRlYXRoPyA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gSSBhbSBub3QgdW53aWxsaW5nLCBPIFJvbWFucywgdG8gZW5kdXJlIHRoaXMgc3Rvcm0gb2YgZmFsc2UgYW5kIHVuanVzdAogICAgICAgdW5wb3B1bGFyaXR5IGFzIGxvbmcgYXMgdGhlIGRhbmdlciBvZiB0aGlzIGhvcnJpYmxlIGFuZCBuZWZhcmlvdXMgd2FyIGlzIHdhcmRlZCBvZmYgZnJvbSB5b3UuCiAgICAgICBMZXQgaGltIGJlIHNhaWQgdG8gYmUgYmFuaXNoZWQgYnkgbWUgYXMgbG9uZyBhcyBoZSBnb2VzIGludG8gYmFuaXNobWVudDsgYnV0LCBiZWxpZXZlIG1lLCBoZQogICAgICAgd2lsbCBub3QgZ28uIEkgd2lsbCBuZXZlciBhc2sgb2YgdGhlIGltbW9ydGFsIGdvZHMsIE8gUm9tYW5zLCBmb3IgdGhlIHNha2Ugb2YgbGlnaHRlbmluZyBteQogICAgICAgb3duIHVucG9wdWxhcml0eSwgZm9yIHlvdSB0byBoZWFyIHRoYXQgTHVjaXVzIENhdGlsaW5lIGlzIGxlYWRpbmcgYW4gYXJteSBvZiBlbmVtaWVzLCBhbmQgaXMKICAgICAgIGhvdmVyaW5nIGFib3V0IGluIGFybXM7IGJ1dCB5ZXQgaW4gdGhyZWUgZGF5cyB5b3Ugd2lsbCBoZWFyIGl0LiBBbmQgSSBtdWNoIG1vcmUgZmVhciB0aGF0IGl0CiAgICAgICB3aWxsIGJlIG9iamVjdGVkIHRvIG1lIHNvbWUgZGF5IG9yIG90aGVyLCB0aGF0IEkgaGF2ZSBsZXQgaGltIGVzY2FwZSwgcmF0aGVyIHRoYW4gdGhhdCBJIGhhdmUKICAgICAgIGJhbmlzaGVkIGhpbS4gQnV0IHdoZW4gdGhlcmUgYXJlIG1lbiB3aG8gc2F5IGhlIGhhcyBiZWVuIGJhbmlzaGVkIGJlY2F1c2UgaGUgaGFzIGdvbmUgYXdheSwKICAgICAgIHdoYXQgd291bGQgdGhlc2UgbWVuIHNheSBpZiBoZSBoYWQgYmVlbiBwdXQgdG8gZGVhdGg/IDwvdHJhbnNsYXRpb24+"
translation['2.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCB0aG9zZSBtZW4gd2hvIGtlZXAgc2F5aW5nIHRoYXQgQ2F0aWxpbmUgaXMgZ29pbmcgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPiBkbyBub3QgY29tcGxhaW4gb2YgdGhpcyBzbyBtdWNoIGFzIHRoZXkgZmVhciBpdDsgZm9yIHRoZXJlIGlzIG5vdAogICAgICAgb25lIG9mIHRoZW0gc28gaW5jbGluZWQgdG8gcGl0eSwgYXMgbm90IHRvIHByZWZlciB0aGF0IGhlIHNob3VsZCBnbyB0byBNYW5saXVzIHJhdGhlciB0aGFuIHRvCiAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg3ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODc4MSI+TWFyc2VpbGxlczwvcGxhY2VOYW1lPi4gQnV0IGhlLCBpZiBoZSBoYWQgbmV2ZXIgYmVmb3JlIHBsYW5uZWQKICAgICAgIHdoYXQgaGUgaXMgbm93IGRvaW5nLCB5ZXQgd291bGQgcmF0aGVyIGJlIHNsYWluIHdoaWxlIGxpdmluZyBhcyBhIGJhbmRpdCwgdGhhbiBsaXZlIGFzIGFuCiAgICAgICBleGlsZTsgYnV0IG5vdywgd2hlbiBub3RoaW5nIGhhcyBoYXBwZW5lZCB0byBoaW0gY29udHJhcnkgdG8gaGlzIG93biB3aXNoIGFuZAogICAgICAgZGVzaWduLOKAlGV4Y2VwdCwgaW5kZWVkLCB0aGF0IGhlIGhhcyBsZWZ0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiB3aGlsZSB3ZSBhcmUgYWxpdmUs4oCUbGV0IHVzIHdpc2ggcmF0aGVyIHRoYXQgaGUgbWF5IGdvIGludG8gZXhpbGUKICAgICAgIHRoYW4gY29tcGxhaW4gb2YgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+IGRvIG5vdCBjb21wbGFpbiBvZiB0aGlzIHNvIG11Y2ggYXMgdGhleSBmZWFyIGl0OyBmb3IgdGhlcmUgaXMgbm90CiAgICAgICBvbmUgb2YgdGhlbSBzbyBpbmNsaW5lZCB0byBwaXR5LCBhcyBub3QgdG8gcHJlZmVyIHRoYXQgaGUgc2hvdWxkIGdvIHRvIE1hbmxpdXMgcmF0aGVyIHRoYW4gdG8KICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwODc4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA4NzgxIj5NYXJzZWlsbGVzPC9wbGFjZU5hbWU+LiBCdXQgaGUsIGlmIGhlIGhhZCBuZXZlciBiZWZvcmUgcGxhbm5lZAogICAgICAgd2hhdCBoZSBpcyBub3cgZG9pbmcsIHlldCB3b3VsZCByYXRoZXIgYmUgc2xhaW4gd2hpbGUgbGl2aW5nIGFzIGEgYmFuZGl0LCB0aGFuIGxpdmUgYXMgYW4KICAgICAgIGV4aWxlOyBidXQgbm93LCB3aGVuIG5vdGhpbmcgaGFzIGhhcHBlbmVkIHRvIGhpbSBjb250cmFyeSB0byBoaXMgb3duIHdpc2ggYW5kCiAgICAgICBkZXNpZ24s4oCUZXhjZXB0LCBpbmRlZWQsIHRoYXQgaGUgaGFzIGxlZnQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+IHdoaWxlIHdlIGFyZSBhbGl2ZSzigJRsZXQgdXMgd2lzaCByYXRoZXIgdGhhdCBoZSBtYXkgZ28gaW50byBleGlsZQogICAgICAgdGhhbiBjb21wbGFpbiBvZiBpdC4gPC90cmFuc2xhdGlvbj4="
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aHkgYXJlIHdlIHNwZWFraW5nIHNvIGxvbmcgYWJvdXQgb25lIGVuZW15OyBhbmQgYWJvdXQgdGhhdCBlbmVteSB3aG8gbm93IGF2b3dzIHRoYXQgaGUKICAgICAgIGlzIG9uZTsgYW5kIHdob20gSSBub3cgZG8gbm90IGZlYXIsIGJlY2F1c2UsIGFzIEkgaGF2ZSBhbHdheXMgd2lzaGVkLCBhIHdhbGwgaXMgYmV0d2VlbiB1czsKICAgICAgIGFuZCBhcmUgc2F5aW5nIG5vdGhpbmcgYWJvdXQgdGhvc2Ugd2hvIGRpc3NlbWJsZSwgd2hvIHJlbWFpbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4sIHdobyBhcmUgYW1vbmcgdXM/IFdob20sIGluZGVlZCwgaWYgaXQgd2VyZSBieSBhbnkgbWVhbnMgcG9zc2libGUsIEkKICAgICAgIHNob3VsZCBiZSBhbnhpb3VzIG5vdCBzbyBtdWNoIHRvIGNoYXN0aXNlIGFzIHRvIGN1cmUsIGFuZCB0byBtYWtlIGZyaWVuZGx5IHRvIHRoZSByZXB1YmxpYzsKICAgICAgIG5vciwgaWYgdGhleSB3aWxsIGxpc3RlbiB0byBtZSwgZG8gSSBxdWl0ZSBrbm93IHdoeSB0aGF0IG1heSBub3QgYmUuIEZvciBJIHdpbGwgdGVsbCB5b3UsIE8KICAgICAgIFJvbWFucywgb2Ygd2hhdCBjbGFzc2VzIG9mIG1lbiB0aG9zZSBmb3JjZXMgYXJlIG1hZGUgdXAsIGFuZCB0aGVuLCBpZiBJIGNhbiwgSSB3aWxsIGFwcGx5IHRvCiAgICAgICBlYWNoIHRoZSBtZWRpY2luZSBvZiBteSBhZHZpY2UgYW5kIHBlcnN1YXNpb24uIDwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxSb21lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxSb21lIj5Sb21lPC9wbGFjZU5hbWU+LCB3aG8gYXJlIGFtb25nIHVzPyBXaG9tLCBpbmRlZWQsIGlmIGl0IHdlcmUgYnkgYW55IG1lYW5zIHBvc3NpYmxlLCBJCiAgICAgICBzaG91bGQgYmUgYW54aW91cyBub3Qgc28gbXVjaCB0byBjaGFzdGlzZSBhcyB0byBjdXJlLCBhbmQgdG8gbWFrZSBmcmllbmRseSB0byB0aGUgcmVwdWJsaWM7CiAgICAgICBub3IsIGlmIHRoZXkgd2lsbCBsaXN0ZW4gdG8gbWUsIGRvIEkgcXVpdGUga25vdyB3aHkgdGhhdCBtYXkgbm90IGJlLiBGb3IgSSB3aWxsIHRlbGwgeW91LCBPCiAgICAgICBSb21hbnMsIG9mIHdoYXQgY2xhc3NlcyBvZiBtZW4gdGhvc2UgZm9yY2VzIGFyZSBtYWRlIHVwLCBhbmQgdGhlbiwgaWYgSSBjYW4sIEkgd2lsbCBhcHBseSB0bwogICAgICAgZWFjaCB0aGUgbWVkaWNpbmUgb2YgbXkgYWR2aWNlIGFuZCBwZXJzdWFzaW9uLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgb25lIGNsYXNzIG9mIHRoZW0sIHdobywgd2l0aCBlbm9ybW91cyBkZWJ0cywKICAgICAgIGhhdmUgc3RpbGwgZ3JlYXRlciBwb3NzZXNzaW9ucywgYW5kIHdobyBjYW4gYnkgbm8gbWVhbnMgYmUgZGV0YWNoZWQgZnJvbSB0aGVpciBhZmZlY3Rpb24gdG8KICAgICAgIHRoZW0uIE9mIHRoZXNlIG1lbiB0aGUgYXBwZWFyYW5jZSBpcyBtb3N0IHJlc3BlY3RhYmxlLCBmb3IgdGhleSBhcmUgd2VhbHRoeSwgYnV0IHRoZWlyCiAgICAgICBpbnRlbnRpb24gYW5kIHRoZWlyIGNhdXNlIGFyZSBtb3N0IHNoYW1lbGVzcy4gV2lsbCB5b3UgYmUgcmljaCBpbiBsYW5kcywgaW4gaG91c2VzLCBpbiBtb25leSwKICAgICAgIGluIHNsYXZlcywgaW4gYWxsIHRoaW5ncywgYW5kIHlldCBoZXNpdGF0ZSB0byBkaW1pbmlzaCB5b3VyIHBvc3Nlc3Npb25zIHRvIGFkZCB0byB5b3VyCiAgICAgICBjcmVkaXQ/IFdoYXQgYXJlIHlvdSBleHBlY3Rpbmc/IFdhcj8gV2hhdCEgaW4gdGhlIGRldmFzdGF0aW9uIG9mIGFsbCB0aGluZ3MsIGRvIHlvdSBiZWxpZXZlCiAgICAgICB0aGF0IHlvdXIgb3duIHBvc3Nlc3Npb25zIHdpbGwgYmUgaGVsZCBzYWNyZWQ/IGRvIHlvdSBleHBlY3QgYW4gYWJvbGl0aW9uIG9mIGRlYnRzPyBUaGV5IGFyZQogICAgICAgbWlzdGFrZW4gd2hvIGV4cGVjdCB0aGF0IGZyb20gQ2F0aWxpbmUuIFRoZXJlIG1heSBiZSBzY2hlZHVsZXMgbWFkZSBvdXQsIG93aW5nIHRvIG15CiAgICAgICBleGVydGlvbnMsIGJ1dCB0aGV5IHdpbGwgYmUgb25seSBjYXRhbG9ndWVzIG9mIHNhbGUuIE5vciBjYW4gdGhvc2Ugd2hvIGhhdmUgcG9zc2Vzc2lvbnMgYmUKICAgICAgIHNhZmUgYnkgYW55IG90aGVyIG1lYW5zOyBhbmQgaWYgdGhleSBoYWQgYmVlbiB3aWxsaW5nIHRvIGFkb3B0IHRoaXMgcGxhbiBlYXJsaWVyLCBhbmQgbm90LCBhcwogICAgICAgaXMgdmVyeSBmb29saXNoLCB0byBzdHJ1Z2dsZSBvbiBhZ2FpbnN0IHVzdXJ5IHdpdGggdGhlIHByb2ZpdHMgb2YgdGhlaXIgZmFybXMsIHdlIHNob3VsZCBoYXZlCiAgICAgICB0aGVtIG5vdyByaWNoZXIgYW5kIGJldHRlciBjaXRpemVucy4gQnV0IEkgdGhpbmsgdGhlc2UgbWVuIGFyZSB0aGUgbGVhc3Qgb2YgYWxsIHRvIGJlCiAgICAgICBkcmVhZGVkLCBiZWNhdXNlIHRoZXkgY2FuIGVpdGhlciBiZSBwZXJzdWFkZWQgdG8gYWJhbmRvbiB0aGVpciBvcGluaW9ucywgb3IgaWYgdGhleSBjbGluZyB0bwogICAgICAgdGhlbSwgdGhleSBzZWVtIHRvIG1lIG1vcmUgbGlrZWx5IHRvIGZvcm0gd2lzaGVzIGFnYWluc3QgdGhlIHJlcHVibGljIHRoYW4gdG8gYmVhciBhcm1zCiAgICAgICBhZ2FpbnN0IGl0LiA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlcmUgaXMgb25lIGNsYXNzIG9mIHRoZW0sIHdobywgd2l0aCBlbm9ybW91cyBkZWJ0cywKICAgICAgIGhhdmUgc3RpbGwgZ3JlYXRlciBwb3NzZXNzaW9ucywgYW5kIHdobyBjYW4gYnkgbm8gbWVhbnMgYmUgZGV0YWNoZWQgZnJvbSB0aGVpciBhZmZlY3Rpb24gdG8KICAgICAgIHRoZW0uIE9mIHRoZXNlIG1lbiB0aGUgYXBwZWFyYW5jZSBpcyBtb3N0IHJlc3BlY3RhYmxlLCBmb3IgdGhleSBhcmUgd2VhbHRoeSwgYnV0IHRoZWlyCiAgICAgICBpbnRlbnRpb24gYW5kIHRoZWlyIGNhdXNlIGFyZSBtb3N0IHNoYW1lbGVzcy4gV2lsbCB5b3UgYmUgcmljaCBpbiBsYW5kcywgaW4gaG91c2VzLCBpbiBtb25leSwKICAgICAgIGluIHNsYXZlcywgaW4gYWxsIHRoaW5ncywgYW5kIHlldCBoZXNpdGF0ZSB0byBkaW1pbmlzaCB5b3VyIHBvc3Nlc3Npb25zIHRvIGFkZCB0byB5b3VyCiAgICAgICBjcmVkaXQ/IFdoYXQgYXJlIHlvdSBleHBlY3Rpbmc/IFdhcj8gV2hhdCEgaW4gdGhlIGRldmFzdGF0aW9uIG9mIGFsbCB0aGluZ3MsIGRvIHlvdSBiZWxpZXZlCiAgICAgICB0aGF0IHlvdXIgb3duIHBvc3Nlc3Npb25zIHdpbGwgYmUgaGVsZCBzYWNyZWQ/IGRvIHlvdSBleHBlY3QgYW4gYWJvbGl0aW9uIG9mIGRlYnRzPyBUaGV5IGFyZQogICAgICAgbWlzdGFrZW4gd2hvIGV4cGVjdCB0aGF0IGZyb20gQ2F0aWxpbmUuIFRoZXJlIG1heSBiZSBzY2hlZHVsZXMgbWFkZSBvdXQsIG93aW5nIHRvIG15CiAgICAgICBleGVydGlvbnMsIGJ1dCB0aGV5IHdpbGwgYmUgb25seSBjYXRhbG9ndWVzIG9mIHNhbGUuIE5vciBjYW4gdGhvc2Ugd2hvIGhhdmUgcG9zc2Vzc2lvbnMgYmUKICAgICAgIHNhZmUgYnkgYW55IG90aGVyIG1lYW5zOyBhbmQgaWYgdGhleSBoYWQgYmVlbiB3aWxsaW5nIHRvIGFkb3B0IHRoaXMgcGxhbiBlYXJsaWVyLCBhbmQgbm90LCBhcwogICAgICAgaXMgdmVyeSBmb29saXNoLCB0byBzdHJ1Z2dsZSBvbiBhZ2FpbnN0IHVzdXJ5IHdpdGggdGhlIHByb2ZpdHMgb2YgdGhlaXIgZmFybXMsIHdlIHNob3VsZCBoYXZlCiAgICAgICB0aGVtIG5vdyByaWNoZXIgYW5kIGJldHRlciBjaXRpemVucy4gQnV0IEkgdGhpbmsgdGhlc2UgbWVuIGFyZSB0aGUgbGVhc3Qgb2YgYWxsIHRvIGJlCiAgICAgICBkcmVhZGVkLCBiZWNhdXNlIHRoZXkgY2FuIGVpdGhlciBiZSBwZXJzdWFkZWQgdG8gYWJhbmRvbiB0aGVpciBvcGluaW9ucywgb3IgaWYgdGhleSBjbGluZyB0bwogICAgICAgdGhlbSwgdGhleSBzZWVtIHRvIG1lIG1vcmUgbGlrZWx5IHRvIGZvcm0gd2lzaGVzIGFnYWluc3QgdGhlIHJlcHVibGljIHRoYW4gdG8gYmVhciBhcm1zCiAgICAgICBhZ2FpbnN0IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['2.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGFub3RoZXIgY2xhc3Mgb2YgdGhlbSwgd2hvLCBhbHRob3VnaCB0aGV5IGFyZSBoYXJhc3NlZCBieSBkZWJ0LCB5ZXQgYXJlIGV4cGVjdGluZwogICAgICAgc3VwcmVtZSBwb3dlcjsgdGhleSB3aXNoIHRvIGJlY29tZSBtYXN0ZXJzLiBUaGV5IHRoaW5rIHRoYXQgd2hlbiB0aGUgcmVwdWJsaWMgaXMgaW4gY29uZnVzaW9uCiAgICAgICB0aGV5IG1heSBnYWluIHRob3NlIGhvbm91cnMgd2hpY2ggdGhleSBkZXNwYWlyIG9mIHdoZW4gaXQgaXMgaW4gdHJhbnF1aWxsaXR5LiBBbmQgdGhleSBtdXN0LAogICAgICAgSSB0aGluaywgYmUgdG9sZCB0aGUgc2FtZSBhcyBldmVyeSBvbmUgZWxzZSzigJR0byBkZXNwYWlyIG9mIG9idGFpbmluZyB3aGF0IHRoZXkgYXJlCiAgICAgICBhaW1pbmcgYXQ7IHRoYXQgaW4gdGhlIGZpcnN0IHBsYWNlLCBJIG15c2VsZiBhbSB3YXRjaGZ1bCBmb3IsIGFtIHByZXNlbnQgdG8sIGFtIHByb3ZpZGluZyBmb3IKICAgICAgIHRoZSByZXB1YmxpYy4gQmVzaWRlcyB0aGF0LCB0aGVyZSBpcyBhIGhpZ2ggc3Bpcml0IGluIHRoZSB2aXJ0dW91cyBjaXRpemVucywgZ3JlYXQgdW5hbmltaXR5LAogICAgICAgZ3JlYXQgbnVtYmVycywgYW5kIGFsc28gYSBncmVhdCBib2R5IG9mIHRyb29wcy4gQWJvdmUgYWxsIHRoYXQsIHRoZSBpbW1vcnRhbCBnb2RzIHdpbGwgc3RhbmQKICAgICAgIGJ5IGFuZCBicmluZyBhaWQgdG8gdGhpcyBpbnZpbmNpYmxlIG5hdGlvbiwgdGhpcyBtb3N0IGlsbHVzdHJpb3VzIGVtcGlyZSwgdGhpcyBtb3N0IGJlYXV0aWZ1bAogICAgICAgY2l0eSwgYWdhaW5zdCBzdWNoIHdpY2tlZCB2aW9sZW5jZS4gQW5kIGlmIHRoZXkgaGFkIGFscmVhZHkgZ290IHRoYXQgd2hpY2ggdGhleSB3aXRoIHRoZQogICAgICAgZ3JlYXRlc3QgbWFkbmVzcyB3aXNoIGZvciwgZG8gdGhleSB0aGluayB0aGF0IGluIHRoZSBhc2hlcyBvZiB0aGUgY2l0eSBhbmQgYmxvb2Qgb2YgdGhlCiAgICAgICBjaXRpemVucywgd2hpY2ggaW4gdGhlaXIgd2lja2VkIGFuZCBpbmZhbW91cyBoZWFydHMgdGhleSBkZXNpcmUsIHRoZXkgd2lsbCBiZWNvbWUgY29uc3VscyBhbmQKICAgICAgIGRpY3RhdG9ycyBhbmQgZXZlbiBraW5ncz8gRG8gdGhleSBub3Qgc2VlIHRoYXQgdGhleSBhcmUgd2lzaGluZyBmb3IgdGhhdCB3aGljaCwgaWYgdGhleSB3ZXJlCiAgICAgICB0byBvYnRhaW4gaXQsIG11c3QgYmUgZ2l2ZW4gdXAgdG8gc29tZSBmdWdpdGl2ZSBzbGF2ZSwgb3IgdG8gc29tZSBnbGFkaWF0b3I/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.9.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIHRoaXJkIGNsYXNzLCBhbHJlYWR5IHRvdWNoZWQgYnkgYWdlLCBidXQgc3RpbGwgdmlnb3JvdXMgZnJvbSBjb25zdGFudCBleGVyY2lzZTsKICAgICAgIG9mIHdoaWNoIGNsYXNzIGlzIE1hbmxpdXMgaGltc2VsZjsgd2hvbSBDYXRpbGluZSBpcyBub3cgc3VjY2VlZGluZy4gVGhlc2UgYXJlIG1lbiBvZiB0aG9zZQogICAgICAgY29sb25pZXMgd2hpY2ggU3VsbGEgZXN0YWJsaXNoZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxGYWVzdWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRmFlc3VsYWUiPkZhZXN1bGFlPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggSSBrbm93IHRvIGJlIGNvbXBvc2VkLCBvbiB0aGUgd2hvbGUsIG9mIGV4Y2VsbGVudCBjaXRpemVucyBhbmQgYnJhdmUgbWVuOyBidXQgeWV0IHRoZXNlCiAgICAgICBhcmUgY29sb25pc3RzLCB3aG8sIGZyb20gYmVjb21pbmcgcG9zc2Vzc2VkIG9mIHVuZXhwZWN0ZWQgYW5kIHN1ZGRlbiB3ZWFsdGgsIGJvYXN0IHRoZW1zZWx2ZXMKICAgICAgIGV4dHJhdmFnYW50bHkgYW5kIGluc29sZW50bHk7IHRoZXNlIG1lbiwgd2hpbGUgdGhleSBidWlsZCBsaWtlIHJpY2ggbWVuLCB3aGlsZSB0aGV5IGRlbGlnaHQKICAgICAgIGluIGZhcm1zLCBpbiBsaXR0ZXJzLCBpbiB2YXN0IGZhbWlsaWVzIG9mIHNsYXZlcywgaW4gbHV4dXJpb3VzIGJhbnF1ZXRzLCBoYXZlIGluY3VycmVkIHN1Y2gKICAgICAgIGdyZWF0IGRlYnRzLCB0aGF0LCBpZiB0aGV5IHdvdWxkIGJlIHNhdmVkLCB0aGV5IG11c3QgcmFpc2UgU3VsbGEgZnJvbSB0aGUgZGVhZDsgYW5kIHRoZXkgaGF2ZQogICAgICAgZXZlbiBleGNpdGVkIHNvbWUgY291bnRyeW1lbiwgcG9vciBhbmQgbmVlZHkgbWVuLCB0byBlbnRlcnRhaW4gdGhlIHNhbWUgaG9wZXMgb2YgcGx1bmRlciBhcwogICAgICAgdGhlbXNlbHZlcy4gQW5kIGFsbCB0aGVzZSBtZW4sIE8gUm9tYW5zLCBJIHBsYWNlIGluIHRoZSBzYW1lIGNsYXNzIG9mIHJvYmJlcnMgYW5kIGJhbmRpdHRpLgogICAgICAgQnV0LCBJIHdhcm4gdGhlbSwgbGV0IHRoZW0gY2Vhc2UgdG8gYmUgbWFkLCBhbmQgdG8gdGhpbmsgb2YgcHJvc2NyaXB0aW9ucyBhbmQgZGljdGF0b3JzaGlwczsKICAgICAgIGZvciBzdWNoIGEgaG9ycm9yIG9mIHRoZXNlIHRpbWVzIGlzIGluZ3JhaW5lZCBpbnRvIHRoZSBjaXR5LCB0aGF0IG5vdCBldmVuIG1lbiwgYnV0IGl0IHNlZW1zCiAgICAgICB0byBtZSB0aGF0IGV2ZW4gdGhlIHZlcnkgY2F0dGxlIHdvdWxkIHJlZnVzZSB0byBiZWFyIHRoZW0gYWdhaW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxGYWVzdWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRmFlc3VsYWUiPkZhZXN1bGFlPC9wbGFjZU5hbWU+LAogICAgICAgd2hpY2ggSSBrbm93IHRvIGJlIGNvbXBvc2VkLCBvbiB0aGUgd2hvbGUsIG9mIGV4Y2VsbGVudCBjaXRpemVucyBhbmQgYnJhdmUgbWVuOyBidXQgeWV0IHRoZXNlCiAgICAgICBhcmUgY29sb25pc3RzLCB3aG8sIGZyb20gYmVjb21pbmcgcG9zc2Vzc2VkIG9mIHVuZXhwZWN0ZWQgYW5kIHN1ZGRlbiB3ZWFsdGgsIGJvYXN0IHRoZW1zZWx2ZXMKICAgICAgIGV4dHJhdmFnYW50bHkgYW5kIGluc29sZW50bHk7IHRoZXNlIG1lbiwgd2hpbGUgdGhleSBidWlsZCBsaWtlIHJpY2ggbWVuLCB3aGlsZSB0aGV5IGRlbGlnaHQKICAgICAgIGluIGZhcm1zLCBpbiBsaXR0ZXJzLCBpbiB2YXN0IGZhbWlsaWVzIG9mIHNsYXZlcywgaW4gbHV4dXJpb3VzIGJhbnF1ZXRzLCBoYXZlIGluY3VycmVkIHN1Y2gKICAgICAgIGdyZWF0IGRlYnRzLCB0aGF0LCBpZiB0aGV5IHdvdWxkIGJlIHNhdmVkLCB0aGV5IG11c3QgcmFpc2UgU3VsbGEgZnJvbSB0aGUgZGVhZDsgYW5kIHRoZXkgaGF2ZQogICAgICAgZXZlbiBleGNpdGVkIHNvbWUgY291bnRyeW1lbiwgcG9vciBhbmQgbmVlZHkgbWVuLCB0byBlbnRlcnRhaW4gdGhlIHNhbWUgaG9wZXMgb2YgcGx1bmRlciBhcwogICAgICAgdGhlbXNlbHZlcy4gQW5kIGFsbCB0aGVzZSBtZW4sIE8gUm9tYW5zLCBJIHBsYWNlIGluIHRoZSBzYW1lIGNsYXNzIG9mIHJvYmJlcnMgYW5kIGJhbmRpdHRpLgogICAgICAgQnV0LCBJIHdhcm4gdGhlbSwgbGV0IHRoZW0gY2Vhc2UgdG8gYmUgbWFkLCBhbmQgdG8gdGhpbmsgb2YgcHJvc2NyaXB0aW9ucyBhbmQgZGljdGF0b3JzaGlwczsKICAgICAgIGZvciBzdWNoIGEgaG9ycm9yIG9mIHRoZXNlIHRpbWVzIGlzIGluZ3JhaW5lZCBpbnRvIHRoZSBjaXR5LCB0aGF0IG5vdCBldmVuIG1lbiwgYnV0IGl0IHNlZW1zCiAgICAgICB0byBtZSB0aGF0IGV2ZW4gdGhlIHZlcnkgY2F0dGxlIHdvdWxkIHJlZnVzZSB0byBiZWFyIHRoZW0gYWdhaW4uIDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlIGlzIGEgZm91cnRoIGNsYXNzLCB2YXJpb3VzLCBwcm9taXNjdW91cyBhbmQgdHVyYnVsZW50OyB3aG8gaW5kZWVkIGFyZSBub3cKICAgICAgIG92ZXJ3aGVsbWVkOyB3aG8gd2lsbCBuZXZlciByZWNvdmVyIHRoZW1zZWx2ZXM7IHdobywgcGFydGx5IGZyb20gaW5kb2xlbmNlLCBwYXJ0bHkgZnJvbQogICAgICAgbWFuYWdpbmcgdGhlaXIgYWZmYWlycyBiYWRseSwgcGFydGx5IGZyb20gZXh0cmF2YWdhbmNlLCBhcmUgZW1iYXJyYXNzZWQgYnkgb2xkIGRlYnRzOyBhbmQKICAgICAgIHdvcm4gb3V0IHdpdGggYmFpbCBib25kcywgYW5kIGp1ZGdtZW50cywgYW5kIHNlaXp1cmVzIG9mIHRoZWlyIGdvb2RzLCBhcmUgc2FpZCB0byBiZSBiZXRha2luZwogICAgICAgdGhlbXNlbHZlcyBpbiBudW1iZXJzIHRvIHRoYXQgY2FtcCBib3RoIGZyb20gdGhlIGNpdHkgYW5kIHRoZSBjb3VudHJ5LiBUaGVzZSBtZW4gSSB0aGluayBub3QKICAgICAgIHNvIG11Y2ggYWN0aXZlIHNvbGRpZXJzIGFzIGxhenkgaW5zb2x2ZW50czsgd2hvLCBpZiB0aGV5IGNhbm5vdCBzdGFuZCBhdCBmaXJzdCwgbWF5IGZhbGwsIGJ1dAogICAgICAgZmFsbCBzbywgdGhhdCBub3Qgb25seSB0aGUgY2l0eSBidXQgZXZlbiB0aGVpciBuZWFyZXN0IG5laWdoYm91cnMga25vdyBub3RoaW5nIG9mIGl0LiBGb3IgSQogICAgICAgZG8gbm90IHVuZGVyc3RhbmQgd2h5LCBpZiB0aGV5IGNhbm5vdCBsaXZlIHdpdGggaG9ub3VyLCB0aGV5IHNob3VsZCB3aXNoIHRvIGRpZSBzaGFtZWZ1bGx5OwogICAgICAgb3Igd2lseSB0aGV5IHRoaW5rIHRoZXkgc2hhbGwgcGVyaXNoIHdpdGggbGVzcyBwYWluIGluIGEgY3Jvd2QsIHRoYW4gaWYgdGhleSBwZXJpc2ggYnkKICAgICAgIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIGZpZnRoIGNsYXNzLCBvZiBwYXJyaWNpZGVzLCBhc3Nhc3NpbnMsIGluIHNob3J0IG9mIGFsbCBpbmZhbW91cyBjaGFyYWN0ZXJzLCB3aG9tCiAgICAgICBJIGRvIG5vdCB3aXNoIHRvIHJlY2FsbCBmcm9tIENhdGlsaW5lLCBhbmQgaW5kZWVkIHRoZXkgY2Fubm90IGJlIHNlcGFyYXRlZCBmcm9tIGhpbS4gTGV0IHRoZW0KICAgICAgIHBlcmlzaCBpbiB0aGVpciB3aWNrZWQgd2FyLCBzaW5jZSB0aGV5IGFyZSBzbyBudW1lcm91cyB0aGF0IGEgcHJpc29uIGNhbm5vdCBjb250YWluIHRoZW0uIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBhIGxhc3QgY2xhc3MsIGxhc3Qgbm90IG9ubHkgaW4gbnVtYmVyIGJ1dCBpbiB0aGUgc29ydCBvZiBtZW4gYW5kIGluIHRoZWlyIHdheSBvZgogICAgICAgbGlmZTsgdGhlIGVzcGVjaWFsIGJvZHktZ3VhcmQgb2YgQ2F0aWxpbmUsIG9mIGhpcyBsZXZ5aW5nOyB5ZXMsIHRoZSBmcmllbmRzIG9mIGhpcyBlbWJyYWNlcwogICAgICAgYW5kIG9mIGhpcyBib3NvbTsgd2hvbSB5b3Ugc2VlIHdpdGggY2FyZWZ1bGx5IGNvbWJlZCBoYWlyLCBnbG9zc3ksIGJlYXJkbGVzcywgb3Igd2l0aAogICAgICAgd2VsbC10cmltbWVkIGJlYXJkczsgd2l0aCB0dW5pY3Mgd2l0aCBzbGVldmVzLCBvciByZWFjaGluZyB0byB0aGUgYW5rbGVzOyBjbG90aGVkIHdpdGggdmVpbHMsCiAgICAgICBub3Qgd2l0aCByb2JlczsgYWxsIHRoZSBpbmR1c3RyeSBvZiB3aG9zZSBsaWZlLCBhbGwgdGhlIGxhYm91ciBvZiB3aG9zZSB3YXRjaGZ1bG5lc3MsIGlzCiAgICAgICBleHBlbmRlZCBpbiBzdXBwZXJzIGxhc3RpbmcgdGlsbCBkYXlicmVhay4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiB0aGVzZSBiYW5kcyBhcmUgYWxsIHRoZSBnYW1ibGVycywgYWxsIHRoZSBhZHVsdGVyZXJzLCBhbGwgdGhlIHVuY2xlYW4gYW5kIHNoYW1lbGVzcwogICAgICAgY2l0aXplbnMuIFRoZXNlIGJveXMsIHNvIHdpdHR5IGFuZCBkZWxpY2F0ZSwgaGF2ZSBsZWFybnQgbm90IG9ubHkgdG8gbG92ZSBhbmQgdG8gYmUgbG92ZWQsCiAgICAgICBub3Qgb25seSB0byBzaW5nIGFuZCB0byBkYW5jZSwgYnV0IGFsc28gdG8gYnJhbmRpc2ggZGFnZ2VycyBhbmQgdG8gYWRtaW5pc3RlciBwb2lzb25zOyBhbmQKICAgICAgIHVubGVzcyB0aGV5IGFyZSBkcml2ZW4gb3V0LCB1bmxlc3MgdGhleSBkaWUsIGV2ZW4gc2hvdWxkIENhdGlsaW5lIGRpZSwgSSB3YXJuIHlvdSB0aGF0IHRoZQogICAgICAgc2Nob29sIG9mIENhdGlsaW5lIHdvdWxkIGV4aXN0IGluIHRoZSByZXB1YmxpYy4gQnV0IHdoYXQgZG8gdGhvc2Ugd3JldGNoZXMgd2FudD8gQXJlIHRoZXkKICAgICAgIGdvaW5nIHRvIHRha2UgdGhlaXIgd2l2ZXMgd2l0aCB0aGVtIHRvIHRoZSBjYW1wPyBob3cgY2FuIHRoZXkgZG8gd2l0aG91dCB0aGVtLCBlc3BlY2lhbGx5IGluCiAgICAgICB0aGVzZSBuaWdodHM/IGFuZCBob3cgd2lsbCB0aGV5IGVuZHVyZSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlc2UgZnJvc3RzLCBhbmQgdGhpcyBzbm93PyB1bmxlc3MgdGhleSB0aGluayB0aGF0IHRoZXkgd2lsbAogICAgICAgYmVhciB0aGUgd2ludGVyIG1vcmUgZWFzaWx5IGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gaW4gdGhlIGhhYml0IG9mIGRhbmNpbmcgbmFrZWQgYXQgdGhlaXIKICAgICAgIGZlYXN0cy4gTyB3YXIgbXVjaCB0byBiZSBkcmVhZGVkLCB3aGVuIENhdGlsaW5lIGlzIGdvaW5nIHRvIGhhdmUgaGlzIGJvZHlndWFyZCBvZgogICAgICAgcHJvc3RpdHV0ZXMhIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDg1MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwODUzMSI+QXBlbm5pbmVzPC9wbGFjZU5hbWU+LCBhbmQgdGhlc2UgZnJvc3RzLCBhbmQgdGhpcyBzbm93PyB1bmxlc3MgdGhleSB0aGluayB0aGF0IHRoZXkgd2lsbAogICAgICAgYmVhciB0aGUgd2ludGVyIG1vcmUgZWFzaWx5IGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gaW4gdGhlIGhhYml0IG9mIGRhbmNpbmcgbmFrZWQgYXQgdGhlaXIKICAgICAgIGZlYXN0cy4gTyB3YXIgbXVjaCB0byBiZSBkcmVhZGVkLCB3aGVuIENhdGlsaW5lIGlzIGdvaW5nIHRvIGhhdmUgaGlzIGJvZHlndWFyZCBvZgogICAgICAgcHJvc3RpdHV0ZXMhIDwvdHJhbnNsYXRpb24+"
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.11.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFycmF5IG5vdywgTyBSb21hbnMsIGFnYWluc3QgdGhlc2Ugc3BsZW5kaWQgdHJvb3BzIG9mIENhdGlsaW5lLCB5b3VyIGd1YXJkcyBhbmQgeW91cgogICAgICAgYXJtaWVzOyBhbmQgZmlyc3Qgb2YgYWxsIG9wcG9zZSB0byB0aGF0IHdvcm4tb3V0IGFuZCB3b3VuZGVkIGdsYWRpYXRvciB5b3VyIGNvbnN1bHMgYW5kCiAgICAgICBnZW5lcmFsczsgdGhlbiBhZ2FpbnN0IHRoYXQgYmFuaXNoZWQgYW5kIGVuZmVlYmxlZCB0cm9vcCBvZiBydWluZWQgbWVuIGxlYWQgb3V0IHRoZSBmbG93ZXIKICAgICAgIGFuZCBzdHJlbmd0aCBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4gaW5zdGFudGx5IHRoZSBjaXRpZXMgb2YKICAgICAgIHRoZSBjb2xvbmllcyBhbmQgbXVuaWNpcGFsaXRpZXMgd2lsbCBtYXRjaCB0aGUgcnVzdGljIG1vdW5kcyBvZiBDYXRpbGluZTsgYW5kIEkgd2lsbCBub3QKICAgICAgIGNvbmRlc2NlbmQgdG8gY29tcGFyZSB0aGUgcmVzdCBvZiB5b3VyIHRyb29wcyBhbmQgZXF1aXBtZW50cyBhbmQgZ3VhcmRzIHdpdGggdGhlIHdhbnQgYW5kCiAgICAgICBkZXN0aXR1dGlvbiBvZiB0aGF0IGhpZ2h3YXltYW4uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmLCBvbWl0dGluZyBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBpbiB3aGljaCB3ZSBhcmUgcmljaCBhbmQgb2Ygd2hpY2ggaGUgaXMgZGVzdGl0dXRlLOKAlHRoZSBzZW5hdGUsIHRoZSBSb21hbgogICAgICAga25pZ2h0cywgdGhlIHBlb3BsZSwgdGhlIGNpdHksIHRoZSB0cmVhc3VyeSwgdGhlIHJldmVudWVzLCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGtleT0idGduLDEwMDAwODAiPkl0YWx5PC9wbGFjZU5hbWU+LCBhbGwgdGhlIHByb3ZpbmNlcywgZm9yZWlnbiBuYXRpb25zLOKAlGlmIEkgc2F5LCBvbWl0dGluZyBhbGwKICAgICAgIHRoZXNlIHRoaW5ncywgd2UgY2hvb3NlIHRvIGNvbXBhcmUgdGhlIGNhdXNlcyB0aGVtc2VsdmVzIHdoaWNoIGFyZSBvcHBvc2VkIHRvIG9uZSBhbm90aGVyLCB3ZQogICAgICAgbWF5IHVuZGVyc3RhbmQgZnJvbSB0aGF0IGFsb25lIGhvdyB0aG9yb3VnaGx5IHByb3N0cmF0ZSB0aGV5IGFyZS4gRm9yIG9uIHRoZSBvbmUgc2lkZSBhcmUKICAgICAgIGZpZ2h0aW5nIG1vZGVzdHksIG9uIHRoZSBvdGhlciB3YW50b25uZXNzOyBvbiB0aGUgb25lIGNoYXN0aXR5LCBvbiB0aGUgb3RoZXIgdW5jbGVhbm5lc3M7IG9uCiAgICAgICB0aGUgb25lIGhvbmVzdHksIG9uIHRoZSBvdGhlciBmcmF1ZDsgb24gdGhlIG9uZSBwaWV0eSwgb24gdGhlIG90aGVyIHdpY2tlZG5lc3M7IG9uIHRoZSBvbmUKICAgICAgIGNvbnNpc3RlbmN5LCBvbiB0aGUgb3RoZXIgaW5zYW5pdHk7IG9uIHRoZSBvbmUgaG9ub3VyLCBvbiB0aGUgb3RoZXIgYmFzZW5lc3M7IG9uIHRoZSBvbmUKICAgICAgIGNvbnRpbmVuY2UsIG9uIHRoZSBvdGhlciBsdXN0OyBpbiBzaG9ydCwgZXF1aXR5LCB0ZW1wZXJhbmNlLCBmb3J0aXR1ZGUsIHBydWRlbmNlLCBhbGwgdGhlCiAgICAgICB2aXJ0dWVzIGNvbnRlbmQgYWdhaW5zdCBpbmlxdWl0eSB3aXRoIGx1eHVyeSwgYWdhaW5zdCBpbmRvbGVuY2UsIGFnYWluc3QgcmFzaG5lc3MsIGFnYWluc3QKICAgICAgIGFsbCB0aGUgdmljZXM7IGxhc3RseSwgYWJ1bmRhbmNlIGNvbnRlbmRzIGFnYWluc3QgZGVzdGl0dXRpb24sIGdvb2QgcGxhbnMgYWdhaW5zdCBiYWZmbGVkCiAgICAgICBkZXNpZ25zLCB3aXNkb20gYWdhaW5zdCBtYWRuZXNzLCB3ZWxsLWZvdW5kZWQgaG9wZSBhZ2FpbnN0IHVuaXZlcnNhbCBkZXNwYWlyLiBJbiBhIGNvbnRlc3QKICAgICAgIGFuZCB3YXIgb2YgdGhpcyBzb3J0LCBldmVuIGlmIHRoZSB6ZWFsIG9mIG1lbiB3ZXJlIHRvIGZhaWwsIHdpbGwgbm90IHRoZSBpbW1vcnRhbCBnb2RzIGNvbXBlbAogICAgICAgc3VjaCBudW1lcm91cyBhbmQgZXhjZXNzaXZlIHZpY2VzIHRvIGJlIGRlZmVhdGVkIGJ5IHRoZXNlIG1vc3QgZW1pbmVudCB2aXJ0dWVzPyA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiBpbnN0YW50bHkgdGhlIGNpdGllcyBvZgogICAgICAgdGhlIGNvbG9uaWVzIGFuZCBtdW5pY2lwYWxpdGllcyB3aWxsIG1hdGNoIHRoZSBydXN0aWMgbW91bmRzIG9mIENhdGlsaW5lOyBhbmQgSSB3aWxsIG5vdAogICAgICAgY29uZGVzY2VuZCB0byBjb21wYXJlIHRoZSByZXN0IG9mIHlvdXIgdHJvb3BzIGFuZCBlcXVpcG1lbnRzIGFuZCBndWFyZHMgd2l0aCB0aGUgd2FudCBhbmQKICAgICAgIGRlc3RpdHV0aW9uIG9mIHRoYXQgaGlnaHdheW1hbi4gPC90cmFuc2xhdGlvbj4="
translation['2.11.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IGlmLCBvbWl0dGluZyBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBpbiB3aGljaCB3ZSBhcmUgcmljaCBhbmQgb2Ygd2hpY2ggaGUgaXMgZGVzdGl0dXRlLOKAlHRoZSBzZW5hdGUsIHRoZSBSb21hbgogICAgICAga25pZ2h0cywgdGhlIHBlb3BsZSwgdGhlIGNpdHksIHRoZSB0cmVhc3VyeSwgdGhlIHJldmVudWVzLCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sIGFsbCB0aGUgcHJvdmluY2VzLCBmb3JlaWduIG5hdGlvbnMs4oCUaWYgSSBzYXksIG9taXR0aW5nIGFsbAogICAgICAgdGhlc2UgdGhpbmdzLCB3ZSBjaG9vc2UgdG8gY29tcGFyZSB0aGUgY2F1c2VzIHRoZW1zZWx2ZXMgd2hpY2ggYXJlIG9wcG9zZWQgdG8gb25lIGFub3RoZXIsIHdlCiAgICAgICBtYXkgdW5kZXJzdGFuZCBmcm9tIHRoYXQgYWxvbmUgaG93IHRob3JvdWdobHkgcHJvc3RyYXRlIHRoZXkgYXJlLiBGb3Igb24gdGhlIG9uZSBzaWRlIGFyZQogICAgICAgZmlnaHRpbmcgbW9kZXN0eSwgb24gdGhlIG90aGVyIHdhbnRvbm5lc3M7IG9uIHRoZSBvbmUgY2hhc3RpdHksIG9uIHRoZSBvdGhlciB1bmNsZWFubmVzczsgb24KICAgICAgIHRoZSBvbmUgaG9uZXN0eSwgb24gdGhlIG90aGVyIGZyYXVkOyBvbiB0aGUgb25lIHBpZXR5LCBvbiB0aGUgb3RoZXIgd2lja2VkbmVzczsgb24gdGhlIG9uZQogICAgICAgY29uc2lzdGVuY3ksIG9uIHRoZSBvdGhlciBpbnNhbml0eTsgb24gdGhlIG9uZSBob25vdXIsIG9uIHRoZSBvdGhlciBiYXNlbmVzczsgb24gdGhlIG9uZQogICAgICAgY29udGluZW5jZSwgb24gdGhlIG90aGVyIGx1c3Q7IGluIHNob3J0LCBlcXVpdHksIHRlbXBlcmFuY2UsIGZvcnRpdHVkZSwgcHJ1ZGVuY2UsIGFsbCB0aGUKICAgICAgIHZpcnR1ZXMgY29udGVuZCBhZ2FpbnN0IGluaXF1aXR5IHdpdGggbHV4dXJ5LCBhZ2FpbnN0IGluZG9sZW5jZSwgYWdhaW5zdCByYXNobmVzcywgYWdhaW5zdAogICAgICAgYWxsIHRoZSB2aWNlczsgbGFzdGx5LCBhYnVuZGFuY2UgY29udGVuZHMgYWdhaW5zdCBkZXN0aXR1dGlvbiwgZ29vZCBwbGFucyBhZ2FpbnN0IGJhZmZsZWQKICAgICAgIGRlc2lnbnMsIHdpc2RvbSBhZ2FpbnN0IG1hZG5lc3MsIHdlbGwtZm91bmRlZCBob3BlIGFnYWluc3QgdW5pdmVyc2FsIGRlc3BhaXIuIEluIGEgY29udGVzdAogICAgICAgYW5kIHdhciBvZiB0aGlzIHNvcnQsIGV2ZW4gaWYgdGhlIHplYWwgb2YgbWVuIHdlcmUgdG8gZmFpbCwgd2lsbCBub3QgdGhlIGltbW9ydGFsIGdvZHMgY29tcGVsCiAgICAgICBzdWNoIG51bWVyb3VzIGFuZCBleGNlc3NpdmUgdmljZXMgdG8gYmUgZGVmZWF0ZWQgYnkgdGhlc2UgbW9zdCBlbWluZW50IHZpcnR1ZXM/IDwvdHJhbnNsYXRpb24+"
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.12.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBhcyB0aGlzIGlzIHRoZSBjYXNlLCBPIFJvbWFucywgYXMgSSBoYXZlIHNhaWQgYmVmb3JlLCBkZWZlbmQgeW91ciBob3VzZSB3aXRoIGd1YXJkcyBhbmQKICAgICAgIHZpZ2lsYW5jZS4gPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAyIiAvPiBJIGhhdmUgdGFrZW4gY2FyZSBhbmQgbWFkZSBhcnJhbmdlbWVudHMgdGhhdCB0aGVyZSBzaGFsbCBiZQogICAgICAgc3VmZmljaWVudCBwcm90ZWN0aW9uIGZvciB0aGUgY2l0eSB3aXRob3V0IGRpc3RyZXNzaW5nIHlvdSBhbmQgd2l0aG91dCBhbnkgdHVtdWx0LiBBbGwgdGhlCiAgICAgICBjb2xvbmlzdHMgYW5kIGNpdGl6ZW5zIG9mIHlvdXIgbXVuaWNpcGFsIHRvd25zLCBiZWluZyBpbmZvcm1lZCBieSBtZSBvZiB0aGlzIG5vY3R1cm5hbCBzYWxseQogICAgICAgb2YgQ2F0aWxpbmUsIHdpbGwgZWFzaWx5IGRlZmVuZCB0aGVpciBjaXRpZXMgYW5kIHRlcnJpdG9yaWVzOyB0aGUgZ2xhZGlhdG9ycyB3aGljaCBoZSB0aG91Z2h0CiAgICAgICB3b3VsZCBiZSBoaXMgbW9zdCBudW1lcm91cyBhbmQgbW9zdCB0cnVzdHkgYmFuZCwgYWx0aG91Z2ggdGhleSBhcmUgYmV0dGVyIGRpc3Bvc2VkIHRoYW4gcGFydAogICAgICAgb2YgdGhlIHBhdHJpY2lhbnMsIHdpbGwgYmUgaGVsZCBpbiBjaGVlayBieSBvdXIgcG93ZXIuIFF1aW50dXMgTWV0ZWxsdXMsIHdob20gSSwgbWFraW5nCiAgICAgICBwcm92aXNpb24gZm9yIHRoaXMsIHNlbnQgb24gdG8gdGhlIEdhbGxpYyBhbmQgUGljZW5pYW4gdGVycml0b3J5LCB3aWxsIGVpdGhlciBvdmVyd2hlbG0gdGhlCiAgICAgICBtYW4sIG9yIHdpbGwgcHJldmVudCBhbGwgaGlzIG1vdGlvbnMgYW5kIGF0dGVtcHRzOyBidXQgd2l0aCByZXNwZWN0IHRvIHRoZSBhcnJhbmdlbWVudCBvZiBhbGwKICAgICAgIG90aGVyIG1hdHRlcnMsIGFuZCBtYXR1cmluZyBhbmQgYWN0aW5nIG9uIG91ciBwbGFucywgd2Ugc2hhbGwgY29uc3VsdCB0aGUgc2VuYXRlLCB3aGljaCwgYXMKICAgICAgIHlvdSBhcmUgYXdhcmUsIGlzIGNvbnZlbmVkLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAyIiAvPiBJIGhhdmUgdGFrZW4gY2FyZSBhbmQgbWFkZSBhcnJhbmdlbWVudHMgdGhhdCB0aGVyZSBzaGFsbCBiZQogICAgICAgc3VmZmljaWVudCBwcm90ZWN0aW9uIGZvciB0aGUgY2l0eSB3aXRob3V0IGRpc3RyZXNzaW5nIHlvdSBhbmQgd2l0aG91dCBhbnkgdHVtdWx0LiBBbGwgdGhlCiAgICAgICBjb2xvbmlzdHMgYW5kIGNpdGl6ZW5zIG9mIHlvdXIgbXVuaWNpcGFsIHRvd25zLCBiZWluZyBpbmZvcm1lZCBieSBtZSBvZiB0aGlzIG5vY3R1cm5hbCBzYWxseQogICAgICAgb2YgQ2F0aWxpbmUsIHdpbGwgZWFzaWx5IGRlZmVuZCB0aGVpciBjaXRpZXMgYW5kIHRlcnJpdG9yaWVzOyB0aGUgZ2xhZGlhdG9ycyB3aGljaCBoZSB0aG91Z2h0CiAgICAgICB3b3VsZCBiZSBoaXMgbW9zdCBudW1lcm91cyBhbmQgbW9zdCB0cnVzdHkgYmFuZCwgYWx0aG91Z2ggdGhleSBhcmUgYmV0dGVyIGRpc3Bvc2VkIHRoYW4gcGFydAogICAgICAgb2YgdGhlIHBhdHJpY2lhbnMsIHdpbGwgYmUgaGVsZCBpbiBjaGVlayBieSBvdXIgcG93ZXIuIFF1aW50dXMgTWV0ZWxsdXMsIHdob20gSSwgbWFraW5nCiAgICAgICBwcm92aXNpb24gZm9yIHRoaXMsIHNlbnQgb24gdG8gdGhlIEdhbGxpYyBhbmQgUGljZW5pYW4gdGVycml0b3J5LCB3aWxsIGVpdGhlciBvdmVyd2hlbG0gdGhlCiAgICAgICBtYW4sIG9yIHdpbGwgcHJldmVudCBhbGwgaGlzIG1vdGlvbnMgYW5kIGF0dGVtcHRzOyBidXQgd2l0aCByZXNwZWN0IHRvIHRoZSBhcnJhbmdlbWVudCBvZiBhbGwKICAgICAgIG90aGVyIG1hdHRlcnMsIGFuZCBtYXR1cmluZyBhbmQgYWN0aW5nIG9uIG91ciBwbGFucywgd2Ugc2hhbGwgY29uc3VsdCB0aGUgc2VuYXRlLCB3aGljaCwgYXMKICAgICAgIHlvdSBhcmUgYXdhcmUsIGlzIGNvbnZlbmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.12.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3cgb25jZSBtb3JlIEkgd2lzaCB0aG9zZSB3aG8gaGF2ZSByZW1haW5lZCBpbiB0aGUgY2l0eSwgYW5kIHdobywgY29udHJhcnkgdG8gdGhlIHNhZmV0eQogICAgICAgb2YgdGhlIGNpdHkgYW5kIG9mIGFsbCBvZiB5b3UsIGhhdmUgYmVlbiBsZWZ0IGluIHRoZSBjaXR5IGJ5IENhdGlsaW5lLCBhbHRob3VnaCB0aGV5IGFyZQogICAgICAgZW5lbWllcywgeWV0IGJlY2F1c2UgdGhleSB3ZXJlIGJvcm4gY2l0aXplbnMsIHRvIGJlIHdhcm5lZCBhZ2FpbiBhbmQgYWdhaW4gYnkgbWUuIElmIG15CiAgICAgICBsZW5pdHkgaGFzIGFwcGVhcmVkIHRvIGFueSBvbmUgdG9vIHJlbWlzcywgaXQgaGFzIGJlZW4gb25seSB3YWl0aW5nIHRoYXQgdGhhdCBtaWdodCBicmVhayBvdXQKICAgICAgIHdoaWNoIHdhcyBseWluZyBoaWQuIEFzIHRvIHRoZSBmdXR1cmUsIEkgY2Fubm90IG5vdyBmb3JnZXQgdGhhdCB0aGlzIGlzIG15IGNvdW50cnksIHRoYXQgSSBhbQogICAgICAgdGhlIGNvbnN1bCBvZiB0aGVzZSBjaXRpemVuczsgdGhhdCBJIG11c3QgZWl0aGVyIGxpdmUgd2l0aCB0aGVtLCBvciBkaWUgZm9yIHRoZW0uIFRoZXJlIGlzIG5vCiAgICAgICBndWFyZCBhdCB0aGUgZ2F0ZSwgbm8gb25lIHBsb3R0aW5nIGFnYWluc3QgdGhlaXIgcGF0aDsgaWYgYW55IG9uZSB3aXNoZXMgdG8gZ28sIGhlIGNhbgogICAgICAgcHJvdmlkZSBmb3IgaGltc2VsZjsgYnV0IGlmIGFueSBvbmUgc3RpcnMgaW4gdGhlIGNpdHksIGFuZCBpZiBJIGRldGVjdCBub3Qgb25seSBhbnkgYWN0aW9uLAogICAgICAgYnV0IGFueSBhdHRlbXB0IG9yIGRlc2lnbiBhZ2FpbnN0IHRoZSBjb3VudHJ5LCBoZSBzaGFsbCBmZWVsIHRoYXQgdGhlcmUgYXJlIGluIHRoaXMgY2l0eQogICAgICAgdmlnaWxhbnQgY29uc3VscywgZW1pbmVudCBtYWdpc3RyYXRlcywgYSBicmF2ZSBzZW5hdGUsIGFybXMsIGFuZCBwcmlzb25zOyB3aGljaCBvdXIgYW5jZXN0b3JzCiAgICAgICBhcHBvaW50ZWQgYXMgdGhlIGF2ZW5nZXJzIG9mIG5lZmFyaW91cyBhbmQgY29udmljdGVkIGNyaW1lcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['2.13.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBhbGwgdGhpcyBzaGFsbCBiZSBzbyBkb25lLCBPIFJvbWFucywgdGhhdCBhZmZhaXJzIG9mIHRoZSBncmVhdGVzdCBpbXBvcnRhbmNlIHNoYWxsIGJlCiAgICAgICB0cmFuc2FjdGVkIHdpdGggdGhlIGxlYXN0IHBvc3NpYmxlIGRpc3R1cmJhbmNlOyB0aGUgZ3JlYXRlc3QgZGFuZ2VycyBzaGFsbCBiZSBhdm9pZGVkIHdpdGhvdXQKICAgICAgIGFueSB0dW11bHQ7IGFuIGludGVybmFsIGNpdmlsIHdhciB0aGUgbW9zdCBjcnVlbCBhbmQgdGVycmlibGUgaW4gdGhlIG1lbW9yeSBvZiBtYW4sIHNoYWxsIGJlCiAgICAgICBwdXQgYW4gZW5kIHRvIGJ5IG1lIGFsb25lIGluIHRoZSByb2JlIG9mIHBlYWNlIGFjdGluZyBhcyBnZW5lcmFsIGFuZCBjb21tYW5kZXItaW4tY2hpZWYuIEFuZAogICAgICAgdGhpcyBJIHdpbGwgc28gYXJyYW5nZSwgTyBSb21hbnMsIHRoYXQgaWYgaXQgY2FuIGJlIGJ5IGFueSBtZWFucyBtYW5hZ2VkLCBldmVuIHRoZSBtb3N0CiAgICAgICB3b3J0aGxlc3MgbWFuIHNoYWxsIG5vdCBzdWZmZXIgdGhlIHB1bmlzaG1lbnQgb2YgaGlzIGNyaW1lcyBpbiB0aGlzIGNpdHkuIEJ1dCBpZiB0aGUgdmlvbGVuY2UKICAgICAgIG9mIG9wZW4gYXVkYWNpdHksIGlmIGRhbmdlciBpbXBlbmRpbmcgb3ZlciB0aGUgcmVwdWJsaWMgZHJpdmVzIG1lIG9mIG5lY2Vzc2l0eSBmcm9tIHRoaXMKICAgICAgIG1lcmNpZnVsIGRpc3Bvc2l0aW9uLCBhdCBhbGwgZXZlbnRzIEkgd2lsbCBtYW5hZ2UgdGhpcywgd2hpY2ggc2VlbXMgc2NhcmNlbHkgZXZlbiB0byBiZSBob3BlZAogICAgICAgZm9yIGluIHNvIGdyZWF0IGFuZCBzbyB0cmVhY2hlcm91cyBhIHdhciwgdGhhdCBubyBnb29kIG1hbiBzaGFsbCBmYWxsLCBhbmQgdGhhdCB5b3UgbWF5IGFsbAogICAgICAgYmUgc2F2ZWQgYnkgdGhlIHB1bmlzaG1lbnQgb2YgYSBmZXcuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.13.29'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPllvdSBzZWUgdGhpcyBkYXksIE8gUm9tYW5zLCB0aGUgcmVwdWJsaWMsIGFuZCBhbGwgeW91ciBsaXZlcywgeW91ciBnb29kcywgeW91ciBmb3J0dW5lcywKICAgICAgIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCB0aGlzIGhvbWUgb2YgbW9zdCBpbGx1c3RyaW91cyBlbXBpcmUsIHRodXMgbW9zdCBmb3J0dW5hdGUgYW5kCiAgICAgICBiZWF1dGlmdWwgY2l0eSwgYnkgdGhlIGdyZWF0IGxvdmUgb2YgdGhlIGltbW9ydGFsIGdvZHMgZm9yIHlvdSwgYnkgbXkgbGFib3VycyBhbmQgY291bnNlbHMKICAgICAgIGFuZCBkYW5nZXJzLCBzbmF0Y2hlZCBmcm9tIGZpcmUgYW5kIHN3b3JkLCBhbmQgYWxtb3N0IGZyb20gdGhlIHZlcnkgamF3cyBvZiBmYXRlLCBhbmQKICAgICAgIHByZXNlcnZlZCBhbmQgcmVzdG9yZWQgdG8geW91LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBpZiB0aG9zZSBkYXlzIG9uIHdoaWNoIHdlIGFyZSBwcmVzZXJ2ZWQgYXJlIG5vdCBsZXNzCiAgICAgICBwbGVhc2FudCB0byB1cywgb3IgbGVzcyBpbGx1c3RyaW91cywgdGhhbiB0aG9zZSBvbiB3aGljaCB3ZSBhcmUgYm9ybiwgYmVjYXVzZSB0aGUgam95IG9mCiAgICAgICBiZWluZyBzYXZlZCBpcyBjZXJ0YWluLCB0aGUgZ29vZCBmb3J0dW5lIG9mIGJlaW5nIGJvcm4gdW5jZXJ0YWluLCBhbmQgYmVjYXVzZSB3ZSBhcmUgYm9ybgogICAgICAgd2l0aG91dCBmZWVsaW5nIGl0LCBidXQgd2UgYXJlIHByZXNlcnZlZCB3aXRoIGdyZWF0IGRlbGlnaHQ7IHllczsgc2luY2Ugd2UgaGF2ZSwgYnkgb3VyCiAgICAgICBhZmZlY3Rpb24gYW5kIGJ5IG91ciBnb29kIHJlcG9ydCwgcmFpc2VkIHRvIHRoZSBpbW1vcnRhbCBnb2RzIHRoYXQgUm9tdWx1cyB3aG8gYnVpbHQgdGhpcwogICAgICAgY2l0eSwgaGUsIHRvbywgd2hvIGhhcyBwcmVzZXJ2ZWQgdGhpcyBjaXR5LCBidWlsdCBieSBoaW0sIGFuZCBlbWJlbGxpc2hlZCBhcyB5b3Ugc2VlIGl0LAogICAgICAgb3VnaHQgdG8gYmUgaGVsZCBpbiB0ZXJyb3IgYnkgeW91IGFuZCB5b3VyIHBvc3Rlcml0eTsgZm9yIHdlIGhhdmUgZXh0aW5ndWlzaGVkIGZsYW1lcyB3aGljaAogICAgICAgd2VyZSBhbG1vc3QgbGFpZCB1bmRlciBhbmQgcGxhY2VkIGFyb3VuZCB0aGUgdGVtcGxlcyBhbmQgc2hyaW5lcywgYW5kIGhvdXNlcyBhbmQgd2FsbHMgb2YgdGhlCiAgICAgICB3aG9sZSBjaXR5OyB3ZSBoYXZlIHR1cm5lZCB0aGUgZWRnZSBvZiBzd29yZHMgZHJhd24gYWdhaW5zdCB0aGUgcmVwdWJsaWMsIGFuZCBoYXZlIHR1cm5lZAogICAgICAgYXNpZGUgdGhlaXIgcG9pbnRzIGZyb20geW91ciB0aHJvYXRzLjxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHNpbmNlIGFsbCB0aGlzIGhhcwogICAgICAgYmVlbiBkaXNwbGF5ZWQgaW4gdGhlIHNlbmF0ZSwgYW5kIG1hZGUgbWFuaWZlc3QsIGFuZCBkZXRlY3RlZCBieSBtZSwgSSB3aWxsIG5vdyBleHBsYWluIGl0CiAgICAgICBicmllZmx5LCB0aGF0IHlvdSwgTyBjaXRpemVucywgdGhhdCBhcmUgYXMgeWV0IGlnbm9yYW50IG9mIGl0LCBhbmQgYXJlIGluIHN1c3BlbnNlLCBtYXkgYmUKICAgICAgIGFibGUgdG8gc2VlIGhvdyBncmVhdCB0aGUgZGFuZ2VyIHdhcywgaG93IGV2aWRlbnQgYW5kIGJ5IHdoYXQgbWVhbnMgaXQgd2FzIGRldGVjdGVkIGFuZAogICAgICAgYXJyZXN0ZWQuIEZpcnN0IG9mIGFsbCwgc2luY2UgQ2F0aWxpbmUsIGEgZmV3IGRheXMgYWdvLCBidXJzdCBvdXQgb2YgdGhlIGNpdHksIHdoZW4gaGUgaGFkCiAgICAgICBsZWZ0IGJlaGluZCB0aGUgY29tcGFuaW9ucyBvZiBoaXMgd2lja2VkbmVzcywgdGhlIGFjdGl2ZSBsZWFkZXJzIG9mIHRoaXMgaW5mYW1vdXMgd2FyLCBJIGhhdmUKICAgICAgIGNvbnRpbnVhbGx5IHdhdGNoZWQgYW5kIHRha2VuIGNhcmUsIE8gUm9tYW5zLCBvZiB0aGUgbWVhbnMgYnkgd2hpY2ggd2UgbWlnaHQgYmUgc2FmZSBhbWlkCiAgICAgICBzdWNoIGdyZWF0IGFuZCBzdWNoIGNhcmVmdWxseSBjb25jZWFsZWQgdHJlYWNoZXJ5LiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgaWYgdGhvc2UgZGF5cyBvbiB3aGljaCB3ZSBhcmUgcHJlc2VydmVkIGFyZSBub3QgbGVzcwogICAgICAgcGxlYXNhbnQgdG8gdXMsIG9yIGxlc3MgaWxsdXN0cmlvdXMsIHRoYW4gdGhvc2Ugb24gd2hpY2ggd2UgYXJlIGJvcm4sIGJlY2F1c2UgdGhlIGpveSBvZgogICAgICAgYmVpbmcgc2F2ZWQgaXMgY2VydGFpbiwgdGhlIGdvb2QgZm9ydHVuZSBvZiBiZWluZyBib3JuIHVuY2VydGFpbiwgYW5kIGJlY2F1c2Ugd2UgYXJlIGJvcm4KICAgICAgIHdpdGhvdXQgZmVlbGluZyBpdCwgYnV0IHdlIGFyZSBwcmVzZXJ2ZWQgd2l0aCBncmVhdCBkZWxpZ2h0OyB5ZXM7IHNpbmNlIHdlIGhhdmUsIGJ5IG91cgogICAgICAgYWZmZWN0aW9uIGFuZCBieSBvdXIgZ29vZCByZXBvcnQsIHJhaXNlZCB0byB0aGUgaW1tb3J0YWwgZ29kcyB0aGF0IFJvbXVsdXMgd2hvIGJ1aWx0IHRoaXMKICAgICAgIGNpdHksIGhlLCB0b28sIHdobyBoYXMgcHJlc2VydmVkIHRoaXMgY2l0eSwgYnVpbHQgYnkgaGltLCBhbmQgZW1iZWxsaXNoZWQgYXMgeW91IHNlZSBpdCwKICAgICAgIG91Z2h0IHRvIGJlIGhlbGQgaW4gdGVycm9yIGJ5IHlvdSBhbmQgeW91ciBwb3N0ZXJpdHk7IGZvciB3ZSBoYXZlIGV4dGluZ3Vpc2hlZCBmbGFtZXMgd2hpY2gKICAgICAgIHdlcmUgYWxtb3N0IGxhaWQgdW5kZXIgYW5kIHBsYWNlZCBhcm91bmQgdGhlIHRlbXBsZXMgYW5kIHNocmluZXMsIGFuZCBob3VzZXMgYW5kIHdhbGxzIG9mIHRoZQogICAgICAgd2hvbGUgY2l0eTsgd2UgaGF2ZSB0dXJuZWQgdGhlIGVkZ2Ugb2Ygc3dvcmRzIGRyYXduIGFnYWluc3QgdGhlIHJlcHVibGljLCBhbmQgaGF2ZSB0dXJuZWQKICAgICAgIGFzaWRlIHRoZWlyIHBvaW50cyBmcm9tIHlvdXIgdGhyb2F0cy48L3RyYW5zbGF0aW9uPg=="
translation['3.1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBBbmQgc2luY2UgYWxsIHRoaXMgaGFzCiAgICAgICBiZWVuIGRpc3BsYXllZCBpbiB0aGUgc2VuYXRlLCBhbmQgbWFkZSBtYW5pZmVzdCwgYW5kIGRldGVjdGVkIGJ5IG1lLCBJIHdpbGwgbm93IGV4cGxhaW4gaXQKICAgICAgIGJyaWVmbHksIHRoYXQgeW91LCBPIGNpdGl6ZW5zLCB0aGF0IGFyZSBhcyB5ZXQgaWdub3JhbnQgb2YgaXQsIGFuZCBhcmUgaW4gc3VzcGVuc2UsIG1heSBiZQogICAgICAgYWJsZSB0byBzZWUgaG93IGdyZWF0IHRoZSBkYW5nZXIgd2FzLCBob3cgZXZpZGVudCBhbmQgYnkgd2hhdCBtZWFucyBpdCB3YXMgZGV0ZWN0ZWQgYW5kCiAgICAgICBhcnJlc3RlZC4gRmlyc3Qgb2YgYWxsLCBzaW5jZSBDYXRpbGluZSwgYSBmZXcgZGF5cyBhZ28sIGJ1cnN0IG91dCBvZiB0aGUgY2l0eSwgd2hlbiBoZSBoYWQKICAgICAgIGxlZnQgYmVoaW5kIHRoZSBjb21wYW5pb25zIG9mIGhpcyB3aWNrZWRuZXNzLCB0aGUgYWN0aXZlIGxlYWRlcnMgb2YgdGhpcyBpbmZhbW91cyB3YXIsIEkgaGF2ZQogICAgICAgY29udGludWFsbHkgd2F0Y2hlZCBhbmQgdGFrZW4gY2FyZSwgTyBSb21hbnMsIG9mIHRoZSBtZWFucyBieSB3aGljaCB3ZSBtaWdodCBiZSBzYWZlIGFtaWQKICAgICAgIHN1Y2ggZ3JlYXQgYW5kIHN1Y2ggY2FyZWZ1bGx5IGNvbmNlYWxlZCB0cmVhY2hlcnkuIDwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RnVydGhlciwgd2hlbiBJIGRyb3ZlIENhdGlsaW5lIG91dCBvZiB0aGUgY2l0eSwgKGZvciBJIGRvIG5vdCBmZWFyIHRoZSB1bnBvcHVsYXJpdHkgb2YgdGhpcwogICAgICAgZXhwcmVzc2lvbiwgd2hlbiB0aGF0IGlzIG1vcmUgdG8gYmUgZmVhcmVkIHRoYXQgSSBzaG91bGQgYmUgYmxhbWVkIGJlY2F1c2UgaGUgaGFzIGRlcGFydGVkCiAgICAgICBhbGl2ZSwpIGJ1dCB0aGVuIHdoZW4gSSB3aXNoZWQgaGltIHRvIGJlIHJlbW92ZWQsIEkgdGhvdWdodCBlaXRoZXIgdGhhdCB0aGUgcmVzdCBvZiB0aGUgYmFuZAogICAgICAgb2YgY29uc3BpcmF0b3JzIHdvdWxkIGRlcGFydCB3aXRoIGhpbSwgb3IgdGhhdCB0aGV5IHdobyByZW1haW5lZCB3b3VsZCBiZSB3ZWFrIGFuZCBwb3dlcmxlc3MKICAgICAgIHdpdGhvdXQgaGltLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIEksIGFzIEkgc2F3IHRoYXQgdGhvc2Ugd2hvbSBJIGtuZXcgdG8gYmUgaW5mbGFtZWQgd2l0aCB0aGUgZ3JlYXRlc3QgbWFkbmVzcyBhbmQKICAgICAgIHdpY2tlZG5lc3Mgd2VyZSBhbW9uZyB1cywgYW5kIGhhZCByZW1haW5lZCBhdCBSb21lLCBzcGVudCBhaWwgbXkgbmlnaHRzIGFuZCBkYXlzIGluIHRha2luZwogICAgICAgY2FyZSB0byBrbm93IGFuZCBzZWUgd2hhdCB0aGV5IHdlcmUgZG9pbmcsIGFuZCB3aGF0IHRoZXkgd2VyZSBjb250cml2aW5nIHRoYXQsIHNpbmNlIHdoYXQgSQogICAgICAgc2FpZCB3b3VsZCwgZnJvbSB0aGUgaW5jcmVkaWJsZSBlbm9ybWl0eSBvZiB0aGUgd2lja2VkbmVzcywgbWFrZSBsZXNzIGltcHJlc3Npb24gb24geW91cgogICAgICAgZWFycywgSSBtaWdodCBzbyBkZXRlY3QgdGhlIHdob2xlIGJ1c2luZXNzIHRoYXQgeW91IG1pZ2h0IHdpdGggYWxsIHlvdXIgaGVhcnRzIHByb3ZpZGUgZm9yCiAgICAgICB5b3VyIHNhZmV0eSwgd2hlbiB5b3Ugc2F3IHRoZSBjcmltZSB3aXRoIHlvdXIgb3duIGV5ZXMuIFRoZXJlZm9yZSwgd2hlbiBJIGZvdW5kIHRoYXQgdGhlCiAgICAgICBhbWJhc3NhZG9ycyBvZiB0aGUgQWxsb2Jyb2dlcyBoYWQgYmVlbiB0YW1wZXJlZCB3aXRoIGJ5IFB1YmxpdXMgTGVudHVsdXMsIGZvciB0aGUgc2FrZSBvZgogICAgICAgZXhjaXRpbmcgYSBUcmFuc2FscGluZSB3YXIgYW5kIGNvbW1vdGlvbiBpbiBHYXVsLCBhbmQgdGhhdCB0aGV5LCBvbiB0aGVpciByZXR1cm4gdG8gR2F1bCwgaGFkCiAgICAgICBiZWVuIHNlbnQgd2l0aCBsZXR0ZXJzIGFuZCBtZXNzYWdlcyB0byBDYXRpbGluZSBvbiB0aGUgc2FtZSByb2FkLCBhbmQgdGhhdCBWdWx0dXJjaXVzIGhhZAogICAgICAgYmVlbiBhZGRlZCB0byB0aGVtIGFzIGEgY29tcGFuaW9uLCBhbmQgdGhhdCBoZSB0b28gaGFkIGhhZCBsZXR0ZXJzIGdpdmVuIGhpbSBmb3IgQ2F0aWxpbmUsIEkKICAgICAgIHRob3VnaHQgdGhhdCBhbiBvcHBvcnR1bml0eSB3aXRzIGdpdmVuIG1lIG9mIGNvbnRyaXZpbmcgd2hhdCB3YXMgbW9zdCBkaWZmaWN1bHQsIGFuZCB3aGljaCBJCiAgICAgICB3YXMgYWx3YXlzIHdpc2hpbmcgdGhlIGltbW9ydGFsIGdvZHMgbWlnaHQgZ3JhbnQsIHRoYXQgdGhlIHdob2xlIGJ1c2luZXNzIG1pZ2h0IGJlIG1hbmlmZXN0bHkKICAgICAgIGRldGVjdGVkIG5vdCBieSBtZSBhbG9uZSwgYnV0IGJ5IHRoZSBzZW5hdGUgYWxzbywgYW5kIGJ5IHlvdS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlZm9yZSwgeWVzdGVyZGF5IEkgc3VtbW9uZWQgTHVjaXVzIEZsYWNjdXMgYW5kIEMuIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGJyYXZlIG1lbiBhbmQKICAgICAgIHdlbGwtYWZmZWN0ZWQgdG8gdGhlIHJlcHVibGljLiBJIGV4cGxhaW5lZCB0byB0aGVtIHRoZSB3aG9sZSBtYXR0ZXIsIGFuZCBzaG93ZWQgdGhlbSB3aGF0IEkKICAgICAgIHdpc2hlZCB0byBoYXZlIGRvbmUuIEJ1dCB0aGV5LCBmdWxsIG9mIG5vYmxlIGFuZCB3b3J0aHkgc2VudGltZW50cyB0b3dhcmRzIHRoZSByZXB1YmxpYywKICAgICAgIHdpdGhvdXQgaGVzaXRhdGlvbiwgYW5kIHdpdGhvdXQgYW55IGRlbGF5LCB1bmRlcnRvb2sgdGhlIGJ1c2luZXNzLCBhbmQgd2hlbiBpdCB3YXMgZXZlbmluZywKICAgICAgIHdlbnQgc2VjcmV0bHkgdG8gdGhlIE11bHZpYW4gYnJpZGdlLCBhbmQgdGhlcmUgc28gZGlzdHJpYnV0ZWQgdGhlbXNlbHZlcyBpbiB0aGUgbmVhcmVzdAogICAgICAgdmlsbGFzLCB0aGF0IHRoZSBUaWJlciBhbmQgdGhlIGJyaWRnZSB3YXMgYmV0d2VlbiB0aGVtLiBBbmQgdGhleSB0b29rIHRvIHRoZSBzYW1lIHBsYWNlLAogICAgICAgd2l0aG91dCBhbnkgb25lIGhhdmluZyB0aGUgbGVhc3Qgc3VzcGljaW9uIG9mIGl0LCBtYW55IGJyYXZlIG1lbiwgYW5kIEkgaGFkIHNlbnQgbWFueSBwaWNrZWQKICAgICAgIHlvdW5nIG1lbiBvZiB0aGUgcHJlZmVjdHVyZSBvZiBSZWF0ZSwgd2hvc2UgYXNzaXN0YW5jZSBJIGNvbnN0YW50bHkgZW1wbG95IGluIHRoZSBwcm90ZWN0aW9uCiAgICAgICBvZiB0aGUgcmVwdWJsaWMsIGFybWVkIHdpdGggc3dvcmRzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4gSW4gdGhlIG1lYW50aW1lLCBhYm91dAogICAgICAgdGhlIGVuZCBvZiB0aGUgdGhpcmQgd2F0Y2gsIHdoZW4gdGhlIGFtYmFzc2Fkb3JzIG9mIHRoZSBBbGxvYnJvZ2VzLCB3aXRoIGEgZ3JlYXQgcmV0aW51ZSBhbmQKICAgICAgIFZ1bHR1cmNpdXMgd2l0aCB0aGVtLCBiZWdhbiB0byBjb21lIHVwb24gdGhlIE11bHZpYW4gYnJpZGdlLCBhbiBhdHRhY2sgaXMgbWFkZSB1cG9uIHRoZW07CiAgICAgICBzd29yZHMgYXJlIGRyYXduIGJvdGggYnkgdGhlbSBhbmQgYnkgb3VyIHBlb3BsZTsgdGhlIG1hdHRlciB3YXMgdW5kZXJzdG9vZCBieSB0aGUgcHJhZXRvcnMKICAgICAgIGFsb25lLCBidXQgd2FzIHVua25vd24gdG8gdGhlIHJlc3QuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPiBJbiB0aGUgbWVhbnRpbWUsIGFib3V0CiAgICAgICB0aGUgZW5kIG9mIHRoZSB0aGlyZCB3YXRjaCwgd2hlbiB0aGUgYW1iYXNzYWRvcnMgb2YgdGhlIEFsbG9icm9nZXMsIHdpdGggYSBncmVhdCByZXRpbnVlIGFuZAogICAgICAgVnVsdHVyY2l1cyB3aXRoIHRoZW0sIGJlZ2FuIHRvIGNvbWUgdXBvbiB0aGUgTXVsdmlhbiBicmlkZ2UsIGFuIGF0dGFjayBpcyBtYWRlIHVwb24gdGhlbTsKICAgICAgIHN3b3JkcyBhcmUgZHJhd24gYm90aCBieSB0aGVtIGFuZCBieSBvdXIgcGVvcGxlOyB0aGUgbWF0dGVyIHdhcyB1bmRlcnN0b29kIGJ5IHRoZSBwcmFldG9ycwogICAgICAgYWxvbmUsIGJ1dCB3YXMgdW5rbm93biB0byB0aGUgcmVzdC4gPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbiwgYnkgdGhlIGludGVydmVudGlvbiBvZiBQb210aW51cyBhbmQgRmxhY2N1cywgdGhlIGZpZ2h0IHdoaWNoIGhhZCBiZWd1biB3YXMgcHV0IGFuIGVuZAogICAgICAgdG87IGFsbCB0aGUgbGV0dGVycyB3aGljaCB3ZXJlIGluIHRoZSBoYW5kcyBvZiB0aGUgd2hvbGUgY29tcGFueSBhcmUgZGVsaXZlcmVkIHRvIHRoZQogICAgICAgcHJhZXRvcnMgd2l0aCB0aW1lIHNlYWxzIHVuYnJva2VuOyB0aGUgbWVuIHRoZW1zZWx2ZXMgYXJlIGFycmVzdGVkIGFuZCBicm91Z2h0IHRvIG1lIGF0CiAgICAgICBkYXlicmVhay4gQW5kIEkgaW1tZWRpYXRlbHkgc3VtbW9uZWQgdGhhdCBtb3N0IHdvcnRobGVzcyBjb250cml2ZXIgb2YgYWxsIHRoaXMgd2lja2VkbmVzcywKICAgICAgIEdhYmluaXVzLCBhcyB5ZXQgc3VzcGVjdGluZyBub3RoaW5nOyBhZnRlciBoaW0sIFAuIFN0YXRpbGl1cyBpcyBzZW50IGZvciwgYW5kIGFmdGVyIGhpbQogICAgICAgQ2V0aGVndXM7IGJ1dCBMZW50dWx1cyB3YXMgYSBsb25nIHRpbWUgaW4gY29taW5nLOKAlEkgc3VwcG9zZSwgYmVjYXVzZSwgY29udHJhcnkgdG8KICAgICAgIGhpcyBjdXN0b20sIGhlIGhhZCBiZWVuIHVwIGEgbG9uZyB0aW1lIHRoZSBuaWdodCBiZWZvcmUsIHdyaXRpbmcgbGV0dGVycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIHRob3NlIG1vc3Qgbm9ibGUgYW5kIGV4Y2VsbGVudCBtZW4gb2YgdGhlIHdob2xlIGNpdHksIHdobywgaGVhcmluZyBvZiB0aGUgbWF0dGVyLAogICAgICAgY2FtZSBpbiBjcm93ZHMgdG8gbWUgaW4gdGhlIG1vcm5pbmcsIHRob3VnaHQgaXQgYmVzdCBmb3IgbWUgdG8gb3BlbiB0aGUgbGV0dGVycyBiZWZvcmUgSQogICAgICAgcmVsYXRlZCB0aGUgbWF0dGVyIHRvIHRoZSBzZW5hdGUsIGxlc3QsIGlmIG5vdGhpbmcgd2VyZSBmb3VuZCBpbiB0aGVtLCBzbyBncmVhdCBhIGRpc3R1cmJhbmNlCiAgICAgICBtaWdodCBzZWVtIHRvIGhhdmUgYmVlbiBjYXVzZWQgdG8gdGhlIHN0YXRlIGZvciBub3RoaW5nLCBJIHNhaWQgSSB3b3VsZCBuZXZlciBzbyBhY3QgYXMKICAgICAgIHNocmluayBmcm9tIHJlZmVycmluZyBtYXR0ZXIgb2YgcHVibGljIGRhbmdlciB0byB0aGUgcHVibGljIGNvdW5jaWwuIEluIHRydXRoIGlmLCBPIFJvbWFucywKICAgICAgIHRoZXNlIHRoaW5ncyB3aGljaCBoYWQgYmVlbiByZXBvcnRlZCB0byBtZSBoYWQgbm90IGJlZW4gZm91bmQgaW4gdGhlbSwgeWV0IEkgZGlkIG5vdCB0aGluayBJCiAgICAgICBvdWdodCwgaW4gc3VjaCBhIGNyaXNpcyBvZiB0aGUgcmVwdWJsaWMsIHRvIGJlIGFmcmFpZCBvZiB0aGUgaW1wdXRhdGlvbiBvZiBvdmVyLWRpbGlnZW5jZS4KICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4gSSBxdWlja2x5IHN1bW1vbmVkIGEgZnVsbCBzZW5hdGUsIGFzIHlvdSBzYXc7IGFuZAogICAgICAgbWVhbnRpbWUsIHdpdGhvdXQgYW55IGRlbGF5LCBieSB0aGUgYWR2aWNlIG9mIHRoZSBBbGxvYnJvZ2VzLCBJIHNlbnQgQ2FpdXMgU3VscGljaXVzIHRoZQogICAgICAgcHJhZXRvciwgYSBicmF2ZSBtYW4sIHRvIGJyaW5nIHdoYXRldmVyIGFybXMgaGUgY291bGQgZmluZCBpbiB0aGUgaG91c2Ugb2YgQ2V0aGVndXMsIHdoZW5jZQogICAgICAgaGUgZGlkIGJyaW5nIGEgZ3JlYXQgbnVtYmVyIG9mIHN3b3JkcyBhbmQgZGFnZ2Vycy4gPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPiBJIHF1aWNrbHkgc3VtbW9uZWQgYSBmdWxsIHNlbmF0ZSwgYXMgeW91IHNhdzsgYW5kCiAgICAgICBtZWFudGltZSwgd2l0aG91dCBhbnkgZGVsYXksIGJ5IHRoZSBhZHZpY2Ugb2YgdGhlIEFsbG9icm9nZXMsIEkgc2VudCBDYWl1cyBTdWxwaWNpdXMgdGhlCiAgICAgICBwcmFldG9yLCBhIGJyYXZlIG1hbiwgdG8gYnJpbmcgd2hhdGV2ZXIgYXJtcyBoZSBjb3VsZCBmaW5kIGluIHRoZSBob3VzZSBvZiBDZXRoZWd1cywgd2hlbmNlCiAgICAgICBoZSBkaWQgYnJpbmcgYSBncmVhdCBudW1iZXIgb2Ygc3dvcmRzIGFuZCBkYWdnZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBpbnRyb2R1Y2VkIFZ1bHR1cmNpdXMgd2l0aG91dCB0aGUgR2F1bHMuIEJ5IHRoZSBjb21tYW5kIG9mIHRoZSBzZW5hdGUsIEkgcGxlZGdlZCBoaW0gdGhlCiAgICAgICBwdWJsaWMgZmFpdGggZm9yIGhpcyBzYWZldHkuIEkgZXhob3J0ZWQgaGltIGZlYXJsZXNzbHkgdG8gdGVsbCBhbGwgaGUga25ldy4gVGhlbiwgd2hlbiBoZSBoYWQKICAgICAgIHNjYXJjZWx5IHJlY292ZXJlZCBoaW1zZWxmIGZyb20gaGlzIGdyZWF0IGFsYXJtLCBoZSBzYWlkOiB0aGF0IGhlIGhhZCBtZXNzYWdlcyBhbmQgbGV0dGVycwogICAgICAgZm9yIENhdGlsaW5lLCBmcm9tIFB1YmxpdXMgTGVudHVsdXMsIHRvIGF2YWlsIGhpbXNlbGYgb2YgdGhlIGd1YXJkIG9mIHRoZSBzbGF2ZXMsIGFuZCB0byBjb21lCiAgICAgICB0b3dhcmRzIHRoZSBjaXR5IHdpdGggaGlzIGFybXkgYXMgcXVpY2tseSBhcyBwb3NzaWJsZTsgYW5kIHRoYXQgd2FzIHRvIGJlIGRvbmUgd2l0aCB0aGUKICAgICAgIGludGVudGlvbiB0aGF0LCB3aGVuIHRoZXkgaGFkIHNldCBmaXJlIHRvIHRoZSBjaXR5IG9uIGFsbCBzaWRlcyBhcyBpdCBoYWQgYmVlbiBhcnJhbmdlZCBhbmQKICAgICAgIGRpc3RyaWJ1dGVkLCBhbmQgaGFkIG1hZGUgYSBncmVhdCBtYXNzYWNyZSBvZiB0aGUgY2l0aXplbnMsIGhlIG1pZ2h0IGJlIGF0IGhhbmQgdG8gY2F0Y2gKICAgICAgIHRob3NlIHdobyBmbGVkLCBhbmQgdG8gam9pbiBoaW1zZWxmIHRvIHRoZSBsZWFkZXJzIHdpdGhpbiB0aGUgY2l0eS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCB0aGUgR2F1bHMgYmVpbmcgaW50cm9kdWNlZCwgc2FpZCB0aGF0IGFuIG9hdGggaGFkIGJlZW4gYWRtaW5pc3RlcmVkIHRvCiAgICAgICAgPHBiIG49IjMwOCIgLz4gdGhlbSwgYW5kIGxldHRlcnMgZ2l2ZW4gdGhlbSBieSBQdWJsaXVzIExlbnR1bHVzLCBDZXRoZWd1cywgYW5kIFN0YXRpbGl1cywgZm9yCiAgICAgICB0aGVpciBuYXRpb247IGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW5qb2luZWQgYnkgdGhlbSwgYW5kIGJ5IEx1Y2l1cyBDYXNzaXVzLCB0byBzZW5kIGNhdmFscnkKICAgICAgIGludG8gSXRhbHkgYXMgZWFybHkgYXMgcG9zc2libGU7IHRoYXQgaW5mYW50cnkgc2hvdWxkIG5vdCBiZSB3YW50aW5nOyBhbmQgdGhhdCBMZW50dWx1cyBoYWQKICAgICAgIGFzc3VyZWQgaGltLCBmcm9tIHRoZSBTaWJ5bGxpbmUgb3JhY2xlcyBhbmQgdGhlIGFuc3dlcnMgb2Ygc29vdGhzYXllcnMsIHRoYXQgaGUgd2FzIHRoYXQKICAgICAgIHRoaXJkIENvcm5lbGl1cyB0byB3aG9tIHRoZSBraW5nZG9tIGFuZCBzb3ZlcmVpZ250eSBvdmVyIHRoaXMgY2l0eSB3YXMgZmF0ZWQgdG8gY29tZTsgdGhhdAogICAgICAgQ2lubmEgYW5kIFN1bGxhIGhhZCBiZWVuIGJlZm9yZSBoaW07IGFuZCB0aGF0IGhlIGhhZCBhbHNvIHNhaWQgdGhhdCB3YXMgdGhlIHllYXIgZGVzdGluZWQgdG8KICAgICAgIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHkgYW5kIGVtcGlyZSwgYmVpbmcgdGhlIHRlbnRoIHllYXIgYWZ0ZXIgdGhlIGFjcXVpdHRhbCBvZiB0aGUKICAgICAgIHZpcmdpbnMsIGFuZCB0aGUgdHdlbnRpZXRoIGFmdGVyIHRoZSBidXJuaW5nIG9mIHRoZSBDYXBpdG9sLiA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhleSBzYWlkIHRoZXJlIGhhZCBiZWVuIHRoaXMgZGlzcHV0ZSBiZXR3ZWVuIENldGhlZ3VzIGFuZCB0aGUgcmVzdCzigJR0aGF0CiAgICAgICBMZW50dWx1cyBhbmQgb3RoZXJzIHRob3VnaHQgaXQgYmVzdCB0aGF0IHRoZSBtYXNzYWNyZSBzaG91bGQgdGFrZSBwbGFjZSBhbmQgdGhlIGNpdHkgYmUgYnVybnQKICAgICAgIGF0IHRoZSBTYXR1cm5hbGlhLCBidXQgdGhhdCBDZXRoZWd1cyB0aG91Z2h0IGl0IHRvbyBsb25nIHRvIHdhaXQuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgdGhlIEdhdWxzIGJlaW5nIGludHJvZHVjZWQsIHNhaWQgdGhhdCBhbiBvYXRoIGhhZCBiZWVuIGFkbWluaXN0ZXJlZCB0bwogICAgICAgIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwOCIgLz4gdGhlbSwgYW5kIGxldHRlcnMgZ2l2ZW4gdGhlbSBieSBQdWJsaXVzIExlbnR1bHVzLCBDZXRoZWd1cywgYW5kIFN0YXRpbGl1cywgZm9yCiAgICAgICB0aGVpciBuYXRpb247IGFuZCB0aGF0IHRoZXkgaGFkIGJlZW4gZW5qb2luZWQgYnkgdGhlbSwgYW5kIGJ5IEx1Y2l1cyBDYXNzaXVzLCB0byBzZW5kIGNhdmFscnkKICAgICAgIGludG8gSXRhbHkgYXMgZWFybHkgYXMgcG9zc2libGU7IHRoYXQgaW5mYW50cnkgc2hvdWxkIG5vdCBiZSB3YW50aW5nOyBhbmQgdGhhdCBMZW50dWx1cyBoYWQKICAgICAgIGFzc3VyZWQgaGltLCBmcm9tIHRoZSBTaWJ5bGxpbmUgb3JhY2xlcyBhbmQgdGhlIGFuc3dlcnMgb2Ygc29vdGhzYXllcnMsIHRoYXQgaGUgd2FzIHRoYXQKICAgICAgIHRoaXJkIENvcm5lbGl1cyB0byB3aG9tIHRoZSBraW5nZG9tIGFuZCBzb3ZlcmVpZ250eSBvdmVyIHRoaXMgY2l0eSB3YXMgZmF0ZWQgdG8gY29tZTsgdGhhdAogICAgICAgQ2lubmEgYW5kIFN1bGxhIGhhZCBiZWVuIGJlZm9yZSBoaW07IGFuZCB0aGF0IGhlIGhhZCBhbHNvIHNhaWQgdGhhdCB3YXMgdGhlIHllYXIgZGVzdGluZWQgdG8KICAgICAgIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGlzIGNpdHkgYW5kIGVtcGlyZSwgYmVpbmcgdGhlIHRlbnRoIHllYXIgYWZ0ZXIgdGhlIGFjcXVpdHRhbCBvZiB0aGUKICAgICAgIHZpcmdpbnMsIGFuZCB0aGUgdHdlbnRpZXRoIGFmdGVyIHRoZSBidXJuaW5nIG9mIHRoZSBDYXBpdG9sLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHRoZXkgc2FpZCB0aGVyZSBoYWQgYmVlbiB0aGlzIGRpc3B1dGUgYmV0d2VlbiBDZXRoZWd1cyBhbmQgdGhlIHJlc3Qs4oCUdGhhdAogICAgICAgTGVudHVsdXMgYW5kIG90aGVycyB0aG91Z2h0IGl0IGJlc3QgdGhhdCB0aGUgbWFzc2FjcmUgc2hvdWxkIHRha2UgcGxhY2UgYW5kIHRoZSBjaXR5IGJlIGJ1cm50CiAgICAgICBhdCB0aGUgU2F0dXJuYWxpYSwgYnV0IHRoYXQgQ2V0aGVndXMgdGhvdWdodCBpdCB0b28gbG9uZyB0byB3YWl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kLCBub3QgdG8gZGV0YWluIHlvdSwgTyBSb21hbnMsIHdlIG9yZGVyZWQgdGhlIGxldHRlcnMgdG8gYmUgYnJvdWdodCBmb3J3YXJkIHdoaWNoIHdlcmUKICAgICAgIHNhaWQgdG8gaGF2ZSBiZWVuIGdpdmVuIHRoZW0gYnkgZWFjaCBvZiB0aGUgbWVuLiBGaXJzdCBJIHNob3dlZCBoaXMgc2VhbCB0byBDZXRoZWd1czsgaGUKICAgICAgIHJlY29nbmlzZWQgaXQ6IHdlIGN1dCB0aGUgdGhyZWFkOyB3ZSByZWFkIHRoZSBsZXR0ZXIuIEl0IHdhcyB3cml0dGVuIHdpdGggaGlzIG93biBoYW5kOiB0aGF0CiAgICAgICBoZSB3b3VsZCBkbyBmb3IgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIG9mIHRoZSBBbGxvYnJvZ2VzIHdoYXQgaGUgaGFkIHByb21pc2VkIHRoZWlyCiAgICAgICBhbWJhc3NhZG9yczsgYW5kIHRoYXQgaGUgYmVnZ2VkIHRoZW0gYWxzbyB0byBkbyB3aGF0IHRoZWlyIGFtYmFzc2Fkb3JzIGhhZCBhcnJhbmdlZC4gVGhlbgogICAgICAgQ2V0aGVndXMsIHdobyBhIGxpdHRsZSBiZWZvcmUgaGFkIG1hZGUgYW5zd2VyIGFib3V0IHRoZSBzd29yZHMgYW5kIGRhZ2dlcnMgd2hpY2ggaGFkIGJlZW4KICAgICAgIGZvdW5kIGluIGhpcyBob3VzZSwgYW5kIGhhZCBzYWlkIHRoYXQgaGUgaGFkIGFsd2F5cyBiZWVuIGZvbmQgb2YgZmluZSBhcm1zLCBiZWluZyBzdHJpY2tlbgogICAgICAgZG93biBhbmQgZGVqZWN0ZWQgYXQgdGhlIHJlYWRpbmcgb2YgaGlzIGxldHRlcnMsIGNvbnZpY3RlZCBieSBoaXMgb3duIGNvbnNjaWVuY2UsIGJlY2FtZQogICAgICAgc3VkZGVubHkgc2lsZW50LiBTdGF0aWxpdXMsIGJlaW5nIGludHJvZHVjZWQsIG93bmVkIGhpcyBoYW5kd3JpdGluZyBhbmQgaGlzIHNlYWwuIEhpcyBsZXR0ZXJzCiAgICAgICB3ZXJlIHJlYWQsIG9mIG5lYXJseSB0aGUgc2FtZSB0ZW5vcjogaGUgY29uZmVzc2VkIGl0LiBUaGVuIEkgc2hvd2VkIExlbnR1bHVzIGhpcyBsZXR0ZXJzLCBhbmQKICAgICAgIGFza2VkIGhpbSB3aGV0aGVyIGhlIHJlY29nbmlzZWQgdGhlIHNlYWw/IEhlIG5vZGRlZCBhc3NlbnQuIEJ1dCBpdCBpcywgc2FpZCBJLCBhIHdlbGwta25vd24KICAgICAgIHNlYWw74oCUdGhlIGxpa2VuZXNzIG9mIHlvdXIgZ3JhbmRmYXRoZXIsIGEgbW9zdCBpbGx1c3RyaW91cyBtYW4sIHdobyBncmVhdGx5IGxvdmVkCiAgICAgICBoaXMgY291bnRyeSBhbmQgaGlzIGZlbGxvdy1jaXRpemVuczsgYW5kIGl0IGV2ZW4gdGhvdWdoIHNpbGVudCwgb3VnaHQgdG8gaGF2ZSBjYWxsZWQgeW91IGJhY2sKICAgICAgIGZyb20gc3VjaCB3aWNrZWRuZXNzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzIGFyZSByZWFkIG9mIHRoZSBzYW1lIHRlbm9yIHRvIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBvZiB0aGUgQWxsb2Jyb2dlcy4gSSBvZmZlcmVkCiAgICAgICBoaW0gbGVhdmUsIGlmIGhlIHdpc2hlZCB0byBzYXkgYW55dGhpbmcgb2YgdGhlc2UgbWF0dGVyczogYW5kIGF0IGZpcnN0IGhlIGRlY2xpbmVkIHRvIHNwZWFrOwogICAgICAgYnV0IGEgbGl0dGxlIGFmdGVyd2FyZHMsIHdoZW4gdGhlIHdob2xlIGV4YW1pbmF0aW9uIGhhZCBiZWVuIGdvbmUgdGhyb3VnaCBhbmQgY29uY2x1ZGVkLCBoZQogICAgICAgcm9zZS4gSGUgYXNrZWQgdGhlIEdhdWxzIHdoYXQgaGUgaGFkIGhhZCB0byBkbyB3aXRoIHRoZW0/IHdoeSB0aGV5IGhhZCBjb21lIHRvIGhpcyBob3VzZT8gYW5kCiAgICAgICBoZSBhc2tlZCBWdWx0dXJjaXVzIHRvby4gQW5kIHdoZW4gdGhleSBoYWQgYW5zd2VyZWQgaGltIGJyaWVmbHkgYW5kIHN0ZWFkaWx5LCB1bmRlciB3aG9zZQogICAgICAgZ3VpZGFuY2UgdGhleSBoYWQgY29tZSB0byBoaW0sIGFuZCBob3cgb2Z0ZW47IGFuZCB3aGVuIHRoZXkgYXNrZWQgaGltIHdoZXRoZXIgaGUgaGFkIHNhaWQKICAgICAgIG5vdGhpbmcgdG8gdGhlbSBhYm91dCB0aGUgU2lieWxsaW5lIG9yYWNsZXMsIHRoZW4gaGUgb24gYSBzdWRkZW4sIG1hZCB3aXRoIHdpY2tlZG5lc3MsIHNob3dlZAogICAgICAgaG93IGdyZWF0IHdhcyB0aGUgcG93ZXIgb2YgY29uc2NpZW5jZTsgZm9yIHRob3VnaCBoZSBtaWdodCBoYXZlIGRlbmllZCBpdCwgaGUgc3VkZGVubHksCiAgICAgICBjb250cmFyeSB0byBldmVyeSBvbmUncyBleHBlY3RhdGlvbiBjb25mZXNzZWQgaXQ6IHNvIG5vdCBvbmx5IGRpZCBoaXMgZ2VuaXVzIGFuZCBza2lsbCBpbgogICAgICAgb3JhdG9yeSwgZm9yIHdoaWNoIGhlIHdhcyBhbHdheXMgZW1pbmVudCwgYnV0IGV2ZW4gdGhyb3VnaCB0aGUgcG93ZXIgb2YgaGlzIG1hbmlmZXN0IGFuZAogICAgICAgZGV0ZWN0ZWQgd2lja2VkbmVzcywgdGhhdCBpbXB1ZGVuY2UgaW4gd2hpY2ggaGUgc3VycGFzc2VkIGFsbCBtZW4sIGFuZCBhdWRhY2l0eSBkZXNlcnRlZCBoaW0uIDwvcD4KCQkJCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+IEJ1dCBWdWx0dXJjaXVzIG9uIGEgc3VkZGVuIG9yZGVyZWQgdGhlIGxldHRlcnMgdG8gYmUKICAgICAgIHByb2R1Y2VkIGFuZCBvcGVuZWQgd2hpY2ggaGUgc2FpZCBoYWQgYmVlbiBnaXZlbiB0byBoaW0gZm9yIENhdGlsaW5lLCBieSBMZW50dWx1cy4gQW5kIHRob3VnaAogICAgICAgTGVudHVsdXMgd2FzIGdyZWF0bHkgYWdpdGF0ZWQgYXQgdGhhdCwgeWV0IGhlIGFja25vd2xlZGdlZCBoaXMgc2VhbCBhbmQgaGlzIGhhbmR3cml0aW5nOyBidXQKICAgICAgIHRoZSBsZXR0ZXIgd2FzIGFub255bW91cywgYW5kIHJhbiB0aHVzOuKAlOKAnFdobyBJIGFtIHlvdSB3aWxsIGtub3cgZnJvbSBoaW0KICAgICAgIHdob20gSSBoYXZlIHNlbnQgdG8geW91OiB0YWtlIGNhcmUgdG8gYmVoYXZlIGxpa2UgYSBtYW4sIGFuZCBjb25zaWRlciB0byB3aGF0IHBsYWNlIHlvdSBoYXZlCiAgICAgICBwcm9jZWVkZWQsIGFuZCBwcm92aWRlIGZvciB3aGF0IGlzIG5vdyBuZWNlc3NhcnkgZm9yIHlvdTogdGFrZSBjYXJlIHRvIGFzc29jaWF0ZSB0byB5b3Vyc2VsZgogICAgICAgdGhlIGFzc2lzdGFuY2Ugb2YgZXZlcnkgb25lLCBldmVuIG9mIHRoZSBwb3dlcmxlc3Mu4oCdIFRoZW4gR2FiaW5pdXMgYmVpbmcKICAgICAgIGludHJvZHVjZWQsIHdoZW4gYXQgZmlyc3QgaGUgaGFkIGJlZ3VuIHRvIGFuc3dlciBpbXB1ZGVudGx5LCBhdCBsYXN0IGRlbmllZCBub3RoaW5nIG9mIHRob3NlCiAgICAgICB0aGluZ3Mgd2hpY2ggdGhlIEdhdWxzIGFsbGVnZWQgYWdhaW5zdCBoaW0uIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCB0byBtZSwKICAgICAgIGluZGVlZCwgTyBSb21hbnMsIHRob3VnaCB0aGUgbGV0dGVycywgdGhlIHNlYWxzLCB0aGUgaGFuZHdyaXRpbmcsIGFuZCB0aGUgY29uZmVzc2lvbiBvZiBlYWNoCiAgICAgICBpbmRpdmlkdWFsIHNlZW1lZCBtb3N0IGNlcnRhaW4gaW5kaWNhdGlvbnMgYW5kIHByb29mcyBvZiB3aWNrZWRuZXNzLCB5ZXQgdGhlaXIgY29sb3VyLCB0aGVpcgogICAgICAgZXllcywgdGhlaXIgY291bnRlbmFuY2UsIHRoZWlyIHNpbGVuY2UsIGFwcGVhcmVkIG1vcmUgY2VydGFpbiBzdGlsbDsgZm9yIHRoZXkgc3Rvb2Qgc28KICAgICAgIHN0dXBlZmllZCwgdGhleSBrZXB0IHRoZWlyIGV5ZXMgc28gZml4ZWQgb24gdGhlIGdyb3VuZCwgYXQgdGltZXMgbG9va2luZyBzdGVhbHRoaWx5IGF0IG9uZQogICAgICAgYW5vdGhlciwgdGhhdCB0aGV5IGFwcGVhcmVkIG5vdyBub3Qgc28gbXVjaCB0byBiZSBpbmZvcm1lZCBhZ2FpbnN0IGJ5IG90aGVycyBhcyB0byBiZQogICAgICAgaW5mb3JtaW5nIGFnYWluc3QgdGhlbXNlbHZlcy4gPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IFZ1bHR1cmNpdXMgb24gYSBzdWRkZW4gb3JkZXJlZCB0aGUgbGV0dGVycyB0byBiZQogICAgICAgcHJvZHVjZWQgYW5kIG9wZW5lZCB3aGljaCBoZSBzYWlkIGhhZCBiZWVuIGdpdmVuIHRvIGhpbSBmb3IgQ2F0aWxpbmUsIGJ5IExlbnR1bHVzLiBBbmQgdGhvdWdoCiAgICAgICBMZW50dWx1cyB3YXMgZ3JlYXRseSBhZ2l0YXRlZCBhdCB0aGF0LCB5ZXQgaGUgYWNrbm93bGVkZ2VkIGhpcyBzZWFsIGFuZCBoaXMgaGFuZHdyaXRpbmc7IGJ1dAogICAgICAgdGhlIGxldHRlciB3YXMgYW5vbnltb3VzLCBhbmQgcmFuIHRodXM64oCU4oCcV2hvIEkgYW0geW91IHdpbGwga25vdyBmcm9tIGhpbQogICAgICAgd2hvbSBJIGhhdmUgc2VudCB0byB5b3U6IHRha2UgY2FyZSB0byBiZWhhdmUgbGlrZSBhIG1hbiwgYW5kIGNvbnNpZGVyIHRvIHdoYXQgcGxhY2UgeW91IGhhdmUKICAgICAgIHByb2NlZWRlZCwgYW5kIHByb3ZpZGUgZm9yIHdoYXQgaXMgbm93IG5lY2Vzc2FyeSBmb3IgeW91OiB0YWtlIGNhcmUgdG8gYXNzb2NpYXRlIHRvIHlvdXJzZWxmCiAgICAgICB0aGUgYXNzaXN0YW5jZSBvZiBldmVyeSBvbmUsIGV2ZW4gb2YgdGhlIHBvd2VybGVzcy7igJ0gVGhlbiBHYWJpbml1cyBiZWluZwogICAgICAgaW50cm9kdWNlZCwgd2hlbiBhdCBmaXJzdCBoZSBoYWQgYmVndW4gdG8gYW5zd2VyIGltcHVkZW50bHksIGF0IGxhc3QgZGVuaWVkIG5vdGhpbmcgb2YgdGhvc2UKICAgICAgIHRoaW5ncyB3aGljaCB0aGUgR2F1bHMgYWxsZWdlZCBhZ2FpbnN0IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['3.5.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRvIG1lLAogICAgICAgaW5kZWVkLCBPIFJvbWFucywgdGhvdWdoIHRoZSBsZXR0ZXJzLCB0aGUgc2VhbHMsIHRoZSBoYW5kd3JpdGluZywgYW5kIHRoZSBjb25mZXNzaW9uIG9mIGVhY2gKICAgICAgIGluZGl2aWR1YWwgc2VlbWVkIG1vc3QgY2VydGFpbiBpbmRpY2F0aW9ucyBhbmQgcHJvb2ZzIG9mIHdpY2tlZG5lc3MsIHlldCB0aGVpciBjb2xvdXIsIHRoZWlyCiAgICAgICBleWVzLCB0aGVpciBjb3VudGVuYW5jZSwgdGhlaXIgc2lsZW5jZSwgYXBwZWFyZWQgbW9yZSBjZXJ0YWluIHN0aWxsOyBmb3IgdGhleSBzdG9vZCBzbwogICAgICAgc3R1cGVmaWVkLCB0aGV5IGtlcHQgdGhlaXIgZXllcyBzbyBmaXhlZCBvbiB0aGUgZ3JvdW5kLCBhdCB0aW1lcyBsb29raW5nIHN0ZWFsdGhpbHkgYXQgb25lCiAgICAgICBhbm90aGVyLCB0aGF0IHRoZXkgYXBwZWFyZWQgbm93IG5vdCBzbyBtdWNoIHRvIGJlIGluZm9ybWVkIGFnYWluc3QgYnkgb3RoZXJzIGFzIHRvIGJlCiAgICAgICBpbmZvcm1pbmcgYWdhaW5zdCB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHByb2R1Y2VkIGFuZCBkaXZ1bGdlZCB0aGVzZSBwcm9vZnMsIE8gUm9tYW5zLCBJIGNvbnN1bHRlZCB0aGUgc2VuYXRlIHdoYXQgb3VnaHQgdG8KICAgICAgIGJlIGRvbmUgZm9yIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHJlcHVibGljLiBWaWdvcm91cyBhbmQgZmVhcmxlc3Mgb3BpbmlvbnMgd2VyZSBkZWxpdmVyZWQgYnkKICAgICAgIHRoZSBjaGllZiBtZW4sIHdoaWNoIHRoZSBzZW5hdGUgYWRvcHRlZCB3aXRob3V0IGFueSB2YXJpZXR5OyBhbmQgc2luY2UgdGhlIGRlY3JlZSBvZiB0aGUKICAgICAgIHNlbmF0ZSBpcyBub3QgeWV0IHdyaXR0ZW4gb3V0LCBJIHdpbGwgcmVsYXRlIHRvIHlvdSBmcm9tIG1lbW9yeSwgTyBjaXRpemVucywgd2hhdCB0aGUgc2VuYXRlCiAgICAgICBoYXMgZGVjcmVlZC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPiBGaXJzdCBvZiBhbGwsIGEgdm90ZSBvZiB0aGFua3MgdG8gbWUgaXMKICAgICAgIHBhc3NlZCBpbiB0aGUgbW9zdCBob25vdXJhYmxlIHdvcmRzLCBiZWNhdXNlIHRoZSByZXB1YmxpYyBoYXMgYmVlbiBkZWxpdmVyZWQgZnJvbSB0aGUKICAgICAgIGdyZWF0ZXN0IGRhbmdlcnMgYnkgbXkgdmFsb3VyIDxwYiBuPSIzMTAiIC8+IGFuZCB3aXNkb20sIGFuZCBwcnVkZW5jZS4gVGhlbiBMdWNpdXMgRmxhY2N1cyBhbmQKICAgICAgIENhaXVzIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGFyZSBkZXNlcnZlZGx5IGFuZCByaWdodGx5IHByYWlzZWQsIGJlY2F1c2UgSSBoYWQgYXZhaWxlZAogICAgICAgbXlzZWxmIG9mIHRoZWlyIGJyYXZlIGFuZCBsb3lhbCBhc3Npc3RhbmNlLiBBbmQgYWxzbywgcHJhaXNlIGlzIGdpdmVuIHRvIHRoYXQgYnJhdmUgbWFuLCBteQogICAgICAgY29sbGVhZ3VlLCBiZWNhdXNlIGhlIGhhZCByZW1vdmVkIGZyb20gaGlzIGNvdW5zZWxzLCBhbmQgZnJvbSB0aGUgY291bnNlbHMgb2YgdGhlIHJlcHVibGljLAogICAgICAgdGhlc2Ugd2hvIGhhZCBiZWVuIGFjY29tcGxpY2VzIGluIHRoaXMgY29uc3BpcmFjeS4gQW5kIHRoZXkgdm90ZWQgdGhhdCBQdWJsaXVzIExlbnR1bHVzLCB3aGVuCiAgICAgICBoZSBoYWQgYWJkaWNhdGVkIHRoZSBwcmFldG9yc2hpcCwgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFsc28sIHRoYXQgQ2FpdXMKICAgICAgIENldGhlZ3VzLCBMdWNpdXMgU3RhdGlsaXVzLCBQdWJsaXVzIEdhYmluaXVzLCB3aG8gd2VyZSBhbGwgcHJlc2VudCwgc2hvdWxkIGJlIGdpdmVuIGludG8KICAgICAgIGN1c3RvZHk6IGFuZCB0aGUgc2FtZSBkZWNyZWUgd2FzIHBhc3NlZCBhZ2FpbnN0IEx1Y2l1cyBDYXNzaXVzLCB3aG8gaGFkIGJlZ2dlZCBmb3IgaGltc2VsZgogICAgICAgdGhlIG9mZmljZSBvZiBidXJuaW5nIHRoZSBjaXR5OyBhZ2FpbnN0IE1hcmN1cyBDYXBhcml1cywgdG8gd2hvbSBpdCBoYWQgYmVlbiBwcm92ZWQgdGhhdAogICAgICAgQXB1bGlhIGhhZCBiZWVuIGFsbG90dGVkIGZvciB0aGUgcHVycG9zZSBvZiBleGNpdGluZyBkaXNhZmZlY3Rpb24gYW1vbmcgdGhlIHNoZXBoZXJkczsKICAgICAgIGFnYWluc3QgUHVibGl1cyBGdXJpdXMsIHdobyBiZWxvbmdzIHRvIHRoZSBjb2xvbmllcyB3aGljaCBMdWNpdXMgU3VsbGEgbGVkIHRvIEZhZXN1bGFlOwogICAgICAgYWdhaW5zdCBRdWludHVzIE1hbmxpdXMgQ2hpbG8sIHdobyB3YXMgYWx3YXlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1hbiBGdXJpdXMgaW4gaGlzCiAgICAgICB0YW1wZXJpbmcgd2l0aCB0aGUgQWxsb2Jyb2dlczsgYWdhaW5zdCBQdWJsaXVzIFVtYnJlbnVzLCBhIGZyZWVkbWFuLCBieSB3aG9tIGl0IHdhcyBwcm92ZWQKICAgICAgIHRoYXQgdGhlIEdhdWxzIHdlcmUgb3JpZ2luYWxseSBicm91Z2h0IHRvIEdhYmluaXVzLiA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz4gRmlyc3Qgb2YgYWxsLCBhIHZvdGUgb2YgdGhhbmtzIHRvIG1lIGlzCiAgICAgICBwYXNzZWQgaW4gdGhlIG1vc3QgaG9ub3VyYWJsZSB3b3JkcywgYmVjYXVzZSB0aGUgcmVwdWJsaWMgaGFzIGJlZW4gZGVsaXZlcmVkIGZyb20gdGhlCiAgICAgICBncmVhdGVzdCBkYW5nZXJzIGJ5IG15IHZhbG91ciA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTAiIC8+IGFuZCB3aXNkb20sIGFuZCBwcnVkZW5jZS4gVGhlbiBMdWNpdXMgRmxhY2N1cyBhbmQKICAgICAgIENhaXVzIFBvbXRpbnVzLCB0aGUgcHJhZXRvcnMsIGFyZSBkZXNlcnZlZGx5IGFuZCByaWdodGx5IHByYWlzZWQsIGJlY2F1c2UgSSBoYWQgYXZhaWxlZAogICAgICAgbXlzZWxmIG9mIHRoZWlyIGJyYXZlIGFuZCBsb3lhbCBhc3Npc3RhbmNlLiBBbmQgYWxzbywgcHJhaXNlIGlzIGdpdmVuIHRvIHRoYXQgYnJhdmUgbWFuLCBteQogICAgICAgY29sbGVhZ3VlLCBiZWNhdXNlIGhlIGhhZCByZW1vdmVkIGZyb20gaGlzIGNvdW5zZWxzLCBhbmQgZnJvbSB0aGUgY291bnNlbHMgb2YgdGhlIHJlcHVibGljLAogICAgICAgdGhlc2Ugd2hvIGhhZCBiZWVuIGFjY29tcGxpY2VzIGluIHRoaXMgY29uc3BpcmFjeS4gQW5kIHRoZXkgdm90ZWQgdGhhdCBQdWJsaXVzIExlbnR1bHVzLCB3aGVuCiAgICAgICBoZSBoYWQgYWJkaWNhdGVkIHRoZSBwcmFldG9yc2hpcCwgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFsc28sIHRoYXQgQ2FpdXMKICAgICAgIENldGhlZ3VzLCBMdWNpdXMgU3RhdGlsaXVzLCBQdWJsaXVzIEdhYmluaXVzLCB3aG8gd2VyZSBhbGwgcHJlc2VudCwgc2hvdWxkIGJlIGdpdmVuIGludG8KICAgICAgIGN1c3RvZHk6IGFuZCB0aGUgc2FtZSBkZWNyZWUgd2FzIHBhc3NlZCBhZ2FpbnN0IEx1Y2l1cyBDYXNzaXVzLCB3aG8gaGFkIGJlZ2dlZCBmb3IgaGltc2VsZgogICAgICAgdGhlIG9mZmljZSBvZiBidXJuaW5nIHRoZSBjaXR5OyBhZ2FpbnN0IE1hcmN1cyBDYXBhcml1cywgdG8gd2hvbSBpdCBoYWQgYmVlbiBwcm92ZWQgdGhhdAogICAgICAgQXB1bGlhIGhhZCBiZWVuIGFsbG90dGVkIGZvciB0aGUgcHVycG9zZSBvZiBleGNpdGluZyBkaXNhZmZlY3Rpb24gYW1vbmcgdGhlIHNoZXBoZXJkczsKICAgICAgIGFnYWluc3QgUHVibGl1cyBGdXJpdXMsIHdobyBiZWxvbmdzIHRvIHRoZSBjb2xvbmllcyB3aGljaCBMdWNpdXMgU3VsbGEgbGVkIHRvIEZhZXN1bGFlOwogICAgICAgYWdhaW5zdCBRdWludHVzIE1hbmxpdXMgQ2hpbG8sIHdobyB3YXMgYWx3YXlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1hbiBGdXJpdXMgaW4gaGlzCiAgICAgICB0YW1wZXJpbmcgd2l0aCB0aGUgQWxsb2Jyb2dlczsgYWdhaW5zdCBQdWJsaXVzIFVtYnJlbnVzLCBhIGZyZWVkbWFuLCBieSB3aG9tIGl0IHdhcyBwcm92ZWQKICAgICAgIHRoYXQgdGhlIEdhdWxzIHdlcmUgb3JpZ2luYWxseSBicm91Z2h0IHRvIEdhYmluaXVzLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB0aGUgc2VuYXRlLCBPIGNpdGl6ZW5zLCBhY3RlZCB3aXRoIHN1Y2ggbGVuaXR5LCB0aGF0LCBvdXQgb2Ygc28gZ3JlYXQgYSBjb25zcGlyYWN5LCBhbmQKICAgICAgIHN1Y2ggYSBudW1iZXIgYW5kIG11bHRpdHVkZSBvZiBkb21lc3RpYyBlbmVtaWVzLCBpdCB0aG91Z2h0IHRoYXQgc2luY2UgdGhlIHJlcHVibGljIHdhcwogICAgICAgc2F2ZWQsIHRoZSBtaW5kcyBvZiB0aGUgcmVzdCBtaWdodCBiZSByZXN0b3JlZCB0byBhIGhlYWx0aHkgc3RhdGUgYnkgdGhlIHB1bmlzaG1lbnQgb2YgbmluZQogICAgICAgbW9zdCBhYmFuZG9uZWQgbWVuLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+IEFuZCBhbHNvIGEgc3VwcGxpY2F0aW9uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+QSBzdXBwbGljYXRpb24gd2FzIGEgc29sZW1uIHRoYW5rc2dpdmluZyB0byB0aGUgZ29kcywgZGVjcmVlZCBieSB0aGUgc2VuYXRlLAogICAgICAgIHdoZW4gYWxsIHRoZSB0ZW1wbGVzIHdlcmUgb3BlbmVkIGFuZCB0aGUgc3RhdHVlcyBvZiB0aGUgZ29kcyBwbGFjZWQgaW4gcHVibGljIHVwb24gY291Y2hlcwogICAgICAgICAoPGZvcmVpZ24gbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wYWx1ZGFtZW50dW08L2ZvcmVpZ24+LCBvciBtaWxpdGFyeSByb2JlLiA8L25vdGU+IHdhcyBkZWNyZWVkIGluIG15IG5hbWUsICh3aGljaCBpcyB0aGUKICAgICAgIGZpcnN0IHRpbWUgc2luY2UgdGhlIGJ1aWxkaW5nIG9mIHRoZSBjaXR5IHRoYXQgc3VjaCBhbiBob25vdXIgaGFzIGV2ZXIgYmVlbiBwYWlkIHRvIGEgbWFuIGluCiAgICAgICBhIGNpdmlsIGNhcGFjaXR5LCkgdG8gdGhlIGltbW9ydGFsIGdvZHMsIGZvciB0aGVpciBzaW5ndWxhciBraW5kbmVzcy4gQW5kIGl0IHdhcyBkZWNyZWVkIGluCiAgICAgICB0aGVzZSB3b3Jkcywg4oCcYmVjYXVzZSBJIGhhZCBkZWxpdmVyZWQgdGhlIGNpdHkgZnJvbSBjb25mbGFncmF0aW9ucywgdGhlIGNpdGl6ZW5zCiAgICAgICBmcm9tIG1hc3NhY3JlLCBhbmQgSXRhbHkgZnJvbSB3YXIu4oCdIEFuZCBpZiB0aGlzIHN1cHBsaWNhdGlvbiBiZSBjb21wYXJlZCB3aXRoCiAgICAgICBvdGhlcnMsIE8gY2l0aXplbnMsIHRoZXJlIGlzIHRoaXMgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZW0s4oCUdGhhdCBhbGwgb3RoZXJzIGhhdmUKICAgICAgIGJlZW4gYXBwb2ludGVkIGJlY2F1c2Ugb2YgdGhlIHN1Y2Nlc3NlcyBvZiB0aGUgcmVwdWJsaWM7IHRoaXMgb25lIGFsb25lIGZvciBpdHMgcHJlc2VydmF0aW9uLgogICAgICAgQW5kIHRoYXQgd2hpY2ggd2FzIHRoZSBmaXJzdCB0aGluZyB0byBiZSBkb25lLCBoYXMgYmVlbiBkb25lIGFuZCBleGVjdXRlZDsgZm9yIFB1YmxpdXMKICAgICAgIExlbnR1bHVzLCB0aG91Z2gsIGJlaW5nIGNvbnZpY3RlZCBieSBwcm9vZnMgYW5kLCBieSBoaXMgb3duIGNvbmZlc3Npb24sIGJ5IHRoZSBqdWRnbWVudCBvZgogICAgICAgdGhlIHNlbmF0ZSBoZSBoYWQgbG9zdCBub3Qgb25seSB0aGUgcmlnaHRzIG9mIGEgcHJhZXRvciBidXQgYWxzbyB0aG9zZSBvZiBhIGNpdGl6ZW4sIHN0aWxsCiAgICAgICByZXNpZ25lZCBoaXMgb2ZmaWNlOyBzbyB0aGF0IHRob3VnaCBDYWl1cyBNYXJjaXVzLCB0aGF0IG1vc3QgaWxsdXN0cmlvdXMgb2YgbWVuLCBoYWQgbm8KICAgICAgIHNjcnVwbGVzIGFib3V0IHB1dHRpbmcgdG8gZGVhdGggQ2FpdXMgR2xhdWNpdXMgdGhlIHByYWV0b3IgYWdhaW5zdCB3aG9tIG5vdGhpbmcgaGFkIGJlZW4KICAgICAgIGRlY3JlZWQgYnkgbmFtZSwgc3RpbGwgd2UgYXJlIHJlbGlldmVkIGZyb20gdGhhdCBzY3J1cGxlIGluIHRoZSBjYXNlIG9mIFB1YmxpdXMgTGVudHVsdXMsIHdobwogICAgICAgaXMgbm93IGEgcHJpdmF0ZSBpbmRpdmlkdWFsLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGFsc28gYSBzdXBwbGljYXRpb24gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPkEgc3VwcGxpY2F0aW9uIHdhcyBhIHNvbGVtbiB0aGFua3NnaXZpbmcgdG8gdGhlIGdvZHMsIGRlY3JlZWQgYnkgdGhlIHNlbmF0ZSwKICAgICAgICB3aGVuIGFsbCB0aGUgdGVtcGxlcyB3ZXJlIG9wZW5lZCBhbmQgdGhlIHN0YXR1ZXMgb2YgdGhlIGdvZHMgcGxhY2VkIGluIHB1YmxpYyB1cG9uIGNvdWNoZXMKICAgICAgICAgKDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBhbHVkYW1lbnR1bTwvZm9yZWlnbj4sIG9yIG1pbGl0YXJ5IHJvYmUuIDwvbm90ZT4gd2FzIGRlY3JlZWQgaW4gbXkgbmFtZSwgKHdoaWNoIGlzIHRoZQogICAgICAgZmlyc3QgdGltZSBzaW5jZSB0aGUgYnVpbGRpbmcgb2YgdGhlIGNpdHkgdGhhdCBzdWNoIGFuIGhvbm91ciBoYXMgZXZlciBiZWVuIHBhaWQgdG8gYSBtYW4gaW4KICAgICAgIGEgY2l2aWwgY2FwYWNpdHksKSB0byB0aGUgaW1tb3J0YWwgZ29kcywgZm9yIHRoZWlyIHNpbmd1bGFyIGtpbmRuZXNzLiBBbmQgaXQgd2FzIGRlY3JlZWQgaW4KICAgICAgIHRoZXNlIHdvcmRzLCDigJxiZWNhdXNlIEkgaGFkIGRlbGl2ZXJlZCB0aGUgY2l0eSBmcm9tIGNvbmZsYWdyYXRpb25zLCB0aGUgY2l0aXplbnMKICAgICAgIGZyb20gbWFzc2FjcmUsIGFuZCBJdGFseSBmcm9tIHdhci7igJ0gQW5kIGlmIHRoaXMgc3VwcGxpY2F0aW9uIGJlIGNvbXBhcmVkIHdpdGgKICAgICAgIG90aGVycywgTyBjaXRpemVucywgdGhlcmUgaXMgdGhpcyBkaWZmZXJlbmNlIGJldHdlZW4gdGhlbSzigJR0aGF0IGFsbCBvdGhlcnMgaGF2ZQogICAgICAgYmVlbiBhcHBvaW50ZWQgYmVjYXVzZSBvZiB0aGUgc3VjY2Vzc2VzIG9mIHRoZSByZXB1YmxpYzsgdGhpcyBvbmUgYWxvbmUgZm9yIGl0cyBwcmVzZXJ2YXRpb24uCiAgICAgICBBbmQgdGhhdCB3aGljaCB3YXMgdGhlIGZpcnN0IHRoaW5nIHRvIGJlIGRvbmUsIGhhcyBiZWVuIGRvbmUgYW5kIGV4ZWN1dGVkOyBmb3IgUHVibGl1cwogICAgICAgTGVudHVsdXMsIHRob3VnaCwgYmVpbmcgY29udmljdGVkIGJ5IHByb29mcyBhbmQsIGJ5IGhpcyBvd24gY29uZmVzc2lvbiwgYnkgdGhlIGp1ZGdtZW50IG9mCiAgICAgICB0aGUgc2VuYXRlIGhlIGhhZCBsb3N0IG5vdCBvbmx5IHRoZSByaWdodHMgb2YgYSBwcmFldG9yIGJ1dCBhbHNvIHRob3NlIG9mIGEgY2l0aXplbiwgc3RpbGwKICAgICAgIHJlc2lnbmVkIGhpcyBvZmZpY2U7IHNvIHRoYXQgdGhvdWdoIENhaXVzIE1hcmNpdXMsIHRoYXQgbW9zdCBpbGx1c3RyaW91cyBvZiBtZW4sIGhhZCBubwogICAgICAgc2NydXBsZXMgYWJvdXQgcHV0dGluZyB0byBkZWF0aCBDYWl1cyBHbGF1Y2l1cyB0aGUgcHJhZXRvciBhZ2FpbnN0IHdob20gbm90aGluZyBoYWQgYmVlbgogICAgICAgZGVjcmVlZCBieSBuYW1lLCBzdGlsbCB3ZSBhcmUgcmVsaWV2ZWQgZnJvbSB0aGF0IHNjcnVwbGUgaW4gdGhlIGNhc2Ugb2YgUHVibGl1cyBMZW50dWx1cywgd2hvCiAgICAgICBpcyBub3cgYSBwcml2YXRlIGluZGl2aWR1YWwuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1bHZpbmFyaWE8L2ZvcmVpZ24+KSwgdG8gd2hpY2ggdGhlIHBlb3BsZSBvZmZlcmVkIHVwIHRoZWlyCiAgICAgICAgdGhhbmtzZ2l2aW5ncyBhbmQgcHJheWVycy4gSXQgd2FzIHVzdWFsbHkgZGVjcmVlZCBvbiB0aGUgaW50ZWxsaWdlbmNlIGFycml2aW5nIG9mIGFueSBncmVhdAogICAgICAgIHZpY3RvcnksIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgd2hpY2ggaXQgd2FzIHRvIGxhc3Qgd2FzIHByb3BvcnRpb25lZCB0byB0aGUgaW1wb3J0YW5jZSBvZgogICAgICAgIHRoZSB2aWN0b3J5LiBJdCB3YXMgZ2VuZXJhbGx5IHJlZ2FyZGVkIGFzIGEgcHJlbHVkZSB0byBhIHRyaXVtcGguIE9mIGNvdXJzZSwgZnJvbSB3aGF0IGhhcwogICAgICAgIGJlZW4gc2FpZCwgaXQgbXVzdCBoYXZlIGJlZW4gdXN1YWxseSBjb25maW5lZCB0byBnZW5lcmFsczsgd2hvIGxhaWQgYXNpZGUgdGhlIHRvZ2Egb24KICAgICAgICBsZWF2aW5nIHRoZSBjaXR5IHRvIGFzc3VtZSB0aGUgY29tbWFuZCBvZiB0aGUgYXJteSwgYW5kIGFzc3VtZWQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnBhbHVkYW1lbnR1bTwvZm9yZWlnbj4sIG9yIG1pbGl0YXJ5IHJvYmUuIDwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgc2luY2UsIE8gY2l0aXplbnMgeW91IGhhdmUgdGhlIG5lZmFyaW91cyBsZWFkZXJzIG9mIHRoaXMgbW9zdCB3aWNrZWQgYW5kIGRhbmdlcm91cyB3YXIKICAgICAgIHRha2VuIHByaXNvbmVycyBhbmQgaW4geW91ciBncmFzcCwgeW91IG91Z2h0IHRvIHRoaW5rIHRoYXQgYWxsIHRoZSByZXNvdXJjZXMgb2YKICAgICAgIENhdGlsaW5lLOKAlGFsbCBoaXMgaG9wZXMgYW5kIGFsbCBoaXMgcG93ZXIsIG5vdyB0aGF0IHRoZXNlIGRhbmdlcnMgb2YgdGhlIGNpdHkgYXJlCiAgICAgICB3YXJkZWQgb2ZmLCBoYXZlIGZhbGxlbiB0byBwaWVjZXMuIEFuZCwgaW5kZWVkLCB3aGVuIEkgZHJvdmUgaGltIGZyb20gdGhlIGNpdHkgSSBmb3Jlc2F3IGluCiAgICAgICBteSBtaW5kLCBPIGNpdGl6ZW5zLCB0aGF0IGlmIENhdGlsaW5lIHdlcmUgcmVtb3ZlZCwgSSBoYWQgbm8gY2F1c2UgdG8gZmVhciBlaXRoZXIgdGhlCiAgICAgICBkcm93c2luZXNzIG9mIFB1YmxpdXMgTGVudHVsdXMsIG9yIHRoZSBmYXQgb2YgTHVjaXVzIENhc3NpdXMsIG9yIHRoZSBtYWQgcmFzaG5lc3Mgb2YgQ2Fzc2l1cwogICAgICAgQ2V0aGVndXMuIEhlIGFsb25lIHdhcyB0byBiZSBmZWFyZWQgb2YgYWxsIHRoZXNlIG1lbiwgYW5kIHRoYXQsIG9ubHkgYXMgbG9uZyBhcyBoZSB3YXMgd2l0aGluCiAgICAgICB0aGUgd2FsbHMgb2YgdGhlIGNpdHkuIEhlIGtuZXcgZXZlcnl0aGluZywgaGUgaGFkIGFjY2VzcyB0byBldmVyeWJvZHkuIEhlIGhhZCB0aGUgc2tpbGwgYW5kCiAgICAgICB0aGUgYXVkYWNpdHkgdG8gYWRkcmVzcywgdG8gdGVtcHQgYW5kIHRvIHRhbXBlciB3aXRoIGV2ZXJ5IG9uZS4gSGUgaGFkIGFjdXRlbmVzcyBzdWl0ZWQgdG8KICAgICAgIGNyaW1lOyBhbmQgbmVpdGhlciB0b25ndWUgbm9yIGhhbmQgZXZlciBmYWlsZWQgdG8gc3VwcG9ydCB0aGF0IGFjdXRlbmVzcy4gQWxyZWFkeSBoZSBoYWQgbWVuCiAgICAgICBoZSBjb3VsZCByZWx5IG9uIGNob3NlbiBhbmQgZGlzdHJpYnV0ZWQgZm9yIHRoZSBleGVjdXRpb24gb2YgYWxsIG90aGVyIGJ1c2luZXNzIGFuZCB3aGVuIGhlCiAgICAgICBoYWQgb3JkZXJlZCBhbnl0aGluZyB0byBiZSBkb25lIGhlIGRpZCBub3QgdGhpbmsgaXQgd2FzIGRvbmUgb24gdGhhdCBhY2NvdW50LiBUaGVyZSB3YXMKICAgICAgIG5vdGhpbmcgdG8gd2hpY2ggaGUgZGlkIG5vdCBwZXJzb25hbGx5IGF0dGVuZCBhbmQgc2VlIHRvLOKAlGZvciB3aGljaCBoZSBkaWQgbm90CiAgICAgICB3YXRjaCBhbmQgdG9pbC4gSGUgd2FzIGFibGUgdG8gZW5kdXJlIGNvbGQsIHRoaXJzdCwgYW5kIGh1bmdlci4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.7.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPlVubGVzcyBJIGhhZCBkcml2ZW4gdGhpcyBtYW4sIHNvIGFjdGl2ZSwgc28gcmVhZHksIHNvIGF1ZGFjaW91cywgc28gY3JhZnR5LCBzbyB2aWdpbGFudCBpbgogICAgICAgd2lja2VkbmVzcywgc28gaW5kdXN0cmlvdXMgaW4gY3JpbWluYWwgZXhwbG9pdHMsIGZyb20gaGlzIHBsb3RzIHdpdGhpbiB0aGUgY2l0eSB0byB0aGUgb3BlbgogICAgICAgd2FyZmFyZSBvZiB0aGUgY2FtcCwgKEkgd2lsbCBleHByZXNzIG15IGhvbmVzdCBvcGluaW9uLCBPIGNpdGl6ZW5zLCkgSSBzaG91bGQgbm90IGVhc2lseSBoYXZlCiAgICAgICByZW1vdmVkIGZyb20geW91ciBuZWNrcyBzbyB2YXN0IGEgd2VpZ2h0IG9mIGV2aWwuIEhlIHdvdWxkIG5vdCBoYXZlIGRldGVybWluZWQgb24gdGhlCiAgICAgICBTYXR1cm5hbGlhIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgU2F0dXJuYWxpYSB3YXMgYSBmZWFzdCBvZiBTYXR1cm4gYXQgd2hpY2ggZXh0cmFvcmRpbmFyeQogICAgICAgIGxpY2VuY2UgYW5kIGluZHVsZ2VuY2Ugd2FzIGFsbG93ZWQgdG8gYWxsIHRoZSBzbGF2ZXM7IGl0IHRvb2sgcGxhY2UgYXQgdGhlIGVuZCBvZiBEZWNlbWJlciwKICAgICAgICB3aGlsZSB0aGlzIHNwZWVjaCBvZiBDaWNlcm8gd2FzIGRlbGl2ZXJlZCBlYXJseSBpbiBOb3ZlbWJlci48L25vdGU+IHRvIG1hc3NhY3JlIHlvdSBoZSB3b3VsZAogICAgICAgbm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxMiIgLz4gaGF2ZSBhbm5vdW5jZWQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGV2ZW4gdGhlIGRheSBvZiBpdHMKICAgICAgIGRvb20gc28gbG9uZyBiZWZvcmVoYW5kLOKAlGhlIHdvdWxkIG5ldmVyIGhhdmUgYWxsb3dlZCBoaXMgc2VhbCBhbmQgaGlzIGxldHRlcnMsIHRoZQogICAgICAgdW5kZW5pYWJsZSB3aXRuZXNzZXMgb2YgaGlzIGd1aWx0LCB0byBiZSB0YWtlbiwgd2hpY2ggbm93LCBzaW5jZSBoZSBpcyBhYnNlbnQsIGhhcyBiZWVuIHNvCiAgICAgICBkb25lIHRoYXQgbm8gbGFyY2VueSBpbiBhIHByaXZhdGUgaG91c2UgaGFzIGV2ZXIgYmVlbiBzbyB0aG9yb3VnaGx5IGFuZCBjbGVhcmx5IGRldGVjdGVkIGFzCiAgICAgICB0aGlzIHZhc3QgY29uc3BpcmFjeSBhZ2FpbnN0IHRoZSByZXB1YmxpYy4gQnV0IGlmIENhdGlsaW5lIGhhZCByZW1haW5lZCBpbiB0aGUgY2l0eSB0byB0aGlzCiAgICAgICBkYXksIGFsdGhvdWdoLCBhcyBsb25nIGFzIGhlIHdhcyBzbywgSSBtZXQgYWxsIGhpcyBkZXNpZ25zIGFuZCB3aXRoc3Rvb2QgdGhlbTsgeWV0LCB0byBzYXkKICAgICAgIHRoZSBsZWFzdCwgd2Ugc2hvdWxkIGhhdmUgaGFkIHRvIGZpZ2h0IHdpdGggaGltLCBhbmQgc2hvdWxkIG5ldmVyLCB3aGlsZSBoZSByZW1haW5lZCBhcyBhbgogICAgICAgZW5lbXkgaW4gdGhlIGNpdHksIGhhdmUgZGVsaXZlcmVkIHRoZSByZXB1YmxpYyBmcm9tIHN1Y2ggZGFuZ2Vycywgd2l0aCBzdWNoIGVhc2UsIHN1Y2gKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIHN1Y2ggc2lsZW5jZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUgU2F0dXJuYWxpYSB3YXMgYSBmZWFzdCBvZiBTYXR1cm4gYXQgd2hpY2ggZXh0cmFvcmRpbmFyeQogICAgICAgIGxpY2VuY2UgYW5kIGluZHVsZ2VuY2Ugd2FzIGFsbG93ZWQgdG8gYWxsIHRoZSBzbGF2ZXM7IGl0IHRvb2sgcGxhY2UgYXQgdGhlIGVuZCBvZiBEZWNlbWJlciwKICAgICAgICB3aGlsZSB0aGlzIHNwZWVjaCBvZiBDaWNlcm8gd2FzIGRlbGl2ZXJlZCBlYXJseSBpbiBOb3ZlbWJlci48L25vdGU+IHRvIG1hc3NhY3JlIHlvdSBoZSB3b3VsZAogICAgICAgbm90IDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxMiIgLz4gaGF2ZSBhbm5vdW5jZWQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgYW5kIGV2ZW4gdGhlIGRheSBvZiBpdHMKICAgICAgIGRvb20gc28gbG9uZyBiZWZvcmVoYW5kLOKAlGhlIHdvdWxkIG5ldmVyIGhhdmUgYWxsb3dlZCBoaXMgc2VhbCBhbmQgaGlzIGxldHRlcnMsIHRoZQogICAgICAgdW5kZW5pYWJsZSB3aXRuZXNzZXMgb2YgaGlzIGd1aWx0LCB0byBiZSB0YWtlbiwgd2hpY2ggbm93LCBzaW5jZSBoZSBpcyBhYnNlbnQsIGhhcyBiZWVuIHNvCiAgICAgICBkb25lIHRoYXQgbm8gbGFyY2VueSBpbiBhIHByaXZhdGUgaG91c2UgaGFzIGV2ZXIgYmVlbiBzbyB0aG9yb3VnaGx5IGFuZCBjbGVhcmx5IGRldGVjdGVkIGFzCiAgICAgICB0aGlzIHZhc3QgY29uc3BpcmFjeSBhZ2FpbnN0IHRoZSByZXB1YmxpYy4gQnV0IGlmIENhdGlsaW5lIGhhZCByZW1haW5lZCBpbiB0aGUgY2l0eSB0byB0aGlzCiAgICAgICBkYXksIGFsdGhvdWdoLCBhcyBsb25nIGFzIGhlIHdhcyBzbywgSSBtZXQgYWxsIGhpcyBkZXNpZ25zIGFuZCB3aXRoc3Rvb2QgdGhlbTsgeWV0LCB0byBzYXkKICAgICAgIHRoZSBsZWFzdCwgd2Ugc2hvdWxkIGhhdmUgaGFkIHRvIGZpZ2h0IHdpdGggaGltLCBhbmQgc2hvdWxkIG5ldmVyLCB3aGlsZSBoZSByZW1haW5lZCBhcyBhbgogICAgICAgZW5lbXkgaW4gdGhlIGNpdHksIGhhdmUgZGVsaXZlcmVkIHRoZSByZXB1YmxpYyBmcm9tIHN1Y2ggZGFuZ2Vycywgd2l0aCBzdWNoIGVhc2UsIHN1Y2gKICAgICAgIHRyYW5xdWlsbGl0eSwgYW5kIHN1Y2ggc2lsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['3.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFsdGhvdWdoIGFsbCB0aGVzZSB0aGluZ3MsIE8gUm9tYW5zLCBoYXZlIGJlZW4gc28gbWFuYWdlZCBieSBtZW4gdGhhdCB0aGV5IGFwcGVhciB0byBoYXZlCiAgICAgICBiZWVuIGRvbmUgYW5kIHByb3ZpZGVkIGZvciBieSB0aGUgb3JkZXIgYW5kIGRlc2lnbiBvZiB0aGUgaW1tb3J0YWwgZ29kczsgYW5kIGFzIHdlIG1heQogICAgICAgY29uamVjdHVyZSB0aGlzIGJlY2F1c2UgdGhlIGRpcmVjdGlvbiBvZiBzdWNoIHdlaWdodHkgYWZmYWlycyBzY2FyY2VseSBhcHBlYXJzIGNhcGFibGUgb2YKICAgICAgIGhhdmluZyBiZWVuIGNhcnJpZWQgb3V0IGJ5IGh1bWFuIHdpc2RvbTsgc28sIHRvbywgdGhleSBoYXZlIGF0IHRoaXMgdGltZSBzbyBicm91Z2h0IHVzCiAgICAgICBwcmVzZW50IGFpZCBhbmQgYXNzaXN0YW5jZSwgdGhhdCB3ZSBjb3VsZCBhbG1vc3QgYmVob2xkIHRoZW0gd2l0aG91dCBleWVzLiBGb3IgdG8gc2F5IG5vdGhpbmcKICAgICAgIG9mIHRob3NlIHRoaW5ncywgbmFtZWx5LCB0aGUgZmlyZWJyYW5kcyBzZWVuIGluIHRoZSB3ZXN0IGluIHRoZSBuaWdodCB0aW1lLCBhbmQgdGhlIGhlYXQgb2YKICAgICAgIHRoZSBhdG1vc3BoZXJlLOKAlHRvIHBhc3Mgb3ZlciB0aGUgZmFsbGluZyBvZiB0aHVuZGVyYm9sdHMgYW5kIHRoZQogICAgICAgZWFydGhxdWFrZXMs4oCUdG8gc2F5IG5vdGhpbmcgb2YgYWxsIHRoZSBvdGhlciBwb3J0ZW50cyB3aGljaCBoYXZlIHRha2VuIHBsYWNlIGluCiAgICAgICBzdWNoIG51bWJlciBkdXJpbmcgbXkgY29uc3Vsc2hpcCwgdGhhdCB0aGUgaW1tb3J0YWwgZ29kcyB0aGVtc2VsdmVzIGhhdmUgYmVlbiBzZWVtaW5nIHRvCiAgICAgICBwcmVkaWN0IHdoYXQgaXMgbm93IHRha2luZyBwbGFjZTsgeWV0LCBhdCBhbGwgZXZlbnRzLCB0aGlzIHdoaWNoIEkgYW0gYWJvdXQgdG8gbWVudGlvbiwgTwogICAgICAgUm9tYW5zLCBtdXN0IGJlIG5laXRoZXIgcGFzc2VkIG92ZXIgbm9yIG9taXR0ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.8.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3IgeW91IHJlY29sbGVjdCwgSSBzdXBwb3NlLCB3aGVuIENvdHRhIGFuZCBUb3JxdWF0dXMgd2VyZSBjb25zdWxzLCB0aGF0IG1hbnkgdG93ZXJzIGluCiAgICAgICB0aGUgQ2FwaXRvbCB3ZXJlIHN0cnVjayB3aXRoIGxpZ2h0bmluZywgd2hlbiBib3RoIHRoZSBpbWFnZXMgb2YgdGhlIGltbW9ydGFsIGdvZHMgd2VyZSBtb3ZlZCwKICAgICAgIGFuZCB0aGUgc3RhdHVlcyBvZiBtYW55IGFuY2llbnQgbWVuIHdlcmUgdGhyb3duIGRvd24sIGFuZCB0aGUgYnJhemVuIHRhYmxldHMgb24gd2hpY2ggdGhlCiAgICAgICBsYXdzIHdlcmUgd3JpdHRlbiB3ZXJlIG1lbHRlZC4gRXZlbiBSb211bHVzLCB3aG8gYnVpbHQgdGhpcyBjaXR5LCB3YXMgc3RydWNrLCB3aGljaCwgeW91CiAgICAgICByZWNvbGxlY3QsIHN0b29kIGluIHRoZSBDYXBpdG9sLCBhIGdpbHQgc3RhdHVlLCBsaXR0bGUgYW5kIHN1Y2tpbmcsIGFuZCBjbGluZ2luZyB0byB0aGUgdGVhdHMKICAgICAgIG9mIHRoZSB3b2xmLiBBbmQgd2hlbiBhdCB0aGlzIHRpbWUgdGhlIHNvb3Roc2F5ZXJzIHdlcmUgYXNzZW1ibGVkIG91dCBvZiBhbGwgRXRydXJpYSwgdGhleQogICAgICAgc2FpZCB0aGF0IHNsYXVnaHRlciwgYW5kIGNvbmZsYWdyYXRpb24sIGFuZCB0aGUgb3ZlcnRocm93IG9mIHRoZSBsYXdzLCBhbmQgY2l2aWwgYW5kIGRvbWVzdGljCiAgICAgICB3YXIsIGFuZCB0aGUgZmFsbCBvZiB0aGUgd2hvbGUgY2l0eSBhbmQgZW1waXJlIHdhcyBhdCBoYW5kLCB1bmxlc3MgdGhlIGltbW9ydGFsIGdvZHMsIGJlaW5nCiAgICAgICBhcHBlYXNlZCBpbiBldmVyeSBwb3NzaWJsZSBtYW5uZXIsIGJ5IHRoZWlyIG93biBwb3dlciB0dXJuZWQgYXNpZGUsIGFzIEkgbWF5IHNheSwgdGhlIHZlcnkKICAgICAgIGZhdGVzIHRoZW1zZWx2ZXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.8.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZWZvcmUsIGFjY29yZGluZyB0byB0aGVpciBhbnN3ZXJzLCBnYW1lcyB3ZXJlIGNlbGVicmF0ZWQgZm9yIHRlbiBkYXlzLCBub3Igd2FzIGFueXRoaW5nCiAgICAgICBvbWl0dGVkIHdoaWNoIG1pZ2h0IHRlbmQgdG8gdGhlIGFwcGVhc2luZyBvZiB0aGUgZ29kcy4gQW5kIHRoZXkgZW5qb2luZWQgYWxzbyB0aGF0IHdlIHNob3VsZAogICAgICAgbWFrZSBhIGdyZWF0ZXIgc3RhdHVlIG9mIEp1cGl0ZXIsIGFuZCBwbGFjZSBpdCBpbiBhIGxvZnR5IHNpdHVhdGlvbiwgYW5kIChjb250cmFyeSB0byB3aGF0CiAgICAgICBoYWQgYmVlbiBkb25lIGJlZm9yZSkgdHVybiBpdCB0b3dhcmRzIHRoZSBlYXN0LiBBbmQgdGhleSBzYWlkIHRoYXQgdGhleSBob3BlZCB0aGF0IGlmIHRoYXQKICAgICAgIHN0YXR1ZSB3aGljaCB5b3Ugbm93IGJlaG9sZCBsb29rZWQgdXBvbiB0aGUgcmlzaW5nIG9mIHRoZSBzdW4sIGFuZCB0aGUgZm9ydW0sIGFuZCB0aGUKICAgICAgIHNlbmF0ZS1ob3VzZSwgdGhhdCB0aG9zZSBkZXNpZ25zIHdoaWNoIHdlcmUgc2VjcmV0bHkgZm9ybWVkIGFnYWluc3QgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eQogICAgICAgYW5kIGVtcGlyZSB3b3VsZCBiZSBicm91Z2h0IHRvIGxpZ2h0IHNvIGFzIHRvIGJlIGFibGUgdG8gYmUgdGhvcm91Z2hseSBzZWVuIGJ5IHRoZSBzZW5hdGUgYW5kCiAgICAgICBieSB0aGUgUm9tYW4gcGVvcGxlLiBBbmQgdGhlIGNvbnN1bHMgb3JkZXJlZCBpdCB0byBiZSBzbyBwbGFjZWQ7IGJ1dCBzbyBncmVhdCB3YXMgdGhlIGRlbGF5CiAgICAgICBpbiB0aGUgd29yaywgdGhhdCBpdCB3YXMgbmV2ZXIgc2V0IHVwIGJ5IHRoZSBmb3JtZXIgY29uc3VscyBub3IgYnkgdXMgYmVmb3JlIHRoaXMgZGF5LgogICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPiBIZXJlIHdobywgTyBSb21hbnMgY2FuIHRoZXJlIGJlIHNvIG9ic3RpbmF0ZSBhZ2FpbnN0IHRoZQogICAgICAgdHJ1dGgsIHNvIGhlYWRzdHJvbmcsIHNvIHZvaWQgb2Ygc2Vuc2UsIGFzIHRvIGRlbnkgdGhhdCBhbGwgdGhlc2UgdGhpbmdzIHdoaWNoIHdlIHNlZSwgYW5kCiAgICAgICBlc3BlY2lhbGx5IHRoaXMgY2l0eSwgaXMgZ292ZXJuZWQgYnkgdGhlIGRpdmluZSBhdXRob3JpdHkgYW5kIHBvd2VyIG9mIHRoZSBpbW1vcnRhbCBnb2RzPwogICAgICAgRm9yc29vdGgsIHdoZW4gdGhpcyBhbnN3ZXIgaGFkIGJlZW4gZ2l2ZW4sIHRoYXQgbWFzc2FjcmUsIGFuZCBjb25mbGFncmF0aW9uLCBhbmQgcnVpbiB3YXMKICAgICAgIHByZXBhcmVkIGZvciB0aGUgcmVwdWJsaWM7IGFuZCB0aGF0LCB0b28sIGJ5IHByb2ZsaWdhdGUgY2l0aXplbnMsIHdoaWNoLCBmcm9tIHRoZSBlbm9ybWl0eSBvZgogICAgICAgdGhlIHdpY2tlZG5lc3MsIGFwcGVhcmVkIGluY3JlZGlibGUgdG8gc29tZSBwZW9wbGUsIHlvdSBmb3VuZCB0aGF0IGl0IGhhZCBub3Qgb25seSBiZWVuCiAgICAgICBwbGFubmVkIGJ5IHdpY2tlZCBjaXRpemVucywgYnV0IGhhZCBldmVuIGJlZW4gdW5kZXJ0YWtlbiBhbmQgY29tbWVuY2VkLiBBbmQgaXMgbm90IHRoaXMgZmFjdAogICAgICAgc28gcHJlc2VudCB0aGF0IGl0IGFwcGVhcnMgdG8gaGF2ZSB0YWtlbiBwbGFjZSBieSB0aGUgZXhwcmVzcyB3aWxsIG9mIHRoZSBnb29kIGFuZCBtaWdodHkKICAgICAgIEp1cGl0ZXIsIHRoYXQsIHdoZW4gdGhpcyBkYXksIGVhcmx5IGluIHRoZSBtb3JuaW5nLCBib3RoIHRoZSBjb25zcGlyYXRvcnMgYW5kIHRoZWlyIGFjY3VzZXJzCiAgICAgICB3ZXJlIGJlaW5nIGxlZCBieSBteSBjb21tYW5kIHRocm91Z2ggdGhlIGZvcnVtIHRvIHRoZSBUZW1wbGUgb2YgQ29uY29yZCwgYXQgdGhhdCB2ZXJ5IHRpbWUKICAgICAgIHRoZSBzdGF0dWUgd2FzIGJlaW5nIGVyZWN0ZWQ/IEFuZCB3aGVuIGl0IHdhcyBzZXQgdXAgYW5kIHR1cm5lZCB0b3dhcmRzIHlvdSBhbmQgdG93YXJkcyB0aGUKICAgICAgIHNlbmF0ZSB0aGUgc2VuYXRlIGFuZCB5b3UgeW91cnNlbHZlcyBzYXcgZXZlcnl0aGluZyB3aGljaCBoYWQgYmVlbiBwbGFubmVkIGFnYWluc3QgdGhlCiAgICAgICB1bml2ZXJzYWwgc2FmZXR5IGJyb3VnaHQgdG8gbGlnaHQgYW5kIG1hZGUgbWFuaWZlc3QuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gSGVyZSB3aG8sIE8gUm9tYW5zIGNhbiB0aGVyZSBiZSBzbyBvYnN0aW5hdGUgYWdhaW5zdCB0aGUKICAgICAgIHRydXRoLCBzbyBoZWFkc3Ryb25nLCBzbyB2b2lkIG9mIHNlbnNlLCBhcyB0byBkZW55IHRoYXQgYWxsIHRoZXNlIHRoaW5ncyB3aGljaCB3ZSBzZWUsIGFuZAogICAgICAgZXNwZWNpYWxseSB0aGlzIGNpdHksIGlzIGdvdmVybmVkIGJ5IHRoZSBkaXZpbmUgYXV0aG9yaXR5IGFuZCBwb3dlciBvZiB0aGUgaW1tb3J0YWwgZ29kcz8KICAgICAgIEZvcnNvb3RoLCB3aGVuIHRoaXMgYW5zd2VyIGhhZCBiZWVuIGdpdmVuLCB0aGF0IG1hc3NhY3JlLCBhbmQgY29uZmxhZ3JhdGlvbiwgYW5kIHJ1aW4gd2FzCiAgICAgICBwcmVwYXJlZCBmb3IgdGhlIHJlcHVibGljOyBhbmQgdGhhdCwgdG9vLCBieSBwcm9mbGlnYXRlIGNpdGl6ZW5zLCB3aGljaCwgZnJvbSB0aGUgZW5vcm1pdHkgb2YKICAgICAgIHRoZSB3aWNrZWRuZXNzLCBhcHBlYXJlZCBpbmNyZWRpYmxlIHRvIHNvbWUgcGVvcGxlLCB5b3UgZm91bmQgdGhhdCBpdCBoYWQgbm90IG9ubHkgYmVlbgogICAgICAgcGxhbm5lZCBieSB3aWNrZWQgY2l0aXplbnMsIGJ1dCBoYWQgZXZlbiBiZWVuIHVuZGVydGFrZW4gYW5kIGNvbW1lbmNlZC4gQW5kIGlzIG5vdCB0aGlzIGZhY3QKICAgICAgIHNvIHByZXNlbnQgdGhhdCBpdCBhcHBlYXJzIHRvIGhhdmUgdGFrZW4gcGxhY2UgYnkgdGhlIGV4cHJlc3Mgd2lsbCBvZiB0aGUgZ29vZCBhbmQgbWlnaHR5CiAgICAgICBKdXBpdGVyLCB0aGF0LCB3aGVuIHRoaXMgZGF5LCBlYXJseSBpbiB0aGUgbW9ybmluZywgYm90aCB0aGUgY29uc3BpcmF0b3JzIGFuZCB0aGVpciBhY2N1c2VycwogICAgICAgd2VyZSBiZWluZyBsZWQgYnkgbXkgY29tbWFuZCB0aHJvdWdoIHRoZSBmb3J1bSB0byB0aGUgVGVtcGxlIG9mIENvbmNvcmQsIGF0IHRoYXQgdmVyeSB0aW1lCiAgICAgICB0aGUgc3RhdHVlIHdhcyBiZWluZyBlcmVjdGVkPyBBbmQgd2hlbiBpdCB3YXMgc2V0IHVwIGFuZCB0dXJuZWQgdG93YXJkcyB5b3UgYW5kIHRvd2FyZHMgdGhlCiAgICAgICBzZW5hdGUgdGhlIHNlbmF0ZSBhbmQgeW91IHlvdXJzZWx2ZXMgc2F3IGV2ZXJ5dGhpbmcgd2hpY2ggaGFkIGJlZW4gcGxhbm5lZCBhZ2FpbnN0IHRoZQogICAgICAgdW5pdmVyc2FsIHNhZmV0eSBicm91Z2h0IHRvIGxpZ2h0IGFuZCBtYWRlIG1hbmlmZXN0LiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG9uIHRoaXMgYWNjb3VudCB0aGV5IGRlc2VydmUgZXZlbiBncmVhdGVyIGhhdHJlZCBhbmQKICAgICAgIGdyZWF0ZXIgcHVuaXNobWVudCwgZm9yIGhhdmluZyBhdHRlbXB0ZWQgdG8gYXBwbHkgdGhlaXIgZmF0YWwgYW5kIHdpY2tlZCBmaXJlLCBub3Qgb25seSB0bwogICAgICAgeW91ciBob3VzZXMgYW5kIGhvbWVzLCBidXQgZXZlbiB0byB0aGUgc2hyaW5lcyBhbmQgdGVtcGxlcyBvZiB0aGUgR29kcy4gQW5kIGlmIEkgd2VyZSB0byBzYXkKICAgICAgIHRoYXQgaXQgd2FzIEkgd2hvIHJlc2lzdGVkIHRoZW0sIEkgc2hvdWxkIHRha2UgdG9vIG11Y2ggdG8gbXlzZWxmIGFuZCBvdWdodCBub3QgdG8gYmUgYm9ybmUuCiAgICAgICBIZeKAlGhlLCBKdXBpdGVyLCByZXNpc3RlZCB0aGVtLCBIZSBkZXRlcm1pbmVkIHRoYXQgdGhlIENhcGl0b2wgc2hvdWxkIGJlIHNhZmUsIGhlCiAgICAgICBzYXZlZCB0aGVzZSB0ZW1wbGVzLCBoZSBzYXZlZCB0aGlzIGNpdHksIGhlIHNhdmVkIGFsbCBvZiB5b3UuIDxwYiBuPSIzMTQiIC8+IEl0IGlzIHVuZGVyIHRoZQogICAgICAgZ3VpZGFuY2Ugb2YgdGhlIGltbW9ydGFsIGdvZHMsIE8gUm9tYW5zLCB0aGF0IEkgaGF2ZSBjaGVyaXNoZWQgdGhlIGludGVudGlvbiBhbmQgZGVzaXJlcwogICAgICAgd2hpY2ggSSBoYXZlLCBhbmQgaGF2ZSBhcnJpdmVkIGF0IHN1Y2ggdW5kZW5pYWJsZSBwcm9vZnMuIFN1cmVseSwgdGhhdCB0YW1wZXJpbmcgd2l0aCB0aGUKICAgICAgIEFsbG9icm9nZXMgd291bGQgbmV2ZXIgaGF2ZSB0YWtlbiBwbGFjZSwgc28gaW1wb3J0YW50IGEgbWF0dGVyIHdvdWxkIG5ldmVyIGhhdmUgYmVlbiBzbyBtYWRseQogICAgICAgZW50cnVzdGVkLCBieSBMZW50dWx1cyBhbmQgdGhlIHJlc3Qgb2Ygb3VyIGludGVybmFsIGVuZW1pZXMsIHRvIHN0cmFuZ2VycyBhbmQgZm9yZWlnbmVycywKICAgICAgIHN1Y2ggbGV0dGVycyB3b3VsZCBuZXZlciBoYXZlIGJlZW4gd3JpdHRlbiwgdW5sZXNzIGFsbCBwcnVkZW5jZSBoYWQgYmVlbiB0YWtlbiBieSB0aGUKICAgICAgIGltbW9ydGFsIGdvZHMgZnJvbSBzdWNoIHRlcnJpYmxlIGF1ZGFjaXR5LiBXaGF0IHNoYWxsIEkgc2F5PyBUaGF0IEdhdWxzLCBtZW4gZnJvbSBhIHN0YXRlCiAgICAgICBzY2FyY2VseSBhdCBwZWFjZSB3aXRoIHVzLCB0aGUgb25seSBuYXRpb24gZXhpc3Rpbmcgd2hpY2ggc2VlbXMgYm90aCB0byBiZSBhYmxlIHRvIG1ha2Ugd2FyCiAgICAgICBvbiB0aGUgUm9tYW4gcGVvcGxlLCBhbmQgbm90IHRvIGJlIHVud2lsbGluZyB0byBkbyBzbyzigJR0aGF0IHRoZXkgc2hvdWxkIGRpc3JlZ2FyZAogICAgICAgdGhlIGhvcGUgb2YgZW1waXJlIGFuZCBvZiB0aGUgZ3JlYXRlc3Qgc3VjY2VzcyB2b2x1bnRhcmlseSBvZmZlcmVkIHRvIHRoZW0gYnkgcGF0cmljaWFuczsgYW5kCiAgICAgICBzaG91bGQgcHJlZmVyIHlvdXIgc2FmZXR5IHRvIHRoZWlyIG93biBwb3dlcuKAlGRvIHlvdSBub3QgdGhpbmsgdGhhdCB0aGF0IHdhcyBjYXVzZWQKICAgICAgIGJ5IGRpdmluZSBpbnRlcnBvc2l0aW9uPyBlc3BlY2lhbGx5IHdoZW4gdGhleSBjb3VsZCBoYXZlIGRlc3Ryb3llZCB1cywgbm90IGJ5IGZpZ2h0aW5nLCBidXQKICAgICAgIGJ5IGtlZXBpbmcgc2lsZW5jZS4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48bWlsZXN0b25lIG49IjIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.9.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIG9uIHRoaXMgYWNjb3VudCB0aGV5IGRlc2VydmUgZXZlbiBncmVhdGVyIGhhdHJlZCBhbmQKICAgICAgIGdyZWF0ZXIgcHVuaXNobWVudCwgZm9yIGhhdmluZyBhdHRlbXB0ZWQgdG8gYXBwbHkgdGhlaXIgZmF0YWwgYW5kIHdpY2tlZCBmaXJlLCBub3Qgb25seSB0bwogICAgICAgeW91ciBob3VzZXMgYW5kIGhvbWVzLCBidXQgZXZlbiB0byB0aGUgc2hyaW5lcyBhbmQgdGVtcGxlcyBvZiB0aGUgR29kcy4gQW5kIGlmIEkgd2VyZSB0byBzYXkKICAgICAgIHRoYXQgaXQgd2FzIEkgd2hvIHJlc2lzdGVkIHRoZW0sIEkgc2hvdWxkIHRha2UgdG9vIG11Y2ggdG8gbXlzZWxmIGFuZCBvdWdodCBub3QgdG8gYmUgYm9ybmUuCiAgICAgICBIZeKAlGhlLCBKdXBpdGVyLCByZXNpc3RlZCB0aGVtLCBIZSBkZXRlcm1pbmVkIHRoYXQgdGhlIENhcGl0b2wgc2hvdWxkIGJlIHNhZmUsIGhlCiAgICAgICBzYXZlZCB0aGVzZSB0ZW1wbGVzLCBoZSBzYXZlZCB0aGlzIGNpdHksIGhlIHNhdmVkIGFsbCBvZiB5b3UuIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxNCIgLz4gSXQgaXMgdW5kZXIgdGhlCiAgICAgICBndWlkYW5jZSBvZiB0aGUgaW1tb3J0YWwgZ29kcywgTyBSb21hbnMsIHRoYXQgSSBoYXZlIGNoZXJpc2hlZCB0aGUgaW50ZW50aW9uIGFuZCBkZXNpcmVzCiAgICAgICB3aGljaCBJIGhhdmUsIGFuZCBoYXZlIGFycml2ZWQgYXQgc3VjaCB1bmRlbmlhYmxlIHByb29mcy4gU3VyZWx5LCB0aGF0IHRhbXBlcmluZyB3aXRoIHRoZQogICAgICAgQWxsb2Jyb2dlcyB3b3VsZCBuZXZlciBoYXZlIHRha2VuIHBsYWNlLCBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIgd291bGQgbmV2ZXIgaGF2ZSBiZWVuIHNvIG1hZGx5CiAgICAgICBlbnRydXN0ZWQsIGJ5IExlbnR1bHVzIGFuZCB0aGUgcmVzdCBvZiBvdXIgaW50ZXJuYWwgZW5lbWllcywgdG8gc3RyYW5nZXJzIGFuZCBmb3JlaWduZXJzLAogICAgICAgc3VjaCBsZXR0ZXJzIHdvdWxkIG5ldmVyIGhhdmUgYmVlbiB3cml0dGVuLCB1bmxlc3MgYWxsIHBydWRlbmNlIGhhZCBiZWVuIHRha2VuIGJ5IHRoZQogICAgICAgaW1tb3J0YWwgZ29kcyBmcm9tIHN1Y2ggdGVycmlibGUgYXVkYWNpdHkuIFdoYXQgc2hhbGwgSSBzYXk/IFRoYXQgR2F1bHMsIG1lbiBmcm9tIGEgc3RhdGUKICAgICAgIHNjYXJjZWx5IGF0IHBlYWNlIHdpdGggdXMsIHRoZSBvbmx5IG5hdGlvbiBleGlzdGluZyB3aGljaCBzZWVtcyBib3RoIHRvIGJlIGFibGUgdG8gbWFrZSB3YXIKICAgICAgIG9uIHRoZSBSb21hbiBwZW9wbGUsIGFuZCBub3QgdG8gYmUgdW53aWxsaW5nIHRvIGRvIHNvLOKAlHRoYXQgdGhleSBzaG91bGQgZGlzcmVnYXJkCiAgICAgICB0aGUgaG9wZSBvZiBlbXBpcmUgYW5kIG9mIHRoZSBncmVhdGVzdCBzdWNjZXNzIHZvbHVudGFyaWx5IG9mZmVyZWQgdG8gdGhlbSBieSBwYXRyaWNpYW5zOyBhbmQKICAgICAgIHNob3VsZCBwcmVmZXIgeW91ciBzYWZldHkgdG8gdGhlaXIgb3duIHBvd2Vy4oCUZG8geW91IG5vdCB0aGluayB0aGF0IHRoYXQgd2FzIGNhdXNlZAogICAgICAgYnkgZGl2aW5lIGludGVycG9zaXRpb24/IGVzcGVjaWFsbHkgd2hlbiB0aGV5IGNvdWxkIGhhdmUgZGVzdHJveWVkIHVzLCBub3QgYnkgZmlnaHRpbmcsIGJ1dAogICAgICAgYnkga2VlcGluZyBzaWxlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.10.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgTyBjaXRpemVucywgc2luY2UgYSBzdXBwbGljYXRpb24gaGFzIGJlZW4gZGVjcmVlZCBhdCBhbGwgdGhlIGFsdGFycywgY2VsZWJyYXRlCiAgICAgICB0aG9zZSBkYXlzIHdpdGggeW91ciB3aXZlcyBhbmQgY2hpbGRyZW47IGZvciBtYW55IGp1c3QgYW5kIGRlc2VydmVkIGhvbm91cnMgaGF2ZSBiZWVuIG9mdGVuCiAgICAgICBwYWlkIHRvIHRoZSBpbW1vcnRhbCBnb2RzLCBidXQganVzdGVyIG9uZXMgbmV2ZXIuIEZvciB5b3UgaGF2ZSBiZWVuIHNuYXRjaGVkIGZyb20gYSBtb3N0CiAgICAgICBjcnVlbCBhbmQgbWlzZXJhYmxlIGRlc3RydWN0aW9uLCBhbmQgeW91IGhhdmUgYmVlbiBzbmF0Y2hlZCBmcm9tIGl0IHdpdGhvdXQgc2xhdWdodGVyLAogICAgICAgd2l0aG91dCBibG9vZHNoZWQsIHdpdGhvdXQgYW4gYXJteSwgd2l0aG91dCBhIGJhdHRsZS4gWW91IGhhdmUgY29ucXVlcmVkIGluIHRoZSBnYXJiIG9mCiAgICAgICBwZWFjZSwgd2l0aCBtZSBpbiB0aGUgZ2FyYiBvZiBwZWFjZSBmb3IgeW91ciBvbmx5IGdlbmVyYWwgYW5kIGNvbW1hbmRlci4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gUmVtZW1iZXIsIE8gY2l0aXplbnMsIGFsbCBjaXZpbCBkaXNzZW5zaW9ucywgYW5kIG5vdAogICAgICAgb25seSB0aG9zZSB3aGljaCB5b3UgaGF2ZSBoZWFyZCBvZiBidXQgdGhlc2UgYWxzbyB3aGljaCB5b3UgeW91cnNlbHZlcyByZW1lbWJlciBhbmQgaGF2ZQogICAgICAgc2Vlbi4gTHVjaXVzIFN1bGxhIGNydXNoZWQgUHVibGl1cyBTdWxwaWNpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlN1bHBpY2l1cyBwcm9jdXJlZCBhIGxhdyB0bwogICAgICAgIGJlIHBhc3NlZCBmb3IgdGFraW5nIHRoZSBjb21tYW5kIGFnYWluc3QgTWl0aHJpZGF0ZXMgZnJvbSBTdWxsYSBhbmQgZ2l2aW5nIGl0IHRvIE1hcml1czsKICAgICAgICBTdWxsYSBjYW1lIHRvIFJvbWUgd2l0aCBoaXMgYXJteSBhbmQgc2xldyBTdWxwaWNpdXMsIHdoZW4gTWFyaXVzIGZsZWQgdG8gQWZyaWNhLiBTdWxsYSBtYWRlCiAgICAgICAgT2N0YXZpdXMgYW5kIENpbm5hIGNvbnN1bHMsIHdobyBxdWFycmVsZWQgYWZ0ZXIgaGUgd2FzIGdvbmUsIGFuZCBDaW5uYSB3ZW50IG92ZXIgdG8gdGhlCiAgICAgICAgcGFydHkgb2YgTWFyaXVzLCB3aG8gcmV0dXJuZWQgdG8gUm9tZS4gTGVwaWR1cyBhbmQgQ2F0dWx1cyB3ZXJlIGNvbnN1bHMgdGhlIHllYXIgYWZ0ZXIgdGhlCiAgICAgICAgZGVhdGggb2YgU3VsbGEsIGFuZCB0aGV5IHF1YXJyZWxlZCBiZWNhdXNlIExlcGlkdXMgd2lzaGVkIHRvIHJlc2NpbmQgYWxsIHRoZSBhY3RzIG9mIFN1bGxhLgogICAgICAgIExlcGlkdXMgd2FzIGRlZmVhdGVkLCBmbGVkIHRvIFNhcmRpbmlhLCBhbmQgZGllZCB0aGVyZS48L25vdGU+OyBoZSBkcm92ZSBmcm9tIHRoZSBjaXR5IENhaXVzCiAgICAgICBNYXJpdXMgdGhlIGd1YXJkaWFuIG9mIHRoaXMgY2l0eTsgYW5kIG9mIG1hbnkgb3RoZXIgYnJhdmUgbWVuIHNvbWUgaGUgZHJvdmUgZnJvbSB0aGUgY2l0eSwKICAgICAgIGFuZCBzb21lIGhlIG11cmRlcmVkLiBDbmFldXMgT2N0YXZpdXMgdGhlIGNvbnN1bCBkcm92ZSBoaXMgY29sbGVhZ3VlIGJ5IGZvcmNlIG9mIGFybXMgb3V0IG9mCiAgICAgICB0aGUgY2l0eTsgYWxsIHRoaXMgcGxhY2Ugd2FzIGNyb3dkZWQgd2l0aCBoZWFwcyBvZiBjYXJjYXNzZXMgYW5kIGZsb3dlZCB3aXRoIHRoZSBibG9vZCBvZgogICAgICAgY2l0aXplbnM7IGFmdGVyd2FyZHMgQ2lubmEgYW5kIE1hcml1cyBnb3QgdGhlIHVwcGVyIGhhbmQ7IGFuZCB0aGVuIG1vc3QgaWxsdXN0cmlvdXMgbWVuIHdlcmUKICAgICAgIHB1dCB0byBkZWF0aCwgYW5kIHRoZSBzcGlyaXRzIG9mIHRoZSBzdGF0ZSB3ZXJlIGV4dGluZ3Vpc2hlZC4gQWZ0ZXJ3YXJkcyBTdWxsYSBhdmVuZ2VkIHRoZQogICAgICAgY3J1ZWx0eSBvZiB0aGlzIHZpY3Rvcnk7IGl0IGlzIG5lZWRsZXNzIHRvIHNheSB3aXRoIHdoYXQgYSBkaW1pbnV0aW9uIG9mIHRoZSBjaXRpemVucyBhbmQKICAgICAgIHdpdGggd2hhdCBkaXNhc3RlcnMgdG8gdGhlIHJlcHVibGljIE1hcmN1cyBMZXBpZHVzIGRpc2FncmVlZCB3aXRoIHRoYXQgbW9zdCBlbWluZW50IGFuZCBicmF2ZQogICAgICAgbWFuIFF1aW50dXMsIENhdHVsdXMuIEhpcyBkZWF0aCBkaWQgbm90IGNhdXNlIGFzIG11Y2ggZ3JpZWYgdG8gdGhlIHJlcHVibGljIGFzIHRoYXQgb2YgdGhlCiAgICAgICBvdGhlcnMuIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.10.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz4gUmVtZW1iZXIsIE8gY2l0aXplbnMsIGFsbCBjaXZpbCBkaXNzZW5zaW9ucywgYW5kIG5vdAogICAgICAgb25seSB0aG9zZSB3aGljaCB5b3UgaGF2ZSBoZWFyZCBvZiBidXQgdGhlc2UgYWxzbyB3aGljaCB5b3UgeW91cnNlbHZlcyByZW1lbWJlciBhbmQgaGF2ZQogICAgICAgc2Vlbi4gTHVjaXVzIFN1bGxhIGNydXNoZWQgUHVibGl1cyBTdWxwaWNpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+U3VscGljaXVzIHByb2N1cmVkIGEgbGF3IHRvCiAgICAgICAgYmUgcGFzc2VkIGZvciB0YWtpbmcgdGhlIGNvbW1hbmQgYWdhaW5zdCBNaXRocmlkYXRlcyBmcm9tIFN1bGxhIGFuZCBnaXZpbmcgaXQgdG8gTWFyaXVzOwogICAgICAgIFN1bGxhIGNhbWUgdG8gUm9tZSB3aXRoIGhpcyBhcm15IGFuZCBzbGV3IFN1bHBpY2l1cywgd2hlbiBNYXJpdXMgZmxlZCB0byBBZnJpY2EuIFN1bGxhIG1hZGUKICAgICAgICBPY3Rhdml1cyBhbmQgQ2lubmEgY29uc3Vscywgd2hvIHF1YXJyZWxlZCBhZnRlciBoZSB3YXMgZ29uZSwgYW5kIENpbm5hIHdlbnQgb3ZlciB0byB0aGUKICAgICAgICBwYXJ0eSBvZiBNYXJpdXMsIHdobyByZXR1cm5lZCB0byBSb21lLiBMZXBpZHVzIGFuZCBDYXR1bHVzIHdlcmUgY29uc3VscyB0aGUgeWVhciBhZnRlciB0aGUKICAgICAgICBkZWF0aCBvZiBTdWxsYSwgYW5kIHRoZXkgcXVhcnJlbGVkIGJlY2F1c2UgTGVwaWR1cyB3aXNoZWQgdG8gcmVzY2luZCBhbGwgdGhlIGFjdHMgb2YgU3VsbGEuCiAgICAgICAgTGVwaWR1cyB3YXMgZGVmZWF0ZWQsIGZsZWQgdG8gU2FyZGluaWEsIGFuZCBkaWVkIHRoZXJlLjwvbm90ZT47IGhlIGRyb3ZlIGZyb20gdGhlIGNpdHkgQ2FpdXMKICAgICAgIE1hcml1cyB0aGUgZ3VhcmRpYW4gb2YgdGhpcyBjaXR5OyBhbmQgb2YgbWFueSBvdGhlciBicmF2ZSBtZW4gc29tZSBoZSBkcm92ZSBmcm9tIHRoZSBjaXR5LAogICAgICAgYW5kIHNvbWUgaGUgbXVyZGVyZWQuIENuYWV1cyBPY3Rhdml1cyB0aGUgY29uc3VsIGRyb3ZlIGhpcyBjb2xsZWFndWUgYnkgZm9yY2Ugb2YgYXJtcyBvdXQgb2YKICAgICAgIHRoZSBjaXR5OyBhbGwgdGhpcyBwbGFjZSB3YXMgY3Jvd2RlZCB3aXRoIGhlYXBzIG9mIGNhcmNhc3NlcyBhbmQgZmxvd2VkIHdpdGggdGhlIGJsb29kIG9mCiAgICAgICBjaXRpemVuczsgYWZ0ZXJ3YXJkcyBDaW5uYSBhbmQgTWFyaXVzIGdvdCB0aGUgdXBwZXIgaGFuZDsgYW5kIHRoZW4gbW9zdCBpbGx1c3RyaW91cyBtZW4gd2VyZQogICAgICAgcHV0IHRvIGRlYXRoLCBhbmQgdGhlIHNwaXJpdHMgb2YgdGhlIHN0YXRlIHdlcmUgZXh0aW5ndWlzaGVkLiBBZnRlcndhcmRzIFN1bGxhIGF2ZW5nZWQgdGhlCiAgICAgICBjcnVlbHR5IG9mIHRoaXMgdmljdG9yeTsgaXQgaXMgbmVlZGxlc3MgdG8gc2F5IHdpdGggd2hhdCBhIGRpbWludXRpb24gb2YgdGhlIGNpdGl6ZW5zIGFuZAogICAgICAgd2l0aCB3aGF0IGRpc2FzdGVycyB0byB0aGUgcmVwdWJsaWMgTWFyY3VzIExlcGlkdXMgZGlzYWdyZWVkIHdpdGggdGhhdCBtb3N0IGVtaW5lbnQgYW5kIGJyYXZlCiAgICAgICBtYW4gUXVpbnR1cywgQ2F0dWx1cy4gSGlzIGRlYXRoIGRpZCBub3QgY2F1c2UgYXMgbXVjaCBncmllZiB0byB0aGUgcmVwdWJsaWMgYXMgdGhhdCBvZiB0aGUKICAgICAgIG90aGVycy4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoZXNlIGRpc3NlbnNpb25zLCBPIFJvbWFucywgd2VyZSBzdWNoIGFzIGNvbmNlcm5lZAogICAgICAgbm90IHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgcmVwdWJsaWMsIGJ1dCBvbmx5IGEgY2hhbmdlIGluIHRoZSBjb25zdGl0dXRpb24uIFRoZXkgZGlkIG5vdCB3aXNoCiAgICAgICB0aGF0IHRoZXJlIHNob3VsZCBiZSBubyByZXB1YmxpYywgYnV0IHRoYXQgdGhleSB0aGVtc2VsdmVzIHNob3VsZCBiZSB0aGUgY2hpZWYgbWVuIGluIHRoYXQKICAgICAgIHdoaWNoIGV4aXN0ZWQ7IG5vciBkaWQgdGhleSBkZXNpcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgYnVybnQsIGJ1dCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgc2hvdWxkIGZsb3VyaXNoIGluIGl0LiBBbmQgeWV0IGFsbCB0aG9zZSBkaXNzZW5zaW9ucywgbm9uZSBvZiB3aGljaCBhaW1lZCBhdCB0aGUgZGVzdHJ1Y3Rpb24KICAgICAgIG9mIHRoZSByZXB1YmxpYywgd2VyZSBzdWNoIHRoYXQgdGhleSB3ZXJlIHRvIGJlIHRlcm1pbmF0ZWQgbm90IGJ5IGEgcmVjb25jaWxpYXRpb24gYW5kCiAgICAgICBjb25jb3JkLCBidXQgb25seSBieSBpbnRlcm5lY2luZSB3YXIgYW1vbmcgdGhlIGNpdGl6ZW5zLiBCdXQgaW4gdGhpcyB3YXIgYWxvbmUsIHRoZSBncmVhdGVzdAogICAgICAgYW5kIG1vc3QgY3J1ZWwgaW4gdGhlIG1lbW9yeSBvZiBtYW4s4oCUYSB3YXIgc3VjaCBhcyBldmVuIHRoZSBjb3VudHJpZXMgb2YgdGhlCiAgICAgICBiYXJiYXJpYW5zIGhhdmUgbmV2ZXIgd2FnZWQgd2l0aCB0aGVpciBvd24gdHJpYmVzLOKAlGEgd2FyIGluIHdoaWNoIHRoaXMgbGF3IHdhcyBsYWlkCiAgICAgICBkb3duIGJ5IExlbnR1bHVzLCBhbmQgQ2F0aWxpbmUsIGFuZCBDYXNzaXVzIGFuZCBDZXRoZWd1cyB0aGF0IGV2ZXJ5IG9uZSwgd2hvIGNvdWxkIGxpdmUgaW4KICAgICAgIHNhZmV0eSBhcyBsb25nIGFzIHRoZSBjaXR5IHJlbWFpbmVkIGluIHNhZmV0eSwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgYW4gZW5lbXksIGluIHRoaXMgd2FyCiAgICAgICBJIGhhdmUgc28gbWFuYWdlZCBtYXR0ZXJzLCBPIFJvbWFucyB0aGF0IHlvdSBzaG91bGQgYWxsIGJlIHByZXNlcnZlZCBpbiBzYWZldHk7IGFuZCB0aG91Z2gKICAgICAgIHlvdXIgZW5lbWllcyBoYWQgdGhvdWdodCB0aGF0IG9ubHkgc3VjaCBhIG51bWJlciBvZiB0aGUgY2l0aXplbnMgd291bGQgYmUgbGVmdCBhcyBoYWQgaGVsZAogICAgICAgb3V0IGFnYWluc3QgYW4gaW50ZXJtaW5hYmxlIG1hc3NhY3JlIGFuZCBvbmx5IHNvIG11Y2ggb2YgdGhlIGNpdHkgYXMgdGhlIGZsYW1lcyBjb3VsZCBub3QKICAgICAgIGRldm91ciwgSSBoYXZlIHByZXNlcnZlZCBib3RoIHRoZSBjaXR5IGFuZCB0aGUgY2l0aXplbnMgdW5odXJ0IGFuZCB1bmRpbWluaXNoZWQuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.10.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIHRoZXNlIGRpc3NlbnNpb25zLCBPIFJvbWFucywgd2VyZSBzdWNoIGFzIGNvbmNlcm5lZAogICAgICAgbm90IHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgcmVwdWJsaWMsIGJ1dCBvbmx5IGEgY2hhbmdlIGluIHRoZSBjb25zdGl0dXRpb24uIFRoZXkgZGlkIG5vdCB3aXNoCiAgICAgICB0aGF0IHRoZXJlIHNob3VsZCBiZSBubyByZXB1YmxpYywgYnV0IHRoYXQgdGhleSB0aGVtc2VsdmVzIHNob3VsZCBiZSB0aGUgY2hpZWYgbWVuIGluIHRoYXQKICAgICAgIHdoaWNoIGV4aXN0ZWQ7IG5vciBkaWQgdGhleSBkZXNpcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgYnVybnQsIGJ1dCB0aGF0IHRoZXkgdGhlbXNlbHZlcwogICAgICAgc2hvdWxkIGZsb3VyaXNoIGluIGl0LiBBbmQgeWV0IGFsbCB0aG9zZSBkaXNzZW5zaW9ucywgbm9uZSBvZiB3aGljaCBhaW1lZCBhdCB0aGUgZGVzdHJ1Y3Rpb24KICAgICAgIG9mIHRoZSByZXB1YmxpYywgd2VyZSBzdWNoIHRoYXQgdGhleSB3ZXJlIHRvIGJlIHRlcm1pbmF0ZWQgbm90IGJ5IGEgcmVjb25jaWxpYXRpb24gYW5kCiAgICAgICBjb25jb3JkLCBidXQgb25seSBieSBpbnRlcm5lY2luZSB3YXIgYW1vbmcgdGhlIGNpdGl6ZW5zLiBCdXQgaW4gdGhpcyB3YXIgYWxvbmUsIHRoZSBncmVhdGVzdAogICAgICAgYW5kIG1vc3QgY3J1ZWwgaW4gdGhlIG1lbW9yeSBvZiBtYW4s4oCUYSB3YXIgc3VjaCBhcyBldmVuIHRoZSBjb3VudHJpZXMgb2YgdGhlCiAgICAgICBiYXJiYXJpYW5zIGhhdmUgbmV2ZXIgd2FnZWQgd2l0aCB0aGVpciBvd24gdHJpYmVzLOKAlGEgd2FyIGluIHdoaWNoIHRoaXMgbGF3IHdhcyBsYWlkCiAgICAgICBkb3duIGJ5IExlbnR1bHVzLCBhbmQgQ2F0aWxpbmUsIGFuZCBDYXNzaXVzIGFuZCBDZXRoZWd1cyB0aGF0IGV2ZXJ5IG9uZSwgd2hvIGNvdWxkIGxpdmUgaW4KICAgICAgIHNhZmV0eSBhcyBsb25nIGFzIHRoZSBjaXR5IHJlbWFpbmVkIGluIHNhZmV0eSwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgYW4gZW5lbXksIGluIHRoaXMgd2FyCiAgICAgICBJIGhhdmUgc28gbWFuYWdlZCBtYXR0ZXJzLCBPIFJvbWFucyB0aGF0IHlvdSBzaG91bGQgYWxsIGJlIHByZXNlcnZlZCBpbiBzYWZldHk7IGFuZCB0aG91Z2gKICAgICAgIHlvdXIgZW5lbWllcyBoYWQgdGhvdWdodCB0aGF0IG9ubHkgc3VjaCBhIG51bWJlciBvZiB0aGUgY2l0aXplbnMgd291bGQgYmUgbGVmdCBhcyBoYWQgaGVsZAogICAgICAgb3V0IGFnYWluc3QgYW4gaW50ZXJtaW5hYmxlIG1hc3NhY3JlIGFuZCBvbmx5IHNvIG11Y2ggb2YgdGhlIGNpdHkgYXMgdGhlIGZsYW1lcyBjb3VsZCBub3QKICAgICAgIGRldm91ciwgSSBoYXZlIHByZXNlcnZlZCBib3RoIHRoZSBjaXR5IGFuZCB0aGUgY2l0aXplbnMgdW5odXJ0IGFuZCB1bmRpbWluaXNoZWQuIDwvdHJhbnNsYXRpb24+"
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGZvciB0aGVzZSBleHBsb2l0cywgaW1wb3J0YW50IGFzIHRoZXkgYXJlLCBPIFJvbWFucywKICAgICAgIEkgYXNrIGZyb20geW91IG5vIHJld2FyZCBvZiB2aXJ0dWUsIG5vIGJhZGdlIG9mIGhvbm91ciwgbm8gbW9udW1lbnQgb2YgbXkgZ2xvcnksIGJleW9uZCB0aGUKICAgICAgIGV2ZXJsYXN0aW5nIHJlY29sbGVjdGlvbiBvZiB0aGlzIGRheS4gSW4geW91ciBtaW5kcyBJIHdpc2ggYWxsIG15IHRyaXVtcGhzLCBhbGwgbXkKICAgICAgIGRlY29yYXRpb25zIG9mIGhvbm91cjsgdGhlIG1vbnVtZW50cyBvZiBteSBnbG9yeSwgdGhlIGJhZGdlcyBvZiBteSByZW5vd24sIHRvIGJlIHN0b3JlZCBhbmQKICAgICAgIGxhaWQgdXAuIE5vdGhpbmcgdm9pY2VsZXNzIGNhbiBkZWxpZ2h0IG1lLCBub3RoaW5nIHNpbGVudCzigJRub3RoaW5nLCBpbiBzaG9ydCwgc3VjaAogICAgICAgYXMgZXZlbiB0aG9zZSB3aG8gYXJlIGxlc3Mgd29ydGh5IGNhbiBvYnRhaW4uIEluIHlvdXIgbWVtb3J5LCBPIFJvbWFucywgbXkgbmFtZSBzaGFsbCBiZQogICAgICAgY2hlcmlzaGVkLCBpbiB5b3VyIGRpc2NvdXJzZXMgaXQgc2hhbGwgZ3JvdywgaW4gdGhlIG1vbnVtZW50cyBvZiB5b3VyIGxldHRlcnMgaXQgc2hhbGwgZ3JvdwogICAgICAgb2xkIGFuZCBzdHJlbmd0aGVuOyBhbmQgSSBmZWVsIGFzc3VyZWQgPHBiIG49IjMxNiIgLz4gdGhhdCB0aGUgc2FtZSBkYXkgd2hpY2ggSSBob3BlIHdpbGwgYmUKICAgICAgIGZvciBldmVybGFzdGluZzsgd2lsbCBiZSByZW1lbWJlcmVkIGZvciBldmVyLCBzbyBhcyB0byB0ZW5kIGJvdGggdG8gdGhlIHNhZmV0eSBvZiB0aGUgY2l0eQogICAgICAgYW5kIHRoZSByZWNvbGxlY3Rpb24gb2YgbXkgY29uc3Vsc2hpcDsgYW5kIHRoYXQgaXQgd2lsbCBiZSByZW1lbWJlcmVkIHRoYXQgdGhlcmUgZXhpc3RlZCBpbgogICAgICAgdGhpcyBjaXR5IGF0IHRoZSBzYW1lIHRpbWUgdHdvIGNpdGl6ZW5zLCBvbmUgb2Ygd2hvbSBsaW1pdGVkIHRoZSBib3VuZGFyaWVzIG9mIHlvdXIgZW1waXJlCiAgICAgICBvbmx5IGJ5IHRoZSByZWdpb25zIG9mIGhlYXZlbiwgbm90IGJ5IHRob3NlIG9mIHRoZSBlYXJ0aCwgd2hpbGUgdGhlIG90aGVyIHByZXNlcnZlZCB0aGUgYWJvZGUKICAgICAgIGFuZCBob21lIG9mIHRoYXQgc2FtZSBlbXBpcmUuIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.11.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kIGZvciB0aGVzZSBleHBsb2l0cywgaW1wb3J0YW50IGFzIHRoZXkgYXJlLCBPIFJvbWFucywKICAgICAgIEkgYXNrIGZyb20geW91IG5vIHJld2FyZCBvZiB2aXJ0dWUsIG5vIGJhZGdlIG9mIGhvbm91ciwgbm8gbW9udW1lbnQgb2YgbXkgZ2xvcnksIGJleW9uZCB0aGUKICAgICAgIGV2ZXJsYXN0aW5nIHJlY29sbGVjdGlvbiBvZiB0aGlzIGRheS4gSW4geW91ciBtaW5kcyBJIHdpc2ggYWxsIG15IHRyaXVtcGhzLCBhbGwgbXkKICAgICAgIGRlY29yYXRpb25zIG9mIGhvbm91cjsgdGhlIG1vbnVtZW50cyBvZiBteSBnbG9yeSwgdGhlIGJhZGdlcyBvZiBteSByZW5vd24sIHRvIGJlIHN0b3JlZCBhbmQKICAgICAgIGxhaWQgdXAuIE5vdGhpbmcgdm9pY2VsZXNzIGNhbiBkZWxpZ2h0IG1lLCBub3RoaW5nIHNpbGVudCzigJRub3RoaW5nLCBpbiBzaG9ydCwgc3VjaAogICAgICAgYXMgZXZlbiB0aG9zZSB3aG8gYXJlIGxlc3Mgd29ydGh5IGNhbiBvYnRhaW4uIEluIHlvdXIgbWVtb3J5LCBPIFJvbWFucywgbXkgbmFtZSBzaGFsbCBiZQogICAgICAgY2hlcmlzaGVkLCBpbiB5b3VyIGRpc2NvdXJzZXMgaXQgc2hhbGwgZ3JvdywgaW4gdGhlIG1vbnVtZW50cyBvZiB5b3VyIGxldHRlcnMgaXQgc2hhbGwgZ3JvdwogICAgICAgb2xkIGFuZCBzdHJlbmd0aGVuOyBhbmQgSSBmZWVsIGFzc3VyZWQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzE2IiAvPiB0aGF0IHRoZSBzYW1lIGRheSB3aGljaCBJIGhvcGUgd2lsbCBiZQogICAgICAgZm9yIGV2ZXJsYXN0aW5nOyB3aWxsIGJlIHJlbWVtYmVyZWQgZm9yIGV2ZXIsIHNvIGFzIHRvIHRlbmQgYm90aCB0byB0aGUgc2FmZXR5IG9mIHRoZSBjaXR5CiAgICAgICBhbmQgdGhlIHJlY29sbGVjdGlvbiBvZiBteSBjb25zdWxzaGlwOyBhbmQgdGhhdCBpdCB3aWxsIGJlIHJlbWVtYmVyZWQgdGhhdCB0aGVyZSBleGlzdGVkIGluCiAgICAgICB0aGlzIGNpdHkgYXQgdGhlIHNhbWUgdGltZSB0d28gY2l0aXplbnMsIG9uZSBvZiB3aG9tIGxpbWl0ZWQgdGhlIGJvdW5kYXJpZXMgb2YgeW91ciBlbXBpcmUKICAgICAgIG9ubHkgYnkgdGhlIHJlZ2lvbnMgb2YgaGVhdmVuLCBub3QgYnkgdGhvc2Ugb2YgdGhlIGVhcnRoLCB3aGlsZSB0aGUgb3RoZXIgcHJlc2VydmVkIHRoZSBhYm9kZQogICAgICAgYW5kIGhvbWUgb2YgdGhhdCBzYW1lIGVtcGlyZS4gPC90cmFuc2xhdGlvbj4="
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['3.12.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSB0aGUgZm9ydHVuZSBhbmQgY29uZGl0aW9uIG9mIHRob3NlIGV4cGxvaXRzIHdoaWNoIEkgaGF2ZSBwZXJmb3JtZWQgaXMgbm90IHRoZQogICAgICAgc2FtZSB3aXRoIHRoYXQgb2YgdGhvc2UgbWVuIHdobyBoYXZlIGRpcmVjdGVkIGZvcmVpZ24gd2Fyc+KAlGJlY2F1c2UgSSBtdXN0IGxpdmUKICAgICAgIGFtb25nIHRob3NlIHdob20gSSBoYXZlIGRlZmVhdGVkIGFuZCBzdWJkdWVkLCB0aGV5IGhhdmUgbGVmdCB0aGVpciBlbmVtaWVzIGVpdGhlciBzbGFpbiBvcgogICAgICAgY3J1c2hlZCzigJRpdCBpcyB5b3VyIGJ1c2luZXNzLCBPIFJvbWFucywgdG8gdGFrZSBjYXJlLCBpZiB0aGVpciBnb29kIGRlZWRzIGFyZSBhCiAgICAgICBiZW5lZml0IHRvIG90aGVycywgdGhhdCBtaW5lIHNoYWxsIG5ldmVyIGJlIGFuIGluanVyeSB0byBtZS4gRm9yIHRoYXQgdGhlIHdpY2tlZCBhbmQKICAgICAgIHByb2ZsaWdhdGUgZGVzaWducyBvZiBhdWRhY2lvdXMgbWVuIHNoYWxsIG5vdCBiZSBhYmxlIHRvIGluanVyZSB5b3UsIEkgaGF2ZSB0YWtlbiBjYXJlOyBpdCBpcwogICAgICAgeW91ciBidXNpbmVzcyB0byB0YWtlIGNhcmUgdGhhdCB0aGV5IGRvIG5vdCBpbmp1cmUgbWUuIEFsdGhvdWdoLCBPIFJvbWFucywgbm8gaW5qdXJ5IGNhbiBiZQogICAgICAgZG9uZSB0byBtZSBieSB0aGVtLOKAlGZvciB0aGVyZSBpcyBhIGdyZWF0IHByb3RlY3Rpb24gaW4gdGhlIGFmZmVjdGlvbiBvZiBhbGwgZ29vZAogICAgICAgbWVuLCB3aGljaCBpcyBwcm9jdXJlZCBmb3IgbWUgZm9yIGV2ZXI7IHRoZXJlIGlzIGdyZWF0IGRpZ25pdHkgaW4gdGhlIHJlcHVibGljLCB3aGljaCB3aWxsCiAgICAgICBhbHdheXMgc2lsZW50bHkgZGVmZW5kIG1lOyB0aGVyZSBpcyBncmVhdCBwb3dlciBpbiBjb25zY2llbmNlLCBhbmQgdGhvc2Ugd2hvIG5lZ2xlY3QgaXQgd2hlbgogICAgICAgdGhleSBkZXNpcmUgdG8gYXR0YWNrIG1lIHdpbGwgZGVzdHJveSB0aGVtc2VsdmVzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.12.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSBpcyBtb3Jlb3ZlciB0aGF0IGRpc3Bvc2l0aW9uIGluIG1lLCBPIFJvbWFucywgdGhhdCBJIG5vdCBvbmx5IHdpbGwgeWllbGQgdG8gdGhlCiAgICAgICBhdWRhY2l0eSBvZiBubyBvbmUsIGJ1dCB0aGF0IEkgYWx3YXlzIHZvbHVudGFyaWx5IGF0dGFjayB0aGUgd29ydGhsZXNzLiBBbmQgaWYgYWxsIHRoZQogICAgICAgdmlvbGVuY2Ugb2YgZG9tZXN0aWMgZW5lbWllcyBiZWluZyB3YXJkZWQgb2ZmIGZyb20geW91IHR1cm5zIGl0c2VsZiB1cG9uIG1lIGFsb25lLCB5b3Ugd2lsbAogICAgICAgaGF2ZSB0byB0YWtlIGNhcmUsIE8gUm9tYW47IGluIHdoYXQgY29uZGl0aW9uIHlvdSB3aXNoIHRob3NlIG1lbiB0byBiZSBmb3IgdGhlIGZ1dHVyZSwgd2hvCiAgICAgICBmb3IgeW91ciBzYWZldHkgaGF2ZSBleHBvc2VkIHRoZW1zZWx2ZXMgdG8gdW5wb3B1bGFyaXR5IGFuZCB0byBhbGwgc29ydHMgb2YgZGFuZ2Vycy4gQXMgZm9yCiAgICAgICBtZSwgbXlzZWxmOyB3aGF0IGlzIHRoZXJlIHdoaWNoIG5vdyBjYW4gYmUgZ2FpbmVkIGJ5IG1lIGZvciB0aGUgZW5qb3ltZW50IG9mIGxpZmUsIGVzcGVjaWFsbHkKICAgICAgIHdoZW4gbmVpdGhlciBpbiBjcmVkaXQgYW1vbmcgeW91LCBub3IgaW4gdGhlIGdsb3J5IG9mIHZpcnR1ZSwgZG8gSSBzZWUgYW55IGhpZ2hlciBwb2ludCB0bwogICAgICAgd2hpY2ggSSBjYW4gYmUgZGVzaXJvdXMgdG8gY2xpbWI/IDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.12.29'] = ""
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.1.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkkgc2VlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0aGF0IHRoZSBsb29rcyBhbmQgZXllcyBvZiB5b3UgYWxsIGFyZSB0dXJuZWQgdG93YXJkcyBtZTsgSSBzZWUKICAgICAgIHRoYXQgeW91IGFyZSBhbnhpb3VzIG5vdCBvbmx5IGZvciB5b3VyIG93biBkYW5nZXIgYW5kIHRoYXQgb2YgdGhlIHJlcHVibGljLCBidXQgZXZlbiwgaWYgdGhhdAogICAgICAgYmUgcmVtb3ZlZCwgZm9yIG1pbmUuIFlvdXIgZ29vZC13aWxsIGlzIGRlbGlnaHRmdWwgdG8gb25lIGFtaWQgZXZpbHMsIGFuZCBwbGVhc2luZyBhbWlkCiAgICAgICBncmllZjsgYnV0IEkgZW50cmVhdCB5b3UsIGluIHRoZSBuYW1lIG9mIHRoZSBpbW1vcnRhbCBnb2RzLCBsYXkgaXQgYXNpZGUgbm93LCBhbmQsIGZvcmdldHRpbmcKICAgICAgIG15IHNhZmV0eSwgdGhpbmsgb2YgeW91cnNlbHZlcyBhbmQgb2YgeW91ciBjaGlsZHJlbi4gSWYgaW5kZWVkLCB0aGlzIGNvbmRpdGlvbiBvZiB0aGUKICAgICAgIGNvbnN1bHNoaXAgaGFzIGJlZW4gYWxsb3R0ZWQgdG8gbWUsIHRoYXQgSSBzaG91bGQgYmVhciBhbGwgYml0dGVybmVzcywgYWxsIHBhaW5zIGFuZAogICAgICAgdG9ydHVyZXMsIEkgd2lsbCBiZWFyIHRoZW0gbm90IG9ubHkgYnJhdmVseSBidXQgZXZlbiBjaGVlcmZ1bGx5LCBwcm92aWRlZCB0aGF0IGJ5IG15IHRvaWxzCiAgICAgICBkaWduaXR5IGFuZCBzYWZldHkgYXJlIHByb2N1cmVkIGZvciB5b3UgYW5kIGZvciB0aGUgUm9tYW4gcGVvcGxlLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IEkgYW0gdGhhdCBjb25zdWwsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvIHdob20gbmVpdGhlcgogICAgICAgdGhlIGZvcnVtIGluIHdoaWNoIGFsbCBqdXN0aWNlIGlzIGNvbnRhaW5lZCwgbm9yIHRoZSBDYW1wdXMgTWFydGl1cywgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUKICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPkNhbXB1cyBNYXJ0aXVzPC9mb3JlaWduPiB3YXMgY29uc2VjcmF0ZWQgb3IgcmVzdG9yZWQgdG8gTWFycyBhZnRlciB0aGUKICAgICAgICBleHB1bHNpb24gb2YgdGhlIFRhcnF1aW5zOyB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmNvbWl0aWEgY2VudHVyaWF0YTwvZm9yZWlnbj4gYXQgd2hpY2ggYWxsCiAgICAgICAgbWFnaXN0cmF0ZXMgd2VyZSBjcmVhdGVkIHdlcmUgaGVsZCB0aGVyZS48L25vdGU+IGNvbnNlY3JhdGVkIHRvIHRoZSBjb25zdWxhciBhc3NlbWJsaWVzLCBub3IKICAgICAgIHRoZSBzZW5hdGUgaG91c2UsIHRoZSBjaGllZiBhc3Npc3RhbmNlIG9mIGFsbCBuYXRpb25zLCBub3IgbXkgb3duIGhvbWUsIHRoZSBjb21tb24gcmVmdWdlIG9mCiAgICAgICBhbGwgbWVuLCBub3IgbXkgYmVkIGRldm90ZWQgdG8gcmVzdCwgaW4gc2hvcnQsIG5vdCBldmVuIHRoaXMgc2VhdCBvZiBob25vdXIsIHRoaXMgY3VydWxlCiAgICAgICBjaGFpciBoYXMgZXZlciBiZWVuIGZyZWUgZnJvbSB0aGUgZGFuZ2VyIG9mIGRlYXRoLCBvciBmcm9tIHBsb3RzIGFuZCB0cmVhY2hlcnkuIEkgaGF2ZSBiZWVuCiAgICAgICBzaWxlbnQgYWJvdXQgbWFueSB0aGluZ3MsIEkgaGF2ZSBib3JuZSBtdWNoLCBJIGhhdmUgY29uY2VkZWQgbXVjaCwgSSBoYXZlIHJlbWVkaWVkIG1hbnkKICAgICAgIHRoaW5ncyB3aXRoIHNvbWUgcGFpbiB0byBteXNlbGYgYW1pZCB0aGUgYWxhcm0gb2YgeW91IGFsbC4gTm93IGlmIHRoZSBpbW1vcnRhbCBnb2RzIGhhdmUKICAgICAgIGRldGVybWluZWQgdGhhdCB0aGVyZSBzaGFsbCBiZSB0aGlzIGVuZCB0byBteSBjb25zdWxzaGlwIHRoYXQgSSBzaG91bGQgc25hdGNoIHlvdSwgTwogICAgICAgY29uc2NyaXB0IGZhdGhlcnMsIGFuZCB0aGUgUm9tYW4gcGVvcGxlIGZyb20gbWlzZXJhYmxlIHNsYXVnaHRlciwgeW91ciB3aXZlcyBhbmQgY2hpbGRyZW4gYW5kCiAgICAgICB0aGUgdmVzdGFsIHZpcmdpbnMgZnJvbSBtb3N0IGJpdHRlciBkaXN0cmVzcywgdGhlIHRlbXBsZXMgYW5kIHNocmluZXMgb2YgdGhlIGdvZHMgYW5kIHRoaXMKICAgICAgIG1vc3QgbG92ZWx5IGNvdW50cnkgb2YgYWxsIG9mIHVzLCBmcm9tIGltcGlvdXMgZmxhbWVzLCBhbGwgSXRhbHkgZnJvbSB3YXIgYW5kIGRldmFzdGF0aW9uLAogICAgICAgdGhlbiB3aGF0ZXZlciBmb3J0dW5lIGlzIGxhaWQgdXAgZm9yIG1lIGJ5IG15c2VsZiBpdCBzaGFsbCBiZSBib3JuZS4gSWYsIGluZGVlZCwgUHVibGl1cwogICAgICAgTGVudHVsdXMsIGJlaW5nIGxlZCBvbiBieSBzb290aHNheWVycyBiZWxpZXZlZCB0aGF0IGhpcyBuYW1lIHdhcyBjb25uZWN0ZWQgYnkgZGVzdGlueSB3aXRoCiAgICAgICB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIHJlcHVibGljLCB3aHkgc2hvdWxkIG5vdCBJIHJlam9pY2UgdGhhdCBteSBjb25zdWxzaGlwIGhhcyB0YWtlbiBwbGFjZQogICAgICAgYWxtb3N0IGJ5IHRoZSBleHByZXNzIGFwcG9pbnRtZW50IG9mIGZhdGUgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIHJlcHVibGljPyA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBJIGFtIHRoYXQgY29uc3VsLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCB0byB3aG9tIG5laXRoZXIKICAgICAgIHRoZSBmb3J1bSBpbiB3aGljaCBhbGwganVzdGljZSBpcyBjb250YWluZWQsIG5vciB0aGUgQ2FtcHVzIE1hcnRpdXMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5UaGUKICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q2FtcHVzIE1hcnRpdXM8L2ZvcmVpZ24+IHdhcyBjb25zZWNyYXRlZCBvciByZXN0b3JlZCB0byBNYXJzIGFmdGVyIHRoZQogICAgICAgIGV4cHVsc2lvbiBvZiB0aGUgVGFycXVpbnM7IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGNlbnR1cmlhdGE8L2ZvcmVpZ24+IGF0IHdoaWNoIGFsbAogICAgICAgIG1hZ2lzdHJhdGVzIHdlcmUgY3JlYXRlZCB3ZXJlIGhlbGQgdGhlcmUuPC9ub3RlPiBjb25zZWNyYXRlZCB0byB0aGUgY29uc3VsYXIgYXNzZW1ibGllcywgbm9yCiAgICAgICB0aGUgc2VuYXRlIGhvdXNlLCB0aGUgY2hpZWYgYXNzaXN0YW5jZSBvZiBhbGwgbmF0aW9ucywgbm9yIG15IG93biBob21lLCB0aGUgY29tbW9uIHJlZnVnZSBvZgogICAgICAgYWxsIG1lbiwgbm9yIG15IGJlZCBkZXZvdGVkIHRvIHJlc3QsIGluIHNob3J0LCBub3QgZXZlbiB0aGlzIHNlYXQgb2YgaG9ub3VyLCB0aGlzIGN1cnVsZQogICAgICAgY2hhaXIgaGFzIGV2ZXIgYmVlbiBmcmVlIGZyb20gdGhlIGRhbmdlciBvZiBkZWF0aCwgb3IgZnJvbSBwbG90cyBhbmQgdHJlYWNoZXJ5LiBJIGhhdmUgYmVlbgogICAgICAgc2lsZW50IGFib3V0IG1hbnkgdGhpbmdzLCBJIGhhdmUgYm9ybmUgbXVjaCwgSSBoYXZlIGNvbmNlZGVkIG11Y2gsIEkgaGF2ZSByZW1lZGllZCBtYW55CiAgICAgICB0aGluZ3Mgd2l0aCBzb21lIHBhaW4gdG8gbXlzZWxmIGFtaWQgdGhlIGFsYXJtIG9mIHlvdSBhbGwuIE5vdyBpZiB0aGUgaW1tb3J0YWwgZ29kcyBoYXZlCiAgICAgICBkZXRlcm1pbmVkIHRoYXQgdGhlcmUgc2hhbGwgYmUgdGhpcyBlbmQgdG8gbXkgY29uc3Vsc2hpcCB0aGF0IEkgc2hvdWxkIHNuYXRjaCB5b3UsIE8KICAgICAgIGNvbnNjcmlwdCBmYXRoZXJzLCBhbmQgdGhlIFJvbWFuIHBlb3BsZSBmcm9tIG1pc2VyYWJsZSBzbGF1Z2h0ZXIsIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuIGFuZAogICAgICAgdGhlIHZlc3RhbCB2aXJnaW5zIGZyb20gbW9zdCBiaXR0ZXIgZGlzdHJlc3MsIHRoZSB0ZW1wbGVzIGFuZCBzaHJpbmVzIG9mIHRoZSBnb2RzIGFuZCB0aGlzCiAgICAgICBtb3N0IGxvdmVseSBjb3VudHJ5IG9mIGFsbCBvZiB1cywgZnJvbSBpbXBpb3VzIGZsYW1lcywgYWxsIEl0YWx5IGZyb20gd2FyIGFuZCBkZXZhc3RhdGlvbiwKICAgICAgIHRoZW4gd2hhdGV2ZXIgZm9ydHVuZSBpcyBsYWlkIHVwIGZvciBtZSBieSBteXNlbGYgaXQgc2hhbGwgYmUgYm9ybmUuIElmLCBpbmRlZWQsIFB1YmxpdXMKICAgICAgIExlbnR1bHVzLCBiZWluZyBsZWQgb24gYnkgc29vdGhzYXllcnMgYmVsaWV2ZWQgdGhhdCBoaXMgbmFtZSB3YXMgY29ubmVjdGVkIGJ5IGRlc3Rpbnkgd2l0aAogICAgICAgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSByZXB1YmxpYywgd2h5IHNob3VsZCBub3QgSSByZWpvaWNlIHRoYXQgbXkgY29uc3Vsc2hpcCBoYXMgdGFrZW4gcGxhY2UKICAgICAgIGFsbW9zdCBieSB0aGUgZXhwcmVzcyBhcHBvaW50bWVudCBvZiBmYXRlIGZvciB0aGUgcHJlc2VydmF0aW9uIG9mIHRoZSByZXB1YmxpYz8gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Q2FtcHVzIE1hcnRpdXM8L2ZvcmVpZ24+IHdhcyBjb25zZWNyYXRlZCBvciByZXN0b3JlZCB0byBNYXJzIGFmdGVyIHRoZQogICAgICAgIGV4cHVsc2lvbiBvZiB0aGUgVGFycXVpbnM7IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb21pdGlhIGNlbnR1cmlhdGE8L2ZvcmVpZ24+IGF0IHdoaWNoIGFsbAogICAgICAgIG1hZ2lzdHJhdGVzIHdlcmUgY3JlYXRlZCB3ZXJlIGhlbGQgdGhlcmUuPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hlcmVmb3JlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBjb25zdWx0IHRoZSB3ZWxmYXJlIG9mIHlvdXJzZWx2ZXMsIHByb3ZpZGUgZm9yIHRoYXQgb2YgdGhlCiAgICAgICByZXB1YmxpYzsgcHJlc2VydmUgeW91cnNlbHZlcywgeW91ciB3aXZlcywgeW91ciBjaGlsZHJlbiwgYW5kIHlvdXIgZm9ydHVuZXM7IGRlZmVuZCB0aGUgbmFtZQogICAgICAgYW5kIHNhZmV0eSBvZiB0aGUgUm9tYW4gcGVvcGxlOyBjZWFzZSB0byBzcGFyZSBtZSwgYW5kIHRvIHRoaW5rIG9mIG1lLiBGb3IsIGluIHRoZSBmaXJzdAogICAgICAgcGxhY2UsIEkgb3VnaHQgdG8gaG9wZSB0aGF0IGFsbCB0aGUgZ29kcyB3aG8gcHJlc2lkZSBvdmVyIHRoaXMgY2l0eSB3aWxsIHNob3cgbWUgZ3JhdGl0dWRlIGluCiAgICAgICBwcm9wb3J0aW9uIGFzIEkgZGVzZXJ2ZSBpdDsgYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIGlmIGFueXRoaW5nIGRvZXMgaGFwcGVuIHRvIG1lLCBJIHNoYWxsCiAgICAgICBmYWxsIHdpdGggYSBjb250ZW50ZWQgYW5kIHByZXBhcmVkIG1pbmQ7IGFuZCwgaW5kZWVkLCBkZWF0aCBjYW5ub3QgYmUgZGlzZ3JhY2VmdWwgdG8gYSBicmF2ZQogICAgICAgbWFuLCBub3IgcHJlbWF0dXJlIHRvIG9uZSBvZiBjb25zdWxhciByYW5rLCBub3IgbWlzZXJhYmxlIHRvIGEgd2lzZSBtYW4uIE5vdCB0aGF0IEkgYW0gYSBtYW4KICAgICAgIG9mIHNvIGlyb24gYSBkaXNwb3NpdGlvbiBhcyBub3QgdG8gYmUgbW92ZWQgYnkgdGhlIGdyaWVmIG9mIGEgbW9zdCBkZWFyIGFuZCBhZmZlY3Rpb25hdGUKICAgICAgIGJyb3RoZXIgbm93IHByZXNlbnQsIGFuZCBieSB0aGUgdGVhcnMgb2YgYWxsIHRoZXNlIG1lbiBieSB3aG9tIHlvdSBub3cgc2VlIG1lIHN1cnJvdW5kZWQuIE5vcgogICAgICAgZG9lcyBteSBmYWludGluZyB3aWZlLCBteSBkYXVnaHRlciBwcm9zdHJhdGUgd2l0aCBmZWFyLCBhbmQgbXkgbGl0dGxlIHNvbiB3aG9tIHRoZSByZXB1YmxpYwogICAgICAgc2VlbXMgdG8gbWUgdG8gZW1icmFjZSBhcyBhIHNvcnQgb2YgaG9zdGFnZSBmb3IgbXkgY29uc3Vsc2hpcCwgdGhlIHNvbi1pbi1sYXcgd2hvLCBhd2FpdGluZwogICAgICAgdGhlIGVuZCBvZiB0aGF0IGRheSwgaXMgbm93IHN0YW5kaW5nIGluIG15IHNpZ2h0LCBmYWlsIG9mdGVuIHRvIHJlY2FsbCBteSBtaW5kIHRvIG15IGhvbWUuIEkKICAgICAgIGFtIG1vdmVkIGJ5IGFsbCB0aGVzZSBjaXJjdW1zdGFuY2VzLCBidXQgaW4gc3VjaCBhIGRpcmVjdGlvbiBhcyB0byB3aXNoIHRoYXQgdGhleSBhbGwgbWF5IGJlCiAgICAgICBzYWZlIHRvZ2V0aGVyIHdpdGggeW91LCBldmVuIGlmIHNvbWUgdmlvbGVuY2Ugb3ZlcndoZWxtcyBtZSwgcmF0aGVyIHRoYW4gdGhhdCBib3RoIHRoZXkgYW5kCiAgICAgICBhcmUgc2hvdWxkIHBlcmlzaCB0b2dldGhlciB3aXRoIHRoZSByZXB1YmxpYy4gPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGF0dGVuZCB0byB0aGUgc2FmZXR5IG9mCiAgICAgICB0aGUgcmVwdWJsaWM7IGxvb2sgcm91bmQgdXBvbiBhbGwgdGhlIHN0b3JtcyB3aGljaCBhcmUgaW1wZW5kaW5nLCB1bmxlc3MgeW91IGd1YXJkIGFnYWluc3QKICAgICAgIHRoZW0uIEl0IGlzIG5vdCBUaWJlcml1cyBHcmFjY2h1cywgd2hvIHdpc2hlZCB0byBiZSBtYWRlIGEgc2Vjb25kIHRpbWUgYSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlOyBpdCBpcyBub3QgQ2FpdXMgR3JhY2NodXMsIHdobyBlbmRlYXZvdXJlZCB0byBleGNpdGUgdGhlIHBhcnRpc2FucyA8cGIgbj0iMzIwIiAvPiBvZgogICAgICAgdGhlIGFncmFyaWFuIGxhdzsgaXQgaXMgbm90IEx1Y2l1cyBTYXR1cm5pbnVzLCB3aG8gc2xldyBNZW1taXVzLCB3aG8gaXMgbm93IGluIHNvbWUgZGFuZ2VyLAogICAgICAgd2hvIGlzIG5vdyBicm91Z2h0IGJlZm9yZSB0aGUgdHJpYnVuYWwgb2YgeW91ciBzZXZlcml0eS4gVGhleSBhcmUgbm93IGluIHlvdXIgaGFuZHMgd2hvCiAgICAgICB3aXRoc3Rvb2QgYWxsIFJvbWUsIHdpdGggdGhlIG9iamVjdCBvZiBicmluZ2luZyBjb25mbGFncmF0aW9uIG9uIHRoZSB3aG9sZSBjaXR5LCBtYXNzYWNyZSBvbgogICAgICAgYWxsIG9mIHlvdSwgYW5kIG9mIHJlY2VpdmluZyBDYXRpbGluZTsgdGhlaXIgbGV0dGVycyBhcmUgaW4geW91ciBwb3NzZXNzaW9uLCB0aGVpciBzZWFscywKICAgICAgIHRoZWlyIGhhbmR3cml0aW5nLCBhbmQgdGhlIGNvbmZlc3Npb24gb2YgZWFjaCBpbmRpdmlkdWFsIG9mIHRoZW07IHRoZSBBbGxvYnJvZ2VzIGFyZSB0YW1wZXJlZAogICAgICAgd2l0aCwgdGhlIHNsYXZlcyBhcmUgZXhjaXRlZCwgQ2F0aWxpbmUgaXMgc2VudCBmb3I7IHRoZSBkZXNpZ24gaXMgYWN0dWFsbHkgYmVndW4gdG8gYmUgcHV0IGluCiAgICAgICBleGVjdXRpb24sIHRoYXQgYWxsIHNob3VsZCBiZSBwdXQgdG8gZGVhdGgsIHNvIHRoYXQgbm8gb25lIHNob3VsZCBiZSBsZWZ0IGV2ZW4gdG8gbW91cm4gdGhlCiAgICAgICBuYW1lIG9mIHRoZSByZXB1YmxpYywgYW5kIHRvIGxhbWVudCBvdmVyIHRoZSBkb3duZmFsbCBvZiBzbyBtaWdodHkgYSBkb21pbmlvbi4gPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIGF0dGVuZCB0byB0aGUgc2FmZXR5IG9mCiAgICAgICB0aGUgcmVwdWJsaWM7IGxvb2sgcm91bmQgdXBvbiBhbGwgdGhlIHN0b3JtcyB3aGljaCBhcmUgaW1wZW5kaW5nLCB1bmxlc3MgeW91IGd1YXJkIGFnYWluc3QKICAgICAgIHRoZW0uIEl0IGlzIG5vdCBUaWJlcml1cyBHcmFjY2h1cywgd2hvIHdpc2hlZCB0byBiZSBtYWRlIGEgc2Vjb25kIHRpbWUgYSB0cmlidW5lIG9mIHRoZQogICAgICAgcGVvcGxlOyBpdCBpcyBub3QgQ2FpdXMgR3JhY2NodXMsIHdobyBlbmRlYXZvdXJlZCB0byBleGNpdGUgdGhlIHBhcnRpc2FucyA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjAiIC8+IG9mCiAgICAgICB0aGUgYWdyYXJpYW4gbGF3OyBpdCBpcyBub3QgTHVjaXVzIFNhdHVybmludXMsIHdobyBzbGV3IE1lbW1pdXMsIHdobyBpcyBub3cgaW4gc29tZSBkYW5nZXIsCiAgICAgICB3aG8gaXMgbm93IGJyb3VnaHQgYmVmb3JlIHRoZSB0cmlidW5hbCBvZiB5b3VyIHNldmVyaXR5LiBUaGV5IGFyZSBub3cgaW4geW91ciBoYW5kcyB3aG8KICAgICAgIHdpdGhzdG9vZCBhbGwgUm9tZSwgd2l0aCB0aGUgb2JqZWN0IG9mIGJyaW5naW5nIGNvbmZsYWdyYXRpb24gb24gdGhlIHdob2xlIGNpdHksIG1hc3NhY3JlIG9uCiAgICAgICBhbGwgb2YgeW91LCBhbmQgb2YgcmVjZWl2aW5nIENhdGlsaW5lOyB0aGVpciBsZXR0ZXJzIGFyZSBpbiB5b3VyIHBvc3Nlc3Npb24sIHRoZWlyIHNlYWxzLAogICAgICAgdGhlaXIgaGFuZHdyaXRpbmcsIGFuZCB0aGUgY29uZmVzc2lvbiBvZiBlYWNoIGluZGl2aWR1YWwgb2YgdGhlbTsgdGhlIEFsbG9icm9nZXMgYXJlIHRhbXBlcmVkCiAgICAgICB3aXRoLCB0aGUgc2xhdmVzIGFyZSBleGNpdGVkLCBDYXRpbGluZSBpcyBzZW50IGZvcjsgdGhlIGRlc2lnbiBpcyBhY3R1YWxseSBiZWd1biB0byBiZSBwdXQgaW4KICAgICAgIGV4ZWN1dGlvbiwgdGhhdCBhbGwgc2hvdWxkIGJlIHB1dCB0byBkZWF0aCwgc28gdGhhdCBubyBvbmUgc2hvdWxkIGJlIGxlZnQgZXZlbiB0byBtb3VybiB0aGUKICAgICAgIG5hbWUgb2YgdGhlIHJlcHVibGljLCBhbmQgdG8gbGFtZW50IG92ZXIgdGhlIGRvd25mYWxsIG9mIHNvIG1pZ2h0eSBhIGRvbWluaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxsIHRoZXNlIHRoaW5ncyB0aGUgd2l0bmVzc2VzIGhhdmUgaW5mb3JtZWQgeW91IG9mOyB0aGUgcHJpc29uZXJzIGhhdmUgY29uZmVzc2VkLCB5b3UgYnkKICAgICAgIG1hbnkganVkZ21lbnRzIGhhdmUgYWxyZWFkeSBkZWNpZGVkOyBmaXJzdCwgYmVjYXVzZSB5b3UgaGF2ZSB0aGFua2VkIG1lIGluIHVucHJlY2VkZW50ZWQKICAgICAgIGxhbmd1YWdlLCBhbmQgaGF2ZSBwYXNzZWQgYSB2b3RlIHRoYXQgdGhlIGNvbnNwaXJhY3kgb2YgYWJhbmRvbmVkIG1lbiBoYXMgYmVlbiBsYWlkIG9wZW4gYnkKICAgICAgIG15IHZpcnR1ZSBhbmQgZGlsaWdlbmNlOyBzZWNvbmRseSwgYmVjYXVzZSB5b3UgaGF2ZSBjb21wZWxsZWQgUHVibGl1cyBMZW50dWx1cyB0byBhYmRpY2F0ZQogICAgICAgdGhlIHByYWV0b3JzaGlwOyBhZ2FpbiwgYmVjYXVzZSB5b3UgaGF2ZSB2b3RlZCB0aGF0IGhlIGFuZCB0aGUgb3RoZXJzIGFib3V0IHdob20geW91IGhhdmUKICAgICAgIGRlY2lkZWQgc2hvdWxkIGJlIGdpdmVuIGludG8gY3VzdG9keTsgYW5kIGFib3ZlIGFsbCBiZWNhdXNlIHlvdSBoYXZlIGRlY3JlZWQgYSBzdXBwbGljYXRpb24KICAgICAgIGluIG15IG5hbWUsIGFuIGhvbm91ciB3aGljaCBoYXMgbmV2ZXIgYmVlbiBwYWlkIHRvIGFueSBvbmUgYmVmb3JlIGFjdGluZyBpbiBhIGNpdmlsIGNhcGFjaXR5OwogICAgICAgbGFzdCBvZiBhbGwgYmVjYXVzZSB5ZXN0ZXJkYXkgeW91IGdhdmUgbW9zdCBhbXBsZSByZXdhcmRzIHRvIHRoZSBhbWJhc3NhZG9ycyBvZiB0aGUKICAgICAgIEFsbG9icm9nZXMgYW5kIHRvIFRpdHVzIFZ1bHR1cmNpdXM7IGFsbCB3aGljaCBhY3RzIGFyZSBzdWNoIHRoYXQgdGhleSwgd2hvIGhhdmUgYmVlbiBnaXZlbgogICAgICAgaW50byBjdXN0b2R5IGJ5IG5hbWUsIHdpdGhvdXQgYW55IGRvdWJ0IHNlZW0gYWxyZWFkeSBjb25kZW1uZWQgYnkgeW91LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBJIGhhdmUgZGV0ZXJtaW5lZCB0byByZWZlciB0aGUgYnVzaW5lc3MgdG8geW91IGFzIGEgZnJlc2ggbWF0dGVyLCBPIGNvbnNjcmlwdCBmYXRoZXJzLAogICAgICAgYm90aCBhcyB0byB0aGUgZmFjdCwgd2hhdCB5b3UgdGhpbmsgb2YgaXQgYW5kIGFzIHRvIHRoZSBwdW5pc2htZW50LCB3aGF0IHlvdSB2b3RlLiBJIHdpbGwKICAgICAgIHN0YXRlIHdoYXQgaXQgYmVob3ZlcyB0aGUgY29uc3VsIHRvIHN0YXRlLiBJIGhhdmUgc2VlbiBmb3IgYSBsb25nIHRpbWUgZ3JlYXQgbWFkbmVzcyBleGlzdGluZwogICAgICAgaW4gdGhlIHJlcHVibGljLCBhbmQgbmV3IGRlc2lnbnMgYmVpbmcgZm9ybWVkLCBhbmQgZXZpbCBwYXNzaW9ucyBiZWluZyBzdGlycmVkIHVwOyBidXQgSQogICAgICAgbmV2ZXIgdGhvdWdodCB0aGF0IHNvIGdyZWF0LCBzbyBkZXN0cnVjdGl2ZSBhIGNvbnNwaXJhY3kgYXMgdGhpcyB3YXMgYmVpbmcgbWVkaXRhdGVkIGJ5CiAgICAgICBjaXRpemVucy4gTm93IHRvIHdoYXRldmVyIHBvaW50IHlvdXIgbWluZHMgYW5kIG9waW5pb25zIGluY2xpbmUsIHlvdSBtdXN0IGRlY2lkZSBiZWZvcmUKICAgICAgIG5pZ2h0LiBZb3Ugc2VlIGhvdyBncmVhdCBhIGNyaW1lIGhhcyBiZWVuIG1hZGUga25vd24gdG8geW91OyBpZiB5b3UgdGhpbmsgdGhhdCBidXQgZmV3IGFyZQogICAgICAgaW1wbGljYXRlZCBpbiBpdCB5b3UgYXJlIGdyZWF0bHkgbWlzdGFrZW47IHRoaXMgZXZpbCBoYXMgc3ByZWFkIHdpZGVyIHRoYW4geW91IHRoaW5rOyBpdCBoYXMKICAgICAgIHNwcmVhZCBub3Qgb25seSB0aHJvdWdob3V0IEl0YWx5LCBidXQgaXQgaGFzIGV2ZW4gY3Jvc3NlZCB0aGUgQWxwcywgYW5kIGNyZWVwaW5nIHN0ZWFsdGhpbHkKICAgICAgIG9uLCBpdCBoYXMgYWxyZWFkeSBvY2N1cGllZCBtYW55IG9mIHRoZSBwcm92aW5jZXM7IGl0IGNhbiBieSBubyBtZWFucyBiZSBjcnVzaGVkIGJ5CiAgICAgICB0b2xlcmF0aW5nIGl0LCBhbmQgYnkgdGVtcG9yaXNpbmcgd2l0aCBpdDsgaG93ZXZlciB5b3UgZGV0ZXJtaW5lIG9uIGNoYXN0aXNpbmcgaXQsIHlvdSBtdXN0CiAgICAgICBhY3Qgd2l0aCBwcm9tcHRpdHVkZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBzZWUgdGhhdCBhcyB5ZXQgdGhlcmUgYXJlIHR3byBvcGluaW9ucy4gT25lIHRoYXQgb2YgRGVjaXVzIFNpbGFudXMsIHdobyB0aGlua3MgdGhhdCB0aG9zZQogICAgICAgd2hvIGhhdmUgZW5kZWF2b3VyZWQgdG8gZGVzdHJveSBhbGwgdGhlc2UgdGhpbmdzIHNob3VsZCBiZSBwdW5pc2hlZCB3aXRoIGRlYXRoIHRoZSBvdGhlciwKICAgICAgIHRoYXQgb2YgQ2FpdXMgQ2Flc2FyLCB3aG8gb2JqZWN0cyB0byB0aGUgcHVuaXNobWVudCBvZiBkZWF0aCwgYnV0IGFkb3B0cyB0aGUgbW9zdCBleHRyZW1lCiAgICAgICBzZXZlcml0eSBvZiBhbGwgb3RoZXIgcHVuaXNobWVudC4gRWFjaCBhY3RzIGluIGEgbWFubmVyIHN1aXRhYmxlIHRvIGhpcyBvd24gZGlnbml0eSBhbmQgdG8KICAgICAgIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGJ1c2luZXNzIHdpdGggdGhlIGdyZWF0ZXN0IHNldmVyaXR5LiBUaGUgb25lIHRoaW5rcyB0aGF0IGl0IGlzIG5vdCByaWdodAogICAgICAgdGhhdCB0aG9zZSwgd2hvIGhhdmUgYXR0ZW1wdGVkIHRvIGRlcHJpdmUgYWxsIG9yIHVzIGFuZCB0aGUgd2hpbGUgUm9tYW4gcGVvcGxlIG9mIGxpZmUsIHRvCiAgICAgICBkZXN0cm95IHRoZSBlbXBpcmUsIHRvIGV4dGluZ3Vpc2ggdGhlIG5hbWUgb2YgdGhlIFJvbWFuIHBlb3BsZSwgc2hvdWxkIGVuam95IGxpZmUgYW5kIHRoZQogICAgICAgYnJlYXRoIG9mIGhlYXZlbiBjb21tb24gdG8gdXMgYWxsLCBmb3Igb25lIG1vbWVudDsgYW5kIGhlIHJlbWVtYmVycyB0aGF0IHRoaXMgc29ydCBvZgogICAgICAgcHVuaXNobWVudCBoYXMgb2Z0ZW4gYmVlbiBlbXBsb3llZCBhZ2FpbnN0IHdvcnRobGVzcyBjaXRpemVucyBpbiB0aGlzIHJlcHVibGljLiBUaGUgb3RoZXIKICAgICAgIGZlZWxzIHRoYXQgZGVhdGggd2FzIG5vdCBhcHBvaW50ZWQgYnkgdGhlIGltbW9ydGFsIGdvZHMgZm9yIHRoZSBzYWtlIG9mIHB1bmlzaG1lbnQsIGJ1dCB0aGF0CiAgICAgICBpdCBpcyBlaXRoZXIgYSBuZWNlc3NpdHkgb2YgbmF0dXJlLCBvciBhIHJlc3QgZnJvbSB0b2lscyBhbmQgbWlzZXJpZXM7IHRoZXJlZm9yZSB3aXNlIG1lbgogICAgICAgaGF2ZSBuZXZlciBtZXQgaXQgdW53aWxsaW5nbHksIGJyYXZlIG1lbiBoYXZlIG9mdGVuIGVuY291bnRlcmVkIGl0IGV2ZW4gdm9sdW50YXJpbHkuIEJ1dAogICAgICAgaW1wcmlzb25tZW50IGFuZCB0aGF0IHRvbyBwZXJwZXR1YWwsIHdhcyBjZXJ0YWlubHkgaW52ZW50ZWQgZm9yIHRoZSBleHRyYW9yZGluYXJ5IHB1bmlzaG1lbnQKICAgICAgIG9mIG5lZmFyaW91cyB3aWNrZWRuZXNzOyB0aGVyZWZvcmUgaGUgcHJvcG9zZXMgdGhhdCB0aGV5IHNob3VsZCBiZSBkaXN0cmlidXRlZCBhbW9uZyB0aGUKICAgICAgIG11bmljaXBhbCB0b3ducy4gVGhpcyBwcm9wb3NpdGlvbiBzZWVtcyB0byBoYXZlIGluIGl0IGluanVzdGljZSBpZiB5b3UgY29tbWFuZDsgaXQgZGlmZmljdWx0eQogICAgICAgaWYgeW91IHJlcXVlc3QgaXQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkxldCBpdCwgaG93ZXZlciwgYmUgc28gZGVjcmVlZCBpZiB5b3UgbGlrZS4gRm9yIEkgd2lsbCB1bmRlcnRha2UsIGFuZCwgYXMgSSBob3BlLCBJIHNoYWxsCiAgICAgICBmaW5kIG9uZSB3aG8gd2lsbCBub3QgdGhpbmsgaXQgc3VpdGFibGUgdG8gaGlzIGRpZ25pdHkgdG8gcmVmdXNlIHdoYXQgeW91IGRlY2lkZSBvbiBmb3IgdGhlCiAgICAgICBzYWtlIG9mIHRoZSB1bml2ZXJzYWwgc2FmZXR5LiBIZSBpbXBvc2VzIGJlc2lkZXMgYSBzZXZlcmUgcHVuaXNobWVudCBvbiB0aGUgYnVyZ2Vzc2VzIG9mIHRoZQogICAgICAgbXVuaWNpcGFsIHRvd24gaWYgYW55IG9mIHRoZSBwcmlzb25lcnMgZXNjYXBlOyBoZSBzdXJyb3VuZHMgdGhlbSB3aXRoIHRoZSBtb3N0IHRlcnJpYmxlCiAgICAgICBndWFyZCwgYW5kIHdpdGggZXZlcnl0aGluZyB3b3J0aHkgb2YgdGhlIHdpY2tlZG5lc3Mgb2YgYWJhbmRvbmVkIG1lbi4gQW5kIGhlIHByb3Bvc2VzIHRvCiAgICAgICBlc3RhYmxpc2ggYSBkZWNyZWUgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBhbGxldmlhdGUgdGhlIHB1bmlzaG1lbnQgb2YgdGhvc2Ugd2hvbSBoZSBpcwogICAgICAgY29uZGVtbmluZyBieSBhIHZvdGUgb2YgZWl0aGVyIHRoZSBzZW5hdGUgb3IgdGhlIHBlb3BsZS4gSGUgdGFrZXMgYXdheSBldmVuIGhvcGUsIHdoaWNoIGFsb25lCiAgICAgICBjYW4gY29tZm9ydCBtZW4gaW4gdGhlaXIgbWlzZXJpZXM7IGJlc2lkZXMgdGhpcywgaGUgdm90ZXMgdGhhdCB0aGVpciBnb29kcyBzaG91bGQgYmUKICAgICAgIGNvbmZpc2NhdGVkOyBoZSBsZWF2ZXMgbGlmZSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjIiIC8+IGFsb25lIHRvIHRoZXNlIGluZmFtb3VzIG1lbiwgYW5kIGlmIGhlIGhhZCB0YWtlbgogICAgICAgdGhhdCBhd2F5OyBoZSB3b3VsZCBoYXZlIHJlbGlldmVkIHRoZW0gYnkgb25lIHBhbmcgb2YgbWFueSB0b3J0dXJlcyBvZiBtaW5kIGFuZCBib2R5LCBhbmQgb2YKICAgICAgIGFsbCB0aGUgcHVuaXNobWVudCBvZiB0aGVpciBjcmltZXMuIFRoZXJlZm9yZSwgdGhhdCB0aGVyZSBtaWdodCBiZSBzb21lIGRyZWFkIGluIGxpZmUgdG8gdGhlCiAgICAgICB3aWNrZWQsIG1lbiBvZiBvbGQgaGF2ZSBiZWxpZXZlZCB0aGF0IHRoZXJlIHdlcmUgc29tZSBwdW5pc2htZW50cyBvZiB0aGF0IHNvcnQgYXBwb2ludGVkIGZvcgogICAgICAgdGhlIHdpY2tlZCBpbiB0aGUgc2hhZGVzIGJlbG93OyBiZWNhdXNlIGluIHRydXRoIHRoZXkgcGVyY2VpdmVkIHRoYXQgaWYgdGhpcyB3ZXJlIHRha2VuIGF3YXkKICAgICAgIGRlYXRoIGl0c2VsZiB3b3VsZCBub3QgYmUgdGVycmlibGUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyMiIgLz4gYWxvbmUgdG8gdGhlc2UgaW5mYW1vdXMgbWVuLCBhbmQgaWYgaGUgaGFkIHRha2VuCiAgICAgICB0aGF0IGF3YXk7IGhlIHdvdWxkIGhhdmUgcmVsaWV2ZWQgdGhlbSBieSBvbmUgcGFuZyBvZiBtYW55IHRvcnR1cmVzIG9mIG1pbmQgYW5kIGJvZHksIGFuZCBvZgogICAgICAgYWxsIHRoZSBwdW5pc2htZW50IG9mIHRoZWlyIGNyaW1lcy4gVGhlcmVmb3JlLCB0aGF0IHRoZXJlIG1pZ2h0IGJlIHNvbWUgZHJlYWQgaW4gbGlmZSB0byB0aGUKICAgICAgIHdpY2tlZCwgbWVuIG9mIG9sZCBoYXZlIGJlbGlldmVkIHRoYXQgdGhlcmUgd2VyZSBzb21lIHB1bmlzaG1lbnRzIG9mIHRoYXQgc29ydCBhcHBvaW50ZWQgZm9yCiAgICAgICB0aGUgd2lja2VkIGluIHRoZSBzaGFkZXMgYmVsb3c7IGJlY2F1c2UgaW4gdHJ1dGggdGhleSBwZXJjZWl2ZWQgdGhhdCBpZiB0aGlzIHdlcmUgdGFrZW4gYXdheQogICAgICAgZGVhdGggaXRzZWxmIHdvdWxkIG5vdCBiZSB0ZXJyaWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.5.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93LCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJIHNlZSB3aGF0IGlzIG15IGludGVyZXN0OyBpZiB5b3UgZm9sbG93IHRoZSBvcGluaW9uIG9mIENhaXVzCiAgICAgICBDYWVzYXIsIChzaW5jZSBoZSBoYXMgYWRvcHRlZCB0aGlzIHBhdGggaW4gdGhlIHJlcHVibGljIHdoaWNoIGlzIGFjY291bnRlZCB0aGUgcG9wdWxhciBvbmUsKQogICAgICAgcGVyaGFwcyBzaW5jZSBoZSBpcyB0aGUgYXV0aG9yIGFuZCBwcm9tb3RlciBvZiB0aGlzIG9waW5pb24sIHRoZSBwb3B1bGFyIHZpb2xlbmNlIHdpbGwgYmUKICAgICAgIGxlc3MgdG8gYmUgZHJlYWRlZCBieSBtZTsgaWYgeW91IGFkb3B0IHRoZSBvdGhlciBvcGluaW9uLCBJIGtub3cgbm90IHdoZXRoZXIgSSBhbSBub3QgbGlrZWx5CiAgICAgICB0byBoYXZlIG1vcmUgdHJvdWJsZTsgYnV0IHN0aWxsIGxldCB0aGUgYWR2YW50YWdlIG9mIHRoZSByZXB1YmxpYyBvdXR3ZWlnaCB0aGUgY29uc2lkZXJhdGlvbgogICAgICAgb2YgbXkgZGFuZ2VyLiBGb3Igd2UgaGF2ZSBmcm9tIENhaXVzIENhZXNhciwgYXMgaGlzIG93biBkaWduaXR5IGFuZCBhcyB0aGUgaWxsdXN0cmlvdXMKICAgICAgIGNoYXJhY3RlciBvZiBoaXMgYW5jZXN0b3JzIGRlbWFuZGVkLCBhIHZvdGUgYXMgYSBob3N0YWdlIG9mIGhpcyBsYXN0aW5nIGdvb2Qtd2lsbCB0byB0aGUKICAgICAgIHJlcHVibGljOyBpdCBoYXMgYmVlbiBjbGVhcmx5IHNlZW4gaG93IGdyZWF0IGlzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxlbml0eSBvZgogICAgICAgZGVtYWdvZ3VlcywgYW5kIGEgZGlzcG9zaXRpb24gcmVhbGx5IGF0dGFjaGVkIHRvIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHBlb3BsZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPiBJIHNlZSB0aGF0IG9mIHRob3NlIG1lbiB3aG8gd2lzaCB0byBiZSBjb25zaWRlcmVkIGF0dGFjaGVkIHRvIHRoZQogICAgICAgcGVvcGxlIG9uZSBtYW4gaXMgYWJzZW50LCB0aGF0IHRoZXkgbWF5IG5vdCBzZWVtIGZvcnNvb3RoIHRvIGdpdmUgYSB2b3RlIGFib3V0IHRoZSBsaXZlcyBvZgogICAgICAgUm9tYW4gY2l0aXplbnMuIEhlIG9ubHkgdGhyZWUgZGF5cyBhZ28gZ2F2ZSBSb21hbiBjaXRpemVucyBpbnRvIGN1c3RvZHksIGFuZCBkZWNyZWVkIG1lIGEKICAgICAgIHN1cHBsaWNhdGlvbiwgYW5kIHZvdGVkIG1vc3QgbWFnbmlmaWNlbnQgcmV3YXJkcyB0byB0aGUgd2l0bmVzc2VzIG9ubHkgeWVzdGVyZGF5LiBJdCBpcyBub3QKICAgICAgIG5vdyBkb3VidGZ1bCB0byBhbnkgb25lIHdoYXQgaGUsIHdobyB2b3RlZCBmb3IgdGhlIGltcHJpc29ubWVudCBvZiB0aGUgY3JpbWluYWxzLAogICAgICAgY29uZ3JhdHVsYXRpb24gdG8gaGltIHdobyBoYWQgZGV0ZWN0ZWQgdGhlbSwgYW5kIHJld2FyZHMgdG8gdGhvc2Ugd2hvIGhhZCBwcm92ZWQgdGhlIGNyaW1lLAogICAgICAgdGhpbmtzIG9mIHRoZSB3aG9sZSBtYXR0ZXIsIGFuZCBvZiB0aGUgY2F1c2UuIEJ1dCBDYWl1cyBDYWVzYXIgY29uc2lkZXJzIHRoYXQgdGhlIFNlbXByb25pYW4KICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTZW1wcm9uaWFuIGxhdyB3YXMgcHJvcG9zZWQgYnkgQ2FpdXMgR3JhY2NodXMsIEIuQy4gPGRhdGUgYXV0aG5hbWU9Ii0xMjMiIHZhbHVlPSItMTIzIj4xMjM8L2RhdGU+LCBhbmQgZW5hY3RlZCB0aGF0IHRoZSBwZW9wbGUgb25seSBzaG91bGQgZGVjaWRlIHJlc3BlY3RpbmcgdGhlIGxpZmUKICAgICAgICBvciBjaXZpbCBjb25kaXRpb24gb2YgYSBjaXRpemVuLiBJdCBpcyBhbGx1ZGVkIHRvIGFsc28gaW4gdGhlIG9yYXRpb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmFiLlBlcmQuIDQiIHZhbGlkPSJ5ZXMiPlBybyBSYWJpci4gYy4gNDwvYmlibD4sIHdoZXJlIENpY2VybyBzYXlzLCDigJxDYWl1cyBHcmFjY2h1cwogICAgICAgIHBhc3NlZCBhIGxhdyB0aGF0IG5vIGRlY2lzaW9uIHNob3VsZCBiZSBjb21lIHRvIGFib3V0IHRoZSBsaWZlIG9mIGEgUm9tYW4gY2l0aXplbiB3aXRob3V0CiAgICAgICAgeW91ciBjb21tYW5kLOKAnSBzcGVha2luZyB0byB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPlF1aXJpdGVzPC9mb3JlaWduPi48L25vdGU+IGxhdwogICAgICAgd2FzIHBhc3NlZCBhYm91dCBSb21hbiBjaXRpemVucywgYnV0IHRoYXQgaGUgd2hvIGlzIGFuIGVuZW15IG9mIHRoZSByZXB1YmxpYyBjYW4gYnkgbm8gbWVhbnMKICAgICAgIGJlIGEgY2l0aXplbjsgYW5kIG1vcmVvdmVyIHRoYXQgdGhlIHZlcnkgcHJvcG9zZXIgb2YgdGhlIFNlbXByb25pYW4gbGF3IHN1ZmZlcmVkIHB1bmlzaG1lbnQKICAgICAgIGJ5IHRoZSBjb21tYW5kIG9mIHRoZSBwZW9wbGUuIEhlIGFsc28gZGVuaWVzIHRoYXQgTGVudHVsdXMsIGEgYnJpYmVyIGFuZCBhIHNwZW5kdGhyaWZ0LCBhZnRlcgogICAgICAgaGUgaGFzIGZvcm1lZCBzdWNoIGNydWVsIGFuZCBiaXR0ZXIgcGxhbnMgYWJvdXQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBSb21hbiBwZW9wbGUgYW5kIHRoZQogICAgICAgcnVpbiBvZiB0aGlzIGNpdHksIGNhbiBiZSBjYWxsZWQgYSBmcmllbmQgb2YgdGhlIHBlb3BsZS4gVGhlcmVmb3JlIHRoaXMgbW9zdCBnZW50bGUgYW5kCiAgICAgICBtZXJjaWZ1bCBtYW4gZG9lcyBub3QgaGVzaXRhdGUgdG8gY29tbWl0IFB1YmxpdXMgTGVudHVsdXMgdG8gZXRlcm5hbCBkYXJrbmVzcyBhbmQKICAgICAgIGltcHJpc29ubWVudCwgYW5kIGVzdGFibGlzaGVzIGEgbGF3IHRvIGFsbCBwb3N0ZXJpdHkgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBib2FzdCBvZgogICAgICAgYWxsZXZpYXRpbmcgaGlzIHB1bmlzaG1lbnQgb3IgaGVyZWFmdGVyIHRvIGFwcGVhciBhIGZyaWVuZCBvZiB0aGUgcGVvcGxlIHRvIHRoZSBkZXN0cnVjdGlvbgogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZS4gSGUgYWRkcyBhbHNvIHRoZSBjb25maXNjYXRpb24gb2YgdGhlaXIgZ29vZHMsIHNvIHRoYXQgd2FudCBhbHNvIGFuZAogICAgICAgYmVnZ2FyeSBtYXkgYmUgYWRkZWQgdG8gYWxsIHRoZSB0b3JtZW50cyBvZiBtaW5kIGFuZCBib2R5LiA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz4gSSBzZWUgdGhhdCBvZiB0aG9zZSBtZW4gd2hvIHdpc2ggdG8gYmUgY29uc2lkZXJlZCBhdHRhY2hlZCB0byB0aGUKICAgICAgIHBlb3BsZSBvbmUgbWFuIGlzIGFic2VudCwgdGhhdCB0aGV5IG1heSBub3Qgc2VlbSBmb3Jzb290aCB0byBnaXZlIGEgdm90ZSBhYm91dCB0aGUgbGl2ZXMgb2YKICAgICAgIFJvbWFuIGNpdGl6ZW5zLiBIZSBvbmx5IHRocmVlIGRheXMgYWdvIGdhdmUgUm9tYW4gY2l0aXplbnMgaW50byBjdXN0b2R5LCBhbmQgZGVjcmVlZCBtZSBhCiAgICAgICBzdXBwbGljYXRpb24sIGFuZCB2b3RlZCBtb3N0IG1hZ25pZmljZW50IHJld2FyZHMgdG8gdGhlIHdpdG5lc3NlcyBvbmx5IHllc3RlcmRheS4gSXQgaXMgbm90CiAgICAgICBub3cgZG91YnRmdWwgdG8gYW55IG9uZSB3aGF0IGhlLCB3aG8gdm90ZWQgZm9yIHRoZSBpbXByaXNvbm1lbnQgb2YgdGhlIGNyaW1pbmFscywKICAgICAgIGNvbmdyYXR1bGF0aW9uIHRvIGhpbSB3aG8gaGFkIGRldGVjdGVkIHRoZW0sIGFuZCByZXdhcmRzIHRvIHRob3NlIHdobyBoYWQgcHJvdmVkIHRoZSBjcmltZSwKICAgICAgIHRoaW5rcyBvZiB0aGUgd2hvbGUgbWF0dGVyLCBhbmQgb2YgdGhlIGNhdXNlLiBCdXQgQ2FpdXMgQ2Flc2FyIGNvbnNpZGVycyB0aGF0IHRoZSBTZW1wcm9uaWFuCiAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBTZW1wcm9uaWFuIGxhdyB3YXMgcHJvcG9zZWQgYnkgQ2FpdXMgR3JhY2NodXMsIEIuQy4gPGRhdGUgYXV0aG5hbWU9Ii0xMjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0xMjMiPjEyMzwvZGF0ZT4sIGFuZCBlbmFjdGVkIHRoYXQgdGhlIHBlb3BsZSBvbmx5IHNob3VsZCBkZWNpZGUgcmVzcGVjdGluZyB0aGUgbGlmZQogICAgICAgIG9yIGNpdmlsIGNvbmRpdGlvbiBvZiBhIGNpdGl6ZW4uIEl0IGlzIGFsbHVkZWQgdG8gYWxzbyBpbiB0aGUgb3JhdGlvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFJhYi5QZXJkLiA0IiB2YWxpZD0ieWVzIj5Qcm8gUmFiaXIuIGMuIDQ8L2JpYmw+LCB3aGVyZSBDaWNlcm8gc2F5cywg4oCcQ2FpdXMgR3JhY2NodXMKICAgICAgICBwYXNzZWQgYSBsYXcgdGhhdCBubyBkZWNpc2lvbiBzaG91bGQgYmUgY29tZSB0byBhYm91dCB0aGUgbGlmZSBvZiBhIFJvbWFuIGNpdGl6ZW4gd2l0aG91dAogICAgICAgIHlvdXIgY29tbWFuZCzigJ0gc3BlYWtpbmcgdG8gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlF1aXJpdGVzPC9mb3JlaWduPi48L25vdGU+IGxhdwogICAgICAgd2FzIHBhc3NlZCBhYm91dCBSb21hbiBjaXRpemVucywgYnV0IHRoYXQgaGUgd2hvIGlzIGFuIGVuZW15IG9mIHRoZSByZXB1YmxpYyBjYW4gYnkgbm8gbWVhbnMKICAgICAgIGJlIGEgY2l0aXplbjsgYW5kIG1vcmVvdmVyIHRoYXQgdGhlIHZlcnkgcHJvcG9zZXIgb2YgdGhlIFNlbXByb25pYW4gbGF3IHN1ZmZlcmVkIHB1bmlzaG1lbnQKICAgICAgIGJ5IHRoZSBjb21tYW5kIG9mIHRoZSBwZW9wbGUuIEhlIGFsc28gZGVuaWVzIHRoYXQgTGVudHVsdXMsIGEgYnJpYmVyIGFuZCBhIHNwZW5kdGhyaWZ0LCBhZnRlcgogICAgICAgaGUgaGFzIGZvcm1lZCBzdWNoIGNydWVsIGFuZCBiaXR0ZXIgcGxhbnMgYWJvdXQgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBSb21hbiBwZW9wbGUgYW5kIHRoZQogICAgICAgcnVpbiBvZiB0aGlzIGNpdHksIGNhbiBiZSBjYWxsZWQgYSBmcmllbmQgb2YgdGhlIHBlb3BsZS4gVGhlcmVmb3JlIHRoaXMgbW9zdCBnZW50bGUgYW5kCiAgICAgICBtZXJjaWZ1bCBtYW4gZG9lcyBub3QgaGVzaXRhdGUgdG8gY29tbWl0IFB1YmxpdXMgTGVudHVsdXMgdG8gZXRlcm5hbCBkYXJrbmVzcyBhbmQKICAgICAgIGltcHJpc29ubWVudCwgYW5kIGVzdGFibGlzaGVzIGEgbGF3IHRvIGFsbCBwb3N0ZXJpdHkgdGhhdCBubyBvbmUgc2hhbGwgYmUgYWJsZSB0byBib2FzdCBvZgogICAgICAgYWxsZXZpYXRpbmcgaGlzIHB1bmlzaG1lbnQgb3IgaGVyZWFmdGVyIHRvIGFwcGVhciBhIGZyaWVuZCBvZiB0aGUgcGVvcGxlIHRvIHRoZSBkZXN0cnVjdGlvbgogICAgICAgb2YgdGhlIFJvbWFuIHBlb3BsZS4gSGUgYWRkcyBhbHNvIHRoZSBjb25maXNjYXRpb24gb2YgdGhlaXIgZ29vZHMsIHNvIHRoYXQgd2FudCBhbHNvIGFuZAogICAgICAgYmVnZ2FyeSBtYXkgYmUgYWRkZWQgdG8gYWxsIHRoZSB0b3JtZW50cyBvZiBtaW5kIGFuZCBib2R5LiA8ZGF0ZSBhdXRobmFtZT0iLTEyMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTEyMyI+MTIzPC9kYXRlPiwgYW5kIGVuYWN0ZWQgdGhhdCB0aGUgcGVvcGxlIG9ubHkgc2hvdWxkIGRlY2lkZSByZXNwZWN0aW5nIHRoZSBsaWZlCiAgICAgICAgb3IgY2l2aWwgY29uZGl0aW9uIG9mIGEgY2l0aXplbi4gSXQgaXMgYWxsdWRlZCB0byBhbHNvIGluIHRoZSBvcmF0aW9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gUmFiLlBlcmQuIDQiIHZhbGlkPSJ5ZXMiPlBybyBSYWJpci4gYy4gNDwvYmlibD4sIHdoZXJlIENpY2VybyBzYXlzLCDigJxDYWl1cyBHcmFjY2h1cwogICAgICAgIHBhc3NlZCBhIGxhdyB0aGF0IG5vIGRlY2lzaW9uIHNob3VsZCBiZSBjb21lIHRvIGFib3V0IHRoZSBsaWZlIG9mIGEgUm9tYW4gY2l0aXplbiB3aXRob3V0CiAgICAgICAgeW91ciBjb21tYW5kLOKAnSBzcGVha2luZyB0byB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UXVpcml0ZXM8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.6.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZXJlZm9yZSwgaWYgeW91IGRlY2lkZSBvbiB0aGlzIHlvdSBnaXZlIG1lIGEgY29tcGFuaW9uIGluIG15IGFkZHJlc3MsIGRlYXIgYW5kIGFjY2VwdGFibGUKICAgICAgIHRvIHRoZSBSb21hbiBwZW9wbGU7IG9yIGlmIHlvdSBwcmVmZXIgdG8gYWRvcHQgdGhlIG9waW5pb24gb2YgU2lsYW51cywgeW91IHdpbGwgZWFzaWx5IGRlZmVuZAogICAgICAgbWUgYW5kIHlvdXJzZWx2ZXMgZnJvbSB0aGUgcmVwcm9hY2ggb2YgY3J1ZWx0eSwgYW5kIEkgd2lsbCBwcmV2YWlsIHRoYXQgaXQgc2hhbGwgYmUgbXVjaAogICAgICAgbGlnaHRlci4gQWx0aG91Z2gsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHdoYXQgY3J1ZWx0eSBjYW4gdGhlcmUgYmUgaW4gY2hhc3Rpc2luZyB0aGUgZW5vcm1pdHkKICAgICAgIG9mIHN1Y2ggZXhjZXNzaXZlIHdpY2tlZG5lc3M/IEZvciBJIGRlY2lkZSBmcm9tIG15IG93biBmZWVsaW5nLiBGb3Igc28gbWF5IEkgYmUgYWxsb3dlZDsgdG8KICAgICAgIGVuam95IHRoZSByZXB1YmxpYyBpbiBzYWZldHkgaW4geW91ciBjb21wYW55LCBhcyBJIGFtIG5vdCBtb3ZlZCB0byBiZSBzb21ld2hhdCB2ZWhlbWVudCBpbgogICAgICAgdGhpcyBjYXVzZSBieSBhbnkgc2V2ZXJpdHkgb2YgZGlzcG9zaXRpb24sIChmb3Igd2hvIGlzIG1vcmUgbWVyY2lmdWwgdGhhbiBJIGFtPykgYnV0IHJhdGhlcgogICAgICAgYnkgYSBzaW5ndWxhciBodW1hbml0eSBhbmQgbWVyY2lmdWxuZXNzLiBGb3IgSSBzZWVtIHRvIG15c2VsZiB0byBzZWUgdGhpcyBjaXR5LCB0aGUgbGlnaHQgb2YKICAgICAgIHRoZSB3b3JsZCBhbmQgdGhlIGNpdGFkZWwgb2YgYWxsIG5hdGlvbnMsIGZhbGxpbmcgb24gYSBzdWRkZW4gYnkgb25lIGNvbmZsYWdyYXRpb24uIEkgc2VlIGluCiAgICAgICBteSBtaW5kJ3MgZXllIG1pc2VyYWJsZSBhbmQgdW5idXJpZWQgaGVhcHMgb2YgY2l0aWVzIGluIG15IGJ1cmllZCBjb3VudHJ5OyB0aGUgc2lnaHQgb2YKICAgICAgIENldGhlZ3VzIGFuZCBoaXMgbWFkbmVzcyByYWdpbmcgYW1pZCB5b3VyIHNsYXVnaHRlciBpcyBldmVyIHByZXNlbnQgdG8gbXkgc2lnaHQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIHNldCBiZWZvcmUgbXlzZWxmIExlbnR1bHVzIHJlaWduaW5nLCBhcyBoZSBoaW1zZWxmCiAgICAgICBjb25mZXNzZXMgdGhhdCBoZSBoYWQgaG9wZWQgd2FzIGhpcyBkZXN0aW55LCBhbmQgdGhpcyBHYWJpbml1cyBhcnJheWVkIGluIHRoZSBwdXJwbGUgYW5kCiAgICAgICBDYXRpbGluZSBhcnJpdmVkIHdpdGggaGlzIGFybXksIHRoZW4gSSBzaHVkZGVyIGF0IHRoZSBsYW1lbnRhdGlvbiBvZiBtYXRyb25zLCBhbmQgdGhlIGZsaWdodAogICAgICAgb2YgdmlyZ2lucyBhbmQgb2YgYm95cyBhbmQgdGhlIGluc3VsdHMgb2YgdGhlIHZlc3RhbCB2aXJnaW5zOyBhbmQgYmVjYXVzZSB0aGVzZSB0aGluZ3MgYXBwZWFyCiAgICAgICB0byBtZSBleGNlZWRpbmdseSBtaXNlcmFibGUgYW5kIHBpdGlhYmxlLCB0aGVyZWZvcmUgSSBzaG93IG15c2VsZiBzZXZlcmUgYW5kIHJpZ29yb3VzIHRvCiAgICAgICB0aG9zZSB3aG8gaGF2ZSB3aXNoZWQgdG8gYnJpbmcgYWJvdXQgdGhpcyBzdGF0ZSBvZiB0aGluZ3MuIEkgYXNrLCBmb3Jzb290aCwgaWYgYW55IGZhdGhlciBvZgogICAgICAgYSBmYW1pbHksIHN1cHBvc2luZyBoaXMgY2hpbGRyZW4gaGFkIGJlZW4gc2xhaW4gYnkgYSBzbGF2ZSwgaGlzIHdpZmUgbXVyZGVyZWQsIGhpcyBob3VzZQogICAgICAgYnVybnQsIHdlcmUgbm90IHRvIGluZmxpY3Qgb24gaGlzIHNsYXZlcyB0aGUgc2V2ZXJlc3QgcG9zc2libGUgcHVuaXNobWVudCB3b3VsZCBoZSBhcHBlYXIKICAgICAgIGNsZW1lbnQgYW5kIG1lcmNpZnVsIG9yIG1vc3QgaW5odW1hbiBhbmQgY3J1ZWw/IFRvIG1lIGhlIHdvdWxkIHNlZW0gdW5uYXR1cmFsIGFuZAogICAgICAgaGFyZC1oZWFydGVkIHdobyBkaWQgbm90IHNvb3RoZSBoaXMgb3duIHBhaW4gYW5kIGFuZ3Vpc2ggYnkgdGhlIHBhaW4gYW5kIHRvcnR1cmUgb2YgdGhlCiAgICAgICBjcmltaW5hbC4gQW5kIHNvIHdlLCA8cGIgbj0iMzI0IiAvPiBpbiB0aGUgY2FzZSBvZiB0aGVzZSBtZW4gd2hvIGRlc2lyZWQgdG8gbXVyZGVyIHVzLCBhbmQgb3VyCiAgICAgICB3aXZlcywgYW5kIG91ciBjaGlsZHJlbizigJR3aG8gZW5kZWF2b3VyZWQgdG8gZGVzdHJveSB0aGUgaG91c2VzIG9mIGV2ZXJ5IGluZGl2aWR1YWwKICAgICAgIGFtb25nIHVzLCBhbmQgYWxzbyB0aGUgcmVwdWJsaWMsIHRoZSBob21lIG9mIGFsbCzigJR3aG8gZGVzaWduZWQgdG8gcGxhY2UgdGhlIG5hdGlvbgogICAgICAgb2YgdGhlIEFsbG9icm9nZXMgb24gdGhlIHJlbGljcyBvZiB0aGlzIGNpdHksIGFuZCBvbiB0aGUgYXNoZXMgb2YgdGhlIGVtcGlyZSBkZXN0cm95ZWQgYnkKICAgICAgIGZpcmU74oCUaWYgd2UgYXJlIHZlcnkgcmlnb3JvdXMsIHdlIHNoYWxsIGJlIGNvbnNpZGVyZWQgbWVyY2lmdWw7IGlmIHdlIGNob29zZSB0byBiZQogICAgICAgbGF4LCB3ZSBtdXN0IGVuZHVyZSB0aGUgY2hhcmFjdGVyIG9mIHRoZSBncmVhdGVzdCBjcnVlbHR5LCB0byB0aGUgZGFtYWdlIG9mIG91ciBjb3VudHJ5IGFuZAogICAgICAgb3VyIGZlbGxvdy1jaXRpemVucy4gPC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz4gQnV0IHdoZW4gSSBoYXZlIHNldCBiZWZvcmUgbXlzZWxmIExlbnR1bHVzIHJlaWduaW5nLCBhcyBoZSBoaW1zZWxmCiAgICAgICBjb25mZXNzZXMgdGhhdCBoZSBoYWQgaG9wZWQgd2FzIGhpcyBkZXN0aW55LCBhbmQgdGhpcyBHYWJpbml1cyBhcnJheWVkIGluIHRoZSBwdXJwbGUgYW5kCiAgICAgICBDYXRpbGluZSBhcnJpdmVkIHdpdGggaGlzIGFybXksIHRoZW4gSSBzaHVkZGVyIGF0IHRoZSBsYW1lbnRhdGlvbiBvZiBtYXRyb25zLCBhbmQgdGhlIGZsaWdodAogICAgICAgb2YgdmlyZ2lucyBhbmQgb2YgYm95cyBhbmQgdGhlIGluc3VsdHMgb2YgdGhlIHZlc3RhbCB2aXJnaW5zOyBhbmQgYmVjYXVzZSB0aGVzZSB0aGluZ3MgYXBwZWFyCiAgICAgICB0byBtZSBleGNlZWRpbmdseSBtaXNlcmFibGUgYW5kIHBpdGlhYmxlLCB0aGVyZWZvcmUgSSBzaG93IG15c2VsZiBzZXZlcmUgYW5kIHJpZ29yb3VzIHRvCiAgICAgICB0aG9zZSB3aG8gaGF2ZSB3aXNoZWQgdG8gYnJpbmcgYWJvdXQgdGhpcyBzdGF0ZSBvZiB0aGluZ3MuIEkgYXNrLCBmb3Jzb290aCwgaWYgYW55IGZhdGhlciBvZgogICAgICAgYSBmYW1pbHksIHN1cHBvc2luZyBoaXMgY2hpbGRyZW4gaGFkIGJlZW4gc2xhaW4gYnkgYSBzbGF2ZSwgaGlzIHdpZmUgbXVyZGVyZWQsIGhpcyBob3VzZQogICAgICAgYnVybnQsIHdlcmUgbm90IHRvIGluZmxpY3Qgb24gaGlzIHNsYXZlcyB0aGUgc2V2ZXJlc3QgcG9zc2libGUgcHVuaXNobWVudCB3b3VsZCBoZSBhcHBlYXIKICAgICAgIGNsZW1lbnQgYW5kIG1lcmNpZnVsIG9yIG1vc3QgaW5odW1hbiBhbmQgY3J1ZWw/IFRvIG1lIGhlIHdvdWxkIHNlZW0gdW5uYXR1cmFsIGFuZAogICAgICAgaGFyZC1oZWFydGVkIHdobyBkaWQgbm90IHNvb3RoZSBoaXMgb3duIHBhaW4gYW5kIGFuZ3Vpc2ggYnkgdGhlIHBhaW4gYW5kIHRvcnR1cmUgb2YgdGhlCiAgICAgICBjcmltaW5hbC4gQW5kIHNvIHdlLCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjQiIC8+IGluIHRoZSBjYXNlIG9mIHRoZXNlIG1lbiB3aG8gZGVzaXJlZCB0byBtdXJkZXIgdXMsIGFuZCBvdXIKICAgICAgIHdpdmVzLCBhbmQgb3VyIGNoaWxkcmVuLOKAlHdobyBlbmRlYXZvdXJlZCB0byBkZXN0cm95IHRoZSBob3VzZXMgb2YgZXZlcnkgaW5kaXZpZHVhbAogICAgICAgYW1vbmcgdXMsIGFuZCBhbHNvIHRoZSByZXB1YmxpYywgdGhlIGhvbWUgb2YgYWxsLOKAlHdobyBkZXNpZ25lZCB0byBwbGFjZSB0aGUgbmF0aW9uCiAgICAgICBvZiB0aGUgQWxsb2Jyb2dlcyBvbiB0aGUgcmVsaWNzIG9mIHRoaXMgY2l0eSwgYW5kIG9uIHRoZSBhc2hlcyBvZiB0aGUgZW1waXJlIGRlc3Ryb3llZCBieQogICAgICAgZmlyZTvigJRpZiB3ZSBhcmUgdmVyeSByaWdvcm91cywgd2Ugc2hhbGwgYmUgY29uc2lkZXJlZCBtZXJjaWZ1bDsgaWYgd2UgY2hvb3NlIHRvIGJlCiAgICAgICBsYXgsIHdlIG11c3QgZW5kdXJlIHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGdyZWF0ZXN0IGNydWVsdHksIHRvIHRoZSBkYW1hZ2Ugb2Ygb3VyIGNvdW50cnkgYW5kCiAgICAgICBvdXIgZmVsbG93LWNpdGl6ZW5zLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPiBVbmxlc3MsIGluZGVlZCwgTHVjaXVzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlCiAgICAgICAgYnJvdGhlci1pbi1sYXcgb2YgTHVjaXVzIENhZXNhciB3YXMgTWFyY3VzIEZ1bHZpdXMsIHdob3NlIGRlYXRoLCBhdCB0aGUgY29tbWFuZCBvZiBPcGltaXVzCiAgICAgICAgdGhlIGNvbnN1bCwgaXMgcmVmZXJyZWQgdG8gYXQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDIuMSIgdmFsaWQ9InllcyI+Q2F0LiAyLiBjaGFwMTwvYmlibD4uIEhlIHNlbnQgaGlzCiAgICAgICAgc29uIHRvIHRoZSBjb25zdWwgdG8gdHJlYXQgZm9yIGhpcyBzdXJyZW5kZXIsIHdob20gT3BpbWl1cyBzZW50IGJhY2sgdGhlIGZpcnN0IHRpbWUsIGFuZAogICAgICAgIGZvcmJhZGUgdG8gcmV0dXJuIHRvIGhpbTsgd2hlbiBoZSBkaWQgcmV0dXJuLCBoZSBwdXQgaGltIHRvIGRlYXRoLjwvbm90ZT4gQ2Flc2FyLCBhCiAgICAgICB0aG9yb3VnaGx5IGJyYXZlIG1hbiBhbmQgb2YgdGhlIGJlc3QgZGlzcG9zaXRpb24gdG93YXJkcyB0aGUgcmVwdWJsaWMsIHNlZW1lZCB0byBhbnkgb25lIHRvCiAgICAgICBiZSB0b28gY3J1ZWwgdGhyZWUsIGRheXMgYWdvLCB3aGVuIGhlIHNhaWQgdGhhdCB0aGUgaHVzYmFuZCBvZiBoaXMgb3duIHNpc3RlciwgYSBtb3N0CiAgICAgICBleGNlbGxlbnQgd29tYW4sIChpbiBoaXMgcHJlc2VuY2UgYW5kIGluIGhpcyBoZWFyaW5nLCkgb3VnaHQgdG8gYmUgZGVwcml2ZWQgb2YKICAgICAgIGxpZmUs4oCUIHdoZW4gaGUgc2FpZCB0aGF0IGhpcyBncmFuZGZhdGhlciBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYnkgY29tbWFuZCBvZiB0aGUKICAgICAgIGNvbnN1bCBhbmQgaGlzIHlvdXRoZnVsIHNvbiwgc2VudCBhcyBhbiBhbWJhc3NhZG9yIGJ5IGhpcyBmYXRoZXIsIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBpbgogICAgICAgcHJpc29uLiBBbmQgd2hhdCBkZWVkIGhhZCB0aGV5IGRvbmUgbGlrZSB0aGVzZSBtZW4/IGhhZCB0aGV5IGZvcm1lZCBhbnkgcGxhbiBmb3IgZGVzdHJveWluZwogICAgICAgdGhlIHJlcHVibGljPyBBdCB0aGF0IHRpbWUgZ3JlYXQgY29ycnVwdGlvbiB3YXMgcmlmZSBpbiB0aGUgcmVwdWJsaWMsIGFuZCB0aGVyZSB3YXMgdGhlCiAgICAgICBncmVhdGVzdCBzdHJpZmUgYmV0d2VlbiBwYXJ0aWVzLiBBbmQsIGF0IHRoYXQgdGltZSwgdGhlIGdyYW5kZmF0aGVyIG9mIHRoaXMgTGVudHVsdXMsIGEgbW9zdAogICAgICAgaWxsdXN0cmlvdXMgbWFuLCBwdXQgb24gaGlzIGFybW91ciBhbmQgcHVyc3VlZCBHcmFjY2h1czsgaGUgZXZlbiByZWNlaXZlZCBhIHNldmVyZSB3b3VuZCB0aGF0CiAgICAgICB0aGVyZSBtaWdodCBiZSBubyBkaW1pbnV0aW9uIG9mIHRoZSBncmVhdCBkaWduaXR5IG9mIHRoZSByZXB1YmxpYy4gQnV0IHRoaXMgbWFuLCBoaXMKICAgICAgIGdyYW5kc29uLCBpbnZpdGVkIHRoZSBHYXVscyB0byBvdmVydGhyb3cgdGhlIGZvdW5kYXRpb25zIG9mIHRoZSByZXB1YmxpYzsgaGUgc3RpcnJlZCB1cCB0aGUKICAgICAgIHNsYXZlcywgaGUgc3VtbW9uZWQgQ2F0aWxpbmUsIGhlIGRpc3RyaWJ1dGVkIHVzIHRvIENldGhlZ3VzIHRvIGJlIG1hc3NhY3JlZCwgYW5kIHRoZSByZXN0IG9mCiAgICAgICB0aGUgY2l0aXplbnMgdG8gR2FiaW5pdXMgdG8gYmUgYXNzYXNzaW5hdGVkLCB0aGUgY2l0eSBoZSBhbGxvdHRlZCB0byBDYXNzaXVzIHRvIGJ1cm4sIGFuZCB0aGUKICAgICAgIHBsdW5kZXJpbmcgYW5kIGRldmFzdGF0aW5nIG9mIGFsbCBJdGFseSBoZSBhc3NpZ25lZCB0byBDYXRpbGluZS4gWW91IGZlYXIsIEkgdGhpbmssIGxlc3QgaW4KICAgICAgIHRoZSBjYXNlIG9mIHN1Y2ggdW5oZWFyZCBvZiBhbmQgYWJvbWluYWJsZSB3aWNrZWRuZXNzIHlvdSBzaG91bGQgc2VlbSB0byBkZWNpZGUgYW55dGhpbmcgd2l0aAogICAgICAgdG9vIGdyZWF0IHNldmVyaXR5OyB3aGVuIHdlIG91Z2h0IG11Y2ggbW9yZSB0byBmZWFyIGxlc3QgYnkgYmVpbmcgcmVtaXNzIGluIHB1bmlzaGluZyB3ZQogICAgICAgc2hvdWxkIGFwcGVhciBjcnVlbCB0byBvdXIgY291bnRyeSwgcmF0aGVyIHRoYW4gYXBwZWFyIGJ5IHRoZSBzZXZlcml0eSBvZiBvdXIgaXJyaXRhdGlvbiB0b28KICAgICAgIHJpZ29yb3VzIHRvIGl0cyBtb3N0IGJpdHRlciBlbmVtaWVzLiA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.6.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz4gVW5sZXNzLCBpbmRlZWQsIEx1Y2l1cyA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlCiAgICAgICAgYnJvdGhlci1pbi1sYXcgb2YgTHVjaXVzIENhZXNhciB3YXMgTWFyY3VzIEZ1bHZpdXMsIHdob3NlIGRlYXRoLCBhdCB0aGUgY29tbWFuZCBvZiBPcGltaXVzCiAgICAgICAgdGhlIGNvbnN1bCwgaXMgcmVmZXJyZWQgdG8gYXQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMi4xIiB2YWxpZD0ieWVzIj5DYXQuIDIuIGNoYXAxPC9iaWJsPi4gSGUgc2VudCBoaXMKICAgICAgICBzb24gdG8gdGhlIGNvbnN1bCB0byB0cmVhdCBmb3IgaGlzIHN1cnJlbmRlciwgd2hvbSBPcGltaXVzIHNlbnQgYmFjayB0aGUgZmlyc3QgdGltZSwgYW5kCiAgICAgICAgZm9yYmFkZSB0byByZXR1cm4gdG8gaGltOyB3aGVuIGhlIGRpZCByZXR1cm4sIGhlIHB1dCBoaW0gdG8gZGVhdGguPC9ub3RlPiBDYWVzYXIsIGEKICAgICAgIHRob3JvdWdobHkgYnJhdmUgbWFuIGFuZCBvZiB0aGUgYmVzdCBkaXNwb3NpdGlvbiB0b3dhcmRzIHRoZSByZXB1YmxpYywgc2VlbWVkIHRvIGFueSBvbmUgdG8KICAgICAgIGJlIHRvbyBjcnVlbCB0aHJlZSwgZGF5cyBhZ28sIHdoZW4gaGUgc2FpZCB0aGF0IHRoZSBodXNiYW5kIG9mIGhpcyBvd24gc2lzdGVyLCBhIG1vc3QKICAgICAgIGV4Y2VsbGVudCB3b21hbiwgKGluIGhpcyBwcmVzZW5jZSBhbmQgaW4gaGlzIGhlYXJpbmcsKSBvdWdodCB0byBiZSBkZXByaXZlZCBvZgogICAgICAgbGlmZSzigJQgd2hlbiBoZSBzYWlkIHRoYXQgaGlzIGdyYW5kZmF0aGVyIGhhZCBiZWVuIHB1dCB0byBkZWF0aCBieSBjb21tYW5kIG9mIHRoZQogICAgICAgY29uc3VsIGFuZCBoaXMgeW91dGhmdWwgc29uLCBzZW50IGFzIGFuIGFtYmFzc2Fkb3IgYnkgaGlzIGZhdGhlciwgaGFkIGJlZW4gcHV0IHRvIGRlYXRoIGluCiAgICAgICBwcmlzb24uIEFuZCB3aGF0IGRlZWQgaGFkIHRoZXkgZG9uZSBsaWtlIHRoZXNlIG1lbj8gaGFkIHRoZXkgZm9ybWVkIGFueSBwbGFuIGZvciBkZXN0cm95aW5nCiAgICAgICB0aGUgcmVwdWJsaWM/IEF0IHRoYXQgdGltZSBncmVhdCBjb3JydXB0aW9uIHdhcyByaWZlIGluIHRoZSByZXB1YmxpYywgYW5kIHRoZXJlIHdhcyB0aGUKICAgICAgIGdyZWF0ZXN0IHN0cmlmZSBiZXR3ZWVuIHBhcnRpZXMuIEFuZCwgYXQgdGhhdCB0aW1lLCB0aGUgZ3JhbmRmYXRoZXIgb2YgdGhpcyBMZW50dWx1cywgYSBtb3N0CiAgICAgICBpbGx1c3RyaW91cyBtYW4sIHB1dCBvbiBoaXMgYXJtb3VyIGFuZCBwdXJzdWVkIEdyYWNjaHVzOyBoZSBldmVuIHJlY2VpdmVkIGEgc2V2ZXJlIHdvdW5kIHRoYXQKICAgICAgIHRoZXJlIG1pZ2h0IGJlIG5vIGRpbWludXRpb24gb2YgdGhlIGdyZWF0IGRpZ25pdHkgb2YgdGhlIHJlcHVibGljLiBCdXQgdGhpcyBtYW4sIGhpcwogICAgICAgZ3JhbmRzb24sIGludml0ZWQgdGhlIEdhdWxzIHRvIG92ZXJ0aHJvdyB0aGUgZm91bmRhdGlvbnMgb2YgdGhlIHJlcHVibGljOyBoZSBzdGlycmVkIHVwIHRoZQogICAgICAgc2xhdmVzLCBoZSBzdW1tb25lZCBDYXRpbGluZSwgaGUgZGlzdHJpYnV0ZWQgdXMgdG8gQ2V0aGVndXMgdG8gYmUgbWFzc2FjcmVkLCBhbmQgdGhlIHJlc3Qgb2YKICAgICAgIHRoZSBjaXRpemVucyB0byBHYWJpbml1cyB0byBiZSBhc3Nhc3NpbmF0ZWQsIHRoZSBjaXR5IGhlIGFsbG90dGVkIHRvIENhc3NpdXMgdG8gYnVybiwgYW5kIHRoZQogICAgICAgcGx1bmRlcmluZyBhbmQgZGV2YXN0YXRpbmcgb2YgYWxsIEl0YWx5IGhlIGFzc2lnbmVkIHRvIENhdGlsaW5lLiBZb3UgZmVhciwgSSB0aGluaywgbGVzdCBpbgogICAgICAgdGhlIGNhc2Ugb2Ygc3VjaCB1bmhlYXJkIG9mIGFuZCBhYm9taW5hYmxlIHdpY2tlZG5lc3MgeW91IHNob3VsZCBzZWVtIHRvIGRlY2lkZSBhbnl0aGluZyB3aXRoCiAgICAgICB0b28gZ3JlYXQgc2V2ZXJpdHk7IHdoZW4gd2Ugb3VnaHQgbXVjaCBtb3JlIHRvIGZlYXIgbGVzdCBieSBiZWluZyByZW1pc3MgaW4gcHVuaXNoaW5nIHdlCiAgICAgICBzaG91bGQgYXBwZWFyIGNydWVsIHRvIG91ciBjb3VudHJ5LCByYXRoZXIgdGhhbiBhcHBlYXIgYnkgdGhlIHNldmVyaXR5IG9mIG91ciBpcnJpdGF0aW9uIHRvbwogICAgICAgcmlnb3JvdXMgdG8gaXRzIG1vc3QgYml0dGVyIGVuZW1pZXMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDIuMSIgdmFsaWQ9InllcyI+Q2F0LiAyLiBjaGFwMTwvYmlibD4uIEhlIHNlbnQgaGlzCiAgICAgICAgc29uIHRvIHRoZSBjb25zdWwgdG8gdHJlYXQgZm9yIGhpcyBzdXJyZW5kZXIsIHdob20gT3BpbWl1cyBzZW50IGJhY2sgdGhlIGZpcnN0IHRpbWUsIGFuZAogICAgICAgIGZvcmJhZGUgdG8gcmV0dXJuIHRvIGhpbTsgd2hlbiBoZSBkaWQgcmV0dXJuLCBoZSBwdXQgaGltIHRvIGRlYXRoLjwvdHJhbnNsYXRpb24+"
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPjwvdHJhbnNsYXRpb24+"
translation['4.7.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBJIGNhbm5vdCBjb25jZWFsIHdoYXQgSSBoZWFyOyBmb3Igc2F5aW5ncyBhcmUgYnJ1aXRlZCBhYm91dCwgd2hpY2gKICAgICAgIGNvbWUgdG8gbXkgZWFycywgb2YgdGhvc2UgbWVuIHdobyBzZWVtIHRvIGZlYXIgdGhhdCBJIG1heSBub3QgaGF2ZSBmb3JjZSBlbm91Z2ggdG8gcHV0IGluCiAgICAgICBleGVjdXRpb24gdGhlIHRoaW5ncyB3aGljaCB5b3UgZGV0ZXJtaW5lIG9uIHRoaXMgZGF5LiBFdmVyeXRoaW5nIGlzIHByb3ZpZGVkIGZvciwgYW5kCiAgICAgICBwcmVwYXJlZCwgYW5kIGFycmFuZ2VkLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBib3RoIGJ5IG15IGV4Y2VlZGluZyBjYXJlIGFuZCBkaWxpZ2VuY2UsIGFuZAogICAgICAgYWxzbyBieSB0aGUgc3RpbGwgZ3JlYXRlciB6ZWFsIG9mIHRoZSBSb21hbiBwZW9wbGUgZm9yIHRoZSByZXRhaW5pbmcgb2YgdGhlaXIgc3VwcmVtZQogICAgICAgZG9taW5pb24sIGFuZCBmb3IgdGhlIHByZXNlcnZpbmcgb2YgdGhlIGZvcnR1bmVzIG9mIGFsbC4gQWxsIG1lbiBvZiBhbGwgcmFua3MgYXJlIHByZXNlbnQsCiAgICAgICBhbmQgb2YgYWxsIGFnZXM7IHRoZSBmb3J1bSBpcyBmdWxsLCB0aGUgdGVtcGxlcyBhcm91bmQgdGhlIGZvcnVtIGFyZSBmdWxsLCBhbGwgdGhlIGFwcHJvYWNoZXMKICAgICAgIHRvIHRoaXMgcGxhY2UgYW5kIHRvIHRoaXMgdGVtcGxlIGFyZSBmdWxsLiBGb3IgdGhpcyBpcyB0aGUgb25seSBjYXVzZSB0aGF0IGhhcyBldmVyIGJlZW4KICAgICAgIGtub3duIHNpbmNlIHRoZSBmaXJzdCBmb3VuZGF0aW9uIG9mIHRoZSBjaXR5LCBpbiB3aGljaCBhbGwgbWVuIHdlcmUgb2Ygb25lIGFuZCB0aGUgc2FtZQogICAgICAgb3BpbmlvbuKAlGV4Y2VwdCB0aG9zZSwgd2hvLCBhcyB0aGV5IHNhdyB0aGV5IG11c3QgYmUgcnVpbmVkLCBwcmVmZXJyZWQgdG8gcGVyaXNoIGluCiAgICAgICBjb21wYW55IHdpdGggYWxsIHRoZSB3b3JsZCByYXRoZXIgdGhhbiBieSB0aGVtc2VsdmVzLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJzZWN0aW9uIiAvPiBUaGVzZSBtZW4gSSBleGNlcHQsIGFuZCBJIHdpbGxpbmdseSBzZXQgYXBhcnQgZnJvbSB0aGUKICAgICAgIHJlc3Q7IGZvciBJIGRvIG5vdCB0aGluayB0aGF0IHRoZXkgc2hvdWxkIGJlIGNsYXNzZWQgaW4gdGhlIG51bWJlciBvZiB3b3J0aGxlc3MgY2l0aXplbnMsIGJ1dAogICAgICAgaW4gdGhhdCBvZiB0aGUgbW9zdCBiaXR0ZXIgZW5lbWllcy4gQnV0LCBhcyBmb3IgdGhlIHJlc3QsIE8geWUgaW1tb3J0YWwgZ29kcyEgaW4gd2hhdCBjcm93ZHMsCiAgICAgICB3aXRoIHdoYXQgemVhbCwgd2l0aCB3aGF0IHZpcnR1ZSBkbyB0aGV5IGFncmVlIGluIGRlZmVuY2Ugb2YgdGhlIGNvbW1vbiBkaWduaXR5IGFuZCBzYWZldHkuCiAgICAgICBXaHkgc2hvdWxkIEkgaGVyZSBzcGVhayBvZiB0aGUgUm9tYW4ga25pZ2h0cz8gd2hvIHlpZWxkIHRvIHlvdSB0aGUgc3VwcmVtYWN5IGluIHJhbmsgYW5kCiAgICAgICB3aXNkb20sIGluIG9yZGVyIHRvIHZpZSB3aXRoIHlvdSBpbiBsb3ZlIGZvciB0aGUgcmVwdWJsaWMs4oCUd2hvbSB0aGlzIGRheSBhbmQgdGhpcwogICAgICAgY2F1c2Ugbm93IHJldW5pdGUgd2l0aCB5b3UgaW4gYWxsaWFuY2UgYW5kIHVuYW5pbWl0eSB3aXRoIHlvdXIgYm9keSByZWNvbmNpbGVkIGFmdGVyIGEKICAgICAgIGRpc2FncmVlbWVudCBvZiBtYW55IHllYXJzLiBBbmQgaWYgd2UgY2FuIHByZXNlcnZlIGZvciBldmVyIGluIHRoZSByZXB1YmxpYyB0aGlzIHVuaW9uIG5vdwogICAgICAgZXN0YWJsaXNoZWQgaW4gbmF5IGNvbnN1bHNoaXAsIEkgcGxlZGdlIG15c2VsZiB0byB5b3UgdGhhdCBubyBjaXZpbCBhbmQgZG9tZXN0aWMgY2FsYW1pdHkgY2FuCiAgICAgICBoZXJlYWZ0ZXIgcmVhY2ggYW55IHBhcnQgb2YgdGhlIHJlcHVibGljLiBJIHNlZSB0aGF0IHRoZSB0cmlidW5lcyBvZiB0aGUKICAgICAgIHRyZWFzdXJ54oCUZXhjZWxsZW50IG1lbuKAlGhhdmUgdW5pdGVkIHdpdGggc2ltaWxhciB6ZWFsIGluIGRlZmVuY2Ugb2YgdGhlCiAgICAgICByZXB1YmxpYywgYW5kIGFsbCB0aGUgbm90YXJpZXMuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIG5vdGFyaWVzIGF0IFJvbWUgd2VyZSBpbiB0aGUgcGF5IG9mCiAgICAgICAgdGhlIHN0YXRlOyB0aGV5IHdlcmUgY2hpZWZseSBlbXBsb3llZCBpbiBtYWtpbmcgdXAgdGhlIHB1YmxpYyBhY2NvdW50cy4gSW4gdGhlIHRpbWUgb2YKICAgICAgICBDaWNlcm8gaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGxhd2Z1bCBmb3IgYW55IG9uZSB0byBvYnRhaW4gdGhlIG9mZmljZSBvZiA8Zm9yZWlnbiBsYW5nPSJsYSI+c2NyaWJhPC9mb3JlaWduPiBieSBwdXJjaGFzZSwgKHNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBWZXIuIDIuMi43OSIgdmFsaWQ9InllcyI+Q2ljLiBpbiBWZXJyLiAyLjc5PC9iaWJsPiwpCiAgICAgICAgYW5kIGZyZWVkbWVuIGFuZCB0aGVpciBzb25zIGZyZXF1ZW50bHkgYXZhaWxlZCB0aGVtc2VsdmVzIG9mIHRoaXMgcHJpdmlsZWdlLiA8L25vdGU+IEZvciBhcwogICAgICAgdGhpcyBkYXkgaGFkIGJ5IGNoYW5jZSBicm91Z2h0IHRoZW0gaW4gY3Jvd2RzIHRvIHRoZSB0cmVhc3VyeSwgSSBzZWUgdGhhdCB0aGV5IHdlcmUgZGl2ZXJ0ZWQKICAgICAgIGZyb20gYW4gYW54aWV0eSBmb3IgdGhlIG1vbmV5IGR1ZSB0byB0aGVtLCBmcm9tIGFuIGV4cGVjdGF0aW9uIG9mIHRoZWlyIGNhcGl0YWwsIHRvIGEgcmVnYXJkCiAgICAgICBmb3IgdGhlIGNvbW1vbiBzYWZldHkuIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+IFRoZSBlbnRpcmUgbXVsdGl0dWRlIG9mIGhvbmVzdCBtZW4sCiAgICAgICBldmVuIHRoZSBwb29yZXN0IGlzIHByZXNlbnQ7IGZvciB3aG8gaXMgdGhlcmUgdG8gd2hvbSB0aGVzZSB0ZW1wbGVzLCB0aGUgc2lnaHQgb2YgdGhlIGNpdHksCiAgICAgICB0aGUgcG9zc2Vzc2lvbiBvZiBsaWJlcnR5LOKAlGluIHNob3J0OyB0aGlzIGxpZ2h0IGFuZCB0aGlzIHNvaWwgb2YgaGlzLCBjb21tb24gdG8gdXMKICAgICAgIGFsbCwgaXMgbm90IGJvdGggZGVhciBhbmQgcGxlYXNhbnQgYW5kIGRlbGlnaHRmdWw/IDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.7.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlc2UgbWVuIEkgZXhjZXB0LCBhbmQgSSB3aWxsaW5nbHkgc2V0IGFwYXJ0IGZyb20gdGhlCiAgICAgICByZXN0OyBmb3IgSSBkbyBub3QgdGhpbmsgdGhhdCB0aGV5IHNob3VsZCBiZSBjbGFzc2VkIGluIHRoZSBudW1iZXIgb2Ygd29ydGhsZXNzIGNpdGl6ZW5zLCBidXQKICAgICAgIGluIHRoYXQgb2YgdGhlIG1vc3QgYml0dGVyIGVuZW1pZXMuIEJ1dCwgYXMgZm9yIHRoZSByZXN0LCBPIHllIGltbW9ydGFsIGdvZHMhIGluIHdoYXQgY3Jvd2RzLAogICAgICAgd2l0aCB3aGF0IHplYWwsIHdpdGggd2hhdCB2aXJ0dWUgZG8gdGhleSBhZ3JlZSBpbiBkZWZlbmNlIG9mIHRoZSBjb21tb24gZGlnbml0eSBhbmQgc2FmZXR5LgogICAgICAgV2h5IHNob3VsZCBJIGhlcmUgc3BlYWsgb2YgdGhlIFJvbWFuIGtuaWdodHM/IHdobyB5aWVsZCB0byB5b3UgdGhlIHN1cHJlbWFjeSBpbiByYW5rIGFuZAogICAgICAgd2lzZG9tLCBpbiBvcmRlciB0byB2aWUgd2l0aCB5b3UgaW4gbG92ZSBmb3IgdGhlIHJlcHVibGljLOKAlHdob20gdGhpcyBkYXkgYW5kIHRoaXMKICAgICAgIGNhdXNlIG5vdyByZXVuaXRlIHdpdGggeW91IGluIGFsbGlhbmNlIGFuZCB1bmFuaW1pdHkgd2l0aCB5b3VyIGJvZHkgcmVjb25jaWxlZCBhZnRlciBhCiAgICAgICBkaXNhZ3JlZW1lbnQgb2YgbWFueSB5ZWFycy4gQW5kIGlmIHdlIGNhbiBwcmVzZXJ2ZSBmb3IgZXZlciBpbiB0aGUgcmVwdWJsaWMgdGhpcyB1bmlvbiBub3cKICAgICAgIGVzdGFibGlzaGVkIGluIG5heSBjb25zdWxzaGlwLCBJIHBsZWRnZSBteXNlbGYgdG8geW91IHRoYXQgbm8gY2l2aWwgYW5kIGRvbWVzdGljIGNhbGFtaXR5IGNhbgogICAgICAgaGVyZWFmdGVyIHJlYWNoIGFueSBwYXJ0IG9mIHRoZSByZXB1YmxpYy4gSSBzZWUgdGhhdCB0aGUgdHJpYnVuZXMgb2YgdGhlCiAgICAgICB0cmVhc3VyeeKAlGV4Y2VsbGVudCBtZW7igJRoYXZlIHVuaXRlZCB3aXRoIHNpbWlsYXIgemVhbCBpbiBkZWZlbmNlIG9mIHRoZQogICAgICAgcmVwdWJsaWMsIGFuZCBhbGwgdGhlIG5vdGFyaWVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+VGhlIG5vdGFyaWVzIGF0IFJvbWUgd2VyZSBpbiB0aGUgcGF5IG9mCiAgICAgICAgdGhlIHN0YXRlOyB0aGV5IHdlcmUgY2hpZWZseSBlbXBsb3llZCBpbiBtYWtpbmcgdXAgdGhlIHB1YmxpYyBhY2NvdW50cy4gSW4gdGhlIHRpbWUgb2YKICAgICAgICBDaWNlcm8gaXQgc2VlbXMgdG8gaGF2ZSBiZWVuIGxhd2Z1bCBmb3IgYW55IG9uZSB0byBvYnRhaW4gdGhlIG9mZmljZSBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zY3JpYmE8L2ZvcmVpZ24+IGJ5IHB1cmNoYXNlLCAoc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAyLjIuNzkiIHZhbGlkPSJ5ZXMiPkNpYy4gaW4gVmVyci4gMi43OTwvYmlibD4sKQogICAgICAgIGFuZCBmcmVlZG1lbiBhbmQgdGhlaXIgc29ucyBmcmVxdWVudGx5IGF2YWlsZWQgdGhlbXNlbHZlcyBvZiB0aGlzIHByaXZpbGVnZS4gPC9ub3RlPiBGb3IgYXMKICAgICAgIHRoaXMgZGF5IGhhZCBieSBjaGFuY2UgYnJvdWdodCB0aGVtIGluIGNyb3dkcyB0byB0aGUgdHJlYXN1cnksIEkgc2VlIHRoYXQgdGhleSB3ZXJlIGRpdmVydGVkCiAgICAgICBmcm9tIGFuIGFueGlldHkgZm9yIHRoZSBtb25leSBkdWUgdG8gdGhlbSwgZnJvbSBhbiBleHBlY3RhdGlvbiBvZiB0aGVpciBjYXBpdGFsLCB0byBhIHJlZ2FyZAogICAgICAgZm9yIHRoZSBjb21tb24gc2FmZXR5LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zY3JpYmE8L2ZvcmVpZ24+IGJ5IHB1cmNoYXNlLCAoc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAyLjIuNzkiIHZhbGlkPSJ5ZXMiPkNpYy4gaW4gVmVyci4gMi43OTwvYmlibD4sKQogICAgICAgIGFuZCBmcmVlZG1lbiBhbmQgdGhlaXIgc29ucyBmcmVxdWVudGx5IGF2YWlsZWQgdGhlbXNlbHZlcyBvZiB0aGlzIHByaXZpbGVnZS4gPC90cmFuc2xhdGlvbj4="
translation['4.7.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz4gVGhlIGVudGlyZSBtdWx0aXR1ZGUgb2YgaG9uZXN0IG1lbiwKICAgICAgIGV2ZW4gdGhlIHBvb3Jlc3QgaXMgcHJlc2VudDsgZm9yIHdobyBpcyB0aGVyZSB0byB3aG9tIHRoZXNlIHRlbXBsZXMsIHRoZSBzaWdodCBvZiB0aGUgY2l0eSwKICAgICAgIHRoZSBwb3NzZXNzaW9uIG9mIGxpYmVydHks4oCUaW4gc2hvcnQ7IHRoaXMgbGlnaHQgYW5kIHRoaXMgc29pbCBvZiBoaXMsIGNvbW1vbiB0byB1cwogICAgICAgYWxsLCBpcyBub3QgYm90aCBkZWFyIGFuZCBwbGVhc2FudCBhbmQgZGVsaWdodGZ1bD8gPC90cmFuc2xhdGlvbj4="
translation['4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXQgaXMgd29ydGggd2hpbGUsIE8gY29uc2NyaXB0IGZhdGhlcnMsIHRvIGtub3cgdGhlIGluY2xpbmF0aW9ucyBvZiB0aGUgZnJlZWRtZW47IHdobywKICAgICAgIGhhdmluZyBieSB0aGVpciBnb29kIGZvcnR1bmUgb2J0YWluZWQgdGhlIHJpZ2h0cyBvZiBjaXRpemVucywgY29uc2lkZXIgdGhpcyB0byBiZSByZWFsbHkKICAgICAgIHRoZWlyIGNvdW50cnksIHdoaWNoIHNvbWUgd2hvIGhhdmUgYmVlbiBib3JuIGhlcmUsIGFuZCBib3JuIGluIHRoZSBoaWdoZXN0IHJhbmssIGhhdmUKICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgbm90IHRoZWlyIG93biBjb3VudHJ5LCBidXQgYSBjaXR5IG9mIGVuZW1pZXMuIEJ1dCB3aHkgc2hvdWxkIEkgc3BlYWsgb2YgbWVuCiAgICAgICBvZiB0aGlzIGJvZHkgd2hvbSB0aGVpciBwcml2YXRlIGZvcnR1bmVzLCB3aG9tIHRoZWlyIGNvbW1vbiByZXB1YmxpYywgd2hvbSwgaW4gc2hvcnQsIHRoYXQKICAgICAgIGxpYmVydHkgd2hpY2ggaXMgbW9zdCBkZWxpZ2h0ZnVsIGhhcyBjYWxsZWQgZm9ydGggdG8gZGVmZW5kIHRoZSBzYWZldHkgb2YgdGhlaXIgY291bnRyeT8KICAgICAgIFRoZXJlIGlzIG5vIHNsYXZlIHdobyBpcyBvbmx5IGluIGFuIGVuZHVyYWJsZSBjb25kaXRpb24gb2Ygc2xhdmVyeSB3aG8gZG9lcyBub3Qgc2h1ZGRlciBhdAogICAgICAgdGhlIGF1ZGFjaXR5IG9mIGNpdGl6ZW5zLCB3aG8gZG9lcyBub3QgZGVzaXJlIHRoYXQgdGhlc2UgdGhpbmdzIG1heSBzdGFuZCwgd2hvIGRvZXMgbm90CiAgICAgICBjb250cmlidXRlIGFsbCB0aGUgZ29vZC13aWxsIHRoYXQgaGUgY2FuLCBhbmQgYWxsIHRoYXQgaGUgZGFyZXMsIHRvIHRoZSBjb21tb24gc2FmZXR5LiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPiBXaGVyZWZvcmUsIGlmIHRoaXMgY29uc2lkZXJhdGlvbiBtb3ZlcyBhbnkgb25lLCB0aGF0IGl0CiAgICAgICBoYXMgYmVlbiBoZWFyZCB0aGF0IHNvbWUgdG9vbCBvZiBMZW50dWx1cyBpcyBydW5uaW5nIGFib3V0IHRoZSBzaG9wcyzigJRpcyBob3BpbmcKICAgICAgIHRoYXQgdGhlIG1pbmRzIG9mIHNvbWUgcG9vciBhbmQgaWdub3JhbnQgbWVuIG1heSBiZSBjb3JydXB0ZWQgYnkgYnJpYmVyeTsgdGhhdCwgaW5kZWVkLCBoYXMKICAgICAgIGJlZW4gYXR0ZW1wdGVkIGFuZCBiZWd1biwgYnV0IG5vIG9uZSBoYXMgYmVlbiBmb3VuZCBlaXRoZXIgc28gd3JldGNoZWQgaW4gdGhlaXIgZm9ydHVuZSBvciBzbwogICAgICAgYWJhbmRvbmVkIGluIHRoZWlyIGluY2xpbmF0aW9uIGFzIG5vdCB0byB3aXNoIHRoZSBwbGFjZSBvZiB0aGVpciBzZWF0IGFuZCB3b3JrIGFuZCBkYWlseQogICAgICAgZ2FpbiwgdGhlaXIgY2hhbWJlciBhbmQgdGhlaXIgYmVkLCBhbmQsIGluIHNob3J0LCB0aGUgdHJhbnF1aWwgY291cnNlIG9mIHRoZWlyIGxpdmVzLCB0byBiZQogICAgICAgc3RpbGwgcHJlc2VydmVkIHRvIHRoZW0uIEFuZCBmYXIgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aG9zZSB3aG8gYXJlIGluIHRoZQogICAgICAgc2hvcHMs4oCUeWVzLCBpbmRlZWQsIChmb3IgdGhhdCBpcyB0aGUgbW9yZSBjb3JyZWN0IHdheSBvZiBzcGVha2luZywpIHRoZSB3aG9sZSBvZgogICAgICAgdGhpcyBjbGFzcyBpcyBvZiBhbGwgdGhlIG1vc3QgYXR0YWNoZWQgdG8gdHJhbnF1aWxsaXR5OyB0aGVpciB3aG9sZSBzdG9jaywgaW5kZWVkLCB0aGVpcgogICAgICAgd2hvbGUgZW1wbG95bWVudCBhbmQgbGl2ZWxpaG9vZCwgZXhpc3RzIGJ5IHRoZSBwZWFjZWZ1bCBpbnRlcmNvdXJzZSBvZiB0aGUgY2l0aXplbnMsIGFuZCBpcwogICAgICAgd2hvbGx5IHN1cHBvcnRlZCBieSBwZWFjZS4gQW5kIGlmIHRoZWlyIGdhaW5zIGFyZSBkaW1pbmlzaGVkIHdoZW5ldmVyIHRoZWlyIHNob3BzIGFyZSBzaHV0LAogICAgICAgd2hhdCB3aWxsIHRoZXkgYmUgd2hlbiB0aGV5IGFyZSBidXJudD8gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBhcyB0aGlzIGlzIHRoZQogICAgICAgY2FzZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIHByb3RlY3Rpb24gb2YgdGhlIFJvbWFuIHBlb3BsZSBpcyBub3Qgd2FudGluZyB0byB5b3U7IGRvIHlvdQogICAgICAgdGFrZSBjYXJlIHRoYXQgeW91IGRvIG5vdCBzZWVtIHRvIGJlIHdhbnRpbmcgdG8gdGhlIFJvbWFuIHBlb3BsZS4gPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.8.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz4gV2hlcmVmb3JlLCBpZiB0aGlzIGNvbnNpZGVyYXRpb24gbW92ZXMgYW55IG9uZSwgdGhhdCBpdAogICAgICAgaGFzIGJlZW4gaGVhcmQgdGhhdCBzb21lIHRvb2wgb2YgTGVudHVsdXMgaXMgcnVubmluZyBhYm91dCB0aGUgc2hvcHMs4oCUaXMgaG9waW5nCiAgICAgICB0aGF0IHRoZSBtaW5kcyBvZiBzb21lIHBvb3IgYW5kIGlnbm9yYW50IG1lbiBtYXkgYmUgY29ycnVwdGVkIGJ5IGJyaWJlcnk7IHRoYXQsIGluZGVlZCwgaGFzCiAgICAgICBiZWVuIGF0dGVtcHRlZCBhbmQgYmVndW4sIGJ1dCBubyBvbmUgaGFzIGJlZW4gZm91bmQgZWl0aGVyIHNvIHdyZXRjaGVkIGluIHRoZWlyIGZvcnR1bmUgb3Igc28KICAgICAgIGFiYW5kb25lZCBpbiB0aGVpciBpbmNsaW5hdGlvbiBhcyBub3QgdG8gd2lzaCB0aGUgcGxhY2Ugb2YgdGhlaXIgc2VhdCBhbmQgd29yayBhbmQgZGFpbHkKICAgICAgIGdhaW4sIHRoZWlyIGNoYW1iZXIgYW5kIHRoZWlyIGJlZCwgYW5kLCBpbiBzaG9ydCwgdGhlIHRyYW5xdWlsIGNvdXJzZSBvZiB0aGVpciBsaXZlcywgdG8gYmUKICAgICAgIHN0aWxsIHByZXNlcnZlZCB0byB0aGVtLiBBbmQgZmFyIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhvc2Ugd2hvIGFyZSBpbiB0aGUKICAgICAgIHNob3BzLOKAlHllcywgaW5kZWVkLCAoZm9yIHRoYXQgaXMgdGhlIG1vcmUgY29ycmVjdCB3YXkgb2Ygc3BlYWtpbmcsKSB0aGUgd2hvbGUgb2YKICAgICAgIHRoaXMgY2xhc3MgaXMgb2YgYWxsIHRoZSBtb3N0IGF0dGFjaGVkIHRvIHRyYW5xdWlsbGl0eTsgdGhlaXIgd2hvbGUgc3RvY2ssIGluZGVlZCwgdGhlaXIKICAgICAgIHdob2xlIGVtcGxveW1lbnQgYW5kIGxpdmVsaWhvb2QsIGV4aXN0cyBieSB0aGUgcGVhY2VmdWwgaW50ZXJjb3Vyc2Ugb2YgdGhlIGNpdGl6ZW5zLCBhbmQgaXMKICAgICAgIHdob2xseSBzdXBwb3J0ZWQgYnkgcGVhY2UuIEFuZCBpZiB0aGVpciBnYWlucyBhcmUgZGltaW5pc2hlZCB3aGVuZXZlciB0aGVpciBzaG9wcyBhcmUgc2h1dCwKICAgICAgIHdoYXQgd2lsbCB0aGV5IGJlIHdoZW4gdGhleSBhcmUgYnVybnQ/IDwvdHJhbnNsYXRpb24+"
translation['4.8.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4gQW5kLCBhcyB0aGlzIGlzIHRoZQogICAgICAgY2FzZSwgTyBjb25zY3JpcHQgZmF0aGVycywgdGhlIHByb3RlY3Rpb24gb2YgdGhlIFJvbWFuIHBlb3BsZSBpcyBub3Qgd2FudGluZyB0byB5b3U7IGRvIHlvdQogICAgICAgdGFrZSBjYXJlIHRoYXQgeW91IGRvIG5vdCBzZWVtIHRvIGJlIHdhbnRpbmcgdG8gdGhlIFJvbWFuIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['4.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WW91IGhhdmUgYSBjb25zdWwgcHJlc2VydmVkIG91dCBvZiBtYW55IGRhbmdlcnMgYW5kIHBsb3RzLCBhbmQgZnJvbSBkZWF0aCBpdHNlbGYgbm90IGZvcgogICAgICAgaGlzIG93biBsaWZlLCBidXQgZm9yIHlvdXIgc2FmZXR5LiBBbGwgcmFua3MgYWdyZWUgZm9yIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGhlIHJlcHVibGljIHdpdGgKICAgICAgIGhlYXJ0IGFuZCB3aWxsLCB3aXRoIHplYWwsIHdpdGggdmlydHVlLCB3aXRoIHRoZWlyIHZvaWNlLiBZb3VyIGNvbW1vbiBjb3VudHJ5LCBiZXNpZWdlZCBieQogICAgICAgdGhlIGhhbmRzIGFuZCB3ZWFwb25zIG9mIGFuIGltcGlvdXMgY29uc3BpcmFjeSwgc3RyZXRjaGVzIGZvcnRoIGhlciBoYW5kcyB0byB5b3UgYXMgYQogICAgICAgc3VwcGxpYW50OyB0byB5b3Ugc2hlIHJlY29tbWVuZHMgaGVyc2VsZiB0byB5b3Ugc2hlIHJlY29tbWVuZHMgdGhlIGxpdmVzIG9mIGFsbCB0aGUgY2l0aXplbnMsCiAgICAgICBhbmQgdGhlIGNpdGFkZWwsIGFuZCB0aGUgQ2FwaXRvbCwgYW5kIHRoZSBhbHRhcnMgb2YgdGhlIGhvdXNlaG9sZCBnb2RzLCBhbmQgdGhlIGV0ZXJuYWwKICAgICAgIGluZXh0aW5ndWlzaGFibGUgZmlyZSBvZiBWZXN0YSwgYW5kIGFsbCB0aGUgdGVtcGxlcyBvZiBhbGwgdGhlIGdvZHMsIGFuZCB0aGUgYWx0YXJzIGFuZCB0aGUKICAgICAgIHdhbGxzIGFuZCB0aGUgaG91c2VzIG9mIHRoZSBjaXR5LiBNb3Jlb3ZlciwgeW91ciBvd24gbGl2ZXMsIHRob3NlIG9mIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuLAogICAgICAgdGhlIGZvcnR1bmVzIG9mIGFsbCBtZW4sIHlvdXIgaG9tZXMsIHlvdXIgaGVhcnRoOyBhcmUgdGhpcyBkYXkgaW50ZXJlc3RlZCBpbiB5b3VyIGRlY2lzaW9uLiA8L3A+CgkJCQkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPiBZb3UgaGF2ZSBhIGxlYWRlciBtaW5kZnVsIG9mIHlvdSwgZm9yZ2V0ZnVsIG9mCiAgICAgICBoaW1zZWxm4oCUYW4gb3Bwb3J0dW5pdHkgd2hpY2ggaXMgbm90IGFsd2F5cyBnaXZlbiB0byBtZW47IHlvdSBoYXZlIGFsbCByYW5rcywgYWxsCiAgICAgICBpbmRpdmlkdWFscywgdGhlIHdob2xlIFJvbWFuIHBlb3BsZSwgKGEgdGhpbmcgd2hpY2ggaW4gY2l2aWwgdHJhbnNhY3Rpb25zIHdlIHNlZSB0aGlzIGRheSBmb3IKICAgICAgIHRoZSBmaXJzdCB0aW1lLCkgZnVsbCBvZiBvbmUgYW5kIHRoZSBzYW1lIGZlZWxpbmcuIFRoaW5rIHdpdGggd2hhdCBncmVhdCBsYWJvdXIgdGhpcyBvdXIKICAgICAgIGRvbWluaW9uIHdhcyBmb3VuZGVkLCBieSB3aGF0IHZpcnR1ZSB0aGlzIG91ciBsaWJlcnR5IHdhcyBlc3RhYmxpc2hlZCwgYnkgd2hhdCBraW5kIGZhdm91ciBvZgogICAgICAgdGhlIGdvZHMgb3VyIGZvcnR1bmVzIHdlcmUgYWdncmFuZGl6ZWQgYW5kIGVubm9ibGVkLCBhbmQgaG93IG5lYXJseSBvbmUgbmlnaHQgZGVzdHJveWVkIHRoZW0KICAgICAgIGFsbC4gVGhhdCB0aGlzIG1heSBuZXZlciBoZXJlYWZ0ZXIgYmUgYWJsZSBub3Qgb25seSB0byBiZSBkb25lLCBidXQgbm90IGV2ZW4gdG8gYmUgdGhvdWdodCBvZgogICAgICAgeW91IG11c3QgdGhpcyBkYXkgdGFrZSBjYXJlLiBBbmQgSSBoYXZlIHNwb2tlbiB0aHVzLCBub3QgaW4gb3JkZXIgdG8gc3RpciB5b3UgdXAgd2hvIGFsbW9zdAogICAgICAgb3V0cnVuIG1lIG15c2VsZiBidXQgdGhhdCBteSB2b2ljZSwgd2hpY2ggb3VnaHQgdG8gYmUgdGhlIGNoaWVmIHZvaWNlIGluIHRoZSByZXB1YmxpYywgbWF5CiAgICAgICBhcHBlYXIgdG8gaGF2ZSBmdWxmaWxsZWQgdGhlIGR1dHkgd2hpY2ggYmVsb25ncyB0byBtZSBhcyBjb25zdWwuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+PG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CgkJCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.9.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz4gWW91IGhhdmUgYSBsZWFkZXIgbWluZGZ1bCBvZiB5b3UsIGZvcmdldGZ1bCBvZgogICAgICAgaGltc2VsZuKAlGFuIG9wcG9ydHVuaXR5IHdoaWNoIGlzIG5vdCBhbHdheXMgZ2l2ZW4gdG8gbWVuOyB5b3UgaGF2ZSBhbGwgcmFua3MsIGFsbAogICAgICAgaW5kaXZpZHVhbHMsIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUsIChhIHRoaW5nIHdoaWNoIGluIGNpdmlsIHRyYW5zYWN0aW9ucyB3ZSBzZWUgdGhpcyBkYXkgZm9yCiAgICAgICB0aGUgZmlyc3QgdGltZSwpIGZ1bGwgb2Ygb25lIGFuZCB0aGUgc2FtZSBmZWVsaW5nLiBUaGluayB3aXRoIHdoYXQgZ3JlYXQgbGFib3VyIHRoaXMgb3VyCiAgICAgICBkb21pbmlvbiB3YXMgZm91bmRlZCwgYnkgd2hhdCB2aXJ0dWUgdGhpcyBvdXIgbGliZXJ0eSB3YXMgZXN0YWJsaXNoZWQsIGJ5IHdoYXQga2luZCBmYXZvdXIgb2YKICAgICAgIHRoZSBnb2RzIG91ciBmb3J0dW5lcyB3ZXJlIGFnZ3JhbmRpemVkIGFuZCBlbm5vYmxlZCwgYW5kIGhvdyBuZWFybHkgb25lIG5pZ2h0IGRlc3Ryb3llZCB0aGVtCiAgICAgICBhbGwuIFRoYXQgdGhpcyBtYXkgbmV2ZXIgaGVyZWFmdGVyIGJlIGFibGUgbm90IG9ubHkgdG8gYmUgZG9uZSwgYnV0IG5vdCBldmVuIHRvIGJlIHRob3VnaHQgb2YKICAgICAgIHlvdSBtdXN0IHRoaXMgZGF5IHRha2UgY2FyZS4gQW5kIEkgaGF2ZSBzcG9rZW4gdGh1cywgbm90IGluIG9yZGVyIHRvIHN0aXIgeW91IHVwIHdobyBhbG1vc3QKICAgICAgIG91dHJ1biBtZSBteXNlbGYgYnV0IHRoYXQgbXkgdm9pY2UsIHdoaWNoIG91Z2h0IHRvIGJlIHRoZSBjaGllZiB2b2ljZSBpbiB0aGUgcmVwdWJsaWMsIG1heQogICAgICAgYXBwZWFyIHRvIGhhdmUgZnVsZmlsbGVkIHRoZSBkdXR5IHdoaWNoIGJlbG9uZ3MgdG8gbWUgYXMgY29uc3VsLiA8L3RyYW5zbGF0aW9uPg=="
translation['4.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['4.10.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgYmVmb3JlIEkgcmV0dXJuIHRvIHRoZSBkZWNpc2lvbiwgSSB3aWxsIHNheSBhIGZldyB3b3JkcyBjb25jZXJuaW5nIG15c2VsZi4gQXMgbnVtZXJvdXMKICAgICAgIGFzIGlzIHRoZSBiYW5kIG9mIGNvbnNwaXJhdG9yc+KAlGFuZCB5b3Ugc2VlIHRoYXQgaXQgaXMgdmVyeSBncmVhdCzigJRzbwogICAgICAgbnVtZXJvdXMgYSBtdWx0aXR1ZGUgb2YgZW5lbWllcyBkbyBJIHNlZSB0aGF0IEkgaGF2ZSBicm91Z2h0IHVwb24gbXlzZWxmLiBCdXQgSSBjb25zaWRlciB0aGVtCiAgICAgICBiYXNlIGFuZCBwb3dlcmxlc3MgYW5kIGRlc3BpY2FibGUgYW5kIGFiamVjdC4gQnV0IGlmIGF0IGFueSB0aW1lIHRoYXQgYmFuZCBzaGFsbCBiZSBleGNpdGVkCiAgICAgICBieSB0aGUgd2lja2VkbmVzcyBhbmQgbWFkbmVzcyBvZiBhbnkgb25lLCBhbmQgc2hhbGwgc2hvdyBpdHNlbGYgbW9yZSBwb3dlcmZ1bCB0aGFuIHlvdXIKICAgICAgIGRpZ25pdHkgYW5kIHRoYXQgb2YgdGhlIHJlcHVibGljLCB5ZXQuIE8gY29uc2NyaXB0IGZhdGhlcnMsIEkgc2hhbGwgbmV2ZXIgcmVwZW50IG9mIG15CiAgICAgICBhY3Rpb25zIGFuZCBvZiBteSBhZHZpY2UuIERlYXRoLCBpbmRlZWQsIHdoaWNoIHRoZXkgcGVyaGFwcyB0aHJlYXRlbiBtZSB3aXRoLCBpcyBwcmVwYXJlZCBmb3IKICAgICAgIGFsbCBtZW47IHN1Y2ggZ2xvcnkgZHVyaW5nIGxpZmUgYXMgeW91IGhhdmUgaG9ub3VyZWQgbWUgd2l0aCBieSB5b3VyIGRlY3JlZXMgbm8gb25lIGhhcyBldmVyCiAgICAgICBhdHRhaW5lZCB0by4gRm9yIHlvdSBoYXZlIHBhc3NlZCB2b3RlcyBvZiBjb25ncmF0dWxhdGlvbiB0byBvdGhlcnMgZm9yIGhhdmluZyBnb3Zlcm5lZCB0aGUKICAgICAgIHJlcHVibGljIHN1Y2Nlc3NmdWxseSwgYnV0IHRvIG1lIGFsb25lIGZvciBoYXZpbmcgc2F2ZWQgaXQgPC9wPgoJCQkJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IFNjaXBpbyBiZSB0aG91Z2h0IGlsbHVzdHJpb3VzLCBoZSBieSB3aG9zZSB3aXNkb20KICAgICAgIGFuZCB2YWxvdXIgSGFubmliYWwgd2FzIGNvbXBlbGxlZCB0byByZXR1cm4gaW50byBBZnJpY2EsIGFuZCB0byBkZXBhcnQgZnJvbSBJdGFseS4gTGV0IHRoZQogICAgICAgc2Vjb25kIEFmcmljYW51cyBiZSBleHRvbGxlZCB3aXRoIGNvbnNwaWN1b3VzIHByYWlzZSwgd2hvIGRlc3Ryb3llZCB0d28gY2l0aWVzIG1vc3QgaG9zdGlsZQogICAgICAgdG8gdGhpcyBlbXBpcmUsIENhcnRoYWdlIGFuZCBOdW1hbnRpYS4gTGV0IEx1Y2l1cyBQYXVsbHVzIGJlIHRob3VnaHQgYSBncmVhdCBtYW4sIGhlIHdob3NlCiAgICAgICB0cml1bXBoYWwgY2FyIHdhcyBncmFjZWQgPHBiIG49IjMyOCIgLz4gYnkgUGVyc2VzLCBwcmV2aW91c2x5IGEgbW9zdCBwb3dlcmZ1bCBhbmQgbm9ibGUKICAgICAgIG1vbmFyY2guIExldCBNYXJpdXMgYmUgaGVsZCBpbiBldGVybmFsIGhvbm91ciwgd2hvIHR3aWNlIGRlbGl2ZXJlZCBJdGFseSBmcm9tIHNpZWdlLCBhbmQgZnJvbQogICAgICAgdGhlIGZlYXIgb2Ygc2xhdmVyeS4gTGV0IFBvbXBleSBiZSBwcmVmZXJyZWQgdG8gdGhlbSBhbGzigJRQb21wZXksIHdob3NlIGV4cGxvaXRzIGFuZAogICAgICAgd2hvc2UgdmlydHVlcyBhcmUgYm91bmRlZCBieSB0aGUgc2FtZSBkaXN0cmljdHMgYW5kIGxpbWl0cyBhcyB0aGUgY291cnNlIG9mIHRoZSBzdW4uIFRoZXJlCiAgICAgICB3aWxsIGJlLCBmb3Jzb290aCwgYW1vbmcgdGhlIHByYWlzZXMgb2YgdGhlc2UgbWVuLCBzb21lIHJvb20gZm9yIG15IGdsb3J5LCB1bmxlc3MgaGFwbHkgaXQgYmUKICAgICAgIGEgZ3JlYXRlciBkZWVkIHRvIG9wZW4gdG8gdXMgcHJvdmluY2VzIHdoaXRoZXIgd2UgbWF5IGZseSwgdGhhbiB0byB0YWtlIGNhcmUgdGhhdCB0aG9zZSB3aG8KICAgICAgIGFyZSBhdCBhIGRpc3RhbmNlIG1heSwgd2hlbiBjb25xdWVyb3JzOyBoYXZlIGEgaG9tZSB0byByZXR1cm4gdG8uIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9InNlY3Rpb24iIC8+CiAgICAgIDwvcD4KCQkJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.10.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz4gTGV0IFNjaXBpbyBiZSB0aG91Z2h0IGlsbHVzdHJpb3VzLCBoZSBieSB3aG9zZSB3aXNkb20KICAgICAgIGFuZCB2YWxvdXIgSGFubmliYWwgd2FzIGNvbXBlbGxlZCB0byByZXR1cm4gaW50byBBZnJpY2EsIGFuZCB0byBkZXBhcnQgZnJvbSBJdGFseS4gTGV0IHRoZQogICAgICAgc2Vjb25kIEFmcmljYW51cyBiZSBleHRvbGxlZCB3aXRoIGNvbnNwaWN1b3VzIHByYWlzZSwgd2hvIGRlc3Ryb3llZCB0d28gY2l0aWVzIG1vc3QgaG9zdGlsZQogICAgICAgdG8gdGhpcyBlbXBpcmUsIENhcnRoYWdlIGFuZCBOdW1hbnRpYS4gTGV0IEx1Y2l1cyBQYXVsbHVzIGJlIHRob3VnaHQgYSBncmVhdCBtYW4sIGhlIHdob3NlCiAgICAgICB0cml1bXBoYWwgY2FyIHdhcyBncmFjZWQgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzI4IiAvPiBieSBQZXJzZXMsIHByZXZpb3VzbHkgYSBtb3N0IHBvd2VyZnVsIGFuZCBub2JsZQogICAgICAgbW9uYXJjaC4gTGV0IE1hcml1cyBiZSBoZWxkIGluIGV0ZXJuYWwgaG9ub3VyLCB3aG8gdHdpY2UgZGVsaXZlcmVkIEl0YWx5IGZyb20gc2llZ2UsIGFuZCBmcm9tCiAgICAgICB0aGUgZmVhciBvZiBzbGF2ZXJ5LiBMZXQgUG9tcGV5IGJlIHByZWZlcnJlZCB0byB0aGVtIGFsbOKAlFBvbXBleSwgd2hvc2UgZXhwbG9pdHMgYW5kCiAgICAgICB3aG9zZSB2aXJ0dWVzIGFyZSBib3VuZGVkIGJ5IHRoZSBzYW1lIGRpc3RyaWN0cyBhbmQgbGltaXRzIGFzIHRoZSBjb3Vyc2Ugb2YgdGhlIHN1bi4gVGhlcmUKICAgICAgIHdpbGwgYmUsIGZvcnNvb3RoLCBhbW9uZyB0aGUgcHJhaXNlcyBvZiB0aGVzZSBtZW4sIHNvbWUgcm9vbSBmb3IgbXkgZ2xvcnksIHVubGVzcyBoYXBseSBpdCBiZQogICAgICAgYSBncmVhdGVyIGRlZWQgdG8gb3BlbiB0byB1cyBwcm92aW5jZXMgd2hpdGhlciB3ZSBtYXkgZmx5LCB0aGFuIHRvIHRha2UgY2FyZSB0aGF0IHRob3NlIHdobwogICAgICAgYXJlIGF0IGEgZGlzdGFuY2UgbWF5LCB3aGVuIGNvbnF1ZXJvcnM7IGhhdmUgYSBob21lIHRvIHJldHVybiB0by4gPC90cmFuc2xhdGlvbj4="
translation['4.10.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz4KICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BbHRob3VnaCBpbiBvbmUgcG9pbnQgdGhlIGNpcmN1bXN0YW5jZXMgb2YgZm9yZWlnbiB0cml1bXBoIGFyZSBiZXR0ZXIgdGhhbiB0aG9zZSBvZgogICAgICAgZG9tZXN0aWMgdmljdG9yeTsgYmVjYXVzZSBmb3JlaWduIGVuZW1pZXMsIGVpdGhlciBpZiB0aGV5IGJlIGNydXNoZWQgYmVjb21lIG9uZSdzIHNlcnZhbnRzLAogICAgICAgb3IgaWYgdGhleSBiZSByZWNlaXZlZCBpbnRvIHRoZSBzdGF0ZSwgdGhpbmsgdGhlbXNlbHZlcyBib3VuZCB0byB1cyBieSBvYmxpZ2F0aW9uczsgYnV0IHRob3NlCiAgICAgICBvZiB0aGUgbnVtYmVyIG9mIGNpdGl6ZW5zIHdobyBiZWNvbWUgZGVwcmF2ZWQgYnkgbWFkbmVzcyBhbmQgb25jZSBiZWdpbiB0byBiZSBlbmVtaWVzIHRvCiAgICAgICB0aGVpciBjb3VudHJ5LOKAlHRob3NlIG1lbiwgd2hlbiB5b3UgaGF2ZSBkZWZlYXRlZCB0aGVpciBhdHRlbXB0cyB0byBpbmp1cmUgdGhlCiAgICAgICByZXB1YmxpYywgeW91IGNhbiBuZWl0aGVyIHJlc3RyYWluIGJ5IGZvcmNlIG5vciBjb25jaWxpYXRlIGJ5IGtpbmRuZXNzLiBTbyB0aGF0IEkgc2VlIHRoYXQgYW4KICAgICAgIGV0ZXJuYWwgd2FyIHdpdGggYWxsIHdpY2tlZCBjaXRpemVucyBoYXMgYmVlbiB1bmRlcnRha2VuIGJ5IG1lOyB3aGljaCwgaG93ZXZlciwgSSBhbQogICAgICAgY29uZmlkZW50IGNhbiBlYXNpbHkgYmUgZHJpdmVuIGJhY2sgZnJvbSBtZSBhbmQgbWluZSBieSB5b3VyIGFpZCwgYW5kIGJ5IHRoYXQgb2YgYWxsIGdvb2QKICAgICAgIG1lbiwgYW5kIGJ5IHRoZSBtZW1vcnkgb2Ygc3VjaCBncmVhdCBkYW5nZXJzLCB3aGljaCB3aWxsIHJlbWFpbiwgbm90IG9ubHkgYW1vbmcgdGhpcyBwZW9wbGUKICAgICAgIHdoaWNoIGhhcyBiZWVuIHNhdmVkLCBidXQgaW4gdGhlIGRpc2NvdXJzZSBhbmQgbWluZHMgb2YgYWxsIG5hdGlvbnMgZm9yZXZlci4gTm9yLCBpbiB0cnV0aCwKICAgICAgIGNhbiBhbnkgcG93ZXIgYmUgZm91bmQgd2hpY2ggd2lsbCBiZSBhYmxlIHRvIHVuZGVybWluZSBhbmQgZGVzdHJveSB5b3VyIHVuaW9uIHdpdGggdGhlIFJvbWFuCiAgICAgICBrbmlnaHRzLCBhbmQgc3VjaCB1bmFuaW1pdHkgYXMgZXhpc3RzIGFtb25nIGFsbCBnb29kIG1lbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPjxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgoJCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz48L3RyYW5zbGF0aW9uPg=="
translation['4.11.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzLCB0aGVuLCB0aGlzIGlzIHRoZSBjYXNlLCBPIGNvbnNjcmlwdCBmYXRoZXJzLCBpbnN0ZWFkIG9mIG15IG1pbGl0YXJ5CiAgICAgICBjb21tYW5k4oCUaW5zdGVhZCBvZiB0aGUgYXJteSzigJTigJRpbnN0ZWFkIG9mIHRoZSBwcm92aW5jZSA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCI+Q2ljZXJvLCBpbiBvcmRlciB0byB0ZW1wdCBBbnRvbml1cyB0byBhaWQgaGltIGluIGNvdW50ZXJhY3RpbmcgdGhlCiAgICAgICAgdHJlYXNvbmFibGUgZGVzaWducyBvZiBDYXRpbGluZSwgaGFkIGdpdmVuIHVwIHRvIGhpbSB0aGUgcHJvdmluY2Ugb2YgTWFjZWRvbmlhLCB3aGljaCBoYWQKICAgICAgICBmYWxsZW4gdG8gaGlzIG93biBsb3Q7IGFuZCBoYXZpbmcgYWNjZXB0ZWQgdGhhdCBvciBDaXNhbHBpbmUgR2F1bCBpbiBleGNoYW5nZSBmb3IgaXQsIGhlCiAgICAgICAgZ2F2ZSB0aGF0IGFsc28gdG8gUXVpbnR1cyBNZXRlbGx1czsgYmVpbmcgcmVzb2x2ZWQgdG8gcmVjZWl2ZSBubyBlbW9sdW1lbnQsIGRpcmVjdGx5IG9yCiAgICAgICAgaW5kaXJlY3RseSwgZnJvbSBoaXMgY29uc3Vsc2hpcC48L25vdGU+IHdoaWNoIEkgaGF2ZSBuZWdsZWN0ZWQsIGFuZCB0aGUgb3RoZXIgYmFkZ2VzIG9mCiAgICAgICBob25vdXIgd2hpY2ggaGF2ZSBiZWVuIHJlamVjdGVkIGJ5IG1lIGZvciB0aGUgc2FrZSBvZiBwcm90ZWN0aW5nIHRoZSBjaXR5IGFuZCB5b3VyCiAgICAgICBzYWZldHks4oCUaW4gcGxhY2Ugb2YgdGhlIHRpZXMgb2YgY2xpZW50c2hpcCBhbmQgaG9zcGl0YWxpdHkgd2l0aCBjaXRpemVucyBpbiB0aGUKICAgICAgIHByb3ZpbmNlcywgd2hpY2gsIGhvd2V2ZXIsIGJ5IG15IGluZmx1ZW5jZSBpbiB0aGUgY2l0eSwgSSBzdHVkeSB0byBwcmVzZXJ2ZSB3aXRoIGFzIG11Y2ggdG9pbAogICAgICAgYXMgSSBsYWJvdXIgdG8gYWNxdWlyZSB0aGVtLOKAlGluIHBsYWNlIG9mIGFsbCB0aGVzZSB0aGluZ3MsIGFuZCBpbiByZXdhcmQgZm9yIG15CiAgICAgICBzaW5ndWxhciB6ZWFsIGluIHlvdXIgYmVoYWxmLCBhbmQgZm9yIHRoaXMgZGlsaWdlbmNlIGluIHNhdmluZyB0aGUgcmVwdWJsaWMgd2hpY2ggeW91IGJlaG9sZCwKICAgICAgIEkgYXNrIG5vdGhpbmcgb2YgeW91IGJ1dCB0aGUgcmVjb2xsZWN0aW9uIG9mIHRoaXMgdGltZSBhbmQgb2YgbXkgd2hvbGUgY29uc3Vsc2hpcC4gQW5kIGFzCiAgICAgICBsb25nIGFzIHRoYXQgaXMgZml4ZWQgaW4geW91ciBtaW5kcywgSSBzdGlsbCB0aGluayBJIGFtIGZlbmNlZCByb3VuZCBieSB0aGUgc3Ryb25nZXN0IHdhbGwuCiAgICAgICBCdXQgaWYgdGhlIHZpb2xlbmNlIG9mIHdpY2tlZCBtZW4gc2hhbGwgZGVjZWl2ZSBhbmQgb3ZlcnBvd2VyIG15IGV4cGVjdGF0aW9ucywgSSByZWNvbW1lbmQgdG8KICAgICAgIHlvdSBteSBsaXR0bGUgc29uLCB0byB3aG9tLCBpbiB0cnV0aCwgaXQgd2lsbCBiZSBwcm90ZWN0aW9uIGVub3VnaCwgbm90IG9ubHkgZm9yIGhpcyBzYWZldHksCiAgICAgICBidXQgZXZlbiBmb3IgaGlzIGRpZ25pdHkgaWYgeW91IHJlY29sbGVjdCB0aGF0IGhlIGlzIHRoZSBzb24gb2YgaGltIHdobyBoYXMgc2F2ZWQgYWxsIHRoZXNlCiAgICAgICB0aGluZ3MgYXQgaGlzIG93biBzaW5nbGUgcmlzay4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPgogICAgICA8L3A+CgkJCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIj5DaWNlcm8sIGluIG9yZGVyIHRvIHRlbXB0IEFudG9uaXVzIHRvIGFpZCBoaW0gaW4gY291bnRlcmFjdGluZyB0aGUKICAgICAgICB0cmVhc29uYWJsZSBkZXNpZ25zIG9mIENhdGlsaW5lLCBoYWQgZ2l2ZW4gdXAgdG8gaGltIHRoZSBwcm92aW5jZSBvZiBNYWNlZG9uaWEsIHdoaWNoIGhhZAogICAgICAgIGZhbGxlbiB0byBoaXMgb3duIGxvdDsgYW5kIGhhdmluZyBhY2NlcHRlZCB0aGF0IG9yIENpc2FscGluZSBHYXVsIGluIGV4Y2hhbmdlIGZvciBpdCwgaGUKICAgICAgICBnYXZlIHRoYXQgYWxzbyB0byBRdWludHVzIE1ldGVsbHVzOyBiZWluZyByZXNvbHZlZCB0byByZWNlaXZlIG5vIGVtb2x1bWVudCwgZGlyZWN0bHkgb3IKICAgICAgICBpbmRpcmVjdGx5LCBmcm9tIGhpcyBjb25zdWxzaGlwLjwvbm90ZT4gd2hpY2ggSSBoYXZlIG5lZ2xlY3RlZCwgYW5kIHRoZSBvdGhlciBiYWRnZXMgb2YKICAgICAgIGhvbm91ciB3aGljaCBoYXZlIGJlZW4gcmVqZWN0ZWQgYnkgbWUgZm9yIHRoZSBzYWtlIG9mIHByb3RlY3RpbmcgdGhlIGNpdHkgYW5kIHlvdXIKICAgICAgIHNhZmV0eSzigJRpbiBwbGFjZSBvZiB0aGUgdGllcyBvZiBjbGllbnRzaGlwIGFuZCBob3NwaXRhbGl0eSB3aXRoIGNpdGl6ZW5zIGluIHRoZQogICAgICAgcHJvdmluY2VzLCB3aGljaCwgaG93ZXZlciwgYnkgbXkgaW5mbHVlbmNlIGluIHRoZSBjaXR5LCBJIHN0dWR5IHRvIHByZXNlcnZlIHdpdGggYXMgbXVjaCB0b2lsCiAgICAgICBhcyBJIGxhYm91ciB0byBhY3F1aXJlIHRoZW0s4oCUaW4gcGxhY2Ugb2YgYWxsIHRoZXNlIHRoaW5ncywgYW5kIGluIHJld2FyZCBmb3IgbXkKICAgICAgIHNpbmd1bGFyIHplYWwgaW4geW91ciBiZWhhbGYsIGFuZCBmb3IgdGhpcyBkaWxpZ2VuY2UgaW4gc2F2aW5nIHRoZSByZXB1YmxpYyB3aGljaCB5b3UgYmVob2xkLAogICAgICAgSSBhc2sgbm90aGluZyBvZiB5b3UgYnV0IHRoZSByZWNvbGxlY3Rpb24gb2YgdGhpcyB0aW1lIGFuZCBvZiBteSB3aG9sZSBjb25zdWxzaGlwLiBBbmQgYXMKICAgICAgIGxvbmcgYXMgdGhhdCBpcyBmaXhlZCBpbiB5b3VyIG1pbmRzLCBJIHN0aWxsIHRoaW5rIEkgYW0gZmVuY2VkIHJvdW5kIGJ5IHRoZSBzdHJvbmdlc3Qgd2FsbC4KICAgICAgIEJ1dCBpZiB0aGUgdmlvbGVuY2Ugb2Ygd2lja2VkIG1lbiBzaGFsbCBkZWNlaXZlIGFuZCBvdmVycG93ZXIgbXkgZXhwZWN0YXRpb25zLCBJIHJlY29tbWVuZCB0bwogICAgICAgeW91IG15IGxpdHRsZSBzb24sIHRvIHdob20sIGluIHRydXRoLCBpdCB3aWxsIGJlIHByb3RlY3Rpb24gZW5vdWdoLCBub3Qgb25seSBmb3IgaGlzIHNhZmV0eSwKICAgICAgIGJ1dCBldmVuIGZvciBoaXMgZGlnbml0eSBpZiB5b3UgcmVjb2xsZWN0IHRoYXQgaGUgaXMgdGhlIHNvbiBvZiBoaW0gd2hvIGhhcyBzYXZlZCBhbGwgdGhlc2UKICAgICAgIHRoaW5ncyBhdCBoaXMgb3duIHNpbmdsZSByaXNrLiA8L3RyYW5zbGF0aW9uPg=="
