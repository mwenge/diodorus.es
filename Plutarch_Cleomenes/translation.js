var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBzaGUgYmVnZ2VkIG1vc3QgZWFybmVzdGx5LCB3ZSBhcmUgdG9sZCwgdGhhdCBzaGUgc2hvdWxkIG5vdCBiZSBmb3JjZWQgaW50byB0aGlzIG1hcnJpYWdlLCBidXQgYWZ0ZXIgc2hlIHdhcyB1bml0ZWQgdG8gQ2xlb21lbmVzLCB0aG91Z2ggc2hlIGhhdGVkIExlb25pZGFzLCB0byB0aGUgeW91bmcgbWFuIGhpbXNlbGYgc2hlIHdhcyBhIGdvb2QgYW5kIGFmZmVjdGlvbmF0ZSB3aWZlLiBBbmQgaGUsIGFzIHNvb24gYXMgQWdpYXRpcyB3YXMgaGlzLCBiZWNhbWUgcGFzc2lvbmF0ZWx5IGZvbmQgb2YgaGVyLCBhbmQgaW4gYSB3YXkgc3ltcGF0aGl6ZWQgd2l0aCBoZXIgZGV2b3Rpb24gdG8gdGhlIG1lbW9yeSBvZiBBZ2lzLCBzbyB0aGF0IGhlIHdvdWxkIG9mdGVuIGFzayBoZXIgYWJvdXQgdGhlIGNhcmVlciBvZiBBZ2lzLCBhbmQgbGlzdGVuIGF0dGVudGl2ZWx5IGFzIHNoZSB0b2xkIG9mIHRoZSBwbGFucyBhbmQgcHVycG9zZXMgd2hpY2ggQWdpcyBoYWQgZm9ybWVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGJlc2lkZXMsIENsZW9tZW5lcyB3YXMgYXNwaXJpbmcgYW5kIG1hZ25hbmltb3VzLCBhbmQgbm8gbGVzcyBwcm9uZSBieSBuYXR1cmUgdGhhbiBBZ2lzIHRvIHNlbGYtcmVzdHJhaW50IGFuZCBzaW1wbGljaXR5LiBIZSBoYWQgbm90LCBob3dldmVyLCB0aGUgc2NydXB1bG91cyBhbmQgZ2VudGxlIG5hdHVyZSBmb3Igd2hpY2ggQWdpcyB3YXMgcmVtYXJrYWJsZSwgYW5kIGhpcyBuYXR1cmFsIGNvdXJhZ2Ugd2FzIGFsd2F5cyBnb2FkaW5nIGhpbSBvbiwgYXMgaXQgd2VyZSwgYW5kIGZpZXJjZWx5IGltcGVsbGluZyBoaW0gdG93YXJkcyB0aGF0IHdoaWNoIGluIGFueSBjYXNlIGFwcGVhcmVkIHRvIGJlIHRoZSBob25vdXJhYmxlIGNvdXJzZS4gSGUgdGhvdWdodCBpdCBhIG1vc3QgZXhjZWxsZW50IHRoaW5nIHRvIHJ1bGUgb3ZlciB3aWxsaW5nIHN1YmplY3RzLCBidXQgYSBnb29kIHRoaW5nIGFsc28gdG8gc3ViZHVlIHN1Y2ggc3ViamVjdHMgYXMgd2VyZSBkaXNvYmVkaWVudCwgYW5kIGZvcmNlIHRoZW0gdG93YXJkcyB0aGUgYmV0dGVyIGdvYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgYmVzaWRlcywgQ2xlb21lbmVzIHdhcyBhc3BpcmluZyBhbmQgbWFnbmFuaW1vdXMsIGFuZCBubyBsZXNzIHByb25lIGJ5IG5hdHVyZSB0aGFuIEFnaXMgdG8gc2VsZi1yZXN0cmFpbnQgYW5kIHNpbXBsaWNpdHkuIEhlIGhhZCBub3QsIGhvd2V2ZXIsIHRoZSBzY3J1cHVsb3VzIGFuZCBnZW50bGUgbmF0dXJlIGZvciB3aGljaCBBZ2lzIHdhcyByZW1hcmthYmxlLCBhbmQgaGlzIG5hdHVyYWwgY291cmFnZSB3YXMgYWx3YXlzIGdvYWRpbmcgaGltIG9uLCBhcyBpdCB3ZXJlLCBhbmQgZmllcmNlbHkgaW1wZWxsaW5nIGhpbSB0b3dhcmRzIHRoYXQgd2hpY2ggaW4gYW55IGNhc2UgYXBwZWFyZWQgdG8gYmUgdGhlIGhvbm91cmFibGUgY291cnNlLiBIZSB0aG91Z2h0IGl0IGEgbW9zdCBleGNlbGxlbnQgdGhpbmcgdG8gcnVsZSBvdmVyIHdpbGxpbmcgc3ViamVjdHMsIGJ1dCBhIGdvb2QgdGhpbmcgYWxzbyB0byBzdWJkdWUgc3VjaCBzdWJqZWN0cyBhcyB3ZXJlIGRpc29iZWRpZW50LCBhbmQgZm9yY2UgdGhlbSB0b3dhcmRzIHRoZSBiZXR0ZXIgZ29hbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UsIHRoZW4sIHRoZSBjb25kaXRpb24gb2YgdGhlIGNpdHkgd2FzIG5vdCBwbGVhc2luZyB0byBoaW0uIFRoZSBjaXRpemVucyBoYWQgYmVlbiBsdWxsZWQgdG8gc2xlZXAgYnkgaWRsZW5lc3MgYW5kIHBsZWFzdXJlOyB0aGUga2luZyB3YXMgd2lsbGluZyB0byBsZXQgYWxsIHB1YmxpYyBidXNpbmVzcyBnbywgcHJvdmlkZWQgdGhhdCBubyBvbmUgdGh3YXJ0ZWQgaGlzIGRlc2lyZSBmb3IgbHV4dXJpb3VzIGxpdmluZyBpbiB0aGUgbWlkc3Qgb2YgaGlzIHdlYWx0aDsgdGhlIHB1YmxpYyBpbnRlcmVzdHMgd2VyZSBuZWdsZWN0ZWQsIHdoaWxlIGV2ZXJ5IG1hbiB3YXMgZWFnZXJseSBpbnRlbnQgdXBvbiBoaXMgb3duIHByaXZhdGUgZ2FpbjsgYW5kIGFzIGZvciBwcmFjdGljZSBpbiBhcm1zLCBzZWxmLXJlc3RyYWludCBpbiB0aGUgeW91bmcsIGhhcmRpbmVzcywgYW5kIGVxdWFsaXR5LCBpdCB3YXMgZXZlbiBkYW5nZXJvdXMgdG8gc3BlYWsgb2YgdGhlc2Ugbm93IHRoYXQgQWdpcyB3YXMgZGVhZCBhbmQgZ29uZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UsIHRoZW4sIHRoZSBjb25kaXRpb24gb2YgdGhlIGNpdHkgd2FzIG5vdCBwbGVhc2luZyB0byBoaW0uIFRoZSBjaXRpemVucyBoYWQgYmVlbiBsdWxsZWQgdG8gc2xlZXAgYnkgaWRsZW5lc3MgYW5kIHBsZWFzdXJlOyB0aGUga2luZyB3YXMgd2lsbGluZyB0byBsZXQgYWxsIHB1YmxpYyBidXNpbmVzcyBnbywgcHJvdmlkZWQgdGhhdCBubyBvbmUgdGh3YXJ0ZWQgaGlzIGRlc2lyZSBmb3IgbHV4dXJpb3VzIGxpdmluZyBpbiB0aGUgbWlkc3Qgb2YgaGlzIHdlYWx0aDsgdGhlIHB1YmxpYyBpbnRlcmVzdHMgd2VyZSBuZWdsZWN0ZWQsIHdoaWxlIGV2ZXJ5IG1hbiB3YXMgZWFnZXJseSBpbnRlbnQgdXBvbiBoaXMgb3duIHByaXZhdGUgZ2FpbjsgYW5kIGFzIGZvciBwcmFjdGljZSBpbiBhcm1zLCBzZWxmLXJlc3RyYWludCBpbiB0aGUgeW91bmcsIGhhcmRpbmVzcywgYW5kIGVxdWFsaXR5LCBpdCB3YXMgZXZlbiBkYW5nZXJvdXMgdG8gc3BlYWsgb2YgdGhlc2Ugbm93IHRoYXQgQWdpcyB3YXMgZGVhZCBhbmQgZ29uZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCBhbHNvIHRoYXQgQ2xlb21lbmVzIHN0dWRpZWQgcGhpbG9zb3BoeSB3aGVuIGhlIHdhcyBzdGlsbCBhIHN0cmlwbGluZywgYWZ0ZXIgU3BoYWVydXMgb2YgQm9yeXN0aGVuaXMgaGFkIG1hZGUgYSB2b3lhZ2UgdG8gU3BhcnRhIGFuZCBidXNpZWQgaGltc2VsZiBzZWR1bG91c2x5IHRoZXJlIHdpdGggdGhlIHlvdXRoIGFuZCB5b3VuZyBtZW4uIFNwaGFlcnVzIGhhZCBiZWNvbWUgb25lIG9mIHRoZSBsZWFkaW5nIGRpc2NpcGxlcyBvZicgWmVubyBvZiBDaXRpdW0sIGFuZCBpdCB3b3VsZCBhcHBlYXIgdGhhdCBoZSBhZG1pcmVkIHRoZSBtYW5seSBuYXR1cmUgb2YgQ2xlb21lbmVzIGFuZCBpbmNyZWFzZWQgdGhlIGZpcmVzIG9mIGhpcyBoaWdoIGFtYml0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgTGVvbmlkYXMgb2Ygb2xkLCBhcyB3ZSBhcmUgdG9sZCwgd2hlbiBhc2tlZCB3aGF0IG1hbm5lciBvZiBwb2V0IGhlIHRob3VnaHQgVHlydGFldXMgdG8gYmUsIHJlcGxpZWQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSBnb29kIG9uZSB0byBpbmZsYW1lIHRoZSBzb3VscyBvZiB5b3VuZyBtZW4uPC9xPiBBbmQgaW5kZWVkIHRoZXkgd2VyZSBmaWxsZWQgd2l0aCBkaXZpbmUgaW5zcGlyYXRpb24gYnkgaGlzIHBvZW1zLCBhbmQgaW4gYmF0dGxlIHdlcmUgcHJvZGlnYWwgb2YgdGhlaXIgbGl2ZXMuIEhvd2V2ZXIsIGZvciBncmVhdCBhbmQgaW1wZXR1b3VzIG5hdHVyZXMgdGhlIFN0b2ljIGRvY3RyaW5lcyBhcmUgc29tZXdoYXQgbWlzbGVhZGluZyBhbmQgZGFuZ2Vyb3VzLCBhbHRob3VnaCB3aGVuIHRoZXkgcGVybWVhdGUgYSBkZWVwIGFuZCBnZW50bGUgY2hhcmFjdGVyLCB0aGV5IHJlZG91bmQgbW9zdCB0byBpdHMgcHJvcGVyIGdvb2QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgYWxzbyB0aGF0IENsZW9tZW5lcyBzdHVkaWVkIHBoaWxvc29waHkgd2hlbiBoZSB3YXMgc3RpbGwgYSBzdHJpcGxpbmcsIGFmdGVyIFNwaGFlcnVzIG9mIEJvcnlzdGhlbmlzIGhhZCBtYWRlIGEgdm95YWdlIHRvIFNwYXJ0YSBhbmQgYnVzaWVkIGhpbXNlbGYgc2VkdWxvdXNseSB0aGVyZSB3aXRoIHRoZSB5b3V0aCBhbmQgeW91bmcgbWVuLiBTcGhhZXJ1cyBoYWQgYmVjb21lIG9uZSBvZiB0aGUgbGVhZGluZyBkaXNjaXBsZXMgb2YnIFplbm8gb2YgQ2l0aXVtLCBhbmQgaXQgd291bGQgYXBwZWFyIHRoYXQgaGUgYWRtaXJlZCB0aGUgbWFubHkgbmF0dXJlIG9mIENsZW9tZW5lcyBhbmQgaW5jcmVhc2VkIHRoZSBmaXJlcyBvZiBoaXMgaGlnaCBhbWJpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBMZW9uaWRhcyBvZiBvbGQsIGFzIHdlIGFyZSB0b2xkLCB3aGVuIGFza2VkIHdoYXQgbWFubmVyIG9mIHBvZXQgaGUgdGhvdWdodCBUeXJ0YWV1cyB0byBiZSwgcmVwbGllZDsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgZ29vZCBvbmUgdG8gaW5mbGFtZSB0aGUgc291bHMgb2YgeW91bmcgbWVuLjwvcT4gQW5kIGluZGVlZCB0aGV5IHdlcmUgZmlsbGVkIHdpdGggZGl2aW5lIGluc3BpcmF0aW9uIGJ5IGhpcyBwb2VtcywgYW5kIGluIGJhdHRsZSB3ZXJlIHByb2RpZ2FsIG9mIHRoZWlyIGxpdmVzLiBIb3dldmVyLCBmb3IgZ3JlYXQgYW5kIGltcGV0dW91cyBuYXR1cmVzIHRoZSBTdG9pYyBkb2N0cmluZXMgYXJlIHNvbWV3aGF0IG1pc2xlYWRpbmcgYW5kIGRhbmdlcm91cywgYWx0aG91Z2ggd2hlbiB0aGV5IHBlcm1lYXRlIGEgZGVlcCBhbmQgZ2VudGxlIGNoYXJhY3RlciwgdGhleSByZWRvdW5kIG1vc3QgdG8gaXRzIHByb3BlciBnb29kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCB0aGUgZGVhdGggb2YgTGVvbmlkYXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMzUgQi5DLiBDbGVvbWVuZXMgd2FzIHRoZW4gYWJvdXQgdHdlbnR5LWZvdXIgeWVhcnMgb2YgYWdlLjwvbm90ZT4gQ2xlb21lbmVzIGNhbWUgdG8gdGhlIHRocm9uZSwgYW5kIHNhdyB0aGF0IHRoZSBjaXRpemVucyB3ZXJlIGJ5IHRoYXQgdGltZSBhbHRvZ2V0aGVyIGRlZ2VuZXJhdGUuIFRoZSByaWNoIG5lZ2xlY3RlZCB0aGUgY29tbW9uIGludGVyZXN0cyBmb3IgdGhlaXIgb3duIHByaXZhdGUgcGxlYXN1cmUgYW5kIGFnZ3JhbmRpemVtZW50OyB0aGUgY29tbW9uIHBlb3BsZSwgYmVjYXVzZSBvZiB0aGVpciB3cmV0Y2hlZCBzdGF0ZSBhdCBob21lLCBoYWQgbG9zdCBhbGwgcmVhZGluZXNzIGZvciB3YXIgYW5kIGFsbCBhbWJpdGlvbiB0byBtYWludGFpbiB0aGUgYW5jaWVudCBTcGFydGFuIGRpc2NpcGxpbmU7IGFuZCBoZSBoaW1zZWxmLCBDbGVvbWVuZXMsIHdhcyBraW5nIG9ubHkgaW4gbmFtZSwgd2hpbGUgdGhlIHdob2xlIHBvd2VyIHdhcyBpbiB0aGUgaGFuZHMgb2YgdGhlIGVwaG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdGhlcmVmb3JlIGF0IG9uY2UgZGV0ZXJtaW5lZCB0byBzdGlyIHVwIGFuZCBjaGFuZ2UgdGhlIGV4aXN0aW5nIG9yZGVyIG9mIHRoaW5ncywgYW5kIGFzIGhlIGhhZCBhIGZyaWVuZCwgWGVuYXJlcywgd2hvIGhhZCBiZWVuIGhpcyBsb3ZlciAob3IgPGVtcGg+aW5zcGlyZXI8L2VtcGg+LCBhcyB0aGUgU3BhcnRhbnMgc2F5KSwgaGUgd291bGQgbWFrZSB0cmlhbCBvZiBoaXMgc2VudGltZW50cyBieSBpbnF1aXJpbmcgaW4gZGV0YWlsIHdoYXQgc29ydCBvZiBhIGtpbmcgQWdpcyBoYWQgYmVlbiwgYW5kIGluIHdoYXQgd2F5IGFuZCB3aXRoIHdoYXQgYXNzaXN0YW50cyBoZSBoYWQgZW50ZXJlZCB1cG9uIHRoZSBjb3Vyc2Ugb2YgYWN0aW9uIHNvIGZhdGFsIHRvIGhpbS4gQXQgZmlyc3QgWGVuYXJlcyB3YXMgcXVpdGUgZ2xhZCB0byByZWNhbGwgdGhvc2UgbWF0dGVycywgYW5kIHJlaGVhcnNlZCB0aGUgZXZlbnRzIGF0IGxlbmd0aCBhbmQgaW4gZGV0YWlsOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiBpdCB3YXMgYXBwYXJlbnQgdGhhdCBDbGVvbWVuZXMgdG9vayBhbiB1bnVzdWFsIGludGVyZXN0IGluIHRoZSBzdG9yeSwgYW5kIHdhcyBwcm9mb3VuZGx5IHN0aXJyZWQgYnkgdGhlIGlubm92YXRpb25zIG9mIEFnaXMsIGFuZCB3aXNoZWQgdG8gaGVhciBhYm91dCBoaW0gb3ZlciBhbmQgb3ZlciBhZ2FpbiwgWGVuYXJlcyByZWJ1a2VkIGhpbSBhbmdyaWx5LCBjYWxsaW5nIGhpbSB1bnNvdW5kIGluIG1pbmQsIGFuZCBmaW5hbGx5IHN0b3BwZWQgdmlzaXRpbmcgYW5kIGNvbnZlcnNpbmcgd2l0aCBoaW0uIFRvIG5vIG9uZSwgaG93ZXZlciwgZGlkIGhlIHRlbGwgdGhlIHJlYXNvbiBvZiB0aGVpciB2YXJpYW5jZSwgYnV0IG1lcmVseSBzYWlkIHRoYXQgQ2xlb21lbmVzIHVuZGVyc3Rvb2QgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhlIGRlYXRoIG9mIExlb25pZGFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMzUgQi5DLiBDbGVvbWVuZXMgd2FzIHRoZW4gYWJvdXQgdHdlbnR5LWZvdXIgeWVhcnMgb2YgYWdlLjwvbm90ZT4gQ2xlb21lbmVzIGNhbWUgdG8gdGhlIHRocm9uZSwgYW5kIHNhdyB0aGF0IHRoZSBjaXRpemVucyB3ZXJlIGJ5IHRoYXQgdGltZSBhbHRvZ2V0aGVyIGRlZ2VuZXJhdGUuIFRoZSByaWNoIG5lZ2xlY3RlZCB0aGUgY29tbW9uIGludGVyZXN0cyBmb3IgdGhlaXIgb3duIHByaXZhdGUgcGxlYXN1cmUgYW5kIGFnZ3JhbmRpemVtZW50OyB0aGUgY29tbW9uIHBlb3BsZSwgYmVjYXVzZSBvZiB0aGVpciB3cmV0Y2hlZCBzdGF0ZSBhdCBob21lLCBoYWQgbG9zdCBhbGwgcmVhZGluZXNzIGZvciB3YXIgYW5kIGFsbCBhbWJpdGlvbiB0byBtYWludGFpbiB0aGUgYW5jaWVudCBTcGFydGFuIGRpc2NpcGxpbmU7IGFuZCBoZSBoaW1zZWxmLCBDbGVvbWVuZXMsIHdhcyBraW5nIG9ubHkgaW4gbmFtZSwgd2hpbGUgdGhlIHdob2xlIHBvd2VyIHdhcyBpbiB0aGUgaGFuZHMgb2YgdGhlIGVwaG9ycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBhdCBvbmNlIGRldGVybWluZWQgdG8gc3RpciB1cCBhbmQgY2hhbmdlIHRoZSBleGlzdGluZyBvcmRlciBvZiB0aGluZ3MsIGFuZCBhcyBoZSBoYWQgYSBmcmllbmQsIFhlbmFyZXMsIHdobyBoYWQgYmVlbiBoaXMgbG92ZXIgKG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aW5zcGlyZXI8L2VtcGg+LCBhcyB0aGUgU3BhcnRhbnMgc2F5KSwgaGUgd291bGQgbWFrZSB0cmlhbCBvZiBoaXMgc2VudGltZW50cyBieSBpbnF1aXJpbmcgaW4gZGV0YWlsIHdoYXQgc29ydCBvZiBhIGtpbmcgQWdpcyBoYWQgYmVlbiwgYW5kIGluIHdoYXQgd2F5IGFuZCB3aXRoIHdoYXQgYXNzaXN0YW50cyBoZSBoYWQgZW50ZXJlZCB1cG9uIHRoZSBjb3Vyc2Ugb2YgYWN0aW9uIHNvIGZhdGFsIHRvIGhpbS4gQXQgZmlyc3QgWGVuYXJlcyB3YXMgcXVpdGUgZ2xhZCB0byByZWNhbGwgdGhvc2UgbWF0dGVycywgYW5kIHJlaGVhcnNlZCB0aGUgZXZlbnRzIGF0IGxlbmd0aCBhbmQgaW4gZGV0YWlsOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIGl0IHdhcyBhcHBhcmVudCB0aGF0IENsZW9tZW5lcyB0b29rIGFuIHVudXN1YWwgaW50ZXJlc3QgaW4gdGhlIHN0b3J5LCBhbmQgd2FzIHByb2ZvdW5kbHkgc3RpcnJlZCBieSB0aGUgaW5ub3ZhdGlvbnMgb2YgQWdpcywgYW5kIHdpc2hlZCB0byBoZWFyIGFib3V0IGhpbSBvdmVyIGFuZCBvdmVyIGFnYWluLCBYZW5hcmVzIHJlYnVrZWQgaGltIGFuZ3JpbHksIGNhbGxpbmcgaGltIHVuc291bmQgaW4gbWluZCwgYW5kIGZpbmFsbHkgc3RvcHBlZCB2aXNpdGluZyBhbmQgY29udmVyc2luZyB3aXRoIGhpbS4gVG8gbm8gb25lLCBob3dldmVyLCBkaWQgaGUgdGVsbCB0aGUgcmVhc29uIG9mIHRoZWlyIHZhcmlhbmNlLCBidXQgbWVyZWx5IHNhaWQgdGhhdCBDbGVvbWVuZXMgdW5kZXJzdG9vZCBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIENsZW9tZW5lcywgZmluZGluZyBYZW5hcmVzIGF2ZXJzZSwgYW5kIHRoaW5raW5nIHRoYXQgZXZlcnlib2R5IGVsc2Ugd2FzIG9mIGxpa2UgbWluZCB3aXRoIGhpbSwgYmVnYW4gdG8gYXJyYW5nZSBoaXMgcHJvamVjdCBhbGwgYnkgaGltc2VsZi4gQW5kIGJlY2F1c2UgaGUgdGhvdWdodCB0aGF0IGhlIGNvdWxkIGJldHRlciBicmluZyBhYm91dCBoaXMgcmVmb3JtcyBpbiB0aW1lIG9mIHdhciB0aGFuIGluIHRoZSBtaWRzdCBvZiBwZWFjZSwgaGUgZW1icm9pbGVkIHRoZSBzdGF0ZSB3aXRoIHRoZSBBY2hhZWFucywgd2hvIHdlcmUgdGhlbXNlbHZlcyBnaXZpbmcgZ3JvdW5kcyBmb3IgY29tcGxhaW50LiBGb3IgQXJhdHVzLCB0aGUgbW9zdCBwb3dlcmZ1bCBtYW4gYW1vbmcgdGhlIEFjaGFlYW5zLCB3YXMgZnJvbSB0aGUgb3V0c2V0IGRlc2lyb3VzIG9mIGJyaW5naW5nIGFsbCB0aGUgUGVsb3Bvbm5lc2lhbnMgaW50byBvbmUgY29uZmVkZXJhdGlvbiwgYW5kIHRoaXMgd2FzIHRoZSBlbmQgcHVyc3VlZCBieSBoaW0gZHVyaW5nIGhpcyBtYW55IGdlbmVyYWxzaGlwcyBhbmQgaGlzIGxvbmcgcG9saXRpY2FsIGFjdGl2aXR5LCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5zaW5jZSBoZSB3YXMgb2YgdGhlIG9waW5pb24gdGhhdCBpbiB0aGlzIHdheSBhbG9uZSB3b3VsZCB0aGV5IGJlIHNhZmUgZnJvbSB0aGUgYXR0YWNrcyBvZiB0aGVpciBlbmVtaWVzIHdpdGhvdXQuIE5lYXJseSBhbGwgdGhlIG90aGVyIFBlbG9wb25uZXNpYW5zIGFkb3B0ZWQgaGlzIHZpZXdzLCBidXQgdGhlIExhY2VkYWVtb25pYW5zLCB0aGUgRWxlaWFucywgYW5kIHRoZSBBcmNhZGlhbnMgd2hvIHNpZGVkIHdpdGggdGhlIExhY2VkYWVtb25pYW5zIGhlbGQgYWxvb2YuIFRoZXJlZm9yZSwgYXMgc29vbiBhcyBMZW9uaWRhcyB3YXMgZGVhZCwgQXJhdHVzIGJlZ2FuIHRvIGhhcmFzcyB0aGUgQXJjYWRpYW5zLCBhbmQgcmF2YWdlZCB0aGUgdGVycml0b3JpZXMgb2YgdGhvc2UgZXNwZWNpYWxseSB3aG8gd2VyZSBhZGphY2VudCB0byBBY2hhZWEuIEhpcyBvYmplY3Qgd2FzIHRvIHB1dCB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gdGhlIHRlc3QsIGFuZCBoZSBkZXNwaXNlZCBDbGVvbWVuZXMgYXMgYSB5b3VuZyBhbmQgaW5leHBlcmllbmNlZCBtYW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBDbGVvbWVuZXMsIGZpbmRpbmcgWGVuYXJlcyBhdmVyc2UsIGFuZCB0aGlua2luZyB0aGF0IGV2ZXJ5Ym9keSBlbHNlIHdhcyBvZiBsaWtlIG1pbmQgd2l0aCBoaW0sIGJlZ2FuIHRvIGFycmFuZ2UgaGlzIHByb2plY3QgYWxsIGJ5IGhpbXNlbGYuIEFuZCBiZWNhdXNlIGhlIHRob3VnaHQgdGhhdCBoZSBjb3VsZCBiZXR0ZXIgYnJpbmcgYWJvdXQgaGlzIHJlZm9ybXMgaW4gdGltZSBvZiB3YXIgdGhhbiBpbiB0aGUgbWlkc3Qgb2YgcGVhY2UsIGhlIGVtYnJvaWxlZCB0aGUgc3RhdGUgd2l0aCB0aGUgQWNoYWVhbnMsIHdobyB3ZXJlIHRoZW1zZWx2ZXMgZ2l2aW5nIGdyb3VuZHMgZm9yIGNvbXBsYWludC4gRm9yIEFyYXR1cywgdGhlIG1vc3QgcG93ZXJmdWwgbWFuIGFtb25nIHRoZSBBY2hhZWFucywgd2FzIGZyb20gdGhlIG91dHNldCBkZXNpcm91cyBvZiBicmluZ2luZyBhbGwgdGhlIFBlbG9wb25uZXNpYW5zIGludG8gb25lIGNvbmZlZGVyYXRpb24sIGFuZCB0aGlzIHdhcyB0aGUgZW5kIHB1cnN1ZWQgYnkgaGltIGR1cmluZyBoaXMgbWFueSBnZW5lcmFsc2hpcHMgYW5kIGhpcyBsb25nIHBvbGl0aWNhbCBhY3Rpdml0eSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIGhlIHdhcyBvZiB0aGUgb3BpbmlvbiB0aGF0IGluIHRoaXMgd2F5IGFsb25lIHdvdWxkIHRoZXkgYmUgc2FmZSBmcm9tIHRoZSBhdHRhY2tzIG9mIHRoZWlyIGVuZW1pZXMgd2l0aG91dC4gTmVhcmx5IGFsbCB0aGUgb3RoZXIgUGVsb3Bvbm5lc2lhbnMgYWRvcHRlZCBoaXMgdmlld3MsIGJ1dCB0aGUgTGFjZWRhZW1vbmlhbnMsIHRoZSBFbGVpYW5zLCBhbmQgdGhlIEFyY2FkaWFucyB3aG8gc2lkZWQgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMgaGVsZCBhbG9vZi4gVGhlcmVmb3JlLCBhcyBzb29uIGFzIExlb25pZGFzIHdhcyBkZWFkLCBBcmF0dXMgYmVnYW4gdG8gaGFyYXNzIHRoZSBBcmNhZGlhbnMsIGFuZCByYXZhZ2VkIHRoZSB0ZXJyaXRvcmllcyBvZiB0aG9zZSBlc3BlY2lhbGx5IHdobyB3ZXJlIGFkamFjZW50IHRvIEFjaGFlYS4gSGlzIG9iamVjdCB3YXMgdG8gcHV0IHRoZSBMYWNlZGFlbW9uaWFucyB0byB0aGUgdGVzdCwgYW5kIGhlIGRlc3Bpc2VkIENsZW9tZW5lcyBhcyBhIHlvdW5nIGFuZCBpbmV4cGVyaWVuY2VkIG1hbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMsIHRoZSBlcGhvcnMgYmVnYW4gb3BlcmF0aW9ucyBieSBzZW5kaW5nIENsZW9tZW5lcyB0byBvY2N1cHkgdGhlIHByZWNpbmN0IG9mIEF0aGVuYSBhdCBCZWxiaW5hLiBUaGlzIGNvbW1hbmRzIGFuIGVudHJhbmNlIGludG8gTGFjb25pYSwgYW5kIHdhcyBhdCB0aGF0IHRpbWUgYSBzdWJqZWN0IG9mIGxpdGlnYXRpb24gd2l0aCB0aGUgTWVnYWxvcG9saXRhbnMuIEFmdGVyIENsZW9tZW5lcyBoYWQgb2NjdXBpZWQgYW5kIGZvcnRpZmllZCB0aGlzIHBsYWNlLCBBcmF0dXMgbWFkZSBubyBwdWJsaWMgcHJvdGVzdCwgYnV0IGxlZCBvdXQgaGlzIGZvcmNlcyBvbmUgbmlnaHQgYW5kIHRyaWVkIHRvIHN1cnByaXNlIFRlZ2VhIGFuZCBPcmNob21lbnVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gd2VyZSB0byBiZXRyYXkgdGhlIHBsYWNlcyB0byBoaW0sIGhvd2V2ZXIsIHBsYXllZCB0aGUgY293YXJkLCBhbmQgQXJhdHVzIHdpdGhkcmV3LCB0aGlua2luZyB0aGF0IGhpcyBhdHRlbXB0IGhhZCBlc2NhcGVkIG5vdGljZS4gQnV0IENsZW9tZW5lcyB3cm90ZSBoaW0gYW4gaXJvbmljYWwgbGV0dGVyLCBpbnF1aXJpbmcsIGFzIGZyb20gYSBmcmllbmQsIHdoaXRoZXIgaGUgaGFkIG1hcmNoZWQgb3V0IGluIHRoZSBuaWdodC4gQXJhdHVzIHdyb3RlIGJhY2sgdGhhdCBoZWFyaW5nIG9mIENsZW9tZW5lcycgaW50ZW50aW9uIHRvIGZvcnRpZnkgQmVsYmluYSBoZSBoYWQgZ29uZSBkb3duIHRoZXJlIHRvIHByZXZlbnQgaXQuIFdoZXJldXBvbiBDbGVvbWVuZXMgc2VudCBiYWNrIHdvcmQgYWdhaW4gdGhhdCBoZSBiZWxpZXZlZCB0aGlzIHN0b3J5IHRvIGJlIHRydWU7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHRob3NlIHRvcmNoZXMgYW5kIGxhZGRlcnMsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIGl0IGlzIGFsbCBvbmUgdG8gdGhlZSwgdGVsbCBtZSBmb3Igd2hhdCBwdXJwb3NlIHRob3UgaGFkc3QgdGhlbSB3aXRoIHRoZWUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBidXJzdCBvdXQgbGF1Z2hpbmcgYXQgdGhlIGplc3QsIGFuZCBpbnF1aXJlZCB3aGF0IG1hbm5lciBvZiB5b3V0aCB0aGlzIHdhcy4gV2hlcmV1cG9uIERhbW9jcmF0ZXMsIHRoZSBMYWNlZGFlbW9uaWFuIGV4aWxlLCByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgaGFzdCBkZXNpZ25zIHVwb24gdGhlIExhY2VkYWVtb25pYW5zLCBzZWUgdGhhdCB0aG91IGhhc3RlbmVzdCwgYmVmb3JlIHRoaXMgeW91bmcgY29jayBncm93cyBoaXMgc3B1cnMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMsIHRoZSBlcGhvcnMgYmVnYW4gb3BlcmF0aW9ucyBieSBzZW5kaW5nIENsZW9tZW5lcyB0byBvY2N1cHkgdGhlIHByZWNpbmN0IG9mIEF0aGVuYSBhdCBCZWxiaW5hLiBUaGlzIGNvbW1hbmRzIGFuIGVudHJhbmNlIGludG8gTGFjb25pYSwgYW5kIHdhcyBhdCB0aGF0IHRpbWUgYSBzdWJqZWN0IG9mIGxpdGlnYXRpb24gd2l0aCB0aGUgTWVnYWxvcG9saXRhbnMuIEFmdGVyIENsZW9tZW5lcyBoYWQgb2NjdXBpZWQgYW5kIGZvcnRpZmllZCB0aGlzIHBsYWNlLCBBcmF0dXMgbWFkZSBubyBwdWJsaWMgcHJvdGVzdCwgYnV0IGxlZCBvdXQgaGlzIGZvcmNlcyBvbmUgbmlnaHQgYW5kIHRyaWVkIHRvIHN1cnByaXNlIFRlZ2VhIGFuZCBPcmNob21lbnVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyB3ZXJlIHRvIGJldHJheSB0aGUgcGxhY2VzIHRvIGhpbSwgaG93ZXZlciwgcGxheWVkIHRoZSBjb3dhcmQsIGFuZCBBcmF0dXMgd2l0aGRyZXcsIHRoaW5raW5nIHRoYXQgaGlzIGF0dGVtcHQgaGFkIGVzY2FwZWQgbm90aWNlLiBCdXQgQ2xlb21lbmVzIHdyb3RlIGhpbSBhbiBpcm9uaWNhbCBsZXR0ZXIsIGlucXVpcmluZywgYXMgZnJvbSBhIGZyaWVuZCwgd2hpdGhlciBoZSBoYWQgbWFyY2hlZCBvdXQgaW4gdGhlIG5pZ2h0LiBBcmF0dXMgd3JvdGUgYmFjayB0aGF0IGhlYXJpbmcgb2YgQ2xlb21lbmVzJyBpbnRlbnRpb24gdG8gZm9ydGlmeSBCZWxiaW5hIGhlIGhhZCBnb25lIGRvd24gdGhlcmUgdG8gcHJldmVudCBpdC4gV2hlcmV1cG9uIENsZW9tZW5lcyBzZW50IGJhY2sgd29yZCBhZ2FpbiB0aGF0IGhlIGJlbGlldmVkIHRoaXMgc3RvcnkgdG8gYmUgdHJ1ZTsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCB0aG9zZSB0b3JjaGVzIGFuZCBsYWRkZXJzLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIGl0IGlzIGFsbCBvbmUgdG8gdGhlZSwgdGVsbCBtZSBmb3Igd2hhdCBwdXJwb3NlIHRob3UgaGFkc3QgdGhlbSB3aXRoIHRoZWUuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBidXJzdCBvdXQgbGF1Z2hpbmcgYXQgdGhlIGplc3QsIGFuZCBpbnF1aXJlZCB3aGF0IG1hbm5lciBvZiB5b3V0aCB0aGlzIHdhcy4gV2hlcmV1cG9uIERhbW9jcmF0ZXMsIHRoZSBMYWNlZGFlbW9uaWFuIGV4aWxlLCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgdGhvdSBoYXN0IGRlc2lnbnMgdXBvbiB0aGUgTGFjZWRhZW1vbmlhbnMsIHNlZSB0aGF0IHRob3UgaGFzdGVuZXN0LCBiZWZvcmUgdGhpcyB5b3VuZyBjb2NrIGdyb3dzIGhpcyBzcHVycy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWZ0ZXIgdGhpcywgd2hlbiBDbGVvbWVuZXMgd2l0aCBhIGZldyBob3JzZW1lbiBhbmQgdGhyZWUgaHVuZHJlZCBmb290LXNvbGRpZXJzIHdhcyBtYWtpbmcgYW4gZXhwZWRpdGlvbiBpbiBBcmNhZGlhLCB0aGUgZXBob3JzLCBmZWFyaW5nIHRoZSBpc3N1ZSBvZiB0aGUgd2FyLCBvcmRlcmVkIGhpbSB0byBjb21lIGJhY2sgaG9tZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgcmV0dXJuZWQsIGhvd2V2ZXIsIEFyYXR1cyBzZWl6ZWQgQ2FwaHlhZSwgYW5kIHRoZSBlcGhvcnMgc2VudCBDbGVvbWVuZXMgZm9ydGggYWdhaW4uIEhlIHNlaXplZCBNZXRoeWRyaXVtIGFuZCBvdmVycmFuIHRoZSB0ZXJyaXRvcnkgb2YgQXJnb2xpcywgd2hlcmV1cG9uIHRoZSBBY2hhZWFucyBtYXJjaGVkIG91dCB3aXRoIHR3ZW50eSB0aG91c2FuZCBmb290LXNvbGRpZXJzIGFuZCBhIHRob3VzYW5kIGhvcnNlbWVuIHVuZGVyIEFyaXN0b21hY2h1cyBhcyBnZW5lcmFsLiBDbGVvbWVuZXMgbWV0IHRoZW0gYXQgUGFsbGFudGl1bSBhbmQgb2ZmZXJlZCBiYXR0bGUsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBcmF0dXMsIGluIGZlYXIgb2YgdGhpcyBib2xkbmVzcywgd291bGQgbm90IHN1ZmZlciBoaXMgZ2VuZXJhbCB0byBoYXphcmQgdGhlIGlzc3VlLCBhbmQgcmV0aXJlZC4gRm9yIHRoaXMgaGUgd2FzIHJlcHJvYWNoZWQgYnkgdGhlIEFjaGFlYW5zLCBhbmQgamVlcmVkIGF0IGFuZCBkZXNwaXNlZCBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyB3ZXJlIGxlc3MgdGhhbiBmaXZlIHRob3VzYW5kIHN0cm9uZy4gQ2xlb21lbmVzIHdhcyB0aGVyZWZvcmUgZ3JlYXRseSBsaWZ0ZWQgdXAgaW4gc3Bpcml0IGFuZCBiZWdhbiB0byBzaG93IGEgaG9sZCBmcm9udCB0byB0aGUgY2l0aXplbnM7IGFuZCBoZSB3b3VsZCBvZnRlbiByZW1pbmQgdGhlbSBvZiBvbmUgb2YgdGhlaXIgYW5jaWVudCBraW5nczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFnaXMgSUkuICg0MjctMzk4IEIuQy4pOyBjZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE5MGMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TW9yYWxzPC90aXRsZT4sIHBwLiAxOTBjPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gMjE1ZCI+MjE1ZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hvIHNhaWQsIGFuZCBub3QgaWRseSBlaXRoZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIExhY2VkYWVtb25pYW5zIGFyZSB3b250IHRvIGFzaywgbm90IGhvdyBtYW55LCBidXQgd2hlcmUsIHRoZWlyIGVuZW1pZXMgYXJlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCByZXR1cm5lZCwgaG93ZXZlciwgQXJhdHVzIHNlaXplZCBDYXBoeWFlLCBhbmQgdGhlIGVwaG9ycyBzZW50IENsZW9tZW5lcyBmb3J0aCBhZ2Fpbi4gSGUgc2VpemVkIE1ldGh5ZHJpdW0gYW5kIG92ZXJyYW4gdGhlIHRlcnJpdG9yeSBvZiBBcmdvbGlzLCB3aGVyZXVwb24gdGhlIEFjaGFlYW5zIG1hcmNoZWQgb3V0IHdpdGggdHdlbnR5IHRob3VzYW5kIGZvb3Qtc29sZGllcnMgYW5kIGEgdGhvdXNhbmQgaG9yc2VtZW4gdW5kZXIgQXJpc3RvbWFjaHVzIGFzIGdlbmVyYWwuIENsZW9tZW5lcyBtZXQgdGhlbSBhdCBQYWxsYW50aXVtIGFuZCBvZmZlcmVkIGJhdHRsZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBcmF0dXMsIGluIGZlYXIgb2YgdGhpcyBib2xkbmVzcywgd291bGQgbm90IHN1ZmZlciBoaXMgZ2VuZXJhbCB0byBoYXphcmQgdGhlIGlzc3VlLCBhbmQgcmV0aXJlZC4gRm9yIHRoaXMgaGUgd2FzIHJlcHJvYWNoZWQgYnkgdGhlIEFjaGFlYW5zLCBhbmQgamVlcmVkIGF0IGFuZCBkZXNwaXNlZCBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyB3ZXJlIGxlc3MgdGhhbiBmaXZlIHRob3VzYW5kIHN0cm9uZy4gQ2xlb21lbmVzIHdhcyB0aGVyZWZvcmUgZ3JlYXRseSBsaWZ0ZWQgdXAgaW4gc3Bpcml0IGFuZCBiZWdhbiB0byBzaG93IGEgaG9sZCBmcm9udCB0byB0aGUgY2l0aXplbnM7IGFuZCBoZSB3b3VsZCBvZnRlbiByZW1pbmQgdGhlbSBvZiBvbmUgb2YgdGhlaXIgYW5jaWVudCBraW5nczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWdpcyBJSS4gKDQyNy0zOTggQi5DLik7IGNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAxOTBjIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHBwLiAxOTBjPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyMTVkIj4yMTVkLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aG8gc2FpZCwgYW5kIG5vdCBpZGx5IGVpdGhlciwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDE5MGMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcHAuIDE5MGM8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcHAuIDE5MGM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDIxNWQiPjIxNWQuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBMYWNlZGFlbW9uaWFucyBhcmUgd29udCB0byBhc2ssIG5vdCBob3cgbWFueSwgYnV0IHdoZXJlLCB0aGVpciBlbmVtaWVzIGFyZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgd2VudCB0byB0aGUgYWlkIG9mIHRoZSBFbGVpYW5zLCB1cG9uIHdob20gdGhlIEFjaGFlYW5zIHdlcmUgbWFraW5nIHdhciwgYW5kIGZhbGxpbmcgdXBvbiB0aGUgQWNoYWVhbnMgbmVhciBNdC4gTHljYWV1bSwgYXMgdGhleSB3ZXJlIHdpdGhkcmF3aW5nLCBoZSBwdXQgdGhlaXIgZW50aXJlIGFybXkgdG8gcGFuaWMgZmxpZ2h0LCBzbGV3IGdyZWF0IG51bWJlcnMgb2YgdGhlbSwgYW5kIHRvb2sgbWFueSBwcmlzb25lcnMsIHNvIHRoYXQgZXZlbiBBcmF0dXMgd2FzIHdpZGVseSByZXBvcnRlZCBhbW9uZyB0aGUgR3JlZWtzIHRvIGJlIGRlYWQuIEJ1dCBBcmF0dXMsIG1ha2luZyB0aGUgYmVzdCB1c2Ugb2YgaGlzIG9wcG9ydHVuaXR5LCBpbW1lZGlhdGVseSBhZnRlciB0aGlzIGRlZmVhdCBtYXJjaGVkIHRvIE1hbnRpbmVpYSwgYW5kIHRvIGV2ZXJ5Ym9keSdzIHN1cnByaXNlIGNhcHR1cmVkIGFuZCBoZWxkIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGFsdG9nZXRoZXIgZGlzaGVhcnRlbmVkIGFuZCBvcHBvc2VkIGFueSBmdXJ0aGVyIGV4cGVkaXRpb24gb24gdGhlIHBhcnQgb2YgQ2xlb21lbmVzLiBIZSB0aGVyZWZvcmUgZGV0ZXJtaW5lZCB0byBzdW1tb24gZnJvbSBNZXNzZW5lIHRoZSBicm90aGVyIG9mIEFnaXMsIEFyY2hpZGFtdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgdGhlIHJpZ2h0ZnVsIGtpbmcgZnJvbSB0aGUgb3RoZXIgcm95YWwgaG91c2UsIHRoaW5raW5nIHRoYXQgdGhlIHBvd2VyIG9mIHRoZSBlcGhvcnMgd291bGQgYmUgZGltaW5pc2hlZCBpZiB0aGUgcm95YWwgcG93ZXIgd2VyZSByZXN0b3JlZCB0byBpdHMgZnVsbCBzdHJlbmd0aCBzbyBhcyB0byBjb3VudGVyYmFsYW5jZSBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3NlIHdobyBoYWQgZm9ybWVybHkgbXVyZGVyZWQgQWdpcyBjb21wcmVoZW5kZWQgdGhpcyBkZXNpZ24sIGFuZCBmZWFyaW5nIHRoYXQgdGhleSB3b3VsZCBwYXkgdGhlIHBlbmFsdHkgZm9yIHRoZWlyIGNyaW1lIGlmIEFyY2hpZGFtdXMgd2FzIHJlc3RvcmVkLCB0aGV5IGRpZCBpbmRlZWQgcmVjZWl2ZSBoaW0gd2hlbiBoZSBjYW1lIHNlY3JldGx5IGludG8gdGhlIGNpdHksIGFuZCBhc3Npc3RlZCBpbiBoaXMgcmVzdG9yYXRpb24sIGJ1dCBpbW1lZGlhdGVseSBwdXQgaGltIHRvIGRlYXRoLiBDbGVvbWVuZXMgbWF5IGhhdmUgYmVlbiBvcHBvc2VkIHRvIHRoaXMsIGFzIFBoeWxhcmNodXMgdGhpbmtzLCBvciBwZXJoYXBzIGhlIHdhcyBwZXJzdWFkZWQgYnkgaGlzIGZyaWVuZHMgdG8gYWJhbmRvbiB0aGUgaGFwbGVzcyBtYW4gdG8gaGlzIG11cmRlcmVycy4gRm9yIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGJsYW1lIGF0dGFjaGVkIGl0c2VsZiB0byB0aGVtLCBzaW5jZSB0aGV5IHdlcmUgdGhvdWdodCB0byBoYXZlIGNvbnN0cmFpbmVkIENsZW9tZW5lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBoZSB3ZW50IHRvIHRoZSBhaWQgb2YgdGhlIEVsZWlhbnMsIHVwb24gd2hvbSB0aGUgQWNoYWVhbnMgd2VyZSBtYWtpbmcgd2FyLCBhbmQgZmFsbGluZyB1cG9uIHRoZSBBY2hhZWFucyBuZWFyIE10LiBMeWNhZXVtLCBhcyB0aGV5IHdlcmUgd2l0aGRyYXdpbmcsIGhlIHB1dCB0aGVpciBlbnRpcmUgYXJteSB0byBwYW5pYyBmbGlnaHQsIHNsZXcgZ3JlYXQgbnVtYmVycyBvZiB0aGVtLCBhbmQgdG9vayBtYW55IHByaXNvbmVycywgc28gdGhhdCBldmVuIEFyYXR1cyB3YXMgd2lkZWx5IHJlcG9ydGVkIGFtb25nIHRoZSBHcmVla3MgdG8gYmUgZGVhZC4gQnV0IEFyYXR1cywgbWFraW5nIHRoZSBiZXN0IHVzZSBvZiBoaXMgb3Bwb3J0dW5pdHksIGltbWVkaWF0ZWx5IGFmdGVyIHRoaXMgZGVmZWF0IG1hcmNoZWQgdG8gTWFudGluZWlhLCBhbmQgdG8gZXZlcnlib2R5J3Mgc3VycHJpc2UgY2FwdHVyZWQgYW5kIGhlbGQgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgYWx0b2dldGhlciBkaXNoZWFydGVuZWQgYW5kIG9wcG9zZWQgYW55IGZ1cnRoZXIgZXhwZWRpdGlvbiBvbiB0aGUgcGFydCBvZiBDbGVvbWVuZXMuIEhlIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIHN1bW1vbiBmcm9tIE1lc3NlbmUgdGhlIGJyb3RoZXIgb2YgQWdpcywgQXJjaGlkYW11cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyB3YXMgdGhlIHJpZ2h0ZnVsIGtpbmcgZnJvbSB0aGUgb3RoZXIgcm95YWwgaG91c2UsIHRoaW5raW5nIHRoYXQgdGhlIHBvd2VyIG9mIHRoZSBlcGhvcnMgd291bGQgYmUgZGltaW5pc2hlZCBpZiB0aGUgcm95YWwgcG93ZXIgd2VyZSByZXN0b3JlZCB0byBpdHMgZnVsbCBzdHJlbmd0aCBzbyBhcyB0byBjb3VudGVyYmFsYW5jZSBpdC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gaGFkIGZvcm1lcmx5IG11cmRlcmVkIEFnaXMgY29tcHJlaGVuZGVkIHRoaXMgZGVzaWduLCBhbmQgZmVhcmluZyB0aGF0IHRoZXkgd291bGQgcGF5IHRoZSBwZW5hbHR5IGZvciB0aGVpciBjcmltZSBpZiBBcmNoaWRhbXVzIHdhcyByZXN0b3JlZCwgdGhleSBkaWQgaW5kZWVkIHJlY2VpdmUgaGltIHdoZW4gaGUgY2FtZSBzZWNyZXRseSBpbnRvIHRoZSBjaXR5LCBhbmQgYXNzaXN0ZWQgaW4gaGlzIHJlc3RvcmF0aW9uLCBidXQgaW1tZWRpYXRlbHkgcHV0IGhpbSB0byBkZWF0aC4gQ2xlb21lbmVzIG1heSBoYXZlIGJlZW4gb3Bwb3NlZCB0byB0aGlzLCBhcyBQaHlsYXJjaHVzIHRoaW5rcywgb3IgcGVyaGFwcyBoZSB3YXMgcGVyc3VhZGVkIGJ5IGhpcyBmcmllbmRzIHRvIGFiYW5kb24gdGhlIGhhcGxlc3MgbWFuIHRvIGhpcyBtdXJkZXJlcnMuIEZvciB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBibGFtZSBhdHRhY2hlZCBpdHNlbGYgdG8gdGhlbSwgc2luY2UgdGhleSB3ZXJlIHRob3VnaHQgdG8gaGF2ZSBjb25zdHJhaW5lZCBDbGVvbWVuZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGF2aW5nIGRldGVybWluZWQgdG8gYXR0ZW1wdCBhdCBvbmNlIGhpcyByZWZvcm1zIGluIHRoZSBzdGF0ZSwgQ2xlb21lbmVzIGJyaWJlZCB0aGUgZXBob3JzIHRvIHNlbmQgaGltIG9uIGFuIGV4cGVkaXRpb24uIEhlIGFsc28gd29uIHRoZSBmYXZvdXIgb2YgbGFyZ2UgbnVtYmVycyBvZiB0aGUgY2l0aXplbnMgd2l0aCB0aGUgaGVscCBvZiBoaXMgbW90aGVyIENyYXRlc2ljbGVpYSwgd2hvIGFzc2lzdGVkIGhpbSBsaWJlcmFsbHkgaW4gcHJvdmlkaW5nIHdheXMgYW5kIG1lYW5zLCBhbmQgc2hhcmVkIGhpcyBhbWJpdGlvbnMuIEl0IGlzIGV2ZW4gc2FpZCB0aGF0IGFsdGhvdWdoIHNoZSBoYWQgbm8gZGVzaXJlIHRvIG1hcnJ5IGFnYWluLCBmb3IgdGhlIHNha2Ugb2YgaGVyIHNvbiBzaGUgdG9vayBhIGh1c2JhbmQgd2hvIHdhcyBmb3JlbW9zdCBhbW9uZyB0aGUgY2l0aXplbnMgaW4gcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBDbGVvbWVuZXMgbGVkIGZvcnRoIGhpcyBmb3JjZXMgYW5kIG9jY3VwaWVkIExldWN0cmEsIGEgc3Ryb25naG9sZCBvZiBNZWdhbG9wb2xpcy4gVGhlIEFjaGFlYW5zLCB1bmRlciB0aGUgY29tbWFuZCBvZiBBcmF0dXMsIGNhbWUgc3dpZnRseSB0byB0aGUgYWlkIG9mIHRoZWlyIGFsbGllcyBhZ2FpbnN0IGhpbSwgYW5kIENsZW9tZW5lcywgYWZ0ZXIgZHJhd2luZyB1cCBoaXMgZm9yY2VzIHVuZGVyIHRoZSB2ZXJ5IHdhbGxzIG9mIHRoZSBjaXR5LCB3YXMgd29yc3RlZCBhdCBvbmUgcG9pbnQuIEJ1dCBBcmF0dXMgd291bGQgbm90IHBlcm1pdCB0aGUgQWNoYWVhbnMgdG8gY3Jvc3MgYSBjZXJ0YWluIGRlZXAgcmF2aW5lLCBhbmQgYnJvdWdodCBoaXMgcHVyc3VpdCB0byBhIHN0b3AuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx5ZGlhZGFzIHRoZSBNZWdhbG9wb2xpdGFuLCBob3dldmVyLCBjaGFmaW5nIGF0IHRoaXMsIGRhc2hlZCBvbiB3aXRoIHRoZSBob3JzZW1lbiB1bmRlciBoaXMgY29tbWFuZCwgYW5kIHB1cnN1aW5nIHRoZSBlbmVteSBpbnRvIGEgcGxhY2UgZnVsbCBvZiB2aW5lcywgZGl0Y2hlcywgYW5kIHdhbGxzLCBoYWQgaGlzIHJhbmtzIGJyb2tlbiBhbmQgdGhyb3duIGludG8gZGlzb3JkZXIgdGhlcmVieSwgYW5kIGJlZ2FuIHRvIGZhbGwgaW50byBkaWZmaWN1bHRpZXMuIENsZW9tZW5lcywgb2JzZXJ2aW5nIHRoaXMsIHNlbnQgYWdhaW5zdCBoaW0gaGlzIFRhcmVudGluZXMgYW5kIENyZXRhbnMsIGF0IHdob3NlIGhhbmRzIEx5ZGlhZGFzLCBkZWZlbmRpbmcgaGltc2VsZiBzdHVyZGlseSwgZmVsbC4gQXQgdGhpcyB0aGUgTGFjZWRhZW1vbmlhbnMgdG9vayBjb3VyYWdlIGFuZCB3aXRoIGEgc2hvdXQgZmVsbCB1cG9uIHRoZSBBY2hhZWFucyBhbmQgcm91dGVkIHRoZWlyIGVudGlyZSBhcm15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5HcmVhdCBudW1iZXJzIG9mIHRoZW0gd2VyZSBzbGFpbiwgYW5kIHRoZWlyIGJvZGllcyBDbGVvbWVuZXMgcmVzdG9yZWQgYXQgdGhlIGVuZW15J3MgcmVxdWVzdDsgYnV0IHRoZSBib2R5IG9mIEx5ZGlhZGFzIGhlIGFza2VkIHRvIGhhdmUgYnJvdWdodCB0byBoaW0sIGFycmF5ZWQgaXQgaW4gYSBwdXJwbGUgcm9iZSBhbmQgcHV0IGEgY3Jvd24gdXBvbiB0aGUgaGVhZCwgYW5kIHRoZW4gc2VudCBpdCBiYWNrIHRvIHRoZSBnYXRlcyBvZiBNZWdhbG9wb2xpcy4gVGhpcyB3YXMgdGhlIEx5ZGlhZGFzIHdobyByZW5vdW5jZWQgdGhlIHR5cmFubnksIGdhdmUgYmFjayB0byB0aGUgY2l0aXplbnMgdGhlaXIgZnJlZWRvbSwgYW5kIGF0dGFjaGVkIHRoZSBjaXR5IHRvIHRoZSBBY2hhZWFuIGxlYWd1ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoYXZpbmcgZGV0ZXJtaW5lZCB0byBhdHRlbXB0IGF0IG9uY2UgaGlzIHJlZm9ybXMgaW4gdGhlIHN0YXRlLCBDbGVvbWVuZXMgYnJpYmVkIHRoZSBlcGhvcnMgdG8gc2VuZCBoaW0gb24gYW4gZXhwZWRpdGlvbi4gSGUgYWxzbyB3b24gdGhlIGZhdm91ciBvZiBsYXJnZSBudW1iZXJzIG9mIHRoZSBjaXRpemVucyB3aXRoIHRoZSBoZWxwIG9mIGhpcyBtb3RoZXIgQ3JhdGVzaWNsZWlhLCB3aG8gYXNzaXN0ZWQgaGltIGxpYmVyYWxseSBpbiBwcm92aWRpbmcgd2F5cyBhbmQgbWVhbnMsIGFuZCBzaGFyZWQgaGlzIGFtYml0aW9ucy4gSXQgaXMgZXZlbiBzYWlkIHRoYXQgYWx0aG91Z2ggc2hlIGhhZCBubyBkZXNpcmUgdG8gbWFycnkgYWdhaW4sIGZvciB0aGUgc2FrZSBvZiBoZXIgc29uIHNoZSB0b29rIGEgaHVzYmFuZCB3aG8gd2FzIGZvcmVtb3N0IGFtb25nIHRoZSBjaXRpemVucyBpbiByZXB1dGF0aW9uIGFuZCBpbmZsdWVuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIENsZW9tZW5lcyBsZWQgZm9ydGggaGlzIGZvcmNlcyBhbmQgb2NjdXBpZWQgTGV1Y3RyYSwgYSBzdHJvbmdob2xkIG9mIE1lZ2Fsb3BvbGlzLiBUaGUgQWNoYWVhbnMsIHVuZGVyIHRoZSBjb21tYW5kIG9mIEFyYXR1cywgY2FtZSBzd2lmdGx5IHRvIHRoZSBhaWQgb2YgdGhlaXIgYWxsaWVzIGFnYWluc3QgaGltLCBhbmQgQ2xlb21lbmVzLCBhZnRlciBkcmF3aW5nIHVwIGhpcyBmb3JjZXMgdW5kZXIgdGhlIHZlcnkgd2FsbHMgb2YgdGhlIGNpdHksIHdhcyB3b3JzdGVkIGF0IG9uZSBwb2ludC4gQnV0IEFyYXR1cyB3b3VsZCBub3QgcGVybWl0IHRoZSBBY2hhZWFucyB0byBjcm9zcyBhIGNlcnRhaW4gZGVlcCByYXZpbmUsIGFuZCBicm91Z2h0IGhpcyBwdXJzdWl0IHRvIGEgc3RvcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx5ZGlhZGFzIHRoZSBNZWdhbG9wb2xpdGFuLCBob3dldmVyLCBjaGFmaW5nIGF0IHRoaXMsIGRhc2hlZCBvbiB3aXRoIHRoZSBob3JzZW1lbiB1bmRlciBoaXMgY29tbWFuZCwgYW5kIHB1cnN1aW5nIHRoZSBlbmVteSBpbnRvIGEgcGxhY2UgZnVsbCBvZiB2aW5lcywgZGl0Y2hlcywgYW5kIHdhbGxzLCBoYWQgaGlzIHJhbmtzIGJyb2tlbiBhbmQgdGhyb3duIGludG8gZGlzb3JkZXIgdGhlcmVieSwgYW5kIGJlZ2FuIHRvIGZhbGwgaW50byBkaWZmaWN1bHRpZXMuIENsZW9tZW5lcywgb2JzZXJ2aW5nIHRoaXMsIHNlbnQgYWdhaW5zdCBoaW0gaGlzIFRhcmVudGluZXMgYW5kIENyZXRhbnMsIGF0IHdob3NlIGhhbmRzIEx5ZGlhZGFzLCBkZWZlbmRpbmcgaGltc2VsZiBzdHVyZGlseSwgZmVsbC4gQXQgdGhpcyB0aGUgTGFjZWRhZW1vbmlhbnMgdG9vayBjb3VyYWdlIGFuZCB3aXRoIGEgc2hvdXQgZmVsbCB1cG9uIHRoZSBBY2hhZWFucyBhbmQgcm91dGVkIHRoZWlyIGVudGlyZSBhcm15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkdyZWF0IG51bWJlcnMgb2YgdGhlbSB3ZXJlIHNsYWluLCBhbmQgdGhlaXIgYm9kaWVzIENsZW9tZW5lcyByZXN0b3JlZCBhdCB0aGUgZW5lbXkncyByZXF1ZXN0OyBidXQgdGhlIGJvZHkgb2YgTHlkaWFkYXMgaGUgYXNrZWQgdG8gaGF2ZSBicm91Z2h0IHRvIGhpbSwgYXJyYXllZCBpdCBpbiBhIHB1cnBsZSByb2JlIGFuZCBwdXQgYSBjcm93biB1cG9uIHRoZSBoZWFkLCBhbmQgdGhlbiBzZW50IGl0IGJhY2sgdG8gdGhlIGdhdGVzIG9mIE1lZ2Fsb3BvbGlzLiBUaGlzIHdhcyB0aGUgTHlkaWFkYXMgd2hvIHJlbm91bmNlZCB0aGUgdHlyYW5ueSwgZ2F2ZSBiYWNrIHRvIHRoZSBjaXRpemVucyB0aGVpciBmcmVlZG9tLCBhbmQgYXR0YWNoZWQgdGhlIGNpdHkgdG8gdGhlIEFjaGFlYW4gbGVhZ3VlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIENsZW9tZW5lcywgYmVpbmcgbm93IGdyZWF0bHkgZWxhdGVkLCBhbmQgcGVyc3VhZGVkIHRoYXQgaWYgaGUgY291bGQga2VlcCB0aGUgY29udHJvbCBvZiB0aGluZ3MgZW50aXJlbHkgaW4gaGlzIG93biBoYW5kcyBkdXJpbmcgdGhlIHdhciB3aXRoIHRoZSBBY2hhZWFucywgaGUgd291bGQgZWFzaWx5IG9idGFpbiB0aGUgbWFzdGVyeSwgYmVnYW4gdG8gaW5zdHJ1Y3QgaGlzIG1vdGhlcidzIGh1c2JhbmQsIE1lZ2lzdG9ub8O8cywgdGhhdCB0aGV5IG11c3QgbmVlZHMgZ2V0IHJpZCBvZiB0aGUgZXBob3JzLCBwdXQgdGhlIHByb3BlcnR5IG9mIHRoZSBjaXRpemVucyBpbnRvIGEgY29tbW9uIHN0b2NrLCBhbmQgcm91c2UgYW5kIGluY2l0ZSB0aGUgU3BhcnRhbnMsIHRodXMgcHV0IHVwb24gdGhlaXIgb2xkIGZvb3Rpbmcgb2YgZXF1YWxpdHksIHRvIGFzc3VtZSB0aGUgc3VwcmVtYWN5IGluIEdyZWVjZS4gTWVnaXN0b25vw7xzIHdhcyBjb252aW5jZWQsIGFuZCBlbmxpc3RlZCBpbiB0aGUgY2F1c2UgdHdvIG9yIHRocmVlIG9mIGhpcyBmcmllbmRzIGJlc2lkZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBDbGVvbWVuZXMsIGJlaW5nIG5vdyBncmVhdGx5IGVsYXRlZCwgYW5kIHBlcnN1YWRlZCB0aGF0IGlmIGhlIGNvdWxkIGtlZXAgdGhlIGNvbnRyb2wgb2YgdGhpbmdzIGVudGlyZWx5IGluIGhpcyBvd24gaGFuZHMgZHVyaW5nIHRoZSB3YXIgd2l0aCB0aGUgQWNoYWVhbnMsIGhlIHdvdWxkIGVhc2lseSBvYnRhaW4gdGhlIG1hc3RlcnksIGJlZ2FuIHRvIGluc3RydWN0IGhpcyBtb3RoZXIncyBodXNiYW5kLCBNZWdpc3Rvbm/DvHMsIHRoYXQgdGhleSBtdXN0IG5lZWRzIGdldCByaWQgb2YgdGhlIGVwaG9ycywgcHV0IHRoZSBwcm9wZXJ0eSBvZiB0aGUgY2l0aXplbnMgaW50byBhIGNvbW1vbiBzdG9jaywgYW5kIHJvdXNlIGFuZCBpbmNpdGUgdGhlIFNwYXJ0YW5zLCB0aHVzIHB1dCB1cG9uIHRoZWlyIG9sZCBmb290aW5nIG9mIGVxdWFsaXR5LCB0byBhc3N1bWUgdGhlIHN1cHJlbWFjeSBpbiBHcmVlY2UuIE1lZ2lzdG9ub8O8cyB3YXMgY29udmluY2VkLCBhbmQgZW5saXN0ZWQgaW4gdGhlIGNhdXNlIHR3byBvciB0aHJlZSBvZiBoaXMgZnJpZW5kcyBiZXNpZGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGl0IGNhbWUgdG8gcGFzcyBhYm91dCB0aGF0IHRpbWUgdGhhdCBvbmUgb2YgdGhlIGVwaG9ycywgd2hvIHdhcyBzbGVlcGluZyBpbiB0aGUgcHJlY2luY3Qgb2YgUGFzaXBoYcOrLCBoYWQgYW4gYXN0b25pc2hpbmcgZHJlYW0uIEhlIGRyZWFtZWQgdGhhdCBpbiB0aGUgcGxhY2Ugd2hlcmUgdGhlIGVwaG9ycyB3ZXJlIHdvbnQgdG8gc2l0IGZvciB0aGUgcHJvc2VjdXRpb24gb2YgYnVzaW5lc3MsIG9uZSBjaGFpciBvbmx5IHN0b29kLCBidXQgdGhlIG90aGVyIGZvdXIgaGFkIGJlZW4gdGFrZW4gYXdheTsgYW5kIHRoYXQgaW4gaGlzIGFtYXplbWVudCBhdCB0aGlzIGEgdm9pY2UgY2FtZSB0byBoaW0gZnJvbSB0aGUgdGVtcGxlIHNheWluZyB0aGF0IHRoaXMgd2FzIGJldHRlciBmb3IgU3BhcnRhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGRyZWFtIHRoZSBlcGhvciByZWxhdGVkIHRvIENsZW9tZW5lcywgd2hvIGF0IGZpcnN0IHdhcyBtdWNoIGRpc3R1cmJlZCwgYW5kIHRob3VnaHQgdGhhdCB0aGUgb3RoZXIgaGFkIHNvbWUgc3VzcGljaW9uIG9mIGhpcyBkZXNpZ24gYW5kIHdhcyBtYWtpbmcgdHJpYWwgb2YgaGltOyBidXQgd2hlbiBoZSB3YXMgY29udmluY2VkIHRoYXQgdGhlIHJlbGF0ZXIgc3Bva2UgdGhlIHRydXRoLCBoaXMgY291cmFnZSByZXZpdmVkLiBTbyB0YWtpbmcgYWxsIHRoZSBjaXRpemVucyB3aG8sIGFzIGhlIHN1c3BlY3RlZCwgd291bGQgYmUgbW9zdCBvcHBvc2VkIHRvIGhpcyBkZXNpZ25zLCBoZSBzZWl6ZWQgSGVyYWVhIGFuZCBBbHNhZWEsIHR3byBjaXRpZXMgYmVsb25naW5nIHRvIHRoZSBBY2hhZWFuIGxlYWd1ZSwgaW50cm9kdWNlZCBzdXBwbGllcyBvZiBmb29kIGludG8gT3JjaG9tZW51cywgYW5kIGVuY2FtcGVkIGJ5IE1hbnRpbmVpYSwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+ZnJvbSB3aGVuY2UgaGUgbWFkZSBsb25nIG1hcmNoZXMgdXAgYW5kIGRvd24gdGhlIGxhbmQsIGFuZCB1dHRlcmx5IHdvcmUgb3V0IHRoZSBMYWNlZGFlbW9uaWFucywgc28gdGhhdCBpdCB3YXMgYXQgdGhlaXIgb3duIHJlcXVlc3QgdGhhdCBoZSBsZWZ0IG1vc3Qgb2YgdGhlbSBpbiBBcmNhZGlhLCB3aGlsZSB3aXRoIGhpcyBtZXJjZW5hcmllcyBoZSBoaW1zZWxmIHNldCBvdXQgZm9yIFNwYXJ0YS4gT24gdGhlIG1hcmNoIGhlIGltcGFydGVkIGhpcyBkZXNpZ24gdG8gdGhvc2Ugd2hvbSBoZSBiZWxpZXZlZCB0byBiZSBtb3N0IGZhdm91cmFibHkgZGlzcG9zZWQgdG8gaGltLCBhbmQgd2VudCBmb3J3YXJkIHNsb3dseSwgdGhhdCBoZSBtaWdodCBmYWxsIHVwb24gdGhlIGVwaG9ycyB3aGlsZSB0aGV5IHdlcmUgYXQgc3VwcGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgY2FtZSB0byBwYXNzIGFib3V0IHRoYXQgdGltZSB0aGF0IG9uZSBvZiB0aGUgZXBob3JzLCB3aG8gd2FzIHNsZWVwaW5nIGluIHRoZSBwcmVjaW5jdCBvZiBQYXNpcGhhw6ssIGhhZCBhbiBhc3RvbmlzaGluZyBkcmVhbS4gSGUgZHJlYW1lZCB0aGF0IGluIHRoZSBwbGFjZSB3aGVyZSB0aGUgZXBob3JzIHdlcmUgd29udCB0byBzaXQgZm9yIHRoZSBwcm9zZWN1dGlvbiBvZiBidXNpbmVzcywgb25lIGNoYWlyIG9ubHkgc3Rvb2QsIGJ1dCB0aGUgb3RoZXIgZm91ciBoYWQgYmVlbiB0YWtlbiBhd2F5OyBhbmQgdGhhdCBpbiBoaXMgYW1hemVtZW50IGF0IHRoaXMgYSB2b2ljZSBjYW1lIHRvIGhpbSBmcm9tIHRoZSB0ZW1wbGUgc2F5aW5nIHRoYXQgdGhpcyB3YXMgYmV0dGVyIGZvciBTcGFydGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZHJlYW0gdGhlIGVwaG9yIHJlbGF0ZWQgdG8gQ2xlb21lbmVzLCB3aG8gYXQgZmlyc3Qgd2FzIG11Y2ggZGlzdHVyYmVkLCBhbmQgdGhvdWdodCB0aGF0IHRoZSBvdGhlciBoYWQgc29tZSBzdXNwaWNpb24gb2YgaGlzIGRlc2lnbiBhbmQgd2FzIG1ha2luZyB0cmlhbCBvZiBoaW07IGJ1dCB3aGVuIGhlIHdhcyBjb252aW5jZWQgdGhhdCB0aGUgcmVsYXRlciBzcG9rZSB0aGUgdHJ1dGgsIGhpcyBjb3VyYWdlIHJldml2ZWQuIFNvIHRha2luZyBhbGwgdGhlIGNpdGl6ZW5zIHdobywgYXMgaGUgc3VzcGVjdGVkLCB3b3VsZCBiZSBtb3N0IG9wcG9zZWQgdG8gaGlzIGRlc2lnbnMsIGhlIHNlaXplZCBIZXJhZWEgYW5kIEFsc2FlYSwgdHdvIGNpdGllcyBiZWxvbmdpbmcgdG8gdGhlIEFjaGFlYW4gbGVhZ3VlLCBpbnRyb2R1Y2VkIHN1cHBsaWVzIG9mIGZvb2QgaW50byBPcmNob21lbnVzLCBhbmQgZW5jYW1wZWQgYnkgTWFudGluZWlhLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmZyb20gd2hlbmNlIGhlIG1hZGUgbG9uZyBtYXJjaGVzIHVwIGFuZCBkb3duIHRoZSBsYW5kLCBhbmQgdXR0ZXJseSB3b3JlIG91dCB0aGUgTGFjZWRhZW1vbmlhbnMsIHNvIHRoYXQgaXQgd2FzIGF0IHRoZWlyIG93biByZXF1ZXN0IHRoYXQgaGUgbGVmdCBtb3N0IG9mIHRoZW0gaW4gQXJjYWRpYSwgd2hpbGUgd2l0aCBoaXMgbWVyY2VuYXJpZXMgaGUgaGltc2VsZiBzZXQgb3V0IGZvciBTcGFydGEuIE9uIHRoZSBtYXJjaCBoZSBpbXBhcnRlZCBoaXMgZGVzaWduIHRvIHRob3NlIHdob20gaGUgYmVsaWV2ZWQgdG8gYmUgbW9zdCBmYXZvdXJhYmx5IGRpc3Bvc2VkIHRvIGhpbSwgYW5kIHdlbnQgZm9yd2FyZCBzbG93bHksIHRoYXQgaGUgbWlnaHQgZmFsbCB1cG9uIHRoZSBlcGhvcnMgd2hpbGUgdGhleSB3ZXJlIGF0IHN1cHBlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBjaXR5IHdhcyBjbG9zZSBhdCBoYW5kLCBoZSBzZW50IEV1cnljbGVpZGFzIHRvIHRoZSBtZXNzLXRhYmxlIG9mIHRoZSBlcGhvcnMsIG9zdGVuc2libHkgdG8gY2Fycnkgc29tZSBtZXNzYWdlIG9mIHRoZSBraW5nIGZyb20gdGhlIGFybXk7IGJ1dCBUaGVyeWNpb24sIFBob2ViaXMsIGFuZCB0d28gb2YgdGhlIEhlbG90cywgd2hvIGhhZCBiZWVuIGJyZWQgdXAgYWxvbmcgd2l0aCBDbGVvbWVuZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdWNoIEhlbG90IGNvbXBhbmlvbnMgYWZ0ZXJ3YXJkcyBiZWNhbWUgZnJlZW1lbiwgYW5kIHNvbWV0aW1lcyBldmVuIGNpdGl6ZW5zIGluIFNwYXJ0YS48L25vdGU+ICh0aGV5IGNhbGwgdGhlbSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1vdGhha2VzPC9xPiksIGZvbGxvd2VkIGFmdGVyIHdpdGggYSBmZXcgc29sZGllcnMuIFRoZXNlIGluLCB3aGlsZSBFdXJ5Y2xlaWRhcyB3YXMgc3RpbGwgbWFraW5nIGhpcyByZXBvcnQgdG8gdGhlIGVwaG9ycywgcmFuIGluIHVwb24gdGhlbSB3aXRoIGRyYXduIHN3b3JkcyBhbmQgc21vdGUgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IG9mIHRoZW0sIEFneWxhZXVzLCBvbiByZWNlaXZpbmcgdGhlIGJsb3csIGZlbGwgYW5kIGxheSBzdGlsbCBhcyB0aG91Z2ggZGVhZDsgYnV0IGFmdGVyd2FyZHMgaGUgcXVpZXRseSBwdWxsZWQgaGltc2VsZiB0b2dldGhlciwgZHJhZ2dlZCBoaW1zZWxmIG91dCBvZiB0aGUgcm9vbSwgYW5kIGNyZXB0IHVub2JzZXJ2ZWQgaW50byBhIGxpdHRsZSBidWlsZGluZyB3aGljaCB3YXMgYSB0ZW1wbGUgb2YgRmVhci4gVXN1YWxseSBpdCB3YXMgY2xvc2VkLCBidXQgYXQgdGhpcyB0aW1lIGl0IGNoYW5jZWQgdG8gYmUgb3Blbi4gSW50byB0aGlzIGJ1aWxkaW5nIGhlIGJldG9vayBoaW1zZWxmIGFuZCBsb2NrZWQgdGhlIGRvb3IuIEJ1dCB0aGUgb3RoZXIgZm91ciB3ZXJlIHNsYWluLCBhbmQgYWxzbyBhYm91dCB0ZW4gb2YgdGhvc2Ugd2hvIGNhbWUgdG8gdGhlaXIgYWlkLiBGb3IgdGhlIHBlb3BsZSB3aG8ga2VwdCBxdWlldCB3ZXJlIG5vdCBraWxsZWQsIG5vciB3ZXJlIHRob3NlIHdobyB3aXNoZWQgdG8gbGVhdmUgdGhlIGNpdHkgcHJldmVudGVkLiBBbmQgZXZlbiBBZ3lsYWV1cyB3YXMgc3BhcmVkIHdoZW4gaGUgY2FtZSBvdXQgb2YgdGhlIHRlbXBsZSBuZXh0IGRheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBjaXR5IHdhcyBjbG9zZSBhdCBoYW5kLCBoZSBzZW50IEV1cnljbGVpZGFzIHRvIHRoZSBtZXNzLXRhYmxlIG9mIHRoZSBlcGhvcnMsIG9zdGVuc2libHkgdG8gY2Fycnkgc29tZSBtZXNzYWdlIG9mIHRoZSBraW5nIGZyb20gdGhlIGFybXk7IGJ1dCBUaGVyeWNpb24sIFBob2ViaXMsIGFuZCB0d28gb2YgdGhlIEhlbG90cywgd2hvIGhhZCBiZWVuIGJyZWQgdXAgYWxvbmcgd2l0aCBDbGVvbWVuZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlN1Y2ggSGVsb3QgY29tcGFuaW9ucyBhZnRlcndhcmRzIGJlY2FtZSBmcmVlbWVuLCBhbmQgc29tZXRpbWVzIGV2ZW4gY2l0aXplbnMgaW4gU3BhcnRhLjwvbm90ZT4gKHRoZXkgY2FsbCB0aGVtIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tb3RoYWtlczwvcT4pLCBmb2xsb3dlZCBhZnRlciB3aXRoIGEgZmV3IHNvbGRpZXJzLiBUaGVzZSBpbiwgd2hpbGUgRXVyeWNsZWlkYXMgd2FzIHN0aWxsIG1ha2luZyBoaXMgcmVwb3J0IHRvIHRoZSBlcGhvcnMsIHJhbiBpbiB1cG9uIHRoZW0gd2l0aCBkcmF3biBzd29yZHMgYW5kIHNtb3RlIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiB0aGVtLCBBZ3lsYWV1cywgb24gcmVjZWl2aW5nIHRoZSBibG93LCBmZWxsIGFuZCBsYXkgc3RpbGwgYXMgdGhvdWdoIGRlYWQ7IGJ1dCBhZnRlcndhcmRzIGhlIHF1aWV0bHkgcHVsbGVkIGhpbXNlbGYgdG9nZXRoZXIsIGRyYWdnZWQgaGltc2VsZiBvdXQgb2YgdGhlIHJvb20sIGFuZCBjcmVwdCB1bm9ic2VydmVkIGludG8gYSBsaXR0bGUgYnVpbGRpbmcgd2hpY2ggd2FzIGEgdGVtcGxlIG9mIEZlYXIuIFVzdWFsbHkgaXQgd2FzIGNsb3NlZCwgYnV0IGF0IHRoaXMgdGltZSBpdCBjaGFuY2VkIHRvIGJlIG9wZW4uIEludG8gdGhpcyBidWlsZGluZyBoZSBiZXRvb2sgaGltc2VsZiBhbmQgbG9ja2VkIHRoZSBkb29yLiBCdXQgdGhlIG90aGVyIGZvdXIgd2VyZSBzbGFpbiwgYW5kIGFsc28gYWJvdXQgdGVuIG9mIHRob3NlIHdobyBjYW1lIHRvIHRoZWlyIGFpZC4gRm9yIHRoZSBwZW9wbGUgd2hvIGtlcHQgcXVpZXQgd2VyZSBub3Qga2lsbGVkLCBub3Igd2VyZSB0aG9zZSB3aG8gd2lzaGVkIHRvIGxlYXZlIHRoZSBjaXR5IHByZXZlbnRlZC4gQW5kIGV2ZW4gQWd5bGFldXMgd2FzIHNwYXJlZCB3aGVuIGhlIGNhbWUgb3V0IG9mIHRoZSB0ZW1wbGUgbmV4dCBkYXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgTGFjZWRhZW1vbmlhbnMgaGF2ZSB0ZW1wbGVzIG9mIERlYXRoLCBMYXVnaHRlciwgYW5kIHRoYXQgc29ydCBvZiB0aGluZywgYXMgd2VsbCBhcyBvZiBGZWFyLiBBbmQgdGhleSBwYXkgaG9ub3VycyB0byBGZWFyLCBub3QgYXMgdGhleSBkbyB0byB0aGUgcG93ZXJzIHdoaWNoIHRoZXkgdHJ5IHRvIGF2ZXJ0IGJlY2F1c2UgdGhleSB0aGluayB0aGVtIGJhbGVmdWwsIGJ1dCBiZWNhdXNlIHRoZXkgYmVsaWV2ZSB0aGF0IGZlYXIgaXMgdGhlIGNoaWVmIHN1cHBvcnQgb2YgdGhlaXIgY2l2aWwgcG9saXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24sIHRvbywgd2hlbiB0aGUgZXBob3JzIGVudGVyIHVwb24gdGhlaXIgb2ZmaWNlLCBhcyBBcmlzdG90bGUgc2F5cywgdGhleSBpc3N1ZSBhIHByb2NsYW1hdGlvbiBjb21tYW5kaW5nIGFsbCBtZW4gdG8gc2hhdmUgdGhlaXIgbW91c3RhY2hlcywgYW5kIHRvIG9iZXkgdGhlIGxhd3MsIHRoYXQgdGhlc2UgbWF5IG5vdCBiZSBzZXZlcmUgdXBvbiB0aGVtLiBUaGV5IGluc2lzdCB1cG9uIHRoZSBzaGF2aW5nIG9mIHRoZSBtb3VzdGFjaGUsIEkgdGhpbmssIGluIG9yZGVyIHRoYXQgdGhleSBtYXkgYWNjdXN0b20gdGhlIHlvdW5nIG1lbiB0byBvYmVkaWVuY2UgaW4gdGhlIG1vc3QgdHJpZmxpbmcgbWF0dGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBtZW4gb2Ygb2xkLCBpbiBteSBvcGluaW9uLCBkaWQgbm90IHJlZ2FyZCBicmF2ZXJ5IGFzIGEgbGFjayBvZiBmZWFyLCBidXQgYXMgZmVhciBvZiByZXByb2FjaCBhbmQgZHJlYWQgb2YgZGlzZ3JhY2UuIEZvciB0aGUgbWVuIHdobyBmZWVsIG1vc3QgZHJlYWQgb2YgdGhlIGxhd3MgaGF2ZSBtb3N0IGNvdXJhZ2UgaW4gZmFjaW5nIHRoZWlyIGVuZW1pZXM7IGFuZCB0aG9zZSBzaHVuIGRlYXRoIGxlYXN0IHdobyBtb3N0IGZlYXIgaWxsIGZhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBpdCBoYXMgYmVlbiB3ZWxsIHNhaWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBTdGFzaW51cyBvZiBDeXBydXMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gRXV0aHlwaC4gMTJhIiB2YWxpZD0ieWVzIj5QbGF0bywgPHRpdGxlPkV1dGh5cGhybzwvdGl0bGU+LCAxMmE8L2JpYmw+OyBLaW5rZWwsIDx0aXRsZT5FcC4gR3JhZWMuIEZyYWcuPC90aXRsZT4gaS4gcC4gMzAuPC9ub3RlPjoKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBMYWNlZGFlbW9uaWFucyBoYXZlIHRlbXBsZXMgb2YgRGVhdGgsIExhdWdodGVyLCBhbmQgdGhhdCBzb3J0IG9mIHRoaW5nLCBhcyB3ZWxsIGFzIG9mIEZlYXIuIEFuZCB0aGV5IHBheSBob25vdXJzIHRvIEZlYXIsIG5vdCBhcyB0aGV5IGRvIHRvIHRoZSBwb3dlcnMgd2hpY2ggdGhleSB0cnkgdG8gYXZlcnQgYmVjYXVzZSB0aGV5IHRoaW5rIHRoZW0gYmFsZWZ1bCwgYnV0IGJlY2F1c2UgdGhleSBiZWxpZXZlIHRoYXQgZmVhciBpcyB0aGUgY2hpZWYgc3VwcG9ydCBvZiB0aGVpciBjaXZpbCBwb2xpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdG9vLCB3aGVuIHRoZSBlcGhvcnMgZW50ZXIgdXBvbiB0aGVpciBvZmZpY2UsIGFzIEFyaXN0b3RsZSBzYXlzLCB0aGV5IGlzc3VlIGEgcHJvY2xhbWF0aW9uIGNvbW1hbmRpbmcgYWxsIG1lbiB0byBzaGF2ZSB0aGVpciBtb3VzdGFjaGVzLCBhbmQgdG8gb2JleSB0aGUgbGF3cywgdGhhdCB0aGVzZSBtYXkgbm90IGJlIHNldmVyZSB1cG9uIHRoZW0uIFRoZXkgaW5zaXN0IHVwb24gdGhlIHNoYXZpbmcgb2YgdGhlIG1vdXN0YWNoZSwgSSB0aGluaywgaW4gb3JkZXIgdGhhdCB0aGV5IG1heSBhY2N1c3RvbSB0aGUgeW91bmcgbWVuIHRvIG9iZWRpZW5jZSBpbiB0aGUgbW9zdCB0cmlmbGluZyBtYXR0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgbWVuIG9mIG9sZCwgaW4gbXkgb3BpbmlvbiwgZGlkIG5vdCByZWdhcmQgYnJhdmVyeSBhcyBhIGxhY2sgb2YgZmVhciwgYnV0IGFzIGZlYXIgb2YgcmVwcm9hY2ggYW5kIGRyZWFkIG9mIGRpc2dyYWNlLiBGb3IgdGhlIG1lbiB3aG8gZmVlbCBtb3N0IGRyZWFkIG9mIHRoZSBsYXdzIGhhdmUgbW9zdCBjb3VyYWdlIGluIGZhY2luZyB0aGVpciBlbmVtaWVzOyBhbmQgdGhvc2Ugc2h1biBkZWF0aCBsZWFzdCB3aG8gbW9zdCBmZWFyIGlsbCBmYW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = ""
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0byByZXN1bWU7IENsZW9tZW5lcywgd2hlbiBkYXkgY2FtZSwgcHVibGlzaGVkIGEgbGlzdCBvZiBlaWdodHkgY2l0aXplbnMgd2hvIG11c3QgZ28gaW50byBleGlsZSwgYW5kIHJlbW92ZWQgYWxsIHRoZSBlcGhvcmFsIGNoYWlycyBleGNlcHQgb25lOyBpbiB0aGlzIGhlIHB1cnBvc2VkIHRvIHNpdCBoaW1zZWxmIGZvciB0aGUgdHJhbnNhY3Rpb24gb2YgcHVibGljIGJ1c2luZXNzLiBUaGVuIGhlIGNhbGxlZCBhIGdlbmVyYWwgYXNzZW1ibHkgYW5kIG1hZGUgYSBkZWZlbmNlIG9mIGhpcyBwcm9jZWVkaW5ncy4gSGUgc2FpZCB0aGF0IEx5Y3VyZ3VzIGhhZCBibGVuZGVkIHRoZSBwb3dlcnMgb2Ygc2VuYXRlIGFuZCBraW5ncywgYW5kIHRoYXQgZm9yIGEgbG9uZyB0aW1lIHRoZSBzdGF0ZSB3YXMgYWRtaW5pc3RlcmVkIGluIHRoaXMgd2F5IGFuZCBoYWQgbm8gbmVlZCBvZiBvdGhlciBvZmZpY2lhbHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBsYXRlciwgd2hlbiB0aGUgTWVzc2VuaWFuIHdhciBwcm92ZWQgdG8gYmUgbG9uZywgdGhlIGtpbmdzLCBzaW5jZSB0aGVpciBjYW1wYWlnbnMgYWJyb2FkIGxlZnQgdGhlbSBubyB0aW1lIHRvIGFkbWluaXN0ZXIganVzdGljZSB0aGVtc2VsdmVzLCBjaG9zZSBvdXQgc29tZSBvZiB0aGVpciBmcmllbmRzIGFuZCBsZWZ0IHRoZW0gYmVoaW5kIHRvIHNlcnZlIHRoZSBjaXRpemVucyBpbiB0aGVpciBzdGVhZC4gVGhlc2Ugd2VyZSBjYWxsZWQgZXBob3JzLCBvciBndWFyZGlhbnMsIGFuZCBhcyBhIG1hdHRlciBvZiBmYWN0IHRoZXkgY29udGludWVkIGF0IGZpcnN0IHRvIGJlIGFzc2lzdGFudHMgb2YgdGhlIGtpbmdzLCBidXQgdGhlbiBncmFkdWFsbHkgZGl2ZXJ0ZWQgdGhlIHBvd2VyIGludG8gdGhlaXIgb3duIGhhbmRzLCBhbmQgc28sIGVyZSBtZW4gd2VyZSBhd2FyZSwgZXN0YWJsaXNoZWQgYSBtYWdpc3RyYWN5IG9mIHRoZWlyIG93bi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHByb29mIG9mIHRoaXMsIENsZW9tZW5lcyBjaXRlZCB0aGUgZmFjdCB0aGF0IGRvd24gdG8gdGhhdCBkYXksIHdoZW4gdGhlIGVwaG9ycyBzdW1tb25lZCBhIGtpbmcgdG8gYXBwZWFyIGJlZm9yZSB0aGVtLCBoZSByZWZ1c2VkIHRvIGdvIGF0IHRoZSBmaXJzdCBzdW1tb25zLCBhbmQgYXQgdGhlIHNlY29uZCwgYnV0IGF0IHRoZSB0aGlyZCByb3NlIHVwIGFuZCB3ZW50IHRvIHRoZW07IGFuZCBoZSBzYWlkIHRoYXQgdGhlIG9uZSB3aG8gZmlyc3QgYWRkZWQgd2VpZ2h0IHRvIHRoZSBvZmZpY2UsIGFuZCBleHRlbmRlZCBpdHMgcG93ZXJzLCBBc3Rlcm9wdXMsIHdhcyBlcGhvciBtYW55IGdlbmVyYXRpb25zIGxhdGVyLiBBcyBsb25nLCB0aGVuLCBoZSBzYWlkLCBhcyB0aGUgZXBob3JzIGtlcHQgd2l0aGluIGJvdW5kcywgaXQgaGFkIGJlZW4gYmV0dGVyIHRvIGJlYXIgd2l0aCB0aGVtOyBidXQgd2hlbiB3aXRoIHRoZWlyIGFzc3VtZWQgcG93ZXIgdGhleSBzdWJ2ZXJ0ZWQgdGhlIGFuY2llbnQgZm9ybSBvZiBnb3Zlcm5tZW50IHRvIHN1Y2ggYW4gZXh0ZW50IGFzIHRvIGRyaXZlIGF3YXkgc29tZSBraW5ncywgcHV0IG90aGVycyB0byBkZWF0aCB3aXRob3V0IHRyaWFsLCBhbmQgdGhyZWF0ZW4gc3VjaCBhcyBkZXNpcmVkIHRvIGJlaG9sZCBhZ2FpbiBpbiBTcGFydGEgaGVyIGZhaXJlc3QgYW5kIG1vc3QgZGl2aW5lbHkgYXBwb2ludGVkIGNvbnN0aXR1dGlvbiwgaXQgd2FzIG5vdCB0byBiZSBlbmR1cmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBpdCBoYWQgYmVlbiBwb3NzaWJsZSB3aXRob3V0IGJsb29kc2hlZCB0byByaWQgU3BhcnRhIG9mIGhlciBpbXBvcnRlZCBjdXJzZXMsIG5hbWVseSBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZSwgYW5kIGRlYnRzIGFuZCB1c3VyeSwgYW5kIHRob3NlIGVsZGVyIGV2aWxzIHRoYW4gdGhlc2UsIG5hbWVseSwgcG92ZXJ0eSBhbmQgd2VhbHRoLCBoZSB3b3VsZCBoYXZlIHRob3VnaHQgaGltc2VsZiB0aGUgbW9zdCBmb3J0dW5hdGUga2luZyBpbiB0aGUgd29ybGQgdG8gaGF2ZSBjdXJlZCB0aGUgZGlzZWFzZSBvZiBoaXMgY291bnRyeSBsaWtlIGEgd2lzZSBwaHlzaWNpYW4sIHdpdGhvdXQgcGFpbjsgYnV0IGFzIGl0IHdhcywgaGUgc2FpZCwgaW4gc3VwcG9ydCBvZiB0aGUgbmVjZXNzaXR5IHRoYXQgaGFkIGJlZW4gbGFpZCB1cG9uIGhpbSwgaGUgY291bGQgY2l0ZSBMeWN1cmd1cywgd2hvLCB0aG91Z2ggaGUgd2FzIG5laXRoZXIga2luZyBub3IgbWFnaXN0cmF0ZSwgYnV0IGEgcHJpdmF0ZSBwZXJzb24gYXR0ZW1wdGluZyB0byBhY3QgYXMga2luZywgcHJvY2VlZGVkIHdpdGggYW4gYXJtZWQgcmV0aW51ZSBpbnRvIHRoZSBtYXJrZXQtcGxhY2UsIHNvIHRoYXQgQ2hhcmlsbHVzIHRoZSBraW5nIHRvb2sgZnJpZ2h0IGFuZCBmbGVkIGZvciByZWZ1Z2UgdG8gYW4gYWx0YXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQga2luZywgaG93ZXZlciwgQ2xlb21lbmVzIHNhaWQsIHNpbmNlIGhlIHdhcyBhbiBleGNlbGxlbnQgbWFuIGFuZCBhIGxvdmVyIG9mIGhpcyBjb3VudHJ5LCBzcGVlZGlseSBjb25jdXJyZWQgaW4gdGhlIG1lYXN1cmVzIG9mIEx5Y3VyZ3VzIGFuZCBhY2NlcHRlZCB0aGUgY2hhbmdlIG9mIGNvbnN0aXR1dGlvbjsgc3RpbGwsIGFzIGEgbWF0dGVyIG9mIGZhY3QgTHljdXJndXMgYnkgaGlzIG93biBhY3RzIGJvcmUgd2l0bmVzcyB0byB0aGUgZGlmZmljdWx0eSBvZiBjaGFuZ2luZyBhIGNvbnN0aXR1dGlvbiB3aXRob3V0IHZpb2xlbmNlIGFuZCBmZWFyLiBUbyB0aGVzZSwgQ2xlb21lbmVzIHNhaWQsIGhlIGhhZCBoaW1zZWxmIHJlc29ydGVkIHdpdGggdGhlIGdyZWF0ZXN0IG1vZGVyYXRpb24sIGZvciBoZSBoYWQgYnV0IHB1dCBvdXQgb2YgdGhlIHdheSB0aGUgbWVuIHdobyB3ZXJlIG9wcG9zZWQgdG8gdGhlIHNhbHZhdGlvbiBvZiBTcGFydGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhlIHJlc3QsIGhlIHNhaWQsIHRoZSB3aG9sZSBsYW5kIHNob3VsZCBiZSBjb21tb24gcHJvcGVydHksIGRlYnRvcnMgc2hvdWxkIGJlIHNldCBmcmVlIGZyb20gdGhlaXIgZGVidHMsIGFuZCBmb3JlaWduZXJzIHNob3VsZCBiZSBleGFtaW5lZCBhbmQgcmF0ZWQsIGluIG9yZGVyIHRoYXQgdGhlIHN0cm9uZ2VzdCBvZiB0aGVtIG1pZ2h0IGJlIG1hZGUgU3BhcnRhbiBjaXRpemVucyBhbmQgaGVscCB0byBwcmVzZXJ2ZSB0aGUgc3RhdGUgYnkgdGhlaXIgYXJtcy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluIHRoaXMgd2F5LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlIHNoYWxsIGNlYXNlIHRvIGJlaG9sZCBTcGFydGEgdGhlIGJvb3R5IG9mIEFldG9saWFucyBhbmQgSWxseXJpYW5zIHRocm91Z2ggbGFjayBvZiBtZW4gdG8gZGVmZW5kIGhlci48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRvIGJlZ2luIHdpdGgsIENsZW9tZW5lcyBoaW1zZWxmIHBsYWNlZCBoaXMgcHJvcGVydHkgaW4gdGhlIGNvbW1vbiBzdG9jaywgYXMgZGlkIE1lZ2lzdG9ubyZsdDsqJmd0O3MgaGlzIHN0ZXAtZmF0aGVyIGFuZCBldmVyeSBvbmUgb2YgaGlzIGZyaWVuZHMgYmVzaWRlczsgbmV4dCwgYWxsIHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBkaWQgdGhlIHNhbWUsIGFuZCB0aGUgbGFuZCB3YXMgcGFyY2VsbGVkIG91dC4gQ2xlb21lbmVzIGFsc28gYXNzaWduZWQgYSBwb3J0aW9uIG9mIGxhbmQgdG8gZWFjaCBtYW4gd2hvIGhhZCBiZWVuIGV4aWxlZCBieSBoaW0sIGFuZCBwcm9taXNlZCB0byBicmluZyB0aGVtIGFsbCBob21lIGFmdGVyIG1hdHRlcnMgaGFkIGJlY29tZSBxdWlldC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBmaWxsZWQgdXAgdGhlIGJvZHkgb2YgY2l0aXplbnMgd2l0aCB0aGUgbW9zdCBwcm9taXNpbmcgb2YgdGhlIGZyZWUgcHJvdmluY2lhbHMsIGFuZCB0aHVzIHJhaXNlZCBhIGJvZHkgb2YgZm91ciB0aG91c2FuZCBtZW4tYXQtYXJtcywgd2hvbSBoZSB0YXVnaHQgdG8gdXNlIGEgbG9uZyBwaWtlLCBoZWxkIGluIGJvdGggaGFuZHMsIGluc3RlYWQgb2YgYSBzaG9ydCBzcGVhciwgYW5kIHRvIGNhcnJ5IHRoZWlyIHNoaWVsZHMgYnkgYSBzdHJhcCBpbnN0ZWFkIG9mIGJ5IGEgZml4ZWQgaGFuZGxlLiBOZXh0IGhlIGRldm90ZWQgaGltc2VsZiB0byB0aGUgdHJhaW5pbmcgb2YgdGhlIHlvdW5nIG1lbiBhbmQgdG8gdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWdvZ2UsPC9xPiBvciBhbmNpZW50IGRpc2NpcGxpbmUsIG1vc3Qgb2YgdGhlIGRldGFpbHMgb2Ygd2hpY2ggU3BoYWVydXMsIHdobyB3YXMgdGhlbiBpbiBTcGFydGEsIGhlbHBlZCBoaW0gaW4gYXJyYW5naW5nLiBBbmQgcXVpY2tseSB3YXMgdGhlIHByb3BlciBzeXN0ZW0gb2YgYm9kaWx5IHRyYWluaW5nIGFuZCBwdWJsaWMgbWVzc2VzIHJlc3VtZWQsIGEgZmV3IG91dCBvZiBuZWNlc3NpdHksIGJ1dCBtb3N0IHdpdGggYSB3aWxsaW5nIHNwaXJpdCwgc3ViamVjdGluZyB0aGVtc2VsdmVzIHRvIHRoZSBvbGQgU3BhcnRhbiByZWdpbWUgd2l0aCBhbGwgaXRzIHNpbXBsaWNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGRlc2lyaW5nIHRvIGdpdmUgdGhlIG5hbWUgb2YgYWJzb2x1dGUgcG93ZXIgYSBsZXNzIG9mZmVuc2l2ZSBzb3VuZCwgaGUgYXNzb2NpYXRlZCB3aXRoIGhpbXNlbGYgaW4gcm95YWwgcG93ZXIgaGlzIGJyb3RoZXIgRXVjbGVpZGFzLiBBbmQgdGhpcyB3YXMgdGhlIG9ubHkgdGltZSB3aGVuIHRoZSBTcGFydGFucyBoYWQgdHdvIGtpbmdzIGZyb20gdGhlIHNhbWUgaG91c2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdG8gYmVnaW4gd2l0aCwgQ2xlb21lbmVzIGhpbXNlbGYgcGxhY2VkIGhpcyBwcm9wZXJ0eSBpbiB0aGUgY29tbW9uIHN0b2NrLCBhcyBkaWQgTWVnaXN0b25vJmx0OyomZ3Q7cyBoaXMgc3RlcC1mYXRoZXIgYW5kIGV2ZXJ5IG9uZSBvZiBoaXMgZnJpZW5kcyBiZXNpZGVzOyBuZXh0LCBhbGwgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zIGRpZCB0aGUgc2FtZSwgYW5kIHRoZSBsYW5kIHdhcyBwYXJjZWxsZWQgb3V0LiBDbGVvbWVuZXMgYWxzbyBhc3NpZ25lZCBhIHBvcnRpb24gb2YgbGFuZCB0byBlYWNoIG1hbiB3aG8gaGFkIGJlZW4gZXhpbGVkIGJ5IGhpbSwgYW5kIHByb21pc2VkIHRvIGJyaW5nIHRoZW0gYWxsIGhvbWUgYWZ0ZXIgbWF0dGVycyBoYWQgYmVjb21lIHF1aWV0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgZmlsbGVkIHVwIHRoZSBib2R5IG9mIGNpdGl6ZW5zIHdpdGggdGhlIG1vc3QgcHJvbWlzaW5nIG9mIHRoZSBmcmVlIHByb3ZpbmNpYWxzLCBhbmQgdGh1cyByYWlzZWQgYSBib2R5IG9mIGZvdXIgdGhvdXNhbmQgbWVuLWF0LWFybXMsIHdob20gaGUgdGF1Z2h0IHRvIHVzZSBhIGxvbmcgcGlrZSwgaGVsZCBpbiBib3RoIGhhbmRzLCBpbnN0ZWFkIG9mIGEgc2hvcnQgc3BlYXIsIGFuZCB0byBjYXJyeSB0aGVpciBzaGllbGRzIGJ5IGEgc3RyYXAgaW5zdGVhZCBvZiBieSBhIGZpeGVkIGhhbmRsZS4gTmV4dCBoZSBkZXZvdGVkIGhpbXNlbGYgdG8gdGhlIHRyYWluaW5nIG9mIHRoZSB5b3VuZyBtZW4gYW5kIHRvIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWdvZ2UsPC9xPiBvciBhbmNpZW50IGRpc2NpcGxpbmUsIG1vc3Qgb2YgdGhlIGRldGFpbHMgb2Ygd2hpY2ggU3BoYWVydXMsIHdobyB3YXMgdGhlbiBpbiBTcGFydGEsIGhlbHBlZCBoaW0gaW4gYXJyYW5naW5nLiBBbmQgcXVpY2tseSB3YXMgdGhlIHByb3BlciBzeXN0ZW0gb2YgYm9kaWx5IHRyYWluaW5nIGFuZCBwdWJsaWMgbWVzc2VzIHJlc3VtZWQsIGEgZmV3IG91dCBvZiBuZWNlc3NpdHksIGJ1dCBtb3N0IHdpdGggYSB3aWxsaW5nIHNwaXJpdCwgc3ViamVjdGluZyB0aGVtc2VsdmVzIHRvIHRoZSBvbGQgU3BhcnRhbiByZWdpbWUgd2l0aCBhbGwgaXRzIHNpbXBsaWNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGRlc2lyaW5nIHRvIGdpdmUgdGhlIG5hbWUgb2YgYWJzb2x1dGUgcG93ZXIgYSBsZXNzIG9mZmVuc2l2ZSBzb3VuZCwgaGUgYXNzb2NpYXRlZCB3aXRoIGhpbXNlbGYgaW4gcm95YWwgcG93ZXIgaGlzIGJyb3RoZXIgRXVjbGVpZGFzLiBBbmQgdGhpcyB3YXMgdGhlIG9ubHkgdGltZSB3aGVuIHRoZSBTcGFydGFucyBoYWQgdHdvIGtpbmdzIGZyb20gdGhlIHNhbWUgaG91c2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkxlYXJuaW5nIHRoYXQgQXJhdHVzIGFuZCB0aGUgQWNoYWVhbnMgYmVsaWV2ZWQgdGhhdCB0aGlzIHJldm9sdXRpb24gaGFkIGplb3BhcmRpemVkIGhpcyBwb3NpdGlvbiwgYW5kIHRoZXJlZm9yZSBkaWQgbm90IHRoaW5rIHRoYXQgaGUgd291bGQgdmVudHVyZSBmb3J0aCBvdXRzaWRlIG9mIFNwYXJ0YSwgb3IgbGVhdmUgdGhlIGNpdHkgd2hpbGUgaXQgd2FzIHN0aWxsIGluIHRoZSBzdXNwZW5zZSBvZiBzbyBncmVhdCBhbiBhZ2l0YXRpb24sIGhlIHRob3VnaHQgaXQgYSBmaW5lIGFuZCBoZWxwZnVsIHRoaW5nIHRvIG1ha2UgYSBkaXNwbGF5IG9mIHRoZSByZWFkeSB6ZWFsIG9mIGhpcyBhcm15IHRvIGhpcyBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgaGUgaW52YWRlZCB0aGUgdGVycml0b3J5IG9mIE1lZ2Fsb3BvbGlzLCBjb2xsZWN0ZWQgbGFyZ2UgYm9vdHksIGFuZCBkZXZhc3RhdGVkIHRoZSBjb3VudHJ5IGZhciBhbmQgd2lkZS4gQW5kIGZpbmFsbHkgYXJyZXN0aW5nIGEgY29tcGFueSBvZiBhY3RvcnMgd2hvIHdlcmUgcGFzc2luZyB0aHJvdWdoIHRoZSBjb3VudHJ5IGZyb20gTWVzc2Vuw6ksIGhlIGJ1aWx0IGEgdGhlYXRyZSBpbiB0aGUgZW5lbXkncyB0ZXJyaXRvcnksIGluc3RpdHV0ZWQgYSBjb250ZXN0IGZvciBhIHByaXplIG9mIGZvcnR5IG1pbmFlLCBhbmQgc2F0IHNwZWN0YXRvciBmb3IgYSB3aG9sZSBkYXk7IG5vdCB0aGF0IGhlIGZlbHQgdGhlIG5lZWQgb2YnIGEgc3BlY3RhY2xlLCBidXQgaW4gZXh1bHRhbnQgbW9ja2VyeSwgYXMgaXQgd2VyZSwgb2YgaGlzIGVuZW1pZXMsIGFuZCB0byBzaG93IHRvIHRoZSB3b3JsZCBieSBoaXMgY29udGVtcHQgZm9yIHRoZW0gdGhhdCBoZSBoZWxkIGNvbXBsZXRlIGNvbnRyb2wgb2YgYWZmYWlycywgd2l0aCBzb21ldGhpbmcsIGFzIGl0IHdlcmUsIHRvIHNwYXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXQgb3RoZXIgdGltZXMsIHRoZSBTcGFydGFuIGFsb25lIG9mIEdyZWVrIG9yIE1hY2Vkb25pYW4gYXJtaWVzIGhhZCBubyBwbGF5ZXJzIGluIGF0dGVuZGFuY2UsIG5vIGp1Z2dsZXJzLCBubyBkYW5jaW5nLWdpcmxzLCBubyBoYXJwaXN0cywgYnV0IHdhcyBmcmVlIGZyb20gZXZlcnkga2luZCBvZiBsaWNlbmNlLCBzY3VycmlsaXR5LCBhbmQgZ2VuZXJhbCBmZXN0aXZpdHk7IHdoaWxlIGZvciB0aGUgbW9zdCBwYXJ0IHRoZSB5b3VuZyBtZW4gcHJhY3Rpc2VkIHRoZW1zZWx2ZXMgYW5kIHRoZSBlbGRlciBtZW4gdGF1Z2h0IHRoZW0sIGFuZCBmb3IgYW11c2VtZW50LCB3aGVuIHRoZWlyIHdvcmsgd2FzIG92ZXIsIHRoZXkgaGFkIHJlY291cnNlIHRvIHRoZWlyIHdvbnRlZCBwbGVhc2FudHJpZXMgYW5kIHRoZSBpbnRlcmNoYW5nZSBvZiBTcGFydGFuIHdpdHRpY2lzbXMuIE9mIHdoYXQgZ3JlYXQgYWR2YW50YWdlIHRoaXMgc29ydCBvZiBhbXVzZW1lbnQgaXMsIEkgaGF2ZSB0b2xkIGluIG15IExpZmUgb2YgTHljdXJndXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTIuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciB4aWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TGVhcm5pbmcgdGhhdCBBcmF0dXMgYW5kIHRoZSBBY2hhZWFucyBiZWxpZXZlZCB0aGF0IHRoaXMgcmV2b2x1dGlvbiBoYWQgamVvcGFyZGl6ZWQgaGlzIHBvc2l0aW9uLCBhbmQgdGhlcmVmb3JlIGRpZCBub3QgdGhpbmsgdGhhdCBoZSB3b3VsZCB2ZW50dXJlIGZvcnRoIG91dHNpZGUgb2YgU3BhcnRhLCBvciBsZWF2ZSB0aGUgY2l0eSB3aGlsZSBpdCB3YXMgc3RpbGwgaW4gdGhlIHN1c3BlbnNlIG9mIHNvIGdyZWF0IGFuIGFnaXRhdGlvbiwgaGUgdGhvdWdodCBpdCBhIGZpbmUgYW5kIGhlbHBmdWwgdGhpbmcgdG8gbWFrZSBhIGRpc3BsYXkgb2YgdGhlIHJlYWR5IHplYWwgb2YgaGlzIGFybXkgdG8gaGlzIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBpbnZhZGVkIHRoZSB0ZXJyaXRvcnkgb2YgTWVnYWxvcG9saXMsIGNvbGxlY3RlZCBsYXJnZSBib290eSwgYW5kIGRldmFzdGF0ZWQgdGhlIGNvdW50cnkgZmFyIGFuZCB3aWRlLiBBbmQgZmluYWxseSBhcnJlc3RpbmcgYSBjb21wYW55IG9mIGFjdG9ycyB3aG8gd2VyZSBwYXNzaW5nIHRocm91Z2ggdGhlIGNvdW50cnkgZnJvbSBNZXNzZW7DqSwgaGUgYnVpbHQgYSB0aGVhdHJlIGluIHRoZSBlbmVteSdzIHRlcnJpdG9yeSwgaW5zdGl0dXRlZCBhIGNvbnRlc3QgZm9yIGEgcHJpemUgb2YgZm9ydHkgbWluYWUsIGFuZCBzYXQgc3BlY3RhdG9yIGZvciBhIHdob2xlIGRheTsgbm90IHRoYXQgaGUgZmVsdCB0aGUgbmVlZCBvZicgYSBzcGVjdGFjbGUsIGJ1dCBpbiBleHVsdGFudCBtb2NrZXJ5LCBhcyBpdCB3ZXJlLCBvZiBoaXMgZW5lbWllcywgYW5kIHRvIHNob3cgdG8gdGhlIHdvcmxkIGJ5IGhpcyBjb250ZW1wdCBmb3IgdGhlbSB0aGF0IGhlIGhlbGQgY29tcGxldGUgY29udHJvbCBvZiBhZmZhaXJzLCB3aXRoIHNvbWV0aGluZywgYXMgaXQgd2VyZSwgdG8gc3BhcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBvdGhlciB0aW1lcywgdGhlIFNwYXJ0YW4gYWxvbmUgb2YgR3JlZWsgb3IgTWFjZWRvbmlhbiBhcm1pZXMgaGFkIG5vIHBsYXllcnMgaW4gYXR0ZW5kYW5jZSwgbm8ganVnZ2xlcnMsIG5vIGRhbmNpbmctZ2lybHMsIG5vIGhhcnBpc3RzLCBidXQgd2FzIGZyZWUgZnJvbSBldmVyeSBraW5kIG9mIGxpY2VuY2UsIHNjdXJyaWxpdHksIGFuZCBnZW5lcmFsIGZlc3Rpdml0eTsgd2hpbGUgZm9yIHRoZSBtb3N0IHBhcnQgdGhlIHlvdW5nIG1lbiBwcmFjdGlzZWQgdGhlbXNlbHZlcyBhbmQgdGhlIGVsZGVyIG1lbiB0YXVnaHQgdGhlbSwgYW5kIGZvciBhbXVzZW1lbnQsIHdoZW4gdGhlaXIgd29yayB3YXMgb3ZlciwgdGhleSBoYWQgcmVjb3Vyc2UgdG8gdGhlaXIgd29udGVkIHBsZWFzYW50cmllcyBhbmQgdGhlIGludGVyY2hhbmdlIG9mIFNwYXJ0YW4gd2l0dGljaXNtcy4gT2Ygd2hhdCBncmVhdCBhZHZhbnRhZ2UgdGhpcyBzb3J0IG9mIGFtdXNlbWVudCBpcywgSSBoYXZlIHRvbGQgaW4gbXkgTGlmZSBvZiBMeWN1cmd1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTIuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciB4aWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxMi4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHhpaS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIGFsbCB0aGVzZSBtYXR0ZXJzIENsZW9tZW5lcyB3YXMgaGltc2VsZiBhIHRlYWNoZXIuIEhpcyBvd24gbWFubmVyIG9mIGxpZmUgd2FzIHNpbXBsZSwgcGxhaW4sIGFuZCBubyBtb3JlIHByZXRlbnRpb3VzIHRoYW4gdGhhdCBvZiB0aGUgY29tbW9uIG1hbiwgYW5kIGl0IHdhcyBhIHBhdHRlcm4gb2Ygc2VsZi1yZXN0cmFpbnQgZm9yIGFsbC4gVGhpcyBnYXZlIGhpbSBhIGdyZWF0IGFkdmFudGFnZSBpbiBoaXMgZGVhbGluZ3Mgd2l0aCB0aGUgb3RoZXIgR3JlZWtzLiBGb3Igd2hlbiBtZW4gaGFkIHRvIGRvIHdpdGggdGhlIG90aGVyIGtpbmdzLCB0aGV5IHdlcmUgbm90IHNvIG11Y2ggYXdlZCBieSB0aGVpciB3ZWFsdGggYW5kIGV4dHJhdmFnYW5jZSBhcyB0aGV5IHdlcmUgZmlsbGVkIHdpdGggbG9hdGhpbmcgZm9yIHRoZWlyIGhhdWdodGluZXNzIGFuZCBwb21wIGFzIHRoZXkgZ2F2ZSBvZmZlbnNpdmUgYW5kIGhhcnNoIGFuc3dlcnMgdG8gdGhlaXIgYXVkaXRvcnM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIG1lbiBjYW1lIHRvIENsZW9tZW5lcywgd2hvIHdhcyBhIHJlYWwgYXMgd2VsbCBhcyBhIHRpdGxlZCBraW5nLCBhbmQgdGhlbiBzYXcgbm8gcHJvZnVzaW9uIG9mIHB1cnBsZSByb2JlcyBvciBzaGF3bHMgYWJvdXQgaGltLCBhbmQgbm8gYXJyYXkgb2YgY291Y2hlcyBhbmQgbGl0dGVyczsgd2hlbiB0aGV5IHNhdywgdG9vLCB0aGF0IGhlIGRpZCBub3QgbWFrZSB0aGUgd29yayBvZiBoaXMgcGV0aXRpb25lcnMgZ3JpZXZvdXMgYW5kIHNsb3cgYnkgZW1wbG95aW5nIGEgdGhyb25nIG9mIG1lc3NlbmdlcnMgYW5kIGRvb3Ita2VlcGVycyBvciBieSByZXF1aXJpbmcgd3JpdHRlbiBtZW1vcmlhbHMsIGJ1dCBjYW1lIGluIHBlcnNvbiwganVzdCBhcyBoZSBoYXBwZW5lZCB0byBiZSBkcmVzc2VkLCB0byBhbnN3ZXIgdGhlIHNhbHV0YXRpb25zIG9mIGhpcyB2aXNpdG9ycywgY29udmVyc2luZyBhdCBsZW5ndGggd2l0aCB0aG9zZSB3aG8gbmVlZGVkIGhpcyBzZXJ2aWNlcyBhbmQgZGV2b3RpbmcgdGltZSBjaGVlcmZ1bGx5IGFuZCBraW5kbHkgdG8gdGhlbSwgdGhleSB3ZXJlIGNoYXJtZWQgYW5kIGNvbXBsZXRlbHkgd29uIG92ZXIsIGFuZCBkZWNsYXJlZCB0aGF0IGhlIGFsb25lIHdhcyBhIGRlc2NlbmRhbnQgb2YgSGVyYWNsZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWxsIHRoZXNlIG1hdHRlcnMgQ2xlb21lbmVzIHdhcyBoaW1zZWxmIGEgdGVhY2hlci4gSGlzIG93biBtYW5uZXIgb2YgbGlmZSB3YXMgc2ltcGxlLCBwbGFpbiwgYW5kIG5vIG1vcmUgcHJldGVudGlvdXMgdGhhbiB0aGF0IG9mIHRoZSBjb21tb24gbWFuLCBhbmQgaXQgd2FzIGEgcGF0dGVybiBvZiBzZWxmLXJlc3RyYWludCBmb3IgYWxsLiBUaGlzIGdhdmUgaGltIGEgZ3JlYXQgYWR2YW50YWdlIGluIGhpcyBkZWFsaW5ncyB3aXRoIHRoZSBvdGhlciBHcmVla3MuIEZvciB3aGVuIG1lbiBoYWQgdG8gZG8gd2l0aCB0aGUgb3RoZXIga2luZ3MsIHRoZXkgd2VyZSBub3Qgc28gbXVjaCBhd2VkIGJ5IHRoZWlyIHdlYWx0aCBhbmQgZXh0cmF2YWdhbmNlIGFzIHRoZXkgd2VyZSBmaWxsZWQgd2l0aCBsb2F0aGluZyBmb3IgdGhlaXIgaGF1Z2h0aW5lc3MgYW5kIHBvbXAgYXMgdGhleSBnYXZlIG9mZmVuc2l2ZSBhbmQgaGFyc2ggYW5zd2VycyB0byB0aGVpciBhdWRpdG9yczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIG1lbiBjYW1lIHRvIENsZW9tZW5lcywgd2hvIHdhcyBhIHJlYWwgYXMgd2VsbCBhcyBhIHRpdGxlZCBraW5nLCBhbmQgdGhlbiBzYXcgbm8gcHJvZnVzaW9uIG9mIHB1cnBsZSByb2JlcyBvciBzaGF3bHMgYWJvdXQgaGltLCBhbmQgbm8gYXJyYXkgb2YgY291Y2hlcyBhbmQgbGl0dGVyczsgd2hlbiB0aGV5IHNhdywgdG9vLCB0aGF0IGhlIGRpZCBub3QgbWFrZSB0aGUgd29yayBvZiBoaXMgcGV0aXRpb25lcnMgZ3JpZXZvdXMgYW5kIHNsb3cgYnkgZW1wbG95aW5nIGEgdGhyb25nIG9mIG1lc3NlbmdlcnMgYW5kIGRvb3Ita2VlcGVycyBvciBieSByZXF1aXJpbmcgd3JpdHRlbiBtZW1vcmlhbHMsIGJ1dCBjYW1lIGluIHBlcnNvbiwganVzdCBhcyBoZSBoYXBwZW5lZCB0byBiZSBkcmVzc2VkLCB0byBhbnN3ZXIgdGhlIHNhbHV0YXRpb25zIG9mIGhpcyB2aXNpdG9ycywgY29udmVyc2luZyBhdCBsZW5ndGggd2l0aCB0aG9zZSB3aG8gbmVlZGVkIGhpcyBzZXJ2aWNlcyBhbmQgZGV2b3RpbmcgdGltZSBjaGVlcmZ1bGx5IGFuZCBraW5kbHkgdG8gdGhlbSwgdGhleSB3ZXJlIGNoYXJtZWQgYW5kIGNvbXBsZXRlbHkgd29uIG92ZXIsIGFuZCBkZWNsYXJlZCB0aGF0IGhlIGFsb25lIHdhcyBhIGRlc2NlbmRhbnQgb2YgSGVyYWNsZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB1c3VhbCBzdXBwZXIgd2FzIGhlbGQgaW4gYSByb29tIHdoaWNoIGhhZCBvbmx5IHRocmVlIGNvdWNoZXMsIGFuZCB3YXMgdmVyeSBjaXJjdW1zY3JpYmVkIGFuZCBTcGFydGFuOyBidXQgaWYgaGUgd2FzIGVudGVydGFpbmluZyBhbWJhc3NhZG9ycyBvciBndWVzdC1mcmllbmRzLCB0d28gbW9yZSBjb3VjaGVzIHdvdWxkIGJlIGJyb3VnaHQgaW4sIGFuZCB0aGUgc2VydmFudHMgd291bGQgbWFrZSB0aGUgdGFibGUgYSB0cmlmbGUgbW9yZSBicmlsbGlhbnQsIG5vdCB3aXRoIHNhdWNlcyBvciBzd2VldG1lYXRzLCBidXQgd2l0aCBtb3JlIGdlbmVyb3VzIGRpc2hlcyBhbmQgYSBraW5kbGllciB3aW5lLiBBbmQgaW5kZWVkIGhlIGNlbnN1cmVkIG9uZSBvZiBoaXMgZnJpZW5kcywgd2hlbiBoZSBoZWFyZCB0aGF0IGluIGVudGVydGFpbmluZyBndWVzdC1mcmllbmRzIGhlIGhhZCBzZXQgYmVmb3JlIHRoZW0gdGhlIGJsYWNrIHNvdXAgYW5kIGJhcmxleS1icmVhZCBvZiB0aGUgcHVibGljIG1lc3MtdGFibGVzOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gdGhlc2UgbWF0dGVycyBhbmQgYmVmb3JlIGZvcmVpZ25lcnMgd2UgbXVzdCBub3QgYmUgdG9vIHN0cmljdGx5IFNwYXJ0YW4uPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSB0YWJsZSBoYWQgYmVlbiByZW1vdmVkLCBhIHRyaXBvZCB3b3VsZCBiZSBicm91Z2h0IGluIG9uIHdoaWNoIHdlcmUgYSBicm9uemUgbWl4ZXIgZnVsbCBvZiB3aW5lLCB0d28gc2lsdmVyIGJvd2VscyBob2xkaW5nIGEgcGludCBhcGllY2UsIGFuZCBkcmlua2luZyBjdXBzIG9mIHNpbHZlciwgZmV3IGFsbCB0b2xkLCBmcm9tIHdoaWNoIGhlIHdobyB3aXNoZWQgbWlnaHQgZHJpbms7IGJ1dCBubyBvbmUgaGFkIGEgY3VwIGZvcmNlZCB1cG9uIGhpbS4gTXVzaWMgdGhlcmUgd2FzIG5vbmUsIG5vciB3YXMgYW55IHN1Y2ggYWRkaXRpb24gZGVzaXJlZDsgZm9yIENsZW9tZW5lcyBlbnRlcnRhaW5lZCB0aGUgY29tcGFueSBoaW1zZWxmIGJ5IGhpcyBjb252ZXJzYXRpb24sIG5vdyBhc2tpbmcgcXVlc3Rpb25zLCBub3cgdGVsbGluZyBzdG9yaWVzLCBhbmQgaGlzIGRpc2NvdXJzZSB3YXMgbm90IHVucGxlYXNhbnRseSBzZXJpb3VzLCBidXQgaGFkIGEgc3BvcnRpdmVuZXNzIHRoYXQgY2hhcm1lZCBhbmQgd2FzIGZyZWUgZnJvbSBydWRlbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBodW50IHdoaWNoIGFsbCB0aGUgb3RoZXIga2luZ3MgbWFkZSBmb3IgbWVuLCBlbnNuYXJpbmcgdGhlbSB3aXRoIGdpZnRzIGFuZCBicmliZXMgYW5kIGNvcnJ1cHRpbmcgdGhlbSwgQ2xlb21lbmVzIGNvbnNpZGVyZWQgdW5za2lsbGZ1bCBhbmQgdW5qdXN0LiBJbiBoaXMgZXllcyBpdCB3YXMgdGhlIG5vYmxlc3QgbWV0aG9kLCBhbmQgb25lIG1vc3QgZml0IGZvciBhIGtpbmcsIHRvIHdpbiBvdmVyIGhpcyB2aXNpdG9ycyBhbmQgYXR0YWNoIHRoZW0gdG8gaGltc2VsZiBieSBhbiBpbnRlcmNvdXJzZSBhbmQgY29udmVyc2F0aW9uIHdoaWNoIGF3YWtlbmVkIHBsZWFzdXJlIGFuZCBjb25maWRlbmNlLiBGb3IgaGUgZmVsdCB0aGF0IGEgaGlyZWxpbmcgZGlmZmVyZWQgZnJvbSBhIGZyaWVuZCBpbiBub3RoaW5nIGV4Y2VwdCB0aGF0IHRoZSBvbmUgd2FzIGNhcHR1cmVkIGJ5IGEgbWFuJ3MgY2hhcmFjdGVyIGFuZCBjb252ZXJzYXRpb24sIHRoZSBvdGhlciBieSBhIG1hbidzIG1vbmV5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB1c3VhbCBzdXBwZXIgd2FzIGhlbGQgaW4gYSByb29tIHdoaWNoIGhhZCBvbmx5IHRocmVlIGNvdWNoZXMsIGFuZCB3YXMgdmVyeSBjaXJjdW1zY3JpYmVkIGFuZCBTcGFydGFuOyBidXQgaWYgaGUgd2FzIGVudGVydGFpbmluZyBhbWJhc3NhZG9ycyBvciBndWVzdC1mcmllbmRzLCB0d28gbW9yZSBjb3VjaGVzIHdvdWxkIGJlIGJyb3VnaHQgaW4sIGFuZCB0aGUgc2VydmFudHMgd291bGQgbWFrZSB0aGUgdGFibGUgYSB0cmlmbGUgbW9yZSBicmlsbGlhbnQsIG5vdCB3aXRoIHNhdWNlcyBvciBzd2VldG1lYXRzLCBidXQgd2l0aCBtb3JlIGdlbmVyb3VzIGRpc2hlcyBhbmQgYSBraW5kbGllciB3aW5lLiBBbmQgaW5kZWVkIGhlIGNlbnN1cmVkIG9uZSBvZiBoaXMgZnJpZW5kcywgd2hlbiBoZSBoZWFyZCB0aGF0IGluIGVudGVydGFpbmluZyBndWVzdC1mcmllbmRzIGhlIGhhZCBzZXQgYmVmb3JlIHRoZW0gdGhlIGJsYWNrIHNvdXAgYW5kIGJhcmxleS1icmVhZCBvZiB0aGUgcHVibGljIG1lc3MtdGFibGVzOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIHRoZXNlIG1hdHRlcnMgYW5kIGJlZm9yZSBmb3JlaWduZXJzIHdlIG11c3Qgbm90IGJlIHRvbyBzdHJpY3RseSBTcGFydGFuLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSB0YWJsZSBoYWQgYmVlbiByZW1vdmVkLCBhIHRyaXBvZCB3b3VsZCBiZSBicm91Z2h0IGluIG9uIHdoaWNoIHdlcmUgYSBicm9uemUgbWl4ZXIgZnVsbCBvZiB3aW5lLCB0d28gc2lsdmVyIGJvd2VscyBob2xkaW5nIGEgcGludCBhcGllY2UsIGFuZCBkcmlua2luZyBjdXBzIG9mIHNpbHZlciwgZmV3IGFsbCB0b2xkLCBmcm9tIHdoaWNoIGhlIHdobyB3aXNoZWQgbWlnaHQgZHJpbms7IGJ1dCBubyBvbmUgaGFkIGEgY3VwIGZvcmNlZCB1cG9uIGhpbS4gTXVzaWMgdGhlcmUgd2FzIG5vbmUsIG5vciB3YXMgYW55IHN1Y2ggYWRkaXRpb24gZGVzaXJlZDsgZm9yIENsZW9tZW5lcyBlbnRlcnRhaW5lZCB0aGUgY29tcGFueSBoaW1zZWxmIGJ5IGhpcyBjb252ZXJzYXRpb24sIG5vdyBhc2tpbmcgcXVlc3Rpb25zLCBub3cgdGVsbGluZyBzdG9yaWVzLCBhbmQgaGlzIGRpc2NvdXJzZSB3YXMgbm90IHVucGxlYXNhbnRseSBzZXJpb3VzLCBidXQgaGFkIGEgc3BvcnRpdmVuZXNzIHRoYXQgY2hhcm1lZCBhbmQgd2FzIGZyZWUgZnJvbSBydWRlbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgaHVudCB3aGljaCBhbGwgdGhlIG90aGVyIGtpbmdzIG1hZGUgZm9yIG1lbiwgZW5zbmFyaW5nIHRoZW0gd2l0aCBnaWZ0cyBhbmQgYnJpYmVzIGFuZCBjb3JydXB0aW5nIHRoZW0sIENsZW9tZW5lcyBjb25zaWRlcmVkIHVuc2tpbGxmdWwgYW5kIHVuanVzdC4gSW4gaGlzIGV5ZXMgaXQgd2FzIHRoZSBub2JsZXN0IG1ldGhvZCwgYW5kIG9uZSBtb3N0IGZpdCBmb3IgYSBraW5nLCB0byB3aW4gb3ZlciBoaXMgdmlzaXRvcnMgYW5kIGF0dGFjaCB0aGVtIHRvIGhpbXNlbGYgYnkgYW4gaW50ZXJjb3Vyc2UgYW5kIGNvbnZlcnNhdGlvbiB3aGljaCBhd2FrZW5lZCBwbGVhc3VyZSBhbmQgY29uZmlkZW5jZS4gRm9yIGhlIGZlbHQgdGhhdCBhIGhpcmVsaW5nIGRpZmZlcmVkIGZyb20gYSBmcmllbmQgaW4gbm90aGluZyBleGNlcHQgdGhhdCB0aGUgb25lIHdhcyBjYXB0dXJlZCBieSBhIG1hbidzIGNoYXJhY3RlciBhbmQgY29udmVyc2F0aW9uLCB0aGUgb3RoZXIgYnkgYSBtYW4ncyBtb25leS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgdGhlbiwgdGhlIE1hbnRpbmVpYW5zIGludml0ZWQgaGltIHRvIGhlbHAgdGhlbSwgYW5kIGFmdGVyIGhlIGhhZCBtYWRlIGhpcyB3YXkgaW50byB0aGUgY2l0eSBieSBuaWdodCwgdGhleSBleHBlbGxlZCB0aGUgQWNoYWVhbiBnYXJyaXNvbiBhbmQgcHV0IHRoZW1zZWx2ZXMgaW4gaGlzIGhhbmRzLiBDbGVvbWVuZXMgcmVzdG9yZWQgdG8gdGhlbSB0aGVpciBsYXdzIGFuZCBjb25zdGl0dXRpb24sIGFuZCBvbiB0aGUgc2FtZSBkYXkgbWFyY2hlZCBhd2F5IHRvIFRlZ2VhLiBUaGVuLCBzaG9ydGx5IGFmdGVyd2FyZHMsIGhlIGZldGNoZWQgYSBjb21wYXNzIHRocm91Z2ggQXJjYWRpYSBhbmQgbWFyY2hlZCBkb3duIHVwb24gdGhlIEFjaGFlYW4gY2l0eSBvZiBQaGVyYWUuIEhpcyBkZXNpcmUgd2FzIGVpdGhlciB0byBmaWdodCBhIGJhdHRsZSB3aXRoIHRoZSBBY2hhZWFucywgb3IgdG8gYnJpbmcgQXJhdHVzIGludG8gZGlzcmVwdXRlIGZvciBydW5uaW5nIGF3YXkgYW5kIGFiYW5kb25pbmcgdGhlIGNvdW50cnkgdG8gaGltLiBGb3IgYWx0aG91Z2ggSHlwZXJiYXRhcyB3YXMgZ2VuZXJhbCBhdCB0aGF0IHRpbWUsIEFyYXR1cyBoYWQgdGhlIGVudGlyZSBwb3dlciBpbiB0aGUgQWNoYWVhbiBsZWFndWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhZnRlciB0aGUgQWNoYWVhbnMgaGFkIG1hcmNoZWQgb3V0IHdpdGggYWxsIHRoZWlyIGZvcmNlcyBhbmQgcGl0Y2hlZCB0aGVpciBjYW1wIGF0IER5bWFlLCBuZWFyIHRoZSBIZWNhdG9tYmFldW0sIENsZW9tZW5lcyBjYW1lIHVwIGFnYWluc3QgdGhlbS4gSGUgZGlkIG5vdCB0aGluayBpdCB3ZWxsLCBob3dldmVyLCB0byBwaXRjaCBoaXMgb3duIGNhbXAgYmV0d2VlbiB0aGUgY2l0eSBvZiBEeW1hZSwgd2hpY2ggd2FzIGhvc3RpbGUsIGFuZCB0aGUgYXJteSBvZiB0aGUgQWNoYWVhbnMsIGFuZCB0aGVyZWZvcmUgYm9sZGx5IGNoYWxsZW5nZWQgdGhlIEFjaGFlYW5zIGFuZCBmb3JjZWQgdGhlbSB0byBlbmdhZ2UuIEhlIHdhcyBjb21wbGV0ZWx5IHZpY3RvcmlvdXMsIHJvdXRlZCB0aGVpciBwaGFsYW54LCBzbGV3IG1hbnkgb2YgdGhlbSBpbiB0aGUgYmF0dGxlLCBhbmQgdG9vayBtYW55IHByaXNvbmVycyBhbHNvLiBUaGVuIGhlIHdlbnQgdXAgYWdhaW5zdCBMYW5nb24sIGRyb3ZlIG91dCB0aGUgQWNoYWVhbiBnYXJyaXNvbiwgYW5kIHJlc3RvcmVkIHRoZSBjaXR5IHRvIHRoZSBFbGVpYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgdGhlbiwgdGhlIE1hbnRpbmVpYW5zIGludml0ZWQgaGltIHRvIGhlbHAgdGhlbSwgYW5kIGFmdGVyIGhlIGhhZCBtYWRlIGhpcyB3YXkgaW50byB0aGUgY2l0eSBieSBuaWdodCwgdGhleSBleHBlbGxlZCB0aGUgQWNoYWVhbiBnYXJyaXNvbiBhbmQgcHV0IHRoZW1zZWx2ZXMgaW4gaGlzIGhhbmRzLiBDbGVvbWVuZXMgcmVzdG9yZWQgdG8gdGhlbSB0aGVpciBsYXdzIGFuZCBjb25zdGl0dXRpb24sIGFuZCBvbiB0aGUgc2FtZSBkYXkgbWFyY2hlZCBhd2F5IHRvIFRlZ2VhLiBUaGVuLCBzaG9ydGx5IGFmdGVyd2FyZHMsIGhlIGZldGNoZWQgYSBjb21wYXNzIHRocm91Z2ggQXJjYWRpYSBhbmQgbWFyY2hlZCBkb3duIHVwb24gdGhlIEFjaGFlYW4gY2l0eSBvZiBQaGVyYWUuIEhpcyBkZXNpcmUgd2FzIGVpdGhlciB0byBmaWdodCBhIGJhdHRsZSB3aXRoIHRoZSBBY2hhZWFucywgb3IgdG8gYnJpbmcgQXJhdHVzIGludG8gZGlzcmVwdXRlIGZvciBydW5uaW5nIGF3YXkgYW5kIGFiYW5kb25pbmcgdGhlIGNvdW50cnkgdG8gaGltLiBGb3IgYWx0aG91Z2ggSHlwZXJiYXRhcyB3YXMgZ2VuZXJhbCBhdCB0aGF0IHRpbWUsIEFyYXR1cyBoYWQgdGhlIGVudGlyZSBwb3dlciBpbiB0aGUgQWNoYWVhbiBsZWFndWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhZnRlciB0aGUgQWNoYWVhbnMgaGFkIG1hcmNoZWQgb3V0IHdpdGggYWxsIHRoZWlyIGZvcmNlcyBhbmQgcGl0Y2hlZCB0aGVpciBjYW1wIGF0IER5bWFlLCBuZWFyIHRoZSBIZWNhdG9tYmFldW0sIENsZW9tZW5lcyBjYW1lIHVwIGFnYWluc3QgdGhlbS4gSGUgZGlkIG5vdCB0aGluayBpdCB3ZWxsLCBob3dldmVyLCB0byBwaXRjaCBoaXMgb3duIGNhbXAgYmV0d2VlbiB0aGUgY2l0eSBvZiBEeW1hZSwgd2hpY2ggd2FzIGhvc3RpbGUsIGFuZCB0aGUgYXJteSBvZiB0aGUgQWNoYWVhbnMsIGFuZCB0aGVyZWZvcmUgYm9sZGx5IGNoYWxsZW5nZWQgdGhlIEFjaGFlYW5zIGFuZCBmb3JjZWQgdGhlbSB0byBlbmdhZ2UuIEhlIHdhcyBjb21wbGV0ZWx5IHZpY3RvcmlvdXMsIHJvdXRlZCB0aGVpciBwaGFsYW54LCBzbGV3IG1hbnkgb2YgdGhlbSBpbiB0aGUgYmF0dGxlLCBhbmQgdG9vayBtYW55IHByaXNvbmVycyBhbHNvLiBUaGVuIGhlIHdlbnQgdXAgYWdhaW5zdCBMYW5nb24sIGRyb3ZlIG91dCB0aGUgQWNoYWVhbiBnYXJyaXNvbiwgYW5kIHJlc3RvcmVkIHRoZSBjaXR5IHRvIHRoZSBFbGVpYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQWNoYWVhbnMgaGF2aW5nIGJlZW4gdGh1cyB1dHRlcmx5IG92ZXJ3aGVsbWVkLCBBcmF0dXMsIHdobyB3YXMgd29udCB0byBiZSB0aGVpciBnZW5lcmFsIGV2ZXJ5IG90aGVyIHllYXIsIHJlZnVzZWQgdGhlIG9mZmljZSBhbmQgZGVjbGluZWQgdG8gbGlzdGVuIHRvIHRoZWlyIGludml0YXRpb25zIGFuZCBwcmF5ZXJzOyB0aHVzIHVud2lzZWx5LCB3aGVuIHRoZSBzaGlwIG9mIHN0YXRlIHdhcyBpbiBhIGhlYXZ5IHN0b3JtLCBoYW5kaW5nIG92ZXIgdGhlIGhlbG0gdG8gYW5vdGhlciBhbmQgYWJhbmRvbmluZyB0aGUgcG9zdCBvZiBhdXRob3JpdHkuIENsZW9tZW5lcywgb24gdGhlIG90aGVyIGhhbmQsIGF0IHRoZSBmaXJzdCB3YXMgdGhvdWdodCB0byBpbXBvc2UgbW9kZXJhdGUgdGVybXMgdXBvbiB0aGUgQWNoYWVhbiBlbWJhc3N5LCBidXQgYWZ0ZXJ3YXJkcyBoZSBzZW50IG90aGVyIGVudm95cyBhbmQgYmFkZSB0aGVtIGhhbmQgb3ZlciB0byBoaW0gdGhlIGxlYWRlcnNoaXAgYW1vbmcgdGhlIEdyZWVrcywgYXNzdXJpbmcgdGhlbSB0aGF0IG9uIG90aGVyIHBvaW50cyBoZSB3b3VsZCBub3QgcXVhcnJlbCB3aXRoIHRoZW0sIGJ1dCB3b3VsZCBhdCBvbmNlIHJlc3RvcmUgdG8gdGhlbSB0aGVpciBjYXB0aXZlcyBhbmQgdGhlaXIgc3Ryb25naG9sZHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMzguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BcmF0dXM8L3RpdGxlPiwgIHh4eHZpaWkuICA1Zi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQWNoYWVhbnMgd2VyZSB3aWxsaW5nIHRvIHNldHRsZSBtYXR0ZXJzIG9uIHRoZXNlIHRlcm1zLCBhbmQgaW52aXRlZCBDbGVvbWVuZXMgdG8gY29tZSB0byBMZXJuYSwgd2hlcmUgdGhleSB3ZXJlIGFib3V0IHRvIGhvbGQgdGhlaXIgYXNzZW1ibHkuIEJ1dCBpdCBmZWxsIG91dCB0aGF0IENsZW9tZW5lcywgd2hvIGhhZCBtYWRlIGEgc3RyZW51b3VzIG1hcmNoIGFuZCB0aGVuIHRvbyBzb29uIGhhZCBkcnVuayB3YXRlciwgYnJvdWdodCB1cCBhIGdyZWF0IHF1YW50aXR5IG9mIGJsb29kIGFuZCBsb3N0IGhpcyBzcGVlY2guIEZvciB0aGlzIHJlYXNvbiBoZSBzZW50IGJhY2sgdG8gdGhlIEFjaGFlYW5zIHRoZSBtb3N0IHByb21pbmVudCBtZW4gYW1vbmcgdGhlaXIgY2FwdGl2ZXMsIGJ1dCBwb3N0cG9uZWQgdGhlIGNvbmZlcmVuY2UgYW5kIHdlbnQgYmFjayBob21lIHRvIFNwYXJ0YS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEFjaGFlYW5zIGhhdmluZyBiZWVuIHRodXMgdXR0ZXJseSBvdmVyd2hlbG1lZCwgQXJhdHVzLCB3aG8gd2FzIHdvbnQgdG8gYmUgdGhlaXIgZ2VuZXJhbCBldmVyeSBvdGhlciB5ZWFyLCByZWZ1c2VkIHRoZSBvZmZpY2UgYW5kIGRlY2xpbmVkIHRvIGxpc3RlbiB0byB0aGVpciBpbnZpdGF0aW9ucyBhbmQgcHJheWVyczsgdGh1cyB1bndpc2VseSwgd2hlbiB0aGUgc2hpcCBvZiBzdGF0ZSB3YXMgaW4gYSBoZWF2eSBzdG9ybSwgaGFuZGluZyBvdmVyIHRoZSBoZWxtIHRvIGFub3RoZXIgYW5kIGFiYW5kb25pbmcgdGhlIHBvc3Qgb2YgYXV0aG9yaXR5LiBDbGVvbWVuZXMsIG9uIHRoZSBvdGhlciBoYW5kLCBhdCB0aGUgZmlyc3Qgd2FzIHRob3VnaHQgdG8gaW1wb3NlIG1vZGVyYXRlIHRlcm1zIHVwb24gdGhlIEFjaGFlYW4gZW1iYXNzeSwgYnV0IGFmdGVyd2FyZHMgaGUgc2VudCBvdGhlciBlbnZveXMgYW5kIGJhZGUgdGhlbSBoYW5kIG92ZXIgdG8gaGltIHRoZSBsZWFkZXJzaGlwIGFtb25nIHRoZSBHcmVla3MsIGFzc3VyaW5nIHRoZW0gdGhhdCBvbiBvdGhlciBwb2ludHMgaGUgd291bGQgbm90IHF1YXJyZWwgd2l0aCB0aGVtLCBidXQgd291bGQgYXQgb25jZSByZXN0b3JlIHRvIHRoZW0gdGhlaXIgY2FwdGl2ZXMgYW5kIHRoZWlyIHN0cm9uZ2hvbGRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAzOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sICB4eHh2aWlpLiAgNWYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAzOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sICB4eHh2aWlpLiAgNWYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgIHh4eHZpaWkuICA1Zi48L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBBY2hhZWFucyB3ZXJlIHdpbGxpbmcgdG8gc2V0dGxlIG1hdHRlcnMgb24gdGhlc2UgdGVybXMsIGFuZCBpbnZpdGVkIENsZW9tZW5lcyB0byBjb21lIHRvIExlcm5hLCB3aGVyZSB0aGV5IHdlcmUgYWJvdXQgdG8gaG9sZCB0aGVpciBhc3NlbWJseS4gQnV0IGl0IGZlbGwgb3V0IHRoYXQgQ2xlb21lbmVzLCB3aG8gaGFkIG1hZGUgYSBzdHJlbnVvdXMgbWFyY2ggYW5kIHRoZW4gdG9vIHNvb24gaGFkIGRydW5rIHdhdGVyLCBicm91Z2h0IHVwIGEgZ3JlYXQgcXVhbnRpdHkgb2YgYmxvb2QgYW5kIGxvc3QgaGlzIHNwZWVjaC4gRm9yIHRoaXMgcmVhc29uIGhlIHNlbnQgYmFjayB0byB0aGUgQWNoYWVhbnMgdGhlIG1vc3QgcHJvbWluZW50IG1lbiBhbW9uZyB0aGVpciBjYXB0aXZlcywgYnV0IHBvc3Rwb25lZCB0aGUgY29uZmVyZW5jZSBhbmQgd2VudCBiYWNrIGhvbWUgdG8gU3BhcnRhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHJ1aW5lZCB0aGUgY2F1c2Ugb2YgR3JlZWNlLCBhdCBhIHRpbWUgd2hlbiBzaGUgd2FzIHN0aWxsIGFibGUgaW4gc29tZSB3YXkgb3Igb3RoZXIgdG8gcmVjb3ZlciBmcm9tIGhlciBncmlldm91cyBwbGlnaHQgYW5kIGVzY2FwZSBNYWNlZG9uaWFuIGdyZWVkIGFuZCBpbnNvbGVuY2UuIEZvciBBcmF0dXMgKHdoZXRoZXIgaXQgd2FzIHRocm91Z2ggZGlzdHJ1c3QgYW5kIGZlYXIgb2YgQ2xlb21lbmVzLCBvciBiZWNhdXNlIGhlIGVudmllZCB0aGUga2luZyBoaXMgdW5sb29rZWQgZm9yIHN1Y2Nlc3MsIGFuZCB0aG91Z2h0IGl0IGEgdGVycmlibGUgdGhpbmcgYWZ0ZXIgdGhyZWUgYW5kIHRoaXJ0eSB5ZWFycyBvZiBsZWFkZXJzaGlwIHRvIGhhdmUgaGlzIG93biBmYW1lIGFuZCBwb3dlciBzdHJpcHBlZCBmcm9tIGhpbSBieSBhbiB1cHN0YXJ0IG9mIGEgeW91bmcgbWFuLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIGF1dGhvcml0eSB0YWtlbiBvdmVyIGluIGEgY2F1c2Ugd2hpY2ggaGUgaGltc2VsZiBoYWQgYnVpbHQgdXAgYW5kIGNvbnRyb2xsZWQgZm9yIHNvIGxvbmcgYSB0aW1lKSwgaW4gdGhlIGZpcnN0IHBsYWNlIHRyaWVkIHRvIGZvcmNlIHRoZSBBY2hhZWFucyBhc2lkZSBhbmQgaGluZGVyIHRoZWlyIHB1cnBvc2U7IGJ1dCB3aGVuIHRoZXkgcGFpZCBubyBoZWVkIHRvIGhpbSBpbiB0aGVpciBjb25zdGVybmF0aW9uIGF0IHRoZSBkYXJpbmcgc3Bpcml0IG9mIENsZW9tZW5lcywgYnV0IGFjdHVhbGx5IHNhdyBqdXN0aWNlIGluIHRoZSBkZW1hbmRzIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIHdlcmUgc2Vla2luZyB0byByZXN0b3JlIHRoZSBQZWxvcG9ubmVzdXMgdG8gaXRzIGFuY2llbnQgc3RhdHVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMgdG9vayBhIHN0ZXAgd2hpY2ggd291bGQgaGF2ZSBiZWVuIHVubWVldCBmb3IgYW55IEdyZWVrIHRvIHRha2UsIGJ1dCB3YXMgbW9zdCBzaGFtZWZ1bCBmb3IgaGltIGFuZCBtb3N0IHVud29ydGh5IG9mIGhpcyBjYXJlZXIgYXMgc29sZGllciBhbmQgc3RhdGVzbWFuLiBGb3IgaGUgaW52aXRlZCBBbnRpZ29udXMgaW50byBHcmVlY2UgYW5kIGZpbGxlZCB0aGUgUGVsb3Bvbm5lc3VzIHdpdGggTWFjZWRvbmlhbnMsIHdob20gaGUgaGltc2VsZiBoYWQgZHJpdmVuIG91dCBvZiBQZWxvcG9ubmVzdXMgd2hlbiwgYXMgYSB5b3VuZyBtYW4sIGhlIGRlbGl2ZXJlZCBBY3JvY29yaW50aHVzIGZyb20gdGhlaXIgcG93ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFyYXR1czwvdGl0bGU+LCB4dmkuIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPi1oZSB3aG8gaGFkIGluY3VycmVkIHRoZSBzdXNwaWNpb24gYW5kIGhvc3RpbGl0eSBvZiBhbGwgdGhlIHJlaWduaW5nIGtpbmdzLCBhbmQgb2YgdGhpcyB2ZXJ5IEFudGlnb251cyBoYWQgc2FpZCBjb3VudGxlc3MgZXZpbCB0aGluZ3MgaW4gdGhlIGNvbW1lbnRhcmllcyB3aGljaCBoZSBsZWZ0IGJlaGluZCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCwgdGhvdWdoIGhlIGhhZCBpbmN1cnJlZCBtYW55IGhhcmRzaGlwcyBhbmQgZGFuZ2VycyBpbiBiZWhhbGYgb2YgQXRoZW5zLCBhcyBoZSBzYXlzIGhpbXNlbGYsIGluIG9yZGVyIHRoYXQgdGhlIGNpdHkgbWlnaHQgYmUgc2V0IGZyZWUgZnJvbSBpdHMgZ2Fycmlzb24gb2YgTWFjZWRvbmlhbnMsIGhlIGFmdGVyd2FyZHMgYnJvdWdodCB0aGVzZSBNYWNlZG9uaWFucywgdW5kZXIgYXJtcywgaW50byBoaXMgb3duIGNvdW50cnkgYW5kIGludG8gaGlzIG93biBob21lOyBheWUsIGV2ZW4gaW50byB0aGUgYXBhcnRtZW50cyBvZiBoaXMgd29tZW47PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiA0OS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFyYXR1czwvdGl0bGU+LCAgeGxpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IGhlIHdvdWxkIG5vdCBjb25zZW50IHRoYXQgdGhlIG1hbiB3aG8gd2FzIGEgZGVzY2VuZGFudCBvZiBIZXJhY2xlcyBhbmQga2luZyBvZiBTcGFydGEsIGFuZCB3YXMgc2Vla2luZyB0byBicmluZyBpdHMgYW5jaWVudCBwb2xpdHksIG5vdyBsaWtlIGEgZGVjYWRlbnQgbW9vZHksIGJhY2sgYWdhaW4gdG8gdGhhdCByZXN0cmFpbmVkIGFuZCBEb3JpYW4gbGF3IGFuZCBsaWZlIHdoaWNoIEx5Y3VyZ3VzIGhhZCBpbnN0aXR1dGVkLCBzaG91bGQgYmUgZW50aXRsZWQgbGVhZGVyIG9mIFNpY3lvbiBhbmQgVHJpdGFlYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SW5zdGVhZCBvZiB0aGlzLCB0byBhdm9pZCB0aGUgU3BhcnRhbiBiYXJsZXktYnJlYWQgYW5kIHNob3J0LWNsb2FrLCBhbmQgdGhlIG1vc3QgZHJlYWRmdWwgb2YgdGhlIGV2aWxzIGZvciB3aGljaCBoZSBkZW5vdW5jZWQgQ2xlb21lbmVzLCBuYW1lbHksIGFib2xpdGlvbiBvZiB3ZWFsdGggYW5kIHJlc3RvcmF0aW9uIG9mIHBvdmVydHksIGhlIGNhc3QgaGltc2VsZiBhbmQgYWxsIEFjaGFlYSBkb3duIGJlZm9yZSBhIGRpYWRlbSwgYSBwdXJwbGUgcm9iZSwgTWFjZWRvbmlhbnMsIGFuZCBvcmllbnRhbCBiZWhlc3RzLiBBbmQgdGhhdCBoZSBtaWdodCBub3QgYmUgdGhvdWdodCB0byBvYmV5IENsZW9tZW5lcywgaGUgb2ZmZXJlZCBzYWNyaWZpY2VzIHRvIEFudGlnb251cyBhbmQgc2FuZyBwYWVhbnMgaGltc2VsZiwgd2l0aCBhIGdhcmxhbmQgb24gaGlzIGhlYWQsIGluIHByYWlzZSBvZiBhIG1hbiB3aG8gd2FzIGZhciBnb25lIHdpdGggY29uc3VtcHRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBydWluZWQgdGhlIGNhdXNlIG9mIEdyZWVjZSwgYXQgYSB0aW1lIHdoZW4gc2hlIHdhcyBzdGlsbCBhYmxlIGluIHNvbWUgd2F5IG9yIG90aGVyIHRvIHJlY292ZXIgZnJvbSBoZXIgZ3JpZXZvdXMgcGxpZ2h0IGFuZCBlc2NhcGUgTWFjZWRvbmlhbiBncmVlZCBhbmQgaW5zb2xlbmNlLiBGb3IgQXJhdHVzICh3aGV0aGVyIGl0IHdhcyB0aHJvdWdoIGRpc3RydXN0IGFuZCBmZWFyIG9mIENsZW9tZW5lcywgb3IgYmVjYXVzZSBoZSBlbnZpZWQgdGhlIGtpbmcgaGlzIHVubG9va2VkIGZvciBzdWNjZXNzLCBhbmQgdGhvdWdodCBpdCBhIHRlcnJpYmxlIHRoaW5nIGFmdGVyIHRocmVlIGFuZCB0aGlydHkgeWVhcnMgb2YgbGVhZGVyc2hpcCB0byBoYXZlIGhpcyBvd24gZmFtZSBhbmQgcG93ZXIgc3RyaXBwZWQgZnJvbSBoaW0gYnkgYW4gdXBzdGFydCBvZiBhIHlvdW5nIG1hbiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgYXV0aG9yaXR5IHRha2VuIG92ZXIgaW4gYSBjYXVzZSB3aGljaCBoZSBoaW1zZWxmIGhhZCBidWlsdCB1cCBhbmQgY29udHJvbGxlZCBmb3Igc28gbG9uZyBhIHRpbWUpLCBpbiB0aGUgZmlyc3QgcGxhY2UgdHJpZWQgdG8gZm9yY2UgdGhlIEFjaGFlYW5zIGFzaWRlIGFuZCBoaW5kZXIgdGhlaXIgcHVycG9zZTsgYnV0IHdoZW4gdGhleSBwYWlkIG5vIGhlZWQgdG8gaGltIGluIHRoZWlyIGNvbnN0ZXJuYXRpb24gYXQgdGhlIGRhcmluZyBzcGlyaXQgb2YgQ2xlb21lbmVzLCBidXQgYWN0dWFsbHkgc2F3IGp1c3RpY2UgaW4gdGhlIGRlbWFuZHMgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB3aG8gd2VyZSBzZWVraW5nIHRvIHJlc3RvcmUgdGhlIFBlbG9wb25uZXN1cyB0byBpdHMgYW5jaWVudCBzdGF0dXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyB0b29rIGEgc3RlcCB3aGljaCB3b3VsZCBoYXZlIGJlZW4gdW5tZWV0IGZvciBhbnkgR3JlZWsgdG8gdGFrZSwgYnV0IHdhcyBtb3N0IHNoYW1lZnVsIGZvciBoaW0gYW5kIG1vc3QgdW53b3J0aHkgb2YgaGlzIGNhcmVlciBhcyBzb2xkaWVyIGFuZCBzdGF0ZXNtYW4uIEZvciBoZSBpbnZpdGVkIEFudGlnb251cyBpbnRvIEdyZWVjZSBhbmQgZmlsbGVkIHRoZSBQZWxvcG9ubmVzdXMgd2l0aCBNYWNlZG9uaWFucywgd2hvbSBoZSBoaW1zZWxmIGhhZCBkcml2ZW4gb3V0IG9mIFBlbG9wb25uZXN1cyB3aGVuLCBhcyBhIHlvdW5nIG1hbiwgaGUgZGVsaXZlcmVkIEFjcm9jb3JpbnRodXMgZnJvbSB0aGVpciBwb3dlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHh2aS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+LWhlIHdobyBoYWQgaW5jdXJyZWQgdGhlIHN1c3BpY2lvbiBhbmQgaG9zdGlsaXR5IG9mIGFsbCB0aGUgcmVpZ25pbmcga2luZ3MsIGFuZCBvZiB0aGlzIHZlcnkgQW50aWdvbnVzIGhhZCBzYWlkIGNvdW50bGVzcyBldmlsIHRoaW5ncyBpbiB0aGUgY29tbWVudGFyaWVzIHdoaWNoIGhlIGxlZnQgYmVoaW5kIGhpbS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHh2aS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgeHZpLiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCwgdGhvdWdoIGhlIGhhZCBpbmN1cnJlZCBtYW55IGhhcmRzaGlwcyBhbmQgZGFuZ2VycyBpbiBiZWhhbGYgb2YgQXRoZW5zLCBhcyBoZSBzYXlzIGhpbXNlbGYsIGluIG9yZGVyIHRoYXQgdGhlIGNpdHkgbWlnaHQgYmUgc2V0IGZyZWUgZnJvbSBpdHMgZ2Fycmlzb24gb2YgTWFjZWRvbmlhbnMsIGhlIGFmdGVyd2FyZHMgYnJvdWdodCB0aGVzZSBNYWNlZG9uaWFucywgdW5kZXIgYXJtcywgaW50byBoaXMgb3duIGNvdW50cnkgYW5kIGludG8gaGlzIG93biBob21lOyBheWUsIGV2ZW4gaW50byB0aGUgYXBhcnRtZW50cyBvZiBoaXMgd29tZW47PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gNDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCAgeGxpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IGhlIHdvdWxkIG5vdCBjb25zZW50IHRoYXQgdGhlIG1hbiB3aG8gd2FzIGEgZGVzY2VuZGFudCBvZiBIZXJhY2xlcyBhbmQga2luZyBvZiBTcGFydGEsIGFuZCB3YXMgc2Vla2luZyB0byBicmluZyBpdHMgYW5jaWVudCBwb2xpdHksIG5vdyBsaWtlIGEgZGVjYWRlbnQgbW9vZHksIGJhY2sgYWdhaW4gdG8gdGhhdCByZXN0cmFpbmVkIGFuZCBEb3JpYW4gbGF3IGFuZCBsaWZlIHdoaWNoIEx5Y3VyZ3VzIGhhZCBpbnN0aXR1dGVkLCBzaG91bGQgYmUgZW50aXRsZWQgbGVhZGVyIG9mIFNpY3lvbiBhbmQgVHJpdGFlYS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiA0OS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sICB4bGl4LiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sICB4bGl4LiAxLjwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluc3RlYWQgb2YgdGhpcywgdG8gYXZvaWQgdGhlIFNwYXJ0YW4gYmFybGV5LWJyZWFkIGFuZCBzaG9ydC1jbG9haywgYW5kIHRoZSBtb3N0IGRyZWFkZnVsIG9mIHRoZSBldmlscyBmb3Igd2hpY2ggaGUgZGVub3VuY2VkIENsZW9tZW5lcywgbmFtZWx5LCBhYm9saXRpb24gb2Ygd2VhbHRoIGFuZCByZXN0b3JhdGlvbiBvZiBwb3ZlcnR5LCBoZSBjYXN0IGhpbXNlbGYgYW5kIGFsbCBBY2hhZWEgZG93biBiZWZvcmUgYSBkaWFkZW0sIGEgcHVycGxlIHJvYmUsIE1hY2Vkb25pYW5zLCBhbmQgb3JpZW50YWwgYmVoZXN0cy4gQW5kIHRoYXQgaGUgbWlnaHQgbm90IGJlIHRob3VnaHQgdG8gb2JleSBDbGVvbWVuZXMsIGhlIG9mZmVyZWQgc2FjcmlmaWNlcyB0byBBbnRpZ29udXMgYW5kIHNhbmcgcGFlYW5zIGhpbXNlbGYsIHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkLCBpbiBwcmFpc2Ugb2YgYSBtYW4gd2hvIHdhcyBmYXIgZ29uZSB3aXRoIGNvbnN1bXB0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JIHdyaXRlIHRoaXMsIGhvd2V2ZXIsIG5vdCB3aXRoIGFueSBkZXNpcmUgdG8gZGVub3VuY2UgQXJhdHVzLCBmb3IgaW4gbWFueSB3YXlzIGhlIHdhcyBhIHRydWUgR3JlZWsgYW5kIGEgZ3JlYXQgb25lLCBidXQgb3V0IG9mIHBpdHkgZm9yIHRoZSB3ZWFrbmVzcyBvZiBodW1hbiBuYXR1cmUsIHdoaWNoLCBldmVuIGluIGNoYXJhY3RlcnMgc28gbm90YWJseSBkaXNwb3NlZCB0b3dhcmRzIGV4Y2VsbGVuY2UsIGNhbm5vdCBwcm9kdWNlIGEgbm9iaWxpdHkgdGhhdCBpcyBmcmVlIGZyb20gYmxhbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkkgd3JpdGUgdGhpcywgaG93ZXZlciwgbm90IHdpdGggYW55IGRlc2lyZSB0byBkZW5vdW5jZSBBcmF0dXMsIGZvciBpbiBtYW55IHdheXMgaGUgd2FzIGEgdHJ1ZSBHcmVlayBhbmQgYSBncmVhdCBvbmUsIGJ1dCBvdXQgb2YgcGl0eSBmb3IgdGhlIHdlYWtuZXNzIG9mIGh1bWFuIG5hdHVyZSwgd2hpY2gsIGV2ZW4gaW4gY2hhcmFjdGVycyBzbyBub3RhYmx5IGRpc3Bvc2VkIHRvd2FyZHMgZXhjZWxsZW5jZSwgY2Fubm90IHByb2R1Y2UgYSBub2JpbGl0eSB0aGF0IGlzIGZyZWUgZnJvbSBibGFtZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgQWNoYWVhbnMgY2FtZSB0byBBcmdvcyBhZ2FpbiBmb3IgdGhlIGNvbmZlcmVuY2UsIGFuZCBDbGVvbWVuZXMgaGFkIGNvbWUgZG93biBmcm9tIFRlZ2VhLCBldmVyeW9uZSBoYWQgYSBzdHJvbmcgaG9wZSB0aGF0IHRoZXkgd291bGQgY29tZSB0byBhbiBhZ3JlZW1lbnQuIEJ1dCBBcmF0dXMsIHNpbmNlIHRoZSBtb3N0IGltcG9ydGFudCBxdWVzdGlvbnMgYmV0d2VlbiBoaW0gYW5kIEFudGlnb251cyBoYWQgYWxyZWFkeSBiZWVuIHNldHRsZWQsIGFuZCBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgdGhhdCBDbGVvbWVuZXMgd291bGQgY2FycnkgYWxsIGhpcyBwb2ludHMgYnkgZWl0aGVyIHdpbm5pbmcgb3ZlciBvciBjb25zdHJhaW5pbmcgdGhlIG11bHRpdHVkZSwgZGVtYW5kZWQgdGhhdCBDbGVvbWVuZXMsIGFmdGVyIHJlY2VpdmluZyB0aHJlZSBodW5kcmVkIGhvc3RhZ2VzLCBzaG91bGQgY29tZSBpbnRvIHRoZSBjaXR5IGFsb25lIGZvciBoaXMgY29uZmVyZW5jZSB3aXRoIHRoZW0sIG9yIGVsc2Ugc2hvdWxkIGNvbWUgd2l0aCBoaXMgYXJteSBhcyBmYXIgYXMgdGhlIGd5bW5hc2l1bSBvdXRzaWRlIHRoZSBjaXR5IGNhbGxlZCBDeWxsYXJhYml1bSwgYW5kIHRyZWF0IHdpdGggdGhlbSB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDbGVvbWVuZXMgaGVhcmQgdGhpcywgaGUgZGVjbGFyZWQgdGhhdCBoZSBoYWQgYmVlbiB3cm9uZ2VkOyBmb3IgaGUgb3VnaHQgdG8gaGF2ZSBiZWVuIHRvbGQgb2YgdGhpcyB3aGVuIHRoZSBjb25mZXJlbmNlIHdhcyBmaXJzdCBwcm9wb3NlZCwgYW5kIG5vdCBiZSBkaXN0cnVzdGVkIGFuZCBkcml2ZW4gYXdheSBub3csIHdoZW4gaGUgaGFkIGNvbWUgdG8gdGhlaXIgdmVyeSBkb29ycy4gVGhlbiwgYWZ0ZXIgd3JpdGluZyBhIGxldHRlciB0byB0aGUgQWNoYWVhbnMgb24gdGhlIG1hdHRlciwgbW9zdCBvZiB3aGljaCB3YXMgZGVudW5jaWF0aW9uIG9mIEFyYXR1cywgYW5kIGFmdGVyIEFyYXR1cyBvbiBoaXMgcGFydCBoYWQgYWJ1c2VkIGhpbSBhdCBncmVhdCBsZW5ndGggdG8gdGhlIG11bHRpdHVkZSwgQ2xlb21lbmVzIGJyb2tlIGNhbXAgd2l0aCBhbGwgc3BlZWQgYW5kIHNlbnQgYSBoZXJhbGQgdG8gZGVjbGFyZSB3YXIgdXBvbiB0aGUgQWNoYWVhbnMsIG5vdCB0byBBcmdvcywgYnV0IHRvIEFlZ2l1bSwgaW4gb3JkZXIsIGFzIEFyYXR1cyBzYXlzLCB0aGF0IGhlIG1pZ2h0IGFudGljaXBhdGUgdGhlaXIgcHJlcGFyYXRpb25zIGZvciBkZWZlbmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDM5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QXJhdHVzPC90aXRsZT4sICB4eHhpeC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgQWNoYWVhbnMgY2FtZSB0byBBcmdvcyBhZ2FpbiBmb3IgdGhlIGNvbmZlcmVuY2UsIGFuZCBDbGVvbWVuZXMgaGFkIGNvbWUgZG93biBmcm9tIFRlZ2VhLCBldmVyeW9uZSBoYWQgYSBzdHJvbmcgaG9wZSB0aGF0IHRoZXkgd291bGQgY29tZSB0byBhbiBhZ3JlZW1lbnQuIEJ1dCBBcmF0dXMsIHNpbmNlIHRoZSBtb3N0IGltcG9ydGFudCBxdWVzdGlvbnMgYmV0d2VlbiBoaW0gYW5kIEFudGlnb251cyBoYWQgYWxyZWFkeSBiZWVuIHNldHRsZWQsIGFuZCBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgdGhhdCBDbGVvbWVuZXMgd291bGQgY2FycnkgYWxsIGhpcyBwb2ludHMgYnkgZWl0aGVyIHdpbm5pbmcgb3ZlciBvciBjb25zdHJhaW5pbmcgdGhlIG11bHRpdHVkZSwgZGVtYW5kZWQgdGhhdCBDbGVvbWVuZXMsIGFmdGVyIHJlY2VpdmluZyB0aHJlZSBodW5kcmVkIGhvc3RhZ2VzLCBzaG91bGQgY29tZSBpbnRvIHRoZSBjaXR5IGFsb25lIGZvciBoaXMgY29uZmVyZW5jZSB3aXRoIHRoZW0sIG9yIGVsc2Ugc2hvdWxkIGNvbWUgd2l0aCBoaXMgYXJteSBhcyBmYXIgYXMgdGhlIGd5bW5hc2l1bSBvdXRzaWRlIHRoZSBjaXR5IGNhbGxlZCBDeWxsYXJhYml1bSwgYW5kIHRyZWF0IHdpdGggdGhlbSB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2xlb21lbmVzIGhlYXJkIHRoaXMsIGhlIGRlY2xhcmVkIHRoYXQgaGUgaGFkIGJlZW4gd3JvbmdlZDsgZm9yIGhlIG91Z2h0IHRvIGhhdmUgYmVlbiB0b2xkIG9mIHRoaXMgd2hlbiB0aGUgY29uZmVyZW5jZSB3YXMgZmlyc3QgcHJvcG9zZWQsIGFuZCBub3QgYmUgZGlzdHJ1c3RlZCBhbmQgZHJpdmVuIGF3YXkgbm93LCB3aGVuIGhlIGhhZCBjb21lIHRvIHRoZWlyIHZlcnkgZG9vcnMuIFRoZW4sIGFmdGVyIHdyaXRpbmcgYSBsZXR0ZXIgdG8gdGhlIEFjaGFlYW5zIG9uIHRoZSBtYXR0ZXIsIG1vc3Qgb2Ygd2hpY2ggd2FzIGRlbnVuY2lhdGlvbiBvZiBBcmF0dXMsIGFuZCBhZnRlciBBcmF0dXMgb24gaGlzIHBhcnQgaGFkIGFidXNlZCBoaW0gYXQgZ3JlYXQgbGVuZ3RoIHRvIHRoZSBtdWx0aXR1ZGUsIENsZW9tZW5lcyBicm9rZSBjYW1wIHdpdGggYWxsIHNwZWVkIGFuZCBzZW50IGEgaGVyYWxkIHRvIGRlY2xhcmUgd2FyIHVwb24gdGhlIEFjaGFlYW5zLCBub3QgdG8gQXJnb3MsIGJ1dCB0byBBZWdpdW0sIGluIG9yZGVyLCBhcyBBcmF0dXMgc2F5cywgdGhhdCBoZSBtaWdodCBhbnRpY2lwYXRlIHRoZWlyIHByZXBhcmF0aW9ucyBmb3IgZGVmZW5jZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMzkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCAgeHh4aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDM5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgIHh4eGl4LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sICB4eHhpeC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZXJlIGhhZCBiZWVuIGFnaXRhdGlvbiBhbW9uZyB0aGUgQWNoYWVhbnMsIGFuZCB0aGVpciBjaXRpZXMgd2VyZSBlYWdlciBmb3IgcmV2b2x0LCB0aGUgY29tbW9uIHBlb3BsZSBleHBlY3RpbmcgZGl2aXNpb24gb2YgbGFuZCBhbmQgYWJvbGl0aW9uIG9mIGRlYnRzLCBhbmQgdGhlIGxlYWRpbmcgbWVuIGluIG1hbnkgY2FzZXMgYmVpbmcgZGlzc2F0aXNmaWVkIHdpdGggQXJhdHVzLCBhbmQgc29tZSBvZiB0aGVtIGFsc28gZW5yYWdlZCBhdCBoaW0gZm9yIGJyaW5naW5nIE1hY2Vkb25pYW5zIGludG8gUGVsb3Bvbm5lc3VzLiBUaGVyZWZvcmUgQ2xlb21lbmVzLCBlbmNvdXJhZ2VkIGJ5IHRoZXNlIGNvbmRpdGlvbnMsIGludmFkZWQgQWNoYWVhLiBGaXJzdCwgaGUgdG9vayBQZWxsZW7DqSBieSBhIHN1ZGRlbiBhc3NhdWx0LCBhbmQgZHJvdmUgb3V0IHRoZSBBY2hhZWFuIGdhcnJpc29uOyBuZXh0LCBoZSBicm91Z2h0IG92ZXIgdG8gaGlzIGNhdXNlIFBoZW5ldXMgYW5kIFBlbnRlbGNpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB0aGUgQWNoYWVhbnMsIHdobyB3ZXJlIGFmcmFpZCB0aGF0IHNvbWUgdHJlYWNoZXJ5IHdhcyBhZm9vdCBpbiBDb3JpbnRoIGFuZCBTaWN5b24sIHNlbnQgdGhlaXIgaG9yc2VtZW4gYW5kIHRoZWlyIG1lcmNlbmFyaWVzIG91dCBvZiBBcmdvcyB0byBrZWVwIHdhdGNoIG92ZXIgdGhvc2UgY2l0aWVzLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgd2VudCBkb3duIHRvIEFyZ29zIGFuZCBiZWdhbiBjZWxlYnJhdGluZyB0aGUgTmVtZWFuIGdhbWVzLiBTbyBDbGVvbWVuZXMsIGV4cGVjdGluZywgYXMgd2FzIHRoZSBjYXNlLCB0aGF0IHdoaWxlIHRoZSB0aHJvbmcgd2FzIGhvbGRpbmcgZmVzdGl2YWwgYW5kIHRoZSBjaXR5IHdhcyBmdWxsIG9mIHNwZWN0YXRvcnMsIGhpcyB1bmV4cGVjdGVkIGFwcHJvYWNoIHdvdWxkIGJlIG1vcmUgYXB0IHRvIGNhdXNlIGNvbmZ1c2lvbiwgbGVkIGhpcyBhcm15IGJ5IG5pZ2h0IHVwIHRvIHRoZSB3YWxscywgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+b2NjdXBpZWQgdGhlIHJlZ2lvbiBhYm91dCB0aGUgQXNwaXMgb3Zlcmxvb2tpbmcgdGhlIHRoZWF0cmUsIGEgcmVnaW9uIHdoaWNoIHdhcyBydWdnZWQgYW5kIGhhcmQgdG8gY29tZSBhdCwgYW5kIHNvIHRlcnJpZmllZCB0aGUgaW5oYWJpdGFudHMgdGhhdCBub3QgYSBtYW4gb2YgdGhlbSB0aG91Z2h0IG9mIGRlZmVuY2UsIGJ1dCB0aGV5IGFjY2VwdGVkIGEgZ2Fycmlzb24gYW5kIGdhdmUgdHdlbnR5IGNpdGl6ZW5zIGFzIGhvc3RhZ2VzLCBhZ3JlZWluZyB0byBiZWNvbWUgYWxsaWVzIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgYW5kIHRvIGdpdmUgQ2xlb21lbmVzIHRoZSBjaGllZiBjb21tYW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgaGFkIGJlZW4gYWdpdGF0aW9uIGFtb25nIHRoZSBBY2hhZWFucywgYW5kIHRoZWlyIGNpdGllcyB3ZXJlIGVhZ2VyIGZvciByZXZvbHQsIHRoZSBjb21tb24gcGVvcGxlIGV4cGVjdGluZyBkaXZpc2lvbiBvZiBsYW5kIGFuZCBhYm9saXRpb24gb2YgZGVidHMsIGFuZCB0aGUgbGVhZGluZyBtZW4gaW4gbWFueSBjYXNlcyBiZWluZyBkaXNzYXRpc2ZpZWQgd2l0aCBBcmF0dXMsIGFuZCBzb21lIG9mIHRoZW0gYWxzbyBlbnJhZ2VkIGF0IGhpbSBmb3IgYnJpbmdpbmcgTWFjZWRvbmlhbnMgaW50byBQZWxvcG9ubmVzdXMuIFRoZXJlZm9yZSBDbGVvbWVuZXMsIGVuY291cmFnZWQgYnkgdGhlc2UgY29uZGl0aW9ucywgaW52YWRlZCBBY2hhZWEuIEZpcnN0LCBoZSB0b29rIFBlbGxlbsOpIGJ5IGEgc3VkZGVuIGFzc2F1bHQsIGFuZCBkcm92ZSBvdXQgdGhlIEFjaGFlYW4gZ2Fycmlzb247IG5leHQsIGhlIGJyb3VnaHQgb3ZlciB0byBoaXMgY2F1c2UgUGhlbmV1cyBhbmQgUGVudGVsY2l1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB0aGUgQWNoYWVhbnMsIHdobyB3ZXJlIGFmcmFpZCB0aGF0IHNvbWUgdHJlYWNoZXJ5IHdhcyBhZm9vdCBpbiBDb3JpbnRoIGFuZCBTaWN5b24sIHNlbnQgdGhlaXIgaG9yc2VtZW4gYW5kIHRoZWlyIG1lcmNlbmFyaWVzIG91dCBvZiBBcmdvcyB0byBrZWVwIHdhdGNoIG92ZXIgdGhvc2UgY2l0aWVzLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgd2VudCBkb3duIHRvIEFyZ29zIGFuZCBiZWdhbiBjZWxlYnJhdGluZyB0aGUgTmVtZWFuIGdhbWVzLiBTbyBDbGVvbWVuZXMsIGV4cGVjdGluZywgYXMgd2FzIHRoZSBjYXNlLCB0aGF0IHdoaWxlIHRoZSB0aHJvbmcgd2FzIGhvbGRpbmcgZmVzdGl2YWwgYW5kIHRoZSBjaXR5IHdhcyBmdWxsIG9mIHNwZWN0YXRvcnMsIGhpcyB1bmV4cGVjdGVkIGFwcHJvYWNoIHdvdWxkIGJlIG1vcmUgYXB0IHRvIGNhdXNlIGNvbmZ1c2lvbiwgbGVkIGhpcyBhcm15IGJ5IG5pZ2h0IHVwIHRvIHRoZSB3YWxscywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm9jY3VwaWVkIHRoZSByZWdpb24gYWJvdXQgdGhlIEFzcGlzIG92ZXJsb29raW5nIHRoZSB0aGVhdHJlLCBhIHJlZ2lvbiB3aGljaCB3YXMgcnVnZ2VkIGFuZCBoYXJkIHRvIGNvbWUgYXQsIGFuZCBzbyB0ZXJyaWZpZWQgdGhlIGluaGFiaXRhbnRzIHRoYXQgbm90IGEgbWFuIG9mIHRoZW0gdGhvdWdodCBvZiBkZWZlbmNlLCBidXQgdGhleSBhY2NlcHRlZCBhIGdhcnJpc29uIGFuZCBnYXZlIHR3ZW50eSBjaXRpemVucyBhcyBob3N0YWdlcywgYWdyZWVpbmcgdG8gYmVjb21lIGFsbGllcyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCB0byBnaXZlIENsZW9tZW5lcyB0aGUgY2hpZWYgY29tbWFuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBncmVhdGx5IGluY3JlYXNlZCB0aGUgcmVwdXRhdGlvbiBhbmQgcG93ZXIgb2YgQ2xlb21lbmVzLiBGb3IgdGhlIGFuY2llbnQga2luZ3Mgb2YgU3BhcnRhLCBpbiBzcGl0ZSBvZiBudW1lcm91cyBlZmZvcnRzLCB3ZXJlIG5vdCBhYmxlIHRvIHNlY3VyZSB0aGUgYWJpZGluZyBhbGxlZ2lhbmNlIG9mIEFyZ29zOyBhbmQgdGhlIG1vc3QgZm9ybWlkYWJsZSBvZiBnZW5lcmFscywgUHlycmh1cywgYWx0aG91Z2ggaGUgZm91Z2h0IGhpcyB3YXkgaW50byB0aGUgY2l0eSwgY291bGQgbm90IGhvbGQgaXQsIGJ1dCB3YXMgc2xhaW4gdGhlcmUsIGFuZCBhIGdyZWF0IHBhcnQgb2YgaGlzIGFybXkgcGVyaXNoZWQgd2l0aCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHlycmguIDMyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UHlycmh1czwvdGl0bGU+LCB4eHhpaS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIG1lbiBhZG1pcmVkIHRoZSBzd2lmdG5lc3MgYW5kIGludGVsbGlnZW5jZSBvZiBDbGVvbWVuZXM7IGFuZCB0aG9zZSB3aG8gYmVmb3JlIHRoaXMgaGFkIG1vY2tlZCBhdCBoaW0gZm9yIGltaXRhdGluZywgYXMgdGhleSBzYWlkLCBTb2xvbiBhbmQgTHljdXJndXMgaW4gdGhlIGFib2xpdGlvbiBvZiBkZWJ0cyBhbmQgdGhlIGVxdWFsaXphdGlvbiBvZiBwcm9wZXJ0eSwgd2VyZSBub3cgYWx0b2dldGhlciBjb252aW5jZWQgdGhhdCB0aGlzIGltaXRhdGlvbiB3YXMgdGhlIGNhdXNlIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIFNwYXJ0YW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlc2Ugd2VyZSBmb3JtZXJseSBpbiBzbyBsb3cgYSBzdGF0ZSBhbmQgc28gdW5hYmxlIHRvIGhlbHAgdGhlbXNlbHZlcywgdGhhdCBBZXRvbGlhbnMgaW52YWRlZCBMYWNvbmlhIGFuZCB0b29rIGF3YXkgZmlmdHkgdGhvdXNhbmQgc2xhdmVzLiBJdCB3YXMgYXQgdGhpcyB0aW1lLCB3ZSBhcmUgdG9sZCwgdGhhdCBvbmUgb2YgdGhlIGVsZGVyIFNwYXJ0YW5zIHJlbWFya2VkIHRoYXQgdGhlIGVuZW15IGhhZCBoZWxwZWQgU3BhcnRhIGJ5IGxpZ2h0ZW5pbmcgaGVyIGJ1cmRlbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyBvbmx5IGEgbGl0dGxlIHRpbWUgaGFkIGVsYXBzZWQsIGFuZCB0aGV5IGhhZCBhcyB5ZXQgYmFyZWx5IHJlc3VtZWQgdGhlaXIgbmF0aXZlIGN1c3RvbXMgYW5kIHJlZW50ZXJlZCB0aGUgdHJhY2sgb2YgdGhlaXIgZmFtb3VzIGRpc2NpcGxpbmUsIHdoZW4sIGFzIGlmIGJlZm9yZSB0aGUgdmVyeSBleWVzIG9mIEx5Y3VyZ3VzIGFuZCB3aXRoIGhpcyBjb29wZXJhdGlvbiwgdGhleSBnYXZlIGFidW5kYW50IHByb29mIG9mIHZhbG91ciBhbmQgb2JlZGllbmNlIHRvIGF1dGhvcml0eSwgYnkgcmVjb3ZlcmluZyB0aGUgbGVhZGVyc2hpcCBvZiBIZWxsYXMgZm9yIFNwYXJ0YSBhbmQgbWFraW5nIGFsbCBQZWxvcG9ubmVzdXMgdGhlaXIgb3duIGFnYWluLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBncmVhdGx5IGluY3JlYXNlZCB0aGUgcmVwdXRhdGlvbiBhbmQgcG93ZXIgb2YgQ2xlb21lbmVzLiBGb3IgdGhlIGFuY2llbnQga2luZ3Mgb2YgU3BhcnRhLCBpbiBzcGl0ZSBvZiBudW1lcm91cyBlZmZvcnRzLCB3ZXJlIG5vdCBhYmxlIHRvIHNlY3VyZSB0aGUgYWJpZGluZyBhbGxlZ2lhbmNlIG9mIEFyZ29zOyBhbmQgdGhlIG1vc3QgZm9ybWlkYWJsZSBvZiBnZW5lcmFscywgUHlycmh1cywgYWx0aG91Z2ggaGUgZm91Z2h0IGhpcyB3YXkgaW50byB0aGUgY2l0eSwgY291bGQgbm90IGhvbGQgaXQsIGJ1dCB3YXMgc2xhaW4gdGhlcmUsIGFuZCBhIGdyZWF0IHBhcnQgb2YgaGlzIGFybXkgcGVyaXNoZWQgd2l0aCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB5cnJoLiAzMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4eHhpaS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQeXJyaC4gMzIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB5cnJodXM8L3RpdGxlPiwgeHh4aWkuIGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHlycmh1czwvdGl0bGU+LCB4eHhpaS4gZmYuPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBtZW4gYWRtaXJlZCB0aGUgc3dpZnRuZXNzIGFuZCBpbnRlbGxpZ2VuY2Ugb2YgQ2xlb21lbmVzOyBhbmQgdGhvc2Ugd2hvIGJlZm9yZSB0aGlzIGhhZCBtb2NrZWQgYXQgaGltIGZvciBpbWl0YXRpbmcsIGFzIHRoZXkgc2FpZCwgU29sb24gYW5kIEx5Y3VyZ3VzIGluIHRoZSBhYm9saXRpb24gb2YgZGVidHMgYW5kIHRoZSBlcXVhbGl6YXRpb24gb2YgcHJvcGVydHksIHdlcmUgbm93IGFsdG9nZXRoZXIgY29udmluY2VkIHRoYXQgdGhpcyBpbWl0YXRpb24gd2FzIHRoZSBjYXVzZSBvZiB0aGUgY2hhbmdlIGluIHRoZSBTcGFydGFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSB3ZXJlIGZvcm1lcmx5IGluIHNvIGxvdyBhIHN0YXRlIGFuZCBzbyB1bmFibGUgdG8gaGVscCB0aGVtc2VsdmVzLCB0aGF0IEFldG9saWFucyBpbnZhZGVkIExhY29uaWEgYW5kIHRvb2sgYXdheSBmaWZ0eSB0aG91c2FuZCBzbGF2ZXMuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIHdlIGFyZSB0b2xkLCB0aGF0IG9uZSBvZiB0aGUgZWxkZXIgU3BhcnRhbnMgcmVtYXJrZWQgdGhhdCB0aGUgZW5lbXkgaGFkIGhlbHBlZCBTcGFydGEgYnkgbGlnaHRlbmluZyBoZXIgYnVyZGVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgb25seSBhIGxpdHRsZSB0aW1lIGhhZCBlbGFwc2VkLCBhbmQgdGhleSBoYWQgYXMgeWV0IGJhcmVseSByZXN1bWVkIHRoZWlyIG5hdGl2ZSBjdXN0b21zIGFuZCByZWVudGVyZWQgdGhlIHRyYWNrIG9mIHRoZWlyIGZhbW91cyBkaXNjaXBsaW5lLCB3aGVuLCBhcyBpZiBiZWZvcmUgdGhlIHZlcnkgZXllcyBvZiBMeWN1cmd1cyBhbmQgd2l0aCBoaXMgY29vcGVyYXRpb24sIHRoZXkgZ2F2ZSBhYnVuZGFudCBwcm9vZiBvZiB2YWxvdXIgYW5kIG9iZWRpZW5jZSB0byBhdXRob3JpdHksIGJ5IHJlY292ZXJpbmcgdGhlIGxlYWRlcnNoaXAgb2YgSGVsbGFzIGZvciBTcGFydGEgYW5kIG1ha2luZyBhbGwgUGVsb3Bvbm5lc3VzIHRoZWlyIG93biBhZ2Fpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBBcmdvcyB3YXMgdGFrZW4gYnkgQ2xlb21lbmVzLCBhbmQgaW1tZWRpYXRlbHkgYWZ0ZXJ3YXJkcyBDbGVvbmFlIGFuZCBQaGxpdXMgY2FtZSBvdmVyIHRvIGhpbS4gV2hlbiB0aGlzIGhhcHBlbmVkLCBBcmF0dXMgd2FzIGF0IENvcmludGgsIGhvbGRpbmcgYSBqdWRpY2lhbCBleGFtaW5hdGlvbiBvZiB0aG9zZSB3aG8gd2VyZSByZXB1dGVkIHRvIGZhdm91ciB0aGUgU3BhcnRhbiBjYXVzZS4gVGhlIHVuZXhwZWN0ZWQgdGlkaW5ncyB0aHJldyBoaW0gaW50byBjb25zdGVybmF0aW9uLCBhbmQgcGVyY2VpdmluZyB0aGF0IHRoZSBjaXR5IHdhcyBsZWFuaW5nIHRvd2FyZHMgQ2xlb21lbmVzIGFuZCB3aXNoZWQgdG8gYmUgcmlkIG9mIHRoZSBBY2hhZWFucywgaGUgc3VtbW9uZWQgdGhlIGNpdGl6ZW5zIGludG8gdGhlIGNvdW5jaWwtaGFsbCwgYW5kIHRoZW4gc2xpcHBlZCBhd2F5IHVubm90aWNlZCB0byB0aGUgY2l0eSBnYXRlLiBUaGVyZSBoaXMgaG9yc2Ugd2FzIGJyb3VnaHQgdG8gaGltLCBhbmQgbW91bnRpbmcgaXQgaGUgZmxlZCB0byBTaWN5b24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBDb3JpbnRoaWFucyB3ZXJlIHNvIGVhZ2VyIHRvIGdldCB0byBDbGVvbWVuZXMgYXQgQXJnb3MgdGhhdCwgYXMgQXJhdHVzIHNheXMsIGFsbCB0aGVpciBob3JzZXMgd2VyZSBydWluZWQuIEFyYXR1cyBzYXlzIGFsc28gdGhhdCBDbGVvbWVuZXMgdXBicmFpZGVkIHRoZSBDb3JpbnRoaWFucyBmb3Igbm90IHNlaXppbmcgaGltLCBidXQgbGV0dGluZyBoaW0gZXNjYXBlOyBob3dldmVyLCBNZWdpc3Rvbm/DvHMgY2FtZSB0byBoaW0sIGhlIHNheXMsIGJyaW5naW5nIGZyb20gQ2xlb21lbmVzIGEgcmVxdWVzdCBmb3IgdGhlIHN1cnJlbmRlciBvZiBBY3JvY29yaW50aHVzICh3aGljaCB3YXMgaGVsZCBieSBhbiBBY2hhZWFuIGdhcnJpc29uKSBhbmQgYW4gb2ZmZXIgb2YgYSBsYXJnZSBzdW0gb2YgbW9uZXkgZm9yIGl0OyB0byB3aGljaCBoZSByZXBsaWVkIHRoYXQgaGUgZGlkIG5vdCBjb250cm9sIGFmZmFpcnMsIGJ1dCByYXRoZXIgYWZmYWlycyBjb250cm9sbGVkIGhpbS4gVGhpcyBpcyB3aGF0IEFyYXR1cyB3cml0ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBBcmdvcyB3YXMgdGFrZW4gYnkgQ2xlb21lbmVzLCBhbmQgaW1tZWRpYXRlbHkgYWZ0ZXJ3YXJkcyBDbGVvbmFlIGFuZCBQaGxpdXMgY2FtZSBvdmVyIHRvIGhpbS4gV2hlbiB0aGlzIGhhcHBlbmVkLCBBcmF0dXMgd2FzIGF0IENvcmludGgsIGhvbGRpbmcgYSBqdWRpY2lhbCBleGFtaW5hdGlvbiBvZiB0aG9zZSB3aG8gd2VyZSByZXB1dGVkIHRvIGZhdm91ciB0aGUgU3BhcnRhbiBjYXVzZS4gVGhlIHVuZXhwZWN0ZWQgdGlkaW5ncyB0aHJldyBoaW0gaW50byBjb25zdGVybmF0aW9uLCBhbmQgcGVyY2VpdmluZyB0aGF0IHRoZSBjaXR5IHdhcyBsZWFuaW5nIHRvd2FyZHMgQ2xlb21lbmVzIGFuZCB3aXNoZWQgdG8gYmUgcmlkIG9mIHRoZSBBY2hhZWFucywgaGUgc3VtbW9uZWQgdGhlIGNpdGl6ZW5zIGludG8gdGhlIGNvdW5jaWwtaGFsbCwgYW5kIHRoZW4gc2xpcHBlZCBhd2F5IHVubm90aWNlZCB0byB0aGUgY2l0eSBnYXRlLiBUaGVyZSBoaXMgaG9yc2Ugd2FzIGJyb3VnaHQgdG8gaGltLCBhbmQgbW91bnRpbmcgaXQgaGUgZmxlZCB0byBTaWN5b24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBDb3JpbnRoaWFucyB3ZXJlIHNvIGVhZ2VyIHRvIGdldCB0byBDbGVvbWVuZXMgYXQgQXJnb3MgdGhhdCwgYXMgQXJhdHVzIHNheXMsIGFsbCB0aGVpciBob3JzZXMgd2VyZSBydWluZWQuIEFyYXR1cyBzYXlzIGFsc28gdGhhdCBDbGVvbWVuZXMgdXBicmFpZGVkIHRoZSBDb3JpbnRoaWFucyBmb3Igbm90IHNlaXppbmcgaGltLCBidXQgbGV0dGluZyBoaW0gZXNjYXBlOyBob3dldmVyLCBNZWdpc3Rvbm/DvHMgY2FtZSB0byBoaW0sIGhlIHNheXMsIGJyaW5naW5nIGZyb20gQ2xlb21lbmVzIGEgcmVxdWVzdCBmb3IgdGhlIHN1cnJlbmRlciBvZiBBY3JvY29yaW50aHVzICh3aGljaCB3YXMgaGVsZCBieSBhbiBBY2hhZWFuIGdhcnJpc29uKSBhbmQgYW4gb2ZmZXIgb2YgYSBsYXJnZSBzdW0gb2YgbW9uZXkgZm9yIGl0OyB0byB3aGljaCBoZSByZXBsaWVkIHRoYXQgaGUgZGlkIG5vdCBjb250cm9sIGFmZmFpcnMsIGJ1dCByYXRoZXIgYWZmYWlycyBjb250cm9sbGVkIGhpbS4gVGhpcyBpcyB3aGF0IEFyYXR1cyB3cml0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDbGVvbWVuZXMsIG1hcmNoaW5nIHVwIGZyb20gQXJnb3MgYW5kIHRha2luZyBvdmVyIFRyb2V6ZW4sIEVwaWRhdXJ1cywgYW5kIEhlcm1pb27DqSwgY2FtZSB0byBDb3JpbnRoLiBJdHMgY2l0YWRlbCBoZSBibG9ja2FkZWQsIHNpbmNlIHRoZSBBY2hhZWFucyB3b3VsZCBub3QgYWJhbmRvbiBpdCwgYW5kIGFmdGVyIHN1bW1vbmluZyB0aGUgZnJpZW5kcyBhbmQgc3Rld2FyZHMgb2YgQXJhdHVzLCBvcmRlcmVkIHRoZW0gdG8gdGFrZSB0aGUgaG91c2UgYW5kIHByb3BlcnR5IG9mIEFyYXR1cyBpbnRvIHRoZWlyIGNoYXJnZSBhbmQgbWFuYWdlbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBzZW50IFRyaXR5bWFsbHVzIHRoZSBNZXNzZW5pYW4gb25jZSBtb3JlIHRvIEFyYXR1cywgcHJvcG9zaW5nIHRoYXQgQWNyb2NvcmludGh1cyBzaG91bGQgYmUgZ2Fycmlzb25lZCBieSBBY2hhZWFucyBhbmQgTGFjZWRhZW1vbmlhbnMgdG9nZXRoZXIsIGFuZCBwcm9taXNpbmcgQXJhdHVzIHBlcnNvbmFsbHkgZG91YmxlIHRoZSBzdGlwZW5kIHdoaWNoIGhlIHdhcyByZWNlaXZpbmcgZnJvbSBLaW5nIFB0b2xlbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHRvbGVteSBJSUkuLCBzdXJuYW1lZCBFdWVyZ2V0ZXMsIGtpbmcgb2YgRWd5cHQgMjQ3LTIyMiBCLkMuICBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiA0MS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFyYXR1czwvdGl0bGU+LCB4bGkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFyYXR1cywgaG93ZXZlciwgd291bGQgbm90IGxpc3RlbiB0byB0aGUgcHJvcG9zaXRpb24sIGJ1dCBzZW50IGhpcyBzb24gdG8gQW50aWdvbnVzIGFsb25nIHdpdGggdGhlIG90aGVyIGhvc3RhZ2VzLCBhbmQgcGVyc3VhZGVkIHRoZSBBY2hhZWFucyB0byB2b3RlIHRoZSBzdXJyZW5kZXIgb2YgQWNyb2NvcmludGh1cyB0byBBbnRpZ29udXMuIFRoZXJlZm9yZSBDbGVvbWVuZXMgaW52YWRlZCB0aGUgdGVycml0b3J5IG9mIFNpY3lvbiBhbmQgcmF2YWdlZCBpdCwgYW5kIGFjY2VwdGVkIHRoZSBwcm9wZXJ0eSBvZiBBcmF0dXMgd2hlbiB0aGUgQ29yaW50aGlhbnMgdm90ZWQgaXQgdG8gaGltIGFzIGEgZ2lmdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDbGVvbWVuZXMsIG1hcmNoaW5nIHVwIGZyb20gQXJnb3MgYW5kIHRha2luZyBvdmVyIFRyb2V6ZW4sIEVwaWRhdXJ1cywgYW5kIEhlcm1pb27DqSwgY2FtZSB0byBDb3JpbnRoLiBJdHMgY2l0YWRlbCBoZSBibG9ja2FkZWQsIHNpbmNlIHRoZSBBY2hhZWFucyB3b3VsZCBub3QgYWJhbmRvbiBpdCwgYW5kIGFmdGVyIHN1bW1vbmluZyB0aGUgZnJpZW5kcyBhbmQgc3Rld2FyZHMgb2YgQXJhdHVzLCBvcmRlcmVkIHRoZW0gdG8gdGFrZSB0aGUgaG91c2UgYW5kIHByb3BlcnR5IG9mIEFyYXR1cyBpbnRvIHRoZWlyIGNoYXJnZSBhbmQgbWFuYWdlbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgc2VudCBUcml0eW1hbGx1cyB0aGUgTWVzc2VuaWFuIG9uY2UgbW9yZSB0byBBcmF0dXMsIHByb3Bvc2luZyB0aGF0IEFjcm9jb3JpbnRodXMgc2hvdWxkIGJlIGdhcnJpc29uZWQgYnkgQWNoYWVhbnMgYW5kIExhY2VkYWVtb25pYW5zIHRvZ2V0aGVyLCBhbmQgcHJvbWlzaW5nIEFyYXR1cyBwZXJzb25hbGx5IGRvdWJsZSB0aGUgc3RpcGVuZCB3aGljaCBoZSB3YXMgcmVjZWl2aW5nIGZyb20gS2luZyBQdG9sZW15Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHRvbGVteSBJSUkuLCBzdXJuYW1lZCBFdWVyZ2V0ZXMsIGtpbmcgb2YgRWd5cHQgMjQ3LTIyMiBCLkMuICBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDQxLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgeGxpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBcmF0dXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBsaXN0ZW4gdG8gdGhlIHByb3Bvc2l0aW9uLCBidXQgc2VudCBoaXMgc29uIHRvIEFudGlnb251cyBhbG9uZyB3aXRoIHRoZSBvdGhlciBob3N0YWdlcywgYW5kIHBlcnN1YWRlZCB0aGUgQWNoYWVhbnMgdG8gdm90ZSB0aGUgc3VycmVuZGVyIG9mIEFjcm9jb3JpbnRodXMgdG8gQW50aWdvbnVzLiBUaGVyZWZvcmUgQ2xlb21lbmVzIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBTaWN5b24gYW5kIHJhdmFnZWQgaXQsIGFuZCBhY2NlcHRlZCB0aGUgcHJvcGVydHkgb2YgQXJhdHVzIHdoZW4gdGhlIENvcmludGhpYW5zIHZvdGVkIGl0IHRvIGhpbSBhcyBhIGdpZnQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDQxLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgeGxpLiAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHhsaS4gMy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFudGlnb251cyB3aXRoIGEgbGFyZ2UgZm9yY2Ugd2FzIGNyb3NzaW5nIHRoZSBtb3VudGFpbi1yYW5nZSBvZiBHZXJhbmVpYSwgQ2xlb21lbmVzIHRob3VnaHQgaXQgbW9yZSBhZHZpc2FibGUgdG8gZm9ydGlmeSB0aG9yb3VnaGx5LCBub3QgdGhlIElzdGhtdXMsIGJ1dCB0aGUgT25laWFuIHJhbmdlIG9mIGhpbGxzLCBhbmQgdG8gd2VhciBvdXQgdGhlIE1hY2Vkb25pYW5zIGJ5IGEgd2FyIG9mIHBvc3RzIGFuZCBwb3NpdGlvbnMsIHJhdGhlciB0aGFuIHRvIGVuZ2FnZSBpbiBmb3JtYWwgYmF0dGxlIHdpdGggdGhlaXIgZGlzY2lwbGluZWQgcGhhbGFueC4gSGUgY2FycmllZCBvdXQgdGhpcyBwbGFuLCBhbmQgdGhlcmVieSB0aHJldyBBbnRpZ29udXMgaW50byBzdHJhaXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaGFkIG5vdCBhIHN1ZmZpY2llbnQgc3RvcmUgb2YgcHJvdmlzaW9ucywgYW5kIGl0IHdhcyBubyBlYXN5IG1hdHRlciB0byBmb3JjZSBoaXMgcGFzc2FnZSB3aGlsZSBDbGVvbWVuZXMgc2F0IGVudHJlbmNoZWQuIE1vcmVvdmVyLCB3aGVuIGhlIGF0dGVtcHRlZCB0byBzbGlwIHBhc3QgaGlzIGVuZW15IGluIHRoZSBuaWdodCBieSB3YXkgb2YgTGVjaGFldW0sIGhlIHdhcyBkcml2ZW4gb3V0IGFuZCBsb3N0IHNvbWUgb2YgaGlzIHNvbGRpZXJzLiBUaGVyZWZvcmUgQ2xlb21lbmVzIHdhcyBhbHRvZ2V0aGVyIGVuY291cmFnZWQsIGFuZCBoaXMgbWVuLCBlbGF0ZWQgYnkgdGhlaXIgdmljdG9yeSwgYmV0b29rIHRoZW1zZWx2ZXMgdG8gc3VwcGVyOyBidXQgQW50aWdvbnVzIHdhcyBkZWplY3RlZCwgc2luY2UgaGUgd2FzIHNodXQgdXAgYnkgbmVjZXNzaXR5IHRvIGRpZmZpY3VsdCBwbGFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdhcyBwbGFubmluZyB0byBtYXJjaCBvZmYgdG8gdGhlIHByb21vbnRvcnkgb2YgdGhlIEhlcmFldW0sIGFuZCBmcm9tIHRoZXJlIHRvIHB1dCBoaXMgYXJteSBhY3Jvc3MgdG8gU2ljeW9uIGluIHRyYW5zcG9ydHPigJRhbiB1bmRlcnRha2luZyByZXF1aXJpbmcgbXVjaCB0aW1lIGFuZCBleHRyYW9yZGluYXJ5IHByZXBhcmF0aW9ucy4gQnV0IHdoZW4gaXQgd2FzIGFscmVhZHkgdG93YXJkcyBldmVuaW5nLCB0aGVyZSBjYW1lIHRvIGhpbSBmcm9tIEFyZ29zIGJ5IHNlYSBzb21lIGZyaWVuZHMgb2YgQXJhdHVzLCB3aG8gc3VtbW9uZWQgaGltIHRvIHRoZSBjaXR5LCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIEFyZ2l2ZXMgd2VyZSByZWFkeSB0byByZXZvbHQgZnJvbSBDbGVvbWVuZXMuIFRoZSBhdXRob3Igb2YgdGhlIHJldm9sdCB3YXMgQXJpc3RvdGxlOyBhbmQgdGhlIG11bHRpdHVkZSB3ZXJlIGVhc3kgdG8gcGVyc3VhZGUsIGJlaW5nIGluY2Vuc2VkIGJlY2F1c2UgQ2xlb21lbmVzIGhhZCBub3QgYnJvdWdodCBhYm91dCB0aGUgYWJvbGl0aW9uIG9mIGRlYnRzIHdoaWNoIHRoZXkgZXhwZWN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBBcmF0dXMgdG9vayBmaWZ0ZWVuIGh1bmRyZWQgc29sZGllcnMgZnJvbSBBbnRpZ29udXMgYW5kIHNhaWxlZCB0byBFcGlkYXVydXMuIEFyaXN0b3RsZSwgaG93ZXZlciwgZGlkIG5vdCBhd2FpdCBoaXMgY29taW5nLCBidXQgYXQgdGhlIGhlYWQgb2YgdGhlIGNpdGl6ZW5zIG1hZGUgYW4gYXR0YWNrIHVwb24gdGhlIGdhcnJpc29uIG9mIHRoZSBjaXRhZGVsOyBhbmQgVGltb3hlbnVzIGNhbWUgdG8gaGlzIGFpZCBmcm9tIFNpY3lvbiB3aXRoIHRoZSBBY2hhZWFuIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBBbnRpZ29udXMgd2l0aCBhIGxhcmdlIGZvcmNlIHdhcyBjcm9zc2luZyB0aGUgbW91bnRhaW4tcmFuZ2Ugb2YgR2VyYW5laWEsIENsZW9tZW5lcyB0aG91Z2h0IGl0IG1vcmUgYWR2aXNhYmxlIHRvIGZvcnRpZnkgdGhvcm91Z2hseSwgbm90IHRoZSBJc3RobXVzLCBidXQgdGhlIE9uZWlhbiByYW5nZSBvZiBoaWxscywgYW5kIHRvIHdlYXIgb3V0IHRoZSBNYWNlZG9uaWFucyBieSBhIHdhciBvZiBwb3N0cyBhbmQgcG9zaXRpb25zLCByYXRoZXIgdGhhbiB0byBlbmdhZ2UgaW4gZm9ybWFsIGJhdHRsZSB3aXRoIHRoZWlyIGRpc2NpcGxpbmVkIHBoYWxhbnguIEhlIGNhcnJpZWQgb3V0IHRoaXMgcGxhbiwgYW5kIHRoZXJlYnkgdGhyZXcgQW50aWdvbnVzIGludG8gc3RyYWl0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgbm90IGEgc3VmZmljaWVudCBzdG9yZSBvZiBwcm92aXNpb25zLCBhbmQgaXQgd2FzIG5vIGVhc3kgbWF0dGVyIHRvIGZvcmNlIGhpcyBwYXNzYWdlIHdoaWxlIENsZW9tZW5lcyBzYXQgZW50cmVuY2hlZC4gTW9yZW92ZXIsIHdoZW4gaGUgYXR0ZW1wdGVkIHRvIHNsaXAgcGFzdCBoaXMgZW5lbXkgaW4gdGhlIG5pZ2h0IGJ5IHdheSBvZiBMZWNoYWV1bSwgaGUgd2FzIGRyaXZlbiBvdXQgYW5kIGxvc3Qgc29tZSBvZiBoaXMgc29sZGllcnMuIFRoZXJlZm9yZSBDbGVvbWVuZXMgd2FzIGFsdG9nZXRoZXIgZW5jb3VyYWdlZCwgYW5kIGhpcyBtZW4sIGVsYXRlZCBieSB0aGVpciB2aWN0b3J5LCBiZXRvb2sgdGhlbXNlbHZlcyB0byBzdXBwZXI7IGJ1dCBBbnRpZ29udXMgd2FzIGRlamVjdGVkLCBzaW5jZSBoZSB3YXMgc2h1dCB1cCBieSBuZWNlc3NpdHkgdG8gZGlmZmljdWx0IHBsYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgcGxhbm5pbmcgdG8gbWFyY2ggb2ZmIHRvIHRoZSBwcm9tb250b3J5IG9mIHRoZSBIZXJhZXVtLCBhbmQgZnJvbSB0aGVyZSB0byBwdXQgaGlzIGFybXkgYWNyb3NzIHRvIFNpY3lvbiBpbiB0cmFuc3BvcnRz4oCUYW4gdW5kZXJ0YWtpbmcgcmVxdWlyaW5nIG11Y2ggdGltZSBhbmQgZXh0cmFvcmRpbmFyeSBwcmVwYXJhdGlvbnMuIEJ1dCB3aGVuIGl0IHdhcyBhbHJlYWR5IHRvd2FyZHMgZXZlbmluZywgdGhlcmUgY2FtZSB0byBoaW0gZnJvbSBBcmdvcyBieSBzZWEgc29tZSBmcmllbmRzIG9mIEFyYXR1cywgd2hvIHN1bW1vbmVkIGhpbSB0byB0aGUgY2l0eSwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBBcmdpdmVzIHdlcmUgcmVhZHkgdG8gcmV2b2x0IGZyb20gQ2xlb21lbmVzLiBUaGUgYXV0aG9yIG9mIHRoZSByZXZvbHQgd2FzIEFyaXN0b3RsZTsgYW5kIHRoZSBtdWx0aXR1ZGUgd2VyZSBlYXN5IHRvIHBlcnN1YWRlLCBiZWluZyBpbmNlbnNlZCBiZWNhdXNlIENsZW9tZW5lcyBoYWQgbm90IGJyb3VnaHQgYWJvdXQgdGhlIGFib2xpdGlvbiBvZiBkZWJ0cyB3aGljaCB0aGV5IGV4cGVjdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBBcmF0dXMgdG9vayBmaWZ0ZWVuIGh1bmRyZWQgc29sZGllcnMgZnJvbSBBbnRpZ29udXMgYW5kIHNhaWxlZCB0byBFcGlkYXVydXMuIEFyaXN0b3RsZSwgaG93ZXZlciwgZGlkIG5vdCBhd2FpdCBoaXMgY29taW5nLCBidXQgYXQgdGhlIGhlYWQgb2YgdGhlIGNpdGl6ZW5zIG1hZGUgYW4gYXR0YWNrIHVwb24gdGhlIGdhcnJpc29uIG9mIHRoZSBjaXRhZGVsOyBhbmQgVGltb3hlbnVzIGNhbWUgdG8gaGlzIGFpZCBmcm9tIFNpY3lvbiB3aXRoIHRoZSBBY2hhZWFuIGFybXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhYm91dCBtaWRuaWdodCB3aGVuIENsZW9tZW5lcyBoZWFyZCBvZiB0aGVzZSB0aGluZ3MsIGFuZCBzdW1tb25pbmcgTWVnaXN0b25vw7xzLCBoZSBhbmdyaWx5IG9yZGVyZWQgaGltIHRvIGdvIGF0IG9uY2UgdG8gQXJnb3Mgd2l0aCBhc3Npc3RhbmNlOyBmb3IgaXQgd2FzIE1lZ2lzdG9ub8O8cyB3aG8gaGFkIGdpdmVuIGhpbSBtb3N0IGFzc3VyYW5jZXMgb2YgdGhlIGZpZGVsaXR5IG9mIHRoZSBBcmdpdmVzLCBhbmQgaGFkIHRoZXJlYnkgcHJldmVudGVkIGhpbSBmcm9tIGV4cGVsbGluZyB0aGUgc3VzcGVjdGVkIGNpdGl6ZW5zLiBBZnRlciBzZW5kaW5nIG9mZiBNZWdpc3Rvbm/DvHMsIHRoZW4sIHdpdGggdHdvIHRob3VzYW5kIHNvbGRpZXJzLCBoZSBoaW1zZWxmIGtlcHQgd2F0Y2ggdXBvbiBBbnRpZ29udXMgYW5kIHRyaWVkIHRvIGVuY291cmFnZSB0aGUgQ29yaW50aGlhbnMsIHRlbGxpbmcgdGhlbSB0aGF0IHRoZXJlIHdhcyBubyBncmVhdCB0cm91YmxlIGF0IEFyZ29zLCBidXQgb25seSBhIHNsaWdodCBkaXN0dXJiYW5jZSBtYWRlIGJ5IGEgZmV3IG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiBNZWdpc3Rvbm/DvHMsIHdobyBoYWQgbWFkZSBoaXMgd2F5IGludG8gQXJnb3MsIHdhcyBzbGFpbiBpbiBiYXR0bGUsIGFuZCB0aGUgZ2Fycmlzb24gaGVsZCBvdXQgd2l0aCBkaWZmaWN1bHR5IGFuZCBrZXB0IHNlbmRpbmcgZnJlcXVlbnQgbWVzc2VuZ2VycyB0byBDbGVvbWVuZXMsIGhlIHdhcyBhZnJhaWQgdGhhdCBpZiB0aGUgZW5lbXkgbWFkZSB0aGVtc2VsdmVzIG1hc3RlcnMgb2YgQXJnb3MgYW5kIHNodXQgdXAgdGhlIHBhc3NlcywgdGhleSBtaWdodCByYXZhZ2UgYXQgd2lsbCB0aGUgTGFjb25pYW4gdGVycml0b3J5IGFuZCBsYXkgc2llZ2UgdG8gU3BhcnRhLCB3aGljaCBoZSBoYWQgbGVmdCB3aXRob3V0IGRlZmVuZGVycy4gSGUgdGhlcmVmb3JlIGxlZCBoaXMgYXJteSBhd2F5IGZyb20gQ29yaW50aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjaXR5IHdhcyBhdCBvbmNlIGxvc3QgdG8gaGltLCBmb3IgQW50aWdvbnVzIGVudGVyZWQgaXQgYW5kIHNldCBhIGdhcnJpc29uIHRoZXJlOyBidXQgQ2xlb21lbmVzLCBvbiByZWFjaGluZyBBcmdvcywgbWFkZSBhbiBhdHRlbXB0IHRvIHNjYWxlIHRoZSB3YWxscywgYW5kIHdpdGggdGhpcyBpbiB2aWV3IGRyaXZlIGhpcyBmb3JjZXMgdG9nZXRoZXIgZnJvbSB0aGVpciBtYXJjaCwgYW5kIGN1dHRpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSB0dW5uZWxzIHJ1bm5pbmcgdW5kZXIgdGhlIEFzcGlzLCBvciBjaXRhZGVsLCBoZSBtYWRlIHRoZSBhc2NlbnQgYW5kIGVmZmVjdGVkIGEganVuY3Rpb24gd2l0aCBoaXMgZ2Fycmlzb24gaW5zaWRlLCB3aGljaCB3YXMgc3RpbGwgaG9sZGluZyBvdXQgYWdhaW5zdCB0aGUgQWNoYWVhbnMuIEhlIGFjdHVhbGx5IGdvdCBwb3NzZXNzaW9uIG9mIHNvbWUgcG9ydGlvbnMgb2YgdGhlIGNpdHkgYnkgdXNpbmcgc2NhbGluZy1sYWRkZXJzLCBhbmQgY2xlYXJlZCB0aGUgc3RyZWV0cyBvZiB0aGUgZW5lbXkgYnkgYnJpbmdpbmcgaGlzIENyZXRhbiBhcmNoZXJzIGludG8gYWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBzYXcgQW50aWdvbnVzIHdpdGggaGlzIHBoYWxhbnggZGVzY2VuZGluZyBmcm9tIHRoZSBoZWlnaHRzIGludG8gdGhlIHBsYWluLCBhbmQgaGlzIGhvcnNlbWVuIGFscmVhZHkgc3RyZWFtaW5nIGludG8gdGhlIGNpdHksIGhlIGdhdmUgdXAgdHJ5aW5nIHRvIG1hc3RlciBpdDsgYW5kIGdhdGhlcmluZyBhbGwgaGlzIHRyb29wcyBhYm91dCBoaW0gaGUgbWFkZSBoaXMgd2F5IHNhZmVseSBkb3duIGZyb20gdGhlIGNpdGFkZWwgYW5kIHdpdGhkcmV3IGFsb25nIHBhc3QgdGhlIGNpdHkgd2FsbC4gSGUgaGFkIG1hZGUgdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIGNvbnF1ZXN0cyBpbiB0aGUgYnJpZWZlc3QgcG9zc2libGUgdGltZSwgYW5kIGhhZCBjb21lIHdpdGhpbiBhIGxpdHRsZSBvZiBtYWtpbmcgaGltc2VsZiBtYXN0ZXIgb2YgYWxsIFBlbG9wb25uZXN1cyBieSBhIHNpbmdsZSBtYXJjaCB0aHJvdWdoIGl0LCBidXQgaGFkIHF1aWNrbHkgbG9zdCBldmVyeXRoaW5nIGFnYWluLiBGb3Igc29uaWMgb2YgaGlzIGFsbGllcyBsZWZ0IGhpbSBhdCBvbmNlLCBhbmQgb3RoZXJzIGFmdGVyIGEgbGl0dGxlIHdoaWxlIGhhbmRlZCB0aGVpciBjaXRpZXMgb3ZlciB0byBBbnRpZ29udXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGFib3V0IG1pZG5pZ2h0IHdoZW4gQ2xlb21lbmVzIGhlYXJkIG9mIHRoZXNlIHRoaW5ncywgYW5kIHN1bW1vbmluZyBNZWdpc3Rvbm/DvHMsIGhlIGFuZ3JpbHkgb3JkZXJlZCBoaW0gdG8gZ28gYXQgb25jZSB0byBBcmdvcyB3aXRoIGFzc2lzdGFuY2U7IGZvciBpdCB3YXMgTWVnaXN0b25vw7xzIHdobyBoYWQgZ2l2ZW4gaGltIG1vc3QgYXNzdXJhbmNlcyBvZiB0aGUgZmlkZWxpdHkgb2YgdGhlIEFyZ2l2ZXMsIGFuZCBoYWQgdGhlcmVieSBwcmV2ZW50ZWQgaGltIGZyb20gZXhwZWxsaW5nIHRoZSBzdXNwZWN0ZWQgY2l0aXplbnMuIEFmdGVyIHNlbmRpbmcgb2ZmIE1lZ2lzdG9ub8O8cywgdGhlbiwgd2l0aCB0d28gdGhvdXNhbmQgc29sZGllcnMsIGhlIGhpbXNlbGYga2VwdCB3YXRjaCB1cG9uIEFudGlnb251cyBhbmQgdHJpZWQgdG8gZW5jb3VyYWdlIHRoZSBDb3JpbnRoaWFucywgdGVsbGluZyB0aGVtIHRoYXQgdGhlcmUgd2FzIG5vIGdyZWF0IHRyb3VibGUgYXQgQXJnb3MsIGJ1dCBvbmx5IGEgc2xpZ2h0IGRpc3R1cmJhbmNlIG1hZGUgYnkgYSBmZXcgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gTWVnaXN0b25vw7xzLCB3aG8gaGFkIG1hZGUgaGlzIHdheSBpbnRvIEFyZ29zLCB3YXMgc2xhaW4gaW4gYmF0dGxlLCBhbmQgdGhlIGdhcnJpc29uIGhlbGQgb3V0IHdpdGggZGlmZmljdWx0eSBhbmQga2VwdCBzZW5kaW5nIGZyZXF1ZW50IG1lc3NlbmdlcnMgdG8gQ2xlb21lbmVzLCBoZSB3YXMgYWZyYWlkIHRoYXQgaWYgdGhlIGVuZW15IG1hZGUgdGhlbXNlbHZlcyBtYXN0ZXJzIG9mIEFyZ29zIGFuZCBzaHV0IHVwIHRoZSBwYXNzZXMsIHRoZXkgbWlnaHQgcmF2YWdlIGF0IHdpbGwgdGhlIExhY29uaWFuIHRlcnJpdG9yeSBhbmQgbGF5IHNpZWdlIHRvIFNwYXJ0YSwgd2hpY2ggaGUgaGFkIGxlZnQgd2l0aG91dCBkZWZlbmRlcnMuIEhlIHRoZXJlZm9yZSBsZWQgaGlzIGFybXkgYXdheSBmcm9tIENvcmludGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2l0eSB3YXMgYXQgb25jZSBsb3N0IHRvIGhpbSwgZm9yIEFudGlnb251cyBlbnRlcmVkIGl0IGFuZCBzZXQgYSBnYXJyaXNvbiB0aGVyZTsgYnV0IENsZW9tZW5lcywgb24gcmVhY2hpbmcgQXJnb3MsIG1hZGUgYW4gYXR0ZW1wdCB0byBzY2FsZSB0aGUgd2FsbHMsIGFuZCB3aXRoIHRoaXMgaW4gdmlldyBkcml2ZSBoaXMgZm9yY2VzIHRvZ2V0aGVyIGZyb20gdGhlaXIgbWFyY2gsIGFuZCBjdXR0aW5nIGhpcyB3YXkgdGhyb3VnaCB0aGUgdHVubmVscyBydW5uaW5nIHVuZGVyIHRoZSBBc3Bpcywgb3IgY2l0YWRlbCwgaGUgbWFkZSB0aGUgYXNjZW50IGFuZCBlZmZlY3RlZCBhIGp1bmN0aW9uIHdpdGggaGlzIGdhcnJpc29uIGluc2lkZSwgd2hpY2ggd2FzIHN0aWxsIGhvbGRpbmcgb3V0IGFnYWluc3QgdGhlIEFjaGFlYW5zLiBIZSBhY3R1YWxseSBnb3QgcG9zc2Vzc2lvbiBvZiBzb21lIHBvcnRpb25zIG9mIHRoZSBjaXR5IGJ5IHVzaW5nIHNjYWxpbmctbGFkZGVycywgYW5kIGNsZWFyZWQgdGhlIHN0cmVldHMgb2YgdGhlIGVuZW15IGJ5IGJyaW5naW5nIGhpcyBDcmV0YW4gYXJjaGVycyBpbnRvIGFjdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyBBbnRpZ29udXMgd2l0aCBoaXMgcGhhbGFueCBkZXNjZW5kaW5nIGZyb20gdGhlIGhlaWdodHMgaW50byB0aGUgcGxhaW4sIGFuZCBoaXMgaG9yc2VtZW4gYWxyZWFkeSBzdHJlYW1pbmcgaW50byB0aGUgY2l0eSwgaGUgZ2F2ZSB1cCB0cnlpbmcgdG8gbWFzdGVyIGl0OyBhbmQgZ2F0aGVyaW5nIGFsbCBoaXMgdHJvb3BzIGFib3V0IGhpbSBoZSBtYWRlIGhpcyB3YXkgc2FmZWx5IGRvd24gZnJvbSB0aGUgY2l0YWRlbCBhbmQgd2l0aGRyZXcgYWxvbmcgcGFzdCB0aGUgY2l0eSB3YWxsLiBIZSBoYWQgbWFkZSB0aGUgZ3JlYXRlc3QgcG9zc2libGUgY29ucXVlc3RzIGluIHRoZSBicmllZmVzdCBwb3NzaWJsZSB0aW1lLCBhbmQgaGFkIGNvbWUgd2l0aGluIGEgbGl0dGxlIG9mIG1ha2luZyBoaW1zZWxmIG1hc3RlciBvZiBhbGwgUGVsb3Bvbm5lc3VzIGJ5IGEgc2luZ2xlIG1hcmNoIHRocm91Z2ggaXQsIGJ1dCBoYWQgcXVpY2tseSBsb3N0IGV2ZXJ5dGhpbmcgYWdhaW4uIEZvciBzb25pYyBvZiBoaXMgYWxsaWVzIGxlZnQgaGltIGF0IG9uY2UsIGFuZCBvdGhlcnMgYWZ0ZXIgYSBsaXR0bGUgd2hpbGUgaGFuZGVkIHRoZWlyIGNpdGllcyBvdmVyIHRvIEFudGlnb251cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIHJlc3VsdCBvZiBoaXMgZXhwZWRpdGlvbiwgYW5kIGhlIHdhcyBsZWFkaW5nIGhpcyBhcm15IGhvbWUsIHdoZW4sIGFzIGl0IHdhcyBhbHJlYWR5IGV2ZW5pbmcgYW5kIGhlIHdhcyBuZWFyIFRlZ2VhLCBtZXNzZW5nZXJzIGZyb20gU3BhcnRhIGNhbWUgd2l0aCB0aWRpbmdzIG9mIGEgZnJlc2ggYW5kIGV2ZW4gZ3JlYXRlciBjYWxhbWl0eSwgdGhlIGRlYXRoIG9mIGhpcyB3aWZlLiBJdCB3YXMgYmVjYXVzZSBvZiBoZXIgdGhhdCBldmVuIGluIGhpcyBtb3N0IHN1Y2Nlc3NmdWwgY2FtcGFpZ25zIGhlIGNvdWxkIG5vdCBlbmR1cmUgdG8gdGhlIGVuZCwgYnV0IHdvdWxkIGNvbnRpbnVhbGx5IGJlIGNvbWluZyBob21lIHRvIFNwYXJ0YSwgb3V0IG9mIGxvdmUgZm9yIEFnaWF0aXMgYW5kIGluIHN1cHJlbWUgZGV2b3Rpb24gdG8gaGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UsIHRoZW4sIGhlIHdhcyBzbWl0dGVuIHdpdGggZ3JpZWYsIGFzIHdhcyBuYXR1cmFsIGZvciBhIHlvdW5nIG1hbiB3aG8gaGFkIGxvc3QgYSBtb3N0IGJlYXV0aWZ1bCBhbmQgbW9zdCBzZW5zaWJsZSB3aWZlLCBidXQgaGUgZGlkIG5vdCBhbGxvdyBoaXMgc3VmZmVyaW5nIHRvIHNoYW1lIG9yIGJldHJheSB0aGUgbG9mdGluZXNzIG9mIGhpcyB0aG91Z2h0IG9yIHRoZSBncmVhdG5lc3Mgb2YgaGlzIHNwaXJpdC4gSGUgbWFpbnRhaW5lZCBoaXMgdXN1YWwgc3BlZWNoLCBkcmVzcywgYW5kIGJlYXJpbmcsIGdhdmUgdGhlIGN1c3RvbWFyeSBvcmRlcnMgdG8gaGlzIGNhcHRhaW5zLCBhbmQgdG9vayB0aG91Z2h0IGZvciB0aGUgc2FmZXR5IG9mIFRlZ2VhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0IG1vcm5pbmcgaGUgcmV0dXJuZWQgdG8gU3BhcnRhLCBhbmQgYWZ0ZXIgZHVseSBtb3VybmluZyBoaXMgbG9zcyB3aXRoIGhpcyBtb3RoZXIgYW5kIGNoaWxkcmVuIGF0IGhvbWUsIGhlIGF0IG9uY2UgZW5nYWdlZCBpbiB0aGUgbWVhc3VyZXMgd2hpY2ggaGUgcGxhbm5lZCBmb3IgdGhlIHB1YmxpYyBnb29kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIHJlc3VsdCBvZiBoaXMgZXhwZWRpdGlvbiwgYW5kIGhlIHdhcyBsZWFkaW5nIGhpcyBhcm15IGhvbWUsIHdoZW4sIGFzIGl0IHdhcyBhbHJlYWR5IGV2ZW5pbmcgYW5kIGhlIHdhcyBuZWFyIFRlZ2VhLCBtZXNzZW5nZXJzIGZyb20gU3BhcnRhIGNhbWUgd2l0aCB0aWRpbmdzIG9mIGEgZnJlc2ggYW5kIGV2ZW4gZ3JlYXRlciBjYWxhbWl0eSwgdGhlIGRlYXRoIG9mIGhpcyB3aWZlLiBJdCB3YXMgYmVjYXVzZSBvZiBoZXIgdGhhdCBldmVuIGluIGhpcyBtb3N0IHN1Y2Nlc3NmdWwgY2FtcGFpZ25zIGhlIGNvdWxkIG5vdCBlbmR1cmUgdG8gdGhlIGVuZCwgYnV0IHdvdWxkIGNvbnRpbnVhbGx5IGJlIGNvbWluZyBob21lIHRvIFNwYXJ0YSwgb3V0IG9mIGxvdmUgZm9yIEFnaWF0aXMgYW5kIGluIHN1cHJlbWUgZGV2b3Rpb24gdG8gaGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIGNvdXJzZSwgdGhlbiwgaGUgd2FzIHNtaXR0ZW4gd2l0aCBncmllZiwgYXMgd2FzIG5hdHVyYWwgZm9yIGEgeW91bmcgbWFuIHdobyBoYWQgbG9zdCBhIG1vc3QgYmVhdXRpZnVsIGFuZCBtb3N0IHNlbnNpYmxlIHdpZmUsIGJ1dCBoZSBkaWQgbm90IGFsbG93IGhpcyBzdWZmZXJpbmcgdG8gc2hhbWUgb3IgYmV0cmF5IHRoZSBsb2Z0aW5lc3Mgb2YgaGlzIHRob3VnaHQgb3IgdGhlIGdyZWF0bmVzcyBvZiBoaXMgc3Bpcml0LiBIZSBtYWludGFpbmVkIGhpcyB1c3VhbCBzcGVlY2gsIGRyZXNzLCBhbmQgYmVhcmluZywgZ2F2ZSB0aGUgY3VzdG9tYXJ5IG9yZGVycyB0byBoaXMgY2FwdGFpbnMsIGFuZCB0b29rIHRob3VnaHQgZm9yIHRoZSBzYWZldHkgb2YgVGVnZWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQgbW9ybmluZyBoZSByZXR1cm5lZCB0byBTcGFydGEsIGFuZCBhZnRlciBkdWx5IG1vdXJuaW5nIGhpcyBsb3NzIHdpdGggaGlzIG1vdGhlciBhbmQgY2hpbGRyZW4gYXQgaG9tZSwgaGUgYXQgb25jZSBlbmdhZ2VkIGluIHRoZSBtZWFzdXJlcyB3aGljaCBoZSBwbGFubmVkIGZvciB0aGUgcHVibGljIGdvb2QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm93LCBQdG9sZW15IHRoZSBraW5nIG9mIEVneXB0IHByb21pc2VkIGhpbSBhaWQgYW5kIGFzc2lzdGFuY2UsIGJ1dCBkZW1hbmRlZCBoaXMgbW90aGVyIGFuZCBoaXMgY2hpbGRyZW4gYXMgaG9zdGFnZXMuIEZvciBhIGxvbmcgdGltZSwgdGhlcmVmb3JlLCBoZSB3YXMgYXNoYW1lZCB0byB0ZWxsIGhpcyBtb3RoZXIsIGFuZCB0aG91Z2ggaGUgb2Z0ZW4gd2VudCB0byBoZXIgYW5kIHdhcyBhdCB0aGUgdmVyeSBwb2ludCBvZiBsZXR0aW5nIGhlciBrbm93LCBoZSBoZWxkIGhpcyBwZWFjZSwgc28gdGhhdCBzaGUgb24gaGVyIHBhcnQgYmVjYW1lIHN1c3BpY2lvdXMgYW5kIGVucXVpcmVkIG9mIGhpcyBmcmllbmRzIHdoZXRoZXIgdGhlcmUgd2FzIG5vdCBzb21ldGhpbmcgd2hpY2ggaGUgd2lzaGVkIHRvIGltcGFydCB0byBoZXIgYnV0IGhlc2l0YXRlZCB0byBkbyBzby4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GaW5hbGx5LCB3aGVuIENsZW9tZW5lcyBwbHVja2VkIHVwIGNvdXJhZ2UgdG8gc3BlYWsgb2YgdGhlIG1hdHRlciwgaGlzIG1vdGhlciBidXJzdCBpbnRvIGEgaGVhcnR5IGxhdWdoIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldhcyB0aGlzIHRoZSB0aGluZyB3aGljaCB0aG91IHdhc3Qgb2Z0ZW4gb2YgYSBtaW5kIHRvIHRlbGwgbWUgYnV0IGxvc3QgdGh5IGNvdXJhZ2U/IE1ha2UgaGFzdGUsIHB1dCBtZSBvbiBib2FyZCBhIHZlc3NlbCwgYW5kIHNlbmQgdGhpcyBmcmFpbCBib2R5IHdoZXJlc29ldmVyIHRob3UgdGhpbmtlc3QgaXQgd2lsbCBiZSBvZiBtb3N0IHVzZSB0byBTcGFydGEsIGJlZm9yZSBvbGQgYWdlIGRlc3Ryb3lzIGl0IHNpdHRpbmcgaWRseSBoZXJlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIHdoZW4gQ2xlb21lbmVzIHBsdWNrZWQgdXAgY291cmFnZSB0byBzcGVhayBvZiB0aGUgbWF0dGVyLCBoaXMgbW90aGVyIGJ1cnN0IGludG8gYSBoZWFydHkgbGF1Z2ggYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXMgdGhpcyB0aGUgdGhpbmcgd2hpY2ggdGhvdSB3YXN0IG9mdGVuIG9mIGEgbWluZCB0byB0ZWxsIG1lIGJ1dCBsb3N0IHRoeSBjb3VyYWdlPyBNYWtlIGhhc3RlLCBwdXQgbWUgb24gYm9hcmQgYSB2ZXNzZWwsIGFuZCBzZW5kIHRoaXMgZnJhaWwgYm9keSB3aGVyZXNvZXZlciB0aG91IHRoaW5rZXN0IGl0IHdpbGwgYmUgb2YgbW9zdCB1c2UgdG8gU3BhcnRhLCBiZWZvcmUgb2xkIGFnZSBkZXN0cm95cyBpdCBzaXR0aW5nIGlkbHkgaGVyZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGFsbCB0aGluZ3Mgd2VyZSByZWFkeSwgdGhleSBjYW1lIHRvIFRhZW5hcnVzIGJ5IGxhbmQsIHdoaWxlIHRoZSBhcm15IGVzY29ydGVkIHRoZW0gdW5kZXIgYXJtcy4gQW5kIGFzIENyYXRlc2ljbGVpYSB3YXMgYWJvdXQgdG8gZW1iYXJrLCBzaGUgZHJldyBDbGVvbWVuZXMgYXNpZGUgYnkgaGltc2VsZiBpbnRvIHRoZSB0ZW1wbGUgb2YgUG9zZWlkb24sIGFuZCBhZnRlciBlbWJyYWNpbmcgYW5kIGtpc3NpbmcgaGltIGluIGhpcyBhbmd1aXNoIGFuZCBkZWVwIHRyb3VibGUsIHNhaWQ6IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lLCBPIGtpbmcgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB3aGVuIHdlIGdvIGZvcnRoIGxldCBubyBvbmUgc2VlIHVzIHdlZXBpbmcgb3IgZG9pbmcgYW55dGhpbmcgdW53b3J0aHkgb2YgU3BhcnRhLiBGb3IgdGhpcyBsaWVzIGluIG91ciBwb3dlciwgYW5kIHRoaXMgYWxvbmU7IGJ1dCBhcyBmb3IgdGhlIGlzc3VlcyBvZiBmb3J0dW5lLCB3ZSBzaGFsbCBoYXZlIHdoYXQgdGhlIERlaXR5IG1heSBncmFudC48L3E+IEFmdGVyIHNheWluZyB0aGlzLCBzaGUgY29tcG9zZWQgaGVyIGNvdW50ZW5hbmNlIGFuZCBwcm9jZWVkZWQgdG8gdGhlIHNoaXAgd2l0aCBoZXIgbGl0dGxlIGdyYW5kc29uLCBhbmQgYmFkZSB0aGUgY2FwdGFpbiBwdXQgdG8gc2VhIHdpdGggYWxsIHNwZWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBzaGUgd2FzIGNvbWUgdG8gRWd5cHQsIGFuZCBsZWFybmVkIHRoYXQgUHRvbGVteSB3YXMgZW50ZXJ0YWluaW5nIGVtYmFzc2llcyBhbmQgcHJvcG9zYWxzIGZyb20gQW50aWdvbnVzLCBhbmQgaGVhcmQgdGhhdCBhbHRob3VnaCB0aGUgQWNoYWVhbnMgaW52aXRlZCBDbGVvbWVuZXMgdG8gbWFrZSB0ZXJtcyB3aXRoIHRoZW0sIGhlIHdhcyBhZnJhaWQgb24gaGVyIGFjY291bnQgdG8gZW5kIHRoZSB3YXIgd2l0aG91dCB0aGUgY29uc2VudCBvZiBQdG9sZW15LCBzaGUgc2VudCB3b3JkIHRvIGhpbSB0aGF0IGhlIG11c3QgZG8gd2hhdCB3YXMgZml0dGluZyBhbmQgYWR2YW50YWdlb3VzIGZvciBTcGFydGEsIGFuZCBub3QsIGJlY2F1c2Ugb2Ygb25lIG9sZCB3b21hbiBhbmQgYSBsaXR0bGUgYm95LCBiZSBldmVyIGluIGZlYXIgb2YgUHRvbGVteS4gU3VjaCwgdGhlbiwgYXMgd2UgYXJlIHRvbGQsIHdhcyB0aGUgYmVhcmluZyBvZiBDcmF0ZXNpY2xlaWEgaW4gaGVyIG1pc2ZvcnR1bmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGFsbCB0aGluZ3Mgd2VyZSByZWFkeSwgdGhleSBjYW1lIHRvIFRhZW5hcnVzIGJ5IGxhbmQsIHdoaWxlIHRoZSBhcm15IGVzY29ydGVkIHRoZW0gdW5kZXIgYXJtcy4gQW5kIGFzIENyYXRlc2ljbGVpYSB3YXMgYWJvdXQgdG8gZW1iYXJrLCBzaGUgZHJldyBDbGVvbWVuZXMgYXNpZGUgYnkgaGltc2VsZiBpbnRvIHRoZSB0ZW1wbGUgb2YgUG9zZWlkb24sIGFuZCBhZnRlciBlbWJyYWNpbmcgYW5kIGtpc3NpbmcgaGltIGluIGhpcyBhbmd1aXNoIGFuZCBkZWVwIHRyb3VibGUsIHNhaWQ6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUsIE8ga2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHdoZW4gd2UgZ28gZm9ydGggbGV0IG5vIG9uZSBzZWUgdXMgd2VlcGluZyBvciBkb2luZyBhbnl0aGluZyB1bndvcnRoeSBvZiBTcGFydGEuIEZvciB0aGlzIGxpZXMgaW4gb3VyIHBvd2VyLCBhbmQgdGhpcyBhbG9uZTsgYnV0IGFzIGZvciB0aGUgaXNzdWVzIG9mIGZvcnR1bmUsIHdlIHNoYWxsIGhhdmUgd2hhdCB0aGUgRGVpdHkgbWF5IGdyYW50LjwvcT4gQWZ0ZXIgc2F5aW5nIHRoaXMsIHNoZSBjb21wb3NlZCBoZXIgY291bnRlbmFuY2UgYW5kIHByb2NlZWRlZCB0byB0aGUgc2hpcCB3aXRoIGhlciBsaXR0bGUgZ3JhbmRzb24sIGFuZCBiYWRlIHRoZSBjYXB0YWluIHB1dCB0byBzZWEgd2l0aCBhbGwgc3BlZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHNoZSB3YXMgY29tZSB0byBFZ3lwdCwgYW5kIGxlYXJuZWQgdGhhdCBQdG9sZW15IHdhcyBlbnRlcnRhaW5pbmcgZW1iYXNzaWVzIGFuZCBwcm9wb3NhbHMgZnJvbSBBbnRpZ29udXMsIGFuZCBoZWFyZCB0aGF0IGFsdGhvdWdoIHRoZSBBY2hhZWFucyBpbnZpdGVkIENsZW9tZW5lcyB0byBtYWtlIHRlcm1zIHdpdGggdGhlbSwgaGUgd2FzIGFmcmFpZCBvbiBoZXIgYWNjb3VudCB0byBlbmQgdGhlIHdhciB3aXRob3V0IHRoZSBjb25zZW50IG9mIFB0b2xlbXksIHNoZSBzZW50IHdvcmQgdG8gaGltIHRoYXQgaGUgbXVzdCBkbyB3aGF0IHdhcyBmaXR0aW5nIGFuZCBhZHZhbnRhZ2VvdXMgZm9yIFNwYXJ0YSwgYW5kIG5vdCwgYmVjYXVzZSBvZiBvbmUgb2xkIHdvbWFuIGFuZCBhIGxpdHRsZSBib3ksIGJlIGV2ZXIgaW4gZmVhciBvZiBQdG9sZW15LiBTdWNoLCB0aGVuLCBhcyB3ZSBhcmUgdG9sZCwgd2FzIHRoZSBiZWFyaW5nIG9mIENyYXRlc2ljbGVpYSBpbiBoZXIgbWlzZm9ydHVuZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIEFudGlnb251cyBoYWQgdGFrZW4gVGVnZWEgYnkgc2llZ2UsIGFuZCBoYWQgc3VycHJpc2VkIE9yY2hvbWVudXMgYW5kIE1hbnRpbmVpYSwgQ2xlb21lbmVzLCBub3cgcmVkdWNlZCB0byB0aGUgbmFycm93IGNvbmZpbmVzIG9mIExhY29uaWEsIHNldCBmcmVlIHRob3NlIG9mIHRoZSBIZWxvdHMgd2hvIGNvdWxkIHBheSBkb3duIGZpdmUgQXR0aWMgbWluYXMgKHRoZXJlYnkgcmFpc2luZyBhIHN1bSBvZiBmaXZlIGh1bmRyZWQgdGFsZW50cyksIGFybWVkIHR3byB0aG91c2FuZCBvZiB0aGVtIGluIE1hY2Vkb25pYW4gZmFzaGlvbiBhcyBhbiBvZmZzZXQgdG8gdGhlIFdoaXRlIFNoaWVsZHMgb2YgQW50aWdvbnVzLCBhbmQgcGxhbm5lZCBhbiB1bmRlcnRha2luZyB3aGljaCB3YXMgZ3JlYXQgYW5kIGVudGlyZWx5IHVuZXhwZWN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lZ2Fsb3BvbGlzIHdhcyBhdCB0aGF0IHRpbWUgb2YgaXRzZWxmIGZ1bGx5IGFzIGxhcmdlIGFuZCBzdHJvbmcgYXMgU3BhcnRhLCBhbmQgY291bGQgaGF2ZSBhc3Npc3RhbmNlIGZyb20gdGhlIEFjaGFlYW5zIGFuZCBmcm9tIEFudGlnb251czsgZm9yIEFudGlnb251cyB3YXMgZW5jYW1wZWQgbmVhciBieSwgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIE1lZ2Fsb3BvbGl0YW5zIHdlcmUgY2hpZWZseSByZXNwb25zaWJsZSBmb3IgaGlzIGJlaW5nIGNhbGxlZCBpbiBieSB0aGUgQWNoYWVhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2l0eSBDbGVvbWVuZXMgcGxhbm5lZCB0byBzbmF0Y2ggYXdheSAoZm9yIG5vdGhpbmcgZWxzZSBjb3VsZCBiZXR0ZXIgZGVzY3JpYmUgdGhlIHNwZWVkIGFuZCB1bmV4cGVjdGVkbmVzcyBvZiBoaXMgZmFtb3VzIGFjaGlldmVtZW50KSwgYW5kIG9yZGVyaW5nIGhpcyBtZW4gdG8gdGFrZSBmaXZlIGRheXMnIHJhdGlvbnMsIGhlIGxlZCB0aGVtIGZvcnRoIHRvIFNlbGxhc2lhLCBhcyB0aG91Z2ggaGUgd291bGQgcmF2YWdlIHRoZSB0ZXJyaXRvcnkgb2YgQXJnb3MuIEJ1dCBmcm9tIHRoZXJlIGhlIGRlc2NlbmRlZCBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgTWVnYWxvcG9saXMsIGFuZCBhZnRlciBnaXZpbmcgaGlzIG1lbiB0aGVpciBzdXBwZXIgYXQgdGhlIFJob2V0ZWl1bSwgaGUgbWFyY2hlZCBhdCBvbmNlIGJ5IHdheSBvZiBIZWxpY3VzIGFnYWluc3QgdGhlIGNpdHkgaXRzZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHdhcyBub3QgZmFyIGF3YXkgaGUgZGlzcGF0Y2hlZCBQYW50ZXVzIHdpdGggdHdvIGRpdmlzaW9ucyBvZiBMYWNlZGFlbW9uaWFucywgb3JkZXJpbmcgaGltIHRvIHNlaXplIGEgcG9ydGlvbiBvZiB0aGUgd2FsbCBiZXR3ZWVuIHR3byB0b3dlcnMgd2hpY2ggaGUgaGFkIGxlYXJuZWQgd2FzIHRoZSBtb3N0IHVucHJvdGVjdGVkIHBhcnQgb2YgdGhlIHdhbGxzIG9mIE1lZ2Fsb3BvbGlzLCB3aGlsZSBoZSBoaW1zZWxmIHdpdGggdGhlIHJlc3Qgb2YgaGlzIGFybXkgZm9sbG93ZWQgc2xvd2x5IGFmdGVyLiBQYW50ZXVzIGZvdW5kIG5vdCBvbmx5IHRoYXQgcGFydGljdWxhciBzcG90LCBidXQgYWxzbyBhIGdyZWF0IHBhcnQgb2YgdGhlIHdhbGwsIHVuZGVmZW5kZWQsIGFuZCBhdCBvbmNlIHRvcmUgZG93biBzb21lIHBvcnRpb25zIG9mIGl0LCB1bmRlcm1pbmluZyBvdGhlcnMsIGFuZCBzbGF5aW5nIGFsbCB0aGUgZGVmZW5kZXJzIHdob20gaGUgZW5jb3VudGVyZWQuIENsZW9tZW5lcyBwcm9tcHRseSBqb2luZWQgaGltLCBhbmQgYmVmb3JlIHRoZSBNZWdhbG9wb2xpdGFucyB3ZXJlIGF3YXJlIG9mIGl0LCBoZSB3YXMgaW5zaWRlIHRoZSBjaXR5IHdpdGggaGlzIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQW50aWdvbnVzIGhhZCB0YWtlbiBUZWdlYSBieSBzaWVnZSwgYW5kIGhhZCBzdXJwcmlzZWQgT3JjaG9tZW51cyBhbmQgTWFudGluZWlhLCBDbGVvbWVuZXMsIG5vdyByZWR1Y2VkIHRvIHRoZSBuYXJyb3cgY29uZmluZXMgb2YgTGFjb25pYSwgc2V0IGZyZWUgdGhvc2Ugb2YgdGhlIEhlbG90cyB3aG8gY291bGQgcGF5IGRvd24gZml2ZSBBdHRpYyBtaW5hcyAodGhlcmVieSByYWlzaW5nIGEgc3VtIG9mIGZpdmUgaHVuZHJlZCB0YWxlbnRzKSwgYXJtZWQgdHdvIHRob3VzYW5kIG9mIHRoZW0gaW4gTWFjZWRvbmlhbiBmYXNoaW9uIGFzIGFuIG9mZnNldCB0byB0aGUgV2hpdGUgU2hpZWxkcyBvZiBBbnRpZ29udXMsIGFuZCBwbGFubmVkIGFuIHVuZGVydGFraW5nIHdoaWNoIHdhcyBncmVhdCBhbmQgZW50aXJlbHkgdW5leHBlY3RlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lZ2Fsb3BvbGlzIHdhcyBhdCB0aGF0IHRpbWUgb2YgaXRzZWxmIGZ1bGx5IGFzIGxhcmdlIGFuZCBzdHJvbmcgYXMgU3BhcnRhLCBhbmQgY291bGQgaGF2ZSBhc3Npc3RhbmNlIGZyb20gdGhlIEFjaGFlYW5zIGFuZCBmcm9tIEFudGlnb251czsgZm9yIEFudGlnb251cyB3YXMgZW5jYW1wZWQgbmVhciBieSwgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIE1lZ2Fsb3BvbGl0YW5zIHdlcmUgY2hpZWZseSByZXNwb25zaWJsZSBmb3IgaGlzIGJlaW5nIGNhbGxlZCBpbiBieSB0aGUgQWNoYWVhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2l0eSBDbGVvbWVuZXMgcGxhbm5lZCB0byBzbmF0Y2ggYXdheSAoZm9yIG5vdGhpbmcgZWxzZSBjb3VsZCBiZXR0ZXIgZGVzY3JpYmUgdGhlIHNwZWVkIGFuZCB1bmV4cGVjdGVkbmVzcyBvZiBoaXMgZmFtb3VzIGFjaGlldmVtZW50KSwgYW5kIG9yZGVyaW5nIGhpcyBtZW4gdG8gdGFrZSBmaXZlIGRheXMnIHJhdGlvbnMsIGhlIGxlZCB0aGVtIGZvcnRoIHRvIFNlbGxhc2lhLCBhcyB0aG91Z2ggaGUgd291bGQgcmF2YWdlIHRoZSB0ZXJyaXRvcnkgb2YgQXJnb3MuIEJ1dCBmcm9tIHRoZXJlIGhlIGRlc2NlbmRlZCBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgTWVnYWxvcG9saXMsIGFuZCBhZnRlciBnaXZpbmcgaGlzIG1lbiB0aGVpciBzdXBwZXIgYXQgdGhlIFJob2V0ZWl1bSwgaGUgbWFyY2hlZCBhdCBvbmNlIGJ5IHdheSBvZiBIZWxpY3VzIGFnYWluc3QgdGhlIGNpdHkgaXRzZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIG5vdCBmYXIgYXdheSBoZSBkaXNwYXRjaGVkIFBhbnRldXMgd2l0aCB0d28gZGl2aXNpb25zIG9mIExhY2VkYWVtb25pYW5zLCBvcmRlcmluZyBoaW0gdG8gc2VpemUgYSBwb3J0aW9uIG9mIHRoZSB3YWxsIGJldHdlZW4gdHdvIHRvd2VycyB3aGljaCBoZSBoYWQgbGVhcm5lZCB3YXMgdGhlIG1vc3QgdW5wcm90ZWN0ZWQgcGFydCBvZiB0aGUgd2FsbHMgb2YgTWVnYWxvcG9saXMsIHdoaWxlIGhlIGhpbXNlbGYgd2l0aCB0aGUgcmVzdCBvZiBoaXMgYXJteSBmb2xsb3dlZCBzbG93bHkgYWZ0ZXIuIFBhbnRldXMgZm91bmQgbm90IG9ubHkgdGhhdCBwYXJ0aWN1bGFyIHNwb3QsIGJ1dCBhbHNvIGEgZ3JlYXQgcGFydCBvZiB0aGUgd2FsbCwgdW5kZWZlbmRlZCwgYW5kIGF0IG9uY2UgdG9yZSBkb3duIHNvbWUgcG9ydGlvbnMgb2YgaXQsIHVuZGVybWluaW5nIG90aGVycywgYW5kIHNsYXlpbmcgYWxsIHRoZSBkZWZlbmRlcnMgd2hvbSBoZSBlbmNvdW50ZXJlZC4gQ2xlb21lbmVzIHByb21wdGx5IGpvaW5lZCBoaW0sIGFuZCBiZWZvcmUgdGhlIE1lZ2Fsb3BvbGl0YW5zIHdlcmUgYXdhcmUgb2YgaXQsIGhlIHdhcyBpbnNpZGUgdGhlIGNpdHkgd2l0aCBoaXMgYXJteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCB0aGUgZGlzYXN0ZXIgYmVjYW1lIGNsZWFyIHRvIHRoZSBjaXRpemVucywgYW5kIHNvbWUgb2YgdGhlbSBhdCBvbmNlIGZsZWQgdGhlIGNpdHksIHRha2luZyB3aXRoIHRoZW0gd2hhdCBwcm9wZXJ0eSB0aGV5IGNvdWxkIGxheSBoYW5kcyBvbiwgd2hpbGUgb3RoZXJzIGJhbmRlZCB0b2dldGhlciB1bmRlciBhcm1zLCByZXNpc3RpbmcgYW5kIGFzc2F1bHRpbmcgdGhlIGVuZW15LiBUaGVzZSB0aGV5IHdlcmUgbm90IHN0cm9uZyBlbm91Z2ggdG8gZWplY3QgZnJvbSB0aGUgY2l0eSwgYnV0IHRoZXkgYWZmb3JkZWQgYSBzYWZlIGVzY2FwZSB0byB0aGUgY2l0aXplbnMgd2hvIHdpc2hlZCB0byBmbGVlLCBzbyB0aGF0IG5vdCBtb3JlIHRoYW4gYSB0aG91c2FuZCBwZXJzb25zIHdlcmUgdGFrZW4gaW4gdGhlIHBsYWNlIGFsbCB0aGUgcmVzdCwgdG9nZXRoZXIgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyB0byBNZXNzZW5lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aG9zZSB3aG8gdHJpZWQgdG8gc2F2ZSB0aGUgY2l0eSBieSBmaWdodGluZyBnb3Qgb2ZmIGFsaXZlOyBidXQgYSBmZXcgb2YgdGhlbSwgYWxsIHRvbGQsIHdlcmUgY2FwdHVyZWQsIGFtb25nIHdob20gd2VyZSBMeXNhbmRyaWRhcyBhbmQgVGhlYXJpZGFzLCBtZW4gb2YgdGhlIGdyZWF0ZXN0IHJlcHV0YXRpb24gYW5kIGluZmx1ZW5jZSBpbiBNZWdhbG9wb2xpcy4gVGhlcmVmb3JlIHRoZSBzb2xkaWVycyBoYWQgbm8gc29vbmVyIHNlaXplZCB0aGVtIHRoYW4gdGhleSBicm91Z2h0IHRoZW0gdG8gQ2xlb21lbmVzLiBUaGVuIEx5c2FuZHJpZGFzLCB3aGVuIGhlIHNhdyBDbGVvbWVuZXMgZnJvbSBhZmFyLCBjcmllZCBvdXQgd2l0aCBhIGxvdWQgdm9pY2UgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgaW4gdGh5IHBvd2VyIG5vdywgTyBraW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdG8gZGlzcGxheSBhbiBhY3Rpb24gZmFpcmVyIGFuZCBtb3JlIHdvcnRoeSBvZiBhIGtpbmcgdGhhbiBhbnkgdGhhdCBoYXMgcHJlY2VkZWQgaXQsIGFuZCB0aGVyZWJ5IHdpbiBtZW4ncyBoaWdoZXN0IGVzdGVlbS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENsZW9tZW5lcywgY29uamVjdHVyaW5nIHdoYXQgdGhlIHNwZWFrZXIgd2lzaGVkLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgbWVhbmVzdCB0aG91LCBMeXNhbmRyaWRhcz8gVGhvdSBzdXJlbHkgY2Fuc3Qgbm90IGJpZCBtZSBnaXZlIHlvdXIgY2l0eSBiYWNrIGFnYWluIHRvIHlvdS48L3E+IFRvIHdoaWNoIEx5c2FuZHJpZGFzIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCB0aGF0IGlzIGp1c3Qgd2hhdCBJIG1lYW4sIGFuZCBJIGFkdmlzZSB0aGVlIGluIHRoaW5lIG93biBpbnRlcmVzdHMgbm90IHRvIGRlc3Ryb3kgc28gZ3JlYXQgYSBjaXR5LCBodXQgdG8gZmlsbCBpdCB3aXRoIGZyaWVuZHMgYW5kIGFsbGllcyB3aG8gYXJlIHRydXN0eSBhbmQgdHJ1ZSBieSBnaXZpbmcgYmFjayB0byB0aGUgTWVnYWxvcG9saXRhbnMgdGhlaXIgbmF0aXZlIGNpdHkgYW5kIGJlY29taW5nIHRoZSBwcmVzZXJ2ZXIgb2Ygc28gbGFyZ2UgYSBwZW9wbGUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBhIHNob3J0IHNpbGVuY2UsIENsZW9tZW5lcyBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGRpZmZpY3VsdCB0byBiZWxpZXZlIHRoYXQgYWxsIHRoaXMgd2lsbCBoYXBwZW4sIGJ1dCB3aXRoIHVzIGxldCB3aGF0IG1ha2VzIGZvciBnb29kIHJlcHV0ZSBhbHdheXMgY2FycnkgdGhlIGRheSwgcmF0aGVyIHRoYW4gd2hhdCBicmluZ3MgZ2Fpbi48L3E+IEFuZCB3aXRoIHRoZXNlIHdvcmRzIGhlIHNlbnQgdGhlIHR3byBtZW4gb2ZmIHRvIE1lc3NlbmUgYXR0ZW5kZWQgYnkgYSBoZXJhbGQgZnJvbSBoaW1zZWxmLCBvZmZlcmluZyB0byBnaXZlIGJhY2sgdGhlaXIgY2l0eSB0byB0aGUgTWVnYWxvcG9saXRhbnMgb24gY29uZGl0aW9uIHRoYXQgdGhleSByZW5vdW5jZSB0aGUgQWNoYWVhbiBjYXVzZSBhbmQgYmUgaGlzIGZyaWVuZHMgYW5kIGFsbGllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCB0aGUgZGlzYXN0ZXIgYmVjYW1lIGNsZWFyIHRvIHRoZSBjaXRpemVucywgYW5kIHNvbWUgb2YgdGhlbSBhdCBvbmNlIGZsZWQgdGhlIGNpdHksIHRha2luZyB3aXRoIHRoZW0gd2hhdCBwcm9wZXJ0eSB0aGV5IGNvdWxkIGxheSBoYW5kcyBvbiwgd2hpbGUgb3RoZXJzIGJhbmRlZCB0b2dldGhlciB1bmRlciBhcm1zLCByZXNpc3RpbmcgYW5kIGFzc2F1bHRpbmcgdGhlIGVuZW15LiBUaGVzZSB0aGV5IHdlcmUgbm90IHN0cm9uZyBlbm91Z2ggdG8gZWplY3QgZnJvbSB0aGUgY2l0eSwgYnV0IHRoZXkgYWZmb3JkZWQgYSBzYWZlIGVzY2FwZSB0byB0aGUgY2l0aXplbnMgd2hvIHdpc2hlZCB0byBmbGVlLCBzbyB0aGF0IG5vdCBtb3JlIHRoYW4gYSB0aG91c2FuZCBwZXJzb25zIHdlcmUgdGFrZW4gaW4gdGhlIHBsYWNlIGFsbCB0aGUgcmVzdCwgdG9nZXRoZXIgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyB0byBNZXNzZW5lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRob3NlIHdobyB0cmllZCB0byBzYXZlIHRoZSBjaXR5IGJ5IGZpZ2h0aW5nIGdvdCBvZmYgYWxpdmU7IGJ1dCBhIGZldyBvZiB0aGVtLCBhbGwgdG9sZCwgd2VyZSBjYXB0dXJlZCwgYW1vbmcgd2hvbSB3ZXJlIEx5c2FuZHJpZGFzIGFuZCBUaGVhcmlkYXMsIG1lbiBvZiB0aGUgZ3JlYXRlc3QgcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlIGluIE1lZ2Fsb3BvbGlzLiBUaGVyZWZvcmUgdGhlIHNvbGRpZXJzIGhhZCBubyBzb29uZXIgc2VpemVkIHRoZW0gdGhhbiB0aGV5IGJyb3VnaHQgdGhlbSB0byBDbGVvbWVuZXMuIFRoZW4gTHlzYW5kcmlkYXMsIHdoZW4gaGUgc2F3IENsZW9tZW5lcyBmcm9tIGFmYXIsIGNyaWVkIG91dCB3aXRoIGEgbG91ZCB2b2ljZSBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGluIHRoeSBwb3dlciBub3csIE8ga2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHRvIGRpc3BsYXkgYW4gYWN0aW9uIGZhaXJlciBhbmQgbW9yZSB3b3J0aHkgb2YgYSBraW5nIHRoYW4gYW55IHRoYXQgaGFzIHByZWNlZGVkIGl0LCBhbmQgdGhlcmVieSB3aW4gbWVuJ3MgaGlnaGVzdCBlc3RlZW0uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDbGVvbWVuZXMsIGNvbmplY3R1cmluZyB3aGF0IHRoZSBzcGVha2VyIHdpc2hlZCwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgbWVhbmVzdCB0aG91LCBMeXNhbmRyaWRhcz8gVGhvdSBzdXJlbHkgY2Fuc3Qgbm90IGJpZCBtZSBnaXZlIHlvdXIgY2l0eSBiYWNrIGFnYWluIHRvIHlvdS48L3E+IFRvIHdoaWNoIEx5c2FuZHJpZGFzIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsIHRoYXQgaXMganVzdCB3aGF0IEkgbWVhbiwgYW5kIEkgYWR2aXNlIHRoZWUgaW4gdGhpbmUgb3duIGludGVyZXN0cyBub3QgdG8gZGVzdHJveSBzbyBncmVhdCBhIGNpdHksIGh1dCB0byBmaWxsIGl0IHdpdGggZnJpZW5kcyBhbmQgYWxsaWVzIHdobyBhcmUgdHJ1c3R5IGFuZCB0cnVlIGJ5IGdpdmluZyBiYWNrIHRvIHRoZSBNZWdhbG9wb2xpdGFucyB0aGVpciBuYXRpdmUgY2l0eSBhbmQgYmVjb21pbmcgdGhlIHByZXNlcnZlciBvZiBzbyBsYXJnZSBhIHBlb3BsZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBhIHNob3J0IHNpbGVuY2UsIENsZW9tZW5lcyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgZGlmZmljdWx0IHRvIGJlbGlldmUgdGhhdCBhbGwgdGhpcyB3aWxsIGhhcHBlbiwgYnV0IHdpdGggdXMgbGV0IHdoYXQgbWFrZXMgZm9yIGdvb2QgcmVwdXRlIGFsd2F5cyBjYXJyeSB0aGUgZGF5LCByYXRoZXIgdGhhbiB3aGF0IGJyaW5ncyBnYWluLjwvcT4gQW5kIHdpdGggdGhlc2Ugd29yZHMgaGUgc2VudCB0aGUgdHdvIG1lbiBvZmYgdG8gTWVzc2VuZSBhdHRlbmRlZCBieSBhIGhlcmFsZCBmcm9tIGhpbXNlbGYsIG9mZmVyaW5nIHRvIGdpdmUgYmFjayB0aGVpciBjaXR5IHRvIHRoZSBNZWdhbG9wb2xpdGFucyBvbiBjb25kaXRpb24gdGhhdCB0aGV5IHJlbm91bmNlIHRoZSBBY2hhZWFuIGNhdXNlIGFuZCBiZSBoaXMgZnJpZW5kcyBhbmQgYWxsaWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhbHRob3VnaCBDbGVvbWVuZXMgbWFkZSB0aGlzIGJlbmV2b2xlbnQgYW5kIGh1bWFuZSBvZmZlciwgUGhpbG9wb2VtZW4gd291bGQgbm90IGFsbG93IHRoZSBNZWdhbG9wb2xpdGFucyB0byBicmVhayB0aGVpciBwbGVkZ2VzIHRvIHRoZSBBY2hhZWFucywgYnV0IGRlbm91bmNlZCBDbGVvbWVuZXMgb24gdGhlIGdyb3VuZCB0aGF0IGhlIHNvdWdodCwgbm90IHNvIG11Y2ggdG8gZ2l2ZSB0aGVpciBjaXR5IGJhY2sgdG8gaXRzIGNpdGl6ZW5zLCBhcyByYXRoZXIgdG8gZ2V0IHRoZSBjaXRpemVucyB3aXRoIHRoZWlyIGNpdHk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiA1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UGhpbG9wb2VtZW48L3RpdGxlPiwgdi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT47IHRoZW4gaGUgZHJvdmUgVGhlYXJpZGFzIGFuZCBMeXNhbmRyaWRhcyBvdXQgb2YgTWVzc2VuZS4gVGhpcyB3YXMgdGhhdCBQaGlsb3BvZW1lbiB3aG8gYWZ0ZXJ3YXJkcyBiZWNhbWUgdGhlIGxlYWRlciBvZiB0aGUgQWNoYWVhbnMgYW5kIHdvbiB0aGUgZ3JlYXRlc3QgZmFtZSBhbW9uZyB0aGUgR3JlZWtzLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBoaXMgb3duIExpZmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsdGhvdWdoIENsZW9tZW5lcyBtYWRlIHRoaXMgYmVuZXZvbGVudCBhbmQgaHVtYW5lIG9mZmVyLCBQaGlsb3BvZW1lbiB3b3VsZCBub3QgYWxsb3cgdGhlIE1lZ2Fsb3BvbGl0YW5zIHRvIGJyZWFrIHRoZWlyIHBsZWRnZXMgdG8gdGhlIEFjaGFlYW5zLCBidXQgZGVub3VuY2VkIENsZW9tZW5lcyBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgc291Z2h0LCBub3Qgc28gbXVjaCB0byBnaXZlIHRoZWlyIGNpdHkgYmFjayB0byBpdHMgY2l0aXplbnMsIGFzIHJhdGhlciB0byBnZXQgdGhlIGNpdGl6ZW5zIHdpdGggdGhlaXIgY2l0eTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiA1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsb3BvZW1lbjwvdGl0bGU+LCB2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPjsgdGhlbiBoZSBkcm92ZSBUaGVhcmlkYXMgYW5kIEx5c2FuZHJpZGFzIG91dCBvZiBNZXNzZW5lLiBUaGlzIHdhcyB0aGF0IFBoaWxvcG9lbWVuIHdobyBhZnRlcndhcmRzIGJlY2FtZSB0aGUgbGVhZGVyIG9mIHRoZSBBY2hhZWFucyBhbmQgd29uIHRoZSBncmVhdGVzdCBmYW1lIGFtb25nIHRoZSBHcmVla3MsIGFzIEkgaGF2ZSB3cml0dGVuIGluIGhpcyBvd24gTGlmZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhpbC4gNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhpbG9wb2VtZW48L3RpdGxlPiwgdi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBoaWxvcG9lbWVuPC90aXRsZT4sIHYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyB3ZXJlIGJyb3VnaHQgdG8gQ2xlb21lbmVzLCBhbHRob3VnaCBoZSBoYWQgdGFrZW4gc3RyaWN0IGNhcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgaW52aW9sYXRlIGFuZCB1bmhhcm1lZCwgc28gdGhhdCBubyBvbmUgdG9vayBldmVuIHRoZSBsZWFzdCB0aGluZyB3aXRob3V0IGJlaW5nIGRldGVjdGVkLCBoZSB3YXMgbm93IHNvIGluY2Vuc2VkIGFuZCBlbWJpdHRlcmVkIHRoYXQgaGUgcGx1bmRlcmVkIGl0LCBhbmQgc2VudCBpdHMgc3RhdHVlcyBhbmQgcGljdHVyZXMgb2ZmIHRvIFNwYXJ0YTsgdGhlbiwgYWZ0ZXIgY29tcGxldGVseSBkZW1vbGlzaGluZyBtb3N0IGFuZCB0aGUgbGFyZ2VzdCBwb3J0aW9ucyBvZiB0aGUgY2l0eSwgaGUgbWFyY2hlZCBiYWNrIHRvd2FyZHMgaG9tZSwgYmVpbmcgaW4gZmVhciBvZiBBbnRpZ29udXMgYW5kIHRoZSBBY2hhZWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIGRpZCBub3RoaW5nLiBGb3IgdGhleSB3ZXJlIGhvbGRpbmcgYSBnZW5lcmFsIGFzc2VtYmx5IGF0IEFlZ2l1bTsgYW5kIGhlcmUgQXJhdHVzLCBhZnRlciBtb3VudGluZyB0aGUgYmVtYSwgd2VwdCBmb3IgYSBsb25nIHRpbWUsIGhvbGRpbmcgaGlzIG1hbnRsZSBiZWZvcmUgaGlzIGZhY2U7IGFuZCB3aGVuIGhpcyBhdWRpZW5jZSB3YXMgYW1hemVkIGFuZCBiYWRlIGhpbSBzcGVhaywgaGUgdG9sZCB0aGVtIHRoYXQgTWVnYWxvcG9saXMgaGFkIGJlZW4gZGVzdHJveWVkIGJ5IENsZW9tZW5lcy4gVGhlbiB0aGUgYXNzZW1ibHkgYXQgb25jZSBicm9rZSB1cCwgdGhlIEFjaGFlYW5zIGJlaW5nIGZpbGxlZCB3aXRoIGNvbnN0ZXJuYXRpb24gYXQgdGhlIHN3aWZ0bmVzcyBhbmQgbWFnbml0dWRlIG9mIHRoZSBjYWxhbWl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW50aWdvbnVzIGF0IGZpcnN0IGF0dGVtcHRlZCB0byBnaXZlIGFpZCwgYnV0IGFmdGVyd2FyZHMsIHNpbmNlIGhpcyBmb3JjZXMgY2FtZSB1cCB0byBoaW0gYnV0IHNsb3dseSBmcm9tIHRoZWlyIHdpbnRlciBxdWFydGVycywgaGUgb3JkZXJlZCB0aGVtIHRvIHJlbWFpbiB3aGVyZSB0aGV5IHdlcmUsIHdoaWxlIGhlIGhpbXNlbGYgcHJvY2VlZGVkIHRvIEFyZ29zLCBoYXZpbmcgb25seSBhIGZldyBzb2xkaWVycyB3aXRoIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyB3ZXJlIGJyb3VnaHQgdG8gQ2xlb21lbmVzLCBhbHRob3VnaCBoZSBoYWQgdGFrZW4gc3RyaWN0IGNhcmUgdGhhdCB0aGUgY2l0eSBzaG91bGQgYmUgaW52aW9sYXRlIGFuZCB1bmhhcm1lZCwgc28gdGhhdCBubyBvbmUgdG9vayBldmVuIHRoZSBsZWFzdCB0aGluZyB3aXRob3V0IGJlaW5nIGRldGVjdGVkLCBoZSB3YXMgbm93IHNvIGluY2Vuc2VkIGFuZCBlbWJpdHRlcmVkIHRoYXQgaGUgcGx1bmRlcmVkIGl0LCBhbmQgc2VudCBpdHMgc3RhdHVlcyBhbmQgcGljdHVyZXMgb2ZmIHRvIFNwYXJ0YTsgdGhlbiwgYWZ0ZXIgY29tcGxldGVseSBkZW1vbGlzaGluZyBtb3N0IGFuZCB0aGUgbGFyZ2VzdCBwb3J0aW9ucyBvZiB0aGUgY2l0eSwgaGUgbWFyY2hlZCBiYWNrIHRvd2FyZHMgaG9tZSwgYmVpbmcgaW4gZmVhciBvZiBBbnRpZ29udXMgYW5kIHRoZSBBY2hhZWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSBkaWQgbm90aGluZy4gRm9yIHRoZXkgd2VyZSBob2xkaW5nIGEgZ2VuZXJhbCBhc3NlbWJseSBhdCBBZWdpdW07IGFuZCBoZXJlIEFyYXR1cywgYWZ0ZXIgbW91bnRpbmcgdGhlIGJlbWEsIHdlcHQgZm9yIGEgbG9uZyB0aW1lLCBob2xkaW5nIGhpcyBtYW50bGUgYmVmb3JlIGhpcyBmYWNlOyBhbmQgd2hlbiBoaXMgYXVkaWVuY2Ugd2FzIGFtYXplZCBhbmQgYmFkZSBoaW0gc3BlYWssIGhlIHRvbGQgdGhlbSB0aGF0IE1lZ2Fsb3BvbGlzIGhhZCBiZWVuIGRlc3Ryb3llZCBieSBDbGVvbWVuZXMuIFRoZW4gdGhlIGFzc2VtYmx5IGF0IG9uY2UgYnJva2UgdXAsIHRoZSBBY2hhZWFucyBiZWluZyBmaWxsZWQgd2l0aCBjb25zdGVybmF0aW9uIGF0IHRoZSBzd2lmdG5lc3MgYW5kIG1hZ25pdHVkZSBvZiB0aGUgY2FsYW1pdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cyBhdCBmaXJzdCBhdHRlbXB0ZWQgdG8gZ2l2ZSBhaWQsIGJ1dCBhZnRlcndhcmRzLCBzaW5jZSBoaXMgZm9yY2VzIGNhbWUgdXAgdG8gaGltIGJ1dCBzbG93bHkgZnJvbSB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGhlIG9yZGVyZWQgdGhlbSB0byByZW1haW4gd2hlcmUgdGhleSB3ZXJlLCB3aGlsZSBoZSBoaW1zZWxmIHByb2NlZWRlZCB0byBBcmdvcywgaGF2aW5nIG9ubHkgYSBmZXcgc29sZGllcnMgd2l0aCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoaXMgd2FzIHRoZSByZWFzb24gd2h5IHRoZSBuZXh0IGF0dGVtcHQgb2YgQ2xlb21lbmVzLCB3aGljaCB3YXMgdGhvdWdodCB0byBiZSBhIGRlZWQgb2YgZXh0cmF2YWdhbnQgYW5kIGZyYW50aWMgZGFyaW5nLCB3YXMgcmVhbGx5IG1hZGUgd2l0aCBncmVhdCBmb3JldGhvdWdodCwgYXMgUG9seWJpdXMgc2F5cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vc3QgcGVvcGxlIHRob3VnaHQgdGhpcyBhIGhhemFyZG91cyBhbmQgZm9vbGhhcmR5IHN0ZXA7IGJ1dCB0aG9zZSB3aG8gd2VyZSBjYXBhYmxlIG9mIGp1ZGdpbmcgcmVnYXJkZWQgdGhlIG1lYXN1cmUgYXMgYXQgb25jZSBzYWZlIGFuZCBwcnVkZW50PC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjY0IiB2YWxpZD0ieWVzIj5paS4gNjQsIDE8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQ2xlb21lbmVzIGtuZXcgdGhhdCB0aGUgTWFjZWRvbmlhbnMgd2VyZSBkaXNwZXJzZWQgYW1vbmcgdGhlIGNpdGllcyBpbiB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGFuZCB0aGF0IEFudGlnb251cyBoYWQgb25seSBhIGZldyBtZXJjZW5hcmllcyB3aXRoIGhpbSBhdCBBcmdvcywgd2hlcmUgaGUgd2FzIHNwZW5kaW5nIHRoZSB3aW50ZXIgd2l0aCBoaXMgZnJpZW5kcy4gQ2xlb21lbmVzIHRoZXJlZm9yZSBpbnZhZGVkIHRoZSB0ZXJyaXRvcnkgb2YgQXJnb3MsIGNhbGN1bGF0aW5nIHRoYXQgQW50aWdvbnVzIHdvdWxkIGVpdGhlciBiZSBzaGFtZWQgaW50byBmaWdodGluZyBhbmQgd291bGQgYmUgb3ZlcnBvd2VyZWQsIG9yLCBpbiBjYXNlIGhlIGRpZCBub3QgdmVudHVyZSB0byBmaWdodCwgd291bGQgaW5jdXIgb2RpdW0gYW1vbmcgdGhlIEFyZ2l2ZXMuIEFuZCB0aGlzIHdhcyB3aGF0IGFjdHVhbGx5IGNhbWUgdG8gcGFzcy4gRm9yIHdoaWxlIENsZW9tZW5lcyB3YXMgd2FzdGluZyB0aGUgY291bnRyeSBhbmQgcm9iYmluZyBpdCBvZiBhbGwgdGhhdCB3YXMgdGhlcmUsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBBcmdpdmVzLCBpbiBkaXN0cmVzcywga2VwdCB0aHJvbmdpbmcgdGhlIGRvb3JzIG9mIHRoZSBraW5nIGFuZCBjYWxsaW5nIHVwb24gaGltIHdpdGggbG91ZCB2b2ljZXMgZWl0aGVyIHRvIGZpZ2h0IG9yIHlpZWxkIHRoZSBsZWFkZXJzaGlwIHRvIGhpcyBiZXR0ZXJzLiBCdXQgQW50aWdvbnVzLCBhcyBiZWNhbWUgYSBwcnVkZW50IGdlbmVyYWwsIGNvbnNpZGVyaW5nIHRoYXQgZGlzZ3JhY2UgbGF5IGluIHRha2luZyB1bnJlYXNvbmFibGUgcmlza3MgYW5kIHRocm93aW5nIGF3YXkgaGlzIHNlY3VyaXR5LCByYXRoZXIgdGhhbiBpbiBiZWluZyBhYnVzZWQgYnkgdGhlIG91dHNpZGUgcmFiYmxlLCB3b3VsZCBub3QgZ28gZm9ydGggZnJvbSB0aGUgY2l0eSwgYnV0IHN0b29kIGJ5IGhpcyBwcmV2aW91cyBwbGFucy4gU28gQ2xlb21lbmVzIGNhbWUgdXAgdG8gdGhlIHZlcnkgd2FsbHMgb2YgdGhlIGNpdHkgd2l0aCBoaXMgYXJteSwgd3JvdWdodCBpbnNvbGVudCBoYXZvYywgYW5kIHRoZW4gd2l0aGRyZXcgdW5tb2xlc3RlZC4KCQkJPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vc3QgcGVvcGxlIHRob3VnaHQgdGhpcyBhIGhhemFyZG91cyBhbmQgZm9vbGhhcmR5IHN0ZXA7IGJ1dCB0aG9zZSB3aG8gd2VyZSBjYXBhYmxlIG9mIGp1ZGdpbmcgcmVnYXJkZWQgdGhlIG1lYXN1cmUgYXMgYXQgb25jZSBzYWZlIGFuZCBwcnVkZW50PC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjY0IiB2YWxpZD0ieWVzIj5paS4gNjQsIDE8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vc3QgcGVvcGxlIHRob3VnaHQgdGhpcyBhIGhhemFyZG91cyBhbmQgZm9vbGhhcmR5IHN0ZXA7IGJ1dCB0aG9zZSB3aG8gd2VyZSBjYXBhYmxlIG9mIGp1ZGdpbmcgcmVnYXJkZWQgdGhlIG1lYXN1cmUgYXMgYXQgb25jZSBzYWZlIGFuZCBwcnVkZW50PC9xPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjY0IiB2YWxpZD0ieWVzIj5paS4gNjQsIDE8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDbGVvbWVuZXMga25ldyB0aGF0IHRoZSBNYWNlZG9uaWFucyB3ZXJlIGRpc3BlcnNlZCBhbW9uZyB0aGUgY2l0aWVzIGluIHRoZWlyIHdpbnRlciBxdWFydGVycywgYW5kIHRoYXQgQW50aWdvbnVzIGhhZCBvbmx5IGEgZmV3IG1lcmNlbmFyaWVzIHdpdGggaGltIGF0IEFyZ29zLCB3aGVyZSBoZSB3YXMgc3BlbmRpbmcgdGhlIHdpbnRlciB3aXRoIGhpcyBmcmllbmRzLiBDbGVvbWVuZXMgdGhlcmVmb3JlIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBBcmdvcywgY2FsY3VsYXRpbmcgdGhhdCBBbnRpZ29udXMgd291bGQgZWl0aGVyIGJlIHNoYW1lZCBpbnRvIGZpZ2h0aW5nIGFuZCB3b3VsZCBiZSBvdmVycG93ZXJlZCwgb3IsIGluIGNhc2UgaGUgZGlkIG5vdCB2ZW50dXJlIHRvIGZpZ2h0LCB3b3VsZCBpbmN1ciBvZGl1bSBhbW9uZyB0aGUgQXJnaXZlcy4gQW5kIHRoaXMgd2FzIHdoYXQgYWN0dWFsbHkgY2FtZSB0byBwYXNzLiBGb3Igd2hpbGUgQ2xlb21lbmVzIHdhcyB3YXN0aW5nIHRoZSBjb3VudHJ5IGFuZCByb2JiaW5nIGl0IG9mIGFsbCB0aGF0IHdhcyB0aGVyZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBBcmdpdmVzLCBpbiBkaXN0cmVzcywga2VwdCB0aHJvbmdpbmcgdGhlIGRvb3JzIG9mIHRoZSBraW5nIGFuZCBjYWxsaW5nIHVwb24gaGltIHdpdGggbG91ZCB2b2ljZXMgZWl0aGVyIHRvIGZpZ2h0IG9yIHlpZWxkIHRoZSBsZWFkZXJzaGlwIHRvIGhpcyBiZXR0ZXJzLiBCdXQgQW50aWdvbnVzLCBhcyBiZWNhbWUgYSBwcnVkZW50IGdlbmVyYWwsIGNvbnNpZGVyaW5nIHRoYXQgZGlzZ3JhY2UgbGF5IGluIHRha2luZyB1bnJlYXNvbmFibGUgcmlza3MgYW5kIHRocm93aW5nIGF3YXkgaGlzIHNlY3VyaXR5LCByYXRoZXIgdGhhbiBpbiBiZWluZyBhYnVzZWQgYnkgdGhlIG91dHNpZGUgcmFiYmxlLCB3b3VsZCBub3QgZ28gZm9ydGggZnJvbSB0aGUgY2l0eSwgYnV0IHN0b29kIGJ5IGhpcyBwcmV2aW91cyBwbGFucy4gU28gQ2xlb21lbmVzIGNhbWUgdXAgdG8gdGhlIHZlcnkgd2FsbHMgb2YgdGhlIGNpdHkgd2l0aCBoaXMgYXJteSwgd3JvdWdodCBpbnNvbGVudCBoYXZvYywgYW5kIHRoZW4gd2l0aGRyZXcgdW5tb2xlc3RlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBsaXR0bGUgbGF0ZXIsIGhvd2V2ZXIsIGhlYXJpbmcgdGhhdCBBbnRpZ29udXMgaGFkIGFkdmFuY2VkIHRvIFRlZ2VhIHdpdGggaW50ZW50IHRvIGludmFkZSBMYWNvbmlhIGZyb20gdGhhdCBjaXR5LCBDbGVvbWVuZXMgcXVpY2tseSB0b29rIGhpcyBzb2xkaWVycywgbWFyY2hlZCBwYXN0IHRoZSBlbmVteSBieSBhIGRpZmZlcmVudCByb3V0ZSwgYW5kIGF0IGRheWJyZWFrIGFwcGVhcmVkIHN1ZGRlbmx5IGJlZm9yZSB0aGUgY2l0eSBvZiBBcmdvcywgcmF2YWdpbmcgdGhlIHBsYWluIGFuZCBkZXN0cm95aW5nIHRoZSBncmFpbiwgbm90IGN1dHRpbmcgdGhpcyBkb3duLCBhcyB1c3VhbCwgd2l0aCBzaWNrbGVzIGFuZCBrbml2ZXMsIGJ1dCBiZWF0aW5nIGl0IGRvd24gd2l0aCBncmVhdCBwaWVjZXMgb2Ygd29vZCBmYXNoaW9uZWQgbGlrZSBzcGVhci1zaGFmdHMuIFRoZXNlIGhpcyBzb2xkaWVycyBwbGllZCBhcyBpZiBpbiBzcG9ydCwgd2hpbGUgcGFzc2luZyBieSwgYW5kIHdpdGggbm8gZWZmb3J0IGF0IGFsbCB0aGV5IHdvdWxkIGNydXNoIGFuZCBydWluIGFsbCB0aGUgY3JvcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgaG93ZXZlciwgdGhleSB3ZXJlIGNvbWUgdG8gdGhlIEN5bGxhcmFiaXMgYW5kIGF0dGVtcHRlZCB0byBzZXQgdGhlIGd5bW5hc2l1bSBvbiBmaXJlLCBDbGVvbWVuZXMgc3RvcHBlZCB0aGVtLCBmZWVsaW5nIHRoYXQgaGlzIHdvcmsgYXQgTWVnYWxvcG9saXMgaGFkIGJlZW4gZG9uZSB0byBzYXRpc2Z5IGhpcyBhbmdlciByYXRoZXIgdGhhbiBoaXMgaG9ub3VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBsaXR0bGUgbGF0ZXIsIGhvd2V2ZXIsIGhlYXJpbmcgdGhhdCBBbnRpZ29udXMgaGFkIGFkdmFuY2VkIHRvIFRlZ2VhIHdpdGggaW50ZW50IHRvIGludmFkZSBMYWNvbmlhIGZyb20gdGhhdCBjaXR5LCBDbGVvbWVuZXMgcXVpY2tseSB0b29rIGhpcyBzb2xkaWVycywgbWFyY2hlZCBwYXN0IHRoZSBlbmVteSBieSBhIGRpZmZlcmVudCByb3V0ZSwgYW5kIGF0IGRheWJyZWFrIGFwcGVhcmVkIHN1ZGRlbmx5IGJlZm9yZSB0aGUgY2l0eSBvZiBBcmdvcywgcmF2YWdpbmcgdGhlIHBsYWluIGFuZCBkZXN0cm95aW5nIHRoZSBncmFpbiwgbm90IGN1dHRpbmcgdGhpcyBkb3duLCBhcyB1c3VhbCwgd2l0aCBzaWNrbGVzIGFuZCBrbml2ZXMsIGJ1dCBiZWF0aW5nIGl0IGRvd24gd2l0aCBncmVhdCBwaWVjZXMgb2Ygd29vZCBmYXNoaW9uZWQgbGlrZSBzcGVhci1zaGFmdHMuIFRoZXNlIGhpcyBzb2xkaWVycyBwbGllZCBhcyBpZiBpbiBzcG9ydCwgd2hpbGUgcGFzc2luZyBieSwgYW5kIHdpdGggbm8gZWZmb3J0IGF0IGFsbCB0aGV5IHdvdWxkIGNydXNoIGFuZCBydWluIGFsbCB0aGUgY3JvcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZXkgd2VyZSBjb21lIHRvIHRoZSBDeWxsYXJhYmlzIGFuZCBhdHRlbXB0ZWQgdG8gc2V0IHRoZSBneW1uYXNpdW0gb24gZmlyZSwgQ2xlb21lbmVzIHN0b3BwZWQgdGhlbSwgZmVlbGluZyB0aGF0IGhpcyB3b3JrIGF0IE1lZ2Fsb3BvbGlzIGhhZCBiZWVuIGRvbmUgdG8gc2F0aXNmeSBoaXMgYW5nZXIgcmF0aGVyIHRoYW4gaGlzIGhvbm91ci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBmb3IgQW50aWdvbnVzLCBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgd2VudCBiYWNrIGF0IG9uY2UgdG8gQXJnb3MsIGFuZCB0aGVuIG9jY3VwaWVkIHRoZSBoaWxscyBhbmQgYWxsIHRoZSBwYXNzZXMgd2l0aCBvdXRwb3N0cy4gQnV0IENsZW9tZW5lcyBwcmV0ZW5kZWQgdG8gZGVzcGlzZSBhbmQgaWdub3JlIGFsbCB0aGlzLCBhbmQgc2VudCBoZXJhbGRzIHRvIHRoZSBraW5nIGRlbWFuZGluZyB0aGUga2V5cyB0byB0aGUgSGVyYWV1bSwgdGhhdCBoZSBtaWdodCBvZmZlciBzYWNyaWZpY2UgdG8gdGhlIGdvZGRlc3MgYmVmb3JlIGhlIHdlbnQgYXdheS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciB0aGlzIGplc3QgYW5kIG1vY2tlcnksIGFuZCBhZnRlciBzYWNyaWZpY2luZyB0byB0aGUgZ29kZGVzcyB1bmRlciB0aGUgd2FsbHMgb2YgdGhlIHRlbXBsZSwgd2hpY2ggd2FzIGNsb3NlZCwgaGUgbGVkIGhpcyBhcm15IG9mZiB0byBQaGxpdXMuIEZyb20gdGhlbmNlLCBhZnRlciBleHBlbGxpbmcgdGhlIGdhcnJpc29uIG9mIE9saWd5cnR1cywgaGUgbWFyY2hlZCBwYXN0IE9yY2hvbWVudXMsIG5vdCBvbmx5IGluZnVzaW5nIGhpZ2ggc3Bpcml0cyBhbmQgY291cmFnZSBpbnRvIGl0cyBjaXRpemVucywgYnV0IGFsc28gbGVhZGluZyBoaXMgZW5lbWllcyB0byB0aGluayBoaW0gYSBtYW4gY2FwYWJsZSBvZiBsZWFkZXJzaGlwIGFuZCB3b3J0aHkgdG8gd2llbGQgZ3JlYXQgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBkcmV3IGhpcyByZXNvdXJjZXMgZnJvbSBidXQgYSBzaW5nbGUgY2l0eSwgYW5kIHlldCB3YWdlZCB3YXIgYWdhaW5zdCB0aGUgTWFjZWRvbmlhbiBwb3dlciwgYWxsIHRoZSBQZWxvcG9ubmVzaWFucywgYW5kIHRoZSB0cmVhc3VyZXMgb2YgYSBraW5nIHRvZ2V0aGVyLCBhbmQgbm90IG9ubHkga2VwdCBMYWNvbmlhIGludmlvbGF0ZSwgYnV0IGFjdHVhbGx5IHJhdmFnZWQgaGlzIGVuZW1pZXMnIHRlcnJpdG9yeSBhbmQgdG9vayBjaXRpZXMgb2YgZ3JlYXQgc2l6ZTsgYW5kIG1lbiB0aG91Z2h0IHRoaXMgYSBwcm9vZiBvZiBubyBvcmRpbmFyeSBhYmlsaXR5IGFuZCBsYXJnZW5lc3Mgb2YgcHVycG9zZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIHRoaXMgamVzdCBhbmQgbW9ja2VyeSwgYW5kIGFmdGVyIHNhY3JpZmljaW5nIHRvIHRoZSBnb2RkZXNzIHVuZGVyIHRoZSB3YWxscyBvZiB0aGUgdGVtcGxlLCB3aGljaCB3YXMgY2xvc2VkLCBoZSBsZWQgaGlzIGFybXkgb2ZmIHRvIFBobGl1cy4gRnJvbSB0aGVuY2UsIGFmdGVyIGV4cGVsbGluZyB0aGUgZ2Fycmlzb24gb2YgT2xpZ3lydHVzLCBoZSBtYXJjaGVkIHBhc3QgT3JjaG9tZW51cywgbm90IG9ubHkgaW5mdXNpbmcgaGlnaCBzcGlyaXRzIGFuZCBjb3VyYWdlIGludG8gaXRzIGNpdGl6ZW5zLCBidXQgYWxzbyBsZWFkaW5nIGhpcyBlbmVtaWVzIHRvIHRoaW5rIGhpbSBhIG1hbiBjYXBhYmxlIG9mIGxlYWRlcnNoaXAgYW5kIHdvcnRoeSB0byB3aWVsZCBncmVhdCBwb3dlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBkcmV3IGhpcyByZXNvdXJjZXMgZnJvbSBidXQgYSBzaW5nbGUgY2l0eSwgYW5kIHlldCB3YWdlZCB3YXIgYWdhaW5zdCB0aGUgTWFjZWRvbmlhbiBwb3dlciwgYWxsIHRoZSBQZWxvcG9ubmVzaWFucywgYW5kIHRoZSB0cmVhc3VyZXMgb2YgYSBraW5nIHRvZ2V0aGVyLCBhbmQgbm90IG9ubHkga2VwdCBMYWNvbmlhIGludmlvbGF0ZSwgYnV0IGFjdHVhbGx5IHJhdmFnZWQgaGlzIGVuZW1pZXMnIHRlcnJpdG9yeSBhbmQgdG9vayBjaXRpZXMgb2YgZ3JlYXQgc2l6ZTsgYW5kIG1lbiB0aG91Z2h0IHRoaXMgYSBwcm9vZiBvZiBubyBvcmRpbmFyeSBhYmlsaXR5IGFuZCBsYXJnZW5lc3Mgb2YgcHVycG9zZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHdobyBmaXJzdCBkZWNsYXJlZCB0aGF0IG1vbmV5IGlzIHRoZSBzaW5ld3Mgb2YgYWZmYWlycyB3b3VsZCBzZWVtIHRvIGhhdmUgc3Bva2VuIHdpdGggc3BlY2lhbCByZWZlcmVuY2UgdG8gdGhlIGFmZmFpcnMgb2Ygd2FyLiBBbmQgRGVtYWRlcywgd2hlbiB0aGUgQXRoZW5pYW5zIG9uY2Ugb3JkZXJlZCB0aGF0IHRoZWlyIHRyaXJlbWVzIHNob3VsZCBiZSBsYXVuY2hlZCBhbmQgbWFubmVkLCBidXQgaGFkIG5vIG1vbmV5LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvdWdoIG11c3QgYmUgbW9pc3RlbmVkIGJlZm9yZSBpdCBpcyBrbmVhZGVkLjwvcT4gaXQgaXMgc2FpZCBhbHNvIHRoYXQgQXJjaGlkYW11cyBvZiBvbGQsIHRvd2FyZHMgdGhlIGJlZ2lubmluZyBvZiB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIsIHdoZW4gdGhlIGFsbGllcyBvcmRlcmVkIHRoZWlyIGNvbnRyaWJ1dGlvbnMgZm9yIHRoZSB3YXIgdG8gYmUgZml4ZWQsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2FyIGhhcyBubyBmaXhlZCByYXRpb25zLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDIuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DcmFzc3VzPC90aXRsZT4sIGlpLiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQsIGp1c3QgYXMgYXRobGV0ZXMgd2hvIGhhdmUgdGFrZW4gYSBmdWxsIGNvdXJzZSBvZiB0cmFpbmluZywgaW4gdGltZSBiZWFyIGRvd24gYW5kIG92ZXJwb3dlciB0aG9zZSB3aG8gYXJlIG1lcmVseSBncmFjZWZ1bCBhbmQgc2tpbGZ1bCwgc28gYWxzbyBkaWQgQW50aWdvbnVzLCB3aG8gZW5nYWdlZCBpbiB0aGUgd2FyIHdpdGggbGFyZ2UgcmVzb3VyY2VzLCB3ZWFyIG91dCBhbmQgcHJvc3RyYXRlIENsZW9tZW5lcywgd2hvIGNvdWxkIG9ubHkgbWVhZ2VybHkgYW5kIHdpdGggZGlmZmljdWx0eSBwcm92aWRlIHBheSBmb3IgaGlzIG1lcmNlbmFyaWVzIGFuZCBzdXN0ZW5hbmNlIGZvciBoaXMgY2l0aXplbi1zb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBpbiBhbGwgb3RoZXIgcmVzcGVjdHMsIGNlcnRhaW5seSwgdGltZSB3YXMgb24gdGhlIHNpZGUgb2YgQ2xlb21lbmVzOyBmb3IgYWZmYWlycyBhdCBob21lIGRlbWFuZGVkIHRoZSBwcmVzZW5jZSBvZiBBbnRpZ29udXMuIER1cmluZyBoaXMgYWJzZW5jZSBCYXJiYXJpYW5zIGhhZCBiZWVuIG92ZXJydW5uaW5nIGFuZCBkZXZhc3RhdGluZyBNYWNlZG9uaWEsIGFuZCBhdCB0aGlzIHBhcnRpY3VsYXIgdGltZSBhIGxhcmdlIGFybXkgb2YgSWxseXJpYW5zIGZyb20gdGhlIGludGVyaW9yIGhhZCBidXJzdCBpbiwgYW5kIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIHJhdmFnZXMgdGhlIE1hY2Vkb25pYW5zIHN1bW1vbmVkIEFudGlnb251cyBob21lLiBUaGVpciBsZXR0ZXJzIGNhbWUgd2l0aGluIGEgbGl0dGxlIG9mIHJlYWNoaW5nIGhpbSBiZWZvcmUgdGhlIGRlY2lzaXZlIGJhdHRsZS4gSWYgdGhleSBoYWQgc28gcmVhY2hlZCBoaW0sIGhlIHdvdWxkIGF0IG9uY2UgaGF2ZSBnb25lIGF3YXkgYW5kIGxlZnQgdGhlIEFjaGFlYW5zIHRvIHRoZWlyIG93biBkZXZpY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRm9ydHVuZSwgd2hvIGRlY2lkZXMgdGhlIG1vc3QgaW1wb3J0YW50IGFmZmFpcnMgYnkgYSBuYXJyb3cgbWFyZ2luLCBmYXZvdXJlZCBoaW0gd2l0aCBzbyBzbGlnaHQgYSBwcmVwb25kZXJhbmNlIGluIHRoZSBzY2FsZSBvZiBvcHBvcnR1bml0eSBhbmQgcG93ZXIsIHRoYXQgbm8gc29vbmVyIGhhZCB0aGUgYmF0dGxlIGF0IFNlbGxhc2lhIGJlZW4gZm91Z2h0LCB3aGVyZSBDbGVvbWVuZXMgbG9zdCBoaXMgYXJteSBhbmQgaGlzIGNpdHksIHRoYW4gdGhlIG1lc3NlbmdlcnMgc3VtbW9uaW5nIEFudGlnb251cyBhcnJpdmVkLiBBbmQgdGhpcyBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBtYWRlIHRoZSBtaXNmb3J0dW5lIG9mIENsZW9tZW5lcyB0byBiZSBncmVhdGx5IHBpdGllZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIGhlIGNvdWxkIGhhdmUgaGVsZCBvdXQgb25seSB0d28gZGF5cywgYW5kIGNvbnRpbnVlZCBoaXMgZGVmZW5zaXZlIHRhY3RpY3MsIGhlIHdvdWxkIG5vdCBoYXZlIG5lZWRlZCB0byBmaWdodCBhIGJhdHRsZSwgYnV0IHRoZSBNYWNlZG9uaWFucyB3b3VsZCBoYXZlIGdvbmUgYXdheSBhbmQgaGUgY291bGQgaGF2ZSBtYWRlIGhpcyBvd24gdGVybXMgd2l0aCB0aGUgQWNoYWVhbnMuIEJ1dCBub3csIGFzIEkgc2FpZCBiZWZvcmUsIGhpcyBsYWNrIG9mIHJlc291cmNlcyBmb3JjZWQgaGltIHRvIHN0YWtlIHRoZSB3aG9sZSBpc3N1ZSBvbiBhIGJhdHRsZSB3aGVyZSwgYXMgUG9seWJpdXMgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi42NSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5IaXN0LjwvdGl0bGU+IGlpLiA2NS4gMjwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuNjUiIHZhbGlkPSJ5ZXMiPjc8L2JpYmw+LiBUaGUgYmF0dGxlIG9mIFNlbGxhc2lhIHdhcyBmb3VnaHQgaW4gSnVuZSBvZiAyMjEgQi5DLjwvbm90ZT4gaGUgY291bGQgb3Bwb3NlIG9ubHkgdHdlbnR5IHRob3VzYW5kIG1lbiB0byB0aGlydHkgdGhvdXNhbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHdobyBmaXJzdCBkZWNsYXJlZCB0aGF0IG1vbmV5IGlzIHRoZSBzaW5ld3Mgb2YgYWZmYWlycyB3b3VsZCBzZWVtIHRvIGhhdmUgc3Bva2VuIHdpdGggc3BlY2lhbCByZWZlcmVuY2UgdG8gdGhlIGFmZmFpcnMgb2Ygd2FyLiBBbmQgRGVtYWRlcywgd2hlbiB0aGUgQXRoZW5pYW5zIG9uY2Ugb3JkZXJlZCB0aGF0IHRoZWlyIHRyaXJlbWVzIHNob3VsZCBiZSBsYXVuY2hlZCBhbmQgbWFubmVkLCBidXQgaGFkIG5vIG1vbmV5LCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG91Z2ggbXVzdCBiZSBtb2lzdGVuZWQgYmVmb3JlIGl0IGlzIGtuZWFkZWQuPC9xPiBpdCBpcyBzYWlkIGFsc28gdGhhdCBBcmNoaWRhbXVzIG9mIG9sZCwgdG93YXJkcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBQZWxvcG9ubmVzaWFuIHdhciwgd2hlbiB0aGUgYWxsaWVzIG9yZGVyZWQgdGhlaXIgY29udHJpYnV0aW9ucyBmb3IgdGhlIHdhciB0byBiZSBmaXhlZCwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldhciBoYXMgbm8gZml4ZWQgcmF0aW9ucy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMi43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCBpaS4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAyLjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIGlpLiA3LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCBpaS4gNy48L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQsIGp1c3QgYXMgYXRobGV0ZXMgd2hvIGhhdmUgdGFrZW4gYSBmdWxsIGNvdXJzZSBvZiB0cmFpbmluZywgaW4gdGltZSBiZWFyIGRvd24gYW5kIG92ZXJwb3dlciB0aG9zZSB3aG8gYXJlIG1lcmVseSBncmFjZWZ1bCBhbmQgc2tpbGZ1bCwgc28gYWxzbyBkaWQgQW50aWdvbnVzLCB3aG8gZW5nYWdlZCBpbiB0aGUgd2FyIHdpdGggbGFyZ2UgcmVzb3VyY2VzLCB3ZWFyIG91dCBhbmQgcHJvc3RyYXRlIENsZW9tZW5lcywgd2hvIGNvdWxkIG9ubHkgbWVhZ2VybHkgYW5kIHdpdGggZGlmZmljdWx0eSBwcm92aWRlIHBheSBmb3IgaGlzIG1lcmNlbmFyaWVzIGFuZCBzdXN0ZW5hbmNlIGZvciBoaXMgY2l0aXplbi1zb2xkaWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaW4gYWxsIG90aGVyIHJlc3BlY3RzLCBjZXJ0YWlubHksIHRpbWUgd2FzIG9uIHRoZSBzaWRlIG9mIENsZW9tZW5lczsgZm9yIGFmZmFpcnMgYXQgaG9tZSBkZW1hbmRlZCB0aGUgcHJlc2VuY2Ugb2YgQW50aWdvbnVzLiBEdXJpbmcgaGlzIGFic2VuY2UgQmFyYmFyaWFucyBoYWQgYmVlbiBvdmVycnVubmluZyBhbmQgZGV2YXN0YXRpbmcgTWFjZWRvbmlhLCBhbmQgYXQgdGhpcyBwYXJ0aWN1bGFyIHRpbWUgYSBsYXJnZSBhcm15IG9mIElsbHlyaWFucyBmcm9tIHRoZSBpbnRlcmlvciBoYWQgYnVyc3QgaW4sIGFuZCBpbiBjb25zZXF1ZW5jZSBvZiB0aGVpciByYXZhZ2VzIHRoZSBNYWNlZG9uaWFucyBzdW1tb25lZCBBbnRpZ29udXMgaG9tZS4gVGhlaXIgbGV0dGVycyBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiByZWFjaGluZyBoaW0gYmVmb3JlIHRoZSBkZWNpc2l2ZSBiYXR0bGUuIElmIHRoZXkgaGFkIHNvIHJlYWNoZWQgaGltLCBoZSB3b3VsZCBhdCBvbmNlIGhhdmUgZ29uZSBhd2F5IGFuZCBsZWZ0IHRoZSBBY2hhZWFucyB0byB0aGVpciBvd24gZGV2aWNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBGb3J0dW5lLCB3aG8gZGVjaWRlcyB0aGUgbW9zdCBpbXBvcnRhbnQgYWZmYWlycyBieSBhIG5hcnJvdyBtYXJnaW4sIGZhdm91cmVkIGhpbSB3aXRoIHNvIHNsaWdodCBhIHByZXBvbmRlcmFuY2UgaW4gdGhlIHNjYWxlIG9mIG9wcG9ydHVuaXR5IGFuZCBwb3dlciwgdGhhdCBubyBzb29uZXIgaGFkIHRoZSBiYXR0bGUgYXQgU2VsbGFzaWEgYmVlbiBmb3VnaHQsIHdoZXJlIENsZW9tZW5lcyBsb3N0IGhpcyBhcm15IGFuZCBoaXMgY2l0eSwgdGhhbiB0aGUgbWVzc2VuZ2VycyBzdW1tb25pbmcgQW50aWdvbnVzIGFycml2ZWQuIEFuZCB0aGlzIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIG1hZGUgdGhlIG1pc2ZvcnR1bmUgb2YgQ2xlb21lbmVzIHRvIGJlIGdyZWF0bHkgcGl0aWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBoZSBjb3VsZCBoYXZlIGhlbGQgb3V0IG9ubHkgdHdvIGRheXMsIGFuZCBjb250aW51ZWQgaGlzIGRlZmVuc2l2ZSB0YWN0aWNzLCBoZSB3b3VsZCBub3QgaGF2ZSBuZWVkZWQgdG8gZmlnaHQgYSBiYXR0bGUsIGJ1dCB0aGUgTWFjZWRvbmlhbnMgd291bGQgaGF2ZSBnb25lIGF3YXkgYW5kIGhlIGNvdWxkIGhhdmUgbWFkZSBoaXMgb3duIHRlcm1zIHdpdGggdGhlIEFjaGFlYW5zLiBCdXQgbm93LCBhcyBJIHNhaWQgYmVmb3JlLCBoaXMgbGFjayBvZiByZXNvdXJjZXMgZm9yY2VkIGhpbSB0byBzdGFrZSB0aGUgd2hvbGUgaXNzdWUgb24gYSBiYXR0bGUgd2hlcmUsIGFzIFBvbHliaXVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjY1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdC48L3RpdGxlPiBpaS4gNjUuIDI8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuNjUiIHZhbGlkPSJ5ZXMiPjc8L2JpYmw+LiBUaGUgYmF0dGxlIG9mIFNlbGxhc2lhIHdhcyBmb3VnaHQgaW4gSnVuZSBvZiAyMjEgQi5DLjwvbm90ZT4gaGUgY291bGQgb3Bwb3NlIG9ubHkgdHdlbnR5IHRob3VzYW5kIG1lbiB0byB0aGlydHkgdGhvdXNhbmQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi42NSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhpc3QuPC90aXRsZT4gaWkuIDY1LiAyPC9iaWJsPiBhbmQgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdC48L3RpdGxlPiBpaS4gNjUuIDI8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuNjUiIHZhbGlkPSJ5ZXMiPjc8L2JpYmw+LiBUaGUgYmF0dGxlIG9mIFNlbGxhc2lhIHdhcyBmb3VnaHQgaW4gSnVuZSBvZiAyMjEgQi5DLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNob3dlZCBoaW1zZWxmIGFuIGFkbWlyYWJsZSBnZW5lcmFsIGluIHRoZSBob3VyIG9mIHBlcmlsLCBoaXMgZmVsbG93IGNvdW50cnltZW4gZ2F2ZSBoaW0gc3Bpcml0ZWQgc3VwcG9ydCwgYW5kIGV2ZW4gaGlzIG1lcmNlbmFyaWVzIGZvdWdodCBpbGwgYSBwcmFpc2V3b3J0aHkgbWFubmVyLCBidXQgaGUgd2FzIG92ZXJ3aGVsbWVkIGJ5IHRoZSBzdXBlcmlvciBjaGFyYWN0ZXIgb2YgaGlzIGVuZW1pZXMnIGFybW91ciBhbmQgdGhlIHdlaWdodCBvZiB0aGVpciBoZWF2eS1hcm1lZCBwaGFsYW54LiBQaHlsYXJjaHVzLCBob3dldmVyLCBzYXlzIHRoYXQgdGhlcmUgd2FzIHRyZWFjaGVyeSBhbHNvLCBhbmQgdGhhdCB0aGlzIHdhcyBjaGllZmx5IHdoYXQgcnVpbmVkIENsZW9tZW5lcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFudGlnb251cyBvcmRlcmVkIGhpcyBJbGx5cmlhbnMgYW5kIEFjYXJuYW5pYW5zIHRvIGdvIHJvdW5kIGJ5IGEgc2VjcmV0IHdheSBhbmQgZW52ZWxvcGUgdGhlIG90aGVyIHdpbmcsIHdoaWNoIEV1Y2xlaWRhcywgdGhlIGJyb3RoZXIgb2YgQ2xlb21lbmVzLCBjb21tYW5kZWQsIGFuZCB0aGVuIGxlZCBvdXQgdGhlIHJlc3Qgb2YgaGlzIGZvcmNlcyB0byBiYXR0bGU7IGFuZCB3aGVuIENsZW9tZW5lcywgZnJvbSBoaXMgcG9zdCBvZiBvYnNlcnZhdGlvbiwgY291bGQgbm93aGVyZSBzZWUgdGhlIGFybXMgb2YgdGhlIElsbHlyaWFucyBhbmQgQWNhcm5hbmlhbnMsIGhlIHdhcyBhZnJhaWQgdGhhdCBBbnRpZ29udXMgd2FzIHVzaW5nIHRoZW0gZm9yIHNvbWUgc3VjaCBwdXJwb3NlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0aGVyZWZvcmUgY2FsbGVkIERhbW90ZWxlcywgdGhlIGNvbW1hbmRlciBvZiB0aGUgc2VjcmV0IHNlcnZpY2UgY29udGluZ2VudCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHJ1cmFsIHBvbGljZSB3aXRoIHRoZSBzcGVjaWFsIGR1dHkgb2Ygd2F0Y2hpbmcgdGhlIEhlbG90cywgb3Igc2xhdmUgcG9wdWxhdGlvbi48L25vdGU+IGFuZCBvcmRlcmVkIGhpbSB0byBvYnNlcnZlIGFuZCBmaW5kIG91dCBob3cgbWF0dGVycyBzdG9vZCBpbiB0aGUgcmVhciBhbmQgb24gdGhlIGZsYW5rcyBvZiBoaXMgYXJyYXkuIEJ1dCBEYW1vdGVsZXMgKHdobyBoYWQgcHJldmlvdXNseSBiZWVuIGJyaWJlZCwgYXMgd2UgYXJlIHRvbGQsIGJ5IEFudGlnb251cykgdG9sZCBoaW0gdG8gaGF2ZSBubyBjb25jZXJuIGFib3V0IGZsYW5rcyBhbmQgcmVhciwgZm9yIGFsbCB3YXMgd2VsbCB0aGVyZSwgYnV0IHRvIGdpdmUgaGlzIGF0dGVudGlvbiB0byB0aG9zZSB3aG8gYXNzYWlsZWQgaGltIGluIGZyb250LCBhbmQgcmVwdWxzZSB0aGVtLiBTbyBDbGVvbWVuZXMsIHB1dHRpbmcgZmFpdGggaW4gd2hhdCBoZSB3YXMgdG9sZCwgYWR2YW5jZWQgdXBvbiBBbnRpZ29udXMsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBieSB0aGUgc3dlZXBpbmcgb25zZXQgb2YgaGlzIFNwYXJ0YW5zIGRyb3ZlIGJhY2sgdGhlIHBoYWxhbnggb2YgdGhlIE1hY2Vkb25pYW5zIGZvciBhYm91dCBmaXZlIGZ1cmxvbmdzLCBhbmQgZm9sbG93ZWQgYWZ0ZXIgdGhlbSB2aWN0b3Jpb3VzbHkuIFRoZW4sIGFmdGVyIEV1Y2xlaWRhcyB3aXRoIHRoZSBvdGhlciB3aW5nIGhhZCBiZWVuIGVuY2lyY2xlZCwgaGUgY2FtZSB0byBhIHN0b3AsIGFuZCBzZWVpbmcgdGhlaXIgcGVyaWwsIHNhaWQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGxvc3QgdGhlZSwgbXkgZGVhcmVzdCBicm90aGVyLCBJIGhhdmUgbG9zdCB0aGVlLCB0aG91IG5vYmxlIGhlYXJ0LCB0aG91IGdyZWF0IGV4YW1wbGUgdG8gU3BhcnRhbiBib3lzLCB0aG91IHRoZW1lIGZvciBhIHNvbmcgdG8gU3BhcnRhbiB3aXZlcyE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgRXVjbGVpZGFzIGFuZCBoaXMgZm9yY2VzIGhhZCBpbiB0aGlzIHdheSBiZWVuIGN1dCB0byBwaWVjZXMsIGFuZCB0aGUgZW5lbXksIGFmdGVyIHRoZWlyIHZpY3RvcnkgdGhlcmUsIHdlcmUgY29taW5nIG9uIGFnYWluc3QgdGhlIG90aGVyIHdpbmcsIENsZW9tZW5lcywgc2VlaW5nIHRoYXQgaGlzIHNvbGRpZXJzIHdlcmUgaW4gZGlzb3JkZXIgYW5kIG5vIGxvbmdlciBoYWQgY291cmFnZSB0byBzdGFuZCB0aGVpciBncm91bmQsIHRvb2sgbWVhc3VyZXMgZm9yIGhpcyBvd24gc2FmZXR5LiBNYW55IG9mIGhpcyBtZXJjZW5hcmllcyBmZWxsLCBhcyB3ZSBhcmUgdG9sZCwgYW5kIGFsbCB0aGUgU3BhcnRhbnMsIHNpeCB0aG91c2FuZCBpbiBudW1iZXIsIGV4Y2VwdCB0d28gaHVuZHJlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2hvd2VkIGhpbXNlbGYgYW4gYWRtaXJhYmxlIGdlbmVyYWwgaW4gdGhlIGhvdXIgb2YgcGVyaWwsIGhpcyBmZWxsb3cgY291bnRyeW1lbiBnYXZlIGhpbSBzcGlyaXRlZCBzdXBwb3J0LCBhbmQgZXZlbiBoaXMgbWVyY2VuYXJpZXMgZm91Z2h0IGlsbCBhIHByYWlzZXdvcnRoeSBtYW5uZXIsIGJ1dCBoZSB3YXMgb3ZlcndoZWxtZWQgYnkgdGhlIHN1cGVyaW9yIGNoYXJhY3RlciBvZiBoaXMgZW5lbWllcycgYXJtb3VyIGFuZCB0aGUgd2VpZ2h0IG9mIHRoZWlyIGhlYXZ5LWFybWVkIHBoYWxhbnguIFBoeWxhcmNodXMsIGhvd2V2ZXIsIHNheXMgdGhhdCB0aGVyZSB3YXMgdHJlYWNoZXJ5IGFsc28sIGFuZCB0aGF0IHRoaXMgd2FzIGNoaWVmbHkgd2hhdCBydWluZWQgQ2xlb21lbmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBbnRpZ29udXMgb3JkZXJlZCBoaXMgSWxseXJpYW5zIGFuZCBBY2FybmFuaWFucyB0byBnbyByb3VuZCBieSBhIHNlY3JldCB3YXkgYW5kIGVudmVsb3BlIHRoZSBvdGhlciB3aW5nLCB3aGljaCBFdWNsZWlkYXMsIHRoZSBicm90aGVyIG9mIENsZW9tZW5lcywgY29tbWFuZGVkLCBhbmQgdGhlbiBsZWQgb3V0IHRoZSByZXN0IG9mIGhpcyBmb3JjZXMgdG8gYmF0dGxlOyBhbmQgd2hlbiBDbGVvbWVuZXMsIGZyb20gaGlzIHBvc3Qgb2Ygb2JzZXJ2YXRpb24sIGNvdWxkIG5vd2hlcmUgc2VlIHRoZSBhcm1zIG9mIHRoZSBJbGx5cmlhbnMgYW5kIEFjYXJuYW5pYW5zLCBoZSB3YXMgYWZyYWlkIHRoYXQgQW50aWdvbnVzIHdhcyB1c2luZyB0aGVtIGZvciBzb21lIHN1Y2ggcHVycG9zZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBjYWxsZWQgRGFtb3RlbGVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBzZWNyZXQgc2VydmljZSBjb250aW5nZW50LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBydXJhbCBwb2xpY2Ugd2l0aCB0aGUgc3BlY2lhbCBkdXR5IG9mIHdhdGNoaW5nIHRoZSBIZWxvdHMsIG9yIHNsYXZlIHBvcHVsYXRpb24uPC9ub3RlPiBhbmQgb3JkZXJlZCBoaW0gdG8gb2JzZXJ2ZSBhbmQgZmluZCBvdXQgaG93IG1hdHRlcnMgc3Rvb2QgaW4gdGhlIHJlYXIgYW5kIG9uIHRoZSBmbGFua3Mgb2YgaGlzIGFycmF5LiBCdXQgRGFtb3RlbGVzICh3aG8gaGFkIHByZXZpb3VzbHkgYmVlbiBicmliZWQsIGFzIHdlIGFyZSB0b2xkLCBieSBBbnRpZ29udXMpIHRvbGQgaGltIHRvIGhhdmUgbm8gY29uY2VybiBhYm91dCBmbGFua3MgYW5kIHJlYXIsIGZvciBhbGwgd2FzIHdlbGwgdGhlcmUsIGJ1dCB0byBnaXZlIGhpcyBhdHRlbnRpb24gdG8gdGhvc2Ugd2hvIGFzc2FpbGVkIGhpbSBpbiBmcm9udCwgYW5kIHJlcHVsc2UgdGhlbS4gU28gQ2xlb21lbmVzLCBwdXR0aW5nIGZhaXRoIGluIHdoYXQgaGUgd2FzIHRvbGQsIGFkdmFuY2VkIHVwb24gQW50aWdvbnVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBieSB0aGUgc3dlZXBpbmcgb25zZXQgb2YgaGlzIFNwYXJ0YW5zIGRyb3ZlIGJhY2sgdGhlIHBoYWxhbnggb2YgdGhlIE1hY2Vkb25pYW5zIGZvciBhYm91dCBmaXZlIGZ1cmxvbmdzLCBhbmQgZm9sbG93ZWQgYWZ0ZXIgdGhlbSB2aWN0b3Jpb3VzbHkuIFRoZW4sIGFmdGVyIEV1Y2xlaWRhcyB3aXRoIHRoZSBvdGhlciB3aW5nIGhhZCBiZWVuIGVuY2lyY2xlZCwgaGUgY2FtZSB0byBhIHN0b3AsIGFuZCBzZWVpbmcgdGhlaXIgcGVyaWwsIHNhaWQ7IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdmUgbG9zdCB0aGVlLCBteSBkZWFyZXN0IGJyb3RoZXIsIEkgaGF2ZSBsb3N0IHRoZWUsIHRob3Ugbm9ibGUgaGVhcnQsIHRob3UgZ3JlYXQgZXhhbXBsZSB0byBTcGFydGFuIGJveXMsIHRob3UgdGhlbWUgZm9yIGEgc29uZyB0byBTcGFydGFuIHdpdmVzITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIEV1Y2xlaWRhcyBhbmQgaGlzIGZvcmNlcyBoYWQgaW4gdGhpcyB3YXkgYmVlbiBjdXQgdG8gcGllY2VzLCBhbmQgdGhlIGVuZW15LCBhZnRlciB0aGVpciB2aWN0b3J5IHRoZXJlLCB3ZXJlIGNvbWluZyBvbiBhZ2FpbnN0IHRoZSBvdGhlciB3aW5nLCBDbGVvbWVuZXMsIHNlZWluZyB0aGF0IGhpcyBzb2xkaWVycyB3ZXJlIGluIGRpc29yZGVyIGFuZCBubyBsb25nZXIgaGFkIGNvdXJhZ2UgdG8gc3RhbmQgdGhlaXIgZ3JvdW5kLCB0b29rIG1lYXN1cmVzIGZvciBoaXMgb3duIHNhZmV0eS4gTWFueSBvZiBoaXMgbWVyY2VuYXJpZXMgZmVsbCwgYXMgd2UgYXJlIHRvbGQsIGFuZCBhbGwgdGhlIFNwYXJ0YW5zLCBzaXggdGhvdXNhbmQgaW4gbnVtYmVyLCBleGNlcHQgdHdvIGh1bmRyZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2xlb21lbmVzIGNhbWUgdG8gdGhlIGNpdHksIGhlIGFkdmlzZWQgdGhlIGNpdGl6ZW5zIHdobyBtZXQgaGltIHRvIHJlY2VpdmUgQW50aWdvbnVzOyBhcyBmb3IgaGltc2VsZiwgaGUgc2FpZCBoZSB3b3VsZCBkbyB3aGF0ZXZlciBwcm9taXNlZCB0byBiZSBiZXN0IGZvciBTcGFydGEsIHdoZXRoZXIgaXQgY2FsbGVkIGZvciBoaXMgbGlmZSBvciBkZWF0aC4gVGhlbiwgc2VlaW5nIHRoZSB3b21lbiBydW5uaW5nIHVwIHRvIHRob3NlIHdobyBoYWQgZXNjYXBlZCB3aXRoIGhpbSwgcmVsaWV2aW5nIHRoZW0gb2YgdGhlaXIgYXJtcywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGJyaW5naW5nIGRyaW5rIHRvIHRoZW0sIGhlIHdlbnQgaW50byBoaXMgb3duIGhvdXNlLiBIZXJlIGhpcyBjb25jdWJpbmUsIGEgZnJlZSB3b21hbiBvZiBNZWdhbG9wb2xpcyB3aG9tIGhlIGhhZCB0YWtlbiB0byBoaW1zZWxmIGFmdGVyIHRoZSBkZWF0aCBvZiBoaXMgd2lmZSwgY2FtZSB0byBoaW0sIGFzIHdhcyBoZXIgd29udCB1cG9uIGhpcyByZXR1cm4gZnJvbSB0aGUgZmllbGQsIGFuZCB3aXNoZWQgdG8gbWluaXN0ZXIgdG8gaGltOyBidXQgaGUgd291bGQgbmVpdGhlciBkcmluaywgdGhvdWdoIGhlIHdhcyBmYWludCB3aXRoIHRoaXJzdCwgbm9yIHNpdCBkb3duLCB0aG91Z2ggaGUgd2FzIHdvcm4gb3V0LiBJbnN0ZWFkLCBhbGwgaW4gYXJtb3VyIGFzIGhlIHdhcywgaGUgcHV0IGhpcyBhcm0gYXNsYW50IGFnYWluc3Qgb25lIG9mIHRoZSBwaWxsYXJzIG9mIHRoZSBob3VzZSwgZHJvcHBlZCBoaXMgZmFjZSB1cG9uIGhpcyBmb3JlYXJtLCBhbmQgYWZ0ZXIgcmVzdGluZyBoaW1zZWxmIGluIHRoaXMgd2F5IGZvciBhIHNob3J0IHRpbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBydW5uaW5nIG92ZXIgaW4gaGlzIHRob3VnaHRzIGFsbCBwb3NzaWJsZSBwbGFucywgaGUgc2V0IG91dCB3aXRoIGhpcyBmcmllbmRzIGZvciBHeXRoaXVtLiBUaGVyZSBoZSB3ZW50IG9uIGJvYXJkIG9mIHZlc3NlbHMgcHJvdmlkZWQgZm9yIHRoaXMgdmVyeSBwdXJwb3NlIGFuZCBwdXQgdG8gc2VhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDbGVvbWVuZXMgY2FtZSB0byB0aGUgY2l0eSwgaGUgYWR2aXNlZCB0aGUgY2l0aXplbnMgd2hvIG1ldCBoaW0gdG8gcmVjZWl2ZSBBbnRpZ29udXM7IGFzIGZvciBoaW1zZWxmLCBoZSBzYWlkIGhlIHdvdWxkIGRvIHdoYXRldmVyIHByb21pc2VkIHRvIGJlIGJlc3QgZm9yIFNwYXJ0YSwgd2hldGhlciBpdCBjYWxsZWQgZm9yIGhpcyBsaWZlIG9yIGRlYXRoLiBUaGVuLCBzZWVpbmcgdGhlIHdvbWVuIHJ1bm5pbmcgdXAgdG8gdGhvc2Ugd2hvIGhhZCBlc2NhcGVkIHdpdGggaGltLCByZWxpZXZpbmcgdGhlbSBvZiB0aGVpciBhcm1zLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBicmluZ2luZyBkcmluayB0byB0aGVtLCBoZSB3ZW50IGludG8gaGlzIG93biBob3VzZS4gSGVyZSBoaXMgY29uY3ViaW5lLCBhIGZyZWUgd29tYW4gb2YgTWVnYWxvcG9saXMgd2hvbSBoZSBoYWQgdGFrZW4gdG8gaGltc2VsZiBhZnRlciB0aGUgZGVhdGggb2YgaGlzIHdpZmUsIGNhbWUgdG8gaGltLCBhcyB3YXMgaGVyIHdvbnQgdXBvbiBoaXMgcmV0dXJuIGZyb20gdGhlIGZpZWxkLCBhbmQgd2lzaGVkIHRvIG1pbmlzdGVyIHRvIGhpbTsgYnV0IGhlIHdvdWxkIG5laXRoZXIgZHJpbmssIHRob3VnaCBoZSB3YXMgZmFpbnQgd2l0aCB0aGlyc3QsIG5vciBzaXQgZG93biwgdGhvdWdoIGhlIHdhcyB3b3JuIG91dC4gSW5zdGVhZCwgYWxsIGluIGFybW91ciBhcyBoZSB3YXMsIGhlIHB1dCBoaXMgYXJtIGFzbGFudCBhZ2FpbnN0IG9uZSBvZiB0aGUgcGlsbGFycyBvZiB0aGUgaG91c2UsIGRyb3BwZWQgaGlzIGZhY2UgdXBvbiBoaXMgZm9yZWFybSwgYW5kIGFmdGVyIHJlc3RpbmcgaGltc2VsZiBpbiB0aGlzIHdheSBmb3IgYSBzaG9ydCB0aW1lLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBydW5uaW5nIG92ZXIgaW4gaGlzIHRob3VnaHRzIGFsbCBwb3NzaWJsZSBwbGFucywgaGUgc2V0IG91dCB3aXRoIGhpcyBmcmllbmRzIGZvciBHeXRoaXVtLiBUaGVyZSBoZSB3ZW50IG9uIGJvYXJkIG9mIHZlc3NlbHMgcHJvdmlkZWQgZm9yIHRoaXMgdmVyeSBwdXJwb3NlIGFuZCBwdXQgdG8gc2VhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbnRpZ29udXMgbWFyY2hlZCB1cCBhbmQgdG9vayB0aGUgY2l0eSB3aXRob3V0IHJlc2lzdGFuY2UuIEhlIHRyZWF0ZWQgdGhlIExhY2VkYWVtb25pYW5zIGh1bWFuZWx5LCBhbmQgZGlkIG5vdCBpbnN1bHQgb3IgbW9jayB0aGUgZGlnbml0eSBvZiBTcGFydGEsIGJ1dCByZXN0b3JlZCBoZXIgbGF3cyBhbmQgY29uc3RpdHV0aW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIHRoZXkgd2VyZSBiZWZvcmUgdGhlIHJlZm9ybXMgb2YgQ2xlb21lbmVzLjwvbm90ZT4gc2FjcmlmaWNlZCB0byB0aGUgZ29kcywgYW5kIHdlbnQgYXdheSBvbiB0aGUgdGhpcmQgZGF5LiBGb3IgaGUgbGVhcm5lZCB0aGF0IHRoZXJlIHdhcyBhIGdyZWF0IHdhciBpbiBNYWNlZG9uaWEgYW5kIHRoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSByYXZhZ2luZyB0aGUgY291bnRyeS4gTW9yZW92ZXIsIGhpcyBkaXNlYXNlIHdhcyBhbHJlYWR5IGlsbCBmdWxsIHBvc3Nlc3Npb24gb2YgaGltLCBoYXZpbmcgZGV2ZWxvcGVkIGludG8gYSBxdWljayBjb25zdW1wdGlvbiBhbmQgYW4gYWN1dGUgY2F0YXJyaC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZGlkIG5vdCwgaG93ZXZlciwgZ2l2ZSB1cCwgYnV0IGhhZCBzdHJlbmd0aCBsZWZ0IGZvciBoaXMgY29uZmxpY3RzIGF0IGhvbWUsIHNvIHRoYXQgaGUgd29uIGEgdmVyeSBncmVhdCB2aWN0b3J5LCBzbGV3IGEgcHJvZGlnaW91cyBudW1iZXIgb2YgdGhlIEJhcmJhcmlhbnMsIGFuZCBkaWVkIGdsb3Jpb3VzbHksIGhhdmluZyBicm9rZW4gYSBibG9vZC12ZXNzZWwgKGFzIGl0IGlzIGxpa2VseSwgYW5kIGFzIFBoeWxhcmNodXMgc2F5cyBieSB0aGUgdmVyeSBzaG91dCB0aGF0IGhlIHJhaXNlZCBvbiB0aGUgZmllbGQgb2YgYmF0dGxlLiBBbmQgaW4gdGhlIHNjaG9vbHMgb2YgcGhpbG9zb3BoeSBvbmUgdXNlZCB0byBoZWFyIHRoZSBzdG9yeSB0aGF0IGFmdGVyIGhpcyB2aWN0b3J5IGhlIHNob3V0ZWQgZm9yIGpveSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIGhhcHB5IGRheSE8L3E+IGFuZCB0aGVuIGJyb3VnaHQgdXAgYSBxdWFudGl0eSBvZiBibG9vZCwgZmVsbCBpbnRvIGEgaGlnaCBmZXZlciwgYW5kIHNvIGRpZWQuIFNvIG11Y2ggY29uY2VybmluZyBBbnRpZ29udXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW50aWdvbnVzIG1hcmNoZWQgdXAgYW5kIHRvb2sgdGhlIGNpdHkgd2l0aG91dCByZXNpc3RhbmNlLiBIZSB0cmVhdGVkIHRoZSBMYWNlZGFlbW9uaWFucyBodW1hbmVseSwgYW5kIGRpZCBub3QgaW5zdWx0IG9yIG1vY2sgdGhlIGRpZ25pdHkgb2YgU3BhcnRhLCBidXQgcmVzdG9yZWQgaGVyIGxhd3MgYW5kIGNvbnN0aXR1dGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIHRoZXkgd2VyZSBiZWZvcmUgdGhlIHJlZm9ybXMgb2YgQ2xlb21lbmVzLjwvbm90ZT4gc2FjcmlmaWNlZCB0byB0aGUgZ29kcywgYW5kIHdlbnQgYXdheSBvbiB0aGUgdGhpcmQgZGF5LiBGb3IgaGUgbGVhcm5lZCB0aGF0IHRoZXJlIHdhcyBhIGdyZWF0IHdhciBpbiBNYWNlZG9uaWEgYW5kIHRoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSByYXZhZ2luZyB0aGUgY291bnRyeS4gTW9yZW92ZXIsIGhpcyBkaXNlYXNlIHdhcyBhbHJlYWR5IGlsbCBmdWxsIHBvc3Nlc3Npb24gb2YgaGltLCBoYXZpbmcgZGV2ZWxvcGVkIGludG8gYSBxdWljayBjb25zdW1wdGlvbiBhbmQgYW4gYWN1dGUgY2F0YXJyaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGRpZCBub3QsIGhvd2V2ZXIsIGdpdmUgdXAsIGJ1dCBoYWQgc3RyZW5ndGggbGVmdCBmb3IgaGlzIGNvbmZsaWN0cyBhdCBob21lLCBzbyB0aGF0IGhlIHdvbiBhIHZlcnkgZ3JlYXQgdmljdG9yeSwgc2xldyBhIHByb2RpZ2lvdXMgbnVtYmVyIG9mIHRoZSBCYXJiYXJpYW5zLCBhbmQgZGllZCBnbG9yaW91c2x5LCBoYXZpbmcgYnJva2VuIGEgYmxvb2QtdmVzc2VsIChhcyBpdCBpcyBsaWtlbHksIGFuZCBhcyBQaHlsYXJjaHVzIHNheXMgYnkgdGhlIHZlcnkgc2hvdXQgdGhhdCBoZSByYWlzZWQgb24gdGhlIGZpZWxkIG9mIGJhdHRsZS4gQW5kIGluIHRoZSBzY2hvb2xzIG9mIHBoaWxvc29waHkgb25lIHVzZWQgdG8gaGVhciB0aGUgc3RvcnkgdGhhdCBhZnRlciBoaXMgdmljdG9yeSBoZSBzaG91dGVkIGZvciBqb3ksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIGhhcHB5IGRheSE8L3E+IGFuZCB0aGVuIGJyb3VnaHQgdXAgYSBxdWFudGl0eSBvZiBibG9vZCwgZmVsbCBpbnRvIGEgaGlnaCBmZXZlciwgYW5kIHNvIGRpZWQuIFNvIG11Y2ggY29uY2VybmluZyBBbnRpZ29udXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBDbGVvbWVuZXMsIGhlIHNhaWxlZCBmcm9tIEN5dGhlcmEgdG8gQWVnaWFsaWEsIGFub3RoZXIgaXNsYW5kLCBhbmQgcHV0IGluIHRoZXJlLiBBcyBoZSB3YXMgYWJvdXQgdG8gY3Jvc3MgZnJvbSB0aGVuY2UgdG8gQ3lyZW5lLCBvbmUgb2YgaGlzIGZyaWVuZHMsIFRoZXJ5Y2lvbiBieSBuYW1lLCBhIG1hbiB3aG8gYnJvdWdodCBhIGxhcmdlIHNwaXJpdCB0byB0aGUgY29uZHVjdCBvZiBhZmZhaXJzIGFuZCB3YXMgYWx3YXlzIHNvbWV3aGF0IGxvZnR5IGluIGhpcyBzcGVlY2ggYW5kIGdyYW5kaWxvcXVlbnQsIGNhbWUgdG8gaGltIHByaXZhdGVseSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgbm9ibGVzdCBkZWF0aCwgTyBLaW5nLCBhIGRlYXRoIGluIGJhdHRsZSwgd2UgaGF2ZSBwdXQgYXdheSBmcm9tIHVzOyAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHlldCBhbGwgbWVuIGhlYXJkIHVzIGRlY2xhcmUgdGhhdCBBbnRpZ29udXMgc2hvdWxkIG5vdCBwYXNzIHRoZSBraW5nIG9mIFNwYXJ0YSBleGNlcHQgb3ZlciBoaXMgZGVhZCBib2R5LiBCdXQgYSBkZWF0aCB0aGF0IGlzIHNlY29uZCBpbiB2aXJ0dWUgYW5kIGdsb3J5IGlzIG5vdyBzdGlsbCBpbiBvdXIgcG93ZXIuIFdoaXRoZXIgZG8gd2UgdW5yZWFzb25pbmdseSBzYWlsLCBmbGVlaW5nIGFuIGV2aWwgdGhhdCBpcyBuZWFyIGFuZCBwdXJzdWluZyBvbmUgdGhhdCBpcyBhZmFyIG9mZj8gRm9yIGlmIGl0IGlzIG5vdCBzaGFtZWZ1bCB0aGF0IHRoZSBkZXNjZW5kYW50cyBvZiBIZXJhY2xlcyBzaG91bGQgYmUgaW4gc3ViamVjdGlvbiB0byB0aGUgc3VjY2Vzc29ycyBvZiBQaGlsaXAgYW5kIEFsZXhhbmRlciwgd2Ugc2hhbGwgc3BhcmUgb3Vyc2VsdmVzIGEgbG9uZyB2b3lhZ2UgYnkgc3VycmVuZGVyaW5nIHRvIEFudGlnb251cywgd2hvIGlzIGxpa2VseSB0byBzdXJwYXNzIFB0b2xlbXkgYXMgbXVjaCBhcyBNYWNlZG9uaWFucyBzdXJwYXNzIEVneXB0aWFucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB3ZSBjYW5ub3QgY29uc2VudCB0byBiZSBydWxlZCBieSB0aG9zZSB3aG8gaGF2ZSBjb25xdWVyZWQgdXMgaW4gYXJtcywgd2lseSBzaG91bGQgd2UgbWFrZSBoaW0gb3VyIG1hc3RlciB3aG8gaGFzIG5vdCBkZWZlYXRlZCB1cywgdGh1cyBzaG93aW5nIG91cnNlbHZlcyBpbmZlcmlvciB0byB0d28gaW5zdGVhZCBvZiBvbmUgYnkgcnVubmluZyBhd2F5IGZyb20gQW50aWdvbnVzIGFuZCBqb2luaW5nIHRoZSBmbGF0dGVyZXJzIG9mIFB0b2xlbXk/IE9yLCBzaGFsbCB3ZSBzYXkgdGhhdCBpdCBpcyBvbiB0aHkgbW90aGVyJ3MgYWNjb3VudCB0aGF0IHdlIGNvbWUgdG8gRWd5cHQ/IFN1cmVseSB0aG91IHdpbHQgbWFrZSBhIG5vYmxlIHNwZWN0YWNsZSBmb3IgaGVyLCBhbmQgb25lIHRvIGF3YWtlbiBlbnZ5LCB3aGVuIHNoZSBkaXNwbGF5cyBoZXIgc29uIHRvIHRoZSB3aXZlcyBvZiBQdG9sZW15LCBhIGNhcHRpdmUgaW5zdGVhZCBvZiBhIGtpbmcsIGFuZCBhIHJ1bmF3YXkuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgdXMgcmF0aGVyLCB3aGlsZSB3ZSBhcmUgc3RpbGwgbWFzdGVycyBvZiBvdXIgb3duIHN3b3JkcyBhbmQgY2FuIGdhemUgdXBvbiB0aGUgbGFuZCBvZiBMYWNvbmlhLCBoZXJlIHJpZCBvdXJzZWx2ZXMgb2YgRm9ydHVuZSdzIHlva2UsIGFuZCBtYWtlIG91ciBwZWFjZSB3aXRoIHRob3NlIHdobyBhdCBTZWxsYXNpYSBkaWVkIGluIGRlZmVuY2Ugb2YgU3BhcnRhLCBpbnN0ZWFkIG9mIHNpdHRpbmcgaWRseSBkb3duIGluIEVneXB0IGFuZCBhc2tpbmcgZXZlcnkgbm93IGFuZCB0aGVuIHdob20gQW50aWdvbnVzIGhhcyBsZWZ0IGFzIHNhdHJhcCBvZiBMYWNlZGFlbW9uLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIENsZW9tZW5lcywgaGUgc2FpbGVkIGZyb20gQ3l0aGVyYSB0byBBZWdpYWxpYSwgYW5vdGhlciBpc2xhbmQsIGFuZCBwdXQgaW4gdGhlcmUuIEFzIGhlIHdhcyBhYm91dCB0byBjcm9zcyBmcm9tIHRoZW5jZSB0byBDeXJlbmUsIG9uZSBvZiBoaXMgZnJpZW5kcywgVGhlcnljaW9uIGJ5IG5hbWUsIGEgbWFuIHdobyBicm91Z2h0IGEgbGFyZ2Ugc3Bpcml0IHRvIHRoZSBjb25kdWN0IG9mIGFmZmFpcnMgYW5kIHdhcyBhbHdheXMgc29tZXdoYXQgbG9mdHkgaW4gaGlzIHNwZWVjaCBhbmQgZ3JhbmRpbG9xdWVudCwgY2FtZSB0byBoaW0gcHJpdmF0ZWx5IGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIG5vYmxlc3QgZGVhdGgsIE8gS2luZywgYSBkZWF0aCBpbiBiYXR0bGUsIHdlIGhhdmUgcHV0IGF3YXkgZnJvbSB1czsgCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHlldCBhbGwgbWVuIGhlYXJkIHVzIGRlY2xhcmUgdGhhdCBBbnRpZ29udXMgc2hvdWxkIG5vdCBwYXNzIHRoZSBraW5nIG9mIFNwYXJ0YSBleGNlcHQgb3ZlciBoaXMgZGVhZCBib2R5LiBCdXQgYSBkZWF0aCB0aGF0IGlzIHNlY29uZCBpbiB2aXJ0dWUgYW5kIGdsb3J5IGlzIG5vdyBzdGlsbCBpbiBvdXIgcG93ZXIuIFdoaXRoZXIgZG8gd2UgdW5yZWFzb25pbmdseSBzYWlsLCBmbGVlaW5nIGFuIGV2aWwgdGhhdCBpcyBuZWFyIGFuZCBwdXJzdWluZyBvbmUgdGhhdCBpcyBhZmFyIG9mZj8gRm9yIGlmIGl0IGlzIG5vdCBzaGFtZWZ1bCB0aGF0IHRoZSBkZXNjZW5kYW50cyBvZiBIZXJhY2xlcyBzaG91bGQgYmUgaW4gc3ViamVjdGlvbiB0byB0aGUgc3VjY2Vzc29ycyBvZiBQaGlsaXAgYW5kIEFsZXhhbmRlciwgd2Ugc2hhbGwgc3BhcmUgb3Vyc2VsdmVzIGEgbG9uZyB2b3lhZ2UgYnkgc3VycmVuZGVyaW5nIHRvIEFudGlnb251cywgd2hvIGlzIGxpa2VseSB0byBzdXJwYXNzIFB0b2xlbXkgYXMgbXVjaCBhcyBNYWNlZG9uaWFucyBzdXJwYXNzIEVneXB0aWFucy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB3ZSBjYW5ub3QgY29uc2VudCB0byBiZSBydWxlZCBieSB0aG9zZSB3aG8gaGF2ZSBjb25xdWVyZWQgdXMgaW4gYXJtcywgd2lseSBzaG91bGQgd2UgbWFrZSBoaW0gb3VyIG1hc3RlciB3aG8gaGFzIG5vdCBkZWZlYXRlZCB1cywgdGh1cyBzaG93aW5nIG91cnNlbHZlcyBpbmZlcmlvciB0byB0d28gaW5zdGVhZCBvZiBvbmUgYnkgcnVubmluZyBhd2F5IGZyb20gQW50aWdvbnVzIGFuZCBqb2luaW5nIHRoZSBmbGF0dGVyZXJzIG9mIFB0b2xlbXk/IE9yLCBzaGFsbCB3ZSBzYXkgdGhhdCBpdCBpcyBvbiB0aHkgbW90aGVyJ3MgYWNjb3VudCB0aGF0IHdlIGNvbWUgdG8gRWd5cHQ/IFN1cmVseSB0aG91IHdpbHQgbWFrZSBhIG5vYmxlIHNwZWN0YWNsZSBmb3IgaGVyLCBhbmQgb25lIHRvIGF3YWtlbiBlbnZ5LCB3aGVuIHNoZSBkaXNwbGF5cyBoZXIgc29uIHRvIHRoZSB3aXZlcyBvZiBQdG9sZW15LCBhIGNhcHRpdmUgaW5zdGVhZCBvZiBhIGtpbmcsIGFuZCBhIHJ1bmF3YXkuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgdXMgcmF0aGVyLCB3aGlsZSB3ZSBhcmUgc3RpbGwgbWFzdGVycyBvZiBvdXIgb3duIHN3b3JkcyBhbmQgY2FuIGdhemUgdXBvbiB0aGUgbGFuZCBvZiBMYWNvbmlhLCBoZXJlIHJpZCBvdXJzZWx2ZXMgb2YgRm9ydHVuZSdzIHlva2UsIGFuZCBtYWtlIG91ciBwZWFjZSB3aXRoIHRob3NlIHdobyBhdCBTZWxsYXNpYSBkaWVkIGluIGRlZmVuY2Ugb2YgU3BhcnRhLCBpbnN0ZWFkIG9mIHNpdHRpbmcgaWRseSBkb3duIGluIEVneXB0IGFuZCBhc2tpbmcgZXZlcnkgbm93IGFuZCB0aGVuIHdob20gQW50aWdvbnVzIGhhcyBsZWZ0IGFzIHNhdHJhcCBvZiBMYWNlZGFlbW9uLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB5ZXQgYWxsIG1lbiBoZWFyZCB1cyBkZWNsYXJlIHRoYXQgQW50aWdvbnVzIHNob3VsZCBub3QgcGFzcyB0aGUga2luZyBvZiBTcGFydGEgZXhjZXB0IG92ZXIgaGlzIGRlYWQgYm9keS4gQnV0IGEgZGVhdGggdGhhdCBpcyBzZWNvbmQgaW4gdmlydHVlIGFuZCBnbG9yeSBpcyBub3cgc3RpbGwgaW4gb3VyIHBvd2VyLiBXaGl0aGVyIGRvIHdlIHVucmVhc29uaW5nbHkgc2FpbCwgZmxlZWluZyBhbiBldmlsIHRoYXQgaXMgbmVhciBhbmQgcHVyc3Vpbmcgb25lIHRoYXQgaXMgYWZhciBvZmY/IEZvciBpZiBpdCBpcyBub3Qgc2hhbWVmdWwgdGhhdCB0aGUgZGVzY2VuZGFudHMgb2YgSGVyYWNsZXMgc2hvdWxkIGJlIGluIHN1YmplY3Rpb24gdG8gdGhlIHN1Y2Nlc3NvcnMgb2YgUGhpbGlwIGFuZCBBbGV4YW5kZXIsIHdlIHNoYWxsIHNwYXJlIG91cnNlbHZlcyBhIGxvbmcgdm95YWdlIGJ5IHN1cnJlbmRlcmluZyB0byBBbnRpZ29udXMsIHdobyBpcyBsaWtlbHkgdG8gc3VycGFzcyBQdG9sZW15IGFzIG11Y2ggYXMgTWFjZWRvbmlhbnMgc3VycGFzcyBFZ3lwdGlhbnMuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB3ZSBjYW5ub3QgY29uc2VudCB0byBiZSBydWxlZCBieSB0aG9zZSB3aG8gaGF2ZSBjb25xdWVyZWQgdXMgaW4gYXJtcywgd2lseSBzaG91bGQgd2UgbWFrZSBoaW0gb3VyIG1hc3RlciB3aG8gaGFzIG5vdCBkZWZlYXRlZCB1cywgdGh1cyBzaG93aW5nIG91cnNlbHZlcyBpbmZlcmlvciB0byB0d28gaW5zdGVhZCBvZiBvbmUgYnkgcnVubmluZyBhd2F5IGZyb20gQW50aWdvbnVzIGFuZCBqb2luaW5nIHRoZSBmbGF0dGVyZXJzIG9mIFB0b2xlbXk/IE9yLCBzaGFsbCB3ZSBzYXkgdGhhdCBpdCBpcyBvbiB0aHkgbW90aGVyJ3MgYWNjb3VudCB0aGF0IHdlIGNvbWUgdG8gRWd5cHQ/IFN1cmVseSB0aG91IHdpbHQgbWFrZSBhIG5vYmxlIHNwZWN0YWNsZSBmb3IgaGVyLCBhbmQgb25lIHRvIGF3YWtlbiBlbnZ5LCB3aGVuIHNoZSBkaXNwbGF5cyBoZXIgc29uIHRvIHRoZSB3aXZlcyBvZiBQdG9sZW15LCBhIGNhcHRpdmUgaW5zdGVhZCBvZiBhIGtpbmcsIGFuZCBhIHJ1bmF3YXkuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkxldCB1cyByYXRoZXIsIHdoaWxlIHdlIGFyZSBzdGlsbCBtYXN0ZXJzIG9mIG91ciBvd24gc3dvcmRzIGFuZCBjYW4gZ2F6ZSB1cG9uIHRoZSBsYW5kIG9mIExhY29uaWEsIGhlcmUgcmlkIG91cnNlbHZlcyBvZiBGb3J0dW5lJ3MgeW9rZSwgYW5kIG1ha2Ugb3VyIHBlYWNlIHdpdGggdGhvc2Ugd2hvIGF0IFNlbGxhc2lhIGRpZWQgaW4gZGVmZW5jZSBvZiBTcGFydGEsIGluc3RlYWQgb2Ygc2l0dGluZyBpZGx5IGRvd24gaW4gRWd5cHQgYW5kIGFza2luZyBldmVyeSBub3cgYW5kIHRoZW4gd2hvbSBBbnRpZ29udXMgaGFzIGxlZnQgYXMgc2F0cmFwIG9mIExhY2VkYWVtb24uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWNoIHdlcmUgdGhlIHdvcmRzIG9mIFRoZXJ5Y2lvbiwgYW5kIHRvIHRoZW0gQ2xlb21lbmVzIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyB0aGUgZWFzaWVzdCBwb3NzaWJsZSBzdGVwIHRob3UgdXJnZXN0LCB3cmV0Y2hlZCBtYW4sIGFuZCBvbmUgdGhhdCBhbnkgbWFuIG1heSB0YWtlLCB0aGlzIGR5aW5nOyBhbmQgZG9zdCB0aG91IHRoaW5rIHRoeXNlbGYgYnJhdmUgd2hlbiB0aG91IGFydCBtYWtpbmcgYSBmbGlnaHQgbW9yZSBzaGFtZWZ1bCB0aGFuIHRoZSBvbmUgcHJlY2VkaW5nIGl0PyAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CZXR0ZXIgbWVuIHRoYW4gd2UgaGF2ZSBnaXZlbiBpbiB0byB0aGVpciBlbmVtaWVzIGJlZm9yZSB0aGlzLCBoYXZpbmcgYmVlbiBiZXRyYXllZCBieSBGb3J0dW5lIG9yIG92ZXJ3aGVsbWVkIGJ5IG51bWJlcnMuIEJ1dCBoZSB3aG8gaW4gdGhlIGZhY2Ugb2YgdG9pbHMgYW5kIGhhcmRzaGlwcywgb3Igb2YgdGhlIGNlbnNvcmlvdXMganVkZ21lbnRzIG9mIG1lbiwgZ2l2ZXMgdXAgdGhlIGZpZ2h0LCBpcyB2YW5xdWlzaGVkIGJ5IGhpcyBvd24gd2Vha25lc3MuIEZvciBhIHNlbGYtaW5mbGljdGVkIGRlYXRoIG91Z2h0IHRvIGJlLCBub3QgZmxpZ2h0IGZyb20gYWN0aW9uLCBidXQgYW4gYWN0aW9uIGluIGl0c2VsZi4gRm9yIGl0IGlzIHNoYW1lZnVsIHRvIGRpZSwgYXMgd2VsbCBhcyB0byBsaXZlLCBmb3Igb25lJ3Mgc2VsZiBhbG9uZS4gQW5kIHlldCBpdCBpcyB0byB0aGlzIHRoYXQgdGhvdSBub3cgaW52aXRlc3QgbWUgaW4gdGhpbmUgZWFnZXJuZXNzIHRvIGJlIHJpZCBvZiBwcmVzZW50IHRyb3VibGVzLCB0aG91Z2ggYmV5b25kIHRoYXQgdGhvdSB3aWx0IGVmZmVjdCBub3RoaW5nIHRoYXQgaXMgaG9ub3VyYWJsZSBvciB1c2VmdWwuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JLCBob3dldmVyLCB0aGluayBpdCByaWdodCB0aGF0IG5laXRoZXIgdGhvdSBub3IgSSBzaG91bGQgYWJhbmRvbiBvdXIgaG9wZXMgZm9yIG91ciBjb3VudHJ5OyB3aGVuIHRoZXNlIGFiYW5kb24gdXMsIGRlYXRoIHdpbGwgYmUgdmVyeSBlYXN5IGlmIHdlIHdpc2ggaXQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgdGhlIGVhc2llc3QgcG9zc2libGUgc3RlcCB0aG91IHVyZ2VzdCwgd3JldGNoZWQgbWFuLCBhbmQgb25lIHRoYXQgYW55IG1hbiBtYXkgdGFrZSwgdGhpcyBkeWluZzsgYW5kIGRvc3QgdGhvdSB0aGluayB0aHlzZWxmIGJyYXZlIHdoZW4gdGhvdSBhcnQgbWFraW5nIGEgZmxpZ2h0IG1vcmUgc2hhbWVmdWwgdGhhbiB0aGUgb25lIHByZWNlZGluZyBpdD8gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QmV0dGVyIG1lbiB0aGFuIHdlIGhhdmUgZ2l2ZW4gaW4gdG8gdGhlaXIgZW5lbWllcyBiZWZvcmUgdGhpcywgaGF2aW5nIGJlZW4gYmV0cmF5ZWQgYnkgRm9ydHVuZSBvciBvdmVyd2hlbG1lZCBieSBudW1iZXJzLiBCdXQgaGUgd2hvIGluIHRoZSBmYWNlIG9mIHRvaWxzIGFuZCBoYXJkc2hpcHMsIG9yIG9mIHRoZSBjZW5zb3Jpb3VzIGp1ZGdtZW50cyBvZiBtZW4sIGdpdmVzIHVwIHRoZSBmaWdodCwgaXMgdmFucXVpc2hlZCBieSBoaXMgb3duIHdlYWtuZXNzLiBGb3IgYSBzZWxmLWluZmxpY3RlZCBkZWF0aCBvdWdodCB0byBiZSwgbm90IGZsaWdodCBmcm9tIGFjdGlvbiwgYnV0IGFuIGFjdGlvbiBpbiBpdHNlbGYuIEZvciBpdCBpcyBzaGFtZWZ1bCB0byBkaWUsIGFzIHdlbGwgYXMgdG8gbGl2ZSwgZm9yIG9uZSdzIHNlbGYgYWxvbmUuIEFuZCB5ZXQgaXQgaXMgdG8gdGhpcyB0aGF0IHRob3Ugbm93IGludml0ZXN0IG1lIGluIHRoaW5lIGVhZ2VybmVzcyB0byBiZSByaWQgb2YgcHJlc2VudCB0cm91YmxlcywgdGhvdWdoIGJleW9uZCB0aGF0IHRob3Ugd2lsdCBlZmZlY3Qgbm90aGluZyB0aGF0IGlzIGhvbm91cmFibGUgb3IgdXNlZnVsLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SSwgaG93ZXZlciwgdGhpbmsgaXQgcmlnaHQgdGhhdCBuZWl0aGVyIHRob3Ugbm9yIEkgc2hvdWxkIGFiYW5kb24gb3VyIGhvcGVzIGZvciBvdXIgY291bnRyeTsgd2hlbiB0aGVzZSBhYmFuZG9uIHVzLCBkZWF0aCB3aWxsIGJlIHZlcnkgZWFzeSBpZiB3ZSB3aXNoIGl0LjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJldHRlciBtZW4gdGhhbiB3ZSBoYXZlIGdpdmVuIGluIHRvIHRoZWlyIGVuZW1pZXMgYmVmb3JlIHRoaXMsIGhhdmluZyBiZWVuIGJldHJheWVkIGJ5IEZvcnR1bmUgb3Igb3ZlcndoZWxtZWQgYnkgbnVtYmVycy4gQnV0IGhlIHdobyBpbiB0aGUgZmFjZSBvZiB0b2lscyBhbmQgaGFyZHNoaXBzLCBvciBvZiB0aGUgY2Vuc29yaW91cyBqdWRnbWVudHMgb2YgbWVuLCBnaXZlcyB1cCB0aGUgZmlnaHQsIGlzIHZhbnF1aXNoZWQgYnkgaGlzIG93biB3ZWFrbmVzcy4gRm9yIGEgc2VsZi1pbmZsaWN0ZWQgZGVhdGggb3VnaHQgdG8gYmUsIG5vdCBmbGlnaHQgZnJvbSBhY3Rpb24sIGJ1dCBhbiBhY3Rpb24gaW4gaXRzZWxmLiBGb3IgaXQgaXMgc2hhbWVmdWwgdG8gZGllLCBhcyB3ZWxsIGFzIHRvIGxpdmUsIGZvciBvbmUncyBzZWxmIGFsb25lLiBBbmQgeWV0IGl0IGlzIHRvIHRoaXMgdGhhdCB0aG91IG5vdyBpbnZpdGVzdCBtZSBpbiB0aGluZSBlYWdlcm5lc3MgdG8gYmUgcmlkIG9mIHByZXNlbnQgdHJvdWJsZXMsIHRob3VnaCBiZXlvbmQgdGhhdCB0aG91IHdpbHQgZWZmZWN0IG5vdGhpbmcgdGhhdCBpcyBob25vdXJhYmxlIG9yIHVzZWZ1bC4gCgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkksIGhvd2V2ZXIsIHRoaW5rIGl0IHJpZ2h0IHRoYXQgbmVpdGhlciB0aG91IG5vciBJIHNob3VsZCBhYmFuZG9uIG91ciBob3BlcyBmb3Igb3VyIGNvdW50cnk7IHdoZW4gdGhlc2UgYWJhbmRvbiB1cywgZGVhdGggd2lsbCBiZSB2ZXJ5IGVhc3kgaWYgd2Ugd2lzaCBpdC48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIHRoaXMgVGhlcnljaW9uIG1hZGUgbm8gcmVwbHksIGJ1dCBhcyBzb29uIGFzIGhlIGdvdCBhbiBvcHBvcnR1bml0eSB0byBsZWF2ZSBDbGVvbWVuZXMsIGhlIHR1cm5lZCBhc2lkZSBhbG9uZyB0aGUgc2VhLWJlYWNoIGFuZCBzbGV3IGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENsZW9tZW5lcywgcHV0dGluZyB0byBzZWEgZnJvbSBBZWdpYWxhLCBsYW5kZWQgaW4gTGlieWEsIGFuZCB0cmF2ZWxsZWQgdGhyb3VnaCB0aGUgS2luZydzIGNvdW50cnkgdG8gQWxleGFuZHJpYS4gQWZ0ZXIgY29taW5nIGludG8gdGhlIHByZXNlbmNlIG9mIFB0b2xlbXksIGF0IGZpcnN0IGhlIG1ldCB3aXRoIG9ubHkgb3JkaW5hcnkgYW5kIG1vZGVyYXRlIGtpbmRuZXNzIGZyb20gaGltOyBidXQgd2hlbiBoZSBoYWQgZ2l2ZW4gcHJvb2Ygb2YgaGlzIHNlbnRpbWVudHMgYW5kIHNob3duIGhpbXNlbGYgdG8gYmUgYSBtYW4gb2YgZ29vZCBzZW5zZSwgYW5kIHdoZW4sIGluIGhpcyBkYWlseSBpbnRlcmNvdXJzZSwgaGlzIExhY29uaWFuIHNpbXBsaWNpdHkgcmV0YWluZWQgdGhlIGNoYXJtIHdoaWNoIGEgZnJlZSBzcGlyaXQgaW1wYXJ0cywgd2hpbGUgaGUgaW4gbm8gd2lzZSBicm91Z2h0IHNoYW1lIHVwb24gaGlzIG5vYmxlIGJpcnRoIG9yIHN1ZmZlcmVkIHRoZSBibG93cyBvZiBGb3J0dW5lIHRvIGJvdyBoaW0gZG93biwgYnV0IHNob3dlZCBoaW1zZWxmIG1vcmUgd2lubmluZyB0aGFuIHRob3NlIHdob3NlIGNvbnZlcnNhdGlvbiBzb3VnaHQgb25seSB0byBwbGVhc2UgYW5kIGZsYXR0ZXIsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gUHRvbGVteSB3YXMgZmlsbGVkIHdpdGggZ3JlYXQgcmVzcGVjdCBmb3IgaGltLCBhbmQgZGVlcGx5IHJlcGVudGVkIHRoYXQgaGUgaGFkIG5lZ2xlY3RlZCBzdWNoIGEgbWFuIGFuZCBhYmFuZG9uZWQgaGltIHRvIEFudGlnb251cywgd2hvIGhhZCB0aGVyZWJ5IHdvbiBncmVhdCBnbG9yeSBhbmQgcG93ZXIuIFB0b2xlbXkgdGhlcmVmb3JlIHNvdWdodCB0byByZWdhaW4gQ2xlb21lbmVzIGJ5IGhvbm91cnMgYW5kIGtpbmRuZXNzZXMsIGFuZCBrZXB0IGVuY291cmFnaW5nIGhpbSB3aXRoIGFzc3VyYW5jZXMgdGhhdCBoZSB3b3VsZCBzZW5kIGhpbSBiYWNrIHRvIEdyZWVjZSB3aXRoIHNoaXBzIGFuZCB0cmVhc3VyZSBhbmQgcmVzdG9yZSBoaW0gdG8gaGlzIGtpbmdkb20uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gZ2F2ZSBoaW0gYW4gYW5udWFsIHBlbnNpb24gb2YgdHdlbnR5LWZvdXIgdGFsZW50cy4gV2l0aCB0aGlzIG1vbmV5IENsZW9tZW5lcyBtYWludGFpbmVkIGhpbXNlbGYgYW5kIGhpcyBmcmllbmRzIGluIGEgc2ltcGxlIGFuZCBtb2Rlc3QgbWFubmVyLCBhbmQgc3BlbnQgdGhlIGdyZWF0ZXIgcGFydCBpbiBnb29kIG9mZmljZXMgYW5kIGNvbnRyaWJ1dGlvbnMgdG8gdGhlIHJlZnVnZWVzIGZyb20gR3JlZWNlIHdobyB3ZXJlIGluIEVneXB0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENsZW9tZW5lcywgcHV0dGluZyB0byBzZWEgZnJvbSBBZWdpYWxhLCBsYW5kZWQgaW4gTGlieWEsIGFuZCB0cmF2ZWxsZWQgdGhyb3VnaCB0aGUgS2luZydzIGNvdW50cnkgdG8gQWxleGFuZHJpYS4gQWZ0ZXIgY29taW5nIGludG8gdGhlIHByZXNlbmNlIG9mIFB0b2xlbXksIGF0IGZpcnN0IGhlIG1ldCB3aXRoIG9ubHkgb3JkaW5hcnkgYW5kIG1vZGVyYXRlIGtpbmRuZXNzIGZyb20gaGltOyBidXQgd2hlbiBoZSBoYWQgZ2l2ZW4gcHJvb2Ygb2YgaGlzIHNlbnRpbWVudHMgYW5kIHNob3duIGhpbXNlbGYgdG8gYmUgYSBtYW4gb2YgZ29vZCBzZW5zZSwgYW5kIHdoZW4sIGluIGhpcyBkYWlseSBpbnRlcmNvdXJzZSwgaGlzIExhY29uaWFuIHNpbXBsaWNpdHkgcmV0YWluZWQgdGhlIGNoYXJtIHdoaWNoIGEgZnJlZSBzcGlyaXQgaW1wYXJ0cywgd2hpbGUgaGUgaW4gbm8gd2lzZSBicm91Z2h0IHNoYW1lIHVwb24gaGlzIG5vYmxlIGJpcnRoIG9yIHN1ZmZlcmVkIHRoZSBibG93cyBvZiBGb3J0dW5lIHRvIGJvdyBoaW0gZG93biwgYnV0IHNob3dlZCBoaW1zZWxmIG1vcmUgd2lubmluZyB0aGFuIHRob3NlIHdob3NlIGNvbnZlcnNhdGlvbiBzb3VnaHQgb25seSB0byBwbGVhc2UgYW5kIGZsYXR0ZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gUHRvbGVteSB3YXMgZmlsbGVkIHdpdGggZ3JlYXQgcmVzcGVjdCBmb3IgaGltLCBhbmQgZGVlcGx5IHJlcGVudGVkIHRoYXQgaGUgaGFkIG5lZ2xlY3RlZCBzdWNoIGEgbWFuIGFuZCBhYmFuZG9uZWQgaGltIHRvIEFudGlnb251cywgd2hvIGhhZCB0aGVyZWJ5IHdvbiBncmVhdCBnbG9yeSBhbmQgcG93ZXIuIFB0b2xlbXkgdGhlcmVmb3JlIHNvdWdodCB0byByZWdhaW4gQ2xlb21lbmVzIGJ5IGhvbm91cnMgYW5kIGtpbmRuZXNzZXMsIGFuZCBrZXB0IGVuY291cmFnaW5nIGhpbSB3aXRoIGFzc3VyYW5jZXMgdGhhdCBoZSB3b3VsZCBzZW5kIGhpbSBiYWNrIHRvIEdyZWVjZSB3aXRoIHNoaXBzIGFuZCB0cmVhc3VyZSBhbmQgcmVzdG9yZSBoaW0gdG8gaGlzIGtpbmdkb20uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gZ2F2ZSBoaW0gYW4gYW5udWFsIHBlbnNpb24gb2YgdHdlbnR5LWZvdXIgdGFsZW50cy4gV2l0aCB0aGlzIG1vbmV5IENsZW9tZW5lcyBtYWludGFpbmVkIGhpbXNlbGYgYW5kIGhpcyBmcmllbmRzIGluIGEgc2ltcGxlIGFuZCBtb2Rlc3QgbWFubmVyLCBhbmQgc3BlbnQgdGhlIGdyZWF0ZXIgcGFydCBpbiBnb29kIG9mZmljZXMgYW5kIGNvbnRyaWJ1dGlvbnMgdG8gdGhlIHJlZnVnZWVzIGZyb20gR3JlZWNlIHdobyB3ZXJlIGluIEVneXB0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB0aGUgZWxkZXIgUHRvbGVteTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlB0b2xlbXkgSUlJLiwgc3VybmFtZWQgRXVlcmdldGVzLCBkaWVkIGluIDIyMCBCLkMuLCBhbmQgd2FzIGZvbGxvd2VkIGJ5IFB0b2xlbXkgSVYuLCBzdXJuYW1lZCBQaGlsb3BhdG9yLjwvbm90ZT4gZGllZCBiZWZvcmUgc2VuZGluZyBDbGVvbWVuZXMgb2ZmIGFzIGhlIGhhZCBwcm9taXNlZDsgYW5kIHNpbmNlIHRoZSBjb3VydCBhdCBvbmNlIHBsdW5nZWQgaW50byBleGNlc3NpdmUgd2FudG9ubmVzcyBhbmQgZHJ1bmtlbm5lc3MsIGFuZCB3b21lbiB3aWVsZGVkIHRoZSBwb3dlciwgdGhlIGFmZmFpcnMgb2YgQ2xlb21lbmVzIHdlcmUgbmVnbGVjdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGtpbmcgaGltc2VsZiB3YXMgc28gY29ycnVwdGVkIGluIHNwaXJpdCBieSB3aW5lIGFuZCB3b21lbiB0aGF0LCBpbiBoaXMgc29iZXJlc3QgYW5kIG1vc3Qgc2VyaW91cyBtb21lbnRzLCBoZSB3b3VsZCBjZWxlYnJhdGUgcmVsaWdpb3VzIHJpdGVzIGFuZCBhY3QgdGhlIG1vdW50ZWJhbmsgaW4gaGlzIHBhbGFjZSx0aW1icmVsIGluIGhhbmQsIHdoaWxlIHRoZSBtb3N0IGltcG9ydGFudCBhZmZhaXJzIG9mIHRoZSBnb3Zlcm5tZW50IHdlcmUgbWFuYWdlZCBieSBBZ2F0aG9jbGVpYSwgdGhlIG1pc3RyZXNzIG9mIHRoZSBraW5nLCBhbmQgT2VuYW50aGUgaGVyIG1vdGhlciwgd2hvIHdhcyBhIGJhd2QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBzcGl0ZSBvZiBhbGwgdGhpcywgYXQgdGhlIG91dHNldCBDbGVvbWVuZXMgc2VlbWVkIHRvIGJlIG9mIHNvbWUgdXNlLiBGb3IgUHRvbGVteSB3YXMgYWZyYWlkIG9mIGhpcyBicm90aGVyIE1hZ2FzLCBiZWxpZXZpbmcgdGhhdCBNYWdhcyBoYWQgYSBzdHJvbmcgZm9sbG93aW5nIGFtb25nIHRoZSBzb2xkaWVycyBvd2luZyB0byBoaXMgbW90aGVyJ3MgaW5mbHVlbmNlLCBhbmQgaGUgdGhlcmVmb3JlIHRvb2sgQ2xlb21lbmVzIGludG8gaGlzIGZvbGxvd2luZyBhbmQgZ2F2ZSBoaW0gYSBwbGFjZSBpbiBoaXMgcHJpdnkgY291bmNpbCwgYWxsIHRoZSB3aGlsZSBwbG90dGluZyB0byBraWxsIGhpcyBicm90aGVyLiBCdXQgQ2xlb21lbmVzLCBhbHRob3VnaCBhbGwgb3RoZXIgY291bnNlbGxvcnMgdXJnZWQgdGhlIGtpbmcgdG8gdGFrZSB0aGlzIHN0ZXAsIGFsb25lIGFkdmlzZWQgYWdhaW5zdCBpdCwgc2F5aW5nIHRoYXQgaXQgd2VyZSBiZXR0ZXIsIHdlcmUgaXQgcG9zc2libGUsIHRvIGdldCB0aGUga2luZyBtb3JlIGJyb3RoZXJzIHRvIGluY3JlYXNlIHRoZSBzZWN1cml0eSBhbmQgc3RhYmlsaXR5IG9mIGhpcyBhZmZhaXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBTb3NpYml1cywgd2hvIGhhZCB0aGUgbW9zdCBpbmZsdWVuY2UgYW1vbmcgdGhlIGtpbmcncyBtaW5pc3RlcnMsIGRlY2xhcmVkIHRoYXQgdGhleSBjb3VsZCBub3QgYmUgc3VyZSBvZiB0aGUgbWVyY2VuYXJpZXMgYXMgbG9uZyBhcyBNYWdhcyB3YXMgYWxpdmUsIENsZW9tZW5lcyBiYWRlIGhpbSBoYXZlIG5vIGNvbmNlcm4gb24gdGhhdCBwb2ludCBhdCBsZWFzdDsgZm9yIG1vcmUgdGhhbiB0aHJlZSB0aG91c2FuZCBvZiB0aGUgbWVyY2VuYXJpZXMgd2VyZSBQZWxvcG9ubmVzaWFucyBhbmQgYXR0YWNoZWQgdG8gaGltc2VsZiwgYW5kIGlmIGhlIGJ1dCBnYXZlIHRoZW0gYSBub2QgdGhleSB3b3VsZCByZWFkaWx5IGNvbWUgdG8gaGlzIHNpZGUgaW4gYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgdGhpcyBzcGVlY2ggd29uIGZvciBDbGVvbWVuZXMgbm8gbGl0dGxlIGZhaXRoIGluIGhpcyBnb29kIHdpbGwgYW5kIGJlbGllZiBpbiBoaXMgc3RyZW5ndGg7IGJ1dCBhZnRlcndhcmRzLCB3aGVuIFB0b2xlbXkncyB3ZWFrbmVzcyBpbnRlbnNpZmllZCBoaXMgY293YXJkaWNlLCBhbmQsIGFzIGlzIHdvbnQgdG8gaGFwcGVuIHdoZXJlIHRoZXJlIGlzIG5vIHNvdW5kIGp1ZGdtZW50LCBIaXMgYmVzdCBjb3Vyc2Ugc2VlbWVkIHRvIGhpbSB0byBsaWUgaW4gZmVhcmluZyBldmVyeWJvZHkgYW5kIGRpc3RydXN0aW5nIGFsbCBtZW4sIGl0IGxlZCB0aGUgY291cnRpZXJzIHRvIGJlIGFmcmFpZCBvZiBDbGVvbWVuZXMsIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgYSBzdHJvbmcgZm9sbG93aW5nIGFtb25nIHRoZSBtZXJjZW5hcmllczsgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG1hbnkgb2YgdGhlbSB3ZXJlIGhlYXJkIHRvIHNheTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVyZSBnb2VzIHRoZSBsaW9uIHVwIGFuZCBkb3duIGFsb25nIHRoZXNlIHNoZWVwLjwvcT4gQW5kIHN1Y2gsIGluIGZhY3QsIGhlIGNsZWFybHkgd2FzIGFtb25nIHRoZSBjb3VydGllcnMsIGV5ZWluZyB3aXRoIHF1aWV0IGNvbnRlbXB0IGFuZCBjbG9zZWx5IHdhdGNoaW5nIHdoYXQgd2FzIGdvaW5nIG9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIGVsZGVyIFB0b2xlbXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlB0b2xlbXkgSUlJLiwgc3VybmFtZWQgRXVlcmdldGVzLCBkaWVkIGluIDIyMCBCLkMuLCBhbmQgd2FzIGZvbGxvd2VkIGJ5IFB0b2xlbXkgSVYuLCBzdXJuYW1lZCBQaGlsb3BhdG9yLjwvbm90ZT4gZGllZCBiZWZvcmUgc2VuZGluZyBDbGVvbWVuZXMgb2ZmIGFzIGhlIGhhZCBwcm9taXNlZDsgYW5kIHNpbmNlIHRoZSBjb3VydCBhdCBvbmNlIHBsdW5nZWQgaW50byBleGNlc3NpdmUgd2FudG9ubmVzcyBhbmQgZHJ1bmtlbm5lc3MsIGFuZCB3b21lbiB3aWVsZGVkIHRoZSBwb3dlciwgdGhlIGFmZmFpcnMgb2YgQ2xlb21lbmVzIHdlcmUgbmVnbGVjdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUga2luZyBoaW1zZWxmIHdhcyBzbyBjb3JydXB0ZWQgaW4gc3Bpcml0IGJ5IHdpbmUgYW5kIHdvbWVuIHRoYXQsIGluIGhpcyBzb2JlcmVzdCBhbmQgbW9zdCBzZXJpb3VzIG1vbWVudHMsIGhlIHdvdWxkIGNlbGVicmF0ZSByZWxpZ2lvdXMgcml0ZXMgYW5kIGFjdCB0aGUgbW91bnRlYmFuayBpbiBoaXMgcGFsYWNlLHRpbWJyZWwgaW4gaGFuZCwgd2hpbGUgdGhlIG1vc3QgaW1wb3J0YW50IGFmZmFpcnMgb2YgdGhlIGdvdmVybm1lbnQgd2VyZSBtYW5hZ2VkIGJ5IEFnYXRob2NsZWlhLCB0aGUgbWlzdHJlc3Mgb2YgdGhlIGtpbmcsIGFuZCBPZW5hbnRoZSBoZXIgbW90aGVyLCB3aG8gd2FzIGEgYmF3ZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBzcGl0ZSBvZiBhbGwgdGhpcywgYXQgdGhlIG91dHNldCBDbGVvbWVuZXMgc2VlbWVkIHRvIGJlIG9mIHNvbWUgdXNlLiBGb3IgUHRvbGVteSB3YXMgYWZyYWlkIG9mIGhpcyBicm90aGVyIE1hZ2FzLCBiZWxpZXZpbmcgdGhhdCBNYWdhcyBoYWQgYSBzdHJvbmcgZm9sbG93aW5nIGFtb25nIHRoZSBzb2xkaWVycyBvd2luZyB0byBoaXMgbW90aGVyJ3MgaW5mbHVlbmNlLCBhbmQgaGUgdGhlcmVmb3JlIHRvb2sgQ2xlb21lbmVzIGludG8gaGlzIGZvbGxvd2luZyBhbmQgZ2F2ZSBoaW0gYSBwbGFjZSBpbiBoaXMgcHJpdnkgY291bmNpbCwgYWxsIHRoZSB3aGlsZSBwbG90dGluZyB0byBraWxsIGhpcyBicm90aGVyLiBCdXQgQ2xlb21lbmVzLCBhbHRob3VnaCBhbGwgb3RoZXIgY291bnNlbGxvcnMgdXJnZWQgdGhlIGtpbmcgdG8gdGFrZSB0aGlzIHN0ZXAsIGFsb25lIGFkdmlzZWQgYWdhaW5zdCBpdCwgc2F5aW5nIHRoYXQgaXQgd2VyZSBiZXR0ZXIsIHdlcmUgaXQgcG9zc2libGUsIHRvIGdldCB0aGUga2luZyBtb3JlIGJyb3RoZXJzIHRvIGluY3JlYXNlIHRoZSBzZWN1cml0eSBhbmQgc3RhYmlsaXR5IG9mIGhpcyBhZmZhaXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFNvc2liaXVzLCB3aG8gaGFkIHRoZSBtb3N0IGluZmx1ZW5jZSBhbW9uZyB0aGUga2luZydzIG1pbmlzdGVycywgZGVjbGFyZWQgdGhhdCB0aGV5IGNvdWxkIG5vdCBiZSBzdXJlIG9mIHRoZSBtZXJjZW5hcmllcyBhcyBsb25nIGFzIE1hZ2FzIHdhcyBhbGl2ZSwgQ2xlb21lbmVzIGJhZGUgaGltIGhhdmUgbm8gY29uY2VybiBvbiB0aGF0IHBvaW50IGF0IGxlYXN0OyBmb3IgbW9yZSB0aGFuIHRocmVlIHRob3VzYW5kIG9mIHRoZSBtZXJjZW5hcmllcyB3ZXJlIFBlbG9wb25uZXNpYW5zIGFuZCBhdHRhY2hlZCB0byBoaW1zZWxmLCBhbmQgaWYgaGUgYnV0IGdhdmUgdGhlbSBhIG5vZCB0aGV5IHdvdWxkIHJlYWRpbHkgY29tZSB0byBoaXMgc2lkZSBpbiBhcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIHRoaXMgc3BlZWNoIHdvbiBmb3IgQ2xlb21lbmVzIG5vIGxpdHRsZSBmYWl0aCBpbiBoaXMgZ29vZCB3aWxsIGFuZCBiZWxpZWYgaW4gaGlzIHN0cmVuZ3RoOyBidXQgYWZ0ZXJ3YXJkcywgd2hlbiBQdG9sZW15J3Mgd2Vha25lc3MgaW50ZW5zaWZpZWQgaGlzIGNvd2FyZGljZSwgYW5kLCBhcyBpcyB3b250IHRvIGhhcHBlbiB3aGVyZSB0aGVyZSBpcyBubyBzb3VuZCBqdWRnbWVudCwgSGlzIGJlc3QgY291cnNlIHNlZW1lZCB0byBoaW0gdG8gbGllIGluIGZlYXJpbmcgZXZlcnlib2R5IGFuZCBkaXN0cnVzdGluZyBhbGwgbWVuLCBpdCBsZWQgdGhlIGNvdXJ0aWVycyB0byBiZSBhZnJhaWQgb2YgQ2xlb21lbmVzLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIGEgc3Ryb25nIGZvbGxvd2luZyBhbW9uZyB0aGUgbWVyY2VuYXJpZXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IG9mIHRoZW0gd2VyZSBoZWFyZCB0byBzYXk6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVyZSBnb2VzIHRoZSBsaW9uIHVwIGFuZCBkb3duIGFsb25nIHRoZXNlIHNoZWVwLjwvcT4gQW5kIHN1Y2gsIGluIGZhY3QsIGhlIGNsZWFybHkgd2FzIGFtb25nIHRoZSBjb3VydGllcnMsIGV5ZWluZyB3aXRoIHF1aWV0IGNvbnRlbXB0IGFuZCBjbG9zZWx5IHdhdGNoaW5nIHdoYXQgd2FzIGdvaW5nIG9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc2hpcHMsIHRoZXJlZm9yZSwgYW5kIGFuIGFybXksIGhlIGdhdmUgdXAgYXNraW5nOyBidXQgb24gbGVhcm5pbmcgdGhhdCBBbnRpZ29udXMgd2FzIGRlYWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAzMC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4eC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoYXQgdGhlIEFjaGFlYW5zIHdlcmUgaW52b2x2ZWQgaW4gYSB3YXIgd2l0aCB0aGUgQWV0b2xpYW5zLCBhbmQgdGhhdCBhZmZhaXJzIHllYXJuZWQgYW5kIGNhbGxlZCBmb3IgaGltIG5vdyB0aGF0IFBlbG9wb25uZXN1cyB3YXMgcmVudCBhc3VuZGVyIGFuZCBpbiBjb25mdXNpb24sIGhlIGRlbWFuZGVkIHRvIGJlIHNlbnQgYXdheSB3aXRoIGhpcyBmcmllbmRzIG1lcmVseTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGhlIGNvdWxkIHBlcnN1YWRlIG5vIG9uZS4gVGhlIGtpbmcgd291bGQgbm90IGdpdmUgaGltIGEgaGVhcmluZywgYnV0IHdhcyBhYnNvcmJlZCB3aXRoIHdvbWVuIGFuZCBEaW9ueXNpYWMgcm91dHMgYW5kIHJldmVsczsgYW5kIFNvc2liaXVzLCB0aGUgcHJpbWUgbWluaXN0ZXIgYW5kIGNoaWVmIGNvdW5zZWxsb3IsIHRob3VnaHQgdGhhdCBpZiBDbGVvbWVuZXMgcmVtYWluZWQgYWdhaW5zdCBoaXMgd2lsbCBoZSBtaWdodCBiZSBoYXJkIHRvIG1hbmFnZSwgaW5kZWVkLCBhbmQgYW4gb2JqZWN0IG9mIGZlYXIsIGJ1dCB0aGF0IGlmIGhlIHdlcmUgc2VudCBhd2F5IGhlIHdvdWxkIG1ha2Ugc29tZSBib2xkIGF0dGVtcHQsIGJlaW5nIGEgbWFuIG9mIGxhcmdlIHVuZGVydGFraW5ncywgYW5kIG9uZSB3aG8gaGFkIGJlZW4gYW4gZXllLXdpdG5lc3Mgb2YgdGhlIGRpc3RlbXBlcnMgb2YgdGhlIHJlYWxtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm90IGV2ZW4gZ2lmdHMgd291bGQgc29mdGVuIGhpbSwgYnV0IGp1c3QgYXMgdGhlIHNhY3JlZCBidWxsIEFwaXMsIHRob3VnaCBsaXZpbmcgaW4gcGxlbnR5IGFuZCBiZWxpZXZlZCB0byBiZSBoYXZpbmcgYSBsdXh1cmlvdXMgdGltZSwgZmVlbHMgYSBkZXNpcmUgZm9yIHRoZSBsaWZlIHRoYXQgd2FzIGhpcyBieSBuYXR1cmUsIGZvciBjb3Vyc2luZ3Mgd2l0aG91dCByZXN0cmFpbnQsIGFuZCBsZWFwcyBhbmQgYm91bmRzLCBhbmQgaXMgbWFuaWZlc3RseSBkaXNndXN0ZWQgd2l0aCBoaXMgdHJlYXRtZW50IGF0IHRoZSBoYW5kcyBvZiB0aGUgcHJpZXN0cywgc28gQ2xlb21lbmVzIHRvb2sgbm8gcGxlYXN1cmUgaW4gaGlzIGxpZmUgb2YgZWFzZSBhbmQgbHV4dXJ5LAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5idXQga2VwdCBwaW5pbmcgYXdheSBpbiBoaXMgZGVhciBoZWFydCw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlsaWtlIEFjaGlsbGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMS40OTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgaS4gNDkxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkgICAgICAgIDxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QXMgaGUgbGluZ2VyZWQgdGhlcmUsIGFuZCBrZXB0IHllYXJuaW5nIGZvciB3YXItY3J5IGFuZCBiYXR0bGUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNoaXBzLCB0aGVyZWZvcmUsIGFuZCBhbiBhcm15LCBoZSBnYXZlIHVwIGFza2luZzsgYnV0IG9uIGxlYXJuaW5nIHRoYXQgQW50aWdvbnVzIHdhcyBkZWFkPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDMwLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4LiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhhdCB0aGUgQWNoYWVhbnMgd2VyZSBpbnZvbHZlZCBpbiBhIHdhciB3aXRoIHRoZSBBZXRvbGlhbnMsIGFuZCB0aGF0IGFmZmFpcnMgeWVhcm5lZCBhbmQgY2FsbGVkIGZvciBoaW0gbm93IHRoYXQgUGVsb3Bvbm5lc3VzIHdhcyByZW50IGFzdW5kZXIgYW5kIGluIGNvbmZ1c2lvbiwgaGUgZGVtYW5kZWQgdG8gYmUgc2VudCBhd2F5IHdpdGggaGlzIGZyaWVuZHMgbWVyZWx5OyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAzMC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4eC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBoZSBjb3VsZCBwZXJzdWFkZSBubyBvbmUuIFRoZSBraW5nIHdvdWxkIG5vdCBnaXZlIGhpbSBhIGhlYXJpbmcsIGJ1dCB3YXMgYWJzb3JiZWQgd2l0aCB3b21lbiBhbmQgRGlvbnlzaWFjIHJvdXRzIGFuZCByZXZlbHM7IGFuZCBTb3NpYml1cywgdGhlIHByaW1lIG1pbmlzdGVyIGFuZCBjaGllZiBjb3Vuc2VsbG9yLCB0aG91Z2h0IHRoYXQgaWYgQ2xlb21lbmVzIHJlbWFpbmVkIGFnYWluc3QgaGlzIHdpbGwgaGUgbWlnaHQgYmUgaGFyZCB0byBtYW5hZ2UsIGluZGVlZCwgYW5kIGFuIG9iamVjdCBvZiBmZWFyLCBidXQgdGhhdCBpZiBoZSB3ZXJlIHNlbnQgYXdheSBoZSB3b3VsZCBtYWtlIHNvbWUgYm9sZCBhdHRlbXB0LCBiZWluZyBhIG1hbiBvZiBsYXJnZSB1bmRlcnRha2luZ3MsIGFuZCBvbmUgd2hvIGhhZCBiZWVuIGFuIGV5ZS13aXRuZXNzIG9mIHRoZSBkaXN0ZW1wZXJzIG9mIHRoZSByZWFsbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3QgZXZlbiBnaWZ0cyB3b3VsZCBzb2Z0ZW4gaGltLCBidXQganVzdCBhcyB0aGUgc2FjcmVkIGJ1bGwgQXBpcywgdGhvdWdoIGxpdmluZyBpbiBwbGVudHkgYW5kIGJlbGlldmVkIHRvIGJlIGhhdmluZyBhIGx1eHVyaW91cyB0aW1lLCBmZWVscyBhIGRlc2lyZSBmb3IgdGhlIGxpZmUgdGhhdCB3YXMgaGlzIGJ5IG5hdHVyZSwgZm9yIGNvdXJzaW5ncyB3aXRob3V0IHJlc3RyYWludCwgYW5kIGxlYXBzIGFuZCBib3VuZHMsIGFuZCBpcyBtYW5pZmVzdGx5IGRpc2d1c3RlZCB3aXRoIGhpcyB0cmVhdG1lbnQgYXQgdGhlIGhhbmRzIG9mIHRoZSBwcmllc3RzLCBzbyBDbGVvbWVuZXMgdG9vayBubyBwbGVhc3VyZSBpbiBoaXMgbGlmZSBvZiBlYXNlIGFuZCBsdXh1cnksCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5idXQga2VwdCBwaW5pbmcgYXdheSBpbiBoaXMgZGVhciBoZWFydCw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlsaWtlIEFjaGlsbGVzLDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YnV0IGtlcHQgcGluaW5nIGF3YXkgaW4gaGlzIGRlYXIgaGVhcnQsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjQ5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDQ5MSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxLjQ5MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGkuIDQ5MSBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaS4gNDkxIGYuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgaGUgbGluZ2VyZWQgdGhlcmUsIGFuZCBrZXB0IHllYXJuaW5nIGZvciB3YXItY3J5IGFuZCBiYXR0bGUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIGhlIGxpbmdlcmVkIHRoZXJlLCBhbmQga2VwdCB5ZWFybmluZyBmb3Igd2FyLWNyeSBhbmQgYmF0dGxlLjwvbD4KCQkJCSAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgbWF0dGVycyBzdG9vZCB0aHVzIHdpdGggaGltLCBOaWNhZ29yYXMgdGhlIE1lc3NlbmlhbiBjYW1lIHRvIEFsZXhhbmRyaWEsIGEgbWFuIHdobyBoYXRlZCBDbGVvbWVuZXMsIGJ1dCBwcmV0ZW5kZWQgdG8gYmUgYSBmcmllbmQuIEhlIGhhZCBhdCBvbmUgdGltZSBzb2xkIENsZW9tZW5lcyBhIGZpbmUgZXN0YXRlLCBhbmQgb3dpbmcgdG8gdGhlIGNvbnN0YW50IGRlbWFuZHMgb2Ygd2FyIHVwb24gdGhlIGtpbmcsIGFzIGl0IHdvdWxkIHNlZW0sIGhhZCBub3QgcmVjZWl2ZWQgdGhlIG1vbmV5IGZvciBpdC4gQW5kIHNvIG5vdywgd2hlbiBDbGVvbWVuZXMsIHdobyBjaGFuY2VkIHRvIGJlIHRha2luZyBhIHdhbGsgYWxvbmcgdGhlIHF1YXksIHNhdyBOaWNhZ29yYXMgbGFuZGluZyBmcm9tIGhpcyB2ZXNzZWwsIGhlIGdyZWV0ZWQgaGltIGhlYXJ0aWx5IGFuZCBhc2tlZCB3aGF0IGVycmFuZCBicm91Z2h0IGhpbSB0byBFZ3lwdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TmljYWdvcmFzIHJldHVybmVkIGhpcyBncmVldGluZyBpbiBhIGZyaWVuZGx5IG1hbm5lciwgYW5kIHNhaWQgdGhhdCBoZSB3YXMgYnJpbmdpbmcgaG9yc2VzIGZvciB0aGUga2luZywgc29tZSBmaW5lIG9uZXMgZm9yIHVzZSBpbiB3YXIuIEF0IHRoaXMsIENsZW9tZW5lcyBnYXZlIGEgbGF1Z2ggYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBjb3VsZCB3aXNoIHRoYXQgdGhvdSBoYWRzdCByYXRoZXIgYnJvdWdodCBzYW1idWNhLWdpcmxzIGFuZCBjYXRhbWl0ZXM7IGZvciB0aGVzZSBub3cgbW9zdCBpbnRlcmVzdCB0aGUga2luZy48L3E+IEF0IHRoZSB0aW1lIE5pY2Fnb3JhcyBtZXJlbHkgc21pbGVkOyBidXQgYSBmZXcgZGF5cyBsYXRlciBoZSByZW1pbmRlZCBDbGVvbWVuZXMgb2YgdGhlIGVzdGF0ZSwgYW5kIGFza2VkIHRoYXQgbm93IGF0IGFueSByYXRlIGhlIG1pZ2h0IGdldCB0aGUgbW9uZXkgZm9yIGl0LCBzYXlpbmcgdGhhdCBoZSB3b3VsZCBub3QgaGF2ZSB0cm91YmxlZCBoaW0gYWJvdXQgdGhlIG1hdHRlciBpZiBoZSBoYWQgbm90IG1ldCB3aXRoIGEgY29uc2lkZXJhYmxlIGxvc3MgaW4gdGhlIGRpc3Bvc2l0aW9uIG9mIGhpcyBjYXJnbzsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gQ2xlb21lbmVzIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vdGhpbmcgbGVmdCBvZiB0aGUgbW9uZXlzIHRoYXQgaGFkIGJlZW4gZ2l2ZW4gaGltLCBOaWNhZ29yYXMgd2FzIHZleGVkLCBhbmQgcmVwb3J0ZWQgdG8gU29zaWJpdXMgdGhlIHBsZWFzYW50cnkgb2YgQ2xlb21lbmVzLiBTb3NpYml1cyB3YXMgZ2xhZCB0byBnZXQgZXZlbiB0aGlzIG1hdHRlciwgYnV0IGhlIGRlc2lyZWQgdG8gaGF2ZSBzb21lIGxhcmdlciBhY2N1c2F0aW9uIHdpdGggd2hpY2ggdG8gZXhhc3BlcmF0ZSB0aGUga2luZywgYW5kIHRoZXJlZm9yZSBwZXJzdWFkZWQgTmljYWdvcmFzIHRvIHdyaXRlIGFuZCBsZWF2ZSBiZWhpbmQgaGltIGEgbGV0dGVyIGFjY3VzaW5nIENsZW9tZW5lcyBvZiBwbGFubmluZywgaW4gY2FzZSBoZSBnb3QgdHJpcmVtZXMgYW5kIHNvbGRpZXJzIGZyb20gUHRvbGVteSwgdG8gc2VpemUgQ3lyZW5lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBOaWNhZ29yYXMgd3JvdGUgYSBsZXR0ZXIgdG8gdGhpcyBlZmZlY3QgYW5kIHNhaWxlZCBhd2F5OyBhbmQgU29zaWJpdXMsIGFmdGVyIGZvdXIgZGF5cyBoYWQgcGFzc2VkLCBicm91Z2h0IHRoZSBsZXR0ZXIgdG8gUHRvbGVteSwgcHJldGVuZGluZyB0aGF0IGhlIGhhZCBqdXN0IHJlY2VpdmVkIGl0LCBhbmQgc28gZXhhc3BlcmF0ZWQgdGhlIHlvdW5nIG1hbiB0aGF0IGl0IHdhcyBkZWNpZGVkIHRvIHJlbW92ZSBDbGVvbWVuZXMgaW50byBhIGxhcmdlIGhvdXNlLCBhbmQgd2hpbGUgdHJlYXRpbmcgaGltIGluIG90aGVyIHdheXMganVzdCBhcyBiZWZvcmUsIHRvIHByZXZlbnQgaGlzIGVncmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgbWF0dGVycyBzdG9vZCB0aHVzIHdpdGggaGltLCBOaWNhZ29yYXMgdGhlIE1lc3NlbmlhbiBjYW1lIHRvIEFsZXhhbmRyaWEsIGEgbWFuIHdobyBoYXRlZCBDbGVvbWVuZXMsIGJ1dCBwcmV0ZW5kZWQgdG8gYmUgYSBmcmllbmQuIEhlIGhhZCBhdCBvbmUgdGltZSBzb2xkIENsZW9tZW5lcyBhIGZpbmUgZXN0YXRlLCBhbmQgb3dpbmcgdG8gdGhlIGNvbnN0YW50IGRlbWFuZHMgb2Ygd2FyIHVwb24gdGhlIGtpbmcsIGFzIGl0IHdvdWxkIHNlZW0sIGhhZCBub3QgcmVjZWl2ZWQgdGhlIG1vbmV5IGZvciBpdC4gQW5kIHNvIG5vdywgd2hlbiBDbGVvbWVuZXMsIHdobyBjaGFuY2VkIHRvIGJlIHRha2luZyBhIHdhbGsgYWxvbmcgdGhlIHF1YXksIHNhdyBOaWNhZ29yYXMgbGFuZGluZyBmcm9tIGhpcyB2ZXNzZWwsIGhlIGdyZWV0ZWQgaGltIGhlYXJ0aWx5IGFuZCBhc2tlZCB3aGF0IGVycmFuZCBicm91Z2h0IGhpbSB0byBFZ3lwdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5pY2Fnb3JhcyByZXR1cm5lZCBoaXMgZ3JlZXRpbmcgaW4gYSBmcmllbmRseSBtYW5uZXIsIGFuZCBzYWlkIHRoYXQgaGUgd2FzIGJyaW5naW5nIGhvcnNlcyBmb3IgdGhlIGtpbmcsIHNvbWUgZmluZSBvbmVzIGZvciB1c2UgaW4gd2FyLiBBdCB0aGlzLCBDbGVvbWVuZXMgZ2F2ZSBhIGxhdWdoIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBjb3VsZCB3aXNoIHRoYXQgdGhvdSBoYWRzdCByYXRoZXIgYnJvdWdodCBzYW1idWNhLWdpcmxzIGFuZCBjYXRhbWl0ZXM7IGZvciB0aGVzZSBub3cgbW9zdCBpbnRlcmVzdCB0aGUga2luZy48L3E+IEF0IHRoZSB0aW1lIE5pY2Fnb3JhcyBtZXJlbHkgc21pbGVkOyBidXQgYSBmZXcgZGF5cyBsYXRlciBoZSByZW1pbmRlZCBDbGVvbWVuZXMgb2YgdGhlIGVzdGF0ZSwgYW5kIGFza2VkIHRoYXQgbm93IGF0IGFueSByYXRlIGhlIG1pZ2h0IGdldCB0aGUgbW9uZXkgZm9yIGl0LCBzYXlpbmcgdGhhdCBoZSB3b3VsZCBub3QgaGF2ZSB0cm91YmxlZCBoaW0gYWJvdXQgdGhlIG1hdHRlciBpZiBoZSBoYWQgbm90IG1ldCB3aXRoIGEgY29uc2lkZXJhYmxlIGxvc3MgaW4gdGhlIGRpc3Bvc2l0aW9uIG9mIGhpcyBjYXJnbzsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIENsZW9tZW5lcyBkZWNsYXJlZCB0aGF0IGhlIGhhZCBub3RoaW5nIGxlZnQgb2YgdGhlIG1vbmV5cyB0aGF0IGhhZCBiZWVuIGdpdmVuIGhpbSwgTmljYWdvcmFzIHdhcyB2ZXhlZCwgYW5kIHJlcG9ydGVkIHRvIFNvc2liaXVzIHRoZSBwbGVhc2FudHJ5IG9mIENsZW9tZW5lcy4gU29zaWJpdXMgd2FzIGdsYWQgdG8gZ2V0IGV2ZW4gdGhpcyBtYXR0ZXIsIGJ1dCBoZSBkZXNpcmVkIHRvIGhhdmUgc29tZSBsYXJnZXIgYWNjdXNhdGlvbiB3aXRoIHdoaWNoIHRvIGV4YXNwZXJhdGUgdGhlIGtpbmcsIGFuZCB0aGVyZWZvcmUgcGVyc3VhZGVkIE5pY2Fnb3JhcyB0byB3cml0ZSBhbmQgbGVhdmUgYmVoaW5kIGhpbSBhIGxldHRlciBhY2N1c2luZyBDbGVvbWVuZXMgb2YgcGxhbm5pbmcsIGluIGNhc2UgaGUgZ290IHRyaXJlbWVzIGFuZCBzb2xkaWVycyBmcm9tIFB0b2xlbXksIHRvIHNlaXplIEN5cmVuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIE5pY2Fnb3JhcyB3cm90ZSBhIGxldHRlciB0byB0aGlzIGVmZmVjdCBhbmQgc2FpbGVkIGF3YXk7IGFuZCBTb3NpYml1cywgYWZ0ZXIgZm91ciBkYXlzIGhhZCBwYXNzZWQsIGJyb3VnaHQgdGhlIGxldHRlciB0byBQdG9sZW15LCBwcmV0ZW5kaW5nIHRoYXQgaGUgaGFkIGp1c3QgcmVjZWl2ZWQgaXQsIGFuZCBzbyBleGFzcGVyYXRlZCB0aGUgeW91bmcgbWFuIHRoYXQgaXQgd2FzIGRlY2lkZWQgdG8gcmVtb3ZlIENsZW9tZW5lcyBpbnRvIGEgbGFyZ2UgaG91c2UsIGFuZCB3aGlsZSB0cmVhdGluZyBoaW0gaW4gb3RoZXIgd2F5cyBqdXN0IGFzIGJlZm9yZSwgdG8gcHJldmVudCBoaXMgZWdyZXNzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5FdmVuIHRoaXMgdXNhZ2Ugd2FzIGdyaWV2b3VzIHRvIENsZW9tZW5lcywgYnV0IGhpcyBob3BlcyBmb3IgdGhlIGZ1dHVyZSByZWNlaXZlZCBhIGdyZWF0ZXIgc2hvY2sgZnJvbSB0aGUgZm9sbG93aW5nIGluY2lkZW50LiBQdG9sZW15IHRoZSBzb24gb2YgQ2hyeXNlcm11cywgYSBmcmllbmQgb2YgS2luZyBQdG9sZW15LCBoYWQgYWxsIHRoZSB3aGlsZSBiZWVuIG9uIGZyaWVuZGx5IHRlcm1zIHdpdGggQ2xlb21lbmVzLCBhbmQgdGhleSB3ZXJlIHF1aXRlIGludGltYXRlIGFuZCBvdXRzcG9rZW4gd2l0aCBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBQdG9sZW15LCB0aGVuLCBub3cgdGhhdCBDbGVvbWVuZXMgYmVnZ2VkIGEgdmlzaXQgZnJvbSBoaW0sIGNhbWUgYW5kIGNvbnZlcnNlZCBpbiBhIHJlYXNvbmFibGUgd2F5IHdpdGggaGltLCBzZWVraW5nIHRvIHJlbW92ZSBoaXMgc3VzcGljaW9ucyBhbmQgZXhjdXNpbmcgdGhlIGNvbmR1Y3Qgb2YgdGhlIGtpbmc7IGJ1dCB3aGVuIGhlIHdhcyBsZWF2aW5nIHRoZSBob3VzZSBhbmQgZGlkIG5vdCBwZXJjZWl2ZSB0aGF0IENsZW9tZW5lcyB3YXMgZm9sbG93aW5nIG9uIGJlaGluZCBoaW0gYXMgZmFyIGFzIHRoZSBkb29ycywgaGUgYml0dGVybHkgcmVwcm9hY2hlZCB0aGUgZ3VhcmRzIGZvciB0aGUgY2FyZWxlc3MgYW5kIGVhc3kgd2F0Y2ggdGhleSBrZXB0IHVwb24gYSBncmVhdCB3aWxkIGJlYXN0IHRoYXQgd2FzIHNvIGhhcmQgdG8ga2VlcC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2xlb21lbmVzIGhlYXJkIHRoaXMgd2l0aCBoaXMgb3duIGVhcnMsIGFuZCB3aXRob3V0IFB0b2xlbXkncyBiZWluZyBhd2FyZSBvZiBoaXMgcHJlc2VuY2Ugd2VudCBiYWNrIGFuZCB0b2xkIGhpcyBmcmllbmRzLiBBdCBvbmNlLCB0aGVuLCB0aGV5IGFsbCBhYmFuZG9uZWQgdGhlIGhvcGVzIHRoZXkgaGFkIGJlZW4gY2hlcmlzaGluZyBhbmQgd3JhdGhmdWxseSBkZXRlcm1pbmVkIHRvIGF2ZW5nZSB0aGVtc2VsdmVzIG9uIFB0b2xlbXkgZm9yIGhpcyBpbmp1c3RpY2UgYW5kIGluc29sZW5jZSwgYW5kIGRpZSBpbiBhIG1hbm5lciB3b3J0aHkgb2YgU3BhcnRhLCBpbnN0ZWFkIG9mIHdhaXRpbmcgbGlrZSBzYWNyaWZpY2lhbCB2aWN0aW1zIHRvIGJlIGZpcnN0IGZhdHRlbmVkIGFuZCB0aGVuIHNtaXR0ZW4gZG93bi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IHdhcyBhbiBpbnRvbGVyYWJsZSB0aGluZyB0aGF0IENsZW9tZW5lcywgYWZ0ZXIgc2Nvcm5pbmcgdG8gY29tZSB0byB0ZXJtcyB3aXRoIEFudGlnb251cywgYSBtYW4gd2hvIGZvdWdodCB3ZWxsIGFuZCB3cm91Z2h0IG11Y2gsIHNob3VsZCBzaXQgaWRseSBkb3duIGFuZCBhd2FpdCB0aGUgbGVpc3VyZSBvZiBhIGJlZ2dpbmctcHJpZXN0IG9mIGEga2luZywgd2hvLCBhcyBzb29uIGFzIGhlIGNvdWxkIGxheSBhc2lkZSBoaXMgdGltYnJlbCBhbmQgc3RvcCBoaXMgZGFuY2luZywgd291bGQgc2xheSBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiB0aGlzIHVzYWdlIHdhcyBncmlldm91cyB0byBDbGVvbWVuZXMsIGJ1dCBoaXMgaG9wZXMgZm9yIHRoZSBmdXR1cmUgcmVjZWl2ZWQgYSBncmVhdGVyIHNob2NrIGZyb20gdGhlIGZvbGxvd2luZyBpbmNpZGVudC4gUHRvbGVteSB0aGUgc29uIG9mIENocnlzZXJtdXMsIGEgZnJpZW5kIG9mIEtpbmcgUHRvbGVteSwgaGFkIGFsbCB0aGUgd2hpbGUgYmVlbiBvbiBmcmllbmRseSB0ZXJtcyB3aXRoIENsZW9tZW5lcywgYW5kIHRoZXkgd2VyZSBxdWl0ZSBpbnRpbWF0ZSBhbmQgb3V0c3Bva2VuIHdpdGggb25lIGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgUHRvbGVteSwgdGhlbiwgbm93IHRoYXQgQ2xlb21lbmVzIGJlZ2dlZCBhIHZpc2l0IGZyb20gaGltLCBjYW1lIGFuZCBjb252ZXJzZWQgaW4gYSByZWFzb25hYmxlIHdheSB3aXRoIGhpbSwgc2Vla2luZyB0byByZW1vdmUgaGlzIHN1c3BpY2lvbnMgYW5kIGV4Y3VzaW5nIHRoZSBjb25kdWN0IG9mIHRoZSBraW5nOyBidXQgd2hlbiBoZSB3YXMgbGVhdmluZyB0aGUgaG91c2UgYW5kIGRpZCBub3QgcGVyY2VpdmUgdGhhdCBDbGVvbWVuZXMgd2FzIGZvbGxvd2luZyBvbiBiZWhpbmQgaGltIGFzIGZhciBhcyB0aGUgZG9vcnMsIGhlIGJpdHRlcmx5IHJlcHJvYWNoZWQgdGhlIGd1YXJkcyBmb3IgdGhlIGNhcmVsZXNzIGFuZCBlYXN5IHdhdGNoIHRoZXkga2VwdCB1cG9uIGEgZ3JlYXQgd2lsZCBiZWFzdCB0aGF0IHdhcyBzbyBoYXJkIHRvIGtlZXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNsZW9tZW5lcyBoZWFyZCB0aGlzIHdpdGggaGlzIG93biBlYXJzLCBhbmQgd2l0aG91dCBQdG9sZW15J3MgYmVpbmcgYXdhcmUgb2YgaGlzIHByZXNlbmNlIHdlbnQgYmFjayBhbmQgdG9sZCBoaXMgZnJpZW5kcy4gQXQgb25jZSwgdGhlbiwgdGhleSBhbGwgYWJhbmRvbmVkIHRoZSBob3BlcyB0aGV5IGhhZCBiZWVuIGNoZXJpc2hpbmcgYW5kIHdyYXRoZnVsbHkgZGV0ZXJtaW5lZCB0byBhdmVuZ2UgdGhlbXNlbHZlcyBvbiBQdG9sZW15IGZvciBoaXMgaW5qdXN0aWNlIGFuZCBpbnNvbGVuY2UsIGFuZCBkaWUgaW4gYSBtYW5uZXIgd29ydGh5IG9mIFNwYXJ0YSwgaW5zdGVhZCBvZiB3YWl0aW5nIGxpa2Ugc2FjcmlmaWNpYWwgdmljdGltcyB0byBiZSBmaXJzdCBmYXR0ZW5lZCBhbmQgdGhlbiBzbWl0dGVuIGRvd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgYW4gaW50b2xlcmFibGUgdGhpbmcgdGhhdCBDbGVvbWVuZXMsIGFmdGVyIHNjb3JuaW5nIHRvIGNvbWUgdG8gdGVybXMgd2l0aCBBbnRpZ29udXMsIGEgbWFuIHdobyBmb3VnaHQgd2VsbCBhbmQgd3JvdWdodCBtdWNoLCBzaG91bGQgc2l0IGlkbHkgZG93biBhbmQgYXdhaXQgdGhlIGxlaXN1cmUgb2YgYSBiZWdnaW5nLXByaWVzdCBvZiBhIGtpbmcsIHdobywgYXMgc29vbiBhcyBoZSBjb3VsZCBsYXkgYXNpZGUgaGlzIHRpbWJyZWwgYW5kIHN0b3AgaGlzIGRhbmNpbmcsIHdvdWxkIHNsYXkgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGJlaW5nIHRoZWlyIHJlc29sdmUsIGFuZCBQdG9sZW15LCBhcyBjaGFuY2Ugd291bGQgaGF2ZSBpdCwgbWFraW5nIGEgdmlzaXQgdG8gQ2Fub3B1cywgaW4gdGhlIGZpcnN0IHBsYWNlIHdvcmQgd2FzIHNlbnQgYWJvdXQgdGhhdCBDbGVvbWVuZXMgaGFkIGJlZW4gc2V0IGZyZWUgYnkgdGhlIGtpbmc7IGFuZCBuZXh0LCBpbiB2aWV3IG9mIGEgY3VzdG9tIHdoaWNoIHRoZSBraW5nIGhhZCBvZiBzZW5kaW5nIHByZXNlbnRzIGFuZCBhIGJhbnF1ZXQgdG8gdGhvc2Ugd2hvIHdlcmUgZ29pbmcgdG8gYmUgcmVsZWFzZWQgZnJvbSBpbXByaXNvbm1lbnQsIHRoZSBmcmllbmRzIG9mIENsZW9tZW5lcyBpbiB0aGUgY2l0eSBwcmVwYXJlZCBhbmQgc2VudCBpbiB0byBoaW0gYW4gYWJ1bmRhbmNlIG9mIHN1Y2ggdGhpbmdzLCB0aHVzIGNvbXBsZXRlbHkgZGVjZWl2aW5nIHRoZSBndWFyZHMsIHdobyB0aG91Z2h0IHRoZSBraW5nIGhhZCBzZW50IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBDbGVvbWVuZXMgbWFkZSBhIHNhY3JpZmljZSBhbmQgZ2F2ZSB0aGUgZ3VhcmRzIGEgYm91bnRpZnVsIHNoYXJlIG9mIGhpcyBwcm92aXNpb25zLCBhbmQgdGhlbiB0b29rIGhpcyBwbGFjZSBhdCB0YWJsZSB3aXRoIGdhcmxhbmRzIG9uIGhpcyBoZWFkIGFuZCBmZWFzdGVkIHdpdGggaGlzIGZyaWVuZHMuIFdlIGFyZSB0b2xkLCB0b28sIHRoYXQgaGUgc2V0IG91dCB1cG9uIGhpcyBlbnRlcnByaXNlIHNvb25lciB0aGFuIGhlIGhhZCBpbnRlbmRlZCwgYmVjYXVzZSBoZSBsZWFybmVkIHRoYXQgYSBzbGF2ZSB3aG8gd2FzIHByaXZ5IHRvIGl0IGhhZCBwYXNzZWQgdGhlIG5pZ2h0IG91dHNpZGUgaW4gY29tcGFueSB3aXRoIGEgbWlzdHJlc3MuIFNvIGZlYXJpbmcgdGhhdCBoaXMgcGxhbnMgd291bGQgYmUgcmV2ZWFsZWQsIHdoZW4gbm9vbiBjYW1lIGFuZCBoZSBwZXJjZWl2ZWQgdGhhdCBoaXMgZ3VhcmRzIHdlcmUgc2xlZXBpbmcgb2ZmIHRoZWlyIHdpbmUsIGhlIHB1dCBvbiBoaXMgdHVuaWMsIG9wZW5lZCB0aGUgc2VhbSBvdmVyIGhpcyByaWdodCBzaG91bGRlciwgYW5kIHdpdGggZHJhd24gc3dvcmQgc3ByYW5nIGZvcnRoLCBhY2NvbXBhbmllZCBieSBoaXMgZnJpZW5kcywgd2hvIHdlcmUgbGlrZXdpc2UgYXJyYXllZCwgdGhpcnRlZW4gaW4gbnVtYmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IaXBwaXRhcywgd2hvIHdhcyBsYW1lLCBqb2luZWQgaW4gbWFraW5nIHRoZSBmaXJzdCBvbnNldCB3aXRoIGFsbCBoaXMgc291bCwgYnV0IHdoZW4gaGUgc2F3IHRoYXQgaGUgd2FzIGEgaGluZHJhbmNlIHRvIHRoZSBwcm9ncmVzcyBvZiBoaXMgY29tcGFuaW9ucywgaGUgYmFkZSB0aGVtIGtpbGwgaGltLCBhbmQgbm90IHJ1aW4gdGhlIGVudGVycHJpc2UgYnkgd2FpdGluZyBmb3IgYSB1c2VsZXNzIGZlbGxvdy4gQXMgaXQgY2hhbmNlZCwgaG93ZXZlciwgYW4gQWxleGFuZHJpbmUgd2FzIGxlYWRpbmcgYSBob3JzZSBwYXN0IHRoZSBkb29ycywgc28gdGhleSBzZWl6ZWQgdGhlIGFuaW1hbCwgcHV0IHdoaXBwZXRzIG9uIGl0cyBiYWNrLCBhbmQgdGhlbiBydXNoZWQgYXQgZnVsbCBzcGVlZCB0aHJvdWdoIHRoZSBuYXJyb3cgc3RyZWV0cyBvZiB0aGUgY2l0eSwgc3VtbW9uaW5nIHRoZSB0aHJvbmcgdG8gd2luIHRoZWlyIGZyZWVkb20uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGhhZCBlbm91Z2ggY291cmFnZSwgYXMgaXQgd291bGQgc2VlbSwgdG8gYWRtaXJlIGFuZCBwcmFpc2UgdGhlIGRhcmluZyBvZiBDbGVvbWVuZXMsIGJ1dCBub3QgYSBtYW4gd2FzIGJvbGQgZW5vdWdoIHRvIGZvbGxvdyBhbmQgaGVscCBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBiZWluZyB0aGVpciByZXNvbHZlLCBhbmQgUHRvbGVteSwgYXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQsIG1ha2luZyBhIHZpc2l0IHRvIENhbm9wdXMsIGluIHRoZSBmaXJzdCBwbGFjZSB3b3JkIHdhcyBzZW50IGFib3V0IHRoYXQgQ2xlb21lbmVzIGhhZCBiZWVuIHNldCBmcmVlIGJ5IHRoZSBraW5nOyBhbmQgbmV4dCwgaW4gdmlldyBvZiBhIGN1c3RvbSB3aGljaCB0aGUga2luZyBoYWQgb2Ygc2VuZGluZyBwcmVzZW50cyBhbmQgYSBiYW5xdWV0IHRvIHRob3NlIHdobyB3ZXJlIGdvaW5nIHRvIGJlIHJlbGVhc2VkIGZyb20gaW1wcmlzb25tZW50LCB0aGUgZnJpZW5kcyBvZiBDbGVvbWVuZXMgaW4gdGhlIGNpdHkgcHJlcGFyZWQgYW5kIHNlbnQgaW4gdG8gaGltIGFuIGFidW5kYW5jZSBvZiBzdWNoIHRoaW5ncywgdGh1cyBjb21wbGV0ZWx5IGRlY2VpdmluZyB0aGUgZ3VhcmRzLCB3aG8gdGhvdWdodCB0aGUga2luZyBoYWQgc2VudCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBDbGVvbWVuZXMgbWFkZSBhIHNhY3JpZmljZSBhbmQgZ2F2ZSB0aGUgZ3VhcmRzIGEgYm91bnRpZnVsIHNoYXJlIG9mIGhpcyBwcm92aXNpb25zLCBhbmQgdGhlbiB0b29rIGhpcyBwbGFjZSBhdCB0YWJsZSB3aXRoIGdhcmxhbmRzIG9uIGhpcyBoZWFkIGFuZCBmZWFzdGVkIHdpdGggaGlzIGZyaWVuZHMuIFdlIGFyZSB0b2xkLCB0b28sIHRoYXQgaGUgc2V0IG91dCB1cG9uIGhpcyBlbnRlcnByaXNlIHNvb25lciB0aGFuIGhlIGhhZCBpbnRlbmRlZCwgYmVjYXVzZSBoZSBsZWFybmVkIHRoYXQgYSBzbGF2ZSB3aG8gd2FzIHByaXZ5IHRvIGl0IGhhZCBwYXNzZWQgdGhlIG5pZ2h0IG91dHNpZGUgaW4gY29tcGFueSB3aXRoIGEgbWlzdHJlc3MuIFNvIGZlYXJpbmcgdGhhdCBoaXMgcGxhbnMgd291bGQgYmUgcmV2ZWFsZWQsIHdoZW4gbm9vbiBjYW1lIGFuZCBoZSBwZXJjZWl2ZWQgdGhhdCBoaXMgZ3VhcmRzIHdlcmUgc2xlZXBpbmcgb2ZmIHRoZWlyIHdpbmUsIGhlIHB1dCBvbiBoaXMgdHVuaWMsIG9wZW5lZCB0aGUgc2VhbSBvdmVyIGhpcyByaWdodCBzaG91bGRlciwgYW5kIHdpdGggZHJhd24gc3dvcmQgc3ByYW5nIGZvcnRoLCBhY2NvbXBhbmllZCBieSBoaXMgZnJpZW5kcywgd2hvIHdlcmUgbGlrZXdpc2UgYXJyYXllZCwgdGhpcnRlZW4gaW4gbnVtYmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcHBpdGFzLCB3aG8gd2FzIGxhbWUsIGpvaW5lZCBpbiBtYWtpbmcgdGhlIGZpcnN0IG9uc2V0IHdpdGggYWxsIGhpcyBzb3VsLCBidXQgd2hlbiBoZSBzYXcgdGhhdCBoZSB3YXMgYSBoaW5kcmFuY2UgdG8gdGhlIHByb2dyZXNzIG9mIGhpcyBjb21wYW5pb25zLCBoZSBiYWRlIHRoZW0ga2lsbCBoaW0sIGFuZCBub3QgcnVpbiB0aGUgZW50ZXJwcmlzZSBieSB3YWl0aW5nIGZvciBhIHVzZWxlc3MgZmVsbG93LiBBcyBpdCBjaGFuY2VkLCBob3dldmVyLCBhbiBBbGV4YW5kcmluZSB3YXMgbGVhZGluZyBhIGhvcnNlIHBhc3QgdGhlIGRvb3JzLCBzbyB0aGV5IHNlaXplZCB0aGUgYW5pbWFsLCBwdXQgd2hpcHBldHMgb24gaXRzIGJhY2ssIGFuZCB0aGVuIHJ1c2hlZCBhdCBmdWxsIHNwZWVkIHRocm91Z2ggdGhlIG5hcnJvdyBzdHJlZXRzIG9mIHRoZSBjaXR5LCBzdW1tb25pbmcgdGhlIHRocm9uZyB0byB3aW4gdGhlaXIgZnJlZWRvbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGhhZCBlbm91Z2ggY291cmFnZSwgYXMgaXQgd291bGQgc2VlbSwgdG8gYWRtaXJlIGFuZCBwcmFpc2UgdGhlIGRhcmluZyBvZiBDbGVvbWVuZXMsIGJ1dCBub3QgYSBtYW4gd2FzIGJvbGQgZW5vdWdoIHRvIGZvbGxvdyBhbmQgaGVscCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2VsbCwgdGhlbiwgYXMgUHRvbGVteSB0aGUgc29uIG9mIENocnlzZXJtdXMgd2FzIGNvbWluZyBvdXQgb2YgdGhlIHBhbGFjZSwgdGhyZWUgb2YgdGhlbSBzdHJhaWdodHdheSBmZWxsIHVwb24gaGltIGFuZCBzbGV3IGhpbTsgYW5kIGFzIGFub3RoZXIgUHRvbGVteSwgd2hvIGhhZCB0aGUgY2l0eSBpbiBoaXMgY2hhcmdlLCB3YXMgZHJpdmluZyB0b3dhcmRzIHRoZW0gaW4gYSBjaGFyaW90LCB0aGV5IHJ1c2hlZCB0byBtZWV0IGhpbSwgc2NhdHRlcmVkIGhpcyBzZXJ2YW50cyBhbmQgbWVyY2VuYXJpZXMsIGRyYWdnZWQgaGltIGZyb20gaGlzIGNoYXJpb3QsIGFuZCBzbGV3IGhpbS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZXkgcHJvY2VlZGVkIHRvIHRoZSBjaXRhZGVsLCBwdXJwb3NpbmcgdG8gYnJlYWsgb3BlbiB0aGUgcHJpc29uIGFuZCBhdmFpbCB0aGVtc2VsdmVzIG9mIHRoZSBtdWx0aXR1ZGUgb2YgcHJpc29uZXJzLiBCdXQgdGhlIGd1YXJkcyB3ZXJlIHRvbyBxdWljayBmb3IgdGhlbSBhbmQgYmFycmVkIHRoZSB3YXkgc2VjdXJlbHksIHNvIHRoYXQgQ2xlb21lbmVzLCBiYWZmbGVkIGluIHRoaXMgYXR0ZW1wdCBhbHNvLCByb2FtZWQgdXAgYW5kIGRvd24gdGhyb3VnaCB0aGUgY2l0eSwgbm90IGEgbWFuIGpvaW5pbmcgd2l0aCBoaW0gYnV0IGV2ZXJ5Ym9keSBmaWxsZWQgd2l0aCBmZWFyIGFuZCBmbHlpbmcgZnJvbSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBoZSBkZXNpc3RlZCBmcm9tIGhpcyBhdHRlbXB0LCBhbmQgc2F5aW5nIHRvIGhpcyBmcmllbmRzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIG5vIHdvbmRlciwgYWZ0ZXIgYWxsLCB0aGF0IHdvbWVuIHJ1bGUgb3ZlciBtZW4gd2hvIHJ1biBhd2F5IGZyb20gZnJlZWRvbSw8L3E+IGhlIGNhbGxlZCB1cG9uIHRoZW0gYWxsIHRvIGRpZSBpbiBhIG1hbm5lciB3b3J0aHkgb2YgdGhlaXIga2luZyBhbmQgdGhlaXIgcGFzdCBhY2hpZXZlbWVudHMuIFNvIEhpcHBpdGFzIGZpcnN0LCBhdCBoaXMgb3duIHJlcXVlc3QsIHdhcyBzbWl0dGVuIGRvd24gYnkgb25lIG9mIHRoZSB5b3VuZ2VyIG1lbiwgdGhlbiBlYWNoIG9mIHRoZSBvdGhlcnMgY2FsbWx5IGFuZCBjaGVlcmZ1bGx5IHNsZXcgaGltc2VsZiwgZXhjZXB0IFBhbnRldXMsIHRoZSBtYW4gd2hvIGxlZCB0aGUgd2F5IGluIHRoZSBjYXB0dXJlIG9mIE1lZ2Fsb3BvbGlzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDIzLjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIG9uY2UgYmVlbiB0aGUga2luZydzIGZhdm91cml0ZSwgYmVjYXVzZSBpbiBoaXMgeW91dGggaGUgd2FzIG1vc3QgZmFpciwgYW5kIGluIGhpcyB5b3VuZyBtYW5ob29kIG1vc3QgYW1lbmFibGUgdG8gdGhlIFNwYXJ0YW4gZGlzY2lwbGluZTsgYW5kIG5vdyBoaXMgb3JkZXJzIHdlcmUgdG8gd2FpdCB1bnRpbCB0aGUga2luZyBhbmQgdGhlIHJlc3Qgb2YgdGhlIGJhbmQgd2VyZSBkZWFkLCBhbmQgdGhlbiB0byBkaWUgaGltc2VsZi4gQXQgbGFzdCBhbGwgdGhlIHJlc3QgbGF5IHByb3N0cmF0ZSBvbiB0aGUgZ3JvdW5kLCBhbmQgUGFudGV1cywgZ29pbmcgdXAgdG8gZWFjaCBvbmUgaW4gdHVybiBhbmQgcHJpY2tpbmcgaGltIHdpdGggaGlzIHN3b3JkLCBzb3VnaHQgdG8gZGlzY292ZXIgd2hldGhlciBhbnkgc3Bhcmsgb2YgbGlmZSByZW1haW5lZC4gV2hlbiBoZSBwcmlja2VkIENsZW9tZW5lcyBpbiB0aGUgYW5rbGUgYW5kIHNhdyB0aGF0IGhpcyBmYWNlIHR3aXRjaGVkLCBoZSBraXNzZWQgaGltLCBhbmQgdGhlbiBzYXQgZG93biBieSBoaXMgc2lkZTsgYXQgbGFzdCB0aGUgZW5kIGNhbWUsIGFuZCBhZnRlciBlbWJyYWNpbmcgdGhlIGtpbmcncyBkZWFkIGJvZHksIGhlIHNsZXcgaGltc2VsZiB1cG9uIGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSBwcm9jZWVkZWQgdG8gdGhlIGNpdGFkZWwsIHB1cnBvc2luZyB0byBicmVhayBvcGVuIHRoZSBwcmlzb24gYW5kIGF2YWlsIHRoZW1zZWx2ZXMgb2YgdGhlIG11bHRpdHVkZSBvZiBwcmlzb25lcnMuIEJ1dCB0aGUgZ3VhcmRzIHdlcmUgdG9vIHF1aWNrIGZvciB0aGVtIGFuZCBiYXJyZWQgdGhlIHdheSBzZWN1cmVseSwgc28gdGhhdCBDbGVvbWVuZXMsIGJhZmZsZWQgaW4gdGhpcyBhdHRlbXB0IGFsc28sIHJvYW1lZCB1cCBhbmQgZG93biB0aHJvdWdoIHRoZSBjaXR5LCBub3QgYSBtYW4gam9pbmluZyB3aXRoIGhpbSBidXQgZXZlcnlib2R5IGZpbGxlZCB3aXRoIGZlYXIgYW5kIGZseWluZyBmcm9tIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBoZSBkZXNpc3RlZCBmcm9tIGhpcyBhdHRlbXB0LCBhbmQgc2F5aW5nIHRvIGhpcyBmcmllbmRzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgbm8gd29uZGVyLCBhZnRlciBhbGwsIHRoYXQgd29tZW4gcnVsZSBvdmVyIG1lbiB3aG8gcnVuIGF3YXkgZnJvbSBmcmVlZG9tLDwvcT4gaGUgY2FsbGVkIHVwb24gdGhlbSBhbGwgdG8gZGllIGluIGEgbWFubmVyIHdvcnRoeSBvZiB0aGVpciBraW5nIGFuZCB0aGVpciBwYXN0IGFjaGlldmVtZW50cy4gU28gSGlwcGl0YXMgZmlyc3QsIGF0IGhpcyBvd24gcmVxdWVzdCwgd2FzIHNtaXR0ZW4gZG93biBieSBvbmUgb2YgdGhlIHlvdW5nZXIgbWVuLCB0aGVuIGVhY2ggb2YgdGhlIG90aGVycyBjYWxtbHkgYW5kIGNoZWVyZnVsbHkgc2xldyBoaW1zZWxmLCBleGNlcHQgUGFudGV1cywgdGhlIG1hbiB3aG8gbGVkIHRoZSB3YXkgaW4gdGhlIGNhcHR1cmUgb2YgTWVnYWxvcG9saXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDIzLjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjMuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eGlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBvbmNlIGJlZW4gdGhlIGtpbmcncyBmYXZvdXJpdGUsIGJlY2F1c2UgaW4gaGlzIHlvdXRoIGhlIHdhcyBtb3N0IGZhaXIsIGFuZCBpbiBoaXMgeW91bmcgbWFuaG9vZCBtb3N0IGFtZW5hYmxlIHRvIHRoZSBTcGFydGFuIGRpc2NpcGxpbmU7IGFuZCBub3cgaGlzIG9yZGVycyB3ZXJlIHRvIHdhaXQgdW50aWwgdGhlIGtpbmcgYW5kIHRoZSByZXN0IG9mIHRoZSBiYW5kIHdlcmUgZGVhZCwgYW5kIHRoZW4gdG8gZGllIGhpbXNlbGYuIEF0IGxhc3QgYWxsIHRoZSByZXN0IGxheSBwcm9zdHJhdGUgb24gdGhlIGdyb3VuZCwgYW5kIFBhbnRldXMsIGdvaW5nIHVwIHRvIGVhY2ggb25lIGluIHR1cm4gYW5kIHByaWNraW5nIGhpbSB3aXRoIGhpcyBzd29yZCwgc291Z2h0IHRvIGRpc2NvdmVyIHdoZXRoZXIgYW55IHNwYXJrIG9mIGxpZmUgcmVtYWluZWQuIFdoZW4gaGUgcHJpY2tlZCBDbGVvbWVuZXMgaW4gdGhlIGFua2xlIGFuZCBzYXcgdGhhdCBoaXMgZmFjZSB0d2l0Y2hlZCwgaGUga2lzc2VkIGhpbSwgYW5kIHRoZW4gc2F0IGRvd24gYnkgaGlzIHNpZGU7IGF0IGxhc3QgdGhlIGVuZCBjYW1lLCBhbmQgYWZ0ZXIgZW1icmFjaW5nIHRoZSBraW5nJ3MgZGVhZCBib2R5LCBoZSBzbGV3IGhpbXNlbGYgdXBvbiBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIHRoZSBlbmQgb2YgQ2xlb21lbmVzIHdobyBoYWQgYmVlbiBmb3Igc2l4dGVlbiB5ZWFycyBraW5nIG9mIFNwYXJ0YSwgYW5kIGhhZCBzaG93biBoaW1zZWxmIHRoZSBtYW4gd2hvbSBJIGhhdmUgZGVzY3JpYmVkLiBUaGUgcmVwb3J0IG9mIGhpcyBkZWF0aCBzcHJlYWQgb3ZlciB0aGUgZW50aXJlIGNpdHksIGFuZCBDcmF0ZXNpY2xlaWEsIGFsdGhvdWdoIHNoZSB3YXMgYSB3b21hbiBvZiBub2JsZSBzcGlyaXQsIGxvc3QgaGVyIGNvbXBvc3VyZSBpbiB2aWV3IG9mIHRoZSBtYWduaXR1ZGUgb2YgaGVyIG1pc2ZvcnR1bmVzLCBhbmQgdGhyb3dpbmcgaGVyIGFybXMgYWJvdXQgdGhlIGNoaWxkcmVuIG9mIENsZW9tZW5lcywgd2FpbGVkIGFuZCBsYW1lbnRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBlbGRlciBvZiB0aGUgdHdvIGJveXMsIGZvcmVzdGFsbGluZyBhbGwgcHJldmVudGlvbiwgc3ByYW5nIGF3YXkgYW5kIHRocmV3IGhpbXNlbGYgaGVhZGxvbmcgZnJvbSB0aGUgcm9vZjsgaGUgd2FzIGJhZGx5IGluanVyZWQsIGJ1dCBkaWQgbm90IGRpZSwgYW5kIHdhcyB0YWtlbiB1cCBjcnlpbmcgb3V0IHJlc2VudGZ1bGx5IGJlY2F1c2UgaGUgd2FzIG5vdCBwZXJtaXR0ZWQgdG8gZW5kIGhpcyBsaWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgd2FzIHRoZSBlbmQgb2YgQ2xlb21lbmVzIHdobyBoYWQgYmVlbiBmb3Igc2l4dGVlbiB5ZWFycyBraW5nIG9mIFNwYXJ0YSwgYW5kIGhhZCBzaG93biBoaW1zZWxmIHRoZSBtYW4gd2hvbSBJIGhhdmUgZGVzY3JpYmVkLiBUaGUgcmVwb3J0IG9mIGhpcyBkZWF0aCBzcHJlYWQgb3ZlciB0aGUgZW50aXJlIGNpdHksIGFuZCBDcmF0ZXNpY2xlaWEsIGFsdGhvdWdoIHNoZSB3YXMgYSB3b21hbiBvZiBub2JsZSBzcGlyaXQsIGxvc3QgaGVyIGNvbXBvc3VyZSBpbiB2aWV3IG9mIHRoZSBtYWduaXR1ZGUgb2YgaGVyIG1pc2ZvcnR1bmVzLCBhbmQgdGhyb3dpbmcgaGVyIGFybXMgYWJvdXQgdGhlIGNoaWxkcmVuIG9mIENsZW9tZW5lcywgd2FpbGVkIGFuZCBsYW1lbnRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZWxkZXIgb2YgdGhlIHR3byBib3lzLCBmb3Jlc3RhbGxpbmcgYWxsIHByZXZlbnRpb24sIHNwcmFuZyBhd2F5IGFuZCB0aHJldyBoaW1zZWxmIGhlYWRsb25nIGZyb20gdGhlIHJvb2Y7IGhlIHdhcyBiYWRseSBpbmp1cmVkLCBidXQgZGlkIG5vdCBkaWUsIGFuZCB3YXMgdGFrZW4gdXAgY3J5aW5nIG91dCByZXNlbnRmdWxseSBiZWNhdXNlIGhlIHdhcyBub3QgcGVybWl0dGVkIHRvIGVuZCBoaXMgbGlmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgUHRvbGVteSwgd2hlbiBoZSBsZWFybmVkIG9mIHRoZXNlIHRoaW5ncywgZ2F2ZSBvcmRlcnMgdGhhdCB0aGUgYm9keSBvZiBDbGVvbWVuZXMgc2hvdWxkIGJlIGZsYXllZCBhbmQgaHVuZyB1cCwgYW5kIHRoYXQgaGlzIGNoaWxkcmVuLCBoaXMgbW90aGVyLCBhbmQgdGhlIHdvbWVuIHRoYXQgd2VyZSB3aXRoIGhlciwgc2hvdWxkIGJlIGtpbGxlZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyB0aGVzZSB3b21lbiB3YXMgdGhlIHdpZmUgb2YgUGFudGV1cywgbW9zdCBub2JsZSBhbmQgYmVhdXRpZnVsIHRvIGxvb2sgdXBvbi4gVGhlIHBhaXIgd2VyZSBzdGlsbCBidXQgbGF0ZWx5IG1hcnJpZWQsIGFuZCB0aGVpciBtaXNmb3J0dW5lcyBjYW1lIHVwb24gdGhlbSBpbiB0aGUgaGV5LWRheSBvZiB0aGVpciBsb3ZlLiBIZXIgcGFyZW50cywgaW5kZWVkLCB3b3VsZCBub3QgcGVybWl0IGhlciB0byBzYWlsIGF3YXkgd2l0aCBQYW50ZXVzIGltbWVkaWF0ZWx5LCBhbHRob3VnaCBzaGUgd2lzaGVkIHRvIGRvIHNvLCBidXQgc2h1dCBoZXIgdXAgYW5kIGtlcHQgaGVyIHVuZGVyIGNvbnN0cmFpbnQ7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmEgbGl0dGxlIGxhdGVyLCBob3dldmVyLCBzaGUgcHJvY3VyZWQgaGVyc2VsZiBhIGhvcnNlIGFuZCBhIHNtYWxsIHN1bSBvZiBtb25leSwgcmFuIGF3YXkgYnkgbmlnaHQsIG1hZGUgYWxsIHNwZWVkIHRvIFRhZW5hcnVtLCBhbmQgdGhlcmUgZW1iYXJrZWQgdXBvbiBhIHNoaXAgYm91bmQgZm9yIEVneXB0LiBTaGUgd2FzIGNvbnZleWVkIHRvIGhlciBodXNiYW5kLCBhbmQgd2l0aCBoaW0gYm9yZSB0aGVpciBsaWZlIGluIGEgc3RyYW5nZSBsYW5kIHdpdGhvdXQgY29tcGxhaW50IGFuZCBjaGVlcmZ1bGx5LiBTaGUgaXQgd2FzIHdobyBub3cgdG9vayB0aGUgaGFuZCBvZiBDcmF0ZXNpY2xlaWEgYXMgc2hlIHdhcyBsZWQgZm9ydGggYnkgdGhlIHNvbGRpZXJzLCBoZWxkIHVwIGhlciByb2JlIGZvciBoZXIsIGFuZCBiYWRlIGhlciBiZSBvZiBnb29kIGNvdXJhZ2UuIEFuZCBDcmF0ZXNpY2xlaWEgaGVyc2VsZiB3YXMgbm90IG9uZSB3aGl0IGRpc21heWVkIGF0IGRlYXRoLCBidXQgYXNrZWQgb25lIGZhdm91ciBvbmx5LCB0aGF0IHNoZSBtaWdodCBkaWUgYmVmb3JlIHRoZSBjaGlsZHJlbiBkaWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGVuIHRoZXkgd2VyZSBjb21lIHRvIHRoZSBwbGFjZSBvZiBleGVjdXRpb24sIGZpcnN0IHRoZSBjaGlsZHJlbiB3ZXJlIHNsYWluIGJlZm9yZSBoZXIgZXllcywgYW5kIHRoZW4gQ3JhdGVzaWNsZWlhIGhlcnNlbGYgd2FzIHNsYWluLCBtYWtpbmcgYnV0IHRoaXMgb25lIGNyeSBhdCBzb3Jyb3dzIHNvIGdyZWF0OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gY2hpbGRyZW4sIHdoaXRoZXIgYXJlIHllIGdvbmU/PC9xPiBUaGVuIHRoZSB3aWZlIG9mIFBhbnRldXMsIGdpcmRpbmcgdXAgaGVyIHJvYmUsIHZpZ29yb3VzIGFuZCBzdGF0ZWx5IHdvbWFuIHRoYXQgc2hlIHdhcywgbWluaXN0ZXJlZCB0byBlYWNoIG9mIHRoZSBkeWluZyB3b21lbiBjYWxtbHkgYW5kIHdpdGhvdXQgYSB3b3JkLCBhbmQgbGFpZCB0aGVtIG91dCBmb3IgYnVyaWFsIGFzIHdlbGwgYXMgc2hlIGNvdWxkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgYWZ0ZXIgYWxsIHdlcmUgY2FyZWQgZm9yLCBzaGUgYXJyYXllZCBoZXJzZWxmOyBsZXQgZG93biB0aGUgcm9iZXMgZnJvbSBhYm91dCBoZXIgbmVjaywgYW5kIHN1ZmZlcmluZyBubyBvbmUgYmVzaWRlcyB0aGUgZXhlY3V0aW9uZXIgdG8gY29tZSBuZWFyIG9yIGxvb2sgdXBvbiBoZXIsIGJyYXZlbHkgbWV0IGhlciBlbmQsIGFuZCBoYWQgbm8gbmVlZCBvZiBhbnlvbmUgdG8gYXJyYXkgb3IgY292ZXIgdXAgaGVyIGJvZHkgYWZ0ZXIgZGVhdGguIFRodXMgaGVyIGRlY29ydW0gb2Ygc3Bpcml0IGF0dGVuZGVkIGhlciBpbiBkZWF0aCwgYW5kIHNoZSBtYWludGFpbmVkIHRvIHRoZSBlbmQgdGhhdCB3YXRjaGZ1bCBjYXJlIG9mIGhlciBib2R5IHdoaWNoIHNoZSBoYWQgc2V0IG92ZXIgaXQgaW4gbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdvbWVuIHdhcyB0aGUgd2lmZSBvZiBQYW50ZXVzLCBtb3N0IG5vYmxlIGFuZCBiZWF1dGlmdWwgdG8gbG9vayB1cG9uLiBUaGUgcGFpciB3ZXJlIHN0aWxsIGJ1dCBsYXRlbHkgbWFycmllZCwgYW5kIHRoZWlyIG1pc2ZvcnR1bmVzIGNhbWUgdXBvbiB0aGVtIGluIHRoZSBoZXktZGF5IG9mIHRoZWlyIGxvdmUuIEhlciBwYXJlbnRzLCBpbmRlZWQsIHdvdWxkIG5vdCBwZXJtaXQgaGVyIHRvIHNhaWwgYXdheSB3aXRoIFBhbnRldXMgaW1tZWRpYXRlbHksIGFsdGhvdWdoIHNoZSB3aXNoZWQgdG8gZG8gc28sIGJ1dCBzaHV0IGhlciB1cCBhbmQga2VwdCBoZXIgdW5kZXIgY29uc3RyYWludDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmEgbGl0dGxlIGxhdGVyLCBob3dldmVyLCBzaGUgcHJvY3VyZWQgaGVyc2VsZiBhIGhvcnNlIGFuZCBhIHNtYWxsIHN1bSBvZiBtb25leSwgcmFuIGF3YXkgYnkgbmlnaHQsIG1hZGUgYWxsIHNwZWVkIHRvIFRhZW5hcnVtLCBhbmQgdGhlcmUgZW1iYXJrZWQgdXBvbiBhIHNoaXAgYm91bmQgZm9yIEVneXB0LiBTaGUgd2FzIGNvbnZleWVkIHRvIGhlciBodXNiYW5kLCBhbmQgd2l0aCBoaW0gYm9yZSB0aGVpciBsaWZlIGluIGEgc3RyYW5nZSBsYW5kIHdpdGhvdXQgY29tcGxhaW50IGFuZCBjaGVlcmZ1bGx5LiBTaGUgaXQgd2FzIHdobyBub3cgdG9vayB0aGUgaGFuZCBvZiBDcmF0ZXNpY2xlaWEgYXMgc2hlIHdhcyBsZWQgZm9ydGggYnkgdGhlIHNvbGRpZXJzLCBoZWxkIHVwIGhlciByb2JlIGZvciBoZXIsIGFuZCBiYWRlIGhlciBiZSBvZiBnb29kIGNvdXJhZ2UuIEFuZCBDcmF0ZXNpY2xlaWEgaGVyc2VsZiB3YXMgbm90IG9uZSB3aGl0IGRpc21heWVkIGF0IGRlYXRoLCBidXQgYXNrZWQgb25lIGZhdm91ciBvbmx5LCB0aGF0IHNoZSBtaWdodCBkaWUgYmVmb3JlIHRoZSBjaGlsZHJlbiBkaWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhlIHBsYWNlIG9mIGV4ZWN1dGlvbiwgZmlyc3QgdGhlIGNoaWxkcmVuIHdlcmUgc2xhaW4gYmVmb3JlIGhlciBleWVzLCBhbmQgdGhlbiBDcmF0ZXNpY2xlaWEgaGVyc2VsZiB3YXMgc2xhaW4sIG1ha2luZyBidXQgdGhpcyBvbmUgY3J5IGF0IHNvcnJvd3Mgc28gZ3JlYXQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIGNoaWxkcmVuLCB3aGl0aGVyIGFyZSB5ZSBnb25lPzwvcT4gVGhlbiB0aGUgd2lmZSBvZiBQYW50ZXVzLCBnaXJkaW5nIHVwIGhlciByb2JlLCB2aWdvcm91cyBhbmQgc3RhdGVseSB3b21hbiB0aGF0IHNoZSB3YXMsIG1pbmlzdGVyZWQgdG8gZWFjaCBvZiB0aGUgZHlpbmcgd29tZW4gY2FsbWx5IGFuZCB3aXRob3V0IGEgd29yZCwgYW5kIGxhaWQgdGhlbSBvdXQgZm9yIGJ1cmlhbCBhcyB3ZWxsIGFzIHNoZSBjb3VsZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCBhZnRlciBhbGwgd2VyZSBjYXJlZCBmb3IsIHNoZSBhcnJheWVkIGhlcnNlbGY7IGxldCBkb3duIHRoZSByb2JlcyBmcm9tIGFib3V0IGhlciBuZWNrLCBhbmQgc3VmZmVyaW5nIG5vIG9uZSBiZXNpZGVzIHRoZSBleGVjdXRpb25lciB0byBjb21lIG5lYXIgb3IgbG9vayB1cG9uIGhlciwgYnJhdmVseSBtZXQgaGVyIGVuZCwgYW5kIGhhZCBubyBuZWVkIG9mIGFueW9uZSB0byBhcnJheSBvciBjb3ZlciB1cCBoZXIgYm9keSBhZnRlciBkZWF0aC4gVGh1cyBoZXIgZGVjb3J1bSBvZiBzcGlyaXQgYXR0ZW5kZWQgaGVyIGluIGRlYXRoLCBhbmQgc2hlIG1haW50YWluZWQgdG8gdGhlIGVuZCB0aGF0IHdhdGNoZnVsIGNhcmUgb2YgaGVyIGJvZHkgd2hpY2ggc2hlIGhhZCBzZXQgb3ZlciBpdCBpbiBsaWZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgU3BhcnRhLCBicmluZ2luZyBoZXIgd29tZW4ncyB0cmFnZWR5IGludG8gZW11bG91cyBjb21wZXRpdGlvbiB3aXRoIHRoYXQgb2YgaGVyIG1lbiwgc2hvd2VkIHRoZSB3b3JsZCB0aGF0IGluIHRoZSBsYXN0IGV4dHJlbWl0eSBWaXJ0dWUgY2Fubm90IGJlIG91dHJhZ2VkIGJ5IEZvcnR1bmUuIEFuZCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgdGhvc2Ugd2hvIHdlcmUga2VlcGluZyB3YXRjaCB1cG9uIHRoZSBib2R5IG9mIENsZW9tZW5lcyB3aGVyZSBpdCBodW5nLCBzYXcgYSBzZXJwZW50IG9mIGdyZWF0IHNpemUgY29pbGluZyBpdHNlbGYgYWJvdXQgdGhlIGhlYWQgYW5kIGhpZGluZyBhd2F5IHRoZSBmYWNlIHNvIHRoYXQgbm8gcmF2ZW5pbmcgYmlyZCBvZiBwcmV5IGNvdWxkIGxpZ2h0IHVwb24gaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIHRoZSBraW5nIHdhcyBzZWl6ZWQgd2l0aCBzdXBlcnN0aXRpb3VzIGZlYXIsIGFuZCB0aHVzIGdhdmUgdGhlIHdvbWVuIG9jY2FzaW9uIGZvciB2YXJpb3VzIHJpdGVzIG9mIHB1cmlmaWNhdGlvbiwgc2luY2UgdGhleSBmZWx0IHRoYXQgYSBtYW4gaGFkIGJlZW4gdGFrZW4gb2ZmIHdobyB3YXMgb2YgYSBzdXBlcmlvciBuYXR1cmUgYW5kIGJlbG92ZWQgb2YgdGhlIGdvZHMuIEFuZCB0aGUgQWxleGFuZHJpYW5zIGFjdHVhbGx5IHdvcnNoaXBwZWQgaGltLCBjb21pbmcgZnJlcXVlbnRseSB0byB0aGUgc3BvdCBhbmQgYWRkcmVzc2luZyBDbGVvbWVuZXMgYXMgYSBoZXJvIGFuZCBhIGNoaWxkIG9mIHRoZSBnb2RzOyBidXQgYXQgbGFzdCB0aGUgd2lzZXIgbWVuIGFtb25nIHRoZW0gcHV0IGEgc3RvcCB0byB0aGlzIGJ5IGV4cGxhaW5pbmcgdGhhdCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YXMgcHV0cmVmeWluZyBveGVuIGJyZWVkIGJlZXMsIGFuZCBob3JzZXMgd2FzcHMsIGFuZCBhcyBiZWV0bGVzIGFyZSBnZW5lcmF0ZWQgaW4gYXNzZXMgd2hpY2ggYXJlIGluIHRoZSBsaWtlIGNvbmRpdGlvbiBvZiBkZWNheSwgc28gaHVtYW4gYm9kaWVzLCB3aGVuIHRoZSBqdWljZXMgYWJvdXQgdGhlIG1hcnJvdyBjb2xsZWN0IHRvZ2V0aGVyIGFuZCBjb2FndWxhdGUsIHByb2R1Y2Ugc2VycGVudHMuIEFuZCBpdCB3YXMgYmVjYXVzZSB0aGV5IG9ic2VydmVkIHRoaXMgdGhhdCB0aGUgYW5jaWVudHMgYXNzb2NpYXRlZCB0aGUgc2VycGVudCBtb3JlIHRoYW4gYW55IG90aGVyIGFuaW1hbCB3aXRoIGhlcm9lcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIFNwYXJ0YSwgYnJpbmdpbmcgaGVyIHdvbWVuJ3MgdHJhZ2VkeSBpbnRvIGVtdWxvdXMgY29tcGV0aXRpb24gd2l0aCB0aGF0IG9mIGhlciBtZW4sIHNob3dlZCB0aGUgd29ybGQgdGhhdCBpbiB0aGUgbGFzdCBleHRyZW1pdHkgVmlydHVlIGNhbm5vdCBiZSBvdXRyYWdlZCBieSBGb3J0dW5lLiBBbmQgYSBmZXcgZGF5cyBhZnRlcndhcmRzIHRob3NlIHdobyB3ZXJlIGtlZXBpbmcgd2F0Y2ggdXBvbiB0aGUgYm9keSBvZiBDbGVvbWVuZXMgd2hlcmUgaXQgaHVuZywgc2F3IGEgc2VycGVudCBvZiBncmVhdCBzaXplIGNvaWxpbmcgaXRzZWxmIGFib3V0IHRoZSBoZWFkIGFuZCBoaWRpbmcgYXdheSB0aGUgZmFjZSBzbyB0aGF0IG5vIHJhdmVuaW5nIGJpcmQgb2YgcHJleSBjb3VsZCBsaWdodCB1cG9uIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIHRoZSBraW5nIHdhcyBzZWl6ZWQgd2l0aCBzdXBlcnN0aXRpb3VzIGZlYXIsIGFuZCB0aHVzIGdhdmUgdGhlIHdvbWVuIG9jY2FzaW9uIGZvciB2YXJpb3VzIHJpdGVzIG9mIHB1cmlmaWNhdGlvbiwgc2luY2UgdGhleSBmZWx0IHRoYXQgYSBtYW4gaGFkIGJlZW4gdGFrZW4gb2ZmIHdobyB3YXMgb2YgYSBzdXBlcmlvciBuYXR1cmUgYW5kIGJlbG92ZWQgb2YgdGhlIGdvZHMuIEFuZCB0aGUgQWxleGFuZHJpYW5zIGFjdHVhbGx5IHdvcnNoaXBwZWQgaGltLCBjb21pbmcgZnJlcXVlbnRseSB0byB0aGUgc3BvdCBhbmQgYWRkcmVzc2luZyBDbGVvbWVuZXMgYXMgYSBoZXJvIGFuZCBhIGNoaWxkIG9mIHRoZSBnb2RzOyBidXQgYXQgbGFzdCB0aGUgd2lzZXIgbWVuIGFtb25nIHRoZW0gcHV0IGEgc3RvcCB0byB0aGlzIGJ5IGV4cGxhaW5pbmcgdGhhdCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
