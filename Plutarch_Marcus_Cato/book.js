var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgdXNlZCB0byBjYWxsIG1lbiB3aG8gaGFkIG5vIGZhbWlseSBkaXN0aW5jdGlvbiwgYnV0IHdlcmUgY29taW5nIGludG8gcHVibGljIG5vdGljZSB0aHJvdWdoIHRoZWlyIG93biBhY2hpZXZlbWVudHMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5uZXcgbWVuLDwvcT4gYW5kIHN1Y2ggdGhleSBjYWxsZWQgQ2F0by4gQnV0IGhlIGhpbXNlbGYgdXNlZCB0byBzYXkgdGhhdCBhcyBmYXIgYXMgb2ZmaWNlIGFuZCBkaXN0aW5jdGlvbiB3ZW50LCBoZSB3YXMgaW5kZWVkIG5ldywgYnV0IGhhdmluZyByZWdhcmQgdG8gYW5jZXN0cmFsIGRlZWRzIG9mIHZhbG91ciwgaGUgd2FzIG9sZGVzdCBvZiB0aGUgb2xkLiBIaXMgdGhpcmQgbmFtZSB3YXMgbm90IENhdG8gYXQgZmlyc3QsIGJ1dCBQcmlzY3VzLiBBZnRlcndhcmRzIGhlIGdvdCB0aGUgc3VybmFtZSBvZiBDYXRvIGZvciBoaXMgZ3JlYXQgYWJpbGl0aWVzLiBUaGUgUm9tYW5zIGNhbGwgYSBtYW4gd2hvIGlzIHdpc2UgYW5kIHBydWRlbnQsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2F0dXMuPC9lbXBoPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGlzIG91dHdhcmQgYXBwZWFyYW5jZSwgaGUgaGFkIHJlZGRpc2ggaGFpciwgYW5kIGtlZW4gZ3JleSBleWVzLCBhcyB0aGUgYXV0aG9yIG9mIHRoZSB3ZWxsIGtub3duIGVwaWdyYW0gaWxsLW5hdHVyZWRseSBnaXZlcyB1cyB0byB1bmRlcnN0YW5kOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5SZWQtaGFpcmVkLCBzbmFwcGVyIGFuZCBiaXRlciwgaGlzIGdyZXkgZXllcyBmbGFzaGluZyBkZWZpYW5jZSw8L2w+CgkJCQkJICAgICAgICAgIDxsPlBvcmNpdXMsIGNvbWUgdG8gdGhlIHNoYWRlcywgYmFjayB3aWxsIGJlIHRocnVzdCBieSB0aGVpciBRdWVlbi48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlIaXMgYm9kaWx5IGhhYml0LCBzaW5jZSBoZSB3YXMgYWRkaWN0ZWQgZnJvbSB0aGUgdmVyeSBmaXJzdCB0byBsYWJvdXIgd2l0aCBoaXMgb3duIGhhbmRzLCBhIHRlbXBlcmF0ZSBtb2RlIG9mIGxpZmUsIGFuZCBtaWxpdGFyeSBkdXRpZXMsIHdhcyB2ZXJ5IHNlcnZpY2VhYmxlLCBhbmQgZGlzcG9zZWQgYWxpa2UgdG8gdmlnb3VyIGFuZCBoZWFsdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkaXNjb3Vyc2Us4oCUYSBzZWNvbmQgYm9keSwgYXMgaXQgd2VyZSwgYW5kLCBmb3IgdGhlIHVzZSBvZiBhIG1hbiB3aG8gd291bGQgbGl2ZSBuZWl0aGVyIG9ic2N1cmVseSBub3IgaWRseSwgYW4gaW5zdHJ1bWVudCB3aXRoIHdoaWNoIHRvIHBlcmZvcm0gbm90IG9ubHkgbmVjZXNzYXJ5LCBidXQgYWxzbyBoaWdoIGFuZCBub2JsZSBzZXJ2aWNlcyzigJR0aGlzIGhlIGRldmVsb3BlZCBhbmQgcGVyZmVjdGVkIGluIHRoZSB2aWxsYWdlcyBhbmQgdG93bnMgYWJvdXQgUm9tZSwgd2hlcmUgaGUgc2VydmVkIGFzIGFkdm9jYXRlIGZvciBhbGwgd2hvIG5lZWRlZCBoaW0sIGFuZCBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcsIGZpcnN0IGEgemVhbG91cyBwbGVhZGVyLCBhbmQgdGhlbiBhIGNhcGFibGUgb3JhdG9yLiBUaGVuY2Vmb3J0aCB0aGUgd2VpZ2h0IGFuZCBkaWduaXR5IG9mIGhpcyBjaGFyYWN0ZXIgcmV2ZWFsZWQgdGhlbXNlbHZlcyBtb3JlIGFuZCBtb3JlIHRvIHRob3NlIHdobyBoYWQgZGVhbGluZ3Mgd2l0aCBoaW07IHRoZXkgc2F3IHRoYXQgaGUgd2FzIGJvdW5kIHRvIGJlIGEgbWFuIG9mIGdyZWF0IGFmZmFpcnMsIGFuZCBoYXZlIGEgbGVhZGluZyBwbGFjZSBpbiB0aGUgc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBub3Qgb25seSBnYXZlIGhpcyBzZXJ2aWNlcyBpbiBsZWdhbCBjb250ZXN0cyB3aXRob3V0IGZlZSBvZiBhbnkgc29ydCwgYXMgaXQgd291bGQgc2VlbSwgYnV0IGRpZCBub3QgYXBwZWFyIHRvIGNoZXJpc2ggZXZlbiB0aGUgcmVwdXRlIHdvbiBpbiBzdWNoIGNvbnRlc3RzIGFzIGhpcyBjaGllZiBhbWJpdGlvbi4gTmF5LCBoZSB3YXMgZmFyIG1vcmUgZGVzaXJvdXMgb2YgaGlnaCByZXB1dGUgaW4gYmF0dGxlcyBhbmQgY2FtcGFpZ25zIGFnYWluc3QgdGhlIGVuZW15LCBhbmQgd2hpbGUgaGUgd2FzIHlldCBhIG1lcmUgc3RyaXBsaW5nLCBoYWQgaGlzIGJyZWFzdCBjb3ZlcmVkIHdpdGggaG9ub3VyYWJsZSB3b3VuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgaGltc2VsZiB0aGF0IGhlIG1hZGUgaGlzIGZpcnN0IGNhbXBhaWduIHdoZW4gaGUgd2FzIHNldmVudGVlbiB5ZWFycyBvbGQsIGF0IHRoZSB0aW1lIHdoZW4gSGFubmliYWwgd2FzIGNvbnN1bWluZyBJdGFseSB3aXRoIHRoZSBmbGFtZXMgb2YgaGlzIHN1Y2Nlc3Nlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMTcgQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgb3V0d2FyZCBhcHBlYXJhbmNlLCBoZSBoYWQgcmVkZGlzaCBoYWlyLCBhbmQga2VlbiBncmV5IGV5ZXMsIGFzIHRoZSBhdXRob3Igb2YgdGhlIHdlbGwga25vd24gZXBpZ3JhbSBpbGwtbmF0dXJlZGx5IGdpdmVzIHVzIHRvIHVuZGVyc3RhbmQ64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWQtaGFpcmVkLCBzbmFwcGVyIGFuZCBiaXRlciwgaGlzIGdyZXkgZXllcyBmbGFzaGluZyBkZWZpYW5jZSw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9yY2l1cywgY29tZSB0byB0aGUgc2hhZGVzLCBiYWNrIHdpbGwgYmUgdGhydXN0IGJ5IHRoZWlyIFF1ZWVuLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCUhpcyBib2RpbHkgaGFiaXQsIHNpbmNlIGhlIHdhcyBhZGRpY3RlZCBmcm9tIHRoZSB2ZXJ5IGZpcnN0IHRvIGxhYm91ciB3aXRoIGhpcyBvd24gaGFuZHMsIGEgdGVtcGVyYXRlIG1vZGUgb2YgbGlmZSwgYW5kIG1pbGl0YXJ5IGR1dGllcywgd2FzIHZlcnkgc2VydmljZWFibGUsIGFuZCBkaXNwb3NlZCBhbGlrZSB0byB2aWdvdXIgYW5kIGhlYWx0aC4gCgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPlJlZC1oYWlyZWQsIHNuYXBwZXIgYW5kIGJpdGVyLCBoaXMgZ3JleSBleWVzIGZsYXNoaW5nIGRlZmlhbmNlLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb3JjaXVzLCBjb21lIHRvIHRoZSBzaGFkZXMsIGJhY2sgd2lsbCBiZSB0aHJ1c3QgYnkgdGhlaXIgUXVlZW4uPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkaXNjb3Vyc2Us4oCUYSBzZWNvbmQgYm9keSwgYXMgaXQgd2VyZSwgYW5kLCBmb3IgdGhlIHVzZSBvZiBhIG1hbiB3aG8gd291bGQgbGl2ZSBuZWl0aGVyIG9ic2N1cmVseSBub3IgaWRseSwgYW4gaW5zdHJ1bWVudCB3aXRoIHdoaWNoIHRvIHBlcmZvcm0gbm90IG9ubHkgbmVjZXNzYXJ5LCBidXQgYWxzbyBoaWdoIGFuZCBub2JsZSBzZXJ2aWNlcyzigJR0aGlzIGhlIGRldmVsb3BlZCBhbmQgcGVyZmVjdGVkIGluIHRoZSB2aWxsYWdlcyBhbmQgdG93bnMgYWJvdXQgUm9tZSwgd2hlcmUgaGUgc2VydmVkIGFzIGFkdm9jYXRlIGZvciBhbGwgd2hvIG5lZWRlZCBoaW0sIGFuZCBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcsIGZpcnN0IGEgemVhbG91cyBwbGVhZGVyLCBhbmQgdGhlbiBhIGNhcGFibGUgb3JhdG9yLiBUaGVuY2Vmb3J0aCB0aGUgd2VpZ2h0IGFuZCBkaWduaXR5IG9mIGhpcyBjaGFyYWN0ZXIgcmV2ZWFsZWQgdGhlbXNlbHZlcyBtb3JlIGFuZCBtb3JlIHRvIHRob3NlIHdobyBoYWQgZGVhbGluZ3Mgd2l0aCBoaW07IHRoZXkgc2F3IHRoYXQgaGUgd2FzIGJvdW5kIHRvIGJlIGEgbWFuIG9mIGdyZWF0IGFmZmFpcnMsIGFuZCBoYXZlIGEgbGVhZGluZyBwbGFjZSBpbiB0aGUgc3RhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBub3Qgb25seSBnYXZlIGhpcyBzZXJ2aWNlcyBpbiBsZWdhbCBjb250ZXN0cyB3aXRob3V0IGZlZSBvZiBhbnkgc29ydCwgYXMgaXQgd291bGQgc2VlbSwgYnV0IGRpZCBub3QgYXBwZWFyIHRvIGNoZXJpc2ggZXZlbiB0aGUgcmVwdXRlIHdvbiBpbiBzdWNoIGNvbnRlc3RzIGFzIGhpcyBjaGllZiBhbWJpdGlvbi4gTmF5LCBoZSB3YXMgZmFyIG1vcmUgZGVzaXJvdXMgb2YgaGlnaCByZXB1dGUgaW4gYmF0dGxlcyBhbmQgY2FtcGFpZ25zIGFnYWluc3QgdGhlIGVuZW15LCBhbmQgd2hpbGUgaGUgd2FzIHlldCBhIG1lcmUgc3RyaXBsaW5nLCBoYWQgaGlzIGJyZWFzdCBjb3ZlcmVkIHdpdGggaG9ub3VyYWJsZSB3b3VuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgaGltc2VsZiB0aGF0IGhlIG1hZGUgaGlzIGZpcnN0IGNhbXBhaWduIHdoZW4gaGUgd2FzIHNldmVudGVlbiB5ZWFycyBvbGQsIGF0IHRoZSB0aW1lIHdoZW4gSGFubmliYWwgd2FzIGNvbnN1bWluZyBJdGFseSB3aXRoIHRoZSBmbGFtZXMgb2YgaGlzIHN1Y2Nlc3Nlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxNyBCLkMuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIGJhdHRsZSwgaGUgc2hvd2VkIGhpbXNlbGYgZWZmZWN0aXZlIG9mIGhhbmQsIHN1cmUgYW5kIHN0ZWFkZmFzdCBvZiBmb290LCBhbmQgb2YgYSBmaWVyY2UgY291bnRlbmFuY2UuIFdpdGggdGhyZWF0ZW5pbmcgc3BlZWNoIGFuZCBoYXJzaCBjcmllcyBoZSB3b3VsZCBhZHZhbmNlIHVwb24gdGhlIGZvZSwgZm9yIGhlIHJpZ2h0bHkgdGhvdWdodCwgYW5kIHRyaWVkIHRvIHNob3cgb3RoZXJzLCB0aGF0IG9mdGVuLXRpbWVzIHN1Y2ggYWN0aW9uIHRlcnJpZmllcyB0aGUgZW5lbXkgbW9yZSB0aGFuIHRoZSBzd29yZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgbWFyY2gsIGhlIGNhcnJpZWQgaGlzIG93biBhcm1vdXIgb24gZm9vdCwgd2hpbGUgYSBzaW5nbGUgYXR0ZW5kYW50IGZvbGxvd2VkIGluIGNoYXJnZSBvZiBoaXMgY2FtcCB1dGVuc2lscy4gV2l0aCB0aGlzIG1hbiwgaXQgaXMgc2FpZCwgaGUgd2FzIG5ldmVyIHdyb3RoLCBhbmQgbmV2ZXIgc2NvbGRlZCBoaW0gd2hlbiBoZSBzZXJ2ZWQgdXAgYSBtZWFsLCBuYXksIGhlIGFjdHVhbGx5IHRvb2sgaG9sZCBoaW1zZWxmIGFuZCBhc3Npc3RlZCBpbiBtb3N0IG9mIHN1Y2ggcHJlcGFyYXRpb25zLCBwcm92aWRlZCBoZSB3YXMgZnJlZSBmcm9tIGhpcyBtaWxpdGFyeSBkdXRpZXMuIFdhdGVyIHdhcyB3aGF0IGhlIGRyYW5rIG9uIGhpcyBjYW1wYWlnbnMsIGV4Y2VwdCB0aGF0IG9uY2UgaW4gYSB3aGlsZSwgaW4gYSByYWdpbmcgdGhpcnN0LCBoZSB3b3VsZCBjYWxsIGZvciB2aW5lZ2FyLCBvciwgd2hlbiBoaXMgc3RyZW5ndGggd2FzIGZhaWxpbmcsIHdvdWxkIGFkZCBhIGxpdHRsZSB3aW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBtYXJjaCwgaGUgY2FycmllZCBoaXMgb3duIGFybW91ciBvbiBmb290LCB3aGlsZSBhIHNpbmdsZSBhdHRlbmRhbnQgZm9sbG93ZWQgaW4gY2hhcmdlIG9mIGhpcyBjYW1wIHV0ZW5zaWxzLiBXaXRoIHRoaXMgbWFuLCBpdCBpcyBzYWlkLCBoZSB3YXMgbmV2ZXIgd3JvdGgsIGFuZCBuZXZlciBzY29sZGVkIGhpbSB3aGVuIGhlIHNlcnZlZCB1cCBhIG1lYWwsIG5heSwgaGUgYWN0dWFsbHkgdG9vayBob2xkIGhpbXNlbGYgYW5kIGFzc2lzdGVkIGluIG1vc3Qgb2Ygc3VjaCBwcmVwYXJhdGlvbnMsIHByb3ZpZGVkIGhlIHdhcyBmcmVlIGZyb20gaGlzIG1pbGl0YXJ5IGR1dGllcy4gV2F0ZXIgd2FzIHdoYXQgaGUgZHJhbmsgb24gaGlzIGNhbXBhaWducywgZXhjZXB0IHRoYXQgb25jZSBpbiBhIHdoaWxlLCBpbiBhIHJhZ2luZyB0aGlyc3QsIGhlIHdvdWxkIGNhbGwgZm9yIHZpbmVnYXIsIG9yLCB3aGVuIGhpcyBzdHJlbmd0aCB3YXMgZmFpbGluZywgd291bGQgYWRkIGEgbGl0dGxlIHdpbmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmVhciBoaXMgZmllbGRzIHdhcyB0aGUgY290dGFnZSB3aGljaCBoYWQgb25jZSBiZWxvbmdlZCB0byBNYW5pdXMgQ3VyaXVzLCBhIGhlcm8gb2YgdGhyZWUgdHJpdW1waHMuIFRvIHRoaXMgaGUgd291bGQgb2Z0ZW4gZ28sIGFuZCB0aGUgc2lnaHQgb2YgdGhlIHNtYWxsIGZhcm0gYW5kIHRoZSBtZWFuIGR3ZWxsaW5nIGxlZCBoaW0gdG8gdGhpbmsgb2YgdGhlaXIgZm9ybWVyIG93bmVyLCB3aG8sIHRob3VnaCBoZSBoYWQgYmVjb21lIHRoZSBncmVhdGVzdCBvZiB0aGUgUm9tYW5zLCBoYWQgc3ViZHVlZCB0aGUgbW9zdCB3YXJsaWtlIG5hdGlvbnMsIGFuZCBkcml2ZW4gUHlycmh1cyBvdXQgb2YgSXRhbHksIG5ldmVydGhlbGVzcyB0aWxsZWQgdGhpcyBsaXR0bGUgcGF0Y2ggb2YgZ3JvdW5kIHdpdGggaGlzIG93biBoYW5kcyBhbmQgb2NjdXBpZWQgdGhpcyBjb3R0YWdlLCBhZnRlciB0aHJlZSB0cml1bXBocy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBpdCB3YXMgdGhhdCB0aGUgYW1iYXNzYWRvcnMgb2YgdGhlIFNhbW5pdGVzIG9uY2UgZm91bmQgaGltIHNlYXRlZCBhdCBoaXMgaGVhcnRoIGNvb2tpbmcgdHVybmlwcywgYW5kIG9mZmVyZWQgaGltIG11Y2ggZ29sZDsgYnV0IGhlIGRpc21pc3NlZCB0aGVtLCBzYXlpbmcgdGhhdCBhIG1hbiB3aG9tIHN1Y2ggYSBtZWFsIHNhdGlzZmllZCBoYWQgbm8gbmVlZCBvZiBnb2xkLCBhbmQgZm9yIGhpcyBwYXJ0IGhlIHRob3VnaHQgdGhhdCBhIG1vcmUgaG9ub3VyYWJsZSB0aGluZyB0aGFuIHRoZSBwb3NzZXNzaW9uIG9mIGdvbGQgd2FzIHRoZSBjb25xdWVzdCBvZiBpdHMgcG9zc2Vzc29ycy4gQ2F0byB3b3VsZCBnbyBhd2F5IHdpdGggaGlzIG1pbmQgZnVsbCBvZiB0aGVzZSB0aGluZ3MsIGFuZCBvbiB2aWV3aW5nIGFnYWluIGhpcyBvd24gaG91c2UgYW5kIGxhbmRzIGFuZCBzZXJ2YW50cyBhbmQgbW9kZSBvZiBsaWZlLCB3b3VsZCBpbmNyZWFzZSB0aGUgbGFib3VycyBvZiBoaXMgaGFuZHMgYW5kIGxvcCBvZmYgaGlzIGV4dHJhdmFnYW5jaWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OZWFyIGhpcyBmaWVsZHMgd2FzIHRoZSBjb3R0YWdlIHdoaWNoIGhhZCBvbmNlIGJlbG9uZ2VkIHRvIE1hbml1cyBDdXJpdXMsIGEgaGVybyBvZiB0aHJlZSB0cml1bXBocy4gVG8gdGhpcyBoZSB3b3VsZCBvZnRlbiBnbywgYW5kIHRoZSBzaWdodCBvZiB0aGUgc21hbGwgZmFybSBhbmQgdGhlIG1lYW4gZHdlbGxpbmcgbGVkIGhpbSB0byB0aGluayBvZiB0aGVpciBmb3JtZXIgb3duZXIsIHdobywgdGhvdWdoIGhlIGhhZCBiZWNvbWUgdGhlIGdyZWF0ZXN0IG9mIHRoZSBSb21hbnMsIGhhZCBzdWJkdWVkIHRoZSBtb3N0IHdhcmxpa2UgbmF0aW9ucywgYW5kIGRyaXZlbiBQeXJyaHVzIG91dCBvZiBJdGFseSwgbmV2ZXJ0aGVsZXNzIHRpbGxlZCB0aGlzIGxpdHRsZSBwYXRjaCBvZiBncm91bmQgd2l0aCBoaXMgb3duIGhhbmRzIGFuZCBvY2N1cGllZCB0aGlzIGNvdHRhZ2UsIGFmdGVyIHRocmVlIHRyaXVtcGhzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaXQgd2FzIHRoYXQgdGhlIGFtYmFzc2Fkb3JzIG9mIHRoZSBTYW1uaXRlcyBvbmNlIGZvdW5kIGhpbSBzZWF0ZWQgYXQgaGlzIGhlYXJ0aCBjb29raW5nIHR1cm5pcHMsIGFuZCBvZmZlcmVkIGhpbSBtdWNoIGdvbGQ7IGJ1dCBoZSBkaXNtaXNzZWQgdGhlbSwgc2F5aW5nIHRoYXQgYSBtYW4gd2hvbSBzdWNoIGEgbWVhbCBzYXRpc2ZpZWQgaGFkIG5vIG5lZWQgb2YgZ29sZCwgYW5kIGZvciBoaXMgcGFydCBoZSB0aG91Z2h0IHRoYXQgYSBtb3JlIGhvbm91cmFibGUgdGhpbmcgdGhhbiB0aGUgcG9zc2Vzc2lvbiBvZiBnb2xkIHdhcyB0aGUgY29ucXVlc3Qgb2YgaXRzIHBvc3Nlc3NvcnMuIENhdG8gd291bGQgZ28gYXdheSB3aXRoIGhpcyBtaW5kIGZ1bGwgb2YgdGhlc2UgdGhpbmdzLCBhbmQgb24gdmlld2luZyBhZ2FpbiBoaXMgb3duIGhvdXNlIGFuZCBsYW5kcyBhbmQgc2VydmFudHMgYW5kIG1vZGUgb2YgbGlmZSwgd291bGQgaW5jcmVhc2UgdGhlIGxhYm91cnMgb2YgaGlzIGhhbmRzIGFuZCBsb3Agb2ZmIGhpcyBleHRyYXZhZ2FuY2llcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBGYWJpdXMgTWF4aW11cyB0b29rIHRoZSBjaXR5IG9mIFRhcmVudHVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwOSBCLkMuPC9ub3RlPiBpdCBjaGFuY2VkIHRoYXQgQ2F0bywgd2hvIHdhcyB0aGVuIGEgbWVyZSBzdHJpcGxpbmcsIHNlcnZlZCB1bmRlciBoaW0sIGFuZCBiZWluZyBsb2RnZWQgd2l0aCBhIGNlcnRhaW4gTmVhcmNodXMsIG9mIHRoZSBzZWN0IG9mIHRoZSBQeXRoYWdvcmVhbnMsIGhlIHdhcyBlYWdlciB0byBrbm93IG9mIGhpcyBkb2N0cmluZXMuIFdoZW4gaGUgaGVhcmQgdGhpcyBtYW4gaG9sZGluZyBmb3J0aCBhcyBmb2xsb3dzLCBpbiBsYW5ndWFnZSB3aGljaCBQbGF0byBhbHNvIHVzZXMsIGNvbmRlbW5pbmcgcGxlYXN1cmUgYXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgZ3JlYXRlc3QgaW5jZW50aXZlIHRvIGV2aWwsPC9xPiBhbmQgdGhlIGJvZHkgYXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgY2hpZWYgZGV0cmltZW50IHRvIHRoZSBzb3VsLCBmcm9tIHdoaWNoIHNoZSBjYW4gcmVsZWFzZSBhbmQgcHVyaWZ5IGhlcnNlbGYgb25seSBieSBzdWNoIHJlYXNvbmluZ3MgYXMgbW9zdCBkbyB3ZWFuIGFuZCBkaXZvcmNlIGhlciBmcm9tIGJvZGlseSBzZW5zYXRpb25zLDwvcT4gaGUgZmVsbCBzdGlsbCBtb3JlIGluIGxvdmUgd2l0aCBzaW1wbGljaXR5IGFuZCByZXN0cmFpbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIgdGhhbiB0aGlzLCBpdCBpcyBzYWlkLCBoZSBkaWQgbm90IGxlYXJuIEdyZWVrIHRpbGwgbGF0ZSBpbiBsaWZlLCBhbmQgd2FzIHF1aXRlIHdlbGwgb24gaW4geWVhcnMgd2hlbiBoZSB0b29rIHRvIHJlYWRpbmcgR3JlZWsgYm9va3M7IHRoZW4gaGUgcHJvZml0ZWQgaW4gb3JhdG9yeSBzb21ld2hhdCBmcm9tIFRodWN5ZGlkZXMsIGJ1dCBtb3JlIGZyb20gRGVtb3N0aGVuZXMuIEhvd2V2ZXIsIGhpcyB3cml0aW5ncyBhcmUgbW9kZXJhdGVseSBlbWJlbGxpc2hlZCB3aXRoIEdyZWVrIHNlbnRpbWVudHMgYW5kIHN0b3JpZXMsIGFuZCBtYW55IGxpdGVyYWwgdHJhbnNsYXRpb25zIGZyb20gdGhlIEdyZWVrIGhhdmUgZm91bmQgYSBwbGFjZSBhbW9uZyBoaXMgbWF4aW1zIGFuZCBwcm92ZXJicy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRmFiaXVzIE1heGltdXMgdG9vayB0aGUgY2l0eSBvZiBUYXJlbnR1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwOSBCLkMuPC9ub3RlPiBpdCBjaGFuY2VkIHRoYXQgQ2F0bywgd2hvIHdhcyB0aGVuIGEgbWVyZSBzdHJpcGxpbmcsIHNlcnZlZCB1bmRlciBoaW0sIGFuZCBiZWluZyBsb2RnZWQgd2l0aCBhIGNlcnRhaW4gTmVhcmNodXMsIG9mIHRoZSBzZWN0IG9mIHRoZSBQeXRoYWdvcmVhbnMsIGhlIHdhcyBlYWdlciB0byBrbm93IG9mIGhpcyBkb2N0cmluZXMuIFdoZW4gaGUgaGVhcmQgdGhpcyBtYW4gaG9sZGluZyBmb3J0aCBhcyBmb2xsb3dzLCBpbiBsYW5ndWFnZSB3aGljaCBQbGF0byBhbHNvIHVzZXMsIGNvbmRlbW5pbmcgcGxlYXN1cmUgYXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBncmVhdGVzdCBpbmNlbnRpdmUgdG8gZXZpbCw8L3E+IGFuZCB0aGUgYm9keSBhcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGNoaWVmIGRldHJpbWVudCB0byB0aGUgc291bCwgZnJvbSB3aGljaCBzaGUgY2FuIHJlbGVhc2UgYW5kIHB1cmlmeSBoZXJzZWxmIG9ubHkgYnkgc3VjaCByZWFzb25pbmdzIGFzIG1vc3QgZG8gd2VhbiBhbmQgZGl2b3JjZSBoZXIgZnJvbSBib2RpbHkgc2Vuc2F0aW9ucyw8L3E+IGhlIGZlbGwgc3RpbGwgbW9yZSBpbiBsb3ZlIHdpdGggc2ltcGxpY2l0eSBhbmQgcmVzdHJhaW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIgdGhhbiB0aGlzLCBpdCBpcyBzYWlkLCBoZSBkaWQgbm90IGxlYXJuIEdyZWVrIHRpbGwgbGF0ZSBpbiBsaWZlLCBhbmQgd2FzIHF1aXRlIHdlbGwgb24gaW4geWVhcnMgd2hlbiBoZSB0b29rIHRvIHJlYWRpbmcgR3JlZWsgYm9va3M7IHRoZW4gaGUgcHJvZml0ZWQgaW4gb3JhdG9yeSBzb21ld2hhdCBmcm9tIFRodWN5ZGlkZXMsIGJ1dCBtb3JlIGZyb20gRGVtb3N0aGVuZXMuIEhvd2V2ZXIsIGhpcyB3cml0aW5ncyBhcmUgbW9kZXJhdGVseSBlbWJlbGxpc2hlZCB3aXRoIEdyZWVrIHNlbnRpbWVudHMgYW5kIHN0b3JpZXMsIGFuZCBtYW55IGxpdGVyYWwgdHJhbnNsYXRpb25zIGZyb20gdGhlIEdyZWVrIGhhdmUgZm91bmQgYSBwbGFjZSBhbW9uZyBoaXMgbWF4aW1zIGFuZCBwcm92ZXJicy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3YXMgYXQgUm9tZSBhIGNlcnRhaW4gbWFuIG9mIHRoZSBoaWdoZXN0IGJpcnRoIGFuZCBncmVhdGVzdCBpbmZsdWVuY2UsIHdobyBoYWQgdGhlIHBvd2VyIHRvIGRpc2Nlcm4gZXhjZWxsZW5jZSBpbiB0aGUgYnVkLCBhbmQgdGhlIGdyYWNlIHRvIGN1bHRpdmF0ZSBpdCBhbmQgYnJpbmcgaXQgaW50byBnZW5lcmFsIGVzdGVlbS4gVGhpcyBtYW4gd2FzIFZhbGVyaXVzIEZsYWNjdXMuIEhlIGhhZCBhIGZhcm0gbmV4dCB0byB0aGF0IG9mIENhdG8sIGFuZCBsZWFybmVkIGZyb20gQ2F0bydzIHNlcnZhbnRzIG9mIHRoZWlyIG1hc3RlcidzIGxhYm9yaW91cyBhbmQgZnJ1Z2FsIHdheSBvZiBsaXZpbmcuIEhlIHdhcyBhbWF6ZWQgdG8gaGVhciB0aGVtIHRlbGwgaG93IENhdG8sIGVhcmx5IGluIHRoZSBtb3JuaW5nLCB3ZW50IG9uIGZvb3QgdG8gdGhlIG1hcmtldC1wbGFjZSBhbmQgcGxlYWRlZCB0aGUgY2FzZXMgb2YgYWxsIHdobyB3aXNoZWQgaGlzIGFpZDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dGhlbiBjYW1lIGJhY2sgdG8gaGlzIGZhcm0sIHdoZXJlLCBjbGFkIGluIGEgd29ya2luZyBibG91c2UgaWYgaXQgd2FzIHdpbnRlciwgYW5kIHN0cmlwcGVkIHRvIHRoZSB3YWlzdCBpZiBpdCB3YXMgc3VtbWVyLCBoZSB3cm91Z2h0IHdpdGggaGlzIHNlcnZhbnRzLCB0aGVuIHNhdCBkb3duIHdpdGggdGhlbSB0byBlYXQgb2YgdGhlIHNhbWUgYnJlYWQgYW5kIGRyaW5rIG9mIHRoZSBzYW1lIHdpbmUuIFRoZXkgdG9sZCBWYWxlcml1cyBtYW55IG90aGVyIGluc3RhbmNlcyBvZiBDYXRvJ3MgZmFpcm5lc3MgYW5kIG1vZGVyYXRpb24sIHF1b3RpbmcgYWxzbyBzdW5kcnkgcGl0aHkgc2F5aW5ncyBvZiBoaXMsIHVudGlsIGF0IGxhc3QgVmFsZXJpdXMgZ2F2ZSBjb21tYW5kIHRoYXQgQ2F0byBiZSBpbnZpdGVkIHRvIGRpbmUgd2l0aCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGRpc2NvdmVyaW5nIGJ5IGNvbnZlcnNlIHdpdGggaGltIHRoYXQgaGlzIG5hdHVyZSB3YXMgZ2VudGxlIGFuZCBwb2xpdGUsIGFuZCBuZWVkZWQsIGxpa2UgYSBncm93aW5nIHRyZWUsIG9ubHkgY3VsdGl2YXRpb24gYW5kIHJvb20gdG8gZXhwYW5kLCBWYWxlcml1cyB1cmdlZCBhbmQgYXQgbGFzdCBwZXJzdWFkZWQgaGltIHRvIGVuZ2FnZSBpbiBwdWJsaWMgbGlmZSBhdCBSb21lLiBBY2NvcmRpbmdseSwgdGFraW5nIHVwIGhpcyBhYm9kZSBpbiB0aGUgY2l0eSwgaGlzIG93biBlZmZvcnRzIGFzIGFuIGFkdm9jYXRlIGF0IG9uY2Ugd29uIGhpbSBhZG1pcmluZyBmcmllbmRzLCBhbmQgdGhlIGZhdm91ciBvZiBWYWxlcml1cyBicm91Z2h0IGhpbSBncmVhdCBob25vdXIgYW5kIGluZmx1ZW5jZSwgc28gdGhhdCBoZSB3YXMgbWFkZSBtaWxpdGFyeSB0cmlidW5lIGZpcnN0LCBhbmQgdGhlbiBxdWFlc3Rvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYmVpbmcgbm93IGxhdW5jaGVkIG9uIGFuIGVtaW5lbnQgYW5kIGJyaWxsaWFudCBjYXJlZXIsIGhlIHNoYXJlZCB0aGUgaGlnaGVzdCBob25vdXJzIHdpdGggVmFsZXJpdXMsIGJlY29taW5nIGNvbnN1bCB3aXRoIGhpbSwgYW5kIGFmdGVyd2FyZHMgY2Vuc29yLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3YXMgYXQgUm9tZSBhIGNlcnRhaW4gbWFuIG9mIHRoZSBoaWdoZXN0IGJpcnRoIGFuZCBncmVhdGVzdCBpbmZsdWVuY2UsIHdobyBoYWQgdGhlIHBvd2VyIHRvIGRpc2Nlcm4gZXhjZWxsZW5jZSBpbiB0aGUgYnVkLCBhbmQgdGhlIGdyYWNlIHRvIGN1bHRpdmF0ZSBpdCBhbmQgYnJpbmcgaXQgaW50byBnZW5lcmFsIGVzdGVlbS4gVGhpcyBtYW4gd2FzIFZhbGVyaXVzIEZsYWNjdXMuIEhlIGhhZCBhIGZhcm0gbmV4dCB0byB0aGF0IG9mIENhdG8sIGFuZCBsZWFybmVkIGZyb20gQ2F0bydzIHNlcnZhbnRzIG9mIHRoZWlyIG1hc3RlcidzIGxhYm9yaW91cyBhbmQgZnJ1Z2FsIHdheSBvZiBsaXZpbmcuIEhlIHdhcyBhbWF6ZWQgdG8gaGVhciB0aGVtIHRlbGwgaG93IENhdG8sIGVhcmx5IGluIHRoZSBtb3JuaW5nLCB3ZW50IG9uIGZvb3QgdG8gdGhlIG1hcmtldC1wbGFjZSBhbmQgcGxlYWRlZCB0aGUgY2FzZXMgb2YgYWxsIHdobyB3aXNoZWQgaGlzIGFpZDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gY2FtZSBiYWNrIHRvIGhpcyBmYXJtLCB3aGVyZSwgY2xhZCBpbiBhIHdvcmtpbmcgYmxvdXNlIGlmIGl0IHdhcyB3aW50ZXIsIGFuZCBzdHJpcHBlZCB0byB0aGUgd2Fpc3QgaWYgaXQgd2FzIHN1bW1lciwgaGUgd3JvdWdodCB3aXRoIGhpcyBzZXJ2YW50cywgdGhlbiBzYXQgZG93biB3aXRoIHRoZW0gdG8gZWF0IG9mIHRoZSBzYW1lIGJyZWFkIGFuZCBkcmluayBvZiB0aGUgc2FtZSB3aW5lLiBUaGV5IHRvbGQgVmFsZXJpdXMgbWFueSBvdGhlciBpbnN0YW5jZXMgb2YgQ2F0bydzIGZhaXJuZXNzIGFuZCBtb2RlcmF0aW9uLCBxdW90aW5nIGFsc28gc3VuZHJ5IHBpdGh5IHNheWluZ3Mgb2YgaGlzLCB1bnRpbCBhdCBsYXN0IFZhbGVyaXVzIGdhdmUgY29tbWFuZCB0aGF0IENhdG8gYmUgaW52aXRlZCB0byBkaW5lIHdpdGggaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGRpc2NvdmVyaW5nIGJ5IGNvbnZlcnNlIHdpdGggaGltIHRoYXQgaGlzIG5hdHVyZSB3YXMgZ2VudGxlIGFuZCBwb2xpdGUsIGFuZCBuZWVkZWQsIGxpa2UgYSBncm93aW5nIHRyZWUsIG9ubHkgY3VsdGl2YXRpb24gYW5kIHJvb20gdG8gZXhwYW5kLCBWYWxlcml1cyB1cmdlZCBhbmQgYXQgbGFzdCBwZXJzdWFkZWQgaGltIHRvIGVuZ2FnZSBpbiBwdWJsaWMgbGlmZSBhdCBSb21lLiBBY2NvcmRpbmdseSwgdGFraW5nIHVwIGhpcyBhYm9kZSBpbiB0aGUgY2l0eSwgaGlzIG93biBlZmZvcnRzIGFzIGFuIGFkdm9jYXRlIGF0IG9uY2Ugd29uIGhpbSBhZG1pcmluZyBmcmllbmRzLCBhbmQgdGhlIGZhdm91ciBvZiBWYWxlcml1cyBicm91Z2h0IGhpbSBncmVhdCBob25vdXIgYW5kIGluZmx1ZW5jZSwgc28gdGhhdCBoZSB3YXMgbWFkZSBtaWxpdGFyeSB0cmlidW5lIGZpcnN0LCBhbmQgdGhlbiBxdWFlc3Rvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGJlaW5nIG5vdyBsYXVuY2hlZCBvbiBhbiBlbWluZW50IGFuZCBicmlsbGlhbnQgY2FyZWVyLCBoZSBzaGFyZWQgdGhlIGhpZ2hlc3QgaG9ub3VycyB3aXRoIFZhbGVyaXVzLCBiZWNvbWluZyBjb25zdWwgd2l0aCBoaW0sIGFuZCBhZnRlcndhcmRzIGNlbnNvci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5PZiB0aGUgZWxkZXIgc3RhdGVzbWVuLCBoZSBhdHRhY2hlZCBoaW1zZWxmIG1vc3QgY2xvc2VseSB0byBGYWJpdXMgTWF4aW11cywgd2hvIHdhcyBvZiB0aGUgaGlnaGVzdCByZXB1dGF0aW9uIGFuZCBoYWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSwgYnV0IHRoaXMgd2FzIG1vcmUgYnkgd2F5IG9mIHNldHRpbmcgYmVmb3JlIGhpbXNlbGYgdGhlIGNoYXJhY3RlciBhbmQgbGlmZSBvZiB0aGUgbWFuIGFzIHRoZSBmYWlyZXN0IGV4YW1wbGVzIGhlIGNvdWxkIGZvbGxvdy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2FtZSBzcGlyaXQgaGUgZGlkIG5vdCBoZXNpdGF0ZSB0byBvcHBvc2UgdGhlIGdyZWF0IFNjaXBpbywgYSB5b3V0aGZ1bCByaXZhbCBvZiBGYWJpdXMsIGFuZCB0aG91Z2h0IHRvIGJlIGVudmlvdXMgb2YgaGltLiBXaGVuIGhlIHdhcyBzZW50IG91dCB3aXRoIFNjaXBpbyBhcyBxdWFlc3RvciBmb3IgdGhlIHdhciBpbiBBZnJpY2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjA0IEIuQy48L25vdGU+IGhlIHNhdyB0aGF0IHRoZSBtYW4gaW5kdWxnZWQgaW4gaGlzIHdvbnRlZCBleHRyYXZhZ2FuY2UsIGFuZCBsYXZpc2hlZCBtb25leSB3aXRob3V0IHN0aW50IHVwb24gaGlzIHNvbGRpZXJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0aGVyZWZvcmUgbWFkZSBib2xkIHRvIHRlbGwgaGltIHRoYXQgdGhlIG1hdHRlciBvZiBleHBlbnNlIHdhcyBub3QgdGhlIGdyZWF0ZXN0IGV2aWwgdG8gYmUgY29tcGxhaW5lZCBvZiwgYnV0IHRoZSBmYWN0IHRoYXQgaGUgd2FzIGNvcnJ1cHRpbmcgdGhlIG5hdGl2ZSBzaW1wbGljaXR5IG9mIGhpcyBzb2xkaWVycywgd2hvIHJlc29ydGVkIHRvIHdhbnRvbiBwbGVhc3VyZXMgd2hlbiB0aGVpciBwYXkgZXhjZWVkZWQgdGhlaXIgYWN0dWFsIG5lZWRzLiBTY2lwaW8gcmVwbGllZCB0aGF0IGhlIGhhZCBubyB1c2UgZm9yIGEgcGFyc2ltb25pb3VzIHF1YWVzdG9yIHdoZW4gdGhlIHdpbmRzIHdlcmUgYmVhcmluZyBoaW0gdW5kZXIgZnVsbCBzYWlsIHRvIHRoZSB3YXI7IGhlIG93ZWQgdGhlIGNpdHkgYW4gYWNjb3VudCBvZiBoaXMgYWNoaWV2ZW1lbnRzLCBub3Qgb2YgaXRzIG1vbmV5cy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byB0aGVyZWZvcmUgbGVmdCBTaWNpbHksIGFuZCBqb2luZWQgRmFiaXVzIGluIGRlbm91bmNpbmcgYmVmb3JlIHRoZSBTZW5hdGUgU2NpcGlvJ3Mgd2FzdGUgb2YgZW5vcm1vdXMgbW9uZXlzLCBhbmQgaGlzIGJveWlzaCBhZGRpY3Rpb24gdG8gcGFsYWVzdHJhcyBhbmQgdGhlYXRyZXMsIGFzIHRob3VnaCBoZSB3ZXJlIG5vdCBjb21tYW5kZXIgb2YgYW4gYXJteSwgYnV0IG1hc3RlciBvZiBhIGZlc3RpdmFsLiBBcyBhIHJlc3VsdCBvZiB0aGVzZSBhdHRhY2tzLCB0cmlidW5lcyB3ZXJlIHNlbnQgdG8gYnJpbmcgU2NpcGlvIGJhY2sgdG8gUm9tZSwgaWYgdGhlIGNoYXJnZXMgYWdhaW5zdCBoaW0gc2hvdWxkIHR1cm4gb3V0IHRvIGJlIHRydWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgU2NpcGlvIGNvbnZpbmNlZCB0aGUgdHJpYnVuZXMgdGhhdCB2aWN0b3J5IGluIHdhciBkZXBlbmRlZCBvbiB0aGUgcHJlcGFyYXRpb25zIG1hZGUgZm9yIGl0OyBzaG93ZWQgdGhhdCBoZSBjb3VsZCBiZSBhZ3JlZWFibGUgaW4gaGlzIGludGVyY291cnNlIHdpdGggaGlzIGZyaWVuZHMgd2hlbiBoZSBoYWQgbGVpc3VyZSBmb3IgaXQsIGJ1dCB3YXMgbmV2ZXIgbGVkIGJ5IGhpcyBzb2NpYWJpbGl0eSB0byBuZWdsZWN0IG1hdHRlcnMgb2YgbGFyZ2UgYW5kIHNlcmlvdXMgaW1wb3J0OyBhbmQgc2FpbGVkIG9mZiBmb3IgaGlzIHdhciBpbiBBZnJpY2EuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzYW1lIHNwaXJpdCBoZSBkaWQgbm90IGhlc2l0YXRlIHRvIG9wcG9zZSB0aGUgZ3JlYXQgU2NpcGlvLCBhIHlvdXRoZnVsIHJpdmFsIG9mIEZhYml1cywgYW5kIHRob3VnaHQgdG8gYmUgZW52aW91cyBvZiBoaW0uIFdoZW4gaGUgd2FzIHNlbnQgb3V0IHdpdGggU2NpcGlvIGFzIHF1YWVzdG9yIGZvciB0aGUgd2FyIGluIEFmcmljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwNCBCLkMuPC9ub3RlPiBoZSBzYXcgdGhhdCB0aGUgbWFuIGluZHVsZ2VkIGluIGhpcyB3b250ZWQgZXh0cmF2YWdhbmNlLCBhbmQgbGF2aXNoZWQgbW9uZXkgd2l0aG91dCBzdGludCB1cG9uIGhpcyBzb2xkaWVyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBtYWRlIGJvbGQgdG8gdGVsbCBoaW0gdGhhdCB0aGUgbWF0dGVyIG9mIGV4cGVuc2Ugd2FzIG5vdCB0aGUgZ3JlYXRlc3QgZXZpbCB0byBiZSBjb21wbGFpbmVkIG9mLCBidXQgdGhlIGZhY3QgdGhhdCBoZSB3YXMgY29ycnVwdGluZyB0aGUgbmF0aXZlIHNpbXBsaWNpdHkgb2YgaGlzIHNvbGRpZXJzLCB3aG8gcmVzb3J0ZWQgdG8gd2FudG9uIHBsZWFzdXJlcyB3aGVuIHRoZWlyIHBheSBleGNlZWRlZCB0aGVpciBhY3R1YWwgbmVlZHMuIFNjaXBpbyByZXBsaWVkIHRoYXQgaGUgaGFkIG5vIHVzZSBmb3IgYSBwYXJzaW1vbmlvdXMgcXVhZXN0b3Igd2hlbiB0aGUgd2luZHMgd2VyZSBiZWFyaW5nIGhpbSB1bmRlciBmdWxsIHNhaWwgdG8gdGhlIHdhcjsgaGUgb3dlZCB0aGUgY2l0eSBhbiBhY2NvdW50IG9mIGhpcyBhY2hpZXZlbWVudHMsIG5vdCBvZiBpdHMgbW9uZXlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gdGhlcmVmb3JlIGxlZnQgU2ljaWx5LCBhbmQgam9pbmVkIEZhYml1cyBpbiBkZW5vdW5jaW5nIGJlZm9yZSB0aGUgU2VuYXRlIFNjaXBpbydzIHdhc3RlIG9mIGVub3Jtb3VzIG1vbmV5cywgYW5kIGhpcyBib3lpc2ggYWRkaWN0aW9uIHRvIHBhbGFlc3RyYXMgYW5kIHRoZWF0cmVzLCBhcyB0aG91Z2ggaGUgd2VyZSBub3QgY29tbWFuZGVyIG9mIGFuIGFybXksIGJ1dCBtYXN0ZXIgb2YgYSBmZXN0aXZhbC4gQXMgYSByZXN1bHQgb2YgdGhlc2UgYXR0YWNrcywgdHJpYnVuZXMgd2VyZSBzZW50IHRvIGJyaW5nIFNjaXBpbyBiYWNrIHRvIFJvbWUsIGlmIHRoZSBjaGFyZ2VzIGFnYWluc3QgaGltIHNob3VsZCB0dXJuIG91dCB0byBiZSB0cnVlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgU2NpcGlvIGNvbnZpbmNlZCB0aGUgdHJpYnVuZXMgdGhhdCB2aWN0b3J5IGluIHdhciBkZXBlbmRlZCBvbiB0aGUgcHJlcGFyYXRpb25zIG1hZGUgZm9yIGl0OyBzaG93ZWQgdGhhdCBoZSBjb3VsZCBiZSBhZ3JlZWFibGUgaW4gaGlzIGludGVyY291cnNlIHdpdGggaGlzIGZyaWVuZHMgd2hlbiBoZSBoYWQgbGVpc3VyZSBmb3IgaXQsIGJ1dCB3YXMgbmV2ZXIgbGVkIGJ5IGhpcyBzb2NpYWJpbGl0eSB0byBuZWdsZWN0IG1hdHRlcnMgb2YgbGFyZ2UgYW5kIHNlcmlvdXMgaW1wb3J0OyBhbmQgc2FpbGVkIG9mZiBmb3IgaGlzIHdhciBpbiBBZnJpY2EuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGluZmx1ZW5jZSB3aGljaCBDYXRvJ3Mgb3JhdG9yeSB3b24gZm9yIGhpbSB3YXhlZCBncmVhdCwgYW5kIG1lbiBjYWxsZWQgaGltIGEgUm9tYW4gRGVtb3N0aGVuZXM7IGJ1dCBoaXMgbWFubmVyIG9mIGxpZmUgd2FzIGV2ZW4gbW9yZSB0YWxrZWQgYWJvdXQgYW5kIG5vaXNlZCBhYnJvYWQuIEZvciBoaXMgb3JhdG9yaWNhbCBhYmlsaXR5IG9ubHkgc2V0IGJlZm9yZSB5b3VuZyBtZW4gYSBnb2FsIHdoaWNoIG1hbnkgYWxyZWFkeSB3ZXJlIHN0cml2aW5nIGVhZ2VybHkgdG8gYXR0YWluOyBidXQgYSBtYW4gd2hvIHdyb3VnaHQgd2l0aCBoaXMgb3duIGhhbmRzLCBhcyBoaXMgZmF0aGVycyBkaWQsIGFuZCB3YXMgY29udGVudGVkIHdpdGggYSBjb2xkIGJyZWFrZmFzdCwgYSBmcnVnYWwgZGlubmVyLCBzaW1wbGUgcmFpbWVudCwgYW5kIGEgaHVtYmxlIGR3ZWxsaW5nLOKAlG9uZSB3aG8gdGhvdWdodCBtb3JlIG9mIG5vdCB3YW50aW5nIHRoZSBzdXBlcmZsdWl0aWVzIG9mIGxpZmUgdGhhbiBvZiBwb3NzZXNzaW5nIHRoZW0s4oCUc3VjaCBhIG1hbiB3YXMgcmFyZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbW1vbndlYWx0aCBoYWQgbm93IGdyb3duIHRvbyBsYXJnZSB0byBrZWVwIGl0cyBwcmltaXRpdmUgaW50ZWdyaXR5OyB0aGUgc3dheSBvdmVyIG1hbnkgcmVhbG1zIGFuZCBwZW9wbGVzIGhhZCBicm91Z2h0IGEgbGFyZ2UgYWRtaXh0dXJlIG9mIGN1c3RvbXMsIGFuZCB0aGUgYWRvcHRpb24gb2YgZXhhbXBsZXMgc2V0IGluIG1vZGVzIG9mIGxpZmUgb2YgZXZlcnkgc29ydC4gSXQgd2FzIG5hdHVyYWwsIHRoZXJlZm9yZSwgdGhhdCBtZW4gc2hvdWxkIGFkbWlyZSBDYXRvLCB3aGVuIHRoZXkgc2F3IHRoYXQsIHdoZXJlYXMgb3RoZXIgbWVuIHdlcmUgYnJva2VuIGRvd24gYnkgdG9pbHMgYW5kIGVuZXJ2YXRlZCBieSBwbGVhc3VyZXMsIGhlIHdhcyB2aWN0b3Igb3ZlciBib3RoLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhpcyB0b28sIG5vdCBvbmx5IHdoaWxlIGhlIHdhcyBzdGlsbCB5b3VuZyBhbmQgYW1iaXRpb3VzLCBidXQgZXZlbiBpbiBoaXMgaG9hcnkgYWdlLCBhZnRlciBjb25zdWxzaGlwIGFuZCB0cml1bXBoLiBUaGVuLCBsaWtlIHNvbWUgdmljdG9yaW91cyBhdGhsZXRlLCBoZSBwZXJzaXN0ZWQgaW4gdGhlIHJlZ2ltZW4gb2YgaGlzIHRyYWluaW5nLCBhbmQga2VwdCBoaXMgbWluZCB1bmFsdGVyZWQgdG8gdGhlIGxhc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgaW5mbHVlbmNlIHdoaWNoIENhdG8ncyBvcmF0b3J5IHdvbiBmb3IgaGltIHdheGVkIGdyZWF0LCBhbmQgbWVuIGNhbGxlZCBoaW0gYSBSb21hbiBEZW1vc3RoZW5lczsgYnV0IGhpcyBtYW5uZXIgb2YgbGlmZSB3YXMgZXZlbiBtb3JlIHRhbGtlZCBhYm91dCBhbmQgbm9pc2VkIGFicm9hZC4gRm9yIGhpcyBvcmF0b3JpY2FsIGFiaWxpdHkgb25seSBzZXQgYmVmb3JlIHlvdW5nIG1lbiBhIGdvYWwgd2hpY2ggbWFueSBhbHJlYWR5IHdlcmUgc3RyaXZpbmcgZWFnZXJseSB0byBhdHRhaW47IGJ1dCBhIG1hbiB3aG8gd3JvdWdodCB3aXRoIGhpcyBvd24gaGFuZHMsIGFzIGhpcyBmYXRoZXJzIGRpZCwgYW5kIHdhcyBjb250ZW50ZWQgd2l0aCBhIGNvbGQgYnJlYWtmYXN0LCBhIGZydWdhbCBkaW5uZXIsIHNpbXBsZSByYWltZW50LCBhbmQgYSBodW1ibGUgZHdlbGxpbmcs4oCUb25lIHdobyB0aG91Z2h0IG1vcmUgb2Ygbm90IHdhbnRpbmcgdGhlIHN1cGVyZmx1aXRpZXMgb2YgbGlmZSB0aGFuIG9mIHBvc3Nlc3NpbmcgdGhlbSzigJRzdWNoIGEgbWFuIHdhcyByYXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb21tb253ZWFsdGggaGFkIG5vdyBncm93biB0b28gbGFyZ2UgdG8ga2VlcCBpdHMgcHJpbWl0aXZlIGludGVncml0eTsgdGhlIHN3YXkgb3ZlciBtYW55IHJlYWxtcyBhbmQgcGVvcGxlcyBoYWQgYnJvdWdodCBhIGxhcmdlIGFkbWl4dHVyZSBvZiBjdXN0b21zLCBhbmQgdGhlIGFkb3B0aW9uIG9mIGV4YW1wbGVzIHNldCBpbiBtb2RlcyBvZiBsaWZlIG9mIGV2ZXJ5IHNvcnQuIEl0IHdhcyBuYXR1cmFsLCB0aGVyZWZvcmUsIHRoYXQgbWVuIHNob3VsZCBhZG1pcmUgQ2F0bywgd2hlbiB0aGV5IHNhdyB0aGF0LCB3aGVyZWFzIG90aGVyIG1lbiB3ZXJlIGJyb2tlbiBkb3duIGJ5IHRvaWxzIGFuZCBlbmVydmF0ZWQgYnkgcGxlYXN1cmVzLCBoZSB3YXMgdmljdG9yIG92ZXIgYm90aCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGlzIHRvbywgbm90IG9ubHkgd2hpbGUgaGUgd2FzIHN0aWxsIHlvdW5nIGFuZCBhbWJpdGlvdXMsIGJ1dCBldmVuIGluIGhpcyBob2FyeSBhZ2UsIGFmdGVyIGNvbnN1bHNoaXAgYW5kIHRyaXVtcGguIFRoZW4sIGxpa2Ugc29tZSB2aWN0b3Jpb3VzIGF0aGxldGUsIGhlIHBlcnNpc3RlZCBpbiB0aGUgcmVnaW1lbiBvZiBoaXMgdHJhaW5pbmcsIGFuZCBrZXB0IGhpcyBtaW5kIHVuYWx0ZXJlZCB0byB0aGUgbGFzdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSB0ZWxscyB1cyB0aGF0IGhlIG5ldmVyIHdvcmUgY2xvdGhpbmcgd29ydGggbW9yZSB0aGFuIGEgaHVuZHJlZCBkcmFjaG1hczsgdGhhdCBoZSBkcmFuaywgZXZlbiB3aGVuIGhlIHdhcyBwcmFldG9yIG9yIGNvbnN1bCwgdGhlIHNhbWUgd2luZSBhcyBoaXMgc2xhdmVzOyB0aGF0IGFzIGZvciBmaXNoIGFuZCBtZWF0cywgaGUgd291bGQgYnV5IHRoaXJ0eSBhc3Nlcycgd29ydGg8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmFzPC9lbXBoPiBjb3JyZXNwb25kZWQgbmVhcmx5IHRvIHRoZSBFbmdsaXNoIHBlbm55Ljwvbm90ZT4gZm9yIGhpcyBkaW5uZXIgZnJvbSB0aGUgcHVibGljIHN0YWxscywgYW5kIGV2ZW4gdGhpcyBmb3IgdGhlIGNpdHkncyBzYWtlLCB0aGF0IGhlIG1pZ2h0IG5vdCBsaXZlIG9uIGJyZWFkIGFsb25lLCBidXQgc3RyZW5ndGhlbiBoaXMgYm9keSBmb3IgbWlsaXRhcnkgc2VydmljZTsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IGhlIG9uY2UgZmVsbCBoZWlyIHRvIGFuIGVtYnJvaWRlcmVkIEJhYnlsb25pYW4gcm9iZSwgYnV0IHNvbGQgaXQgYXQgb25jZTsgdGhhdCBub3QgYSBzaW5nbGUgb25lIG9mIGhpcyBjb3R0YWdlcyBoYWQgcGxhc3RlcmVkIHdhbGxzOyB0aGF0IGhlIG5ldmVyIHBhaWQgbW9yZSB0aGFuIGZpZnRlZW4gaHVuZHJlZCBkcmFjaG1hcyBmb3IgYSBzbGF2ZSwgc2luY2UgaGUgZGlkIG5vdCB3YW50IHRoZW0gdG8gYmUgZGVsaWNhdGVseSBiZWF1dGlmdWwsIGJ1dCBzdHVyZHkgd29ya2Vycywgc3VjaCBhcyBncm9vbXMgYW5kIGhlcmRzbWVuLCBhbmQgdGhlc2UgaGUgdGhvdWdodCBpdCBoaXMgZHV0eSB0byBzZWxsIHdoZW4gdGhleSBnb3Qgb2xkaXNoLCBpbnN0ZWFkIG9mIGZlZWRpbmcgdGhlbSB3aGVuIHRoZXkgd2VyZSB1c2VsZXNzOyBhbmQgdGhhdCBpbiBnZW5lcmFsLCBoZSB0aG91Z2h0IG5vdGhpbmcgY2hlYXAgdGhhdCBvbmUgY291bGQgZG8gd2l0aG91dCwgYnV0IHRoYXQgd2hhdCBvbmUgZGlkIG5vdCBuZWVkLCBldmVuIGlmIGl0IGNvc3QgYnV0IGEgcGVubnksIHdhcyBkZWFyOyBhbHNvIHRoYXQgaGUgYm91Z2h0IGxhbmRzIHdoZXJlIGNyb3BzIHdlcmUgcmFpc2VkIGFuZCBjYXR0bGUgaGVyZGVkLCBub3QgdGhvc2Ugd2hlcmUgbGF3bnMgd2VyZSBzcHJpbmtsZWQgYW5kIHBhdGhzIHN3ZXB0LgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YXM8L2VtcGg+IGNvcnJlc3BvbmRlZCBuZWFybHkgdG8gdGhlIEVuZ2xpc2ggcGVubnkuPC9ub3RlPiBmb3IgaGlzIGRpbm5lciBmcm9tIHRoZSBwdWJsaWMgc3RhbGxzLCBhbmQgZXZlbiB0aGlzIGZvciB0aGUgY2l0eSdzIHNha2UsIHRoYXQgaGUgbWlnaHQgbm90IGxpdmUgb24gYnJlYWQgYWxvbmUsIGJ1dCBzdHJlbmd0aGVuIGhpcyBib2R5IGZvciBtaWxpdGFyeSBzZXJ2aWNlOyAKCQkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YXM8L2VtcGg+IGNvcnJlc3BvbmRlZCBuZWFybHkgdG8gdGhlIEVuZ2xpc2ggcGVubnkuPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgaGUgb25jZSBmZWxsIGhlaXIgdG8gYW4gZW1icm9pZGVyZWQgQmFieWxvbmlhbiByb2JlLCBidXQgc29sZCBpdCBhdCBvbmNlOyB0aGF0IG5vdCBhIHNpbmdsZSBvbmUgb2YgaGlzIGNvdHRhZ2VzIGhhZCBwbGFzdGVyZWQgd2FsbHM7IHRoYXQgaGUgbmV2ZXIgcGFpZCBtb3JlIHRoYW4gZmlmdGVlbiBodW5kcmVkIGRyYWNobWFzIGZvciBhIHNsYXZlLCBzaW5jZSBoZSBkaWQgbm90IHdhbnQgdGhlbSB0byBiZSBkZWxpY2F0ZWx5IGJlYXV0aWZ1bCwgYnV0IHN0dXJkeSB3b3JrZXJzLCBzdWNoIGFzIGdyb29tcyBhbmQgaGVyZHNtZW4sIGFuZCB0aGVzZSBoZSB0aG91Z2h0IGl0IGhpcyBkdXR5IHRvIHNlbGwgd2hlbiB0aGV5IGdvdCBvbGRpc2gsIGluc3RlYWQgb2YgZmVlZGluZyB0aGVtIHdoZW4gdGhleSB3ZXJlIHVzZWxlc3M7IGFuZCB0aGF0IGluIGdlbmVyYWwsIGhlIHRob3VnaHQgbm90aGluZyBjaGVhcCB0aGF0IG9uZSBjb3VsZCBkbyB3aXRob3V0LCBidXQgdGhhdCB3aGF0IG9uZSBkaWQgbm90IG5lZWQsIGV2ZW4gaWYgaXQgY29zdCBidXQgYSBwZW5ueSwgd2FzIGRlYXI7IGFsc28gdGhhdCBoZSBib3VnaHQgbGFuZHMgd2hlcmUgY3JvcHMgd2VyZSByYWlzZWQgYW5kIGNhdHRsZSBoZXJkZWQsIG5vdCB0aG9zZSB3aGVyZSBsYXducyB3ZXJlIHNwcmlua2xlZCBhbmQgcGF0aHMgc3dlcHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIHdlcmUgYXNjcmliZWQgYnkgc29tZSB0byB0aGUgbWFuJ3MgcGFyc2ltb255OyBidXQgb3RoZXJzIGNvbmRvbmVkIHRoZW0gaW4gdGhlIGJlbGllZiB0aGF0IGhlIGxpdmVkIGluIHRoaXMgY29udHJhY3RlZCB3YXkgb25seSB0byBjb3JyZWN0IGFuZCBtb2RlcmF0ZSB0aGUgZXh0cmF2YWdhbmNlIG9mIG90aGVycy4gSG93ZXZlciwgZm9yIG15IHBhcnQsIEkgcmVnYXJkIGhpcyB0cmVhdG1lbnQgb2YgaGlzIHNsYXZlcyBsaWtlIGJlYXN0cyBvZiBidXJkZW4sIHVzaW5nIHRoZW0gdG8gdGhlIHV0dGVybW9zdCwgYW5kIHRoZW4sIHdoZW4gdGhleSB3ZXJlIG9sZCwgZHJpdmluZyB0aGVtIG9mZiBhbmQgc2VsbGluZyB0aGVtLCBhcyB0aGUgbWFyayBvZiBhIHZlcnkgbWVhbiBuYXR1cmUsIHdoaWNoIHJlY29nbml6ZXMgbm8gdGllIGJldHdlZW4gbWFuIGFuZCBtYW4gYnV0IHRoYXQgb2YgbmVjZXNzaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHdlIGtub3cgdGhhdCBraW5kbmVzcyBoYXMgYSB3aWRlciBzY29wZSB0aGFuIGp1c3RpY2UuIExhdyBhbmQganVzdGljZSB3ZSBuYXR1cmFsbHkgYXBwbHkgdG8gbWVuIGFsb25lOyBidXQgd2hlbiBpdCBjb21lcyB0byBiZW5lZmljZW5jZSBhbmQgY2hhcml0eSwgdGhlc2Ugb2Z0ZW4gZmxvdyBpbiBzdHJlYW1zIGZyb20gdGhlIGdlbnRsZSBoZWFydCwgbGlrZSB3YXRlciBmcm9tIGEgY29waW91cyBzcHJpbmcsIGV2ZW4gZG93biB0byBkdW1iIGJlYXN0cy4gQSBraW5kbHkgbWFuIHdpbGwgdGFrZSBnb29kIGNhcmUgb2YgaGlzIGhvcnNlcyBldmVuIHdoZW4gdGhleSBhcmUgd29ybiBvdXQgd2l0aCBhZ2UsIGFuZCBvZiBoaXMgZG9ncywgdG9vLCBub3Qgb25seSBpbiB0aGVpciBwdXBweWhvb2QsIGJ1dCB3aGVuIHRoZWlyIG9sZCBhZ2UgbmVlZHMgbnVyc2luZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB0aGluZ3Mgd2VyZSBhc2NyaWJlZCBieSBzb21lIHRvIHRoZSBtYW4ncyBwYXJzaW1vbnk7IGJ1dCBvdGhlcnMgY29uZG9uZWQgdGhlbSBpbiB0aGUgYmVsaWVmIHRoYXQgaGUgbGl2ZWQgaW4gdGhpcyBjb250cmFjdGVkIHdheSBvbmx5IHRvIGNvcnJlY3QgYW5kIG1vZGVyYXRlIHRoZSBleHRyYXZhZ2FuY2Ugb2Ygb3RoZXJzLiBIb3dldmVyLCBmb3IgbXkgcGFydCwgSSByZWdhcmQgaGlzIHRyZWF0bWVudCBvZiBoaXMgc2xhdmVzIGxpa2UgYmVhc3RzIG9mIGJ1cmRlbiwgdXNpbmcgdGhlbSB0byB0aGUgdXR0ZXJtb3N0LCBhbmQgdGhlbiwgd2hlbiB0aGV5IHdlcmUgb2xkLCBkcml2aW5nIHRoZW0gb2ZmIGFuZCBzZWxsaW5nIHRoZW0sIGFzIHRoZSBtYXJrIG9mIGEgdmVyeSBtZWFuIG5hdHVyZSwgd2hpY2ggcmVjb2duaXplcyBubyB0aWUgYmV0d2VlbiBtYW4gYW5kIG1hbiBidXQgdGhhdCBvZiBuZWNlc3NpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgd2Uga25vdyB0aGF0IGtpbmRuZXNzIGhhcyBhIHdpZGVyIHNjb3BlIHRoYW4ganVzdGljZS4gTGF3IGFuZCBqdXN0aWNlIHdlIG5hdHVyYWxseSBhcHBseSB0byBtZW4gYWxvbmU7IGJ1dCB3aGVuIGl0IGNvbWVzIHRvIGJlbmVmaWNlbmNlIGFuZCBjaGFyaXR5LCB0aGVzZSBvZnRlbiBmbG93IGluIHN0cmVhbXMgZnJvbSB0aGUgZ2VudGxlIGhlYXJ0LCBsaWtlIHdhdGVyIGZyb20gYSBjb3Bpb3VzIHNwcmluZywgZXZlbiBkb3duIHRvIGR1bWIgYmVhc3RzLiBBIGtpbmRseSBtYW4gd2lsbCB0YWtlIGdvb2QgY2FyZSBvZiBoaXMgaG9yc2VzIGV2ZW4gd2hlbiB0aGV5IGFyZSB3b3JuIG91dCB3aXRoIGFnZSwgYW5kIG9mIGhpcyBkb2dzLCB0b28sIG5vdCBvbmx5IGluIHRoZWlyIHB1cHB5aG9vZCwgYnV0IHdoZW4gdGhlaXIgb2xkIGFnZSBuZWVkcyBudXJzaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGUgQXRoZW5pYW5zIHdlcmUgYnVpbGRpbmcgdGhlIFBhcnRoZW5vbiwgdGhleSB0dXJuZWQgbG9vc2UgZm9yIGZyZWUgYW5kIHVucmVzdHJpY3RlZCBwYXN0dXJhZ2Ugc3VjaCBtdWxlcyBhcyB3ZXJlIHNlZW4gdG8gYmUgbW9zdCBwZXJzaXN0ZW50bHkgbGFib3Jpb3VzLiBPbmUgb2YgdGhlc2UsIHRoZXkgc2F5LCBjYW1lIGJhY2sgdG8gdGhlIHdvcmtzIG9mIGl0cyBvd24gYWNjb3JkLCB0cm90dGVkIGFsb25nIGJ5IHRoZSBzaWRlIG9mIGl0cyBmZWxsb3dzIHVuZGVyIHRoZSB5b2tlLCB3aGljaCB3ZXJlIGRyYWdnaW5nIHRoZSB3YWdnb25zIHVwIHRvIHRoZSBBY3JvcG9saXMsIGFuZCBldmVuIGxlZCB0aGUgd2F5IGZvciB0aGVtLCBhcyB0aG91Z2ggZXhob3J0aW5nIGFuZCBpbmNpdGluZyB0aGVtIG9uLiBUaGUgQXRoZW5pYW5zIHBhc3NlZCBhIGRlY3JlZSB0aGF0IHRoZSBhbmltYWwgYmUgbWFpbnRhaW5lZCBhdCB0aGUgcHVibGljIGNvc3QgYXMgbG9uZyBhcyBpdCBsaXZlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGVyZSB3ZXJlIHRoZSBtYXJlcyBvZiBDaW1vbiwgd2l0aCB3aGljaCBoZSB3b24gdGhyZWUgdmljdG9yaWVzIGF0IE9seW1waWE7IHRoZWlyIGdyYXZlcyBhcmUgbmVhciB0aGUgdG9tYnMgb2YgaGlzIGZhbWlseS4gRG9ncyBhbHNvIHRoYXQgaGF2ZSBiZWVuIGNsb3NlIGFuZCBjb25zdGFudCBjb21wYW5pb25zIG9mIG1lbiwgaGF2ZSBvZnRlbiBiZWVuIGJ1cmllZCB3aXRoIGhvbm91ci4gWGFudGhpcHB1cywgb2Ygb2xkZW4gdGltZSwgZ2F2ZSB0aGUgZG9nIHdoaWNoIHN3YW0gYWxvbmcgYnkgdGhlIHNpZGUgb2YgaGlzIHRyaXJlbWUgdG8gU2FsYW1pcywgd2hlbiB0aGUgcGVvcGxlIHdlcmUgYWJhbmRvbmluZyB0aGVpciBjaXR5LCBob25vdXJhYmxlIGJ1cmlhbCBvbiB0aGUgcHJvbW9udG9yeSB3aGljaCBpcyBjYWxsZWQgdG8gdGhpcyBkYXkgQ3lub3NzZW1hLCBvciBEb2cncyBNb3VuZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDEwLjYiIHZhbGlkPSJ5ZXMiPkNmLiA8dGl0bGU+VGhlbWlzdG9jbGVzPC90aXRsZT4geC4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBBdGhlbmlhbnMgd2VyZSBidWlsZGluZyB0aGUgUGFydGhlbm9uLCB0aGV5IHR1cm5lZCBsb29zZSBmb3IgZnJlZSBhbmQgdW5yZXN0cmljdGVkIHBhc3R1cmFnZSBzdWNoIG11bGVzIGFzIHdlcmUgc2VlbiB0byBiZSBtb3N0IHBlcnNpc3RlbnRseSBsYWJvcmlvdXMuIE9uZSBvZiB0aGVzZSwgdGhleSBzYXksIGNhbWUgYmFjayB0byB0aGUgd29ya3Mgb2YgaXRzIG93biBhY2NvcmQsIHRyb3R0ZWQgYWxvbmcgYnkgdGhlIHNpZGUgb2YgaXRzIGZlbGxvd3MgdW5kZXIgdGhlIHlva2UsIHdoaWNoIHdlcmUgZHJhZ2dpbmcgdGhlIHdhZ2dvbnMgdXAgdG8gdGhlIEFjcm9wb2xpcywgYW5kIGV2ZW4gbGVkIHRoZSB3YXkgZm9yIHRoZW0sIGFzIHRob3VnaCBleGhvcnRpbmcgYW5kIGluY2l0aW5nIHRoZW0gb24uIFRoZSBBdGhlbmlhbnMgcGFzc2VkIGEgZGVjcmVlIHRoYXQgdGhlIGFuaW1hbCBiZSBtYWludGFpbmVkIGF0IHRoZSBwdWJsaWMgY29zdCBhcyBsb25nIGFzIGl0IGxpdmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlcmUgd2VyZSB0aGUgbWFyZXMgb2YgQ2ltb24sIHdpdGggd2hpY2ggaGUgd29uIHRocmVlIHZpY3RvcmllcyBhdCBPbHltcGlhOyB0aGVpciBncmF2ZXMgYXJlIG5lYXIgdGhlIHRvbWJzIG9mIGhpcyBmYW1pbHkuIERvZ3MgYWxzbyB0aGF0IGhhdmUgYmVlbiBjbG9zZSBhbmQgY29uc3RhbnQgY29tcGFuaW9ucyBvZiBtZW4sIGhhdmUgb2Z0ZW4gYmVlbiBidXJpZWQgd2l0aCBob25vdXIuIFhhbnRoaXBwdXMsIG9mIG9sZGVuIHRpbWUsIGdhdmUgdGhlIGRvZyB3aGljaCBzd2FtIGFsb25nIGJ5IHRoZSBzaWRlIG9mIGhpcyB0cmlyZW1lIHRvIFNhbGFtaXMsIHdoZW4gdGhlIHBlb3BsZSB3ZXJlIGFiYW5kb25pbmcgdGhlaXIgY2l0eSwgaG9ub3VyYWJsZSBidXJpYWwgb24gdGhlIHByb21vbnRvcnkgd2hpY2ggaXMgY2FsbGVkIHRvIHRoaXMgZGF5IEN5bm9zc2VtYSwgb3IgRG9nJ3MgTW91bmQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMTAuNiIgdmFsaWQ9InllcyI+Q2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+IHguIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDEwLjYiIHZhbGlkPSJ5ZXMiPkNmLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiB4LiA2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4geC4gNi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XZSBzaG91bGQgbm90IHRyZWF0IGxpdmluZyBjcmVhdHVyZXMgbGlrZSBzaG9lcyBvciBwb3RzIGFuZCBwYW5zLCBjYXN0aW5nIHRoZW0gYXNpZGUgd2hlbiB0aGV5IGFyZSBicnVpc2VkIGFuZCB3b3JuIG91dCB3aXRoIHNlcnZpY2UsIGJ1dCwgaWYgZm9yIG5vIG90aGVyIHJlYXNvbiwgZm9yIHRoZSBzYWtlIG9mIHByYWN0aWNlIGluIGtpbmRuZXNzIHRvIG91ciBmZWxsb3cgbWVuLCB3ZSBzaG91bGQgYWNjdXN0b20gb3Vyc2VsdmVzIHRvIG1pbGRuZXNzIGFuZCBnZW50bGVuZXNzIGluIG91ciBkZWFsaW5ncyB3aXRoIG90aGVyIGNyZWF0dXJlcy4gSSBjZXJ0YWlubHkgd291bGQgbm90IHNlbGwgZXZlbiBhbiBveCB0aGF0IGhhZCB3b3JrZWQgZm9yIG1lLCBqdXN0IGJlY2F1c2UgaGUgd2FzIG9sZCwgbXVjaCBsZXNzIGFuIGVsZGVybHkgbWFuLCByZW1vdmluZyBoaW0gZnJvbSBoaXMgaGFiaXR1YWwgcGxhY2UgYW5kIGN1c3RvbWFyeSBsaWZlLCBhcyBpdCB3ZXJlIGZyb20gaGlzIG5hdGl2ZSBsYW5kLCBmb3IgYSBwYWx0cnkgcHJpY2UsIHVzZWxlc3MgYXMgaGUgaXMgdG8gdGhvc2Ugd2hvIHNlbGwgaGltIGFuZCBhcyBoZSB3aWxsIGJlIHRvIHRob3NlIHdobyBidXkgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0bywgZXh1bHRpbmcgYXMgaXQgd2VyZSBpbiBzdWNoIHRoaW5ncywgc2F5cyB0aGF0IGhlIGxlZnQgaW4gU3BhaW4gZXZlbiB0aGUgaG9yc2Ugd2hpY2ggaGFkIGNhcnJpZWQgaGltIHRocm91Z2ggaGlzIGNvbnN1bGFyIGNhbXBhaWduLCB0aGF0IGhlIG1pZ2h0IG5vdCB0YXggdGhlIGNpdHkgd2l0aCB0aGUgY29zdCBvZiBpdHMgdHJhbnNwb3J0YXRpb24uIFdoZXRoZXIsIG5vdywgdGhlc2UgdGhpbmdzIHNob3VsZCBiZSBzZXQgZG93biB0byBncmVhdG5lc3Mgb2Ygc3Bpcml0IG9yIGxpdHRsZW5lc3Mgb2YgbWluZCwgaXMgYW4gb3BlbiBxdWVzdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlIHNob3VsZCBub3QgdHJlYXQgbGl2aW5nIGNyZWF0dXJlcyBsaWtlIHNob2VzIG9yIHBvdHMgYW5kIHBhbnMsIGNhc3RpbmcgdGhlbSBhc2lkZSB3aGVuIHRoZXkgYXJlIGJydWlzZWQgYW5kIHdvcm4gb3V0IHdpdGggc2VydmljZSwgYnV0LCBpZiBmb3Igbm8gb3RoZXIgcmVhc29uLCBmb3IgdGhlIHNha2Ugb2YgcHJhY3RpY2UgaW4ga2luZG5lc3MgdG8gb3VyIGZlbGxvdyBtZW4sIHdlIHNob3VsZCBhY2N1c3RvbSBvdXJzZWx2ZXMgdG8gbWlsZG5lc3MgYW5kIGdlbnRsZW5lc3MgaW4gb3VyIGRlYWxpbmdzIHdpdGggb3RoZXIgY3JlYXR1cmVzLiBJIGNlcnRhaW5seSB3b3VsZCBub3Qgc2VsbCBldmVuIGFuIG94IHRoYXQgaGFkIHdvcmtlZCBmb3IgbWUsIGp1c3QgYmVjYXVzZSBoZSB3YXMgb2xkLCBtdWNoIGxlc3MgYW4gZWxkZXJseSBtYW4sIHJlbW92aW5nIGhpbSBmcm9tIGhpcyBoYWJpdHVhbCBwbGFjZSBhbmQgY3VzdG9tYXJ5IGxpZmUsIGFzIGl0IHdlcmUgZnJvbSBoaXMgbmF0aXZlIGxhbmQsIGZvciBhIHBhbHRyeSBwcmljZSwgdXNlbGVzcyBhcyBoZSBpcyB0byB0aG9zZSB3aG8gc2VsbCBoaW0gYW5kIGFzIGhlIHdpbGwgYmUgdG8gdGhvc2Ugd2hvIGJ1eSBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCBleHVsdGluZyBhcyBpdCB3ZXJlIGluIHN1Y2ggdGhpbmdzLCBzYXlzIHRoYXQgaGUgbGVmdCBpbiBTcGFpbiBldmVuIHRoZSBob3JzZSB3aGljaCBoYWQgY2FycmllZCBoaW0gdGhyb3VnaCBoaXMgY29uc3VsYXIgY2FtcGFpZ24sIHRoYXQgaGUgbWlnaHQgbm90IHRheCB0aGUgY2l0eSB3aXRoIHRoZSBjb3N0IG9mIGl0cyB0cmFuc3BvcnRhdGlvbi4gV2hldGhlciwgbm93LCB0aGVzZSB0aGluZ3Mgc2hvdWxkIGJlIHNldCBkb3duIHRvIGdyZWF0bmVzcyBvZiBzcGlyaXQgb3IgbGl0dGxlbmVzcyBvZiBtaW5kLCBpcyBhbiBvcGVuIHF1ZXN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBvdGhlciBtYXR0ZXJzLCBoaXMgc2VsZi1yZXN0cmFpbnQgd2FzIGJleW9uZCBtZWFzdXJlIGFkbWlyYWJsZS4gRm9yIGluc3RhbmNlLCB3aGVuIGhlIHdhcyBpbiBjb21tYW5kIG9mIGFuIGFybXksIGhlIHRvb2sgZm9yIGhpbXNlbGYgYW5kIGhpcyByZXRpbnVlIG5vdCBtb3JlIHRoYW4gdGhyZWUgQXR0aWMgYnVzaGVscyBvZiB3aGVhdCBhIG1vbnRoLCBhbmQgZm9yIGhpcyBiZWFzdHMgb2YgYnVyZGVuLCBsZXNzIHRoYW4gYSBidXNoZWwgYW5kIGEgaGFsZiBvZiBiYXJsZXkgYSBkYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHJlY2VpdmVkIFNhcmRpbmlhIGFzIGhpcyBwcm92aW5jZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xOTggQi5DLjwvbm90ZT4gYW5kIHdoZXJlYXMgaGlzIHByZWRlY2Vzc29ycyB3ZXJlIHdvbnQgdG8gY2hhcmdlIHRoZSBwdWJsaWMgdHJlYXN1cnkgd2l0aCB0aGVpciBwYXZpbGlvbnMsIGNvdWNoZXMsIGFuZCBhcHBhcmVsLCB3aGlsZSB0aGV5IG9wcHJlc3NlZCB0aGUgcHJvdmluY2Ugd2l0aCB0aGUgY29zdCBvZiB0aGVpciBsYXJnZSByZXRpbnVlcyBvZiBzZXJ2YW50cyBhbmQgZnJpZW5kcywgYW5kIG9mIHRoZWlyIGxhdmlzaCBhbmQgZWxhYm9yYXRlIGJhbnF1ZXRzLCBoaXMgc2ltcGxlIGVjb25vbXkgc3Rvb2Qgb3V0IGluIGFuIGluY3JlZGlibGUgY29udHJhc3QuIEhlIG1hZGUgbm8gZGVtYW5kcyB3aGF0ZXZlciB1cG9uIHRoZSBwdWJsaWMgdHJlYXN1cnksIGFuZCBtYWRlIGhpcyBjaXJjdWl0IG9mIHRoZSBjaXRpZXMgb24gZm9vdCwgZm9sbG93ZWQgYnkgYSBzaW5nbGUgcHVibGljIG9mZmljZXIsIHdobyBjYXJyaWVkIGhpcyByb2JlIGFuZCBjaGFsaWNlIGZvciBzYWNyaWZpY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCB0aG91Z2ggaW4gc3VjaCBtYXR0ZXJzIGhlIHNob3dlZCBoaW1zZWxmIG1pbGQgYW5kIHNwYXJpbmcgdG8gdGhvc2UgdW5kZXIgaGlzIGF1dGhvcml0eSwgaW4gb3RoZXIgd2F5cyBoZSBkaXNwbGF5ZWQgYSBkaWduaXR5IGFuZCBzZXZlcml0eSB3aGljaCBmdWxseSBjb3JyZXNwb25kZWQsIGZvciBpbiB0aGUgYWRtaW5pc3RyYXRpb24gb2YganVzdGljZSBoZSB3YXMgaW5leG9yYWJsZSwgYW5kIGluIGNhcnJ5aW5nIG91dCB0aGUgZWRpY3RzIG9mIHRoZSBnb3Zlcm5tZW50IHdhcyBkaXJlY3QgYW5kIG1hc3RlcmZ1bCwgc28gdGhhdCB0aGUgUm9tYW4gcG93ZXIgbmV2ZXIgaW5zcGlyZWQgaXRzIHN1YmplY3RzIHdpdGggZ3JlYXRlciBmZWFyIG9yIGFmZmVjdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gb3RoZXIgbWF0dGVycywgaGlzIHNlbGYtcmVzdHJhaW50IHdhcyBiZXlvbmQgbWVhc3VyZSBhZG1pcmFibGUuIEZvciBpbnN0YW5jZSwgd2hlbiBoZSB3YXMgaW4gY29tbWFuZCBvZiBhbiBhcm15LCBoZSB0b29rIGZvciBoaW1zZWxmIGFuZCBoaXMgcmV0aW51ZSBub3QgbW9yZSB0aGFuIHRocmVlIEF0dGljIGJ1c2hlbHMgb2Ygd2hlYXQgYSBtb250aCwgYW5kIGZvciBoaXMgYmVhc3RzIG9mIGJ1cmRlbiwgbGVzcyB0aGFuIGEgYnVzaGVsIGFuZCBhIGhhbGYgb2YgYmFybGV5IGEgZGF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHJlY2VpdmVkIFNhcmRpbmlhIGFzIGhpcyBwcm92aW5jZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE5OCBCLkMuPC9ub3RlPiBhbmQgd2hlcmVhcyBoaXMgcHJlZGVjZXNzb3JzIHdlcmUgd29udCB0byBjaGFyZ2UgdGhlIHB1YmxpYyB0cmVhc3VyeSB3aXRoIHRoZWlyIHBhdmlsaW9ucywgY291Y2hlcywgYW5kIGFwcGFyZWwsIHdoaWxlIHRoZXkgb3BwcmVzc2VkIHRoZSBwcm92aW5jZSB3aXRoIHRoZSBjb3N0IG9mIHRoZWlyIGxhcmdlIHJldGludWVzIG9mIHNlcnZhbnRzIGFuZCBmcmllbmRzLCBhbmQgb2YgdGhlaXIgbGF2aXNoIGFuZCBlbGFib3JhdGUgYmFucXVldHMsIGhpcyBzaW1wbGUgZWNvbm9teSBzdG9vZCBvdXQgaW4gYW4gaW5jcmVkaWJsZSBjb250cmFzdC4gSGUgbWFkZSBubyBkZW1hbmRzIHdoYXRldmVyIHVwb24gdGhlIHB1YmxpYyB0cmVhc3VyeSwgYW5kIG1hZGUgaGlzIGNpcmN1aXQgb2YgdGhlIGNpdGllcyBvbiBmb290LCBmb2xsb3dlZCBieSBhIHNpbmdsZSBwdWJsaWMgb2ZmaWNlciwgd2hvIGNhcnJpZWQgaGlzIHJvYmUgYW5kIGNoYWxpY2UgZm9yIHNhY3JpZmljZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIHRob3VnaCBpbiBzdWNoIG1hdHRlcnMgaGUgc2hvd2VkIGhpbXNlbGYgbWlsZCBhbmQgc3BhcmluZyB0byB0aG9zZSB1bmRlciBoaXMgYXV0aG9yaXR5LCBpbiBvdGhlciB3YXlzIGhlIGRpc3BsYXllZCBhIGRpZ25pdHkgYW5kIHNldmVyaXR5IHdoaWNoIGZ1bGx5IGNvcnJlc3BvbmRlZCwgZm9yIGluIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiBqdXN0aWNlIGhlIHdhcyBpbmV4b3JhYmxlLCBhbmQgaW4gY2Fycnlpbmcgb3V0IHRoZSBlZGljdHMgb2YgdGhlIGdvdmVybm1lbnQgd2FzIGRpcmVjdCBhbmQgbWFzdGVyZnVsLCBzbyB0aGF0IHRoZSBSb21hbiBwb3dlciBuZXZlciBpbnNwaXJlZCBpdHMgc3ViamVjdHMgd2l0aCBncmVhdGVyIGZlYXIgb3IgYWZmZWN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk11Y2ggdGhlIHNhbWUgdHJhaXRzIGFyZSByZXZlYWxlZCBpbiB0aGUgbWFuJ3Mgb3JhdG9yeS4gSXQgd2FzIGF0IG9uY2UgZ3JhY2VmdWwgYW5kIHBvd2VyZnVsLCBwbGVhc2FudCBhbmQgY29tcGVsbGluZywgZmFjZXRpb3VzIGFuZCBzZXZlcmUsIHNlbnRlbnRpb3VzIGFuZCBiZWxsaWdlcmVudC4gU28gUGxhdG8gc2F5cyBvZiBTb2NyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gU3ltLiAyMTUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3ltcG9zaXVtPC90aXRsZT4sIHAuIDIxNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBmcm9tIHRoZSBvdXRzaWRlIGhlIGltcHJlc3NlZCBoaXMgYXNzb2NpYXRlcyBhcyBydWRlLCB1bmNvdXRoLCBhbmQgd2FudG9uOyBidXQgd2l0aGluIGhlIHdhcyBmdWxsIG9mIGVhcm5lc3RuZXNzLCBhbmQgb2YgbWF0dGVycyB0aGF0IG1vdmVkIGhpcyBoZWFyZXJzIHRvIHRlYXJzIGFuZCB3cnVuZyB0aGVpciBoZWFydHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBJIGtub3cgbm90IHdoYXQgdGhleSBjYW4gbWVhbiB3aG8gc2F5IHRoYXQgQ2F0bydzIG9yYXRvcnkgbW9zdCByZXNlbWJsZWQgdGhhdCBvZiBMeXNpYXMuIEhvd2V2ZXIsIHN1Y2ggcXVlc3Rpb25zIG11c3QgYmUgZGVjaWRlZCBieSB0aG9zZSB3aG8gYXJlIG1vcmUgY2FwYWJsZSB0aGFuIEkgYW0gb2YgZGlzY2VybmluZyB0aGUgdHJhaXRzIG9mIFJvbWFuIG9yYXRvcnksIGFuZCBJIHNoYWxsIG5vdyByZWNvcmQgYSBmZXcgb2YgaGlzIGZhbW91cyBzYXlpbmdzLCBiZWxpZXZpbmcgdGhhdCBtZW4ncyBjaGFyYWN0ZXJzIGFyZSByZXZlYWxlZCBtdWNoIG1vcmUgYnkgdGhlaXIgc3BlZWNoIHRoYW4sIGFzIHNvbWUgdGhpbmssIGJ5IHRoZWlyIGxvb2tzLgoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlIZSBvbmNlIHdpc2hlZCB0byBkaXNzdWFkZSB0aGUgUm9tYW4gcGVvcGxlIGZyb20gaW5zaXN0aW5nIHVuc2Vhc29uYWJseSB1cG9uIGEgZGlzdHJpYnV0aW9uIG9mIGNvcm4sIGFuZCBiZWdhbiBoaXMgc3BlZWNoIHdpdGggdGhlc2Ugd29yZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgYSBoYXJkIG1hdHRlciwgbXkgZmVsbG93IGNpdGl6ZW5zLCB0byBhcmd1ZSB3aXRoIHRoZSBiZWxseSwgc2luY2UgaXQgaGFzIG5vIGVhcnMuPC9xPiBBZ2FpbiwgaW52ZWlnaGluZyBhZ2FpbnN0IHRoZSBwcmV2YWxlbnQgZXh0cmF2YWdhbmNlLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGEgaGFyZCBtYXR0ZXIgdG8gc2F2ZSBhIGNpdHkgaW4gd2hpY2ggYSBmaXNoIHNlbGxzIGZvciBtb3JlIHRoYW4gYW4gb3guPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBoZSBzYWlkIHRoZSBSb21hbnMgd2VyZSBsaWtlIHNoZWVwOyBmb3IgYXMgdGhlc2UgYXJlIG5vdCB0byBiZSBwZXJzdWFkZWQgb25lIGJ5IG9uZSwgYnV0IGFsbCBpbiBhIGJvZHkgYmxpbmRseSBmb2xsb3cgdGhlaXIgbGVhZGVycywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zbyB5ZSw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdWdoIGFzIGluZGl2aWR1YWxzIHllIHdvdWxkIG5vdCBkZWlnbiB0byBmb2xsb3cgdGhlIGNvdW5zZWxzIG9mIGNlcnRhaW4gbWVuLCB3aGVuIHllIGFyZSBnb3QgdG9nZXRoZXIgeWUgc3VmZmVyIHlvdXJzZWx2ZXMgdG8gYmUgbGVkIGJ5IHRoZW0uPC9xPiBEaXNjb3Vyc2luZyBvbiB0aGUgcG93ZXIgb2Ygd29tZW4sIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxsIG90aGVyIG1lbiBydWxlIHRoZWlyIHdpdmVzOyB3ZSBydWxlIGFsbCBvdGhlciBtZW4sIGFuZCBvdXIgd2l2ZXMgcnVsZSB1cy48L3E+IFRoaXMsIGhvd2V2ZXIsIGlzIGEgdHJhbnNsYXRpb24gZnJvbSB0aGUgc2F5aW5ncyBvZiBUaGVtaXN0b2NsZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAxOC40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4dmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSwgZmluZGluZyBoaW1zZWxmIG11Y2ggdW5kZXIgaGlzIHNvbidzIG9yZGVycyB0aHJvdWdoIHRoZSBsYWQncyBtb3RoZXIsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2lmZSwgdGhlIEF0aGVuaWFucyBydWxlIHRoZSBIZWxsZW5lcywgSSBydWxlIHRoZSBBdGhlbmlhbnMsIHRob3UgcnVsZXN0IG1lLCBhbmQgdGh5IHNvbiB0aGVlLiBUaGVyZWZvcmUgbGV0IGhpbSBtYWtlIHNwYXJpbmcgdXNlIG9mIHRoYXQgYXV0aG9yaXR5IHdoaWNoIG1ha2VzIGhpbSwgY2hpbGQgdGhvdWdoIGhlIGlzLCB0aGUgbW9zdCBwb3dlcmZ1bCBvZiB0aGUgSGVsbGVuZXMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NdWNoIHRoZSBzYW1lIHRyYWl0cyBhcmUgcmV2ZWFsZWQgaW4gdGhlIG1hbidzIG9yYXRvcnkuIEl0IHdhcyBhdCBvbmNlIGdyYWNlZnVsIGFuZCBwb3dlcmZ1bCwgcGxlYXNhbnQgYW5kIGNvbXBlbGxpbmcsIGZhY2V0aW91cyBhbmQgc2V2ZXJlLCBzZW50ZW50aW91cyBhbmQgYmVsbGlnZXJlbnQuIFNvIFBsYXRvIHNheXMgb2YgU29jcmF0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBTeW0uIDIxNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN5bXBvc2l1bTwvdGl0bGU+LCBwLiAyMTUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgZnJvbSB0aGUgb3V0c2lkZSBoZSBpbXByZXNzZWQgaGlzIGFzc29jaWF0ZXMgYXMgcnVkZSwgdW5jb3V0aCwgYW5kIHdhbnRvbjsgYnV0IHdpdGhpbiBoZSB3YXMgZnVsbCBvZiBlYXJuZXN0bmVzcywgYW5kIG9mIG1hdHRlcnMgdGhhdCBtb3ZlZCBoaXMgaGVhcmVycyB0byB0ZWFycyBhbmQgd3J1bmcgdGhlaXIgaGVhcnRzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFN5bS4gMjE1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3ltcG9zaXVtPC90aXRsZT4sIHAuIDIxNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN5bXBvc2l1bTwvdGl0bGU+LCBwLiAyMTUuPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBJIGtub3cgbm90IHdoYXQgdGhleSBjYW4gbWVhbiB3aG8gc2F5IHRoYXQgQ2F0bydzIG9yYXRvcnkgbW9zdCByZXNlbWJsZWQgdGhhdCBvZiBMeXNpYXMuIEhvd2V2ZXIsIHN1Y2ggcXVlc3Rpb25zIG11c3QgYmUgZGVjaWRlZCBieSB0aG9zZSB3aG8gYXJlIG1vcmUgY2FwYWJsZSB0aGFuIEkgYW0gb2YgZGlzY2VybmluZyB0aGUgdHJhaXRzIG9mIFJvbWFuIG9yYXRvcnksIGFuZCBJIHNoYWxsIG5vdyByZWNvcmQgYSBmZXcgb2YgaGlzIGZhbW91cyBzYXlpbmdzLCBiZWxpZXZpbmcgdGhhdCBtZW4ncyBjaGFyYWN0ZXJzIGFyZSByZXZlYWxlZCBtdWNoIG1vcmUgYnkgdGhlaXIgc3BlZWNoIHRoYW4sIGFzIHNvbWUgdGhpbmssIGJ5IHRoZWlyIGxvb2tzLgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUhlIG9uY2Ugd2lzaGVkIHRvIGRpc3N1YWRlIHRoZSBSb21hbiBwZW9wbGUgZnJvbSBpbnNpc3RpbmcgdW5zZWFzb25hYmx5IHVwb24gYSBkaXN0cmlidXRpb24gb2YgY29ybiwgYW5kIGJlZ2FuIGhpcyBzcGVlY2ggd2l0aCB0aGVzZSB3b3JkczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGEgaGFyZCBtYXR0ZXIsIG15IGZlbGxvdyBjaXRpemVucywgdG8gYXJndWUgd2l0aCB0aGUgYmVsbHksIHNpbmNlIGl0IGhhcyBubyBlYXJzLjwvcT4gQWdhaW4sIGludmVpZ2hpbmcgYWdhaW5zdCB0aGUgcHJldmFsZW50IGV4dHJhdmFnYW5jZSwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGEgaGFyZCBtYXR0ZXIgdG8gc2F2ZSBhIGNpdHkgaW4gd2hpY2ggYSBmaXNoIHNlbGxzIGZvciBtb3JlIHRoYW4gYW4gb3guPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBoZSBzYWlkIHRoZSBSb21hbnMgd2VyZSBsaWtlIHNoZWVwOyBmb3IgYXMgdGhlc2UgYXJlIG5vdCB0byBiZSBwZXJzdWFkZWQgb25lIGJ5IG9uZSwgYnV0IGFsbCBpbiBhIGJvZHkgYmxpbmRseSBmb2xsb3cgdGhlaXIgbGVhZGVycywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNvIHllLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3VnaCBhcyBpbmRpdmlkdWFscyB5ZSB3b3VsZCBub3QgZGVpZ24gdG8gZm9sbG93IHRoZSBjb3Vuc2VscyBvZiBjZXJ0YWluIG1lbiwgd2hlbiB5ZSBhcmUgZ290IHRvZ2V0aGVyIHllIHN1ZmZlciB5b3Vyc2VsdmVzIHRvIGJlIGxlZCBieSB0aGVtLjwvcT4gRGlzY291cnNpbmcgb24gdGhlIHBvd2VyIG9mIHdvbWVuLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxsIG90aGVyIG1lbiBydWxlIHRoZWlyIHdpdmVzOyB3ZSBydWxlIGFsbCBvdGhlciBtZW4sIGFuZCBvdXIgd2l2ZXMgcnVsZSB1cy48L3E+IFRoaXMsIGhvd2V2ZXIsIGlzIGEgdHJhbnNsYXRpb24gZnJvbSB0aGUgc2F5aW5ncyBvZiBUaGVtaXN0b2NsZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMTguNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4dmlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDE4LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHZpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHZpaWkuIDQuPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlLCBmaW5kaW5nIGhpbXNlbGYgbXVjaCB1bmRlciBoaXMgc29uJ3Mgb3JkZXJzIHRocm91Z2ggdGhlIGxhZCdzIG1vdGhlciwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpZmUsIHRoZSBBdGhlbmlhbnMgcnVsZSB0aGUgSGVsbGVuZXMsIEkgcnVsZSB0aGUgQXRoZW5pYW5zLCB0aG91IHJ1bGVzdCBtZSwgYW5kIHRoeSBzb24gdGhlZS4gVGhlcmVmb3JlIGxldCBoaW0gbWFrZSBzcGFyaW5nIHVzZSBvZiB0aGF0IGF1dGhvcml0eSB3aGljaCBtYWtlcyBoaW0sIGNoaWxkIHRob3VnaCBoZSBpcywgdGhlIG1vc3QgcG93ZXJmdWwgb2YgdGhlIEhlbGxlbmVzLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFuIHBlb3BsZSwgQ2F0byBzYWlkLCBmaXhlZCB0aGUgbWFya2V0IHZhbHVlIG5vdCBvbmx5IG9mIGR5ZXMsIGJ1dCBhbHNvIG9mIGJlaGF2aW91ci4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFzIGR5ZXJzIG1vc3QgYWZmZWN0IHRoYXQgZHllIHdoaWNoIHRoZXkgc2VlIHBsZWFzZXMgeW91LCBzbyB5b3VyIHlvdW5nIG1lbiBsZWFybiBhbmQgcHJhY3RpY2UgdGhhdCB3aGljaCB3aW5zIHlvdXIgcHJhaXNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgZXhob3J0ZWQgdGhlbSwgaW4gY2FzZSBpdCB3YXMgdGhyb3VnaCB2aXJ0dWUgYW5kIHRlbXBlcmFuY2UgdGhhdCB0aGV5IGhhZCBiZWNvbWUgZ3JlYXQsIHRvIG1ha2Ugbm8gY2hhbmdlIGZvciB0aGUgd29yc2U7IGJ1dCBpZiBpdCB3YXMgdGhyb3VnaCBpbnRlbXBlcmFuY2UgYW5kIHZpY2UsIHRvIGNoYW5nZSBmb3IgdGhlIGJldHRlcjsgdGhlc2UgaGFkIGFscmVhZHkgbWFkZSB0aGVtIGdyZWF0IGVub3VnaC4gT2YgdGhvc2Ugd2hvIHdlcmUgZWFnZXIgdG8gaG9sZCBoaWdoIG9mZmljZSBmcmVxdWVudGx5LCBoZSBzYWlkIHRoYXQgbGlrZSBtZW4gd2hvIGRpZCBub3Qga25vdyB0aGUgcm9hZCwgdGhleSBzb3VnaHQgdG8gYmUgZXZlciBhdHRlbmRlZCBvbiB0aGVpciB3YXkgYnkgbGljdG9ycywgbGVzdCB0aGV5IGdvIGFzdHJheS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY2Vuc3VyZWQgaGlzIGZlbGxvdyBjaXRpemVucyBmb3IgY2hvb3NpbmcgdGhlIHNhbWUgbWVuIG92ZXIgYW5kIG92ZXIgYWdhaW4gdG8gaGlnaCBvZmZpY2UuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHdpbGwgYmUgdGhvdWdodCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bm90IHRvIGRlZW0geW91ciBvZmZpY2VzIHdvcnRoIG11Y2gsIG9yIGVsc2Ugbm90IHRvIGRlZW0gbWFueSBtZW4gd29ydGh5IG9mIHlvdXIgb2ZmaWNlcy48L3E+IE9mIG9uZSBvZiBoaXMgZW5lbWllcyB3aG8gaGFkIHRoZSBuYW1lIG9mIGxlYWRpbmcgYSBkaXNncmFjZWZ1bCBhbmQgZGlzcmVwdXRhYmxlIGxpZmUsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBtYW4ncyBtb3RoZXIgaG9sZHMgdGhlIHdpc2ggdGhhdCBoZSBtYXkgc3Vydml2ZSBoZXIgdG8gYmUgbm8gcGlvdXMgcHJheWVyLCBidXQgYSBtYWxpZ25hbnQgY3Vyc2UuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlBvaW50aW5nIHRvIGEgbWFuIHdobyBoYWQgc29sZCBoaXMgYW5jZXN0cmFsIGZpZWxkcyBseWluZyBuZWFyIHRoZSBzZWEsIGhlIHByZXRlbmRlZCB0byBhZG1pcmUgaGltLCBhcyBzdHJvbmdlciB0aGFuIHRoZSBzZWEuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBtYW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhhcyBkcnVuayBkb3duIHdpdGggZWFzZSB3aGF0IHRoZSBzZWEgZm91bmQgaXQgaGFyZCB0byB3YXNoIGF3YXkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbiBwZW9wbGUsIENhdG8gc2FpZCwgZml4ZWQgdGhlIG1hcmtldCB2YWx1ZSBub3Qgb25seSBvZiBkeWVzLCBidXQgYWxzbyBvZiBiZWhhdmlvdXIuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXMgZHllcnMgbW9zdCBhZmZlY3QgdGhhdCBkeWUgd2hpY2ggdGhleSBzZWUgcGxlYXNlcyB5b3UsIHNvIHlvdXIgeW91bmcgbWVuIGxlYXJuIGFuZCBwcmFjdGljZSB0aGF0IHdoaWNoIHdpbnMgeW91ciBwcmFpc2UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBleGhvcnRlZCB0aGVtLCBpbiBjYXNlIGl0IHdhcyB0aHJvdWdoIHZpcnR1ZSBhbmQgdGVtcGVyYW5jZSB0aGF0IHRoZXkgaGFkIGJlY29tZSBncmVhdCwgdG8gbWFrZSBubyBjaGFuZ2UgZm9yIHRoZSB3b3JzZTsgYnV0IGlmIGl0IHdhcyB0aHJvdWdoIGludGVtcGVyYW5jZSBhbmQgdmljZSwgdG8gY2hhbmdlIGZvciB0aGUgYmV0dGVyOyB0aGVzZSBoYWQgYWxyZWFkeSBtYWRlIHRoZW0gZ3JlYXQgZW5vdWdoLiBPZiB0aG9zZSB3aG8gd2VyZSBlYWdlciB0byBob2xkIGhpZ2ggb2ZmaWNlIGZyZXF1ZW50bHksIGhlIHNhaWQgdGhhdCBsaWtlIG1lbiB3aG8gZGlkIG5vdCBrbm93IHRoZSByb2FkLCB0aGV5IHNvdWdodCB0byBiZSBldmVyIGF0dGVuZGVkIG9uIHRoZWlyIHdheSBieSBsaWN0b3JzLCBsZXN0IHRoZXkgZ28gYXN0cmF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGNlbnN1cmVkIGhpcyBmZWxsb3cgY2l0aXplbnMgZm9yIGNob29zaW5nIHRoZSBzYW1lIG1lbiBvdmVyIGFuZCBvdmVyIGFnYWluIHRvIGhpZ2ggb2ZmaWNlLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHdpbGwgYmUgdGhvdWdodCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ub3QgdG8gZGVlbSB5b3VyIG9mZmljZXMgd29ydGggbXVjaCwgb3IgZWxzZSBub3QgdG8gZGVlbSBtYW55IG1lbiB3b3J0aHkgb2YgeW91ciBvZmZpY2VzLjwvcT4gT2Ygb25lIG9mIGhpcyBlbmVtaWVzIHdobyBoYWQgdGhlIG5hbWUgb2YgbGVhZGluZyBhIGRpc2dyYWNlZnVsIGFuZCBkaXNyZXB1dGFibGUgbGlmZSwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgbWFuJ3MgbW90aGVyIGhvbGRzIHRoZSB3aXNoIHRoYXQgaGUgbWF5IHN1cnZpdmUgaGVyIHRvIGJlIG5vIHBpb3VzIHByYXllciwgYnV0IGEgbWFsaWduYW50IGN1cnNlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlBvaW50aW5nIHRvIGEgbWFuIHdobyBoYWQgc29sZCBoaXMgYW5jZXN0cmFsIGZpZWxkcyBseWluZyBuZWFyIHRoZSBzZWEsIGhlIHByZXRlbmRlZCB0byBhZG1pcmUgaGltLCBhcyBzdHJvbmdlciB0aGFuIHRoZSBzZWEuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIG1hbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oYXMgZHJ1bmsgZG93biB3aXRoIGVhc2Ugd2hhdCB0aGUgc2VhIGZvdW5kIGl0IGhhcmQgdG8gd2FzaCBhd2F5LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIEtpbmcgRXVtZW5lcyBwYWlkIGEgdmlzaXQgdG8gUm9tZSwgdGhlIFNlbmF0ZSByZWNlaXZlZCBoaW0gd2l0aCBleHRyYXZhZ2FudCBob25vdXJzLCBhbmQgdGhlIGNoaWVmIG1lbiBvZiB0aGUgY2l0eSBzdHJvdmUgd2hvIHNob3VsZCBiZSBtb3N0IGFib3V0IGhpbS4gQnV0IENhdG8gY2xlYXJseSBsb29rZWQgdXBvbiBoaW0gd2l0aCBzdXNwaWNpb24gYW5kIGFsYXJtLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdXJlbHksPC9xPiBzb21lIG9uZSBzYWlkIHRvIGhpbSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZSBpcyBhbiBleGNlbGxlbnQgbWFuLCBhbmQgYSBmcmllbmQgb2YgUm9tZS48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HcmFudGVkLDwvcT4gc2FpZCBDYXRvLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCB0aGUgYW5pbWFsIGtub3duIGFzIGtpbmcgaXMgYnkgbmF0dXJlIGNhcm5pdm9yb3VzLjwvcT4gSGUgc2FpZCBmdXJ0aGVyIHRoYXQgbm90IG9uZSBvZiB0aGUga2luZ3Mgd2hvbSBtZW4gc28gbGF1ZGVkIHdhcyB3b3J0aHkgb2YgY29tcGFyaXNvbiB3aXRoIEVwYW1pbm9uZGFzLCBvciBQZXJpY2xlcywgb3IgVGhlbWlzdG9jbGVzLCBvciBNYW5pdXMgQ3VyaXVzLCBvciB3aXRoIEhhbWlsY2FyLCBzdXJuYW1lZCBCYXJjYXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBlbmVtaWVzIGhhdGVkIGhpbSwgaGUgdXNlZCB0byBzYXksIGJlY2F1c2UgaGUgcm9zZSBldmVyeSBkYXkgYmVmb3JlIGl0IHdhcyBsaWdodCBhbmQsIG5lZ2xlY3RpbmcgaGlzIG93biBwcml2YXRlIG1hdHRlcnMsIGRldm90ZWQgaGlzIHRpbWUgdG8gdGhlIHB1YmxpYyBpbnRlcmVzdHMuIEhlIGFsc28gdXNlZCB0byBzYXkgdGhhdCBoZSBwcmVmZXJyZWQgdG8gZG8gcmlnaHQgYW5kIGdldCBubyB0aGFua3MsIHJhdGhlciB0aGFuIHRvIGRvIGlsbCBhbmQgZ2V0IG5vIHB1bmlzaG1lbnQ7IGFuZCB0aGF0IGhlIGhhZCBwYXJkb24gZm9yIGV2ZXJ5Ym9keSdzIG1pc3Rha2VzIGV4Y2VwdCBoaXMgb3duLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN1cmVseSw8L3E+IHNvbWUgb25lIHNhaWQgdG8gaGltLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGUgaXMgYW4gZXhjZWxsZW50IG1hbiwgYW5kIGEgZnJpZW5kIG9mIFJvbWUuPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HcmFudGVkLDwvcT4gc2FpZCBDYXRvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHRoZSBhbmltYWwga25vd24gYXMga2luZyBpcyBieSBuYXR1cmUgY2Fybml2b3JvdXMuPC9xPiBIZSBzYWlkIGZ1cnRoZXIgdGhhdCBub3Qgb25lIG9mIHRoZSBraW5ncyB3aG9tIG1lbiBzbyBsYXVkZWQgd2FzIHdvcnRoeSBvZiBjb21wYXJpc29uIHdpdGggRXBhbWlub25kYXMsIG9yIFBlcmljbGVzLCBvciBUaGVtaXN0b2NsZXMsIG9yIE1hbml1cyBDdXJpdXMsIG9yIHdpdGggSGFtaWxjYXIsIHN1cm5hbWVkIEJhcmNhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBlbmVtaWVzIGhhdGVkIGhpbSwgaGUgdXNlZCB0byBzYXksIGJlY2F1c2UgaGUgcm9zZSBldmVyeSBkYXkgYmVmb3JlIGl0IHdhcyBsaWdodCBhbmQsIG5lZ2xlY3RpbmcgaGlzIG93biBwcml2YXRlIG1hdHRlcnMsIGRldm90ZWQgaGlzIHRpbWUgdG8gdGhlIHB1YmxpYyBpbnRlcmVzdHMuIEhlIGFsc28gdXNlZCB0byBzYXkgdGhhdCBoZSBwcmVmZXJyZWQgdG8gZG8gcmlnaHQgYW5kIGdldCBubyB0aGFua3MsIHJhdGhlciB0aGFuIHRvIGRvIGlsbCBhbmQgZ2V0IG5vIHB1bmlzaG1lbnQ7IGFuZCB0aGF0IGhlIGhhZCBwYXJkb24gZm9yIGV2ZXJ5Ym9keSdzIG1pc3Rha2VzIGV4Y2VwdCBoaXMgb3duLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgb25jZSBjaG9zZSB0aHJlZSBhbWJhc3NhZG9ycyB0byBCaXRoeW5pYSwgb2Ygd2hvbSBvbmUgd2FzIGdvdXR5LCBhbm90aGVyIGhhZCBoYWQgaGlzIGhlYWQgdHJlcGFubmVkLCBhbmQgdGhlIHRoaXJkIHdhcyBkZWVtZWQgYSBmb29sLiBDYXRvIG1hZGUgbWVycnkgb3ZlciB0aGlzLCBhbmQgc2FpZCB0aGF0IHRoZSBSb21hbnMgd2VyZSBzZW5kaW5nIG91dCBhbiBlbWJhc3N5IHdoaWNoIGhhZCBuZWl0aGVyIGZlZXQsIG5vciBoZWFkLCBub3IgaGVhcnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBhaWQgd2FzIG9uY2Ugc29saWNpdGVkIGJ5IFNjaXBpbywgYXQgdGhlIGluc3RhbmNlIG9mIFBvbHliaXVzLCBpbiBiZWhhbGYgb2YgdGhlIGV4aWxlcyBmcm9tIEFjaGFpYSwgYW5kIGFmdGVyIGEgbG9uZyBkZWJhdGUgdXBvbiB0aGUgcXVlc3Rpb24gaW4gdGhlIFNlbmF0ZSwgd2hlcmUgc29tZSBmYXZvdXJlZCBhbmQgc29tZSBvcHBvc2VkIHRoZWlyIHJldHVybiBob21lLCBDYXRvIHJvc2UgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyZSB3ZSBzaXQgYWxsIGRheSwgYXMgaWYgd2UgaGFkIG5hdWdodCBlbHNlIHRvIGRvLCBkZWJhdGluZyB3aGV0aGVyIHNvbWUgcG9vciBvbGQgR3JlZWtzIHNoYWxsIGJlIGJ1cmllZCBoZXJlIG9yIGluIEFjaGFpYS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFNlbmF0ZSB2b3RlZCB0aGF0IHRoZSBtZW4gYmUgYWxsb3dlZCB0byByZXR1cm4sIGFuZCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgUG9seWJpdXMgdHJpZWQgdG8gZ2V0IGFkbWlzc2lvbiB0byB0aGF0IGJvZHkgYWdhaW4sIHdpdGggYSBwcm9wb3NhbCB0aGF0IHRoZSBleGlsZXMgYmUgcmVzdG9yZWQgdG8gdGhlaXIgZm9ybWVyIGhvbm91cnMgaW4gQWNoYWlhLCBhbmQgYXNrZWQgQ2F0bydzIG9waW5pb24gb24gdGhlIG1hdHRlci4gQ2F0byBzbWlsZWQgYW5kIHNhaWQgdGhhdCBQb2x5Yml1cywgYXMgaWYgaGUgd2VyZSBhbm90aGVyIE9keXNzZXVzLCB3YW50ZWQgdG8gZ28gYmFjayBpbnRvIHRoZSBjYXZlIG9mIHRoZSBDeWNsb3BzIGZvciBhIGNhcCBhbmQgYmVsdCB3aGljaCBoZSBoYWQgbGVmdCB0aGVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIG9uY2UgY2hvc2UgdGhyZWUgYW1iYXNzYWRvcnMgdG8gQml0aHluaWEsIG9mIHdob20gb25lIHdhcyBnb3V0eSwgYW5vdGhlciBoYWQgaGFkIGhpcyBoZWFkIHRyZXBhbm5lZCwgYW5kIHRoZSB0aGlyZCB3YXMgZGVlbWVkIGEgZm9vbC4gQ2F0byBtYWRlIG1lcnJ5IG92ZXIgdGhpcywgYW5kIHNhaWQgdGhhdCB0aGUgUm9tYW5zIHdlcmUgc2VuZGluZyBvdXQgYW4gZW1iYXNzeSB3aGljaCBoYWQgbmVpdGhlciBmZWV0LCBub3IgaGVhZCwgbm9yIGhlYXJ0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBhaWQgd2FzIG9uY2Ugc29saWNpdGVkIGJ5IFNjaXBpbywgYXQgdGhlIGluc3RhbmNlIG9mIFBvbHliaXVzLCBpbiBiZWhhbGYgb2YgdGhlIGV4aWxlcyBmcm9tIEFjaGFpYSwgYW5kIGFmdGVyIGEgbG9uZyBkZWJhdGUgdXBvbiB0aGUgcXVlc3Rpb24gaW4gdGhlIFNlbmF0ZSwgd2hlcmUgc29tZSBmYXZvdXJlZCBhbmQgc29tZSBvcHBvc2VkIHRoZWlyIHJldHVybiBob21lLCBDYXRvIHJvc2UgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZXJlIHdlIHNpdCBhbGwgZGF5LCBhcyBpZiB3ZSBoYWQgbmF1Z2h0IGVsc2UgdG8gZG8sIGRlYmF0aW5nIHdoZXRoZXIgc29tZSBwb29yIG9sZCBHcmVla3Mgc2hhbGwgYmUgYnVyaWVkIGhlcmUgb3IgaW4gQWNoYWlhLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUgdm90ZWQgdGhhdCB0aGUgbWVuIGJlIGFsbG93ZWQgdG8gcmV0dXJuLCBhbmQgYSBmZXcgZGF5cyBhZnRlcndhcmRzIFBvbHliaXVzIHRyaWVkIHRvIGdldCBhZG1pc3Npb24gdG8gdGhhdCBib2R5IGFnYWluLCB3aXRoIGEgcHJvcG9zYWwgdGhhdCB0aGUgZXhpbGVzIGJlIHJlc3RvcmVkIHRvIHRoZWlyIGZvcm1lciBob25vdXJzIGluIEFjaGFpYSwgYW5kIGFza2VkIENhdG8ncyBvcGluaW9uIG9uIHRoZSBtYXR0ZXIuIENhdG8gc21pbGVkIGFuZCBzYWlkIHRoYXQgUG9seWJpdXMsIGFzIGlmIGhlIHdlcmUgYW5vdGhlciBPZHlzc2V1cywgd2FudGVkIHRvIGdvIGJhY2sgaW50byB0aGUgY2F2ZSBvZiB0aGUgQ3ljbG9wcyBmb3IgYSBjYXAgYW5kIGJlbHQgd2hpY2ggaGUgaGFkIGxlZnQgdGhlcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpc2UgbWVuLCBoZSBzYWlkLCBwcm9maXRlZCBtb3JlIGZyb20gZm9vbHMgdGhhbiBmb29scyBmcm9tIHdpc2UgbWVuOyBmb3IgdGhlIHdpc2Ugc2h1biB0aGUgbWlzdGFrZXMgb2YgZm9vbHMsIGJ1dCBmb29scyBkbyBub3QgaW1pdGF0ZSB0aGUgc3VjY2Vzc2VzIG9mIHRoZSB3aXNlLiBIZSBzYWlkIGhlIGxpa2VkIHRvIHNlZSBibHVzaGVzIG9uIGEgeW91bmcgbWFuJ3MgZmFjZSByYXRoZXIgdGhhbiBwYWxsb3IsIGFuZCB0aGF0IGhlIGhhZCBubyB1c2UgZm9yIGEgc29sZGllciB3aG8gcGxpZWQgaGlzIGhhbmRzIG9uIHRoZSBtYXJjaCwgYW5kIGhpcyBmZWV0IGluIGJhdHRsZSwgYW5kIHdob3NlIHNub3JlIHdhcyBsb3VkZXIgdGhhbiBoaXMgd2FyLWNyeS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+UmFpbGluZyBhdCB0aGUgZmF0IGtuaWdodCwgaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVyZSBjYW4gc3VjaCBhIGJvZHkgYmUgb2Ygc2VydmljZSB0byB0aGUgc3RhdGUsIHdoZW4gZXZlcnl0aGluZyBiZXR3ZWVuIGl0cyBndWxsZXQgYW5kIGl0cyBncm9pbnMgaXMgZGV2b3RlZCB0byBiZWxseT88L3E+IEEgY2VydGFpbiBlcGljdXJlIHdpc2hlZCB0byBlbmpveSBoaXMgc29jaWV0eSwgYnV0IGhlIGV4Y3VzZWQgaGltc2VsZiwgc2F5aW5nIHRoYXQgaGUgY291bGQgbm90IGxpdmUgd2l0aCBhIG1hbiB3aG9zZSBwYWxhdGUgd2FzIG1vcmUgc2Vuc2l0aXZlIHRoYW4gaGlzIGhlYXJ0LiBBcyBmb3IgdGhlIGxvdmVyLCBoZSBzYWlkIGhpcyBzb3VsIGR3ZWx0IGluIHRoZSBib2R5IG9mIGFub3RoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgcmVwZW50YW5jZSwgaGUgc2FpZCBoZSBoYWQgaW5kdWxnZWQgaW4gaXQgaGltc2VsZiBidXQgdGhyaWNlIGluIGhpcyB3aG9sZSBsaWZlOiBvbmNlIHdoZW4gaGUgZW50cnVzdGVkIGEgc2VjcmV0IHRvIGhpcyB3aWZlOyBvbmNlIHdoZW4gaGUgcGFpZCBzaGlwJ3MgZmFyZSB0byBhIHBsYWNlIGluc3RlYWQgb2Ygd2Fsa2luZyB0aGl0aGVyOyBhbmQgb25jZSB3aGVuIGhlIHJlbWFpbmVkIGludGVzdGF0ZSBhIHdob2xlIGRheS4gVG8gYW4gb2xkIG1hbiB3aG8gd2FzIHN0ZWVwZWQgaW4gaW5pcXVpdHkgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NYW4sIG9sZCBhZ2UgaGFzIGRpc2dyYWNlcyBlbm91Z2ggb2YgaXRzIG93bjsgZG8gbm90IGFkZCB0byB0aGVtIHRoZSBzaGFtZSBvZiB2aWNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSB3aG8gaGFkIGJlZW4gYWNjdXNlZCBvZiB1c2luZyBwb2lzb24sIGFuZCB3aG8gd2FzIHRyeWluZyB0byBmb3JjZSB0aGUgcGFzc2FnZSBvZiBhIHVzZWxlc3MgYmlsbCwgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3VuZyBtYW4sIEkga25vdyBub3Qgd2hpY2ggaXMgd29yc2UsIHRvIGRyaW5rIHlvdXIgbWl4dHVyZXMsIG9yIHRvIGVuYWN0IHlvdXIgYmlsbHMuPC9xPiBBbmQgd2hlbiBoZSB3YXMgcmV2aWxlZCBieSBhIG1hbiB3aG8gbGVkIGEgbGlmZSBvZiBzaGFtZWxlc3MgZGViYXVjaGVyeSwgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGZpZ2h0IGFuIHVuZXF1YWwgYmF0dGxlIHdpdGggeW91OiB5b3UgbGlzdGVuIHRvIGFidXNlIGNhbG1seSwgYW5kIHV0dGVyIGl0IGdsaWJseTsgd2hpbGUgZm9yIG1lIGl0IGlzIHVucGxlYXNhbnQgdG8gdXR0ZXIgaXQsIGFuZCB1bnVzdWFsIHRvIGhlYXIgaXQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpc2UgbWVuLCBoZSBzYWlkLCBwcm9maXRlZCBtb3JlIGZyb20gZm9vbHMgdGhhbiBmb29scyBmcm9tIHdpc2UgbWVuOyBmb3IgdGhlIHdpc2Ugc2h1biB0aGUgbWlzdGFrZXMgb2YgZm9vbHMsIGJ1dCBmb29scyBkbyBub3QgaW1pdGF0ZSB0aGUgc3VjY2Vzc2VzIG9mIHRoZSB3aXNlLiBIZSBzYWlkIGhlIGxpa2VkIHRvIHNlZSBibHVzaGVzIG9uIGEgeW91bmcgbWFuJ3MgZmFjZSByYXRoZXIgdGhhbiBwYWxsb3IsIGFuZCB0aGF0IGhlIGhhZCBubyB1c2UgZm9yIGEgc29sZGllciB3aG8gcGxpZWQgaGlzIGhhbmRzIG9uIHRoZSBtYXJjaCwgYW5kIGhpcyBmZWV0IGluIGJhdHRsZSwgYW5kIHdob3NlIHNub3JlIHdhcyBsb3VkZXIgdGhhbiBoaXMgd2FyLWNyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlJhaWxpbmcgYXQgdGhlIGZhdCBrbmlnaHQsIGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVyZSBjYW4gc3VjaCBhIGJvZHkgYmUgb2Ygc2VydmljZSB0byB0aGUgc3RhdGUsIHdoZW4gZXZlcnl0aGluZyBiZXR3ZWVuIGl0cyBndWxsZXQgYW5kIGl0cyBncm9pbnMgaXMgZGV2b3RlZCB0byBiZWxseT88L3E+IEEgY2VydGFpbiBlcGljdXJlIHdpc2hlZCB0byBlbmpveSBoaXMgc29jaWV0eSwgYnV0IGhlIGV4Y3VzZWQgaGltc2VsZiwgc2F5aW5nIHRoYXQgaGUgY291bGQgbm90IGxpdmUgd2l0aCBhIG1hbiB3aG9zZSBwYWxhdGUgd2FzIG1vcmUgc2Vuc2l0aXZlIHRoYW4gaGlzIGhlYXJ0LiBBcyBmb3IgdGhlIGxvdmVyLCBoZSBzYWlkIGhpcyBzb3VsIGR3ZWx0IGluIHRoZSBib2R5IG9mIGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgcmVwZW50YW5jZSwgaGUgc2FpZCBoZSBoYWQgaW5kdWxnZWQgaW4gaXQgaGltc2VsZiBidXQgdGhyaWNlIGluIGhpcyB3aG9sZSBsaWZlOiBvbmNlIHdoZW4gaGUgZW50cnVzdGVkIGEgc2VjcmV0IHRvIGhpcyB3aWZlOyBvbmNlIHdoZW4gaGUgcGFpZCBzaGlwJ3MgZmFyZSB0byBhIHBsYWNlIGluc3RlYWQgb2Ygd2Fsa2luZyB0aGl0aGVyOyBhbmQgb25jZSB3aGVuIGhlIHJlbWFpbmVkIGludGVzdGF0ZSBhIHdob2xlIGRheS4gVG8gYW4gb2xkIG1hbiB3aG8gd2FzIHN0ZWVwZWQgaW4gaW5pcXVpdHkgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbiwgb2xkIGFnZSBoYXMgZGlzZ3JhY2VzIGVub3VnaCBvZiBpdHMgb3duOyBkbyBub3QgYWRkIHRvIHRoZW0gdGhlIHNoYW1lIG9mIHZpY2UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRvIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIHdobyBoYWQgYmVlbiBhY2N1c2VkIG9mIHVzaW5nIHBvaXNvbiwgYW5kIHdobyB3YXMgdHJ5aW5nIHRvIGZvcmNlIHRoZSBwYXNzYWdlIG9mIGEgdXNlbGVzcyBiaWxsLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91bmcgbWFuLCBJIGtub3cgbm90IHdoaWNoIGlzIHdvcnNlLCB0byBkcmluayB5b3VyIG1peHR1cmVzLCBvciB0byBlbmFjdCB5b3VyIGJpbGxzLjwvcT4gQW5kIHdoZW4gaGUgd2FzIHJldmlsZWQgYnkgYSBtYW4gd2hvIGxlZCBhIGxpZmUgb2Ygc2hhbWVsZXNzIGRlYmF1Y2hlcnksIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGZpZ2h0IGFuIHVuZXF1YWwgYmF0dGxlIHdpdGggeW91OiB5b3UgbGlzdGVuIHRvIGFidXNlIGNhbG1seSwgYW5kIHV0dGVyIGl0IGdsaWJseTsgd2hpbGUgZm9yIG1lIGl0IGlzIHVucGxlYXNhbnQgdG8gdXR0ZXIgaXQsIGFuZCB1bnVzdWFsIHRvIGhlYXIgaXQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlN1Y2gsIHRoZW4sIGlzIHRoZSBuYXR1cmUgb2YgaGlzIGZhbW91cyBzYXlpbmdzLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBiZWVuIGVsZWN0ZWQgY29uc3VsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTk1IEIuQy48L25vdGU+IHdpdGggVmFsZXJpdXMgRmxhY2N1cywgaGlzIGludGltYXRlIGZyaWVuZCwgdGhlIHByb3ZpbmNlIHdoaWNoIHRoZSBSb21hbnMgY2FsbCBIaXRoZXIgU3BhaW4gd2FzIGFsbG90dGVkIHRvIGhpcyBjaGFyZ2UuIEhlcmUsIHdoaWxlIGhlIHdhcyBzdWJkdWluZyBzb21lIG9mIHRoZSB0cmliZXMsIGFuZCB3aW5uaW5nIG92ZXIgb3RoZXJzIGJ5IGRpcGxvbWFjeSwgYSBncmVhdCBob3N0IG9mIEJhcmJhcmlhbnMgZmVsbCB1cG9uIGhpbSwgYW5kIHRocmVhdGVuZWQgdG8gZHJpdmUgaGltIGRpc2dyYWNlZnVsbHkgb3V0IG9mIHRoZSBwcm92aW5jZS4gSGUgdGhlcmVmb3JlIGJlZ2dlZCB0aGUgbmVpZ2hib3VyaW5nIENlbHRpYmVyaWFucyB0byBiZWNvbWUgaGlzIGFsbGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlaXIgZGVtYW5kaW5nIHR3byBodW5kcmVkIHRhbGVudHMgcGF5IGZvciBzdWNoIGFzc2lzdGFuY2UsIGFsbCBoaXMgb2ZmaWNlcnMgdGhvdWdodCBpdCBpbnRvbGVyYWJsZSB0aGF0IFJvbWFucyBzaG91bGQgYWdyZWUgdG8gcGF5IEJhcmJhcmlhbnMgZm9yIGFzc2lzdGFuY2UuIEJ1dCBDYXRvIHNhaWQgdGhlcmUgd2FzIG5vdGhpbmcgdGVycmlibGUgaW4gaXQ7IHNob3VsZCB0aGV5IGJlIHZpY3RvcmlvdXMsIHRoZXkgY291bGQgcGF5IHRoZSBwcmljZSB3aXRoIHRoZSBzcG9pbHMgdGFrZW4gZnJvbSB0aGUgZW5lbXksIGFuZCBub3Qgb3V0IG9mIHRoZWlyIG93biBwdXJzZSwgd2hlcmVhcywgc2hvdWxkIHRoZXkgYmUgdmFucXVpc2hlZCwgdGhlcmUgd291bGQgYmUgbm9ib2R5IGxlZnQgZWl0aGVyIHRvIHBheSBvciB0byBhc2sgdGhlIHByaWNlLiBJbiB0aGlzIGJhdHRsZSBoZSB3YXMgY29tcGxldGVseSB2aWN0b3Jpb3VzLCBhbmQgdGhlIHJlc3Qgb2YgaGlzIGNhbXBhaWduIHdhcyBhIGJyaWxsaWFudCBzdWNjZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Qb2x5Yml1cyBpbmRlZWQgc2F5cyB0aGF0IGluIGEgc2luZ2xlIGRheSB0aGUgd2FsbHMgb2YgYWxsIHRoZSBjaXRpZXMgb24gdGhpcyBzaWRlIHRoZSByaXZlciBCYWV0aXPigJRhbmQgdGhleSB3ZXJlIHZlcnkgbWFueSwgYW5kIGZ1bGwgb2Ygd2FybGlrZSBtZW7igJR3ZXJlIHRvcm4gZG93biBhdCBoaXMgY29tbWFuZC4gQW5kIENhdG8gaGltc2VsZiBzYXlzIHRoYXQgaGUgdG9vayBtb3JlIGNpdGllcyB0aGFuIGhlIHNwZW50IGRheXMgaW4gU3BhaW4sIG5vciBpcyB0aGlzIGEgbWVyZSBib2FzdCwgc2luY2UsIGluIGZhY3QsIHRoZXJlIHdlcmUgZm91ciBodW5kcmVkIG9mIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGJlZW4gZWxlY3RlZCBjb25zdWw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE5NSBCLkMuPC9ub3RlPiB3aXRoIFZhbGVyaXVzIEZsYWNjdXMsIGhpcyBpbnRpbWF0ZSBmcmllbmQsIHRoZSBwcm92aW5jZSB3aGljaCB0aGUgUm9tYW5zIGNhbGwgSGl0aGVyIFNwYWluIHdhcyBhbGxvdHRlZCB0byBoaXMgY2hhcmdlLiBIZXJlLCB3aGlsZSBoZSB3YXMgc3ViZHVpbmcgc29tZSBvZiB0aGUgdHJpYmVzLCBhbmQgd2lubmluZyBvdmVyIG90aGVycyBieSBkaXBsb21hY3ksIGEgZ3JlYXQgaG9zdCBvZiBCYXJiYXJpYW5zIGZlbGwgdXBvbiBoaW0sIGFuZCB0aHJlYXRlbmVkIHRvIGRyaXZlIGhpbSBkaXNncmFjZWZ1bGx5IG91dCBvZiB0aGUgcHJvdmluY2UuIEhlIHRoZXJlZm9yZSBiZWdnZWQgdGhlIG5laWdoYm91cmluZyBDZWx0aWJlcmlhbnMgdG8gYmVjb21lIGhpcyBhbGxpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZWlyIGRlbWFuZGluZyB0d28gaHVuZHJlZCB0YWxlbnRzIHBheSBmb3Igc3VjaCBhc3Npc3RhbmNlLCBhbGwgaGlzIG9mZmljZXJzIHRob3VnaHQgaXQgaW50b2xlcmFibGUgdGhhdCBSb21hbnMgc2hvdWxkIGFncmVlIHRvIHBheSBCYXJiYXJpYW5zIGZvciBhc3Npc3RhbmNlLiBCdXQgQ2F0byBzYWlkIHRoZXJlIHdhcyBub3RoaW5nIHRlcnJpYmxlIGluIGl0OyBzaG91bGQgdGhleSBiZSB2aWN0b3Jpb3VzLCB0aGV5IGNvdWxkIHBheSB0aGUgcHJpY2Ugd2l0aCB0aGUgc3BvaWxzIHRha2VuIGZyb20gdGhlIGVuZW15LCBhbmQgbm90IG91dCBvZiB0aGVpciBvd24gcHVyc2UsIHdoZXJlYXMsIHNob3VsZCB0aGV5IGJlIHZhbnF1aXNoZWQsIHRoZXJlIHdvdWxkIGJlIG5vYm9keSBsZWZ0IGVpdGhlciB0byBwYXkgb3IgdG8gYXNrIHRoZSBwcmljZS4gSW4gdGhpcyBiYXR0bGUgaGUgd2FzIGNvbXBsZXRlbHkgdmljdG9yaW91cywgYW5kIHRoZSByZXN0IG9mIGhpcyBjYW1wYWlnbiB3YXMgYSBicmlsbGlhbnQgc3VjY2Vzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbHliaXVzIGluZGVlZCBzYXlzIHRoYXQgaW4gYSBzaW5nbGUgZGF5IHRoZSB3YWxscyBvZiBhbGwgdGhlIGNpdGllcyBvbiB0aGlzIHNpZGUgdGhlIHJpdmVyIEJhZXRpc+KAlGFuZCB0aGV5IHdlcmUgdmVyeSBtYW55LCBhbmQgZnVsbCBvZiB3YXJsaWtlIG1lbuKAlHdlcmUgdG9ybiBkb3duIGF0IGhpcyBjb21tYW5kLiBBbmQgQ2F0byBoaW1zZWxmIHNheXMgdGhhdCBoZSB0b29rIG1vcmUgY2l0aWVzIHRoYW4gaGUgc3BlbnQgZGF5cyBpbiBTcGFpbiwgbm9yIGlzIHRoaXMgYSBtZXJlIGJvYXN0LCBzaW5jZSwgaW4gZmFjdCwgdGhlcmUgd2VyZSBmb3VyIGh1bmRyZWQgb2YgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNvbGRpZXJzIGdvdCBsYXJnZSBib290eSBpbiB0aGlzIGNhbXBhaWduLCBhbmQgaGUgZ2F2ZSBlYWNoIG9uZSBvZiB0aGVtIGEgcG91bmQgb2Ygc2lsdmVyIGJlc2lkZXMsIHNheWluZyB0aGF0IGl0IHdhcyBiZXR0ZXIgdG8gaGF2ZSBtYW55IFJvbWFucyBnbyBob21lIHdpdGggc2lsdmVyIGluIHRoZWlyIHBvY2tldHMgdGhhbiBhIGZldyB3aXRoIGdvbGQuIEJ1dCBpbiBoaXMgb3duIGNhc2UsIGhlIHNheXMgdGhhdCBubyBwYXJ0IG9mIHRoZSBib290eSBmZWxsIHRvIGhpbSwgZXhjZXB0IHdoYXQgaGUgYXRlIGFuZCBkcmFuay4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3QgdGhhdCBJIGZpbmQgZmF1bHQsPC9xPiBoZSBzYXlzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndpdGggdGhvc2Ugd2hvIHNlZWsgdG8gcHJvZml0IGJ5IHN1Y2ggYSBjYXNlLCBidXQgSSBwcmVmZXIgdG8gc3RyaXZlIGluIGJyYXZlcnkgd2l0aCB0aGUgYnJhdmVzdCwgcmF0aGVyIHRoYW4gaW4gd2VhbHRoIHdpdGggdGhlIHJpY2hlc3QsIGFuZCBpbiBncmVlZCBmb3IgbW9uZXkgd2l0aCB0aGUgZ3JlZWRpZXN0LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgc3Ryb3ZlIHRvIGtlZXAgbm90IG9ubHkgaGltc2VsZiwgYnV0IGFsc28gaGlzIGFzc29jaWF0ZXMsIGZyZWUgZnJvbSBhbGwgdGFpbnQgb2YgZ2Fpbi4gSGUgaGFkIGZpdmUgYXR0ZW5kYW50cyB3aXRoIGhpbSBpbiB0aGUgZmllbGQuIE9uZSBvZiB0aGVzZSwgd2hvc2UgbmFtZSB3YXMgUGFjY3VzLCBib3VnaHQgdGhyZWUgYm95cyBmb3IgaGlzIG93biBhY2NvdW50IGZyb20gYW1vbmcgdGhlIHB1YmxpYyBwcmlzb25lcnMsIGJ1dCBmaW5kaW5nIHRoYXQgQ2F0byB3YXMgYXdhcmUgb2YgdGhlIHRyYW5zYWN0aW9uLCBvciBldmVyIGhlIGhhZCBjb21lIGludG8gaGlzIHByZXNlbmNlLCB3ZW50IGFuZCBoYW5nZWQgaGltc2VsZi4gQ2F0byBzb2xkIHRoZSBib3lzLCBhbmQgcmVzdG9yZWQgdGhlIG1vbmV5IHRvIHRoZSBwdWJsaWMgdHJlYXN1cnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzb2xkaWVycyBnb3QgbGFyZ2UgYm9vdHkgaW4gdGhpcyBjYW1wYWlnbiwgYW5kIGhlIGdhdmUgZWFjaCBvbmUgb2YgdGhlbSBhIHBvdW5kIG9mIHNpbHZlciBiZXNpZGVzLCBzYXlpbmcgdGhhdCBpdCB3YXMgYmV0dGVyIHRvIGhhdmUgbWFueSBSb21hbnMgZ28gaG9tZSB3aXRoIHNpbHZlciBpbiB0aGVpciBwb2NrZXRzIHRoYW4gYSBmZXcgd2l0aCBnb2xkLiBCdXQgaW4gaGlzIG93biBjYXNlLCBoZSBzYXlzIHRoYXQgbm8gcGFydCBvZiB0aGUgYm9vdHkgZmVsbCB0byBoaW0sIGV4Y2VwdCB3aGF0IGhlIGF0ZSBhbmQgZHJhbmsuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3QgdGhhdCBJIGZpbmQgZmF1bHQsPC9xPiBoZSBzYXlzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2l0aCB0aG9zZSB3aG8gc2VlayB0byBwcm9maXQgYnkgc3VjaCBhIGNhc2UsIGJ1dCBJIHByZWZlciB0byBzdHJpdmUgaW4gYnJhdmVyeSB3aXRoIHRoZSBicmF2ZXN0LCByYXRoZXIgdGhhbiBpbiB3ZWFsdGggd2l0aCB0aGUgcmljaGVzdCwgYW5kIGluIGdyZWVkIGZvciBtb25leSB3aXRoIHRoZSBncmVlZGllc3QuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBzdHJvdmUgdG8ga2VlcCBub3Qgb25seSBoaW1zZWxmLCBidXQgYWxzbyBoaXMgYXNzb2NpYXRlcywgZnJlZSBmcm9tIGFsbCB0YWludCBvZiBnYWluLiBIZSBoYWQgZml2ZSBhdHRlbmRhbnRzIHdpdGggaGltIGluIHRoZSBmaWVsZC4gT25lIG9mIHRoZXNlLCB3aG9zZSBuYW1lIHdhcyBQYWNjdXMsIGJvdWdodCB0aHJlZSBib3lzIGZvciBoaXMgb3duIGFjY291bnQgZnJvbSBhbW9uZyB0aGUgcHVibGljIHByaXNvbmVycywgYnV0IGZpbmRpbmcgdGhhdCBDYXRvIHdhcyBhd2FyZSBvZiB0aGUgdHJhbnNhY3Rpb24sIG9yIGV2ZXIgaGUgaGFkIGNvbWUgaW50byBoaXMgcHJlc2VuY2UsIHdlbnQgYW5kIGhhbmdlZCBoaW1zZWxmLiBDYXRvIHNvbGQgdGhlIGJveXMsIGFuZCByZXN0b3JlZCB0aGUgbW9uZXkgdG8gdGhlIHB1YmxpYyB0cmVhc3VyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2F0byBzdGlsbCB0YXJyaWVkIGluIFNwYWluLCBTY2lwaW8gdGhlIEdyZWF0LCB3aG8gd2FzIGhpcyBlbmVteSwgYW5kIHdpc2hlZCB0byBvYnN0cnVjdCB0aGUgY3VycmVudCBvZiBoaXMgc3VjY2Vzc2VzIGFuZCB0YWtlIGF3YXkgZnJvbSBoaW0gdGhlIGFkbWluaXN0cmF0aW9uIG9mIGFmZmFpcnMgaW4gU3BhaW4sIGdvdCBoaW1zZWxmIGFwcG9pbnRlZCBoaXMgc3VjY2Vzc29yIGluIGNvbW1hbmQgb2YgdGhhdCBwcm92aW5jZS4gVGhlbiBoZSBzZXQgb3V0IHdpdGggYWxsIHRoZSBzcGVlZCBwb3NzaWJsZSwgYW5kIGJyb3VnaHQgQ2F0bydzIGNvbW1hbmQgdG8gYW4gZW5kLiBCdXQgQ2F0byB0b29rIGZpdmUgY29ob3J0cyBvZiBtZW4tYXQtYXJtcyBhbmQgZml2ZSBodW5kcmVkIGhvcnNlbWVuIGFzIGVzY29ydCBvbiBoaXMgd2F5IGhvbWUsIGFuZCBvbiB0aGUgbWFyY2ggc3ViZHVlZCB0aGUgdHJpYmUgb2YgdGhlIExhY2V0YW5pYW5zLCBhbmQgcHV0IHRvIGRlYXRoIHNpeCBodW5kcmVkIGRlc2VydGVycyB3aG9tIHRoZXkgZGVsaXZlcmVkIHVwIHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U2NpcGlvIHdhcyBlbnJhZ2VkIGF0IHRoaXMgcHJvY2VlZGluZywgYnV0IENhdG8sIHRyZWF0aW5nIGhpbSB3aXRoIG1vY2sgaHVtaWxpdHksIHNhaWQgdGhhdCBvbmx5IHRoZW4gd291bGQgUm9tZSBiZSBhdCBoZXIgZ3JlYXRlc3QsIHdoZW4gaGVyIG1lbiBvZiBoaWdoIGJpcnRoIHJlZnVzZWQgdG8geWllbGQgdGhlIHBhbG0gb2YgdmlydHVlIHRvIG1lbiBvZiBsb3dlciByYW5rLCBhbmQgd2hlbiBwbGViZWlhbnMgbGlrZSBoaW1zZWxmIGNvbnRlbmRlZCBpbiB2aXJ0dWUgd2l0aCB0aGVpciBzdXBlcmlvcnMgaW4gYmlydGggYW5kIHJlcHV0YXRpb24uIEhvd2V2ZXIsIGluIHNwaXRlIG9mIFNjaXBpbydzIGRpc3BsZWFzdXJlLCB0aGUgU2VuYXRlIHZvdGVkIHRoYXQgbm8gY2hhbmdlIHdoYXRldmVyIGJlIG1hZGUgaW4gd2hhdCBDYXRvIGhhZCBvcmRlcmVkIGFuZCBhcnJhbmdlZCwgYW5kIHNvIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiBTY2lwaW8gd2FzIG1hcmtlZCBieSBpbmFjdGl2aXR5IGFuZCBpZGxlbmVzcywgYW5kIGRldHJhY3RlZCBmcm9tIGhpcyBvd24sIHJhdGhlciB0aGFuIGZyb20gQ2F0bydzIHJlcHV0YXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIG9uIHRoZSBvdGhlciBoYW5kLCBjZWxlYnJhdGVkIGEgdHJpdW1waC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xOTQgQi5DLjwvbm90ZT4gTW9zdCBtZW4gd2hvIHN0cml2ZSBtb3JlIGZvciByZXB1dGF0aW9uIHRoYW4gZm9yIHZpcnR1ZSwgd2hlbiBvbmNlIHRoZXkgaGF2ZSBhdHRhaW5lZCB0aGUgaGlnaGVzdCBob25vdXJzIG9mIGNvbnN1bHNoaXAgYW5kIHRyaXVtcGhzLCBzdHJhaWdodHdheSBhZGp1c3QgdGhlaXIgZnV0dXJlIGxpdmVzIHRvIHRoZSBlbmpveW1lbnQgb2YgYSBwbGVhc3VyYWJsZSBlYXNlLCBhbmQgZ2l2ZSB1cCB0aGVpciBwdWJsaWMgY2FyZWVycy4gQnV0IENhdG8gZGlkIG5vdCB0aHVzIHJlbWl0IGFuZCBkaXNtaXNzIGhpcyB2aXJ0dWUsIG5heSwgcmF0aGVyLCBsaWtlIG1lbiBmaXJzdCB0YWtpbmcgdXAgdGhlIHB1YmxpYyBzZXJ2aWNlIGFuZCBhbGwgYXRoaXJzdCBmb3IgaG9ub3VyIGFuZCByZXB1dGF0aW9uLCBoZSBnaXJ0IGhpcyBsb2lucyBhbmV3LCBhbmQgaGVsZCBoaW1zZWxmIGV2ZXIgcmVhZHkgdG8gc2VydmUgaGlzIGZyaWVuZHMgYW5kIGZlbGxvdy1jaXRpemVucywgZWl0aGVyIGluIHRoZSBmb3J1bSBvciBpbiB0aGUgZmllbGQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgQ2F0byBzdGlsbCB0YXJyaWVkIGluIFNwYWluLCBTY2lwaW8gdGhlIEdyZWF0LCB3aG8gd2FzIGhpcyBlbmVteSwgYW5kIHdpc2hlZCB0byBvYnN0cnVjdCB0aGUgY3VycmVudCBvZiBoaXMgc3VjY2Vzc2VzIGFuZCB0YWtlIGF3YXkgZnJvbSBoaW0gdGhlIGFkbWluaXN0cmF0aW9uIG9mIGFmZmFpcnMgaW4gU3BhaW4sIGdvdCBoaW1zZWxmIGFwcG9pbnRlZCBoaXMgc3VjY2Vzc29yIGluIGNvbW1hbmQgb2YgdGhhdCBwcm92aW5jZS4gVGhlbiBoZSBzZXQgb3V0IHdpdGggYWxsIHRoZSBzcGVlZCBwb3NzaWJsZSwgYW5kIGJyb3VnaHQgQ2F0bydzIGNvbW1hbmQgdG8gYW4gZW5kLiBCdXQgQ2F0byB0b29rIGZpdmUgY29ob3J0cyBvZiBtZW4tYXQtYXJtcyBhbmQgZml2ZSBodW5kcmVkIGhvcnNlbWVuIGFzIGVzY29ydCBvbiBoaXMgd2F5IGhvbWUsIGFuZCBvbiB0aGUgbWFyY2ggc3ViZHVlZCB0aGUgdHJpYmUgb2YgdGhlIExhY2V0YW5pYW5zLCBhbmQgcHV0IHRvIGRlYXRoIHNpeCBodW5kcmVkIGRlc2VydGVycyB3aG9tIHRoZXkgZGVsaXZlcmVkIHVwIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNjaXBpbyB3YXMgZW5yYWdlZCBhdCB0aGlzIHByb2NlZWRpbmcsIGJ1dCBDYXRvLCB0cmVhdGluZyBoaW0gd2l0aCBtb2NrIGh1bWlsaXR5LCBzYWlkIHRoYXQgb25seSB0aGVuIHdvdWxkIFJvbWUgYmUgYXQgaGVyIGdyZWF0ZXN0LCB3aGVuIGhlciBtZW4gb2YgaGlnaCBiaXJ0aCByZWZ1c2VkIHRvIHlpZWxkIHRoZSBwYWxtIG9mIHZpcnR1ZSB0byBtZW4gb2YgbG93ZXIgcmFuaywgYW5kIHdoZW4gcGxlYmVpYW5zIGxpa2UgaGltc2VsZiBjb250ZW5kZWQgaW4gdmlydHVlIHdpdGggdGhlaXIgc3VwZXJpb3JzIGluIGJpcnRoIGFuZCByZXB1dGF0aW9uLiBIb3dldmVyLCBpbiBzcGl0ZSBvZiBTY2lwaW8ncyBkaXNwbGVhc3VyZSwgdGhlIFNlbmF0ZSB2b3RlZCB0aGF0IG5vIGNoYW5nZSB3aGF0ZXZlciBiZSBtYWRlIGluIHdoYXQgQ2F0byBoYWQgb3JkZXJlZCBhbmQgYXJyYW5nZWQsIGFuZCBzbyB0aGUgYWRtaW5pc3RyYXRpb24gb2YgU2NpcGlvIHdhcyBtYXJrZWQgYnkgaW5hY3Rpdml0eSBhbmQgaWRsZW5lc3MsIGFuZCBkZXRyYWN0ZWQgZnJvbSBoaXMgb3duLCByYXRoZXIgdGhhbiBmcm9tIENhdG8ncyByZXB1dGF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIG9uIHRoZSBvdGhlciBoYW5kLCBjZWxlYnJhdGVkIGEgdHJpdW1waC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE5NCBCLkMuPC9ub3RlPiBNb3N0IG1lbiB3aG8gc3RyaXZlIG1vcmUgZm9yIHJlcHV0YXRpb24gdGhhbiBmb3IgdmlydHVlLCB3aGVuIG9uY2UgdGhleSBoYXZlIGF0dGFpbmVkIHRoZSBoaWdoZXN0IGhvbm91cnMgb2YgY29uc3Vsc2hpcCBhbmQgdHJpdW1waHMsIHN0cmFpZ2h0d2F5IGFkanVzdCB0aGVpciBmdXR1cmUgbGl2ZXMgdG8gdGhlIGVuam95bWVudCBvZiBhIHBsZWFzdXJhYmxlIGVhc2UsIGFuZCBnaXZlIHVwIHRoZWlyIHB1YmxpYyBjYXJlZXJzLiBCdXQgQ2F0byBkaWQgbm90IHRodXMgcmVtaXQgYW5kIGRpc21pc3MgaGlzIHZpcnR1ZSwgbmF5LCByYXRoZXIsIGxpa2UgbWVuIGZpcnN0IHRha2luZyB1cCB0aGUgcHVibGljIHNlcnZpY2UgYW5kIGFsbCBhdGhpcnN0IGZvciBob25vdXIgYW5kIHJlcHV0YXRpb24sIGhlIGdpcnQgaGlzIGxvaW5zIGFuZXcsIGFuZCBoZWxkIGhpbXNlbGYgZXZlciByZWFkeSB0byBzZXJ2ZSBoaXMgZnJpZW5kcyBhbmQgZmVsbG93LWNpdGl6ZW5zLCBlaXRoZXIgaW4gdGhlIGZvcnVtIG9yIGluIHRoZSBmaWVsZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGl0IHdhcyB0aGF0IGhlIGFzc2lzdGVkIFRpYmVyaXVzIFNlbXByb25pdXMgdGhlIGNvbnN1bCBpbiBzdWJkdWluZyB0aGUgcmVnaW9ucyBpbiBUaHJhY2UgYW5kIG9uIHRoZSBEYW51YmUsIGFjdGluZyBhcyBoaXMgYW1iYXNzYWRvcjsgYW5kIGFzIGxlZ2lvbmFyeSB0cmlidW5lIHVuZGVyIE1hbml1cyBBY2lsaXVzLCBoZSBtYXJjaGVkIGludG8gR3JlZWNlIGFnYWluc3QgQW50aW9jaHVzIHRoZSBHcmVhdCwgd2hvIGdhdmUgdGhlIFJvbWFucyBtb3JlIHRvIGZlYXIgdGhhbiBhbnkgbWFuIGFmdGVyIEhhbm5pYmFsIEZvciBoZSB3b24gYmFjayBhbG1vc3QgYWxsIG9mIFNlbGV1Y3VzIE5pY2F0b3IncyBmb3JtZXIgZG9taW5pb25zIGluIEFzaWEsIHJlZHVjZWQgdG8gc3ViamVjdGlvbiBtYW55IHdhcmxpa2UgbmF0aW9ucyBvZiBCYXJiYXJpYW5zLCBhbmQgd2FzIGVhZ2VyIHRvIGVuZ2FnZSB0aGUgUm9tYW5zLCB3aG9tIGhlIGRlZW1lZCB0aGUgb25seSB3b3J0aHkgZm9lbWVuIGxlZnQgZm9yIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgY3Jvc3NlZCBpbnRvIEdyZWVjZSB3aXRoIGFuIGFybXksIG1ha2luZyB0aGUgZnJlZWluZyBvZiB0aGUgR3JlZWtzIGEgc3BlY2lvdXMgZ3JvdW5kIGZvciB3YXIuIFRoaXMgdGhleSBkaWQgbm90IG5lZWQgYXQgYWxsLCBzaW5jZSB0aGV5IGhhZCByZWNlbnRseSBiZWVuIG1hZGUgZnJlZSBhbmQgaW5kZXBlbmRlbnQgb2YgUGhpbGlwIGFuZCB0aGUgTWFjZWRvbmlhbnMgYnkgZ3JhY2Ugb2YgdGhlIFJvbWFucy4gR3JlZWNlIHdhcyBhdCBvbmNlIGEgc3Rvcm15IHNlYSBvZiBob3BlcyBhbmQgZmVhcnMsIGJlaW5nIGNvcnJ1cHRlZCBieSBoZXIgZGVtYWdvZ3VlcyB3aXRoIGV4cGVjdGF0aW9ucyBvZiByb3lhbCBib3VudHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBNYW5pdXMgc2VudCBlbnZveXMgdG8gdGhlIHNldmVyYWwgY2l0aWVzLiBNb3N0IG9mIHRob3NlIHdoaWNoIHdlcmUgdW5zZXR0bGVkIGluIHRoZWlyIGFsbGVnaWFuY2UgVGl0dXMgRmxhbWluaW51cyByZXN0cmFpbmVkIHdpdGhvdXQgYWRvLCBhbmQgcXVpZXRlZCBkb3duLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBoaXMgPHRpdGxlPkxpZmU8L3RpdGxlPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE1IiB2YWxpZD0ieWVzIj5DaGFwdGVycyB4di14dmlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgQ29yaW50aCwgUGF0cmFlLCBhbmQgQWVnaXVtIHdlcmUgYnJvdWdodCBvdmVyIHRvIFJvbWUgYnkgQ2F0by4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGl0IHdhcyB0aGF0IGhlIGFzc2lzdGVkIFRpYmVyaXVzIFNlbXByb25pdXMgdGhlIGNvbnN1bCBpbiBzdWJkdWluZyB0aGUgcmVnaW9ucyBpbiBUaHJhY2UgYW5kIG9uIHRoZSBEYW51YmUsIGFjdGluZyBhcyBoaXMgYW1iYXNzYWRvcjsgYW5kIGFzIGxlZ2lvbmFyeSB0cmlidW5lIHVuZGVyIE1hbml1cyBBY2lsaXVzLCBoZSBtYXJjaGVkIGludG8gR3JlZWNlIGFnYWluc3QgQW50aW9jaHVzIHRoZSBHcmVhdCwgd2hvIGdhdmUgdGhlIFJvbWFucyBtb3JlIHRvIGZlYXIgdGhhbiBhbnkgbWFuIGFmdGVyIEhhbm5pYmFsIEZvciBoZSB3b24gYmFjayBhbG1vc3QgYWxsIG9mIFNlbGV1Y3VzIE5pY2F0b3IncyBmb3JtZXIgZG9taW5pb25zIGluIEFzaWEsIHJlZHVjZWQgdG8gc3ViamVjdGlvbiBtYW55IHdhcmxpa2UgbmF0aW9ucyBvZiBCYXJiYXJpYW5zLCBhbmQgd2FzIGVhZ2VyIHRvIGVuZ2FnZSB0aGUgUm9tYW5zLCB3aG9tIGhlIGRlZW1lZCB0aGUgb25seSB3b3J0aHkgZm9lbWVuIGxlZnQgZm9yIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIGNyb3NzZWQgaW50byBHcmVlY2Ugd2l0aCBhbiBhcm15LCBtYWtpbmcgdGhlIGZyZWVpbmcgb2YgdGhlIEdyZWVrcyBhIHNwZWNpb3VzIGdyb3VuZCBmb3Igd2FyLiBUaGlzIHRoZXkgZGlkIG5vdCBuZWVkIGF0IGFsbCwgc2luY2UgdGhleSBoYWQgcmVjZW50bHkgYmVlbiBtYWRlIGZyZWUgYW5kIGluZGVwZW5kZW50IG9mIFBoaWxpcCBhbmQgdGhlIE1hY2Vkb25pYW5zIGJ5IGdyYWNlIG9mIHRoZSBSb21hbnMuIEdyZWVjZSB3YXMgYXQgb25jZSBhIHN0b3JteSBzZWEgb2YgaG9wZXMgYW5kIGZlYXJzLCBiZWluZyBjb3JydXB0ZWQgYnkgaGVyIGRlbWFnb2d1ZXMgd2l0aCBleHBlY3RhdGlvbnMgb2Ygcm95YWwgYm91bnR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBNYW5pdXMgc2VudCBlbnZveXMgdG8gdGhlIHNldmVyYWwgY2l0aWVzLiBNb3N0IG9mIHRob3NlIHdoaWNoIHdlcmUgdW5zZXR0bGVkIGluIHRoZWlyIGFsbGVnaWFuY2UgVGl0dXMgRmxhbWluaW51cyByZXN0cmFpbmVkIHdpdGhvdXQgYWRvLCBhbmQgcXVpZXRlZCBkb3duLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE1IiB2YWxpZD0ieWVzIj5DaGFwdGVycyB4di14dmlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBidXQgQ29yaW50aCwgUGF0cmFlLCBhbmQgQWVnaXVtIHdlcmUgYnJvdWdodCBvdmVyIHRvIFJvbWUgYnkgQ2F0by4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTUiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXJzIHh2LXh2aWkuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIHNwZW50IG11Y2ggdGltZSBhdCBBdGhlbnMuIEFuZCB3ZSBhcmUgdG9sZCB0aGF0IGEgY2VydGFpbiBzcGVlY2ggb2YgaGlzIGlzIGV4dGFudCwgd2hpY2ggaGUgYWRkcmVzc2VkIHRvIHRoZSBBdGhlbmlhbiBwZW9wbGUgaW4gR3JlZWssIGRlY2xhcmluZyB0aGF0IGhlIGFkbWlyZWQgdGhlIHZpcnR1ZXMgb2YgdGhlIGFuY2llbnQgQXRoZW5pYW5zLCBhbmQgd2FzIGdsYWQgdG8gYmVob2xkIGEgY2l0eSBzbyBiZWF1dGlmdWwgYW5kIGdyYW5kIGFzIHRoZWlycy4gQnV0IHRoaXMgaXMgbm90IHRydWUuIE9uIHRoZSBjb250cmFyeSwgaGUgZGVhbHQgd2l0aCB0aGUgQXRoZW5pYW5zIHRocm91Z2ggYW4gaW50ZXJwcmV0ZXIuIEhlIGNvdWxkIGhhdmUgc3Bva2VuIHRvIHRoZW0gZGlyZWN0bHksIGJ1dCBoZSBhbHdheXMgY2x1bmcgdG8gaGlzIG5hdGl2ZSB3YXlzLCBhbmQgbW9ja2VkIGF0IHRob3NlIHdobyB3ZXJlIGxvc3QgaW4gYWRtaXJhdGlvbiBvZiBhbnl0aGluZyB0aGF0IHdhcyBHcmVlay4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCBoZSBwb2tlZCBmdW4gYXQgUG9zdHVtaXVzIEFsYmludXMsIHdobyB3cm90ZSBhIGhpc3RvcnkgaW4gR3JlZWssIGFuZCBhc2tlZCB0aGUgaW5kdWxnZW5jZSBvZiBoaXMgcmVhZGVycy4gQ2F0byBzYWlkIHRoZXkgbWlnaHQgaGF2ZSBzaG93biBoaW0gaW5kdWxnZW5jZSBoYWQgaGUgdW5kZXJ0YWtlbiBoaXMgdGFzayBpbiBjb25zZXF1ZW5jZSBvZiBhIGNvbXB1bHNvcnkgdm90ZSBvZiB0aGUgQW1waGljdHlvbmljIEFzc2VtYmx5LiBNb3Jlb3ZlciwgaGUgc2F5cyB0aGUgQXRoZW5pYW5zIHdlcmUgYXN0b25pc2hlZCBhdCB0aGUgc3BlZWQgYW5kIHB1bmdlbmN5IG9mIGhpcyBkaXNjb3Vyc2UuIEZvciB3aGF0IGhlIGhpbXNlbGYgc2V0IGZvcnRoIHdpdGggYnJldml0eSwgdGhlIGludGVycHJldGVyIHdvdWxkIHJlcGVhdCB0byB0aGVtIGF0IGdyZWF0IGxlbmd0aCBhbmQgd2l0aCBtYW55IHdvcmRzOyBhbmQgb24gdGhlIHdob2xlIGhlIHRob3VnaHQgdGhlIHdvcmRzIG9mIHRoZSBHcmVla3Mgd2VyZSBib3JuIG9uIHRoZWlyIGxpcHMsIGJ1dCB0aG9zZSBvZiB0aGUgUm9tYW5zIGluIHRoZWlyIGhlYXJ0cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc3BlbnQgbXVjaCB0aW1lIGF0IEF0aGVucy4gQW5kIHdlIGFyZSB0b2xkIHRoYXQgYSBjZXJ0YWluIHNwZWVjaCBvZiBoaXMgaXMgZXh0YW50LCB3aGljaCBoZSBhZGRyZXNzZWQgdG8gdGhlIEF0aGVuaWFuIHBlb3BsZSBpbiBHcmVlaywgZGVjbGFyaW5nIHRoYXQgaGUgYWRtaXJlZCB0aGUgdmlydHVlcyBvZiB0aGUgYW5jaWVudCBBdGhlbmlhbnMsIGFuZCB3YXMgZ2xhZCB0byBiZWhvbGQgYSBjaXR5IHNvIGJlYXV0aWZ1bCBhbmQgZ3JhbmQgYXMgdGhlaXJzLiBCdXQgdGhpcyBpcyBub3QgdHJ1ZS4gT24gdGhlIGNvbnRyYXJ5LCBoZSBkZWFsdCB3aXRoIHRoZSBBdGhlbmlhbnMgdGhyb3VnaCBhbiBpbnRlcnByZXRlci4gSGUgY291bGQgaGF2ZSBzcG9rZW4gdG8gdGhlbSBkaXJlY3RseSwgYnV0IGhlIGFsd2F5cyBjbHVuZyB0byBoaXMgbmF0aXZlIHdheXMsIGFuZCBtb2NrZWQgYXQgdGhvc2Ugd2hvIHdlcmUgbG9zdCBpbiBhZG1pcmF0aW9uIG9mIGFueXRoaW5nIHRoYXQgd2FzIEdyZWVrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgaGUgcG9rZWQgZnVuIGF0IFBvc3R1bWl1cyBBbGJpbnVzLCB3aG8gd3JvdGUgYSBoaXN0b3J5IGluIEdyZWVrLCBhbmQgYXNrZWQgdGhlIGluZHVsZ2VuY2Ugb2YgaGlzIHJlYWRlcnMuIENhdG8gc2FpZCB0aGV5IG1pZ2h0IGhhdmUgc2hvd24gaGltIGluZHVsZ2VuY2UgaGFkIGhlIHVuZGVydGFrZW4gaGlzIHRhc2sgaW4gY29uc2VxdWVuY2Ugb2YgYSBjb21wdWxzb3J5IHZvdGUgb2YgdGhlIEFtcGhpY3R5b25pYyBBc3NlbWJseS4gTW9yZW92ZXIsIGhlIHNheXMgdGhlIEF0aGVuaWFucyB3ZXJlIGFzdG9uaXNoZWQgYXQgdGhlIHNwZWVkIGFuZCBwdW5nZW5jeSBvZiBoaXMgZGlzY291cnNlLiBGb3Igd2hhdCBoZSBoaW1zZWxmIHNldCBmb3J0aCB3aXRoIGJyZXZpdHksIHRoZSBpbnRlcnByZXRlciB3b3VsZCByZXBlYXQgdG8gdGhlbSBhdCBncmVhdCBsZW5ndGggYW5kIHdpdGggbWFueSB3b3JkczsgYW5kIG9uIHRoZSB3aG9sZSBoZSB0aG91Z2h0IHRoZSB3b3JkcyBvZiB0aGUgR3JlZWtzIHdlcmUgYm9ybiBvbiB0aGVpciBsaXBzLCBidXQgdGhvc2Ugb2YgdGhlIFJvbWFucyBpbiB0aGVpciBoZWFydHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBBbnRpb2NodXMgaGFkIGJsb2NrZWQgdXAgdGhlIG5hcnJvdyBwYXNzIG9mIFRoZXJtb3B5bGFlIHdpdGggaGlzIGFybXksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTkxIEIuQy48L25vdGU+IGFkZGluZyB0cmVuY2hlcyBhbmQgd2FsbHMgdG8gdGhlIG5hdHVyYWwgZGVmZW5jZXMgb2YgdGhlIHBsYWNlLCBhbmQgc2F0IHRoZXJlLCB0aGlua2luZyB0aGF0IGhlIGhhZCBsb2NrZWQgdGhlIHdhciBvdXQgb2YgR3JlZWNlLiBBbmQgdGhlIFJvbWFucyBkaWQgaW5kZWVkIGRlc3BhaXIgdXR0ZXJseSBvZiBmb3JjaW5nIGEgZGlyZWN0IHBhc3NhZ2UuIEJ1dCBDYXRvLCBjYWxsaW5nIHRvIG1pbmQgdGhlIGZhbW91cyBjb21wYXNzIGFuZCBjaXJjdWl0IG9mIHRoZSBwYXNzIHdoaWNoIHRoZSBQZXJzaWFucyBoYWQgb25jZSBtYWRlLCB0b29rIGEgY29uc2lkZXJhYmxlIGZvcmNlIGFuZCBzZXQgb3V0IHVuZGVyIGNvdmVyIG9mIGRhcmtuZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGNsaW1iZWQgdGhlIGhlaWdodHMsIGJ1dCB0aGVpciBndWlkZSwgd2hvIHdhcyBhIHByaXNvbmVyIG9mIHdhciwgbG9zdCB0aGUgd2F5LCBhbmQgd2FuZGVyZWQgYWJvdXQgaW4gaW1wcmFjdGljYWJsZSBhbmQgcHJlY2lwaXRvdXMgcGxhY2VzIHVudGlsIGhlIGhhZCBmaWxsZWQgdGhlIHNvbGRpZXJzIHdpdGggZHJlYWRmdWwgZGVqZWN0aW9uIGFuZCBmZWFyLiBDYXRvLCBzZWVpbmcgdGhlaXIgcGVyaWwsIGJhZGUgdGhlIHJlc3QgcmVtYWluIHF1aWV0bHkgd2hlcmUgdGhleSB3ZXJlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSBoZSBoaW1zZWxmLCB3aXRoIGEgY2VydGFpbiBMdWNpdXMgTWFubGl1cywgYW4gZXhwZXJ0IG1vdW50YWluLWNsaW1iZXIsIG1hZGUgaGlzIHdheSBhbG9uZywgd2l0aCBncmVhdCB0b2lsIGFuZCBoYXphcmQsIGluIHRoZSBkZW5zZSBkYXJrbmVzcyBvZiBhIG1vb25sZXNzIG5pZ2h0LCBoaXMgdmlzaW9uIG11Y2ggaW1wZWRlZCBhbmQgb2JzY3VyZWQgYnkgd2lsZCBvbGl2ZSB0cmVlcyBhbmQgcm9ja3kgcGVha3MsIHVudGlsIGF0IGxhc3QgdGhleSBjYW1lIHVwb24gYSBwYXRoLiBUaGlzLCB0aGV5IHRob3VnaHQsIGxlZCBkb3duIHRvIHRoZSBlbmVteSdzIGNhbXAuIFNvIHRoZXkgcHV0IG1hcmtzIGFuZCBzaWducyBvbiBzb21lIGNvbnNwaWN1b3VzIGNsaWZmcyB3aGljaCB0b3dlcmVkIG92ZXIgTW91bnQgQ2FsbGlkcm9tdXMsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuIG1hZGUgdGhlaXIgd2F5IGJhY2sgYWdhaW4gdG8gdGhlIG1haW4gYm9keS4gVGhpcyB0b28gdGhleSBjb25kdWN0ZWQgdG8gdGhlIG1hcmtzIGFuZCBzaWducywgc3RydWNrIGludG8gdGhlIHBhdGggaW5kaWNhdGVkIGJ5IHRoZXNlLCBhbmQgc3RhcnRlZCBmb3J3YXJkLiBCdXQgd2hlbiB0aGV5IGhhZCBnb25lIG9uIGEgbGl0dGxlIHdheSwgdGhlIHBhdGggZmFpbGVkIHRoZW0sIGFuZCBhIHJhdmluZSB5YXduZWQgdG8gcmVjZWl2ZSB0aGVtLiBPbmNlIG1vcmUgZGVqZWN0aW9uIGFuZCBmZWFyIHdlcmUgcmlmZS4gVGhleSBkaWQgbm90IGtub3cgYW5kIGNvdWxkIG5vdCBzZWUgdGhhdCB0aGV5IHdlcmUgcmlnaHQgdXBvbiB0aGUgZW5lbXkgd2hvbSB0aGV5IHNvdWdodC4gQnV0IHByZXNlbnRseSBnbGVhbXMgb2YgZGF5bGlnaHQgY2FtZSwgaGVyZSBhbmQgdGhlcmUgYSBtYW4gdGhvdWdodCBoZSBoZWFyZCB2b2ljZXMsIGFuZCBzb29uIHRoZXkgYWN0dWFsbHkgc2F3IGEgR3JlZWsgb3V0cG9zdCBlbnRyZW5jaGVkIGF0IHRoZSBmb290IG9mIHRoZSBjbGlmZnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gQ2F0byBoYWx0ZWQgaGlzIGZvcmNlcyB0aGVyZSwgYW5kIHN1bW1vbmVkIHRoZSBtZW4gb2YgRmlybXVtIHRvIGEgcHJpdmF0ZSBjb25mZXJlbmNlLiBUaGVzZSBzb2xkaWVycyBoZSBoYWQgYWx3YXlzIGZvdW5kIHRydXN0eSBhbmQgemVhbG91cyBpbiBoaXMgc2VydmljZS4gV2hlbiB0aGV5IGhhZCBydW4gdXAgYW5kIHN0b29kIGdyb3VwZWQgYWJvdXQgaGltIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBtdXN0IHRha2Ugb25lIG9mIHRoZSBlbmVteSdzIG1lbiBhbGl2ZSwgYW5kIGxlYXJuIGZyb20gaGltIHdobyB0aGV5IGFyZSB0aGF0IGZvcm0gdGhpcyBhZHZhbmNlIGd1YXJkLCB3aGF0IHRoZWlyIG51bWJlciBpcywgYWlkIHdpdGggd2hhdCBkaXNwb3NpdGlvbiBhbmQgYXJyYXkgdGhlaXIgbWFpbiBib2R5IGF3YWl0cyB1cy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdGFzayBkZW1hbmRzIHRoZSBzd2lmdCBhbmQgYm9sZCBsZWFwIG9mIGxpb25zIGZlYXJsZXNzbHkgcnVzaGluZyBhbGwgdW5hcm1lZCB1cG9uIHRoZSB0aW1vcm91cyBiZWFzdHMgb24gd2hpY2ggdGhleSBwcmV5LjwvcT4gU28gc3Bha2UgQ2F0bywgYW5kIHRoZSBGaXJtaWFucyBpbnN0YW50bHkgc3RhcnRlZCwganVzdCBhcyB0aGV5IHdlcmUsIHJ1c2hlZCBkb3duIHRoZSBtb3VudGFpbi1zaWRlLCBhbmQgcmFuIHVwb24gdGhlIGVuZW15J3Mgc2VudGluZWxzLiBGYWxsaW5nIHVwb24gdGhlbSB1bmV4cGVjdGVkbHksIHRoZXkgdGhyZXcgdGhlbSBhbGwgaW50byBjb25mdXNpb24gYW5kIHNjYXR0ZXJlZCB0aGVtIGluIGZsaWdodDsgb25lIG9mIHRoZW0gdGhleSBzZWl6ZWQsIGFybXMgYW5kIGFsbCwgYW5kIGRlbGl2ZXJlZCBoaW0gb3ZlciB0byBDYXRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZSBjYXB0aXZlIENhdG8gbGVhcm5lZCB0aGF0IHRoZSBtYWluIGZvcmNlIG9mIHRoZSBlbmVteSB3YXMgZW5jYW1wZWQgaW4gdGhlIHBhc3Mgd2l0aCB0aGUga2luZyBoaW1zZWxmLCBhbmQgdGhhdCB0aGUgZGV0YWNobWVudCBndWFyZGluZyB0aGUgcGFzcyBvdmVyIHRoZSBtb3VudGFpbnMgd2FzIGNvbXBvc2VkIG9mIHNpeCBodW5kcmVkIHBpY2tlZCBBZXRvbGlhbnMuIERlc3Bpc2luZyB0aGVpciBzbWFsbCBudW1iZXJzIGFuZCB0aGVpciBjYXJlbGVzc25lc3MsIGhlIGxlZCBoaXMgdHJvb3BzIGFnYWluc3QgdGhlbSBhdCBvbmNlLCB3aXRoIGJyYXkgb2YgdHJ1bXBldCBhbmQgYmF0dGxlLWNyeSwgYmVpbmcgaGltc2VsZiBmaXJzdCB0byBkcmF3IGhpcyBzd29yZC4gQnV0IHdoZW4gdGhlIGVuZW15IHNhdyBoaXMgbWVuIHBvdXJpbmcgZG93biB1cG9uIHRoZW0gZnJvbSB0aGUgY2xpZmZzLCB0aGV5IGZsZWQgdG8gdGhlIG1haW4gYXJteSwgYW5kIGZpbGxlZCB0aGVtIGFsbCB3aXRoIGNvbmZ1c2lvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFudGlvY2h1cyBoYWQgYmxvY2tlZCB1cCB0aGUgbmFycm93IHBhc3Mgb2YgVGhlcm1vcHlsYWUgd2l0aCBoaXMgYXJteSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE5MSBCLkMuPC9ub3RlPiBhZGRpbmcgdHJlbmNoZXMgYW5kIHdhbGxzIHRvIHRoZSBuYXR1cmFsIGRlZmVuY2VzIG9mIHRoZSBwbGFjZSwgYW5kIHNhdCB0aGVyZSwgdGhpbmtpbmcgdGhhdCBoZSBoYWQgbG9ja2VkIHRoZSB3YXIgb3V0IG9mIEdyZWVjZS4gQW5kIHRoZSBSb21hbnMgZGlkIGluZGVlZCBkZXNwYWlyIHV0dGVybHkgb2YgZm9yY2luZyBhIGRpcmVjdCBwYXNzYWdlLiBCdXQgQ2F0bywgY2FsbGluZyB0byBtaW5kIHRoZSBmYW1vdXMgY29tcGFzcyBhbmQgY2lyY3VpdCBvZiB0aGUgcGFzcyB3aGljaCB0aGUgUGVyc2lhbnMgaGFkIG9uY2UgbWFkZSwgdG9vayBhIGNvbnNpZGVyYWJsZSBmb3JjZSBhbmQgc2V0IG91dCB1bmRlciBjb3ZlciBvZiBkYXJrbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgY2xpbWJlZCB0aGUgaGVpZ2h0cywgYnV0IHRoZWlyIGd1aWRlLCB3aG8gd2FzIGEgcHJpc29uZXIgb2Ygd2FyLCBsb3N0IHRoZSB3YXksIGFuZCB3YW5kZXJlZCBhYm91dCBpbiBpbXByYWN0aWNhYmxlIGFuZCBwcmVjaXBpdG91cyBwbGFjZXMgdW50aWwgaGUgaGFkIGZpbGxlZCB0aGUgc29sZGllcnMgd2l0aCBkcmVhZGZ1bCBkZWplY3Rpb24gYW5kIGZlYXIuIENhdG8sIHNlZWluZyB0aGVpciBwZXJpbCwgYmFkZSB0aGUgcmVzdCByZW1haW4gcXVpZXRseSB3aGVyZSB0aGV5IHdlcmUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGhlIGhpbXNlbGYsIHdpdGggYSBjZXJ0YWluIEx1Y2l1cyBNYW5saXVzLCBhbiBleHBlcnQgbW91bnRhaW4tY2xpbWJlciwgbWFkZSBoaXMgd2F5IGFsb25nLCB3aXRoIGdyZWF0IHRvaWwgYW5kIGhhemFyZCwgaW4gdGhlIGRlbnNlIGRhcmtuZXNzIG9mIGEgbW9vbmxlc3MgbmlnaHQsIGhpcyB2aXNpb24gbXVjaCBpbXBlZGVkIGFuZCBvYnNjdXJlZCBieSB3aWxkIG9saXZlIHRyZWVzIGFuZCByb2NreSBwZWFrcywgdW50aWwgYXQgbGFzdCB0aGV5IGNhbWUgdXBvbiBhIHBhdGguIFRoaXMsIHRoZXkgdGhvdWdodCwgbGVkIGRvd24gdG8gdGhlIGVuZW15J3MgY2FtcC4gU28gdGhleSBwdXQgbWFya3MgYW5kIHNpZ25zIG9uIHNvbWUgY29uc3BpY3VvdXMgY2xpZmZzIHdoaWNoIHRvd2VyZWQgb3ZlciBNb3VudCBDYWxsaWRyb211cywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVuIG1hZGUgdGhlaXIgd2F5IGJhY2sgYWdhaW4gdG8gdGhlIG1haW4gYm9keS4gVGhpcyB0b28gdGhleSBjb25kdWN0ZWQgdG8gdGhlIG1hcmtzIGFuZCBzaWducywgc3RydWNrIGludG8gdGhlIHBhdGggaW5kaWNhdGVkIGJ5IHRoZXNlLCBhbmQgc3RhcnRlZCBmb3J3YXJkLiBCdXQgd2hlbiB0aGV5IGhhZCBnb25lIG9uIGEgbGl0dGxlIHdheSwgdGhlIHBhdGggZmFpbGVkIHRoZW0sIGFuZCBhIHJhdmluZSB5YXduZWQgdG8gcmVjZWl2ZSB0aGVtLiBPbmNlIG1vcmUgZGVqZWN0aW9uIGFuZCBmZWFyIHdlcmUgcmlmZS4gVGhleSBkaWQgbm90IGtub3cgYW5kIGNvdWxkIG5vdCBzZWUgdGhhdCB0aGV5IHdlcmUgcmlnaHQgdXBvbiB0aGUgZW5lbXkgd2hvbSB0aGV5IHNvdWdodC4gQnV0IHByZXNlbnRseSBnbGVhbXMgb2YgZGF5bGlnaHQgY2FtZSwgaGVyZSBhbmQgdGhlcmUgYSBtYW4gdGhvdWdodCBoZSBoZWFyZCB2b2ljZXMsIGFuZCBzb29uIHRoZXkgYWN0dWFsbHkgc2F3IGEgR3JlZWsgb3V0cG9zdCBlbnRyZW5jaGVkIGF0IHRoZSBmb290IG9mIHRoZSBjbGlmZnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gQ2F0byBoYWx0ZWQgaGlzIGZvcmNlcyB0aGVyZSwgYW5kIHN1bW1vbmVkIHRoZSBtZW4gb2YgRmlybXVtIHRvIGEgcHJpdmF0ZSBjb25mZXJlbmNlLiBUaGVzZSBzb2xkaWVycyBoZSBoYWQgYWx3YXlzIGZvdW5kIHRydXN0eSBhbmQgemVhbG91cyBpbiBoaXMgc2VydmljZS4gV2hlbiB0aGV5IGhhZCBydW4gdXAgYW5kIHN0b29kIGdyb3VwZWQgYWJvdXQgaGltIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIG11c3QgdGFrZSBvbmUgb2YgdGhlIGVuZW15J3MgbWVuIGFsaXZlLCBhbmQgbGVhcm4gZnJvbSBoaW0gd2hvIHRoZXkgYXJlIHRoYXQgZm9ybSB0aGlzIGFkdmFuY2UgZ3VhcmQsIHdoYXQgdGhlaXIgbnVtYmVyIGlzLCBhaWQgd2l0aCB3aGF0IGRpc3Bvc2l0aW9uIGFuZCBhcnJheSB0aGVpciBtYWluIGJvZHkgYXdhaXRzIHVzLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHRhc2sgZGVtYW5kcyB0aGUgc3dpZnQgYW5kIGJvbGQgbGVhcCBvZiBsaW9ucyBmZWFybGVzc2x5IHJ1c2hpbmcgYWxsIHVuYXJtZWQgdXBvbiB0aGUgdGltb3JvdXMgYmVhc3RzIG9uIHdoaWNoIHRoZXkgcHJleS48L3E+IFNvIHNwYWtlIENhdG8sIGFuZCB0aGUgRmlybWlhbnMgaW5zdGFudGx5IHN0YXJ0ZWQsIGp1c3QgYXMgdGhleSB3ZXJlLCBydXNoZWQgZG93biB0aGUgbW91bnRhaW4tc2lkZSwgYW5kIHJhbiB1cG9uIHRoZSBlbmVteSdzIHNlbnRpbmVscy4gRmFsbGluZyB1cG9uIHRoZW0gdW5leHBlY3RlZGx5LCB0aGV5IHRocmV3IHRoZW0gYWxsIGludG8gY29uZnVzaW9uIGFuZCBzY2F0dGVyZWQgdGhlbSBpbiBmbGlnaHQ7IG9uZSBvZiB0aGVtIHRoZXkgc2VpemVkLCBhcm1zIGFuZCBhbGwsIGFuZCBkZWxpdmVyZWQgaGltIG92ZXIgdG8gQ2F0by4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdGFzayBkZW1hbmRzIHRoZSBzd2lmdCBhbmQgYm9sZCBsZWFwIG9mIGxpb25zIGZlYXJsZXNzbHkgcnVzaGluZyBhbGwgdW5hcm1lZCB1cG9uIHRoZSB0aW1vcm91cyBiZWFzdHMgb24gd2hpY2ggdGhleSBwcmV5LjwvdHJhbnNsYXRpb24+"
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIGNhcHRpdmUgQ2F0byBsZWFybmVkIHRoYXQgdGhlIG1haW4gZm9yY2Ugb2YgdGhlIGVuZW15IHdhcyBlbmNhbXBlZCBpbiB0aGUgcGFzcyB3aXRoIHRoZSBraW5nIGhpbXNlbGYsIGFuZCB0aGF0IHRoZSBkZXRhY2htZW50IGd1YXJkaW5nIHRoZSBwYXNzIG92ZXIgdGhlIG1vdW50YWlucyB3YXMgY29tcG9zZWQgb2Ygc2l4IGh1bmRyZWQgcGlja2VkIEFldG9saWFucy4gRGVzcGlzaW5nIHRoZWlyIHNtYWxsIG51bWJlcnMgYW5kIHRoZWlyIGNhcmVsZXNzbmVzcywgaGUgbGVkIGhpcyB0cm9vcHMgYWdhaW5zdCB0aGVtIGF0IG9uY2UsIHdpdGggYnJheSBvZiB0cnVtcGV0IGFuZCBiYXR0bGUtY3J5LCBiZWluZyBoaW1zZWxmIGZpcnN0IHRvIGRyYXcgaGlzIHN3b3JkLiBCdXQgd2hlbiB0aGUgZW5lbXkgc2F3IGhpcyBtZW4gcG91cmluZyBkb3duIHVwb24gdGhlbSBmcm9tIHRoZSBjbGlmZnMsIHRoZXkgZmxlZCB0byB0aGUgbWFpbiBhcm15LCBhbmQgZmlsbGVkIHRoZW0gYWxsIHdpdGggY29uZnVzaW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgTWFuaXVzIGFsc28sIGRvd24gYmVsb3csIHRocmV3IGhpcyB3aG9sZSBmb3JjZSBmb3J3YXJkIGludG8gdGhlIHBhc3MgYW5kIHN0b3JtZWQgdGhlIGVuZW15J3MgZm9ydGlmaWNhdGlvbnMuIEFudGlvY2h1cywgYmVpbmcgaGl0IGluIHRoZSBtb3V0aCB3aXRoIGEgc3RvbmUgd2hpY2gga25vY2tlZCBoaXMgdGVldGggb3V0LCB3aGVlbGVkIGhpcyBob3JzZSBhYm91dCBmb3IgdmVyeSBhbmd1aXNoLiBUaGVuIGhpcyBhcm15IGdhdmUgd2F5IGV2ZXJ5d2hlcmUgYmVmb3JlIHRoZSBSb21hbiBvbnNldC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWx0aG91Z2ggZmxpZ2h0IGZvciB0aGVtIG1lYW50IGltcHJhY3RpY2FibGUgcm9hZHMgYW5kIGhlbHBsZXNzIHdhbmRlcmluZ3MsIHdoaWxlIGRlZXAgbWFyc2hlcyBhbmQgc3RlZXAgY2xpZmZzIHRocmVhdGVuZWQgdGhvc2Ugd2hvIHNsaXBwZWQgYW5kIGZlbGwsIHN0aWxsLCB0aGV5IHBvdXJlZCBhbG9uZyB0aHJvdWdoIHRoZSBwYXNzIGludG8gdGhlc2UsIGNyb3dkaW5nIG9uZSBhbm90aGVyIG9uIGluIHRoZWlyIGZlYXIgb2YgdGhlIGVuZW15J3MgZGVhZGx5IHdlYXBvbnMsIGFuZCBzbyBkZXN0cm95ZWQgdGhlbXNlbHZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIE1hbml1cyBhbHNvLCBkb3duIGJlbG93LCB0aHJldyBoaXMgd2hvbGUgZm9yY2UgZm9yd2FyZCBpbnRvIHRoZSBwYXNzIGFuZCBzdG9ybWVkIHRoZSBlbmVteSdzIGZvcnRpZmljYXRpb25zLiBBbnRpb2NodXMsIGJlaW5nIGhpdCBpbiB0aGUgbW91dGggd2l0aCBhIHN0b25lIHdoaWNoIGtub2NrZWQgaGlzIHRlZXRoIG91dCwgd2hlZWxlZCBoaXMgaG9yc2UgYWJvdXQgZm9yIHZlcnkgYW5ndWlzaC4gVGhlbiBoaXMgYXJteSBnYXZlIHdheSBldmVyeXdoZXJlIGJlZm9yZSB0aGUgUm9tYW4gb25zZXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsdGhvdWdoIGZsaWdodCBmb3IgdGhlbSBtZWFudCBpbXByYWN0aWNhYmxlIHJvYWRzIGFuZCBoZWxwbGVzcyB3YW5kZXJpbmdzLCB3aGlsZSBkZWVwIG1hcnNoZXMgYW5kIHN0ZWVwIGNsaWZmcyB0aHJlYXRlbmVkIHRob3NlIHdobyBzbGlwcGVkIGFuZCBmZWxsLCBzdGlsbCwgdGhleSBwb3VyZWQgYWxvbmcgdGhyb3VnaCB0aGUgcGFzcyBpbnRvIHRoZXNlLCBjcm93ZGluZyBvbmUgYW5vdGhlciBvbiBpbiB0aGVpciBmZWFyIG9mIHRoZSBlbmVteSdzIGRlYWRseSB3ZWFwb25zLCBhbmQgc28gZGVzdHJveWVkIHRoZW1zZWx2ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0bywgd2hvIHdhcyBldmVyIHJhdGhlciBnZW5lcm91cywgaXQgd291bGQgc2VlbSwgaW4gaGlzIG93biBwcmFpc2VzLCBhbmQgZGlkIG5vdCBoZXNpdGF0ZSB0byBmb2xsb3cgdXAgaGlzIGdyZWF0IGFjaGlldmVtZW50cyB3aXRoIGJvYXN0aW5ncyBlcXVhbGx5IGdyZWF0LCBpcyB2ZXJ5IHBvbXBvdXMgaW4gaGlzIGFjY291bnQgb2YgdGhpcyBleHBsb2l0LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgdGhhdCB0aG9zZSB3aG8gc2F3IGhpbSBhdCB0aGF0IHRpbWUgcHVyc3VpbmcgdGhlIGVuZW15IGFuZCBoZXdpbmcgdGhlbSBkb3duLCBmZWx0IGNvbnZpbmNlZCB0aGF0IENhdG8gb3dlZCBsZXNzIHRvIFJvbWUgdGhhbiBSb21lIHRvIENhdG87IGFsc28gdGhhdCB0aGUgY29uc3VsIE1hbml1cyBoaW1zZWxmLCBmbHVzaGVkIHdpdGggdmljdG9yeSwgdGhyZXcgaGlzIGFybXMgYWJvdXQgaGltLCBzdGlsbCBmbHVzaGVkIHdpdGggaGlzIG93biB2aWN0b3J5LCBhbmQgZW1icmFjZWQgaGltIGEgbG9uZyB0aW1lLCBjcnlpbmcgb3V0IGZvciBqb3kgdGhhdCBuZWl0aGVyIGhlIGhpbXNlbGYgbm9yIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUgY291bGQgZml0dGluZ2x5IHJlcXVpdGUgQ2F0byBmb3IgaGlzIGJlbmVmYWN0aW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGJhdHRsZSBoZSB3YXMgc2VudCB0byBSb21lIGFzIHRoZSBtZXNzZW5nZXIgb2YgaGlzIG93biB0cml1bXBocy4gSGUgaGFkIGEgZmFpciBwYXNzYWdlIHRvIEJydW5kaXNpdW0sIGNyb3NzZWQgdGhlIHBlbmluc3VsYSBmcm9tIHRoZXJlIHRvIFRhcmVudHVtIGluIGEgc2luZ2xlIGRheSwgdHJhdmVsbGVkIHRoZW5jZSBmb3VyIGRheXMgbW9yZSwgYW5kIG9uIHRoZSBmaWZ0aCBkYXkgYWZ0ZXIgbGFuZGluZyByZWFjaGVkIFJvbWUsIHdoZXJlIGhlIHdhcyB0aGUgZmlyc3QgdG8gYW5ub3VuY2UgdGhlIHZpY3RvcnkuIEhlIGZpbGxlZCB0aGUgY2l0eSBmdWxsIG9mIGpveSBhbmQgc2FjcmlmaWNlcywgYW5kIHRoZSBwZW9wbGUgd2l0aCB0aGUgcHJvdWQgZmVlbGluZyB0aGF0IGl0IHdhcyBhYmxlIHRvIG1hc3RlciBldmVyeSBsYW5kIGFuZCBzZWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgdGhhdCB0aG9zZSB3aG8gc2F3IGhpbSBhdCB0aGF0IHRpbWUgcHVyc3VpbmcgdGhlIGVuZW15IGFuZCBoZXdpbmcgdGhlbSBkb3duLCBmZWx0IGNvbnZpbmNlZCB0aGF0IENhdG8gb3dlZCBsZXNzIHRvIFJvbWUgdGhhbiBSb21lIHRvIENhdG87IGFsc28gdGhhdCB0aGUgY29uc3VsIE1hbml1cyBoaW1zZWxmLCBmbHVzaGVkIHdpdGggdmljdG9yeSwgdGhyZXcgaGlzIGFybXMgYWJvdXQgaGltLCBzdGlsbCBmbHVzaGVkIHdpdGggaGlzIG93biB2aWN0b3J5LCBhbmQgZW1icmFjZWQgaGltIGEgbG9uZyB0aW1lLCBjcnlpbmcgb3V0IGZvciBqb3kgdGhhdCBuZWl0aGVyIGhlIGhpbXNlbGYgbm9yIHRoZSB3aG9sZSBSb21hbiBwZW9wbGUgY291bGQgZml0dGluZ2x5IHJlcXVpdGUgQ2F0byBmb3IgaGlzIGJlbmVmYWN0aW9ucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgaGUgd2FzIHNlbnQgdG8gUm9tZSBhcyB0aGUgbWVzc2VuZ2VyIG9mIGhpcyBvd24gdHJpdW1waHMuIEhlIGhhZCBhIGZhaXIgcGFzc2FnZSB0byBCcnVuZGlzaXVtLCBjcm9zc2VkIHRoZSBwZW5pbnN1bGEgZnJvbSB0aGVyZSB0byBUYXJlbnR1bSBpbiBhIHNpbmdsZSBkYXksIHRyYXZlbGxlZCB0aGVuY2UgZm91ciBkYXlzIG1vcmUsIGFuZCBvbiB0aGUgZmlmdGggZGF5IGFmdGVyIGxhbmRpbmcgcmVhY2hlZCBSb21lLCB3aGVyZSBoZSB3YXMgdGhlIGZpcnN0IHRvIGFubm91bmNlIHRoZSB2aWN0b3J5LiBIZSBmaWxsZWQgdGhlIGNpdHkgZnVsbCBvZiBqb3kgYW5kIHNhY3JpZmljZXMsIGFuZCB0aGUgcGVvcGxlIHdpdGggdGhlIHByb3VkIGZlZWxpbmcgdGhhdCBpdCB3YXMgYWJsZSB0byBtYXN0ZXIgZXZlcnkgbGFuZCBhbmQgc2VhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhcmUgcGVyaGFwcyB0aGUgbW9zdCByZW1hcmthYmxlIGZlYXR1cmVzIG9mIENhdG8ncyBtaWxpdGFyeSBjYXJlZXIuIEluIHBvbGl0aWNhbCBsaWZlLCBoZSBzZWVtcyB0byBoYXZlIHJlZ2FyZGVkIHRoZSBpbXBlYWNobWVudCBhbmQgY29udmljdGlvbiBvZiBtYWxlZmFjdG9ycyBhcyBhIGRlcGFydG1lbnQgd29ydGh5IG9mIGhpcyBtb3N0IHplYWxvdXMgZWZmb3J0cy4gRm9yIGhlIGJyb3VnaHQgbWFueSBwcm9zZWN1dGlvbnMgaGltc2VsZiwgYXNzaXN0ZWQgb3RoZXJzIGluIGJyaW5naW5nIHRoZWlycywgYW5kIGV2ZW4gaW5zdGlnYXRlZCBzb21lIHRvIGJlZ2luIHByb3NlY3V0aW9ucywgYXMgZm9yIGluc3RhbmNlIFBldGlsbGl1cyBhZ2FpbnN0IFNjaXBpby4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBncmVhdCBtYW4sIGhvd2V2ZXIsIHRyYW1wbGVkIHRoZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpbSB1bmRlciBmb290LCBhcyB0aGUgc3BsZW5kb3VyIG9mIGhpcyBob3VzZSBhbmQgaGlzIG93biBpbmhlcmVudCBsb2Z0aW5lc3Mgb2Ygc3Bpcml0IHByb21wdGVkIGhpbSB0byBkbywgYW5kIENhdG8sIHVuYWJsZSB0byBzZWN1cmUgaGlzIGNhcGl0YWwgY29udmljdGlvbiwgZHJvcHBlZCB0aGUgY2FzZS4gQnV0IGhlIHNvIGNvLW9wZXJhdGVkIHdpdGggdGhlIGFjY3VzZXJzIG9mIEx1Y2l1cywgU2NpcGlvJ3MgYnJvdGhlciwgYXMgdG8gaGF2ZSBoaW0gY29uZGVtbmVkIHRvIHBheSBhIGxhcmdlIGZpbmUgdG8gdGhlIHN0YXRlLiBUaGlzIGRlYnQgTHVjaXVzIHdhcyB1bmFibGUgdG8gbWVldCwgYW5kIHdhcyB0aGVyZWZvcmUgbGlhYmxlIHRvIGltcHJpc29ubWVudC4gSW5kZWVkLCBpdCB3YXMgb25seSBhdCB0aGUgaW50ZXJjZXNzaW9uIG9mIHRoZSB0cmlidW5lcyB0aGF0IGhlIHdhcyBhdCBsYXN0IHNldCBmcmVlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXJlIHBlcmhhcHMgdGhlIG1vc3QgcmVtYXJrYWJsZSBmZWF0dXJlcyBvZiBDYXRvJ3MgbWlsaXRhcnkgY2FyZWVyLiBJbiBwb2xpdGljYWwgbGlmZSwgaGUgc2VlbXMgdG8gaGF2ZSByZWdhcmRlZCB0aGUgaW1wZWFjaG1lbnQgYW5kIGNvbnZpY3Rpb24gb2YgbWFsZWZhY3RvcnMgYXMgYSBkZXBhcnRtZW50IHdvcnRoeSBvZiBoaXMgbW9zdCB6ZWFsb3VzIGVmZm9ydHMuIEZvciBoZSBicm91Z2h0IG1hbnkgcHJvc2VjdXRpb25zIGhpbXNlbGYsIGFzc2lzdGVkIG90aGVycyBpbiBicmluZ2luZyB0aGVpcnMsIGFuZCBldmVuIGluc3RpZ2F0ZWQgc29tZSB0byBiZWdpbiBwcm9zZWN1dGlvbnMsIGFzIGZvciBpbnN0YW5jZSBQZXRpbGxpdXMgYWdhaW5zdCBTY2lwaW8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgZ3JlYXQgbWFuLCBob3dldmVyLCB0cmFtcGxlZCB0aGUgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gdW5kZXIgZm9vdCwgYXMgdGhlIHNwbGVuZG91ciBvZiBoaXMgaG91c2UgYW5kIGhpcyBvd24gaW5oZXJlbnQgbG9mdGluZXNzIG9mIHNwaXJpdCBwcm9tcHRlZCBoaW0gdG8gZG8sIGFuZCBDYXRvLCB1bmFibGUgdG8gc2VjdXJlIGhpcyBjYXBpdGFsIGNvbnZpY3Rpb24sIGRyb3BwZWQgdGhlIGNhc2UuIEJ1dCBoZSBzbyBjby1vcGVyYXRlZCB3aXRoIHRoZSBhY2N1c2VycyBvZiBMdWNpdXMsIFNjaXBpbydzIGJyb3RoZXIsIGFzIHRvIGhhdmUgaGltIGNvbmRlbW5lZCB0byBwYXkgYSBsYXJnZSBmaW5lIHRvIHRoZSBzdGF0ZS4gVGhpcyBkZWJ0IEx1Y2l1cyB3YXMgdW5hYmxlIHRvIG1lZXQsIGFuZCB3YXMgdGhlcmVmb3JlIGxpYWJsZSB0byBpbXByaXNvbm1lbnQuIEluZGVlZCwgaXQgd2FzIG9ubHkgYXQgdGhlIGludGVyY2Vzc2lvbiBvZiB0aGUgdHJpYnVuZXMgdGhhdCBoZSB3YXMgYXQgbGFzdCBzZXQgZnJlZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2UgYXJlIGFsc28gdG9sZCB0aGF0IGEgY2VydGFpbiB5b3VuZyBtYW4sIHdobyBoYWQgZ290IGEgdmVyZGljdCBvZiBjaXZpbCBvdXRsYXdyeSBhZ2FpbnN0IGFuIGVuZW15IG9mIGhpcyBkZWFkIGZhdGhlciwgd2FzIHBhc3NpbmcgdGhyb3VnaCB0aGUgZm9ydW0gb24gdGhlIGNvbmNsdXNpb24gb2YgdGhlIGNhc2UsIGFuZCBtZXQgQ2F0bywgd2hvIGdyZWV0ZWQgaGltIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgc2FjcmlmaWNlcyB3ZSBtdXN0IGJyaW5nIHRvIHRoZSBzcGlyaXRzIG9mIG91ciBwYXJlbnRzOyBub3QgbGFtYnMgYW5kIGtpZHMsIGJ1dCB0aGUgY29uZGVtbmF0aW9ucyBhbmQgdGVhcnMgb2YgdGhlaXIgZW5lbWllcy48L3E+IEhvd2V2ZXIsIGhlIGhpbXNlbGYgZGlkIG5vdCBnbyB1bnNjYXRoZWQsIGJ1dCB3aGVyZXZlciBpbiBoaXMgcG9saXRpY2FsIGNhcmVlciBoZSBnYXZlIGhpcyBlbmVtaWVzIHRoZSBzbGlnaHRlc3QgaGFuZGxlLCBoZSB3YXMgYWxsIHRoZSB3aGlsZSBzdWZmZXJpbmcgcHJvc2VjdXRpb25zIGFuZCBydW5uaW5nIHJpc2sgb2YgY29uZGVtbmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkIHRoYXQgaGUgd2FzIGRlZmVuZGFudCBpbiBuZWFybHkgZmlmdHkgY2FzZXMsIGFuZCBpbiB0aGUgbGFzdCBvbmUgd2hlbiBoZSB3YXMgZWlnaHR5LXNpeCB5ZWFycyBvZiBhZ2UuIEl0IHdhcyBpbiB0aGUgY291cnNlIG9mIHRoaXMgdGhhdCBoZSB1dHRlcmVkIHRoZSBtZW1vcmFibGUgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIGhhcmQgZm9yIG9uZSB3aG8gaGFzIGxpdmVkIGFtb25nIG1lbiBvZiBvbmUgZ2VuZXJhdGlvbiwgdG8gbWFrZSBoaXMgZGVmZW5jZSBiZWZvcmUgdGhvc2Ugb2YgYW5vdGhlci48L3E+IEFuZCBldmVuIHdpdGggdGhpcyBjYXNlIGhlIGRpZCBub3QgcHV0IGFuIGVuZCB0byBoaXMgZm9yZW5zaWMgY29udGVzdHMsIGJ1dCBmb3VyIHllYXJzIGxhdGVyLCBhdCB0aGUgYWdlIG9mIG5pbmV0eSwgaGUgaW1wZWFjaGVkIFNlcnZpdXMgR2FsYmEuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaXQgbWF5IGJlIHNhaWQsIGxpa2UgTmVzdG9yLCB0byBoYXZlIGJlZW4gdmlnb3JvdXMgYW5kIGFjdGl2ZSBhbW9uZyB0aHJlZSBnZW5lcmF0aW9ucy4gRm9yIGFmdGVyIG1hbnkgcG9saXRpY2FsIHN0cnVnZ2xlcyB3aXRoIFNjaXBpbyB0aGUgR3JlYXQsIGFzIHRvbGQgYWJvdmUsIGhlIGxpdmVkIHRvIGJlIGNvbnRlbXBvcmFyeSB3aXRoIFNjaXBpbyB0aGUgWW91bmdlciwgd2hvIHdhcyB0aGUgRWxkZXIncyBncmFuZHNvbiBieSBhZG9wdGlvbiwgYW5kIHRoZSBzb24gb2YgdGhhdCBQYXVsdXMgQWVtaWxpdXMgd2hvIHN1YmR1ZWQgUGVyc2V1cyBhbmQgdGhlIE1hY2Vkb25pYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBiYXR0bGUgb2YgUHlkbmEsIDE2OCBCLkMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSBhbHNvIHRvbGQgdGhhdCBhIGNlcnRhaW4geW91bmcgbWFuLCB3aG8gaGFkIGdvdCBhIHZlcmRpY3Qgb2YgY2l2aWwgb3V0bGF3cnkgYWdhaW5zdCBhbiBlbmVteSBvZiBoaXMgZGVhZCBmYXRoZXIsIHdhcyBwYXNzaW5nIHRocm91Z2ggdGhlIGZvcnVtIG9uIHRoZSBjb25jbHVzaW9uIG9mIHRoZSBjYXNlLCBhbmQgbWV0IENhdG8sIHdobyBncmVldGVkIGhpbSBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXNlIGFyZSB0aGUgc2FjcmlmaWNlcyB3ZSBtdXN0IGJyaW5nIHRvIHRoZSBzcGlyaXRzIG9mIG91ciBwYXJlbnRzOyBub3QgbGFtYnMgYW5kIGtpZHMsIGJ1dCB0aGUgY29uZGVtbmF0aW9ucyBhbmQgdGVhcnMgb2YgdGhlaXIgZW5lbWllcy48L3E+IEhvd2V2ZXIsIGhlIGhpbXNlbGYgZGlkIG5vdCBnbyB1bnNjYXRoZWQsIGJ1dCB3aGVyZXZlciBpbiBoaXMgcG9saXRpY2FsIGNhcmVlciBoZSBnYXZlIGhpcyBlbmVtaWVzIHRoZSBzbGlnaHRlc3QgaGFuZGxlLCBoZSB3YXMgYWxsIHRoZSB3aGlsZSBzdWZmZXJpbmcgcHJvc2VjdXRpb25zIGFuZCBydW5uaW5nIHJpc2sgb2YgY29uZGVtbmF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBoZSB3YXMgZGVmZW5kYW50IGluIG5lYXJseSBmaWZ0eSBjYXNlcywgYW5kIGluIHRoZSBsYXN0IG9uZSB3aGVuIGhlIHdhcyBlaWdodHktc2l4IHllYXJzIG9mIGFnZS4gSXQgd2FzIGluIHRoZSBjb3Vyc2Ugb2YgdGhpcyB0aGF0IGhlIHV0dGVyZWQgdGhlIG1lbW9yYWJsZSBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBoYXJkIGZvciBvbmUgd2hvIGhhcyBsaXZlZCBhbW9uZyBtZW4gb2Ygb25lIGdlbmVyYXRpb24sIHRvIG1ha2UgaGlzIGRlZmVuY2UgYmVmb3JlIHRob3NlIG9mIGFub3RoZXIuPC9xPiBBbmQgZXZlbiB3aXRoIHRoaXMgY2FzZSBoZSBkaWQgbm90IHB1dCBhbiBlbmQgdG8gaGlzIGZvcmVuc2ljIGNvbnRlc3RzLCBidXQgZm91ciB5ZWFycyBsYXRlciwgYXQgdGhlIGFnZSBvZiBuaW5ldHksIGhlIGltcGVhY2hlZCBTZXJ2aXVzIEdhbGJhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaXQgbWF5IGJlIHNhaWQsIGxpa2UgTmVzdG9yLCB0byBoYXZlIGJlZW4gdmlnb3JvdXMgYW5kIGFjdGl2ZSBhbW9uZyB0aHJlZSBnZW5lcmF0aW9ucy4gRm9yIGFmdGVyIG1hbnkgcG9saXRpY2FsIHN0cnVnZ2xlcyB3aXRoIFNjaXBpbyB0aGUgR3JlYXQsIGFzIHRvbGQgYWJvdmUsIGhlIGxpdmVkIHRvIGJlIGNvbnRlbXBvcmFyeSB3aXRoIFNjaXBpbyB0aGUgWW91bmdlciwgd2hvIHdhcyB0aGUgRWxkZXIncyBncmFuZHNvbiBieSBhZG9wdGlvbiwgYW5kIHRoZSBzb24gb2YgdGhhdCBQYXVsdXMgQWVtaWxpdXMgd2hvIHN1YmR1ZWQgUGVyc2V1cyBhbmQgdGhlIE1hY2Vkb25pYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIGJhdHRsZSBvZiBQeWRuYSwgMTY4IEIuQy48L25vdGU+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRlbiB5ZWFycyBhZnRlciBoaXMgY29uc3Vsc2hpcCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xODQgQi5DLjwvbm90ZT4gQ2F0byBzdG9vZCBmb3IgdGhlIGNlbnNvcnNoaXAuIFRoaXMgb2ZmaWNlIHRvd2VyZWQsIGFzIGl0IHdlcmUsIGFib3ZlIGV2ZXJ5IG90aGVyIGNpdmljIGhvbm91ciwgYW5kIHdhcywgaW4gYSB3YXksIHRoZSBjdWxtaW5hdGlvbiBvZiBhIHBvbGl0aWNhbCBjYXJlZXIuIFRoZSB2YXJpZXR5IG9mIGl0cyBwb3dlcnMgd2FzIGdyZWF0LCBpbmNsdWRpbmcgdGhhdCBvZiBleGFtaW5pbmcgaW50byB0aGUgbGl2ZXMgYW5kIG1hbm5lcnMgb2YgdGhlIGNpdGl6ZW5zLiBJdHMgY3JlYXRvcnMgdGhvdWdodCB0aGF0IG5vIG9uZSBzaG91bGQgYmUgbGVmdCB0byBoaXMgb3duIGRldmljZXMgYW5kIGRlc2lyZXMsIHdpdGhvdXQgaW5zcGVjdGlvbiBhbmQgcmV2aWV3LCBlaXRoZXIgaW4gaGlzIG1hcnJ5aW5nLCBvciBpbiB0aGUgYmVnZXR0aW5nIG9mIGhpcyBjaGlsZHJlbiwgb3IgaW4gdGhlIG9yZGVyaW5nIG9mIGhpcyBkYWlseSBsaWZlLCBvciBpbiB0aGUgZW50ZXJ0YWlubWVudCBvZiBoaXMgZnJpZW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCByYXRoZXIsIHRoaW5raW5nIHRoYXQgdGhlc2UgdGhpbmdzIHJldmVhbGVkIGEgbWFuJ3MgcmVhbCBjaGFyYWN0ZXIgbW9yZSB0aGFuIGRpZCBoaXMgcHVibGljIGFuZCBwb2xpdGljYWwgY2FyZWVyLCB0aGV5IHNldCBtZW4gaW4gb2ZmaWNlIHRvIHdhdGNoLCBhZG1vbmlzaCwgYW5kIGNoYXN0aXNlLCB0aGF0IG5vIG9uZSBzaG91bGQgdHVybiBhc2lkZSB0byB3YW50b25uZXNzIGFuZCBmb3JzYWtlIGhpcyBuYXRpdmUgYW5kIGN1c3RvbWFyeSBtb2RlIG9mIGxpZmUuIFRoZXkgY2hvc2UgdG8gdGhpcyBvZmZpY2Ugb25lIG9mIHRoZSBzby1jYWxsZWQgcGF0cmljaWFucywgYW5kIG9uZSBvZiB0aGUgcGxlYmVpYW5zLiBUaGVzZSBvZmZpY2VycyB3ZXJlIGNhbGxlZCBjZW5zb3JzLCBhbmQgdGhleSBoYWQgYXV0aG9yaXR5IHRvIGRlZ3JhZGUgYSBrbmlnaHQsIG9yIHRvIGV4cGVsIGEgc2VuYXRvciB3aG8gbGVkIGFuIHVuYnJpZGxlZCBhbmQgZGlzb3JkZXJseSBsaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGFsc28gcmV2aXNlZCB0aGUgYXNzZXNzbWVudHMgb2YgcHJvcGVydHksIGFuZCBhcnJhbmdlZCB0aGUgY2l0aXplbnMgaW4gbGlzdHMgYWNjb3JkaW5nIHRvIHRoZWlyIHNvY2lhbCBhbmQgcG9saXRpY2FsIGNsYXNzZXMuIFRoZXJlIHdlcmUgb3RoZXIgZ3JlYXQgcG93ZXJzIGFsc28gY29ubmVjdGVkIHdpdGggdGhlIG9mZmljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGVuIHllYXJzIGFmdGVyIGhpcyBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTg0IEIuQy48L25vdGU+IENhdG8gc3Rvb2QgZm9yIHRoZSBjZW5zb3JzaGlwLiBUaGlzIG9mZmljZSB0b3dlcmVkLCBhcyBpdCB3ZXJlLCBhYm92ZSBldmVyeSBvdGhlciBjaXZpYyBob25vdXIsIGFuZCB3YXMsIGluIGEgd2F5LCB0aGUgY3VsbWluYXRpb24gb2YgYSBwb2xpdGljYWwgY2FyZWVyLiBUaGUgdmFyaWV0eSBvZiBpdHMgcG93ZXJzIHdhcyBncmVhdCwgaW5jbHVkaW5nIHRoYXQgb2YgZXhhbWluaW5nIGludG8gdGhlIGxpdmVzIGFuZCBtYW5uZXJzIG9mIHRoZSBjaXRpemVucy4gSXRzIGNyZWF0b3JzIHRob3VnaHQgdGhhdCBubyBvbmUgc2hvdWxkIGJlIGxlZnQgdG8gaGlzIG93biBkZXZpY2VzIGFuZCBkZXNpcmVzLCB3aXRob3V0IGluc3BlY3Rpb24gYW5kIHJldmlldywgZWl0aGVyIGluIGhpcyBtYXJyeWluZywgb3IgaW4gdGhlIGJlZ2V0dGluZyBvZiBoaXMgY2hpbGRyZW4sIG9yIGluIHRoZSBvcmRlcmluZyBvZiBoaXMgZGFpbHkgbGlmZSwgb3IgaW4gdGhlIGVudGVydGFpbm1lbnQgb2YgaGlzIGZyaWVuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgcmF0aGVyLCB0aGlua2luZyB0aGF0IHRoZXNlIHRoaW5ncyByZXZlYWxlZCBhIG1hbidzIHJlYWwgY2hhcmFjdGVyIG1vcmUgdGhhbiBkaWQgaGlzIHB1YmxpYyBhbmQgcG9saXRpY2FsIGNhcmVlciwgdGhleSBzZXQgbWVuIGluIG9mZmljZSB0byB3YXRjaCwgYWRtb25pc2gsIGFuZCBjaGFzdGlzZSwgdGhhdCBubyBvbmUgc2hvdWxkIHR1cm4gYXNpZGUgdG8gd2FudG9ubmVzcyBhbmQgZm9yc2FrZSBoaXMgbmF0aXZlIGFuZCBjdXN0b21hcnkgbW9kZSBvZiBsaWZlLiBUaGV5IGNob3NlIHRvIHRoaXMgb2ZmaWNlIG9uZSBvZiB0aGUgc28tY2FsbGVkIHBhdHJpY2lhbnMsIGFuZCBvbmUgb2YgdGhlIHBsZWJlaWFucy4gVGhlc2Ugb2ZmaWNlcnMgd2VyZSBjYWxsZWQgY2Vuc29ycywgYW5kIHRoZXkgaGFkIGF1dGhvcml0eSB0byBkZWdyYWRlIGEga25pZ2h0LCBvciB0byBleHBlbCBhIHNlbmF0b3Igd2hvIGxlZCBhbiB1bmJyaWRsZWQgYW5kIGRpc29yZGVybHkgbGlmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYWxzbyByZXZpc2VkIHRoZSBhc3Nlc3NtZW50cyBvZiBwcm9wZXJ0eSwgYW5kIGFycmFuZ2VkIHRoZSBjaXRpemVucyBpbiBsaXN0cyBhY2NvcmRpbmcgdG8gdGhlaXIgc29jaWFsIGFuZCBwb2xpdGljYWwgY2xhc3Nlcy4gVGhlcmUgd2VyZSBvdGhlciBncmVhdCBwb3dlcnMgYWxzbyBjb25uZWN0ZWQgd2l0aCB0aGUgb2ZmaWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXJlZm9yZSwgd2hlbiBDYXRvIHN0b29kIGZvciBpdCwgbmVhcmx5IGFsbCB0aGUgYmVzdCBrbm93biBhbmQgbW9zdCBpbmZsdWVudGlhbCBtZW4gb2YgdGhlIHNlbmF0b3JpYWwgcGFydHkgdW5pdGVkIHRvIG9wcG9zZSBoaW0uIFRoZSBtZW4gb2Ygbm9ibGUgcGFyZW50YWdlIGFtb25nIHRoZW0gd2VyZSBtb3ZlZCBieSBqZWFsb3VzeSwgdGhpbmtpbmcgdGhhdCBub2JpbGl0eSBvZiBiaXJ0aCB3b3VsZCBiZSB0cmFtcGxlZCBpbiB0aGUgbWlyZSBpZiBtZW4gb2YgaWdub2JsZSBvcmlnaW4gZm9yY2VkIHRoZWlyIHdheSB1cCB0byB0aGUgc3VtbWl0cyBvZiBob25vdXIgYW5kIHBvd2VyOyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRob3NlIHdobyB3ZXJlIGNvbnNjaW91cyBvZiBiYXNlIHByYWN0aWNlcyBhbmQgb2YgYSBkZXBhcnR1cmUgZnJvbSBhbmNlc3RyYWwgY3VzdG9tcywgZmVhcmVkIHRoZSBzZXZlcml0eSBvZiB0aGUgbWFuLCB3aGljaCB3YXMgc3VyZSB0byBiZSBoYXJzaCBhbmQgaW5leG9yYWJsZSBpbiB0aGUgZXhlcmNpc2Ugb2YgcG93ZXIuIFRoZXJlZm9yZSwgYWZ0ZXIgZHVlIGNvbnN1bHRhdGlvbiBhbmQgcHJlcGFyYXRpb24sIHRoZXkgcHV0IHVwIGluIG9wcG9zaXRpb24gdG8gQ2F0byBzZXZlbiBjYW5kaWRhdGVzIGZvciB0aGUgb2ZmaWNlLCB3aG8gc291Z2h0IHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSB3aXRoIHByb21pc2VzIG9mIG1pbGQgY29uZHVjdCBpbiBvZmZpY2UsIHN1cHBvc2luZywgZm9yc29vdGgsIHRoYXQgaXQgd2FudGVkIHRvIGJlIHJ1bGVkIHdpdGggYSBsYXggYW5kIGluZHVsZ2VudCBoYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5DYXRvLCBvbiB0aGUgY29udHJhcnksIHNob3dlZCBubyBjb21wbGFpc2FuY2Ugd2hhdGV2ZXIsIGJ1dCBwbGFpbmx5IHRocmVhdGVuZWQgd3JvbmctZG9lcnMgaW4gaGlzIHNwZWVjaGVzLCBhbmQgbG91ZGx5IGNyaWVkIHRoYXQgdGhlIGNpdHkgaGFkIG5lZWQgb2YgYSBncmVhdCBwdXJpZmljYXRpb24uIEhlIGFkanVyZWQgdGhlIHBlb3BsZSwgaWYgdGhleSB3ZXJlIHdpc2UsIG5vdCB0byBjaG9vc2UgdGhlIG1vc3QgYWdyZWVhYmxlIHBoeXNpY2lhbiwgYnV0IHRoZSBvbmUgd2hvIHdhcyBtb3N0IGluIGVhcm5lc3QuIEhlIGhpbXNlbGYsIGhlIHNhaWQsIHdhcyBzdWNoIGEgcGh5c2ljaWFuLCBhbmQgc28gd2FzIFZhbGVyaXVzIEZsYWNjdXMsIG9mIHRoZSBwYXRyaWNpYW5zLiBXaXRoIGhpbSBhcyBjb2xsZWFndWUsIGFuZCBoaW0gYWxvbmUsIGhlIHRob3VnaHQgaGUgY291bGQgY3V0IGFuZCBzZWFyIHRvIHNvbWUgcHVycG9zZSB0aGUgaHlkcmEtbGlrZSBsdXh1cnkgYW5kIGVmZmVtaW5hY3kgb2YgdGhlIHRpbWUuIEFzIGZvciB0aGUgcmVzdCBvZiB0aGUgY2FuZGlkYXRlcywgaGUgc2F3IHRoYXQgdGhleSB3ZXJlIGFsbCB0cnlpbmcgdG8gZm9yY2UgdGhlaXIgd2F5IGludG8gdGhlIG9mZmljZSBpbiBvcmRlciB0byBhZG1pbmlzdGVyIGl0IGJhZGx5LCBzaW5jZSB0aGV5IGZlYXJlZCB0aG9zZSB3aG8gd291bGQgYWRtaW5pc3RlciBpdCB3ZWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gdHJ1bHkgZ3JlYXQgd2FzIHRoZSBSb21hbiBwZW9wbGUsIGFuZCBzbyB3b3J0aHkgb2YgZ3JlYXQgbGVhZGVycywgdGhhdCB0aGV5IGRpZCBub3QgZmVhciBDYXRvJ3Mgcmlnb3VyIGFuZCBoYXVnaHR5IGluZGVwZW5kZW5jZSwgYnV0IHJlamVjdGVkIHJhdGhlciB0aG9zZSBhZ3JlZWFibGUgY2FuZGlkYXRlcyB3aG8sIGl0IHdhcyBiZWxpZXZlZCwgd291bGQgZG8gZXZlcnkgdGhpbmcgdG8gcGxlYXNlIHRoZW0sIGFuZCBlbGVjdGVkIEZsYWNjdXMgdG8gdGhlIG9mZmljZSBhbG9uZyB3aXRoIENhdG8uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTg0IEIuQy48L25vdGU+IFRvIENhdG8gdGhleSBnYXZlIGVhciwgbm90IGFzIHRvIG9uZSBzb2xpY2l0aW5nIG9mZmljZSwgYnV0IGFzIHRvIG9uZSBhbHJlYWR5IGluIG9mZmljZSBhbmQgaXNzdWluZyBoaXMgZGVjcmVlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRob3NlIHdobyB3ZXJlIGNvbnNjaW91cyBvZiBiYXNlIHByYWN0aWNlcyBhbmQgb2YgYSBkZXBhcnR1cmUgZnJvbSBhbmNlc3RyYWwgY3VzdG9tcywgZmVhcmVkIHRoZSBzZXZlcml0eSBvZiB0aGUgbWFuLCB3aGljaCB3YXMgc3VyZSB0byBiZSBoYXJzaCBhbmQgaW5leG9yYWJsZSBpbiB0aGUgZXhlcmNpc2Ugb2YgcG93ZXIuIFRoZXJlZm9yZSwgYWZ0ZXIgZHVlIGNvbnN1bHRhdGlvbiBhbmQgcHJlcGFyYXRpb24sIHRoZXkgcHV0IHVwIGluIG9wcG9zaXRpb24gdG8gQ2F0byBzZXZlbiBjYW5kaWRhdGVzIGZvciB0aGUgb2ZmaWNlLCB3aG8gc291Z2h0IHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSB3aXRoIHByb21pc2VzIG9mIG1pbGQgY29uZHVjdCBpbiBvZmZpY2UsIHN1cHBvc2luZywgZm9yc29vdGgsIHRoYXQgaXQgd2FudGVkIHRvIGJlIHJ1bGVkIHdpdGggYSBsYXggYW5kIGluZHVsZ2VudCBoYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIG9uIHRoZSBjb250cmFyeSwgc2hvd2VkIG5vIGNvbXBsYWlzYW5jZSB3aGF0ZXZlciwgYnV0IHBsYWlubHkgdGhyZWF0ZW5lZCB3cm9uZy1kb2VycyBpbiBoaXMgc3BlZWNoZXMsIGFuZCBsb3VkbHkgY3JpZWQgdGhhdCB0aGUgY2l0eSBoYWQgbmVlZCBvZiBhIGdyZWF0IHB1cmlmaWNhdGlvbi4gSGUgYWRqdXJlZCB0aGUgcGVvcGxlLCBpZiB0aGV5IHdlcmUgd2lzZSwgbm90IHRvIGNob29zZSB0aGUgbW9zdCBhZ3JlZWFibGUgcGh5c2ljaWFuLCBidXQgdGhlIG9uZSB3aG8gd2FzIG1vc3QgaW4gZWFybmVzdC4gSGUgaGltc2VsZiwgaGUgc2FpZCwgd2FzIHN1Y2ggYSBwaHlzaWNpYW4sIGFuZCBzbyB3YXMgVmFsZXJpdXMgRmxhY2N1cywgb2YgdGhlIHBhdHJpY2lhbnMuIFdpdGggaGltIGFzIGNvbGxlYWd1ZSwgYW5kIGhpbSBhbG9uZSwgaGUgdGhvdWdodCBoZSBjb3VsZCBjdXQgYW5kIHNlYXIgdG8gc29tZSBwdXJwb3NlIHRoZSBoeWRyYS1saWtlIGx1eHVyeSBhbmQgZWZmZW1pbmFjeSBvZiB0aGUgdGltZS4gQXMgZm9yIHRoZSByZXN0IG9mIHRoZSBjYW5kaWRhdGVzLCBoZSBzYXcgdGhhdCB0aGV5IHdlcmUgYWxsIHRyeWluZyB0byBmb3JjZSB0aGVpciB3YXkgaW50byB0aGUgb2ZmaWNlIGluIG9yZGVyIHRvIGFkbWluaXN0ZXIgaXQgYmFkbHksIHNpbmNlIHRoZXkgZmVhcmVkIHRob3NlIHdobyB3b3VsZCBhZG1pbmlzdGVyIGl0IHdlbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyB0cnVseSBncmVhdCB3YXMgdGhlIFJvbWFuIHBlb3BsZSwgYW5kIHNvIHdvcnRoeSBvZiBncmVhdCBsZWFkZXJzLCB0aGF0IHRoZXkgZGlkIG5vdCBmZWFyIENhdG8ncyByaWdvdXIgYW5kIGhhdWdodHkgaW5kZXBlbmRlbmNlLCBidXQgcmVqZWN0ZWQgcmF0aGVyIHRob3NlIGFncmVlYWJsZSBjYW5kaWRhdGVzIHdobywgaXQgd2FzIGJlbGlldmVkLCB3b3VsZCBkbyBldmVyeSB0aGluZyB0byBwbGVhc2UgdGhlbSwgYW5kIGVsZWN0ZWQgRmxhY2N1cyB0byB0aGUgb2ZmaWNlIGFsb25nIHdpdGggQ2F0by48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE4NCBCLkMuPC9ub3RlPiBUbyBDYXRvIHRoZXkgZ2F2ZSBlYXIsIG5vdCBhcyB0byBvbmUgc29saWNpdGluZyBvZmZpY2UsIGJ1dCBhcyB0byBvbmUgYWxyZWFkeSBpbiBvZmZpY2UgYW5kIGlzc3VpbmcgaGlzIGRlY3JlZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGNlbnNvciwgdGhlbiwgQ2F0byBtYWRlIEx1Y2l1cyBWYWxlcml1cyBGbGFjY3VzLCBoaXMgY29sbGVhZ3VlIGFuZCBmcmllbmQsIGNoaWVmIHNlbmF0b3IuIEhlIGFsc28gZXhwZWxsZWQgbWFueSBtZW1iZXJzIG9mIHRoZSBTZW5hdGUsIGluY2x1ZGluZyBMdWNpdXMgUXVpbnRpdXMuIFRoaXMgbWFuIGhhZCBiZWVuIGNvbnN1bCBzZXZlbiB5ZWFycyBiZWZvcmUsIGFuZCwgYSB0aGluZyB3aGljaCBnYXZlIGhpbSBtb3JlIHJlcHV0YXRpb24gdGhhbiB0aGUgY29uc3Vsc2hpcCBldmVuLCB3YXMgYnJvdGhlciBvZiB0aGUgVGl0dXMgRmxhbWluaW51cyB3aG8gY29ucXVlcmVkIEtpbmcgUGhpbGlwLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IEN5bm9zY2VwaGFsYWUsIDE5OCBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24gZm9yIGhpcyBleHB1bHNpb24gd2FzIHRoZSBmb2xsb3dpbmcuIFRoZXJlIHdhcyBhIHlvdXRoIHdobywgZXZlciBzaW5jZSBoaXMgYm95aG9vZCwgaGFkIGJlZW4gdGhlIGZhdm91cml0ZSBvZiBMdWNpdXMuIFRoaXMgeW91dGggTHVjaXVzIGtlcHQgZXZlciBhYm91dCBoaW0sIGFuZCB0b29rIHdpdGggaGltIG9uIGhpcyBjYW1wYWlnbnMgaW4gZ3JlYXRlciBob25vdXIgYW5kIHBvd2VyIHRoYW4gYW55IG9uZSBvZiBoaXMgbmVhcmVzdCBmcmllbmRzIGFuZCBraW5zbWVuIGhhZC4gSGUgd2FzIG9uY2UgYWRtaW5pc3RlcmluZyB0aGUgYWZmYWlycyBvZiBoaXMgY29uc3VsYXIgcHJvdmluY2UsIGFuZCBhdCBhIGNlcnRhaW4gYmFucXVldCB0aGlzIHlvdXRoLCBhcyB3YXMgaGlzIHdvbnQsIHJlY2xpbmVkIGF0IGhpcyBzaWRlLCBhbmQgYmVnYW4gdG8gcGF5IGhpcyBmbGF0dGVyaWVzIHRvIGEgbWFuIHdobywgaW4gaGlzIGN1cHMsIHdhcyB0b28gZWFzaWx5IGxlZCBhYm91dC4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGxvdmUgeW91IHNvIG11Y2gsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgb25jZSwgd2hlbiB0aGVyZSB3YXMgYSBnbGFkaWF0b3JpYWwgc2hvdyBhdCBob21lLCBhIHRoaW5nIHdoaWNoIEkgaGFkIG5ldmVyIHNlZW4sIEkgcnVzaGVkIGF3YXkgZnJvbSBpdCB0byBqb2luIHlvdSwgYWx0aG91Z2ggbXkgaGVhcnQgd2FzIHNldCBvbiBzZWVpbmcgYSBtYW4gc2xhdWdodGVyZWQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCBmb3IgdGhhdCBtYXR0ZXIsPC9xPiBzYWlkIEx1Y2l1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb24ndCBsaWUgdGhlcmUgd2l0aCBhbnkgZ3J1ZGdlIGFnYWluc3QgbWUsIGZvciBJIHdpbGwgY3VyZSBpdC48L3E+IFRoZXJldXBvbiBoZSBjb21tYW5kZWQgdGhhdCBvbmUgb2YgdGhlIG1lbiB3aG8gd2VyZSBseWluZyB1bmRlciBzZW50ZW5jZSBvZiBkZWF0aCBiZSBicm91Z2h0IHRvIHRoZSBiYW5xdWV0LCBhbmQgdGhhdCBhIGxpY3RvciB3aXRoIGFuIGF4ZSBzdGFuZCBieSBoaXMgc2lkZS4gVGhlbiBoZSBhc2tlZCBoaXMgYmVsb3ZlZCBpZiBoZSB3aXNoZWQgdG8gc2VlIHRoZSBtYW4gc21pdHRlbi4gVGhlIHlvdXRoIHNhaWQgaGUgZGlkLCBhbmQgTHVjaXVzIG9yZGVyZWQgdGhlIG1hbidzIGhlYWQgdG8gYmUgY3V0IG9mZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgY2Vuc29yLCB0aGVuLCBDYXRvIG1hZGUgTHVjaXVzIFZhbGVyaXVzIEZsYWNjdXMsIGhpcyBjb2xsZWFndWUgYW5kIGZyaWVuZCwgY2hpZWYgc2VuYXRvci4gSGUgYWxzbyBleHBlbGxlZCBtYW55IG1lbWJlcnMgb2YgdGhlIFNlbmF0ZSwgaW5jbHVkaW5nIEx1Y2l1cyBRdWludGl1cy4gVGhpcyBtYW4gaGFkIGJlZW4gY29uc3VsIHNldmVuIHllYXJzIGJlZm9yZSwgYW5kLCBhIHRoaW5nIHdoaWNoIGdhdmUgaGltIG1vcmUgcmVwdXRhdGlvbiB0aGFuIHRoZSBjb25zdWxzaGlwIGV2ZW4sIHdhcyBicm90aGVyIG9mIHRoZSBUaXR1cyBGbGFtaW5pbnVzIHdobyBjb25xdWVyZWQgS2luZyBQaGlsaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBDeW5vc2NlcGhhbGFlLCAxOTggQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24gZm9yIGhpcyBleHB1bHNpb24gd2FzIHRoZSBmb2xsb3dpbmcuIFRoZXJlIHdhcyBhIHlvdXRoIHdobywgZXZlciBzaW5jZSBoaXMgYm95aG9vZCwgaGFkIGJlZW4gdGhlIGZhdm91cml0ZSBvZiBMdWNpdXMuIFRoaXMgeW91dGggTHVjaXVzIGtlcHQgZXZlciBhYm91dCBoaW0sIGFuZCB0b29rIHdpdGggaGltIG9uIGhpcyBjYW1wYWlnbnMgaW4gZ3JlYXRlciBob25vdXIgYW5kIHBvd2VyIHRoYW4gYW55IG9uZSBvZiBoaXMgbmVhcmVzdCBmcmllbmRzIGFuZCBraW5zbWVuIGhhZC4gSGUgd2FzIG9uY2UgYWRtaW5pc3RlcmluZyB0aGUgYWZmYWlycyBvZiBoaXMgY29uc3VsYXIgcHJvdmluY2UsIGFuZCBhdCBhIGNlcnRhaW4gYmFucXVldCB0aGlzIHlvdXRoLCBhcyB3YXMgaGlzIHdvbnQsIHJlY2xpbmVkIGF0IGhpcyBzaWRlLCBhbmQgYmVnYW4gdG8gcGF5IGhpcyBmbGF0dGVyaWVzIHRvIGEgbWFuIHdobywgaW4gaGlzIGN1cHMsIHdhcyB0b28gZWFzaWx5IGxlZCBhYm91dC4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgbG92ZSB5b3Ugc28gbXVjaCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IG9uY2UsIHdoZW4gdGhlcmUgd2FzIGEgZ2xhZGlhdG9yaWFsIHNob3cgYXQgaG9tZSwgYSB0aGluZyB3aGljaCBJIGhhZCBuZXZlciBzZWVuLCBJIHJ1c2hlZCBhd2F5IGZyb20gaXQgdG8gam9pbiB5b3UsIGFsdGhvdWdoIG15IGhlYXJ0IHdhcyBzZXQgb24gc2VlaW5nIGEgbWFuIHNsYXVnaHRlcmVkLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIGZvciB0aGF0IG1hdHRlciw8L3E+IHNhaWQgTHVjaXVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZG9uJ3QgbGllIHRoZXJlIHdpdGggYW55IGdydWRnZSBhZ2FpbnN0IG1lLCBmb3IgSSB3aWxsIGN1cmUgaXQuPC9xPiBUaGVyZXVwb24gaGUgY29tbWFuZGVkIHRoYXQgb25lIG9mIHRoZSBtZW4gd2hvIHdlcmUgbHlpbmcgdW5kZXIgc2VudGVuY2Ugb2YgZGVhdGggYmUgYnJvdWdodCB0byB0aGUgYmFucXVldCwgYW5kIHRoYXQgYSBsaWN0b3Igd2l0aCBhbiBheGUgc3RhbmQgYnkgaGlzIHNpZGUuIFRoZW4gaGUgYXNrZWQgaGlzIGJlbG92ZWQgaWYgaGUgd2lzaGVkIHRvIHNlZSB0aGUgbWFuIHNtaXR0ZW4uIFRoZSB5b3V0aCBzYWlkIGhlIGRpZCwgYW5kIEx1Y2l1cyBvcmRlcmVkIHRoZSBtYW4ncyBoZWFkIHRvIGJlIGN1dCBvZmYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHZlcnNpb24gd2hpY2ggbW9zdCB3cml0ZXJzIGdpdmUgb2YgdGhlIGFmZmFpciwgYW5kIHNvIENpY2VybyBoYXMgcmVwcmVzZW50ZWQgQ2F0byBoaW1zZWxmIGFzIHRlbGxpbmcgdGhlIHN0b3J5IGluIGhpcyBkaWFsb2d1ZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIE9sZCBBZ2UuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0byBmci4gMTIuNDIiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNYWlvcjwvdGl0bGU+LCAxMiAsNDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEJ1dCBMaXZ5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQyIiB2YWxpZD0ieWVzIj54eHhpeCwgNDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNheXMgdGhlIHZpY3RpbSB3YXMgYSBHYWxsaWMgZGVzZXJ0ZXIsIGFuZCB0aGF0IEx1Y2l1cyBkaWQgbm90IGhhdmUgdGhlIG1hbiBzbGFpbiBieSBhIGxpY3RvciwgYnV0IHNtb3RlIGhpbSB3aXRoIGhpcyBvd24gaGFuZCwgYW5kIHRoYXQgdGhpcyBpcyB0aGUgdmVyc2lvbiBvZiB0aGUgc3RvcnkgaW4gYSBzcGVlY2ggb2YgQ2F0bydzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHZlcnNpb24gd2hpY2ggbW9zdCB3cml0ZXJzIGdpdmUgb2YgdGhlIGFmZmFpciwgYW5kIHNvIENpY2VybyBoYXMgcmVwcmVzZW50ZWQgQ2F0byBoaW1zZWxmIGFzIHRlbGxpbmcgdGhlIHN0b3J5IGluIGhpcyBkaWFsb2d1ZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gT2xkIEFnZS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0byBmci4gMTIuNDIiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1haW9yPC90aXRsZT4sIDEyICw0Mi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IExpdnk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhdG8gZnIuIDEyLjQyIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNYWlvcjwvdGl0bGU+LCAxMiAsNDIuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1haW9yPC90aXRsZT4sIDEyICw0Mi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQyIiB2YWxpZD0ieWVzIj54eHhpeCwgNDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNheXMgdGhlIHZpY3RpbSB3YXMgYSBHYWxsaWMgZGVzZXJ0ZXIsIGFuZCB0aGF0IEx1Y2l1cyBkaWQgbm90IGhhdmUgdGhlIG1hbiBzbGFpbiBieSBhIGxpY3RvciwgYnV0IHNtb3RlIGhpbSB3aXRoIGhpcyBvd24gaGFuZCwgYW5kIHRoYXQgdGhpcyBpcyB0aGUgdmVyc2lvbiBvZiB0aGUgc3RvcnkgaW4gYSBzcGVlY2ggb2YgQ2F0bydzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM5LjQyIiB2YWxpZD0ieWVzIj54eHhpeCwgNDIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgZXhwdWxzaW9uIG9mIEx1Y2l1cyBmcm9tIHRoZSBTZW5hdGUgYnkgQ2F0bywgaGlzIGJyb3RoZXIgd2FzIGdyZWF0bHkgaW5kaWduYW50LCBhbmQgYXBwZWFsZWQgdG8gdGhlIHBlb3BsZSwgdXJnaW5nIHRoYXQgQ2F0byBzdGF0ZSBoaXMgcmVhc29ucyBmb3IgdGhlIGV4cHVsc2lvbi4gQ2F0byBkaWQgc28sIG5hcnJhdGluZyB0aGUgaW5jaWRlbnQgb2YgdGhlIGJhbnF1ZXQuIEx1Y2l1cyBhdHRlbXB0ZWQgdG8gbWFrZSBkZW5pYWwsIGJ1dCB3aGVuIENhdG8gY2hhbGxlbmdlZCBoaW0gdG8gYSBmb3JtYWwgdHJpYWwgb2YgdGhlIGNhc2Ugd2l0aCBhIHdhZ2VyIG9mIG1vbmV5IHVwb24gaXQsIGhlIGRlY2xpbmVkLiBUaGVuIHRoZSBqdXN0aWNlIG9mIGhpcyBwdW5pc2htZW50IHdhcyByZWNvZ25pemVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb25jZSB3aGVuIGEgc3BlY3RhY2xlIHdhcyBnaXZlbiBpbiB0aGUgdGhlYXRyZSwgaGUgcGFzc2VkIGFsb25nIGJ5IHRoZSBzZW5hdG9yaWFsIHNlYXRzLCBhbmQgdG9vayBoaXMgcGxhY2UgYXMgZmFyIGF3YXkgZnJvbSB0aGVtIGFzIGhlIGNvdWxkLiBUaGVuIHRoZSBwZW9wbGUgdG9vayBwaXR5IHVwb24gaGltIGFuZCBzaG91dGVkIHRpbGwgdGhleSBoYWQgZm9yY2VkIGhpbSB0byBjaGFuZ2UgaGlzIHNlYXQsIHRodXMgcmVjdGlmeWluZywgYXMgZmFyIGFzIHdhcyBwb3NzaWJsZSwgYW5kIGFsbGV2aWF0aW5nIHRoZSBzaXR1YXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBleHB1bHNpb24gb2YgTHVjaXVzIGZyb20gdGhlIFNlbmF0ZSBieSBDYXRvLCBoaXMgYnJvdGhlciB3YXMgZ3JlYXRseSBpbmRpZ25hbnQsIGFuZCBhcHBlYWxlZCB0byB0aGUgcGVvcGxlLCB1cmdpbmcgdGhhdCBDYXRvIHN0YXRlIGhpcyByZWFzb25zIGZvciB0aGUgZXhwdWxzaW9uLiBDYXRvIGRpZCBzbywgbmFycmF0aW5nIHRoZSBpbmNpZGVudCBvZiB0aGUgYmFucXVldC4gTHVjaXVzIGF0dGVtcHRlZCB0byBtYWtlIGRlbmlhbCwgYnV0IHdoZW4gQ2F0byBjaGFsbGVuZ2VkIGhpbSB0byBhIGZvcm1hbCB0cmlhbCBvZiB0aGUgY2FzZSB3aXRoIGEgd2FnZXIgb2YgbW9uZXkgdXBvbiBpdCwgaGUgZGVjbGluZWQuIFRoZW4gdGhlIGp1c3RpY2Ugb2YgaGlzIHB1bmlzaG1lbnQgd2FzIHJlY29nbml6ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmNlIHdoZW4gYSBzcGVjdGFjbGUgd2FzIGdpdmVuIGluIHRoZSB0aGVhdHJlLCBoZSBwYXNzZWQgYWxvbmcgYnkgdGhlIHNlbmF0b3JpYWwgc2VhdHMsIGFuZCB0b29rIGhpcyBwbGFjZSBhcyBmYXIgYXdheSBmcm9tIHRoZW0gYXMgaGUgY291bGQuIFRoZW4gdGhlIHBlb3BsZSB0b29rIHBpdHkgdXBvbiBoaW0gYW5kIHNob3V0ZWQgdGlsbCB0aGV5IGhhZCBmb3JjZWQgaGltIHRvIGNoYW5nZSBoaXMgc2VhdCwgdGh1cyByZWN0aWZ5aW5nLCBhcyBmYXIgYXMgd2FzIHBvc3NpYmxlLCBhbmQgYWxsZXZpYXRpbmcgdGhlIHNpdHVhdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byBleHBlbGxlZCBhbm90aGVyIHNlbmF0b3Igd2hvIHdhcyB0aG91Z2h0IHRvIGhhdmUgZ29vZCBwcm9zcGVjdHMgZm9yIHRoZSBjb25zdWxzaGlwLCBuYW1lbHksIE1hbmlsaXVzLCBiZWNhdXNlIGhlIGVtYnJhY2VkIGhpcyB3aWZlIGluIG9wZW4gZGF5IGJlZm9yZSB0aGUgZXllcyBvZiBoaXMgZGF1Z2h0ZXIuIEZvciBoaXMgb3duIHBhcnQsIGhlIHNhaWQsIGhlIG5ldmVyIGVtYnJhY2VkIGhpcyB3aWZlIHVubGVzcyBpdCB0aHVuZGVyZWQgbG91ZGx5OyBhbmQgaXQgd2FzIGEgcGxlYXNhbnRyeSBvZiBoaXMgdG8gcmVtYXJrIHRoYXQgaGUgd2FzIGEgaGFwcHkgbWFuIHdoZW4gaXQgdGh1bmRlcmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8gZXhwZWxsZWQgYW5vdGhlciBzZW5hdG9yIHdobyB3YXMgdGhvdWdodCB0byBoYXZlIGdvb2QgcHJvc3BlY3RzIGZvciB0aGUgY29uc3Vsc2hpcCwgbmFtZWx5LCBNYW5pbGl1cywgYmVjYXVzZSBoZSBlbWJyYWNlZCBoaXMgd2lmZSBpbiBvcGVuIGRheSBiZWZvcmUgdGhlIGV5ZXMgb2YgaGlzIGRhdWdodGVyLiBGb3IgaGlzIG93biBwYXJ0LCBoZSBzYWlkLCBoZSBuZXZlciBlbWJyYWNlZCBoaXMgd2lmZSB1bmxlc3MgaXQgdGh1bmRlcmVkIGxvdWRseTsgYW5kIGl0IHdhcyBhIHBsZWFzYW50cnkgb2YgaGlzIHRvIHJlbWFyayB0aGF0IGhlIHdhcyBhIGhhcHB5IG1hbiB3aGVuIGl0IHRodW5kZXJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byB3YXMgcmF0aGVyIGJpdHRlcmx5IGNlbnN1cmVkIGZvciBoaXMgdHJlYXRtZW50IG9mIEx1Y2l1cywgdGhlIGJyb3RoZXIgb2YgU2NpcGlvLCB3aG9tLCB0aG91Z2ggaGUgaGFkIGFjaGlldmVkIHRoZSBob25vdXIgb2YgYSB0cml1bXBoLCBoZSBleHBlbGxlZCBmcm9tIHRoZSBlcXVlc3RyaWFuIG9yZGVyLiBIZSB3YXMgdGhvdWdodCB0byBoYXZlIGRvbmUgdGhpcyBhcyBhbiBpbnN1bHQgdG8gdGhlIG1lbW9yeSBvZiBTY2lwaW8gQWZyaWNhbnVzLiBCdXQgaGUgd2FzIG1vc3Qgb2Jub3hpb3VzIHRvIHRoZSBtYWpvcml0eSBvZiBoaXMgZW5lbWllcyBiZWNhdXNlIGhlIGxvcHBlZCBvZmYgZXh0cmF2YWdhbmNlIGluIGxpdmluZy4gVGhpcyBjb3VsZCBub3QgYmUgZG9uZSBhd2F5IHdpdGggb3V0cmlnaHQsIHNpbmNlIG1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGFscmVhZHkgaW5mZWN0ZWQgYW5kIGNvcnJ1cHRlZCBieSBpdCwgYW5kIHNvIGhlIHRvb2sgYSByb3VuZGFib3V0IHdheS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIGFsbCBhcHBhcmVsLCBlcXVpcGFnZXMsIGpld2VsbGVyeSwgZnVybml0dXJlIGFuZCBwbGF0ZSwgdGhlIHZhbHVlIG9mIHdoaWNoIGluIGFueSBjYXNlIGV4Y2VlZGVkIGZpZnRlZW4gaHVuZHJlZCBkcmFjaG1hcywgYXNzZXNzZWQgYXQgdGVuIHRpbWVzIGl0cyB3b3J0aCwgd2lzaGluZyBieSBtZWFucyBvZiBsYXJnZXIgYXNzZXNzbWVudHMgdG8gbWFrZSB0aGUgb3duZXJzJyB0YXhlcyBhbHNvIGxhcmdlci4gVGhlbiBoZSBsYWlkIGEgdGF4IG9mIHRocmVlIG9uIGV2ZXJ5IHRob3VzYW5kIGFzc2VzIHRodXMgYXNzZXNzZWQsIGluIG9yZGVyIHRoYXQgc3VjaCBwcm9wZXJ0eSBob2xkZXJzLCBidXJkZW5lZCBieSB0aGVpciBjaGFyZ2VzLCBhbmQgc2VlaW5nIHRoYXQgcGVvcGxlIG9mIGVxdWFsIHdlYWx0aCB3aG8gbGVkIG1vZGVzdCBhbmQgc2ltcGxlIGxpdmVzIHBhaWQgbGVzcyBpbnRvIHRoZSBwdWJsaWMgdHJlYXN1cnksIG1pZ2h0IGRlc2lzdCBmcm9tIHRoZWlyIGV4dHJhdmFnYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgYSByZXN1bHQsIGJvdGggY2xhc3NlcyB3ZXJlIGluY2Vuc2VkIGFnYWluc3QgaGltLCBib3RoIHRob3NlIHdobyBlbmR1cmVkIHRoZSB0YXhlcyBmb3IgdGhlIHNha2Ugb2YgdGhlaXIgbHV4dXJ5LCBhbmQgdGhvc2Ugbm8gbGVzcyB3aG8gcHV0IGF3YXkgdGhlaXIgbHV4dXJ5IGJlY2F1c2Ugb2YgdGhlIHRheGVzLiBGb3IgbW9zdCBtZW4gdGhpbmsgdGhlbXNlbHZlcyByb2JiZWQgb2YgdGhlaXIgd2VhbHRoIGlmIHRoZXkgYXJlIHByZXZlbnRlZCBmcm9tIGRpc3BsYXlpbmcgaXQsIGFuZCB0aGF0IGRpc3BsYXkgb2YgaXQgaXMgbWFkZSBpbiB0aGUgc3VwZXJmbHVpdGllcywgbm90IGluIHRoZSBuZWNlc3NhcmllcyBvZiBsaWZlLiBUaGlzLCB3ZSBhcmUgdG9sZCwgaXMgd2hhdCBtb3N0IGFzdG9uaXNoZWQgQXJpc3RvbiB0aGUgcGhpbG9zb3BoZXIsIG5hbWVseSwgdGhhdCB0aG9zZSBwb3NzZXNzZWQgb2YgdGhlIHN1cGVyZmx1aXRpZXMgb2YgbGlmZSBzaG91bGQgYmUgY291bnRlZCBoYXBweSwgcmF0aGVyIHRoYW4gdGhvc2Ugd2VsbCBwcm92aWRlZCB3aXRoIGxpZmUncyBuZWNlc3NhcnkgYW5kIHVzZWZ1bCB0aGluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNjb3BhcyB0aGUgVGhlc3NhbGlhbiwgd2hlbiBvbmUgb2YgaGlzIGZyaWVuZHMgYXNrZWQgZm9yIHNvbWV0aGluZyBvZiBoaXMgd2hpY2ggd2FzIG9mIG5vIGdyZWF0IHNlcnZpY2UgdG8gaGltLCB3aXRoIHRoZSByZW1hcmsgdGhhdCBoZSBhc2tlZCBmb3Igbm90aGluZyB0aGF0IHdhcyBuZWNlc3NhcnkgYW5kIHVzZWZ1bCwgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0IG15IHdlYWx0aCBhbmQgaGFwcGluZXNzIGFyZSBiYXNlZCBvbiBqdXN0IHN1Y2ggdXNlbGVzcyBhbmQgc3VwZXJmbHVvdXMgdGhpbmdzLjwvcT4gVGh1cyB0aGUgZGVzaXJlIGZvciB3ZWFsdGggaXMgbm8gbmF0dXJhbCBhZGp1bmN0IG9mIHRoZSBzb3VsLCBidXQgaXMgaW1wb3NlZCB1cG9uIGl0IGJ5IHRoZSBmYWxzZSBvcGluaW9ucyBvZiB0aGUgb3V0c2lkZSB3b3JsZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0byB3YXMgcmF0aGVyIGJpdHRlcmx5IGNlbnN1cmVkIGZvciBoaXMgdHJlYXRtZW50IG9mIEx1Y2l1cywgdGhlIGJyb3RoZXIgb2YgU2NpcGlvLCB3aG9tLCB0aG91Z2ggaGUgaGFkIGFjaGlldmVkIHRoZSBob25vdXIgb2YgYSB0cml1bXBoLCBoZSBleHBlbGxlZCBmcm9tIHRoZSBlcXVlc3RyaWFuIG9yZGVyLiBIZSB3YXMgdGhvdWdodCB0byBoYXZlIGRvbmUgdGhpcyBhcyBhbiBpbnN1bHQgdG8gdGhlIG1lbW9yeSBvZiBTY2lwaW8gQWZyaWNhbnVzLiBCdXQgaGUgd2FzIG1vc3Qgb2Jub3hpb3VzIHRvIHRoZSBtYWpvcml0eSBvZiBoaXMgZW5lbWllcyBiZWNhdXNlIGhlIGxvcHBlZCBvZmYgZXh0cmF2YWdhbmNlIGluIGxpdmluZy4gVGhpcyBjb3VsZCBub3QgYmUgZG9uZSBhd2F5IHdpdGggb3V0cmlnaHQsIHNpbmNlIG1vc3Qgb2YgdGhlIHBlb3BsZSB3ZXJlIGFscmVhZHkgaW5mZWN0ZWQgYW5kIGNvcnJ1cHRlZCBieSBpdCwgYW5kIHNvIGhlIHRvb2sgYSByb3VuZGFib3V0IHdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbGwgYXBwYXJlbCwgZXF1aXBhZ2VzLCBqZXdlbGxlcnksIGZ1cm5pdHVyZSBhbmQgcGxhdGUsIHRoZSB2YWx1ZSBvZiB3aGljaCBpbiBhbnkgY2FzZSBleGNlZWRlZCBmaWZ0ZWVuIGh1bmRyZWQgZHJhY2htYXMsIGFzc2Vzc2VkIGF0IHRlbiB0aW1lcyBpdHMgd29ydGgsIHdpc2hpbmcgYnkgbWVhbnMgb2YgbGFyZ2VyIGFzc2Vzc21lbnRzIHRvIG1ha2UgdGhlIG93bmVycycgdGF4ZXMgYWxzbyBsYXJnZXIuIFRoZW4gaGUgbGFpZCBhIHRheCBvZiB0aHJlZSBvbiBldmVyeSB0aG91c2FuZCBhc3NlcyB0aHVzIGFzc2Vzc2VkLCBpbiBvcmRlciB0aGF0IHN1Y2ggcHJvcGVydHkgaG9sZGVycywgYnVyZGVuZWQgYnkgdGhlaXIgY2hhcmdlcywgYW5kIHNlZWluZyB0aGF0IHBlb3BsZSBvZiBlcXVhbCB3ZWFsdGggd2hvIGxlZCBtb2Rlc3QgYW5kIHNpbXBsZSBsaXZlcyBwYWlkIGxlc3MgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LCBtaWdodCBkZXNpc3QgZnJvbSB0aGVpciBleHRyYXZhZ2FuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgcmVzdWx0LCBib3RoIGNsYXNzZXMgd2VyZSBpbmNlbnNlZCBhZ2FpbnN0IGhpbSwgYm90aCB0aG9zZSB3aG8gZW5kdXJlZCB0aGUgdGF4ZXMgZm9yIHRoZSBzYWtlIG9mIHRoZWlyIGx1eHVyeSwgYW5kIHRob3NlIG5vIGxlc3Mgd2hvIHB1dCBhd2F5IHRoZWlyIGx1eHVyeSBiZWNhdXNlIG9mIHRoZSB0YXhlcy4gRm9yIG1vc3QgbWVuIHRoaW5rIHRoZW1zZWx2ZXMgcm9iYmVkIG9mIHRoZWlyIHdlYWx0aCBpZiB0aGV5IGFyZSBwcmV2ZW50ZWQgZnJvbSBkaXNwbGF5aW5nIGl0LCBhbmQgdGhhdCBkaXNwbGF5IG9mIGl0IGlzIG1hZGUgaW4gdGhlIHN1cGVyZmx1aXRpZXMsIG5vdCBpbiB0aGUgbmVjZXNzYXJpZXMgb2YgbGlmZS4gVGhpcywgd2UgYXJlIHRvbGQsIGlzIHdoYXQgbW9zdCBhc3RvbmlzaGVkIEFyaXN0b24gdGhlIHBoaWxvc29waGVyLCBuYW1lbHksIHRoYXQgdGhvc2UgcG9zc2Vzc2VkIG9mIHRoZSBzdXBlcmZsdWl0aWVzIG9mIGxpZmUgc2hvdWxkIGJlIGNvdW50ZWQgaGFwcHksIHJhdGhlciB0aGFuIHRob3NlIHdlbGwgcHJvdmlkZWQgd2l0aCBsaWZlJ3MgbmVjZXNzYXJ5IGFuZCB1c2VmdWwgdGhpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNjb3BhcyB0aGUgVGhlc3NhbGlhbiwgd2hlbiBvbmUgb2YgaGlzIGZyaWVuZHMgYXNrZWQgZm9yIHNvbWV0aGluZyBvZiBoaXMgd2hpY2ggd2FzIG9mIG5vIGdyZWF0IHNlcnZpY2UgdG8gaGltLCB3aXRoIHRoZSByZW1hcmsgdGhhdCBoZSBhc2tlZCBmb3Igbm90aGluZyB0aGF0IHdhcyBuZWNlc3NhcnkgYW5kIHVzZWZ1bCwgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB5ZXQgbXkgd2VhbHRoIGFuZCBoYXBwaW5lc3MgYXJlIGJhc2VkIG9uIGp1c3Qgc3VjaCB1c2VsZXNzIGFuZCBzdXBlcmZsdW91cyB0aGluZ3MuPC9xPiBUaHVzIHRoZSBkZXNpcmUgZm9yIHdlYWx0aCBpcyBubyBuYXR1cmFsIGFkanVuY3Qgb2YgdGhlIHNvdWwsIGJ1dCBpcyBpbXBvc2VkIHVwb24gaXQgYnkgdGhlIGZhbHNlIG9waW5pb25zIG9mIHRoZSBvdXRzaWRlIHdvcmxkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBDYXRvIHBhaWQgbm90IHRoZSBzbGlnaHRlc3QgaGVlZCB0byBoaXMgYWNjdXNlcnMsIGJ1dCBncmV3IHN0aWxsIG1vcmUgc3RyaWN0LiBIZSBjdXQgb2ZmIHRoZSBwaXBlcyBieSB3aGljaCBwZW9wbGUgY29udmV5ZWQgcGFydCBvZiB0aGUgcHVibGljIHdhdGVyIHN1cHBseSBpbnRvIHRoZWlyIHByaXZhdGUgaG91c2VzIGFuZCBnYXJkZW5zOyBoZSB1cHNldCBhbmQgZGVtb2xpc2hlZCBhbGwgYnVpbGRpbmdzIHRoYXQgZW5jcm9hY2hlZCBvbiBwdWJsaWMgbGFuZDsgaGUgcmVkdWNlZCB0aGUgY29zdCBvZiBwdWJsaWMgd29ya3MgdG8gdGhlIGxvd2VzdCwgYW5kIGZvcmNlZCB0aGUgcmVudCBvZiBwdWJsaWMgbGFuZHMgdG8gdGhlIGhpZ2hlc3QgcG9zc2libGUgZmlndXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlc2UgdGhpbmcgYnJvdWdodCBtdWNoIG9kaXVtIHVwb24gaGltLiBUaXR1cyBGbGFtaW5pbnVzIGhlYWRlZCBhIHBhcnR5IGFnYWluc3QgaGltIHdoaWNoIGluZHVjZWQgdGhlIFNlbmF0ZSB0byBhbm51bCBhcyB1c2VsZXNzIHRoZSBvdXRsYXlzIGFuZCBwYXltZW50cyB3aGljaCBoZSBoYWQgYXV0aG9yaXNlZCBmb3IgdGVtcGxlcyBhbmQgcHVibGljIHdvcmtzLCBhbmQgaW5jaXRlZCB0aGUgYm9sZGVzdCBvZiB0aGUgdHJpYnVuZXMgdG8gY2FsbCBoaW0gdG8gYWNjb3VudCBiZWZvcmUgdGhlIHBlb3BsZSBhbmQgZmluZSBoaW0gdHdvIHRhbGVudHMuIFRoZSBTZW5hdGUgYWxzbyBzdHJvbmdseSBvcHBvc2VkIHRoZSBlcmVjdGlvbiBvZiB0aGUgYmFzaWxpY2Egd2hpY2ggaGUgYnVpbHQgYXQgdGhlIHB1YmxpYyBjb3N0IGJlbG93IHRoZSBjb3VuY2lsLWhvdXNlIGluIHRoZSBGb3J1bSwgYW5kIHdoaWNoIHdhcyBjYWxsZWQgdGhlIEJhc2lsaWNhIFBvcmNpYS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgQ2F0byBwYWlkIG5vdCB0aGUgc2xpZ2h0ZXN0IGhlZWQgdG8gaGlzIGFjY3VzZXJzLCBidXQgZ3JldyBzdGlsbCBtb3JlIHN0cmljdC4gSGUgY3V0IG9mZiB0aGUgcGlwZXMgYnkgd2hpY2ggcGVvcGxlIGNvbnZleWVkIHBhcnQgb2YgdGhlIHB1YmxpYyB3YXRlciBzdXBwbHkgaW50byB0aGVpciBwcml2YXRlIGhvdXNlcyBhbmQgZ2FyZGVuczsgaGUgdXBzZXQgYW5kIGRlbW9saXNoZWQgYWxsIGJ1aWxkaW5ncyB0aGF0IGVuY3JvYWNoZWQgb24gcHVibGljIGxhbmQ7IGhlIHJlZHVjZWQgdGhlIGNvc3Qgb2YgcHVibGljIHdvcmtzIHRvIHRoZSBsb3dlc3QsIGFuZCBmb3JjZWQgdGhlIHJlbnQgb2YgcHVibGljIGxhbmRzIHRvIHRoZSBoaWdoZXN0IHBvc3NpYmxlIGZpZ3VyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGVzZSB0aGluZyBicm91Z2h0IG11Y2ggb2RpdW0gdXBvbiBoaW0uIFRpdHVzIEZsYW1pbmludXMgaGVhZGVkIGEgcGFydHkgYWdhaW5zdCBoaW0gd2hpY2ggaW5kdWNlZCB0aGUgU2VuYXRlIHRvIGFubnVsIGFzIHVzZWxlc3MgdGhlIG91dGxheXMgYW5kIHBheW1lbnRzIHdoaWNoIGhlIGhhZCBhdXRob3Jpc2VkIGZvciB0ZW1wbGVzIGFuZCBwdWJsaWMgd29ya3MsIGFuZCBpbmNpdGVkIHRoZSBib2xkZXN0IG9mIHRoZSB0cmlidW5lcyB0byBjYWxsIGhpbSB0byBhY2NvdW50IGJlZm9yZSB0aGUgcGVvcGxlIGFuZCBmaW5lIGhpbSB0d28gdGFsZW50cy4gVGhlIFNlbmF0ZSBhbHNvIHN0cm9uZ2x5IG9wcG9zZWQgdGhlIGVyZWN0aW9uIG9mIHRoZSBiYXNpbGljYSB3aGljaCBoZSBidWlsdCBhdCB0aGUgcHVibGljIGNvc3QgYmVsb3cgdGhlIGNvdW5jaWwtaG91c2UgaW4gdGhlIEZvcnVtLCBhbmQgd2hpY2ggd2FzIGNhbGxlZCB0aGUgQmFzaWxpY2EgUG9yY2lhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCwgaXQgYXBwZWFycyB0aGF0IHRoZSBwZW9wbGUgYXBwcm92ZWQgb2YgaGlzIGNlbnNvcnNoaXAgdG8gYW4gYW1hemluZyBleHRlbnQuIEF0IGFueSByYXRlLCBhZnRlciBlcmVjdGluZyBhIHN0YXR1ZSB0byBoaXMgaG9ub3VyIGluIHRoZSB0ZW1wbGUgb2YgSGVhbHRoLCB0aGV5IGNvbW1lbW9yYXRlZCBpbiB0aGUgaW5zY3JpcHRpb24gdXBvbiBpdCwgbm90IHRoZSBtaWxpdGFyeSBjb21tYW5kcyBub3IgdGhlIHRyaXVtcGggb2YgQ2F0bywgYnV0LCBhcyB0aGUgaW5zY3JpcHRpb24gbWF5IGJlIHRyYW5zbGF0ZWQsIHRoZSBmYWN0IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB3aGVuIHRoZSBSb21hbiBzdGF0ZSB3YXMgdG90dGVyaW5nIHRvIGl0cyBmYWxsLCBoZSB3YXMgbWFkZSBjZW5zb3IsIGFuZCBieSBoZWxwZnVsIGd1aWRhbmNlLCB3aXNlIHJlc3RyYWludHMsIGFuZCBzb3VuZCB0ZWFjaGluZ3MsIHJlc3RvcmVkIGl0IGFnYWluLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBiZWZvcmUgdGhpcyB0aW1lIGhlIHVzZWQgdG8gbGF1Z2ggYXQgdGhvc2Ugd2hvIGRlbGlnaHRlZCBpbiBzdWNoIGhvbm91cnMsIHNheWluZyB0aGF0LCBhbHRob3VnaCB0aGV5IGtuZXcgaXQgbm90LCB0aGVpciBwcmlkZSB3YXMgYmFzZWQgc2ltcGx5IG9uIHRoZSB3b3JrIG9mIHN0YXR1YXJpZXMgYW5kIHBhaW50ZXJzLCB3aGVyZWFzIGhpcyBvd24gaW1hZ2VzLCBvZiB0aGUgbW9zdCBleHF1aXNpdGUgd29ya21hbnNoaXAsIHdlcmUgYm9ybmUgYWJvdXQgaW4gdGhlIGhlYXJ0cyBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLiBBbmQgdG8gdGhvc2Ugd2hvIGV4cHJlc3NlZCB0aGVpciBhbWF6ZW1lbnQgdGhhdCBtYW55IG1lbiBvZiBubyBmYW1lIGhhZCBzdGF0dWVzLCB3aGlsZSBoZSBoYWQgbm9uZSwgaGUgdXNlZCB0byBzYXk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3b3VsZCBtdWNoIHJhdGhlciBoYXZlIG1lbiBhc2sgd2h5IEkgaGF2ZSBubyBzdGF0dWUsIHRoYW4gd2h5IEkgaGF2ZSBvbmUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHNob3J0LCBoZSB0aG91Z2h0IGEgZ29vZCBjaXRpemVuIHNob3VsZCBub3QgZXZlbiBhbGxvdyBoaW1zZWxmIHRvIGJlIHByYWlzZWQsIHVubGVzcyBzdWNoIHByYWlzZSB3YXMgYmVuZWZpY2lhbCB0byB0aGUgY29tbW9ud2VhbHRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCBpdCBhcHBlYXJzIHRoYXQgdGhlIHBlb3BsZSBhcHByb3ZlZCBvZiBoaXMgY2Vuc29yc2hpcCB0byBhbiBhbWF6aW5nIGV4dGVudC4gQXQgYW55IHJhdGUsIGFmdGVyIGVyZWN0aW5nIGEgc3RhdHVlIHRvIGhpcyBob25vdXIgaW4gdGhlIHRlbXBsZSBvZiBIZWFsdGgsIHRoZXkgY29tbWVtb3JhdGVkIGluIHRoZSBpbnNjcmlwdGlvbiB1cG9uIGl0LCBub3QgdGhlIG1pbGl0YXJ5IGNvbW1hbmRzIG5vciB0aGUgdHJpdW1waCBvZiBDYXRvLCBidXQsIGFzIHRoZSBpbnNjcmlwdGlvbiBtYXkgYmUgdHJhbnNsYXRlZCwgdGhlIGZhY3QgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgd2hlbiB0aGUgUm9tYW4gc3RhdGUgd2FzIHRvdHRlcmluZyB0byBpdHMgZmFsbCwgaGUgd2FzIG1hZGUgY2Vuc29yLCBhbmQgYnkgaGVscGZ1bCBndWlkYW5jZSwgd2lzZSByZXN0cmFpbnRzLCBhbmQgc291bmQgdGVhY2hpbmdzLCByZXN0b3JlZCBpdCBhZ2Fpbi48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGJlZm9yZSB0aGlzIHRpbWUgaGUgdXNlZCB0byBsYXVnaCBhdCB0aG9zZSB3aG8gZGVsaWdodGVkIGluIHN1Y2ggaG9ub3Vycywgc2F5aW5nIHRoYXQsIGFsdGhvdWdoIHRoZXkga25ldyBpdCBub3QsIHRoZWlyIHByaWRlIHdhcyBiYXNlZCBzaW1wbHkgb24gdGhlIHdvcmsgb2Ygc3RhdHVhcmllcyBhbmQgcGFpbnRlcnMsIHdoZXJlYXMgaGlzIG93biBpbWFnZXMsIG9mIHRoZSBtb3N0IGV4cXVpc2l0ZSB3b3JrbWFuc2hpcCwgd2VyZSBib3JuZSBhYm91dCBpbiB0aGUgaGVhcnRzIG9mIGhpcyBmZWxsb3cgY2l0aXplbnMuIEFuZCB0byB0aG9zZSB3aG8gZXhwcmVzc2VkIHRoZWlyIGFtYXplbWVudCB0aGF0IG1hbnkgbWVuIG9mIG5vIGZhbWUgaGFkIHN0YXR1ZXMsIHdoaWxlIGhlIGhhZCBub25lLCBoZSB1c2VkIHRvIHNheTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgbXVjaCByYXRoZXIgaGF2ZSBtZW4gYXNrIHdoeSBJIGhhdmUgbm8gc3RhdHVlLCB0aGFuIHdoeSBJIGhhdmUgb25lLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHNob3J0LCBoZSB0aG91Z2h0IGEgZ29vZCBjaXRpemVuIHNob3VsZCBub3QgZXZlbiBhbGxvdyBoaW1zZWxmIHRvIGJlIHByYWlzZWQsIHVubGVzcyBzdWNoIHByYWlzZSB3YXMgYmVuZWZpY2lhbCB0byB0aGUgY29tbW9ud2VhbHRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCB5ZXQgb2YgYWxsIG1lbiBoZSBoYXMgaGVhcGVkIG1vc3QgcHJhaXNlcyB1cG9uIGhpbXNlbGYuIEhlIHRlbGxzIHVzIHRoYXQgbWVuIG9mIHNlbGYtaW5kdWxnZW50IGxpdmVzLCB3aGVuIHJlYnVrZWQgZm9yIGl0LCB1c2VkIHRvIHNheTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIG91Z2h0IG5vdCB0byBiZSBibGFtZWQ7IHdlIGFyZSBubyBDYXRvcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbHNvIHRoYXQgdGhvc2Ugd2hvIGltaXRhdGVkIHNvbWUgb2YgaGlzIHByYWN0aWNlcyBhbmQgZGlkIGl0IGNsdW1zaWx5LCB3ZXJlIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxlZnQtaGFuZGVkIENhdG9zLjwvcT4gQWxzbyB0aGF0IHRoZSBTZW5hdGUgbG9va2VkIHRvIGhpbSBpbiB0aGUgbW9zdCBkYW5nZXJvdXMgY3Jpc2VzIGFzIHNlYWZhcmVycyB0byB0aGVpciBoZWxtc21hbiwgYW5kIG9mdGVuLCBpZiBoZSB3YXMgbm90IHByZXNlbnQsIHBvc3Rwb25lZCBpdHMgbW9zdCBzZXJpb3VzIGJ1c2luZXNzLiBUaGVzZSBib2FzdHMgb2YgaGlzIGFyZSBjb25maXJtZWQsIGl0IGlzIHRydWUsIGJ5IG90aGVyIHdpdG5lc3NlcywgZm9yIGhlIGhhZCBncmVhdCBhdXRob3JpdHkgaW4gdGhlIGNpdHksIGFsaWtlIGZvciBoaXMgbGlmZSwgaGlzIGVsb3F1ZW5jZSwgYW5kIGhpcyBhZ2UuCgkJCTwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBvdWdodCBub3QgdG8gYmUgYmxhbWVkOyB3ZSBhcmUgbm8gQ2F0b3MuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFsc28gdGhhdCB0aG9zZSB3aG8gaW1pdGF0ZWQgc29tZSBvZiBoaXMgcHJhY3RpY2VzIGFuZCBkaWQgaXQgY2x1bXNpbHksIHdlcmUgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sZWZ0LWhhbmRlZCBDYXRvcy48L3E+IEFsc28gdGhhdCB0aGUgU2VuYXRlIGxvb2tlZCB0byBoaW0gaW4gdGhlIG1vc3QgZGFuZ2Vyb3VzIGNyaXNlcyBhcyBzZWFmYXJlcnMgdG8gdGhlaXIgaGVsbXNtYW4sIGFuZCBvZnRlbiwgaWYgaGUgd2FzIG5vdCBwcmVzZW50LCBwb3N0cG9uZWQgaXRzIG1vc3Qgc2VyaW91cyBidXNpbmVzcy4gVGhlc2UgYm9hc3RzIG9mIGhpcyBhcmUgY29uZmlybWVkLCBpdCBpcyB0cnVlLCBieSBvdGhlciB3aXRuZXNzZXMsIGZvciBoZSBoYWQgZ3JlYXQgYXV0aG9yaXR5IGluIHRoZSBjaXR5LCBhbGlrZSBmb3IgaGlzIGxpZmUsIGhpcyBlbG9xdWVuY2UsIGFuZCBoaXMgYWdlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5YWCwgSGUgd2FzIGFsc28gYSBnb29kIGZhdGhlciwgYSBjb25zaWRlcmF0ZSBodXNiYW5kLCBhbmQgYSBob3VzZWhvbGQgbWFuYWdlciBvZiBubyBtZWFuIHRhbGVudCwgbm9yIGRpZCBoZSBnaXZlIG9ubHkgYSBmaXRmdWwgYXR0ZW50aW9uIHRvIHRoaXMsIGFzIGEgbWF0dGVyIG9mIGxpdHRsZSBvciBubyBpbXBvcnRhbmNlLiBUaGVyZWZvcmUgSSB0aGluayBJIG91Z2h0IHRvIGdpdmUgc3VpdGFibGUgaW5zdGFuY2VzIG9mIGhpcyBjb25kdWN0IGluIHRoZXNlIHJlbGF0aW9ucy4gSGUgbWFycmllZCBhIHdpZmUgd2hvIHdhcyBvZiBnZW50bGVyIGJpcnRoIHRoYW4gc2hlIHdhcyByaWNoLCB0aGlua2luZyB0aGF0LCBhbHRob3VnaCB0aGUgcmljaCBhbmQgdGhlIGhpZ2gtYm9ybiBtYXkgYmUgYWxpa2UgZ2l2ZW4gdG8gcHJpZGUsIHN0aWxsLCB3b21lbiBvZiBoaWdoIGJpcnRoIGhhdmUgc3VjaCBhIGhvcnJvciBvZiB3aGF0IGlzIGRpc2dyYWNlZnVsIHRoYXQgdGhleSBhcmUgbW9yZSBvYmVkaWVudCB0byB0aGVpciBodXNiYW5kcyBpbiBhbGwgdGhhdCBpcyBob25vdXJhYmxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB1c2VkIHRvIHNheSB0aGF0IHRoZSBtYW4gd2hvIHN0cnVjayBoaXMgd2lmZSBvciBjaGlsZCwgbGFpZCB2aW9sZW50IGhhbmRzIG9uIHRoZSBob2xpZXN0IG9mIGhvbHkgdGhpbmdzLiBBbHNvIHRoYXQgaGUgdGhvdWdodCBpdCBtb3JlIHByYWlzZXdvcnRoeSB0byBiZSBhIGdvb2QgaHVzYmFuZCB0aGFuIGEgZ3JlYXQgc2VuYXRvciwgbmF5LCB0aGVyZSB3YXMgbm90aGluZyBlbHNlIHRvIGFkbWlyZSBpbiBTb2NyYXRlcyBvZiBvbGQgZXhjZXB0IHRoYXQgaGUgd2FzIGFsd2F5cyBraW5kIGFuZCBnZW50bGUgaW4gaGlzIGludGVyY291cnNlIHdpdGggYSBzaHJld2lzaCB3aWZlIGFuZCBzdHVwaWQgc29ucy4gQWZ0ZXIgdGhlIGJpcnRoIG9mIGhpcyBzb24sIG5vIGJ1c2luZXNzIGNvdWxkIGJlIHNvIHVyZ2VudCwgdW5sZXNzIGl0IGhhZCBhIHB1YmxpYyBjaGFyYWN0ZXIsIGFzIHRvIHByZXZlbnQgaGltIGZyb20gYmVpbmcgcHJlc2VudCB3aGVuIGhpcyB3aWZlIGJhdGhlZCBhbmQgc3dhZGRsZWQgdGhlIGJhYmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgbW90aGVyIG51cnNlZCBpdCBoZXJzZWxmLCBhbmQgb2Z0ZW4gZ2F2ZSBzdWNrIGFsc28gdG8gdGhlIGluZmFudHMgb2YgaGVyIHNsYXZlcywgdGhhdCBzbyB0aGV5IG1pZ2h0IGNvbWUgdG8gY2hlcmlzaCBhIGJyb3RoZXJseSBhZmZlY3Rpb24gZm9yIGhlciBzb24uIEFzIHNvb24gYXMgdGhlIGJveSBzaG93ZWQgc2lnbnMgb2YgdW5kZXJzdGFuZGluZywgaGlzIGZhdGhlciB0b29rIGhpbSB1bmRlciBoaXMgb3duIGNoYXJnZSBhbmQgdGF1Z2h0IGhpbSB0byByZWFkLCBhbHRob3VnaCBoZSBoYWQgYW4gYWNjb21wbGlzaGVkIHNsYXZlLCBDaGlsbyBieSBuYW1lLCB3aG8gd2FzIGEgc2Nob29sdGVhY2hlciwgYW5kIHRhdWdodCBtYW55IGJveXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCBDYXRvIHRob3VnaHQgaXQgbm90IHJpZ2h0LCBhcyBoZSB0ZWxscyB1cyBoaW1zZWxmLCB0aGF0IGhpcyBzb24gc2hvdWxkIGJlIHNjb2xkZWQgYnkgYSBzbGF2ZSwgb3IgaGF2ZSBoaXMgZWFycyB0d2Vha2VkIHdoZW4gaGUgd2FzIHNsb3cgdG8gbGVhcm4sIHN0aWxsIGxlc3MgdGhhdCBoZSBzaG91bGQgYmUgaW5kZWJ0ZWQgdG8gaGlzIHNsYXZlIGZvciBzdWNoIGEgcHJpY2VsZXNzIHRoaW5nIGFzIGVkdWNhdGlvbi4gSGUgd2FzIHRoZXJlZm9yZSBoaW1zZWxmIG5vdCBvbmx5IHRoZSBib3kncyByZWFkaW5nLXRlYWNoZXIsIGJ1dCBoaXMgdHV0b3IgaW4gbGF3LCBhbmQgaGlzIGF0aGxldGljIHRyYWluZXIsIGFuZCBoZSB0YXVnaHQgaGlzIHNvbiBub3QgbWVyZWx5IHRvIGh1cmwgdGhlIGphdmVsaW4gYW5kIGZpZ2h0IGluIGFybW91ciBhbmQgcmlkZSB0aGUgaG9yc2UsIGJ1dCBhbHNvIHRvIGJveCwgdG8gZW5kdXJlIGhlYXQgYW5kIGNvbGQsIGFuZCB0byBzd2ltIGx1c3RpbHkgdGhyb3VnaCB0aGUgZWRkaWVzIGFuZCBiaWxsb3dzIG9mIHRoZSBUaWJlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIEhpc3Rvcnkgb2YgUm9tZSwgYXMgaGUgdGVsbHMgdXMgaGltc2VsZiwgaGUgd3JvdGUgb3V0IHdpdGggaGlzIG93biBoYW5kIGFuZCBpbiBsYXJnZSBjaGFyYWN0ZXJzLCB0aGF0IGhpcyBzb24gbWlnaHQgaGF2ZSBpbiBoaXMgb3duIGhvbWUgYW4gYWlkIHRvIGFjcXVhaW50YW5jZSB3aXRoIGhpcyBjb3VudHJ5J3MgYW5jaWVudCB0cmFkaXRpb25zLiBIZSBkZWNsYXJlcyB0aGF0IGhpcyBzb24ncyBwcmVzZW5jZSBwdXQgaGltIG9uIGhpcyBndWFyZCBhZ2FpbnN0IGluZGVjZW5jaWVzIG9mIHNwZWVjaCBhcyBtdWNoIGFzIHRoYXQgb2YgdGhlIHNvLWNhbGxlZCBWZXN0YWwgVmlyZ2lucywgYW5kIHRoYXQgaGUgbmV2ZXIgYmF0aGVkIHdpdGggaGltLiBUaGlzLCBpbmRlZWQsIHdvdWxkIHNlZW0gdG8gaGF2ZSBiZWVuIGEgZ2VuZXJhbCBjdXN0b20gd2l0aCB0aGUgUm9tYW5zLCBmb3IgZXZlbiBmYXRoZXJzLWluLWxhdyBhdm9pZGVkIGJhdGhpbmcgd2l0aCB0aGVpciBzb25zLWluLWxhdywgYmVjYXVzZSB0aGV5IHdlcmUgYXNoYW1lZCB0byB1bmNvdmVyIHRoZWlyIG5ha2VkbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcywgaG93ZXZlciwgd2hlbiB0aGV5IGhhZCBsZWFybmVkIGZyb20gdGhlIEdyZWVrcyB0aGVpciBmcmVlZG9tIGluIGdvaW5nIG5ha2VkLCB0aGV5IGluIHRoZWlyIHR1cm4gaW5mZWN0ZWQgdGhlIEdyZWVrcyB3aXRoIHRoZSBwcmFjdGljZSBldmVuIHdoZW4gd29tZW4gd2VyZSBwcmVzZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+WFgsIEhlIHdhcyBhbHNvIGEgZ29vZCBmYXRoZXIsIGEgY29uc2lkZXJhdGUgaHVzYmFuZCwgYW5kIGEgaG91c2Vob2xkIG1hbmFnZXIgb2Ygbm8gbWVhbiB0YWxlbnQsIG5vciBkaWQgaGUgZ2l2ZSBvbmx5IGEgZml0ZnVsIGF0dGVudGlvbiB0byB0aGlzLCBhcyBhIG1hdHRlciBvZiBsaXR0bGUgb3Igbm8gaW1wb3J0YW5jZS4gVGhlcmVmb3JlIEkgdGhpbmsgSSBvdWdodCB0byBnaXZlIHN1aXRhYmxlIGluc3RhbmNlcyBvZiBoaXMgY29uZHVjdCBpbiB0aGVzZSByZWxhdGlvbnMuIEhlIG1hcnJpZWQgYSB3aWZlIHdobyB3YXMgb2YgZ2VudGxlciBiaXJ0aCB0aGFuIHNoZSB3YXMgcmljaCwgdGhpbmtpbmcgdGhhdCwgYWx0aG91Z2ggdGhlIHJpY2ggYW5kIHRoZSBoaWdoLWJvcm4gbWF5IGJlIGFsaWtlIGdpdmVuIHRvIHByaWRlLCBzdGlsbCwgd29tZW4gb2YgaGlnaCBiaXJ0aCBoYXZlIHN1Y2ggYSBob3Jyb3Igb2Ygd2hhdCBpcyBkaXNncmFjZWZ1bCB0aGF0IHRoZXkgYXJlIG1vcmUgb2JlZGllbnQgdG8gdGhlaXIgaHVzYmFuZHMgaW4gYWxsIHRoYXQgaXMgaG9ub3VyYWJsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHVzZWQgdG8gc2F5IHRoYXQgdGhlIG1hbiB3aG8gc3RydWNrIGhpcyB3aWZlIG9yIGNoaWxkLCBsYWlkIHZpb2xlbnQgaGFuZHMgb24gdGhlIGhvbGllc3Qgb2YgaG9seSB0aGluZ3MuIEFsc28gdGhhdCBoZSB0aG91Z2h0IGl0IG1vcmUgcHJhaXNld29ydGh5IHRvIGJlIGEgZ29vZCBodXNiYW5kIHRoYW4gYSBncmVhdCBzZW5hdG9yLCBuYXksIHRoZXJlIHdhcyBub3RoaW5nIGVsc2UgdG8gYWRtaXJlIGluIFNvY3JhdGVzIG9mIG9sZCBleGNlcHQgdGhhdCBoZSB3YXMgYWx3YXlzIGtpbmQgYW5kIGdlbnRsZSBpbiBoaXMgaW50ZXJjb3Vyc2Ugd2l0aCBhIHNocmV3aXNoIHdpZmUgYW5kIHN0dXBpZCBzb25zLiBBZnRlciB0aGUgYmlydGggb2YgaGlzIHNvbiwgbm8gYnVzaW5lc3MgY291bGQgYmUgc28gdXJnZW50LCB1bmxlc3MgaXQgaGFkIGEgcHVibGljIGNoYXJhY3RlciwgYXMgdG8gcHJldmVudCBoaW0gZnJvbSBiZWluZyBwcmVzZW50IHdoZW4gaGlzIHdpZmUgYmF0aGVkIGFuZCBzd2FkZGxlZCB0aGUgYmFiZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgbW90aGVyIG51cnNlZCBpdCBoZXJzZWxmLCBhbmQgb2Z0ZW4gZ2F2ZSBzdWNrIGFsc28gdG8gdGhlIGluZmFudHMgb2YgaGVyIHNsYXZlcywgdGhhdCBzbyB0aGV5IG1pZ2h0IGNvbWUgdG8gY2hlcmlzaCBhIGJyb3RoZXJseSBhZmZlY3Rpb24gZm9yIGhlciBzb24uIEFzIHNvb24gYXMgdGhlIGJveSBzaG93ZWQgc2lnbnMgb2YgdW5kZXJzdGFuZGluZywgaGlzIGZhdGhlciB0b29rIGhpbSB1bmRlciBoaXMgb3duIGNoYXJnZSBhbmQgdGF1Z2h0IGhpbSB0byByZWFkLCBhbHRob3VnaCBoZSBoYWQgYW4gYWNjb21wbGlzaGVkIHNsYXZlLCBDaGlsbyBieSBuYW1lLCB3aG8gd2FzIGEgc2Nob29sdGVhY2hlciwgYW5kIHRhdWdodCBtYW55IGJveXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCBDYXRvIHRob3VnaHQgaXQgbm90IHJpZ2h0LCBhcyBoZSB0ZWxscyB1cyBoaW1zZWxmLCB0aGF0IGhpcyBzb24gc2hvdWxkIGJlIHNjb2xkZWQgYnkgYSBzbGF2ZSwgb3IgaGF2ZSBoaXMgZWFycyB0d2Vha2VkIHdoZW4gaGUgd2FzIHNsb3cgdG8gbGVhcm4sIHN0aWxsIGxlc3MgdGhhdCBoZSBzaG91bGQgYmUgaW5kZWJ0ZWQgdG8gaGlzIHNsYXZlIGZvciBzdWNoIGEgcHJpY2VsZXNzIHRoaW5nIGFzIGVkdWNhdGlvbi4gSGUgd2FzIHRoZXJlZm9yZSBoaW1zZWxmIG5vdCBvbmx5IHRoZSBib3kncyByZWFkaW5nLXRlYWNoZXIsIGJ1dCBoaXMgdHV0b3IgaW4gbGF3LCBhbmQgaGlzIGF0aGxldGljIHRyYWluZXIsIGFuZCBoZSB0YXVnaHQgaGlzIHNvbiBub3QgbWVyZWx5IHRvIGh1cmwgdGhlIGphdmVsaW4gYW5kIGZpZ2h0IGluIGFybW91ciBhbmQgcmlkZSB0aGUgaG9yc2UsIGJ1dCBhbHNvIHRvIGJveCwgdG8gZW5kdXJlIGhlYXQgYW5kIGNvbGQsIGFuZCB0byBzd2ltIGx1c3RpbHkgdGhyb3VnaCB0aGUgZWRkaWVzIGFuZCBiaWxsb3dzIG9mIHRoZSBUaWJlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBIaXN0b3J5IG9mIFJvbWUsIGFzIGhlIHRlbGxzIHVzIGhpbXNlbGYsIGhlIHdyb3RlIG91dCB3aXRoIGhpcyBvd24gaGFuZCBhbmQgaW4gbGFyZ2UgY2hhcmFjdGVycywgdGhhdCBoaXMgc29uIG1pZ2h0IGhhdmUgaW4gaGlzIG93biBob21lIGFuIGFpZCB0byBhY3F1YWludGFuY2Ugd2l0aCBoaXMgY291bnRyeSdzIGFuY2llbnQgdHJhZGl0aW9ucy4gSGUgZGVjbGFyZXMgdGhhdCBoaXMgc29uJ3MgcHJlc2VuY2UgcHV0IGhpbSBvbiBoaXMgZ3VhcmQgYWdhaW5zdCBpbmRlY2VuY2llcyBvZiBzcGVlY2ggYXMgbXVjaCBhcyB0aGF0IG9mIHRoZSBzby1jYWxsZWQgVmVzdGFsIFZpcmdpbnMsIGFuZCB0aGF0IGhlIG5ldmVyIGJhdGhlZCB3aXRoIGhpbS4gVGhpcywgaW5kZWVkLCB3b3VsZCBzZWVtIHRvIGhhdmUgYmVlbiBhIGdlbmVyYWwgY3VzdG9tIHdpdGggdGhlIFJvbWFucywgZm9yIGV2ZW4gZmF0aGVycy1pbi1sYXcgYXZvaWRlZCBiYXRoaW5nIHdpdGggdGhlaXIgc29ucy1pbi1sYXcsIGJlY2F1c2UgdGhleSB3ZXJlIGFzaGFtZWQgdG8gdW5jb3ZlciB0aGVpciBuYWtlZG5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoZW4gdGhleSBoYWQgbGVhcm5lZCBmcm9tIHRoZSBHcmVla3MgdGhlaXIgZnJlZWRvbSBpbiBnb2luZyBuYWtlZCwgdGhleSBpbiB0aGVpciB0dXJuIGluZmVjdGVkIHRoZSBHcmVla3Mgd2l0aCB0aGUgcHJhY3RpY2UgZXZlbiB3aGVuIHdvbWVuIHdlcmUgcHJlc2VudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5TbyBDYXRvIHdyb3VnaHQgYXQgdGhlIGZhaXIgdGFzayBvZiBtb3VsZGluZyBhbmQgZmFzaGlvbmluZyBoaXMgc29uIHRvIHZpcnR1ZSwgZmluZGluZyBoaXMgemVhbCBibGFtZWxlc3MsIGFuZCBoaXMgc3Bpcml0IGFuc3dlcmluZyB0byBoaXMgZ29vZCBuYXR1cmFsIHBhcnRzLiBCdXQgc2luY2UgaGlzIGJvZHkgd2FzIHJhdGhlciB0b28gZGVsaWNhdGUgdG8gZW5kdXJlIG11Y2ggaGFyZHNoaXAsIGhlIHJlbGF4ZWQgc29tZXdoYXQgaW4gaGlzIGZhdm91ciB0aGUgZXhjZXNzaXZlIHJpZ2lkaXR5IGFuZCBhdXN0ZXJpdHkgb2YgaGlzIG93biBtb2RlIG9mIGxpZmUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBzb24sIGFsdGhvdWdoIHRodXMgZGVsaWNhdGUsIG1hZGUgYSBzdHVyZHkgc29sZGllciwgYW5kIGZvdWdodCBicmlsbGlhbnRseSB1bmRlciBQYXVsdXMgQWVtaWxpdXMgaW4gdGhlIGJhdHRsZSBhZ2FpbnN0IFBlcnNldXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHlkbmEsIDE2OCBCLkMuPC9ub3RlPiBPbiB0aGF0IG9jY2FzaW9uIGhpcyBzd29yZCBlaXRoZXIgd2FzIHNtaXR0ZW4gZnJvbSBoaXMgaGFuZCBvciBzbGlwcGVkIGZyb20gaGlzIG1vaXN0IGdyYXNwLiBEaXN0cmVzc2VkIGF0IHRoaXMgbWlzaGFwLCBoZSB0dXJuZWQgdG8gc29tZSBvZiBoaXMgY29tcGFuaW9ucyBmb3IgYWlkLCBhbmQgc3VwcG9ydGVkIGJ5IHRoZW0gcnVzaGVkIGFnYWluIGludG8gdGhlIHRoaWNrIG9mIHRoZSBlbmVteS4gQWZ0ZXIgYSBsb25nIGFuZCBmdXJpb3VzIHN0cnVnZ2xlLCBoZSBzdWNjZWVkZWQgaW4gY2xlYXJpbmcgdGhlIHBsYWNlLCBhbmQgZm91bmQgdGhlIHN3b3JkIGF0IGxhc3QgYW1vbmcgdGhlIG1hbnkgaGVhcHMgb2YgYXJtcyBhbmQgZGVhZCBib2RpZXMgd2hlcmUgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSBsYXkgcGlsZWQgdXBvbiBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+UGF1bHVzLCBoaXMgY29tbWFuZGVyLCBhZG1pcmVkIHRoZSB5b3VuZyBtYW4ncyBleHBsb2l0LCBhbmQgdGhlcmUgaXMgc3RpbGwgZXh0YW50IGEgbGV0dGVyIHdyaXR0ZW4gYnkgQ2F0byBoaW1zZWxmIHRvIGhpcyBzb24sIGluIHdoaWNoIGhlIGhlYXBzIGV4dHJhdmFnYW50IHByYWlzZSB1cG9uIGhpbSBmb3IgdGhpcyBob25vdXJhYmxlIHplYWwgaW4gcmVjb3ZlcmluZyBoaXMgc3dvcmQuIFRoZSB5b3VuZyBtYW4gYWZ0ZXJ3YXJkcyBtYXJyaWVkIFRlcnRpYSwgYSBkYXVnaHRlciBvZiBQYXVsdXMgYW5kIGEgc2lzdGVyIG9mIHRoZSB5b3VuZ2VyIFNjaXBpbywgYW5kIGhpcyBhZG1pc3Npb24gaW50byBzdWNoIGEgZmFtaWx5IHdhcyBkdWUgbm8gbGVzcyB0byBoaW1zZWxmIHRoYW4gdG8gaGlzIGZhdGhlci4gVGh1cyBDYXRvJ3MgY2FyZWZ1bCBhdHRlbnRpb24gdG8gdGhlIGVkdWNhdGlvbiBvZiBoaXMgc29uIGJvcmUgd29ydGh5IGZydWl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgc29uLCBhbHRob3VnaCB0aHVzIGRlbGljYXRlLCBtYWRlIGEgc3R1cmR5IHNvbGRpZXIsIGFuZCBmb3VnaHQgYnJpbGxpYW50bHkgdW5kZXIgUGF1bHVzIEFlbWlsaXVzIGluIHRoZSBiYXR0bGUgYWdhaW5zdCBQZXJzZXVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHlkbmEsIDE2OCBCLkMuPC9ub3RlPiBPbiB0aGF0IG9jY2FzaW9uIGhpcyBzd29yZCBlaXRoZXIgd2FzIHNtaXR0ZW4gZnJvbSBoaXMgaGFuZCBvciBzbGlwcGVkIGZyb20gaGlzIG1vaXN0IGdyYXNwLiBEaXN0cmVzc2VkIGF0IHRoaXMgbWlzaGFwLCBoZSB0dXJuZWQgdG8gc29tZSBvZiBoaXMgY29tcGFuaW9ucyBmb3IgYWlkLCBhbmQgc3VwcG9ydGVkIGJ5IHRoZW0gcnVzaGVkIGFnYWluIGludG8gdGhlIHRoaWNrIG9mIHRoZSBlbmVteS4gQWZ0ZXIgYSBsb25nIGFuZCBmdXJpb3VzIHN0cnVnZ2xlLCBoZSBzdWNjZWVkZWQgaW4gY2xlYXJpbmcgdGhlIHBsYWNlLCBhbmQgZm91bmQgdGhlIHN3b3JkIGF0IGxhc3QgYW1vbmcgdGhlIG1hbnkgaGVhcHMgb2YgYXJtcyBhbmQgZGVhZCBib2RpZXMgd2hlcmUgZnJpZW5kcyBhbmQgZm9lcyBhbGlrZSBsYXkgcGlsZWQgdXBvbiBvbmUgYW5vdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlBhdWx1cywgaGlzIGNvbW1hbmRlciwgYWRtaXJlZCB0aGUgeW91bmcgbWFuJ3MgZXhwbG9pdCwgYW5kIHRoZXJlIGlzIHN0aWxsIGV4dGFudCBhIGxldHRlciB3cml0dGVuIGJ5IENhdG8gaGltc2VsZiB0byBoaXMgc29uLCBpbiB3aGljaCBoZSBoZWFwcyBleHRyYXZhZ2FudCBwcmFpc2UgdXBvbiBoaW0gZm9yIHRoaXMgaG9ub3VyYWJsZSB6ZWFsIGluIHJlY292ZXJpbmcgaGlzIHN3b3JkLiBUaGUgeW91bmcgbWFuIGFmdGVyd2FyZHMgbWFycmllZCBUZXJ0aWEsIGEgZGF1Z2h0ZXIgb2YgUGF1bHVzIGFuZCBhIHNpc3RlciBvZiB0aGUgeW91bmdlciBTY2lwaW8sIGFuZCBoaXMgYWRtaXNzaW9uIGludG8gc3VjaCBhIGZhbWlseSB3YXMgZHVlIG5vIGxlc3MgdG8gaGltc2VsZiB0aGFuIHRvIGhpcyBmYXRoZXIuIFRodXMgQ2F0bydzIGNhcmVmdWwgYXR0ZW50aW9uIHRvIHRoZSBlZHVjYXRpb24gb2YgaGlzIHNvbiBib3JlIHdvcnRoeSBmcnVpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgb3duZWQgbWFueSBkb21lc3RpY3MsIGFuZCB1c3VhbGx5IGJvdWdodCB0aG9zZSBwcmlzb25lcnMgb2Ygd2FyIHdobyB3ZXJlIHlvdW5nIGFuZCBzdGlsbCBjYXBhYmxlIG9mIGJlaW5nIHJlYXJlZCBhbmQgdHJhaW5lZCBsaWtlIHdoZWxwcyBvciBjb2x0cy4gTm90IG9uZSBvZiBoaXMgc2xhdmVzIGV2ZXIgZW50ZXJlZCBhbm90aGVyIG1hbidzIGhvdXNlIHVubGVzcyBzZW50IHRoaXRoZXIgYnkgQ2F0byBvciBoaXMgd2lmZSwgYW5kIHdoZW4gc3VjaCBhbiBvbmUgd2FzIGFza2VkIHdoYXQgQ2F0byB3YXMgZG9pbmcsIGhlIGFsd2F5cyBhbnN3ZXJlZCB0aGF0IGhlIGRpZCBub3Qga25vdy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QSBzbGF2ZSBvZiBoaXMgd2FzIGV4cGVjdGVkIGVpdGhlciB0byBiZSBidXN5IGFib3V0IHRoZSBob3VzZSwgb3IgdG8gYmUgYXNsZWVwLCBhbmQgaGUgd2FzIHZlcnkgcGFydGlhbCB0byB0aGUgc2xlZXB5IG9uZXMuIEhlIHRob3VnaHQgdGhlc2UgZ2VudGxlciB0aGFuIHRoZSB3YWtlZnVsIG9uZXMsIGFuZCB0aGF0IHRob3NlIHdobyBoYWQgZW5qb3llZCB0aGUgZ2lmdCBvZiBzbGVlcCB3ZXJlIGJldHRlciBmb3IgYW55IGtpbmQgb2Ygc2VydmljZSB0aGFuIHRob3NlIHdobyBsYWNrZWQgaXQuIEluIHRoZSBiZWxpZWYgdGhhdCBoaXMgc2xhdmVzIHdlcmUgbGVkIGludG8gbW9zdCBtaXNjaGllZiBieSB0aGVpciBzZXh1YWwgcGFzc2lvbnMsIGhlIHN0aXB1bGF0ZWQgdGhhdCB0aGUgbWFsZXMgc2hvdWxkIGNvbnNvcnQgd2l0aCB0aGUgZmVtYWxlcyBhdCBhIGZpeGVkIHByaWNlLCBidXQgc2hvdWxkIG5ldmVyIGFwcHJvYWNoIGFueSBvdGhlciB3b21hbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgb3duZWQgbWFueSBkb21lc3RpY3MsIGFuZCB1c3VhbGx5IGJvdWdodCB0aG9zZSBwcmlzb25lcnMgb2Ygd2FyIHdobyB3ZXJlIHlvdW5nIGFuZCBzdGlsbCBjYXBhYmxlIG9mIGJlaW5nIHJlYXJlZCBhbmQgdHJhaW5lZCBsaWtlIHdoZWxwcyBvciBjb2x0cy4gTm90IG9uZSBvZiBoaXMgc2xhdmVzIGV2ZXIgZW50ZXJlZCBhbm90aGVyIG1hbidzIGhvdXNlIHVubGVzcyBzZW50IHRoaXRoZXIgYnkgQ2F0byBvciBoaXMgd2lmZSwgYW5kIHdoZW4gc3VjaCBhbiBvbmUgd2FzIGFza2VkIHdoYXQgQ2F0byB3YXMgZG9pbmcsIGhlIGFsd2F5cyBhbnN3ZXJlZCB0aGF0IGhlIGRpZCBub3Qga25vdy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgc2xhdmUgb2YgaGlzIHdhcyBleHBlY3RlZCBlaXRoZXIgdG8gYmUgYnVzeSBhYm91dCB0aGUgaG91c2UsIG9yIHRvIGJlIGFzbGVlcCwgYW5kIGhlIHdhcyB2ZXJ5IHBhcnRpYWwgdG8gdGhlIHNsZWVweSBvbmVzLiBIZSB0aG91Z2h0IHRoZXNlIGdlbnRsZXIgdGhhbiB0aGUgd2FrZWZ1bCBvbmVzLCBhbmQgdGhhdCB0aG9zZSB3aG8gaGFkIGVuam95ZWQgdGhlIGdpZnQgb2Ygc2xlZXAgd2VyZSBiZXR0ZXIgZm9yIGFueSBraW5kIG9mIHNlcnZpY2UgdGhhbiB0aG9zZSB3aG8gbGFja2VkIGl0LiBJbiB0aGUgYmVsaWVmIHRoYXQgaGlzIHNsYXZlcyB3ZXJlIGxlZCBpbnRvIG1vc3QgbWlzY2hpZWYgYnkgdGhlaXIgc2V4dWFsIHBhc3Npb25zLCBoZSBzdGlwdWxhdGVkIHRoYXQgdGhlIG1hbGVzIHNob3VsZCBjb25zb3J0IHdpdGggdGhlIGZlbWFsZXMgYXQgYSBmaXhlZCBwcmljZSwgYnV0IHNob3VsZCBuZXZlciBhcHByb2FjaCBhbnkgb3RoZXIgd29tYW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBvdXRzZXQsIHdoZW4gaGUgd2FzIHN0aWxsIHBvb3IgYW5kIGluIG1pbGl0YXJ5IHNlcnZpY2UsIGhlIGZvdW5kIG5vIGZhdWx0IGF0IGFsbCB3aXRoIHdoYXQgd2FzIHNlcnZlZCB1cCB0byBoaW0sIGRlY2xhcmluZyB0aGF0IGl0IHdhcyBzaGFtZWZ1bCBmb3IgYSBtYW4gdG8gcXVhcnJlbCB3aXRoIGEgZG9tZXN0aWMgb3ZlciBmb29kIGFuZCBkcmluay4gQnV0IGFmdGVyd2FyZHMsIHdoZW4gaGlzIGNpcmN1bXN0YW5jZXMgd2VyZSBpbXByb3ZlZCBhbmQgaGUgdXNlZCB0byBlbnRlcnRhaW4gaGlzIGZyaWVuZHMgYW5kIGNvbGxlYWd1ZXMgYXQgdGFibGUsIG5vIHNvb25lciB3YXMgdGhlIGRpbm5lciBvdmVyIHRoYW4gaGUgd291bGQgZmxvZyB0aG9zZSBzbGF2ZXMgd2hvIGhhZCBiZWVuIHJlbWlzcyBhdCBhbGwgaW4gcHJlcGFyaW5nIG9yIHNlcnZpbmcgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHdheXMgY29udHJpdmluZyB0aGF0IGhpcyBzbGF2ZXMgc2hvdWxkIGhhdmUgZmV1ZHMgYW5kIGRpc3NlbnNpb25zIGFtb25nIHRoZW1zZWx2ZXM7IGhhcm1vbnkgYW1vbmcgdGhlbSBtYWRlIGhpbSBzdXNwaWNpb3VzIGFuZCBmZWFyZnVsIG9mIHRoZW0uIEhlIGhhZCB0aG9zZSB3aG8gd2VyZSBzdXNwZWN0ZWQgb2Ygc29tZSBjYXBpdGFsIG9mZmVuY2UgYnJvdWdodCB0byB0cmlhbCBiZWZvcmUgYWxsIHRoZWlyIGZlbGxvdyBzZXJ2YW50cywgYW5kLCBpZiBjb252aWN0ZWQsIHB1dCB0byBkZWF0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBvdXRzZXQsIHdoZW4gaGUgd2FzIHN0aWxsIHBvb3IgYW5kIGluIG1pbGl0YXJ5IHNlcnZpY2UsIGhlIGZvdW5kIG5vIGZhdWx0IGF0IGFsbCB3aXRoIHdoYXQgd2FzIHNlcnZlZCB1cCB0byBoaW0sIGRlY2xhcmluZyB0aGF0IGl0IHdhcyBzaGFtZWZ1bCBmb3IgYSBtYW4gdG8gcXVhcnJlbCB3aXRoIGEgZG9tZXN0aWMgb3ZlciBmb29kIGFuZCBkcmluay4gQnV0IGFmdGVyd2FyZHMsIHdoZW4gaGlzIGNpcmN1bXN0YW5jZXMgd2VyZSBpbXByb3ZlZCBhbmQgaGUgdXNlZCB0byBlbnRlcnRhaW4gaGlzIGZyaWVuZHMgYW5kIGNvbGxlYWd1ZXMgYXQgdGFibGUsIG5vIHNvb25lciB3YXMgdGhlIGRpbm5lciBvdmVyIHRoYW4gaGUgd291bGQgZmxvZyB0aG9zZSBzbGF2ZXMgd2hvIGhhZCBiZWVuIHJlbWlzcyBhdCBhbGwgaW4gcHJlcGFyaW5nIG9yIHNlcnZpbmcgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHdheXMgY29udHJpdmluZyB0aGF0IGhpcyBzbGF2ZXMgc2hvdWxkIGhhdmUgZmV1ZHMgYW5kIGRpc3NlbnNpb25zIGFtb25nIHRoZW1zZWx2ZXM7IGhhcm1vbnkgYW1vbmcgdGhlbSBtYWRlIGhpbSBzdXNwaWNpb3VzIGFuZCBmZWFyZnVsIG9mIHRoZW0uIEhlIGhhZCB0aG9zZSB3aG8gd2VyZSBzdXNwZWN0ZWQgb2Ygc29tZSBjYXBpdGFsIG9mZmVuY2UgYnJvdWdodCB0byB0cmlhbCBiZWZvcmUgYWxsIHRoZWlyIGZlbGxvdyBzZXJ2YW50cywgYW5kLCBpZiBjb252aWN0ZWQsIHB1dCB0byBkZWF0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYXMgaGUgYXBwbGllZCBoaW1zZWxmIG1vcmUgc3RyZW51b3VzbHkgdG8gbW9uZXktZ2V0dGluZywgaGUgY2FtZSB0byByZWdhcmQgYWdyaWN1bHR1cmUgYXMgbW9yZSBlbnRlcnRhaW5pbmcgdGhhbiBwcm9maXRhYmxlLCBhbmQgaW52ZXN0ZWQgaGlzIGNhcGl0YWwgaW4gYnVzaW5lc3MgdGhhdCB3YXMgc2FmZSBhbmQgc3VyZS4gSGUgYm91Z2h0IHBvbmRzLCBob3Qgc3ByaW5ncywgZGlzdHJpY3RzIGdpdmVuIG92ZXIgdG8gZnVsbGVycywgcGl0Y2ggZmFjdG9yaWVzLCBsYW5kIHdpdGggbmF0dXJhbCBwYXN0dXJlIGFuZCBmb3Jlc3QsIGFsbCBvZiB3aGljaCBicm91Z2h0IGhpbSBpbiBsYXJnZSBwcm9maXRzLCBhbmQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jb3VsZCBub3QsPC9xPiB0byB1c2UgaGlzIG93biBwaHJhc2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YmUgcnVpbmVkIGJ5IEp1cGl0ZXIuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHVzZWQgdG8gbG9hbiBtb25leSBhbHNvIGluIHRoZSBtb3N0IGRpc3JlcHV0YWJsZSBvZiBhbGwgd2F5cywgbmFtZWx5LCBvbiBzaGlwcywgYW5kIGhpcyBtZXRob2Qgd2FzIGFzIGZvbGxvd3MuIEhlIHJlcXVpcmVkIGhpcyBib3Jyb3dlcnMgdG8gZm9ybSBhIGxhcmdlIGNvbXBhbnksIGFuZCB3aGVuIHRoZXJlIHdlcmUgZmlmdHkgcGFydG5lcnMgYW5kIGFzIG1hbnkgc2hpcHMgZm9yIGhpcyBzZWN1cml0eSwgaGUgdG9vayBvbmUgc2hhcmUgaW4gdGhlIGNvbXBhbnkgaGltc2VsZiwgYW5kIHdhcyByZXByZXNlbnRlZCBieSBRdWludGlvLCBhIGZyZWVkbWFuIG9mIGhpcywgd2hvIGFjY29tcGFuaWVkIGhpcyBjbGllbnRzIGluIGFsbCB0aGVpciB2ZW50dXJlcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyB3YXkgaGlzIGVudGlyZSBzZWN1cml0eSB3YXMgbm90IGltcGVyaWxsZWQsIGJ1dCBvbmx5IGEgc21hbGwgcGFydCBvZiBpdCwgYW5kIGhpcyBwcm9maXRzIHdlcmUgbGFyZ2UuIEhlIHVzZWQgdG8gbGVuZCBtb25leSBhbHNvIHRvIHRob3NlIG9mIGhpcyBzbGF2ZXMgd2hvIHdpc2hlZCBpdCwgYW5kIHRoZXkgd291bGQgYnV5IGJveXMgd2l0aCBpdCwgYW5kIGFmdGVyIHRyYWluaW5nIGFuZCB0ZWFjaGluZyB0aGVtIGZvciBhIHllYXIsIGF0IENhdG8ncyBleHBlbnNlLCB3b3VsZCBzZWxsIHRoZW0gYWdhaW4uIE1hbnkgb2YgdGhlc2UgYm95cyBDYXRvIHdvdWxkIHJldGFpbiBmb3IgaGltc2VsZiwgcmVja29uaW5nIHRvIHRoZSBjcmVkaXQgb2YgdGhlIHNsYXZlIHRoZSBoaWdoZXN0IHByaWNlIGJpZCBmb3IgaGlzIGJveS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdHJpZWQgdG8gaW5jaXRlIGhpcyBzb24gYWxzbyB0byBzdWNoIGVjb25vbWllcywgYnkgc2F5aW5nIHRoYXQgaXQgd2FzIG5vdCB0aGUgcGFydCBvZiBhIG1hbiwgYnV0IG9mIGEgd2lkb3cgd29tYW4sIHRvIGxlc3NlbiBoaXMgc3Vic3RhbmNlLiBCdXQgdGhhdCBzdXJlbHkgd2FzIHRvbyB2ZWhlbWVudCBhIHNwZWVjaCBvZiBDYXRvJ3MsIHdoZW4gaGUgd2VudCBzbyBmYXIgYXMgdG8gc2F5IHRoYXQgYSBtYW4gd2FzIHRvIGJlIGFkbWlyZWQgYW5kIGdsb3JpZmllZCBsaWtlIGEgZ29kIGlmIHRoZSBmaW5hbCBpbnZlbnRvcnkgb2YgaGlzIHByb3BlcnR5IHNob3dlZCB0aGF0IGhlIGhhZCBhZGRlZCB0byBpdCBtb3JlIHRoYW4gaGUgaGFkIGluaGVyaXRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFzIGhlIGFwcGxpZWQgaGltc2VsZiBtb3JlIHN0cmVudW91c2x5IHRvIG1vbmV5LWdldHRpbmcsIGhlIGNhbWUgdG8gcmVnYXJkIGFncmljdWx0dXJlIGFzIG1vcmUgZW50ZXJ0YWluaW5nIHRoYW4gcHJvZml0YWJsZSwgYW5kIGludmVzdGVkIGhpcyBjYXBpdGFsIGluIGJ1c2luZXNzIHRoYXQgd2FzIHNhZmUgYW5kIHN1cmUuIEhlIGJvdWdodCBwb25kcywgaG90IHNwcmluZ3MsIGRpc3RyaWN0cyBnaXZlbiBvdmVyIHRvIGZ1bGxlcnMsIHBpdGNoIGZhY3RvcmllcywgbGFuZCB3aXRoIG5hdHVyYWwgcGFzdHVyZSBhbmQgZm9yZXN0LCBhbGwgb2Ygd2hpY2ggYnJvdWdodCBoaW0gaW4gbGFyZ2UgcHJvZml0cywgYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jb3VsZCBub3QsPC9xPiB0byB1c2UgaGlzIG93biBwaHJhc2UsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5iZSBydWluZWQgYnkgSnVwaXRlci48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHVzZWQgdG8gbG9hbiBtb25leSBhbHNvIGluIHRoZSBtb3N0IGRpc3JlcHV0YWJsZSBvZiBhbGwgd2F5cywgbmFtZWx5LCBvbiBzaGlwcywgYW5kIGhpcyBtZXRob2Qgd2FzIGFzIGZvbGxvd3MuIEhlIHJlcXVpcmVkIGhpcyBib3Jyb3dlcnMgdG8gZm9ybSBhIGxhcmdlIGNvbXBhbnksIGFuZCB3aGVuIHRoZXJlIHdlcmUgZmlmdHkgcGFydG5lcnMgYW5kIGFzIG1hbnkgc2hpcHMgZm9yIGhpcyBzZWN1cml0eSwgaGUgdG9vayBvbmUgc2hhcmUgaW4gdGhlIGNvbXBhbnkgaGltc2VsZiwgYW5kIHdhcyByZXByZXNlbnRlZCBieSBRdWludGlvLCBhIGZyZWVkbWFuIG9mIGhpcywgd2hvIGFjY29tcGFuaWVkIGhpcyBjbGllbnRzIGluIGFsbCB0aGVpciB2ZW50dXJlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IGhpcyBlbnRpcmUgc2VjdXJpdHkgd2FzIG5vdCBpbXBlcmlsbGVkLCBidXQgb25seSBhIHNtYWxsIHBhcnQgb2YgaXQsIGFuZCBoaXMgcHJvZml0cyB3ZXJlIGxhcmdlLiBIZSB1c2VkIHRvIGxlbmQgbW9uZXkgYWxzbyB0byB0aG9zZSBvZiBoaXMgc2xhdmVzIHdobyB3aXNoZWQgaXQsIGFuZCB0aGV5IHdvdWxkIGJ1eSBib3lzIHdpdGggaXQsIGFuZCBhZnRlciB0cmFpbmluZyBhbmQgdGVhY2hpbmcgdGhlbSBmb3IgYSB5ZWFyLCBhdCBDYXRvJ3MgZXhwZW5zZSwgd291bGQgc2VsbCB0aGVtIGFnYWluLiBNYW55IG9mIHRoZXNlIGJveXMgQ2F0byB3b3VsZCByZXRhaW4gZm9yIGhpbXNlbGYsIHJlY2tvbmluZyB0byB0aGUgY3JlZGl0IG9mIHRoZSBzbGF2ZSB0aGUgaGlnaGVzdCBwcmljZSBiaWQgZm9yIGhpcyBib3kuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRyaWVkIHRvIGluY2l0ZSBoaXMgc29uIGFsc28gdG8gc3VjaCBlY29ub21pZXMsIGJ5IHNheWluZyB0aGF0IGl0IHdhcyBub3QgdGhlIHBhcnQgb2YgYSBtYW4sIGJ1dCBvZiBhIHdpZG93IHdvbWFuLCB0byBsZXNzZW4gaGlzIHN1YnN0YW5jZS4gQnV0IHRoYXQgc3VyZWx5IHdhcyB0b28gdmVoZW1lbnQgYSBzcGVlY2ggb2YgQ2F0bydzLCB3aGVuIGhlIHdlbnQgc28gZmFyIGFzIHRvIHNheSB0aGF0IGEgbWFuIHdhcyB0byBiZSBhZG1pcmVkIGFuZCBnbG9yaWZpZWQgbGlrZSBhIGdvZCBpZiB0aGUgZmluYWwgaW52ZW50b3J5IG9mIGhpcyBwcm9wZXJ0eSBzaG93ZWQgdGhhdCBoZSBoYWQgYWRkZWQgdG8gaXQgbW9yZSB0aGFuIGhlIGhhZCBpbmhlcml0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIG5vdyB3ZWxsIG9uIGluIHllYXJzLCB0aGVyZSBjYW1lIGFzIGFtYmFzc2Fkb3JzIGZyb20gQXRoZW5zIHRvIFJvbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTU1IEIuQy48L25vdGU+IENhcm5lYWRlcyB0aGUgQWNhZGVtaWMsIGFuZCBEaW9nZW5lcyB0aGUgU3RvaWMgcGhpbG9zb3BoZXIsIHRvIGJlZyB0aGUgcmV2ZXJzYWwgb2YgYSBjZXJ0YWluIGRlY2lzaW9uIGFnYWluc3QgdGhlIEF0aGVuaWFuIHBlb3BsZSwgd2hpY2ggaW1wb3NlZCB1cG9uIHRoZW0gYSBmaW5lIG9mIGZpdmUgaHVuZHJlZCB0YWxlbnRzLiBUaGUgcGVvcGxlIG9mIE9yb3B1cyBoYWQgYnJvdWdodCB0aGUgc3VpdCwgdGhlIEF0aGVuaWFucyBoYWQgbGV0IHRoZSBjYXNlIGdvIGJ5IGRlZmF1bHQsIGFuZCB0aGUgU2ljeW9uaWFucyBoYWQgcHJvbm91bmNlZCBqdWRnbWVudCBhZ2FpbnN0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhlIGFycml2YWwgb2YgdGhlc2UgcGhpbG9zb3BoZXJzLCB0aGUgbW9zdCBzdHVkaW91cyBvZiB0aGUgY2l0eSdzIHlvdXRoIGhhc3RlbmVkIHRvIHdhaXQgdXBvbiB0aGVtLCBhbmQgYmVjYW1lIHRoZWlyIGRldm90ZWQgYW5kIGFkbWlyaW5nIGxpc3RlbmVycy4gVGhlIGNoYXJtIG9mIENhcm5lYWRlcyBlc3BlY2lhbGx5LCB3aGljaCBoYWQgYm91bmRsZXNzIHBvd2VyLCBhbmQgYSBmYW1lIG5vdCBpbmZlcmlvciB0byBpdHMgcG93ZXIsIHdvbiBsYXJnZSBhbmQgc3ltcGF0aGV0aWMgYXVkaWVuY2VzIGFuZCBmaWxsZWQgdGhlIGNpdHksIGxpa2UgYSBydXNoaW5nIG1pZ2h0eSB3aW5kLCB3aXRoIHRoZSBub2lzZSBvZiBoaXMgcHJhaXNlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UmVwb3J0IHNwcmVhZCBmYXIgYW5kIHdpZGUgdGhhdCBhIEdyZWVrIG9mIGFtYXppbmcgdGFsZW50LCB3aG8gZGlzYXJtZWQgYWxsIG9wcG9zaXRpb24gYnkgdGhlIG1hZ2ljIG9mIGhpcyBlbG9xdWVuY2UsIGhhZCBpbmZ1c2VkIGEgdHJlbWVuZG91cyBwYXNzaW9uIGludG8gdGhlIHlvdXRoIG9mIHRoZSBjaXR5LCBpbiBjb25zZXF1ZW5jZSBvZiB3aGljaCB0aGV5IGZvcnNvb2sgdGhlaXIgb3RoZXIgcGxlYXN1cmVzIGFuZCBwdXJzdWl0cyBhbmQgd2VyZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBvc3Nlc3NlZDwvcT4gYWJvdXQgcGhpbG9zb3BoeS4gVGhlIG90aGVyIFJvbWFucyB3ZXJlIHBsZWFzZWQgYXQgdGhpcywgYW5kIGdsYWQgdG8gc2VlIHRoZWlyIHlvdW5nIG1lbiBsYXkgaG9sZCBvZiBHcmVlayBjdWx0dXJlIGFuZCBjb25zb3J0IHdpdGggc3VjaCBhZG1pcmFibGUgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2F0bywgYXQgdGhlIHZlcnkgb3V0c2V0LCB3aGVuIHRoaXMgemVhbCBmb3IgZGlzY3Vzc2lvbiBjYW1lIHBvdXJpbmcgaW50byB0aGUgY2l0eSwgd2FzIGRpc3RyZXNzZWQsIGZlYXJpbmcgbGVzdCB0aGUgeW91bmcgbWVuLCBieSBnaXZpbmcgdGhpcyBkaXJlY3Rpb24gdG8gdGhlaXIgYW1iaXRpb24sIHNob3VsZCBjb21lIHRvIGxvdmUgYSByZXB1dGF0aW9uIGJhc2VkIG9uIG1lcmUgd29yZHMgbW9yZSB0aGFuIG9uZSBhY2hpZXZlZCBieSBtYXJ0aWFsIGRlZWRzLiBBbmQgd2hlbiB0aGUgZmFtZSBvZiB0aGUgdmlzaXRpbmcgcGhpbG9zb3BoZXJzIHJvc2UgeWV0IGhpZ2hlciBpbiB0aGUgY2l0eSwgYW5kIHRoZWlyIGZpcnN0IHNwZWVjaGVzIGJlZm9yZSB0aGUgU2VuYXRlIHdlcmUgaW50ZXJwcmV0ZWQsIGF0IGhpcyBvd24gaW5zdGFuY2UgYW5kIHJlcXVlc3QsIGJ5IHNvIGNvbnNwaWN1b3VzIGEgbWFuIGFzIEdhaXVzIEFjaWxpdXMsIENhdG8gZGV0ZXJtaW5lZCwgb24gc29tZSBkZWNlbnQgcHJldGV4dCBvciBvdGhlciwgdG8gcmlkIGFuZCBwdXJnZSB0aGUgY2l0eSBvZiB0aGVtIGFsbC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgcm9zZSBpbiB0aGUgU2VuYXRlIGFuZCBjZW5zdXJlZCB0aGUgbWFnaXN0cmF0ZXMgZm9yIGtlZXBpbmcgaW4gc3VjaCBsb25nIHN1c3BlbnNlIGFuIGVtYmFzc3kgY29tcG9zZWQgb2YgbWVuIHdobyBjb3VsZCBlYXNpbHkgc2VjdXJlIGFueXRoaW5nIHRoZXkgd2lzaGVkLCBzbyBwZXJzdWFzaXZlIHdlcmUgdGhleS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBvdWdodCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dG8gbWFrZSB1cCBvdXIgbWluZHMgb25lIHdheSBvciBhbm90aGVyLCBhbmQgdm90ZSBvbiB3aGF0IHRoZSBlbWJhc3N5IHByb3Bvc2VzLCBpbiBvcmRlciB0aGF0IHRoZXNlIG1lbiBtYXkgcmV0dXJuIHRvIHRoZWlyIHNjaG9vbHMgYW5kIGxlY3R1cmUgdG8gdGhlIHNvbnMgb2YgR3JlZWNlLCB3aGlsZSB0aGUgeW91dGggb2YgUm9tZSBnaXZlIGVhciB0byB0aGVpciBsYXdzIGFuZCBtYWdpc3RyYXRlcywgYXMgaGVyZXRvZm9yZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSB3YXMgbm93IHdlbGwgb24gaW4geWVhcnMsIHRoZXJlIGNhbWUgYXMgYW1iYXNzYWRvcnMgZnJvbSBBdGhlbnMgdG8gUm9tZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE1NSBCLkMuPC9ub3RlPiBDYXJuZWFkZXMgdGhlIEFjYWRlbWljLCBhbmQgRGlvZ2VuZXMgdGhlIFN0b2ljIHBoaWxvc29waGVyLCB0byBiZWcgdGhlIHJldmVyc2FsIG9mIGEgY2VydGFpbiBkZWNpc2lvbiBhZ2FpbnN0IHRoZSBBdGhlbmlhbiBwZW9wbGUsIHdoaWNoIGltcG9zZWQgdXBvbiB0aGVtIGEgZmluZSBvZiBmaXZlIGh1bmRyZWQgdGFsZW50cy4gVGhlIHBlb3BsZSBvZiBPcm9wdXMgaGFkIGJyb3VnaHQgdGhlIHN1aXQsIHRoZSBBdGhlbmlhbnMgaGFkIGxldCB0aGUgY2FzZSBnbyBieSBkZWZhdWx0LCBhbmQgdGhlIFNpY3lvbmlhbnMgaGFkIHByb25vdW5jZWQganVkZ21lbnQgYWdhaW5zdCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhlIGFycml2YWwgb2YgdGhlc2UgcGhpbG9zb3BoZXJzLCB0aGUgbW9zdCBzdHVkaW91cyBvZiB0aGUgY2l0eSdzIHlvdXRoIGhhc3RlbmVkIHRvIHdhaXQgdXBvbiB0aGVtLCBhbmQgYmVjYW1lIHRoZWlyIGRldm90ZWQgYW5kIGFkbWlyaW5nIGxpc3RlbmVycy4gVGhlIGNoYXJtIG9mIENhcm5lYWRlcyBlc3BlY2lhbGx5LCB3aGljaCBoYWQgYm91bmRsZXNzIHBvd2VyLCBhbmQgYSBmYW1lIG5vdCBpbmZlcmlvciB0byBpdHMgcG93ZXIsIHdvbiBsYXJnZSBhbmQgc3ltcGF0aGV0aWMgYXVkaWVuY2VzIGFuZCBmaWxsZWQgdGhlIGNpdHksIGxpa2UgYSBydXNoaW5nIG1pZ2h0eSB3aW5kLCB3aXRoIHRoZSBub2lzZSBvZiBoaXMgcHJhaXNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlJlcG9ydCBzcHJlYWQgZmFyIGFuZCB3aWRlIHRoYXQgYSBHcmVlayBvZiBhbWF6aW5nIHRhbGVudCwgd2hvIGRpc2FybWVkIGFsbCBvcHBvc2l0aW9uIGJ5IHRoZSBtYWdpYyBvZiBoaXMgZWxvcXVlbmNlLCBoYWQgaW5mdXNlZCBhIHRyZW1lbmRvdXMgcGFzc2lvbiBpbnRvIHRoZSB5b3V0aCBvZiB0aGUgY2l0eSwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggdGhleSBmb3Jzb29rIHRoZWlyIG90aGVyIHBsZWFzdXJlcyBhbmQgcHVyc3VpdHMgYW5kIHdlcmUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBvc3Nlc3NlZDwvcT4gYWJvdXQgcGhpbG9zb3BoeS4gVGhlIG90aGVyIFJvbWFucyB3ZXJlIHBsZWFzZWQgYXQgdGhpcywgYW5kIGdsYWQgdG8gc2VlIHRoZWlyIHlvdW5nIG1lbiBsYXkgaG9sZCBvZiBHcmVlayBjdWx0dXJlIGFuZCBjb25zb3J0IHdpdGggc3VjaCBhZG1pcmFibGUgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXRvLCBhdCB0aGUgdmVyeSBvdXRzZXQsIHdoZW4gdGhpcyB6ZWFsIGZvciBkaXNjdXNzaW9uIGNhbWUgcG91cmluZyBpbnRvIHRoZSBjaXR5LCB3YXMgZGlzdHJlc3NlZCwgZmVhcmluZyBsZXN0IHRoZSB5b3VuZyBtZW4sIGJ5IGdpdmluZyB0aGlzIGRpcmVjdGlvbiB0byB0aGVpciBhbWJpdGlvbiwgc2hvdWxkIGNvbWUgdG8gbG92ZSBhIHJlcHV0YXRpb24gYmFzZWQgb24gbWVyZSB3b3JkcyBtb3JlIHRoYW4gb25lIGFjaGlldmVkIGJ5IG1hcnRpYWwgZGVlZHMuIEFuZCB3aGVuIHRoZSBmYW1lIG9mIHRoZSB2aXNpdGluZyBwaGlsb3NvcGhlcnMgcm9zZSB5ZXQgaGlnaGVyIGluIHRoZSBjaXR5LCBhbmQgdGhlaXIgZmlyc3Qgc3BlZWNoZXMgYmVmb3JlIHRoZSBTZW5hdGUgd2VyZSBpbnRlcnByZXRlZCwgYXQgaGlzIG93biBpbnN0YW5jZSBhbmQgcmVxdWVzdCwgYnkgc28gY29uc3BpY3VvdXMgYSBtYW4gYXMgR2FpdXMgQWNpbGl1cywgQ2F0byBkZXRlcm1pbmVkLCBvbiBzb21lIGRlY2VudCBwcmV0ZXh0IG9yIG90aGVyLCB0byByaWQgYW5kIHB1cmdlIHRoZSBjaXR5IG9mIHRoZW0gYWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIHJvc2UgaW4gdGhlIFNlbmF0ZSBhbmQgY2Vuc3VyZWQgdGhlIG1hZ2lzdHJhdGVzIGZvciBrZWVwaW5nIGluIHN1Y2ggbG9uZyBzdXNwZW5zZSBhbiBlbWJhc3N5IGNvbXBvc2VkIG9mIG1lbiB3aG8gY291bGQgZWFzaWx5IHNlY3VyZSBhbnl0aGluZyB0aGV5IHdpc2hlZCwgc28gcGVyc3Vhc2l2ZSB3ZXJlIHRoZXkuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBvdWdodCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50byBtYWtlIHVwIG91ciBtaW5kcyBvbmUgd2F5IG9yIGFub3RoZXIsIGFuZCB2b3RlIG9uIHdoYXQgdGhlIGVtYmFzc3kgcHJvcG9zZXMsIGluIG9yZGVyIHRoYXQgdGhlc2UgbWVuIG1heSByZXR1cm4gdG8gdGhlaXIgc2Nob29scyBhbmQgbGVjdHVyZSB0byB0aGUgc29ucyBvZiBHcmVlY2UsIHdoaWxlIHRoZSB5b3V0aCBvZiBSb21lIGdpdmUgZWFyIHRvIHRoZWlyIGxhd3MgYW5kIG1hZ2lzdHJhdGVzLCBhcyBoZXJldG9mb3JlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBoZSBkaWQsIG5vdCwgYXMgc29tZSB0aGluaywgb3V0IG9mIHBlcnNvbmFsIGhvc3RpbGl0eSB0byBDYXJuZWFkZXMsIGJ1dCBiZWNhdXNlIGhlIHdhcyB3aG9sbHkgYXZlcnNlIHRvIHBoaWxvc29waHksIGFuZCBtYWRlIG1vY2sgb2YgYWxsIEdyZWVrIGN1bHR1cmUgYW5kIHRyYWluaW5nLCBvdXQgb2YgcGF0cmlvdGljIHplYWwuIEhlIHNheXMsIGZvciBpbnN0YW5jZSwgdGhhdCBTb2NyYXRlcyB3YXMgYSBtaWdodHkgcHJhdHRsZXIsIHdobyBhdHRlbXB0ZWQsIGFzIGJlc3QgaGUgY291bGQsIHRvIGJlIGhpcyBjb3VudHJ5J3MgdHlyYW50LCBieSBhYm9saXNoaW5nIGl0cyBjdXN0b21zLCBhbmQgYnkgZW50aWNpbmcgaGlzIGZlbGxvdyBjaXRpemVucyBpbnRvIG9waW5pb25zIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYWRlIGZ1biBvZiB0aGUgc2Nob29sIG9mIElzb2NyYXRlcywgZGVjbGFyaW5nIHRoYXQgaGlzIHB1cGlscyBrZXB0IG9uIHN0dWR5aW5nIHdpdGggaGltIHRpbGwgdGhleSB3ZXJlIG9sZCBtZW4sIGFzIGlmIHRoZXkgd2VyZSB0byBwcmFjdGlzZSB0aGVpciBhcnRzIGFuZCBwbGVhZCB0aGVpciBjYXNlcyBiZWZvcmUgTWlub3MgaW4gSGFkZXMuIEFuZCBzZWVraW5nIHRvIHByZWp1ZGljZSBoaXMgc29uIGFnYWluc3QgR3JlZWsgY3VsdHVyZSwgaGUgaW5kdWxnZXMgaW4gYW4gdXR0ZXJhbmNlIGFsbCB0b28gcmFzaCBmb3IgaGlzIHllYXJzLCBkZWNsYXJpbmcsIGluIHRoZSB0b25lIG9mIGEgcHJvcGhldCBvciBhIHNlZXIsIHRoYXQgUm9tZSB3b3VsZCBsb3NlIGhlciBlbXBpcmUgd2hlbiBzaGUgaGFkIGJlY29tZSBpbmZlY3RlZCB3aXRoIEdyZWVrIGxldHRlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aW1lIGhhcyBjZXJ0YWlubHkgc2hvd24gdGhlIGVtcHRpbmVzcyBvZiB0aGlzIGlsbC1ib2Rpbmcgc3BlZWNoIG9mIGhpcywgZm9yIHdoaWxlIHRoZSBjaXR5IHdhcyBhdCB0aGUgemVuaXRoIG9mIGl0cyBlbXBpcmUsIHNoZSBtYWRlIGV2ZXJ5IGZvcm0gb2YgR3JlZWsgbGVhcm5pbmcgYW5kIGN1bHR1cmUgaGVyIG93bi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBoZSBkaWQsIG5vdCwgYXMgc29tZSB0aGluaywgb3V0IG9mIHBlcnNvbmFsIGhvc3RpbGl0eSB0byBDYXJuZWFkZXMsIGJ1dCBiZWNhdXNlIGhlIHdhcyB3aG9sbHkgYXZlcnNlIHRvIHBoaWxvc29waHksIGFuZCBtYWRlIG1vY2sgb2YgYWxsIEdyZWVrIGN1bHR1cmUgYW5kIHRyYWluaW5nLCBvdXQgb2YgcGF0cmlvdGljIHplYWwuIEhlIHNheXMsIGZvciBpbnN0YW5jZSwgdGhhdCBTb2NyYXRlcyB3YXMgYSBtaWdodHkgcHJhdHRsZXIsIHdobyBhdHRlbXB0ZWQsIGFzIGJlc3QgaGUgY291bGQsIHRvIGJlIGhpcyBjb3VudHJ5J3MgdHlyYW50LCBieSBhYm9saXNoaW5nIGl0cyBjdXN0b21zLCBhbmQgYnkgZW50aWNpbmcgaGlzIGZlbGxvdyBjaXRpemVucyBpbnRvIG9waW5pb25zIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgZnVuIG9mIHRoZSBzY2hvb2wgb2YgSXNvY3JhdGVzLCBkZWNsYXJpbmcgdGhhdCBoaXMgcHVwaWxzIGtlcHQgb24gc3R1ZHlpbmcgd2l0aCBoaW0gdGlsbCB0aGV5IHdlcmUgb2xkIG1lbiwgYXMgaWYgdGhleSB3ZXJlIHRvIHByYWN0aXNlIHRoZWlyIGFydHMgYW5kIHBsZWFkIHRoZWlyIGNhc2VzIGJlZm9yZSBNaW5vcyBpbiBIYWRlcy4gQW5kIHNlZWtpbmcgdG8gcHJlanVkaWNlIGhpcyBzb24gYWdhaW5zdCBHcmVlayBjdWx0dXJlLCBoZSBpbmR1bGdlcyBpbiBhbiB1dHRlcmFuY2UgYWxsIHRvbyByYXNoIGZvciBoaXMgeWVhcnMsIGRlY2xhcmluZywgaW4gdGhlIHRvbmUgb2YgYSBwcm9waGV0IG9yIGEgc2VlciwgdGhhdCBSb21lIHdvdWxkIGxvc2UgaGVyIGVtcGlyZSB3aGVuIHNoZSBoYWQgYmVjb21lIGluZmVjdGVkIHdpdGggR3JlZWsgbGV0dGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aW1lIGhhcyBjZXJ0YWlubHkgc2hvd24gdGhlIGVtcHRpbmVzcyBvZiB0aGlzIGlsbC1ib2Rpbmcgc3BlZWNoIG9mIGhpcywgZm9yIHdoaWxlIHRoZSBjaXR5IHdhcyBhdCB0aGUgemVuaXRoIG9mIGl0cyBlbXBpcmUsIHNoZSBtYWRlIGV2ZXJ5IGZvcm0gb2YgR3JlZWsgbGVhcm5pbmcgYW5kIGN1bHR1cmUgaGVyIG93bi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JdCB3YXMgbm90IG9ubHkgR3JlZWsgcGhpbG9zb3BoZXJzIHRoYXQgaGUgaGF0ZWQsIGJ1dCBoZSB3YXMgYWxzbyBzdXNwaWNpb3VzIG9mIEdyZWVrcyB3aG8gcHJhY3Rpc2VkIG1lZGljaW5lIGF0IFJvbWUuIEhlIGhhZCBoZWFyZCwgaXQgd291bGQgc2VlbSwgb2YgSGlwcG9jcmF0ZXMnIHJlcGx5IHdoZW4gdGhlIEdyZWF0IEtpbmcgb2YgUGVyc2lhIGNvbnN1bHRlZCBoaW0sIHdpdGggdGhlIHByb21pc2Ugb2YgYSBmZWUgb2YgbWFueSB0YWxlbnRzLCBuYW1lbHksIHRoYXQgaGUgd291bGQgbmV2ZXIgcHV0IGhpcyBza2lsbCBhdCB0aGUgc2VydmljZSBvZiBCYXJiYXJpYW5zIHdobyB3ZXJlIGVuZW1pZXMgb2YgR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhaWQgYWxsIEdyZWVrIHBoeXNpY2lhbnMgaGFkIHRha2VuIGEgc2ltaWxhciBvYXRoLCBhbmQgdXJnZWQgaGlzIHNvbiB0byBiZXdhcmUgb2YgdGhlbSBhbGwuIEhlIGhpbXNlbGYsIGhlIHNhaWQsIGhhZCB3cml0dGVuIGEgYm9vayBvZiByZWNpcGVzLCB3aGljaCBoZSBmb2xsb3dlZCBpbiB0aGUgdHJlYXRtZW50IGFuZCByZWdpbWVuIG9mIGFueSB3aG8gd2VyZSBzaWNrIGluIGhpcyBmYW1pbHkuIEhlIG5ldmVyIHJlcXVpcmVkIGhpcyBwYXRpZW50cyB0byBmYXN0LCBidXQgZmVkIHRoZW0gb24gZ3JlZW5zLCBvciBiaXRzIG9mIGR1Y2ssIHBpZ2Vvbiwgb3IgaGFyZS4gU3VjaCBhIGRpZXQsIGhlIHNhaWQsIHdhcyBsaWdodCBhbmQgZ29vZCBmb3Igc2ljayBwZW9wbGUsIGV4Y2VwdCB0aGF0IGl0IG9mdGVuIGNhdXNlcyBkcmVhbXMuIEJ5IGZvbGxvd2luZyBzdWNoIHRyZWF0bWVudCBhbmQgcmVnaW1lbiBoZSBzYWlkIGhlIGhhZCBnb29kIGhlYWx0aCBoaW1zZWxmLCBhbmQga2VwdCBoaXMgZmFtaWx5IGluIGdvb2QgaGVhbHRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhaWQgYWxsIEdyZWVrIHBoeXNpY2lhbnMgaGFkIHRha2VuIGEgc2ltaWxhciBvYXRoLCBhbmQgdXJnZWQgaGlzIHNvbiB0byBiZXdhcmUgb2YgdGhlbSBhbGwuIEhlIGhpbXNlbGYsIGhlIHNhaWQsIGhhZCB3cml0dGVuIGEgYm9vayBvZiByZWNpcGVzLCB3aGljaCBoZSBmb2xsb3dlZCBpbiB0aGUgdHJlYXRtZW50IGFuZCByZWdpbWVuIG9mIGFueSB3aG8gd2VyZSBzaWNrIGluIGhpcyBmYW1pbHkuIEhlIG5ldmVyIHJlcXVpcmVkIGhpcyBwYXRpZW50cyB0byBmYXN0LCBidXQgZmVkIHRoZW0gb24gZ3JlZW5zLCBvciBiaXRzIG9mIGR1Y2ssIHBpZ2Vvbiwgb3IgaGFyZS4gU3VjaCBhIGRpZXQsIGhlIHNhaWQsIHdhcyBsaWdodCBhbmQgZ29vZCBmb3Igc2ljayBwZW9wbGUsIGV4Y2VwdCB0aGF0IGl0IG9mdGVuIGNhdXNlcyBkcmVhbXMuIEJ5IGZvbGxvd2luZyBzdWNoIHRyZWF0bWVudCBhbmQgcmVnaW1lbiBoZSBzYWlkIGhlIGhhZCBnb29kIGhlYWx0aCBoaW1zZWxmLCBhbmQga2VwdCBoaXMgZmFtaWx5IGluIGdvb2QgaGVhbHRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHByZXN1bXB0aW9uIG9uIGhpcyBwYXJ0IHNlZW1zIG5vdCB0byBoYXZlIGdvbmUgdW5wdW5pc2hlZCwgZm9yIGhlIGxvc3QgaGlzIHdpZmUgYW5kIGhpcyBzb24uIEhlIGhpbXNlbGYgd2FzIHdlbGwgY29uZmlybWVkIGluIGJvZGlseSBoZWFsdGggYW5kIHZpZ291ciwgYW5kIGxvbmcgd2l0aHN0b29kIHRoZSBhc3NhdWx0cyBvZiBhZ2UuIEV2ZW4gd2hlbiBhbiBvbGQgbWFuIGhlIHdhcyBwcm9uZSB0byBpbmR1bGdlIGhpcyBzZXh1YWwgYXBwZXRpdGUsIGFuZCBhdCBsYXN0IG1hcnJpZWQgYSB3aWZlIHdoZW4gaGUgd2FzIGxvbmcgcGFzdCB0aGUgbWFycnlpbmcgYWdlLiBUaGlzIHdhcyB0aGUgd2F5IGl0IGNhbWUgYWJvdXQuIEFmdGVyIHRoZSBkZWF0aCBvZiBoaXMgd2lmZSwgaGUgbWFycmllZCBoaXMgc29uIHRvIHRoZSBkYXVnaHRlciBvZiBBZW1pbGl1cyBQYXVsdXMsIHRoZSBzaXN0ZXIgb2YgU2NpcGlvLCBidXQgaGUgaGltc2VsZiwgaW4gaGlzIHdpZG93aG9vZCwgdG9vayBzb2xhY2Ugd2l0aCBhIHNsYXZlIGdpcmwgd2hvIHNlY3JldGx5IHZpc2l0ZWQgaGlzIGJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T2YgY291cnNlLCBpbiBhIHNtYWxsIGhvdXNlIHdpdGggYSB5b3VuZyBtYXJyaWVkIHdvbWFuIGluIGl0LCB0aGUgbWF0dGVyIHdhcyBkaXNjb3ZlcmVkLCBhbmQgb25jZSwgd2hlbiB0aGUgZ2lybCBzZWVtZWQgdG8gZmxhdW50IGhlciB3YXkgcmF0aGVyIHRvbyBib2xkbHkgdG8gaGlzIGNoYW1iZXIsIHRoZSBvbGQgbWFuIGNvdWxkIG5vdCBoZWxwIG5vdGljaW5nIHRoYXQgaGlzIHNvbiwgYWx0aG91Z2ggaGUgc2FpZCBub3RoaW5nLCBsb29rZWQgdmVyeSBzb3VyLCBhbmQgdHVybmVkIGF3YXkuIFBlcmNlaXZpbmcgdGhhdCB0aGUgdGhpbmcgZGlzcGxlYXNlZCBoaXMgY2hpbGRyZW4sIENhdG8gZGlkIG5vdCB1cGJyYWlkIG9yIGJsYW1lIHRoZW0gYXQgYWxsLCBidXQgYXMgaGUgd2FzIGdvaW5nIGRvd24gaW4gaGlzIHVzdWFsIHdheSB0byB0aGUgZm9ydW0gd2l0aCBoaXMgY2xpZW50cywgY2FsbGVkIG91dCB3aXRoIGEgbG91ZCB2b2ljZSB0byBhIGNlcnRhaW4gU2Fsb25pdXMsIHdobyBoYWQgYmVlbiBvbmUgb2YgaGlzIHVuZGVyLXNlY3JldGFyaWVzLCBhbmQgd2FzIG5vdyBpbiBoaXMgdHJhaW4sIGFza2luZyBoaW0gaWYgaGUgaGFkIGZvdW5kIGEgZ29vZCBodXNiYW5kIGZvciBoaXMgeW91bmcgZGF1Z2h0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gc2FpZCBoZSBoYWQgbm90LCBhbmQgd291bGQgbm90IGRvIHNvIHdpdGhvdXQgZmlyc3QgY29uc3VsdGluZyBoaXMgcGF0cm9uLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwgdGhlbiw8L3E+IHNhaWQgQ2F0bywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhhdmUgZm91bmQgYSBzdWl0YWJsZSBzb24taW4tbGF3IGZvciB5b3UsIHVubGVzcyBpbmRlZWQgaGlzIGFnZSBzaG91bGQgYmUgZGlzcGxlYXNpbmc7IGluIG90aGVyIHdheXMgbm8gZmF1bHQgY2FuIGJlIGZvdW5kIHdpdGggaGltLCBidXQgaGUgaXMgYSB2ZXJ5IG9sZCBtYW4uPC9xPiBTYWxvbml1cyBhdCBvbmNlIGJhZGUgaGltIHRha2UgdGhlIG1hdHRlciBpbiBjaGFyZ2UgYW5kIGdpdmUgdGhlIG1haWQgdG8gdGhlIG1hbiBvZiBoaXMgY2hvaWNlLCBzaW5jZSBzaGUgd2FzIGEgZGVwZW5kYW50IG9mIGhpcyBhbmQgaW4gbmVlZCBvZiBoaXMga2luZCBzZXJ2aWNlcy4gVGhlbiBDYXRvLCB3aXRob3V0IGFueSBtb3JlIGFkbywgc2FpZCB0aGF0IGhlIGFza2VkIHRoZSBkYW1zZWwgdG8gd2lmZSBmb3IgaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIGFzIHdhcyBuYXR1cmFsLCB0aGUgcHJvcG9zYWwgYW1hemVkIHRoZSBtYW4sIHdobyBjb3VudGVkIENhdG8gZmFyIHBhc3QgbWFycmlhZ2UsIGFuZCBoaW1zZWxmIGZhciBiZW5lYXRoIGFsbGlhbmNlIHdpdGggYSBob3VzZSBvZiBjb25zdWxhciBkaWduaXR5IGFuZCB0cml1bXBoYWwgaG9ub3VyczsgYnV0IHdoZW4gaGUgc2F3IHRoYXQgQ2F0byB3YXMgaW4gZWFybmVzdCwgaGUgZ2xhZGx5IGFjY2VwdGVkIGhpcyBwcm9wb3NhbCwgYW5kIGFzIHNvb24gYXMgdGhleSByZWFjaGVkIHRoZSBmb3J1bSB0aGUgYmFubnMgd2VyZSBwdWJsaXNoZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBwcmVzdW1wdGlvbiBvbiBoaXMgcGFydCBzZWVtcyBub3QgdG8gaGF2ZSBnb25lIHVucHVuaXNoZWQsIGZvciBoZSBsb3N0IGhpcyB3aWZlIGFuZCBoaXMgc29uLiBIZSBoaW1zZWxmIHdhcyB3ZWxsIGNvbmZpcm1lZCBpbiBib2RpbHkgaGVhbHRoIGFuZCB2aWdvdXIsIGFuZCBsb25nIHdpdGhzdG9vZCB0aGUgYXNzYXVsdHMgb2YgYWdlLiBFdmVuIHdoZW4gYW4gb2xkIG1hbiBoZSB3YXMgcHJvbmUgdG8gaW5kdWxnZSBoaXMgc2V4dWFsIGFwcGV0aXRlLCBhbmQgYXQgbGFzdCBtYXJyaWVkIGEgd2lmZSB3aGVuIGhlIHdhcyBsb25nIHBhc3QgdGhlIG1hcnJ5aW5nIGFnZS4gVGhpcyB3YXMgdGhlIHdheSBpdCBjYW1lIGFib3V0LiBBZnRlciB0aGUgZGVhdGggb2YgaGlzIHdpZmUsIGhlIG1hcnJpZWQgaGlzIHNvbiB0byB0aGUgZGF1Z2h0ZXIgb2YgQWVtaWxpdXMgUGF1bHVzLCB0aGUgc2lzdGVyIG9mIFNjaXBpbywgYnV0IGhlIGhpbXNlbGYsIGluIGhpcyB3aWRvd2hvb2QsIHRvb2sgc29sYWNlIHdpdGggYSBzbGF2ZSBnaXJsIHdobyBzZWNyZXRseSB2aXNpdGVkIGhpcyBiZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIGNvdXJzZSwgaW4gYSBzbWFsbCBob3VzZSB3aXRoIGEgeW91bmcgbWFycmllZCB3b21hbiBpbiBpdCwgdGhlIG1hdHRlciB3YXMgZGlzY292ZXJlZCwgYW5kIG9uY2UsIHdoZW4gdGhlIGdpcmwgc2VlbWVkIHRvIGZsYXVudCBoZXIgd2F5IHJhdGhlciB0b28gYm9sZGx5IHRvIGhpcyBjaGFtYmVyLCB0aGUgb2xkIG1hbiBjb3VsZCBub3QgaGVscCBub3RpY2luZyB0aGF0IGhpcyBzb24sIGFsdGhvdWdoIGhlIHNhaWQgbm90aGluZywgbG9va2VkIHZlcnkgc291ciwgYW5kIHR1cm5lZCBhd2F5LiBQZXJjZWl2aW5nIHRoYXQgdGhlIHRoaW5nIGRpc3BsZWFzZWQgaGlzIGNoaWxkcmVuLCBDYXRvIGRpZCBub3QgdXBicmFpZCBvciBibGFtZSB0aGVtIGF0IGFsbCwgYnV0IGFzIGhlIHdhcyBnb2luZyBkb3duIGluIGhpcyB1c3VhbCB3YXkgdG8gdGhlIGZvcnVtIHdpdGggaGlzIGNsaWVudHMsIGNhbGxlZCBvdXQgd2l0aCBhIGxvdWQgdm9pY2UgdG8gYSBjZXJ0YWluIFNhbG9uaXVzLCB3aG8gaGFkIGJlZW4gb25lIG9mIGhpcyB1bmRlci1zZWNyZXRhcmllcywgYW5kIHdhcyBub3cgaW4gaGlzIHRyYWluLCBhc2tpbmcgaGltIGlmIGhlIGhhZCBmb3VuZCBhIGdvb2QgaHVzYmFuZCBmb3IgaGlzIHlvdW5nIGRhdWdodGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gc2FpZCBoZSBoYWQgbm90LCBhbmQgd291bGQgbm90IGRvIHNvIHdpdGhvdXQgZmlyc3QgY29uc3VsdGluZyBoaXMgcGF0cm9uLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCB0aGVuLDwvcT4gc2FpZCBDYXRvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGZvdW5kIGEgc3VpdGFibGUgc29uLWluLWxhdyBmb3IgeW91LCB1bmxlc3MgaW5kZWVkIGhpcyBhZ2Ugc2hvdWxkIGJlIGRpc3BsZWFzaW5nOyBpbiBvdGhlciB3YXlzIG5vIGZhdWx0IGNhbiBiZSBmb3VuZCB3aXRoIGhpbSwgYnV0IGhlIGlzIGEgdmVyeSBvbGQgbWFuLjwvcT4gU2Fsb25pdXMgYXQgb25jZSBiYWRlIGhpbSB0YWtlIHRoZSBtYXR0ZXIgaW4gY2hhcmdlIGFuZCBnaXZlIHRoZSBtYWlkIHRvIHRoZSBtYW4gb2YgaGlzIGNob2ljZSwgc2luY2Ugc2hlIHdhcyBhIGRlcGVuZGFudCBvZiBoaXMgYW5kIGluIG5lZWQgb2YgaGlzIGtpbmQgc2VydmljZXMuIFRoZW4gQ2F0bywgd2l0aG91dCBhbnkgbW9yZSBhZG8sIHNhaWQgdGhhdCBoZSBhc2tlZCB0aGUgZGFtc2VsIHRvIHdpZmUgZm9yIGhpbXNlbGYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCBhcyB3YXMgbmF0dXJhbCwgdGhlIHByb3Bvc2FsIGFtYXplZCB0aGUgbWFuLCB3aG8gY291bnRlZCBDYXRvIGZhciBwYXN0IG1hcnJpYWdlLCBhbmQgaGltc2VsZiBmYXIgYmVuZWF0aCBhbGxpYW5jZSB3aXRoIGEgaG91c2Ugb2YgY29uc3VsYXIgZGlnbml0eSBhbmQgdHJpdW1waGFsIGhvbm91cnM7IGJ1dCB3aGVuIGhlIHNhdyB0aGF0IENhdG8gd2FzIGluIGVhcm5lc3QsIGhlIGdsYWRseSBhY2NlcHRlZCBoaXMgcHJvcG9zYWwsIGFuZCBhcyBzb29uIGFzIHRoZXkgcmVhY2hlZCB0aGUgZm9ydW0gdGhlIGJhbm5zIHdlcmUgcHVibGlzaGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoaWxlIHRoZSBtYXJyaWFnZSB3YXMgaW4gaGFuZCwgQ2F0bydzIHNvbiwgYWNjb21wYW5pZWQgYnkgaGlzIGZyaWVuZHMsIGFza2VkIGhpcyBmYXRoZXIgaWYgaXQgd2FzIGJlY2F1c2UgaGUgaGFkIGFueSBjb21wbGFpbnQgdG8gbWFrZSBhZ2FpbnN0IGhpbSB0aGF0IGhlIHdhcyBub3cgZm9pc3RpbmcgYSBzdGVwLW1vdGhlciB1cG9uIGhpbS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVhdmVuIGZvcmJpZCBJIG15IHNvbiw8L3E+IGNyaWVkIENhdG8sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWxsIHlvdXIgY29uZHVjdCB0b3dhcmRzIG1lIGhhcyBiZWVuIGFkbWlyYWJsZSwgYW5kIEkgaGF2ZSBubyBmYXVsdCB0byBmaW5kIHdpdGggeW91OyBidXQgSSBkZXNpcmUgdG8gYmxlc3MgbXlzZWxmIGFuZCBteSBjb3VudHJ5IHdpdGggbW9yZSBzdWNoIHNvbnMuPC9xPiBIb3dldmVyLCB0aGV5IHNheSB0aGF0IHRoaXMgc2VudGltZW50IHdhcyB1dHRlcmVkIGxvbmcgYmVmb3JlIGJ5IFBlaXNpc3RyYXR1cywgdGhlIHR5cmFudCBvZiBBdGhlbnMsIHdobyBnYXZlIGhpcyBncm93biB1cCBzYW5zIGEgc3RlcC1tb3RoZXIgaW4gdGhlIHBlcnNvbiBvZiBUaW1vbmFzc2Egb2YgQXJnb2xpcywgYnkgIHdob20gaGUgaXMgc2FpZCB0byBoYXZlIGhhZCBJb3Bob24gYW5kIFRoZXNzYWx1cy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhpcyBzZWNvbmQgbWFycmlhZ2UgYSBzb24gd2FzIGJvcm4gdG8gQ2F0bywgd2hvIHdhcyBuYW1lZCBTYWxvbml1cywgYWZ0ZXIgaGlzIG1vdGhlcidzIGZhdGhlci4gQnV0IGhpcyBlbGRlciBzb24gZGllZCBpbiB0aGUgcHJhZXRvcnNoaXAuIENhdG8gb2Z0ZW4gc3BlYWtzIG9mIGhpbSBpbiBoaXMgYm9va3MgYXMgYSBicmF2ZSBhbmQgd29ydGh5IG1hbiwgYW5kIGlzIHNhaWQgdG8gaGF2ZSBib3JuZSBoaXMgbG9zcyB3aXRoIGFsbCB0aGUgZXF1YW5pbWl0eSBvZiBhIHBoaWxvc29waGVyLCByZW1pdHRpbmcgbm90IGEgd2hpdCBiZWNhdXNlIG9mIGl0IGhpcyBhcmRvdXIgaW4gdGhlIHB1YmxpYyBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIG5vdCwgbGlrZSBMdWNpdXMgTHVjdWxsdXMgYW5kIE1ldGVsbHVzIFBpdXMgaW4gYWZ0ZXIgdGltZXMsIHRvbyBlbmZlZWJsZWQgYnkgb2xkIGFnZSB0byBzZXJ2ZSB0aGUgcGVvcGxlLCByZWdhcmRpbmcgdGhlIHNlcnZpY2Ugb2YgdGhlIHN0YXRlIGFzIGEgYnVyZGVuc29tZSBkdXR5OyBub3IgZGlkIGhlLCBsaWtlIFNjaXBpbyBBZnJpY2FudXMgYmVmb3JlIGhpbSwgYmVjYXVzZSBvZiBlbnZpb3VzIGF0dGFja3MgdXBvbiBoaXMgcmVwdXRhdGlvbiwgdHVybiBoaXMgYmFjayB1cG9uIHRoZSBwZW9wbGUgYW5kIG1ha2UgbGVpc3VyZSBoaXMgZW5kIGFuZCBhaW0gZm9yIHRoZSByZXN0IG9mIGhpcyBsaWZlOyAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgcmF0aGVyLCBhcyBzb21lb25lIHBlcnN1YWRlZCBEaW9ueXNpdXMgdG8gcmVnYXJkIGhpcyBzb3ZlcmVpZ250eSBhcyBoaXMgZmFpcmVzdCB3aW5kaW5nLXNoZWV0LCBzbyBoZSBoZWxkIHB1YmxpYyBzZXJ2aWNlIHRvIGJlIHRoZSBmYWlyZXN0IHByaXZpbGVnZSBvZiBvbGQgYWdlLiBGb3IgcmVjcmVhdGlvbiBhbmQgYW11c2VtZW50LCB3aGVuIGhlIGhhZCBsZWlzdXJlIHRoZXJlZm9yLCBoZSByZXNvcnRlZCB0byB0aGUgd3JpdGluZyBvZiBib29rcyBhbmQgdG8gZmFybWluZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlYXZlbiBmb3JiaWQgSSBteSBzb24sPC9xPiBjcmllZCBDYXRvLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWxsIHlvdXIgY29uZHVjdCB0b3dhcmRzIG1lIGhhcyBiZWVuIGFkbWlyYWJsZSwgYW5kIEkgaGF2ZSBubyBmYXVsdCB0byBmaW5kIHdpdGggeW91OyBidXQgSSBkZXNpcmUgdG8gYmxlc3MgbXlzZWxmIGFuZCBteSBjb3VudHJ5IHdpdGggbW9yZSBzdWNoIHNvbnMuPC9xPiBIb3dldmVyLCB0aGV5IHNheSB0aGF0IHRoaXMgc2VudGltZW50IHdhcyB1dHRlcmVkIGxvbmcgYmVmb3JlIGJ5IFBlaXNpc3RyYXR1cywgdGhlIHR5cmFudCBvZiBBdGhlbnMsIHdobyBnYXZlIGhpcyBncm93biB1cCBzYW5zIGEgc3RlcC1tb3RoZXIgaW4gdGhlIHBlcnNvbiBvZiBUaW1vbmFzc2Egb2YgQXJnb2xpcywgYnkgIHdob20gaGUgaXMgc2FpZCB0byBoYXZlIGhhZCBJb3Bob24gYW5kIFRoZXNzYWx1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoaXMgc2Vjb25kIG1hcnJpYWdlIGEgc29uIHdhcyBib3JuIHRvIENhdG8sIHdobyB3YXMgbmFtZWQgU2Fsb25pdXMsIGFmdGVyIGhpcyBtb3RoZXIncyBmYXRoZXIuIEJ1dCBoaXMgZWxkZXIgc29uIGRpZWQgaW4gdGhlIHByYWV0b3JzaGlwLiBDYXRvIG9mdGVuIHNwZWFrcyBvZiBoaW0gaW4gaGlzIGJvb2tzIGFzIGEgYnJhdmUgYW5kIHdvcnRoeSBtYW4sIGFuZCBpcyBzYWlkIHRvIGhhdmUgYm9ybmUgaGlzIGxvc3Mgd2l0aCBhbGwgdGhlIGVxdWFuaW1pdHkgb2YgYSBwaGlsb3NvcGhlciwgcmVtaXR0aW5nIG5vdCBhIHdoaXQgYmVjYXVzZSBvZiBpdCBoaXMgYXJkb3VyIGluIHRoZSBwdWJsaWMgc2VydmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgbm90LCBsaWtlIEx1Y2l1cyBMdWN1bGx1cyBhbmQgTWV0ZWxsdXMgUGl1cyBpbiBhZnRlciB0aW1lcywgdG9vIGVuZmVlYmxlZCBieSBvbGQgYWdlIHRvIHNlcnZlIHRoZSBwZW9wbGUsIHJlZ2FyZGluZyB0aGUgc2VydmljZSBvZiB0aGUgc3RhdGUgYXMgYSBidXJkZW5zb21lIGR1dHk7IG5vciBkaWQgaGUsIGxpa2UgU2NpcGlvIEFmcmljYW51cyBiZWZvcmUgaGltLCBiZWNhdXNlIG9mIGVudmlvdXMgYXR0YWNrcyB1cG9uIGhpcyByZXB1dGF0aW9uLCB0dXJuIGhpcyBiYWNrIHVwb24gdGhlIHBlb3BsZSBhbmQgbWFrZSBsZWlzdXJlIGhpcyBlbmQgYW5kIGFpbSBmb3IgdGhlIHJlc3Qgb2YgaGlzIGxpZmU7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCByYXRoZXIsIGFzIHNvbWVvbmUgcGVyc3VhZGVkIERpb255c2l1cyB0byByZWdhcmQgaGlzIHNvdmVyZWlnbnR5IGFzIGhpcyBmYWlyZXN0IHdpbmRpbmctc2hlZXQsIHNvIGhlIGhlbGQgcHVibGljIHNlcnZpY2UgdG8gYmUgdGhlIGZhaXJlc3QgcHJpdmlsZWdlIG9mIG9sZCBhZ2UuIEZvciByZWNyZWF0aW9uIGFuZCBhbXVzZW1lbnQsIHdoZW4gaGUgaGFkIGxlaXN1cmUgdGhlcmVmb3IsIGhlIHJlc29ydGVkIHRvIHRoZSB3cml0aW5nIG9mIGJvb2tzIGFuZCB0byBmYXJtaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjb21wb3NlZCBzcGVlY2hlcywgdGhlbiwgb24gYWxsIHNvcnRzIG9mIHN1YmplY3RzLCBhbmQgaGlzdG9yaWVzLCBhbmQgYXMgZm9yIGZhcm1pbmcsIGhlIGZvbGxvd2VkIGl0IGluIGVhcm5lc3Qgd2hlbiBoZSB3YXMgeW91bmcgYW5kIHBvb3Is4oCUaW5kZWVkLCBoZSBzYXlzIGhlIHRoZW4gaGFkIG9ubHkgdHdvIHdheXMgb2YgZ2V0dGluZyBtb25leSwgZmFybWluZyBhbmQgZnJ1Z2FsaXR5LOKAlGJ1dCBpbiBsYXRlciBsaWZlIGhlIHdhcyBvbmx5IGEgdGhlb3JldGljYWwgYW5kIGZhbmN5IGZhcm1lci4gSGUgYWxzbyBjb21wb3NlZCBhIGJvb2sgb24gZmFybWluZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2F0byBBZ3IuIDEuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZSByZSBydXN0aWNhLjwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiB3aGljaCBoZSBhY3R1YWxseSBnYXZlIHJlY2lwZXMgZm9yIG1ha2luZyBjYWtlcyBhbmQgcHJlc2VydmluZyBmcnVpdCwgc28gYW1iaXRpb3VzIHdhcyBoZSB0byBiZSBzdXBlcmlvciBhbmQgcGVjdWxpYXIgaW4gZXZlcnl0aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGRpbm5lcnMsIHRvbywgd2hpY2ggaGUgZ2F2ZSBpbiB0aGUgY291bnRyeSwgd2VyZSBxdWl0ZSBwbGVudGlmdWwuIEhlIGFsd2F5cyBhc2tlZCBpbiBjb25nZW5pYWwgY291bnRyeSBuZWlnaGJvdXJzLCBhbmQgbWFkZSBtZXJyeSB3aXRoIHRoZW0sIGFuZCBub3Qgb25seSBkaWQgdGhvc2Ugb2YgaGlzIG93biBhZ2UgZmluZCBpbiBoaW0gYW4gYWdyZWVhYmxlIGFuZCBtdWNoIGRlc2lyZWQgY29tcGFuaW9uLCBidXQgYWxzbyB0aGUgeW91bmcuIEZvciBoZSB3YXMgYSBtYW4gb2YgbGFyZ2UgZXhwZXJpZW5jZSwgd2hvIGhhZCByZWFkIGFuZCBoZWFyZCBtdWNoIHRoYXQgd2FzIHdlbGwgd29ydGggcmVwZWF0aW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoZWxkIHRoZSB0YWJsZSB0byBiZSB0aGUgdmVyeSBiZXN0IHByb21vdGVyIG9mIGZyaWVuZHNoaXAsIGFuZCBhdCBoaXMgb3duLCB0aGUgY29udmVyc2F0aW9uIHR1cm5lZCBtdWNoIHRvIHRoZSBwcmFpc2Ugb2YgaG9ub3VyYWJsZSBhbmQgd29ydGh5IGNpdGl6ZW5zLCBncmVhdGx5IHRvIHRoZSBuZWdsZWN0IG9mIHRob3NlIHdobyB3ZXJlIHdvcnRobGVzcyBhbmQgYmFzZS4gQWJvdXQgc3VjaCBDYXRvIHN1ZmZlcmVkIG5vIHRhYmxldGFsaywgZWl0aGVyIGJ5IHdheSBvZiBwcmFpc2Ugb3IgYmxhbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgY29tcG9zZWQgc3BlZWNoZXMsIHRoZW4sIG9uIGFsbCBzb3J0cyBvZiBzdWJqZWN0cywgYW5kIGhpc3RvcmllcywgYW5kIGFzIGZvciBmYXJtaW5nLCBoZSBmb2xsb3dlZCBpdCBpbiBlYXJuZXN0IHdoZW4gaGUgd2FzIHlvdW5nIGFuZCBwb29yLOKAlGluZGVlZCwgaGUgc2F5cyBoZSB0aGVuIGhhZCBvbmx5IHR3byB3YXlzIG9mIGdldHRpbmcgbW9uZXksIGZhcm1pbmcgYW5kIGZydWdhbGl0eSzigJRidXQgaW4gbGF0ZXIgbGlmZSBoZSB3YXMgb25seSBhIHRoZW9yZXRpY2FsIGFuZCBmYW5jeSBmYXJtZXIuIEhlIGFsc28gY29tcG9zZWQgYSBib29rIG9uIGZhcm1pbmc8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYXRvIEFnci4gMS4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGUgcmUgcnVzdGljYS48L3RpdGxlPgogICAgICAgICAgICAgICA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW4gd2hpY2ggaGUgYWN0dWFsbHkgZ2F2ZSByZWNpcGVzIGZvciBtYWtpbmcgY2FrZXMgYW5kIHByZXNlcnZpbmcgZnJ1aXQsIHNvIGFtYml0aW91cyB3YXMgaGUgdG8gYmUgc3VwZXJpb3IgYW5kIHBlY3VsaWFyIGluIGV2ZXJ5dGhpbmcuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2F0byBBZ3IuIDEuMSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIHJlIHJ1c3RpY2EuPC90aXRsZT4KICAgICAgICAgICAgICAgPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSByZSBydXN0aWNhLjwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBkaW5uZXJzLCB0b28sIHdoaWNoIGhlIGdhdmUgaW4gdGhlIGNvdW50cnksIHdlcmUgcXVpdGUgcGxlbnRpZnVsLiBIZSBhbHdheXMgYXNrZWQgaW4gY29uZ2VuaWFsIGNvdW50cnkgbmVpZ2hib3VycywgYW5kIG1hZGUgbWVycnkgd2l0aCB0aGVtLCBhbmQgbm90IG9ubHkgZGlkIHRob3NlIG9mIGhpcyBvd24gYWdlIGZpbmQgaW4gaGltIGFuIGFncmVlYWJsZSBhbmQgbXVjaCBkZXNpcmVkIGNvbXBhbmlvbiwgYnV0IGFsc28gdGhlIHlvdW5nLiBGb3IgaGUgd2FzIGEgbWFuIG9mIGxhcmdlIGV4cGVyaWVuY2UsIHdobyBoYWQgcmVhZCBhbmQgaGVhcmQgbXVjaCB0aGF0IHdhcyB3ZWxsIHdvcnRoIHJlcGVhdGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhlbGQgdGhlIHRhYmxlIHRvIGJlIHRoZSB2ZXJ5IGJlc3QgcHJvbW90ZXIgb2YgZnJpZW5kc2hpcCwgYW5kIGF0IGhpcyBvd24sIHRoZSBjb252ZXJzYXRpb24gdHVybmVkIG11Y2ggdG8gdGhlIHByYWlzZSBvZiBob25vdXJhYmxlIGFuZCB3b3J0aHkgY2l0aXplbnMsIGdyZWF0bHkgdG8gdGhlIG5lZ2xlY3Qgb2YgdGhvc2Ugd2hvIHdlcmUgd29ydGhsZXNzIGFuZCBiYXNlLiBBYm91dCBzdWNoIENhdG8gc3VmZmVyZWQgbm8gdGFibGV0YWxrLCBlaXRoZXIgYnkgd2F5IG9mIHByYWlzZSBvciBibGFtZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhc3Qgb2YgaGlzIHB1YmxpYyBzZXJ2aWNlcyBpcyBzdXBwb3NlZCB0byBoYXZlIGJlZW4gdGhlIGRlc3RydWN0aW9uIG9mIENhcnRoYWdlLiBJdCB3YXMgU2NpcGlvIHRoZSBZb3VuZ2VyIHdobyBhY3R1YWxseSBicm91Z2h0IHRoZSB0YXNrIHRvIGNvbXBsZXRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTQ2IEIuQy48L25vdGU+IGJ1dCBpdCB3YXMgbGFyZ2VseSBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgYWR2aWNlIGFuZCBjb3Vuc2VsIG9mIENhdG8gdGhhdCB0aGUgUm9tYW5zIHVuZGVydG9vayB0aGUgd2FyLiBJdCB3YXMgb24gdGhpcyB3aXNlLiBDYXRvIHdhcyBzZW50PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTUwIEIuQy48L25vdGU+IG9uIGFuIGVtYmFzc3kgdG8gdGhlIENhcnRoYWdpbmlhbnMgYW5kIE1hc2luaXNzYSB0aGUgTnVtaWRpYW4sIHdobyB3ZXJlIGF0IHdhciB3aXRoIG9uZSBhbm90aGVyLCB0byBpbnF1aXJlIGludG8gdGhlIGdyb3VuZHMgb2YgdGhlaXIgcXVhcnJlbC4gTWFzaW5pc3NhIGhhZCBiZWVuIGEgZnJpZW5kIG9mIHRoZSBSb21hbiBwZW9wbGUgZnJvbSB0aGUgZmlyc3QsIGFuZCB0aGUgQ2FydGhhZ2luaWFucyBoYWQgZW50ZXJlZCBpbnRvIHRyZWF0eSByZWxhdGlvbnMgd2l0aCBSb21lIGFmdGVyIHRoZSBkZWZlYXQgd2hpY2ggdGhlIGVsZGVyIFNjaXBpbyBoYWQgZ2l2ZW4gdGhlbS4gVGhlIHRyZWF0eSBkZXByaXZlZCB0aGVtIG9mIHRoZWlyIGVtcGlyZSwgYW5kIGltcG9zZWQgYSBncmlldm91cyBtb25leSB0cmlidXRlIHVwb24gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bywgaG93ZXZlciwgZm91bmQgdGhlIGNpdHkgYnkgbm8gbWVhbnMgaW4gYSBwb29yIGFuZCBsb3dseSBzdGF0ZSwgYXMgdGhlIFJvbWFucyBzdXBwb3NlZCwgYnV0IHJhdGhlciB0ZWVtaW5nIHdpdGggdmlnb3JvdXMgZmlnaHRpbmcgbWVuLCBvdmVyZmxvd2luZyB3aXRoIGVub3Jtb3VzIHdlYWx0aCwgZmlsbGVkIHdpdGggYXJtcyBvZiBldmVyeSBzb3J0IGFuZCB3aXRoIG1pbGl0YXJ5IHN1cHBsaWVzLCBhbmQgbm90IGEgbGl0dGxlIHB1ZmZlZCB1cCBieSBhbGwgdGhpcy4gSGUgdGhlcmVmb3JlIHRob3VnaHQgaXQgbm8gdGltZSBmb3IgdGhlIFJvbWFucyB0byBiZSBvcmRlcmluZyBhbmQgYXJyYW5naW5nIHRoZSBhZmZhaXJzIG9mIE1hc2luaXNzYSBhbmQgdGhlIE51bWlkaWFucywgYnV0IHRoYXQgdW5sZXNzIHRoZXkgc2hvdWxkIHJlcHJlc3MgYSBjaXR5IHdoaWNoIGhhZCBhbHdheXMgYmVlbiB0aGVpciBtYWxpZ25hbnQgZm9lLCBub3cgdGhhdCBpdHMgcG93ZXIgd2FzIHNvIGluY3JlZGlibHkgZ3Jvd24sIHRoZXkgd291bGQgYmUgaW52b2x2ZWQgYWdhaW4gaW4gZGFuZ2VycyBhcyBncmVhdCBhcyBiZWZvcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSByZXR1cm5lZCB3aXRoIHNwZWVkIHRvIFJvbWUsIGFuZCBhZHZpc2VkIHRoZSBTZW5hdGUgdGhhdCB0aGUgZm9ybWVyIGNhbGFtaXRvdXMgZGVmZWF0cyBvZiB0aGUgQ2FydGhhZ2luaWFucyBoYWQgZGltaW5pc2hlZCBub3Qgc28gbXVjaCB0aGVpciBwb3dlciBhcyB0aGVpciBmb29saGFyZGluZXNzLCBhbmQgd2VyZSBsaWtlbHkgdG8gcmVuZGVyIHRoZW0gaW4gdGhlIGVuZCBub3Qgd2Vha2VyLCBidXQgbW9yZSBleHBlcnQgaW4gd2FyOyB0aGVpciBwcmVzZW50IGNvbnRlc3Qgd2l0aCBOdW1pZGlhIHdhcyBidXQgYSBwcmVsdWRlIHRvIGEgY29udGVzdCB3aXRoIFJvbWUsIHdoaWxlIHBlYWNlIGFuZCB0cmVhdHkgd2VyZSBtZXJlIG5hbWVzIHdoZXJld2l0aCB0byBjb3ZlciB0aGVpciBwb3N0cG9uZW1lbnQgb2Ygd2FyIHRpbGwgYSBmaXQgb2NjYXNpb24gb2ZmZXJlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhc3Qgb2YgaGlzIHB1YmxpYyBzZXJ2aWNlcyBpcyBzdXBwb3NlZCB0byBoYXZlIGJlZW4gdGhlIGRlc3RydWN0aW9uIG9mIENhcnRoYWdlLiBJdCB3YXMgU2NpcGlvIHRoZSBZb3VuZ2VyIHdobyBhY3R1YWxseSBicm91Z2h0IHRoZSB0YXNrIHRvIGNvbXBsZXRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xNDYgQi5DLjwvbm90ZT4gYnV0IGl0IHdhcyBsYXJnZWx5IGluIGNvbnNlcXVlbmNlIG9mIHRoZSBhZHZpY2UgYW5kIGNvdW5zZWwgb2YgQ2F0byB0aGF0IHRoZSBSb21hbnMgdW5kZXJ0b29rIHRoZSB3YXIuIEl0IHdhcyBvbiB0aGlzIHdpc2UuIENhdG8gd2FzIHNlbnQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE1MCBCLkMuPC9ub3RlPiBvbiBhbiBlbWJhc3N5IHRvIHRoZSBDYXJ0aGFnaW5pYW5zIGFuZCBNYXNpbmlzc2EgdGhlIE51bWlkaWFuLCB3aG8gd2VyZSBhdCB3YXIgd2l0aCBvbmUgYW5vdGhlciwgdG8gaW5xdWlyZSBpbnRvIHRoZSBncm91bmRzIG9mIHRoZWlyIHF1YXJyZWwuIE1hc2luaXNzYSBoYWQgYmVlbiBhIGZyaWVuZCBvZiB0aGUgUm9tYW4gcGVvcGxlIGZyb20gdGhlIGZpcnN0LCBhbmQgdGhlIENhcnRoYWdpbmlhbnMgaGFkIGVudGVyZWQgaW50byB0cmVhdHkgcmVsYXRpb25zIHdpdGggUm9tZSBhZnRlciB0aGUgZGVmZWF0IHdoaWNoIHRoZSBlbGRlciBTY2lwaW8gaGFkIGdpdmVuIHRoZW0uIFRoZSB0cmVhdHkgZGVwcml2ZWQgdGhlbSBvZiB0aGVpciBlbXBpcmUsIGFuZCBpbXBvc2VkIGEgZ3JpZXZvdXMgbW9uZXkgdHJpYnV0ZSB1cG9uIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIGhvd2V2ZXIsIGZvdW5kIHRoZSBjaXR5IGJ5IG5vIG1lYW5zIGluIGEgcG9vciBhbmQgbG93bHkgc3RhdGUsIGFzIHRoZSBSb21hbnMgc3VwcG9zZWQsIGJ1dCByYXRoZXIgdGVlbWluZyB3aXRoIHZpZ29yb3VzIGZpZ2h0aW5nIG1lbiwgb3ZlcmZsb3dpbmcgd2l0aCBlbm9ybW91cyB3ZWFsdGgsIGZpbGxlZCB3aXRoIGFybXMgb2YgZXZlcnkgc29ydCBhbmQgd2l0aCBtaWxpdGFyeSBzdXBwbGllcywgYW5kIG5vdCBhIGxpdHRsZSBwdWZmZWQgdXAgYnkgYWxsIHRoaXMuIEhlIHRoZXJlZm9yZSB0aG91Z2h0IGl0IG5vIHRpbWUgZm9yIHRoZSBSb21hbnMgdG8gYmUgb3JkZXJpbmcgYW5kIGFycmFuZ2luZyB0aGUgYWZmYWlycyBvZiBNYXNpbmlzc2EgYW5kIHRoZSBOdW1pZGlhbnMsIGJ1dCB0aGF0IHVubGVzcyB0aGV5IHNob3VsZCByZXByZXNzIGEgY2l0eSB3aGljaCBoYWQgYWx3YXlzIGJlZW4gdGhlaXIgbWFsaWduYW50IGZvZSwgbm93IHRoYXQgaXRzIHBvd2VyIHdhcyBzbyBpbmNyZWRpYmx5IGdyb3duLCB0aGV5IHdvdWxkIGJlIGludm9sdmVkIGFnYWluIGluIGRhbmdlcnMgYXMgZ3JlYXQgYXMgYmVmb3JlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSByZXR1cm5lZCB3aXRoIHNwZWVkIHRvIFJvbWUsIGFuZCBhZHZpc2VkIHRoZSBTZW5hdGUgdGhhdCB0aGUgZm9ybWVyIGNhbGFtaXRvdXMgZGVmZWF0cyBvZiB0aGUgQ2FydGhhZ2luaWFucyBoYWQgZGltaW5pc2hlZCBub3Qgc28gbXVjaCB0aGVpciBwb3dlciBhcyB0aGVpciBmb29saGFyZGluZXNzLCBhbmQgd2VyZSBsaWtlbHkgdG8gcmVuZGVyIHRoZW0gaW4gdGhlIGVuZCBub3Qgd2Vha2VyLCBidXQgbW9yZSBleHBlcnQgaW4gd2FyOyB0aGVpciBwcmVzZW50IGNvbnRlc3Qgd2l0aCBOdW1pZGlhIHdhcyBidXQgYSBwcmVsdWRlIHRvIGEgY29udGVzdCB3aXRoIFJvbWUsIHdoaWxlIHBlYWNlIGFuZCB0cmVhdHkgd2VyZSBtZXJlIG5hbWVzIHdoZXJld2l0aCB0byBjb3ZlciB0aGVpciBwb3N0cG9uZW1lbnQgb2Ygd2FyIHRpbGwgYSBmaXQgb2NjYXNpb24gb2ZmZXJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gdGhpcywgaXQgaXMgc2FpZCB0aGF0IENhdG8gY29udHJpdmVkIHRvIGRyb3AgYSBMaWJ5YW4gZmlnIGluIHRoZSBTZW5hdGUsIGFzIGhlIHNob29rIG91dCB0aGUgZm9sZHMgb2YgaGlzIHRvZ2EsIGFuZCB0aGVuLCBhcyB0aGUgc2VuYXRvcnMgYWRtaXJlZCBpdHMgc2l6ZSBhbmQgYmVhdXR5LCBzYWlkIHRoYXQgdGhlIGNvdW50cnkgd2hlcmUgaXQgZ3JldyB3YXMgb25seSB0aHJlZSBkYXlzJyBzYWlsIGZyb20gUm9tZS4gQW5kIGluIG9uZSB0aGluZyBoZSB3YXMgZXZlbiBtb3JlIHNhdmFnZSwgbmFtZWx5LCBpbiBhZGRpbmcgdG8gaGlzIHZvdGUgb24gYW55IHF1ZXN0aW9uIHdoYXRzb2V2ZXIgdGhlc2Ugd29yZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gbXkgb3BpbmlvbiwgQ2FydGhhZ2UgbXVzdCBiZSBkZXN0cm95ZWQuPC9xPiBQdWJsaXVzIFNjaXBpbyBOYXNpY2EsIG9uIHRoZSBjb250cmFyeSwgd2hlbiBjYWxsZWQgdXBvbiBmb3IgaGlzIHZvdGUsIGFsd2F5cyBlbmRlZCBoaXMgc3BlZWNoIHdpdGggdGhpcyBkZWNsYXJhdGlvbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiBteSBvcGluaW9uLCBDYXJ0aGFnZSBtdXN0IGJlIHNwYXJlZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2F3LCBwcm9iYWJseSwgdGhhdCB0aGUgUm9tYW4gcGVvcGxlLCBpbiBpdHMgd2FudG9ubmVzcywgd2FzIGFscmVhZHkgZ3VpbHR5IG9mIG1hbnkgZXhjZXNzZXMsIGFuZCBpbiB0aGUgcHJpZGUgb2YgaXRzIHByb3NwZXJpdHksIHNwdXJuZWQgdGhlIGNvbnRyb2wgb2YgdGhlIFNlbmF0ZSwgYW5kIGZvcmNpYmx5IGRyYWdnZWQgdGhlIHdob2xlIHN0YXRlIHdpdGggaXQsIHdoaXRoZXJzb2V2ZXIgaXRzIG1hZCBkZXNpcmVzIGluY2xpbmVkIGl0LiBIZSB3aXNoZWQsIHRoZXJlZm9yZSwgdGhhdCB0aGUgZmVhciBvZiBDYXJ0aGFnZSBzaG91bGQgYWJpZGUsIHRvIGN1cmIgdGhlIGJvbGRuZXNzIG9mIHRoZSBtdWx0aXR1ZGUgbGlrZSBhIGJyaWRsZSwgYmVsaWV2aW5nIGhlciBub3Qgc3Ryb25nIGVub3VnaCB0byBjb25xdWVyIFJvbWUsIG5vciB5ZXQgd2VhayBlbm91Z2ggdG8gYmUgZGVzcGlzZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHdhcyBwcmVjaXNlbHkgd2hhdCBDYXRvIGRyZWFkZWQsIHdoZW4gdGhlIFJvbWFuIHBlb3BsZSB3YXMgaW5lYnJpYXRlZCBhbmQgc3RhZ2dlcmluZyB3aXRoIGl0cyBwb3dlciwgdG8gaGF2ZSBhIGNpdHkgd2hpY2ggaGFkIGFsd2F5cyBiZWVuIGdyZWF0LCBhbmQgd2FzIG5vdyBidXQgc29iZXJlZCBhbmQgY2hhc3RlbmVkIGJ5IGl0cyBjYWxhbWl0aWVzLCBmb3IgZXZlciB0aHJlYXRlbmluZyB0aGVtLiBTdWNoIGV4dGVybmFsIHRocmVhdHMgdG8gdGhlaXIgc292ZXJlaWdudHkgb3VnaHQgdG8gYmUgZG9uZSBhd2F5IHdpdGggYWx0b2dldGhlciwgaGUgdGhvdWdodCwgdGhhdCB0aGV5IG1pZ2h0IGJlIGZyZWUgdG8gZGV2aXNlIGEgY3VyZSBmb3IgdGhlaXIgZG9tZXN0aWMgZmFpbGluZ3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gdGhpcywgaXQgaXMgc2FpZCB0aGF0IENhdG8gY29udHJpdmVkIHRvIGRyb3AgYSBMaWJ5YW4gZmlnIGluIHRoZSBTZW5hdGUsIGFzIGhlIHNob29rIG91dCB0aGUgZm9sZHMgb2YgaGlzIHRvZ2EsIGFuZCB0aGVuLCBhcyB0aGUgc2VuYXRvcnMgYWRtaXJlZCBpdHMgc2l6ZSBhbmQgYmVhdXR5LCBzYWlkIHRoYXQgdGhlIGNvdW50cnkgd2hlcmUgaXQgZ3JldyB3YXMgb25seSB0aHJlZSBkYXlzJyBzYWlsIGZyb20gUm9tZS4gQW5kIGluIG9uZSB0aGluZyBoZSB3YXMgZXZlbiBtb3JlIHNhdmFnZSwgbmFtZWx5LCBpbiBhZGRpbmcgdG8gaGlzIHZvdGUgb24gYW55IHF1ZXN0aW9uIHdoYXRzb2V2ZXIgdGhlc2Ugd29yZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiBteSBvcGluaW9uLCBDYXJ0aGFnZSBtdXN0IGJlIGRlc3Ryb3llZC48L3E+IFB1YmxpdXMgU2NpcGlvIE5hc2ljYSwgb24gdGhlIGNvbnRyYXJ5LCB3aGVuIGNhbGxlZCB1cG9uIGZvciBoaXMgdm90ZSwgYWx3YXlzIGVuZGVkIGhpcyBzcGVlY2ggd2l0aCB0aGlzIGRlY2xhcmF0aW9uOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gbXkgb3BpbmlvbiwgQ2FydGhhZ2UgbXVzdCBiZSBzcGFyZWQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhdywgcHJvYmFibHksIHRoYXQgdGhlIFJvbWFuIHBlb3BsZSwgaW4gaXRzIHdhbnRvbm5lc3MsIHdhcyBhbHJlYWR5IGd1aWx0eSBvZiBtYW55IGV4Y2Vzc2VzLCBhbmQgaW4gdGhlIHByaWRlIG9mIGl0cyBwcm9zcGVyaXR5LCBzcHVybmVkIHRoZSBjb250cm9sIG9mIHRoZSBTZW5hdGUsIGFuZCBmb3JjaWJseSBkcmFnZ2VkIHRoZSB3aG9sZSBzdGF0ZSB3aXRoIGl0LCB3aGl0aGVyc29ldmVyIGl0cyBtYWQgZGVzaXJlcyBpbmNsaW5lZCBpdC4gSGUgd2lzaGVkLCB0aGVyZWZvcmUsIHRoYXQgdGhlIGZlYXIgb2YgQ2FydGhhZ2Ugc2hvdWxkIGFiaWRlLCB0byBjdXJiIHRoZSBib2xkbmVzcyBvZiB0aGUgbXVsdGl0dWRlIGxpa2UgYSBicmlkbGUsIGJlbGlldmluZyBoZXIgbm90IHN0cm9uZyBlbm91Z2ggdG8gY29ucXVlciBSb21lLCBub3IgeWV0IHdlYWsgZW5vdWdoIHRvIGJlIGRlc3Bpc2VkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHdhcyBwcmVjaXNlbHkgd2hhdCBDYXRvIGRyZWFkZWQsIHdoZW4gdGhlIFJvbWFuIHBlb3BsZSB3YXMgaW5lYnJpYXRlZCBhbmQgc3RhZ2dlcmluZyB3aXRoIGl0cyBwb3dlciwgdG8gaGF2ZSBhIGNpdHkgd2hpY2ggaGFkIGFsd2F5cyBiZWVuIGdyZWF0LCBhbmQgd2FzIG5vdyBidXQgc29iZXJlZCBhbmQgY2hhc3RlbmVkIGJ5IGl0cyBjYWxhbWl0aWVzLCBmb3IgZXZlciB0aHJlYXRlbmluZyB0aGVtLiBTdWNoIGV4dGVybmFsIHRocmVhdHMgdG8gdGhlaXIgc292ZXJlaWdudHkgb3VnaHQgdG8gYmUgZG9uZSBhd2F5IHdpdGggYWx0b2dldGhlciwgaGUgdGhvdWdodCwgdGhhdCB0aGV5IG1pZ2h0IGJlIGZyZWUgdG8gZGV2aXNlIGEgY3VyZSBmb3IgdGhlaXIgZG9tZXN0aWMgZmFpbGluZ3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IENhdG8gaXMgc2FpZCB0byBoYXZlIGJyb3VnaHQgdG8gcGFzcyB0aGUgdGhpcmQgYW5kIGxhc3Qgd2FyIGFnYWluc3QgQ2FydGhhZ2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTUxLTE0NiBCLkMuPC9ub3RlPiBidXQgaXQgaGFkIG5vIHNvb25lciBiZWd1biB0aGFuIGhlIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTQ5IEIuQy48L25vdGU+IGhhdmluZyBmaXJzdCBwcm9waGVzaWVkIG9mIHRoZSBtYW4gd2hvIHdhcyBkZXN0aW5lZCB0byBlbmQgaXQuIFRoaXMgbWFuIHdhcyB0aGVuIHlvdW5nLCBidXQgYXMgdHJpYnVuZSBpbiB0aGUgYXJteSwgaGUgd2FzIGdpdmluZyBwcm9vZnMgb2YganVkZ21lbnQgYW5kIGRhcmluZyBpbiBoaXMgZW5nYWdlbWVudHMgd2l0aCB0aGUgZW5lbXkuIFRpZGluZ3Mgb2YgdGhpcyBjYW1lIHRvIFJvbWUsIGFuZCBDYXRvIGlzIHNhaWQgdG8gaGF2ZSBjcmllZCBvbiBoZWFyaW5nIHRoZW064oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPk9ubHkgaGUgaGFzIHdpdHMsIGJ1dCB0aGUgcmVzdCBhcmUgZmx1dHRlcmluZyBzaGFkb3dzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMC40OTUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCB4LiA0OTUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGlzIHV0dGVyYW5jZSBvZiBDYXRvJ3MsIFNjaXBpbyBzcGVlZGlseSBjb25maXJtZWQgYnkgaGlzIGRlZWRzLiBDYXRvIGxlZnQgb25lIHNvbiBieSBoaXMgc2Vjb25kIHdpZmUsIHdob3NlIHN1cm5hbWUsIGFzIHdlIGhhdmUgYWxyZWFkeSByZW1hcmtlZCwgd2FzIFNhbG9uaXVzOyBhbmQgb25lIGdyYW5kc29uIGJ5IHRoZSBzb24gd2hvIGRpZWQgYmVmb3JlIGhpbS4gU2Fsb25pdXMgZGllZCBpbiB0aGUgcHJhZXRvcnNoaXAsIGJ1dCB0aGUgc29uIHdob20gaGUgbGVmdCwgTWFyY3VzLCBjYW1lIHRvIGJlIGNvbnN1bC4gVGhpcyBNYXJjdXMgd2FzIHRoZSBncmFuZGZhdGhlciBvZiBDYXRvIHRoZSBwaGlsb3NvcGhlciwgd2hvIHdhcyB0aGUgYmVzdCBhbmQgbW9zdCBpbGx1c3RyaW91cyBtYW4gb2YgaGlzIHRpbWUuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IENhdG8gaXMgc2FpZCB0byBoYXZlIGJyb3VnaHQgdG8gcGFzcyB0aGUgdGhpcmQgYW5kIGxhc3Qgd2FyIGFnYWluc3QgQ2FydGhhZ2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xNTEtMTQ2IEIuQy48L25vdGU+IGJ1dCBpdCBoYWQgbm8gc29vbmVyIGJlZ3VuIHRoYW4gaGUgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE0OSBCLkMuPC9ub3RlPiBoYXZpbmcgZmlyc3QgcHJvcGhlc2llZCBvZiB0aGUgbWFuIHdobyB3YXMgZGVzdGluZWQgdG8gZW5kIGl0LiBUaGlzIG1hbiB3YXMgdGhlbiB5b3VuZywgYnV0IGFzIHRyaWJ1bmUgaW4gdGhlIGFybXksIGhlIHdhcyBnaXZpbmcgcHJvb2ZzIG9mIGp1ZGdtZW50IGFuZCBkYXJpbmcgaW4gaGlzIGVuZ2FnZW1lbnRzIHdpdGggdGhlIGVuZW15LiBUaWRpbmdzIG9mIHRoaXMgY2FtZSB0byBSb21lLCBhbmQgQ2F0byBpcyBzYWlkIHRvIGhhdmUgY3JpZWQgb24gaGVhcmluZyB0aGVtOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T25seSBoZSBoYXMgd2l0cywgYnV0IHRoZSByZXN0IGFyZSBmbHV0dGVyaW5nIHNoYWRvd3MuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPk9ubHkgaGUgaGFzIHdpdHMsIGJ1dCB0aGUgcmVzdCBhcmUgZmx1dHRlcmluZyBzaGFkb3dzLjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMTAuNDk1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB4LiA0OTUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMC40OTUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHguIDQ5NS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgeC4gNDk1LjwvdHJhbnNsYXRpb24+"
