var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgd2FzIGEgeW91dGgsIGhlIGxpdmVkIGluIGxvZGdpbmdzLCBhdCBhIGxvdyBwcmljZSwgYW5kIHRoaXMgd2FzIGFmdGVyd2FyZHMgY2FzdCBpbiBoaXMgdGVldGggd2hlbiBtZW4gdGhvdWdodCBoaW0gdW5kdWx5IHByb3NwZXJvdXMuIEZvciBpbnN0YW5jZSwgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIGhlIHdhcyBwdXR0aW5nIG9uIGJvYXN0ZnVsIGFpcnMgYWZ0ZXIgaGlzIGNhbXBhaWduIGluIExpYnlhLCBhIGNlcnRhaW4gbm9ibGVtYW4gc2FpZCB0byBoaW06IFtsZHF1byBdSG93IGNhbnN0IHRob3UgYmUgYW4gaG9uZXN0IG1hbiwgd2hlbiB0aHkgZmF0aGVyIGxlZnQgdGhlZSBub3RoaW5nLCBhbmQgeWV0IHRob3UgYXJ0IHNvIHJpY2g/W3JkcXVvIF0gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbHRob3VnaCB0aGUgUm9tYW5zIG9mIHRoYXQgdGltZSBubyBsb25nZXIgcmV0YWluZWQgdGhlaXIgYW5jaWVudCBwdXJpdHkgYW5kIHVwcmlnaHRuZXNzIG9mIGxpZmUsIGJ1dCBoYWQgZGVnZW5lcmF0ZWQsIGFuZCB5aWVsZGVkIHRvIHRoZSBhcHBldGl0ZSBmb3IgbHV4dXJ5IGFuZCBleHRyYXZhZ2FuY2UsIHRoZXkgbmV2ZXJ0aGVsZXNzIGhlbGQgaW4gZXF1YWwgb3Bwcm9icml1bSB0aG9zZSB3aG8gbG9zdCBhbiBpbmhlcml0ZWQgd2VhbHRoIGFuZCB0aG9zZSB3aG8gZm9yc29vayBhbiBhbmNlc3RyYWwgcG92ZXJ0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlcndhcmRzLCB3aGVuIGhlIGhhZCBhdCBsYXN0IGJlY29tZSBhYnNvbHV0ZSBpbiBwb3dlciwgYW5kIHdhcyBwdXR0aW5nIG1hbnkgdG8gZGVhdGgsIGEgZnJlZWRtYW4sIHdobyB3YXMgdGhvdWdodCB0byBiZSBjb25jZWFsaW5nIG9uZSBvZiB0aGUgcHJvc2NyaWJlZCwgYW5kIHdhcyB0aGVyZWZvcmUgdG8gYmUgdGhyb3duIGRvd24gdGhlIFRhcnBlaWFuIHJvY2ssIGNhc3QgaXQgaW4gaGlzIHRlZXRoIHRoYXQgdGhleSBoYWQgbG9uZyBsaXZlZCB0b2dldGhlciBpbiBvbmUgbG9kZ2luZyBob3VzZSwgaGltc2VsZiByZW50aW5nIHRoZSB1cHBlciByb29tcyBhdCB0d28gdGhvdXNhbmQgc2VzdGVyY2VzLCBhbmQgU3VsbGEgdGhlIGxvd2VyIHJvb21zIGF0IHRocmVlIHRob3VzYW5kLiBUaGUgZGlmZmVyZW5jZSBpbiB0aGVpciBmb3J0dW5lcywgdGhlcmVmb3JlLCB3YXMgb25seSBhIHRob3VzYW5kIHNlc3RlcmNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIFN1bGxhJ3MgdGltZSB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+c2VzdGVydGl1czwvZm9yZWlnbj4gd2FzIGEgc2lsdmVyIGNvaW4gd29ydGggYmV0d2VlbiB0d28gYW5kIHRocmVlIHBlbmNlLCBvciBhYm91dCBmaXZlIGNlbnRzLiBUaGUgQXR0aWMgZHJhY2htYSB3YXMgYSBzaWx2ZXIgY29pbiB3b3J0aCBhYm91dCBlaWdodCBwZW5jZSwgb3IgdHdlbnR5IGNlbnRzLjwvbm90ZT4gd2hpY2ggYXJlIGVxdWl2YWxlbnQgdG8gdHdvIGh1bmRyZWQgYW5kIGZpZnR5IEF0dGljIGRyYWNobWFzLiBTdWNoLCB0aGVuLCBpcyB0aGUgYWNjb3VudCB3ZSBmaW5kIG9mIFN1bGxhJ3MgZWFybGllciBmb3J0dW5lLgoJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5zZXN0ZXJ0aXVzPC9mb3JlaWduPiB3YXMgYSBzaWx2ZXIgY29pbiB3b3J0aCBiZXR3ZWVuIHR3byBhbmQgdGhyZWUgcGVuY2UsIG9yIGFib3V0IGZpdmUgY2VudHMuIFRoZSBBdHRpYyBkcmFjaG1hIHdhcyBhIHNpbHZlciBjb2luIHdvcnRoIGFib3V0IGVpZ2h0IHBlbmNlLCBvciB0d2VudHkgY2VudHMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgcGVyc29uYWwgYXBwZWFyYW5jZSwgaW4gZ2VuZXJhbCwgaXMgZ2l2ZW4gYnkgaGlzIHN0YXR1ZXM7IGJ1dCB0aGUgZ2xlYW0gb2YgaGlzIGdyYXkgZXllcywgd2hpY2ggd2FzIHRlcnJpYmx5IHNoYXJwIGFuZCBwb3dlcmZ1bCwgd2FzIHJlbmRlcmVkIGV2ZW4gbW9yZSBmZWFyZnVsIGJ5IHRoZSBjb21wbGV4aW9uIG9mIGhpcyBmYWNlLiBUaGlzIHdhcyBjb3ZlcmVkIHdpdGggY29hcnNlIGJsb3RjaGVzIG9mIHJlZCwgaW50ZXJzcGVyc2VkIHdpdGggd2hpdGUuIEZvciB0aGlzIHJlYXNvbiwgdGhleSBzYXksIGhpcyBzdXJuYW1lIHdhcyBnaXZlbiBoaW0gYmVjYXVzZSBvZiBoaXMgY29tcGxleGlvbiwgYW5kIGl0IHdhcyBpbiBhbGx1c2lvbiB0byB0aGlzIHRoYXQgYSBzY3Vycmlsb3VzIGplc3RlciBhdCBBdGhlbnMgbWFkZSB0aGUgdmVyc2U6W21kYXNoIF0KCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KICAgICAgICAgICAgICAgPGw+W2xkcXVvIF1TdWxsYSBpcyBhIG11bGJlcnJ5IHNwcmlua2xlZCBvJ2VyIHdpdGggbWVhbC5bcmRxdW8gXTwvbD4KICAgICAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJTm9yIGlzIGl0IG91dCBvZiBwbGFjZSB0byBtZW50aW9uIHN1Y2ggdGVzdGltb25pZXMgaW4gdGhlIGNhc2Ugb2YgYSBtYW4gc2FpZCB0byBoYXZlIGJlZW4gYnkgbmF0dXJlIHNvIGZvbmQgb2YgcmFpbGxlcnksIHRoYXQgd2hlbiBoZSB3YXMgc3RpbGwgeW91bmcgYW5kIG9ic2N1cmUgaGUgc3BlbnQgbXVjaCB0aW1lIHdpdGggYWN0b3JzIGFuZCBidWZmb29ucyBhbmQgc2hhcmVkIHRoZWlyIGRpc3NvbHV0ZSBsaWZlOyBhbmQgd2hlbiBoZSBoYWQgbWFkZSBoaW1zZWxmIHN1cHJlbWUgbWFzdGVyLCBoZSB3b3VsZCBkYWlseSBhc3NlbWJsZSB0aGUgbW9zdCByZWNrbGVzcyBzdGFnZSBhbmQgdGhlYXRyZSBmb2xrIHRvIGRyaW5rIGFuZCBiYW5keSBqZXN0cyB3aXRoIHRoZW0sIGFsdGhvdWdoIG1lbiB0aG91Z2h0IHRoYXQgaGUgZGlzZ3JhY2VkIGhpcyB5ZWFycywgYW5kIGFsdGhvdWdoIGhlIG5vdCBvbmx5IGRpc2hvbm91cmVkIGhpcyBoaWdoIG9mZmljZSwgYnV0IG5lZ2xlY3RlZCBtdWNoIHRoYXQgcmVxdWlyZWQgYXR0ZW50aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBTdWxsYSB3YXMgb25jZSBhdCB0YWJsZSwgaGUgcmVmdXNlZCB0byBiZSBzZXJpb3VzIGF0IGFsbCwgYnV0LCBhbHRob3VnaCBhdCBvdGhlciB0aW1lcyBoZSB3YXMgYSBtYW4gb2YgYnVzaW5lc3MgYW5kIHdvcmUgYW4gYXVzdGVyZSBsb29rLCBoZSB1bmRlcndlbnQgYSBjb21wbGV0ZSBjaGFuZ2UgYXMgc29vbiBhcyBoZSBiZXRvb2sgaGltc2VsZiB0byBnb29kLWZlbGxvd3NoaXAgYW5kIGRyaW5raW5nLCBzbyB0aGF0IGNvbWljIHNpbmdlcnMgYW5kIGRhbmNlcnMgZm91bmQgaGltIGFueXRoaW5nIGJ1dCBmZXJvY2lvdXMsIGFuZCByZWFkeSB0byBsaXN0ZW4gYW5kIHlpZWxkIHRvIGV2ZXJ5IHJlcXVlc3QuIEl0IHdhcyB0aGlzIGxheGl0eSwgYXMgaXQgc2VlbXMsIHdoaWNoIHByb2R1Y2VkIGluIGhpbSBhIGRpc2Vhc2VkIHByb3BlbnNpdHkgdG8gYW1vcm91cyBpbmR1bGdlbmNlIGFuZCBhbiB1bnJlc3RyYWluZWQgdm9sdXB0dW91c25lc3MsIGZyb20gd2hpY2ggaGUgZGlkIG5vdCByZWZyYWluIGV2ZW4gaW4gaGlzIG9sZCBhZ2UsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBjb250aW51ZWQgaGlzIHlvdXRoZnVsIGxvdmUgZm9yIE1ldHJvYml1cywgYW4gYWN0b3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbnNlIG9mIHRoZSBvYnNjdXJlIEdyZWVrIGlzIGNsZWFyIGZyb20gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDM2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmkuIDE8L2JpYmw+IAogICAgICAgICAgICAgICA8ZW1waD5maW4uPC9lbXBoPiBDYXBwcyBzdWdnZXN0cyA8Zm9yZWlnbiBsYW5nPSJncmVlayI+4b2hz4IgLiAuIC4gLiDhvaTOvS48L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gSGUgYWxzbyBoYWQgdGhlIGZvbGxvd2luZyBleHBlcmllbmNlLiBIZSBiZWdhbiBieSBsb3ZpbmcgYSBjb21tb24gYnV0IHdlYWx0aHkgd29tYW4sIE5pY29wb2xpcyBieSBuYW1lLCBhbmQgc3VjaCB3YXMgdGhlIGNoYXJtIG9mIGhpcyBpbnRpbWFjeSBhbmQgeW91dGhmdWwgZ3JhY2UgdGhhdCBpbiB0aGUgZW5kIGhlIHdhcyBiZWxvdmVkIGJ5IGhlciwgYW5kIHdhcyBsZWZ0IGhlciBoZWlyIHdoZW4gc2hlIGRpZWQuIEhlIGFsc28gaW5oZXJpdGVkIHRoZSBwcm9wZXJ0eSBvZiBoaXMgc3RlcC1tb3RoZXIsIHdobyBsb3ZlZCBoaW0gYXMgaGVyIG93biBzb24uIEJ5IHRoZXNlIG1lYW5zIGhlIGJlY2FtZSBtb2RlcmF0ZWx5IHdlbGwgb2ZmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgcGVyc29uYWwgYXBwZWFyYW5jZSwgaW4gZ2VuZXJhbCwgaXMgZ2l2ZW4gYnkgaGlzIHN0YXR1ZXM7IGJ1dCB0aGUgZ2xlYW0gb2YgaGlzIGdyYXkgZXllcywgd2hpY2ggd2FzIHRlcnJpYmx5IHNoYXJwIGFuZCBwb3dlcmZ1bCwgd2FzIHJlbmRlcmVkIGV2ZW4gbW9yZSBmZWFyZnVsIGJ5IHRoZSBjb21wbGV4aW9uIG9mIGhpcyBmYWNlLiBUaGlzIHdhcyBjb3ZlcmVkIHdpdGggY29hcnNlIGJsb3RjaGVzIG9mIHJlZCwgaW50ZXJzcGVyc2VkIHdpdGggd2hpdGUuIEZvciB0aGlzIHJlYXNvbiwgdGhleSBzYXksIGhpcyBzdXJuYW1lIHdhcyBnaXZlbiBoaW0gYmVjYXVzZSBvZiBoaXMgY29tcGxleGlvbiwgYW5kIGl0IHdhcyBpbiBhbGx1c2lvbiB0byB0aGlzIHRoYXQgYSBzY3Vycmlsb3VzIGplc3RlciBhdCBBdGhlbnMgbWFkZSB0aGUgdmVyc2U6W21kYXNoIF0KCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgogICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPltsZHF1byBdU3VsbGEgaXMgYSBtdWxiZXJyeSBzcHJpbmtsZWQgbydlciB3aXRoIG1lYWwuW3JkcXVvIF08L2w+CiAgICAgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+W2xkcXVvIF1TdWxsYSBpcyBhIG11bGJlcnJ5IHNwcmlua2xlZCBvJ2VyIHdpdGggbWVhbC5bcmRxdW8gXTwvbD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJTm9yIGlzIGl0IG91dCBvZiBwbGFjZSB0byBtZW50aW9uIHN1Y2ggdGVzdGltb25pZXMgaW4gdGhlIGNhc2Ugb2YgYSBtYW4gc2FpZCB0byBoYXZlIGJlZW4gYnkgbmF0dXJlIHNvIGZvbmQgb2YgcmFpbGxlcnksIHRoYXQgd2hlbiBoZSB3YXMgc3RpbGwgeW91bmcgYW5kIG9ic2N1cmUgaGUgc3BlbnQgbXVjaCB0aW1lIHdpdGggYWN0b3JzIGFuZCBidWZmb29ucyBhbmQgc2hhcmVkIHRoZWlyIGRpc3NvbHV0ZSBsaWZlOyBhbmQgd2hlbiBoZSBoYWQgbWFkZSBoaW1zZWxmIHN1cHJlbWUgbWFzdGVyLCBoZSB3b3VsZCBkYWlseSBhc3NlbWJsZSB0aGUgbW9zdCByZWNrbGVzcyBzdGFnZSBhbmQgdGhlYXRyZSBmb2xrIHRvIGRyaW5rIGFuZCBiYW5keSBqZXN0cyB3aXRoIHRoZW0sIGFsdGhvdWdoIG1lbiB0aG91Z2h0IHRoYXQgaGUgZGlzZ3JhY2VkIGhpcyB5ZWFycywgYW5kIGFsdGhvdWdoIGhlIG5vdCBvbmx5IGRpc2hvbm91cmVkIGhpcyBoaWdoIG9mZmljZSwgYnV0IG5lZ2xlY3RlZCBtdWNoIHRoYXQgcmVxdWlyZWQgYXR0ZW50aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIFN1bGxhIHdhcyBvbmNlIGF0IHRhYmxlLCBoZSByZWZ1c2VkIHRvIGJlIHNlcmlvdXMgYXQgYWxsLCBidXQsIGFsdGhvdWdoIGF0IG90aGVyIHRpbWVzIGhlIHdhcyBhIG1hbiBvZiBidXNpbmVzcyBhbmQgd29yZSBhbiBhdXN0ZXJlIGxvb2ssIGhlIHVuZGVyd2VudCBhIGNvbXBsZXRlIGNoYW5nZSBhcyBzb29uIGFzIGhlIGJldG9vayBoaW1zZWxmIHRvIGdvb2QtZmVsbG93c2hpcCBhbmQgZHJpbmtpbmcsIHNvIHRoYXQgY29taWMgc2luZ2VycyBhbmQgZGFuY2VycyBmb3VuZCBoaW0gYW55dGhpbmcgYnV0IGZlcm9jaW91cywgYW5kIHJlYWR5IHRvIGxpc3RlbiBhbmQgeWllbGQgdG8gZXZlcnkgcmVxdWVzdC4gSXQgd2FzIHRoaXMgbGF4aXR5LCBhcyBpdCBzZWVtcywgd2hpY2ggcHJvZHVjZWQgaW4gaGltIGEgZGlzZWFzZWQgcHJvcGVuc2l0eSB0byBhbW9yb3VzIGluZHVsZ2VuY2UgYW5kIGFuIHVucmVzdHJhaW5lZCB2b2x1cHR1b3VzbmVzcywgZnJvbSB3aGljaCBoZSBkaWQgbm90IHJlZnJhaW4gZXZlbiBpbiBoaXMgb2xkIGFnZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBjb250aW51ZWQgaGlzIHlvdXRoZnVsIGxvdmUgZm9yIE1ldHJvYml1cywgYW4gYWN0b3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2Vuc2Ugb2YgdGhlIG9ic2N1cmUgR3JlZWsgaXMgY2xlYXIgZnJvbSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAzNi4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4eHZpLiAxPC9iaWJsPiAKICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5maW4uPC9lbXBoPiBDYXBwcyBzdWdnZXN0cyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvaHPgiAuIC4gLiAuIOG9pM69LjwvZm9yZWlnbj4KICAgICAgICAgICAgPC9ub3RlPiBIZSBhbHNvIGhhZCB0aGUgZm9sbG93aW5nIGV4cGVyaWVuY2UuIEhlIGJlZ2FuIGJ5IGxvdmluZyBhIGNvbW1vbiBidXQgd2VhbHRoeSB3b21hbiwgTmljb3BvbGlzIGJ5IG5hbWUsIGFuZCBzdWNoIHdhcyB0aGUgY2hhcm0gb2YgaGlzIGludGltYWN5IGFuZCB5b3V0aGZ1bCBncmFjZSB0aGF0IGluIHRoZSBlbmQgaGUgd2FzIGJlbG92ZWQgYnkgaGVyLCBhbmQgd2FzIGxlZnQgaGVyIGhlaXIgd2hlbiBzaGUgZGllZC4gSGUgYWxzbyBpbmhlcml0ZWQgdGhlIHByb3BlcnR5IG9mIGhpcyBzdGVwLW1vdGhlciwgd2hvIGxvdmVkIGhpbSBhcyBoZXIgb3duIHNvbi4gQnkgdGhlc2UgbWVhbnMgaGUgYmVjYW1lIG1vZGVyYXRlbHkgd2VsbCBvZmYuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDM2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmkuIDE8L2JpYmw+IAogICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmZpbi48L2VtcGg+IENhcHBzIHN1Z2dlc3RzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9oc+CIC4gLiAuIC4g4b2kzr0uPC9mb3JlaWduPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBiZWVuIGFwcG9pbnRlZCBxdWFlc3RvciB0byBNYXJpdXMgaW4gaGlzIGZpcnN0IGNvbnN1bHNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTA3IEIuQy48L25vdGU+IGhlIHNhaWxlZCB3aXRoIGhpbSB0byBMaWJ5YSwgdG8gbWFrZSB3YXIgdXBvbiBKdWd1cnRoYS4gSGUgd2FzIHB1dCBpbiBjaGFyZ2Ugb2YgdGhlIGNhbXAsIGFuZCB3b24gZ3JlYXQgY3JlZGl0IGZvciBoaW1zZWxmLCBlc3BlY2lhbGx5IGJ5IGltcHJvdmluZyBhIGZhdm91cmFibGUgb3Bwb3J0dW5pdHkgYW5kIG1ha2luZyBhIGZyaWVuZCBvZiBCb2NjaHVzLCB0aGUga2luZyBvZiBOdW1pZGlhLiBGb3IgaGUgaG9zcGl0YWJseSBlbnRlcnRhaW5lZCBhbWJhc3NhZG9ycyBvZiB0aGUga2luZywgd2hvIGhhZCBlc2NhcGVkIGZyb20gTnVtaWRpYW4gcm9iYmVycywgYW5kIHNlbnQgdGhlbSBvbiB0aGVpciB3YXkgd2l0aCBnaWZ0cyBhbmQgYSBzYWZlIGVzY29ydC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEJvY2NodXMgaGFkIGZvciBhIGxvbmcgdGltZSBoYXRlZCBhbmQgZmVhcmVkIGhpcyBzb24taW4tbGF3LCBKdWd1cnRoYSwgd2hvIGhhZCBiZWVuIGRlZmVhdGVkIGFuZCBoYWQgZmxlZCB0byBoaW0gZm9yIHNhZmV0eSwgYW5kIHdhcyB0aGVuIHBsb3R0aW5nIGFnYWluc3QgaGltLiBIZSB0aGVyZWZvcmUgaW52aXRlZCBTdWxsYSB0byBjb21lIHRvIGhpbSwgd2lzaGluZyB0byBoYXZlIHRoZSBzZWl6dXJlIGFuZCBzdXJyZW5kZXIgb2YgSnVndXJ0aGEgZWZmZWN0ZWQgdGhyb3VnaCBTdWxsYSByYXRoZXIgdGhhbiB0aHJvdWdoIGhpbXNlbGYuIFN1bGxhIGltcGFydGVkIHRoZSBtYXR0ZXIgdG8gTWFyaXVzLCBhbmQgdGFraW5nIHdpdGggaGltIGEgZmV3IHNvbGRpZXJzLCB1bmRlcndlbnQgdGhlIGdyZWF0ZXN0IHBlcmlsOyBoZSBwdXQgZmFpdGggaW4gYSBCYXJiYXJpYW4sIGFuZCBvbmUgd2hvIHdhcyBmYWl0aGxlc3MgdG93YXJkcyBoaXMgb3duIHJlbGF0aW9ucywgYW5kIHRvIHNlY3VyZSBoaXMgc3VycmVuZGVyIG9mIGFub3RoZXIsIHBsYWNlZCBoaW1zZWxmIGluIGhpcyBoYW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgQm9jY2h1cywgbm93IHRoYXQgaGUgaGFkIGJvdGggaW4gaGlzIHBvd2VyLCBhbmQgaGFkIGxhaWQgaGltc2VsZiB1bmRlciB0aGUgbmVjZXNzaXR5IG9mIHByb3ZpbmcgZmFsc2UgdG8gb25lIG9yIHRoZSBvdGhlciwgYWx0aG91Z2ggaGUgdmFjaWxsYXRlZCBsb25nLCBmaW5hbGx5IGRlY2lkZWQgdXBvbiBoaXMgb3JpZ2luYWwgYmV0cmF5YWwsIGFuZCBoYW5kZWQgSnVndXJ0aGEgb3ZlciB0byBTdWxsYS4gSXQgaXMgdHJ1ZSB0aGF0IHRoZSBvbmUgd2hvIGNlbGVicmF0ZWQgYSB0cml1bXBoIGZvciB0aGlzIHdhcyBNYXJpdXMsIGJ1dCB0aG9zZSB3aG8gZW52aWVkIGhpbSBhdHRyaWJ1dGVkIHRoZSBnbG9yeSBvZiB0aGUgc3VjY2VzcyB0byBTdWxsYSwgYW5kIHRoaXMgc2VjcmV0bHkgYW5ub3llZCBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgU3VsbGEgaGltc2VsZiB3YXMgbmF0dXJhbGx5IHZhaW5nbG9yaW91cywgYW5kIG5vdyB0aGF0IGhlIGhhZCBmb3IgdGhlIGZpcnN0IHRpbWUgZW1lcmdlZCBmcm9tIGhpcyBsb3dseSBhbmQgb2JzY3VyZSBjb25kaXRpb24gYW5kIGJlY29tZSBvZiBzb21lIGFjY291bnQgYW1vbmcgaGlzIGNvdW50cnltZW4sIGFuZCB3YXMgZW5qb3lpbmcgYSB0YXN0ZSBvZiBob25vdXIsIGhlIHdhcyBhcnJvZ2FudCBlbm91Z2ggdG8gaGF2ZSBhIHJlcHJlc2VudGF0aW9uIG9mIGhpcyBleHBsb2l0IGVuZ3JhdmVkIG9uIGEgc2VhbC1yaW5nIHdoaWNoIGhlIHdvcmUsIGFuZCBjb250aW51ZWQgdG8gdXNlIGl0IGV2ZXIgYWZ0ZXIuIFRoZSBkZXZpY2Ugd2FzLCBCb2NjaHVzIGRlbGl2ZXJpbmcsIGFuZCBTdWxsYSByZWNlaXZpbmcsIEp1Z3VydGhhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgYmVlbiBhcHBvaW50ZWQgcXVhZXN0b3IgdG8gTWFyaXVzIGluIGhpcyBmaXJzdCBjb25zdWxzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTA3IEIuQy48L25vdGU+IGhlIHNhaWxlZCB3aXRoIGhpbSB0byBMaWJ5YSwgdG8gbWFrZSB3YXIgdXBvbiBKdWd1cnRoYS4gSGUgd2FzIHB1dCBpbiBjaGFyZ2Ugb2YgdGhlIGNhbXAsIGFuZCB3b24gZ3JlYXQgY3JlZGl0IGZvciBoaW1zZWxmLCBlc3BlY2lhbGx5IGJ5IGltcHJvdmluZyBhIGZhdm91cmFibGUgb3Bwb3J0dW5pdHkgYW5kIG1ha2luZyBhIGZyaWVuZCBvZiBCb2NjaHVzLCB0aGUga2luZyBvZiBOdW1pZGlhLiBGb3IgaGUgaG9zcGl0YWJseSBlbnRlcnRhaW5lZCBhbWJhc3NhZG9ycyBvZiB0aGUga2luZywgd2hvIGhhZCBlc2NhcGVkIGZyb20gTnVtaWRpYW4gcm9iYmVycywgYW5kIHNlbnQgdGhlbSBvbiB0aGVpciB3YXkgd2l0aCBnaWZ0cyBhbmQgYSBzYWZlIGVzY29ydC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBCb2NjaHVzIGhhZCBmb3IgYSBsb25nIHRpbWUgaGF0ZWQgYW5kIGZlYXJlZCBoaXMgc29uLWluLWxhdywgSnVndXJ0aGEsIHdobyBoYWQgYmVlbiBkZWZlYXRlZCBhbmQgaGFkIGZsZWQgdG8gaGltIGZvciBzYWZldHksIGFuZCB3YXMgdGhlbiBwbG90dGluZyBhZ2FpbnN0IGhpbS4gSGUgdGhlcmVmb3JlIGludml0ZWQgU3VsbGEgdG8gY29tZSB0byBoaW0sIHdpc2hpbmcgdG8gaGF2ZSB0aGUgc2VpenVyZSBhbmQgc3VycmVuZGVyIG9mIEp1Z3VydGhhIGVmZmVjdGVkIHRocm91Z2ggU3VsbGEgcmF0aGVyIHRoYW4gdGhyb3VnaCBoaW1zZWxmLiBTdWxsYSBpbXBhcnRlZCB0aGUgbWF0dGVyIHRvIE1hcml1cywgYW5kIHRha2luZyB3aXRoIGhpbSBhIGZldyBzb2xkaWVycywgdW5kZXJ3ZW50IHRoZSBncmVhdGVzdCBwZXJpbDsgaGUgcHV0IGZhaXRoIGluIGEgQmFyYmFyaWFuLCBhbmQgb25lIHdobyB3YXMgZmFpdGhsZXNzIHRvd2FyZHMgaGlzIG93biByZWxhdGlvbnMsIGFuZCB0byBzZWN1cmUgaGlzIHN1cnJlbmRlciBvZiBhbm90aGVyLCBwbGFjZWQgaGltc2VsZiBpbiBoaXMgaGFuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEJvY2NodXMsIG5vdyB0aGF0IGhlIGhhZCBib3RoIGluIGhpcyBwb3dlciwgYW5kIGhhZCBsYWlkIGhpbXNlbGYgdW5kZXIgdGhlIG5lY2Vzc2l0eSBvZiBwcm92aW5nIGZhbHNlIHRvIG9uZSBvciB0aGUgb3RoZXIsIGFsdGhvdWdoIGhlIHZhY2lsbGF0ZWQgbG9uZywgZmluYWxseSBkZWNpZGVkIHVwb24gaGlzIG9yaWdpbmFsIGJldHJheWFsLCBhbmQgaGFuZGVkIEp1Z3VydGhhIG92ZXIgdG8gU3VsbGEuIEl0IGlzIHRydWUgdGhhdCB0aGUgb25lIHdobyBjZWxlYnJhdGVkIGEgdHJpdW1waCBmb3IgdGhpcyB3YXMgTWFyaXVzLCBidXQgdGhvc2Ugd2hvIGVudmllZCBoaW0gYXR0cmlidXRlZCB0aGUgZ2xvcnkgb2YgdGhlIHN1Y2Nlc3MgdG8gU3VsbGEsIGFuZCB0aGlzIHNlY3JldGx5IGFubm95ZWQgTWFyaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgU3VsbGEgaGltc2VsZiB3YXMgbmF0dXJhbGx5IHZhaW5nbG9yaW91cywgYW5kIG5vdyB0aGF0IGhlIGhhZCBmb3IgdGhlIGZpcnN0IHRpbWUgZW1lcmdlZCBmcm9tIGhpcyBsb3dseSBhbmQgb2JzY3VyZSBjb25kaXRpb24gYW5kIGJlY29tZSBvZiBzb21lIGFjY291bnQgYW1vbmcgaGlzIGNvdW50cnltZW4sIGFuZCB3YXMgZW5qb3lpbmcgYSB0YXN0ZSBvZiBob25vdXIsIGhlIHdhcyBhcnJvZ2FudCBlbm91Z2ggdG8gaGF2ZSBhIHJlcHJlc2VudGF0aW9uIG9mIGhpcyBleHBsb2l0IGVuZ3JhdmVkIG9uIGEgc2VhbC1yaW5nIHdoaWNoIGhlIHdvcmUsIGFuZCBjb250aW51ZWQgdG8gdXNlIGl0IGV2ZXIgYWZ0ZXIuIFRoZSBkZXZpY2Ugd2FzLCBCb2NjaHVzIGRlbGl2ZXJpbmcsIGFuZCBTdWxsYSByZWNlaXZpbmcsIEp1Z3VydGhhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIGNvdXJzZSB0aGlzIGRpc3RyZXNzZWQgTWFyaXVzOyBidXQgc2luY2UgaGUgY29uc2lkZXJlZCBTdWxsYSB0byBiZSBiZW5lYXRoIGhpcyBlbnZ5LCBoZSB1c2VkIGhpbSBpbiBoaXMgY2FtcGFpZ25zLCBkdXJpbmcgaGlzIHNlY29uZCBjb25zdWxzaGlwIGFzIGxlZ2F0ZSwgb3IgbGlldXRlbmFudCwgYW5kIGR1cmluZyBoaXMgdGhpcmQgYXMgbWlsaXRhcnkgdHJpYnVuZSwgYW5kIHRocm91Z2ggaGlzIGFnZW5jeSBwZXJmb3JtZWQgbWFueSBzdWNjZXNzZnVsIHNlcnZpY2VzLiBGb3IgaW5zdGFuY2UsIGFzIGxlZ2F0ZSwgU3VsbGEgY2FwdHVyZWQgQ29waWxsdXMsIGNoaWVmdGFpbiBvZiB0aGUgVGVjdG9zYWdlczsgYW5kIGFzIHRyaWJ1bmUsIGhlIHBlcnN1YWRlZCB0aGUgZ3JlYXQgYW5kIHBvcHVsb3VzIG5hdGlvbiBvZiB0aGUgTWFyc2kgdG8gYmVjb21lIGZyaWVuZHMgYW5kIGFsbGllcyBvZiBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcGVyY2VpdmluZyB0aGF0IE1hcml1cyB3YXMgdmV4ZWQgd2l0aCBoaW0gZm9yIHRoZXNlIHN1Y2Nlc3NlcywgYW5kIHRoYXQgaGUgd2FzIG5vIGxvbmdlciBnbGFkIHRvIGdpdmUgaGltIG9wcG9ydHVuaXRpZXMgZm9yIGFjdGlvbiwgYnV0IG9wcG9zZWQgaGlzIGFkdmFuY2VtZW50LCBoZSBhdHRhY2hlZCBoaW1zZWxmIHRvIENhdHVsdXMsIHRoZSBjb2xsZWFndWUgb2YgTWFyaXVzIGluIHRoZSBjb25zdWxzaGlwLCBhIHdvcnRoeSBtYW4sIGJ1dCB0b28gc2x1Z2dpc2ggZm9yIGFyZHVvdXMgY29udGVzdHMuIEJ5IGhpbSBoZSB3YXMgZW50cnVzdGVkIHdpdGggdGhlIGxlYWRpbmcgYW5kIG1vc3QgaW1wb3J0YW50IGVudGVycHJpc2VzLCBhbmQgcm9zZSB0byBwb3dlciBhbmQgZmFtZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbm90IG9ubHkgc3ViZHVlZCBpbiB3YXIgYSBsYXJnZSBwYXJ0IG9mIHRoZSBCYXJiYXJpYW5zIG9mIHRoZSBBbHBzLCBidXQgd2hlbiBwcm92aXNpb25zIHJhbiBsb3csIGhlIHVuZGVydG9vayB0aGUgdGFzayBvZiBmdXJuaXNoaW5nIHRoZW0sIGFuZCBtYWRlIHRoZW0gc28gYWJ1bmRhbnQgdGhhdCB0aGUgc29sZGllcnMgb2YgQ2F0dWx1cyBsaXZlZCBpbiBwbGVudHksIGFuZCBoYWQgc29tZSB0byBzcGFyZSBmb3IgdGhvc2Ugb2YgTWFyaXVzLiBBdCB0aGlzLCBhcyBTdWxsYSBoaW1zZWxmIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gaGlzIDx0aXRsZT5NZW1vaXJzLjwvdGl0bGU+IENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNi41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBNYXJpdXMgd2FzIGdyZWF0bHkgZGlzdHJlc3NlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U28gc2xpZ2h0IGFuZCBwdWVyaWxlIHdlcmUgdGhlIGZpcnN0IGZvdW5kYXRpb25zIGFuZCBvY2Nhc2lvbnMgb2YgdGhhdCBoYXRyZWQgYmV0d2VlbiB0aGVtLCB3aGljaCBhZnRlcndhcmRzIGxlZCB0aGVtIHRocm91Z2ggY2l2aWwgYmxvb2RzaGVkIGFuZCBpcnJlcGFyYWJsZSBkaXNjb3JkcyB0byB0eXJhbm55IGFuZCB0aGUgY29uZnVzaW9uIG9mIHRoZSB3aG9sZSBzdGF0ZS4gVGhpcyBwcm92ZWQgdGhhdCBFdXJpcGlkZXMgd2FzIGEgd2lzZSBtYW4sIGFuZCBhY3F1YWludGVkIHdpdGggdGhlIGRpc3RlbXBlcnMgb2YgY2l2aWwgZ292ZXJubWVudCwgd2hlbiBoZSBleGhvcnRlZCBtZW4gdG8gYmV3YXJlIG9mIGFtYml0aW9uIGFzIGEgZGVpdHkgbW9zdCBpbmp1cmlvdXMgYW5kIGZhdGFsIHRvIGl0cyB2b3Rhcmllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gUGhvZW4uIDUzMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5QaG9lbmlzc2FlPC90aXRsZT4sIDUzMiBmZi48L2JpYmw+IChLaXJjaGhvZmYpLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UgdGhpcyBkaXN0cmVzc2VkIE1hcml1czsgYnV0IHNpbmNlIGhlIGNvbnNpZGVyZWQgU3VsbGEgdG8gYmUgYmVuZWF0aCBoaXMgZW52eSwgaGUgdXNlZCBoaW0gaW4gaGlzIGNhbXBhaWducywgZHVyaW5nIGhpcyBzZWNvbmQgY29uc3Vsc2hpcCBhcyBsZWdhdGUsIG9yIGxpZXV0ZW5hbnQsIGFuZCBkdXJpbmcgaGlzIHRoaXJkIGFzIG1pbGl0YXJ5IHRyaWJ1bmUsIGFuZCB0aHJvdWdoIGhpcyBhZ2VuY3kgcGVyZm9ybWVkIG1hbnkgc3VjY2Vzc2Z1bCBzZXJ2aWNlcy4gRm9yIGluc3RhbmNlLCBhcyBsZWdhdGUsIFN1bGxhIGNhcHR1cmVkIENvcGlsbHVzLCBjaGllZnRhaW4gb2YgdGhlIFRlY3Rvc2FnZXM7IGFuZCBhcyB0cmlidW5lLCBoZSBwZXJzdWFkZWQgdGhlIGdyZWF0IGFuZCBwb3B1bG91cyBuYXRpb24gb2YgdGhlIE1hcnNpIHRvIGJlY29tZSBmcmllbmRzIGFuZCBhbGxpZXMgb2YgUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwZXJjZWl2aW5nIHRoYXQgTWFyaXVzIHdhcyB2ZXhlZCB3aXRoIGhpbSBmb3IgdGhlc2Ugc3VjY2Vzc2VzLCBhbmQgdGhhdCBoZSB3YXMgbm8gbG9uZ2VyIGdsYWQgdG8gZ2l2ZSBoaW0gb3Bwb3J0dW5pdGllcyBmb3IgYWN0aW9uLCBidXQgb3Bwb3NlZCBoaXMgYWR2YW5jZW1lbnQsIGhlIGF0dGFjaGVkIGhpbXNlbGYgdG8gQ2F0dWx1cywgdGhlIGNvbGxlYWd1ZSBvZiBNYXJpdXMgaW4gdGhlIGNvbnN1bHNoaXAsIGEgd29ydGh5IG1hbiwgYnV0IHRvbyBzbHVnZ2lzaCBmb3IgYXJkdW91cyBjb250ZXN0cy4gQnkgaGltIGhlIHdhcyBlbnRydXN0ZWQgd2l0aCB0aGUgbGVhZGluZyBhbmQgbW9zdCBpbXBvcnRhbnQgZW50ZXJwcmlzZXMsIGFuZCByb3NlIHRvIHBvd2VyIGFuZCBmYW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIG5vdCBvbmx5IHN1YmR1ZWQgaW4gd2FyIGEgbGFyZ2UgcGFydCBvZiB0aGUgQmFyYmFyaWFucyBvZiB0aGUgQWxwcywgYnV0IHdoZW4gcHJvdmlzaW9ucyByYW4gbG93LCBoZSB1bmRlcnRvb2sgdGhlIHRhc2sgb2YgZnVybmlzaGluZyB0aGVtLCBhbmQgbWFkZSB0aGVtIHNvIGFidW5kYW50IHRoYXQgdGhlIHNvbGRpZXJzIG9mIENhdHVsdXMgbGl2ZWQgaW4gcGxlbnR5LCBhbmQgaGFkIHNvbWUgdG8gc3BhcmUgZm9yIHRob3NlIG9mIE1hcml1cy4gQXQgdGhpcywgYXMgU3VsbGEgaGltc2VsZiBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gaGlzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lbW9pcnMuPC90aXRsZT4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gTWFyaXVzIHdhcyBncmVhdGx5IGRpc3RyZXNzZWQuIAoJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVtb2lycy48L3RpdGxlPiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNi41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHNsaWdodCBhbmQgcHVlcmlsZSB3ZXJlIHRoZSBmaXJzdCBmb3VuZGF0aW9ucyBhbmQgb2NjYXNpb25zIG9mIHRoYXQgaGF0cmVkIGJldHdlZW4gdGhlbSwgd2hpY2ggYWZ0ZXJ3YXJkcyBsZWQgdGhlbSB0aHJvdWdoIGNpdmlsIGJsb29kc2hlZCBhbmQgaXJyZXBhcmFibGUgZGlzY29yZHMgdG8gdHlyYW5ueSBhbmQgdGhlIGNvbmZ1c2lvbiBvZiB0aGUgd2hvbGUgc3RhdGUuIFRoaXMgcHJvdmVkIHRoYXQgRXVyaXBpZGVzIHdhcyBhIHdpc2UgbWFuLCBhbmQgYWNxdWFpbnRlZCB3aXRoIHRoZSBkaXN0ZW1wZXJzIG9mIGNpdmlsIGdvdmVybm1lbnQsIHdoZW4gaGUgZXhob3J0ZWQgbWVuIHRvIGJld2FyZSBvZiBhbWJpdGlvbiBhcyBhIGRlaXR5IG1vc3QgaW5qdXJpb3VzIGFuZCBmYXRhbCB0byBpdHMgdm90YXJpZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBQaG9lbi4gNTMyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZW5pc3NhZTwvdGl0bGU+LCA1MzIgZmYuPC9iaWJsPiAoS2lyY2hob2ZmKS48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gUGhvZW4uIDUzMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBob2VuaXNzYWU8L3RpdGxlPiwgNTMyIGZmLjwvYmlibD4gKEtpcmNoaG9mZikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhvZW5pc3NhZTwvdGl0bGU+LCA1MzIgZmYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSBub3cgdGhvdWdodCB0aGF0IHRoZSByZXB1dGF0aW9uIHdoaWNoIGhlIGhhZCB3b24gaW4gd2FyIHdhcyBzdWZmaWNpZW50IHRvIGp1c3RpZnkgcG9saXRpY2FsIGFjdGl2aXRpZXMsIGFuZCB0aGVyZWZvcmUgYXQgb25jZSBleGNoYW5nZWQgbWlsaXRhcnkgc2VydmljZSBmb3IgcHVibGljIGxpZmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgcmV0dXJuZWQgdG8gUm9tZSBpbiAxMDEgQi5DLiwgYW5kIHdhcyBlbGVjdGVkIHByYWV0b3IgaW4gOTMgQi5DLjwvbm90ZT4gb2ZmZXJlZCBoaW1zZWxmIGFzIGEgY2FuZGlkYXRlIGZvciB0aGUgY2l0eSBwcmFldG9yc2hpcCwgYW5kIHdhcyBkZWZlYXRlZC4gVGhlIHJlc3BvbnNpYmlsaXR5IGZvciBoaXMgZGVmZWF0LCBob3dldmVyLCBiZSBsYXlzIHVwb24gdGhlIHBvcHVsYWNlLiBUaGV5IGtuZXcsIGhlIHNheXMsIGFib3V0IGhpcyBmcmllbmRzaGlwIHdpdGggQm9jY2h1cywgYW5kIGV4cGVjdGVkIHRoYXQgaWYgaGUgc2hvdWxkIGJlIG1hZGUgYWVkaWxlIGJlZm9yZSBoaXMgcHJhZXRvcnNoaXAsIGhlIHdvdWxkIHRyZWF0IHRoZW0gdG8gc3BsZW5kaWQgaHVudGluZyBzY2VuZXMgYW5kIGNvbWJhdHMgb2YgTGlieWFuIHdpbGQgYmVhc3RzLCBhbmQgdGhlcmVmb3JlIGFwcG9pbnRlZCBvdGhlcnMgdG8gdGhlIHByYWV0b3JzaGlwLCBpbiBvcmRlciB0byBmb3JjZSBoaW0gaW50byB0aGUgYWVkaWxlc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHN1YnNlcXVlbnQgZXZlbnRzIHdvdWxkIHNlZW0gdG8gc2hvdyB0aGF0IFN1bGxhIGRvZXMgbm90IGNvbmZlc3MgdGhlIHJlYWwgcmVhc29uIGZvciBoaXMgZmFpbHVyZS4gRm9yIGluIHRoZSBmb2xsb3dpbmcgeWVhciBoZSBvYnRhaW5lZCB0aGUgcHJhZXRvcnNoaXAsIHBhcnRseSBiZWNhdXNlIGhlIHdhcyBzdWJzZXJ2aWVudCB0byB0aGUgcGVvcGxlLCBhbmQgcGFydGx5IGJlY2F1c2UgaGUgdXNlZCBtb25leSB0byB3aW4gdGhlaXIgc3VwcG9ydC4gQW5kIHNvIGl0IGhhcHBlbmVkIHRoYXQsIGR1cmluZyBoaXMgcHJhZXRvcnNoaXAsIHdoZW4gaGUgYW5ncmlseSB0b2xkIENhZXNhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCB0aGUgZGljdGF0b3IsIHdobyB3YXMgb25seSBzZXZlbiB5ZWFycyBvbGQgYXQgdGhpcyB0aW1lLjwvbm90ZT4gdGhhdCBoZSB3b3VsZCB1c2UgaGlzIG93biBhdXRob3JpdHkgYWdhaW5zdCBoaW0sIENhZXNhciBsYXVnaGVkIGFuZCBzYWlkOiBbbGRxdW8gXVlvdSBkbyB3ZWxsIHRvIGNvbnNpZGVyIHRoZSBvZmZpY2UgeW91ciBvd24sIGZvciB5b3UgYm91Z2h0IGl0LltyZHF1byBdCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSBub3cgdGhvdWdodCB0aGF0IHRoZSByZXB1dGF0aW9uIHdoaWNoIGhlIGhhZCB3b24gaW4gd2FyIHdhcyBzdWZmaWNpZW50IHRvIGp1c3RpZnkgcG9saXRpY2FsIGFjdGl2aXRpZXMsIGFuZCB0aGVyZWZvcmUgYXQgb25jZSBleGNoYW5nZWQgbWlsaXRhcnkgc2VydmljZSBmb3IgcHVibGljIGxpZmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSByZXR1cm5lZCB0byBSb21lIGluIDEwMSBCLkMuLCBhbmQgd2FzIGVsZWN0ZWQgcHJhZXRvciBpbiA5MyBCLkMuPC9ub3RlPiBvZmZlcmVkIGhpbXNlbGYgYXMgYSBjYW5kaWRhdGUgZm9yIHRoZSBjaXR5IHByYWV0b3JzaGlwLCBhbmQgd2FzIGRlZmVhdGVkLiBUaGUgcmVzcG9uc2liaWxpdHkgZm9yIGhpcyBkZWZlYXQsIGhvd2V2ZXIsIGJlIGxheXMgdXBvbiB0aGUgcG9wdWxhY2UuIFRoZXkga25ldywgaGUgc2F5cywgYWJvdXQgaGlzIGZyaWVuZHNoaXAgd2l0aCBCb2NjaHVzLCBhbmQgZXhwZWN0ZWQgdGhhdCBpZiBoZSBzaG91bGQgYmUgbWFkZSBhZWRpbGUgYmVmb3JlIGhpcyBwcmFldG9yc2hpcCwgaGUgd291bGQgdHJlYXQgdGhlbSB0byBzcGxlbmRpZCBodW50aW5nIHNjZW5lcyBhbmQgY29tYmF0cyBvZiBMaWJ5YW4gd2lsZCBiZWFzdHMsIGFuZCB0aGVyZWZvcmUgYXBwb2ludGVkIG90aGVycyB0byB0aGUgcHJhZXRvcnNoaXAsIGluIG9yZGVyIHRvIGZvcmNlIGhpbSBpbnRvIHRoZSBhZWRpbGVzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdWJzZXF1ZW50IGV2ZW50cyB3b3VsZCBzZWVtIHRvIHNob3cgdGhhdCBTdWxsYSBkb2VzIG5vdCBjb25mZXNzIHRoZSByZWFsIHJlYXNvbiBmb3IgaGlzIGZhaWx1cmUuIEZvciBpbiB0aGUgZm9sbG93aW5nIHllYXIgaGUgb2J0YWluZWQgdGhlIHByYWV0b3JzaGlwLCBwYXJ0bHkgYmVjYXVzZSBoZSB3YXMgc3Vic2VydmllbnQgdG8gdGhlIHBlb3BsZSwgYW5kIHBhcnRseSBiZWNhdXNlIGhlIHVzZWQgbW9uZXkgdG8gd2luIHRoZWlyIHN1cHBvcnQuIEFuZCBzbyBpdCBoYXBwZW5lZCB0aGF0LCBkdXJpbmcgaGlzIHByYWV0b3JzaGlwLCB3aGVuIGhlIGFuZ3JpbHkgdG9sZCBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdCB0aGUgZGljdGF0b3IsIHdobyB3YXMgb25seSBzZXZlbiB5ZWFycyBvbGQgYXQgdGhpcyB0aW1lLjwvbm90ZT4gdGhhdCBoZSB3b3VsZCB1c2UgaGlzIG93biBhdXRob3JpdHkgYWdhaW5zdCBoaW0sIENhZXNhciBsYXVnaGVkIGFuZCBzYWlkOiBbbGRxdW8gXVlvdSBkbyB3ZWxsIHRvIGNvbnNpZGVyIHRoZSBvZmZpY2UgeW91ciBvd24sIGZvciB5b3UgYm91Z2h0IGl0LltyZHF1byBdCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBwcmFldG9yc2hpcCwgaGUgd2FzIHNlbnQgb3V0IHRvIENhcHBhZG9jaWEsIG9zdGVuc2libHkgdG8gcmVpbnN0YXRlIEFyaW9iYXJ6YW5lcywgYnV0IHJlYWxseSB0byBjaGVjayB0aGUgcmVzdGxlc3MgYWN0aXZpdGllcyBvZiBNaXRocmlkYXRlcywgd2hvIHdhcyBhZGRpbmcgdG8gaGlzIGRvbWluaW9uIGFuZCBwb3dlciBmdWxseSBhcyBtdWNoIGFzIGhlIGhhZCBpbmhlcml0ZWQuIEFjY29yZGluZ2x5LCBoZSB0b29rIG91dCB3aXRoIGhpbSBubyBsYXJnZSBmb3JjZSBvZiBoaXMgb3duLCBidXQgbWFkZSB1c2Ugb2YgdGhlIGFsbGllcywgd2hvbSBoZSBmb3VuZCBlYWdlciB0byBzZXJ2ZSBoaW0sIGFuZCBhZnRlciBzbGF5aW5nIG1hbnkgb2YgdGhlIENhcHBhZG9jaWFucyB0aGVtc2VsdmVzLCBhbmQgeWV0IG1vcmUgb2YgdGhlIEFybWVuaWFucyB3aG8gY2FtZSB0byB0aGVpciBhaWQsIGhlIGRyb3ZlIG91dCBHb3JkaXVzLCBhbmQgbWFkZSBBcmlvYmFyemFuZXMga2luZyBhZ2Fpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBwcmFldG9yc2hpcCwgaGUgd2FzIHNlbnQgb3V0IHRvIENhcHBhZG9jaWEsIG9zdGVuc2libHkgdG8gcmVpbnN0YXRlIEFyaW9iYXJ6YW5lcywgYnV0IHJlYWxseSB0byBjaGVjayB0aGUgcmVzdGxlc3MgYWN0aXZpdGllcyBvZiBNaXRocmlkYXRlcywgd2hvIHdhcyBhZGRpbmcgdG8gaGlzIGRvbWluaW9uIGFuZCBwb3dlciBmdWxseSBhcyBtdWNoIGFzIGhlIGhhZCBpbmhlcml0ZWQuIEFjY29yZGluZ2x5LCBoZSB0b29rIG91dCB3aXRoIGhpbSBubyBsYXJnZSBmb3JjZSBvZiBoaXMgb3duLCBidXQgbWFkZSB1c2Ugb2YgdGhlIGFsbGllcywgd2hvbSBoZSBmb3VuZCBlYWdlciB0byBzZXJ2ZSBoaW0sIGFuZCBhZnRlciBzbGF5aW5nIG1hbnkgb2YgdGhlIENhcHBhZG9jaWFucyB0aGVtc2VsdmVzLCBhbmQgeWV0IG1vcmUgb2YgdGhlIEFybWVuaWFucyB3aG8gY2FtZSB0byB0aGVpciBhaWQsIGhlIGRyb3ZlIG91dCBHb3JkaXVzLCBhbmQgbWFkZSBBcmlvYmFyemFuZXMga2luZyBhZ2Fpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgbGluZ2VyZWQgb24gdGhlIGJhbmtzIG9mIHRoZSBFdXBocmF0ZXMsIGhlIHJlY2VpdmVkIGEgdmlzaXQgZnJvbSBPcm9iYXp1cywgYSBQYXJ0aGlhbiwgd2hvIGNhbWUgYXMgYW4gYW1iYXNzYWRvciBmcm9tIGtpbmcgQXJzYWNlcywgYWx0aG91Z2ggdXAgdG8gdGhpcyB0aW1lIHRoZSB0d28gbmF0aW9ucyBoYWQgaGVsZCBubyBpbnRlcmNvdXJzZSB3aXRoIG9uZSBhbm90aGVyLiBUaGlzIGFsc28gaXMgdGhvdWdodCB0byBoYXZlIGJlZW4gcGFydCBvZiBTdWxsYSdzIGdyZWF0IGdvb2QgZm9ydHVuZSwgdGhhdCBoZSBzaG91bGQgYmUgdGhlIGZpcnN0IFJvbWFuIHdpdGggd2hvbSB0aGUgUGFydGhpYW5zIGhlbGQgY29uZmVyZW5jZSB3aGVuIHRoZXkgd2FudGVkIGFsbGlhbmNlIGFuZCBmcmllbmRzaGlwLiAgT24gdGhpcyBvY2Nhc2lvbiwgdG9vLCBpdCBpcyBzYWlkIHRoYXQgaGUgb3JkZXJlZCB0aHJlZSBjaGFpcnMgdG8gYmUgc2V0LCBvbmUgZm9yIEFyaW9iYXJ6YW5lcywgb25lIGZvciBPcm9iYXp1cywgYW5kIG9uZSBmb3IgaGltc2VsZiwgYW5kIHRoYXQgaGUgc2F0IGJldHdlZW4gdGhlbSBib3RoIGFuZCBnYXZlIHRoZW0gYXVkaWVuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHRoZSBraW5nIG9mIFBhcnRoaWEgYWZ0ZXJ3YXJkcyBwdXQgT3JvYmF6dXMgdG8gZGVhdGg7IGFuZCB3aGlsZSBzb21lIHBlb3BsZSBjb21tZW5kZWQgU3VsbGEgZm9yIHRoZSBhaXJzIHdoaWNoIGhlIGFzc3VtZWQgd2l0aCB0aGUgQmFyYmFyaWFucywgb3RoZXJzIGFjY3VzZWQgaGltIG9mIHZ1bGdhcml0eSBhbmQgaWxsLXRpbWVkIGFycm9nYW5jZS4gSXQgaXMgYWxzbyByZWNvcmRlZCB0aGF0IGEgY2VydGFpbiBtYW4gaW4gdGhlIHJldGludWUgb2YgT3JvYmF6dXMsIGEgQ2hhbGRhZWFuLCBhZnRlciBsb29raW5nIFN1bGxhIGludGVudGx5IGluIHRoZSBmYWNlLCBhbmQgc3R1ZHlpbmcgY2FyZWZ1bGx5IHRoZSBtb3ZlbWVudHMgb2YgaGlzIG1pbmQgYW5kIGJvZHksIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbnZlc3RpZ2F0aW5nIGhpcyBuYXR1cmUgYWNjb3JkaW5nIHRvIHRoZSBwcmluY2lwbGVzIG9mIGhpcyBwZWN1bGlhciBhcnQsIGRlY2xhcmVkIHRoYXQgdGhpcyBtYW4gbXVzdCBvZiBuZWNlc3NpdHkgYmVjb21lIHRoZSBncmVhdGVzdCBpbiB0aGUgd29ybGQsIGFuZCB0aGF0IGV2ZW4gbm93IHRoZSB3b25kZXIgd2FzIHRoYXQgaGUgY29uc2VudGVkIG5vdCB0byBiZSBmaXJzdCBvZiBhbGwgbWVuLiBXaGVuIFN1bGxhIGNhbWUgYmFjayB0byBSb21lLCBob3dldmVyLCBDZW5zb3JpbnVzIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IGhpbSBmb3IgYnJpYmVyeSwgYWxsZWdpbmcgdGhhdCBoZSBoYWQgY29sbGVjdGVkIGxhcmdlIHN1bXMgb2YgbW9uZXkgaWxsZWdhbGx5IGZyb20gYSBmcmllbmRseSBhbmQgYWxsaWVkIGtpbmdkb20uIEhvd2V2ZXIsIENlbnNvcmludXMgZGlkIG5vdCBwdXQgaW4gYW4gYXBwZWFyYW5jZSBhdCB0aGUgdHJpYWwsIGJ1dCBkcm9wcGVkIGhpcyBpbXBlYWNobWVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIGxpbmdlcmVkIG9uIHRoZSBiYW5rcyBvZiB0aGUgRXVwaHJhdGVzLCBoZSByZWNlaXZlZCBhIHZpc2l0IGZyb20gT3JvYmF6dXMsIGEgUGFydGhpYW4sIHdobyBjYW1lIGFzIGFuIGFtYmFzc2Fkb3IgZnJvbSBraW5nIEFyc2FjZXMsIGFsdGhvdWdoIHVwIHRvIHRoaXMgdGltZSB0aGUgdHdvIG5hdGlvbnMgaGFkIGhlbGQgbm8gaW50ZXJjb3Vyc2Ugd2l0aCBvbmUgYW5vdGhlci4gVGhpcyBhbHNvIGlzIHRob3VnaHQgdG8gaGF2ZSBiZWVuIHBhcnQgb2YgU3VsbGEncyBncmVhdCBnb29kIGZvcnR1bmUsIHRoYXQgaGUgc2hvdWxkIGJlIHRoZSBmaXJzdCBSb21hbiB3aXRoIHdob20gdGhlIFBhcnRoaWFucyBoZWxkIGNvbmZlcmVuY2Ugd2hlbiB0aGV5IHdhbnRlZCBhbGxpYW5jZSBhbmQgZnJpZW5kc2hpcC4gIE9uIHRoaXMgb2NjYXNpb24sIHRvbywgaXQgaXMgc2FpZCB0aGF0IGhlIG9yZGVyZWQgdGhyZWUgY2hhaXJzIHRvIGJlIHNldCwgb25lIGZvciBBcmlvYmFyemFuZXMsIG9uZSBmb3IgT3JvYmF6dXMsIGFuZCBvbmUgZm9yIGhpbXNlbGYsIGFuZCB0aGF0IGhlIHNhdCBiZXR3ZWVuIHRoZW0gYm90aCBhbmQgZ2F2ZSB0aGVtIGF1ZGllbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHRoZSBraW5nIG9mIFBhcnRoaWEgYWZ0ZXJ3YXJkcyBwdXQgT3JvYmF6dXMgdG8gZGVhdGg7IGFuZCB3aGlsZSBzb21lIHBlb3BsZSBjb21tZW5kZWQgU3VsbGEgZm9yIHRoZSBhaXJzIHdoaWNoIGhlIGFzc3VtZWQgd2l0aCB0aGUgQmFyYmFyaWFucywgb3RoZXJzIGFjY3VzZWQgaGltIG9mIHZ1bGdhcml0eSBhbmQgaWxsLXRpbWVkIGFycm9nYW5jZS4gSXQgaXMgYWxzbyByZWNvcmRlZCB0aGF0IGEgY2VydGFpbiBtYW4gaW4gdGhlIHJldGludWUgb2YgT3JvYmF6dXMsIGEgQ2hhbGRhZWFuLCBhZnRlciBsb29raW5nIFN1bGxhIGludGVudGx5IGluIHRoZSBmYWNlLCBhbmQgc3R1ZHlpbmcgY2FyZWZ1bGx5IHRoZSBtb3ZlbWVudHMgb2YgaGlzIG1pbmQgYW5kIGJvZHksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbnZlc3RpZ2F0aW5nIGhpcyBuYXR1cmUgYWNjb3JkaW5nIHRvIHRoZSBwcmluY2lwbGVzIG9mIGhpcyBwZWN1bGlhciBhcnQsIGRlY2xhcmVkIHRoYXQgdGhpcyBtYW4gbXVzdCBvZiBuZWNlc3NpdHkgYmVjb21lIHRoZSBncmVhdGVzdCBpbiB0aGUgd29ybGQsIGFuZCB0aGF0IGV2ZW4gbm93IHRoZSB3b25kZXIgd2FzIHRoYXQgaGUgY29uc2VudGVkIG5vdCB0byBiZSBmaXJzdCBvZiBhbGwgbWVuLiBXaGVuIFN1bGxhIGNhbWUgYmFjayB0byBSb21lLCBob3dldmVyLCBDZW5zb3JpbnVzIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IGhpbSBmb3IgYnJpYmVyeSwgYWxsZWdpbmcgdGhhdCBoZSBoYWQgY29sbGVjdGVkIGxhcmdlIHN1bXMgb2YgbW9uZXkgaWxsZWdhbGx5IGZyb20gYSBmcmllbmRseSBhbmQgYWxsaWVkIGtpbmdkb20uIEhvd2V2ZXIsIENlbnNvcmludXMgZGlkIG5vdCBwdXQgaW4gYW4gYXBwZWFyYW5jZSBhdCB0aGUgdHJpYWwsIGJ1dCBkcm9wcGVkIGhpcyBpbXBlYWNobWVudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgU3VsbGEncyBxdWFycmVsIHdpdGggTWFyaXVzIGJyb2tlIG91dCBhZnJlc2ggb24gYmVpbmcgc3VwcGxpZWQgd2l0aCBmcmVzaCBtYXRlcmlhbCBieSB0aGUgYW1iaXRpb24gb2YgQm9jY2h1cywgd2hvLCBkZXNpcmluZyB0byBwbGVhc2UgdGhlIHBlb3BsZSBhdCBSb21lLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB0byBncmF0aWZ5IFN1bGxhLCBkZWRpY2F0ZWQgb24gdGhlIENhcGl0b2wgc29tZSBpbWFnZXMgYmVhcmluZyB0cm9waGllcywgYW5kIGJlc2lkZSB0aGVtIGdpbGRlZCBmaWd1cmVzIHJlcHJlc2VudGluZyBKdWd1cnRoYSBiZWluZyBzdXJyZW5kZXJlZCBieSBCb2NjaHVzIHRvIFN1bGxhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZXVwb24gTWFyaXVzIHdhcyB2ZXJ5IGFuZ3J5LCBhbmQgdHJpZWQgdG8gaGF2ZSB0aGUgZmlndXJlcyB0YWtlbiBkb3duLCBidXQgb3RoZXJzIHdlcmUgbWluZGVkIHRvIGFpZCBTdWxsYSBpbiBvcHBvc2luZyB0aGlzLCBhbmQgdGhlIGNpdHkgd2FzIGFsbCBidXQgaW4gZmxhbWVzIHdpdGggdGhlaXIgZGlzcHV0ZSwgd2hlbiB0aGUgU29jaWFsIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj45MC04OSBCLkMuLCBmb2xsb3dpbmcgdGhlIHJldm9sdCBvZiBSb21lJ3MgSXRhbGlhbiBhbGxpZXMuPC9ub3RlPiB3aGljaCBoYWQgbG9uZyBiZWVuIHNtb3VsZGVyaW5nLCBibGF6ZWQgdXAgYWdhaW5zdCB0aGUgY2l0eSBhbmQgcHV0IGEgc3RvcCBmb3IgdGhlIHRpbWUgYmVpbmcgdG8gdGhlIHF1YXJyZWwuIEluIHRoaXMgd2FyLCB3aGljaCBwcm92ZWQgb2YgdGhlIGdyZWF0ZXN0IG1vbWVudCBhbmQgbW9zdCB2YXJpZWQgZm9ydHVuZXMsIGFuZCBicm91Z2h0IGlubnVtZXJhYmxlIG1pc2NoaWVmcyBhbmQgdGhlIGdyYXZlc3QgcGVyaWxzIHVwb24gdGhlIFJvbWFucywgTWFyaXVzIHdhcyB1bmFibGUgdG8gcmVuZGVyIGFueSBncmVhdCBzZXJ2aWNlLCBhbmQgcHJvdmVkIHRoYXQgbWlsaXRhcnkgZXhjZWxsZW5jZSByZXF1aXJlcyBhIG1hbidzIGhpZ2hlc3Qgc3RyZW5ndGggYW5kIHZpZ291ci4gU3VsbGEsIG9uIHRoZSBvdGhlciBoYW5kLCBkaWQgbXVjaCB0aGF0IHdhcyBtZW1vcmFibGUsIGFuZCBhY2hpZXZlZCB0aGUgcmVwdXRhdGlvbiBvZiBhIGdyZWF0IGxlYWRlciBhbW9uZyBoaXMgZmVsbG93LWNpdGl6ZW5zLCB0aGF0IG9mIHRoZSBncmVhdGVzdCBvZiBsZWFkZXJzIGFtb25nIGhpcyBmcmllbmRzLCBhbmQgdGhhdCBvZiB0aGUgbW9zdCBmb3J0dW5hdGUgZXZlbiBhbW9uZyBoaXMgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIGRpZCBub3QgZmVlbCBhYm91dCB0aGlzIGFzIFRpbW90aGV1cyB0aGUgc29uIG9mIENvbm9uIGRpZCwgd2hvLCB3aGVuIGhpcyBhZHZlcnNhcmllcyBhc2NyaWJlZCBoaXMgc3VjY2Vzc2VzIHRvIEZvcnR1bmUsIGFuZCBoYWQgaGltIHJlcHJlc2VudGVkIGluIGEgcGFpbnRpbmcgYXMgbHlpbmcgYXNsZWVwLCB3aGlsZSBGb3J0dW5lIGNhc3QgaGVyIG5ldCBhYm91dCB0aGUgY2l0aWVzLCB3YXMgcnVkZWx5IGFuZ3J5IHdpdGggdGhvc2Ugd2hvIGhhZCBkb25lIHRoaXMsIGJlY2F1c2UsIGFzIGhlIHRob3VnaHQsIHRoZXkgd2VyZSByb2JiaW5nIGhpbSBvZiB0aGUgZ2xvcnkgZHVlIHRvIGhpcyBleHBsb2l0cywgYW5kIHNhaWQgdG8gdGhlIHBlb3BsZSBvbmNlLCBvbiByZXR1cm5pbmcgZnJvbSBhIGNhbXBhaWduIGluIHdoaWNoIGhlIHdhcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiBzdWNjZXNzZnVsOiBbbGRxdW8gXUluIHRoaXMgY2FtcGFpZ24sIGF0IGxlYXN0LCBtZW4gb2YgQXRoZW5zLCBGb3J0dW5lIGhhcyBubyBzaGFyZS5bcmRxdW8gXSAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIFRpbW90aGV1cywgdGhlbiwgd2hvIGhhZCBzaG93biBoaW1zZWxmIHNvIGNvdmV0b3VzIG9mIGhvbm91ciwgdGhlIGRlaXR5IGlzIHNhaWQgdG8gaGF2ZSByZXF1aXRlZCBoaXMgeW91dGhmdWwgcGV0dWxhbmNlLCBzbyB0aGF0IGZyb20gdGhhdCB0aW1lIG9uIGhlIGRpZCBub3RoaW5nIGJyaWxsaWFudCwgYnV0IG1pc2NhcnJpZWQgaW4gYWxsIGhpcyB1bmRlcnRha2luZ3MsIGdhdmUgb2ZmZW5jZSB0byB0aGUgcGVvcGxlLCBhbmQgd2FzIGZpbmFsbHkgYmFuaXNoZWQgdGhlIGNpdHk7IHdoZXJlYXMgU3VsbGEgbm90IG9ubHkgYWNjZXB0ZWQgd2l0aCBwbGVhc3VyZSBzdWNoIGZlbGljaXRhdGlvbnMgYW5kIGFkbWlyYXRpb24sIGJ1dCBhY3R1YWxseSBqb2luZWQgaW4gbWFnbmlmeWluZyB0aGUgYWlkIG9mIEhlYXZlbiBpbiB3aGF0IGhlIGRpZCwgYW5kIGdhdmUgdGhlIGNyZWRpdCBvZiBpdCB0byBGb3J0dW5lLCBlaXRoZXIgb3V0IG9mIGJvYXN0ZnVsbmVzcywgb3IgYmVjYXVzZSBoZSBoYWQgc3VjaCBhIGJlbGllZiBpbiB0aGUgZGl2aW5lIGFnZW5jeS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIGhpcyBNZW1vaXJzIGhlIHdyaXRlcyB0aGF0LCBvZiB0aGUgdW5kZXJ0YWtpbmdzIHdoaWNoIG1lbiB0aG91Z2h0IHdlbGwtYWR2aXNlZCwgdGhvc2UgdXBvbiB3aGljaCBoZSBoYWQgYm9sZGx5IHZlbnR1cmVkLCBub3QgYWZ0ZXIgZGVsaWJlcmF0aW9uLCBidXQgb24gdGhlIHNwdXIgb2YgdGhlIG1vbWVudCwgdHVybmVkIG91dCBmb3IgdGhlIGJldHRlci4gQW5kIGZ1cnRoZXIsIGZyb20gd2hhdCBoZSBzYXlzIGFib3V0IGhpcyBiZWluZyB3ZWxsIGVuZG93ZWQgYnkgbmF0dXJlIGZvciBGb3J0dW5lIHJhdGhlciB0aGFuIGZvciB3YXIsIGhlIHNlZW1zIHRvIGF0dHJpYnV0ZSBtb3JlIHRvIEZvcnR1bmUgdGhhbiB0byBoaXMgb3duIGV4Y2VsbGVuY2UsIGFuZCB0byBtYWtlIGhpbXNlbGYgZW50aXJlbHkgdGhlIGNyZWF0dXJlIG9mIHRoaXMgZGVpdHksIHNpbmNlIGhlIGFjY291bnRzIGV2ZW4gaGlzIGNvbmNvcmQgd2l0aCBNZXRlbGx1cywgYSBtYW4gaGlzIGVxdWFsIGluIHJhbmssIGFuZCBhIHJlbGF0aXZlIGJ5IG1hcnJpYWdlLCBhIHBpZWNlIG9mIGRpdmluZSBmZWxpY2l0eTsgZm9yIHdoZXJlYXMgaGUgZXhwZWN0ZWQgbXVjaCBhbm5veWFuY2UgZnJvbSBoaW0gYXMgYSBjb2xsZWFndWUgaW4gb2ZmaWNlLCBoZSBmb3VuZCBoaW0gbW9zdCBvYmxpZ2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHN0aWxsIGZ1cnRoZXIsIGluIHRoZSBkZWRpY2F0aW9uIG9mIGhpcyBNZW1vaXJzIHRvIEx1Y3VsbHVzLCBoZSBhZHZpc2VzIGhpbSB0byBkZWVtIG5vdGhpbmcgc28gc2VjdXJlIGFzIHdoYXQgdGhlIGRpdmluZSBwb3dlciBlbmpvaW5zIHVwb24gaGltIGluIGhpcyBkcmVhbXMuIEFuZCBoZSByZWxhdGVzIHRoYXQgd2hlbiBoZSB3YXMgZGlzcGF0Y2hlZCB3aXRoIGFuIGFybXkgdG8gdGhlIFNvY2lhbCB3YXIsIGEgZ3JlYXQgY2hhc20gaW4gdGhlIGVhcnRoIG9wZW5lZCBuZWFyIExhdmVybmEsIGZyb20gd2hpY2ggYSBncmVhdCBxdWFudGl0eSBvZiBmaXJlIGJ1cnN0IGZvcnRoIGFuZCBhIGJyaWdodCBmbGFtZSB0b3dlcmVkIHVwIHRvd2FyZHMgdGhlIGhlYXZlbnM7IHdoZXJldXBvbiB0aGUgc29vdGhzYXllcnMgZGVjbGFyZWQgdGhhdCBhIGJyYXZlIG1hbiwgb2YgcmFyZSBjb3VyYWdlIGFuZCBzdXJwYXNzaW5nIGFwcGVhcmFuY2UsIHdhcyB0byB0YWtlIHRoZSBnb3Zlcm5tZW50IGluIGhhbmQgYW5kIGZyZWUgdGhlIGNpdHkgZnJvbSBpdHMgcHJlc2VudCB0cm91Ymxlcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFN1bGxhIHNheXMgdGhhdCBoZSBoaW1zZWxmIHdhcyB0aGlzIG1hbiwgZm9yIGhpcyBnb2xkZW4gaGVhZCBvZiBoYWlyIGdhdmUgaGltIGEgc2luZ3VsYXIgYXBwZWFyYW5jZSwgYW5kIGFzIGZvciBicmF2ZXJ5LCBoZSB3YXMgbm90IGFzaGFtZWQgdG8gdGVzdGlmeSBpbiBoaXMgb3duIGJlaGFsZiwgYWZ0ZXIgc3VjaCBncmVhdCBhbmQgbm9ibGUgZGVlZHMgYXMgaGUgaGFkIHBlcmZvcm1lZC4gU28gbXVjaCwgdGhlbiwgcmVnYXJkaW5nIGhpcyBhdHRpdHVkZSB0b3dhcmRzIHRoZSBkaXZpbmUgcG93ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgU3VsbGEncyBxdWFycmVsIHdpdGggTWFyaXVzIGJyb2tlIG91dCBhZnJlc2ggb24gYmVpbmcgc3VwcGxpZWQgd2l0aCBmcmVzaCBtYXRlcmlhbCBieSB0aGUgYW1iaXRpb24gb2YgQm9jY2h1cywgd2hvLCBkZXNpcmluZyB0byBwbGVhc2UgdGhlIHBlb3BsZSBhdCBSb21lLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB0byBncmF0aWZ5IFN1bGxhLCBkZWRpY2F0ZWQgb24gdGhlIENhcGl0b2wgc29tZSBpbWFnZXMgYmVhcmluZyB0cm9waGllcywgYW5kIGJlc2lkZSB0aGVtIGdpbGRlZCBmaWd1cmVzIHJlcHJlc2VudGluZyBKdWd1cnRoYSBiZWluZyBzdXJyZW5kZXJlZCBieSBCb2NjaHVzIHRvIFN1bGxhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBNYXJpdXMgd2FzIHZlcnkgYW5ncnksIGFuZCB0cmllZCB0byBoYXZlIHRoZSBmaWd1cmVzIHRha2VuIGRvd24sIGJ1dCBvdGhlcnMgd2VyZSBtaW5kZWQgdG8gYWlkIFN1bGxhIGluIG9wcG9zaW5nIHRoaXMsIGFuZCB0aGUgY2l0eSB3YXMgYWxsIGJ1dCBpbiBmbGFtZXMgd2l0aCB0aGVpciBkaXNwdXRlLCB3aGVuIHRoZSBTb2NpYWwgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+OTAtODkgQi5DLiwgZm9sbG93aW5nIHRoZSByZXZvbHQgb2YgUm9tZSdzIEl0YWxpYW4gYWxsaWVzLjwvbm90ZT4gd2hpY2ggaGFkIGxvbmcgYmVlbiBzbW91bGRlcmluZywgYmxhemVkIHVwIGFnYWluc3QgdGhlIGNpdHkgYW5kIHB1dCBhIHN0b3AgZm9yIHRoZSB0aW1lIGJlaW5nIHRvIHRoZSBxdWFycmVsLiBJbiB0aGlzIHdhciwgd2hpY2ggcHJvdmVkIG9mIHRoZSBncmVhdGVzdCBtb21lbnQgYW5kIG1vc3QgdmFyaWVkIGZvcnR1bmVzLCBhbmQgYnJvdWdodCBpbm51bWVyYWJsZSBtaXNjaGllZnMgYW5kIHRoZSBncmF2ZXN0IHBlcmlscyB1cG9uIHRoZSBSb21hbnMsIE1hcml1cyB3YXMgdW5hYmxlIHRvIHJlbmRlciBhbnkgZ3JlYXQgc2VydmljZSwgYW5kIHByb3ZlZCB0aGF0IG1pbGl0YXJ5IGV4Y2VsbGVuY2UgcmVxdWlyZXMgYSBtYW4ncyBoaWdoZXN0IHN0cmVuZ3RoIGFuZCB2aWdvdXIuIFN1bGxhLCBvbiB0aGUgb3RoZXIgaGFuZCwgZGlkIG11Y2ggdGhhdCB3YXMgbWVtb3JhYmxlLCBhbmQgYWNoaWV2ZWQgdGhlIHJlcHV0YXRpb24gb2YgYSBncmVhdCBsZWFkZXIgYW1vbmcgaGlzIGZlbGxvdy1jaXRpemVucywgdGhhdCBvZiB0aGUgZ3JlYXRlc3Qgb2YgbGVhZGVycyBhbW9uZyBoaXMgZnJpZW5kcywgYW5kIHRoYXQgb2YgdGhlIG1vc3QgZm9ydHVuYXRlIGV2ZW4gYW1vbmcgaGlzIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBkaWQgbm90IGZlZWwgYWJvdXQgdGhpcyBhcyBUaW1vdGhldXMgdGhlIHNvbiBvZiBDb25vbiBkaWQsIHdobywgd2hlbiBoaXMgYWR2ZXJzYXJpZXMgYXNjcmliZWQgaGlzIHN1Y2Nlc3NlcyB0byBGb3J0dW5lLCBhbmQgaGFkIGhpbSByZXByZXNlbnRlZCBpbiBhIHBhaW50aW5nIGFzIGx5aW5nIGFzbGVlcCwgd2hpbGUgRm9ydHVuZSBjYXN0IGhlciBuZXQgYWJvdXQgdGhlIGNpdGllcywgd2FzIHJ1ZGVseSBhbmdyeSB3aXRoIHRob3NlIHdobyBoYWQgZG9uZSB0aGlzLCBiZWNhdXNlLCBhcyBoZSB0aG91Z2h0LCB0aGV5IHdlcmUgcm9iYmluZyBoaW0gb2YgdGhlIGdsb3J5IGR1ZSB0byBoaXMgZXhwbG9pdHMsIGFuZCBzYWlkIHRvIHRoZSBwZW9wbGUgb25jZSwgb24gcmV0dXJuaW5nIGZyb20gYSBjYW1wYWlnbiBpbiB3aGljaCBoZSB3YXMgdGhvdWdodCB0byBoYXZlIGJlZW4gc3VjY2Vzc2Z1bDogW2xkcXVvIF1JbiB0aGlzIGNhbXBhaWduLCBhdCBsZWFzdCwgbWVuIG9mIEF0aGVucywgRm9ydHVuZSBoYXMgbm8gc2hhcmUuW3JkcXVvIF0gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gVGltb3RoZXVzLCB0aGVuLCB3aG8gaGFkIHNob3duIGhpbXNlbGYgc28gY292ZXRvdXMgb2YgaG9ub3VyLCB0aGUgZGVpdHkgaXMgc2FpZCB0byBoYXZlIHJlcXVpdGVkIGhpcyB5b3V0aGZ1bCBwZXR1bGFuY2UsIHNvIHRoYXQgZnJvbSB0aGF0IHRpbWUgb24gaGUgZGlkIG5vdGhpbmcgYnJpbGxpYW50LCBidXQgbWlzY2FycmllZCBpbiBhbGwgaGlzIHVuZGVydGFraW5ncywgZ2F2ZSBvZmZlbmNlIHRvIHRoZSBwZW9wbGUsIGFuZCB3YXMgZmluYWxseSBiYW5pc2hlZCB0aGUgY2l0eTsgd2hlcmVhcyBTdWxsYSBub3Qgb25seSBhY2NlcHRlZCB3aXRoIHBsZWFzdXJlIHN1Y2ggZmVsaWNpdGF0aW9ucyBhbmQgYWRtaXJhdGlvbiwgYnV0IGFjdHVhbGx5IGpvaW5lZCBpbiBtYWduaWZ5aW5nIHRoZSBhaWQgb2YgSGVhdmVuIGluIHdoYXQgaGUgZGlkLCBhbmQgZ2F2ZSB0aGUgY3JlZGl0IG9mIGl0IHRvIEZvcnR1bmUsIGVpdGhlciBvdXQgb2YgYm9hc3RmdWxuZXNzLCBvciBiZWNhdXNlIGhlIGhhZCBzdWNoIGEgYmVsaWVmIGluIHRoZSBkaXZpbmUgYWdlbmN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBoaXMgTWVtb2lycyBoZSB3cml0ZXMgdGhhdCwgb2YgdGhlIHVuZGVydGFraW5ncyB3aGljaCBtZW4gdGhvdWdodCB3ZWxsLWFkdmlzZWQsIHRob3NlIHVwb24gd2hpY2ggaGUgaGFkIGJvbGRseSB2ZW50dXJlZCwgbm90IGFmdGVyIGRlbGliZXJhdGlvbiwgYnV0IG9uIHRoZSBzcHVyIG9mIHRoZSBtb21lbnQsIHR1cm5lZCBvdXQgZm9yIHRoZSBiZXR0ZXIuIEFuZCBmdXJ0aGVyLCBmcm9tIHdoYXQgaGUgc2F5cyBhYm91dCBoaXMgYmVpbmcgd2VsbCBlbmRvd2VkIGJ5IG5hdHVyZSBmb3IgRm9ydHVuZSByYXRoZXIgdGhhbiBmb3Igd2FyLCBoZSBzZWVtcyB0byBhdHRyaWJ1dGUgbW9yZSB0byBGb3J0dW5lIHRoYW4gdG8gaGlzIG93biBleGNlbGxlbmNlLCBhbmQgdG8gbWFrZSBoaW1zZWxmIGVudGlyZWx5IHRoZSBjcmVhdHVyZSBvZiB0aGlzIGRlaXR5LCBzaW5jZSBoZSBhY2NvdW50cyBldmVuIGhpcyBjb25jb3JkIHdpdGggTWV0ZWxsdXMsIGEgbWFuIGhpcyBlcXVhbCBpbiByYW5rLCBhbmQgYSByZWxhdGl2ZSBieSBtYXJyaWFnZSwgYSBwaWVjZSBvZiBkaXZpbmUgZmVsaWNpdHk7IGZvciB3aGVyZWFzIGhlIGV4cGVjdGVkIG11Y2ggYW5ub3lhbmNlIGZyb20gaGltIGFzIGEgY29sbGVhZ3VlIGluIG9mZmljZSwgaGUgZm91bmQgaGltIG1vc3Qgb2JsaWdpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCBmdXJ0aGVyLCBpbiB0aGUgZGVkaWNhdGlvbiBvZiBoaXMgTWVtb2lycyB0byBMdWN1bGx1cywgaGUgYWR2aXNlcyBoaW0gdG8gZGVlbSBub3RoaW5nIHNvIHNlY3VyZSBhcyB3aGF0IHRoZSBkaXZpbmUgcG93ZXIgZW5qb2lucyB1cG9uIGhpbSBpbiBoaXMgZHJlYW1zLiBBbmQgaGUgcmVsYXRlcyB0aGF0IHdoZW4gaGUgd2FzIGRpc3BhdGNoZWQgd2l0aCBhbiBhcm15IHRvIHRoZSBTb2NpYWwgd2FyLCBhIGdyZWF0IGNoYXNtIGluIHRoZSBlYXJ0aCBvcGVuZWQgbmVhciBMYXZlcm5hLCBmcm9tIHdoaWNoIGEgZ3JlYXQgcXVhbnRpdHkgb2YgZmlyZSBidXJzdCBmb3J0aCBhbmQgYSBicmlnaHQgZmxhbWUgdG93ZXJlZCB1cCB0b3dhcmRzIHRoZSBoZWF2ZW5zOyB3aGVyZXVwb24gdGhlIHNvb3Roc2F5ZXJzIGRlY2xhcmVkIHRoYXQgYSBicmF2ZSBtYW4sIG9mIHJhcmUgY291cmFnZSBhbmQgc3VycGFzc2luZyBhcHBlYXJhbmNlLCB3YXMgdG8gdGFrZSB0aGUgZ292ZXJubWVudCBpbiBoYW5kIGFuZCBmcmVlIHRoZSBjaXR5IGZyb20gaXRzIHByZXNlbnQgdHJvdWJsZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBTdWxsYSBzYXlzIHRoYXQgaGUgaGltc2VsZiB3YXMgdGhpcyBtYW4sIGZvciBoaXMgZ29sZGVuIGhlYWQgb2YgaGFpciBnYXZlIGhpbSBhIHNpbmd1bGFyIGFwcGVhcmFuY2UsIGFuZCBhcyBmb3IgYnJhdmVyeSwgaGUgd2FzIG5vdCBhc2hhbWVkIHRvIHRlc3RpZnkgaW4gaGlzIG93biBiZWhhbGYsIGFmdGVyIHN1Y2ggZ3JlYXQgYW5kIG5vYmxlIGRlZWRzIGFzIGhlIGhhZCBwZXJmb3JtZWQuIFNvIG11Y2gsIHRoZW4sIHJlZ2FyZGluZyBoaXMgYXR0aXR1ZGUgdG93YXJkcyB0aGUgZGl2aW5lIHBvd2Vycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiBvdGhlciByZXNwZWN0cyBoZSBzZWVtcyB0byBoYXZlIGJlZW4gb2YgdmVyeSB1bmV2ZW4gY2hhcmFjdGVyLCBhbmQgYXQgdmFyaWFuY2Ugd2l0aCBoaW1zZWxmOyBoZSByb2JiZWQgbXVjaCwgYnV0IGdhdmUgbW9yZTsgYmVzdG93ZWQgaGlzIGhvbm91cnMgdW5leHBlY3RlZGx5LCBhcyB1bmV4cGVjdGVkbHkgaGlzIGluc3VsdHM7IGZhd25lZCBvbiB0aG9zZSBoZSBuZWVkZWQsIGJ1dCBnYXZlIGhpbXNlbGYgYWlycyB0b3dhcmRzIHRob3NlIHdobyBuZWVkZWQgaGltOyBzbyB0aGF0IG9uZSBjYW5ub3QgdGVsbCB3aGV0aGVyIGhlIHdhcyBtb3JlIGluY2xpbmVkIGJ5IG5hdHVyZSB0byBkaXNkYWluIG9yIGZsYXR0ZXJ5LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyByZWdhcmRzIHRoZSBpcnJlZ3VsYXJpdHkgb2YgaGlzIHB1bmlzaG1lbnRzLCBjdWRnZWxsaW5nIHRvIGRlYXRoIGFzIGhlIGRpZCBvbiBhbnkgY2hhbmNlIGdyb3VuZHMsIGFuZCBhZ2FpbiBnZW50bHkgc3VibWl0dGluZyB0byB0aGUgZ3JlYXRlc3Qgd3JvbmdzIHJlYWRpbHkgb3BlbiB0byByZWNvbmNpbGlhdGlvbiBhZnRlciB0aGUgbW9zdCBpcnJlcGFyYWJsZSBpbmp1cmllcywgYnV0IHZpc2l0aW5nIHNtYWxsIGFuZCBpbnNpZ25pZmljYW50IG9mZmVuY2VzIHdpdGggZGVhdGggYW5kIGNvbmZpc2NhdGlvbiBvZiBnb29kczsgaGVyZSBvbmUgbWlnaHQgZGVjaWRlIHRoYXQgaGUgd2FzIG5hdHVyYWxseSBvZiBhIHN0ZXJuIGFuZCByZXZlbmdlZnVsIHRlbXBlciwgYnV0IHJlbGF4ZWQgaGlzIHNldmVyaXR5IG91dCBvZiBjYWxjdWxhdGluZyByZWdhcmQgZm9yIGhpcyBpbnRlcmVzdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgdmVyeSBTb2NpYWwgd2FyLCBmb3IgZXhhbXBsZSwgd2hlbiBoaXMgc29sZGllcnMgd2l0aCBjbHVicyBhbmQgc3RvbmVzIGRpZCB0byBkZWF0aCBhIGxlZ2F0ZSwgYSBtYW4gb2YgcHJhZXRvcmlhbiBkaWduaXR5LCBBbGJpbnVzIGJ5IG5hbWUsIGhlIHBhc3NlZCBvdmVyIHdpdGhvdXQgcHVuaXNobWVudCB0aGlzIGZsYWdyYW50IGNyaW1lLCBhbmQgc29sZW1ubHkgc2VudCB0aGUgd29yZCBhYm91dCB0aGF0IGhlIHdvdWxkIGZpbmQgaGlzIG1lbiBtb3JlIHJlYWR5IGFuZCB3aWxsaW5nIGZvciB0aGUgd2FyIG9uIGFjY291bnQgb2YgdGhpcyB0cmFuc2dyZXNzaW9uLCBzaW5jZSB0aGV5IHdvdWxkIHRyeSB0byBhdG9uZSBmb3IgaXQgYnkgdGhlaXIgYnJhdmVyeS4gVG8gdGhvc2Ugd2hvIGNlbnN1cmVkIHRoZSBjcmltZSBoZSBwYWlkIG5vIGhlZWQsIGJ1dCBwdXJwb3NpbmcgYWxyZWFkeSB0byBwdXQgZG93biB0aGUgcG93ZXIgb2YgTWFyaXVzIGFuZCwgbm93IHRoYXQgdGhlIFNvY2lhbCB3YXIgd2FzIHRob3VnaHQgdG8gYmUgYXQgYW4gZW5kLCB0byBnZXQgaGltc2VsZiBhcHBvaW50ZWQgZ2VuZXJhbCBhZ2FpbnN0IE1pdGhyaWRhdGVzLCBoZSB0cmVhdGVkIHRoZSBzb2xkaWVycyB1bmRlciBoaW0gd2l0aCBkZWZlcmVuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyByZWdhcmRzIHRoZSBpcnJlZ3VsYXJpdHkgb2YgaGlzIHB1bmlzaG1lbnRzLCBjdWRnZWxsaW5nIHRvIGRlYXRoIGFzIGhlIGRpZCBvbiBhbnkgY2hhbmNlIGdyb3VuZHMsIGFuZCBhZ2FpbiBnZW50bHkgc3VibWl0dGluZyB0byB0aGUgZ3JlYXRlc3Qgd3JvbmdzIHJlYWRpbHkgb3BlbiB0byByZWNvbmNpbGlhdGlvbiBhZnRlciB0aGUgbW9zdCBpcnJlcGFyYWJsZSBpbmp1cmllcywgYnV0IHZpc2l0aW5nIHNtYWxsIGFuZCBpbnNpZ25pZmljYW50IG9mZmVuY2VzIHdpdGggZGVhdGggYW5kIGNvbmZpc2NhdGlvbiBvZiBnb29kczsgaGVyZSBvbmUgbWlnaHQgZGVjaWRlIHRoYXQgaGUgd2FzIG5hdHVyYWxseSBvZiBhIHN0ZXJuIGFuZCByZXZlbmdlZnVsIHRlbXBlciwgYnV0IHJlbGF4ZWQgaGlzIHNldmVyaXR5IG91dCBvZiBjYWxjdWxhdGluZyByZWdhcmQgZm9yIGhpcyBpbnRlcmVzdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgdmVyeSBTb2NpYWwgd2FyLCBmb3IgZXhhbXBsZSwgd2hlbiBoaXMgc29sZGllcnMgd2l0aCBjbHVicyBhbmQgc3RvbmVzIGRpZCB0byBkZWF0aCBhIGxlZ2F0ZSwgYSBtYW4gb2YgcHJhZXRvcmlhbiBkaWduaXR5LCBBbGJpbnVzIGJ5IG5hbWUsIGhlIHBhc3NlZCBvdmVyIHdpdGhvdXQgcHVuaXNobWVudCB0aGlzIGZsYWdyYW50IGNyaW1lLCBhbmQgc29sZW1ubHkgc2VudCB0aGUgd29yZCBhYm91dCB0aGF0IGhlIHdvdWxkIGZpbmQgaGlzIG1lbiBtb3JlIHJlYWR5IGFuZCB3aWxsaW5nIGZvciB0aGUgd2FyIG9uIGFjY291bnQgb2YgdGhpcyB0cmFuc2dyZXNzaW9uLCBzaW5jZSB0aGV5IHdvdWxkIHRyeSB0byBhdG9uZSBmb3IgaXQgYnkgdGhlaXIgYnJhdmVyeS4gVG8gdGhvc2Ugd2hvIGNlbnN1cmVkIHRoZSBjcmltZSBoZSBwYWlkIG5vIGhlZWQsIGJ1dCBwdXJwb3NpbmcgYWxyZWFkeSB0byBwdXQgZG93biB0aGUgcG93ZXIgb2YgTWFyaXVzIGFuZCwgbm93IHRoYXQgdGhlIFNvY2lhbCB3YXIgd2FzIHRob3VnaHQgdG8gYmUgYXQgYW4gZW5kLCB0byBnZXQgaGltc2VsZiBhcHBvaW50ZWQgZ2VuZXJhbCBhZ2FpbnN0IE1pdGhyaWRhdGVzLCBoZSB0cmVhdGVkIHRoZSBzb2xkaWVycyB1bmRlciBoaW0gd2l0aCBkZWZlcmVuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHJldHVybmVkIHRvIHRoZSBjaXR5LCBoZSB3YXMgYXBwb2ludGVkIGNvbnN1bCB3aXRoIFF1aW50dXMgUG9tcGVpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODggQi5DLjwvbm90ZT4gaW4gdGhlIGZpZnRpZXRoIHllYXIgb2YgaGlzIGFnZSwgYW5kIG1hZGUgYSBtb3N0IGlsbHVzdHJpb3VzIG1hcnJpYWdlIHdpdGggQ2FlY2lsaWEsIHRoZSBkYXVnaHRlciBvZiBNZXRlbGx1cywgdGhlIFBvbnRpZmV4IE1heGltdXMuIE9uIHRoZSB0aGVtZSBvZiB0aGlzIG1hcnJpYWdlIG1hbnkgdmVyc2VzIHdlcmUgc3VuZyBpbiByaWRpY3VsZSBvZiBoaW0gYnkgdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBtYW55IG9mIHRoZSBsZWFkaW5nIG1lbiB3ZXJlIGluZGlnbmFudCBhdCBpdCwgZGVlbWluZyBoaW0sIGFzIExpdnkgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2V2ZW50eS1zZXZlbnRoLCBvbmUgb2YgdGhlIGxvc3QgYm9va3MuPC9ub3RlPiB1bndvcnRoeSBvZiB0aGUgd29tYW4gYWx0aG91Z2ggdGhleSBoYWQganVkZ2VkIGhpbSB3b3J0aHkgb2YgdGhlIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyB3YXMgbm90IHRoZSBvbmx5IHdvbWFuIHdob20gaGUgbWFycmllZCwgYnV0IGZpcnN0LCB3aGVuIGhlIHdhcyBzdGlsbCBhIHN0cmlwbGluZywgaGUgdG9vayBJbGlhIHRvIHdpZmUsIGFuZCBzaGUgYm9yZSBoaW0gYSBkYXVnaHRlcjsgdGhlbiBBZWxpYSwgYWZ0ZXIgaGVyOyBhbmQgdGhpcmRseSwgQ2xvZWxpYSwgd2hvbSBoZSBkaXZvcmNlZCBmb3IgYmFycmVubmVzcywgaG9ub3VyYWJseSwgYW5kIHdpdGggd29yZHMgb2YgcHJhaXNlLCB0byB3aGljaCBoZSBhZGRlZCBnaWZ0cy4gQnV0IHNpbmNlIGhlIG1hcnJpZWQgTWV0ZWxsYSBvbmx5IGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgaGUgd2FzIHRob3VnaHQgdG8gaGF2ZSBhY2N1c2VkIENsb2VsaWEgdW5mYWlybHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBNZXRlbGxhLCBob3dldmVyLCBoZSBhbHdheXMgc2hvd2VkIGdyZWF0IGRlZmVyZW5jZSBpbiBhbGwgdGhpbmdzLCBzbyB0aGF0IHRoZSBSb21hbiBwZW9wbGUsIHdoZW4gaXQgbG9uZ2VkIGZvciB0aGUgcmVzdG9yYXRpb24gb2YgdGhlIGV4aWxlZCBwYXJ0aXNhbnMgb2YgTWFyaXVzLCBhbmQgU3VsbGEgcmVmdXNlZCBpdCwgaW4gaXRzIG5lZWQgY2FsbGVkIHVwb24gTWV0ZWxsYSBmb3IgYWlkLiBJdCB3YXMgdGhvdWdodCBhbHNvIHRoYXQgd2hlbiBoZSB0b29rIHRoZSBjaXR5IG9mIEF0aGVucywgaGUgdHJlYXRlZCBpdHMgcGVvcGxlIG1vcmUgaGFyc2hseSBiZWNhdXNlIHRoZXkgaGFkIHNjdXJyaWxvdXNseSBhYnVzZWQgTWV0ZWxsYSBmcm9tIHRoZSB3YWxscy4gQnV0IHRoaXMgd2FzIGxhdGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHJldHVybmVkIHRvIHRoZSBjaXR5LCBoZSB3YXMgYXBwb2ludGVkIGNvbnN1bCB3aXRoIFF1aW50dXMgUG9tcGVpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4OCBCLkMuPC9ub3RlPiBpbiB0aGUgZmlmdGlldGggeWVhciBvZiBoaXMgYWdlLCBhbmQgbWFkZSBhIG1vc3QgaWxsdXN0cmlvdXMgbWFycmlhZ2Ugd2l0aCBDYWVjaWxpYSwgdGhlIGRhdWdodGVyIG9mIE1ldGVsbHVzLCB0aGUgUG9udGlmZXggTWF4aW11cy4gT24gdGhlIHRoZW1lIG9mIHRoaXMgbWFycmlhZ2UgbWFueSB2ZXJzZXMgd2VyZSBzdW5nIGluIHJpZGljdWxlIG9mIGhpbSBieSB0aGUgY29tbW9uIHBlb3BsZSwgYW5kIG1hbnkgb2YgdGhlIGxlYWRpbmcgbWVuIHdlcmUgaW5kaWduYW50IGF0IGl0LCBkZWVtaW5nIGhpbSwgYXMgTGl2eSBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNldmVudHktc2V2ZW50aCwgb25lIG9mIHRoZSBsb3N0IGJvb2tzLjwvbm90ZT4gdW53b3J0aHkgb2YgdGhlIHdvbWFuIGFsdGhvdWdoIHRoZXkgaGFkIGp1ZGdlZCBoaW0gd29ydGh5IG9mIHRoZSBjb25zdWxzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyB3YXMgbm90IHRoZSBvbmx5IHdvbWFuIHdob20gaGUgbWFycmllZCwgYnV0IGZpcnN0LCB3aGVuIGhlIHdhcyBzdGlsbCBhIHN0cmlwbGluZywgaGUgdG9vayBJbGlhIHRvIHdpZmUsIGFuZCBzaGUgYm9yZSBoaW0gYSBkYXVnaHRlcjsgdGhlbiBBZWxpYSwgYWZ0ZXIgaGVyOyBhbmQgdGhpcmRseSwgQ2xvZWxpYSwgd2hvbSBoZSBkaXZvcmNlZCBmb3IgYmFycmVubmVzcywgaG9ub3VyYWJseSwgYW5kIHdpdGggd29yZHMgb2YgcHJhaXNlLCB0byB3aGljaCBoZSBhZGRlZCBnaWZ0cy4gQnV0IHNpbmNlIGhlIG1hcnJpZWQgTWV0ZWxsYSBvbmx5IGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgaGUgd2FzIHRob3VnaHQgdG8gaGF2ZSBhY2N1c2VkIENsb2VsaWEgdW5mYWlybHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBNZXRlbGxhLCBob3dldmVyLCBoZSBhbHdheXMgc2hvd2VkIGdyZWF0IGRlZmVyZW5jZSBpbiBhbGwgdGhpbmdzLCBzbyB0aGF0IHRoZSBSb21hbiBwZW9wbGUsIHdoZW4gaXQgbG9uZ2VkIGZvciB0aGUgcmVzdG9yYXRpb24gb2YgdGhlIGV4aWxlZCBwYXJ0aXNhbnMgb2YgTWFyaXVzLCBhbmQgU3VsbGEgcmVmdXNlZCBpdCwgaW4gaXRzIG5lZWQgY2FsbGVkIHVwb24gTWV0ZWxsYSBmb3IgYWlkLiBJdCB3YXMgdGhvdWdodCBhbHNvIHRoYXQgd2hlbiBoZSB0b29rIHRoZSBjaXR5IG9mIEF0aGVucywgaGUgdHJlYXRlZCBpdHMgcGVvcGxlIG1vcmUgaGFyc2hseSBiZWNhdXNlIHRoZXkgaGFkIHNjdXJyaWxvdXNseSBhYnVzZWQgTWV0ZWxsYSBmcm9tIHRoZSB3YWxscy4gQnV0IHRoaXMgd2FzIGxhdGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDEzLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBkZWVtaW5nIHRoZSBjb25zdWxzaGlwIGEgc2xpZ2h0IG1hdHRlciBpbiBjb21wYXJpc29uIHdpdGggdGhpbmdzIHRvIGNvbWUsIGhpcyB0aG91Z2h0cyBzb2FyZWQgdG8gdGhlIE1pdGhyaWRhdGljIHdhci4gQnV0IGhlcmUgaGUgZm91bmQgYSByaXZhbCBpbiBNYXJpdXMsIHdobyB3YXMgcG9zc2Vzc2VkIGJ5IGFtYml0aW9uIGFuZCBhIG1hZCBkZXNpcmUgZm9yIGZhbWUsIHRob3NlIG5ldmVyIGFnZWluZyBwYXNzaW9ucy4gSGUgd2FzIG5vdyB1bndpZWxkeSBpbiBib2R5LCBhbmQgaW4gdGhlIHJlY2VudCBjYW1wYWlnbnMgaGFkIGdpdmVuIHVwIHNlcnZpY2Ugb24gYWNjb3VudCBvZiBoaXMgYWdlLCBhbmQgeWV0IHNldCBoaXMgaGVhcnQgdXBvbiBmb3JlaWduIHdhcnMgYmV5b25kIHRoZSBzZWFzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBTdWxsYSBoYWQgc2V0IG91dCBmb3IgaGlzIGNhbXAgb24gdW5maW5pc2hlZCBidXNpbmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdWxsYSB3YXMgb2NjdXBpZWQgd2l0aCB0aGUgc2llZ2Ugb2YgTm9sYSwgaW4gQ2FtcGFuaWEuPC9ub3RlPiBoZSBoaW1zZWxmIGtlcHQgYXQgaG9tZSBhbmQgY29udHJpdmVkIHRoYXQgbW9zdCBmYXRhbCBzZWRpdGlvbiwgd2hpY2ggd3JvdWdodCBSb21lIG1vcmUgaGFybSB0aGFuIGFsbCBoZXIgd2FycyB0b2dldGhlciBoYWQgZG9uZSwgYXMgaW5kZWVkIHRoZSBoZWF2ZW5seSBwb3dlcnMgZm9yZXNob3dlZCB0byB0aGVtLiBGb3IgZmlyZSBicm9rZSBmb3J0aCBvZiBpdHMgb3duIGFjY29yZCBmcm9tIHRoZSBzdGF2ZXMgd2hpY2ggc3VwcG9ydGVkIHRoZSBlbnNpZ25zLCBhbmQgd2FzIHdpdGggZGlmZmljdWx0eSBleHRpbmd1aXNoZWQ7IGFuZCB0aHJlZSByYXZlbnMgYnJvdWdodCB0aGVpciB5b3VuZyBmb3J0aCBpbnRvIHRoZSBzdHJlZXQgYW5kIGRldm91cmVkIHRoZW0sIGFuZCB0aGVuIGNhcnJpZWQgdGhlIHJlbWFpbnMgYmFjayBhZ2FpbiBpbnRvIHRoZWlyIG5lc3Q7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhZnRlciBtaWNlIGhhZCBnbmF3ZWQgY29uc2VjcmF0ZWQgZ29sZCBpbiBhIHRlbXBsZSwgdGhlIGtlZXBlcnMgY2F1Z2h0IG9uZSBvZiB0aGVtLCBhIGZlbWFsZSwgaW4gYSB0cmFwLCBhbmQgaW4gdGhlIHZlcnkgdHJhcCBzaGUgYnJvdWdodCBmb3J0aCBmaXZlIHlvdW5nIG9uZXMsIGFuZCBhdGUgdXAgdGhyZWUgb2YgdGhlbS4gQnV0IG1vc3QgaW1wb3J0YW50IG9mIGFsbCwgb3V0IG9mIGEgY2xvdWRsZXNzIGFuZCBjbGVhciBhaXIgdGhlcmUgcmFuZyBvdXQgdGhlIHZvaWNlIG9mIGEgdHJ1bXBldCwgcHJvbG9uZ2luZyBhIHNocmlsbCBhbmQgZGlzbWFsIG5vdGUsIHNvIHRoYXQgYWxsIHdlcmUgYW1hemVkIGFuZCB0ZXJyaWZpZWQgYXQgaXRzIGxvdWRuZXNzLiBUaGUgVHVzY2FuIHdpc2UgbWVuIGRlY2xhcmVkIHRoYXQgdGhlIHByb2RpZ3kgZm9yZXRva2VuZWQgYSBjaGFuZ2Ugb2YgY29uZGl0aW9ucyBhbmQgdGhlIGFkdmVudCBvZiBhIG5ldyBhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhY2NvcmRpbmcgdG8gdGhlbSB0aGVyZSBhcmUgZWlnaHQgYWdlcyBpbiBhbGwsIGRpZmZlcmluZyBmcm9tIG9uZSBhbm90aGVyIGluIHRoZSBsaXZlcyBhbmQgY3VzdG9tcyBvZiBtZW4sIGFuZCB0byBlYWNoIG9mIHRoZXNlIEdvZCBoYXMgYXBwb2ludGVkIGEgZGVmaW5pdGUgbnVtYmVyIG9mIHRpbWVzIGFuZCBzZWFzb25zLCB3aGljaCBpcyBjb21wbGV0ZWQgYnkgdGhlIGNpcmN1aXQgb2YgYSBncmVhdCB5ZWFyLiBBbmQgd2hlbmV2ZXIgdGhpcyBjaXJjdWl0IGhhcyBydW4gb3V0LCBhbmQgYW5vdGhlciBiZWdpbnMsIHNvbWUgd29uZGVyZnVsIHNpZ24gaXMgc2VudCBmcm9tIGVhcnRoIG9yIGhlYXZlbiwgc28gdGhhdCBpdCBpcyBhdCBvbmNlIGNsZWFyIHRvIHRob3NlIHdobyBoYXZlIHN0dWRpZWQgc3VjaCBzdWJqZWN0cyBhbmQgYXJlIHZlcnNlZCBpbiB0aGVtLCB0aGF0IG1lbiBvZiBvdGhlciBoYWJpdHMgYW5kIG1vZGVzIG9mIGxpZmUgaGF2ZSBjb21lIGludG8gdGhlIHdvcmxkLCB3aG8gYXJlIGVpdGhlciBtb3JlIG9yIGxlc3Mgb2YgY29uY2VybiB0byB0aGUgZ29kcyB0aGFuIHRoZWlyIHByZWRlY2Vzc29ycyB3ZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpbmdzLCB0aGV5IHNheSwgdW5kZXJnbyBncmVhdCBjaGFuZ2VzLCBhcyBvbmUgYWdlIHN1Y2NlZWRzIGFub3RoZXIsIGFuZCBlc3BlY2lhbGx5IHRoZSBhcnQgb2YgZGl2aW5hdGlvbjsgYXQgb25lIHBlcmlvZCBpdCByaXNlcyBpbiBlc3RlZW0gYW5kIGlzIHN1Y2Nlc3NmdWwgaW4gaXRzIHByZWRpY3Rpb25zLCBiZWNhdXNlIG1hbmlmZXN0IGFuZCBnZW51aW5lIHNpZ25zIGFyZSBzZW50IGZvcnRoIGZyb20gdGhlIERlaXR5OyBhbmQgYWdhaW4sIGluIGFub3RoZXIgYWdlLCBpdCBpcyBpbiBzbWFsbCByZXB1dGUsIGJlaW5nIG9mZi1oYW5kLCBmb3IgdGhlIG1vc3QgcGFydCwgYW5kIHNlZWtpbmcgdG8gZ3Jhc3AgdGhlIGZ1dHVyZSBieSBtZWFucyBvZiBmYWludCBhbmQgYmxpbmQgc2Vuc2VzLiBTdWNoLCBhdCBhbnkgcmF0ZSwgd2FzIHRoZSB0YWxlIHRvbGQgYnkgdGhlIHdpc2VzdCBvZiB0aGUgVHVzY2Fucywgd2hvIHdlcmUgdGhvdWdodCB0byBrbm93IG11Y2ggbW9yZSBhYm91dCBpdCB0aGFuIHRoZSByZXN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hpbGUgdGhlIHNlbmF0ZSB3YXMgYnVzaWVkIHdpdGggdGhlIHNvb3Roc2F5ZXJzIGFib3V0IHRoZXNlIHByb2RpZ2llcywgYW5kIGhvbGRpbmcgaXRzIHNlc3Npb24gaW4gdGhlIHRlbXBsZSBvZiBCZWxsb25hLCBhIHNwYXJyb3cgY2FtZSBmbHlpbmcgaW4sIGJlZm9yZSB0aGUgZXllcyBvZiBhbGwsIHdpdGggYSBncmFzc2hvcHBlciBpbiBpdHMgbW91dGgsIGEgcGFydCBvZiB3aGljaCBpdCB0aHJldyBkb3duIGFuZCBsZWZ0IHRoZXJlLCBhbmQgdGhlbiB3ZW50IGF3YXkgd2l0aCB0aGUgb3RoZXIgcGFydC4gRnJvbSB0aGlzIHRoZSBkaXZpbmVycyBhcHByZWhlbmRlZCBhIHF1YXJyZWxzb21lIGRpc3NlbnNpb24gYmV0d2VlbiB0aGUgbGFuZGVkIHByb3ByaWV0b3JzIGFuZCB0aGUgcG9wdWxhY2Ugb2YgdGhlIGNpdHkgYW5kIGZvcnVtOyBmb3IgdGhlIGxhdHRlciBpcyB2b2NpZmVyb3VzIGxpa2UgYSBncmFzc2hvcHBlciwgd2hpbGUgdGhlIGZvcm1lciBoYXVudCB0aGUgZmllbGRzIChsaWtlIHRoZSBzcGFycm93KS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlZWsgb2YgdGhpcyBzZW50ZW5jZSBpcyBhY2tub3dsZWRnZWQgYnkgYWxsIGVkaXRvcnMgdG8gYmUgY29ycnVwdC4gVGhlIHRyYW5zbGF0aW9uIGZvbGxvd3MgQ29yYVtldW1sICBdcy48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBkZWVtaW5nIHRoZSBjb25zdWxzaGlwIGEgc2xpZ2h0IG1hdHRlciBpbiBjb21wYXJpc29uIHdpdGggdGhpbmdzIHRvIGNvbWUsIGhpcyB0aG91Z2h0cyBzb2FyZWQgdG8gdGhlIE1pdGhyaWRhdGljIHdhci4gQnV0IGhlcmUgaGUgZm91bmQgYSByaXZhbCBpbiBNYXJpdXMsIHdobyB3YXMgcG9zc2Vzc2VkIGJ5IGFtYml0aW9uIGFuZCBhIG1hZCBkZXNpcmUgZm9yIGZhbWUsIHRob3NlIG5ldmVyIGFnZWluZyBwYXNzaW9ucy4gSGUgd2FzIG5vdyB1bndpZWxkeSBpbiBib2R5LCBhbmQgaW4gdGhlIHJlY2VudCBjYW1wYWlnbnMgaGFkIGdpdmVuIHVwIHNlcnZpY2Ugb24gYWNjb3VudCBvZiBoaXMgYWdlLCBhbmQgeWV0IHNldCBoaXMgaGVhcnQgdXBvbiBmb3JlaWduIHdhcnMgYmV5b25kIHRoZSBzZWFzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFN1bGxhIGhhZCBzZXQgb3V0IGZvciBoaXMgY2FtcCBvbiB1bmZpbmlzaGVkIGJ1c2luZXNzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3VsbGEgd2FzIG9jY3VwaWVkIHdpdGggdGhlIHNpZWdlIG9mIE5vbGEsIGluIENhbXBhbmlhLjwvbm90ZT4gaGUgaGltc2VsZiBrZXB0IGF0IGhvbWUgYW5kIGNvbnRyaXZlZCB0aGF0IG1vc3QgZmF0YWwgc2VkaXRpb24sIHdoaWNoIHdyb3VnaHQgUm9tZSBtb3JlIGhhcm0gdGhhbiBhbGwgaGVyIHdhcnMgdG9nZXRoZXIgaGFkIGRvbmUsIGFzIGluZGVlZCB0aGUgaGVhdmVubHkgcG93ZXJzIGZvcmVzaG93ZWQgdG8gdGhlbS4gRm9yIGZpcmUgYnJva2UgZm9ydGggb2YgaXRzIG93biBhY2NvcmQgZnJvbSB0aGUgc3RhdmVzIHdoaWNoIHN1cHBvcnRlZCB0aGUgZW5zaWducywgYW5kIHdhcyB3aXRoIGRpZmZpY3VsdHkgZXh0aW5ndWlzaGVkOyBhbmQgdGhyZWUgcmF2ZW5zIGJyb3VnaHQgdGhlaXIgeW91bmcgZm9ydGggaW50byB0aGUgc3RyZWV0IGFuZCBkZXZvdXJlZCB0aGVtLCBhbmQgdGhlbiBjYXJyaWVkIHRoZSByZW1haW5zIGJhY2sgYWdhaW4gaW50byB0aGVpciBuZXN0OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhZnRlciBtaWNlIGhhZCBnbmF3ZWQgY29uc2VjcmF0ZWQgZ29sZCBpbiBhIHRlbXBsZSwgdGhlIGtlZXBlcnMgY2F1Z2h0IG9uZSBvZiB0aGVtLCBhIGZlbWFsZSwgaW4gYSB0cmFwLCBhbmQgaW4gdGhlIHZlcnkgdHJhcCBzaGUgYnJvdWdodCBmb3J0aCBmaXZlIHlvdW5nIG9uZXMsIGFuZCBhdGUgdXAgdGhyZWUgb2YgdGhlbS4gQnV0IG1vc3QgaW1wb3J0YW50IG9mIGFsbCwgb3V0IG9mIGEgY2xvdWRsZXNzIGFuZCBjbGVhciBhaXIgdGhlcmUgcmFuZyBvdXQgdGhlIHZvaWNlIG9mIGEgdHJ1bXBldCwgcHJvbG9uZ2luZyBhIHNocmlsbCBhbmQgZGlzbWFsIG5vdGUsIHNvIHRoYXQgYWxsIHdlcmUgYW1hemVkIGFuZCB0ZXJyaWZpZWQgYXQgaXRzIGxvdWRuZXNzLiBUaGUgVHVzY2FuIHdpc2UgbWVuIGRlY2xhcmVkIHRoYXQgdGhlIHByb2RpZ3kgZm9yZXRva2VuZWQgYSBjaGFuZ2Ugb2YgY29uZGl0aW9ucyBhbmQgdGhlIGFkdmVudCBvZiBhIG5ldyBhZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhY2NvcmRpbmcgdG8gdGhlbSB0aGVyZSBhcmUgZWlnaHQgYWdlcyBpbiBhbGwsIGRpZmZlcmluZyBmcm9tIG9uZSBhbm90aGVyIGluIHRoZSBsaXZlcyBhbmQgY3VzdG9tcyBvZiBtZW4sIGFuZCB0byBlYWNoIG9mIHRoZXNlIEdvZCBoYXMgYXBwb2ludGVkIGEgZGVmaW5pdGUgbnVtYmVyIG9mIHRpbWVzIGFuZCBzZWFzb25zLCB3aGljaCBpcyBjb21wbGV0ZWQgYnkgdGhlIGNpcmN1aXQgb2YgYSBncmVhdCB5ZWFyLiBBbmQgd2hlbmV2ZXIgdGhpcyBjaXJjdWl0IGhhcyBydW4gb3V0LCBhbmQgYW5vdGhlciBiZWdpbnMsIHNvbWUgd29uZGVyZnVsIHNpZ24gaXMgc2VudCBmcm9tIGVhcnRoIG9yIGhlYXZlbiwgc28gdGhhdCBpdCBpcyBhdCBvbmNlIGNsZWFyIHRvIHRob3NlIHdobyBoYXZlIHN0dWRpZWQgc3VjaCBzdWJqZWN0cyBhbmQgYXJlIHZlcnNlZCBpbiB0aGVtLCB0aGF0IG1lbiBvZiBvdGhlciBoYWJpdHMgYW5kIG1vZGVzIG9mIGxpZmUgaGF2ZSBjb21lIGludG8gdGhlIHdvcmxkLCB3aG8gYXJlIGVpdGhlciBtb3JlIG9yIGxlc3Mgb2YgY29uY2VybiB0byB0aGUgZ29kcyB0aGFuIHRoZWlyIHByZWRlY2Vzc29ycyB3ZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGluZ3MsIHRoZXkgc2F5LCB1bmRlcmdvIGdyZWF0IGNoYW5nZXMsIGFzIG9uZSBhZ2Ugc3VjY2VlZHMgYW5vdGhlciwgYW5kIGVzcGVjaWFsbHkgdGhlIGFydCBvZiBkaXZpbmF0aW9uOyBhdCBvbmUgcGVyaW9kIGl0IHJpc2VzIGluIGVzdGVlbSBhbmQgaXMgc3VjY2Vzc2Z1bCBpbiBpdHMgcHJlZGljdGlvbnMsIGJlY2F1c2UgbWFuaWZlc3QgYW5kIGdlbnVpbmUgc2lnbnMgYXJlIHNlbnQgZm9ydGggZnJvbSB0aGUgRGVpdHk7IGFuZCBhZ2FpbiwgaW4gYW5vdGhlciBhZ2UsIGl0IGlzIGluIHNtYWxsIHJlcHV0ZSwgYmVpbmcgb2ZmLWhhbmQsIGZvciB0aGUgbW9zdCBwYXJ0LCBhbmQgc2Vla2luZyB0byBncmFzcCB0aGUgZnV0dXJlIGJ5IG1lYW5zIG9mIGZhaW50IGFuZCBibGluZCBzZW5zZXMuIFN1Y2gsIGF0IGFueSByYXRlLCB3YXMgdGhlIHRhbGUgdG9sZCBieSB0aGUgd2lzZXN0IG9mIHRoZSBUdXNjYW5zLCB3aG8gd2VyZSB0aG91Z2h0IHRvIGtub3cgbXVjaCBtb3JlIGFib3V0IGl0IHRoYW4gdGhlIHJlc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGlsZSB0aGUgc2VuYXRlIHdhcyBidXNpZWQgd2l0aCB0aGUgc29vdGhzYXllcnMgYWJvdXQgdGhlc2UgcHJvZGlnaWVzLCBhbmQgaG9sZGluZyBpdHMgc2Vzc2lvbiBpbiB0aGUgdGVtcGxlIG9mIEJlbGxvbmEsIGEgc3BhcnJvdyBjYW1lIGZseWluZyBpbiwgYmVmb3JlIHRoZSBleWVzIG9mIGFsbCwgd2l0aCBhIGdyYXNzaG9wcGVyIGluIGl0cyBtb3V0aCwgYSBwYXJ0IG9mIHdoaWNoIGl0IHRocmV3IGRvd24gYW5kIGxlZnQgdGhlcmUsIGFuZCB0aGVuIHdlbnQgYXdheSB3aXRoIHRoZSBvdGhlciBwYXJ0LiBGcm9tIHRoaXMgdGhlIGRpdmluZXJzIGFwcHJlaGVuZGVkIGEgcXVhcnJlbHNvbWUgZGlzc2Vuc2lvbiBiZXR3ZWVuIHRoZSBsYW5kZWQgcHJvcHJpZXRvcnMgYW5kIHRoZSBwb3B1bGFjZSBvZiB0aGUgY2l0eSBhbmQgZm9ydW07IGZvciB0aGUgbGF0dGVyIGlzIHZvY2lmZXJvdXMgbGlrZSBhIGdyYXNzaG9wcGVyLCB3aGlsZSB0aGUgZm9ybWVyIGhhdW50IHRoZSBmaWVsZHMgKGxpa2UgdGhlIHNwYXJyb3cpLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIEdyZWVrIG9mIHRoaXMgc2VudGVuY2UgaXMgYWNrbm93bGVkZ2VkIGJ5IGFsbCBlZGl0b3JzIHRvIGJlIGNvcnJ1cHQuIFRoZSB0cmFuc2xhdGlvbiBmb2xsb3dzIENvcmFbZXVtbCAgXXMuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBub3cgbWFkZSBhbGxpYW5jZSB3aXRoIFN1bHBpY2l1cyB3aG8gd2FzIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCBhIG1hbiBzZWNvbmQgdG8gbm9uZSBpbiBwcmltZSB2aWxsYWluaWVzLCBzbyB0aGF0IHRoZSBxdWVzdGlvbiB3YXMgbm90IHdob20gZWxzZSBoZSBzdXJwYXNzZWQgaW4gd2lja2VkbmVzcywgYnV0IGluIHdoYXQgaGUgc3VycGFzc2VkIGhpcyBvd24gd2lja2VkbmVzcy4gRm9yIHRoZSBjb21iaW5hdGlvbiBvZiBjcnVlbHR5LCBlZmZyb250ZXJ5LCBhbmQgcmFwYWNpdHkgaW4gaGltIHdhcyByZWdhcmRsZXNzIG9mIHNoYW1lIGFuZCBvZiBhbGwgZXZpbCwgc2luY2UgaGUgc29sZCB0aGUgUm9tYW4gY2l0aXplbnNoaXAgdG8gZnJlZWRtZW4gYW5kIGFsaWVucyBhdCBwdWJsaWMgc2FsZSwgYW5kIGNvdW50ZWQgb3V0IHRoZSBwcmljZSBvbiBhIG1vbmV5LXRhYmxlIHdoaWNoIHN0b29kIGluIHRoZSBmb3J1bS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGhlIG1haW50YWluZWQgdGhyZWUgdGhvdXNhbmQgc3dvcmRzbWVuLCBhbmQgaGFkIGFib3V0IGhpbSBhIGJvZHkgb2YgeW91bmcgbWVuIG9mIHRoZSBlcXVlc3RyaWFuIG9yZGVyIHdobyB3ZXJlIHJlYWR5IGZvciBldmVyeXRoaW5nLCBhbmQgd2hvbSBoZSBjYWxsZWQgaGlzIGFudGktc2VuYXRlLiBGdXJ0aGVyLCB0aG91Z2ggaGUgZ290IGEgbGF3IHBhc3NlZCB0aGF0IG5vIHNlbmF0b3Igc2hvdWxkIGluY3VyIGEgZGVidCBvZiBtb3JlIHRoYW4gdHdvIHRob3VzYW5kIGRyYWNobWFzLCBoZSBoaW1zZWxmIGxlZnQgYmVoaW5kIGhpbSBhZnRlciBkZWF0aCBhIGRlYnQgb2YgdGhyZWUgbWlsbGlvbnMuIFRoaXMgbWFuIHdhcyBub3cgbGV0IGxvb3NlIHVwb24gdGhlIHBlb3BsZSBieSBNYXJpdXMsIGFuZCBhZnRlciBjb25mb3VuZGluZyBhbGwgdGhpbmdzIGJ5IGZvcmNlIGFuZCB0aGUgc3dvcmQsIGhlIHByb3Bvc2VkIGNlcnRhaW4gdmljaW91cyBsYXdzLCBhbmQgcGFydGljdWxhcmx5IG9uZSBvZmZlcmluZyB0byBNYXJpdXMgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJldmVudCB2b3Rpbmcgb24gdGhlc2UsIHRoZSBjb25zdWxzIGRlY3JlZWQgc3VzcGVuc2lvbiBvZiBwdWJsaWMgYnVzaW5lc3MsIHdoZXJldXBvbiBTdWxwaWNpdXMgbGVkIGEgbW9iIGFnYWluc3QgdGhlbSwgYXMgdGhleSB3ZXJlIGhvbGRpbmcgYW4gYXNzZW1ibHkgbmVhciB0aGUgdGVtcGxlIG9mIENhc3RvciBhbmQgUG9sbHV4LCBhbmQsIGFtb25nc3QgbWFueSBvdGhlcnMsIHNsZXcgYWxzbyB0aGUgeW91bmcgc29uIG9mIFBvbXBlaXVzIHRoZSBjb25zdWwgaW4gdGhlIGZvcnVtOyBidXQgUG9tcGVpdXMgaGltc2VsZiBtYWRlIGhpcyBlc2NhcGUgdW5ub3RpY2VkLiBTdWxsYSwgaG93ZXZlciwgYWZ0ZXIgaGF2aW5nIGJlZW4gcHVyc3VlZCBpbnRvIHRoZSBob3VzZSBvZiBNYXJpdXMsIHdhcyBmb3JjZWQgdG8gY29tZSBmb3J0aCBhbmQgcmVzY2luZCB0aGUgZGVjcmVlIGZvciBzdXNwZW5zaW9uIG9mIHB1YmxpYyBidXNpbmVzczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGl0IHdhcyBiZWNhdXNlIGhlIGRpZCB0aGlzIHRoYXQgU3VscGljaXVzLCBhbHRob3VnaCBoZSBkZXBvc2VkIFBvbXBlaXVzLCBkaWQgbm90IHRha2UgdGhlIGNvbnN1bHNoaXAgYXdheSBmcm9tIFN1bGxhLCBidXQgbWVyZWx5IHRyYW5zZmVycmVkIHRoZSBleHBlZGl0aW9uIGFnYWluc3QgTWl0aHJpZGF0ZXMgdG8gdGhlIGNvbW1hbmQgb2YgTWFyaXVzLiBIZSBhbHNvIHNlbnQgbWlsaXRhcnkgdHJpYnVuZXMgYXQgb25jZSB0byBOb2xhLCB3aG8gd2VyZSB0byB0YWtlIG92ZXIgdGhlIGFybXkgdGhlcmUgYW5kIGNvbmR1Y3QgaXQgdG8gTWFyaXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgbm93IG1hZGUgYWxsaWFuY2Ugd2l0aCBTdWxwaWNpdXMgd2hvIHdhcyBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgYSBtYW4gc2Vjb25kIHRvIG5vbmUgaW4gcHJpbWUgdmlsbGFpbmllcywgc28gdGhhdCB0aGUgcXVlc3Rpb24gd2FzIG5vdCB3aG9tIGVsc2UgaGUgc3VycGFzc2VkIGluIHdpY2tlZG5lc3MsIGJ1dCBpbiB3aGF0IGhlIHN1cnBhc3NlZCBoaXMgb3duIHdpY2tlZG5lc3MuIEZvciB0aGUgY29tYmluYXRpb24gb2YgY3J1ZWx0eSwgZWZmcm9udGVyeSwgYW5kIHJhcGFjaXR5IGluIGhpbSB3YXMgcmVnYXJkbGVzcyBvZiBzaGFtZSBhbmQgb2YgYWxsIGV2aWwsIHNpbmNlIGhlIHNvbGQgdGhlIFJvbWFuIGNpdGl6ZW5zaGlwIHRvIGZyZWVkbWVuIGFuZCBhbGllbnMgYXQgcHVibGljIHNhbGUsIGFuZCBjb3VudGVkIG91dCB0aGUgcHJpY2Ugb24gYSBtb25leS10YWJsZSB3aGljaCBzdG9vZCBpbiB0aGUgZm9ydW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSBtYWludGFpbmVkIHRocmVlIHRob3VzYW5kIHN3b3Jkc21lbiwgYW5kIGhhZCBhYm91dCBoaW0gYSBib2R5IG9mIHlvdW5nIG1lbiBvZiB0aGUgZXF1ZXN0cmlhbiBvcmRlciB3aG8gd2VyZSByZWFkeSBmb3IgZXZlcnl0aGluZywgYW5kIHdob20gaGUgY2FsbGVkIGhpcyBhbnRpLXNlbmF0ZS4gRnVydGhlciwgdGhvdWdoIGhlIGdvdCBhIGxhdyBwYXNzZWQgdGhhdCBubyBzZW5hdG9yIHNob3VsZCBpbmN1ciBhIGRlYnQgb2YgbW9yZSB0aGFuIHR3byB0aG91c2FuZCBkcmFjaG1hcywgaGUgaGltc2VsZiBsZWZ0IGJlaGluZCBoaW0gYWZ0ZXIgZGVhdGggYSBkZWJ0IG9mIHRocmVlIG1pbGxpb25zLiBUaGlzIG1hbiB3YXMgbm93IGxldCBsb29zZSB1cG9uIHRoZSBwZW9wbGUgYnkgTWFyaXVzLCBhbmQgYWZ0ZXIgY29uZm91bmRpbmcgYWxsIHRoaW5ncyBieSBmb3JjZSBhbmQgdGhlIHN3b3JkLCBoZSBwcm9wb3NlZCBjZXJ0YWluIHZpY2lvdXMgbGF3cywgYW5kIHBhcnRpY3VsYXJseSBvbmUgb2ZmZXJpbmcgdG8gTWFyaXVzIHRoZSBjb21tYW5kIGluIHRoZSBNaXRocmlkYXRpYyB3YXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHByZXZlbnQgdm90aW5nIG9uIHRoZXNlLCB0aGUgY29uc3VscyBkZWNyZWVkIHN1c3BlbnNpb24gb2YgcHVibGljIGJ1c2luZXNzLCB3aGVyZXVwb24gU3VscGljaXVzIGxlZCBhIG1vYiBhZ2FpbnN0IHRoZW0sIGFzIHRoZXkgd2VyZSBob2xkaW5nIGFuIGFzc2VtYmx5IG5lYXIgdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIFBvbGx1eCwgYW5kLCBhbW9uZ3N0IG1hbnkgb3RoZXJzLCBzbGV3IGFsc28gdGhlIHlvdW5nIHNvbiBvZiBQb21wZWl1cyB0aGUgY29uc3VsIGluIHRoZSBmb3J1bTsgYnV0IFBvbXBlaXVzIGhpbXNlbGYgbWFkZSBoaXMgZXNjYXBlIHVubm90aWNlZC4gU3VsbGEsIGhvd2V2ZXIsIGFmdGVyIGhhdmluZyBiZWVuIHB1cnN1ZWQgaW50byB0aGUgaG91c2Ugb2YgTWFyaXVzLCB3YXMgZm9yY2VkIHRvIGNvbWUgZm9ydGggYW5kIHJlc2NpbmQgdGhlIGRlY3JlZSBmb3Igc3VzcGVuc2lvbiBvZiBwdWJsaWMgYnVzaW5lc3M7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpdCB3YXMgYmVjYXVzZSBoZSBkaWQgdGhpcyB0aGF0IFN1bHBpY2l1cywgYWx0aG91Z2ggaGUgZGVwb3NlZCBQb21wZWl1cywgZGlkIG5vdCB0YWtlIHRoZSBjb25zdWxzaGlwIGF3YXkgZnJvbSBTdWxsYSwgYnV0IG1lcmVseSB0cmFuc2ZlcnJlZCB0aGUgZXhwZWRpdGlvbiBhZ2FpbnN0IE1pdGhyaWRhdGVzIHRvIHRoZSBjb21tYW5kIG9mIE1hcml1cy4gSGUgYWxzbyBzZW50IG1pbGl0YXJ5IHRyaWJ1bmVzIGF0IG9uY2UgdG8gTm9sYSwgd2hvIHdlcmUgdG8gdGFrZSBvdmVyIHRoZSBhcm15IHRoZXJlIGFuZCBjb25kdWN0IGl0IHRvIE1hcml1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgc3VjY2VlZGVkIGluIG1ha2luZyBoaXMgZXNjYXBlIGFuZCByZWFjaGluZyB0aGUgY2FtcCBmaXJzdCwgYW5kIGhpcyBzb2xkaWVycywgd2hlbiB0aGV5IGxlYXJuZWQgd2hhdCBoYWQgaGFwcGVuZWQsIHN0b25lZCB0aGUgdHJpYnVuZXMgdG8gZGVhdGg7IGluIHJldHVybiBmb3Igd2hpY2gsIE1hcml1cyBhbmQgaGlzIHBhcnRpc2FucyBpbiB0aGUgY2l0eSB3ZW50IHRvIHNsYXlpbmcgdGhlIGZyaWVuZHMgb2YgU3VsbGEgYW5kIHBsdW5kZXJpbmcgdGhlaXIgcHJvcGVydHkuIFRoZW4gdGhlcmUgd2VyZSByZW1vdmFscyBhbmQgZmxpZ2h0cywgc29tZSBwYXNzaW5nIGNvbnRpbnVhbGx5IGZyb20gY2FtcCB0byBjaXR5LCBhbmQgb3RoZXJzIGZyb20gY2l0eSB0byBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VuYXRlIHdhcyBub3QgaXRzIG93biBtYXN0ZXIsIGJ1dCB3YXMgZ292ZXJuZWQgYnkgdGhlIGRpY3RhdGVzIG9mIE1hcml1cyBhbmQgU3VscGljaXVzLCBhbmQgd2hlbiBpdCBsZWFybmVkIHRoYXQgU3VsbGEgd2FzIG1hcmNoaW5nIGFnYWluc3QgdGhlIGNpdHksIGl0IHNlbnQgdHdvIG9mIHRoZSBwcmFldG9ycywgQnJ1dHVzIGFuZCBTZXJ2aWxpdXMsIHRvIGZvcmJpZCBoaXMgYWR2YW5jZS4gVGhlc2UgbWVuIGFkZHJlc3NlZCBTdWxsYSB3aXRoIHRvbyBtdWNoIGJvbGRuZXNzLCB3aGVyZXVwb24gaGlzIHNvbGRpZXJzIHdvdWxkIGhhdmUgZ2xhZGx5IHRvcm4gdGhlbSB0byBwaWVjZXMsIGJ1dCBjb250ZW50ZWQgdGhlbXNlbHZlcyB3aXRoIGJyZWFraW5nIHRoZWlyIGZhc2Nlcywgc3RyaXBwaW5nIHRoZW0gb2YgdGhlaXIgc2VuYXRvcmlhbCB0b2dhcywgaW5zdWx0aW5nIHRoZW0gaW4gbWFueSB3YXlzLCBhbmQgdGhlbiBzZW5kaW5nIHRoZW0gYmFjayB0byB0aGUgY2l0eS4gSGVyZSBhIHRlcnJpYmxlIGRlamVjdGlvbiB3YXMgcHJvZHVjZWQgYnkgdGhlIG1lcmUgc2lnaHQgb2YgdGhlbSwgc3RyaXBwZWQgb2YgdGhlaXIgcHJhZXRvcmlhbCBpbnNpZ25pYSwgYW5kIGJ5IHRoZWlyIGFubm91bmNlbWVudCB0aGF0IHRoZSBzZWRpdGlvbiBjb3VsZCBubyBsb25nZXIgYmUgY2hlY2tlZCwgYnV0IG11c3QgcnVuIGl0cyBjb3Vyc2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgc3VjY2VlZGVkIGluIG1ha2luZyBoaXMgZXNjYXBlIGFuZCByZWFjaGluZyB0aGUgY2FtcCBmaXJzdCwgYW5kIGhpcyBzb2xkaWVycywgd2hlbiB0aGV5IGxlYXJuZWQgd2hhdCBoYWQgaGFwcGVuZWQsIHN0b25lZCB0aGUgdHJpYnVuZXMgdG8gZGVhdGg7IGluIHJldHVybiBmb3Igd2hpY2gsIE1hcml1cyBhbmQgaGlzIHBhcnRpc2FucyBpbiB0aGUgY2l0eSB3ZW50IHRvIHNsYXlpbmcgdGhlIGZyaWVuZHMgb2YgU3VsbGEgYW5kIHBsdW5kZXJpbmcgdGhlaXIgcHJvcGVydHkuIFRoZW4gdGhlcmUgd2VyZSByZW1vdmFscyBhbmQgZmxpZ2h0cywgc29tZSBwYXNzaW5nIGNvbnRpbnVhbGx5IGZyb20gY2FtcCB0byBjaXR5LCBhbmQgb3RoZXJzIGZyb20gY2l0eSB0byBjYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzZW5hdGUgd2FzIG5vdCBpdHMgb3duIG1hc3RlciwgYnV0IHdhcyBnb3Zlcm5lZCBieSB0aGUgZGljdGF0ZXMgb2YgTWFyaXVzIGFuZCBTdWxwaWNpdXMsIGFuZCB3aGVuIGl0IGxlYXJuZWQgdGhhdCBTdWxsYSB3YXMgbWFyY2hpbmcgYWdhaW5zdCB0aGUgY2l0eSwgaXQgc2VudCB0d28gb2YgdGhlIHByYWV0b3JzLCBCcnV0dXMgYW5kIFNlcnZpbGl1cywgdG8gZm9yYmlkIGhpcyBhZHZhbmNlLiBUaGVzZSBtZW4gYWRkcmVzc2VkIFN1bGxhIHdpdGggdG9vIG11Y2ggYm9sZG5lc3MsIHdoZXJldXBvbiBoaXMgc29sZGllcnMgd291bGQgaGF2ZSBnbGFkbHkgdG9ybiB0aGVtIHRvIHBpZWNlcywgYnV0IGNvbnRlbnRlZCB0aGVtc2VsdmVzIHdpdGggYnJlYWtpbmcgdGhlaXIgZmFzY2VzLCBzdHJpcHBpbmcgdGhlbSBvZiB0aGVpciBzZW5hdG9yaWFsIHRvZ2FzLCBpbnN1bHRpbmcgdGhlbSBpbiBtYW55IHdheXMsIGFuZCB0aGVuIHNlbmRpbmcgdGhlbSBiYWNrIHRvIHRoZSBjaXR5LiBIZXJlIGEgdGVycmlibGUgZGVqZWN0aW9uIHdhcyBwcm9kdWNlZCBieSB0aGUgbWVyZSBzaWdodCBvZiB0aGVtLCBzdHJpcHBlZCBvZiB0aGVpciBwcmFldG9yaWFsIGluc2lnbmlhLCBhbmQgYnkgdGhlaXIgYW5ub3VuY2VtZW50IHRoYXQgdGhlIHNlZGl0aW9uIGNvdWxkIG5vIGxvbmdlciBiZSBjaGVja2VkLCBidXQgbXVzdCBydW4gaXRzIGNvdXJzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGFuZCBoaXMgcGFydGlzYW5zLCB0aGVuLCBidXNpZWQgdGhlbXNlbHZlcyB3aXRoIHByZXBhcmF0aW9uczsgd2hpbGUgU3VsbGEsIGF0IHRoZSBoZWFkIG9mIHNpeCBmdWxsIGxlZ2lvbnMsIG1vdmVkIHdpdGggaGlzIGNvbGxlYWd1ZSBmcm9tIE5vbGEsIGhpcyBhcm15LCBhcyBoZSBzYXcsIGJlaW5nIGVhZ2VyIHRvIG1hcmNoIGF0IG9uY2UgYWdhaW5zdCB0aGUgY2l0eSwgYWx0aG91Z2ggaGUgaGltc2VsZiB3YXZlcmVkIGluIGhpcyBvd24gbWluZCwgYW5kIGZlYXJlZCB0aGUgZGFuZ2VyLiBCdXQgYWZ0ZXIgaGUgaGFkIG9mZmVyZWQgYSBzYWNyaWZpY2UsIFBvc3R1bWl1cyB0aGUgc29vdGhzYXllciBsZWFybmVkIHdoYXQgdGhlIG9tZW5zIHdlcmUsIGFuZCBzdHJldGNoaW5nIG91dCBib3RoIGhhbmRzIHRvIFN1bGxhLCBiZWdnZWQgdGhhdCBoZSBtaWdodCBiZSBib3VuZCBhbmQga2VwdCBhIHByaXNvbmVyIHVudGlsIHRoZSBiYXR0bGUsIGFzc3VyaW5nIGhpbSB0aGF0IGhlIHdhcyB3aWxsaW5nIHRvIHVuZGVyZ28gdGhlIGV4dHJlbWVzdCBwZW5hbHR5IGlmIGFsbCB0aGluZ3MgZGlkIG5vdCBzcGVlZGlseSBjb21lIHRvIGEgZ29vZCBpc3N1ZSBmb3IgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCBhbHNvLCB0aGF0IHRvIFN1bGxhIGhpbXNlbGYgdGhlcmUgYXBwZWFyZWQgaW4gaGlzIGRyZWFtcyBhIGdvZGRlc3Mgd2hvbSB0aGUgUm9tYW5zIGxlYXJuZWQgdG8gd29yc2hpcCBmcm9tIHRoZSBDYXBwYWRvY2lhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGx1dGFyY2ggbXVzdCBtZWFuIHRoZSBbbGRxdW8gXUdyZWF0IE1vdGhlcixbcmRxdW8gXSBDeWJlbGUuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHh4LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGV0aGVyIHNoZSBpcyBMdW5hLCBvciBNaW5lcnZhLCBvciBCZWxsb25hLiBUaGlzIGdvZGRlc3MsIGFzIFN1bGxhIGZhbmNpZWQsIHN0b29kIGJ5IGhpcyBzaWRlIGFuZCBwdXQgaW50byBoaXMgaGFuZCBhIHRodW5kZXItYm9sdCwgYW5kIG5hbWluZyBoaXMgZW5lbWllcyBvbmUgYnkgb25lLCBiYWRlIGhpbSBzbWl0ZSB0aGVtIHdpdGggaXQ7IGFuZCB0aGV5IHdlcmUgYWxsIHNtaXR0ZW4sIGFuZCBmZWxsLCBhbmQgdmFuaXNoZWQgYXdheS4gRW5jb3VyYWdlZCBieSB0aGUgdmlzaW9uLCBoZSB0b2xkIGl0IHRvIGhpcyBjb2xsZWFndWUsIGFuZCBhdCBicmVhayBvZiBkYXkgbGVkIG9uIHRvd2FyZHMgUm9tZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBhbmQgaGlzIHBhcnRpc2FucywgdGhlbiwgYnVzaWVkIHRoZW1zZWx2ZXMgd2l0aCBwcmVwYXJhdGlvbnM7IHdoaWxlIFN1bGxhLCBhdCB0aGUgaGVhZCBvZiBzaXggZnVsbCBsZWdpb25zLCBtb3ZlZCB3aXRoIGhpcyBjb2xsZWFndWUgZnJvbSBOb2xhLCBoaXMgYXJteSwgYXMgaGUgc2F3LCBiZWluZyBlYWdlciB0byBtYXJjaCBhdCBvbmNlIGFnYWluc3QgdGhlIGNpdHksIGFsdGhvdWdoIGhlIGhpbXNlbGYgd2F2ZXJlZCBpbiBoaXMgb3duIG1pbmQsIGFuZCBmZWFyZWQgdGhlIGRhbmdlci4gQnV0IGFmdGVyIGhlIGhhZCBvZmZlcmVkIGEgc2FjcmlmaWNlLCBQb3N0dW1pdXMgdGhlIHNvb3Roc2F5ZXIgbGVhcm5lZCB3aGF0IHRoZSBvbWVucyB3ZXJlLCBhbmQgc3RyZXRjaGluZyBvdXQgYm90aCBoYW5kcyB0byBTdWxsYSwgYmVnZ2VkIHRoYXQgaGUgbWlnaHQgYmUgYm91bmQgYW5kIGtlcHQgYSBwcmlzb25lciB1bnRpbCB0aGUgYmF0dGxlLCBhc3N1cmluZyBoaW0gdGhhdCBoZSB3YXMgd2lsbGluZyB0byB1bmRlcmdvIHRoZSBleHRyZW1lc3QgcGVuYWx0eSBpZiBhbGwgdGhpbmdzIGRpZCBub3Qgc3BlZWRpbHkgY29tZSB0byBhIGdvb2QgaXNzdWUgZm9yIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIGFsc28sIHRoYXQgdG8gU3VsbGEgaGltc2VsZiB0aGVyZSBhcHBlYXJlZCBpbiBoaXMgZHJlYW1zIGEgZ29kZGVzcyB3aG9tIHRoZSBSb21hbnMgbGVhcm5lZCB0byB3b3JzaGlwIGZyb20gdGhlIENhcHBhZG9jaWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIG11c3QgbWVhbiB0aGUgW2xkcXVvIF1HcmVhdCBNb3RoZXIsW3JkcXVvIF0gQ3liZWxlLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4eHguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZXRoZXIgc2hlIGlzIEx1bmEsIG9yIE1pbmVydmEsIG9yIEJlbGxvbmEuIFRoaXMgZ29kZGVzcywgYXMgU3VsbGEgZmFuY2llZCwgc3Rvb2QgYnkgaGlzIHNpZGUgYW5kIHB1dCBpbnRvIGhpcyBoYW5kIGEgdGh1bmRlci1ib2x0LCBhbmQgbmFtaW5nIGhpcyBlbmVtaWVzIG9uZSBieSBvbmUsIGJhZGUgaGltIHNtaXRlIHRoZW0gd2l0aCBpdDsgYW5kIHRoZXkgd2VyZSBhbGwgc21pdHRlbiwgYW5kIGZlbGwsIGFuZCB2YW5pc2hlZCBhd2F5LiBFbmNvdXJhZ2VkIGJ5IHRoZSB2aXNpb24sIGhlIHRvbGQgaXQgdG8gaGlzIGNvbGxlYWd1ZSwgYW5kIGF0IGJyZWFrIG9mIGRheSBsZWQgb24gdG93YXJkcyBSb21lLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIHh4eC4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4eHguIDEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgcmVhY2hlZCBQaWN0YWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBwbGFjZSBvZiBwdWJsaWMgZW50ZXJ0YWlubWVudCBhIGZldyBtaWxlcyBzb3V0aCBvZiBSb21lICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3RyYWIuIDUuMy45IiB2YWxpZD0ieWVzIj5TdHJhYm8sIHYuIDMsIDk8L2JpYmw+KS4gVGhlIG5hbWUgaGFzIGJlZW4gc3Vic3RpdHV0ZWQgZm9yIHRoZSBQaWNpbmFlIG9mIHRoZSBiZXN0IE1TLiwgYWJvdXQgd2hpY2ggbm90aGluZyBpcyBrbm93bi48L25vdGU+IGhlIHdhcyBtZXQgYnkgYSBkZXB1dGF0aW9uIGZyb20gdGhlIGNpdHksIHdoaWNoIGJlZ2dlZCBoaW0gbm90IHRvIGFkdmFuY2UgdG8gYW4gaW1tZWRpYXRlIGF0dGFjaywgc2luY2UgdGhlIHNlbmF0ZSBoYWQgdm90ZWQgdGhhdCBoZSBzaG91bGQgaGF2ZSBhbGwgaGlzIHJpZ2h0czsgaGUgdGhlcmVmb3JlIGFncmVlZCB0byBlbmNhbXAgdGhlcmUsIGFuZCBvcmRlcmVkIGhpcyBvZmZpY2VycyB0byBtZWFzdXJlIG91dCB0aGUgZ3JvdW5kLCBhcyB3YXMgdXN1YWwsIGZvciB0aGUgY2FtcCwgc28gdGhhdCB0aGUgZGVwdXRhdGlvbiByZXR1cm5lZCB0byB0aGUgY2l0eSBiZWxpZXZpbmcgdGhhdCBoZSB3b3VsZCBkbyBzby4gQnV0IG5vIHNvb25lciB3ZXJlIHRoZXkgZ29uZSB0aGFuIGhlIHNlbnQgZm9yd2FyZCBMdWNpdXMgQmFzaWxsdXMgYW5kIENhaXVzIE11bW1pdXMsIHdobyBzZWl6ZWQgZm9yIGhpbSB0aGUgY2l0eS1nYXRlIGFuZCB0aGUgd2FsbHMgb24gdGhlIEVzcXVpbGluZSBoaWxsOyB0aGVuIGhlIGhpbXNlbGYgZm9sbG93ZWQgaGFyZCBhZnRlciB0aGVtIHdpdGggYWxsIHNwZWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CYXNpbGx1cyBhbmQgaGlzIG1lbiBidXJzdCBpbnRvIHRoZSBjaXR5IGFuZCB3ZXJlIGZvcmNpbmcgdGhlaXIgd2F5IGFsb25nLCB3aGVuIHRoZSB1bmFybWVkIG11bHRpdHVkZSBwZWx0ZWQgdGhlbSB3aXRoIHN0b25lcyBhbmQgdGlsZXMgZnJvbSB0aGUgcm9vZnMgb2YgdGhlIGhvdXNlcywgc3RvcHBlZCB0aGVpciBmdXJ0aGVyIHByb2dyZXNzLCBhbmQgY3Jvd2RlZCB0aGVtIGJhY2sgdG8gdGhlIHdhbGwuIEJ1dCBieSB0aGlzIHRpbWUgU3VsbGEgd2FzIGF0IGhhbmQsIGFuZCBzZWVpbmcgd2hhdCB3YXMgZ29pbmcgb24sIHNob3V0ZWQgb3JkZXJzIHRvIHNldCBmaXJlIHRvIHRoZSBob3VzZXMsIGFuZCBzZWl6aW5nIGEgYmxhemluZyB0b3JjaCwgbGVkIHRoZSB3YXkgaGltc2VsZiwgYW5kIG9yZGVyZWQgaGlzIGFyY2hlcnMgdG8gdXNlIHRoZWlyIGZpcmUtYm9sdHMgYW5kIHNob290IHRoZW0gdXAgYXQgdGhlIHJvb2ZzLiBUaGlzIGhlIGRpZCBub3QgZnJvbSBhbnkgY2FsbSBjYWxjdWxhdGlvbiwgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGluIGEgcGFzc2lvbiwgYW5kIGhhdmluZyBzdXJyZW5kZXJlZCB0byBoaXMgYW5nZXIgdGhlIGNvbW1hbmQgb3ZlciBoaXMgYWN0aW9ucywgc2luY2UgaGUgdGhvdWdodCBvbmx5IG9mIGhpcyBlbmVtaWVzLCBhbmQgd2l0aG91dCBhbnkgcmVnYXJkIG9yIGV2ZW4gcGl0eSBmb3IgZnJpZW5kcyBhbmQga2luZHJlZCBhbmQgcmVsYXRpb25zLCBtYWRlIGhpcyBlbnRyeSBieSB0aGUgYWlkIG9mIGZpcmUsIHdoaWNoIG1hZGUgbm8gZGlzdGluY3Rpb24gYmV0d2VlbiB0aGUgZ3VpbHR5IGFuZCB0aGUgaW5ub2NlbnQuIE1lYW53aGlsZSBNYXJpdXMsIHdobyBoYWQgYmVlbiBkcml2ZW4gYmFjayB0byB0aGUgdGVtcGxlIG9mIFRlbGx1cywgbWFkZSBhIHByb2NsYW1hdGlvbiBjYWxsaW5nIHRoZSBzbGF2ZXMgdG8gaGlzIHN1cHBvcnQgdW5kZXIgcHJvbWlzZSBvZiBmcmVlZG9tOyBidXQgdGhlIGVuZW15IGNvbWluZyBvbiwgaGUgd2FzIG92ZXJwb3dlcmVkIGFuZCBmbGVkIGZyb20gdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIHJlYWNoZWQgUGljdGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBwbGFjZSBvZiBwdWJsaWMgZW50ZXJ0YWlubWVudCBhIGZldyBtaWxlcyBzb3V0aCBvZiBSb21lICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gNS4zLjkiIHZhbGlkPSJ5ZXMiPlN0cmFibywgdi4gMywgOTwvYmlibD4pLiBUaGUgbmFtZSBoYXMgYmVlbiBzdWJzdGl0dXRlZCBmb3IgdGhlIFBpY2luYWUgb2YgdGhlIGJlc3QgTVMuLCBhYm91dCB3aGljaCBub3RoaW5nIGlzIGtub3duLjwvbm90ZT4gaGUgd2FzIG1ldCBieSBhIGRlcHV0YXRpb24gZnJvbSB0aGUgY2l0eSwgd2hpY2ggYmVnZ2VkIGhpbSBub3QgdG8gYWR2YW5jZSB0byBhbiBpbW1lZGlhdGUgYXR0YWNrLCBzaW5jZSB0aGUgc2VuYXRlIGhhZCB2b3RlZCB0aGF0IGhlIHNob3VsZCBoYXZlIGFsbCBoaXMgcmlnaHRzOyBoZSB0aGVyZWZvcmUgYWdyZWVkIHRvIGVuY2FtcCB0aGVyZSwgYW5kIG9yZGVyZWQgaGlzIG9mZmljZXJzIHRvIG1lYXN1cmUgb3V0IHRoZSBncm91bmQsIGFzIHdhcyB1c3VhbCwgZm9yIHRoZSBjYW1wLCBzbyB0aGF0IHRoZSBkZXB1dGF0aW9uIHJldHVybmVkIHRvIHRoZSBjaXR5IGJlbGlldmluZyB0aGF0IGhlIHdvdWxkIGRvIHNvLiBCdXQgbm8gc29vbmVyIHdlcmUgdGhleSBnb25lIHRoYW4gaGUgc2VudCBmb3J3YXJkIEx1Y2l1cyBCYXNpbGx1cyBhbmQgQ2FpdXMgTXVtbWl1cywgd2hvIHNlaXplZCBmb3IgaGltIHRoZSBjaXR5LWdhdGUgYW5kIHRoZSB3YWxscyBvbiB0aGUgRXNxdWlsaW5lIGhpbGw7IHRoZW4gaGUgaGltc2VsZiBmb2xsb3dlZCBoYXJkIGFmdGVyIHRoZW0gd2l0aCBhbGwgc3BlZWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3RyYWIuIDUuMy45IiB2YWxpZD0ieWVzIj5TdHJhYm8sIHYuIDMsIDk8L2JpYmw+KS4gVGhlIG5hbWUgaGFzIGJlZW4gc3Vic3RpdHV0ZWQgZm9yIHRoZSBQaWNpbmFlIG9mIHRoZSBiZXN0IE1TLiwgYWJvdXQgd2hpY2ggbm90aGluZyBpcyBrbm93bi48L3RyYW5zbGF0aW9uPg=="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJhc2lsbHVzIGFuZCBoaXMgbWVuIGJ1cnN0IGludG8gdGhlIGNpdHkgYW5kIHdlcmUgZm9yY2luZyB0aGVpciB3YXkgYWxvbmcsIHdoZW4gdGhlIHVuYXJtZWQgbXVsdGl0dWRlIHBlbHRlZCB0aGVtIHdpdGggc3RvbmVzIGFuZCB0aWxlcyBmcm9tIHRoZSByb29mcyBvZiB0aGUgaG91c2VzLCBzdG9wcGVkIHRoZWlyIGZ1cnRoZXIgcHJvZ3Jlc3MsIGFuZCBjcm93ZGVkIHRoZW0gYmFjayB0byB0aGUgd2FsbC4gQnV0IGJ5IHRoaXMgdGltZSBTdWxsYSB3YXMgYXQgaGFuZCwgYW5kIHNlZWluZyB3aGF0IHdhcyBnb2luZyBvbiwgc2hvdXRlZCBvcmRlcnMgdG8gc2V0IGZpcmUgdG8gdGhlIGhvdXNlcywgYW5kIHNlaXppbmcgYSBibGF6aW5nIHRvcmNoLCBsZWQgdGhlIHdheSBoaW1zZWxmLCBhbmQgb3JkZXJlZCBoaXMgYXJjaGVycyB0byB1c2UgdGhlaXIgZmlyZS1ib2x0cyBhbmQgc2hvb3QgdGhlbSB1cCBhdCB0aGUgcm9vZnMuIFRoaXMgaGUgZGlkIG5vdCBmcm9tIGFueSBjYWxtIGNhbGN1bGF0aW9uLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbiBhIHBhc3Npb24sIGFuZCBoYXZpbmcgc3VycmVuZGVyZWQgdG8gaGlzIGFuZ2VyIHRoZSBjb21tYW5kIG92ZXIgaGlzIGFjdGlvbnMsIHNpbmNlIGhlIHRob3VnaHQgb25seSBvZiBoaXMgZW5lbWllcywgYW5kIHdpdGhvdXQgYW55IHJlZ2FyZCBvciBldmVuIHBpdHkgZm9yIGZyaWVuZHMgYW5kIGtpbmRyZWQgYW5kIHJlbGF0aW9ucywgbWFkZSBoaXMgZW50cnkgYnkgdGhlIGFpZCBvZiBmaXJlLCB3aGljaCBtYWRlIG5vIGRpc3RpbmN0aW9uIGJldHdlZW4gdGhlIGd1aWx0eSBhbmQgdGhlIGlubm9jZW50LiBNZWFud2hpbGUgTWFyaXVzLCB3aG8gaGFkIGJlZW4gZHJpdmVuIGJhY2sgdG8gdGhlIHRlbXBsZSBvZiBUZWxsdXMsIG1hZGUgYSBwcm9jbGFtYXRpb24gY2FsbGluZyB0aGUgc2xhdmVzIHRvIGhpcyBzdXBwb3J0IHVuZGVyIHByb21pc2Ugb2YgZnJlZWRvbTsgYnV0IHRoZSBlbmVteSBjb21pbmcgb24sIGhlIHdhcyBvdmVycG93ZXJlZCBhbmQgZmxlZCBmcm9tIHRoZSBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSBub3cgY2FsbGVkIHRvZ2V0aGVyIHRoZSBzZW5hdGUsIGFuZCBoYWQgc2VudGVuY2Ugb2YgZGVhdGggcGFzc2VkIG9uIE1hcml1cyBoaW1zZWxmIGFuZCBhIGZldyBvdGhlcnMsIGFtb25nIHdob20gd2FzIFN1bHBpY2l1cyB0aGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLiBCdXQgU3VscGljaXVzIHdhcyBraWxsZWQsIGFmdGVyIGhlIGhhZCBiZWVuIGJldHJheWVkIGJ5IGEgc2VydmFudCwgdG8gd2hvbSBTdWxsYSBmaXJzdCBnYXZlIGhpcyBmcmVlZG9tLCBhbmQgdGhlbiBoYWQgaGltIHRocm93biBkb3duIHRoZSBUYXJwZWlhbiByb2NrOyBtb3Jlb3ZlciwgaGUgc2V0IGEgcHJpY2Ugb24gdGhlIGhlYWQgb2YgTWFyaXVzLCBhbiBhY3QgYm90aCB1bmdyYXRlZnVsIGFuZCBpbXBvbGl0aWMsIHNpbmNlIGl0IHdhcyBpbiBoaXMgaG91c2UgdGhhdCBoZSBoYWQgZm91bmQgcmVmdWdlIGFuZCBzdXJyZW5kZXJlZCBoaW1zZWxmIGEgbGl0dGxlIGJlZm9yZSB0aGlzLCBhbmQgaGFkIGJlZW4gbGV0IG9mZiBzYWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGhhZCBNYXJpdXMgYXQgdGhhdCB0aW1lIG5vdCBsZXQgU3VsbGEgZ28sIGJ1dCBnaXZlbiBoaW0gdXAgdG8gZGVhdGggYXQgdGhlIGhhbmRzIG9mIFN1bHBpY2l1cywgaGUgbWlnaHQgaGF2ZSBiZWVuIGFic29sdXRlIG1hc3RlciBpbiBSb21lOyBuZXZlcnRoZWxlc3MgaGUgc3BhcmVkIGhpcyBsaWZlLCBhbmQgd2hlbiBhZnRlciBhIGZldyBkYXlzIGhlIGhhZCBnaXZlbiBoaW0gdGhlIHNhbWUgb3Bwb3J0dW5pdHksIGhlIGRpZCBub3Qgb2J0YWluIGxpa2UgbWVyY3kuIEJ5IHRoZXNlIHByb2NlZWRpbmdzIFN1bGxhIHdvbiB0aGUgc2VjcmV0IGRpc2xpa2Ugb2YgdGhlIHNlbmF0ZTsgYnV0IHRoZSBwZW9wbGUncyBoYXRyZWQgYW5kIGluZGlnbmF0aW9uIHdhcyBtYWRlIG1hbmlmZXN0IHRvIGhpbSBieSB0aGVpciBhY3RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW5zdGFuY2UsIHRoZXkgaWdub21pbmlvdXNseSByZWplY3RlZCBOb25pdXMgaGlzIG5lcGhldywgYW5kIFNlcnZpdXMsIHdobyB3ZXJlIGhpcyBjYW5kaWRhdGVzIGZvciBvZmZpY2VzLCBhbmQgYXBwb2ludGVkIG90aGVycywgd2hvc2UgcHJlZmVybWVudCB0aGV5IHRob3VnaHQgd291bGQgYmUgbW9zdCB2ZXhpbmcgdG8gaGltLiBCdXQgaGUgcHJldGVuZGVkIHRvIGJlIHBsZWFzZWQgYXQgdGhpcywgc2F5aW5nIHRoYXQgdGhlIHBlb3BsZSwgaW4gZG9pbmcgYXMgaXQgcGxlYXNlZCwgZW5qb3llZCBhIGZyZWVkb20gd2hpY2ggd2FzIGR1ZSB0byBoaW0sIGFuZCBvdXQgb2YgZGVmZXJlbmNlIHRvIHRoZSBoYXRyZWQgb2YgdGhlIG11bHRpdHVkZSBhbGxvd2VkIEx1Y2l1cyBDaW5uYSwgYSBtYW4gb2YgdGhlIG9wcG9zaXRlIGZhY3Rpb24sIHRvIGJlIGludmVzdGVkIHdpdGggdGhlIGNvbnN1bHNoaXAsIGFmdGVyIGJpbmRpbmcgaGltIGJ5IHNvbGVtbiBvYXRocyB0byBiZSBmYXZvdXJhYmxlIHRvIGhpcyBwb2xpY2llcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIENpbm5hIHdlbnQgdXAgdG8gdGhlIENhcGl0b2wgd2l0aCBhIHN0b25lIGluIGhpcyBoYW5kIGFuZCB0b29rIHRoZSBvYXRocywgYW5kIHRoZW4sIGFmdGVyIHByYXlpbmcgdGhhdCBpZiBoZSBkaWQgbm90IG1haW50YWluIGhpcyBnb29kd2lsbCB0b3dhcmRzIFN1bGxhLCBoZSBtaWdodCBiZSBjYXN0IG91dCBvZiB0aGUgY2l0eSwgYXMgdGhlIHN0b25lIGZyb20gaGlzIGhhbmQsIGhlIHRocmV3IHRoZSBzdG9uZSB1cG9uIHRoZSBncm91bmQgaW4gdGhlIHNpZ2h0IG9mIG1hbnkgcGVvcGxlLiBCdXQgYXMgc29vbiBhcyBoZSBoYWQgZW50ZXJlZCB1cG9uIGhpcyBvZmZpY2UsIGhlIHRyaWVkIHRvIHN1YnZlcnQgdGhlIGV4aXN0aW5nIG9yZGVyIG9mIHRoaW5ncywgYW5kIGhhZCBhbiBpbXBlYWNobWVudCBwcmVwYXJlZCBhZ2FpbnN0IFN1bGxhLCBhbmQgYXBwb2ludGVkIFZpcmdpbml1cywgYSB0cmlidW5lIG9mIHRoZSBwZW9wbGUsIHRvIGJlIGhpcyBhY2N1c2VyLiBCdXQgU3VsbGEsIGlnbm9yaW5nIGFsaWtlIGFjY3VzZXIgYW5kIGNvdXJ0LCBzZXQgb3V0IGFnYWluc3QgTWl0aHJpZGF0ZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm93IGNhbGxlZCB0b2dldGhlciB0aGUgc2VuYXRlLCBhbmQgaGFkIHNlbnRlbmNlIG9mIGRlYXRoIHBhc3NlZCBvbiBNYXJpdXMgaGltc2VsZiBhbmQgYSBmZXcgb3RoZXJzLCBhbW9uZyB3aG9tIHdhcyBTdWxwaWNpdXMgdGhlIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZS4gQnV0IFN1bHBpY2l1cyB3YXMga2lsbGVkLCBhZnRlciBoZSBoYWQgYmVlbiBiZXRyYXllZCBieSBhIHNlcnZhbnQsIHRvIHdob20gU3VsbGEgZmlyc3QgZ2F2ZSBoaXMgZnJlZWRvbSwgYW5kIHRoZW4gaGFkIGhpbSB0aHJvd24gZG93biB0aGUgVGFycGVpYW4gcm9jazsgbW9yZW92ZXIsIGhlIHNldCBhIHByaWNlIG9uIHRoZSBoZWFkIG9mIE1hcml1cywgYW4gYWN0IGJvdGggdW5ncmF0ZWZ1bCBhbmQgaW1wb2xpdGljLCBzaW5jZSBpdCB3YXMgaW4gaGlzIGhvdXNlIHRoYXQgaGUgaGFkIGZvdW5kIHJlZnVnZSBhbmQgc3VycmVuZGVyZWQgaGltc2VsZiBhIGxpdHRsZSBiZWZvcmUgdGhpcywgYW5kIGhhZCBiZWVuIGxldCBvZmYgc2FmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGFkIE1hcml1cyBhdCB0aGF0IHRpbWUgbm90IGxldCBTdWxsYSBnbywgYnV0IGdpdmVuIGhpbSB1cCB0byBkZWF0aCBhdCB0aGUgaGFuZHMgb2YgU3VscGljaXVzLCBoZSBtaWdodCBoYXZlIGJlZW4gYWJzb2x1dGUgbWFzdGVyIGluIFJvbWU7IG5ldmVydGhlbGVzcyBoZSBzcGFyZWQgaGlzIGxpZmUsIGFuZCB3aGVuIGFmdGVyIGEgZmV3IGRheXMgaGUgaGFkIGdpdmVuIGhpbSB0aGUgc2FtZSBvcHBvcnR1bml0eSwgaGUgZGlkIG5vdCBvYnRhaW4gbGlrZSBtZXJjeS4gQnkgdGhlc2UgcHJvY2VlZGluZ3MgU3VsbGEgd29uIHRoZSBzZWNyZXQgZGlzbGlrZSBvZiB0aGUgc2VuYXRlOyBidXQgdGhlIHBlb3BsZSdzIGhhdHJlZCBhbmQgaW5kaWduYXRpb24gd2FzIG1hZGUgbWFuaWZlc3QgdG8gaGltIGJ5IHRoZWlyIGFjdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGhleSBpZ25vbWluaW91c2x5IHJlamVjdGVkIE5vbml1cyBoaXMgbmVwaGV3LCBhbmQgU2Vydml1cywgd2hvIHdlcmUgaGlzIGNhbmRpZGF0ZXMgZm9yIG9mZmljZXMsIGFuZCBhcHBvaW50ZWQgb3RoZXJzLCB3aG9zZSBwcmVmZXJtZW50IHRoZXkgdGhvdWdodCB3b3VsZCBiZSBtb3N0IHZleGluZyB0byBoaW0uIEJ1dCBoZSBwcmV0ZW5kZWQgdG8gYmUgcGxlYXNlZCBhdCB0aGlzLCBzYXlpbmcgdGhhdCB0aGUgcGVvcGxlLCBpbiBkb2luZyBhcyBpdCBwbGVhc2VkLCBlbmpveWVkIGEgZnJlZWRvbSB3aGljaCB3YXMgZHVlIHRvIGhpbSwgYW5kIG91dCBvZiBkZWZlcmVuY2UgdG8gdGhlIGhhdHJlZCBvZiB0aGUgbXVsdGl0dWRlIGFsbG93ZWQgTHVjaXVzIENpbm5hLCBhIG1hbiBvZiB0aGUgb3Bwb3NpdGUgZmFjdGlvbiwgdG8gYmUgaW52ZXN0ZWQgd2l0aCB0aGUgY29uc3Vsc2hpcCwgYWZ0ZXIgYmluZGluZyBoaW0gYnkgc29sZW1uIG9hdGhzIHRvIGJlIGZhdm91cmFibGUgdG8gaGlzIHBvbGljaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDaW5uYSB3ZW50IHVwIHRvIHRoZSBDYXBpdG9sIHdpdGggYSBzdG9uZSBpbiBoaXMgaGFuZCBhbmQgdG9vayB0aGUgb2F0aHMsIGFuZCB0aGVuLCBhZnRlciBwcmF5aW5nIHRoYXQgaWYgaGUgZGlkIG5vdCBtYWludGFpbiBoaXMgZ29vZHdpbGwgdG93YXJkcyBTdWxsYSwgaGUgbWlnaHQgYmUgY2FzdCBvdXQgb2YgdGhlIGNpdHksIGFzIHRoZSBzdG9uZSBmcm9tIGhpcyBoYW5kLCBoZSB0aHJldyB0aGUgc3RvbmUgdXBvbiB0aGUgZ3JvdW5kIGluIHRoZSBzaWdodCBvZiBtYW55IHBlb3BsZS4gQnV0IGFzIHNvb24gYXMgaGUgaGFkIGVudGVyZWQgdXBvbiBoaXMgb2ZmaWNlLCBoZSB0cmllZCB0byBzdWJ2ZXJ0IHRoZSBleGlzdGluZyBvcmRlciBvZiB0aGluZ3MsIGFuZCBoYWQgYW4gaW1wZWFjaG1lbnQgcHJlcGFyZWQgYWdhaW5zdCBTdWxsYSwgYW5kIGFwcG9pbnRlZCBWaXJnaW5pdXMsIGEgdHJpYnVuZSBvZiB0aGUgcGVvcGxlLCB0byBiZSBoaXMgYWNjdXNlci4gQnV0IFN1bGxhLCBpZ25vcmluZyBhbGlrZSBhY2N1c2VyIGFuZCBjb3VydCwgc2V0IG91dCBhZ2FpbnN0IE1pdGhyaWRhdGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBhYm91dCB0aGUgdGltZSB3aGVuIFN1bGxhIHdhcyBtb3ZpbmcgaGlzIGFybWFtZW50IGZyb20gSXRhbHksIE1pdGhyaWRhdGVzLCB3aG8gd2FzIHN0YXlpbmcgYXQgUGVyZ2FtdW0sIHdhcyB2aXNpdGVkIHdpdGggbWFueSBvdGhlciBwb3J0ZW50cyBmcm9tIEhlYXZlbiwgYW5kIHRoYXQgYSBWaWN0b3J5IHdpdGggYSBjcm93biBpbiBoZXIgaGFuZCwgd2hpY2ggdGhlIFBlcmdhbWVuaWFucyB3ZXJlIGxvd2VyaW5nIHRvd2FyZHMgaGltIGJ5IG1hY2hpbmVyeSBvZiBzb21lIHNvcnQsIHdhcyBicm9rZW4gdG8gcGllY2VzIGp1c3QgYXMgc2hlIHdhcyBhYm91dCB0byB0b3VjaCBoaXMgaGVhZCwgYW5kIHRoZSBjcm93biB3ZW50IHR1bWJsaW5nIGZyb20gaGVyIGhhbmQgdG8gdGhlIGdyb3VuZCBpbiB0aGUgbWlkc3Qgb2YgdGhlIHRoZWF0cmUsIGFuZCB3YXMgc2hhdHRlcmVkLCB3aGVyZWF0IHRoZSBwZW9wbGUgc2h1ZGRlcmVkLCBhbmQgTWl0aHJpZGF0ZXMgd2FzIGdyZWF0bHkgZGVqZWN0ZWQsIGFsdGhvdWdoIGF0IHRoYXQgdGltZSBoaXMgYWZmYWlycyB3ZXJlIHByb3NwZXJpbmcgYmV5b25kIGhpcyBob3Blcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhpbXNlbGYgaGFkIHdyZXN0ZWQgQXNpYSBmcm9tIHRoZSBSb21hbnMsIGFuZCBCaXRoeW5pYSBhbmQgQ2FwcGFkb2NpYSBmcm9tIHRoZWlyIGtpbmdzLCBhbmQgd2FzIG5vdyBzZXQgZG93biBpbiBQZXJnYW11bSwgZGlzcGVuc2luZyByaWNoZXMsIHByaW5jaXBhbGl0aWVzLCBhbmQgc292ZXJlaWdudGllcyB0byBoaXMgZnJpZW5kczsgYW5kIG9mIGhpcyBzb25zLCBvbmUgd2FzIGluIFBvbnR1cyBhbmQgQm9zcG9ydXMsIGhvbGRpbmcgd2l0aG91dCBhbnkgb3Bwb3NpdGlvbiB0aGUgYW5jaWVudCByZWFsbSBhcyBmYXIgYXMgdGhlIGRlc2VydHMgYmV5b25kIExha2UgTWFlb3Rpcywgd2hpbGUgQXJpYXJhdGhlcyB3YXMgb3ZlcnJ1bm5pbmcgVGhyYWNlIGFuZCBNYWNlZG9uaWEgd2l0aCBhIGxhcmdlIGFybXksIGFuZCB0cnlpbmcgdG8gd2luIHRoZW0gb3ZlcjsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+aGlzIGdlbmVyYWxzLCB0b28sIHdpdGggZm9yY2VzIHVuZGVyIHRoZW0sIHdlcmUgc3ViZHVpbmcgb3RoZXIgcmVnaW9ucywgYW5kIHRoZSBncmVhdGVzdCBvZiB0aGVtLCBBcmNoZWxhW3V1bWwgIF1zLCB3aG8gd2l0aCBoaXMgZmxlZXQgY29udHJvbGxlZCB0aGUgZW50aXJlIHNlYSwgd2FzIHN1Ymp1Z2F0aW5nIHRoZSBDeWNsYWRlcywgYW5kIGFsbCB0aGUgb3RoZXIgaXNsYW5kcyB3aGljaCBsaWUgdG8gdGhlIGVhc3Qgb2YgQ2FwZSBNYWxlYSwgYW5kIHdhcyBpbiBwb3NzZXNzaW9uIG9mIEV1Ym9lYSBpdHNlbGYsIHdoaWxlIGZyb20gaGlzIGhlYWQtcXVhcnRlcnMgYXQgQXRoZW5zIGhlIHdhcyBicmluZ2luZyBpbnRvIHJldm9sdCBmcm9tIFJvbWUgdGhlIHBlb3BsZXMgb2YgR3JlZWNlIGFzIGZhciBhcyBUaGVzc2FseSwgYWx0aG91Z2ggaGUgbWV0IHdpdGggc2xpZ2h0IHJldmVyc2VzIGF0IENoYWVyb25laWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZXJlIGhlIHdhcyBjb25mcm9udGVkIGJ5IEJydXR0aXVzIFN1cmEsIHdobyB3YXMgYSBsaWV1dGVuYW50IG9mIFNlbnRpdXMgdGhlIHByYWV0b3Igb2YgTWFjZWRvbmlhLCBhbmQgYSBtYW4gb2Ygc3VwZXJpb3IgY291cmFnZSBhbmQgcHJ1ZGVuY2UuIFRoaXMgbWFuLCBhcyBBcmNoZWxhW3V1bWwgIF1zIGNhbWUgcnVzaGluZyBsaWtlIGEgdG9ycmVudCB0aHJvdWdoIEJvZW90aWEsIG9wcG9zZWQgaGltIG1vc3QgZmllcmNlbHksIGFuZCBhZnRlciB0aHJpY2UgZ2l2aW5nIGhpbSBiYXR0bGUgYXQgQ2hhZXJvbmVpYSwgcmVwdWxzZWQgaGltLCBhbmQgZHJvdmUgaGltIGJhY2sgdG8gdGhlIHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gTHVjaXVzIEx1Y3VsbHVzIG9yZGVyZWQgaGltIHRvIGdpdmUgcGxhY2UgdG8gU3VsbGEsIHdobyB3YXMgY29taW5nLCBhbmQgdG8gbGVhdmUgdGhlIGNvbmR1Y3Qgb2YgdGhlIHdhciB0byBoaW0sIGFzIHRoZSBzZW5hdGUgaGFkIHZvdGVkLCBoZSBhdCBvbmNlIGFiYW5kb25lZCBCb2VvdGlhIGFuZCBtYXJjaGVkIGJhY2sgdG8gU2VudGl1cywgYWx0aG91Z2ggaGlzIGVmZm9ydHMgd2VyZSBwcm92aW5nIHN1Y2Nlc3NmdWwgYmV5b25kIGhvcGUsIGFuZCBhbHRob3VnaCB0aGUgbm9iaWxpdHkgb2YgaGlzIGJlYXJpbmcgd2FzIG1ha2luZyBHcmVlY2Ugd2VsbC1kaXNwb3NlZCB0b3dhcmRzIGEgY2hhbmdlIG9mIGFsbGVnaWFuY2UuIEhvd2V2ZXIsIHRoZXNlIHdlcmUgdGhlIG1vc3QgYnJpbGxpYW50IGFjaGlldmVtZW50cyBvZiBCcnV0dGl1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBhYm91dCB0aGUgdGltZSB3aGVuIFN1bGxhIHdhcyBtb3ZpbmcgaGlzIGFybWFtZW50IGZyb20gSXRhbHksIE1pdGhyaWRhdGVzLCB3aG8gd2FzIHN0YXlpbmcgYXQgUGVyZ2FtdW0sIHdhcyB2aXNpdGVkIHdpdGggbWFueSBvdGhlciBwb3J0ZW50cyBmcm9tIEhlYXZlbiwgYW5kIHRoYXQgYSBWaWN0b3J5IHdpdGggYSBjcm93biBpbiBoZXIgaGFuZCwgd2hpY2ggdGhlIFBlcmdhbWVuaWFucyB3ZXJlIGxvd2VyaW5nIHRvd2FyZHMgaGltIGJ5IG1hY2hpbmVyeSBvZiBzb21lIHNvcnQsIHdhcyBicm9rZW4gdG8gcGllY2VzIGp1c3QgYXMgc2hlIHdhcyBhYm91dCB0byB0b3VjaCBoaXMgaGVhZCwgYW5kIHRoZSBjcm93biB3ZW50IHR1bWJsaW5nIGZyb20gaGVyIGhhbmQgdG8gdGhlIGdyb3VuZCBpbiB0aGUgbWlkc3Qgb2YgdGhlIHRoZWF0cmUsIGFuZCB3YXMgc2hhdHRlcmVkLCB3aGVyZWF0IHRoZSBwZW9wbGUgc2h1ZGRlcmVkLCBhbmQgTWl0aHJpZGF0ZXMgd2FzIGdyZWF0bHkgZGVqZWN0ZWQsIGFsdGhvdWdoIGF0IHRoYXQgdGltZSBoaXMgYWZmYWlycyB3ZXJlIHByb3NwZXJpbmcgYmV5b25kIGhpcyBob3Blcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoaW1zZWxmIGhhZCB3cmVzdGVkIEFzaWEgZnJvbSB0aGUgUm9tYW5zLCBhbmQgQml0aHluaWEgYW5kIENhcHBhZG9jaWEgZnJvbSB0aGVpciBraW5ncywgYW5kIHdhcyBub3cgc2V0IGRvd24gaW4gUGVyZ2FtdW0sIGRpc3BlbnNpbmcgcmljaGVzLCBwcmluY2lwYWxpdGllcywgYW5kIHNvdmVyZWlnbnRpZXMgdG8gaGlzIGZyaWVuZHM7IGFuZCBvZiBoaXMgc29ucywgb25lIHdhcyBpbiBQb250dXMgYW5kIEJvc3BvcnVzLCBob2xkaW5nIHdpdGhvdXQgYW55IG9wcG9zaXRpb24gdGhlIGFuY2llbnQgcmVhbG0gYXMgZmFyIGFzIHRoZSBkZXNlcnRzIGJleW9uZCBMYWtlIE1hZW90aXMsIHdoaWxlIEFyaWFyYXRoZXMgd2FzIG92ZXJydW5uaW5nIFRocmFjZSBhbmQgTWFjZWRvbmlhIHdpdGggYSBsYXJnZSBhcm15LCBhbmQgdHJ5aW5nIHRvIHdpbiB0aGVtIG92ZXI7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhpcyBnZW5lcmFscywgdG9vLCB3aXRoIGZvcmNlcyB1bmRlciB0aGVtLCB3ZXJlIHN1YmR1aW5nIG90aGVyIHJlZ2lvbnMsIGFuZCB0aGUgZ3JlYXRlc3Qgb2YgdGhlbSwgQXJjaGVsYVt1dW1sICBdcywgd2hvIHdpdGggaGlzIGZsZWV0IGNvbnRyb2xsZWQgdGhlIGVudGlyZSBzZWEsIHdhcyBzdWJqdWdhdGluZyB0aGUgQ3ljbGFkZXMsIGFuZCBhbGwgdGhlIG90aGVyIGlzbGFuZHMgd2hpY2ggbGllIHRvIHRoZSBlYXN0IG9mIENhcGUgTWFsZWEsIGFuZCB3YXMgaW4gcG9zc2Vzc2lvbiBvZiBFdWJvZWEgaXRzZWxmLCB3aGlsZSBmcm9tIGhpcyBoZWFkLXF1YXJ0ZXJzIGF0IEF0aGVucyBoZSB3YXMgYnJpbmdpbmcgaW50byByZXZvbHQgZnJvbSBSb21lIHRoZSBwZW9wbGVzIG9mIEdyZWVjZSBhcyBmYXIgYXMgVGhlc3NhbHksIGFsdGhvdWdoIGhlIG1ldCB3aXRoIHNsaWdodCByZXZlcnNlcyBhdCBDaGFlcm9uZWlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZXJlIGhlIHdhcyBjb25mcm9udGVkIGJ5IEJydXR0aXVzIFN1cmEsIHdobyB3YXMgYSBsaWV1dGVuYW50IG9mIFNlbnRpdXMgdGhlIHByYWV0b3Igb2YgTWFjZWRvbmlhLCBhbmQgYSBtYW4gb2Ygc3VwZXJpb3IgY291cmFnZSBhbmQgcHJ1ZGVuY2UuIFRoaXMgbWFuLCBhcyBBcmNoZWxhW3V1bWwgIF1zIGNhbWUgcnVzaGluZyBsaWtlIGEgdG9ycmVudCB0aHJvdWdoIEJvZW90aWEsIG9wcG9zZWQgaGltIG1vc3QgZmllcmNlbHksIGFuZCBhZnRlciB0aHJpY2UgZ2l2aW5nIGhpbSBiYXR0bGUgYXQgQ2hhZXJvbmVpYSwgcmVwdWxzZWQgaGltLCBhbmQgZHJvdmUgaGltIGJhY2sgdG8gdGhlIHNlYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEx1Y2l1cyBMdWN1bGx1cyBvcmRlcmVkIGhpbSB0byBnaXZlIHBsYWNlIHRvIFN1bGxhLCB3aG8gd2FzIGNvbWluZywgYW5kIHRvIGxlYXZlIHRoZSBjb25kdWN0IG9mIHRoZSB3YXIgdG8gaGltLCBhcyB0aGUgc2VuYXRlIGhhZCB2b3RlZCwgaGUgYXQgb25jZSBhYmFuZG9uZWQgQm9lb3RpYSBhbmQgbWFyY2hlZCBiYWNrIHRvIFNlbnRpdXMsIGFsdGhvdWdoIGhpcyBlZmZvcnRzIHdlcmUgcHJvdmluZyBzdWNjZXNzZnVsIGJleW9uZCBob3BlLCBhbmQgYWx0aG91Z2ggdGhlIG5vYmlsaXR5IG9mIGhpcyBiZWFyaW5nIHdhcyBtYWtpbmcgR3JlZWNlIHdlbGwtZGlzcG9zZWQgdG93YXJkcyBhIGNoYW5nZSBvZiBhbGxlZ2lhbmNlLiBIb3dldmVyLCB0aGVzZSB3ZXJlIHRoZSBtb3N0IGJyaWxsaWFudCBhY2hpZXZlbWVudHMgb2YgQnJ1dHRpdXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBTdWxsYSwgYmUgYXQgb25jZSByZWNlaXZlZCBkZXB1dGF0aW9ucyBhbmQgaW52aXRhdGlvbnMgZnJvbSB0aGUgb3RoZXIgY2l0aWVzLCBidXQgQXRoZW5zIHdhcyBjb21wZWxsZWQgYnkgdGhlIHR5cmFudCBBcmlzdGlvbiB0byBzaWRlIHdpdGggTWl0aHJpZGF0ZXMuIEFnYWluc3QgdGhpcyBjaXR5LCB0aGVyZWZvcmUsIFN1bGxhIGxlZCB1cCBhbGwgaGlzIGZvcmNlcywgYW5kIGludmVzdGluZyB0aGUgUGlyYWV1cywgbGFpZCBzaWVnZSB0byBpdCwgYnJpbmdpbmcgdG8gYmVhciB1cG9uIGl0IGV2ZXJ5IHNvcnQgb2Ygc2llZ2UtZW5naW5lLCBhbmQgbWFraW5nIGFsbCBzb3J0cyBvZiBhc3NhdWx0cyB1cG9uIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGlmIGhlIGhhZCBiZWVuIHBhdGllbnQgYSBsaXR0bGUgd2hpbGUsIGhlIG1pZ2h0IGhhdmUgY2FwdHVyZWQgdGhlIHVwcGVyIGNpdHkgd2l0aG91dCBoYXphcmQsIHNpbmNlIGl0IGxhY2tlZCB0aGUgbmVjZXNzaXRpZXMgb2YgbGlmZSBhbmQgd2FzIGFscmVhZHkgcmVkdWNlZCBieSBmYW1pbmUgdG8gdGhlIGxhc3QgZXh0cmVtaXR5LiBCdXQgc2luY2UgaGUgd2FzIGVhZ2VyIHRvIGdldCBiYWNrIHRvIFJvbWUsIGFuZCBmZWFyZWQgdGhlIHNwaXJpdCBvZiByZXZvbHV0aW9uIHRoZXJlLCBoZSByYW4gbWFueSByaXNrcywgZm91Z2h0IG1hbnkgYmF0dGxlcywgYW5kIG1hZGUgZ3JlYXQgb3V0bGF5cyB0aGF0IGhlIG1pZ2h0IGhhc3RlbiBvbiB0aGUgd2FyLCBpbiB3aGljaCwgbm90IHRvIHNwZWFrIG9mIGhpcyBvdGhlciBtdW5pdGlvbnMsIHRoZSBvcGVyYXRpb24gb2YgdGhlIHNpZWdlLWVuZ2luZXMgY2FsbGVkIGZvciB0ZW4gdGhvdXNhbmQgcGFpcnMgb2YgbXVsZXMsIHdoaWNoIHdlcmUgZW1wbG95ZWQgZGFpbHkgZm9yIHRoaXMgc2VydmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGltYmVyIGJlZ2FuIHRvIGZhaWwsIG93aW5nIHRvIHRoZSBkZXN0cnVjdGlvbiBvZiBtYW55IG9mIHRoZSB3b3Jrcywgd2hpY2ggYnJva2UgZG93biBvZiB0aGVpciBvd24gd2VpZ2h0LCBhbmQgdG8gdGhlIGJ1cm5pbmcgb2YgdGhvc2Ugd2hpY2ggd2VyZSBjb250aW51YWxseSBzbWl0dGVuIGJ5IHRoZSBlbmVteSdzIGZpcmUtYm9sdHMsIGhlIGxhaWQgaGFuZHMgdXBvbiB0aGUgc2FjcmVkIGdyb3ZlcywgYW5kIHJhdmFnZWQgdGhlIEFjYWRlbXksIHdoaWNoIHdhcyB0aGUgbW9zdCB3b29kZWQgb2YgdGhlIGNpdHkncyBzdWJ1cmJzLCBhcyB3ZWxsIGFzIHRoZSBMeWNldW0uIEFuZCBzaW5jZSBoZSBuZWVkZWQgbXVjaCBtb25leSBhbHNvIGZvciB0aGUgd2FyLCBoZSBkaXZlcnRlZCB0byBoaXMgdXNlcyB0aGUgc2FjcmVkIHRyZWFzdXJlcyBvZiBIZWxsYXMsIHBhcnRseSBmcm9tIEVwaWRhdXJ1cywgYW5kIHBhcnRseSBmcm9tIE9seW1waWEsIHNlbmRpbmcgZm9yIHRoZSBtb3N0IGJlYXV0aWZ1bCBhbmQgbW9zdCBwcmVjaW91cyBvZiB0aGUgb2ZmZXJpbmdzIHRoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3cm90ZSBhbHNvIHRvIHRoZSBBbXBoaWN0eW9ucyBhdCBEZWxwaGkgdGhhdCBpdCB3YXMgYmV0dGVyIHRvIGhhdmUgdGhlIHRyZWFzdXJlcyBvZiB0aGUgZ29kIHNlbnQgdG8gaGltOyBmb3IgaGUgd291bGQgZWl0aGVyIGtlZXAgdGhlbSBtb3JlIHNhZmVseSwgb3IsIGlmIGhlIHNwZW50IHRoZW0sIHdvdWxkIHJlc3RvcmUgYXMgbXVjaC4gQW5kIGhlIHNlbnQgQ2FwaGlzLCB0aGUgUGhvY2lhbiwgb25lIG9mIGhpcyBmcmllbmRzLCB3aXRoIHRoZSBsZXR0ZXIsIGJpZGRpbmcgaGltIHJlY2VpdmUgZWFjaCBhcnRpY2xlIGJ5IHdlaWdodC4gQ2FwaGlzIGNhbWUgdG8gRGVscGhpLCBidXQgd2FzIGxvdGggdG8gdG91Y2ggdGhlIHNhY3JlZCBvYmplY3RzLCBhbmQgc2hlZCBtYW55IHRlYXJzLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIEFtcGhpY3R5b25zLCBvdmVyIHRoZSBuZWNlc3NpdHkgb2YgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHNvbWUgb2YgdGhlbSBkZWNsYXJlZCB0aGV5IGhlYXJkIHRoZSBzb3VuZCBvZiB0aGUgZ29kJ3MgbHlyZSBpbiB0aGUgaW5uZXIgc2FuY3R1YXJ5LCBDYXBoaXMsIGVpdGhlciBiZWNhdXNlIGhlIGJlbGlldmVkIHRoZW0sIG9yIGJlY2F1c2UgaGUgd2lzaGVkIHRvIHN0cmlrZSBTdWxsYSB3aXRoIHN1cGVyc3RpdGlvdXMgZmVhciwgc2VudCB3b3JkIHRvIGhpbSBhYm91dCBpdC4gQnV0IFN1bGxhIHdyb3RlIGJhY2sgam9jb3NlbHksIGV4cHJlc3NpbmcgaGlzIGFtYXplbWVudCB0aGF0IENhcGhpcyBkaWQgbm90IHVuZGVyc3RhbmQgdGhhdCBzaW5naW5nIHdhcyBkb25lIGluIGpveSwgbm90IGFuZ2VyOyBoaXMgb3JkZXJzIHdlcmUgdGhlcmVmb3JlIHRvIHRha2UgYm9sZGx5LCBhc3N1cmVkIHRoYXQgdGhlIGdvZCB3YXMgd2lsbGluZyBhbmQgZ2xhZCB0byBnaXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIFN1bGxhLCBiZSBhdCBvbmNlIHJlY2VpdmVkIGRlcHV0YXRpb25zIGFuZCBpbnZpdGF0aW9ucyBmcm9tIHRoZSBvdGhlciBjaXRpZXMsIGJ1dCBBdGhlbnMgd2FzIGNvbXBlbGxlZCBieSB0aGUgdHlyYW50IEFyaXN0aW9uIHRvIHNpZGUgd2l0aCBNaXRocmlkYXRlcy4gQWdhaW5zdCB0aGlzIGNpdHksIHRoZXJlZm9yZSwgU3VsbGEgbGVkIHVwIGFsbCBoaXMgZm9yY2VzLCBhbmQgaW52ZXN0aW5nIHRoZSBQaXJhZXVzLCBsYWlkIHNpZWdlIHRvIGl0LCBicmluZ2luZyB0byBiZWFyIHVwb24gaXQgZXZlcnkgc29ydCBvZiBzaWVnZS1lbmdpbmUsIGFuZCBtYWtpbmcgYWxsIHNvcnRzIG9mIGFzc2F1bHRzIHVwb24gaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaWYgaGUgaGFkIGJlZW4gcGF0aWVudCBhIGxpdHRsZSB3aGlsZSwgaGUgbWlnaHQgaGF2ZSBjYXB0dXJlZCB0aGUgdXBwZXIgY2l0eSB3aXRob3V0IGhhemFyZCwgc2luY2UgaXQgbGFja2VkIHRoZSBuZWNlc3NpdGllcyBvZiBsaWZlIGFuZCB3YXMgYWxyZWFkeSByZWR1Y2VkIGJ5IGZhbWluZSB0byB0aGUgbGFzdCBleHRyZW1pdHkuIEJ1dCBzaW5jZSBoZSB3YXMgZWFnZXIgdG8gZ2V0IGJhY2sgdG8gUm9tZSwgYW5kIGZlYXJlZCB0aGUgc3Bpcml0IG9mIHJldm9sdXRpb24gdGhlcmUsIGhlIHJhbiBtYW55IHJpc2tzLCBmb3VnaHQgbWFueSBiYXR0bGVzLCBhbmQgbWFkZSBncmVhdCBvdXRsYXlzIHRoYXQgaGUgbWlnaHQgaGFzdGVuIG9uIHRoZSB3YXIsIGluIHdoaWNoLCBub3QgdG8gc3BlYWsgb2YgaGlzIG90aGVyIG11bml0aW9ucywgdGhlIG9wZXJhdGlvbiBvZiB0aGUgc2llZ2UtZW5naW5lcyBjYWxsZWQgZm9yIHRlbiB0aG91c2FuZCBwYWlycyBvZiBtdWxlcywgd2hpY2ggd2VyZSBlbXBsb3llZCBkYWlseSBmb3IgdGhpcyBzZXJ2aWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRpbWJlciBiZWdhbiB0byBmYWlsLCBvd2luZyB0byB0aGUgZGVzdHJ1Y3Rpb24gb2YgbWFueSBvZiB0aGUgd29ya3MsIHdoaWNoIGJyb2tlIGRvd24gb2YgdGhlaXIgb3duIHdlaWdodCwgYW5kIHRvIHRoZSBidXJuaW5nIG9mIHRob3NlIHdoaWNoIHdlcmUgY29udGludWFsbHkgc21pdHRlbiBieSB0aGUgZW5lbXkncyBmaXJlLWJvbHRzLCBoZSBsYWlkIGhhbmRzIHVwb24gdGhlIHNhY3JlZCBncm92ZXMsIGFuZCByYXZhZ2VkIHRoZSBBY2FkZW15LCB3aGljaCB3YXMgdGhlIG1vc3Qgd29vZGVkIG9mIHRoZSBjaXR5J3Mgc3VidXJicywgYXMgd2VsbCBhcyB0aGUgTHljZXVtLiBBbmQgc2luY2UgaGUgbmVlZGVkIG11Y2ggbW9uZXkgYWxzbyBmb3IgdGhlIHdhciwgaGUgZGl2ZXJ0ZWQgdG8gaGlzIHVzZXMgdGhlIHNhY3JlZCB0cmVhc3VyZXMgb2YgSGVsbGFzLCBwYXJ0bHkgZnJvbSBFcGlkYXVydXMsIGFuZCBwYXJ0bHkgZnJvbSBPbHltcGlhLCBzZW5kaW5nIGZvciB0aGUgbW9zdCBiZWF1dGlmdWwgYW5kIG1vc3QgcHJlY2lvdXMgb2YgdGhlIG9mZmVyaW5ncyB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdyb3RlIGFsc28gdG8gdGhlIEFtcGhpY3R5b25zIGF0IERlbHBoaSB0aGF0IGl0IHdhcyBiZXR0ZXIgdG8gaGF2ZSB0aGUgdHJlYXN1cmVzIG9mIHRoZSBnb2Qgc2VudCB0byBoaW07IGZvciBoZSB3b3VsZCBlaXRoZXIga2VlcCB0aGVtIG1vcmUgc2FmZWx5LCBvciwgaWYgaGUgc3BlbnQgdGhlbSwgd291bGQgcmVzdG9yZSBhcyBtdWNoLiBBbmQgaGUgc2VudCBDYXBoaXMsIHRoZSBQaG9jaWFuLCBvbmUgb2YgaGlzIGZyaWVuZHMsIHdpdGggdGhlIGxldHRlciwgYmlkZGluZyBoaW0gcmVjZWl2ZSBlYWNoIGFydGljbGUgYnkgd2VpZ2h0LiBDYXBoaXMgY2FtZSB0byBEZWxwaGksIGJ1dCB3YXMgbG90aCB0byB0b3VjaCB0aGUgc2FjcmVkIG9iamVjdHMsIGFuZCBzaGVkIG1hbnkgdGVhcnMsIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUgQW1waGljdHlvbnMsIG92ZXIgdGhlIG5lY2Vzc2l0eSBvZiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHNvbWUgb2YgdGhlbSBkZWNsYXJlZCB0aGV5IGhlYXJkIHRoZSBzb3VuZCBvZiB0aGUgZ29kJ3MgbHlyZSBpbiB0aGUgaW5uZXIgc2FuY3R1YXJ5LCBDYXBoaXMsIGVpdGhlciBiZWNhdXNlIGhlIGJlbGlldmVkIHRoZW0sIG9yIGJlY2F1c2UgaGUgd2lzaGVkIHRvIHN0cmlrZSBTdWxsYSB3aXRoIHN1cGVyc3RpdGlvdXMgZmVhciwgc2VudCB3b3JkIHRvIGhpbSBhYm91dCBpdC4gQnV0IFN1bGxhIHdyb3RlIGJhY2sgam9jb3NlbHksIGV4cHJlc3NpbmcgaGlzIGFtYXplbWVudCB0aGF0IENhcGhpcyBkaWQgbm90IHVuZGVyc3RhbmQgdGhhdCBzaW5naW5nIHdhcyBkb25lIGluIGpveSwgbm90IGFuZ2VyOyBoaXMgb3JkZXJzIHdlcmUgdGhlcmVmb3JlIHRvIHRha2UgYm9sZGx5LCBhc3N1cmVkIHRoYXQgdGhlIGdvZCB3YXMgd2lsbGluZyBhbmQgZ2xhZCB0byBnaXZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIHJlc3Qgb2YgdGhlIHRyZWFzdXJlcyB3ZXJlIHNlbnQgYXdheSB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgdGhlIG1vc3QsIGNlcnRhaW5seSwgb2YgdGhlIEdyZWVrczsgYnV0IHRoZSBzaWx2ZXIgamFyLCB0aGUgb25seSBvbmUgb2YgdGhlIHJveWFsIGdpZnRzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGdpZnRzIG9mIENyb2VzdXMsIGtpbmcgb2YgTHlkaWEgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuNTEiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gNTE8L2JpYmw+KS48L25vdGU+IHdoaWNoIHN0aWxsIHJlbWFpbmVkLCB3YXMgdG9vIGxhcmdlIGFuZCBoZWF2eSBmb3IgYW55IGJlYXN0IG9mIGJ1cmRlbiB0byBjYXJyeSwgYW5kIHRoZSBBbXBoaWN0eW9ucyB3ZXJlIGNvbXBlbGxlZCB0byBjdXQgaXQgaW50byBwaWVjZXMuIEFzIHRoZXkgZGlkIHNvLCB0aGV5IGNhbGxlZCB0byBtaW5kIG5vdyBUaXR1cyBGbGFtaW5pbnVzIGFuZCBNYW5pdXMgQWNpbGl1cywgYW5kIG5vdyBBZW1pbGl1cyBQYXVsdXMsIG9mIHdob20gb25lIGhhZCBkcml2ZW4gQW50aW9jaHVzIG91dCBvZiBHcmVlY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFuaXVzIEFjaWxpdXMgR2xhYnJpbywgY29uc3VsIGluIDE5MSBCLkMuLCBkZWZlYXRlZCBBbnRpb2NodXMgdGhlIEdyZWF0IGF0IFRoZXJtb3B5bGFlLCBhbmQgZm9yY2VkIGhpbSB0byByZXR1cm4gdG8gQXNpYS48L25vdGU+IGFuZCB0aGUgb3RoZXJzIGhhZCBzdWJkdWVkIGluIHdhciB0aGUga2luZ3Mgb2YgTWFjZWRvbmlhOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZsYW1pbmludXMgZGVmZWF0ZWQgUGhpbGlwIFYuIG9mIE1hY2Vkb24gYXQgQ3lub3NjZXBoYWxhZSBpbiAxOTcgQi5DLiwgYW5kIEFlbWlsaXVzIFBhdWx1cyBjcnVzaGVkIFBlcnNldXMsIHRoZSBsYXN0IGtpbmcgb2YgTWFjZWRvbmlhLCBhdCBQeWRuYSwgaW4gMTY4IEIuQy4gU2VlIFBsdXRhcmNoJ3MgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZsYW1pbmludXM8L3RpdGxlPiwgeHYuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFlbS4gMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh2aS4teHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlc2UgaGFkIG5vdCBvbmx5IHNwYXJlZCB0aGUgc2FuY3R1YXJpZXMgb2YgdGhlIEdyZWVrcywgYnV0IGhhZCBldmVuIG1hZGUgYWRkaXRpb25hbCBnaWZ0cyB0byB0aGVtLCBhbmQgZ3JlYXRseSBpbmNyZWFzZWQgdGhlaXIgaG9ub3VyIGFuZCBkaWduaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlc2Ugd2VyZSBsYXdmdWwgY29tbWFuZGVycyBvZiBtZW4gd2hvIHdlcmUgc2VsZi1yZXN0cmFpbmVkIGFuZCBoYWQgbGVhcm5lZCB0byBzZXJ2ZSB0aGVpciBsZWFkZXJzIHdpdGhvdXQgYSBtdXJtdXIsIGFuZCB0aGV5IHdlcmUgdGhlbXNlbHZlcyBraW5nbHkgaW4gc3Bpcml0IGFuZCBzaW1wbGUgaW4gdGhlaXIgcGVyc29uYWwgZXhwZW5zZXMsIGFuZCBpbmR1bGdlZCBpbiBtb2RlcmF0ZSBhbmQgc3BlY2lmaWVkIHB1YmxpYyBleHBlbmRpdHVyZXMsIGRlZW1pbmcgaXQgbW9yZSBkaXNncmFjZWZ1bCB0byBmbGF0dGVyIHRoZWlyIHNvbGRpZXJzIHRoYW4gdG8gZmVhciB0aGVpciBlbmVtaWVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz50aGUgZ2VuZXJhbHMgb2YgdGhpcyBsYXRlciB0aW1lLCBob3dldmVyLCB3aG8gd29uIHRoZWlyIHByaW1hY3kgYnkgZm9yY2UsIG5vdCBtZXJpdCwgYW5kIHdobyBuZWVkZWQgdGhlaXIgYXJtaWVzIGZvciBzZXJ2aWNlIGFnYWluc3Qgb25lIGFub3RoZXIsIHJhdGhlciB0aGFuIGFnYWluc3QgdGhlIHB1YmxpYyBlbmVteSwgd2VyZSBjb21wZWxsZWQgdG8gbWVyZ2UgdGhlIGdlbmVyYWwgaW4gdGhlIGRlbWFnb2d1ZSwgYW5kIHRoZW4sIGJ5IHB1cmNoYXNpbmcgdGhlIHNlcnZpY2VzIG9mIHRoZWlyIHNvbGRpZXJzIHdpdGggbGF2aXNoIHN1bXMgdG8gYmUgc3BlbnQgb24gbHV4dXJpb3VzIGxpdmluZywgdGhleSB1bndpdHRpbmdseSBtYWRlIHRoZWlyIHdob2xlIGNvdW50cnkgYSB0aGluZyBmb3Igc2FsZSwgYW5kIHRoZW1zZWx2ZXMgc2xhdmVzIG9mIHRoZSBiYXNlc3QgbWVuIGZvciB0aGUgc2FrZSBvZiBydWxpbmcgb3ZlciB0aGUgYmV0dGVyLiBUaGlzIHdhcyB3aGF0IGRyb3ZlIG91dCBNYXJpdXMsIGFuZCB0aGVuIGJyb3VnaHQgaGltIGJhY2sgYWdhaW4gYWdhaW5zdCBTdWxsYTsgdGhpcyBtYWRlIENpbm5hIHRoZSBhc3Nhc3NpbiBvZiBPY3Rhdml1cywgYW5kIEZpbWJyaWEgb2YgRmxhY2N1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS44LjcxIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT4gaS4gNzE8L2JpYmw+LCBPY3Rhdml1cywgdGhlIGNvbnN1bCwgYSBzdXBwb3J0ZXIgb2YgU3VsbGEsIHdhcyBraWxsZWQgYXQgUm9tZSBieSBDZW5zb3JpbnVzLCBhY3RpbmcgdW5kZXIgdGhlIG9yZGVycyBvZiBNYXJpdXMgYW5kIENpbm5hLCBpbiA4NiBCLkMuIFZhbGVyaXVzIEZsYWNjdXMsIGNob3NlbiBjb25zdWwgdG8gc3VjY2VlZCBNYXJpdXMsIGluIDg2IEIuQy4sIHdhcyBzZW50IGludG8gQXNpYSB0byB0aHdhcnQgU3VsbGEgYW5kIGNvbmR1Y3QgdGhlIHdhciBhZ2FpbnN0IE1pdGhyaWRhdGVzLCBidXQgd2FzIG11cmRlcmVkIHRoZXJlIGJ5IGhpcyBtdXRpbm91cyBsaWV1dGVuYW50LCBGaW1icmlhLCBpbiB0aGUgZm9sbG93aW5nIHllYXIuIFNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlcnMgeHguIDE8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjMuNiIgdmFsaWQ9InllcyI+eHhpaWkuIDY8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAzNC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx1Y3VsbHVzPC90aXRsZT4sIHh4eGl2LiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgU3VsbGEgd2hvLCBtb3JlIHRoYW4gYW55IG9uZSBlbHNlLCBwYXZlZCB0aGUgd2F5IGZvciB0aGVzZSBob3Jyb3JzLCBieSBtYWtpbmcgbGF2aXNoIGV4cGVuZGl0dXJlcyB1cG9uIHRoZSBzb2xkaWVycyB1bmRlciBoaXMgb3duIGNvbW1hbmQgdGhhdCBoZSBtaWdodCBjb3JydXB0IGFuZCB3aW4gb3ZlciB0aG9zZSB3aG9tIG90aGVycyBjb21tYW5kZWQsIHNvIHRoYXQgaW4gbWFraW5nIHRyYWl0b3JzIG9mIHRoZSByZXN0LCBhbmQgcHJvZmxpZ2F0ZXMgb2YgaGlzIG93biBzb2xkaWVycywgaGUgaGFkIG5lZWQgb2YgbXVjaCBtb25leSwgYW5kIGVzcGVjaWFsbHkgZm9yIHRoaXMgc2llZ2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgcmVzdCBvZiB0aGUgdHJlYXN1cmVzIHdlcmUgc2VudCBhd2F5IHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiB0aGUgbW9zdCwgY2VydGFpbmx5LCBvZiB0aGUgR3JlZWtzOyBidXQgdGhlIHNpbHZlciBqYXIsIHRoZSBvbmx5IG9uZSBvZiB0aGUgcm95YWwgZ2lmdHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBnaWZ0cyBvZiBDcm9lc3VzLCBraW5nIG9mIEx5ZGlhICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuNTEiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gNTE8L2JpYmw+KS48L25vdGU+IHdoaWNoIHN0aWxsIHJlbWFpbmVkLCB3YXMgdG9vIGxhcmdlIGFuZCBoZWF2eSBmb3IgYW55IGJlYXN0IG9mIGJ1cmRlbiB0byBjYXJyeSwgYW5kIHRoZSBBbXBoaWN0eW9ucyB3ZXJlIGNvbXBlbGxlZCB0byBjdXQgaXQgaW50byBwaWVjZXMuIEFzIHRoZXkgZGlkIHNvLCB0aGV5IGNhbGxlZCB0byBtaW5kIG5vdyBUaXR1cyBGbGFtaW5pbnVzIGFuZCBNYW5pdXMgQWNpbGl1cywgYW5kIG5vdyBBZW1pbGl1cyBQYXVsdXMsIG9mIHdob20gb25lIGhhZCBkcml2ZW4gQW50aW9jaHVzIG91dCBvZiBHcmVlY2UsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiAxLjUxIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGkuIDUxPC9iaWJsPikuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYW5pdXMgQWNpbGl1cyBHbGFicmlvLCBjb25zdWwgaW4gMTkxIEIuQy4sIGRlZmVhdGVkIEFudGlvY2h1cyB0aGUgR3JlYXQgYXQgVGhlcm1vcHlsYWUsIGFuZCBmb3JjZWQgaGltIHRvIHJldHVybiB0byBBc2lhLjwvbm90ZT4gYW5kIHRoZSBvdGhlcnMgaGFkIHN1YmR1ZWQgaW4gd2FyIHRoZSBraW5ncyBvZiBNYWNlZG9uaWE7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GbGFtaW5pbnVzIGRlZmVhdGVkIFBoaWxpcCBWLiBvZiBNYWNlZG9uIGF0IEN5bm9zY2VwaGFsYWUgaW4gMTk3IEIuQy4sIGFuZCBBZW1pbGl1cyBQYXVsdXMgY3J1c2hlZCBQZXJzZXVzLCB0aGUgbGFzdCBraW5nIG9mIE1hY2Vkb25pYSwgYXQgUHlkbmEsIGluIDE2OCBCLkMuIFNlZSBQbHV0YXJjaCdzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCB4di48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDE2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh2aS4teHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlc2UgaGFkIG5vdCBvbmx5IHNwYXJlZCB0aGUgc2FuY3R1YXJpZXMgb2YgdGhlIEdyZWVrcywgYnV0IGhhZCBldmVuIG1hZGUgYWRkaXRpb25hbCBnaWZ0cyB0byB0aGVtLCBhbmQgZ3JlYXRseSBpbmNyZWFzZWQgdGhlaXIgaG9ub3VyIGFuZCBkaWduaXR5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCB4di48L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sIHh2LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFlbS4gMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW1pbGl1cyBQYXVsdXM8L3RpdGxlPiwgeHZpLi14eGlpLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh2aS4teHhpaS48L3RyYW5zbGF0aW9uPg=="
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSB3ZXJlIGxhd2Z1bCBjb21tYW5kZXJzIG9mIG1lbiB3aG8gd2VyZSBzZWxmLXJlc3RyYWluZWQgYW5kIGhhZCBsZWFybmVkIHRvIHNlcnZlIHRoZWlyIGxlYWRlcnMgd2l0aG91dCBhIG11cm11ciwgYW5kIHRoZXkgd2VyZSB0aGVtc2VsdmVzIGtpbmdseSBpbiBzcGlyaXQgYW5kIHNpbXBsZSBpbiB0aGVpciBwZXJzb25hbCBleHBlbnNlcywgYW5kIGluZHVsZ2VkIGluIG1vZGVyYXRlIGFuZCBzcGVjaWZpZWQgcHVibGljIGV4cGVuZGl0dXJlcywgZGVlbWluZyBpdCBtb3JlIGRpc2dyYWNlZnVsIHRvIGZsYXR0ZXIgdGhlaXIgc29sZGllcnMgdGhhbiB0byBmZWFyIHRoZWlyIGVuZW1pZXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBnZW5lcmFscyBvZiB0aGlzIGxhdGVyIHRpbWUsIGhvd2V2ZXIsIHdobyB3b24gdGhlaXIgcHJpbWFjeSBieSBmb3JjZSwgbm90IG1lcml0LCBhbmQgd2hvIG5lZWRlZCB0aGVpciBhcm1pZXMgZm9yIHNlcnZpY2UgYWdhaW5zdCBvbmUgYW5vdGhlciwgcmF0aGVyIHRoYW4gYWdhaW5zdCB0aGUgcHVibGljIGVuZW15LCB3ZXJlIGNvbXBlbGxlZCB0byBtZXJnZSB0aGUgZ2VuZXJhbCBpbiB0aGUgZGVtYWdvZ3VlLCBhbmQgdGhlbiwgYnkgcHVyY2hhc2luZyB0aGUgc2VydmljZXMgb2YgdGhlaXIgc29sZGllcnMgd2l0aCBsYXZpc2ggc3VtcyB0byBiZSBzcGVudCBvbiBsdXh1cmlvdXMgbGl2aW5nLCB0aGV5IHVud2l0dGluZ2x5IG1hZGUgdGhlaXIgd2hvbGUgY291bnRyeSBhIHRoaW5nIGZvciBzYWxlLCBhbmQgdGhlbXNlbHZlcyBzbGF2ZXMgb2YgdGhlIGJhc2VzdCBtZW4gZm9yIHRoZSBzYWtlIG9mIHJ1bGluZyBvdmVyIHRoZSBiZXR0ZXIuIFRoaXMgd2FzIHdoYXQgZHJvdmUgb3V0IE1hcml1cywgYW5kIHRoZW4gYnJvdWdodCBoaW0gYmFjayBhZ2FpbiBhZ2FpbnN0IFN1bGxhOyB0aGlzIG1hZGUgQ2lubmEgdGhlIGFzc2Fzc2luIG9mIE9jdGF2aXVzLCBhbmQgRmltYnJpYSBvZiBGbGFjY3VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS44LjcxIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpLiA3MTwvYmlibD4sIE9jdGF2aXVzLCB0aGUgY29uc3VsLCBhIHN1cHBvcnRlciBvZiBTdWxsYSwgd2FzIGtpbGxlZCBhdCBSb21lIGJ5IENlbnNvcmludXMsIGFjdGluZyB1bmRlciB0aGUgb3JkZXJzIG9mIE1hcml1cyBhbmQgQ2lubmEsIGluIDg2IEIuQy4gVmFsZXJpdXMgRmxhY2N1cywgY2hvc2VuIGNvbnN1bCB0byBzdWNjZWVkIE1hcml1cywgaW4gODYgQi5DLiwgd2FzIHNlbnQgaW50byBBc2lhIHRvIHRod2FydCBTdWxsYSBhbmQgY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMsIGJ1dCB3YXMgbXVyZGVyZWQgdGhlcmUgYnkgaGlzIG11dGlub3VzIGxpZXV0ZW5hbnQsIEZpbWJyaWEsIGluIHRoZSBmb2xsb3dpbmcgeWVhci4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDIwLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXJzIHh4LiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjMuNiIgdmFsaWQ9InllcyI+eHhpaWkuIDY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDM0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS44LjcxIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpLiA3MTwvYmlibD4sIE9jdGF2aXVzLCB0aGUgY29uc3VsLCBhIHN1cHBvcnRlciBvZiBTdWxsYSwgd2FzIGtpbGxlZCBhdCBSb21lIGJ5IENlbnNvcmludXMsIGFjdGluZyB1bmRlciB0aGUgb3JkZXJzIG9mIE1hcml1cyBhbmQgQ2lubmEsIGluIDg2IEIuQy4gVmFsZXJpdXMgRmxhY2N1cywgY2hvc2VuIGNvbnN1bCB0byBzdWNjZWVkIE1hcml1cywgaW4gODYgQi5DLiwgd2FzIHNlbnQgaW50byBBc2lhIHRvIHRod2FydCBTdWxsYSBhbmQgY29uZHVjdCB0aGUgd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMsIGJ1dCB3YXMgbXVyZGVyZWQgdGhlcmUgYnkgaGlzIG11dGlub3VzIGxpZXV0ZW5hbnQsIEZpbWJyaWEsIGluIHRoZSBmb2xsb3dpbmcgeWVhci4gU2VlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpLiA3MTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDIwLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXJzIHh4LiAxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjMuNiIgdmFsaWQ9InllcyI+eHhpaWkuIDY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDM0LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHhpdi4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHh4eGl2LiAyLjwvdHJhbnNsYXRpb24+"
translation['12.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgU3VsbGEgd2hvLCBtb3JlIHRoYW4gYW55IG9uZSBlbHNlLCBwYXZlZCB0aGUgd2F5IGZvciB0aGVzZSBob3Jyb3JzLCBieSBtYWtpbmcgbGF2aXNoIGV4cGVuZGl0dXJlcyB1cG9uIHRoZSBzb2xkaWVycyB1bmRlciBoaXMgb3duIGNvbW1hbmQgdGhhdCBoZSBtaWdodCBjb3JydXB0IGFuZCB3aW4gb3ZlciB0aG9zZSB3aG9tIG90aGVycyBjb21tYW5kZWQsIHNvIHRoYXQgaW4gbWFraW5nIHRyYWl0b3JzIG9mIHRoZSByZXN0LCBhbmQgcHJvZmxpZ2F0ZXMgb2YgaGlzIG93biBzb2xkaWVycywgaGUgaGFkIG5lZWQgb2YgbXVjaCBtb25leSwgYW5kIGVzcGVjaWFsbHkgZm9yIHRoaXMgc2llZ2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgcG9zc2Vzc2VkIGJ5IHNvbWUgZHJlYWRmdWwgYW5kIGluZXhvcmFibGUgcGFzc2lvbiBmb3IgdGhlIGNhcHR1cmUgb2YgQXRoZW5zLCBlaXRoZXIgYmVjYXVzZSBoZSB3YXMgZmlnaHRpbmcgd2l0aCBhIHNvcnQgb2YgYXJkb3VyIGFnYWluc3QgdGhlIHNoYWRvdyBvZiB0aGUgY2l0eSdzIGZvcm1lciBnbG9yeSwgb3IgYmVjYXVzZSBoZSB3YXMgcHJvdm9rZWQgdG8gYW5nZXIgYnkgdGhlIHNjdXJyaWxvdXMgYWJ1c2Ugd2hpY2ggaGFkIGJlZW4gc2hvd2VyZWQgZnJvbSB0aGUgd2FsbHMgdXBvbiBoaW1zZWxmIGFuZCBNZXRlbGxhIGJ5IHRoZSB0eXJhbnQgQXJpc3Rpb24sIHdobyBhbHdheXMgZGFuY2VkIGluIG1vY2tlcnkgYXMgaGUgc2NvZmZlZC4gVGhpcyBtYW4ncyBzcGlyaXQgd2FzIGNvbXBvdW5kZWQgb2YgbGljZW50aW91c25lc3MgYW5kIGNydWVsdHk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIGhhZCBtYWRlIGhpbXNlbGYgYSBzaW5rIGZvciB0aGUgd29yc3Qgb2YgdGhlIGRpc2Vhc2VzIGFuZCBwYXNzaW9ucyBvZiBNaXRocmlkYXRlczsgYW5kIGluIHRoZXNlIGhlciBsYXN0IGRheXMgaGUgaGFkIGZpeGVkIGhpbXNlbGYsIGxpa2UgYSBmYXRhbCBtYWxhZHksIHVwb24gYSBjaXR5IHdoaWNoIGhhZCBwcmV2aW91c2x5IHBhc3NlZCBzYWZlbHkgdGhyb3VnaCBjb3VudGxlc3Mgd2FycywgYW5kIG1hbnkgdXN1cnBhdGlvbnMgYW5kIHNlZGl0aW9ucy4gVGhpcyBtYW4sIGFsdGhvdWdoIGF0IHRoZSB0aW1lIGEgYnVzaGVsIG9mIHdoZWF0IHNvbGQgaW4gdGhlIGNpdHkgZm9yIGEgdGhvdXNhbmQgZHJhY2htYXMsIGFuZCBhbHRob3VnaCBtZW4gbWFkZSBmb29kIGZvciB0aGVtc2VsdmVzIG9mIHRoZSBmZXZlci1mZXcgd2hpY2ggZ3JldyBvbiB0aGUgYWNyb3BvbGlzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYm9pbGVkIGRvd24gc2hvZXMgYW5kIGxlYXRoZXIgb2lsLWZsYXNrcyB0byBlYXQsIHdhcyBoaW1zZWxmIGNvbnRpbnVhbGx5IGluZHVsZ2luZyBpbiBkcmlua2luZy1ib3V0cyBhbmQgcmV2ZWxzIGJ5IGRheWxpZ2h0LCB3YXMgZGFuY2luZyBpbiBhcm1vdXIgYW5kIG1ha2luZyBqb2tlcyB0byBkZXJpZGUgdGhlIGVuZW15LCB3aGlsZSBoZSBzdWZmZXJlZCB0aGUgc2FjcmVkIGxhbXAgb2YgdGhlIGdvZGRlc3MgdG8gZ28gb3V0IGZvciBsYWNrIG9mIG9pbDsgYW5kIHdoZW4gdGhlIGNoaWVmIHByaWVzdGVzcyBiZWdnZWQgaGltIGZvciBhIHR3ZWxmdGggb2YgYSBidXNoZWwgb2Ygd2hlYXQsIGhlIHNlbnQgaGVyIHNvIG11Y2ggcGVwcGVyOyBhbmQgd2hlbiB0aGUgc2VuYXRvcnMgYW5kIHByaWVzdHMgY2FtZSB0byBoaW0gaW4gc3VwcGxpYW50IGFycmF5LCBhbmQgZW50cmVhdGVkIGhpbSB0byB0YWtlIHBpdHkgb24gdGhlIGNpdHkgYW5kIGNvbWUgdG8gdGVybXMgd2l0aCBTdWxsYSwgaGUgc2NhdHRlcmVkIHRoZW0gd2l0aCBhIHZvbGxleSBvZiBhcnJvd3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhIGxvbmcgdGltZSwgYXQgbGFzdCwgd2l0aCBtdWNoIGFkbywgaGUgc2VudCBvdXQgdHdvIG9yIHRocmVlIG9mIGhpcyBmZWxsb3ctcmV2ZWxsZXJzIHRvIHRyZWF0IGZvciBwZWFjZSwgdG8gd2hvbSBTdWxsYSwgd2hlbiB0aGV5IG1hZGUgbm8gZGVtYW5kcyB3aGljaCBjb3VsZCBzYXZlIHRoZSBjaXR5LCBidXQgdGFsa2VkIGluIGxvZnR5IHN0cmFpbnMgYWJvdXQgVGhlc2V1cyBhbmQgRXVtb2xwdXMgYW5kIHRoZSBQZXJzaWFuIHdhcnMsIHNhaWQ6IFtsZHF1byBdQmUgb2ZmLCBteSBkZWFyIFNpcnMsIGFuZCB0YWtlIHRoZXNlIHNwZWVjaGVzIHdpdGggeW91OyBmb3IgSSB3YXMgbm90IHNlbnQgdG8gQXRoZW5zIGJ5IHRoZSBSb21hbnMgdG8gbGVhcm4gaXRzIGhpc3RvcnksIGJ1dCB0byBzdWJkdWUgaXRzIHJlYmVscy5bcmRxdW8gXQoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdhcyBwb3NzZXNzZWQgYnkgc29tZSBkcmVhZGZ1bCBhbmQgaW5leG9yYWJsZSBwYXNzaW9uIGZvciB0aGUgY2FwdHVyZSBvZiBBdGhlbnMsIGVpdGhlciBiZWNhdXNlIGhlIHdhcyBmaWdodGluZyB3aXRoIGEgc29ydCBvZiBhcmRvdXIgYWdhaW5zdCB0aGUgc2hhZG93IG9mIHRoZSBjaXR5J3MgZm9ybWVyIGdsb3J5LCBvciBiZWNhdXNlIGhlIHdhcyBwcm92b2tlZCB0byBhbmdlciBieSB0aGUgc2N1cnJpbG91cyBhYnVzZSB3aGljaCBoYWQgYmVlbiBzaG93ZXJlZCBmcm9tIHRoZSB3YWxscyB1cG9uIGhpbXNlbGYgYW5kIE1ldGVsbGEgYnkgdGhlIHR5cmFudCBBcmlzdGlvbiwgd2hvIGFsd2F5cyBkYW5jZWQgaW4gbW9ja2VyeSBhcyBoZSBzY29mZmVkLiBUaGlzIG1hbidzIHNwaXJpdCB3YXMgY29tcG91bmRlZCBvZiBsaWNlbnRpb3VzbmVzcyBhbmQgY3J1ZWx0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIGhhZCBtYWRlIGhpbXNlbGYgYSBzaW5rIGZvciB0aGUgd29yc3Qgb2YgdGhlIGRpc2Vhc2VzIGFuZCBwYXNzaW9ucyBvZiBNaXRocmlkYXRlczsgYW5kIGluIHRoZXNlIGhlciBsYXN0IGRheXMgaGUgaGFkIGZpeGVkIGhpbXNlbGYsIGxpa2UgYSBmYXRhbCBtYWxhZHksIHVwb24gYSBjaXR5IHdoaWNoIGhhZCBwcmV2aW91c2x5IHBhc3NlZCBzYWZlbHkgdGhyb3VnaCBjb3VudGxlc3Mgd2FycywgYW5kIG1hbnkgdXN1cnBhdGlvbnMgYW5kIHNlZGl0aW9ucy4gVGhpcyBtYW4sIGFsdGhvdWdoIGF0IHRoZSB0aW1lIGEgYnVzaGVsIG9mIHdoZWF0IHNvbGQgaW4gdGhlIGNpdHkgZm9yIGEgdGhvdXNhbmQgZHJhY2htYXMsIGFuZCBhbHRob3VnaCBtZW4gbWFkZSBmb29kIGZvciB0aGVtc2VsdmVzIG9mIHRoZSBmZXZlci1mZXcgd2hpY2ggZ3JldyBvbiB0aGUgYWNyb3BvbGlzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBib2lsZWQgZG93biBzaG9lcyBhbmQgbGVhdGhlciBvaWwtZmxhc2tzIHRvIGVhdCwgd2FzIGhpbXNlbGYgY29udGludWFsbHkgaW5kdWxnaW5nIGluIGRyaW5raW5nLWJvdXRzIGFuZCByZXZlbHMgYnkgZGF5bGlnaHQsIHdhcyBkYW5jaW5nIGluIGFybW91ciBhbmQgbWFraW5nIGpva2VzIHRvIGRlcmlkZSB0aGUgZW5lbXksIHdoaWxlIGhlIHN1ZmZlcmVkIHRoZSBzYWNyZWQgbGFtcCBvZiB0aGUgZ29kZGVzcyB0byBnbyBvdXQgZm9yIGxhY2sgb2Ygb2lsOyBhbmQgd2hlbiB0aGUgY2hpZWYgcHJpZXN0ZXNzIGJlZ2dlZCBoaW0gZm9yIGEgdHdlbGZ0aCBvZiBhIGJ1c2hlbCBvZiB3aGVhdCwgaGUgc2VudCBoZXIgc28gbXVjaCBwZXBwZXI7IGFuZCB3aGVuIHRoZSBzZW5hdG9ycyBhbmQgcHJpZXN0cyBjYW1lIHRvIGhpbSBpbiBzdXBwbGlhbnQgYXJyYXksIGFuZCBlbnRyZWF0ZWQgaGltIHRvIHRha2UgcGl0eSBvbiB0aGUgY2l0eSBhbmQgY29tZSB0byB0ZXJtcyB3aXRoIFN1bGxhLCBoZSBzY2F0dGVyZWQgdGhlbSB3aXRoIGEgdm9sbGV5IG9mIGFycm93cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhIGxvbmcgdGltZSwgYXQgbGFzdCwgd2l0aCBtdWNoIGFkbywgaGUgc2VudCBvdXQgdHdvIG9yIHRocmVlIG9mIGhpcyBmZWxsb3ctcmV2ZWxsZXJzIHRvIHRyZWF0IGZvciBwZWFjZSwgdG8gd2hvbSBTdWxsYSwgd2hlbiB0aGV5IG1hZGUgbm8gZGVtYW5kcyB3aGljaCBjb3VsZCBzYXZlIHRoZSBjaXR5LCBidXQgdGFsa2VkIGluIGxvZnR5IHN0cmFpbnMgYWJvdXQgVGhlc2V1cyBhbmQgRXVtb2xwdXMgYW5kIHRoZSBQZXJzaWFuIHdhcnMsIHNhaWQ6IFtsZHF1byBdQmUgb2ZmLCBteSBkZWFyIFNpcnMsIGFuZCB0YWtlIHRoZXNlIHNwZWVjaGVzIHdpdGggeW91OyBmb3IgSSB3YXMgbm90IHNlbnQgdG8gQXRoZW5zIGJ5IHRoZSBSb21hbnMgdG8gbGVhcm4gaXRzIGhpc3RvcnksIGJ1dCB0byBzdWJkdWUgaXRzIHJlYmVscy5bcmRxdW8gXQoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhpcyBqdW5jdHVyZSwgYXMgaXQgaXMgc2FpZCwgY2VydGFpbiBzb2xkaWVycyBpbiB0aGUgQ2VyYW1laWN1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBPdXRlciBDZXJhbWVpY3VzLCA8ZW1waD5pLmUuPC9lbXBoPiB0aGUgc3VidXJiIGJlZm9yZSB0aGUgRGlweWxvbiwgb3IgU2FjcmVkIEdhdGUsIHRocm91Z2ggd2hpY2ggb25lIGxlZnQgdGhlIGNpdHkgZm9yIEVsZXVzaXMuPC9ub3RlPiBvdmVyaGVhcmQgc29tZSBvbGQgbWVuIHRhbGtpbmcgd2l0aCBvbmUgYW5vdGhlciwgYW5kIGFidXNpbmcgdGhlIHR5cmFudCBiZWNhdXNlIGhlIGRpZCBub3QgZ3VhcmQgdGhlIGFwcHJvYWNoZXMgdG8gdGhlIHdhbGwgYXQgdGhlIEhlcHRhY2hhbGN1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiB1bmtub3duIGZlYXR1cmUgb2YgdGhlIHdhbGwsIHNvbWV3aGVyZSBiZXR3ZWVuIHRoZSBQaXJhW2l1bWwgIF1jLCBvciB3ZXN0ZXJuIGdhdGUsIGFuZCB0aGUgRGlweWxvbiwgb3IgU2FjcmVkIEdhdGUsIG9wZW5pbmcgdG8gdGhlIE4uVy48L25vdGU+IGF0IHdoaWNoIHBvaW50IGFsb25lIGl0IHdhcyBwb3NzaWJsZSBhbmQgZWFzeSBmb3IgdGhlIGVuZW15IHRvIGdldCBvdmVyLiBXaGVuIHRoaXMgd2FzIHJlcG9ydGVkIHRvIFN1bGxhLCBoZSBkaWQgbm90IG1ha2UgbGlnaHQgb2YgaXQsIGJ1dCB3ZW50IHRoaXRoZXIgYnkgbmlnaHQsIGFuZCBhZnRlciBzZWVpbmcgdGhhdCB0aGUgcGxhY2UgY291bGQgYmUgdGFrZW4sIHNldCBoaW1zZWxmIHRvIHRoZSB3b3JrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgU3VsbGEgaGltc2VsZiBzYXlzLCBpbiBoaXMgTWVtb2lycywgdGhhdCBNYXJjdXMgQXRlaXVzIHdhcyB0aGUgZmlyc3QgbWFuIHRvIG1vdW50IHRoZSB3YWxsLCBhbmQgdGhhdCB3aGVuIGFuIGVuZW15IGNvbmZyb250ZWQgaGltLCBoZSBnYXZlIGhpbSBhIGRvd253YXJkIGN1dCBvbiB0aGUgaGVsbWV0IHdpdGggaGlzIHN3b3JkLCBhbmQgc2hhdHRlcmVkIHRoZSB3ZWFwb247IGhlIGRpZCBub3QsIGhvd2V2ZXIsIHlpZWxkIGdyb3VuZCwgYnV0IHJlbWFpbmVkIGFuZCBoZWxkIGhpcyBvd24uICBBdCBhbnkgcmF0ZSwgdGhlIGNpdHkgd2FzIHRha2VuIGF0IHRoaXMgcG9pbnQsIGFzIHRoZSBvbGRlc3QgQXRoZW5pYW5zIHVzZWQgdG8gdGVzdGlmeS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBQbHV0YXJjaCdzIHRpbWUuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBTdWxsYSBoaW1zZWxmLCBhZnRlciBoZSBoYWQgdGhyb3duIGRvd24gYW5kIGxldmVsbGVkIHdpdGggdGhlIGdyb3VuZCB0aGUgd2FsbCBiZXR3ZWVuIHRoZSBQaXJhW2l1bWwgIF1jIGFuZCB0aGUgU2FjcmVkIEdhdGUsIGxlZCBoaXMgYXJteSBpbnRvIHRoZSBjaXR5IGF0IG1pZG5pZ2h0LiBUaGUgc2lnaHQgb2YgaGltIHdhcyBtYWRlIHRlcnJpYmxlIGJ5IGJsYXN0cyBvZiBtYW55IHRydW1wZXRzIGFuZCBidWdsZXMsIGFuZCBieSB0aGUgY3JpZXMgYW5kIHllbGxzIG9mIHRoZSBzb2xkaWVyeSBub3cgbGV0IGxvb3NlIGJ5IGhpbSBmb3IgcGx1bmRlciBhbmQgc2xhdWdodGVyLCBhbmQgcnVzaGluZyB0aHJvdWdoIHRoZSBuYXJyb3cgc3RyZWV0cyB3aXRoIGRyYXduIHN3b3Jkcy4gVGhlcmUgd2FzIHRoZXJlZm9yZSBubyBjb3VudGluZyBvZiB0aGUgc2xhaW4sIGJ1dCB0aGVpciBudW1iZXJzIGFyZSB0byB0aGlzIGRheSBkZXRlcm1pbmVkIG9ubHkgYnkgdGhlIHNwYWNlIHRoYXQgd2FzIGNvdmVyZWQgd2l0aCBibG9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdpdGhvdXQgbWVudGlvbiBvZiB0aG9zZSB3aG8gd2VyZSBraWxsZWQgaW4gdGhlIHJlc3Qgb2YgdGhlIGNpdHksIHRoZSBibG9vZCB0aGF0IHdhcyBzaGVkIGluIHRoZSBtYXJrZXQtcGxhY2UgY292ZXJlZCBhbGwgdGhlIENlcmFtZWljdXMgaW5zaWRlIHRoZSBEaXB5bG9uIGdhdGU7IG5heSwgbWFueSBzYXkgdGhhdCBpdCBmbG93ZWQgdGhyb3VnaCB0aGUgZ2F0ZSBhbmQgZGVsdWdlZCB0aGUgc3VidXJiLiBCdXQgYWx0aG91Z2ggdGhvc2Ugd2hvIHdlcmUgdGh1cyBzbGFpbiB3ZXJlIHNvIG1hbnksIHRoZXJlIHdlcmUgeWV0IG1vcmUgd2hvIHNsZXcgdGhlbXNlbHZlcywgb3V0IG9mIHllYXJuaW5nIHBpdHkgZm9yIHRoZWlyIG5hdGl2ZSBjaXR5LCB3aGljaCB0aGV5IHRob3VnaHQgd2FzIGdvaW5nIHRvIGJlIGRlc3Ryb3llZC4gRm9yIHRoaXMgY29udmljdGlvbiBtYWRlIHRoZSBiZXN0IG9mIHRoZW0gZ2l2ZSB1cCBpbiBkZXNwYWlyIGFuZCBmZWFyIHRvIHN1cnZpdmUsIHNpbmNlIHRoZXkgZXhwZWN0ZWQgbm8gaHVtYW5pdHkgb3IgbW9kZXJhdGlvbiBpbiBTdWxsYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgcGFydGx5IGF0IHRoZSBpbnN0YW5jZSBvZiB0aGUgZXhpbGVzIE1laWRpYXMgYW5kIENhbGxpcGhvbiwgd2hvIHRocmV3IHRoZW1zZWx2ZXMgYXQgaGlzIGZlZXQgaW4gc3VwcGxpY2F0aW9uLCBhbmQgcGFydGx5IGJlY2F1c2UgYWxsIHRoZSBSb21hbiBzZW5hdG9ycyB3aG8gd2VyZSBpbiBoaXMgZm9sbG93aW5nIGludGVyY2VkZWQgZm9yIHRoZSBjaXR5LCBiZWluZyBoaW1zZWxmIGFsc28gYnkgdGhpcyB0aW1lIHNhdGVkIHdpdGggdmVuZ2VhbmNlLCBhZnRlciBzb21lIHdvcmRzIGluIHByYWlzZSBvZiB0aGUgYW5jaWVudCBBdGhlbmlhbnMsIGhlIHNhaWQgdGhhdCBoZSBmb3JnYXZlIGEgZmV3IGZvciB0aGUgc2FrZSBvZiBtYW55LCB0aGUgbGl2aW5nIGZvciB0aGUgc2FrZSBvZiB0aGUgZGVhZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IHRoaXMganVuY3R1cmUsIGFzIGl0IGlzIHNhaWQsIGNlcnRhaW4gc29sZGllcnMgaW4gdGhlIENlcmFtZWljdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBPdXRlciBDZXJhbWVpY3VzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmkuZS48L2VtcGg+IHRoZSBzdWJ1cmIgYmVmb3JlIHRoZSBEaXB5bG9uLCBvciBTYWNyZWQgR2F0ZSwgdGhyb3VnaCB3aGljaCBvbmUgbGVmdCB0aGUgY2l0eSBmb3IgRWxldXNpcy48L25vdGU+IG92ZXJoZWFyZCBzb21lIG9sZCBtZW4gdGFsa2luZyB3aXRoIG9uZSBhbm90aGVyLCBhbmQgYWJ1c2luZyB0aGUgdHlyYW50IGJlY2F1c2UgaGUgZGlkIG5vdCBndWFyZCB0aGUgYXBwcm9hY2hlcyB0byB0aGUgd2FsbCBhdCB0aGUgSGVwdGFjaGFsY3VtLDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aS5lLjwvZW1waD4gdGhlIHN1YnVyYiBiZWZvcmUgdGhlIERpcHlsb24sIG9yIFNhY3JlZCBHYXRlLCB0aHJvdWdoIHdoaWNoIG9uZSBsZWZ0IHRoZSBjaXR5IGZvciBFbGV1c2lzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gdW5rbm93biBmZWF0dXJlIG9mIHRoZSB3YWxsLCBzb21ld2hlcmUgYmV0d2VlbiB0aGUgUGlyYVtpdW1sICBdYywgb3Igd2VzdGVybiBnYXRlLCBhbmQgdGhlIERpcHlsb24sIG9yIFNhY3JlZCBHYXRlLCBvcGVuaW5nIHRvIHRoZSBOLlcuPC9ub3RlPiBhdCB3aGljaCBwb2ludCBhbG9uZSBpdCB3YXMgcG9zc2libGUgYW5kIGVhc3kgZm9yIHRoZSBlbmVteSB0byBnZXQgb3Zlci4gV2hlbiB0aGlzIHdhcyByZXBvcnRlZCB0byBTdWxsYSwgaGUgZGlkIG5vdCBtYWtlIGxpZ2h0IG9mIGl0LCBidXQgd2VudCB0aGl0aGVyIGJ5IG5pZ2h0LCBhbmQgYWZ0ZXIgc2VlaW5nIHRoYXQgdGhlIHBsYWNlIGNvdWxkIGJlIHRha2VuLCBzZXQgaGltc2VsZiB0byB0aGUgd29yay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBTdWxsYSBoaW1zZWxmIHNheXMsIGluIGhpcyBNZW1vaXJzLCB0aGF0IE1hcmN1cyBBdGVpdXMgd2FzIHRoZSBmaXJzdCBtYW4gdG8gbW91bnQgdGhlIHdhbGwsIGFuZCB0aGF0IHdoZW4gYW4gZW5lbXkgY29uZnJvbnRlZCBoaW0sIGhlIGdhdmUgaGltIGEgZG93bndhcmQgY3V0IG9uIHRoZSBoZWxtZXQgd2l0aCBoaXMgc3dvcmQsIGFuZCBzaGF0dGVyZWQgdGhlIHdlYXBvbjsgaGUgZGlkIG5vdCwgaG93ZXZlciwgeWllbGQgZ3JvdW5kLCBidXQgcmVtYWluZWQgYW5kIGhlbGQgaGlzIG93bi4gIEF0IGFueSByYXRlLCB0aGUgY2l0eSB3YXMgdGFrZW4gYXQgdGhpcyBwb2ludCwgYXMgdGhlIG9sZGVzdCBBdGhlbmlhbnMgdXNlZCB0byB0ZXN0aWZ5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gUGx1dGFyY2gncyB0aW1lLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBTdWxsYSBoaW1zZWxmLCBhZnRlciBoZSBoYWQgdGhyb3duIGRvd24gYW5kIGxldmVsbGVkIHdpdGggdGhlIGdyb3VuZCB0aGUgd2FsbCBiZXR3ZWVuIHRoZSBQaXJhW2l1bWwgIF1jIGFuZCB0aGUgU2FjcmVkIEdhdGUsIGxlZCBoaXMgYXJteSBpbnRvIHRoZSBjaXR5IGF0IG1pZG5pZ2h0LiBUaGUgc2lnaHQgb2YgaGltIHdhcyBtYWRlIHRlcnJpYmxlIGJ5IGJsYXN0cyBvZiBtYW55IHRydW1wZXRzIGFuZCBidWdsZXMsIGFuZCBieSB0aGUgY3JpZXMgYW5kIHllbGxzIG9mIHRoZSBzb2xkaWVyeSBub3cgbGV0IGxvb3NlIGJ5IGhpbSBmb3IgcGx1bmRlciBhbmQgc2xhdWdodGVyLCBhbmQgcnVzaGluZyB0aHJvdWdoIHRoZSBuYXJyb3cgc3RyZWV0cyB3aXRoIGRyYXduIHN3b3Jkcy4gVGhlcmUgd2FzIHRoZXJlZm9yZSBubyBjb3VudGluZyBvZiB0aGUgc2xhaW4sIGJ1dCB0aGVpciBudW1iZXJzIGFyZSB0byB0aGlzIGRheSBkZXRlcm1pbmVkIG9ubHkgYnkgdGhlIHNwYWNlIHRoYXQgd2FzIGNvdmVyZWQgd2l0aCBibG9vZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aXRob3V0IG1lbnRpb24gb2YgdGhvc2Ugd2hvIHdlcmUga2lsbGVkIGluIHRoZSByZXN0IG9mIHRoZSBjaXR5LCB0aGUgYmxvb2QgdGhhdCB3YXMgc2hlZCBpbiB0aGUgbWFya2V0LXBsYWNlIGNvdmVyZWQgYWxsIHRoZSBDZXJhbWVpY3VzIGluc2lkZSB0aGUgRGlweWxvbiBnYXRlOyBuYXksIG1hbnkgc2F5IHRoYXQgaXQgZmxvd2VkIHRocm91Z2ggdGhlIGdhdGUgYW5kIGRlbHVnZWQgdGhlIHN1YnVyYi4gQnV0IGFsdGhvdWdoIHRob3NlIHdobyB3ZXJlIHRodXMgc2xhaW4gd2VyZSBzbyBtYW55LCB0aGVyZSB3ZXJlIHlldCBtb3JlIHdobyBzbGV3IHRoZW1zZWx2ZXMsIG91dCBvZiB5ZWFybmluZyBwaXR5IGZvciB0aGVpciBuYXRpdmUgY2l0eSwgd2hpY2ggdGhleSB0aG91Z2h0IHdhcyBnb2luZyB0byBiZSBkZXN0cm95ZWQuIEZvciB0aGlzIGNvbnZpY3Rpb24gbWFkZSB0aGUgYmVzdCBvZiB0aGVtIGdpdmUgdXAgaW4gZGVzcGFpciBhbmQgZmVhciB0byBzdXJ2aXZlLCBzaW5jZSB0aGV5IGV4cGVjdGVkIG5vIGh1bWFuaXR5IG9yIG1vZGVyYXRpb24gaW4gU3VsbGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHBhcnRseSBhdCB0aGUgaW5zdGFuY2Ugb2YgdGhlIGV4aWxlcyBNZWlkaWFzIGFuZCBDYWxsaXBob24sIHdobyB0aHJldyB0aGVtc2VsdmVzIGF0IGhpcyBmZWV0IGluIHN1cHBsaWNhdGlvbiwgYW5kIHBhcnRseSBiZWNhdXNlIGFsbCB0aGUgUm9tYW4gc2VuYXRvcnMgd2hvIHdlcmUgaW4gaGlzIGZvbGxvd2luZyBpbnRlcmNlZGVkIGZvciB0aGUgY2l0eSwgYmVpbmcgaGltc2VsZiBhbHNvIGJ5IHRoaXMgdGltZSBzYXRlZCB3aXRoIHZlbmdlYW5jZSwgYWZ0ZXIgc29tZSB3b3JkcyBpbiBwcmFpc2Ugb2YgdGhlIGFuY2llbnQgQXRoZW5pYW5zLCBoZSBzYWlkIHRoYXQgaGUgZm9yZ2F2ZSBhIGZldyBmb3IgdGhlIHNha2Ugb2YgbWFueSwgdGhlIGxpdmluZyBmb3IgdGhlIHNha2Ugb2YgdGhlIGRlYWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRvb2sgQXRoZW5zLCBhcyBoZSBzYXlzIGhpbXNlbGYgaW4gaGlzIE1lbW9pcnMsIG9uIHRoZSBDYWxlbmRzIG9mIE1hcmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjg2IEIuQy4gQ2YuIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY2FwdHVyZSBvZiBBdGhlbnMgZ2l2ZW4gYnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gTWl0aC4gNS4zMCIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGU+QmVsbC4gTWl0aC48L3RpdGxlPiB4eHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGEgZGF5IHdoaWNoIGNvcnJlc3BvbmRzIHZlcnkgbmVhcmx5IHdpdGggdGhlIGZpcnN0IG9mIHRoZSBtb250aCBBbnRoZXN0ZXJpb24uIEluIHRoaXMgbW9udGgsIGFzIGl0IGhhcHBlbnMsIHRoZSBBdGhlbmlhbnMgcGVyZm9ybSBtYW55IHJpdGVzIGNvbW1lbW9yYXRpbmcgdGhlIGRlc3RydWN0aW9uIGFuZCBkZXZhc3RhdGlvbiBjYXVzZWQgYnkgdGhlIGZsb29kLCBiZWxpZXZpbmcgdGhhdCB0aGUgYW5jaWVudCBkZWx1Z2U8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgdGltZSBvZiBEZXVjYWxpb24sIHRoZSBOb2FoIG9mIEdyZWVrIHRyYWRpdGlvbi4gKENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMS4xOC43IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGkuIDE4LCA3LjwvYmlibD7vvIk8L25vdGU+IG9jY3VycmVkIGF0IGFib3V0IHRoaXMgdGltZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIGNhcHR1cmUgb2YgdGhlIHRvd24sIHRoZSB0eXJhbnQgdG9vayByZWZ1Z2UgaW4gdGhlIGFjcm9wb2xpcywgYW5kIHdhcyBiZXNpZWdlZCB0aGVyZSBieSBDdXJpbywgd2hvIHdhcyBhcHBvaW50ZWQgdG8gdGhpcyB0YXNrLiBIZSBoZWxkIG91dCBmb3IgYSBjb25zaWRlcmFibGUgdGltZSwgYnV0IHdhcyBkcml2ZW4gYnkgdGhlIHBhbmdzIG9mIHRoaXJzdCB0byBnaXZlIGhpbXNlbGYgdXAuIEFuZCB0aGUgRGVpdHkgYXQgb25jZSBnYXZlIGEgbWFuaWZlc3QgdG9rZW4gaW4gdGhlIG1hdHRlcjsgZm9yIGF0IHRoZSB2ZXJ5IGhvdXIgb2YgdGhlIGRheSB3aGVuIEN1cmlvIGJyb3VnaHQgaGlzIHByaXNvbmVyIGRvd24sIGNsb3VkcyBnYXRoZXJlZCBpbiBhbiBvcGVuIHNreSwgYW5kIGEgcXVhbnRpdHkgb2YgcmFpbiBmZWxsIGFuZCBmaWxsZWQgdGhlIGFjcm9wb2xpcyB3aXRoIHdhdGVyLiBOb3QgbG9uZyBhZnRlciwgU3VsbGEgdG9vayB0aGUgUGlyYWV1cyBhbHNvLCBhbmQgYnVybnQgbW9zdCBvZiBpdCwgaW5jbHVkaW5nIHRoZSBhcnNlbmFsIG9mIFBoaWxvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IG11c3QgaGF2ZSBiZWVuIGZpbmlzaGVkIGluIDMzMC0zMjkgQi5DLiBTZWUgRnJhemVyIG9uIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjEuMiIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpLiAxLCAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIG1hcnZlbGxvdXMgd29yay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRvb2sgQXRoZW5zLCBhcyBoZSBzYXlzIGhpbXNlbGYgaW4gaGlzIE1lbW9pcnMsIG9uIHRoZSBDYWxlbmRzIG9mIE1hcmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODYgQi5DLiBDZi4gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBjYXB0dXJlIG9mIEF0aGVucyBnaXZlbiBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIE1pdGguIDUuMzAiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gTWl0aC48L3RpdGxlPiB4eHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGEgZGF5IHdoaWNoIGNvcnJlc3BvbmRzIHZlcnkgbmVhcmx5IHdpdGggdGhlIGZpcnN0IG9mIHRoZSBtb250aCBBbnRoZXN0ZXJpb24uIEluIHRoaXMgbW9udGgsIGFzIGl0IGhhcHBlbnMsIHRoZSBBdGhlbmlhbnMgcGVyZm9ybSBtYW55IHJpdGVzIGNvbW1lbW9yYXRpbmcgdGhlIGRlc3RydWN0aW9uIGFuZCBkZXZhc3RhdGlvbiBjYXVzZWQgYnkgdGhlIGZsb29kLCBiZWxpZXZpbmcgdGhhdCB0aGUgYW5jaWVudCBkZWx1Z2U8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIE1pdGguIDUuMzAiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gTWl0aC48L3RpdGxlPiB4eHguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBNaXRoLjwvdGl0bGU+IHh4eC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSB0aW1lIG9mIERldWNhbGlvbiwgdGhlIE5vYWggb2YgR3JlZWsgdHJhZGl0aW9uLiAoQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuMTguNyIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpLiAxOCwgNy48L2JpYmw+77yJPC9ub3RlPiBvY2N1cnJlZCBhdCBhYm91dCB0aGlzIHRpbWUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMS4xOC43IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGkuIDE4LCA3LjwvYmlibD7vvIk8L3RyYW5zbGF0aW9uPg=="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBjYXB0dXJlIG9mIHRoZSB0b3duLCB0aGUgdHlyYW50IHRvb2sgcmVmdWdlIGluIHRoZSBhY3JvcG9saXMsIGFuZCB3YXMgYmVzaWVnZWQgdGhlcmUgYnkgQ3VyaW8sIHdobyB3YXMgYXBwb2ludGVkIHRvIHRoaXMgdGFzay4gSGUgaGVsZCBvdXQgZm9yIGEgY29uc2lkZXJhYmxlIHRpbWUsIGJ1dCB3YXMgZHJpdmVuIGJ5IHRoZSBwYW5ncyBvZiB0aGlyc3QgdG8gZ2l2ZSBoaW1zZWxmIHVwLiBBbmQgdGhlIERlaXR5IGF0IG9uY2UgZ2F2ZSBhIG1hbmlmZXN0IHRva2VuIGluIHRoZSBtYXR0ZXI7IGZvciBhdCB0aGUgdmVyeSBob3VyIG9mIHRoZSBkYXkgd2hlbiBDdXJpbyBicm91Z2h0IGhpcyBwcmlzb25lciBkb3duLCBjbG91ZHMgZ2F0aGVyZWQgaW4gYW4gb3BlbiBza3ksIGFuZCBhIHF1YW50aXR5IG9mIHJhaW4gZmVsbCBhbmQgZmlsbGVkIHRoZSBhY3JvcG9saXMgd2l0aCB3YXRlci4gTm90IGxvbmcgYWZ0ZXIsIFN1bGxhIHRvb2sgdGhlIFBpcmFldXMgYWxzbywgYW5kIGJ1cm50IG1vc3Qgb2YgaXQsIGluY2x1ZGluZyB0aGUgYXJzZW5hbCBvZiBQaGlsbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IG11c3QgaGF2ZSBiZWVuIGZpbmlzaGVkIGluIDMzMC0zMjkgQi5DLiBTZWUgRnJhemVyIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuMS4yIiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGkuIDEsIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGEgbWFydmVsbG91cyB3b3JrLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjEuMiIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpLiAxLCAyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIFRheGlsZXMsIHRoZSBnZW5lcmFsIG9mIE1pdGhyaWRhdGVzIGhhZCBjb21lIGRvd24gZnJvbSBUaHJhY2UgYW5kIE1hY2Vkb25pYSB3aXRoIGEgaHVuZHJlZCB0aG91c2FuZCBmb290bWVuLCB0ZW4gdGhvdXNhbmQgaG9yc2UsIGFuZCBuaW5ldHkgc2N5dGhlLWJlYXJpbmcgZm91ci1ob3JzZSBjaGFyaW90cywgYW5kIHN1bW1vbmVkIEFyY2hlbGFbdXVtbCAgXXMgdG8gam9pbiBoaW0uIEFyY2hlbGFbdXVtbCAgXXMgc3RpbGwgbGF5IHdpdGggaGlzIGZsZWV0IGF0IE11bnljaGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSBvZiB0aGUgdGhyZWUgaGFyYm91cnMgb2YgdGhlIFBpcmFldXMuPC9ub3RlPiBhbmQgd2FzIG5laXRoZXIgd2lsbGluZyB0byBxdWl0IHRoZSBzZWEsIG5vciBlYWdlciB0byBqb2luIGJhdHRsZSB3aXRoIHRoZSBSb21hbnMsIGJ1dCBwbGFubmVkIHRvIHByb3RyYWN0IHRoZSB3YXIgYW5kIGN1dCBvZmYgdGhlaXIgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB1bmRlcnN0b29kIHRoZSBzaXR1YXRpb24gbXVjaCBiZXR0ZXIgdGhhbiBBcmNoZWxhW3V1bWwgIF1zIGRpZCwgYW5kIHRoZXJlZm9yZSB0cmFuc2ZlcnJlZCBoaXMgZm9yY2VzIGludG8gQm9lb3RpYSwgYXdheSBmcm9tIHJlZ2lvbnMgdGhhdCB3ZXJlIGZhciBmcm9tIGZlcnRpbGUsIGFuZCB1bmFibGUgdG8gbWFpbnRhaW4gYSBwb3B1bGF0aW9uIGV2ZW4gaW4gdGltZSBvZiBwZWFjZS4gTW9zdCBwZW9wbGUgdGhvdWdodCB0aGF0IGhlIGhhZCBlcnJlZCBpbiBoaXMgY2FsY3VsYXRpb25zLCBiZWNhdXNlIGhlIGhhZCBhYmFuZG9uZWQgQXR0aWNhLCB3aGljaCB3YXMgYSByb3VnaCBjb3VudHJ5IGFuZCBpbGwtc3VpdGVkIGZvciBjYXZhbHJ5IG1vdmVtZW50cywgYW5kIHRocm93biBoaW1zZWxmIGludG8gdGhlIHBsYWlucyBhbmQgb3BlbiBkaXN0cmljdHMgb2YgQm9lb3RpYSwgYWx0aG91Z2ggaGUgc2F3IHRoYXQgdGhlIHN0cmVuZ3RoIG9mIHRoZSBCYXJiYXJpYW5zIGNvbnNpc3RlZCBpbiBjaGFyaW90cyBhbmQgY2F2YWxyeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIGZseWluZyBmcm9tIHNjYXJjaXR5IGFuZCBmYW1pbmUsIGFzIGhhcyBiZWVuIHNhaWQsIGhlIHdhcyBjb21wZWxsZWQgdG8gcHVyc3VlIHRoZSBkYW5nZXIgYXJpc2luZyBmcm9tIGJhdHRsZS4gQW5kIGZ1cnRoZXJtb3JlLCBoZSB3YXMgYW54aW91cyBhYm91dCBIb3J0ZW5zaXVzLCBhIGJvbGQgYW5kIGNhcGFibGUgZ2VuZXJhbCwgd2hvIHdhcyBsZWFkaW5nIGEgZm9yY2UgZnJvbSBUaGVzc2FseSB0byBTdWxsYSB3aGlsZSB0aGUgQmFyYmFyaWFucyB3ZXJlIGNsb3NlbHkgd2F0Y2hpbmcgZm9yIGhpbSBpbiB0aGUgcGFzc2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IFRoZXJtb3B5bGFlLjwvbm90ZT4gRm9yIHRoZXNlIHJlYXNvbnMgU3VsbGEgdHJhbnNmZXJyZWQgaGlzIGFybXkgaW50byBCb2VvdGlhLiBCdXQgSG9ydGVuc2l1cyB3YXMgcmVzY3VlZCBieSBDYXBoaXMsIGEgY291bnRyeW1hbiBvZiBtaW5lLCBhbmQgY29uZHVjdGVkIGJ5IGRpZmZlcmVudCByb3V0ZXMsIG9mIHdoaWNoIHRoZSBCYXJiYXJpYW5zIHdlcmUgaWdub3JhbnQsIHBhc3QgUGFybmFzc3VzIHRvIGEgc3BvdCBqdXN0IGJlbG93IFRpdGhvcmEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIG5vdCBzbyBsYXJnZSBhIGNpdHkgdGhlbiBhcyBpdCBpcyBub3csIGJ1dCBhIGZvcnRyZXNzIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHN0ZWVwIGNsaWZmcywgaW50byB3aGljaCB0aG9zZSBvZiB0aGUgUGhvY2lhbnMgd2hvIGluIGFuY2llbnQgdGltZXMgZmxlZCBiZWZvcmUgdGhlIGFkdmFuY2Ugb2YgWGVyeGVzIGJldG9vayB0aGVtc2VsdmVzIGFuZCB3ZXJlIHNhdmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiA4LjMyIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaWkuIDMyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIYXZpbmcgZW5jYW1wZWQgaGVyZSwgSG9ydGVuc2l1cyByZXB1bHNlZCB0aGUgZW5lbXkgYnkgZGF5LCBhbmQgYXQgbmlnaHQgZGVzY2VuZGVkIHRvIFBhdHJvbmlzIGJ5IGRpZmZpY3VsdCBwYXRocyBhbmQgbWFkZSBhIGp1bmN0aW9uIHdpdGggU3VsbGEsIHdobyBjYW1lIHRvIG1lZXQgaGltIHdpdGggaGlzIGFybXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIFRheGlsZXMsIHRoZSBnZW5lcmFsIG9mIE1pdGhyaWRhdGVzIGhhZCBjb21lIGRvd24gZnJvbSBUaHJhY2UgYW5kIE1hY2Vkb25pYSB3aXRoIGEgaHVuZHJlZCB0aG91c2FuZCBmb290bWVuLCB0ZW4gdGhvdXNhbmQgaG9yc2UsIGFuZCBuaW5ldHkgc2N5dGhlLWJlYXJpbmcgZm91ci1ob3JzZSBjaGFyaW90cywgYW5kIHN1bW1vbmVkIEFyY2hlbGFbdXVtbCAgXXMgdG8gam9pbiBoaW0uIEFyY2hlbGFbdXVtbCAgXXMgc3RpbGwgbGF5IHdpdGggaGlzIGZsZWV0IGF0IE11bnljaGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25lIG9mIHRoZSB0aHJlZSBoYXJib3VycyBvZiB0aGUgUGlyYWV1cy48L25vdGU+IGFuZCB3YXMgbmVpdGhlciB3aWxsaW5nIHRvIHF1aXQgdGhlIHNlYSwgbm9yIGVhZ2VyIHRvIGpvaW4gYmF0dGxlIHdpdGggdGhlIFJvbWFucywgYnV0IHBsYW5uZWQgdG8gcHJvdHJhY3QgdGhlIHdhciBhbmQgY3V0IG9mZiB0aGVpciBzdXBwbGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB1bmRlcnN0b29kIHRoZSBzaXR1YXRpb24gbXVjaCBiZXR0ZXIgdGhhbiBBcmNoZWxhW3V1bWwgIF1zIGRpZCwgYW5kIHRoZXJlZm9yZSB0cmFuc2ZlcnJlZCBoaXMgZm9yY2VzIGludG8gQm9lb3RpYSwgYXdheSBmcm9tIHJlZ2lvbnMgdGhhdCB3ZXJlIGZhciBmcm9tIGZlcnRpbGUsIGFuZCB1bmFibGUgdG8gbWFpbnRhaW4gYSBwb3B1bGF0aW9uIGV2ZW4gaW4gdGltZSBvZiBwZWFjZS4gTW9zdCBwZW9wbGUgdGhvdWdodCB0aGF0IGhlIGhhZCBlcnJlZCBpbiBoaXMgY2FsY3VsYXRpb25zLCBiZWNhdXNlIGhlIGhhZCBhYmFuZG9uZWQgQXR0aWNhLCB3aGljaCB3YXMgYSByb3VnaCBjb3VudHJ5IGFuZCBpbGwtc3VpdGVkIGZvciBjYXZhbHJ5IG1vdmVtZW50cywgYW5kIHRocm93biBoaW1zZWxmIGludG8gdGhlIHBsYWlucyBhbmQgb3BlbiBkaXN0cmljdHMgb2YgQm9lb3RpYSwgYWx0aG91Z2ggaGUgc2F3IHRoYXQgdGhlIHN0cmVuZ3RoIG9mIHRoZSBCYXJiYXJpYW5zIGNvbnNpc3RlZCBpbiBjaGFyaW90cyBhbmQgY2F2YWxyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBmbHlpbmcgZnJvbSBzY2FyY2l0eSBhbmQgZmFtaW5lLCBhcyBoYXMgYmVlbiBzYWlkLCBoZSB3YXMgY29tcGVsbGVkIHRvIHB1cnN1ZSB0aGUgZGFuZ2VyIGFyaXNpbmcgZnJvbSBiYXR0bGUuIEFuZCBmdXJ0aGVybW9yZSwgaGUgd2FzIGFueGlvdXMgYWJvdXQgSG9ydGVuc2l1cywgYSBib2xkIGFuZCBjYXBhYmxlIGdlbmVyYWwsIHdobyB3YXMgbGVhZGluZyBhIGZvcmNlIGZyb20gVGhlc3NhbHkgdG8gU3VsbGEgd2hpbGUgdGhlIEJhcmJhcmlhbnMgd2VyZSBjbG9zZWx5IHdhdGNoaW5nIGZvciBoaW0gaW4gdGhlIHBhc3Nlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IFRoZXJtb3B5bGFlLjwvbm90ZT4gRm9yIHRoZXNlIHJlYXNvbnMgU3VsbGEgdHJhbnNmZXJyZWQgaGlzIGFybXkgaW50byBCb2VvdGlhLiBCdXQgSG9ydGVuc2l1cyB3YXMgcmVzY3VlZCBieSBDYXBoaXMsIGEgY291bnRyeW1hbiBvZiBtaW5lLCBhbmQgY29uZHVjdGVkIGJ5IGRpZmZlcmVudCByb3V0ZXMsIG9mIHdoaWNoIHRoZSBCYXJiYXJpYW5zIHdlcmUgaWdub3JhbnQsIHBhc3QgUGFybmFzc3VzIHRvIGEgc3BvdCBqdXN0IGJlbG93IFRpdGhvcmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIG5vdCBzbyBsYXJnZSBhIGNpdHkgdGhlbiBhcyBpdCBpcyBub3csIGJ1dCBhIGZvcnRyZXNzIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHN0ZWVwIGNsaWZmcywgaW50byB3aGljaCB0aG9zZSBvZiB0aGUgUGhvY2lhbnMgd2hvIGluIGFuY2llbnQgdGltZXMgZmxlZCBiZWZvcmUgdGhlIGFkdmFuY2Ugb2YgWGVyeGVzIGJldG9vayB0aGVtc2VsdmVzIGFuZCB3ZXJlIHNhdmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC4zMiIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWlpLiAzMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSGF2aW5nIGVuY2FtcGVkIGhlcmUsIEhvcnRlbnNpdXMgcmVwdWxzZWQgdGhlIGVuZW15IGJ5IGRheSwgYW5kIGF0IG5pZ2h0IGRlc2NlbmRlZCB0byBQYXRyb25pcyBieSBkaWZmaWN1bHQgcGF0aHMgYW5kIG1hZGUgYSBqdW5jdGlvbiB3aXRoIFN1bGxhLCB3aG8gY2FtZSB0byBtZWV0IGhpbSB3aXRoIGhpcyBhcm15LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDguMzIiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgdmlpaS4gMzIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXkgaGFkIHRodXMgdW5pdGVkIHRoZWlyIGZvcmNlcywgdGhleSBvY2N1cGllZCBhIGhpbGwgd2hpY2ggcm9zZSBvdXQgb2YgdGhlIG1pZHN0IG9mIHRoZSBwbGFpbnMgb2YgRWxhdGVhLCBhIGZlcnRpbGUgaGlsbCwgdGhpY2tseSBncm93biB3aXRoIHRyZWVzLCBhbmQgc3VwcGxpZWQgd2l0aCB3YXRlciBhdCBpdHMgYmFzZS4gUGhpbG9ib2VvdHVzIGlzIGl0cyBuYW1lLCBhbmQgaXRzIHNpdHVhdGlvbiBhbmQgbmF0dXJhbCBhZHZhbnRhZ2VzIGFyZSBtb3N0IGhpZ2hseSBwcmFpc2VkIGJ5IFN1bGxhLiBBcyB0aGV5IGxheSBlbmNhbXBlZCBoZXJlLCB0aGV5IGFwcGVhcmVkIHRvIHRoZSBlbmVteSBhbHRvZ2V0aGVyIGZldyBpbiBudW1iZXJzOyBmb3IgdGhleSB3ZXJlIG5vdCBtb3JlIHRoYW4gZmlmdGVlbiBodW5kcmVkIGhvcnNlLCBhbmQgbGVzcyB0aGFuIGZpZnRlZW4gdGhvdXNhbmQgZm9vdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIHRoZSByZXN0IG9mIGhpcyBnZW5lcmFscyBvdmVycG93ZXJlZCB0aGUgb2JqZWN0aW9ucyBvZiBBcmNoZWxhW3V1bWwgIF1zIGFuZCBkcmV3IHVwIGZvciBiYXR0bGUsIGZpbGxpbmcgdGhlIHBsYWluIHdpdGggdGhlaXIgaG9yc2VzLCBjaGFyaW90cywgc2hpZWxkcywgYW5kIGJ1Y2tsZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IGhhZCB0aHVzIHVuaXRlZCB0aGVpciBmb3JjZXMsIHRoZXkgb2NjdXBpZWQgYSBoaWxsIHdoaWNoIHJvc2Ugb3V0IG9mIHRoZSBtaWRzdCBvZiB0aGUgcGxhaW5zIG9mIEVsYXRlYSwgYSBmZXJ0aWxlIGhpbGwsIHRoaWNrbHkgZ3Jvd24gd2l0aCB0cmVlcywgYW5kIHN1cHBsaWVkIHdpdGggd2F0ZXIgYXQgaXRzIGJhc2UuIFBoaWxvYm9lb3R1cyBpcyBpdHMgbmFtZSwgYW5kIGl0cyBzaXR1YXRpb24gYW5kIG5hdHVyYWwgYWR2YW50YWdlcyBhcmUgbW9zdCBoaWdobHkgcHJhaXNlZCBieSBTdWxsYS4gQXMgdGhleSBsYXkgZW5jYW1wZWQgaGVyZSwgdGhleSBhcHBlYXJlZCB0byB0aGUgZW5lbXkgYWx0b2dldGhlciBmZXcgaW4gbnVtYmVyczsgZm9yIHRoZXkgd2VyZSBub3QgbW9yZSB0aGFuIGZpZnRlZW4gaHVuZHJlZCBob3JzZSwgYW5kIGxlc3MgdGhhbiBmaWZ0ZWVuIHRob3VzYW5kIGZvb3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgcmVzdCBvZiBoaXMgZ2VuZXJhbHMgb3ZlcnBvd2VyZWQgdGhlIG9iamVjdGlvbnMgb2YgQXJjaGVsYVt1dW1sICBdcyBhbmQgZHJldyB1cCBmb3IgYmF0dGxlLCBmaWxsaW5nIHRoZSBwbGFpbiB3aXRoIHRoZWlyIGhvcnNlcywgY2hhcmlvdHMsIHNoaWVsZHMsIGFuZCBidWNrbGVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgYWlyIGNvdWxkIG5vdCBjb250YWluIHRoZSBzaG91dHMgYW5kIGNsYW1vdXIgb2Ygc28gbWFueSBuYXRpb25zIGZvcm1pbmcgaW4gYXJyYXkuIEF0IHRoZSBzYW1lIHRpbWUgYWxzbyB0aGUgcG9tcCBhbmQgb3N0ZW50YXRpb24gb2YgdGhlaXIgY29zdGx5IGVxdWlwbWVudCB3YXMgbm90IHdpdGhvdXQgaXRzIGVmZmVjdCBhbmQgdXNlIGluIGV4Y2l0aW5nIHRlcnJvcjsgaW5kZWVkLCB0aGUgZmxhc2hpbmcgb2YgdGhlaXIgYXJtb3VyLCB3aGljaCB3YXMgbWFnbmlmaWNlbnRseSBlbWJlbGxpc2hlZCB3aXRoIGdvbGQgYW5kIHNpbHZlciwgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIHJpY2ggY29sb3VycyBvZiB0aGVpciBNZWRpYW4gYW5kIFNjeXRoaWFuIHZlc3RzLCBpbnRlcm1pbmdsZWQgd2l0aCBicm9uemUgYW5kIGZsYXNoaW5nIHN0ZWVsLCBwcmVzZW50ZWQgYSBmbGFtaW5nIGFuZCBmZWFyZnVsIHNpZ2h0IGFzIHRoZXkgc3VyZ2VkIHRvIGFuZCBmcm8sIHNvIHRoYXQgdGhlIFJvbWFucyBodWRkbGVkIHRvZ2V0aGVyIGJlaGluZCB0aGVpciB0cmVuY2hlcywgYW5kIFN1bGxhLCB1bmFibGUgYnkgYW55IHJlYXNvbmluZyB0byByZW1vdmUgdGhlaXIgZmVhciwgYW5kIHVud2lsbGluZyB0byBmb3JjZSB0aGVtIGludG8gYSBmaWdodCBmcm9tIHdoaWNoIHRoZXkgd2FudGVkIHRvIHJ1biBhd2F5LCBoYWQgdG8gc2l0IHN0aWxsIGFuZCBlbmR1cmUgYXMgYmVzdCBoZSBjb3VsZCB0aGUgc2lnaHQgb2YgdGhlIEJhcmJhcmlhbnMgaW5zdWx0aW5nIGhpbSB3aXRoIGJvYXN0cyBhbmQgbGF1Z2h0ZXIuIFRoaXMsIGhvd2V2ZXIsIHdhcyBvZiBzZXJ2aWNlIHRvIGhpbSBhYm92ZSBhbGwgZWxzZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG93aW5nIHRvIHRoZWlyIGNvbnRlbXB0IG9mIGhpbSwgaGlzIG9wcG9uZW50cyBsYXBzZWQgaW50byBncmVhdCBkaXNvcmRlciwgc2luY2UgZXZlbiBhdCB0aGVpciBiZXN0IHRoZXkgd2VyZSBub3Qgb2JlZGllbnQgdG8gdGhlaXIgZ2VuZXJhbHMsIG93aW5nIHRvIHRoZSBncmVhdCBudW1iZXIgaW4gY29tbWFuZC4gRmV3IG9mIHRoZW0gdGhlcmVmb3JlIGNvbnNlbnRlZCB0byByZW1haW4gd2l0aGluIHRoZWlyIGVudHJlbmNobWVudHMsIGJ1dCB0aGUgbGFyZ2VzdCBwYXJ0IG9mIHRoZSB0aHJvbmcgd2FzIGx1cmVkIGF3YXkgYnkgcGx1bmRlciBhbmQgcGlsbGFnZSwgYW5kIHdhcyBzY2F0dGVyZWQgYWJvdXQgdGhlIGNvdW50cnkgbWFueSBkYXlzIG1hcmNoIGZyb20gdGhlaXIgY2FtcC4gVGhleSBhcmUgc2FpZCB0byBoYXZlIGRlc3Ryb3llZCB0aGUgY2l0eSBvZiBQYW5vcGUsIGFuZCB0byBoYXZlIHNhY2tlZCBMZWJhZGVpYSBhbmQgZGVzcG9pbGVkIGl0cyBvcmFjbGUsIGFsdGhvdWdoIG5vbmUgb2YgdGhlaXIgZ2VuZXJhbHMgb3JkZXJlZCB0aGVtIHRvIGRvIHNvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgcmljaCBjb2xvdXJzIG9mIHRoZWlyIE1lZGlhbiBhbmQgU2N5dGhpYW4gdmVzdHMsIGludGVybWluZ2xlZCB3aXRoIGJyb256ZSBhbmQgZmxhc2hpbmcgc3RlZWwsIHByZXNlbnRlZCBhIGZsYW1pbmcgYW5kIGZlYXJmdWwgc2lnaHQgYXMgdGhleSBzdXJnZWQgdG8gYW5kIGZybywgc28gdGhhdCB0aGUgUm9tYW5zIGh1ZGRsZWQgdG9nZXRoZXIgYmVoaW5kIHRoZWlyIHRyZW5jaGVzLCBhbmQgU3VsbGEsIHVuYWJsZSBieSBhbnkgcmVhc29uaW5nIHRvIHJlbW92ZSB0aGVpciBmZWFyLCBhbmQgdW53aWxsaW5nIHRvIGZvcmNlIHRoZW0gaW50byBhIGZpZ2h0IGZyb20gd2hpY2ggdGhleSB3YW50ZWQgdG8gcnVuIGF3YXksIGhhZCB0byBzaXQgc3RpbGwgYW5kIGVuZHVyZSBhcyBiZXN0IGhlIGNvdWxkIHRoZSBzaWdodCBvZiB0aGUgQmFyYmFyaWFucyBpbnN1bHRpbmcgaGltIHdpdGggYm9hc3RzIGFuZCBsYXVnaHRlci4gVGhpcywgaG93ZXZlciwgd2FzIG9mIHNlcnZpY2UgdG8gaGltIGFib3ZlIGFsbCBlbHNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvd2luZyB0byB0aGVpciBjb250ZW1wdCBvZiBoaW0sIGhpcyBvcHBvbmVudHMgbGFwc2VkIGludG8gZ3JlYXQgZGlzb3JkZXIsIHNpbmNlIGV2ZW4gYXQgdGhlaXIgYmVzdCB0aGV5IHdlcmUgbm90IG9iZWRpZW50IHRvIHRoZWlyIGdlbmVyYWxzLCBvd2luZyB0byB0aGUgZ3JlYXQgbnVtYmVyIGluIGNvbW1hbmQuIEZldyBvZiB0aGVtIHRoZXJlZm9yZSBjb25zZW50ZWQgdG8gcmVtYWluIHdpdGhpbiB0aGVpciBlbnRyZW5jaG1lbnRzLCBidXQgdGhlIGxhcmdlc3QgcGFydCBvZiB0aGUgdGhyb25nIHdhcyBsdXJlZCBhd2F5IGJ5IHBsdW5kZXIgYW5kIHBpbGxhZ2UsIGFuZCB3YXMgc2NhdHRlcmVkIGFib3V0IHRoZSBjb3VudHJ5IG1hbnkgZGF5cyBtYXJjaCBmcm9tIHRoZWlyIGNhbXAuIFRoZXkgYXJlIHNhaWQgdG8gaGF2ZSBkZXN0cm95ZWQgdGhlIGNpdHkgb2YgUGFub3BlLCBhbmQgdG8gaGF2ZSBzYWNrZWQgTGViYWRlaWEgYW5kIGRlc3BvaWxlZCBpdHMgb3JhY2xlLCBhbHRob3VnaCBub25lIG9mIHRoZWlyIGdlbmVyYWxzIG9yZGVyZWQgdGhlbSB0byBkbyBzby4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFN1bGxhLCB0aG91Z2ggY2hhZmluZyBhbmQgZnJldHRpbmcgd2hpbGUgY2l0aWVzIHdlcmUgZGVzdHJveWVkIGJlZm9yZSBoaXMgZXllcywgd291bGQgbm90IHN1ZmZlciBoaXMgc29sZGllcnMgdG8gYmUgaWRsZSwgYnV0IGxlZCB0aGVtIG91dCBhbmQgZm9yY2VkIHRoZW0gdG8gZGlnIGRpdGNoZXMgYW5kIGRpdmVydCB0aGUgQ2VwaGlzdXMgZnJvbSBpdHMgY2hhbm5lbCwgZ2l2aW5nIG5vIG1hbiBhIHJlc3BpdGUsIGFuZCBzaG93aW5nIGhpbXNlbGYgYW4gaW5leG9yYWJsZSBjaGFzdGlzZXIgb2YgdGhvc2Ugd2hvIHdlcmUgcmVtaXNzLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgYmUgd29ybiBvdXQgYXQgdGhlaXIgdGFza3MgYW5kIGluZHVjZWQgYnkgdGhlaXIgaGFyZHNoaXBzIHRvIHdlbGNvbWUgZGFuZ2VyLiBBbmQgc28gaXQgZmVsbCBvdXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvbiB0aGUgdGhpcmQgZGF5IG9mIHRoZWlyIGRydWRnZXJ5LCBhcyBTdWxsYSBwYXNzZWQgYnksIHRoZXkgYmVnZ2VkIGFuZCBjbGFtb3VyZWQgdG8gYmUgbGVkIGFnYWluc3QgdGhlIGVuZW15LiBCdXQgU3VsbGEgc2FpZCB0aGVpciB3b3JkcyBzaG93ZWQgbm90IGEgd2lsbGluZ25lc3MgdG8gZmlnaHQsIGJ1dCBhbiB1bndpbGxpbmduZXNzIHRvIGxhYm91cjsgaWYsIGhvd2V2ZXIsIHRoZXkgd2VyZSByZWFsbHkgZGlzcG9zZWQgdG8gZmlnaHQsIHRoZW4gaGUgYmFkZSB0aGVtIHRha2UgdGhlaXIgYXJtcyBhbmQgZ28gYXQgb25jZSB5b25kZXIsIHBvaW50aW5nIHRoZW0gdG8gd2hhdCBoYWQgZm9ybWVybHkgYmVlbiB0aGUgYWNyb3BvbGlzIG9mIFBhcmFwb3RhbWlpLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIGhvd2V2ZXIsIHRoZSBjaXR5IGhhZCBiZWVuIGRlc3Ryb3llZCwgYW5kIG9ubHkgYSByb2NreSBhbmQgcHJlY2lwaXRvdXMgY3Jlc3QgcmVtYWluZWQsIHNlcGFyYXRlZCBmcm9tIE1vdW50IEhlZHlsaXVtIGJ5IHRoZSBicmVhZHRoIG9mIHRoZSByaXZlciBBc3N1cywgd2hpY2ggdGhlbiBmYWxscyBpbnRvIHRoZSBDZXBoaXN1cyBhdCB0aGUgdmVyeSBiYXNlIG9mIHRoZSBtb3VudGFpbiwgYmVjb21lcyBpbXBldHVvdXMgaW4gaXRzIGZsb3cgYWZ0ZXIgdGhlIGNvbmZsdWVuY2UsIGFuZCBtYWtlcyB0aGUgY2l0YWRlbCBhIHN0cm9uZyBwbGFjZSBmb3IgYSBjYW1wLiBGb3IgdGhpcyByZWFzb24sIGFuZCBiZWNhdXNlIGhlIHNhdyB0aGUgQ2hhbGNhc3BpZGVzLCBvciA8ZW1waD5Ccm9uemUtc2hpZWxkczwvZW1waD4sIG9mIHRoZSBlbmVteSBwdXNoaW5nIHRoZWlyIHdheSB0b3dhcmRzIGl0LCBTdWxsYSB3aXNoZWQgdG8gb2NjdXB5IHRoZSBwbGFjZSBmaXJzdDsgYW5kIGhlIGRpZCBvY2N1cHkgaXQsIG5vdyB0aGF0IGhlIGZvdW5kIGhpcyBzb2xkaWVycyBlYWdlciBmb3IgYWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBBcmNoZWxhW3V1bWwgIF1zLCByZXB1bHNlZCBmcm9tIHRoaXMgc2l0ZSwgc2V0IG91dCBhZ2FpbnN0IENoYWVyb25laWEsIGFuZCB0aGUgQ2hhZXJvbmVpYW5zIGluIFN1bGxhJ3MgYXJteSBiZXNvdWdodCBoaW0gbm90IHRvIGFiYW5kb24gdGhlaXIgY2l0eSB0byBpdHMgZmF0ZSwgaGUgc2VudCBvdXQgR2FiaW5pdXMsIG9uZSBvZiBoaXMgdHJpYnVuZXMsIHdpdGggb25lIGxlZ2lvbiwgYW5kIGxldCB0aGUgQ2hhZXJvbmVpYW5zIGFsc28gZ28sIHdobyB3aXNoZWQsIGJ1dCB3ZXJlIHVuYWJsZSwgdG8gZ2V0IGludG8gdGhlIGNpdHkgYmVmb3JlIEdhYmluaXVzLiBTbyBlZmZpY2llbnQgd2FzIGhlLCBhbmQgbW9yZSBlYWdlciB0byBicmluZyBzdWNjb3VyIHRoYW4gdGhvc2Ugd2hvIGJlZ2dlZCB0aGF0IHN1Y2NvdXIgc2hvdWxkIGJlIGdpdmVuLiBKdWJhLCBob3dldmVyLCBzYXlzIGl0IHdhcyBub3QgR2FiaW5pdXMsIGJ1dCBFcmljaXVzLCB3aG8gd2FzIHRodXMgc2VudC4gQXQgYW55IHJhdGUsIHNvIG5hcnJvd2x5IGRpZCBteSBuYXRpdmUgY2l0eSBlc2NhcGUgaXRzIHBlcmlsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSwgdGhvdWdoIGNoYWZpbmcgYW5kIGZyZXR0aW5nIHdoaWxlIGNpdGllcyB3ZXJlIGRlc3Ryb3llZCBiZWZvcmUgaGlzIGV5ZXMsIHdvdWxkIG5vdCBzdWZmZXIgaGlzIHNvbGRpZXJzIHRvIGJlIGlkbGUsIGJ1dCBsZWQgdGhlbSBvdXQgYW5kIGZvcmNlZCB0aGVtIHRvIGRpZyBkaXRjaGVzIGFuZCBkaXZlcnQgdGhlIENlcGhpc3VzIGZyb20gaXRzIGNoYW5uZWwsIGdpdmluZyBubyBtYW4gYSByZXNwaXRlLCBhbmQgc2hvd2luZyBoaW1zZWxmIGFuIGluZXhvcmFibGUgY2hhc3Rpc2VyIG9mIHRob3NlIHdobyB3ZXJlIHJlbWlzcywgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IGJlIHdvcm4gb3V0IGF0IHRoZWlyIHRhc2tzIGFuZCBpbmR1Y2VkIGJ5IHRoZWlyIGhhcmRzaGlwcyB0byB3ZWxjb21lIGRhbmdlci4gQW5kIHNvIGl0IGZlbGwgb3V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvbiB0aGUgdGhpcmQgZGF5IG9mIHRoZWlyIGRydWRnZXJ5LCBhcyBTdWxsYSBwYXNzZWQgYnksIHRoZXkgYmVnZ2VkIGFuZCBjbGFtb3VyZWQgdG8gYmUgbGVkIGFnYWluc3QgdGhlIGVuZW15LiBCdXQgU3VsbGEgc2FpZCB0aGVpciB3b3JkcyBzaG93ZWQgbm90IGEgd2lsbGluZ25lc3MgdG8gZmlnaHQsIGJ1dCBhbiB1bndpbGxpbmduZXNzIHRvIGxhYm91cjsgaWYsIGhvd2V2ZXIsIHRoZXkgd2VyZSByZWFsbHkgZGlzcG9zZWQgdG8gZmlnaHQsIHRoZW4gaGUgYmFkZSB0aGVtIHRha2UgdGhlaXIgYXJtcyBhbmQgZ28gYXQgb25jZSB5b25kZXIsIHBvaW50aW5nIHRoZW0gdG8gd2hhdCBoYWQgZm9ybWVybHkgYmVlbiB0aGUgYWNyb3BvbGlzIG9mIFBhcmFwb3RhbWlpLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgdGhlIGNpdHkgaGFkIGJlZW4gZGVzdHJveWVkLCBhbmQgb25seSBhIHJvY2t5IGFuZCBwcmVjaXBpdG91cyBjcmVzdCByZW1haW5lZCwgc2VwYXJhdGVkIGZyb20gTW91bnQgSGVkeWxpdW0gYnkgdGhlIGJyZWFkdGggb2YgdGhlIHJpdmVyIEFzc3VzLCB3aGljaCB0aGVuIGZhbGxzIGludG8gdGhlIENlcGhpc3VzIGF0IHRoZSB2ZXJ5IGJhc2Ugb2YgdGhlIG1vdW50YWluLCBiZWNvbWVzIGltcGV0dW91cyBpbiBpdHMgZmxvdyBhZnRlciB0aGUgY29uZmx1ZW5jZSwgYW5kIG1ha2VzIHRoZSBjaXRhZGVsIGEgc3Ryb25nIHBsYWNlIGZvciBhIGNhbXAuIEZvciB0aGlzIHJlYXNvbiwgYW5kIGJlY2F1c2UgaGUgc2F3IHRoZSBDaGFsY2FzcGlkZXMsIG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJvbnplLXNoaWVsZHM8L2VtcGg+LCBvZiB0aGUgZW5lbXkgcHVzaGluZyB0aGVpciB3YXkgdG93YXJkcyBpdCwgU3VsbGEgd2lzaGVkIHRvIG9jY3VweSB0aGUgcGxhY2UgZmlyc3Q7IGFuZCBoZSBkaWQgb2NjdXB5IGl0LCBub3cgdGhhdCBoZSBmb3VuZCBoaXMgc29sZGllcnMgZWFnZXIgZm9yIGFjdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFyY2hlbGFbdXVtbCAgXXMsIHJlcHVsc2VkIGZyb20gdGhpcyBzaXRlLCBzZXQgb3V0IGFnYWluc3QgQ2hhZXJvbmVpYSwgYW5kIHRoZSBDaGFlcm9uZWlhbnMgaW4gU3VsbGEncyBhcm15IGJlc291Z2h0IGhpbSBub3QgdG8gYWJhbmRvbiB0aGVpciBjaXR5IHRvIGl0cyBmYXRlLCBoZSBzZW50IG91dCBHYWJpbml1cywgb25lIG9mIGhpcyB0cmlidW5lcywgd2l0aCBvbmUgbGVnaW9uLCBhbmQgbGV0IHRoZSBDaGFlcm9uZWlhbnMgYWxzbyBnbywgd2hvIHdpc2hlZCwgYnV0IHdlcmUgdW5hYmxlLCB0byBnZXQgaW50byB0aGUgY2l0eSBiZWZvcmUgR2FiaW5pdXMuIFNvIGVmZmljaWVudCB3YXMgaGUsIGFuZCBtb3JlIGVhZ2VyIHRvIGJyaW5nIHN1Y2NvdXIgdGhhbiB0aG9zZSB3aG8gYmVnZ2VkIHRoYXQgc3VjY291ciBzaG91bGQgYmUgZ2l2ZW4uIEp1YmEsIGhvd2V2ZXIsIHNheXMgaXQgd2FzIG5vdCBHYWJpbml1cywgYnV0IEVyaWNpdXMsIHdobyB3YXMgdGh1cyBzZW50LiBBdCBhbnkgcmF0ZSwgc28gbmFycm93bHkgZGlkIG15IG5hdGl2ZSBjaXR5IGVzY2FwZSBpdHMgcGVyaWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gTGViYWRlaWEgYW5kIHRoZSBjYXZlIG9mIFRyb3Bob25pdXMgZmF2b3VyYWJsZSB1dHRlcmFuY2VzIGFuZCBvcmFjbGVzIGFubm91bmNpbmcgdmljdG9yeSB3ZXJlIG5vdyBzZW50IG91dCB0byB0aGUgUm9tYW5zLiBPZiB0aGVzZSB0aGUgaW5oYWJpdGFudHMgb2YgdGhlIGNvdW50cnkgaGF2ZSBtb3JlIHRvIHNheTsgYnV0IFN1bGxhIGhpbXNlbGYgaGFzIHdyaXR0ZW4gaW4gdGhlIHRlbnRoIGJvb2sgb2YgaGlzIE1lbW9pcnMsIGhvdyBRdWludHVzIFRpdGl1cywgYSBwcm9taW5lbnQgbWFuIGFtb25nIHRoZSBSb21hbnMgZG9pbmcgYnVzaW5lc3MgaW4gR3JlZWNlLCBjYW1lIHRvIGhpbSBpbW1lZGlhdGVseSBhZnRlciBoZSBoYWQgd29uIGhpcyB2aWN0b3J5IGF0IENoYWVyb25laWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgZGVzY3JpYmVkIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxOSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdpdGggdGlkaW5ncyB0aGF0IFRyb3Bob25pdXMgcHJlZGljdGVkIGZvciBoaW0gYSBzZWNvbmQgYmF0dGxlIGFuZCB2aWN0b3J5IGluIHRoYXQgbmVpZ2hib3VyaG9vZCB3aXRoaW4gYSBzaG9ydCB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5lYXIgT3JjaG9tZW51cywgYXMgZGVzY3JpYmVkIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAyMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFmdGVyIGhpbSwgYSBsZWdpb25hcnkgc29sZGllciwgU2FsdmVuaXVzIGJ5IG5hbWUsIGJyb3VnaHQgaGltIGZyb20gdGhlIGdvZCBhIHN0YXRlbWVudCBvZiB0aGUgaXNzdWUgd2hpY2ggYWZmYWlycyBpbiBJdGFseSB3ZXJlIGdvaW5nIHRvIGhhdmUuIEJ1dCBib3RoIGFncmVlZCBhYm91dCB0aGUgc291cmNlIG9mIHRoZWlyIG9yYWNsZTsgZm9yIHRoZXkgc2FpZCB0aGV5IGhhZCBiZWhlbGQgb25lIHdobyBpbiBiZWF1dHkgYW5kIG1hamVzdHkgd2FzIGxpa2UgdW50byBPbHltcGlhbiBKb3ZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSBMZWJhZGVpYSBhbmQgdGhlIGNhdmUgb2YgVHJvcGhvbml1cyBmYXZvdXJhYmxlIHV0dGVyYW5jZXMgYW5kIG9yYWNsZXMgYW5ub3VuY2luZyB2aWN0b3J5IHdlcmUgbm93IHNlbnQgb3V0IHRvIHRoZSBSb21hbnMuIE9mIHRoZXNlIHRoZSBpbmhhYml0YW50cyBvZiB0aGUgY291bnRyeSBoYXZlIG1vcmUgdG8gc2F5OyBidXQgU3VsbGEgaGltc2VsZiBoYXMgd3JpdHRlbiBpbiB0aGUgdGVudGggYm9vayBvZiBoaXMgTWVtb2lycywgaG93IFF1aW50dXMgVGl0aXVzLCBhIHByb21pbmVudCBtYW4gYW1vbmcgdGhlIFJvbWFucyBkb2luZyBidXNpbmVzcyBpbiBHcmVlY2UsIGNhbWUgdG8gaGltIGltbWVkaWF0ZWx5IGFmdGVyIGhlIGhhZCB3b24gaGlzIHZpY3RvcnkgYXQgQ2hhZXJvbmVpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIGRlc2NyaWJlZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxOSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdpdGggdGlkaW5ncyB0aGF0IFRyb3Bob25pdXMgcHJlZGljdGVkIGZvciBoaW0gYSBzZWNvbmQgYmF0dGxlIGFuZCB2aWN0b3J5IGluIHRoYXQgbmVpZ2hib3VyaG9vZCB3aXRoaW4gYSBzaG9ydCB0aW1lLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDE5IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpeC48L2JpYmw+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmVhciBPcmNob21lbnVzLCBhcyBkZXNjcmliZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHhpLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBoaW0sIGEgbGVnaW9uYXJ5IHNvbGRpZXIsIFNhbHZlbml1cyBieSBuYW1lLCBicm91Z2h0IGhpbSBmcm9tIHRoZSBnb2QgYSBzdGF0ZW1lbnQgb2YgdGhlIGlzc3VlIHdoaWNoIGFmZmFpcnMgaW4gSXRhbHkgd2VyZSBnb2luZyB0byBoYXZlLiBCdXQgYm90aCBhZ3JlZWQgYWJvdXQgdGhlIHNvdXJjZSBvZiB0aGVpciBvcmFjbGU7IGZvciB0aGV5IHNhaWQgdGhleSBoYWQgYmVoZWxkIG9uZSB3aG8gaW4gYmVhdXR5IGFuZCBtYWplc3R5IHdhcyBsaWtlIHVudG8gT2x5bXBpYW4gSm92ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm93IGNyb3NzZWQgdGhlIEFzc3VzLCBhbmQgYWZ0ZXIgYWR2YW5jaW5nIHRvIHRoZSBmb290IG9mIE1vdW50IEhlZHlsaXVtLCBlbmNhbXBlZCBvdmVyIGFnYWluc3QgQXJjaGVsYVt1dW1sICBdcywgd2hvIGhhZCB0aHJvd24gdXAgc3Ryb25nIGVudHJlbmNobWVudHMgYmV0d2VlbiBNb3VudHMgQWNvbnRpdW0gYW5kIEhlZHlsaXVtLCBhdCB0aGUgc28tY2FsbGVkIEFzc2lhbiBwbGFpbi4gVGhlIHNwb3QgaW4gd2hpY2ggaGUgZW5jYW1wZWQsIG1vcmVvdmVyLCBpcyB0byB0aGlzIGRheSBjYWxsZWQgQXJjaGVsYVt1dW1sICBdcywgYWZ0ZXIgaGltLiBBZnRlciBvbmUgZGF5J3MgcmVzcGl0ZSwgU3VsbGEgbGVmdCBNdXJlbmEgYmVoaW5kIHdpdGggb25lIGxlZ2lvbiBhbmQgdHdvIGNvaG9ydHMsIHRvIG9ic3RydWN0IHRoZSBlbmVteSBpZiB0aGV5IGF0dGVtcHRlZCB0byBkcmF3IHVwIHRoZWlyIGZvcmNlcywgd2hpbGUgaGUgaGltc2VsZiBoZWxkIHNhY3JpZmljZXMgb24gdGhlIGJhbmtzIG9mIHRoZSBDZXBoaXN1cywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kLCB3aGVuIHRoZSByaXRlcyB3ZXJlIG92ZXIsIG1vdmVkIG9uIHRvd2FyZHMgQ2hhZXJvbmVpYSwgdG8gcGljayB1cCB0aGUgZm9yY2VzIHN0YXRpb25lZCB0aGVyZSwgYW5kIHRvIHJlY29ubm9pdHJlIFRodXJpdW0sIGFzIGl0IGlzIGNhbGxlZCwgd2hpY2ggaGFkIGJlZW4gYWxyZWFkeSBvY2N1cGllZCBieSB0aGUgZW5lbXkuIFRoaXMgaXMgYSBjb25pY2FsLXNoYXBlZCBoaWxsIHdpdGggYSBjcmFnZ3kgcGVhayAod2UgY2FsbCBpdCBPcnRob3BhZ3VzKSwgYW5kIGF0IGl0cyBmb290IGlzIHRoZSByaXZlciBNb2x1cyBhbmQgYSB0ZW1wbGUgb2YgQXBvbGxvIFRodXJpdXMuIFRoZSBnb2QgZ290IHRoaXMgc3VybmFtZSBmcm9tIFRodXJvLCB0aGUgbW90aGVyIG9mIENoYWVyb24sIHdobyB3YXMgZm91bmRlciBvZiBDaGFlcm9uZWlhLCBhY2NvcmRpbmcgdG8gdHJhZGl0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc29tZSBzYXkgdGhhdCB0aGUgY293IHdoaWNoIHdhcyBnaXZlbiBieSBBcG9sbG8gdG8gQ2FkbXVzIGFzIGhpcyBndWlkZSwgYXBwZWFyZWQgdGhlcmUsIGFuZCB0aGF0IHRoZSBwbGFjZSB3YXMgbmFtZWQgYXMgaXQgaXMgZnJvbSBoZXIsIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3I8L3E+IGJlaW5nIHRoZSBQaG9lbmljaWFuIHdvcmQgZm9yIDxlbXBoPmNvdy48L2VtcGg+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhIG5vdyBjcm9zc2VkIHRoZSBBc3N1cywgYW5kIGFmdGVyIGFkdmFuY2luZyB0byB0aGUgZm9vdCBvZiBNb3VudCBIZWR5bGl1bSwgZW5jYW1wZWQgb3ZlciBhZ2FpbnN0IEFyY2hlbGFbdXVtbCAgXXMsIHdobyBoYWQgdGhyb3duIHVwIHN0cm9uZyBlbnRyZW5jaG1lbnRzIGJldHdlZW4gTW91bnRzIEFjb250aXVtIGFuZCBIZWR5bGl1bSwgYXQgdGhlIHNvLWNhbGxlZCBBc3NpYW4gcGxhaW4uIFRoZSBzcG90IGluIHdoaWNoIGhlIGVuY2FtcGVkLCBtb3Jlb3ZlciwgaXMgdG8gdGhpcyBkYXkgY2FsbGVkIEFyY2hlbGFbdXVtbCAgXXMsIGFmdGVyIGhpbS4gQWZ0ZXIgb25lIGRheSdzIHJlc3BpdGUsIFN1bGxhIGxlZnQgTXVyZW5hIGJlaGluZCB3aXRoIG9uZSBsZWdpb24gYW5kIHR3byBjb2hvcnRzLCB0byBvYnN0cnVjdCB0aGUgZW5lbXkgaWYgdGhleSBhdHRlbXB0ZWQgdG8gZHJhdyB1cCB0aGVpciBmb3JjZXMsIHdoaWxlIGhlIGhpbXNlbGYgaGVsZCBzYWNyaWZpY2VzIG9uIHRoZSBiYW5rcyBvZiB0aGUgQ2VwaGlzdXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgd2hlbiB0aGUgcml0ZXMgd2VyZSBvdmVyLCBtb3ZlZCBvbiB0b3dhcmRzIENoYWVyb25laWEsIHRvIHBpY2sgdXAgdGhlIGZvcmNlcyBzdGF0aW9uZWQgdGhlcmUsIGFuZCB0byByZWNvbm5vaXRyZSBUaHVyaXVtLCBhcyBpdCBpcyBjYWxsZWQsIHdoaWNoIGhhZCBiZWVuIGFscmVhZHkgb2NjdXBpZWQgYnkgdGhlIGVuZW15LiBUaGlzIGlzIGEgY29uaWNhbC1zaGFwZWQgaGlsbCB3aXRoIGEgY3JhZ2d5IHBlYWsgKHdlIGNhbGwgaXQgT3J0aG9wYWd1cyksIGFuZCBhdCBpdHMgZm9vdCBpcyB0aGUgcml2ZXIgTW9sdXMgYW5kIGEgdGVtcGxlIG9mIEFwb2xsbyBUaHVyaXVzLiBUaGUgZ29kIGdvdCB0aGlzIHN1cm5hbWUgZnJvbSBUaHVybywgdGhlIG1vdGhlciBvZiBDaGFlcm9uLCB3aG8gd2FzIGZvdW5kZXIgb2YgQ2hhZXJvbmVpYSwgYWNjb3JkaW5nIHRvIHRyYWRpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb21lIHNheSB0aGF0IHRoZSBjb3cgd2hpY2ggd2FzIGdpdmVuIGJ5IEFwb2xsbyB0byBDYWRtdXMgYXMgaGlzIGd1aWRlLCBhcHBlYXJlZCB0aGVyZSwgYW5kIHRoYXQgdGhlIHBsYWNlIHdhcyBuYW1lZCBhcyBpdCBpcyBmcm9tIGhlciwgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aG9yPC9xPiBiZWluZyB0aGUgUGhvZW5pY2lhbiB3b3JkIGZvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmNvdy48L2VtcGg+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgU3VsbGEgZHJldyBuZWFyIHRvIENoYWVyb25laWEsIHRoZSB0cmlidW5lIHdobyBoYWQgYmVlbiBzdGF0aW9uZWQgaW4gdGhlIGNpdHksIHdpdGggaGlzIG1lbiBpbiBmdWxsIGFybW91ciwgY2FtZSB0byBtZWV0IGhpbSwgY2FycnlpbmcgYSB3cmVhdGggb2YgbGF1cmVsLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFN1bGxhIGhhZCBhY2NlcHRlZCB0aGlzLCBncmVldGVkIHRoZSBzb2xkaWVycywgYW5kIGFuaW1hdGVkIHRoZW0gZm9yIHRoZSBjb21pbmcgZGFuZ2VyLCB0d28gbWVuIG9mIENoYWVyb25laWEgYWNjb3N0ZWQgaGltLCBIb21vbG9baXVtbCAgXWNodXMgYW5kIEFuYXhpZGFtdXMsIGFuZCBlbmdhZ2VkIHRvIGN1dCBvZmYgdGhlIHRyb29wcyBpbiBwb3NzZXNzaW9uIG9mIFRodXJpdW0gaWYgaGUgd291bGQgZ2l2ZSB0aGVtIGEgZmV3IHNvbGRpZXJzOyBmb3IgdGhlcmUgd2FzIGEgcGF0aCBvdXQgb2Ygc2lnaHQgb2YgdGhlIEJhcmJhcmlhbnMsIGxlYWRpbmcgZnJvbSB0aGUgc28tY2FsbGVkIFBldHJhY2h1cyBhbG9uZyBwYXN0IHRoZSBNdXNldW0gdG8gdGhhdCBwYXJ0IG9mIFRodXJpdW0gd2hpY2ggd2FzIG92ZXIgdGhlaXIgaGVhZHMsIGFuZCBieSB0YWtpbmcgdGhpcyBwYXRoIGl0IHdvdWxkIG5vdCBiZSBkaWZmaWN1bHQsIHRoZXkgc2FpZCwgdG8gZmFsbCB1cG9uIHRoZW0gYW5kIGVpdGhlciBzdG9uZSB0aGVtIHRvIGRlYXRoIGZyb20gYWJvdmUsIG9yIGZvcmNlIHRoZW0gaW50byB0aGUgcGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIEdhYmluaXVzIGhhZCBib3JuZSB0ZXN0aW1vbnkgdG8gdGhlIG1lbidzIGNvdXJhZ2UgYW5kIGZpZGVsaXR5LCBTdWxsYSBvcmRlcmVkIHRoZW0gdG8gbWFrZSB0aGUgYXR0ZW1wdCwgd2hpbGUgaGUgaGltc2VsZiBwcm9jZWVkZWQgdG8gZm9ybSBoaXMgbGluZSBvZiBiYXR0bGUsIGFuZCB0byBkaXNwb3NlIGhpcyBjYXZhbHJ5IG9uIGVpdGhlciB3aW5nLCB0YWtpbmcgY29tbWFuZCBvZiB0aGUgcmlnaHQgaGltc2VsZiwgYW5kIGFzc2lnbmluZyB0aGUgbGVmdCB0byBNdXJlbmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxNy4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aWkuIDMuPC9iaWJsPiBBcmNoZWxhW3V1bWwgIF1zIGhhZCBmb2xsb3dlZCBTdWxsYSB0b3dhcmRzIENoYWVyb25laWEuLiBsZWF2aW5nIE11cmVuYSBmcmVlIHRvIGpvaW4gaGlzIGNoaWVmLjwvbm90ZT4gSGlzIGxpZXV0ZW5hbnRzLCBHYWxiYSBhbmQgSG9ydGVuc2l1cywgd2l0aCBjb2hvcnRzIG9mIHJlc2VydmVzLCBzdGF0aW9uZWQgdGhlbXNlbHZlcyBvbiB0aGUgaGVpZ2h0cyBpbiB0aGUgcmVhciwgdG8gZ3VhcmQgYWdhaW5zdCBhdHRhY2tzIG9uIHRoZSBmbGFua3MuIEZvciB0aGUgZW5lbXkgd2VyZSBvYnNlcnZlZCB0byBiZSBtYWtpbmcgdGhlaXIgd2luZyBmbGV4aWJsZSBhbmQgbGlnaHQgZm9yIGV2b2x1dGlvbiB3aXRoIGxhcmdlIGJvZGllcyBvZiBob3JzZSBhbmQgbGlnaHQgaW5mYW50cnksIHB1cnBvc2luZyB0byBleHRlbmQgaXQgYW5kIGVudmVsb3AgdGhlIFJvbWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFN1bGxhIGhhZCBhY2NlcHRlZCB0aGlzLCBncmVldGVkIHRoZSBzb2xkaWVycywgYW5kIGFuaW1hdGVkIHRoZW0gZm9yIHRoZSBjb21pbmcgZGFuZ2VyLCB0d28gbWVuIG9mIENoYWVyb25laWEgYWNjb3N0ZWQgaGltLCBIb21vbG9baXVtbCAgXWNodXMgYW5kIEFuYXhpZGFtdXMsIGFuZCBlbmdhZ2VkIHRvIGN1dCBvZmYgdGhlIHRyb29wcyBpbiBwb3NzZXNzaW9uIG9mIFRodXJpdW0gaWYgaGUgd291bGQgZ2l2ZSB0aGVtIGEgZmV3IHNvbGRpZXJzOyBmb3IgdGhlcmUgd2FzIGEgcGF0aCBvdXQgb2Ygc2lnaHQgb2YgdGhlIEJhcmJhcmlhbnMsIGxlYWRpbmcgZnJvbSB0aGUgc28tY2FsbGVkIFBldHJhY2h1cyBhbG9uZyBwYXN0IHRoZSBNdXNldW0gdG8gdGhhdCBwYXJ0IG9mIFRodXJpdW0gd2hpY2ggd2FzIG92ZXIgdGhlaXIgaGVhZHMsIGFuZCBieSB0YWtpbmcgdGhpcyBwYXRoIGl0IHdvdWxkIG5vdCBiZSBkaWZmaWN1bHQsIHRoZXkgc2FpZCwgdG8gZmFsbCB1cG9uIHRoZW0gYW5kIGVpdGhlciBzdG9uZSB0aGVtIHRvIGRlYXRoIGZyb20gYWJvdmUsIG9yIGZvcmNlIHRoZW0gaW50byB0aGUgcGxhaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIEdhYmluaXVzIGhhZCBib3JuZSB0ZXN0aW1vbnkgdG8gdGhlIG1lbidzIGNvdXJhZ2UgYW5kIGZpZGVsaXR5LCBTdWxsYSBvcmRlcmVkIHRoZW0gdG8gbWFrZSB0aGUgYXR0ZW1wdCwgd2hpbGUgaGUgaGltc2VsZiBwcm9jZWVkZWQgdG8gZm9ybSBoaXMgbGluZSBvZiBiYXR0bGUsIGFuZCB0byBkaXNwb3NlIGhpcyBjYXZhbHJ5IG9uIGVpdGhlciB3aW5nLCB0YWtpbmcgY29tbWFuZCBvZiB0aGUgcmlnaHQgaGltc2VsZiwgYW5kIGFzc2lnbmluZyB0aGUgbGVmdCB0byBNdXJlbmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTcuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAzLjwvYmlibD4gQXJjaGVsYVt1dW1sICBdcyBoYWQgZm9sbG93ZWQgU3VsbGEgdG93YXJkcyBDaGFlcm9uZWlhLi4gbGVhdmluZyBNdXJlbmEgZnJlZSB0byBqb2luIGhpcyBjaGllZi48L25vdGU+IEhpcyBsaWV1dGVuYW50cywgR2FsYmEgYW5kIEhvcnRlbnNpdXMsIHdpdGggY29ob3J0cyBvZiByZXNlcnZlcywgc3RhdGlvbmVkIHRoZW1zZWx2ZXMgb24gdGhlIGhlaWdodHMgaW4gdGhlIHJlYXIsIHRvIGd1YXJkIGFnYWluc3QgYXR0YWNrcyBvbiB0aGUgZmxhbmtzLiBGb3IgdGhlIGVuZW15IHdlcmUgb2JzZXJ2ZWQgdG8gYmUgbWFraW5nIHRoZWlyIHdpbmcgZmxleGlibGUgYW5kIGxpZ2h0IGZvciBldm9sdXRpb24gd2l0aCBsYXJnZSBib2RpZXMgb2YgaG9yc2UgYW5kIGxpZ2h0IGluZmFudHJ5LCBwdXJwb3NpbmcgdG8gZXh0ZW5kIGl0IGFuZCBlbnZlbG9wIHRoZSBSb21hbnMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDE3LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaS4gMy48L2JpYmw+IEFyY2hlbGFbdXVtbCAgXXMgaGFkIGZvbGxvd2VkIFN1bGxhIHRvd2FyZHMgQ2hhZXJvbmVpYS4uIGxlYXZpbmcgTXVyZW5hIGZyZWUgdG8gam9pbiBoaXMgY2hpZWYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBDaGFlcm9uZWlhbnMsIG92ZXIgd2hvbSBFcmljaXVzIGhhZCBiZWVuIHBsYWNlZCBpbiBjb21tYW5kIGJ5IFN1bGxhLCBtYWRlIHRoZWlyIHdheSB1bm5vdGljZWQgYXJvdW5kIFRodXJpdW0gYW5kIHRoZW4gc2hvd2VkIHRoZW1zZWx2ZXMgc3VkZGVubHksIHByb2R1Y2luZyBncmVhdCBjb25mdXNpb24gYW5kIHJvdXQgYW1vbmcgdGhlIEJhcmJhcmlhbnMsIGFuZCBzbGF1Z2h0ZXIgYXQgb25lIGFub3RoZXIncyBoYW5kcyBmb3IgdGhlIG1vc3QgcGFydC4gRm9yIHRoZXkgZGlkIG5vdCBob2xkIHRoZWlyIGdyb3VuZCwgYnV0IHJ1c2hlZCBkb3duIHRoZSBzdGVlcHMsIGZhbGxpbmcgdXBvbiB0aGVpciBvd24gc3BlYXJzIGFuZCBjcm93ZGluZyBvbmUgYW5vdGhlciBkb3duIHRoZSBwcmVjaXBpY2VzLCB3aGlsZSB0aGVpciBlbmVtaWVzIHByZXNzZWQgdXBvbiB0aGVtIGZyb20gYWJvdmUgYW5kIHNtb3RlIHRoZWlyIGV4cG9zZWQgYm9kaWVzLCBzbyB0aGF0IHRocmVlIHRob3VzYW5kIG9mIHRoZW0gZmVsbCBvbiBUaHVyaXVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgZnVnaXRpdmVzLCBzb21lIHdlcmUgbWV0IGJ5IE11cmVuYSwgd2hvIGhhZCBhbHJlYWR5IGZvcm1lZCBoaXMgYXJyYXksIGFuZCB3ZXJlIGN1dCBvZmYgYW5kIHNsYWluOyBvdGhlcnMgcHVzaGVkIHRoZWlyIHdheSB0b3dhcmRzIHRoZSBjYW1wIG9mIHRoZWlyIGZyaWVuZHMsIGFuZCBmYWxsaW5nIHBlbGwtbWVsbCB1cG9uIHRoZWlyIGxpbmVzLCBmaWxsZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtIHdpdGggdGVycm9yIGFuZCBjb25mdXNpb24sIGFuZCBpbmZsaWN0ZWQgYSBkZWxheSB1cG9uIHRoZWlyIGdlbmVyYWxzIHdoaWNoIHdhcyBlc3BlY2lhbGx5IGhhcm1mdWwgdG8gdGhlbS4gRm9yIFN1bGxhIHByb21wdGx5IGNoYXJnZWQgdXBvbiB0aGVtIHdoaWxlIHRoZXkgd2VyZSBpbiBjb25mdXNpb24sIGFuZCBieSBhYnJpZGdpbmcgdGhlIHNwYWNlIGJldHdlZW4gdGhlIGFybWllcyB3aXRoIHRoZSBzcGVlZCBvZiBoaXMgYXBwcm9hY2gsIHJvYmJlZCB0aGUgc2N5dGhlLWJlYXJpbmcgY2hhcmlvdHMgb2YgdGhlaXIgZWZmaWNpZW5jeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIGFyZSBvZiBtb3N0IGF2YWlsIGFmdGVyIGEgbG9uZyBjb3Vyc2UsIHdoaWNoIGdpdmVzIHRoZW0gdmVsb2NpdHkgYW5kIGltcGV0dXMgZm9yIGJyZWFraW5nIHRocm91Z2ggYW4gb3Bwb3NpbmcgbGluZSwgYnV0IHNob3J0IHN0YXJ0cyBhcmUgaW5lZmZlY3R1YWwgYW5kIGZlZWJsZSwgYXMgaW4gdGhlIGNhc2Ugb2YgbWlzc2lsZXMgd2hpY2ggZG8gbm90IGdldCBmdWxsIHByb3B1bHNpb24uIEFuZCB0aGlzIHByb3ZlZCB0cnVlIG5vdyBpbiB0aGUgY2FzZSBvZiB0aGUgQmFyYmFyaWFucy4gVGhlIGZpcnN0IG9mIHRoZWlyIGNoYXJpb3RzIHdlcmUgZHJpdmVuIGFsb25nIGZlZWJseSBhbmQgZW5nYWdlZCBzbHVnZ2lzaGx5LCBzbyB0aGF0IHRoZSBSb21hbnMsIGFmdGVyIHJlcHVsc2luZyB0aGVtLCBjbGFwcGVkIHRoZWlyIGhhbmRzIGFuZCBsYXVnaGVkIGFuZCBjYWxsZWQgZm9yIG1vcmUsIGFzIHRoZXkgYXJlIHdvbnQgdG8gZG8gYXQgdGhlIHJhY2VzIGluIHRoZSBjaXJjdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiB0aGUgaW5mYW50cnkgZm9yY2VzIGVuZ2FnZWQsIHRoZSBCYXJiYXJpYW5zIGhvbGRpbmcgdGhlaXIgcGlrZXMgYmVmb3JlIHRoZW0gYXQgZnVsbCBsZW5ndGgsIGFuZCBlbmRlYXZvdXJpbmcsIGJ5IGxvY2tpbmcgdGhlaXIgc2hpZWxkcyB0b2dldGhlciwgdG8ga2VlcCB0aGVpciBsaW5lIG9mIGJhdHRsZSBpbnRhY3Q7IHdoaWxlIHRoZSBSb21hbnMgdGhyZXcgZG93biB0aGVpciBqYXZlbGlucywgZHJldyB0aGVpciBzd29yZHMsIGFuZCBzb3VnaHQgdG8gZGFzaCB0aGUgcGlrZXMgYXNpZGUsIHRoYXQgdGhleSBtaWdodCBnZXQgYXQgdGhlaXIgZW5lbWllcyBhcyBzb29uIGFzIHBvc3NpYmxlLCBpbiB0aGUgZnVyeSB0aGF0IHBvc3Nlc3NlZCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBzYXcgZHJhd24gdXAgaW4gZnJvbnQgb2YgdGhlIGVuZW15IGZpZnRlZW4gdGhvdXNhbmQgc2xhdmVzLCB3aG9tIHRoZSBraW5nJ3MgZ2VuZXJhbHMgaGFkIHNldCBmcmVlIGJ5IHByb2NsYW1hdGlvbiBpbiB0aGUgY2l0aWVzIGFuZCBlbnJvbGxlZCBhbW9uZyB0aGUgbWVuLWF0LWFybXMuIEFuZCBhIGNlcnRhaW4gUm9tYW4gY2VudHVyaW9uIGlzIHJlcG9ydGVkIHRvIGhhdmUgc2FpZCB0aGF0IGl0IHdhcyBvbmx5IGF0IHRoZSBTYXR1cm5hbGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmZXN0aXZhbCBvZiBTYXR1cm4sIGEgdGltZSBvZiBnZW5lcmFsIGxpY2Vuc2UgYW5kIG1pcnRoLCB3aGVuIG1hc3RlcnMgdHJlYXRlZCB0aGVpciBzbGF2ZXMgYXMgZXF1YWxzLjwvbm90ZT4gc28gZmFyIGFzIGhlIGtuZXcsIHRoYXQgc2xhdmVzIHBhcnRpY2lwYXRlZCBpbiB0aGUgZ2VuZXJhbCBsaWNlbnNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4sIGhvd2V2ZXIsIG93aW5nIHRvIHRoZSBkZXB0aCBhbmQgZGVuc2l0eSBvZiB0aGVpciBhcnJheSwgYW5kIHRoZSB1bm5hdHVyYWwgY291cmFnZSB3aXRoIHdoaWNoIHRoZXkgaGVsZCB0aGVpciBncm91bmQsIHdlcmUgb25seSBzbG93bHkgcmVwdWxzZWQgYnkgdGhlIFJvbWFuIG1lbi1hdC1hcm1zOyBidXQgYXQgbGFzdCB0aGUgZmllcnkgYm9sdHMgYW5kIHRoZSBqYXZlbGlucyB3aGljaCB0aGUgUm9tYW5zIGluIHRoZSByZWFyIHJhbmtzIHBsaWVkIHVuc3BhcmluZ2x5LCB0aHJldyB0aGVtIGludG8gY29uZnVzaW9uIGFuZCBkcm92ZSB0aGVtIGJhY2suCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIHRoZSBDaGFlcm9uZWlhbnMsIG92ZXIgd2hvbSBFcmljaXVzIGhhZCBiZWVuIHBsYWNlZCBpbiBjb21tYW5kIGJ5IFN1bGxhLCBtYWRlIHRoZWlyIHdheSB1bm5vdGljZWQgYXJvdW5kIFRodXJpdW0gYW5kIHRoZW4gc2hvd2VkIHRoZW1zZWx2ZXMgc3VkZGVubHksIHByb2R1Y2luZyBncmVhdCBjb25mdXNpb24gYW5kIHJvdXQgYW1vbmcgdGhlIEJhcmJhcmlhbnMsIGFuZCBzbGF1Z2h0ZXIgYXQgb25lIGFub3RoZXIncyBoYW5kcyBmb3IgdGhlIG1vc3QgcGFydC4gRm9yIHRoZXkgZGlkIG5vdCBob2xkIHRoZWlyIGdyb3VuZCwgYnV0IHJ1c2hlZCBkb3duIHRoZSBzdGVlcHMsIGZhbGxpbmcgdXBvbiB0aGVpciBvd24gc3BlYXJzIGFuZCBjcm93ZGluZyBvbmUgYW5vdGhlciBkb3duIHRoZSBwcmVjaXBpY2VzLCB3aGlsZSB0aGVpciBlbmVtaWVzIHByZXNzZWQgdXBvbiB0aGVtIGZyb20gYWJvdmUgYW5kIHNtb3RlIHRoZWlyIGV4cG9zZWQgYm9kaWVzLCBzbyB0aGF0IHRocmVlIHRob3VzYW5kIG9mIHRoZW0gZmVsbCBvbiBUaHVyaXVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBmdWdpdGl2ZXMsIHNvbWUgd2VyZSBtZXQgYnkgTXVyZW5hLCB3aG8gaGFkIGFscmVhZHkgZm9ybWVkIGhpcyBhcnJheSwgYW5kIHdlcmUgY3V0IG9mZiBhbmQgc2xhaW47IG90aGVycyBwdXNoZWQgdGhlaXIgd2F5IHRvd2FyZHMgdGhlIGNhbXAgb2YgdGhlaXIgZnJpZW5kcywgYW5kIGZhbGxpbmcgcGVsbC1tZWxsIHVwb24gdGhlaXIgbGluZXMsIGZpbGxlZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZW0gd2l0aCB0ZXJyb3IgYW5kIGNvbmZ1c2lvbiwgYW5kIGluZmxpY3RlZCBhIGRlbGF5IHVwb24gdGhlaXIgZ2VuZXJhbHMgd2hpY2ggd2FzIGVzcGVjaWFsbHkgaGFybWZ1bCB0byB0aGVtLiBGb3IgU3VsbGEgcHJvbXB0bHkgY2hhcmdlZCB1cG9uIHRoZW0gd2hpbGUgdGhleSB3ZXJlIGluIGNvbmZ1c2lvbiwgYW5kIGJ5IGFicmlkZ2luZyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgYXJtaWVzIHdpdGggdGhlIHNwZWVkIG9mIGhpcyBhcHByb2FjaCwgcm9iYmVkIHRoZSBzY3l0aGUtYmVhcmluZyBjaGFyaW90cyBvZiB0aGVpciBlZmZpY2llbmN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBhcmUgb2YgbW9zdCBhdmFpbCBhZnRlciBhIGxvbmcgY291cnNlLCB3aGljaCBnaXZlcyB0aGVtIHZlbG9jaXR5IGFuZCBpbXBldHVzIGZvciBicmVha2luZyB0aHJvdWdoIGFuIG9wcG9zaW5nIGxpbmUsIGJ1dCBzaG9ydCBzdGFydHMgYXJlIGluZWZmZWN0dWFsIGFuZCBmZWVibGUsIGFzIGluIHRoZSBjYXNlIG9mIG1pc3NpbGVzIHdoaWNoIGRvIG5vdCBnZXQgZnVsbCBwcm9wdWxzaW9uLiBBbmQgdGhpcyBwcm92ZWQgdHJ1ZSBub3cgaW4gdGhlIGNhc2Ugb2YgdGhlIEJhcmJhcmlhbnMuIFRoZSBmaXJzdCBvZiB0aGVpciBjaGFyaW90cyB3ZXJlIGRyaXZlbiBhbG9uZyBmZWVibHkgYW5kIGVuZ2FnZWQgc2x1Z2dpc2hseSwgc28gdGhhdCB0aGUgUm9tYW5zLCBhZnRlciByZXB1bHNpbmcgdGhlbSwgY2xhcHBlZCB0aGVpciBoYW5kcyBhbmQgbGF1Z2hlZCBhbmQgY2FsbGVkIGZvciBtb3JlLCBhcyB0aGV5IGFyZSB3b250IHRvIGRvIGF0IHRoZSByYWNlcyBpbiB0aGUgY2lyY3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiB0aGUgaW5mYW50cnkgZm9yY2VzIGVuZ2FnZWQsIHRoZSBCYXJiYXJpYW5zIGhvbGRpbmcgdGhlaXIgcGlrZXMgYmVmb3JlIHRoZW0gYXQgZnVsbCBsZW5ndGgsIGFuZCBlbmRlYXZvdXJpbmcsIGJ5IGxvY2tpbmcgdGhlaXIgc2hpZWxkcyB0b2dldGhlciwgdG8ga2VlcCB0aGVpciBsaW5lIG9mIGJhdHRsZSBpbnRhY3Q7IHdoaWxlIHRoZSBSb21hbnMgdGhyZXcgZG93biB0aGVpciBqYXZlbGlucywgZHJldyB0aGVpciBzd29yZHMsIGFuZCBzb3VnaHQgdG8gZGFzaCB0aGUgcGlrZXMgYXNpZGUsIHRoYXQgdGhleSBtaWdodCBnZXQgYXQgdGhlaXIgZW5lbWllcyBhcyBzb29uIGFzIHBvc3NpYmxlLCBpbiB0aGUgZnVyeSB0aGF0IHBvc3Nlc3NlZCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHNhdyBkcmF3biB1cCBpbiBmcm9udCBvZiB0aGUgZW5lbXkgZmlmdGVlbiB0aG91c2FuZCBzbGF2ZXMsIHdob20gdGhlIGtpbmcncyBnZW5lcmFscyBoYWQgc2V0IGZyZWUgYnkgcHJvY2xhbWF0aW9uIGluIHRoZSBjaXRpZXMgYW5kIGVucm9sbGVkIGFtb25nIHRoZSBtZW4tYXQtYXJtcy4gQW5kIGEgY2VydGFpbiBSb21hbiBjZW50dXJpb24gaXMgcmVwb3J0ZWQgdG8gaGF2ZSBzYWlkIHRoYXQgaXQgd2FzIG9ubHkgYXQgdGhlIFNhdHVybmFsaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZmVzdGl2YWwgb2YgU2F0dXJuLCBhIHRpbWUgb2YgZ2VuZXJhbCBsaWNlbnNlIGFuZCBtaXJ0aCwgd2hlbiBtYXN0ZXJzIHRyZWF0ZWQgdGhlaXIgc2xhdmVzIGFzIGVxdWFscy48L25vdGU+IHNvIGZhciBhcyBoZSBrbmV3LCB0aGF0IHNsYXZlcyBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGdlbmVyYWwgbGljZW5zZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgaG93ZXZlciwgb3dpbmcgdG8gdGhlIGRlcHRoIGFuZCBkZW5zaXR5IG9mIHRoZWlyIGFycmF5LCBhbmQgdGhlIHVubmF0dXJhbCBjb3VyYWdlIHdpdGggd2hpY2ggdGhleSBoZWxkIHRoZWlyIGdyb3VuZCwgd2VyZSBvbmx5IHNsb3dseSByZXB1bHNlZCBieSB0aGUgUm9tYW4gbWVuLWF0LWFybXM7IGJ1dCBhdCBsYXN0IHRoZSBmaWVyeSBib2x0cyBhbmQgdGhlIGphdmVsaW5zIHdoaWNoIHRoZSBSb21hbnMgaW4gdGhlIHJlYXIgcmFua3MgcGxpZWQgdW5zcGFyaW5nbHksIHRocmV3IHRoZW0gaW50byBjb25mdXNpb24gYW5kIGRyb3ZlIHRoZW0gYmFjay4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJjaGVsYVt1dW1sICBdcyBub3cgZXh0ZW5kZWQgaGlzIHJpZ2h0IHdpbmcgdG8gZW52ZWxvcCBTdWxsYSdzIGxpbmUsIHdoZXJldXBvbiBIb3J0ZW5zaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxNy43IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aWkuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNlbnQgaGlzIGNvaG9ydHMgYWdhaW5zdCBoaW0gb24gYSBxdWljayBydW4sIGludGVuZGluZyB0byBhdHRhY2sgaGlzIGZsYW5rLiBCdXQgQXJjaGVsYVt1dW1sICBdcyB3aGVlbGVkIHN3aWZ0bHkgYWdhaW5zdCBoaW0gaGlzIHR3byB0aG91c2FuZCBob3JzZW1lbiwgYW5kIEhvcnRlbnNpdXMsIGZvcmNlZCBhc2lkZSBieSBzdXBlcmlvciBudW1iZXJzLCB3YXMga2VlcGluZyBjbG9zZSB0byB0aGUgaGlsbHMsIHNlcGFyYXRpbmcgaGltc2VsZiBsaXR0bGUgYnkgbGl0dGxlIGZyb20gdGhlIG1haW4gbGluZSwgYW5kIGdldHRpbmcgc3Vycm91bmRlZCBieSB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU3VsbGEgbGVhcm5lZCBvZiB0aGlzLCBoZSBjYW1lIHN3aWZ0bHkgdG8gaGlzIGFpZCBmcm9tIHRoZSByaWdodCB3aW5nLCB3aGljaCB3YXMgbm90IHlldCBlbmdhZ2VkLiBCdXQgQXJjaGVsYVt1dW1sICBdcywgZ3Vlc3NpbmcgdGhlIHRydXRoIGZyb20gdGhlIGR1c3QgcmFpc2VkIGJ5IFN1bGxhJ3MgdHJvb3BzLCBnYXZlIEhvcnRlbnNpdXMgdGhlIGdvLWJ5LCBhbmQgd2hlZWxpbmcsIHNldCBvZmYgZm9yIHRoZSByaWdodCB3aW5nIHdoZW5jZSBTdWxsYSBoYWQgY29tZSwgdGhpbmtpbmcgdG8gc3VycHJpc2UgaXQgd2l0aG91dCBhIGNvbW1hbmRlci4gQXQgdGhlIHNhbWUgdGltZSBNdXJlbmEgYWxzbyB3YXMgYXR0YWNrZWQgYnkgVGF4aWxlcyB3aXRoIGhpcyBCcm9uemUtc2hpZWxkcywgc28gdGhhdCB3aGVuIHNob3V0cyB3ZXJlIGJvcm5lIHRvIGhpcyBlYXJzIGZyb20gYm90aCBwbGFjZXMsIGFuZCByZWV1bWw7Y2hvZWQgYnkgdGhlIHN1cnJvdW5kaW5nIGhpbGxzLCBTdWxsYSBoYWx0ZWQsIGFuZCB3YXMgYXQgYSBsb3NzIHRvIGtub3cgaW4gd2hpY2ggb2YgdGhlIHR3byBkaXJlY3Rpb25zIGhlIG91Z2h0IHRvIGJldGFrZSBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGF2aW5nIGRlY2lkZWQgdG8gcmVzdW1lIGhpcyBvd24gcG9zdCwgaGUgc2VudCBIb3J0ZW5zaXVzIHdpdGggZm91ciBjb2hvcnRzIHRvIGhlbHAgTXVyZW5hLCB3aGlsZSBoZSBoaW1zZWxmLCBiaWRkaW5nIHRoZSBmaWZ0aCBjb2hvcnQgdG8gZm9sbG93LCBoYXN0ZW5lZCB0byB0aGUgcmlnaHQgd2luZy4gVGhpcyBvZiBpdHNlbGYgaGFkIGFscmVhZHkgZW5nYWdlZCBBcmNoZWxhW3V1bWwgIF1zIG9uIGVxdWFsIHRlcm1zLCBidXQgd2hlbiBTdWxsYSBhcHBlYXJlZCwgdGhleSBkcm92ZSB0aGUgZW5lbXkgYmFjayBhdCBhbGwgcG9pbnRzLCBvYnRhaW5lZCB0aGUgbWFzdGVyeSwgYW5kIHB1cnN1ZWQgdGhlbSB0byB0aGUgcml2ZXIgYW5kIE1vdW50IEFjb250aXVtIGluIGEgaGVhZGxvbmcgZmxpZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdWxsYSwgaG93ZXZlciwgZGlkIG5vdCBuZWdsZWN0IE11cmVuYSBpbiBoaXMgcGVyaWwsIGJ1dCBzZXQgb3V0IHRvIGFpZCB0aGUgZm9yY2VzIGluIHRoYXQgcXVhcnRlcjsgaGUgc2F3LCBob3dldmVyLCB0aGF0IHRoZXkgd2VyZSB2aWN0b3Jpb3VzLCBhbmQgdGhlbiBqb2luZWQgaW4gdGhlIHB1cnN1aXQuIE1hbnkgb2YgdGhlIEJhcmJhcmlhbnMsIHRoZW4sIHdlcmUgc2xhaW4gaW4gdGhlIHBsYWluLCBidXQgbW9zdCB3ZXJlIGN1dCB0byBwaWVjZXMgYXMgdGhleSBydXNoZWQgZm9yIHRoZWlyIGVudHJlbmNobWVudHMsIHNvIHRoYXQgb25seSB0ZW4gdGhvdXNhbmQgb3V0IG9mIHNvIG1hbnkgbXlyaWFkcyBtYWRlIHRoZWlyIGVzY2FwZSBpbnRvIENoYWxjaXMuIEJ1dCBTdWxsYSBzYXlzIGhlIG1pc3NlZCBvbmx5IGZvdXJ0ZWVuIG9mIGhpcyBzb2xkaWVycywgYW5kIHRoYXQgYWZ0ZXJ3YXJkcywgdG93YXJkcyBldmVuaW5nLCB0d28gb2YgdGhlc2UgY2FtZSBpbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdGhlcmVmb3JlIGluc2NyaWJlZCB1cG9uIGhpcyB0cm9waGllcyB0aGUgbmFtZXMgb2YgTWFycywgVmljdG9yeSBhbmQgVmVudXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBkZWl0eSBvZiBnb29kIGZvcnR1bmUgYW1vbmcgdGhlIFJvbWFucy48L25vdGU+IGluIHRoZSBiZWxpZWYgdGhhdCBoaXMgc3VjY2VzcyBpbiB0aGUgd2FyIHdhcyBkdWUgbm8gbGVzcyB0byBnb29kIGZvcnR1bmUgdGhhbiB0byBtaWxpdGFyeSBza2lsbCBhbmQgc3RyZW5ndGguIFRoaXMgdHJvcGh5IG9mIHRoZSBiYXR0bGUgaW4gdGhlIHBsYWluIHN0YW5kcyBvbiB0aGUgc3BvdCB3aGVyZSB0aGUgdHJvb3BzIG9mIEFyY2hlbGFbdXVtbCAgXXMgZmlyc3QgZ2F2ZSB3YXksIGJ5IHRoZSBicm9vayBNb2x1cywgYnV0IHRoZXJlIGlzIGFub3RoZXIgcGxhbnRlZCBvbiB0aGUgY3Jlc3Qgb2YgVGh1cml1bSwgdG8gY29tbWVtb3JhdGUgdGhlIGVudmVsb3BtZW50IG9mIHRoZSBCYXJiYXJpYW5zIHRoZXJlLCBhbmQgaXQgaW5kaWNhdGVzIGluIEdyZWVrIGxldHRlcnMgdGhhdCBIb21vbG9baXVtbCAgXWNodXMgYW5kIEFuYXhpZGFtdXMgd2VyZSB0aGUgaGVyb2VzIG9mIHRoZSBleHBsb2l0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmVzdGl2YWwgaW4gaG9ub3VyIG9mIHRoaXMgdmljdG9yeSB3YXMgY2VsZWJyYXRlZCBieSBTdWxsYSBpbiBUaGViZXMsIHdoZXJlIGhlIHByZXBhcmVkIGEgc3RhZ2UgbmVhciB0aGUgZm91bnRhaW4gb2YgT2VkaXB1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TbyBuYW1lZCBbbGRxdW8gXWJlY2F1c2UgaW4gaXQgT2VkaXB1cyB3YXNoZWQgb2ZmIHRoZSBibG9vZCBvZiBoaXMgbXVyZGVyZWQgZmF0aGVyW3JkcXVvIF0gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiA5LjE4LjQiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaXguIDE4LCA0PC9iaWJsPikuPC9ub3RlPiBCdXQgdGhlIGp1ZGdlcyB3ZXJlIEdyZWVrcyBpbnZpdGVkIGZyb20gdGhlIG90aGVyIGNpdGllcywgc2luY2UgdG93YXJkcyB0aGUgVGhlYmFucyBoZSB3YXMgaXJyZWNvbmNpbGVhYmx5IGhvc3RpbGUuIEhlIGFsc28gdG9vayBhd2F5IGhhbGYgb2YgdGhlaXIgdGVycml0b3J5IGFuZCBjb25zZWNyYXRlZCBpdCB0byBQeXRoaWFuIEFwb2xsbyBhbmQgT2x5bXBpYW4gWmV1cywgZ2l2aW5nIG9yZGVycyB0aGF0IGZyb20gaXRzIHJldmVudWVzIHRoZSBtb25leXMgc2hvdWxkIGJlIHBhaWQgYmFjayB0byB0aGUgZ29kcyB3aGljaCBoZSBoYWQgdGFrZW4gZnJvbSB0aGVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWkuIDMtNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJjaGVsYVt1dW1sICBdcyBub3cgZXh0ZW5kZWQgaGlzIHJpZ2h0IHdpbmcgdG8gZW52ZWxvcCBTdWxsYSdzIGxpbmUsIHdoZXJldXBvbiBIb3J0ZW5zaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTcuNyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzZW50IGhpcyBjb2hvcnRzIGFnYWluc3QgaGltIG9uIGEgcXVpY2sgcnVuLCBpbnRlbmRpbmcgdG8gYXR0YWNrIGhpcyBmbGFuay4gQnV0IEFyY2hlbGFbdXVtbCAgXXMgd2hlZWxlZCBzd2lmdGx5IGFnYWluc3QgaGltIGhpcyB0d28gdGhvdXNhbmQgaG9yc2VtZW4sIGFuZCBIb3J0ZW5zaXVzLCBmb3JjZWQgYXNpZGUgYnkgc3VwZXJpb3IgbnVtYmVycywgd2FzIGtlZXBpbmcgY2xvc2UgdG8gdGhlIGhpbGxzLCBzZXBhcmF0aW5nIGhpbXNlbGYgbGl0dGxlIGJ5IGxpdHRsZSBmcm9tIHRoZSBtYWluIGxpbmUsIGFuZCBnZXR0aW5nIHN1cnJvdW5kZWQgYnkgdGhlIGVuZW15LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDE3LjciIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaS4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU3VsbGEgbGVhcm5lZCBvZiB0aGlzLCBoZSBjYW1lIHN3aWZ0bHkgdG8gaGlzIGFpZCBmcm9tIHRoZSByaWdodCB3aW5nLCB3aGljaCB3YXMgbm90IHlldCBlbmdhZ2VkLiBCdXQgQXJjaGVsYVt1dW1sICBdcywgZ3Vlc3NpbmcgdGhlIHRydXRoIGZyb20gdGhlIGR1c3QgcmFpc2VkIGJ5IFN1bGxhJ3MgdHJvb3BzLCBnYXZlIEhvcnRlbnNpdXMgdGhlIGdvLWJ5LCBhbmQgd2hlZWxpbmcsIHNldCBvZmYgZm9yIHRoZSByaWdodCB3aW5nIHdoZW5jZSBTdWxsYSBoYWQgY29tZSwgdGhpbmtpbmcgdG8gc3VycHJpc2UgaXQgd2l0aG91dCBhIGNvbW1hbmRlci4gQXQgdGhlIHNhbWUgdGltZSBNdXJlbmEgYWxzbyB3YXMgYXR0YWNrZWQgYnkgVGF4aWxlcyB3aXRoIGhpcyBCcm9uemUtc2hpZWxkcywgc28gdGhhdCB3aGVuIHNob3V0cyB3ZXJlIGJvcm5lIHRvIGhpcyBlYXJzIGZyb20gYm90aCBwbGFjZXMsIGFuZCByZWV1bWw7Y2hvZWQgYnkgdGhlIHN1cnJvdW5kaW5nIGhpbGxzLCBTdWxsYSBoYWx0ZWQsIGFuZCB3YXMgYXQgYSBsb3NzIHRvIGtub3cgaW4gd2hpY2ggb2YgdGhlIHR3byBkaXJlY3Rpb25zIGhlIG91Z2h0IHRvIGJldGFrZSBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoYXZpbmcgZGVjaWRlZCB0byByZXN1bWUgaGlzIG93biBwb3N0LCBoZSBzZW50IEhvcnRlbnNpdXMgd2l0aCBmb3VyIGNvaG9ydHMgdG8gaGVscCBNdXJlbmEsIHdoaWxlIGhlIGhpbXNlbGYsIGJpZGRpbmcgdGhlIGZpZnRoIGNvaG9ydCB0byBmb2xsb3csIGhhc3RlbmVkIHRvIHRoZSByaWdodCB3aW5nLiBUaGlzIG9mIGl0c2VsZiBoYWQgYWxyZWFkeSBlbmdhZ2VkIEFyY2hlbGFbdXVtbCAgXXMgb24gZXF1YWwgdGVybXMsIGJ1dCB3aGVuIFN1bGxhIGFwcGVhcmVkLCB0aGV5IGRyb3ZlIHRoZSBlbmVteSBiYWNrIGF0IGFsbCBwb2ludHMsIG9idGFpbmVkIHRoZSBtYXN0ZXJ5LCBhbmQgcHVyc3VlZCB0aGVtIHRvIHRoZSByaXZlciBhbmQgTW91bnQgQWNvbnRpdW0gaW4gYSBoZWFkbG9uZyBmbGlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhLCBob3dldmVyLCBkaWQgbm90IG5lZ2xlY3QgTXVyZW5hIGluIGhpcyBwZXJpbCwgYnV0IHNldCBvdXQgdG8gYWlkIHRoZSBmb3JjZXMgaW4gdGhhdCBxdWFydGVyOyBoZSBzYXcsIGhvd2V2ZXIsIHRoYXQgdGhleSB3ZXJlIHZpY3RvcmlvdXMsIGFuZCB0aGVuIGpvaW5lZCBpbiB0aGUgcHVyc3VpdC4gTWFueSBvZiB0aGUgQmFyYmFyaWFucywgdGhlbiwgd2VyZSBzbGFpbiBpbiB0aGUgcGxhaW4sIGJ1dCBtb3N0IHdlcmUgY3V0IHRvIHBpZWNlcyBhcyB0aGV5IHJ1c2hlZCBmb3IgdGhlaXIgZW50cmVuY2htZW50cywgc28gdGhhdCBvbmx5IHRlbiB0aG91c2FuZCBvdXQgb2Ygc28gbWFueSBteXJpYWRzIG1hZGUgdGhlaXIgZXNjYXBlIGludG8gQ2hhbGNpcy4gQnV0IFN1bGxhIHNheXMgaGUgbWlzc2VkIG9ubHkgZm91cnRlZW4gb2YgaGlzIHNvbGRpZXJzLCBhbmQgdGhhdCBhZnRlcndhcmRzLCB0b3dhcmRzIGV2ZW5pbmcsIHR3byBvZiB0aGVzZSBjYW1lIGluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBpbnNjcmliZWQgdXBvbiBoaXMgdHJvcGhpZXMgdGhlIG5hbWVzIG9mIE1hcnMsIFZpY3RvcnkgYW5kIFZlbnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBkZWl0eSBvZiBnb29kIGZvcnR1bmUgYW1vbmcgdGhlIFJvbWFucy48L25vdGU+IGluIHRoZSBiZWxpZWYgdGhhdCBoaXMgc3VjY2VzcyBpbiB0aGUgd2FyIHdhcyBkdWUgbm8gbGVzcyB0byBnb29kIGZvcnR1bmUgdGhhbiB0byBtaWxpdGFyeSBza2lsbCBhbmQgc3RyZW5ndGguIFRoaXMgdHJvcGh5IG9mIHRoZSBiYXR0bGUgaW4gdGhlIHBsYWluIHN0YW5kcyBvbiB0aGUgc3BvdCB3aGVyZSB0aGUgdHJvb3BzIG9mIEFyY2hlbGFbdXVtbCAgXXMgZmlyc3QgZ2F2ZSB3YXksIGJ5IHRoZSBicm9vayBNb2x1cywgYnV0IHRoZXJlIGlzIGFub3RoZXIgcGxhbnRlZCBvbiB0aGUgY3Jlc3Qgb2YgVGh1cml1bSwgdG8gY29tbWVtb3JhdGUgdGhlIGVudmVsb3BtZW50IG9mIHRoZSBCYXJiYXJpYW5zIHRoZXJlLCBhbmQgaXQgaW5kaWNhdGVzIGluIEdyZWVrIGxldHRlcnMgdGhhdCBIb21vbG9baXVtbCAgXWNodXMgYW5kIEFuYXhpZGFtdXMgd2VyZSB0aGUgaGVyb2VzIG9mIHRoZSBleHBsb2l0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmZXN0aXZhbCBpbiBob25vdXIgb2YgdGhpcyB2aWN0b3J5IHdhcyBjZWxlYnJhdGVkIGJ5IFN1bGxhIGluIFRoZWJlcywgd2hlcmUgaGUgcHJlcGFyZWQgYSBzdGFnZSBuZWFyIHRoZSBmb3VudGFpbiBvZiBPZWRpcHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28gbmFtZWQgW2xkcXVvIF1iZWNhdXNlIGluIGl0IE9lZGlwdXMgd2FzaGVkIG9mZiB0aGUgYmxvb2Qgb2YgaGlzIG11cmRlcmVkIGZhdGhlcltyZHF1byBdICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiA5LjE4LjQiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaXguIDE4LCA0PC9iaWJsPikuPC9ub3RlPiBCdXQgdGhlIGp1ZGdlcyB3ZXJlIEdyZWVrcyBpbnZpdGVkIGZyb20gdGhlIG90aGVyIGNpdGllcywgc2luY2UgdG93YXJkcyB0aGUgVGhlYmFucyBoZSB3YXMgaXJyZWNvbmNpbGVhYmx5IGhvc3RpbGUuIEhlIGFsc28gdG9vayBhd2F5IGhhbGYgb2YgdGhlaXIgdGVycml0b3J5IGFuZCBjb25zZWNyYXRlZCBpdCB0byBQeXRoaWFuIEFwb2xsbyBhbmQgT2x5bXBpYW4gWmV1cywgZ2l2aW5nIG9yZGVycyB0aGF0IGZyb20gaXRzIHJldmVudWVzIHRoZSBtb25leXMgc2hvdWxkIGJlIHBhaWQgYmFjayB0byB0aGUgZ29kcyB3aGljaCBoZSBoYWQgdGFrZW4gZnJvbSB0aGVtLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDkuMTguNCIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpeC4gMTgsIDQ8L2JpYmw+KS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaS4gMy02LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaS4gMy02LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgbGVhcm5pbmcgdGhhdCBGbGFjY3VzLCBhIG1hbiBvZiB0aGUgb3Bwb3NpdGUgZmFjdGlvbiwgaGFkIGJlZW4gY2hvc2VuIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPldpdGggQ2lubmEsIHRvIHN1Y2NlZWQgTWFyaXVzLCB3aG8gZGllZCBpbiA4NiBCLkMuPC9ub3RlPiBhbmQgd2FzIGNyb3NzaW5nIHRoZSBJb25pYW4gc2VhIHdpdGggYW4gYXJteSwgb3N0ZW5zaWJseSBhZ2FpbnN0IE1pdGhyaWRhdGVzLCBidXQgcmVhbGx5IGFnYWluc3QgaGltc2VsZiwgaGUgc2V0IG91dCB0b3dhcmRzIFRoZXNzYWx5IGluIG9yZGVyIHRvIG1lZXQgaGltLiBCdXQgd2hlbiBoZSB3YXMgY29tZSB0byB0aGUgY2l0eSBvZiBNZWxpdGVpYSwgdGlkaW5ncyByZWFjaGVkIGhpbSBmcm9tIG1hbnkgcXVhcnRlcnMgdGhhdCB0aGUgcmVnaW9ucyBiZWhpbmQgaGltIHdlcmUgcmF2YWdlZCBhZ2FpbiBieSBhbiBhcm15IG9mIHRoZSBraW5nIHdoaWNoIHdhcyBubyBzbWFsbGVyIHRoYW4gdGhlIGZvcm1lci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIERvcnlsYVt1dW1sICBdcywgaGF2aW5nIHB1dCBpbiBhdCBDaGFsY2lzIHdpdGggYSBsYXJnZSBmbGVldCwgb24gd2hpY2ggaGUgYnJvdWdodCBlaWdodHkgdGhvdXNhbmQgb2YgdGhlIGJlc3QgdHJhaW5lZCBhbmQgZGlzY2lwbGluZWQgbWVuIGluIHRoZSBhcm15IG9mIE1pdGhyaWRhdGVzLCBhdCBvbmNlIGJ1cnN0IGludG8gQm9lb3RpYSBhbmQgb2NjdXBpZWQgdGhlIGNvdW50cnkuIEhlIHdhcyBlYWdlciB0byBlbnRpY2UgU3VsbGEgdG8gYmF0dGxlLCBkaXNyZWdhcmRpbmcgdGhlIHByb3Rlc3RzIG9mIEFyY2hlbGFbdXVtbCAgXXMsIGFuZCBnaXZpbmcgaXQgb3V0IHRoYXQgaW4gdGhlIHByZXZpb3VzIGJhdHRsZSBzbyBtYW55IG15cmlhZHMgaGFkIG5vdCBwZXJpc2hlZCB3aXRob3V0IHRyZWFjaGVyeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEsIGhvd2V2ZXIsIHR1cm5pbmcgc3dpZnRseSBiYWNrLCBzaG93ZWQgRG9yeWxhW3V1bWwgIF1zIHRoYXQgQXJjaGVsYVt1dW1sICBdcyB3YXMgYSBtYW4gb2YgcHJ1ZGVuY2UgYW5kIGJlc3QgYWNxdWFpbnRlZCB3aXRoIHRoZSBSb21hbiB2YWxvdXIsIHNvIHRoYXQgYWZ0ZXIgYSBzbGlnaHQgc2tpcm1pc2ggd2l0aCBTdWxsYSBuZWFyIFRpbHBob3NzaXVtLCBoZSB3YXMgZmlyc3Qgb2YgdGhvc2Ugd2hvIHRob3VnaHQgaXQgZXhwZWRpZW50IG5vdCB0byBkZWNpZGUgdGhlIGlzc3VlIGJ5IGEgYmF0dGxlLCBidXQgcmF0aGVyIHRvIHdlYXIgb3V0IHRoZSB3YXIgYnkgZGludCBvZiB0aW1lIGFuZCB0cmVhc3VyZS4gTmV2ZXJ0aGVsZXNzLCBBcmNoZWxhW3V1bWwgIF1zIHdhcyBtdWNoIGVuY291cmFnZWQgYnkgdGhlIG5hdHVyZSBvZiB0aGUgY291bnRyeSBhYm91dCBPcmNob21lbnVzLCB3aGVyZSB0aGV5IHdlcmUgZW5jYW1wZWQsIHNpbmNlIGl0IHdhcyBtb3N0IGZhdm91cmFibGUgYXMgYSBiYXR0bGUtZmllbGQgZm9yIGFuIGFybXkgc3VwZXJpb3IgaW4gY2F2YWxyeS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG9mIGFsbCB0aGUgcGxhaW5zIG9mIEJvZW90aWEgdGhpcyBpcyB0aGUgbGFyZ2VzdCBhbmQgZmFpcmVzdCwgYW5kIGJlZ2lubmluZyBmcm9tIHRoZSBjaXR5IG9mIE9yY2hvbWVudXMsIGl0IHNwcmVhZHMgb3V0IHNtb290aCBhbmQgdHJlZWxlc3MgYXMgZmFyIGFzIHRoZSBtYXJzaGVzIGluIHdoaWNoIHRoZSByaXZlciBNZWxhcyBsb3NlcyBpdHNlbGYuIFRoaXMgcmlzZXMgY2xvc2UgdW5kZXIgdGhlIGNpdHkgb2YgT3JjaG9tZW51cywgYW5kIGlzIHRoZSBvbmx5IEdyZWVrIHJpdmVyIHRoYXQgaXMgY29waW91cyBhbmQgbmF2aWdhYmxlIGF0IGl0cyBzb3VyY2VzOyBtb3Jlb3ZlciwgaXQgaW5jcmVhc2VzIHRvd2FyZHMgdGhlIHRpbWUgb2YgdGhlIHN1bW1lciBzb2xzdGljZSwgbGlrZSB0aGUgTmlsZSwgYW5kIHByb2R1Y2VzIHBsYW50cyBsaWtlIHRob3NlIHdoaWNoIGdyb3cgdGhlcmUsIG9ubHkgc3R1bnRlZCBhbmQgd2l0aG91dCBmcnVpdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SXRzIGNvdXJzZSBpcyBzaG9ydCwgaG93ZXZlciwgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgaXQgZGlzYXBwZWFycyBhdCBvbmNlIGluIGJsaW5kIGFuZCBtYXJzaHkgbGFrZXMsIHdoaWxlIGEgc21hbGwgcG9ydGlvbiBvZiBpdCB1bml0ZXMgd2l0aCB0aGUgQ2VwaGlzdXMsIHNvbWV3aGVyZSBuZWFyIHRoZSBwbGFjZSBpbiB3aGljaCB0aGUgc3RhZ25hbnQgd2F0ZXIgaXMgcmVwdXRlZCB0byBwcm9kdWNlIHRoZSBmYW1vdXMgcmVlZCBmb3IgZmx1dGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBCb2VvdGlhbnMgZXhjZWxsZWQgd2l0aCB0aGUgZmx1dGUuIFNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCBpaS4gNC02LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgbGVhcm5pbmcgdGhhdCBGbGFjY3VzLCBhIG1hbiBvZiB0aGUgb3Bwb3NpdGUgZmFjdGlvbiwgaGFkIGJlZW4gY2hvc2VuIGNvbnN1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2l0aCBDaW5uYSwgdG8gc3VjY2VlZCBNYXJpdXMsIHdobyBkaWVkIGluIDg2IEIuQy48L25vdGU+IGFuZCB3YXMgY3Jvc3NpbmcgdGhlIElvbmlhbiBzZWEgd2l0aCBhbiBhcm15LCBvc3RlbnNpYmx5IGFnYWluc3QgTWl0aHJpZGF0ZXMsIGJ1dCByZWFsbHkgYWdhaW5zdCBoaW1zZWxmLCBoZSBzZXQgb3V0IHRvd2FyZHMgVGhlc3NhbHkgaW4gb3JkZXIgdG8gbWVldCBoaW0uIEJ1dCB3aGVuIGhlIHdhcyBjb21lIHRvIHRoZSBjaXR5IG9mIE1lbGl0ZWlhLCB0aWRpbmdzIHJlYWNoZWQgaGltIGZyb20gbWFueSBxdWFydGVycyB0aGF0IHRoZSByZWdpb25zIGJlaGluZCBoaW0gd2VyZSByYXZhZ2VkIGFnYWluIGJ5IGFuIGFybXkgb2YgdGhlIGtpbmcgd2hpY2ggd2FzIG5vIHNtYWxsZXIgdGhhbiB0aGUgZm9ybWVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBEb3J5bGFbdXVtbCAgXXMsIGhhdmluZyBwdXQgaW4gYXQgQ2hhbGNpcyB3aXRoIGEgbGFyZ2UgZmxlZXQsIG9uIHdoaWNoIGhlIGJyb3VnaHQgZWlnaHR5IHRob3VzYW5kIG9mIHRoZSBiZXN0IHRyYWluZWQgYW5kIGRpc2NpcGxpbmVkIG1lbiBpbiB0aGUgYXJteSBvZiBNaXRocmlkYXRlcywgYXQgb25jZSBidXJzdCBpbnRvIEJvZW90aWEgYW5kIG9jY3VwaWVkIHRoZSBjb3VudHJ5LiBIZSB3YXMgZWFnZXIgdG8gZW50aWNlIFN1bGxhIHRvIGJhdHRsZSwgZGlzcmVnYXJkaW5nIHRoZSBwcm90ZXN0cyBvZiBBcmNoZWxhW3V1bWwgIF1zLCBhbmQgZ2l2aW5nIGl0IG91dCB0aGF0IGluIHRoZSBwcmV2aW91cyBiYXR0bGUgc28gbWFueSBteXJpYWRzIGhhZCBub3QgcGVyaXNoZWQgd2l0aG91dCB0cmVhY2hlcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhLCBob3dldmVyLCB0dXJuaW5nIHN3aWZ0bHkgYmFjaywgc2hvd2VkIERvcnlsYVt1dW1sICBdcyB0aGF0IEFyY2hlbGFbdXVtbCAgXXMgd2FzIGEgbWFuIG9mIHBydWRlbmNlIGFuZCBiZXN0IGFjcXVhaW50ZWQgd2l0aCB0aGUgUm9tYW4gdmFsb3VyLCBzbyB0aGF0IGFmdGVyIGEgc2xpZ2h0IHNraXJtaXNoIHdpdGggU3VsbGEgbmVhciBUaWxwaG9zc2l1bSwgaGUgd2FzIGZpcnN0IG9mIHRob3NlIHdobyB0aG91Z2h0IGl0IGV4cGVkaWVudCBub3QgdG8gZGVjaWRlIHRoZSBpc3N1ZSBieSBhIGJhdHRsZSwgYnV0IHJhdGhlciB0byB3ZWFyIG91dCB0aGUgd2FyIGJ5IGRpbnQgb2YgdGltZSBhbmQgdHJlYXN1cmUuIE5ldmVydGhlbGVzcywgQXJjaGVsYVt1dW1sICBdcyB3YXMgbXVjaCBlbmNvdXJhZ2VkIGJ5IHRoZSBuYXR1cmUgb2YgdGhlIGNvdW50cnkgYWJvdXQgT3JjaG9tZW51cywgd2hlcmUgdGhleSB3ZXJlIGVuY2FtcGVkLCBzaW5jZSBpdCB3YXMgbW9zdCBmYXZvdXJhYmxlIGFzIGEgYmF0dGxlLWZpZWxkIGZvciBhbiBhcm15IHN1cGVyaW9yIGluIGNhdmFscnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiBhbGwgdGhlIHBsYWlucyBvZiBCb2VvdGlhIHRoaXMgaXMgdGhlIGxhcmdlc3QgYW5kIGZhaXJlc3QsIGFuZCBiZWdpbm5pbmcgZnJvbSB0aGUgY2l0eSBvZiBPcmNob21lbnVzLCBpdCBzcHJlYWRzIG91dCBzbW9vdGggYW5kIHRyZWVsZXNzIGFzIGZhciBhcyB0aGUgbWFyc2hlcyBpbiB3aGljaCB0aGUgcml2ZXIgTWVsYXMgbG9zZXMgaXRzZWxmLiBUaGlzIHJpc2VzIGNsb3NlIHVuZGVyIHRoZSBjaXR5IG9mIE9yY2hvbWVudXMsIGFuZCBpcyB0aGUgb25seSBHcmVlayByaXZlciB0aGF0IGlzIGNvcGlvdXMgYW5kIG5hdmlnYWJsZSBhdCBpdHMgc291cmNlczsgbW9yZW92ZXIsIGl0IGluY3JlYXNlcyB0b3dhcmRzIHRoZSB0aW1lIG9mIHRoZSBzdW1tZXIgc29sc3RpY2UsIGxpa2UgdGhlIE5pbGUsIGFuZCBwcm9kdWNlcyBwbGFudHMgbGlrZSB0aG9zZSB3aGljaCBncm93IHRoZXJlLCBvbmx5IHN0dW50ZWQgYW5kIHdpdGhvdXQgZnJ1aXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0cyBjb3Vyc2UgaXMgc2hvcnQsIGhvd2V2ZXIsIGFuZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIGl0IGRpc2FwcGVhcnMgYXQgb25jZSBpbiBibGluZCBhbmQgbWFyc2h5IGxha2VzLCB3aGlsZSBhIHNtYWxsIHBvcnRpb24gb2YgaXQgdW5pdGVzIHdpdGggdGhlIENlcGhpc3VzLCBzb21ld2hlcmUgbmVhciB0aGUgcGxhY2UgaW4gd2hpY2ggdGhlIHN0YWduYW50IHdhdGVyIGlzIHJlcHV0ZWQgdG8gcHJvZHVjZSB0aGUgZmFtb3VzIHJlZWQgZm9yIGZsdXRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBCb2VvdGlhbnMgZXhjZWxsZWQgd2l0aCB0aGUgZmx1dGUuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgaWkuIDQtNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIGlpLiA0LTYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIGlpLiA0LTYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgdHdvIGFybWllcyBoYWQgZW5jYW1wZWQgbmVhciBlYWNoIG90aGVyLCBBcmNoZWxhW3V1bWwgIF1zIGxheSBzdGlsbCwgYnV0IFN1bGxhIHByb2NlZWRlZCB0byBkaWcgdHJlbmNoZXMgb24gZWl0aGVyIHNpZGUsIGluIG9yZGVyIHRoYXQsIGlmIHBvc3NpYmxlLCBoZSBtaWdodCBjdXQgdGhlIGVuZW15IG9mZiBmcm9tIHRoZSBzb2xpZCBncm91bmQgd2hpY2ggd2FzIGZhdm91cmFibGUgZm9yIGNhdmFscnksIGFuZCBmb3JjZSB0aGVtIGludG8gdGhlIG1hcnNoZXMuIFRoZSBlbmVteSwgaG93ZXZlciwgd291bGQgbm90IHN1ZmZlciB0aGlzLCBidXQgd2hlbiB0aGVpciBnZW5lcmFscyBzZW50IHRoZW0gZm9ydGgsIGNoYXJnZWQgaW1wZXR1b3VzbHkgYW5kIGF0IGZ1bGwgc3BlZWQsIHNvIHRoYXQgbm90IG9ubHkgU3VsbGEncyBsYWJvdXJlcnMgd2VyZSBkaXNwZXJzZWQsIGJ1dCBhbHNvIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGNvcnBzIGRyYXduIHVwIHRvIHByb3RlY3QgdGhlbSB3YXMgdGhyb3duIGludG8gY29uZnVzaW9uIGFuZCBmbGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIFN1bGxhIHRocmV3IGhpbXNlbGYgZnJvbSBoaXMgaG9yc2UsIHNlaXplZCBhbiBlbnNpZ24sIGFuZCBwdXNoZWQgaGlzIHdheSB0aHJvdWdoIHRoZSBmdWdpdGl2ZXMgYWdhaW5zdCB0aGUgZW5lbXksIGNyeWluZzogW2xkcXVvIF1Gb3IgbWUsIE8gUm9tYW5zLCBhbiBob25vdXJhYmxlIGRlYXRoIGhlcmU7IGJ1dCB5b3UsIHdoZW4gbWVuIGFzayB5b3Ugd2hlcmUgeW91IGJldHJheWVkIHlvdXIgY29tbWFuZGVyLCByZW1lbWJlciB0byB0ZWxsIHRoZW0sIGF0IE9yY2hvbWVudXMuW3JkcXVvIF0gVGhlIGZ1Z2l0aXZlcyByYWxsaWVkIGF0IHRoZXNlIHdvcmRzLCBhbmQgdHdvIG9mIHRoZSBjb2hvcnRzIG9uIGhpcyByaWdodCB3aW5nIGNhbWUgdG8gaGlzIGFpZDsgdGhlc2UgaGUgbGVkIGFnYWluc3QgdGhlIGVuZW15IGFuZCByb3V0ZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBmZWxsIGJhY2sgYSBsaXR0bGUgZGlzdGFuY2UsIGFuZCBhZnRlciBnaXZpbmcgaGlzIG1lbiBicmVha2Zhc3QsIGFnYWluIHByb2NlZWRlZCB0byBmZW5jZSB0aGUgZW5lbXkncyBlbnRyZW5jaG1lbnRzIG9mZiB3aXRoIGhpcyBkaXRjaGVzLiBCdXQgdGhleSBhdHRhY2tlZCBoaW0gYWdhaW4gaW4gYmV0dGVyIG9yZGVyIHRoYW4gYmVmb3JlLCBEaW9nZW5lcywgdGhlIHN0ZXAtc29uIG9mIEFyY2hlbGFbdXVtbCAgXXMsIGZvdWdodCBnYWxsYW50bHkgb24gdGhlaXIgcmlnaHQgd2luZywgYW5kIGZlbGwgZ2xvcmlvdXNseSwgYW5kIHRoZWlyIGFyY2hlcnMsIGJlaW5nIGhhcmQgcHJlc3NlZCBieSB0aGUgUm9tYW5zLCBzbyB0aGF0IHRoZXkgaGFkIG5vIHJvb20gdG8gZHJhdyB0aGVpciBib3dzLCB0b29rIHRoZWlyIGFycm93cyBieSBoYW5kZnVscywgc3RydWNrIHdpdGggdGhlbSBhcyB3aXRoIHN3b3JkcywgYXQgY2xvc2UgcXVhcnRlcnMsIGFuZCB0cmllZCB0byBiZWF0IGJhY2sgdGhlaXIgZm9lcywgYnV0IHdlcmUgZmluYWxseSBzaHV0IHVwIGluIHRoZWlyIGVudHJlbmNobWVudHMsIGFuZCBoYWQgYSBtaXNlcmFibGUgbmlnaHQgb2YgaXQgd2l0aCB0aGVpciBzbGFpbiBhbmQgd291bmRlZC4gTmV4dCBkYXkgU3VsbGEgYWdhaW4gbGVkIGhpcyBzb2xkaWVycyB1cCB0byB0aGUgZW5lbXkncyBmb3J0aWZpY2F0aW9ucyBhbmQgY29udGludWVkIHRyZW5jaGluZyB0aGVtIG9mZiwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGVtIGNhbWUgb3V0IHRvIGdpdmUgaGltIGJhdHRsZSwgaGUgZW5nYWdlZCB3aXRoIHRoZW0gYW5kIHJvdXRlZCB0aGVtLCBhbmQgc3VjaCB3YXMgdGhlaXIgcGFuaWMgdGhhdCBubyByZXNpc3RhbmNlIHdhcyBtYWRlLCBhbmQgaGUgdG9vayB0aGVpciBjYW1wIGJ5IHN0b3JtLiBUaGUgbWFyc2hlcyB3ZXJlIGZpbGxlZCB3aXRoIHRoZWlyIGJsb29kLCBhbmQgdGhlIGxha2Ugd2l0aCB0aGVpciBkZWFkIGJvZGllcywgc28gdGhhdCBldmVuIHRvIHRoaXMgZGF5IG1hbnkgYm93cywgaGVsbWV0cywgZnJhZ21lbnRzIG9mIHN0ZWVsIGJyZWFzdHBsYXRlcywgYW5kIHN3b3JkcyBvZiBiYXJiYXJpYW4gbWFrZSBhcmUgZm91bmQgZW1iZWRkZWQgaW4gdGhlIG11ZCwgYWx0aG91Z2ggYWxtb3N0IHR3byBodW5kcmVkIHllYXJzIGhhdmUgcGFzc2VkIHNpbmNlIHRoaXMgYmF0dGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIG11c3QsIHRoZXJlZm9yZSwgaGF2ZSB3cml0dGVuIHRoaXMgPHRpdGxlPkxpZmU8L3RpdGxlPiBzaG9ydGx5IGJlZm9yZSAxMTUgQS5ELjwvbm90ZT4gU3VjaCwgdGhlbiwgYXJlIHRoZSBhY2NvdW50cyBnaXZlbiBvZiB0aGUgYWN0aW9ucyBhdCBDaGFlcm9uZWlhIGFuZCBPcmNob21lbnVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgdHdvIGFybWllcyBoYWQgZW5jYW1wZWQgbmVhciBlYWNoIG90aGVyLCBBcmNoZWxhW3V1bWwgIF1zIGxheSBzdGlsbCwgYnV0IFN1bGxhIHByb2NlZWRlZCB0byBkaWcgdHJlbmNoZXMgb24gZWl0aGVyIHNpZGUsIGluIG9yZGVyIHRoYXQsIGlmIHBvc3NpYmxlLCBoZSBtaWdodCBjdXQgdGhlIGVuZW15IG9mZiBmcm9tIHRoZSBzb2xpZCBncm91bmQgd2hpY2ggd2FzIGZhdm91cmFibGUgZm9yIGNhdmFscnksIGFuZCBmb3JjZSB0aGVtIGludG8gdGhlIG1hcnNoZXMuIFRoZSBlbmVteSwgaG93ZXZlciwgd291bGQgbm90IHN1ZmZlciB0aGlzLCBidXQgd2hlbiB0aGVpciBnZW5lcmFscyBzZW50IHRoZW0gZm9ydGgsIGNoYXJnZWQgaW1wZXR1b3VzbHkgYW5kIGF0IGZ1bGwgc3BlZWQsIHNvIHRoYXQgbm90IG9ubHkgU3VsbGEncyBsYWJvdXJlcnMgd2VyZSBkaXNwZXJzZWQsIGJ1dCBhbHNvIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGNvcnBzIGRyYXduIHVwIHRvIHByb3RlY3QgdGhlbSB3YXMgdGhyb3duIGludG8gY29uZnVzaW9uIGFuZCBmbGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gU3VsbGEgdGhyZXcgaGltc2VsZiBmcm9tIGhpcyBob3JzZSwgc2VpemVkIGFuIGVuc2lnbiwgYW5kIHB1c2hlZCBoaXMgd2F5IHRocm91Z2ggdGhlIGZ1Z2l0aXZlcyBhZ2FpbnN0IHRoZSBlbmVteSwgY3J5aW5nOiBbbGRxdW8gXUZvciBtZSwgTyBSb21hbnMsIGFuIGhvbm91cmFibGUgZGVhdGggaGVyZTsgYnV0IHlvdSwgd2hlbiBtZW4gYXNrIHlvdSB3aGVyZSB5b3UgYmV0cmF5ZWQgeW91ciBjb21tYW5kZXIsIHJlbWVtYmVyIHRvIHRlbGwgdGhlbSwgYXQgT3JjaG9tZW51cy5bcmRxdW8gXSBUaGUgZnVnaXRpdmVzIHJhbGxpZWQgYXQgdGhlc2Ugd29yZHMsIGFuZCB0d28gb2YgdGhlIGNvaG9ydHMgb24gaGlzIHJpZ2h0IHdpbmcgY2FtZSB0byBoaXMgYWlkOyB0aGVzZSBoZSBsZWQgYWdhaW5zdCB0aGUgZW5lbXkgYW5kIHJvdXRlZCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgZmVsbCBiYWNrIGEgbGl0dGxlIGRpc3RhbmNlLCBhbmQgYWZ0ZXIgZ2l2aW5nIGhpcyBtZW4gYnJlYWtmYXN0LCBhZ2FpbiBwcm9jZWVkZWQgdG8gZmVuY2UgdGhlIGVuZW15J3MgZW50cmVuY2htZW50cyBvZmYgd2l0aCBoaXMgZGl0Y2hlcy4gQnV0IHRoZXkgYXR0YWNrZWQgaGltIGFnYWluIGluIGJldHRlciBvcmRlciB0aGFuIGJlZm9yZSwgRGlvZ2VuZXMsIHRoZSBzdGVwLXNvbiBvZiBBcmNoZWxhW3V1bWwgIF1zLCBmb3VnaHQgZ2FsbGFudGx5IG9uIHRoZWlyIHJpZ2h0IHdpbmcsIGFuZCBmZWxsIGdsb3Jpb3VzbHksIGFuZCB0aGVpciBhcmNoZXJzLCBiZWluZyBoYXJkIHByZXNzZWQgYnkgdGhlIFJvbWFucywgc28gdGhhdCB0aGV5IGhhZCBubyByb29tIHRvIGRyYXcgdGhlaXIgYm93cywgdG9vayB0aGVpciBhcnJvd3MgYnkgaGFuZGZ1bHMsIHN0cnVjayB3aXRoIHRoZW0gYXMgd2l0aCBzd29yZHMsIGF0IGNsb3NlIHF1YXJ0ZXJzLCBhbmQgdHJpZWQgdG8gYmVhdCBiYWNrIHRoZWlyIGZvZXMsIGJ1dCB3ZXJlIGZpbmFsbHkgc2h1dCB1cCBpbiB0aGVpciBlbnRyZW5jaG1lbnRzLCBhbmQgaGFkIGEgbWlzZXJhYmxlIG5pZ2h0IG9mIGl0IHdpdGggdGhlaXIgc2xhaW4gYW5kIHdvdW5kZWQuIE5leHQgZGF5IFN1bGxhIGFnYWluIGxlZCBoaXMgc29sZGllcnMgdXAgdG8gdGhlIGVuZW15J3MgZm9ydGlmaWNhdGlvbnMgYW5kIGNvbnRpbnVlZCB0cmVuY2hpbmcgdGhlbSBvZmYsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSBjYW1lIG91dCB0byBnaXZlIGhpbSBiYXR0bGUsIGhlIGVuZ2FnZWQgd2l0aCB0aGVtIGFuZCByb3V0ZWQgdGhlbSwgYW5kIHN1Y2ggd2FzIHRoZWlyIHBhbmljIHRoYXQgbm8gcmVzaXN0YW5jZSB3YXMgbWFkZSwgYW5kIGhlIHRvb2sgdGhlaXIgY2FtcCBieSBzdG9ybS4gVGhlIG1hcnNoZXMgd2VyZSBmaWxsZWQgd2l0aCB0aGVpciBibG9vZCwgYW5kIHRoZSBsYWtlIHdpdGggdGhlaXIgZGVhZCBib2RpZXMsIHNvIHRoYXQgZXZlbiB0byB0aGlzIGRheSBtYW55IGJvd3MsIGhlbG1ldHMsIGZyYWdtZW50cyBvZiBzdGVlbCBicmVhc3RwbGF0ZXMsIGFuZCBzd29yZHMgb2YgYmFyYmFyaWFuIG1ha2UgYXJlIGZvdW5kIGVtYmVkZGVkIGluIHRoZSBtdWQsIGFsdGhvdWdoIGFsbW9zdCB0d28gaHVuZHJlZCB5ZWFycyBoYXZlIHBhc3NlZCBzaW5jZSB0aGlzIGJhdHRsZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIG11c3QsIHRoZXJlZm9yZSwgaGF2ZSB3cml0dGVuIHRoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+IHNob3J0bHkgYmVmb3JlIDExNSBBLkQuPC9ub3RlPiBTdWNoLCB0aGVuLCBhcmUgdGhlIGFjY291bnRzIGdpdmVuIG9mIHRoZSBhY3Rpb25zIGF0IENoYWVyb25laWEgYW5kIE9yY2hvbWVudXMuCgkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpZmU8L3RpdGxlPiBzaG9ydGx5IGJlZm9yZSAxMTUgQS5ELjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBzaW5jZSBDaW5uYSBhbmQgQ2FyYm88bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FbGVjdGVkIGNvbnN1bCB3aXRoIENpbm5hIGluIDg1IEIuQy48L25vdGU+IGF0IFJvbWUgd2VyZSB0cmVhdGluZyB0aGUgbW9zdCBlbWluZW50IG1lbiB3aXRoIGluanVzdGljZSBhbmQgdmlvbGVuY2UsIG1hbnkgb2YgdGhlc2UgaGFkIGZsZWQgZnJvbSB0aGVpciB0eXJhbm55IGFuZCB3ZXJlIHJlcGFpcmluZyB0byBTdWxsYSdzIGNhbXAgYXMgdG8gYSBoYXJib3VyIG9mIHJlZnVnZSwgYW5kIGluIGEgbGl0dGxlIHRpbWUgaGUgaGFkIGFib3V0IGhpbSBhIHNlbWJsYW5jZSBvZiBhIHNlbmF0ZS4gTWV0ZWxsYSwgYWxzbywgd2hvIGhhZCB3aXRoIGRpZmZpY3VsdHkgc3RvbGVuIGhlcnNlbGYgYW5kIGhlciBjaGlsZHJlbiBhd2F5LCBjYW1lIHdpdGggdGlkaW5ncyB0aGF0IGhpcyBob3VzZSBhbmQgaGlzIHZpbGxhcyBoYWQgYmVlbiBidXJuZWQgYnkgaGlzIGVuZW1pZXMsIGFuZCB3aXRoIGVudHJlYXRpZXMgdGhhdCBoZSB3b3VsZCBjb21lIHRvIHRoZSBoZWxwIG9mIGhpcyBwYXJ0aXNhbnMgYXQgaG9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBpbiBkb3VidCB3aGF0IHRvIGRvLCBhbmQgY291bGQgbmVpdGhlciBjb25zZW50IHRvIG5lZ2xlY3QgaGlzIGNvdW50cnkgd2hlbiBzaGUgd2FzIG91dHJhZ2VkLCBub3Igc2VlIGhpcyB3YXkgY2xlYXIgdG8gZ28gYXdheSBhbmQgbGVhdmUgdW5maW5pc2hlZCBzbyBncmVhdCBhIHRhc2sgYXMgdGhlIHdhciB3aXRoIE1pdGhyaWRhdGVzLCB0aGVyZSBjYW1lIHRvIGhpbSBhIG1lcmNoYW50IG9mIERlbG9zLCBuYW1lZCBBcmNoZWxhW3V1bWwgIF1zLCB3aG8gc2VjcmV0bHkgYnJvdWdodCBmcm9tIEFyY2hlbGFbdXVtbCAgXXMgdGhlIGtpbmcncyBnZW5lcmFsIGNlcnRhaW4gdmFndWUgaG9wZXMgYW5kIHByb3Bvc2l0aW9ucy4gVGhlIG1hdHRlciB3YXMgc28gd2VsY29tZSB0byBTdWxsYSB0aGF0IGhlIHdhcyBlYWdlciB0byBoYXZlIGEgcGVyc29uYWwgY29uZmVyZW5jZSB3aXRoIEFyY2hlbGFbdXVtbCAgXXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGV5IGhhZCBhIG1lZXRpbmcgb24gdGhlIHNlYS1jb2FzdCBuZWFyIERlbGl1bSwgd2hlcmUgdGhlIHRlbXBsZSBvZiBBcG9sbG8gaXMuIEFyY2hlbGFbdXVtbCAgXXMgYmVnYW4gdGhlIGNvbmZlcmVuY2UgYnkgdXJnaW5nIFN1bGxhIHRvIGFiYW5kb24gQXNpYSBhbmQgUG9udHVzIGFuZCBzYWlsIGZvciB0aGUgd2FyIGluIFJvbWUsIG9uIGNvbmRpdGlvbiBvZiByZWNlaXZpbmcgbW9uZXksIHRyaXJlbWVzLCBhbmQgYXMgbGFyZ2UgYSBmb3JjZSBhcyBoZSB3aXNoZWQsIGZyb20gdGhlIGtpbmcuIFN1bGxhIHJlam9pbmVkIGJ5IGJpZGRpbmcgaGltIHRha2Ugbm8gZnVydGhlciB0aG91Z2h0IGZvciBNaXRocmlkYXRlcywgYnV0IGFzc3VtZSB0aGUgY3Jvd24gaGltc2VsZiBpbiBoaXMgc3RlYWQsIGJlY29taW5nIGFuIGFsbHkgb2YgdGhlIFJvbWFucywgYW5kIHN1cnJlbmRlcmluZyB0byB0aGVtIGhpcyBzaGlwcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQXJjaGVsYVt1dW1sICBdcyBleHByZXNzZWQgaGlzIGFiaG9ycmVuY2Ugb2Ygc3VjaCB0cmVhc29uLCBTdWxsYSBzYWlkOiBbbGRxdW8gXVNvIHRoZW4sIHRob3UsIEFyY2hlbGFbdXVtbCAgXXMsIHdobyBhcnQgYSBDYXBwYWRvY2lhbiwgYW5kIGEgc2xhdmUgb2YgYSBiYXJiYXJpYW4ga2luZywgb3IsIGlmIHRob3Ugd2lsdCwgaGlzIGZyaWVuZCwgd2lsdCBub3QgY29uc2VudCB0byBhIGRpc2dyYWNlZnVsIGRlZWQgZm9yIHN1Y2ggZ3JlYXQgcmV3YXJkczsgYnV0IHRvIG1lLCB3aG8gYW0gYSBSb21hbiBjb21tYW5kZXIsIGFuZCBTdWxsYSwgdGhvdSBkYXJlc3QgdG8gcHJvcG9zZSB0cmVhY2hlcnk/IGFzIGlmIHRob3Ugd2VyZSBub3QgdGhhdCBBcmNoZWxhW3V1bWwgIF1zIHdobyBmbGVkIGZyb20gQ2hhZXJvbmVpYSB3aXRoIGEgZmV3IHN1cnZpdm9ycyBvdXQgb2Ygb25lIGh1bmRyZWQgYW5kIHR3ZW50eSB0aG91c2FuZCBtZW4sIGFuZCB3aG8gbGF5IGhpZCBmb3IgdHdvIGRheXMgaW4gdGhlIG1hcnNoZXMgb2YgT3JjaG9tZW51cywgYW5kIHdobyBsZWZ0IEJvZW90aWEgaW1wYXNzYWJsZSBmb3IgdGhlIG11bHRpdHVkZSBvZiBkZWFkIGJvZGllcyFbcmRxdW8gXSAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMsIEFyY2hlbGFbdXVtbCAgXXMgY2hhbmdlZCBoaXMgdG9uZSwgYW5kIGFzIGEgaHVtYmxlIHN1cHBsaWFudCBiZXNvdWdodCBoaW0gdG8gZGVzaXN0IGZyb20gdGhlIHdhciBhbmQgYmUgcmVjb25jaWxlZCB3aXRoIE1pdGhyaWRhdGVzLiBTdWxsYSBncmFudGVkIHRoZSByZXF1ZXN0LCBhbmQgdGVybXMgb2YgYWdyZWVtZW50IHdlcmUgbWFkZSBhcyBmb2xsb3dzOiBNaXRocmlkYXRlcyB3YXMgdG8gcmVub3VuY2UgQXNpYSBhbmQgUGFwaGxhZ29uaWEsIHJlc3RvcmUgQml0aHluaWEgdG8gTmljb21lZGVzIGFuZCBDYXBwYWRvY2lhIHRvIEFyaW9iYXJ6YW5lcywgcGF5IGRvd24gdG8gdGhlIFJvbWFucyB0d28gdGhvdXNhbmQgdGFsZW50cywgYW5kIGdpdmUgdGhlbSBzZXZlbnR5IGJyb256ZS1hcm1vdXJlZCBzaGlwcyB3aXRoIHRoZWlyIHByb3BlciBlcXVpcG1lbnQ7IFN1bGxhLCBvbiBoaXMgcGFydCwgd2FzIHRvIGNvbmZpcm0gTWl0aHJpZGF0ZXMgaW4gdGhlIHJlc3Qgb2YgaGlzIGRvbWluaW9ucywgYW5kIGdldCBoaW0gdm90ZWQgYW4gYWxseSBvZiB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHNpbmNlIENpbm5hIGFuZCBDYXJibzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWxlY3RlZCBjb25zdWwgd2l0aCBDaW5uYSBpbiA4NSBCLkMuPC9ub3RlPiBhdCBSb21lIHdlcmUgdHJlYXRpbmcgdGhlIG1vc3QgZW1pbmVudCBtZW4gd2l0aCBpbmp1c3RpY2UgYW5kIHZpb2xlbmNlLCBtYW55IG9mIHRoZXNlIGhhZCBmbGVkIGZyb20gdGhlaXIgdHlyYW5ueSBhbmQgd2VyZSByZXBhaXJpbmcgdG8gU3VsbGEncyBjYW1wIGFzIHRvIGEgaGFyYm91ciBvZiByZWZ1Z2UsIGFuZCBpbiBhIGxpdHRsZSB0aW1lIGhlIGhhZCBhYm91dCBoaW0gYSBzZW1ibGFuY2Ugb2YgYSBzZW5hdGUuIE1ldGVsbGEsIGFsc28sIHdobyBoYWQgd2l0aCBkaWZmaWN1bHR5IHN0b2xlbiBoZXJzZWxmIGFuZCBoZXIgY2hpbGRyZW4gYXdheSwgY2FtZSB3aXRoIHRpZGluZ3MgdGhhdCBoaXMgaG91c2UgYW5kIGhpcyB2aWxsYXMgaGFkIGJlZW4gYnVybmVkIGJ5IGhpcyBlbmVtaWVzLCBhbmQgd2l0aCBlbnRyZWF0aWVzIHRoYXQgaGUgd291bGQgY29tZSB0byB0aGUgaGVscCBvZiBoaXMgcGFydGlzYW5zIGF0IGhvbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgaW4gZG91YnQgd2hhdCB0byBkbywgYW5kIGNvdWxkIG5laXRoZXIgY29uc2VudCB0byBuZWdsZWN0IGhpcyBjb3VudHJ5IHdoZW4gc2hlIHdhcyBvdXRyYWdlZCwgbm9yIHNlZSBoaXMgd2F5IGNsZWFyIHRvIGdvIGF3YXkgYW5kIGxlYXZlIHVuZmluaXNoZWQgc28gZ3JlYXQgYSB0YXNrIGFzIHRoZSB3YXIgd2l0aCBNaXRocmlkYXRlcywgdGhlcmUgY2FtZSB0byBoaW0gYSBtZXJjaGFudCBvZiBEZWxvcywgbmFtZWQgQXJjaGVsYVt1dW1sICBdcywgd2hvIHNlY3JldGx5IGJyb3VnaHQgZnJvbSBBcmNoZWxhW3V1bWwgIF1zIHRoZSBraW5nJ3MgZ2VuZXJhbCBjZXJ0YWluIHZhZ3VlIGhvcGVzIGFuZCBwcm9wb3NpdGlvbnMuIFRoZSBtYXR0ZXIgd2FzIHNvIHdlbGNvbWUgdG8gU3VsbGEgdGhhdCBoZSB3YXMgZWFnZXIgdG8gaGF2ZSBhIHBlcnNvbmFsIGNvbmZlcmVuY2Ugd2l0aCBBcmNoZWxhW3V1bWwgIF1zOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGV5IGhhZCBhIG1lZXRpbmcgb24gdGhlIHNlYS1jb2FzdCBuZWFyIERlbGl1bSwgd2hlcmUgdGhlIHRlbXBsZSBvZiBBcG9sbG8gaXMuIEFyY2hlbGFbdXVtbCAgXXMgYmVnYW4gdGhlIGNvbmZlcmVuY2UgYnkgdXJnaW5nIFN1bGxhIHRvIGFiYW5kb24gQXNpYSBhbmQgUG9udHVzIGFuZCBzYWlsIGZvciB0aGUgd2FyIGluIFJvbWUsIG9uIGNvbmRpdGlvbiBvZiByZWNlaXZpbmcgbW9uZXksIHRyaXJlbWVzLCBhbmQgYXMgbGFyZ2UgYSBmb3JjZSBhcyBoZSB3aXNoZWQsIGZyb20gdGhlIGtpbmcuIFN1bGxhIHJlam9pbmVkIGJ5IGJpZGRpbmcgaGltIHRha2Ugbm8gZnVydGhlciB0aG91Z2h0IGZvciBNaXRocmlkYXRlcywgYnV0IGFzc3VtZSB0aGUgY3Jvd24gaGltc2VsZiBpbiBoaXMgc3RlYWQsIGJlY29taW5nIGFuIGFsbHkgb2YgdGhlIFJvbWFucywgYW5kIHN1cnJlbmRlcmluZyB0byB0aGVtIGhpcyBzaGlwcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFyY2hlbGFbdXVtbCAgXXMgZXhwcmVzc2VkIGhpcyBhYmhvcnJlbmNlIG9mIHN1Y2ggdHJlYXNvbiwgU3VsbGEgc2FpZDogW2xkcXVvIF1TbyB0aGVuLCB0aG91LCBBcmNoZWxhW3V1bWwgIF1zLCB3aG8gYXJ0IGEgQ2FwcGFkb2NpYW4sIGFuZCBhIHNsYXZlIG9mIGEgYmFyYmFyaWFuIGtpbmcsIG9yLCBpZiB0aG91IHdpbHQsIGhpcyBmcmllbmQsIHdpbHQgbm90IGNvbnNlbnQgdG8gYSBkaXNncmFjZWZ1bCBkZWVkIGZvciBzdWNoIGdyZWF0IHJld2FyZHM7IGJ1dCB0byBtZSwgd2hvIGFtIGEgUm9tYW4gY29tbWFuZGVyLCBhbmQgU3VsbGEsIHRob3UgZGFyZXN0IHRvIHByb3Bvc2UgdHJlYWNoZXJ5PyBhcyBpZiB0aG91IHdlcmUgbm90IHRoYXQgQXJjaGVsYVt1dW1sICBdcyB3aG8gZmxlZCBmcm9tIENoYWVyb25laWEgd2l0aCBhIGZldyBzdXJ2aXZvcnMgb3V0IG9mIG9uZSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgbWVuLCBhbmQgd2hvIGxheSBoaWQgZm9yIHR3byBkYXlzIGluIHRoZSBtYXJzaGVzIG9mIE9yY2hvbWVudXMsIGFuZCB3aG8gbGVmdCBCb2VvdGlhIGltcGFzc2FibGUgZm9yIHRoZSBtdWx0aXR1ZGUgb2YgZGVhZCBib2RpZXMhW3JkcXVvIF0gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgQXJjaGVsYVt1dW1sICBdcyBjaGFuZ2VkIGhpcyB0b25lLCBhbmQgYXMgYSBodW1ibGUgc3VwcGxpYW50IGJlc291Z2h0IGhpbSB0byBkZXNpc3QgZnJvbSB0aGUgd2FyIGFuZCBiZSByZWNvbmNpbGVkIHdpdGggTWl0aHJpZGF0ZXMuIFN1bGxhIGdyYW50ZWQgdGhlIHJlcXVlc3QsIGFuZCB0ZXJtcyBvZiBhZ3JlZW1lbnQgd2VyZSBtYWRlIGFzIGZvbGxvd3M6IE1pdGhyaWRhdGVzIHdhcyB0byByZW5vdW5jZSBBc2lhIGFuZCBQYXBobGFnb25pYSwgcmVzdG9yZSBCaXRoeW5pYSB0byBOaWNvbWVkZXMgYW5kIENhcHBhZG9jaWEgdG8gQXJpb2JhcnphbmVzLCBwYXkgZG93biB0byB0aGUgUm9tYW5zIHR3byB0aG91c2FuZCB0YWxlbnRzLCBhbmQgZ2l2ZSB0aGVtIHNldmVudHkgYnJvbnplLWFybW91cmVkIHNoaXBzIHdpdGggdGhlaXIgcHJvcGVyIGVxdWlwbWVudDsgU3VsbGEsIG9uIGhpcyBwYXJ0LCB3YXMgdG8gY29uZmlybSBNaXRocmlkYXRlcyBpbiB0aGUgcmVzdCBvZiBoaXMgZG9taW5pb25zLCBhbmQgZ2V0IGhpbSB2b3RlZCBhbiBhbGx5IG9mIHRoZSBSb21hbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2UgYWdyZWVtZW50cyBoYWQgYmVlbiBtYWRlLCBTdWxsYSB0dXJuZWQgYmFjayBhbmQgcHJvY2VlZGVkIGJ5IHdheSBvZiBUaGVzc2FseSBhbmQgTWFjZWRvbmlhIHRvd2FyZHMgdGhlIEhlbGxlc3BvbnQsIGhhdmluZyBBcmNoZWxhW3V1bWwgIF1zIHdpdGggaGltLCBhbmQgaW4gaG9ub3VyLiBBbmQgd2hlbiBBcmNoZWxhW3V1bWwgIF1zIGZlbGwgZGFuZ2Vyb3VzbHkgaWxsIGF0IExhcmlzc2EsIFN1bGxhIHN0b3BwZWQgaGlzIG1hcmNoLCBhbmQgY2FyZWQgZm9yIGhpbSBhcyBpZiBoZSBoYWQgYmVlbiBvbmUgb2YgaGlzIG93biBjb21tYW5kaW5nIG9mZmljZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHJhaXNlZCB0aGUgc3VzcGljaW9uIHRoYXQgdGhlIGFjdGlvbiBhdCBDaGFlcm9uZWlhIGhhZCBub3QgYmVlbiBmYWlybHkgZm91Z2h0LCBhcyB3ZWxsIGFzIHRoZSBmYWN0IHRoYXQgU3VsbGEgcmVsZWFzZWQgdGhlIG90aGVyIGZyaWVuZHMgb2YgTWl0aHJpZGF0ZXMgd2hvbSBoZSBoYWQgdGFrZW4gY2FwdGl2ZSwgYnV0IHB1dCB0byBkZWF0aCBBcmlzdGlvbiB0aGUgdHlyYW50IGFsb25lLCBieSBwb2lzb24sIHdobyB3YXMgYXQgZW5taXR5IHdpdGggQXJjaGVsYVt1dW1sICBdczsgdGhlIHN0cm9uZ2VzdCBncm91bmQgZm9yIHRoZSBzdXNwaWNpb24sIGhvd2V2ZXIsIHdhcyBoaXMgZ2lmdCB0byB0aGUgQ2FwcGFkb2NpYW4gb2YgYWJvdXQgdHdvIHRob3VzYW5kIGFjcmVzIG9mIGxhbmQgaW4gRXVib2VhLCBhbmQgaGlzIGJlc3Rvd2luZyB1cG9uIGhpbSB0aGUgdGl0bGUgb2YgZnJpZW5kIGFuZCBhbGx5IG9mIHRoZSBSb21hbnMuIEF0IGFueSByYXRlLCBvbiB0aGVzZSBwb2ludHMgU3VsbGEgZGVmZW5kcyBoaW1zZWxmIGluIGhpcyBNZW1vaXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSBhZ3JlZW1lbnRzIGhhZCBiZWVuIG1hZGUsIFN1bGxhIHR1cm5lZCBiYWNrIGFuZCBwcm9jZWVkZWQgYnkgd2F5IG9mIFRoZXNzYWx5IGFuZCBNYWNlZG9uaWEgdG93YXJkcyB0aGUgSGVsbGVzcG9udCwgaGF2aW5nIEFyY2hlbGFbdXVtbCAgXXMgd2l0aCBoaW0sIGFuZCBpbiBob25vdXIuIEFuZCB3aGVuIEFyY2hlbGFbdXVtbCAgXXMgZmVsbCBkYW5nZXJvdXNseSBpbGwgYXQgTGFyaXNzYSwgU3VsbGEgc3RvcHBlZCBoaXMgbWFyY2gsIGFuZCBjYXJlZCBmb3IgaGltIGFzIGlmIGhlIGhhZCBiZWVuIG9uZSBvZiBoaXMgb3duIGNvbW1hbmRpbmcgb2ZmaWNlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcmFpc2VkIHRoZSBzdXNwaWNpb24gdGhhdCB0aGUgYWN0aW9uIGF0IENoYWVyb25laWEgaGFkIG5vdCBiZWVuIGZhaXJseSBmb3VnaHQsIGFzIHdlbGwgYXMgdGhlIGZhY3QgdGhhdCBTdWxsYSByZWxlYXNlZCB0aGUgb3RoZXIgZnJpZW5kcyBvZiBNaXRocmlkYXRlcyB3aG9tIGhlIGhhZCB0YWtlbiBjYXB0aXZlLCBidXQgcHV0IHRvIGRlYXRoIEFyaXN0aW9uIHRoZSB0eXJhbnQgYWxvbmUsIGJ5IHBvaXNvbiwgd2hvIHdhcyBhdCBlbm1pdHkgd2l0aCBBcmNoZWxhW3V1bWwgIF1zOyB0aGUgc3Ryb25nZXN0IGdyb3VuZCBmb3IgdGhlIHN1c3BpY2lvbiwgaG93ZXZlciwgd2FzIGhpcyBnaWZ0IHRvIHRoZSBDYXBwYWRvY2lhbiBvZiBhYm91dCB0d28gdGhvdXNhbmQgYWNyZXMgb2YgbGFuZCBpbiBFdWJvZWEsIGFuZCBoaXMgYmVzdG93aW5nIHVwb24gaGltIHRoZSB0aXRsZSBvZiBmcmllbmQgYW5kIGFsbHkgb2YgdGhlIFJvbWFucy4gQXQgYW55IHJhdGUsIG9uIHRoZXNlIHBvaW50cyBTdWxsYSBkZWZlbmRzIGhpbXNlbGYgaW4gaGlzIE1lbW9pcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBhbHNvIGFtYmFzc2Fkb3JzIGZyb20gTWl0aHJpZGF0ZXMgYXJyaXZlZCwgYW5kIHdoZW4gdGhleSBkZWNsYXJlZCB0aGF0IGhlIGFjY2VwdGVkIHRoZSBvdGhlciB0ZXJtcywgYnV0IGRlbWFuZGVkIHRoYXQgUGFwaGxhZ29uaWEgYmUgbm90IHRha2VuIGF3YXkgZnJvbSBoaW0sIGFuZCB0aGF0IGFzIHRvIHRoZSBzaGlwcyBubyBhZ3JlZW1lbnQgd2hhdHNvZXZlciBzaG91bGQgYmUgbWFkZSwgU3VsbGEgZmxldyBpbnRvIGEgcGFzc2lvbiBhbmQgc2FpZDogW2xkcXVvIF1XaGF0IHNheSB5ZT8gTWl0aHJpZGF0ZXMgbWFpbnRhaW5zIGhpcyBjbGFpbSB0byBQYXBobGFnb25pYSwgYW5kIHJlZnVzZXMgdG8gZ2l2ZSB0aGUgc2hpcHMsIHdoZW4gSSB0aG91Z2h0IGhlIHdvdWxkIHByb3N0cmF0ZSBoaW1zZWxmIGh1bWJseSBiZWZvcmUgbWUgaWYgSSBzaG91bGQgbGVhdmUgaGltIGJ1dCB0aGF0IHJpZ2h0IGhhbmQgb2YgaGlzLCB3aXRoIHdoaWNoIGhlIHRvb2sgdGhlIGxpdmVzIG9mIHNvIG1hbnkgUm9tYW5zPyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSB3aWxsIHF1aWNrbHkgdGFsayBpbiBhbm90aGVyIHN0cmFpbiBhZnRlciBJIGhhdmUgY3Jvc3NlZCBpbnRvIEFzaWE7IG5vdyBoZSBzaXRzIGluIFBlcmdhbXVtIGFuZCBkaXJlY3RzIGEgd2FyIHdoaWNoIGhlIGhhcyBub3Qgc2Vlbi5bcmRxdW8gXSBUaGUgYW1iYXNzYWRvcnMsIGFjY29yZGluZ2x5LCB3ZXJlIGZyaWdodGVuZWQsIGFuZCBoZWxkIHRoZWlyIHBlYWNlOyBidXQgQXJjaGVsYVt1dW1sICBdcyBlbnRyZWF0ZWQgU3VsbGEsIGFuZCB0cmllZCB0byBzb2Z0ZW4gaGlzIGFuZ2VyLCBsYXlpbmcgaG9sZCBvZiBoaXMgcmlnaHQgaGFuZCBhbmQgd2VlcGluZy4gQW5kIGZpbmFsbHkgaGUgb2J0YWluZWQgU3VsbGEncyBjb25zZW50IHRvIHNlbmQgaGltIGluIHBlcnNvbiB0byBNaXRocmlkYXRlczsgZm9yIGhlIHNhaWQgdGhhdCBoZSB3b3VsZCBoYXZlIHRoZSBwZWFjZSByYXRpZmllZCBvbiBTdWxsYSdzIHRlcm1zLCBvciwgaWYgaGUgY291bGQgbm90IHBlcnN1YWRlIHRoZSBraW5nLCB3b3VsZCBraWxsIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhlc2UgYXNzdXJhbmNlcyBTdWxsYSBzZW50IGhpbSBhd2F5LCBhbmQgdGhlbiBoaW1zZWxmIGludmFkZWQgdGhlIGNvdW50cnkgb2YgdGhlIE1hZWRpLCBhbmQgYWZ0ZXIgcmF2YWdpbmcgdGhlIG1vc3Qgb2YgaXQsIHR1cm5lZCBiYWNrIGFnYWluIGludG8gTWFjZWRvbmlhLCBhbmQgcmVjZWl2ZWQgQXJjaGVsYVt1dW1sICBdcyBhdCBQaGlsaXBwaS4gQXJjaGVsYVt1dW1sICBdcyBicm91Z2h0IGhpbSB3b3JkIHRoYXQgYWxsIHdhcyB3ZWxsLCBidXQgdGhhdCBNaXRocmlkYXRlcyBpbnNpc3RlZCBvbiBhIGNvbmZlcmVuY2Ugd2l0aCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZpbWJyaWEgd2FzIGNoaWVmbHkgcmVzcG9uc2libGUgZm9yIHRoaXMsIHdobywgYWZ0ZXIga2lsbGluZyBGbGFjY3VzLCB0aGUgY29uc3VsIG9mIHRoZSBvcHBvc2l0ZSBmYWN0aW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTIuOCIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWkuIDg8L2JpYmw+IGFuZCBub3RlLjwvbm90ZT4gYW5kIG92ZXJwb3dlcmluZyB0aGUgZ2VuZXJhbHMgb2YgTWl0aHJpZGF0ZXMsIHdhcyBtYXJjaGluZyBhZ2FpbnN0IHRoZSBraW5nIGhpbXNlbGYuIEZvciB0aGlzIHRlcnJpZmllZCBNaXRocmlkYXRlcywgYW5kIGhlIGNob3NlIHJhdGhlciB0byBzZWVrIHRoZSBmcmllbmRzaGlwIG9mIFN1bGxhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBhbHNvIGFtYmFzc2Fkb3JzIGZyb20gTWl0aHJpZGF0ZXMgYXJyaXZlZCwgYW5kIHdoZW4gdGhleSBkZWNsYXJlZCB0aGF0IGhlIGFjY2VwdGVkIHRoZSBvdGhlciB0ZXJtcywgYnV0IGRlbWFuZGVkIHRoYXQgUGFwaGxhZ29uaWEgYmUgbm90IHRha2VuIGF3YXkgZnJvbSBoaW0sIGFuZCB0aGF0IGFzIHRvIHRoZSBzaGlwcyBubyBhZ3JlZW1lbnQgd2hhdHNvZXZlciBzaG91bGQgYmUgbWFkZSwgU3VsbGEgZmxldyBpbnRvIGEgcGFzc2lvbiBhbmQgc2FpZDogW2xkcXVvIF1XaGF0IHNheSB5ZT8gTWl0aHJpZGF0ZXMgbWFpbnRhaW5zIGhpcyBjbGFpbSB0byBQYXBobGFnb25pYSwgYW5kIHJlZnVzZXMgdG8gZ2l2ZSB0aGUgc2hpcHMsIHdoZW4gSSB0aG91Z2h0IGhlIHdvdWxkIHByb3N0cmF0ZSBoaW1zZWxmIGh1bWJseSBiZWZvcmUgbWUgaWYgSSBzaG91bGQgbGVhdmUgaGltIGJ1dCB0aGF0IHJpZ2h0IGhhbmQgb2YgaGlzLCB3aXRoIHdoaWNoIGhlIHRvb2sgdGhlIGxpdmVzIG9mIHNvIG1hbnkgUm9tYW5zPyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHdpbGwgcXVpY2tseSB0YWxrIGluIGFub3RoZXIgc3RyYWluIGFmdGVyIEkgaGF2ZSBjcm9zc2VkIGludG8gQXNpYTsgbm93IGhlIHNpdHMgaW4gUGVyZ2FtdW0gYW5kIGRpcmVjdHMgYSB3YXIgd2hpY2ggaGUgaGFzIG5vdCBzZWVuLltyZHF1byBdIFRoZSBhbWJhc3NhZG9ycywgYWNjb3JkaW5nbHksIHdlcmUgZnJpZ2h0ZW5lZCwgYW5kIGhlbGQgdGhlaXIgcGVhY2U7IGJ1dCBBcmNoZWxhW3V1bWwgIF1zIGVudHJlYXRlZCBTdWxsYSwgYW5kIHRyaWVkIHRvIHNvZnRlbiBoaXMgYW5nZXIsIGxheWluZyBob2xkIG9mIGhpcyByaWdodCBoYW5kIGFuZCB3ZWVwaW5nLiBBbmQgZmluYWxseSBoZSBvYnRhaW5lZCBTdWxsYSdzIGNvbnNlbnQgdG8gc2VuZCBoaW0gaW4gcGVyc29uIHRvIE1pdGhyaWRhdGVzOyBmb3IgaGUgc2FpZCB0aGF0IGhlIHdvdWxkIGhhdmUgdGhlIHBlYWNlIHJhdGlmaWVkIG9uIFN1bGxhJ3MgdGVybXMsIG9yLCBpZiBoZSBjb3VsZCBub3QgcGVyc3VhZGUgdGhlIGtpbmcsIHdvdWxkIGtpbGwgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhlc2UgYXNzdXJhbmNlcyBTdWxsYSBzZW50IGhpbSBhd2F5LCBhbmQgdGhlbiBoaW1zZWxmIGludmFkZWQgdGhlIGNvdW50cnkgb2YgdGhlIE1hZWRpLCBhbmQgYWZ0ZXIgcmF2YWdpbmcgdGhlIG1vc3Qgb2YgaXQsIHR1cm5lZCBiYWNrIGFnYWluIGludG8gTWFjZWRvbmlhLCBhbmQgcmVjZWl2ZWQgQXJjaGVsYVt1dW1sICBdcyBhdCBQaGlsaXBwaS4gQXJjaGVsYVt1dW1sICBdcyBicm91Z2h0IGhpbSB3b3JkIHRoYXQgYWxsIHdhcyB3ZWxsLCBidXQgdGhhdCBNaXRocmlkYXRlcyBpbnNpc3RlZCBvbiBhIGNvbmZlcmVuY2Ugd2l0aCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZpbWJyaWEgd2FzIGNoaWVmbHkgcmVzcG9uc2libGUgZm9yIHRoaXMsIHdobywgYWZ0ZXIga2lsbGluZyBGbGFjY3VzLCB0aGUgY29uc3VsIG9mIHRoZSBvcHBvc2l0ZSBmYWN0aW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDEyLjgiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpLiA4PC9iaWJsPiBhbmQgbm90ZS48L25vdGU+IGFuZCBvdmVycG93ZXJpbmcgdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzLCB3YXMgbWFyY2hpbmcgYWdhaW5zdCB0aGUga2luZyBoaW1zZWxmLiBGb3IgdGhpcyB0ZXJyaWZpZWQgTWl0aHJpZGF0ZXMsIGFuZCBoZSBjaG9zZSByYXRoZXIgdG8gc2VlayB0aGUgZnJpZW5kc2hpcCBvZiBTdWxsYS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTIuOCIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWkuIDg8L2JpYmw+IGFuZCBub3RlLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbWV0LCBhY2NvcmRpbmdseSwgYXQgRGFyZGFudXMsIGluIHRoZSBUcm9hZCwgTWl0aHJpZGF0ZXMgaGF2aW5nIHR3byBodW5kcmVkIHNoaXBzIHRoZXJlLCBlcXVpcHBlZCB3aXRoIG9hcnMsIHR3ZW50eSB0aG91c2FuZCBtZW4tYXQtYXJtcyBmcm9tIGhpcyBpbmZhbnRyeSBmb3JjZSwgc2l4IHRob3VzYW5kIGhvcnNlLCBhbmQgYSB0aHJvbmcgb2Ygc2N5dGhlLWJlYXJpbmcgY2hhcmlvdHM7IFN1bGxhLCBvbiB0aGUgb3RoZXIgaGFuZCwgaGF2aW5nIGZvdXIgY29ob3J0cyBhbmQgdHdvIGh1bmRyZWQgaG9yc2UuIFdoZW4gTWl0aHJpZGF0ZXMgY2FtZSB0b3dhcmRzIGhpbSBhbmQgcHV0IG91dCBoaXMgaGFuZCwgU3VsbGEgYXNrZWQgaGltIGlmIGhlIHdvdWxkIHB1dCBhIHN0b3AgdG8gdGhlIHdhciBvbiB0aGUgdGVybXMgd2hpY2ggQXJjaGVsYVt1dW1sICBdcyBoYWQgbWFkZSwgYW5kIGFzIHRoZSBraW5nIHdhcyBzaWxlbnQsIFN1bGxhIHNhaWQ6IFtsZHF1byBdQnV0IHN1cmVseSBpdCBpcyB0aGUgcGFydCBvZiBzdXBwbGlhbnRzIHRvIHNwZWFrIGZpcnN0LCB3aGlsZSB2aWN0b3JzIG5lZWQgb25seSB0byBiZSBzaWxlbnQuW3JkcXVvIF0gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBNaXRocmlkYXRlcyBiZWdhbiBhIGRlZmVuY2Ugb2YgaGltc2VsZiwgYW5kIHRyaWVkIHRvIHNoaWZ0IHRoZSBibGFtZSBmb3IgdGhlIHdhciBwYXJ0bHkgdXBvbiB0aGUgZ29kcywgYW5kIHBhcnRseSB1cG9uIHRoZSBSb21hbnMgdGhlbXNlbHZlcy4gQnV0IFN1bGxhIGN1dCBoaW0gc2hvcnQsIHNheWluZyB0aGF0IGhlIGhhZCBsb25nIGFnbyBoZWFyZCBmcm9tIG90aGVycywgYnV0IG5vdyBrbmV3IG9mIGhpbXNlbGYsIHRoYXQgTWl0aHJpZGF0ZXMgd2FzIGEgdmVyeSBwb3dlcmZ1bCBvcmF0b3IsIHNpbmNlIGhlIGhhZCBub3QgYmVlbiBhdCBhIGxvc3MgZm9yIHBsYXVzaWJsZSBhcmd1bWVudHMgdG8gZGVmZW5kIHN1Y2ggYmFzZW5lc3MgYW5kIGluanVzdGljZSBhcyBoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgcmVwcm9hY2hlZCBoaW0gYml0dGVybHkgYW5kIGRlbm91bmNlZCBoaW0gZm9yIHdoYXQgaGUgaGFkIGRvbmUsIGFuZCBhc2tlZCBoaW0gYWdhaW4gaWYgaGUgd291bGQga2VlcCB0aGUgYWdyZWVtZW50cyBtYWRlIHRocm91Z2ggQXJjaGVsYVt1dW1sICBdcy4gQW5kIHdoZW4gaGUgc2FpZCB0aGF0IGhlIHdvdWxkLCB0aGVuIFN1bGxhIGdyZWV0ZWQgaGltIHdpdGggYW4gZW1icmFjZSBhbmQgYSBraXNzLCBhbmQgbGF0ZXIsIGJyaW5naW5nIHRvIGhpbSBBcmlvYmFyemFuZXMgYW5kIE5pY29tZWRlcyB0aGUga2luZ3MsIGhlIHJlY29uY2lsZWQgaGltIHdpdGggdGhlbS4gTWl0aHJpZGF0ZXMsIGFjY29yZGluZ2x5LCBhZnRlciBoYW5kaW5nIG92ZXIgdG8gU3VsbGEgc2V2ZW50eSBzaGlwcyBhbmQgZml2ZSBodW5kcmVkIGFyY2hlcnMsIHNhaWxlZCBhd2F5IHRvIFBvbnR1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBtZXQsIGFjY29yZGluZ2x5LCBhdCBEYXJkYW51cywgaW4gdGhlIFRyb2FkLCBNaXRocmlkYXRlcyBoYXZpbmcgdHdvIGh1bmRyZWQgc2hpcHMgdGhlcmUsIGVxdWlwcGVkIHdpdGggb2FycywgdHdlbnR5IHRob3VzYW5kIG1lbi1hdC1hcm1zIGZyb20gaGlzIGluZmFudHJ5IGZvcmNlLCBzaXggdGhvdXNhbmQgaG9yc2UsIGFuZCBhIHRocm9uZyBvZiBzY3l0aGUtYmVhcmluZyBjaGFyaW90czsgU3VsbGEsIG9uIHRoZSBvdGhlciBoYW5kLCBoYXZpbmcgZm91ciBjb2hvcnRzIGFuZCB0d28gaHVuZHJlZCBob3JzZS4gV2hlbiBNaXRocmlkYXRlcyBjYW1lIHRvd2FyZHMgaGltIGFuZCBwdXQgb3V0IGhpcyBoYW5kLCBTdWxsYSBhc2tlZCBoaW0gaWYgaGUgd291bGQgcHV0IGEgc3RvcCB0byB0aGUgd2FyIG9uIHRoZSB0ZXJtcyB3aGljaCBBcmNoZWxhW3V1bWwgIF1zIGhhZCBtYWRlLCBhbmQgYXMgdGhlIGtpbmcgd2FzIHNpbGVudCwgU3VsbGEgc2FpZDogW2xkcXVvIF1CdXQgc3VyZWx5IGl0IGlzIHRoZSBwYXJ0IG9mIHN1cHBsaWFudHMgdG8gc3BlYWsgZmlyc3QsIHdoaWxlIHZpY3RvcnMgbmVlZCBvbmx5IHRvIGJlIHNpbGVudC5bcmRxdW8gXSAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTWl0aHJpZGF0ZXMgYmVnYW4gYSBkZWZlbmNlIG9mIGhpbXNlbGYsIGFuZCB0cmllZCB0byBzaGlmdCB0aGUgYmxhbWUgZm9yIHRoZSB3YXIgcGFydGx5IHVwb24gdGhlIGdvZHMsIGFuZCBwYXJ0bHkgdXBvbiB0aGUgUm9tYW5zIHRoZW1zZWx2ZXMuIEJ1dCBTdWxsYSBjdXQgaGltIHNob3J0LCBzYXlpbmcgdGhhdCBoZSBoYWQgbG9uZyBhZ28gaGVhcmQgZnJvbSBvdGhlcnMsIGJ1dCBub3cga25ldyBvZiBoaW1zZWxmLCB0aGF0IE1pdGhyaWRhdGVzIHdhcyBhIHZlcnkgcG93ZXJmdWwgb3JhdG9yLCBzaW5jZSBoZSBoYWQgbm90IGJlZW4gYXQgYSBsb3NzIGZvciBwbGF1c2libGUgYXJndW1lbnRzIHRvIGRlZmVuZCBzdWNoIGJhc2VuZXNzIGFuZCBpbmp1c3RpY2UgYXMgaGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgcmVwcm9hY2hlZCBoaW0gYml0dGVybHkgYW5kIGRlbm91bmNlZCBoaW0gZm9yIHdoYXQgaGUgaGFkIGRvbmUsIGFuZCBhc2tlZCBoaW0gYWdhaW4gaWYgaGUgd291bGQga2VlcCB0aGUgYWdyZWVtZW50cyBtYWRlIHRocm91Z2ggQXJjaGVsYVt1dW1sICBdcy4gQW5kIHdoZW4gaGUgc2FpZCB0aGF0IGhlIHdvdWxkLCB0aGVuIFN1bGxhIGdyZWV0ZWQgaGltIHdpdGggYW4gZW1icmFjZSBhbmQgYSBraXNzLCBhbmQgbGF0ZXIsIGJyaW5naW5nIHRvIGhpbSBBcmlvYmFyemFuZXMgYW5kIE5pY29tZWRlcyB0aGUga2luZ3MsIGhlIHJlY29uY2lsZWQgaGltIHdpdGggdGhlbS4gTWl0aHJpZGF0ZXMsIGFjY29yZGluZ2x5LCBhZnRlciBoYW5kaW5nIG92ZXIgdG8gU3VsbGEgc2V2ZW50eSBzaGlwcyBhbmQgZml2ZSBodW5kcmVkIGFyY2hlcnMsIHNhaWxlZCBhd2F5IHRvIFBvbnR1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFN1bGxhIHBlcmNlaXZlZCB0aGF0IGhpcyBzb2xkaWVycyB3ZXJlIGluY2Vuc2VkIGF0IHRoZSBwZWFjZSB3aGljaCBoZSBoYWQgbWFkZTsgdGhleSB0aG91Z2h0IGl0IGEgdGVycmlibGUgdGhpbmcgdG8gc2VlIHRoZSBtb3N0IGhvc3RpbGUgb2Yga2luZ3MsIHdobyBoYWQgY2F1c2VkIG9uZSBodW5kcmVkIGFuZCBmaWZ0eSB0aG91c2FuZCBvZiB0aGUgUm9tYW5zIGluIEFzaWEgdG8gYmUgbWFzc2FjcmVkIGluIGEgc2luZ2xlIGRheTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBsYXRlIGF1dHVtbiBvZiA4OCBCLkMuIFRoZSBjaXRpZXMgb2YgQXNpYSBNaW5vciB3ZXJlIGdsYWQgdG8gb2JleSB0aGUgb3JkZXJzIG9mIE1pdGhyaWRhdGVzIGZvciBhIGdlbmVyYWwgbWFzc2FjcmUgb2YgdGhlIHJlc2lkZW50IFJvbWFucy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIE1pdGguIDQuMjIiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlPk1pdGhyaWRhdGVzPC90aXRsZT4sIHh4aWkuPC9iaWJsPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gOS4yLjQiPlZhbGVyaXVzIE1heGltdXMgKGl4LiAyLCA0LCBFeHQuIDMpPC9iaWJsPiBnaXZlcyB0aGUgbnVtYmVyIHNsYWluIGFzIDgwLDAwMC48L25vdGU+IGdvIHNhaWxpbmcgb2ZmIHdpdGggd2VhbHRoIGFuZCBzcG9pbHMgZnJvbSBBc2lhLCB3aGljaCBoZSBoYWQgZm9yIGZvdXIgeWVhcnMgY29udGludWVkIHRvIHBsdW5kZXIgYW5kIGxldnkgdGF4ZXMgb24uIEhlIHRoZXJlZm9yZSBkZWZlbmRlZCBoaW1zZWxmIHRvIHRoZW0gYnkgc2F5aW5nIHRoYXQgaGUgd291bGQgbm90IGhhdmUgYmVlbiBhYmxlIHRvIGNhcnJ5IG9uIHdhciB3aXRoIE1pdGhyaWRhdGVzIGFuZCBGaW1icmlhIHRvbywgaWYgdGhleSBoYWQgYm90aCBqb2luZWQgZm9yY2VzIGFnYWluc3QgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSBwZXJjZWl2ZWQgdGhhdCBoaXMgc29sZGllcnMgd2VyZSBpbmNlbnNlZCBhdCB0aGUgcGVhY2Ugd2hpY2ggaGUgaGFkIG1hZGU7IHRoZXkgdGhvdWdodCBpdCBhIHRlcnJpYmxlIHRoaW5nIHRvIHNlZSB0aGUgbW9zdCBob3N0aWxlIG9mIGtpbmdzLCB3aG8gaGFkIGNhdXNlZCBvbmUgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgb2YgdGhlIFJvbWFucyBpbiBBc2lhIHRvIGJlIG1hc3NhY3JlZCBpbiBhIHNpbmdsZSBkYXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBsYXRlIGF1dHVtbiBvZiA4OCBCLkMuIFRoZSBjaXRpZXMgb2YgQXNpYSBNaW5vciB3ZXJlIGdsYWQgdG8gb2JleSB0aGUgb3JkZXJzIG9mIE1pdGhyaWRhdGVzIGZvciBhIGdlbmVyYWwgbWFzc2FjcmUgb2YgdGhlIHJlc2lkZW50IFJvbWFucy4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gTWl0aC4gNC4yMiIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NaXRocmlkYXRlczwvdGl0bGU+LCB4eGlpLjwvYmlibD4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gOS4yLjQiPlZhbGVyaXVzIE1heGltdXMgKGl4LiAyLCA0LCBFeHQuIDMpPC9iaWJsPiBnaXZlcyB0aGUgbnVtYmVyIHNsYWluIGFzIDgwLDAwMC48L25vdGU+IGdvIHNhaWxpbmcgb2ZmIHdpdGggd2VhbHRoIGFuZCBzcG9pbHMgZnJvbSBBc2lhLCB3aGljaCBoZSBoYWQgZm9yIGZvdXIgeWVhcnMgY29udGludWVkIHRvIHBsdW5kZXIgYW5kIGxldnkgdGF4ZXMgb24uIEhlIHRoZXJlZm9yZSBkZWZlbmRlZCBoaW1zZWxmIHRvIHRoZW0gYnkgc2F5aW5nIHRoYXQgaGUgd291bGQgbm90IGhhdmUgYmVlbiBhYmxlIHRvIGNhcnJ5IG9uIHdhciB3aXRoIE1pdGhyaWRhdGVzIGFuZCBGaW1icmlhIHRvbywgaWYgdGhleSBoYWQgYm90aCBqb2luZWQgZm9yY2VzIGFnYWluc3QgaGltLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIE1pdGguIDQuMjIiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWl0aHJpZGF0ZXM8L3RpdGxlPiwgeHhpaS48L2JpYmw+IAogICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NaXRocmlkYXRlczwvdGl0bGU+LCB4eGlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gOS4yLjQiPlZhbGVyaXVzIE1heGltdXMgKGl4LiAyLCA0LCBFeHQuIDMpPC9iaWJsPiBnaXZlcyB0aGUgbnVtYmVyIHNsYWluIGFzIDgwLDAwMC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHNldCBvdXQgZnJvbSB0aGVuY2UgYWdhaW5zdCBGaW1icmlhLCB3aG8gd2FzIGVuY2FtcGVkIG5lYXIgVGh5YXRlaXJhLCBhbmQgaGFsdGluZyBoaXMgYXJteSBuZWFyIGJ5LCBiZWdhbiB0byBmb3J0aWZ5IGhpcyBjYW1wLiBCdXQgdGhlIHNvbGRpZXJzIG9mIEZpbWJyaWEgY2FtZSBmb3J0aCBmcm9tIHRoZWlyIGNhbXAgd2l0aG91dCBhbnkgYXJtb3VyIG9uLCBhbmQgd2VsY29tZWQgU3VsbGEncyBzb2xkaWVycywgYW5kIGpvaW5lZCB0aGVtIGVhZ2VybHkgaW4gdGhlaXIgbGFib3VycywgYW5kIHdoZW4gRmltYnJpYSBzYXcgdGhpcyBjaGFuZ2UgaW4gdGhlaXIgYWxsZWdpYW5jZSwgZmVhcmluZyB0aGF0IFN1bGxhIHdhcyBpcnJlY29uY2lsZWFibGUsIGhlIGxhaWQgdmlvbGVudCBoYW5kcyBvbiBoaW1zZWxmIGluIHRoZSBjYW1wLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBzZXQgb3V0IGZyb20gdGhlbmNlIGFnYWluc3QgRmltYnJpYSwgd2hvIHdhcyBlbmNhbXBlZCBuZWFyIFRoeWF0ZWlyYSwgYW5kIGhhbHRpbmcgaGlzIGFybXkgbmVhciBieSwgYmVnYW4gdG8gZm9ydGlmeSBoaXMgY2FtcC4gQnV0IHRoZSBzb2xkaWVycyBvZiBGaW1icmlhIGNhbWUgZm9ydGggZnJvbSB0aGVpciBjYW1wIHdpdGhvdXQgYW55IGFybW91ciBvbiwgYW5kIHdlbGNvbWVkIFN1bGxhJ3Mgc29sZGllcnMsIGFuZCBqb2luZWQgdGhlbSBlYWdlcmx5IGluIHRoZWlyIGxhYm91cnMsIGFuZCB3aGVuIEZpbWJyaWEgc2F3IHRoaXMgY2hhbmdlIGluIHRoZWlyIGFsbGVnaWFuY2UsIGZlYXJpbmcgdGhhdCBTdWxsYSB3YXMgaXJyZWNvbmNpbGVhYmxlLCBoZSBsYWlkIHZpb2xlbnQgaGFuZHMgb24gaGltc2VsZiBpbiB0aGUgY2FtcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm93IGxhaWQgYSBwdWJsaWMgZmluZSB1cG9uIEFzaWEgb2YgdHdlbnR5IHRob3VzYW5kIHRhbGVudHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCBpdi4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHV0dGVybHkgcnVpbmVkIGluZGl2aWR1YWwgZmFtaWxpZXMgYnkgdGhlIGluc29sZW50IG91dHJhZ2VzIG9mIHRoZSBzb2xkaWVycyBxdWFydGVyZWQgb24gdGhlbS4gRm9yIG9yZGVycyB3ZXJlIGdpdmVuIHRoYXQgdGhlIGhvc3Qgc2hvdWxkIGdpdmUgaGlzIGd1ZXN0IGZvdXIgdGV0cmFkcmFjaG1zIGV2ZXJ5IGRheSwgYW5kIGZ1cm5pc2ggaGltLCBhbmQgYXMgbWFueSBmcmllbmRzIGFzIGhlIG1pZ2h0IHdpc2ggdG8gaW52aXRlLCB3aXRoIGEgc3VwcGVyOyBhbmQgdGhhdCBhIG1pbGl0YXJ5IHRyaWJ1bmUgc2hvdWxkIHJlY2VpdmUgZmlmdHkgZHJhY2htYXMgYSBkYXksIGFuZCB0d28gc3VpdHMgb2YgY2xvdGhpbmcsIG9uZSB0byB3ZWFyIHdoZW4gaGUgd2FzIGF0IGhvbWUsIGFuZCBhbm90aGVyIHdoZW4gaGUgd2VudCBhYnJvYWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhIG5vdyBsYWlkIGEgcHVibGljIGZpbmUgdXBvbiBBc2lhIG9mIHR3ZW50eSB0aG91c2FuZCB0YWxlbnRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgaXYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB1dHRlcmx5IHJ1aW5lZCBpbmRpdmlkdWFsIGZhbWlsaWVzIGJ5IHRoZSBpbnNvbGVudCBvdXRyYWdlcyBvZiB0aGUgc29sZGllcnMgcXVhcnRlcmVkIG9uIHRoZW0uIEZvciBvcmRlcnMgd2VyZSBnaXZlbiB0aGF0IHRoZSBob3N0IHNob3VsZCBnaXZlIGhpcyBndWVzdCBmb3VyIHRldHJhZHJhY2htcyBldmVyeSBkYXksIGFuZCBmdXJuaXNoIGhpbSwgYW5kIGFzIG1hbnkgZnJpZW5kcyBhcyBoZSBtaWdodCB3aXNoIHRvIGludml0ZSwgd2l0aCBhIHN1cHBlcjsgYW5kIHRoYXQgYSBtaWxpdGFyeSB0cmlidW5lIHNob3VsZCByZWNlaXZlIGZpZnR5IGRyYWNobWFzIGEgZGF5LCBhbmQgdHdvIHN1aXRzIG9mIGNsb3RoaW5nLCBvbmUgdG8gd2VhciB3aGVuIGhlIHdhcyBhdCBob21lLCBhbmQgYW5vdGhlciB3aGVuIGhlIHdlbnQgYWJyb2FkLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIGl2LiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgaXYuIDEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHB1dCB0byBzZWEgd2l0aCBhbGwgaGlzIHNoaXBzIGZyb20gRXBoZXN1cywgb24gdGhlIHRoaXJkIGRheSBoZSBjYW1lIHRvIGFuY2hvciBpbiBQaXJhZXVzLiBIZSB3YXMgbm93IGluaXRpYXRlZCBpbnRvIHRoZSBteXN0ZXJpZXMsIGFuZCBzZWl6ZWQgZm9yIGhpbXNlbGYgdGhlIGxpYnJhcnkgb2YgQXBlbGxpY29uIHRoZSBUZWlhbiwgaW4gd2hpY2ggd2VyZSBtb3N0IG9mIHRoZSB0cmVhdGlzZXMgb2YgQXJpc3RvdGxlIGFuZCBUaGVvcGhyYXN0dXMsIGF0IHRoYXQgdGltZSBub3QgeWV0IHdlbGwga25vd24gdG8gdGhlIHB1YmxpYy4gQnV0IGl0IGlzIHNhaWQgdGhhdCBhZnRlciB0aGUgbGlicmFyeSB3YXMgY2FycmllZCB0byBSb21lLCBUeXJhbm5pbyB0aGUgZ3JhbW1hcmlhbiBhcnJhbmdlZCBtb3N0IG9mIHRoZSB3b3JrcyBpbiBpdCwgYW5kIHRoYXQgQW5kcm9uaWN1cyB0aGUgUmhvZGlhbiB3YXMgZnVybmlzaGVkIGJ5IGhpbSB3aXRoIGNvcGllcyBvZiB0aGVtLCBhbmQgcHVibGlzaGVkIHRoZW0sIGFuZCBkcmV3IHVwIHRoZSBsaXN0cyBub3cgY3VycmVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9sZGVyIFBlcmlwYXRldGljcyB3ZXJlIGV2aWRlbnRseSBvZiB0aGVtc2VsdmVzIGFjY29tcGxpc2hlZCBhbmQgbGVhcm5lZCBtZW4sIGJ1dCB0aGV5IHNlZW0gdG8gaGF2ZSBoYWQgbmVpdGhlciBhIGxhcmdlIG5vciBhbiBleGFjdCBhY3F1YWludGFuY2Ugd2l0aCB0aGUgd3JpdGluZ3Mgb2YgQXJpc3RvdGxlIGFuZCBUaGVvcGhyYXN0dXMsIGJlY2F1c2UgdGhlIGVzdGF0ZSBvZiBOZWxldXMgb2YgU2NlcHNpcywgdG8gd2hvbSBUaGVvcGhyYXN0dXMgYmVxdWVhdGhlZCBoaXMgYm9va3MsIGNhbWUgaW50byB0aGUgaGFuZHMgb2YgY2FyZWxlc3MgYW5kIGlsbGl0ZXJhdGUgcGVvcGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3RyYWIuIDEzLjEuNTQiIHZhbGlkPSJ5ZXMiPlN0cmFibywgeGlpaS4gMSwgNTQuPC9iaWJsPiBTY2Vwc2lzIHdhcyBhIGNpdHkgb2YgdGhlIFRyb2FkLCBhbmQgYSBjZW50cmUgb2YgbGVhcm5pbmcgdW5kZXIgdGhlIEF0dGFsaWQgZHluYXN0eSBvZiBQZXJnYW11bS4gVGhlIHdyaXRpbmdzIG9mIEFyaXN0b3RsZSBhbmQgVGhlb3BocmFzdHVzIHdlcmUgaGlkZGVuIGluIGFuIHVuZGVyZ3JvdW5kIGNlbGxhciBieSB0aGVpciBvd25lcnMsIHRvIGtlZXAgdGhlbSBmcm9tIGJlaW5nIHRha2VuIHRvIFBlcmdhbXVtLCBhbmQgY2FtZSBpbiBhIGRhbWFnZWQgY29uZGl0aW9uIGludG8gdGhlIHBvc3Nlc3Npb24gb2YgQXBlbGxpY29uLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHB1dCB0byBzZWEgd2l0aCBhbGwgaGlzIHNoaXBzIGZyb20gRXBoZXN1cywgb24gdGhlIHRoaXJkIGRheSBoZSBjYW1lIHRvIGFuY2hvciBpbiBQaXJhZXVzLiBIZSB3YXMgbm93IGluaXRpYXRlZCBpbnRvIHRoZSBteXN0ZXJpZXMsIGFuZCBzZWl6ZWQgZm9yIGhpbXNlbGYgdGhlIGxpYnJhcnkgb2YgQXBlbGxpY29uIHRoZSBUZWlhbiwgaW4gd2hpY2ggd2VyZSBtb3N0IG9mIHRoZSB0cmVhdGlzZXMgb2YgQXJpc3RvdGxlIGFuZCBUaGVvcGhyYXN0dXMsIGF0IHRoYXQgdGltZSBub3QgeWV0IHdlbGwga25vd24gdG8gdGhlIHB1YmxpYy4gQnV0IGl0IGlzIHNhaWQgdGhhdCBhZnRlciB0aGUgbGlicmFyeSB3YXMgY2FycmllZCB0byBSb21lLCBUeXJhbm5pbyB0aGUgZ3JhbW1hcmlhbiBhcnJhbmdlZCBtb3N0IG9mIHRoZSB3b3JrcyBpbiBpdCwgYW5kIHRoYXQgQW5kcm9uaWN1cyB0aGUgUmhvZGlhbiB3YXMgZnVybmlzaGVkIGJ5IGhpbSB3aXRoIGNvcGllcyBvZiB0aGVtLCBhbmQgcHVibGlzaGVkIHRoZW0sIGFuZCBkcmV3IHVwIHRoZSBsaXN0cyBub3cgY3VycmVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvbGRlciBQZXJpcGF0ZXRpY3Mgd2VyZSBldmlkZW50bHkgb2YgdGhlbXNlbHZlcyBhY2NvbXBsaXNoZWQgYW5kIGxlYXJuZWQgbWVuLCBidXQgdGhleSBzZWVtIHRvIGhhdmUgaGFkIG5laXRoZXIgYSBsYXJnZSBub3IgYW4gZXhhY3QgYWNxdWFpbnRhbmNlIHdpdGggdGhlIHdyaXRpbmdzIG9mIEFyaXN0b3RsZSBhbmQgVGhlb3BocmFzdHVzLCBiZWNhdXNlIHRoZSBlc3RhdGUgb2YgTmVsZXVzIG9mIFNjZXBzaXMsIHRvIHdob20gVGhlb3BocmFzdHVzIGJlcXVlYXRoZWQgaGlzIGJvb2tzLCBjYW1lIGludG8gdGhlIGhhbmRzIG9mIGNhcmVsZXNzIGFuZCBpbGxpdGVyYXRlIHBlb3BsZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gMTMuMS41NCIgdmFsaWQ9InllcyI+U3RyYWJvLCB4aWlpLiAxLCA1NC48L2JpYmw+IFNjZXBzaXMgd2FzIGEgY2l0eSBvZiB0aGUgVHJvYWQsIGFuZCBhIGNlbnRyZSBvZiBsZWFybmluZyB1bmRlciB0aGUgQXR0YWxpZCBkeW5hc3R5IG9mIFBlcmdhbXVtLiBUaGUgd3JpdGluZ3Mgb2YgQXJpc3RvdGxlIGFuZCBUaGVvcGhyYXN0dXMgd2VyZSBoaWRkZW4gaW4gYW4gdW5kZXJncm91bmQgY2VsbGFyIGJ5IHRoZWlyIG93bmVycywgdG8ga2VlcCB0aGVtIGZyb20gYmVpbmcgdGFrZW4gdG8gUGVyZ2FtdW0sIGFuZCBjYW1lIGluIGEgZGFtYWdlZCBjb25kaXRpb24gaW50byB0aGUgcG9zc2Vzc2lvbiBvZiBBcGVsbGljb24uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gMTMuMS41NCIgdmFsaWQ9InllcyI+U3RyYWJvLCB4aWlpLiAxLCA1NC48L2JpYmw+IFNjZXBzaXMgd2FzIGEgY2l0eSBvZiB0aGUgVHJvYWQsIGFuZCBhIGNlbnRyZSBvZiBsZWFybmluZyB1bmRlciB0aGUgQXR0YWxpZCBkeW5hc3R5IG9mIFBlcmdhbXVtLiBUaGUgd3JpdGluZ3Mgb2YgQXJpc3RvdGxlIGFuZCBUaGVvcGhyYXN0dXMgd2VyZSBoaWRkZW4gaW4gYW4gdW5kZXJncm91bmQgY2VsbGFyIGJ5IHRoZWlyIG93bmVycywgdG8ga2VlcCB0aGVtIGZyb20gYmVpbmcgdGFrZW4gdG8gUGVyZ2FtdW0sIGFuZCBjYW1lIGluIGEgZGFtYWdlZCBjb25kaXRpb24gaW50byB0aGUgcG9zc2Vzc2lvbiBvZiBBcGVsbGljb24uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgU3VsbGEgd2FzIHRhcnJ5aW5nIGF0IEF0aGVucywgaGlzIGZlZXQgd2VyZSBhdHRhY2tlZCBieSBudW1ibmVzcyBhbmQgYSBmZWVsaW5nIG9mIGhlYXZpbmVzcywgd2hpY2ggU3RyYWJvIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBzb21lIHBhc3NhZ2Ugbm90IG5vdyBleHRhbnQuPC9ub3RlPiBpcyBwcmVtb25pdG9yeSBnb3V0LiBIZSB0aGVyZWZvcmUgY3Jvc3NlZCB0aGUgc3RyYWl0cyB0byBBZWRlcHN1cyBhbmQgdXNlZCB0aGUgaG90IHdhdGVycyB0aGVyZSwgdGFraW5nIGEgaG9saWRheSBhdCB0aGUgc2FtZSB0aW1lLCBhbmQgcGFzc2luZyBoaXMgdGltZSBwbGVhc2FudGx5IHdpdGggdGhlIHRoZWF0cmljYWwgYXJ0aXN0cy4gT25jZSwgYXMgaGUgd2FzIHdhbGtpbmcgYWxvbmcgdGhlIHNlYXNob3JlLCBjZXJ0YWluIGZpc2hlcm1lbiBicm91Z2h0IGhpbSBzb21lIHZlcnkgZmluZSBmaXNoLiBCZWluZyBkZWxpZ2h0ZWQgd2l0aCB0aGVpciBnaWZ0LCBhbmQgbGVhcm5pbmcgdGhhdCB0aGV5IHdlcmUgZnJvbSBIYWxhZSwgW2xkcXVvIF1XaGF0IVtyZHF1byBdIHNhaWQgaGUsIFtsZHF1byBdaXMgYW55IG1hbiBvZiBIYWxhZSBzdGlsbCBhbGl2ZT9bcmRxdW8gXSAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBoZSB3YXMgcHVyc3VpbmcgdGhlIGVuZW15IGFmdGVyIGhpcyB2aWN0b3J5IGF0IE9yY2hvbWVudXMsIGhlIGhhZCBkZXN0cm95ZWQgdGhyZWUgY2l0aWVzIG9mIEJvZW90aWEgdG9nZXRoZXIsIEFudGhlZG9uLCBMYXJ5bW5hLCBhbmQgSGFsYWUuIFRoZSBtZW4gd2VyZSBzcGVlY2hsZXNzIHdpdGggdGVycm9yLCBidXQgU3VsbGEgc21pbGVkIGFuZCBiYWRlIHRoZW0gZGVwYXJ0IGluIHBlYWNlLCBzaW5jZSB0aGV5IGhhZCBicm91Z2h0IHdpdGggdGhlbSBubyBtZWFuIG9yIGRlc3BpY2FibGUgaW50ZXJjZXNzb3JzLiBUaGUgbWVuIG9mIEhhbGFlIHNheSB0aGF0IHRoaXMgZ2F2ZSB0aGVtIGNvdXJhZ2UgdG8gZ28gYmFjayBhZ2FpbiBpbiBhIGJvZHkgdG8gdGhlaXIgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIFN1bGxhIHdhcyB0YXJyeWluZyBhdCBBdGhlbnMsIGhpcyBmZWV0IHdlcmUgYXR0YWNrZWQgYnkgbnVtYm5lc3MgYW5kIGEgZmVlbGluZyBvZiBoZWF2aW5lc3MsIHdoaWNoIFN0cmFibyBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBzb21lIHBhc3NhZ2Ugbm90IG5vdyBleHRhbnQuPC9ub3RlPiBpcyBwcmVtb25pdG9yeSBnb3V0LiBIZSB0aGVyZWZvcmUgY3Jvc3NlZCB0aGUgc3RyYWl0cyB0byBBZWRlcHN1cyBhbmQgdXNlZCB0aGUgaG90IHdhdGVycyB0aGVyZSwgdGFraW5nIGEgaG9saWRheSBhdCB0aGUgc2FtZSB0aW1lLCBhbmQgcGFzc2luZyBoaXMgdGltZSBwbGVhc2FudGx5IHdpdGggdGhlIHRoZWF0cmljYWwgYXJ0aXN0cy4gT25jZSwgYXMgaGUgd2FzIHdhbGtpbmcgYWxvbmcgdGhlIHNlYXNob3JlLCBjZXJ0YWluIGZpc2hlcm1lbiBicm91Z2h0IGhpbSBzb21lIHZlcnkgZmluZSBmaXNoLiBCZWluZyBkZWxpZ2h0ZWQgd2l0aCB0aGVpciBnaWZ0LCBhbmQgbGVhcm5pbmcgdGhhdCB0aGV5IHdlcmUgZnJvbSBIYWxhZSwgW2xkcXVvIF1XaGF0IVtyZHF1byBdIHNhaWQgaGUsIFtsZHF1byBdaXMgYW55IG1hbiBvZiBIYWxhZSBzdGlsbCBhbGl2ZT9bcmRxdW8gXSAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGhlIHdhcyBwdXJzdWluZyB0aGUgZW5lbXkgYWZ0ZXIgaGlzIHZpY3RvcnkgYXQgT3JjaG9tZW51cywgaGUgaGFkIGRlc3Ryb3llZCB0aHJlZSBjaXRpZXMgb2YgQm9lb3RpYSB0b2dldGhlciwgQW50aGVkb24sIExhcnltbmEsIGFuZCBIYWxhZS4gVGhlIG1lbiB3ZXJlIHNwZWVjaGxlc3Mgd2l0aCB0ZXJyb3IsIGJ1dCBTdWxsYSBzbWlsZWQgYW5kIGJhZGUgdGhlbSBkZXBhcnQgaW4gcGVhY2UsIHNpbmNlIHRoZXkgaGFkIGJyb3VnaHQgd2l0aCB0aGVtIG5vIG1lYW4gb3IgZGVzcGljYWJsZSBpbnRlcmNlc3NvcnMuIFRoZSBtZW4gb2YgSGFsYWUgc2F5IHRoYXQgdGhpcyBnYXZlIHRoZW0gY291cmFnZSB0byBnbyBiYWNrIGFnYWluIGluIGEgYm9keSB0byB0aGVpciBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IFN1bGxhLCBoYXZpbmcgcGFzc2VkIHRocm91Z2ggVGhlc3NhbHkgYW5kIE1hY2Vkb25pYSBkb3duIHRvIHRoZSBzZWEsIHdhcyBwcmVwYXJpbmcgdG8gY3Jvc3MgZnJvbSBEeXJyaGFjaGl1bSB0byBCcnVuZGlzaXVtIHdpdGggdHdlbHZlIGh1bmRyZWQgc2hpcHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGlzIGZsZWV0IGhhZCBzYWlsZWQgcm91bmQgUGVsb3Bvbm5lc3VzIGZyb20gUGlyYWV1cy4gQWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDEuOS43OSIgdmFsaWQ9InllcyI+QXBwaWFuIChCZWxsLiBDaXYuIGkuIDc5KTwvYmlibD4sIFN1bGxhIGNyb3NzZWQgZnJvbSBQYXRyYXMgdG8gQnJ1bmRpc2l1bS48L25vdGU+IE5lYXIgYnkgaXMgQXBvbGxvbmlhLCBhbmQgaW4gaXRzIHZpY2luaXR5IGlzIHRoZSBOeW1waGFldW0sIGEgc2FjcmVkIHByZWNpbmN0LCB3aGljaCBzZW5kcyBmb3J0aCBpbiB2YXJpb3VzIHBsYWNlcyBmcm9tIGl0cyBncmVlbiBkZWxsIGFuZCBtZWFkb3dzLCBzdHJlYW1zIG9mIHBlcnBldHVhbGx5IGZsb3dpbmcgZmlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgdGhleSBzYXksIGEgc2F0eXIgd2FzIGNhdWdodCBhc2xlZXAsIHN1Y2ggYW4gb25lIGFzIHNjdWxwdG9ycyBhbmQgcGFpbnRlcnMgcmVwcmVzZW50LCBhbmQgYnJvdWdodCB0byBTdWxsYSwgd2hlcmUgaGUgd2FzIGFza2VkIHRocm91Z2ggbWFueSBpbnRlcnByZXRlcnMgd2hvIGhlIHdhcy4gQW5kIHdoZW4gYXQgbGFzdCBoZSB1dHRlcmVkIG5vdGhpbmcgaW50ZWxsaWdpYmxlLCBidXQgd2l0aCBkaWZmaWN1bHR5IGVtaXR0ZWQgYSBob2Fyc2UgY3J5IHRoYXQgd2FzIHNvbWV0aGluZyBiZXR3ZWVuIHRoZSBuZWlnaGluZyBvZiBhIGhvcnNlIGFuZCB0aGUgYmxlYXRpbmcgb2YgYSBnb2F0LCBTdWxsYSB3YXMgaG9ycmlmaWVkLCBhbmQgb3JkZXJlZCBoaW0gb3V0IG9mIGhpcyBzaWdodC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBTdWxsYSwgaGF2aW5nIHBhc3NlZCB0aHJvdWdoIFRoZXNzYWx5IGFuZCBNYWNlZG9uaWEgZG93biB0byB0aGUgc2VhLCB3YXMgcHJlcGFyaW5nIHRvIGNyb3NzIGZyb20gRHlycmhhY2hpdW0gdG8gQnJ1bmRpc2l1bSB3aXRoIHR3ZWx2ZSBodW5kcmVkIHNoaXBzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGlzIGZsZWV0IGhhZCBzYWlsZWQgcm91bmQgUGVsb3Bvbm5lc3VzIGZyb20gUGlyYWV1cy4gQWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS45Ljc5IiB2YWxpZD0ieWVzIj5BcHBpYW4gKEJlbGwuIENpdi4gaS4gNzkpPC9iaWJsPiwgU3VsbGEgY3Jvc3NlZCBmcm9tIFBhdHJhcyB0byBCcnVuZGlzaXVtLjwvbm90ZT4gTmVhciBieSBpcyBBcG9sbG9uaWEsIGFuZCBpbiBpdHMgdmljaW5pdHkgaXMgdGhlIE55bXBoYWV1bSwgYSBzYWNyZWQgcHJlY2luY3QsIHdoaWNoIHNlbmRzIGZvcnRoIGluIHZhcmlvdXMgcGxhY2VzIGZyb20gaXRzIGdyZWVuIGRlbGwgYW5kIG1lYWRvd3MsIHN0cmVhbXMgb2YgcGVycGV0dWFsbHkgZmxvd2luZyBmaXJlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS45Ljc5IiB2YWxpZD0ieWVzIj5BcHBpYW4gKEJlbGwuIENpdi4gaS4gNzkpPC9iaWJsPiwgU3VsbGEgY3Jvc3NlZCBmcm9tIFBhdHJhcyB0byBCcnVuZGlzaXVtLjwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHRoZXkgc2F5LCBhIHNhdHlyIHdhcyBjYXVnaHQgYXNsZWVwLCBzdWNoIGFuIG9uZSBhcyBzY3VscHRvcnMgYW5kIHBhaW50ZXJzIHJlcHJlc2VudCwgYW5kIGJyb3VnaHQgdG8gU3VsbGEsIHdoZXJlIGhlIHdhcyBhc2tlZCB0aHJvdWdoIG1hbnkgaW50ZXJwcmV0ZXJzIHdobyBoZSB3YXMuIEFuZCB3aGVuIGF0IGxhc3QgaGUgdXR0ZXJlZCBub3RoaW5nIGludGVsbGlnaWJsZSwgYnV0IHdpdGggZGlmZmljdWx0eSBlbWl0dGVkIGEgaG9hcnNlIGNyeSB0aGF0IHdhcyBzb21ldGhpbmcgYmV0d2VlbiB0aGUgbmVpZ2hpbmcgb2YgYSBob3JzZSBhbmQgdGhlIGJsZWF0aW5nIG9mIGEgZ29hdCwgU3VsbGEgd2FzIGhvcnJpZmllZCwgYW5kIG9yZGVyZWQgaGltIG91dCBvZiBoaXMgc2lnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU3VsbGEgd2FzIGFib3V0IHRvIHRyYW5zcG9ydCBoaXMgc29sZGllcnMsIGFuZCB3YXMgaW4gZmVhciBsZXN0LCB3aGVuIHRoZXkgaGFkIHJlYWNoZWQgSXRhbHksIHRoZXkgc2hvdWxkIGRpc3BlcnNlIHRvIHRoZWlyIHNldmVyYWwgY2l0aWVzLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXkgdG9vayBhbiBvYXRoIG9mIHRoZWlyIG93biBhY2NvcmQgdG8gc3RhbmQgYnkgaGltLCBhbmQgdG8gZG8gbm8gZGFtYWdlIHRvIEl0YWx5IHdpdGhvdXQgaGlzIG9yZGVyczsgYW5kIHRoZW4sIHNlZWluZyB0aGF0IGhlIG5lZWRlZCBtdWNoIG1vbmV5LCB0aGV5IG1hZGUgYSBmcmVlLXdpbGwgb2ZmZXJpbmcgYW5kIGNvbnRyaWJ1dGlvbiwgZWFjaCBtYW4gYWNjb3JkaW5nIHRvIGhpcyBhYnVuZGFuY2UuIFN1bGxhLCBob3dldmVyLCB3b3VsZCBub3QgYWNjZXB0IHRoZWlyIG9mZmVyaW5nLCBidXQgYWZ0ZXIgdGhhbmtpbmcgdGhlbSBhbmQgcm91c2luZyB0aGVpciBjb3VyYWdlLCBjcm9zc2VkIG92ZXIgdG8gY29uZnJvbnQsIGFzIGhlIGhpbXNlbGYgc2F5cywgZmlmdGVlbiBob3N0aWxlIGNvbW1hbmRlcnMgd2l0aCBmb3VyIGh1bmRyZWQgYW5kIGZpZnR5IGNvaG9ydHMuIEJ1dCB0aGUgRGVpdHkgZ2F2ZSBoaW0gbW9zdCB1bm1pc3Rha2FibGUgZm9yZXRva2VucyBvZiBoaXMgc3VjY2Vzc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWZ0ZXIgaGUgaGFkIHNhY3JpZmljZWQgYXQgb25jZSB3aGVyZSBoZSBsYW5kZWQgYXQgVGFyZW50dW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiA4MyBCLkMuIFRoZSBtYWluIHBhcnQgb2YgaGlzIGZvcmNlcywgYXQgYW55IHJhdGUsIG11c3QgaGF2ZSBsYW5kZWQgYXQgQnJ1bmRpc2l1bS48L25vdGU+IHRoZSB2aWN0aW0ncyBsaXZlciB3YXMgc2VlbiB0byBoYXZlIGFuIGltcHJlc3Npb24gb2YgYSB3cmVhdGggb2YgbGF1cmVsLCB3aXRoIHR3byBmaWxsZXRzIGhhbmdpbmcgZnJvbSBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdHlwaWNhbCB0cml1bXBoYWwgY3Jvd24uPC9ub3RlPiBBbmQgYSBsaXR0bGUgd2hpbGUgYmVmb3JlIGhlIGNyb3NzZWQgb3ZlciBmcm9tIEdyZWVjZSwgdGhlcmUgd2VyZSBzZWVuIG9uIE1vdW50IFRpZmF0dW0gaW4gQ2FtcGFuaWEsIGluIHRoZSBkYXkgdGltZSwgdHdvIGdyZWF0IGhlLWdvYXRzIGZpZ2h0aW5nIHRvZ2V0aGVyLCBhbmQgZG9pbmcgZXZlcnl0aGluZyB0aGF0IG1lbiBkbyB3aGVuIHRoZXkgZmlnaHQgYSBiYXR0bGUuIEJ1dCBpdCBwcm92ZWQgdG8gYmUgYW4gYXBwYXJpdGlvbiwgYW5kIGdyYWR1YWxseSByaXNpbmcgZnJvbSBlYXJ0aCBpdCBkaXNwZXJzZWQgaXRzZWxmIGdlbmVyYWxseSBpbiB0aGUgYWlyLCBsaWtlIHZhZ3VlIHBoYW50b21zLCBhbmQgdGhlbiB2YW5pc2hlZCBmcm9tIHNpZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm90IGxvbmcgYWZ0ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODMgQi5DLjwvbm90ZT4gaW4gdGhpcyB2ZXJ5IHBsYWNlLCB3aGVuIE1hcml1cyB0aGUgeW91bmdlciBhbmQgTm9yYmFudXMgdGhlIGNvbnN1bCBsZWQgbGFyZ2UgZm9yY2VzIHVwIGFnYWluc3QgaGltLCBTdWxsYSwgd2l0aG91dCBlaXRoZXIgZ2l2aW5nIG91dCBhbiBvcmRlciBvZiBiYXR0bGUgb3IgZm9ybWluZyBoaXMgb3duIGFybXkgaW4gY29tcGFuaWVzLCBidXQgdGFraW5nIGFkdmFudGFnZSBvZiBhIHZpZ29yb3VzIGdlbmVyYWwgYWxhY3JpdHkgYW5kIGEgdHJhbnNwb3J0IG9mIGNvdXJhZ2UgaW4gdGhlbSwgcm91dGVkIHRoZSBlbmVteSBhbmQgc2h1dCB1cCBOb3JiYW51cyBpbiB0aGUgY2l0eSBvZiBDYXB1YSwgYWZ0ZXIgc2xheWluZyBzZXZlbiB0aG91c2FuZCBvZiBoaXMgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgb24gYWNjb3VudCBvZiB0aGlzIHN1Y2Nlc3MsIGhlIHNheXMsIHRoYXQgaGlzIHNvbGRpZXJzIGRpZCBub3QgZGlzcGVyc2UgaW50byB0aGVpciBzZXZlcmFsIGNpdGllcywgYnV0IGhlbGQgdG9nZXRoZXIgYW5kIGRlc3Bpc2VkIHRoZWlyIG9wcG9uZW50cywgdGhvdWdoIHRoZXNlIHdlcmUgbWFueSB0aW1lcyBtb3JlIG51bWVyb3VzLiBIZSBzYXlzLCBtb3Jlb3ZlciwgdGhhdCBhdCBTaWx2aXVtLCBhIHNlcnZhbnQgb2YgUG9udGl1cyBtZXQgaGltLCBpbiBhbiBpbnNwaXJlZCBzdGF0ZSwgZGVjbGFyaW5nIHRoYXQgaGUgYnJvdWdodCBoaW0gZnJvbSBCZWxsb25hIHRyaXVtcGggaW4gd2FyIGFuZCB2aWN0b3J5LCBidXQgdGhhdCBpZiBoZSBkaWQgbm90IGhhc3RlbiwgdGhlIENhcGl0b2wgd291bGQgYmUgYnVybnQ7IGFuZCB0aGlzIGFjdHVhbGx5IGhhcHBlbmVkLCBoZSBzYXlzLCBvbiB0aGUgZGF5IHdoaWNoIHRoZSBtYW4gZm9yZXRvbGQsIG5hbWVseSwgdGhlIHNpeHRoIGRheSBvZiBRdWludGlsaXMsIHdoaWNoIHdlIG5vdyBjYWxsIEp1bHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlB1YmxpY29sYTwvdGl0bGU+LCB4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3RpbGwgZnVydGhlciwgYXQgRmlkZW50aWEsIHdoZW4gTWFyY3VzIEx1Y3VsbHVzLCBvbmUgb2YgU3VsbGEncyBjb21tYW5kZXJzLCB3aXRoIHNpeHRlZW4gY29ob3J0cyBjb25mcm9udGVkIGZpZnR5IGNvaG9ydHMgb2YgdGhlIGVuZW15LCBhbHRob3VnaCBoZSBoYWQgY29uZmlkZW5jZSBpbiB0aGUgcmVhZGluZXNzIG9mIGhpcyBzb2xkaWVycywgc3RpbGwsIGFzIG1vc3Qgb2YgdGhlbSB3ZXJlIHdpdGhvdXQgYXJtcywgaGUgaGVzaXRhdGVkIHRvIGF0dGFjay4gQnV0IHdoaWxlIGhlIHdhcyB3YWl0aW5nIGFuZCBkZWxpYmVyYXRpbmcsIGZyb20gdGhlIG5laWdoYm91cmluZyBwbGFpbiwgd2hpY2ggd2FzIGEgbWVhZG93LCBhIGdlbnRsZSBicmVlemUgYnJvdWdodCBhIHF1YW50aXR5IG9mIGZsb3dlcnMgYW5kIHNjYXR0ZXJlZCB0aGVtIGRvd24gdXBvbiBoaXMgYXJteTsgdGhleSBzZXR0bGVkIG9mIHRoZWlyIG93biBhY2NvcmQgYW5kIGVudmVsb3BlZCB0aGUgc2hpZWxkcyBhbmQgaGVsbWV0cyBvZiB0aGUgc29sZGllcnMsIHNvIHRoYXQgdG8gdGhlIGVuZW15IHRoZXNlIGFwcGVhcmVkIHRvIGJlIGNyb3duZWQgd2l0aCBnYXJsYW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjaXJjdW1zdGFuY2UgbWFkZSB0aGVtIG1vcmUgZWFnZXIgZm9yIHRoZSBmcmF5LCBhbmQgdGhleSBqb2luZWQgYmF0dGxlLCB3b24gdGhlIHZpY3RvcnksIGtpbGxlZCBlaWdodGVlbiB0aG91c2FuZCBvZiB0aGUgZW5lbXksIGFuZCB0b29rIHRoZWlyIGNhbXAuIFRoaXMgTHVjdWxsdXMgd2FzIGEgYnJvdGhlciBvZiB0aGUgTHVjdWxsdXMgd2hvIGFmdGVyd2FyZHMgc3ViZHVlZCBNaXRocmlkYXRlcyBhbmQgVGlncmFuZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU3VsbGEgd2FzIGFib3V0IHRvIHRyYW5zcG9ydCBoaXMgc29sZGllcnMsIGFuZCB3YXMgaW4gZmVhciBsZXN0LCB3aGVuIHRoZXkgaGFkIHJlYWNoZWQgSXRhbHksIHRoZXkgc2hvdWxkIGRpc3BlcnNlIHRvIHRoZWlyIHNldmVyYWwgY2l0aWVzLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXkgdG9vayBhbiBvYXRoIG9mIHRoZWlyIG93biBhY2NvcmQgdG8gc3RhbmQgYnkgaGltLCBhbmQgdG8gZG8gbm8gZGFtYWdlIHRvIEl0YWx5IHdpdGhvdXQgaGlzIG9yZGVyczsgYW5kIHRoZW4sIHNlZWluZyB0aGF0IGhlIG5lZWRlZCBtdWNoIG1vbmV5LCB0aGV5IG1hZGUgYSBmcmVlLXdpbGwgb2ZmZXJpbmcgYW5kIGNvbnRyaWJ1dGlvbiwgZWFjaCBtYW4gYWNjb3JkaW5nIHRvIGhpcyBhYnVuZGFuY2UuIFN1bGxhLCBob3dldmVyLCB3b3VsZCBub3QgYWNjZXB0IHRoZWlyIG9mZmVyaW5nLCBidXQgYWZ0ZXIgdGhhbmtpbmcgdGhlbSBhbmQgcm91c2luZyB0aGVpciBjb3VyYWdlLCBjcm9zc2VkIG92ZXIgdG8gY29uZnJvbnQsIGFzIGhlIGhpbXNlbGYgc2F5cywgZmlmdGVlbiBob3N0aWxlIGNvbW1hbmRlcnMgd2l0aCBmb3VyIGh1bmRyZWQgYW5kIGZpZnR5IGNvaG9ydHMuIEJ1dCB0aGUgRGVpdHkgZ2F2ZSBoaW0gbW9zdCB1bm1pc3Rha2FibGUgZm9yZXRva2VucyBvZiBoaXMgc3VjY2Vzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciBoZSBoYWQgc2FjcmlmaWNlZCBhdCBvbmNlIHdoZXJlIGhlIGxhbmRlZCBhdCBUYXJlbnR1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgODMgQi5DLiBUaGUgbWFpbiBwYXJ0IG9mIGhpcyBmb3JjZXMsIGF0IGFueSByYXRlLCBtdXN0IGhhdmUgbGFuZGVkIGF0IEJydW5kaXNpdW0uPC9ub3RlPiB0aGUgdmljdGltJ3MgbGl2ZXIgd2FzIHNlZW4gdG8gaGF2ZSBhbiBpbXByZXNzaW9uIG9mIGEgd3JlYXRoIG9mIGxhdXJlbCwgd2l0aCB0d28gZmlsbGV0cyBoYW5naW5nIGZyb20gaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdHlwaWNhbCB0cml1bXBoYWwgY3Jvd24uPC9ub3RlPiBBbmQgYSBsaXR0bGUgd2hpbGUgYmVmb3JlIGhlIGNyb3NzZWQgb3ZlciBmcm9tIEdyZWVjZSwgdGhlcmUgd2VyZSBzZWVuIG9uIE1vdW50IFRpZmF0dW0gaW4gQ2FtcGFuaWEsIGluIHRoZSBkYXkgdGltZSwgdHdvIGdyZWF0IGhlLWdvYXRzIGZpZ2h0aW5nIHRvZ2V0aGVyLCBhbmQgZG9pbmcgZXZlcnl0aGluZyB0aGF0IG1lbiBkbyB3aGVuIHRoZXkgZmlnaHQgYSBiYXR0bGUuIEJ1dCBpdCBwcm92ZWQgdG8gYmUgYW4gYXBwYXJpdGlvbiwgYW5kIGdyYWR1YWxseSByaXNpbmcgZnJvbSBlYXJ0aCBpdCBkaXNwZXJzZWQgaXRzZWxmIGdlbmVyYWxseSBpbiB0aGUgYWlyLCBsaWtlIHZhZ3VlIHBoYW50b21zLCBhbmQgdGhlbiB2YW5pc2hlZCBmcm9tIHNpZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3QgbG9uZyBhZnRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgzIEIuQy48L25vdGU+IGluIHRoaXMgdmVyeSBwbGFjZSwgd2hlbiBNYXJpdXMgdGhlIHlvdW5nZXIgYW5kIE5vcmJhbnVzIHRoZSBjb25zdWwgbGVkIGxhcmdlIGZvcmNlcyB1cCBhZ2FpbnN0IGhpbSwgU3VsbGEsIHdpdGhvdXQgZWl0aGVyIGdpdmluZyBvdXQgYW4gb3JkZXIgb2YgYmF0dGxlIG9yIGZvcm1pbmcgaGlzIG93biBhcm15IGluIGNvbXBhbmllcywgYnV0IHRha2luZyBhZHZhbnRhZ2Ugb2YgYSB2aWdvcm91cyBnZW5lcmFsIGFsYWNyaXR5IGFuZCBhIHRyYW5zcG9ydCBvZiBjb3VyYWdlIGluIHRoZW0sIHJvdXRlZCB0aGUgZW5lbXkgYW5kIHNodXQgdXAgTm9yYmFudXMgaW4gdGhlIGNpdHkgb2YgQ2FwdWEsIGFmdGVyIHNsYXlpbmcgc2V2ZW4gdGhvdXNhbmQgb2YgaGlzIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBvbiBhY2NvdW50IG9mIHRoaXMgc3VjY2VzcywgaGUgc2F5cywgdGhhdCBoaXMgc29sZGllcnMgZGlkIG5vdCBkaXNwZXJzZSBpbnRvIHRoZWlyIHNldmVyYWwgY2l0aWVzLCBidXQgaGVsZCB0b2dldGhlciBhbmQgZGVzcGlzZWQgdGhlaXIgb3Bwb25lbnRzLCB0aG91Z2ggdGhlc2Ugd2VyZSBtYW55IHRpbWVzIG1vcmUgbnVtZXJvdXMuIEhlIHNheXMsIG1vcmVvdmVyLCB0aGF0IGF0IFNpbHZpdW0sIGEgc2VydmFudCBvZiBQb250aXVzIG1ldCBoaW0sIGluIGFuIGluc3BpcmVkIHN0YXRlLCBkZWNsYXJpbmcgdGhhdCBoZSBicm91Z2h0IGhpbSBmcm9tIEJlbGxvbmEgdHJpdW1waCBpbiB3YXIgYW5kIHZpY3RvcnksIGJ1dCB0aGF0IGlmIGhlIGRpZCBub3QgaGFzdGVuLCB0aGUgQ2FwaXRvbCB3b3VsZCBiZSBidXJudDsgYW5kIHRoaXMgYWN0dWFsbHkgaGFwcGVuZWQsIGhlIHNheXMsIG9uIHRoZSBkYXkgd2hpY2ggdGhlIG1hbiBmb3JldG9sZCwgbmFtZWx5LCB0aGUgc2l4dGggZGF5IG9mIFF1aW50aWxpcywgd2hpY2ggd2Ugbm93IGNhbGwgSnVseS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHVibGljb2xhPC90aXRsZT4sIHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmxpY29sYTwvdGl0bGU+LCB4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmxpY29sYTwvdGl0bGU+LCB4di4gMS48L3RyYW5zbGF0aW9uPg=="
translation['27.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCBmdXJ0aGVyLCBhdCBGaWRlbnRpYSwgd2hlbiBNYXJjdXMgTHVjdWxsdXMsIG9uZSBvZiBTdWxsYSdzIGNvbW1hbmRlcnMsIHdpdGggc2l4dGVlbiBjb2hvcnRzIGNvbmZyb250ZWQgZmlmdHkgY29ob3J0cyBvZiB0aGUgZW5lbXksIGFsdGhvdWdoIGhlIGhhZCBjb25maWRlbmNlIGluIHRoZSByZWFkaW5lc3Mgb2YgaGlzIHNvbGRpZXJzLCBzdGlsbCwgYXMgbW9zdCBvZiB0aGVtIHdlcmUgd2l0aG91dCBhcm1zLCBoZSBoZXNpdGF0ZWQgdG8gYXR0YWNrLiBCdXQgd2hpbGUgaGUgd2FzIHdhaXRpbmcgYW5kIGRlbGliZXJhdGluZywgZnJvbSB0aGUgbmVpZ2hib3VyaW5nIHBsYWluLCB3aGljaCB3YXMgYSBtZWFkb3csIGEgZ2VudGxlIGJyZWV6ZSBicm91Z2h0IGEgcXVhbnRpdHkgb2YgZmxvd2VycyBhbmQgc2NhdHRlcmVkIHRoZW0gZG93biB1cG9uIGhpcyBhcm15OyB0aGV5IHNldHRsZWQgb2YgdGhlaXIgb3duIGFjY29yZCBhbmQgZW52ZWxvcGVkIHRoZSBzaGllbGRzIGFuZCBoZWxtZXRzIG9mIHRoZSBzb2xkaWVycywgc28gdGhhdCB0byB0aGUgZW5lbXkgdGhlc2UgYXBwZWFyZWQgdG8gYmUgY3Jvd25lZCB3aXRoIGdhcmxhbmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY2lyY3Vtc3RhbmNlIG1hZGUgdGhlbSBtb3JlIGVhZ2VyIGZvciB0aGUgZnJheSwgYW5kIHRoZXkgam9pbmVkIGJhdHRsZSwgd29uIHRoZSB2aWN0b3J5LCBraWxsZWQgZWlnaHRlZW4gdGhvdXNhbmQgb2YgdGhlIGVuZW15LCBhbmQgdG9vayB0aGVpciBjYW1wLiBUaGlzIEx1Y3VsbHVzIHdhcyBhIGJyb3RoZXIgb2YgdGhlIEx1Y3VsbHVzIHdobyBhZnRlcndhcmRzIHN1YmR1ZWQgTWl0aHJpZGF0ZXMgYW5kIFRpZ3JhbmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEsIHNlZWluZyB0aGF0IGhpcyBlbmVtaWVzIHN0aWxsIHN1cnJvdW5kZWQgaGltIG9uIGFsbCBzaWRlcyB3aXRoIG1hbnkgYXJtaWVzIGFuZCBsYXJnZSBmb3JjZXMsIGhhZCByZWNvdXJzZSB0byBjcmFmdCBhcyB3ZWxsIGFzIGZvcmNlLCBhbmQgaW52aXRlZCBTY2lwaW8sIHRoZSBvdGhlciBjb25zdWwsIHRvIG1ha2UgdGVybXMgb2YgcGVhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFjY2VwdGVkIHRoZSBwcm9wb3NhbCwgYW5kIHNldmVyYWwgbWVldGluZ3MgYW5kIGNvbmZlcmVuY2VzIHdlcmUgaGVsZDsgYnV0IFN1bGxhIGNvbnRpbnVhbGx5IGludGVycG9zZWQgc29tZSBwcmV0ZXh0IGZvciBnYWluaW5nIHRpbWUsIGFuZCBncmFkdWFsbHkgY29ycnVwdGVkIFNjaXBpbydzIHNvbGRpZXJzIGJ5IG1lYW5zIG9mIGhpcyBvd24sIHdobyB3ZXJlIHByYWN0aXNlZCBpbiBkZWNlaXQgYW5kIGV2ZXJ5IGtpbmQgb2YganVnZ2xlcnksIGxpa2UgdGhlaXIgZ2VuZXJhbCBoaW1zZWxmLiBGb3IgdGhleSBlbnRlcmVkIHRoZSBjYW1wIG9mIHRoZWlyIGVuZW1pZXMsIG1pbmdsZWQgZnJlZWx5IHdpdGggdGhlbSwgYW5kIGdyYWR1YWxseSB3b24gdGhlbSBvdmVyIHRvIFN1bGxhJ3MgY2F1c2UsIHNvbWUgYXQgb25jZSB3aXRoIG1vbmV5LCBvdGhlcnMgd2l0aCBwcm9taXNlcywgYW5kIG90aGVycyBzdGlsbCB3aXRoIHBlcnN1YXNpdmUgZmxhdHRlcmllcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZpbmFsbHksIHdoZW4gU3VsbGEgZHJldyBuZWFyIHdpdGggdHdlbnR5IGNvaG9ydHMsIGhpcyBtZW4gZ3JlZXRlZCB0aG9zZSBvZiBTY2lwaW8sIHdobyBhbnN3ZXJlZCB0aGVpciBncmVldGluZ3MgYW5kIHdlbnQgb3ZlciB0byB0aGVtLiBTY2lwaW8sIHdobyB3YXMgbGVmdCBhbG9uZSwgd2FzIHRha2VuIGluIGhpcyB0ZW50LCBidXQgZGlzbWlzc2VkOyB3aGlsZSBTdWxsYSwgd2hvIGhhZCB1c2VkIGhpcyB0d2VudHkgY29ob3J0cyBhcyBkZWNveS1iaXJkcyB0byBjYXRjaCB0aGUgZm9ydHkgY29ob3J0cyBvZiB0aGUgZW5lbXksIGxlZCB0aGVtIGFsbCBiYWNrIHRvIGhpcyBjYW1wLiBJdCB3YXMgb24gdGhpcyBvY2Nhc2lvbiwgdG9vLCB0aGF0IENhcmJvIGlzIHNhaWQgdG8gaGF2ZSByZW1hcmtlZCB0aGF0IGluIG1ha2luZyB3YXIgdXBvbiB0aGUgZm94IGFuZCB0aGUgbGlvbiBpbiBTdWxsYSwgaGUgd2FzIG1vcmUgYW5ub3llZCBieSB0aGUgZm94LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFN1bGxhLCBzZWVpbmcgdGhhdCBoaXMgZW5lbWllcyBzdGlsbCBzdXJyb3VuZGVkIGhpbSBvbiBhbGwgc2lkZXMgd2l0aCBtYW55IGFybWllcyBhbmQgbGFyZ2UgZm9yY2VzLCBoYWQgcmVjb3Vyc2UgdG8gY3JhZnQgYXMgd2VsbCBhcyBmb3JjZSwgYW5kIGludml0ZWQgU2NpcGlvLCB0aGUgb3RoZXIgY29uc3VsLCB0byBtYWtlIHRlcm1zIG9mIHBlYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFjY2VwdGVkIHRoZSBwcm9wb3NhbCwgYW5kIHNldmVyYWwgbWVldGluZ3MgYW5kIGNvbmZlcmVuY2VzIHdlcmUgaGVsZDsgYnV0IFN1bGxhIGNvbnRpbnVhbGx5IGludGVycG9zZWQgc29tZSBwcmV0ZXh0IGZvciBnYWluaW5nIHRpbWUsIGFuZCBncmFkdWFsbHkgY29ycnVwdGVkIFNjaXBpbydzIHNvbGRpZXJzIGJ5IG1lYW5zIG9mIGhpcyBvd24sIHdobyB3ZXJlIHByYWN0aXNlZCBpbiBkZWNlaXQgYW5kIGV2ZXJ5IGtpbmQgb2YganVnZ2xlcnksIGxpa2UgdGhlaXIgZ2VuZXJhbCBoaW1zZWxmLiBGb3IgdGhleSBlbnRlcmVkIHRoZSBjYW1wIG9mIHRoZWlyIGVuZW1pZXMsIG1pbmdsZWQgZnJlZWx5IHdpdGggdGhlbSwgYW5kIGdyYWR1YWxseSB3b24gdGhlbSBvdmVyIHRvIFN1bGxhJ3MgY2F1c2UsIHNvbWUgYXQgb25jZSB3aXRoIG1vbmV5LCBvdGhlcnMgd2l0aCBwcm9taXNlcywgYW5kIG90aGVycyBzdGlsbCB3aXRoIHBlcnN1YXNpdmUgZmxhdHRlcmllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIFN1bGxhIGRyZXcgbmVhciB3aXRoIHR3ZW50eSBjb2hvcnRzLCBoaXMgbWVuIGdyZWV0ZWQgdGhvc2Ugb2YgU2NpcGlvLCB3aG8gYW5zd2VyZWQgdGhlaXIgZ3JlZXRpbmdzIGFuZCB3ZW50IG92ZXIgdG8gdGhlbS4gU2NpcGlvLCB3aG8gd2FzIGxlZnQgYWxvbmUsIHdhcyB0YWtlbiBpbiBoaXMgdGVudCwgYnV0IGRpc21pc3NlZDsgd2hpbGUgU3VsbGEsIHdobyBoYWQgdXNlZCBoaXMgdHdlbnR5IGNvaG9ydHMgYXMgZGVjb3ktYmlyZHMgdG8gY2F0Y2ggdGhlIGZvcnR5IGNvaG9ydHMgb2YgdGhlIGVuZW15LCBsZWQgdGhlbSBhbGwgYmFjayB0byBoaXMgY2FtcC4gSXQgd2FzIG9uIHRoaXMgb2NjYXNpb24sIHRvbywgdGhhdCBDYXJibyBpcyBzYWlkIHRvIGhhdmUgcmVtYXJrZWQgdGhhdCBpbiBtYWtpbmcgd2FyIHVwb24gdGhlIGZveCBhbmQgdGhlIGxpb24gaW4gU3VsbGEsIGhlIHdhcyBtb3JlIGFubm95ZWQgYnkgdGhlIGZveC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYXQgU2lnbmlhLCBNYXJpdXMsIHdpdGggZWlnaHR5LWZpdmUgY29ob3J0cywgY2hhbGxlbmdlZCBTdWxsYSB0byBiYXR0bGUuIE5vdyBTdWxsYSB3YXMgdmVyeSBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBzZXR0bGVkIG9uIHRoYXQgZGF5OyBmb3IgaGUgaGFkIHNlZW4gYSB2aXNpb24gaW4gaGlzIGRyZWFtcywgYXMgZm9sbG93cy4gSGUgdGhvdWdodCBoZSBzYXcgdGhlIGVsZGVyIE1hcml1cywgd2hvIHdhcyBsb25nIHNpbmNlIGRlYWQsIGFkdmlzaW5nIGhpcyBzb24gTWFyaXVzIHRvIGJld2FyZSBvZiB0aGUgZW5zdWluZyBkYXksIHNpbmNlIGl0IHdvdWxkIGJyaW5nIGhpbSBhIGdyZWF0IGNhbGFtaXR5LiBGb3IgdGhpcyByZWFzb24sIHRoZW4sIFN1bGxhIHdhcyBlYWdlciB0byBmaWdodCBhIGJhdHRsZSwgYW5kIHdhcyB0cnlpbmcgdG8gZ2V0IERvbGFiZWxsYSwgd2hvIHdhcyBlbmNhbXBlZCBhdCBzb21lIGRpc3RhbmNlLCB0byBqb2luIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBlbmVteSBiZXNldCB0aGUgcm9hZHMgYW5kIGhlbW1lZCBTdWxsYSBpbiwgYW5kIGhpcyBzb2xkaWVycyB3ZXJlIHdvcm4gb3V0IHdpdGggZmlnaHRpbmcgdG8gb3BlbiBhIHBhc3NhZ2UuIE11Y2ggcmFpbiBhbHNvIGNhbWUgdXBvbiB0aGVtIHdoaWxlIHRoZXkgd2VyZSBhdCB3b3JrIGFtaWQgYWRkZWQgdG8gdGhlaXIgZGlzdHJlc3MuIFRoZSB0cmlidW5lcyB0aGVyZWZvcmUgY2FtZSB0byBTdWxsYSBhbmQgYmVnZ2VkIGhpbSB0byBkZWZlciB0aGUgYmF0dGxlLCBzaG93aW5nIGhpbSB0aGUgc29sZGllcnMgcHJvc3RyYXRlZCB3aXRoIHdlYXJpbmVzcyBhbmQgcmVzdGluZyBvbiB0aGVpciBzaGllbGRzLCB3aGljaCB0aGV5IGhhZCBsYWlkIHVwb24gdGhlIGdyb3VuZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgeWllbGRlZCByZWx1Y3RhbnRseSwgYW5kIGdhdmUgb3JkZXJzIHRvIHBpdGNoIGEgY2FtcCwgYnV0IGp1c3QgYXMgaGlzIG1lbiB3ZXJlIGJlZ2lubmluZyB0byBkaWcgYSB0cmVuY2ggYW5kIHRocm93IHRoZSByYW1wYXJ0IGJlZm9yZSBpdCwgTWFyaXVzIGF0dGFja2VkIHRoZW0gY29uZmlkZW50bHksIHJpZGluZyBhaGVhZCBvZiBoaXMgbGluZXMsIGFuZCBob3BpbmcgdG8gc2NhdHRlciBoaXMgZW5lbWllcyB3aGlsZSB0aGV5IHdlcmUgaW4gZGlzb3JkZXIgYW5kIGNvbmZ1c2lvbi4gVGhlcmUgdGhlIERlaXR5IGZ1bGZpbGxlZCB0aGUgd29yZHMgd2hpY2ggU3VsbGEgaGFkIGhlYXJkIGluIGhpcyBkcmVhbXMuIEZvciBTdWxsYSdzIHJhZ2UgaW1wYXJ0ZWQgaXRzZWxmIHRvIGhpcyBzb2xkaWVycywgYW5kIGxlYXZpbmcgb2ZmIHRoZWlyIHdvcmssIHRoZXkgcGxhbnRlZCB0aGVpciBqYXZlbGlucyBpbiB0aGUgdHJlbmNoLCBkcmV3IHRoZWlyIHN3b3JkcywgYW5kIHdpdGggYSBnZW5lcmFsIHNob3V0IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCB0aGVpciBlbmVtaWVzLiBUaGVzZSBkaWQgbm90IGhvbGQgdGhlaXIgZ3JvdW5kIGxvbmcsIGJ1dCB0b29rIHRvIGZsaWdodCwgYW5kIHdlcmUgc2xhaW4gaW4gZ3JlYXQgbnVtYmVycy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGZsZWQgdG8gUHJhZW5lc3RlLCBidXQgZm91bmQgdGhlIGdhdGUgYWxyZWFkeSBjbG9zZWQuIEEgcm9wZSB3YXMgdGhyb3duIGRvd24gdG8gaGltLCBob3dldmVyLCBhbmQgYWZ0ZXIgZmFzdGVuaW5nIHRoaXMgYXJvdW5kIGhpcyB3YWlzdCwgaGUgd2FzIGhvaXN0ZWQgdG8gdGhlIHRvcCBvZiB0aGUgd2FsbC4gQnV0IHRoZXJlIGFyZSBzb21lIHdobyBzYXksIGFuZCBGZW5lc3RlbGxhIGlzIG9uZSBvZiB0aGVzZSwgdGhhdCBNYXJpdXMga25ldyBub3RoaW5nIG9mIHRoZSBiYXR0bGUsIGJ1dCB3YXMgZm9yY2VkIGJ5IGxvc3Mgb2Ygc2xlZXAgYW5kIHdlYXJpbmVzcyB0byBjYXN0IGhpbXNlbGYgdXBvbiB0aGUgZ3JvdW5kIGluIGEgc2hhZHkgcGxhY2Ugd2hlbiB0aGUgc2lnbmFsIGZvciBiYXR0bGUgd2FzIGdpdmVuLCBhbmQgdGhlcmUgZ2F2ZSB3YXkgdG8gc2xlZXAsIGFuZCB3YXMgdGhlbiByb3VzZWQgd2l0aCBkaWZmaWN1bHR5IHdoZW4gdGhlIHJvdXQgdG9vayBwbGFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBiYXR0bGUgU3VsbGEgc2F5cyBoZSBsb3N0IG9ubHkgdHdlbnR5LXRocmVlIG1lbiwgYnV0IGtpbGxlZCB0d2VudHkgdGhvdXNhbmQgb2YgdGhlIGVuZW15LCBhbmQgdG9vayBlaWdodCB0aG91c2FuZCBwcmlzb25lcnMuIEhpcyBvdGhlciBwbGFucyB3ZXJlIGNhcnJpZWQgb3V0IHdpdGggbGlrZSBzdWNjZXNzIGJ5IGhpcyBnZW5lcmFscywgUG9tcGV5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNiIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIHZpLi12aWlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBDcmFzc3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDYiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoJ3MgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgdmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IE1ldGVsbHVzLCBhbmQgU2VydmlsaXVzLiBGb3Igd2l0aCBmZXcgb3Igbm8gcmV2ZXJzZXMgdGhlc2UgYW5uaWhpbGF0ZWQgbGFyZ2UgZm9yY2VzIG9mIHRoZSBlbmVteSwgc28gdGhhdCBDYXJibywgdGhlIGNoaWVmIHN1cHBvcnRlciBvZiB0aGUgb3Bwb3NpdGUgZmFjdGlvbiwgcmFuIGF3YXkgZnJvbSBoaXMgb3duIGFybXkgYnkgbmlnaHQsIGFuZCBzYWlsZWQgb2ZmIHRvIExpYnlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGF0IFNpZ25pYSwgTWFyaXVzLCB3aXRoIGVpZ2h0eS1maXZlIGNvaG9ydHMsIGNoYWxsZW5nZWQgU3VsbGEgdG8gYmF0dGxlLiBOb3cgU3VsbGEgd2FzIHZlcnkgZWFnZXIgdG8gaGF2ZSB0aGUgaXNzdWUgc2V0dGxlZCBvbiB0aGF0IGRheTsgZm9yIGhlIGhhZCBzZWVuIGEgdmlzaW9uIGluIGhpcyBkcmVhbXMsIGFzIGZvbGxvd3MuIEhlIHRob3VnaHQgaGUgc2F3IHRoZSBlbGRlciBNYXJpdXMsIHdobyB3YXMgbG9uZyBzaW5jZSBkZWFkLCBhZHZpc2luZyBoaXMgc29uIE1hcml1cyB0byBiZXdhcmUgb2YgdGhlIGVuc3VpbmcgZGF5LCBzaW5jZSBpdCB3b3VsZCBicmluZyBoaW0gYSBncmVhdCBjYWxhbWl0eS4gRm9yIHRoaXMgcmVhc29uLCB0aGVuLCBTdWxsYSB3YXMgZWFnZXIgdG8gZmlnaHQgYSBiYXR0bGUsIGFuZCB3YXMgdHJ5aW5nIHRvIGdldCBEb2xhYmVsbGEsIHdobyB3YXMgZW5jYW1wZWQgYXQgc29tZSBkaXN0YW5jZSwgdG8gam9pbiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZW5lbXkgYmVzZXQgdGhlIHJvYWRzIGFuZCBoZW1tZWQgU3VsbGEgaW4sIGFuZCBoaXMgc29sZGllcnMgd2VyZSB3b3JuIG91dCB3aXRoIGZpZ2h0aW5nIHRvIG9wZW4gYSBwYXNzYWdlLiBNdWNoIHJhaW4gYWxzbyBjYW1lIHVwb24gdGhlbSB3aGlsZSB0aGV5IHdlcmUgYXQgd29yayBhbWlkIGFkZGVkIHRvIHRoZWlyIGRpc3RyZXNzLiBUaGUgdHJpYnVuZXMgdGhlcmVmb3JlIGNhbWUgdG8gU3VsbGEgYW5kIGJlZ2dlZCBoaW0gdG8gZGVmZXIgdGhlIGJhdHRsZSwgc2hvd2luZyBoaW0gdGhlIHNvbGRpZXJzIHByb3N0cmF0ZWQgd2l0aCB3ZWFyaW5lc3MgYW5kIHJlc3Rpbmcgb24gdGhlaXIgc2hpZWxkcywgd2hpY2ggdGhleSBoYWQgbGFpZCB1cG9uIHRoZSBncm91bmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhIHlpZWxkZWQgcmVsdWN0YW50bHksIGFuZCBnYXZlIG9yZGVycyB0byBwaXRjaCBhIGNhbXAsIGJ1dCBqdXN0IGFzIGhpcyBtZW4gd2VyZSBiZWdpbm5pbmcgdG8gZGlnIGEgdHJlbmNoIGFuZCB0aHJvdyB0aGUgcmFtcGFydCBiZWZvcmUgaXQsIE1hcml1cyBhdHRhY2tlZCB0aGVtIGNvbmZpZGVudGx5LCByaWRpbmcgYWhlYWQgb2YgaGlzIGxpbmVzLCBhbmQgaG9waW5nIHRvIHNjYXR0ZXIgaGlzIGVuZW1pZXMgd2hpbGUgdGhleSB3ZXJlIGluIGRpc29yZGVyIGFuZCBjb25mdXNpb24uIFRoZXJlIHRoZSBEZWl0eSBmdWxmaWxsZWQgdGhlIHdvcmRzIHdoaWNoIFN1bGxhIGhhZCBoZWFyZCBpbiBoaXMgZHJlYW1zLiBGb3IgU3VsbGEncyByYWdlIGltcGFydGVkIGl0c2VsZiB0byBoaXMgc29sZGllcnMsIGFuZCBsZWF2aW5nIG9mZiB0aGVpciB3b3JrLCB0aGV5IHBsYW50ZWQgdGhlaXIgamF2ZWxpbnMgaW4gdGhlIHRyZW5jaCwgZHJldyB0aGVpciBzd29yZHMsIGFuZCB3aXRoIGEgZ2VuZXJhbCBzaG91dCBjYW1lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlaXIgZW5lbWllcy4gVGhlc2UgZGlkIG5vdCBob2xkIHRoZWlyIGdyb3VuZCBsb25nLCBidXQgdG9vayB0byBmbGlnaHQsIGFuZCB3ZXJlIHNsYWluIGluIGdyZWF0IG51bWJlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBmbGVkIHRvIFByYWVuZXN0ZSwgYnV0IGZvdW5kIHRoZSBnYXRlIGFscmVhZHkgY2xvc2VkLiBBIHJvcGUgd2FzIHRocm93biBkb3duIHRvIGhpbSwgaG93ZXZlciwgYW5kIGFmdGVyIGZhc3RlbmluZyB0aGlzIGFyb3VuZCBoaXMgd2Fpc3QsIGhlIHdhcyBob2lzdGVkIHRvIHRoZSB0b3Agb2YgdGhlIHdhbGwuIEJ1dCB0aGVyZSBhcmUgc29tZSB3aG8gc2F5LCBhbmQgRmVuZXN0ZWxsYSBpcyBvbmUgb2YgdGhlc2UsIHRoYXQgTWFyaXVzIGtuZXcgbm90aGluZyBvZiB0aGUgYmF0dGxlLCBidXQgd2FzIGZvcmNlZCBieSBsb3NzIG9mIHNsZWVwIGFuZCB3ZWFyaW5lc3MgdG8gY2FzdCBoaW1zZWxmIHVwb24gdGhlIGdyb3VuZCBpbiBhIHNoYWR5IHBsYWNlIHdoZW4gdGhlIHNpZ25hbCBmb3IgYmF0dGxlIHdhcyBnaXZlbiwgYW5kIHRoZXJlIGdhdmUgd2F5IHRvIHNsZWVwLCBhbmQgd2FzIHRoZW4gcm91c2VkIHdpdGggZGlmZmljdWx0eSB3aGVuIHRoZSByb3V0IHRvb2sgcGxhY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgYmF0dGxlIFN1bGxhIHNheXMgaGUgbG9zdCBvbmx5IHR3ZW50eS10aHJlZSBtZW4sIGJ1dCBraWxsZWQgdHdlbnR5IHRob3VzYW5kIG9mIHRoZSBlbmVteSwgYW5kIHRvb2sgZWlnaHQgdGhvdXNhbmQgcHJpc29uZXJzLiBIaXMgb3RoZXIgcGxhbnMgd2VyZSBjYXJyaWVkIG91dCB3aXRoIGxpa2Ugc3VjY2VzcyBieSBoaXMgZ2VuZXJhbHMsIFBvbXBleSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2IiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB2aS4tdmlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQ3Jhc3N1cyw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2IiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB2aS4tdmlpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB2aS4tdmlpaS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gNiIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBNZXRlbGx1cywgYW5kIFNlcnZpbGl1cy4gRm9yIHdpdGggZmV3IG9yIG5vIHJldmVyc2VzIHRoZXNlIGFubmloaWxhdGVkIGxhcmdlIGZvcmNlcyBvZiB0aGUgZW5lbXksIHNvIHRoYXQgQ2FyYm8sIHRoZSBjaGllZiBzdXBwb3J0ZXIgb2YgdGhlIG9wcG9zaXRlIGZhY3Rpb24sIHJhbiBhd2F5IGZyb20gaGlzIG93biBhcm15IGJ5IG5pZ2h0LCBhbmQgc2FpbGVkIG9mZiB0byBMaWJ5YS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDYiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB2aS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgdmkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gU3VsbGEncyBsYXN0IHN0cnVnZ2xlLCBob3dldmVyLCBUZWxlc2ludXMgdGhlIFNhbW5pdGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgdGhlIGNsb3NlIG9mIHRoZSBTb2NpYWwgd2FyLCBpbiA4OSBCLkMuLCB0aGUgU2Ftbml0ZXMgYW5kIEx1Y2FuaWFucyBhbG9uZSBwZXJzaXN0ZWQgaW4gdGhlaXIgaG9zdGlsaXR5IHRvIFJvbWUuIFRoZSBNYXJpYW4gcGFydHkgaGFkIGNvbmNpbGlhdGVkIHRoZW0sIGJ1dCB0aGV5IHJlZ2FyZGVkIFN1bGxhIGFzIHRoZWlyIGJpdHRlcmVzdCBmb2UuPC9ub3RlPiBsaWtlIGEgdGhpcmQgd3Jlc3RsZXIgd2hvIHNpdHMgYnkgdG8gY29udGVuZCB3aXRoIGEgd2VhcnkgdmljdG9yLCBjYW1lIG5lYXIgdHJpcHBpbmcgYW5kIHRocm93aW5nIGhpbSBhdCB0aGUgZ2F0ZXMgb2YgUm9tZS4gRm9yIGhlIGhhZCBjb2xsZWN0ZWQgYSBsYXJnZSBmb3JjZSwgYW5kIHdhcyBoYXN0ZW5pbmcsIHRvZ2V0aGVyIHdpdGggTGFtcG9uaXVzIHRoZSBMdWNhbmlhbiwgdG8gUHJhZW5lc3RlLCBpbiBvcmRlciB0byByZWxpZXZlIE1hcml1cyBmcm9tIHRoZSBzaWVnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgbGVhcm5lZCB0aGF0IFN1bGxhIHRvIGhpcyBmcm9udCwgYW5kIFBvbXBleSB0byBoaXMgcmVhciwgd2VyZSBodXJyeWluZyB1cCBhZ2FpbnN0IGhpbSwgc2luY2UgaGUgd2FzIGJlaW5nIGhlbW1lZCBpbiBiZWZvcmUgYW5kIGJlaGluZCwgdmFsaWFudCBhbmQgaGlnaGx5IGV4cGVyaWVuY2VkIHNvbGRpZXIgdGhhdCBoZSB3YXMsIGhlIGJyb2tlIGNhbXAgYnkgbmlnaHQsIGFuZCBtYXJjaGVkIHdpdGggYWxsIGhpcyBhcm15IGFnYWluc3QgUm9tZSBpdHNlbGYuIEFuZCBoZSBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBicmVha2luZyBpbnRvIHRoZSBjaXR5IGluIGl0cyB1bmd1YXJkZWQgc3RhdGU7IGluZGVlZCwgaGUgd2FzIG9ubHkgbmluZSBmdXJsb25ncyBmcm9tIHRoZSBDb2xsaW5lIGdhdGUgd2hlbiBoZSBiaXZvdWFja2VkIGFnYWluc3QgaXQsIGhpZ2hseSBlbmNvdXJhZ2VkIGFuZCBlbGF0ZWQgd2l0aCBob3BlcyBhdCB0aGUgdGhvdWdodCBvZiBoYXZpbmcgb3V0Z2VuZXJhbGxlZCBzbyBtYW55IGdyZWF0IGNvbW1hbmRlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhdCBkYXktYnJlYWssIHRoZSBub2JsZXN0IHlvdXRoIG9mIHRoZSBjaXR5IHJvZGUgb3V0IGFnYWluc3QgaGltLCBoZSBvdmVyd2hlbG1lZCBtYW55IG9mIHRoZW0sIGluY2x1ZGluZyBBcHBpdXMgQ2xhdWRpdXMsIGEgbWFuIG9mIGhpZ2ggYmlydGggYW5kIGNoYXJhY3Rlci4gVGhlcmUgd2FzIGEgdHVtdWx0IGluIHRoZSBjaXR5LCBuYXR1cmFsbHksIGFuZCBzaHJpZWtpbmcgb2Ygd29tZW4sIGFuZCBydW5uaW5nIGhpdGhlciBhbmQgdGhpdGhlciwgYXMgdGhvdWdoIHRoZSBjaXR5IHdlcmUgdGFrZW4gYnkgc3Rvcm0sIHdoZW4gQmFsYnVzLCBzZW50IGZvcndhcmQgYnkgU3VsbGEsIHdhcyBmaXJzdCBzZWVuIHJpZGluZyB1cCBhdCBmdWxsIHNwZWVkIHdpdGggc2V2ZW4gaHVuZHJlZCBob3JzZW1lbi4gSGUgcGF1c2VkIGp1c3QgbG9uZyBlbm91Z2ggdG8gbGV0IHRoZSBzd2VhdCBvZiB0aGUgaG9yc2VzIGRyeSBvZmYsIGFuZCB0aGVuIHF1aWNrbHkgYnJpZGxlZCB0aGVtIGFnYWluIGFuZCBhdHRhY2tlZCB0aGUgZW5lbXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gU3VsbGEncyBsYXN0IHN0cnVnZ2xlLCBob3dldmVyLCBUZWxlc2ludXMgdGhlIFNhbW5pdGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGUgY2xvc2Ugb2YgdGhlIFNvY2lhbCB3YXIsIGluIDg5IEIuQy4sIHRoZSBTYW1uaXRlcyBhbmQgTHVjYW5pYW5zIGFsb25lIHBlcnNpc3RlZCBpbiB0aGVpciBob3N0aWxpdHkgdG8gUm9tZS4gVGhlIE1hcmlhbiBwYXJ0eSBoYWQgY29uY2lsaWF0ZWQgdGhlbSwgYnV0IHRoZXkgcmVnYXJkZWQgU3VsbGEgYXMgdGhlaXIgYml0dGVyZXN0IGZvZS48L25vdGU+IGxpa2UgYSB0aGlyZCB3cmVzdGxlciB3aG8gc2l0cyBieSB0byBjb250ZW5kIHdpdGggYSB3ZWFyeSB2aWN0b3IsIGNhbWUgbmVhciB0cmlwcGluZyBhbmQgdGhyb3dpbmcgaGltIGF0IHRoZSBnYXRlcyBvZiBSb21lLiBGb3IgaGUgaGFkIGNvbGxlY3RlZCBhIGxhcmdlIGZvcmNlLCBhbmQgd2FzIGhhc3RlbmluZywgdG9nZXRoZXIgd2l0aCBMYW1wb25pdXMgdGhlIEx1Y2FuaWFuLCB0byBQcmFlbmVzdGUsIGluIG9yZGVyIHRvIHJlbGlldmUgTWFyaXVzIGZyb20gdGhlIHNpZWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBTdWxsYSB0byBoaXMgZnJvbnQsIGFuZCBQb21wZXkgdG8gaGlzIHJlYXIsIHdlcmUgaHVycnlpbmcgdXAgYWdhaW5zdCBoaW0sIHNpbmNlIGhlIHdhcyBiZWluZyBoZW1tZWQgaW4gYmVmb3JlIGFuZCBiZWhpbmQsIHZhbGlhbnQgYW5kIGhpZ2hseSBleHBlcmllbmNlZCBzb2xkaWVyIHRoYXQgaGUgd2FzLCBoZSBicm9rZSBjYW1wIGJ5IG5pZ2h0LCBhbmQgbWFyY2hlZCB3aXRoIGFsbCBoaXMgYXJteSBhZ2FpbnN0IFJvbWUgaXRzZWxmLiBBbmQgaGUgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgYnJlYWtpbmcgaW50byB0aGUgY2l0eSBpbiBpdHMgdW5ndWFyZGVkIHN0YXRlOyBpbmRlZWQsIGhlIHdhcyBvbmx5IG5pbmUgZnVybG9uZ3MgZnJvbSB0aGUgQ29sbGluZSBnYXRlIHdoZW4gaGUgYml2b3VhY2tlZCBhZ2FpbnN0IGl0LCBoaWdobHkgZW5jb3VyYWdlZCBhbmQgZWxhdGVkIHdpdGggaG9wZXMgYXQgdGhlIHRob3VnaHQgb2YgaGF2aW5nIG91dGdlbmVyYWxsZWQgc28gbWFueSBncmVhdCBjb21tYW5kZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhdCBkYXktYnJlYWssIHRoZSBub2JsZXN0IHlvdXRoIG9mIHRoZSBjaXR5IHJvZGUgb3V0IGFnYWluc3QgaGltLCBoZSBvdmVyd2hlbG1lZCBtYW55IG9mIHRoZW0sIGluY2x1ZGluZyBBcHBpdXMgQ2xhdWRpdXMsIGEgbWFuIG9mIGhpZ2ggYmlydGggYW5kIGNoYXJhY3Rlci4gVGhlcmUgd2FzIGEgdHVtdWx0IGluIHRoZSBjaXR5LCBuYXR1cmFsbHksIGFuZCBzaHJpZWtpbmcgb2Ygd29tZW4sIGFuZCBydW5uaW5nIGhpdGhlciBhbmQgdGhpdGhlciwgYXMgdGhvdWdoIHRoZSBjaXR5IHdlcmUgdGFrZW4gYnkgc3Rvcm0sIHdoZW4gQmFsYnVzLCBzZW50IGZvcndhcmQgYnkgU3VsbGEsIHdhcyBmaXJzdCBzZWVuIHJpZGluZyB1cCBhdCBmdWxsIHNwZWVkIHdpdGggc2V2ZW4gaHVuZHJlZCBob3JzZW1lbi4gSGUgcGF1c2VkIGp1c3QgbG9uZyBlbm91Z2ggdG8gbGV0IHRoZSBzd2VhdCBvZiB0aGUgaG9yc2VzIGRyeSBvZmYsIGFuZCB0aGVuIHF1aWNrbHkgYnJpZGxlZCB0aGVtIGFnYWluIGFuZCBhdHRhY2tlZCB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMganVuY3R1cmUsIFN1bGxhIGFsc28gbWFkZSBoaXMgYXBwZWFyYW5jZSwgYW5kIG9yZGVyaW5nIGhpcyB2YW5ndWFyZCB0byB0YWtlIGZvb2QgYXQgb25jZSwgcHJvY2VlZGVkIHRvIGZvcm0gdGhlbSBpbiBvcmRlciBvZiBiYXR0bGUuIERvbGFiZWxsYSBhbmQgVG9ycXVhdHVzIGVhcm5lc3RseSBiZXNvdWdodCBoaW0gdG8gd2FpdCBhIHdoaWxlLCBhbmQgbm90IHRvIGhhemFyZCB0aGUgc3VwcmVtZSBpc3N1ZSB3aXRoIGhpcyBtZW4gZmF0aWd1ZWQgYW5kIHNwZW50OyBmb3IgdGhleSB3ZXJlIHRvIGNvbnRlbmQgbm90IHdpdGggQ2FyYm8gYW5kIE1hcml1cywgYnV0IHdpdGggU2Ftbml0ZXMgYW5kIEx1Y2FuaWFucywgdGhlIG1vc3QgaW52ZXRlcmF0ZSBlbmVtaWVzIG9mIFJvbWUsIGFuZCB0aGUgbW9zdCB3YXJsaWtlIG9mIHBlb3BsZXMuIEJ1dCBoZSBwdXQgdGhlbSBieSwgYW5kIGNvbW1hbmRlZCB0aGUgdHJ1bXBldHMgdG8gc291bmQgdGhlIGNoYXJnZSwgdGhvdWdoIGl0IHdhcyBub3cgZ2V0dGluZyBvbiB0b3dhcmRzIGZvdXIgbydjbG9jayBpbiB0aGUgYWZ0ZXJub29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc3RydWdnbGUgd2hpY2ggZm9sbG93ZWQsIGFuZCBubyBvdGhlciB3YXMgc28gZmllcmNlLCB0aGUgcmlnaHQgd2luZywgd2hlcmUgQ3Jhc3N1cyB3YXMgcG9zdGVkLCB3YXMgYnJpbGxpYW50bHkgc3VjY2Vzc2Z1bDsgYnV0IHRoZSBsZWZ0IHdhcyBoYXJkIHByZXNzZWQgYW5kIGluIGEgc29ycnkgcGxpZ2h0LCB3aGVuIFN1bGxhIGNhbWUgdG8gaXRzIGFzc2lzdGFuY2UsIG1vdW50ZWQgb24gYSB3aGl0ZSBob3JzZSB0aGF0IHdhcyBtZXR0bGVzb21lIGFuZCB2ZXJ5IHN3aWZ0LiBCeSB0aGlzIGhvcnNlIHR3byBvZiBlbmVteSByZWNvZ25pc2VkIGhpbSwgYW5kIHBvaXNlZCB0aGVpciBzcGVhcnMgZm9yIHRoZSBjYXN0LiBTdWxsYSBoaW1zZWxmLCBub3csIGRpZCBub3Qgbm90aWNlIHRoaXMsIGJ1dCBoaXMgZ3Jvb20gZGlkLCBhbmQgd2l0aCBhIGN1dCBvZiB0aGUgbGFzaCBzdWNjZWVkZWQgaW4gc2VuZGluZyBTdWxsYSdzIGhvcnNlIGFsb25nIHNvIHRoYXQgdGhlIHNwZWFyLWhlYWRzIGp1c3QgZ3JhemVkIGl0cyB0YWlsIGFuZCBmaXhlZCB0aGVtc2VsdmVzIGluIHRoZSBncm91bmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIGFsc28gYSBzdG9yeSB0aGF0IFN1bGxhIGhhZCBhIGxpdHRsZSBnb2xkZW4gaW1hZ2Ugb2YgQXBvbGxvIGZyb20gRGVscGhpIHdoaWNoIGhlIGFsd2F5cyBjYXJyaWVkIGluIGhpcyBib3NvbSB3aGVuIGhlIHdhcyBpbiBiYXR0bGUsIGJ1dCB0aGF0IG9uIHRoaXMgb2NjYXNpb24gaGUgdG9vayBpdCBvdXQgYW5kIGtpc3NlZCBpdCBhZmZlY3Rpb25hdGVseSwgc2F5aW5nOiBbbGRxdW8gXU8gUHl0aGlhbiBBcG9sbG8sIG5vdyB0aGF0IHRob3UgaGFzdCBpbiBzbyBtYW55IHN0cnVnZ2xlcyByYWlzZWQgdGhlIGZvcnR1bmF0ZSBDb3JuZWxpdXMgU3VsbGEgdG8gZ2xvcnkgYW5kIGdyZWF0bmVzcywgY2FuIGl0IGJlIHRoYXQgdGhvdSBoYXN0IGJyb3VnaHQgaGltIHRvIHRoZSBnYXRlcyBvZiBoaXMgbmF0aXZlIGNpdHkgb25seSB0byBjYXN0IGhpbSBkb3duIHRoZXJlLCB0byBwZXJpc2ggbW9zdCBzaGFtZWZ1bGx5IHdpdGggaGlzIGZlbGxvdy1jb3VudHJ5bWVuP1tyZHF1byBdIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaW52b2tpbmcgdGhlIGdvZCwgdGhleSBzYXksIGhlIGVudHJlYXRlZCBzb21lIG9mIGhpcyBtZW4sIHRocmVhdGVuZWQgb3RoZXJzLCBhbmQgbGFpZCBoYW5kcyBvbiBvdGhlcnMgc3RpbGw7IGJ1dCBhdCBsYXN0IGhpcyBsZWZ0IHdpbmcgd2FzIGNvbXBsZXRlbHkgc2hhdHRlcmVkLCBhbmQgd2l0aCB0aGUgZnVnaXRpdmVzIGhlIHNvdWdodCByZWZ1Z2UgaW4gaGlzIGNhbXAsIGFmdGVyIGxvc2luZyBtYW55IGZyaWVuZHMgYW1pZCBhY3F1YWludGFuY2VzLiBOb3QgYSBmZXcgYWxzbyBvZiB0aG9zZSB3aG8gaGFkIGNvbWUgb3V0IG9mIHRoZSBjaXR5IHRvIHNlZSB0aGUgYmF0dGxlIHdlcmUgdHJvZGRlbiB1bmRlciBmb290IGFuZCBraWxsZWQsIHNvIHRoYXQgaXQgd2FzIHRob3VnaHQgdGhhdCBhbGwgd2FzIG92ZXIgd2l0aCB0aGUgY2l0eSwgCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoYXQgdGhlIHNpZWdlIG9mIE1hcml1cyBpbiBQcmFlbmVzdGUgd2FzIGFsbCBidXQgcmFpc2VkOyBpbmRlZWQgbWFueSBvZiB0aGUgZnVnaXRpdmVzIG1hZGUgdGhlaXIgd2F5IHRoaXRoZXIgYW5kIHVyZ2VkIEx1Y3JldGl1cyBPZmVsbGEsIHdobyBoYWQgYmVlbiBhcHBvaW50ZWQgdG8gY29uZHVjdCB0aGUgc2llZ2UsIHRvIGJyZWFrIGNhbXAgd2l0aCBhbGwgc3BlZWQsIHNpbmNlIFN1bGxhIGhhZCBmYWxsZW4sIGFuZCBSb21lIHdhcyBpbiB0aGUgaGFuZHMgb2YgdGhlIGVuZW15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMganVuY3R1cmUsIFN1bGxhIGFsc28gbWFkZSBoaXMgYXBwZWFyYW5jZSwgYW5kIG9yZGVyaW5nIGhpcyB2YW5ndWFyZCB0byB0YWtlIGZvb2QgYXQgb25jZSwgcHJvY2VlZGVkIHRvIGZvcm0gdGhlbSBpbiBvcmRlciBvZiBiYXR0bGUuIERvbGFiZWxsYSBhbmQgVG9ycXVhdHVzIGVhcm5lc3RseSBiZXNvdWdodCBoaW0gdG8gd2FpdCBhIHdoaWxlLCBhbmQgbm90IHRvIGhhemFyZCB0aGUgc3VwcmVtZSBpc3N1ZSB3aXRoIGhpcyBtZW4gZmF0aWd1ZWQgYW5kIHNwZW50OyBmb3IgdGhleSB3ZXJlIHRvIGNvbnRlbmQgbm90IHdpdGggQ2FyYm8gYW5kIE1hcml1cywgYnV0IHdpdGggU2Ftbml0ZXMgYW5kIEx1Y2FuaWFucywgdGhlIG1vc3QgaW52ZXRlcmF0ZSBlbmVtaWVzIG9mIFJvbWUsIGFuZCB0aGUgbW9zdCB3YXJsaWtlIG9mIHBlb3BsZXMuIEJ1dCBoZSBwdXQgdGhlbSBieSwgYW5kIGNvbW1hbmRlZCB0aGUgdHJ1bXBldHMgdG8gc291bmQgdGhlIGNoYXJnZSwgdGhvdWdoIGl0IHdhcyBub3cgZ2V0dGluZyBvbiB0b3dhcmRzIGZvdXIgbydjbG9jayBpbiB0aGUgYWZ0ZXJub29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzdHJ1Z2dsZSB3aGljaCBmb2xsb3dlZCwgYW5kIG5vIG90aGVyIHdhcyBzbyBmaWVyY2UsIHRoZSByaWdodCB3aW5nLCB3aGVyZSBDcmFzc3VzIHdhcyBwb3N0ZWQsIHdhcyBicmlsbGlhbnRseSBzdWNjZXNzZnVsOyBidXQgdGhlIGxlZnQgd2FzIGhhcmQgcHJlc3NlZCBhbmQgaW4gYSBzb3JyeSBwbGlnaHQsIHdoZW4gU3VsbGEgY2FtZSB0byBpdHMgYXNzaXN0YW5jZSwgbW91bnRlZCBvbiBhIHdoaXRlIGhvcnNlIHRoYXQgd2FzIG1ldHRsZXNvbWUgYW5kIHZlcnkgc3dpZnQuIEJ5IHRoaXMgaG9yc2UgdHdvIG9mIGVuZW15IHJlY29nbmlzZWQgaGltLCBhbmQgcG9pc2VkIHRoZWlyIHNwZWFycyBmb3IgdGhlIGNhc3QuIFN1bGxhIGhpbXNlbGYsIG5vdywgZGlkIG5vdCBub3RpY2UgdGhpcywgYnV0IGhpcyBncm9vbSBkaWQsIGFuZCB3aXRoIGEgY3V0IG9mIHRoZSBsYXNoIHN1Y2NlZWRlZCBpbiBzZW5kaW5nIFN1bGxhJ3MgaG9yc2UgYWxvbmcgc28gdGhhdCB0aGUgc3BlYXItaGVhZHMganVzdCBncmF6ZWQgaXRzIHRhaWwgYW5kIGZpeGVkIHRoZW1zZWx2ZXMgaW4gdGhlIGdyb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIGFsc28gYSBzdG9yeSB0aGF0IFN1bGxhIGhhZCBhIGxpdHRsZSBnb2xkZW4gaW1hZ2Ugb2YgQXBvbGxvIGZyb20gRGVscGhpIHdoaWNoIGhlIGFsd2F5cyBjYXJyaWVkIGluIGhpcyBib3NvbSB3aGVuIGhlIHdhcyBpbiBiYXR0bGUsIGJ1dCB0aGF0IG9uIHRoaXMgb2NjYXNpb24gaGUgdG9vayBpdCBvdXQgYW5kIGtpc3NlZCBpdCBhZmZlY3Rpb25hdGVseSwgc2F5aW5nOiBbbGRxdW8gXU8gUHl0aGlhbiBBcG9sbG8sIG5vdyB0aGF0IHRob3UgaGFzdCBpbiBzbyBtYW55IHN0cnVnZ2xlcyByYWlzZWQgdGhlIGZvcnR1bmF0ZSBDb3JuZWxpdXMgU3VsbGEgdG8gZ2xvcnkgYW5kIGdyZWF0bmVzcywgY2FuIGl0IGJlIHRoYXQgdGhvdSBoYXN0IGJyb3VnaHQgaGltIHRvIHRoZSBnYXRlcyBvZiBoaXMgbmF0aXZlIGNpdHkgb25seSB0byBjYXN0IGhpbSBkb3duIHRoZXJlLCB0byBwZXJpc2ggbW9zdCBzaGFtZWZ1bGx5IHdpdGggaGlzIGZlbGxvdy1jb3VudHJ5bWVuP1tyZHF1byBdIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaW52b2tpbmcgdGhlIGdvZCwgdGhleSBzYXksIGhlIGVudHJlYXRlZCBzb21lIG9mIGhpcyBtZW4sIHRocmVhdGVuZWQgb3RoZXJzLCBhbmQgbGFpZCBoYW5kcyBvbiBvdGhlcnMgc3RpbGw7IGJ1dCBhdCBsYXN0IGhpcyBsZWZ0IHdpbmcgd2FzIGNvbXBsZXRlbHkgc2hhdHRlcmVkLCBhbmQgd2l0aCB0aGUgZnVnaXRpdmVzIGhlIHNvdWdodCByZWZ1Z2UgaW4gaGlzIGNhbXAsIGFmdGVyIGxvc2luZyBtYW55IGZyaWVuZHMgYW1pZCBhY3F1YWludGFuY2VzLiBOb3QgYSBmZXcgYWxzbyBvZiB0aG9zZSB3aG8gaGFkIGNvbWUgb3V0IG9mIHRoZSBjaXR5IHRvIHNlZSB0aGUgYmF0dGxlIHdlcmUgdHJvZGRlbiB1bmRlciBmb290IGFuZCBraWxsZWQsIHNvIHRoYXQgaXQgd2FzIHRob3VnaHQgdGhhdCBhbGwgd2FzIG92ZXIgd2l0aCB0aGUgY2l0eSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZSBzaWVnZSBvZiBNYXJpdXMgaW4gUHJhZW5lc3RlIHdhcyBhbGwgYnV0IHJhaXNlZDsgaW5kZWVkIG1hbnkgb2YgdGhlIGZ1Z2l0aXZlcyBtYWRlIHRoZWlyIHdheSB0aGl0aGVyIGFuZCB1cmdlZCBMdWNyZXRpdXMgT2ZlbGxhLCB3aG8gaGFkIGJlZW4gYXBwb2ludGVkIHRvIGNvbmR1Y3QgdGhlIHNpZWdlLCB0byBicmVhayBjYW1wIHdpdGggYWxsIHNwZWVkLCBzaW5jZSBTdWxsYSBoYWQgZmFsbGVuLCBhbmQgUm9tZSB3YXMgaW4gdGhlIGhhbmRzIG9mIHRoZSBlbmVteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIG5pZ2h0IHdhcyBub3cgZmFyIGFkdmFuY2VkLCBtZXNzZW5nZXJzIGNhbWUgdG8gdGhlIGNhbXAgb2YgU3VsbGEgZnJvbSBDcmFzc3VzLCB0byBmZXRjaCBzdXBwZXIgZm9yIGhpbSBhbmQgaGlzIHNvbGRpZXJzOyBmb3IgYWZ0ZXIgY29ucXVlcmluZyB0aGUgZW5lbXksIGhlIGhhZCBwdXJzdWVkIHRoZW0gaW50byBBbnRlbW5hZSwgYW5kIHdhcyBlbmNhbXBlZCBiZWZvcmUgdGhhdCBjaXR5LiBXaGVuLCB0aGVyZWZvcmUsIFN1bGxhIGxlYXJuZWQgdGhpcywgYW5kIGFsc28gdGhhdCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBlbmVteSBoYWQgYmVlbiBkZXN0cm95ZWQsIGhlIGNhbWUgdG8gQW50ZW1uYWUgYXQgYnJlYWsgb2YgZGF5LiBUaGVyZSB0aHJlZSB0aG91c2FuZCBvZiB0aGUgaW5oYWJpdGFudHMgc2VudCBhIGRlcHV0YXRpb24gdG8gaGltIHRvIHN1ZSBmb3IgbWVyY3ksIGFuZCBIZSBwcm9taXNlZCB0aGVtIHNhZmV0eSBpZiB0aGV5IHdvdWxkIGRvIHNvbWUgbWlzY2hpZWYgdG8gdGhlIHJlc3Qgb2YgaGlzIGVuZW1pZXMgYmVmb3JlIGNvbWluZyB0byBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZXksIHRydXN0aW5nIHRvIGhpcyBwcm9taXNlLCBhdHRhY2tlZCB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlIGluIHRoZSBjaXR5LCBhbmQgbWFueSB3ZXJlIHNsYWluIGJ5IG9uZSBhbm90aGVyJ3MgaGFuZHMuIEhvd2V2ZXIsIHRoZSBzdXJ2aXZvcnMgb2YgYm90aCBwYXJ0aWVzIGFsaWtlLCB0byB0aGUgbnVtYmVyIG9mIHNpeCB0aG91c2FuZCwgd2VyZSBjb2xsZWN0ZWQgYnkgU3VsbGEgaW4gdGhlIGNpcmN1cyBhdCBSb21lLCBhbmQgdGhlbiB0aGUgc2VuYXRlIHdhcyBzdW1tb25lZCBieSBoaW0gdG8gbWVldCBpbiB0aGUgdGVtcGxlIG9mIEJlbGxvbmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qm90aCB0aGUgY2lyY3VzIChGbGFtaW5pdXMpIGFuZCB0aGUgdGVtcGxlIHdlcmUgaW4gdGhlIENhbXB1cyBNYXJ0aXVzLjwvbm90ZT4gYW5kIGF0IG9uZSBhbmQgdGhlIHNhbWUgbW9tZW50IGhlIGhpbXNlbGYgYmVnYW4gdG8gc3BlYWsgaW4gdGhlIHNlbmF0ZSwgYW5kIHRob3NlIGFzc2lnbmVkIHRvIHRoZSB0YXNrIGJlZ2FuIHRvIGN1dCB0byBwaWVjZXMgdGhlIHNpeCB0aG91c2FuZCBpbiB0aGUgY2lyY3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2hyaWVrcyBvZiBzdWNoIGEgbXVsdGl0dWRlLCB3aG8gd2VyZSBiZWluZyBtYXNzYWNyZWQgaW4gYSBuYXJyb3cgc3BhY2UsIGZpbGxlZCB0aGUgYWlyLCBvZiBjb3Vyc2UsIGFuZCB0aGUgc2VuYXRvcnMgd2VyZSBkdW1iZm91bmRlZDsgYnV0IFN1bGxhLCB3aXRoIHRoZSBjYWxtIGFuZCB1bm1vdmVkIGNvdW50ZW5hbmNlIHdpdGggd2hpY2ggaGUgaGFkIGJlZ3VuIHRvIHNwZWFrLCBvcmRlcmVkIHRoZW0gdG8gbGlzdGVuIHRvIGhpcyB3b3JkcyBhbmQgbm90IGNvbmNlcm4gdGhlbXNlbHZlcyB3aXRoIHdoYXQgd2FzIGdvaW5nIG9uIG91dHNpZGUsIGZvciBpdCB3YXMgb25seSB0aGF0IHNvbWUgY3JpbWluYWxzIHdlcmUgYmVpbmcgYWRtb25pc2hlZCwgYnkgaGlzIG9yZGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIG5pZ2h0IHdhcyBub3cgZmFyIGFkdmFuY2VkLCBtZXNzZW5nZXJzIGNhbWUgdG8gdGhlIGNhbXAgb2YgU3VsbGEgZnJvbSBDcmFzc3VzLCB0byBmZXRjaCBzdXBwZXIgZm9yIGhpbSBhbmQgaGlzIHNvbGRpZXJzOyBmb3IgYWZ0ZXIgY29ucXVlcmluZyB0aGUgZW5lbXksIGhlIGhhZCBwdXJzdWVkIHRoZW0gaW50byBBbnRlbW5hZSwgYW5kIHdhcyBlbmNhbXBlZCBiZWZvcmUgdGhhdCBjaXR5LiBXaGVuLCB0aGVyZWZvcmUsIFN1bGxhIGxlYXJuZWQgdGhpcywgYW5kIGFsc28gdGhhdCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBlbmVteSBoYWQgYmVlbiBkZXN0cm95ZWQsIGhlIGNhbWUgdG8gQW50ZW1uYWUgYXQgYnJlYWsgb2YgZGF5LiBUaGVyZSB0aHJlZSB0aG91c2FuZCBvZiB0aGUgaW5oYWJpdGFudHMgc2VudCBhIGRlcHV0YXRpb24gdG8gaGltIHRvIHN1ZSBmb3IgbWVyY3ksIGFuZCBIZSBwcm9taXNlZCB0aGVtIHNhZmV0eSBpZiB0aGV5IHdvdWxkIGRvIHNvbWUgbWlzY2hpZWYgdG8gdGhlIHJlc3Qgb2YgaGlzIGVuZW1pZXMgYmVmb3JlIGNvbWluZyB0byBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZXksIHRydXN0aW5nIHRvIGhpcyBwcm9taXNlLCBhdHRhY2tlZCB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlIGluIHRoZSBjaXR5LCBhbmQgbWFueSB3ZXJlIHNsYWluIGJ5IG9uZSBhbm90aGVyJ3MgaGFuZHMuIEhvd2V2ZXIsIHRoZSBzdXJ2aXZvcnMgb2YgYm90aCBwYXJ0aWVzIGFsaWtlLCB0byB0aGUgbnVtYmVyIG9mIHNpeCB0aG91c2FuZCwgd2VyZSBjb2xsZWN0ZWQgYnkgU3VsbGEgaW4gdGhlIGNpcmN1cyBhdCBSb21lLCBhbmQgdGhlbiB0aGUgc2VuYXRlIHdhcyBzdW1tb25lZCBieSBoaW0gdG8gbWVldCBpbiB0aGUgdGVtcGxlIG9mIEJlbGxvbmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Cb3RoIHRoZSBjaXJjdXMgKEZsYW1pbml1cykgYW5kIHRoZSB0ZW1wbGUgd2VyZSBpbiB0aGUgQ2FtcHVzIE1hcnRpdXMuPC9ub3RlPiBhbmQgYXQgb25lIGFuZCB0aGUgc2FtZSBtb21lbnQgaGUgaGltc2VsZiBiZWdhbiB0byBzcGVhayBpbiB0aGUgc2VuYXRlLCBhbmQgdGhvc2UgYXNzaWduZWQgdG8gdGhlIHRhc2sgYmVnYW4gdG8gY3V0IHRvIHBpZWNlcyB0aGUgc2l4IHRob3VzYW5kIGluIHRoZSBjaXJjdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaHJpZWtzIG9mIHN1Y2ggYSBtdWx0aXR1ZGUsIHdobyB3ZXJlIGJlaW5nIG1hc3NhY3JlZCBpbiBhIG5hcnJvdyBzcGFjZSwgZmlsbGVkIHRoZSBhaXIsIG9mIGNvdXJzZSwgYW5kIHRoZSBzZW5hdG9ycyB3ZXJlIGR1bWJmb3VuZGVkOyBidXQgU3VsbGEsIHdpdGggdGhlIGNhbG0gYW5kIHVubW92ZWQgY291bnRlbmFuY2Ugd2l0aCB3aGljaCBoZSBoYWQgYmVndW4gdG8gc3BlYWssIG9yZGVyZWQgdGhlbSB0byBsaXN0ZW4gdG8gaGlzIHdvcmRzIGFuZCBub3QgY29uY2VybiB0aGVtc2VsdmVzIHdpdGggd2hhdCB3YXMgZ29pbmcgb24gb3V0c2lkZSwgZm9yIGl0IHdhcyBvbmx5IHRoYXQgc29tZSBjcmltaW5hbHMgd2VyZSBiZWluZyBhZG1vbmlzaGVkLCBieSBoaXMgb3JkZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGdhdmUgZXZlbiB0aGUgZHVsbGVzdCBSb21hbiB0byB1bmRlcnN0YW5kIHRoYXQsIGluIHRoZSBtYXR0ZXIgb2YgdHlyYW5ueSwgdGhlcmUgaGFkIGJlZW4gYW4gZXhjaGFuZ2UsIGJ1dCBub3QgYSBkZWxpdmVyYW5jZS4gTWFyaXVzIHRoZSBlbGRlciwgYXQgYW55IHJhdGUsIGhhZCBiZWVuIG5hdHVyYWxseSBoYXJzaCBhdCB0aGUgb3V0c2V0LCBhbmQgcG93ZXIgaGFkIGludGVuc2lmaWVkLCBub3QgYWx0ZXJlZCwgaGlzIGRpc3Bvc2l0aW9uOyBidXQgU3VsbGEgaGFkIHVzZWQgaGlzIGdvb2QgZm9ydHVuZSBtb2RlcmF0ZWx5LCBhdCBmaXJzdCwgYW5kIGxpa2UgYSBzdGF0ZXNtYW4sIGFuZCBoYWQgbGVkIG1lbiB0byBleHBlY3QgaW4gaGltIGEgbGVhZGVyIHdobyB3YXMgYXR0YWNoZWQgdG8gdGhlIGFyaXN0b2NyYWN5LCBhbmQgYXQgdGhlIHNhbWUgdGltZSBoZWxwZnVsIHRvIHRoZSBjb21tb24gcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgZnJvbSBoaXMgeW91dGggdXAgaGUgaGFkIGJlZW4gb2YgYSBtZXJyeSB0ZW1wZXIsIGFuZCBlYXNpbHkgbW92ZWQgdG8gdGVhcnMgb2YgcGl0eS4gTmF0dXJhbGx5LCB0aGVyZWZvcmUsIGhpcyBjb25kdWN0IGZpeGVkIGEgc3RpZ21hIHVwb24gb2ZmaWNlcyBvZiBncmVhdCBwb3dlciwgd2hpY2ggd2VyZSB0aG91Z2h0IHRvIHdvcmsgYSBjaGFuZ2UgaW4gbWVuJ3MgcHJldmlvdXMgY2hhcmFjdGVycywgYW5kIHJlbmRlciB0aGVtIGNhcHJpY2lvdXMsIHZhaW4sIGFuZCBjcnVlbC4gSG93ZXZlciwgd2hldGhlciB0aGlzIGlzIGEgY2hhbmdlIGFuZCByZXZlcnNhbCBvZiBuYXR1cmUsIGJyb3VnaHQgYWJvdXQgYnkgZm9ydHVuZSwgb3IgcmF0aGVyIGEgcmV2ZWxhdGlvbiwgd2hlbiBhIG1hbiBpcyBpbiBhdXRob3JpdHksIG9mIHVuZGVybHlpbmcgYmFzZW5lc3MsIHdlcmUgbWF0dGVyIGZvciBkZXRlcm1pbmF0aW9uIGluIHNvbWUgb3RoZXIgdHJlYXRpc2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZ2F2ZSBldmVuIHRoZSBkdWxsZXN0IFJvbWFuIHRvIHVuZGVyc3RhbmQgdGhhdCwgaW4gdGhlIG1hdHRlciBvZiB0eXJhbm55LCB0aGVyZSBoYWQgYmVlbiBhbiBleGNoYW5nZSwgYnV0IG5vdCBhIGRlbGl2ZXJhbmNlLiBNYXJpdXMgdGhlIGVsZGVyLCBhdCBhbnkgcmF0ZSwgaGFkIGJlZW4gbmF0dXJhbGx5IGhhcnNoIGF0IHRoZSBvdXRzZXQsIGFuZCBwb3dlciBoYWQgaW50ZW5zaWZpZWQsIG5vdCBhbHRlcmVkLCBoaXMgZGlzcG9zaXRpb247IGJ1dCBTdWxsYSBoYWQgdXNlZCBoaXMgZ29vZCBmb3J0dW5lIG1vZGVyYXRlbHksIGF0IGZpcnN0LCBhbmQgbGlrZSBhIHN0YXRlc21hbiwgYW5kIGhhZCBsZWQgbWVuIHRvIGV4cGVjdCBpbiBoaW0gYSBsZWFkZXIgd2hvIHdhcyBhdHRhY2hlZCB0byB0aGUgYXJpc3RvY3JhY3ksIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGhlbHBmdWwgdG8gdGhlIGNvbW1vbiBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBmcm9tIGhpcyB5b3V0aCB1cCBoZSBoYWQgYmVlbiBvZiBhIG1lcnJ5IHRlbXBlciwgYW5kIGVhc2lseSBtb3ZlZCB0byB0ZWFycyBvZiBwaXR5LiBOYXR1cmFsbHksIHRoZXJlZm9yZSwgaGlzIGNvbmR1Y3QgZml4ZWQgYSBzdGlnbWEgdXBvbiBvZmZpY2VzIG9mIGdyZWF0IHBvd2VyLCB3aGljaCB3ZXJlIHRob3VnaHQgdG8gd29yayBhIGNoYW5nZSBpbiBtZW4ncyBwcmV2aW91cyBjaGFyYWN0ZXJzLCBhbmQgcmVuZGVyIHRoZW0gY2FwcmljaW91cywgdmFpbiwgYW5kIGNydWVsLiBIb3dldmVyLCB3aGV0aGVyIHRoaXMgaXMgYSBjaGFuZ2UgYW5kIHJldmVyc2FsIG9mIG5hdHVyZSwgYnJvdWdodCBhYm91dCBieSBmb3J0dW5lLCBvciByYXRoZXIgYSByZXZlbGF0aW9uLCB3aGVuIGEgbWFuIGlzIGluIGF1dGhvcml0eSwgb2YgdW5kZXJseWluZyBiYXNlbmVzcywgd2VyZSBtYXR0ZXIgZm9yIGRldGVybWluYXRpb24gaW4gc29tZSBvdGhlciB0cmVhdGlzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm93IGJ1c2llZCBoaW1zZWxmIHdpdGggc2xhdWdodGVyLCBhbmQgbXVyZGVycyB3aXRob3V0IG51bWJlciBvciBsaW1pdCBmaWxsZWQgdGhlIGNpdHkuIE1hbnksIHRvbywgd2VyZSBraWxsZWQgdG8gZ3JhdGlmeSBwcml2YXRlIGhhdHJlZHMsIGFsdGhvdWdoIHRoZXkgaGFkIG5vIHJlbGF0aW9ucyB3aXRoIFN1bGxhLCBidXQgaGUgZ2F2ZSBoaXMgY29uc2VudCBpbiBvcmRlciB0byBncmF0aWZ5IGhpcyBhZGhlcmVudHMuIEF0IGxhc3Qgb25lIG9mIHRoZSB5b3VuZ2VyIG1lbiwgQ2FpdXMgTWV0ZWxsdXMsIG1hZGUgYm9sZCB0byBhc2sgU3VsbGEgaW4gdGhlIHNlbmF0ZSB3aGF0IGVuZCB0aGVyZSB3YXMgdG8gYmUgb2YgdGhlc2UgZXZpbHMsIGFuZCBob3cgZmFyIGhlIHdvdWxkIHByb2NlZWQgYmVmb3JlIHRoZXkgbWlnaHQgZXhwZWN0IHN1Y2ggZG9pbmdzIHRvIGNlYXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5bbGRxdW8gXVdlIGRvIG5vdCBhc2sgdGhlZSxbcmRxdW8gXSBoZSBzYWlkLCBbbGRxdW8gXXRvIGZyZWUgZnJvbSBwdW5pc2htZW50IHRob3NlIHdob20gdGhvdSBoYXN0IGRldGVybWluZWQgdG8gc2xheSwgYnV0IHRvIGZyZWUgZnJvbSBzdXNwZW5zZSB0aG9zZSB3aG9tIHRob3UgaGFzdCBkZXRlcm1pbmVkIHRvIHNhdmUuW3JkcXVvIF0gQW5kIHdoZW4gU3VsbGEgYW5zd2VyZWQgdGhhdCBoZSBkaWQgbm90IHlldCBrbm93IHdob20gaGUgd291bGQgc3BhcmUsIFtsZHF1byBdV2VsbCwgdGhlbixbcmRxdW8gXSBzYWlkIE1ldGVsbHVzIGluIHJlcGx5LCBbbGRxdW8gXWxldCB1cyBrbm93IHdob20gdGhvdSBpbnRlbmRlc3QgdG8gcHVuaXNoLltyZHF1byBdIFRoaXMgU3VsbGEgc2FpZCBoZSB3b3VsZCBkby4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgaG93ZXZlciwgc2F5IHRoYXQgaXQgd2FzIG5vdCBNZXRlbGx1cywgYnV0IEZ1ZmlkaXVzLCBvbmUgb2YgU3VsbGEncyBmYXduaW5nIGNyZWF0dXJlcywgd2hvIG1hZGUgdGhpcyBsYXN0IHNwZWVjaCB0byBoaW0uIEJlIHRoYXQgYXMgaXQgbWF5LCBTdWxsYSBhdCBvbmNlIHByb3NjcmliZWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGxpc3Qgb2YgdGhlIHBlcnNvbnMgcHJvc2NyaWJlZCB3YXMgcG9zdGVkIGluIHB1YmxpYywgYW5kIHRob3NlIHdob3NlIG5hbWVzIHdlcmUgb24gdGhlIGxpc3QgbWlnaHQgYmUga2lsbGVkIGJ5IGFueW9uZSB3aG8gY2hvc2UgdG8gZG8gaXQuPC9ub3RlPiBlaWdodHkgcGVyc29ucywgd2l0aG91dCBjb21tdW5pY2F0aW5nIHdpdGggYW55IG1hZ2lzdHJhdGU7IGFuZCBpbiBzcGl0ZSBvZiB0aGUgZ2VuZXJhbCBpbmRpZ25hdGlvbiwgYWZ0ZXIgYSBzaW5nbGUgZGF5J3MgaW50ZXJ2YWwsIGhlIHByb3NjcmliZWQgdHdvIGh1bmRyZWQgYW5kIHR3ZW50eSBvdGhlcnMsIGFuZCB0aGVuIG9uIHRoZSB0aGlyZCBkYXksIGFzIG1hbnkgbW9yZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+UmVmZXJyaW5nIHRvIHRoZXNlIG1lYXN1cmVzIGluIGEgcHVibGljIGhhcmFuZ3VlLCBoZSBzYWlkIHRoYXQgaGUgd2FzIHByb3NjcmliaW5nIGFzIG1hbnkgYXMgaGUgY291bGQgcmVtZW1iZXIsIGFuZCB0aG9zZSB3aG8gbm93IGVzY2FwZWQgaGlzIG1lbW9yeSwgaGUgd291bGQgcHJvc2NyaWJlIGF0IGEgZnV0dXJlIHRpbWUuIEhlIGFsc28gcHJvc2NyaWJlZCBhbnkgb25lIHdobyBoYXJib3VyZWQgYW5kIHNhdmVkIGEgcHJvc2NyaWJlZCBwZXJzb24sIG1ha2luZyBkZWF0aCB0aGUgcHVuaXNobWVudCBmb3Igc3VjaCBodW1hbml0eSwgd2l0aG91dCBleGNlcHRpb24gb2YgYnJvdGhlciwgc29uLCBvciBwYXJlbnRzLCBidXQgb2ZmZXJpbmcgYW55IG9uZSB3aG8gc2xldyBhIHByb3NjcmliZWQgcGVyc29uIHR3byB0YWxlbnRzIGFzIGEgcmV3YXJkIGZvciBoaXMgbXVyZGVyb3VzIGRlZWQsIGV2ZW4gdGhvdWdoIGEgc2xhdmUgc2hvdWxkIHNsYXkgaGlzIG1hc3Rlciwgb3IgYSBzb24gaGlzIGZhdGhlci4gQW5kIHdoYXQgc2VlbWVkIHRoZSBncmVhdGVzdCBpbmp1c3RpY2Ugb2YgYWxsLCBoZSB0b29rIGF3YXkgYWxsIGNpdmlsIHJpZ2h0cyBmcm9tIHRoZSBzb25zIGFuZCBncmFuZHNvbnMgb2YgdGhvc2Ugd2hvIGhhZCBiZWVuIHByb3NjcmliZWQsIGFuZCBjb25maXNjYXRlZCB0aGUgcHJvcGVydHkgb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgcHJvc2NyaXB0aW9ucyB3ZXJlIG1hZGUgbm90IG9ubHkgaW4gUm9tZSwgYnV0IGFsc28gaW4gZXZlcnkgY2l0eSBvZiBJdGFseSwgYW5kIG5laXRoZXIgdGVtcGxlIG9mIEdvZCwgbm9yIGhlYXJ0aCBvZiBob3NwaXRhbGl0eSwgbm9yIHBhdGVybmFsIGhvbWUgd2FzIGZyZWUgZnJvbSB0aGUgc3RhaW4gb2YgYmxvb2RzaGVkLCBidXQgaHVzYmFuZHMgd2VyZSBidXRjaGVyZWQgaW4gdGhlIGVtYnJhY2VzIG9mIHRoZWlyIHdlZGRlZCB3aXZlcywgYW5kIHNvbnMgaW4gdGhlIGFybXMgb2YgdGhlaXIgbW90aGVycy4gVGhvc2Ugd2hvIGZlbGwgdmljdGltcyB0byBwb2xpdGljYWwgcmVzZW50bWVudCBhbmQgcHJpdmF0ZSBoYXRyZWQgd2VyZSBhcyBub3RoaW5nIGNvbXBhcmVkIHdpdGggdGhvc2Ugd2hvIHdlcmUgYnV0Y2hlcmVkIGZvciB0aGUgc2FrZSBvZiB0aGVpciBwcm9wZXJ0eSwgbmF5LCBldmVuIHRoZSBleGVjdXRpb25lcnMgd2VyZSBwcm9tcHRlZCB0byBzYXkgdGhhdCBoaXMgZ3JlYXQgaG91c2Uga2lsbGVkIHRoaXMgbWFuLCBoaXMgZ2FyZGVuIHRoYXQgbWFuLCBoaXMgd2FybSBiYXRocyBhbm90aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5RdWludHVzIEF1cmVsaXVzLCBhIHF1aWV0IGFuZCBpbm9mZmVuc2l2ZSBtYW4sIHdobyB0aG91Z2h0IGhpcyBvbmx5IHNoYXJlIGluIHRoZSBnZW5lcmFsIGNhbGFtaXR5IHdhcyB0byBjb25kb2xlIHdpdGggb3RoZXJzIGluIHRoZWlyIG1pc2ZvcnR1bmVzLCBjYW1lIGludG8gdGhlIGZvcnVtIGFuZCByZWFkIHRoZSBsaXN0IG9mIHRoZSBwcm9zY3JpYmVkLCBhbmQgZmluZGluZyBoaXMgb3duIG5hbWUgdGhlcmUsIHNhaWQsIFtsZHF1byBdQWghIHdvZSBpcyBtZSEgbXkgQWxiYW4gZXN0YXRlIGlzIHByb3NlY3V0aW5nIG1lLltyZHF1byBdIEFuZCBoZSBoYWQgbm90IGdvbmUgZmFyIGJlZm9yZSBoZSB3YXMgZGlzcGF0Y2hlZCBieSBzb21lIG9uZSB3aG8gaGFkIGh1bnRlZCBoaW0gZG93bi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm93IGJ1c2llZCBoaW1zZWxmIHdpdGggc2xhdWdodGVyLCBhbmQgbXVyZGVycyB3aXRob3V0IG51bWJlciBvciBsaW1pdCBmaWxsZWQgdGhlIGNpdHkuIE1hbnksIHRvbywgd2VyZSBraWxsZWQgdG8gZ3JhdGlmeSBwcml2YXRlIGhhdHJlZHMsIGFsdGhvdWdoIHRoZXkgaGFkIG5vIHJlbGF0aW9ucyB3aXRoIFN1bGxhLCBidXQgaGUgZ2F2ZSBoaXMgY29uc2VudCBpbiBvcmRlciB0byBncmF0aWZ5IGhpcyBhZGhlcmVudHMuIEF0IGxhc3Qgb25lIG9mIHRoZSB5b3VuZ2VyIG1lbiwgQ2FpdXMgTWV0ZWxsdXMsIG1hZGUgYm9sZCB0byBhc2sgU3VsbGEgaW4gdGhlIHNlbmF0ZSB3aGF0IGVuZCB0aGVyZSB3YXMgdG8gYmUgb2YgdGhlc2UgZXZpbHMsIGFuZCBob3cgZmFyIGhlIHdvdWxkIHByb2NlZWQgYmVmb3JlIHRoZXkgbWlnaHQgZXhwZWN0IHN1Y2ggZG9pbmdzIHRvIGNlYXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPltsZHF1byBdV2UgZG8gbm90IGFzayB0aGVlLFtyZHF1byBdIGhlIHNhaWQsIFtsZHF1byBddG8gZnJlZSBmcm9tIHB1bmlzaG1lbnQgdGhvc2Ugd2hvbSB0aG91IGhhc3QgZGV0ZXJtaW5lZCB0byBzbGF5LCBidXQgdG8gZnJlZSBmcm9tIHN1c3BlbnNlIHRob3NlIHdob20gdGhvdSBoYXN0IGRldGVybWluZWQgdG8gc2F2ZS5bcmRxdW8gXSBBbmQgd2hlbiBTdWxsYSBhbnN3ZXJlZCB0aGF0IGhlIGRpZCBub3QgeWV0IGtub3cgd2hvbSBoZSB3b3VsZCBzcGFyZSwgW2xkcXVvIF1XZWxsLCB0aGVuLFtyZHF1byBdIHNhaWQgTWV0ZWxsdXMgaW4gcmVwbHksIFtsZHF1byBdbGV0IHVzIGtub3cgd2hvbSB0aG91IGludGVuZGVzdCB0byBwdW5pc2guW3JkcXVvIF0gVGhpcyBTdWxsYSBzYWlkIGhlIHdvdWxkIGRvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGl0IHdhcyBub3QgTWV0ZWxsdXMsIGJ1dCBGdWZpZGl1cywgb25lIG9mIFN1bGxhJ3MgZmF3bmluZyBjcmVhdHVyZXMsIHdobyBtYWRlIHRoaXMgbGFzdCBzcGVlY2ggdG8gaGltLiBCZSB0aGF0IGFzIGl0IG1heSwgU3VsbGEgYXQgb25jZSBwcm9zY3JpYmVkPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGxpc3Qgb2YgdGhlIHBlcnNvbnMgcHJvc2NyaWJlZCB3YXMgcG9zdGVkIGluIHB1YmxpYywgYW5kIHRob3NlIHdob3NlIG5hbWVzIHdlcmUgb24gdGhlIGxpc3QgbWlnaHQgYmUga2lsbGVkIGJ5IGFueW9uZSB3aG8gY2hvc2UgdG8gZG8gaXQuPC9ub3RlPiBlaWdodHkgcGVyc29ucywgd2l0aG91dCBjb21tdW5pY2F0aW5nIHdpdGggYW55IG1hZ2lzdHJhdGU7IGFuZCBpbiBzcGl0ZSBvZiB0aGUgZ2VuZXJhbCBpbmRpZ25hdGlvbiwgYWZ0ZXIgYSBzaW5nbGUgZGF5J3MgaW50ZXJ2YWwsIGhlIHByb3NjcmliZWQgdHdvIGh1bmRyZWQgYW5kIHR3ZW50eSBvdGhlcnMsIGFuZCB0aGVuIG9uIHRoZSB0aGlyZCBkYXksIGFzIG1hbnkgbW9yZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlJlZmVycmluZyB0byB0aGVzZSBtZWFzdXJlcyBpbiBhIHB1YmxpYyBoYXJhbmd1ZSwgaGUgc2FpZCB0aGF0IGhlIHdhcyBwcm9zY3JpYmluZyBhcyBtYW55IGFzIGhlIGNvdWxkIHJlbWVtYmVyLCBhbmQgdGhvc2Ugd2hvIG5vdyBlc2NhcGVkIGhpcyBtZW1vcnksIGhlIHdvdWxkIHByb3NjcmliZSBhdCBhIGZ1dHVyZSB0aW1lLiBIZSBhbHNvIHByb3NjcmliZWQgYW55IG9uZSB3aG8gaGFyYm91cmVkIGFuZCBzYXZlZCBhIHByb3NjcmliZWQgcGVyc29uLCBtYWtpbmcgZGVhdGggdGhlIHB1bmlzaG1lbnQgZm9yIHN1Y2ggaHVtYW5pdHksIHdpdGhvdXQgZXhjZXB0aW9uIG9mIGJyb3RoZXIsIHNvbiwgb3IgcGFyZW50cywgYnV0IG9mZmVyaW5nIGFueSBvbmUgd2hvIHNsZXcgYSBwcm9zY3JpYmVkIHBlcnNvbiB0d28gdGFsZW50cyBhcyBhIHJld2FyZCBmb3IgaGlzIG11cmRlcm91cyBkZWVkLCBldmVuIHRob3VnaCBhIHNsYXZlIHNob3VsZCBzbGF5IGhpcyBtYXN0ZXIsIG9yIGEgc29uIGhpcyBmYXRoZXIuIEFuZCB3aGF0IHNlZW1lZCB0aGUgZ3JlYXRlc3QgaW5qdXN0aWNlIG9mIGFsbCwgaGUgdG9vayBhd2F5IGFsbCBjaXZpbCByaWdodHMgZnJvbSB0aGUgc29ucyBhbmQgZ3JhbmRzb25zIG9mIHRob3NlIHdobyBoYWQgYmVlbiBwcm9zY3JpYmVkLCBhbmQgY29uZmlzY2F0ZWQgdGhlIHByb3BlcnR5IG9mIGFsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBwcm9zY3JpcHRpb25zIHdlcmUgbWFkZSBub3Qgb25seSBpbiBSb21lLCBidXQgYWxzbyBpbiBldmVyeSBjaXR5IG9mIEl0YWx5LCBhbmQgbmVpdGhlciB0ZW1wbGUgb2YgR29kLCBub3IgaGVhcnRoIG9mIGhvc3BpdGFsaXR5LCBub3IgcGF0ZXJuYWwgaG9tZSB3YXMgZnJlZSBmcm9tIHRoZSBzdGFpbiBvZiBibG9vZHNoZWQsIGJ1dCBodXNiYW5kcyB3ZXJlIGJ1dGNoZXJlZCBpbiB0aGUgZW1icmFjZXMgb2YgdGhlaXIgd2VkZGVkIHdpdmVzLCBhbmQgc29ucyBpbiB0aGUgYXJtcyBvZiB0aGVpciBtb3RoZXJzLiBUaG9zZSB3aG8gZmVsbCB2aWN0aW1zIHRvIHBvbGl0aWNhbCByZXNlbnRtZW50IGFuZCBwcml2YXRlIGhhdHJlZCB3ZXJlIGFzIG5vdGhpbmcgY29tcGFyZWQgd2l0aCB0aG9zZSB3aG8gd2VyZSBidXRjaGVyZWQgZm9yIHRoZSBzYWtlIG9mIHRoZWlyIHByb3BlcnR5LCBuYXksIGV2ZW4gdGhlIGV4ZWN1dGlvbmVycyB3ZXJlIHByb21wdGVkIHRvIHNheSB0aGF0IGhpcyBncmVhdCBob3VzZSBraWxsZWQgdGhpcyBtYW4sIGhpcyBnYXJkZW4gdGhhdCBtYW4sIGhpcyB3YXJtIGJhdGhzIGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlF1aW50dXMgQXVyZWxpdXMsIGEgcXVpZXQgYW5kIGlub2ZmZW5zaXZlIG1hbiwgd2hvIHRob3VnaHQgaGlzIG9ubHkgc2hhcmUgaW4gdGhlIGdlbmVyYWwgY2FsYW1pdHkgd2FzIHRvIGNvbmRvbGUgd2l0aCBvdGhlcnMgaW4gdGhlaXIgbWlzZm9ydHVuZXMsIGNhbWUgaW50byB0aGUgZm9ydW0gYW5kIHJlYWQgdGhlIGxpc3Qgb2YgdGhlIHByb3NjcmliZWQsIGFuZCBmaW5kaW5nIGhpcyBvd24gbmFtZSB0aGVyZSwgc2FpZCwgW2xkcXVvIF1BaCEgd29lIGlzIG1lISBteSBBbGJhbiBlc3RhdGUgaXMgcHJvc2VjdXRpbmcgbWUuW3JkcXVvIF0gQW5kIGhlIGhhZCBub3QgZ29uZSBmYXIgYmVmb3JlIGhlIHdhcyBkaXNwYXRjaGVkIGJ5IHNvbWUgb25lIHdobyBoYWQgaHVudGVkIGhpbSBkb3duLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgTWFyaXVzIHRoZSB5b3VuZ2VyLCBhdCB0aGUgcG9pbnQgb2YgYmVpbmcgY2FwdHVyZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDEuMTAuOTQiIHZhbGlkPSJ5ZXMiPkFwcGlhbiAoPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPiBpLiA5NCk8L2JpYmw+LCBhcyBoZSB3YXMgdHJ5aW5nIHRvIGVzY2FwZSBmcm9tIFByYWVuZXN0ZSBieSBhbiB1bmRlcmdyb3VuZCBwYXNzYWdlLjwvbm90ZT4gc2xldyBoaW1zZWxmOyBhbmQgU3VsbGEsIGNvbWluZyB0byBQcmFlbmVzdGUsIGF0IGZpcnN0IGdhdmUgZWFjaCBtYW4gdGhlcmUgYSBzZXBhcmF0ZSB0cmlhbCBiZWZvcmUgaGUgZXhlY3V0ZWQgaGltLCBidXQgYWZ0ZXJ3YXJkcywgc2luY2UgdGltZSBmYWlsZWQgaGltLCBnYXRoZXJlZCB0aGVtIGFsbCB0b2dldGhlciBpbiBvbmUgcGxhY2VbbWRhc2ggXXRoZXJlIHdlcmUgdHdlbHZlIHRob3VzYW5kIG9mIHRoZW1bbWRhc2ggXWFuZCBnYXZlIG9yZGVycyB0byBzbGF1Z2h0ZXIgdGhlbSwgaGlzIGhvc3QgYWxvbmUgcmVjZWl2aW5nIGltbXVuaXR5LiBCdXQgdGhpcyBtYW4sIHdpdGggYSBub2JsZSBzcGlyaXQsIHRvbGQgU3VsbGEgdGhhdCBoZSB3b3VsZCBuZXZlciBvd2UgaGlzIHNhZmV0eSB0byB0aGUgc2xheWVyIG9mIGhpcyBjb3VudHJ5LCBhbmQgam9pbmluZyBoaXMgY291bnRyeW1lbiBvZiBoaXMgb3duIGFjY29yZCwgd2FzIGN1dCBkb3duIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgd2hpY2ggTHVjaXVzIENhdGlsaW5lIGRpZCB3YXMgdGhvdWdodCB0byBiZSBtb3N0IG1vbnN0cm91cyBvZiBhbGwuIFRoaXMgbWFuLCBuYW1lbHksIGhhZCBraWxsZWQgaGlzIGJyb3RoZXIgYmVmb3JlIHRoZSBjaXZpbCBzdHJ1Z2dsZSB3YXMgZGVjaWRlZCwgYW5kIG5vdyBhc2tlZCBTdWxsYSB0byBwcm9zY3JpYmUgdGhlIG1hbiwgYXMgb25lIHN0aWxsIGxpdmluZzsgYW5kIGhlIHdhcyBwcm9zY3JpYmVkLiBUaGVuIENhdGlsaW5lLCByZXR1cm5pbmcgdGhpcyBmYXZvdXIgb2YgU3VsbGEncywga2lsbGVkIGEgY2VydGFpbiBNYXJjdXMgTWFyaXVzLCBvbmUgb2YgdGhlIG9wcG9zaXRlIGZhY3Rpb24sIGFuZCBicm91Z2h0IGhpcyBoZWFkIHRvIFN1bGxhIGFzIGhlIHdhcyBzaXR0aW5nIGluIHRoZSBmb3J1bSwgYW5kIHRoZW4gZ29pbmcgdG8gdGhlIGx1c3RyYWwgd2F0ZXIgb2YgQXBvbGxvIHdoaWNoIHdhcyBuZWFyLCB3YXNoZWQgdGhlIGJsb29kIG9mZiBoaXMgaGFuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIE1hcml1cyB0aGUgeW91bmdlciwgYXQgdGhlIHBvaW50IG9mIGJlaW5nIGNhcHR1cmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS4xMC45NCIgdmFsaWQ9InllcyI+QXBwaWFuICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT4gaS4gOTQpPC9iaWJsPiwgYXMgaGUgd2FzIHRyeWluZyB0byBlc2NhcGUgZnJvbSBQcmFlbmVzdGUgYnkgYW4gdW5kZXJncm91bmQgcGFzc2FnZS48L25vdGU+IHNsZXcgaGltc2VsZjsgYW5kIFN1bGxhLCBjb21pbmcgdG8gUHJhZW5lc3RlLCBhdCBmaXJzdCBnYXZlIGVhY2ggbWFuIHRoZXJlIGEgc2VwYXJhdGUgdHJpYWwgYmVmb3JlIGhlIGV4ZWN1dGVkIGhpbSwgYnV0IGFmdGVyd2FyZHMsIHNpbmNlIHRpbWUgZmFpbGVkIGhpbSwgZ2F0aGVyZWQgdGhlbSBhbGwgdG9nZXRoZXIgaW4gb25lIHBsYWNlW21kYXNoIF10aGVyZSB3ZXJlIHR3ZWx2ZSB0aG91c2FuZCBvZiB0aGVtW21kYXNoIF1hbmQgZ2F2ZSBvcmRlcnMgdG8gc2xhdWdodGVyIHRoZW0sIGhpcyBob3N0IGFsb25lIHJlY2VpdmluZyBpbW11bml0eS4gQnV0IHRoaXMgbWFuLCB3aXRoIGEgbm9ibGUgc3Bpcml0LCB0b2xkIFN1bGxhIHRoYXQgaGUgd291bGQgbmV2ZXIgb3dlIGhpcyBzYWZldHkgdG8gdGhlIHNsYXllciBvZiBoaXMgY291bnRyeSwgYW5kIGpvaW5pbmcgaGlzIGNvdW50cnltZW4gb2YgaGlzIG93biBhY2NvcmQsIHdhcyBjdXQgZG93biB3aXRoIHRoZW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAxLjEwLjk0IiB2YWxpZD0ieWVzIj5BcHBpYW4gKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpLiA5NCk8L2JpYmw+LCBhcyBoZSB3YXMgdHJ5aW5nIHRvIGVzY2FwZSBmcm9tIFByYWVuZXN0ZSBieSBhbiB1bmRlcmdyb3VuZCBwYXNzYWdlLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPiBpLiA5NCk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIEx1Y2l1cyBDYXRpbGluZSBkaWQgd2FzIHRob3VnaHQgdG8gYmUgbW9zdCBtb25zdHJvdXMgb2YgYWxsLiBUaGlzIG1hbiwgbmFtZWx5LCBoYWQga2lsbGVkIGhpcyBicm90aGVyIGJlZm9yZSB0aGUgY2l2aWwgc3RydWdnbGUgd2FzIGRlY2lkZWQsIGFuZCBub3cgYXNrZWQgU3VsbGEgdG8gcHJvc2NyaWJlIHRoZSBtYW4sIGFzIG9uZSBzdGlsbCBsaXZpbmc7IGFuZCBoZSB3YXMgcHJvc2NyaWJlZC4gVGhlbiBDYXRpbGluZSwgcmV0dXJuaW5nIHRoaXMgZmF2b3VyIG9mIFN1bGxhJ3MsIGtpbGxlZCBhIGNlcnRhaW4gTWFyY3VzIE1hcml1cywgb25lIG9mIHRoZSBvcHBvc2l0ZSBmYWN0aW9uLCBhbmQgYnJvdWdodCBoaXMgaGVhZCB0byBTdWxsYSBhcyBoZSB3YXMgc2l0dGluZyBpbiB0aGUgZm9ydW0sIGFuZCB0aGVuIGdvaW5nIHRvIHRoZSBsdXN0cmFsIHdhdGVyIG9mIEFwb2xsbyB3aGljaCB3YXMgbmVhciwgd2FzaGVkIHRoZSBibG9vZCBvZmYgaGlzIGhhbmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVzaWRlcyBoaXMgbWFzc2FjcmVzLCB0aGUgcmVzdCBvZiBTdWxsYSdzIHByb2NlZWRpbmdzIGFsc28gZ2F2ZSBvZmZlbmNlLiBGb3IgaGUgcHJvY2xhaW1lZCBoaW1zZWxmIGRpY3RhdG9yLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgxIEIuQy48L25vdGU+IHJldml2aW5nIHRoaXMgcGFydGljdWxhciBvZmZpY2UgYWZ0ZXIgYSBsYXBzZSBvZiBhIGh1bmRyZWQgYW5kIHR3ZW50eSB5ZWFycy4gTW9yZW92ZXIsIGFuIGFjdCB3YXMgcGFzc2VkIGdyYW50aW5nIGhpbSBpbW11bml0eSBmb3IgYWxsIGhpcyBwYXN0IGFjdHMsIGFuZCBmb3IgdGhlIGZ1dHVyZSwgcG93ZXIgb2YgbGlmZSBhbmQgZGVhdGgsIG9mIGNvbmZpc2NhdGlvbiwgb2YgY29sb25pemF0aW9uLCBvZiBmb3VuZGluZyBvciBkZW1vbGlzaGluZyBjaXRpZXMsIGFuZCBvZiB0YWtpbmcgYXdheSBvciBiZXN0b3dpbmcga2luZ2RvbXMgYXQgaGlzIHBsZWFzdXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBjb25kdWN0ZWQgdGhlIHNhbGVzIG9mIGNvbmZpc2NhdGVkIGVzdGF0ZXMgaW4gc3VjaCBhcnJvZ2FudCBhbmQgaW1wZXJpb3VzIGZhc2hpb24sIGZyb20gdGhlIHRyaWJ1bmFsIHdoZXJlIGhlIHNhdCwgdGhhdCBoaXMgZ2lmdHMgZXhjaXRlZCBtb3JlIG9kaXVtIHRoYW4gaGlzIHJvYmJlcmllcy4gSGUgYmVzdG93ZWQgb24gaGFuZHNvbWUgd29tZW4sIG11c2ljaWFucywgY29taWMgYWN0b3JzLCBhbmQgdGhlIGxvd2VzdCBvZiBmcmVlZG1lbiwgdGhlIHRlcnJpdG9yaWVzIG9mIG5hdGlvbnMgYW5kIHRoZSByZXZlbnVlcyBvZiBjaXRpZXMsIGFuZCB3b21lbiB3ZXJlIG1hcnJpZWQgYWdhaW5zdCB0aGVpciB3aWxsIHRvIHNvbWUgb2YgaGlzIGZhdm91cml0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBjYXNlIG9mIFBvbXBleSB0aGUgR3JlYXQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHRpdGxlIG9mIEdyZWF0IHdhcyBmaXJzdCBiZXN0b3dlZCBvbiBoaW0gYnkgU3VsbGEgaGltc2VsZiAoY2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4aWlpLiA0PC9iaWJsPikuPC9ub3RlPiBhdCBsZWFzdCwgd2lzaGluZyB0byBlc3RhYmxpc2ggcmVsYXRpb25zaGlwIHdpdGggaGltLCBoZSBvcmRlcmVkIGhpbSB0byBkaXZvcmNlIHRoZSB3aWZlIGhlIGhhZCwgYW5kIHRoZW4gZ2F2ZSBoaW0gaW4gbWFycmlhZ2UgQWVtaWxpYSwgZGF1Z2h0ZXIgb2YgU2NhdXJ1cyBhbmQgaGlzIG93biB3aWZlIE1ldGVsbGEsIHdob20gaGUgdG9yZSBhd2F5IGZyb20gTWFuaXVzIEdsYWJyaW8gd2hlbiBzaGUgd2FzIHdpdGggY2hpbGQgYnkgaGltOyBhbmQgdGhlIHlvdW5nIHdvbWFuIGRpZWQgaW4gY2hpbGRiaXJ0aCBhdCB0aGUgaG91c2Ugb2YgUG9tcGV5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gOS4yIiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgaXguIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+THVjcmV0aXVzIE9mZWxsYSwgd2hvIGhhZCByZWR1Y2VkIE1hcml1cyBieSBzaWVnZSwgZ2F2ZSBoaW1zZWxmIG91dCBhcyBhIGNhbmRpZGF0ZSBmb3IgdGhlIGNvbnN1bHNoaXAsIGFuZCBTdWxsYSBhdCBmaXJzdCB0cmllZCB0byBzdG9wIGhpbTsgYnV0IHdoZW4gT2ZlbGxhIGNhbWUgZG93biBpbnRvIHRoZSBmb3J1bSB3aXRoIGEgbGFyZ2UgYW5kIGVhZ2VyIGZvbGxvd2luZywgaGUgc2VudCBvbmUgb2YgdGhlIGNlbnR1cmlvbnMgaW4gaGlzIHJldGludWUgYW5kIHNsZXcgaGltLCBoaW1zZWxmIHNpdHRpbmcgb24gYSB0cmlidW5hbCBpbiB0aGUgdGVtcGxlIG9mIENhc3RvciBhbmQgYmVob2xkaW5nIHRoZSBtdXJkZXIgZnJvbSBhYm92ZS4gVGhlIHBlb3BsZSBpbiB0aGUgZm9ydW0gc2VpemVkIHRoZSBjZW50dXJpb24gYW5kIGJyb3VnaHQgaGltIGJlZm9yZSB0aGUgdHJpYnVuYWwsIGJ1dCBTdWxsYSBiYWRlIHRoZW0gY2Vhc2UgdGhlaXIgY2xhbW91ciwgYW5kIHNhaWQgdGhhdCBoZSBoaW1zZWxmIGhhZCBvcmRlcmVkIHRoaXMgZGVlZCwgYW5kIGNvbW1hbmRlZCB0aGVtIHRvIGxldCB0aGUgY2VudHVyaW9uIGdvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGJlc2lkZXMgaGlzIG1hc3NhY3JlcywgdGhlIHJlc3Qgb2YgU3VsbGEncyBwcm9jZWVkaW5ncyBhbHNvIGdhdmUgb2ZmZW5jZS4gRm9yIGhlIHByb2NsYWltZWQgaGltc2VsZiBkaWN0YXRvciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgxIEIuQy48L25vdGU+IHJldml2aW5nIHRoaXMgcGFydGljdWxhciBvZmZpY2UgYWZ0ZXIgYSBsYXBzZSBvZiBhIGh1bmRyZWQgYW5kIHR3ZW50eSB5ZWFycy4gTW9yZW92ZXIsIGFuIGFjdCB3YXMgcGFzc2VkIGdyYW50aW5nIGhpbSBpbW11bml0eSBmb3IgYWxsIGhpcyBwYXN0IGFjdHMsIGFuZCBmb3IgdGhlIGZ1dHVyZSwgcG93ZXIgb2YgbGlmZSBhbmQgZGVhdGgsIG9mIGNvbmZpc2NhdGlvbiwgb2YgY29sb25pemF0aW9uLCBvZiBmb3VuZGluZyBvciBkZW1vbGlzaGluZyBjaXRpZXMsIGFuZCBvZiB0YWtpbmcgYXdheSBvciBiZXN0b3dpbmcga2luZ2RvbXMgYXQgaGlzIHBsZWFzdXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvbmR1Y3RlZCB0aGUgc2FsZXMgb2YgY29uZmlzY2F0ZWQgZXN0YXRlcyBpbiBzdWNoIGFycm9nYW50IGFuZCBpbXBlcmlvdXMgZmFzaGlvbiwgZnJvbSB0aGUgdHJpYnVuYWwgd2hlcmUgaGUgc2F0LCB0aGF0IGhpcyBnaWZ0cyBleGNpdGVkIG1vcmUgb2RpdW0gdGhhbiBoaXMgcm9iYmVyaWVzLiBIZSBiZXN0b3dlZCBvbiBoYW5kc29tZSB3b21lbiwgbXVzaWNpYW5zLCBjb21pYyBhY3RvcnMsIGFuZCB0aGUgbG93ZXN0IG9mIGZyZWVkbWVuLCB0aGUgdGVycml0b3JpZXMgb2YgbmF0aW9ucyBhbmQgdGhlIHJldmVudWVzIG9mIGNpdGllcywgYW5kIHdvbWVuIHdlcmUgbWFycmllZCBhZ2FpbnN0IHRoZWlyIHdpbGwgdG8gc29tZSBvZiBoaXMgZmF2b3VyaXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBjYXNlIG9mIFBvbXBleSB0aGUgR3JlYXQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdGl0bGUgb2YgR3JlYXQgd2FzIGZpcnN0IGJlc3Rvd2VkIG9uIGhpbSBieSBTdWxsYSBoaW1zZWxmIChjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTMuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4aWlpLiA0PC9iaWJsPikuPC9ub3RlPiBhdCBsZWFzdCwgd2lzaGluZyB0byBlc3RhYmxpc2ggcmVsYXRpb25zaGlwIHdpdGggaGltLCBoZSBvcmRlcmVkIGhpbSB0byBkaXZvcmNlIHRoZSB3aWZlIGhlIGhhZCwgYW5kIHRoZW4gZ2F2ZSBoaW0gaW4gbWFycmlhZ2UgQWVtaWxpYSwgZGF1Z2h0ZXIgb2YgU2NhdXJ1cyBhbmQgaGlzIG93biB3aWZlIE1ldGVsbGEsIHdob20gaGUgdG9yZSBhd2F5IGZyb20gTWFuaXVzIEdsYWJyaW8gd2hlbiBzaGUgd2FzIHdpdGggY2hpbGQgYnkgaGltOyBhbmQgdGhlIHlvdW5nIHdvbWFuIGRpZWQgaW4gY2hpbGRiaXJ0aCBhdCB0aGUgaG91c2Ugb2YgUG9tcGV5LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDEzLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGlpaS4gNDwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4aWlpLiA0PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gOS4yIiB2YWxpZD0ieWVzIj5QbHV0YXJjaCdzIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBpeC4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDkuMiIgdmFsaWQ9InllcyI+UGx1dGFyY2gncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgaXguIDIuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgaXguIDIuPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkx1Y3JldGl1cyBPZmVsbGEsIHdobyBoYWQgcmVkdWNlZCBNYXJpdXMgYnkgc2llZ2UsIGdhdmUgaGltc2VsZiBvdXQgYXMgYSBjYW5kaWRhdGUgZm9yIHRoZSBjb25zdWxzaGlwLCBhbmQgU3VsbGEgYXQgZmlyc3QgdHJpZWQgdG8gc3RvcCBoaW07IGJ1dCB3aGVuIE9mZWxsYSBjYW1lIGRvd24gaW50byB0aGUgZm9ydW0gd2l0aCBhIGxhcmdlIGFuZCBlYWdlciBmb2xsb3dpbmcsIGhlIHNlbnQgb25lIG9mIHRoZSBjZW50dXJpb25zIGluIGhpcyByZXRpbnVlIGFuZCBzbGV3IGhpbSwgaGltc2VsZiBzaXR0aW5nIG9uIGEgdHJpYnVuYWwgaW4gdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIGJlaG9sZGluZyB0aGUgbXVyZGVyIGZyb20gYWJvdmUuIFRoZSBwZW9wbGUgaW4gdGhlIGZvcnVtIHNlaXplZCB0aGUgY2VudHVyaW9uIGFuZCBicm91Z2h0IGhpbSBiZWZvcmUgdGhlIHRyaWJ1bmFsLCBidXQgU3VsbGEgYmFkZSB0aGVtIGNlYXNlIHRoZWlyIGNsYW1vdXIsIGFuZCBzYWlkIHRoYXQgaGUgaGltc2VsZiBoYWQgb3JkZXJlZCB0aGlzIGRlZWQsIGFuZCBjb21tYW5kZWQgdGhlbSB0byBsZXQgdGhlIGNlbnR1cmlvbiBnby4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHRyaXVtcGgsIGhvd2V2ZXIsIHdoaWNoIHdhcyBpbXBvc2luZyBmcm9tIHRoZSBjb3N0bGluZXNzIGFuZCByYXJpdHkgb2YgdGhlIHJveWFsIHNwb2lscywgaGFkIGEgZ3JlYXRlciBvcm5hbWVudCBpbiB0aGUgbm9ibGUgc3BlY3RhY2xlIG9mIHRoZSBleGlsZXMuIEZvciB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIGFuZCBpbmZsdWVudGlhbCBvZiB0aGUgY2l0aXplbnMsIGNyb3duZWQgd2l0aCBnYXJsYW5kcywgZm9sbG93ZWQgaW4gdGhlIHByb2Nlc3Npb24sIGNhbGxpbmcgU3VsbGEgdGhlaXIgc2F2aW91ciBhbmQgZmF0aGVyLCBzaW5jZSBpbmRlZWQgaXQgd2FzIHRocm91Z2ggaGltIHRoYXQgdGhleSB3ZXJlIHJldHVybmluZyB0byB0aGVpciBuYXRpdmUgY2l0eSBhbmQgYnJpbmdpbmcgd2l0aCB0aGVtIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gYXQgbGFzdCB0aGUgd2hvbGUgc3BlY3RhY2xlIHdhcyBvdmVyLCBoZSBnYXZlIGFuIGFjY291bnQgb2YgaGlzIGFjaGlldmVtZW50cyBpbiBhIHNwZWVjaCB0byB0aGUgcGVvcGxlLCBlbnVtZXJhdGluZyB0aGUgaW5zdGFuY2VzIG9mIGhpcyBnb29kIGZvcnR1bmUgd2l0aCBubyBsZXNzIGVtcGhhc2lzIHRoYW4gaGlzIGRlZWRzIG9mIHZhbG91ciwgYW5kIGZpbmFsbHksIGluIHZpZXcgb2YgdGhlc2UsIGhlIG9yZGVyZWQgdGhhdCBoZSByZWNlaXZlIHRoZSBzdXJuYW1lIG9mIDxlbXBoPkZvcnR1bmF0ZTwvZW1waD4gKGZvciB0aGlzIGlzIHdoYXQgdGhlIHdvcmQgW2xkcXVvIF1GZWxpeFtyZHF1byBdIG1vc3QgbmVhcmx5IG1lYW5zKS4gQnV0IGhlIGhpbXNlbGYsIGluIHdyaXRpbmcgdG8gdGhlIEdyZWVrcyBvbiBvZmZpY2lhbCBidXNpbmVzcywgc3R5bGVkIGhpbXNlbGYgRXBhcGhyb2RpdHVzLCBvciA8ZW1waD5GYXZvdXJpdGUgb2YgVmVudXM8L2VtcGg+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguIDU8L2JpYmw+IGFuZCBub3RlLjwvbm90ZT4gaGlzIHRyb3BoaWVzIGluIG91ciBjb3VudHJ5IGhpcyBuYW1lIGlzIHRodXMgaW5zY3JpYmVkOiBMdWNpdXMgQ29ybmVsaXVzIFN1bGxhIEVwYXBocm9kaXR1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCB3aGVuIE1ldGVsbGEgYm9yZSBoaW0gdHdpbiBjaGlsZHJlbiwgaGUgbmFtZWQgdGhlIG1hbGUgY2hpbGQgRmF1c3R1cywgYW5kIHRoZSBmZW1hbGUgRmF1c3RhOyBmb3IgdGhlIFJvbWFucyBjYWxsIHdoYXQgaXMgPGVtcGg+YXVzcGljaW91czwvZW1waD4gYW5kIDxlbXBoPmpveWZ1bDwvZW1waD4sIFtsZHF1byBdZmF1c3R1bS5bcmRxdW8gXSBBbmQgdG8gc3VjaCBhbiBleHRlbnQgZGlkIGhlIHB1dCBtb3JlIGNvbmZpZGVuY2UgaW4gaGlzIGdvb2QgZm9ydHVuZXMgdGhhbiBpbiBoaXMgYWNoaWV2ZW1lbnRzLCB0aGF0LCBhbHRob3VnaCBoZSBoYWQgc2xhaW4gZ3JlYXQgbnVtYmVycyBvZiB0aGUgY2l0aXplbnMsIGFuZCBpbnRyb2R1Y2VkIGdyZWF0IGlubm92YXRpb25zIGFuZCBjaGFuZ2VzIGluIHRoZSBnb3Zlcm5tZW50IG9mIHRoZSBjaXR5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlN1bGxhIHJlc3RvcmVkIHRoZSBhbmNpZW50IHBvd2VycyBvZiB0aGUgc2VuYXRlLCBhbmQgcmVkdWNlZCB0aG9zZSBvZiB0aGUgdHJpYnVuYXRlLiBIZSByZXNpZ25lZCB0aGUgZGljdGF0b3JzaGlwIGluIDc5IEIuQy48L25vdGU+IGhlIGxhaWQgZG93biBoaXMgb2ZmaWNlIG9mIGRpY3RhdG9yLCBhbmQgcHV0IHRoZSBjb25zdWxhciBlbGVjdGlvbnMgaW4gdGhlIGhhbmRzIG9mIHRoZSBwZW9wbGU7IGFuZCB3aGVuIHRoZXkgd2VyZSBoZWxkLCBoZSBkaWQgbm90IGdvIG5lYXIgdGhlbSBoaW1zZWxmLCBidXQgd2Fsa2VkIHVwIGFuZCBkb3duIHRoZSBmb3J1bSBsaWtlIGEgcHJpdmF0ZSBtYW4sIGV4cG9zaW5nIGhpcyBwZXJzb24gZnJlZWx5IHRvIGFsbCB3aG8gd2lzaGVkIHRvIGNhbGwgaGltIHRvIGFjY291bnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbnRyYXJ5IHRvIGhpcyB3aXNoZXMsIGEgY2VydGFpbiBib2xkIGVuZW15IG9mIGhpcyB3YXMgbGlrZWx5IHRvIGJlIGNob3NlbiBjb25zdWwsIE1hcmN1cyBMZXBpZHVzLCBub3QgdGhyb3VnaCBoaXMgb3duIGVmZm9ydHMsIGJ1dCBvd2luZyB0byB0aGUgc3VjY2VzcyB3aGljaCBQb21wZXkgaGFkIGluIHNvbGljaXRpbmcgdm90ZXMgZm9yIGhpbSBmcm9tIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiBTdWxsYSBzYXcgUG9tcGV5IGdvaW5nIGF3YXkgZnJvbSB0aGUgcG9sbHMgZGVsaWdodGVkIHdpdGggaGlzIHZpY3RvcnksIGhlIGNhbGxlZCBoaW0gdG8gaGltLCBhbmQgc2FpZDo8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIHh2LiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFtsZHF1byBdV2hhdCBhIGZpbmUgcG9saWN5IHRoaXMgaXMgb2YgdGhpbmUsIHlvdW5nIG1hbiwgdG8gZWxlY3QgTGVwaWR1cyBpbiBwcmVmZXJlbmNlIHRvIENhdHVsdXMsIHRoZSBtb3N0IHVuc3RhYmxlIGluc3RlYWQgb2YgdGhlIGJlc3Qgb2YgbWVuISBOb3csIHN1cmVseSwgaXQgaXMgaGlnaCB0aW1lIGZvciB0aGVlIHRvIGJlIHdhdGNoZnVsLCBhZnRlciBzdHJlbmd0aGVuaW5nIHRoaW5lIGFkdmVyc2FyeSBhZ2FpbnN0IHRoeXNlbGYuW3JkcXVvIF0gQW5kIGluIHNheWluZyB0aGlzLCBTdWxsYSB3YXMgc29tZXRoaW5nIG9mIGEgcHJvcGhldDsgZm9yIExlcGlkdXMgc3BlZWRpbHkgd2F4ZWQgaW5zb2xlbnQgYW5kIHdlbnQgdG8gd2FyIHdpdGggUG9tcGV5IGFuZCBoaXMgcGFydHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T24gdGhlIGRlYXRoIG9mIFN1bGxhLCBpbiA3OCBCLkMuLCBMZXBpZHVzIGhlYWRlZCBhbiBpbnN1cnJlY3Rpb24sIGFuZCBhdHRlbXB0ZWQgdG8gb3ZlcnRocm93IHRoZSBjb25zdGl0dXRpb24uIFBvbXBleSBhZGhlcmVkIHRvIHRoZSBzZW5hdG9yaWFsIHBhcnR5IChDZi48YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeHZpLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHRyaXVtcGgsIGhvd2V2ZXIsIHdoaWNoIHdhcyBpbXBvc2luZyBmcm9tIHRoZSBjb3N0bGluZXNzIGFuZCByYXJpdHkgb2YgdGhlIHJveWFsIHNwb2lscywgaGFkIGEgZ3JlYXRlciBvcm5hbWVudCBpbiB0aGUgbm9ibGUgc3BlY3RhY2xlIG9mIHRoZSBleGlsZXMuIEZvciB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIGFuZCBpbmZsdWVudGlhbCBvZiB0aGUgY2l0aXplbnMsIGNyb3duZWQgd2l0aCBnYXJsYW5kcywgZm9sbG93ZWQgaW4gdGhlIHByb2Nlc3Npb24sIGNhbGxpbmcgU3VsbGEgdGhlaXIgc2F2aW91ciBhbmQgZmF0aGVyLCBzaW5jZSBpbmRlZWQgaXQgd2FzIHRocm91Z2ggaGltIHRoYXQgdGhleSB3ZXJlIHJldHVybmluZyB0byB0aGVpciBuYXRpdmUgY2l0eSBhbmQgYnJpbmdpbmcgd2l0aCB0aGVtIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGF0IGxhc3QgdGhlIHdob2xlIHNwZWN0YWNsZSB3YXMgb3ZlciwgaGUgZ2F2ZSBhbiBhY2NvdW50IG9mIGhpcyBhY2hpZXZlbWVudHMgaW4gYSBzcGVlY2ggdG8gdGhlIHBlb3BsZSwgZW51bWVyYXRpbmcgdGhlIGluc3RhbmNlcyBvZiBoaXMgZ29vZCBmb3J0dW5lIHdpdGggbm8gbGVzcyBlbXBoYXNpcyB0aGFuIGhpcyBkZWVkcyBvZiB2YWxvdXIsIGFuZCBmaW5hbGx5LCBpbiB2aWV3IG9mIHRoZXNlLCBoZSBvcmRlcmVkIHRoYXQgaGUgcmVjZWl2ZSB0aGUgc3VybmFtZSBvZiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkZvcnR1bmF0ZTwvZW1waD4gKGZvciB0aGlzIGlzIHdoYXQgdGhlIHdvcmQgW2xkcXVvIF1GZWxpeFtyZHF1byBdIG1vc3QgbmVhcmx5IG1lYW5zKS4gQnV0IGhlIGhpbXNlbGYsIGluIHdyaXRpbmcgdG8gdGhlIEdyZWVrcyBvbiBvZmZpY2lhbCBidXNpbmVzcywgc3R5bGVkIGhpbXNlbGYgRXBhcGhyb2RpdHVzLCBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkZhdm91cml0ZSBvZiBWZW51czwvZW1waD4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTkuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguIDU8L2JpYmw+IGFuZCBub3RlLjwvbm90ZT4gaGlzIHRyb3BoaWVzIGluIG91ciBjb3VudHJ5IGhpcyBuYW1lIGlzIHRodXMgaW5zY3JpYmVkOiBMdWNpdXMgQ29ybmVsaXVzIFN1bGxhIEVwYXBocm9kaXR1cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxOS41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpeC4gNTwvYmlibD4gYW5kIG5vdGUuPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMgdGhpcywgd2hlbiBNZXRlbGxhIGJvcmUgaGltIHR3aW4gY2hpbGRyZW4sIGhlIG5hbWVkIHRoZSBtYWxlIGNoaWxkIEZhdXN0dXMsIGFuZCB0aGUgZmVtYWxlIEZhdXN0YTsgZm9yIHRoZSBSb21hbnMgY2FsbCB3aGF0IGlzIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YXVzcGljaW91czwvZW1waD4gYW5kIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+am95ZnVsPC9lbXBoPiwgW2xkcXVvIF1mYXVzdHVtLltyZHF1byBdIEFuZCB0byBzdWNoIGFuIGV4dGVudCBkaWQgaGUgcHV0IG1vcmUgY29uZmlkZW5jZSBpbiBoaXMgZ29vZCBmb3J0dW5lcyB0aGFuIGluIGhpcyBhY2hpZXZlbWVudHMsIHRoYXQsIGFsdGhvdWdoIGhlIGhhZCBzbGFpbiBncmVhdCBudW1iZXJzIG9mIHRoZSBjaXRpemVucywgYW5kIGludHJvZHVjZWQgZ3JlYXQgaW5ub3ZhdGlvbnMgYW5kIGNoYW5nZXMgaW4gdGhlIGdvdmVybm1lbnQgb2YgdGhlIGNpdHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdWxsYSByZXN0b3JlZCB0aGUgYW5jaWVudCBwb3dlcnMgb2YgdGhlIHNlbmF0ZSwgYW5kIHJlZHVjZWQgdGhvc2Ugb2YgdGhlIHRyaWJ1bmF0ZS4gSGUgcmVzaWduZWQgdGhlIGRpY3RhdG9yc2hpcCBpbiA3OSBCLkMuPC9ub3RlPiBoZSBsYWlkIGRvd24gaGlzIG9mZmljZSBvZiBkaWN0YXRvciwgYW5kIHB1dCB0aGUgY29uc3VsYXIgZWxlY3Rpb25zIGluIHRoZSBoYW5kcyBvZiB0aGUgcGVvcGxlOyBhbmQgd2hlbiB0aGV5IHdlcmUgaGVsZCwgaGUgZGlkIG5vdCBnbyBuZWFyIHRoZW0gaGltc2VsZiwgYnV0IHdhbGtlZCB1cCBhbmQgZG93biB0aGUgZm9ydW0gbGlrZSBhIHByaXZhdGUgbWFuLCBleHBvc2luZyBoaXMgcGVyc29uIGZyZWVseSB0byBhbGwgd2hvIHdpc2hlZCB0byBjYWxsIGhpbSB0byBhY2NvdW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNvbnRyYXJ5IHRvIGhpcyB3aXNoZXMsIGEgY2VydGFpbiBib2xkIGVuZW15IG9mIGhpcyB3YXMgbGlrZWx5IHRvIGJlIGNob3NlbiBjb25zdWwsIE1hcmN1cyBMZXBpZHVzLCBub3QgdGhyb3VnaCBoaXMgb3duIGVmZm9ydHMsIGJ1dCBvd2luZyB0byB0aGUgc3VjY2VzcyB3aGljaCBQb21wZXkgaGFkIGluIHNvbGljaXRpbmcgdm90ZXMgZm9yIGhpbSBmcm9tIHRoZSBwZW9wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiBTdWxsYSBzYXcgUG9tcGV5IGdvaW5nIGF3YXkgZnJvbSB0aGUgcG9sbHMgZGVsaWdodGVkIHdpdGggaGlzIHZpY3RvcnksIGhlIGNhbGxlZCBoaW0gdG8gaGltLCBhbmQgc2FpZDo8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh2LiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFtsZHF1byBdV2hhdCBhIGZpbmUgcG9saWN5IHRoaXMgaXMgb2YgdGhpbmUsIHlvdW5nIG1hbiwgdG8gZWxlY3QgTGVwaWR1cyBpbiBwcmVmZXJlbmNlIHRvIENhdHVsdXMsIHRoZSBtb3N0IHVuc3RhYmxlIGluc3RlYWQgb2YgdGhlIGJlc3Qgb2YgbWVuISBOb3csIHN1cmVseSwgaXQgaXMgaGlnaCB0aW1lIGZvciB0aGVlIHRvIGJlIHdhdGNoZnVsLCBhZnRlciBzdHJlbmd0aGVuaW5nIHRoaW5lIGFkdmVyc2FyeSBhZ2FpbnN0IHRoeXNlbGYuW3JkcXVvIF0gQW5kIGluIHNheWluZyB0aGlzLCBTdWxsYSB3YXMgc29tZXRoaW5nIG9mIGEgcHJvcGhldDsgZm9yIExlcGlkdXMgc3BlZWRpbHkgd2F4ZWQgaW5zb2xlbnQgYW5kIHdlbnQgdG8gd2FyIHdpdGggUG9tcGV5IGFuZCBoaXMgcGFydHkuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4di4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh2LiAxIGYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbiB0aGUgZGVhdGggb2YgU3VsbGEsIGluIDc4IEIuQy4sIExlcGlkdXMgaGVhZGVkIGFuIGluc3VycmVjdGlvbiwgYW5kIGF0dGVtcHRlZCB0byBvdmVydGhyb3cgdGhlIGNvbnN0aXR1dGlvbi4gUG9tcGV5IGFkaGVyZWQgdG8gdGhlIHNlbmF0b3JpYWwgcGFydHkgKENmLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE2IiB2YWxpZD0ieWVzIiAvPgogICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHZpLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYiIHZhbGlkPSJ5ZXMiIC8+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4dmkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gY29uc2VjcmF0aW5nIHRoZSB0ZW50aCBvZiBhbGwgaGlzIHN1YnN0YW5jZSB0byBIZXJjdWxlcywgU3VsbGEgZmVhc3RlZCB0aGUgcGVvcGxlIHN1bXB0dW91c2x5LCBhbmQgaGlzIHByb3Zpc2lvbiBmb3IgdGhlbSB3YXMgc28gbXVjaCBiZXlvbmQgd2hhdCB3YXMgbmVlZGVkIHRoYXQgZ3JlYXQgcXVhbnRpdGllcyBvZiBtZWF0cyB3ZXJlIGRhaWx5IGNhc3QgaW50byB0aGUgcml2ZXIsIGFuZCB3aW5lIHdhcyBkcnVuayB0aGF0IHdhcyBmb3J0eSB5ZWFycyBvbGQgYW5kIHVwd2FyZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtaWRzdCBvZiB0aGUgZmVhc3RpbmcsIHdoaWNoIGxhc3RlZCBtYW55IGRheXMsIE1ldGVsbGEgbGF5IHNpY2sgYW5kIGR5aW5nLiBBbmQgc2luY2UgdGhlIHByaWVzdHMgZm9yYmFkZSBTdWxsYSB0byBnbyBuZWFyIGhlciwgb3IgdG8gaGF2ZSBoaXMgaG91c2UgcG9sbHV0ZWQgYnkgaGVyIGZ1bmVyYWwsIGhlIHNlbnQgaGVyIGEgYmlsbCBvZiBkaXZvcmNlLCBhbmQgb3JkZXJlZCBoZXIgdG8gYmUgY2FycmllZCB0byBhbm90aGVyIGhvdXNlIHdoaWxlIHNoZSB3YXMgc3RpbGwgbGl2aW5nLiBJbiBkb2luZyB0aGlzLCBoZSBvYnNlcnZlZCB0aGUgc3RyaWN0IGxldHRlciBvZiB0aGUgbGF3LCBvdXQgb2Ygc3VwZXJzdGl0aW9uOyBidXQgdGhlIGxhdyBsaW1pdGluZyB0aGUgZXhwZW5zZSBvZiB0aGUgZnVuZXJhbCwgd2hpY2ggbGF3IGhlIGhhZCBoaW1zZWxmIGludHJvZHVjZWQsIGhlIHRyYW5zZ3Jlc3NlZCwgYW5kIHNwYXJlZCBubyBvdXRsYXlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0cmFuc2dyZXNzZWQgYWxzbyBoaXMgb3duIG9yZGluYW5jZXMgbGltaXRpbmcgdGhlIGNvc3Qgb2YgYmFucXVldHMsIHdoZW4gaGUgdHJpZWQgdG8gYXNzdWFnZSBoaXMgc29ycm93IGJ5IGRyaW5raW5nIHBhcnRpZXMgYW5kIGNvbnZpdmlhbCBiYW5xdWV0cywgd2hlcmUgZXh0cmF2YWdhbmNlIGFuZCByaWJhbGRyeSBwcmV2YWlsZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gY29uc2VjcmF0aW5nIHRoZSB0ZW50aCBvZiBhbGwgaGlzIHN1YnN0YW5jZSB0byBIZXJjdWxlcywgU3VsbGEgZmVhc3RlZCB0aGUgcGVvcGxlIHN1bXB0dW91c2x5LCBhbmQgaGlzIHByb3Zpc2lvbiBmb3IgdGhlbSB3YXMgc28gbXVjaCBiZXlvbmQgd2hhdCB3YXMgbmVlZGVkIHRoYXQgZ3JlYXQgcXVhbnRpdGllcyBvZiBtZWF0cyB3ZXJlIGRhaWx5IGNhc3QgaW50byB0aGUgcml2ZXIsIGFuZCB3aW5lIHdhcyBkcnVuayB0aGF0IHdhcyBmb3J0eSB5ZWFycyBvbGQgYW5kIHVwd2FyZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtaWRzdCBvZiB0aGUgZmVhc3RpbmcsIHdoaWNoIGxhc3RlZCBtYW55IGRheXMsIE1ldGVsbGEgbGF5IHNpY2sgYW5kIGR5aW5nLiBBbmQgc2luY2UgdGhlIHByaWVzdHMgZm9yYmFkZSBTdWxsYSB0byBnbyBuZWFyIGhlciwgb3IgdG8gaGF2ZSBoaXMgaG91c2UgcG9sbHV0ZWQgYnkgaGVyIGZ1bmVyYWwsIGhlIHNlbnQgaGVyIGEgYmlsbCBvZiBkaXZvcmNlLCBhbmQgb3JkZXJlZCBoZXIgdG8gYmUgY2FycmllZCB0byBhbm90aGVyIGhvdXNlIHdoaWxlIHNoZSB3YXMgc3RpbGwgbGl2aW5nLiBJbiBkb2luZyB0aGlzLCBoZSBvYnNlcnZlZCB0aGUgc3RyaWN0IGxldHRlciBvZiB0aGUgbGF3LCBvdXQgb2Ygc3VwZXJzdGl0aW9uOyBidXQgdGhlIGxhdyBsaW1pdGluZyB0aGUgZXhwZW5zZSBvZiB0aGUgZnVuZXJhbCwgd2hpY2ggbGF3IGhlIGhhZCBoaW1zZWxmIGludHJvZHVjZWQsIGhlIHRyYW5zZ3Jlc3NlZCwgYW5kIHNwYXJlZCBubyBvdXRsYXlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRyYW5zZ3Jlc3NlZCBhbHNvIGhpcyBvd24gb3JkaW5hbmNlcyBsaW1pdGluZyB0aGUgY29zdCBvZiBiYW5xdWV0cywgd2hlbiBoZSB0cmllZCB0byBhc3N1YWdlIGhpcyBzb3Jyb3cgYnkgZHJpbmtpbmcgcGFydGllcyBhbmQgY29udml2aWFsIGJhbnF1ZXRzLCB3aGVyZSBleHRyYXZhZ2FuY2UgYW5kIHJpYmFsZHJ5IHByZXZhaWxlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BIGZldyBtb250aHMgYWZ0ZXJ3YXJkcyB0aGVyZSB3YXMgYSBnbGFkaWF0b3JpYWwgc3BlY3RhY2xlLCBhbmQgc2luY2UgdGhlIHBsYWNlcyBmb3IgbWVuIGFuZCB3b21lbiBpbiB0aGUgdGhlYXRyZSB3ZXJlIG5vdCB5ZXQgc2VwYXJhdGVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgdGhleSB3ZXJlIGluIHRoZSB0aW1lIG9mIEF1Z3VzdHVzLjwvbm90ZT4gYnV0IHN0aWxsIHByb21pc2N1b3VzLCBpdCBjaGFuY2VkIHRoYXQgdGhlcmUgd2FzIHNpdHRpbmcgbmVhciBTdWxsYSBhIHdvbWFuIG9mIGdyZWF0IGJlYXV0eSBhbmQgc3BsZW5kaWQgYmlydGg7IAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+c2hlIHdhcyBhIGRhdWdodGVyIG9mIE1lc3NhbGEsIGEgc2lzdGVyIG9mIEhvcnRlbnNpdXMgdGhlIG9yYXRvciwgYW5kIGhlciBuYW1lIHdhcyBWYWxlcmlhLCBhbmQgaXQgc28gaGFwcGVuZWQgdGhhdCBzaGUgaGFkIHJlY2VudGx5IGJlZW4gZGl2b3JjZWQgZnJvbSBoZXIgaHVzYmFuZC4gQXMgc2hlIHBhc3NlZCBhbG9uZyBiZWhpbmQgU3VsbGEsIHNoZSByZXN0ZWQgaGVyIGhhbmQgdXBvbiBoaW0sIHBsdWNrZWQgb2ZmIGEgYml0IG9mIG5hcCBmcm9tIGhpcyBtYW50bGUsIGFuZCB0aGVuIHByb2NlZWRlZCB0byBoZXIgb3duIHBsYWNlLiBXaGVuIFN1bGxhIGxvb2tlZCBhdCBoZXIgaW4gYXN0b25pc2htZW50LCBzaGUgc2FpZDogW2xkcXVvIF1JdCdzIG5vdGhpbmcgb2YgaW1wb3J0YW5jZSwgRGljdGF0b3IsIGJ1dCBJIHRvbyB3aXNoIHRvIHBhcnRha2UgYSBsaXR0bGUgaW4gdGh5IGZlbGljaXR5LltyZHF1byBdIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhIHdhcyBub3QgZGlzcGxlYXNlZCBhdCBoZWFyaW5nIHRoaXMsIG5heSwgaXQgd2FzIGF0IG9uY2UgY2xlYXIgdGhhdCBoaXMgZmFuY3kgd2FzIHRpY2tsZWQsIGZvciBoZSBzZWNyZXRseSBzZW50IGFuZCBhc2tlZCBoZXIgbmFtZSwgYW5kIGlucXVpcmVkIGFib3V0IGhlciBmYW1pbHkgYW5kIGhpc3RvcnkuIFRoZW4gZm9sbG93ZWQgbXV0dWFsIGdsYW5jZXMsIGNvbnRpbnVhbCB0dXJuaW5ncyBvZiB0aGUgZmFjZSB0byBnYXplLCBpbnRlcmNoYW5nZXMgb2Ygc21pbGVzLCBhbmQgYXQgbGFzdCBhIGZvcm1hbCBjb21wYWN0IG9mIG1hcnJpYWdlLiBBbGwgdGhpcyB3YXMgcGVyaGFwcyBibGFtZWxlc3Mgb24gaGVyIHBhcnQsIGJ1dCBTdWxsYSwgZXZlbiB0aG91Z2ggc2hlIHdhcyBldmVyIHNvIGNoYXN0ZSBhbmQgcmVwdXRhYmxlLCBkaWQgbm90IG1hcnJ5IGhlciBmcm9tIGFueSBjaGFzdGUgYW5kIHdvcnRoeSBtb3RpdmU7IGhlIHdhcyBsZWQgYXdheSwgbGlrZSBhIHlvdW5nIG1hbiwgYnkgbG9va3MgYW5kIGxhbmd1aXNoaW5nIGFpcnMsIHRocm91Z2ggd2hpY2ggdGhlIG1vc3QgZGlzZ3JhY2VmdWwgYW5kIHNoYW1lbGVzcyBwYXNzaW9ucyBhcmUgbmF0dXJhbGx5IGV4Y2l0ZWQuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcyB0aGV5IHdlcmUgaW4gdGhlIHRpbWUgb2YgQXVndXN0dXMuPC9ub3RlPiBidXQgc3RpbGwgcHJvbWlzY3VvdXMsIGl0IGNoYW5jZWQgdGhhdCB0aGVyZSB3YXMgc2l0dGluZyBuZWFyIFN1bGxhIGEgd29tYW4gb2YgZ3JlYXQgYmVhdXR5IGFuZCBzcGxlbmRpZCBiaXJ0aDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNoZSB3YXMgYSBkYXVnaHRlciBvZiBNZXNzYWxhLCBhIHNpc3RlciBvZiBIb3J0ZW5zaXVzIHRoZSBvcmF0b3IsIGFuZCBoZXIgbmFtZSB3YXMgVmFsZXJpYSwgYW5kIGl0IHNvIGhhcHBlbmVkIHRoYXQgc2hlIGhhZCByZWNlbnRseSBiZWVuIGRpdm9yY2VkIGZyb20gaGVyIGh1c2JhbmQuIEFzIHNoZSBwYXNzZWQgYWxvbmcgYmVoaW5kIFN1bGxhLCBzaGUgcmVzdGVkIGhlciBoYW5kIHVwb24gaGltLCBwbHVja2VkIG9mZiBhIGJpdCBvZiBuYXAgZnJvbSBoaXMgbWFudGxlLCBhbmQgdGhlbiBwcm9jZWVkZWQgdG8gaGVyIG93biBwbGFjZS4gV2hlbiBTdWxsYSBsb29rZWQgYXQgaGVyIGluIGFzdG9uaXNobWVudCwgc2hlIHNhaWQ6IFtsZHF1byBdSXQncyBub3RoaW5nIG9mIGltcG9ydGFuY2UsIERpY3RhdG9yLCBidXQgSSB0b28gd2lzaCB0byBwYXJ0YWtlIGEgbGl0dGxlIGluIHRoeSBmZWxpY2l0eS5bcmRxdW8gXSAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1bGxhIHdhcyBub3QgZGlzcGxlYXNlZCBhdCBoZWFyaW5nIHRoaXMsIG5heSwgaXQgd2FzIGF0IG9uY2UgY2xlYXIgdGhhdCBoaXMgZmFuY3kgd2FzIHRpY2tsZWQsIGZvciBoZSBzZWNyZXRseSBzZW50IGFuZCBhc2tlZCBoZXIgbmFtZSwgYW5kIGlucXVpcmVkIGFib3V0IGhlciBmYW1pbHkgYW5kIGhpc3RvcnkuIFRoZW4gZm9sbG93ZWQgbXV0dWFsIGdsYW5jZXMsIGNvbnRpbnVhbCB0dXJuaW5ncyBvZiB0aGUgZmFjZSB0byBnYXplLCBpbnRlcmNoYW5nZXMgb2Ygc21pbGVzLCBhbmQgYXQgbGFzdCBhIGZvcm1hbCBjb21wYWN0IG9mIG1hcnJpYWdlLiBBbGwgdGhpcyB3YXMgcGVyaGFwcyBibGFtZWxlc3Mgb24gaGVyIHBhcnQsIGJ1dCBTdWxsYSwgZXZlbiB0aG91Z2ggc2hlIHdhcyBldmVyIHNvIGNoYXN0ZSBhbmQgcmVwdXRhYmxlLCBkaWQgbm90IG1hcnJ5IGhlciBmcm9tIGFueSBjaGFzdGUgYW5kIHdvcnRoeSBtb3RpdmU7IGhlIHdhcyBsZWQgYXdheSwgbGlrZSBhIHlvdW5nIG1hbiwgYnkgbG9va3MgYW5kIGxhbmd1aXNoaW5nIGFpcnMsIHRocm91Z2ggd2hpY2ggdGhlIG1vc3QgZGlzZ3JhY2VmdWwgYW5kIHNoYW1lbGVzcyBwYXNzaW9ucyBhcmUgbmF0dXJhbGx5IGV4Y2l0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGV2ZW4gdGhvdWdoIGhlIGhhZCBzdWNoIGEgd2lmZSBhdCBob21lLCBoZSBjb25zb3J0ZWQgd2l0aCBhY3RyZXNzZXMsIGhhcnBpc3RzLCBhbmQgdGhlYXRyaWNhbCBwZW9wbGUsIGRyaW5raW5nIHdpdGggdGhlbSBvbiBjb3VjaGVzIGFsbCBkYXkgbG9uZy4gRm9yIHRoZXNlIHdlcmUgdGhlIG1lbiB3aG8gaGFkIG1vc3QgaW5mbHVlbmNlIHdpdGggaGltIG5vdzogUm9zY2l1cyB0aGUgY29tZWRpYW4sIFNvcmV4IHRoZSBhcmNobWltZSwgYW5kIE1ldHJvYml1cyB0aGUgaW1wZXJzb25hdG9yIG9mIHdvbWVuLCBmb3Igd2hvbSwgdGhvdWdoIHBhc3QgaGlzIHByaW1lLCBoZSBjb250aW51ZWQgdXAgdG8gdGhlIGxhc3QgdG8gYmUgcGFzc2lvbmF0ZWx5IGZvbmQsIGFuZCBtYWRlIG5vIGRlbmlhbCBvZiBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDIuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIG1vZGUgb2YgbGlmZSBoZSBhZ2dyYXZhdGVkIGEgZGlzZWFzZSB3aGljaCB3YXMgaW5zaWduaWZpY2FudCBpbiBpdHMgYmVnaW5uaW5ncywgYW5kIGZvciBhIGxvbmcgdGltZSBoZSBrbmV3IG5vdCB0aGF0IGhpcyBib3dlbHMgd2VyZSB1bGNlcmF0ZWQuIFRoaXMgZGlzZWFzZSBjb3JydXB0ZWQgaGlzIHdob2xlIGZsZXNoIGFsc28sIGFuZCBjb252ZXJ0ZWQgaXQgaW50byB3b3Jtcywgc28gdGhhdCBhbHRob3VnaCBtYW55IHdlcmUgZW1wbG95ZWQgZGF5IGFuZCBuaWdodCBpbiByZW1vdmluZyB0aGVtLCB3aGF0IHRoZXkgdG9vayBhd2F5IHdhcyBhcyBub3RoaW5nIGNvbXBhcmVkIHdpdGggdGhlIGluY3JlYXNlIHVwb24gaGltLCBidXQgYWxsIGhpcyBjbG90aGluZywgYmF0aHMsIGhhbmQtYmFzaW5zLCBhbmQgZm9vZCwgd2VyZSBpbmZlY3RlZCB3aXRoIHRoYXQgZmx1eCBvZiBjb3JydXB0aW9uLCBzbyB2aW9sZW50IHdhcyBpdHMgZGlzY2hhcmdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaGUgaW1tZXJzZWQgaGltc2VsZiBtYW55IHRpbWVzIGEtZGF5IGluIHdhdGVyIHRvIGNsZWFuc2UgYW5kIHNjb3VyIGhpcyBwZXJzb24uIEJ1dCBpdCB3YXMgb2Ygbm8gdXNlOyBmb3IgdGhlIGNoYW5nZSBnYWluZWQgdXBvbiBoaW0gcmFwaWRseSwgYW5kIHRoZSBzd2FybSBvZiB2ZXJtaW4gZGVmaWVkIGFsbCBwdXJpZmljYXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgZXZlbiB0aG91Z2ggaGUgaGFkIHN1Y2ggYSB3aWZlIGF0IGhvbWUsIGhlIGNvbnNvcnRlZCB3aXRoIGFjdHJlc3NlcywgaGFycGlzdHMsIGFuZCB0aGVhdHJpY2FsIHBlb3BsZSwgZHJpbmtpbmcgd2l0aCB0aGVtIG9uIGNvdWNoZXMgYWxsIGRheSBsb25nLiBGb3IgdGhlc2Ugd2VyZSB0aGUgbWVuIHdobyBoYWQgbW9zdCBpbmZsdWVuY2Ugd2l0aCBoaW0gbm93OiBSb3NjaXVzIHRoZSBjb21lZGlhbiwgU29yZXggdGhlIGFyY2htaW1lLCBhbmQgTWV0cm9iaXVzIHRoZSBpbXBlcnNvbmF0b3Igb2Ygd29tZW4sIGZvciB3aG9tLCB0aG91Z2ggcGFzdCBoaXMgcHJpbWUsIGhlIGNvbnRpbnVlZCB1cCB0byB0aGUgbGFzdCB0byBiZSBwYXNzaW9uYXRlbHkgZm9uZCwgYW5kIG1hZGUgbm8gZGVuaWFsIG9mIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDIuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDIuNCIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgbW9kZSBvZiBsaWZlIGhlIGFnZ3JhdmF0ZWQgYSBkaXNlYXNlIHdoaWNoIHdhcyBpbnNpZ25pZmljYW50IGluIGl0cyBiZWdpbm5pbmdzLCBhbmQgZm9yIGEgbG9uZyB0aW1lIGhlIGtuZXcgbm90IHRoYXQgaGlzIGJvd2VscyB3ZXJlIHVsY2VyYXRlZC4gVGhpcyBkaXNlYXNlIGNvcnJ1cHRlZCBoaXMgd2hvbGUgZmxlc2ggYWxzbywgYW5kIGNvbnZlcnRlZCBpdCBpbnRvIHdvcm1zLCBzbyB0aGF0IGFsdGhvdWdoIG1hbnkgd2VyZSBlbXBsb3llZCBkYXkgYW5kIG5pZ2h0IGluIHJlbW92aW5nIHRoZW0sIHdoYXQgdGhleSB0b29rIGF3YXkgd2FzIGFzIG5vdGhpbmcgY29tcGFyZWQgd2l0aCB0aGUgaW5jcmVhc2UgdXBvbiBoaW0sIGJ1dCBhbGwgaGlzIGNsb3RoaW5nLCBiYXRocywgaGFuZC1iYXNpbnMsIGFuZCBmb29kLCB3ZXJlIGluZmVjdGVkIHdpdGggdGhhdCBmbHV4IG9mIGNvcnJ1cHRpb24sIHNvIHZpb2xlbnQgd2FzIGl0cyBkaXNjaGFyZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSBpbW1lcnNlZCBoaW1zZWxmIG1hbnkgdGltZXMgYS1kYXkgaW4gd2F0ZXIgdG8gY2xlYW5zZSBhbmQgc2NvdXIgaGlzIHBlcnNvbi4gQnV0IGl0IHdhcyBvZiBubyB1c2U7IGZvciB0aGUgY2hhbmdlIGdhaW5lZCB1cG9uIGhpbSByYXBpZGx5LCBhbmQgdGhlIHN3YXJtIG9mIHZlcm1pbiBkZWZpZWQgYWxsIHB1cmlmaWNhdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XZSBhcmUgdG9sZCB0aGF0IGluIHZlcnkgYW5jaWVudCB0aW1lcywgQWNhc3R1cyB0aGUgc29uIG9mIFBlbGlhcyB3YXMgdGh1cyBlYXRlbiBvZiB3b3JtcyBhbmQgZGllZCwgYW5kIGluIGxhdGVyIHRpbWVzLCBBbGNtYW4gdGhlIGx5cmljIHBvZXQsIFBoZXJlY3lkZXMgdGhlIHRoZW9sb2dpYW4sIENhbGxpc3RoZW5lcyBvZiBPbHludGh1cywgd2hvIHdhcyBrZXB0IGNsb3NlbHkgaW1wcmlzb25lZCwgYXMgYWxzbyBNdWNpdXMgdGhlIGp1cmlzdDsgYW5kIGlmIG1lbnRpb24gaXMgdG8gYmUgbWFkZSBvZiBtZW4gd2hvIGhhZCBubyBleGNlbGxlbmNlIHRvIGNvbW1lbmQgdGhlbSwgYnV0IHdlcmUgbm90b3Jpb3VzIGZvciBvdGhlciByZWFzb25zLCBpdCBpcyBzYWlkIHRoYXQgdGhlIHJ1bmF3YXkgc2xhdmUgd2hvIGhlYWRlZCB0aGUgc2VydmlsZSB3YXIgaW4gU2ljaWx5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qi5DLiAxMzQ7IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHh4aXYuIDIsIDIzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBFdW51cyBieSBuYW1lLCB3YXMgdGFrZW4gdG8gUm9tZSBhZnRlciBoaXMgY2FwdHVyZSwgYW5kIGRpZWQgdGhlcmUgb2YgdGhpcyBkaXNlYXNlLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qi5DLiAxMzQ7IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHh4aXYuIDIsIDIzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBFdW51cyBieSBuYW1lLCB3YXMgdGFrZW4gdG8gUm9tZSBhZnRlciBoaXMgY2FwdHVyZSwgYW5kIGRpZWQgdGhlcmUgb2YgdGhpcyBkaXNlYXNlLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHh4aXYuIDIsIDIzLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm90IG9ubHkgZm9yZXNhdyBoaXMgb3duIGRlYXRoLCBidXQgbWF5IGJlIHNhaWQgdG8gaGF2ZSB3cml0dGVuIGFib3V0IGl0IGFsc28uIEZvciBoZSBzdG9wcGVkIHdyaXRpbmcgdGhlIHR3ZW50eS1zZWNvbmQgYm9vayBvZiBoaXMgTWVtb2lycyB0d28gZGF5cyBiZWZvcmUgaGUgZGllZCwgYW5kIGhlIHRoZXJlIHNheXMgdGhhdCB0aGUgQ2hhbGRhZWFucyBmb3JldG9sZCBoaW0gdGhhdCwgYWZ0ZXIgYW4gaG9ub3VyYWJsZSBsaWZlLCBoZSB3YXMgdG8gZW5kIGhpcyBkYXlzIGF0IHRoZSBoZWlnaHQgb2YgaGlzIGdvb2QgZm9ydHVuZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IGhpcyBzb24sIHdobyBoYWQgZGllZCBhIGxpdHRsZSB3aGlsZSBiZWZvcmUgTWV0ZWxsYSwgYXBwZWFyZWQgdG8gaGltIGluIGhpcyBkcmVhbXMsIGNsYWQgaW4gbWVhbiBhdHRpcmUsIGFuZCBiZXNvdWdodCBoaXMgZmF0aGVyIHRvIHB1dCBhbiBlbmQgdG8gYW54aW91cyB0aG91Z2h0cywgYW5kIGNvbWUgd2l0aCBoaW0gdG8gaGlzIG1vdGhlciBNZXRlbGxhLCB0aGVyZSB0byBsaXZlIGluIHBlYWNlIGFuZCBxdWlldG5lc3Mgd2l0aCBoZXIuIEhvd2V2ZXIsIGhlIGRpZCBub3QgY2Vhc2UgdG8gdHJhbnNhY3QgdGhlIHB1YmxpYyBidXNpbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCB0ZW4gZGF5cyBiZWZvcmUgaGUgZGllZCwgaGUgcmVjb25jaWxlZCB0aGUgb3Bwb3NpbmcgZmFjdGlvbnMgaW4gRGljYWVhcmNoaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZWFybGllciBuYW1lIGZvciBQdXRlb2xpLjwvbm90ZT4gYW5kIHByZXNjcmliZWQgYSBjb2RlIG9mIGxhd3MgZm9yIHRoZWlyIGNvbmR1Y3Qgb2YgdGhlIGNpdHkncyBnb3Zlcm5tZW50OyBhbmQgb25lIGRheSBiZWZvcmUgaGUgZGllZCwgb24gbGVhcm5pbmcgdGhhdCB0aGUgbWFnaXN0cmF0ZSB0aGVyZSwgR3Jhbml1cywgcmVmdXNlZCB0byBwYXkgYSBkZWJ0IGhlIG93ZWQgdGhlIHB1YmxpYyB0cmVhc3VyeSwgaW4gZXhwZWN0YXRpb24gb2YgaGlzIGRlYXRoLCBoZSBzdW1tb25lZCBoaW0gdG8gaGlzIHJvb20sIHN0YXRpb25lZCBoaXMgc2VydmFudHMgYWJvdXQgaGltLCBhbmQgb3JkZXJlZCB0aGVtIHRvIHN0cmFuZ2xlIGhpbTsgYnV0IHdpdGggdGhlIHN0cmFpbiB3aGljaCBoZSBwdXQgdXBvbiBoaXMgdm9pY2UgYW5kIGJvZHksIGhlIHJ1cHR1cmVkIGhpcyBhYnNjZXNzIGFuZCBsb3N0IGEgZ3JlYXQgcXVhbnRpdHkgb2YgYmxvb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgaGlzIHN0cmVuZ3RoIGZhaWxlZCwgYW5kIGFmdGVyIGEgbmlnaHQgb2Ygd3JldGNoZWRuZXNzLCBoZSBkaWVkLCBsZWF2aW5nIHR3byB5b3VuZyBjaGlsZHJlbiBieSBNZXRlbGxhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzQuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHhpdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gRm9yIGl0IHdhcyBhZnRlciBoaXMgZGVhdGggdGhhdCBWYWxlcmlhIGdhdmUgYmlydGggdG8gYSBkYXVnaHRlciwgd2hvIHdhcyBjYWxsZWQgUG9zdHVtYSwgdGhpcyBiZWluZyB0aGUgbmFtZSB3aGljaCB0aGUgUm9tYW5zIGdpdmUgdG8gY2hpbGRyZW4gd2hvIGFyZSBib3JuIGFmdGVyIHRoZWlyIGZhdGhlcidzIGRlYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VsbGEgbm90IG9ubHkgZm9yZXNhdyBoaXMgb3duIGRlYXRoLCBidXQgbWF5IGJlIHNhaWQgdG8gaGF2ZSB3cml0dGVuIGFib3V0IGl0IGFsc28uIEZvciBoZSBzdG9wcGVkIHdyaXRpbmcgdGhlIHR3ZW50eS1zZWNvbmQgYm9vayBvZiBoaXMgTWVtb2lycyB0d28gZGF5cyBiZWZvcmUgaGUgZGllZCwgYW5kIGhlIHRoZXJlIHNheXMgdGhhdCB0aGUgQ2hhbGRhZWFucyBmb3JldG9sZCBoaW0gdGhhdCwgYWZ0ZXIgYW4gaG9ub3VyYWJsZSBsaWZlLCBoZSB3YXMgdG8gZW5kIGhpcyBkYXlzIGF0IHRoZSBoZWlnaHQgb2YgaGlzIGdvb2QgZm9ydHVuZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IGhpcyBzb24sIHdobyBoYWQgZGllZCBhIGxpdHRsZSB3aGlsZSBiZWZvcmUgTWV0ZWxsYSwgYXBwZWFyZWQgdG8gaGltIGluIGhpcyBkcmVhbXMsIGNsYWQgaW4gbWVhbiBhdHRpcmUsIGFuZCBiZXNvdWdodCBoaXMgZmF0aGVyIHRvIHB1dCBhbiBlbmQgdG8gYW54aW91cyB0aG91Z2h0cywgYW5kIGNvbWUgd2l0aCBoaW0gdG8gaGlzIG1vdGhlciBNZXRlbGxhLCB0aGVyZSB0byBsaXZlIGluIHBlYWNlIGFuZCBxdWlldG5lc3Mgd2l0aCBoZXIuIEhvd2V2ZXIsIGhlIGRpZCBub3QgY2Vhc2UgdG8gdHJhbnNhY3QgdGhlIHB1YmxpYyBidXNpbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGVuIGRheXMgYmVmb3JlIGhlIGRpZWQsIGhlIHJlY29uY2lsZWQgdGhlIG9wcG9zaW5nIGZhY3Rpb25zIGluIERpY2FlYXJjaGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZWFybGllciBuYW1lIGZvciBQdXRlb2xpLjwvbm90ZT4gYW5kIHByZXNjcmliZWQgYSBjb2RlIG9mIGxhd3MgZm9yIHRoZWlyIGNvbmR1Y3Qgb2YgdGhlIGNpdHkncyBnb3Zlcm5tZW50OyBhbmQgb25lIGRheSBiZWZvcmUgaGUgZGllZCwgb24gbGVhcm5pbmcgdGhhdCB0aGUgbWFnaXN0cmF0ZSB0aGVyZSwgR3Jhbml1cywgcmVmdXNlZCB0byBwYXkgYSBkZWJ0IGhlIG93ZWQgdGhlIHB1YmxpYyB0cmVhc3VyeSwgaW4gZXhwZWN0YXRpb24gb2YgaGlzIGRlYXRoLCBoZSBzdW1tb25lZCBoaW0gdG8gaGlzIHJvb20sIHN0YXRpb25lZCBoaXMgc2VydmFudHMgYWJvdXQgaGltLCBhbmQgb3JkZXJlZCB0aGVtIHRvIHN0cmFuZ2xlIGhpbTsgYnV0IHdpdGggdGhlIHN0cmFpbiB3aGljaCBoZSBwdXQgdXBvbiBoaXMgdm9pY2UgYW5kIGJvZHksIGhlIHJ1cHR1cmVkIGhpcyBhYnNjZXNzIGFuZCBsb3N0IGEgZ3JlYXQgcXVhbnRpdHkgb2YgYmxvb2QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgaGlzIHN0cmVuZ3RoIGZhaWxlZCwgYW5kIGFmdGVyIGEgbmlnaHQgb2Ygd3JldGNoZWRuZXNzLCBoZSBkaWVkLCBsZWF2aW5nIHR3byB5b3VuZyBjaGlsZHJlbiBieSBNZXRlbGxhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDM0LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4aXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEZvciBpdCB3YXMgYWZ0ZXIgaGlzIGRlYXRoIHRoYXQgVmFsZXJpYSBnYXZlIGJpcnRoIHRvIGEgZGF1Z2h0ZXIsIHdobyB3YXMgY2FsbGVkIFBvc3R1bWEsIHRoaXMgYmVpbmcgdGhlIG5hbWUgd2hpY2ggdGhlIFJvbWFucyBnaXZlIHRvIGNoaWxkcmVuIHdobyBhcmUgYm9ybiBhZnRlciB0aGVpciBmYXRoZXIncyBkZWF0aC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMzQuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHhpdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgbm93IGpvaW5lZCB0aGVtc2VsdmVzIGVhZ2VybHkgdG8gTGVwaWR1cywgcHVycG9zaW5nIHRvIGRlcHJpdmUgU3VsbGEncyBib2R5IG9mIHRoZSB1c3VhbCBidXJpYWwgaG9ub3VyczsgYnV0IFBvbXBleSwgYWx0aG91Z2ggb2ZmZW5kZWQgYXQgU3VsbGEgKGZvciBoZSBhbG9uZSwgb2YgYWxsIGhpcyBmcmllbmRzLCB3YXMgbm90IG1lbnRpb25lZCBpbiBoaXMgd2lsbCksIGRpdmVydGVkIHNvbWUgZnJvbSB0aGVpciBwdXJwb3NlIGJ5IGhpcyBraW5kbHkgaW5mbHVlbmNlIGFuZCBlbnRyZWF0aWVzLCBhbmQgb3RoZXJzIGJ5IGhpcyB0aHJlYXRzLCBhbmQgdGhlbiBjb252ZXllZCB0aGUgYm9keSB0byBSb21lLCBhbmQgc2VjdXJlZCBmb3IgaXQgYW4gaG9ub3VyYWJsZSBhcyB3ZWxsIGFzIGEgc2FmZSBpbnRlcm1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgdGhlIHdvbWVuIGNvbnRyaWJ1dGVkIHN1Y2ggYSB2YXN0IHF1YW50aXR5IG9mIHNwaWNlcyBmb3IgaXQsIHRoYXQsIGFwYXJ0IGZyb20gd2hhdCB3YXMgY2FycmllZCBvbiB0d28gaHVuZHJlZCBhbmQgdGVuIGxpdHRlcnMsIGEgbGFyZ2UgaW1hZ2Ugb2YgU3VsbGEgaGltc2VsZiwgYW5kIGFub3RoZXIgaW1hZ2Ugb2YgYSB2aWN0b3IsIHdhcyBtb3VsZGVkIG91dCBvZiBjb3N0bHkgZnJhbmtpbmNlbnNlIGFuZCBjaW5uYW1vbi4gVGhlIGRheSB3YXMgY2xvdWR5IGluICB0aGUgbW9ybmluZywgYW5kIHRoZSBleHBlY3RhdGlvbiB3YXMgdGhhdCBpdCB3b3VsZCByYWluLCBidXQgYXQgbGFzdCwgYXQgdGhlIG5pbnRoIGhvdXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SS5lLiBpbiB0aGUgbWlkZGxlIG9mIHRoZSBhZnRlcm5vb24uPC9ub3RlPiB0aGUgY29ycHNlIHdhcyBwbGFjZWQgdXBvbiB0aGUgZnVuZXJhbCBweXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGEgc3Ryb25nIHdpbmQgc21vdGUgdGhlIHB5cmUsIGFuZCByb3VzZWQgYSBtaWdodHkgZmxhbWUsIGFuZCB0aGVyZSB3YXMganVzdCB0aW1lIHRvIGNvbGxlY3QgdGhlIGJvbmVzIGZvciBidXJpYWwsIHdoaWxlIHRoZSBweXJlIHdhcyBzbW91bGRlcmluZyBhbmQgdGhlIGZpcmUgd2FzIGdvaW5nIG91dCwgd2hlbiBhIGhlYXZ5IHJhaW4gYmVnYW4gdG8gZmFsbCwgd2hpY2ggY29udGludWVkIHRpbGwgbmlnaHQuIFRoZXJlZm9yZSBoaXMgZ29vZCBmb3J0dW5lIHdvdWxkIHNlZW0gdG8gaGF2ZSBsYXN0ZWQgdG8gdGhlIHZlcnkgZW5kLCBhbmQgdGFrZW4gcGFydCBpbiBoaXMgZnVuZXJhbCByaXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIGhpcyBtb251bWVudCBzdGFuZHMgaW4gdGhlIENhbXB1cyBNYXJ0aXVzLCBhbmQgdGhlIGluc2NyaXB0aW9uIG9uIGl0LCB0aGV5IHNheSwgaXMgb25lIHdoaWNoIGhlIHdyb3RlIGZvciBpdCBoaW1zZWxmLCBhbmQgdGhlIHN1YnN0YW5jZSBvZiBpdCBpcywgdGhhdCBubyBmcmllbmQgZXZlciBzdXJwYXNzZWQgaGltIGluIGtpbmRuZXNzLCBhbmQgbm8gZW5lbXkgaW4gbWlzY2hpZWYuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBub3cgam9pbmVkIHRoZW1zZWx2ZXMgZWFnZXJseSB0byBMZXBpZHVzLCBwdXJwb3NpbmcgdG8gZGVwcml2ZSBTdWxsYSdzIGJvZHkgb2YgdGhlIHVzdWFsIGJ1cmlhbCBob25vdXJzOyBidXQgUG9tcGV5LCBhbHRob3VnaCBvZmZlbmRlZCBhdCBTdWxsYSAoZm9yIGhlIGFsb25lLCBvZiBhbGwgaGlzIGZyaWVuZHMsIHdhcyBub3QgbWVudGlvbmVkIGluIGhpcyB3aWxsKSwgZGl2ZXJ0ZWQgc29tZSBmcm9tIHRoZWlyIHB1cnBvc2UgYnkgaGlzIGtpbmRseSBpbmZsdWVuY2UgYW5kIGVudHJlYXRpZXMsIGFuZCBvdGhlcnMgYnkgaGlzIHRocmVhdHMsIGFuZCB0aGVuIGNvbnZleWVkIHRoZSBib2R5IHRvIFJvbWUsIGFuZCBzZWN1cmVkIGZvciBpdCBhbiBob25vdXJhYmxlIGFzIHdlbGwgYXMgYSBzYWZlIGludGVybWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgdGhlIHdvbWVuIGNvbnRyaWJ1dGVkIHN1Y2ggYSB2YXN0IHF1YW50aXR5IG9mIHNwaWNlcyBmb3IgaXQsIHRoYXQsIGFwYXJ0IGZyb20gd2hhdCB3YXMgY2FycmllZCBvbiB0d28gaHVuZHJlZCBhbmQgdGVuIGxpdHRlcnMsIGEgbGFyZ2UgaW1hZ2Ugb2YgU3VsbGEgaGltc2VsZiwgYW5kIGFub3RoZXIgaW1hZ2Ugb2YgYSB2aWN0b3IsIHdhcyBtb3VsZGVkIG91dCBvZiBjb3N0bHkgZnJhbmtpbmNlbnNlIGFuZCBjaW5uYW1vbi4gVGhlIGRheSB3YXMgY2xvdWR5IGluICB0aGUgbW9ybmluZywgYW5kIHRoZSBleHBlY3RhdGlvbiB3YXMgdGhhdCBpdCB3b3VsZCByYWluLCBidXQgYXQgbGFzdCwgYXQgdGhlIG5pbnRoIGhvdXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JLmUuIGluIHRoZSBtaWRkbGUgb2YgdGhlIGFmdGVybm9vbi48L25vdGU+IHRoZSBjb3Jwc2Ugd2FzIHBsYWNlZCB1cG9uIHRoZSBmdW5lcmFsIHB5cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBzdHJvbmcgd2luZCBzbW90ZSB0aGUgcHlyZSwgYW5kIHJvdXNlZCBhIG1pZ2h0eSBmbGFtZSwgYW5kIHRoZXJlIHdhcyBqdXN0IHRpbWUgdG8gY29sbGVjdCB0aGUgYm9uZXMgZm9yIGJ1cmlhbCwgd2hpbGUgdGhlIHB5cmUgd2FzIHNtb3VsZGVyaW5nIGFuZCB0aGUgZmlyZSB3YXMgZ29pbmcgb3V0LCB3aGVuIGEgaGVhdnkgcmFpbiBiZWdhbiB0byBmYWxsLCB3aGljaCBjb250aW51ZWQgdGlsbCBuaWdodC4gVGhlcmVmb3JlIGhpcyBnb29kIGZvcnR1bmUgd291bGQgc2VlbSB0byBoYXZlIGxhc3RlZCB0byB0aGUgdmVyeSBlbmQsIGFuZCB0YWtlbiBwYXJ0IGluIGhpcyBmdW5lcmFsIHJpdGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
