var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgYWxzbyBxdWl0ZSBhIHN0cmlwbGluZywgZm9yIGhlIHdhcyBuaW5lIHllYXJzIHlvdW5nZXIgdGhhbiBoaXMgYnJvdGhlciwgYW5kIFRpYmVyaXVzIHdhcyBub3QgeWV0IHRoaXJ0eSB3aGVuIGhlIGRpZWQuIEJ1dCBhcyB0aW1lIHdlbnQgb24gaGUgZ3JhZHVhbGx5IHNob3dlZCBhIGRpc3Bvc2l0aW9uIHRoYXQgd2FzIGF2ZXJzZSB0byBpZGxlbmVzcywgZWZmZW1pbmFjeSwgd2luZS1iaWJiaW5nLCBhbmQgbW9uZXktbWFraW5nOyBhbmQgYnkgcHJlcGFyaW5nIGhpcyBvcmF0b3J5IHRvIHdhZnQgaGltIGFzIG9uIHN3aWZ0IHBpbmlvbnMgdG8gcHVibGljIGxpZmUsIGhlIG1hZGUgaXQgY2xlYXIgdGhhdCBoZSB3YXMgbm90IGdvaW5nIHRvIHJlbWFpbiBxdWlldDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiBkZWZlbmRpbmcgVmV0dGl1cywgYSBmcmllbmQgb2YgaGlzIHdobyB3YXMgdW5kZXIgcHJvc2VjdXRpb24sIGhlIGhhZCB0aGUgcGVvcGxlIGFib3V0IGhpbSBpbnNwaXJlZCBhbmQgZnJhbnRpYyB3aXRoIHN5bXBhdGhldGljIGRlbGlnaHQsIGFuZCBtYWRlIHRoZSBvdGhlciBvcmF0b3JzIGFwcGVhciB0byBiZSBubyBiZXR0ZXIgdGhhbiBjaGlsZHJlbi4gT25jZSBtb3JlLCB0aGVyZWZvcmUsIHRoZSBub2JsZXMgYmVnYW4gdG8gYmUgYWxhcm1lZCwgYW5kIHRoZXJlIHdhcyBtdWNoIHRhbGsgYW1vbmcgdGhlbSBhYm91dCBub3QgcGVybWl0dGluZyBDYWl1cyB0byBiZSBtYWRlIHRyaWJ1bmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGFjY2lkZW50LCBob3dldmVyLCBpdCBoYXBwZW5lZCB0aGF0IHRoZSBsb3QgZmVsbCBvbiBoaW0gdG8gZ28gdG8gU2FyZGluaWEgYXMgcXVhZXN0b3IgZm9yIE9yZXN0ZXMgdGhlIGNvbnN1bC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMjYgQi5DLjwvbm90ZT4gVGhpcyBnYXZlIHBsZWFzdXJlIHRvIGhpcyBlbmVtaWVzLCBhbmQgZGlkIG5vdCBhbm5veSBDYWl1cy4gRm9yIGhlIHdhcyBmb25kIG9mIHdhciwgYW5kIHF1aXRlIGFzIHdlbGwgdHJhaW5lZCBmb3IgbWlsaXRhcnkgc2VydmljZSBhcyBmb3IgcGxlYWRpbmcgaW4gdGhlIGNvdXJ0cy4gTW9yZW92ZXIsIGhlIHN0aWxsIHNocmFuayBmcm9tIHB1YmxpYyBsaWZlIGFuZCB0aGUgcm9zdHJhLCBidXQgd2FzIHVuYWJsZSB0byByZXNpc3QgdGhlIGNhbGxzIHRvIHRoaXMgY2FyZWVyIHdoaWNoIGNhbWUgZnJvbSB0aGUgcGVvcGxlIGFuZCBoaXMgZnJpZW5kcy4gSGUgd2FzIHRoZXJlZm9yZSBhbHRvZ2V0aGVyIHNhdGlzZmllZCB3aXRoIHRoaXMgb3Bwb3J0dW5pdHkgb2YgbGVhdmluZyB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBhIHN0cm9uZyBvcGluaW9uIHByZXZhaWxzIHRoYXQgaGUgd2FzIGEgZGVtYWdvZ3VlIHB1cmUgYW5kIHNpbXBsZSwgYW5kIGZhciBtb3JlIGVhZ2VyIHRoYW4gVGliZXJpdXMgdG8gd2luIHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZS4gQnV0IHRoaXMgaXMgbm90IHRoZSB0cnV0aDsgbmF5LCBpdCB3b3VsZCBhcHBlYXIgdGhhdCBoZSB3YXMgbGVkIGJ5IGEgY2VydGFpbiBuZWNlc3NpdHkgcmF0aGVyIHRoYW4gYnkgaGlzIG93biBjaG9pY2UgdG8gZW5nYWdlIGluIHB1YmxpYyBtYXR0ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgQ2ljZXJvIHRoZSBvcmF0b3IgYWxzbyByZWxhdGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMS4yNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZSBkaXYuPC90aXRsZT4gMS4gMjY8L2JpYmw+LCA1Njwvbm90ZT4gdGhhdCBDYWl1cyBkZWNsaW5lZCBhbGwgb2ZmaWNlIGFuZCBoYWQgY2hvc2VuIHRvIGxpdmUgYSBxdWlldCBsaWZlLCBidXQgdGhhdCBoaXMgYnJvdGhlciBhcHBlYXJlZCB0byBoaW0gaW4gYSBkcmVhbSBhbmQgYWRkcmVzc2VkIGhpbSwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgcHJheSwgZG9zdCB0aG91IGhlc2l0YXRlLCBDYWl1cz8gVGhlcmUgaXMgbm8gZXNjYXBlOyBvbmUgbGlmZSBpcyBmYXRlZCBmb3IgdXMgYm90aCwgYW5kIG9uZSBkZWF0aCBhcyBjaGFtcGlvbnMgb2YgdGhlIHBlb3BsZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGFjY2lkZW50LCBob3dldmVyLCBpdCBoYXBwZW5lZCB0aGF0IHRoZSBsb3QgZmVsbCBvbiBoaW0gdG8gZ28gdG8gU2FyZGluaWEgYXMgcXVhZXN0b3IgZm9yIE9yZXN0ZXMgdGhlIGNvbnN1bC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEyNiBCLkMuPC9ub3RlPiBUaGlzIGdhdmUgcGxlYXN1cmUgdG8gaGlzIGVuZW1pZXMsIGFuZCBkaWQgbm90IGFubm95IENhaXVzLiBGb3IgaGUgd2FzIGZvbmQgb2Ygd2FyLCBhbmQgcXVpdGUgYXMgd2VsbCB0cmFpbmVkIGZvciBtaWxpdGFyeSBzZXJ2aWNlIGFzIGZvciBwbGVhZGluZyBpbiB0aGUgY291cnRzLiBNb3Jlb3ZlciwgaGUgc3RpbGwgc2hyYW5rIGZyb20gcHVibGljIGxpZmUgYW5kIHRoZSByb3N0cmEsIGJ1dCB3YXMgdW5hYmxlIHRvIHJlc2lzdCB0aGUgY2FsbHMgdG8gdGhpcyBjYXJlZXIgd2hpY2ggY2FtZSBmcm9tIHRoZSBwZW9wbGUgYW5kIGhpcyBmcmllbmRzLiBIZSB3YXMgdGhlcmVmb3JlIGFsdG9nZXRoZXIgc2F0aXNmaWVkIHdpdGggdGhpcyBvcHBvcnR1bml0eSBvZiBsZWF2aW5nIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgYSBzdHJvbmcgb3BpbmlvbiBwcmV2YWlscyB0aGF0IGhlIHdhcyBhIGRlbWFnb2d1ZSBwdXJlIGFuZCBzaW1wbGUsIGFuZCBmYXIgbW9yZSBlYWdlciB0aGFuIFRpYmVyaXVzIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUuIEJ1dCB0aGlzIGlzIG5vdCB0aGUgdHJ1dGg7IG5heSwgaXQgd291bGQgYXBwZWFyIHRoYXQgaGUgd2FzIGxlZCBieSBhIGNlcnRhaW4gbmVjZXNzaXR5IHJhdGhlciB0aGFuIGJ5IGhpcyBvd24gY2hvaWNlIHRvIGVuZ2FnZSBpbiBwdWJsaWMgbWF0dGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDaWNlcm8gdGhlIG9yYXRvciBhbHNvIHJlbGF0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMS4yNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGRpdi48L3RpdGxlPiAxLiAyNjwvYmlibD4sIDU2PC9ub3RlPiB0aGF0IENhaXVzIGRlY2xpbmVkIGFsbCBvZmZpY2UgYW5kIGhhZCBjaG9zZW4gdG8gbGl2ZSBhIHF1aWV0IGxpZmUsIGJ1dCB0aGF0IGhpcyBicm90aGVyIGFwcGVhcmVkIHRvIGhpbSBpbiBhIGRyZWFtIGFuZCBhZGRyZXNzZWQgaGltLCBzYXlpbmc6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBEaXYuIDEuMjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBkaXYuPC90aXRsZT4gMS4gMjY8L2JpYmw+LCA1Njx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGRpdi48L3RpdGxlPiAxLiAyNjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCBwcmF5LCBkb3N0IHRob3UgaGVzaXRhdGUsIENhaXVzPyBUaGVyZSBpcyBubyBlc2NhcGU7IG9uZSBsaWZlIGlzIGZhdGVkIGZvciB1cyBib3RoLCBhbmQgb25lIGRlYXRoIGFzIGNoYW1waW9ucyBvZiB0aGUgcGVvcGxlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciByZWFjaGluZyBTYXJkaW5pYSwgdGhlbiwgQ2FpdXMgZ2F2ZSBwcm9vZiBvZiBldmVyeSBleGNlbGxlbmNlLCBhbmQgZmFyIHN1cnBhc3NlZCBhbGwgdGhlIG90aGVyIHlvdW5nIG1lbiBpbiBjb25mbGljdHMgd2l0aCB0aGUgZW5lbXksIGluIGp1c3QgZGVhbGluZ3Mgd2l0aCB0aGUgc3ViamVjdCBwZW9wbGVzLCBhbmQgaW4gdGhlIGdvb2Qgd2lsbCBhbmQgcmVzcGVjdCB3aGljaCBoZSBzaG93ZWQgdG93YXJkcyBoaXMgY29tbWFuZGVyLCB3aGlsZSBpbiBzZWxmLXJlc3RyYWludCwgZnJ1Z2FsaXR5LCBhbmQgaW5kdXN0cnksIGhlIGV4Y2VsbGVkIGV2ZW4gaGlzIGVsZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdpbnRlciBpbiBTYXJkaW5pYSBwcm92ZWQgdG8gYmUgcmlnb3JvdXMgYW5kIHVuaGVhbHRoeSwgYW5kIHRoZSBSb21hbiBjb21tYW5kZXIgbWFkZSBhIHJlcXVpc2l0aW9uIHVwb24gdGhlIGNpdGllcyBvZiBjbG90aGluZyBmb3IgaGlzIHNvbGRpZXJzLCB3aGVyZXVwb24gdGhlIGNpdGllcyBzZW50IHRvIFJvbWUgYW5kIGJlZ2dlZCB0byBiZSByZWxpZXZlZCBmcm9tIHRoZSBleGFjdGlvbi4gVGhlIHNlbmF0ZSBncmFudGVkIHRoZWlyIHBldGl0aW9uIGFuZCBvcmRlcmVkIHRoZSBjb21tYW5kZXIgdG8gZ2V0IGNsb3RoaW5nIGZvciBoaXMgc29sZGllcnMgaW4gc29tZSBvdGhlciB3YXkuIFRoZSBjb21tYW5kZXIgd2FzIGF0IGEgbG9zcyB3aGF0IHRvIGRvLCBhbmQgdGhlIHNvbGRpZXJzIHdlcmUgc3VmZmVyaW5nOyBzbyBDYWl1cyBtYWRlIGEgY2lyY3VpdCBvZiB0aGUgY2l0aWVzIGFuZCBpbmR1Y2VkIHRoZW0gb2YgdGhlaXIgb3duIGZyZWUgd2lsbCB0byBzZW5kIGNsb3RoaW5nIGFuZCBvdGhlciBhc3Npc3RhbmNlIHRvIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHJlcG9ydGVkIHRvIFJvbWUsIHdoZXJlIGl0IHdhcyB0aG91Z2h0IHRvIGJlIGEgcHJlbHVkZSB0byBhIHN0cnVnZ2xlIGZvciBwb3B1bGFyIGZhdm91ciwgYW5kIGdhdmUgZnJlc2ggY29uY2VybiB0byB0aGUgc2VuYXRlLiBTbywgdG8gYmVnaW4gd2l0aCwgd2hlbiBhbWJhc3NhZG9ycyBvZiBLaW5nIE1pY2lwc2EgY2FtZSBmcm9tIEFmcmljYSwgYW5kIGFubm91bmNlZCB0aGF0IG91dCBvZiByZWdhcmQgZm9yIENhaXVzIEdyYWNjaHVzIHRoZSBraW5nIGhhZCBzZW50IGdyYWluIHRvIHRoZSBSb21hbiBjb21tYW5kZXIgaW4gU2FyZGluaWEsIHRoZSBzZW5hdG9ycyB3ZXJlIGRpc3BsZWFzZWQgYW5kIHR1cm5lZCB0aGVtIGF3YXkuIEluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZXkgcGFzc2VkIGEgZGVjcmVlIHRoYXQgZnJlc2ggdHJvb3BzIHNob3VsZCBiZSBzZW50IHRvIHJlbGlldmUgdGhlIHNvbGRpZXJzIGluIFNhcmRpbmlhLCBidXQgdGhhdCBPcmVzdGVzIHNob3VsZCByZW1haW4sIHdpdGggdGhlIGlkZWEgdGhhdCBDYWl1cyBhbHNvIHdvdWxkIHJlbWFpbiB3aXRoIGhpbSBieSB2aXJ0dWUgb2YgaGlzIG9mZmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhaXVzLCB3aGVuIHRoaXMgY2FtZSB0byBoaXMgZWFycywgc3RyYWlnaHR3YXkgc2FpbGVkIG9mZiBpbiBhIHBhc3Npb24sIGFuZCBoaXMgdW5leHBlY3RlZCBhcHBlYXJhbmNlIGluIFJvbWUgbm90IG9ubHkgd2FzIGNlbnN1cmVkIGJ5IGhpcyBlbmVtaWVzLCBidXQgYWxzbyBtYWRlIHRoZSBwZW9wbGUgdGhpbmsgaXQgc3RyYW5nZSB0aGF0IGhlLCBxdWFlc3RvciBhcyBoZSB3YXMsIGhhZCBsZWZ0IGhpcyBwb3N0IGJlZm9yZSBoaXMgY29tbWFuZGVyLiBIb3dldmVyLCB3aGVuIGhlIHdhcyBkZW5vdW5jZWQgYmVmb3JlIHRoZSBjZW5zb3JzLCBoZSBiZWdnZWQgbGVhdmUgdG8gc3BlYWssIGFuZCB3cm91Z2h0IHN1Y2ggYSBjaGFuZ2UgaW4gdGhlIG9waW5pb25zIG9mIGhpcyBoZWFyZXJzIHRoYXQgaGUgbGVmdCB0aGUgY291cnQgd2l0aCB0aGUgcmVwdXRhdGlvbiBvZiBoYXZpbmcgYmVlbiBtb3N0IGdyb3NzbHkgd3JvbmdlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHNhaWQgdGhhdCBoZSBoYWQgc2VydmVkIGluIHRoZSBhcm15IHR3ZWx2ZSB5ZWFycywgYWx0aG91Z2ggb3RoZXIgbWVuIHdlcmUgcmVxdWlyZWQgdG8gc2VydmUgdGhlcmUgb25seSB0ZW4sIGFuZCB0aGF0IGhlIGhhZCBjb250aW51ZWQgdG8gc2VydmUgYXMgcXVhZXN0b3IgdW5kZXIgaGlzIGNvbW1hbmRlciBmb3IgbW9yZSB0aGFuIHR3byB5ZWFycywgYWx0aG91Z2ggdGhlIGxhdyBwZXJtaXR0ZWQgaGltIHRvIGNvbWUgYmFjayBhZnRlciBhIHllYXIuIEhlIHdhcyB0aGUgb25seSBtYW4gaW4gdGhlIGFybXksIGhlIHNhaWQsIHdobyBoYWQgZW50ZXJlZCB0aGUgY2FtcGFpZ24gd2l0aCBhIGZ1bGwgcHVyc2UgYW5kIGxlZnQgaXQgd2l0aCBhbiBlbXB0eSBvbmU7IHRoZSByZXN0IGhhZCBkcnVuayB1cCB0aGUgd2luZSB3aGljaCB0aGV5IHRvb2sgaW50byBTYXJkaW5pYSwgYW5kIGhhZCBjb21lIGJhY2sgdG8gUm9tZSB3aXRoIHRoZWlyIHdpbmUtamFycyBmdWxsIG9mIGdvbGQgYW5kIHNpbHZlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciByZWFjaGluZyBTYXJkaW5pYSwgdGhlbiwgQ2FpdXMgZ2F2ZSBwcm9vZiBvZiBldmVyeSBleGNlbGxlbmNlLCBhbmQgZmFyIHN1cnBhc3NlZCBhbGwgdGhlIG90aGVyIHlvdW5nIG1lbiBpbiBjb25mbGljdHMgd2l0aCB0aGUgZW5lbXksIGluIGp1c3QgZGVhbGluZ3Mgd2l0aCB0aGUgc3ViamVjdCBwZW9wbGVzLCBhbmQgaW4gdGhlIGdvb2Qgd2lsbCBhbmQgcmVzcGVjdCB3aGljaCBoZSBzaG93ZWQgdG93YXJkcyBoaXMgY29tbWFuZGVyLCB3aGlsZSBpbiBzZWxmLXJlc3RyYWludCwgZnJ1Z2FsaXR5LCBhbmQgaW5kdXN0cnksIGhlIGV4Y2VsbGVkIGV2ZW4gaGlzIGVsZGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aW50ZXIgaW4gU2FyZGluaWEgcHJvdmVkIHRvIGJlIHJpZ29yb3VzIGFuZCB1bmhlYWx0aHksIGFuZCB0aGUgUm9tYW4gY29tbWFuZGVyIG1hZGUgYSByZXF1aXNpdGlvbiB1cG9uIHRoZSBjaXRpZXMgb2YgY2xvdGhpbmcgZm9yIGhpcyBzb2xkaWVycywgd2hlcmV1cG9uIHRoZSBjaXRpZXMgc2VudCB0byBSb21lIGFuZCBiZWdnZWQgdG8gYmUgcmVsaWV2ZWQgZnJvbSB0aGUgZXhhY3Rpb24uIFRoZSBzZW5hdGUgZ3JhbnRlZCB0aGVpciBwZXRpdGlvbiBhbmQgb3JkZXJlZCB0aGUgY29tbWFuZGVyIHRvIGdldCBjbG90aGluZyBmb3IgaGlzIHNvbGRpZXJzIGluIHNvbWUgb3RoZXIgd2F5LiBUaGUgY29tbWFuZGVyIHdhcyBhdCBhIGxvc3Mgd2hhdCB0byBkbywgYW5kIHRoZSBzb2xkaWVycyB3ZXJlIHN1ZmZlcmluZzsgc28gQ2FpdXMgbWFkZSBhIGNpcmN1aXQgb2YgdGhlIGNpdGllcyBhbmQgaW5kdWNlZCB0aGVtIG9mIHRoZWlyIG93biBmcmVlIHdpbGwgdG8gc2VuZCBjbG90aGluZyBhbmQgb3RoZXIgYXNzaXN0YW5jZSB0byB0aGUgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHJlcG9ydGVkIHRvIFJvbWUsIHdoZXJlIGl0IHdhcyB0aG91Z2h0IHRvIGJlIGEgcHJlbHVkZSB0byBhIHN0cnVnZ2xlIGZvciBwb3B1bGFyIGZhdm91ciwgYW5kIGdhdmUgZnJlc2ggY29uY2VybiB0byB0aGUgc2VuYXRlLiBTbywgdG8gYmVnaW4gd2l0aCwgd2hlbiBhbWJhc3NhZG9ycyBvZiBLaW5nIE1pY2lwc2EgY2FtZSBmcm9tIEFmcmljYSwgYW5kIGFubm91bmNlZCB0aGF0IG91dCBvZiByZWdhcmQgZm9yIENhaXVzIEdyYWNjaHVzIHRoZSBraW5nIGhhZCBzZW50IGdyYWluIHRvIHRoZSBSb21hbiBjb21tYW5kZXIgaW4gU2FyZGluaWEsIHRoZSBzZW5hdG9ycyB3ZXJlIGRpc3BsZWFzZWQgYW5kIHR1cm5lZCB0aGVtIGF3YXkuIEluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZXkgcGFzc2VkIGEgZGVjcmVlIHRoYXQgZnJlc2ggdHJvb3BzIHNob3VsZCBiZSBzZW50IHRvIHJlbGlldmUgdGhlIHNvbGRpZXJzIGluIFNhcmRpbmlhLCBidXQgdGhhdCBPcmVzdGVzIHNob3VsZCByZW1haW4sIHdpdGggdGhlIGlkZWEgdGhhdCBDYWl1cyBhbHNvIHdvdWxkIHJlbWFpbiB3aXRoIGhpbSBieSB2aXJ0dWUgb2YgaGlzIG9mZmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWl1cywgd2hlbiB0aGlzIGNhbWUgdG8gaGlzIGVhcnMsIHN0cmFpZ2h0d2F5IHNhaWxlZCBvZmYgaW4gYSBwYXNzaW9uLCBhbmQgaGlzIHVuZXhwZWN0ZWQgYXBwZWFyYW5jZSBpbiBSb21lIG5vdCBvbmx5IHdhcyBjZW5zdXJlZCBieSBoaXMgZW5lbWllcywgYnV0IGFsc28gbWFkZSB0aGUgcGVvcGxlIHRoaW5rIGl0IHN0cmFuZ2UgdGhhdCBoZSwgcXVhZXN0b3IgYXMgaGUgd2FzLCBoYWQgbGVmdCBoaXMgcG9zdCBiZWZvcmUgaGlzIGNvbW1hbmRlci4gSG93ZXZlciwgd2hlbiBoZSB3YXMgZGVub3VuY2VkIGJlZm9yZSB0aGUgY2Vuc29ycywgaGUgYmVnZ2VkIGxlYXZlIHRvIHNwZWFrLCBhbmQgd3JvdWdodCBzdWNoIGEgY2hhbmdlIGluIHRoZSBvcGluaW9ucyBvZiBoaXMgaGVhcmVycyB0aGF0IGhlIGxlZnQgdGhlIGNvdXJ0IHdpdGggdGhlIHJlcHV0YXRpb24gb2YgaGF2aW5nIGJlZW4gbW9zdCBncm9zc2x5IHdyb25nZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBzYWlkIHRoYXQgaGUgaGFkIHNlcnZlZCBpbiB0aGUgYXJteSB0d2VsdmUgeWVhcnMsIGFsdGhvdWdoIG90aGVyIG1lbiB3ZXJlIHJlcXVpcmVkIHRvIHNlcnZlIHRoZXJlIG9ubHkgdGVuLCBhbmQgdGhhdCBoZSBoYWQgY29udGludWVkIHRvIHNlcnZlIGFzIHF1YWVzdG9yIHVuZGVyIGhpcyBjb21tYW5kZXIgZm9yIG1vcmUgdGhhbiB0d28geWVhcnMsIGFsdGhvdWdoIHRoZSBsYXcgcGVybWl0dGVkIGhpbSB0byBjb21lIGJhY2sgYWZ0ZXIgYSB5ZWFyLiBIZSB3YXMgdGhlIG9ubHkgbWFuIGluIHRoZSBhcm15LCBoZSBzYWlkLCB3aG8gaGFkIGVudGVyZWQgdGhlIGNhbXBhaWduIHdpdGggYSBmdWxsIHB1cnNlIGFuZCBsZWZ0IGl0IHdpdGggYW4gZW1wdHkgb25lOyB0aGUgcmVzdCBoYWQgZHJ1bmsgdXAgdGhlIHdpbmUgd2hpY2ggdGhleSB0b29rIGludG8gU2FyZGluaWEsIGFuZCBoYWQgY29tZSBiYWNrIHRvIFJvbWUgd2l0aCB0aGVpciB3aW5lLWphcnMgZnVsbCBvZiBnb2xkIGFuZCBzaWx2ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgb3RoZXIgZnJlc2ggY2hhcmdlcyBhbmQgaW5kaWN0bWVudHMgd2VyZSBicm91Z2h0IGFnYWluc3QgaGltLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgaGFkIGNhdXNlZCB0aGUgYWxsaWVzIHRvIHJldm9sdCBhbmQgaGFkIGJlZW4gcHJpdnkgdG8gdGhlIGNvbnNwaXJhY3kgYXQgRnJlZ2VsbGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyZWdlbGxhZSByZXZvbHRlZCwgYW5kIHdhcyBkZXN0cm95ZWQgaW4gMTI1IEIuQy48L25vdGU+IGluZm9ybWF0aW9uIG9mIHdoaWNoIHdhcyBicm91Z2h0IHRvIFJvbWUuIEJ1dCBoZSBjbGVhcmVkIGhpbXNlbGYgb2YgYWxsIHN1c3BpY2lvbiwgYW5kIGhhdmluZyBlc3RhYmxpc2hlZCBoaXMgZW50aXJlIGlubm9jZW5jZSwgaW1tZWRpYXRlbHkgYmVnYW4gYSBjYW52YXNzIGZvciB0aGUgdHJpYnVuZXNoaXAuIEFsbCB0aGUgbWVuIG9mIG5vdGUsIHdpdGhvdXQgZXhjZXB0aW9uLCB3ZXJlIG9wcG9zZWQgdG8gaGltLCBidXQgc28gZ3JlYXQgYSB0aHJvbmcgcG91cmVkIGludG8gdGhlIGNpdHkgZnJvbSB0aGUgY291bnRyeSBhbmQgdG9vayBwYXJ0IGluIHRoZSBlbGVjdGlvbnMgdGhhdCBtYW55IGNvdWxkIG5vdCBiZSBob3VzZWQsIGFuZCBzaW5jZSB0aGUgQ2FtcHVzIE1hcnRpdXMgY291bGQgbm90IGFjY29tbW9kYXRlIHRoZSBtdWx0aXR1ZGUsIHRoZXkgZ2F2ZSBpbiB0aGVpciB2b2ljZXMgZnJvbSB0aGUgaG91c2UtdG9wcyBhbmQgdGlsaW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gZmFyLCBob3dldmVyLCBkaWQgdGhlIG5vYmlsaXR5IHByZXZhaWwgYWdhaW5zdCB0aGUgcGVvcGxlIGFuZCBkaXNhcHBvaW50IHRoZSBob3BlcyBvZiBDYWl1cyB0aGF0IGhlIHdhcyBub3QgcmV0dXJuZWQgZmlyc3QsIGFzIGhlIGV4cGVjdGVkLCBidXQgZm91cnRoLiBCdXQgYWZ0ZXIgZW50ZXJpbmcgdXBvbiBoaXMgb2ZmaWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEyMyBCLkMuLCB0ZW4geWVhcnMgYWZ0ZXIgVGliZXJpdXMgaGFkIGVudGVyZWQgdXBvbiB0aGUgc2FtZSBvZmZpY2UuPC9ub3RlPiBoZSB3YXMgYXQgb25jZSBmaXJzdCBvZiBhbGwgdGhlIHRyaWJ1bmVzLCBzaW5jZSBoZSBoYWQgYW4gaW5jb21wYXJhYmxlIHBvd2VyIGluIG9yYXRvcnksIGFuZCBoaXMgYWZmbGljdGlvbiBnYXZlIGhpbSBncmVhdCBib2xkbmVzcyBvZiBzcGVlY2ggaW4gYmV3YWlsaW5nIHRoZSBmYXRlIG9mIGhpcyBicm90aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdG8gdGhpcyBzdWJqZWN0IGhlIHdvdWxkIGJyaW5nIHRoZSBwZW9wbGUgcm91bmQgb24gZXZlcnkgcHJldGV4dCwgcmVtaW5kaW5nIHRoZW0gb2Ygd2hhdCBoYWQgaGFwcGVuZWQgaW4gdGhlIGNhc2Ugb2YgVGliZXJpdXMsIGFuZCBjb250cmFzdGluZyB0aGUgY29uZHVjdCBvZiB0aGVpciBhbmNlc3RvcnMsIHdobyB3ZW50IHRvIHdhciB3aXRoIHRoZSBwZW9wbGUgb2YgRmFsZXJpaSBvbiBiZWhhbGYgb2YgR2VudWNpdXMsIGEgdHJpYnVuZSB3aG9tIHRoZXkgaGFkIGluc3VsdGVkLCBhbmQgY29uZGVtbmVkIENhaXVzIFZldHVyaXVzIHRvIGRlYXRoIGJlY2F1c2UgaGUgd2FzIHRoZSBvbmx5IG1hbiB3aG8gd291bGQgbm90IG1ha2Ugd2F5IGZvciBhIHRyaWJ1bmUgcGFzc2luZyB0aHJvdWdoIHRoZSBmb3J1bS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgYmVmb3JlIHlvdXIgZXllcyw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlc2UgbWVuIGJlYXQgVGliZXJpdXMgdG8gZGVhdGggd2l0aCBjbHVicywgYW5kIGhpcyBkZWFkIGJvZHkgd2FzIGRyYWdnZWQgZnJvbSB0aGUgQ2FwaXRvbCB0aHJvdWdoIHRoZSBtaWRzdCBvZiB0aGUgY2l0eSB0byBiZSB0aHJvd24gaW50byB0aGUgVGliZXI7IG1vcmVvdmVyLCB0aG9zZSBvZiBoaXMgZnJpZW5kcyB3aG8gd2VyZSBjYXVnaHQgd2VyZSBwdXQgdG8gZGVhdGggd2l0aG91dCB0cmlhbC4gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgaXMgYW5jaWVudCB1c2FnZSBhbW9uZyB1cyB0aGF0IGlmIGFueW9uZSB3aG8gaXMgYXJyYWlnbmVkIG9uIGEgY2FwaXRhbCBjaGFyZ2UgZG9lcyBub3QgYW5zd2VyIHRvIGhpcyBzdW1tb25zLCBhIHRydW1wZXRlciBzaGFsbCBnbyB0byB0aGUgZG9vciBvZiB0aGlzIG1hbidzIGhvdXNlIGluIHRoZSBtb3JuaW5nIGFuZCBzdW1tb24gaGltIGZvcnRoIGJ5IHNvdW5kIG9mIHRydW1wZXQsIGFuZCB1bnRpbCB0aGlzIGhhcyBiZWVuIGRvbmUgdGhlIGp1ZGdlcyBzaGFsbCBub3Qgdm90ZSBvbiBoaXMgY2FzZS4gU28gY2FyZWZ1bCBhbmQgZ3VhcmRlZCB3ZXJlIHRoZSBtZW4gb2Ygb2xkIGluIGNhcGl0YWwgY2FzZXMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBvdGhlciBmcmVzaCBjaGFyZ2VzIGFuZCBpbmRpY3RtZW50cyB3ZXJlIGJyb3VnaHQgYWdhaW5zdCBoaW0sIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgY2F1c2VkIHRoZSBhbGxpZXMgdG8gcmV2b2x0IGFuZCBoYWQgYmVlbiBwcml2eSB0byB0aGUgY29uc3BpcmFjeSBhdCBGcmVnZWxsYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmVnZWxsYWUgcmV2b2x0ZWQsIGFuZCB3YXMgZGVzdHJveWVkIGluIDEyNSBCLkMuPC9ub3RlPiBpbmZvcm1hdGlvbiBvZiB3aGljaCB3YXMgYnJvdWdodCB0byBSb21lLiBCdXQgaGUgY2xlYXJlZCBoaW1zZWxmIG9mIGFsbCBzdXNwaWNpb24sIGFuZCBoYXZpbmcgZXN0YWJsaXNoZWQgaGlzIGVudGlyZSBpbm5vY2VuY2UsIGltbWVkaWF0ZWx5IGJlZ2FuIGEgY2FudmFzcyBmb3IgdGhlIHRyaWJ1bmVzaGlwLiBBbGwgdGhlIG1lbiBvZiBub3RlLCB3aXRob3V0IGV4Y2VwdGlvbiwgd2VyZSBvcHBvc2VkIHRvIGhpbSwgYnV0IHNvIGdyZWF0IGEgdGhyb25nIHBvdXJlZCBpbnRvIHRoZSBjaXR5IGZyb20gdGhlIGNvdW50cnkgYW5kIHRvb2sgcGFydCBpbiB0aGUgZWxlY3Rpb25zIHRoYXQgbWFueSBjb3VsZCBub3QgYmUgaG91c2VkLCBhbmQgc2luY2UgdGhlIENhbXB1cyBNYXJ0aXVzIGNvdWxkIG5vdCBhY2NvbW1vZGF0ZSB0aGUgbXVsdGl0dWRlLCB0aGV5IGdhdmUgaW4gdGhlaXIgdm9pY2VzIGZyb20gdGhlIGhvdXNlLXRvcHMgYW5kIHRpbGluZ3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIGZhciwgaG93ZXZlciwgZGlkIHRoZSBub2JpbGl0eSBwcmV2YWlsIGFnYWluc3QgdGhlIHBlb3BsZSBhbmQgZGlzYXBwb2ludCB0aGUgaG9wZXMgb2YgQ2FpdXMgdGhhdCBoZSB3YXMgbm90IHJldHVybmVkIGZpcnN0LCBhcyBoZSBleHBlY3RlZCwgYnV0IGZvdXJ0aC4gQnV0IGFmdGVyIGVudGVyaW5nIHVwb24gaGlzIG9mZmljZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEyMyBCLkMuLCB0ZW4geWVhcnMgYWZ0ZXIgVGliZXJpdXMgaGFkIGVudGVyZWQgdXBvbiB0aGUgc2FtZSBvZmZpY2UuPC9ub3RlPiBoZSB3YXMgYXQgb25jZSBmaXJzdCBvZiBhbGwgdGhlIHRyaWJ1bmVzLCBzaW5jZSBoZSBoYWQgYW4gaW5jb21wYXJhYmxlIHBvd2VyIGluIG9yYXRvcnksIGFuZCBoaXMgYWZmbGljdGlvbiBnYXZlIGhpbSBncmVhdCBib2xkbmVzcyBvZiBzcGVlY2ggaW4gYmV3YWlsaW5nIHRoZSBmYXRlIG9mIGhpcyBicm90aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0byB0aGlzIHN1YmplY3QgaGUgd291bGQgYnJpbmcgdGhlIHBlb3BsZSByb3VuZCBvbiBldmVyeSBwcmV0ZXh0LCByZW1pbmRpbmcgdGhlbSBvZiB3aGF0IGhhZCBoYXBwZW5lZCBpbiB0aGUgY2FzZSBvZiBUaWJlcml1cywgYW5kIGNvbnRyYXN0aW5nIHRoZSBjb25kdWN0IG9mIHRoZWlyIGFuY2VzdG9ycywgd2hvIHdlbnQgdG8gd2FyIHdpdGggdGhlIHBlb3BsZSBvZiBGYWxlcmlpIG9uIGJlaGFsZiBvZiBHZW51Y2l1cywgYSB0cmlidW5lIHdob20gdGhleSBoYWQgaW5zdWx0ZWQsIGFuZCBjb25kZW1uZWQgQ2FpdXMgVmV0dXJpdXMgdG8gZGVhdGggYmVjYXVzZSBoZSB3YXMgdGhlIG9ubHkgbWFuIHdobyB3b3VsZCBub3QgbWFrZSB3YXkgZm9yIGEgdHJpYnVuZSBwYXNzaW5nIHRocm91Z2ggdGhlIGZvcnVtLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGJlZm9yZSB5b3VyIGV5ZXMsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlc2UgbWVuIGJlYXQgVGliZXJpdXMgdG8gZGVhdGggd2l0aCBjbHVicywgYW5kIGhpcyBkZWFkIGJvZHkgd2FzIGRyYWdnZWQgZnJvbSB0aGUgQ2FwaXRvbCB0aHJvdWdoIHRoZSBtaWRzdCBvZiB0aGUgY2l0eSB0byBiZSB0aHJvd24gaW50byB0aGUgVGliZXI7IG1vcmVvdmVyLCB0aG9zZSBvZiBoaXMgZnJpZW5kcyB3aG8gd2VyZSBjYXVnaHQgd2VyZSBwdXQgdG8gZGVhdGggd2l0aG91dCB0cmlhbC4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBpdCBpcyBhbmNpZW50IHVzYWdlIGFtb25nIHVzIHRoYXQgaWYgYW55b25lIHdobyBpcyBhcnJhaWduZWQgb24gYSBjYXBpdGFsIGNoYXJnZSBkb2VzIG5vdCBhbnN3ZXIgdG8gaGlzIHN1bW1vbnMsIGEgdHJ1bXBldGVyIHNoYWxsIGdvIHRvIHRoZSBkb29yIG9mIHRoaXMgbWFuJ3MgaG91c2UgaW4gdGhlIG1vcm5pbmcgYW5kIHN1bW1vbiBoaW0gZm9ydGggYnkgc291bmQgb2YgdHJ1bXBldCwgYW5kIHVudGlsIHRoaXMgaGFzIGJlZW4gZG9uZSB0aGUganVkZ2VzIHNoYWxsIG5vdCB2b3RlIG9uIGhpcyBjYXNlLiBTbyBjYXJlZnVsIGFuZCBndWFyZGVkIHdlcmUgdGhlIG1lbiBvZiBvbGQgaW4gY2FwaXRhbCBjYXNlcy48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgaXMgYW5jaWVudCB1c2FnZSBhbW9uZyB1cyB0aGF0IGlmIGFueW9uZSB3aG8gaXMgYXJyYWlnbmVkIG9uIGEgY2FwaXRhbCBjaGFyZ2UgZG9lcyBub3QgYW5zd2VyIHRvIGhpcyBzdW1tb25zLCBhIHRydW1wZXRlciBzaGFsbCBnbyB0byB0aGUgZG9vciBvZiB0aGlzIG1hbidzIGhvdXNlIGluIHRoZSBtb3JuaW5nIGFuZCBzdW1tb24gaGltIGZvcnRoIGJ5IHNvdW5kIG9mIHRydW1wZXQsIGFuZCB1bnRpbCB0aGlzIGhhcyBiZWVuIGRvbmUgdGhlIGp1ZGdlcyBzaGFsbCBub3Qgdm90ZSBvbiBoaXMgY2FzZS4gU28gY2FyZWZ1bCBhbmQgZ3VhcmRlZCB3ZXJlIHRoZSBtZW4gb2Ygb2xkIGluIGNhcGl0YWwgY2FzZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgZmlyc3Qgc3RpcnJlZCB1cCB0aGUgcGVvcGxlIHdpdGggc3VjaCB3b3JkcyBhcyB0aGVzZSAoYW5kIGhlIGhhZCBhIHZlcnkgbG91ZCB2b2ljZSwgYW5kIHdhcyBtb3N0IHZpZ29yb3VzIGluIGhpcyBzcGVha2luZyksIGhlIGludHJvZHVjZWQgdHdvIGxhd3MsIG9uZSBwcm92aWRpbmcgdGhhdCBpZiB0aGUgcGVvcGxlIGhhZCBkZXByaXZlZCBhbnkgbWFnaXN0cmF0ZSBvZiBoaXMgb2ZmaWNlLCBzdWNoIG1hZ2lzdHJhdGUgc2hvdWxkIG5vdCBiZSBhbGxvd2VkIHRvIGhvbGQgb2ZmaWNlIGEgc2Vjb25kIHRpbWU7IGFuZCBhbm90aGVyIHByb3ZpZGluZyB0aGF0IGlmIGFueSBtYWdpc3RyYXRlIGhhZCBiYW5pc2hlZCBhIGNpdGl6ZW4gd2l0aG91dCB0cmlhbCwgc3VjaCBtYWdpc3RyYXRlIHNob3VsZCBiZSBsaWFibGUgdG8gcHVibGljIHByb3NlY3V0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGVzZSBsYXdzLCBvbmUgaGFkIHRoZSBkaXJlY3QgZWZmZWN0IG9mIGJyYW5kaW5nIHdpdGggaW5mYW15IE1hcmN1cyBPY3Rhdml1cywgd2hvIGhhZCBiZWVuIGRlcG9zZWQgZnJvbSB0aGUgdHJpYnVuYXRlIGJ5IFRpYmVyaXVzOyBhbmQgYnkgdGhlIG90aGVyIFBvcGlsbGl1cyB3YXMgYWZmZWN0ZWQsIGZvciBhcyBwcmFldG9yIGhlIGhhZCBiYW5pc2hlZCB0aGUgZnJpZW5kcyBvZiBUaWJlcml1cy4gUG9waWxsaXVzLCBpbmRlZWQsIHdpdGhvdXQgc3RhbmRpbmcgaGlzIHRyaWFsLCBmbGVkIG91dCBvZiBJdGFseTsgYnV0IHRoZSBvdGhlciBsYXcgd2FzIHdpdGhkcmF3biBieSBDYWl1cyBoaW1zZWxmLCB3aG8gc2FpZCB0aGF0IGhlIHNwYXJlZCBPY3Rhdml1cyBhdCB0aGUgcmVxdWVzdCBvZiBoaXMgbW90aGVyIENvcm5lbGlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIHdlcmUgcGxlYXNlZCBhdCB0aGlzIGFuZCBnYXZlIHRoZWlyIGNvbnNlbnQsIGhvbm91cmluZyBDb3JuZWxpYSBubyBsZXNzIG9uIGFjY291bnQgb2YgaGVyIHNvbnMgdGhhbiBiZWNhdXNlIG9mIGhlciBmYXRoZXI7IGluZGVlZCwgaW4gYWZ0ZXIgdGltZXMgdGhleSBlcmVjdGVkIGEgYnJvbnplIHN0YXR1ZSBvZiBoZXIsIGJlYXJpbmcgdGhlIGluc2NyaXB0aW9uOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvcm5lbGlhLCBNb3RoZXIgb2YgdGhlIEdyYWNjaGkuPC9xPiBUaGVyZSBhcmUgb24gcmVjb3JkIGFsc28gbWFueSB0aGluZ3Mgd2hpY2ggQ2FpdXMgc2FpZCBhYm91dCBoZXIgaW4gdGhlIGNvYXJzZSBzdHlsZSBvZiBmb3JlbnNpYyBzcGVlY2gsIHdoZW4gaGUgd2FzIGF0dGFja2luZyBvbmUgb2YgaGlzIGVuZW1pZXM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZG9zdCB0aG91IGFidXNlIENvcm5lbGlhLCB3aG8gZ2F2ZSBiaXJ0aCB0byBUaWJlcml1cz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNpbmNlIHRoZSBvbmUgd2hvIGhhZCB1dHRlcmVkIHRoZSBhYnVzZSB3YXMgY2hhcmdlZCB3aXRoIGVmZmVtaW5hdGUgcHJhY3RpY2VzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpdGggd2hhdCBlZmZyb250ZXJ5LDwvcT4gc2FpZCBDYWl1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYW5zdCB0aG91IGNvbXBhcmUgdGh5c2VsZiB3aXRoIENvcm5lbGlhPyBIYXN0IHRob3UgYm9ybmUgc3VjaCBjaGlsZHJlbiBhcyBzaGUgZGlkPyBBbmQgdmVyaWx5IGFsbCBSb21lIGtub3dzIHRoYXQgc2hlIHJlZnJhaW5lZCBmcm9tIGNvbW1lcmNlIHdpdGggbWVuIGxvbmdlciB0aGFuIHRob3UgaGFzdCwgdGhvdWdoIHRob3UgYXJ0IGEgbWFuLjwvcT4gU3VjaCB3YXMgdGhlIGJpdHRlcm5lc3Mgb2YgaGlzIGxhbmd1YWdlLCBhbmQgbWFueSBzaW1pbGFyIGV4YW1wbGVzIGNhbiBiZSB0YWtlbiBmcm9tIGhpcyB3cml0aW5ncy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgZmlyc3Qgc3RpcnJlZCB1cCB0aGUgcGVvcGxlIHdpdGggc3VjaCB3b3JkcyBhcyB0aGVzZSAoYW5kIGhlIGhhZCBhIHZlcnkgbG91ZCB2b2ljZSwgYW5kIHdhcyBtb3N0IHZpZ29yb3VzIGluIGhpcyBzcGVha2luZyksIGhlIGludHJvZHVjZWQgdHdvIGxhd3MsIG9uZSBwcm92aWRpbmcgdGhhdCBpZiB0aGUgcGVvcGxlIGhhZCBkZXByaXZlZCBhbnkgbWFnaXN0cmF0ZSBvZiBoaXMgb2ZmaWNlLCBzdWNoIG1hZ2lzdHJhdGUgc2hvdWxkIG5vdCBiZSBhbGxvd2VkIHRvIGhvbGQgb2ZmaWNlIGEgc2Vjb25kIHRpbWU7IGFuZCBhbm90aGVyIHByb3ZpZGluZyB0aGF0IGlmIGFueSBtYWdpc3RyYXRlIGhhZCBiYW5pc2hlZCBhIGNpdGl6ZW4gd2l0aG91dCB0cmlhbCwgc3VjaCBtYWdpc3RyYXRlIHNob3VsZCBiZSBsaWFibGUgdG8gcHVibGljIHByb3NlY3V0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlIGxhd3MsIG9uZSBoYWQgdGhlIGRpcmVjdCBlZmZlY3Qgb2YgYnJhbmRpbmcgd2l0aCBpbmZhbXkgTWFyY3VzIE9jdGF2aXVzLCB3aG8gaGFkIGJlZW4gZGVwb3NlZCBmcm9tIHRoZSB0cmlidW5hdGUgYnkgVGliZXJpdXM7IGFuZCBieSB0aGUgb3RoZXIgUG9waWxsaXVzIHdhcyBhZmZlY3RlZCwgZm9yIGFzIHByYWV0b3IgaGUgaGFkIGJhbmlzaGVkIHRoZSBmcmllbmRzIG9mIFRpYmVyaXVzLiBQb3BpbGxpdXMsIGluZGVlZCwgd2l0aG91dCBzdGFuZGluZyBoaXMgdHJpYWwsIGZsZWQgb3V0IG9mIEl0YWx5OyBidXQgdGhlIG90aGVyIGxhdyB3YXMgd2l0aGRyYXduIGJ5IENhaXVzIGhpbXNlbGYsIHdobyBzYWlkIHRoYXQgaGUgc3BhcmVkIE9jdGF2aXVzIGF0IHRoZSByZXF1ZXN0IG9mIGhpcyBtb3RoZXIgQ29ybmVsaWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgd2VyZSBwbGVhc2VkIGF0IHRoaXMgYW5kIGdhdmUgdGhlaXIgY29uc2VudCwgaG9ub3VyaW5nIENvcm5lbGlhIG5vIGxlc3Mgb24gYWNjb3VudCBvZiBoZXIgc29ucyB0aGFuIGJlY2F1c2Ugb2YgaGVyIGZhdGhlcjsgaW5kZWVkLCBpbiBhZnRlciB0aW1lcyB0aGV5IGVyZWN0ZWQgYSBicm9uemUgc3RhdHVlIG9mIGhlciwgYmVhcmluZyB0aGUgaW5zY3JpcHRpb246IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db3JuZWxpYSwgTW90aGVyIG9mIHRoZSBHcmFjY2hpLjwvcT4gVGhlcmUgYXJlIG9uIHJlY29yZCBhbHNvIG1hbnkgdGhpbmdzIHdoaWNoIENhaXVzIHNhaWQgYWJvdXQgaGVyIGluIHRoZSBjb2Fyc2Ugc3R5bGUgb2YgZm9yZW5zaWMgc3BlZWNoLCB3aGVuIGhlIHdhcyBhdHRhY2tpbmcgb25lIG9mIGhpcyBlbmVtaWVzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb3N0IHRob3UgYWJ1c2UgQ29ybmVsaWEsIHdobyBnYXZlIGJpcnRoIHRvIFRpYmVyaXVzPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSB0aGUgb25lIHdobyBoYWQgdXR0ZXJlZCB0aGUgYWJ1c2Ugd2FzIGNoYXJnZWQgd2l0aCBlZmZlbWluYXRlIHByYWN0aWNlcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldpdGggd2hhdCBlZmZyb250ZXJ5LDwvcT4gc2FpZCBDYWl1cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhbnN0IHRob3UgY29tcGFyZSB0aHlzZWxmIHdpdGggQ29ybmVsaWE/IEhhc3QgdGhvdSBib3JuZSBzdWNoIGNoaWxkcmVuIGFzIHNoZSBkaWQ/IEFuZCB2ZXJpbHkgYWxsIFJvbWUga25vd3MgdGhhdCBzaGUgcmVmcmFpbmVkIGZyb20gY29tbWVyY2Ugd2l0aCBtZW4gbG9uZ2VyIHRoYW4gdGhvdSBoYXN0LCB0aG91Z2ggdGhvdSBhcnQgYSBtYW4uPC9xPiBTdWNoIHdhcyB0aGUgYml0dGVybmVzcyBvZiBoaXMgbGFuZ3VhZ2UsIGFuZCBtYW55IHNpbWlsYXIgZXhhbXBsZXMgY2FuIGJlIHRha2VuIGZyb20gaGlzIHdyaXRpbmdzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBsYXdzIHdoaWNoIGhlIHByb3Bvc2VkIGJ5IHdheSBvZiBncmF0aWZ5aW5nIHRoZSBwZW9wbGUgYW5kIG92ZXJ0aHJvd2luZyB0aGUgc2VuYXRlLCBvbmUgd2FzIGFncmFyaWFuLCBhbmQgZGl2aWRlZCB0aGUgcHVibGljIGxhbmQgYW1vbmcgdGhlIHBvb3IgY2l0aXplbnM7IGFub3RoZXIgd2FzIG1pbGl0YXJ5LCBhbmQgb3JkYWluZWQgdGhhdCBjbG90aGluZyBzaG91bGQgYmUgZnVybmlzaGVkIHRvIHRoZSBzb2xkaWVycyBhdCB0aGUgcHVibGljIGNvc3QsIHRoYXQgbm90aGluZyBzaG91bGQgYmUgZGVkdWN0ZWQgZnJvbSB0aGVpciBwYXkgdG8gbWVldCB0aGlzIGNoYXJnZSwgYW5kIHRoYXQgbm8gb25lIHVuZGVyIHNldmVudGVlbiBzaG91bGQgYmUgZW5yb2xsZWQgYXMgYSBzb2xkaWVyOyBhbm90aGVyIGNvbmNlcm5lZCB0aGUgYWxsaWVzLCBhbmQgZ2F2ZSB0aGUgSXRhbGlhbnMgZXF1YWwgc3VmZnJhZ2UgcmlnaHRzIHdpdGggUm9tYW4gY2l0aXplbnM7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFub3RoZXIgcmVsYXRlZCB0byB0aGUgc3VwcGxpZXMgb2YgZ3JhaW4sIGFuZCBsb3dlcmVkIHRoZSBtYXJrZXQgcHJpY2UgdG8gdGhlIHBvb3I7IGFuZCBhbm90aGVyIGRlYWx0IHdpdGggdGhlIGFwcG9pbnRtZW50IG9mIGp1ZGdlcy4gVGhpcyBsYXN0IGxhdyBtb3N0IG9mIGFsbCBjdXJ0YWlsZWQgdGhlIHBvd2VyIG9mIHRoZSBzZW5hdG9yczsgZm9yIHRoZXkgYWxvbmUgY291bGQgc2VydmUgYXMganVkZ2VzIGluIGNyaW1pbmFsIGNhc2VzLCBhbmQgdGhpcyBwcml2aWxlZ2UgbWFkZSB0aGVtIGZvcm1pZGFibGUgYm90aCB0byB0aGUgY29tbW9uIHBlb3BsZSBhbmQgdG8gdGhlIGVxdWVzdHJpYW4gb3JkZXIgVGhlIGxhdyBvZiBHcmFjY2h1cywgaG93ZXZlciwgYWRkZWQgdG8gdGhlIG1lbWJlcnNoaXAgb2YgdGhlIHNlbmF0ZSwgd2hpY2ggd2FzIHRocmVlIGh1bmRyZWQsIHRocmVlIGh1bmRyZWQgbWVuIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXIsIGFuZCBtYWRlIHNlcnZpY2UgYXMganVkZ2VzIGEgcHJlcm9nYXRpdmUgb2YgdGhlIHdob2xlIHNpeCBodW5kcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiBoaXMgZWZmb3J0cyB0byBjYXJyeSB0aGlzIGxhdyBDYWl1cyBpcyBzYWlkIHRvIGhhdmUgc2hvd24gcmVtYXJrYWJsZSBlYXJuZXN0bmVzcyBpbiBtYW55IHdheXMsIGFuZCBlc3BlY2lhbGx5IGluIHRoaXMsIHRoYXQgd2hlcmVhcyBhbGwgcG9wdWxhciBvcmF0b3JzIGJlZm9yZSBoaW0gaGFkIHR1cm5lZCB0aGVpciBmYWNlcyB0b3dhcmRzIHRoZSBzZW5hdGUgYW5kIHRoYXQgcGFydCBvZiB0aGUgZm9ydW0gY2FsbGVkIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbWl0aXVtLDwvcT4gaGUgbm93IHNldCBhIG5ldyBleGFtcGxlIGJ5IHR1cm5pbmcgdG93YXJkcyB0aGUgb3RoZXIgcGFydCBvZiB0aGUgZm9ydW0gYXMgaGUgaGFyYW5ndWVkIHRoZSBwZW9wbGUsIGFuZCBjb250aW51ZWQgdG8gZG8gdGhpcyBmcm9tIHRoYXQgdGltZSBvbiwgdGh1cyBieSBhIHNsaWdodCBkZXZpYXRpb24gYW5kIGNoYW5nZSBvZiBhdHRpdHVkZSBzdGlycmluZyB1cCBhIGdyZWF0IHF1ZXN0aW9uLCBhcmlkIHRvIGEgY2VydGFpbiBleHRlbnQgY2hhbmdpbmcgdGhlIGNvbnN0aXR1dGlvbiBmcm9tIGFuIGFyaXN0b2NyYXRpYyB0byBhIGRlbW9jcmF0aWMgZm9ybTsgZm9yIGhpcyBpbXBsaWNhdGlvbiB3YXMgdGhhdCBzcGVha2VycyBvdWdodCB0byBhZGRyZXNzIHRoZW1zZWx2ZXMgdG8gdGhlIHBlb3BsZSwgYW5kIG5vdCB0byB0aGUgc2VuYXRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgbGF3cyB3aGljaCBoZSBwcm9wb3NlZCBieSB3YXkgb2YgZ3JhdGlmeWluZyB0aGUgcGVvcGxlIGFuZCBvdmVydGhyb3dpbmcgdGhlIHNlbmF0ZSwgb25lIHdhcyBhZ3JhcmlhbiwgYW5kIGRpdmlkZWQgdGhlIHB1YmxpYyBsYW5kIGFtb25nIHRoZSBwb29yIGNpdGl6ZW5zOyBhbm90aGVyIHdhcyBtaWxpdGFyeSwgYW5kIG9yZGFpbmVkIHRoYXQgY2xvdGhpbmcgc2hvdWxkIGJlIGZ1cm5pc2hlZCB0byB0aGUgc29sZGllcnMgYXQgdGhlIHB1YmxpYyBjb3N0LCB0aGF0IG5vdGhpbmcgc2hvdWxkIGJlIGRlZHVjdGVkIGZyb20gdGhlaXIgcGF5IHRvIG1lZXQgdGhpcyBjaGFyZ2UsIGFuZCB0aGF0IG5vIG9uZSB1bmRlciBzZXZlbnRlZW4gc2hvdWxkIGJlIGVucm9sbGVkIGFzIGEgc29sZGllcjsgYW5vdGhlciBjb25jZXJuZWQgdGhlIGFsbGllcywgYW5kIGdhdmUgdGhlIEl0YWxpYW5zIGVxdWFsIHN1ZmZyYWdlIHJpZ2h0cyB3aXRoIFJvbWFuIGNpdGl6ZW5zOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFub3RoZXIgcmVsYXRlZCB0byB0aGUgc3VwcGxpZXMgb2YgZ3JhaW4sIGFuZCBsb3dlcmVkIHRoZSBtYXJrZXQgcHJpY2UgdG8gdGhlIHBvb3I7IGFuZCBhbm90aGVyIGRlYWx0IHdpdGggdGhlIGFwcG9pbnRtZW50IG9mIGp1ZGdlcy4gVGhpcyBsYXN0IGxhdyBtb3N0IG9mIGFsbCBjdXJ0YWlsZWQgdGhlIHBvd2VyIG9mIHRoZSBzZW5hdG9yczsgZm9yIHRoZXkgYWxvbmUgY291bGQgc2VydmUgYXMganVkZ2VzIGluIGNyaW1pbmFsIGNhc2VzLCBhbmQgdGhpcyBwcml2aWxlZ2UgbWFkZSB0aGVtIGZvcm1pZGFibGUgYm90aCB0byB0aGUgY29tbW9uIHBlb3BsZSBhbmQgdG8gdGhlIGVxdWVzdHJpYW4gb3JkZXIgVGhlIGxhdyBvZiBHcmFjY2h1cywgaG93ZXZlciwgYWRkZWQgdG8gdGhlIG1lbWJlcnNoaXAgb2YgdGhlIHNlbmF0ZSwgd2hpY2ggd2FzIHRocmVlIGh1bmRyZWQsIHRocmVlIGh1bmRyZWQgbWVuIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXIsIGFuZCBtYWRlIHNlcnZpY2UgYXMganVkZ2VzIGEgcHJlcm9nYXRpdmUgb2YgdGhlIHdob2xlIHNpeCBodW5kcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGhpcyBlZmZvcnRzIHRvIGNhcnJ5IHRoaXMgbGF3IENhaXVzIGlzIHNhaWQgdG8gaGF2ZSBzaG93biByZW1hcmthYmxlIGVhcm5lc3RuZXNzIGluIG1hbnkgd2F5cywgYW5kIGVzcGVjaWFsbHkgaW4gdGhpcywgdGhhdCB3aGVyZWFzIGFsbCBwb3B1bGFyIG9yYXRvcnMgYmVmb3JlIGhpbSBoYWQgdHVybmVkIHRoZWlyIGZhY2VzIHRvd2FyZHMgdGhlIHNlbmF0ZSBhbmQgdGhhdCBwYXJ0IG9mIHRoZSBmb3J1bSBjYWxsZWQgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jb21pdGl1bSw8L3E+IGhlIG5vdyBzZXQgYSBuZXcgZXhhbXBsZSBieSB0dXJuaW5nIHRvd2FyZHMgdGhlIG90aGVyIHBhcnQgb2YgdGhlIGZvcnVtIGFzIGhlIGhhcmFuZ3VlZCB0aGUgcGVvcGxlLCBhbmQgY29udGludWVkIHRvIGRvIHRoaXMgZnJvbSB0aGF0IHRpbWUgb24sIHRodXMgYnkgYSBzbGlnaHQgZGV2aWF0aW9uIGFuZCBjaGFuZ2Ugb2YgYXR0aXR1ZGUgc3RpcnJpbmcgdXAgYSBncmVhdCBxdWVzdGlvbiwgYXJpZCB0byBhIGNlcnRhaW4gZXh0ZW50IGNoYW5naW5nIHRoZSBjb25zdGl0dXRpb24gZnJvbSBhbiBhcmlzdG9jcmF0aWMgdG8gYSBkZW1vY3JhdGljIGZvcm07IGZvciBoaXMgaW1wbGljYXRpb24gd2FzIHRoYXQgc3BlYWtlcnMgb3VnaHQgdG8gYWRkcmVzcyB0aGVtc2VsdmVzIHRvIHRoZSBwZW9wbGUsIGFuZCBub3QgdG8gdGhlIHNlbmF0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIG5vdCBvbmx5IGFkb3B0ZWQgdGhpcyBsYXcsIGJ1dCBhbHNvIGVudHJ1c3RlZCB0byBpdHMgYXV0aG9yIHRoZSBzZWxlY3Rpb24gb2YgdGhlIGp1ZGdlcyB3aG8gd2VyZSB0byBjb21lIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXIsIHNvIHRoYXQgaGUgZm91bmQgaGltc2VsZiBpbnZlc3RlZCB3aXRoIHNvbWV0aGluZyBsaWtlIG1vbmFyY2hpY2FsIHBvd2VyLCBhbmQgZXZlbiB0aGUgc2VuYXRlIGNvbnNlbnRlZCB0byBmb2xsb3cgaGlzIGNvdW5zZWwuIEJ1dCB3aGVuIGhlIGNvdW5zZWxsZWQgdGhlbSwgaXQgd2FzIGFsd2F5cyBpbiBzdXBwb3J0IG9mIG1lYXN1cmVzIGJlZml0dGluZyB0aGVpciBib2R5OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hcywgZm9yIGluc3RhbmNlLCB0aGUgdmVyeSBlcXVpdGFibGUgYW5kIGhvbm91cmFibGUgZGVjcmVlIGNvbmNlcm5pbmcgdGhlIGdyYWluIHdoaWNoIEZhYml1cyB0aGUgcHJvLXByYWV0b3Igc2VudCB0byB0aGUgY2l0eSBmcm9tIFNwYWluLiBDYWl1cyBpbmR1Y2VkIHRoZSBTZW5hdGUgdG8gc2VsbCB0aGUgZ3JhaW4gYW5kIHNlbmQgdGhlIG1vbmV5IGJhY2sgdG8gdGhlIGNpdGllcyBvZiBTcGFpbiwgYW5kIGZ1cnRoZXIsIHRvIGNlbnN1cmUgRmFiaXVzIGZvciBtYWtpbmcgaGlzIGdvdmVybm1lbnQgb2YgdGhlIHByb3ZpbmNlIGludG9sZXJhYmx5IGJ1cmRlbnNvbWUgdG8gaXRzIGluaGFiaXRhbnRzLiBUaGlzIGRlY3JlZSBicm91Z2h0IENhaXVzIGdyZWF0IHJlcHV0YXRpb24gYXMgd2VsbCBhcyBwb3B1bGFyaXR5IGluIHRoZSBwcm92aW5jZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIG5vdCBvbmx5IGFkb3B0ZWQgdGhpcyBsYXcsIGJ1dCBhbHNvIGVudHJ1c3RlZCB0byBpdHMgYXV0aG9yIHRoZSBzZWxlY3Rpb24gb2YgdGhlIGp1ZGdlcyB3aG8gd2VyZSB0byBjb21lIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXIsIHNvIHRoYXQgaGUgZm91bmQgaGltc2VsZiBpbnZlc3RlZCB3aXRoIHNvbWV0aGluZyBsaWtlIG1vbmFyY2hpY2FsIHBvd2VyLCBhbmQgZXZlbiB0aGUgc2VuYXRlIGNvbnNlbnRlZCB0byBmb2xsb3cgaGlzIGNvdW5zZWwuIEJ1dCB3aGVuIGhlIGNvdW5zZWxsZWQgdGhlbSwgaXQgd2FzIGFsd2F5cyBpbiBzdXBwb3J0IG9mIG1lYXN1cmVzIGJlZml0dGluZyB0aGVpciBib2R5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFzLCBmb3IgaW5zdGFuY2UsIHRoZSB2ZXJ5IGVxdWl0YWJsZSBhbmQgaG9ub3VyYWJsZSBkZWNyZWUgY29uY2VybmluZyB0aGUgZ3JhaW4gd2hpY2ggRmFiaXVzIHRoZSBwcm8tcHJhZXRvciBzZW50IHRvIHRoZSBjaXR5IGZyb20gU3BhaW4uIENhaXVzIGluZHVjZWQgdGhlIFNlbmF0ZSB0byBzZWxsIHRoZSBncmFpbiBhbmQgc2VuZCB0aGUgbW9uZXkgYmFjayB0byB0aGUgY2l0aWVzIG9mIFNwYWluLCBhbmQgZnVydGhlciwgdG8gY2Vuc3VyZSBGYWJpdXMgZm9yIG1ha2luZyBoaXMgZ292ZXJubWVudCBvZiB0aGUgcHJvdmluY2UgaW50b2xlcmFibHkgYnVyZGVuc29tZSB0byBpdHMgaW5oYWJpdGFudHMuIFRoaXMgZGVjcmVlIGJyb3VnaHQgQ2FpdXMgZ3JlYXQgcmVwdXRhdGlvbiBhcyB3ZWxsIGFzIHBvcHVsYXJpdHkgaW4gdGhlIHByb3ZpbmNlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBpbnRyb2R1Y2VkIGJpbGxzIGZvciBzZW5kaW5nIG91dCBjb2xvbmllcywgZm9yIGNvbnN0cnVjdGluZyByb2FkcywgYW5kIGZvciBlc3RhYmxpc2hpbmcgcHVibGljIGdyYW5hcmllcywgbWFraW5nIGhpbXNlbGYgZGlyZWN0b3IgYW5kIG1hbmFnZXIgb2YgYWxsIHRoZXNlIHVuZGVydGFraW5ncywgYW5kIHNob3dpbmcgbm8gd2VhcmluZXNzIGluIHRoZSBleGVjdXRpb24gb2YgYWxsIHRoZXNlIGRpZmZlcmVudCBhbmQgZ3JlYXQgZW50ZXJwcmlzZXM7IG5heSwgaGUgYWN0dWFsbHkgY2FycmllZCBvdXQgZWFjaCBvbmUgb2YgdGhlbSB3aXRoIGFuIGFzdG9uaXNoaW5nIHNwZWVkIGFuZCBwb3dlciBvZiBhcHBsaWNhdGlvbiwgYXMgaWYgaXQgd2VyZSBoaXMgc29sZSBidXNpbmVzcywgc28gdGhhdCBldmVuIHRob3NlIHdobyBncmVhdGx5IGhhdGVkIGFuZCBmZWFyZWQgaGltIHdlcmUgc3RydWNrIHdpdGggYW1hemVtZW50IGF0IHRoZSBwb3dlcnMgb2YgYWNoaWV2ZW1lbnQgYW5kIGFjY29tcGxpc2htZW50IHdoaWNoIG1hcmtlZCBhbGwgdGhhdCBoZSBkaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIG11bHRpdHVkZSwgdGhleSB3ZXJlIGFzdG9uaXNoZWQgYXQgdGhlIHZlcnkgc2lnaHQsIHdoZW4gdGhleSBiZWhlbGQgaGltIGNsb3NlbHkgYXR0ZW5kZWQgYnkgYSB0aHJvbmcgb2YgY29udHJhY3RvcnMsIGFydGlmaWNlcnMsIGFtYmFzc2Fkb3JzLCBtYWdpc3RyYXRlcywgc29sZGllcnMsIGFuZCBsaXRlcmFyeSBtZW4sIHdpdGggYWxsIG9mIHdob20gaGUgd2FzIG9uIGVhc3kgdGVybXMsIHByZXNlcnZpbmcgaGlzIGRpZ25pdHkgd2hpbGUgc2hvd2luZyBraW5kbGluZXNzLCBhbmQgcmVuZGVyaW5nIHByb3Blcmx5IHRvIGV2ZXJ5IG1hbiB0aGUgY291cnRlc3kgd2hpY2ggd2FzIGR1ZSBmcm9tIGhpbSwgd2hlcmVieSBoZSBzZXQgaW4gdGhlIGxpZ2h0IG9mIG1hbGlnbmFudCBzbGFuZGVyZXJzIHRob3NlIHdobyBzdGlnbWF0aXNlZCBoaW0gYXMgdGhyZWF0ZW5pbmcgb3IgdXR0ZXJseSBhcnJvZ2FudCBvciB2aW9sZW50LiBUaHVzIGhlIHdhcyBhIG1vcmUgc2tpbGZ1bCBwb3B1bGFyIGxlYWRlciBpbiBoaXMgcHJpdmF0ZSBpbnRlcmNvdXJzZSB3aXRoIG1lbiBhbmQgaW4gaGlzIGJ1c2luZXNzIHRyYW5zYWN0aW9ucyB0aGFuIGluIGhpcyBzcGVlY2hlcyBmcm9tIHRoZSByb3N0cmEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gaW50cm9kdWNlZCBiaWxscyBmb3Igc2VuZGluZyBvdXQgY29sb25pZXMsIGZvciBjb25zdHJ1Y3Rpbmcgcm9hZHMsIGFuZCBmb3IgZXN0YWJsaXNoaW5nIHB1YmxpYyBncmFuYXJpZXMsIG1ha2luZyBoaW1zZWxmIGRpcmVjdG9yIGFuZCBtYW5hZ2VyIG9mIGFsbCB0aGVzZSB1bmRlcnRha2luZ3MsIGFuZCBzaG93aW5nIG5vIHdlYXJpbmVzcyBpbiB0aGUgZXhlY3V0aW9uIG9mIGFsbCB0aGVzZSBkaWZmZXJlbnQgYW5kIGdyZWF0IGVudGVycHJpc2VzOyBuYXksIGhlIGFjdHVhbGx5IGNhcnJpZWQgb3V0IGVhY2ggb25lIG9mIHRoZW0gd2l0aCBhbiBhc3RvbmlzaGluZyBzcGVlZCBhbmQgcG93ZXIgb2YgYXBwbGljYXRpb24sIGFzIGlmIGl0IHdlcmUgaGlzIHNvbGUgYnVzaW5lc3MsIHNvIHRoYXQgZXZlbiB0aG9zZSB3aG8gZ3JlYXRseSBoYXRlZCBhbmQgZmVhcmVkIGhpbSB3ZXJlIHN0cnVjayB3aXRoIGFtYXplbWVudCBhdCB0aGUgcG93ZXJzIG9mIGFjaGlldmVtZW50IGFuZCBhY2NvbXBsaXNobWVudCB3aGljaCBtYXJrZWQgYWxsIHRoYXQgaGUgZGlkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIG11bHRpdHVkZSwgdGhleSB3ZXJlIGFzdG9uaXNoZWQgYXQgdGhlIHZlcnkgc2lnaHQsIHdoZW4gdGhleSBiZWhlbGQgaGltIGNsb3NlbHkgYXR0ZW5kZWQgYnkgYSB0aHJvbmcgb2YgY29udHJhY3RvcnMsIGFydGlmaWNlcnMsIGFtYmFzc2Fkb3JzLCBtYWdpc3RyYXRlcywgc29sZGllcnMsIGFuZCBsaXRlcmFyeSBtZW4sIHdpdGggYWxsIG9mIHdob20gaGUgd2FzIG9uIGVhc3kgdGVybXMsIHByZXNlcnZpbmcgaGlzIGRpZ25pdHkgd2hpbGUgc2hvd2luZyBraW5kbGluZXNzLCBhbmQgcmVuZGVyaW5nIHByb3Blcmx5IHRvIGV2ZXJ5IG1hbiB0aGUgY291cnRlc3kgd2hpY2ggd2FzIGR1ZSBmcm9tIGhpbSwgd2hlcmVieSBoZSBzZXQgaW4gdGhlIGxpZ2h0IG9mIG1hbGlnbmFudCBzbGFuZGVyZXJzIHRob3NlIHdobyBzdGlnbWF0aXNlZCBoaW0gYXMgdGhyZWF0ZW5pbmcgb3IgdXR0ZXJseSBhcnJvZ2FudCBvciB2aW9sZW50LiBUaHVzIGhlIHdhcyBhIG1vcmUgc2tpbGZ1bCBwb3B1bGFyIGxlYWRlciBpbiBoaXMgcHJpdmF0ZSBpbnRlcmNvdXJzZSB3aXRoIG1lbiBhbmQgaW4gaGlzIGJ1c2luZXNzIHRyYW5zYWN0aW9ucyB0aGFuIGluIGhpcyBzcGVlY2hlcyBmcm9tIHRoZSByb3N0cmEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIGJ1c2llZCBoaW1zZWxmIG1vc3QgZWFybmVzdGx5IHdpdGggdGhlIGNvbnN0cnVjdGlvbiBvZiByb2FkcywgbGF5aW5nIHN0cmVzcyB1cG9uIHV0aWxpdHksIGFzIHdlbGwgYXMgdXBvbiB0aGF0IHdoaWNoIGNvbmR1Y2VkIHRvIGdyYWNlIGFuZCBiZWF1dHkuIEZvciBoaXMgcm9hZHMgd2VyZSBjYXJyaWVkIHN0cmFpZ2h0IHRocm91Z2ggdGhlIGNvdW50cnkgd2l0aG91dCBkZXZpYXRpb24sIGFuZCBoYWQgcGF2ZW1lbnRzIG9mIHF1YXJyaWVkIHN0b25lLCBhbmQgc3Vic3RydWN0dXJlcyBvZiB0aWdodC1yYW1tZWQgbWFzc2VzIG9mIHNhbmQuIERlcHJlc3Npb25zIHdlcmUgZmlsbGVkIHVwLCBhbGwgaW50ZXJzZWN0aW5nIHRvcnJlbnRzIG9yIHJhdmluZXMgd2VyZSBicmlkZ2VkIG92ZXIsIGFuZCBib3RoIHNpZGVzIG9mIHRoZSByb2FkcyB3ZXJlIG9mIGVxdWFsIGFuZCBjb3JyZXNwb25kaW5nIGhlaWdodCwgc28gdGhhdCB0aGUgd29yayBoYWQgZXZlcnl3aGVyZSBhbiBldmVuIGFuZCBiZWF1dGlmdWwgYXBwZWFyYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYWRkaXRpb24gdG8gYWxsIHRoaXMsIGhlIG1lYXN1cmVkIG9mZiBldmVyeSByb2FkIGJ5IG1pbGVzICh0aGUgUm9tYW4gbWlsZSBmYWxscyBhIGxpdHRsZSBzaG9ydCBvZiBlaWdodCBmdXJsb25ncykgYW5kIHBsYW50ZWQgc3RvbmUgcGlsbGFycyBpbiB0aGUgZ3JvdW5kIHRvIG1hcmsgdGhlIGRpc3RhbmNlcy4gT3RoZXIgc3RvbmVzLCB0b28sIGhlIHBsYWNlZCBhdCBzbWFsbGVyIGludGVydmFscyBmcm9tIG9uZSBhbm90aGVyIG9uIGJvdGggc2lkZXMgb2YgdGhlIHJvYWQsIGluIG9yZGVyIHRoYXQgZXF1ZXN0cmlhbnMgbWlnaHQgYmUgYWJsZSB0byBtb3VudCB0aGVpciBob3JzZXMgZnJvbSB0aGVtIGFuZCBoYXZlIG5vIG5lZWQgb2YgYXNzaXN0YW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgYnVzaWVkIGhpbXNlbGYgbW9zdCBlYXJuZXN0bHkgd2l0aCB0aGUgY29uc3RydWN0aW9uIG9mIHJvYWRzLCBsYXlpbmcgc3RyZXNzIHVwb24gdXRpbGl0eSwgYXMgd2VsbCBhcyB1cG9uIHRoYXQgd2hpY2ggY29uZHVjZWQgdG8gZ3JhY2UgYW5kIGJlYXV0eS4gRm9yIGhpcyByb2FkcyB3ZXJlIGNhcnJpZWQgc3RyYWlnaHQgdGhyb3VnaCB0aGUgY291bnRyeSB3aXRob3V0IGRldmlhdGlvbiwgYW5kIGhhZCBwYXZlbWVudHMgb2YgcXVhcnJpZWQgc3RvbmUsIGFuZCBzdWJzdHJ1Y3R1cmVzIG9mIHRpZ2h0LXJhbW1lZCBtYXNzZXMgb2Ygc2FuZC4gRGVwcmVzc2lvbnMgd2VyZSBmaWxsZWQgdXAsIGFsbCBpbnRlcnNlY3RpbmcgdG9ycmVudHMgb3IgcmF2aW5lcyB3ZXJlIGJyaWRnZWQgb3ZlciwgYW5kIGJvdGggc2lkZXMgb2YgdGhlIHJvYWRzIHdlcmUgb2YgZXF1YWwgYW5kIGNvcnJlc3BvbmRpbmcgaGVpZ2h0LCBzbyB0aGF0IHRoZSB3b3JrIGhhZCBldmVyeXdoZXJlIGFuIGV2ZW4gYW5kIGJlYXV0aWZ1bCBhcHBlYXJhbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIGFsbCB0aGlzLCBoZSBtZWFzdXJlZCBvZmYgZXZlcnkgcm9hZCBieSBtaWxlcyAodGhlIFJvbWFuIG1pbGUgZmFsbHMgYSBsaXR0bGUgc2hvcnQgb2YgZWlnaHQgZnVybG9uZ3MpIGFuZCBwbGFudGVkIHN0b25lIHBpbGxhcnMgaW4gdGhlIGdyb3VuZCB0byBtYXJrIHRoZSBkaXN0YW5jZXMuIE90aGVyIHN0b25lcywgdG9vLCBoZSBwbGFjZWQgYXQgc21hbGxlciBpbnRlcnZhbHMgZnJvbSBvbmUgYW5vdGhlciBvbiBib3RoIHNpZGVzIG9mIHRoZSByb2FkLCBpbiBvcmRlciB0aGF0IGVxdWVzdHJpYW5zIG1pZ2h0IGJlIGFibGUgdG8gbW91bnQgdGhlaXIgaG9yc2VzIGZyb20gdGhlbSBhbmQgaGF2ZSBubyBuZWVkIG9mIGFzc2lzdGFuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlIHBlb3BsZSBleHRvbGxlZCBoaW0gZm9yIGFsbCB0aGVzZSBzZXJ2aWNlcyBhbmQgd2VyZSByZWFkeSB0byBzaG93IGhpbSBhbnkgdG9rZW4gd2hhdHNvZXZlciBvZiB0aGVpciBnb29kIHdpbGwsIGhlIHNhaWQgdG8gdGhlbSBvbmNlIGluIGEgcHVibGljIGhhcmFuZ3VlIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGFzayBhIGZhdm91ciBvZiB0aGVtLCB3aGljaCwgaWYgZ3JhbnRlZCwgaGUgc2hvdWxkIHZhbHVlIHN1cHJlbWVseSwgYnV0IGlmIGl0IHdlcmUgcmVmdXNlZCwgaGUgc2hvdWxkIGZpbmQgbm8gZmF1bHQgd2l0aCB0aGVtLiBUaGlzIHV0dGVyYW5jZSB3YXMgdGhvdWdodCB0byBiZSBhIHJlcXVlc3QgZm9yIGEgY29uc3Vsc2hpcCwgYW5kIGxlZCBldmVyeWJvZHkgdG8gZXhwZWN0IHRoYXQgaGUgd291bGQgc3VlIGZvciBhIGNvbnN1bHNoaXAgYW5kIGEgdHJpYnVuZXNoaXAgYXQgdGhlIHNhbWUgdGltZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGNvbnN1bGFyIGVsZWN0aW9ucyB3ZXJlIGF0IGhhbmQgYW5kIGV2ZXJ5Ym9keSB3YXMgb24gdGhlIHRpcC10b2Ugb2YgZXhwZWN0YXRpb24sIEhlIHdhcyBzZWVuIGxlYWRpbmcgQ2FpdXMgRmFubml1cyBkb3duIGludG8gdGhlIENhbXB1cyBNYXJ0aXVzIGFuZCBqb2luaW5nIGluIHRoZSBjYW52YXNzIGZvciBoaW0gYWxvbmcgd2l0aCBoaXMgZnJpZW5kcy4gVGhpcyB0dXJuZWQgdGhlIHRpZGUgc3Ryb25nbHkgaW4gZmF2b3VyIG9mIEZhbm5pdXMuIFNvIEZhbm5pdXMgd2FzIGVsZWN0ZWQgY29uc3VsLCBhbmQgQ2FpdXMgdHJpYnVuZSBmb3IgdGhlIHNlY29uZCB0aW1lLCB0aG91Z2ggaGUgd2FzIG5vdCBhIGNhbmRpZGF0ZSBhbmQgZGlkIG5vdCBjYW52YXNzIGZvciB0aGUgb2ZmaWNlOyBidXQgdGhlIHBlb3BsZSB3ZXJlIGVhZ2VyIHRvIGhhdmUgaXQgc28uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSB0aGUgcGVvcGxlIGV4dG9sbGVkIGhpbSBmb3IgYWxsIHRoZXNlIHNlcnZpY2VzIGFuZCB3ZXJlIHJlYWR5IHRvIHNob3cgaGltIGFueSB0b2tlbiB3aGF0c29ldmVyIG9mIHRoZWlyIGdvb2Qgd2lsbCwgaGUgc2FpZCB0byB0aGVtIG9uY2UgaW4gYSBwdWJsaWMgaGFyYW5ndWUgdGhhdCBoZSB3YXMgZ29pbmcgdG8gYXNrIGEgZmF2b3VyIG9mIHRoZW0sIHdoaWNoLCBpZiBncmFudGVkLCBoZSBzaG91bGQgdmFsdWUgc3VwcmVtZWx5LCBidXQgaWYgaXQgd2VyZSByZWZ1c2VkLCBoZSBzaG91bGQgZmluZCBubyBmYXVsdCB3aXRoIHRoZW0uIFRoaXMgdXR0ZXJhbmNlIHdhcyB0aG91Z2h0IHRvIGJlIGEgcmVxdWVzdCBmb3IgYSBjb25zdWxzaGlwLCBhbmQgbGVkIGV2ZXJ5Ym9keSB0byBleHBlY3QgdGhhdCBoZSB3b3VsZCBzdWUgZm9yIGEgY29uc3Vsc2hpcCBhbmQgYSB0cmlidW5lc2hpcCBhdCB0aGUgc2FtZSB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBjb25zdWxhciBlbGVjdGlvbnMgd2VyZSBhdCBoYW5kIGFuZCBldmVyeWJvZHkgd2FzIG9uIHRoZSB0aXAtdG9lIG9mIGV4cGVjdGF0aW9uLCBIZSB3YXMgc2VlbiBsZWFkaW5nIENhaXVzIEZhbm5pdXMgZG93biBpbnRvIHRoZSBDYW1wdXMgTWFydGl1cyBhbmQgam9pbmluZyBpbiB0aGUgY2FudmFzcyBmb3IgaGltIGFsb25nIHdpdGggaGlzIGZyaWVuZHMuIFRoaXMgdHVybmVkIHRoZSB0aWRlIHN0cm9uZ2x5IGluIGZhdm91ciBvZiBGYW5uaXVzLiBTbyBGYW5uaXVzIHdhcyBlbGVjdGVkIGNvbnN1bCwgYW5kIENhaXVzIHRyaWJ1bmUgZm9yIHRoZSBzZWNvbmQgdGltZSwgdGhvdWdoIGhlIHdhcyBub3QgYSBjYW5kaWRhdGUgYW5kIGRpZCBub3QgY2FudmFzcyBmb3IgdGhlIG9mZmljZTsgYnV0IHRoZSBwZW9wbGUgd2VyZSBlYWdlciB0byBoYXZlIGl0IHNvLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBzb29uIHNhdyB0aGF0IHRoZSBzZW5hdGUgd2FzIGhvc3RpbGUgdG8gaGltIG91dCBhbmQgb3V0LCBhbmQgdGhhdCB0aGUgZ29vZCB3aWxsIG9mIEZhbm5pdXMgdG93YXJkcyBoaW0gaGFkIGxvc3QgaXRzIGVkZ2UsIGFuZCB0aGVyZWZvcmUgYWdhaW4gYmVnYW4gdG8gYXR0YWNoIHRoZSBtdWx0aXR1ZGUgdG8gaGltc2VsZiBieSBvdGhlciBsYXdzLCBwcm9wb3NpbmcgdG8gc2VuZCBjb2xvbmllcyB0byBUYXJlbnR1bSBhbmQgQ2FwdWEsIGFuZCBpbnZpdGluZyB0aGUgTGF0aW5zIHRvIGEgcGFydGljaXBhdGlvbiBpbiB0aGUgUm9tYW4gZnJhbmNoaXNlLiBCdXQgdGhlIHNlbmF0ZSwgZmVhcmluZyB0aGF0IEdyYWNjaHVzIHdvdWxkIGJlY29tZSBhbHRvZ2V0aGVyIGludmluY2libGUsIG1hZGUgYSBuZXcgYW5kIHVudXN1YWwgYXR0ZW1wdCB0byBkaXZlcnQgdGhlIHBlb3BsZSBmcm9tIGhpbTsgdGhleSB2aWVkIHdpdGggaGltLCB0aGF0IGlzLCBpbiBjb3VydGluZyB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUsIGFuZCBncmFudGVkIHRoZWlyIHdpc2hlcyBjb250cmFyeSB0byB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIHN0YXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb25lIG9mIHRoZSBjb2xsZWFndWVzIG9mIENhaXVzIHdhcyBMaXZpdXMgRHJ1c3VzLCBhIG1hbiB3aG8gd2FzIG5vdCBpbmZlcmlvciB0byBhbnkgUm9tYW4gZWl0aGVyIGluIGJpcnRoIG9yIHJlYXJpbmcsIHdoaWxlIGluIGNoYXJhY3RlciwgZWxvcXVlbmNlLCBhbmQgd2VhbHRoIGhlIGNvdWxkIHZpZSB3aXRoIHRob3NlIHdobyB3ZXJlIG1vc3QgaG9ub3VyZWQgYW5kIGluZmx1ZW50aWFsIGluIGNvbnNlcXVlbmNlIG9mIHRoZXNlIGFkdmFudGFnZXMuIFRvIHRoaXMgbWFuLCBhY2NvcmRpbmdseSwgdGhlIG5vYmxlcyBoYWQgcmVjb3Vyc2UsIGFuZCBpbnZpdGVkIGhpbSB0byBhdHRhY2sgQ2FpdXMgYW5kIGxlYWd1ZSBoaW1zZWxmIHdpdGggdGhlbSBhZ2FpbnN0IGhpbSwgbm90IHJlc29ydGluZyB0byB2aW9sZW5jZSBvciBjb21pbmcgaW50byBjb2xsaXNpb24gd2l0aCB0aGUgcGVvcGxlLCBidXQgYWRtaW5pc3RlcmluZyBoaXMgb2ZmaWNlIHRvIHBsZWFzZSB0aGVtIGFuZCBtYWtpbmcgdGhlbSBjb25jZXNzaW9ucyB3aGVyZSBpdCB3b3VsZCBoYXZlIGJlZW4gaG9ub3VyYWJsZSB0byBpbmN1ciB0aGVpciBoYXRyZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHNvb24gc2F3IHRoYXQgdGhlIHNlbmF0ZSB3YXMgaG9zdGlsZSB0byBoaW0gb3V0IGFuZCBvdXQsIGFuZCB0aGF0IHRoZSBnb29kIHdpbGwgb2YgRmFubml1cyB0b3dhcmRzIGhpbSBoYWQgbG9zdCBpdHMgZWRnZSwgYW5kIHRoZXJlZm9yZSBhZ2FpbiBiZWdhbiB0byBhdHRhY2ggdGhlIG11bHRpdHVkZSB0byBoaW1zZWxmIGJ5IG90aGVyIGxhd3MsIHByb3Bvc2luZyB0byBzZW5kIGNvbG9uaWVzIHRvIFRhcmVudHVtIGFuZCBDYXB1YSwgYW5kIGludml0aW5nIHRoZSBMYXRpbnMgdG8gYSBwYXJ0aWNpcGF0aW9uIGluIHRoZSBSb21hbiBmcmFuY2hpc2UuIEJ1dCB0aGUgc2VuYXRlLCBmZWFyaW5nIHRoYXQgR3JhY2NodXMgd291bGQgYmVjb21lIGFsdG9nZXRoZXIgaW52aW5jaWJsZSwgbWFkZSBhIG5ldyBhbmQgdW51c3VhbCBhdHRlbXB0IHRvIGRpdmVydCB0aGUgcGVvcGxlIGZyb20gaGltOyB0aGV5IHZpZWQgd2l0aCBoaW0sIHRoYXQgaXMsIGluIGNvdXJ0aW5nIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgYW5kIGdyYW50ZWQgdGhlaXIgd2lzaGVzIGNvbnRyYXJ5IHRvIHRoZSBiZXN0IGludGVyZXN0cyBvZiB0aGUgc3RhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvbmUgb2YgdGhlIGNvbGxlYWd1ZXMgb2YgQ2FpdXMgd2FzIExpdml1cyBEcnVzdXMsIGEgbWFuIHdobyB3YXMgbm90IGluZmVyaW9yIHRvIGFueSBSb21hbiBlaXRoZXIgaW4gYmlydGggb3IgcmVhcmluZywgd2hpbGUgaW4gY2hhcmFjdGVyLCBlbG9xdWVuY2UsIGFuZCB3ZWFsdGggaGUgY291bGQgdmllIHdpdGggdGhvc2Ugd2hvIHdlcmUgbW9zdCBob25vdXJlZCBhbmQgaW5mbHVlbnRpYWwgaW4gY29uc2VxdWVuY2Ugb2YgdGhlc2UgYWR2YW50YWdlcy4gVG8gdGhpcyBtYW4sIGFjY29yZGluZ2x5LCB0aGUgbm9ibGVzIGhhZCByZWNvdXJzZSwgYW5kIGludml0ZWQgaGltIHRvIGF0dGFjayBDYWl1cyBhbmQgbGVhZ3VlIGhpbXNlbGYgd2l0aCB0aGVtIGFnYWluc3QgaGltLCBub3QgcmVzb3J0aW5nIHRvIHZpb2xlbmNlIG9yIGNvbWluZyBpbnRvIGNvbGxpc2lvbiB3aXRoIHRoZSBwZW9wbGUsIGJ1dCBhZG1pbmlzdGVyaW5nIGhpcyBvZmZpY2UgdG8gcGxlYXNlIHRoZW0gYW5kIG1ha2luZyB0aGVtIGNvbmNlc3Npb25zIHdoZXJlIGl0IHdvdWxkIGhhdmUgYmVlbiBob25vdXJhYmxlIHRvIGluY3VyIHRoZWlyIGhhdHJlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5MaXZpdXMsIGFjY29yZGluZ2x5LCBwdXQgaGlzIGluZmx1ZW5jZSBhcyB0cmlidW5lIGF0IHRoZSBzZXJ2aWNlIG9mIHRoZSBzZW5hdGUgdG8gdGhpcyBlbmQsIGFuZCBkcmV3IHVwIGxhd3Mgd2hpY2ggYWltZWQgYXQgd2hhdCB3YXMgbmVpdGhlciBob25vdXJhYmxlIG5vciBhZHZhbnRhZ2VvdXM7IG5heSwgaGUgaGFkIHRoZSBlbXVsb3VzIGVhZ2VybmVzcyBvZiB0aGUgcml2YWwgZGVtYWdvZ3VlcyBvZiBjb21lZHkgdG8gYWNoaWV2ZSBvbmUgdGhpbmcsIG5hbWVseSwgdG8gc3VycGFzcyBDYWl1cyBpbiBwbGVhc2luZyBhbmQgZ3JhdGlmeWluZyB0aGUgcGVvcGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGFsbHVzaW9uIHRvIHRoZSByaXZhbCBkZW1hZ29ndWVzIGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvcGguIEtuLiAxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPktuaWdodHM8L3RpdGxlPiBvZiBBcmlzdG9waGFuZXM8L2JpYmw+Ljwvbm90ZT4gSW4gdGhpcyB3YXkgdGhlIHNlbmF0ZSBzaG93ZWQgbW9zdCBwbGFpbmx5IHRoYXQgaXQgd2FzIG5vdCBkaXNwbGVhc2VkIHdpdGggdGhlIHB1YmxpYyBtZWFzdXJlcyBvZiBDYWl1cywgYnV0IHJhdGhlciB3YXMgZGVzaXJvdXMgYnkgYWxsIG1lYW5zIHRvIGh1bWJsZSBvciBkZXN0cm95IHRoZSBtYW4gaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gQ2FpdXMgcHJvcG9zZWQgdG8gZm91bmQgdHdvIGNvbG9uaWVzLCBhbmQgdGhlc2UgY29tcG9zZWQgb2YgdGhlIG1vc3QgcmVzcGVjdGFibGUgY2l0aXplbnMsIHRoZXkgYWNjdXNlZCBoaW0gb2YgdHJ1Y2tsaW5nIHRvIHRoZSBwZW9wbGU7IGJ1dCB3aGVuIExpdml1cyBwcm9wb3NlZCB0byBmb3VuZCB0d2VsdmUsIGFuZCB0byBzZW5kIG91dCB0byBlYWNoIG9mIHRoZW0gdGhyZWUgdGhvdXNhbmQgb2YgdGhlIG5lZWR5IGNpdGl6ZW5zLCB0aGV5IHN1cHBvcnRlZCBoaW0uIFdpdGggQ2FpdXMsIGJlY2F1c2UgaGUgZGlzdHJpYnV0ZWQgcHVibGljIGxhbmQgYW1vbmcgdGhlIHBvb3IgZm9yIHdoaWNoIGV2ZXJ5IG1hbiBvZiB0aGVtIHdhcyByZXF1aXJlZCB0byBwYXkgYSByZW50YWwgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LCB0aGV5IHdlcmUgYW5ncnksIGFsbGVnaW5nIHRoYXQgaGUgd2FzIHNlZWtpbmcgdGhlcmVieSB0byB3aW4gZmF2b3VyIHdpdGggdGhlIG11bHRpdHVkZTsgYnV0IExpdml1cyBtZXQgd2l0aCB0aGVpciBhcHByb3ZhbCB3aGVuIGhlIHByb3Bvc2VkIHRvIHJlbGlldmUgdGhlIHRlbmFudHMgZXZlbiBmcm9tIHRoaXMgcmVudGFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwgd2hlbiBDYW1zIHByb3Bvc2VkIHRvIGJlc3RvdyB1cG9uIHRoZSBMYXRpbnMgZXF1YWwgcmlnaHRzIG9mIHN1ZmZyYWdlLCBoZSBnYXZlIG9mZmVuY2U7IGJ1dCB3aGVuIExpdml1cyBicm91Z2h0IGluIGEgYmlsbCBmb3JiaWRkaW5nIHRoYXQgYW55IExhdGluIHNob3VsZCBiZSBjaGFzdGlzZWQgd2l0aCByb2RzIGV2ZW4gZHVyaW5nIG1pbGl0YXJ5IHNlcnZpY2UsIGhlIGhhZCB0aGUgc2VuYXRlJ3Mgc3VwcG9ydC4gQW5kIGluZGVlZCBMaXZpdXMgaGltc2VsZiwgaW4gaGlzIHB1YmxpYyBoYXJhbmd1ZXMsIGFsd2F5cyBzYWlkIHRoYXQgaGUgaW50cm9kdWNlZCB0aGVzZSBtZWFzdXJlcyBvbiB0aGUgYXV0aG9yaXR5IG9mIHRoZSBzZW5hdGUsIHdoaWNoIGRlc2lyZWQgdG8gaGVscCB0aGUgY29tbW9uIHBlb3BsZTsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoaXMgaW4gZmFjdCB3YXMgdGhlIG9ubHkgYWR2YW50YWdlIHdoaWNoIHJlc3VsdGVkIGZyb20gaGlzIHBvbGl0aWNhbCBtZWFzdXJlcy4gRm9yIHRoZSBwZW9wbGUgYmVjYW1lIG1vcmUgYW1pY2FibHkgZGlzcG9zZWQgdG93YXJkcyB0aGUgc2VuYXRlOyBhbmQgd2hlcmVhcyBiZWZvcmUgdGhpcyB0aGV5IGhhZCBzdXNwZWN0ZWQgYW5kIGhhdGVkIHRoZSBub2JsZXMsIExpdml1cyBzb2Z0ZW5lZCBhbmQgZGlzc2lwYXRlZCB0aGVpciByZW1lbWJyYW5jZSBvZiBwYXN0IGdyaWV2YW5jZXMgYW5kIHRoZWlyIGJpdHRlciBmZWVsaW5ncyBieSBhbGxlZ2luZyB0aGF0IGl0IHdhcyB0aGUgc2FuY3Rpb24gb2YgdGhlIG5vYmxlcyB3aGljaCBoYWQgaW5kdWNlZCBoaW0gdG8gZW50ZXIgdXBvbiBoaXMgY291cnNlIG9mIGNvbmNpbGlhdGluZyB0aGUgcGVvcGxlIGFuZCBncmF0aWZ5aW5nIHRoZSB3aXNoZXMgb2YgdGhlIG1hbnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5MaXZpdXMsIGFjY29yZGluZ2x5LCBwdXQgaGlzIGluZmx1ZW5jZSBhcyB0cmlidW5lIGF0IHRoZSBzZXJ2aWNlIG9mIHRoZSBzZW5hdGUgdG8gdGhpcyBlbmQsIGFuZCBkcmV3IHVwIGxhd3Mgd2hpY2ggYWltZWQgYXQgd2hhdCB3YXMgbmVpdGhlciBob25vdXJhYmxlIG5vciBhZHZhbnRhZ2VvdXM7IG5heSwgaGUgaGFkIHRoZSBlbXVsb3VzIGVhZ2VybmVzcyBvZiB0aGUgcml2YWwgZGVtYWdvZ3VlcyBvZiBjb21lZHkgdG8gYWNoaWV2ZSBvbmUgdGhpbmcsIG5hbWVseSwgdG8gc3VycGFzcyBDYWl1cyBpbiBwbGVhc2luZyBhbmQgZ3JhdGlmeWluZyB0aGUgcGVvcGxlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gYWxsdXNpb24gdG8gdGhlIHJpdmFsIGRlbWFnb2d1ZXMgaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3BoLiBLbi4gMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPktuaWdodHM8L3RpdGxlPiBvZiBBcmlzdG9waGFuZXM8L2JpYmw+Ljwvbm90ZT4gSW4gdGhpcyB3YXkgdGhlIHNlbmF0ZSBzaG93ZWQgbW9zdCBwbGFpbmx5IHRoYXQgaXQgd2FzIG5vdCBkaXNwbGVhc2VkIHdpdGggdGhlIHB1YmxpYyBtZWFzdXJlcyBvZiBDYWl1cywgYnV0IHJhdGhlciB3YXMgZGVzaXJvdXMgYnkgYWxsIG1lYW5zIHRvIGh1bWJsZSBvciBkZXN0cm95IHRoZSBtYW4gaGltc2VsZi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG9waC4gS24uIDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5LbmlnaHRzPC90aXRsZT4gb2YgQXJpc3RvcGhhbmVzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5LbmlnaHRzPC90aXRsZT4gb2YgQXJpc3RvcGhhbmVzPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIENhaXVzIHByb3Bvc2VkIHRvIGZvdW5kIHR3byBjb2xvbmllcywgYW5kIHRoZXNlIGNvbXBvc2VkIG9mIHRoZSBtb3N0IHJlc3BlY3RhYmxlIGNpdGl6ZW5zLCB0aGV5IGFjY3VzZWQgaGltIG9mIHRydWNrbGluZyB0byB0aGUgcGVvcGxlOyBidXQgd2hlbiBMaXZpdXMgcHJvcG9zZWQgdG8gZm91bmQgdHdlbHZlLCBhbmQgdG8gc2VuZCBvdXQgdG8gZWFjaCBvZiB0aGVtIHRocmVlIHRob3VzYW5kIG9mIHRoZSBuZWVkeSBjaXRpemVucywgdGhleSBzdXBwb3J0ZWQgaGltLiBXaXRoIENhaXVzLCBiZWNhdXNlIGhlIGRpc3RyaWJ1dGVkIHB1YmxpYyBsYW5kIGFtb25nIHRoZSBwb29yIGZvciB3aGljaCBldmVyeSBtYW4gb2YgdGhlbSB3YXMgcmVxdWlyZWQgdG8gcGF5IGEgcmVudGFsIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgdGhleSB3ZXJlIGFuZ3J5LCBhbGxlZ2luZyB0aGF0IGhlIHdhcyBzZWVraW5nIHRoZXJlYnkgdG8gd2luIGZhdm91ciB3aXRoIHRoZSBtdWx0aXR1ZGU7IGJ1dCBMaXZpdXMgbWV0IHdpdGggdGhlaXIgYXBwcm92YWwgd2hlbiBoZSBwcm9wb3NlZCB0byByZWxpZXZlIHRoZSB0ZW5hbnRzIGV2ZW4gZnJvbSB0aGlzIHJlbnRhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCB3aGVuIENhbXMgcHJvcG9zZWQgdG8gYmVzdG93IHVwb24gdGhlIExhdGlucyBlcXVhbCByaWdodHMgb2Ygc3VmZnJhZ2UsIGhlIGdhdmUgb2ZmZW5jZTsgYnV0IHdoZW4gTGl2aXVzIGJyb3VnaHQgaW4gYSBiaWxsIGZvcmJpZGRpbmcgdGhhdCBhbnkgTGF0aW4gc2hvdWxkIGJlIGNoYXN0aXNlZCB3aXRoIHJvZHMgZXZlbiBkdXJpbmcgbWlsaXRhcnkgc2VydmljZSwgaGUgaGFkIHRoZSBzZW5hdGUncyBzdXBwb3J0LiBBbmQgaW5kZWVkIExpdml1cyBoaW1zZWxmLCBpbiBoaXMgcHVibGljIGhhcmFuZ3VlcywgYWx3YXlzIHNhaWQgdGhhdCBoZSBpbnRyb2R1Y2VkIHRoZXNlIG1lYXN1cmVzIG9uIHRoZSBhdXRob3JpdHkgb2YgdGhlIHNlbmF0ZSwgd2hpY2ggZGVzaXJlZCB0byBoZWxwIHRoZSBjb21tb24gcGVvcGxlOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGlzIGluIGZhY3Qgd2FzIHRoZSBvbmx5IGFkdmFudGFnZSB3aGljaCByZXN1bHRlZCBmcm9tIGhpcyBwb2xpdGljYWwgbWVhc3VyZXMuIEZvciB0aGUgcGVvcGxlIGJlY2FtZSBtb3JlIGFtaWNhYmx5IGRpc3Bvc2VkIHRvd2FyZHMgdGhlIHNlbmF0ZTsgYW5kIHdoZXJlYXMgYmVmb3JlIHRoaXMgdGhleSBoYWQgc3VzcGVjdGVkIGFuZCBoYXRlZCB0aGUgbm9ibGVzLCBMaXZpdXMgc29mdGVuZWQgYW5kIGRpc3NpcGF0ZWQgdGhlaXIgcmVtZW1icmFuY2Ugb2YgcGFzdCBncmlldmFuY2VzIGFuZCB0aGVpciBiaXR0ZXIgZmVlbGluZ3MgYnkgYWxsZWdpbmcgdGhhdCBpdCB3YXMgdGhlIHNhbmN0aW9uIG9mIHRoZSBub2JsZXMgd2hpY2ggaGFkIGluZHVjZWQgaGltIHRvIGVudGVyIHVwb24gaGlzIGNvdXJzZSBvZiBjb25jaWxpYXRpbmcgdGhlIHBlb3BsZSBhbmQgZ3JhdGlmeWluZyB0aGUgd2lzaGVzIG9mIHRoZSBtYW55LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHN0cm9uZ2VzdCBwcm9vZiB0aGF0IExpdml1cyB3YXMgd2VsbCBkaXNwb3NlZCB0b3dhcmRzIHRoZSBwZW9wbGUgYW5kIGhvbmVzdCwgbGF5IGluIHRoZSBmYWN0IHRoYXQgaGUgbmV2ZXIgYXBwZWFyZWQgdG8gcHJvcG9zZSBhbnl0aGluZyBmb3IgaGltc2VsZiBvciBpbiBoaXMgb3duIGludGVyZXN0cy4gRm9yIGhlIG1vdmVkIHRvIHNlbmQgb3V0IG90aGVyIG1lbiBhcyBtYW5hZ2VycyBvZiBoaXMgY29sb25pZXMsIGFuZCB3b3VsZCBoYXZlIG5vIGhhbmQgaW4gdGhlIGV4cGVuZGl0dXJlIG9mIG1vbmV5cywgd2hlcmVhcyBDYWl1cyBoYWQgYXNzaWduZWQgdG8gaGltc2VsZiBtb3N0IG9mIHN1Y2ggZnVuY3Rpb25zIGFuZCB0aGUgbW9zdCBpbXBvcnRhbnQgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBSdWJyaXVzLCBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMgaW4gdGhlIHRyaWJ1bmVzaGlwLCBicm91Z2h0IGluIGEgYmlsbCBmb3IgdGhlIGZvdW5kaW5nIG9mIGEgY29sb255IG9uIHRoZSBzaXRlIG9mIENhcnRoYWdlLCB3aGljaCBoYWQgYmVlbiBkZXN0cm95ZWQgYnkgU2NpcGlvLCBhbmQgQ2FpdXMsIHVwb24gd2hvbSB0aGUgbG90IGZlbGwsIHNhaWxlZCBvZmYgdG8gQWZyaWNhIGFzIHN1cGVyaW50ZW5kZW50IG9mIHRoZSBmb3VuZGF0aW9uLiBJbiBoaXMgYWJzZW5jZSwgdGhlcmVmb3JlLCBMaXZpdXMgbWFkZSBhbGwgdGhlIG1vcmUgaGVhZHdheSBhZ2FpbnN0IGhpbSwgc3RlYWxpbmcgaW50byB0aGUgZ29vZCBncmFjZXMgb2YgdGhlIHBlb3BsZSBhbmQgYXR0YWNoaW5nIHRoZW0gdG8gaGltc2VsZiwgcGFydGljdWxhcmx5IGJ5IGhpcyBjYWx1bW5pYXRpb25zIG9mIEZ1bHZpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgRnVsdml1cyB3YXMgYSBmcmllbmQgb2YgQ2FpdXMsIGFuZCBoYWQgYmVlbiBjaG9zZW4gYSBjb21taXNzaW9uZXIgd2l0aCBoaW0gZm9yIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHB1YmxpYyBsYW5kOyBidXQgaGUgd2FzIGEgdHVyYnVsZW50IGZlbGxvdywgYW5kIHdhcyBoYXRlZCBvdXRyaWdodCBieSB0aGUgc2VuYXRvcnMuIE90aGVyIG1lbiBhbHNvIHN1c3BlY3RlZCBoaW0gb2Ygc3RpcnJpbmcgdXAgdHJvdWJsZSB3aXRoIHRoZSBhbGxpZXMgYW5kIG9mIHNlY3JldGx5IGluY2l0aW5nIHRoZSBJdGFsaWFucyB0byByZXZvbHQuIFRoZXNlIHRoaW5ncyB3ZXJlIHNhaWQgYWdhaW5zdCBoaW0gd2l0aG91dCBwcm9vZiBvciBpbnZlc3RpZ2F0aW9uLCBidXQgRnVsdml1cyBoaW1zZWxmIGJyb3VnaHQgdGhlbSBpbnRvIGdyZWF0ZXIgY3JlZGVuY2UgYnkgYSBwb2xpY3kgd2hpY2ggd2FzIHVuc291bmQgYW5kIHJldm9sdXRpb25hcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2Ugd2FzIHRoZSB1bmRvaW5nIG9mIENhaXVzLCB3aG8gY2FtZSBpbiBmb3IgYSBzaGFyZSBvZiB0aGUgaGF0cmVkIGFnYWluc3QgRnVsdml1cy4gQW5kIHdoZW4gU2NpcGlvIEFmcmljYW51cyBkaWVkIHdpdGhvdXQgYW55IGFwcGFyZW50IGNhdXNlLCBhbmQgY2VydGFpbiBtYXJrcyBvZiB2aW9sZW5jZSBhbmQgYmxvd3Mgd2VyZSB0aG91Z2h0IHRvIGJlIGluIGV2aWRlbmNlIGFsbCBvdmVyIGhpcyBkZWFkIGJvZHksIGFzIEkgaGF2ZSB3cml0dGVuIGluIGhpcyBMaWZlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRHIDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5UaWJlcml1cyBHcmFjY2h1czwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvYmlibD4sIGFkIGZpbi4sIGFuZCBjZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI3LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Um9tdWx1czwvdGl0bGU+LCB4eHZpaS4gNC4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbW9zdCBvZiB0aGUgY29uc2VxdWVudCBjYWx1bW55IGZlbGwgdXBvbiBGdWx2aXVzLCB3aG8gd2FzIFNjaXBpbydzIGVuZW15LCBhbmQgaGFkIGFidXNlZCBoaW0gdGhhdCBkYXkgZnJvbSB0aGUgcm9zdHJhLCBidXQgc3VzcGljaW9uIGF0dGFjaGVkIGl0c2VsZiBhbHNvIHRvIENhaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYSBkZWVkIHNvIG1vbnN0cm91cywgYW5kIHBlcnBldHJhdGVkIHVwb24gYSBtYW4gd2hvIHdhcyB0aGUgZm9yZW1vc3QgYW5kIGdyZWF0ZXN0IFJvbWFuLCB3ZW50IHVucHVuaXNoZWQsIG5heSwgd2FzIG5vdCBldmVuIHNvIG11Y2ggYXMgcHJvYmVkOyBmb3IgdGhlIG11bHRpdHVkZSB3ZXJlIG9wcG9zZWQgdG8gYW55IGp1ZGljaWFsIGVucXVpcnkgYW5kIHRod2FydGVkIGl0LCBiZWNhdXNlIHRoZXkgZmVhcmVkIHRoYXQgQ2FpdXMgbWlnaHQgYmUgaW1wbGljYXRlZCBpbiB0aGUgY2hhcmdlIGlmIHRoZSBtdXJkZXIgd2VyZSBpbnZlc3RpZ2F0ZWQuIEhvd2V2ZXIsIHRoaXMgaGFkIGhhcHBlbmVkIGF0IGFuIGVhcmxpZXIgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMjkgQi5DLiwgc2l4IHllYXJzIGJlZm9yZSBDYWl1cyBiZWNhbWUgdHJpYnVuZS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzdHJvbmdlc3QgcHJvb2YgdGhhdCBMaXZpdXMgd2FzIHdlbGwgZGlzcG9zZWQgdG93YXJkcyB0aGUgcGVvcGxlIGFuZCBob25lc3QsIGxheSBpbiB0aGUgZmFjdCB0aGF0IGhlIG5ldmVyIGFwcGVhcmVkIHRvIHByb3Bvc2UgYW55dGhpbmcgZm9yIGhpbXNlbGYgb3IgaW4gaGlzIG93biBpbnRlcmVzdHMuIEZvciBoZSBtb3ZlZCB0byBzZW5kIG91dCBvdGhlciBtZW4gYXMgbWFuYWdlcnMgb2YgaGlzIGNvbG9uaWVzLCBhbmQgd291bGQgaGF2ZSBubyBoYW5kIGluIHRoZSBleHBlbmRpdHVyZSBvZiBtb25leXMsIHdoZXJlYXMgQ2FpdXMgaGFkIGFzc2lnbmVkIHRvIGhpbXNlbGYgbW9zdCBvZiBzdWNoIGZ1bmN0aW9ucyBhbmQgdGhlIG1vc3QgaW1wb3J0YW50IG9mIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgUnVicml1cywgb25lIG9mIGhpcyBjb2xsZWFndWVzIGluIHRoZSB0cmlidW5lc2hpcCwgYnJvdWdodCBpbiBhIGJpbGwgZm9yIHRoZSBmb3VuZGluZyBvZiBhIGNvbG9ueSBvbiB0aGUgc2l0ZSBvZiBDYXJ0aGFnZSwgd2hpY2ggaGFkIGJlZW4gZGVzdHJveWVkIGJ5IFNjaXBpbywgYW5kIENhaXVzLCB1cG9uIHdob20gdGhlIGxvdCBmZWxsLCBzYWlsZWQgb2ZmIHRvIEFmcmljYSBhcyBzdXBlcmludGVuZGVudCBvZiB0aGUgZm91bmRhdGlvbi4gSW4gaGlzIGFic2VuY2UsIHRoZXJlZm9yZSwgTGl2aXVzIG1hZGUgYWxsIHRoZSBtb3JlIGhlYWR3YXkgYWdhaW5zdCBoaW0sIHN0ZWFsaW5nIGludG8gdGhlIGdvb2QgZ3JhY2VzIG9mIHRoZSBwZW9wbGUgYW5kIGF0dGFjaGluZyB0aGVtIHRvIGhpbXNlbGYsIHBhcnRpY3VsYXJseSBieSBoaXMgY2FsdW1uaWF0aW9ucyBvZiBGdWx2aXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgRnVsdml1cyB3YXMgYSBmcmllbmQgb2YgQ2FpdXMsIGFuZCBoYWQgYmVlbiBjaG9zZW4gYSBjb21taXNzaW9uZXIgd2l0aCBoaW0gZm9yIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHB1YmxpYyBsYW5kOyBidXQgaGUgd2FzIGEgdHVyYnVsZW50IGZlbGxvdywgYW5kIHdhcyBoYXRlZCBvdXRyaWdodCBieSB0aGUgc2VuYXRvcnMuIE90aGVyIG1lbiBhbHNvIHN1c3BlY3RlZCBoaW0gb2Ygc3RpcnJpbmcgdXAgdHJvdWJsZSB3aXRoIHRoZSBhbGxpZXMgYW5kIG9mIHNlY3JldGx5IGluY2l0aW5nIHRoZSBJdGFsaWFucyB0byByZXZvbHQuIFRoZXNlIHRoaW5ncyB3ZXJlIHNhaWQgYWdhaW5zdCBoaW0gd2l0aG91dCBwcm9vZiBvciBpbnZlc3RpZ2F0aW9uLCBidXQgRnVsdml1cyBoaW1zZWxmIGJyb3VnaHQgdGhlbSBpbnRvIGdyZWF0ZXIgY3JlZGVuY2UgYnkgYSBwb2xpY3kgd2hpY2ggd2FzIHVuc291bmQgYW5kIHJldm9sdXRpb25hcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2Ugd2FzIHRoZSB1bmRvaW5nIG9mIENhaXVzLCB3aG8gY2FtZSBpbiBmb3IgYSBzaGFyZSBvZiB0aGUgaGF0cmVkIGFnYWluc3QgRnVsdml1cy4gQW5kIHdoZW4gU2NpcGlvIEFmcmljYW51cyBkaWVkIHdpdGhvdXQgYW55IGFwcGFyZW50IGNhdXNlLCBhbmQgY2VydGFpbiBtYXJrcyBvZiB2aW9sZW5jZSBhbmQgYmxvd3Mgd2VyZSB0aG91Z2h0IHRvIGJlIGluIGV2aWRlbmNlIGFsbCBvdmVyIGhpcyBkZWFkIGJvZHksIGFzIEkgaGF2ZSB3cml0dGVuIGluIGhpcyBMaWZlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBURyAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWJlcml1cyBHcmFjY2h1czwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvYmlibD4sIGFkIGZpbi4sIGFuZCBjZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjcuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJvbXVsdXM8L3RpdGxlPiwgeHh2aWkuIDQuIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1vc3Qgb2YgdGhlIGNvbnNlcXVlbnQgY2FsdW1ueSBmZWxsIHVwb24gRnVsdml1cywgd2hvIHdhcyBTY2lwaW8ncyBlbmVteSwgYW5kIGhhZCBhYnVzZWQgaGltIHRoYXQgZGF5IGZyb20gdGhlIHJvc3RyYSwgYnV0IHN1c3BpY2lvbiBhdHRhY2hlZCBpdHNlbGYgYWxzbyB0byBDYWl1cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBURyAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaWJlcml1cyBHcmFjY2h1czwvdGl0bGU+CiAgICAgICAgICAgICAgIDwvYmlibD4sIGFkIGZpbi4sIGFuZCBjZi4gdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpYmVyaXVzIEdyYWNjaHVzPC90aXRsZT4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyNy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Um9tdWx1czwvdGl0bGU+LCB4eHZpaS4gNC4gZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJvbXVsdXM8L3RpdGxlPiwgeHh2aWkuIDQuIGYuPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIGRlZWQgc28gbW9uc3Ryb3VzLCBhbmQgcGVycGV0cmF0ZWQgdXBvbiBhIG1hbiB3aG8gd2FzIHRoZSBmb3JlbW9zdCBhbmQgZ3JlYXRlc3QgUm9tYW4sIHdlbnQgdW5wdW5pc2hlZCwgbmF5LCB3YXMgbm90IGV2ZW4gc28gbXVjaCBhcyBwcm9iZWQ7IGZvciB0aGUgbXVsdGl0dWRlIHdlcmUgb3Bwb3NlZCB0byBhbnkganVkaWNpYWwgZW5xdWlyeSBhbmQgdGh3YXJ0ZWQgaXQsIGJlY2F1c2UgdGhleSBmZWFyZWQgdGhhdCBDYWl1cyBtaWdodCBiZSBpbXBsaWNhdGVkIGluIHRoZSBjaGFyZ2UgaWYgdGhlIG11cmRlciB3ZXJlIGludmVzdGlnYXRlZC4gSG93ZXZlciwgdGhpcyBoYWQgaGFwcGVuZWQgYXQgYW4gZWFybGllciB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTI5IEIuQy4sIHNpeCB5ZWFycyBiZWZvcmUgQ2FpdXMgYmVjYW1lIHRyaWJ1bmUuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBBZnJpY2EsIG1vcmVvdmVyLCBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHBsYW50aW5nIG9mIGEgY29sb255IG9uIHRoZSBzaXRlIG9mIENhcnRoYWdlLCB0byB3aGljaCBjb2xvbnkgQ2FpdXMgZ2F2ZSB0aGUgbmFtZSBKdW5vbmlhICh0aGF0IGlzIHRvIHNheSwgaW4gR3JlZWssIEhlcmFlYSksIHRoZXJlIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBtYW55IHByb2hpYml0b3J5IHNpZ25zIGZyb20gdGhlIGdvZHMuIEZvciB0aGUgbGVhZGluZyBzdGFuZGFyZCB3YXMgY2F1Z2h0IGJ5IGEgZ3VzdCBvZiB3aW5kLCBhbmQgdGhvdWdoIHRoZSBiZWFyZXIgY2x1bmcgdG8gaXQgd2l0aCBhbGwgaGlzIG1pZ2h0LCBpdCB3YXMgYnJva2VuIGludG8gcGllY2VzOyB0aGUgc2FjcmlmaWNpYWwgdmljdGltcyBseWluZyBvbiB0aGUgYWx0YXJzIHdlcmUgc2NhdHRlcmVkIGJ5IGEgaHVycmljYW5lIGFuZCBkaXNwZXJzZWQgYmV5b25kIHRoZSBib3VuZGFyeS1tYXJrcyBpbiB0aGUgcGxhbiBvZiB0aGUgY2l0eSwgYW5kIHRoZSBib3VuZGFyeS1tYXJrcyB0aGVtc2VsdmVzIHdlcmUgc2V0IHVwb24gYnkgd29sdmVzLCB3aG8gdG9yZSB0aGVtIHVwIGFuZCBjYXJyaWVkIHRoZW0gYSBsb25nIHdheSBvZmYuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyB0aGlzLCBDYWl1cyBzZXR0bGVkIGFuZCBhcnJhbmdlZCBldmVyeXRoaW5nIGluIHNldmVudHkgZGF5cyBhbGwgdG9sZCwgYW5kIHRoZW4gcmV0dXJuZWQgdG8gUm9tZSwgYmVjYXVzZSBoZSBsZWFybmVkIHRoYXQgRnVsdml1cyB3YXMgYmVpbmcgaGFyZCBwcmVzc2VkIGJ5IERydXN1cywgYW5kIGJlY2F1c2UgbWF0dGVycyB0aGVyZSByZXF1aXJlZCBoaXMgcHJlc2VuY2UuIEZvciBMdWNpdXMgT3BpbWl1cywgYSBtYW4gb2Ygb2xpZ2FyY2hpY2FsIHByaW5jaXBsZXMgYW5kIGluZmx1ZW50aWFsIGluIHRoZSBzZW5hdGUsIHdobyBoYWQgcHJldmlvdXNseSBmYWlsZWQgaW4gYSBjYW5kaWRhY3kgZm9yIHRoZSBjb25zdWxzaGlwICh3aGVuIENhaXVzIGhhZCBicm91Z2h0IGZvcndhcmQgRmFubml1cyBhbmQgc3VwcG9ydGVkIGhpcyBjYW52YXMgZm9yIHRoZSBvZmZpY2UpLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ0cgOC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG5vdyBoYWQgdGhlIGFpZCBhbmQgYXNzaXN0YW5jZSBvZiBtYW55LCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaXQgd2FzIGV4cGVjdGVkIHRoYXQgaGUgd291bGQgYmUgY29uc3VsLCBhbmQgdGhhdCBhcyBjb25zdWwgaGUgd291bGQgdHJ5IHRvIHB1dCBkb3duIENhaXVzLCB3aG9zZSBpbmZsdWVuY2Ugd2FzIGFscmVhZHkgc29tZXdoYXQgb24gdGhlIHdhbmUsIGFuZCB3aXRoIHdob3NlIHBlY3VsaWFyIG1lYXN1cmVzIHRoZSBwZW9wbGUgaGFkIGJlY29tZSBzYXRlZCwgYmVjYXVzZSB0aGUgbGVhZGVycyB3aG8gY291cnRlZCB0aGVpciBmYXZvdXIgd2VyZSBtYW55IGFuZCB0aGUgc2VuYXRlIHJlYWRpbHkgeWllbGRlZCB0byB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gQWZyaWNhLCBtb3Jlb3ZlciwgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBwbGFudGluZyBvZiBhIGNvbG9ueSBvbiB0aGUgc2l0ZSBvZiBDYXJ0aGFnZSwgdG8gd2hpY2ggY29sb255IENhaXVzIGdhdmUgdGhlIG5hbWUgSnVub25pYSAodGhhdCBpcyB0byBzYXksIGluIEdyZWVrLCBIZXJhZWEpLCB0aGVyZSBhcmUgc2FpZCB0byBoYXZlIGJlZW4gbWFueSBwcm9oaWJpdG9yeSBzaWducyBmcm9tIHRoZSBnb2RzLiBGb3IgdGhlIGxlYWRpbmcgc3RhbmRhcmQgd2FzIGNhdWdodCBieSBhIGd1c3Qgb2Ygd2luZCwgYW5kIHRob3VnaCB0aGUgYmVhcmVyIGNsdW5nIHRvIGl0IHdpdGggYWxsIGhpcyBtaWdodCwgaXQgd2FzIGJyb2tlbiBpbnRvIHBpZWNlczsgdGhlIHNhY3JpZmljaWFsIHZpY3RpbXMgbHlpbmcgb24gdGhlIGFsdGFycyB3ZXJlIHNjYXR0ZXJlZCBieSBhIGh1cnJpY2FuZSBhbmQgZGlzcGVyc2VkIGJleW9uZCB0aGUgYm91bmRhcnktbWFya3MgaW4gdGhlIHBsYW4gb2YgdGhlIGNpdHksIGFuZCB0aGUgYm91bmRhcnktbWFya3MgdGhlbXNlbHZlcyB3ZXJlIHNldCB1cG9uIGJ5IHdvbHZlcywgd2hvIHRvcmUgdGhlbSB1cCBhbmQgY2FycmllZCB0aGVtIGEgbG9uZyB3YXkgb2ZmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyB0aGlzLCBDYWl1cyBzZXR0bGVkIGFuZCBhcnJhbmdlZCBldmVyeXRoaW5nIGluIHNldmVudHkgZGF5cyBhbGwgdG9sZCwgYW5kIHRoZW4gcmV0dXJuZWQgdG8gUm9tZSwgYmVjYXVzZSBoZSBsZWFybmVkIHRoYXQgRnVsdml1cyB3YXMgYmVpbmcgaGFyZCBwcmVzc2VkIGJ5IERydXN1cywgYW5kIGJlY2F1c2UgbWF0dGVycyB0aGVyZSByZXF1aXJlZCBoaXMgcHJlc2VuY2UuIEZvciBMdWNpdXMgT3BpbWl1cywgYSBtYW4gb2Ygb2xpZ2FyY2hpY2FsIHByaW5jaXBsZXMgYW5kIGluZmx1ZW50aWFsIGluIHRoZSBzZW5hdGUsIHdobyBoYWQgcHJldmlvdXNseSBmYWlsZWQgaW4gYSBjYW5kaWRhY3kgZm9yIHRoZSBjb25zdWxzaGlwICh3aGVuIENhaXVzIGhhZCBicm91Z2h0IGZvcndhcmQgRmFubml1cyBhbmQgc3VwcG9ydGVkIGhpcyBjYW52YXMgZm9yIHRoZSBvZmZpY2UpLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENHIDguMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBub3cgaGFkIHRoZSBhaWQgYW5kIGFzc2lzdGFuY2Ugb2YgbWFueSwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDRyA4LjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCBiZSBjb25zdWwsIGFuZCB0aGF0IGFzIGNvbnN1bCBoZSB3b3VsZCB0cnkgdG8gcHV0IGRvd24gQ2FpdXMsIHdob3NlIGluZmx1ZW5jZSB3YXMgYWxyZWFkeSBzb21ld2hhdCBvbiB0aGUgd2FuZSwgYW5kIHdpdGggd2hvc2UgcGVjdWxpYXIgbWVhc3VyZXMgdGhlIHBlb3BsZSBoYWQgYmVjb21lIHNhdGVkLCBiZWNhdXNlIHRoZSBsZWFkZXJzIHdobyBjb3VydGVkIHRoZWlyIGZhdm91ciB3ZXJlIG1hbnkgYW5kIHRoZSBzZW5hdGUgcmVhZGlseSB5aWVsZGVkIHRvIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHJldHVybmluZyB0byBSb21lLCBpbiB0aGUgZmlyc3QgcGxhY2UgQ2FpdXMgY2hhbmdlZCBoaXMgcmVzaWRlbmNlIGZyb20gdGhlIFBhbGF0aW5lIGhpbGwgdG8gdGhlIHJlZ2lvbiBhZGpvaW5pbmcgdGhlIGZvcnVtLCB3aGljaCBoZSB0aG91Z2h0IG1vcmUgZGVtb2NyYXRpYywgc2luY2UgbW9zdCBvZiB0aGUgcG9vciBhbmQgbG93bHkgaGFkIGNvbWUgdG8gbGl2ZSB0aGVyZTsgaW4gdGhlIG5leHQgcGxhY2UsIGhlIHByb211bGdhdGVkIHRoZSByZXN0IG9mIGhpcyBsYXdzLCBpbnRlbmRpbmcgdG8gZ2V0IHRoZSBwZW9wbGUncyB2b3RlIHVwb24gdGhlbS4gQnV0IHdoZW4gYSB0aHJvbmcgY2FtZSB0b2dldGhlciBmcm9tIGFsbCBwYXJ0cyBvZiBJdGFseSBmb3IgaGlzIHN1cHBvcnQsIHRoZSBzZW5hdGUgcHJldmFpbGVkIHVwb24gdGhlIGNvbnN1bCBGYW5uaXVzIHRvIGRyaXZlIG91dCBvZiB0aGUgY2l0eSBhbGwgd2hvIHdlcmUgbm90IFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGEgc3RyYW5nZSBhbmQgdW51c3VhbCBwcm9jbGFtYXRpb24gd2FzIG1hZGUsIHRvIHRoZSBlZmZlY3QgdGhhdCBub25lIG9mIHRoZSBhbGxpZXMgYW5kIGZyaWVuZHMgb2YgUm9tZSBzaG91bGQgYXBwZWFyIGluIHRoZSBjaXR5IGR1cmluZyB0aG9zZSBkYXlzOyB3aGVyZXVwb24gQ2FpdXMgcHVibGlzaGVkIGEgY291bnRlciBlZGljdCBpbiB3aGljaCBoZSBkZW5vdW5jZWQgdGhlIGNvbnN1bCwgYW5kIHByb21pc2VkIHRoZSBhbGxpZXMgaGlzIHN1cHBvcnQsIGluIGNhc2UgdGhleSBzaG91bGQgcmVtYWluIHRoZXJlLiBIZSBkaWQgbm90LCBob3dldmVyLCBnaXZlIHRoZW0gaGlzIHN1cHBvcnQsIGJ1dCB3aGVuIGhlIHNhdyBvbmUgb2YgaGlzIGNvbXJhZGVzIGFuZCBndWVzdC1mcmllbmRzIGRyYWdnZWQgb2ZmIGJ5IHRoZSBsaWN0b3JzIG9mIEZhbm5pdXMsIGhlIHBhc3NlZCBieSB3aXRob3V0IGdpdmluZyBoaW0gYW55IGhlbHAsIGVpdGhlciBiZWNhdXNlIGhlIGZlYXJlZCB0byBnaXZlIGEgcHJvb2YgdGhhdCBoaXMgcG93ZXIgd2FzIGFscmVhZHkgb24gdGhlIGRlY2xpbmUsIG9yIGJlY2F1c2UgaGUgd2FzIHVud2lsbGluZywgYXMgaGUgc2FpZCwgYnkgaGlzIG93biBhY3RzIHRvIGFmZm9yZCBoaXMgZW5lbWllcyB0aGUgb2NjYXNpb25zIHdoaWNoIHRoZXkgc291Z2h0IGZvciBhIGNvbmZsaWN0IGF0IGNsb3NlIHF1YXJ0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmV0dXJuaW5nIHRvIFJvbWUsIGluIHRoZSBmaXJzdCBwbGFjZSBDYWl1cyBjaGFuZ2VkIGhpcyByZXNpZGVuY2UgZnJvbSB0aGUgUGFsYXRpbmUgaGlsbCB0byB0aGUgcmVnaW9uIGFkam9pbmluZyB0aGUgZm9ydW0sIHdoaWNoIGhlIHRob3VnaHQgbW9yZSBkZW1vY3JhdGljLCBzaW5jZSBtb3N0IG9mIHRoZSBwb29yIGFuZCBsb3dseSBoYWQgY29tZSB0byBsaXZlIHRoZXJlOyBpbiB0aGUgbmV4dCBwbGFjZSwgaGUgcHJvbXVsZ2F0ZWQgdGhlIHJlc3Qgb2YgaGlzIGxhd3MsIGludGVuZGluZyB0byBnZXQgdGhlIHBlb3BsZSdzIHZvdGUgdXBvbiB0aGVtLiBCdXQgd2hlbiBhIHRocm9uZyBjYW1lIHRvZ2V0aGVyIGZyb20gYWxsIHBhcnRzIG9mIEl0YWx5IGZvciBoaXMgc3VwcG9ydCwgdGhlIHNlbmF0ZSBwcmV2YWlsZWQgdXBvbiB0aGUgY29uc3VsIEZhbm5pdXMgdG8gZHJpdmUgb3V0IG9mIHRoZSBjaXR5IGFsbCB3aG8gd2VyZSBub3QgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhIHN0cmFuZ2UgYW5kIHVudXN1YWwgcHJvY2xhbWF0aW9uIHdhcyBtYWRlLCB0byB0aGUgZWZmZWN0IHRoYXQgbm9uZSBvZiB0aGUgYWxsaWVzIGFuZCBmcmllbmRzIG9mIFJvbWUgc2hvdWxkIGFwcGVhciBpbiB0aGUgY2l0eSBkdXJpbmcgdGhvc2UgZGF5czsgd2hlcmV1cG9uIENhaXVzIHB1Ymxpc2hlZCBhIGNvdW50ZXIgZWRpY3QgaW4gd2hpY2ggaGUgZGVub3VuY2VkIHRoZSBjb25zdWwsIGFuZCBwcm9taXNlZCB0aGUgYWxsaWVzIGhpcyBzdXBwb3J0LCBpbiBjYXNlIHRoZXkgc2hvdWxkIHJlbWFpbiB0aGVyZS4gSGUgZGlkIG5vdCwgaG93ZXZlciwgZ2l2ZSB0aGVtIGhpcyBzdXBwb3J0LCBidXQgd2hlbiBoZSBzYXcgb25lIG9mIGhpcyBjb21yYWRlcyBhbmQgZ3Vlc3QtZnJpZW5kcyBkcmFnZ2VkIG9mZiBieSB0aGUgbGljdG9ycyBvZiBGYW5uaXVzLCBoZSBwYXNzZWQgYnkgd2l0aG91dCBnaXZpbmcgaGltIGFueSBoZWxwLCBlaXRoZXIgYmVjYXVzZSBoZSBmZWFyZWQgdG8gZ2l2ZSBhIHByb29mIHRoYXQgaGlzIHBvd2VyIHdhcyBhbHJlYWR5IG9uIHRoZSBkZWNsaW5lLCBvciBiZWNhdXNlIGhlIHdhcyB1bndpbGxpbmcsIGFzIGhlIHNhaWQsIGJ5IGhpcyBvd24gYWN0cyB0byBhZmZvcmQgaGlzIGVuZW1pZXMgdGhlIG9jY2FzaW9ucyB3aGljaCB0aGV5IHNvdWdodCBmb3IgYSBjb25mbGljdCBhdCBjbG9zZSBxdWFydGVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGl0IGNoYW5jZWQgdGhhdCBoZSBoYWQgaW5jdXJyZWQgdGhlIGFuZ2VyIG9mIGhpcyBjb2xsZWFndWVzIGluIG9mZmljZSwgYW5kIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbi4gVGhlIHBlb3BsZSB3ZXJlIGdvaW5nIHRvIGVuam95IGFuIGV4aGliaXRpb24gb2YgZ2xhZGlhdG9ycyBpbiB0aGUgZm9ydW0sIGFuZCBtb3N0IG9mIHRoZSBtYWdpc3RyYXRlcyBoYWQgY29uc3RydWN0ZWQgc2VhdHMgZm9yIHRoZSBzaG93IHJvdW5kIGFib3V0LCBhbmQgd2VyZSBvZmZlcmluZyB0aGVtIGZvciBoaXJlLiBDYWl1cyBvcmRlcmVkIHRoZW0gdG8gdGFrZSBkb3duIHRoZXNlIHNlYXRzLCBpbiBvcmRlciB0aGF0IHRoZSBwb29yIG1pZ2h0IGJlIGFibGUgdG8gZW5qb3kgdGhlIHNwZWN0YWNsZSBmcm9tIHRob3NlIHBsYWNlcyB3aXRob3V0IHBheWluZyBoaXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2Ugbm8gb25lIHBhaWQgYW55IGF0dGVudGlvbiB0byBoaXMgY29tbWFuZCwgaGUgd2FpdGVkIHRpbGwgdGhlIG5pZ2h0IGJlZm9yZSB0aGUgc3BlY3RhY2xlLCBhbmQgdGhlbiwgdGFraW5nIGFsbCB0aGUgd29ya21lbiB3aG9tIGhlIGhhZCB1bmRlciBoaXMgb3JkZXJzIGluIHB1YmxpYyBjb250cmFjdHMsIGhlIHB1bGxlZCBkb3duIHRoZSBzZWF0cywgYW5kIHdoZW4gZGF5IGNhbWUgaGUgaGFkIHRoZSBwbGFjZSBhbGwgY2xlYXIgZm9yIHRoZSBwZW9wbGUuIEZvciB0aGlzIHByb2NlZWRpbmcgdGhlIHBvcHVsYWNlIHRob3VnaHQgaGltIGEgbWFuLCBidXQgaGlzIGNvbGxlYWd1ZXMgd2VyZSBhbm5veWVkIGFuZCB0aG91Z2h0IGhpbSByZWNrbGVzcyBhbmQgdmlvbGVudC4gSXQgd2FzIGJlbGlldmVkIGFsc28gdGhhdCB0aGlzIGNvbmR1Y3QgY29zdCBoaW0gaGlzIGVsZWN0aW9uIHRvIHRoZSB0cmlidW5hdGUgZm9yIHRoZSB0aGlyZCB0aW1lLCBzaW5jZSwgYWx0aG91Z2ggaGUgZ290IGEgbWFqb3JpdHkgb2YgdGhlIHZvdGVzLCBoaXMgY29sbGVhZ3VlcyB3ZXJlIHVuanVzdCBhbmQgZnJhdWR1bGVudCBpbiB0aGVpciBwcm9jbGFtYXRpb24gYW5kIHJldHVybnMuIFRoaXMsIGhvd2V2ZXIsIHdhcyBkaXNwdXRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHRvb2sgaGlzIGZhaWx1cmUgb3Zlcm11Y2ggdG8gaGVhcnQsIGFuZCB3aGF0IGlzIG1vcmUsIHdoZW4gaGlzIGVuZW1pZXMgd2VyZSBleHVsdGluZyBvdmVyIGhpbSwgaGUgdG9sZCB0aGVtLCBpdCBpcyBzYWlkLCB3aXRoIG1vcmUgYm9sZG5lc3MgdGhhbiB3YXMgZml0dGluZywgdGhhdCB0aGV5IHdlcmUgbGF1Z2hpbmcgd2l0aCBzYXJkb25pYyBsYXVnaHRlciwgYW5kIHdlcmUgbm90IGF3YXJlIG9mIHRoZSBncmVhdCBkYXJrbmVzcyB0aGF0IGVudmVsb3BlZCB0aGVtIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBwdWJsaWMgbWVhc3VyZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qmxhc3MgY29tcGFyZXMgdGhlIGxhdWdodGVyIG9mIHRoZSBkb29tZWQgc3VpdG9ycyBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMjAuMzQ2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgeHguIDM0NiBmZi48L2JpYmw+4oCUdGhlIGZhdHVvdXMgc21pbGUgb2YgbWVuIHdob3NlIGZhdGUgaXMgc2VhbGVkLCB0aG91Z2ggdGhleSBhcmUgdW5hd2FyZSBvZiBpdC48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpdCBjaGFuY2VkIHRoYXQgaGUgaGFkIGluY3VycmVkIHRoZSBhbmdlciBvZiBoaXMgY29sbGVhZ3VlcyBpbiBvZmZpY2UsIGFuZCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb24uIFRoZSBwZW9wbGUgd2VyZSBnb2luZyB0byBlbmpveSBhbiBleGhpYml0aW9uIG9mIGdsYWRpYXRvcnMgaW4gdGhlIGZvcnVtLCBhbmQgbW9zdCBvZiB0aGUgbWFnaXN0cmF0ZXMgaGFkIGNvbnN0cnVjdGVkIHNlYXRzIGZvciB0aGUgc2hvdyByb3VuZCBhYm91dCwgYW5kIHdlcmUgb2ZmZXJpbmcgdGhlbSBmb3IgaGlyZS4gQ2FpdXMgb3JkZXJlZCB0aGVtIHRvIHRha2UgZG93biB0aGVzZSBzZWF0cywgaW4gb3JkZXIgdGhhdCB0aGUgcG9vciBtaWdodCBiZSBhYmxlIHRvIGVuam95IHRoZSBzcGVjdGFjbGUgZnJvbSB0aG9zZSBwbGFjZXMgd2l0aG91dCBwYXlpbmcgaGlyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBubyBvbmUgcGFpZCBhbnkgYXR0ZW50aW9uIHRvIGhpcyBjb21tYW5kLCBoZSB3YWl0ZWQgdGlsbCB0aGUgbmlnaHQgYmVmb3JlIHRoZSBzcGVjdGFjbGUsIGFuZCB0aGVuLCB0YWtpbmcgYWxsIHRoZSB3b3JrbWVuIHdob20gaGUgaGFkIHVuZGVyIGhpcyBvcmRlcnMgaW4gcHVibGljIGNvbnRyYWN0cywgaGUgcHVsbGVkIGRvd24gdGhlIHNlYXRzLCBhbmQgd2hlbiBkYXkgY2FtZSBoZSBoYWQgdGhlIHBsYWNlIGFsbCBjbGVhciBmb3IgdGhlIHBlb3BsZS4gRm9yIHRoaXMgcHJvY2VlZGluZyB0aGUgcG9wdWxhY2UgdGhvdWdodCBoaW0gYSBtYW4sIGJ1dCBoaXMgY29sbGVhZ3VlcyB3ZXJlIGFubm95ZWQgYW5kIHRob3VnaHQgaGltIHJlY2tsZXNzIGFuZCB2aW9sZW50LiBJdCB3YXMgYmVsaWV2ZWQgYWxzbyB0aGF0IHRoaXMgY29uZHVjdCBjb3N0IGhpbSBoaXMgZWxlY3Rpb24gdG8gdGhlIHRyaWJ1bmF0ZSBmb3IgdGhlIHRoaXJkIHRpbWUsIHNpbmNlLCBhbHRob3VnaCBoZSBnb3QgYSBtYWpvcml0eSBvZiB0aGUgdm90ZXMsIGhpcyBjb2xsZWFndWVzIHdlcmUgdW5qdXN0IGFuZCBmcmF1ZHVsZW50IGluIHRoZWlyIHByb2NsYW1hdGlvbiBhbmQgcmV0dXJucy4gVGhpcywgaG93ZXZlciwgd2FzIGRpc3B1dGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB0b29rIGhpcyBmYWlsdXJlIG92ZXJtdWNoIHRvIGhlYXJ0LCBhbmQgd2hhdCBpcyBtb3JlLCB3aGVuIGhpcyBlbmVtaWVzIHdlcmUgZXh1bHRpbmcgb3ZlciBoaW0sIGhlIHRvbGQgdGhlbSwgaXQgaXMgc2FpZCwgd2l0aCBtb3JlIGJvbGRuZXNzIHRoYW4gd2FzIGZpdHRpbmcsIHRoYXQgdGhleSB3ZXJlIGxhdWdoaW5nIHdpdGggc2FyZG9uaWMgbGF1Z2h0ZXIsIGFuZCB3ZXJlIG5vdCBhd2FyZSBvZiB0aGUgZ3JlYXQgZGFya25lc3MgdGhhdCBlbnZlbG9wZWQgdGhlbSBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgcHVibGljIG1lYXN1cmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qmxhc3MgY29tcGFyZXMgdGhlIGxhdWdodGVyIG9mIHRoZSBkb29tZWQgc3VpdG9ycyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMC4zNDYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHh4LiAzNDYgZmYuPC9iaWJsPuKAlHRoZSBmYXR1b3VzIHNtaWxlIG9mIG1lbiB3aG9zZSBmYXRlIGlzIHNlYWxlZCwgdGhvdWdoIHRoZXkgYXJlIHVuYXdhcmUgb2YgaXQuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAyMC4zNDYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHh4LiAzNDYgZmYuPC9iaWJsPuKAlHRoZSBmYXR1b3VzIHNtaWxlIG9mIG1lbiB3aG9zZSBmYXRlIGlzIHNlYWxlZCwgdGhvdWdoIHRoZXkgYXJlIHVuYXdhcmUgb2YgaXQuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB4eC4gMzQ2IGZmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVtaWVzIG9mIENhaXVzIGFsc28gZWZmZWN0ZWQgdGhlIGVsZWN0aW9uIG9mIE9waW1pdXMgYXMgY29uc3VsLCBhbmQgdGhlbiBwcm9jZWVkZWQgdG8gcmV2b2tlIG1hbnkgb2YgdGhlIGxhd3Mgd2hpY2ggQ2FpdXMgaGFkIHNlY3VyZWQgYW5kIHRvIG1lZGRsZSB3aXRoIHRoZSBvcmdhbml6YXRpb24gb2YgdGhlIGNvbG9ueSBhdCBDYXJ0aGFnZS4gVGhpcyB3YXMgYnkgd2F5IG9mIGlycml0YXRpbmcgQ2FpdXMsIHRoYXQgaGUgbWlnaHQgZnVybmlzaCBncm91bmQgZm9yIHJlc2VudG1lbnQsIGFuZCBzbyBiZSBnb3QgcmlkIG9mLiBBdCBmaXJzdCBoZSBlbmR1cmVkIGFsbCB0aGlzIHBhdGllbnRseSwgYnV0IGF0IGxhc3QsIHVuZGVyIHRoZSBpbnN0aWdhdGlvbnMgb2YgaGlzIGZyaWVuZHMsIGFuZCBlc3BlY2lhbGx5IG9mIEZ1bHZpdXMsIGhlIHNldCBvdXQgdG8gZ2F0aGVyIGEgZnJlc2ggYm9keSBvZiBwYXJ0aXNhbnMgZm9yIG9wcG9zaXRpb24gdG8gdGhlIGNvbnN1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgd2UgYXJlIHRvbGQsIGhpcyBtb3RoZXIgYWxzbyB0b29rIGFjdGl2ZSBwYXJ0IGluIGhpcyBzZWRpdGlvdXMgbWVhc3VyZXMsIGJ5IHNlY3JldGx5IGhpcmluZyBmcm9tIGZvcmVpZ24gcGFydHMgYW5kIHNlbmRpbmcgdG8gUm9tZSBtZW4gd2hvIHdlcmUgb3N0ZW5zaWJseSByZWFwZXJzOyBmb3IgdG8gdGhpcyBtYXR0ZXIgdGhlcmUgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIG9ic2N1cmUgYWxsdXNpb25zIGluIGhlciBsZXR0ZXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDU4IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgNTgsIDIxMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdG8gaGVyIHNvbi4gT3RoZXJzLCBob3dldmVyLCBzYXkgdGhhdCBDb3JuZWxpYSB3YXMgdmVyeSBtdWNoIGRpc3BsZWFzZWQgd2l0aCB0aGVzZSBhY3Rpdml0aWVzIG9mIGhlciBzb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVuZW1pZXMgb2YgQ2FpdXMgYWxzbyBlZmZlY3RlZCB0aGUgZWxlY3Rpb24gb2YgT3BpbWl1cyBhcyBjb25zdWwsIGFuZCB0aGVuIHByb2NlZWRlZCB0byByZXZva2UgbWFueSBvZiB0aGUgbGF3cyB3aGljaCBDYWl1cyBoYWQgc2VjdXJlZCBhbmQgdG8gbWVkZGxlIHdpdGggdGhlIG9yZ2FuaXphdGlvbiBvZiB0aGUgY29sb255IGF0IENhcnRoYWdlLiBUaGlzIHdhcyBieSB3YXkgb2YgaXJyaXRhdGluZyBDYWl1cywgdGhhdCBoZSBtaWdodCBmdXJuaXNoIGdyb3VuZCBmb3IgcmVzZW50bWVudCwgYW5kIHNvIGJlIGdvdCByaWQgb2YuIEF0IGZpcnN0IGhlIGVuZHVyZWQgYWxsIHRoaXMgcGF0aWVudGx5LCBidXQgYXQgbGFzdCwgdW5kZXIgdGhlIGluc3RpZ2F0aW9ucyBvZiBoaXMgZnJpZW5kcywgYW5kIGVzcGVjaWFsbHkgb2YgRnVsdml1cywgaGUgc2V0IG91dCB0byBnYXRoZXIgYSBmcmVzaCBib2R5IG9mIHBhcnRpc2FucyBmb3Igb3Bwb3NpdGlvbiB0byB0aGUgY29uc3VsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHdlIGFyZSB0b2xkLCBoaXMgbW90aGVyIGFsc28gdG9vayBhY3RpdmUgcGFydCBpbiBoaXMgc2VkaXRpb3VzIG1lYXN1cmVzLCBieSBzZWNyZXRseSBoaXJpbmcgZnJvbSBmb3JlaWduIHBhcnRzIGFuZCBzZW5kaW5nIHRvIFJvbWUgbWVuIHdobyB3ZXJlIG9zdGVuc2libHkgcmVhcGVyczsgZm9yIHRvIHRoaXMgbWF0dGVyIHRoZXJlIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBvYnNjdXJlIGFsbHVzaW9ucyBpbiBoZXIgbGV0dGVyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gNTgiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIDU4LCAyMTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRvIGhlciBzb24uIE90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgQ29ybmVsaWEgd2FzIHZlcnkgbXVjaCBkaXNwbGVhc2VkIHdpdGggdGhlc2UgYWN0aXZpdGllcyBvZiBoZXIgc29uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDU4IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCA1OCwgMjExLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIDU4LCAyMTEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmUgdGhhdCBhcyBpdCBtYXksIG9uIHRoZSBkYXkgd2hlbiBPcGltaXVzIGFuZCBoaXMgc3VwcG9ydGVycyB3ZXJlIGdvaW5nIHRvIGFubnVsIHRoZSBsYXdzLCB0aGUgQ2FwaXRvbCBoYWQgYmVlbiBvY2N1cGllZCBieSBib3RoIGZhY3Rpb25zIHNpbmNlIGVhcmxpZXN0IG1vcm5pbmcsIGFuZCBhZnRlciB0aGUgY29uc3VsIGhhZCBvZmZlcmVkIHNhY3JpZmljZSwgb25lIG9mIGhpcyBzZXJ2YW50cywgUXVpbnR1cyBBbnR5bGxpdXMsIGFzIGhlIHdhcyBjYXJyeWluZyBmcm9tIG9uZSBwbGFjZSB0byBhbm90aGVyIHRoZSBlbnRyYWlscyBvZiB0aGUgdmljdGltcywgc2FpZCB0byB0aGUgcGFydGlzYW5zIG9mIEZ1bHZpdXM6ICAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1ha2Ugd2F5IGZvciBob25lc3QgY2l0aXplbnMsIHllIHJhc2NhbHMhPC9xPiBTb21lIHNheSwgdG9vLCB0aGF0IGFsb25nIHdpdGggdGhpcyBzcGVlY2ggQW50eWxsaXVzIGJhcmVkIGhpcyBhcm0gYW5kIHdhdmVkIGl0IHdpdGggYW4gaW5zdWx0aW5nIGdlc3R1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlIGhlIHdhcyBraWxsZWQgYXQgb25jZSBhbmQgb24gdGhlIHNwb3QsIHN0YWJiZWQgd2l0aCBsYXJnZSB3cml0aW5nIHN0eWxlcyBzYWlkIHRvIGhhdmUgYmVlbiBtYWRlIGZvciBqdXN0IHN1Y2ggYSBwdXJwb3NlLiBUaGUgbXVsdGl0dWRlIHdlcmUgY29tcGxldGVseSBjb25mdXNlZCBieSB0aGUgbXVyZGVyLCBidXQgaXQgcHJvZHVjZWQgYW4gb3Bwb3NpdGUgc3RhdGUgb2YgbWluZCBpbiB0aGUgbGVhZGVycyBvZiB0aGUgdHdvIGZhY3Rpb25zLiBDYWl1cyB3YXMgZGlzdHJlc3NlZCwgYW5kIHVwYnJhaWRlZCBoaXMgZm9sbG93ZXJzIGZvciBoYXZpbmcgZ2l2ZW4gdGhlaXIgZW5lbWllcyBncm91bmQgZm9yIGFjY3VzaW5nIHRoZW0gd2hpY2ggaGFkIGxvbmcgYmVlbiBkZXNpcmVkOyBidXQgT3BpbWl1cywgYXMgdGhvdWdoIGhlIGhhZCBnb3Qgc29tZXRoaW5nIGZvciB3aGljaCBoZSB3YXMgd2FpdGluZywgd2FzIGVsYXRlZCwgYW5kIHVyZ2VkIHRoZSBwZW9wbGUgb24gdG8gdmVuZ2VhbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlIHRoYXQgYXMgaXQgbWF5LCBvbiB0aGUgZGF5IHdoZW4gT3BpbWl1cyBhbmQgaGlzIHN1cHBvcnRlcnMgd2VyZSBnb2luZyB0byBhbm51bCB0aGUgbGF3cywgdGhlIENhcGl0b2wgaGFkIGJlZW4gb2NjdXBpZWQgYnkgYm90aCBmYWN0aW9ucyBzaW5jZSBlYXJsaWVzdCBtb3JuaW5nLCBhbmQgYWZ0ZXIgdGhlIGNvbnN1bCBoYWQgb2ZmZXJlZCBzYWNyaWZpY2UsIG9uZSBvZiBoaXMgc2VydmFudHMsIFF1aW50dXMgQW50eWxsaXVzLCBhcyBoZSB3YXMgY2FycnlpbmcgZnJvbSBvbmUgcGxhY2UgdG8gYW5vdGhlciB0aGUgZW50cmFpbHMgb2YgdGhlIHZpY3RpbXMsIHNhaWQgdG8gdGhlIHBhcnRpc2FucyBvZiBGdWx2aXVzOiAgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1ha2Ugd2F5IGZvciBob25lc3QgY2l0aXplbnMsIHllIHJhc2NhbHMhPC9xPiBTb21lIHNheSwgdG9vLCB0aGF0IGFsb25nIHdpdGggdGhpcyBzcGVlY2ggQW50eWxsaXVzIGJhcmVkIGhpcyBhcm0gYW5kIHdhdmVkIGl0IHdpdGggYW4gaW5zdWx0aW5nIGdlc3R1cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlIGhlIHdhcyBraWxsZWQgYXQgb25jZSBhbmQgb24gdGhlIHNwb3QsIHN0YWJiZWQgd2l0aCBsYXJnZSB3cml0aW5nIHN0eWxlcyBzYWlkIHRvIGhhdmUgYmVlbiBtYWRlIGZvciBqdXN0IHN1Y2ggYSBwdXJwb3NlLiBUaGUgbXVsdGl0dWRlIHdlcmUgY29tcGxldGVseSBjb25mdXNlZCBieSB0aGUgbXVyZGVyLCBidXQgaXQgcHJvZHVjZWQgYW4gb3Bwb3NpdGUgc3RhdGUgb2YgbWluZCBpbiB0aGUgbGVhZGVycyBvZiB0aGUgdHdvIGZhY3Rpb25zLiBDYWl1cyB3YXMgZGlzdHJlc3NlZCwgYW5kIHVwYnJhaWRlZCBoaXMgZm9sbG93ZXJzIGZvciBoYXZpbmcgZ2l2ZW4gdGhlaXIgZW5lbWllcyBncm91bmQgZm9yIGFjY3VzaW5nIHRoZW0gd2hpY2ggaGFkIGxvbmcgYmVlbiBkZXNpcmVkOyBidXQgT3BpbWl1cywgYXMgdGhvdWdoIGhlIGhhZCBnb3Qgc29tZXRoaW5nIGZvciB3aGljaCBoZSB3YXMgd2FpdGluZywgd2FzIGVsYXRlZCwgYW5kIHVyZ2VkIHRoZSBwZW9wbGUgb24gdG8gdmVuZ2VhbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIHNob3dlciBvZiByYWluIGZlbGwganVzdCB0aGVuLCBhbmQgdGhlIGFzc2VtYmx5IHdhcyBkaXNzb2x2ZWQ7IGJ1dCBlYXJseSBuZXh0IG1vcm5pbmcgdGhlIGNvbnN1bCBjYWxsZWQgdGhlIHNlbmF0ZSB0b2dldGhlciBpbmRvb3JzIGFuZCBwcm9jZWVkZWQgdG8gdHJhbnNhY3QgYnVzaW5lc3MsIHdoaWxlIG90aGVycyBwbGFjZWQgdGhlIGJvZHkgb2YgQW50eWxsaXVzIHdpdGhvdXQgY292ZXJpbmcgdXBvbiBhIGJpZXIsIGFuZCBjYXJyaWVkIGl0LCBhcyB0aGV5IGhhZCBhZ3JlZWQgdG8gZG8sIHRocm91Z2ggdGhlIGZvcnVtIGFuZCBwYXN0IHRoZSBzZW5hdGUtaG91c2UsIHdpdGggd2FpbGluZ3MgYW5kIGxhbWVudGF0aW9ucy4gT3BpbWl1cyBrbmV3IHdoYXQgd2FzIGdvaW5nIG9uLCBidXQgcHJldGVuZGVkIHRvIGJlIHN1cnByaXNlZCwgc28gdGhhdCBldmVuIHRoZSBzZW5hdG9ycyB3ZW50IG91dCBpbnRvIHRoZSBmb3J1bS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJpZXIgaGFkIGJlZW4gc2V0IGRvd24gaW4gdGhlIG1pZHN0IG9mIHRoZSB0aHJvbmcsIHRoZSBzZW5hdG9ycyBiZWdhbiB0byBpbnZlaWdoIGFnYWluc3Qgd2hhdCB0aGV5IGNhbGxlZCBhIGhlaW5vdXMgYW5kIG1vbnN0cm91cyBjcmltZSwgYnV0IHRoZSBwZW9wbGUgd2VyZSBtb3ZlZCB0byBoYXRyZWQgYW5kIGFidXNlIG9mIHRoZSBvbGlnYXJjaHMsIHdobywgdGhleSBzYWlkLCBhZnRlciBtdXJkZXJpbmcgVGliZXJpdXMgR3JhY2NodXMgb24gdGhlIENhcGl0b2wgd2l0aCB0aGVpciBvd24gaGFuZHMsIHRyaWJ1bmUgdGhhdCBoZSB3YXMsIGhhZCBhY3R1YWxseSBmbHVuZyBhd2F5IGhpcyBkZWFkIGJvZHkgYmVzaWRlczsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcyBBbnR5bGxpdXMsIGEgbWVyZSBzZXJ2YW50LCB3aG8gcGVyaGFwcyBoYWQgc3VmZmVyZWQgbW9yZSB0aGFuIGhlIGRlc2VydmVkLCBidXQgd2FzIGhpbXNlbGYgY2hpZWZseSB0byBibGFtZSBmb3IgaXQsIGhhZCBiZWVuIGxhaWQgb3V0IGluIHRoZSBmb3J1bSwgYW5kIHdhcyBzdXJyb3VuZGVkIGJ5IHRoZSBSb21hbiBzZW5hdGUsIHdoaWNoIHNoZWQgdGVhcnMgYW5kIHNoYXJlZCBpbiB0aGUgb2JzZXF1aWVzIG9mIGEgaGlyZWxpbmcgZmVsbG93LCB0byB0aGUgZW5kIHRoYXQgdGhlIHNvbGUgcmVtYWluaW5nIGNoYW1waW9uIG9mIHRoZSBwZW9wbGUgbWlnaHQgYmUgZG9uZSBhd2F5IHdpdGguIFRoZW4gdGhlIHNlbmF0b3JzIHdlbnQgYmFjayBpbnRvIHRoZSBzZW5hdGUtaG91c2UsIHdoZXJlIHRoZXkgZm9ybWFsbHkgZW5qb2luZWQgdXBvbiB0aGUgY29uc3VsIE9waW1pdXMgdG8gc2F2ZSB0aGUgY2l0eSBhcyBiZXN0IGhlIGNvdWxkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmb3JtYWwgZGVjcmVlIG9mIG1hcnRpYWwgbGF3OiA8Zm9yZWlnbiBsYW5nPSJsYSI+Y29uc3VsIHZpZGVyZXQgbmUgcXVpZCByZXNwdWJsaWNhIGRldHJpbWVudGkgY2FwZXJldDwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhdGlsLiAxLjIuNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+SW4gQ2F0LjwvdGl0bGU+IDEuIDIsIDQ8L2JpYmw+KS48L25vdGU+IGFuZCB0byBwdXQgZG93biB0aGUgdHlyYW50cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBzaG93ZXIgb2YgcmFpbiBmZWxsIGp1c3QgdGhlbiwgYW5kIHRoZSBhc3NlbWJseSB3YXMgZGlzc29sdmVkOyBidXQgZWFybHkgbmV4dCBtb3JuaW5nIHRoZSBjb25zdWwgY2FsbGVkIHRoZSBzZW5hdGUgdG9nZXRoZXIgaW5kb29ycyBhbmQgcHJvY2VlZGVkIHRvIHRyYW5zYWN0IGJ1c2luZXNzLCB3aGlsZSBvdGhlcnMgcGxhY2VkIHRoZSBib2R5IG9mIEFudHlsbGl1cyB3aXRob3V0IGNvdmVyaW5nIHVwb24gYSBiaWVyLCBhbmQgY2FycmllZCBpdCwgYXMgdGhleSBoYWQgYWdyZWVkIHRvIGRvLCB0aHJvdWdoIHRoZSBmb3J1bSBhbmQgcGFzdCB0aGUgc2VuYXRlLWhvdXNlLCB3aXRoIHdhaWxpbmdzIGFuZCBsYW1lbnRhdGlvbnMuIE9waW1pdXMga25ldyB3aGF0IHdhcyBnb2luZyBvbiwgYnV0IHByZXRlbmRlZCB0byBiZSBzdXJwcmlzZWQsIHNvIHRoYXQgZXZlbiB0aGUgc2VuYXRvcnMgd2VudCBvdXQgaW50byB0aGUgZm9ydW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBiaWVyIGhhZCBiZWVuIHNldCBkb3duIGluIHRoZSBtaWRzdCBvZiB0aGUgdGhyb25nLCB0aGUgc2VuYXRvcnMgYmVnYW4gdG8gaW52ZWlnaCBhZ2FpbnN0IHdoYXQgdGhleSBjYWxsZWQgYSBoZWlub3VzIGFuZCBtb25zdHJvdXMgY3JpbWUsIGJ1dCB0aGUgcGVvcGxlIHdlcmUgbW92ZWQgdG8gaGF0cmVkIGFuZCBhYnVzZSBvZiB0aGUgb2xpZ2FyY2hzLCB3aG8sIHRoZXkgc2FpZCwgYWZ0ZXIgbXVyZGVyaW5nIFRpYmVyaXVzIEdyYWNjaHVzIG9uIHRoZSBDYXBpdG9sIHdpdGggdGhlaXIgb3duIGhhbmRzLCB0cmlidW5lIHRoYXQgaGUgd2FzLCBoYWQgYWN0dWFsbHkgZmx1bmcgYXdheSBoaXMgZGVhZCBib2R5IGJlc2lkZXM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQW50eWxsaXVzLCBhIG1lcmUgc2VydmFudCwgd2hvIHBlcmhhcHMgaGFkIHN1ZmZlcmVkIG1vcmUgdGhhbiBoZSBkZXNlcnZlZCwgYnV0IHdhcyBoaW1zZWxmIGNoaWVmbHkgdG8gYmxhbWUgZm9yIGl0LCBoYWQgYmVlbiBsYWlkIG91dCBpbiB0aGUgZm9ydW0sIGFuZCB3YXMgc3Vycm91bmRlZCBieSB0aGUgUm9tYW4gc2VuYXRlLCB3aGljaCBzaGVkIHRlYXJzIGFuZCBzaGFyZWQgaW4gdGhlIG9ic2VxdWllcyBvZiBhIGhpcmVsaW5nIGZlbGxvdywgdG8gdGhlIGVuZCB0aGF0IHRoZSBzb2xlIHJlbWFpbmluZyBjaGFtcGlvbiBvZiB0aGUgcGVvcGxlIG1pZ2h0IGJlIGRvbmUgYXdheSB3aXRoLiBUaGVuIHRoZSBzZW5hdG9ycyB3ZW50IGJhY2sgaW50byB0aGUgc2VuYXRlLWhvdXNlLCB3aGVyZSB0aGV5IGZvcm1hbGx5IGVuam9pbmVkIHVwb24gdGhlIGNvbnN1bCBPcGltaXVzIHRvIHNhdmUgdGhlIGNpdHkgYXMgYmVzdCBoZSBjb3VsZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmb3JtYWwgZGVjcmVlIG9mIG1hcnRpYWwgbGF3OiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb25zdWwgdmlkZXJldCBuZSBxdWlkIHJlc3B1YmxpY2EgZGV0cmltZW50aSBjYXBlcmV0PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRpbC4gMS4yLjQiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gQ2F0LjwvdGl0bGU+IDEuIDIsIDQ8L2JpYmw+KS48L25vdGU+IGFuZCB0byBwdXQgZG93biB0aGUgdHlyYW50cy4KCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y29uc3VsIHZpZGVyZXQgbmUgcXVpZCByZXNwdWJsaWNhIGRldHJpbWVudGkgY2FwZXJldDwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQ2F0aWwuIDEuMi40IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkluIENhdC48L3RpdGxlPiAxLiAyLCA0PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gQ2F0LjwvdGl0bGU+IDEuIDIsIDQ8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29uc3VsIHRoZXJlZm9yZSBvcmRlcmVkIHRoZSBzZW5hdG9ycyB0byB0YWtlIHVwIGFybXMsIGFuZCBldmVyeSBtZW1iZXIgb2YgdGhlIGVxdWVzdHJpYW4gb3JkZXIgd2FzIG5vdGlmaWVkIHRvIGJyaW5nIG5leHQgbW9ybmluZyB0d28gc2VydmFudHMgZnVsbHkgYXJtZWQ7IEZ1bHZpdXMsIG9uIHRoZSBvdGhlciBoYW5kLCBtYWRlIGNvdW50ZXIgcHJlcGFyYXRpb25zIGFuZCBnb3QgdG9nZXRoZXIgYSByYWJibGUsIGJ1dCBDYWl1cywgYXMgaGUgbGVmdCB0aGUgZm9ydW0sIHN0b3BwZWQgaW4gZnJvbnQgb2YgaGlzIGZhdGhlcidzIHN0YXR1ZSwgZ2F6ZWQgYXQgaXQgZm9yIGEgbG9uZyB0aW1lIHdpdGhvdXQgdXR0ZXJpbmcgYSB3b3JkLCB0aGVuIGJ1cnN0IGludG8gdGVhcnMsIGFuZCB3aXRoIGEgZ3JvYW4gZGVwYXJ0ZWQuICAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IG9mIHRob3NlIHdobyBzYXcgdGhpcyB3ZXJlIG1vdmVkIHRvIHBpdHkgQ2FpdXM7IHRoZXkgcmVwcm9hY2hlZCB0aGVtc2VsdmVzIGZvciBhYmFuZG9uaW5nIGFuZCBiZXRyYXlpbmcgaGltLCBhbmQgd2VudCB0byBoaXMgaG91c2UsIGFuZCBzcGVudCB0aGUgbmlnaHQgYXQgaGlzIGRvb3IsIHRob3VnaCBub3QgaW4gdGhlIHNhbWUgbWFubmVyIGFzIHRob3NlIHdobyB3ZXJlIGd1YXJkaW5nIEZ1bHZpdXMuIEZvciB0aGVzZSBwYXNzZWQgdGhlIHdob2xlIHRpbWUgaW4gbm9pc2UgYW5kIHNob3V0aW5nLCBkcmlua2luZywgYW5kIGJvYXN0aW5nIG9mIHdoYXQgdGhleSB3b3VsZCBkbywgRnVsdml1cyBoaW1zZWxmIGJlaW5nIHRoZSBmaXJzdCB0byBnZXQgZHJ1bmssIGFuZCBzYXlpbmcgYW5kIGRvaW5nIG11Y2ggdGhhdCB3YXMgdW5zZWVtbHkgZm9yIGEgbWFuIG9mIGhpcyB5ZWFyczsgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHRoZSBmb2xsb3dlcnMgb2YgQ2FpdXMsIGZlZWxpbmcgdGhhdCB0aGV5IGZhY2VkIGEgcHVibGljIGNhbGFtaXR5LCBrZXB0IHF1aWV0IGFuZCB3ZXJlIGZ1bGwgb2YgY29uY2VybiBmb3IgdGhlIGZ1dHVyZSwgYW5kIHBhc3NlZCB0aGUgbmlnaHQgc2xlZXBpbmcgYW5kIGtlZXBpbmcgd2F0Y2ggYnkgdHVybnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zdWwgdGhlcmVmb3JlIG9yZGVyZWQgdGhlIHNlbmF0b3JzIHRvIHRha2UgdXAgYXJtcywgYW5kIGV2ZXJ5IG1lbWJlciBvZiB0aGUgZXF1ZXN0cmlhbiBvcmRlciB3YXMgbm90aWZpZWQgdG8gYnJpbmcgbmV4dCBtb3JuaW5nIHR3byBzZXJ2YW50cyBmdWxseSBhcm1lZDsgRnVsdml1cywgb24gdGhlIG90aGVyIGhhbmQsIG1hZGUgY291bnRlciBwcmVwYXJhdGlvbnMgYW5kIGdvdCB0b2dldGhlciBhIHJhYmJsZSwgYnV0IENhaXVzLCBhcyBoZSBsZWZ0IHRoZSBmb3J1bSwgc3RvcHBlZCBpbiBmcm9udCBvZiBoaXMgZmF0aGVyJ3Mgc3RhdHVlLCBnYXplZCBhdCBpdCBmb3IgYSBsb25nIHRpbWUgd2l0aG91dCB1dHRlcmluZyBhIHdvcmQsIHRoZW4gYnVyc3QgaW50byB0ZWFycywgYW5kIHdpdGggYSBncm9hbiBkZXBhcnRlZC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgb2YgdGhvc2Ugd2hvIHNhdyB0aGlzIHdlcmUgbW92ZWQgdG8gcGl0eSBDYWl1czsgdGhleSByZXByb2FjaGVkIHRoZW1zZWx2ZXMgZm9yIGFiYW5kb25pbmcgYW5kIGJldHJheWluZyBoaW0sIGFuZCB3ZW50IHRvIGhpcyBob3VzZSwgYW5kIHNwZW50IHRoZSBuaWdodCBhdCBoaXMgZG9vciwgdGhvdWdoIG5vdCBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgdGhvc2Ugd2hvIHdlcmUgZ3VhcmRpbmcgRnVsdml1cy4gRm9yIHRoZXNlIHBhc3NlZCB0aGUgd2hvbGUgdGltZSBpbiBub2lzZSBhbmQgc2hvdXRpbmcsIGRyaW5raW5nLCBhbmQgYm9hc3Rpbmcgb2Ygd2hhdCB0aGV5IHdvdWxkIGRvLCBGdWx2aXVzIGhpbXNlbGYgYmVpbmcgdGhlIGZpcnN0IHRvIGdldCBkcnVuaywgYW5kIHNheWluZyBhbmQgZG9pbmcgbXVjaCB0aGF0IHdhcyB1bnNlZW1seSBmb3IgYSBtYW4gb2YgaGlzIHllYXJzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGUgZm9sbG93ZXJzIG9mIENhaXVzLCBmZWVsaW5nIHRoYXQgdGhleSBmYWNlZCBhIHB1YmxpYyBjYWxhbWl0eSwga2VwdCBxdWlldCBhbmQgd2VyZSBmdWxsIG9mIGNvbmNlcm4gZm9yIHRoZSBmdXR1cmUsIGFuZCBwYXNzZWQgdGhlIG5pZ2h0IHNsZWVwaW5nIGFuZCBrZWVwaW5nIHdhdGNoIGJ5IHR1cm5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGRheSBjYW1lLCBGdWx2aXVzIHdhcyB3aXRoIGRpZmZpY3VsdHkgcm91c2VkIGZyb20gaGlzIGRydW5rZW4gc2xlZXAgYnkgaGlzIHBhcnRpc2Fucywgd2hvIGFybWVkIHRoZW1zZWx2ZXMgd2l0aCB0aGUgc3BvaWxzIG9mIHdhciBhYm91dCBoaXMgaG91c2UsIHdoaWNoIGhlIGhhZCB0YWtlbiBhZnRlciBhIHZpY3Rvcnkgb3ZlciB0aGUgR2F1bHMgZHVyaW5nIGhpcyBjb25zdWxzaGlwLCBhbmQgd2l0aCBtdWNoIHRocmVhdGVuaW5nIGFuZCBzaG91dGluZyB3ZW50IHRvIHNlaXplIHRoZSBBdmVudGluZSBoaWxsLiBDYWl1cywgb24gdGhlIG90aGVyIGhhbmQsIHdhcyB1bndpbGxpbmcgdG8gYXJtIGhpbXNlbGYsIGJ1dCB3ZW50IGZvcnRoIGluIGhpcyB0b2dhLCBhcyB0aG91Z2ggb24gaGlzIHdheSB0byB0aGUgZm9ydW0sIHdpdGggb25seSBhIHNob3J0IGRhZ2dlciBvbiBoaXMgcGVyc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgZ29pbmcgb3V0IGF0IHRoZSBkb29yLCBoaXMgd2lmZSB0aHJldyBoZXJzZWxmIGluIGhpcyB3YXksIGFuZCB3aXRoIG9uZSBhcm0gcm91bmQgaGVyIGh1c2JhbmQgYW5kIHRoZSBvdGhlciByb3VuZCB0aGVpciBsaXR0bGUgc29uLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdCB0byB0aGUgcm9zdHJhLCAwIENhaXVzLCBkbyBJIG5vdyBzZW5kIHRoZWUgZm9ydGgsIGFzIGZvcm1lcmx5LCB0byBzZXJ2ZSBhcyB0cmlidW5lIGFuZCBsYXctZ2l2ZXIsIG5vciB5ZXQgdG8gYSBnbG9yaW91cyB3YXIsIHdoZXJlLCBzaG91bGRzdCB0aG91IGRpZSAoYW5kIGFsbCBtZW4gbXVzdCBkaWUpLCB0aG91IHdvdWxkc3QgYXQgYWxsIGV2ZW50cyBsZWF2ZSBtZSBhbiBob25vdXJlZCBzb3Jyb3c7IGJ1dCB0aG91IGFydCBleHBvc2luZyB0aHlzZWxmIHRvIHRoZSBtdXJkZXJlcnMgb2YgVGliZXJpdXMsIGFuZCB0aG91IGRvZXN0IHdlbGwgdG8gZ28gdW5hcm1lZCwgdGhhdCB0aG91IG1heWVzdCBzdWZmZXIgcmF0aGVyIHRoYW4gaW5mbGljdCB3cm9uZzsgYnV0IHRoeSBkZWF0aCB3aWxsIGRvIHRoZSBzdGF0ZSBubyBnb29kLiAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdvcnN0IGhhcyBhdCBsYXN0IHByZXZhaWxlZDsgYnkgdmlvbGVuY2UgYW5kIHRoZSBzd29yZCBtZW4ncyBjb250cm92ZXJzaWVzIGFyZSBub3cgZGVjaWRlZC4gSWYgdGh5IGJyb3RoZXIgaGFkIG9ubHkgZmFsbGVuIGF0IE51bWFudGlhLCBoaXMgZGVhZCBib2R5IHdvdWxkIGhhdmUgYmVlbiBnaXZlbiBiYWNrIHRvIHVzIGJ5IHRlcm1zIG9mIHRydWNlOyBidXQgYXMgaXQgaXMsIHBlcmhhcHMgSSB0b28gc2hhbGwgaGF2ZSB0byBzdXBwbGljYXRlIHNvbWUgcml2ZXIgb3Igc2VhIHRvIHJldmVhbCB0byBtZSBhdCBsYXN0IHRoeSBib2R5IGluIGl0cyBrZWVwaW5nLiBXaHksIHByYXksIHNob3VsZCBtZW4gbG9uZ2VyIHB1dCBmYWl0aCBpbiBsYXdzIG9yIGdvZHMsIGFmdGVyIHRoZSBtdXJkZXIgb2YgVGliZXJpdXM/PC9xPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgTGljaW5pYSB3YXMgdGh1cyBsYW1lbnRpbmcsIENhaXVzIGdlbnRseSBmcmVlZCBoaW1zZWxmIGZyb20gaGVyIGVtYnJhY2UgYW5kIHdlbnQgYXdheSB3aXRob3V0IGEgd29yZCwgYWNjb21wYW5pZWQgYnkgaGlzIGZyaWVuZHMuIExpY2luaWEgZWFnZXJseSBzb3VnaHQgdG8gY2x1dGNoIGhpcyByb2JlLCBidXQgc2FuayB0byB0aGUgZ3JvdW5kIGFuZCBsYXkgdGhlcmUgYSBsb25nIHRpbWUgc3BlZWNobGVzcywgdW50aWwgaGVyIHNlcnZhbnRzIGxpZnRlZCBoZXIgdXAgdW5jb25zY2lvdXMgYW5kIGNhcnJpZWQgaGVyIGF3YXkgdG8gdGhlIGhvdXNlIG9mIGhlciBicm90aGVyIENyYXNzdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBkYXkgY2FtZSwgRnVsdml1cyB3YXMgd2l0aCBkaWZmaWN1bHR5IHJvdXNlZCBmcm9tIGhpcyBkcnVua2VuIHNsZWVwIGJ5IGhpcyBwYXJ0aXNhbnMsIHdobyBhcm1lZCB0aGVtc2VsdmVzIHdpdGggdGhlIHNwb2lscyBvZiB3YXIgYWJvdXQgaGlzIGhvdXNlLCB3aGljaCBoZSBoYWQgdGFrZW4gYWZ0ZXIgYSB2aWN0b3J5IG92ZXIgdGhlIEdhdWxzIGR1cmluZyBoaXMgY29uc3Vsc2hpcCwgYW5kIHdpdGggbXVjaCB0aHJlYXRlbmluZyBhbmQgc2hvdXRpbmcgd2VudCB0byBzZWl6ZSB0aGUgQXZlbnRpbmUgaGlsbC4gQ2FpdXMsIG9uIHRoZSBvdGhlciBoYW5kLCB3YXMgdW53aWxsaW5nIHRvIGFybSBoaW1zZWxmLCBidXQgd2VudCBmb3J0aCBpbiBoaXMgdG9nYSwgYXMgdGhvdWdoIG9uIGhpcyB3YXkgdG8gdGhlIGZvcnVtLCB3aXRoIG9ubHkgYSBzaG9ydCBkYWdnZXIgb24gaGlzIHBlcnNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnb2luZyBvdXQgYXQgdGhlIGRvb3IsIGhpcyB3aWZlIHRocmV3IGhlcnNlbGYgaW4gaGlzIHdheSwgYW5kIHdpdGggb25lIGFybSByb3VuZCBoZXIgaHVzYmFuZCBhbmQgdGhlIG90aGVyIHJvdW5kIHRoZWlyIGxpdHRsZSBzb24sIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3QgdG8gdGhlIHJvc3RyYSwgMCBDYWl1cywgZG8gSSBub3cgc2VuZCB0aGVlIGZvcnRoLCBhcyBmb3JtZXJseSwgdG8gc2VydmUgYXMgdHJpYnVuZSBhbmQgbGF3LWdpdmVyLCBub3IgeWV0IHRvIGEgZ2xvcmlvdXMgd2FyLCB3aGVyZSwgc2hvdWxkc3QgdGhvdSBkaWUgKGFuZCBhbGwgbWVuIG11c3QgZGllKSwgdGhvdSB3b3VsZHN0IGF0IGFsbCBldmVudHMgbGVhdmUgbWUgYW4gaG9ub3VyZWQgc29ycm93OyBidXQgdGhvdSBhcnQgZXhwb3NpbmcgdGh5c2VsZiB0byB0aGUgbXVyZGVyZXJzIG9mIFRpYmVyaXVzLCBhbmQgdGhvdSBkb2VzdCB3ZWxsIHRvIGdvIHVuYXJtZWQsIHRoYXQgdGhvdSBtYXllc3Qgc3VmZmVyIHJhdGhlciB0aGFuIGluZmxpY3Qgd3Jvbmc7IGJ1dCB0aHkgZGVhdGggd2lsbCBkbyB0aGUgc3RhdGUgbm8gZ29vZC4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdvcnN0IGhhcyBhdCBsYXN0IHByZXZhaWxlZDsgYnkgdmlvbGVuY2UgYW5kIHRoZSBzd29yZCBtZW4ncyBjb250cm92ZXJzaWVzIGFyZSBub3cgZGVjaWRlZC4gSWYgdGh5IGJyb3RoZXIgaGFkIG9ubHkgZmFsbGVuIGF0IE51bWFudGlhLCBoaXMgZGVhZCBib2R5IHdvdWxkIGhhdmUgYmVlbiBnaXZlbiBiYWNrIHRvIHVzIGJ5IHRlcm1zIG9mIHRydWNlOyBidXQgYXMgaXQgaXMsIHBlcmhhcHMgSSB0b28gc2hhbGwgaGF2ZSB0byBzdXBwbGljYXRlIHNvbWUgcml2ZXIgb3Igc2VhIHRvIHJldmVhbCB0byBtZSBhdCBsYXN0IHRoeSBib2R5IGluIGl0cyBrZWVwaW5nLiBXaHksIHByYXksIHNob3VsZCBtZW4gbG9uZ2VyIHB1dCBmYWl0aCBpbiBsYXdzIG9yIGdvZHMsIGFmdGVyIHRoZSBtdXJkZXIgb2YgVGliZXJpdXM/PC9xPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3b3JzdCBoYXMgYXQgbGFzdCBwcmV2YWlsZWQ7IGJ5IHZpb2xlbmNlIGFuZCB0aGUgc3dvcmQgbWVuJ3MgY29udHJvdmVyc2llcyBhcmUgbm93IGRlY2lkZWQuIElmIHRoeSBicm90aGVyIGhhZCBvbmx5IGZhbGxlbiBhdCBOdW1hbnRpYSwgaGlzIGRlYWQgYm9keSB3b3VsZCBoYXZlIGJlZW4gZ2l2ZW4gYmFjayB0byB1cyBieSB0ZXJtcyBvZiB0cnVjZTsgYnV0IGFzIGl0IGlzLCBwZXJoYXBzIEkgdG9vIHNoYWxsIGhhdmUgdG8gc3VwcGxpY2F0ZSBzb21lIHJpdmVyIG9yIHNlYSB0byByZXZlYWwgdG8gbWUgYXQgbGFzdCB0aHkgYm9keSBpbiBpdHMga2VlcGluZy4gV2h5LCBwcmF5LCBzaG91bGQgbWVuIGxvbmdlciBwdXQgZmFpdGggaW4gbGF3cyBvciBnb2RzLCBhZnRlciB0aGUgbXVyZGVyIG9mIFRpYmVyaXVzPzwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIExpY2luaWEgd2FzIHRodXMgbGFtZW50aW5nLCBDYWl1cyBnZW50bHkgZnJlZWQgaGltc2VsZiBmcm9tIGhlciBlbWJyYWNlIGFuZCB3ZW50IGF3YXkgd2l0aG91dCBhIHdvcmQsIGFjY29tcGFuaWVkIGJ5IGhpcyBmcmllbmRzLiBMaWNpbmlhIGVhZ2VybHkgc291Z2h0IHRvIGNsdXRjaCBoaXMgcm9iZSwgYnV0IHNhbmsgdG8gdGhlIGdyb3VuZCBhbmQgbGF5IHRoZXJlIGEgbG9uZyB0aW1lIHNwZWVjaGxlc3MsIHVudGlsIGhlciBzZXJ2YW50cyBsaWZ0ZWQgaGVyIHVwIHVuY29uc2Npb3VzIGFuZCBjYXJyaWVkIGhlciBhd2F5IHRvIHRoZSBob3VzZSBvZiBoZXIgYnJvdGhlciBDcmFzc3VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGFsbCB3ZXJlIGFzc2VtYmxlZCB0b2dldGhlciwgRnVsdml1cywgeWllbGRpbmcgdG8gdGhlIGFkdmljZSBvZiBDYWl1cywgc2VudCB0aGUgeW91bmdlciBvZiBoaXMgc29ucyB3aXRoIGEgaGVyYWxkJ3Mgd2FuZCBpbnRvIHRoZSBmb3J1bS4gVGhlIHlvdW5nIG1hbiB3YXMgdmVyeSBmYWlyIHRvIGxvb2sgdXBvbjsgYW5kIG5vdywgaW4gYSBkZWNvcm91cyBhdHRpdHVkZSwgbW9kZXN0bHksIGFuZCB3aXRoIHRlYXJzIGluIGhpcyBleWVzLCBoZSBhZGRyZXNzZWQgY29uY2lsaWF0b3J5IHdvcmRzIHRvIHRoZSBjb25zdWwgYW5kIHRoZSBzZW5hdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgaGlzIGF1ZGllbmNlLCB0aGVuLCB3ZXJlIG5vdCBkaXNpbmNsaW5lZCB0byBhY2NlcHQgaGlzIHRlcm1zIG9mIHBlYWNlOyBidXQgT3BpbWl1cyBkZWNsYXJlZCB0aGF0IHRoZSBwZXRpdGlvbmVycyBvdWdodCBub3QgdG8gdHJ5IHRvIHBlcnN1YWRlIHRoZSBzZW5hdGUgYnkgd29yZCBvZiBtZXNzZW5nZXI7IHRoZXkgc2hvdWxkIHJhdGhlciBjb21lIGRvd24gYW5kIHN1cnJlbmRlciB0aGVtc2VsdmVzIGZvciB0cmlhbCwgbGlrZSBjaXRpemVucyBhbWVuYWJsZSB0byB0aGUgbGF3cywgYW5kIHRoZW4gYmVnIGZvciBtZXJjeTsgaGUgYWxzbyB0b2xkIHRoZSB5b3VuZyBtYW4gcGxhaW5seSB0byBjb21lIGJhY2sgYWdhaW4gb24gdGhlc2UgdGVybXMgb3Igbm90IGNvbWUgYmFjayBhdCBhbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzLCBhY2NvcmRpbmdseSwgYXMgd2UgYXJlIHRvbGQsIHdhcyB3aWxsaW5nIHRvIGNvbWUgYW5kIHRyeSB0byBwZXJzdWFkZSB0aGUgc2VuYXRlOyBidXQgbm8gb25lIGVsc2UgYWdyZWVkIHdpdGggaGltLCBhbmQgc28gRnVsdml1cyBzZW50IGhpcyBzb24gYWdhaW4gdG8gcGxlYWQgaW4gdGhlaXIgYmVoYWxmIGFzIGJlZm9yZS4gQnV0IE9waW1pdXMsIHdobyB3YXMgZWFnZXIgdG8gam9pbiBiYXR0bGUsIGF0IG9uY2Ugc2VpemVkIHRoZSB5b3V0aCBhbmQgcHV0IGhpbSB1bmRlciBndWFyZCwgYW5kIHRoZW4gYWR2YW5jZWQgb24gdGhlIHBhcnR5IG9mIEZ1bHZpdXMgd2l0aCBudW1lcm91cyBtZW4tYXQtYXJtcyBhbmQgQ3JldGFuIGFyY2hlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgdGhlIGFyY2hlcnMgd2hvLCBieSBkaXNjaGFyZ2luZyB0aGVpciBhcnJvd3MgYW5kIHdvdW5kaW5nIHRoZWlyIG9wcG9uZW50cywgd2VyZSBtb3N0IGluc3RydW1lbnRhbCBpbiB0aHJvd2luZyB0aGVtIGludG8gY29uZnVzaW9uLiBBZnRlciB0aGUgcm91dCBoYWQgdGFrZW4gcGxhY2UsIEZ1bHZpdXMgZmxlZCBmb3IgcmVmdWdlIGludG8gYW4gdW51c2VkIGJhdGgsIHdoZXJlIGhlIHdhcyBzaG9ydGx5IGRpc2NvdmVyZWQgYW5kIHNsYWluLCB0b2dldGhlciB3aXRoIGhpcyBlbGRlciBzb24uIENhaXVzLCBob3dldmVyLCB3YXMgbm90IHNlZW4gdG8gdGFrZSBhbnkgcGFydCBpbiB0aGUgYmF0dGxlLCBidXQgaW4gZ3JlYXQgZGlzcGxlYXN1cmUgYXQgd2hhdCB3YXMgaGFwcGVuaW5nIGhlIHdpdGhkcmV3IGludG8gdGhlIHRlbXBsZSBvZiBEaWFuYS4gVGhlcmUgaGUgd2FzIG1pbmRlZCB0byBtYWtlIGF3YXkgd2l0aCBoaW1zZWxmLCBidXQgd2FzIHByZXZlbnRlZCBieSBoaXMgbW9zdCB0cnVzdHkgY29tcGFuaW9ucywgUG9tcG9uaXVzIGFuZCBMaWNpbml1czsgZm9yIHRoZXkgd2VyZSBhdCBoYW5kLCBhbmQgdG9vayBhd2F5IGhpcyBzd29yZCwgYW5kIHVyZ2VkIGhpbSB0byBmbGlnaHQgYWdhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluZGVlZCwgYXMgd2UgYXJlIHRvbGQsIGhlIHNhbmsgdXBvbiBoaXMga25lZXMsIGFuZCB3aXRoIGhhbmRzIG91dHN0cmV0Y2hlZCB0b3dhcmRzIHRoZSBnb2RkZXNzIHByYXllZCB0aGF0IHRoZSBSb21hbiBwZW9wbGUsIGluIHJlcXVpdGFsIGZvciB0aGVpciBncmVhdCBpbmdyYXRpdHVkZSBhbmQgdHJlYWNoZXJ5LCBtaWdodCBuZXZlciBjZWFzZSB0byBiZSBpbiBzZXJ2aXR1ZGU7IGZvciBtb3N0IG9mIHRoZW0gd2VyZSBtYW5pZmVzdGx5IGNoYW5naW5nIHNpZGVzLCBub3cgdGhhdCBwcm9jbGFtYXRpb24gb2YgaW1tdW5pdHkgaGFkIGJlZW4gbWFkZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhbGwgd2VyZSBhc3NlbWJsZWQgdG9nZXRoZXIsIEZ1bHZpdXMsIHlpZWxkaW5nIHRvIHRoZSBhZHZpY2Ugb2YgQ2FpdXMsIHNlbnQgdGhlIHlvdW5nZXIgb2YgaGlzIHNvbnMgd2l0aCBhIGhlcmFsZCdzIHdhbmQgaW50byB0aGUgZm9ydW0uIFRoZSB5b3VuZyBtYW4gd2FzIHZlcnkgZmFpciB0byBsb29rIHVwb247IGFuZCBub3csIGluIGEgZGVjb3JvdXMgYXR0aXR1ZGUsIG1vZGVzdGx5LCBhbmQgd2l0aCB0ZWFycyBpbiBoaXMgZXllcywgaGUgYWRkcmVzc2VkIGNvbmNpbGlhdG9yeSB3b3JkcyB0byB0aGUgY29uc3VsIGFuZCB0aGUgc2VuYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgaGlzIGF1ZGllbmNlLCB0aGVuLCB3ZXJlIG5vdCBkaXNpbmNsaW5lZCB0byBhY2NlcHQgaGlzIHRlcm1zIG9mIHBlYWNlOyBidXQgT3BpbWl1cyBkZWNsYXJlZCB0aGF0IHRoZSBwZXRpdGlvbmVycyBvdWdodCBub3QgdG8gdHJ5IHRvIHBlcnN1YWRlIHRoZSBzZW5hdGUgYnkgd29yZCBvZiBtZXNzZW5nZXI7IHRoZXkgc2hvdWxkIHJhdGhlciBjb21lIGRvd24gYW5kIHN1cnJlbmRlciB0aGVtc2VsdmVzIGZvciB0cmlhbCwgbGlrZSBjaXRpemVucyBhbWVuYWJsZSB0byB0aGUgbGF3cywgYW5kIHRoZW4gYmVnIGZvciBtZXJjeTsgaGUgYWxzbyB0b2xkIHRoZSB5b3VuZyBtYW4gcGxhaW5seSB0byBjb21lIGJhY2sgYWdhaW4gb24gdGhlc2UgdGVybXMgb3Igbm90IGNvbWUgYmFjayBhdCBhbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzLCBhY2NvcmRpbmdseSwgYXMgd2UgYXJlIHRvbGQsIHdhcyB3aWxsaW5nIHRvIGNvbWUgYW5kIHRyeSB0byBwZXJzdWFkZSB0aGUgc2VuYXRlOyBidXQgbm8gb25lIGVsc2UgYWdyZWVkIHdpdGggaGltLCBhbmQgc28gRnVsdml1cyBzZW50IGhpcyBzb24gYWdhaW4gdG8gcGxlYWQgaW4gdGhlaXIgYmVoYWxmIGFzIGJlZm9yZS4gQnV0IE9waW1pdXMsIHdobyB3YXMgZWFnZXIgdG8gam9pbiBiYXR0bGUsIGF0IG9uY2Ugc2VpemVkIHRoZSB5b3V0aCBhbmQgcHV0IGhpbSB1bmRlciBndWFyZCwgYW5kIHRoZW4gYWR2YW5jZWQgb24gdGhlIHBhcnR5IG9mIEZ1bHZpdXMgd2l0aCBudW1lcm91cyBtZW4tYXQtYXJtcyBhbmQgQ3JldGFuIGFyY2hlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgdGhlIGFyY2hlcnMgd2hvLCBieSBkaXNjaGFyZ2luZyB0aGVpciBhcnJvd3MgYW5kIHdvdW5kaW5nIHRoZWlyIG9wcG9uZW50cywgd2VyZSBtb3N0IGluc3RydW1lbnRhbCBpbiB0aHJvd2luZyB0aGVtIGludG8gY29uZnVzaW9uLiBBZnRlciB0aGUgcm91dCBoYWQgdGFrZW4gcGxhY2UsIEZ1bHZpdXMgZmxlZCBmb3IgcmVmdWdlIGludG8gYW4gdW51c2VkIGJhdGgsIHdoZXJlIGhlIHdhcyBzaG9ydGx5IGRpc2NvdmVyZWQgYW5kIHNsYWluLCB0b2dldGhlciB3aXRoIGhpcyBlbGRlciBzb24uIENhaXVzLCBob3dldmVyLCB3YXMgbm90IHNlZW4gdG8gdGFrZSBhbnkgcGFydCBpbiB0aGUgYmF0dGxlLCBidXQgaW4gZ3JlYXQgZGlzcGxlYXN1cmUgYXQgd2hhdCB3YXMgaGFwcGVuaW5nIGhlIHdpdGhkcmV3IGludG8gdGhlIHRlbXBsZSBvZiBEaWFuYS4gVGhlcmUgaGUgd2FzIG1pbmRlZCB0byBtYWtlIGF3YXkgd2l0aCBoaW1zZWxmLCBidXQgd2FzIHByZXZlbnRlZCBieSBoaXMgbW9zdCB0cnVzdHkgY29tcGFuaW9ucywgUG9tcG9uaXVzIGFuZCBMaWNpbml1czsgZm9yIHRoZXkgd2VyZSBhdCBoYW5kLCBhbmQgdG9vayBhd2F5IGhpcyBzd29yZCwgYW5kIHVyZ2VkIGhpbSB0byBmbGlnaHQgYWdhaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluZGVlZCwgYXMgd2UgYXJlIHRvbGQsIGhlIHNhbmsgdXBvbiBoaXMga25lZXMsIGFuZCB3aXRoIGhhbmRzIG91dHN0cmV0Y2hlZCB0b3dhcmRzIHRoZSBnb2RkZXNzIHByYXllZCB0aGF0IHRoZSBSb21hbiBwZW9wbGUsIGluIHJlcXVpdGFsIGZvciB0aGVpciBncmVhdCBpbmdyYXRpdHVkZSBhbmQgdHJlYWNoZXJ5LCBtaWdodCBuZXZlciBjZWFzZSB0byBiZSBpbiBzZXJ2aXR1ZGU7IGZvciBtb3N0IG9mIHRoZW0gd2VyZSBtYW5pZmVzdGx5IGNoYW5naW5nIHNpZGVzLCBub3cgdGhhdCBwcm9jbGFtYXRpb24gb2YgaW1tdW5pdHkgaGFkIGJlZW4gbWFkZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgYXMgQ2FpdXMgZmxlZCwgaGlzIGZvZXMgcHJlc3NlZCBoYXJkIHVwb24gaGltIGFuZCB3ZXJlIG92ZXJ0YWtpbmcgaGltIGF0IHRoZSB3b29kZW4gYnJpZGdlIG92ZXIgdGhlIFRpYmVyLCBidXQgaGlzIHR3byBmcmllbmRzIGJhZGUgaGltIGdvIG9uLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgd2l0aHN0b29kIGhpcyBwdXJzdWVycywgYW5kLCBmaWdodGluZyB0aGVyZSBhdCB0aGUgaGVhZCBvZiB0aGUgYnJpZGdlLCB3b3VsZCBzdWZmZXIgbm8gbWFuIHRvIHBhc3MsIHVudGlsIHRoZXkgd2VyZSBraWxsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzIGhhZCB3aXRoIGhpbSBpbiBoaXMgZmxpZ2h0IGEgc2luZ2xlIHNlcnZhbnQsIGJ5IG5hbWUgUGhpbG9jcmF0ZXM7IGFuZCB0aG91Z2ggYWxsIHRoZSBzcGVjdGF0b3JzLCBhcyBhdCBhIHJhY2UsIHVyZ2VkIENhaXVzIG9uIHRvIGdyZWF0ZXIgc3BlZWQsIG5vdCBhIG1hbiBjYW1lIHRvIGhpcyBhaWQsIG9yIGV2ZW4gY29uc2VudGVkIHRvIGZ1cm5pc2ggaGltIHdpdGggYSBob3JzZSB3aGVuIGhlIGFza2VkIGZvciBvbmUsIGZvciBoaXMgcHVyc3VlcnMgd2VyZSBwcmVzc2luZyBjbG9zZSB1cG9uIGhpbS4gSGUgYmFyZWx5IHN1Y2NlZWRlZCBpbiBlc2NhcGluZyBpbnRvIGEgc2FjcmVkIGdyb3ZlIG9mIHRoZSBGdXJpZXMsIGFuZCB0aGVyZSBmZWxsIGJ5IHRoZSBoYW5kIG9mIFBoaWxvY3JhdGVzLCB3aG8gdGhlbiBzbGV3IGhpbXNlbGYgdXBvbiBoaXMgbWFzdGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmcgdG8gc29tZSB3cml0ZXJzLCBob3dldmVyLCBib3RoIHdlcmUgdGFrZW4gYWxpdmUgYnkgdGhlIGVuZW15LCBhbmQgYmVjYXVzZSB0aGUgc2VydmFudCBoYWQgdGhyb3duIGhpcyBhcm1zIGFib3V0IGhpcyBtYXN0ZXIsIG5vIG9uZSB3YXMgYWJsZSB0byBzdHJpa2UgdGhlIG1hc3RlciB1bnRpbCB0aGUgc2xhdmUgaGFkIGZpcnN0IGJlZW4gZGlzcGF0Y2hlZCBieSB0aGUgYmxvd3Mgb2YgbWFueS4gU29tZW9uZSBjdXQgb2ZmIHRoZSBoZWFkIG9mIENhaXVzLCB3ZSBhcmUgdG9sZCwgYW5kIHdhcyBjYXJyeWluZyBpdCBhbG9uZywgYnV0IHdhcyByb2JiZWQgb2YgaXQgYnkgYSBjZXJ0YWluIGZyaWVuZCBvZiBPcGltaXVzLCBTZXB0aW11bGVpdXM7IGZvciBwcm9jbGFtYXRpb24gaGFkIGJlZW4gbWFkZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBiYXR0bGUgdGhhdCBhbiBlcXVhbCB3ZWlnaHQgb2YgZ29sZCB3b3VsZCBiZSBwYWlkIHRoZSBtZW4gd2hvIGJyb3VnaHQgdGhlIGhlYWQgb2YgQ2FpdXMgb3IgRnVsdml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U28gU2VwdGltdWxlaXVzIHN0dWNrIHRoZSBoZWFkIG9mIENhbXMgb24gYSBzcGVhciBhbmQgYnJvdWdodCBpdCB0byBPcGltaXVzLCBhbmQgd2hlbiBpdCB3YXMgcGxhY2VkIGluIGEgYmFsYW5jZSBpdCB3ZWlnaGVkIHNldmVudGVlbiBwb3VuZHMgYW5kIHR3byB0aGlyZHMsIHNpbmNlIFNlcHRpbXVsZWl1cywgYmVzaWRlcyBzaG93aW5nIGhpbXNlbGYgdG8gYmUgYSBzY291bmRyZWwsIGhhZCBhbHNvIHBlcnBldHJhdGVkIGEgZnJhdWQ7IGZvciBoZSBoYWQgdGFrZW4gb3V0IHRoZSBicmFpbiBhbmQgcG91cmVkIG1lbHRlZCBsZWFkIGluIGl0cyBwbGFjZS4gQnV0IHRob3NlIHdobyBicm91Z2h0IHRoZSBoZWFkIG9mIEZ1bHZpdXMgd2VyZSBvZiB0aGUgb2JzY3VyZXIgc29ydCwgYW5kIHRoZXJlZm9yZSBnb3Qgbm90aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJvZGllcyBvZiBDYWl1cyBhbmQgRnVsdml1cyBhbmQgb2YgdGhlIG90aGVyIHNsYWluIHdlcmUgdGhyb3duIGludG8gdGhlIFRpYmVyLCBhbmQgdGhleSBudW1iZXJlZCB0aHJlZSB0aG91c2FuZDsgdGhlaXIgcHJvcGVydHkgd2FzIHNvbGQgYW5kIHRoZSBwcm9jZWVkcyBwYWlkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeS4gTW9yZW92ZXIsIHRoZWlyIHdpdmVzIHdlcmUgZm9yYmlkZGVuIHRvIGdvIGludG8gbW91cm5pbmcsIGFuZCBMaWNpbmlhLCB0aGUgd2lmZSBvZiBDYWl1cywgd2FzIGFsc28gZGVwcml2ZWQgb2YgaGVyIG1hcnJpYWdlIHBvcnRpb24uIE1vc3QgY3J1ZWwgb2YgYWxsLCBob3dldmVyLCB3YXMgdGhlIHRyZWF0bWVudCBvZiB0aGUgeW91bmdlciBzb24gb2YgRnVsdml1cywgd2hvIGhhZCBuZWl0aGVyIGxpZnRlZCBhIGhhbmQgYWdhaW5zdCB0aGUgbm9ibGVzIG5vciBiZWVuIHByZXNlbnQgYXQgdGhlIGZpZ2h0aW5nLCBidXQgaGFkIGNvbWUgdG8gZWZmZWN0IGEgdHJ1Y2UgYmVmb3JlIHRoZSBiYXR0bGUgYW5kIGhhZCBiZWVuIGFycmVzdGVkOyBhZnRlciB0aGUgYmF0dGxlIGhlIHdhcyBzbGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hhdCB2ZXhlZCB0aGUgcGVvcGxlIG1vcmUgdGhhbiB0aGlzIG9yIGFueXRoaW5nIGVsc2Ugd2FzIHRoZSBlcmVjdGlvbiBvZiBhIHRlbXBsZSBvZiBDb25jb3JkIGJ5IE9waW1pdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PcGltdXMgcmVzdG9yZWQgdGhlIHRlbXBsZSBvZiBDb25jb3JkIHdoaWNoIGhhZCBiZWVuIGJ1aWx0IGJ5IENhbWlsbHVzIChzZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDQyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2FtaWxsdXM8L3RpdGxlPiwgeGxpaS4gNC48L2JpYmw+77yJPC9ub3RlPjsgZm9yIGl0IHdhcyBmZWx0IHRoYXQgaGUgd2FzIHByaWRpbmcgaGltc2VsZiBhbmQgZXh1bHRpbmcgYW5kIGluIGEgbWFubmVyIGNlbGVicmF0aW5nIGEgdHJpdW1waCBpbiB2aWV3IG9mIGFsbCB0aGlzIHNsYXVnaHRlciBvZiBjaXRpemVucy4gVGhlcmVmb3JlIGF0IG5pZ2h0LCBiZW5lYXRoIHRoZSBpbnNjcmlwdGlvbiBvbiB0aGUgdGVtcGxlLCBzb21lYm9keSBjYXJ2ZWQgdGhpcyB2ZXJzZTrigJQKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgd29yayBvZiBtYWQgZGlzY29yZCBwcm9kdWNlcyBhIHRlbXBsZSBvZiBDb25jb3JkLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiwgYXMgQ2FpdXMgZmxlZCwgaGlzIGZvZXMgcHJlc3NlZCBoYXJkIHVwb24gaGltIGFuZCB3ZXJlIG92ZXJ0YWtpbmcgaGltIGF0IHRoZSB3b29kZW4gYnJpZGdlIG92ZXIgdGhlIFRpYmVyLCBidXQgaGlzIHR3byBmcmllbmRzIGJhZGUgaGltIGdvIG9uLCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgd2l0aHN0b29kIGhpcyBwdXJzdWVycywgYW5kLCBmaWdodGluZyB0aGVyZSBhdCB0aGUgaGVhZCBvZiB0aGUgYnJpZGdlLCB3b3VsZCBzdWZmZXIgbm8gbWFuIHRvIHBhc3MsIHVudGlsIHRoZXkgd2VyZSBraWxsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhaXVzIGhhZCB3aXRoIGhpbSBpbiBoaXMgZmxpZ2h0IGEgc2luZ2xlIHNlcnZhbnQsIGJ5IG5hbWUgUGhpbG9jcmF0ZXM7IGFuZCB0aG91Z2ggYWxsIHRoZSBzcGVjdGF0b3JzLCBhcyBhdCBhIHJhY2UsIHVyZ2VkIENhaXVzIG9uIHRvIGdyZWF0ZXIgc3BlZWQsIG5vdCBhIG1hbiBjYW1lIHRvIGhpcyBhaWQsIG9yIGV2ZW4gY29uc2VudGVkIHRvIGZ1cm5pc2ggaGltIHdpdGggYSBob3JzZSB3aGVuIGhlIGFza2VkIGZvciBvbmUsIGZvciBoaXMgcHVyc3VlcnMgd2VyZSBwcmVzc2luZyBjbG9zZSB1cG9uIGhpbS4gSGUgYmFyZWx5IHN1Y2NlZWRlZCBpbiBlc2NhcGluZyBpbnRvIGEgc2FjcmVkIGdyb3ZlIG9mIHRoZSBGdXJpZXMsIGFuZCB0aGVyZSBmZWxsIGJ5IHRoZSBoYW5kIG9mIFBoaWxvY3JhdGVzLCB3aG8gdGhlbiBzbGV3IGhpbXNlbGYgdXBvbiBoaXMgbWFzdGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZyB0byBzb21lIHdyaXRlcnMsIGhvd2V2ZXIsIGJvdGggd2VyZSB0YWtlbiBhbGl2ZSBieSB0aGUgZW5lbXksIGFuZCBiZWNhdXNlIHRoZSBzZXJ2YW50IGhhZCB0aHJvd24gaGlzIGFybXMgYWJvdXQgaGlzIG1hc3Rlciwgbm8gb25lIHdhcyBhYmxlIHRvIHN0cmlrZSB0aGUgbWFzdGVyIHVudGlsIHRoZSBzbGF2ZSBoYWQgZmlyc3QgYmVlbiBkaXNwYXRjaGVkIGJ5IHRoZSBibG93cyBvZiBtYW55LiBTb21lb25lIGN1dCBvZmYgdGhlIGhlYWQgb2YgQ2FpdXMsIHdlIGFyZSB0b2xkLCBhbmQgd2FzIGNhcnJ5aW5nIGl0IGFsb25nLCBidXQgd2FzIHJvYmJlZCBvZiBpdCBieSBhIGNlcnRhaW4gZnJpZW5kIG9mIE9waW1pdXMsIFNlcHRpbXVsZWl1czsgZm9yIHByb2NsYW1hdGlvbiBoYWQgYmVlbiBtYWRlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGJhdHRsZSB0aGF0IGFuIGVxdWFsIHdlaWdodCBvZiBnb2xkIHdvdWxkIGJlIHBhaWQgdGhlIG1lbiB3aG8gYnJvdWdodCB0aGUgaGVhZCBvZiBDYWl1cyBvciBGdWx2aXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIFNlcHRpbXVsZWl1cyBzdHVjayB0aGUgaGVhZCBvZiBDYW1zIG9uIGEgc3BlYXIgYW5kIGJyb3VnaHQgaXQgdG8gT3BpbWl1cywgYW5kIHdoZW4gaXQgd2FzIHBsYWNlZCBpbiBhIGJhbGFuY2UgaXQgd2VpZ2hlZCBzZXZlbnRlZW4gcG91bmRzIGFuZCB0d28gdGhpcmRzLCBzaW5jZSBTZXB0aW11bGVpdXMsIGJlc2lkZXMgc2hvd2luZyBoaW1zZWxmIHRvIGJlIGEgc2NvdW5kcmVsLCBoYWQgYWxzbyBwZXJwZXRyYXRlZCBhIGZyYXVkOyBmb3IgaGUgaGFkIHRha2VuIG91dCB0aGUgYnJhaW4gYW5kIHBvdXJlZCBtZWx0ZWQgbGVhZCBpbiBpdHMgcGxhY2UuIEJ1dCB0aG9zZSB3aG8gYnJvdWdodCB0aGUgaGVhZCBvZiBGdWx2aXVzIHdlcmUgb2YgdGhlIG9ic2N1cmVyIHNvcnQsIGFuZCB0aGVyZWZvcmUgZ290IG5vdGhpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBib2RpZXMgb2YgQ2FpdXMgYW5kIEZ1bHZpdXMgYW5kIG9mIHRoZSBvdGhlciBzbGFpbiB3ZXJlIHRocm93biBpbnRvIHRoZSBUaWJlciwgYW5kIHRoZXkgbnVtYmVyZWQgdGhyZWUgdGhvdXNhbmQ7IHRoZWlyIHByb3BlcnR5IHdhcyBzb2xkIGFuZCB0aGUgcHJvY2VlZHMgcGFpZCBpbnRvIHRoZSBwdWJsaWMgdHJlYXN1cnkuIE1vcmVvdmVyLCB0aGVpciB3aXZlcyB3ZXJlIGZvcmJpZGRlbiB0byBnbyBpbnRvIG1vdXJuaW5nLCBhbmQgTGljaW5pYSwgdGhlIHdpZmUgb2YgQ2FpdXMsIHdhcyBhbHNvIGRlcHJpdmVkIG9mIGhlciBtYXJyaWFnZSBwb3J0aW9uLiBNb3N0IGNydWVsIG9mIGFsbCwgaG93ZXZlciwgd2FzIHRoZSB0cmVhdG1lbnQgb2YgdGhlIHlvdW5nZXIgc29uIG9mIEZ1bHZpdXMsIHdobyBoYWQgbmVpdGhlciBsaWZ0ZWQgYSBoYW5kIGFnYWluc3QgdGhlIG5vYmxlcyBub3IgYmVlbiBwcmVzZW50IGF0IHRoZSBmaWdodGluZywgYnV0IGhhZCBjb21lIHRvIGVmZmVjdCBhIHRydWNlIGJlZm9yZSB0aGUgYmF0dGxlIGFuZCBoYWQgYmVlbiBhcnJlc3RlZDsgYWZ0ZXIgdGhlIGJhdHRsZSBoZSB3YXMgc2xhaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoYXQgdmV4ZWQgdGhlIHBlb3BsZSBtb3JlIHRoYW4gdGhpcyBvciBhbnl0aGluZyBlbHNlIHdhcyB0aGUgZXJlY3Rpb24gb2YgYSB0ZW1wbGUgb2YgQ29uY29yZCBieSBPcGltaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PcGltdXMgcmVzdG9yZWQgdGhlIHRlbXBsZSBvZiBDb25jb3JkIHdoaWNoIGhhZCBiZWVuIGJ1aWx0IGJ5IENhbWlsbHVzIChzZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gNDIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbWlsbHVzPC90aXRsZT4sIHhsaWkuIDQuPC9iaWJsPu+8iTwvbm90ZT47IGZvciBpdCB3YXMgZmVsdCB0aGF0IGhlIHdhcyBwcmlkaW5nIGhpbXNlbGYgYW5kIGV4dWx0aW5nIGFuZCBpbiBhIG1hbm5lciBjZWxlYnJhdGluZyBhIHRyaXVtcGggaW4gdmlldyBvZiBhbGwgdGhpcyBzbGF1Z2h0ZXIgb2YgY2l0aXplbnMuIFRoZXJlZm9yZSBhdCBuaWdodCwgYmVuZWF0aCB0aGUgaW5zY3JpcHRpb24gb24gdGhlIHRlbXBsZSwgc29tZWJvZHkgY2FydmVkIHRoaXMgdmVyc2U64oCUCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDQyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1czwvdGl0bGU+LCB4bGlpLiA0LjwvYmlibD7vvIk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1czwvdGl0bGU+LCB4bGlpLiA0LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSB3b3JrIG9mIG1hZCBkaXNjb3JkIHByb2R1Y2VzIGEgdGVtcGxlIG9mIENvbmNvcmQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoaXMgT3BpbWl1cywgd2hvIHdhcyB0aGUgZmlyc3QgY29uc3VsIHRvIGV4ZXJjaXNlIHRoZSBwb3dlciBvZiBhIGRpY3RhdG9yLCBhbmQgcHV0IHRvIGRlYXRoIHdpdGhvdXQgdHJpYWwsIGJlc2lkZXMgdGhyZWUgdGhvdXNhbmQgb3RoZXIgY2l0aXplbnMsIENhaXVzIEdyYWNjaHVzIGFuZCBGdWx2aXVzIEZsYWNjdXMsIG9mIHdob20gb25lIGhhZCBiZWVuIGNvbnN1bCBhbmQgaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoLCB3aGlsZSB0aGUgb3RoZXIgd2FzIHRoZSBmb3JlbW9zdCBtYW4gb2YgaGlzIGdlbmVyYXRpb24gaW4gdmlydHVlIGFuZCByZXB1dGF0aW9u4oCUdGhpcyBPcGltaXVzIGNvdWxkIG5vdCBrZWVwIGhpcyBoYW5kcyBmcm9tIGZyYXVkLCBidXQgd2hlbiBoZSB3YXMgc2VudCBhcyBhbWJhc3NhZG9yIHRvIEp1Z3VydGhhIHRoZSBOdW1pZGlhbiB3YXMgYnJpYmVkIGJ5IGhpbSwgYW5kIGFmdGVyIGJlaW5nIGNvbnZpY3RlZCBtb3N0IHNoYW1lZnVsbHkgb2YgY29ycnVwdGlvbiwgaGUgc3BlbnQgaGlzIG9sZCBhZ2UgaW4gaW5mYW15LCBoYXRlZCBhbmQgYWJ1c2VkIGJ5IHRoZSBwZW9wbGUsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmEgcGVvcGxlIHdoaWNoIHdhcyBodW1ibGUgYW5kIGNvd2VkIGF0IHRoZSB0aW1lIHdoZW4gdGhlIEdyYWNjaGkgZmVsbCwgYnV0IHNvb24gYWZ0ZXJ3YXJkcyBzaG93ZWQgaG93IG11Y2ggaXQgbWlzc2VkIHRoZW0gYW5kIGxvbmdlZCBmb3IgdGhlbS4gRm9yIGl0IGhhZCBzdGF0dWVzIG9mIHRoZSBicm90aGVycyBtYWRlIGFuZCBzZXQgdXAgaW4gYSBjb25zcGljdW91cyBwbGFjZSwgY29uc2VjcmF0ZWQgdGhlIHBsYWNlcyB3aGVyZSB0aGV5IHdlcmUgc2xhaW4sIGFuZCBicm91Z2h0IHRoaXRoZXIgb2ZmZXJpbmdzIG9mIGFsbCB0aGUgZmlyc3QtZnJ1aXRzIG9mIHRoZSBzZWFzb25zLCBuYXksIG1vcmUsIG1hbnkgc2FjcmlmaWNlZCBhbmQgZmVsbCBkb3duIGJlZm9yZSB0aGVpciBzdGF0dWVzIGV2ZXJ5IGRheSwgYXMgdGhvdWdoIHRoZXkgd2VyZSB2aXNpdGluZyB0aGUgc2hyaW5lcyBvZiBnb2RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGlzIE9waW1pdXMsIHdobyB3YXMgdGhlIGZpcnN0IGNvbnN1bCB0byBleGVyY2lzZSB0aGUgcG93ZXIgb2YgYSBkaWN0YXRvciwgYW5kIHB1dCB0byBkZWF0aCB3aXRob3V0IHRyaWFsLCBiZXNpZGVzIHRocmVlIHRob3VzYW5kIG90aGVyIGNpdGl6ZW5zLCBDYWl1cyBHcmFjY2h1cyBhbmQgRnVsdml1cyBGbGFjY3VzLCBvZiB3aG9tIG9uZSBoYWQgYmVlbiBjb25zdWwgYW5kIGhhZCBjZWxlYnJhdGVkIGEgdHJpdW1waCwgd2hpbGUgdGhlIG90aGVyIHdhcyB0aGUgZm9yZW1vc3QgbWFuIG9mIGhpcyBnZW5lcmF0aW9uIGluIHZpcnR1ZSBhbmQgcmVwdXRhdGlvbuKAlHRoaXMgT3BpbWl1cyBjb3VsZCBub3Qga2VlcCBoaXMgaGFuZHMgZnJvbSBmcmF1ZCwgYnV0IHdoZW4gaGUgd2FzIHNlbnQgYXMgYW1iYXNzYWRvciB0byBKdWd1cnRoYSB0aGUgTnVtaWRpYW4gd2FzIGJyaWJlZCBieSBoaW0sIGFuZCBhZnRlciBiZWluZyBjb252aWN0ZWQgbW9zdCBzaGFtZWZ1bGx5IG9mIGNvcnJ1cHRpb24sIGhlIHNwZW50IGhpcyBvbGQgYWdlIGluIGluZmFteSwgaGF0ZWQgYW5kIGFidXNlZCBieSB0aGUgcGVvcGxlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmEgcGVvcGxlIHdoaWNoIHdhcyBodW1ibGUgYW5kIGNvd2VkIGF0IHRoZSB0aW1lIHdoZW4gdGhlIEdyYWNjaGkgZmVsbCwgYnV0IHNvb24gYWZ0ZXJ3YXJkcyBzaG93ZWQgaG93IG11Y2ggaXQgbWlzc2VkIHRoZW0gYW5kIGxvbmdlZCBmb3IgdGhlbS4gRm9yIGl0IGhhZCBzdGF0dWVzIG9mIHRoZSBicm90aGVycyBtYWRlIGFuZCBzZXQgdXAgaW4gYSBjb25zcGljdW91cyBwbGFjZSwgY29uc2VjcmF0ZWQgdGhlIHBsYWNlcyB3aGVyZSB0aGV5IHdlcmUgc2xhaW4sIGFuZCBicm91Z2h0IHRoaXRoZXIgb2ZmZXJpbmdzIG9mIGFsbCB0aGUgZmlyc3QtZnJ1aXRzIG9mIHRoZSBzZWFzb25zLCBuYXksIG1vcmUsIG1hbnkgc2FjcmlmaWNlZCBhbmQgZmVsbCBkb3duIGJlZm9yZSB0aGVpciBzdGF0dWVzIGV2ZXJ5IGRheSwgYXMgdGhvdWdoIHRoZXkgd2VyZSB2aXNpdGluZyB0aGUgc2hyaW5lcyBvZiBnb2RzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlciwgQ29ybmVsaWEgaXMgcmVwb3J0ZWQgdG8gaGF2ZSAgYm9ybmUgYWxsIGhlciBtaXNmb3J0dW5lcyBpbiBhIG5vYmxlIGFuZCBtYWduYW5pbW91cyBzcGlyaXQsIGFuZCB0byBoYXZlIHNhaWQgb2YgdGhlIHNhY3JlZCBwbGFjZXMgd2hlcmUgaGVyIHNvbnMgaGFkIGJlZW4gc2xhaW4gdGhhdCB0aGV5IHdlcmUgdG9tYnMgd29ydGh5IG9mIHRoZSBkZWFkIHdoaWNoIG9jY3VwaWVkIHRoZW0uIFNoZSByZXNpZGVkIG9uIHRoZSBwcm9tb250b3J5IGNhbGxlZCBNaXNlbnVtLCBhbmQgbWFkZSBubyBjaGFuZ2UgaW4gaGVyIGN1c3RvbWFyeSB3YXkgb2YgbGl2aW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgaGFkIG1hbnkgZnJpZW5kcywgYW5kIGtlcHQgYSBnb29kIHRhYmxlIHRoYXQgc2hlIG1pZ2h0IHNob3cgaG9zcGl0YWxpdHksIGZvciBzaGUgYWx3YXlzIGhhZCBHcmVla3MgYW5kIG90aGVyIGxpdGVyYXJ5IG1lbiBhYm91dCBoZXIsIGFuZCBhbGwgdGhlIHJlaWduaW5nIGtpbmdzIGludGVyY2hhbmdlZCBnaWZ0cyB3aXRoIGhlci4gU2hlIHdhcyBpbmRlZWQgdmVyeSBhZ3JlZWFibGUgdG8gaGVyIHZpc2l0b3JzIGFuZCBhc3NvY2lhdGVzIHdoZW4gc2hlIGRpc2NvdXJzZWQgdG8gdGhlbSBhYm91dCB0aGUgbGlmZSBhbmQgaGFiaXRzIG9mIGhlciBmYXRoZXIgQWZyaWNhbnVzLCBidXN0IG1vc3QgYWRtaXJhYmxlIHdoZW4gc2hlIHNwb2tlIG9mIGhlciBzb25zIHdpdGhvdXQgZ3JpZWYgb3IgdGVhcnMsIGFuZCBuYXJyYXRlZCB0aGVpciBhY2hpZXZlbWVudHMgYW5kIHRoZWlyIGZhdGUgdG8gYWxsIGVucXVpcmVycyBhcyBpZiBzaGUgd2VyZSBzcGVha2luZyBvZiBtZW4gb2YgdGhlIGVhcmx5IGRheXMgb2YgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSB3ZXJlIHRoZXJlZm9yZSBsZWQgdG8gdGhpbmsgdGhhdCBvbGQgYWdlIG9yIHRoZSBncmVhdG5lc3Mgb2YgaGVyIHNvcnJvd3MgaGFkIGltcGFpcmVkIGhlciBtaW5kIGFuZCBtYWRlIGhlciBpbnNlbnNpYmxlIHRvIGhlciBtaXNmb3J0dW5lcywgd2hlcmVhcywgcmVhbGx5LCBzdWNoIHBlcnNvbnMgdGhlbXNlbHZlcyB3ZXJlIGluc2Vuc2libGUgaG93IG11Y2ggaGVscCBpbiB0aGUgYmFuaXNobWVudCBvZiBncmllZiBtYW5raW5kIGRlcml2ZXMgZnJvbSBhIG5vYmxlIG5hdHVyZSBhbmQgZnJvbSBob25vdXJhYmxlIGJpcnRoIGFuZCByZWFyaW5nLCBhcyB3ZWxsIGFzIG9mIHRoZSBmYWN0IHRoYXQgd2hpbGUgRm9ydHVuZSBvZnRlbiBwcmV2YWlscyBvdmVyIHZpcnR1ZSB3aGVuIGl0IGVuZGVhdm91cnMgdG8gd2FyZCBvZmYgZXZpbHMsIHNoZSBjYW5ub3Qgcm9iIHZpcnR1ZSBvZiB0aGUgcG93ZXIgdG8gZW5kdXJlIHRob3NlIGV2aWxzIHdpdGggY2FsbSBhc3N1cmFuY2UuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZ1cnRoZXIsIENvcm5lbGlhIGlzIHJlcG9ydGVkIHRvIGhhdmUgIGJvcm5lIGFsbCBoZXIgbWlzZm9ydHVuZXMgaW4gYSBub2JsZSBhbmQgbWFnbmFuaW1vdXMgc3Bpcml0LCBhbmQgdG8gaGF2ZSBzYWlkIG9mIHRoZSBzYWNyZWQgcGxhY2VzIHdoZXJlIGhlciBzb25zIGhhZCBiZWVuIHNsYWluIHRoYXQgdGhleSB3ZXJlIHRvbWJzIHdvcnRoeSBvZiB0aGUgZGVhZCB3aGljaCBvY2N1cGllZCB0aGVtLiBTaGUgcmVzaWRlZCBvbiB0aGUgcHJvbW9udG9yeSBjYWxsZWQgTWlzZW51bSwgYW5kIG1hZGUgbm8gY2hhbmdlIGluIGhlciBjdXN0b21hcnkgd2F5IG9mIGxpdmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNoZSBoYWQgbWFueSBmcmllbmRzLCBhbmQga2VwdCBhIGdvb2QgdGFibGUgdGhhdCBzaGUgbWlnaHQgc2hvdyBob3NwaXRhbGl0eSwgZm9yIHNoZSBhbHdheXMgaGFkIEdyZWVrcyBhbmQgb3RoZXIgbGl0ZXJhcnkgbWVuIGFib3V0IGhlciwgYW5kIGFsbCB0aGUgcmVpZ25pbmcga2luZ3MgaW50ZXJjaGFuZ2VkIGdpZnRzIHdpdGggaGVyLiBTaGUgd2FzIGluZGVlZCB2ZXJ5IGFncmVlYWJsZSB0byBoZXIgdmlzaXRvcnMgYW5kIGFzc29jaWF0ZXMgd2hlbiBzaGUgZGlzY291cnNlZCB0byB0aGVtIGFib3V0IHRoZSBsaWZlIGFuZCBoYWJpdHMgb2YgaGVyIGZhdGhlciBBZnJpY2FudXMsIGJ1c3QgbW9zdCBhZG1pcmFibGUgd2hlbiBzaGUgc3Bva2Ugb2YgaGVyIHNvbnMgd2l0aG91dCBncmllZiBvciB0ZWFycywgYW5kIG5hcnJhdGVkIHRoZWlyIGFjaGlldmVtZW50cyBhbmQgdGhlaXIgZmF0ZSB0byBhbGwgZW5xdWlyZXJzIGFzIGlmIHNoZSB3ZXJlIHNwZWFraW5nIG9mIG1lbiBvZiB0aGUgZWFybHkgZGF5cyBvZiBSb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
