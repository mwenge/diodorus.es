var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24gZm9yIHRoaXMgbGF5IGluIHRoZSBwb2xpdGljYWwgY29uZGl0aW9ucyBvZiBoaXMgdGltZS4gVGhlIGNvbW1vbiBwZW9wbGUsIGJlaW5nIGF0IHZhcmlhbmNlIHdpdGggdGhlIFNlbmF0ZSwgc3Ryb3ZlIGFnYWluc3QgdGhlIGFwcG9pbnRtZW50IG9mIGNvbnN1bHMsIGFuZCBlbGVjdGVkIG1pbGl0YXJ5IHRyaWJ1bmVzIHRvIHRoZSBjb21tYW5kIGluc3RlYWQuIFRoZXNlLCBhbHRob3VnaCB0aGV5IGFsd2F5cyBhY3RlZCB3aXRoIGNvbnN1bGFyIGF1dGhvcml0eSBhbmQgcG93ZXIsIHdlcmUgbGVzcyBvYm5veGlvdXMgaW4gdGhlaXIgc3dheSBiZWNhdXNlIG9mIHRoZWlyIG51bWJlci4gRm9yIHRoZSBmYWN0IHRoYXQgc2l4IG1lbiBpbnN0ZWFkIG9mIHR3byBzdG9vZCBhdCB0aGUgaGVhZCBvZiBhZmZhaXJzLCB3YXMgc29tZSBjb21mb3J0IHRvIHRob3NlIHdobyB3ZXJlIGJpdHRlcmx5IHNldCBhZ2FpbnN0IHRoZSBydWxlIG9mIHRoZSBmZXcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCB3YXMgYXQgdGhpcyBwZXJpb2QgdGhhdCBDYW1pbGx1cyBjYW1lIHRvIHRoZSBoZWlnaHQgb2YgaGlzIGFjaGlldmVtZW50cyBhbmQgZmFtZSwgYW5kIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGJlY29tZSBjb25zdWwgb3ZlciBhIHJlbHVjdGFudCBwZW9wbGUsIGFsdGhvdWdoIGR1cmluZyBoaXMgY2FyZWVyIHRoZSBjaXR5IHRvbGVyYXRlZCBjb25zdWxhciBlbGVjdGlvbnMgbWFueSB0aW1lcy4gQnV0IGluIHRoZSBtYW55IG90aGVyIGFuZCB2YXJpZWQgb2ZmaWNlcyB3aGljaCBoZSBoZWxkLCBoZSBzbyBjb25kdWN0ZWQgaGltc2VsZiB0aGF0IGV2ZW4gd2hlbiB0aGUgYXV0aG9yaXR5IHJpZ2h0bHkgYmVsb25nZWQgdG8gaGltIGFsb25lLCBpdCB3YXMgZXhlcmNpc2VkIGluIGNvbW1vbiB3aXRoIG90aGVyczsgd2hpbGUgdGhlIGdsb3J5IHRoYXQgZm9sbG93ZWQgc3VjaCBleGVyY2lzZSB3YXMgaGlzIGFsb25lLCBldmVuIHdoZW4gaGUgc2hhcmVkIHRoZSBjb21tYW5kLiBJbiB0aGUgZmlyc3QgY2FzZSwgaXQgd2FzIGhpcyBtb2RlcmF0aW9uIHRoYXQga2VwdCBoaXMgcnVsZSBmcm9tIGV4Y2l0aW5nIGVudnk7IGluIHRoZSBzZWNvbmQsIGl0IHdhcyBoaXMgYWJpbGl0eSB0aGF0IGdhdmUgaGltIHRoZSBmaXJzdCBwbGFjZSB3aXRoIG5vbmUgdG8gZGlzcHV0ZSBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCB3YXMgYXQgdGhpcyBwZXJpb2QgdGhhdCBDYW1pbGx1cyBjYW1lIHRvIHRoZSBoZWlnaHQgb2YgaGlzIGFjaGlldmVtZW50cyBhbmQgZmFtZSwgYW5kIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGJlY29tZSBjb25zdWwgb3ZlciBhIHJlbHVjdGFudCBwZW9wbGUsIGFsdGhvdWdoIGR1cmluZyBoaXMgY2FyZWVyIHRoZSBjaXR5IHRvbGVyYXRlZCBjb25zdWxhciBlbGVjdGlvbnMgbWFueSB0aW1lcy4gQnV0IGluIHRoZSBtYW55IG90aGVyIGFuZCB2YXJpZWQgb2ZmaWNlcyB3aGljaCBoZSBoZWxkLCBoZSBzbyBjb25kdWN0ZWQgaGltc2VsZiB0aGF0IGV2ZW4gd2hlbiB0aGUgYXV0aG9yaXR5IHJpZ2h0bHkgYmVsb25nZWQgdG8gaGltIGFsb25lLCBpdCB3YXMgZXhlcmNpc2VkIGluIGNvbW1vbiB3aXRoIG90aGVyczsgd2hpbGUgdGhlIGdsb3J5IHRoYXQgZm9sbG93ZWQgc3VjaCBleGVyY2lzZSB3YXMgaGlzIGFsb25lLCBldmVuIHdoZW4gaGUgc2hhcmVkIHRoZSBjb21tYW5kLiBJbiB0aGUgZmlyc3QgY2FzZSwgaXQgd2FzIGhpcyBtb2RlcmF0aW9uIHRoYXQga2VwdCBoaXMgcnVsZSBmcm9tIGV4Y2l0aW5nIGVudnk7IGluIHRoZSBzZWNvbmQsIGl0IHdhcyBoaXMgYWJpbGl0eSB0aGF0IGdhdmUgaGltIHRoZSBmaXJzdCBwbGFjZSB3aXRoIG5vbmUgdG8gZGlzcHV0ZSBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhIHRpbWUgd2hlbiB0aGUgaG91c2Ugb2YgdGhlIEZ1cmlpIHdhcyBub3QgeWV0IHZlcnkgY29uc3BpY3VvdXMsIGhlLCBieSBoaXMgb3duIGVmZm9ydHMsIHdhcyB0aGUgZmlyc3Qgb2YgaGlzIGNsYW4gdG8gYWNoaWV2ZSBmYW1lLiBUaGlzIGhlIGRpZCBpbiB0aGUgZ3JlYXQgYmF0dGxlIHdpdGggdGhlIEFlcXVpYW5zIGFuZCBWb2xzY2lhbnMsIHNlcnZpbmcgdW5kZXIgUG9zdHVtaXVzIFR1YmVydHVzIHRoZSBkaWN0YXRvci4gRGFzaGluZyBvdXQgb24gaGlzIGhvcnNlIGluIGZyb250IG9mIHRoZSBhcm15LCBoZSBkaWQgbm90IGFiYXRlIGhpcyBzcGVlZCB3aGVuIGhlIGdvdCBhIHdvdW5kIGluIHRoZSB0aGlnaCwgYnV0IGRyYWdnaW5nIHRoZSBtaXNzaWxlIGFsb25nIHdpdGggaGltIGluIGl0cyB3b3VuZCwgaGUgZW5nYWdlZCB0aGUgYnJhdmVzdCBvZiB0aGUgZW5lbXkgYW5kIHB1dCB0aGVtIHRvIGZsaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgZXhwbG9pdCwgYW1vbmcgb3RoZXIgaG9ub3VycyBiZXN0b3dlZCB1cG9uIGhpbSwgaGUgd2FzIGFwcG9pbnRlZCBjZW5zb3IsIGluIHRob3NlIGRheXMgYW4gb2ZmaWNlIG9mIGdyZWF0IGRpZ25pdHkuIFRoZXJlIGlzIG9uIHJlY29yZCBhIG5vYmxlIGFjaGlldmVtZW50IG9mIGhpcyBjZW5zb3JzaGlwLCB0aGF0IG9mIGJyaW5naW5nIHRoZSB1bm1hcnJpZWQgbWVuLCBwYXJ0bHkgYnkgcGVyc3Vhc2lvbiBhbmQgcGFydGx5IGJ5IHRocmVhdGVuaW5nIHRoZW0gd2l0aCBmaW5lcywgdG8gam9pbiBpbiB3ZWRsb2NrIHdpdGggdGhlIHdvbWVuIHdobyB3ZXJlIGxpdmluZyBpbiB3aWRvd2hvb2QsIGFuZCB0aGVzZSB3ZXJlIG1hbnkgYmVjYXVzZSBvZiB0aGUgd2FyczsgbGlrZXdpc2UgYSBuZWNlc3NhcnkgYWNoaWV2ZW1lbnQsIHRoYXQgb2YgbWFraW5nIHRoZSBvcnBoYW5zLCB3aG8gYmVmb3JlIHRoaXMgaGFkIGNvbnRyaWJ1dGVkIG5vdGhpbmcgdG8gdGhlIHN1cHBvcnQgb2YgdGhlIHN0YXRlLCBzdWJqZWN0IHRvIHRheGF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29udGludW91cyBjYW1wYWlnbnMsIGRlbWFuZGluZyBncmVhdCBvdXRsYXlzIG9mIG1vbmV5LCByZWFsbHkgcmVxdWlyZWQgdGhpcy4gRXNwZWNpYWxseSBidXJkZW5zb21lIHdhcyB0aGUgc2llZ2Ugb2YgVmVpaSAoc29tZSBjYWxsIHRoZSBwZW9wbGUgVmVpZW50YW5pKS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhIHRpbWUgd2hlbiB0aGUgaG91c2Ugb2YgdGhlIEZ1cmlpIHdhcyBub3QgeWV0IHZlcnkgY29uc3BpY3VvdXMsIGhlLCBieSBoaXMgb3duIGVmZm9ydHMsIHdhcyB0aGUgZmlyc3Qgb2YgaGlzIGNsYW4gdG8gYWNoaWV2ZSBmYW1lLiBUaGlzIGhlIGRpZCBpbiB0aGUgZ3JlYXQgYmF0dGxlIHdpdGggdGhlIEFlcXVpYW5zIGFuZCBWb2xzY2lhbnMsIHNlcnZpbmcgdW5kZXIgUG9zdHVtaXVzIFR1YmVydHVzIHRoZSBkaWN0YXRvci4gRGFzaGluZyBvdXQgb24gaGlzIGhvcnNlIGluIGZyb250IG9mIHRoZSBhcm15LCBoZSBkaWQgbm90IGFiYXRlIGhpcyBzcGVlZCB3aGVuIGhlIGdvdCBhIHdvdW5kIGluIHRoZSB0aGlnaCwgYnV0IGRyYWdnaW5nIHRoZSBtaXNzaWxlIGFsb25nIHdpdGggaGltIGluIGl0cyB3b3VuZCwgaGUgZW5nYWdlZCB0aGUgYnJhdmVzdCBvZiB0aGUgZW5lbXkgYW5kIHB1dCB0aGVtIHRvIGZsaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIGV4cGxvaXQsIGFtb25nIG90aGVyIGhvbm91cnMgYmVzdG93ZWQgdXBvbiBoaW0sIGhlIHdhcyBhcHBvaW50ZWQgY2Vuc29yLCBpbiB0aG9zZSBkYXlzIGFuIG9mZmljZSBvZiBncmVhdCBkaWduaXR5LiBUaGVyZSBpcyBvbiByZWNvcmQgYSBub2JsZSBhY2hpZXZlbWVudCBvZiBoaXMgY2Vuc29yc2hpcCwgdGhhdCBvZiBicmluZ2luZyB0aGUgdW5tYXJyaWVkIG1lbiwgcGFydGx5IGJ5IHBlcnN1YXNpb24gYW5kIHBhcnRseSBieSB0aHJlYXRlbmluZyB0aGVtIHdpdGggZmluZXMsIHRvIGpvaW4gaW4gd2VkbG9jayB3aXRoIHRoZSB3b21lbiB3aG8gd2VyZSBsaXZpbmcgaW4gd2lkb3dob29kLCBhbmQgdGhlc2Ugd2VyZSBtYW55IGJlY2F1c2Ugb2YgdGhlIHdhcnM7IGxpa2V3aXNlIGEgbmVjZXNzYXJ5IGFjaGlldmVtZW50LCB0aGF0IG9mIG1ha2luZyB0aGUgb3JwaGFucywgd2hvIGJlZm9yZSB0aGlzIGhhZCBjb250cmlidXRlZCBub3RoaW5nIHRvIHRoZSBzdXBwb3J0IG9mIHRoZSBzdGF0ZSwgc3ViamVjdCB0byB0YXhhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb250aW51b3VzIGNhbXBhaWducywgZGVtYW5kaW5nIGdyZWF0IG91dGxheXMgb2YgbW9uZXksIHJlYWxseSByZXF1aXJlZCB0aGlzLiBFc3BlY2lhbGx5IGJ1cmRlbnNvbWUgd2FzIHRoZSBzaWVnZSBvZiBWZWlpIChzb21lIGNhbGwgdGhlIHBlb3BsZSBWZWllbnRhbmkpLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoaXMgY2l0eSB3YXMgdGhlIGJhcnJpZXIgYW5kIGJ1bHdhcmsgb2YgVHVzY2FueSwgaW4gcXVhbnRpdHkgb2YgYXJtcyBhbmQgbXVsdGl0dWRlIG9mIHNvbGRpZXJ5IG5vIHdoaXQgaW50ZXJpb3IgdG8gUm9tZS4gSW5kZWVkLCBwbHVtaW5nIGhlcnNlbGYgb24gaGVyIHdlYWx0aCwgYW5kIG9uIHRoZSByZWZpbmVtZW50LCBsdXh1cnksIGFuZCBzdW1wdHVvdXNuZXNzIGluIHdoaWNoIGhlciBjaXRpemVucyBsaXZlZCBzaGUgaGFkIHdhZ2VkIG1hbnkgbm9ibGUgY29udGVzdHMgZm9yIGdsb3J5IGFuZCBwb3dlciBpbiBoZXIgd2FycyB3aXRoIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBob3dldmVyLCBzaGUgaGFkIGJlZW4gY3J1c2hlZCBpbiBncmVhdCBiYXR0bGVzLCBhbmQgaGFkIGdpdmVuIHVwIGhlciBmb3JtZXIgYW1iaXRpb3VzIHByZXRlbnNpb25zLiBCdXQgaGVyIHBlb3BsZSBidWlsdCB0aGVpciB3YWxscyBoaWdoIGFuZCBzdHJvbmcsIGZpbGxlZCB0aGUgY2l0eSBmdWxsIG9mIGFybW91ciwgbWlzc2lsZXMsIGdyYWluLCBhbmQgZXZlcnkgcG9zc2libGUgcHJvdmlzaW9uLCBhbmQgY29uZmlkZW50bHkgZW5kdXJlZCB0aGVpciBzaWVnZSwgd2hpY2gsIHRob3VnaCBsb25nLCB3YXMgbm8gbGVzcyBsYWJvcmlvdXMgYW5kIGRpZmZpY3VsdCBmb3IgdGhlIGJlc2llZ2Vycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgaGFkIGJlZW4gYWNjdXN0b21lZCB0byBzaG9ydCBjYW1wYWlnbnMgYWJyb2FkIGFzIHRoZSBzdW1tZXIgc2Vhc29uIG9wZW5lZCwgYW5kIHRvIHdpbnRlcnMgYXQgaG9tZTsgYnV0IHRoZW4gZm9yIHRoZSBmaXJzdCB0aW1lIHRoZXkgaGFkIGJlZW4gY29tcGVsbGVkIGJ5IHRoZWlyIHRyaWJ1bmVzIHRvIGJ1aWxkIGZvcnRzIGFuZCBmb3J0aWZ5IHRoZWlyIGNhbXAgYW5kIHNwZW5kIGJvdGggc3VtbWVyIGFuZCB3aW50ZXIgaW4gdGhlIGVuZW15J3MgY291bnRyeSwgdGhlIHNldmVudGggeWVhciBvZiB0aGUgd2FyIGJlaW5nIG5vdyBuZWFybHkgYXQgYW4gZW5kLiBGb3IgdGhpcyB0aGVpciBydWxlcnMgd2VyZSBoZWxkIHRvIGJsYW1lLCBhbmQgZmluYWxseSBkZXByaXZlZCBvZiB0aGVpciBydWxlLCBiZWNhdXNlIHRoZXkgd2VyZSB0aG91Z2h0IHRvIGNvbmR1Y3QgdGhlIHNpZWdlIHdpdGhvdXQgZW5lcmd5LiBPdGhlcnMgd2VyZSBjaG9zZW4gdG8gY2Fycnkgb24gdGhlIHdhciwgYW5kIG9uZSBvZiB0aGVzZSB3YXMgQ2FtaWxsdXMsIG5vdyB0cmlidW5lIGZvciB0aGUgc2Vjb25kIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3IgdGhlIHByZXNlbnQgaGUgaGFkIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgc2llZ2UsIHNpbmNlIGl0IGZlbGwgdG8gaGlzIGxvdCB0byB3YWdlIHdhciB3aXRoIHRoZSBGYWxlcmlhbnMgYW5kIHRoZSBDYXBlbmF0ZXMsIHdobywgd2hpbGUgdGhlIFJvbWFucyBoYWQgdGhlaXIgaGFuZHMgZnVsbCwgaGFkIG9mdGVuIGhhcnJpZWQgdGhlaXIgdGVycml0b3J5LCBhbmQgZHVyaW5nIGFsbCB0aGUgVHVzY2FuIHdhciBoYWQgZ2l2ZW4gdGhlbSBhbm5veWFuY2UgYW5kIHRyb3VibGUuIFRoZXNlIHdlcmUgb3ZlcndoZWxtZWQgYnkgQ2FtaWxsdXMgaW4gYmF0dGxlIGFuZCBzaHV0IHVwIGluIHRoZWlyIGZhc3RuZXNzZXMgd2l0aCBncmVhdCBsb3NzIG9mIGxpZmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgc2hlIGhhZCBiZWVuIGNydXNoZWQgaW4gZ3JlYXQgYmF0dGxlcywgYW5kIGhhZCBnaXZlbiB1cCBoZXIgZm9ybWVyIGFtYml0aW91cyBwcmV0ZW5zaW9ucy4gQnV0IGhlciBwZW9wbGUgYnVpbHQgdGhlaXIgd2FsbHMgaGlnaCBhbmQgc3Ryb25nLCBmaWxsZWQgdGhlIGNpdHkgZnVsbCBvZiBhcm1vdXIsIG1pc3NpbGVzLCBncmFpbiwgYW5kIGV2ZXJ5IHBvc3NpYmxlIHByb3Zpc2lvbiwgYW5kIGNvbmZpZGVudGx5IGVuZHVyZWQgdGhlaXIgc2llZ2UsIHdoaWNoLCB0aG91Z2ggbG9uZywgd2FzIG5vIGxlc3MgbGFib3Jpb3VzIGFuZCBkaWZmaWN1bHQgZm9yIHRoZSBiZXNpZWdlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGhhZCBiZWVuIGFjY3VzdG9tZWQgdG8gc2hvcnQgY2FtcGFpZ25zIGFicm9hZCBhcyB0aGUgc3VtbWVyIHNlYXNvbiBvcGVuZWQsIGFuZCB0byB3aW50ZXJzIGF0IGhvbWU7IGJ1dCB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSB0aGV5IGhhZCBiZWVuIGNvbXBlbGxlZCBieSB0aGVpciB0cmlidW5lcyB0byBidWlsZCBmb3J0cyBhbmQgZm9ydGlmeSB0aGVpciBjYW1wIGFuZCBzcGVuZCBib3RoIHN1bW1lciBhbmQgd2ludGVyIGluIHRoZSBlbmVteSdzIGNvdW50cnksIHRoZSBzZXZlbnRoIHllYXIgb2YgdGhlIHdhciBiZWluZyBub3cgbmVhcmx5IGF0IGFuIGVuZC4gRm9yIHRoaXMgdGhlaXIgcnVsZXJzIHdlcmUgaGVsZCB0byBibGFtZSwgYW5kIGZpbmFsbHkgZGVwcml2ZWQgb2YgdGhlaXIgcnVsZSwgYmVjYXVzZSB0aGV5IHdlcmUgdGhvdWdodCB0byBjb25kdWN0IHRoZSBzaWVnZSB3aXRob3V0IGVuZXJneS4gT3RoZXJzIHdlcmUgY2hvc2VuIHRvIGNhcnJ5IG9uIHRoZSB3YXIsIGFuZCBvbmUgb2YgdGhlc2Ugd2FzIENhbWlsbHVzLCBub3cgdHJpYnVuZSBmb3IgdGhlIHNlY29uZCB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3IgdGhlIHByZXNlbnQgaGUgaGFkIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgc2llZ2UsIHNpbmNlIGl0IGZlbGwgdG8gaGlzIGxvdCB0byB3YWdlIHdhciB3aXRoIHRoZSBGYWxlcmlhbnMgYW5kIHRoZSBDYXBlbmF0ZXMsIHdobywgd2hpbGUgdGhlIFJvbWFucyBoYWQgdGhlaXIgaGFuZHMgZnVsbCwgaGFkIG9mdGVuIGhhcnJpZWQgdGhlaXIgdGVycml0b3J5LCBhbmQgZHVyaW5nIGFsbCB0aGUgVHVzY2FuIHdhciBoYWQgZ2l2ZW4gdGhlbSBhbm5veWFuY2UgYW5kIHRyb3VibGUuIFRoZXNlIHdlcmUgb3ZlcndoZWxtZWQgYnkgQ2FtaWxsdXMgaW4gYmF0dGxlIGFuZCBzaHV0IHVwIGluIHRoZWlyIGZhc3RuZXNzZXMgd2l0aCBncmVhdCBsb3NzIG9mIGxpZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgd2hlbiB0aGUgd2FyIHdhcyBhdCBpdHMgY2xpbWF4LCB0aGUgY2FsYW1pdHkgb2YgdGhlIEFsYmFuIGxha2UgYWRkZWQgaXRzIHRlcnJvcnMuIEl0IHNlZW1lZCBhIG1vc3QgaW5jcmVkaWJsZSBwcm9kaWd5LCB3aXRob3V0IGZhbWlsaWFyIGNhdXNlIG9yIG5hdHVyYWwgZXhwbGFuYXRpb24uIEZvciB0aGUgc2Vhc29uIHdhcyBhdXR1bW4sIGFuZCB0aGUgc3VtbWVyIGp1c3QgZW5kZWQgaGFkLCB0byBhbGwgb2JzZXJ2YXRpb24sIGJlZW4gbmVpdGhlciByYWlueSBub3IgdmV4ZWQgYnkgc291dGggd2luZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBsYWtlcywgcml2ZXJzLCBhbmQgc3RyZWFtcyBvZiBhbGwgc2l6ZXMgd2l0aCB3aGljaCBJdGFseSBhYm91bmRzLCBzb21lIGhhZCBmYWlsZWQgdXR0ZXJseSwgb3RoZXJzIGJhcmVseSBtYW5hZ2VkIHRvIGhvbGQgb3V0LCBhbmQgYWxsIHRoZSByaXZlcnMgcmFuIGxvdywgYmV0d2VlbiBoaWdoIGJhbmtzLCBhcyB3YXMgYWx3YXlzIHRoZSBjYXNlIGluIHN1bW1lci4gQnV0IHRoZSBBbGJhbiBsYWtlLCB3aGljaCBoYWQgaXRzIHNvdXJjZSBhbmQgb3V0bGV0IHdpdGhpbiBpdHNlbGYsIGFuZCB3YXMgZ2lydCBhYm91dCB3aXRoIGZlcnRpbGUgbW91bnRhaW5zLCBmb3Igbm8gcmVhc29uLCBleGNlcHQgaXQgYmUgdGhhdCBoZWF2ZW4gd2lsbGVkIGl0LCB3YXMgb2JzZXJ2ZWQgdG8gaW5jcmVhc2UgYW5kIHN3ZWxsIHVudGlsIGl0IHJlYWNoZWQgdGhlIHNraXJ0cyBvZiB0aGUgbW91bnRhaW5zIGFuZCBncmFkdWFsbHkgdG91Y2hlZCB0aGVpciBoaWdoZXN0IHJpZGdlcy4gQWxsIHRoaXMgcmlzZSB3YXMgd2l0aG91dCBzdXJnZSBvciBiaWxsb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IGl0IHdhcyBhIHByb2RpZ3kgZm9yIG5laWdoYm91cmluZyBzaGVwaGVyZHMgYW5kIGhlcmRzbWVuLiBCdXQgd2hlbiB0aGUgdm9sdW1lIGFuZCB3ZWlnaHQgb2Ygd2F0ZXIgYnJva2UgYXdheSB0aGUgYmFycmllciB3aGljaCwgbGlrZSBhbiBpc3RobXVzLCBoYWQga2VwdCB0aGUgbGFrZSBmcm9tIHRoZSBjb3VudHJ5IGx5aW5nIGJlbG93IGl0LCBhbmQgYSBodWdlIHRvcnJlbnQgcG91cmVkIGRvd24gdGhyb3VnaCB0aGUgZmllbGRzIGFuZCB2aW5leWFyZHMgYW5kIG1hZGUgaXRzIHdheSB0byB0aGUgc2VhLCB0aGVuIG5vdCBvbmx5IHdlcmUgdGhlIFJvbWFucyB0aGVtc2VsdmVzIGRpc21heWVkLCBidXQgYWxsIHRoZSBpbmhhYml0YW50cyBvZiBJdGFseSB0aG91Z2h0IGl0IGEgc2lnbiBvZiBubyBzbWFsbCBldmlsIHRvIGNvbWUuIFRoZXJlIHdhcyBtdWNoIHRhbGsgYWJvdXQgaXQgaW4gdGhlIGFybXkgdGhhdCB3YXMgYmVzaWVnaW5nIFZlaWksIHNvIHRoYXQgZXZlbiB0aGUgYmVzaWVnZWQgdGhlbXNlbHZlcyBoZWFyZCBvZiB0aGUgY2FsYW1pdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCB3aGVuIHRoZSB3YXIgd2FzIGF0IGl0cyBjbGltYXgsIHRoZSBjYWxhbWl0eSBvZiB0aGUgQWxiYW4gbGFrZSBhZGRlZCBpdHMgdGVycm9ycy4gSXQgc2VlbWVkIGEgbW9zdCBpbmNyZWRpYmxlIHByb2RpZ3ksIHdpdGhvdXQgZmFtaWxpYXIgY2F1c2Ugb3IgbmF0dXJhbCBleHBsYW5hdGlvbi4gRm9yIHRoZSBzZWFzb24gd2FzIGF1dHVtbiwgYW5kIHRoZSBzdW1tZXIganVzdCBlbmRlZCBoYWQsIHRvIGFsbCBvYnNlcnZhdGlvbiwgYmVlbiBuZWl0aGVyIHJhaW55IG5vciB2ZXhlZCBieSBzb3V0aCB3aW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBsYWtlcywgcml2ZXJzLCBhbmQgc3RyZWFtcyBvZiBhbGwgc2l6ZXMgd2l0aCB3aGljaCBJdGFseSBhYm91bmRzLCBzb21lIGhhZCBmYWlsZWQgdXR0ZXJseSwgb3RoZXJzIGJhcmVseSBtYW5hZ2VkIHRvIGhvbGQgb3V0LCBhbmQgYWxsIHRoZSByaXZlcnMgcmFuIGxvdywgYmV0d2VlbiBoaWdoIGJhbmtzLCBhcyB3YXMgYWx3YXlzIHRoZSBjYXNlIGluIHN1bW1lci4gQnV0IHRoZSBBbGJhbiBsYWtlLCB3aGljaCBoYWQgaXRzIHNvdXJjZSBhbmQgb3V0bGV0IHdpdGhpbiBpdHNlbGYsIGFuZCB3YXMgZ2lydCBhYm91dCB3aXRoIGZlcnRpbGUgbW91bnRhaW5zLCBmb3Igbm8gcmVhc29uLCBleGNlcHQgaXQgYmUgdGhhdCBoZWF2ZW4gd2lsbGVkIGl0LCB3YXMgb2JzZXJ2ZWQgdG8gaW5jcmVhc2UgYW5kIHN3ZWxsIHVudGlsIGl0IHJlYWNoZWQgdGhlIHNraXJ0cyBvZiB0aGUgbW91bnRhaW5zIGFuZCBncmFkdWFsbHkgdG91Y2hlZCB0aGVpciBoaWdoZXN0IHJpZGdlcy4gQWxsIHRoaXMgcmlzZSB3YXMgd2l0aG91dCBzdXJnZSBvciBiaWxsb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IGl0IHdhcyBhIHByb2RpZ3kgZm9yIG5laWdoYm91cmluZyBzaGVwaGVyZHMgYW5kIGhlcmRzbWVuLiBCdXQgd2hlbiB0aGUgdm9sdW1lIGFuZCB3ZWlnaHQgb2Ygd2F0ZXIgYnJva2UgYXdheSB0aGUgYmFycmllciB3aGljaCwgbGlrZSBhbiBpc3RobXVzLCBoYWQga2VwdCB0aGUgbGFrZSBmcm9tIHRoZSBjb3VudHJ5IGx5aW5nIGJlbG93IGl0LCBhbmQgYSBodWdlIHRvcnJlbnQgcG91cmVkIGRvd24gdGhyb3VnaCB0aGUgZmllbGRzIGFuZCB2aW5leWFyZHMgYW5kIG1hZGUgaXRzIHdheSB0byB0aGUgc2VhLCB0aGVuIG5vdCBvbmx5IHdlcmUgdGhlIFJvbWFucyB0aGVtc2VsdmVzIGRpc21heWVkLCBidXQgYWxsIHRoZSBpbmhhYml0YW50cyBvZiBJdGFseSB0aG91Z2h0IGl0IGEgc2lnbiBvZiBubyBzbWFsbCBldmlsIHRvIGNvbWUuIFRoZXJlIHdhcyBtdWNoIHRhbGsgYWJvdXQgaXQgaW4gdGhlIGFybXkgdGhhdCB3YXMgYmVzaWVnaW5nIFZlaWksIHNvIHRoYXQgZXZlbiB0aGUgYmVzaWVnZWQgdGhlbXNlbHZlcyBoZWFyZCBvZiB0aGUgY2FsYW1pdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgd2FzIHRvIGJlIGV4cGVjdGVkIGluIGEgbG9uZyBzaWVnZSByZXF1aXJpbmcgbWFueSBtZWV0aW5ncyBmb3IgY29uZmVyZW5jZSB3aXRoIHRoZSBlbmVteSwgaXQgZmVsbCBvdXQgdGhhdCBhIGNlcnRhaW4gUm9tYW4gYmVjYW1lIGludGltYXRlIGFuZCBjb25maWRlbnRpYWwgd2l0aCBvbmUgb2YgdGhlIGNpdGl6ZW5zIG9mIFZlaWksIGEgbWFuIHZlcnNlZCBpbiBhbmNpZW50IG9yYWNsZXMsIGFuZCByZXB1dGVkIHdpc2VyIHRoYW4gdGhlIHJlc3QgZnJvbSBoaXMgYmVpbmcgYSBkaXZpbmVyLiBUaGUgUm9tYW4gc2F3IHRoYXQgdGhpcyBtYW4sIG9uIGhlYXJpbmcgdGhlIHN0b3J5IG9mIHRoZSBsYWtlLCB3YXMgb3ZlcmpveWVkIGFuZCBtYWRlIG1vY2sgb2YgdGhlIHNpZWdlLiBIZSB0aGVyZWZvcmUgdG9sZCBoaW0gdGhpcyB3YXMgbm90IHRoZSBvbmx5IHdvbmRlciB3aGljaCB0aGUgcGFzc2luZyBkYXlzIGhhZCBicm91Z2h0LCBidXQgdGhhdCBvdGhlciBhbmQgc3RyYW5nZXIgc2lnbnMgdGhhbiB0aGlzIGhhZCBiZWVuIGdpdmVuIHRvIHRoZSBSb21hbnMsIG9mIHdoaWNoIGhlIHdhcyBtaW5kZWQgdG8gdGVsbCBoaW0sIGluIG9yZGVyIHRoYXQsIGlmIHBvc3NpYmxlLCBoZSBtaWdodCBiZXR0ZXIgaGlzIG93biBwcml2YXRlIGNhc2UgaW4gdGhlIG1pZHN0IG9mIHRoZSBwdWJsaWMgZGlzdHJlc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG1hbiBnYXZlIGVhZ2VyIGhlYXJpbmcgdG8gYWxsIHRoaXMsIGFuZCBjb25zZW50ZWQgdG8gYSBjb25mZXJlbmNlLCBzdXBwb3NpbmcgdGhhdCBoZSB3YXMgZ29pbmcgdG8gaGVhciBzb21lIGRlZXAgc2VjcmV0cy4gQnV0IHRoZSBSb21hbiBsZWQgaGltIGFsb25nIGxpdHRsZSBieSBsaXR0bGUsIGNvbnZlcnNpbmcgYXMgaGUgd2VudCwgdW50aWwgdGhleSB3ZXJlIHNvbWUgd2F5IGJleW9uZCB0aGUgY2l0eSBnYXRlLCB3aGVuIGhlIHNlaXplZCBoaW0gYm9kaWx5LCBiZWluZyBhIHN0dXJkaWVyIG1hbiB0aGFuIGhlLCBhbmQgd2l0aCB0aGUgaGVscCBvZiBjb21yYWRlcyB3aG8gY2FtZSBydW5uaW5nIHVwIGZyb20gdGhlIGNhbXAsIG1hc3RlcmVkIGhpbSBjb21wbGV0ZWx5IGFuZCBoYW5kZWQgaGltIG92ZXIgdG8gdGhlIGdlbmVyYWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGNvbnN0cmFpbmVkLCBhbmQgcGVyY2VpdmluZyB0aGF0IGZhdGUncyBkZWNyZWVzIHdlcmUgbm90IHRvIGJlIGV2YWRlZCwgdGhlIG1hbiByZXZlYWxlZCBzZWNyZXQgb3JhY2xlcyByZWdhcmRpbmcgaGlzIG5hdGl2ZSBjaXR5LCB0byB0aGUgZWZmZWN0IHRoYXQgaXQgY291bGQgbm90IGJlIGNhcHR1cmVkIHVudGlsIHRoZSBBbGJhbiBsYWtlLCBhZnRlciBsZWF2aW5nIGl0cyBiZWQgYW5kIG1ha2luZyBuZXcgY2hhbm5lbHMgZm9yIGl0c2VsZiwgc2hvdWxkIGJlIGRyaXZlbiBiYWNrIGJ5IHRoZSBlbmVteSwgZGVmbGVjdGVkIGZyb20gaXRzIGNvdXJzZSwgYW5kIHByZXZlbnRlZCBmcm9tIG1pbmdsaW5nIHdpdGggdGhlIHNlYS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB3YXMgdG8gYmUgZXhwZWN0ZWQgaW4gYSBsb25nIHNpZWdlIHJlcXVpcmluZyBtYW55IG1lZXRpbmdzIGZvciBjb25mZXJlbmNlIHdpdGggdGhlIGVuZW15LCBpdCBmZWxsIG91dCB0aGF0IGEgY2VydGFpbiBSb21hbiBiZWNhbWUgaW50aW1hdGUgYW5kIGNvbmZpZGVudGlhbCB3aXRoIG9uZSBvZiB0aGUgY2l0aXplbnMgb2YgVmVpaSwgYSBtYW4gdmVyc2VkIGluIGFuY2llbnQgb3JhY2xlcywgYW5kIHJlcHV0ZWQgd2lzZXIgdGhhbiB0aGUgcmVzdCBmcm9tIGhpcyBiZWluZyBhIGRpdmluZXIuIFRoZSBSb21hbiBzYXcgdGhhdCB0aGlzIG1hbiwgb24gaGVhcmluZyB0aGUgc3Rvcnkgb2YgdGhlIGxha2UsIHdhcyBvdmVyam95ZWQgYW5kIG1hZGUgbW9jayBvZiB0aGUgc2llZ2UuIEhlIHRoZXJlZm9yZSB0b2xkIGhpbSB0aGlzIHdhcyBub3QgdGhlIG9ubHkgd29uZGVyIHdoaWNoIHRoZSBwYXNzaW5nIGRheXMgaGFkIGJyb3VnaHQsIGJ1dCB0aGF0IG90aGVyIGFuZCBzdHJhbmdlciBzaWducyB0aGFuIHRoaXMgaGFkIGJlZW4gZ2l2ZW4gdG8gdGhlIFJvbWFucywgb2Ygd2hpY2ggaGUgd2FzIG1pbmRlZCB0byB0ZWxsIGhpbSwgaW4gb3JkZXIgdGhhdCwgaWYgcG9zc2libGUsIGhlIG1pZ2h0IGJldHRlciBoaXMgb3duIHByaXZhdGUgY2FzZSBpbiB0aGUgbWlkc3Qgb2YgdGhlIHB1YmxpYyBkaXN0cmVzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gZ2F2ZSBlYWdlciBoZWFyaW5nIHRvIGFsbCB0aGlzLCBhbmQgY29uc2VudGVkIHRvIGEgY29uZmVyZW5jZSwgc3VwcG9zaW5nIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGhlYXIgc29tZSBkZWVwIHNlY3JldHMuIEJ1dCB0aGUgUm9tYW4gbGVkIGhpbSBhbG9uZyBsaXR0bGUgYnkgbGl0dGxlLCBjb252ZXJzaW5nIGFzIGhlIHdlbnQsIHVudGlsIHRoZXkgd2VyZSBzb21lIHdheSBiZXlvbmQgdGhlIGNpdHkgZ2F0ZSwgd2hlbiBoZSBzZWl6ZWQgaGltIGJvZGlseSwgYmVpbmcgYSBzdHVyZGllciBtYW4gdGhhbiBoZSwgYW5kIHdpdGggdGhlIGhlbHAgb2YgY29tcmFkZXMgd2hvIGNhbWUgcnVubmluZyB1cCBmcm9tIHRoZSBjYW1wLCBtYXN0ZXJlZCBoaW0gY29tcGxldGVseSBhbmQgaGFuZGVkIGhpbSBvdmVyIHRvIHRoZSBnZW5lcmFscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgY29uc3RyYWluZWQsIGFuZCBwZXJjZWl2aW5nIHRoYXQgZmF0ZSdzIGRlY3JlZXMgd2VyZSBub3QgdG8gYmUgZXZhZGVkLCB0aGUgbWFuIHJldmVhbGVkIHNlY3JldCBvcmFjbGVzIHJlZ2FyZGluZyBoaXMgbmF0aXZlIGNpdHksIHRvIHRoZSBlZmZlY3QgdGhhdCBpdCBjb3VsZCBub3QgYmUgY2FwdHVyZWQgdW50aWwgdGhlIEFsYmFuIGxha2UsIGFmdGVyIGxlYXZpbmcgaXRzIGJlZCBhbmQgbWFraW5nIG5ldyBjaGFubmVscyBmb3IgaXRzZWxmLCBzaG91bGQgYmUgZHJpdmVuIGJhY2sgYnkgdGhlIGVuZW15LCBkZWZsZWN0ZWQgZnJvbSBpdHMgY291cnNlLCBhbmQgcHJldmVudGVkIGZyb20gbWluZ2xpbmcgd2l0aCB0aGUgc2VhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgU2VuYXRlLCBvbiBoZWFyaW5nIHRoaXMsIHdhcyBhdCBncmVhdCBsb3NzIHdoYXQgdG8gZG8sIGFuZCB0aG91Z2h0IGl0IHdlbGwgdG8gc2VuZCBhbiBlbWJhc3N5IHRvIERlbHBoaSB0byBjb25zdWx0IHRoZSBnb2QuIFRoZSBlbnZveXMgd2VyZSBtZW4gb2YgZ3JlYXQgcmVwdXRlIGFuZCBpbmZsdWVuY2UsIENvc3N1cyBMaWNpbml1cywgVmFsZXJpdXMgUG90aXR1cywgYW5kIEZhYml1cyBBbWJ1c3R1cywgd2hvIG1hZGUgdGhlaXIgdm95YWdlIGFuZCBDYW1lIGJhY2sgd2l0aCB0aGUgcmVzcG9uc2VzIG9mIHRoZSBnb2QuIE9uZSBvZiB0aGVzZSB0b2xkIHRoZW0gdGhhdCBjZXJ0YWluIGFuY2VzdHJhbCByaXRlcyBjb25uZWN0ZWQgd2l0aCB0aGUgc28tY2FsbGVkIExhdGluIGZlc3RpdmFscyBoYWQgYmVlbiB1bmR1bHkgbmVnbGVjdGVkOyBhbm90aGVyIGJhZGUgdGhlbSBieSBhbGwgbWVhbnMgdG8ga2VlcCB0aGUgd2F0ZXIgb2YgdGhlIEFsYmFuIGxha2UgYXdheSBmcm9tIHRoZSBzZWEgYW5kIGZvcmNlIGl0IGJhY2sgaW50byBpdHMgYW5jaWVudCBiZWQsIG9yLCBpZiB0aGV5IGNvdWxkIG5vdCBlZmZlY3QgdGhpcywgYnkgbWVhbnMgb2YgY2FuYWxzIGFuZCB0cmVuY2hlcyB0byBkaXZlcnQgaXQgaW50byB0aGUgcGxhaW4gYW5kIGRpc3NpcGF0ZSBpdC4gT24gcmVjZWlwdCBvZiB0aGVzZSByZXNwb25zZXMgdGhlIHByaWVzdHMgcGVyZm9ybWVkIHRoZSBuZWdsZWN0ZWQgc2FjcmlmaWNlcywgYW5kIHRoZSBwZW9wbGUgc2FsbGllZCBvdXQgaW50byB0aGUgZmllbGRzIGFuZCBkaXZlcnRlZCB0aGUgY291cnNlIG9mIHRoZSB3YXRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUsIG9uIGhlYXJpbmcgdGhpcywgd2FzIGF0IGdyZWF0IGxvc3Mgd2hhdCB0byBkbywgYW5kIHRob3VnaHQgaXQgd2VsbCB0byBzZW5kIGFuIGVtYmFzc3kgdG8gRGVscGhpIHRvIGNvbnN1bHQgdGhlIGdvZC4gVGhlIGVudm95cyB3ZXJlIG1lbiBvZiBncmVhdCByZXB1dGUgYW5kIGluZmx1ZW5jZSwgQ29zc3VzIExpY2luaXVzLCBWYWxlcml1cyBQb3RpdHVzLCBhbmQgRmFiaXVzIEFtYnVzdHVzLCB3aG8gbWFkZSB0aGVpciB2b3lhZ2UgYW5kIENhbWUgYmFjayB3aXRoIHRoZSByZXNwb25zZXMgb2YgdGhlIGdvZC4gT25lIG9mIHRoZXNlIHRvbGQgdGhlbSB0aGF0IGNlcnRhaW4gYW5jZXN0cmFsIHJpdGVzIGNvbm5lY3RlZCB3aXRoIHRoZSBzby1jYWxsZWQgTGF0aW4gZmVzdGl2YWxzIGhhZCBiZWVuIHVuZHVseSBuZWdsZWN0ZWQ7IGFub3RoZXIgYmFkZSB0aGVtIGJ5IGFsbCBtZWFucyB0byBrZWVwIHRoZSB3YXRlciBvZiB0aGUgQWxiYW4gbGFrZSBhd2F5IGZyb20gdGhlIHNlYSBhbmQgZm9yY2UgaXQgYmFjayBpbnRvIGl0cyBhbmNpZW50IGJlZCwgb3IsIGlmIHRoZXkgY291bGQgbm90IGVmZmVjdCB0aGlzLCBieSBtZWFucyBvZiBjYW5hbHMgYW5kIHRyZW5jaGVzIHRvIGRpdmVydCBpdCBpbnRvIHRoZSBwbGFpbiBhbmQgZGlzc2lwYXRlIGl0LiBPbiByZWNlaXB0IG9mIHRoZXNlIHJlc3BvbnNlcyB0aGUgcHJpZXN0cyBwZXJmb3JtZWQgdGhlIG5lZ2xlY3RlZCBzYWNyaWZpY2VzLCBhbmQgdGhlIHBlb3BsZSBzYWxsaWVkIG91dCBpbnRvIHRoZSBmaWVsZHMgYW5kIGRpdmVydGVkIHRoZSBjb3Vyc2Ugb2YgdGhlIHdhdGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSB0ZW50aCB5ZWFyIG9mIHRoZSB3YXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Mzk2IEIuQy48L25vdGU+IHRoZSBTZW5hdGUgYWJvbGlzaGVkIHRoZSBvdGhlciBtYWdpc3RyYWNpZXMgYW5kIGFwcG9pbnRlZCBDYW1pbGx1cyBkaWN0YXRvci4gQWZ0ZXIgY2hvb3NpbmcgQ29ybmVsaXVzIFNjaXBpbyBhcyBoaXMgbWFzdGVyIG9mIGhvcnNlLCBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgbWFkZSBzb2xlbW4gdm93cyB0byB0aGUgZ29kcyB0aGF0LCBpbiBjYXNlIHRoZSB3YXIgaGFkIGEgZ2xvcmlvdXMgZW5kaW5nLCBoZSB3b3VsZCBjZWxlYnJhdGUgdGhlIGdyZWF0IGdhbWVzIGluIHRoZWlyIGhvbm91ciwgYW5kIGRlZGljYXRlIGEgdGVtcGxlIHRvIGEgZ29kZGVzcyB3aG9tIHRoZSBSb21hbnMgY2FsbCBNYXRlciBNYXR1dGEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgdGVudGggeWVhciBvZiB0aGUgd2FyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Mzk2IEIuQy48L25vdGU+IHRoZSBTZW5hdGUgYWJvbGlzaGVkIHRoZSBvdGhlciBtYWdpc3RyYWNpZXMgYW5kIGFwcG9pbnRlZCBDYW1pbGx1cyBkaWN0YXRvci4gQWZ0ZXIgY2hvb3NpbmcgQ29ybmVsaXVzIFNjaXBpbyBhcyBoaXMgbWFzdGVyIG9mIGhvcnNlLCBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgbWFkZSBzb2xlbW4gdm93cyB0byB0aGUgZ29kcyB0aGF0LCBpbiBjYXNlIHRoZSB3YXIgaGFkIGEgZ2xvcmlvdXMgZW5kaW5nLCBoZSB3b3VsZCBjZWxlYnJhdGUgdGhlIGdyZWF0IGdhbWVzIGluIHRoZWlyIGhvbm91ciwgYW5kIGRlZGljYXRlIGEgdGVtcGxlIHRvIGEgZ29kZGVzcyB3aG9tIHRoZSBSb21hbnMgY2FsbCBNYXRlciBNYXR1dGEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIHNhY3JlZCByaXRlcyB1c2VkIGluIHRoZSB3b3JzaGlwIG9mIHRoaXMgZ29kZGVzcywgc2hlIG1pZ2h0IGJlIGhlbGQgdG8gYmUgYWxtb3N0IGlkZW50aWNhbCB3aXRoIExldWNvdGhlYS4gVGhlIHdvbWVuIGJyaW5nIGEgc2VydmluZy1tYWlkIGludG8gdGhlIHNhbmN0dWFyeSBhbmQgYmVhdCBoZXIgd2l0aCByb2RzLCB0aGVuIGRyaXZlIGhlciBmb3J0aCBhZ2FpbjsgdGhleSBlbWJyYWNlIHRoZWlyIG5lcGhld3MgYW5kIG5pZWNlcyBpbiBwcmVmZXJlbmNlIHRvIHRoZWlyIG93biBjaGlsZHJlbjsgYW5kIHRoZWlyIGNvbmR1Y3QgYXQgdGhlIHNhY3JpZmljZSByZXNlbWJsZXMgdGhhdCBvZiB0aGUgbnVyc2VzIG9mIERpb255c3VzLCBvciB0aGF0IG9mIElubyB1bmRlciB0aGUgYWZmbGljdGlvbnMgcHV0IHVwb24gaGVyIGJ5IGhlciBodXNiYW5kJ3MgY29uY3ViaW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIHNhY3JlZCByaXRlcyB1c2VkIGluIHRoZSB3b3JzaGlwIG9mIHRoaXMgZ29kZGVzcywgc2hlIG1pZ2h0IGJlIGhlbGQgdG8gYmUgYWxtb3N0IGlkZW50aWNhbCB3aXRoIExldWNvdGhlYS4gVGhlIHdvbWVuIGJyaW5nIGEgc2VydmluZy1tYWlkIGludG8gdGhlIHNhbmN0dWFyeSBhbmQgYmVhdCBoZXIgd2l0aCByb2RzLCB0aGVuIGRyaXZlIGhlciBmb3J0aCBhZ2FpbjsgdGhleSBlbWJyYWNlIHRoZWlyIG5lcGhld3MgYW5kIG5pZWNlcyBpbiBwcmVmZXJlbmNlIHRvIHRoZWlyIG93biBjaGlsZHJlbjsgYW5kIHRoZWlyIGNvbmR1Y3QgYXQgdGhlIHNhY3JpZmljZSByZXNlbWJsZXMgdGhhdCBvZiB0aGUgbnVyc2VzIG9mIERpb255c3VzLCBvciB0aGF0IG9mIElubyB1bmRlciB0aGUgYWZmbGljdGlvbnMgcHV0IHVwb24gaGVyIGJ5IGhlciBodXNiYW5kJ3MgY29uY3ViaW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGhpcyB2b3dzLCBDYW1pbGx1cyBpbnZhZGVkIHRoZSBjb3VudHJ5IG9mIHRoZSBGYWxpc2NhbnMgYW5kIGNvbnF1ZXJlZCB0aGVtIGluIGEgZ3JlYXQgYmF0dGxlLCB0b2dldGhlciB3aXRoIHRoZSBDYXBlbmF0ZXMgd2hvIGNhbWUgdXAgdG8gdGhlaXIgYWlkLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgdHVybmVkIHRvIHRoZSBzaWVnZSBvZiBWZWlpLCBhbmQgc2VlaW5nIHRoYXQgZGlyZWN0IGFzc2F1bHQgdXBvbiB0aGUgY2l0eSB3YXMgYSBncmlldm91cyBhbmQgZGlmZmljdWx0IG1hdHRlciwgaGUgd2VudCB0byBkaWdnaW5nIG1pbmVzLCBzaW5jZSB0aGUgcmVnaW9uIHJvdW5kIHRoZSBjaXR5IGZhdm91cmVkIHN1Y2ggd29ya3MsIGFuZCBhbGxvd2VkIHRoZWlyIGJlaW5nIGNhcnJpZWQgdG8gYSBncmVhdCBkZXB0aCB3aXRob3V0IHRoZSBlbmVteSdzIGtub3dpbmcgYWJvdXQgaXQuIFNvIHRoZW4sIHdoZW4gaGlzIGhvcGVzIHdlcmUgd2VsbCBvbiB0aGVpciB3YXkgdG8gZnVsZmlsbWVudCwgaGUgaGltc2VsZiBhc3NhdWx0ZWQgdGhlIGNpdHkgZnJvbSB0aGUgb3V0c2lkZSwgYW5kIHRodXMgY2FsbGVkIHRoZSBlbmVteSBhd2F5IHRvIG1hbiB0aGVpciB3YWxsczsgd2hpbGUgb3RoZXJzIHNlY3JldGx5IG1hZGUgdGhlaXIgd2F5IGFsb25nIHRoZSBtaW5lcyBhbmQgcmVhY2hlZCB1bm5vdGljZWQgdGhlIGludGVyaW9yIG9mIHRoZSBjaXRhZGVsLCB3aGVyZSB0aGUgdGVtcGxlIG9mIEp1bm8gc3Rvb2QsIHRoZSBsYXJnZXN0IHRlbXBsZSBpbiB0aGUgY2l0eSwgYW5kIHRoZSBvbmUgbW9zdCBoZWxkIGluIGhvbm91ci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgdHVybmVkIHRvIHRoZSBzaWVnZSBvZiBWZWlpLCBhbmQgc2VlaW5nIHRoYXQgZGlyZWN0IGFzc2F1bHQgdXBvbiB0aGUgY2l0eSB3YXMgYSBncmlldm91cyBhbmQgZGlmZmljdWx0IG1hdHRlciwgaGUgd2VudCB0byBkaWdnaW5nIG1pbmVzLCBzaW5jZSB0aGUgcmVnaW9uIHJvdW5kIHRoZSBjaXR5IGZhdm91cmVkIHN1Y2ggd29ya3MsIGFuZCBhbGxvd2VkIHRoZWlyIGJlaW5nIGNhcnJpZWQgdG8gYSBncmVhdCBkZXB0aCB3aXRob3V0IHRoZSBlbmVteSdzIGtub3dpbmcgYWJvdXQgaXQuIFNvIHRoZW4sIHdoZW4gaGlzIGhvcGVzIHdlcmUgd2VsbCBvbiB0aGVpciB3YXkgdG8gZnVsZmlsbWVudCwgaGUgaGltc2VsZiBhc3NhdWx0ZWQgdGhlIGNpdHkgZnJvbSB0aGUgb3V0c2lkZSwgYW5kIHRodXMgY2FsbGVkIHRoZSBlbmVteSBhd2F5IHRvIG1hbiB0aGVpciB3YWxsczsgd2hpbGUgb3RoZXJzIHNlY3JldGx5IG1hZGUgdGhlaXIgd2F5IGFsb25nIHRoZSBtaW5lcyBhbmQgcmVhY2hlZCB1bm5vdGljZWQgdGhlIGludGVyaW9yIG9mIHRoZSBjaXRhZGVsLCB3aGVyZSB0aGUgdGVtcGxlIG9mIEp1bm8gc3Rvb2QsIHRoZSBsYXJnZXN0IHRlbXBsZSBpbiB0aGUgY2l0eSwgYW5kIHRoZSBvbmUgbW9zdCBoZWxkIGluIGhvbm91ci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUsIGl0IGlzIHNhaWQsIGF0IHRoaXMgdmVyeSBqdW5jdHVyZSwgdGhlIGNvbW1hbmRlciBvZiB0aGUgVHVzY2FucyBjaGFuY2VkIHRvIGJlIHNhY3JpZmljaW5nLCBhbmQgaGlzIHNlZXIsIHdoZW4gaGUgYmVoZWxkIHRoZSBlbnRyYWlscyBvZiB0aGUgdmljdGltLCBjcmllZCBvdXQgd2l0aCBhIGxvdWQgdm9pY2UgYW5kIHNhaWQgdGhhdCB0aGUgZ29kIGF3YXJkZWQgdmljdG9yeSB0byBoaW0gd2hvIHNob3VsZCBmdWxmaWxsIHRoYXQgc2FjcmlmaWNlLiBUaGUgUm9tYW5zIGluIHRoZSBtaW5lcyBiZWxvdywgaGVhcmluZyB0aGlzIHV0dGVyYW5jZSwgcXVpY2tseSB0b3JlIGF3YXkgdGhlIHBhdmVtZW50IG9mIHRoZSB0ZW1wbGUgYW5kIGlzc3VlZCBmb3J0aCB3aXRoIGJhdHRsZSBjcmllcyBhbmQgY2xhc2ggb2YgYXJtcywgd2hlcmVhdCB0aGUgZW5lbXkgd2VyZSB0ZXJyaWZpZWQgYW5kIGZsZWQgYXdheS4gVGhlIHNhY3JpZmljaWFsIGVudHJhaWxzIHdlcmUgdGhlbiBzZWl6ZWQgYW5kIGNhcnJpZWQgdG8gQ2FtaWxsdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwb3NzaWJseSB0aGlzIHdpbGwgc2VlbSBsaWtlIGZhYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlLCBpdCBpcyBzYWlkLCBhdCB0aGlzIHZlcnkganVuY3R1cmUsIHRoZSBjb21tYW5kZXIgb2YgdGhlIFR1c2NhbnMgY2hhbmNlZCB0byBiZSBzYWNyaWZpY2luZywgYW5kIGhpcyBzZWVyLCB3aGVuIGhlIGJlaGVsZCB0aGUgZW50cmFpbHMgb2YgdGhlIHZpY3RpbSwgY3JpZWQgb3V0IHdpdGggYSBsb3VkIHZvaWNlIGFuZCBzYWlkIHRoYXQgdGhlIGdvZCBhd2FyZGVkIHZpY3RvcnkgdG8gaGltIHdobyBzaG91bGQgZnVsZmlsbCB0aGF0IHNhY3JpZmljZS4gVGhlIFJvbWFucyBpbiB0aGUgbWluZXMgYmVsb3csIGhlYXJpbmcgdGhpcyB1dHRlcmFuY2UsIHF1aWNrbHkgdG9yZSBhd2F5IHRoZSBwYXZlbWVudCBvZiB0aGUgdGVtcGxlIGFuZCBpc3N1ZWQgZm9ydGggd2l0aCBiYXR0bGUgY3JpZXMgYW5kIGNsYXNoIG9mIGFybXMsIHdoZXJlYXQgdGhlIGVuZW15IHdlcmUgdGVycmlmaWVkIGFuZCBmbGVkIGF3YXkuIFRoZSBzYWNyaWZpY2lhbCBlbnRyYWlscyB3ZXJlIHRoZW4gc2VpemVkIGFuZCBjYXJyaWVkIHRvIENhbWlsbHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwb3NzaWJseSB0aGlzIHdpbGwgc2VlbSBsaWtlIGZhYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IGFueSByYXRlIHRoZSBjaXR5IHdhcyB0YWtlbiBieSBzdG9ybSwgYW5kIHRoZSBSb21hbnMgd2VyZSBwaWxsYWdpbmcgYW5kIHBsdW5kZXJpbmcgaXRzIGJvdW5kbGVzcyB3ZWFsdGgsIHdoZW4gQ2FtaWxsdXMsIHNlZWluZyBmcm9tIHRoZSBjaXRhZGVsIHdoYXQgd2FzIGdvaW5nIG9uLCBhdCBmaXJzdCBidXJzdCBpbnRvIHRlYXJzIGFzIGhlIHN0b29kLCBhbmQgdGhlbiwgb24gYmVpbmcgY29uZ3JhdHVsYXRlZCBieSB0aGUgYnlzdGFuZGVycywgbGlmdGVkIHVwIGhpcyBoYW5kcyB0byB0aGUgZ29kcyBhbmQgcHJheWVkLCBzYXlpbmc6IAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gZ3JlYXRlc3QgSnVwaXRlciwgYW5kIHllIGdvZHMgd2hvIHNlZSBhbmQganVkZ2UgbWVuJ3MgZ29vZCBhbmQgZXZpbCBkZWVkcywgeWUgc3VyZWx5IGtub3cgdGhhdCBpdCBpcyBub3QgdW5qdXN0bHksIGJ1dCBvZiBuZWNlc3NpdHkgYW5kIGluIHNlbGYtZGVmZW5jZSB0aGF0IHdlIFJvbWFucyBoYXZlIHZpc2l0ZWQgaXRzIGluaXF1aXR5IHVwb24gdGhpcyBjaXR5IG9mIGhvc3RpbGUgYW5kIGxhd2xlc3MgbWVuLiBCdXQgaWYsIGFzIGNvdW50ZXJwb2lzZSB0byB0aGlzIG91ciBwcmVzZW50IHN1Y2Nlc3MsIHNvbWUgcmV0cmlidXRpb24gaXMgZHVlIHRvIGNvbWUgdXBvbiB1cywgc3BhcmUsIEkgYmVzZWVjaCB5b3UsIHRoZSBjaXR5IGFuZCB0aGUgYXJteSBvZiB0aGUgUm9tYW5zLCBhbmQgbGV0IGl0IGZhbGwgdXBvbiBteSBvd24gaGVhZCwgdGhvdWdoIHdpdGggYXMgbGl0dGxlIGhhcm0gYXMgbWF5IGJlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoZXNlIHdvcmRzLCBhcyB0aGUgUm9tYW5zJyBjdXN0b20gaXMgYWZ0ZXIgcHJheWVyIGFuZCBhZG9yYXRpb24sIGhlIHdoZWVsZWQgaGltc2VsZiBhYm91dCB0byB0aGUgcmlnaHQsIGJ1dCBzdHVtYmxlZCBhbmQgZmVsbCBhcyBoZSB0dXJuZWQuIFRoZSBieXN0YW5kZXJzIHdlcmUgY29uZm91bmRlZCwgYnV0IGhlIHBpY2tlZCBoaW1zZWxmIHVwIGFnYWluIGZyb20gaGlzIGZhbGwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgcHJheWVyIGlzIGdyYW50ZWQhIGEgc2xpZ2h0IGZhbGwgaXMgbXkgYXRvbmVtZW50IGZvciB0aGUgZ3JlYXRlc3QgZ29vZCBmb3J0dW5lLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gZ3JlYXRlc3QgSnVwaXRlciwgYW5kIHllIGdvZHMgd2hvIHNlZSBhbmQganVkZ2UgbWVuJ3MgZ29vZCBhbmQgZXZpbCBkZWVkcywgeWUgc3VyZWx5IGtub3cgdGhhdCBpdCBpcyBub3QgdW5qdXN0bHksIGJ1dCBvZiBuZWNlc3NpdHkgYW5kIGluIHNlbGYtZGVmZW5jZSB0aGF0IHdlIFJvbWFucyBoYXZlIHZpc2l0ZWQgaXRzIGluaXF1aXR5IHVwb24gdGhpcyBjaXR5IG9mIGhvc3RpbGUgYW5kIGxhd2xlc3MgbWVuLiBCdXQgaWYsIGFzIGNvdW50ZXJwb2lzZSB0byB0aGlzIG91ciBwcmVzZW50IHN1Y2Nlc3MsIHNvbWUgcmV0cmlidXRpb24gaXMgZHVlIHRvIGNvbWUgdXBvbiB1cywgc3BhcmUsIEkgYmVzZWVjaCB5b3UsIHRoZSBjaXR5IGFuZCB0aGUgYXJteSBvZiB0aGUgUm9tYW5zLCBhbmQgbGV0IGl0IGZhbGwgdXBvbiBteSBvd24gaGVhZCwgdGhvdWdoIHdpdGggYXMgbGl0dGxlIGhhcm0gYXMgbWF5IGJlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlc2Ugd29yZHMsIGFzIHRoZSBSb21hbnMnIGN1c3RvbSBpcyBhZnRlciBwcmF5ZXIgYW5kIGFkb3JhdGlvbiwgaGUgd2hlZWxlZCBoaW1zZWxmIGFib3V0IHRvIHRoZSByaWdodCwgYnV0IHN0dW1ibGVkIGFuZCBmZWxsIGFzIGhlIHR1cm5lZC4gVGhlIGJ5c3RhbmRlcnMgd2VyZSBjb25mb3VuZGVkLCBidXQgaGUgcGlja2VkIGhpbXNlbGYgdXAgYWdhaW4gZnJvbSBoaXMgZmFsbCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IHByYXllciBpcyBncmFudGVkISBhIHNsaWdodCBmYWxsIGlzIG15IGF0b25lbWVudCBmb3IgdGhlIGdyZWF0ZXN0IGdvb2QgZm9ydHVuZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGUgaGFkIHV0dGVybHkgc2Fja2VkIHRoZSBjaXR5LCBoZSBkZXRlcm1pbmVkIHRvIHRyYW5zZmVyIHRoZSBpbWFnZSBvZiBKdW5vIHRvIFJvbWUsIGluIGFjY29yZGFuY2Ugd2l0aCBoaXMgdm93cy4gVGhlIHdvcmttZW4gd2VyZSBhc3NlbWJsZWQgZm9yIHRoZSBwdXJwb3NlLCBhbmQgQ2FtaWxsdXMgd2FzIHNhY3JpZmljaW5nIGFuZCBwcmF5aW5nIHRoZSBnb2RkZXNzIHRvIGFjY2VwdCBvZiB0aGVpciB6ZWFsIGFuZCB0byBiZSBhIGtpbmRseSBjby1kd2VsbGVyIHdpdGggdGhlIGdvZHMgb2YgUm9tZSwgd2hlbiB0aGUgaW1hZ2UsIHRoZXkgc2F5LCBzcG9rZSBpbiBsb3cgdG9uZXMgYW5kIHNhaWQgc2hlIHdhcyByZWFkeSBhbmQgd2lsbGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IExpdnkgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDUuMjIiIHZhbGlkPSJ5ZXMiPnYuIDIyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzYXlzIHRoYXQgQ2FtaWxsdXMgZGlkIGluZGVlZCBsYXkgaGlzIGhhbmQgdXBvbiB0aGUgZ29kZGVzcyBhbmQgcHJheSBhbmQgYmVzZWVjaCBoZXIsIGJ1dCB0aGF0IGl0IHdhcyBjZXJ0YWluIG9mIHRoZSBieXN0YW5kZXJzIHdobyBnYXZlIGFuc3dlciB0aGF0IHNoZSB3YXMgcmVhZHkgYW5kIHdpbGxpbmcgYW5kIGVhZ2VyIHRvIGdvIGFsb25nIHdpdGggaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgdXR0ZXJseSBzYWNrZWQgdGhlIGNpdHksIGhlIGRldGVybWluZWQgdG8gdHJhbnNmZXIgdGhlIGltYWdlIG9mIEp1bm8gdG8gUm9tZSwgaW4gYWNjb3JkYW5jZSB3aXRoIGhpcyB2b3dzLiBUaGUgd29ya21lbiB3ZXJlIGFzc2VtYmxlZCBmb3IgdGhlIHB1cnBvc2UsIGFuZCBDYW1pbGx1cyB3YXMgc2FjcmlmaWNpbmcgYW5kIHByYXlpbmcgdGhlIGdvZGRlc3MgdG8gYWNjZXB0IG9mIHRoZWlyIHplYWwgYW5kIHRvIGJlIGEga2luZGx5IGNvLWR3ZWxsZXIgd2l0aCB0aGUgZ29kcyBvZiBSb21lLCB3aGVuIHRoZSBpbWFnZSwgdGhleSBzYXksIHNwb2tlIGluIGxvdyB0b25lcyBhbmQgc2FpZCBzaGUgd2FzIHJlYWR5IGFuZCB3aWxsaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMaXZ5IDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gNS4yMiIgdmFsaWQ9InllcyI+di4gMjIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNheXMgdGhhdCBDYW1pbGx1cyBkaWQgaW5kZWVkIGxheSBoaXMgaGFuZCB1cG9uIHRoZSBnb2RkZXNzIGFuZCBwcmF5IGFuZCBiZXNlZWNoIGhlciwgYnV0IHRoYXQgaXQgd2FzIGNlcnRhaW4gb2YgdGhlIGJ5c3RhbmRlcnMgd2hvIGdhdmUgYW5zd2VyIHRoYXQgc2hlIHdhcyByZWFkeSBhbmQgd2lsbGluZyBhbmQgZWFnZXIgdG8gZ28gYWxvbmcgd2l0aCBoaW0uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gNS4yMiIgdmFsaWQ9InllcyI+di4gMjIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRob3NlIHdobyBpbnNpc3QgdXBvbiBhbmQgZGVmZW5kIHRoZSBtYXJ2ZWwgaGF2ZSBhIG1vc3QgcG93ZXJmdWwgYWR2b2NhdGUgZm9yIHRoZWlyIGNvbnRlbnRpb24gaW4gdGhlIGZvcnR1bmUgb2YgdGhlIGNpdHksIHdoaWNoLCBmcm9tIGl0cyBzbWFsbCBhbmQgZGVzcGlzZWQgYmVnaW5uaW5nLCBjb3VsZCBuZXZlciBoYXZlIGNvbWUgdG8gc3VjaCBhIHBpbm5hY2xlIG9mIGdsb3J5IGFuZCBwb3dlciBoYWQgR29kIG5vdCBkd2VsdCB3aXRoIGhlciBhbmQgbWFkZSBtYW55IGdyZWF0IG1hbmlmZXN0YXRpb25zIG9mIGhpbXNlbGYgZnJvbSB0aW1lIHRvIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZXkgYWRkdWNlIG90aGVyIG9jY3VycmVuY2VzIG9mIGEga2luZHJlZCBzb3J0LCBzdWNoIGFzIHN0YXR1ZXMgb2Z0ZW4gZHJpcHBpbmcgd2l0aCBzd2VhdCwgaW1hZ2VzIHV0dGVyaW5nIGF1ZGlibGUgZ3JvYW5zLCB0dXJuaW5nIGF3YXkgdGhlaXIgZmFjZXMsIGFuZCBjbG9zaW5nIHRoZWlyIGV5ZXMsIGFzIG5vdCBhIGZldyBoaXN0b3JpYW5zIGluIHRoZSBwYXN0IGhhdmUgd3JpdHRlbi4gQW5kIHdlIG91cnNlbHZlcyBtaWdodCBtYWtlIG1lbnRpb24gb2YgbWFueSBhc3RvbmlzaGluZyB0aGluZ3Mgd2hpY2ggd2UgaGF2ZSBoZWFyZCBmcm9tIG1lbiBvZiBvdXIgb3duIHRpbWUs4oCUdGhpbmdzIG5vdCBsaWdodGx5IHRvIGJlIGRlc3Bpc2VkLiBCdXQgaW4gc3VjaCBtYXR0ZXJzIGVhZ2VyIGNyZWR1bGl0eSBhbmQgZXhjZXNzaXZlIGluY3JlZHVsaXR5IGFyZSBhbGlrZSBkYW5nZXJvdXMsIGJlY2F1c2Ugb2YgdGhlIHdlYWtuZXNzIG9mIG91ciBodW1hbiBuYXR1cmUsIHdoaWNoIHNldHMgbm8gbGltaXRzIGFuZCBoYXMgbm8gbWFzdGVyeSBvdmVyIGl0c2VsZiwgYnV0IGlzIGNhcnJpZWQgYXdheSBub3cgaW50byB2YWluIHN1cGVyc3RpdGlvbiwgYW5kIG5vdyBpbnRvIGNvbnRlbXB0dW91cyBuZWdsZWN0IG9mIHRoZSBnb2RzLiBDYXV0aW9uIGlzIGJlc3QsIGFuZCB0byBnbyB0byBubyBleHRyZW1lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGV5IGFkZHVjZSBvdGhlciBvY2N1cnJlbmNlcyBvZiBhIGtpbmRyZWQgc29ydCwgc3VjaCBhcyBzdGF0dWVzIG9mdGVuIGRyaXBwaW5nIHdpdGggc3dlYXQsIGltYWdlcyB1dHRlcmluZyBhdWRpYmxlIGdyb2FucywgdHVybmluZyBhd2F5IHRoZWlyIGZhY2VzLCBhbmQgY2xvc2luZyB0aGVpciBleWVzLCBhcyBub3QgYSBmZXcgaGlzdG9yaWFucyBpbiB0aGUgcGFzdCBoYXZlIHdyaXR0ZW4uIEFuZCB3ZSBvdXJzZWx2ZXMgbWlnaHQgbWFrZSBtZW50aW9uIG9mIG1hbnkgYXN0b25pc2hpbmcgdGhpbmdzIHdoaWNoIHdlIGhhdmUgaGVhcmQgZnJvbSBtZW4gb2Ygb3VyIG93biB0aW1lLOKAlHRoaW5ncyBub3QgbGlnaHRseSB0byBiZSBkZXNwaXNlZC4gQnV0IGluIHN1Y2ggbWF0dGVycyBlYWdlciBjcmVkdWxpdHkgYW5kIGV4Y2Vzc2l2ZSBpbmNyZWR1bGl0eSBhcmUgYWxpa2UgZGFuZ2Vyb3VzLCBiZWNhdXNlIG9mIHRoZSB3ZWFrbmVzcyBvZiBvdXIgaHVtYW4gbmF0dXJlLCB3aGljaCBzZXRzIG5vIGxpbWl0cyBhbmQgaGFzIG5vIG1hc3Rlcnkgb3ZlciBpdHNlbGYsIGJ1dCBpcyBjYXJyaWVkIGF3YXkgbm93IGludG8gdmFpbiBzdXBlcnN0aXRpb24sIGFuZCBub3cgaW50byBjb250ZW1wdHVvdXMgbmVnbGVjdCBvZiB0aGUgZ29kcy4gQ2F1dGlvbiBpcyBiZXN0LCBhbmQgdG8gZ28gdG8gbm8gZXh0cmVtZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hldGhlciBpdCB3YXMgZHVlIHRvIHRoZSBtYWduaXR1ZGUgb2YgaGlzIGV4cGxvaXQgaW4gdGFraW5nIGEgY2l0eSB3aGljaCBjb3VsZCB2aWUgd2l0aCBSb21lIGFuZCBlbmR1cmUgYSBzaWVnZSBvZiB0ZW4geWVhcnMsIG9yIHRvIHRoZSBjb25ncmF0dWxhdGlvbnMgc2hvd2VyZWQgdXBvbiBoaW0sIENhbWlsbHVzIHdhcyBsaWZ0ZWQgdXAgdG8gdmFuaXR5LCBjaGVyaXNoZWQgdGhvdWdodHMgZmFyIGZyb20gYmVjb21pbmcgdG8gYSBjaXZpbCBtYWdpc3RyYXRlIHN1YmplY3QgdG8gdGhlIGxhdywgYW5kIGNlbGVicmF0ZWQgYSB0cml1bXBoIHdpdGggZ3JlYXQgcG9tcDogaGUgYWN0dWFsbHkgaGFkIGZvdXIgd2hpdGUgaG9yc2VzIGhhcm5lc3NlZCB0byBhIGNoYXJpb3Qgb24gd2hpY2ggaGUgbW91bnRlZCBhbmQgZHJvdmUgdGhyb3VnaCBSb21lLCBhIHRoaW5nIHdoaWNoIG5vIGNvbW1hbmRlciBoYWQgZXZlciBkb25lIGJlZm9yZSBvciBhZnRlcndhcmRzIGRpZC4gRm9yIHRoZXkgdGhvdWdodCBzdWNoIGEgY2FyIHNhY3JlZCBhbmQgZGV2b3RlZCB0byB0aGUga2luZyBhbmQgZmF0aGVyIG9mIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSBoZSBpbmN1cnJlZCB0aGUgZW5taXR5IG9mIHRoZSBjaXRpemVucywgd2hvIHdlcmUgbm90IGFjY3VzdG9tZWQgdG8gd2FudG9uIGV4dHJhdmFnYW5jZS4gVGhleSBoYWQgYWxzbyBhIHNlY29uZCBncmlldmFuY2UgYWdhaW5zdCBoaW0gaW4gdGhhdCBoZSBvcHBvc2VkIGhpbXNlbGYgdG8gYSBsYXcgZGl2aWRpbmcgdGhlIGNpdHkuIFRoZSB0cmlidW5lcyBpbnRyb2R1Y2VkIGEgbWVhc3VyZSBkaXZpZGluZyB0aGUgcGVvcGxlIGFuZCB0aGUgU2VuYXRlIGludG8gdHdvIHBhcnRzLCBvbmUgdG8gcmVtYWluIGFuZCBkd2VsbCB0aGVyZSwgYW5kIHRoZSBvbmUgb24gd2hpY2ggdGhlIGxvdCBmZWxsIHRvIHJlbW92ZSBpbnRvIHRoZSBjaXR5IHRoZXkgaGFkIGNhcHR1cmVkLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSB3b3VsZCB0aHVzIGJlIG1vcmUgY29tbW9kaW91c2x5IGJlc3Rvd2VkLCBhbmQgd2l0aCB0d28gbGFyZ2UgYW5kIGZhaXIgY2l0aWVzIGNvdWxkIGJldHRlciBwcm90ZWN0IHRoZWlyIHRlcnJpdG9yeSBhcyB3ZWxsIGFzIHRoZWlyIHByb3NwZXJpdHkgaW4gZ2VuZXJhbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHkgdGhlIHBlb3BsZSwgd2hpY2ggd2FzIG5vdyBiZWNvbWUgbnVtZXJvdXMgYW5kIHBvb3IsIHdlbGNvbWVkIHRoZSBtZWFzdXJlIHdpdGggZGVsaWdodCwgYW5kIHdhcyBmb3IgZXZlciB0aHJvbmdpbmcgdHVtdWx0dW91c2x5IGFib3V0IHRoZSByb3N0cmEgd2l0aCBkZW1hbmRzIHRoYXQgaXQgYmUgcHV0IHRvIHZvdGUuIEJ1dCB0aGUgU2VuYXRlIGFuZCB0aGUgbW9zdCBpbmZsdWVudGlhbCBvZiB0aGUgb3RoZXIgY2l0aXplbnMgY29uc2lkZXJlZCB0aGF0IHRoZSBtZWFzdXJlIHByb3Bvc2VkIGJ5IHRoZSB0cmlidW5lcyBtZWFudCBub3QgZGl2aXNpb24gYnV0IGRlc3RydWN0aW9uIGZvciBSb21lLCBhbmQgaW4gdGhlaXIgYXZlcnNpb24gdG8gaXQgd2VudCB0byBDYW1pbGx1cyBmb3IgYWlkIGFuZCBzdWNjb3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSwgZHJlYWRpbmcgdGhlIHN0cnVnZ2xlLCBhbHdheXMgY29udHJpdmVkIHRvIGtlZXAgdGhlIHBlb3BsZSBidXN5IHdpdGggb3RoZXIgbWF0dGVycywgYW5kIHNvIHN0YXZlZCBvZmYgdGhlIHBhc3NhZ2Ugb2YgdGhlIGJpbGwuIEZvciB0aGlzIHJlYXNvbiwgdGhlbiwgdGhleSB3ZXJlIHZleGVkIHdpdGggaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGV0aGVyIGl0IHdhcyBkdWUgdG8gdGhlIG1hZ25pdHVkZSBvZiBoaXMgZXhwbG9pdCBpbiB0YWtpbmcgYSBjaXR5IHdoaWNoIGNvdWxkIHZpZSB3aXRoIFJvbWUgYW5kIGVuZHVyZSBhIHNpZWdlIG9mIHRlbiB5ZWFycywgb3IgdG8gdGhlIGNvbmdyYXR1bGF0aW9ucyBzaG93ZXJlZCB1cG9uIGhpbSwgQ2FtaWxsdXMgd2FzIGxpZnRlZCB1cCB0byB2YW5pdHksIGNoZXJpc2hlZCB0aG91Z2h0cyBmYXIgZnJvbSBiZWNvbWluZyB0byBhIGNpdmlsIG1hZ2lzdHJhdGUgc3ViamVjdCB0byB0aGUgbGF3LCBhbmQgY2VsZWJyYXRlZCBhIHRyaXVtcGggd2l0aCBncmVhdCBwb21wOiBoZSBhY3R1YWxseSBoYWQgZm91ciB3aGl0ZSBob3JzZXMgaGFybmVzc2VkIHRvIGEgY2hhcmlvdCBvbiB3aGljaCBoZSBtb3VudGVkIGFuZCBkcm92ZSB0aHJvdWdoIFJvbWUsIGEgdGhpbmcgd2hpY2ggbm8gY29tbWFuZGVyIGhhZCBldmVyIGRvbmUgYmVmb3JlIG9yIGFmdGVyd2FyZHMgZGlkLiBGb3IgdGhleSB0aG91Z2h0IHN1Y2ggYSBjYXIgc2FjcmVkIGFuZCBkZXZvdGVkIHRvIHRoZSBraW5nIGFuZCBmYXRoZXIgb2YgdGhlIGdvZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IGhlIGluY3VycmVkIHRoZSBlbm1pdHkgb2YgdGhlIGNpdGl6ZW5zLCB3aG8gd2VyZSBub3QgYWNjdXN0b21lZCB0byB3YW50b24gZXh0cmF2YWdhbmNlLiBUaGV5IGhhZCBhbHNvIGEgc2Vjb25kIGdyaWV2YW5jZSBhZ2FpbnN0IGhpbSBpbiB0aGF0IGhlIG9wcG9zZWQgaGltc2VsZiB0byBhIGxhdyBkaXZpZGluZyB0aGUgY2l0eS4gVGhlIHRyaWJ1bmVzIGludHJvZHVjZWQgYSBtZWFzdXJlIGRpdmlkaW5nIHRoZSBwZW9wbGUgYW5kIHRoZSBTZW5hdGUgaW50byB0d28gcGFydHMsIG9uZSB0byByZW1haW4gYW5kIGR3ZWxsIHRoZXJlLCBhbmQgdGhlIG9uZSBvbiB3aGljaCB0aGUgbG90IGZlbGwgdG8gcmVtb3ZlIGludG8gdGhlIGNpdHkgdGhleSBoYWQgY2FwdHVyZWQsIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IHdvdWxkIHRodXMgYmUgbW9yZSBjb21tb2Rpb3VzbHkgYmVzdG93ZWQsIGFuZCB3aXRoIHR3byBsYXJnZSBhbmQgZmFpciBjaXRpZXMgY291bGQgYmV0dGVyIHByb3RlY3QgdGhlaXIgdGVycml0b3J5IGFzIHdlbGwgYXMgdGhlaXIgcHJvc3Blcml0eSBpbiBnZW5lcmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5IHRoZSBwZW9wbGUsIHdoaWNoIHdhcyBub3cgYmVjb21lIG51bWVyb3VzIGFuZCBwb29yLCB3ZWxjb21lZCB0aGUgbWVhc3VyZSB3aXRoIGRlbGlnaHQsIGFuZCB3YXMgZm9yIGV2ZXIgdGhyb25naW5nIHR1bXVsdHVvdXNseSBhYm91dCB0aGUgcm9zdHJhIHdpdGggZGVtYW5kcyB0aGF0IGl0IGJlIHB1dCB0byB2b3RlLiBCdXQgdGhlIFNlbmF0ZSBhbmQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgb2YgdGhlIG90aGVyIGNpdGl6ZW5zIGNvbnNpZGVyZWQgdGhhdCB0aGUgbWVhc3VyZSBwcm9wb3NlZCBieSB0aGUgdHJpYnVuZXMgbWVhbnQgbm90IGRpdmlzaW9uIGJ1dCBkZXN0cnVjdGlvbiBmb3IgUm9tZSwgYW5kIGluIHRoZWlyIGF2ZXJzaW9uIHRvIGl0IHdlbnQgdG8gQ2FtaWxsdXMgZm9yIGFpZCBhbmQgc3VjY291ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlLCBkcmVhZGluZyB0aGUgc3RydWdnbGUsIGFsd2F5cyBjb250cml2ZWQgdG8ga2VlcCB0aGUgcGVvcGxlIGJ1c3kgd2l0aCBvdGhlciBtYXR0ZXJzLCBhbmQgc28gc3RhdmVkIG9mZiB0aGUgcGFzc2FnZSBvZiB0aGUgYmlsbC4gRm9yIHRoaXMgcmVhc29uLCB0aGVuLCB0aGV5IHdlcmUgdmV4ZWQgd2l0aCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZSBzdHJvbmdlc3QgYW5kIG1vc3QgYXBwYXJlbnQgcmVhc29uIHdoeSB0aGUgbXVsdGl0dWRlIGhhdGVkIGhpbSB3YXMgYmFzZWQgb24gdGhlIG1hdHRlciBvZiB0aGUgdGVudGggb2YgdGhlIHNwb2lsIG9mIFZlaWksIGFuZCBoZXJlaW4gdGhleSBoYWQgYSBwbGF1c2libGUsIHRob3VnaCBub3QgYSB2ZXJ5IGp1c3QgZ3JvdW5kIG9mIGNvbXBsYWludC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoYWQgdm93ZWQsIGFzIGl0IHNlZW1zLCBvbiBzZXR0aW5nIG91dCBhZ2FpbnN0IFZlaWksIHRoYXQgaWYgaGUgc2hvdWxkIHRha2UgdGhlIGNpdHksIGhlIHdvdWxkIGNvbnNlY3JhdGUgdGhlIHRlbnRoIG9mIGl0cyBib290eSB0byB0aGUgRGVscGhpYW4gZ29kLiBCdXQgYWZ0ZXIgdGhlIGNpdHkgaGFkIGJlZW4gdGFrZW4gYW5kIHNhY2tlZCwgaGUgYWxsb3dlZCBoaXMgc29sZGllcnMgZnVsbCBlbmpveW1lbnQgb2YgdGhlaXIgcGx1bmRlciwgZWl0aGVyIGJlY2F1c2UgaGUgc2hyYW5rIGZyb20gYW5ub3lpbmcgdGhlbSwgb3IgYmVjYXVzZSwgaW4gdGhlIG11bHRpdHVkZSBvZiBoaXMgYWN0aXZpdGllcywgaGUgYXMgZ29vZCBhcyBmb3Jnb3QgaGlzIHZvdy4gQXQgYSBsYXRlciB0aW1lLCB3aGVuIGhlIGhhZCBsYWlkIGRvd24gaGlzIGNvbW1hbmQsIGhlIHJlZmVycmVkIHRoZSBtYXR0ZXIgdG8gdGhlIFNlbmF0ZSwgYW5kIHRoZSBzZWVycyBhbm5vdW5jZWQgdG9rZW5zIGluIHRoZWlyIHNhY3JpZmljZXMgdGhhdCB0aGUgZ29kcyB3ZXJlIGFuZ3J5LCBhbmQgbXVzdCBiZSBwcm9waXRpYXRlZCB3aXRoIGR1ZSBvZmZlcmluZ3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCB2b3dlZCwgYXMgaXQgc2VlbXMsIG9uIHNldHRpbmcgb3V0IGFnYWluc3QgVmVpaSwgdGhhdCBpZiBoZSBzaG91bGQgdGFrZSB0aGUgY2l0eSwgaGUgd291bGQgY29uc2VjcmF0ZSB0aGUgdGVudGggb2YgaXRzIGJvb3R5IHRvIHRoZSBEZWxwaGlhbiBnb2QuIEJ1dCBhZnRlciB0aGUgY2l0eSBoYWQgYmVlbiB0YWtlbiBhbmQgc2Fja2VkLCBoZSBhbGxvd2VkIGhpcyBzb2xkaWVycyBmdWxsIGVuam95bWVudCBvZiB0aGVpciBwbHVuZGVyLCBlaXRoZXIgYmVjYXVzZSBoZSBzaHJhbmsgZnJvbSBhbm5veWluZyB0aGVtLCBvciBiZWNhdXNlLCBpbiB0aGUgbXVsdGl0dWRlIG9mIGhpcyBhY3Rpdml0aWVzLCBoZSBhcyBnb29kIGFzIGZvcmdvdCBoaXMgdm93LiBBdCBhIGxhdGVyIHRpbWUsIHdoZW4gaGUgaGFkIGxhaWQgZG93biBoaXMgY29tbWFuZCwgaGUgcmVmZXJyZWQgdGhlIG1hdHRlciB0byB0aGUgU2VuYXRlLCBhbmQgdGhlIHNlZXJzIGFubm91bmNlZCB0b2tlbnMgaW4gdGhlaXIgc2FjcmlmaWNlcyB0aGF0IHRoZSBnb2RzIHdlcmUgYW5ncnksIGFuZCBtdXN0IGJlIHByb3BpdGlhdGVkIHdpdGggZHVlIG9mZmVyaW5ncy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgU2VuYXRlIHZvdGVkLCBub3QgdGhhdCB0aGUgYm9vdHkgc2hvdWxkIGJlIHJlZGlzdHJpYnV0ZWQsIGZvciB0aGF0IHdvdWxkIGhhdmUgYmVlbiBhIGRpZmZpY3VsdCBtYXR0ZXIsIGJ1dCB0aGF0IHRob3NlIHdobyBoYWQgZ290IGl0IHNob3VsZCwgaW4gcGVyc29uIGFuZCB1bmRlciBvYXRoLCBicmluZyB0aGUgdGVudGggdGhlcmVvZiB0byB0aGUgcHVibGljIHRyZWFzdXJ5LiBUaGlzIHN1YmplY3RlZCB0aGUgc29sZGllcnMgdG8gbWFueSB2ZXhhdGlvbnMgYW5kIGNvbnN0cmFpbnRzLiBUaGV5IHdlcmUgcG9vciBtZW4sIHdobyBoYWQgdG9pbGVkIGhhcmQsIGFuZCB5ZXQgd2VyZSBub3cgZm9yY2VkIHRvIGNvbnRyaWJ1dGUgYSBsYXJnZSBzaGFyZSBvZiB3aGF0IHRoZXkgaGFkIGdhaW5lZCwgeWVzLCBhbmQgc3BlbnQgYWxyZWFkeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QmVzZXQgYnkgdGhlaXIgdHVtdWx0dW91cyBjb21wbGFpbnRzLCBhbmQgYXQgbG9zcyBmb3IgYSBiZXR0ZXIgZXhjdXNlLCBDYW1pbGx1cyBoYWQgcmVjb3Vyc2UgdG8gdGhlIGFic3VyZGVzdCBvZiBhbGwgZXhwbGFuYXRpb25zLCBhbmQgYWRtaXR0ZWQgdGhhdCBoZSBoYWQgZm9yZ290dGVuIGhpcyB2b3cuIFRoZSBzb2xkaWVycyB3ZXJlIGZpbGxlZCB3aXRoIGluZGlnbmF0aW9uIGF0IHRoZSB0aG91Z2h0IHRoYXQgaXQgd2FzIHRoZSBnb29kcyBvZiB0aGUgZW5lbXkgb2Ygd2hpY2ggaGUgaGFkIG9uY2Ugdm93ZWQgYSB0aXRoZSwgYnV0IHRoZSBnb29kcyBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zIGZyb20gd2hpY2ggaGUgd2FzIG5vdyBwYXlpbmcgdGhlIHRpdGhlLiBIb3dldmVyLCBhbGwgb2YgdGhlbSBicm91Z2h0IGluIHRoZSBuZWNlc3NhcnkgcG9ydGlvbiwgYW5kIGl0IHdhcyBkZWNpZGVkIHRvIG1ha2UgYSBib3dsIG9mIG1hc3NpdmUgZ29sZCBhbmQgc2VuZCBpdCB0byBEZWxwaGkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYSBzY2FyY2l0eSBvZiBnb2xkIGluIHRoZSBjaXR5LCBhbmQgdGhlIG1hZ2lzdHJhdGVzIGtuZXcgbm90IHdoZW5jZSBpdCBjb3VsZCBiZSBoYWQuIFNvIHRoZSB3b21lbiwgb2YgdGhlaXIgb3duIGFjY29yZCwgZGV0ZXJtaW5lZCB0byBnaXZlIHRoZSBnb2xkIG9ybmFtZW50cyB3aGljaCB0aGV5IHdvcmUgdXBvbiB0aGVpciBwZXJzb25zIGZvciB0aGUgb2ZmZXJpbmcsIGFuZCB0aGVzZSBhbW91bnRlZCB0byBlaWdodCB0YWxlbnRzIHdlaWdodC4gVGhlIHdvbWVuIHdlcmUgZml0dGluZ2x5IHJld2FyZGVkIGJ5IHRoZSBTZW5hdGUsIHdoaWNoIHZvdGVkIHRoYXQgdGhlcmVhZnRlciwgd2hlbiB3b21lbiBkaWVkLCBhIHN1aXRhYmxlIGV1bG9neSBzaG91bGQgYmUgc3Bva2VuIG92ZXIgdGhlbSwgYXMgb3ZlciBtZW4uIEZvciBpdCB3YXMgbm90IGN1c3RvbWFyeSBiZWZvcmUgdGhhdCB0aW1lLCB3aGVuIGEgd29tYW4gZGllZCwgdGhhdCBhIHB1YmxpYyBlbmNvbWl1bSBzaG91bGQgYmUgcHJvbm91bmNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGV5IGNob3NlIHRocmVlIG9mIHRoZSBub2JsZXN0IGNpdGl6ZW5zIGFzIGVudm95cywgbWFubmVkIHdpdGggaXRzIGZ1bGwgY29tcGxlbWVudCBvZiB0aGVpciBiZXN0IHNhaWxvcnMgYSBzaGlwIG9mIHdhciBkZWNrZWQgb3V0IGluIGZlc3RhbCBhcnJheSwgYW5kIHNlbnQgdGhlbSBvbiB0aGVpciB3YXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgU2VuYXRlIHZvdGVkLCBub3QgdGhhdCB0aGUgYm9vdHkgc2hvdWxkIGJlIHJlZGlzdHJpYnV0ZWQsIGZvciB0aGF0IHdvdWxkIGhhdmUgYmVlbiBhIGRpZmZpY3VsdCBtYXR0ZXIsIGJ1dCB0aGF0IHRob3NlIHdobyBoYWQgZ290IGl0IHNob3VsZCwgaW4gcGVyc29uIGFuZCB1bmRlciBvYXRoLCBicmluZyB0aGUgdGVudGggdGhlcmVvZiB0byB0aGUgcHVibGljIHRyZWFzdXJ5LiBUaGlzIHN1YmplY3RlZCB0aGUgc29sZGllcnMgdG8gbWFueSB2ZXhhdGlvbnMgYW5kIGNvbnN0cmFpbnRzLiBUaGV5IHdlcmUgcG9vciBtZW4sIHdobyBoYWQgdG9pbGVkIGhhcmQsIGFuZCB5ZXQgd2VyZSBub3cgZm9yY2VkIHRvIGNvbnRyaWJ1dGUgYSBsYXJnZSBzaGFyZSBvZiB3aGF0IHRoZXkgaGFkIGdhaW5lZCwgeWVzLCBhbmQgc3BlbnQgYWxyZWFkeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlc2V0IGJ5IHRoZWlyIHR1bXVsdHVvdXMgY29tcGxhaW50cywgYW5kIGF0IGxvc3MgZm9yIGEgYmV0dGVyIGV4Y3VzZSwgQ2FtaWxsdXMgaGFkIHJlY291cnNlIHRvIHRoZSBhYnN1cmRlc3Qgb2YgYWxsIGV4cGxhbmF0aW9ucywgYW5kIGFkbWl0dGVkIHRoYXQgaGUgaGFkIGZvcmdvdHRlbiBoaXMgdm93LiBUaGUgc29sZGllcnMgd2VyZSBmaWxsZWQgd2l0aCBpbmRpZ25hdGlvbiBhdCB0aGUgdGhvdWdodCB0aGF0IGl0IHdhcyB0aGUgZ29vZHMgb2YgdGhlIGVuZW15IG9mIHdoaWNoIGhlIGhhZCBvbmNlIHZvd2VkIGEgdGl0aGUsIGJ1dCB0aGUgZ29vZHMgb2YgaGlzIGZlbGxvdyBjaXRpemVucyBmcm9tIHdoaWNoIGhlIHdhcyBub3cgcGF5aW5nIHRoZSB0aXRoZS4gSG93ZXZlciwgYWxsIG9mIHRoZW0gYnJvdWdodCBpbiB0aGUgbmVjZXNzYXJ5IHBvcnRpb24sIGFuZCBpdCB3YXMgZGVjaWRlZCB0byBtYWtlIGEgYm93bCBvZiBtYXNzaXZlIGdvbGQgYW5kIHNlbmQgaXQgdG8gRGVscGhpLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYSBzY2FyY2l0eSBvZiBnb2xkIGluIHRoZSBjaXR5LCBhbmQgdGhlIG1hZ2lzdHJhdGVzIGtuZXcgbm90IHdoZW5jZSBpdCBjb3VsZCBiZSBoYWQuIFNvIHRoZSB3b21lbiwgb2YgdGhlaXIgb3duIGFjY29yZCwgZGV0ZXJtaW5lZCB0byBnaXZlIHRoZSBnb2xkIG9ybmFtZW50cyB3aGljaCB0aGV5IHdvcmUgdXBvbiB0aGVpciBwZXJzb25zIGZvciB0aGUgb2ZmZXJpbmcsIGFuZCB0aGVzZSBhbW91bnRlZCB0byBlaWdodCB0YWxlbnRzIHdlaWdodC4gVGhlIHdvbWVuIHdlcmUgZml0dGluZ2x5IHJld2FyZGVkIGJ5IHRoZSBTZW5hdGUsIHdoaWNoIHZvdGVkIHRoYXQgdGhlcmVhZnRlciwgd2hlbiB3b21lbiBkaWVkLCBhIHN1aXRhYmxlIGV1bG9neSBzaG91bGQgYmUgc3Bva2VuIG92ZXIgdGhlbSwgYXMgb3ZlciBtZW4uIEZvciBpdCB3YXMgbm90IGN1c3RvbWFyeSBiZWZvcmUgdGhhdCB0aW1lLCB3aGVuIGEgd29tYW4gZGllZCwgdGhhdCBhIHB1YmxpYyBlbmNvbWl1bSBzaG91bGQgYmUgcHJvbm91bmNlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSBjaG9zZSB0aHJlZSBvZiB0aGUgbm9ibGVzdCBjaXRpemVucyBhcyBlbnZveXMsIG1hbm5lZCB3aXRoIGl0cyBmdWxsIGNvbXBsZW1lbnQgb2YgdGhlaXIgYmVzdCBzYWlsb3JzIGEgc2hpcCBvZiB3YXIgZGVja2VkIG91dCBpbiBmZXN0YWwgYXJyYXksIGFuZCBzZW50IHRoZW0gb24gdGhlaXIgd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkNhbG0gYXQgc2VhIGhhcyBpdHMgcGVyaWxzIGFzIHdlbGwgYXMgc3Rvcm0sIGl0IHdvdWxkIHNlZW0sIGF0IGxlYXN0IHNvIGl0IHByb3ZlZCBpbiB0aGlzIGNhc2UuIEVudm95cyBhbmQgY3JldyBjYW1lIHdpdGhpbiBhbiBhY2Ugb2YgZGVzdHJ1Y3Rpb24sIGFuZCBmb3VuZCBlc2NhcGUgZnJvbSB0aGVpciBwZXJpbCB3aGVuIHRoZXkgbGVhc3QgZXhwZWN0ZWQgaXQuIE9mZiB0aGUgQWVvbGlhbiBpc2xlcywgYXMgdGhlIHdpbmQgZGllZCBkb3duLCBzb21lIExpcGFyaWFuIGdhbGxleXMgcHV0IG91dCBhZ2FpbnN0IHRoZW0sIHRha2luZyB0aGVtIGZvciBwaXJhdGVzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBoYWQgc3VmZmljaWVudCByZWdhcmQgdG8gdGhlaXIgcHJheWVycyBhbmQgc3VwcGxpY2F0aW9ucyBub3QgdG8gcnVuIHRoZWlyIHZlc3NlbCBkb3duLCBidXQgdGhleSB0b29rIGl0IGluIHRvdywgYnJvdWdodCBpdCB0byBsYW5kLCBhbmQgcHJvY2xhaW1lZCB0aGVpciBnb29kcyBhbmQgcGVyc29ucyBmb3Igc2FsZSwgYWRqdWRnaW5nIHRoZW0gcGlyYXRpY2FsLiBBdCBsYXN0LCBhbmQgd2l0aCBtdWNoIGFkbywgdGhyb3VnaCB0aGUgYnJhdmUgaW50ZXJjZXNzaW9uIG9mIGEgc2luZ2xlIG1hbiwgVGltZXNpdGhldXMsIHRoZWlyIGdlbmVyYWwsIHRoZSBMaXBhcmlhbnMgd2VyZSBwZXJzdWFkZWQgdG8gbGV0IHRoZSBjYXB0aXZlcyBnby4gVGhpcyBtYW4gdGhlbiBsYXVuY2hlZCBib2F0cyBvZiBoaXMgb3duLCBjb252b3llZCB0aGUgc3VwcGxpYW50cyBvbiB0aGVpciB3YXksIGFuZCBhc3Npc3RlZCB0aGVtIGluIHRoZSBkZWRpY2F0aW9uIG9mIHRoZWlyIG9mZmVyaW5nLiBGb3IgdGhpcyBoZSByZWNlaXZlZCBzdWl0YWJsZSBob25vdXJzIGF0IFJvbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVteSBoYWQgc3VmZmljaWVudCByZWdhcmQgdG8gdGhlaXIgcHJheWVycyBhbmQgc3VwcGxpY2F0aW9ucyBub3QgdG8gcnVuIHRoZWlyIHZlc3NlbCBkb3duLCBidXQgdGhleSB0b29rIGl0IGluIHRvdywgYnJvdWdodCBpdCB0byBsYW5kLCBhbmQgcHJvY2xhaW1lZCB0aGVpciBnb29kcyBhbmQgcGVyc29ucyBmb3Igc2FsZSwgYWRqdWRnaW5nIHRoZW0gcGlyYXRpY2FsLiBBdCBsYXN0LCBhbmQgd2l0aCBtdWNoIGFkbywgdGhyb3VnaCB0aGUgYnJhdmUgaW50ZXJjZXNzaW9uIG9mIGEgc2luZ2xlIG1hbiwgVGltZXNpdGhldXMsIHRoZWlyIGdlbmVyYWwsIHRoZSBMaXBhcmlhbnMgd2VyZSBwZXJzdWFkZWQgdG8gbGV0IHRoZSBjYXB0aXZlcyBnby4gVGhpcyBtYW4gdGhlbiBsYXVuY2hlZCBib2F0cyBvZiBoaXMgb3duLCBjb252b3llZCB0aGUgc3VwcGxpYW50cyBvbiB0aGVpciB3YXksIGFuZCBhc3Npc3RlZCB0aGVtIGluIHRoZSBkZWRpY2F0aW9uIG9mIHRoZWlyIG9mZmVyaW5nLiBGb3IgdGhpcyBoZSByZWNlaXZlZCBzdWl0YWJsZSBob25vdXJzIGF0IFJvbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T25jZSBtb3JlIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIHVyZ2VkIHRoZSBwYXNzYWdlIG9mIHRoZSBsYXcgZm9yIHRoZSBkaXZpc2lvbiBvZiB0aGUgY2l0eSwgYnV0IHRoZSB3YXIgd2l0aCB0aGUgRmFsaXNjYW5zIGNhbWUgb24gb3Bwb3J0dW5lbHkgYW5kIGdhdmUgdGhlIGxlYWRpbmcgbWVuIG9jY2FzaW9uIHRvIGhvbGQgc3VjaCBlbGVjdGl2ZSBhc3NlbWJsaWVzIGFzIHRoZXkgd2lzaGVkLCBhbmQgdG8gYXBwb2ludCBDYW1pbGx1cyBtaWxpdGFyeSB0cmlidW5lLCB3aXRoIGZpdmUgb3RoZXJzLiBUaGUgZW1lcmdlbmN5IHdhcyB0aG91Z2h0IHRvIGRlbWFuZCBhIGxlYWRlciB3aXRoIHRoZSBkaWduaXR5IGFuZCByZXB1dGF0aW9uIHdoaWNoIGV4cGVyaWVuY2UgYWxvbmUgY291bGQgZ2l2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHBlb3BsZSBoYWQgcmF0aWZpZWQgdGhlIGVsZWN0aW9uLCBDYW1pbGx1cywgYXQgdGhlIGhlYWQgb2YgaGlzIGFybXksIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiB0aGUgRmFsaXNjYW5zIGFuZCBsYWlkIHNpZWdlIHRvIEZhbGVyaWksIGEgc3Ryb25nIGNpdHksIGFuZCB3ZWxsIGVxdWlwcGVkIHdpdGggYWxsIHRoZSBtdW5pdGlvbnMgb2Ygd2FyLiBJdCB3YXMgbm90IHRoYXQgaGUgdGhvdWdodCBpdHMgY2FwdHVyZSB3b3VsZCBkZW1hbmQgc2xpZ2h0IGVmZm9ydCBvciBzaG9ydCB0aW1lLCBidXQgaGUgd2lzaGVkIHRvIHR1cm4gdGhlIHRob3VnaHRzIG9mIHRoZSBjaXRpemVucyB0byBvdGhlciBtYXR0ZXJzIGFuZCBrZWVwIHRoZW0gYnVzeSB0aGVyZWluLCB0aGF0IHRoZXkgbWlnaHQgbm90IGJlIGFibGUgdG8gc3RheSBhdCBob21lIGFuZCBiZWNvbWUgdGhlIHByZXkgb2Ygc2VkaXRpb3VzIGxlYWRlcnMuIFRoaXMgd2FzIGEgZml0dGluZyBhbmQgc292ZXJlaWduIHJlbWVkeSB3aGljaCB0aGUgUm9tYW5zIHVzZWQsIGxpa2UgZ29vZCBwaHlzaWNpYW5zLCB0aGVyZWJ5IGV4cGVsbGluZyBmcm9tIHRoZSBib2R5IHBvbGl0aWMgaXRzIHRyb3VibGVzb21lIGRpc3RlbXBlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIG1vcmUgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgdXJnZWQgdGhlIHBhc3NhZ2Ugb2YgdGhlIGxhdyBmb3IgdGhlIGRpdmlzaW9uIG9mIHRoZSBjaXR5LCBidXQgdGhlIHdhciB3aXRoIHRoZSBGYWxpc2NhbnMgY2FtZSBvbiBvcHBvcnR1bmVseSBhbmQgZ2F2ZSB0aGUgbGVhZGluZyBtZW4gb2NjYXNpb24gdG8gaG9sZCBzdWNoIGVsZWN0aXZlIGFzc2VtYmxpZXMgYXMgdGhleSB3aXNoZWQsIGFuZCB0byBhcHBvaW50IENhbWlsbHVzIG1pbGl0YXJ5IHRyaWJ1bmUsIHdpdGggZml2ZSBvdGhlcnMuIFRoZSBlbWVyZ2VuY3kgd2FzIHRob3VnaHQgdG8gZGVtYW5kIGEgbGVhZGVyIHdpdGggdGhlIGRpZ25pdHkgYW5kIHJlcHV0YXRpb24gd2hpY2ggZXhwZXJpZW5jZSBhbG9uZSBjb3VsZCBnaXZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBwZW9wbGUgaGFkIHJhdGlmaWVkIHRoZSBlbGVjdGlvbiwgQ2FtaWxsdXMsIGF0IHRoZSBoZWFkIG9mIGhpcyBhcm15LCBpbnZhZGVkIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIEZhbGlzY2FucyBhbmQgbGFpZCBzaWVnZSB0byBGYWxlcmlpLCBhIHN0cm9uZyBjaXR5LCBhbmQgd2VsbCBlcXVpcHBlZCB3aXRoIGFsbCB0aGUgbXVuaXRpb25zIG9mIHdhci4gSXQgd2FzIG5vdCB0aGF0IGhlIHRob3VnaHQgaXRzIGNhcHR1cmUgd291bGQgZGVtYW5kIHNsaWdodCBlZmZvcnQgb3Igc2hvcnQgdGltZSwgYnV0IGhlIHdpc2hlZCB0byB0dXJuIHRoZSB0aG91Z2h0cyBvZiB0aGUgY2l0aXplbnMgdG8gb3RoZXIgbWF0dGVycyBhbmQga2VlcCB0aGVtIGJ1c3kgdGhlcmVpbiwgdGhhdCB0aGV5IG1pZ2h0IG5vdCBiZSBhYmxlIHRvIHN0YXkgYXQgaG9tZSBhbmQgYmVjb21lIHRoZSBwcmV5IG9mIHNlZGl0aW91cyBsZWFkZXJzLiBUaGlzIHdhcyBhIGZpdHRpbmcgYW5kIHNvdmVyZWlnbiByZW1lZHkgd2hpY2ggdGhlIFJvbWFucyB1c2VkLCBsaWtlIGdvb2QgcGh5c2ljaWFucywgdGhlcmVieSBleHBlbGxpbmcgZnJvbSB0aGUgYm9keSBwb2xpdGljIGl0cyB0cm91Ymxlc29tZSBkaXN0ZW1wZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgRmFsZXJpYW5zLCByZWx5aW5nIG9uIHRoZSBncmVhdCBzdHJlbmd0aCBvZiB0aGVpciBjaXR5IGF0IGFsbCBwb2ludHMsIG1hZGUgc28gbGlnaHQgb2YgdGhlIHNpZWdlIHRoYXQsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgZGVmZW5kZXJzIG9mIHRoZSB3YWxscywgdGhlIHJlc3Qgd2VudCB1cCBhbmQgZG93biB0aGUgY2l0eSBpbiB0aGVpciBnYXJiIG9mIHBlYWNlLiBUaGUgYm95cyB3ZW50IHRvIHNjaG9vbCBhcyB1c3VhbCwgYW5kIHdlcmUgYnJvdWdodCBieSB0aGVpciB0ZWFjaGVyIGFsb25nIHRoZSB3YWxscyBvdXRzaWRlIHRvIHdhbGsgYWJvdXQgYW5kIGdldCB0aGVpciBleGVyY2lzZS4gRm9yIHRoZSBGYWxlcmlhbnMsIGxpa2UgdGhlIEdyZWVrcywgZW1wbG95ZWQgb25lIHRlYWNoZXIgaW4gY29tbW9uLCB3aXNoaW5nIHRoZWlyIGJveXMsIGZyb20gdGhlIHZlcnkgc3RhcnQsIHRvIGhlcmQgd2l0aCBvbmUgYW5vdGhlciBhbmQgZ3JvdyB1cCB0b2dldGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0ZWFjaGVyLCB0aGVuLCB3aXNoaW5nIHRvIGJldHJheSBGYWxlcmlpIGJ5IG1lYW5zIG9mIGl0cyBib3lzLCBsZWQgdGhlbSBvdXQgZXZlcnkgZGF5IGJleW9uZCB0aGUgY2l0eSB3YWxscywgYXQgZmlyc3Qgb25seSBhIGxpdHRsZSB3YXksIGFuZCB0aGVuIGJyb3VnaHQgdGhlbSBiYWNrIGluc2lkZSB3aGVuIHRoZXkgaGFkIHRha2VuIHRoZWlyIGV4ZXJjaXNlLiBQcmVzZW50bHkgaGUgbGVkIHRoZW0sIGxpdHRsZSBieSBsaXR0bGUsIGZhcnRoZXIgYW5kIGZhcnRoZXIgb3V0LCBhY2N1c3RvbWVkIHRoZW0gdG8gZmVlbCBjb25maWRlbnQgdGhhdCB0aGVyZSB3YXMgbm8gZGFuZ2VyIGF0IGFsbCwgYW5kIGZpbmFsbHkgcHVzaGVkIGluIGFtb25nIHRoZSBSb21hbiBvdXRwb3N0cyB3aXRoIGhpcyB3aG9sZSBjb21wYW55LCBoYW5kZWQgdGhlbSBvdmVyIHRvIHRoZSBlbmVteSwgYW5kIGRlbWFuZGVkIHRvIGJlIGxlZCB0byBDYW1pbGx1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gbGVkLCBhbmQgaW4gdGhhdCBwcmVzZW5jZSwgaGUgc2FpZCBoZSB3YXMgYSBib3lzJyBzY2hvb2wtdGVhY2hlciwgYnV0IGNob3NlIHJhdGhlciB0byB3aW4gdGhlIGdlbmVyYWwncyBmYXZvdXIgdGhhbiB0byBmdWxmaWwgdGhlIGR1dGllcyBvZiBoaXMgb2ZmaWNlLCBhbmQgc28gaGFkIGNvbWUgYnJpbmdpbmcgdG8gaGltIHRoZSBjaXR5IGluIHRoZSBwZXJzb25zIG9mIGl0cyBib3lzLiBJdCBzZWVtZWQgdG8gQ2FtaWxsdXMsIG9uIGhlYXJpbmcgaGltLCB0aGF0IHRoZSBtYW4gaGFkIGRvbmUgYSBtb25zdHJvdXMgZGVlZCwgYW5kIHR1cm5pbmcgdG8gdGhlIGJ5c3RhbmRlcnMgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXIgaXMgaW5kZWVkIGEgZ3JpZXZvdXMgdGhpbmcsIGFuZCBpcyB3YWdlZCB3aXRoIG11Y2ggaW5qdXN0aWNlIGFuZCB2aW9sZW5jZTsgCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBldmVuIHdhciBoYXMgY2VydGFpbiBsYXdzIHdoaWNoIGdvb2QgYW5kIGJyYXZlIG1lbiB3aWxsIHJlc3BlY3QsIGFuZCB3ZSBtdXN0IG5vdCBzbyBob3RseSBwdXJzdWUgdmljdG9yeSBhcyBub3QgdG8gZmxlZSB0aGUgZmF2b3VycyBvZiBiYXNlIGFuZCBpbXBpb3VzIGRvZXJzLiBUaGUgZ3JlYXQgZ2VuZXJhbCB3aWxsIHdhZ2Ugd2FyIHJlbHlpbmcgb24gaGlzIG93biBuYXRpdmUgdmFsb3VyLCBub3Qgb24gdGhlIGJhc2VuZXNzIG9mIG90aGVyIG1lbi48L3E+IFRoZW4gaGUgb3JkZXJlZCBoaXMgYXR0ZW5kYW50cyB0byB0ZWFyIHRoZSBtYW4ncyBjbG90aGluZyBmcm9tIGhpbSwgdGllIGhpcyBhcm1zIGJlaGluZCBoaXMgYmFjaywgYW5kIHB1dCByb2RzIGFuZCBzY291cmdlcyBpbiB0aGUgaGFuZHMgb2YgdGhlIGJveXMsIHRoYXQgdGhleSBtaWdodCBjaGFzdGlzZSB0aGUgdHJhaXRvciBhbmQgZHJpdmUgaGltIGJhY2sgaW50byB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEZhbGVyaWFucywgcmVseWluZyBvbiB0aGUgZ3JlYXQgc3RyZW5ndGggb2YgdGhlaXIgY2l0eSBhdCBhbGwgcG9pbnRzLCBtYWRlIHNvIGxpZ2h0IG9mIHRoZSBzaWVnZSB0aGF0LCB3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGRlZmVuZGVycyBvZiB0aGUgd2FsbHMsIHRoZSByZXN0IHdlbnQgdXAgYW5kIGRvd24gdGhlIGNpdHkgaW4gdGhlaXIgZ2FyYiBvZiBwZWFjZS4gVGhlIGJveXMgd2VudCB0byBzY2hvb2wgYXMgdXN1YWwsIGFuZCB3ZXJlIGJyb3VnaHQgYnkgdGhlaXIgdGVhY2hlciBhbG9uZyB0aGUgd2FsbHMgb3V0c2lkZSB0byB3YWxrIGFib3V0IGFuZCBnZXQgdGhlaXIgZXhlcmNpc2UuIEZvciB0aGUgRmFsZXJpYW5zLCBsaWtlIHRoZSBHcmVla3MsIGVtcGxveWVkIG9uZSB0ZWFjaGVyIGluIGNvbW1vbiwgd2lzaGluZyB0aGVpciBib3lzLCBmcm9tIHRoZSB2ZXJ5IHN0YXJ0LCB0byBoZXJkIHdpdGggb25lIGFub3RoZXIgYW5kIGdyb3cgdXAgdG9nZXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdGVhY2hlciwgdGhlbiwgd2lzaGluZyB0byBiZXRyYXkgRmFsZXJpaSBieSBtZWFucyBvZiBpdHMgYm95cywgbGVkIHRoZW0gb3V0IGV2ZXJ5IGRheSBiZXlvbmQgdGhlIGNpdHkgd2FsbHMsIGF0IGZpcnN0IG9ubHkgYSBsaXR0bGUgd2F5LCBhbmQgdGhlbiBicm91Z2h0IHRoZW0gYmFjayBpbnNpZGUgd2hlbiB0aGV5IGhhZCB0YWtlbiB0aGVpciBleGVyY2lzZS4gUHJlc2VudGx5IGhlIGxlZCB0aGVtLCBsaXR0bGUgYnkgbGl0dGxlLCBmYXJ0aGVyIGFuZCBmYXJ0aGVyIG91dCwgYWNjdXN0b21lZCB0aGVtIHRvIGZlZWwgY29uZmlkZW50IHRoYXQgdGhlcmUgd2FzIG5vIGRhbmdlciBhdCBhbGwsIGFuZCBmaW5hbGx5IHB1c2hlZCBpbiBhbW9uZyB0aGUgUm9tYW4gb3V0cG9zdHMgd2l0aCBoaXMgd2hvbGUgY29tcGFueSwgaGFuZGVkIHRoZW0gb3ZlciB0byB0aGUgZW5lbXksIGFuZCBkZW1hbmRlZCB0byBiZSBsZWQgdG8gQ2FtaWxsdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIGxlZCwgYW5kIGluIHRoYXQgcHJlc2VuY2UsIGhlIHNhaWQgaGUgd2FzIGEgYm95cycgc2Nob29sLXRlYWNoZXIsIGJ1dCBjaG9zZSByYXRoZXIgdG8gd2luIHRoZSBnZW5lcmFsJ3MgZmF2b3VyIHRoYW4gdG8gZnVsZmlsIHRoZSBkdXRpZXMgb2YgaGlzIG9mZmljZSwgYW5kIHNvIGhhZCBjb21lIGJyaW5naW5nIHRvIGhpbSB0aGUgY2l0eSBpbiB0aGUgcGVyc29ucyBvZiBpdHMgYm95cy4gSXQgc2VlbWVkIHRvIENhbWlsbHVzLCBvbiBoZWFyaW5nIGhpbSwgdGhhdCB0aGUgbWFuIGhhZCBkb25lIGEgbW9uc3Ryb3VzIGRlZWQsIGFuZCB0dXJuaW5nIHRvIHRoZSBieXN0YW5kZXJzIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXIgaXMgaW5kZWVkIGEgZ3JpZXZvdXMgdGhpbmcsIGFuZCBpcyB3YWdlZCB3aXRoIG11Y2ggaW5qdXN0aWNlIGFuZCB2aW9sZW5jZTsgCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGV2ZW4gd2FyIGhhcyBjZXJ0YWluIGxhd3Mgd2hpY2ggZ29vZCBhbmQgYnJhdmUgbWVuIHdpbGwgcmVzcGVjdCwgYW5kIHdlIG11c3Qgbm90IHNvIGhvdGx5IHB1cnN1ZSB2aWN0b3J5IGFzIG5vdCB0byBmbGVlIHRoZSBmYXZvdXJzIG9mIGJhc2UgYW5kIGltcGlvdXMgZG9lcnMuIFRoZSBncmVhdCBnZW5lcmFsIHdpbGwgd2FnZSB3YXIgcmVseWluZyBvbiBoaXMgb3duIG5hdGl2ZSB2YWxvdXIsIG5vdCBvbiB0aGUgYmFzZW5lc3Mgb2Ygb3RoZXIgbWVuLjwvcT4gVGhlbiBoZSBvcmRlcmVkIGhpcyBhdHRlbmRhbnRzIHRvIHRlYXIgdGhlIG1hbidzIGNsb3RoaW5nIGZyb20gaGltLCB0aWUgaGlzIGFybXMgYmVoaW5kIGhpcyBiYWNrLCBhbmQgcHV0IHJvZHMgYW5kIHNjb3VyZ2VzIGluIHRoZSBoYW5kcyBvZiB0aGUgYm95cywgdGhhdCB0aGV5IG1pZ2h0IGNoYXN0aXNlIHRoZSB0cmFpdG9yIGFuZCBkcml2ZSBoaW0gYmFjayBpbnRvIHRoZSBjaXR5LgoJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBldmVuIHdhciBoYXMgY2VydGFpbiBsYXdzIHdoaWNoIGdvb2QgYW5kIGJyYXZlIG1lbiB3aWxsIHJlc3BlY3QsIGFuZCB3ZSBtdXN0IG5vdCBzbyBob3RseSBwdXJzdWUgdmljdG9yeSBhcyBub3QgdG8gZmxlZSB0aGUgZmF2b3VycyBvZiBiYXNlIGFuZCBpbXBpb3VzIGRvZXJzLiBUaGUgZ3JlYXQgZ2VuZXJhbCB3aWxsIHdhZ2Ugd2FyIHJlbHlpbmcgb24gaGlzIG93biBuYXRpdmUgdmFsb3VyLCBub3Qgb24gdGhlIGJhc2VuZXNzIG9mIG90aGVyIG1lbi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgRmFsZXJpYW5zIGhhZCBqdXN0IGJlY29tZSBhd2FyZSBvZiB0aGUgdGVhY2hlcidzIHRyZWFjaGVyeSwgYW5kIHRoZSB3aG9sZSBjaXR5LCBhcyB3YXMgbmF0dXJhbCwgd2FzIGZpbGxlZCB3aXRoIGxhbWVudGF0aW9uIG92ZXIgYSBjYWxhbWl0eSBzbyBncmVhdC4gTWVuIGFuZCB3b21lbiBhbGlrZSBydXNoZWQgZGlzdHJhY3RlZGx5IHRvIHRoZSB3YWxscyBhbmQgZ2F0ZXMsIHdoZW4gbG8hIHRoZXJlIGNhbWUgdGhlIGJveXMsIGJyaW5naW5nIHRoZWlyIHRlYWNoZXIgYmFjayBzdHJpcHBlZCwgYm91bmQsIGFuZCBtYWx0cmVhdGVkLCB3aGlsZSB0aGV5IGNhbGxlZCBDYW1pbGx1cyB0aGVpciBzYXZpb3VyLCB0aGVpciBsYXRoZXIsIGFuZCB0aGVpciBnb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgd2lzZSBub3Qgb25seSB0aGUgcGFyZW50cyBvZiB0aGUgYm95cywgYnV0IHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBhcyB3ZWxsLCB3aGVuIHRoZXkgYmVoZWxkIHRoZSBzcGVjdGFjbGUsIHdlcmUgc2VpemVkIHdpdGggYWRtaXJhdGlvbiBhbmQgbG9uZ2luZyBmb3IgdGhlIHJpZ2h0ZW91c25lc3Mgb2YgQ2FtaWxsdXMuIEluIGhhc3RlIHRoZXkgaGVsZCBhbiBhc3NlbWJseSBhbmQgc2VudCBlbnZveXMgdG8gaGltLCBlbnRydXN0aW5nIGhpbSB3aXRoIHRoZWlyIGxpdmVzIGFuZCBmb3J0dW5lcy4gVGhlc2UgZW52b3lzIENhbWlsbHVzIHNlbnQgdG8gUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+U3RhbmRpbmcgaW4gdGhlIFNlbmF0ZSwgdGhleSBkZWNsYXJlZCB0aGF0IHRoZSBSb21hbnMsIGJ5IGVzdGVlbWluZyByaWdodGVvdXNuZXNzIGFib3ZlIHZpY3RvcnksIGhhZCB0YXVnaHQgdGhlbSB0byBsb3ZlIGRlZmVhdCBhYm92ZSBmcmVlZG9tOyBub3Qgc28gbXVjaCBiZWNhdXNlIHRoZXkgdGhvdWdodCB0aGVtc2VsdmVzIGluZmVyaW9yIGluIHN0cmVuZ3RoLCBhcyBiZWNhdXNlIHRoZXkgY29uZmVzc2VkIHRoZW1zZWx2ZXMgdmFucXVpc2hlZCBpbiB2aXJ0dWUuIE9uIHRoZSBTZW5hdGUncyByZW1hbmRpbmcgdG8gQ2FtaWxsdXMgdGhlIGRlY2lzaW9uIGFuZCBkaXNwb3NpdGlvbiBvZiB0aGUgbWF0dGVyLCBoZSB0b29rIGEgc3VtIG9mIG1vbmV5IGZyb20gdGhlIEZhbGVyaWFucywgZXN0YWJsaXNoZWQgZnJpZW5kc2hpcCB3aXRoIGFsbCB0aGUgRmFsaXNjYW5zLCBhbmQgd2l0aGRyZXcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBGYWxlcmlhbnMgaGFkIGp1c3QgYmVjb21lIGF3YXJlIG9mIHRoZSB0ZWFjaGVyJ3MgdHJlYWNoZXJ5LCBhbmQgdGhlIHdob2xlIGNpdHksIGFzIHdhcyBuYXR1cmFsLCB3YXMgZmlsbGVkIHdpdGggbGFtZW50YXRpb24gb3ZlciBhIGNhbGFtaXR5IHNvIGdyZWF0LiBNZW4gYW5kIHdvbWVuIGFsaWtlIHJ1c2hlZCBkaXN0cmFjdGVkbHkgdG8gdGhlIHdhbGxzIGFuZCBnYXRlcywgd2hlbiBsbyEgdGhlcmUgY2FtZSB0aGUgYm95cywgYnJpbmdpbmcgdGhlaXIgdGVhY2hlciBiYWNrIHN0cmlwcGVkLCBib3VuZCwgYW5kIG1hbHRyZWF0ZWQsIHdoaWxlIHRoZXkgY2FsbGVkIENhbWlsbHVzIHRoZWlyIHNhdmlvdXIsIHRoZWlyIGxhdGhlciwgYW5kIHRoZWlyIGdvZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgd2lzZSBub3Qgb25seSB0aGUgcGFyZW50cyBvZiB0aGUgYm95cywgYnV0IHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBhcyB3ZWxsLCB3aGVuIHRoZXkgYmVoZWxkIHRoZSBzcGVjdGFjbGUsIHdlcmUgc2VpemVkIHdpdGggYWRtaXJhdGlvbiBhbmQgbG9uZ2luZyBmb3IgdGhlIHJpZ2h0ZW91c25lc3Mgb2YgQ2FtaWxsdXMuIEluIGhhc3RlIHRoZXkgaGVsZCBhbiBhc3NlbWJseSBhbmQgc2VudCBlbnZveXMgdG8gaGltLCBlbnRydXN0aW5nIGhpbSB3aXRoIHRoZWlyIGxpdmVzIGFuZCBmb3J0dW5lcy4gVGhlc2UgZW52b3lzIENhbWlsbHVzIHNlbnQgdG8gUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlN0YW5kaW5nIGluIHRoZSBTZW5hdGUsIHRoZXkgZGVjbGFyZWQgdGhhdCB0aGUgUm9tYW5zLCBieSBlc3RlZW1pbmcgcmlnaHRlb3VzbmVzcyBhYm92ZSB2aWN0b3J5LCBoYWQgdGF1Z2h0IHRoZW0gdG8gbG92ZSBkZWZlYXQgYWJvdmUgZnJlZWRvbTsgbm90IHNvIG11Y2ggYmVjYXVzZSB0aGV5IHRob3VnaHQgdGhlbXNlbHZlcyBpbmZlcmlvciBpbiBzdHJlbmd0aCwgYXMgYmVjYXVzZSB0aGV5IGNvbmZlc3NlZCB0aGVtc2VsdmVzIHZhbnF1aXNoZWQgaW4gdmlydHVlLiBPbiB0aGUgU2VuYXRlJ3MgcmVtYW5kaW5nIHRvIENhbWlsbHVzIHRoZSBkZWNpc2lvbiBhbmQgZGlzcG9zaXRpb24gb2YgdGhlIG1hdHRlciwgaGUgdG9vayBhIHN1bSBvZiBtb25leSBmcm9tIHRoZSBGYWxlcmlhbnMsIGVzdGFibGlzaGVkIGZyaWVuZHNoaXAgd2l0aCBhbGwgdGhlIEZhbGlzY2FucywgYW5kIHdpdGhkcmV3LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHNvbGRpZXJzIHRob3VnaHQgdG8gaGF2ZSBoYWQgdGhlIHNhY2tpbmcgb2YgRmFsZXJpaSwgYW5kIHdoZW4gdGhleSBjYW1lIGJhY2sgdG8gUm9tZSBlbXB0eS1oYW5kZWQsIHRoZXkgZGVub3VuY2VkIENhbWlsbHVzIHRvIHRoZSByZXN0IG9mIHRoZSBjaXRpemVucyBhcyBhIGhhdGVyIG9mIHRoZSBjb21tb24gcGVvcGxlLCBhbmQgYXMgYmVncnVkZ2luZyB0byB0aGUgcG9vciB0aGUgZW5qb3ltZW50IG9mIHRoZWlyIHJpZ2h0ZnVsIGJvb3R5LiBBbmQgd2hlbiB0aGUgdHJpYnVuZXMgb25jZSBtb3JlIHB1dCBmb3J3YXJkIHRoZSBsYXcgZm9yIHRoZSBkaXZpc2lvbiBvZiB0aGUgY2l0eSBhbmQgc3VtbW9uZWQgdGhlIHBlb3BsZSB0byB2b3RlIHVwb24gaXQsIHRoZW4gQ2FtaWxsdXMsIHNodW5uaW5nIG5vIGhhdHJlZCBub3IgYW55IGJvbGRuZXNzIG9mIHV0dGVyYW5jZSwgd2FzIG1hbmlmZXN0bHkgdGhlIGNoaWVmIG9uZSBpbiBmb3JjaW5nIHRoZSBtdWx0aXR1ZGUgYXdheSBmcm9tIGl0cyBkZXNpcmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHRoZXkgZGlkIGluZGVlZCByZWplY3QgdGhlIGxhdywgbXVjaCBhZ2FpbnN0IHRoZWlyIHdpbGwsIGJ1dCB0aGV5IHdlcmUgd3JvdGggd2l0aCBDYW1pbGx1cywgc28gdGhhdCBldmVuIHdoZW4gaGUgbWV0IHdpdGggZG9tZXN0aWMgYWZmbGljdGlvbiBhbmQgbG9zdCBvbmUgb2YgaGlzIHR3byBzb25zIGJ5IHNpY2tuZXNzLCB0aGVpciB3cmF0aCB3YXMgaW4gbm8gd2lzZSBzb2Z0ZW5lZCBieSBwaXR5LiBBbmQgeWV0IGhlIHNldCBubyBib3VuZHMgdG8gaGlzIHNvcnJvdywgYmVpbmcgYnkgbmF0dXJlIGEgZ2VudGxlIGFuZCBraW5kbHkgbWFuLCBidXQgZXZlbiBhZnRlciB0aGUgaW5kaWN0bWVudCBhZ2FpbnN0IGhpbSBoYWQgYmVlbiBwdWJsaXNoZWQsIGhlIHN1ZmZlcmVkIGhpcyBncmllZiB0byBrZWVwIGhpbSBhdCBob21lLCBpbiBjbG9zZSBzZWNsdXNpb24gd2l0aCB0aGUgd29tZW4gb2YgaGlzIGhvdXNlaG9sZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzb2xkaWVycyB0aG91Z2h0IHRvIGhhdmUgaGFkIHRoZSBzYWNraW5nIG9mIEZhbGVyaWksIGFuZCB3aGVuIHRoZXkgY2FtZSBiYWNrIHRvIFJvbWUgZW1wdHktaGFuZGVkLCB0aGV5IGRlbm91bmNlZCBDYW1pbGx1cyB0byB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgYXMgYSBoYXRlciBvZiB0aGUgY29tbW9uIHBlb3BsZSwgYW5kIGFzIGJlZ3J1ZGdpbmcgdG8gdGhlIHBvb3IgdGhlIGVuam95bWVudCBvZiB0aGVpciByaWdodGZ1bCBib290eS4gQW5kIHdoZW4gdGhlIHRyaWJ1bmVzIG9uY2UgbW9yZSBwdXQgZm9yd2FyZCB0aGUgbGF3IGZvciB0aGUgZGl2aXNpb24gb2YgdGhlIGNpdHkgYW5kIHN1bW1vbmVkIHRoZSBwZW9wbGUgdG8gdm90ZSB1cG9uIGl0LCB0aGVuIENhbWlsbHVzLCBzaHVubmluZyBubyBoYXRyZWQgbm9yIGFueSBib2xkbmVzcyBvZiB1dHRlcmFuY2UsIHdhcyBtYW5pZmVzdGx5IHRoZSBjaGllZiBvbmUgaW4gZm9yY2luZyB0aGUgbXVsdGl0dWRlIGF3YXkgZnJvbSBpdHMgZGVzaXJlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgdGhleSBkaWQgaW5kZWVkIHJlamVjdCB0aGUgbGF3LCBtdWNoIGFnYWluc3QgdGhlaXIgd2lsbCwgYnV0IHRoZXkgd2VyZSB3cm90aCB3aXRoIENhbWlsbHVzLCBzbyB0aGF0IGV2ZW4gd2hlbiBoZSBtZXQgd2l0aCBkb21lc3RpYyBhZmZsaWN0aW9uIGFuZCBsb3N0IG9uZSBvZiBoaXMgdHdvIHNvbnMgYnkgc2lja25lc3MsIHRoZWlyIHdyYXRoIHdhcyBpbiBubyB3aXNlIHNvZnRlbmVkIGJ5IHBpdHkuIEFuZCB5ZXQgaGUgc2V0IG5vIGJvdW5kcyB0byBoaXMgc29ycm93LCBiZWluZyBieSBuYXR1cmUgYSBnZW50bGUgYW5kIGtpbmRseSBtYW4sIGJ1dCBldmVuIGFmdGVyIHRoZSBpbmRpY3RtZW50IGFnYWluc3QgaGltIGhhZCBiZWVuIHB1Ymxpc2hlZCwgaGUgc3VmZmVyZWQgaGlzIGdyaWVmIHRvIGtlZXAgaGltIGF0IGhvbWUsIGluIGNsb3NlIHNlY2x1c2lvbiB3aXRoIHRoZSB3b21lbiBvZiBoaXMgaG91c2Vob2xkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBoaXMgYWNjdXNlciB3YXMgTHVjaXVzIEFwdWxlaXVzLCBhbmQgdGhlIGNoYXJnZSB3YXMgdGhlZnQgb2YgVHVzY2FuIGdvb2RzLiBJdCB3YXMgc2FpZCwgZm9yc29vdGgsIHRoYXQgY2VydGFpbiBicm9uemUgZG9vcnMgYmVsb25naW5nIHRvIHRoZSBib290eSBoYWQgYmVlbiBzZWVuIGF0IGhpcyBob3VzZS4gQnV0IHRoZSBwZW9wbGUgd2VyZSBleGFzcGVyYXRlZCwgYW5kIHdvdWxkIHBsYWlubHkgbGF5IGhvbGQgb2YgYW55IHByZXRleHQgd2hhdGV2ZXIgZm9yIGNvbmRlbW5pbmcgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGVuIGhlIGFzc2VtYmxlZCBoaXMgZnJpZW5kcyBhbmQgY29tcmFkZXMgaW4gYXJtcywgd2hvIHdlcmUgbWFueSBpbiBudW1iZXIsIGFuZCBiZWdnZWQgdGhlbSBub3QgdG8gc3VmZmVyIGhpbSB0byBiZSBjb252aWN0ZWQgb24gYmFzZSBjaGFyZ2VzIGFuZCB0byBiZSBtYWRlIGEgbGF1Z2hpbmdzdG9jayBieSBoaXMgZm9lcy4gV2hlbiBoaXMgZnJpZW5kcyBoYWQgbGFpZCB0aGVpciBoZWFkcyB0b2dldGhlciBhbmQgZGlzY3Vzc2VkIHRoZSBjYXNlLCB0aGV5IGFuc3dlcmVkIHRoYXQsIGFzIHJlZ2FyZGVkIGhpcyB0cmlhbCwgdGhleSB0aG91Z2h0IHRoZXkgY291bGQgYmUgb2Ygbm8gaGVscCB0byBoaW07IGJ1dCBpZiBoZSB3ZXJlIHB1bmlzaGVkIHdpdGggYSBmaW5lLCB0aGV5IHdvdWxkIGhlbHAgaGltIHBheSBpdC4gVGhpcyBoZSBjb3VsZCBub3QgZW5kdXJlLCBhbmQgaW4gaGlzIHdyYXRoIGRldGVybWluZWQgdG8gZGVwYXJ0IHRoZSBjaXR5IGFuZCBnbyBpbnRvIGV4aWxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYWZ0ZXIgaGUgaGFkIGtpc3NlZCBoaXMgd2lmZSBhbmQgc29uIGdvb2QtYnllLCBoZSB3ZW50IGZyb20gaGlzIGhvdXNlIGluIHNpbGVuY2UgYXMgZmFyIGFzIHRoZSBnYXRlIG9mIHRoZSBjaXR5LiBUaGVyZSBoZSBzdG9wcGVkLCB0dXJuZWQgaGltc2VsZiBhYm91dCwgYW5kIHN0cmV0Y2hpbmcgaGlzIGhhbmRzIG91dCB0b3dhcmRzIHRoZSBDYXBpdG9sLCBwcmF5ZWQgdGhlIGdvZHMgdGhhdCwgaWYgd2l0aCBubyBqdXN0aWNlLCBidXQgdGhyb3VnaCB0aGUgd2FudG9ubmVzcyBvZiB0aGUgcGVvcGxlIGFuZCB0aGUgYWJ1c2Ugb2YgdGhlIGVudmlvdXMgaGUgd2FzIG5vdyBiZWluZyBkcml2ZW4gZnJvbSBoaXMgY291bnRyeSwgdGhlIFJvbWFucyBtaWdodCBzcGVlZGlseSByZXBlbnQsIGFuZCBzaG93IHRvIGFsbCBtZW4gdGhhdCB0aGV5IG5lZWRlZCBhbmQgbG9uZ2VkIGZvciBDYW1pbGx1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgaGlzIGFjY3VzZXIgd2FzIEx1Y2l1cyBBcHVsZWl1cywgYW5kIHRoZSBjaGFyZ2Ugd2FzIHRoZWZ0IG9mIFR1c2NhbiBnb29kcy4gSXQgd2FzIHNhaWQsIGZvcnNvb3RoLCB0aGF0IGNlcnRhaW4gYnJvbnplIGRvb3JzIGJlbG9uZ2luZyB0byB0aGUgYm9vdHkgaGFkIGJlZW4gc2VlbiBhdCBoaXMgaG91c2UuIEJ1dCB0aGUgcGVvcGxlIHdlcmUgZXhhc3BlcmF0ZWQsIGFuZCB3b3VsZCBwbGFpbmx5IGxheSBob2xkIG9mIGFueSBwcmV0ZXh0IHdoYXRldmVyIGZvciBjb25kZW1uaW5nIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gaGUgYXNzZW1ibGVkIGhpcyBmcmllbmRzIGFuZCBjb21yYWRlcyBpbiBhcm1zLCB3aG8gd2VyZSBtYW55IGluIG51bWJlciwgYW5kIGJlZ2dlZCB0aGVtIG5vdCB0byBzdWZmZXIgaGltIHRvIGJlIGNvbnZpY3RlZCBvbiBiYXNlIGNoYXJnZXMgYW5kIHRvIGJlIG1hZGUgYSBsYXVnaGluZ3N0b2NrIGJ5IGhpcyBmb2VzLiBXaGVuIGhpcyBmcmllbmRzIGhhZCBsYWlkIHRoZWlyIGhlYWRzIHRvZ2V0aGVyIGFuZCBkaXNjdXNzZWQgdGhlIGNhc2UsIHRoZXkgYW5zd2VyZWQgdGhhdCwgYXMgcmVnYXJkZWQgaGlzIHRyaWFsLCB0aGV5IHRob3VnaHQgdGhleSBjb3VsZCBiZSBvZiBubyBoZWxwIHRvIGhpbTsgYnV0IGlmIGhlIHdlcmUgcHVuaXNoZWQgd2l0aCBhIGZpbmUsIHRoZXkgd291bGQgaGVscCBoaW0gcGF5IGl0LiBUaGlzIGhlIGNvdWxkIG5vdCBlbmR1cmUsIGFuZCBpbiBoaXMgd3JhdGggZGV0ZXJtaW5lZCB0byBkZXBhcnQgdGhlIGNpdHkgYW5kIGdvIGludG8gZXhpbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBoZSBoYWQga2lzc2VkIGhpcyB3aWZlIGFuZCBzb24gZ29vZC1ieWUsIGhlIHdlbnQgZnJvbSBoaXMgaG91c2UgaW4gc2lsZW5jZSBhcyBmYXIgYXMgdGhlIGdhdGUgb2YgdGhlIGNpdHkuIFRoZXJlIGhlIHN0b3BwZWQsIHR1cm5lZCBoaW1zZWxmIGFib3V0LCBhbmQgc3RyZXRjaGluZyBoaXMgaGFuZHMgb3V0IHRvd2FyZHMgdGhlIENhcGl0b2wsIHByYXllZCB0aGUgZ29kcyB0aGF0LCBpZiB3aXRoIG5vIGp1c3RpY2UsIGJ1dCB0aHJvdWdoIHRoZSB3YW50b25uZXNzIG9mIHRoZSBwZW9wbGUgYW5kIHRoZSBhYnVzZSBvZiB0aGUgZW52aW91cyBoZSB3YXMgbm93IGJlaW5nIGRyaXZlbiBmcm9tIGhpcyBjb3VudHJ5LCB0aGUgUm9tYW5zIG1pZ2h0IHNwZWVkaWx5IHJlcGVudCwgYW5kIHNob3cgdG8gYWxsIG1lbiB0aGF0IHRoZXkgbmVlZGVkIGFuZCBsb25nZWQgZm9yIENhbWlsbHVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgdGh1cywgbGlrZSBBY2hpbGxlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDEuNDA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4gaS4gNDA3LTQxMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW52b2tlZCBjdXJzZXMgdXBvbiBoaXMgZmVsbG93IGNpdGl6ZW5zLCBoZSByZW1vdmVkIGZyb20gb3V0IHRoZSBjaXR5LiBIaXMgY2FzZSB3ZW50IGJ5IGRlZmF1bHQsIGFuZCBoZSB3YXMgZmluZWQgZmlmdGVlbiB0aG91c2FuZCBhc3Nlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGUgaGFkIHRodXMsIGxpa2UgQWNoaWxsZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMS40MDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+IGkuIDQwNy00MTIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGludm9rZWQgY3Vyc2VzIHVwb24gaGlzIGZlbGxvdyBjaXRpemVucywgaGUgcmVtb3ZlZCBmcm9tIG91dCB0aGUgY2l0eS4gSGlzIGNhc2Ugd2VudCBieSBkZWZhdWx0LCBhbmQgaGUgd2FzIGZpbmVkIGZpZnRlZW4gdGhvdXNhbmQgYXNzZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDEuNDA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiBpLiA0MDctNDEyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiBpLiA0MDctNDEyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpcyBzdW0sIHJlZHVjZWQgdG8gb3VyIG1vbmV5LCBpcyBmaWZ0ZWVuIGh1bmRyZWQgZHJhY2htYXMuIEZvciB0aGUgYXMgd2FzIHRoZSBjdXJyZW50IGNvcHBlciBjb2luLCBhbmQgdGhlIHNpbHZlciBjb2luIHdvcnRoIHRlbiBvZiB0aGVzZSBwaWVjZXMgd2FzIGZvciB0aGF0IHJlYXNvbiBjYWxsZWQgdGhlIGRlbmFyaXVzLCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkcmFjaG1hLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSBpcyBubyBSb21hbiB3aG8gZG9lcyBub3QgYmVsaWV2ZSB0aGF0IGp1c3RpY2UgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZSBpbXByZWNhdGlvbnMgb2YgQ2FtaWxsdXMsIGFuZCB0aGF0IGhlIHJlY2VpdmVkIGEgcmVxdWl0YWwgZm9yIGhpcyB3cm9uZ3Mgd2hpY2ggd2FzIG5vdCBwbGVhc2luZyB0byBoaW0sIGJ1dCBwYWluZnVsOyBjZXJ0YWlubHkgaXQgd2FzIG5vdGFibGUgYW5kIGZhbW91cy4gRm9yIGEgZ3JlYXQgcmV0cmlidXRpb24gZW5jb21wYXNzZWQgUm9tZSwgYW5kIGEgc2Vhc29uIG9mIGRpcmUgZGVzdHJ1Y3Rpb24gYW5kIHBlcmlsIG5vdCB1bm1peGVkIHdpdGggZGlzZ3JhY2UgYXNzYWlsZWQgdGhlIGNpdHksIHdoZXRoZXIgZm9ydHVuZSBzbyBicm91Z2h0IHRoaW5ncyB0byBwYXNzLCBvciB3aGV0aGVyIGl0IGlzIHRoZSBtaXNzaW9uIG9mIHNvbWUgZ29kIG5vdCB0byBuZWdsZWN0IHZpcnR1ZSB0aGF0IGdvZXMgdW5yZXF1aXRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSBpcyBubyBSb21hbiB3aG8gZG9lcyBub3QgYmVsaWV2ZSB0aGF0IGp1c3RpY2UgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZSBpbXByZWNhdGlvbnMgb2YgQ2FtaWxsdXMsIGFuZCB0aGF0IGhlIHJlY2VpdmVkIGEgcmVxdWl0YWwgZm9yIGhpcyB3cm9uZ3Mgd2hpY2ggd2FzIG5vdCBwbGVhc2luZyB0byBoaW0sIGJ1dCBwYWluZnVsOyBjZXJ0YWlubHkgaXQgd2FzIG5vdGFibGUgYW5kIGZhbW91cy4gRm9yIGEgZ3JlYXQgcmV0cmlidXRpb24gZW5jb21wYXNzZWQgUm9tZSwgYW5kIGEgc2Vhc29uIG9mIGRpcmUgZGVzdHJ1Y3Rpb24gYW5kIHBlcmlsIG5vdCB1bm1peGVkIHdpdGggZGlzZ3JhY2UgYXNzYWlsZWQgdGhlIGNpdHksIHdoZXRoZXIgZm9ydHVuZSBzbyBicm91Z2h0IHRoaW5ncyB0byBwYXNzLCBvciB3aGV0aGVyIGl0IGlzIHRoZSBtaXNzaW9uIG9mIHNvbWUgZ29kIG5vdCB0byBuZWdsZWN0IHZpcnR1ZSB0aGF0IGdvZXMgdW5yZXF1aXRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCB0aGVuLCBpdCBzZWVtZWQgdG8gYmUgYSBzaWduIG9mIGdyZWF0IGV2aWwgaW1wZW5kaW5nIHdoZW4gSnVsaXVzIHRoZSBjZW5zb3IgZGllZC4gRm9yIHRoZSBSb21hbnMgc3BlY2lhbGx5IHJldmVyZSBhbmQgaG9sZCBzYWNyZWQgdGhlIG9mZmljZSBvZiBjZW5zb3IuIEluIHRoZSBzZWNvbmQgcGxhY2UsIGJlZm9yZSBDYW1pbGx1cyB3ZW50IGludG8gZXhpbGUsIGEgbWFuIHdobyB3YXMgbm90IGNvbnNwaWN1b3VzLCB0byBiZSBzdXJlLCBidXQgd2hvIHdhcyBlc3RlZW1lZCBob25lc3QgYW5kIGtpbmRseSwgTWFyY3VzIENhZWRpY2l1cywgaW5mb3JtZWQgdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIG9mIGEgbWF0dGVyIHdlbGwgd29ydGggdGhlaXIgYXR0ZW50aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzYWlkIHRoYXQgZHVyaW5nIHRoZSBuaWdodCBqdXN0IHBhc3NlZCwgYXMgaGUgd2FzIGdvaW5nIGFsb25nIHRoZSBzby1jYWxsZWQgTmV3IFN0cmVldCwgaGUgd2FzIGhhaWxlZCBieSBzb21lb25lIGluIGNsZWFyIHRvbmVzLCBhbmQgdHVybmVkLCBhbmQgc2F3IG5vIG1hbiwgYnV0IGhlYXJkIGEgdm9pY2UgbG91ZGVyIHRoYW4gbWFuJ3Mgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhhcmsgdGhvdSEgTWFyY3VzIENhZWRpY2l1cywgZWFybHkgaW4gdGhlIG1vcm5pbmcgZ28gYW5kIHRlbGwgdGhlIG1hZ2lzdHJhdGVzIHRoYXQgd2l0aGluIGEgbGl0dGxlIHRpbWUgdGhleSBtdXN0IGV4cGVjdCB0aGUgR2F1bHMuPC9xPiBBdCB0aGlzIHN0b3J5IHRoZSB0cmlidW5lcyBtb2NrZWQgYW5kIGplc3RlZC4gQW5kIGEgbGl0dGxlIHdoaWxlIGFmdGVyLCBDYW1pbGx1cyBzdWZmZXJlZCBoaXMgZGlzZ3JhY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCB0aGVuLCBpdCBzZWVtZWQgdG8gYmUgYSBzaWduIG9mIGdyZWF0IGV2aWwgaW1wZW5kaW5nIHdoZW4gSnVsaXVzIHRoZSBjZW5zb3IgZGllZC4gRm9yIHRoZSBSb21hbnMgc3BlY2lhbGx5IHJldmVyZSBhbmQgaG9sZCBzYWNyZWQgdGhlIG9mZmljZSBvZiBjZW5zb3IuIEluIHRoZSBzZWNvbmQgcGxhY2UsIGJlZm9yZSBDYW1pbGx1cyB3ZW50IGludG8gZXhpbGUsIGEgbWFuIHdobyB3YXMgbm90IGNvbnNwaWN1b3VzLCB0byBiZSBzdXJlLCBidXQgd2hvIHdhcyBlc3RlZW1lZCBob25lc3QgYW5kIGtpbmRseSwgTWFyY3VzIENhZWRpY2l1cywgaW5mb3JtZWQgdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIG9mIGEgbWF0dGVyIHdlbGwgd29ydGggdGhlaXIgYXR0ZW50aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNhaWQgdGhhdCBkdXJpbmcgdGhlIG5pZ2h0IGp1c3QgcGFzc2VkLCBhcyBoZSB3YXMgZ29pbmcgYWxvbmcgdGhlIHNvLWNhbGxlZCBOZXcgU3RyZWV0LCBoZSB3YXMgaGFpbGVkIGJ5IHNvbWVvbmUgaW4gY2xlYXIgdG9uZXMsIGFuZCB0dXJuZWQsIGFuZCBzYXcgbm8gbWFuLCBidXQgaGVhcmQgYSB2b2ljZSBsb3VkZXIgdGhhbiBtYW4ncyBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IYXJrIHRob3UhIE1hcmN1cyBDYWVkaWNpdXMsIGVhcmx5IGluIHRoZSBtb3JuaW5nIGdvIGFuZCB0ZWxsIHRoZSBtYWdpc3RyYXRlcyB0aGF0IHdpdGhpbiBhIGxpdHRsZSB0aW1lIHRoZXkgbXVzdCBleHBlY3QgdGhlIEdhdWxzLjwvcT4gQXQgdGhpcyBzdG9yeSB0aGUgdHJpYnVuZXMgbW9ja2VkIGFuZCBqZXN0ZWQuIEFuZCBhIGxpdHRsZSB3aGlsZSBhZnRlciwgQ2FtaWxsdXMgc3VmZmVyZWQgaGlzIGRpc2dyYWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR2F1bHMgd2VyZSBvZiB0aGUgQ2VsdGljIHN0b2NrLCBhbmQgdGhlaXIgbnVtYmVycyB3ZXJlIHN1Y2gsIGFzIGl0IGlzIHNhaWQsIHRoYXQgdGhleSBhYmFuZG9uZWQgdGhlaXIgb3duIGNvdW50cnksIHdoaWNoIHdhcyBub3QgYWJsZSB0byBzdXN0YWluIHRoZW0gYWxsLCBhbmQgc2V0IG91dCBpbiBxdWVzdCBvZiBhbm90aGVyLiBUaGV5IHdlcmUgbWFueSBteXJpYWRzIG9mIHlvdW5nIHdhcnJpb3JzLCBhbmQgdGhleSB0b29rIGFsb25nIHdpdGggdGhlbSBhIHN0aWxsIGdyZWF0ZXIgbnVtYmVyIG9mIHdvbWVuIGFuZCBjaGlsZHJlbi4gU29tZSBvZiB0aGVtIGNyb3NzZWQgdGhlIFJoaXBhZWFuIG1vdW50YWlucywgc3RyZWFtZWQgb2ZmIHRvd2FyZHMgdGhlIG5vcnRoZXJuIG9jZWFuLCBhbmQgb2NjdXBpZWQgdGhlIHJlbW90ZXN0IHBhcnRzIG9mIEV1cm9wZTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+b3RoZXJzIHNldHRsZWQgYmV0d2VlbiB0aGUgUHlyZW5lZXMgYW5kIHRoZSBBbHBzLCBuZWFyIHRoZSBTZW5vbmVzIGFuZCB0aGUgQ2VsdG9yaWFucywgYW5kIGR3ZWx0IHRoZXJlIGEgbG9uZyB0aW1lLiBCdXQgYXQgbGFzdCB0aGV5IGdvdCBhIHRhc3RlIG9mIHdpbmUsIHdoaWNoIHdhcyB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSBicm91Z2h0IHRvIHRoZW0gZnJvbSBJdGFseS4gVGhleSBhZG1pcmVkIHRoZSBkcmluayBzbyBtdWNoLCBhbmQgd2VyZSBhbGwgc28gYmVzaWRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgbm92ZWwgcGxlYXN1cmUgd2hpY2ggaXQgZ2F2ZSwgdGhhdCB0aGV5IHNlaXplZCB0aGVpciBhcm1zLCB0b29rIGFsb25nIHRoZWlyIGZhbWlsaWVzLCBhbmQgbWFkZSBvZmYgdG8gdGhlIEFscHMsIGluIHF1ZXN0IG9mIHRoZSBsYW5kIHdoaWNoIHByb2R1Y2VkIHN1Y2ggZnJ1aXQsIGNvbnNpZGVyaW5nIHRoZSByZXN0IG9mIHRoZSB3b3JsZCBiYXJyZW4gYW5kIHdpbGQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEdhdWxzIHdlcmUgb2YgdGhlIENlbHRpYyBzdG9jaywgYW5kIHRoZWlyIG51bWJlcnMgd2VyZSBzdWNoLCBhcyBpdCBpcyBzYWlkLCB0aGF0IHRoZXkgYWJhbmRvbmVkIHRoZWlyIG93biBjb3VudHJ5LCB3aGljaCB3YXMgbm90IGFibGUgdG8gc3VzdGFpbiB0aGVtIGFsbCwgYW5kIHNldCBvdXQgaW4gcXVlc3Qgb2YgYW5vdGhlci4gVGhleSB3ZXJlIG1hbnkgbXlyaWFkcyBvZiB5b3VuZyB3YXJyaW9ycywgYW5kIHRoZXkgdG9vayBhbG9uZyB3aXRoIHRoZW0gYSBzdGlsbCBncmVhdGVyIG51bWJlciBvZiB3b21lbiBhbmQgY2hpbGRyZW4uIFNvbWUgb2YgdGhlbSBjcm9zc2VkIHRoZSBSaGlwYWVhbiBtb3VudGFpbnMsIHN0cmVhbWVkIG9mZiB0b3dhcmRzIHRoZSBub3J0aGVybiBvY2VhbiwgYW5kIG9jY3VwaWVkIHRoZSByZW1vdGVzdCBwYXJ0cyBvZiBFdXJvcGU7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm90aGVycyBzZXR0bGVkIGJldHdlZW4gdGhlIFB5cmVuZWVzIGFuZCB0aGUgQWxwcywgbmVhciB0aGUgU2Vub25lcyBhbmQgdGhlIENlbHRvcmlhbnMsIGFuZCBkd2VsdCB0aGVyZSBhIGxvbmcgdGltZS4gQnV0IGF0IGxhc3QgdGhleSBnb3QgYSB0YXN0ZSBvZiB3aW5lLCB3aGljaCB3YXMgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUgYnJvdWdodCB0byB0aGVtIGZyb20gSXRhbHkuIFRoZXkgYWRtaXJlZCB0aGUgZHJpbmsgc28gbXVjaCwgYW5kIHdlcmUgYWxsIHNvIGJlc2lkZSB0aGVtc2VsdmVzIHdpdGggdGhlIG5vdmVsIHBsZWFzdXJlIHdoaWNoIGl0IGdhdmUsIHRoYXQgdGhleSBzZWl6ZWQgdGhlaXIgYXJtcywgdG9vayBhbG9uZyB0aGVpciBmYW1pbGllcywgYW5kIG1hZGUgb2ZmIHRvIHRoZSBBbHBzLCBpbiBxdWVzdCBvZiB0aGUgbGFuZCB3aGljaCBwcm9kdWNlZCBzdWNoIGZydWl0LCBjb25zaWRlcmluZyB0aGUgcmVzdCBvZiB0aGUgd29ybGQgYmFycmVuIGFuZCB3aWxkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFuIHdobyBpbnRyb2R1Y2VkIHdpbmUgdG8gdGhlbSwgYW5kIHdhcyBmaXJzdCBhbmQgZm9yZW1vc3QgaW4gc2hhcnBlbmluZyB0aGVpciBhcHBldGl0ZSBmb3IgSXRhbHksIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIEFycm9uLCBhIFR1c2Nhbi4gSGUgd2FzIGEgbWFuIG9mIHByb21pbmVuY2UsIGFuZCBieSBuYXR1cmUgbm90IHByb25lIHRvIGV2aWwsIGJ1dCBoYWQgbWV0IHdpdGggdGhlIGZvbGxvd2luZyBtaXNmb3J0dW5lLiBIZSB3YXMgZ3VhcmRpYW4gb2YgYW4gb3JwaGFuIGJveSB3aG8gd2FzIGhlaXIgdG8gdGhlIGdyZWF0ZXN0IHdlYWx0aCBpbiB0aGUgY2l0eSwgYW5kIG9mIGFtYXppbmcgYmVhdXR5LCBMdWN1bW8gYnkgbmFtZS4gVGhpcyBMdWN1bW8gZnJvbSBoaXMgeW91dGggdXAgaGFkIGxpdmVkIHdpdGggQXJyb24sIGFuZCB3aGVuIGhlIGNhbWUgdG8gbWFuJ3MgZXN0YXRlLCBkaWQgbm90IGxlYXZlIGhpcyBob3VzZSwgYnV0IHByZXRlbmRlZCB0byB0YWtlIGRlbGlnaHQgaW4gaGlzIHNvY2lldHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBob3dldmVyLCBjb3JydXB0ZWQgQXJyb24ncyB3aWZlLCBhbmQgYmVlbiBjb3JydXB0ZWQgYnkgaGVyLCBhbmQgZm9yIGEgbG9uZyB0aW1lIGtlcHQgdGhlIHRoaW5nIGEgc2VjcmV0LiBCdXQgYXQgbGFzdCB0aGUgcGFzc2lvbnMgb2YgYm90aCBjdWxwcml0cyBpbmNyZWFzZWQgdXBvbiB0aGVtIHNvIHRoYXQgdGhleSBjb3VsZCBuZWl0aGVyIHB1dCBhd2F5IHRoZWlyIGRlc2lyZXMgbm9yIGxvbmdlciBoaWRlIHRoZW0sIHdoZXJlZm9yZSB0aGUgeW91bmcgbWFuIG1hZGUgb3BlbiBhdHRlbXB0IHRvIHJlbW92ZSB0aGUgd29tYW4gYW5kIGhhdmUgaGVyIHRvIHdpZmUuIEhlciBodXNiYW5kIGJyb3VnaHQgdGhlIGNhc2UgdG8gdHJpYWwsIGJ1dCB3YXMgZGVmZWF0ZWQgYnkgTHVjdW1vLCBvd2luZyB0byB0aGUgbXVsdGl0dWRlIG9mIGhpcyBmcmllbmRzIGFuZCBoaXMgbGF2aXNoIG91dGxheXMgb2YgbW9uZXksIGFuZCBmb3Jzb29rIHRoZSBjaXR5LiBMZWFybmluZyBhYm91dCB0aGUgR2F1bHMsIGhlIGJldG9vayBoaW1zZWxmIHRvIHRoZW0sIGFuZCBsZWQgdGhlbSBvbiB0aGVpciBleHBlZGl0aW9uIGludG8gSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gd2hvIGludHJvZHVjZWQgd2luZSB0byB0aGVtLCBhbmQgd2FzIGZpcnN0IGFuZCBmb3JlbW9zdCBpbiBzaGFycGVuaW5nIHRoZWlyIGFwcGV0aXRlIGZvciBJdGFseSwgaXMgc2FpZCB0byBoYXZlIGJlZW4gQXJyb24sIGEgVHVzY2FuLiBIZSB3YXMgYSBtYW4gb2YgcHJvbWluZW5jZSwgYW5kIGJ5IG5hdHVyZSBub3QgcHJvbmUgdG8gZXZpbCwgYnV0IGhhZCBtZXQgd2l0aCB0aGUgZm9sbG93aW5nIG1pc2ZvcnR1bmUuIEhlIHdhcyBndWFyZGlhbiBvZiBhbiBvcnBoYW4gYm95IHdobyB3YXMgaGVpciB0byB0aGUgZ3JlYXRlc3Qgd2VhbHRoIGluIHRoZSBjaXR5LCBhbmQgb2YgYW1hemluZyBiZWF1dHksIEx1Y3VtbyBieSBuYW1lLiBUaGlzIEx1Y3VtbyBmcm9tIGhpcyB5b3V0aCB1cCBoYWQgbGl2ZWQgd2l0aCBBcnJvbiwgYW5kIHdoZW4gaGUgY2FtZSB0byBtYW4ncyBlc3RhdGUsIGRpZCBub3QgbGVhdmUgaGlzIGhvdXNlLCBidXQgcHJldGVuZGVkIHRvIHRha2UgZGVsaWdodCBpbiBoaXMgc29jaWV0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBob3dldmVyLCBjb3JydXB0ZWQgQXJyb24ncyB3aWZlLCBhbmQgYmVlbiBjb3JydXB0ZWQgYnkgaGVyLCBhbmQgZm9yIGEgbG9uZyB0aW1lIGtlcHQgdGhlIHRoaW5nIGEgc2VjcmV0LiBCdXQgYXQgbGFzdCB0aGUgcGFzc2lvbnMgb2YgYm90aCBjdWxwcml0cyBpbmNyZWFzZWQgdXBvbiB0aGVtIHNvIHRoYXQgdGhleSBjb3VsZCBuZWl0aGVyIHB1dCBhd2F5IHRoZWlyIGRlc2lyZXMgbm9yIGxvbmdlciBoaWRlIHRoZW0sIHdoZXJlZm9yZSB0aGUgeW91bmcgbWFuIG1hZGUgb3BlbiBhdHRlbXB0IHRvIHJlbW92ZSB0aGUgd29tYW4gYW5kIGhhdmUgaGVyIHRvIHdpZmUuIEhlciBodXNiYW5kIGJyb3VnaHQgdGhlIGNhc2UgdG8gdHJpYWwsIGJ1dCB3YXMgZGVmZWF0ZWQgYnkgTHVjdW1vLCBvd2luZyB0byB0aGUgbXVsdGl0dWRlIG9mIGhpcyBmcmllbmRzIGFuZCBoaXMgbGF2aXNoIG91dGxheXMgb2YgbW9uZXksIGFuZCBmb3Jzb29rIHRoZSBjaXR5LiBMZWFybmluZyBhYm91dCB0aGUgR2F1bHMsIGhlIGJldG9vayBoaW1zZWxmIHRvIHRoZW0sIGFuZCBsZWQgdGhlbSBvbiB0aGVpciBleHBlZGl0aW9uIGludG8gSXRhbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYXVscyBidXJzdCBpbiBhbmQgc3RyYWlnaHR3YXkgbWFzdGVyZWQgYWxsIHRoZSBjb3VudHJ5IHdoaWNoIHRoZSBUdXNjYW5zIG9jY3VwaWVkIG9mIG9sZCwgbmFtZWx5LCB0aGF0IHN0cmV0Y2hpbmcgZnJvbSB0aGUgQWxwcyBkb3duIHRvIGJvdGggc2VhcywgdGhlIG5hbWVzIG9mIHdoaWNoIGJlYXIgd2l0bmVzcyB0byB0aGUgc3RvcnkuIEZvciB0aGUgbm9ydGhlcm4gc2VhIGlzIGNhbGxlZCBBZHJpYSwgZnJvbSB0aGUgVHVzY2FuIGNpdHkgb2YgQWRyaWE7IHRoZSBzb3V0aGVybiBpcyBjYWxsZWQgb3V0cmlnaHQgdGhlIFR1c2NhbiBTZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2hvbGUgY291bnRyeSBpcyBzdHVkZGVkIHdpdGggdHJlZXMsIGhhcyBleGNlbGxlbnQgcGFzdHVyYWdlIGZvciBmbG9ja3MgYW5kIGhlcmRzLCBhbmQgYW4gYWJ1bmRhbmNlIG9mIHJpdmVycy4gSXQgaGFkIGFsc28gZWlnaHRlZW4gY2l0aWVzLCBsYXJnZSBhbmQgZmFpciwgd2VsbCBlcXVpcHBlZCBmb3IgcHJvZml0YWJsZSBjb21tZXJjZSBhbmQgZm9yIHN1bXB0dW91cyBsaXZpbmcuIFRoZXNlIHRoZSBHYXVscyB0b29rIGF3YXkgZnJvbSB0aGUgVHVzY2FucyBhbmQgb2NjdXBpZWQgdGhlbXNlbHZlcy4gQnV0IHRoaXMgaGFwcGVuZWQgbG9uZyBiZWZvcmUgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEdhdWxzIGJ1cnN0IGluIGFuZCBzdHJhaWdodHdheSBtYXN0ZXJlZCBhbGwgdGhlIGNvdW50cnkgd2hpY2ggdGhlIFR1c2NhbnMgb2NjdXBpZWQgb2Ygb2xkLCBuYW1lbHksIHRoYXQgc3RyZXRjaGluZyBmcm9tIHRoZSBBbHBzIGRvd24gdG8gYm90aCBzZWFzLCB0aGUgbmFtZXMgb2Ygd2hpY2ggYmVhciB3aXRuZXNzIHRvIHRoZSBzdG9yeS4gRm9yIHRoZSBub3J0aGVybiBzZWEgaXMgY2FsbGVkIEFkcmlhLCBmcm9tIHRoZSBUdXNjYW4gY2l0eSBvZiBBZHJpYTsgdGhlIHNvdXRoZXJuIGlzIGNhbGxlZCBvdXRyaWdodCB0aGUgVHVzY2FuIFNlYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2hvbGUgY291bnRyeSBpcyBzdHVkZGVkIHdpdGggdHJlZXMsIGhhcyBleGNlbGxlbnQgcGFzdHVyYWdlIGZvciBmbG9ja3MgYW5kIGhlcmRzLCBhbmQgYW4gYWJ1bmRhbmNlIG9mIHJpdmVycy4gSXQgaGFkIGFsc28gZWlnaHRlZW4gY2l0aWVzLCBsYXJnZSBhbmQgZmFpciwgd2VsbCBlcXVpcHBlZCBmb3IgcHJvZml0YWJsZSBjb21tZXJjZSBhbmQgZm9yIHN1bXB0dW91cyBsaXZpbmcuIFRoZXNlIHRoZSBHYXVscyB0b29rIGF3YXkgZnJvbSB0aGUgVHVzY2FucyBhbmQgb2NjdXBpZWQgdGhlbXNlbHZlcy4gQnV0IHRoaXMgaGFwcGVuZWQgbG9uZyBiZWZvcmUgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhay4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIHRoZSBHYXVscyBoYWQgbWFyY2hlZCBhZ2FpbnN0IHRoZSBUdXNjYW4gY2l0eSBvZiBDbHVzaXVtIGFuZCB3ZXJlIGxheWluZyBzaWVnZSB0byBpdC4gVGhlIENsdXNpYW5zIGFwcGxpZWQgZm9yIGFzc2lzdGFuY2UgdG8gdGhlIFJvbWFucywgYW5kIGJlZ2dlZCB0aGVtIHRvIHNlbmQgYW1iYXNzYWRvcnMgaW4gdGhlaXIgYmVoYWxmIHdpdGggYSBsZXR0ZXIgdG8gdGhlIEJhcmJhcmlhbnMuIFNvIHRoZXJlIHdlcmUgc2VudCB0aHJlZSBtZW4gb2YgdGhlIEZhYmlhbiBnZW5zIHdobyB3ZXJlIG9mIGdyZWF0IHJlcHV0ZSBhbmQgaG9ub3VyIGluIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR2F1bHMgcmVjZWl2ZWQgdGhlbSBjb3VydGVvdXNseSwgYmVjYXVzZSBvZiB0aGUgbmFtZSBvZiBSb21lLCBjZWFzZWQgdGhlaXIgYXR0YWNrcyB1cG9uIHRoZSBjaXR5IHdhbGxzLCBhbmQgaGVsZCBjb25mZXJlbmNlIHdpdGggdGhlbS4gV2hlbiB0aGV5IHdlcmUgYXNrZWQgd2hhdCB3cm9uZyB0aGV5IGhhZCBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgdGhlIENsdXNpYW5zIHRoYXQgdGhleSBoYWQgY29tZSB1cCBhZ2FpbnN0IHRoZWlyIGNpdHksIEJyZW5udXMsIHRoZSBraW5nIG9mIHRoZSBHYXVscywgYnVyc3QgaW50byBhIGxhdWdoIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBDbHVzaWFucyB3cm9uZyB1cyBpbiB0aGF0LCBiZWluZyBhYmxlIHRvIHRpbGwgb25seSBhIHNtYWxsIHBhcmNlbCBvZiBlYXJ0aCwgdGhleSB5ZXQgYXJlIGJlbnQgb24gaG9sZGluZyBhIGxhcmdlIG9uZSwgYW5kIHdpbGwgbm90IHNoYXJlIGl0IHdpdGggdXMsIHdobyBhcmUgc3RyYW5nZXJzLCBtYW55IGluIG51bWJlciBhbmQgcG9vci4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHdyb25nIHdoaWNoIHllIHRvbyBzdWZmZXJlZCwgTyBSb21hbnMsIGZvcm1lcmx5IGF0IHRoZSBoYW5kcyBvZiB0aGUgQWxiYW5zLCBGaWRlbmF0ZXMsIGFuZCBBcmRlYXRlcywgYW5kIG5vdyBsYXRlbHkgYXQgdGhlIGhhbmRzIG9mIHRoZSBWZWllbnRpbmVzLCBDYXBlbmF0ZXMsIGFuZCBtYW55IG9mIHRoZSBGYWxpc2NhbnMgYW5kIFZvbHNjaWFucy4gWWUgbWFyY2ggYWdhaW5zdCB0aGVzZSBwZW9wbGVzLCBhbmQgaWYgdGhleSB3aWxsIG5vdCBzaGFyZSB0aGVpciBnb29kcyB3aXRoIHlvdSwgeWUgZW5zbGF2ZSB0aGVtLCBkZXNwb2lsIHRoZW0sIGFuZCByYXplIHRoZWlyIGNpdGllcyB0byB0aGUgZ3JvdW5kOyBub3QgdGhhdCBpbiBzbyBkb2luZyB5ZSBhcmUgaW4gYW55IHdpc2UgY3J1ZWwgb3IgdW5qdXN0LCAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+bmF5LCB5ZSBhcmUgYnV0IG9iZXlpbmcgdGhhdCBtb3N0IGFuY2llbnQgb2YgYWxsIGxhd3Mgd2hpY2ggZ2l2ZXMgdG8gdGhlIHN0cm9uZ2VyIHRoZSBnb29kcyBvZiBoaXMgd2Vha2VyIG5laWdoYm91cnMsIHRoZSB3b3JsZCBvdmVyLCBiZWdpbm5pbmcgd2l0aCBHb2QgaGltc2VsZiBhbmQgZW5kaW5nIHdpdGggdGhlIGJlYXN0cyB0aGF0IHBlcmlzaC4gRm9yIHRoZXNlIHRvbyBhcmUgc28gZW5kb3dlZCBieSBuYXR1cmUgdGhhdCB0aGUgc3Ryb25nZXIgc2Vla3MgdG8gaGF2ZSBtb3JlIHRoYW4gdGhlIHdlYWtlci4gQ2Vhc2UgeWUsIHRoZXJlZm9yZSwgdG8gcGl0eSB0aGUgQ2x1c2lhbnMgd2hlbiB3ZSBiZXNpZWdlIHRoZW0sIHRoYXQgeWUgbWF5IG5vdCB0ZWFjaCB0aGUgR2F1bHMgdG8gYmUga2luZCBhbmQgZnVsbCBvZiBwaXR5IHRvd2FyZHMgdGhvc2Ugd2hvIGFyZSB3cm9uZ2VkIGJ5IHRoZSBSb21hbnMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIHRoZSBHYXVscyBoYWQgbWFyY2hlZCBhZ2FpbnN0IHRoZSBUdXNjYW4gY2l0eSBvZiBDbHVzaXVtIGFuZCB3ZXJlIGxheWluZyBzaWVnZSB0byBpdC4gVGhlIENsdXNpYW5zIGFwcGxpZWQgZm9yIGFzc2lzdGFuY2UgdG8gdGhlIFJvbWFucywgYW5kIGJlZ2dlZCB0aGVtIHRvIHNlbmQgYW1iYXNzYWRvcnMgaW4gdGhlaXIgYmVoYWxmIHdpdGggYSBsZXR0ZXIgdG8gdGhlIEJhcmJhcmlhbnMuIFNvIHRoZXJlIHdlcmUgc2VudCB0aHJlZSBtZW4gb2YgdGhlIEZhYmlhbiBnZW5zIHdobyB3ZXJlIG9mIGdyZWF0IHJlcHV0ZSBhbmQgaG9ub3VyIGluIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYXVscyByZWNlaXZlZCB0aGVtIGNvdXJ0ZW91c2x5LCBiZWNhdXNlIG9mIHRoZSBuYW1lIG9mIFJvbWUsIGNlYXNlZCB0aGVpciBhdHRhY2tzIHVwb24gdGhlIGNpdHkgd2FsbHMsIGFuZCBoZWxkIGNvbmZlcmVuY2Ugd2l0aCB0aGVtLiBXaGVuIHRoZXkgd2VyZSBhc2tlZCB3aGF0IHdyb25nIHRoZXkgaGFkIHN1ZmZlcmVkIGF0IHRoZSBoYW5kcyBvZiB0aGUgQ2x1c2lhbnMgdGhhdCB0aGV5IGhhZCBjb21lIHVwIGFnYWluc3QgdGhlaXIgY2l0eSwgQnJlbm51cywgdGhlIGtpbmcgb2YgdGhlIEdhdWxzLCBidXJzdCBpbnRvIGEgbGF1Z2ggYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgQ2x1c2lhbnMgd3JvbmcgdXMgaW4gdGhhdCwgYmVpbmcgYWJsZSB0byB0aWxsIG9ubHkgYSBzbWFsbCBwYXJjZWwgb2YgZWFydGgsIHRoZXkgeWV0IGFyZSBiZW50IG9uIGhvbGRpbmcgYSBsYXJnZSBvbmUsIGFuZCB3aWxsIG5vdCBzaGFyZSBpdCB3aXRoIHVzLCB3aG8gYXJlIHN0cmFuZ2VycywgbWFueSBpbiBudW1iZXIgYW5kIHBvb3IuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHdyb25nIHdoaWNoIHllIHRvbyBzdWZmZXJlZCwgTyBSb21hbnMsIGZvcm1lcmx5IGF0IHRoZSBoYW5kcyBvZiB0aGUgQWxiYW5zLCBGaWRlbmF0ZXMsIGFuZCBBcmRlYXRlcywgYW5kIG5vdyBsYXRlbHkgYXQgdGhlIGhhbmRzIG9mIHRoZSBWZWllbnRpbmVzLCBDYXBlbmF0ZXMsIGFuZCBtYW55IG9mIHRoZSBGYWxpc2NhbnMgYW5kIFZvbHNjaWFucy4gWWUgbWFyY2ggYWdhaW5zdCB0aGVzZSBwZW9wbGVzLCBhbmQgaWYgdGhleSB3aWxsIG5vdCBzaGFyZSB0aGVpciBnb29kcyB3aXRoIHlvdSwgeWUgZW5zbGF2ZSB0aGVtLCBkZXNwb2lsIHRoZW0sIGFuZCByYXplIHRoZWlyIGNpdGllcyB0byB0aGUgZ3JvdW5kOyBub3QgdGhhdCBpbiBzbyBkb2luZyB5ZSBhcmUgaW4gYW55IHdpc2UgY3J1ZWwgb3IgdW5qdXN0LCAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+bmF5LCB5ZSBhcmUgYnV0IG9iZXlpbmcgdGhhdCBtb3N0IGFuY2llbnQgb2YgYWxsIGxhd3Mgd2hpY2ggZ2l2ZXMgdG8gdGhlIHN0cm9uZ2VyIHRoZSBnb29kcyBvZiBoaXMgd2Vha2VyIG5laWdoYm91cnMsIHRoZSB3b3JsZCBvdmVyLCBiZWdpbm5pbmcgd2l0aCBHb2QgaGltc2VsZiBhbmQgZW5kaW5nIHdpdGggdGhlIGJlYXN0cyB0aGF0IHBlcmlzaC4gRm9yIHRoZXNlIHRvbyBhcmUgc28gZW5kb3dlZCBieSBuYXR1cmUgdGhhdCB0aGUgc3Ryb25nZXIgc2Vla3MgdG8gaGF2ZSBtb3JlIHRoYW4gdGhlIHdlYWtlci4gQ2Vhc2UgeWUsIHRoZXJlZm9yZSwgdG8gcGl0eSB0aGUgQ2x1c2lhbnMgd2hlbiB3ZSBiZXNpZWdlIHRoZW0sIHRoYXQgeWUgbWF5IG5vdCB0ZWFjaCB0aGUgR2F1bHMgdG8gYmUga2luZCBhbmQgZnVsbCBvZiBwaXR5IHRvd2FyZHMgdGhvc2Ugd2hvIGFyZSB3cm9uZ2VkIGJ5IHRoZSBSb21hbnMuPC9xPgoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHdyb25nIHdoaWNoIHllIHRvbyBzdWZmZXJlZCwgTyBSb21hbnMsIGZvcm1lcmx5IGF0IHRoZSBoYW5kcyBvZiB0aGUgQWxiYW5zLCBGaWRlbmF0ZXMsIGFuZCBBcmRlYXRlcywgYW5kIG5vdyBsYXRlbHkgYXQgdGhlIGhhbmRzIG9mIHRoZSBWZWllbnRpbmVzLCBDYXBlbmF0ZXMsIGFuZCBtYW55IG9mIHRoZSBGYWxpc2NhbnMgYW5kIFZvbHNjaWFucy4gWWUgbWFyY2ggYWdhaW5zdCB0aGVzZSBwZW9wbGVzLCBhbmQgaWYgdGhleSB3aWxsIG5vdCBzaGFyZSB0aGVpciBnb29kcyB3aXRoIHlvdSwgeWUgZW5zbGF2ZSB0aGVtLCBkZXNwb2lsIHRoZW0sIGFuZCByYXplIHRoZWlyIGNpdGllcyB0byB0aGUgZ3JvdW5kOyBub3QgdGhhdCBpbiBzbyBkb2luZyB5ZSBhcmUgaW4gYW55IHdpc2UgY3J1ZWwgb3IgdW5qdXN0LCAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm5heSwgeWUgYXJlIGJ1dCBvYmV5aW5nIHRoYXQgbW9zdCBhbmNpZW50IG9mIGFsbCBsYXdzIHdoaWNoIGdpdmVzIHRvIHRoZSBzdHJvbmdlciB0aGUgZ29vZHMgb2YgaGlzIHdlYWtlciBuZWlnaGJvdXJzLCB0aGUgd29ybGQgb3ZlciwgYmVnaW5uaW5nIHdpdGggR29kIGhpbXNlbGYgYW5kIGVuZGluZyB3aXRoIHRoZSBiZWFzdHMgdGhhdCBwZXJpc2guIEZvciB0aGVzZSB0b28gYXJlIHNvIGVuZG93ZWQgYnkgbmF0dXJlIHRoYXQgdGhlIHN0cm9uZ2VyIHNlZWtzIHRvIGhhdmUgbW9yZSB0aGFuIHRoZSB3ZWFrZXIuIENlYXNlIHllLCB0aGVyZWZvcmUsIHRvIHBpdHkgdGhlIENsdXNpYW5zIHdoZW4gd2UgYmVzaWVnZSB0aGVtLCB0aGF0IHllIG1heSBub3QgdGVhY2ggdGhlIEdhdWxzIHRvIGJlIGtpbmQgYW5kIGZ1bGwgb2YgcGl0eSB0b3dhcmRzIHRob3NlIHdobyBhcmUgd3JvbmdlZCBieSB0aGUgUm9tYW5zLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBzcGVlY2ggdGhlIFJvbWFuIGVudm95cyBzYXcgdGhhdCB0aGVyZSB3YXMgbm8gY29taW5nIHRvIHRlcm1zIHdpdGggQnJlbm51cywgYW5kIHNvIHRoZXkgc2xpcHBlZCBpbnRvIENsdXNpdW0sIGFuZCBlbWJvbGRlbmVkIGFuZCBpbmNpdGVkIGl0cyBjaXRpemVucyB0byBzYWxseSBvdXQgYWdhaW5zdCB0aGUgQmFyYmFyaWFucyB3aXRoIHRoZW0sIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGRpc2NvdmVyIHRoZSBwcm93ZXNzIG9mIHRob3NlIHdhcnJpb3JzIG9yIHRvIGRpc3BsYXkgdGhlaXIgb3duIFRoZSBDbHVzaWFucyBtYWRlIGEgc2FsbHksIGFuZCBpbiB0aGUgZmlnaHQgd2hpY2ggcmFnZWQgYWxvbmcgdGhlIHdhbGxzIG9uZSBvZiB0aGUgRmFiaWksIFF1aW50dXMgQW1idXN0dXMsIGRyb3ZlIGhpcyBob3JzZSBzdHJhaWdodCBhdCBhIHN0YXRlbHkgYW5kIGhhbmRzb21lIEdhdWwgd2hvIHdhcyByaWRpbmcgZmFyIG91dCBpbiBmcm9udCBvZiB0aGUgcmVzdC4gQXQgZmlyc3QgaGUgd2FzIG5vdCByZWNvZ25pemVkLCBiZWNhdXNlIHRoZSBjb25mbGljdCBjYW1lIHN3aWZ0bHkgdG8gcGFzcyBhbmQgaGlzIGRhenpsaW5nIGFybW91ciBoaWQgaGlzIGZhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGhhZCBjb25xdWVyZWQgYW5kIHVuaG9yc2VkIGhpcyBmb2UgYW5kIHdhcyBzdHJpcHBpbmcgaGlzIGFybXMgZnJvbSBoaW0sIHRoZW4gQnJlbm51cyByZWNvZ25pemVkIGhpbSwgYW5kIGNhbGxlZCB1cG9uIHRoZSBnb2RzIHRvIHdpdG5lc3MgaG93LCBjb250cmFyeSB0byB0aGUgZ2VuZXJhbCBwcmFjdGljZSBvZiBhbGwgbWFua2luZCwgd2hpY2ggd2FzIGRlZW1lZCBqdXN0IGFuZCBob2x5LCBoZSBoYWQgY29tZSBhcyBhbiBhbWJhc3NhZG9yLCBidXQgaGFkIHdyb3VnaHQgYXMgYW4gZW5lbXkuIFRoZW4sIHB1dHRpbmcgYSBzdG9wIHRvIHRoZSBiYXR0bGUsIGhlIHN0cmFpZ2h0d2F5IGxldCB0aGUgQ2x1c2lhbnMgYWxvbmUsIGFuZCBsZWQgaGlzIGhvc3QgYWdhaW5zdCBSb21lLiBCdXQgbm90IHdpc2hpbmcgdG8gaGF2ZSBpdCB0aG91Z2h0IHRoYXQgaGlzIHBlb3BsZSB3ZXJlIHJlam9pY2VkIGF0IHRoZSBvdXRyYWdlLCBhbmQgb25seSB3YW50ZWQgc29tZSBwcmV0ZXh0IGZvciB3YXIsIGhlIHNlbnQgYW5kIGRlbWFuZGVkIHRoZSBvZmZlbmRlciBmb3IgcHVuaXNobWVudCwgYW5kIGluIHRoZSBtZWFudGltZSBhZHZhbmNlZCBidXQgc2xvd2x5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBzcGVlY2ggdGhlIFJvbWFuIGVudm95cyBzYXcgdGhhdCB0aGVyZSB3YXMgbm8gY29taW5nIHRvIHRlcm1zIHdpdGggQnJlbm51cywgYW5kIHNvIHRoZXkgc2xpcHBlZCBpbnRvIENsdXNpdW0sIGFuZCBlbWJvbGRlbmVkIGFuZCBpbmNpdGVkIGl0cyBjaXRpemVucyB0byBzYWxseSBvdXQgYWdhaW5zdCB0aGUgQmFyYmFyaWFucyB3aXRoIHRoZW0sIGVpdGhlciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGRpc2NvdmVyIHRoZSBwcm93ZXNzIG9mIHRob3NlIHdhcnJpb3JzIG9yIHRvIGRpc3BsYXkgdGhlaXIgb3duIFRoZSBDbHVzaWFucyBtYWRlIGEgc2FsbHksIGFuZCBpbiB0aGUgZmlnaHQgd2hpY2ggcmFnZWQgYWxvbmcgdGhlIHdhbGxzIG9uZSBvZiB0aGUgRmFiaWksIFF1aW50dXMgQW1idXN0dXMsIGRyb3ZlIGhpcyBob3JzZSBzdHJhaWdodCBhdCBhIHN0YXRlbHkgYW5kIGhhbmRzb21lIEdhdWwgd2hvIHdhcyByaWRpbmcgZmFyIG91dCBpbiBmcm9udCBvZiB0aGUgcmVzdC4gQXQgZmlyc3QgaGUgd2FzIG5vdCByZWNvZ25pemVkLCBiZWNhdXNlIHRoZSBjb25mbGljdCBjYW1lIHN3aWZ0bHkgdG8gcGFzcyBhbmQgaGlzIGRhenpsaW5nIGFybW91ciBoaWQgaGlzIGZhY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGhhZCBjb25xdWVyZWQgYW5kIHVuaG9yc2VkIGhpcyBmb2UgYW5kIHdhcyBzdHJpcHBpbmcgaGlzIGFybXMgZnJvbSBoaW0sIHRoZW4gQnJlbm51cyByZWNvZ25pemVkIGhpbSwgYW5kIGNhbGxlZCB1cG9uIHRoZSBnb2RzIHRvIHdpdG5lc3MgaG93LCBjb250cmFyeSB0byB0aGUgZ2VuZXJhbCBwcmFjdGljZSBvZiBhbGwgbWFua2luZCwgd2hpY2ggd2FzIGRlZW1lZCBqdXN0IGFuZCBob2x5LCBoZSBoYWQgY29tZSBhcyBhbiBhbWJhc3NhZG9yLCBidXQgaGFkIHdyb3VnaHQgYXMgYW4gZW5lbXkuIFRoZW4sIHB1dHRpbmcgYSBzdG9wIHRvIHRoZSBiYXR0bGUsIGhlIHN0cmFpZ2h0d2F5IGxldCB0aGUgQ2x1c2lhbnMgYWxvbmUsIGFuZCBsZWQgaGlzIGhvc3QgYWdhaW5zdCBSb21lLiBCdXQgbm90IHdpc2hpbmcgdG8gaGF2ZSBpdCB0aG91Z2h0IHRoYXQgaGlzIHBlb3BsZSB3ZXJlIHJlam9pY2VkIGF0IHRoZSBvdXRyYWdlLCBhbmQgb25seSB3YW50ZWQgc29tZSBwcmV0ZXh0IGZvciB3YXIsIGhlIHNlbnQgYW5kIGRlbWFuZGVkIHRoZSBvZmZlbmRlciBmb3IgcHVuaXNobWVudCwgYW5kIGluIHRoZSBtZWFudGltZSBhZHZhbmNlZCBidXQgc2xvd2x5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBTZW5hdGUgY29udmVuZWQgaW4gUm9tZSwgbWFueSBkZW5vdW5jZWQgdGhlIEZhYmlpLCBhbmQgZXNwZWNpYWxseSB0aGUgcHJpZXN0cyBjYWxsZWQgRmV0aWFsZXMgd2VyZSBpbnN0YW50IGluIGNhbGxpbmcgdXBvbiB0aGUgU2VuYXRlIGluIHRoZSBuYW1lIG9mIGFsbCB0aGUgZ29kcyB0byB0dXJuIHRoZSBjdXJzZSBvZiB3aGF0IGhhZCBiZWVuIGRvbmUgdXBvbiB0aGUgb25lIGd1aWx0eSBtYW4sIGFuZCBzbyB0byBtYWtlIGV4cGlhdGlvbiBmb3IgdGhlIHJlc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgU2VuYXRlIGNvbnZlbmVkIGluIFJvbWUsIG1hbnkgZGVub3VuY2VkIHRoZSBGYWJpaSwgYW5kIGVzcGVjaWFsbHkgdGhlIHByaWVzdHMgY2FsbGVkIEZldGlhbGVzIHdlcmUgaW5zdGFudCBpbiBjYWxsaW5nIHVwb24gdGhlIFNlbmF0ZSBpbiB0aGUgbmFtZSBvZiBhbGwgdGhlIGdvZHMgdG8gdHVybiB0aGUgY3Vyc2Ugb2Ygd2hhdCBoYWQgYmVlbiBkb25lIHVwb24gdGhlIG9uZSBndWlsdHkgbWFuLCBhbmQgc28gdG8gbWFrZSBleHBpYXRpb24gZm9yIHRoZSByZXN0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZXNlIEZldGlhbGVzIHdlcmUgaW5zdGl0dXRlZCBieSBOdW1hIFBvbXBpbGl1cywgZ2VudGxlc3QgYW5kIGp1c3Rlc3Qgb2Yga2luZ3MsIHRvIGJlIHRoZSBndWFyZGlhbnMgb2YgcGVhY2UsIGFzIHdlbGwgYXMganVkZ2VzIGFuZCBkZXRlcm1pbmVycyBvZiB0aGUgZ3JvdW5kcyBvbiB3aGljaCB3YXIgY291bGQganVzdGx5IGJlIG1hZGUuIAoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUgcmVmZXJyZWQgdGhlIG1hdHRlciB0byB0aGUgcGVvcGxlLCBhbmQgYWx0aG91Z2ggdGhlIHByaWVzdHMgd2l0aCBvbmUgYWNjb3JkIGRlbm91bmNlZCBGYWJpdXMsIHRoZSBtdWx0aXR1ZGUgc28gc2Nvcm5lZCBhbmQgbW9ja2VkIGF0IHJlbGlnaW9uIGFzIHRvIGFwcG9pbnQgaGltIG1pbGl0YXJ5IHRyaWJ1bmUsIGFsb25nIHdpdGggaGlzIGJyb3RoZXJzLiBUaGUgR2F1bHMsIG9uIGxlYXJuaW5nIHRoaXMsIHdlcmUgd3JvdGgsIGFuZCBzdWZmZXJlZCBub3RoaW5nIHRvIGltcGVkZSB0aGVpciBoYXN0ZSwgYnV0IGFkdmFuY2VkIHdpdGggYWxsIHNwZWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHdpdGggdGhlaXIgbnVtYmVycywgdGhlIHNwbGVuZG91ciBvZiB0aGVpciBlcXVpcG1lbnQsIGFuZCB0aGVpciBmdXJpb3VzIHZpb2xlbmNlLCB0aGV5IHN0cnVjayB0ZXJyb3Igd2hlcmV2ZXIgdGhleSBjYW1lLiBNZW4gdGhvdWdodCB0aGUgbGFuZHMgYWJvdXQgdGhlaXIgY2l0aWVzIGxvc3QgYWxyZWFkeSwgYW5kIHRoZWlyIGNpdGllcyBzdXJlIHRvIGZvbGxvdyBhdCBvbmNlLiBCdXQgY29udHJhcnkgdG8gYWxsIGV4cGVjdGF0aW9uIHRoZSBlbmVteSBkaWQgdGhlbSBubyBoYXJtLCBub3IgdG9vayBhdWdodCBmcm9tIHRoZWlyIGZpZWxkcywgYnV0IGV2ZW4gYXMgdGhleSBwYXNzZWQgY2xvc2UgYnkgdGhlaXIgY2l0aWVzIHNob3V0ZWQgb3V0IHRoYXQgdGhleSB3ZXJlIG1hcmNoaW5nIG9uIFJvbWUgYW5kIHdhcnJlZCBvbmx5IG9uIHRoZSBSb21hbnMsIGJ1dCBoZWxkIHRoZSByZXN0IGFzIGZyaWVuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUgcmVmZXJyZWQgdGhlIG1hdHRlciB0byB0aGUgcGVvcGxlLCBhbmQgYWx0aG91Z2ggdGhlIHByaWVzdHMgd2l0aCBvbmUgYWNjb3JkIGRlbm91bmNlZCBGYWJpdXMsIHRoZSBtdWx0aXR1ZGUgc28gc2Nvcm5lZCBhbmQgbW9ja2VkIGF0IHJlbGlnaW9uIGFzIHRvIGFwcG9pbnQgaGltIG1pbGl0YXJ5IHRyaWJ1bmUsIGFsb25nIHdpdGggaGlzIGJyb3RoZXJzLiBUaGUgR2F1bHMsIG9uIGxlYXJuaW5nIHRoaXMsIHdlcmUgd3JvdGgsIGFuZCBzdWZmZXJlZCBub3RoaW5nIHRvIGltcGVkZSB0aGVpciBoYXN0ZSwgYnV0IGFkdmFuY2VkIHdpdGggYWxsIHNwZWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoYXQgd2l0aCB0aGVpciBudW1iZXJzLCB0aGUgc3BsZW5kb3VyIG9mIHRoZWlyIGVxdWlwbWVudCwgYW5kIHRoZWlyIGZ1cmlvdXMgdmlvbGVuY2UsIHRoZXkgc3RydWNrIHRlcnJvciB3aGVyZXZlciB0aGV5IGNhbWUuIE1lbiB0aG91Z2h0IHRoZSBsYW5kcyBhYm91dCB0aGVpciBjaXRpZXMgbG9zdCBhbHJlYWR5LCBhbmQgdGhlaXIgY2l0aWVzIHN1cmUgdG8gZm9sbG93IGF0IG9uY2UuIEJ1dCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24gdGhlIGVuZW15IGRpZCB0aGVtIG5vIGhhcm0sIG5vciB0b29rIGF1Z2h0IGZyb20gdGhlaXIgZmllbGRzLCBidXQgZXZlbiBhcyB0aGV5IHBhc3NlZCBjbG9zZSBieSB0aGVpciBjaXRpZXMgc2hvdXRlZCBvdXQgdGhhdCB0aGV5IHdlcmUgbWFyY2hpbmcgb24gUm9tZSBhbmQgd2FycmVkIG9ubHkgb24gdGhlIFJvbWFucywgYnV0IGhlbGQgdGhlIHJlc3QgYXMgZnJpZW5kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW5zdCB0aGlzIG9uc2V0IG9mIHRoZSBCYXJiYXJpYW5zIHRoZSBtaWxpdGFyeSB0cmlidW5lcyBsZWQgdGhlIFJvbWFucyBmb3J0aCB0byBiYXR0bGUuIFRoZXkgd2VyZSBub3QgaW5mZXJpb3IgaW4gbnVtYmVycywgYmVpbmcgbm8gZmV3ZXIgdGhhbiBmb3J0eSB0aG91c2FuZCBtZW4tYXQtYXJtcywgYnV0IG1vc3Qgb2YgdGhlbSB3ZXJlIHVudHJhaW5lZCwgYW5kIGhhZCBuZXZlciBoYW5kbGVkIHdlYXBvbnMgYmVmb3JlLiBCZXNpZGVzLCB0aGV5IGhhZCBuZWdsZWN0ZWQgYWxsIHJlbGlnaW91cyByaXRlcywgaGF2aW5nIG5laXRoZXIgc2FjcmlmaWNlZCB3aXRoIGdvb2Qgb21lbnMsIG5vciBjb25zdWx0ZWQgdGhlIHByb3BoZXRzIGFzIHdhcyBtZWV0IGJlZm9yZSB0aGUgcGVyaWxzIG9mIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgbW9zdCBvZiBhbGwgY29uZm91bmRlZCB0aGVpciB1bmRlcnRha2luZ3Mgd2FzIHRoZSBudW1iZXIgb2YgdGhlaXIgY29tbWFuZGVycy4gQW5kIHlldCBiZWZvcmUgdGhpcywgYW5kIG9uIHRoZSBicmluayBvZiBsZXNzZXIgc3RydWdnbGVzLCB0aGV5IGhhZCBvZnRlbiBjaG9zZW4gYSBzaW5nbGUgY29tbWFuZGVyLCB3aXRoIHRoZSB0aXRsZSBvZiBEaWN0YXRvciwgbm90IHVuYXdhcmUgaG93IGdyZWF0IGFuIGFkdmFudGFnZSBpdCBpcywgd2hlbiBjb25mcm9udGluZyBhIGRhbmdlcm91cyBjcmlzaXMsIHRvIGJlIG9mIG9uZSBtaW5kIGluIHBheWluZyBvYmVkaWVuY2UgdG8gYW4gYXV0aG9yaXR5IHdoaWNoIGlzIGFic29sdXRlLCBhbmQgaG9sZHMgdGhlIHNjYWxlcyBvZiBqdXN0aWNlIGluIGl0cyBvd24gaGFuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGVpciB1bmZhaXIgdHJlYXRtZW50IG9mIENhbWlsbHVzIHdhcyBpbiBubyBzbGlnaHQgZGVncmVlIGZhdGFsIHRvIGRpc2NpcGxpbmUsIHNpbmNlIGl0IHdhcyBub3cgZGFuZ2Vyb3VzIHRvIGhvbGQgY29tbWFuZCB3aXRob3V0IHBheWluZyByZWdhcmQgdG8gdGhlIHBsZWFzdXJlIGFuZCBjYXByaWNlIG9mIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluc3QgdGhpcyBvbnNldCBvZiB0aGUgQmFyYmFyaWFucyB0aGUgbWlsaXRhcnkgdHJpYnVuZXMgbGVkIHRoZSBSb21hbnMgZm9ydGggdG8gYmF0dGxlLiBUaGV5IHdlcmUgbm90IGluZmVyaW9yIGluIG51bWJlcnMsIGJlaW5nIG5vIGZld2VyIHRoYW4gZm9ydHkgdGhvdXNhbmQgbWVuLWF0LWFybXMsIGJ1dCBtb3N0IG9mIHRoZW0gd2VyZSB1bnRyYWluZWQsIGFuZCBoYWQgbmV2ZXIgaGFuZGxlZCB3ZWFwb25zIGJlZm9yZS4gQmVzaWRlcywgdGhleSBoYWQgbmVnbGVjdGVkIGFsbCByZWxpZ2lvdXMgcml0ZXMsIGhhdmluZyBuZWl0aGVyIHNhY3JpZmljZWQgd2l0aCBnb29kIG9tZW5zLCBub3IgY29uc3VsdGVkIHRoZSBwcm9waGV0cyBhcyB3YXMgbWVldCBiZWZvcmUgdGhlIHBlcmlscyBvZiBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IG1vc3Qgb2YgYWxsIGNvbmZvdW5kZWQgdGhlaXIgdW5kZXJ0YWtpbmdzIHdhcyB0aGUgbnVtYmVyIG9mIHRoZWlyIGNvbW1hbmRlcnMuIEFuZCB5ZXQgYmVmb3JlIHRoaXMsIGFuZCBvbiB0aGUgYnJpbmsgb2YgbGVzc2VyIHN0cnVnZ2xlcywgdGhleSBoYWQgb2Z0ZW4gY2hvc2VuIGEgc2luZ2xlIGNvbW1hbmRlciwgd2l0aCB0aGUgdGl0bGUgb2YgRGljdGF0b3IsIG5vdCB1bmF3YXJlIGhvdyBncmVhdCBhbiBhZHZhbnRhZ2UgaXQgaXMsIHdoZW4gY29uZnJvbnRpbmcgYSBkYW5nZXJvdXMgY3Jpc2lzLCB0byBiZSBvZiBvbmUgbWluZCBpbiBwYXlpbmcgb2JlZGllbmNlIHRvIGFuIGF1dGhvcml0eSB3aGljaCBpcyBhYnNvbHV0ZSwgYW5kIGhvbGRzIHRoZSBzY2FsZXMgb2YganVzdGljZSBpbiBpdHMgb3duIGhhbmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGVpciB1bmZhaXIgdHJlYXRtZW50IG9mIENhbWlsbHVzIHdhcyBpbiBubyBzbGlnaHQgZGVncmVlIGZhdGFsIHRvIGRpc2NpcGxpbmUsIHNpbmNlIGl0IHdhcyBub3cgZGFuZ2Vyb3VzIHRvIGhvbGQgY29tbWFuZCB3aXRob3V0IHBheWluZyByZWdhcmQgdG8gdGhlIHBsZWFzdXJlIGFuZCBjYXByaWNlIG9mIHRoZSBwZW9wbGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhleSBhZHZhbmNlZCBmcm9tIHRoZSBjaXR5IGFib3V0IGVsZXZlbiBtaWxlcywgYW5kIGVuY2FtcGVkIGFsb25nIHRoZSByaXZlciBBbGxpYSwgbm90IGZhciBmcm9tIGl0cyBjb25mbHVlbmNlIHdpdGggdGhlIFRpYmVyLiBUaGVyZSB0aGUgQmFyYmFyaWFucyBjYW1lIHN1ZGRlbmx5IHVwb24gdGhlbSwgYW5kIGFmdGVyIGEgZGlzb3JkZXJseSBhbmQgc2hhbWVmdWwgc3RydWdnbGUsIHRoZXkgd2VyZSByb3V0ZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlaXIgbGVmdCB3aW5nIHdhcyBhdCBvbmNlIGRyaXZlbiBpbnRvIHRoZSByaXZlciBieSB0aGUgR2F1bHMgYW5kIGRlc3Ryb3llZDsgdGhlaXIgcmlnaHQgd2luZyB3YXMgbGVzcyBjdXQgdXAsIGJlY2F1c2UgaXQgd2l0aGRyZXcgYmVmb3JlIHRoZSBlbmVteSdzIG9uc2V0IGZyb20gdGhlIHBsYWluIHRvIHRoZSBoaWxscywgZnJvbSB3aGljaCBtb3N0IG9mIHRoZW0gbWFkZSB0aGVpciB3YXkgYmFjayB0byB0aGUgY2l0eS4gVGhlIHJlc3QsIGFzIG1hbnkgYXMgZXNjYXBlZCB0aGUgZW5lbXkncyBoYW5kcywgd2hpY2ggd2VyZSB3ZWFyeSB3aXRoIHNsYXVnaHRlciwgZmxlZCBieSBuaWdodCB0byBWZWlpLiBUaGV5IHRob3VnaHQgdGhhdCBSb21lIHdhcyBsb3N0IGFuZCBhbGwgaGVyIHBlb3BsZSBzbGFpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGxlZnQgd2luZyB3YXMgYXQgb25jZSBkcml2ZW4gaW50byB0aGUgcml2ZXIgYnkgdGhlIEdhdWxzIGFuZCBkZXN0cm95ZWQ7IHRoZWlyIHJpZ2h0IHdpbmcgd2FzIGxlc3MgY3V0IHVwLCBiZWNhdXNlIGl0IHdpdGhkcmV3IGJlZm9yZSB0aGUgZW5lbXkncyBvbnNldCBmcm9tIHRoZSBwbGFpbiB0byB0aGUgaGlsbHMsIGZyb20gd2hpY2ggbW9zdCBvZiB0aGVtIG1hZGUgdGhlaXIgd2F5IGJhY2sgdG8gdGhlIGNpdHkuIFRoZSByZXN0LCBhcyBtYW55IGFzIGVzY2FwZWQgdGhlIGVuZW15J3MgaGFuZHMsIHdoaWNoIHdlcmUgd2Vhcnkgd2l0aCBzbGF1Z2h0ZXIsIGZsZWQgYnkgbmlnaHQgdG8gVmVpaS4gVGhleSB0aG91Z2h0IHRoYXQgUm9tZSB3YXMgbG9zdCBhbmQgYWxsIGhlciBwZW9wbGUgc2xhaW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBiYXR0bGU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zOTAgQi5DLjwvbm90ZT4gdG9vayBwbGFjZSBqdXN0IGFmdGVyIHRoZSBzdW1tZXIgc29sc3RpY2Ugd2hlbiB0aGUgbW9vbiB3YXMgbmVhciB0aGUgZnVsbCwgb24gdGhlIHZlcnkgZGF5IG9mIGEgZm9ybWVyIGdyZWF0IGRpc2FzdGVyLCB3aGVuIHRocmVlIGh1bmRyZWQgbWVuIG9mIHRoZSBGYWJpYW4gZ2VucyBoYWQgYmVlbiBjdXQgdG8gcGllY2VzIGJ5IHRoZSBUdXNjYW5zLiBCdXQgdGhlIHNlY29uZCBkZWZlYXQgd2FzIHNvIG11Y2ggdGhlIHdvcnNlIHRoYXQgdGhlIGRheSBvbiB3aGljaCBpdCBmZWxsIGlzIGNhbGxlZCBkb3duIHRvIHRoZSBwcmVzZW50IHRpbWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kaWVzIEFsbGllbnNpcyw8L3E+IGZyb20gdGhlIHJpdmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJhdHRsZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzkwIEIuQy48L25vdGU+IHRvb2sgcGxhY2UganVzdCBhZnRlciB0aGUgc3VtbWVyIHNvbHN0aWNlIHdoZW4gdGhlIG1vb24gd2FzIG5lYXIgdGhlIGZ1bGwsIG9uIHRoZSB2ZXJ5IGRheSBvZiBhIGZvcm1lciBncmVhdCBkaXNhc3Rlciwgd2hlbiB0aHJlZSBodW5kcmVkIG1lbiBvZiB0aGUgRmFiaWFuIGdlbnMgaGFkIGJlZW4gY3V0IHRvIHBpZWNlcyBieSB0aGUgVHVzY2Fucy4gQnV0IHRoZSBzZWNvbmQgZGVmZWF0IHdhcyBzbyBtdWNoIHRoZSB3b3JzZSB0aGF0IHRoZSBkYXkgb24gd2hpY2ggaXQgZmVsbCBpcyBjYWxsZWQgZG93biB0byB0aGUgcHJlc2VudCB0aW1lIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kaWVzIEFsbGllbnNpcyw8L3E+IGZyb20gdGhlIHJpdmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdyBjb25jZXJuaW5nIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kaWVzIG5lZmFzdGksPC9xPiBvciB1bmx1Y2t5IGRheXMsIHdoZXRoZXIgd2UgbXVzdCByZWdhcmQgc29tZSBhcyBzdWNoLCBvciB3aGV0aGVyIEhlcmFjbGVpdHVzIHdhcyByaWdodCBpbiByZWJ1a2luZyBIZXNpb2QgZm9yIGNhbGxpbmcgc29tZSBkYXlzIGdvb2QgYW5kIHNvbWUgYmFkLCBpbiBoaXMgaWdub3JhbmNlIHRoYXQgdGhlIG5hdHVyZSBvZiBldmVyeSBkYXkgaXMgb25lIGFuZCB0aGUgc2FtZSzigJR0aGlzIHF1ZXN0aW9uIGhhcyBiZWVuIGZ1bGx5IGRpc2N1c3NlZCBlbHNld2hlcmUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwsIGV2ZW4gaW4gd2hhdCBJIGFtIG5vdyB3cml0aW5nLCB0aGUgbWVudGlvbiBvZiBhIGZldyBleGFtcGxlcyBtYXkgbm90IGJlIGFtaXNzLiBUbyBiZWdpbiB3aXRoLCB0aGVuLCBpdCB3YXMgb24gdGhlIGZpZnRoIGRheSBvZiB0aGUgbW9udGggb2YgSGlwcG9kcm9taXVzICh3aGljaCB0aGUgQXRoZW5pYW5zIGNhbGwgSGVjYXRvbWJhZW9uKSB0aGF0IHRoZSBCb2VvdGlhbnMgd29uIHR3byBpbGx1c3RyaW91cyB2aWN0b3JpZXMgd2hpY2ggc2V0IHRoZSBHcmVla3MgZnJlZTogdGhhdCBhdCBMZXVjdHJhLCBhbmQgdGhhdCBhdCBDZXJlc3N1cyBtb3JlIHRoYW4gdHdvIGh1bmRyZWQgeWVhcnMgZWFybGllciwgd2hlbiB0aGV5IGNvbnF1ZXJlZCBMYXR0YW15YXMgYW5kIHRoZSBUaGVzc2FsaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIG9uIHRoZSBzaXh0aCBkYXkgb2YgdGhlIG1vbnRoIG9mIEJvZWRyb21pb24gdGhlIEdyZWVrcyBkZWZlYXRlZCB0aGUgUGVyc2lhbnMgYXQgTWFyYXRob24sIG9uIHRoZSB0aGlyZCBkYXkgYXQgUGxhdGFlYSBhbmQgTXljYWxlIHRvZ2V0aGVyLCBhbmQgb24gdGhlIHR3ZW50eS1zaXh0aCBkYXkgYXQgQXJiZWxhLiBNb3Jlb3ZlciwgaXQgd2FzIGFib3V0IGZ1bGwgbW9vbiBvZiB0aGUgc2FtZSBtb250aCB0aGF0IHRoZSBBdGhlbmlhbnMgd29uIHRoZWlyIHNlYS1maWdodCBvZmYgTmF4b3MsIHVuZGVyIHRoZSBjb21tYW5kIG9mIENoYWJyaWFzLCBhbmQgYWJvdXQgdGhlIHR3ZW50aWV0aCwgdGhhdCBhdCBTYWxhbWlzLCBhcyBoYXMgYmVlbiBzZXQgZm9ydGggaW4gbXkgdHJlYXRpc2UgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiBkYXlzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCB0aGUgbW9udGggb2YgVGhhcmdlbGlvbiBoYXMgY2xlYXJseSBiZWVuIGEgZGlzYXN0cm91cyBvbmUgZm9yIHRoZSBCYXJiYXJpYW5zLCBmb3IgaW4gdGhhdCBtb250aCB0aGUgZ2VuZXJhbHMgb2YgdGhlIEtpbmcgd2VyZSBjb25xdWVyZWQgYnkgQWxleGFuZGVyIGF0IHRoZSBHcmFuaWN1cywgYW5kIG9uIHRoZSB0d2VudHktZm91cnRoIG9mIHRoZSBtb250aCB0aGUgQ2FydGhhZ2luaWFucyB3ZXJlIHdvcnN0ZWQgYnkgVGltb2xlb24gb2ZmIFNpY2lseS4gT24gdGhpcyBkYXksIHRvbywgb2YgVGhhcmdlbGlvbiwgaXQgYXBwZWFycyB0aGF0IElsaXVtIHdhcyB0YWtlbiwgYXMgRXBob3J1cywgQ2FsbGlzdGhlbmVzLCBEYW1hc3RlcywgYW5kIFBoeWxhcmNodXMgaGF2ZSBzdGF0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvbnRyYXJ5LXdpc2UsIHRoZSBtb250aCBvZiBNZXRhZ2VpdG5pb24gKHdoaWNoIHRoZSBCb2VvdGlhbnMgY2FsbCBQYW5lbXVzKSBoYXMgbm90IGJlZW4gZmF2b3VyYWJsZSB0byB0aGUgR3JlZWtzLiBPbiB0aGUgc2V2ZW50aCBvZiB0aGlzIG1vbnRoIHRoZXkgd2VyZSB3b3JzdGVkIGJ5IEFudGlwYXRlciBpbiB0aGUgYmF0dGxlIG9mIENyYW5ub24sIGFuZCB1dHRlcmx5IHVuZG9uZTsgYmVmb3JlIHRoaXMgdGhleSBoYWQgZm91Z2h0IFBoaWxpcCB1bnN1Y2Nlc3NmdWxseSBhdCBDaGFlcm9uZWlhIG9uIHRoYXQgZGF5IG9mIHRoZSBtb250aDsgYW5kIGluIHRoZSBzYW1lIHllYXIsIGFuZCBvbiB0aGUgc2FtZSBkYXkgb2YgTWV0YWdlaXRuaW9uLCBBcmNoaWRhbXVzIGFuZCBoaXMgYXJteSwgd2hvIGhhZCBjcm9zc2VkIGludG8gSXRhbHksIHdlcmUgY3V0IHRvIHBpZWNlcyBieSB0aGUgQmFyYmFyaWFucyB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIENhcnRoYWdpbmlhbnMgYWxzbyByZWdhcmQgd2l0aCBmZWFyIHRoZSB0d2VudHktc2Vjb25kIG9mIHRoaXMgbW9udGgsIGJlY2F1c2UgaXQgaGFzIGV2ZXIgYnJvdWdodCB1cG9uIHRoZW0gdGhlIHdvcnN0IGFuZCBncmVhdGVzdCBvZiB0aGVpciBtaXNmb3J0dW5lcy4KCQkJPC9wPgogICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpZXMgbmVmYXN0aSw8L3E+IG9yIHVubHVja3kgZGF5cywgd2hldGhlciB3ZSBtdXN0IHJlZ2FyZCBzb21lIGFzIHN1Y2gsIG9yIHdoZXRoZXIgSGVyYWNsZWl0dXMgd2FzIHJpZ2h0IGluIHJlYnVraW5nIEhlc2lvZCBmb3IgY2FsbGluZyBzb21lIGRheXMgZ29vZCBhbmQgc29tZSBiYWQsIGluIGhpcyBpZ25vcmFuY2UgdGhhdCB0aGUgbmF0dXJlIG9mIGV2ZXJ5IGRheSBpcyBvbmUgYW5kIHRoZSBzYW1lLOKAlHRoaXMgcXVlc3Rpb24gaGFzIGJlZW4gZnVsbHkgZGlzY3Vzc2VkIGVsc2V3aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCBldmVuIGluIHdoYXQgSSBhbSBub3cgd3JpdGluZywgdGhlIG1lbnRpb24gb2YgYSBmZXcgZXhhbXBsZXMgbWF5IG5vdCBiZSBhbWlzcy4gVG8gYmVnaW4gd2l0aCwgdGhlbiwgaXQgd2FzIG9uIHRoZSBmaWZ0aCBkYXkgb2YgdGhlIG1vbnRoIG9mIEhpcHBvZHJvbWl1cyAod2hpY2ggdGhlIEF0aGVuaWFucyBjYWxsIEhlY2F0b21iYWVvbikgdGhhdCB0aGUgQm9lb3RpYW5zIHdvbiB0d28gaWxsdXN0cmlvdXMgdmljdG9yaWVzIHdoaWNoIHNldCB0aGUgR3JlZWtzIGZyZWU6IHRoYXQgYXQgTGV1Y3RyYSwgYW5kIHRoYXQgYXQgQ2VyZXNzdXMgbW9yZSB0aGFuIHR3byBodW5kcmVkIHllYXJzIGVhcmxpZXIsIHdoZW4gdGhleSBjb25xdWVyZWQgTGF0dGFteWFzIGFuZCB0aGUgVGhlc3NhbGlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBvbiB0aGUgc2l4dGggZGF5IG9mIHRoZSBtb250aCBvZiBCb2Vkcm9taW9uIHRoZSBHcmVla3MgZGVmZWF0ZWQgdGhlIFBlcnNpYW5zIGF0IE1hcmF0aG9uLCBvbiB0aGUgdGhpcmQgZGF5IGF0IFBsYXRhZWEgYW5kIE15Y2FsZSB0b2dldGhlciwgYW5kIG9uIHRoZSB0d2VudHktc2l4dGggZGF5IGF0IEFyYmVsYS4gTW9yZW92ZXIsIGl0IHdhcyBhYm91dCBmdWxsIG1vb24gb2YgdGhlIHNhbWUgbW9udGggdGhhdCB0aGUgQXRoZW5pYW5zIHdvbiB0aGVpciBzZWEtZmlnaHQgb2ZmIE5heG9zLCB1bmRlciB0aGUgY29tbWFuZCBvZiBDaGFicmlhcywgYW5kIGFib3V0IHRoZSB0d2VudGlldGgsIHRoYXQgYXQgU2FsYW1pcywgYXMgaGFzIGJlZW4gc2V0IGZvcnRoIGluIG15IHRyZWF0aXNlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiBkYXlzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIHRoZSBtb250aCBvZiBUaGFyZ2VsaW9uIGhhcyBjbGVhcmx5IGJlZW4gYSBkaXNhc3Ryb3VzIG9uZSBmb3IgdGhlIEJhcmJhcmlhbnMsIGZvciBpbiB0aGF0IG1vbnRoIHRoZSBnZW5lcmFscyBvZiB0aGUgS2luZyB3ZXJlIGNvbnF1ZXJlZCBieSBBbGV4YW5kZXIgYXQgdGhlIEdyYW5pY3VzLCBhbmQgb24gdGhlIHR3ZW50eS1mb3VydGggb2YgdGhlIG1vbnRoIHRoZSBDYXJ0aGFnaW5pYW5zIHdlcmUgd29yc3RlZCBieSBUaW1vbGVvbiBvZmYgU2ljaWx5LiBPbiB0aGlzIGRheSwgdG9vLCBvZiBUaGFyZ2VsaW9uLCBpdCBhcHBlYXJzIHRoYXQgSWxpdW0gd2FzIHRha2VuLCBhcyBFcGhvcnVzLCBDYWxsaXN0aGVuZXMsIERhbWFzdGVzLCBhbmQgUGh5bGFyY2h1cyBoYXZlIHN0YXRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNvbnRyYXJ5LXdpc2UsIHRoZSBtb250aCBvZiBNZXRhZ2VpdG5pb24gKHdoaWNoIHRoZSBCb2VvdGlhbnMgY2FsbCBQYW5lbXVzKSBoYXMgbm90IGJlZW4gZmF2b3VyYWJsZSB0byB0aGUgR3JlZWtzLiBPbiB0aGUgc2V2ZW50aCBvZiB0aGlzIG1vbnRoIHRoZXkgd2VyZSB3b3JzdGVkIGJ5IEFudGlwYXRlciBpbiB0aGUgYmF0dGxlIG9mIENyYW5ub24sIGFuZCB1dHRlcmx5IHVuZG9uZTsgYmVmb3JlIHRoaXMgdGhleSBoYWQgZm91Z2h0IFBoaWxpcCB1bnN1Y2Nlc3NmdWxseSBhdCBDaGFlcm9uZWlhIG9uIHRoYXQgZGF5IG9mIHRoZSBtb250aDsgYW5kIGluIHRoZSBzYW1lIHllYXIsIGFuZCBvbiB0aGUgc2FtZSBkYXkgb2YgTWV0YWdlaXRuaW9uLCBBcmNoaWRhbXVzIGFuZCBoaXMgYXJteSwgd2hvIGhhZCBjcm9zc2VkIGludG8gSXRhbHksIHdlcmUgY3V0IHRvIHBpZWNlcyBieSB0aGUgQmFyYmFyaWFucyB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBDYXJ0aGFnaW5pYW5zIGFsc28gcmVnYXJkIHdpdGggZmVhciB0aGUgdHdlbnR5LXNlY29uZCBvZiB0aGlzIG1vbnRoLCBiZWNhdXNlIGl0IGhhcyBldmVyIGJyb3VnaHQgdXBvbiB0aGVtIHRoZSB3b3JzdCBhbmQgZ3JlYXRlc3Qgb2YgdGhlaXIgbWlzZm9ydHVuZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SSBhbSBub3QgdW5hd2FyZSB0aGF0LCBhdCBhYm91dCB0aGUgdGltZSB3aGVuIHRoZSBteXN0ZXJpZXMgYXJlIGNlbGVicmF0ZWQsIFRoZWJlcyB3YXMgcmF6ZWQgdG8gdGhlIGdyb3VuZCBmb3IgdGhlIHNlY29uZCB0aW1lIGJ5IEFsZXhhbmRlciwgYW5kIHRoYXQgYWZ0ZXJ3YXJkcyB0aGUgQXRoZW5pYW5zIHdlcmUgZm9yY2VkIHRvIHJlY2VpdmUgYSBNYWNlZG9uaWFuIGdhcnJpc29uIG9uIHRoZSB0d2VudGlldGggb2YgQm9lZHJvbWlvbiwgdGhlIHZlcnkgZGF5IG9uIHdoaWNoIHRoZXkgZXNjb3J0IHRoZSBteXN0aWMgSWFjY2h1cyBmb3J0aCBpbiBwcm9jZXNzaW9uLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsaWtld2lzZSB0aGUgUm9tYW5zLCBvbiB0aGUgc2VsZi1zYW1lIGRheSwgc2F3IHRoZWlyIGFybXkgdW5kZXIgQ2FlcGlvIGRlc3Ryb3llZCBieSB0aGUgQ2ltYnJpLCBhbmQgbGF0ZXIsIHdoZW4gTHVjdWxsdXMgd2FzIHRoZWlyIGdlbmVyYWwsIGNvbnF1ZXJlZCBUaWdyYW5lcyBhbmQgdGhlIEFybWVuaWFucy4gQm90aCBLaW5nIEF0dGFsdXMgYW5kIFBvbXBleSB0aGUgR3JlYXQgZGllZCBvbiB0aGVpciBvd24gYmlydGhkYXlzLiBJbiBzaG9ydCwgb25lIGNhbiBhZGR1Y2UgbWFueSBjYXNlcyB3aGVyZSB0aGUgc2FtZSB0aW1lcyBhbmQgc2Vhc29ucyBoYXZlIGJyb3VnaHQgb3Bwb3NpdGUgZm9ydHVuZXMgdXBvbiB0aGUgc2FtZSBtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsaWtld2lzZSB0aGUgUm9tYW5zLCBvbiB0aGUgc2VsZi1zYW1lIGRheSwgc2F3IHRoZWlyIGFybXkgdW5kZXIgQ2FlcGlvIGRlc3Ryb3llZCBieSB0aGUgQ2ltYnJpLCBhbmQgbGF0ZXIsIHdoZW4gTHVjdWxsdXMgd2FzIHRoZWlyIGdlbmVyYWwsIGNvbnF1ZXJlZCBUaWdyYW5lcyBhbmQgdGhlIEFybWVuaWFucy4gQm90aCBLaW5nIEF0dGFsdXMgYW5kIFBvbXBleSB0aGUgR3JlYXQgZGllZCBvbiB0aGVpciBvd24gYmlydGhkYXlzLiBJbiBzaG9ydCwgb25lIGNhbiBhZGR1Y2UgbWFueSBjYXNlcyB3aGVyZSB0aGUgc2FtZSB0aW1lcyBhbmQgc2Vhc29ucyBoYXZlIGJyb3VnaHQgb3Bwb3NpdGUgZm9ydHVuZXMgdXBvbiB0aGUgc2FtZSBtZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGRheSBvZiB0aGUgQWxsaWEgaXMgcmVnYXJkZWQgYnkgdGhlIFJvbWFucyBhcyBvbmUgb2YgdGhlIHVubHVja2llc3QsIGFuZCBpdHMgaW5mbHVlbmNlIGV4dGVuZHMgb3ZlciB0d28gb3RoZXIgZGF5cyBvZiBlYWNoIG1vbnRoIHRocm91Z2hvdXQgdGhlIHllYXIsIHNpbmNlIGluIHRoZSBwcmVzZW5jZSBvZiBjYWxhbWl0eSwgdGltaWRpdHkgYW5kIHN1cGVyc3RpdGlvbiBvZnRlbiBvdmVyZmxvdyBhbGwgYm91bmRzLiBIb3dldmVyLCB0aGlzIHN1YmplY3QgaGFzIGJlZW4gbW9yZSBjYXJlZnVsbHkgdHJlYXRlZCBpbiBteSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJvbWFuIFF1ZXN0aW9ucy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyNjlmIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwcC4gMjY5IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGRheSBvZiB0aGUgQWxsaWEgaXMgcmVnYXJkZWQgYnkgdGhlIFJvbWFucyBhcyBvbmUgb2YgdGhlIHVubHVja2llc3QsIGFuZCBpdHMgaW5mbHVlbmNlIGV4dGVuZHMgb3ZlciB0d28gb3RoZXIgZGF5cyBvZiBlYWNoIG1vbnRoIHRocm91Z2hvdXQgdGhlIHllYXIsIHNpbmNlIGluIHRoZSBwcmVzZW5jZSBvZiBjYWxhbWl0eSwgdGltaWRpdHkgYW5kIHN1cGVyc3RpdGlvbiBvZnRlbiBvdmVyZmxvdyBhbGwgYm91bmRzLiBIb3dldmVyLCB0aGlzIHN1YmplY3QgaGFzIGJlZW4gbW9yZSBjYXJlZnVsbHkgdHJlYXRlZCBpbiBteSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Um9tYW4gUXVlc3Rpb25zLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyNjlmIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHBwLiAyNjkgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiAyNjlmIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHBwLiAyNjkgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwcC4gMjY5IGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGhhZCB0aGUgR2F1bHMsIGFmdGVyIHRoaXMgYmF0dGxlLCBmb2xsb3dlZCBoYXJkIHVwb24gdGhlIGZ1Z2l0aXZlcywgbmF1Z2h0IHdvdWxkIGhhdmUgaGluZGVyZWQgUm9tZSBmcm9tIGJlaW5nIHV0dGVybHkgZGVzdHJveWVkIGFuZCBhbGwgdGhvc2Ugd2hvIHJlbWFpbmVkIGluIGhlciBmcm9tIHBlcmlzaGluZywgc3VjaCB3YXMgdGhlIHRlcnJvciB3aGljaCB0aGUgZnVnaXRpdmVzIGluZnVzZWQgaW50byB0aGUgb2NjdXBhbnRzIG9mIHRoZSBjaXR5LCBhbmQgd2l0aCBzdWNoIGNvbmZ1c2lvbiBhbmQgZGVsaXJpdW0gd2VyZSB0aGV5IHRoZW1zZWx2ZXMgb25jZSBtb3JlIGZpbGxlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGl0IHdhcywgdGhlIEJhcmJhcmlhbnMgY291bGQgbm90IHJlYWxpemUgdGhlIG1hZ25pdHVkZSBvZiB0aGVpciB2aWN0b3J5LCBhbmQgaW4gdGhlIGV4Y2VzcyBvZiB0aGVpciBqb3ksIHR1cm5lZCB0byByZXZlbHJ5IGFuZCB0aGUgZGlzdHJpYnV0aW9uIG9mIHRoZSBnb29kIHRoaW5ncyBjYXB0dXJlZCBpbiB0aGVpciBlbmVteSdzIGNhbXAuIEZvciB0aGlzIHJlYXNvbiB0aGUgdGhyb25ncyB3aG8gd2VyZSBmb3IgYWJhbmRvbmluZyB0aGUgY2l0eSBoYWQgYW1wbGUgdGltZSBmb3IgZmxpZ2h0LCBhbmQgdGhvc2Ugd2hvIHdlcmUgZm9yIHJlbWFpbmluZyBwbHVja2VkIHVwIGhvcGUgYW5kIHByZXBhcmVkIHRvIGRlZmVuZCB0aGVtc2VsdmVzLiBBYmFuZG9uaW5nIHRoZSByZXN0IG9mIHRoZSBjaXR5LCB0aGV5IGZlbmNlZCB0aGUgQ2FwaXRvbCB3aXRoIHJhbXBhcnRzIGFuZCBzdG9ja2VkIGl0IHdpdGggbWlzc2lsZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBmaXJzdCBjYXJlIHdhcyBmb3IgdGhlaXIgc2FjcmVkIHRoaW5ncywgbW9zdCBvZiB3aGljaCB0aGV5IGNhcnJpZWQgYXdheSB0byB0aGUgQ2FwaXRvbDsgdGhlIGZpcmUgb2YgVmVzdGEsIGhvd2V2ZXIsIHdhcyBzbmF0Y2hlZCB1cCBhbmQgY2FycmllZCBvZmYgYnkgdGhlIHZlc3RhbCB2aXJnaW5zIGluIHRoZWlyIGZsaWdodCwgYWxvbmcgd2l0aCB0aGUgb3RoZXIgc2FjcmVkIHRoaW5ncyBlbnRydXN0ZWQgdG8gdGhlaXIgY2FyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGhhZCB0aGUgR2F1bHMsIGFmdGVyIHRoaXMgYmF0dGxlLCBmb2xsb3dlZCBoYXJkIHVwb24gdGhlIGZ1Z2l0aXZlcywgbmF1Z2h0IHdvdWxkIGhhdmUgaGluZGVyZWQgUm9tZSBmcm9tIGJlaW5nIHV0dGVybHkgZGVzdHJveWVkIGFuZCBhbGwgdGhvc2Ugd2hvIHJlbWFpbmVkIGluIGhlciBmcm9tIHBlcmlzaGluZywgc3VjaCB3YXMgdGhlIHRlcnJvciB3aGljaCB0aGUgZnVnaXRpdmVzIGluZnVzZWQgaW50byB0aGUgb2NjdXBhbnRzIG9mIHRoZSBjaXR5LCBhbmQgd2l0aCBzdWNoIGNvbmZ1c2lvbiBhbmQgZGVsaXJpdW0gd2VyZSB0aGV5IHRoZW1zZWx2ZXMgb25jZSBtb3JlIGZpbGxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBpdCB3YXMsIHRoZSBCYXJiYXJpYW5zIGNvdWxkIG5vdCByZWFsaXplIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgdmljdG9yeSwgYW5kIGluIHRoZSBleGNlc3Mgb2YgdGhlaXIgam95LCB0dXJuZWQgdG8gcmV2ZWxyeSBhbmQgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgZ29vZCB0aGluZ3MgY2FwdHVyZWQgaW4gdGhlaXIgZW5lbXkncyBjYW1wLiBGb3IgdGhpcyByZWFzb24gdGhlIHRocm9uZ3Mgd2hvIHdlcmUgZm9yIGFiYW5kb25pbmcgdGhlIGNpdHkgaGFkIGFtcGxlIHRpbWUgZm9yIGZsaWdodCwgYW5kIHRob3NlIHdobyB3ZXJlIGZvciByZW1haW5pbmcgcGx1Y2tlZCB1cCBob3BlIGFuZCBwcmVwYXJlZCB0byBkZWZlbmQgdGhlbXNlbHZlcy4gQWJhbmRvbmluZyB0aGUgcmVzdCBvZiB0aGUgY2l0eSwgdGhleSBmZW5jZWQgdGhlIENhcGl0b2wgd2l0aCByYW1wYXJ0cyBhbmQgc3RvY2tlZCBpdCB3aXRoIG1pc3NpbGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBmaXJzdCBjYXJlIHdhcyBmb3IgdGhlaXIgc2FjcmVkIHRoaW5ncywgbW9zdCBvZiB3aGljaCB0aGV5IGNhcnJpZWQgYXdheSB0byB0aGUgQ2FwaXRvbDsgdGhlIGZpcmUgb2YgVmVzdGEsIGhvd2V2ZXIsIHdhcyBzbmF0Y2hlZCB1cCBhbmQgY2FycmllZCBvZmYgYnkgdGhlIHZlc3RhbCB2aXJnaW5zIGluIHRoZWlyIGZsaWdodCwgYWxvbmcgd2l0aCB0aGUgb3RoZXIgc2FjcmVkIHRoaW5ncyBlbnRydXN0ZWQgdG8gdGhlaXIgY2FyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ib3dldmVyLCBzb21lIHdyaXRlcnMgc3RhdGUgdGhhdCB0aGVzZSB2aXJnaW5zIGhhdmUgd2F0Y2ggYW5kIHdhcmQgb3ZlciBub3RoaW5nIG1vcmUgdGhhbiB0aGUgZXZlci1saXZpbmcgZmlyZSwgd2hpY2ggTnVtYSB0aGUgS2luZyBhcHBvaW50ZWQgdG8gYmUgd29yc2hpcHBlZCBhcyB0aGUgZmlyc3QgY2F1c2Ugb2YgYWxsIHRoaW5ncy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZmlyZSBwcm9kdWNlcyBtb3JlIG1vdGlvbiB0aGFuIGFueXRoaW5nIGVsc2UgaW4gbmF0dXJlLCBhbmQgYWxsIGJpcnRoIGlzIGEgbW9kZSBvZiBtb3Rpb24sIG9yIGlzIGFjY29tcGFuaWVkIGJ5IG1vdGlvbi4gQWxsIG90aGVyIHBvcnRpb25zIG9mIG1hdHRlciwgaW4gdGhlIGFic2VuY2Ugb2YgaGVhdCwgbGllIGluZXJ0IGFuZCBkZWFkLCB5ZWFybmluZyBmb3IgdGhlIGZvcmNlIG9mIGZpcmUgdG8gaW5mb3JtIHRoZW0sIGxpa2UgYSBzcGlyaXQsIGFuZCBvbiBpdHMgYWNjZXNzaW9uIGluIGFueSBtYW5uZXIgc29ldmVyLCB0aGV5IGJlY29tZSBjYXBhYmxlIG9mIGFjdGluZyBhbmQgYmVpbmcgYWN0ZWQgdXBvbi4gVGhpcyBwcmluY2lwbGUgb2YgZmlyZSwgdGhlbiwgTnVtYSwgd2hvIHdhcyBhbiBleHRyYW9yZGluYXJ5IG1hbiwgYW5kIHdob3NlIHdpc2RvbSBnYXZlIGhpbSB0aGUgcmVwdXRlIG9mIGhvbGRpbmcgY29udmVyc2Ugd2l0aCB0aGUgTXVzZXMsIGlzIHNhaWQgdG8gaGF2ZSBoYWxsb3dlZCBhbmQgb3JkZXJlZCB0byBiZSBrZXB0IHNsZWVwbGVzcywgdGhhdCBpdCBtaWdodCBpbWFnZSBmb3J0aCB0aGUgZXZlci1saXZpbmcgZm9yY2Ugd2hpY2ggb3JkZXJzIHRoZSB1bml2ZXJzZSBhcmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBzYXkgdGhhdCB0aGlzIGZpcmUgaXMga2VwdCBidXJuaW5nIGJlZm9yZSB0aGUgc2FjcmVkIHRoaW5ncyBieSB3YXkgb2YgcHVyaWZpY2F0aW9uLCBhcyBhbW9uZyB0aGUgR3JlZWtzLCBhbmQgdGhhdCBvdGhlciBvYmplY3RzIHdpdGhpbiB0aGUgdGVtcGxlIGFyZSBrZXB0IGhpZGRlbiBmcm9tIHRoZSBnYXplIG9mIGFsbCBleGNlcHQgdGhlc2UgdmlyZ2lucywgd2hvbSB0aGV5IGNhbGwgVmVzdGFscy4gQW5kIGEgdmVyeSBwcmV2YWxlbnQgc3RvcnkgaGFkIGl0IHRoYXQgdGhlIGZhbW91cyBQYWxsYWRpdW0gb2YgVHJveSB3YXMgaGlkZGVuIGF3YXkgdGhlcmUsIGhhdmluZyBiZWVuIGJyb3VnaHQgdG8gSXRhbHkgYnkgQWVuZWFzLiBUaGVyZSBhcmUgc29tZSB3aG8gc2F5IHRoYXQgaXQgaXMgdGhlIFNhbW90aHJhY2lhbiBpbWFnZXMgd2hpY2ggYXJlIGhpZGRlbiB0aGVyZSwgYW5kIHRoZXkgdGVsbCB0aGUgdGFsZSBvZiBEYXJkYW51cyBicmluZ2luZyB0aGVzZSB0byBUcm95LCBhZnRlciBoZSBoYWQgZm91bmRlZCB0aGF0IGNpdHksIGFuZCBjb25zZWNyYXRpbmcgdGhlbSB0aGVyZSB3aXRoIGNlbGVicmF0aW9uIG9mIHRoZWlyIHJpdGVzOyBhbmQgb2YgQWVuZWFzLCBhdCB0aGUgY2FwdHVyZSBvZiBUcm95LCBzdGVhbGluZyB0aGVtIGF3YXkgYW5kIHByZXNlcnZpbmcgdGhlbSB1bnRpbCBoZSBzZXR0bGVkIGluIEl0YWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5PdGhlcnMgc3RpbGwsIHByZXRlbmRpbmcgdG8gaGF2ZSBsYXJnZXIga25vd2xlZGdlIGluIHRoZXNlIG1hdHRlcnMsIHNheSB0aGF0IHR3byBzbWFsbCBqYXJzIGFyZSBzdG9yZWQgYXdheSB0aGVyZSwgb2Ygd2hpY2ggb25lIGlzIG9wZW4gYW5kIGVtcHR5LCBhbmQgdGhlIG90aGVyIGZ1bGwgYW5kIHNlYWxlZCB1cCwgYW5kIHRoYXQgYm90aCBhcmUgdmlzaWJsZSBvbmx5IHRvIHRoZSBob2x5IHZpcmdpbnMuIEJ1dCBvdGhlcnMgdGhpbmsgdGhhdCB0aGVzZSBrbm93aW5nIG9uZXMgaGF2ZSBiZWVuIGxlZCBhc3RyYXkgYnkgdGhlIGZhY3QgdGhhdCB0aGUgdmlyZ2lucywgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBhbSBub3cgc3BlYWtpbmcsIGNhc3QgdGhlIG1vc3Qgb2YgdGhlaXIgc2FjcmVkIHRyZWFzdXJlcyBpbnRvIHR3byBqYXJzLCBhbmQgaGlkIHRoZW0gdW5kZXJncm91bmQgaW4gdGhlIHRlbXBsZSBvZiBRdWlyaW51cywgd2hlbmNlIHRoYXQgcGxhY2UsIGRvd24gdG8gdGhlIHByZXNlbnQgdGltZSwgaGFzIHRoZSBuYW1lIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9saW9sYSw8L3E+IG9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SmFycy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBmaXJlIHByb2R1Y2VzIG1vcmUgbW90aW9uIHRoYW4gYW55dGhpbmcgZWxzZSBpbiBuYXR1cmUsIGFuZCBhbGwgYmlydGggaXMgYSBtb2RlIG9mIG1vdGlvbiwgb3IgaXMgYWNjb21wYW5pZWQgYnkgbW90aW9uLiBBbGwgb3RoZXIgcG9ydGlvbnMgb2YgbWF0dGVyLCBpbiB0aGUgYWJzZW5jZSBvZiBoZWF0LCBsaWUgaW5lcnQgYW5kIGRlYWQsIHllYXJuaW5nIGZvciB0aGUgZm9yY2Ugb2YgZmlyZSB0byBpbmZvcm0gdGhlbSwgbGlrZSBhIHNwaXJpdCwgYW5kIG9uIGl0cyBhY2Nlc3Npb24gaW4gYW55IG1hbm5lciBzb2V2ZXIsIHRoZXkgYmVjb21lIGNhcGFibGUgb2YgYWN0aW5nIGFuZCBiZWluZyBhY3RlZCB1cG9uLiBUaGlzIHByaW5jaXBsZSBvZiBmaXJlLCB0aGVuLCBOdW1hLCB3aG8gd2FzIGFuIGV4dHJhb3JkaW5hcnkgbWFuLCBhbmQgd2hvc2Ugd2lzZG9tIGdhdmUgaGltIHRoZSByZXB1dGUgb2YgaG9sZGluZyBjb252ZXJzZSB3aXRoIHRoZSBNdXNlcywgaXMgc2FpZCB0byBoYXZlIGhhbGxvd2VkIGFuZCBvcmRlcmVkIHRvIGJlIGtlcHQgc2xlZXBsZXNzLCB0aGF0IGl0IG1pZ2h0IGltYWdlIGZvcnRoIHRoZSBldmVyLWxpdmluZyBmb3JjZSB3aGljaCBvcmRlcnMgdGhlIHVuaXZlcnNlIGFyaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBzYXkgdGhhdCB0aGlzIGZpcmUgaXMga2VwdCBidXJuaW5nIGJlZm9yZSB0aGUgc2FjcmVkIHRoaW5ncyBieSB3YXkgb2YgcHVyaWZpY2F0aW9uLCBhcyBhbW9uZyB0aGUgR3JlZWtzLCBhbmQgdGhhdCBvdGhlciBvYmplY3RzIHdpdGhpbiB0aGUgdGVtcGxlIGFyZSBrZXB0IGhpZGRlbiBmcm9tIHRoZSBnYXplIG9mIGFsbCBleGNlcHQgdGhlc2UgdmlyZ2lucywgd2hvbSB0aGV5IGNhbGwgVmVzdGFscy4gQW5kIGEgdmVyeSBwcmV2YWxlbnQgc3RvcnkgaGFkIGl0IHRoYXQgdGhlIGZhbW91cyBQYWxsYWRpdW0gb2YgVHJveSB3YXMgaGlkZGVuIGF3YXkgdGhlcmUsIGhhdmluZyBiZWVuIGJyb3VnaHQgdG8gSXRhbHkgYnkgQWVuZWFzLiBUaGVyZSBhcmUgc29tZSB3aG8gc2F5IHRoYXQgaXQgaXMgdGhlIFNhbW90aHJhY2lhbiBpbWFnZXMgd2hpY2ggYXJlIGhpZGRlbiB0aGVyZSwgYW5kIHRoZXkgdGVsbCB0aGUgdGFsZSBvZiBEYXJkYW51cyBicmluZ2luZyB0aGVzZSB0byBUcm95LCBhZnRlciBoZSBoYWQgZm91bmRlZCB0aGF0IGNpdHksIGFuZCBjb25zZWNyYXRpbmcgdGhlbSB0aGVyZSB3aXRoIGNlbGVicmF0aW9uIG9mIHRoZWlyIHJpdGVzOyBhbmQgb2YgQWVuZWFzLCBhdCB0aGUgY2FwdHVyZSBvZiBUcm95LCBzdGVhbGluZyB0aGVtIGF3YXkgYW5kIHByZXNlcnZpbmcgdGhlbSB1bnRpbCBoZSBzZXR0bGVkIGluIEl0YWx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBzdGlsbCwgcHJldGVuZGluZyB0byBoYXZlIGxhcmdlciBrbm93bGVkZ2UgaW4gdGhlc2UgbWF0dGVycywgc2F5IHRoYXQgdHdvIHNtYWxsIGphcnMgYXJlIHN0b3JlZCBhd2F5IHRoZXJlLCBvZiB3aGljaCBvbmUgaXMgb3BlbiBhbmQgZW1wdHksIGFuZCB0aGUgb3RoZXIgZnVsbCBhbmQgc2VhbGVkIHVwLCBhbmQgdGhhdCBib3RoIGFyZSB2aXNpYmxlIG9ubHkgdG8gdGhlIGhvbHkgdmlyZ2lucy4gQnV0IG90aGVycyB0aGluayB0aGF0IHRoZXNlIGtub3dpbmcgb25lcyBoYXZlIGJlZW4gbGVkIGFzdHJheSBieSB0aGUgZmFjdCB0aGF0IHRoZSB2aXJnaW5zLCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIGFtIG5vdyBzcGVha2luZywgY2FzdCB0aGUgbW9zdCBvZiB0aGVpciBzYWNyZWQgdHJlYXN1cmVzIGludG8gdHdvIGphcnMsIGFuZCBoaWQgdGhlbSB1bmRlcmdyb3VuZCBpbiB0aGUgdGVtcGxlIG9mIFF1aXJpbnVzLCB3aGVuY2UgdGhhdCBwbGFjZSwgZG93biB0byB0aGUgcHJlc2VudCB0aW1lLCBoYXMgdGhlIG5hbWUgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbGlvbGEsPC9xPiBvciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SmFycy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIgdGhhdCBtYXkgYmUsIHRoZXNlIHZpcmdpbnMgdG9vayB0aGUgY2hvaWNlc3QgYW5kIG1vc3QgaW1wb3J0YW50IG9mIHRoZSBzYWNyZWQgb2JqZWN0cyBhbmQgZmxlZCBhd2F5IGFsb25nIHRoZSByaXZlci4gVGhlcmUgaXQgY2hhbmNlZCB0aGF0IEx1Y2l1cyBBbGJpbml1cywgYSBtYW4gb2YgdGhlIGNvbW1vbiBwZW9wbGUsIHdhcyBhbW9uZyB0aGUgZnVnaXRpdmVzLCBjYXJyeWluZyBvZmYgaGlzIHdpZmUgYW5kIGxpdHRsZSBjaGlsZHJlbiwgd2l0aCB0aGUgbW9zdCBuZWNlc3NhcnkgaG91c2Vob2xkIGdvb2RzLCB1cG9uIGEgd2FnZ29uLiBXaGVuIGhlIHNhdyB0aGUgdmlyZ2lucyB3aXRoIHRoZSBzYWNyZWQgc3ltYm9scyBvZiB0aGUgZ29kcyBpbiB0aGVpciBib3NvbXMsIG1ha2luZyB0aGVpciB3YXkgYWxvbmcgdW5hdHRlbmRlZCBhbmQgaW4gZ3JlYXQgZGlzdHJlc3MsIGhlIHNwZWVkaWx5IHRvb2sgaGlzIHdpZmUsIHdpdGggdGhlIGNoaWxkcmVuIGFuZCB0aGUgaG91c2Vob2xkIGdvb2RzLCBkb3duIGZyb20gdGhlIHdhZ2dvbiwgYW5kIHN1ZmZlcmVkIHRoZSB2aXJnaW5zIHRvIG1vdW50IHVwb24gaXQgYW5kIG1ha2UgdGhlaXIgZXNjYXBlIHRvIGEgR3JlZWsgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBwaW91cyBhY3Qgb2YgQWxiaW5pdXMsIGFuZCB0aGUgY29uc3BpY3VvdXMgaG9ub3VyIHdoaWNoIGhlIHNob3dlZCB0aGUgZ29kcyBpbiBhIHNlYXNvbiBvZiB0aGUgZ3JlYXRlc3QgZGFuZ2VyLCBjb3VsZCBub3Qgd2VsbCBiZSBwYXNzZWQgb3ZlciBpbiBzaWxlbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciB0aGF0IG1heSBiZSwgdGhlc2UgdmlyZ2lucyB0b29rIHRoZSBjaG9pY2VzdCBhbmQgbW9zdCBpbXBvcnRhbnQgb2YgdGhlIHNhY3JlZCBvYmplY3RzIGFuZCBmbGVkIGF3YXkgYWxvbmcgdGhlIHJpdmVyLiBUaGVyZSBpdCBjaGFuY2VkIHRoYXQgTHVjaXVzIEFsYmluaXVzLCBhIG1hbiBvZiB0aGUgY29tbW9uIHBlb3BsZSwgd2FzIGFtb25nIHRoZSBmdWdpdGl2ZXMsIGNhcnJ5aW5nIG9mZiBoaXMgd2lmZSBhbmQgbGl0dGxlIGNoaWxkcmVuLCB3aXRoIHRoZSBtb3N0IG5lY2Vzc2FyeSBob3VzZWhvbGQgZ29vZHMsIHVwb24gYSB3YWdnb24uIFdoZW4gaGUgc2F3IHRoZSB2aXJnaW5zIHdpdGggdGhlIHNhY3JlZCBzeW1ib2xzIG9mIHRoZSBnb2RzIGluIHRoZWlyIGJvc29tcywgbWFraW5nIHRoZWlyIHdheSBhbG9uZyB1bmF0dGVuZGVkIGFuZCBpbiBncmVhdCBkaXN0cmVzcywgaGUgc3BlZWRpbHkgdG9vayBoaXMgd2lmZSwgd2l0aCB0aGUgY2hpbGRyZW4gYW5kIHRoZSBob3VzZWhvbGQgZ29vZHMsIGRvd24gZnJvbSB0aGUgd2FnZ29uLCBhbmQgc3VmZmVyZWQgdGhlIHZpcmdpbnMgdG8gbW91bnQgdXBvbiBpdCBhbmQgbWFrZSB0aGVpciBlc2NhcGUgdG8gYSBHcmVlayBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGlvdXMgYWN0IG9mIEFsYmluaXVzLCBhbmQgdGhlIGNvbnNwaWN1b3VzIGhvbm91ciB3aGljaCBoZSBzaG93ZWQgdGhlIGdvZHMgaW4gYSBzZWFzb24gb2YgdGhlIGdyZWF0ZXN0IGRhbmdlciwgY291bGQgbm90IHdlbGwgYmUgcGFzc2VkIG92ZXIgaW4gc2lsZW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgdGhlIHByaWVzdHMgb2YgdGhlIG90aGVyIGdvZHMsIGFuZCB0aGUgYWdlZCBtZW4gd2hvIGhhZCBiZWVuIGNvbnN1bHMgYW5kIGNlbGVicmF0ZWQgdHJpdW1waHMsIGNvdWxkIG5vdCBlbmR1cmUgdG8gbGVhdmUgdGhlIGNpdHkuIFNvIHRoZXkgcHV0IG9uIHRoZWlyIHJvYmVzIG9mIHN0YXRlIGFuZCBjZXJlbW9ueSwgZm9sbG93aW5nIHRoZSBsZWFkIG9mIEZhYml1cywgdGhlIHBvbnRpZmV4IG1heGltdXMsIGFuZCB2b3dlZCB0aGUgZ29kcyB0aGF0IHRoZXkgd291bGQgZGV2b3RlIHRoZW1zZWx2ZXMgdG8gZGVhdGggaW4gdGhlaXIgY291bnRyeSdzIGJlaGFsZi4gVGhlbiB0aGV5IHNhdCB0aGVtc2VsdmVzIGRvd24sIHRodXMgYXJyYXllZCwgb24gdGhlaXIgaXZvcnkgY2hhaXJzIGluIHRoZSBmb3J1bSwgYW5kIGF3YWl0ZWQgdGhlaXIgZmF0ZS4KCQkJPC9wPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgdGhpcmQgZGF5IGFmdGVyIHRoZSBiYXR0bGUsIEJyZW5udXMgY2FtZSB1cCB0byB0aGUgY2l0eSB3aXRoIGhpcyBhcm15LiBGaW5kaW5nIGl0cyBnYXRlcyBvcGVuIGFuZCBpdHMgd2FsbHMgd2l0aG91dCBkZWZlbmRlcnMsIGF0IGZpcnN0IGhlIGZlYXJlZCBhIHRyZWFjaGVyb3VzIGFtYnVzaCwgYmVpbmcgdW5hYmxlIHRvIGJlbGlldmUgdGhhdCB0aGUgUm9tYW5zIHdlcmUgaW4gc3VjaCB1dHRlciBkZXNwYWlyLiBCdXQgd2hlbiBoZSByZWFsaXNlZCB0aGUgdHJ1dGgsIGhlIG1hcmNoZWQgaW4gYnkgdGhlIENvbGxpbmUgZ2F0ZSwgYW5kIHRvb2sgUm9tZS4gVGhpcyB3YXMgYSBsaXR0bGUgbW9yZSB0aGFuIHRocmVlIGh1bmRyZWQgYW5kIHNpeHR5IHllYXJzIGZyb20gaGVyIGZvdW5kYXRpb24sIGlmIG9uZSBjYW4gYmVsaWV2ZSB0aGF0IGFueSBhY2N1cmF0ZSBjaHJvbm9sb2d5IGhhcyBiZWVuIHByZXNlcnZlZCBpbiB0aGlzIG1hdHRlciwgd2hlbiB0aGF0IG9mIGV2ZW4gbGF0ZXIgZXZlbnRzIGlzIGRpc3B1dGVkLCBvd2luZyB0byB0aGUgY29uZnVzaW9uIGNhdXNlZCBieSB0aGlzIHZlcnkgZGlzYXN0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdvdWxkIHNlZW0gdGhhdCBzb21lIHZhZ3VlIHRpZGluZ3Mgb2YgdGhlIGNhbGFtaXR5IGFuZCBjYXB0dXJlIG9mIHRoZSBjaXR5IG1hZGUgdGhlaXIgd2F5IGF0IG9uY2UgdG8gR3JlZWNlLiBGb3IgSGVyYWNsZWlkZXMgUG9udGljdXMsIHdobyBsaXZlZCBub3QgbG9uZyBhZnRlciB0aGF0IHRpbWUsIGluIGhpcyB0cmVhdGlzZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIHRoZSBzb3VsLDwvcT4gc2F5cyB0aGF0IG91dCBvZiB0aGUgV2VzdCBhIHN0b3J5IHByZXZhaWxlZCwgaG93IGFuIGFybXkgb2YgSHlwZXJib3JlYW5zIGhhZCBjb21lIGZyb20gYWZhciBhbmQgY2FwdHVyZWQgYSBHcmVlayBjaXR5IGNhbGxlZCBSb21lLCBzaXR1YXRlZCBzb21ld2hlcmUgb24gdGhlIHNob3JlcyBvZiB0aGUgR3JlYXQgU2VhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBjYW5ub3Qgd29uZGVyIHRoYXQgc28gZmFidWxvdXMgYW5kIGZpY3RpdGlvdXMgYSB3cml0ZXIgYXMgSGVyYWNsZWlkZXMgc2hvdWxkIGRlY2sgb3V0IHRoZSB0cnVlIHN0b3J5IG9mIHRoZSBjYXB0dXJlIG9mIFJvbWUgd2l0aCBoaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IeXBlcmJvcmVhbnM8L3E+IGFuZCBoaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HcmVhdCBTZWEuPC9xPiBCdXQgQXJpc3RvdGxlIHRoZSBwaGlsb3NvcGhlciBjbGVhcmx5IGhhZCBhY2N1cmF0ZSB0aWRpbmdzIG9mIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5IGJ5IHRoZSBHYXVscywgYW5kIHlldCBoZSBzYXlzIHRoYXQgaXRzIHNhdmlvdXIgd2FzIEx1Y2l1cywgYWx0aG91Z2ggdGhlIGZvcmVuYW1lIG9mIENhbWlsbHVzIHdhcyBub3QgTHVjaXVzLCBidXQgTWFyY3VzLiBIb3dldmVyLCB0aGVzZSBkZXRhaWxzIHdlcmUgbWF0dGVycyBvZiBjb25qZWN0dXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIHRoaXJkIGRheSBhZnRlciB0aGUgYmF0dGxlLCBCcmVubnVzIGNhbWUgdXAgdG8gdGhlIGNpdHkgd2l0aCBoaXMgYXJteS4gRmluZGluZyBpdHMgZ2F0ZXMgb3BlbiBhbmQgaXRzIHdhbGxzIHdpdGhvdXQgZGVmZW5kZXJzLCBhdCBmaXJzdCBoZSBmZWFyZWQgYSB0cmVhY2hlcm91cyBhbWJ1c2gsIGJlaW5nIHVuYWJsZSB0byBiZWxpZXZlIHRoYXQgdGhlIFJvbWFucyB3ZXJlIGluIHN1Y2ggdXR0ZXIgZGVzcGFpci4gQnV0IHdoZW4gaGUgcmVhbGlzZWQgdGhlIHRydXRoLCBoZSBtYXJjaGVkIGluIGJ5IHRoZSBDb2xsaW5lIGdhdGUsIGFuZCB0b29rIFJvbWUuIFRoaXMgd2FzIGEgbGl0dGxlIG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIGFuZCBzaXh0eSB5ZWFycyBmcm9tIGhlciBmb3VuZGF0aW9uLCBpZiBvbmUgY2FuIGJlbGlldmUgdGhhdCBhbnkgYWNjdXJhdGUgY2hyb25vbG9neSBoYXMgYmVlbiBwcmVzZXJ2ZWQgaW4gdGhpcyBtYXR0ZXIsIHdoZW4gdGhhdCBvZiBldmVuIGxhdGVyIGV2ZW50cyBpcyBkaXNwdXRlZCwgb3dpbmcgdG8gdGhlIGNvbmZ1c2lvbiBjYXVzZWQgYnkgdGhpcyB2ZXJ5IGRpc2FzdGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdvdWxkIHNlZW0gdGhhdCBzb21lIHZhZ3VlIHRpZGluZ3Mgb2YgdGhlIGNhbGFtaXR5IGFuZCBjYXB0dXJlIG9mIHRoZSBjaXR5IG1hZGUgdGhlaXIgd2F5IGF0IG9uY2UgdG8gR3JlZWNlLiBGb3IgSGVyYWNsZWlkZXMgUG9udGljdXMsIHdobyBsaXZlZCBub3QgbG9uZyBhZnRlciB0aGF0IHRpbWUsIGluIGhpcyB0cmVhdGlzZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIHNvdWwsPC9xPiBzYXlzIHRoYXQgb3V0IG9mIHRoZSBXZXN0IGEgc3RvcnkgcHJldmFpbGVkLCBob3cgYW4gYXJteSBvZiBIeXBlcmJvcmVhbnMgaGFkIGNvbWUgZnJvbSBhZmFyIGFuZCBjYXB0dXJlZCBhIEdyZWVrIGNpdHkgY2FsbGVkIFJvbWUsIHNpdHVhdGVkIHNvbWV3aGVyZSBvbiB0aGUgc2hvcmVzIG9mIHRoZSBHcmVhdCBTZWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBJIGNhbm5vdCB3b25kZXIgdGhhdCBzbyBmYWJ1bG91cyBhbmQgZmljdGl0aW91cyBhIHdyaXRlciBhcyBIZXJhY2xlaWRlcyBzaG91bGQgZGVjayBvdXQgdGhlIHRydWUgc3Rvcnkgb2YgdGhlIGNhcHR1cmUgb2YgUm9tZSB3aXRoIGhpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SHlwZXJib3JlYW5zPC9xPiBhbmQgaGlzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HcmVhdCBTZWEuPC9xPiBCdXQgQXJpc3RvdGxlIHRoZSBwaGlsb3NvcGhlciBjbGVhcmx5IGhhZCBhY2N1cmF0ZSB0aWRpbmdzIG9mIHRoZSBjYXB0dXJlIG9mIHRoZSBjaXR5IGJ5IHRoZSBHYXVscywgYW5kIHlldCBoZSBzYXlzIHRoYXQgaXRzIHNhdmlvdXIgd2FzIEx1Y2l1cywgYWx0aG91Z2ggdGhlIGZvcmVuYW1lIG9mIENhbWlsbHVzIHdhcyBub3QgTHVjaXVzLCBidXQgTWFyY3VzLiBIb3dldmVyLCB0aGVzZSBkZXRhaWxzIHdlcmUgbWF0dGVycyBvZiBjb25qZWN0dXJlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhhZCBvY2N1cGllZCBSb21lLCBCcmVubnVzIHN1cnJvdW5kZWQgdGhlIENhcGl0b2wgd2l0aCBhIGd1YXJkLiBIZSBoaW1zZWxmIHdlbnQgZG93biB0aHJvdWdoIHRoZSBmb3J1bSwgYW5kIHdhcyBhbWF6ZWQgdG8gc2VlIHRoZSBtZW4gc2l0dGluZyB0aGVyZSBpbiBwdWJsaWMgc3RhdGUgYW5kIHBlcmZlY3Qgc2lsZW5jZS4gVGhleSBuZWl0aGVyIHJvc2UgdXAgdG8gbWVldCB0aGVpciBlbmVtaWVzIHdoZW4gdGhleSBhcHByb2FjaGVkLCBub3IgZGlkIHRoZXkgY2hhbmdlIGNvdW50ZW5hbmNlIG9yIGNvbG91ciwgYnV0IHNhdCB0aGVyZSBxdWlldGx5LCBhdCBlYXNlIGFuZCB3aXRob3V0IGZlYXIsIGxlYW5pbmcgb24gdGhlaXIgc3RhdmVzIGFuZCBnYXppbmcgaW50byBvbmUgYW5vdGhlcidzIGZhY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR2F1bHMgd2VyZSBhbWF6ZWQgYW5kIHBlcnBsZXhlZCBhdCB0aGUgdW53b250ZWQgc2lnaHQsIGFuZCBmb3IgYSBsb25nIHRpbWUgaGVzaXRhdGVkIHRvIGFwcHJvYWNoIGFuZCB0b3VjaCB0aGVtLCByZWdhcmRpbmcgdGhlbSBhcyBzdXBlcmlvciBiZWluZ3MuIEJ1dCBhdCBsYXN0IG9uZSBvZiB0aGVtLCBwbHVja2luZyB1cCBoaXMgY291cmFnZSwgZHJldyBuZWFyIFBhcGlyaXVzIE1hcmN1cywgYW5kIHN0cmV0Y2hpbmcgb3V0IGhpcyBoYW5kLCBnZW50bHkgZ3Jhc3BlZCBoaXMgY2hpbiBhbmQgc3Ryb2tlZCBoaXMgbG9uZyBiZWFyZCwgd2hlcmV1cG9uIFBhcGlyaXVzLCB3aXRoIGhpcyBzdGFmZiwgc21vdGUgaGltIGEgY3J1c2hpbmcgYmxvdyBvbiB0aGUgaGVhZC4gVGhlbiB0aGUgQmFyYmFyaWFuIGRyZXcgaGlzIHN3b3JkIGFuZCBraWxsZWQgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGF0LCB0aGV5IGZlbGwgdXBvbiB0aGUgcmVzdCBhbmQgc2xldyB0aGVtLCBtYWRlIGF3YXkgd2l0aCBldmVyeSBvbmUgZWxzZSB0aGV5IG1ldCwgc2Fja2VkIGFuZCBwbHVuZGVyZWQgdGhlIGhvdXNlcyBvZiB0aGUgY2l0eSBmb3IgbWFueSBkYXlzIHRvZ2V0aGVyLCBhbmQgZmluYWxseSBidXJuZWQgdGhlbSBkb3duIGFuZCBsZXZlbGxlZCB0aGVtIHdpdGggdGhlIGdyb3VuZCwgaW4gdGhlaXIgd3JhdGggYXQgdGhlIGRlZmVuZGVycyBvZiB0aGUgQ2FwaXRvbC4gRm9yIHRoZXNlIHdvdWxkIG5vdCBzdXJyZW5kZXIgYXQgdGhlaXIgc3VtbW9ucywgYnV0IHdoZW4gdGhleSB3ZXJlIGF0dGFja2VkLCBhY3R1YWxseSByZXB1bHNlZCB0aGVpciBmb2VzIGZyb20gdGhlIHJhbXBhcnRzIHdpdGggbG9zcy4gVGhlcmVmb3JlIHRoZSBHYXVscyBpbmZsaWN0ZWQgZXZlcnkgb3V0cmFnZSB1cG9uIHRoZSBjaXR5LCBhbmQgcHV0IHRvIHRoZSBzd29yZCBhbGwgd2hvbSB0aGV5IGNhcHR1cmVkLCBtZW4gYW5kIHdvbWVuLCBvbGQgYW5kIHlvdW5nIGFsaWtlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIG9jY3VwaWVkIFJvbWUsIEJyZW5udXMgc3Vycm91bmRlZCB0aGUgQ2FwaXRvbCB3aXRoIGEgZ3VhcmQuIEhlIGhpbXNlbGYgd2VudCBkb3duIHRocm91Z2ggdGhlIGZvcnVtLCBhbmQgd2FzIGFtYXplZCB0byBzZWUgdGhlIG1lbiBzaXR0aW5nIHRoZXJlIGluIHB1YmxpYyBzdGF0ZSBhbmQgcGVyZmVjdCBzaWxlbmNlLiBUaGV5IG5laXRoZXIgcm9zZSB1cCB0byBtZWV0IHRoZWlyIGVuZW1pZXMgd2hlbiB0aGV5IGFwcHJvYWNoZWQsIG5vciBkaWQgdGhleSBjaGFuZ2UgY291bnRlbmFuY2Ugb3IgY29sb3VyLCBidXQgc2F0IHRoZXJlIHF1aWV0bHksIGF0IGVhc2UgYW5kIHdpdGhvdXQgZmVhciwgbGVhbmluZyBvbiB0aGVpciBzdGF2ZXMgYW5kIGdhemluZyBpbnRvIG9uZSBhbm90aGVyJ3MgZmFjZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHYXVscyB3ZXJlIGFtYXplZCBhbmQgcGVycGxleGVkIGF0IHRoZSB1bndvbnRlZCBzaWdodCwgYW5kIGZvciBhIGxvbmcgdGltZSBoZXNpdGF0ZWQgdG8gYXBwcm9hY2ggYW5kIHRvdWNoIHRoZW0sIHJlZ2FyZGluZyB0aGVtIGFzIHN1cGVyaW9yIGJlaW5ncy4gQnV0IGF0IGxhc3Qgb25lIG9mIHRoZW0sIHBsdWNraW5nIHVwIGhpcyBjb3VyYWdlLCBkcmV3IG5lYXIgUGFwaXJpdXMgTWFyY3VzLCBhbmQgc3RyZXRjaGluZyBvdXQgaGlzIGhhbmQsIGdlbnRseSBncmFzcGVkIGhpcyBjaGluIGFuZCBzdHJva2VkIGhpcyBsb25nIGJlYXJkLCB3aGVyZXVwb24gUGFwaXJpdXMsIHdpdGggaGlzIHN0YWZmLCBzbW90ZSBoaW0gYSBjcnVzaGluZyBibG93IG9uIHRoZSBoZWFkLiBUaGVuIHRoZSBCYXJiYXJpYW4gZHJldyBoaXMgc3dvcmQgYW5kIGtpbGxlZCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoYXQsIHRoZXkgZmVsbCB1cG9uIHRoZSByZXN0IGFuZCBzbGV3IHRoZW0sIG1hZGUgYXdheSB3aXRoIGV2ZXJ5IG9uZSBlbHNlIHRoZXkgbWV0LCBzYWNrZWQgYW5kIHBsdW5kZXJlZCB0aGUgaG91c2VzIG9mIHRoZSBjaXR5IGZvciBtYW55IGRheXMgdG9nZXRoZXIsIGFuZCBmaW5hbGx5IGJ1cm5lZCB0aGVtIGRvd24gYW5kIGxldmVsbGVkIHRoZW0gd2l0aCB0aGUgZ3JvdW5kLCBpbiB0aGVpciB3cmF0aCBhdCB0aGUgZGVmZW5kZXJzIG9mIHRoZSBDYXBpdG9sLiBGb3IgdGhlc2Ugd291bGQgbm90IHN1cnJlbmRlciBhdCB0aGVpciBzdW1tb25zLCBidXQgd2hlbiB0aGV5IHdlcmUgYXR0YWNrZWQsIGFjdHVhbGx5IHJlcHVsc2VkIHRoZWlyIGZvZXMgZnJvbSB0aGUgcmFtcGFydHMgd2l0aCBsb3NzLiBUaGVyZWZvcmUgdGhlIEdhdWxzIGluZmxpY3RlZCBldmVyeSBvdXRyYWdlIHVwb24gdGhlIGNpdHksIGFuZCBwdXQgdG8gdGhlIHN3b3JkIGFsbCB3aG9tIHRoZXkgY2FwdHVyZWQsIG1lbiBhbmQgd29tZW4sIG9sZCBhbmQgeW91bmcgYWxpa2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaWVnZSBsYXN0ZWQgYSBsb25nIHRpbWUsIGFuZCB0aGUgR2F1bHMgYmVnYW4gdG8gbGFjayBwcm92aXNpb25zLiBUaGV5IHRoZXJlZm9yZSBkaXZpZGVkIHRoZWlyIGZvcmNlcy4gU29tZSByZW1haW5lZCB3aXRoIHRoZWlyIGtpbmcgYW5kIHdhdGNoZWQgdGhlIENhcGl0b2wsIG90aGVycyByYXZhZ2VkIHRoZSBjb3VudHJ5IHJvdW5kIGFib3V0LCBmYWxsaW5nIHVwb24gdGhlIHZpbGxhZ2VzIGFuZCBzYWNraW5nIHRoZW0sIG5vdCBhbGwgdG9nZXRoZXIgaW4gb25lIGJvZHksIGh1dCBzY2F0dGVyZWQgYWJvdXQgYnkgY29tbWFuZHMgYW5kIGNvbXBhbmllcywgc29tZSBoZXJlLCBzb21lIHRoZXJlLCBtb3ZlZCBieSB0aGVpciBzdWNjZXNzZXMgdG8gZ3JlYXQgY29uZmlkZW5jZSBhbmQgdGhlIGZlYXIgb2Ygbm90aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxhcmdlc3QgYW5kIGJlc3QgZGlzY2lwbGluZWQgYm9keSBvZiB0aGVtIG1hcmNoZWQgdXBvbiB0aGUgY2l0eSBvZiBBcmRlYSwgd2hlcmUgQ2FtaWxsdXMgd2FzIHN0YXlpbmcgc2luY2UgaGlzIGV4aWxlLiBIZSBsaXZlZCBpbiBjb21wbGV0ZSByZXRpcmVtZW50IGFuZCBwcml2YWN5LCBpdCBpcyB0cnVlLCBidXQgY2hlcmlzaGVkIHRoZSBob3BlcyBhbmQgcGxhbnMgbm90IG9mIGEgbWFuIHdobyBlYWdlcmx5IGRlc2lyZWQgdG8gZXNjYXBlIHRoZSBub3RpY2UgYW5kIGhhbmRzIG9mIHRoZSBlbmVteSwgYnV0IG9mIG9uZSB3aG8gc291Z2h0IHRvIGF2ZW5nZSBoaW1zZWxmIHVwb24gdGhlbSBpZiBvY2Nhc2lvbiBvZmZlcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUsIHNlZWluZyB0aGF0IHRoZSBBcmRlYW5zIHdlcmUgb2Ygc3VmZmljaWVudCBudW1iZXJzLCBidXQgbGFja2VkIGNvdXJhZ2UsIHRocm91Z2ggdGhlIGluZXhwZXJpZW5jZSBhbmQgZWZmZW1pbmFjeSBvZiB0aGVpciBnZW5lcmFscywgaGUgYmVnYW4gdG8gcmVhc29uIHdpdGggdGhlIHlvdW5nIG1lbiBmaXJzdCwgdG8gdGhlIGVmZmVjdCB0aGF0IHRoZSBtaXNoYXAgb2YgdGhlIFJvbWFucyBvdWdodCBub3QgdG8gYmUgbGFpZCB0byB0aGUgdmFsb3VyIG9mIHRoZSBHYXVscywgbm9yIHRoZSBzdWZmZXJpbmdzIG9mIHRoYXQgaW5mYXR1YXRlZCBwZW9wbGUgdG8gdGhlIHByb3dlc3Mgb2YgbWVuIHdobyBkaWQgbm90IGRlc2VydmUgdGhlaXIgdmljdG9yeSwgYnV0IHJhdGhlciB0byB0aGUgZGljdGF0ZXMgb2YgZm9ydHVuZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGEgZmluZSB0aGluZywgaGUgc2FpZCwgZXZlbiBhdCBkYW5nZXJvdXMgcmlza3MsIHRvIHJlcGVsIHRoZSBhdHRhY2sgb2YgYW4gYWxpZW4gYW5kIGJhcmJhcm91cyBmb2xrLCB3aG9zZSBvbmx5IGVuZCBpbiBnZXR0aW5nIHRoZSBtYXN0ZXJ5IHdhcywgYXMgaW4gdGhlIHdvcmsgb2YgZmlyZSwgdGhlIHV0dGVyIGRlc3RydWN0aW9uIG9mIHdoYXQgaXQgY29ucXVlcmVkLiBCdXQgaW4gdGhlIHByZXNlbnQgY2FzZSwgaWYgdGhleSB3ZXJlIGJvbGQgYW5kIHplYWxvdXMsIGhlIHdvdWxkIGZpbmQgb2NjYXNpb24gdG8gZ2l2ZSB0aGVtIGEgdmljdG9yeSB3aXRob3V0IGFueSBkYW5nZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNpZWdlIGxhc3RlZCBhIGxvbmcgdGltZSwgYW5kIHRoZSBHYXVscyBiZWdhbiB0byBsYWNrIHByb3Zpc2lvbnMuIFRoZXkgdGhlcmVmb3JlIGRpdmlkZWQgdGhlaXIgZm9yY2VzLiBTb21lIHJlbWFpbmVkIHdpdGggdGhlaXIga2luZyBhbmQgd2F0Y2hlZCB0aGUgQ2FwaXRvbCwgb3RoZXJzIHJhdmFnZWQgdGhlIGNvdW50cnkgcm91bmQgYWJvdXQsIGZhbGxpbmcgdXBvbiB0aGUgdmlsbGFnZXMgYW5kIHNhY2tpbmcgdGhlbSwgbm90IGFsbCB0b2dldGhlciBpbiBvbmUgYm9keSwgaHV0IHNjYXR0ZXJlZCBhYm91dCBieSBjb21tYW5kcyBhbmQgY29tcGFuaWVzLCBzb21lIGhlcmUsIHNvbWUgdGhlcmUsIG1vdmVkIGJ5IHRoZWlyIHN1Y2Nlc3NlcyB0byBncmVhdCBjb25maWRlbmNlIGFuZCB0aGUgZmVhciBvZiBub3RoaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXJnZXN0IGFuZCBiZXN0IGRpc2NpcGxpbmVkIGJvZHkgb2YgdGhlbSBtYXJjaGVkIHVwb24gdGhlIGNpdHkgb2YgQXJkZWEsIHdoZXJlIENhbWlsbHVzIHdhcyBzdGF5aW5nIHNpbmNlIGhpcyBleGlsZS4gSGUgbGl2ZWQgaW4gY29tcGxldGUgcmV0aXJlbWVudCBhbmQgcHJpdmFjeSwgaXQgaXMgdHJ1ZSwgYnV0IGNoZXJpc2hlZCB0aGUgaG9wZXMgYW5kIHBsYW5zIG5vdCBvZiBhIG1hbiB3aG8gZWFnZXJseSBkZXNpcmVkIHRvIGVzY2FwZSB0aGUgbm90aWNlIGFuZCBoYW5kcyBvZiB0aGUgZW5lbXksIGJ1dCBvZiBvbmUgd2hvIHNvdWdodCB0byBhdmVuZ2UgaGltc2VsZiB1cG9uIHRoZW0gaWYgb2NjYXNpb24gb2ZmZXJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgc2VlaW5nIHRoYXQgdGhlIEFyZGVhbnMgd2VyZSBvZiBzdWZmaWNpZW50IG51bWJlcnMsIGJ1dCBsYWNrZWQgY291cmFnZSwgdGhyb3VnaCB0aGUgaW5leHBlcmllbmNlIGFuZCBlZmZlbWluYWN5IG9mIHRoZWlyIGdlbmVyYWxzLCBoZSBiZWdhbiB0byByZWFzb24gd2l0aCB0aGUgeW91bmcgbWVuIGZpcnN0LCB0byB0aGUgZWZmZWN0IHRoYXQgdGhlIG1pc2hhcCBvZiB0aGUgUm9tYW5zIG91Z2h0IG5vdCB0byBiZSBsYWlkIHRvIHRoZSB2YWxvdXIgb2YgdGhlIEdhdWxzLCBub3IgdGhlIHN1ZmZlcmluZ3Mgb2YgdGhhdCBpbmZhdHVhdGVkIHBlb3BsZSB0byB0aGUgcHJvd2VzcyBvZiBtZW4gd2hvIGRpZCBub3QgZGVzZXJ2ZSB0aGVpciB2aWN0b3J5LCBidXQgcmF0aGVyIHRvIHRoZSBkaWN0YXRlcyBvZiBmb3J0dW5lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhIGZpbmUgdGhpbmcsIGhlIHNhaWQsIGV2ZW4gYXQgZGFuZ2Vyb3VzIHJpc2tzLCB0byByZXBlbCB0aGUgYXR0YWNrIG9mIGFuIGFsaWVuIGFuZCBiYXJiYXJvdXMgZm9saywgd2hvc2Ugb25seSBlbmQgaW4gZ2V0dGluZyB0aGUgbWFzdGVyeSB3YXMsIGFzIGluIHRoZSB3b3JrIG9mIGZpcmUsIHRoZSB1dHRlciBkZXN0cnVjdGlvbiBvZiB3aGF0IGl0IGNvbnF1ZXJlZC4gQnV0IGluIHRoZSBwcmVzZW50IGNhc2UsIGlmIHRoZXkgd2VyZSBib2xkIGFuZCB6ZWFsb3VzLCBoZSB3b3VsZCBmaW5kIG9jY2FzaW9uIHRvIGdpdmUgdGhlbSBhIHZpY3Rvcnkgd2l0aG91dCBhbnkgZGFuZ2VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIGdhaW5pbmcgdGhlIHN1cHBvcnQgb2YgdGhlIHlvdW5nIG1lbiwgQ2FtaWxsdXMgd2VudCB0byB0aGUgcnVsZXJzIGFuZCBjb3VuY2lsbG9ycyBvZiBBcmRlYSwgYW5kIHdoZW4gaGUgaGFkIHdvbiB0aGVtIG92ZXIgYWxzbywgaGUgYXJtZWQgYWxsIHdobyB3ZXJlIG9mIGFnZSBmb3Igc2VydmljZSBhbmQga2VwdCB0aGVtIHRvZ2V0aGVyIHdpdGhpbiB0aGUgd2FsbHMsIHRoYXQgdGhleSBtaWdodCBub3QgYmUgcGVyY2VpdmVkIGJ5IHRoZSBlbmVteSwgd2hvIHdlcmUgbmVhci4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBoYWQgc2NvdXJlZCB0aGUgY291bnRyeSByb3VuZCBhYm91dCwgYW5kIGVuY2FtcGVkIGluIHRoZSBwbGFpbiwgd2l0aG91dCBjYXJlIG9yIGNvbmNlcm4sIGFuZCBoZWF2aWx5IGVuY3VtYmVyZWQgd2l0aCB0aGVpciBhYnVuZGFudCBib290eS4gV2hlbiBuaWdodCBoYWQgZmFsbGVuIHVwb24gdGhlbSwgcHV0dGluZyBhbiBlbmQgdG8gdGhlaXIgY2Fyb3VzYWxzLCBhbmQgc2lsZW5jZSByZWlnbmVkIHRocm91Z2hvdXQgdGhlaXIgY2FtcCwgQ2FtaWxsdXMsIGFjcXVhaW50ZWQgd2l0aCB0aGlzIGJ5IGhpcyBzY291dHMsIGxlZCBmb3J0aCB0aGUgQXJkZWFucy4gUGFzc2luZyBxdWlldGx5IG92ZXIgdGhlIGludGVydmVuaW5nIHNwYWNlLCB0aGV5IHJlYWNoZWQgdGhlIGNhbXAgYWJvdXQgbWlkbmlnaHQsIGFuZCB3aXRoIHNob3V0cyBhbmQgdHJ1bXBldCBibGFzdHMgb24gZXZlcnkgaGFuZCBjb25mb3VuZGVkIHRoZSBtZW4sIHdobyB3ZXJlIHNjYXJjZWx5IGJyb3VnaHQgdG8gdGhlaXIgc2Vuc2VzIGJ5IHRoZSBkaW4sIGhlYXZ5IGFzIHRoZXkgd2VyZSB3aXRoIGRydW5rZW5uZXNzIGFuZCBzbGVlcC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcgb2YgdGhlbSB3ZXJlIHNvYmVyZWQgYnkgZmVhciwgYXJtZWQgdGhlbXNlbHZlcywgYW5kIG1hZGUgcmVzaXN0YW5jZSB0byBDYW1pbGx1cyBhbmQgaGlzIG1lbiwgc28gdGhhdCB0aGV5IGZlbGwgZmlnaHRpbmc7IGJ1dCBtb3N0IHdlcmUgc3RpbGwgbWFzdGVyZWQgYnkgc2xlZXAgYW5kIHdpbmUgd2hlbiB0aGV5IHdlcmUgZmFsbGVuIHVwb24gYW5kIHNsYWluIHdpdGhvdXQgdGhlaXIgYXJtcy4gQSBmZXcgb25seSByYW4gZnJvbSB0aGUgY2FtcCwgdW5kZXIgY292ZXIgb2YgZGFya25lc3MsIGFuZCB3aGVuIGRheSBjYW1lLCB3ZXJlIHNlZW4gc3RyYWdnbGluZyBhYm91dCB0aGUgZmllbGRzLCBidXQgaG9yc2VtZW4gcHVyc3VlZCB0aGVtIGFuZCBjdXQgdGhlbSB0byBwaWVjZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGhhZCBzY291cmVkIHRoZSBjb3VudHJ5IHJvdW5kIGFib3V0LCBhbmQgZW5jYW1wZWQgaW4gdGhlIHBsYWluLCB3aXRob3V0IGNhcmUgb3IgY29uY2VybiwgYW5kIGhlYXZpbHkgZW5jdW1iZXJlZCB3aXRoIHRoZWlyIGFidW5kYW50IGJvb3R5LiBXaGVuIG5pZ2h0IGhhZCBmYWxsZW4gdXBvbiB0aGVtLCBwdXR0aW5nIGFuIGVuZCB0byB0aGVpciBjYXJvdXNhbHMsIGFuZCBzaWxlbmNlIHJlaWduZWQgdGhyb3VnaG91dCB0aGVpciBjYW1wLCBDYW1pbGx1cywgYWNxdWFpbnRlZCB3aXRoIHRoaXMgYnkgaGlzIHNjb3V0cywgbGVkIGZvcnRoIHRoZSBBcmRlYW5zLiBQYXNzaW5nIHF1aWV0bHkgb3ZlciB0aGUgaW50ZXJ2ZW5pbmcgc3BhY2UsIHRoZXkgcmVhY2hlZCB0aGUgY2FtcCBhYm91dCBtaWRuaWdodCwgYW5kIHdpdGggc2hvdXRzIGFuZCB0cnVtcGV0IGJsYXN0cyBvbiBldmVyeSBoYW5kIGNvbmZvdW5kZWQgdGhlIG1lbiwgd2hvIHdlcmUgc2NhcmNlbHkgYnJvdWdodCB0byB0aGVpciBzZW5zZXMgYnkgdGhlIGRpbiwgaGVhdnkgYXMgdGhleSB3ZXJlIHdpdGggZHJ1bmtlbm5lc3MgYW5kIHNsZWVwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkEgZmV3IG9mIHRoZW0gd2VyZSBzb2JlcmVkIGJ5IGZlYXIsIGFybWVkIHRoZW1zZWx2ZXMsIGFuZCBtYWRlIHJlc2lzdGFuY2UgdG8gQ2FtaWxsdXMgYW5kIGhpcyBtZW4sIHNvIHRoYXQgdGhleSBmZWxsIGZpZ2h0aW5nOyBidXQgbW9zdCB3ZXJlIHN0aWxsIG1hc3RlcmVkIGJ5IHNsZWVwIGFuZCB3aW5lIHdoZW4gdGhleSB3ZXJlIGZhbGxlbiB1cG9uIGFuZCBzbGFpbiB3aXRob3V0IHRoZWlyIGFybXMuIEEgZmV3IG9ubHkgcmFuIGZyb20gdGhlIGNhbXAsIHVuZGVyIGNvdmVyIG9mIGRhcmtuZXNzLCBhbmQgd2hlbiBkYXkgY2FtZSwgd2VyZSBzZWVuIHN0cmFnZ2xpbmcgYWJvdXQgdGhlIGZpZWxkcywgYnV0IGhvcnNlbWVuIHB1cnN1ZWQgdGhlbSBhbmQgY3V0IHRoZW0gdG8gcGllY2VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5SdW1vdXIgcXVpY2tseSBjYXJyaWVkIG5ld3Mgb2YgdGhpcyBleHBsb2l0IHRvIHRoZSBuZWlnaGJvdXJpbmcgY2l0aWVzLCBhbmQgY2FsbGVkIHRvIGFybXMgbWFueSBvZiB0aG9zZSB3aG8gd2VyZSBvZiBhZ2UgZm9yIHNlcnZpY2UsIHBhcnRpY3VsYXJseSB0aGUgUm9tYW5zIHdobyBoYWQgbWFkZSB0aGVpciBlc2NhcGUgZnJvbSB0aGUgYmF0dGxlIG9uIHRoZSBBbGxpYSwgYW5kIHdlcmUgaW4gVmVpaS4gVGhlc2UgbGFtZW50ZWQgYW1vbmcgdGhlbXNlbHZlcywgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9mIHdoYXQgYSBsZWFkZXIgaGFzIGhlYXZlbiByb2JiZWQgUm9tZSBpbiBDYW1pbGx1cywgb25seSB0byBhZG9ybiBBcmRlYSB3aXRoIGhpcyB2aWN0b3JpZXMhIFRoZSBjaXR5IHdoaWNoIGJvcmUgYW5kIHJlYXJlZCBzdWNoIGEgaGVybyBpcyBkZWFkIGFuZCBnb25lLCAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdlLCBmb3IgbGFjayBvZiBnZW5lcmFscywgc2l0IHBlbnQgdXAgd2l0aGluIGFsaWVuIHdhbGxzLCBhbmQgc2VlIEl0YWx5IHJ1aW5lZCBiZWZvcmUgb3VyIHZlcnkgZXllcy4gQ29tZSEgbGV0IHVzIHNlbmQgdG8gQXJkZWEgYW5kIGRlbWFuZCBvdXIgb3duIGdlbmVyYWwsIG9yIHRha2Ugb3VyIGFybXMgYW5kIGdvIG91cnNlbHZlcyB0byBoaW0hIEZvciBoZSBpcyBubyBsb25nZXIgYW4gZXhpbGUsIG5vciBhcmUgd2UgY2l0aXplbnMsIG5vdyB0aGF0IG91ciBjb3VudHJ5IGlzIG5vIG1vcmUsIGJ1dCBpcyBtYXN0ZXJlZCBieSB0aGUgZW5lbXkuPC9xPiBTbyBzYWlkLCBzbyBkb25lLCBhbmQgdGhleSBzZW50IGFuZCBhc2tlZCBDYW1pbGx1cyB0byB0YWtlIHRoZSBjb21tYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgcmVmdXNlZCB0byBkbyBzbyBiZWZvcmUgdGhlIGNpdGl6ZW5zIG9uIHRoZSBDYXBpdG9sIGhhZCBsZWdhbGx5IGVsZWN0ZWQgaGltLiBUaGV5IHdlcmUgcHJlc2VydmluZyB0aGUgY291bnRyeSwgYXMgaGUgdGhvdWdodCwgYW5kIGlmIHRoZXkgaGFkIGNvbW1hbmRzIGZvciBoaW0sIGhlIHdvdWxkIGdsYWRseSBvYmV5LCBidXQgYWdhaW5zdCB0aGVpciB3aXNoZXMgaGUgd291bGQgbWVkZGxlIHdpdGggbm90aGluZyB3aGF0c29ldmVyLiBUaGlzIG5vYmxlIHJlc3RyYWludCBvbiB0aGUgcGFydCBvZiBDYW1pbGx1cyB3YXMgbXVjaCBhZG1pcmVkLCBidXQgaXQgd2FzIGhhcmQgdG8gc2VlIGhvdyB0aGUgbWF0dGVyIGNvdWxkIGJlIHJlZmVycmVkIHRvIHRoZSBDYXBpdG9sLiBOYXkgcmF0aGVyLCBpdCBzZWVtZWQgdXR0ZXJseSBpbXBvc3NpYmxlLCB3aGlsZSB0aGUgZW5lbXkgaGVsZCB0aGUgY2l0eSwgZm9yIGEgbWVzc2VuZ2VyIHRvIGVsdWRlIHRoZW0gYW5kIHJlYWNoIHRoZSBhY3JvcG9saXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UnVtb3VyIHF1aWNrbHkgY2FycmllZCBuZXdzIG9mIHRoaXMgZXhwbG9pdCB0byB0aGUgbmVpZ2hib3VyaW5nIGNpdGllcywgYW5kIGNhbGxlZCB0byBhcm1zIG1hbnkgb2YgdGhvc2Ugd2hvIHdlcmUgb2YgYWdlIGZvciBzZXJ2aWNlLCBwYXJ0aWN1bGFybHkgdGhlIFJvbWFucyB3aG8gaGFkIG1hZGUgdGhlaXIgZXNjYXBlIGZyb20gdGhlIGJhdHRsZSBvbiB0aGUgQWxsaWEsIGFuZCB3ZXJlIGluIFZlaWkuIFRoZXNlIGxhbWVudGVkIGFtb25nIHRoZW1zZWx2ZXMsIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9mIHdoYXQgYSBsZWFkZXIgaGFzIGhlYXZlbiByb2JiZWQgUm9tZSBpbiBDYW1pbGx1cywgb25seSB0byBhZG9ybiBBcmRlYSB3aXRoIGhpcyB2aWN0b3JpZXMhIFRoZSBjaXR5IHdoaWNoIGJvcmUgYW5kIHJlYXJlZCBzdWNoIGEgaGVybyBpcyBkZWFkIGFuZCBnb25lLCAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2UsIGZvciBsYWNrIG9mIGdlbmVyYWxzLCBzaXQgcGVudCB1cCB3aXRoaW4gYWxpZW4gd2FsbHMsIGFuZCBzZWUgSXRhbHkgcnVpbmVkIGJlZm9yZSBvdXIgdmVyeSBleWVzLiBDb21lISBsZXQgdXMgc2VuZCB0byBBcmRlYSBhbmQgZGVtYW5kIG91ciBvd24gZ2VuZXJhbCwgb3IgdGFrZSBvdXIgYXJtcyBhbmQgZ28gb3Vyc2VsdmVzIHRvIGhpbSEgRm9yIGhlIGlzIG5vIGxvbmdlciBhbiBleGlsZSwgbm9yIGFyZSB3ZSBjaXRpemVucywgbm93IHRoYXQgb3VyIGNvdW50cnkgaXMgbm8gbW9yZSwgYnV0IGlzIG1hc3RlcmVkIGJ5IHRoZSBlbmVteS48L3E+IFNvIHNhaWQsIHNvIGRvbmUsIGFuZCB0aGV5IHNlbnQgYW5kIGFza2VkIENhbWlsbHVzIHRvIHRha2UgdGhlIGNvbW1hbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3ZSwgZm9yIGxhY2sgb2YgZ2VuZXJhbHMsIHNpdCBwZW50IHVwIHdpdGhpbiBhbGllbiB3YWxscywgYW5kIHNlZSBJdGFseSBydWluZWQgYmVmb3JlIG91ciB2ZXJ5IGV5ZXMuIENvbWUhIGxldCB1cyBzZW5kIHRvIEFyZGVhIGFuZCBkZW1hbmQgb3VyIG93biBnZW5lcmFsLCBvciB0YWtlIG91ciBhcm1zIGFuZCBnbyBvdXJzZWx2ZXMgdG8gaGltISBGb3IgaGUgaXMgbm8gbG9uZ2VyIGFuIGV4aWxlLCBub3IgYXJlIHdlIGNpdGl6ZW5zLCBub3cgdGhhdCBvdXIgY291bnRyeSBpcyBubyBtb3JlLCBidXQgaXMgbWFzdGVyZWQgYnkgdGhlIGVuZW15LjwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSByZWZ1c2VkIHRvIGRvIHNvIGJlZm9yZSB0aGUgY2l0aXplbnMgb24gdGhlIENhcGl0b2wgaGFkIGxlZ2FsbHkgZWxlY3RlZCBoaW0uIFRoZXkgd2VyZSBwcmVzZXJ2aW5nIHRoZSBjb3VudHJ5LCBhcyBoZSB0aG91Z2h0LCBhbmQgaWYgdGhleSBoYWQgY29tbWFuZHMgZm9yIGhpbSwgaGUgd291bGQgZ2xhZGx5IG9iZXksIGJ1dCBhZ2FpbnN0IHRoZWlyIHdpc2hlcyBoZSB3b3VsZCBtZWRkbGUgd2l0aCBub3RoaW5nIHdoYXRzb2V2ZXIuIFRoaXMgbm9ibGUgcmVzdHJhaW50IG9uIHRoZSBwYXJ0IG9mIENhbWlsbHVzIHdhcyBtdWNoIGFkbWlyZWQsIGJ1dCBpdCB3YXMgaGFyZCB0byBzZWUgaG93IHRoZSBtYXR0ZXIgY291bGQgYmUgcmVmZXJyZWQgdG8gdGhlIENhcGl0b2wuIE5heSByYXRoZXIsIGl0IHNlZW1lZCB1dHRlcmx5IGltcG9zc2libGUsIHdoaWxlIHRoZSBlbmVteSBoZWxkIHRoZSBjaXR5LCBmb3IgYSBtZXNzZW5nZXIgdG8gZWx1ZGUgdGhlbSBhbmQgcmVhY2ggdGhlIGFjcm9wb2xpcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXJlIHdhcyBhIGNlcnRhaW4geW91bmcgbWFuLCBQb250aXVzIENvbWluaXVzIGJ5IG5hbWUsIHdobyB3YXMsIGluIHNwaXRlIG9mIGhpcyBvcmRpbmFyeSBiaXJ0aCwgYSBsb3ZlciBvZiBnbG9yeSBhbmQgaG9ub3VyLiBIZSB2b2x1bnRlZXJlZCB0byBhdHRlbXB0IHRoZSB0YXNrLiBIZSB0b29rIG5vIGxldHRlciB3aXRoIGhpbSB0byB0aGUgZGVmZW5kZXJzIG9mIHRoZSBDYXBpdG9sLCBsZXN0IHRoaXMsIGluIHRoZSBldmVudCBvZiBoaXMgY2FwdHVyZSwgc2hvdWxkIGhlbHAgdGhlIGVuZW15IHRvIGRpc2NvdmVyIHRoZSBwdXJwb3NlIG9mIENhbWlsbHVzOyBidXQgdW5kZXIgdGhlIGNvYXJzZSBnYXJtZW50cyB3aGljaCBoZSB3b3JlLCBoZSBjYXJyaWVkIHNvbWUgcGllY2VzIG9mIGNvcmsuIFRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGpvdXJuZXkgd2FzIG1hZGUgYnkgZGF5bGlnaHQgYW5kIHdpdGhvdXQgZmVhcjsgYnV0IGFzIG5pZ2h0IGNhbWUgb24gaGUgZm91bmQgaGltc2VsZiBuZWFyIHRoZSBjaXR5LiBIZSBjb3VsZCBub3QgY3Jvc3MgdGhlIHJpdmVyIGJ5IHRoZSBicmlkZ2UsIHNpbmNlIHRoZSBCYXJiYXJpYW5zIHdlcmUgZ3VhcmRpbmcgaXQsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNvIGhlIHdyYXBwZWQgaGlzIGxpZ2h0IGFuZCBzY2FudHkgZ2FybWVudHMgYWJvdXQgaGlzIGhlYWQsIGZhc3RlbmVkIHRoZSBjb3JrcyB0byBoaXMgYm9keSwgYW5kIHRodXMgc3VwcG9ydGVkLCBzd2FtIGFjcm9zcywgY2FtZSBvdXQgb24gdGhlIG90aGVyIHNpZGUsIGFuZCB3ZW50IG9uIHRvd2FyZHMgdGhlIGNpdHkuIEFsd2F5cyBnaXZpbmcgYSB3aWRlIGJlcnRoIHRvIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gd2VyZSB3YXRjaGZ1bCBhbmQgd2FrZWZ1bCwgYXMgaGUganVkZ2VkIGJ5IHRoZWlyIGZpcmVzIGFuZCBub2lzZSwgaGUgbWFkZSBoaXMgd2F5IHRvIHRoZSBDYXJtZW50YWwgZ2F0ZSwgd2hlcmUgdGhlcmUgd2FzIHRoZSBtb3N0IHF1aWV0LCBhdCB3aGljaCB0aGUgQ2FwaXRvbGluZSBoaWxsIHdhcyBtb3N0IHNoZWVyIGFuZCBzdGVlcCwgYW5kIHdoaWNoIHdhcyBnaXJ0IGFib3V0IGJ5IGEgaHVnZSBhbmQgamFnZ2VkIGNsaWZmLiBVcCB0aGlzIGhlIG1vdW50ZWQgdW5wZXJjZWl2ZWQsIGFuZCBmaW5hbGx5IHJlYWNoZWQsIHdpdGggZ3JlYXQgcGFpbnMgYW5kIGRpZmZpY3VsdHksIHRoZSBzZW50cmllcyBwb3N0ZWQgd2hlcmUgdGhlIHdhbGwgd2FzIGxvd2VzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGFpbGluZyB0aGVtLCBhbmQgdGVsbGluZyB0aGVtIHdobyBoZSB3YXMsIGhlIHdhcyBwdWxsZWQgdXAgb3ZlciB0aGUgd2FsbCwgYW5kIHRha2VuIHRvIHRoZSBSb21hbiBtYWdpc3RyYXRlcy4gVGhlIFNlbmF0ZSBxdWlja2x5IGNvbnZlbmluZywgaGUgYXBwZWFyZWQgYmVmb3JlIGl0LCBhbm5vdW5jZWQgdGhlIHZpY3Rvcnkgb2YgQ2FtaWxsdXMsIGFib3V0IHdoaWNoIHRoZXkgaGFkIG5vdCBoZWFyZCwgYW5kIGV4cGxhaW5lZCB0byB0aGVtIHRoZSB3aWxsIGFuZCBwbGVhc3VyZSBvZiBoaXMgZmVsbG93LXNvbGRpZXJzLiBIZSBleGhvcnRlZCB0aGVtIHRvIGNvbmZpcm0gQ2FtaWxsdXMgaW4gaGlzIGNvbW1hbmQsIHNpbmNlIGhlIHdhcyB0aGUgb25seSBtYW4gd2hvbSB0aGUgY2l0aXplbnMgb3V0c2lkZSB3b3VsZCBvYmV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBTZW5hdGUgaGFkIGhlYXJkIGhpcyBtZXNzYWdlIGFuZCBkZWxpYmVyYXRlZCB1cG9uIGl0LCB0aGV5IGFwcG9pbnRlZCBDYW1pbGx1cyBkaWN0YXRvciwgYW5kIHNlbnQgUG9udGl1cyBiYWNrIGFnYWluIGJ5IHRoZSB3YXkgaGUgaGFkIGNvbWUsIHdoZXJlaW4gaGUgcmVwZWF0ZWQgaGlzIGZvcm1lciBnb29kIGZvcnR1bmUuIEZvciBoZSBlbHVkZWQgdGhlIGVuZW15J3Mgbm90aWNlIGFuZCBicm91Z2h0IHRoZSBTZW5hdGUncyBtZXNzYWdlIHRvIHRoZSBSb21hbnMgb3V0c2lkZSB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXJlIHdhcyBhIGNlcnRhaW4geW91bmcgbWFuLCBQb250aXVzIENvbWluaXVzIGJ5IG5hbWUsIHdobyB3YXMsIGluIHNwaXRlIG9mIGhpcyBvcmRpbmFyeSBiaXJ0aCwgYSBsb3ZlciBvZiBnbG9yeSBhbmQgaG9ub3VyLiBIZSB2b2x1bnRlZXJlZCB0byBhdHRlbXB0IHRoZSB0YXNrLiBIZSB0b29rIG5vIGxldHRlciB3aXRoIGhpbSB0byB0aGUgZGVmZW5kZXJzIG9mIHRoZSBDYXBpdG9sLCBsZXN0IHRoaXMsIGluIHRoZSBldmVudCBvZiBoaXMgY2FwdHVyZSwgc2hvdWxkIGhlbHAgdGhlIGVuZW15IHRvIGRpc2NvdmVyIHRoZSBwdXJwb3NlIG9mIENhbWlsbHVzOyBidXQgdW5kZXIgdGhlIGNvYXJzZSBnYXJtZW50cyB3aGljaCBoZSB3b3JlLCBoZSBjYXJyaWVkIHNvbWUgcGllY2VzIG9mIGNvcmsuIFRoZSBncmVhdGVyIHBhcnQgb2YgaGlzIGpvdXJuZXkgd2FzIG1hZGUgYnkgZGF5bGlnaHQgYW5kIHdpdGhvdXQgZmVhcjsgYnV0IGFzIG5pZ2h0IGNhbWUgb24gaGUgZm91bmQgaGltc2VsZiBuZWFyIHRoZSBjaXR5LiBIZSBjb3VsZCBub3QgY3Jvc3MgdGhlIHJpdmVyIGJ5IHRoZSBicmlkZ2UsIHNpbmNlIHRoZSBCYXJiYXJpYW5zIHdlcmUgZ3VhcmRpbmcgaXQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNvIGhlIHdyYXBwZWQgaGlzIGxpZ2h0IGFuZCBzY2FudHkgZ2FybWVudHMgYWJvdXQgaGlzIGhlYWQsIGZhc3RlbmVkIHRoZSBjb3JrcyB0byBoaXMgYm9keSwgYW5kIHRodXMgc3VwcG9ydGVkLCBzd2FtIGFjcm9zcywgY2FtZSBvdXQgb24gdGhlIG90aGVyIHNpZGUsIGFuZCB3ZW50IG9uIHRvd2FyZHMgdGhlIGNpdHkuIEFsd2F5cyBnaXZpbmcgYSB3aWRlIGJlcnRoIHRvIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gd2VyZSB3YXRjaGZ1bCBhbmQgd2FrZWZ1bCwgYXMgaGUganVkZ2VkIGJ5IHRoZWlyIGZpcmVzIGFuZCBub2lzZSwgaGUgbWFkZSBoaXMgd2F5IHRvIHRoZSBDYXJtZW50YWwgZ2F0ZSwgd2hlcmUgdGhlcmUgd2FzIHRoZSBtb3N0IHF1aWV0LCBhdCB3aGljaCB0aGUgQ2FwaXRvbGluZSBoaWxsIHdhcyBtb3N0IHNoZWVyIGFuZCBzdGVlcCwgYW5kIHdoaWNoIHdhcyBnaXJ0IGFib3V0IGJ5IGEgaHVnZSBhbmQgamFnZ2VkIGNsaWZmLiBVcCB0aGlzIGhlIG1vdW50ZWQgdW5wZXJjZWl2ZWQsIGFuZCBmaW5hbGx5IHJlYWNoZWQsIHdpdGggZ3JlYXQgcGFpbnMgYW5kIGRpZmZpY3VsdHksIHRoZSBzZW50cmllcyBwb3N0ZWQgd2hlcmUgdGhlIHdhbGwgd2FzIGxvd2VzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhaWxpbmcgdGhlbSwgYW5kIHRlbGxpbmcgdGhlbSB3aG8gaGUgd2FzLCBoZSB3YXMgcHVsbGVkIHVwIG92ZXIgdGhlIHdhbGwsIGFuZCB0YWtlbiB0byB0aGUgUm9tYW4gbWFnaXN0cmF0ZXMuIFRoZSBTZW5hdGUgcXVpY2tseSBjb252ZW5pbmcsIGhlIGFwcGVhcmVkIGJlZm9yZSBpdCwgYW5ub3VuY2VkIHRoZSB2aWN0b3J5IG9mIENhbWlsbHVzLCBhYm91dCB3aGljaCB0aGV5IGhhZCBub3QgaGVhcmQsIGFuZCBleHBsYWluZWQgdG8gdGhlbSB0aGUgd2lsbCBhbmQgcGxlYXN1cmUgb2YgaGlzIGZlbGxvdy1zb2xkaWVycy4gSGUgZXhob3J0ZWQgdGhlbSB0byBjb25maXJtIENhbWlsbHVzIGluIGhpcyBjb21tYW5kLCBzaW5jZSBoZSB3YXMgdGhlIG9ubHkgbWFuIHdob20gdGhlIGNpdGl6ZW5zIG91dHNpZGUgd291bGQgb2JleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIFNlbmF0ZSBoYWQgaGVhcmQgaGlzIG1lc3NhZ2UgYW5kIGRlbGliZXJhdGVkIHVwb24gaXQsIHRoZXkgYXBwb2ludGVkIENhbWlsbHVzIGRpY3RhdG9yLCBhbmQgc2VudCBQb250aXVzIGJhY2sgYWdhaW4gYnkgdGhlIHdheSBoZSBoYWQgY29tZSwgd2hlcmVpbiBoZSByZXBlYXRlZCBoaXMgZm9ybWVyIGdvb2QgZm9ydHVuZS4gRm9yIGhlIGVsdWRlZCB0aGUgZW5lbXkncyBub3RpY2UgYW5kIGJyb3VnaHQgdGhlIFNlbmF0ZSdzIG1lc3NhZ2UgdG8gdGhlIFJvbWFucyBvdXRzaWRlIHRoZSBjaXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBnYXZlIGVhZ2VyIHdlbGNvbWUgdG8gdGhlIHRpZGluZ3MsIHNvIHRoYXQgd2hlbiBDYW1pbGx1cyBjYW1lLCBoZSBmb3VuZCB0d2VudHkgdGhvdXNhbmQgbWVuIGFscmVhZHkgdW5kZXIgYXJtcy4gSGUgY29sbGVjdGVkIHN0aWxsIG1vcmUgZnJvbSB0aGUgYWxsaWVzLCBhbmQgbWFkZSBwcmVwYXJhdGlvbnMgZm9yIGhpcyBhdHRhY2suIFRodXMgQ2FtaWxsdXMgd2FzIGNob3NlbiBkaWN0YXRvciBmb3IgdGhlIHNlY29uZCB0aW1lLCBhbmQgcHJvY2VlZGluZyB0byBWZWlpLCBoZSBwdXQgaGltc2VsZiBhdCB0aGUgaGVhZCBvZiB0aGUgc29sZGllcnMgdGhlcmUsIGFuZCBjb2xsZWN0ZWQgbW9yZSBmcm9tIHRoZSBhbGxpZXMsIHdpdGggdGhlIHB1cnBvc2Ugb2YgYXR0YWNraW5nIHRoZSBlbmVteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgZ2F2ZSBlYWdlciB3ZWxjb21lIHRvIHRoZSB0aWRpbmdzLCBzbyB0aGF0IHdoZW4gQ2FtaWxsdXMgY2FtZSwgaGUgZm91bmQgdHdlbnR5IHRob3VzYW5kIG1lbiBhbHJlYWR5IHVuZGVyIGFybXMuIEhlIGNvbGxlY3RlZCBzdGlsbCBtb3JlIGZyb20gdGhlIGFsbGllcywgYW5kIG1hZGUgcHJlcGFyYXRpb25zIGZvciBoaXMgYXR0YWNrLiBUaHVzIENhbWlsbHVzIHdhcyBjaG9zZW4gZGljdGF0b3IgZm9yIHRoZSBzZWNvbmQgdGltZSwgYW5kIHByb2NlZWRpbmcgdG8gVmVpaSwgaGUgcHV0IGhpbXNlbGYgYXQgdGhlIGhlYWQgb2YgdGhlIHNvbGRpZXJzIHRoZXJlLCBhbmQgY29sbGVjdGVkIG1vcmUgZnJvbSB0aGUgYWxsaWVzLCB3aXRoIHRoZSBwdXJwb3NlIG9mIGF0dGFja2luZyB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGluIFJvbWUsIHNvbWUgb2YgdGhlIEJhcmJhcmlhbnMgY2hhbmNlZCB0byBwYXNzIGJ5IHRoZSBzcG90IHdoZXJlIFBvbnRpdXMgaGFkIG1hZGUgaGlzIHdheSBieSBuaWdodCB1cCB0byB0aGUgQ2FwaXRvbCwgYW5kIG5vdGljZWQgaW4gbWFueSBwbGFjZXMgdGhlIG1hcmtzIG1hZGUgYnkgaGlzIGhhbmRzIGFuZCBmZWV0IGluIGNsYW1iZXJpbmcgdXAsIGFuZCBtYW55IHBsYWNlcyBhbHNvIHdoZXJlIHRoZSBwbGFudHMgdGhhdCBncmV3IHVwb24gdGhlIHJvY2tzIGhhZCBiZWVuIHRvcm4gYXdheSwgYW5kIHRoZSBlYXJ0aCBkaXNwbGFjZWQuIFRoZXkgYWR2aXNlZCB0aGVpciBraW5nIG9mIHRoaXMsIGFuZCBoZSB0b28gY2FtZSBhbmQgbWFkZSBpbnNwZWN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIGhlIHNhaWQgbm90aGluZywgYnV0IHdoZW4gZXZlbmluZyBjYW1lLCBoZSBhc3NlbWJsZWQgdGhlIG5pbWJsZXN0IG1lbiBhbmQgdGhlIGJlc3QgbW91bnRhaW4tY2xpbWJlcnMgb2YgdGhlIEdhdWxzIGFuZCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGVuZW15IGhhdmUgc2hvd24gdXMgdGhhdCB0aGVyZSBpcyBhIHdheSB1cCB0byB0aGVtIG9mIHdoaWNoIHdlIGtuZXcgbm90LCBhbmQgb25lIHdoaWNoIG1lbiBjYW4gdHJhdmVyc2UgYW5kIHRyZWFkLiBJdCB3b3VsZCBiZSBhIGdyZWF0IHNoYW1lIGZvciB1cywgYWZ0ZXIgc3VjaCBhIGJlZ2lubmluZyBhcyB3ZSBoYXZlIG1hZGUsIHRvIGZhaWwgYXQgdGhlIGVuZCwgYW5kIHRvIGdpdmUgdGhlIHBsYWNlIHVwIGFzIGltcHJlZ25hYmxlLCB3aGVuIHRoZSBlbmVteSB0aGVtc2VsdmVzIHNob3cgdXMgd2hlcmUgaXQgY2FuIGJlIHRha2VuLiBGb3Igd2hlcmUgaXQgaXMgZWFzeSBmb3Igb25lIG1hbiB0byBhcHByb2FjaCBpdCwgdGhlcmUgaXQgd2lsbCBiZSBubyBkaWZmaWN1bHQgbWF0dGVyIGZvciBtYW55IHRvIGdvIG9uZSBieSBvbmUsIG5heSwgdGhleSB3aWxsIHN1cHBvcnQgYW5kIGFpZCBvbmUgYW5vdGhlciBncmVhdGx5IGluIHRoZSB1bmRlcnRha2luZy4gR2lmdHMgYW5kIGhvbm91cnMgYmVmaXR0aW5nIGhpcyB2YWxvdXIgc2hhbGwgYmUgZ2l2ZW4gdG8gZXZlcnkgbWFuLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIGhlIHNhaWQgbm90aGluZywgYnV0IHdoZW4gZXZlbmluZyBjYW1lLCBoZSBhc3NlbWJsZWQgdGhlIG5pbWJsZXN0IG1lbiBhbmQgdGhlIGJlc3QgbW91bnRhaW4tY2xpbWJlcnMgb2YgdGhlIEdhdWxzIGFuZCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgZW5lbXkgaGF2ZSBzaG93biB1cyB0aGF0IHRoZXJlIGlzIGEgd2F5IHVwIHRvIHRoZW0gb2Ygd2hpY2ggd2Uga25ldyBub3QsIGFuZCBvbmUgd2hpY2ggbWVuIGNhbiB0cmF2ZXJzZSBhbmQgdHJlYWQuIEl0IHdvdWxkIGJlIGEgZ3JlYXQgc2hhbWUgZm9yIHVzLCBhZnRlciBzdWNoIGEgYmVnaW5uaW5nIGFzIHdlIGhhdmUgbWFkZSwgdG8gZmFpbCBhdCB0aGUgZW5kLCBhbmQgdG8gZ2l2ZSB0aGUgcGxhY2UgdXAgYXMgaW1wcmVnbmFibGUsIHdoZW4gdGhlIGVuZW15IHRoZW1zZWx2ZXMgc2hvdyB1cyB3aGVyZSBpdCBjYW4gYmUgdGFrZW4uIEZvciB3aGVyZSBpdCBpcyBlYXN5IGZvciBvbmUgbWFuIHRvIGFwcHJvYWNoIGl0LCB0aGVyZSBpdCB3aWxsIGJlIG5vIGRpZmZpY3VsdCBtYXR0ZXIgZm9yIG1hbnkgdG8gZ28gb25lIGJ5IG9uZSwgbmF5LCB0aGV5IHdpbGwgc3VwcG9ydCBhbmQgYWlkIG9uZSBhbm90aGVyIGdyZWF0bHkgaW4gdGhlIHVuZGVydGFraW5nLiBHaWZ0cyBhbmQgaG9ub3VycyBiZWZpdHRpbmcgaGlzIHZhbG91ciBzaGFsbCBiZSBnaXZlbiB0byBldmVyeSBtYW4uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBzcGFrZSB0aGVpciBraW5nLCBhbmQgdGhlIEdhdWxzIGVhZ2VybHkgdW5kZXJ0b29rIHRvIGRvIGhpcyB3aWxsLiBBYm91dCBtaWRuaWdodCBhIGxhcmdlIGJhbmQgb2YgdGhlbSBzY2FsZWQgdGhlIGNsaWZmIGFuZCBtYWRlIHRoZWlyIHdheSB1cHdhcmQgaW4gc2lsZW5jZS4gVGhleSBjbGltYmVkIG9uIGFsbCBmb3VycyBvdmVyIHBsYWNlcyB3aGljaCB3ZXJlIHByZWNpcGl0b3VzIGFuZCByb3VnaCwgYnV0IHdoaWNoIHlpZWxkZWQgdG8gdGhlaXIgZWZmb3J0cyBiZXR0ZXIgdGhhbiB0aGV5IGhhZCBleHBlY3RlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+dW50aWwgdGhlIGZvcmVtb3N0IG9mIHRoZW0gcmVhY2hlZCB0aGUgaGVpZ2h0cywgcHV0IHRoZW1zZWx2ZXMgaW4gYXJyYXksIGFuZCBoYWQgYWxsIGJ1dCBzZWl6ZWQgdGhlIG91dHdvcmsgYW5kIGZhbGxlbiB1cG9uIHRoZSBzbGVlcGluZyB3YXRjaC4gTmVpdGhlciBtYW4gbm9yIGRvZyB3YXMgYXdhcmUgb2YgdGhlaXIgYXBwcm9hY2guIEJ1dCB0aGVyZSB3ZXJlIHNvbWUgc2FjcmVkIGdlZXNlIG5lYXIgdGhlIHRlbXBsZSBvZiBKdW5vLCB3aGljaCB3ZXJlIHVzdWFsbHkgZmVkIHdpdGhvdXQgc3RpbnQsIGJ1dCBhdCB0aGF0IHRpbWUsIHNpbmNlIHByb3Zpc2lvbnMgYmFyZWx5IHN1ZmZpY2VkIGZvciB0aGUgZ2Fycmlzb24gYWxvbmUsIHRoZXkgd2VyZSBuZWdsZWN0ZWQgYW5kIGluIGV2aWwgcGxpZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY3JlYXR1cmUgaXMgbmF0dXJhbGx5IHNoYXJwIG9mIGhlYXJpbmcgYW5kIGFmcmFpZCBvZiBldmVyeSBub2lzZSwgYW5kIHRoZXNlLCBiZWluZyBzcGVjaWFsbHkgd2FrZWZ1bCBhbmQgcmVzdGxlc3MgYnkgcmVhc29uIG9mIHRoZWlyIGh1bmdlciwgcGVyY2VpdmVkIHRoZSBhcHByb2FjaCBvZiB0aGUgR2F1bHMsIGRhc2hlZCBhdCB0aGVtIHdpdGggbG91ZCBjcmllcywgYW5kIHNvIHdha2VkIGFsbCB0aGUgZ2Fycmlzb24uIEF0IG9uY2UgdGhlIEJhcmJhcmlhbnMsIG5vdyB0aGF0IHRoZXkgd2VyZSBkZXRlY3RlZCwgc3BhcmVkIG5vIG5vaXNlLCBhbmQgY2FtZSBvbiBtb3JlIGltcGV0dW91c2x5IHRvIHRoZSBhdHRhY2suIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBkZWZlbmRlcnMsIHNuYXRjaGluZyB1cCBpbiBoYXN0ZSB3aGF0ZXZlciB3ZWFwb24gY2FtZSB0byBoYW5kLCBtYWRlIHRoZSBiZXN0IHNoaWZ0IHRoZXkgY291bGQuIE1hbmxpdXMgZmlyc3Qgb2YgYWxsLCBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCBtaWdodHkgaW4gYm9keSBhbmQgZXhjZWVkaW5nIHN0b3V0IG9mIGhlYXJ0LCBjb25mcm9udGluZyB0d28gb2YgdGhlIGVuZW15IGF0IG9uY2UsIGN1dCBvZmYgdGhlIHJpZ2h0IGhhbmQgb2Ygb25lIG9mIHRoZW0gd2l0aCBoaXMgc3dvcmQgYXMgaGUgd2FzIGxpZnRpbmcgaGlzIGJhdHRsZS1heGUsIGFuZCBkYXNoaW5nIGhpcyBzaGllbGQgaW50byB0aGUgZmFjZSBvZiB0aGUgb3RoZXIsIHR1bWJsZWQgaGltIGJhY2t3YXJkcyBkb3duIHRoZSBjbGlmZi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0YWtpbmcgaGlzIHN0YW5kIG9uIHRoZSB3YWxsIHdpdGggdGhvc2Ugd2hvIHJhbiB0byBoaXMgYWlkIGFuZCBmb3JtZWQgYWJvdXQgaGltLCBoZSByZXB1bHNlZCB0aGUgcmVzdCBvZiB0aGUgZW5lbXksIHdobyBoYWQgcmVhY2hlZCB0aGUgdG9wIGluIG5vIGdyZWF0IG51bWJlcnMsIGFuZCBzaG93ZWQgbm8gcHJvd2VzcyB0byBtYXRjaCB0aGVpciBkYXJpbmcuIFNvIHRoZSBSb21hbnMgZXNjYXBlZCBvdXQgb2YgdGhlaXIgcGVyaWwuIEF0IGJyZWFrIG9mIGRheSwgdGhleSBjYXN0IHRoZSBjYXB0YWluIG9mIHRoZSB3YXRjaCBkb3duIHRoZSBjbGlmZiBhbW9uZyB0aGUgZW5lbXksIGJ1dCB2b3RlZCB0byBNYW5saXVzIGEgbWVlZCBvZiB2aWN0b3J5IHdoaWNoIGRpZCBoaW0gbW9yZSBob25vdXIgdGhhbiBzZXJ2aWNlLiBUaGV5IGNvbGxlY3RlZCBmb3IgaGltIHRoZSByYXRpb25zIHdoaWNoIGVhY2ggbWFuIG9mIHRoZW0gcmVjZWl2ZWQgZm9yIG9uZSBkYXksIG5hbWVseSwgaGFsZiBhIHBvdW5kIG9mIG5hdGl2ZSBzcGVsdCwgUm9tYW4gd2VpZ2h0LCBhbmQgYW4gZWlnaHRoIG9mIGEgcGludCBvZiB3aW5lLCBHcmVlayBtZWFzdXJlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gc3Bha2UgdGhlaXIga2luZywgYW5kIHRoZSBHYXVscyBlYWdlcmx5IHVuZGVydG9vayB0byBkbyBoaXMgd2lsbC4gQWJvdXQgbWlkbmlnaHQgYSBsYXJnZSBiYW5kIG9mIHRoZW0gc2NhbGVkIHRoZSBjbGlmZiBhbmQgbWFkZSB0aGVpciB3YXkgdXB3YXJkIGluIHNpbGVuY2UuIFRoZXkgY2xpbWJlZCBvbiBhbGwgZm91cnMgb3ZlciBwbGFjZXMgd2hpY2ggd2VyZSBwcmVjaXBpdG91cyBhbmQgcm91Z2gsIGJ1dCB3aGljaCB5aWVsZGVkIHRvIHRoZWlyIGVmZm9ydHMgYmV0dGVyIHRoYW4gdGhleSBoYWQgZXhwZWN0ZWQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnVudGlsIHRoZSBmb3JlbW9zdCBvZiB0aGVtIHJlYWNoZWQgdGhlIGhlaWdodHMsIHB1dCB0aGVtc2VsdmVzIGluIGFycmF5LCBhbmQgaGFkIGFsbCBidXQgc2VpemVkIHRoZSBvdXR3b3JrIGFuZCBmYWxsZW4gdXBvbiB0aGUgc2xlZXBpbmcgd2F0Y2guIE5laXRoZXIgbWFuIG5vciBkb2cgd2FzIGF3YXJlIG9mIHRoZWlyIGFwcHJvYWNoLiBCdXQgdGhlcmUgd2VyZSBzb21lIHNhY3JlZCBnZWVzZSBuZWFyIHRoZSB0ZW1wbGUgb2YgSnVubywgd2hpY2ggd2VyZSB1c3VhbGx5IGZlZCB3aXRob3V0IHN0aW50LCBidXQgYXQgdGhhdCB0aW1lLCBzaW5jZSBwcm92aXNpb25zIGJhcmVseSBzdWZmaWNlZCBmb3IgdGhlIGdhcnJpc29uIGFsb25lLCB0aGV5IHdlcmUgbmVnbGVjdGVkIGFuZCBpbiBldmlsIHBsaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjcmVhdHVyZSBpcyBuYXR1cmFsbHkgc2hhcnAgb2YgaGVhcmluZyBhbmQgYWZyYWlkIG9mIGV2ZXJ5IG5vaXNlLCBhbmQgdGhlc2UsIGJlaW5nIHNwZWNpYWxseSB3YWtlZnVsIGFuZCByZXN0bGVzcyBieSByZWFzb24gb2YgdGhlaXIgaHVuZ2VyLCBwZXJjZWl2ZWQgdGhlIGFwcHJvYWNoIG9mIHRoZSBHYXVscywgZGFzaGVkIGF0IHRoZW0gd2l0aCBsb3VkIGNyaWVzLCBhbmQgc28gd2FrZWQgYWxsIHRoZSBnYXJyaXNvbi4gQXQgb25jZSB0aGUgQmFyYmFyaWFucywgbm93IHRoYXQgdGhleSB3ZXJlIGRldGVjdGVkLCBzcGFyZWQgbm8gbm9pc2UsIGFuZCBjYW1lIG9uIG1vcmUgaW1wZXR1b3VzbHkgdG8gdGhlIGF0dGFjay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBkZWZlbmRlcnMsIHNuYXRjaGluZyB1cCBpbiBoYXN0ZSB3aGF0ZXZlciB3ZWFwb24gY2FtZSB0byBoYW5kLCBtYWRlIHRoZSBiZXN0IHNoaWZ0IHRoZXkgY291bGQuIE1hbmxpdXMgZmlyc3Qgb2YgYWxsLCBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCBtaWdodHkgaW4gYm9keSBhbmQgZXhjZWVkaW5nIHN0b3V0IG9mIGhlYXJ0LCBjb25mcm9udGluZyB0d28gb2YgdGhlIGVuZW15IGF0IG9uY2UsIGN1dCBvZmYgdGhlIHJpZ2h0IGhhbmQgb2Ygb25lIG9mIHRoZW0gd2l0aCBoaXMgc3dvcmQgYXMgaGUgd2FzIGxpZnRpbmcgaGlzIGJhdHRsZS1heGUsIGFuZCBkYXNoaW5nIGhpcyBzaGllbGQgaW50byB0aGUgZmFjZSBvZiB0aGUgb3RoZXIsIHR1bWJsZWQgaGltIGJhY2t3YXJkcyBkb3duIHRoZSBjbGlmZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGFraW5nIGhpcyBzdGFuZCBvbiB0aGUgd2FsbCB3aXRoIHRob3NlIHdobyByYW4gdG8gaGlzIGFpZCBhbmQgZm9ybWVkIGFib3V0IGhpbSwgaGUgcmVwdWxzZWQgdGhlIHJlc3Qgb2YgdGhlIGVuZW15LCB3aG8gaGFkIHJlYWNoZWQgdGhlIHRvcCBpbiBubyBncmVhdCBudW1iZXJzLCBhbmQgc2hvd2VkIG5vIHByb3dlc3MgdG8gbWF0Y2ggdGhlaXIgZGFyaW5nLiBTbyB0aGUgUm9tYW5zIGVzY2FwZWQgb3V0IG9mIHRoZWlyIHBlcmlsLiBBdCBicmVhayBvZiBkYXksIHRoZXkgY2FzdCB0aGUgY2FwdGFpbiBvZiB0aGUgd2F0Y2ggZG93biB0aGUgY2xpZmYgYW1vbmcgdGhlIGVuZW15LCBidXQgdm90ZWQgdG8gTWFubGl1cyBhIG1lZWQgb2YgdmljdG9yeSB3aGljaCBkaWQgaGltIG1vcmUgaG9ub3VyIHRoYW4gc2VydmljZS4gVGhleSBjb2xsZWN0ZWQgZm9yIGhpbSB0aGUgcmF0aW9ucyB3aGljaCBlYWNoIG1hbiBvZiB0aGVtIHJlY2VpdmVkIGZvciBvbmUgZGF5LCBuYW1lbHksIGhhbGYgYSBwb3VuZCBvZiBuYXRpdmUgc3BlbHQsIFJvbWFuIHdlaWdodCwgYW5kIGFuIGVpZ2h0aCBvZiBhIHBpbnQgb2Ygd2luZSwgR3JlZWsgbWVhc3VyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIGNhc2Ugb2YgdGhlIEdhdWxzIHdhcyBsZXNzIGhvcGVmdWwuIFRoZXkgbGFja2VkIHByb3Zpc2lvbnMsIGJlaW5nIHNodXQgb2ZmIGZyb20gZm9yYWdpbmcgdGhyb3VnaCBmZWFyIG9mIENhbWlsbHVzLCBhbmQgZGlzZWFzZSBsdXJrZWQgYW1vbmcgdGhlbS4gVGhleSB3ZXJlIGVuY2FtcGVkIGFtaWQgcnVpbnMsIHdoZXJlIGEgbXVsdGl0dWRlIG9mIGNvcnBzZXMgaGFkIGJlZW4gY2FzdCBhdCByYW5kb20sIGFuZCBiZXNpZGVzLCBhbiBhaXIgbWFkZSBkcnkgYW5kIGFjcmlkIGJ5IHZhc3QgcXVhbnRpdGllcyBvZiBhc2hlcyB3aGljaCB3aW5kIGFuZCBoZWF0IHNlbnQgZmx5aW5nIGFicm9hZCwgbWFkZSBicmVhdGhpbmcgaHVydGZ1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgbW9zdCBvZiBhbGwgYWZmZWN0ZWQgdGhlbSB3YXMgdGhlIGNvbXBsZXRlIGNoYW5nZSBpbiB0aGVpciBtb2RlIG9mIGxpZmUuIFRoZXkgaGFkIGNvbWUgYWxsIGF0IG9uY2UgZnJvbSByZWdpb25zIG9mIHNoYWRlLCB3aGVyZSBlYXN5IHJlZnVnZSBjb3VsZCBiZSBoYWQgZnJvbSB0aGUgaGVhdHMgb2Ygc3VtbWVyLCBpbnRvIGEgbGFuZCB3aGljaCB3YXMgbG93IGx5aW5nIGFuZCBoYWQgYW4gdW5uYXR1cmFsIGNsaW1hdGUgdG93YXJkcyBhdXR1bW4uIFRoZW4gdGhlcmUgd2FzIHRoZWlyIGxvbmcgYW5kIGlkbGUgc2l0dGluZyBkb3duIGJlZm9yZSB0aGUgQ2FwaXRvbCzigJR0aGV5IHdlcmUgbm93IHdoaWxpbmcgYXdheSB0aGUgc2V2ZW50aCBtb250aCBpbiBpdHMgc2llZ2UuIEZvciBhbGwgdGhlc2UgcmVhc29ucyB0aGUgbW9ydGFsaXR5IHdhcyBncmVhdCBpbiB0aGVpciBjYW1wOyBzbyBtYW55IHdlcmUgdGhlIGRlYWQgdGhhdCB0aGV5IGNvdWxkIG5vIGxvbmdlciBiZSBidXJpZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIGNhc2Ugb2YgdGhlIEdhdWxzIHdhcyBsZXNzIGhvcGVmdWwuIFRoZXkgbGFja2VkIHByb3Zpc2lvbnMsIGJlaW5nIHNodXQgb2ZmIGZyb20gZm9yYWdpbmcgdGhyb3VnaCBmZWFyIG9mIENhbWlsbHVzLCBhbmQgZGlzZWFzZSBsdXJrZWQgYW1vbmcgdGhlbS4gVGhleSB3ZXJlIGVuY2FtcGVkIGFtaWQgcnVpbnMsIHdoZXJlIGEgbXVsdGl0dWRlIG9mIGNvcnBzZXMgaGFkIGJlZW4gY2FzdCBhdCByYW5kb20sIGFuZCBiZXNpZGVzLCBhbiBhaXIgbWFkZSBkcnkgYW5kIGFjcmlkIGJ5IHZhc3QgcXVhbnRpdGllcyBvZiBhc2hlcyB3aGljaCB3aW5kIGFuZCBoZWF0IHNlbnQgZmx5aW5nIGFicm9hZCwgbWFkZSBicmVhdGhpbmcgaHVydGZ1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IG1vc3Qgb2YgYWxsIGFmZmVjdGVkIHRoZW0gd2FzIHRoZSBjb21wbGV0ZSBjaGFuZ2UgaW4gdGhlaXIgbW9kZSBvZiBsaWZlLiBUaGV5IGhhZCBjb21lIGFsbCBhdCBvbmNlIGZyb20gcmVnaW9ucyBvZiBzaGFkZSwgd2hlcmUgZWFzeSByZWZ1Z2UgY291bGQgYmUgaGFkIGZyb20gdGhlIGhlYXRzIG9mIHN1bW1lciwgaW50byBhIGxhbmQgd2hpY2ggd2FzIGxvdyBseWluZyBhbmQgaGFkIGFuIHVubmF0dXJhbCBjbGltYXRlIHRvd2FyZHMgYXV0dW1uLiBUaGVuIHRoZXJlIHdhcyB0aGVpciBsb25nIGFuZCBpZGxlIHNpdHRpbmcgZG93biBiZWZvcmUgdGhlIENhcGl0b2ws4oCUdGhleSB3ZXJlIG5vdyB3aGlsaW5nIGF3YXkgdGhlIHNldmVudGggbW9udGggaW4gaXRzIHNpZWdlLiBGb3IgYWxsIHRoZXNlIHJlYXNvbnMgdGhlIG1vcnRhbGl0eSB3YXMgZ3JlYXQgaW4gdGhlaXIgY2FtcDsgc28gbWFueSB3ZXJlIHRoZSBkZWFkIHRoYXQgdGhleSBjb3VsZCBubyBsb25nZXIgYmUgYnVyaWVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcywgaG93ZXZlciwgYnJvdWdodCBubyByZWxpZWYgdG8gdGhlIGJlc2llZ2VkLCBmb3IgZmFtaW5lIGluY3JlYXNlZCB1cG9uIHRoZW0sIGFuZCB0aGVpciBpZ25vcmFuY2Ugb2Ygd2hhdCBDYW1pbGx1cyB3YXMgZG9pbmcgbWFkZSB0aGVtIGRlamVjdGVkLiBObyBtZXNzZW5nZXIgY291bGQgY29tZSBmcm9tIGhpbSBiZWNhdXNlIHRoZSBjaXR5IHdhcyBub3cgY2xvc2VseSB3YXRjaGVkIGJ5IHRoZSBCYXJiYXJpYW5zLiBXaGVyZWZvcmUsIGJvdGggcGFydGllcyBiZWluZyBpbiBzdWNoIGEgcGxpZ2h0LCBhIGNvbXByb21pc2Ugd2FzIHByb3Bvc2VkLCBhdCBmaXJzdCBieSB0aGUgb3V0cG9zdHMgYXMgdGhleSBlbmNvdW50ZXJlZCBvbmUgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgc2luY2UgdGhvc2UgaW4gYXV0aG9yaXR5IHRob3VnaHQgaXQgYmVzdCwgU3VscGljaXVzLCB0aGUgbWlsaXRhcnkgdHJpYnVuZSBvZiB0aGUgUm9tYW5zLCBoZWxkIGEgY29uZmVyZW5jZSB3aXRoIEJyZW5udXMsIGFuZCBpdCB3YXMgYWdyZWVkIHRoYXQgb24gdGhlIGRlbGl2ZXJ5IG9mIGEgdGhvdXNhbmQgcG91bmRzIG9mIGdvbGQgYnkgdGhlIFJvbWFucywgdGhlIEdhdWxzIHNob3VsZCBzdHJhaWdodHdheSBkZXBhcnQgb3V0IG9mIHRoZSBjaXR5IGFuZCB0aGUgY291bnRyeS4gT2F0aHMgd2VyZSBzd29ybiB0byB0aGVzZSB0ZXJtcywgYW5kIHRoZSBnb2xkIHdhcyBicm91Z2h0IHRvIGJlIHdlaWdoZWQuIEJ1dCB0aGUgR2F1bHMgdGFtcGVyZWQgd2l0aCB0aGUgc2NhbGVzLCBzZWNyZXRseSBhdCBmaXJzdCwgdGhlbiB0aGV5IG9wZW5seSBwdWxsZWQgdGhlIGJhbGFuY2UgYmFjayBvdXQgb2YgaXRzIHBvaXNlLiBUaGUgUm9tYW5zIHdlcmUgaW5jZW5zZWQgYXQgdGhpcywgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IEJyZW5udXMsIHdpdGggYSBtb2NraW5nIGxhdWdoLCBzdHJpcHBlZCBvZmYgaGlzIHN3b3JkLCBhbmQgYWRkZWQgaXQsIGJlbHQgYW5kIGFsbCwgdG8gdGhlIHdlaWdodHMuIFdoZW4gU3VscGljaXVzIGFza2VkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgbWVhbnMgdGhpcz88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGVsc2UsPC9xPiBzYWlkIEJyZW5udXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IHdvZSB0byB0aGUgdmFucXVpc2hlZD88L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+VmFlIHZpY3RpcyE8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBwaHJhc2UgcGFzc2VkIGF0IG9uY2UgaW50byBhIHByb3ZlcmIuIFNvbWUgb2YgdGhlIFJvbWFucyB3ZXJlIGluY2Vuc2VkLCBhbmQgdGhvdWdodCB0aGV5IG91Z2h0IHRvIGdvIGJhY2sgYWdhaW4gd2l0aCB0aGVpciBnb2xkLCBhbmQgZW5kdXJlIHRoZSBzaWVnZS4gT3RoZXJzIHVyZ2VkIGFjcXVpZXNjZW5jZSBpbiB0aGUgbWlsZCBpbmp1c3RpY2UuIFRoZWlyIHNoYW1lIGxheSwgdGhleSBhcmd1ZWQsIG5vdCBpbiBnaXZpbmcgbW9yZSwgYnV0IGluIGdpdmluZyBhdCBhbGwuIFRoaXMgdGhleSBjb25zZW50ZWQgdG8gZG8gYmVjYXVzZSBvZiB0aGUgZW1lcmdlbmN5OyBpdCB3YXMgbm90IGhvbm91cmFibGUsIGJ1dCBpdCB3YXMgbmVjZXNzYXJ5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzLCBob3dldmVyLCBicm91Z2h0IG5vIHJlbGllZiB0byB0aGUgYmVzaWVnZWQsIGZvciBmYW1pbmUgaW5jcmVhc2VkIHVwb24gdGhlbSwgYW5kIHRoZWlyIGlnbm9yYW5jZSBvZiB3aGF0IENhbWlsbHVzIHdhcyBkb2luZyBtYWRlIHRoZW0gZGVqZWN0ZWQuIE5vIG1lc3NlbmdlciBjb3VsZCBjb21lIGZyb20gaGltIGJlY2F1c2UgdGhlIGNpdHkgd2FzIG5vdyBjbG9zZWx5IHdhdGNoZWQgYnkgdGhlIEJhcmJhcmlhbnMuIFdoZXJlZm9yZSwgYm90aCBwYXJ0aWVzIGJlaW5nIGluIHN1Y2ggYSBwbGlnaHQsIGEgY29tcHJvbWlzZSB3YXMgcHJvcG9zZWQsIGF0IGZpcnN0IGJ5IHRoZSBvdXRwb3N0cyBhcyB0aGV5IGVuY291bnRlcmVkIG9uZSBhbm90aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHNpbmNlIHRob3NlIGluIGF1dGhvcml0eSB0aG91Z2h0IGl0IGJlc3QsIFN1bHBpY2l1cywgdGhlIG1pbGl0YXJ5IHRyaWJ1bmUgb2YgdGhlIFJvbWFucywgaGVsZCBhIGNvbmZlcmVuY2Ugd2l0aCBCcmVubnVzLCBhbmQgaXQgd2FzIGFncmVlZCB0aGF0IG9uIHRoZSBkZWxpdmVyeSBvZiBhIHRob3VzYW5kIHBvdW5kcyBvZiBnb2xkIGJ5IHRoZSBSb21hbnMsIHRoZSBHYXVscyBzaG91bGQgc3RyYWlnaHR3YXkgZGVwYXJ0IG91dCBvZiB0aGUgY2l0eSBhbmQgdGhlIGNvdW50cnkuIE9hdGhzIHdlcmUgc3dvcm4gdG8gdGhlc2UgdGVybXMsIGFuZCB0aGUgZ29sZCB3YXMgYnJvdWdodCB0byBiZSB3ZWlnaGVkLiBCdXQgdGhlIEdhdWxzIHRhbXBlcmVkIHdpdGggdGhlIHNjYWxlcywgc2VjcmV0bHkgYXQgZmlyc3QsIHRoZW4gdGhleSBvcGVubHkgcHVsbGVkIHRoZSBiYWxhbmNlIGJhY2sgb3V0IG9mIGl0cyBwb2lzZS4gVGhlIFJvbWFucyB3ZXJlIGluY2Vuc2VkIGF0IHRoaXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBCcmVubnVzLCB3aXRoIGEgbW9ja2luZyBsYXVnaCwgc3RyaXBwZWQgb2ZmIGhpcyBzd29yZCwgYW5kIGFkZGVkIGl0LCBiZWx0IGFuZCBhbGwsIHRvIHRoZSB3ZWlnaHRzLiBXaGVuIFN1bHBpY2l1cyBhc2tlZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgbWVhbnMgdGhpcz88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgZWxzZSw8L3E+IHNhaWQgQnJlbm51cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCB3b2UgdG8gdGhlIHZhbnF1aXNoZWQ/PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5WYWUgdmljdGlzITwvZm9yZWlnbj4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhlIHBocmFzZSBwYXNzZWQgYXQgb25jZSBpbnRvIGEgcHJvdmVyYi4gU29tZSBvZiB0aGUgUm9tYW5zIHdlcmUgaW5jZW5zZWQsIGFuZCB0aG91Z2h0IHRoZXkgb3VnaHQgdG8gZ28gYmFjayBhZ2FpbiB3aXRoIHRoZWlyIGdvbGQsIGFuZCBlbmR1cmUgdGhlIHNpZWdlLiBPdGhlcnMgdXJnZWQgYWNxdWllc2NlbmNlIGluIHRoZSBtaWxkIGluanVzdGljZS4gVGhlaXIgc2hhbWUgbGF5LCB0aGV5IGFyZ3VlZCwgbm90IGluIGdpdmluZyBtb3JlLCBidXQgaW4gZ2l2aW5nIGF0IGFsbC4gVGhpcyB0aGV5IGNvbnNlbnRlZCB0byBkbyBiZWNhdXNlIG9mIHRoZSBlbWVyZ2VuY3k7IGl0IHdhcyBub3QgaG9ub3VyYWJsZSwgYnV0IGl0IHdhcyBuZWNlc3NhcnkuCgkJCTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZhZSB2aWN0aXMhPC9mb3JlaWduPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGV5IHdlcmUgdGh1cyBhdCBvZGRzIGluIHRoZSBtYXR0ZXIsIGJvdGggd2l0aCB0aGUgR2F1bHMgYW5kIHdpdGggdGhlbXNlbHZlcywgQ2FtaWxsdXMgbGVkIGhpcyBhcm15IHVwIHRvIHRoZSBnYXRlcyBvZiB0aGUgY2l0eS4gT24gbGVhcm5pbmcgd2hhdCB3YXMgZ29pbmcgb24sIGhlIG9yZGVyZWQgdGhlIHJlc3Qgb2YgaGlzIGFybXkgdG8gZm9sbG93IGluIGJhdHRsZSBhcnJheSBhbmQgZGVsaWJlcmF0ZWx5LCB3aGlsZSBoZSBoaW1zZWxmLCB3aXRoIHRoZSBmbG93ZXIgb2YgaGlzIG1lbiwgcHJlc3NlZCBvbiwgYW5kIHByZXNlbnRseSBjYW1lIHRvIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFsbCBtYWRlIHdheSBmb3IgaGltLCBpbiBkZWNvcm91cyBzaWxlbmNlIGFja25vd2xlZGdpbmcgaGltIGFzIHRoZWlyIGRpY3RhdG9yLiBUaGVyZXVwb24gaGUgbGlmdGVkIHRoZSBnb2xkIGZyb20gdGhlIHNjYWxlcyBhbmQgZ2F2ZSBpdCB0byBoaXMgYXR0ZW5kYW50cywgYW5kIHRoZW4gb3JkZXJlZCB0aGUgR2F1bHMgdG8gdGFrZSB0aGVpciBzY2FsZXMgYW5kIHdlaWdodHMgYW5kIGJlIG9mZiwgc2F5aW5nIHRoYXQgaXQgd2FzIHRoZSBjdXN0b20gd2l0aCB0aGUgUm9tYW5zIHRvIGRlbGl2ZXIgdGhlaXIgY2l0eSB3aXRoIGlyb24gYW5kIG5vdCB3aXRoIGdvbGQuIFdoZW4gQnJlbm51cyBpbiB3cmF0aCBkZWNsYXJlZCB0aGF0IGhlIHdhcyB3cm9uZ2VkIGJ5IHRoaXMgYnJlYWtpbmcgb2YgdGhlIGFncmVlbWVudCwgQ2FtaWxsdXMgYW5zd2VyZWQgdGhhdCB0aGUgY29tcGFjdCB3YXMgbm90IGxlZ2FsbHkgbWFkZSBub3IgYmluZGluZywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+c2luY2UgaGUgaGltc2VsZiBoYWQgYWxyZWFkeSBiZWVuIGNob3NlbiBkaWN0YXRvciBhbmQgdGhlcmUgd2FzIG5vIG90aGVyIGxlZ2FsIHJ1bGVyOyB0aGUgYWdyZWVtZW50IG9mIHRoZSBHYXVscyBoYWQgdGhlcmVmb3JlIGJlZW4gbWFkZSB3aXRoIG1lbiB3aG8gaGFkIG5vIHBvd2VyIGluIHRoZSBjYXNlLiBOb3csIGhvd2V2ZXIsIHRoZXkgbXVzdCBzYXkgd2hhdCB0aGV5IHdhbnRlZCwgZm9yIGhlIHdhcyBjb21lIHdpdGggbGVnYWwgYXV0aG9yaXR5IHRvIGdyYW50IHBhcmRvbiB0byB0aG9zZSB3aG8gYXNrZWQgaXQsIGFuZCB0byBpbmZsaWN0IHB1bmlzaG1lbnQgb24gdGhlIGd1aWx0eSwgdW5sZXNzIHRoZXkgc2hvd2VkIHJlcGVudGFuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIEJyZW5udXMgcmFpc2VkIGEgY2xhbW91ciBhbmQgYmVnYW4gYSBza2lybWlzaCwgaW4gd2hpY2ggYm90aCBzaWRlcyBnb3Qgbm8gZnVydGhlciB0aGFuIGRyYXdpbmcgdGhlaXIgc3dvcmRzIGFuZCBwdXNoaW5nIG9uZSBhbm90aGVyIGNvbmZ1c2VkbHkgYWJvdXQsIHNpbmNlIHRoZSBhY3Rpb24gdG9vayBwbGFjZSBpbiB0aGUgaGVhcnQgb2YgdGhlIHJ1aW5lZCBjaXR5LCB3aGVyZSBubyBiYXR0bGUgYXJyYXkgd2FzIHBvc3NpYmxlLiBCdXQgQnJlbm51cyBzb29uIGNhbWUgdG8gaGlzIHNlbnNlcywgYW5kIGxlZCBoaXMgR2F1bHMgb2ZmIHRvIHRoZWlyIGNhbXAsIHdpdGggdGhlIGxvc3Mgb2YgYSBmZXcgb25seS4gRHVyaW5nIHRoZSBlbnN1aW5nIG5pZ2h0IGhlIGJyb2tlIGNhbXAgYW5kIGFiYW5kb25lZCB0aGUgY2l0eSB3aXRoIGhpcyB3aG9sZSBmb3JjZSwgYW5kIGFmdGVyIGEgbWFyY2ggb2YgYWJvdXQgZWlnaHQgbWlsZXMsIGVuY2FtcGVkIGFsb25nIHRoZSBHYWJpbmlhbiB3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSBDYW1pbGx1cyB3YXMgdXBvbiBoaW0sIGluIGdsaXR0ZXJpbmcgYXJyYXksIGhpcyBSb21hbnMgbm93IGZ1bGwgb2YgY29uZmlkZW5jZSwgYW5kIGFmdGVyIGEgbG9uZyBhbmQgZmllcmNlIGJhdHRsZSwgcm91dGVkIHRoZSBlbmVteSB3aXRoIGdyZWF0IHNsYXVnaHRlciBhbmQgdG9vayB0aGVpciBjYW1wLiBPZiB0aGUgZnVnaXRpdmVzLCBzb21lIHdlcmUgYXQgb25jZSBwdXJzdWVkIGFuZCBjdXQgZG93biwgYnV0IG1vc3Qgb2YgdGhlbSBzY2F0dGVyZWQgYWJyb2FkIG9ubHkgdG8gYmUgZmFsbGVuIHVwb24gYW5kIHNsYWluIGJ5IHRoZSBwZW9wbGUgb2YgdGhlIHN1cnJvdW5kaW5nIHZpbGxhZ2VzIGFuZCBjaXRpZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhleSB3ZXJlIHRodXMgYXQgb2RkcyBpbiB0aGUgbWF0dGVyLCBib3RoIHdpdGggdGhlIEdhdWxzIGFuZCB3aXRoIHRoZW1zZWx2ZXMsIENhbWlsbHVzIGxlZCBoaXMgYXJteSB1cCB0byB0aGUgZ2F0ZXMgb2YgdGhlIGNpdHkuIE9uIGxlYXJuaW5nIHdoYXQgd2FzIGdvaW5nIG9uLCBoZSBvcmRlcmVkIHRoZSByZXN0IG9mIGhpcyBhcm15IHRvIGZvbGxvdyBpbiBiYXR0bGUgYXJyYXkgYW5kIGRlbGliZXJhdGVseSwgd2hpbGUgaGUgaGltc2VsZiwgd2l0aCB0aGUgZmxvd2VyIG9mIGhpcyBtZW4sIHByZXNzZWQgb24sIGFuZCBwcmVzZW50bHkgY2FtZSB0byB0aGUgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFsbCBtYWRlIHdheSBmb3IgaGltLCBpbiBkZWNvcm91cyBzaWxlbmNlIGFja25vd2xlZGdpbmcgaGltIGFzIHRoZWlyIGRpY3RhdG9yLiBUaGVyZXVwb24gaGUgbGlmdGVkIHRoZSBnb2xkIGZyb20gdGhlIHNjYWxlcyBhbmQgZ2F2ZSBpdCB0byBoaXMgYXR0ZW5kYW50cywgYW5kIHRoZW4gb3JkZXJlZCB0aGUgR2F1bHMgdG8gdGFrZSB0aGVpciBzY2FsZXMgYW5kIHdlaWdodHMgYW5kIGJlIG9mZiwgc2F5aW5nIHRoYXQgaXQgd2FzIHRoZSBjdXN0b20gd2l0aCB0aGUgUm9tYW5zIHRvIGRlbGl2ZXIgdGhlaXIgY2l0eSB3aXRoIGlyb24gYW5kIG5vdCB3aXRoIGdvbGQuIFdoZW4gQnJlbm51cyBpbiB3cmF0aCBkZWNsYXJlZCB0aGF0IGhlIHdhcyB3cm9uZ2VkIGJ5IHRoaXMgYnJlYWtpbmcgb2YgdGhlIGFncmVlbWVudCwgQ2FtaWxsdXMgYW5zd2VyZWQgdGhhdCB0aGUgY29tcGFjdCB3YXMgbm90IGxlZ2FsbHkgbWFkZSBub3IgYmluZGluZywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIGhlIGhpbXNlbGYgaGFkIGFscmVhZHkgYmVlbiBjaG9zZW4gZGljdGF0b3IgYW5kIHRoZXJlIHdhcyBubyBvdGhlciBsZWdhbCBydWxlcjsgdGhlIGFncmVlbWVudCBvZiB0aGUgR2F1bHMgaGFkIHRoZXJlZm9yZSBiZWVuIG1hZGUgd2l0aCBtZW4gd2hvIGhhZCBubyBwb3dlciBpbiB0aGUgY2FzZS4gTm93LCBob3dldmVyLCB0aGV5IG11c3Qgc2F5IHdoYXQgdGhleSB3YW50ZWQsIGZvciBoZSB3YXMgY29tZSB3aXRoIGxlZ2FsIGF1dGhvcml0eSB0byBncmFudCBwYXJkb24gdG8gdGhvc2Ugd2hvIGFza2VkIGl0LCBhbmQgdG8gaW5mbGljdCBwdW5pc2htZW50IG9uIHRoZSBndWlsdHksIHVubGVzcyB0aGV5IHNob3dlZCByZXBlbnRhbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIEJyZW5udXMgcmFpc2VkIGEgY2xhbW91ciBhbmQgYmVnYW4gYSBza2lybWlzaCwgaW4gd2hpY2ggYm90aCBzaWRlcyBnb3Qgbm8gZnVydGhlciB0aGFuIGRyYXdpbmcgdGhlaXIgc3dvcmRzIGFuZCBwdXNoaW5nIG9uZSBhbm90aGVyIGNvbmZ1c2VkbHkgYWJvdXQsIHNpbmNlIHRoZSBhY3Rpb24gdG9vayBwbGFjZSBpbiB0aGUgaGVhcnQgb2YgdGhlIHJ1aW5lZCBjaXR5LCB3aGVyZSBubyBiYXR0bGUgYXJyYXkgd2FzIHBvc3NpYmxlLiBCdXQgQnJlbm51cyBzb29uIGNhbWUgdG8gaGlzIHNlbnNlcywgYW5kIGxlZCBoaXMgR2F1bHMgb2ZmIHRvIHRoZWlyIGNhbXAsIHdpdGggdGhlIGxvc3Mgb2YgYSBmZXcgb25seS4gRHVyaW5nIHRoZSBlbnN1aW5nIG5pZ2h0IGhlIGJyb2tlIGNhbXAgYW5kIGFiYW5kb25lZCB0aGUgY2l0eSB3aXRoIGhpcyB3aG9sZSBmb3JjZSwgYW5kIGFmdGVyIGEgbWFyY2ggb2YgYWJvdXQgZWlnaHQgbWlsZXMsIGVuY2FtcGVkIGFsb25nIHRoZSBHYWJpbmlhbiB3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSBDYW1pbGx1cyB3YXMgdXBvbiBoaW0sIGluIGdsaXR0ZXJpbmcgYXJyYXksIGhpcyBSb21hbnMgbm93IGZ1bGwgb2YgY29uZmlkZW5jZSwgYW5kIGFmdGVyIGEgbG9uZyBhbmQgZmllcmNlIGJhdHRsZSwgcm91dGVkIHRoZSBlbmVteSB3aXRoIGdyZWF0IHNsYXVnaHRlciBhbmQgdG9vayB0aGVpciBjYW1wLiBPZiB0aGUgZnVnaXRpdmVzLCBzb21lIHdlcmUgYXQgb25jZSBwdXJzdWVkIGFuZCBjdXQgZG93biwgYnV0IG1vc3Qgb2YgdGhlbSBzY2F0dGVyZWQgYWJyb2FkIG9ubHkgdG8gYmUgZmFsbGVuIHVwb24gYW5kIHNsYWluIGJ5IHRoZSBwZW9wbGUgb2YgdGhlIHN1cnJvdW5kaW5nIHZpbGxhZ2VzIGFuZCBjaXRpZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIHN0cmFuZ2VseSB3YXMgUm9tZSB0YWtlbiwgYW5kIG1vcmUgc3RyYW5nZWx5IHN0aWxsIGRlbGl2ZXJlZCwgYWZ0ZXIgdGhlIEJhcmJhcmlhbnMgaGFkIGhlbGQgaXQgc2V2ZW4gbW9udGhzIGluIGFsbC4gVGhleSBlbnRlcmVkIGl0IGEgZmV3IGRheXMgYWZ0ZXIgdGhlIElkZXMgb2YgSnVseSwgYW5kIHdlcmUgZHJpdmVuIG91dCBhYm91dCB0aGUgSWRlcyBvZiBGZWJydWFyeS4gQ2FtaWxsdXMgY2VsZWJyYXRlZCBhIHRyaXVtcGgsIGFzIGl0IHdhcyBtZWV0IHRoYXQgYSBtYW4gc2hvdWxkIGRvIHdobyBoYWQgc2F2ZWQgYSBjb3VudHJ5IHRoYXQgd2FzIGxvc3QsIGFuZCB3aG8gbm93IGJyb3VnaHQgdGhlIGNpdHkgYmFjayBhZ2FpbiB0byBpdHNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgY2l0aXplbnMgb3V0c2lkZSwgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGFjY29tcGFuaWVkIGhpcyB0cml1bXBoYWwgY2hhcmlvdCBhcyBpdCBlbnRlcmVkIHRoZSBjaXR5LCBhbmQgdGhvc2Ugd2hvIGhhZCBiZWVuIGJlc2llZ2VkIG9uIHRoZSBDYXBpdG9sLCBhbmQgaGFkIG5hcnJvd2x5IGVzY2FwZWQgZGVhdGggYnkgc3RhcnZhdGlvbiwgY2FtZSBmb3J0aCB0byBtZWV0IHRoZW0sIGFsbCBlbWJyYWNpbmcgb25lIGFub3RoZXIsIGFuZCB3ZWVwaW5nIGZvciB0aGUgam95IHRoYXQgd2FzIHRoZWlycy4gVGhlIHByaWVzdHMgYW5kIG1pbmlzdHJhbnRzIG9mIHRoZSBnb2RzLCBicmluZ2luZyB3aGF0ZXZlciBzYWNyZWQgb2JqZWN0cyB0aGV5IGhhZCBlaXRoZXIgYnVyaWVkIG9uIHRoZSBzcG90IG9yIGNhcnJpZWQgb2ZmIHdpdGggdGhlbSB3aGVuIHRoZXkgdG9vayB0byBmbGlnaHQsIGRpc3BsYXllZCB0aGVtLCB0aHVzIHByZXNlcnZlZCBpbiBzYWZldHksIHRvIHRoZSBjaXRpemVucywgd2hvIGNhdWdodCB0aGUgd2VsY29tZSBzaWdodHMgd2l0aCBkZWxpZ2h0LCBiZWxpZXZpbmcgaW4gdGhlaXIgaGVhcnRzIHRoYXQgdGhlIGdvZHMgdGhlbXNlbHZlcyB3ZXJlIG5vdyBjb21pbmcgYmFjayB0byBSb21lIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQ2FtaWxsdXMgaGFkIG1hZGUgc2FjcmlmaWNlcyB0byB0aGUgZ29kcyBhbmQgcHVyaWZpZWQgdGhlIGNpdHksIGluIHRoZSBtYW5uZXIgcHJlc2NyaWJlZCBieSB0aG9zZSB3aG8gd2VyZSB2ZXJzZWQgaW4gc3VjaCByaXRlcywgaGUgcmVzdG9yZWQgdGhlIGV4aXN0aW5nIHRlbXBsZXMsIGFuZCBlcmVjdGVkIGEgbmV3IG9uZSB0byBSdW1vdXIgYW5kIFZvaWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+QXJhIEFpaSBMb2N1dGlpPC9mb3JlaWduPgogICAgICAgICAgICA8L25vdGU+IGhhdmluZyBzb3VnaHQgb3V0IGNhcmVmdWxseSB0aGUgc3BvdCB3aGVyZSBieSBuaWdodCB0aGUgdm9pY2UgZnJvbSBIZWF2ZW4sIGFubm91bmNpbmcgdGhlIGNvbWluZyBvZiB0aGUgQmFyYmFyaWFuIGhvc3QsIGhhZCBmYWxsZW4gdXBvbiB0aGUgZWFycyBvZiBNYXJjdXMgQ2FlZGljaXVzLiAKCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gc3RyYW5nZWx5IHdhcyBSb21lIHRha2VuLCBhbmQgbW9yZSBzdHJhbmdlbHkgc3RpbGwgZGVsaXZlcmVkLCBhZnRlciB0aGUgQmFyYmFyaWFucyBoYWQgaGVsZCBpdCBzZXZlbiBtb250aHMgaW4gYWxsLiBUaGV5IGVudGVyZWQgaXQgYSBmZXcgZGF5cyBhZnRlciB0aGUgSWRlcyBvZiBKdWx5LCBhbmQgd2VyZSBkcml2ZW4gb3V0IGFib3V0IHRoZSBJZGVzIG9mIEZlYnJ1YXJ5LiBDYW1pbGx1cyBjZWxlYnJhdGVkIGEgdHJpdW1waCwgYXMgaXQgd2FzIG1lZXQgdGhhdCBhIG1hbiBzaG91bGQgZG8gd2hvIGhhZCBzYXZlZCBhIGNvdW50cnkgdGhhdCB3YXMgbG9zdCwgYW5kIHdobyBub3cgYnJvdWdodCB0aGUgY2l0eSBiYWNrIGFnYWluIHRvIGl0c2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgY2l0aXplbnMgb3V0c2lkZSwgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGFjY29tcGFuaWVkIGhpcyB0cml1bXBoYWwgY2hhcmlvdCBhcyBpdCBlbnRlcmVkIHRoZSBjaXR5LCBhbmQgdGhvc2Ugd2hvIGhhZCBiZWVuIGJlc2llZ2VkIG9uIHRoZSBDYXBpdG9sLCBhbmQgaGFkIG5hcnJvd2x5IGVzY2FwZWQgZGVhdGggYnkgc3RhcnZhdGlvbiwgY2FtZSBmb3J0aCB0byBtZWV0IHRoZW0sIGFsbCBlbWJyYWNpbmcgb25lIGFub3RoZXIsIGFuZCB3ZWVwaW5nIGZvciB0aGUgam95IHRoYXQgd2FzIHRoZWlycy4gVGhlIHByaWVzdHMgYW5kIG1pbmlzdHJhbnRzIG9mIHRoZSBnb2RzLCBicmluZ2luZyB3aGF0ZXZlciBzYWNyZWQgb2JqZWN0cyB0aGV5IGhhZCBlaXRoZXIgYnVyaWVkIG9uIHRoZSBzcG90IG9yIGNhcnJpZWQgb2ZmIHdpdGggdGhlbSB3aGVuIHRoZXkgdG9vayB0byBmbGlnaHQsIGRpc3BsYXllZCB0aGVtLCB0aHVzIHByZXNlcnZlZCBpbiBzYWZldHksIHRvIHRoZSBjaXRpemVucywgd2hvIGNhdWdodCB0aGUgd2VsY29tZSBzaWdodHMgd2l0aCBkZWxpZ2h0LCBiZWxpZXZpbmcgaW4gdGhlaXIgaGVhcnRzIHRoYXQgdGhlIGdvZHMgdGhlbXNlbHZlcyB3ZXJlIG5vdyBjb21pbmcgYmFjayB0byBSb21lIHdpdGggdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIENhbWlsbHVzIGhhZCBtYWRlIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMgYW5kIHB1cmlmaWVkIHRoZSBjaXR5LCBpbiB0aGUgbWFubmVyIHByZXNjcmliZWQgYnkgdGhvc2Ugd2hvIHdlcmUgdmVyc2VkIGluIHN1Y2ggcml0ZXMsIGhlIHJlc3RvcmVkIHRoZSBleGlzdGluZyB0ZW1wbGVzLCBhbmQgZXJlY3RlZCBhIG5ldyBvbmUgdG8gUnVtb3VyIGFuZCBWb2ljZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5BcmEgQWlpIExvY3V0aWk8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gaGF2aW5nIHNvdWdodCBvdXQgY2FyZWZ1bGx5IHRoZSBzcG90IHdoZXJlIGJ5IG5pZ2h0IHRoZSB2b2ljZSBmcm9tIEhlYXZlbiwgYW5ub3VuY2luZyB0aGUgY29taW5nIG9mIHRoZSBCYXJiYXJpYW4gaG9zdCwgaGFkIGZhbGxlbiB1cG9uIHRoZSBlYXJzIG9mIE1hcmN1cyBDYWVkaWNpdXMuIAoJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5BcmEgQWlpIExvY3V0aWk8L2ZvcmVpZ24+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk93aW5nIHRvIHRoZSB6ZWFsIG9mIENhbWlsbHVzIGFuZCB0aGUgYWJ1bmRhbnQgbGFib3VycyBvZiB0aGUgcHJpZXN0aG9vZCwgdGhlIHNpdGVzIG9mIHRoZSB0ZW1wbGVzIHdlcmUgYXQgbGFzdCB1bmNvdmVyZWQsIGJ1dCBpdCBwcm92ZWQgYSBncmlldm91cyB1bmRlcnRha2luZy4gQW5kIHNpbmNlIHRoZSBjaXR5IGhhZCBhbHNvIHRvIGJlIGJ1aWx0IHVwIGFnYWluIGZyb20gYSBzdGF0ZSBvZiB1dHRlciBkZXN0cnVjdGlvbiwgdGhlIG11bHRpdHVkZSB3ZXJlIG92ZXJ3aGVsbWVkIHdpdGggZGVzcGFpciBvZiB0aGUgdGFzaywgYW5kIHNocmFuayBmcm9tIGl0LiBUaGV5IHdlcmUgYmVyZWZ0IG9mIGFsbCB0aGluZ3MsIGFuZCBmb3IgdGhlIHByZXNlbnQgbmVlZGVkIHNvbWUgcmVzdCBhbmQgcmVwb3NlIGFmdGVyIHRoZWlyIHN1ZmZlcmluZ3MsIGluc3RlYWQgb2YgdG9pbGluZyBhbmQgd2VhcmluZyB0aGVtc2VsdmVzIG91dCBvbiBhIHRhc2sgZm9yIHdoaWNoIHRoZXkgaGFkIG5laXRoZXIgbWVhbnMgbm9yIHN0cmVuZ3RoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gaXQgd2FzIHRoYXQgaW5zZW5zaWJseSB0aGVpciB0aG91Z2h0cyB0dXJuZWQgYWdhaW4gdG8gVmVpaSwgYSBjaXR5IHdoaWNoIHJlbWFpbmVkIGludGFjdCBhbmQgd2FzIGVxdWlwcGVkIHdpdGggYWxsIHRoaW5ncyBuZWVkZnVsLiBUaGlzIGdhdmUgb3Bwb3J0dW5pdHkgZm9yIG1pc2NoaWV2b3VzIGFnaXRhdGlvbnMgdG8gc3VjaCBhcyB3ZXJlIHdvbnQgdG8gY29uc3VsdCBvbmx5IHRoZSBwZW9wbGUncyB3aWxsIGFuZCBwbGVhc3VyZSwgYW5kIHJlYWR5IGVhciB3YXMgZ2l2ZW4gdG8gc2VkaXRpb3VzIHNwZWVjaGVzIGFnYWluc3QgQ2FtaWxsdXMuIEhlIGhhZCBhbiBleWUsIGl0IHdhcyBzYWlkLCBvbmx5IHRvIGhpcyBvd24gYW1iaXRpb24gYW5kIGZhbWUsIHdoZW4gaGUgd291bGQgZGVwcml2ZSB0aGVtIG9mIGEgY2l0eSB0aGF0IHN0b29kIHJlYWR5IHRvIHJlY2VpdmUgdGhlbSwgYW5kIGZvcmNlIHRoZW0gdG8gcGl0Y2ggdGhlaXIgdGVudHMgYW1vbmcgYSBtYXNzIG9mIHJ1aW5zLCB3aGlsZSB0aGV5IHJlYnVpbHQgd2hhdCBoYWQgYmVjb21lIGEgbW9uc3Ryb3VzIGZ1bmVyYWwgcHlyZS4gSGUgd2lzaGVkIG5vdCBtZXJlbHkgdG8gYmUgYSBsZWFkZXIgYW5kIGdlbmVyYWwgb2YgUm9tZSwgYnV0IHRvIHRocnVzdCBSb211bHVzIHRvIG9uZSBzaWRlIGFuZCBiZSBzdHlsZWQgaXRzIGZvdW5kZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T3dpbmcgdG8gdGhlIHplYWwgb2YgQ2FtaWxsdXMgYW5kIHRoZSBhYnVuZGFudCBsYWJvdXJzIG9mIHRoZSBwcmllc3Rob29kLCB0aGUgc2l0ZXMgb2YgdGhlIHRlbXBsZXMgd2VyZSBhdCBsYXN0IHVuY292ZXJlZCwgYnV0IGl0IHByb3ZlZCBhIGdyaWV2b3VzIHVuZGVydGFraW5nLiBBbmQgc2luY2UgdGhlIGNpdHkgaGFkIGFsc28gdG8gYmUgYnVpbHQgdXAgYWdhaW4gZnJvbSBhIHN0YXRlIG9mIHV0dGVyIGRlc3RydWN0aW9uLCB0aGUgbXVsdGl0dWRlIHdlcmUgb3ZlcndoZWxtZWQgd2l0aCBkZXNwYWlyIG9mIHRoZSB0YXNrLCBhbmQgc2hyYW5rIGZyb20gaXQuIFRoZXkgd2VyZSBiZXJlZnQgb2YgYWxsIHRoaW5ncywgYW5kIGZvciB0aGUgcHJlc2VudCBuZWVkZWQgc29tZSByZXN0IGFuZCByZXBvc2UgYWZ0ZXIgdGhlaXIgc3VmZmVyaW5ncywgaW5zdGVhZCBvZiB0b2lsaW5nIGFuZCB3ZWFyaW5nIHRoZW1zZWx2ZXMgb3V0IG9uIGEgdGFzayBmb3Igd2hpY2ggdGhleSBoYWQgbmVpdGhlciBtZWFucyBub3Igc3RyZW5ndGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpdCB3YXMgdGhhdCBpbnNlbnNpYmx5IHRoZWlyIHRob3VnaHRzIHR1cm5lZCBhZ2FpbiB0byBWZWlpLCBhIGNpdHkgd2hpY2ggcmVtYWluZWQgaW50YWN0IGFuZCB3YXMgZXF1aXBwZWQgd2l0aCBhbGwgdGhpbmdzIG5lZWRmdWwuIFRoaXMgZ2F2ZSBvcHBvcnR1bml0eSBmb3IgbWlzY2hpZXZvdXMgYWdpdGF0aW9ucyB0byBzdWNoIGFzIHdlcmUgd29udCB0byBjb25zdWx0IG9ubHkgdGhlIHBlb3BsZSdzIHdpbGwgYW5kIHBsZWFzdXJlLCBhbmQgcmVhZHkgZWFyIHdhcyBnaXZlbiB0byBzZWRpdGlvdXMgc3BlZWNoZXMgYWdhaW5zdCBDYW1pbGx1cy4gSGUgaGFkIGFuIGV5ZSwgaXQgd2FzIHNhaWQsIG9ubHkgdG8gaGlzIG93biBhbWJpdGlvbiBhbmQgZmFtZSwgd2hlbiBoZSB3b3VsZCBkZXByaXZlIHRoZW0gb2YgYSBjaXR5IHRoYXQgc3Rvb2QgcmVhZHkgdG8gcmVjZWl2ZSB0aGVtLCBhbmQgZm9yY2UgdGhlbSB0byBwaXRjaCB0aGVpciB0ZW50cyBhbW9uZyBhIG1hc3Mgb2YgcnVpbnMsIHdoaWxlIHRoZXkgcmVidWlsdCB3aGF0IGhhZCBiZWNvbWUgYSBtb25zdHJvdXMgZnVuZXJhbCBweXJlLiBIZSB3aXNoZWQgbm90IG1lcmVseSB0byBiZSBhIGxlYWRlciBhbmQgZ2VuZXJhbCBvZiBSb21lLCBidXQgdG8gdGhydXN0IFJvbXVsdXMgdG8gb25lIHNpZGUgYW5kIGJlIHN0eWxlZCBpdHMgZm91bmRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFNlbmF0ZSwgdGhlcmVmb3JlLCBmZWFyZnVsIG9mIHRoaXMgY2xhbW91ciwgd291bGQgbm90IHN1ZmZlciBDYW1pbGx1cywgbXVjaCBhcyBoZSB3aXNoZWQgaXQsIHRvIGxheSBkb3duIGhpcyBvZmZpY2Ugd2l0aGluIGEgeWVhciwgYWx0aG91Z2ggbm8gb3RoZXIgZGljdGF0b3IgaGFkIHNlcnZlZCBtb3JlIHRoYW4gc2l4IG1vbnRocy4gTWVhbndoaWxlIHRoZSBTZW5hdG9ycywgYnkgZGludCBvZiBraW5kbHkgZ3JlZXRpbmdzIGFuZCBwZXJzdWFzaXZlIHdvcmRzLCB0cmllZCB0byBzb2Z0ZW4gYW5kIGNvbnZlcnQgdGhlIHBlb3BsZSwgcG9pbnRpbmcgb3V0IHRoZSBzZXB1bGNocmVzIGFuZCB0b21icyBvZiB0aGVpciBmYXRoZXJzLCBhbmQgY2FsbGluZyB0byB0aGVpciByZW1lbWJyYW5jZSB0aGUgc2hyaW5lcyBhbmQgaG9seSBwbGFjZXMgd2hpY2ggUm9tdWx1cywgb3IgTnVtYSwgb3Igc29tZSBvdGhlciBraW5nLCBoYWQgY29uc2VjcmF0ZWQgYW5kIGxlZnQgdG8gdGhlaXIgY2FyZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgb3RoZXIgc2lnbnMgZnJvbSBIZWF2ZW4sIHRoZXkgbGFpZCBjaGllZiBzdHJlc3Mgb24gdGhlIG5ld2x5IHNldmVyZWQgaGVhZCB0aGF0IHdhcyBmb3VuZCB3aGVuIHRoZSBmb3VuZGF0aW9ucyBvZiB0aGUgQ2FwaXRvbCB3ZXJlIGR1Zywgc2hvd2luZywgYXMgaXQgZGlkLCB0aGF0IHRoZSBwbGFjZSB3aGVyZSBpdCB3YXMgZm91bmQgd2FzIGZhdGVkIHRvIGJlIHRoZSBoZWFkIG9mIEl0YWx5OyBhbHNvIG9uIHRoZSBzYWNyZWQgZmlyZSBvZiBWZXN0YSwgd2hpY2ggaGFkIGJlZW4ga2luZGxlZCBhbmV3IGJ5IGhlciB2aXJnaW5zIGFmdGVyIHRoZSB3YXIuIElmIHRoZXkgc2hvdWxkIHF1ZW5jaCBhbmQgZXh0aW5ndWlzaCB0aGlzIGFnYWluIGJ5IHRoZWlyIGFiYW5kb25tZW50IG9mIHRoZSBjaXR5LCBpdCB3b3VsZCBiZSBhIGRpc2dyYWNlIHRvIHRoZW0sIHdoZXRoZXIgdGhleSBzYXcgdGhhdCBjaXR5IG9jY3VwaWVkIGJ5IGltbWlncmFudHMgYW5kIGFsaWVucywgb3IgYWJhbmRvbmVkIHRvIGZsb2NrcyBhbmQgaGVyZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBTZW5hdGUsIHRoZXJlZm9yZSwgZmVhcmZ1bCBvZiB0aGlzIGNsYW1vdXIsIHdvdWxkIG5vdCBzdWZmZXIgQ2FtaWxsdXMsIG11Y2ggYXMgaGUgd2lzaGVkIGl0LCB0byBsYXkgZG93biBoaXMgb2ZmaWNlIHdpdGhpbiBhIHllYXIsIGFsdGhvdWdoIG5vIG90aGVyIGRpY3RhdG9yIGhhZCBzZXJ2ZWQgbW9yZSB0aGFuIHNpeCBtb250aHMuIE1lYW53aGlsZSB0aGUgU2VuYXRvcnMsIGJ5IGRpbnQgb2Yga2luZGx5IGdyZWV0aW5ncyBhbmQgcGVyc3Vhc2l2ZSB3b3JkcywgdHJpZWQgdG8gc29mdGVuIGFuZCBjb252ZXJ0IHRoZSBwZW9wbGUsIHBvaW50aW5nIG91dCB0aGUgc2VwdWxjaHJlcyBhbmQgdG9tYnMgb2YgdGhlaXIgZmF0aGVycywgYW5kIGNhbGxpbmcgdG8gdGhlaXIgcmVtZW1icmFuY2UgdGhlIHNocmluZXMgYW5kIGhvbHkgcGxhY2VzIHdoaWNoIFJvbXVsdXMsIG9yIE51bWEsIG9yIHNvbWUgb3RoZXIga2luZywgaGFkIGNvbnNlY3JhdGVkIGFuZCBsZWZ0IHRvIHRoZWlyIGNhcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIG90aGVyIHNpZ25zIGZyb20gSGVhdmVuLCB0aGV5IGxhaWQgY2hpZWYgc3RyZXNzIG9uIHRoZSBuZXdseSBzZXZlcmVkIGhlYWQgdGhhdCB3YXMgZm91bmQgd2hlbiB0aGUgZm91bmRhdGlvbnMgb2YgdGhlIENhcGl0b2wgd2VyZSBkdWcsIHNob3dpbmcsIGFzIGl0IGRpZCwgdGhhdCB0aGUgcGxhY2Ugd2hlcmUgaXQgd2FzIGZvdW5kIHdhcyBmYXRlZCB0byBiZSB0aGUgaGVhZCBvZiBJdGFseTsgYWxzbyBvbiB0aGUgc2FjcmVkIGZpcmUgb2YgVmVzdGEsIHdoaWNoIGhhZCBiZWVuIGtpbmRsZWQgYW5ldyBieSBoZXIgdmlyZ2lucyBhZnRlciB0aGUgd2FyLiBJZiB0aGV5IHNob3VsZCBxdWVuY2ggYW5kIGV4dGluZ3Vpc2ggdGhpcyBhZ2FpbiBieSB0aGVpciBhYmFuZG9ubWVudCBvZiB0aGUgY2l0eSwgaXQgd291bGQgYmUgYSBkaXNncmFjZSB0byB0aGVtLCB3aGV0aGVyIHRoZXkgc2F3IHRoYXQgY2l0eSBvY2N1cGllZCBieSBpbW1pZ3JhbnRzIGFuZCBhbGllbnMsIG9yIGFiYW5kb25lZCB0byBmbG9ja3MgYW5kIGhlcmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGRpZCB0aGUgU2VuYXRvcnMgcmVtb25zdHJhdGUgd2l0aCB0aGUgcGVvcGxlLCBib3RoIGluZGl2aWR1YWxseSBpbiBwcml2YXRlLCBhbmQgb2Z0ZW4gaW4gdGhlIHB1YmxpYyBhc3NlbWJsaWVzLiBUaGV5LCBpbiB0aGVpciB0dXJuLCB3ZXJlIG1vdmVkIHRvIGNvbXBhc3Npb24gYnkgdGhlIHdhaWxpbmcgY29tcGxhaW50cyBvZiB0aGUgbXVsdGl0dWRlLCB3aG8gbGFtZW50ZWQgdGhlIGhlbHBsZXNzbmVzcyB0byB3aGljaCB0aGV5IHdlcmUgY29tZSwgYW5kIGJlZ2dlZCwgbm93IHRoYXQgdGhleSBoYWQgYmVlbiBzYXZlZCBhbGl2ZSBhcyBpdCB3ZXJlIGZyb20gYSBzaGlwd3JlY2ssIGluIG5ha2VkbmVzcyBhbmQgZGVzdGl0dXRpb24sIHRoYXQgdGhleSBiZSBub3QgZm9yY2VkIHRvIHBpZWNlIHRvZ2V0aGVyIHRoZSBmcmFnbWVudHMgb2YgdGhlaXIgcnVpbmVkIGNpdHksIHdoZW4gYW5vdGhlciBzdG9vZCBhbGwgcmVhZHkgdG8gcmVjZWl2ZSB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgZGlkIHRoZSBTZW5hdG9ycyByZW1vbnN0cmF0ZSB3aXRoIHRoZSBwZW9wbGUsIGJvdGggaW5kaXZpZHVhbGx5IGluIHByaXZhdGUsIGFuZCBvZnRlbiBpbiB0aGUgcHVibGljIGFzc2VtYmxpZXMuIFRoZXksIGluIHRoZWlyIHR1cm4sIHdlcmUgbW92ZWQgdG8gY29tcGFzc2lvbiBieSB0aGUgd2FpbGluZyBjb21wbGFpbnRzIG9mIHRoZSBtdWx0aXR1ZGUsIHdobyBsYW1lbnRlZCB0aGUgaGVscGxlc3NuZXNzIHRvIHdoaWNoIHRoZXkgd2VyZSBjb21lLCBhbmQgYmVnZ2VkLCBub3cgdGhhdCB0aGV5IGhhZCBiZWVuIHNhdmVkIGFsaXZlIGFzIGl0IHdlcmUgZnJvbSBhIHNoaXB3cmVjaywgaW4gbmFrZWRuZXNzIGFuZCBkZXN0aXR1dGlvbiwgdGhhdCB0aGV5IGJlIG5vdCBmb3JjZWQgdG8gcGllY2UgdG9nZXRoZXIgdGhlIGZyYWdtZW50cyBvZiB0aGVpciBydWluZWQgY2l0eSwgd2hlbiBhbm90aGVyIHN0b29kIGFsbCByZWFkeSB0byByZWNlaXZlIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYW1pbGx1cyBkZWNpZGVkIHRoYXQgdGhlIHF1ZXN0aW9uIHNob3VsZCBiZSBkZWJhdGVkIGFuZCBzZXR0bGVkIGluIGNvdW5jaWwuIEhlIGhpbXNlbGYgc3Bva2UgYXQgZ3JlYXQgbGVuZ3RoLCBpbiBleGhvcnRhdGlvbiB0byBwcmVzZXJ2ZSB0aGVpciBjb21tb24gY291bnRyeSwgYW5kIGV2ZXJ5IG9uZSBlbHNlIHdobyB3aXNoZWQgZGlkIGxpa2V3aXNlLiBGaW5hbGx5LCBoZSBjYWxsZWQgdXBvbiBMdWNpdXMgTHVjcmV0aXVzLCB0byB3aG9tIGN1c3RvbSBnYXZlIHRoZSBmaXJzdCB2b3RlLCBhbmQgYmFkZSBoaW0gZGVjbGFyZSBoaXMgb3BpbmlvbiBmaXJzdCwgYW5kIHRoZW4gdGhlIG90aGVyIHNlbmF0b3JzIGluIHRoZSBvcmRlciBkdWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNpbGVuY2UgZmVsbCwgYW5kIEx1Y3JldGl1cyB3YXMgb24gdGhlIHBvaW50IG9mIGJlZ2lubmluZywgd2hlbiBpdCBjaGFuY2VkIHRoYXQgYSBjZW50dXJpb24gd2l0aCBhIHNxdWFkIG9mIHRoZSBkYXkgd2F0Y2ggcGFzc2VkIGJ5IG91dHNpZGUsIGFuZCBjYWxsaW5nIHdpdGggYSBsb3VkIHZvaWNlIG9uIHRoZSBtYW4gd2hvIGxlZCB3aXRoIHRoZSBzdGFuZGFyZCwgYmFkZSBoaW0gaGFsdCBhbmQgcGxhbnQgaGlzIHN0YW5kYXJkIHRoZXJlLCBmb3IgdGhhdCB3YXMgdGhlIGJlc3QgcGxhY2UgdG8gc2V0dGxlIGRvd24gYW5kIHN0YXkgaW4uIFRoZSB1dHRlcmFuY2UgZmVsbCBhdCB0aGUgY3Jpc2lzIG9mIHRoZWlyIGFueGlvdXMgdGhvdWdodCBmb3IgdGhlIHVuY2VydGFpbiBmdXR1cmUsIGFuZCBMdWNyZXRpdXMgc2FpZCwgd2l0aCBhIGRldm91dCBvYmVpc2FuY2UsIHRoYXQgaGUgY2FzdCBoaXMgdm90ZSB3aXRoIHRoZSBnb2QuIFRoZSByZXN0LCBvbmUgYnkgb25lLCBmb2xsb3dlZCBoaXMgZXhhbXBsZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgaW5jbGluYXRpb25zIG9mIHRoZSBtdWx0aXR1ZGUgd2VyZSBtYXJ2ZWxsb3VzbHkgY2hhbmdlZC4gVGhleSBleGhvcnRlZCBhbmQgaW5jaXRlZCBvbmUgYW5vdGhlciB0byB0aGUgd29yaywgYW5kIHBpdGNoZWQgdXBvbiB0aGVpciBzZXZlcmFsIHNpdGVzLCBub3QgYnkgYW55IG9yZGVybHkgYXNzaWdubWVudCwgYnV0IGFzIGVhY2ggbWFuIGZvdW5kIGl0IGNvbnZlbmllbnQgYW5kIGRlc2lyYWJsZS4gVGhlcmVmb3JlIHRoZSBjaXR5IHdhcyByZWJ1aWx0IHdpdGggY29uZnVzZWQgYW5kIG5hcnJvdyBzdHJlZXRzIGFuZCBhIG1hemUgb2YgaG91c2VzLCBvd2luZyB0byB0aGVpciBoYXN0ZSBhbmQgc3BlZWQuIFdpdGhpbiBhIHllYXIncyB0aW1lLCBpdCBpcyBzYWlkLCBhIG5ldyBjaXR5IGhhZCBhcmlzZW4sIHdpdGggd2FsbHMgdG8gZ3VhcmQgaXQgYW5kIGhvbWVzIGluIHdoaWNoIHRvIGR3ZWxsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIENhbWlsbHVzIGRlY2lkZWQgdGhhdCB0aGUgcXVlc3Rpb24gc2hvdWxkIGJlIGRlYmF0ZWQgYW5kIHNldHRsZWQgaW4gY291bmNpbC4gSGUgaGltc2VsZiBzcG9rZSBhdCBncmVhdCBsZW5ndGgsIGluIGV4aG9ydGF0aW9uIHRvIHByZXNlcnZlIHRoZWlyIGNvbW1vbiBjb3VudHJ5LCBhbmQgZXZlcnkgb25lIGVsc2Ugd2hvIHdpc2hlZCBkaWQgbGlrZXdpc2UuIEZpbmFsbHksIGhlIGNhbGxlZCB1cG9uIEx1Y2l1cyBMdWNyZXRpdXMsIHRvIHdob20gY3VzdG9tIGdhdmUgdGhlIGZpcnN0IHZvdGUsIGFuZCBiYWRlIGhpbSBkZWNsYXJlIGhpcyBvcGluaW9uIGZpcnN0LCBhbmQgdGhlbiB0aGUgb3RoZXIgc2VuYXRvcnMgaW4gdGhlIG9yZGVyIGR1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNpbGVuY2UgZmVsbCwgYW5kIEx1Y3JldGl1cyB3YXMgb24gdGhlIHBvaW50IG9mIGJlZ2lubmluZywgd2hlbiBpdCBjaGFuY2VkIHRoYXQgYSBjZW50dXJpb24gd2l0aCBhIHNxdWFkIG9mIHRoZSBkYXkgd2F0Y2ggcGFzc2VkIGJ5IG91dHNpZGUsIGFuZCBjYWxsaW5nIHdpdGggYSBsb3VkIHZvaWNlIG9uIHRoZSBtYW4gd2hvIGxlZCB3aXRoIHRoZSBzdGFuZGFyZCwgYmFkZSBoaW0gaGFsdCBhbmQgcGxhbnQgaGlzIHN0YW5kYXJkIHRoZXJlLCBmb3IgdGhhdCB3YXMgdGhlIGJlc3QgcGxhY2UgdG8gc2V0dGxlIGRvd24gYW5kIHN0YXkgaW4uIFRoZSB1dHRlcmFuY2UgZmVsbCBhdCB0aGUgY3Jpc2lzIG9mIHRoZWlyIGFueGlvdXMgdGhvdWdodCBmb3IgdGhlIHVuY2VydGFpbiBmdXR1cmUsIGFuZCBMdWNyZXRpdXMgc2FpZCwgd2l0aCBhIGRldm91dCBvYmVpc2FuY2UsIHRoYXQgaGUgY2FzdCBoaXMgdm90ZSB3aXRoIHRoZSBnb2QuIFRoZSByZXN0LCBvbmUgYnkgb25lLCBmb2xsb3dlZCBoaXMgZXhhbXBsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGluY2xpbmF0aW9ucyBvZiB0aGUgbXVsdGl0dWRlIHdlcmUgbWFydmVsbG91c2x5IGNoYW5nZWQuIFRoZXkgZXhob3J0ZWQgYW5kIGluY2l0ZWQgb25lIGFub3RoZXIgdG8gdGhlIHdvcmssIGFuZCBwaXRjaGVkIHVwb24gdGhlaXIgc2V2ZXJhbCBzaXRlcywgbm90IGJ5IGFueSBvcmRlcmx5IGFzc2lnbm1lbnQsIGJ1dCBhcyBlYWNoIG1hbiBmb3VuZCBpdCBjb252ZW5pZW50IGFuZCBkZXNpcmFibGUuIFRoZXJlZm9yZSB0aGUgY2l0eSB3YXMgcmVidWlsdCB3aXRoIGNvbmZ1c2VkIGFuZCBuYXJyb3cgc3RyZWV0cyBhbmQgYSBtYXplIG9mIGhvdXNlcywgb3dpbmcgdG8gdGhlaXIgaGFzdGUgYW5kIHNwZWVkLiBXaXRoaW4gYSB5ZWFyJ3MgdGltZSwgaXQgaXMgc2FpZCwgYSBuZXcgY2l0eSBoYWQgYXJpc2VuLCB3aXRoIHdhbGxzIHRvIGd1YXJkIGl0IGFuZCBob21lcyBpbiB3aGljaCB0byBkd2VsbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhvc2Ugd2hvIGhhZCBiZWVuIGRlcHV0ZWQgYnkgQ2FtaWxsdXMgdG8gcmVjb3ZlciBhbmQgbWFyayBvdXQgYW5ldyB0aGUgc2FjcmVkIHBsYWNlcywgZm91bmQgdGhlbSBhbGwgaW4gdXR0ZXIgY29uZnVzaW9uLiBXaGVuIHRoZXkgY2FtZSB0byB0aGUgc2hyaW5lIG9mIE1hcnMsIGluIHRoZWlyIGNpcmN1aXQgb2YgdGhlIFBhbGF0aXVtLCB0aGV5IGZvdW5kIHRoYXQgaXQgaGFkIGJlZW4gZGVtb2xpc2hlZCBhbmQgYnVybnQgYnkgdGhlIEJhcmJhcmlhbnMsIGxpa2UgdGhlIHJlc3QsIGJ1dCBhcyB0aGV5IHdlcmUgY2xlYXJpbmcgYXdheSBhbmQgcmVub3ZhdGluZyB0aGUgcGxhY2UsIHRoZXkgY2FtZSB1cG9uIHRoZSBhdWd1cmFsIHN0YWZmIG9mIFJvbXVsdXMsIGJ1cmllZCBkZWVwIGluIGEgZ3JlYXQgaGVhcCBvZiBhc2hlcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGF1Z3VyYWwgc3RhZmYgaXMgY3VydmVkIGF0IG9uZSBlbmQsIGFuZCBpcyBjYWxsZWQgPGZvcmVpZ24gbGFuZz0ibGEiPmxpdHV1czwvZm9yZWlnbj4uIEl0IGlzIHVzZWQgdG8gbWFyayBvZmYgdGhlIGRpZmZlcmVudCBxdWFydGVycyBvZiB0aGUgaGVhdmVucywgaW4gdGhlIGNlcmVtb25pZXMgb2YgZGl2aW5hdGlvbiBieSB0aGUgZmxpZ2h0IG9mIGJpcmRzLCBhbmQgc28gUm9tdWx1cyBoYWQgdXNlZCB0aGlzIG9uZSwgZm9yIGhlIHdhcyBhIGdyZWF0IGRpdmluZXIuIEJ1dCB3aGVuIGhlIHZhbmlzaGVkIGZyb20gYW1vbmcgbWVuLCB0aGUgcHJpZXN0cyB0b29rIHRoaXMgc3RhZmYgYW5kIGtlcHQgaXQgaW52aW9sYXRlLCBsaWtlIGFueSBvdGhlciBzYWNyZWQgb2JqZWN0LiBUaGVpciBmaW5kaW5nIHRoaXMgYXQgdGhhdCB0aW1lIHVuc2NhdGhlZCwgd2hlbiBhbGwgdGhlIHJlc3QgaGFkIHBlcmlzaGVkLCBnYXZlIHRoZW0gbW9yZSBwbGVhc2luZyBob3BlcyBmb3IgUm9tZS4gVGhleSB0aG91Z2h0IGl0IGEgdG9rZW4gdGhhdCBhc3N1cmVkIGhlciBvZiBldmVybGFzdGluZyBzYWZldHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyBoYWQgYmVlbiBkZXB1dGVkIGJ5IENhbWlsbHVzIHRvIHJlY292ZXIgYW5kIG1hcmsgb3V0IGFuZXcgdGhlIHNhY3JlZCBwbGFjZXMsIGZvdW5kIHRoZW0gYWxsIGluIHV0dGVyIGNvbmZ1c2lvbi4gV2hlbiB0aGV5IGNhbWUgdG8gdGhlIHNocmluZSBvZiBNYXJzLCBpbiB0aGVpciBjaXJjdWl0IG9mIHRoZSBQYWxhdGl1bSwgdGhleSBmb3VuZCB0aGF0IGl0IGhhZCBiZWVuIGRlbW9saXNoZWQgYW5kIGJ1cm50IGJ5IHRoZSBCYXJiYXJpYW5zLCBsaWtlIHRoZSByZXN0LCBidXQgYXMgdGhleSB3ZXJlIGNsZWFyaW5nIGF3YXkgYW5kIHJlbm92YXRpbmcgdGhlIHBsYWNlLCB0aGV5IGNhbWUgdXBvbiB0aGUgYXVndXJhbCBzdGFmZiBvZiBSb211bHVzLCBidXJpZWQgZGVlcCBpbiBhIGdyZWF0IGhlYXAgb2YgYXNoZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhdWd1cmFsIHN0YWZmIGlzIGN1cnZlZCBhdCBvbmUgZW5kLCBhbmQgaXMgY2FsbGVkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmxpdHV1czwvZm9yZWlnbj4uIEl0IGlzIHVzZWQgdG8gbWFyayBvZmYgdGhlIGRpZmZlcmVudCBxdWFydGVycyBvZiB0aGUgaGVhdmVucywgaW4gdGhlIGNlcmVtb25pZXMgb2YgZGl2aW5hdGlvbiBieSB0aGUgZmxpZ2h0IG9mIGJpcmRzLCBhbmQgc28gUm9tdWx1cyBoYWQgdXNlZCB0aGlzIG9uZSwgZm9yIGhlIHdhcyBhIGdyZWF0IGRpdmluZXIuIEJ1dCB3aGVuIGhlIHZhbmlzaGVkIGZyb20gYW1vbmcgbWVuLCB0aGUgcHJpZXN0cyB0b29rIHRoaXMgc3RhZmYgYW5kIGtlcHQgaXQgaW52aW9sYXRlLCBsaWtlIGFueSBvdGhlciBzYWNyZWQgb2JqZWN0LiBUaGVpciBmaW5kaW5nIHRoaXMgYXQgdGhhdCB0aW1lIHVuc2NhdGhlZCwgd2hlbiBhbGwgdGhlIHJlc3QgaGFkIHBlcmlzaGVkLCBnYXZlIHRoZW0gbW9yZSBwbGVhc2luZyBob3BlcyBmb3IgUm9tZS4gVGhleSB0aG91Z2h0IGl0IGEgdG9rZW4gdGhhdCBhc3N1cmVkIGhlciBvZiBldmVybGFzdGluZyBzYWZldHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBub3QgeWV0IGRvbmUgd2l0aCB0aGVzZSBwcmVzc2luZyB0YXNrcyB3aGVuIGEgZnJlc2ggd2FyIGJyb2tlIHVwb24gdGhlbS4gVGhlIEFlcXVpYW5zLCBWb2xzY2lhbnMsIGFuZCBMYXRpbnMgYnVyc3QgaW50byB0aGVpciB0ZXJyaXRvcnkgYWxsIGF0IG9uY2UsIGFuZCB0aGUgVHVzY2FucyBsYWlkIHNpZWdlIHRvIFN1dHJpdW0sIGEgY2l0eSBhbGxpZWQgd2l0aCBSb21lLiBUaGUgbWlsaXRhcnkgdHJpYnVuZXMgaW4gY29tbWFuZCBvZiB0aGUgYXJteSwgaGF2aW5nIGVuY2FtcGVkIG5lYXIgTW91bnQgTWFyY2l1cywgd2VyZSBiZXNpZWdlZCBieSB0aGUgTGF0aW5zLCBhbmQgd2VyZSBpbiBkYW5nZXIgb2YgbG9zaW5nIHRoZWlyIGNhbXAuIFdoZXJlZm9yZSB0aGV5IHNlbnQgdG8gUm9tZSBmb3IgYWlkLCBhbmQgQ2FtaWxsdXMgd2FzIGFwcG9pbnRlZCBkaWN0YXRvciBmb3IgdGhlIHRoaXJkIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlR3byBzdG9yaWVzIGFyZSB0b2xkIGFib3V0IHRoaXMgd2FyLCBhbmQgSSB3aWxsIGdpdmUgdGhlIGZhYnVsb3VzIG9uZSBmaXJzdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIG5vdCB5ZXQgZG9uZSB3aXRoIHRoZXNlIHByZXNzaW5nIHRhc2tzIHdoZW4gYSBmcmVzaCB3YXIgYnJva2UgdXBvbiB0aGVtLiBUaGUgQWVxdWlhbnMsIFZvbHNjaWFucywgYW5kIExhdGlucyBidXJzdCBpbnRvIHRoZWlyIHRlcnJpdG9yeSBhbGwgYXQgb25jZSwgYW5kIHRoZSBUdXNjYW5zIGxhaWQgc2llZ2UgdG8gU3V0cml1bSwgYSBjaXR5IGFsbGllZCB3aXRoIFJvbWUuIFRoZSBtaWxpdGFyeSB0cmlidW5lcyBpbiBjb21tYW5kIG9mIHRoZSBhcm15LCBoYXZpbmcgZW5jYW1wZWQgbmVhciBNb3VudCBNYXJjaXVzLCB3ZXJlIGJlc2llZ2VkIGJ5IHRoZSBMYXRpbnMsIGFuZCB3ZXJlIGluIGRhbmdlciBvZiBsb3NpbmcgdGhlaXIgY2FtcC4gV2hlcmVmb3JlIHRoZXkgc2VudCB0byBSb21lIGZvciBhaWQsIGFuZCBDYW1pbGx1cyB3YXMgYXBwb2ludGVkIGRpY3RhdG9yIGZvciB0aGUgdGhpcmQgdGltZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlR3byBzdG9yaWVzIGFyZSB0b2xkIGFib3V0IHRoaXMgd2FyLCBhbmQgSSB3aWxsIGdpdmUgdGhlIGZhYnVsb3VzIG9uZSBmaXJzdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGV5IHNheSB0aGF0IHRoZSBMYXRpbnMsIGVpdGhlciBhcyBhIHByZXRleHQgZm9yIHdhciwgb3IgYmVjYXVzZSB0aGV5IHJlYWxseSB3aXNoZWQgdG8gcmV2aXZlIHRoZSBhbmNpZW50IGFmZmluaXR5IGJldHdlZW4gdGhlIHR3byBwZW9wbGVzLCBzZW50IGFuZCBkZW1hbmRlZCBmcm9tIHRoZSBSb21hbnMgZnJlZWJvcm4gdmlyZ2lucyBpbiBtYXJyaWFnZS4gVGhlIFJvbWFucyB3ZXJlIGluIGRvdWJ0IHdoYXQgdG8gZG8sIGZvciB0aGV5IGRyZWFkZWQgd2FyIGluIHRoZWlyIHVuc2V0dGxlZCBhbmQgdW5yZXN0b3JlZCBjb25kaXRpb24sIGFuZCB5ZXQgdGhleSBzdXNwZWN0ZWQgdGhhdCB0aGlzIGRlbWFuZCBmb3Igd2l2ZXMgd2FzIHJlYWxseSBhIGNhbGwgZm9yIGhvc3RhZ2VzIGRpc2d1aXNlZCB1bmRlciB0aGUgc3BlY2lvdXMgbmFtZSBvZiBpbnRlcm1hcnJpYWdlLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZWlyIHBlcnBsZXhpdHksIGEgc2VydmluZy1tYWlkIG5hbWVkIFR1dHVsYSwgb3IsIGFzIHNvbWUgY2FsbCBoZXIsIFBoaWxvdGlzLCBhZHZpc2VkIHRoZSBtYWdpc3RyYXRlcyB0byBzZW5kIGhlciB0byB0aGUgZW5lbXkgd2l0aCBzb21lIG1haWRzZXJ2YW50cyBvZiB0aGUgY29tZWxpZXN0IHNvcnQgYW5kIG1vc3QgZ2VudGVlbCBhcHBlYXJhbmNlLCBhbGwgYXJyYXllZCBsaWtlIGZyZWVib3JuIGJyaWRlczsgc2hlIHdvdWxkIGF0dGVuZCB0byB0aGUgcmVzdC4gVGhlIG1hZ2lzdHJhdGVzIHlpZWxkZWQgdG8gaGVyIHBlcnN1YXNpb25zLCBjaG9zZSBvdXQgYXMgbWFueSBtYWlkLXNlcnZhbnRzIGFzIHNoZSB0aG91Z2h0IG1lZXQgZm9yIGhlciBwdXJwb3NlLCBhcnJheWVkIHRoZW0gaW4gZmluZSByYWltZW50IGFuZCBnb2xkLCBhbmQgaGFuZGVkIHRoZW0gb3ZlciB0byB0aGUgTGF0aW5zLCB3aG8gd2VyZSBlbmNhbXBlZCBuZWFyIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbmlnaHQsIHRoZSByZXN0IG9mIHRoZSBtYWlkZW5zIHN0b2xlIGF3YXkgdGhlIGVuZW15J3Mgc3dvcmRzLCB3aGlsZSBUdXR1bGEsIG9yIFBoaWxvdGlzLCBjbGltYmVkIGEgd2lsZCBmaWctdHJlZSBvZiBncmVhdCBoZWlnaHQsIGFuZCBhZnRlciBzcHJlYWRpbmcgb3V0IGhlciBjbG9hayBiZWhpbmQgaGVyLCBoZWxkIG91dCBhIGxpZ2h0ZWQgdG9yY2ggdG93YXJkcyBSb21lLCB0aGlzIGJlaW5nIHRoZSBzaWduYWwgYWdyZWVkIHVwb24gYmV0d2VlbiBoZXIgYW5kIHRoZSBtYWdpc3RyYXRlcywgdGhvdWdoIG5vIG90aGVyIGNpdGl6ZW4ga25ldyBvZiBpdC4gSGVuY2UgaXQgd2FzIHRoYXQgdGhlIHNvbGRpZXJzIHNhbGxpZWQgb3V0IG9mIHRoZSBjaXR5IHR1bXVsdHVvdXNseSwgYXMgdGhlIG1hZ2lzdHJhdGVzIHVyZ2VkIHRoZW0gb24sIGNhbGxpbmcgb3V0IG9uZSBhbm90aGVyJ3MgbmFtZXMsIGFuZCB3aXRoIG11Y2ggYWRvIGdldHRpbmcgaW50byByYW5rIGFuZCBmaWxlLiBUaGV5IHN0b3JtZWQgdGhlIGVudHJlbmNobWVudHMgb2YgdGhlIGVuZW15LCB3aG8gd2VyZSBmYXN0IGFzbGVlcCBhbmQgZXhwZWN0aW5nIG5vdGhpbmcgb2YgdGhlIHNvcnQsIGNhcHR1cmVkIHRoZWlyIGNhbXAsIGFuZCBzbGV3IG1vc3Qgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBoYXBwZW5lZCBvbiB0aGUgTm9uZXMgb2Ygd2hhdCB3YXMgdGhlbiBjYWxsZWQgUXVpbnRpbGlzLCBub3cgSnVseSwgYW5kIHRoZSBmZXN0aXZhbCBzaW5jZSBoZWxkIG9uIHRoYXQgZGF5IGlzIGluIHJlbWVtYnJhbmNlIG9mIHRoZSBleHBsb2l0LiBGb3IsIHRvIGJlZ2luIHdpdGgsIHRoZXkgcnVuIG91dCBvZiB0aGUgY2l0eSBnYXRlIGluIHRocm9uZ3MsIGNhbGxpbmcgb3V0IGxvdWRseSBtYW55IGxvY2FsIGFuZCBjb21tb24gbmFtZXMsIHN1Y2ggYXMgR2FpdXMsIE1hcmN1cywgTHVjaXVzLCBhbmQgdGhlIGxpa2UsIGluIGltaXRhdGlvbiBvZiB0aGUgd2F5IHRoZSBzb2xkaWVycyBvbmNlIGNhbGxlZCBhbG91ZCB1cG9uIGVhY2ggb3RoZXIgaW4gdGhlaXIgaGFzdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIHRoZSBtYWlkc2VydmFudHMsIGluIGdheSBhdHRpcmUsIHJ1biBhYm91dCBqZXN0aW5nIGFuZCBqb2tpbmcgd2l0aCB0aGUgbWVuIHRoZXkgbWVldC4gVGhleSBoYXZlIGEgbW9jayBiYXR0bGUsIHRvbywgd2l0aCBvbmUgYW5vdGhlciwgaW1wbHlpbmcgdGhhdCB0aGV5IG9uY2UgdG9vayBhIGhhbmQgaW4gdGhlIHN0cnVnZ2xlIHdpdGggdGhlIExhdGlucy4gQW5kIGFzIHRoZXkgZmVhc3QsIHRoZXkgc2l0IGluIHRoZSBzaGFkZSBvZiBhIGZpZy10cmVlJ3MgYnJhbmNoZXMuIFRoZSBkYXkgaXMgY2FsbGVkIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhcHJhdGluZSBOb25lcyw8L3E+IGZyb20gdGhlIHdpbGQgZmlnLXRyZWUsIGFzIHRoZXkgc3VwcG9zZSwgZnJvbSB3aGljaCB0aGUgbWFpZCBoZWxkIGZvcnRoIGhlciB0b3JjaDsgdGhpcyBnb2VzIGJ5IHRoZSBuYW1lIG9mIDxmb3JlaWduIGxhbmc9ImxhIj5jYXByaWZpY3VzPC9mb3JlaWduPi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZWlyIHBlcnBsZXhpdHksIGEgc2VydmluZy1tYWlkIG5hbWVkIFR1dHVsYSwgb3IsIGFzIHNvbWUgY2FsbCBoZXIsIFBoaWxvdGlzLCBhZHZpc2VkIHRoZSBtYWdpc3RyYXRlcyB0byBzZW5kIGhlciB0byB0aGUgZW5lbXkgd2l0aCBzb21lIG1haWRzZXJ2YW50cyBvZiB0aGUgY29tZWxpZXN0IHNvcnQgYW5kIG1vc3QgZ2VudGVlbCBhcHBlYXJhbmNlLCBhbGwgYXJyYXllZCBsaWtlIGZyZWVib3JuIGJyaWRlczsgc2hlIHdvdWxkIGF0dGVuZCB0byB0aGUgcmVzdC4gVGhlIG1hZ2lzdHJhdGVzIHlpZWxkZWQgdG8gaGVyIHBlcnN1YXNpb25zLCBjaG9zZSBvdXQgYXMgbWFueSBtYWlkLXNlcnZhbnRzIGFzIHNoZSB0aG91Z2h0IG1lZXQgZm9yIGhlciBwdXJwb3NlLCBhcnJheWVkIHRoZW0gaW4gZmluZSByYWltZW50IGFuZCBnb2xkLCBhbmQgaGFuZGVkIHRoZW0gb3ZlciB0byB0aGUgTGF0aW5zLCB3aG8gd2VyZSBlbmNhbXBlZCBuZWFyIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuaWdodCwgdGhlIHJlc3Qgb2YgdGhlIG1haWRlbnMgc3RvbGUgYXdheSB0aGUgZW5lbXkncyBzd29yZHMsIHdoaWxlIFR1dHVsYSwgb3IgUGhpbG90aXMsIGNsaW1iZWQgYSB3aWxkIGZpZy10cmVlIG9mIGdyZWF0IGhlaWdodCwgYW5kIGFmdGVyIHNwcmVhZGluZyBvdXQgaGVyIGNsb2FrIGJlaGluZCBoZXIsIGhlbGQgb3V0IGEgbGlnaHRlZCB0b3JjaCB0b3dhcmRzIFJvbWUsIHRoaXMgYmVpbmcgdGhlIHNpZ25hbCBhZ3JlZWQgdXBvbiBiZXR3ZWVuIGhlciBhbmQgdGhlIG1hZ2lzdHJhdGVzLCB0aG91Z2ggbm8gb3RoZXIgY2l0aXplbiBrbmV3IG9mIGl0LiBIZW5jZSBpdCB3YXMgdGhhdCB0aGUgc29sZGllcnMgc2FsbGllZCBvdXQgb2YgdGhlIGNpdHkgdHVtdWx0dW91c2x5LCBhcyB0aGUgbWFnaXN0cmF0ZXMgdXJnZWQgdGhlbSBvbiwgY2FsbGluZyBvdXQgb25lIGFub3RoZXIncyBuYW1lcywgYW5kIHdpdGggbXVjaCBhZG8gZ2V0dGluZyBpbnRvIHJhbmsgYW5kIGZpbGUuIFRoZXkgc3Rvcm1lZCB0aGUgZW50cmVuY2htZW50cyBvZiB0aGUgZW5lbXksIHdobyB3ZXJlIGZhc3QgYXNsZWVwIGFuZCBleHBlY3Rpbmcgbm90aGluZyBvZiB0aGUgc29ydCwgY2FwdHVyZWQgdGhlaXIgY2FtcCwgYW5kIHNsZXcgbW9zdCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaGFwcGVuZWQgb24gdGhlIE5vbmVzIG9mIHdoYXQgd2FzIHRoZW4gY2FsbGVkIFF1aW50aWxpcywgbm93IEp1bHksIGFuZCB0aGUgZmVzdGl2YWwgc2luY2UgaGVsZCBvbiB0aGF0IGRheSBpcyBpbiByZW1lbWJyYW5jZSBvZiB0aGUgZXhwbG9pdC4gRm9yLCB0byBiZWdpbiB3aXRoLCB0aGV5IHJ1biBvdXQgb2YgdGhlIGNpdHkgZ2F0ZSBpbiB0aHJvbmdzLCBjYWxsaW5nIG91dCBsb3VkbHkgbWFueSBsb2NhbCBhbmQgY29tbW9uIG5hbWVzLCBzdWNoIGFzIEdhaXVzLCBNYXJjdXMsIEx1Y2l1cywgYW5kIHRoZSBsaWtlLCBpbiBpbWl0YXRpb24gb2YgdGhlIHdheSB0aGUgc29sZGllcnMgb25jZSBjYWxsZWQgYWxvdWQgdXBvbiBlYWNoIG90aGVyIGluIHRoZWlyIGhhc3RlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIHRoZSBtYWlkc2VydmFudHMsIGluIGdheSBhdHRpcmUsIHJ1biBhYm91dCBqZXN0aW5nIGFuZCBqb2tpbmcgd2l0aCB0aGUgbWVuIHRoZXkgbWVldC4gVGhleSBoYXZlIGEgbW9jayBiYXR0bGUsIHRvbywgd2l0aCBvbmUgYW5vdGhlciwgaW1wbHlpbmcgdGhhdCB0aGV5IG9uY2UgdG9vayBhIGhhbmQgaW4gdGhlIHN0cnVnZ2xlIHdpdGggdGhlIExhdGlucy4gQW5kIGFzIHRoZXkgZmVhc3QsIHRoZXkgc2l0IGluIHRoZSBzaGFkZSBvZiBhIGZpZy10cmVlJ3MgYnJhbmNoZXMuIFRoZSBkYXkgaXMgY2FsbGVkIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FwcmF0aW5lIE5vbmVzLDwvcT4gZnJvbSB0aGUgd2lsZCBmaWctdHJlZSwgYXMgdGhleSBzdXBwb3NlLCBmcm9tIHdoaWNoIHRoZSBtYWlkIGhlbGQgZm9ydGggaGVyIHRvcmNoOyB0aGlzIGdvZXMgYnkgdGhlIG5hbWUgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y2FwcmlmaWN1czwvZm9yZWlnbj4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvdGhlcnMgc2F5IHRoYXQgbW9zdCBvZiB3aGF0IGlzIHNhaWQgYW5kIGRvbmUgYXQgdGhpcyBmZXN0aXZhbCBoYXMgcmVmZXJlbmNlIHRvIHRoZSBmYXRlIG9mIFJvbXVsdXMuIEZvciBvbiB0aGlzIHNhbWUgZGF5IGhlIHZhbmlzaGVkIGZyb20gc2lnaHQsIG91dHNpZGUgdGhlIGNpdHkgZ2F0ZXMsIGluIHN1ZGRlbiBkYXJrbmVzcyBhbmQgdGVtcGVzdCwgYW5kLCBhcyBzb21lIHRoaW5rLCBkdXJpbmcgYW4gZWNsaXBzZSBvZiB0aGUgc3VuLiBUaGUgZGF5LCB0aGV5IHNheSwgaXMgY2FsbGVkIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhcHJhdGluZSBOb25lczwvcT4gZnJvbSB0aGUgc3BvdCB3aGVyZSBoZSB0aHVzIHZhbmlzaGVkLiBGb3IgdGhlIHNoZS1nb2F0IGdvZXMgYnkgdGhlIG5hbWUgb2YgPGZvcmVpZ24gbGFuZz0ibGEiPmNhcHJhPC9mb3JlaWduPiwgYW5kIFJvbXVsdXMgdmFuaXNoZWQgZnJvbSBzaWdodCB3aGlsZSBoYXJhbmd1aW5nIGFuIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUgYXQgdGhlIEdvYXQncyBNYXJzaCwgYXMgaGFzIGJlZW4gc3RhdGVkIGluIGhpcyA8dGl0bGU+TGlmZTwvdGl0bGU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyNyIgdmFsaWQ9InllcyI+Q2hhcC4geHh2aWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvdGhlcnMgc2F5IHRoYXQgbW9zdCBvZiB3aGF0IGlzIHNhaWQgYW5kIGRvbmUgYXQgdGhpcyBmZXN0aXZhbCBoYXMgcmVmZXJlbmNlIHRvIHRoZSBmYXRlIG9mIFJvbXVsdXMuIEZvciBvbiB0aGlzIHNhbWUgZGF5IGhlIHZhbmlzaGVkIGZyb20gc2lnaHQsIG91dHNpZGUgdGhlIGNpdHkgZ2F0ZXMsIGluIHN1ZGRlbiBkYXJrbmVzcyBhbmQgdGVtcGVzdCwgYW5kLCBhcyBzb21lIHRoaW5rLCBkdXJpbmcgYW4gZWNsaXBzZSBvZiB0aGUgc3VuLiBUaGUgZGF5LCB0aGV5IHNheSwgaXMgY2FsbGVkIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FwcmF0aW5lIE5vbmVzPC9xPiBmcm9tIHRoZSBzcG90IHdoZXJlIGhlIHRodXMgdmFuaXNoZWQuIEZvciB0aGUgc2hlLWdvYXQgZ29lcyBieSB0aGUgbmFtZSBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jYXByYTwvZm9yZWlnbj4sIGFuZCBSb211bHVzIHZhbmlzaGVkIGZyb20gc2lnaHQgd2hpbGUgaGFyYW5ndWluZyBhbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlIGF0IHRoZSBHb2F0J3MgTWFyc2gsIGFzIGhhcyBiZWVuIHN0YXRlZCBpbiBoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjciIHZhbGlkPSJ5ZXMiPkNoYXAuIHh4dmlpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI3IiB2YWxpZD0ieWVzIj5DaGFwLiB4eHZpaS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IHdyaXRlcnMgYWRvcHQgdGhlIG90aGVyIGFjY291bnQgb2YgdGhpcyB3YXIsIHdoaWNoIHJ1bnMgdGh1cy4gQ2FtaWxsdXMsIGhhdmluZyBiZWVuIGFwcG9pbnRlZCBkaWN0YXRvciBmb3IgdGhlIHRoaXJkIHRpbWUsIGFuZCBsZWFybmluZyB0aGF0IHRoZSBhcm15IHVuZGVyIHRoZSBtaWxpdGFyeSB0cmlidW5lcyB3YXMgYmVzaWVnZWQgYnkgdGhlIExhdGlucyBhbmQgVm9sc2NpYW5zLCB3YXMgZm9yY2VkIHRvIHB1dCB1bmRlciBhcm1zIGV2ZW4gdGhvc2Ugb2YgdGhlIGNpdGl6ZW5zIHdobyB3ZXJlIGV4ZW1wdCBmcm9tIG1pbGl0YXJ5IGR1dHkgYnkgcmVhc29uIG9mIGFkdmFuY2luZyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RmV0Y2hpbmcgYSBsb25nIGNpcmN1aXQgYXJvdW5kIE1vdW50IE1hcmNpdXMgYW5kIHRodXMgZWx1ZGluZyB0aGUgZW5lbXkncyBub3RpY2UsIGhlIHBsYW50ZWQgaGlzIGFybXkgc2VjdXJlbHkgaW4gdGhlaXIgcmVhciwgYW5kIHRoZW4gYnkgbGlnaHRpbmcgbWFueSBmaXJlcyBtYWRlIGtub3duIGhpcyBwcmVzZW5jZSB0aGVyZS4gVGhlIGJlc2llZ2VkIFJvbWFucyBhdCBvbmNlIHRvb2sgaGVhcnQgYW5kIHB1cnBvc2VkIHRvIHNhbGx5IG91dCBhbmQgam9pbiBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTGF0aW5zIGFuZCBWb2xzY2lhbnMgcmV0aXJlZCB3aXRoaW4gdGhlaXIgdHJlbmNoZXMsIGZlbmNlZCB0aGVtc2VsdmVzIGluIHdpdGggYSBncmVhdCB3b29kZW4gcGFsaXNhZGUsIGFuZCBiYXJyaWNhZGVkIHRoZWlyIGNhbXAgb24gYWxsIHNpZGVzLCBmb3IgdGhleSBub3cgaGFkIGEgaG9zdGlsZSBmb3JjZSBpbiBmcm9udCBhbmQgcmVhciwgYW5kIHdlcmUgZGV0ZXJtaW5lZCB0byBhd2FpdCByZWluZm9yY2VtZW50cyBmcm9tIGhvbWUuIEF0IHRoZSBzYW1lIHRpbWUgdGhleSBleHBlY3RlZCBhaWQgZnJvbSB0aGUgVHVzY2FucyBhbHNvLiBDYW1pbGx1cywgcGVyY2VpdmluZyB0aGVpciBkZXNpZ24sIGFuZCBmZWFyZnVsIG9mIGJlaW5nIGhpbXNlbGYgc3Vycm91bmRlZCBieSB0aGUgZW5lbXkgYXMgaGUgaGFkIHN1cnJvdW5kZWQgdGhlbSwgbWFkZSBoYXN0ZSB0byBpbXByb3ZlIGhpcyBvcHBvcnR1bml0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVuZW15w5VzIGJhcnJpY2FkZXMgd2VyZSBvZiB3b29kLCBhbmQgYSBzdHJvbmcgd2luZCBibGV3IGRvd24gZnJvbSB0aGUgbW91bnRhaW5zIGF0IHN1bnJpc2UuIEFjY29yZGluZ2x5LCBoZSBlcXVpcHBlZCBoaW1zZWxmIHdpdGggZmllcnkgZGFydHMsIGFuZCBsZWFkaW5nIGhpcyBmb3JjZXMgb3V0IHRvd2FyZHMgZGF5LWJyZWFrLCBvcmRlcmVkIHBhcnQgb2YgdGhlbSB0byBhdHRhY2sgd2l0aCBtaXNzaWxlcyBhbmQgbG91ZCBjcmllcyBhdCBhbiBvcHBvc2l0ZSBwb2ludCwgd2hpbGUgaGUgaGltc2VsZiwgd2l0aCB0aG9zZSBhcHBvaW50ZWQgdG8gaHVybCBmaXJlLCB0b29rIGhpcyBwb3N0IHdoZXJlIHRoZSB3aW5kIHdhcyB3b250IHRvIHNtaXRlIHRoZSBlbmVteSdzIHRyZW5jaGVzIHdpdGggdGhlIGdyZWF0ZXN0IGZvcmNlLCBhbmQgYXdhaXRlZCB0aGUgcHJvcGl0aW91cyBtb21lbnQuIFdoZW4gYmF0dGxlIGhhZCBiZWVuIGpvaW5lZCBhbmQgdGhlIHN1biByb3NlIGFuZCB0aGUgd2luZCBidXJzdCBmb3J0aCB3aXRoIGZ1cnksIGhlIGdhdmUgb3JkZXJzIGZvciBhbiBvbnNldCwgYW5kIHNjYXR0ZXJlZCBubyBlbmQgb2YgZmllcnkgZGFydHMgYWxvbmcgdGhlIHRyZW5jaGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmxhbWVzIHNwZWVkaWx5IGZvdW5kIGZvb2QgaW4gdGhlIGNyb3dkZWQgdGltYmVycyBvZiB0aGUgd29vZGVuIHBhbGlzYWRlcyBhbmQgc3ByZWFkIGluIGFsbCBkaXJlY3Rpb25zLiBUaGUgTGF0aW5zIGhhZCBub3RoaW5nIGF0IGhhbmQgd2l0aCB3aGljaCB0byB3YXJkIG9mZiBvciBxdWVuY2ggdGhlbSwgYW5kIHdoZW4gYXQgbGVuZ3RoIHRoZWlyIGNhbXAgd2FzIGZ1bGwgb2YgZmlyZSwgdGhleSB3ZXJlIGh1ZGRsZWQgdG9nZXRoZXIgaW50byBhIHNtYWxsIHNwYWNlLCBhbmQgYXQgbGFzdCBmb3JjZWQgdG8gZGFzaCBvdXQgYWdhaW5zdCBhbiBlbmVteSB3aG8gd2VyZSBkcmF3biB1cCBpbiBmdWxsIGJhdHRsZSBhcnJheSBpbiBmcm9udCBvZiB0aGUgdHJlbmNoZXMuIEZldyBvZiB0aGVtIG1hZGUgdGhlaXIgZXNjYXBlLCBhbmQgdGhvc2Ugd2hvIHdlcmUgbGVmdCBiZWhpbmQgaW4gdGhlIGNhbXAgd2VyZSBhbGwgYSBwcmV5IHRvIHRoZSBmaXJlIHVudGlsIHRoZSBSb21hbnMgcHV0IGl0IG91dCBhbmQgZmVsbCB1cG9uIHRoZWlyIGJvb3R5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1vc3Qgd3JpdGVycyBhZG9wdCB0aGUgb3RoZXIgYWNjb3VudCBvZiB0aGlzIHdhciwgd2hpY2ggcnVucyB0aHVzLiBDYW1pbGx1cywgaGF2aW5nIGJlZW4gYXBwb2ludGVkIGRpY3RhdG9yIGZvciB0aGUgdGhpcmQgdGltZSwgYW5kIGxlYXJuaW5nIHRoYXQgdGhlIGFybXkgdW5kZXIgdGhlIG1pbGl0YXJ5IHRyaWJ1bmVzIHdhcyBiZXNpZWdlZCBieSB0aGUgTGF0aW5zIGFuZCBWb2xzY2lhbnMsIHdhcyBmb3JjZWQgdG8gcHV0IHVuZGVyIGFybXMgZXZlbiB0aG9zZSBvZiB0aGUgY2l0aXplbnMgd2hvIHdlcmUgZXhlbXB0IGZyb20gbWlsaXRhcnkgZHV0eSBieSByZWFzb24gb2YgYWR2YW5jaW5nIHllYXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZldGNoaW5nIGEgbG9uZyBjaXJjdWl0IGFyb3VuZCBNb3VudCBNYXJjaXVzIGFuZCB0aHVzIGVsdWRpbmcgdGhlIGVuZW15J3Mgbm90aWNlLCBoZSBwbGFudGVkIGhpcyBhcm15IHNlY3VyZWx5IGluIHRoZWlyIHJlYXIsIGFuZCB0aGVuIGJ5IGxpZ2h0aW5nIG1hbnkgZmlyZXMgbWFkZSBrbm93biBoaXMgcHJlc2VuY2UgdGhlcmUuIFRoZSBiZXNpZWdlZCBSb21hbnMgYXQgb25jZSB0b29rIGhlYXJ0IGFuZCBwdXJwb3NlZCB0byBzYWxseSBvdXQgYW5kIGpvaW4gYmF0dGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTGF0aW5zIGFuZCBWb2xzY2lhbnMgcmV0aXJlZCB3aXRoaW4gdGhlaXIgdHJlbmNoZXMsIGZlbmNlZCB0aGVtc2VsdmVzIGluIHdpdGggYSBncmVhdCB3b29kZW4gcGFsaXNhZGUsIGFuZCBiYXJyaWNhZGVkIHRoZWlyIGNhbXAgb24gYWxsIHNpZGVzLCBmb3IgdGhleSBub3cgaGFkIGEgaG9zdGlsZSBmb3JjZSBpbiBmcm9udCBhbmQgcmVhciwgYW5kIHdlcmUgZGV0ZXJtaW5lZCB0byBhd2FpdCByZWluZm9yY2VtZW50cyBmcm9tIGhvbWUuIEF0IHRoZSBzYW1lIHRpbWUgdGhleSBleHBlY3RlZCBhaWQgZnJvbSB0aGUgVHVzY2FucyBhbHNvLiBDYW1pbGx1cywgcGVyY2VpdmluZyB0aGVpciBkZXNpZ24sIGFuZCBmZWFyZnVsIG9mIGJlaW5nIGhpbXNlbGYgc3Vycm91bmRlZCBieSB0aGUgZW5lbXkgYXMgaGUgaGFkIHN1cnJvdW5kZWQgdGhlbSwgbWFkZSBoYXN0ZSB0byBpbXByb3ZlIGhpcyBvcHBvcnR1bml0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbmVtecOVcyBiYXJyaWNhZGVzIHdlcmUgb2Ygd29vZCwgYW5kIGEgc3Ryb25nIHdpbmQgYmxldyBkb3duIGZyb20gdGhlIG1vdW50YWlucyBhdCBzdW5yaXNlLiBBY2NvcmRpbmdseSwgaGUgZXF1aXBwZWQgaGltc2VsZiB3aXRoIGZpZXJ5IGRhcnRzLCBhbmQgbGVhZGluZyBoaXMgZm9yY2VzIG91dCB0b3dhcmRzIGRheS1icmVhaywgb3JkZXJlZCBwYXJ0IG9mIHRoZW0gdG8gYXR0YWNrIHdpdGggbWlzc2lsZXMgYW5kIGxvdWQgY3JpZXMgYXQgYW4gb3Bwb3NpdGUgcG9pbnQsIHdoaWxlIGhlIGhpbXNlbGYsIHdpdGggdGhvc2UgYXBwb2ludGVkIHRvIGh1cmwgZmlyZSwgdG9vayBoaXMgcG9zdCB3aGVyZSB0aGUgd2luZCB3YXMgd29udCB0byBzbWl0ZSB0aGUgZW5lbXkncyB0cmVuY2hlcyB3aXRoIHRoZSBncmVhdGVzdCBmb3JjZSwgYW5kIGF3YWl0ZWQgdGhlIHByb3BpdGlvdXMgbW9tZW50LiBXaGVuIGJhdHRsZSBoYWQgYmVlbiBqb2luZWQgYW5kIHRoZSBzdW4gcm9zZSBhbmQgdGhlIHdpbmQgYnVyc3QgZm9ydGggd2l0aCBmdXJ5LCBoZSBnYXZlIG9yZGVycyBmb3IgYW4gb25zZXQsIGFuZCBzY2F0dGVyZWQgbm8gZW5kIG9mIGZpZXJ5IGRhcnRzIGFsb25nIHRoZSB0cmVuY2hlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmbGFtZXMgc3BlZWRpbHkgZm91bmQgZm9vZCBpbiB0aGUgY3Jvd2RlZCB0aW1iZXJzIG9mIHRoZSB3b29kZW4gcGFsaXNhZGVzIGFuZCBzcHJlYWQgaW4gYWxsIGRpcmVjdGlvbnMuIFRoZSBMYXRpbnMgaGFkIG5vdGhpbmcgYXQgaGFuZCB3aXRoIHdoaWNoIHRvIHdhcmQgb2ZmIG9yIHF1ZW5jaCB0aGVtLCBhbmQgd2hlbiBhdCBsZW5ndGggdGhlaXIgY2FtcCB3YXMgZnVsbCBvZiBmaXJlLCB0aGV5IHdlcmUgaHVkZGxlZCB0b2dldGhlciBpbnRvIGEgc21hbGwgc3BhY2UsIGFuZCBhdCBsYXN0IGZvcmNlZCB0byBkYXNoIG91dCBhZ2FpbnN0IGFuIGVuZW15IHdobyB3ZXJlIGRyYXduIHVwIGluIGZ1bGwgYmF0dGxlIGFycmF5IGluIGZyb250IG9mIHRoZSB0cmVuY2hlcy4gRmV3IG9mIHRoZW0gbWFkZSB0aGVpciBlc2NhcGUsIGFuZCB0aG9zZSB3aG8gd2VyZSBsZWZ0IGJlaGluZCBpbiB0aGUgY2FtcCB3ZXJlIGFsbCBhIHByZXkgdG8gdGhlIGZpcmUgdW50aWwgdGhlIFJvbWFucyBwdXQgaXQgb3V0IGFuZCBmZWxsIHVwb24gdGhlaXIgYm9vdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYnVzaW5lc3MgZGlzcGF0Y2hlZCwgaGUgbGVmdCBoaXMgc29uIEx1Y2l1cyBpbiBjb21tYW5kIG9mIHRoZSBjYW1wIHRvIGd1YXJkIHRoZSBjYXB0aXZlcyBhbmQgdGhlIGJvb3R5LCB3aGlsZSBoZSBoaW1zZWxmIGludmFkZWQgdGhlIGVuZW15J3MgY291bnRyeS4gSGUgY2FwdHVyZWQgdGhlIGNpdHkgb2YgdGhlIEFlcXVpYW5zLCBicm91Z2h0IHRoZSBWb2xzY2lhbnMgdG8gdGVybXMsIGFuZCBzdHJhaWdodHdheSBsZWQgaGlzIGFybXkgdG93YXJkcyBTdXRyaXVtLiBIZSB3YXMgbm90IHlldCBhcHByaXNlZCBvZiB0aGUgZmF0ZSBvZiB0aGUgU3V0cmlhbnMsIGJ1dCB0aG91Z2h0IHRoZXkgd2VyZSBzdGlsbCBpbiBwZXJpbCBvZiBzaWVnZSBieSB0aGUgVHVzY2FucywgYW5kIHNvIGhhc3RlbmVkIHRvIHJlbGlldmUgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXkgaGFkIGFscmVhZHkgc3VycmVuZGVyZWQgdGhlaXIgY2l0eSB0byB0aGUgZW5lbXksIGFuZCBiZWVuIHNlbnQgb2ZmIGluIHV0dGVyIGRlc3RpdHV0aW9uLCB3aXRoIG5vdGhpbmcgYnV0IHRoZSBjbG90aGVzIG9uIHRoZWlyIGJhY2tzLiBBcyBDYW1pbGx1cyBjYW1lIG1hcmNoaW5nIGFsb25nIHRoZXkgbWV0IGhpbSwgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGFsbCBsYW1lbnRpbmcgdGhlaXIgbWlzZm9ydHVuZXMuIENhbWlsbHVzIGhpbXNlbGYgd2FzIGZpbGxlZCB3aXRoIGNvbXBhc3Npb24gYXQgdGhlIHNpZ2h0LCBhbmQgbm90aWNlZCB0aGF0IGhpcyBSb21hbnMgdG9vLCB3aXRoIHRoZSBTdXRyaWFucyBoYW5naW5nIHVwb24gdGhlaXIgbmVja3MgaW4gc3VwcGxpY2F0aW9uLCB3ZXJlIG1vdmVkIHRvIHRlYXJzIGFuZCBhbmdlciBhdCB0aGVpciBsb3QuIEhlIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIG1ha2Ugbm8gcG9zdHBvbmVtZW50IG9mIGhpcyB2ZW5nZWFuY2UsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0byBtYXJjaCBzdHJhaWdodCB1cG9uIFN1dHJpdW0gdGhhdCB2ZXJ5IGRheS4gSGUgcmVhc29uZWQgdGhhdCBtZW4gd2hvIGhhZCBqdXN0IHRha2VuIGEgcHJvc3Blcm91cyBhbmQgb3B1bGVudCBjaXR5LCBsZWF2aW5nIG5vbmUgb2YgdGhlaXIgZW5lbWllcyBpbiBpdCwgYW5kIGV4cGVjdGluZyBub25lIGZyb20gd2l0aG91dCwgd291bGQgYmUgZm91bmQgd2hvbGx5IHJlbGF4ZWQgaW4gZGlzY2lwbGluZSBhbmQgb2ZmIHRoZWlyIGd1YXJkOyBhbmQgaGUgcmVhc29uZWQgY29ycmVjdGx5LiBIZSBub3Qgb25seSBwYXNzZWQgdW5ub3RpY2VkIHRocm91Z2ggdGhlIGNpdHkncyB0ZXJyaXRvcnksIGJ1dCB3YXMgYWN0dWFsbHkgYXQgaXRzIGdhdGVzIGFuZCBpbiBjb21tYW5kIG9mIGl0cyB3YWxscyBiZWZvcmUgdGhlIGVuZW15IGtuZXcgaXQuIEZvciBub3QgYSBtYW4gb2YgdGhlbSB3YXMgb24gZ3VhcmQsIGJ1dCB0aGV5IHdlcmUgYWxsIHNjYXR0ZXJlZCBhbW9uZyB0aGUgaG91c2VzIG9mIHRoZSBjaXR5IGRyaW5raW5nIGFuZCBmZWFzdGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGV2ZW4gd2hlbiB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZWlyIGVuZW1pZXMgYWxyZWFkeSBoYWQgdGhlIG1hc3RlcnksIHRoZXkgd2VyZSBzbyBzbHVnZ2lzaGx5IGRpc3Bvc2VkIGJ5IHJlYXNvbiBvZiBzYXRpZXR5IGFuZCBkcnVua2VubmVzcyB0aGF0IG1hbnkgZGlkIG5vdCBzbyBtdWNoIGFzIHRyeSB0byBmbGVlLCBidXQgYXdhaXRlZCB0aGVyZSBpbiB0aGUgaG91c2VzIHRoZSBtb3N0IHNoYW1lZnVsIG9mIGFsbCBkZWF0aHMsIG9yIGdhdmUgdGhlbXNlbHZlcyB1cCB0byB0aGVpciBlbmVtaWVzLiBUaGUgY2l0eSBvZiBTdXRyaXVtIHdhcyB0aHVzIHR3aWNlIGNhcHR1cmVkIGluIGEgc2luZ2xlIGRheSwgYW5kIGl0IGNhbWUgdG8gcGFzcyB0aGF0IHRob3NlIHdobyBoYWQgd29uIGl0LCBsb3N0IGl0LCBhbmQgdGhvc2Ugd2hvIGhhZCBmaXJzdCBsb3N0IGl0LCB3b24gaXQgYmFjaywgYW5kIGFsbCBieSByZWFzb24gb2YgQ2FtaWxsdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBidXNpbmVzcyBkaXNwYXRjaGVkLCBoZSBsZWZ0IGhpcyBzb24gTHVjaXVzIGluIGNvbW1hbmQgb2YgdGhlIGNhbXAgdG8gZ3VhcmQgdGhlIGNhcHRpdmVzIGFuZCB0aGUgYm9vdHksIHdoaWxlIGhlIGhpbXNlbGYgaW52YWRlZCB0aGUgZW5lbXkncyBjb3VudHJ5LiBIZSBjYXB0dXJlZCB0aGUgY2l0eSBvZiB0aGUgQWVxdWlhbnMsIGJyb3VnaHQgdGhlIFZvbHNjaWFucyB0byB0ZXJtcywgYW5kIHN0cmFpZ2h0d2F5IGxlZCBoaXMgYXJteSB0b3dhcmRzIFN1dHJpdW0uIEhlIHdhcyBub3QgeWV0IGFwcHJpc2VkIG9mIHRoZSBmYXRlIG9mIHRoZSBTdXRyaWFucywgYnV0IHRob3VnaHQgdGhleSB3ZXJlIHN0aWxsIGluIHBlcmlsIG9mIHNpZWdlIGJ5IHRoZSBUdXNjYW5zLCBhbmQgc28gaGFzdGVuZWQgdG8gcmVsaWV2ZSB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IGhhZCBhbHJlYWR5IHN1cnJlbmRlcmVkIHRoZWlyIGNpdHkgdG8gdGhlIGVuZW15LCBhbmQgYmVlbiBzZW50IG9mZiBpbiB1dHRlciBkZXN0aXR1dGlvbiwgd2l0aCBub3RoaW5nIGJ1dCB0aGUgY2xvdGhlcyBvbiB0aGVpciBiYWNrcy4gQXMgQ2FtaWxsdXMgY2FtZSBtYXJjaGluZyBhbG9uZyB0aGV5IG1ldCBoaW0sIHdpdGggdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBhbGwgbGFtZW50aW5nIHRoZWlyIG1pc2ZvcnR1bmVzLiBDYW1pbGx1cyBoaW1zZWxmIHdhcyBmaWxsZWQgd2l0aCBjb21wYXNzaW9uIGF0IHRoZSBzaWdodCwgYW5kIG5vdGljZWQgdGhhdCBoaXMgUm9tYW5zIHRvbywgd2l0aCB0aGUgU3V0cmlhbnMgaGFuZ2luZyB1cG9uIHRoZWlyIG5lY2tzIGluIHN1cHBsaWNhdGlvbiwgd2VyZSBtb3ZlZCB0byB0ZWFycyBhbmQgYW5nZXIgYXQgdGhlaXIgbG90LiBIZSB0aGVyZWZvcmUgZGV0ZXJtaW5lZCB0byBtYWtlIG5vIHBvc3Rwb25lbWVudCBvZiBoaXMgdmVuZ2VhbmNlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0byBtYXJjaCBzdHJhaWdodCB1cG9uIFN1dHJpdW0gdGhhdCB2ZXJ5IGRheS4gSGUgcmVhc29uZWQgdGhhdCBtZW4gd2hvIGhhZCBqdXN0IHRha2VuIGEgcHJvc3Blcm91cyBhbmQgb3B1bGVudCBjaXR5LCBsZWF2aW5nIG5vbmUgb2YgdGhlaXIgZW5lbWllcyBpbiBpdCwgYW5kIGV4cGVjdGluZyBub25lIGZyb20gd2l0aG91dCwgd291bGQgYmUgZm91bmQgd2hvbGx5IHJlbGF4ZWQgaW4gZGlzY2lwbGluZSBhbmQgb2ZmIHRoZWlyIGd1YXJkOyBhbmQgaGUgcmVhc29uZWQgY29ycmVjdGx5LiBIZSBub3Qgb25seSBwYXNzZWQgdW5ub3RpY2VkIHRocm91Z2ggdGhlIGNpdHkncyB0ZXJyaXRvcnksIGJ1dCB3YXMgYWN0dWFsbHkgYXQgaXRzIGdhdGVzIGFuZCBpbiBjb21tYW5kIG9mIGl0cyB3YWxscyBiZWZvcmUgdGhlIGVuZW15IGtuZXcgaXQuIEZvciBub3QgYSBtYW4gb2YgdGhlbSB3YXMgb24gZ3VhcmQsIGJ1dCB0aGV5IHdlcmUgYWxsIHNjYXR0ZXJlZCBhbW9uZyB0aGUgaG91c2VzIG9mIHRoZSBjaXR5IGRyaW5raW5nIGFuZCBmZWFzdGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVuIHdoZW4gdGhleSBwZXJjZWl2ZWQgdGhhdCB0aGVpciBlbmVtaWVzIGFscmVhZHkgaGFkIHRoZSBtYXN0ZXJ5LCB0aGV5IHdlcmUgc28gc2x1Z2dpc2hseSBkaXNwb3NlZCBieSByZWFzb24gb2Ygc2F0aWV0eSBhbmQgZHJ1bmtlbm5lc3MgdGhhdCBtYW55IGRpZCBub3Qgc28gbXVjaCBhcyB0cnkgdG8gZmxlZSwgYnV0IGF3YWl0ZWQgdGhlcmUgaW4gdGhlIGhvdXNlcyB0aGUgbW9zdCBzaGFtZWZ1bCBvZiBhbGwgZGVhdGhzLCBvciBnYXZlIHRoZW1zZWx2ZXMgdXAgdG8gdGhlaXIgZW5lbWllcy4gVGhlIGNpdHkgb2YgU3V0cml1bSB3YXMgdGh1cyB0d2ljZSBjYXB0dXJlZCBpbiBhIHNpbmdsZSBkYXksIGFuZCBpdCBjYW1lIHRvIHBhc3MgdGhhdCB0aG9zZSB3aG8gaGFkIHdvbiBpdCwgbG9zdCBpdCwgYW5kIHRob3NlIHdobyBoYWQgZmlyc3QgbG9zdCBpdCwgd29uIGl0IGJhY2ssIGFuZCBhbGwgYnkgcmVhc29uIG9mIENhbWlsbHVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgdHJpdW1waCBkZWNyZWVkIGhpbSBmb3IgdGhlc2UgdmljdG9yaWVzIGJyb3VnaHQgaGltIG5vIGxlc3MgZmF2b3VyIGFuZCByZW5vd24gdGhhbiBoaXMgZmlyc3QgdHdvIGhhZCBkb25lLCBhbmQgdGhvc2UgY2l0aXplbnMgd2hvIGhhZCBiZWVuIG1vc3QgZW52aW91cyBvZiBoaW0gYW5kIHByZWZlcnJlZCB0byBhc2NyaWJlIGFsbCBoaXMgc3VjY2Vzc2VzIHRvIGFuIHVuYm91bmRlZCBnb29kIGZvcnR1bmUgcmF0aGVyIHRoYW4gdG8gYSBuYXRpdmUgdmFsb3VyLCB3ZXJlIGZvcmNlZCBieSB0aGVzZSBuZXcgZXhwbG9pdHMgdG8gc2V0IHRoZSBtYW4ncyBnbG9yeSB0byB0aGUgY3JlZGl0IG9mIGhpcyBhYmlsaXR5IGFuZCBlbmVyZ3kuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBvZiBhbGwgdGhvc2Ugd2hvIGZvdWdodCBoaW0gd2l0aCBoYXRyZWQgYW5kIGVudnksIHRoZSBtb3N0IGNvbnNwaWN1b3VzIHdhcyBNYXJjdXMgTWFubGl1cywgdGhlIG1hbiB3aG8gZmlyc3QgdGhydXN0IHRoZSBHYXVscyBkb3duIHRoZSBjbGlmZiB3aGVuIHRoZXkgbWFkZSB0aGVpciBuaWdodCBhdHRhY2sgdXBvbiB0aGUgQ2FwaXRvbCwgYW5kIGZvciB0aGlzIHJlYXNvbiBoYWQgYmVlbiBzdXJuYW1lZCBDYXBpdG9saW51cy4gVGhpcyBtYW4gYXNwaXJlZCB0byBiZSBjaGllZiBpbiB0aGUgY2l0eSwgYW5kIHNpbmNlIGhlIGNvdWxkIG5vdCBpbiB0aGUgZmFpcmVzdCB3YXkgb3V0c3RyaXAgQ2FtaWxsdXMgaW4gdGhlIHJhY2UgZm9yIGdsb3J5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5oZSBoYWQgcmVjb3Vyc2UgdG8gdGhlIHdvbnRlZCBhbmQgdXN1YWwgYXJ0cyBvZiB0aG9zZSB0aGF0IHdvdWxkIGZvdW5kIGEgdHlyYW5ueS4gSGUgY291cnRlZCwgdGhhdCBpcywgdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlLCBlc3BlY2lhbGx5IG9mIHRoZSBkZWJ0b3IgY2xhc3MsIGRlZmVuZGluZyBzb21lIGFuZCBwbGVhZGluZyB0aGVpciBjYXVzZXMgYWdhaW5zdCB0aGVpciBjcmVkaXRvcnM7IHNuYXRjaGluZyBvdGhlcnMgZnJvbSBhcnJlc3QgYW5kIHByZXZlbnRpbmcgdGhlaXIgdHJpYWwgYnkgcHJvY2VzcyBvZiBsYXcuIEluIHRoaXMgd2F5IGdyZWF0IG51bWJlcnMgb2YgaW5kaWdlbnQgZm9sayBzb29uIGZvcm1lZCBhIHBhcnR5IGFib3V0IGhpbSwgYW5kIHRoZWlyIGJvbGQgYW5kIHJpb3RvdXMgY29uZHVjdCBpbiB0aGUgZm9ydW0gZ2F2ZSB0aGUgYmVzdCBjaXRpemVucyBtdWNoIHRvIGZlYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHF1ZWxsIHRoZWlyIGRpc29yZGVyLCBRdWludHVzIENhcGl0b2xpbnVzIHdhcyBtYWRlIGRpY3RhdG9yLCBhbmQgaGUgY2FzdCBNYW5saXVzIGludG8gcHJpc29uLiBUaGVyZXVwb24gdGhlIHBlb3BsZSBwdXQgb24gdGhlIGdhcmIgb2YgbW91cm5lcnMsIGEgdGhpbmcgZG9uZSBvbmx5IGluIHRpbWVzIG9mIGdyZWF0IHB1YmxpYyBjYWxhbWl0eSwgYW5kIHRoZSBTZW5hdGUsIGNvd2VkIGJ5IHRoZSB0dW11bHQsIG9yZGVyZWQgdGhhdCBNYW5saXVzIGJlIHJlbGVhc2VkLiBIZSwgaG93ZXZlciwgd2hlbiByZWxlYXNlZCwgZGlkIG5vdCBtZW5kIGhpcyB3YXlzLCBidXQgZ3JldyBtb3JlIGRlZmlhbnRseSBzZWRpdGlvdXMsIGFuZCBmaWxsZWQgdGhlIHdob2xlIGNpdHkgd2l0aCBmYWN0aW9uLiBBY2NvcmRpbmdseSwgQ2FtaWxsdXMgd2FzIGFnYWluIG1hZGUgbWlsaXRhcnkgdHJpYnVuZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRyaXVtcGggZGVjcmVlZCBoaW0gZm9yIHRoZXNlIHZpY3RvcmllcyBicm91Z2h0IGhpbSBubyBsZXNzIGZhdm91ciBhbmQgcmVub3duIHRoYW4gaGlzIGZpcnN0IHR3byBoYWQgZG9uZSwgYW5kIHRob3NlIGNpdGl6ZW5zIHdobyBoYWQgYmVlbiBtb3N0IGVudmlvdXMgb2YgaGltIGFuZCBwcmVmZXJyZWQgdG8gYXNjcmliZSBhbGwgaGlzIHN1Y2Nlc3NlcyB0byBhbiB1bmJvdW5kZWQgZ29vZCBmb3J0dW5lIHJhdGhlciB0aGFuIHRvIGEgbmF0aXZlIHZhbG91ciwgd2VyZSBmb3JjZWQgYnkgdGhlc2UgbmV3IGV4cGxvaXRzIHRvIHNldCB0aGUgbWFuJ3MgZ2xvcnkgdG8gdGhlIGNyZWRpdCBvZiBoaXMgYWJpbGl0eSBhbmQgZW5lcmd5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBvZiBhbGwgdGhvc2Ugd2hvIGZvdWdodCBoaW0gd2l0aCBoYXRyZWQgYW5kIGVudnksIHRoZSBtb3N0IGNvbnNwaWN1b3VzIHdhcyBNYXJjdXMgTWFubGl1cywgdGhlIG1hbiB3aG8gZmlyc3QgdGhydXN0IHRoZSBHYXVscyBkb3duIHRoZSBjbGlmZiB3aGVuIHRoZXkgbWFkZSB0aGVpciBuaWdodCBhdHRhY2sgdXBvbiB0aGUgQ2FwaXRvbCwgYW5kIGZvciB0aGlzIHJlYXNvbiBoYWQgYmVlbiBzdXJuYW1lZCBDYXBpdG9saW51cy4gVGhpcyBtYW4gYXNwaXJlZCB0byBiZSBjaGllZiBpbiB0aGUgY2l0eSwgYW5kIHNpbmNlIGhlIGNvdWxkIG5vdCBpbiB0aGUgZmFpcmVzdCB3YXkgb3V0c3RyaXAgQ2FtaWxsdXMgaW4gdGhlIHJhY2UgZm9yIGdsb3J5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhlIGhhZCByZWNvdXJzZSB0byB0aGUgd29udGVkIGFuZCB1c3VhbCBhcnRzIG9mIHRob3NlIHRoYXQgd291bGQgZm91bmQgYSB0eXJhbm55LiBIZSBjb3VydGVkLCB0aGF0IGlzLCB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIGVzcGVjaWFsbHkgb2YgdGhlIGRlYnRvciBjbGFzcywgZGVmZW5kaW5nIHNvbWUgYW5kIHBsZWFkaW5nIHRoZWlyIGNhdXNlcyBhZ2FpbnN0IHRoZWlyIGNyZWRpdG9yczsgc25hdGNoaW5nIG90aGVycyBmcm9tIGFycmVzdCBhbmQgcHJldmVudGluZyB0aGVpciB0cmlhbCBieSBwcm9jZXNzIG9mIGxhdy4gSW4gdGhpcyB3YXkgZ3JlYXQgbnVtYmVycyBvZiBpbmRpZ2VudCBmb2xrIHNvb24gZm9ybWVkIGEgcGFydHkgYWJvdXQgaGltLCBhbmQgdGhlaXIgYm9sZCBhbmQgcmlvdG91cyBjb25kdWN0IGluIHRoZSBmb3J1bSBnYXZlIHRoZSBiZXN0IGNpdGl6ZW5zIG11Y2ggdG8gZmVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHF1ZWxsIHRoZWlyIGRpc29yZGVyLCBRdWludHVzIENhcGl0b2xpbnVzIHdhcyBtYWRlIGRpY3RhdG9yLCBhbmQgaGUgY2FzdCBNYW5saXVzIGludG8gcHJpc29uLiBUaGVyZXVwb24gdGhlIHBlb3BsZSBwdXQgb24gdGhlIGdhcmIgb2YgbW91cm5lcnMsIGEgdGhpbmcgZG9uZSBvbmx5IGluIHRpbWVzIG9mIGdyZWF0IHB1YmxpYyBjYWxhbWl0eSwgYW5kIHRoZSBTZW5hdGUsIGNvd2VkIGJ5IHRoZSB0dW11bHQsIG9yZGVyZWQgdGhhdCBNYW5saXVzIGJlIHJlbGVhc2VkLiBIZSwgaG93ZXZlciwgd2hlbiByZWxlYXNlZCwgZGlkIG5vdCBtZW5kIGhpcyB3YXlzLCBidXQgZ3JldyBtb3JlIGRlZmlhbnRseSBzZWRpdGlvdXMsIGFuZCBmaWxsZWQgdGhlIHdob2xlIGNpdHkgd2l0aCBmYWN0aW9uLiBBY2NvcmRpbmdseSwgQ2FtaWxsdXMgd2FzIGFnYWluIG1hZGUgbWlsaXRhcnkgdHJpYnVuZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNYW5saXVzIHdhcyBicm91Z2h0IHRvIHRyaWFsLCB0aGUgdmlldyBmcm9tIHRoZSBwbGFjZSB3YXMgYSBncmVhdCBvYnN0YWNsZSBpbiB0aGUgd2F5IG9mIGhpcyBhY2N1c2Vycy4gRm9yIHRoZSBzcG90IHdoZXJlIE1hbmxpdXMgaGFkIHN0b29kIHdoZW4gaGUgZm91Z2h0IGhpcyBuaWdodCBiYXR0bGUgd2l0aCB0aGUgR2F1bHMsIG92ZXJsb29rZWQgdGhlIGZvcnVtIGZyb20gdGhlIENhcGl0b2wsIGFuZCBtb3ZlZCB0aGUgaGVhcnRzIG9mIHRoZSBzcGVjdGF0b3JzIHRvIHBpdHkuIE1hbmxpdXMgaGltc2VsZiwgdG9vLCBzdHJldGNoZWQgb3V0IGhpcyBoYW5kcyB0b3dhcmQgdGhlIHNwb3QsIGFuZCB3ZXB0IGFzIGhlIGNhbGxlZCB0byBtZW4ncyByZW1lbWJyYW5jZSBoaXMgZmFtb3VzIHN0cnVnZ2xlIHRoZXJlLCBzbyB0aGF0IHRoZSBqdWRnZXMga25ldyBub3Qgd2hhdCB0byBkbywgYW5kIG9uY2UgYW5kIGFnYWluIHBvc3Rwb25lZCB0aGUgY2FzZS4gVGhleSB3ZXJlIHVud2lsbGluZyB0byBhY3F1aXQgdGhlIHByaXNvbmVyIG9mIGhpcyBjcmltZSB3aGVuIHRoZSBwcm9vZnMgb2YgaXQgd2VyZSBzbyBwbGFpbjsgYW5kIHRoZXkgd2VyZSB1bmFibGUgdG8gZXhlY3V0ZSB0aGUgbGF3IHVwb24gaGltIHdoZW4sIG93aW5nIHRvIHRoZSBwbGFjZSBvZiB0cmlhbCwgaGlzIHNhdmluZyBleHBsb2l0IHdhcywgc28gdG8gc3BlYWssIGluIGV2ZXJ5IGV5ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U28gQ2FtaWxsdXMsIHNlbnNpYmxlIG9mIGFsbCB0aGlzLCB0cmFuc2ZlcnJlZCB0aGUgY291cnQgb3V0c2lkZSB0aGUgY2l0eSB0byB0aGUgUGV0ZWxpbmUgR3JvdmUsIHdoZW5jZSB0aGVyZSBpcyBubyB2aWV3IG9mIHRoZSBDYXBpdG9sLiBUaGVyZSB0aGUgcHJvc2VjdXRvciBtYWRlIGhpcyBpbmRpY3RtZW50LCBhbmQgdGhlIGp1ZGdlcyB3ZXJlIGFibGUgdG8gZm9yZ2V0IHRoZSBtYW4ncyBwYXN0IHNlcnZpY2VzIGluIHRoZWlyIHJpZ2h0ZW91cyBhbmdlciBhdCBoaXMgcHJlc2VudCBjcmltZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gTWFubGl1cyB3YXMgY29udmljdGVkLCBjYXJyaWVkIHRvIHRoZSBDYXBpdG9sLCBhbmQgdGhydXN0IGRvd24gdGhlIHJvY2ssIHRodXMgbWFraW5nIG9uZSBhbmQgdGhlIHNhbWUgc3BvdCBhIG1vbnVtZW50IG9mIGhpcyBtb3N0IGZvcnR1bmF0ZSBhY3Rpb25zIGFuZCBvZiBoaXMgZ3JlYXRlc3QgbWlzZm9ydHVuZXMuIFRoZSBSb21hbnMsIGJlc2lkZXMsIHJhemVkIGhpcyBob3VzZSB0byB0aGUgZ3JvdW5kLCBhbmQgYnVpbHQgdGhlcmUgYSB0ZW1wbGUgdG8gdGhlIGdvZGRlc3MgdGhleSBjYWxsIE1vbmV0YS4gVGhleSBkZWNyZWVkIGFsc28gdGhhdCBpbiBmdXR1cmUgbm8gcGF0cmljaWFuIHNob3VsZCBldmVyIGhhdmUgYSBob3VzZSBvbiB0aGUgQ2FwaXRvbGluZSBoaWxsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWFubGl1cyB3YXMgYnJvdWdodCB0byB0cmlhbCwgdGhlIHZpZXcgZnJvbSB0aGUgcGxhY2Ugd2FzIGEgZ3JlYXQgb2JzdGFjbGUgaW4gdGhlIHdheSBvZiBoaXMgYWNjdXNlcnMuIEZvciB0aGUgc3BvdCB3aGVyZSBNYW5saXVzIGhhZCBzdG9vZCB3aGVuIGhlIGZvdWdodCBoaXMgbmlnaHQgYmF0dGxlIHdpdGggdGhlIEdhdWxzLCBvdmVybG9va2VkIHRoZSBmb3J1bSBmcm9tIHRoZSBDYXBpdG9sLCBhbmQgbW92ZWQgdGhlIGhlYXJ0cyBvZiB0aGUgc3BlY3RhdG9ycyB0byBwaXR5LiBNYW5saXVzIGhpbXNlbGYsIHRvbywgc3RyZXRjaGVkIG91dCBoaXMgaGFuZHMgdG93YXJkIHRoZSBzcG90LCBhbmQgd2VwdCBhcyBoZSBjYWxsZWQgdG8gbWVuJ3MgcmVtZW1icmFuY2UgaGlzIGZhbW91cyBzdHJ1Z2dsZSB0aGVyZSwgc28gdGhhdCB0aGUganVkZ2VzIGtuZXcgbm90IHdoYXQgdG8gZG8sIGFuZCBvbmNlIGFuZCBhZ2FpbiBwb3N0cG9uZWQgdGhlIGNhc2UuIFRoZXkgd2VyZSB1bndpbGxpbmcgdG8gYWNxdWl0IHRoZSBwcmlzb25lciBvZiBoaXMgY3JpbWUgd2hlbiB0aGUgcHJvb2ZzIG9mIGl0IHdlcmUgc28gcGxhaW47IGFuZCB0aGV5IHdlcmUgdW5hYmxlIHRvIGV4ZWN1dGUgdGhlIGxhdyB1cG9uIGhpbSB3aGVuLCBvd2luZyB0byB0aGUgcGxhY2Ugb2YgdHJpYWwsIGhpcyBzYXZpbmcgZXhwbG9pdCB3YXMsIHNvIHRvIHNwZWFrLCBpbiBldmVyeSBleWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvIENhbWlsbHVzLCBzZW5zaWJsZSBvZiBhbGwgdGhpcywgdHJhbnNmZXJyZWQgdGhlIGNvdXJ0IG91dHNpZGUgdGhlIGNpdHkgdG8gdGhlIFBldGVsaW5lIEdyb3ZlLCB3aGVuY2UgdGhlcmUgaXMgbm8gdmlldyBvZiB0aGUgQ2FwaXRvbC4gVGhlcmUgdGhlIHByb3NlY3V0b3IgbWFkZSBoaXMgaW5kaWN0bWVudCwgYW5kIHRoZSBqdWRnZXMgd2VyZSBhYmxlIHRvIGZvcmdldCB0aGUgbWFuJ3MgcGFzdCBzZXJ2aWNlcyBpbiB0aGVpciByaWdodGVvdXMgYW5nZXIgYXQgaGlzIHByZXNlbnQgY3JpbWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gTWFubGl1cyB3YXMgY29udmljdGVkLCBjYXJyaWVkIHRvIHRoZSBDYXBpdG9sLCBhbmQgdGhydXN0IGRvd24gdGhlIHJvY2ssIHRodXMgbWFraW5nIG9uZSBhbmQgdGhlIHNhbWUgc3BvdCBhIG1vbnVtZW50IG9mIGhpcyBtb3N0IGZvcnR1bmF0ZSBhY3Rpb25zIGFuZCBvZiBoaXMgZ3JlYXRlc3QgbWlzZm9ydHVuZXMuIFRoZSBSb21hbnMsIGJlc2lkZXMsIHJhemVkIGhpcyBob3VzZSB0byB0aGUgZ3JvdW5kLCBhbmQgYnVpbHQgdGhlcmUgYSB0ZW1wbGUgdG8gdGhlIGdvZGRlc3MgdGhleSBjYWxsIE1vbmV0YS4gVGhleSBkZWNyZWVkIGFsc28gdGhhdCBpbiBmdXR1cmUgbm8gcGF0cmljaWFuIHNob3VsZCBldmVyIGhhdmUgYSBob3VzZSBvbiB0aGUgQ2FwaXRvbGluZSBoaWxsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYW1pbGx1cywgY2FsbGVkIG5vdyB0byBiZSBtaWxpdGFyeSB0cmlidW5lIGZvciB0aGUgc2l4dGggdGltZSwgZGVjbGluZWQgdGhlIGhvbm91ciwgYmVpbmcgYWxyZWFkeSB3ZWxsIG9uIGluIHllYXJzLCBhbmQgZmVhcmZ1bCBwZXJoYXBzIG9mIHRoZSBlbnZ5IG9mIG1lbiBhbmQgdGhlIHJlc2VudG1lbnQgb2YgdGhlIGdvZHMgd2hpY2ggb2Z0ZW4gZm9sbG93cyB1cG9uIHN1Y2ggZ2xvcmlvdXMgc3VjY2Vzc2VzIGFzIGhpcy4gQnV0IHRoZSBtb3N0IG1hbmlmZXN0IHJlYXNvbiB3YXMgaGlzIGJvZGlseSB3ZWFrbmVzcywgZm9yIGl0IGNoYW5jZWQgdGhhdCBpbiB0aG9zZSBkYXlzIGhlIHdhcyBzaWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlLCBob3dldmVyLCB3b3VsZCBub3QgcmVsaWV2ZSBoaW0gb2YgdGhlIG9mZmljZS4gSGUgaGFkIG5vIG5lZWQsIHRoZXkgY3JpZWQsIHRvIGZpZ2h0IGluIHRoZSByYW5rcyBvZiB0aGUgY2F2YWxyeSBvciB0aGUgbWVuLWF0LWFybXMsIGJ1dCBvbmx5IHRvIGNvdW5zZWwgYW5kIG9yZGFpbjsgYW5kIHNvIHRoZXkgZm9yY2VkIGhpbSB0byB1bmRlcnRha2UgdGhlIGNvbW1hbmQsIGFuZCB3aXRoIG9uZSBvZiBoaXMgY29sbGVhZ3VlcywgTHVjaXVzIEZ1cml1cywgdG8gbGVhZCB0aGUgYXJteSBhdCBvbmNlIGFnYWluc3QgdGhlIGVuZW15LiBUaGVzZSB3ZXJlIHRoZSBQcmFlbmVzdGluZXMgYW5kIFZvbHNjaWFucywgd2hvLCB3aXRoIGEgbGFyZ2UgZm9yY2UsIHdlcmUgbGF5aW5nIHdhc3RlIHRoZSBsYW5kcyBvZiB0aGUgUm9tYW4gYWxsaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5NYXJjaGluZyBmb3J0aCwgdGhlcmVmb3JlLCBhbmQgZW5jYW1waW5nIG5lYXIgdGhlIGVuZW15LCBoZSBoaW1zZWxmIHRob3VnaHQgaXQgYmVzdCB0byBwcm90cmFjdCB0aGUgd2FyLCB0aGF0IHNvLCBpbiBjYXNlIGEgYmF0dGxlIHNob3VsZCBhdCBsYXN0IGJlIG5lY2Vzc2FyeSwgaGUgbWlnaHQgYmUgc3Ryb25nIG9mIGJvZHkgZm9yIHRoZSBkZWNpc2l2ZSBzdHJ1Z2dsZS4gQnV0IEx1Y2l1cywgaGlzIGNvbGxlYWd1ZSwgY2FycmllZCBhd2F5IGJ5IGhpcyBkZXNpcmUgZm9yIGdsb3J5LCB3b3VsZCBub3QgYmUgY2hlY2tlZCBpbiBoaXMgYXJkb3VyIGZvciBiYXR0bGUsIGFuZCBpbmNpdGVkIHRoZSBzYW1lIGZlZWxpbmdzIGluIHRoZSBpbmZlcmlvciBvZmZpY2VycyBvZiB0aGUgYXJteS4gU28gQ2FtaWxsdXMsIGZlYXJpbmcgbGVzdCBpdCBiZSB0aG91Z2h0IHRoYXQgb3V0IG9mIHBldHR5IGplYWxvdXN5IGhlIHdhcyB0cnlpbmcgdG8gcm9iIHlvdW5nZXIgbWVuIG9mIHRoZSBzdWNjZXNzZXMgdG8gd2hpY2ggdGhleSBlYWdlcmx5IGFzcGlyZWQsIGNvbnNlbnRlZCwgd2l0aCByZWx1Y3RhbmNlLCB0aGF0IEx1Y2l1cyBzaG91bGQgbGVhZCB0aGUgZm9yY2VzIG91dCB0byBiYXR0bGUsIHdoaWxlIGhlIGhpbXNlbGYsIG9uIGFjY291bnQgb2YgaGlzIHNpY2tuZXNzLCB3YXMgbGVmdCBiZWhpbmQgaW4gdGhlIGNhbXAgd2l0aCBhIGZldyBmb2xsb3dlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkx1Y2l1cyBjb25kdWN0ZWQgdGhlIGJhdHRsZSByYXNobHkgYW5kIHdhcyBkaXNjb21maXRlZCwgd2hlcmV1cG9uIENhbWlsbHVzLCBwZXJjZWl2aW5nIHRoZSByb3V0IG9mIHRoZSBSb21hbnMsIGNvdWxkIG5vdCByZXN0cmFpbiBoaW1zZWxmLCBidXQgc3ByYW5nIHVwIGZyb20gaGlzIGNvdWNoIGFuZCByYW4gd2l0aCBoaXMgYXR0ZW5kYW50cyB0byB0aGUgZ2F0ZSBvZiB0aGUgY2FtcC4gVGhyb3VnaCB0aGUgZnVnaXRpdmVzIGhlIHB1c2hlZCBoaXMgd2F5IHRvIHRoZWlyIHB1cnN1ZXJzLiBUaG9zZSBvZiBoaXMgbWVuIHdobyBoYWQgcGFzc2VkIGhpbSBpbnRvIHRoZSBjYW1wLCB3aGVlbGVkIGFib3V0IGF0IG9uY2UgYW5kIGZvbGxvd2VkIGhpbSwgYW5kIHRob3NlIHdobyBjYW1lIGJlYXJpbmcgZG93biBvbiBoaW0gZnJvbSBvdXRzaWRlLCBoYWx0ZWQgYW5kIGZvcm1lZCB0aGVpciBsaW5lcyBhYm91dCBoaW0sIGV4aG9ydGluZyBvbmUgYW5vdGhlciBub3QgdG8gYWJhbmRvbiB0aGVpciBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIHdheSwgZm9yIHRoYXQgZGF5LCB0aGUgZW5lbXkgd2VyZSB0dXJuZWQgYmFjayBmcm9tIHRoZWlyIHB1cnN1aXQuIE9uIHRoZSBuZXh0IGRheSwgQ2FtaWxsdXMgbGVkIGhpcyBmb3JjZXMgb3V0LCBqb2luZWQgYmF0dGxlIHdpdGggdGhlIGVuZW15LCBkZWZlYXRlZCB0aGVtIHV0dGVybHksIGFuZCB0b29rIHRoZWlyIGNhbXAsIGFjdHVhbGx5IGJ1cnN0aW5nIGludG8gaXQgYWxvbmcgd2l0aCB0aG9zZSB3aG8gZmxlZCB0byBpdCwgYW5kIHNsYXlpbmcgbW9zdCBvZiB0aGVtLiBBZnRlciB0aGlzLCBsZWFybmluZyB0aGF0IHRoZSBjaXR5IG9mIFNhdHJpY3VtIGhhZCBiZWVuIHRha2VuIGJ5IHRoZSBUdXNjYW5zLCBhbmQgaXRzIGluaGFiaXRhbnRzLCBhbGwgUm9tYW5zLCBwdXQgdG8gdGhlIHN3b3JkLCBoZSBzZW50IGJhY2sgdG8gUm9tZSB0aGUgbWFpbiBib2R5IG9mIGhpcyBhcm15LCBjb21wcmlzaW5nIHRoZSBtZW4tYXQtYXJtcywgd2hpbGUgaGUgaGltc2VsZiwgd2l0aCB0aGUgeW91bmdlc3QgYW5kIG1vc3QgYXJkZW50IG9mIGhpcyBtZW4sIGZlbGwgc3VkZGVubHkgdXBvbiB0aGUgVHVzY2FucyB3aG8gaGVsZCB0aGUgY2l0eSBhbmQgbWFzdGVyZWQgdGhlbSwgZXhwZWxsaW5nIHNvbWUgYW5kIHNsYXlpbmcgdGhlIHJlc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2FtaWxsdXMsIGNhbGxlZCBub3cgdG8gYmUgbWlsaXRhcnkgdHJpYnVuZSBmb3IgdGhlIHNpeHRoIHRpbWUsIGRlY2xpbmVkIHRoZSBob25vdXIsIGJlaW5nIGFscmVhZHkgd2VsbCBvbiBpbiB5ZWFycywgYW5kIGZlYXJmdWwgcGVyaGFwcyBvZiB0aGUgZW52eSBvZiBtZW4gYW5kIHRoZSByZXNlbnRtZW50IG9mIHRoZSBnb2RzIHdoaWNoIG9mdGVuIGZvbGxvd3MgdXBvbiBzdWNoIGdsb3Jpb3VzIHN1Y2Nlc3NlcyBhcyBoaXMuIEJ1dCB0aGUgbW9zdCBtYW5pZmVzdCByZWFzb24gd2FzIGhpcyBib2RpbHkgd2Vha25lc3MsIGZvciBpdCBjaGFuY2VkIHRoYXQgaW4gdGhvc2UgZGF5cyBoZSB3YXMgc2ljay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUsIGhvd2V2ZXIsIHdvdWxkIG5vdCByZWxpZXZlIGhpbSBvZiB0aGUgb2ZmaWNlLiBIZSBoYWQgbm8gbmVlZCwgdGhleSBjcmllZCwgdG8gZmlnaHQgaW4gdGhlIHJhbmtzIG9mIHRoZSBjYXZhbHJ5IG9yIHRoZSBtZW4tYXQtYXJtcywgYnV0IG9ubHkgdG8gY291bnNlbCBhbmQgb3JkYWluOyBhbmQgc28gdGhleSBmb3JjZWQgaGltIHRvIHVuZGVydGFrZSB0aGUgY29tbWFuZCwgYW5kIHdpdGggb25lIG9mIGhpcyBjb2xsZWFndWVzLCBMdWNpdXMgRnVyaXVzLCB0byBsZWFkIHRoZSBhcm15IGF0IG9uY2UgYWdhaW5zdCB0aGUgZW5lbXkuIFRoZXNlIHdlcmUgdGhlIFByYWVuZXN0aW5lcyBhbmQgVm9sc2NpYW5zLCB3aG8sIHdpdGggYSBsYXJnZSBmb3JjZSwgd2VyZSBsYXlpbmcgd2FzdGUgdGhlIGxhbmRzIG9mIHRoZSBSb21hbiBhbGxpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcmNoaW5nIGZvcnRoLCB0aGVyZWZvcmUsIGFuZCBlbmNhbXBpbmcgbmVhciB0aGUgZW5lbXksIGhlIGhpbXNlbGYgdGhvdWdodCBpdCBiZXN0IHRvIHByb3RyYWN0IHRoZSB3YXIsIHRoYXQgc28sIGluIGNhc2UgYSBiYXR0bGUgc2hvdWxkIGF0IGxhc3QgYmUgbmVjZXNzYXJ5LCBoZSBtaWdodCBiZSBzdHJvbmcgb2YgYm9keSBmb3IgdGhlIGRlY2lzaXZlIHN0cnVnZ2xlLiBCdXQgTHVjaXVzLCBoaXMgY29sbGVhZ3VlLCBjYXJyaWVkIGF3YXkgYnkgaGlzIGRlc2lyZSBmb3IgZ2xvcnksIHdvdWxkIG5vdCBiZSBjaGVja2VkIGluIGhpcyBhcmRvdXIgZm9yIGJhdHRsZSwgYW5kIGluY2l0ZWQgdGhlIHNhbWUgZmVlbGluZ3MgaW4gdGhlIGluZmVyaW9yIG9mZmljZXJzIG9mIHRoZSBhcm15LiBTbyBDYW1pbGx1cywgZmVhcmluZyBsZXN0IGl0IGJlIHRob3VnaHQgdGhhdCBvdXQgb2YgcGV0dHkgamVhbG91c3kgaGUgd2FzIHRyeWluZyB0byByb2IgeW91bmdlciBtZW4gb2YgdGhlIHN1Y2Nlc3NlcyB0byB3aGljaCB0aGV5IGVhZ2VybHkgYXNwaXJlZCwgY29uc2VudGVkLCB3aXRoIHJlbHVjdGFuY2UsIHRoYXQgTHVjaXVzIHNob3VsZCBsZWFkIHRoZSBmb3JjZXMgb3V0IHRvIGJhdHRsZSwgd2hpbGUgaGUgaGltc2VsZiwgb24gYWNjb3VudCBvZiBoaXMgc2lja25lc3MsIHdhcyBsZWZ0IGJlaGluZCBpbiB0aGUgY2FtcCB3aXRoIGEgZmV3IGZvbGxvd2Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkx1Y2l1cyBjb25kdWN0ZWQgdGhlIGJhdHRsZSByYXNobHkgYW5kIHdhcyBkaXNjb21maXRlZCwgd2hlcmV1cG9uIENhbWlsbHVzLCBwZXJjZWl2aW5nIHRoZSByb3V0IG9mIHRoZSBSb21hbnMsIGNvdWxkIG5vdCByZXN0cmFpbiBoaW1zZWxmLCBidXQgc3ByYW5nIHVwIGZyb20gaGlzIGNvdWNoIGFuZCByYW4gd2l0aCBoaXMgYXR0ZW5kYW50cyB0byB0aGUgZ2F0ZSBvZiB0aGUgY2FtcC4gVGhyb3VnaCB0aGUgZnVnaXRpdmVzIGhlIHB1c2hlZCBoaXMgd2F5IHRvIHRoZWlyIHB1cnN1ZXJzLiBUaG9zZSBvZiBoaXMgbWVuIHdobyBoYWQgcGFzc2VkIGhpbSBpbnRvIHRoZSBjYW1wLCB3aGVlbGVkIGFib3V0IGF0IG9uY2UgYW5kIGZvbGxvd2VkIGhpbSwgYW5kIHRob3NlIHdobyBjYW1lIGJlYXJpbmcgZG93biBvbiBoaW0gZnJvbSBvdXRzaWRlLCBoYWx0ZWQgYW5kIGZvcm1lZCB0aGVpciBsaW5lcyBhYm91dCBoaW0sIGV4aG9ydGluZyBvbmUgYW5vdGhlciBub3QgdG8gYWJhbmRvbiB0aGVpciBnZW5lcmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5LCBmb3IgdGhhdCBkYXksIHRoZSBlbmVteSB3ZXJlIHR1cm5lZCBiYWNrIGZyb20gdGhlaXIgcHVyc3VpdC4gT24gdGhlIG5leHQgZGF5LCBDYW1pbGx1cyBsZWQgaGlzIGZvcmNlcyBvdXQsIGpvaW5lZCBiYXR0bGUgd2l0aCB0aGUgZW5lbXksIGRlZmVhdGVkIHRoZW0gdXR0ZXJseSwgYW5kIHRvb2sgdGhlaXIgY2FtcCwgYWN0dWFsbHkgYnVyc3RpbmcgaW50byBpdCBhbG9uZyB3aXRoIHRob3NlIHdobyBmbGVkIHRvIGl0LCBhbmQgc2xheWluZyBtb3N0IG9mIHRoZW0uIEFmdGVyIHRoaXMsIGxlYXJuaW5nIHRoYXQgdGhlIGNpdHkgb2YgU2F0cmljdW0gaGFkIGJlZW4gdGFrZW4gYnkgdGhlIFR1c2NhbnMsIGFuZCBpdHMgaW5oYWJpdGFudHMsIGFsbCBSb21hbnMsIHB1dCB0byB0aGUgc3dvcmQsIGhlIHNlbnQgYmFjayB0byBSb21lIHRoZSBtYWluIGJvZHkgb2YgaGlzIGFybXksIGNvbXByaXNpbmcgdGhlIG1lbi1hdC1hcm1zLCB3aGlsZSBoZSBoaW1zZWxmLCB3aXRoIHRoZSB5b3VuZ2VzdCBhbmQgbW9zdCBhcmRlbnQgb2YgaGlzIG1lbiwgZmVsbCBzdWRkZW5seSB1cG9uIHRoZSBUdXNjYW5zIHdobyBoZWxkIHRoZSBjaXR5IGFuZCBtYXN0ZXJlZCB0aGVtLCBleHBlbGxpbmcgc29tZSBhbmQgc2xheWluZyB0aGUgcmVzdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgcmV0dXJuZWQgd2l0aCBtdWNoIHNwb2lsIHRvIFJvbWUsIGhhdmluZyBwcm92ZWQgdGhhdCB0aG9zZSBjaXRpemVucyB3ZXJlIHRoZSBtb3N0IHNlbnNpYmxlIG9mIGFsbCB3aG8gZGlkIG5vdCBmZWFyIHRoZSBib2RpbHkgYWdlIGFuZCB3ZWFrbmVzcyBvZiBhIGxlYWRlciBwb3NzZXNzZWQgb2YgZXhwZXJpZW5jZSBhbmQgY291cmFnZSwgYnV0IGNob3NlIGhpbSBvdXQsIHRob3VnaCBoZSB3YXMgaWxsIGFuZCBkaWQgbm90IHdpc2ggaXQsIHJhdGhlciB0aGFuIHlvdW5nZXIgbWVuIHdobyBjcmF2ZWQgYW5kIHNvbGljaXRlZCB0aGUgY29tbWFuZC4gVGhleSBzaG93ZWQgdGhlIHNhbWUgZ29vZCBzZW5zZSwgd2hlbiB0aGUgVHVzY3VsYW5zIHdlcmUgcmVwb3J0ZWQgdG8gYmUgb24gdGhlIGJyaW5rIG9mIGEgcmV2b2x0LCBpbiBvcmRlcmluZyBDYW1pbGx1cyB0byBzZWxlY3Qgb25lIG9mIGhpcyBmaXZlIGNvbGxlYWd1ZXMgYXMgYW4gYWlkLCBhbmQgbWFyY2ggb3V0IGFnYWluc3QgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWx0aG91Z2ggYWxsIHRoZSBmaXZlIHdpc2hlZCBhbmQgYmVnZ2VkIHRvIGJlIHRha2VuLCBDYW1pbGx1cyBwYXNzZWQgdGhlIHJlc3QgYnkgYW5kIHNlbGVjdGVkIEx1Y2l1cyBGdXJpdXMsIHRvIGV2ZXJ5b25lJ3Mgc3VycHJpc2UuIEZvciBoZSB3YXMgdGhlIG1hbiB3aG8gaGFkIGp1c3Qgbm93IGJlZW4gZWFnZXIgdG8gaGF6YXJkIGEgc3RydWdnbGUgd2l0aCB0aGUgZW5lbXkgYWdhaW5zdCB0aGUganVkZ21lbnQgb2YgQ2FtaWxsdXMsIGFuZCBoYWQgYmVlbiB3b3JzdGVkIGluIHRoZSBiYXR0bGUuIEJ1dCBDYW1pbGx1cyB3aXNoZWQsIGFzIGl0IHdvdWxkIHNlZW0sIHRvIGhpZGUgYXdheSB0aGUgbWlzZm9ydHVuZSBhbmQgd2lwZSBhd2F5IHRoZSBkaXNncmFjZSBvZiB0aGUgbWFuLCBhbmQgc28gcHJlZmVycmVkIGhpbSBhYm92ZSBhbGwgdGhlIHJlc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgVHVzY3VsYW5zLCB3aGVuIG9uY2UgQ2FtaWxsdXMgd2FzIG9uIHRoZSBtYXJjaCBhZ2FpbnN0IHRoZW0sIHNldCB0byByZWN0aWZ5aW5nIHRoZWlyIHRyYW5zZ3Jlc3Npb24gYXMgY3JhZnRpbHkgYXMgdGhleSBjb3VsZC4gVGhlaXIgZmllbGRzIHdlcmUgZm91bmQgZnVsbCBvZiBtZW4gdGlsbGluZyB0aGUgc29pbCBhbmQgcGFzdHVyaW5nIGZsb2NrcywgYXMgaW4gdGltZXMgb2YgcGVhY2U7IHRoZWlyIGdhdGVzIGxheSB3aWRlIG9wZW47IHRoZWlyIGJveXMgd2VyZSBhdCBzY2hvb2wgY29ubmluZyB0aGVpciBsZXNzb25zOyBhbmQgb2YgdGhlIHBlb3BsZSwgdGhlIGFydGl6YW5zIHdlcmUgdG8gYmUgc2VlbiBpbiB0aGVpciB3b3Jrc2hvcHMgcGx5aW5nIHRoZWlyIHRyYWRlcywgdGhlIG1lbiBvZiBsZWlzdXJlIHNhdW50ZXJlZCBvdmVyIHRoZSBmb3J1bSBjbGFkIGluIHRoZWlyIHVzdWFsIGdhcmIsIHdoaWxlIHRoZSBtYWdpc3RyYXRlcyBidXN0bGVkIGFib3V0IGFzc2lnbmluZyBxdWFydGVycyBmb3IgdGhlIFJvbWFucywgYXMgdGhvdWdoIHRoZXkgZXhwZWN0ZWQgYW5kIHdlcmUgY29uc2Npb3VzIG9mIG5vIGV2aWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIHBlcmZvcm1hbmNlcyBkaWQgbm90IGJyaW5nIENhbWlsbHVzIGludG8gYW55IGRvdWJ0IG9mIHRoZWlyIGludGVuZGVkIHRyZWFjaGVyeSwgYnV0IG91dCBvZiBwaXR5IGZvciB0aGUgcmVwZW50YW5jZSB0aGF0IGZvbGxvd2VkIHNvIGNsb3NlIHVwb24gdGhlaXIgdHJlYWNoZXJ5LCBoZSBvcmRlcmVkIHRoZW0gdG8gZ28gdG8gdGhlIFNlbmF0ZSBhbmQgYmVnIGZvciBhIHJlbWlzc2lvbiBvZiBpdHMgd3JhdGguIEhlIGhpbXNlbGYgYWxzbyBoZWxwZWQgdG8gbWFrZSB0aGVpciBwcmF5ZXJzIGVmZmVjdHVhbCwgc28gdGhhdCB0aGVpciBjaXR5IHdhcyBhYnNvbHZlZCBmcm9tIGFsbCBjaGFyZ2VzIGFuZCByZWNlaXZlZCB0aGUgcmlnaHRzIG9mIFJvbWFuIGNpdGl6ZW5zaGlwLiBTdWNoIHdlcmUgdGhlIG1vc3QgY29uc3BpY3VvdXMgYWNoaWV2ZW1lbnRzIG9mIGhpcyBzaXh0aCB0cmlidW5lc2hpcC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgcmV0dXJuZWQgd2l0aCBtdWNoIHNwb2lsIHRvIFJvbWUsIGhhdmluZyBwcm92ZWQgdGhhdCB0aG9zZSBjaXRpemVucyB3ZXJlIHRoZSBtb3N0IHNlbnNpYmxlIG9mIGFsbCB3aG8gZGlkIG5vdCBmZWFyIHRoZSBib2RpbHkgYWdlIGFuZCB3ZWFrbmVzcyBvZiBhIGxlYWRlciBwb3NzZXNzZWQgb2YgZXhwZXJpZW5jZSBhbmQgY291cmFnZSwgYnV0IGNob3NlIGhpbSBvdXQsIHRob3VnaCBoZSB3YXMgaWxsIGFuZCBkaWQgbm90IHdpc2ggaXQsIHJhdGhlciB0aGFuIHlvdW5nZXIgbWVuIHdobyBjcmF2ZWQgYW5kIHNvbGljaXRlZCB0aGUgY29tbWFuZC4gVGhleSBzaG93ZWQgdGhlIHNhbWUgZ29vZCBzZW5zZSwgd2hlbiB0aGUgVHVzY3VsYW5zIHdlcmUgcmVwb3J0ZWQgdG8gYmUgb24gdGhlIGJyaW5rIG9mIGEgcmV2b2x0LCBpbiBvcmRlcmluZyBDYW1pbGx1cyB0byBzZWxlY3Qgb25lIG9mIGhpcyBmaXZlIGNvbGxlYWd1ZXMgYXMgYW4gYWlkLCBhbmQgbWFyY2ggb3V0IGFnYWluc3QgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsdGhvdWdoIGFsbCB0aGUgZml2ZSB3aXNoZWQgYW5kIGJlZ2dlZCB0byBiZSB0YWtlbiwgQ2FtaWxsdXMgcGFzc2VkIHRoZSByZXN0IGJ5IGFuZCBzZWxlY3RlZCBMdWNpdXMgRnVyaXVzLCB0byBldmVyeW9uZSdzIHN1cnByaXNlLiBGb3IgaGUgd2FzIHRoZSBtYW4gd2hvIGhhZCBqdXN0IG5vdyBiZWVuIGVhZ2VyIHRvIGhhemFyZCBhIHN0cnVnZ2xlIHdpdGggdGhlIGVuZW15IGFnYWluc3QgdGhlIGp1ZGdtZW50IG9mIENhbWlsbHVzLCBhbmQgaGFkIGJlZW4gd29yc3RlZCBpbiB0aGUgYmF0dGxlLiBCdXQgQ2FtaWxsdXMgd2lzaGVkLCBhcyBpdCB3b3VsZCBzZWVtLCB0byBoaWRlIGF3YXkgdGhlIG1pc2ZvcnR1bmUgYW5kIHdpcGUgYXdheSB0aGUgZGlzZ3JhY2Ugb2YgdGhlIG1hbiwgYW5kIHNvIHByZWZlcnJlZCBoaW0gYWJvdmUgYWxsIHRoZSByZXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgVHVzY3VsYW5zLCB3aGVuIG9uY2UgQ2FtaWxsdXMgd2FzIG9uIHRoZSBtYXJjaCBhZ2FpbnN0IHRoZW0sIHNldCB0byByZWN0aWZ5aW5nIHRoZWlyIHRyYW5zZ3Jlc3Npb24gYXMgY3JhZnRpbHkgYXMgdGhleSBjb3VsZC4gVGhlaXIgZmllbGRzIHdlcmUgZm91bmQgZnVsbCBvZiBtZW4gdGlsbGluZyB0aGUgc29pbCBhbmQgcGFzdHVyaW5nIGZsb2NrcywgYXMgaW4gdGltZXMgb2YgcGVhY2U7IHRoZWlyIGdhdGVzIGxheSB3aWRlIG9wZW47IHRoZWlyIGJveXMgd2VyZSBhdCBzY2hvb2wgY29ubmluZyB0aGVpciBsZXNzb25zOyBhbmQgb2YgdGhlIHBlb3BsZSwgdGhlIGFydGl6YW5zIHdlcmUgdG8gYmUgc2VlbiBpbiB0aGVpciB3b3Jrc2hvcHMgcGx5aW5nIHRoZWlyIHRyYWRlcywgdGhlIG1lbiBvZiBsZWlzdXJlIHNhdW50ZXJlZCBvdmVyIHRoZSBmb3J1bSBjbGFkIGluIHRoZWlyIHVzdWFsIGdhcmIsIHdoaWxlIHRoZSBtYWdpc3RyYXRlcyBidXN0bGVkIGFib3V0IGFzc2lnbmluZyBxdWFydGVycyBmb3IgdGhlIFJvbWFucywgYXMgdGhvdWdoIHRoZXkgZXhwZWN0ZWQgYW5kIHdlcmUgY29uc2Npb3VzIG9mIG5vIGV2aWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIHBlcmZvcm1hbmNlcyBkaWQgbm90IGJyaW5nIENhbWlsbHVzIGludG8gYW55IGRvdWJ0IG9mIHRoZWlyIGludGVuZGVkIHRyZWFjaGVyeSwgYnV0IG91dCBvZiBwaXR5IGZvciB0aGUgcmVwZW50YW5jZSB0aGF0IGZvbGxvd2VkIHNvIGNsb3NlIHVwb24gdGhlaXIgdHJlYWNoZXJ5LCBoZSBvcmRlcmVkIHRoZW0gdG8gZ28gdG8gdGhlIFNlbmF0ZSBhbmQgYmVnIGZvciBhIHJlbWlzc2lvbiBvZiBpdHMgd3JhdGguIEhlIGhpbXNlbGYgYWxzbyBoZWxwZWQgdG8gbWFrZSB0aGVpciBwcmF5ZXJzIGVmZmVjdHVhbCwgc28gdGhhdCB0aGVpciBjaXR5IHdhcyBhYnNvbHZlZCBmcm9tIGFsbCBjaGFyZ2VzIGFuZCByZWNlaXZlZCB0aGUgcmlnaHRzIG9mIFJvbWFuIGNpdGl6ZW5zaGlwLiBTdWNoIHdlcmUgdGhlIG1vc3QgY29uc3BpY3VvdXMgYWNoaWV2ZW1lbnRzIG9mIGhpcyBzaXh0aCB0cmlidW5lc2hpcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgTGljaW5pdXMgU3RvbG8gc3RpcnJlZCB1cCB0aGUgZ3JlYXQgZGlzc2Vuc2lvbiBpbiB0aGUgY2l0eSB3aGljaCBicm91Z2h0IHRoZSBwZW9wbGUgaW50byBjb2xsaXNpb24gd2l0aCB0aGUgU2VuYXRlLiBUaGUgcGVvcGxlIGluc2lzdGVkIHRoYXQsIHdoZW4gdHdvIGNvbnN1bHMgd2VyZSBhcHBvaW50ZWQsIG9uZSBvZiB0aGVtIG11c3QgY2VydGFpbmx5IGJlIGEgcGxlYmVpYW4sIGFuZCBub3QgYm90aCBwYXRyaWNpYW5zLiBUcmlidW5lcyBvZiB0aGUgcGVvcGxlIHdlcmUgY2hvc2VuLCBidXQgdGhlIG11bHRpdHVkZSBwcmV2ZW50ZWQgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucyBmcm9tIGJlaW5nIGR1bHkgaGVsZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T3dpbmcgdG8gdGhpcyBsYWNrIG9mIG1hZ2lzdHJhdGVzLCBtYXR0ZXJzIHdlcmUgZ2V0dGluZyBtb3JlIGFuZCBtb3JlIGNvbmZ1c2VkLCBhbmQgc28gQ2FtaWxsdXMgd2FzIGZvciB0aGUgZm91cnRoIHRpbWUgYXBwb2ludGVkIGRpY3RhdG9yIGJ5IHRoZSBTZW5hdGUsIHRob3VnaCBtdWNoIGFnYWluc3QgdGhlIHdpc2hlcyBvZiB0aGUgcGVvcGxlLiBIZSB3YXMgbm90IGVhZ2VyIGZvciB0aGUgb2ZmaWNlIGhpbXNlbGYsIG5vciBkaWQgaGUgd2lzaCB0byBvcHBvc2UgbWVuIHdob3NlIG1hbnkgYW5kIGdyZWF0IHN0cnVnZ2xlcyBnYXZlIHRoZW0gdGhlIHJpZ2h0IHRvIHNheSBib2xkbHkgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdXIgYWNoaWV2ZW1lbnRzIGhhdmUgYmVlbiBpbiB0aGUgZmllbGQgd2l0aCB1cywgcmF0aGVyIHRoYW4gaW4gcG9saXRpY3Mgd2l0aCB0aGUgcGF0cmljaWFuczsgaXQgaXMgdGhyb3VnaCBoYXRlIGFuZCBlbnZ5IHRoYXQgdGhleSBoYXZlIG5vdyBtYWRlIHlvdSBkaWN0YXRvcjsgdGhleSBob3BlIHRoYXQgeW91IHdpbGwgY3J1c2ggdGhlIHBlb3BsZSBpZiB5b3UgcHJldmFpbCwgb3IgYmUgY3J1c2hlZCB5b3Vyc2VsZiBpZiB5b3UgZmFpbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgdHJpZWQgdG8gd2FyZCBvZmYgdGhlIHRocmVhdGVuaW5nIGV2aWxzLiBIYXZpbmcgbGVhcm5lZCB0aGUgZGF5IG9uIHdoaWNoIHRoZSB0cmlidW5lcyBpbnRlbmRlZCB0byBwcm9wb3NlIHRoZWlyIGxhdywgaGUgaXNzdWVkIHByb2NsYW1hdGlvbiBtYWtpbmcgaXQgYSBkYXkgb2YgZ2VuZXJhbCBtdXN0ZXIsIGFuZCBzdW1tb25lZCB0aGUgcGVvcGxlIGZyb20gdGhlIGZvcnVtIGludG8gdGhlIENhbXB1cyBNYXJ0aXVzLCB3aXRoIHRocmVhdHMgb2YgaGVhdnkgZmluZXMgdXBvbiB0aGUgZGlzb2JlZGllbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0cmlidW5lcywgb24gdGhlIGNvbnRyYXJ5LCBmb3IgdGhlaXIgcGFydCwgb3Bwb3NlZCBoaXMgdGhyZWF0cyB3aXRoIHNvbGVtbiBvYXRocyB0aGF0IHRoZXkgd291bGQgZmluZSBoaW0gZmlmdHkgdGhvdXNhbmQgc2lsdmVyIGRyYWNobWFzIGlmIGhlIGRpZCBub3QgY2Vhc2UgdHJ5aW5nIHRvIHJvYiB0aGUgcGVvcGxlIG9mIGl0cyB2b3RlIGFuZCBpdHMgbGF3LiBUaGVuLCBlaXRoZXIgYmVjYXVzZSBoZSBmZWFyZWQgYSBzZWNvbmQgY29uZGVtbmF0aW9uIHRvIGV4aWxlLCBhIHBlbmFsdHkgdW5iZWNvbWluZyB0byBhIG1hbiBvZiBoaXMgeWVhcnMgYW5kIGFjaGlldmVtZW50cywgb3IgYmVjYXVzZSBoZSB3YXMgbm90IGFibGUsIGlmIGhlIHdpc2hlZCwgdG8gb3ZlcmNvbWUgdGhlIG1pZ2h0IG9mIHRoZSBwZW9wbGUgd2hpY2ggd2FzIG5vdyBiZWNvbWUgcmVzaXN0bGVzcyBhbmQgaW52aW5jaWJsZSwgaGUgd2l0aGRyZXcgdG8gaGlzIGhvdXNlLCBhbmQgYWZ0ZXIgYWxsZWdpbmcgc2lja25lc3MgZm9yIHNldmVyYWwgZGF5cywgcmVzaWduZWQgaGlzIG9mZmljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgTGljaW5pdXMgU3RvbG8gc3RpcnJlZCB1cCB0aGUgZ3JlYXQgZGlzc2Vuc2lvbiBpbiB0aGUgY2l0eSB3aGljaCBicm91Z2h0IHRoZSBwZW9wbGUgaW50byBjb2xsaXNpb24gd2l0aCB0aGUgU2VuYXRlLiBUaGUgcGVvcGxlIGluc2lzdGVkIHRoYXQsIHdoZW4gdHdvIGNvbnN1bHMgd2VyZSBhcHBvaW50ZWQsIG9uZSBvZiB0aGVtIG11c3QgY2VydGFpbmx5IGJlIGEgcGxlYmVpYW4sIGFuZCBub3QgYm90aCBwYXRyaWNpYW5zLiBUcmlidW5lcyBvZiB0aGUgcGVvcGxlIHdlcmUgY2hvc2VuLCBidXQgdGhlIG11bHRpdHVkZSBwcmV2ZW50ZWQgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucyBmcm9tIGJlaW5nIGR1bHkgaGVsZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk93aW5nIHRvIHRoaXMgbGFjayBvZiBtYWdpc3RyYXRlcywgbWF0dGVycyB3ZXJlIGdldHRpbmcgbW9yZSBhbmQgbW9yZSBjb25mdXNlZCwgYW5kIHNvIENhbWlsbHVzIHdhcyBmb3IgdGhlIGZvdXJ0aCB0aW1lIGFwcG9pbnRlZCBkaWN0YXRvciBieSB0aGUgU2VuYXRlLCB0aG91Z2ggbXVjaCBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgdGhlIHBlb3BsZS4gSGUgd2FzIG5vdCBlYWdlciBmb3IgdGhlIG9mZmljZSBoaW1zZWxmLCBub3IgZGlkIGhlIHdpc2ggdG8gb3Bwb3NlIG1lbiB3aG9zZSBtYW55IGFuZCBncmVhdCBzdHJ1Z2dsZXMgZ2F2ZSB0aGVtIHRoZSByaWdodCB0byBzYXkgYm9sZGx5IHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdXIgYWNoaWV2ZW1lbnRzIGhhdmUgYmVlbiBpbiB0aGUgZmllbGQgd2l0aCB1cywgcmF0aGVyIHRoYW4gaW4gcG9saXRpY3Mgd2l0aCB0aGUgcGF0cmljaWFuczsgaXQgaXMgdGhyb3VnaCBoYXRlIGFuZCBlbnZ5IHRoYXQgdGhleSBoYXZlIG5vdyBtYWRlIHlvdSBkaWN0YXRvcjsgdGhleSBob3BlIHRoYXQgeW91IHdpbGwgY3J1c2ggdGhlIHBlb3BsZSBpZiB5b3UgcHJldmFpbCwgb3IgYmUgY3J1c2hlZCB5b3Vyc2VsZiBpZiB5b3UgZmFpbC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHRyaWVkIHRvIHdhcmQgb2ZmIHRoZSB0aHJlYXRlbmluZyBldmlscy4gSGF2aW5nIGxlYXJuZWQgdGhlIGRheSBvbiB3aGljaCB0aGUgdHJpYnVuZXMgaW50ZW5kZWQgdG8gcHJvcG9zZSB0aGVpciBsYXcsIGhlIGlzc3VlZCBwcm9jbGFtYXRpb24gbWFraW5nIGl0IGEgZGF5IG9mIGdlbmVyYWwgbXVzdGVyLCBhbmQgc3VtbW9uZWQgdGhlIHBlb3BsZSBmcm9tIHRoZSBmb3J1bSBpbnRvIHRoZSBDYW1wdXMgTWFydGl1cywgd2l0aCB0aHJlYXRzIG9mIGhlYXZ5IGZpbmVzIHVwb24gdGhlIGRpc29iZWRpZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0cmlidW5lcywgb24gdGhlIGNvbnRyYXJ5LCBmb3IgdGhlaXIgcGFydCwgb3Bwb3NlZCBoaXMgdGhyZWF0cyB3aXRoIHNvbGVtbiBvYXRocyB0aGF0IHRoZXkgd291bGQgZmluZSBoaW0gZmlmdHkgdGhvdXNhbmQgc2lsdmVyIGRyYWNobWFzIGlmIGhlIGRpZCBub3QgY2Vhc2UgdHJ5aW5nIHRvIHJvYiB0aGUgcGVvcGxlIG9mIGl0cyB2b3RlIGFuZCBpdHMgbGF3LiBUaGVuLCBlaXRoZXIgYmVjYXVzZSBoZSBmZWFyZWQgYSBzZWNvbmQgY29uZGVtbmF0aW9uIHRvIGV4aWxlLCBhIHBlbmFsdHkgdW5iZWNvbWluZyB0byBhIG1hbiBvZiBoaXMgeWVhcnMgYW5kIGFjaGlldmVtZW50cywgb3IgYmVjYXVzZSBoZSB3YXMgbm90IGFibGUsIGlmIGhlIHdpc2hlZCwgdG8gb3ZlcmNvbWUgdGhlIG1pZ2h0IG9mIHRoZSBwZW9wbGUgd2hpY2ggd2FzIG5vdyBiZWNvbWUgcmVzaXN0bGVzcyBhbmQgaW52aW5jaWJsZSwgaGUgd2l0aGRyZXcgdG8gaGlzIGhvdXNlLCBhbmQgYWZ0ZXIgYWxsZWdpbmcgc2lja25lc3MgZm9yIHNldmVyYWwgZGF5cywgcmVzaWduZWQgaGlzIG9mZmljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBTZW5hdGUgYXBwb2ludGVkIGFub3RoZXIgZGljdGF0b3IsIGFuZCBoZSwgYWZ0ZXIgbWFraW5nIFN0b2xvIGhpbXNlbGYsIHRoZSB2ZXJ5IGxlYWRlciBvZiB0aGUgc2VkaXRpb24sIGhpcyBtYXN0ZXIgb2YgaG9yc2UsIHN1ZmZlcmVkIHRoZSBsYXcgdG8gYmUgZW5hY3RlZC4gSXQgd2FzIGEgbW9zdCB2ZXhhdGlvdXMgbGF3IGZvciB0aGUgcGF0cmljaWFuLCBmb3IgaXQgcHJvaGliaXRlZCBhbnlvbmUgZnJvbSBvd25pbmcgbW9yZSB0aGFuIGZpdmUgaHVuZHJlZCBhY3JlcyBvZiBsYW5kLiBBdCB0aGF0IHRpbWUsIHRoZW4sIFN0b2xvIHdhcyBhIHJlc3BsZW5kZW50IGZpZ3VyZSwgb3dpbmcgdG8gaGlzIHZpY3RvcnkgYXQgdGhlIHBvbGxzOyBidXQgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIsIGhlIGhpbXNlbGYgd2FzIGZvdW5kIHRvIGJlIHBvc3Nlc3NlZCBvZiB3aGF0IGhlIGZvcmJhZGUgb3RoZXJzIHRvIG93biwgYW5kIHNvIHBhaWQgdGhlIHBlbmFsdHkgZml4ZWQgYnkgaGlzIG93biBsYXcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgU2VuYXRlIGFwcG9pbnRlZCBhbm90aGVyIGRpY3RhdG9yLCBhbmQgaGUsIGFmdGVyIG1ha2luZyBTdG9sbyBoaW1zZWxmLCB0aGUgdmVyeSBsZWFkZXIgb2YgdGhlIHNlZGl0aW9uLCBoaXMgbWFzdGVyIG9mIGhvcnNlLCBzdWZmZXJlZCB0aGUgbGF3IHRvIGJlIGVuYWN0ZWQuIEl0IHdhcyBhIG1vc3QgdmV4YXRpb3VzIGxhdyBmb3IgdGhlIHBhdHJpY2lhbiwgZm9yIGl0IHByb2hpYml0ZWQgYW55b25lIGZyb20gb3duaW5nIG1vcmUgdGhhbiBmaXZlIGh1bmRyZWQgYWNyZXMgb2YgbGFuZC4gQXQgdGhhdCB0aW1lLCB0aGVuLCBTdG9sbyB3YXMgYSByZXNwbGVuZGVudCBmaWd1cmUsIG93aW5nIHRvIGhpcyB2aWN0b3J5IGF0IHRoZSBwb2xsczsgYnV0IGEgbGl0dGxlIHdoaWxlIGFmdGVyLCBoZSBoaW1zZWxmIHdhcyBmb3VuZCB0byBiZSBwb3NzZXNzZWQgb2Ygd2hhdCBoZSBmb3JiYWRlIG90aGVycyB0byBvd24sIGFuZCBzbyBwYWlkIHRoZSBwZW5hbHR5IGZpeGVkIGJ5IGhpcyBvd24gbGF3LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSByZW1haW5lZCwgaG93ZXZlciwgdGhlIHN0cmlmZSBvdmVyIHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIHdoaWNoIHdhcyB0aGUgbWFpbiBwcm9ibGVtIGluIHRoZSBkaXNzZW5zaW9ucywgYXMgaXQgd2FzIGl0cyBmaXJzdCBjYXVzZSwgYW5kIGdhdmUgdGhlIFNlbmF0ZSBtb3N0IGNvbmNlcm4gaW4gaXRzIGNvbnRlbnRpb24gd2l0aCB0aGUnIHBlb3BsZS4gQnV0IHN1ZGRlbmx5IGNsZWFyIHRpZGluZ3MgY2FtZSB0aGF0IHRoZSBHYXVscyBoYWQgb25jZSBtb3JlIHNldCBvdXQgZnJvbSB0aGUgQWRyaWF0aWMgU2VhLCBtYW55IG15cmlhZHMgc3Ryb25nLCBhbmQgd2VyZSBtYXJjaGluZyBvbiBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoZSB3b3JkLCB0aGUgYWN0dWFsIGRlZWRzIG9mIHdhciBrZXB0IHBhY2UuIFRoZSBjb3VudHJ5IHdhcyByYXZhZ2VkLCBhbmQgaXRzIHBvcHVsYXRpb24sIGFsbCB3aG8gY291bGQgbm90IG1vcmUgZWFzaWx5IGZseSB0byBSb21lIGZvciByZWZ1Z2UsIHNjYXR0ZXJlZCBhbW9uZyB0aGUgbW91bnRhaW5zLiBUaGlzIHRlcnJvciBwdXQgYW4gZW5kIHRvIHRoZSBkaXNzZW5zaW9uIGluIHRoZSBjaXR5LCBhbmQgYnJvdWdodCB0b2dldGhlciBpbnRvIGNvbmZlcmVuY2UgYm90aCB0aGUgcmljaCBhbmQgdGhlIHBvb3IsIHRoZSBTZW5hdGUgYW5kIHRoZSBwZW9wbGUuIEFsbCB3aXRoIG9uZSBtaW5kIGNob3NlIENhbWlsbHVzIGRpY3RhdG9yIGZvciB0aGUgZmlmdGggdGltZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIG5vdyBxdWl0ZSBvbGQsIGxhY2tpbmcgbGl0dGxlIG9mIGVpZ2h0eSB5ZWFyczsgYnV0IHJlY29nbml6aW5nIHRoZSBwZXJpbCBhbmQgdGhlIG5lY2Vzc2l0eSB3aGljaCBpdCBsYWlkIHVwb24gaGltLCBoZSBuZWl0aGVyIG1hZGUgZXhjdXNlLCBhcyBiZWZvcmUsIG5vciByZXNvcnRlZCB0byBwcmV0ZXh0LCBidXQgaW5zdGFudGx5IHRvb2sgdXBvbiBoaW0gdGhlIGNvbW1hbmQgYW5kIHdlbnQgdG8gbGV2eWluZyBoaXMgc29sZGllcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgcmVtYWluZWQsIGhvd2V2ZXIsIHRoZSBzdHJpZmUgb3ZlciB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLCB3aGljaCB3YXMgdGhlIG1haW4gcHJvYmxlbSBpbiB0aGUgZGlzc2Vuc2lvbnMsIGFzIGl0IHdhcyBpdHMgZmlyc3QgY2F1c2UsIGFuZCBnYXZlIHRoZSBTZW5hdGUgbW9zdCBjb25jZXJuIGluIGl0cyBjb250ZW50aW9uIHdpdGggdGhlJyBwZW9wbGUuIEJ1dCBzdWRkZW5seSBjbGVhciB0aWRpbmdzIGNhbWUgdGhhdCB0aGUgR2F1bHMgaGFkIG9uY2UgbW9yZSBzZXQgb3V0IGZyb20gdGhlIEFkcmlhdGljIFNlYSwgbWFueSBteXJpYWRzIHN0cm9uZywgYW5kIHdlcmUgbWFyY2hpbmcgb24gUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHdvcmQsIHRoZSBhY3R1YWwgZGVlZHMgb2Ygd2FyIGtlcHQgcGFjZS4gVGhlIGNvdW50cnkgd2FzIHJhdmFnZWQsIGFuZCBpdHMgcG9wdWxhdGlvbiwgYWxsIHdobyBjb3VsZCBub3QgbW9yZSBlYXNpbHkgZmx5IHRvIFJvbWUgZm9yIHJlZnVnZSwgc2NhdHRlcmVkIGFtb25nIHRoZSBtb3VudGFpbnMuIFRoaXMgdGVycm9yIHB1dCBhbiBlbmQgdG8gdGhlIGRpc3NlbnNpb24gaW4gdGhlIGNpdHksIGFuZCBicm91Z2h0IHRvZ2V0aGVyIGludG8gY29uZmVyZW5jZSBib3RoIHRoZSByaWNoIGFuZCB0aGUgcG9vciwgdGhlIFNlbmF0ZSBhbmQgdGhlIHBlb3BsZS4gQWxsIHdpdGggb25lIG1pbmQgY2hvc2UgQ2FtaWxsdXMgZGljdGF0b3IgZm9yIHRoZSBmaWZ0aCB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBub3cgcXVpdGUgb2xkLCBsYWNraW5nIGxpdHRsZSBvZiBlaWdodHkgeWVhcnM7IGJ1dCByZWNvZ25pemluZyB0aGUgcGVyaWwgYW5kIHRoZSBuZWNlc3NpdHkgd2hpY2ggaXQgbGFpZCB1cG9uIGhpbSwgaGUgbmVpdGhlciBtYWRlIGV4Y3VzZSwgYXMgYmVmb3JlLCBub3IgcmVzb3J0ZWQgdG8gcHJldGV4dCwgYnV0IGluc3RhbnRseSB0b29rIHVwb24gaGltIHRoZSBjb21tYW5kIGFuZCB3ZW50IHRvIGxldnlpbmcgaGlzIHNvbGRpZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPktub3dpbmcgdGhhdCB0aGUgcHJvd2VzcyBvZiB0aGUgQmFyYmFyaWFucyBsYXkgY2hpZWZseSBpbiB0aGVpciBzd29yZHMsIHdoaWNoIHRoZXkgcGxpZWQgaW4gdHJ1ZSBiYXJiYXJpYyBmYXNoaW9uLCBhbmQgd2l0aCBubyBza2lsbCBhdCBhbGwsIGluIG1lcmUgc2xhc2hpbmcgYmxvd3MgYXQgaGVhZCBhbmQgc2hvdWxkZXJzLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIGhhZCBoZWxtZXRzIGZvcmdlZCBmb3IgbW9zdCBvZiBoaXMgbWVuIHdoaWNoIHdlcmUgYWxsIGlyb24gYW5kIHNtb290aCBvZiBzdXJmYWNlLCB0aGF0IHRoZSBlbmVteSdzIHN3b3JkcyBtaWdodCBzbGlwIG9mZiBmcm9tIHRoZW0gb3IgYmUgc2hhdHRlcmVkIGJ5IHRoZW0uIEhlIGFsc28gaGFkIHRoZSBsb25nIHNoaWVsZHMgb2YgaGlzIG1lbiByaW1tZWQgcm91bmQgd2l0aCBicm9uemUsIHNpbmNlIHRoZWlyIHdvb2QgY291bGQgbm90IG9mIGl0c2VsZiB3YXJkIG9mZiB0aGUgZW5lbXkncyBibG93cy4gVGhlIHNvbGRpZXJzIHRoZW1zZWx2ZXMgaGUgdHJhaW5lZCB0byB1c2UgdGhlaXIgbG9uZyBqYXZlbGlucyBsaWtlIHNwZWFycyzigJR0byB0aHJ1c3QgdGhlbSB1bmRlciB0aGUgZW5lbXkncyBzd29yZHMgYW5kIGNhdGNoIHRoZSBkb3dud2FyZCBzdHJva2VzIHVwb24gdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIGhhZCBoZWxtZXRzIGZvcmdlZCBmb3IgbW9zdCBvZiBoaXMgbWVuIHdoaWNoIHdlcmUgYWxsIGlyb24gYW5kIHNtb290aCBvZiBzdXJmYWNlLCB0aGF0IHRoZSBlbmVteSdzIHN3b3JkcyBtaWdodCBzbGlwIG9mZiBmcm9tIHRoZW0gb3IgYmUgc2hhdHRlcmVkIGJ5IHRoZW0uIEhlIGFsc28gaGFkIHRoZSBsb25nIHNoaWVsZHMgb2YgaGlzIG1lbiByaW1tZWQgcm91bmQgd2l0aCBicm9uemUsIHNpbmNlIHRoZWlyIHdvb2QgY291bGQgbm90IG9mIGl0c2VsZiB3YXJkIG9mZiB0aGUgZW5lbXkncyBibG93cy4gVGhlIHNvbGRpZXJzIHRoZW1zZWx2ZXMgaGUgdHJhaW5lZCB0byB1c2UgdGhlaXIgbG9uZyBqYXZlbGlucyBsaWtlIHNwZWFycyzigJR0byB0aHJ1c3QgdGhlbSB1bmRlciB0aGUgZW5lbXkncyBzd29yZHMgYW5kIGNhdGNoIHRoZSBkb3dud2FyZCBzdHJva2VzIHVwb24gdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgR2F1bHMgd2VyZSBuZWFyIGF0IGhhbmQsIGJlaW5nIGVuY2FtcGVkIG9uIHRoZSBBbmlvIGFuZCBlbmN1bWJlcmVkIHdpdGggdW50b2xkIHBsdW5kZXIsIENhbWlsbHVzIGxlZCBoaXMgZm9yY2VzIG91dCBhbmQgcG9zdGVkIHRoZW0gaW4gYSBnZW50bHkgc2xvcGluZyBnbGFkZSB3aXRoIG1hbnkgaG9sbG93cywgc28gdGhhdCB0aGUgbGFyZ2VzdCBwYXJ0IG9mIHRoZW0gd2VyZSBjb25jZWFsZWQsIGFuZCB0aGUgcGFydCB0aGF0IGNvdWxkIGJlIHNlZW4gaGFkIHRoZSBsb29rIG9mIHNodXR0aW5nIHRoZW1zZWx2ZXMgdXAgaW4gaGlsbHkgcGxhY2VzIG91dCBvZiBmZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG9waW5pb24gb2YgdGhlbSBDYW1pbGx1cyB3aXNoZWQgdG8gc3RyZW5ndGhlbiwgYW5kIHRoZXJlZm9yZSBtYWRlIG5vIGRlZmVuY2Ugb2YgdGhvc2Ugd2hvIHdlcmUgcGx1bmRlcmVkIGV2ZW4gYXQgaGlzIHZlcnkgZmVldCwgYnV0IGZlbmNlZCBpbiBoaXMgdHJlbmNoZXMgYW5kIGxheSBxdWlldCwgdW50aWwgaGUgc2F3IHRoYXQgc29tZSBvZiB0aGUgZW5lbXkgd2VyZSBzY2F0dGVyZWQgYWJyb2FkIGluIGZvcmFnaW5nIHBhcnRpZXMsIHdoaWxlIHRob3NlIGluIHRoZSBjYW1wIGRpZCBub3RoaW5nIGJ1dCBnb3JnZSB0aGVtc2VsdmVzIHdpdGggbWVhdCBhbmQgZHJpbmsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2hpbGUgaXQgd2FzIHlldCBuaWdodCwgaGUgc2VudCBoaXMgbGlnaHQtYXJtZWQgdHJvb3BzIGZvcndhcmQgdG8gaGluZGVyIHRoZSBCYXJiYXJpYW5zIGZyb20gZmFsbGluZyBpbnRvIGJhdHRsZS1hcnJheSBhbmQgdGhyb3cgdGhlbSBpbnRvIGNvbmZ1c2lvbiBhcyB0aGV5IGlzc3VlZCBmcm9tIHRoZWlyIGNhbXAuIEp1c3QgYmVmb3JlIGRhd24sIGhlIGxlZCBoaXMgbWVuLWF0LWFybXMgZG93biBpbnRvIHRoZSBwbGFpbiBhbmQgZHJldyB0aGVtIHVwIGluIGJhdHRsZS1hcnJheSwgbWFueSBpbiBudW1iZXIgYW5kIGZ1bGwgb2Ygc3Bpcml0LCBhcyB0aGUgQmFyYmFyaWFucyBub3cgc2F3LCBub3QgZmV3IGFuZCB0aW1pZCwgYXMgdGhleSBoYWQgZXhwZWN0ZWQuIFRvIGJlZ2luIHdpdGgsIGl0IHdhcyB0aGlzIHdoaWNoIHNoYXR0ZXJlZCB0aGUgY29uZmlkZW5jZSBvZiB0aGUgR2F1bHMsIHdobyB0aG91Z2h0IGl0IGJlbmVhdGggdGhlbSB0byBiZSBhdHRhY2tlZCBmaXJzdC4gVGhlbiBhZ2FpbiwgdGhlIGxpZ2h0LWFybWVkIGZvbGsgZmVsbCB1cG9uIHRoZW0sIGZvcmNlZCB0aGVtIGludG8gYWN0aW9uIGJlZm9yZSB0aGV5IGhhZCB0YWtlbiB0aGVpciB1c3VhbCBvcmRlciBhbmQgYmVlbiBhcnJheWVkIGluIGNvbXBhbmllcywgYW5kIHNvIGNvbXBlbGxlZCB0aGVtIHRvIGZpZ2h0IGF0IHJhbmRvbSBhbmQgaW4gdXR0ZXIgZGlzb3JkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIHdoZW4gQ2FtaWxsdXMgbGVkIGhpcyBtZW4tYXQtYXJtcyB0byB0aGUgYXR0YWNrLCB0aGUgZW5lbXkgcmFpc2VkIHRoZWlyIHN3b3JkcyBvbiBoaWdoIGFuZCBydXNoZWQgZm9yIGNsb3NlIHF1YXJ0ZXJzLiBCdXQgdGhlIFJvbWFucyB0aHJ1c3QgdGhlaXIgamF2ZWxpbnMgaW50byB0aGVpciBmYWNlcywgcmVjZWl2ZWQgdGhlaXIgc3Ryb2tlcyBvbiB0aGUgcGFydHMgdGhhdCB3ZXJlIHNoaWVsZGVkIGJ5IGlyb24sIGFuZCBzbyB0dXJuZWQgdGhlIGVkZ2Ugb2YgdGhlaXIgbWV0YWwsIHdoaWNoIHdhcyBzb2Z0IGFuZCB3ZWFrbHkgdGVtcGVyZWQsIHNvIG11Y2ggc28gdGhhdCB0aGVpciBzd29yZHMgcXVpY2tseSBiZW50IHVwIGRvdWJsZSwgd2hpbGUgdGhlaXIgc2hpZWxkcyB3ZXJlIHBpZXJjZWQgYW5kIHdlaWdoZWQgZG93biBieSB0aGUgamF2ZWxpbnMgd2hpY2ggc3R1Y2sgaW4gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIHRoZXkgYWN0dWFsbHkgYWJhbmRvbmVkIHRoZWlyIG93biB3ZWFwb25zIGFuZCB0cmllZCB0byBwb3NzZXNzIHRoZW1zZWx2ZXMgb2YgdGhvc2Ugb2YgdGhlaXIgZW5lbWllcywgYW5kIHRvIHR1cm4gYXNpZGUgdGhlIGphdmVsaW5zIGJ5IGdyYXNwaW5nIHRoZW0gaW4gdGhlaXIgaGFuZHMuIEJ1dCB0aGUgUm9tYW5zLCBzZWVpbmcgdGhlbSB0aHVzIGRpc2FybWVkLCBhdCBvbmNlIHRvb2sgdG8gdXNpbmcgdGhlaXIgc3dvcmRzLCBhbmQgdGhlcmUgd2FzIGEgZ3JlYXQgc2xhdWdodGVyIG9mIHRoZWlyIGZvcmVtb3N0IHJhbmtzLCB3aGlsZSB0aGUgcmVzdCBmbGVkIGV2ZXJ5IHdoaXRoZXIgb3ZlciB0aGUgcGxhaW47IHRoZSBoaWxsIHRvcHMgYW5kIGhpZ2ggcGxhY2VzIGhhZCBiZWVuIG9jY3VwaWVkIGJlZm9yZWhhbmQgYnkgQ2FtaWxsdXMsIGFuZCB0aGV5IGtuZXcgdGhhdCB0aGVpciBjYW1wIGNvdWxkIGVhc2lseSBiZSB0YWtlbiwgc2luY2UsIGluIHRoZWlyIG92ZXJ3ZWVuaW5nIGNvbmZpZGVuY2UsIHRoZXkgaGFkIG5lZ2xlY3RlZCB0byBmb3J0aWZ5IGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgR2F1bHMgd2VyZSBuZWFyIGF0IGhhbmQsIGJlaW5nIGVuY2FtcGVkIG9uIHRoZSBBbmlvIGFuZCBlbmN1bWJlcmVkIHdpdGggdW50b2xkIHBsdW5kZXIsIENhbWlsbHVzIGxlZCBoaXMgZm9yY2VzIG91dCBhbmQgcG9zdGVkIHRoZW0gaW4gYSBnZW50bHkgc2xvcGluZyBnbGFkZSB3aXRoIG1hbnkgaG9sbG93cywgc28gdGhhdCB0aGUgbGFyZ2VzdCBwYXJ0IG9mIHRoZW0gd2VyZSBjb25jZWFsZWQsIGFuZCB0aGUgcGFydCB0aGF0IGNvdWxkIGJlIHNlZW4gaGFkIHRoZSBsb29rIG9mIHNodXR0aW5nIHRoZW1zZWx2ZXMgdXAgaW4gaGlsbHkgcGxhY2VzIG91dCBvZiBmZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgb3BpbmlvbiBvZiB0aGVtIENhbWlsbHVzIHdpc2hlZCB0byBzdHJlbmd0aGVuLCBhbmQgdGhlcmVmb3JlIG1hZGUgbm8gZGVmZW5jZSBvZiB0aG9zZSB3aG8gd2VyZSBwbHVuZGVyZWQgZXZlbiBhdCBoaXMgdmVyeSBmZWV0LCBidXQgZmVuY2VkIGluIGhpcyB0cmVuY2hlcyBhbmQgbGF5IHF1aWV0LCB1bnRpbCBoZSBzYXcgdGhhdCBzb21lIG9mIHRoZSBlbmVteSB3ZXJlIHNjYXR0ZXJlZCBhYnJvYWQgaW4gZm9yYWdpbmcgcGFydGllcywgd2hpbGUgdGhvc2UgaW4gdGhlIGNhbXAgZGlkIG5vdGhpbmcgYnV0IGdvcmdlIHRoZW1zZWx2ZXMgd2l0aCBtZWF0IGFuZCBkcmluayAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIGl0IHdhcyB5ZXQgbmlnaHQsIGhlIHNlbnQgaGlzIGxpZ2h0LWFybWVkIHRyb29wcyBmb3J3YXJkIHRvIGhpbmRlciB0aGUgQmFyYmFyaWFucyBmcm9tIGZhbGxpbmcgaW50byBiYXR0bGUtYXJyYXkgYW5kIHRocm93IHRoZW0gaW50byBjb25mdXNpb24gYXMgdGhleSBpc3N1ZWQgZnJvbSB0aGVpciBjYW1wLiBKdXN0IGJlZm9yZSBkYXduLCBoZSBsZWQgaGlzIG1lbi1hdC1hcm1zIGRvd24gaW50byB0aGUgcGxhaW4gYW5kIGRyZXcgdGhlbSB1cCBpbiBiYXR0bGUtYXJyYXksIG1hbnkgaW4gbnVtYmVyIGFuZCBmdWxsIG9mIHNwaXJpdCwgYXMgdGhlIEJhcmJhcmlhbnMgbm93IHNhdywgbm90IGZldyBhbmQgdGltaWQsIGFzIHRoZXkgaGFkIGV4cGVjdGVkLiBUbyBiZWdpbiB3aXRoLCBpdCB3YXMgdGhpcyB3aGljaCBzaGF0dGVyZWQgdGhlIGNvbmZpZGVuY2Ugb2YgdGhlIEdhdWxzLCB3aG8gdGhvdWdodCBpdCBiZW5lYXRoIHRoZW0gdG8gYmUgYXR0YWNrZWQgZmlyc3QuIFRoZW4gYWdhaW4sIHRoZSBsaWdodC1hcm1lZCBmb2xrIGZlbGwgdXBvbiB0aGVtLCBmb3JjZWQgdGhlbSBpbnRvIGFjdGlvbiBiZWZvcmUgdGhleSBoYWQgdGFrZW4gdGhlaXIgdXN1YWwgb3JkZXIgYW5kIGJlZW4gYXJyYXllZCBpbiBjb21wYW5pZXMsIGFuZCBzbyBjb21wZWxsZWQgdGhlbSB0byBmaWdodCBhdCByYW5kb20gYW5kIGluIHV0dGVyIGRpc29yZGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIHdoZW4gQ2FtaWxsdXMgbGVkIGhpcyBtZW4tYXQtYXJtcyB0byB0aGUgYXR0YWNrLCB0aGUgZW5lbXkgcmFpc2VkIHRoZWlyIHN3b3JkcyBvbiBoaWdoIGFuZCBydXNoZWQgZm9yIGNsb3NlIHF1YXJ0ZXJzLiBCdXQgdGhlIFJvbWFucyB0aHJ1c3QgdGhlaXIgamF2ZWxpbnMgaW50byB0aGVpciBmYWNlcywgcmVjZWl2ZWQgdGhlaXIgc3Ryb2tlcyBvbiB0aGUgcGFydHMgdGhhdCB3ZXJlIHNoaWVsZGVkIGJ5IGlyb24sIGFuZCBzbyB0dXJuZWQgdGhlIGVkZ2Ugb2YgdGhlaXIgbWV0YWwsIHdoaWNoIHdhcyBzb2Z0IGFuZCB3ZWFrbHkgdGVtcGVyZWQsIHNvIG11Y2ggc28gdGhhdCB0aGVpciBzd29yZHMgcXVpY2tseSBiZW50IHVwIGRvdWJsZSwgd2hpbGUgdGhlaXIgc2hpZWxkcyB3ZXJlIHBpZXJjZWQgYW5kIHdlaWdoZWQgZG93biBieSB0aGUgamF2ZWxpbnMgd2hpY2ggc3R1Y2sgaW4gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGV5IGFjdHVhbGx5IGFiYW5kb25lZCB0aGVpciBvd24gd2VhcG9ucyBhbmQgdHJpZWQgdG8gcG9zc2VzcyB0aGVtc2VsdmVzIG9mIHRob3NlIG9mIHRoZWlyIGVuZW1pZXMsIGFuZCB0byB0dXJuIGFzaWRlIHRoZSBqYXZlbGlucyBieSBncmFzcGluZyB0aGVtIGluIHRoZWlyIGhhbmRzLiBCdXQgdGhlIFJvbWFucywgc2VlaW5nIHRoZW0gdGh1cyBkaXNhcm1lZCwgYXQgb25jZSB0b29rIHRvIHVzaW5nIHRoZWlyIHN3b3JkcywgYW5kIHRoZXJlIHdhcyBhIGdyZWF0IHNsYXVnaHRlciBvZiB0aGVpciBmb3JlbW9zdCByYW5rcywgd2hpbGUgdGhlIHJlc3QgZmxlZCBldmVyeSB3aGl0aGVyIG92ZXIgdGhlIHBsYWluOyB0aGUgaGlsbCB0b3BzIGFuZCBoaWdoIHBsYWNlcyBoYWQgYmVlbiBvY2N1cGllZCBiZWZvcmVoYW5kIGJ5IENhbWlsbHVzLCBhbmQgdGhleSBrbmV3IHRoYXQgdGhlaXIgY2FtcCBjb3VsZCBlYXNpbHkgYmUgdGFrZW4sIHNpbmNlLCBpbiB0aGVpciBvdmVyd2VlbmluZyBjb25maWRlbmNlLCB0aGV5IGhhZCBuZWdsZWN0ZWQgdG8gZm9ydGlmeSBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBiYXR0bGUsIHRoZXkgc2F5LCB3YXMgZm91Z2h0IHRoaXJ0ZWVuIHllYXJzIGFmdGVyIHRoZSBjYXB0dXJlIG9mIFJvbWUsIGFuZCBwcm9kdWNlZCBpbiB0aGUgUm9tYW5zIGEgZmlybSBmZWVsaW5nIG9mIGNvbmZpZGVuY2UgcmVnYXJkaW5nIHRoZSBHYXVscy4gVGhleSBoYWQgbWlnaHRpbHkgZmVhcmVkIHRoZXNlIEJhcmJhcmlhbnMsIHdobyBoYWQgYmVlbiBjb25xdWVyZWQgYnkgdGhlbSBpbiB0aGUgZmlyc3QgaW5zdGFuY2UsIGFzIHRoZXkgZmVsdCwgaW4gY29uc2VxdWVuY2Ugb2Ygc2lja25lc3MgYW5kIGV4dHJhb3JkaW5hcnkgbWlzZm9ydHVuZXMsIHJhdGhlciB0aGFuIG9mIGFueSBwcm93ZXNzIGluIHRoZWlyIGNvbnF1ZXJvcnMuIEF0IGFueSByYXRlLCBzbyBncmVhdCBoYWQgdGhlaXIgdGVycm9yIGJlZW4gdGhhdCB0aGV5IG1hZGUgYSBsYXcgZXhlbXB0aW5nIHByaWVzdHMgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlLCBleGNlcHQgaW4gY2FzZSBvZiBhIEdhbGxpYyB3YXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYmF0dGxlLCB0aGV5IHNheSwgd2FzIGZvdWdodCB0aGlydGVlbiB5ZWFycyBhZnRlciB0aGUgY2FwdHVyZSBvZiBSb21lLCBhbmQgcHJvZHVjZWQgaW4gdGhlIFJvbWFucyBhIGZpcm0gZmVlbGluZyBvZiBjb25maWRlbmNlIHJlZ2FyZGluZyB0aGUgR2F1bHMuIFRoZXkgaGFkIG1pZ2h0aWx5IGZlYXJlZCB0aGVzZSBCYXJiYXJpYW5zLCB3aG8gaGFkIGJlZW4gY29ucXVlcmVkIGJ5IHRoZW0gaW4gdGhlIGZpcnN0IGluc3RhbmNlLCBhcyB0aGV5IGZlbHQsIGluIGNvbnNlcXVlbmNlIG9mIHNpY2tuZXNzIGFuZCBleHRyYW9yZGluYXJ5IG1pc2ZvcnR1bmVzLCByYXRoZXIgdGhhbiBvZiBhbnkgcHJvd2VzcyBpbiB0aGVpciBjb25xdWVyb3JzLiBBdCBhbnkgcmF0ZSwgc28gZ3JlYXQgaGFkIHRoZWlyIHRlcnJvciBiZWVuIHRoYXQgdGhleSBtYWRlIGEgbGF3IGV4ZW1wdGluZyBwcmllc3RzIGZyb20gbWlsaXRhcnkgc2VydmljZSwgZXhjZXB0IGluIGNhc2Ugb2YgYSBHYWxsaWMgd2FyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgbGFzdCBtaWxpdGFyeSBleHBsb2l0IHBlcmZvcm1lZCBieSBDYW1pbGx1cywgZm9yIHRoZSBjYXB0dXJlIG9mIFZlbGl0cmFlIHdhcyBhIGRpcmVjdCBzZXF1ZWwgb2YgdGhpcyBjYW1wYWlnbiwgYW5kIGl0IHlpZWxkZWQgdG8gaGltIHdpdGhvdXQgYSBzdHJ1Z2dsZS4gQnV0IHRoZSBncmVhdGVzdCBvZiBoaXMgY2l2aWwgY29udGVzdHMgeWV0IHJlbWFpbmVkIGFuZCBpdCB3YXMgaGFyZGVyIHRvIHdhZ2UgaXQgbm93IGFnYWluc3QgYSBwZW9wbGUgd2hpY2ggaGFkIGNvbWUgYmFjayBmbHVzaGVkIHdpdGggdmljdG9yeSwgYW5kIGJlbnQgb24gZWxlY3RpbmcgYSBwbGViZWlhbiBjb25zdWwsIGNvbnRyYXJ5IHRvIHRoZSBlc3RhYmxpc2hlZCBsYXcuIEJ1dCB0aGUgU2VuYXRlIG9wcG9zZWQgdGhlaXIgZGVtYW5kcywgYW5kIHdvdWxkIG5vdCBzdWZmZXIgQ2FtaWxsdXMgdG8gbGF5IGFzaWRlIGhpcyBvZmZpY2UsIHRoaW5raW5nIHRoYXQsIHdpdGggdGhlIGFpZCBvZiBoaXMgZ3JlYXQgcG93ZXIgYW5kIGF1dGhvcml0eSwgdGhleSBjb3VsZCBtYWtlIGEgYmV0dGVyIGZpZ2h0IGluIGRlZmVuY2Ugb2YgdGhlaXIgYXJpc3RvY3JhY3kuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmNlIHdoZW4gQ2FtaWxsdXMgd2FzIHNlYXRlZCBpbiBzdGF0ZSBhbmQgZGVzcGF0Y2hpbmcgcHVibGljIGJ1c2luZXNzIGluIHRoZSBmb3J1bSwgYW4gb2ZmaWNlciwgc2VudCBieSB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgb3JkZXJlZCBoaW0gdG8gZm9sbG93LCBhY3R1YWxseSBsYXlpbmcgaGFuZHMgdXBvbiBoaW0gYXMgdGhvdWdoIHRvIGhhbGUgaGltIGF3YXkuIEFsbCBhdCBvbmNlIHN1Y2ggY3JpZXMgYW5kIHR1bXVsdCBhcyBoYWQgbmV2ZXIgYmVlbiBoZWFyZCBiZWZvcmUgZmlsbGVkIHRoZSBmb3J1bSwgdGhlIGZyaWVuZHMgb2YgQ2FtaWxsdXMgdGhydXN0aW5nIHRoZSBwbGViZWlhbiBvZmZpY2VyIGRvd24gZnJvbSB0aGUgdHJpYnVuYWwsIGFuZCB0aGUgbXVsdGl0dWRlIGJlbG93IG9yZGVyaW5nIGhpbSB0byBkcmFnIHRoZSBkaWN0YXRvciBhd2F5LiBDYW1pbGx1cywgcGVycGxleGVkIGF0IHRoZSBpc3N1ZSwgZGlkIG5vdCByZW5vdW5jZSBoaXMgb2ZmaWNlLCBidXQgdGFraW5nIHRoZSBzZW5hdG9ycyB3aXRoIGhpbSwgbWFyY2hlZCBvZmYgdG8gdGhlaXIgcGxhY2Ugb2YgbWVldGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QmVmb3JlIGhlIGVudGVyZWQgdGhpcywgdHVybmluZyB0byB0aGUgQ2FwaXRvbCwgaGUgcHJheWVkIHRoZSBnb2RzIHRvIGJyaW5nIHRoZSBwcmVzZW50IHR1bXVsdHMgdG8gdGhlaXIgaGFwcGllc3QgZW5kLCBzb2xlbW5seSB2b3dpbmcgdG8gYnVpbGQgYSB0ZW1wbGUgdG8gQ29uY29yZCB3aGVuIHRoZSBjb25mdXNpb24gd2FzIG92ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGxhc3QgbWlsaXRhcnkgZXhwbG9pdCBwZXJmb3JtZWQgYnkgQ2FtaWxsdXMsIGZvciB0aGUgY2FwdHVyZSBvZiBWZWxpdHJhZSB3YXMgYSBkaXJlY3Qgc2VxdWVsIG9mIHRoaXMgY2FtcGFpZ24sIGFuZCBpdCB5aWVsZGVkIHRvIGhpbSB3aXRob3V0IGEgc3RydWdnbGUuIEJ1dCB0aGUgZ3JlYXRlc3Qgb2YgaGlzIGNpdmlsIGNvbnRlc3RzIHlldCByZW1haW5lZCBhbmQgaXQgd2FzIGhhcmRlciB0byB3YWdlIGl0IG5vdyBhZ2FpbnN0IGEgcGVvcGxlIHdoaWNoIGhhZCBjb21lIGJhY2sgZmx1c2hlZCB3aXRoIHZpY3RvcnksIGFuZCBiZW50IG9uIGVsZWN0aW5nIGEgcGxlYmVpYW4gY29uc3VsLCBjb250cmFyeSB0byB0aGUgZXN0YWJsaXNoZWQgbGF3LiBCdXQgdGhlIFNlbmF0ZSBvcHBvc2VkIHRoZWlyIGRlbWFuZHMsIGFuZCB3b3VsZCBub3Qgc3VmZmVyIENhbWlsbHVzIHRvIGxheSBhc2lkZSBoaXMgb2ZmaWNlLCB0aGlua2luZyB0aGF0LCB3aXRoIHRoZSBhaWQgb2YgaGlzIGdyZWF0IHBvd2VyIGFuZCBhdXRob3JpdHksIHRoZXkgY291bGQgbWFrZSBhIGJldHRlciBmaWdodCBpbiBkZWZlbmNlIG9mIHRoZWlyIGFyaXN0b2NyYWN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmNlIHdoZW4gQ2FtaWxsdXMgd2FzIHNlYXRlZCBpbiBzdGF0ZSBhbmQgZGVzcGF0Y2hpbmcgcHVibGljIGJ1c2luZXNzIGluIHRoZSBmb3J1bSwgYW4gb2ZmaWNlciwgc2VudCBieSB0aGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSwgb3JkZXJlZCBoaW0gdG8gZm9sbG93LCBhY3R1YWxseSBsYXlpbmcgaGFuZHMgdXBvbiBoaW0gYXMgdGhvdWdoIHRvIGhhbGUgaGltIGF3YXkuIEFsbCBhdCBvbmNlIHN1Y2ggY3JpZXMgYW5kIHR1bXVsdCBhcyBoYWQgbmV2ZXIgYmVlbiBoZWFyZCBiZWZvcmUgZmlsbGVkIHRoZSBmb3J1bSwgdGhlIGZyaWVuZHMgb2YgQ2FtaWxsdXMgdGhydXN0aW5nIHRoZSBwbGViZWlhbiBvZmZpY2VyIGRvd24gZnJvbSB0aGUgdHJpYnVuYWwsIGFuZCB0aGUgbXVsdGl0dWRlIGJlbG93IG9yZGVyaW5nIGhpbSB0byBkcmFnIHRoZSBkaWN0YXRvciBhd2F5LiBDYW1pbGx1cywgcGVycGxleGVkIGF0IHRoZSBpc3N1ZSwgZGlkIG5vdCByZW5vdW5jZSBoaXMgb2ZmaWNlLCBidXQgdGFraW5nIHRoZSBzZW5hdG9ycyB3aXRoIGhpbSwgbWFyY2hlZCBvZmYgdG8gdGhlaXIgcGxhY2Ugb2YgbWVldGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSBoZSBlbnRlcmVkIHRoaXMsIHR1cm5pbmcgdG8gdGhlIENhcGl0b2wsIGhlIHByYXllZCB0aGUgZ29kcyB0byBicmluZyB0aGUgcHJlc2VudCB0dW11bHRzIHRvIHRoZWlyIGhhcHBpZXN0IGVuZCwgc29sZW1ubHkgdm93aW5nIHRvIGJ1aWxkIGEgdGVtcGxlIHRvIENvbmNvcmQgd2hlbiB0aGUgY29uZnVzaW9uIHdhcyBvdmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBTZW5hdGUgdGhlcmUgd2FzIGEgZ3JlYXQgY29uZmxpY3Qgb2Ygb3Bwb3Npbmcgdmlld3MsIGJ1dCBuZXZlcnRoZWxlc3MsIHRoZSBtaWxkZXIgY291cnNlIHByZXZhaWxlZCwgY29uY2Vzc2lvbiB3YXMgbWFkZSB0byB0aGUgcGVvcGxlLCBhbmQgcGVybWlzc2lvbiBnaXZlbiB0aGVtIHRvIGVsZWN0IG9uZSBvZiB0aGUgY29uc3VscyBmcm9tIHRoZWlyIG93biBib2R5LiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGRpY3RhdG9yIGFubm91bmNlZCB0aGlzIHRvLCB0aGUgcGVvcGxlIGFzIHRoZSB3aWxsIGFuZCBwbGVhc3VyZSBvZiB0aGUgU2VuYXRlLCBhdCBvbmNlLCBhcyB3YXMgdG8gYmUgZXhwZWN0ZWQsIHRoZXkgd2VyZSBkZWxpZ2h0ZWQgdG8gYmUgcmVjb25jaWxlZCB3aXRoIHRoZSBTZW5hdGUsIGFuZCBlc2NvcnRlZCBDYW1pbGx1cyB0byBoaXMgaG9tZSB3aXRoIGxvdWQgYXBwbGF1c2UuIE9uIHRoZSBmb2xsb3dpbmcgZGF5IHRoZXkgaGVsZCBhbiBhc3NlbWJseSBhbmQgdm90ZWQgdG8gYnVpbGQgYSB0ZW1wbGUgb2YgQ29uY29yZCwgYXMgQ2FtaWxsdXMgaGFkIHZvd2VkLCBhbmQgdG8gaGF2ZSBpdCBmYWNlIHRoZSBmb3J1bSBhbmQgcGxhY2Ugb2YgYXNzZW1ibHksIHRvIGNvbW1lbW9yYXRlIHdoYXQgaGFkIG5vdyBoYXBwZW5lZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB2b3RlZCBhbHNvIHRvIGFkZCBhIGRheSB0byB0aGUgc28tY2FsbGVkIExhdGluIGZlc3RpdmFsLCBhbmQgdGhlcmVhZnRlciB0byBjZWxlYnJhdGUgZm91ciBkYXlzLCBhbmQgdGhhdCBhbGwgUm9tYW5zIGF0IG9uY2UgcGVyZm9ybSBzYWNyaWZpY2VzIHdpdGggZ2FybGFuZHMgb24gdGhlaXIgaGVhZHMuIEF0IHRoZSBlbGVjdGlvbnMgaGVsZCBieSBDYW1pbGx1cywgTWFyY3VzIEFlbWlsaXVzIHdhcyBjaG9zZW4gY29uc3VsIGZyb20gdGhlIHBhdHJpY2lhbnMsIGFuZCBMdWNpdXMgU2V4dHVzIGZpcnN0IGNvbnN1bCBmcm9tIHRoZSBwbGViZWlhbnMuIFRoaXMgd2FzIHRoZSBsYXN0IHB1YmxpYyBhY3Qgb2YgQ2FtaWxsdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGRpY3RhdG9yIGFubm91bmNlZCB0aGlzIHRvLCB0aGUgcGVvcGxlIGFzIHRoZSB3aWxsIGFuZCBwbGVhc3VyZSBvZiB0aGUgU2VuYXRlLCBhdCBvbmNlLCBhcyB3YXMgdG8gYmUgZXhwZWN0ZWQsIHRoZXkgd2VyZSBkZWxpZ2h0ZWQgdG8gYmUgcmVjb25jaWxlZCB3aXRoIHRoZSBTZW5hdGUsIGFuZCBlc2NvcnRlZCBDYW1pbGx1cyB0byBoaXMgaG9tZSB3aXRoIGxvdWQgYXBwbGF1c2UuIE9uIHRoZSBmb2xsb3dpbmcgZGF5IHRoZXkgaGVsZCBhbiBhc3NlbWJseSBhbmQgdm90ZWQgdG8gYnVpbGQgYSB0ZW1wbGUgb2YgQ29uY29yZCwgYXMgQ2FtaWxsdXMgaGFkIHZvd2VkLCBhbmQgdG8gaGF2ZSBpdCBmYWNlIHRoZSBmb3J1bSBhbmQgcGxhY2Ugb2YgYXNzZW1ibHksIHRvIGNvbW1lbW9yYXRlIHdoYXQgaGFkIG5vdyBoYXBwZW5lZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdm90ZWQgYWxzbyB0byBhZGQgYSBkYXkgdG8gdGhlIHNvLWNhbGxlZCBMYXRpbiBmZXN0aXZhbCwgYW5kIHRoZXJlYWZ0ZXIgdG8gY2VsZWJyYXRlIGZvdXIgZGF5cywgYW5kIHRoYXQgYWxsIFJvbWFucyBhdCBvbmNlIHBlcmZvcm0gc2FjcmlmaWNlcyB3aXRoIGdhcmxhbmRzIG9uIHRoZWlyIGhlYWRzLiBBdCB0aGUgZWxlY3Rpb25zIGhlbGQgYnkgQ2FtaWxsdXMsIE1hcmN1cyBBZW1pbGl1cyB3YXMgY2hvc2VuIGNvbnN1bCBmcm9tIHRoZSBwYXRyaWNpYW5zLCBhbmQgTHVjaXVzIFNleHR1cyBmaXJzdCBjb25zdWwgZnJvbSB0aGUgcGxlYmVpYW5zLiBUaGlzIHdhcyB0aGUgbGFzdCBwdWJsaWMgYWN0IG9mIENhbWlsbHVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgeWVhciBmb2xsb3dpbmcsIGEgcGVzdGlsZW50aWFsIHNpY2tuZXNzIHZpc2l0ZWQgUm9tZSwgY2Fycnlpbmcgb2ZmIGFuIGluY2FsY3VsYWJsZSBudW1iZXIgb2YgdGhlIGNvbW1vbiBwZW9wbGUsIGFuZCBtb3N0IG9mIHRoZSBtYWdpc3RyYXRlcy4gQ2FtaWxsdXMgYWxzbyBkaWVkIGF0IHRoaXMgdGltZSwgYW5kIGhlIHdhcyBmdWxsIHJpcGUgZm9yIGRlYXRoLCBpZiBhbnkgbWFuIGV2ZXIgd2FzLCBjb25zaWRlcmluZyBoaXMgeWVhcnMgYW5kIHRoZSBjb21wbGV0ZW5lc3Mgb2YgaGlzIGxpZmU7IHlldCBoaXMgbG9zcyBncmlldmVkIHRoZSBSb21hbnMgbW9yZSB0aGFuIHRoYXQgb2YgYWxsIHRob3NlIHdobyBwZXJpc2hlZCBvZiB0aGUgcGxhZ3VlIGF0IHRoaXMgdGltZS4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
