var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGVpciBhY2hpZXZlbWVudHMsIHRob3NlIG9mIE1hcmNlbGx1cyBhZ2FpbnN0IHRoZSBHYXVscyB3ZXJlIGdyZWF0IGFuZCBhc3RvbmlzaGluZywgc2luY2UgaGUgcm91dGVkIHN1Y2ggYSBtdWx0aXR1ZGUgb2YgaG9yc2UgYW5kIGZvb3Qgd2l0aCB0aGUgZmV3IGhvcnNlbWVuIGluIGhpcyBmb2xsb3dpbmcgKGFuIGFjdGlvbiBub3QgZWFzaWx5IGZvdW5kIHJlY29yZGVkIG9mIGFueSBvdGhlciBnZW5lcmFsKSwgYW5kIHNsZXcgdGhlIGVuZW1pZXMnIGNoaWVmdGFpbjsgd2hlcmVhcyBpbiB0aGlzIHJlZ2FyZCBQZWxvcGlkYXMgZmFpbGVkLCBmb3IgaGUgc2V0IG91dCB0byBkbyB0aGUgc2FtZSB0aGluZywgYnV0IHN1ZmZlcmVkIHdoYXQgaGUgbWVhbnQgdG8gaW5mbGljdCwgYW5kIHdhcyBzbGFpbiBmaXJzdCBieSB0aGUgdHlyYW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdpdGggdGhlc2UgZXhwbG9pdHMgb2YgTWFyY2VsbHVzIG9uZSBtYXkgY29tcGFyZSB0aGUgYmF0dGxlcyBvZiBMZXVjdHJhIGFuZCBUZWd5cmEsIGdyZWF0ZXN0IGFuZCBtb3N0IGlsbHVzdHJpb3VzIG9mIGFjdGlvbnM7IGFuZCB3ZSBoYXZlIG5vIGV4cGxvaXQgb2YgTWFyY2VsbHVzIGFjY29tcGxpc2hlZCBieSBzdGVhbHRoIGFuZCBhbWJ1c2NhZGUgd2hpY2ggd2UgY2FuIGNvbXBhcmUgd2l0aCB3aGF0IFBlbG9waWRhcyBkaWQgaW4gY29taW5nIGJhY2sgZnJvbSBleGlsZSBhbmQgc2xheWluZyB0aGUgdHlyYW50cyBpbiBUaGViZXMsIG5heSwgdGhhdCBzZWVtcyB0byByYW5rIGZhciBoaWdoZXIgdGhhbiBhbnkgb3RoZXIgYWNoaWV2ZW1lbnQgb2Ygc2VjcmVjeSBhbmQgY3VubmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhhbm5pYmFsIHdhcywgaXQgaXMgdHJ1ZSwgYSBtb3N0IGZvcm1pZGFibGUgZW5lbXkgZm9yIHRoZSBSb21hbnMsIGJ1dCBzbywgYXNzdXJlZGx5LCB3ZXJlIHRoZSBMYWNlZGFlbW9uaWFucyBpbiB0aGUgdGltZSBvZiBQZWxvcGlkYXMgZm9yIHRoZSBUaGViYW5zLCBhbmQgdGhhdCB0aGV5IHdlcmUgZGVmZWF0ZWQgYnkgUGVsb3BpZGFzIGF0IFRlZ3lyYSBhbmQgTGV1Y3RyYSBpcyBhbiBlc3RhYmxpc2hlZCBmYWN0OyB3aGVyZWFzIEhhbm5pYmFsLCBhY2NvcmRpbmcgdG8gUG9seWJpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAxNS4xMSIgdmFsaWQ9InllcyI+eHYuIDExLCA3PC9iaWJsPiwgd2hlcmUgSGFubmliYWwgbWFrZXMgdGhpcyBjbGFpbSwgaW4gYSBzcGVlY2ggdG8gaGlzIG1lbiBqdXN0IGJlZm9yZSB0aGUgYmF0dGxlIG9mIFphbWEgKDIwMiBCLkMuKS48L25vdGU+IHdhcyBub3QgZXZlbiBvbmNlIGRlZmVhdGVkIGJ5IE1hcmNlbGx1cywgYnV0IGNvbnRpbnVlZCB0byBiZSBpbnZpbmNpYmxlIHVudGlsIFNjaXBpbyBjYW1lLiAgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDE1LjExIiB2YWxpZD0ieWVzIj54di4gMTEsIDc8L2JpYmw+LCB3aGVyZSBIYW5uaWJhbCBtYWtlcyB0aGlzIGNsYWltLCBpbiBhIHNwZWVjaCB0byBoaXMgbWVuIGp1c3QgYmVmb3JlIHRoZSBiYXR0bGUgb2YgWmFtYSAoMjAyIEIuQy4pLjwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEkgYmVsaWV2ZSwgd2l0aCBMaXZ5LCBDYWVzYXIsIGFuZCBOZXBvcywgYW5kLCBhbW9uZyBHcmVlayB3cml0ZXJzLCB3aXRoIEtpbmcgSnViYSwgdGhhdCBzdW5kcnkgZGVmZWF0cyBhbmQgcm91dHMgd2VyZSBpbmZsaWN0ZWQgYnkgTWFyY2VsbHVzIHVwb24gdGhlIHRyb29wcyBvZiBIYW5uaWJhbCwgYWx0aG91Z2ggdGhlc2UgaGFkIG5vIGdyZWF0IGluZmx1ZW5jZSB1cG9uIHRoZSB3YXI7IGluZGVlZCwgdGhlIENhcnRoYWdpbmlhbiB3b3VsZCBzZWVtIHRvIGhhdmUgcHJhY3Rpc2VkIHNvbWUgcnVzZSBpbiB0aGVzZSBlbmdhZ2VtZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIHJlYXNvbmFibHkgYW5kIGZpdHRpbmdseSBjYWxsZWQgZm9yIGFkbWlyYXRpb24gd2FzIHRoZSBmYWN0IHRoYXQgdGhlIFJvbWFucywgYWZ0ZXIgdGhlIHJvdXQgb2Ygc28gbWFueSBhcm1pZXMsIHRoZSBzbGF1Z2h0ZXIgb2Ygc28gbWFueSBnZW5lcmFscywgYW5kIHRoZSB1dHRlciBjb25mdXNpb24gb2YgdGhlIHdob2xlIGVtcGlyZSwgc3RpbGwgaGFkIHRoZSBjb3VyYWdlIHRvIGZhY2UgdGhlaXIgZm9lcy4gIEZvciB0aGVyZSB3YXMgb25lIG1hbiB3aG8gZmlsbGVkIGhpcyBhcm15IGFnYWluIHdpdGggYXJkb3VyIGFuZCBhbWJpdGlvbiB0byBjb250ZW5kIHdpdGggdGhlIGVuZW15LCBpbnN0ZWFkIG9mIHRoZSBncmVhdCBmZWFyIGFuZCBjb25zdGVybmF0aW9uIHdoaWNoIGhhZCBsb25nIG9wcHJlc3NlZCB0aGVtLCBpbnNwaXJpbmcgYW5kIGVuY291cmFnaW5nIHRoZW0gbm90IG9ubHkgdG8geWllbGQgdGhlIHZpY3RvcnkgcmVsdWN0YW50bHksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIHRvIGRpc3B1dGUgaXQgd2l0aCBhbGwgZWFnZXJuZXNzLCBhbmQgdGhpcyBtYW4gd2FzIE1hcmNlbGx1cy4gICBGb3Igd2hlbiB0aGVpciBjYWxhbWl0aWVzIGhhZCBhY2N1c3RvbWVkIHRoZW0gdG8gYmUgc2F0aXNmaWVkIHdoZW5ldmVyIHRoZXkgZXNjYXBlZCBIYW5uaWJhbCBieSBmbGlnaHQsIGhlIHRhdWdodCB0aGVtIHRvIGJlIGFzaGFtZWQgdG8gc3Vydml2ZSBkZWZlYXQsIHRvIGJlIGNoYWdyaW5lZCBpZiB0aGV5IGNhbWUgd2l0aGluIGEgbGl0dGxlIG9mIHlpZWxkaW5nLCBhbmQgdG8gYmUgZGlzdHJlc3NlZCBpZiB0aGV5IGRpZCBub3Qgd2luIHRoZSBkYXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UsIHRoZW4sIFBlbG9waWRhcyB3YXMgbmV2ZXIgZGVmZWF0ZWQgaW4gYSBiYXR0bGUgd2hlcmUgaGUgd2FzIGluIGNvbW1hbmQsIGFuZCBNYXJjZWxsdXMgd29uIG1vcmUgdmljdG9yaWVzIHRoYW4gYW55IFJvbWFuIG9mIGhpcyBkYXksIGl0IHdvdWxkIHNlZW0sIHBlcmhhcHMsIHRoYXQgdGhlIG11bHRpdHVkZSBvZiBoaXMgc3VjY2Vzc2VzIG1hZGUgdGhlIGRpZmZpY3VsdHkgb2YgY29ucXVlcmluZyB0aGUgb25lIGVxdWFsIHRvIHRoZSBpbnZpbmNpYmlsaXR5IG9mIHRoZSBvdGhlci4gICBNYXJjZWxsdXMsIGl0IGlzIHRydWUsIHRvb2sgU3lyYWN1c2UsIHdoaWxlIFBlbG9waWRhcyBmYWlsZWQgdG8gdGFrZSBTcGFydGEuIEJ1dCBJIHRoaW5rIHRoYXQgdG8gaGF2ZSByZWFjaGVkIFNwYXJ0YSwgYW5kIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3Qgb2YgbWVuIHRvIGNyb3NzIHRoZSBFdXJvdGFzIGluIHdhciwgd2FzIGEgZ3JlYXRlciBhY2hpZXZlbWVudCB0aGFuIHRoZSBjb25xdWVzdCBvZiBTaWNpbHk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnVubGVzcywgaW5kZWVkLCBpdCBzaG91bGQgYmUgc2FpZCB0aGF0IHRoaXMgZXhwbG9pdCBiZWxvbmdzIHJhdGhlciB0byBFcGFtaW5vbmRhcyB0aGFuIHRvIFBlbG9waWRhcywgYXMgd2VsbCBhcyB0aGUgdmljdG9yeSBhdCBMZXVjdHJhLCB3aGlsZSBNYXJjZWxsdXMgc2hhcmVkIHdpdGggbm8gb25lIHRoZSBnbG9yeSBvZiBoaXMgYWNoaWV2ZW1lbnRzLiAgRm9yIGhlIHRvb2sgU3lyYWN1c2UgYWxsIGFsb25lLCBhbmQgcm91dGVkIHRoZSBHYXVscyB3aXRob3V0IGhpcyBjb2xsZWFndWUsIGFuZCB3aGVuIG5vIG9uZSB3b3VsZCB1bmRlcnRha2UgdGhlIHN0cnVnZ2xlIGFnYWluc3QgSGFubmliYWwsIGJ1dCBhbGwgZGVjbGluZWQgaXQsIGhlIHRvb2sgdGhlIGZpZWxkIGFnYWluc3QgaGltLCBjaGFuZ2VkIHRoZSBhc3BlY3Qgb2YgdGhlIHdhciwgYW5kIHdhcyB0aGUgZmlyc3QgbGVhZGVyIHRvIHNob3cgZGFyaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSwgdGhlbiwgUGVsb3BpZGFzIHdhcyBuZXZlciBkZWZlYXRlZCBpbiBhIGJhdHRsZSB3aGVyZSBoZSB3YXMgaW4gY29tbWFuZCwgYW5kIE1hcmNlbGx1cyB3b24gbW9yZSB2aWN0b3JpZXMgdGhhbiBhbnkgUm9tYW4gb2YgaGlzIGRheSwgaXQgd291bGQgc2VlbSwgcGVyaGFwcywgdGhhdCB0aGUgbXVsdGl0dWRlIG9mIGhpcyBzdWNjZXNzZXMgbWFkZSB0aGUgZGlmZmljdWx0eSBvZiBjb25xdWVyaW5nIHRoZSBvbmUgZXF1YWwgdG8gdGhlIGludmluY2liaWxpdHkgb2YgdGhlIG90aGVyLiAgIE1hcmNlbGx1cywgaXQgaXMgdHJ1ZSwgdG9vayBTeXJhY3VzZSwgd2hpbGUgUGVsb3BpZGFzIGZhaWxlZCB0byB0YWtlIFNwYXJ0YS4gQnV0IEkgdGhpbmsgdGhhdCB0byBoYXZlIHJlYWNoZWQgU3BhcnRhLCBhbmQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBvZiBtZW4gdG8gY3Jvc3MgdGhlIEV1cm90YXMgaW4gd2FyLCB3YXMgYSBncmVhdGVyIGFjaGlldmVtZW50IHRoYW4gdGhlIGNvbnF1ZXN0IG9mIFNpY2lseTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnVubGVzcywgaW5kZWVkLCBpdCBzaG91bGQgYmUgc2FpZCB0aGF0IHRoaXMgZXhwbG9pdCBiZWxvbmdzIHJhdGhlciB0byBFcGFtaW5vbmRhcyB0aGFuIHRvIFBlbG9waWRhcywgYXMgd2VsbCBhcyB0aGUgdmljdG9yeSBhdCBMZXVjdHJhLCB3aGlsZSBNYXJjZWxsdXMgc2hhcmVkIHdpdGggbm8gb25lIHRoZSBnbG9yeSBvZiBoaXMgYWNoaWV2ZW1lbnRzLiAgRm9yIGhlIHRvb2sgU3lyYWN1c2UgYWxsIGFsb25lLCBhbmQgcm91dGVkIHRoZSBHYXVscyB3aXRob3V0IGhpcyBjb2xsZWFndWUsIGFuZCB3aGVuIG5vIG9uZSB3b3VsZCB1bmRlcnRha2UgdGhlIHN0cnVnZ2xlIGFnYWluc3QgSGFubmliYWwsIGJ1dCBhbGwgZGVjbGluZWQgaXQsIGhlIHRvb2sgdGhlIGZpZWxkIGFnYWluc3QgaGltLCBjaGFuZ2VkIHRoZSBhc3BlY3Qgb2YgdGhlIHdhciwgYW5kIHdhcyB0aGUgZmlyc3QgbGVhZGVyIHRvIHNob3cgZGFyaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkkgY2Fubm90LCBpbmRlZWQsIGFwcGxhdWQgdGhlIGRlYXRoIG9mIGVpdGhlciBvZiB0aGVtLCBuYXksIEkgYW0gZGlzdHJlc3NlZCBhbmQgaW5kaWduYW50IGF0IHRoZWlyIHVucmVhc29uYWJsZW5lc3MgaW4gdGhlIGZpbmFsIGRpc2FzdGVyLiAgQW5kIEkgYWRtaXJlIEhhbm5pYmFsIGJlY2F1c2UsIGluIGJhdHRsZXMgc28gbnVtZXJvdXMgdGhhdCBvbmUgd291bGQgd2Vhcnkgb2YgY291bnRpbmcgdGhlbSwgaGUgd2FzIG5vdCBldmVuIHdvdW5kZWQuICAgIEkgYW0gZGVsaWdodGVkLCB0b28sIHdpdGggQ2hyeXNhbnRlcywgaW4gdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3lyb3BhZWRlaWEsPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQ3lyb3AuIDQuMS4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkN5cm9wLjwvdGl0bGU+IGl2LiAxLCAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aG8sIHRob3VnaCBoaXMgYmxhZGUgd2FzIGxpZnRlZCBvbiBoaWdoIGFuZCBoZSB3YXMgYWJvdXQgdG8gc21pdGUgYW4gZW5lbXksIHdoZW4gdGhlIHRydW1wZXQgc291bmRlZCBhIHJldHJlYXQsIGxldCBoaXMgbWFuIGdvLCBhbmQgcmV0aXJlZCB3aXRoIGFsbCBnZW50bGVuZXNzIGFuZCBkZWNvcnVtLiAgICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QZWxvcGlkYXMsIGhvd2V2ZXIsIHdhcyBzb21ld2hhdCBleGN1c2FibGUsIGJlY2F1c2UsIGV4Y2l0ZWQgYXMgaGUgYWx3YXlzIHdhcyBieSBhbiBvcHBvcnR1bml0eSBmb3IgYmF0dGxlLCBoZSB3YXMgbm93IGNhcnJpZWQgYXdheSBieSBhIGdlbmVyb3VzIGFuZ2VyIHRvIHNlZWsgcmV2ZW5nZS4gICBGb3IgdGhlIGJlc3QgdGhpbmcgaXMgdGhhdCBhIGdlbmVyYWwgc2hvdWxkIGJlIHZpY3RvcmlvdXMgYW5kIGtlZXAgaGlzIGxpZmUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IGlmIGhlIG11c3QgZGllLDwvcT4gIGhlIHNob3VsZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbmNsdWRlIGhpcyBsaWZlIHdpdGggdmFsb3VyLDwvcT4gYXMgRXVyaXBpZGVzIHNheXM7IGZvciB0aGVuIGhlIGRvZXMgbm90IHN1ZmZlciBkZWF0aCwgYnV0IHJhdGhlciBhY2hpZXZlcyBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGJlc2lkZXMgaGlzIGFuZ2VyLCBQZWxvcGlkYXMgc2F3IHRoYXQgdGhlIGNvbnN1bW1hdGlvbiBvZiBoaXMgdmljdG9yeSB3b3VsZCBiZSB0aGUgZGVhdGggb2YgdGhlIHR5cmFudCwgYW5kIHRoaXMgbm90IGFsdG9nZXRoZXIgdW5yZWFzb25hYmx5IGludml0ZWQgaGlzIGVmZm9ydDsgZm9yIGl0IHdvdWxkIGhhdmUgYmVlbiBoYXJkIHRvIGZpbmQgYW5vdGhlciBkZWVkIG9mIHByb3dlc3Mgd2l0aCBzbyBmYWlyIGFuZCBnbG9yaW91cyBhIHByb21pc2UuICBCdXQgTWFyY2VsbHVzLCB3aGVuIG5vIGdyZWF0IG5lZWQgd2FzIHByZXNzaW5nLCBhbmQgd2hlbiBoZSBmZWx0IG5vbmUgb2YgdGhhdCBhcmRvdXIgd2hpY2ggaW4gdGltZXMgb2YgcGVyaWwgdW5zZWF0cyB0aGUganVkZ21lbnQsIHBsdW5nZWQgaGVlZGxlc3NseSBpbnRvIGRhbmdlciwgYW5kIGRpZWQgdGhlIGRlYXRoLCBub3Qgb2YgYSBnZW5lcmFsLCBidXQgb2YgYSBtZXJlIHNraXJtaXNoZXIgb3Igc2NvdXQsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhhdmluZyBjYXN0IGhpcyBmaXZlIGNvbnN1bGF0ZXMsIGhpcyB0aHJlZSB0cml1bXBocywgYW5kIHRoZSBzcG9pbHMgYW5kIHRyb3BoaWVzIHdoaWNoIGhlIGhhZCB0YWtlbiBmcm9tIGtpbmdzLCB1bmRlciB0aGUgZmVldCBvZiBJYmVyaWFucyBhbmQgTnVtaWRpYW5zIHdobyBoYWQgc29sZCB0aGVpciBsaXZlcyB0byB0aGUgQ2FydGhhZ2luaWFucy4gICBBbmQgc28gaXQgY2FtZSB0byBwYXNzIHRoYXQgdGhlc2UgdmVyeSBtZW4gd2VyZSBsb2F0aCB0byBhY2NlcHQgdGhlaXIgb3duIHN1Y2Nlc3MsIHdoZW4gYSBSb21hbiB3aG8gZXhjZWxsZWQgYWxsIG90aGVycyBpbiB2YWxvdXIsIGFuZCBoYWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBhbmQgdGhlIG1vc3Qgc3BsZW5kaWQgZmFtZSwgd2FzIHVzZWxlc3NseSBzYWNyaWZpY2VkIGFtb25nIHRoZSBzY291dHMgb2YgRnJlZ2VsbGFlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JIGNhbm5vdCwgaW5kZWVkLCBhcHBsYXVkIHRoZSBkZWF0aCBvZiBlaXRoZXIgb2YgdGhlbSwgbmF5LCBJIGFtIGRpc3RyZXNzZWQgYW5kIGluZGlnbmFudCBhdCB0aGVpciB1bnJlYXNvbmFibGVuZXNzIGluIHRoZSBmaW5hbCBkaXNhc3Rlci4gIEFuZCBJIGFkbWlyZSBIYW5uaWJhbCBiZWNhdXNlLCBpbiBiYXR0bGVzIHNvIG51bWVyb3VzIHRoYXQgb25lIHdvdWxkIHdlYXJ5IG9mIGNvdW50aW5nIHRoZW0sIGhlIHdhcyBub3QgZXZlbiB3b3VuZGVkLiAgICBJIGFtIGRlbGlnaHRlZCwgdG9vLCB3aXRoIENocnlzYW50ZXMsIGluIHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3lyb3BhZWRlaWEsPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEN5cm9wLiA0LjEuMyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkN5cm9wLjwvdGl0bGU+IGl2LiAxLCAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aG8sIHRob3VnaCBoaXMgYmxhZGUgd2FzIGxpZnRlZCBvbiBoaWdoIGFuZCBoZSB3YXMgYWJvdXQgdG8gc21pdGUgYW4gZW5lbXksIHdoZW4gdGhlIHRydW1wZXQgc291bmRlZCBhIHJldHJlYXQsIGxldCBoaXMgbWFuIGdvLCBhbmQgcmV0aXJlZCB3aXRoIGFsbCBnZW50bGVuZXNzIGFuZCBkZWNvcnVtLiAgICAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQ3lyb3AuIDQuMS4zIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3lyb3AuPC90aXRsZT4gaXYuIDEsIDMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DeXJvcC48L3RpdGxlPiBpdi4gMSwgMy48L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlbG9waWRhcywgaG93ZXZlciwgd2FzIHNvbWV3aGF0IGV4Y3VzYWJsZSwgYmVjYXVzZSwgZXhjaXRlZCBhcyBoZSBhbHdheXMgd2FzIGJ5IGFuIG9wcG9ydHVuaXR5IGZvciBiYXR0bGUsIGhlIHdhcyBub3cgY2FycmllZCBhd2F5IGJ5IGEgZ2VuZXJvdXMgYW5nZXIgdG8gc2VlayByZXZlbmdlLiAgIEZvciB0aGUgYmVzdCB0aGluZyBpcyB0aGF0IGEgZ2VuZXJhbCBzaG91bGQgYmUgdmljdG9yaW91cyBhbmQga2VlcCBoaXMgbGlmZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJ1dCBpZiBoZSBtdXN0IGRpZSw8L3E+ICBoZSBzaG91bGQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbmNsdWRlIGhpcyBsaWZlIHdpdGggdmFsb3VyLDwvcT4gYXMgRXVyaXBpZGVzIHNheXM7IGZvciB0aGVuIGhlIGRvZXMgbm90IHN1ZmZlciBkZWF0aCwgYnV0IHJhdGhlciBhY2hpZXZlcyBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIGhpcyBhbmdlciwgUGVsb3BpZGFzIHNhdyB0aGF0IHRoZSBjb25zdW1tYXRpb24gb2YgaGlzIHZpY3Rvcnkgd291bGQgYmUgdGhlIGRlYXRoIG9mIHRoZSB0eXJhbnQsIGFuZCB0aGlzIG5vdCBhbHRvZ2V0aGVyIHVucmVhc29uYWJseSBpbnZpdGVkIGhpcyBlZmZvcnQ7IGZvciBpdCB3b3VsZCBoYXZlIGJlZW4gaGFyZCB0byBmaW5kIGFub3RoZXIgZGVlZCBvZiBwcm93ZXNzIHdpdGggc28gZmFpciBhbmQgZ2xvcmlvdXMgYSBwcm9taXNlLiAgQnV0IE1hcmNlbGx1cywgd2hlbiBubyBncmVhdCBuZWVkIHdhcyBwcmVzc2luZywgYW5kIHdoZW4gaGUgZmVsdCBub25lIG9mIHRoYXQgYXJkb3VyIHdoaWNoIGluIHRpbWVzIG9mIHBlcmlsIHVuc2VhdHMgdGhlIGp1ZGdtZW50LCBwbHVuZ2VkIGhlZWRsZXNzbHkgaW50byBkYW5nZXIsIGFuZCBkaWVkIHRoZSBkZWF0aCwgbm90IG9mIGEgZ2VuZXJhbCwgYnV0IG9mIGEgbWVyZSBza2lybWlzaGVyIG9yIHNjb3V0LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhhdmluZyBjYXN0IGhpcyBmaXZlIGNvbnN1bGF0ZXMsIGhpcyB0aHJlZSB0cml1bXBocywgYW5kIHRoZSBzcG9pbHMgYW5kIHRyb3BoaWVzIHdoaWNoIGhlIGhhZCB0YWtlbiBmcm9tIGtpbmdzLCB1bmRlciB0aGUgZmVldCBvZiBJYmVyaWFucyBhbmQgTnVtaWRpYW5zIHdobyBoYWQgc29sZCB0aGVpciBsaXZlcyB0byB0aGUgQ2FydGhhZ2luaWFucy4gICBBbmQgc28gaXQgY2FtZSB0byBwYXNzIHRoYXQgdGhlc2UgdmVyeSBtZW4gd2VyZSBsb2F0aCB0byBhY2NlcHQgdGhlaXIgb3duIHN1Y2Nlc3MsIHdoZW4gYSBSb21hbiB3aG8gZXhjZWxsZWQgYWxsIG90aGVycyBpbiB2YWxvdXIsIGFuZCBoYWQgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBhbmQgdGhlIG1vc3Qgc3BsZW5kaWQgZmFtZSwgd2FzIHVzZWxlc3NseSBzYWNyaWZpY2VkIGFtb25nIHRoZSBzY291dHMgb2YgRnJlZ2VsbGFlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCBob3dldmVyLCBtdXN0IG5vdCBiZSB0aG91Z2h0IGEgZGVudW5jaWF0aW9uIG9mIHRoZSBtZW4sIGJ1dCByYXRoZXIgYW4gaW5kaWduYW50IGFuZCBvdXRzcG9rZW4gcHJvdGVzdCBpbiB0aGVpciBvd24gYmVoYWxmIGFnYWluc3QgdGhlbXNlbHZlcyBhbmQgdGhlaXIgdmFsb3VyLCB0byB3aGljaCB0aGV5IHVzZWxlc3NseSBzYWNyaWZpY2VkIHRoZWlyIG90aGVyIHZpcnR1ZXMsIGluIHRoYXQgdGhleSB3ZXJlIHVuc3BhcmluZyBvZiB0aGVpciBsaXZlczsgYXMgaWYgdGhlaXIgZGVhdGggYWZmZWN0ZWQgdGhlbXNlbHZlcyBhbG9uZSwgYW5kIG5vdCByYXRoZXIgdGhlaXIgY291bnRyaWVzLCBmcmllbmRzLCBhbmQgYWxsaWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGhvd2V2ZXIsIG11c3Qgbm90IGJlIHRob3VnaHQgYSBkZW51bmNpYXRpb24gb2YgdGhlIG1lbiwgYnV0IHJhdGhlciBhbiBpbmRpZ25hbnQgYW5kIG91dHNwb2tlbiBwcm90ZXN0IGluIHRoZWlyIG93biBiZWhhbGYgYWdhaW5zdCB0aGVtc2VsdmVzIGFuZCB0aGVpciB2YWxvdXIsIHRvIHdoaWNoIHRoZXkgdXNlbGVzc2x5IHNhY3JpZmljZWQgdGhlaXIgb3RoZXIgdmlydHVlcywgaW4gdGhhdCB0aGV5IHdlcmUgdW5zcGFyaW5nIG9mIHRoZWlyIGxpdmVzOyBhcyBpZiB0aGVpciBkZWF0aCBhZmZlY3RlZCB0aGVtc2VsdmVzIGFsb25lLCBhbmQgbm90IHJhdGhlciB0aGVpciBjb3VudHJpZXMsIGZyaWVuZHMsIGFuZCBhbGxpZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyBkZWF0aCwgUGVsb3BpZGFzIHJlY2VpdmVkIGJ1cmlhbCBmcm9tIGhpcyBhbGxpZXMsIGluIHdob3NlIGJlaGFsZiBoZSBmZWxsOyBNYXJjZWxsdXMgZnJvbSBoaXMgZW5lbWllcywgYnkgd2hvc2UgaGFuZHMgaGUgZmVsbC4gIEFuIGVudmlhYmxlIGFuZCBoYXBweSBsb3Qgd2FzIHRoZSBmb3JtZXIsIGl0IGlzIHRydWU7IGJ1dCBiZXR0ZXIgYW5kIGdyZWF0ZXIgdGhhbiB0aGUgZ29vZHdpbGwgd2hpY2ggbWFrZXMgZ3JhdGVmdWwgcmV0dXJuIGZvciBmYXZvdXJzIGRvbmUsIGlzIHRoZSBoYXRyZWQgd2hpY2ggYWRtaXJlcyBhIHZhbG91ciB0aGF0IHdhcyBoYXJhc3NpbmcuICAgRm9yIGluIHRoaXMgY2FzZSBpdCBpcyB3b3J0aCBhbG9uZSB3aGljaCByZWNlaXZlcyBob25vdXI7IHdoZXJlYXMgaW4gdGhlIG90aGVyLCBwZXJzb25hbCBpbnRlcmVzdHMgYW5kIG5lZWRzIGFyZSBtb3JlIHJlZ2FyZGVkIHRoYW4gZXhjZWxsZW5jZS4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
