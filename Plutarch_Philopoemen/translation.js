var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGxvbmcgYXMgQ3JhdWdpcyBsaXZlZCwgQ2xlYW5kZXIncyB3YW50cyB3ZXJlIGFsbCBzdXBwbGllZCwgYW5kIHdoZW4gQ3JhdWdpcyBkaWVkLCBDbGVhbmRlciwgd2lzaGluZyB0byByZXF1aXRlIGhpbSBmb3IgaGlzIGhvc3BpdGFsaXR5LCB1bmRlcnRvb2sgdGhlIHJlYXJpbmcgb2YgaGlzIG9ycGhhbiBzb24sIGp1c3QgYXMgSG9tZXIgc2F5cyB0aGF0IEFjaGlsbGVzIHdhcyByZWFyZWQgYnkgUGhvZW5peCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA5LjQzOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGl4LiA0MzggZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHNvIHRoYXQgdGhlIGJveSdzIGNoYXJhY3RlciB0b29rIG9uIGZyb20gdGhlIHZlcnkgb3V0c2V0IGEgbm9ibGUgYW5kIGtpbmdseSBtb3VsZCBhbmQgZ3Jvd3RoLiBCdXQgYXMgc29vbiBhcyBQaGlsb3BvZW1lbiBoYWQgY2Vhc2VkIHRvIGJlIGEgYm95LCBFY2RlbXVzIGFuZCBNZWdhbG9waGFuZXMsIG9mIE1lZ2Fsb3BvbGlzLCB3ZXJlIHB1dCBpbiBjaGFyZ2Ugb2YgaGltLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDkuNDM4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaXguIDQzOCBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGl4LiA0MzggZmYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJyaWVmIGJpb2dyYXBoeSBvZiBQaGlsb3BvZW1lbiBtYXkgYmUgZm91bmQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOC40OSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCB2aWlpLiA0OS01MTwvYmlibD4uIEl0IGFncmVlcywgaW4gdGhlIG1haW4sIHdpdGggdGhhdCBvZiBQbHV0YXJjaC4gUGhpbG9wb2VtZW4gd2FzIGJvcm4gYWJvdXQgMjUyIEIuQy48L25vdGU+IFRoZXkgaGFkIGJlZW4gY29tcmFkZXMgb2YgQXJjZXNpbGHDvHMgYXQgdGhlIEFjYWRlbXksIGFuZCBiZXlvbmQgYWxsIG1lbiBvZiB0aGVpciBkYXkgaGFkIGJyb3VnaHQgcGhpbG9zb3BoeSB0byBiZWFyIHVwb24gcG9saXRpY2FsIGFjdGlvbiBhbmQgYWZmYWlycyBvZiBzdGF0ZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiA4LjQ5IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIHZpaWkuIDQ5LTUxPC9iaWJsPi4gSXQgYWdyZWVzLCBpbiB0aGUgbWFpbiwgd2l0aCB0aGF0IG9mIFBsdXRhcmNoLiBQaGlsb3BvZW1lbiB3YXMgYm9ybiBhYm91dCAyNTIgQi5DLjwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZnJlZWQgdGhlaXIgb3duIG5hdGl2ZSBjaXR5IGZyb20gdHlyYW5ueSwgYnkgc2VjcmV0bHkgcHJvY3VyaW5nIG1lbiB0byBraWxsIEFyaXN0b2RlbXVzOyB0aGV5IGpvaW5lZCB3aXRoIEFyYXR1cyBpbiBleHBlbGxpbmcgTmljb2NsZXMgdGhlIHR5cmFudCBvZiBTaWN5b247PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCBpaS48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDEwLjEiIHZhbGlkPSJ5ZXMiPnguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBhdCB0aGUgcmVxdWVzdCBvZiB0aGUgcGVvcGxlIG9mIEN5cmVuZSwgd2hvc2UgY2l0eSB3YXMgZnVsbCBvZiBjb25mdXNpb24gYW5kIHBvbGl0aWNhbCBkaXN0ZW1wZXIsIHRoZXkgc2FpbGVkIHRoaXRoZXIsIGludHJvZHVjZWQgbGF3IGFuZCBvcmRlciwgYW5kIGFycmFuZ2VkIG1hdHRlcnMgaW4gdGhlIGNpdHkgbW9zdCBoYXBwaWx5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCBpaS48L2JpYmw+LTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCBpaS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAxMC4xIiB2YWxpZD0ieWVzIj54LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdGhlbXNlbHZlcywgaG93ZXZlciwgY291bnRlZCB0aGUgZWR1Y2F0aW9uIG9mIFBoaWxvcG9lbWVuIGFsc28gYW1vbmcgdGhlaXIgbWFueSBhY2hpZXZlbWVudHMsIGJlbGlldmluZyB0aGF0IHRoZWlyIHBoaWxvc29waGljYWwgdGVhY2hpbmdzIGhhZCBtYWRlIGhpbSBhIGNvbW1vbiBiZW5lZml0IHRvIEdyZWVjZS4gRm9yIHNpbmNlIGhlIHdhcyB0aGUgY2hpbGQsIGFzIGl0IHdlcmUsIG9mIGhlciBsYXRlIG9sZCBhZ2UgYW5kIHN1Y2NlZWRlZCB0byB0aGUgdmlydHVlcyBvZiBoZXIgYW5jaWVudCBjb21tYW5kZXJzLCBHcmVlY2UgbG92ZWQgaGltIHN1cnBhc3NpbmdseSwgYW5kIGFzIGhpcyByZXB1dGF0aW9uIGdyZXcsIGluY3JlYXNlZCBoaXMgcG93ZXIuIEFuZCBhIGNlcnRhaW4gUm9tYW4sIGluIHByYWlzaW5nIGhpbSwgY2FsbGVkIGhpbSB0aGUgbGFzdCBvZiB0aGUgR3JlZWtzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAyNC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHh4aXYuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGltcGx5aW5nIHRoYXQgR3JlZWNlIHByb2R1Y2VkIG5vIGdyZWF0IG1hbiBhZnRlciBoaW0sIG5vciBvbmUgd29ydGh5IG9mIGhlci4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMjQuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCB4eGl2LiAyLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHh4aXYuIDIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsb29rcyBoZSB3YXMgbm90LCBhcyBzb21lIHN1cHBvc2UsIGlsbC1mYXZvdXJlZDsgZm9yIGEgc3RhdHVlIG9mIGhpbSBpcyBzdGlsbCB0byBiZSBzZWVuIGF0IERlbHBoaTsgYW5kIHRoZSBtaXN0YWtlIG9mIGhpcyBNZWdhcmlhbiBob3N0ZXNzIHdhcyBkdWUsIGFzIHdlIGFyZSB0b2xkLCB0byBhIGNlcnRhaW4gaW5kaWZmZXJlbmNlIGFuZCBzaW1wbGljaXR5IG9uIGhpcyBwYXJ0LiBUaGlzIHdvbWFuLCBsZWFybmluZyB0aGF0IHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyB3YXMgY29taW5nIHRvIGhlciBob3VzZSwgaW4gZ3JlYXQgY29uZnVzaW9uIHNldCBhYm91dCBwcmVwYXJpbmcgc3VwcGVyOyBiZXNpZGVzLCBoZXIgaHVzYmFuZCBjaGFuY2VkIHRvIGJlIGF3YXkgZnJvbSBob21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5KdXN0IHRoZW4gUGhpbG9wb2VtZW4gY2FtZSBpbiwgd2VhcmluZyBhIHNpbXBsZSBzb2xkaWVyJ3MgY2xvYWssIGFuZCB0aGUgd29tYW4sIHRoaW5raW5nIGhpbSB0byBiZSBvbmUgb2YgaGlzIHNlcnZhbnRzIHdobyBoYWQgYmVlbiBzZW50IG9uIGluIGFkdmFuY2UsIGludml0ZWQgaGltIHRvIGhlbHAgaGVyIGluIGhlciBob3VzZXdvcmsuIFNvIFBoaWxvcG9lbWVuIGF0IG9uY2UgdGhyZXcgb2ZmIGhpcyBjbG9hayBhbmQgZmVsbCB0byBzcGxpdHRpbmcgd29vZC4gVGhlbiBoaXMgaG9zdCBjYW1lIGluLCBhbmQgc2VlaW5nIGhpbSB0aHVzIGVtcGxveWVkLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgZG9lcyB0aGlzIG1lYW4sIFBoaWxvcG9lbWVuPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgZWxzZSw8L3E+IHNhaWQgUGhpbG9wb2VtZW4gaW4gYnJvYWQgRG9yaWMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhbiB0aGF0IEkgYW0gcGF5aW5nIGEgcGVuYWx0eSBmb3IgbXkgaWxsIGxvb2tzPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgb25jZSBUaXR1cyBGbGFtaW5pbnVzLCBtYWtpbmcgZnVuIG9mIGNlcnRhaW4gcGFydHMgb2YgaGlzIGZpZ3VyZSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5QaGlsb3BvZW1lbiwgd2hhdCBmaW5lIGFybXMgYW5kIGxlZ3MgdGhvdSBoYXN0OyBidXQgYmVsbHkgdGhvdSBoYXN0IG5vdDwvcT47IGZvciBQaGlsb3BvZW1lbiB3YXMgcXVpdGUgc2xlbmRlciBhdCB0aGUgd2Fpc3QuIFRoaXMgcGllY2Ugb2YgZnVuLCBob3dldmVyLCB3YXMgYWltZWQgdGhlIHJhdGhlciBhdCBoaXMgcmVzb3VyY2VzLiBGb3IgdGhvdWdoIGhlIGhhZCBleGNlbGxlbnQgbWVuLWF0LWFybXMgYW5kIGhvcnNlbWVuLCBoZSB3YXMgb2Z0ZW4gYXQgYSBsb3NzIGZvciBtb25leS4gSG93ZXZlciwgdGhlc2Ugc3RvcmllcyBhcmUgdG9sZCBvZiBQaGlsb3BvZW1lbiBpbiB0aGUgc2Nob29scyBvZiBwaGlsb3NvcGh5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsb29rcyBoZSB3YXMgbm90LCBhcyBzb21lIHN1cHBvc2UsIGlsbC1mYXZvdXJlZDsgZm9yIGEgc3RhdHVlIG9mIGhpbSBpcyBzdGlsbCB0byBiZSBzZWVuIGF0IERlbHBoaTsgYW5kIHRoZSBtaXN0YWtlIG9mIGhpcyBNZWdhcmlhbiBob3N0ZXNzIHdhcyBkdWUsIGFzIHdlIGFyZSB0b2xkLCB0byBhIGNlcnRhaW4gaW5kaWZmZXJlbmNlIGFuZCBzaW1wbGljaXR5IG9uIGhpcyBwYXJ0LiBUaGlzIHdvbWFuLCBsZWFybmluZyB0aGF0IHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyB3YXMgY29taW5nIHRvIGhlciBob3VzZSwgaW4gZ3JlYXQgY29uZnVzaW9uIHNldCBhYm91dCBwcmVwYXJpbmcgc3VwcGVyOyBiZXNpZGVzLCBoZXIgaHVzYmFuZCBjaGFuY2VkIHRvIGJlIGF3YXkgZnJvbSBob21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkp1c3QgdGhlbiBQaGlsb3BvZW1lbiBjYW1lIGluLCB3ZWFyaW5nIGEgc2ltcGxlIHNvbGRpZXIncyBjbG9haywgYW5kIHRoZSB3b21hbiwgdGhpbmtpbmcgaGltIHRvIGJlIG9uZSBvZiBoaXMgc2VydmFudHMgd2hvIGhhZCBiZWVuIHNlbnQgb24gaW4gYWR2YW5jZSwgaW52aXRlZCBoaW0gdG8gaGVscCBoZXIgaW4gaGVyIGhvdXNld29yay4gU28gUGhpbG9wb2VtZW4gYXQgb25jZSB0aHJldyBvZmYgaGlzIGNsb2FrIGFuZCBmZWxsIHRvIHNwbGl0dGluZyB3b29kLiBUaGVuIGhpcyBob3N0IGNhbWUgaW4sIGFuZCBzZWVpbmcgaGltIHRodXMgZW1wbG95ZWQsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGRvZXMgdGhpcyBtZWFuLCBQaGlsb3BvZW1lbj88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgZWxzZSw8L3E+IHNhaWQgUGhpbG9wb2VtZW4gaW4gYnJvYWQgRG9yaWMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGFuIHRoYXQgSSBhbSBwYXlpbmcgYSBwZW5hbHR5IGZvciBteSBpbGwgbG9va3M/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIFRpdHVzIEZsYW1pbmludXMsIG1ha2luZyBmdW4gb2YgY2VydGFpbiBwYXJ0cyBvZiBoaXMgZmlndXJlLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGhpbG9wb2VtZW4sIHdoYXQgZmluZSBhcm1zIGFuZCBsZWdzIHRob3UgaGFzdDsgYnV0IGJlbGx5IHRob3UgaGFzdCBub3Q8L3E+OyBmb3IgUGhpbG9wb2VtZW4gd2FzIHF1aXRlIHNsZW5kZXIgYXQgdGhlIHdhaXN0LiBUaGlzIHBpZWNlIG9mIGZ1biwgaG93ZXZlciwgd2FzIGFpbWVkIHRoZSByYXRoZXIgYXQgaGlzIHJlc291cmNlcy4gRm9yIHRob3VnaCBoZSBoYWQgZXhjZWxsZW50IG1lbi1hdC1hcm1zIGFuZCBob3JzZW1lbiwgaGUgd2FzIG9mdGVuIGF0IGEgbG9zcyBmb3IgbW9uZXkuIEhvd2V2ZXIsIHRoZXNlIHN0b3JpZXMgYXJlIHRvbGQgb2YgUGhpbG9wb2VtZW4gaW4gdGhlIHNjaG9vbHMgb2YgcGhpbG9zb3BoeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxvdmUgb2YgZGlzdGluY3Rpb24gd2hpY2ggbWFya2VkIGhpcyBjaGFyYWN0ZXIgd2FzIG5vdCBhbHRvZ2V0aGVyIGZyZWUgZnJvbSBjb250ZW50aW91c25lc3Mgbm9yIGRldm9pZCBvZiBhbmdlcjsgYW5kIGFsdGhvdWdoIGhlIGRlc2lyZWQgdG8gcGF0dGVybiBoaW1zZWxmIG1vc3Qgb2YgYWxsIGFmdGVyIEVwYW1pbm9uZGFzLCBpdCB3YXMgdGhlIGVuZXJneSwgc2FnYWNpdHksIGFuZCBpbmRpZmZlcmVuY2UgdG8gbW9uZXkgaW4gRXBhbWlub25kYXMgd2hpY2ggaGUgc3RyZW51b3VzbHkgaW1pdGF0ZWQsIHdoaWxlIGhpcyBwcm9uZW5lc3MgdG8gYW5nZXIgYW5kIGNvbnRlbnRpb3VzbmVzcyBtYWRlIGhpbSB1bmFibGUgdG8gbWFpbnRhaW4gdGhhdCBncmVhdCBsZWFkZXIncyBtaWxkbmVzcywgZ3Jhdml0eSwgYW5kIHVyYmFuaXR5IGluIHBvbGl0aWNhbCBkaXNwdXRlcywgc28gdGhhdCBoZSB3YXMgdGhvdWdodCB0byBiZSBlbmRvd2VkIHdpdGggbWlsaXRhcnkgcmF0aGVyIHRoYW4gd2l0aCBjaXZpYyB2aXJ0dWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZnJvbSBoaXMgdmVyeSBib3lob29kIGhlIHdhcyBmb25kIG9mIGEgc29sZGllcidzIGxpZmUsIGFuZCByZWFkaWx5IGxlYXJuZWQgdGhlIGxlc3NvbnMgd2hpY2ggd2VyZSB1c2VmdWwgZm9yIHRoaXMsIHN1Y2ggYXMgdGhvc2UgaW4gaGVhdnktYXJtZWQgZmlnaHRpbmcgYW5kIGhvcnNlbWFuc2hpcC4gSGUgd2FzIGFsc28gdGhvdWdodCB0byBiZSBhIGdvb2Qgd3Jlc3RsZXIsIGJ1dCB3aGVuIHNvbWUgb2YgaGlzIGZyaWVuZHMgYW5kIGRpcmVjdG9ycyB1cmdlZCBoaW0gdG8gdGFrZSB1cCBhdGhsZXRpY3MsIGhlIGFza2VkIHRoZW0gaWYgYXRobGV0aWNzIHdvdWxkIG5vdCBiZSBpbmp1cmlvdXMgdG8gaGlzIG1pbGl0YXJ5IHRyYWluaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHRvbGQgaGltIChhcmlkIGl0IHdhcyB0aGUgdHJ1dGgpIHRoYXQgdGhlIGhhYml0IG9mIGJvZHkgYW5kIG1vZGUgb2YgbGlmZSBmb3IgYXRobGV0ZSBhbmQgc29sZGllciB3ZXJlIHRvdGFsbHkgZGlmZmVyZW50LCBhbmQgcGFydGljdWxhcmx5IHRoYXQgdGhlaXIgZGlldCBhbmQgdHJhaW5pbmcgd2VyZSBub3QgdGhlIHNhbWUsIHNpbmNlIHRoZSBvbmUgcmVxdWlyZWQgbXVjaCBzbGVlcCwgY29udGludW91cyBzdXJmZWl0IG9mIGZvb2QsIGFuZCBmaXhlZCBwZXJpb2RzIG9mIGFjdGl2aXR5IGFuZCByZXBvc2UsIGluIG9yZGVyIHRvIHByZXNlcnZlIG9yIGltcHJvdmUgdGhlaXIgY29uZGl0aW9uLCB3aGljaCB0aGUgc2xpZ2h0ZXN0IGluZmx1ZW5jZSBvciB0aGUgbGVhc3QgZGVwYXJ0dXJlIGZyb20gcm91dGluZSBpcyBhcHQgdG8gY2hhbmdlIGZvciB0aGUgd29yc2U7IHdoZXJlYXMgdGhlIHNvbGRpZXIgb3VnaHQgdG8gYmUgY29udmVyc2FudCB3aXRoIGFsbCBzb3J0cyBvZiBpcnJlZ3VsYXJpdHkgYW5kIGFsbCBzb3J0cyBvZiBpbmVxdWFsaXR5LCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYWJvdmUgYWxsIHNob3VsZCBhY2N1c3RvbSBoaW1zZWxmIHRvIGVuZHVyZSBsYWNrIG9mIGZvb2QgZWFzaWx5LCBhbmQgYXMgZWFzaWx5IGxhY2sgb2Ygc2xlZXAuIE9uIGhlYXJpbmcgdGhpcywgUGhpbG9wb2VtZW4gbm90IG9ubHkgc2h1bm5lZCBhdGhsZXRpY3MgaGltc2VsZiBhbmQgZGVyaWRlZCB0aGVtLCBidXQgYWxzbyBpbiBsYXRlciB0aW1lcyBhcyBhIGNvbW1hbmRlciBiYW5pc2hlZCBmcm9tIHRoZSBhcm15IGFsbCBmb3JtcyBvZiB0aGVtLCB3aXRoIGV2ZXJ5IHBvc3NpYmxlIG1hcmsgb2YgcmVwcm9hY2ggYW5kIGRpc2hvbm91ciwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZXkgcmVuZGVyZWQgdXNlbGVzcyBmb3IgdGhlIGluZXZpdGFibGUgc3RydWdnbGUgb2YgYmF0dGxlIG1lbiB3aG8gd291bGQgb3RoZXJ3aXNlIGJlIG1vc3Qgc2VydmljZWFibGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxvdmUgb2YgZGlzdGluY3Rpb24gd2hpY2ggbWFya2VkIGhpcyBjaGFyYWN0ZXIgd2FzIG5vdCBhbHRvZ2V0aGVyIGZyZWUgZnJvbSBjb250ZW50aW91c25lc3Mgbm9yIGRldm9pZCBvZiBhbmdlcjsgYW5kIGFsdGhvdWdoIGhlIGRlc2lyZWQgdG8gcGF0dGVybiBoaW1zZWxmIG1vc3Qgb2YgYWxsIGFmdGVyIEVwYW1pbm9uZGFzLCBpdCB3YXMgdGhlIGVuZXJneSwgc2FnYWNpdHksIGFuZCBpbmRpZmZlcmVuY2UgdG8gbW9uZXkgaW4gRXBhbWlub25kYXMgd2hpY2ggaGUgc3RyZW51b3VzbHkgaW1pdGF0ZWQsIHdoaWxlIGhpcyBwcm9uZW5lc3MgdG8gYW5nZXIgYW5kIGNvbnRlbnRpb3VzbmVzcyBtYWRlIGhpbSB1bmFibGUgdG8gbWFpbnRhaW4gdGhhdCBncmVhdCBsZWFkZXIncyBtaWxkbmVzcywgZ3Jhdml0eSwgYW5kIHVyYmFuaXR5IGluIHBvbGl0aWNhbCBkaXNwdXRlcywgc28gdGhhdCBoZSB3YXMgdGhvdWdodCB0byBiZSBlbmRvd2VkIHdpdGggbWlsaXRhcnkgcmF0aGVyIHRoYW4gd2l0aCBjaXZpYyB2aXJ0dWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBmcm9tIGhpcyB2ZXJ5IGJveWhvb2QgaGUgd2FzIGZvbmQgb2YgYSBzb2xkaWVyJ3MgbGlmZSwgYW5kIHJlYWRpbHkgbGVhcm5lZCB0aGUgbGVzc29ucyB3aGljaCB3ZXJlIHVzZWZ1bCBmb3IgdGhpcywgc3VjaCBhcyB0aG9zZSBpbiBoZWF2eS1hcm1lZCBmaWdodGluZyBhbmQgaG9yc2VtYW5zaGlwLiBIZSB3YXMgYWxzbyB0aG91Z2h0IHRvIGJlIGEgZ29vZCB3cmVzdGxlciwgYnV0IHdoZW4gc29tZSBvZiBoaXMgZnJpZW5kcyBhbmQgZGlyZWN0b3JzIHVyZ2VkIGhpbSB0byB0YWtlIHVwIGF0aGxldGljcywgaGUgYXNrZWQgdGhlbSBpZiBhdGhsZXRpY3Mgd291bGQgbm90IGJlIGluanVyaW91cyB0byBoaXMgbWlsaXRhcnkgdHJhaW5pbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdG9sZCBoaW0gKGFyaWQgaXQgd2FzIHRoZSB0cnV0aCkgdGhhdCB0aGUgaGFiaXQgb2YgYm9keSBhbmQgbW9kZSBvZiBsaWZlIGZvciBhdGhsZXRlIGFuZCBzb2xkaWVyIHdlcmUgdG90YWxseSBkaWZmZXJlbnQsIGFuZCBwYXJ0aWN1bGFybHkgdGhhdCB0aGVpciBkaWV0IGFuZCB0cmFpbmluZyB3ZXJlIG5vdCB0aGUgc2FtZSwgc2luY2UgdGhlIG9uZSByZXF1aXJlZCBtdWNoIHNsZWVwLCBjb250aW51b3VzIHN1cmZlaXQgb2YgZm9vZCwgYW5kIGZpeGVkIHBlcmlvZHMgb2YgYWN0aXZpdHkgYW5kIHJlcG9zZSwgaW4gb3JkZXIgdG8gcHJlc2VydmUgb3IgaW1wcm92ZSB0aGVpciBjb25kaXRpb24sIHdoaWNoIHRoZSBzbGlnaHRlc3QgaW5mbHVlbmNlIG9yIHRoZSBsZWFzdCBkZXBhcnR1cmUgZnJvbSByb3V0aW5lIGlzIGFwdCB0byBjaGFuZ2UgZm9yIHRoZSB3b3JzZTsgd2hlcmVhcyB0aGUgc29sZGllciBvdWdodCB0byBiZSBjb252ZXJzYW50IHdpdGggYWxsIHNvcnRzIG9mIGlycmVndWxhcml0eSBhbmQgYWxsIHNvcnRzIG9mIGluZXF1YWxpdHksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhYm92ZSBhbGwgc2hvdWxkIGFjY3VzdG9tIGhpbXNlbGYgdG8gZW5kdXJlIGxhY2sgb2YgZm9vZCBlYXNpbHksIGFuZCBhcyBlYXNpbHkgbGFjayBvZiBzbGVlcC4gT24gaGVhcmluZyB0aGlzLCBQaGlsb3BvZW1lbiBub3Qgb25seSBzaHVubmVkIGF0aGxldGljcyBoaW1zZWxmIGFuZCBkZXJpZGVkIHRoZW0sIGJ1dCBhbHNvIGluIGxhdGVyIHRpbWVzIGFzIGEgY29tbWFuZGVyIGJhbmlzaGVkIGZyb20gdGhlIGFybXkgYWxsIGZvcm1zIG9mIHRoZW0sIHdpdGggZXZlcnkgcG9zc2libGUgbWFyayBvZiByZXByb2FjaCBhbmQgZGlzaG9ub3VyLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSByZW5kZXJlZCB1c2VsZXNzIGZvciB0aGUgaW5ldml0YWJsZSBzdHJ1Z2dsZSBvZiBiYXR0bGUgbWVuIHdobyB3b3VsZCBvdGhlcndpc2UgYmUgbW9zdCBzZXJ2aWNlYWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiwgc2V0IGZyZWUgZnJvbSB0ZWFjaGVycyBhbmQgdHV0b3JzLCBoZSB0b29rIHBhcnQgaW4gdGhlIGluY3Vyc2lvbnMgaW50byBTcGFydGFuIHRlcnJpdG9yeSB3aGljaCBoaXMgZmVsbG93LWNpdGl6ZW5zIG1hZGUgZm9yIHRoZSBzYWtlIG9mIGJvb3R5IGFuZCBwbHVuZGVyLCBoZSBhY2N1c3RvbWVkIGhpbXNlbGYgdG8gbWFyY2ggZmlyc3QgYXMgdGhleSB3ZW50IG91dCwgYnV0IGxhc3QgYXMgdGhleSBjYW1lIGJhY2suIEFuZCB3aGVuIGhlIGhhZCBsZWlzdXJlLCBoZSB3b3VsZCBnaXZlIGhpcyBib2R5IGhhcmQgZXhlcmNpc2UgaW4gaHVudGluZywgdGh1cyByZW5kZXJpbmcgaXQgYWdpbGUgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc3R1cmR5LCBvciBpbiBjdWx0aXZhdGluZyB0aGUgc29pbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhhZCBhIGZpbmUgZmFybSB0d2VudHkgZnVybG9uZ3MgZnJvbSB0aGUgY2l0eS4gVG8gdGhpcyBoZSB3b3VsZCBnbyBldmVyeSBkYXkgYWZ0ZXIgZGlubmVyIG9yIGFmdGVyIHN1cHBlciwgYW5kIHdvdWxkIHRocm93IGhpbXNlbGYgZG93biB1cG9uIGFuIG9yZGluYXJ5IHBhbGxldC1iZWQsIGxpa2UgYW55b25lIG9mIGhpcyBsYWJvdXJlcnMsIHRvIHNsZWVwIGZvciB0aGUgbmlnaHQuIFRoZW4sIGVhcmx5IGluIHRoZSBtb3JuaW5nLCBoZSB3b3VsZCByaXNlIGFuZCBnbyB0byB3b3JrIGFsb25nIHdpdGggaGlzIHZpbmUtZHJlc3NlcnMgb3IgaGlzIGhlcmRzbWVuLCBhZnRlciB3aGljaCBoZSB3b3VsZCBnbyBiYWNrIGFnYWluIHRvIHRoZSBjaXR5IGFuZCBidXN5IGhpbXNlbGYgYWJvdXQgcHVibGljIG1hdHRlcnMgd2l0aCBoaXMgZnJpZW5kcyBvciB3aXRoIHRoZSBtYWdpc3RyYXRlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiwgc2V0IGZyZWUgZnJvbSB0ZWFjaGVycyBhbmQgdHV0b3JzLCBoZSB0b29rIHBhcnQgaW4gdGhlIGluY3Vyc2lvbnMgaW50byBTcGFydGFuIHRlcnJpdG9yeSB3aGljaCBoaXMgZmVsbG93LWNpdGl6ZW5zIG1hZGUgZm9yIHRoZSBzYWtlIG9mIGJvb3R5IGFuZCBwbHVuZGVyLCBoZSBhY2N1c3RvbWVkIGhpbXNlbGYgdG8gbWFyY2ggZmlyc3QgYXMgdGhleSB3ZW50IG91dCwgYnV0IGxhc3QgYXMgdGhleSBjYW1lIGJhY2suIEFuZCB3aGVuIGhlIGhhZCBsZWlzdXJlLCBoZSB3b3VsZCBnaXZlIGhpcyBib2R5IGhhcmQgZXhlcmNpc2UgaW4gaHVudGluZywgdGh1cyByZW5kZXJpbmcgaXQgYWdpbGUgYW5kIGF0IHRoZSBzYW1lIHRpbWUgc3R1cmR5LCBvciBpbiBjdWx0aXZhdGluZyB0aGUgc29pbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgYSBmaW5lIGZhcm0gdHdlbnR5IGZ1cmxvbmdzIGZyb20gdGhlIGNpdHkuIFRvIHRoaXMgaGUgd291bGQgZ28gZXZlcnkgZGF5IGFmdGVyIGRpbm5lciBvciBhZnRlciBzdXBwZXIsIGFuZCB3b3VsZCB0aHJvdyBoaW1zZWxmIGRvd24gdXBvbiBhbiBvcmRpbmFyeSBwYWxsZXQtYmVkLCBsaWtlIGFueW9uZSBvZiBoaXMgbGFib3VyZXJzLCB0byBzbGVlcCBmb3IgdGhlIG5pZ2h0LiBUaGVuLCBlYXJseSBpbiB0aGUgbW9ybmluZywgaGUgd291bGQgcmlzZSBhbmQgZ28gdG8gd29yayBhbG9uZyB3aXRoIGhpcyB2aW5lLWRyZXNzZXJzIG9yIGhpcyBoZXJkc21lbiwgYWZ0ZXIgd2hpY2ggaGUgd291bGQgZ28gYmFjayBhZ2FpbiB0byB0aGUgY2l0eSBhbmQgYnVzeSBoaW1zZWxmIGFib3V0IHB1YmxpYyBtYXR0ZXJzIHdpdGggaGlzIGZyaWVuZHMgb3Igd2l0aCB0aGUgbWFnaXN0cmF0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB3aGF0IGhlIGdvdCBmcm9tIGhpcyBjYW1wYWlnbmluZywgaGUgdXNlZCB0byBzcGVuZCBpdCBvbiBob3JzZXMsIG9yIGFybW91ciwgb3IgdGhlIHJhbnNvbWluZyBvZiBjYXB0aXZlczsgYnV0IGhpcyBvd24gcHJvcGVydHkgaGUgc291Z2h0IHRvIGluY3JlYXNlIGJ5IGFncmljdWx0dXJlLCB3aGljaCBpcyB0aGUganVzdGVzdCB3YXkgdG8gbWFrZSBtb25leS4gTm9yIGRpZCBoZSBwcmFjdGlzZSBhZ3JpY3VsdHVyZSBtZXJlbHkgYXMgYSBzaWRlIGlzc3VlLCBidXQgaGUgaGVsZCB0aGF0IHRoZSBtYW4gd2hvIHB1cnBvc2VkIHRvIGtlZXAgaGlzIGhhbmRzIGZyb20gdGhlIHByb3BlcnR5IG9mIG90aGVycyBvdWdodCBieSBhbGwgbWVhbnMgdG8gaGF2ZSBwcm9wZXJ0eSBvZiBoaXMgb3duLiBIZSBhbHNvIGxpc3RlbmVkIHRvIHRoZSBkaXNjb3Vyc2VzIGFuZCBhcHBsaWVkIGhpbXNlbGYgdG8gdGhlIHdyaXRpbmdzIG9mIHBoaWxvc29waGVyc+KAlG5vdCBhbGwgb2YgdGhlbSwgYnV0IHRob3NlIHdob20gaGUgdGhvdWdodCBoZWxwZnVsIHRvIGhpbSBpbiBoaXMgcHJvZ3Jlc3MgdG93YXJkcyB2aXJ0dWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIHBvZW1zIG9mIEhvbWVyLCB3aGF0ZXZlciBpbiB0aGVtIHdhcyB0aG91Z2h0IGJ5IGhpbSB0byByb3VzZSBhbmQgc3RpbXVsYXRlIHRoZSBhY3Rpdml0aWVzIG9mIHRoZSBzb3VsIHdoaWNoIG1hZGUgZm9yIHZhbG91ciwgdG8gdGhpcyBoZSB3b3VsZCBhcHBseSBoaW1zZWxmLiBBbW9uZyBvdGhlciB3cml0aW5ncywgaG93ZXZlciwgaGUgd2FzIG1vc3Qgb2YgYWxsIGRldm90ZWQgdG8gdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFjdGljczwvcT4gb2YgRXZhbmdlbHVzLCBhbmQgd2FzIGZhbWlsaWFyIHdpdGggdGhlIGhpc3RvcmllcyBvZiBBbGV4YW5kZXIsIHRoaW5raW5nIHRoYXQgbGl0ZXJhdHVyZSB3YXMgY29uZHVjaXZlIHRvIGFjdGlvbiwgdW5sZXNzIGl0IHdlcmUgcHJvc2VjdXRlZCBtZXJlbHkgdG8gd2hpbGUgYXdheSB0aGUgdGltZSBhbmQgYWZmb3JkIHRoZW1lcyBmb3IgZnJ1aXRsZXNzIHNtYWxsIHRhbGsuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaGUgd291bGQgaWdub3JlIHRoZSBjaGFydHMgYW5kIGRpYWdyYW1zIGZvciB0aGUgaWxsdXN0cmF0aW9uIG9mIHRhY3RpY2FsIHByaW5jaXBsZXMsIGFuZCBnZXQgaGlzIHByb29mcyBhbmQgbWFrZSBoaXMgc3R1ZGllcyBvbiB0aGUgZ3JvdW5kIGl0c2VsZi4gVGhlIHdheXMgaW4gd2hpY2ggcGxhY2VzIHNsb3BlIHRvIG1lZXQgb25lIGFub3RoZXIsIGFuZCBsZXZlbCBwbGFpbnMgY29tZSB0byBhbiBhYnJ1cHQgZW5kLCBhbmQgYWxsIHRoZSB2aWNpc3NpdHVkZXMgYW5kIHNoYXBlcyBvZiBhIHBoYWxhbnggd2hlbiBpdCBpcyBlbG9uZ2F0ZWQgYW5kIGNvbnRyYWN0ZWQgYWdhaW4gaW4gdGhlIHZpY2luaXR5IG9mIHJhdmluZXMgb3IgZGl0Y2hlcyBvciBuYXJyb3cgZGVmaWxlcywgdGhlc2UgaGUgd291bGQgaW52ZXN0aWdhdGUgYnkgaGltc2VsZiBhcyBoZSB3YW5kZXJlZCBhYm91dCwgYW5kIGRpc2N1c3MgdGhlbSB3aXRoIGhpcyBjb21wYW5pb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd291bGQgc2VlbSB0aGF0IGhlIGJyb3VnaHQgbW9yZSB6ZWFsIHRoYW4gd2FzIG5lY2Vzc2FyeSB0byB0aGUgc3R1ZHkgb2YgbWlsaXRhcnkgc2NpZW5jZSwgc2V0dGluZyBoaXMgYWZmZWN0aW9ucyBvbiB3YXIgYXMgYWZmb3JkaW5nIGEgbW9zdCBtYW5pZm9sZCBiYXNpcyBmb3IgdGhlIHByYWN0aWNlIG9mIHZpcnR1ZSwgYW5kIGRlc3Bpc2luZyBhcyB1bnN1Y2Nlc3NmdWwgbWVuIHRob3NlIHdobyBsZWZ0IGl0IHRvIG90aGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB3aGF0IGhlIGdvdCBmcm9tIGhpcyBjYW1wYWlnbmluZywgaGUgdXNlZCB0byBzcGVuZCBpdCBvbiBob3JzZXMsIG9yIGFybW91ciwgb3IgdGhlIHJhbnNvbWluZyBvZiBjYXB0aXZlczsgYnV0IGhpcyBvd24gcHJvcGVydHkgaGUgc291Z2h0IHRvIGluY3JlYXNlIGJ5IGFncmljdWx0dXJlLCB3aGljaCBpcyB0aGUganVzdGVzdCB3YXkgdG8gbWFrZSBtb25leS4gTm9yIGRpZCBoZSBwcmFjdGlzZSBhZ3JpY3VsdHVyZSBtZXJlbHkgYXMgYSBzaWRlIGlzc3VlLCBidXQgaGUgaGVsZCB0aGF0IHRoZSBtYW4gd2hvIHB1cnBvc2VkIHRvIGtlZXAgaGlzIGhhbmRzIGZyb20gdGhlIHByb3BlcnR5IG9mIG90aGVycyBvdWdodCBieSBhbGwgbWVhbnMgdG8gaGF2ZSBwcm9wZXJ0eSBvZiBoaXMgb3duLiBIZSBhbHNvIGxpc3RlbmVkIHRvIHRoZSBkaXNjb3Vyc2VzIGFuZCBhcHBsaWVkIGhpbXNlbGYgdG8gdGhlIHdyaXRpbmdzIG9mIHBoaWxvc29waGVyc+KAlG5vdCBhbGwgb2YgdGhlbSwgYnV0IHRob3NlIHdob20gaGUgdGhvdWdodCBoZWxwZnVsIHRvIGhpbSBpbiBoaXMgcHJvZ3Jlc3MgdG93YXJkcyB2aXJ0dWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBmb3IgdGhlIHBvZW1zIG9mIEhvbWVyLCB3aGF0ZXZlciBpbiB0aGVtIHdhcyB0aG91Z2h0IGJ5IGhpbSB0byByb3VzZSBhbmQgc3RpbXVsYXRlIHRoZSBhY3Rpdml0aWVzIG9mIHRoZSBzb3VsIHdoaWNoIG1hZGUgZm9yIHZhbG91ciwgdG8gdGhpcyBoZSB3b3VsZCBhcHBseSBoaW1zZWxmLiBBbW9uZyBvdGhlciB3cml0aW5ncywgaG93ZXZlciwgaGUgd2FzIG1vc3Qgb2YgYWxsIGRldm90ZWQgdG8gdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UYWN0aWNzPC9xPiBvZiBFdmFuZ2VsdXMsIGFuZCB3YXMgZmFtaWxpYXIgd2l0aCB0aGUgaGlzdG9yaWVzIG9mIEFsZXhhbmRlciwgdGhpbmtpbmcgdGhhdCBsaXRlcmF0dXJlIHdhcyBjb25kdWNpdmUgdG8gYWN0aW9uLCB1bmxlc3MgaXQgd2VyZSBwcm9zZWN1dGVkIG1lcmVseSB0byB3aGlsZSBhd2F5IHRoZSB0aW1lIGFuZCBhZmZvcmQgdGhlbWVzIGZvciBmcnVpdGxlc3Mgc21hbGwgdGFsay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaGUgd291bGQgaWdub3JlIHRoZSBjaGFydHMgYW5kIGRpYWdyYW1zIGZvciB0aGUgaWxsdXN0cmF0aW9uIG9mIHRhY3RpY2FsIHByaW5jaXBsZXMsIGFuZCBnZXQgaGlzIHByb29mcyBhbmQgbWFrZSBoaXMgc3R1ZGllcyBvbiB0aGUgZ3JvdW5kIGl0c2VsZi4gVGhlIHdheXMgaW4gd2hpY2ggcGxhY2VzIHNsb3BlIHRvIG1lZXQgb25lIGFub3RoZXIsIGFuZCBsZXZlbCBwbGFpbnMgY29tZSB0byBhbiBhYnJ1cHQgZW5kLCBhbmQgYWxsIHRoZSB2aWNpc3NpdHVkZXMgYW5kIHNoYXBlcyBvZiBhIHBoYWxhbnggd2hlbiBpdCBpcyBlbG9uZ2F0ZWQgYW5kIGNvbnRyYWN0ZWQgYWdhaW4gaW4gdGhlIHZpY2luaXR5IG9mIHJhdmluZXMgb3IgZGl0Y2hlcyBvciBuYXJyb3cgZGVmaWxlcywgdGhlc2UgaGUgd291bGQgaW52ZXN0aWdhdGUgYnkgaGltc2VsZiBhcyBoZSB3YW5kZXJlZCBhYm91dCwgYW5kIGRpc2N1c3MgdGhlbSB3aXRoIGhpcyBjb21wYW5pb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3b3VsZCBzZWVtIHRoYXQgaGUgYnJvdWdodCBtb3JlIHplYWwgdGhhbiB3YXMgbmVjZXNzYXJ5IHRvIHRoZSBzdHVkeSBvZiBtaWxpdGFyeSBzY2llbmNlLCBzZXR0aW5nIGhpcyBhZmZlY3Rpb25zIG9uIHdhciBhcyBhZmZvcmRpbmcgYSBtb3N0IG1hbmlmb2xkIGJhc2lzIGZvciB0aGUgcHJhY3RpY2Ugb2YgdmlydHVlLCBhbmQgZGVzcGlzaW5nIGFzIHVuc3VjY2Vzc2Z1bCBtZW4gdGhvc2Ugd2hvIGxlZnQgaXQgdG8gb3RoZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBub3cgdGhpcnR5IHllYXJzIG9mIGFnZSwgd2hlbiBDbGVvbWVuZXMsIEtpbmcgb2YgdGhlIExhY2VkYWVtb25pYW5zLCBzdWRkZW5seSBhdHRhY2tlZCBNZWdhbG9wb2xpcyBieSBuaWdodCwgZm9yY2VkIHRoZSBndWFyZCwgbWFkZSBoaXMgd2F5IGludG8gdGhlIGNpdHksIGFuZCBvY2N1cGllZCB0aGUgbWFya2V0LXBsYWNlLiBQaGlsb3BvZW1lbiBjYW1lIHRvIHRoZSBoZWxwIG9mIHRoZSBjaXRpemVucywgYnV0IGhhZCBub3QgZm9yY2UgZW5vdWdoIHRvIGRyaXZlIHRoZSBlbmVteSBvdXQsIGFsdGhvdWdoIGhlIGZvdWdodCB3aXRoIHZpZ291ciBhbmQgZGFyaW5nLiBIZSBkaWQsIGhvd2V2ZXIsIHN0ZWFsIHRoZSBjaXRpemVucyBvdXQgb2YgdGhlIGNpdHksIGFzIGl0IHdlcmUsIGJ5IGF0dGFja2luZyB0aGVpciBwdXJzdWVycyBhbmQgZHJhd2luZyBDbGVvbWVuZXMgYWdhaW5zdCBoaW1zZWxmLCBzbyB0aGF0IHdpdGggdGhlIGdyZWF0ZXN0IGRpZmZpY3VsdHkgaGUgZ290IGF3YXkgbGFzdCBvZiBhbGwsIGFmdGVyIGxvc2luZyBoaXMgaG9yc2UgYW5kIHJlY2VpdmluZyBhIHdvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBDbGVvbWVuZXMgc2VudCB0byB0aGVtIGF0IE1lc3NlbmUsIHdoaXRoZXIgdGhleSBoYWQgZ29uZSwgYW5kIG9mZmVyZWQgdG8gZ2l2ZSB0aGVtIGJhY2sgdGhlaXIgY2l0eSB3aXRoIGl0cyB2YWx1YWJsZXMgYW5kIHRoZWlyIHRlcnJpdG9yeSwgUGhpbG9wb2VtZW4sIHNlZWluZyB0aGF0IHRoZSBjaXRpemVucyB3b3VsZCBiZSBnbGFkIHRvIGFjY2VwdCB0aGUgb2ZmZXIgYW5kIHdlcmUgZWFnZXIgdG8gZ28gYmFjayBob21lLCBvcHBvc2VkIGFuZCBkaXNzdWFkZWQgdGhlbSBmcm9tIGl0LCBzaG93aW5nIHRoZW0gdGhhdCBDbGVvbWVuZXMgd2FzIG5vdCBzbyBtdWNoIG9mZmVyaW5nIHRvIHJlc3RvcmUgdGhlaXIgY2l0eSBhcyBoZSB3YXMgdHJ5aW5nIHRvIHdpbiBvdmVyIHRvIGhpbXNlbGYgaXRzIGNpdGl6ZW5zLCB0aGF0IHNvIGhlIG1pZ2h0IGhhdmUgdGhlIGNpdHkgYWxzbyBtb3JlIHNlY3VyZWx5IGluIGhpcyBwb3NzZXNzaW9uOyBmb3IgaGUgd291bGQgbm90IGJlIGFibGUsIFBoaWxvcG9lbWVuIHNhaWQsIHRvIHJlbWFpbiB0aGVyZSBhbmQgZ3VhcmQgZW1wdHkgaG91c2VzIGFuZCB3YWxscywgYnV0IHRoZSBzb2xpdHVkZSB3b3VsZCBmb3JjZSBoaW0gdG8gYWJhbmRvbiB0aGVzZSBhbHNvLiBCeSB0aGlzIHNwZWVjaCBQaGlsb3BvZW1lbiBkaXZlcnRlZCB0aGUgY2l0aXplbnMgZnJvbSB0aGVpciBwdXJwb3NlLCBidXQgZnVybmlzaGVkIENsZW9tZW5lcyB3aXRoIGFuIGV4Y3VzZSBmb3IgZGV2YXN0YXRpbmcgYW5kIGRlbW9saXNoaW5nIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIGNpdHkgYW5kIG1hcmNoaW5nIG9mZiBsb2FkZWQgd2l0aCBib290eS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DbGVvbWVuZXM8L3RpdGxlPiwgeHhpdi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgbm93IHRoaXJ0eSB5ZWFycyBvZiBhZ2UsIHdoZW4gQ2xlb21lbmVzLCBLaW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgc3VkZGVubHkgYXR0YWNrZWQgTWVnYWxvcG9saXMgYnkgbmlnaHQsIGZvcmNlZCB0aGUgZ3VhcmQsIG1hZGUgaGlzIHdheSBpbnRvIHRoZSBjaXR5LCBhbmQgb2NjdXBpZWQgdGhlIG1hcmtldC1wbGFjZS4gUGhpbG9wb2VtZW4gY2FtZSB0byB0aGUgaGVscCBvZiB0aGUgY2l0aXplbnMsIGJ1dCBoYWQgbm90IGZvcmNlIGVub3VnaCB0byBkcml2ZSB0aGUgZW5lbXkgb3V0LCBhbHRob3VnaCBoZSBmb3VnaHQgd2l0aCB2aWdvdXIgYW5kIGRhcmluZy4gSGUgZGlkLCBob3dldmVyLCBzdGVhbCB0aGUgY2l0aXplbnMgb3V0IG9mIHRoZSBjaXR5LCBhcyBpdCB3ZXJlLCBieSBhdHRhY2tpbmcgdGhlaXIgcHVyc3VlcnMgYW5kIGRyYXdpbmcgQ2xlb21lbmVzIGFnYWluc3QgaGltc2VsZiwgc28gdGhhdCB3aXRoIHRoZSBncmVhdGVzdCBkaWZmaWN1bHR5IGhlIGdvdCBhd2F5IGxhc3Qgb2YgYWxsLCBhZnRlciBsb3NpbmcgaGlzIGhvcnNlIGFuZCByZWNlaXZpbmcgYSB3b3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIENsZW9tZW5lcyBzZW50IHRvIHRoZW0gYXQgTWVzc2VuZSwgd2hpdGhlciB0aGV5IGhhZCBnb25lLCBhbmQgb2ZmZXJlZCB0byBnaXZlIHRoZW0gYmFjayB0aGVpciBjaXR5IHdpdGggaXRzIHZhbHVhYmxlcyBhbmQgdGhlaXIgdGVycml0b3J5LCBQaGlsb3BvZW1lbiwgc2VlaW5nIHRoYXQgdGhlIGNpdGl6ZW5zIHdvdWxkIGJlIGdsYWQgdG8gYWNjZXB0IHRoZSBvZmZlciBhbmQgd2VyZSBlYWdlciB0byBnbyBiYWNrIGhvbWUsIG9wcG9zZWQgYW5kIGRpc3N1YWRlZCB0aGVtIGZyb20gaXQsIHNob3dpbmcgdGhlbSB0aGF0IENsZW9tZW5lcyB3YXMgbm90IHNvIG11Y2ggb2ZmZXJpbmcgdG8gcmVzdG9yZSB0aGVpciBjaXR5IGFzIGhlIHdhcyB0cnlpbmcgdG8gd2luIG92ZXIgdG8gaGltc2VsZiBpdHMgY2l0aXplbnMsIHRoYXQgc28gaGUgbWlnaHQgaGF2ZSB0aGUgY2l0eSBhbHNvIG1vcmUgc2VjdXJlbHkgaW4gaGlzIHBvc3Nlc3Npb247IGZvciBoZSB3b3VsZCBub3QgYmUgYWJsZSwgUGhpbG9wb2VtZW4gc2FpZCwgdG8gcmVtYWluIHRoZXJlIGFuZCBndWFyZCBlbXB0eSBob3VzZXMgYW5kIHdhbGxzLCBidXQgdGhlIHNvbGl0dWRlIHdvdWxkIGZvcmNlIGhpbSB0byBhYmFuZG9uIHRoZXNlIGFsc28uIEJ5IHRoaXMgc3BlZWNoIFBoaWxvcG9lbWVuIGRpdmVydGVkIHRoZSBjaXRpemVucyBmcm9tIHRoZWlyIHB1cnBvc2UsIGJ1dCBmdXJuaXNoZWQgQ2xlb21lbmVzIHdpdGggYW4gZXhjdXNlIGZvciBkZXZhc3RhdGluZyBhbmQgZGVtb2xpc2hpbmcgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgY2l0eSBhbmQgbWFyY2hpbmcgb2ZmIGxvYWRlZCB3aXRoIGJvb3R5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eGl2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eGl2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4aXYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlTb29uLCBob3dldmVyLCBBbnRpZ29udXMgdGhlIGtpbmcgbWFyY2hlZCB3aXRoIHRoZSBBY2hhZWFucyB0byBnaXZlIGFpZCBhZ2FpbnN0IENsZW9tZW5lcywgYW5kIGZpbmRpbmcgdGhhdCBoaXMgZW5lbXkgd2FzIG9jY3VweWluZyB0aGUgaGVpZ2h0cyBhbmQgcGFzc2VzIGFib3V0IFNlbGxhc2lhLCBoZSBkcmV3IHVwIGhpcyBmb3JjZXMgbmVhciBieSB3aXRoIHRoZSBwdXJwb3NlIG9mIGF0dGFja2luZyBoaW0gYW5kIGZvcmNpbmcgYSBwYXNzYWdlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCB4eHZpaS48L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDI4LjEiIHZhbGlkPSJ5ZXMiPnh4dmlpaS48L2JpYmw+ICBUaGUgYmF0dGxlIG9mIFNlbGxhc2lhIHdhcyBmb3VnaHQgaW4gMjIxIEIuQy48L25vdGU+IFBoaWxvcG9lbWVuIHdhcyBzdGF0aW9uZWQgYW1vbmcgdGhlIE1hY2Vkb25pYW4gY2F2YWxyeSB3aXRoIGhpcyBvd24gZmVsbG93LWNpdGl6ZW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjY2IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyBpaS4gNjYuIDc8L2JpYmw+LCBhIHRob3VzYW5kIEFjaGFlYW5zIGFuZCBhcyBtYW55IE1lZ2Fsb3BvbGl0YW5zIHdlcmUgc3RhdGlvbmVkIHdpdGggdGhlIE1hY2Vkb25pYW4gY2F2YWxyeS48L25vdGU+IGFuZCBoYWQgYXMgYSBzdXBwb3J0IHRoZSBJbGx5cmlhbnMsIGEgbGFyZ2UgYm9keSBvZiBnb29kIGZpZ2h0ZXJzLCB3aG8gY2xvc2VkIHVwIHRoZSBsaW5lIG9mIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBoYWQgYmVlbiBvcmRlcmVkIHRvIGxpZSBxdWlldGx5IGluIHJlc2VydmUgdW50aWwsIGZyb20gdGhlIG90aGVyIHdpbmcsIGEgc2lnbmFsIHNob3VsZCBiZSBtYWRlIGJ5IHRoZSBraW5nIHdpdGggYSBzY2FybGV0IGNvYXQgc3RyZXRjaGVkIHVwb24gYSBzcGVhci4gQnV0IHRoZSBJbGx5cmlhbnMsIGF0IHRoZSBjb21tYW5kIG9mIHRoZWlyIG9mZmljZXJzLCB0cmllZCB0byBmb3JjZSBiYWNrIHRoZSBMYWNlZGFlbW9uaWFucywgd2hpbGUgdGhlIEFjaGFlYW5zLCBhcyB0aGV5IGhhZCBiZWVuIG9yZGVyZWQgdG8gZG8sIGtlcHQgcXVpZXRseSB3YWl0aW5nIGF0IHRoZWlyIHBvc3QuIFRoZXJlZm9yZSBFdWNsZWlkYXMsIHRoZSBicm90aGVyIG9mIENsZW9tZW5lcywgd2hvIG5vdGljZWQgdGhlIGdhcCB0aHVzIG1hZGUgaW4gdGhlIGVuZW1pZXMnIGxpbmUsIHF1aWNrbHkgc2VudCByb3VuZCB0aGUgbW9zdCBhZ2lsZSBvZiBoaXMgbGlnaHQtYXJtZWQgdHJvb3BzLCB3aXRoIG9yZGVycyB0byBhdHRhY2sgdGhlIElsbHlyaWFucyBpbiB0aGUgcmVhciBhbmQgcm91dCB0aGVtLCBub3cgdGhhdCB0aGV5IGhhZCBsb3N0IHRvdWNoIHdpdGggdGhlIGNhdmFscnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVNvb24sIGhvd2V2ZXIsIEFudGlnb251cyB0aGUga2luZyBtYXJjaGVkIHdpdGggdGhlIEFjaGFlYW5zIHRvIGdpdmUgYWlkIGFnYWluc3QgQ2xlb21lbmVzLCBhbmQgZmluZGluZyB0aGF0IGhpcyBlbmVteSB3YXMgb2NjdXB5aW5nIHRoZSBoZWlnaHRzIGFuZCBwYXNzZXMgYWJvdXQgU2VsbGFzaWEsIGhlIGRyZXcgdXAgaGlzIGZvcmNlcyBuZWFyIGJ5IHdpdGggdGhlIHB1cnBvc2Ugb2YgYXR0YWNraW5nIGhpbSBhbmQgZm9yY2luZyBhIHBhc3NhZ2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4dmlpLjwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyOC4xIiB2YWxpZD0ieWVzIj54eHZpaWkuPC9iaWJsPiAgVGhlIGJhdHRsZSBvZiBTZWxsYXNpYSB3YXMgZm91Z2h0IGluIDIyMSBCLkMuPC9ub3RlPiBQaGlsb3BvZW1lbiB3YXMgc3RhdGlvbmVkIGFtb25nIHRoZSBNYWNlZG9uaWFuIGNhdmFscnkgd2l0aCBoaXMgb3duIGZlbGxvdy1jaXRpemVucyw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eHZpaS48L2JpYmw+IGFuZCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh2aWkuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDI4LjEiIHZhbGlkPSJ5ZXMiPnh4dmlpaS48L2JpYmw+ICBUaGUgYmF0dGxlIG9mIFNlbGxhc2lhIHdhcyBmb3VnaHQgaW4gMjIxIEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDIuNjYiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIGlpLiA2Ni4gNzwvYmlibD4sIGEgdGhvdXNhbmQgQWNoYWVhbnMgYW5kIGFzIG1hbnkgTWVnYWxvcG9saXRhbnMgd2VyZSBzdGF0aW9uZWQgd2l0aCB0aGUgTWFjZWRvbmlhbiBjYXZhbHJ5Ljwvbm90ZT4gYW5kIGhhZCBhcyBhIHN1cHBvcnQgdGhlIElsbHlyaWFucywgYSBsYXJnZSBib2R5IG9mIGdvb2QgZmlnaHRlcnMsIHdobyBjbG9zZWQgdXAgdGhlIGxpbmUgb2YgYmF0dGxlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi42NiIgdmFsaWQ9InllcyI+UG9seWJpdXMgaWkuIDY2LiA3PC9iaWJsPiwgYSB0aG91c2FuZCBBY2hhZWFucyBhbmQgYXMgbWFueSBNZWdhbG9wb2xpdGFucyB3ZXJlIHN0YXRpb25lZCB3aXRoIHRoZSBNYWNlZG9uaWFuIGNhdmFscnkuPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkIGJlZW4gb3JkZXJlZCB0byBsaWUgcXVpZXRseSBpbiByZXNlcnZlIHVudGlsLCBmcm9tIHRoZSBvdGhlciB3aW5nLCBhIHNpZ25hbCBzaG91bGQgYmUgbWFkZSBieSB0aGUga2luZyB3aXRoIGEgc2NhcmxldCBjb2F0IHN0cmV0Y2hlZCB1cG9uIGEgc3BlYXIuIEJ1dCB0aGUgSWxseXJpYW5zLCBhdCB0aGUgY29tbWFuZCBvZiB0aGVpciBvZmZpY2VycywgdHJpZWQgdG8gZm9yY2UgYmFjayB0aGUgTGFjZWRhZW1vbmlhbnMsIHdoaWxlIHRoZSBBY2hhZWFucywgYXMgdGhleSBoYWQgYmVlbiBvcmRlcmVkIHRvIGRvLCBrZXB0IHF1aWV0bHkgd2FpdGluZyBhdCB0aGVpciBwb3N0LiBUaGVyZWZvcmUgRXVjbGVpZGFzLCB0aGUgYnJvdGhlciBvZiBDbGVvbWVuZXMsIHdobyBub3RpY2VkIHRoZSBnYXAgdGh1cyBtYWRlIGluIHRoZSBlbmVtaWVzJyBsaW5lLCBxdWlja2x5IHNlbnQgcm91bmQgdGhlIG1vc3QgYWdpbGUgb2YgaGlzIGxpZ2h0LWFybWVkIHRyb29wcywgd2l0aCBvcmRlcnMgdG8gYXR0YWNrIHRoZSBJbGx5cmlhbnMgaW4gdGhlIHJlYXIgYW5kIHJvdXQgdGhlbSwgbm93IHRoYXQgdGhleSBoYWQgbG9zdCB0b3VjaCB3aXRoIHRoZSBjYXZhbHJ5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBvcmRlcnMgd2VyZSBjYXJyaWVkIG91dCwgYW5kIHRoZSBsaWdodC1hcm1lZCB0cm9vcHMgd2VyZSBkcml2aW5nIHRoZSBJbGx5cmlhbnMgYmVmb3JlIHRoZW0gaW4gY29uZnVzaW9uLCB3aGVuIFBoaWxvcG9lbWVuIHBlcmNlaXZlZCB0aGF0IGl0IHdvdWxkIGJlIG5vIGdyZWF0IHRhc2sgdG8gYXR0YWNrIHRoZSBsaWdodC1hcm1lZCB0cm9vcHMsIGFuZCB0aGF0IHRoZSBvY2Nhc2lvbiBwcm9tcHRlZCB0aGlzIHN0ZXAuIEF0IGZpcnN0IGhlIHBvaW50ZWQgdGhpcyBvdXQgdG8gdGhlIGtpbmcncyBvZmZpY2Vycy4gVGhlbiwgd2hlbiB0aGV5IHdlcmUgbm90IHRvIGJlIHBlcnN1YWRlZCBieSBoaW0sIGJ1dCBsb29rZWQgZG93biB1cG9uIGhpbSBhcyBhIG1hZG1hbiAoc2luY2UgaGlzIHJlcHV0YXRpb24gd2FzIG5vdCB5ZXQgZ3JlYXQgZW5vdWdoIHRvIGp1c3RpZnkgaGlzIGJlaW5nIGVudHJ1c3RlZCB3aXRoIHNvIGltcG9ydGFudCBhIG1hbm9ldXZyZSksIGhlIHRvb2sgbWF0dGVycyBpbnRvIGhpcyBvd24gaGFuZHMsIGZvcm1lZCBoaXMgZmVsbG93LWNpdGl6ZW5zIGludG8gYSB3ZWRnZSwgYW5kIGNoYXJnZWQgdXBvbiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IHRoZSBsaWdodC1hcm1lZCB0cm9vcHMgd2VyZSB0aHJvd24gaW50byBjb25mdXNpb24sIHRoZW4gcHV0IHRvIHJvdXQgd2l0aCBncmVhdCBzbGF1Z2h0ZXIuIEFuZCBub3cgUGhpbG9wb2VtZW4sIHdpc2hpbmcgdG8gZW5jb3VyYWdlIHN0aWxsIGZ1cnRoZXIgdGhlIGtpbmcncyB0cm9vcHMgYW5kIGJyaW5nIHRoZW0gc3dpZnRseSB1cG9uIHRoZSBlbmVteSB0aHVzIHRocm93biBpbnRvIGRpc29yZGVyLCBxdWl0dGVkIGhpcyBob3JzZSwgYW5kIHdpdGggZ3JpZXZvdXMgZGlmZmljdWx0eSBmb3JjZWQgaGlzIHdheSBhbG9uZyBvbiBmb290LCBpbiBoaXMgaG9yc2VtYW4ncyBicmVhc3RwbGF0ZSBhbmQgaGVhdnkgZXF1aXBtZW50LCB0b3dhcmRzIGdyb3VuZCB0aGF0IHdhcyBpcnJlZ3VsYXIgYW5kIGZ1bGwgb2Ygd2F0ZXItY291cnNlcyBhbmQgcmF2aW5lcy4gSGVyZSBoZSBoYWQgYm90aCBoaXMgdGhpZ2hzIHBpZXJjZWQgdGhyb3VnaCBieSBhIHRob25nZWQgamF2ZWxpbi4gVGhlIHdvdW5kIHdhcyBub3QgZmF0YWwsIHRob3VnaCBzZXZlcmUsIGFuZCB0aGUgaGVhZCBvZiB0aGUgd2VhcG9uIGNhbWUgb3V0IG9uIHRoZSBvdGhlciBzaWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBmaXJzdCwgdGhlbiwgaGUgd2FzIGhlbGQgZmFzdCBhcyBieSBhIGZldHRlciwgYW5kIHdhcyBhbHRvZ2V0aGVyIGhlbHBsZXNzOyBmb3IgdGhlIGZhc3RlbmluZyBvZiB0aGUgdGhvbmcgbWFkZSBpdCBkaWZmaWN1bHQgdG8gZHJhdyB0aGUgd2VhcG9uIGJhY2sgdGhyb3VnaCB0aGUgd291bmQuIEJ1dCBzaW5jZSB0aG9zZSBhYm91dCBoaW0gaGVzaXRhdGVkIHRvIGF0dGVtcHQgdGhpcywgYW5kIHNpbmNlLCBub3cgdGhhdCB0aGUgYmF0dGxlIHdhcyBhdCBpdHMgaG90dGVzdCwgdGhlIGFyZG91ciBvZiBoaXMgYW1iaXRpb24gbWFkZSBoaW0gaW1wYXRpZW50IHRvIGpvaW4gaW4gdGhlIHN0cnVnZ2xlLCBieSBtb3ZpbmcgaGlzIGxlZ3MgYmFja3dhcmQgYW5kIGZvcndhcmQgaGUgYnJva2UgdGhlIHNoYWZ0IG9mIHRoZSB3ZWFwb24gaW4gdHdvIGluIHRoZSBtaWRkbGUsIGFuZCB0aGVuIG9yZGVyZWQgZWFjaCBmcmFnbWVudCB0byBiZSBkcmF3biBvdXQgc2VwYXJhdGVseS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBzZXQgZnJlZSwgaGUgZHJldyBoaXMgc3dvcmQgYW5kIG1hZGUgaGlzIHdheSB0aHJvdWdoIHRoZSBmcm9udCByYW5rcyBhZ2FpbnN0IHRoZSBlbmVteSwgdGhlcmVieSBncmVhdGx5IGFuaW1hdGluZyB0aGUgY29tYmF0YW50cyBhbmQgaW5zcGlyaW5nIHRoZW0gd2l0aCBhIGRlc2lyZSB0byBlbXVsYXRlIGhpcyB2YWxvdXIuIEFmdGVyIGhpcyB2aWN0b3J5LCB0aGVyZWZvcmUsIEFudGlnb251cyBwdXQgaGlzIE1hY2Vkb25pYW5zIHRvIHRoZSBxdWVzdGlvbiwgYW5kIGFza2VkIHRoZW0gd2h5LCB3aXRob3V0IGhpcyBvcmRlcnMsIHRoZXkgaGFkIGJyb3VnaHQgdGhlIGNhdmFscnkgaW50byBhY3Rpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGVmZW5kZWQgdGhlbXNlbHZlcyBieSBzYXlpbmcgdGhhdCB0aGV5IGhhZCBiZWVuIGZvcmNlZCBhZ2FpbnN0IHRoZWlyIHdpbGwgdG8gYXR0YWNrIHRoZSBlbmVteSwgYmVjYXVzZSBhIHlvdW5nIG1hbiBvZiBNZWdhbG9wb2xpcyBoYWQgZmlyc3QgbGVkIGEgY2hhcmdlIGFnYWluc3QgdGhlbS4gQXQgdGhpcywgQW50aWdvbnVzIGdhdmUgYSBsYXVnaCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCB0aGVuLCB0aGF0IHlvdW5nIG1hbiBiZWhhdmVkIGxpa2UgYSBncmVhdCBjb21tYW5kZXIuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG9yZGVycyB3ZXJlIGNhcnJpZWQgb3V0LCBhbmQgdGhlIGxpZ2h0LWFybWVkIHRyb29wcyB3ZXJlIGRyaXZpbmcgdGhlIElsbHlyaWFucyBiZWZvcmUgdGhlbSBpbiBjb25mdXNpb24sIHdoZW4gUGhpbG9wb2VtZW4gcGVyY2VpdmVkIHRoYXQgaXQgd291bGQgYmUgbm8gZ3JlYXQgdGFzayB0byBhdHRhY2sgdGhlIGxpZ2h0LWFybWVkIHRyb29wcywgYW5kIHRoYXQgdGhlIG9jY2FzaW9uIHByb21wdGVkIHRoaXMgc3RlcC4gQXQgZmlyc3QgaGUgcG9pbnRlZCB0aGlzIG91dCB0byB0aGUga2luZydzIG9mZmljZXJzLiBUaGVuLCB3aGVuIHRoZXkgd2VyZSBub3QgdG8gYmUgcGVyc3VhZGVkIGJ5IGhpbSwgYnV0IGxvb2tlZCBkb3duIHVwb24gaGltIGFzIGEgbWFkbWFuIChzaW5jZSBoaXMgcmVwdXRhdGlvbiB3YXMgbm90IHlldCBncmVhdCBlbm91Z2ggdG8ganVzdGlmeSBoaXMgYmVpbmcgZW50cnVzdGVkIHdpdGggc28gaW1wb3J0YW50IGEgbWFub2V1dnJlKSwgaGUgdG9vayBtYXR0ZXJzIGludG8gaGlzIG93biBoYW5kcywgZm9ybWVkIGhpcyBmZWxsb3ctY2l0aXplbnMgaW50byBhIHdlZGdlLCBhbmQgY2hhcmdlZCB1cG9uIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IHRoZSBsaWdodC1hcm1lZCB0cm9vcHMgd2VyZSB0aHJvd24gaW50byBjb25mdXNpb24sIHRoZW4gcHV0IHRvIHJvdXQgd2l0aCBncmVhdCBzbGF1Z2h0ZXIuIEFuZCBub3cgUGhpbG9wb2VtZW4sIHdpc2hpbmcgdG8gZW5jb3VyYWdlIHN0aWxsIGZ1cnRoZXIgdGhlIGtpbmcncyB0cm9vcHMgYW5kIGJyaW5nIHRoZW0gc3dpZnRseSB1cG9uIHRoZSBlbmVteSB0aHVzIHRocm93biBpbnRvIGRpc29yZGVyLCBxdWl0dGVkIGhpcyBob3JzZSwgYW5kIHdpdGggZ3JpZXZvdXMgZGlmZmljdWx0eSBmb3JjZWQgaGlzIHdheSBhbG9uZyBvbiBmb290LCBpbiBoaXMgaG9yc2VtYW4ncyBicmVhc3RwbGF0ZSBhbmQgaGVhdnkgZXF1aXBtZW50LCB0b3dhcmRzIGdyb3VuZCB0aGF0IHdhcyBpcnJlZ3VsYXIgYW5kIGZ1bGwgb2Ygd2F0ZXItY291cnNlcyBhbmQgcmF2aW5lcy4gSGVyZSBoZSBoYWQgYm90aCBoaXMgdGhpZ2hzIHBpZXJjZWQgdGhyb3VnaCBieSBhIHRob25nZWQgamF2ZWxpbi4gVGhlIHdvdW5kIHdhcyBub3QgZmF0YWwsIHRob3VnaCBzZXZlcmUsIGFuZCB0aGUgaGVhZCBvZiB0aGUgd2VhcG9uIGNhbWUgb3V0IG9uIHRoZSBvdGhlciBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBoZSB3YXMgaGVsZCBmYXN0IGFzIGJ5IGEgZmV0dGVyLCBhbmQgd2FzIGFsdG9nZXRoZXIgaGVscGxlc3M7IGZvciB0aGUgZmFzdGVuaW5nIG9mIHRoZSB0aG9uZyBtYWRlIGl0IGRpZmZpY3VsdCB0byBkcmF3IHRoZSB3ZWFwb24gYmFjayB0aHJvdWdoIHRoZSB3b3VuZC4gQnV0IHNpbmNlIHRob3NlIGFib3V0IGhpbSBoZXNpdGF0ZWQgdG8gYXR0ZW1wdCB0aGlzLCBhbmQgc2luY2UsIG5vdyB0aGF0IHRoZSBiYXR0bGUgd2FzIGF0IGl0cyBob3R0ZXN0LCB0aGUgYXJkb3VyIG9mIGhpcyBhbWJpdGlvbiBtYWRlIGhpbSBpbXBhdGllbnQgdG8gam9pbiBpbiB0aGUgc3RydWdnbGUsIGJ5IG1vdmluZyBoaXMgbGVncyBiYWNrd2FyZCBhbmQgZm9yd2FyZCBoZSBicm9rZSB0aGUgc2hhZnQgb2YgdGhlIHdlYXBvbiBpbiB0d28gaW4gdGhlIG1pZGRsZSwgYW5kIHRoZW4gb3JkZXJlZCBlYWNoIGZyYWdtZW50IHRvIGJlIGRyYXduIG91dCBzZXBhcmF0ZWx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgc2V0IGZyZWUsIGhlIGRyZXcgaGlzIHN3b3JkIGFuZCBtYWRlIGhpcyB3YXkgdGhyb3VnaCB0aGUgZnJvbnQgcmFua3MgYWdhaW5zdCB0aGUgZW5lbXksIHRoZXJlYnkgZ3JlYXRseSBhbmltYXRpbmcgdGhlIGNvbWJhdGFudHMgYW5kIGluc3BpcmluZyB0aGVtIHdpdGggYSBkZXNpcmUgdG8gZW11bGF0ZSBoaXMgdmFsb3VyLiBBZnRlciBoaXMgdmljdG9yeSwgdGhlcmVmb3JlLCBBbnRpZ29udXMgcHV0IGhpcyBNYWNlZG9uaWFucyB0byB0aGUgcXVlc3Rpb24sIGFuZCBhc2tlZCB0aGVtIHdoeSwgd2l0aG91dCBoaXMgb3JkZXJzLCB0aGV5IGhhZCBicm91Z2h0IHRoZSBjYXZhbHJ5IGludG8gYWN0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGVmZW5kZWQgdGhlbXNlbHZlcyBieSBzYXlpbmcgdGhhdCB0aGV5IGhhZCBiZWVuIGZvcmNlZCBhZ2FpbnN0IHRoZWlyIHdpbGwgdG8gYXR0YWNrIHRoZSBlbmVteSwgYmVjYXVzZSBhIHlvdW5nIG1hbiBvZiBNZWdhbG9wb2xpcyBoYWQgZmlyc3QgbGVkIGEgY2hhcmdlIGFnYWluc3QgdGhlbS4gQXQgdGhpcywgQW50aWdvbnVzIGdhdmUgYSBsYXVnaCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sIHRoYXQgeW91bmcgbWFuIGJlaGF2ZWQgbGlrZSBhIGdyZWF0IGNvbW1hbmRlci48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBuYXR1cmFsbHkgYnJvdWdodCBQaGlsb3BvZW1lbiBpbnRvIGhpZ2ggcmVwdXRlLiBBbnRpZ29udXMgd2FzIGVhZ2VyIHRoYXQgaGUgc2hvdWxkIHRha2Ugc2VydmljZSB1bmRlciBoaW0sIGFuZCBvZmZlcmVkIGhpbSBjb21tYW5kIGFuZCBwYXkuIFRoZXNlIFBoaWxvcG9lbWVuIGRlY2xpbmVkLCBjaGllZmx5IGJlY2F1c2UgaGUgd2VsbCBrbmV3IHRoYXQgaXQgd2FzIG5hdHVyYWxseSB1bnBsZWFzYW50IGFuZCBoYXJkIGZvciBoaW0gdG8gYmUgdW5kZXIgYW5vdGhlciBtYW4ncyBvcmRlcnMuIE5vdCB3aXNoaW5nLCBob3dldmVyLCB0byBiZSBpbmFjdGl2ZSBhbmQgaWRsZSwgZm9yIHRoZSBzYWtlIG9mIHRyYWluaW5nIGFuZCBwcmFjdGljZSBpbiB3YXIgaGUgc2FpbGVkIHRvIENyZXRlIGluIHNlYXJjaCBvZiBtaWxpdGFyeSBzZXJ2aWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBDcmV0ZSBoZSBwcmFjdGlzZWQgaGltc2VsZiBmb3IgYSBsb25nIHRpbWUgYW1vbmcgbWVuIHdobyB3ZXJlIG5vdCBvbmx5IHdhcmxpa2UgYW5kIHZlcnNlZCBpbiBtYW55IGtpbmRzIG9mIHdhcmZhcmUsIGJ1dCBhbHNvIHN0aWxsIG1vZGVyYXRlIGFuZCByZXN0cmFpbmVkIGluIHRoZWlyIHdheXMgb2YgbGl2aW5nLCBhbmQgaGUgY2FtZSBiYWNrIHRvIHRoZSBBY2hhZWFucyB3aXRoIHN1Y2ggZGlzdGluY3Rpb24gdGhhdCB0aGV5IGF0IG9uY2UgbWFkZSBoaW0gY29tbWFuZGVyIG9mIHRoZWlyIGNhdmFscnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDIwOS0yMDggQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgZm91bmQgdGhhdCB0aGUgaG9yc2VtZW4gd2hvbSBoZSB3YXMgdG8gY29tbWFuZCB1c2VkIHdvcnRobGVzcyBhbmltYWxzIGFjcXVpcmVkIGF0IHJhbmRvbSwgd2hlbmV2ZXIgYSBjYW1wYWlnbiB3YXMgdG8gYmUgdW5kZXJ0YWtlbjsgdGhhdCB0aGV5IHNoaXJrZWQgbW9zdCBjYW1wYWlnbnMgdGhlbXNlbHZlcywgYW5kIHNlbnQgb3RoZXJzIG91dCBpbiB0aGVpciBwbGFjZXM7IHRoYXQgdGhleSB3ZXJlIGFsbCBjaGFyYWN0ZXJpemVkIGJ5IGEgc2hvY2tpbmcgbGFjayBvZiBleHBlcmllbmNlLCB0b2dldGhlciB3aXRoIGl0cyByZXN1bHRhbnQgY293YXJkaWNlOyBhbmQgdGhhdCB0aGVpciBjb21tYW5kZXJzIGFsd2F5cyBvdmVybG9va2VkIHRoZXNlIHRoaW5ncyBiZWNhdXNlIHRoZSBrbmlnaHRzIGhhZCB0aGUgZ3JlYXRlc3QgcG93ZXIgYW5kIGluZmx1ZW5jZSBhbW9uZyB0aGUgQWNoYWVhbnMgYW5kIHRoZSBjaGllZiB2b2ljZSBpbiB0aGUgYXNzaWdubWVudCBvZiByZXdhcmRzIGFuZCBwdW5pc2htZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbG9wb2VtZW4sIGhvd2V2ZXIsIGRpZCBub3QgeWllbGQgb3IgZ2l2ZSB3YXkgdG8gdGhlbS4gSGUgd2VudCByb3VuZCB0byB0aGUgZGlmZmVyZW50IGNpdGllcyBhbmQgcm91c2VkIHRoZSBzcGlyaXQgb2YgYW1iaXRpb24gaW4gZWFjaCB5b3VuZyBtYW4gaW5kaXZpZHVhbGx5LCBwdW5pc2hlZCB0aG9zZSB3aG8gbmVlZGVkIGNvbXB1bHNpb24sIGludHJvZHVjZWQgZHJpbGxzLCBwYXJhZGVzLCBhbmQgY29tcGV0aXRpdmUgY29udGVzdHMgaW4gcGxhY2VzIHdoZXJlIHRoZXJlIHdvdWxkIGJlIGxhcmdlIGJvZGllcyBvZiBzcGVjdGF0b3JzIGFuZCB0aHVzIGluIGEgc2hvcnQgdGltZSBpbnNwaXJlZCB0aGVtIGFsbCB3aXRoIGFuIGFzdG9uaXNoaW5nIHZpZ291ciBhbmQgemVhbCwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kLCB3aGF0IGlzIG9mIHRoZSBncmVhdGVzdCBpbXBvcnRhbmNlIGluIHRhY3RpY3MsIHJlbmRlcmVkIHRoZW0gYWdpbGUgYW5kIHN3aWZ0IGluIHdoZWVsaW5nIGFuZCBkZXBsb3lpbmcgYnkgc3F1YWRyb25zLCBhbmQgaW4gd2hlZWxpbmcgYW5kIHR1cm5pbmcgYnkgc2luZ2xlIHRyb29wZXIsIG1ha2luZyB0aGUgZGV4dGVyaXR5IHNob3duIGJ5IHRoZSB3aG9sZSBtYXNzIGluIGl0cyBldm9sdXRpb25zIHRvIGJlIGxpa2UgdGhhdCBvZiBhIHNpbmdsZSBwZXJzb24gbW92ZWQgYnkgYW4gaW1wdWxzZSBmcm9tIHdpdGhpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG5hdHVyYWxseSBicm91Z2h0IFBoaWxvcG9lbWVuIGludG8gaGlnaCByZXB1dGUuIEFudGlnb251cyB3YXMgZWFnZXIgdGhhdCBoZSBzaG91bGQgdGFrZSBzZXJ2aWNlIHVuZGVyIGhpbSwgYW5kIG9mZmVyZWQgaGltIGNvbW1hbmQgYW5kIHBheS4gVGhlc2UgUGhpbG9wb2VtZW4gZGVjbGluZWQsIGNoaWVmbHkgYmVjYXVzZSBoZSB3ZWxsIGtuZXcgdGhhdCBpdCB3YXMgbmF0dXJhbGx5IHVucGxlYXNhbnQgYW5kIGhhcmQgZm9yIGhpbSB0byBiZSB1bmRlciBhbm90aGVyIG1hbidzIG9yZGVycy4gTm90IHdpc2hpbmcsIGhvd2V2ZXIsIHRvIGJlIGluYWN0aXZlIGFuZCBpZGxlLCBmb3IgdGhlIHNha2Ugb2YgdHJhaW5pbmcgYW5kIHByYWN0aWNlIGluIHdhciBoZSBzYWlsZWQgdG8gQ3JldGUgaW4gc2VhcmNoIG9mIG1pbGl0YXJ5IHNlcnZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIENyZXRlIGhlIHByYWN0aXNlZCBoaW1zZWxmIGZvciBhIGxvbmcgdGltZSBhbW9uZyBtZW4gd2hvIHdlcmUgbm90IG9ubHkgd2FybGlrZSBhbmQgdmVyc2VkIGluIG1hbnkga2luZHMgb2Ygd2FyZmFyZSwgYnV0IGFsc28gc3RpbGwgbW9kZXJhdGUgYW5kIHJlc3RyYWluZWQgaW4gdGhlaXIgd2F5cyBvZiBsaXZpbmcsIGFuZCBoZSBjYW1lIGJhY2sgdG8gdGhlIEFjaGFlYW5zIHdpdGggc3VjaCBkaXN0aW5jdGlvbiB0aGF0IHRoZXkgYXQgb25jZSBtYWRlIGhpbSBjb21tYW5kZXIgb2YgdGhlaXIgY2F2YWxyeS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAyMDktMjA4IEIuQy48L25vdGU+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBmb3VuZCB0aGF0IHRoZSBob3JzZW1lbiB3aG9tIGhlIHdhcyB0byBjb21tYW5kIHVzZWQgd29ydGhsZXNzIGFuaW1hbHMgYWNxdWlyZWQgYXQgcmFuZG9tLCB3aGVuZXZlciBhIGNhbXBhaWduIHdhcyB0byBiZSB1bmRlcnRha2VuOyB0aGF0IHRoZXkgc2hpcmtlZCBtb3N0IGNhbXBhaWducyB0aGVtc2VsdmVzLCBhbmQgc2VudCBvdGhlcnMgb3V0IGluIHRoZWlyIHBsYWNlczsgdGhhdCB0aGV5IHdlcmUgYWxsIGNoYXJhY3Rlcml6ZWQgYnkgYSBzaG9ja2luZyBsYWNrIG9mIGV4cGVyaWVuY2UsIHRvZ2V0aGVyIHdpdGggaXRzIHJlc3VsdGFudCBjb3dhcmRpY2U7IGFuZCB0aGF0IHRoZWlyIGNvbW1hbmRlcnMgYWx3YXlzIG92ZXJsb29rZWQgdGhlc2UgdGhpbmdzIGJlY2F1c2UgdGhlIGtuaWdodHMgaGFkIHRoZSBncmVhdGVzdCBwb3dlciBhbmQgaW5mbHVlbmNlIGFtb25nIHRoZSBBY2hhZWFucyBhbmQgdGhlIGNoaWVmIHZvaWNlIGluIHRoZSBhc3NpZ25tZW50IG9mIHJld2FyZHMgYW5kIHB1bmlzaG1lbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxvcG9lbWVuLCBob3dldmVyLCBkaWQgbm90IHlpZWxkIG9yIGdpdmUgd2F5IHRvIHRoZW0uIEhlIHdlbnQgcm91bmQgdG8gdGhlIGRpZmZlcmVudCBjaXRpZXMgYW5kIHJvdXNlZCB0aGUgc3Bpcml0IG9mIGFtYml0aW9uIGluIGVhY2ggeW91bmcgbWFuIGluZGl2aWR1YWxseSwgcHVuaXNoZWQgdGhvc2Ugd2hvIG5lZWRlZCBjb21wdWxzaW9uLCBpbnRyb2R1Y2VkIGRyaWxscywgcGFyYWRlcywgYW5kIGNvbXBldGl0aXZlIGNvbnRlc3RzIGluIHBsYWNlcyB3aGVyZSB0aGVyZSB3b3VsZCBiZSBsYXJnZSBib2RpZXMgb2Ygc3BlY3RhdG9ycyBhbmQgdGh1cyBpbiBhIHNob3J0IHRpbWUgaW5zcGlyZWQgdGhlbSBhbGwgd2l0aCBhbiBhc3RvbmlzaGluZyB2aWdvdXIgYW5kIHplYWwsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgd2hhdCBpcyBvZiB0aGUgZ3JlYXRlc3QgaW1wb3J0YW5jZSBpbiB0YWN0aWNzLCByZW5kZXJlZCB0aGVtIGFnaWxlIGFuZCBzd2lmdCBpbiB3aGVlbGluZyBhbmQgZGVwbG95aW5nIGJ5IHNxdWFkcm9ucywgYW5kIGluIHdoZWVsaW5nIGFuZCB0dXJuaW5nIGJ5IHNpbmdsZSB0cm9vcGVyLCBtYWtpbmcgdGhlIGRleHRlcml0eSBzaG93biBieSB0aGUgd2hvbGUgbWFzcyBpbiBpdHMgZXZvbHV0aW9ucyB0byBiZSBsaWtlIHRoYXQgb2YgYSBzaW5nbGUgcGVyc29uIG1vdmVkIGJ5IGFuIGltcHVsc2UgZnJvbSB3aXRoaW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpbiB0aGUgZmllcmNlIGJhdHRsZSB3aGljaCB0aGV5IGZvdWdodCBhdCB0aGUgcml2ZXIgTGFyaXNzdXMgYWdhaW5zdCBBZXRvbGlhbnMgYW5kIEVsZWlhbnMsIHRoZSBjb21tYW5kZXIgb2YgdGhlIEVsZWlhbiBjYXZhbHJ5LCBEYW1vcGhhbnR1cywgcm9kZSBvdXQgZnJvbSB0aGUgcmFua3MgYW5kIGNoYXJnZWQgdXBvbiBQaGlsb3BvZW1lbi4gQnV0IFBoaWxvcG9lbWVuIHJlY2VpdmVkIGhpcyBvbnNldCwgd2FzIGZpcnN0IHRvIGRyaXZlIGhvbWUgYSBzcGVhci10aHJ1c3QsIGFuZCB0aHJldyBEYW1vcGhhbnR1cyB0byB0aGUgZ3JvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVpciBsZWFkZXIgZmFsbGVuLCB0aGUgZW5lbXkgYXQgb25jZSB0b29rIHRvIGZsaWdodCwgYW5kIFBoaWxvcG9lbWVuIHdhcyBpbiBoaWdoIHJlbm93biwgYXMgb25lIHdobyB5aWVsZGVkIHRvIG5vbmUgb2YgdGhlIHlvdW5nIG1lbiBpbiBwZXJzb25hbCBwcm93ZXNzLCBhbmQgdG8gbm9uZSBvZiB0aGUgZWxkZXIgbWVuIGluIHNhZ2FjaXR5LCBidXQgYm90aCBpbiBmaWdodGluZyBhbmQgaW4gY29tbWFuZGluZyB3YXMgbW9zdCBjYXBhYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpbiB0aGUgZmllcmNlIGJhdHRsZSB3aGljaCB0aGV5IGZvdWdodCBhdCB0aGUgcml2ZXIgTGFyaXNzdXMgYWdhaW5zdCBBZXRvbGlhbnMgYW5kIEVsZWlhbnMsIHRoZSBjb21tYW5kZXIgb2YgdGhlIEVsZWlhbiBjYXZhbHJ5LCBEYW1vcGhhbnR1cywgcm9kZSBvdXQgZnJvbSB0aGUgcmFua3MgYW5kIGNoYXJnZWQgdXBvbiBQaGlsb3BvZW1lbi4gQnV0IFBoaWxvcG9lbWVuIHJlY2VpdmVkIGhpcyBvbnNldCwgd2FzIGZpcnN0IHRvIGRyaXZlIGhvbWUgYSBzcGVhci10aHJ1c3QsIGFuZCB0aHJldyBEYW1vcGhhbnR1cyB0byB0aGUgZ3JvdW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGxlYWRlciBmYWxsZW4sIHRoZSBlbmVteSBhdCBvbmNlIHRvb2sgdG8gZmxpZ2h0LCBhbmQgUGhpbG9wb2VtZW4gd2FzIGluIGhpZ2ggcmVub3duLCBhcyBvbmUgd2hvIHlpZWxkZWQgdG8gbm9uZSBvZiB0aGUgeW91bmcgbWVuIGluIHBlcnNvbmFsIHByb3dlc3MsIGFuZCB0byBub25lIG9mIHRoZSBlbGRlciBtZW4gaW4gc2FnYWNpdHksIGJ1dCBib3RoIGluIGZpZ2h0aW5nIGFuZCBpbiBjb21tYW5kaW5nIHdhcyBtb3N0IGNhcGFibGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbW1vbndlYWx0aCBvZiB0aGUgQWNoYWVhbnMgd2FzIGZpcnN0IHJhaXNlZCB0byBkaWduaXR5IGFuZCBwb3dlciBieSBBcmF0dXMsIHdobyBjb25zb2xpZGF0ZWQgaXQgd2hlbiBpdCB3YXMgZmVlYmxlIGFuZCBkaXNydXB0ZWQsIGFuZCBpbmF1Z3VyYXRlZCBhbiBIZWxsZW5pYyBhbmQgaHVtYW5lIGZvcm0gb2YgZ292ZXJubWVudC4gVGhlbiwganVzdCBhcyBpbiBydW5uaW5nIHdhdGVycywgYWZ0ZXIgYSBmZXcgc21hbGwgcGFydGljbGVzIGhhdmUgYmVndW4gdG8gdGFrZSBhIGZpeGVkIHBvc2l0aW9uLCBvdGhlcnMgcHJlc2VudGx5IGFyZSBzd2VwdCBhZ2FpbnN0IHRoZSBmaXJzdCwgYWRoZXJlIGFuZCBjbGluZyB0byB0aGVtLCBhbmQgdGh1cyBmb3JtIGEgZml4ZWQgYW5kIHNvbGlkIG1hc3MgYnkgbXV0dWFsIHN1cHBvcnQsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoZSBBY2hhZWFucywgYXQgYSB0aW1lIHdoZW4gR3JlZWNlIHdhcyB3ZWFrIGFuZCBlYXNpbHkgZGlzc29sdmVkIGFuZCBkcmlmdGluZyBhbG9uZyBieSBpbmRpdmlkdWFsIGNpdGllcywgZmlyc3QgdW5pdGVkIHRoZW1zZWx2ZXMgdG9nZXRoZXIsIGFuZCB0aGVuLCBieSByZWNlaXZpbmcgaW50byB0aGVpciBudW1iZXIgc29tZSBvZiB0aGUgY2l0aWVzIHJvdW5kIGFib3V0IHdoaWNoIHRoZXkgaGFkIGFpZGVkIGFuZCBhc3Npc3RlZCBpbiBzaGFraW5nIG9mZiB0aGVpciB0eXJhbnRzLCBhbmQgYnkgdW5pdGluZyBvdGhlcnMgd2l0aCB0aGVtc2VsdmVzIGluIGEgaGFybW9uaW91cyBjaXZpbCBwb2xpdHksIHRoZXkgcHVycG9zZWQgdG8gZm9ybSB0aGUgUGVsb3Bvbm5lc3VzIGludG8gYSBzaW5nbGUgcG9saXRpY2FsIGJvZHkgYW5kIG9uZSBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgbG9uZywgaG93ZXZlciwgYXMgQXJhdHVzIGxpdmVkLCB0aGV5IHdlcmUgZGVwZW5kZW50IGZvciB0aGUgbW9zdCBwYXJ0IG9uIE1hY2Vkb25pYW4gYXJtaWVzLCBwYXlpbmcgY291cnQgdG8gUHRvbGVteSwgYW5kIHRoZW4gYWdhaW4gdG8gQW50aWdvbnVzIGFuZCBQaGlsaXAsIGFsbCBvZiB3aG9tIGJ1c2llZCB0aGVtc2VsdmVzIGluIHRoZSBhZmZhaXJzIG9mIEdyZWVjZS4gQnV0IHdoZW4gUGhpbG9wb2VtZW4gd2FzIGFkdmFuY2VkIHRvIGxlYWRlcnNoaXAgYW1vbmcgdGhlbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMDcgQi5DLjsgQXJhdHVzIGhhZCBkaWVkIGluIDIxMy48L25vdGU+IHRoZXkgd2VyZSBhdCBsYXN0IGNhcGFibGUgb2YgY29udGVuZGluZyBhbG9uZSB3aXRoIHRoZWlyIG1vc3QgcG93ZXJmdWwgbmVpZ2hib3VycywgYW5kIGNlYXNlZCB0byByZWx5IHVwb24gZm9yZWlnbiBwcm90ZWN0b3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMsIGluZGVlZCwgd2hvIHdhcyB0aG91Z2h0IHRvIGJlIHRvbyBzbHVnZ2lzaCBmb3Igd2FybGlrZSBjb250ZXN0cywgYWNjb21wbGlzaGVkIG1vc3Qgb2YgaGlzIHVuZGVydGFraW5ncyBieSBjb25mZXJlbmNlLCB1cmJhbml0eSwgYW5kIHJveWFsIGZyaWVuZHNoaXBzLCBhcyBJIGhhdmUgd3JpdHRlbiBpbiBoaXMgTGlmZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QXJhdHVzPC90aXRsZT4sIHguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZXJlYXMgUGhpbG9wb2VtZW4sIHdobyB3YXMgYSBnb29kIHdhcnJpb3IgYW5kIGVmZmVjdGl2ZSB3aXRoIGhpcyB3ZWFwb25zLCBiZXNpZGVzIHByb3ZpbmcgaGltc2VsZiBmb3J0dW5hdGUgYW5kIHN1Y2Nlc3NmdWwgaW4gaGlzIHZlcnkgZmlyc3QgYmF0dGxlcywgaW5jcmVhc2VkIG5vdCBvbmx5IHRoZSBwb3dlciBidXQgYWxzbyB0aGUgY291cmFnZSBvZiB0aGUgQWNoYWVhbnMsIHdobyB3ZXJlIGFjY3VzdG9tZWQgdG8gYmUgdmljdG9yaW91cyB1bmRlciBoaW0gYW5kIHRvIHdpbiBzdWNjZXNzIGluIG1vc3Qgb2YgdGhlaXIgY29udGVzdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29tbW9ud2VhbHRoIG9mIHRoZSBBY2hhZWFucyB3YXMgZmlyc3QgcmFpc2VkIHRvIGRpZ25pdHkgYW5kIHBvd2VyIGJ5IEFyYXR1cywgd2hvIGNvbnNvbGlkYXRlZCBpdCB3aGVuIGl0IHdhcyBmZWVibGUgYW5kIGRpc3J1cHRlZCwgYW5kIGluYXVndXJhdGVkIGFuIEhlbGxlbmljIGFuZCBodW1hbmUgZm9ybSBvZiBnb3Zlcm5tZW50LiBUaGVuLCBqdXN0IGFzIGluIHJ1bm5pbmcgd2F0ZXJzLCBhZnRlciBhIGZldyBzbWFsbCBwYXJ0aWNsZXMgaGF2ZSBiZWd1biB0byB0YWtlIGEgZml4ZWQgcG9zaXRpb24sIG90aGVycyBwcmVzZW50bHkgYXJlIHN3ZXB0IGFnYWluc3QgdGhlIGZpcnN0LCBhZGhlcmUgYW5kIGNsaW5nIHRvIHRoZW0sIGFuZCB0aHVzIGZvcm0gYSBmaXhlZCBhbmQgc29saWQgbWFzcyBieSBtdXR1YWwgc3VwcG9ydCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoZSBBY2hhZWFucywgYXQgYSB0aW1lIHdoZW4gR3JlZWNlIHdhcyB3ZWFrIGFuZCBlYXNpbHkgZGlzc29sdmVkIGFuZCBkcmlmdGluZyBhbG9uZyBieSBpbmRpdmlkdWFsIGNpdGllcywgZmlyc3QgdW5pdGVkIHRoZW1zZWx2ZXMgdG9nZXRoZXIsIGFuZCB0aGVuLCBieSByZWNlaXZpbmcgaW50byB0aGVpciBudW1iZXIgc29tZSBvZiB0aGUgY2l0aWVzIHJvdW5kIGFib3V0IHdoaWNoIHRoZXkgaGFkIGFpZGVkIGFuZCBhc3Npc3RlZCBpbiBzaGFraW5nIG9mZiB0aGVpciB0eXJhbnRzLCBhbmQgYnkgdW5pdGluZyBvdGhlcnMgd2l0aCB0aGVtc2VsdmVzIGluIGEgaGFybW9uaW91cyBjaXZpbCBwb2xpdHksIHRoZXkgcHVycG9zZWQgdG8gZm9ybSB0aGUgUGVsb3Bvbm5lc3VzIGludG8gYSBzaW5nbGUgcG9saXRpY2FsIGJvZHkgYW5kIG9uZSBwb3dlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGxvbmcsIGhvd2V2ZXIsIGFzIEFyYXR1cyBsaXZlZCwgdGhleSB3ZXJlIGRlcGVuZGVudCBmb3IgdGhlIG1vc3QgcGFydCBvbiBNYWNlZG9uaWFuIGFybWllcywgcGF5aW5nIGNvdXJ0IHRvIFB0b2xlbXksIGFuZCB0aGVuIGFnYWluIHRvIEFudGlnb251cyBhbmQgUGhpbGlwLCBhbGwgb2Ygd2hvbSBidXNpZWQgdGhlbXNlbHZlcyBpbiB0aGUgYWZmYWlycyBvZiBHcmVlY2UuIEJ1dCB3aGVuIFBoaWxvcG9lbWVuIHdhcyBhZHZhbmNlZCB0byBsZWFkZXJzaGlwIGFtb25nIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMDcgQi5DLjsgQXJhdHVzIGhhZCBkaWVkIGluIDIxMy48L25vdGU+IHRoZXkgd2VyZSBhdCBsYXN0IGNhcGFibGUgb2YgY29udGVuZGluZyBhbG9uZSB3aXRoIHRoZWlyIG1vc3QgcG93ZXJmdWwgbmVpZ2hib3VycywgYW5kIGNlYXNlZCB0byByZWx5IHVwb24gZm9yZWlnbiBwcm90ZWN0b3JzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cywgaW5kZWVkLCB3aG8gd2FzIHRob3VnaHQgdG8gYmUgdG9vIHNsdWdnaXNoIGZvciB3YXJsaWtlIGNvbnRlc3RzLCBhY2NvbXBsaXNoZWQgbW9zdCBvZiBoaXMgdW5kZXJ0YWtpbmdzIGJ5IGNvbmZlcmVuY2UsIHVyYmFuaXR5LCBhbmQgcm95YWwgZnJpZW5kc2hpcHMsIGFzIEkgaGF2ZSB3cml0dGVuIGluIGhpcyBMaWZlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BcmF0dXM8L3RpdGxlPiwgeC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlcmVhcyBQaGlsb3BvZW1lbiwgd2hvIHdhcyBhIGdvb2Qgd2FycmlvciBhbmQgZWZmZWN0aXZlIHdpdGggaGlzIHdlYXBvbnMsIGJlc2lkZXMgcHJvdmluZyBoaW1zZWxmIGZvcnR1bmF0ZSBhbmQgc3VjY2Vzc2Z1bCBpbiBoaXMgdmVyeSBmaXJzdCBiYXR0bGVzLCBpbmNyZWFzZWQgbm90IG9ubHkgdGhlIHBvd2VyIGJ1dCBhbHNvIHRoZSBjb3VyYWdlIG9mIHRoZSBBY2hhZWFucywgd2hvIHdlcmUgYWNjdXN0b21lZCB0byBiZSB2aWN0b3Jpb3VzIHVuZGVyIGhpbSBhbmQgdG8gd2luIHN1Y2Nlc3MgaW4gbW9zdCBvZiB0aGVpciBjb250ZXN0cy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyYXR1czwvdGl0bGU+LCB4LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJhdHVzPC90aXRsZT4sIHguPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIGhvd2V2ZXIsIGhlIGNoYW5nZWQgdGhlIGZhdWx0eSBwcmFjdGljZSBvZiB0aGUgQWNoYWVhbnMgaW4gZHJhd2luZyB1cCBhbmQgYXJtaW5nIHRoZWlyIHNvbGRpZXJzLiBGb3IgdGhleSB1c2VkIGJ1Y2tsZXJzIHdoaWNoIHdlcmUgZWFzaWx5IGNhcnJpZWQgYmVjYXVzZSB0aGV5IHdlcmUgc28gbGlnaHQsIGFuZCB5ZXQgd2VyZSB0b28gbmFycm93IHRvIHByb3RlY3QgdGhlIGJvZHk7IGFuZCBzcGVhcnMgd2hpY2ggd2VyZSBtdWNoIHNob3J0ZXIgdGhhbiB0aGUgTWFjZWRvbmlhbiBwaWtlLiBGb3IgdGhpcyByZWFzb24gdGhleSB3ZXJlIGVmZmVjdGl2ZSBpbiBmaWdodGluZyBhdCBhIGxvbmcgZGlzdGFuY2UsIGJlY2F1c2UgdGhleSB3ZXJlIHNvIGxpZ2h0bHkgYXJtZWQsIGJ1dCB3aGVuIHRoZXkgY2FtZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSB0aGV5IHdlcmUgYXQgYSBkaXNhZHZhbnRhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhIGRpdmlzaW9uIG9mIGxpbmUgYW5kIGZvcm1hdGlvbiBpbnRvIGNvaG9ydHMgd2FzIG5vdCBjdXN0b21hcnkgd2l0aCB0aGVtLCBhbmQgc2luY2UgdGhleSBlbXBsb3llZCBhIHNvbGlkIHBoYWxhbnggd2l0aG91dCBlaXRoZXIgbGV2ZWxsZWQgbGluZSBvZiBzcGVhcnMgb3Igd2FsbCBvZiBpbnRlcmxvY2tpbmcgc2hpZWxkcyBzdWNoIGFzIHRoZSBNYWNlZG9uaWFuIHBoYWxhbnggcHJlc2VudGVkLCB0aGV5IHdlcmUgZWFzaWx5IGRpc2xvZGdlZCBhbmQgc2NhdHRlcmVkLiBQaGlsb3BvZW1lbiBzaG93ZWQgdGhlbSBhbGwgdGhpcywgYW5kIHBlcnN1YWRlZCB0aGVtIHRvIGFkb3B0IGxvbmcgcGlrZSBhbmQgaGVhdnkgc2hpZWxkIGluc3RlYWQgb2Ygc3BlYXIgYW5kIGJ1Y2tsZXIsIHRvIHByb3RlY3QgdGhlaXIgYm9kaWVzIHdpdGggaGVsbWV0cyBhbmQgYnJlYXN0cGxhdGVzIGFuZCBncmVhdmVzLCBhbmQgdG8gcHJhY3Rpc2Ugc3RhdGlvbmFyeSBhbmQgc3RlYWRmYXN0IGZpZ2h0aW5nIGluc3RlYWQgb2YgdGhlIG5pbWJsZSBtb3ZlbWVudHMgb2YgbGlnaHQtYXJtZWQgdHJvb3BzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgcGVyc3VhZGVkIHRob3NlIG9mIG1pbGl0YXJ5IGFnZSB0byBhcm0gdGhlbXNlbHZlcyBpbiB0aGlzIG1hbm5lciwgaW4gdGhlIGZpcnN0IHBsYWNlIGhlIGluc3BpcmVkIHRoZW0gd2l0aCBjb25maWRlbmNlIHRoYXQgdGhleSBoYWQgdGh1cyBiZWNvbWUgaW52aW5jaWJsZSwgYW5kIHRoZW4gbWFkZSBtb3N0IGV4Y2VsbGVudCByZWZvcm1zIGluIHRoZWlyIGx1eHVyaW91cyBhbmQgZXh0cmF2YWdhbnQgd2F5cyBvZiBsaXZpbmcuIEZvciBpdCB3YXMgbm90IHBvc3NpYmxlIHRvIHJlbW92ZSBhbHRvZ2V0aGVyIHRoZWlyIGVtcHR5IGFuZCBpZGxlIGVtdWxhdGlvbiBmcm9tIGEgcGVvcGxlIGxvbmcgYWRkaWN0ZWQgdG8gaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBmb25kIG9mIGNvc3RseSBhcHBhcmVsLCB0aGUgY292ZXJpbmdzIG9mIHRoZWlyIGNvdWNoZXMgd2VyZSBkeWVkIHB1cnBsZSwgYW5kIHRoZXkgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIGJhbnF1ZXRzIGFuZCB0YWJsZSBhcnJheS4gQnV0IGhlIG1hZGUgYSBiZWdpbm5pbmcgYnkgZGl2ZXJ0aW5nIHRoZWlyIGxvdmUgb2Ygc2hvdyBmcm9tIHdoYXQgd2FzIHVubmVjZXNzYXJ5IHRvIHdoYXQgd2FzIHNlcnZpY2VhYmxlIGFuZCBob25vdXJhYmxlLCBhbmQgc3BlZWRpbHkgcGVyc3VhZGVkIGFuZCBpbmNpdGVkIHRoZW0gYWxsIHRvIGNoZWNrIHRoZWlyIGRhaWx5IGV4cGVuZGl0dXJlcyB1cG9uIGJvZGlseSB3YW50cywgYW5kIHRvIGZpbmQgdGhlaXIgY2hpZWYgYWRvcm5tZW50IGluIG1pbGl0YXJ5IGFuZCB3YXJsaWtlIGVxdWlwbWVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBvbmUgbWlnaHQgaGF2ZSBzZWVuIHRoZSB3b3Jrc2hvcHMgZmlsbGVkIHdpdGggZ29ibGV0cyBhbmQgVGhlcnljbGVpYW4gcGxhdGU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDMzLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh4eGlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggd2VyZSBiZWluZyBicm9rZW4gdXAsIHdpdGggYnJlYXN0cGxhdGVzIGJlaW5nIGdpbGRlZCwgd2l0aCBzaGllbGRzIGFuZCBicmlkbGVzIGJlaW5nIHNpbHZlcmVkIG92ZXIsIHdoaWxlIGluIHRoZSBwbGFjZXMgb2YgZXhlcmNpc2UgY29sdHMgd2VyZSBiZWluZyBicm9rZW4gaW4gYW5kIHlvdW5nIG1lbiB3ZXJlIGxlYXJuaW5nIHRoZSB1c2Ugb2YgaGVhdnkgYXJtb3VyLCBhbmQgaW4gdGhlIGhhbmRzIG9mIHdvbWVuIHRoZXJlIHdlcmUgaGVsbWV0cyBhbmQgcGx1bWVzIGZvciBkeWVpbmcsIGFuZCBob3JzZW1lbidzIHR1bmljcyBvciBzb2xkaWVycycgY2xvYWtzIGZvciBlbWJyb2lkZXJpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaWdodCBvZiBhbGwgdGhpcyBpbmNyZWFzZWQgbWVuJ3MgY291cmFnZSwgY2FsbGVkIGZvcnRoIHRoZWlyIGVuZXJnaWVzLCBhbmQgbWFkZSB0aGVtIHZlbnR1cmVzb21lIGFuZCByZWFkeSB0byBpbmN1ciBkYW5nZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXh0cmF2YWdhbmNlIGluIG90aGVyIG9iamVjdHMgb2YgZGlzcGxheSBpbmR1Y2VzIGx1eHVyeSBhbmQgaW1wbGFudHMgZWZmZW1pbmFjeSBpbiB0aG9zZSB3aG8gdXNlIHRoZW0sIHNpbmNlIHNvbWV0aGluZyBsaWtlIGEgcHJpY2tpbmcgYW5kIHRpY2tsaW5nIG9mIHRoZSBzZW5zZXMgYnJlYWtzIGRvd24gc2VyaW91cyBwdXJwb3NlOyBidXQgd2hlbiBpdCBpcyBzZWVuIGluIHRoZSB0cmFwcGluZ3Mgb2Ygd2FyIGl0IHN0cmVuZ3RoZW5zIGFuZCBleGFsdHMgdGhlIHNwaXJpdCwganVzdCBhcyBIb21lciByZXByZXNlbnRlZCBBY2hpbGxlcywgd2hlbiBoaXMgbmV3IGFybW91ciB3YXMgbGFpZCBkb3duIG5lYXIgaGltLCBhcyBleHVsdGluZyBhdCB0aGUgc2lnaHQgYW5kIGFsbCBvbiBmaXJlIHRvIGdldCB0byB3b3JrIHdpdGggaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxOS4xNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCB4aXguIDE1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIGhvd2V2ZXIsIGhlIGNoYW5nZWQgdGhlIGZhdWx0eSBwcmFjdGljZSBvZiB0aGUgQWNoYWVhbnMgaW4gZHJhd2luZyB1cCBhbmQgYXJtaW5nIHRoZWlyIHNvbGRpZXJzLiBGb3IgdGhleSB1c2VkIGJ1Y2tsZXJzIHdoaWNoIHdlcmUgZWFzaWx5IGNhcnJpZWQgYmVjYXVzZSB0aGV5IHdlcmUgc28gbGlnaHQsIGFuZCB5ZXQgd2VyZSB0b28gbmFycm93IHRvIHByb3RlY3QgdGhlIGJvZHk7IGFuZCBzcGVhcnMgd2hpY2ggd2VyZSBtdWNoIHNob3J0ZXIgdGhhbiB0aGUgTWFjZWRvbmlhbiBwaWtlLiBGb3IgdGhpcyByZWFzb24gdGhleSB3ZXJlIGVmZmVjdGl2ZSBpbiBmaWdodGluZyBhdCBhIGxvbmcgZGlzdGFuY2UsIGJlY2F1c2UgdGhleSB3ZXJlIHNvIGxpZ2h0bHkgYXJtZWQsIGJ1dCB3aGVuIHRoZXkgY2FtZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSB0aGV5IHdlcmUgYXQgYSBkaXNhZHZhbnRhZ2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhIGRpdmlzaW9uIG9mIGxpbmUgYW5kIGZvcm1hdGlvbiBpbnRvIGNvaG9ydHMgd2FzIG5vdCBjdXN0b21hcnkgd2l0aCB0aGVtLCBhbmQgc2luY2UgdGhleSBlbXBsb3llZCBhIHNvbGlkIHBoYWxhbnggd2l0aG91dCBlaXRoZXIgbGV2ZWxsZWQgbGluZSBvZiBzcGVhcnMgb3Igd2FsbCBvZiBpbnRlcmxvY2tpbmcgc2hpZWxkcyBzdWNoIGFzIHRoZSBNYWNlZG9uaWFuIHBoYWxhbnggcHJlc2VudGVkLCB0aGV5IHdlcmUgZWFzaWx5IGRpc2xvZGdlZCBhbmQgc2NhdHRlcmVkLiBQaGlsb3BvZW1lbiBzaG93ZWQgdGhlbSBhbGwgdGhpcywgYW5kIHBlcnN1YWRlZCB0aGVtIHRvIGFkb3B0IGxvbmcgcGlrZSBhbmQgaGVhdnkgc2hpZWxkIGluc3RlYWQgb2Ygc3BlYXIgYW5kIGJ1Y2tsZXIsIHRvIHByb3RlY3QgdGhlaXIgYm9kaWVzIHdpdGggaGVsbWV0cyBhbmQgYnJlYXN0cGxhdGVzIGFuZCBncmVhdmVzLCBhbmQgdG8gcHJhY3Rpc2Ugc3RhdGlvbmFyeSBhbmQgc3RlYWRmYXN0IGZpZ2h0aW5nIGluc3RlYWQgb2YgdGhlIG5pbWJsZSBtb3ZlbWVudHMgb2YgbGlnaHQtYXJtZWQgdHJvb3BzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBwZXJzdWFkZWQgdGhvc2Ugb2YgbWlsaXRhcnkgYWdlIHRvIGFybSB0aGVtc2VsdmVzIGluIHRoaXMgbWFubmVyLCBpbiB0aGUgZmlyc3QgcGxhY2UgaGUgaW5zcGlyZWQgdGhlbSB3aXRoIGNvbmZpZGVuY2UgdGhhdCB0aGV5IGhhZCB0aHVzIGJlY29tZSBpbnZpbmNpYmxlLCBhbmQgdGhlbiBtYWRlIG1vc3QgZXhjZWxsZW50IHJlZm9ybXMgaW4gdGhlaXIgbHV4dXJpb3VzIGFuZCBleHRyYXZhZ2FudCB3YXlzIG9mIGxpdmluZy4gRm9yIGl0IHdhcyBub3QgcG9zc2libGUgdG8gcmVtb3ZlIGFsdG9nZXRoZXIgdGhlaXIgZW1wdHkgYW5kIGlkbGUgZW11bGF0aW9uIGZyb20gYSBwZW9wbGUgbG9uZyBhZGRpY3RlZCB0byBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBmb25kIG9mIGNvc3RseSBhcHBhcmVsLCB0aGUgY292ZXJpbmdzIG9mIHRoZWlyIGNvdWNoZXMgd2VyZSBkeWVkIHB1cnBsZSwgYW5kIHRoZXkgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIGJhbnF1ZXRzIGFuZCB0YWJsZSBhcnJheS4gQnV0IGhlIG1hZGUgYSBiZWdpbm5pbmcgYnkgZGl2ZXJ0aW5nIHRoZWlyIGxvdmUgb2Ygc2hvdyBmcm9tIHdoYXQgd2FzIHVubmVjZXNzYXJ5IHRvIHdoYXQgd2FzIHNlcnZpY2VhYmxlIGFuZCBob25vdXJhYmxlLCBhbmQgc3BlZWRpbHkgcGVyc3VhZGVkIGFuZCBpbmNpdGVkIHRoZW0gYWxsIHRvIGNoZWNrIHRoZWlyIGRhaWx5IGV4cGVuZGl0dXJlcyB1cG9uIGJvZGlseSB3YW50cywgYW5kIHRvIGZpbmQgdGhlaXIgY2hpZWYgYWRvcm5tZW50IGluIG1pbGl0YXJ5IGFuZCB3YXJsaWtlIGVxdWlwbWVudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBvbmUgbWlnaHQgaGF2ZSBzZWVuIHRoZSB3b3Jrc2hvcHMgZmlsbGVkIHdpdGggZ29ibGV0cyBhbmQgVGhlcnljbGVpYW4gcGxhdGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiAzMy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh4eGlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggd2VyZSBiZWluZyBicm9rZW4gdXAsIHdpdGggYnJlYXN0cGxhdGVzIGJlaW5nIGdpbGRlZCwgd2l0aCBzaGllbGRzIGFuZCBicmlkbGVzIGJlaW5nIHNpbHZlcmVkIG92ZXIsIHdoaWxlIGluIHRoZSBwbGFjZXMgb2YgZXhlcmNpc2UgY29sdHMgd2VyZSBiZWluZyBicm9rZW4gaW4gYW5kIHlvdW5nIG1lbiB3ZXJlIGxlYXJuaW5nIHRoZSB1c2Ugb2YgaGVhdnkgYXJtb3VyLCBhbmQgaW4gdGhlIGhhbmRzIG9mIHdvbWVuIHRoZXJlIHdlcmUgaGVsbWV0cyBhbmQgcGx1bWVzIGZvciBkeWVpbmcsIGFuZCBob3JzZW1lbidzIHR1bmljcyBvciBzb2xkaWVycycgY2xvYWtzIGZvciBlbWJyb2lkZXJpbmcuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiAzMy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4sIHh4eGlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlbWlsaXVzIFBhdWx1czwvdGl0bGU+LCB4eHhpaWkuIDIuPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzaWdodCBvZiBhbGwgdGhpcyBpbmNyZWFzZWQgbWVuJ3MgY291cmFnZSwgY2FsbGVkIGZvcnRoIHRoZWlyIGVuZXJnaWVzLCBhbmQgbWFkZSB0aGVtIHZlbnR1cmVzb21lIGFuZCByZWFkeSB0byBpbmN1ciBkYW5nZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBleHRyYXZhZ2FuY2UgaW4gb3RoZXIgb2JqZWN0cyBvZiBkaXNwbGF5IGluZHVjZXMgbHV4dXJ5IGFuZCBpbXBsYW50cyBlZmZlbWluYWN5IGluIHRob3NlIHdobyB1c2UgdGhlbSwgc2luY2Ugc29tZXRoaW5nIGxpa2UgYSBwcmlja2luZyBhbmQgdGlja2xpbmcgb2YgdGhlIHNlbnNlcyBicmVha3MgZG93biBzZXJpb3VzIHB1cnBvc2U7IGJ1dCB3aGVuIGl0IGlzIHNlZW4gaW4gdGhlIHRyYXBwaW5ncyBvZiB3YXIgaXQgc3RyZW5ndGhlbnMgYW5kIGV4YWx0cyB0aGUgc3Bpcml0LCBqdXN0IGFzIEhvbWVyIHJlcHJlc2VudGVkIEFjaGlsbGVzLCB3aGVuIGhpcyBuZXcgYXJtb3VyIHdhcyBsYWlkIGRvd24gbmVhciBoaW0sIGFzIGV4dWx0aW5nIGF0IHRoZSBzaWdodCBhbmQgYWxsIG9uIGZpcmUgdG8gZ2V0IHRvIHdvcmsgd2l0aCBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxOS4xNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHhpeC4gMTUgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE5LjE1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeGl4LiAxNSBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHhpeC4gMTUgZmYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciBoZSBoYWQgdGh1cyBhcnJheWVkIGFuZCBhZG9ybmVkIHRoZSB5b3VuZyBtZW4sIFBoaWxvcG9lbWVuIGV4ZXJjaXNlZCBhbmQgZHJpbGxlZCB0aGVtLCBhbmQgdGhleSBlYWdlcmx5IGFuZCBlbXVsb3VzbHkgb2JleWVkIGhpcyBpbnN0cnVjdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBuZXcgb3JkZXIgb2YgYmF0dGxlIHBsZWFzZWQgdGhlbSB3b25kZXJmdWxseSwgc2luY2UgaXQgc2VlbWVkIHRvIHNlY3VyZSBhIGNsb3NlIGFycmF5IHRoYXQgY291bGQgbm90IGJlIGJyb2tlbjsgYW5kIHRoZSBhcm1vdXIgd2hpY2ggdGhleSB1c2VkIGJlY2FtZSBsaWdodCBhbmQgbWFuYWdlYWJsZSBmb3IgdGhlbSwgc2luY2UgdGhleSB3b3JlIG9yIGdyYXNwZWQgaXQgd2l0aCBkZWxpZ2h0IGJlY2F1c2Ugb2YgaXRzIGJlYXV0eSBhbmQgc3BsZW5kb3VyLCBhbmQgd2lzaGVkIHRvIGdldCBpbnRvIGFjdGlvbiB3aXRoIGl0IGFuZCBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIHRoZWlyIGVuZW1pZXMgYXMgc29vbiBhcyBwb3NzaWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgbmV3IG9yZGVyIG9mIGJhdHRsZSBwbGVhc2VkIHRoZW0gd29uZGVyZnVsbHksIHNpbmNlIGl0IHNlZW1lZCB0byBzZWN1cmUgYSBjbG9zZSBhcnJheSB0aGF0IGNvdWxkIG5vdCBiZSBicm9rZW47IGFuZCB0aGUgYXJtb3VyIHdoaWNoIHRoZXkgdXNlZCBiZWNhbWUgbGlnaHQgYW5kIG1hbmFnZWFibGUgZm9yIHRoZW0sIHNpbmNlIHRoZXkgd29yZSBvciBncmFzcGVkIGl0IHdpdGggZGVsaWdodCBiZWNhdXNlIG9mIGl0cyBiZWF1dHkgYW5kIHNwbGVuZG91ciwgYW5kIHdpc2hlZCB0byBnZXQgaW50byBhY3Rpb24gd2l0aCBpdCBhbmQgZmlnaHQgYSBkZWNpc2l2ZSBiYXR0bGUgd2l0aCB0aGVpciBlbmVtaWVzIGFzIHNvb24gYXMgcG9zc2libGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSB0aGUgQWNoYWVhbnMgd2VyZSBjYXJyeWluZyBvbiB3YXIgd2l0aCBNYWNoYW5pZGFzIHRoZSB0eXJhbnQgb2YgU3BhcnRhLCB3aG8sIHJlbHlpbmcgdXBvbiBoaXMgbGFyZ2UgYW5kIHN0cm9uZyBmb3JjZXMsIHdhcyBzY2hlbWluZyB0byBnZXQgY29udHJvbCBvZiB0aGUgd2hvbGUgUGVsb3Bvbm5lc3VzLiBBY2NvcmRpbmdseSwgd2hlbiB3b3JkIGNhbWUgdGhhdCB0aGUgdHlyYW50IGhhZCBpbnZhZGVkIHRoZSB0ZXJyaXRvcnkgb2YgTWFudGluZWlhLCBQaGlsb3BvZW1lbiBxdWlja2x5IGxlZCBoaXMgYXJteSBvdXQgYWdhaW5zdCBoaW0uIFRoZXkgZHJldyB1cCBpbiBiYXR0bGUgYXJyYXkgbmVhciB0aGUgY2l0eSwgYm90aCBwYXJ0aWVzIGhhdmluZyBtYW55IG1lcmNlbmFyaWVzIGFuZCBhbG1vc3QgYWxsIHRoZWlyIGNpdGl6ZW4gc29sZGllcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYmF0dGxlIHdhcyBqb2luZWQsIE1hY2hhbmlkYXMgd2l0aCBoaXMgbWVyY2VuYXJpZXMgcm91dGVkIHRoZSBqYXZlbGluZWVycyBhbmQgVGFyYW50aW5lcyB3aG8gaGFkIGJlZW4gc3RhdGlvbmVkIGluIGZyb250IG9mIHRoZSBBY2hhZWFuIGxpbmUsIGFuZCB0aGVuLCBpbnN0ZWFkIG9mIGFkdmFuY2luZyBkaXJlY3RseSBhZ2FpbnN0IHRoZSBtYWluIGJvZHkgb2YgdGhlIGVuZW15IGFuZCBicmVha2luZyB1cCB0aGVpciBjbG9zZSBhcnJheSwgaGUgZGFzaGVkIG9mZiBpbiBwdXJzdWl0IG9mIHRoZSBmdWdpdGl2ZXMsIGFuZCBzbyBwYXNzZWQgYnkgdGhlIHBoYWxhbnggb2YgdGhlIEFjaGFlYW5zLCB3aGljaCByZW1haW5lZCBkcmF3biB1cCBpbiBwb3NpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBQaGlsb3BvZW1lbiwgYWx0aG91Z2ggc28gZ3JlYXQgYSBkaXNhc3RlciBoYWQgb2NjdXJyZWQgYXQgdGhlIG91dHNldCBhbmQgaGlzIGNhdXNlIHdhcyB0aG91Z2h0IHRvIGJlIHV0dGVybHkgbG9zdCBhbmQgcnVpbmVkLCBwcm9mZXNzZWQgdG8gaWdub3JlIGFuZCBtYWtlIGxpZ2h0IG9mIGl0LCBhbmQgc2VlaW5nIHdoYXQgYSBncmVhdCBtaXN0YWtlIHRoZSBlbmVteSBoYWQgbWFkZSBieSBnb2luZyBvZmYgaW4gcHVyc3VpdCwgdGh1cyBicmVha2luZyBhd2F5IGZyb20gaGlzIHBoYWxhbnggYW5kIGxlYXZpbmcgYSB2YWNhbnQgc3BhY2UgdGhlcmUsIGRpZCBub3Qgb3Bwb3NlIG9yIHJlc2lzdCB0aGVpciBjaGFzZSBhZnRlciB0aGUgZnVnaXRpdmVzLCBidXQgbGV0IHRoZW0gcGFzcyBoaW0gYnkgYW5kIG1ha2UgYSBncmVhdCBnYXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgbGVkIHN0cmFpZ2h0IGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW4gaGVhdnktYXJtZWQsIHNlZWluZyB0aGF0IHRoZWlyIHBoYWxhbnggaGFkIGJlZW4gbGVmdCBleHBvc2VkLCBhbmQgZmVsbCB1cG9uIHRoZW0gaW4gYSBmbGFuayBhdHRhY2ssIHdoaWxlIHRoZWlyIGNvbW1hbmRlciB3YXMgYXdheSBhbmQgdGhleSB3ZXJlIG5vdCBleHBlY3RpbmcgdG8gZmlnaHQ7IGZvciB0aGV5IHRob3VnaHQgdGhleSB3ZXJlIHZpY3RvcmlvdXMgYW5kIGdldHRpbmcgdGhlIHVwcGVyIGhhbmQgYWx0b2dldGhlciwgc2luY2UgdGhleSBzYXcgTWFjaGFuaWRhcyBwdXJzdWluZy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgUGhpbG9wb2VtZW4gaGFkIHJvdXRlZCB0aGVzZSB3aXRoIGdyZWF0IHNsYXVnaHRlciAobW9yZSB0aGFuIGZvdXIgdGhvdXNhbmQgb2YgdGhlbSBhcmUgc2FpZCB0byBoYXZlIGZhbGxlbiksIGhlIHNldCBvdXQgYWdhaW5zdCBNYWNoYW5pZGFzLCB3aG8gd2FzIHJldHVybmluZyB3aXRoIGhpcyBtZXJjZW5hcmllcyBmcm9tIHRoZSBwdXJzdWl0LiBCdXQgYSBicm9hZCBhbmQgZGVlcCBkaXRjaCBzdHJldGNoZWQgYmV0d2VlbiB0aGVtLCBhbG9uZyB3aGljaCB0aGUgdHdvIGxlYWRlcnMgcm9kZSBvcHBvc2l0ZSBlYWNoIG90aGVyLCBvbmUgd2lzaGluZyB0byBnZXQgYWNyb3NzIGFuZCBlc2NhcGUsIHRoZSBvdGhlciB0byBwcmV2ZW50IHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzcGVjdGFjbGUgd2FzIG5vdCB0aGF0IG9mIHR3byBjb21tYW5kZXJzIGZpZ2h0aW5nLCBidXQgdGhhdCBvZiBhIHBvd2VyZnVsIGh1bnRlciBhdHRhY2tpbmcgYSB3aWxkIGJlYXN0IHRoYXQgaGFzIGJlZW4gZm9yY2VkIHRvIHR1cm4gYXQgYmF5LCBhbmQgUGhpbG9wb2VtZW4gd2FzIHRoZSBodW50ZXIuIEFuZCBub3cgdGhlIHR5cmFudCdzIGhvcnNlLCB3aGljaCB3YXMgdmlnb3JvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQgYW5kIGZlbHQgdGhlIGJsb29keSBzcHVycyBpbiBoaXMgc2lkZXMsIGVzc2F5ZWQgdG8gbWFrZSB0aGUgbGVhcCBhY3Jvc3MsIGFuZCBzdHJpa2luZyBhZ2FpbnN0IHRoZSBlZGdlIG9mIHRoZSBkaXRjaCB3aXRoIGhpcyBicmVhc3QsIHdhcyBzdHJ1Z2dsaW5nIHdpdGggaGlzIGZvcmUtZmVldCB0byBleHRyaWNhdGUgaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBwb2ludCBTaW1taWFzIGFuZCBQb2x5YWVudXMsIHdobyB3ZXJlIGFsd2F5cyBhdCBQaGlsb3BvZW1lbidzIHNpZGUgd2hlbiBoZSB3YXMgZmlnaHRpbmcgYW5kIHByb3RlY3RlZCBoaW0gd2l0aCB0aGVpciBzaGllbGRzLCByb2RlIHVwIGJvdGggYXQgdGhlIHNhbWUgdGltZSBhbmQgbGV2ZWxsZWQgdGhlaXIgc3BlYXJzIGF0IHRoZSBob3JzZS4gQnV0IFBoaWxvcG9lbWVuIHdhcyBiZWZvcmUgdGhlbSBpbiBhdHRhY2tpbmcgTWFjaGFuaWRhcywgYW5kIHNlZWluZyB0aGF0IHRoZSB0eXJhbnQncyBob3JzZSB3YXMgbGlmdGluZyBpdHMgaGVhZCB1cCBpbiBmcm9udCBvZiBpdHMgcmlkZXIncyBib2R5LCBoZSBnYXZlIGhpcyBvd24gaG9yc2UgYSBsaXR0bGUgc3dlcnZlIHRvIG9uZSBzaWRlLCBhbmQgdGhlbiwgY2xhc3BpbmcgaGlzIHNwZWFyIGZpcm1seSBpbiB0aGUgbWlkZGxlLCBwdXNoZWQgaXQgaG9tZSB3aXRoIGFsbCBoaXMgd2VpZ2h0IGFuZCBvdmVydHVybmVkIGhpcyBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgYXR0aXR1ZGUgaW4gd2hpY2ggaGUgaXMgcmVwcmVzZW50ZWQgYnkgYSBicm9uemUgc3RhdHVlIHNldCB1cCBhdCBEZWxwaGkgYnkgdGhlIEFjaGFlYW5zLCB3aG8gYWRtaXJlZCBlc3BlY2lhbGx5IGJvdGggaGlzIGRlZWQgb2YgcHJvd2VzcyBhbmQgaGlzIGdlbmVyYWxzaGlwIG9uIHRoYXQgZGF5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lIHRoZSBBY2hhZWFucyB3ZXJlIGNhcnJ5aW5nIG9uIHdhciB3aXRoIE1hY2hhbmlkYXMgdGhlIHR5cmFudCBvZiBTcGFydGEsIHdobywgcmVseWluZyB1cG9uIGhpcyBsYXJnZSBhbmQgc3Ryb25nIGZvcmNlcywgd2FzIHNjaGVtaW5nIHRvIGdldCBjb250cm9sIG9mIHRoZSB3aG9sZSBQZWxvcG9ubmVzdXMuIEFjY29yZGluZ2x5LCB3aGVuIHdvcmQgY2FtZSB0aGF0IHRoZSB0eXJhbnQgaGFkIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBNYW50aW5laWEsIFBoaWxvcG9lbWVuIHF1aWNrbHkgbGVkIGhpcyBhcm15IG91dCBhZ2FpbnN0IGhpbS4gVGhleSBkcmV3IHVwIGluIGJhdHRsZSBhcnJheSBuZWFyIHRoZSBjaXR5LCBib3RoIHBhcnRpZXMgaGF2aW5nIG1hbnkgbWVyY2VuYXJpZXMgYW5kIGFsbW9zdCBhbGwgdGhlaXIgY2l0aXplbiBzb2xkaWVyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYmF0dGxlIHdhcyBqb2luZWQsIE1hY2hhbmlkYXMgd2l0aCBoaXMgbWVyY2VuYXJpZXMgcm91dGVkIHRoZSBqYXZlbGluZWVycyBhbmQgVGFyYW50aW5lcyB3aG8gaGFkIGJlZW4gc3RhdGlvbmVkIGluIGZyb250IG9mIHRoZSBBY2hhZWFuIGxpbmUsIGFuZCB0aGVuLCBpbnN0ZWFkIG9mIGFkdmFuY2luZyBkaXJlY3RseSBhZ2FpbnN0IHRoZSBtYWluIGJvZHkgb2YgdGhlIGVuZW15IGFuZCBicmVha2luZyB1cCB0aGVpciBjbG9zZSBhcnJheSwgaGUgZGFzaGVkIG9mZiBpbiBwdXJzdWl0IG9mIHRoZSBmdWdpdGl2ZXMsIGFuZCBzbyBwYXNzZWQgYnkgdGhlIHBoYWxhbnggb2YgdGhlIEFjaGFlYW5zLCB3aGljaCByZW1haW5lZCBkcmF3biB1cCBpbiBwb3NpdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUGhpbG9wb2VtZW4sIGFsdGhvdWdoIHNvIGdyZWF0IGEgZGlzYXN0ZXIgaGFkIG9jY3VycmVkIGF0IHRoZSBvdXRzZXQgYW5kIGhpcyBjYXVzZSB3YXMgdGhvdWdodCB0byBiZSB1dHRlcmx5IGxvc3QgYW5kIHJ1aW5lZCwgcHJvZmVzc2VkIHRvIGlnbm9yZSBhbmQgbWFrZSBsaWdodCBvZiBpdCwgYW5kIHNlZWluZyB3aGF0IGEgZ3JlYXQgbWlzdGFrZSB0aGUgZW5lbXkgaGFkIG1hZGUgYnkgZ29pbmcgb2ZmIGluIHB1cnN1aXQsIHRodXMgYnJlYWtpbmcgYXdheSBmcm9tIGhpcyBwaGFsYW54IGFuZCBsZWF2aW5nIGEgdmFjYW50IHNwYWNlIHRoZXJlLCBkaWQgbm90IG9wcG9zZSBvciByZXNpc3QgdGhlaXIgY2hhc2UgYWZ0ZXIgdGhlIGZ1Z2l0aXZlcywgYnV0IGxldCB0aGVtIHBhc3MgaGltIGJ5IGFuZCBtYWtlIGEgZ3JlYXQgZ2FwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgbGVkIHN0cmFpZ2h0IGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW4gaGVhdnktYXJtZWQsIHNlZWluZyB0aGF0IHRoZWlyIHBoYWxhbnggaGFkIGJlZW4gbGVmdCBleHBvc2VkLCBhbmQgZmVsbCB1cG9uIHRoZW0gaW4gYSBmbGFuayBhdHRhY2ssIHdoaWxlIHRoZWlyIGNvbW1hbmRlciB3YXMgYXdheSBhbmQgdGhleSB3ZXJlIG5vdCBleHBlY3RpbmcgdG8gZmlnaHQ7IGZvciB0aGV5IHRob3VnaHQgdGhleSB3ZXJlIHZpY3RvcmlvdXMgYW5kIGdldHRpbmcgdGhlIHVwcGVyIGhhbmQgYWx0b2dldGhlciwgc2luY2UgdGhleSBzYXcgTWFjaGFuaWRhcyBwdXJzdWluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIFBoaWxvcG9lbWVuIGhhZCByb3V0ZWQgdGhlc2Ugd2l0aCBncmVhdCBzbGF1Z2h0ZXIgKG1vcmUgdGhhbiBmb3VyIHRob3VzYW5kIG9mIHRoZW0gYXJlIHNhaWQgdG8gaGF2ZSBmYWxsZW4pLCBoZSBzZXQgb3V0IGFnYWluc3QgTWFjaGFuaWRhcywgd2hvIHdhcyByZXR1cm5pbmcgd2l0aCBoaXMgbWVyY2VuYXJpZXMgZnJvbSB0aGUgcHVyc3VpdC4gQnV0IGEgYnJvYWQgYW5kIGRlZXAgZGl0Y2ggc3RyZXRjaGVkIGJldHdlZW4gdGhlbSwgYWxvbmcgd2hpY2ggdGhlIHR3byBsZWFkZXJzIHJvZGUgb3Bwb3NpdGUgZWFjaCBvdGhlciwgb25lIHdpc2hpbmcgdG8gZ2V0IGFjcm9zcyBhbmQgZXNjYXBlLCB0aGUgb3RoZXIgdG8gcHJldmVudCB0aGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzcGVjdGFjbGUgd2FzIG5vdCB0aGF0IG9mIHR3byBjb21tYW5kZXJzIGZpZ2h0aW5nLCBidXQgdGhhdCBvZiBhIHBvd2VyZnVsIGh1bnRlciBhdHRhY2tpbmcgYSB3aWxkIGJlYXN0IHRoYXQgaGFzIGJlZW4gZm9yY2VkIHRvIHR1cm4gYXQgYmF5LCBhbmQgUGhpbG9wb2VtZW4gd2FzIHRoZSBodW50ZXIuIEFuZCBub3cgdGhlIHR5cmFudCdzIGhvcnNlLCB3aGljaCB3YXMgdmlnb3JvdXMgYW5kIGhpZ2gtc3Bpcml0ZWQgYW5kIGZlbHQgdGhlIGJsb29keSBzcHVycyBpbiBoaXMgc2lkZXMsIGVzc2F5ZWQgdG8gbWFrZSB0aGUgbGVhcCBhY3Jvc3MsIGFuZCBzdHJpa2luZyBhZ2FpbnN0IHRoZSBlZGdlIG9mIHRoZSBkaXRjaCB3aXRoIGhpcyBicmVhc3QsIHdhcyBzdHJ1Z2dsaW5nIHdpdGggaGlzIGZvcmUtZmVldCB0byBleHRyaWNhdGUgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQgU2ltbWlhcyBhbmQgUG9seWFlbnVzLCB3aG8gd2VyZSBhbHdheXMgYXQgUGhpbG9wb2VtZW4ncyBzaWRlIHdoZW4gaGUgd2FzIGZpZ2h0aW5nIGFuZCBwcm90ZWN0ZWQgaGltIHdpdGggdGhlaXIgc2hpZWxkcywgcm9kZSB1cCBib3RoIGF0IHRoZSBzYW1lIHRpbWUgYW5kIGxldmVsbGVkIHRoZWlyIHNwZWFycyBhdCB0aGUgaG9yc2UuIEJ1dCBQaGlsb3BvZW1lbiB3YXMgYmVmb3JlIHRoZW0gaW4gYXR0YWNraW5nIE1hY2hhbmlkYXMsIGFuZCBzZWVpbmcgdGhhdCB0aGUgdHlyYW50J3MgaG9yc2Ugd2FzIGxpZnRpbmcgaXRzIGhlYWQgdXAgaW4gZnJvbnQgb2YgaXRzIHJpZGVyJ3MgYm9keSwgaGUgZ2F2ZSBoaXMgb3duIGhvcnNlIGEgbGl0dGxlIHN3ZXJ2ZSB0byBvbmUgc2lkZSwgYW5kIHRoZW4sIGNsYXNwaW5nIGhpcyBzcGVhciBmaXJtbHkgaW4gdGhlIG1pZGRsZSwgcHVzaGVkIGl0IGhvbWUgd2l0aCBhbGwgaGlzIHdlaWdodCBhbmQgb3ZlcnR1cm5lZCBoaXMgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGF0dGl0dWRlIGluIHdoaWNoIGhlIGlzIHJlcHJlc2VudGVkIGJ5IGEgYnJvbnplIHN0YXR1ZSBzZXQgdXAgYXQgRGVscGhpIGJ5IHRoZSBBY2hhZWFucywgd2hvIGFkbWlyZWQgZXNwZWNpYWxseSBib3RoIGhpcyBkZWVkIG9mIHByb3dlc3MgYW5kIGhpcyBnZW5lcmFsc2hpcCBvbiB0aGF0IGRheS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgYXQgdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBOZW1lYW4gZ2FtZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHN1bW1lciBvZiAyMDUgQi5DLjwvbm90ZT4gd2hlbiBoZSB3YXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMgZm9yIHRoZSBzZWNvbmQgdGltZSBhbmQgaGFkIHJlY2VudGx5IHdvbiBoaXMgdmljdG9yeSBhdCBNYW50aW5laWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAyMDYgQi5DLjwvbm90ZT4gYnV0IHdhcyBhdCBsZWlzdXJlIHRoZSB3aGlsZSBvbiBhY2NvdW50IG9mIHRoZSBmZXN0aXZhbCwgUGhpbG9wb2VtZW4gaW4gdGhlIGZpcnN0IHBsYWNlIGRpc3BsYXllZCBiZWZvcmUgdGhlIGFzc2VtYmxlZCBHcmVla3MgaGlzIHBoYWxhbngsIHdpdGggaXRzIHNwbGVuZGlkIGFycmF5LCBhbmQgcGVyZm9ybWluZyBpdHMgdGFjdGljYWwgZXZvbHV0aW9ucywgYXMgaXQgd2FzIHdvbnQgdG8gZG8sIHdpdGggc3BlZWQgYW5kIHZpZ291ci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2hpbGUgdGhlIG1pbnN0cmVscyB3ZXJlIGNvbnRlbmRpbmcgZm9yIHRoZSBwcml6ZSwgaGUgY2FtZSBpbnRvIHRoZSB0aGVhdHJlIHdpdGggaGlzIHlvdW5nIG1lbi4gVGhleSB3b3JlIHRoZWlyIHNvbGRpZXJzJyBjbG9ha3MgYW5kIHRoZWlyIHB1cnBsZSB0dW5pY3MsIHdlcmUgYWxsIGluIHRoZSBwcmltZSBvZiB0aGVpciBzdHJlbmd0aCBhbmQgb2YgdGhlIHNhbWUgYWdlLCBhbmQgc2hvd2VkIG5vdCBvbmx5IGdyZWF0IHJlc3BlY3QgZm9yIHRoZWlyIGNvbW1hbmRlciwgYnV0IGFsc28gdGhhdCBoaWdoIHNwaXJpdCB3aGljaCB5b3VuZyBtZW4gaGF2ZSBhZnRlciBtYW55IGhvbm91cmFibGUgY29udGVzdHMuIEFuZCBqdXN0IGFzIHRoZXkgbWFkZSB0aGVpciBlbnRyYW5jZSBpdCBjaGFuY2VkIHRoYXQgUHlsYWRlcyB0aGUgbWluc3RyZWwgd2FzIGNoYW50aW5nIHRoZSBvcGVuaW5nIHZlcnNlIG9mIHRoZSA8dGl0bGU+UGVyc2lhbnM8L3RpdGxlPiBvZiBUaW1vdGhldXPigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+R2xvcmlvdXMgdGhlIGNyb3duIG9mIGZyZWVkb20gd2hpY2ggaGUgZmFzaGlvbmV0aCBmb3IgSGVsbGFzPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPjsKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCXdoZXJldXBvbiwgYXMgdGhlIHNwbGVuZGlkIHZvaWNlIG9mIHRoZSBzaW5nZXIgZml0bHkgc3VzdGFpbmVkIHRoZSBtYWplc3R5IG9mIHRoZSBwb2V0J3Mgd29yZHMsIGFsbCB0aGUgc3BlY3RhdG9ycyB0dXJuZWQgdGhlaXIgZXllcyB1cG9uIFBoaWxvcG9lbWVuIGFuZCBnYXZlIGhpbSBnbGFkIGFwcGxhdXNlOyBmb3IgaW4gdGhlaXIgaG9wZXMgdGhlIEdyZWVrcyB3ZXJlIHJlY292ZXJpbmcgdGhlaXIgYW5jaWVudCBkaWduaXR5LCBhbmQgaW4gdGhlaXIgY291cmFnZSB0aGV5IHdlcmUgbWFraW5nIHRoZSBuZWFyZXN0IGFwcHJvYWNoIHRvIHRoZSBoaWdoIHNwaXJpdCBvZiB0aGVpciBmYXRoZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgYXQgdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBOZW1lYW4gZ2FtZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3VtbWVyIG9mIDIwNSBCLkMuPC9ub3RlPiB3aGVuIGhlIHdhcyBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyBmb3IgdGhlIHNlY29uZCB0aW1lIGFuZCBoYWQgcmVjZW50bHkgd29uIGhpcyB2aWN0b3J5IGF0IE1hbnRpbmVpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBzcHJpbmcgb2YgMjA2IEIuQy48L25vdGU+IGJ1dCB3YXMgYXQgbGVpc3VyZSB0aGUgd2hpbGUgb24gYWNjb3VudCBvZiB0aGUgZmVzdGl2YWwsIFBoaWxvcG9lbWVuIGluIHRoZSBmaXJzdCBwbGFjZSBkaXNwbGF5ZWQgYmVmb3JlIHRoZSBhc3NlbWJsZWQgR3JlZWtzIGhpcyBwaGFsYW54LCB3aXRoIGl0cyBzcGxlbmRpZCBhcnJheSwgYW5kIHBlcmZvcm1pbmcgaXRzIHRhY3RpY2FsIGV2b2x1dGlvbnMsIGFzIGl0IHdhcyB3b250IHRvIGRvLCB3aXRoIHNwZWVkIGFuZCB2aWdvdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIHRoZSBtaW5zdHJlbHMgd2VyZSBjb250ZW5kaW5nIGZvciB0aGUgcHJpemUsIGhlIGNhbWUgaW50byB0aGUgdGhlYXRyZSB3aXRoIGhpcyB5b3VuZyBtZW4uIFRoZXkgd29yZSB0aGVpciBzb2xkaWVycycgY2xvYWtzIGFuZCB0aGVpciBwdXJwbGUgdHVuaWNzLCB3ZXJlIGFsbCBpbiB0aGUgcHJpbWUgb2YgdGhlaXIgc3RyZW5ndGggYW5kIG9mIHRoZSBzYW1lIGFnZSwgYW5kIHNob3dlZCBub3Qgb25seSBncmVhdCByZXNwZWN0IGZvciB0aGVpciBjb21tYW5kZXIsIGJ1dCBhbHNvIHRoYXQgaGlnaCBzcGlyaXQgd2hpY2ggeW91bmcgbWVuIGhhdmUgYWZ0ZXIgbWFueSBob25vdXJhYmxlIGNvbnRlc3RzLiBBbmQganVzdCBhcyB0aGV5IG1hZGUgdGhlaXIgZW50cmFuY2UgaXQgY2hhbmNlZCB0aGF0IFB5bGFkZXMgdGhlIG1pbnN0cmVsIHdhcyBjaGFudGluZyB0aGUgb3BlbmluZyB2ZXJzZSBvZiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyc2lhbnM8L3RpdGxlPiBvZiBUaW1vdGhldXPigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkdsb3Jpb3VzIHRoZSBjcm93biBvZiBmcmVlZG9tIHdoaWNoIGhlIGZhc2hpb25ldGggZm9yIEhlbGxhczwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT47CgkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPkdsb3Jpb3VzIHRoZSBjcm93biBvZiBmcmVlZG9tIHdoaWNoIGhlIGZhc2hpb25ldGggZm9yIEhlbGxhczwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJd2hlcmV1cG9uLCBhcyB0aGUgc3BsZW5kaWQgdm9pY2Ugb2YgdGhlIHNpbmdlciBmaXRseSBzdXN0YWluZWQgdGhlIG1hamVzdHkgb2YgdGhlIHBvZXQncyB3b3JkcywgYWxsIHRoZSBzcGVjdGF0b3JzIHR1cm5lZCB0aGVpciBleWVzIHVwb24gUGhpbG9wb2VtZW4gYW5kIGdhdmUgaGltIGdsYWQgYXBwbGF1c2U7IGZvciBpbiB0aGVpciBob3BlcyB0aGUgR3JlZWtzIHdlcmUgcmVjb3ZlcmluZyB0aGVpciBhbmNpZW50IGRpZ25pdHksIGFuZCBpbiB0aGVpciBjb3VyYWdlIHRoZXkgd2VyZSBtYWtpbmcgdGhlIG5lYXJlc3QgYXBwcm9hY2ggdG8gdGhlIGhpZ2ggc3Bpcml0IG9mIHRoZWlyIGZhdGhlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGl0IGNhbWUgdG8gcGVyaWxzIGFuZCBiYXR0bGVzLCBqdXN0IGFzIHlvdW5nIGhvcnNlcyBsb25nIGZvciB0aGVpciBhY2N1c3RvbWVkIHJpZGVycywgYW5kIGlmIHRoZXkgaGF2ZSBvdGhlcnMgb24gdGhlaXIgYmFja3MsIGFyZSBzaHkgYW5kIHdpbGQsIHNvIHRoZSBBY2hhZWFuIGFybXksIHdoZW4gc29tZW9uZSBvdGhlciB0aGFuIFBoaWxvcG9lbWVuIHdhcyBjb21tYW5kZXItaW4tY2hpZWYsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXMgYSBydWxlLCB0aGUgc2FtZSBtYW4gY291bGQgbm90IGJlIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW4gbGVhZ3VlIHR3byB5ZWFycyBpbiBzdWNjZXNzaW9uLjwvbm90ZT4gd291bGQgYmUgb3V0IG9mIGhlYXJ0LCB3b3VsZCBrZWVwIGxvb2tpbmcgZWFnZXJseSBmb3IgaGltLCBhbmQgaWYgaGUgYnV0IGNhbWUgaW4gc2lnaHQsIHdvdWxkIGF0IG9uY2UgYmUgYWxlcnQgYW5kIGVmZmljaWVudCBiZWNhdXNlIG9mIHRoZSBjb3VyYWdlIGhlIGluc3BpcmVkLiBGb3IgdGhleSBwZXJjZWl2ZWQgdGhhdCBoZSB3YXMgdGhlIG9uZSBnZW5lcmFsIHdob20gdGhlaXIgZW5lbWllcyB3ZXJlIHVuYWJsZSB0byBmYWNlLCBhbmQgd2hvc2UgbmFtZSBhbmQgZmFtZSB0aGV5IGZlYXJlZCwgYXMgd2FzIGV2aWRlbnQgZnJvbSB3aGF0IHRoZXkgZGlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgUGhpbGlwIHRoZSBraW5nIG9mIE1hY2Vkb24sIHRoaW5raW5nIHRoYXQgaWYgUGhpbG9wb2VtZW4gY291bGQgYmUgZ290IG91dCBvZiB0aGUgd2F5IHRoZSBBY2hhZWFucyB3b3VsZCBhZ2FpbiBzdWJtaXQgYWJqZWN0bHkgdG8gaGlzIHN3YXksIHNlY3JldGx5IHNlbnQgbWVuIHRvIEFyZ29zIHdobyB3ZXJlIHRvIGFzc2Fzc2luYXRlIGhpbTsgYnV0IHRoZSBwbG90IGJlY2FtZSBrbm93biwgYW5kIFBoaWxpcCB3YXMgdXR0ZXJseSBjb25kZW1uZWQgYW5kIGhhdGVkIGFtb25nIHRoZSBHcmVla3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGUgQm9lb3RpYW5zIHdlcmUgYmVzaWVnaW5nIE1lZ2FyYSBhbmQgaGFkIGhvcGVzIG9mIGl0cyBzcGVlZHkgY2FwdHVyZSwgd2hlbiBzdWRkZW5seSBhIHJlcG9ydCByZWFjaGVkIHRoZWlyIGVhcnMgKGFuZCBpdCB3YXMgYSBmYWxzZSByZXBvcnQpIHRoYXQgUGhpbG9wb2VtZW4gd2FzIGNvbWluZyB0byB0aGUgYWlkIG9mIHRoZSBiZXNpZWdlZCBhbmQgd2FzIGNsb3NlIGF0IGhhbmQ7IHNvIHRoZXkgYWJhbmRvbmVkIHRoZWlyIHNjYWxpbmctbGFkZGVycywgd2hpY2ggd2VyZSBhbHJlYWR5IHBsYW50ZWQgYWdhaW5zdCB0aGUgd2FsbHMgb2YgdGhlIGNpdHksIGFuZCBmbGVkIGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIGFnYWluLCB3aGVuIE5hYmlzLCB3aG8gc3VjY2VlZGVkIE1hY2hhbmlkYXMgYXMgdHlyYW50IG9mIFNwYXJ0YSwgc3VkZGVubHkgc2VpemVkIE1lc3NlbmUsIGl0IGNoYW5jZWQgdGhhdCBQaGlsb3BvZW1lbiB3YXMgb3V0IG9mIG9mZmljZSBhbmQgaGFkIG5vIGZvcmNlIHVuZGVyIGhpcyBjb21tYW5kOyBidXQgc2luY2UgTHlzaXBwdXMsIHRoZSBjb21tYW5kZXItaW4tY2hpZWYgb2YgdGhlIEFjaGFlYW5zLCBjb3VsZCBub3QgYmUgcGVyc3VhZGVkIGJ5IGhpbSB0byBnbyB0byB0aGUgcmVzY3VlIG9mIHRoZSBNZXNzZW5pYW5zLCBiZWNhdXNlLCBhcyBoZSBzYWlkLCB0aGUgY2l0eSB3YXMgdXR0ZXJseSBsb3N0IG5vdyB0aGF0IHRoZSBlbmVteSB3ZXJlIGluc2lkZSwgUGhpbG9wb2VtZW4gaGltc2VsZiB3ZW50IHRvIHRoZWlyIHJlc2N1ZSwgdGFraW5nIHdpdGggaGltIGhpcyBmZWxsb3ctY2l0aXplbnMgb2YgTWVnYWxvcG9saXMsIHdobyBkaWQgbm90IHdhaXQgZm9yIGFueSBsYXcgb3IgY29tbWlzc2lvbiwgYnV0IGZvbGxvd2VkIHRoZSBtYW4gd2hvbSBuYXR1cmUgaGFkIG1hZGUgc3VwZXJpb3IgYXMgdGhvdWdoIGhlIHdlcmUgYWx3YXlzIGluIGNvbW1hbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE5hYmlzIGhlYXJkIHRoYXQgUGhpbG9wb2VtZW4gd2FzIGFscmVhZHkgY2xvc2UgYXQgaGFuZCwgaGUgZGlkIG5vdCB3YWl0IGZvciBoaW0gdG8gY29tZSB1cCwgYWx0aG91Z2ggaGUgd2FzIGVuY2FtcGVkIGluIHRoZSBjaXR5LCBidXQgc3RvbGUgb3V0IGJ5IGFuIG9wcG9zaXRlIGdhdGUgYW5kIGxlZCBoaXMgZm9yY2VzIG9mZiBhcyBmYXN0IGFzIGhlIGNvdWxkLCB0aGlua2luZyB0aGF0IGhlIHdvdWxkIGJlIGZvcnR1bmF0ZSBpZiBoZSBzaG91bGQgZXNjYXBlOyBhbmQgaGUgZGlkIGVzY2FwZSwgYW5kIE1lc3NlbmUgd2FzIHNldCBmcmVlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaXQgY2FtZSB0byBwZXJpbHMgYW5kIGJhdHRsZXMsIGp1c3QgYXMgeW91bmcgaG9yc2VzIGxvbmcgZm9yIHRoZWlyIGFjY3VzdG9tZWQgcmlkZXJzLCBhbmQgaWYgdGhleSBoYXZlIG90aGVycyBvbiB0aGVpciBiYWNrcywgYXJlIHNoeSBhbmQgd2lsZCwgc28gdGhlIEFjaGFlYW4gYXJteSwgd2hlbiBzb21lb25lIG90aGVyIHRoYW4gUGhpbG9wb2VtZW4gd2FzIGNvbW1hbmRlci1pbi1jaGllZiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIGEgcnVsZSwgdGhlIHNhbWUgbWFuIGNvdWxkIG5vdCBiZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZSB0d28geWVhcnMgaW4gc3VjY2Vzc2lvbi48L25vdGU+IHdvdWxkIGJlIG91dCBvZiBoZWFydCwgd291bGQga2VlcCBsb29raW5nIGVhZ2VybHkgZm9yIGhpbSwgYW5kIGlmIGhlIGJ1dCBjYW1lIGluIHNpZ2h0LCB3b3VsZCBhdCBvbmNlIGJlIGFsZXJ0IGFuZCBlZmZpY2llbnQgYmVjYXVzZSBvZiB0aGUgY291cmFnZSBoZSBpbnNwaXJlZC4gRm9yIHRoZXkgcGVyY2VpdmVkIHRoYXQgaGUgd2FzIHRoZSBvbmUgZ2VuZXJhbCB3aG9tIHRoZWlyIGVuZW1pZXMgd2VyZSB1bmFibGUgdG8gZmFjZSwgYW5kIHdob3NlIG5hbWUgYW5kIGZhbWUgdGhleSBmZWFyZWQsIGFzIHdhcyBldmlkZW50IGZyb20gd2hhdCB0aGV5IGRpZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQaGlsaXAgdGhlIGtpbmcgb2YgTWFjZWRvbiwgdGhpbmtpbmcgdGhhdCBpZiBQaGlsb3BvZW1lbiBjb3VsZCBiZSBnb3Qgb3V0IG9mIHRoZSB3YXkgdGhlIEFjaGFlYW5zIHdvdWxkIGFnYWluIHN1Ym1pdCBhYmplY3RseSB0byBoaXMgc3dheSwgc2VjcmV0bHkgc2VudCBtZW4gdG8gQXJnb3Mgd2hvIHdlcmUgdG8gYXNzYXNzaW5hdGUgaGltOyBidXQgdGhlIHBsb3QgYmVjYW1lIGtub3duLCBhbmQgUGhpbGlwIHdhcyB1dHRlcmx5IGNvbmRlbW5lZCBhbmQgaGF0ZWQgYW1vbmcgdGhlIEdyZWVrcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGUgQm9lb3RpYW5zIHdlcmUgYmVzaWVnaW5nIE1lZ2FyYSBhbmQgaGFkIGhvcGVzIG9mIGl0cyBzcGVlZHkgY2FwdHVyZSwgd2hlbiBzdWRkZW5seSBhIHJlcG9ydCByZWFjaGVkIHRoZWlyIGVhcnMgKGFuZCBpdCB3YXMgYSBmYWxzZSByZXBvcnQpIHRoYXQgUGhpbG9wb2VtZW4gd2FzIGNvbWluZyB0byB0aGUgYWlkIG9mIHRoZSBiZXNpZWdlZCBhbmQgd2FzIGNsb3NlIGF0IGhhbmQ7IHNvIHRoZXkgYWJhbmRvbmVkIHRoZWlyIHNjYWxpbmctbGFkZGVycywgd2hpY2ggd2VyZSBhbHJlYWR5IHBsYW50ZWQgYWdhaW5zdCB0aGUgd2FsbHMgb2YgdGhlIGNpdHksIGFuZCBmbGVkIGF3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIGFnYWluLCB3aGVuIE5hYmlzLCB3aG8gc3VjY2VlZGVkIE1hY2hhbmlkYXMgYXMgdHlyYW50IG9mIFNwYXJ0YSwgc3VkZGVubHkgc2VpemVkIE1lc3NlbmUsIGl0IGNoYW5jZWQgdGhhdCBQaGlsb3BvZW1lbiB3YXMgb3V0IG9mIG9mZmljZSBhbmQgaGFkIG5vIGZvcmNlIHVuZGVyIGhpcyBjb21tYW5kOyBidXQgc2luY2UgTHlzaXBwdXMsIHRoZSBjb21tYW5kZXItaW4tY2hpZWYgb2YgdGhlIEFjaGFlYW5zLCBjb3VsZCBub3QgYmUgcGVyc3VhZGVkIGJ5IGhpbSB0byBnbyB0byB0aGUgcmVzY3VlIG9mIHRoZSBNZXNzZW5pYW5zLCBiZWNhdXNlLCBhcyBoZSBzYWlkLCB0aGUgY2l0eSB3YXMgdXR0ZXJseSBsb3N0IG5vdyB0aGF0IHRoZSBlbmVteSB3ZXJlIGluc2lkZSwgUGhpbG9wb2VtZW4gaGltc2VsZiB3ZW50IHRvIHRoZWlyIHJlc2N1ZSwgdGFraW5nIHdpdGggaGltIGhpcyBmZWxsb3ctY2l0aXplbnMgb2YgTWVnYWxvcG9saXMsIHdobyBkaWQgbm90IHdhaXQgZm9yIGFueSBsYXcgb3IgY29tbWlzc2lvbiwgYnV0IGZvbGxvd2VkIHRoZSBtYW4gd2hvbSBuYXR1cmUgaGFkIG1hZGUgc3VwZXJpb3IgYXMgdGhvdWdoIGhlIHdlcmUgYWx3YXlzIGluIGNvbW1hbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE5hYmlzIGhlYXJkIHRoYXQgUGhpbG9wb2VtZW4gd2FzIGFscmVhZHkgY2xvc2UgYXQgaGFuZCwgaGUgZGlkIG5vdCB3YWl0IGZvciBoaW0gdG8gY29tZSB1cCwgYWx0aG91Z2ggaGUgd2FzIGVuY2FtcGVkIGluIHRoZSBjaXR5LCBidXQgc3RvbGUgb3V0IGJ5IGFuIG9wcG9zaXRlIGdhdGUgYW5kIGxlZCBoaXMgZm9yY2VzIG9mZiBhcyBmYXN0IGFzIGhlIGNvdWxkLCB0aGlua2luZyB0aGF0IGhlIHdvdWxkIGJlIGZvcnR1bmF0ZSBpZiBoZSBzaG91bGQgZXNjYXBlOyBhbmQgaGUgZGlkIGVzY2FwZSwgYW5kIE1lc3NlbmUgd2FzIHNldCBmcmVlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlc2UgdGhpbmdzLCB0aGVuLCBtYWRlIGZvciB0aGUgaG9ub3VyIG9mIFBoaWxvcG9lbWVuOyBidXQgaGlzIGdvaW5nIGF3YXkgdG8gQ3JldGUgYWdhaW4gYXQgdGhlIHJlcXVlc3Qgb2YgdGhlIEdvcnR5bmlhbnMsIHdobyB3YW50ZWQgaGltIHRvIGJlIHRoZWlyIGdlbmVyYWwgaW4gdGhlaXIgd2FyLCBicm91Z2h0IGNhbHVtbnkgdXBvbiBoaW0sIGFuZCBpdCB3YXMgc2FpZCB0aGF0IHdoZW4gaGlzIG5hdGl2ZSBjaXR5IHdhcyBhdCB3YXIgd2l0aCBOYWJpcywgaGUgd2FzIGF3YXksIGVpdGhlciB0byBhdm9pZCBmaWdodGluZyBvciB0byBzaG93IGtpbmRuZXNzIG91dCBvZiBhbGwgc2Vhc29uIHRvIG90aGVycy4gQW5kIHlldCBzbyBjb250aW51b3VzbHkgd2VyZSB0aGUgTWVnYWxvcG9saXRhbnMgdW5kZXIgaG9zdGlsZSBhdHRhY2sgYWxsIHRoYXQgdGltZSB0aGF0IHRoZXkgbGl2ZWQgdXBvbiB0aGVpciB3YWxscyBhbmQgcGxhbnRlZCB0aGVpciBncmFpbiBpbiB0aGUgc3RyZWV0cywgc2luY2UgdGhlaXIgZmllbGRzIHdlcmUgcmF2YWdlZCBhbmQgdGhlIGVuZW15IHdlcmUgZW5jYW1wZWQgYWxtb3N0IGluIHRoZWlyIGdhdGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsb3BvZW1lbiwgaG93ZXZlciwgd2FzIHdhZ2luZyB3YXIgaW4gQ3JldGUgYWxsIHRoYXQgd2hpbGUsIGFuZCBzZXJ2aW5nIGFzIGdlbmVyYWwgYWNyb3NzIHRoZSBzZWEsIGFuZCBzbyBhZmZvcmRlZCBoaXMgZW5lbWllcyBhIGNoYW5jZSB0byBhY2N1c2UgaGltIG9mIHJ1bm5pbmcgYXdheSBmcm9tIHRoZSB3YXIgYXQgaG9tZS4gQnV0IHRoZXJlIHdlcmUgc29tZSB3aG8gc2FpZCB0aGF0IHNpbmNlIHRoZSBBY2hhZWFucyBjaG9zZSBvdGhlciBtZW4gYXMgdGhlaXIgZ2VuZXJhbHMgYW5kIFBoaWxvcG9lbWVuIHdhcyB3aXRob3V0IHB1YmxpYyBvZmZpY2UsIGhlIG1lcmVseSBwdXQgdGhlIGxlaXN1cmUgd2hpY2ggYmVsb25nZWQgdG8gaGltIGF0IHRoZSBzZXJ2aWNlIG9mIHRoZSBHb3J0eW5pYW5zIHdoZW4gdGhleSBhc2tlZCBoaW0gdG8gYmUgdGhlaXIgbGVhZGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIGF2ZXJzZSB0byBpbmFjdGl2aXR5LCBhbmQgd2lzaGVkIHRvIGtlZXAgaGlzIHNraWxsIGFzIGEgY29tbWFuZGVyIGluIHdhciwgbGlrZSBhbnkgb3RoZXIgcG9zc2Vzc2lvbiwgYWxsIHRoZSB3aGlsZSBpbiB1c2UgYW5kIGV4ZXJjaXNlLiBBbmQgaGUgbWFkZSB0aGlzIGV2aWRlbnQgYnkgd2hhdCBoZSBvbmNlIHNhaWQgYWJvdXQgS2luZyBQdG9sZW15LiBXaGVuIGNlcnRhaW4gcGVyc29ucyB3ZXJlIGV4dG9sbGluZyB0aGF0IG1vbmFyY2ggYmVjYXVzZSBoZSBjYXJlZnVsbHkgZHJpbGxlZCBoaXMgYXJteSBkYXkgYnkgZGF5LCBhbmQgY2FyZWZ1bGx5IGFuZCBsYWJvcmlvdXNseSBleGVyY2lzZWQgaGltc2VsZiBpbiBhcm1zLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB5ZXQgd2hvLDwvcT4gc2FpZCBQaGlsb3BvZW1lbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYW4gYWRtaXJlIGEga2luZyBvZiBoaXMgeWVhcnMgZm9yIGFsd2F5cyBwcmFjdGlzaW5nIGJ1dCBuZXZlciBwZXJmb3JtaW5nIGFueXRoaW5nPzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZXNlIHRoaW5ncywgdGhlbiwgbWFkZSBmb3IgdGhlIGhvbm91ciBvZiBQaGlsb3BvZW1lbjsgYnV0IGhpcyBnb2luZyBhd2F5IHRvIENyZXRlIGFnYWluIGF0IHRoZSByZXF1ZXN0IG9mIHRoZSBHb3J0eW5pYW5zLCB3aG8gd2FudGVkIGhpbSB0byBiZSB0aGVpciBnZW5lcmFsIGluIHRoZWlyIHdhciwgYnJvdWdodCBjYWx1bW55IHVwb24gaGltLCBhbmQgaXQgd2FzIHNhaWQgdGhhdCB3aGVuIGhpcyBuYXRpdmUgY2l0eSB3YXMgYXQgd2FyIHdpdGggTmFiaXMsIGhlIHdhcyBhd2F5LCBlaXRoZXIgdG8gYXZvaWQgZmlnaHRpbmcgb3IgdG8gc2hvdyBraW5kbmVzcyBvdXQgb2YgYWxsIHNlYXNvbiB0byBvdGhlcnMuIEFuZCB5ZXQgc28gY29udGludW91c2x5IHdlcmUgdGhlIE1lZ2Fsb3BvbGl0YW5zIHVuZGVyIGhvc3RpbGUgYXR0YWNrIGFsbCB0aGF0IHRpbWUgdGhhdCB0aGV5IGxpdmVkIHVwb24gdGhlaXIgd2FsbHMgYW5kIHBsYW50ZWQgdGhlaXIgZ3JhaW4gaW4gdGhlIHN0cmVldHMsIHNpbmNlIHRoZWlyIGZpZWxkcyB3ZXJlIHJhdmFnZWQgYW5kIHRoZSBlbmVteSB3ZXJlIGVuY2FtcGVkIGFsbW9zdCBpbiB0aGVpciBnYXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxvcG9lbWVuLCBob3dldmVyLCB3YXMgd2FnaW5nIHdhciBpbiBDcmV0ZSBhbGwgdGhhdCB3aGlsZSwgYW5kIHNlcnZpbmcgYXMgZ2VuZXJhbCBhY3Jvc3MgdGhlIHNlYSwgYW5kIHNvIGFmZm9yZGVkIGhpcyBlbmVtaWVzIGEgY2hhbmNlIHRvIGFjY3VzZSBoaW0gb2YgcnVubmluZyBhd2F5IGZyb20gdGhlIHdhciBhdCBob21lLiBCdXQgdGhlcmUgd2VyZSBzb21lIHdobyBzYWlkIHRoYXQgc2luY2UgdGhlIEFjaGFlYW5zIGNob3NlIG90aGVyIG1lbiBhcyB0aGVpciBnZW5lcmFscyBhbmQgUGhpbG9wb2VtZW4gd2FzIHdpdGhvdXQgcHVibGljIG9mZmljZSwgaGUgbWVyZWx5IHB1dCB0aGUgbGVpc3VyZSB3aGljaCBiZWxvbmdlZCB0byBoaW0gYXQgdGhlIHNlcnZpY2Ugb2YgdGhlIEdvcnR5bmlhbnMgd2hlbiB0aGV5IGFza2VkIGhpbSB0byBiZSB0aGVpciBsZWFkZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgYXZlcnNlIHRvIGluYWN0aXZpdHksIGFuZCB3aXNoZWQgdG8ga2VlcCBoaXMgc2tpbGwgYXMgYSBjb21tYW5kZXIgaW4gd2FyLCBsaWtlIGFueSBvdGhlciBwb3NzZXNzaW9uLCBhbGwgdGhlIHdoaWxlIGluIHVzZSBhbmQgZXhlcmNpc2UuIEFuZCBoZSBtYWRlIHRoaXMgZXZpZGVudCBieSB3aGF0IGhlIG9uY2Ugc2FpZCBhYm91dCBLaW5nIFB0b2xlbXkuIFdoZW4gY2VydGFpbiBwZXJzb25zIHdlcmUgZXh0b2xsaW5nIHRoYXQgbW9uYXJjaCBiZWNhdXNlIGhlIGNhcmVmdWxseSBkcmlsbGVkIGhpcyBhcm15IGRheSBieSBkYXksIGFuZCBjYXJlZnVsbHkgYW5kIGxhYm9yaW91c2x5IGV4ZXJjaXNlZCBoaW1zZWxmIGluIGFybXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgeWV0IHdobyw8L3E+IHNhaWQgUGhpbG9wb2VtZW4sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYW4gYWRtaXJlIGEga2luZyBvZiBoaXMgeWVhcnMgZm9yIGFsd2F5cyBwcmFjdGlzaW5nIGJ1dCBuZXZlciBwZXJmb3JtaW5nIGFueXRoaW5nPzwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIE1lZ2Fsb3BvbGl0YW5zLCBuZXZlcnRoZWxlc3MsIHdlcmUgZGlzcGxlYXNlZCBhdCB0aGlzIGFic2VuY2UsIGFuZCBsb29raW5nIHVwb24gaXQgaW4gdGhlIGxpZ2h0IG9mIGEgYmV0cmF5YWwsIHVuZGVydG9vayB0byBtYWtlIGhpbSBhbiBleGlsZTsgYnV0IHRoZSBBY2hhZWFucyBwcmV2ZW50ZWQgdGhpcyBieSBzZW5kaW5nIHRvIE1lZ2Fsb3BvbGlzIEFyaXN0YWVudXMsIHRoZWlyIGNvbW1hbmRlci1pbi1jaGllZiwgd2hvLCBhbHRob3VnaCBwb2xpdGljYWxseSBhdCB2YXJpYW5jZSB3aXRoIFBoaWxvcG9lbWVuLCB3b3VsZCBub3Qgc3VmZmVyIHNlbnRlbmNlIG9mIGNvbmRlbW5hdGlvbiB0byBiZSBwYXNzZWQgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgZGlzcGxlYXN1cmUsIFBoaWxvcG9lbWVuIHdhcyBpZ25vcmVkIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMsIGFuZCB0aGVyZWZvcmUgaW5kdWNlZCBtYW55IG9mIHRoZWlyIG91dGx5aW5nIHZpbGxhZ2VzIHRvIHNlY2VkZSBmcm9tIHRoZW0sIGluc3RydWN0aW5nIHRoZW0gdG8gc2F5IHRoYXQgdGhleSBkaWQgbm90IGJlbG9uZyB0byB0aGUgY2l0eSBhbmQgd2VyZSBub3QgdW5kZXIgdGhlaXIgcnVsZTsgYW5kIHdoZW4gdGhleSBtYWRlIHRoaXMgcGxlYSwgaGUgb3Blbmx5IHN1cHBvcnRlZCB0aGVtIGluIHRoZWlyIGNvbnRlbnRpb24gYW5kIGhlbHBlZCB0aGVtIHRvIHJhaXNlIGEgZmFjdGlvbiBhZ2FpbnN0IHRoZSBjaXR5IGluIHRoZSBhc3NlbWJseSBvZiB0aGUgQWNoYWVhbnMuIFRoaXMsIGhvd2V2ZXIsIHdhcyBhdCBhIGxhdGVyIHRpbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNZWdhbG9wb2xpdGFucywgbmV2ZXJ0aGVsZXNzLCB3ZXJlIGRpc3BsZWFzZWQgYXQgdGhpcyBhYnNlbmNlLCBhbmQgbG9va2luZyB1cG9uIGl0IGluIHRoZSBsaWdodCBvZiBhIGJldHJheWFsLCB1bmRlcnRvb2sgdG8gbWFrZSBoaW0gYW4gZXhpbGU7IGJ1dCB0aGUgQWNoYWVhbnMgcHJldmVudGVkIHRoaXMgYnkgc2VuZGluZyB0byBNZWdhbG9wb2xpcyBBcmlzdGFlbnVzLCB0aGVpciBjb21tYW5kZXItaW4tY2hpZWYsIHdobywgYWx0aG91Z2ggcG9saXRpY2FsbHkgYXQgdmFyaWFuY2Ugd2l0aCBQaGlsb3BvZW1lbiwgd291bGQgbm90IHN1ZmZlciBzZW50ZW5jZSBvZiBjb25kZW1uYXRpb24gdG8gYmUgcGFzc2VkIHVwb24gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgZGlzcGxlYXN1cmUsIFBoaWxvcG9lbWVuIHdhcyBpZ25vcmVkIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMsIGFuZCB0aGVyZWZvcmUgaW5kdWNlZCBtYW55IG9mIHRoZWlyIG91dGx5aW5nIHZpbGxhZ2VzIHRvIHNlY2VkZSBmcm9tIHRoZW0sIGluc3RydWN0aW5nIHRoZW0gdG8gc2F5IHRoYXQgdGhleSBkaWQgbm90IGJlbG9uZyB0byB0aGUgY2l0eSBhbmQgd2VyZSBub3QgdW5kZXIgdGhlaXIgcnVsZTsgYW5kIHdoZW4gdGhleSBtYWRlIHRoaXMgcGxlYSwgaGUgb3Blbmx5IHN1cHBvcnRlZCB0aGVtIGluIHRoZWlyIGNvbnRlbnRpb24gYW5kIGhlbHBlZCB0aGVtIHRvIHJhaXNlIGEgZmFjdGlvbiBhZ2FpbnN0IHRoZSBjaXR5IGluIHRoZSBhc3NlbWJseSBvZiB0aGUgQWNoYWVhbnMuIFRoaXMsIGhvd2V2ZXIsIHdhcyBhdCBhIGxhdGVyIHRpbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIENyZXRlIGhlIHdhZ2VkIHdhciBpbiB0aGUgc2VydmljZSBvZiB0aGUgR29ydHluaWFuczsgbm90IHRoZSBzdHJhaWdodGZvcndhcmQgYW5kIGhvbm91cmFibGUgd2FyZmFyZSBvZiBhIFBlbG9wb25uZXNpYW4gYW5kIEFyY2FkaWFuLCBidXQgb25lIGluIHdoaWNoIGhlIGFkb3B0ZWQgdGhlIENyZXRhbiBwcmFjdGljZXMsIGFuZCB0dXJuaW5nIHRoZWlyIHRyaWNrcyBhbmQgd2lsZXMgYW5kIHN0b2xlbiBtYXJjaGVzIGFuZCBhbWJ1c2NhZGVzIGFnYWluc3QgdGhlbXNlbHZlcywgc3BlZWRpbHkgc2hvd2VkIHRoZW0gdGhhdCB0aGV5IHdlcmUgY2hpbGRyZW4gb3Bwb3NpbmcgZm9vbGlzaCBhbmQgdmFpbiBtaXNjaGlldm91c25lc3MgdG8gZ2VudWluZSBtaWxpdGFyeSBleHBlcmllbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIENyZXRlIGhlIHdhZ2VkIHdhciBpbiB0aGUgc2VydmljZSBvZiB0aGUgR29ydHluaWFuczsgbm90IHRoZSBzdHJhaWdodGZvcndhcmQgYW5kIGhvbm91cmFibGUgd2FyZmFyZSBvZiBhIFBlbG9wb25uZXNpYW4gYW5kIEFyY2FkaWFuLCBidXQgb25lIGluIHdoaWNoIGhlIGFkb3B0ZWQgdGhlIENyZXRhbiBwcmFjdGljZXMsIGFuZCB0dXJuaW5nIHRoZWlyIHRyaWNrcyBhbmQgd2lsZXMgYW5kIHN0b2xlbiBtYXJjaGVzIGFuZCBhbWJ1c2NhZGVzIGFnYWluc3QgdGhlbXNlbHZlcywgc3BlZWRpbHkgc2hvd2VkIHRoZW0gdGhhdCB0aGV5IHdlcmUgY2hpbGRyZW4gb3Bwb3NpbmcgZm9vbGlzaCBhbmQgdmFpbiBtaXNjaGlldm91c25lc3MgdG8gZ2VudWluZSBtaWxpdGFyeSBleHBlcmllbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyB3b24gYWRtaXJhdGlvbiwgYW5kIGhhdmluZyBjb21lIGJhY2sgdG8gUGVsb3Bvbm5lc3VzIHdpdGggYSBicmlsbGlhbnQgcmVwdXRhdGlvbiBmcm9tIGhpcyBleHBsb2l0cyBpbiBDcmV0ZSwgaGUgZm91bmQgdGhhdCBQaGlsaXAgaGFkIGJlZW4gZGVmZWF0ZWQgYW5kIHN1YmR1ZWQgYnkgVGl0dXMgRmxhbWluaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgYmF0dGxlIG9mIEN5bm9zY2VwaGFsYWUsIDE5NyBCLkMuICBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZsYW1pbmludXM8L3RpdGxlPiwgeGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoYXQgdGhlIEFjaGFlYW5zIGFuZCB0aGUgUm9tYW5zIHdlcmUgd2FnaW5nIHdhciB1cG9uIE5hYmlzLiBIZSB3YXMgYXQgb25jZSBjaG9zZW4gZ2VuZXJhbCBhZ2FpbnN0IE5hYmlzLCBhbmQgYnkgaGF6YXJkaW5nIHRoZSBpc3N1ZSBvbiBhIG5hdmFsIGJhdHRsZSB3b3VsZCBzZWVtIHRvIGhhdmUgZmFyZWQgYXMgRXBhbWlub25kYXMgb25jZSBkaWQsIHNpbmNlIGhlIGZvdWdodCBvbiB0aGUgc2VhIGluIGEgbWFubmVyIHdoaWNoIGZlbGwgZmFyIHNob3J0IG9mIGhpcyBncmVhdCByZXB1dGF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5FcGFtaW5vbmRhcywgaG93ZXZlciwgYXMgc29tZSBzYXksIHdhcyByZWx1Y3RhbnQgdG8gZ2l2ZSBoaXMgZmVsbG93LWNpdGl6ZW5zIGEgdGFzdGUgb2YgdGhlIGFkdmFudGFnZXMgYWNjcnVpbmcgZnJvbSBuYXZhbCBzdXBlcmlvcml0eSwgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IG5vdCBzdXJwcmlzZSBoaW0gYnkgYmVjb21pbmcsIGluc3RlYWQgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zdGVhZGZhc3QgaG9wbGl0ZXMsPC9xPiB0byB1c2UgUGxhdG8ncyB3b3Jkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYXQuIExhd3MgNzA2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkxhd3M8L3RpdGxlPiwgaXYuIHAuIDcwNjwvYmlibD4uIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDQuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgaXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGRlZ2VuZXJhdGUgbWFyaW5lcnM7IGFuZCB0aGVyZWZvcmUgaGUgcHVycG9zZWx5IGNhbWUgYmFjayBmcm9tIEFzaWEgYW5kIHRoZSBpc2xhbmRzIHdpdGhvdXQgYWNoaWV2aW5nIGFueXRoaW5nPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY0IEIuQy4sIHR3byB5ZWFycyBiZWZvcmUgaGlzIGRlYXRoLCBFcGFtaW5vbmRhcyBzdWNjZXNzZnVsbHkgaW5hdWd1cmF0ZWQgYSBuYXZhbCBwb2xpY3kgZm9yIFRoZWJlcywgd2hpY2ggZW5hYmxlZCBoZXIgdG8gY29wZSB3aXRoIEF0aGVucyBvbiB0aGUgc2VhLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsb3BvZW1lbiwgb24gdGhlIG90aGVyIGhhbmQsIHdhcyBwZXJzdWFkZWQgdGhhdCBoaXMgc2tpbGwgaW4gaGFuZGxpbmcgbGFuZCBmb3JjZXMgd291bGQgc3VmZmljZSB0byBnaXZlIGhpbSBzdWNjZXNzIGluIGZpZ2h0aW5nIGFsc28gb24gdGhlIHNlYSwgYW5kIHRoZXJlZm9yZSBsZWFybmVkIHRvIGhpcyBjb3N0IGhvdyBsYXJnZSBhIHBhcnQgb2Ygc3VwZXJpb3IgZXhjZWxsZW5jZSBjb25zaXN0cyBpbiBwcmFjdGljZSwgYW5kIGhvdyBtdWNoIGFkZGl0aW9uYWwgcG93ZXIgaXQgZ2l2ZXMgdG8gbWVuIHdobyBoYXZlIGFjY3VzdG9tZWQgdGhlbXNlbHZlcyB0byBhbGwgbWV0aG9kcyBvZiBmaWdodGluZy4gRm9yIG5vdCBvbmx5IHdhcyBoZSB3b3JzdGVkIGluIHRoZSBzZWEtZmlnaHQsIG93aW5nIHRvIGhpcyBsYWNrIG9mIGV4cGVyaWVuY2UsIGJ1dCBoZSBhY3R1YWxseSBsYXVuY2hlZCBhbiBvbGQgYnV0IGZhbW91cyBzaGlwIGFmdGVyIGZvcnR5IHllYXJzIG9mIGRpc3VzZSwgYW5kIG1hbm5lZCBoZXIsIHRoZSByZXN1bHQgYmVpbmcgdGhhdCBoZXIgc2VhbXMgdG9vayBpbiB3YXRlciBhbmQgaGVyIGNyZXcgY2FtZSBpbnRvIHBlcmlsIG9mIHRoZWlyIGxpdmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgd29uIGFkbWlyYXRpb24sIGFuZCBoYXZpbmcgY29tZSBiYWNrIHRvIFBlbG9wb25uZXN1cyB3aXRoIGEgYnJpbGxpYW50IHJlcHV0YXRpb24gZnJvbSBoaXMgZXhwbG9pdHMgaW4gQ3JldGUsIGhlIGZvdW5kIHRoYXQgUGhpbGlwIGhhZCBiZWVuIGRlZmVhdGVkIGFuZCBzdWJkdWVkIGJ5IFRpdHVzIEZsYW1pbmludXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgYmF0dGxlIG9mIEN5bm9zY2VwaGFsYWUsIDE5NyBCLkMuICBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDEzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sIHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGF0IHRoZSBBY2hhZWFucyBhbmQgdGhlIFJvbWFucyB3ZXJlIHdhZ2luZyB3YXIgdXBvbiBOYWJpcy4gSGUgd2FzIGF0IG9uY2UgY2hvc2VuIGdlbmVyYWwgYWdhaW5zdCBOYWJpcywgYW5kIGJ5IGhhemFyZGluZyB0aGUgaXNzdWUgb24gYSBuYXZhbCBiYXR0bGUgd291bGQgc2VlbSB0byBoYXZlIGZhcmVkIGFzIEVwYW1pbm9uZGFzIG9uY2UgZGlkLCBzaW5jZSBoZSBmb3VnaHQgb24gdGhlIHNlYSBpbiBhIG1hbm5lciB3aGljaCBmZWxsIGZhciBzaG9ydCBvZiBoaXMgZ3JlYXQgcmVwdXRhdGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCB4aWlpLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCB4aWlpLjwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzLCBob3dldmVyLCBhcyBzb21lIHNheSwgd2FzIHJlbHVjdGFudCB0byBnaXZlIGhpcyBmZWxsb3ctY2l0aXplbnMgYSB0YXN0ZSBvZiB0aGUgYWR2YW50YWdlcyBhY2NydWluZyBmcm9tIG5hdmFsIHN1cGVyaW9yaXR5LCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgbm90IHN1cnByaXNlIGhpbSBieSBiZWNvbWluZywgaW5zdGVhZCBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3RlYWRmYXN0IGhvcGxpdGVzLDwvcT4gdG8gdXNlIFBsYXRvJ3Mgd29yZHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTGF3cyA3MDYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT4sIGl2LiBwLiA3MDY8L2JpYmw+LiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDQuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCBpdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZGVnZW5lcmF0ZSBtYXJpbmVyczsgYW5kIHRoZXJlZm9yZSBoZSBwdXJwb3NlbHkgY2FtZSBiYWNrIGZyb20gQXNpYSBhbmQgdGhlIGlzbGFuZHMgd2l0aG91dCBhY2hpZXZpbmcgYW55dGhpbmc8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDcwNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPiwgaXYuIHAuIDcwNjwvYmlibD4uIENmLiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3czwvdGl0bGU+LCBpdi4gcC4gNzA2PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gNC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIGl2LiAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIGl2LiAzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY0IEIuQy4sIHR3byB5ZWFycyBiZWZvcmUgaGlzIGRlYXRoLCBFcGFtaW5vbmRhcyBzdWNjZXNzZnVsbHkgaW5hdWd1cmF0ZWQgYSBuYXZhbCBwb2xpY3kgZm9yIFRoZWJlcywgd2hpY2ggZW5hYmxlZCBoZXIgdG8gY29wZSB3aXRoIEF0aGVucyBvbiB0aGUgc2VhLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxvcG9lbWVuLCBvbiB0aGUgb3RoZXIgaGFuZCwgd2FzIHBlcnN1YWRlZCB0aGF0IGhpcyBza2lsbCBpbiBoYW5kbGluZyBsYW5kIGZvcmNlcyB3b3VsZCBzdWZmaWNlIHRvIGdpdmUgaGltIHN1Y2Nlc3MgaW4gZmlnaHRpbmcgYWxzbyBvbiB0aGUgc2VhLCBhbmQgdGhlcmVmb3JlIGxlYXJuZWQgdG8gaGlzIGNvc3QgaG93IGxhcmdlIGEgcGFydCBvZiBzdXBlcmlvciBleGNlbGxlbmNlIGNvbnNpc3RzIGluIHByYWN0aWNlLCBhbmQgaG93IG11Y2ggYWRkaXRpb25hbCBwb3dlciBpdCBnaXZlcyB0byBtZW4gd2hvIGhhdmUgYWNjdXN0b21lZCB0aGVtc2VsdmVzIHRvIGFsbCBtZXRob2RzIG9mIGZpZ2h0aW5nLiBGb3Igbm90IG9ubHkgd2FzIGhlIHdvcnN0ZWQgaW4gdGhlIHNlYS1maWdodCwgb3dpbmcgdG8gaGlzIGxhY2sgb2YgZXhwZXJpZW5jZSwgYnV0IGhlIGFjdHVhbGx5IGxhdW5jaGVkIGFuIG9sZCBidXQgZmFtb3VzIHNoaXAgYWZ0ZXIgZm9ydHkgeWVhcnMgb2YgZGlzdXNlLCBhbmQgbWFubmVkIGhlciwgdGhlIHJlc3VsdCBiZWluZyB0aGF0IGhlciBzZWFtcyB0b29rIGluIHdhdGVyIGFuZCBoZXIgY3JldyBjYW1lIGludG8gcGVyaWwgb2YgdGhlaXIgbGl2ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyc3RhbmRpbmcgdGhhdCBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIGRpc2FzdGVyIGhpcyBlbmVtaWVzIGRlc3Bpc2VkIGhpbSwgdGhpbmtpbmcgdGhhdCBoZSBoYWQgYWx0b2dldGhlciBnaXZlbiB1cCBhY3Rpdml0eSBvbiB0aGUgc2VhLCBhbmQgdGhhdCB0aGV5IHdlcmUgaW5zb2xlbnRseSBiZXNpZWdpbmcgR3l0aGl1bSwgaGUgcHJvbXB0bHkgc2FpbGVkIGFnYWluc3QgdGhlbSB3aGVuIHRoZXkgZGlkIG5vdCBleHBlY3QgaXQgYW5kIHdlcmUgY2FyZWxlc3MgYmVjYXVzZSBvZiB0aGVpciB2aWN0b3J5LiBIZSBsYW5kZWQgaGlzIHNvbGRpZXJzIGJ5IG5pZ2h0IGFuZCBsZWQgdGhlbSB0byB0aGUgYXR0YWNrLCBzZXQgZmlyZSB0byB0aGUgZW5lbXkncyB0ZW50cywgYnVybmVkIGRvd24gaGlzIGNhbXAsIGFuZCBzbGV3IG1hbnkgb2YgaGlzIG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QSBmZXcgZGF5cyBhZnRlcndhcmQsIGFzIGhlIHdhcyBtYXJjaGluZyB0aHJvdWdoIGEgcm91Z2ggY291bnRyeSwgTmFiaXMgY2FtZSBzdWRkZW5seSB1cG9uIGhpbSBhbmQgdGhyZXcgdGhlIEFjaGFlYW5zIGludG8gYSBmcmlnaHQ7IHRoZXkgZGVzcGFpcmVkIG9mIHNhdmluZyB0aGVtc2VsdmVzIGZyb20gYSBwb3NpdGlvbiB3aGljaCB3YXMgZGlmZmljdWx0IGFuZCBhbHJlYWR5IGNvbW1hbmRlZCBieSB0aGUgZW5lbXkuIEJ1dCBQaGlsb3BvZW1lbiB3YWl0ZWQgYSBsaXR0bGUgd2hpbGUsIHN1cnZleWVkIHRoZSBuYXR1cmUgb2YgdGhlIGdyb3VuZCwgYW5kIHRoZW4gZGVtb25zdHJhdGVkIHRoYXQgc2tpbGwgaW4gZHJhd2luZyB1cCBhbiBhcm15IGlzIHRoZSBjcm93bmluZyBmZWF0dXJlIGluIHRoZSBhcnQgb2Ygd2FyLiBGb3IgYnkgY2hhbmdpbmcgaGlzIG9yZGVyIG9mIGJhdHRsZSBhIGxpdHRsZSBhbmQgYWRhcHRpbmcgaXQgdG8gdGhlIHByZXNlbnQgZXhpZ2VuY3ksIHdpdGggbm8gY29uZnVzaW9uIGFuZCBubyB0cm91YmxlIGhlIGV2YWRlZCB0aGUgZGlmZmljdWx0eSwgYW5kIGNoYXJnaW5nIHVwb24gdGhlIGVuZW15IHB1dCB0aGVtIHRvIHV0dGVyIHJvdXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG9ic2VydmluZyB0aGF0IHRoZXkgd2VyZSBub3QgZmxlZWluZyB0b3dhcmRzIHRoZSBjaXR5LCBidXQgc2NhdHRlcmluZyB0aGVtc2VsdmVzIGhpdGhlciBhbmQgdGhpdGhlciB0aHJvdWdoIHRoZSByZWdpb24gKHdoaWNoIHdhcyB3b29keSwgZW50aXJlbHkgc3Vycm91bmRlZCBieSBoaWxscywgYW5kIGltcHJhY3RpY2FibGUgZm9yIGNhdmFscnkgb3dpbmcgdG8gd2F0ZXItY291cnNlcyBhbmQgcmF2aW5lcyksIGhlIGNoZWNrZWQgaGlzIHB1cnN1aXQgYW5kIGVuY2FtcGVkIHdoaWxlIGl0IHdhcyBzdGlsbCBsaWdodC4gQnV0IGp1ZGdpbmcgdGhhdCB0aGUgZW5lbXkgYWZ0ZXIgdGhlaXIgZmxpZ2h0IHdvdWxkIHN0ZWFsIGJhY2sgdG8gdGhlIGNpdHkgYnkgb25lcyBhbmQgdHdvcyB1bmRlciBjb3ZlciBvZiB0aGUgbmlnaHQsIGhlIHBsYWNlZCBsYXJnZSBudW1iZXJzIG9mIGhpcyBBY2hhZWFucyBhcm1lZCB3aXRoIHN3b3JkcyBpbiBhbWJ1c2ggYW1vbmcgdGhlIHdhdGVyLWNvdXJzZXMgYW5kIGhpbGxzIGFib3V0IHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHZlcnkgbWFueSBvZiB0aGUgZm9sbG93ZXJzIG9mIE5hYmlzIG1ldCB0aGVpciBkZWF0aDsgZm9yIHNpbmNlIHRoZXkgZGlkIG5vdCBtYWtlIHRoZWlyIHJldHVybiBpbiBhIGJvZHksIGJ1dCBhcyB0aGUgY2hhbmNlcyBvZiBmbGlnaHQgZGlzcG9zZWQgdGhlbSBzZXZlcmFsbHksIHRoZXkgZmVsbCBpbnRvIHRoZSBoYW5kcyBvZiB0aGVpciBlbmVtaWVzIGFuZCB3ZXJlIGNhdWdodCBsaWtlIGJpcmRzIGFib3V0IHRoZSBjaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyc3RhbmRpbmcgdGhhdCBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIGRpc2FzdGVyIGhpcyBlbmVtaWVzIGRlc3Bpc2VkIGhpbSwgdGhpbmtpbmcgdGhhdCBoZSBoYWQgYWx0b2dldGhlciBnaXZlbiB1cCBhY3Rpdml0eSBvbiB0aGUgc2VhLCBhbmQgdGhhdCB0aGV5IHdlcmUgaW5zb2xlbnRseSBiZXNpZWdpbmcgR3l0aGl1bSwgaGUgcHJvbXB0bHkgc2FpbGVkIGFnYWluc3QgdGhlbSB3aGVuIHRoZXkgZGlkIG5vdCBleHBlY3QgaXQgYW5kIHdlcmUgY2FyZWxlc3MgYmVjYXVzZSBvZiB0aGVpciB2aWN0b3J5LiBIZSBsYW5kZWQgaGlzIHNvbGRpZXJzIGJ5IG5pZ2h0IGFuZCBsZWQgdGhlbSB0byB0aGUgYXR0YWNrLCBzZXQgZmlyZSB0byB0aGUgZW5lbXkncyB0ZW50cywgYnVybmVkIGRvd24gaGlzIGNhbXAsIGFuZCBzbGV3IG1hbnkgb2YgaGlzIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkEgZmV3IGRheXMgYWZ0ZXJ3YXJkLCBhcyBoZSB3YXMgbWFyY2hpbmcgdGhyb3VnaCBhIHJvdWdoIGNvdW50cnksIE5hYmlzIGNhbWUgc3VkZGVubHkgdXBvbiBoaW0gYW5kIHRocmV3IHRoZSBBY2hhZWFucyBpbnRvIGEgZnJpZ2h0OyB0aGV5IGRlc3BhaXJlZCBvZiBzYXZpbmcgdGhlbXNlbHZlcyBmcm9tIGEgcG9zaXRpb24gd2hpY2ggd2FzIGRpZmZpY3VsdCBhbmQgYWxyZWFkeSBjb21tYW5kZWQgYnkgdGhlIGVuZW15LiBCdXQgUGhpbG9wb2VtZW4gd2FpdGVkIGEgbGl0dGxlIHdoaWxlLCBzdXJ2ZXllZCB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQsIGFuZCB0aGVuIGRlbW9uc3RyYXRlZCB0aGF0IHNraWxsIGluIGRyYXdpbmcgdXAgYW4gYXJteSBpcyB0aGUgY3Jvd25pbmcgZmVhdHVyZSBpbiB0aGUgYXJ0IG9mIHdhci4gRm9yIGJ5IGNoYW5naW5nIGhpcyBvcmRlciBvZiBiYXR0bGUgYSBsaXR0bGUgYW5kIGFkYXB0aW5nIGl0IHRvIHRoZSBwcmVzZW50IGV4aWdlbmN5LCB3aXRoIG5vIGNvbmZ1c2lvbiBhbmQgbm8gdHJvdWJsZSBoZSBldmFkZWQgdGhlIGRpZmZpY3VsdHksIGFuZCBjaGFyZ2luZyB1cG9uIHRoZSBlbmVteSBwdXQgdGhlbSB0byB1dHRlciByb3V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG9ic2VydmluZyB0aGF0IHRoZXkgd2VyZSBub3QgZmxlZWluZyB0b3dhcmRzIHRoZSBjaXR5LCBidXQgc2NhdHRlcmluZyB0aGVtc2VsdmVzIGhpdGhlciBhbmQgdGhpdGhlciB0aHJvdWdoIHRoZSByZWdpb24gKHdoaWNoIHdhcyB3b29keSwgZW50aXJlbHkgc3Vycm91bmRlZCBieSBoaWxscywgYW5kIGltcHJhY3RpY2FibGUgZm9yIGNhdmFscnkgb3dpbmcgdG8gd2F0ZXItY291cnNlcyBhbmQgcmF2aW5lcyksIGhlIGNoZWNrZWQgaGlzIHB1cnN1aXQgYW5kIGVuY2FtcGVkIHdoaWxlIGl0IHdhcyBzdGlsbCBsaWdodC4gQnV0IGp1ZGdpbmcgdGhhdCB0aGUgZW5lbXkgYWZ0ZXIgdGhlaXIgZmxpZ2h0IHdvdWxkIHN0ZWFsIGJhY2sgdG8gdGhlIGNpdHkgYnkgb25lcyBhbmQgdHdvcyB1bmRlciBjb3ZlciBvZiB0aGUgbmlnaHQsIGhlIHBsYWNlZCBsYXJnZSBudW1iZXJzIG9mIGhpcyBBY2hhZWFucyBhcm1lZCB3aXRoIHN3b3JkcyBpbiBhbWJ1c2ggYW1vbmcgdGhlIHdhdGVyLWNvdXJzZXMgYW5kIGhpbGxzIGFib3V0IHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdmVyeSBtYW55IG9mIHRoZSBmb2xsb3dlcnMgb2YgTmFiaXMgbWV0IHRoZWlyIGRlYXRoOyBmb3Igc2luY2UgdGhleSBkaWQgbm90IG1ha2UgdGhlaXIgcmV0dXJuIGluIGEgYm9keSwgYnV0IGFzIHRoZSBjaGFuY2VzIG9mIGZsaWdodCBkaXNwb3NlZCB0aGVtIHNldmVyYWxseSwgdGhleSBmZWxsIGludG8gdGhlIGhhbmRzIG9mIHRoZWlyIGVuZW1pZXMgYW5kIHdlcmUgY2F1Z2h0IGxpa2UgYmlyZHMgYWJvdXQgdGhlIGNpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgZXhwbG9pdCBQaGlsb3BvZW1lbiB3YXMgYmVsb3ZlZCBieSB0aGUgR3JlZWtzIGFuZCBjb25zcGljdW91c2x5IGhvbm91cmVkIGJ5IHRoZW0gaW4gdGhlaXIgdGhlYXRyZXMsIHRodXMgZ2l2aW5nIHNlY3JldCB1bWJyYWdlIHRvIFRpdHVzIEZsYW1pbmludXMsIHdobyB3YXMgYW4gYW1iaXRpb3VzIG1hbi4gRm9yIGFzIFJvbWFuIGNvbnN1bCBoZSB0aG91Z2h0IGhpbXNlbGYgbW9yZSB3b3J0aHkgb2YgdGhlIEFjaGFlYW5zJyBhZG1pcmF0aW9uIHRoYW4gYSBtYW4gb2YgQXJjYWRpYSwgYW5kIGhlIGNvbnNpZGVyZWQgdGhhdCBoaXMgYmVuZWZhY3Rpb25zIGZhciBleGNlZWRlZCB0aG9zZSBvZiBQaGlsb3BvZW1lbiwgc2luY2UgYnkgYSBzaW5nbGUgcHJvY2xhbWF0aW9uIGhlIGhhZCBzZXQgZnJlZSBhbGwgdGhvc2UgcGFydHMgb2YgR3JlZWNlIHdoaWNoIGhhZCBiZWVuIHN1YmplY3QgdG8gUGhpbGlwIGFuZCB0aGUgTWFjZWRvbmlhbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GbGFtaW5pbnVzPC90aXRsZT4sIGNoYXB0ZXIgeC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBleHBsb2l0IFBoaWxvcG9lbWVuIHdhcyBiZWxvdmVkIGJ5IHRoZSBHcmVla3MgYW5kIGNvbnNwaWN1b3VzbHkgaG9ub3VyZWQgYnkgdGhlbSBpbiB0aGVpciB0aGVhdHJlcywgdGh1cyBnaXZpbmcgc2VjcmV0IHVtYnJhZ2UgdG8gVGl0dXMgRmxhbWluaW51cywgd2hvIHdhcyBhbiBhbWJpdGlvdXMgbWFuLiBGb3IgYXMgUm9tYW4gY29uc3VsIGhlIHRob3VnaHQgaGltc2VsZiBtb3JlIHdvcnRoeSBvZiB0aGUgQWNoYWVhbnMnIGFkbWlyYXRpb24gdGhhbiBhIG1hbiBvZiBBcmNhZGlhLCBhbmQgaGUgY29uc2lkZXJlZCB0aGF0IGhpcyBiZW5lZmFjdGlvbnMgZmFyIGV4Y2VlZGVkIHRob3NlIG9mIFBoaWxvcG9lbWVuLCBzaW5jZSBieSBhIHNpbmdsZSBwcm9jbGFtYXRpb24gaGUgaGFkIHNldCBmcmVlIGFsbCB0aG9zZSBwYXJ0cyBvZiBHcmVlY2Ugd2hpY2ggaGFkIGJlZW4gc3ViamVjdCB0byBQaGlsaXAgYW5kIHRoZSBNYWNlZG9uaWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgY2hhcHRlciB4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCBjaGFwdGVyIHguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sIGNoYXB0ZXIgeC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIEZsYW1pbmludXMgbWFkZSBwZWFjZSB3aXRoIE5hYmlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDkuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GbGFtaW5pbnVzPC90aXRsZT4sIGl4LiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgTmFiaXMgd2FzIHRyZWFjaGVyb3VzbHkgcHV0IHRvIGRlYXRoIGJ5IHRoZSBBZXRvbGlhbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTkyIEIuQy4gTmFiaXMgaGFkIGNhbGxlZCBpbiB0aGUgQWV0b2xpYW5zIHRvIGhlbHAgaGltIGFnYWluc3QgdGhlIEFjaGFlYW5zIGFuZCBSb21hbnMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM1LjM1IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2LiAzNS0zNzwvYmlibD4pLjwvbm90ZT4gU3BhcnRhIHdhcyB0aGVyZWZvcmUgaW4gYSBzdGF0ZSBvZiBjb25mdXNpb24sIGFuZCBQaGlsb3BvZW1lbiwgc2VpemluZyBoaXMgb3Bwb3J0dW5pdHksIGZlbGwgdXBvbiB0aGUgY2l0eSB3aXRoIGFuIGFybWVkIGZvcmNlLCBhbmQgcGFydGx5IGJ5IGNvbXB1bHNpb24sIHBhcnRseSBieSBwZXJzdWFzaW9uLCBicm91Z2h0IGl0IG92ZXIgdG8gaGlzIHB1cnBvc2VzIGFuZCBtYWRlIGl0IGEgbWVtYmVyIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhY2hpZXZlbWVudCBicm91Z2h0IGhpbSBhbiBhbWF6aW5nIHJlcHV0ZSBhbW9uZyB0aGUgQWNoYWVhbnMsIHNpbmNlIHRocm91Z2ggaGlzIGVmZm9ydHMgdGhleSBoYWQgYWNxdWlyZWQgYSBjaXR5IG9mIHNvIGdyZWF0IGRpZ25pdHkgYW5kIHBvd2VyIChhbmQgaW5kZWVkIGl0IHdhcyBubyBzbGlnaHQgbWF0dGVyIHRoYXQgU3BhcnRhIGhhZCBiZWNvbWUgYSBtZW1iZXIgb2YgdGhlIEFjaGFlYW4gbGVhZ3VlKTsgbW9yZW92ZXIsIFBoaWxvcG9lbWVuIGNhcnJpZWQgd2l0aCBoaW0gdGhlIHByaW5jaXBhbCBtZW4gYW1vbmcgdGhlIFNwYXJ0YW5zLCB3aG8gaG9wZWQgdG8gaGF2ZSBpbiBoaW0gYSBndWFyZGlhbiBvZiB0aGVpciBsaWJlcnRpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWZ0ZXIgdGhleSBoYWQgY29uZmlzY2F0ZWQgdGhlIGhvdXNlIGFuZCBwcm9wZXJ0eSBvZiBOYWJpcyBhbmQgb2J0YWluZWQgdGhlcmVieSBhIGh1bmRyZWQgYW5kIHR3ZW50eSB0YWxlbnRzLCB0aGV5IFZvdGVkIHRvIG1ha2UgYSBwcmVzZW50IG9mIHRoZSBtb25leSB0byBQaGlsb3BvZW1lbiwgYW5kIHRvIHNlbmQgYW4gZW1iYXNzeSB0byBNZWdhbG9wb2xpcyBvbiB0aGUgbWF0dGVyLiBIZXJlLCBpbmRlZWQsIGl0IGJlY2FtZSBwZXJmZWN0bHkgY2xlYXIgdGhhdCBQaGlsb3BvZW1lbiBub3Qgb25seSBzZWVtZWQgdG8gYmUsIGJ1dCBhY3R1YWxseSB3YXMsIGEgbW9zdCBleGNlbGxlbnQgbWFuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyaXN0LiAzLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QXJpc3RpZGVzPC90aXRsZT4sIGlpaS4gNC48L2JpYmw+IAogICAgICAgICAgICA8L25vdGU+IEZvciwgdG8gYmVnaW4gd2l0aCwgbm8gU3BhcnRhbiB3YXMgd2lsbGluZyB0byBjb25mZXIgd2l0aCBhIG1hbiBvZiBoaXMgY2hhcmFjdGVyIGFib3V0IHRoZSBhY2NlcHRhbmNlIG9mIGEgZ2lmdCwgYnV0IHRoZXkgd2VyZSBhbGwgc28gcmVsdWN0YW50IGFuZCBhZnJhaWQgdG8gZG8gaXQgdGhhdCB0aGV5IGVudHJ1c3RlZCB0aGUgYnVzaW5lc3MgdG8gYSBndWVzdC1mcmllbmQgb2YgaGlzLCBUaW1vbGHDvHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBUaW1vbGHDvHMgaGltc2VsZiwgd2hlbiBoZSBjYW1lIHRvIE1lZ2Fsb3BvbGlzLCBoYXZpbmcgYmVlbiBlbnRlcnRhaW5lZCBhdCB0aGUgaG91c2Ugb2YgUGhpbG9wb2VtZW4sIGFuZCBoYXZpbmcgbGVhcm5lZCB0aG9yb3VnaGx5IGhvdyBkaWduaWZpZWQgaGUgd2FzIGluIGhpcyBjb252ZXJzZSB3aXRoIG90aGVycywgaG93IHNpbXBsZSBoaXMgd2F5cyBvZiBsaXZpbmcsIGFuZCBob3cgaGlzIGNoYXJhY3RlciB3YXMgbm93aGVyZSB0byBiZSBhcHByb2FjaGVkIGFuZCBtdWNoIGxlc3MgZWFzeSB0byBiZSBvdmVyY29tZSBieSBicmliZXMsIGhlbGQgaGlzIHBlYWNlIGFib3V0IHRoZSBnaWZ0IG9mIG1vbmV5LCBhbmQgYWZ0ZXIgZ2l2aW5nIHNvbWUgb3RoZXIgZXhjdXNlIGZvciBoaXMgdmlzaXQgdG8gaGltLCB3ZW50IGJhY2sgaG9tZS4gQW5kIHdoZW4gaGUgd2FzIHNlbnQgYSBzZWNvbmQgdGltZSBvbiB0aGUgc2FtZSBlcnJhbmQsIGhlIGRpZCBhcyBiZWZvcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhpcyB0aGlyZCB2aXNpdCwgaG93ZXZlciwgaGUgYXQgbGFzdCBnb3Qgc28gZmFyIGFzIHRvIGFjcXVhaW50IFBoaWxvcG9lbWVuIHdpdGggdGhlIGVhcm5lc3QgZGVzaXJlIG9mIGhpcyBjaXR5LiBUaGVuIFBoaWxvcG9lbWVuLCB3aG8gd2FzIHBsZWFzZWQgYnkgd2hhdCBoZSBoZWFyZCwgd2VudCBpbiBwZXJzb24gdG8gU3BhcnRhLCBhbmQgY291bnNlbGxlZCB0aGUgcGVvcGxlIHRoZXJlIG5vdCB0byB0cnkgdG8gYnJpYmUgZ29vZCBtZW4gd2hvIHdlcmUgdGhlaXIgZnJpZW5kcywgYW5kIGJ5IHdob3NlIHZpcnR1ZXMgdGhleSBjb3VsZCBwcm9maXQgd2l0aG91dCBwYXltZW50IG9mIG1vbmV5LCBidXQgcmF0aGVyIHRvIGJ1eSB1cCBhbmQgY29ycnVwdCB0aGUgYmFkIG1lbiB3aG8gd2VyZSBydWluaW5nIHRoZSBjaXR5IGJ5IHRoZWlyIGZhY3Rpb3VzIGNvbmR1Y3QgaW4gdGhlIGFzc2VtYmx5LCB0byB0aGUgZW5kIHRoYXQgc3VjaCBtaWdodCBoYXZlIHRoZWlyIG1vdXRocyBzdG9wcGVkIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIHZlbmFsaXR5LCBhbmQgc28gaGUgbGVzcyBhbm5veWluZyB0byB0aGVpciBmZWxsb3ctY2l0aXplbnM7IGZvciBpdCB3YXMgYmV0dGVyLCBoZSBzYWlkLCB0byB0YWtlIGF3YXkgZnJlZWRvbSBvZiBzcGVlY2ggZnJvbSB0aGVpciBlbmVtaWVzIHJhdGhlciB0aGFuIGZyb20gdGhlaXIgZnJpZW5kcy4gU3VjaCB3YXMgaGlzIHNwbGVuZGlkIHNwaXJpdCBpbiBtYXR0ZXJzIG9mIG1vbmV5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgRmxhbWluaW51cyBtYWRlIHBlYWNlIHdpdGggTmFiaXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDkuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgaXguIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBOYWJpcyB3YXMgdHJlYWNoZXJvdXNseSBwdXQgdG8gZGVhdGggYnkgdGhlIEFldG9saWFucy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiA5LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sIGl4LiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCBpeC4gNS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE5MiBCLkMuIE5hYmlzIGhhZCBjYWxsZWQgaW4gdGhlIEFldG9saWFucyB0byBoZWxwIGhpbSBhZ2FpbnN0IHRoZSBBY2hhZWFucyBhbmQgUm9tYW5zICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM1LjM1IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2LiAzNS0zNzwvYmlibD4pLjwvbm90ZT4gU3BhcnRhIHdhcyB0aGVyZWZvcmUgaW4gYSBzdGF0ZSBvZiBjb25mdXNpb24sIGFuZCBQaGlsb3BvZW1lbiwgc2VpemluZyBoaXMgb3Bwb3J0dW5pdHksIGZlbGwgdXBvbiB0aGUgY2l0eSB3aXRoIGFuIGFybWVkIGZvcmNlLCBhbmQgcGFydGx5IGJ5IGNvbXB1bHNpb24sIHBhcnRseSBieSBwZXJzdWFzaW9uLCBicm91Z2h0IGl0IG92ZXIgdG8gaGlzIHB1cnBvc2VzIGFuZCBtYWRlIGl0IGEgbWVtYmVyIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDM1LjM1IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHh2LiAzNS0zNzwvYmlibD4pLjwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYWNoaWV2ZW1lbnQgYnJvdWdodCBoaW0gYW4gYW1hemluZyByZXB1dGUgYW1vbmcgdGhlIEFjaGFlYW5zLCBzaW5jZSB0aHJvdWdoIGhpcyBlZmZvcnRzIHRoZXkgaGFkIGFjcXVpcmVkIGEgY2l0eSBvZiBzbyBncmVhdCBkaWduaXR5IGFuZCBwb3dlciAoYW5kIGluZGVlZCBpdCB3YXMgbm8gc2xpZ2h0IG1hdHRlciB0aGF0IFNwYXJ0YSBoYWQgYmVjb21lIGEgbWVtYmVyIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZSk7IG1vcmVvdmVyLCBQaGlsb3BvZW1lbiBjYXJyaWVkIHdpdGggaGltIHRoZSBwcmluY2lwYWwgbWVuIGFtb25nIHRoZSBTcGFydGFucywgd2hvIGhvcGVkIHRvIGhhdmUgaW4gaGltIGEgZ3VhcmRpYW4gb2YgdGhlaXIgbGliZXJ0aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWZ0ZXIgdGhleSBoYWQgY29uZmlzY2F0ZWQgdGhlIGhvdXNlIGFuZCBwcm9wZXJ0eSBvZiBOYWJpcyBhbmQgb2J0YWluZWQgdGhlcmVieSBhIGh1bmRyZWQgYW5kIHR3ZW50eSB0YWxlbnRzLCB0aGV5IFZvdGVkIHRvIG1ha2UgYSBwcmVzZW50IG9mIHRoZSBtb25leSB0byBQaGlsb3BvZW1lbiwgYW5kIHRvIHNlbmQgYW4gZW1iYXNzeSB0byBNZWdhbG9wb2xpcyBvbiB0aGUgbWF0dGVyLiBIZXJlLCBpbmRlZWQsIGl0IGJlY2FtZSBwZXJmZWN0bHkgY2xlYXIgdGhhdCBQaGlsb3BvZW1lbiBub3Qgb25seSBzZWVtZWQgdG8gYmUsIGJ1dCBhY3R1YWxseSB3YXMsIGEgbW9zdCBleGNlbGxlbnQgbWFuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmlzdC4gMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpc3RpZGVzPC90aXRsZT4sIGlpaS4gNC48L2JpYmw+IAogICAgICAgICAgICA8L25vdGU+IEZvciwgdG8gYmVnaW4gd2l0aCwgbm8gU3BhcnRhbiB3YXMgd2lsbGluZyB0byBjb25mZXIgd2l0aCBhIG1hbiBvZiBoaXMgY2hhcmFjdGVyIGFib3V0IHRoZSBhY2NlcHRhbmNlIG9mIGEgZ2lmdCwgYnV0IHRoZXkgd2VyZSBhbGwgc28gcmVsdWN0YW50IGFuZCBhZnJhaWQgdG8gZG8gaXQgdGhhdCB0aGV5IGVudHJ1c3RlZCB0aGUgYnVzaW5lc3MgdG8gYSBndWVzdC1mcmllbmQgb2YgaGlzLCBUaW1vbGHDvHMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJpc3QuIDMuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFyaXN0aWRlczwvdGl0bGU+LCBpaWkuIDQuPC9iaWJsPiAKICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXJpc3RpZGVzPC90aXRsZT4sIGlpaS4gNC48L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBUaW1vbGHDvHMgaGltc2VsZiwgd2hlbiBoZSBjYW1lIHRvIE1lZ2Fsb3BvbGlzLCBoYXZpbmcgYmVlbiBlbnRlcnRhaW5lZCBhdCB0aGUgaG91c2Ugb2YgUGhpbG9wb2VtZW4sIGFuZCBoYXZpbmcgbGVhcm5lZCB0aG9yb3VnaGx5IGhvdyBkaWduaWZpZWQgaGUgd2FzIGluIGhpcyBjb252ZXJzZSB3aXRoIG90aGVycywgaG93IHNpbXBsZSBoaXMgd2F5cyBvZiBsaXZpbmcsIGFuZCBob3cgaGlzIGNoYXJhY3RlciB3YXMgbm93aGVyZSB0byBiZSBhcHByb2FjaGVkIGFuZCBtdWNoIGxlc3MgZWFzeSB0byBiZSBvdmVyY29tZSBieSBicmliZXMsIGhlbGQgaGlzIHBlYWNlIGFib3V0IHRoZSBnaWZ0IG9mIG1vbmV5LCBhbmQgYWZ0ZXIgZ2l2aW5nIHNvbWUgb3RoZXIgZXhjdXNlIGZvciBoaXMgdmlzaXQgdG8gaGltLCB3ZW50IGJhY2sgaG9tZS4gQW5kIHdoZW4gaGUgd2FzIHNlbnQgYSBzZWNvbmQgdGltZSBvbiB0aGUgc2FtZSBlcnJhbmQsIGhlIGRpZCBhcyBiZWZvcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhpcyB0aGlyZCB2aXNpdCwgaG93ZXZlciwgaGUgYXQgbGFzdCBnb3Qgc28gZmFyIGFzIHRvIGFjcXVhaW50IFBoaWxvcG9lbWVuIHdpdGggdGhlIGVhcm5lc3QgZGVzaXJlIG9mIGhpcyBjaXR5LiBUaGVuIFBoaWxvcG9lbWVuLCB3aG8gd2FzIHBsZWFzZWQgYnkgd2hhdCBoZSBoZWFyZCwgd2VudCBpbiBwZXJzb24gdG8gU3BhcnRhLCBhbmQgY291bnNlbGxlZCB0aGUgcGVvcGxlIHRoZXJlIG5vdCB0byB0cnkgdG8gYnJpYmUgZ29vZCBtZW4gd2hvIHdlcmUgdGhlaXIgZnJpZW5kcywgYW5kIGJ5IHdob3NlIHZpcnR1ZXMgdGhleSBjb3VsZCBwcm9maXQgd2l0aG91dCBwYXltZW50IG9mIG1vbmV5LCBidXQgcmF0aGVyIHRvIGJ1eSB1cCBhbmQgY29ycnVwdCB0aGUgYmFkIG1lbiB3aG8gd2VyZSBydWluaW5nIHRoZSBjaXR5IGJ5IHRoZWlyIGZhY3Rpb3VzIGNvbmR1Y3QgaW4gdGhlIGFzc2VtYmx5LCB0byB0aGUgZW5kIHRoYXQgc3VjaCBtaWdodCBoYXZlIHRoZWlyIG1vdXRocyBzdG9wcGVkIGluIGNvbnNlcXVlbmNlIG9mIHRoZWlyIHZlbmFsaXR5LCBhbmQgc28gaGUgbGVzcyBhbm5veWluZyB0byB0aGVpciBmZWxsb3ctY2l0aXplbnM7IGZvciBpdCB3YXMgYmV0dGVyLCBoZSBzYWlkLCB0byB0YWtlIGF3YXkgZnJlZWRvbSBvZiBzcGVlY2ggZnJvbSB0aGVpciBlbmVtaWVzIHJhdGhlciB0aGFuIGZyb20gdGhlaXIgZnJpZW5kcy4gU3VjaCB3YXMgaGlzIHNwbGVuZGlkIHNwaXJpdCBpbiBtYXR0ZXJzIG9mIG1vbmV5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Tb29uLCBob3dldmVyLCBEaW9waGFuZXMsIHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZSwgaGVhcmluZyB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIG9uY2UgbW9yZSBhZ2l0YXRpbmcgZm9yIGEgY2hhbmdlLCBkZXRlcm1pbmVkIHRvIHB1bmlzaCB0aGVtLCBhbmQgdGhlIExhY2VkYWVtb25pYW5zIGRldGVybWluaW5nIHVwb24gd2FyLCB3ZXJlIHRocm93aW5nIHRoZSBQZWxvcG9ubmVzdXMgaW50byBjb25mdXNpb24uIEhlcmUgUGhpbG9wb2VtZW4gdHJpZWQgdG8gbW9sbGlmeSBEaW9waGFuZXMgYW5kIHB1dCBhIHN0b3AgdG8gaGlzIHdyYXRoLCBzaG93aW5nIGhpbSB3aGF0IHRoZSBvY2Nhc2lvbiBkZW1hbmRlZCwgYW5kIHRoYXQgc2luY2UgS2luZyBBbnRpb2NodXMgYW5kIHRoZSBSb21hbnMgd2VyZSBob3ZlcmluZyBhYm91dCBpbiBHcmVlY2Ugd2l0aCBhcm1pZXMgc28gZ3JlYXQsIGl0IGJlaG92ZWQgdGhlIGdlbmVyYWwgb2YgdGhlIGxlYWd1ZSB0byBwYXkgYXR0ZW50aW9uIHRvIHRoZW0sIGFuZCBub3QgdG8gc3RpciB1cCBkb21lc3RpYyB0cm91YmxlcywgYnV0IGV2ZW4gdG8gYmUgc29tZXdoYXQgb2JsaXZpb3VzIHRvIHRoZSB0cmFuc2dyZXNzaW9ucyBvZiBoaXMgY29sbGVhZ3Vlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RGlvcGhhbmVzLCBob3dldmVyLCBwYWlkIG5vIGhlZWQgdG8gdGhpcyBhZHZpY2UsIGJ1dCBpbnZhZGVkIExhY29uaWEgYWxvbmcgd2l0aCBUaXR1cyBGbGFtaW5pbnVzLCBhbmQgbWFyY2hlZCBkaXJlY3RseSB1cG9uIHRoZSBjaXR5IG9mIFNwYXJ0YS4gSW5jZW5zZWQgYXQgdGhpcywgUGhpbG9wb2VtZW4gdmVudHVyZWQgdXBvbiBhbiBhY3Qgd2hpY2ggd2FzIG5vdCBsYXdmdWwsIG5vciBldmVuIGV4YWN0bHkganVzdCwgYnV0IGdyZWF0IGFuZCBwcm9tcHRlZCBieSBhIGdyZWF0IHNwaXJpdC4gSGUgd2VudCBvbiBwYXN0IHRoZW0gaW50byBTcGFydGEsIGFuZCwgcHJpdmF0ZSBtYW4gdGhvdWdoIGhlIHdhcywgc2h1dCBvdXQgdGhlcmVmcm9tIGJvdGggdGhlIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW4gbGVhZ3VlIGFuZCB0aGUgUm9tYW4gY29uc3VsLCBwdXQgYW4gZW5kIHRvIHRoZSBkaXNvcmRlcnMgaW4gdGhlIGNpdHksIGFuZCBicm91Z2h0IHRoZSBMYWNlZGFlbW9uaWFucyBiYWNrIGFnYWluIGludG8gdGhlIGxlYWd1ZSwgYXMgdGhleSB3ZXJlIGF0IHRoZSBvdXRzZXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U29vbiwgaG93ZXZlciwgRGlvcGhhbmVzLCB0aGUgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbiBsZWFndWUsIGhlYXJpbmcgdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBvbmNlIG1vcmUgYWdpdGF0aW5nIGZvciBhIGNoYW5nZSwgZGV0ZXJtaW5lZCB0byBwdW5pc2ggdGhlbSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyBkZXRlcm1pbmluZyB1cG9uIHdhciwgd2VyZSB0aHJvd2luZyB0aGUgUGVsb3Bvbm5lc3VzIGludG8gY29uZnVzaW9uLiBIZXJlIFBoaWxvcG9lbWVuIHRyaWVkIHRvIG1vbGxpZnkgRGlvcGhhbmVzIGFuZCBwdXQgYSBzdG9wIHRvIGhpcyB3cmF0aCwgc2hvd2luZyBoaW0gd2hhdCB0aGUgb2NjYXNpb24gZGVtYW5kZWQsIGFuZCB0aGF0IHNpbmNlIEtpbmcgQW50aW9jaHVzIGFuZCB0aGUgUm9tYW5zIHdlcmUgaG92ZXJpbmcgYWJvdXQgaW4gR3JlZWNlIHdpdGggYXJtaWVzIHNvIGdyZWF0LCBpdCBiZWhvdmVkIHRoZSBnZW5lcmFsIG9mIHRoZSBsZWFndWUgdG8gcGF5IGF0dGVudGlvbiB0byB0aGVtLCBhbmQgbm90IHRvIHN0aXIgdXAgZG9tZXN0aWMgdHJvdWJsZXMsIGJ1dCBldmVuIHRvIGJlIHNvbWV3aGF0IG9ibGl2aW91cyB0byB0aGUgdHJhbnNncmVzc2lvbnMgb2YgaGlzIGNvbGxlYWd1ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb3BoYW5lcywgaG93ZXZlciwgcGFpZCBubyBoZWVkIHRvIHRoaXMgYWR2aWNlLCBidXQgaW52YWRlZCBMYWNvbmlhIGFsb25nIHdpdGggVGl0dXMgRmxhbWluaW51cywgYW5kIG1hcmNoZWQgZGlyZWN0bHkgdXBvbiB0aGUgY2l0eSBvZiBTcGFydGEuIEluY2Vuc2VkIGF0IHRoaXMsIFBoaWxvcG9lbWVuIHZlbnR1cmVkIHVwb24gYW4gYWN0IHdoaWNoIHdhcyBub3QgbGF3ZnVsLCBub3IgZXZlbiBleGFjdGx5IGp1c3QsIGJ1dCBncmVhdCBhbmQgcHJvbXB0ZWQgYnkgYSBncmVhdCBzcGlyaXQuIEhlIHdlbnQgb24gcGFzdCB0aGVtIGludG8gU3BhcnRhLCBhbmQsIHByaXZhdGUgbWFuIHRob3VnaCBoZSB3YXMsIHNodXQgb3V0IHRoZXJlZnJvbSBib3RoIHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFuIGxlYWd1ZSBhbmQgdGhlIFJvbWFuIGNvbnN1bCwgcHV0IGFuIGVuZCB0byB0aGUgZGlzb3JkZXJzIGluIHRoZSBjaXR5LCBhbmQgYnJvdWdodCB0aGUgTGFjZWRhZW1vbmlhbnMgYmFjayBhZ2FpbiBpbnRvIHRoZSBsZWFndWUsIGFzIHRoZXkgd2VyZSBhdCB0aGUgb3V0c2V0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhIGxhdGVyIHRpbWUsIGhvd2V2ZXIsIHdoZW4gaGUgaGFkIHNvbWUgZ3JvdW5kIGZvciBhY2N1c2F0aW9uIGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW5zLCBhcyBnZW5lcmFsIG9mIHRoZSBsZWFndWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QaGlsb3BvZW1lbiB3YXMgZm9yIHRoZSBzaXh0aCB0aW1lIGdlbmVyYWwgaW4gMTg4IEIuQy48L25vdGU+IFBoaWxvcG9lbWVuIGJyb3VnaHQgYmFjayBpdHMgZXhpbGVzIHRvIHRoZSBjaXR5LCBhbmQgcHV0IHRvIGRlYXRoIGVpZ2h0eSBTcGFydGFucywgYWNjb3JkaW5nIHRvIFBvbHliaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGEgcGFzc2FnZSBub3QgZXh0YW50LiBMaXZ5IGdpdmVzIHRoZSBzYW1lIG51bWJlciAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzguMzMiIHZhbGlkPSJ5ZXMiPnh4eHZpaWkuIDMzPC9iaWJsPikuPC9ub3RlPiBvciBhY2NvcmRpbmcgdG8gQXJpc3RvY3JhdGVzLCB0aHJlZSBodW5kcmVkIGFuZCBmaWZ0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyB0b3JlIGRvd24gdGhlIHdhbGxzIG9mIHRoZSBjaXR5LCBhbmQgY3V0dGluZyBvZmYgYSBsYXJnZSBwYXJ0IG9mIGl0cyB0ZXJyaXRvcnksIGFubmV4ZWQgaXQgdG8gTWVnYWxvcG9saXM7IG1vcmVvdmVyLCBpbiB0aGUgY2FzZSBvZiB0aG9zZSB3aG8gaGFkIGJlZW4gbWFkZSBjaXRpemVucyBvZiBTcGFydGEgYnkgdGhlIHR5cmFudHMsIGhlIHJlbW92ZWQgdGhlbSBhbGwgaW50byBBY2hhaWEsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aHJlZSB0aG91c2FuZCB3aG8gd291bGQgbm90IG9iZXkgaGltIGFuZCB3ZXJlIHVud2lsbGluZyB0byBnbyBhd2F5IGZyb20gU3BhcnRhLiBUaGVzZSBoZSBzb2xkIGludG8gc2xhdmVyeSwgYW5kIHRoZW4sIGFzIGlmIGluIG1vY2tlcnkgb2YgdGhlaXIgZmF0ZSwgZXJlY3RlZCBhIHBvcnRpY28gaW4gTWVnYWxvcG9saXMgd2l0aCB0aGUgbW9uZXkgd2hpY2ggdGhleSBicm91Z2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCBnbHV0dGluZyBoaXMgYW5nZXIgYXQgdGhlIExhY2VkYWVtb25pYW5zIGFuZCB1bndvcnRoaWx5IHRyYW1wbGluZyB1cG9uIHRoZW0gaW4gdGhlaXIgbWlzZXJ5LCBoZSB0cmVhdGVkIHRoZWlyIGNvbnN0aXR1dGlvbiBpbiB0aGUgbW9zdCBjcnVlbCBhbmQgbW9zdCBsYXdsZXNzIGZhc2hpb24uIEZvciBoZSB0b29rIGF3YXkgYW5kIGFib2xpc2hlZCB0aGUgc3lzdGVtIG9mIHRyYWluaW5nIHdoaWNoIEx5Y3VyZ3VzIGhhZCBpbnN0aXR1dGVkLCBhbmQgY29tcGVsbGVkIHRoZWlyIGJveXMgYW5kIHRoZWlyIHlvdW5nIG1lbiB0byBhZG9wdCB0aGUgQWNoYWVhbiBpbiBwbGFjZSBvZiB0aGVpciBoZXJlZGl0YXJ5IGRpc2NpcGxpbmUsIGJlaW5nIGNvbnZpbmNlZCB0aGF0IHdoaWxlIHRoZXkgd2VyZSB1bmRlciB0aGUgbGF3cyBvZiBMeWN1cmd1cyB0aGV5IHdvdWxkIG5ldmVyIGJlIGh1bWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGEgbGF0ZXIgdGltZSwgaG93ZXZlciwgd2hlbiBoZSBoYWQgc29tZSBncm91bmQgZm9yIGFjY3VzYXRpb24gYWdhaW5zdCB0aGUgTGFjZWRhZW1vbmlhbnMsIGFzIGdlbmVyYWwgb2YgdGhlIGxlYWd1ZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGhpbG9wb2VtZW4gd2FzIGZvciB0aGUgc2l4dGggdGltZSBnZW5lcmFsIGluIDE4OCBCLkMuPC9ub3RlPiBQaGlsb3BvZW1lbiBicm91Z2h0IGJhY2sgaXRzIGV4aWxlcyB0byB0aGUgY2l0eSwgYW5kIHB1dCB0byBkZWF0aCBlaWdodHkgU3BhcnRhbnMsIGFjY29yZGluZyB0byBQb2x5Yml1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGEgcGFzc2FnZSBub3QgZXh0YW50LiBMaXZ5IGdpdmVzIHRoZSBzYW1lIG51bWJlciAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOC4zMyIgdmFsaWQ9InllcyI+eHh4dmlpaS4gMzM8L2JpYmw+KS48L25vdGU+IG9yIGFjY29yZGluZyB0byBBcmlzdG9jcmF0ZXMsIHRocmVlIGh1bmRyZWQgYW5kIGZpZnR5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzguMzMiIHZhbGlkPSJ5ZXMiPnh4eHZpaWkuIDMzPC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gdG9yZSBkb3duIHRoZSB3YWxscyBvZiB0aGUgY2l0eSwgYW5kIGN1dHRpbmcgb2ZmIGEgbGFyZ2UgcGFydCBvZiBpdHMgdGVycml0b3J5LCBhbm5leGVkIGl0IHRvIE1lZ2Fsb3BvbGlzOyBtb3Jlb3ZlciwgaW4gdGhlIGNhc2Ugb2YgdGhvc2Ugd2hvIGhhZCBiZWVuIG1hZGUgY2l0aXplbnMgb2YgU3BhcnRhIGJ5IHRoZSB0eXJhbnRzLCBoZSByZW1vdmVkIHRoZW0gYWxsIGludG8gQWNoYWlhLCB3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhyZWUgdGhvdXNhbmQgd2hvIHdvdWxkIG5vdCBvYmV5IGhpbSBhbmQgd2VyZSB1bndpbGxpbmcgdG8gZ28gYXdheSBmcm9tIFNwYXJ0YS4gVGhlc2UgaGUgc29sZCBpbnRvIHNsYXZlcnksIGFuZCB0aGVuLCBhcyBpZiBpbiBtb2NrZXJ5IG9mIHRoZWlyIGZhdGUsIGVyZWN0ZWQgYSBwb3J0aWNvIGluIE1lZ2Fsb3BvbGlzIHdpdGggdGhlIG1vbmV5IHdoaWNoIHRoZXkgYnJvdWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGdsdXR0aW5nIGhpcyBhbmdlciBhdCB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHVud29ydGhpbHkgdHJhbXBsaW5nIHVwb24gdGhlbSBpbiB0aGVpciBtaXNlcnksIGhlIHRyZWF0ZWQgdGhlaXIgY29uc3RpdHV0aW9uIGluIHRoZSBtb3N0IGNydWVsIGFuZCBtb3N0IGxhd2xlc3MgZmFzaGlvbi4gRm9yIGhlIHRvb2sgYXdheSBhbmQgYWJvbGlzaGVkIHRoZSBzeXN0ZW0gb2YgdHJhaW5pbmcgd2hpY2ggTHljdXJndXMgaGFkIGluc3RpdHV0ZWQsIGFuZCBjb21wZWxsZWQgdGhlaXIgYm95cyBhbmQgdGhlaXIgeW91bmcgbWVuIHRvIGFkb3B0IHRoZSBBY2hhZWFuIGluIHBsYWNlIG9mIHRoZWlyIGhlcmVkaXRhcnkgZGlzY2lwbGluZSwgYmVpbmcgY29udmluY2VkIHRoYXQgd2hpbGUgdGhleSB3ZXJlIHVuZGVyIHRoZSBsYXdzIG9mIEx5Y3VyZ3VzIHRoZXkgd291bGQgbmV2ZXIgYmUgaHVtYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHRpbWUgYmVpbmcsIHRoZW4sIG93aW5nIHRvIHRoZWlyIGdyZWF0IGNhbGFtaXRpZXMsIHRoZSBTcGFydGFucyBzdWZmZXJlZCBQaGlsb3BvZW1lbiB0byBjdXQgYXdheSwgYXMgaXQgd2VyZSwgdGhlIHNpbmV3cyBvZiB0aGVpciBjaXR5LCBhbmQgYmVjYW1lIHRyYWN0YWJsZSBhbmQgc3VibWlzc2l2ZTsgYnV0IGEgd2hpbGUgYWZ0ZXJ3YXJkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxODQgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuMzQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGl4LiAzNDwvYmlibD4pLjwvbm90ZT4gaGF2aW5nIG9idGFpbmVkIHBlcm1pc3Npb24gZnJvbSB0aGUgUm9tYW5zLCB0aGV5IGFiYW5kb25lZCB0aGUgQWNoYWVhbiBwb2xpdHksIGFuZCByZXN1bWVkIGFuZCByZS1lc3RhYmxpc2hlZCB0aGF0IHdoaWNoIGhhZCBjb21lIGRvd24gZnJvbSB0aGVpciBmYXRoZXJzLCBzbyBmYXIgYXMgd2FzIHBvc3NpYmxlIGFmdGVyIHRoZWlyIG1hbnkgbWlzZm9ydHVuZXMgYW5kIGdyZWF0IGRlZ2VuZXJhdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgdGltZSBiZWluZywgdGhlbiwgb3dpbmcgdG8gdGhlaXIgZ3JlYXQgY2FsYW1pdGllcywgdGhlIFNwYXJ0YW5zIHN1ZmZlcmVkIFBoaWxvcG9lbWVuIHRvIGN1dCBhd2F5LCBhcyBpdCB3ZXJlLCB0aGUgc2luZXdzIG9mIHRoZWlyIGNpdHksIGFuZCBiZWNhbWUgdHJhY3RhYmxlIGFuZCBzdWJtaXNzaXZlOyBidXQgYSB3aGlsZSBhZnRlcndhcmRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTg0IEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzkuMzQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eGl4LiAzNDwvYmlibD4pLjwvbm90ZT4gaGF2aW5nIG9idGFpbmVkIHBlcm1pc3Npb24gZnJvbSB0aGUgUm9tYW5zLCB0aGV5IGFiYW5kb25lZCB0aGUgQWNoYWVhbiBwb2xpdHksIGFuZCByZXN1bWVkIGFuZCByZS1lc3RhYmxpc2hlZCB0aGF0IHdoaWNoIGhhZCBjb21lIGRvd24gZnJvbSB0aGVpciBmYXRoZXJzLCBzbyBmYXIgYXMgd2FzIHBvc3NpYmxlIGFmdGVyIHRoZWlyIG1hbnkgbWlzZm9ydHVuZXMgYW5kIGdyZWF0IGRlZ2VuZXJhdGlvbi4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzOS4zNCIgdmFsaWQ9InllcyI+TGl2eSwgeHh4aXguIDM0PC9iaWJsPikuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgUm9tYW5zIHdlbnQgdG8gd2FyIHdpdGggQW50aW9jaHVzIGluIEdyZWVjZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxOTEgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZsYW1pbmludXM8L3RpdGxlPiwgeHYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFBoaWxvcG9lbWVuIHdhcyB3aXRob3V0IGNvbW1hbmQsIGFuZCBzZWVpbmcgdGhhdCBBbnRpb2NodXMgaGltc2VsZiB3YXMgc2l0dGluZyBpZGx5IGRvd24gaW4gQ2hhbGNpcyBhbmQgc3BlbmRpbmcgaGlzIHRpbWUgaW4gYSBjb3VydHNoaXAgYW5kIG1hcnJpYWdlIHdoaWNoIHdlcmUgbm90IHN1aXRlZCB0byBoaXMgeWVhcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5GbGFtaW5pbnVzPC90aXRsZT4sICB4dmkuIGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoaWxlIGhpcyBTeXJpYW4gdHJvb3BzLCBpbiBncmVhdCBkaXNvcmRlciBhbmQgd2l0aG91dCBsZWFkZXJzLCB3ZXJlIHdhbmRlcmluZyBhYm91dCBhbW9uZyB0aGUgY2l0aWVzIGFuZCBsaXZpbmcgbHV4dXJpb3VzbHksIGhlIHdhcyBkaXN0cmVzc2VkIGJlY2F1c2UgaGUgd2FzIG5vdCBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyBhdCB0aGF0IHRpbWUsIGFuZCBrZXB0IHNheWluZyB0aGF0IGhlIGJlZ3J1ZGdlZCB0aGUgUm9tYW5zIHRoZWlyIHZpY3RvcnkuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGlmIEkgaGFkIGJlZW4gZ2VuZXJhbCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3b3VsZCBoYXZlIGN1dCBvZmYgYWxsIHRoZXNlIGZlbGxvd3MgaW4gdGhlaXIgdGF2ZXJucy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNvb24gdGhlIFJvbWFucywgYWZ0ZXIgY29ucXVlcmluZyBBbnRpb2NodXMsIGFwcGxpZWQgdGhlbXNlbHZlcyBtb3JlIGNsb3NlbHkgdG8gdGhlIGFmZmFpcnMgb2YgR3JlZWNlLiBUaGV5IGVuY29tcGFzc2VkIHRoZSBBY2hhZWFuIGxlYWd1ZSB3aXRoIHRoZWlyIHBvd2VyLCBzaW5jZSB0aGUgcG9wdWxhciBsZWFkZXJzIGdyYWR1YWxseSBpbmNsaW5lZCB0byB0aGVpciBzdXBwb3J0OyB0aGVpciBzdHJlbmd0aCwgdW5kZXIgdGhlIGd1aWRhbmNlIG9mIHRoZSBoZWF2ZW5seSBwb3dlcnMsIGdyZXcgZ3JlYXQgaW4gYWxsIGRpcmVjdGlvbnM7IGFuZCB0aGUgY29uc3VtbWF0aW9uIHdhcyBuZWFyIHRvIHdoaWNoIHRoZSBmb3J0dW5lcyBvZiBHcmVlY2UgbXVzdCBjb21lIGluIHRoZWlyIGFsbG90dGVkIHJldm9sdXRpb24uIEhlcmUgUGhpbG9wb2VtZW4sIGxpa2UgYSBnb29kIGhlbG1zbWFuIGNvbnRlbmRpbmcgYWdhaW5zdCBhIGhpZ2ggc2VhLCB3YXMgaW4gc29tZSBwb2ludHMgY29tcGVsbGVkIHRvIGdpdmUgaW4gYW5kIHlpZWxkIHRvIHRoZSB0aW1lczsgYnV0IGluIG1vc3QgaGUgY29udGludWVkIGhpcyBvcHBvc2l0aW9uLCBhcmlkIHRyaWVkIHRvIGRyYXcgdG8gdGhlIHN1cHBvcnQgb2YgZnJlZWRvbSB0aGUgbWVuIHdobyB3ZXJlIHBvd2VyZnVsIGluIHNwZWVjaCBvciBhY3Rpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgUm9tYW5zIHdlbnQgdG8gd2FyIHdpdGggQW50aW9jaHVzIGluIEdyZWVjZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE5MSBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgeHYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFBoaWxvcG9lbWVuIHdhcyB3aXRob3V0IGNvbW1hbmQsIGFuZCBzZWVpbmcgdGhhdCBBbnRpb2NodXMgaGltc2VsZiB3YXMgc2l0dGluZyBpZGx5IGRvd24gaW4gQ2hhbGNpcyBhbmQgc3BlbmRpbmcgaGlzIHRpbWUgaW4gYSBjb3VydHNoaXAgYW5kIG1hcnJpYWdlIHdoaWNoIHdlcmUgbm90IHN1aXRlZCB0byBoaXMgeWVhcnMsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgeHYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sIHh2Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmxhbWluaW51czwvdGl0bGU+LCAgeHZpLiBpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGlsZSBoaXMgU3lyaWFuIHRyb29wcywgaW4gZ3JlYXQgZGlzb3JkZXIgYW5kIHdpdGhvdXQgbGVhZGVycywgd2VyZSB3YW5kZXJpbmcgYWJvdXQgYW1vbmcgdGhlIGNpdGllcyBhbmQgbGl2aW5nIGx1eHVyaW91c2x5LCBoZSB3YXMgZGlzdHJlc3NlZCBiZWNhdXNlIGhlIHdhcyBub3QgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMgYXQgdGhhdCB0aW1lLCBhbmQga2VwdCBzYXlpbmcgdGhhdCBoZSBiZWdydWRnZWQgdGhlIFJvbWFucyB0aGVpciB2aWN0b3J5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sICB4dmkuIGkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sICB4dmkuIGkuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgaWYgSSBoYWQgYmVlbiBnZW5lcmFsLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgaGF2ZSBjdXQgb2ZmIGFsbCB0aGVzZSBmZWxsb3dzIGluIHRoZWlyIHRhdmVybnMuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uIHRoZSBSb21hbnMsIGFmdGVyIGNvbnF1ZXJpbmcgQW50aW9jaHVzLCBhcHBsaWVkIHRoZW1zZWx2ZXMgbW9yZSBjbG9zZWx5IHRvIHRoZSBhZmZhaXJzIG9mIEdyZWVjZS4gVGhleSBlbmNvbXBhc3NlZCB0aGUgQWNoYWVhbiBsZWFndWUgd2l0aCB0aGVpciBwb3dlciwgc2luY2UgdGhlIHBvcHVsYXIgbGVhZGVycyBncmFkdWFsbHkgaW5jbGluZWQgdG8gdGhlaXIgc3VwcG9ydDsgdGhlaXIgc3RyZW5ndGgsIHVuZGVyIHRoZSBndWlkYW5jZSBvZiB0aGUgaGVhdmVubHkgcG93ZXJzLCBncmV3IGdyZWF0IGluIGFsbCBkaXJlY3Rpb25zOyBhbmQgdGhlIGNvbnN1bW1hdGlvbiB3YXMgbmVhciB0byB3aGljaCB0aGUgZm9ydHVuZXMgb2YgR3JlZWNlIG11c3QgY29tZSBpbiB0aGVpciBhbGxvdHRlZCByZXZvbHV0aW9uLiBIZXJlIFBoaWxvcG9lbWVuLCBsaWtlIGEgZ29vZCBoZWxtc21hbiBjb250ZW5kaW5nIGFnYWluc3QgYSBoaWdoIHNlYSwgd2FzIGluIHNvbWUgcG9pbnRzIGNvbXBlbGxlZCB0byBnaXZlIGluIGFuZCB5aWVsZCB0byB0aGUgdGltZXM7IGJ1dCBpbiBtb3N0IGhlIGNvbnRpbnVlZCBoaXMgb3Bwb3NpdGlvbiwgYXJpZCB0cmllZCB0byBkcmF3IHRvIHRoZSBzdXBwb3J0IG9mIGZyZWVkb20gdGhlIG1lbiB3aG8gd2VyZSBwb3dlcmZ1bCBpbiBzcGVlY2ggb3IgYWN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzdGFlbnVzIHRoZSBNZWdhbG9wb2xpdGFuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxMy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdhcyBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGFtb25nIHRoZSBBY2hhZWFucywgYnV0IGhlIGFsd2F5cyBwYWlkIGNvdXJ0IHRvIHRoZSBSb21hbnMgYW5kIHRob3VnaHQgdGhhdCB0aGUgQWNoYWVhbnMgb3VnaHQgbm90IHRvIG9wcG9zZSBvciBkaXNwbGVhc2UgdGhlbSBpbiBhbnkgd2F5LiBBcyB0aGlzIG1hbiB3YXMgb25jZSBzcGVha2luZyBpbiB0aGUgYXNzZW1ibHksIHdlIGFyZSB0b2xkIHRoYXQgUGhpbG9wb2VtZW4gbGlzdGVuZWQgdG8gaGltIGEgd2hpbGUgaW4gc2lsZW50IGluZGlnbmF0aW9uLCBidXQgYXQgbGFzdCwgb3ZlcmNvbWUgYnkgYW5nZXIsIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IG1hbiwgd2h5IGFydCB0aG91IGVhZ2VyIHRvIGJlaG9sZCB0aGUgZmF0ZWQgZW5kIG9mIEdyZWVjZT88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIE1hbml1cywgdGhlIFJvbWFuIGNvbnN1bCwgYWZ0ZXIgaGlzIHZpY3Rvcnkgb3ZlciBBbnRpb2NodXMsIGFza2VkIHRoZSBBY2hhZWFucyB0byBwZXJtaXQgdGhlIGV4aWxlcyBmcm9tIFNwYXJ0YSB0byBnbyBiYWNrIGhvbWUsIGFuZCBUaXR1cyBGbGFtaW5pbnVzIGpvaW5lZCBNYW5pdXMgaW4gbWFraW5nIHRoaXMgcmVxdWVzdC4gQnV0IFBoaWxvcG9lbWVuIHN1Y2Nlc3NmdWxseSBvcHBvc2VkIHRoZSByZXF1ZXN0LCBub3Qgb3V0IG9mIGhvc3RpbGl0eSB0byB0aGUgZXhpbGVzLCBidXQgZnJvbSBhIGRlc2lyZSB0aGF0IHRoZXkgc2hvdWxkIG93ZSB0aGlzIGZhdm91ciB0byBoaW1zZWxmIGFuZCB0aGUgQWNoYWVhbnMsIGFuZCBub3QgdG8gRmxhbWluaW51cyBhbmQgdGhlIFJvbWFuczsgaW5kZWVkLCBhcyBnZW5lcmFsIGZvciB0aGUgZm9sbG93aW5nIHllYXIgaGUgcmVzdG9yZWQgdGhlIGV4aWxlcyB0byB0aGVpciBjaXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhpbC4gMTMuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUbyBzdWNoIGEgZGVncmVlIGRpZCBoaXMgbG9mdHkgc3Bpcml0IGxlYWQgaGltIHRvIHN0cml2ZSBhbmQgY29udGVuZCBhZ2FpbnN0IG1lbiBpbiBwb3dlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyaXN0YWVudXMgdGhlIE1lZ2Fsb3BvbGl0YW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxMy40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdhcyBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGFtb25nIHRoZSBBY2hhZWFucywgYnV0IGhlIGFsd2F5cyBwYWlkIGNvdXJ0IHRvIHRoZSBSb21hbnMgYW5kIHRob3VnaHQgdGhhdCB0aGUgQWNoYWVhbnMgb3VnaHQgbm90IHRvIG9wcG9zZSBvciBkaXNwbGVhc2UgdGhlbSBpbiBhbnkgd2F5LiBBcyB0aGlzIG1hbiB3YXMgb25jZSBzcGVha2luZyBpbiB0aGUgYXNzZW1ibHksIHdlIGFyZSB0b2xkIHRoYXQgUGhpbG9wb2VtZW4gbGlzdGVuZWQgdG8gaGltIGEgd2hpbGUgaW4gc2lsZW50IGluZGlnbmF0aW9uLCBidXQgYXQgbGFzdCwgb3ZlcmNvbWUgYnkgYW5nZXIsIHNhaWQgdG8gaGltOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBoaWwuIDEzLjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFuLCB3aHkgYXJ0IHRob3UgZWFnZXIgdG8gYmVob2xkIHRoZSBmYXRlZCBlbmQgb2YgR3JlZWNlPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBNYW5pdXMsIHRoZSBSb21hbiBjb25zdWwsIGFmdGVyIGhpcyB2aWN0b3J5IG92ZXIgQW50aW9jaHVzLCBhc2tlZCB0aGUgQWNoYWVhbnMgdG8gcGVybWl0IHRoZSBleGlsZXMgZnJvbSBTcGFydGEgdG8gZ28gYmFjayBob21lLCBhbmQgVGl0dXMgRmxhbWluaW51cyBqb2luZWQgTWFuaXVzIGluIG1ha2luZyB0aGlzIHJlcXVlc3QuIEJ1dCBQaGlsb3BvZW1lbiBzdWNjZXNzZnVsbHkgb3Bwb3NlZCB0aGUgcmVxdWVzdCwgbm90IG91dCBvZiBob3N0aWxpdHkgdG8gdGhlIGV4aWxlcywgYnV0IGZyb20gYSBkZXNpcmUgdGhhdCB0aGV5IHNob3VsZCBvd2UgdGhpcyBmYXZvdXIgdG8gaGltc2VsZiBhbmQgdGhlIEFjaGFlYW5zLCBhbmQgbm90IHRvIEZsYW1pbmludXMgYW5kIHRoZSBSb21hbnM7IGluZGVlZCwgYXMgZ2VuZXJhbCBmb3IgdGhlIGZvbGxvd2luZyB5ZWFyIGhlIHJlc3RvcmVkIHRoZSBleGlsZXMgdG8gdGhlaXIgY2l0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxMy4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRvIHN1Y2ggYSBkZWdyZWUgZGlkIGhpcyBsb2Z0eSBzcGlyaXQgbGVhZCBoaW0gdG8gc3RyaXZlIGFuZCBjb250ZW5kIGFnYWluc3QgbWVuIGluIHBvd2VyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaGlsLiAxMy4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVpbmcgbm93IHNldmVudHkgeWVhcnMgb2YgYWdlLCBhbmQgZm9yIHRoZSBlaWdodGggdGltZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxODIgQi5DLiAgUGx1dGFyY2ggcGFzc2VzIG92ZXIgdGhlIHllYXJzIDE4Ny0xODMsIGR1cmluZyB3aGljaCB0aGUgQWNoYWVhbiBsZWFndWUgYW5kIFBoaWxvcG9lbWVuIGNhbWUgaW5jcmVhc2luZ2x5IGludG8gY29sbGlzaW9uIHdpdGggdGhlIFJvbWFuIHBvd2VyLjwvbm90ZT4gaGUgaG9wZWQgbm90IG9ubHkgdG8gcGFzcyB0aGF0IHllYXIgb2Ygb2ZmaWNlIHdpdGhvdXQgd2FyLCBidXQgYWxzbyB0aGF0IGFmZmFpcnMgd291bGQgcGVybWl0IGhpbSB0byBzcGVuZCB0aGUgcmVzdCBvZiBoaXMgbGlmZSBpbiBwZWFjZSBhbmQgcXVpZXQuIEZvciBhcyBvdXIgZGlzZWFzZXMgc2VlbSB0byBsb3NlIHRoZWlyIHZpcnVsZW5jZSBhcyBvdXIgYm9kaWx5IHN0cmVuZ3RoIGRlY2xpbmVzLCBzbyBhbW9uZyB0aGUgR3JlZWsgY2l0aWVzIHRoZSBzcGlyaXQgb2YgY29udGVudGlvbiBsYXBzZWQgYXMgdGhlaXIgcG93ZXIgd2FuZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgc29tZSBkaXZpbmUgZGlzcGxlYXN1cmUgdGhyZXcgaGltIGRvd24sIGxpa2UgYW4gYWxsIGJ1dCB2aWN0b3Jpb3VzIHJ1bm5lciwgYXQgdGhlIHZlcnkgZ29hbCBvZiBoaXMgbGlmZS4gRm9yIGl0IGlzIHJlY29yZGVkIHRoYXQgYXQgc29tZSBjb25mZXJlbmNlLCB3aGVuIG90aGVycyBwcmVzZW50IHdlcmUgbGF2aXNoaW5nIHByYWlzZSB1cG9uIG9uZSB3aG8gd2FzIHJlcHV0ZWQgdG8gYmUgYSByZWRvdWJ0YWJsZSBnZW5lcmFsLCBQaGlsb3BvZW1lbiBjb250ZW1wdHVvdXNseSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllldCB3aHkgc2hvdWxkIGFueSBhY2NvdW50IGJlIG1hZGUgb2YgdGhpcyBtYW4sIHdobyBoYXMgYmVlbiB0YWtlbiBhbGl2ZSBieSBoaXMgZW5lbWllcz88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcyBEZWlub2NyYXRlcyB0aGUgTWVzc2VuaWFuLCBhIG1hbiB3aG8gaGFkIGEgcHJpdmF0ZSBxdWFycmVsIHdpdGggUGhpbG9wb2VtZW48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiAxNy4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZsYW1pbmludXM8L3RpdGxlPiwgIHh2aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB3YXMgb2Jub3hpb3VzIHRvIGV2ZXJ5Ym9keSBlbHNlIGJlY2F1c2Ugb2YgaGlzIGJhc2VuZXNzIGFuZCB1bmJyaWRsZWQgbGlmZSwgaW5kdWNlZCBNZXNzZW5lIHRvICByZXZvbHQgZnJvbSB0aGUgQWNoYWVhbiBsZWFndWUsIGFuZCB3YXMgcmVwb3J0ZWQgYWJvdXQgdG8gc2VpemUgdGhlIHZpbGxhZ2UgY2FsbGVkIENvbG9uaXMuIFBoaWxvcG9lbWVuIGF0IHRoZSB0aW1lIGxheSBzaWNrIG9mIGEgZmV2ZXIgYXQgQXJnb3MsIGJ1dCBvbiBsZWFybmluZyB0aGVzZSBmYWN0cywgaGUgaGFzdGVuZWQgdG8gTWVnYWxvcG9saXMgaW4gYSBzaW5nbGUgZGF5LCBhIGpvdXJuZXkgb2YgbW9yZSB0aGFuIGZvdXIgaHVuZHJlZCBmdXJsb25ncy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVyZSBoZSBhdCBvbmNlIHNldCBvdXQgZm9yIHRoZSByZXNjdWUsIHRha2luZyB3aXRoIGhpbSB0aGUgaG9yc2VtZW4uIFRoZXNlIHdlcmUgdGhlIGNpdHkncyBtb3N0IHByb21pbmVudCBtZW4sIGJ1dCBhbHRvZ2V0aGVyIHlvdW5nLCBhbmQgc2VydmluZyBhcyB2b2x1bnRlZXJzIHVuZGVyIFBoaWxvcG9lbWVuIG91dCBvZiBnb29kIHdpbGwgYW5kIGFkbWlyYXRpb24gZm9yIGhpbS4gVGhleSByb2RlIG9mZiB0b3dhcmRzIE1lc3NlbmUgYW5kIGVuY291bnRlcmVkIERlaW5vY3JhdGVzLCB3aG8gY2FtZSB0byBtZWV0IHRoZW0gYXQgRXZhbmRlcidzIGhpbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpbSB0aGV5IHB1dCB0byBmbGlnaHQ7IGJ1dCB0aGUgZml2ZSBodW5kcmVkIG1lbiB3aG8gd2VyZSBndWFyZGluZyB0aGUgb3BlbiBjb3VudHJ5IG9mIE1lc3NlbmUgc3VkZGVubHkgYXR0YWNrZWQgdGhlbSwgYW5kIHdoZW4gdGhvc2Ugd2hvIGhhZCBiZWZvcmUgYmVlbiB3b3JzdGVkIHNhdyB0aGlzLCB0aGV5IGNvbGxlY3RlZCB0b2dldGhlciBhbG9uZyB0aGUgaGlsbHMuIFRoZW4gUGhpbG9wb2VtZW4sIGZlYXJpbmcgdGhhdCBoZSB3b3VsZCBiZSBlbnZlbG9wZWQsIGFuZCB0cnlpbmcgdG8gc3BhcmUgaGlzIGhvcnNlbWVuLCB3aXRoZHJldyBvdmVyIGRpZmZpY3VsdCBncm91bmQsIGJyaW5naW5nIHVwIHRoZSByZWFyIGhpbXNlbGYgYW5kIGZyZXF1ZW50bHkgcmlkaW5nIG91dCBhZ2FpbnN0IHRoZSBlbmVteSwgYW5kIHRyeWluZyB0byBkcmF3IHRoZWlyIGF0dGFja3MgZW50aXJlbHkgdXBvbiBoaW1zZWxmLiBUaGV5IGRpZCBub3QgdmVudHVyZSwgaG93ZXZlciwgdG8gcmV0dXJuIGhpcyBhdHRhY2tzLCBidXQgbWVyZWx5IHNob3V0ZWQgYW5kIHRocmVhdGVuZWQgaGlzIGZsYW5rcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aGRyYXdpbmcgZnJvbSB0aGUgbGluZSBmcmVxdWVudGx5LCB0aGVuLCB0byBzcGFyZSBoaXMgeW91bmcgbWVuLCBhbmQgc2VuZGluZyB0aGVtIG9uZSBieSBvbmUgaW50byBzYWZldHksIGJlZm9yZSBoZSB3YXMgYXdhcmUgb2YgaXQgaGUgd2FzIGxlZnQgYWxvbmUgYW1vbmcgbnVtZXJvdXMgZW5lbWllcy4gRXZlbiB0aGVuIG5vIG9uZSB2ZW50dXJlZCB0byBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggaGltLCBidXQgaGUgd2FzIHBlbHRlZCB3aXRoIG1pc3NpbGVzIGZyb20gYSBkaXN0YW5jZSBhbmQgZm9yY2VkIHVwb24gcm9ja3kgYW5kIHByZWNpcGl0b3VzIHBsYWNlcywgc28gdGhhdCBoZSBoYWQgZGlmZmljdWx0eSBpbiBtYW5hZ2luZyBoaXMgaG9yc2UgYW5kIGtlcHQgdGVhcmluZyBoaW0gd2l0aCB0aGUgc3B1ci4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGFnZSwgb3dpbmcgdG8gaGlzIGdlbmVyb3VzIGV4ZXJjaXNlLCB3YXMgbm90IGJ1cmRlbnNvbWUsIGFuZCBpbiBubyB3YXkgaW1wZWRlZCBoaXMgZXNjYXBlOyBidXQgYXQgdGhhdCB0aW1lIGhpcyBib2R5IHdhcyBlbmZlZWJsZWQgYnkgc2lja25lc3MgYW5kIHdvcm4gb3V0IHdpdGggYSBsb25nIGpvdXJuZXksIHNvIHRoYXQgaGUgd2FzIGhlYXZ5IGFuZCBzdGlmZiwgYW5kIGF0IGxlbmd0aCBoaXMgaG9yc2Ugc3R1bWJsZWQgYW5kIHRocmV3IGhpbSB0byB0aGUgZ3JvdW5kLiBIaXMgZmFsbCB3YXMgYSBoZWF2eSBvbmUgYW5kIGhpcyBoZWFkIHdhcyBodXJ0LCBhbmQgaGUgbGF5IGZvciBhIGxvbmcgdGltZSBzcGVlY2hsZXNzLCBzbyB0aGF0IGhpcyBlbmVtaWVzIHRob3VnaHQgaGltIGRlYWQgYW5kIHRyaWVkIHRvIHR1cm4gaGlzIGJvZHkgb3ZlciBhbmQgc3RyaXAgaXQgb2YgaXRzIGFybW91ci4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgcmFpc2VkIGhpcyBoZWFkIGFuZCBvcGVuZWQgaGlzIGV5ZXMsIHRoZXkgdGhyZXcgdGhlbXNlbHZlcyBpbiBhIHRocm9uZyB1cG9uIGhpbSwgdGllZCBoaXMgaGFuZHMgYmVoaW5kIGhpcyBiYWNrLCBhbmQgbGVkIGhpbSBhd2F5LCB0cmVhdGluZyB3aXRoIGdyZWF0IGluc29sZW5jZSBhbmQgY29udHVtZWx5IGEgbWFuIHdobyBjb3VsZCBuZXZlciBoYXZlIGV2ZW4gZHJlYW1lZCB0aGF0IGhlIHdvdWxkIHN1ZmZlciBzdWNoIGEgZmF0ZSBhdCB0aGUgaGFuZHMgb2YgRGVpbm9jcmF0ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGJlaW5nIG5vdyBzZXZlbnR5IHllYXJzIG9mIGFnZSwgYW5kIGZvciB0aGUgZWlnaHRoIHRpbWUgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxODIgQi5DLiAgUGx1dGFyY2ggcGFzc2VzIG92ZXIgdGhlIHllYXJzIDE4Ny0xODMsIGR1cmluZyB3aGljaCB0aGUgQWNoYWVhbiBsZWFndWUgYW5kIFBoaWxvcG9lbWVuIGNhbWUgaW5jcmVhc2luZ2x5IGludG8gY29sbGlzaW9uIHdpdGggdGhlIFJvbWFuIHBvd2VyLjwvbm90ZT4gaGUgaG9wZWQgbm90IG9ubHkgdG8gcGFzcyB0aGF0IHllYXIgb2Ygb2ZmaWNlIHdpdGhvdXQgd2FyLCBidXQgYWxzbyB0aGF0IGFmZmFpcnMgd291bGQgcGVybWl0IGhpbSB0byBzcGVuZCB0aGUgcmVzdCBvZiBoaXMgbGlmZSBpbiBwZWFjZSBhbmQgcXVpZXQuIEZvciBhcyBvdXIgZGlzZWFzZXMgc2VlbSB0byBsb3NlIHRoZWlyIHZpcnVsZW5jZSBhcyBvdXIgYm9kaWx5IHN0cmVuZ3RoIGRlY2xpbmVzLCBzbyBhbW9uZyB0aGUgR3JlZWsgY2l0aWVzIHRoZSBzcGlyaXQgb2YgY29udGVudGlvbiBsYXBzZWQgYXMgdGhlaXIgcG93ZXIgd2FuZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgc29tZSBkaXZpbmUgZGlzcGxlYXN1cmUgdGhyZXcgaGltIGRvd24sIGxpa2UgYW4gYWxsIGJ1dCB2aWN0b3Jpb3VzIHJ1bm5lciwgYXQgdGhlIHZlcnkgZ29hbCBvZiBoaXMgbGlmZS4gRm9yIGl0IGlzIHJlY29yZGVkIHRoYXQgYXQgc29tZSBjb25mZXJlbmNlLCB3aGVuIG90aGVycyBwcmVzZW50IHdlcmUgbGF2aXNoaW5nIHByYWlzZSB1cG9uIG9uZSB3aG8gd2FzIHJlcHV0ZWQgdG8gYmUgYSByZWRvdWJ0YWJsZSBnZW5lcmFsLCBQaGlsb3BvZW1lbiBjb250ZW1wdHVvdXNseSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWV0IHdoeSBzaG91bGQgYW55IGFjY291bnQgYmUgbWFkZSBvZiB0aGlzIG1hbiwgd2hvIGhhcyBiZWVuIHRha2VuIGFsaXZlIGJ5IGhpcyBlbmVtaWVzPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgRGVpbm9jcmF0ZXMgdGhlIE1lc3NlbmlhbiwgYSBtYW4gd2hvIGhhZCBhIHByaXZhdGUgcXVhcnJlbCB3aXRoIFBoaWxvcG9lbWVuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDE3LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sICB4dmlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgd2FzIG9ibm94aW91cyB0byBldmVyeWJvZHkgZWxzZSBiZWNhdXNlIG9mIGhpcyBiYXNlbmVzcyBhbmQgdW5icmlkbGVkIGxpZmUsIGluZHVjZWQgTWVzc2VuZSB0byAgcmV2b2x0IGZyb20gdGhlIEFjaGFlYW4gbGVhZ3VlLCBhbmQgd2FzIHJlcG9ydGVkIGFib3V0IHRvIHNlaXplIHRoZSB2aWxsYWdlIGNhbGxlZCBDb2xvbmlzLiBQaGlsb3BvZW1lbiBhdCB0aGUgdGltZSBsYXkgc2ljayBvZiBhIGZldmVyIGF0IEFyZ29zLCBidXQgb24gbGVhcm5pbmcgdGhlc2UgZmFjdHMsIGhlIGhhc3RlbmVkIHRvIE1lZ2Fsb3BvbGlzIGluIGEgc2luZ2xlIGRheSwgYSBqb3VybmV5IG9mIG1vcmUgdGhhbiBmb3VyIGh1bmRyZWQgZnVybG9uZ3MuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMTcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgIHh2aWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5GbGFtaW5pbnVzPC90aXRsZT4sICB4dmlpLiAzLjwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlcmUgaGUgYXQgb25jZSBzZXQgb3V0IGZvciB0aGUgcmVzY3VlLCB0YWtpbmcgd2l0aCBoaW0gdGhlIGhvcnNlbWVuLiBUaGVzZSB3ZXJlIHRoZSBjaXR5J3MgbW9zdCBwcm9taW5lbnQgbWVuLCBidXQgYWx0b2dldGhlciB5b3VuZywgYW5kIHNlcnZpbmcgYXMgdm9sdW50ZWVycyB1bmRlciBQaGlsb3BvZW1lbiBvdXQgb2YgZ29vZCB3aWxsIGFuZCBhZG1pcmF0aW9uIGZvciBoaW0uIFRoZXkgcm9kZSBvZmYgdG93YXJkcyBNZXNzZW5lIGFuZCBlbmNvdW50ZXJlZCBEZWlub2NyYXRlcywgd2hvIGNhbWUgdG8gbWVldCB0aGVtIGF0IEV2YW5kZXIncyBoaWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpbSB0aGV5IHB1dCB0byBmbGlnaHQ7IGJ1dCB0aGUgZml2ZSBodW5kcmVkIG1lbiB3aG8gd2VyZSBndWFyZGluZyB0aGUgb3BlbiBjb3VudHJ5IG9mIE1lc3NlbmUgc3VkZGVubHkgYXR0YWNrZWQgdGhlbSwgYW5kIHdoZW4gdGhvc2Ugd2hvIGhhZCBiZWZvcmUgYmVlbiB3b3JzdGVkIHNhdyB0aGlzLCB0aGV5IGNvbGxlY3RlZCB0b2dldGhlciBhbG9uZyB0aGUgaGlsbHMuIFRoZW4gUGhpbG9wb2VtZW4sIGZlYXJpbmcgdGhhdCBoZSB3b3VsZCBiZSBlbnZlbG9wZWQsIGFuZCB0cnlpbmcgdG8gc3BhcmUgaGlzIGhvcnNlbWVuLCB3aXRoZHJldyBvdmVyIGRpZmZpY3VsdCBncm91bmQsIGJyaW5naW5nIHVwIHRoZSByZWFyIGhpbXNlbGYgYW5kIGZyZXF1ZW50bHkgcmlkaW5nIG91dCBhZ2FpbnN0IHRoZSBlbmVteSwgYW5kIHRyeWluZyB0byBkcmF3IHRoZWlyIGF0dGFja3MgZW50aXJlbHkgdXBvbiBoaW1zZWxmLiBUaGV5IGRpZCBub3QgdmVudHVyZSwgaG93ZXZlciwgdG8gcmV0dXJuIGhpcyBhdHRhY2tzLCBidXQgbWVyZWx5IHNob3V0ZWQgYW5kIHRocmVhdGVuZWQgaGlzIGZsYW5rcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldpdGhkcmF3aW5nIGZyb20gdGhlIGxpbmUgZnJlcXVlbnRseSwgdGhlbiwgdG8gc3BhcmUgaGlzIHlvdW5nIG1lbiwgYW5kIHNlbmRpbmcgdGhlbSBvbmUgYnkgb25lIGludG8gc2FmZXR5LCBiZWZvcmUgaGUgd2FzIGF3YXJlIG9mIGl0IGhlIHdhcyBsZWZ0IGFsb25lIGFtb25nIG51bWVyb3VzIGVuZW1pZXMuIEV2ZW4gdGhlbiBubyBvbmUgdmVudHVyZWQgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIGhpbSwgYnV0IGhlIHdhcyBwZWx0ZWQgd2l0aCBtaXNzaWxlcyBmcm9tIGEgZGlzdGFuY2UgYW5kIGZvcmNlZCB1cG9uIHJvY2t5IGFuZCBwcmVjaXBpdG91cyBwbGFjZXMsIHNvIHRoYXQgaGUgaGFkIGRpZmZpY3VsdHkgaW4gbWFuYWdpbmcgaGlzIGhvcnNlIGFuZCBrZXB0IHRlYXJpbmcgaGltIHdpdGggdGhlIHNwdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBhZ2UsIG93aW5nIHRvIGhpcyBnZW5lcm91cyBleGVyY2lzZSwgd2FzIG5vdCBidXJkZW5zb21lLCBhbmQgaW4gbm8gd2F5IGltcGVkZWQgaGlzIGVzY2FwZTsgYnV0IGF0IHRoYXQgdGltZSBoaXMgYm9keSB3YXMgZW5mZWVibGVkIGJ5IHNpY2tuZXNzIGFuZCB3b3JuIG91dCB3aXRoIGEgbG9uZyBqb3VybmV5LCBzbyB0aGF0IGhlIHdhcyBoZWF2eSBhbmQgc3RpZmYsIGFuZCBhdCBsZW5ndGggaGlzIGhvcnNlIHN0dW1ibGVkIGFuZCB0aHJldyBoaW0gdG8gdGhlIGdyb3VuZC4gSGlzIGZhbGwgd2FzIGEgaGVhdnkgb25lIGFuZCBoaXMgaGVhZCB3YXMgaHVydCwgYW5kIGhlIGxheSBmb3IgYSBsb25nIHRpbWUgc3BlZWNobGVzcywgc28gdGhhdCBoaXMgZW5lbWllcyB0aG91Z2h0IGhpbSBkZWFkIGFuZCB0cmllZCB0byB0dXJuIGhpcyBib2R5IG92ZXIgYW5kIHN0cmlwIGl0IG9mIGl0cyBhcm1vdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHJhaXNlZCBoaXMgaGVhZCBhbmQgb3BlbmVkIGhpcyBleWVzLCB0aGV5IHRocmV3IHRoZW1zZWx2ZXMgaW4gYSB0aHJvbmcgdXBvbiBoaW0sIHRpZWQgaGlzIGhhbmRzIGJlaGluZCBoaXMgYmFjaywgYW5kIGxlZCBoaW0gYXdheSwgdHJlYXRpbmcgd2l0aCBncmVhdCBpbnNvbGVuY2UgYW5kIGNvbnR1bWVseSBhIG1hbiB3aG8gY291bGQgbmV2ZXIgaGF2ZSBldmVuIGRyZWFtZWQgdGhhdCBoZSB3b3VsZCBzdWZmZXIgc3VjaCBhIGZhdGUgYXQgdGhlIGhhbmRzIG9mIERlaW5vY3JhdGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGVvcGxlIG9mIE1lc3NlbmUsIHdvbmRlcmZ1bGx5IGVsYXRlZCBhdCB0aGUgbmV3cywgZ2F0aGVyZWQgaW4gdGhyb25ncyBhdCB0aGUgZ2F0ZXMuIEJ1dCB3aGVuIHRoZXkgc2F3IFBoaWxvcG9lbWVuIGRyYWdnZWQgYWxvbmcgaW4gYSBtYW5uZXIgdW53b3J0aHkgb2YgaGlzIGZhbWUgYW5kIG9mIGhpcyBmb3JtZXIgZXhwbG9pdHMgYW5kIHRyb3BoaWVzLCBtb3N0IG9mIHRoZW0gd2VyZSBzdHJ1Y2sgd2l0aCBwaXR5IGFuZCBmZWx0IHN5bXBhdGh5IGZvciBoaW0sIHNvIHRoYXQgdGhleSBhY3R1YWxseSBzaGVkIHRlYXJzIGFuZCBzcG9rZSB3aXRoIGJpdHRlcm5lc3Mgb2YgdGhlIGluY29uc3RhbmN5IGFuZCB2YW5pdHkgb2YgaHVtYW4gZ3JlYXRuZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28sIGxpdHRsZSBieSBsaXR0bGUsIG1hbnkgd2VyZSBsZWQgdG8gc2F5IGh1bWFuZWx5IHRoYXQgdGhleSBvdWdodCB0byByZW1lbWJlciBoaXMgZm9ybWVyIGJlbmVmYWN0aW9ucywgYW5kIGVzcGVjaWFsbHkgaG93IGhlIGhhZCByZXN0b3JlZCB0byB0aGVtIHRoZWlyIGZyZWVkb20gYnkgZXhwZWxsaW5nIHRoZSB0eXJhbnQgTmFiaXMuIEJ1dCB0aGVyZSB3ZXJlIGEgZmV3IHdobywgdG8gZ3JhdGlmeSBEZWlub2NyYXRlcywgdXJnZWQgdGhhdCB0aGUgY2FwdGl2ZSBzaG91bGQgYmUgdG9ydHVyZWQgYW5kIHB1dCB0byBkZWF0aCBhcyBhIHN0ZXJuIGFuZCBpbXBsYWNhYmxlIGVuZW15LCBhbmQgb25lIG1vcmUgdGhhbiBldmVyIHRvIGJlIGZlYXJlZCBieSBEZWlub2NyYXRlcyBoaW1zZWxmIGluIGNhc2UgaGUgbWFkZSBoaXMgZXNjYXBlIGFmdGVyIGhhdmluZyBiZWVuIHRha2VuIHByaXNvbmVyIGFuZCBsb2FkZWQgd2l0aCBpbnN1bHRzIGJ5IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhleSBjYXJyaWVkIFBoaWxvcG9lbWVuIGludG8gdGhlIFRoZXNhdXJ1cywgYXMgaXQgd2FzIGNhbGxlZCwgYSBzdWJ0ZXJyYW5lYW4gY2hhbWJlciB3aGljaCBhZG1pdHRlZCBuZWl0aGVyIGFpciBub3IgbGlnaHQgZnJvbSBvdXRzaWRlIGFuZCBoYWQgbm8gZG9vciwgYnV0IHdhcyBjbG9zZWQgYnkgZHJhZ2dpbmcgYSBodWdlIHN0b25lIGluIGZyb250IG9mIGl0LiBIZXJlIHRoZXkgcGxhY2VkIGhpbSwgYW5kIGFmdGVyIHBsYW50aW5nIHRoZSBzdG9uZSBhZ2FpbnN0IGl0LCBzZXQgYSBndWFyZCBvZiBhcm1lZCBtZW4gcm91bmQgYWJvdXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSBvZiBNZXNzZW5lLCB3b25kZXJmdWxseSBlbGF0ZWQgYXQgdGhlIG5ld3MsIGdhdGhlcmVkIGluIHRocm9uZ3MgYXQgdGhlIGdhdGVzLiBCdXQgd2hlbiB0aGV5IHNhdyBQaGlsb3BvZW1lbiBkcmFnZ2VkIGFsb25nIGluIGEgbWFubmVyIHVud29ydGh5IG9mIGhpcyBmYW1lIGFuZCBvZiBoaXMgZm9ybWVyIGV4cGxvaXRzIGFuZCB0cm9waGllcywgbW9zdCBvZiB0aGVtIHdlcmUgc3RydWNrIHdpdGggcGl0eSBhbmQgZmVsdCBzeW1wYXRoeSBmb3IgaGltLCBzbyB0aGF0IHRoZXkgYWN0dWFsbHkgc2hlZCB0ZWFycyBhbmQgc3Bva2Ugd2l0aCBiaXR0ZXJuZXNzIG9mIHRoZSBpbmNvbnN0YW5jeSBhbmQgdmFuaXR5IG9mIGh1bWFuIGdyZWF0bmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgbGl0dGxlIGJ5IGxpdHRsZSwgbWFueSB3ZXJlIGxlZCB0byBzYXkgaHVtYW5lbHkgdGhhdCB0aGV5IG91Z2h0IHRvIHJlbWVtYmVyIGhpcyBmb3JtZXIgYmVuZWZhY3Rpb25zLCBhbmQgZXNwZWNpYWxseSBob3cgaGUgaGFkIHJlc3RvcmVkIHRvIHRoZW0gdGhlaXIgZnJlZWRvbSBieSBleHBlbGxpbmcgdGhlIHR5cmFudCBOYWJpcy4gQnV0IHRoZXJlIHdlcmUgYSBmZXcgd2hvLCB0byBncmF0aWZ5IERlaW5vY3JhdGVzLCB1cmdlZCB0aGF0IHRoZSBjYXB0aXZlIHNob3VsZCBiZSB0b3J0dXJlZCBhbmQgcHV0IHRvIGRlYXRoIGFzIGEgc3Rlcm4gYW5kIGltcGxhY2FibGUgZW5lbXksIGFuZCBvbmUgbW9yZSB0aGFuIGV2ZXIgdG8gYmUgZmVhcmVkIGJ5IERlaW5vY3JhdGVzIGhpbXNlbGYgaW4gY2FzZSBoZSBtYWRlIGhpcyBlc2NhcGUgYWZ0ZXIgaGF2aW5nIGJlZW4gdGFrZW4gcHJpc29uZXIgYW5kIGxvYWRlZCB3aXRoIGluc3VsdHMgYnkgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZXkgY2FycmllZCBQaGlsb3BvZW1lbiBpbnRvIHRoZSBUaGVzYXVydXMsIGFzIGl0IHdhcyBjYWxsZWQsIGEgc3VidGVycmFuZWFuIGNoYW1iZXIgd2hpY2ggYWRtaXR0ZWQgbmVpdGhlciBhaXIgbm9yIGxpZ2h0IGZyb20gb3V0c2lkZSBhbmQgaGFkIG5vIGRvb3IsIGJ1dCB3YXMgY2xvc2VkIGJ5IGRyYWdnaW5nIGEgaHVnZSBzdG9uZSBpbiBmcm9udCBvZiBpdC4gSGVyZSB0aGV5IHBsYWNlZCBoaW0sIGFuZCBhZnRlciBwbGFudGluZyB0aGUgc3RvbmUgYWdhaW5zdCBpdCwgc2V0IGEgZ3VhcmQgb2YgYXJtZWQgbWVuIHJvdW5kIGFib3V0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIGhvcnNlbWVuIG9mIHRoZSBBY2hhZWFucyByZWNvdmVyZWQgdGhlbXNlbHZlcyBhZnRlciB0aGVpciBmbGlnaHQsIGFuZCB3aGVuIFBoaWxvcG9lbWVuIHdhcyBub3doZXJlIHRvIGJlIHNlZW4sIGJ1dCB3YXMgdGhvdWdodCB0byBiZSBkZWFkLCB0aGV5IHN0b29kIGZvciBhIGxvbmcgdGltZSBjYWxsaW5nIGFsb3VkIHVwb24gdGhlaXIgbGVhZGVyIGFuZCByZXByb2FjaGluZyBvbmUgYW5vdGhlciBmb3IgaGF2aW5nIHdvbiBhbiB1bmxhd2Z1bCBhbmQgc2hhbWVmdWwgc2FmZXR5IGJ5IGFiYW5kb25pbmcgdG8gdGhlIGVuZW15IHRoZWlyIGdlbmVyYWwsIHdobyBoYWQgYmVlbiBwcm9kaWdhbCBvZiBoaXMgbGlmZSBmb3IgdGhlaXIgc2FrZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSB3ZW50IGZvcndhcmQgaW4gYSBib2R5LCBhbmQgYnkgZGlsaWdlbnQgZWZmb3J0IGxlYXJuZWQgb2YgaGlzIGNhcHR1cmUsIGFuZCBzZW50IHdvcmQgb2YgaXQgdG8gdGhlIGNpdGllcyBvZiB0aGUgQWNoYWVhbnMuIFRoZSBBY2hhZWFucyBmZWx0IHRoYXQgdGhleSBoYWQgc3VmZmVyZWQgYSBncmVhdCBjYWxhbWl0eSwgYW5kIGRldGVybWluZWQgdG8gc2VuZCBhbiBlbWJhc3N5IGFuZCBkZW1hbmQgUGhpbG9wb2VtZW4gZnJvbSB0aGUgTWVzc2VuaWFucywgd2hpbGUgdGhleSB0aGVtc2VsdmVzIHByZXBhcmVkIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgaG9yc2VtZW4gb2YgdGhlIEFjaGFlYW5zIHJlY292ZXJlZCB0aGVtc2VsdmVzIGFmdGVyIHRoZWlyIGZsaWdodCwgYW5kIHdoZW4gUGhpbG9wb2VtZW4gd2FzIG5vd2hlcmUgdG8gYmUgc2VlbiwgYnV0IHdhcyB0aG91Z2h0IHRvIGJlIGRlYWQsIHRoZXkgc3Rvb2QgZm9yIGEgbG9uZyB0aW1lIGNhbGxpbmcgYWxvdWQgdXBvbiB0aGVpciBsZWFkZXIgYW5kIHJlcHJvYWNoaW5nIG9uZSBhbm90aGVyIGZvciBoYXZpbmcgd29uIGFuIHVubGF3ZnVsIGFuZCBzaGFtZWZ1bCBzYWZldHkgYnkgYWJhbmRvbmluZyB0byB0aGUgZW5lbXkgdGhlaXIgZ2VuZXJhbCwgd2hvIGhhZCBiZWVuIHByb2RpZ2FsIG9mIGhpcyBsaWZlIGZvciB0aGVpciBzYWtlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSB3ZW50IGZvcndhcmQgaW4gYSBib2R5LCBhbmQgYnkgZGlsaWdlbnQgZWZmb3J0IGxlYXJuZWQgb2YgaGlzIGNhcHR1cmUsIGFuZCBzZW50IHdvcmQgb2YgaXQgdG8gdGhlIGNpdGllcyBvZiB0aGUgQWNoYWVhbnMuIFRoZSBBY2hhZWFucyBmZWx0IHRoYXQgdGhleSBoYWQgc3VmZmVyZWQgYSBncmVhdCBjYWxhbWl0eSwgYW5kIGRldGVybWluZWQgdG8gc2VuZCBhbiBlbWJhc3N5IGFuZCBkZW1hbmQgUGhpbG9wb2VtZW4gZnJvbSB0aGUgTWVzc2VuaWFucywgd2hpbGUgdGhleSB0aGVtc2VsdmVzIHByZXBhcmVkIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgY2l0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEFjaGFlYW5zLCB0aGVuLCB3ZXJlIHRodXMgZW5nYWdlZC4gQnV0IERlaW5vY3JhdGVzLCB3aG8gZmVhcmVkIHRoYXQgZGVsYXkgd2FzIHRoZSBvbmUgdGhpbmcgbW9zdCBsaWtlbHkgdG8gc2F2ZSBQaGlsb3BvZW1lbiwgYW5kIHdpc2hlZCB0byBmb3Jlc3RhbGwgdGhlIGVmZm9ydHMgb2YgdGhlIEFjaGFlYW5zLCB3aGVuIG5pZ2h0IGNhbWUgb24gYW5kIHRoZSBtdWx0aXR1ZGUgb2YgTWVzc2VuZSBoYWQgZGlzcGVyc2VkLCBvcGVuZWQgdGhlIHByaXNvbiBhbmQgc2VudCBpbiBhIHB1YmxpYyBvZmZpY2lhbCB3aXRoIHBvaXNvbiwgb3JkZXJpbmcgaGltIHRvIGdpdmUgaXQgdG8gUGhpbG9wb2VtZW4gYW5kIHRvIHN0YW5kIGJ5IGhpcyBzaWRlIHVudGlsIGhlIGhhZCBkcnVuayBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGlsb3BvZW1lbiB3YXMgbHlpbmcgZG93biB3cmFwcGVkIGluIGhpcyBzb2xkaWVyJ3MgY2xvYWssIG5vdCBzbGVlcGluZywgYnV0IG92ZXJ3aGVsbWVkIHdpdGggdHJvdWJsZSBhbmQgZ3JpZWYuIFdoZW4sIGhvd2V2ZXIsIGhlIHNhdyBhIGxpZ2h0IGFuZCBhIG1hbiBzdGFuZGluZyBieSBoaW0gaG9sZGluZyB0aGUgY3VwIG9mIHBvaXNvbiwgaGUgcHVsbGVkIGhpbXNlbGYgdG9nZXRoZXIgYXMgbXVjaCBhcyBoaXMgd2Vha25lc3MgcGVybWl0dGVkIGFuZCBzYXQgdXAuIFRoZW4gdGFraW5nIHRoZSBjdXAgaGUgYXNrZWQgdGhlIG1hbiBpZiBoZSBoYWQgaGVhcmQgYW55dGhpbmcgYWJvdXQgdGhlIGhvcnNlbWVuLCBhbmQgcGFydGljdWxhcmx5IGFib3V0IEx5Y29ydGFzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgb24gYmVpbmcgdG9sZCBieSBoaW0gdGhhdCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZW0gaGFkIGVzY2FwZWQsIGhlIG5vZGRlZCBoaXMgaGVhZCwgYW5kIHdpdGggYSBraW5kbHkgbG9vayBhdCB0aGUgbWFuIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgaXMgZ29vZCBuZXdzLCBpZiB3ZSBoYXZlIG5vdCB3aG9sbHkgbG9zdC48L3E+IFdpdGhvdXQgYW5vdGhlciB3b3JkIGFuZCBldmVuIHdpdGhvdXQgYSBzaWdoIGhlIGRyYWluZWQgdGhlIGN1cCBhbmQgbGFpZCBoaW1zZWxmIGRvd24gYWdhaW4uIEhlIGRpZCBub3QgZ2l2ZSB0aGUgcG9pc29uIG11Y2ggdG8gZG8sIGJ1dCBicmVhdGhlZCBoaXMgbGFzdCBzcGVlZGlseSwgc28gd2VhayB3YXMgaGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEFjaGFlYW5zLCB0aGVuLCB3ZXJlIHRodXMgZW5nYWdlZC4gQnV0IERlaW5vY3JhdGVzLCB3aG8gZmVhcmVkIHRoYXQgZGVsYXkgd2FzIHRoZSBvbmUgdGhpbmcgbW9zdCBsaWtlbHkgdG8gc2F2ZSBQaGlsb3BvZW1lbiwgYW5kIHdpc2hlZCB0byBmb3Jlc3RhbGwgdGhlIGVmZm9ydHMgb2YgdGhlIEFjaGFlYW5zLCB3aGVuIG5pZ2h0IGNhbWUgb24gYW5kIHRoZSBtdWx0aXR1ZGUgb2YgTWVzc2VuZSBoYWQgZGlzcGVyc2VkLCBvcGVuZWQgdGhlIHByaXNvbiBhbmQgc2VudCBpbiBhIHB1YmxpYyBvZmZpY2lhbCB3aXRoIHBvaXNvbiwgb3JkZXJpbmcgaGltIHRvIGdpdmUgaXQgdG8gUGhpbG9wb2VtZW4gYW5kIHRvIHN0YW5kIGJ5IGhpcyBzaWRlIHVudGlsIGhlIGhhZCBkcnVuayBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUGhpbG9wb2VtZW4gd2FzIGx5aW5nIGRvd24gd3JhcHBlZCBpbiBoaXMgc29sZGllcidzIGNsb2FrLCBub3Qgc2xlZXBpbmcsIGJ1dCBvdmVyd2hlbG1lZCB3aXRoIHRyb3VibGUgYW5kIGdyaWVmLiBXaGVuLCBob3dldmVyLCBoZSBzYXcgYSBsaWdodCBhbmQgYSBtYW4gc3RhbmRpbmcgYnkgaGltIGhvbGRpbmcgdGhlIGN1cCBvZiBwb2lzb24sIGhlIHB1bGxlZCBoaW1zZWxmIHRvZ2V0aGVyIGFzIG11Y2ggYXMgaGlzIHdlYWtuZXNzIHBlcm1pdHRlZCBhbmQgc2F0IHVwLiBUaGVuIHRha2luZyB0aGUgY3VwIGhlIGFza2VkIHRoZSBtYW4gaWYgaGUgaGFkIGhlYXJkIGFueXRoaW5nIGFib3V0IHRoZSBob3JzZW1lbiwgYW5kIHBhcnRpY3VsYXJseSBhYm91dCBMeWNvcnRhcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvbiBiZWluZyB0b2xkIGJ5IGhpbSB0aGF0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSBoYWQgZXNjYXBlZCwgaGUgbm9kZGVkIGhpcyBoZWFkLCBhbmQgd2l0aCBhIGtpbmRseSBsb29rIGF0IHRoZSBtYW4gc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0IGlzIGdvb2QgbmV3cywgaWYgd2UgaGF2ZSBub3Qgd2hvbGx5IGxvc3QuPC9xPiBXaXRob3V0IGFub3RoZXIgd29yZCBhbmQgZXZlbiB3aXRob3V0IGEgc2lnaCBoZSBkcmFpbmVkIHRoZSBjdXAgYW5kIGxhaWQgaGltc2VsZiBkb3duIGFnYWluLiBIZSBkaWQgbm90IGdpdmUgdGhlIHBvaXNvbiBtdWNoIHRvIGRvLCBidXQgYnJlYXRoZWQgaGlzIGxhc3Qgc3BlZWRpbHksIHNvIHdlYWsgd2FzIGhlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiB0aGUgcmVwb3J0IG9mIGhpcyBkZWF0aCByZWFjaGVkIHRoZSBBY2hhZWFucywgdGhlaXIgY2l0aWVzIHdlcmUgZmlsbGVkIHdpdGggZ2VuZXJhbCBkZWplY3Rpb24gYW5kIGdyaWVmLCBhbmQgdGhlIG1lbiBvZiBtaWxpdGFyeSBhZ2UsIHRvZ2V0aGVyIHdpdGggdGhlIG1lbWJlcnMgb2YgdGhlIGNvdW5jaWwsIGFzc2VtYmxlZCBhdCBNZWdhbG9wb2xpcy4gV2l0aCBubyBkZWxheSB3aGF0c29ldmVyIHRoZXkgcHJvY2VlZGVkIHRvIHRha2UgcmV2ZW5nZS4gVGhleSBjaG9zZSBMeWNvcnRhcyBnZW5lcmFsLCBpbnZhZGVkIE1lc3NlbmlhLCBhbmQgcmF2YWdlZCB0aGUgY291bnRyeSwgdW50aWwgdGhlIE1lc3NlbmlhbnMgd2l0aCBvbmUgY29uc2VudCByZWNlaXZlZCB0aGVtIGludG8gdGhlaXIgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RGVpbm9jcmF0ZXMgYW50aWNpcGF0ZWQgdGhlaXIgdmVuZ2VhbmNlIGJ5IG1ha2luZyBhd2F5IHdpdGggaGltc2VsZiwgYnV0IGFsbCB0aGUgb3RoZXJzIHdobyBoYWQgdm90ZWQgdG8gcHV0IFBoaWxvcG9lbWVuIHRvIGRlYXRoIHRoZXkgc2xldywgYW5kIGFzIGZvciB0aG9zZSB3aG8gd291bGQgaGF2ZSBoYWQgaGltIHRvcnR1cmVkIGFsc28sIHRoZXNlIEx5Y29ydGFzIHNlaXplZCBhbmQgaGVsZCBmb3IgYSBtb3JlIGV4Y3J1Y2lhdGluZyBkZWF0aC4gVGhlbiB0aGV5IGJ1cm5lZCBQaGlsb3BvZW1lbidzIGJvZHksIGNvbGxlY3RlZCBoaXMgYXNoZXMgaW4gYW4gdXJuLCBhbmQgc2V0IG91dCBmb3IgaG9tZSwgbm90IGluIGxvb3NlIG9yIHByb21pc2N1b3VzIG9yZGVyLCBidXQgd2l0aCBhIGJsZW5kaW5nIG9mIHRyaXVtcGhhbCBwcm9jZXNzaW9uIGFuZCBmdW5lcmFsIHJpdGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlaXIgaGVhZHMgd2VyZSB3cmVhdGhlZCB3aXRoIGdhcmxhbmRzIHdoaWxlIHRoZWlyIGV5ZXMgd2VyZSBmdWxsIG9mIHRlYXJzLCBhbmQgdGhleSBsZWQgdGhlaXIgZm9lcyBhbG9uZyB3aXRoIHRoZW0gaW4gY2hhaW5zLiBUaGUgdXJuIGl0c2VsZiwgYWxtb3N0IGhpZGRlbiBmcm9tIHNpZ2h0IGJ5IGEgbXVsdGl0dWRlIG9mIGZpbGxldHMgYW5kIHdyZWF0aHMsIHdhcyBib3JuZSBieSBQb2x5Yml1cywgdGhlIHNvbiBvZiB0aGUgQWNoYWVhbiBnZW5lcmFsLCBhbmQgYWJvdXQgaGltIHdlcmUgdGhlIGNoaWVmIG1lbiBvZiB0aGUgQWNoYWVhbnMuIFRoZSBzb2xkaWVycyBmb2xsb3dlZCBhZnRlciwgaW4gZnVsbCBhcm1vdXIgdGhlbXNlbHZlcywgYW5kIHdpdGggdGhlaXIgaG9yc2VzIGRlY29yYXRlZDsgdGhleSB3ZXJlIG5laXRoZXIgZGVqZWN0ZWQgaW4gdmlldyBvZiB0aGVpciBncmVhdCBhZmZsaWN0aW9uIG5vciBleHVsdGFudCBvdmVyIHRoZWlyIHZpY3RvcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIGZyb20gdGhlIGNpdGllcyBhbmQgdmlsbGFnZXMgb24gdGhlIHdheSBjYW1lIHRvIG1lZXQgdGhlbSwgYXMgaWYgcmVjZWl2aW5nIFBoaWxvcG9lbWVuIG9uIGhpcyByZXR1cm4gZnJvbSBhbiBleHBlZGl0aW9uOyB0aGV5IGxhaWQgdGhlaXIgaGFuZHMgdXBvbiBoaXMgdXJuLCBhbmQgYWNjb21wYW5pZWQgaGltIHRvIE1lZ2Fsb3BvbGlzLiBBbmQgc28gd2hlbiB0aGV5IGhhZCBiZWVuIGpvaW5lZCBieSB0aGUgb2xkIG1lbiBhbmQgYnkgdGhlIHdvbWVuIGFuZCBjaGlsZHJlbiwgYSBsYW1lbnRhdGlvbiBhdCBvbmNlIHNwcmVhZCB0aHJvdWdoIHRoZSBlbnRpcmUgYXJteSBhbmQgaW50byB0aGUgY2l0eSwgd2hpY2ggbG9uZ2VkIGZvciB0aGUgcHJlc2VuY2Ugb2YgUGhpbG9wb2VtZW4gYW5kIHdhcyBncmlldm91c2x5IGNhc3QgZG93biBhdCBoaXMgZGVhdGgsIGZlZWxpbmcgdGhhdCB3aXRoIGhpbSBpdCBoYWQgbG9zdCBpdHMgc3VwcmVtYWN5IGFtb25nIHRoZSBBY2hhZWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIHJlcG9ydCBvZiBoaXMgZGVhdGggcmVhY2hlZCB0aGUgQWNoYWVhbnMsIHRoZWlyIGNpdGllcyB3ZXJlIGZpbGxlZCB3aXRoIGdlbmVyYWwgZGVqZWN0aW9uIGFuZCBncmllZiwgYW5kIHRoZSBtZW4gb2YgbWlsaXRhcnkgYWdlLCB0b2dldGhlciB3aXRoIHRoZSBtZW1iZXJzIG9mIHRoZSBjb3VuY2lsLCBhc3NlbWJsZWQgYXQgTWVnYWxvcG9saXMuIFdpdGggbm8gZGVsYXkgd2hhdHNvZXZlciB0aGV5IHByb2NlZWRlZCB0byB0YWtlIHJldmVuZ2UuIFRoZXkgY2hvc2UgTHljb3J0YXMgZ2VuZXJhbCwgaW52YWRlZCBNZXNzZW5pYSwgYW5kIHJhdmFnZWQgdGhlIGNvdW50cnksIHVudGlsIHRoZSBNZXNzZW5pYW5zIHdpdGggb25lIGNvbnNlbnQgcmVjZWl2ZWQgdGhlbSBpbnRvIHRoZWlyIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRlaW5vY3JhdGVzIGFudGljaXBhdGVkIHRoZWlyIHZlbmdlYW5jZSBieSBtYWtpbmcgYXdheSB3aXRoIGhpbXNlbGYsIGJ1dCBhbGwgdGhlIG90aGVycyB3aG8gaGFkIHZvdGVkIHRvIHB1dCBQaGlsb3BvZW1lbiB0byBkZWF0aCB0aGV5IHNsZXcsIGFuZCBhcyBmb3IgdGhvc2Ugd2hvIHdvdWxkIGhhdmUgaGFkIGhpbSB0b3J0dXJlZCBhbHNvLCB0aGVzZSBMeWNvcnRhcyBzZWl6ZWQgYW5kIGhlbGQgZm9yIGEgbW9yZSBleGNydWNpYXRpbmcgZGVhdGguIFRoZW4gdGhleSBidXJuZWQgUGhpbG9wb2VtZW4ncyBib2R5LCBjb2xsZWN0ZWQgaGlzIGFzaGVzIGluIGFuIHVybiwgYW5kIHNldCBvdXQgZm9yIGhvbWUsIG5vdCBpbiBsb29zZSBvciBwcm9taXNjdW91cyBvcmRlciwgYnV0IHdpdGggYSBibGVuZGluZyBvZiB0cml1bXBoYWwgcHJvY2Vzc2lvbiBhbmQgZnVuZXJhbCByaXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVpciBoZWFkcyB3ZXJlIHdyZWF0aGVkIHdpdGggZ2FybGFuZHMgd2hpbGUgdGhlaXIgZXllcyB3ZXJlIGZ1bGwgb2YgdGVhcnMsIGFuZCB0aGV5IGxlZCB0aGVpciBmb2VzIGFsb25nIHdpdGggdGhlbSBpbiBjaGFpbnMuIFRoZSB1cm4gaXRzZWxmLCBhbG1vc3QgaGlkZGVuIGZyb20gc2lnaHQgYnkgYSBtdWx0aXR1ZGUgb2YgZmlsbGV0cyBhbmQgd3JlYXRocywgd2FzIGJvcm5lIGJ5IFBvbHliaXVzLCB0aGUgc29uIG9mIHRoZSBBY2hhZWFuIGdlbmVyYWwsIGFuZCBhYm91dCBoaW0gd2VyZSB0aGUgY2hpZWYgbWVuIG9mIHRoZSBBY2hhZWFucy4gVGhlIHNvbGRpZXJzIGZvbGxvd2VkIGFmdGVyLCBpbiBmdWxsIGFybW91ciB0aGVtc2VsdmVzLCBhbmQgd2l0aCB0aGVpciBob3JzZXMgZGVjb3JhdGVkOyB0aGV5IHdlcmUgbmVpdGhlciBkZWplY3RlZCBpbiB2aWV3IG9mIHRoZWlyIGdyZWF0IGFmZmxpY3Rpb24gbm9yIGV4dWx0YW50IG92ZXIgdGhlaXIgdmljdG9yeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIGZyb20gdGhlIGNpdGllcyBhbmQgdmlsbGFnZXMgb24gdGhlIHdheSBjYW1lIHRvIG1lZXQgdGhlbSwgYXMgaWYgcmVjZWl2aW5nIFBoaWxvcG9lbWVuIG9uIGhpcyByZXR1cm4gZnJvbSBhbiBleHBlZGl0aW9uOyB0aGV5IGxhaWQgdGhlaXIgaGFuZHMgdXBvbiBoaXMgdXJuLCBhbmQgYWNjb21wYW5pZWQgaGltIHRvIE1lZ2Fsb3BvbGlzLiBBbmQgc28gd2hlbiB0aGV5IGhhZCBiZWVuIGpvaW5lZCBieSB0aGUgb2xkIG1lbiBhbmQgYnkgdGhlIHdvbWVuIGFuZCBjaGlsZHJlbiwgYSBsYW1lbnRhdGlvbiBhdCBvbmNlIHNwcmVhZCB0aHJvdWdoIHRoZSBlbnRpcmUgYXJteSBhbmQgaW50byB0aGUgY2l0eSwgd2hpY2ggbG9uZ2VkIGZvciB0aGUgcHJlc2VuY2Ugb2YgUGhpbG9wb2VtZW4gYW5kIHdhcyBncmlldm91c2x5IGNhc3QgZG93biBhdCBoaXMgZGVhdGgsIGZlZWxpbmcgdGhhdCB3aXRoIGhpbSBpdCBoYWQgbG9zdCBpdHMgc3VwcmVtYWN5IGFtb25nIHRoZSBBY2hhZWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGJ1cmllZCwgdGhlbiwgYXMgd2FzIGZpdHRpbmcsIHdpdGggY29uc3BpY3VvdXMgaG9ub3VycywgYW5kIGF0IGhpcyB0b21iIHRoZSBjYXB0aXZlIE1lc3NlbmlhbnMgd2VyZSBzdG9uZWQgdG8gZGVhdGguIE1hbnkgc3RhdHVlcyBvZiBoaW0gd2VyZSBlcmVjdGVkIGFuZCBtYW55IGhvbm91cnMgZGVjcmVlZCBoaW0gYnkgdGhlIGNpdGllcy4gQWxsIHRoZXNlIGEgUm9tYW4sIGluIHRoZSBkaXNhc3Ryb3VzIGRheXMgb2YgR3JlZWNlIGZvbGxvd2luZyB0aGUgZmFsbCBvZiBDb3JpbnRoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0NiBCLkMuLCBhdCB0aGUgY2xvc2Ugb2YgUm9tZSdzIHdhciB3aXRoIHRoZSBBY2hhZWFuIGxlYWd1ZS48L25vdGU+IGF0dGVtcHRlZCB0byBoYXZlIHJlbW92ZWQsIGFuZCBoZSBhdHRhY2tlZCB0aGUgbWVtb3J5IG9mIFBoaWxvcG9lbWVuIGhpbXNlbGYsIGFjY3VzaW5nIGhpbSwgYXMgaWYgc3RpbGwgYWxpdmUsIG9mIGhhdmluZyBiZWVuIGEgbWFsZXZvbGVudCBlbmVteSBvZiB0aGUgUm9tYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgcHJvcG9zYWwgaGFkIGJlZW4gZGlzY3Vzc2VkIGFuZCBQb2x5Yml1cyBoYWQgc3Bva2VuIGluIG9wcG9zaXRpb24gdG8gUGhpbG9wb2VtZW4ncyBkZXRyYWN0b3IsIG5laXRoZXIgTXVtbWl1cyBub3IgdGhlIG1lbWJlcnMgb2YgdGhlIGNvbW1pc3Npb248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGNvbW1pc3Npb24gb2YgdGVuLCBhcHBvaW50ZWQgYnkgdGhlIFJvbWFuIHNlbmF0ZSB0byBzZXR0bGUgdGhlIGFmZmFpcnMgb2YgR3JlZWNlLiBJdCB3YXMgYmVmb3JlIHRoaXMgYm9keSB0aGF0IFBoaWxvcG9lbWVuJ3MgbWVtb3J5IHdhcyBhdHRhY2tlZCBhbmQgZGVmZW5kZWQuPC9ub3RlPiB3b3VsZCBjb25zZW50IHRoYXQgdGhlIGhvbm91cnMgcGFpZCB0byBhbiBpbGx1c3RyaW91cyBtYW4gc2hvdWxkIGJlIG9ibGl0ZXJhdGVkLCBhbHRob3VnaCBoZSBoYWQgbWFkZSBubyBsaXR0bGUgb3Bwb3NpdGlvbiB0byBGbGFtaW5pbnVzIGFuZCBNYW5pdXMuIFRoZXNlIGp1ZGdlcyBkaXN0aW5ndWlzaGVkLCBhcyBpdCB3b3VsZCBhcHBlYXIsIGJldHdlZW4gdmlydHVlIGFuZCBuZWNlc3NpdHksIGJldHdlZW4gaG9ub3VyIGFuZCBhZHZhbnRhZ2UuIFRoZXkgcmlnaHRseSBhbmQgZml0bHkgY29uc2lkZXJlZCB0aGF0IGJlbmVmYWN0b3JzIG91Z2h0IGFsd2F5cyB0byByZWNlaXZlIHJld2FyZCBhbmQgZ3JhdGl0dWRlIGZyb20gdGhlaXIgYmVuZWZpY2lhcmllcywgYW5kIGdvb2QgbWVuIGhvbm91ciBmcm9tIHRoZSBnb29kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBidXJpZWQsIHRoZW4sIGFzIHdhcyBmaXR0aW5nLCB3aXRoIGNvbnNwaWN1b3VzIGhvbm91cnMsIGFuZCBhdCBoaXMgdG9tYiB0aGUgY2FwdGl2ZSBNZXNzZW5pYW5zIHdlcmUgc3RvbmVkIHRvIGRlYXRoLiBNYW55IHN0YXR1ZXMgb2YgaGltIHdlcmUgZXJlY3RlZCBhbmQgbWFueSBob25vdXJzIGRlY3JlZWQgaGltIGJ5IHRoZSBjaXRpZXMuIEFsbCB0aGVzZSBhIFJvbWFuLCBpbiB0aGUgZGlzYXN0cm91cyBkYXlzIG9mIEdyZWVjZSBmb2xsb3dpbmcgdGhlIGZhbGwgb2YgQ29yaW50aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0NiBCLkMuLCBhdCB0aGUgY2xvc2Ugb2YgUm9tZSdzIHdhciB3aXRoIHRoZSBBY2hhZWFuIGxlYWd1ZS48L25vdGU+IGF0dGVtcHRlZCB0byBoYXZlIHJlbW92ZWQsIGFuZCBoZSBhdHRhY2tlZCB0aGUgbWVtb3J5IG9mIFBoaWxvcG9lbWVuIGhpbXNlbGYsIGFjY3VzaW5nIGhpbSwgYXMgaWYgc3RpbGwgYWxpdmUsIG9mIGhhdmluZyBiZWVuIGEgbWFsZXZvbGVudCBlbmVteSBvZiB0aGUgUm9tYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
