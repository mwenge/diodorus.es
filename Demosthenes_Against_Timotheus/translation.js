var translation={}
translation['41.1'] = ""
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYXMgaXQgaXMsIHRoZSBtb3JlIGdlbnRsZW5lc3MgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbiBJIHVzZWQgaW4gdGFsa2luZyB3aXRoIHRoZSBkZWZlbmRhbnQsIHRoZSBtb3JlIGNvbnRlbXB0IGhlIHNob3dlZAogICAgICAgICAgICAgICAgICAgIHRvd2FyZCBtZS4gQW5kIG5vdyBpdCBhcHBlYXJzIHRoYXQgaW4gbXkgY29udGVzdCB3aXRoIGhpbSB3ZSBhcmUgaW4gbm8gc2Vuc2Ugb24KICAgICAgICAgICAgICAgICAgICBlcXVhbCB0ZXJtcywgYnV0IGhlIGNhbiB0YWtlIHRoZSBtYXR0ZXIgbGlnaHRseSwgc2luY2UgaGUgaGFzIGJlZW4gYWNjdXN0b21lZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbWUgb2Z0ZW4gYmVmb3JlIHlvdSwgd2hlcmVhcyBJIGZlYXIgdGhpcyB2ZXJ5IHRoaW5nLCB0aGF0IGJlY2F1c2Ugb2YgbXkgbGFjawogICAgICAgICAgICAgICAgICAgIG9mIGV4cGVyaWVuY2UgSSBtYXkgcHJvdmUgdW5hYmxlIHRvIGV4cGxhaW4gbXkgY2FzZSB0byB5b3UuIE5vbmUgdGhlIGxlc3MsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCBJIGJlZyB5b3UgdG8gZ2l2ZSBoZWVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Qb2x5ZXVjdHVzIHdhcyBhIG1hbiBvZiBUZWl0aHJhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGVpdGhyYXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgT2VuZcOvcy48L25vdGU+IG5vdAogICAgICAgICAgICAgICAgICAgIHVua25vd24sIGl0IG1heSB3ZWxsIGJlLCB0byBzb21lIG9mIHlvdS4gVGhpcyBQb2x5ZXVjdHVzLCBzaW5jZSBoZSBoYWQgbm8gbWFsZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBhZG9wdGVkIExlb2NyYXRlcywgdGhlIGJyb3RoZXIgb2YgaGlzIG93biB3aWZlOyBidXQgc2luY2UgaGUgaGFkIHR3bwogICAgICAgICAgICAgICAgICAgIGRhdWdodGVycyBieSB0aGUgc2lzdGVyIG9mIExlb2NyYXRlcywgaGUgZ2F2ZSB0aGUgZWxkZXIgdG8gbWUgaW4gbWFycmlhZ2Ugd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBvZiBmb3J0eSBtaW5hZSwgYW5kIHRoZSB5b3VuZ2VyIHRvIExlb2NyYXRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWFycmlhZ2UgYmV0d2VlbiB1bmNsZSBhbmQgbmllY2Ugd2FzIGFsbG93ZWQgaW4gYW5jaWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBBIG1hbiBtaWdodCBldmVuIG1hcnJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBoYWxmLXNpc3RlciDvvIhTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1Ny4yIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDU3LjI8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzkzIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEEgbWFuIG1pZ2h0IGV2ZW4gbWFycnkKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGhhbGYtc2lzdGVyIO+8iFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU3LjIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNTcuMjwvYmlibD7vvIkuPC90cmFuc2xhdGlvbj4="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIG1hdHRlcnMgc3Rvb2QsIHdoZW4gYSBxdWFycmVsIGNhbWUgYWJvdXQKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIFBvbHlldWN0dXMgYW5kIExlb2NyYXRlcywgYXMgdG8gdGhlIG5hdHVyZSBvZiB3aGljaCBJIGtub3cgb2Ygbm90aGluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGl0IGlzIGluY3VtYmVudCB1cG9uIG1lIHRvIHJlbGF0ZSwgYW5kIFBvbHlldWN0dXMgdG9vayBhd2F5IGhpcwogICAgICAgICAgICAgICAgICAgICAgICBkYXVnaHRlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGNhbiBtZWFuIG9ubHkgdGhhdCBoZSBpbmR1Y2VkCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBkYXVnaHRlciB0byBnbyBiZWZvcmUgdGhlIEFyY2hvbiBhbmQgZGVtYW5kIGEgZGl2b3JjZS48L25vdGU+IGFuZCBnYXZlCiAgICAgICAgICAgICAgICAgICAgaGVyIGluIG1hcnJpYWdlIHRvIHRoaXMgbWFuIFNwdWRpYXMuIEFmdGVyIHRoaXMgTGVvY3JhdGVzLCBiZWluZyBncmVhdGx5CiAgICAgICAgICAgICAgICAgICAgaW5jZW5zZWQsIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IFBvbHlldWN0dXMgYW5kIFNwdWRpYXMgaGVyZSwgYW5kIHRoZXkgd2VyZSBmb3JjZWQKICAgICAgICAgICAgICAgICAgICB0byByZW5kZXIgYW4gYWNjb3VudGluZyBpbiByZWdhcmQgdG8gYWxsIHRoZSBtYXR0ZXJzIGF0IGlzc3VlLCBhbmQgaW4gdGhlIGVuZCBhCiAgICAgICAgICAgICAgICAgICAgc2V0dGxlbWVudCB3YXMgcmVhY2hlZCBvbiB0aGUgdGVybXMgdGhhdCBMZW9jcmF0ZXMsIG9uIHJlY2VpdmluZyBiYWNrIGFsbCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGJyb3VnaHQgaW50byB0aGUgZXN0YXRlLCBzaG91bGQgYmUgcmVjb25jaWxlZCB3aXRoIFBvbHlldWN0dXMsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgZmluYWwgcmVsZWFzZXMgc2hvdWxkIGJlIGdpdmVuIGZyb20gYWxsIGRlbWFuZHMgbWFkZSBieSBlYWNoIHVwb24gdGhlIG90aGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgd2h5IGlzIGl0LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgdG9sZCB5b3UgdGhpcz8gQmVjYXVzZSBJIGRpZCBub3QgcmVjZWl2ZSB0aGUgd2hvbGUgb2YgbXkgd2lmZSdzIHBvcnRpb24sCiAgICAgICAgICAgICAgICAgICAgYnV0IGEgdGhvdXNhbmQgZHJhY2htYWUgd2VyZSBsZWZ0IHVucGFpZCB3aXRoIHRoZSB1bmRlcnN0YW5kaW5nIHRoYXQgSSBzaG91bGQKICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHRoZW0gb24gdGhlIGRlYXRoIG9mIFBvbHlldWN0dXM7IGFuZCBzbyBsb25nIGFzIExlb2NyYXRlcyB3YXMgdGhlIGhlaXIKICAgICAgICAgICAgICAgICAgICBvZiBQb2x5ZXVjdHVzLCBpdCB3YXMgaGUgd2hvIHdhcyByZXNwb25zaWJsZSB0byBtZSBmb3IgdGhlIGRlYnQ7IGJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgTGVvY3JhdGVzIGhhZCBsZWZ0IHRoZSBmYW1pbHksIGFuZCBQb2x5ZXVjdHVzIHdhcyBzZXJpb3VzbHkgaWxsLCB0aGVuLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgdG8gc2VjdXJlIHRoZSB0ZW4gbWluYWUsIEkgdG9vayBhIG1vcnRnYWdlIG9uIHRoaXMgaG91c2UsIHRoZSByZW50cwogICAgICAgICAgICAgICAgICAgIGFjY3J1aW5nIGZyb20gd2hpY2ggU3B1ZGlhcyBzZWVrcyB0byBwcmV2ZW50IG1lIGZyb20gY29sbGVjdGluZy4gPC90cmFuc2xhdGlvbj4="
translation['41.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgdGhlbiwgSSBzaGFsbCBicmluZyBiZWZvcmUgeW91IGFzCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRob3NlIHdobyB3ZXJlIHByZXNlbnQgd2hlbiBQb2x5ZXVjdHVzIGJldHJvdGhlZCBoaXMgZGF1Z2h0ZXIgdG8gbWUKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgcG9ydGlvbiBvZiBmb3J0eSBtaW5hZTsgdGhlbiBJIHNoYWxsIHByb3ZlIHRoYXQgd2hhdCBJIHJlY2VpdmVkIHdhcyBsZXNzCiAgICAgICAgICAgICAgICAgICAgYnkgYSB0aG91c2FuZCBkcmFjaG1hZTsgYW5kIGZ1cnRoZXIgdGhhdCBQb2x5ZXVjdHVzIGFsd2F5cyBhZG1pdHRlZCB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGluIG15IGRlYnQsIGFuZCB0aGF0IGhlIGludHJvZHVjZWQgdG8gbWUgTGVvY3JhdGVzIGFzIGd1YXJhbnRvcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBhcyB0aGUgcGVyc29uIHdobyB3b3VsZCBiZSByZXNwb25zaWJsZSBmb3IgcGF5bWVudAogICAgICAgICAgICAgICAgICAgICAgICBhZnRlciBoaXMgb3duIGRlYXRoLjwvbm90ZT47IGFuZCB0aGF0IGF0IGhpcyBkZWF0aCBoZSBkaXJlY3RlZCBieSBoaXMgd2lsbAogICAgICAgICAgICAgICAgICAgIHRoYXQgcGlsbGFycyBzaG91bGQgYmUgc2V0IHVwIG9uIHRoZSBob3VzZSBpbiBteSBmYXZvciBmb3IgYSB0aG91c2FuZCBkcmFjaG1hZQogICAgICAgICAgICAgICAgICAgIGR1ZSBvbiBhY2NvdW50IG9mIG15IHdpZmUncyBwb3J0aW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgY2FsbAogICAgICAgICAgICAgICAgICAgIHRoZSB3aXRuZXNzZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzLCB0aGVuLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgaXMgb25lIG9mIHRoZSBjaGFyZ2VzIHdoaWNoIEkgbWFrZSBhZ2FpbnN0IFNwdWRpYXMuIEFuZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIHdoYXQgc3Ryb25nZXIgb3IgbW9yZSBzb2xpZCBncm91bmQgY291bGQgSSBoYXZlIGluIGNvbWluZyBiZWZvcmUgeW91IHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGUgbGF3IHdoaWNoIGV4cHJlc3NseSBvcmRhaW5zIHRoYXQsIGluIGFsbCBjYXNlcyB3aGVyZSBtZW4gaGF2ZSBnaXZlbiBhCiAgICAgICAgICAgICAgICAgICAgbW9ydGdhZ2UsIHRoZXJlIHNoYWxsIGJlIG5vIHJpZ2h0IG9mIGFjdGlvbiBmb3IgdGhlbSBvciBmb3IgdGhlaXIgaGVpcnM/IEJ1dAogICAgICAgICAgICAgICAgICAgIG5ldmVydGhlbGVzcyBpdCBpcyB0byBkaXNwdXRlIHRoaXMganVzdCBwcm92aXNpb24gdGhhdCBTcHVkaWFzIGhhcyBjb21lIGhlcmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkEgc2Vjb25kIGNsYWltLCBtZW4gb2YgdGhlIGp1cnksIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZzogQXJpc3RvZ2VuZXMgaGFzIGRlcG9zZWQgdGhhdCBQb2x5ZXVjdHVzLCB3aGVuIGFib3V0IHRvIGRpZSwgY2hhcmdlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlcmUgd2VyZSBkdWUgaGltIGZyb20gU3B1ZGlhcyB0d28gbWluYWUgd2l0aCBpbnRlcmVzdCDvvIh0aGlzIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSBwcmljZSBvZiBhIGRvbWVzdGljIHNsYXZlIHdob20gdGhlIGRlZmVuZGFudCBoYWQgYm91Z2h0IGZyb20gUG9seWV1Y3R1cywgYnV0CiAgICAgICAgICAgICAgICAgICAgaGFkIG5laXRoZXIgcGFpZCB0aGUgbW9uZXkgbm9yIGhhcyBub3cgZW50ZXJlZCBpdCBpbiB0aGUgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgIGFjY291bnTvvIk7IGFuZCBmdXJ0aGVybW9yZSB0aGVyZSBhcmUgZWlnaHRlZW4gaHVuZHJlZCBkcmFjaG1hZSwKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgd2hpY2ggSSBhbSBteXNlbGYgYXQgYSBsb3NzIHRvIGtub3cgd2hhdCByZWFzb25hYmxlIHRoaW5nIGhlIHdpbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRvIHNheS4gPC90cmFuc2xhdGlvbj4="
translation['41.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBib3Jyb3dlZCB0aGUgbW9uZXkgZnJvbSB0aGUgd2lmZQogICAgICAgICAgICAgICAgICAgIG9mIFBvbHlldWN0dXMsIGFuZCB0aGVyZSBhcmUgcGFwZXJzIHdoaWNoIHRoYXQgbGFkeSBsZWZ0IGJlaGluZCBhdCBoZXIgZGVhdGgsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBsYWR5J3MgYnJvdGhlcnMgYXJlIHdpdG5lc3NlcywgZm9yIHRoZXkgd2VyZSBwcmVzZW50IGF0IGFsbCB0aW1lcyBhbmQKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbmVkIGhlciBvbiBldmVyeSBwb2ludCwgdGhhdCB0aGVyZSBtaWdodCBiZSBubyB1bnBsZWFzYW50bmVzcyBiZXR3ZWVuIHVzLgogICAgICAgICAgICAgICAgICAgIEl0IGlzLCB0aGVuLCBhbiBvdXRyYWdlb3VzIGFuZCBjcnVlbCB0aGluZywgbWVuIG9mIHRoZSBqdXJ5LCB3aGVuIEkgb24gbXkgcGFydCwKICAgICAgICAgICAgICAgICAgICBmb3IgZXZlcnl0aGluZyB3aGljaCBJIGVpdGhlciBib3VnaHQgZnJvbSBQb2x5ZXVjdHVzIGR1cmluZyBoaXMgbGlmZXRpbWUgb3IKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBmcm9tIGhpcyB3aWZlLCBoYXZlIGR1bHkgcGFpZCB0aGUgcHJpY2UgYW5kIHRoZSBpbnRlcmVzdCBhcyB3ZWxsLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbSBub3cgYnJpbmdpbmcgaW50byB0aGUgZ2VuZXJhbCBhY2NvdW50IGV2ZXJ5dGhpbmcgd2hpY2ggSSBvd2VkLCA8L3RyYW5zbGF0aW9uPg=="
translation['41.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoaXMgZmVsbG93IHNob3VsZCBzaG93IG5vIHJlZ2FyZCBlaXRoZXIgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91ciBsYXdzIG9yIGZvciB0aGUgd2lsbCBvZiBQb2x5ZXVjdHVzLCBvciBmb3IgdGhlIHBhcGVycyB3aGljaCBoYXZlIGJlZW4gbGVmdCwKICAgICAgICAgICAgICAgICAgICBvciBmb3IgdGhvc2Ugd2hvIGtuZXcgdGhlIGZhY3RzLCBidXQgaW4gdGhlIGZhY2Ugb2YgYWxsIHRoaXMgc2hvdWxkIGhhdmUgY29tZQogICAgICAgICAgICAgICAgICAgIGludG8gY291cnQgdG8gY29udGVzdCBteSBwbGVhLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgdGFrZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgd2hpY2ggZGVuaWVzIHRoZSByaWdodCBvZiBhY3Rpb24gZm9yIG1vcnRnYWdlZCBwcm9wZXJ0eSBhZ2FpbnN0IHRoZQogICAgICAgICAgICAgICAgICAgIGhvbGRlcnMgb2YgdGhlIG1vcnRnYWdlLCB0aGVuIHRoZSBwYXBlcnMgd2hpY2ggd2VyZSBsZWZ0LCBhbmQgdGhlIGRlcG9zaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RvZ2VuZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iUGFwZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGFwZXJzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBhcGVyczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHRvIGluc3RydWN0IHlvdSBpbiBkZXRhaWwgYWxzbyByZWdhcmRpbmcgdGhlIG90aGVyIGNsYWltcyB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgbWFrZS4gVGhleSByZWNlaXZlZCBmcm9tIHRoZSB3aWZlIG9mIFBvbHlldWN0dXMgYSBib3dsLCB3aGljaCB0aGV5IHBhd25lZAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHdpdGggc29tZSBwaWVjZXMgb2YgamV3ZWxyeSwgYW5kIHRoaXMgdGhleSBoYXZlIG5vdCByZWRlZW1lZCBhbmQKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGludG8gdGhlIGdlbmVyYWwgYWNjb3VudCwgYXMgRGVtb3BoaWx1cywgdG8gd2hvbSBpdCB3YXMgcGF3bmVkLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmeS4gVGhleSBoYXZlIGFsc28gc29tZSBzdHVmZiBmb3IgaGFuZ2luZ3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB3b3JkIGxpdGVyYWxseSBtZWFucyDigJx0ZW50LOKAnSBhbmQgaXQgaXMgc28gcmVuZGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgc29tZSBzY2hvbGFycyBpbiB0aGlzIHBhc3NhZ2UuIEhhcnBvY3JhdGlvbiB0YWtlcyBpdCB0byBtZWFuIOKAnGEKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYXNvbC7igJ08L25vdGU+IHdoaWNoIHRoZXkgcmVjZWl2ZWQsIGJ1dCB0aGV5IGRvIG5vdCBhY2NvdW50IGZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgZWl0aGVyOyBhbmQgbWFueSBtb3JlIGFydGljbGVzIG9mIHRoZSBzYW1lIHNvcnQuIEFuZCBmaW5hbGx5LCBhbHRob3VnaCBteQogICAgICAgICAgICAgICAgICAgIHdpZmUgYWR2YW5jZWQgYSBtaW5hIG9mIHNpbHZlciBhbmQgZXhwZW5kZWQgaXQgb24gaGVyIGZhdGhlcidzIGJlaGFsZiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZmVhc3Qgb2YgdGhlIGRlYWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByb3Blcmx5LCDigJx0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTmVtZXNlaWEs4oCdIGEgZmVzdGl2YWwgY2VsZWJyYXRlZCBldmVyeSB5ZWFyIG9uIHRoZSBmaWZ0aCBkYXkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1vbnRoIEJvZWRyb21pb24g77yIU2VwdGVtYmVy77yJLjwvbm90ZT4gdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIHJlZnVzZXMgdG8gY29udHJpYnV0ZSBoaXMgc2hhcmUgZXZlbiBvZiB0aGlzOyBuYXksIHdoYXQgaGUgaGFzIHJlY2VpdmVkIGhlCiAgICAgICAgICAgICAgICAgICAga2VlcHM7IG9mIG90aGVyIGl0ZW1zIGhlIHJlY2VpdmVzIGhpcyBkdWUgcG9ydGlvbjsgYnV0IHRoZXNlIGNsYWltcyBoZSB0aHVzCiAgICAgICAgICAgICAgICAgICAgb3Blbmx5IHJlZnVzZXMgdG8gbWVldC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoYXQgdGhlc2UgbWF0dGVycyB0b28KICAgICAgICAgICAgICAgICAgICBtYXkgbm90IGJlIGxlZnQgbmVnbGVjdGVkLCB0YWtlLCBwbGVhc2UsIHRoZSBkZXBvc2l0aW9ucyByZWdhcmRpbmcgdGhlbQogICAgICAgICAgICAgICAgICAgICAgICBhbGwuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgbWF5IHdlbGwgYmUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IFNwdWRpYXMgd2lsbCBtYWtlIG5vIHN0YXRlbWVudCB0byBtZWV0IHRoZXNlIGZhY3RzOyBmb3IgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIG5vdCBiZSBhYmxlIHRvIGRvIHNvLCBjbGV2ZXIgdGhvdWdoIGhlIGlzOyBidXQgd2lsbCBhY2N1c2UgUG9seWV1Y3R1cyBhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgd2lmZSwgYW5kIHdpbGwgZGVjbGFyZSB0aGF0IHRoZXkgZGlkIGFsbCB0aGVzZSB0aGluZ3MgdW5kZXIgbXkgaW5mbHVlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIGFzIGZhdm9ycyB0byBtZSwgYW5kIHRoYXQgaGUgaXMgYmVpbmcgZ3JlYXRseSBpbmp1cmVkIGluIG1hbnkgb3RoZXIgcmVzcGVjdHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBicm91Z2h0IGFjdGlvbiBhZ2FpbnN0IG1lOyBmb3IgdGhpcyBpcyB3aGF0IGhlIHVuZGVydG9vayB0byBzYXkgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFyYml0cmF0b3IgYWxzby4gPC90cmFuc2xhdGlvbj4="
translation['41.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZm9yIG15IHBhcnQsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCBpbiB0aGUgZmlyc3QgcGxhY2UgSSBkbyBub3QgdGhpbmsgdGhhdCBhIGRlZmVuY2Ugb2YgdGhhdCBzb3J0IGlzCiAgICAgICAgICAgICAgICAgICAgbGVnaXRpbWF0ZSwgb3IgdGhhdCBpdCBpcyBwcm9wZXIsIHdoZW4gb25lIGlzIG1hbmlmZXN0bHkgc2hvd24gdG8gYmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd3JvbmcsIGZvciBoaW0gdG8gc2hpZnQgdGhlIGNoYXJnZXMgYW5kIGhhdmUgcmVjb3Vyc2UgdG8gYWNjdXNhdGlvbiBhbmQgY2FsdW1ueTsKICAgICAgICAgICAgICAgICAgICBuYXksIGZvciBoaXMgY291bnRlci1jaGFyZ2VzLCBpZiBoZSBpcyBzdWZmZXJpbmcgYW55IHdyb25nLCBoZSB3aWxsIHBsYWlubHkKICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHNhdGlzZmFjdGlvbiwgYnV0IGZvciB0aGUgY2xhaW1zIG1hZGUgb24gaGltLCBoZSB3aWxsIGdpdmUgaXQuIEZvciBob3cKICAgICAgICAgICAgICAgICAgICBjb3VsZCBJIG5vdyBkZWZlbmQgbXlzZWxmIGFnYWluc3QgdGhlIHNsYW5kZXJzIG9mIHRoZXNlIG1lbiwgaWYgSSBwYXNzZWQgb3ZlcgogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXJzIHVwb24gd2hpY2ggeW91IGFyZSB0byBnaXZlIHlvdXIgdmVyZGljdD8gPC90cmFuc2xhdGlvbj4="
translation['41.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbmV4dCBwbGFjZSBJIHdvbmRlciwgaWYgaGUgaGFkIHRydWUgYW5kIGp1c3QgZGVtYW5kcyB0byBtYWtlLAogICAgICAgICAgICAgICAgICAgIHdoeSBpdCB3YXMgdGhhdCwgd2hlbiBvdXIgZnJpZW5kcyB3aXNoZWQgdG8gc2V0dGxlIG91ciBkaWZmZXJlbmNlcywgYW5kIG1hbnkKICAgICAgICAgICAgICAgICAgICBjb25mZXJlbmNlcyB3ZXJlIGhlbGQsIGhlIGNvdWxkIG5vdCBhYmlkZSBieSB0aGVpciBkZWNpc2lvbi4gQW5kIHlldCB3aG8gY291bGQKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgaGF2ZSBleHBvc2VkIHRoZSBiYXNlbGVzc25lc3Mgb2YgY2xhaW1zIGFkdmFuY2VkIGJ5IGhpbSBvciBieSBtZSB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCBhdCBhbGwgdGhlc2UgdHJhbnNhY3Rpb25zLCB3aG8ga25ldyB0aGUgZmFjdHMgYXMgd2VsbCBhcwogICAgICAgICAgICAgICAgICAgIHdlIGRpZCBvdXJzZWx2ZXMsIGFuZCB3aG8gd2VyZSBpbXBhcnRpYWwgZnJpZW5kcyBvZiB1cyBib3RoPyA8L3RyYW5zbGF0aW9uPg=="
translation['41.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyB3YXMgcGxhaW5seSBub3QgdG8gdGhlIGludGVyZXN0IG9mIG15CiAgICAgICAgICAgICAgICAgICAgb3Bwb25lbnTigJR0aGF0IGhlIHNob3VsZCBiZSBvcGVubHkgY29udmljdGVkIGJ5IG91ciBmcmllbmRzIGFuZCBmaW5kIGEKICAgICAgICAgICAgICAgICAgICBzZXR0bGVtZW50IGluIHRoaXMgd2F5LiBGb3IgZG8gbm90IGltYWdpbmUsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBtZW4gd2hvIGtub3cKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlc2UgZmFjdHMsIGFuZCB3aG8gbm93IGF0IHRoZWlyIG93biByaXNrIGFyZSBnaXZpbmcgdGVzdGltb255IGluIG15IGZhdm9yLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRoZW4sIHdoZW4gdGhleSBoYWQgYmVlbiBwdXQgdW5kZXIgb2F0aCwgaGF2ZSBmb3JtZWQgYSBkaWZmZXJlbnQKICAgICAgICAgICAgICAgICAgICBjb25jbHVzaW9uIGFib3V0IHRoZW0uIEhvd2V2ZXIsIHRob3VnaCB5b3UgaGFkIG5vbmUgb2YgdGhlc2UgZmFjdHMgdG8gYWlkIHlvdSwKICAgICAgICAgICAgICAgICAgICBldmVuIHNvIGl0IGlzIG5vdCBkaWZmaWN1bHQgdG8gZm9ybSBhbiBvcGluaW9uIGFzIHRvIHdoaWNoIG9mIHRoZSB0d28gcGFydGllcyBpcwogICAgICAgICAgICAgICAgICAgIHNwZWFraW5nIHRoZSB0cnV0aC4gPC90cmFuc2xhdGlvbj4="
translation['41.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgcmVnYXJkaW5nIHRoZSBob3VzZSwKICAgICAgICAgICAgICAgICAgICBpZiBoZSBtYWludGFpbnMgdGhhdCBQb2x5ZXVjdHVzIHdhcyBpbmR1Y2VkIGJ5IG1lIHRvIG9yZGVyIHRoYXQgbW9ydGdhZ2UtcGlsbGFycwogICAgICAgICAgICAgICAgICAgIGJlIHNldCB1cCBmb3IgdGhlIHRob3VzYW5kIGRyYWNobWFlLCB5ZXQgc3VyZWx5LCBTcHVkaWFzLCBJIGRpZCBub3QgdXNlIG15CiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIHRvIGluZHVjZSB0aGUgd2l0bmVzc2VzIHRvIGdpdmUgZmFsc2UgdGVzdGltb255IGluIG15CiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3Qs4oCUd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQgd2hlbiBoZSBiZXRyb3RoZWQgdG8gbWUgaGlzCiAgICAgICAgICAgICAgICAgICAgZGF1Z2h0ZXIsIHdobyBrbmV3IHRoYXQgSSByZWNlaXZlZCBsZXNzIHRoYW4gdGhlIGVudGlyZSBtYXJyaWFnZSBwb3J0aW9uLCB3aG8KICAgICAgICAgICAgICAgICAgICBoZWFyZCBoaW0gd2hlbiBoZSBhY2tub3dsZWRnZWQgdGhhdCBoZSB3YXMgaW4gbXkgZGVidCBhbmQgYWxzbyB3aGVuIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgTGVvY3JhdGVzIGFzIHRoZSBvbmUgd2hvIHNob3VsZCBtYWtlIHBheW1lbnQsIGFuZCB3aG8gZmluYWxseSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCB3aGVuIHRoZSB3aWxsIHdhcyBtYWRlLiBGb3Igd2l0aCBhbGwgdGhlc2UgcGVyc29ucyBpdCB3YXMgbm8gbG9uZ2VyIGEKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiBvZiBmYXZvcmluZyBtZSBpbiB0aGVzZSBtYXR0ZXJzLCBidXQgb2Ygcmlza2luZyBhIGNoYXJnZSBvZiBnaXZpbmcKICAgICAgICAgICAgICAgICAgICBmYWxzZSB0ZXN0aW1vbnksIGlmIHRoZXkgZGVwb3NlZCB0byB3aGF0IHdhcyBub3QgdGhlIHRydXRoLiBMZXQgdXMsIHRoZW4sIGhhdmUKICAgICAgICAgICAgICAgICAgICBubyBtb3JlIG9mIHRoYXQgbWF0dGVyOyBidXQgd2hhdCB3aWxsIHlvdSBzYXkgdG8gdGhpcywgU3B1ZGlhcz8gPC90cmFuc2xhdGlvbj4="
translation['41.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc2VlIHRoYXQgeW91IGdpdmUgdGhlc2UgZ2VudGxlbWVuIGEgcHJlY2lzZQogICAgICAgICAgICAgICAgICAgIGFuc3dlci4gSWYgaGUgZG9lcyBub3QsIGRvIHlvdSBhbGwgZGVtYW5kIGl0IG9mIGhpbS4gRm9yLCB3aGVuIFBvbHlldWN0dXMgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIGRpcmVjdGlvbnMgaW4gaGlzIHdpbGwsIHRoZSBkZWZlbmRhbnQncyB3aWZlIHdhcyBwcmVzZW50LCBhbmQgeW91IG1heSBiZQogICAgICAgICAgICAgICAgICAgIHN1cmUgdGhhdCBzaGUgcmVwb3J0ZWQgdG8gaGltIHRoZSB3aWxsIG9mIGhlciBmYXRoZXIsIGVzcGVjaWFsbHkgaWYgaGUgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgYW4gZXF1YWwgc2hhcmUsIGJ1dCB3YXMgYXQgYSBkaXNhZHZhbnRhZ2UgaW4gYWxsIHJlc3BlY3RzOyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGhpbXNlbGYgd2FzIGludml0ZWQgdG8gYmUgcHJlc2VudCwgc28gdGhhdCBpdCBpcyBub3Qgb3BlbiB0byBoaW0gdG8KICAgICAgICAgICAgICAgICAgICBzYXkgdGhhdCB3ZSBtYW5hZ2VkIHRoaXMgaW4gc2VjcmV0IGFuZCBrZXB0IHRoZW0gaW4gdGhlIGRhcmsuIEZvciBhbHRob3VnaCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBpbnZpdGVkIHRvIGJlIHByZXNlbnQsIGhlIHNhaWQgdGhhdCBoZSB3YXMgYnVzeSBoaW1zZWxmLCBidXQgdGhhdCBpdCB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJlIGVub3VnaCBpZiBoaXMgd2lmZSB3ZXJlIHRoZXJlLiBXaGF0IG1vcmUgd291bGQgeW91IGhhdmU/IDwvdHJhbnNsYXRpb24+"
translation['41.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFyaXN0b2dlbmVzIGdhdmUgaGltIGFuIGV4YWN0IGFjY291bnQgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWF0dGVycywgZXZlbiB0aGVuIGhlIG1hZGUgbm8gY29tbWVudCwgYW5kIHRob3VnaCBQb2x5ZXVjdHVzIGxpdmVkIG9uIG1vcmUKICAgICAgICAgICAgICAgICAgICB0aGFuIGZpdmUgZGF5cyBhZnRlciB0aGlzLCBoZSBuZWl0aGVyIHNob3dlZCBhbnkgdmV4YXRpb24gb24gZ29pbmcgdG8gdGhlIGhvdXNlLAogICAgICAgICAgICAgICAgICAgIG5vciBtYWRlIGFueSBwcm90ZXN0LCBub3IgZGlkIGhpcyB3aWZlLCB3aG8gd2FzIHByZXNlbnQgZnJvbSB0aGUgZmlyc3Qgb24gYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugb2NjYXNpb25zLiBJdCB3b3VsZCBhcHBlYXIsIHRoZW4sIHRoYXQgUG9seWV1Y3R1cyB3YXMgbm90IGluZHVjZWQgYnkgbWUgdG8KICAgICAgICAgICAgICAgICAgICBmYXZvciBtZSBpbiB0aGVzZSBtYXR0ZXJzOyB0aGUgYWN0IHdhcyB5b3VyIG93bi4gS2VlcCB0aGVzZSBmYWN0cywgdGhlbiwgY2xlYXJseQogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgbWluZHMsIG1lbiBvZiB0aGUganVyeSwgYW5kIGlmIGhlIG5vdyB0cmllcyB0byBtYWtlIGFueSBzbGFuZGVyb3VzCiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50cyBhYm91dCB0aGUgbWF0dGVyLCBjb25mcm9udCBoaW0gd2l0aCB0aGVtLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgZmlyc3QsIHRoYXQgeW91IG1heSBiZSBmdWxseSBhc3N1cmVkIHRoYXQgbWF0dGVycyBhcmUgYXMgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3RhdGVkLCBoZWFyIHRoZSB3aXRuZXNzZXMuIFJlYWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgaW4gdGhlIG1hdHRlciBvZiB0aGUgb25lIHRob3VzYW5kIGRyYWNobWFlLCB0byBwcm92ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgUG9seWV1Y3R1cyBtb3J0Z2FnZWQgdGhlIGhvdXNlIHRvIG1lIGhvbmVzdGx5LCBhbmQgZm9yIGFuIGV4aXN0aW5nIGRlYnQsIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXN0aW1vbnkgb2YgbXkgb3Bwb25lbnQgaGltc2VsZiBhbmQgaGlzIHdpZmUgaW4gYWRkaXRpb24gdG8gdGhlc2Ugb3RoZXIKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgd2hvc2UgZGVwb3NpdGlvbnMgaGF2ZSBiZWVuIHB1dCBpbjsgZm9yIHRoZXkgY29uY3VycmVkIGF0IHRoZSB0aW1lLAogICAgICAgICAgICAgICAgICAgIGFuZCBtYWRlIG5vIG9iamVjdGlvbiBlaXRoZXIgdG8gUG9seWV1Y3R1cyB3aG8gbGl2ZWQgc28gbWFueSBkYXlzIGFmdGVyLCBvciB0bwogICAgICAgICAgICAgICAgICAgIEFyaXN0b2dlbmVzLCB3aGVuIHRoZXkgZmlyc3QgaGVhcmQgb2YgdGhlIHdpbGwuIEJ1dCBhc3N1cmVkbHksIGlmIHRoZSBob3VzZSB3YXMKICAgICAgICAgICAgICAgICAgICBob25lc3RseSBtb3J0Z2FnZWQsIGl0IGlzIGltcG9zc2libGUgZm9yIHlvdSwgaWYgeW91IGJlYXIgdGhlIGxhdyBpbiBtaW5kLCB0bwogICAgICAgICAgICAgICAgICAgIGFjcXVpdCBTcHVkaWFzIGFzIHRvIHRoaXMgcGFydCBvZiB0aGUgY2FzZS4gPC90cmFuc2xhdGlvbj4="
translation['41.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgY29uc2lkZXIgYWxzbyB0aGUgbWF0dGVyIG9mIHRoZSB0d2VudHkgbWluYWUsIHdoaWNoIGhlIGRvZXMgbm90IGJyaW5nIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgYWNjb3VudDsgZm9yIGluIHRoaXMgYWdhaW4gdGhlIGRlZmVuZGFudCBoaW1zZWxmIHdpbGwgYmUgbXkgc3Ryb25nZXN0CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc+KAlG5vdCBieSB3b3JkcywgaGVhdmVuIGtub3dzLCBzdWNoIGFzIGhlIHV0dGVycyBub3cgaW4gb3Bwb3NpbmcKICAgICAgICAgICAgICAgICAgICBteSBzdWl04oCUd29yZHMgYXJlIGEgY3JpdGVyaW9uIG9mIG5vIHdvcnRo4oCUYnV0IGJ5IG1hbmlmZXN0CiAgICAgICAgICAgICAgICAgICAgYWN0LiBCeSBkb2luZyB3aGF0LCBtZW4gb2YgdGhlIGp1cnk/IFRvIHRoaXMgSSBiaWQgeW91IG5vdyB0byBnaXZlIGNsb3NlIGhlZWQsCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCwgaWYgaGUgcmVhbGx5IGRhcmVzIHRvIHV0dGVyIGFueSBzbGFuZGVycyBhYm91dCB0aGUgbW90aGVyIG9mIG91cgogICAgICAgICAgICAgICAgICAgIHdpdmVzIG9yIGFib3V0IHRoZSBkb2N1bWVudHMsIHlvdXIga25vd2xlZGdlIG9mIHRoZSBmYWN0cyBtYXkgbWFrZSBpdCBpbXBvc3NpYmxlCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpbSB0byBkZWNlaXZlIHlvdSBieSBoaXMgdGFsay4gPC90cmFuc2xhdGlvbj4="
translation['41.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgcGFwZXJzIHdlcmUgbGVmdCBieSB0aGUgd2lmZSBvZiBQb2x5ZXVjdHVzLCBhcyBJCiAgICAgICAgICAgICAgICAgICAganVzdCBub3cgc2FpZC4gVGhlIHNlYWxzIGJlaW5nIGFja25vd2xlZGdlZCBib3RoIGJ5IHRoZSBkZWZlbmRhbnQncyB3aWZlIGFuZCBieQogICAgICAgICAgICAgICAgICAgIG1pbmUsIHdlIGJvdGgsIGJlaW5nIHByZXNlbnQsIGJyb2tlIHRoZW0gYW5kIHRvb2sgY29waWVzLCBhbmQgdGhlbiBzZWFsZWQgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFwZXJzIGFnYWluLCBhbmQgZGVwb3NpdGVkIHRoZW0gaW4gdGhlIGhhbmRzIG9mIEFyaXN0b2dlbmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['41.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG5vdGUgdGhpcywgbWVuIG9mIHRoZSBqdXJ5LCBub3RlIHRoaXMsIEkgYmVnIG9mCiAgICAgICAgICAgICAgICAgICAgeW91LiBUaGVyZSB3YXMgaW4gdGhlIHBhcGVycyBtZW50aW9uIG9mIHRoZSB0d28gbWluYWUsIHRoZSBwcmljZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzbGF2ZeKAlGFuZCBpdCB3YXMgbm90IG9ubHkgUG9seWV1Y3R1cyBvbiBoaXMgZGVhdGgtYmVkIHdobyBoYWQgbWFkZQogICAgICAgICAgICAgICAgICAgIHRoaXMgY2xhaW3igJRhbmQgdGhlcmUgd2FzIG1lbnRpb24gb2YgdGhlIGVpZ2h0ZWVuIGh1bmRyZWQgZHJhY2htYWUuCiAgICAgICAgICAgICAgICAgICAgV2hlbiBoZSByZWFkIHRoaXMsIGlmIHdoYXQgd2FzIHdyaXR0ZW4gZGlkIG5vdCBjb25jZXJuIGhpbSBhdCBhbGwgYW5kIHdhcwogICAgICAgICAgICAgICAgICAgIHVudHJ1ZSwgd2h5IHByYXkgZGlkIGhlIG5vdCBhdCBvbmNlIHByb3Rlc3QgYWJvdXQgaXQ/IFdoeSBkaWQgaGUgam9pbiBpbiBzZWFsaW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW4gcGFwZXJzIHdoaWNoIHdlcmUgZmFsc2UgYW5kIG9mIG5vIHdvcnRoPyBUaGlzIG9mIGNvdXJzZSBubyBvbmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQgd291bGQgZG8sIGlmIGhlIGRpZCBub3QgY29uY3VyIGluIGFsbCB0aGF0IHdhcyB3cml0dGVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['41.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5LCBtZW4gb2YgdGhlIGp1cnksIHRoaXMgaXMgYW4gb3V0cmFnZW91cwogICAgICAgICAgICAgICAgICAgIHRoaW5nIGlmIHRoZXNlIG1lbiBhcmUgdG8gYmUgcGVybWl0dGVkIG5vdyB0byBkaXNwdXRlIG1hdHRlcnMgdG8gd2hpY2ggdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBnaXZlbiBhc3NlbnQsIGFuZCB5b3UgYXJlIHRvIGZpbmQgbm8gYmFzaXMgZm9yIGp1ZGdlbWVudCBpbiB0aGUgZmFjdAogICAgICAgICAgICAgICAgICAgIHRoYXQgYWxsIG9mIHVzIGFyZSB3b250LCB3aGVuIGNoYXJnZXMgYXJlIG1hZGUgYWdhaW5zdCB1cyB0aGF0IGFyZSB1bmp1c3QgYW5kCiAgICAgICAgICAgICAgICAgICAgdW50cnVlLCBub3QgdG8ga2VlcCBzaWxlbnQsIGJ1dCB0byBkaXNwdXRlIHRoZW0gb24gdGhlIHNwb3QsIGFuZCB0aGF0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGRvIG5vdCBkbyB0aGlzLCBpZiB0aGV5IGNvbnRlc3QgdGhlbSBzdWJzZXF1ZW50bHksIGFyZSBhY2NvdW50ZWQgcmFzY2FscyBhbmQKICAgICAgICAgICAgICAgICAgICB0cmlja3N0ZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['41.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgU3B1ZGlhcyBrbm93cyB0aGlzIGFzIHdlbGwgYXMKICAgICAgICAgICAgICAgICAgICBJLCBhbmQgSSB0aGluayBldmVuIGJldHRlciwgaW5hc211Y2ggYXMgaGUgY29tZXMgb2Z0ZW5lciBiZWZvcmUgeW91ciBjb3VydCwgeWV0CiAgICAgICAgICAgICAgICAgICAgaGUgZmVlbHMgbm8gc2hhbWUgaW4gc2F5aW5nIHRoaW5ncyB0aGF0IGNvbnRyYWRpY3QgYWxsIHRoYXQgaGUgaGFzIGhpbXNlbGYgZG9uZS4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IGZ1bGwgb2Z0ZW4gd2hlbiB5b3UgYmVjb21lIGNvbnNjaW91cyBvZiBvbmUgc2luZ2xlIHBpZWNlIG9mIGZyYXVkLCB5b3UKICAgICAgICAgICAgICAgICAgICB0cmVhdCBpdCBhcyBldmlkZW5jZSBhZ2FpbnN0IHRoZSBvdGhlciBjaGFyZ2VzOyBidXQgdGhlIGRlZmVuZGFudCBpcyBmb3VuZCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBjb252aWN0ZWQgYnkgaGltc2VsZiBvZiBmYWxzZWhvb2Qgb24gZXZlcnkgcG9pbnQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb24sIHByb3ZpbmcgdGhhdCB0aGUgc2VhbHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGFwZXJzIHdlcmUgYWNrbm93bGVkZ2VkIGF0IHRoZSB0aW1lIGJ5IHRoZSB3aWZlIG9mIHRoZSBkZWZlbmRhbnQsIGFuZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBhcGVycyBhcmUgbm93IGRlcG9zaXRlZCwgc2VhbGVkIGJ5IFNwdWRpYXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2luY2UsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFjdHMgaGF2ZSBiZWVuIHNvIGNvbnZpbmNpbmdseSBlc3RhYmxpc2hlZCwgdGhlcmUgaXMgbm8gZnVydGhlciBuZWVkLCBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmssIG9mIG1vcmUgd29yZHMuIEZvciB3aGVuIEkgYW0gYWJsZSB0byBwcm9kdWNlIGJvdGggbGF3cyBhbmQgd2l0bmVzc2VzIGluCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydCBvZiBldmVyeXRoaW5nIHRoYXQgSSBoYXZlIHNhaWQsIGFuZCBhbHNvIGFkbWlzc2lvbnMgbWFkZSBpbiBteSBmYXZvciBieQogICAgICAgICAgICAgICAgICAgIG15IG9wcG9uZW50IGhpbXNlbGYsIHdoYXQgZnVydGhlciBuZWVkIGNhbiB0aGVyZSBiZSBmb3IgYSBsb25nIGFyZ3VtZW50PwogICAgICAgICAgICAgICAgICAgIEhvd2V2ZXIsIGlmIFNwdWRpYXMgcGVyY2hhbmNlIHdheGVzIGluZGlnbmFudCBhYm91dCB0aGUgbWFycmlhZ2UgcG9ydGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICBtYWludGFpbnMgdGhhdCBoZSBpcyBiZWluZyBkZWZyYXVkZWQgdG8gdGhlIGFtb3VudCBvZiBvbmUgdGhvdXNhbmQgZHJhY2htYWUsIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBseWluZy4gRm9yLCB3aGlsZSBoZSBkaXNwdXRlcyBteSBjbGFpbSB0byB0aGlzIHN1bSwgaGUgaGFzIHJlY2VpdmVkIG5vdAogICAgICAgICAgICAgICAgICAgIGxlc3MsIGJ1dCBtb3JlLCBhcyB3aWxsIHByZXNlbnRseSBiZSBtYWRlIGNsZWFyIHRvIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['41.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5OYXkgbW9yZSwgZXZlbiBpZiBhbGwgdGhlc2Ugc3RhdGVtZW50cyBvZiBoaXMgd2VyZQogICAgICAgICAgICAgICAgICAgIGluZGVlZCB0cnVlLCBpdCBpcyBub3QganVzdCwgSSB0YWtlIGl0LCBpZiB0aGUgbGF3cyBhcmUgZ29vZCBmb3IgYW55dGhpbmcsIHRoYXQKICAgICAgICAgICAgICAgICAgICBJIHNob3VsZCBsb3NlIHRoZSBtYXJyaWFnZSBwb3J0aW9uIHdoaWNoIHdhcyBwcm9taXNlZCBtZSwgb3IgdGhhdCBQb2x5ZXVjdHVzLCBpZgogICAgICAgICAgICAgICAgICAgIGhlIGNob3NlIHRvIGdpdmUgYSBzbWFsbGVyIHBvcnRpb24gdG8gb25lIGRhdWdodGVyIGFuZCBhIGxhcmdlciB0byB0aGUgb3RoZXIsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG5vdyBiZSB0aHdhcnRlZC4gRm9yIGl0IHdhcyBvcGVuIHRvIHlvdSwgU3B1ZGlhcywgbm90IHRvIG1hcnJ5IGhpcwogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyLCB1bmxlc3MgdGhlIHRob3VzYW5kIGRyYWNobWFlIHdlcmUgZ2l2ZW4gdG8geW91IGFzIHdlbGwgYXMgdG8gbWUuCiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciB5b3UgcmVjZWl2ZWQgbm8gbGVzcyB0aGFuIEksIGFzIEkgc2hhbGwgc2hvdy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0LCBmaXJzdCwgdGFrZSB0aGUgZGVwb3NpdGlvbiB3aGljaCBzaG93cyBvbiB3aGF0IHRlcm1zIHRoZQogICAgICAgICAgICAgICAgICAgIGxhZHkgd2FzIGdpdmVuIHRvIGhpbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGhvdyBjYW4gaXQKICAgICAgICAgICAgICAgICAgICBiZSB0aGF0IGhlIGhhcyByZWNlaXZlZCBhcyBtdWNoIGFzIEksIG9uZSBtYXkgYXNrLCBpZiBpbiBoaXMgY2FzZSB0aGUgamV3ZWxyeQogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgYXBwYXJlbCwgdG8gdGhlIHZhbHVlIG9mIGEgdGhvdXNhbmQgZHJhY2htYWUsIHdlcmUgcmVja29uZWQgaW4gdGhlIGZvcnR5CiAgICAgICAgICAgICAgICAgICAgbWluYWUsIHdoaWxlIHRvIG1lIHRoZSB0ZW4gbWluYWUgd2VyZSBwYWlkIHNlcGFyYXRlbHkgYW5kIGluIGFkZGl0aW9uPyBUaGlzIGlzCiAgICAgICAgICAgICAgICAgICAgcHJlY2lzZWx5IHdoYXQgSSBhbSBnb2luZyB0byBleHBsYWluLiBGb3IgU3B1ZGlhcywgbWVuIG9mIHRoZSBqdXJ5LCByZWNlaXZlZCBoaXMKICAgICAgICAgICAgICAgICAgICB3aWZlIGZyb20gTGVvY3JhdGVzIHdpdGggdGhlIGpld2VscnkgYW5kIGFwcGFyZWwgb24gd2hpY2ggUG9seWV1Y3R1cyBzZXQgYSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIHRvIExlb2NyYXRlcyBvZiBtb3JlIHRoYW4gYSB0aG91c2FuZCBkcmFjaG1hZSwgd2hpbGUgaW4gbXkgY2FzZSwgaWYgeW91IHNldCB3aGF0CiAgICAgICAgICAgICAgICAgICAgd2FzIHNlbnQgdG8gbWUgb3ZlciBhbmQgYWJvdmUgdGhlIG1hcnJpYWdlIHBvcnRpb27igJRhbGwgdGhhdCBJIGhhdmUgaW4KICAgICAgICAgICAgICAgICAgICBteSBwb3NzZXNzaW9u4oCUb3ZlciBhZ2FpbnN0IHdoYXQgd2FzIGdpdmVuIHRvIFNwdWRpYXMsIHlvdSB3aWxsIGZpbmQKICAgICAgICAgICAgICAgICAgICB0aGVtIHByYWN0aWNhbGx5IGVxdWFsIG92ZXIgYW5kIGFib3ZlIHdoYXQgd2FzIHJlY2tvbmVkIGluIHRoZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlOyA8L3RyYW5zbGF0aW9uPg=="
translation['41.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5zbyB0aGF0IGl0IHdhcyBvbmx5IGZhaXIgdGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGFydGljbGVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgZm9ydHkgbWluYWUsIHNlZWluZyB0aGF0IFBvbHlldWN0dXMgaGFkCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCB0aGVtIGFnYWluc3QgTGVvY3JhdGVzLCBhbmQgdGhleSB3ZXJlIG1vcmUgdGhhbiBoYWQgYmVlbiBnaXZlbgogICAgICAgICAgICAgICAgICAgICAgICBtZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHBsZWFzZSB0YWtlIHRoaXMgaW52ZW50b3J5IGFuZCByZWFkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnltZW4gd2hhdCBlYWNoIG9mIHVzIGhhcyBpbiBoaXMgcG9zc2Vzc2lvbjsgYWZ0ZXIgdGhhdCwgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIG9mIHRoZSBhcmJpdHJhdG9ycywgdGhhdCB0aGV5IG1heSBzZWUgdGhhdCBTcHVkaWFzIGhhcyByZWNlaXZlZCBldmVuCiAgICAgICAgICAgICAgICAgICAgZmFyIG1vcmUgdGhhbiBJLCBhbmQgdGhhdCBMZW9jcmF0ZXMgbWFkZSBjb21wbGFpbnQgcmVnYXJkaW5nIHRoaXMsIGFuZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3JzIHJlbmRlcmVkIHRoaXMgZGVjaXNpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iSW52ZW50b3J5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW52ZW50b3J5PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkludmVudG9yeTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgaXQgbm90CiAgICAgICAgICAgICAgICAgICAgcGxhaW4sIHRoZW4sIHRoYXQgdGhlIGRlZmVuZGFudCBoYXMgbG9uZyBoYWQgaW4gaGlzIHBvc3Nlc3Npb24gZm9ydHkgbWluYWUgYXMKICAgICAgICAgICAgICAgICAgICBoaXMgd2lmZSdzIG1hcnJpYWdlIHBvcnRpb24sIHdoZXJlYXMgSSByZWNlaXZlZCB0aGUgdGhpcnR5IG1pbmFlLCBqdXN0IGFzIGhlCiAgICAgICAgICAgICAgICAgICAgZGlkLCBidXQgbm90IG9ubHkgZGlkIG5vdCByZWNlaXZlIHRoZSB0aG91c2FuZCBkcmFjaG1hZSwgYnV0IGFtIG5vdyBhY3R1YWxseSBpbgogICAgICAgICAgICAgICAgICAgIGplb3BhcmR5IHJlZ2FyZGluZyB0aGVtLCBjaGFyZ2VkIHdpdGggcG9zc2Vzc2luZyB0aGVtIHdyb25nZnVsbHkuIEl0IHdhcyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGlzIHJlYXNvbiwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IFNwdWRpYXMgd291bGQgbm90IGxlYXZlIHRvIG91ciBmcmllbmRzIHRoZQogICAgICAgICAgICAgICAgICAgIHNldHRsZW1lbnQgb2YgaGlzIGNsYWltcyBhZ2FpbnN0IG1lLCBzaW5jZSB0aGUgcmVzdWx0IHdvdWxkIGhhdmUgYmVlbiB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIGZhbHNlaG9vZHMgb2YgaGlzIHdvdWxkIGhhdmUgYmVlbiBleHBvc2VkLCBmb3IgdGhleSBoYWQgYmVlbiBwcmVzZW50IGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZXNlIHRyYW5zYWN0aW9ucyBhbmQga25ldyBhbGwgYWJvdXQgdGhlbSwgYW5kIHdvdWxkIHRoZXJlZm9yZSBub3QgaGF2ZQogICAgICAgICAgICAgICAgICAgIHBlcm1pdHRlZCBoaW0gdG8gc2F5IHdoYXRldmVyIGhlIHBsZWFzZWQ7IHdoZXJlYXMgaW4geW91ciBjb3VydCBoZSB0aGlua3MgdGhhdAogICAgICAgICAgICAgICAgICAgIGJ5IGhpcyBmYWxzZWhvb2RzIGhlIHdpbGwgZ2V0IHRoZSBiZXR0ZXIgb2YgbWUgYW5kIG15IHN0YXRlbWVudCBvZiB0aGUgdHJ1dGguCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.30'] = ""
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkkgaW52b2tlIG1hbnkgYmxlc3NpbmdzLCBtZW4gb2YgdGhlIGp1cnksIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgdXBvbiBhbGwgb2YgeW91LCBhbmQgdGhlbiBhbHNvIHVwb24gU29sb24sIHdobyBlc3RhYmxpc2hlZCB0aGUgbGF3IGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlIG9mIGVzdGF0ZXMuIEZvciBpZiBoZSBoYWQgbm90IGNsZWFybHkgZGVmaW5lZCBmb3IgdXMgd2hhdCBpcyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICB0aGluZyB0byBiZSBkb25lIGJ5IHRob3NlIHdobyBoYXZlIG9mZmVyZWQgYW4gZXhjaGFuZ2UsIGFuZCB3aGF0IHRoZSBzZWNvbmQsIGFuZAogICAgICAgICAgICAgICAgICAgIHNvIG9uIGluIGR1ZSBvcmRlciwgSSBkbyBub3Qga25vdyB0byB3aGF0IGxlbmd0aHMgdGhlIGF1ZGFjaXR5IG9mIHRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgUGhhZW5pcHB1cyB3b3VsZCBoYXZlIGdvbmUsIHdoZW4gZXZlbiBhcyBpdCBpcywgbm90d2l0aHN0YW5kaW5nIHRoYXQgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIHByZXNjcmliZXMgYWxsIHRoZXNlIHRoaW5ncyBmb3IgdXMsIGhlIGhhcyBuZXZlcnRoZWxlc3MgZGlzcmVnYXJkZWQgaXRzIGp1c3QKICAgICAgICAgICAgICAgICAgICBwcm92aXNpb25zLCBhbmQgaW5zdGVhZCBvZiBnaXZpbmcgbWUgdGhlIGludmVudG9yeSBvZiBoaXMgcHJvcGVydHkgYXMgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIHByZXNjcmliZXMgd2l0aGluIHRocmVlIGRheXMgYWZ0ZXIgaGUgdG9vayB0aGUgb2F0aCwgb3IgaWYgaGUgZGlkIG5vdCB3aXNoIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgc28gdGhlbiwgZ2l2aW5nIGl0IGF0IGxlYXN0IG9uIHRoZSBzaXh0aCBkYXkgb2YgdGhlIG1vbnRoIEJvZWRyb21pb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtb250aCBCb2Vkcm9taW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgaGFsZiBvZiBTZXB0ZW1iZXIgYW5kIHRoZSBwcmlvciBoYWxmIG9mIE9jdG9iZXIuPC9ub3RlPiB3aGljaCBkYXRlIHdhcyBmaXhlZAogICAgICAgICAgICAgICAgICAgIHVwb24gYXQgaGlzIHJlcXVlc3QsIGFuZCBvbiB3aGljaCBoZSBwcm9taXNlZCB0byBkZWxpdmVyIHRoZSBpbnZlbnRvcnksIGhlIGRpZAogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgdGhlIG9uZSB0aGluZyBub3IgdGhlIG90aGVyLCA8L3RyYW5zbGF0aW9uPg=="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwKICAgICAgICAgICAgICAgICAgICBzaG93aW5nIGNvbnRlbXB0IGJvdGggZm9yIG1lIGFuZCBmb3IgdGhlIGxhdywgaGUgaGFzIGRlbGl2ZXJlZCBoaXMgaW52ZW50b3J5IGEKICAgICAgICAgICAgICAgICAgICBtb250aCBsYXRlciwgb25seSB0d28gb3IgdGhyZWUgZGF5cyBiZWZvcmUgdGhlIGNhc2Ugd2FzIGJyb3VnaHQgaW50byBjb3VydCwgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSByZXN0IG9mIHRoZSB0aW1lIGhhcyBrZXB0IGhpbXNlbGYgb3V0IG9mIHNpZ2h0OyBhbmQgaW5zdGVhZCBvZiBsZWF2aW5nCiAgICAgICAgICAgICAgICAgICAgdW50b3VjaGVkIHRoZSBzZWFscyB3aGljaCBJIGhhZCBwdXQgdXBvbiB0aGUgYnVpbGRpbmdzLCBoZSB3ZW50IGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSwgb3BlbmVkIHRoZSBidWlsZGluZ3MsIGFuZCBjYXJyaWVkIG9mZiB0aGUgYmFybGV5IGFuZCBvdGhlciB0aGluZ3MsIGp1c3QKICAgICAgICAgICAgICAgICAgICBhcyBpZiB0aGUgbGF3IGhhZCBncmFudGVkIGhpbSB0aGUgcHJpdmlsZWdlIG9mIGRvaW5nIHdoYXRldmVyIGhlIHBsZWFzZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCB3aGF0IGlzIHJpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBwYXJ0LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgSSBzaG91bGQgYmUgbW9zdCBoYXBweSB0byBzZWUgbXlzZWxmIGVuam95aW5nIHRoZSBtYXRlcmlhbCBwcm9zcGVyaXR5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2FzIG1pbmUgYmVmb3JlLCBhbmQgcmVtYWluaW5nIGluIHRoZSBncm91cCBvZiB0aGUgVGhyZWUgSHVuZHJlZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RWFjaCBvZiB0aGUgdGVuIEF0aGVuaWFuIHRyaWJlcyByZXBvcnRlZCBhIGxpc3QKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaXRzIHdlYWx0aGllc3QgY2l0aXplbnMgdG8gdGhlIG51bWJlciBvZiAxMjAuIFRoZSByZXN1bHRpbmcgYm9keSBvZiA8ZGF0ZSBhdXRobmFtZT0iMTIwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTIwMCI+MTIwMDwvZGF0ZT4gd2FzIGRpdmlkZWQgaW50byBmb3VyIGdyb3VwcyBvZiAzMDAgZWFjaAogICAgICAgICAgICAgICAgICAgICAgICDvvIhmb3IgdGhlIGRpdmlzaW9uIGludG8gc3ltbW9yaWVzLCBzZWUgbm90ZSBvbiB2b2wuIDEuIHAuCiAgICAgICAgICAgICAgICAgICAgICAgIDEw77yJLCBhbmQgdGhlc2UgZ3JvdXBzLCBiZWluZyBtYWRlIHVwIG9mIHRoZSByaWNoZXN0IGNpdGl6ZW5zLAogICAgICAgICAgICAgICAgICAgICAgICBuYXR1cmFsbHkgYm9yZSB0aGUgaGVhdmllc3QgYnVyZGVucywgYW5kIGluIHRpbWVzIG9mIGNyaXNpcyBtaWdodCBiZSBjYWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiB0byBhZHZhbmNlIHRoZSBlbnRpcmUgYW1vdW50IG9mIG1vbmV5IHJlcXVpcmVkLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+Qm9lY2toLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmwuIEVjb24uPC90aXRsZT4sIEJvb2sgNiwgY2hhcHRlciAxMzwvYmlibD4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+R2lsYmVydCwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2suIENvbnN0LiBBbnQuPC90aXRsZT4gcHAuIDM2OC0zNzQ8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIO+8iEVuZ2xpc2ggVHJhbnMu77yJLjwvbm90ZT4gYnV0IHNpbmNlLCBwYXJ0bHkgdGhyb3VnaCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICB0byBzaGFyZSBpbiB0aGUgbWlzZm9ydHVuZXMgY29tbW9uIHRvIGFsbCB0aG9zZSB3aG8gYXJlIGVuZ2FnZWQgaW4gbWluaW5nIHdvcmtzLAogICAgICAgICAgICAgICAgICAgIGFuZCBwYXJ0bHkgdGhyb3VnaCBoYXZpbmcgbWV0IGhlYXZ5IHJldmVyc2VzIGluIG15IHByaXZhdGUgYnVzaW5lc3MsIEkgaGF2ZSBsb3N0CiAgICAgICAgICAgICAgICAgICAgbXkgZXN0YXRlLCBhbmQgbm93IGF0IHRoZSBsYXN0IG11c3QgcGF5IHRocmVlIHRhbGVudHMgdG8gdGhlIHN0YXRlLCBhIHRhbGVudCBmb3IKICAgICAgICAgICAgICAgICAgICBlYWNoIHNoYXJlIO+8iGZvciBJIHRvbyB3YXMgYSBwYXJ0bmVyLCBhcyBJIHdpc2ggSSBoYWQgbm90IGJlZW4sIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGVkIG1pbmXvvIksPGRhdGUgYXV0aG5hbWU9IjEyMDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjEyMDAiPjEyMDA8L2RhdGU+IHdhcyBkaXZpZGVkIGludG8gZm91ciBncm91cHMgb2YgMzAwIGVhY2gKICAgICAgICAgICAgICAgICAgICAgICAg77yIZm9yIHRoZSBkaXZpc2lvbiBpbnRvIHN5bW1vcmllcywgc2VlIG5vdGUgb24gdm9sLiAxLiBwLgogICAgICAgICAgICAgICAgICAgICAgICAxMO+8iSwgYW5kIHRoZXNlIGdyb3VwcywgYmVpbmcgbWFkZSB1cCBvZiB0aGUgcmljaGVzdCBjaXRpemVucywKICAgICAgICAgICAgICAgICAgICAgICAgbmF0dXJhbGx5IGJvcmUgdGhlIGhlYXZpZXN0IGJ1cmRlbnMsIGFuZCBpbiB0aW1lcyBvZiBjcmlzaXMgbWlnaHQgYmUgY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHVwb24gdG8gYWR2YW5jZSB0aGUgZW50aXJlIGFtb3VudCBvZiBtb25leSByZXF1aXJlZC4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkJvZWNraCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QdWJsLiBFY29uLjwvdGl0bGU+LCBCb29rIDYsIGNoYXB0ZXIgMTM8L2JpYmw+LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmwuIEVjb24uPC90aXRsZT4sIEJvb2sgNiwgY2hhcHRlciAxMzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkdpbGJlcnQsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkdrLiBDb25zdC4gQW50LjwvdGl0bGU+IHBwLiAzNjgtMzc0PC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICDvvIhFbmdsaXNoIFRyYW5zLu+8iS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Hay4gQ29uc3QuIEFudC48L3RpdGxlPiBwcC4gMzY4LTM3NDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbWluZSBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJlbnRseSBiZWVuIHRha2VuIG92ZXIgYnkgdGhlIHN0YXRlIGJlY2F1c2Ugb2Ygbm9uLXBheW1lbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbnRhbCwgYW5kIHRvIHJlY292ZXIgcG9zc2Vzc2lvbiB0aGUgbGVzc2VlcyBoYWQgdG8gbWFrZSB0aGUgcGF5bWVudAogICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpZWQuIE9uIHRoZSBnZW5lcmFsIHN1YmplY3Qgb2YgdGhlIG1pbmluZyBidXNpbmVzcyBpbiBhbmNpZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzkzIj5BdGhlbnM8L3BsYWNlTmFtZT4gc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzciIHZhbGlkPSJ5ZXMiPkRlbS4gMzc8L2JpYmw+IHdpdGggdGhlIEludHJvZHVjdGlvbiBhbmQgbm90ZXMuPC9ub3RlPiBJIGFtIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIHRyeSB0byBzdWJzdGl0dXRlIGluIG15IHBsYWNlIGEgbWFuIHdobyBpcyBub3Qgb25seSByaWNoZXIgdGhhbiBJIGFtIG5vdywgYnV0CiAgICAgICAgICAgICAgICAgICAgd2FzIHJpY2hlciBldmVuIGJlZm9yZSBteSBsb3NzZXMsIGFuZCB3aG8gaGFzIG5ldmVyIGJvcm5lIGFueSBzdGF0ZSBzZXJ2aWNlcywKICAgICAgICAgICAgICAgICAgICBub3IgbWFkZSBhbnkgY29udHJpYnV0aW9uIHRvIHRoZSBzdGF0ZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+IHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM3IiB2YWxpZD0ieWVzIj5EZW0uIDM3PC9iaWJsPiB3aXRoIHRoZSBJbnRyb2R1Y3Rpb24gYW5kIG5vdGVzLjwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgYmVnIG9mIHlvdSBhbGwsIG1lbiBvZiB0aGUganVyeSwgdGhhdCwgaWYgSSBwcm92ZSB0aGF0IFBoYWVuaXBwdXMgaGVyZQogICAgICAgICAgICAgICAgICAgIGhhcyBib3RoIHRyYW5zZ3Jlc3NlZCB0aGUganVzdCBwcm92aXNpb25zIG9mIHRoZSBsYXcgYW5kIGlzIGEgcmljaGVyIG1hbiB0aGFuCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmLCB5b3Ugd2lsbCBzdWNjb3IgbWUsIGFuZCBhcHBvaW50IGhpbSBpbiB0aGUgbGlzdCBvZiB0aGUgVGhyZWUgSHVuZHJlZCBpbgogICAgICAgICAgICAgICAgICAgIG15IHN0ZWFkOyBmb3IgaXQgaXMgb24gdGhpcyBhY2NvdW50IHRoYXQgdGhlIGxhd3MgZXZlcnkgeWVhciBwcm92aWRlIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW5kZXJpbmcgb2YgZXhjaGFuZ2VzLCBiZWNhdXNlIHRvIGVuam95IHVuYnJva2VuIHByb3NwZXJpdHkgaXMgbm90IHdvbnQgdG8gYmUKICAgICAgICAgICAgICAgICAgICB0aGUgcGVybWFuZW50IGZvcnR1bmUgb2YgYW55IGxhcmdlIG51bWJlciBvZiBvdXIgY2l0aXplbnMuIEJ1dCBJIHdpbGwgdGVsbCB5b3UKICAgICAgICAgICAgICAgICAgICBhbGwgdGhhdCBoYXMgYmVlbiBkb25lIHJlZ2FyZGluZyB0aGUgZXhjaGFuZ2UgZnJvbSB0aGUgdmVyeSBiZWdpbm5pbmcuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiB0aGUKICAgICAgICAgICAgICAgICAgICBzZWNvbmQgZGF5IG9mIHRoZSBtb250aCBNZXRhZ2VpdG5pb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtb250aAogICAgICAgICAgICAgICAgICAgICAgICBNZXRhZ2VpdG5pb24gY29ycmVzcG9uZHMgdG8gdGhlIGxhdHRlciBoYWxmIG9mIEF1Z3VzdCBhbmQgdGhlIHByaW9yIGhhbGYgb2YKICAgICAgICAgICAgICAgICAgICAgICAgU2VwdGVtYmVyLjwvbm90ZT4gbWVuIG9mIHRoZSBqdXJ5LCB0aGUgZ2VuZXJhbHMgYXBwb2ludGVkIGEgY291cnQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIFRocmVlIEh1bmRyZWQgZm9yIHRoZSB0ZW5kZXJpbmcgb2YgZXhjaGFuZ2VzLiBBbW9uZyB0aGVzZSBJIGNpdGVkIHRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgUGhhZW5pcHB1cyBhcyB0aGUgbGF3IHByb3ZpZGVzLiBBZnRlciBjaXRpbmcgaGltLCBJIHRvb2sgc29tZSBvZiBteSBmcmllbmRzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlcywgYW5kIHByb2NlZWRlZCB0byBoaXMgb3V0bHlpbmcgZmFybSBhdCBDeXRoZXJ1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q3l0aGVydXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT4gQW5kIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgSSBsZWQgdGhlbSBhcm91bmQgdGhlIGZhcm0sIHRoZSBjaXJjdWl0IG9mIHdoaWNoIHdhcyBtb3JlIHRoYW4gZm9ydHkKICAgICAgICAgICAgICAgICAgICAgICAgc3RhZGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgc3RhZGUgd2FzIHJvdWdobHkgYQogICAgICAgICAgICAgICAgICAgICAgICBmdXJsb25nLjwvbm90ZT4gYW5kIHBvaW50ZWQgb3V0IHRvIHRoZW0sIGFuZCBjYWxsZWQgdGhlbSB0byB3aXRuZXNzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbmNlIG9mIFBoYWVuaXBwdXMsIHRoYXQgdGhlcmUgd2VyZSBubyBtb3J0Z2FnZS1waWxsYXJzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluc2NyaWJlZCBwaWxsYXJzIHdlcmUgc2V0IHVwIHRvIGluZGljYXRlIHRoYXQgYSBwaWVjZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3YXMgbW9ydGdhZ2VkLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMSIgdmFsaWQ9InllcyI+RGVtLiAzMTwvYmlibD4gcGFzc2ltLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZmFybSwgYW5kIEkgYmFkZSBQaGFlbmlwcHVzLCBpZiBoZSBzYWlkIHRoZXJlIHdlcmUsIHRvIGRlY2xhcmUgaXQgYXQgb25jZQogICAgICAgICAgICAgICAgICAgIGFuZCBwb2ludCB0aGVtIG91dCB0byBtZSwgZm9yIGZlYXIgc29tZSBkZWJ0IGV4aXN0aW5nIGFnYWluc3QgdGhlIHByb3BlcnR5IG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYmUgYnJvdWdodCB0byBsaWdodCBsYXRlciBvbi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMSIgdmFsaWQ9InllcyI+RGVtLiAzMTwvYmlibD4gcGFzc2ltLjwvdHJhbnNsYXRpb24+"
translation['42.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gSSBzZWFsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdzLCBhbmQgYmFkZSBQaGFlbmlwcHVzIHRvIHByb2NlZWQgdG8gbXkgcHJvcGVydHkuIEFmdGVyIHRoaXMgSSBhc2tlZCBoaW0KICAgICAgICAgICAgICAgICAgICB3aGVyZSBoaXMgdGhyZXNoZWQgZ3JhaW4gd2FzLCBmb3IgYnkgdGhlIGdvZHMgYW5kIGdvZGRlc3NlcywgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdlcmUgdHdvIHRocmVzaGluZy1mbG9vcnMgdGhlcmUsIGVhY2ggb25lIG9mIG5lYXJseSBhIHBsZXRocm9uIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaW4gZGlhbWV0ZXIuIFRoZSBzcGVha2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGV2aWRlbnRseSBleHBlY3RlZCB0byBmaW5kIGxhcmdlIHF1YW50aXRpZXMgb2YgdGhyZXNoZWQgZ3JhaW4sIG93aW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzaXplIG9mIHRoZSB0aHJlc2hpbmcgZmxvb3JzLiBUaGUgcGxldGhyb24gd2FzIGFib3V0IDEwMCBmZWV0Ljwvbm90ZT4gSGUKICAgICAgICAgICAgICAgICAgICBhbnN3ZXJlZCBtZSB0aGF0IHNvbWUgb2YgdGhlIGdyYWluIGhhZCBiZWVuIHNvbGQsIGFuZCB0aGF0IHNvbWUgd2FzIHN0b3JlZAogICAgICAgICAgICAgICAgICAgIHdpdGhpbi4gPC90cmFuc2xhdGlvbj4="
translation['42.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIHRvIG1ha2UgYSBsb25nIHN0b3J5IHNob3J0LCBJCiAgICAgICAgICAgICAgICAgICAgc3RhdGlvbmVkIG1lbiBpbnNpZGUgdG8ga2VlcCB3YXRjaCwgYW5kIGJ5IFpldXMgSSBnYXZlIHN0cmljdCBvcmRlcnMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYXNzLWRyaXZlcnMgYW5kIG1hZGUgdGhlbSBzdG9wIGNhcnJ5aW5nIG9mZiB0aW1iZXIgZnJvbSB0aGUgZmFybSDvvIhmb3IKICAgICAgICAgICAgICAgICAgICBpbiBhZGRpdGlvbiB0byB0aGUgcmVzdCBvZiBoaXMgcHJvcGVydHkgUGhhZW5pcHB1cyBoYXMgYWxzbyB0aGlzIHZlcnkKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmFibGUgc291cmNlIG9mIHJldmVudWU6IHNpeCBhc3NlcyBjYXJyeSBvZmYgd29vZCB0aGUgd2hvbGUgeWVhciB0aHJvdWdoLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSByZWNlaXZlcyBtb3JlIHRoYW4gdHdlbHZlIGRyYWNobWFlIGEgZGF577yJLiBJIGZvcmJhZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgYXNzLWRyaXZlcnMsIGFzIEkgc2FpZCwgdG8gdG91Y2ggdGhlIHdvb2QsIGFuZCBhZnRlciBnaXZpbmcgbm90aWNlIHRvIFBoYWVuaXBwdXMKICAgICAgICAgICAgICAgICAgICB0byBhdHRlbmQgdGhlIHNhY3JpZmljZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXZpZGVudGx5IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcHVycG9zZSBvZiB0YWtpbmcgdGhlIG9hdGguPC9ub3RlPiBhcyB0aGUgbGF3IGNvbW1hbmRzLCBJIHdlbnQgYmFjayB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['42.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5GaXJzdCwKICAgICAgICAgICAgICAgICAgICBub3csIEkgd2lsbCBwcm9kdWNlIGZvciB5b3UgdGhlIGRlcG9zaXRpb25zIHN1YnN0YW50aWF0aW5nIHdoYXQgSSBoYXZlIHNhaWQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4geW91IHNoYWxsIGhlYXIgdGhlIGVudGlyZSB0cnV0aCBhYm91dCB0aGUgb3RoZXIgYXNwZWN0cyBvZiB0aGUgY2FzZS4gRm9yCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgZmluZCwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHRoaXMgZmVsbG93IFBoYWVuaXBwdXMgYmVnYW4gZnJvbSB0aGUgdmVyeQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGRheSB0byBhY3QgaW4gdXR0ZXIgZGlzcmVnYXJkIG9mIHJpZ2h0LiBJIHNlYWxlZCB0aGUgYnVpbGRpbmdzLCBhcyB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIG1lOyBoZSBvcGVuZWQgdGhlbS4gQW5kIGhlIGFja25vd2xlZGdlcyB0aGF0IGhlIHJlbW92ZWQgdGhlIHNlYWwsIGJ1dAogICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGFja25vd2xlZGdlIHRoYXQgaGUgb3BlbmVkIHRoZSBkb29yLCBhcyBpZiBtZW4gcmVtb3ZlZCB0aGUgc2VhbHMgZm9yCiAgICAgICAgICAgICAgICAgICAgYW55IG90aGVyIHB1cnBvc2UgdGhhbiB0byBvcGVuIHRoZSBkb29ycy4gPC90cmFuc2xhdGlvbj4="
translation['42.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4KICAgICAgICAgICAgICAgICAgICBJIGhhZCBmb3JiaWRkZW4gdGhhdCB3b29kIHNob3VsZCBiZSBjYXJyaWVkIG9mZjsgaGUgY2FycmllZCBpdCBvZmYgZXZlcnkgZGF5CiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IHRoYXQgb24gd2hpY2ggSSBpc3N1ZWQgdGhlIG9yZGVyLiBUaGVyZSB3YXMgbm8gZGVidCBjaGFyZ2VkIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFybTsgaGUgbm93IHJlcG9ydHMgYSBudW1iZXIgb2YgZGVidHMuIEluIGEgd29yZCwgaGUgZG9lcyBqdXN0IHdoYXQgaGUgcGxlYXNlcywKICAgICAgICAgICAgICAgICAgICBub3Qgd2hhdCB0aGUgbGF3cyBiaWQgaGltIGRvLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLCBmaXJzdCB0aG9zZSBjb25jZXJuaW5nIHRoZSBtaW5lLCBhbmQgdGhlbiB0aGUgb3RoZXJzIGFzIHdlbGwuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3N0aXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3N0aXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zdGl0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHdyb25ncywKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIHdoaWNoIFBoYWVuaXBwdXMgYmVnYW4gdG8gZG8gdG8gbWUgYmVnaW5uaW5nIHdpdGggdGhlIHZlcnkgZmlyc3QgZGF5CiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIHRlbmRlcmluZyBvZiB0aGUgZXhjaGFuZ2VzLCB5b3UgaGF2ZSBoZWFyZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYm90aCBmcm9tIG15c2VsZiBhbmQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXM7IGJ1dCB0aGUgdGhpbmdzIHdoaWNoIGhlIGRpZCBhZnRlciB0aGlzIGhhdmUgYmVlbiBvZmZlbmNlcywgbm90CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSBvbmx5LCBidXQgYWxzbyBhZ2FpbnN0IHRoZSBsYXdzLCB0byB0aGUgZGVmZW5jZSBvZiB3aGljaCB5b3UgYXJlIGFsbAogICAgICAgICAgICAgICAgICAgIGJvdW5kIHRvIHJhbGx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['42.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWx0aG91Z2ggaGUgaGFkIHN3b3JuIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGVsZXZlbnRoIG9mIHRoZSBtb250aCBCb2Vkcm9taW9uIHRvIGdpdmUgbWUgYSB0cnVlIGFuZCBqdXN0IGludmVudG9yeSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSwgYW5kIHRoZSBsYXcgZXhwcmVzc2x5IGRlY2xhcmVzIHRoYXQgdGhlIGludmVudG9yeSBzaGFsbCBiZSBnaXZlbgogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aHJlZSBkYXlzIGFmdGVyIG9uZSB0YWtlcyB0aGUgb2F0aCwgaGUgY2FtZSB1cCB0byBtZSBpbiBmcm9udCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VydHJvb21zIHdpdGggUG9seWV1Y3R1cyBvZiBDcmlvYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DcmlvYSB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBkZW1lIG9mIHRoZSB0cmliZSBBbnRpb2NoaXMuPC9ub3RlPiBhbmQgc29tZSBvdGhlcnMsIGFuZCBiZWdnZWQgbWUsIGZpcnN0IHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhIGNvbmZlcmVuY2Ugd2l0aCBoaW0gcmVnYXJkaW5nIGEgc2V0dGxlbWVudCwgYXNzdXJpbmcgbWUgdGhhdCBoZSB3b3VsZCBkbwogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgcmlnaHQ7IGFuZCwgc2Vjb25kbHksIHRvIHB1dCBvZmYgdGhlIGRlY2xhcmF0aW9uIHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBwcm9wZXJ0eSBmb3IgYSBmZXcgZGF5cyBvbmx5IO+8iGZvciBoZSBzYWlkIGhlIHVuZGVyc3Rvb2QgbXkKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbu+8iS4gPC90cmFuc2xhdGlvbj4="
translation['42.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JLCBvbiBteSBwYXJ0LCB0aGlua2luZyBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBiZWNvbWluZyB0byBhIGdvb2QgY2l0aXplbiB3aG8gd2lzaGVkIHRvIGF2b2lkIHF1YXJyZWxzIG5vdCB0byBydXNoIGhlYWRsb25nCiAgICAgICAgICAgICAgICAgICAgaW50byBjb3VydCwgd2FzIHBlcnN1YWRlZCDvvIhmb3Igd2h5IHNob3VsZCBJIG11bHRpcGx5IHdvcmRzP++8iQogICAgICAgICAgICAgICAgICAgIHRvIGNvbnNlbnQgdGhhdCB0aGUgY29uZmVyZW5jZSByZWdhcmRpbmcgYSBzZXR0bGVtZW50IHNob3VsZCB0YWtlIHBsYWNlIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHR3ZW50eS10aGlyZCBvZiB0aGUgbW9udGggQm9lZHJvbWlvbiwgYW5kIHRoZSBkZWNsYXJhdGlvbiByZWdhcmRpbmcgdGhlIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHR3ZW50eS1maWZ0aC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGl0ZXJhbGx5IHRoZSA4dGggYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA2dGggb2YgdGhlIGxhc3QgZ3JvdXAgb2YgdGVuIGRheXMgaW4gdGhlIG1vbnRoLCB3aGljaCB3YXMgY291bnRlZAogICAgICAgICAgICAgICAgICAgICAgICBiYWNrd2FyZC48L25vdGU+IFlldCwgYWx0aG91Z2ggaGUgaGFkIG9idGFpbmVkIGJvdGggaGlzIHJlcXVlc3RzIGZyb20gbWUsCiAgICAgICAgICAgICAgICAgICAgUGhhZW5pcHB1cyBkaWQgbm90IHByZXNlbnQgaGltc2VsZiBvbiBlaXRoZXIgb2YgdGhlc2UgZGF5czsgaW5zdGVhZCwgaGUgbm93CiAgICAgICAgICAgICAgICAgICAgYXBwZWFycyBiZWZvcmUgeW91IGFzIG9uZSB3aG8gaGFzIHRyYW5zZ3Jlc3NlZCB0d28gbGF3cyBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAgICAgb25lO+KAlGZpcnN0LCB0aGF0IHdoaWNoIGRlY2xhcmVzIHRoYXQgdGhlIGludmVudG9yeSBzaGFsbCBiZSBwcmVzZW50ZWQKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gdGhyZWUgZGF5cyBhZnRlciB0aGF0IG9uIHdoaWNoIG9uZSB0YWtlcyB0aGUgb2F0aCwgYW5kLCBzZWNvbmRseSwgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGRlY2xhcmVzIHRoYXQgbXV0dWFsIGNvdmVuYW50cywgYWdyZWVkIHVwb24gaW4gdGhlIHByZXNlbmNlIG9mIHdpdG5lc3NlcywKICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBiaW5kaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['42.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIG1lbiBvZiB0aGUganVyeSwgd2hvCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgeW91IGRvZXMgbm90IGtub3cgdGhhdCB0aGUgZGF5IGZpeGVkIGJ5IGxhdyBhbmQgdGhhdCBhZ3JlZWQgdXBvbiBieSB0aGUKICAgICAgICAgICAgICAgICAgICBjb250ZW5kaW5nIHBhcnRpZXMgYXJlIGVxdWFsbHkgYmluZGluZz8gV2h5LCB2ZXJ5IG9mdGVuLCBhbHRob3VnaCB0aGUgdGhpcnRpZXRoCiAgICAgICAgICAgICAgICAgICAgZGF5IGlzIGFwcG9pbnRlZCBieSBsYXcsIHdlIGZpeCB1cG9uIGFub3RoZXIgYnkgbXV0dWFsIGFncmVlbWVudDsgYW5kIGluIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBvZmZpY2VzIHRoZSBtYWdpc3RyYXRlcyBwdXQgb2ZmIHRyaWFscyBhbmQganVkZ2VtZW50cyBmb3IgdGhlIGNvbnRlc3RhbnRzLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgaGF2ZSBjb21lIHRvIGEgbXV0dWFsIGFncmVlbWVudDsgYW5kIGlmIGFueW9uZSBzaG91bGQgaG9sZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCB0aHVzIGVudGVyZWQgdXBvbiB3YXMgdG8gYmUgb2Ygbm8gZWZmZWN0LCB5b3Ugd291bGQgZGVzcGlzZSBoaW0gYXMgYQogICAgICAgICAgICAgICAgICAgIGNoZWF0IHdpdGhvdXQgZXF1YWwuIDwvdHJhbnNsYXRpb24+"
translation['42.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIFBoYWVuaXBwdXMsCiAgICAgICAgICAgICAgICAgICAganVzdCBhcyB0aG91Z2ggdGhlIGxhdyBlbmpvaW5lZCB0aGF0IG9uZSBzaG91bGQgZG8gbm90aGluZyB0aGF0IG9uZSBoYWQgYWdyZWVkCiAgICAgICAgICAgICAgICAgICAgdG8sIGZyb20gdGhlIGRheSBvbiB3aGljaCBoZSBwcm9taXNlZCB0byBtZWV0IG1lIGZvciBhIHNldHRsZW1lbnQgYW5kIHRvIGdpdmUgbWUKICAgICAgICAgICAgICAgICAgICBhbiBpbnZlbnRvcnkgb2YgaGlzIHByb3BlcnR5IGFuZCByZWNlaXZlIGZyb20gbWUgb25lIG9mIG1pbmUsIG5ldmVyIHB1dCBpbiBhbgogICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U7IGJ1dCBJLCB3aGVuIEkgc2F3IHRoYXQgaGUgd2FzIHBheWluZyBubyBoZWVkIHRvIG1lIG9yIHRvIHRoZSBsYXdzLAogICAgICAgICAgICAgICAgICAgIGdhdmUgaW4gbXkgaW52ZW50b3J5IGF0IHRoZSBvZmZpY2Ugb2YgdGhlIGdlbmVyYWxzLCB3aGVyZWFzIFBoYWVuaXBwdXMsIGFzIEkKICAgICAgICAgICAgICAgICAgICBzYWlkIGEgbW9tZW50IGFnbywgZ2F2ZSBtZSBhIHBhcGVyIG9ubHkgdGhlIG90aGVyIGRheSB3aXRoIG5vIG90aGVyIHB1cnBvc2UgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbWlnaHQgYXBwZWFyIHRvIGhhdmUgZ2l2ZW4gbWUgaGlzIGludmVudG9yeSwgYnV0IHRoYXQgSSBzaG91bGQgYmUgdW5hYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBhbnkgdXNlIG9mIGl0cyBjb250ZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['42.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB5b3Ugc2hvdWxkIG5vdCBncmFudCBtb3JlIHRoYW4gdGhlaXIgZHVlIHRvIHRob3NlIHdobyBob2xkIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIHNoYW1lbGVzc25lc3MgdG8gYmUgc3Ryb25nZXIgdGhhbiB0aGUgbGF3czsgaWYgeW91IGRvLCB5b3Ugd2lsbCBtdWx0aXBseSB0aGUKICAgICAgICAgICAgICAgICAgICBudW1iZXJzIG9mIHRob3NlIHdobyBtb2NrIGF0IHRoZSBqdXN0IHByb3Zpc2lvbnMgb2YgdGhlIGxhd3MuIE5vOyB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgc3VjY29yIHRob3NlIHdobyByZWdhcmQgdGhlIHZvaWNlIG9mIHRoZSBsYXdzIGFzIHlvdXIgdm9pY2UsIGFuZCB0aGUgZGF5CiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIGZvciBjb21pbmcgaW50byBjb3VydCBhcyBlc3RhYmxpc2hlZCBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhvc2Ugd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHdyb25nZWQsIG5vdCBvZiB0aG9zZSB3aG8gaGF2ZSBkb25lIHdyb25nLiA8L3RyYW5zbGF0aW9uPg=="
translation['42.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgZGVwb3NpdGlvbnMgaW4gc3VwcG9ydCBvZiB3aGF0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGp1c3Qgc2FpZCwgYW5kIHRoZSBsYXdzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ikxhd3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IYXZpbmcsIHRoZW4sIGJlZW4gdGh1cyB0cmVhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgUGhhZW5pcHB1cywgbWVuIG9mIHRoZSBqdXJ5LCBJIHJlcG9ydGVkIHRvIHRoZSBnZW5lcmFscyB0aGUgZm9sbG93aW5nIGludmVudG9yeQogICAgICAgICAgICAgICAgICAgIG9mIG15IHByb3BlcnR5LiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkludmVudG9yeSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkludmVudG9yeTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbnZlbnRvcnk8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IGVsc2UsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIG5hbWUgb2YgdGhlIGdvZHMgYW5kIGRpdmluaXRpZXMsIG1lbiBvZiB0aGUganVyeSwgc2hvdWxkIG9uZSBwcm92ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhhZW5pcHB1cyBpcyBsaWFibGUgdW5kZXIgdGhlIGxhd3Mgd2hpY2ggaGF2ZSBiZWVuIHJlYWQsIHRoYW4gcHJlY2lzZWx5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHdheSBpbiB3aGljaCBJIGFtIHByb3ZpbmcgaXQ/IFlldCBQaGFlbmlwcHVzIGhhcyBub25lIHRoZSBsZXNzIGJyb3VnaHQgYQogICAgICAgICAgICAgICAgICAgIGNvdW50ZXItY2hhcmdlIGFnYWluc3QgbWUgdGhhdCBJIGFtIG5vdCByZW5kZXJpbmcgYSBqdXN0IGludmVudG9yeSBvZiBteQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OyBzbyBlYXN5IGlzIGl0IGZvciBtZW4gb2YgaGlzIHN0YW1wIHRvIG1ha2UgZmFsc2Ugc3RhdGVtZW50cyBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB5b3U7IGFuZCBoZSBjb21wbGFpbnMgb2YgdGhlIG9hdGggd2hpY2ggSSB0b29rIGJlZm9yZSBmaWxpbmcgdGhlIGludmVudG9yeSwKICAgICAgICAgICAgICAgICAgICBhc3NlcnRpbmcgdGhhdCBJIHVuZGVydG9vayB0byByZXBvcnQgYWxsIHRoZSByZXN0IG9mIG15IHByb3BlcnR5IGV4Y2VwdCB0aGF0IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG1pbmluZy13b3JrczvigJRhcyBpZiB0byBzd2VhciBhY2NvcmRpbmcgdG8gbGF3IHdlcmUgYSBtYXR0ZXIgZm9yCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50ISA8L3RyYW5zbGF0aW9uPg=="
translation['42.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IGtub3cgdGhlIGxhdywgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIGZvciB5b3UgZW5hY3RlZCBpdCwgdGhhdCB3aGljaCBleHByZXNzbHkgbWFrZXMgdGhpcyBwcm92aXNpb24sIHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0ZW5kZXJpbmcgZXhjaGFuZ2VzIHRvIG9uZSBhbm90aGVyLCB3aGVuIHRoZXkgdW5kZXIgb2F0aCByZXBvcnQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcmllcywgc2hhbGwgc3dlYXIgYWxzbyB0aGUgZm9sbG93aW5nIG9hdGg6IOKAnEkgd2lsbCBnaXZlIGEgdHJ1ZQogICAgICAgICAgICAgICAgICAgIGFuZCBob25lc3QgaW52ZW50b3J5IG9mIG15IHByb3BlcnR5IGV4Y2VwdCB0aGF0IGluIHRoZSBzaWx2ZXIgbWluZXMsIGFsbCBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBsYXdzIGhhdmUgbWFkZSBleGVtcHQgZnJvbSB0YXhlcy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['42.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIHJhdGhlciwgcmVhZCB0aGUgbGF3IGl0c2VsZi4gWWV0LCBzdG9wIGEgbW9tZW50LCBwbGVhc2UuIEZvciBJCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGlzIG9mZmVyIGJlZm9yZSB0byBQaGFlbmlwcHVzLCBhbmQgbm93IGFnYWluLCBtZW4gb2YgdGhlIGp1cnksIEkgdGVuZGVyCiAgICAgICAgICAgICAgICAgICAgaXQgZnJlZWx5OuKAlEkgd2lsbCBzdXJyZW5kZXIgdG8gaGltIGFsbCBteSBwcm9wZXJ0eSBpbmNsdWRpbmcgdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtaW5pbmcgd29ya3MsIGlmIGhlIHdpbGwgaGFuZCBvdmVyIHRvIG1lIHRoZSBmYXJtIGFsb25lIGZyZWUgZnJvbSBhbGwKICAgICAgICAgICAgICAgICAgICBlbmN1bWJyYW5jZXMgYXMgaXQgd2FzIHdoZW4gSSBmaXJzdCB3ZW50IHRvIGl0IHdpdGggd2l0bmVzc2VzLCBhbmQgd2lsbCByZXBsYWNlCiAgICAgICAgICAgICAgICAgICAgYXMgdGhleSB3ZXJlIGJlZm9yZSB0aGUgZ3JhaW4gYW5kIHdpbmUgYW5kIHRoZSBvdGhlciB0aGluZ3Mgd2hpY2ggaGUgaGFzIGNhcnJpZWQKICAgICAgICAgICAgICAgICAgICBhd2F5IGZyb20gdGhlIGJ1aWxkaW5ncyBhZnRlciByZW1vdmluZyB0aGUgc2VhbHMgZnJvbSB0aGUgZG9vcnMuIDwvdHJhbnNsYXRpb24+"
translation['42.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHByYXksIGRvIHlvdSBrZWVwIG9uIHRhbGtpbmcgYW5kIGNyeWluZyBvdXQ/CiAgICAgICAgICAgICAgICAgICAgRnJvbSBteSBzaWx2ZXIgbWluZXMsIFBoYWVuaXBwdXMsIEkgZm9ybWVybHkgYnkgbXkgb3duIGJvZGlseSB0b2lsIGFuZCBsYWJvcgogICAgICAgICAgICAgICAgICAgIHJlYXBlZCBhIGxhcmdlIHByb2ZpdC4gSSBjb25mZXNzIGl0LiBCdXQgbm93IEkgaGF2ZSBsb3N0IGFsbCBidXQgYSBzbWFsbCBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgZ2FpbnMuIFlvdSwgb24gdGhlIGNvbnRyYXJ5LCBzaW5jZSB5b3Ugc2VsbCBmcm9tIHlvdXIgZmFybSB5b3VyIGJhcmxleSBhdAogICAgICAgICAgICAgICAgICAgIGEgcHJpY2Ugb2YgZWlnaHRlZW4gZHJhY2htYWUgYW5kIHlvdXIgd2luZSBhdCBhIHByaWNlIG9mIHR3ZWx2ZSwgYXJlIGEgcmljaCBtYW4sCiAgICAgICAgICAgICAgICAgICAgbmF0dXJhbGx5LCBmb3IgeW91IG1ha2UgbW9yZSB0aGFuIGEgdGhvdXNhbmQgbWVkaW1uaTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbWVkaW1udXMgd2FzIHJvdWdobHkgZXF1aXZhbGVudCB0byBhIGJ1c2hlbCBhbmQgYQogICAgICAgICAgICAgICAgICAgICAgICBoYWxmLjwvbm90ZT4gb2YgZ3JhaW4gYW5kIGFib3ZlIGVpZ2h0IGh1bmRyZWQgbWVhc3VyZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1ldHJldGVzIHdhcyByb3VnaGx5IGVxdWl2YWxlbnQgdG8gbmluZSBnYWxsb25zLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBvZiB3aW5lLiA8L3RyYW5zbGF0aW9uPg=="
translation['42.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5PdWdodCBJLCB0aGVuLCB0byBjb250aW51ZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGNsYXNzLCB3aGVuIHRoZSBzYW1lIGZvcnR1bmUgZG9lcyBub3QgYXR0ZW5kIG1lIG5vdyBhcyBmb3JtZXJseT8gRG8gbm90CiAgICAgICAgICAgICAgICAgICAgZGVtYW5kIHRoYXQ7IGl0IHdvdWxkIG5vdCBiZSBqdXN0LiBObzsgZG8geW91IGFsc28gdGFrZSB5b3VyIHR1cm4gYW5kIHNoYXJlIGZvcgogICAgICAgICAgICAgICAgICAgIGEgbGl0dGxlIHdoaWxlIGluIHRoZSBjbGFzcyB0aGF0IHBlcmZvcm1zIHB1YmxpYyBzZXJ2aWNlcywgc2luY2UgdGhvc2UgZW5nYWdlZAogICAgICAgICAgICAgICAgICAgIGluIG1pbmluZyBoYXZlIHN1ZmZlcmVkIHJldmVyc2VzIHdoaWxlIHlvdSBmYXJtZXJzIGFyZSBwcm9zcGVyaW5nIGJleW9uZCB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgeW91ciBkdWUuIEZvciBhIGNvbnNpZGVyYWJsZSB0aW1lIHlvdSBoYXZlIGVuam95ZWQgdGhlIGluY29tZSBvZiB0d28gZXN0YXRlcywKICAgICAgICAgICAgICAgICAgICB0aGF0IG9mIHlvdXIgbmF0dXJhbCBmYXRoZXIsIENhbGxpcHB1cywgYW5kIHRoYXQgb2YgaGltIHdobyBhZG9wdGVkIHlvdSwKICAgICAgICAgICAgICAgICAgICBQaGlsb3N0cmF0dXMsIHRoZSBvcmF0b3IsIGFuZCB5b3UgaGF2ZSBuZXZlciBkb25lIGFueXRoaW5nIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zIGhlcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmkuZS4gdGhlIG1lbWJlcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGp1cnkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgbXkgZmF0aGVyIGxlZnQgdG8gZWFjaCBvZiB1cywgbXkgYnJvdGhlcgogICAgICAgICAgICAgICAgICAgIGFuZCBteXNlbGYsIGFuIGVzdGF0ZSBvZiBmb3J0eS1maXZlIG1pbmFlIG1lcmVseSwgb24gd2hpY2ggaXQgaXMgbm90IGVhc3kgdG8KICAgICAgICAgICAgICAgICAgICBsaXZlLCB3aGlsZSB5b3VyIGZhdGhlcnMgd2VyZSBwb3NzZXNzZWQgb2Ygc3VjaCB3ZWFsdGggdGhhdCBlYWNoIG9mIHRoZW0gc2V0IHVwCiAgICAgICAgICAgICAgICAgICAgYSB0cmlwb2QgaW4gaG9ub3Igb2YgY2hvcmVnaWMgdmljdG9yaWVzIGF0IHRoZSBEaW9ueXNpYS4gQW5kIEkgZG8gbm90IGJlZ3J1ZGdlCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0aGlzLCBmb3IgaXQgaXMgdGhlIGR1dHkgb2YgdGhlIHdlYWx0aHkgdG8gcmVuZGVyIHNlcnZpY2UgdG8gdGhlIHN0YXRlLiBEbwogICAgICAgICAgICAgICAgICAgIHlvdSwgdGhlcmVmb3JlLCBzaG93IHRoYXQgeW91IGhhdmUgZXhwZW5kZWQgb25lIHNpbmdsZSBjb3BwZXIgY29pbiBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZeKAlHlvdSwgd2hvIGhhdmUgaW5oZXJpdGVkIHR3byBlc3RhdGVzIHdoaWNoIHBlcmZvcm1lZCBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcy4gPC90cmFuc2xhdGlvbj4="
translation['42.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IGNhbm5vdCBzaG93IGl0LCBmb3IgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBsZWFybmVkIHNlY3JlY3kgYW5kIGV2YXNpb24gYW5kIGhvdyB0byBkbyBldmVyeXRoaW5nIHRvIGVzY2FwZSByZW5kZXJpbmcgc2VydmljZQogICAgICAgICAgICAgICAgICAgIHRvIHlvdXIgZmVsbG93LWNpdGl6ZW5zIGhlcmUuIEJ1dCBJIHdpbGwgc2hvdyB0aGF0IEkgaGF2ZSBleHBlbmRlZCBsYXJnZQogICAgICAgICAgICAgICAgICAgIHN1bXPigJRJLCB3aG8gaW5oZXJpdGVkIHRoYXQgc2xlbmRlciBlc3RhdGUgZnJvbSBteSBmYXRoZXIuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIG1lIGZpcnN0IHRoYXQgbGF3IHdoaWNoIGRlY2xhcmVzIHRoYXQgbm8gbWluaW5nCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgc2hhbGwgYmUgaW5jbHVkZWQgaW4gdGhlIGludmVudG9yeSwgYW5kIHRoZSBjaGFsbGVuZ2UgYW5kIHRoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMgcHJvdmluZyB0aGF0IHRoaXMgZmVsbG93IFBoYWVuaXBwdXMgaGFzIGluaGVyaXRlZCB0d28gZXN0YXRlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWVkIHB1YmxpYyBzZXJ2aWNlcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgb25lCiAgICAgICAgICAgICAgICAgICAgdGhpbmcgb25seSwgbWVuIG9mIHRoZSBqdXJ5LCBpbiB3aGljaCBhbnlvbmUgY291bGQgc2hvdyB0aGF0IHRoaXMgbWFuIFBoYWVuaXBwdXMKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBhbWJpdGlvdXMgb2YgaG9ub3IgZnJvbSB5b3U6IGhlIGlzIGFuIGFibGUgYW5kIGFtYml0aW91cyBicmVlZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGhvcnNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T25seSB3ZWxsLXRvLWRvIHBlcnNvbnMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiBvd25lZCBob3JzZXMsIGFuZCBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3ZWFsdGh5IHBvc3Nlc3NlZCBzdG9jay1mYXJtcy48L25vdGU+IGJlaW5nIHlvdW5nIGFuZCByaWNoIGFuZCB2aWdvcm91cy4KICAgICAgICAgICAgICAgICAgICBXaGF0IGlzIGEgY29udmluY2luZyBwcm9vZiBvZiB0aGlzPyBIZSBoYXMgZ2l2ZW4gdXAgcmlkaW5nIG9uIGhvcnNlYmFjaywgaGFzCiAgICAgICAgICAgICAgICAgICAgc29sZCBoaXMgd2FyIGhvcnNlLCBhbmQgaW4gaGlzIHBsYWNlIGhhcyBib3VnaHQgaGltc2VsZiBhIGNoYXJpb3TigJRoZSwKICAgICAgICAgICAgICAgICAgICBhdCBoaXMgYWdlIeKAlHRoYXQgaGUgbWF5IG5vdCBoYXZlIHRvIHRyYXZlbCBvbiBmb290OyBzdWNoIGlzIHRoZSBsdXh1cnkKICAgICAgICAgICAgICAgICAgICB0aGF0IGZpbGxzIGhpbS4gVGhpcyBjaGFyaW90IGhlIGhhcyBpbmNsdWRlZCBpbiBoaXMgaW52ZW50b3J5IHRvIG1lLCBidXQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFybGV5IGFuZCB3aW5lIGFuZCB0aGUgcmVzdCBvZiB0aGUgZmFybS1wcm9kdWNlIG5vdCBhIHRlbnRoIHBhcnQuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiBvd25lZCBob3JzZXMsIGFuZCBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3ZWFsdGh5IHBvc3Nlc3NlZCBzdG9jay1mYXJtcy48L3RyYW5zbGF0aW9uPg=="
translation['42.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkZXNlcnZlcyB0aGVuLCBkb2VzIGhlIG5vdCwgdG8gYmUgbGV0IG9mZiBub3csCiAgICAgICAgICAgICAgICAgICAgc2VlaW5nIHRoYXQgaGUgaGFzIGJlZW4gc28gcHVibGljLXNwaXJpdGVkIGFuZCBhbWJpdGlvdXMgdG8gc2VydmUgYm90aCB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGFuZCBoaXMgcGVyc29uPyBObzsgZmFyIGZyb20gaXQuIEZvciBpdCBpcyB0aGUgZHV0eSBvZiBob25lc3QganVyeW1lbgogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgcmVzcGl0ZSB0byB0aG9zZSBjaXRpemVucywgd2hlbiB0aGV5IGhhdmUgbmVlZCBvZiBzdWNoIGhlbHAsIHdobywgd2hlbgogICAgICAgICAgICAgICAgICAgIHByb3NwZXJvdXMsIHdpbGxpbmdseSBwZXJmb3JtIHB1YmxpYyBzZXJ2aWNlcyBhbmQgcmVtYWluIGluIHRoZSBsaXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFRocmVlIEh1bmRyZWQ7IGJ1dCBhcyB0byB0aG9zZSB3aG8gY29uc2lkZXIgYXMgbG9zdCB3aGF0ZXZlciBtb25leSB0aGV5IHNwZW5kCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGUgc3RhdGUsIHlvdSBzaG91bGQgYnJpbmcgdGhlbSBpbnRvIHRoZSBsaXN0IG9mIHRob3NlIHdobyBtYWtlIGFkdmFuY2UKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb25zLCBhbmQgbm90IHN1ZmZlciB0aGVtIHRvIHJ1biBhd2F5IGZyb20gdGhlaXIgZHV0eS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBmaXJzdCB0aGUgZGVwb3NpdGlvbiwgYW5kIHRoZW4gaGlzIGRlY2xhcmF0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY2xhcmF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjbGFyYXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjbGFyYXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RW5vdWdoIG9mIHRoYXQuCiAgICAgICAgICAgICAgICAgICAgWWV0IFBoYWVuaXBwdXMsIG1lbiBvZiB0aGUganVyeSwgb3BlbmVkIHRoZSByb29tcyB0aGF0IGhhZCBiZWVuIHNlYWxlZCBhbmQKICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIG9mZiBtdWNoIHRoYXQgd2FzIHdpdGhpbiwgYXMgdGhlIHdpdG5lc3NlcyBoYXZlIHRlc3RpZmllZCB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgbGVhdmluZyBiZWhpbmQganVzdCB3aGF0IGhlIHBsZWFzZWQ7IGFuZCBvbmUgbW9udGggYWZ0ZXIgdGhlIGxhdyBwcmVzY3JpYmVzIGdhdmUKICAgICAgICAgICAgICAgICAgICBtZSB0aGUgZGVjbGFyYXRpb24gcmVnYXJkaW5nIGhpcyBwcm9wZXJ0eS4gTmV2ZXJ0aGVsZXNzLCBlbm91Z2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBmcm9tIHRoZSB3b3Jkcywg4oCcVXBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgcHJvcGVydHkgSSBvd2UgdGhlIGZvbGxvd2luZyBkZWJ0cy7igJ08cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNsYXJhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY2xhcmF0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY2xhcmF0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCByZWFkaW5nLgogICAgICAgICAgICAgICAgICAgIFRoaXMgQXJpc3Rvbm/DqiwgbWVuIG9mIHRoZSBqdXJ5LCBpcyB0aGUgZGF1Z2h0ZXIgb2YgUGhpbG9zdHJhdHVzIGFuZAogICAgICAgICAgICAgICAgICAgIG1vdGhlciBvZiBQaGFlbmlwcHVzLiBIZSBkZWNsYXJlcyB0aGF0IGEgZGVidCBpcyBvd2luZyB0byBoZXIgZm9yIGhlciBtYXJyaWFnZQogICAgICAgICAgICAgICAgICAgIHBvcnRpb24sIGJ1dCBvZiB0aGlzIHRoZSBsYXdzIG1ha2UgaGltIHRoZSBvd25lci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWZ0ZXIgdGhlIGRlYXRoIG9mIGhlciBodXNiYW5kIGEgd29tYW4gbWlnaHQgcmV0dXJuIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBob3VzZSBvZiBoZXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrhvbvPgc65zr/PgjwvZm9yZWlnbj7vvIhuZWFyZXN0IG1hbGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmXvvIksIG9yLCBpZiB0aGVyZSB3ZXJlIGNoaWxkcmVuLCBzaGUgbWlnaHQgbGl2ZSB3aXRoIHRoZW0gaW4KICAgICAgICAgICAgICAgICAgICAgICAgaGVyIGh1c2JhbmQncyBob3VzZS4gSW4gdGhpcyBjYXNlIHRoZSBtYXJyaWFnZSBwb3J0aW9uIGJlY2FtZSB0aGUgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaGVyIHNvbi4gSW4gcmV0dXJuIGhlIHdhcyBib3VuZCB0byBnaXZlIGhpcyBtb3RoZXIgbWFpbnRlbmFuY2UsIGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBjb3VsZCBub3QgYmUgY291bnRlZCBhIGxpZW4gdXBvbiBoaXMgcHJvcGVydHkuPC9ub3RlPiBIaXMgc3RhdGVtZW50CiAgICAgICAgICAgICAgICAgICAgaXMgdGhlcmVmb3JlIGZhbHNlLCBhbmQgaGUgZG9lcyBub3QgbWFrZSBhIGp1c3QgZGVjbGFyYXRpb24uIEZvciB3aHkgaXMgaXQgdGhhdAogICAgICAgICAgICAgICAgICAgIEksIFBoYWVuaXBwdXMsIHdoaWxlIG15IG1vdGhlcuKAlHdobyBicm91Z2h0IHdpdGggaGVyIGEgbWFycmlhZ2UKICAgICAgICAgICAgICAgICAgICBwb3J0aW9u4oCUaXMgbGl2aW5nIGFuZCBkd2VsbGluZyBpbiBteSBob3VzZSwgZG8gbm90IGRlY2xhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgcG9ydGlvbiBhcyBhIGRlYnQgZHVlIHRvIGhlciwgYW5kIHRodXMgdHJ5IHRvIGxlYWQgdGhlIGp1cnltZW4gYXN0cmF5LAogICAgICAgICAgICAgICAgICAgIGJ1dCBwZXJtaXQgaGVyIHRvIHNoYXJlIGluIGFsbCB0aGF0IEkgaGF2ZSwgYWxpa2Ugd2hldGhlciBpdCBzaGFsbCBwcm92ZSB0byBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBlc3RhdGUgb2YgUGhhZW5pcHB1cyBvciBteSBvd24/IEJlY2F1c2UgdGhlIGxhd3Mgc28gY29tbWFuZCwgbXkgZ29vZCBTaXIuCiAgICAgICAgICAgICAgICAgICAgQnV0IGFsbCB0aGF0IHlvdSBkbyBpcyBjb250cmFyeSB0byB0aGUgbGF3cy4gUmVhZCBvbi48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuuG9u8+BzrnOv8+CPC9mb3JlaWduPu+8iG5lYXJlc3QgbWFsZQogICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2Ze+8iSwgb3IsIGlmIHRoZXJlIHdlcmUgY2hpbGRyZW4sIHNoZSBtaWdodCBsaXZlIHdpdGggdGhlbSBpbgogICAgICAgICAgICAgICAgICAgICAgICBoZXIgaHVzYmFuZCdzIGhvdXNlLiBJbiB0aGlzIGNhc2UgdGhlIG1hcnJpYWdlIHBvcnRpb24gYmVjYW1lIHRoZSBwcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgICAgICBvZiBoZXIgc29uLiBJbiByZXR1cm4gaGUgd2FzIGJvdW5kIHRvIGdpdmUgaGlzIG1vdGhlciBtYWludGVuYW5jZSwgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIGNvdWxkIG5vdCBiZSBjb3VudGVkIGEgbGllbiB1cG9uIGhpcyBwcm9wZXJ0eS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNsYXJhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY2xhcmF0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY2xhcmF0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LiBIZSBkZWNsYXJlcyB0aGF0IGhlIG93ZXMgdXBvbiB0aGUgbGFuZCB0byBQYW1waGlsdXMgYW5kIFBoZWlkb2xldXMKICAgICAgICAgICAgICAgICAgICBvZiBSaGFtbnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlJoYW1udXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQWVhbnRpcy48L25vdGU+IGpvaW50bHkgYSB0YWxlbnQsIGFuZCB0byBBZWFudGlkZXMgb2YgUGhseXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBobHl1cyB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZm91ciB0aG91c2FuZCBkcmFjaG1hZSwgYW5kIHRvIEFyaXN0b21lbmVzIG9mIEFuYWd5cnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFuYWd5cnVzIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGZvdXJ0ZWVuIG1pbmFlLiBXaHksIHRoZW4sIFBoYWVuaXBwdXMsIHdoZW4gSSBhc2tlZCB5b3UgaW4gdGhlIHByZXNlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHdoZXRoZXIgeW91IG93ZWQgYW55dGhpbmcgb24geW91ciBmYXJtLCBhbmQgYmFkZSB5b3Ugc2hvdyBtZSB0aGUKICAgICAgICAgICAgICAgICAgICBwaWxsYXIgb2YgbW9ydGdhZ2UsIGlmIG9uZSB3ZXJlIHNldCB1cCBhbnl3aGVyZSB1cG9uIGl0LCBhbmQgYW5kIGFkanVyZWQgeW91IG5vdAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgYW55IGZpY3RpdGlvdXMgY3JlZGl0b3JzIHRvIGJlIGJyb3VnaHQgdG8gbGlnaHQgbGF0ZXIgb24gdG8gbXkKICAgICAgICAgICAgICAgICAgICBwcmVqdWRpY2XigJR3aHksIHByYXksIGRpZCB5b3Ugbm90IHJldmVhbCBhbnkgb2YgdGhlc2UgZGVidHMgdGhlbj8gQW5kCiAgICAgICAgICAgICAgICAgICAgd2h5LCB3aGVuIHlvdSBoYXZlIGJlZW4gYSBtb250aCBsYXRlIGluIGdpdmluZyBtZSB5b3VyIGRlY2xhcmF0aW9uLCB0aG91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGJpZHMgdGhhdCBpdCBiZSBnaXZlbiB3aXRoaW4gdGhyZWUgZGF5cywgaGF2ZSBjcmVkaXRvcnMgYW5kIGRlYnRzIGZvciBtb3JlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aHJlZSB0YWxlbnRzIG5vdyBjb21lIG9uIHRoZSBzY2VuZT8gPC90cmFuc2xhdGlvbj4="
translation['42.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5CZWNhdXNlLCBteSBnb29kIFNpciwgaXQgaXMgbWVyZWx5IHRoaXMgdGhhdCB5b3UgYXJlIGNvbnRyaXZpbmcsIHRoYXQgeW91IG1heQogICAgICAgICAgICAgICAgICAgIG5vdyBoYXZlIHByaXZhdGUgZGVidHMgZXF1YWwgaW4gYW1vdW50IHRvIHRoZSBwdWJsaWMgZGVidCB3aGljaCBJIGhhdmUgaW5jdXJyZWQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgc3RhdGUuIEJ1dCB0aGF0IHlvdXIgc3RhdGVtZW50IGlzIGZhbHNlLCBQaGFlbmlwcHVzLCBhbmQgdGhhdCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbWUgYmVmb3JlIHRoZXNlIGdlbnRsZW1lbiBhcyBhIHBlcmp1cmVkIG1hbiwgSSBzaGFsbCBzdHJhaWdodHdheSBwcm92ZSBiZXlvbmQKICAgICAgICAgICAgICAgICAgICBhbGwgcXVlc3Rpb24uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBsZWFzZSwgY2xlcmssIHRha2UgdGhlIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICBvZiBBZWFudGlkZXMgYW5kIFRoZW90ZWxlcyB0byB3aG9tIHRoaXMgZmVsbG93IGhhcyBkZWNsYXJlZCB0aGF0IGhlIG93ZXMgZm91cgogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGRyYWNobWFlLiBIaXMgZGVjbGFyYXRpb24gaXMgZmFsc2UsIGFuZCBoZSBsb25nIGFnbyBwYWlkIHRoZSBkZWJ0LCBub3QKICAgICAgICAgICAgICAgICAgICB3aWxsaW5nbHksIGJ1dCBhZnRlciBhIGp1ZGdlbWVudCBoYWQgYmVlbiBzZWN1cmVkIGFnYWluc3QgaGltLiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlbiwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHdoZW4gYSBtYW4gaGFzIG1hZGUgb3V0IGEgZGVjbGFyYXRpb24gdGhhdCBpcyBzbyBtYW5pZmVzdGx5IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgaW4gYWxsIHBvaW50cyBhbmQgaGFzIHNob3duIG5vIHJlZ2FyZCBmb3IgdGhlIGxhd3Mgd2hpY2ggZGVmaW5lIHRoZSB0aW1lIHdpdGhpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBkZWNsYXJhdGlvbiBtdXN0IGJlIG1hZGUgb3V0LCBvciB0byB0aGUgcHJpdmF0ZSBhZ3JlZW1lbnRzIHdoaWNoIHdlCiAgICAgICAgICAgICAgICAgICAgaG9sZCB0byBiZSBlcXVhbGx5IGJpbmRpbmc7IHdoZW4gYmVzaWRlcyB0aGlzIGhlIGhhcyBvcGVuZWQgdGhlIHNlYWxzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5ncyBhbmQgY2FycmllZCBvZmYgdGhlIGdyYWluIGFuZCB3aW5lIGZyb20gd2l0aGluLCBhbmQgZnVydGhlcm1vcmUgaGFzCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIG9mZmVyIHRvIGV4Y2hhbmdlIHNvbGQgdGhlIGN1dCB0aW1iZXIgdG8gdGhlIHZhbHVlIG9mIG1vcmUgdGhhbiB0aGlydHkKICAgICAgICAgICAgICAgICAgICBtaW5hZTsgYW5kIHdoZW4g77yId29yc3Qgb2YgYWxs77yJIGhlIGhhcyBjb25jb2N0ZWQgZmFsc2UgZGVidHMKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhlIGV4Y2hhbmdl4oCUd2lsbCB5b3UgZGVjaWRlIGJ5IHlvdXIgdm90ZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuIGhhcyBtYWRlIGEganVzdCBkZWNsYXJhdGlvbj8gU3VyZWx5IG5vdCwgbWVuIG9mIHRoZSBqdXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['42.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlcmUgaXMgb25lIHRvIHR1cm4gaWYgaGUgZmFpbHMgb2YgYSB2ZXJkaWN0CiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3UsIHdoZW4gbWVuIG9mIHdlYWx0aCB3aG8gaGF2ZSBuZXZlciBiZWVuIG9mIGFueSBzZXJ2aWNlIHRvIHlvdSwgd2hvCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSBsYXJnZSBxdWFudGl0aWVzIG9mIGdyYWluIGFuZCB3aW5lIGFuZCBkaXNwb3NlIG9mIHRoaXMgYXQgdGhyZWUgdGltZXMKICAgICAgICAgICAgICAgICAgICBpdHMgZm9ybWVyIHByaWNlLCBoYXZlIGFuIGFkdmFudGFnZSBpbiB5b3VyIGNvdXJ0cz8gTGV0IG5vdCB0aGlzIGhhcHBlbiBub3csIEkKICAgICAgICAgICAgICAgICAgICBiZWcgb2YgeW91OyBidXQsIGFzIHlvdSBoYXZlIGdpdmVuIHB1YmxpYyBhaWQgdG8gYWxsIHRob3NlIGVuZ2FnZWQgaW4gbWluaW5nLCBzbwogICAgICAgICAgICAgICAgICAgIG5vdyBnaXZlIGFpZCB0byBtZSBhcyBhIHByaXZhdGUgY2l0aXplbi4gPC90cmFuc2xhdGlvbj4="
translation['42.32'] = ""
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TaW5jZSB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGFkIHN1aXRzIGJlZm9yZSBub3csIG1lbiBvZiB0aGUganVyeSwgYWdhaW5zdCB0aGVzZSBzYW1lIG1lbiByZWdhcmRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlIG9mIEhhZ25pYXMsIGFuZCB0aGV5IGRvIG5vdCBjZWFzZSBmcm9tIHRoZWlyIGxhd2xlc3MgYW5kIHZpb2xlbnQgY29uZHVjdCwKICAgICAgICAgICAgICAgICAgICBlbmRlYXZvcmluZyBieSBob29rIG9yIGNyb29rIHRvIGtlZXAgd2hhdCBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlbSwgaXQgaXMgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSB0byBzZXQgZm9ydGggYWxsIHRoYXQgaGFzIGJlZW4gZG9uZSBmcm9tIHRoZSBiZWdpbm5pbmc7IGZvciB5b3UsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCB3aWxsIHRodXMgbW9yZSBlYXNpbHkgZm9sbG93IHRoZSBjb3Vyc2Ugb2YgdGhlIHdob2xlIGFyZ3VtZW50LAogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVzZSBtZW4gd2lsbCBiZSBleGhpYml0ZWQgaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICB0cnVlIGNoYXJhY3RlciwgYW5kIHlvdSB3aWxsIHNlZSB0aGF0IHRoZXkgYmVnYW4gbG9uZyBhZ28gYW5kIHN0aWxsIGNvbnRpbnVlIHRvCiAgICAgICAgICAgICAgICAgICAgcGxheSB0aGVpciB0cmlja3MsIGFuZCB0byB0aGluayB0aGF0IHRoZXkgbWF5IGRvIHdoYXRldmVyIG9jY3VycyB0byB0aGVtLiBXZQogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSBiZWcgb2YgeW91LCBtZW4gb2YgdGhlIGp1cnksIHRvIGxpc3RlbiB0byBvdXIgYXJndW1lbnRzIHdpdGggZ29vZHdpbGwsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIGZvbGxvdyB3aXRoIGNsb3NlIGF0dGVudGlvbi4gQW5kIEksIG9uIG15IHBhcnQsIHdpbGwgZW5kZWF2b3IgdG8gZ2l2ZSB5b3UKICAgICAgICAgICAgICAgICAgICB0aGUgY2xlYXJlc3QgaW5mb3JtYXRpb24gSSBjYW4gY29uY2VybmluZyB0aGUgZmFjdHMuIDwvdHJhbnNsYXRpb24+"
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbW90aGVyIG9mIHRoaXMgYm95LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgYmVpbmcgdGhlIG5lYXJlc3Qgb2Yga2luIHRvIEhhZ25pYXMgb2YgT2Vvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlcmUgd2VyZSB0d28gZGVtZXMgYmVhcmluZyB0aGUgbmFtZSBPZW9uLCBvbmUgYmVsb25naW5nIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBMZW9udGlzLCB0aGUgb3RoZXIgdG8gdGhlIHRyaWJlIEhpcHBvdGhvbnRpcy48L25vdGU+IGhhZCB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUgb2YgSGFnbmlhcyBhZGp1ZGdlZCB0byBoZXIgYWNjb3JkaW5nIHRvIHlvdXIgbGF3czsgYW5kIG9mIHRob3NlIHdobyB0aGVuCiAgICAgICAgICAgICAgICAgICAgbWFkZSBjb3VudGVyLWNsYWltcyB0byB0aGlzIGVzdGF0ZSBub3Qgb25lIHZlbnR1cmVkIHRvIHN3ZWFyIHRoYXQgaGUgd2FzIG5lYXJlcgogICAgICAgICAgICAgICAgICAgIG9mIGtpbiB0aGFuIHRoZSBsYWR5IO+8iGZvciBpdCB3YXMgYWRtaXR0ZWQgYnkgYWxsIHRoYXQgdGhlIGluaGVyaXRhbmNlCiAgICAgICAgICAgICAgICAgICAgYmVsb25nZWQgdG8gaGVyIGJ5IHZpcnR1ZSBvZiBuZWFyZXN0IGtpbnNoaXDvvIksIDwvdHJhbnNsYXRpb24+"
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBHbGF1Y3VzIG9mIE9lb24gYW5kIEdsYXVjb24gaGlzIGJyb3RoZXIgcHJlc2VudGVkCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcywgaGF2aW5nIGNvbmNvY3RlZCBhIHNwdXJpb3VzIHdpbGwsIGFuZCBUaGVvcG9tcHVzLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgTWFjYXJ0YXR1cyBoZXJlLCBqb2luZWQgd2l0aCB0aGVtIGluIGdldHRpbmcgdXAgdGhpcyB3aG9sZSBzY2hlbWUsIGFuZCB3YXMgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzIGluIG1vc3Qgb2YgdGhlIGRlcG9zaXRpb25zIHRoYXQgd2VyZSBwdXQgaW4uIFRoZSB3aWxsIHdoaWNoIHRoZXkgdGhlbgogICAgICAgICAgICAgICAgICAgIHByb2R1Y2VkIHdhcyBwcm92ZWQgdG8gYmUgc3B1cmlvdXMsIGFuZCB0aGV5IG5vdCBvbmx5IGxvc3QgdGhlaXIgY2FzZSwgYnV0IHdlbnQKICAgICAgICAgICAgICAgICAgICBvdXQgb2YgY291cnQgY29tcGxldGVseSBkaXNncmFjZWQuIDwvdHJhbnNsYXRpb24+"
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZAogICAgICAgICAgICAgICAgICAgIFRoZW9wb21wdXMsIHRoZSBmYXRoZXIgb2YgTWFjYXJ0YXR1cyBoZXJlLCBhbHRob3VnaCBoZSB3YXMgaW4gdG93biB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGhlcmFsZCBhc2tlZCBieSBwcm9jbGFtYXRpb24gd2hldGhlciBhbnlvbmUgd2lzaGVkIHRvIGxheSBjbGFpbSB0byB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcyBieSB2aXJ0dWUgb2Yga2luc2hpcCBvciB1bmRlciBhIHdpbGwsIG9yIHRvIGRlcG9zaXQgc2VjdXJpdHkgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNvc3RzIG9mIHN1Y2ggY2xhaW0sIHlldCBkaWQgbm90IHZlbnR1cmUgdG8gbWFrZSBhIGRlcG9zaXQsIGJ1dCBieSBoaXMgb3duIGFjdAogICAgICAgICAgICAgICAgICAgIGdhdmUganVkZ2VtZW50IGFnYWluc3QgaGltc2VsZiB0aGF0IGhlIGhhZCBubyBjb25jZWl2YWJsZSBjbGFpbSBvbiB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcy4gPC90cmFuc2xhdGlvbj4="
translation['43.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYWx0aG91Z2ggdGhlIG1vdGhlciBvZiB0aGlzIGJveQogICAgICAgICAgICAgICAgICAgIGhlcmUgYmVjYW1lIHBvc3Nlc3NlZCBvZiB0aGUgaW5oZXJpdGFuY2UsIHNpbmNlIHNoZSBoYWQgcHJldmFpbGVkIGluIHRoZSBzdWl0CiAgICAgICAgICAgICAgICAgICAgb3ZlciBhbGwgdGhvc2Ugd2hvIGRpc3B1dGVkIGhlciBjbGFpbSwgdGhlc2UgbWVuIGFyZSBhYm9taW5hYmxlLCBhcyB5b3Ugc2VlLCBhbmQKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIHRoYXQgdGhleSBuZWVkIG9iZXkgbmVpdGhlciB5b3VyIGxhd3Mgbm9yIHRoZSBkZWNpc2lvbnMgb2YgeW91ciBjb3VydHMsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZXkgYXJlIHRyeWluZyBieSBmYWlyIG1lYW5zIG9yIGZvdWwgb25jZSBtb3JlIHRvIHRha2UgYXdheSBmcm9tIHRoZSBsYWR5CiAgICAgICAgICAgICAgICAgICAgdGhlIGluaGVyaXRhbmNlIHdoaWNoIHlvdSBhd2FyZGVkIHRvIGhlci4gPC90cmFuc2xhdGlvbj4="
translation['43.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkEKICAgICAgICAgICAgICAgICAgICBjb25zcGlyYWN5IHdhcyBmb3JtZWQsIGFuZCBhIHdyaXR0ZW4gYWdyZWVtZW50IGVudGVyZWQgaW50bywgYW5kIGRlcG9zaXRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgTWVkZWl1cyBvZiBIYWdudXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhhZ251cyB3YXMgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBBY2FtYW50aXMuPC9ub3RlPiBieSBUaGVvcG9tcHVzLCB0aGUgZmF0aGVyIG9mIE1hY2FydGF0dXMgaGVyZSwgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgR2xhdWNvbiBhbmQgdGhlIEdsYXVjdXMgd2hvIHdhcyB3b3JzdGVkIGluIHRoZSBmb3JtZXIgc3VpdDsgYW5kIHRoZXkgYWRkZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGFzIGEgZm91cnRoIGFub3RoZXIgb2YgdGhlaXIgZnJpZW5kcyDvvIhFdXBvbGVtdXMgd2FzIGhpcwogICAgICAgICAgICAgICAgICAgIG5hbWXvvIkuIEFsbCB0aGVzZSBtZW4sIGhhdmluZyBpbiBjb21tb24gZm9ybWVkIHRoZWlyIHBsb3QsIGNpdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGxhZHkgYmVmb3JlIHRoZSBhcmNob24gZm9yIHRoZSBhZGp1ZGljYXRpb24gb2YgY2xhaW1zIHRvIHRoZSBlc3RhdGUgb2YgSGFnbmlhcywKICAgICAgICAgICAgICAgICAgICBkZWNsYXJpbmcgdGhhdCB0aGUgbGF3IHByZXNjcmliZWQgdGhhdCBpZiBhbnlvbmUgd2lzaGVkIHRvIGVudGVyIGEgY2xhaW0sCiAgICAgICAgICAgICAgICAgICAgY2l0YXRpb24gc2hvdWxkIGJlIG1hZGUgb2YgdGhlIG9uZSB0byB3aG9tIHRoZSBlc3RhdGUgaGFkIGJlZW4gYWRqdWRnZWQgYW5kIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBpdCBpbiBoaXMgcG9zc2Vzc2lvbi4gPC90cmFuc2xhdGlvbj4="
translation['43.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBhcmNob24KICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRoZSBjYXNlIGludG8gY291cnQsIGFuZCB0aGUgdHJpYWwgd2FzIHRvIGJlIGhlbGQsIHRoZXkgaGFkIGV2ZXJ5dGhpbmcKICAgICAgICAgICAgICAgICAgICBjbGV2ZXJseSBhcnJhbmdlZCBmb3IgdGhlIHRyaWFsLCBhbmQgaW4gcGFydGljdWxhciB0aGUgd2F0ZXIgd2hpY2ggd2FzIHRvCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSB0aGVpciBzcGVlY2hlcyB3YXMgZm91ciB0aW1lcyBhcyBtdWNoIGFzIHRoYXQgYWxsb3dlZCB0byB1cy4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGFyY2hvbiwgbWVuIG9mIHRoZSBqdXJ5LCB3YXMgb2JsaWdlZCB0byBwb3VyIGludG8gdGhlIHdhdGVyLWNsb2NrIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFtcGhvcmE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFtcGhvcmEgY29udGFpbmVkIGFib3V0IG5pbmUKICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbG9ucy48L25vdGU+IG9mIHdhdGVyIGZvciBlYWNoIGNsYWltYW50LCBhbmQgdGhyZWUgY2hvZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNob3VzIGNvbnRhaW5lZCBhYm91dCAxLzEyIG9mIGFuIGFtcGhvcmEuPC9ub3RlPiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwbHk7IDwvdHJhbnNsYXRpb24+"
translation['43.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgSSwgd2hvIGFjdGVkIGFzIHBsZWFkZXIgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGxhZHksIHdhcyBub3Qgb25seSB1bmFibGUgdG8gZXhwbGFpbiB0byB0aGUganVyeW1lbiB0aGUgcmVsYXRpb25zaGlwIGFuZCBvdGhlcgogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgYXMgY2xlYXJseSBhcyBJIGNvdWxkIGhhdmUgd2lzaGVkLCBidXQgY291bGQgbm90IGV2ZW4gZGVmZW5kIG15c2VsZgogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIHNtYWxsZXN0IGZyYWN0aW9uIG9mIHRoZSBsaWVzIHdoaWNoIHRoZXkgdG9sZCBhYm91dCB1czsgZm9yIEkgaGFkCiAgICAgICAgICAgICAgICAgICAgYnV0IGEgZmlmdGggcGFydCBvZiB0aGUgd2F0ZXIuIFRoZWlyIHNjaGVtZSB3YXMgdGhpczogdG8gdGVsbCBhIHdob2xseSBmYWxzZQogICAgICAgICAgICAgICAgICAgIHN0b3J5IGFib3V0IHVzLCBidXQgdG8gYmFjayBvbmUgYW5vdGhlciB1cCBhbmQgYWdyZWUgaW4gZXZlcnl0aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['43.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Tbywgc2luY2UgdGhleSBoYWQgZm9ybWVkIHRoZWlyIHBsb3QgaW4gdGhpcyB3YXksIGFuZAogICAgICAgICAgICAgICAgICAgIGVhY2ggYmFja2VkIHVwIHRoZSBvdGhlcidzIGNoYXJnZXMgYWdhaW5zdCB1cywgd2hlbiB0aGUgZm91ciBiYWxsb3QtYm94ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T25lIGJhbGxvdC1ib3gsIHRoYXQgaXMsIGZvciBlYWNoIGNvbnRlc3RhbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZXJlIHdlcmUgZml2ZSBpbiBhbGwsIGJ1dCB0aGUgdHdvIGJyb3RoZXJzLCBHbGF1Y3VzIGFuZCBHbGF1Y29uLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGFyZW50bHkgY291bnRlZCBhcyBvbmUsIHNpbmNlIHRoZWlyIHRpdGxlIHdhcyB0aGUgc2FtZS4gVGhpcyBwcm9ibGVtIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2N1c3NlZCBieSBXeXNlIGluIGhpcyBpbnRyb2R1Y3Rpb24gdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNhZXVzIDExLjEiIHZhbGlkPSJ5ZXMiPklzYWV1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgSGFnLjwvYmlibD4uPC9ub3RlPiB3ZXJlIHNldCBvdXQgYWNjb3JkaW5nIHRvIGxhdywgdGhlIGp1cnltZW4sCiAgICAgICAgICAgICAgICAgICAgbmF0dXJhbGx5IGVub3VnaCwgYXMgSSB0aGluaywgd2VyZSBkZWNlaXZlZCBhbmQgY291bGQgbm90IGFncmVlIHdpdGggb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciwgYW5kIGJlaW5nIGxlZCBhc3RyYXkgYnkgdGhpcyB0cmljaywgdGhleSB2b3RlZCBlYWNoIGFzIGNoYW5jZQogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQuIEFuZCB0aGVyZSB3ZXJlIGEgdmVyeSBmZXcgbW9yZSB2b3Rlc+KAlHNvbWUgdGhyZWUgb3IKICAgICAgICAgICAgICAgICAgICBmb3Vy4oCUaW4gdGhlIGJveCBvZiBUaGVvcG9tcHVzIHRoYW4gaW4gdGhhdCBvZiB0aGUgbGFkeS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNhZXVzIDExLjEiIHZhbGlkPSJ5ZXMiPklzYWV1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgSGFnLjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['43.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgdGhlbiwgd2FzIHdoYXQKICAgICAgICAgICAgICAgICAgICB0b29rIHBsYWNlIGF0IHRoYXQgdGltZS4gQnV0IHdoZW4gdGhpcyBib3kgd2FzIGJvcm4sIGFuZCBpdCBzZWVtZWQgYSBmaXR0aW5nCiAgICAgICAgICAgICAgICAgICAgdGltZSwgSSwgYmVpbmcgaW4gbm8gd2F5IGluY2Vuc2VkIGF0IHdoYXQgaGFkIGhhcHBlbmVkLCBidXQgY29uc2lkZXJpbmcgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3JtZXIganVyeW1lbiBoYWQgbWV0IHdpdGggYSB2ZXJ5IG5hdHVyYWwgZXhwZXJpZW5jZSwgaW50cm9kdWNlZCB0aGlzIGJveSBoZXJlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGNsYW5zbWVuIG9mIEhhZ25pYXMgaW4gdGhlIGludGVyZXN0IG9mIEV1YnVsaWRlcywgc2VlaW5nIHRoYXQgdGhlIGJveSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGUgc29uIG9mIGhpcyBkYXVnaHRlciwgaW4gb3JkZXIgdGhhdCB0aGUgZmFtaWx5IG1pZ2h0IG5vdCBiZWNvbWUgZXh0aW5jdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGVsZGVyIEV1YnVsaWRlcywgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgbmV4dCBvZiBraW4gdG8gSGFnbmlhcywgcHJheWVkIHRvIHRoZSBnb2RzIGFib3ZlIGFsbCBlbHNlIHRoYXQgYSBzb24KICAgICAgICAgICAgICAgICAgICBtaWdodCBiZSBib3JuIHRvIGhpbSBhcyBhIGRhdWdodGVyIGhhZCBiZWVuLCB0aGUgbW90aGVyIG9mIHRoaXMgYm95OyBidXQgc2luY2UKICAgICAgICAgICAgICAgICAgICBoZSBmYWlsZWQgb2YgdGhpcyBob3BlIGFuZCBub3QgYSBzaW5nbGUgbWFsZSBjaGlsZCB3YXMgYm9ybiB0byBoaW0sIGhpcyBuZXh0CiAgICAgICAgICAgICAgICAgICAgZGVhcmVzdCB3aXNoIHdhcyB0aGF0IGEgc29uIG9mIGhpcyBkYXVnaHRlciBzaG91bGQgYmUgYWRvcHRlZCBpbnRvIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBmYW1pbHkgYW5kIHRoYXQgb2YgSGFnbmlhcyBhbmQgc2hvdWxkIGJlIGludHJvZHVjZWQgdG8gdGhlIG1lbWJlcnMgb2YgaGlzIGNsYW47CiAgICAgICAgICAgICAgICAgICAgZm9yIGhlIHRob3VnaHQsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBvZiBoaXMgc3Vydml2aW5nIHJlbGF0aXZlcyB0aGlzIGJveSB3YXMKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0IHRvIGhpbSwgYW5kIHRoYXQgaW4gdGhpcyB3YXkgdGhlaXIgaG91c2Ugd291bGQgYmVzdCBiZSBwcmVzZXJ2ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAga2VwdCBmcm9tIGV4dGluY3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['43.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSB3YXMgdGhlIG9uZSB0bwogICAgICAgICAgICAgICAgICAgIHJlbmRlciBoaW0gdGhpcyBzZXJ2aWNlLCBzaW5jZSBJIHdhcyBodXNiYW5kIHRvIHRoZSBkYXVnaHRlciBvZiBFdWJ1bGlkZXMsIHNoZQogICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIGFkanVkZ2VkIHRvIG1lIGFzIGJlaW5nIHRoZSBuZWFyZXN0IG9mIGtpbiwgYW5kIEkgaW50cm9kdWNlZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYm95IHRvIHRoZSBjbGFuc21lbiBvZiBIYWduaWFzIGFuZCBFdWJ1bGlkZXMsIHRvIHdoaWNoIGZlbGxvd3NoaXAgVGhlb3BvbXB1cywKICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIE1hY2FydGF0dXMgaGVyZSwgYmVsb25nZWQgZHVyaW5nIGhpcyBsaWZldGltZSwgYW5kIHRvIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgTWFjYXJ0YXR1cyBub3cgYmVsb25ncy4gPC90cmFuc2xhdGlvbj4="
translation['43.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNsYW5zbWVuIG9mIE1hY2FydGF0dXMgaGVyZSwgd2hvIGtuZXcgYmV0dGVyIHRoYW4gYW55IG90aGVycyB0aGUgcGVkaWdyZWUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZmFtaWx5LCBzZWVpbmcgdGhhdCBoZSBoaW1zZWxmIGRpZCBub3QgY2hvb3NlIHRvIHJpc2sgYSBjb250ZXN0IGFuZCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgcmVtb3ZlIHRoZSB2aWN0aW0gZnJvbSB0aGUgYWx0YXIsIGFzIGhlIHNob3VsZCBoYXZlIGRvbmUgaGFkIHRoZQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbiBvZiB0aGlzIGJveSBub3QgYmVlbiBsZWdpdGltYXRlLCBidXQgZGVtYW5kZWQgdGhhdCB0aGV5IGNvbW1pdAogICAgICAgICAgICAgICAgICAgIHBlcmp1cnksNiB0b29rIHRoZSBiYWxsb3Qgd2hpbGUgdGhlIHZpY3RpbXMgd2VyZSBzdGlsbCBidXJuaW5nLCBhbmQgY2FycmllZCBpdAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGFsdGFyIG9mIFpldXMgUGhhdHJpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U28gbmFtZWQsIGFzIGdvZAogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY2xhbiDvvIhwaHJhdHJ577yJ4oCUd2hpY2ggd2FzIGEgcmVsaWdpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uLjwvbm90ZT4gaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBkZWZlbmRhbnQgTWFjYXJ0YXR1cywgYW5kIGdhdmUgYQogICAgICAgICAgICAgICAgICAgIGp1c3QgdmVyZGljdCwgbWVuIG9mIHRoZSBqdXJ54oCUdGhhdCB0aGlzIGJveSB3YXMgZHVseSBhbmQgcmlnaHRmdWxseQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgYXMgdGhlIGFkb3B0ZWQgc29uIG9mIEV1YnVsaWRlcyBpbnRvIHRoZSBmYW1pbHkgb2YgSGFnbmlhcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgZmVsbG93LWNsYW5zbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBNYWNhcnRhdHVzIGhhZCBwYXNzZWQgdGhpcyB2b3RlLCB0aGlzIGJveSwgYXMgdGhlIHNvbiBvZiBFdWJ1bGlkZXMsCiAgICAgICAgICAgICAgICAgICAgY2l0ZWQgdGhlIGRlZmVuZGFudCBNYWNhcnRhdHVzIGZvciBhbiBhZGp1ZGljYXRpb24gb2YgY2xhaW1zIGZvciB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgYW5kIGhhZCBhIGRheSBhcHBvaW50ZWQgYnkgdGhlIGFyY2hvbiBmb3IgdGhlIGhlYXJpbmcsIGluc2NyaWJpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcidzIG5hbWUgYXMgaGlzIGd1YXJkaWFuOyBmb3IgaXQgd2FzIG5vIGxvbmdlciBvcGVuIHRvIG1lLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgdG8gc3RhbmQgaW5zY3JpYmVkIGFzIGd1YXJkaWFuLCBzaW5jZSBJIGhhZCBnb3QgdGhlIGJveSBhZG9wdGVkIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFtaWx5IG9mIEV1YnVsaWRlcy4gQW5kIHRoZSBjaXRhdGlvbiB3YXMgbWFkZSBieSB0aGlzIGJveSBhY2NvcmRpbmcgdG8gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBsYXdzIGluIGFjY29yZGFuY2Ugd2l0aCB3aGljaCB0aGVzZSBtZW4gaGFkIGNpdGVkIGhpcyBtb3RoZXIsIHdobyBoYWQgd29uIHRoZQogICAgICAgICAgICAgICAgICAgIGZvcm1lciBzdWl0IGluIGNvdXJ0LCBhbmQgd2FzIGluIHBvc3Nlc3Npb24gb2YgdGhlIGVzdGF0ZSBvZiBIYWduaWFzLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHJlYWQgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIHdoaWNoIG9yZGFpbnMgdGhhdCBjaXRhdGlvbiBzaGFsbCBiZSBtYWRlIG9mIHRoZSBwZXJzb24gcG9zc2Vzc2luZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgcGVyc29uIHNoYWxsIGNsYWltIHRoZSBpbmhlcml0YW5jZSBvciB0aGUgaGVpcmVzcwogICAgICAgICAgICAgICAgICAgICAgICBhZnRlciBhZGp1ZGljYXRpb24gaGFzIGJlZW4gbWFkZSwgbGV0IGhpbSBjaXRlIGJlZm9yZSB0aGUgYXJjaG9uIHRoZSBwZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGhhcyBvYnRhaW5lZCB0aGUgYWRqdWRpY2F0aW9uIGp1c3QgYXMgaW4gb3RoZXIgc3VpdHMsIGFuZCBhIGRlcG9zaXQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgY292ZXIgY29zdHMgc2hhbGwgYmUgbWFkZSBieSB0aGUgY2xhaW1hbnQuIEFuZCBpZiBoZSB3aW5zIGFuIGFkanVkaWNhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGNpdGF0aW9uLCB0aGUgYWRqdWRpY2F0aW9uIG9mIHRoZSBlc3RhdGUgc2hhbGwgYmUgb2Ygbm8gZWZmZWN0LiBBbmQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlIHBlcnNvbiB3aG8gaGFzIGhhZCB0aGUgZXN0YXRlIGFkanVkZ2VkIHRvIGhpbSBiZSBub3QgbGl2aW5nLCBsZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltYW50IGNpdGUgaW4gbGlrZSBtYW5uZXIgdGhlIHN1Y2Nlc3NvciwgcHJvdmlkZWQgdGhhdCB0aGUgcGVyaW9kIGNvdmVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHN0YXR1dGUgb2YgbGltaXRhdGlvbnMgaGFzIG5vdCBleHBpcmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHBlcmlvZCB3YXMgZml2ZSB5ZWFycy48L25vdGU+IEFuZCB0aGUgY2xhaW0gdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc29yIHNoYWxsIGJlIHRoYXQgaGUgc2hhbGwgc2hvdyBvbiB3aGF0IHRlcm1zIHRoZSBwZXJzb24gd2hvc2UKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgaGUgaG9sZHMgaGFkIGl0IGFkanVkZ2VkIHRvIGhpbS48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFueSBwZXJzb24gc2hhbGwgY2xhaW0gdGhlIGluaGVyaXRhbmNlIG9yIHRoZSBoZWlyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIGFkanVkaWNhdGlvbiBoYXMgYmVlbiBtYWRlLCBsZXQgaGltIGNpdGUgYmVmb3JlIHRoZSBhcmNob24gdGhlIHBlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICB3aG8gaGFzIG9idGFpbmVkIHRoZSBhZGp1ZGljYXRpb24ganVzdCBhcyBpbiBvdGhlciBzdWl0cywgYW5kIGEgZGVwb3NpdCB0bwogICAgICAgICAgICAgICAgICAgICAgICBjb3ZlciBjb3N0cyBzaGFsbCBiZSBtYWRlIGJ5IHRoZSBjbGFpbWFudC4gQW5kIGlmIGhlIHdpbnMgYW4gYWRqdWRpY2F0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgY2l0YXRpb24sIHRoZSBhZGp1ZGljYXRpb24gb2YgdGhlIGVzdGF0ZSBzaGFsbCBiZSBvZiBubyBlZmZlY3QuIEFuZAogICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgcGVyc29uIHdobyBoYXMgaGFkIHRoZSBlc3RhdGUgYWRqdWRnZWQgdG8gaGltIGJlIG5vdCBsaXZpbmcsIGxldCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW1hbnQgY2l0ZSBpbiBsaWtlIG1hbm5lciB0aGUgc3VjY2Vzc29yLCBwcm92aWRlZCB0aGF0IHRoZSBwZXJpb2QgY292ZXJlZAogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgc3RhdHV0ZSBvZiBsaW1pdGF0aW9ucyBoYXMgbm90IGV4cGlyZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgcGVyaW9kIHdhcyBmaXZlIHllYXJzLjwvbm90ZT4gQW5kIHRoZSBjbGFpbSB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwb3NzZXNzb3Igc2hhbGwgYmUgdGhhdCBoZSBzaGFsbCBzaG93IG9uIHdoYXQgdGVybXMgdGhlIHBlcnNvbiB3aG9zZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBoZSBob2xkcyBoYWQgaXQgYWRqdWRnZWQgdG8gaGltLjwvdHJhbnNsYXRpb24+"
translation['43.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LCBhbmQgaXQgaXMgYSByZWFzb25hYmxlIHJlcXVlc3QgSSBtYWtlIG9mIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LiBJZiBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgcHJvdmUgdG8geW91IHRoYXQgdGhpcyBib3kgRXVidWxpZGVzIGhlcmUgYW5kIFBoeWxvbWFjaMOqLCB3aG8gaXMKICAgICAgICAgICAgICAgICAgICB0aGUgbW90aGVyIG9mIHRoZSBib3kgYW5kIHRoZSBkYXVnaHRlciBvZiBFdWJ1bGlkZXMsIGFyZSBuZWFyZXIgb2Yga2luIHRvCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcyB0aGFuIFRoZW9wb21wdXMsIHRoZSBmYXRoZXIgb2YgTWFjYXJ0YXR1cywgYW5kIG5vdCBvbmx5IHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0IG9mIGtpbiwgYnV0IHRoYXQgdGhlcmUgaXMgYWJzb2x1dGVseSBubyBodW1hbiBiZWluZyBiZWxvbmdpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgSGFnbmlhcyBleGNlcHQgdGhlIG1vdGhlciBvZiB0aGlzIGJveSBhbmQgdGhlIGJveSBoaW1zZWxmLOKAlGlmCiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCBwcm92ZSB0aGlzLCBJIGJlZyBvZiB5b3UsIG1lbiBvZiB0aGUganVyeSwgdG8gZ2l2ZSB5b3VyIGFpZCB0byB1cy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QsIG1lbiBvZiB0aGUganVyeSwgaXQgd2FzIG15IGludGVudGlvbiB0byB3cml0ZSBvbiBhIGJvYXJkIGFsbCB0aGUga2luc2ZvbGsKICAgICAgICAgICAgICAgICAgICBvZiBIYWduaWFzLCBhbmQgdGh1cyB0byBleGhpYml0IHRoZW0gdG8geW91IG9uZSBieSBvbmU7IGJ1dCB3aGVuIEkgc2F3IHBsYWlubHkKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vdCBhbGwgdGhlIGp1cnltZW4gd291bGQgaGF2ZSBhbiBlcXVhbGx5IGdvb2QgdmlldywgYnV0IHRoYXQgdGhvc2Ugc2l0dGluZwogICAgICAgICAgICAgICAgICAgIGF0IGEgZGlzdGFuY2Ugd291bGQgYmUgYXQgYSBkaXNhZHZhbnRhZ2UsIGl0IGlzIHBlcmhhcHMgbmVjZXNzYXJ5IHRvIGluc3RydWN0CiAgICAgICAgICAgICAgICAgICAgeW91IGJ5IHdvcmQgb2YgbW91dGgsIGZvciB0aHVzIGFsbCB3aWxsIGJlIG9uIHRoZSBzYW1lIGZvb3RpbmcuIEksIG9uIG15IHBhcnQsCiAgICAgICAgICAgICAgICAgICAgd2lsbCBlbmRlYXZvciB0byB0aGUgYmVzdCBvZiBteSBhYmlsaXR5IHRvIGluZm9ybSB5b3UgcmVnYXJkaW5nIHRoZSBmYW1pbHkgb2YKICAgICAgICAgICAgICAgICAgICBIYWduaWFzIGluIHRoZSBmZXdlc3Qgd29yZHMgcG9zc2libGUuIDwvdHJhbnNsYXRpb24+"
translation['43.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnVzZWx1cywgbWVuIG9mIHRoZSBqdXJ5LCB3YXMgYSBtZW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGVtZSBPZW9uLCBhbmQgdG8gaGltIHdlcmUgYm9ybiBmaXZlIHNvbnMsIEhhZ25pYXMgYW5kIEV1YnVsaWRlcyBhbmQKICAgICAgICAgICAgICAgICAgICBTdHJhdGl1cyBhbmQgSGFicm9uIGFuZCBDbGVvY3JpdHVzLiBBbmQgYWxsIHRoZXNlIHNvbnMgb2YgQnVzZWx1cyBncmV3IHVwIHRvCiAgICAgICAgICAgICAgICAgICAgbWFuaG9vZCwgYW5kIHRoZWlyIGZhdGhlciBCdXNlbHVzIGRpdmlkZWQgaGlzIHByb3BlcnR5IGFtb25nIHRoZW0gYWxsIGZhaXJseSBhbmQKICAgICAgICAgICAgICAgICAgICBlcXVpdGFibHksIGFzIHdhcyBmaXR0aW5nLiBBbmQgd2hlbiB0aGV5IGhhZCBkaXZpZGVkIHRoZSBwcm9wZXJ0eSBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMsIGVhY2ggb2YgdGhlbSBtYXJyaWVkIGEgd2lmZSBhY2NvcmRpbmcgdG8geW91ciBsYXdzLCBhbmQgc29ucyBhbmQKICAgICAgICAgICAgICAgICAgICBncmFuZHNvbnMgd2VyZSBib3JuIHRvIHRoZW0gYWxsLCBhbmQgdGhlcmUgc3ByYW5nIHVwIGZpdmUgaG91c2Vob2xkcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHNpbmdsZSBvbmUgb2YgQnVzZWx1czsgYW5kIHRoZXkgZHdlbHQgYXBhcnQsIGVhY2ggb25lIGhhdmluZyBoaXMgb3duIGhvbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgYmVnZXR0aW5nIGhpcyBkZXNjZW5kYW50cy4gPC90cmFuc2xhdGlvbj4="
translation['43.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2l0aCByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICB0aHJlZSBvZiB0aGUgYnJvdGhlcnMsIHNvbnMgb2YgQnVzZWx1cywgYW5kIHRoZSBkZXNjZW5kYW50cyBib3JuIHRvIHRoZW0sIHdoeQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBJIHRyb3VibGUgeW91LCBtZW4gb2YgdGhlIGp1cnksIG9yIG15c2VsZiBieSBnb2luZyBpbnRvIHBhcnRpY3VsYXJzIGFib3V0CiAgICAgICAgICAgICAgICAgICAgZWFjaCBvbmU/IEZvciBhbHRob3VnaCB0aGV5IGFyZSBpbiB0aGUgc2FtZSBkZWdyZWUgb2YgcmVsYXRpb25zaGlwIGFzCiAgICAgICAgICAgICAgICAgICAgVGhlb3BvbXB1cywgYW5kIGFyZSBhcyBuZWFyIG9mIGtpbiB0byBIYWduaWFzLCB3aG9zZSBlc3RhdGUgaXMgaW4gcXVlc3Rpb24sIG5vdAogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVtIGhhcyBldmVyIHRyb3VibGVkIHVzIGVpdGhlciBhdCBhbiBlYXJsaWVyIHRpbWUgb3Igbm93LCBub3IgaGFzIG1hZGUKICAgICAgICAgICAgICAgICAgICBhbnkgY2xhaW0gdG8gdGhlIGVzdGF0ZSBvZiBIYWduaWFzIG9yIHRvIHRoZSB3b21hbiB3aG8gaXMgdGhlIGhlaXJlc3MsIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZCBpbiBtYXJyaWFnZSB0byBtZTsgZm9yIHRoZXkgY29uc2lkZXJlZCB0aGF0IHRoZXkgaGFkIG5vIGNsYWltIHdoYXRldmVyCiAgICAgICAgICAgICAgICAgICAgdG8gYW55dGhpbmcgYmVsb25naW5nIHRvIEhhZ25pYXMuIDwvdHJhbnNsYXRpb24+"
translation['43.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBzZWVtcyB0bwogICAgICAgICAgICAgICAgICAgIG1lIHRoZXJlZm9yZSB0aGF0IGl0IHdvdWxkIGJlIGVudGlyZWx5IHN1cGVyZmx1b3VzIHRvIHNheSBhbnl0aGluZyBhYm91dCB0aGVtCiAgICAgICAgICAgICAgICAgICAgc2F2ZSBvbmx5IHdoYXQgSSBjYW5ub3QgaGVscCBtZW50aW9uaW5nLiBPZiBUaGVvcG9tcHVzLCBob3dldmVyLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgTWFjYXJ0YXR1cywgYW5kIG9mIE1hY2FydGF0dXMgdGhlIGRlZmVuZGFudCBoaW1zZWxmLCBpdCBpcyBuZWNlc3NhcnkgZm9yIG1lIHRvCiAgICAgICAgICAgICAgICAgICAgc3BlYWsuIFlldCB0aGUgc3RvcnksIG1lbiBvZiB0aGUganVyeSwgaXMgYSBzaG9ydCBvbmUuIEFzIHlvdSBoYXZlIGp1c3QgaGVhcmQsCiAgICAgICAgICAgICAgICAgICAgQnVzZWx1cyBoYWQgZml2ZSBzb25zLiBPbmUgb2YgdGhlc2Ugd2FzIFN0cmF0aXVzLCB0aGUgYW5jZXN0b3Igb2YgTWFjYXJ0YXR1cywKICAgICAgICAgICAgICAgICAgICBhbmQgYW5vdGhlciB3YXMgSGFnbmlhcywgdGhlIGFuY2VzdG9yIG9mIHRoaXMgYm95LiA8L3RyYW5zbGF0aW9uPg=="
translation['43.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBIYWduaWFzIHdhcyBib3JuIGEgc29uLCBQb2xlbW9uLCBhbmQgYSBkYXVnaHRlciwKICAgICAgICAgICAgICAgICAgICBQaHlsb21hY2jDqiwgc2lzdGVyIG9mIFBvbGVtb24gYnkgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUgc2FtZSBtb3RoZXI7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIFN0cmF0aXVzLCB0aGUgYnJvdGhlciBvZiBIYWduaWFzLCB0aGVyZSB3ZXJlIGJvcm4gUGhhbm9zdHJhdHVzIGFuZAogICAgICAgICAgICAgICAgICAgIENoYXJpZGVtdXMsIHRoZSBncmFuZGZhdGhlciBvZiB0aGUgZGVmZW5kYW50IE1hY2FydGF0dXMuIE5vdyBJIGFzayB5b3UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB3aGljaCBpcyBuZWFyZXIgb2Yga2luIGFuZCBtb3JlIGNsb3NlbHkgcmVsYXRlZCB0byBIYWduaWFzLCBoaXMgc29uCiAgICAgICAgICAgICAgICAgICAgUG9sZW1vbiBhbmQgaGlzIGRhdWdodGVyIFBoeWxvbWFjaMOqLCBvciBDaGFyaWRlbXVzLCB0aGUgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgU3RyYXRpdXMsIGFuZCBuZXBoZXcgb2YgSGFnbmlhcz8gRm9yIG15IHBhcnQgSSB0aGluayB0aGF0IHRvIGV2ZXJ5IG9uZSBvZiB1cyBoaXMKICAgICAgICAgICAgICAgICAgICBzb24gYW5kIGRhdWdodGVyIGFyZSBtb3JlIG5lYXJseSByZWxhdGVkIHRoYW4gaGlzIG5lcGhldzsgYW5kIG5vdCBvbmx5IHdpdGggdXMKICAgICAgICAgICAgICAgICAgICBkb2VzIHRoaXMgaG9sZCBnb29kLCBidXQgYWxzbyBhbW9uZyBhbGwgb3RoZXIgcGVvcGxlIHdoZXRoZXIgR3JlZWtzIG9yCiAgICAgICAgICAgICAgICAgICAgYmFyYmFyaWFucy4gPC90cmFuc2xhdGlvbj4="
translation['43.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSwgdGhlbiwgdGhpcyBpcyBhZG1pdHRlZCwgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3cgZWFzaWx5IGZvbGxvdyB0aGUgcmVzdCBvZiB0aGUgYXJndW1lbnQgbWVuIG9mIHRoZSBqdXJ5LCBhbmQgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBzZWUgaG93IGFyYml0cmFyeSBhbmQgaG93IHJlY2tsZXNzIHRoZXNlIG1lbiBhcmUuIFRvIFBvbGVtb24sIHNvbiBvZiBIYWduaWFzLAogICAgICAgICAgICAgICAgICAgIHdhcyBib3JuIGEgc29uLCBIYWduaWFzLCBoYXZpbmcgdGhlIG5hbWUgb2YgaGlzIGdyYW5kZmF0aGVyIEhhZ25pYXMsIGFuZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIEhhZ25pYXMgZGllZCB3aXRob3V0IGlzc3VlLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZnJvbQogICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgc2lzdGVyIG9mIFBvbGVtb24sIGFuZCBQaGlsYWdydXMsIHRvIHdob20gaGVyIGJyb3RoZXIKICAgICAgICAgICAgICAgICAgICBQb2xlbW9uIGhhZCBnaXZlbiBoZXIgaW4gbWFycmlhZ2UsIGhlIGJlaW5nIGhpcyBmaXJzdCBjb3VzaW4g77yIZm9yCiAgICAgICAgICAgICAgICAgICAgUGhpbGFncnVzIHdhcyB0aGUgc29uIG9mIEV1YnVsaWRlcywgdGhlIGJyb3RoZXIgb2YKICAgICAgICAgICAgICAgICAgICBIYWduaWFz77yJ4oCUZnJvbSBQaGlsYWdydXMsIEkgc2F5LCB0aGUgY291c2luIG9mIFBvbGVtb24sIGFuZAogICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqIHRoZSBzaXN0ZXIgb2YgUG9sZW1vbiwgdGhlcmUgd2FzIGJvcm4gRXVidWxpZGVzIHRoZSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGJveSdzIG1vdGhlci4gVGhlc2Ugc29ucywgdGhlbiwgd2VyZSBib3JuIHRvIFBvbGVtb24gYW5kIHRvIFBvbGVtb24ncwogICAgICAgICAgICAgICAgICAgIHNpc3RlciBQaHlsb21hY2jDqi4gQnV0IHRvIENoYXJpZGVtdXMsIHRoZSBzb24gb2YgU3RyYXRpdXMsIHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIGJvcm4gYSBzb24gVGhlb3BvbXB1cywgdGhlIGZhdGhlciBvZiB0aGUgZGVmZW5kYW50IE1hY2FydGF0dXMuIDwvdHJhbnNsYXRpb24+"
translation['43.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhlbiwgSSBhc2sgeW91LCBtZW4gb2YgdGhlIGp1cnksIHdoaWNoIGlzCiAgICAgICAgICAgICAgICAgICAgbmVhcmVyIG9mIGtpbiBhbmQgbW9yZSBjbG9zZWx5IHJlbGF0ZWQgdG8gdGhlIGZpcnN0IEhhZ25pYXMsIEhhZ25pYXMsIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBQb2xlbW9uLCBhbmQgRXVidWxpZGVzLCB0aGUgc29uIG9mIFBoeWxvbWFjaMOqIGFuZCBQaGlsYWdydXMsIG9yCiAgICAgICAgICAgICAgICAgICAgVGhlb3BvbXB1cywgdGhlIHNvbiBvZiBDaGFyaWRlbXVzIGFuZCBncmFuZHNvbiBvZiBTdHJhdGl1cz8gSSBhbSBvZiB0aGUgb3BpbmlvbiwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIHRoYXQgaWYgdGhlIHNvbiBhbmQgdGhlIGRhdWdodGVyIGFyZSB0aGUgbmVhcmVzdCBvZiBraW4sIHNvLAogICAgICAgICAgICAgICAgICAgIHRvbywgdGhlIHNvbidzIHNvbiBhbmQgdGhlIGRhdWdodGVyJ3Mgc29uIGFyZSBtb3JlIG5lYXJseSByZWxhdGVkIHRoYW4gdGhlIHNvbgogICAgICAgICAgICAgICAgICAgIG9mIGEgbmVwaGV3IGFuZCBvbmUgd2hvIGlzIGEgbWVtYmVyIG9mIGFub3RoZXIgYnJhbmNoIG9mIHRoZSBmYW1pbHkuIDwvdHJhbnNsYXRpb24+"
translation['43.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0byBUaGVvcG9tcHVzIHdhcyBib3JuIGEgc29uLCBNYWNhcnRhdHVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIGFuZCB0byBFdWJ1bGlkZXMsIHRoZSBzb24gb2YgUGh5bG9tYWNow6osIGFuZCBjb3VzaW4gb2YKICAgICAgICAgICAgICAgICAgICBIYWduaWFzIG9uIGhpcyBmYXRoZXIncyBzaWRlOyB0aGlzIGJveSwgd2hvIGlzIHRvIEhhZ25pYXMgdGhlIHNvbiBvZiBhIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgY291c2luIG9uIHRoZSBmYXRoZXIncyBzaWRlOyBzaW5jZSBQaHlsb21hY2jDqiwgdGhlIG1vdGhlciBvZiBFdWJ1bGlkZXMKICAgICAgICAgICAgICAgICAgICBhbmQgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCB3ZXJlIGJyb3RoZXIgYW5kIHNpc3RlciwgYm9ybiBvZiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBhbmQgdGhlIHNhbWUgbW90aGVyLiBCdXQgdG8gTWFjYXJ0YXR1cyBoZXJlLCB0aGUgc29uIG9mIFRoZW9wb21wdXMsIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gbm8gaXNzdWUgd2hpY2ggaXMgYm90aCBpbiB0aGUgZmFtaWx5IG9mIEhhZ25pYXMgYW5kIGluIHRoYXQgb2YKICAgICAgICAgICAgICAgICAgICBTdHJhdGl1cy4gPC90cmFuc2xhdGlvbj4="
translation['43.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGJlaW5nIHRoZSBmYWN0cywgdGhpcyBib3kgaGVyZQogICAgICAgICAgICAgICAgICAgIGhhcyBvbmUgb2YgdGhlIHRpdGxlcyBtZW50aW9uZWQgaW4gdGhlIGxhdywgYW5kIHVwIHRvIHdoaWNoIHRoZSBsYXcgb3JkYWlucyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IG9mIHN1Y2Nlc3Npb24gc2hvdWxkIGV4dGVuZDsgZm9yIGhlIGlzIHRoZSBjaGlsZCBvZiB0aGUgZmlyc3QgY291c2luCiAgICAgICAgICAgICAgICAgICAgb2YgSGFnbmlhcywgc2luY2UgaGlzIGZhdGhlciBFdWJ1bGlkZXMgd2FzIGNvdXNpbiB0byBIYWduaWFzLCB3aG9zZSBpbmhlcml0YW5jZQogICAgICAgICAgICAgICAgICAgIGlzIGluIHF1ZXN0aW9uLiBUaGVvcG9tcHVzLCBvbiB0aGUgY29udHJhcnksIHRoZSBmYXRoZXIgb2YgdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIE1hY2FydGF0dXMsIGNvdWxkIG5vdCBoYXZlIGFwcHJvcHJpYXRlZCB0byBoaW1zZWxmIGFueSBvbmUgb2YgdGhlIHRpdGxlcwogICAgICAgICAgICAgICAgICAgIG1lbnRpb25lZCBpbiB0aGUgbGF3LCBmb3IgaGUgYmVsb25nZWQgdG8gYW5vdGhlciBicmFuY2ggb2YgdGhlIGZhbWlseSwgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIFN0cmF0aXVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgaXMgbm90IGZpdHRpbmcsIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCB0aGF0IGFueSBtYW4gd2hhdHNvZXZlciBzaG91bGQgcG9zc2VzcyB0aGUgZXN0YXRlIG9mIEhhZ25pYXMsIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBiZWxvbmdzIHRvIGFub3RoZXIgYnJhbmNoLCBzbyBsb25nIGFzIHRoZXJlIGlzIGxlZnQgYW55IG9uZSBvZiB0aG9zZSBib3JuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJyYW5jaCBvZiBIYWduaWFzOyBubywgbm9yIGlzIGl0IHJpZ2h0IHRvIGV4cGVsIHN1Y2ggcGVyc29uIGJ5IHZpb2xlbmNlLCBhcwogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBhcmUgdHJ5aW5nIHRvIGRvLCB3aGlsZSB0aGV5IGFyZSB0aGVtc2VsdmVzIG1vcmUgZGlzdGFudGx5IHJlbGF0ZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCBvZiB0aGUgc2FtZSBicmFuY2ggb2YgdGhlIGZhbWlseS4gRm9yIHRoaXMsIG1lbiBvZiB0aGUganVyeSwgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgdXBvbiB3aGljaCBUaGVvcG9tcHVzLCB0aGUgZmF0aGVyIG9mIHRoZSBkZWZlbmRhbnQgTWFjYXJ0YXR1cywgbWlzbGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnkuIDwvdHJhbnNsYXRpb24+"
translation['43.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5XaG8sIHRoZW4sIGFyZSB0aG9zZSBzdGlsbCBzdXJ2aXZpbmcgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgYnJhbmNoIG9mIEhhZ25pYXM/IFBoeWxvbWFjaMOqLCBteSB3aWZlLCB3aG8gaXMgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgRXVidWxpZGVzLCB0aGUgY291c2luIG9mIEhhZ25pYXMsIGFuZCB0aGlzIGJveSwgd2hvIGhhcyBiZWVuIGFkb3B0ZWQgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICBmYW1pbHkgb2YgRXVidWxpZGVzIGFuZCBIYWduaWFzLiBUaGVvcG9tcHVzLCBob3dldmVyLCB0aGUgZmF0aGVyIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBNYWNhcnRhdHVzLCBub3QgYmVpbmcgaGltc2VsZiBvZiB0aGUgYnJhbmNoIG9mIEhhZ25pYXMsIHRvbGQgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeW1lbiBhIG1vbnN0cm91cyBsaWUgcmVnYXJkaW5nIFBoeWxvbWFjaMOqLCB0aGUgc2lzdGVyIG9mIFBvbGVtb24KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGF1bnQgb2YgSGFnbmlhcywgYWxsZWdpbmcgdGhhdCBzaGUgd2FzIG5vdCB0aGUgc2lzdGVyIG9mIFBvbGVtb24sIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBIYWduaWFzLCBieSB0aGUgc2FtZSBmYXRoZXIgYW5kIG1vdGhlciwgYW5kIGFub3RoZXIgaW4gcHJldGVuZGluZyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3YXMgb2YgdGhlIHNhbWUgZmFtaWx5IGFzIEhhZ25pYXMsIHdoZXJlYXMgaGUgaGFkIG5ldmVyIGJlbG9uZ2VkIHRvIGl0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlc2UgYXNzZXJ0aW9ucyBUaGVvcG9tcHVzIG1hZGUKICAgICAgICAgICAgICAgICAgICBmZWFybGVzc2x5LCBub3QgcHJvZHVjaW5nIGFueSB3aXRuZXNzIHdobyB3b3VsZCBoYXZlIGJlZW4gcmVzcG9uc2libGUgdG8gdXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBvbmx5IGhpcyBhc3NvY2lhdGVzIHRvIGNvcnJvYm9yYXRlIHdoYXQgaGUgc2FpZDsgZm9yIHRoZXkgd2VyZSBsZWFndWVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvbmUgYW5vdGhlciBhbmQgZGlkIGV2ZXJ5dGhpbmcgaW4gY29uY2VydCwgaW4gb3JkZXIgdG8gcm9iIHRoZSBsYWR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgb2YgdGhpcyBib3kgaGVyZSwgb2YgdGhlIGluaGVyaXRhbmNlIHdoaWNoIHlvdSBieSB5b3VyIHZvdGVzIGhhZCBkZWNpZGVkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgaGVycy4gPC90cmFuc2xhdGlvbj4="
translation['43.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpc2ggbm93LCBtZW4gb2YgdGhlIGp1cnksIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSB3aXRuZXNzZXMgaW4gc3VwcG9ydCBvZiB0aGUgc3RhdGVtZW50cyB3aGljaCBJIGhhdmUgbWFkZSB0bwogICAgICAgICAgICAgICAgICAgIHlvdeKAlGZpcnN0LCB0byBwcm92ZSB0aGF0IFBoeWxvbWFjaMOqLCB0aGUgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBFdWJ1bGlkZXMsIHdvbiBqdWRnZW1lbnQgZm9yIHRoZSBlc3RhdGUgb2YgSGFnbmlhcyBhcyBiZWluZyB0aGUgbmVhcmVzdCBvZiBraW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gdG8gZXN0YWJsaXNoIHRoZSByZXN0IG9mIHRoZSBmYWN0cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZAogICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzIHN0YXRlIHRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcmJpdHJhdG9yIGluIHRoZSBhcmNob25zaGlwIG9mIE5pY29waGVtdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIEIuQy4gPGRhdGVSYW5nZSBhdXRobmFtZT0iLTM2MS8tMzYwIiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zNjEiIHRvPSItMzYwIj4zNjE8L2RhdGVSYW5nZT4tMzYwLjwvbm90ZT4gd2hlbiBQaHlsb21hY2jDqiwgdGhlIGRhdWdodGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIEV1YnVsaWRlcywgd29uIGp1ZGdlbWVudCBmb3IgdGhlIGVzdGF0ZSBvZiBIYWduaWFzIGFnYWluc3QgYWxsIHdobwogICAgICAgICAgICAgICAgICAgICAgICBkaXNwdXRlZCBoZXIgdGl0bGUuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cyBzdGF0ZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGJlZm9yZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRyYXRvciBpbiB0aGUgYXJjaG9uc2hpcCBvZiBOaWNvcGhlbXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBpbiBCLkMuIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNjEvLTM2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzYxIiB0bz0iLTM2MCI+MzYxPC9kYXRlUmFuZ2U+LTM2MC48L25vdGU+IHdoZW4gUGh5bG9tYWNow6osIHRoZSBkYXVnaHRlcgogICAgICAgICAgICAgICAgICAgICAgICBvZiBFdWJ1bGlkZXMsIHdvbiBqdWRnZW1lbnQgZm9yIHRoZSBlc3RhdGUgb2YgSGFnbmlhcyBhZ2FpbnN0IGFsbCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgZGlzcHV0ZWQgaGVyIHRpdGxlLjxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNjEvLTM2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzYxIiB0bz0iLTM2MCI+MzYxPC9kYXRlUmFuZ2U+LTM2MC48L3RyYW5zbGF0aW9uPg=="
translation['43.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdAogICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgZGF1Z2h0ZXIgb2YgRXVidWxpZGVzLCB3b24ganVkZ2VtZW50IGZvciB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgeW91IGhhdmUgaGVhcmQsIG1lbiBvZiB0aGUganVyeS4gQW5kIHNoZSB3b24gaXQsIG5vdCBieSB3cm9uZ2Z1bAogICAgICAgICAgICAgICAgICAgIHRyaWNrZXJ5IG9yIGNvbnNwaXJhY3ksIGJ1dCBpbiB0aGUgZmFpcmVzdCBtYW5uZXIgcG9zc2libGUsIHNpbmNlIHdlIHByb3ZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2hlIHdhcyBuZWFyZXN0IG9mIGtpbiB0byBIYWduaWFzLCB3aG9zZSBlc3RhdGUgaXMgaW4gcXVlc3Rpb24sIGJlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIGhpcyBjb3VzaW4gb24gaGlzIGZhdGhlcidzIHNpZGUsIGFuZCBiZWluZyBvZiB0aGUgc2FtZSBicmFuY2ggYXMKICAgICAgICAgICAgICAgICAgICBIYWduaWFzLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCB0aGVyZWZvcmUsIE1hY2FydGF0dXMgc2F5cyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGZhdGhlciBUaGVvcG9tcHVzIHdvbiBqdWRnZW1lbnQgZm9yIHRoaXMgZXN0YXRlLCBtYWtlIGFuc3dlciB0byBoaW0gb24geW91cgogICAgICAgICAgICAgICAgICAgIHBhcnQsIG1lbiBvZiB0aGUganVyeSwgdGhhdCB0aGUgbGFkeSBhbHNvIHdvbiBqdWRnZW1lbnQgYmVmb3JlIFRoZW9wb21wdXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCdzIGZhdGhlciwgYW5kIHRoYXQgdGhlIGxhZHkgd29uIGhlciBjYXNlIGZhaXJseSwgc2luY2Ugc2hlIHdhcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGJyYW5jaCBhcyBIYWduaWFzLCBiZWluZyB0aGUgZGF1Z2h0ZXIgb2YgRXVidWxpZGVzLCB0aGUgY291c2luIG9mIEhhZ25pYXMsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgVGhlb3BvbXB1cyBkaWQgbm90IHdpbiB0aGUgc3VpdCwgYnV0IHByZXZhaWxlZCBieSB0cmlja2VyeSwgYmVpbmcKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGluIG5vIHNlbnNlIHdoYXRldmVyIG9mIHRoZSBicmFuY2ggb2YgSGFnbmlhcy4gPC90cmFuc2xhdGlvbj4="
translation['43.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5NYWtlIHRoaXMgcmVwbHkgdG8gaGltIHlvdXJzZWx2ZXMsIG1lbiBvZiB0aGUganVyeSwgYW5kIGFsc28gc3RhdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGFnYWluc3QgdGhpcyBib3kgRXVidWxpZGVzLCBzb24gb2YgRXVidWxpZGVzLCBzb24gb2YgdGhlIGZpcnN0IGNvdXNpbiBvbgogICAgICAgICAgICAgICAgICAgIGhpcyBmYXRoZXIncyBzaWRlIG9mIEhhZ25pYXMsIHdob3NlIGVzdGF0ZSBpcyBpbiBxdWVzdGlvbiwgbmVpdGhlciBUaGVvcG9tcHVzLAogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgTWFjYXJ0YXR1cywgbm9yIGFueSBvdGhlciBtYW4gZXZlciBhdCBhbnkgdGltZSB3b24gYSBqdWRnZW1lbnQuIEF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHByZXNlbnQgdGltZSB0aGUgY29udGVzdCBhbmQgdGhlIHRyaWFsIHRvIGFkanVkZ2UgdGhlIGVzdGF0ZSBvZiBIYWduaWFzIGFyZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gdGhpcyBzb24gb2YgRXVidWxpZGVzIGFuZCB0aGUgZGVmZW5kYW50IE1hY2FydGF0dXMsIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBUaGVvcG9tcHVzOyBhbmQgd2hpY2hldmVyIG9mIHRoZXNlIHR3byBzaGFsbCBpbiB5b3VyIGp1ZGdlbWVudCBzcGVhayBtb3N0IGluCiAgICAgICAgICAgICAgICAgICAgaGFybW9ueSB3aXRoIGp1c3RpY2UgYW5kIHRoZSBsYXdzLCB0byBoaW0sIGl0IGlzIHBsYWluLCB5b3UganVyeW1lbiB3aWxsIGdpdmUKICAgICAgICAgICAgICAgICAgICB5b3VyIHZvdGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgcmVtYWluaW5nIGRlcG9zaXRpb25zOyBmaXJzdCwgdGhvc2UgcHJvdmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGh5bG9tYWNow6osIHRoZSBhdW50IG9mIEhhZ25pYXMsIHdhcyBzaXN0ZXIgYnkgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIG1vdGhlciB0byBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mIEhhZ25pYXM7IGFmdGVyIHRoYXQgaGUgc2hhbGwgcmVhZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgZGVwb3NpdGlvbnMgd2hpY2ggaGF2ZSB0byBkbyB3aXRoIHRoZSBwZWRpZ3JlZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnkgdGhhdCB0aGV5IGFyZSBmZWxsb3ctZGVtZXNtZW4gb2YgUGhpbGFncnVzLCB0aGUgZmF0aGVyIG9mIEV1YnVsaWRlcywKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYW5kIHRoYXQgdGhleSBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGh5bG9tYWNow6osIHRoZSBtb3RoZXIgb2YgRXVidWxpZGVzLCB3YXMgY29uc2lkZXJlZCB0byBiZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2lzdGVyIG9mIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYnkgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBtb3RoZXIsIGFuZCB0aGF0IHRoZXkgbmV2ZXIgaGVhcmQgZnJvbSBhbnlvbmUgdGhhdCBQb2xlbW9uLCB0aGUgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhhZ25pYXMsIGhhZCBhIGJyb3RoZXIuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGlmeSB0aGF0IHRoZXkgYXJlIGZlbGxvdy1kZW1lc21lbiBvZiBQaGlsYWdydXMsIHRoZSBmYXRoZXIgb2YgRXVidWxpZGVzLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdGhhdCB0aGV5IGtub3cgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBQaHlsb21hY2jDqiwgdGhlIG1vdGhlciBvZiBFdWJ1bGlkZXMsIHdhcyBjb25zaWRlcmVkIHRvIGJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzaXN0ZXIgb2YgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBieSB0aGUgc2FtZSBmYXRoZXIgYW5kIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGhlciwgYW5kIHRoYXQgdGhleSBuZXZlciBoZWFyZCBmcm9tIGFueW9uZSB0aGF0IFBvbGVtb24sIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgaGFkIGEgYnJvdGhlci48L3RyYW5zbGF0aW9uPg=="
translation['43.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgT2VuYW50aMOqLCB0aGUgbW90aGVyIG9mIHRoZWlyIGdyYW5kZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmF0b25pZGVzLCB3YXMgZmlyc3QgY291c2luIHRvIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVycyBoYXZpbmcgYmVlbiBicm90aGVycywgYW5kIHRoYXQgdGhleSBoZWFyZCBmcm9tIHRoZWlyIG93biBmYXRoZXIgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mIEhhZ25pYXMsIG5ldmVyIGhhZCBhbnkgYnJvdGhlciwgYnV0IGhhZCBhIHNpc3RlciwKICAgICAgICAgICAgICAgICAgICAgICAgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIgYW5kIHRoZSBzYW1lIG1vdGhlciwgbmFtZWx5IFBoeWxvbWFjaMOqLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbW90aGVyIG9mIEV1YnVsaWRlcywgdGhlIGZhdGhlciBvZiBQaHlsb21hY2jDqiwgd2lmZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBTb3NpdGhldXMuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgT2VuYW50aMOqLCB0aGUgbW90aGVyIG9mIHRoZWlyIGdyYW5kZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmF0b25pZGVzLCB3YXMgZmlyc3QgY291c2luIHRvIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVycyBoYXZpbmcgYmVlbiBicm90aGVycywgYW5kIHRoYXQgdGhleSBoZWFyZCBmcm9tIHRoZWlyIG93biBmYXRoZXIgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mIEhhZ25pYXMsIG5ldmVyIGhhZCBhbnkgYnJvdGhlciwgYnV0IGhhZCBhIHNpc3RlciwKICAgICAgICAgICAgICAgICAgICAgICAgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIgYW5kIHRoZSBzYW1lIG1vdGhlciwgbmFtZWx5IFBoeWxvbWFjaMOqLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbW90aGVyIG9mIEV1YnVsaWRlcywgdGhlIGZhdGhlciBvZiBQaHlsb21hY2jDqiwgd2lmZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBTb3NpdGhldXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQW5vdGhlciI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vdGhlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudCB0ZXN0aWZpZXMgdGhhdCBoZSBpcyBhIHJlbGF0aXZlIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2xhbnNtYW4gYW5kIGZlbGxvdy1kZW1lc21hbiBvZiBIYWduaWFzIGFuZCBFdWJ1bGlkZXMsIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJkIGZyb20gaGlzIG93biBmYXRoZXIgYW5kIG90aGVyIHJlbGF0aXZlcyB0aGF0IFBvbGVtb24sIHRoZSBmYXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgbmV2ZXIgaGFkIGFueSBicm90aGVyLCBidXQgaGFkIGEgc2lzdGVyLCBib3JuIG9mIHRoZSBzYW1lIGZhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHNhbWUgbW90aGVyLCBuYW1lbHkgUGh5bG9tYWNow6osIHRoZSBtb3RoZXIgb2YgRXVidWxpZGVzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIFBoeWxvbWFjaMOqLCB3aWZlIG9mIFNvc2l0aGV1cy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXI8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnQgdGVzdGlmaWVzIHRoYXQgaGUgaXMgYSByZWxhdGl2ZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNsYW5zbWFuIGFuZCBmZWxsb3ctZGVtZXNtYW4gb2YgSGFnbmlhcyBhbmQgRXVidWxpZGVzLCBhbmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgICAgICBoZWFyZCBmcm9tIGhpcyBvd24gZmF0aGVyIGFuZCBvdGhlciByZWxhdGl2ZXMgdGhhdCBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhhZ25pYXMsIG5ldmVyIGhhZCBhbnkgYnJvdGhlciwgYnV0IGhhZCBhIHNpc3RlciwgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzYW1lIG1vdGhlciwgbmFtZWx5IFBoeWxvbWFjaMOqLCB0aGUgbW90aGVyIG9mIEV1YnVsaWRlcywKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZhdGhlciBvZiBQaHlsb21hY2jDqiwgd2lmZSBvZiBTb3NpdGhldXMuPC90cmFuc2xhdGlvbj4="
translation['43.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IEFyY2hpbWFjaHVzIHdhcyBoaXMgZ3JhbmRmYXRoZXIgYW5kIGFkb3B0ZWQgaGltIGFzIGhpcyBzb24sCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGhlIHdhcyBhIHJlbGF0aXZlIG9mIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgaGVhcmQgZnJvbSBBcmNoaW1hY2h1cyBhbmQgaGlzIG90aGVyIHJlbGF0aXZlcyB0aGF0IFBvbGVtb24sIHRoZSBmYXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgbmV2ZXIgaGFkIGFueSBicm90aGVyLCBidXQgaGFkIGEgc2lzdGVyLCBib3JuIG9mIHRoZSBzYW1lIGZhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHNhbWUgbW90aGVyLCBuYW1lbHkgUGh5bG9tYWNow6osIHRoZSBtb3RoZXIgb2YgRXVidWxpZGVzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIFBoeWxvbWFjaMOqLCB3aWZlIG9mIFNvc2l0aGV1cy48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXI8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnQKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGlmaWVzIHRoYXQgQXJjaGltYWNodXMgd2FzIGhpcyBncmFuZGZhdGhlciBhbmQgYWRvcHRlZCBoaW0gYXMgaGlzIHNvbiwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgaGUgd2FzIGEgcmVsYXRpdmUgb2YgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgICAgICBoZWFyZCBmcm9tIEFyY2hpbWFjaHVzIGFuZCBoaXMgb3RoZXIgcmVsYXRpdmVzIHRoYXQgUG9sZW1vbiwgdGhlIGZhdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBIYWduaWFzLCBuZXZlciBoYWQgYW55IGJyb3RoZXIsIGJ1dCBoYWQgYSBzaXN0ZXIsIGJvcm4gb2YgdGhlIHNhbWUgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgc2FtZSBtb3RoZXIsIG5hbWVseSBQaHlsb21hY2jDqiwgdGhlIG1vdGhlciBvZiBFdWJ1bGlkZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgUGh5bG9tYWNow6osIHdpZmUgb2YgU29zaXRoZXVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFub3RoZXIiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXI8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb25lbnQgdGVzdGlmaWVzIHRoYXQgaGlzIHdpZmUncyBmYXRoZXIgQ2FsbGlzdHJhdHVzIHdhcyBmaXJzdCBjb3VzaW4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdG8gQ2hhcmlkZW11cywgdGhlIGZhdGhlciBvZiBUaGVvcG9tcHVzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBmYXRoZXJzIGhhdmluZyBiZWVuIGJyb3RoZXJzLCBhbmQgdGhhdCBoaXMgbW90aGVyIHdhcyBkYXVnaHRlciBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0IGNvdXNpbiB0byBQb2xlbW9uLCBhbmQgdGhhdCB0aGVpciBtb3RoZXIgb2Z0ZW4gc2FpZCB0byB0aGVtIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGh5bG9tYWNow6osIHRoZSBtb3RoZXIgb2YgRXVidWxpZGVzLCB3YXMgc2lzdGVyIG9mIFBvbGVtb24sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIgb2YgSGFnbmlhcywgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIgYW5kIHRoZSBzYW1lIG1vdGhlciwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBuZXZlciBoYWQgYW55IGJyb3RoZXIuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9uZW50IHRlc3RpZmllcyB0aGF0IGhpcyB3aWZlJ3MgZmF0aGVyIENhbGxpc3RyYXR1cyB3YXMgZmlyc3QgY291c2luIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYW5kIHRvIENoYXJpZGVtdXMsIHRoZSBmYXRoZXIgb2YgVGhlb3BvbXB1cywKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgZmF0aGVycyBoYXZpbmcgYmVlbiBicm90aGVycywgYW5kIHRoYXQgaGlzIG1vdGhlciB3YXMgZGF1Z2h0ZXIgb2YgYQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCBjb3VzaW4gdG8gUG9sZW1vbiwgYW5kIHRoYXQgdGhlaXIgbW90aGVyIG9mdGVuIHNhaWQgdG8gdGhlbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgbW90aGVyIG9mIEV1YnVsaWRlcywgd2FzIHNpc3RlciBvZiBQb2xlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEhhZ25pYXMsIGJvcm4gb2YgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUgc2FtZSBtb3RoZXIsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgbmV2ZXIgaGFkIGFueSBicm90aGVyLjwvdHJhbnNsYXRpb24+"
translation['43.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHRyaWFsLCBtZW4gb2YgdGhlIGp1cnksIHdoZW4gdGhlc2UgbWVuIGZvcm1lZCB0aGVpciBjb25zcGlyYWN5IHdpdGggb25lIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBhbmQgYWN0ZWQgaW4gY29uY2VydCwgdGhlIHdob2xlIGdyb3VwIG9mIHRoZW0sIGluIHRoZWlyIGNvbnRlc3QgYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICBsYWR5LCB3ZSwgb24gb3VyIHBhcnQsIG1lbiBvZiB0aGUganVyeSwgbmVpdGhlciBwcmVwYXJlZCBkZXBvc2l0aW9ucyByZWdhcmRpbmcKICAgICAgICAgICAgICAgICAgICBmYWN0cyB0aGF0IHdlcmUgYWRtaXR0ZWQsIG5vciBzdW1tb25lZCB3aXRuZXNzZXMsIGJ1dCB0aG91Z2h0IHRoYXQgaW4gdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIGF0IGxlYXN0IHdlIHdlcmUgcGVyZmVjdGx5IHNhZmU7IHdoZXJlYXMgb3VyIG9wcG9uZW50cyBoYWQgZXF1aXBwZWQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHdpdGggYWxsIG1hbm5lciBvZiBzaGFtZWxlc3MgYXJ0aWZpY2VzIGZvciB0aGUgdHJpYWwsIGFuZCBoYWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBtaW5kcyBzZXQgdXBvbiB0aGlzIHRoaW5nIGFsb25l4oCUdG8gZGVjZWl2ZSB0aGUganVyeW1lbiBmb3IgdGhlIG1vbWVudC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhhZCB0aGUgYXVkYWNpdHkgdG8gYXNzZXJ0IHRoYXQKICAgICAgICAgICAgICAgICAgICBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mIEhhZ25pYXMsIGhhZCBubyBzaXN0ZXIgYXQgYWxsIGJvcm4gb2YgdGhlIHNhbWUgZmF0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIG1vdGhlcjsgc28gYWJvbWluYWJseSBpbXB1ZGVudCB3ZXJlIHRoZXksIHNlZWtpbmcgdG8gbWlzbGVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5bWVuIGluIGEgbWF0dGVyIG9mIHN1Y2ggaW1wb3J0YW5jZSBhbmQgc28gd2VsbC1rbm93biwgYW5kIHRoZXkgc3BlbnQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZWZmb3J0cyBhbmQgc3Ryb3ZlIGJleW9uZCBhbGwgZWxzZSB0byBlc3RhYmxpc2ggdGhpcy4gV2UgaGF2ZSwgaG93ZXZlciwgb24KICAgICAgICAgICAgICAgICAgICB0aGlzIHByZXNlbnQgb2NjYXNpb24gcHJvZHVjZWQgdGhpcyBob3N0IG9mIHdpdG5lc3NlcyByZWdhcmRpbmcgdGhlIHNpc3RlciBvZgogICAgICAgICAgICAgICAgICAgIFBvbGVtb24gYW5kIGF1bnQgb2YgSGFnbmlhcy4gPC90cmFuc2xhdGlvbj4="
translation['43.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBzaWRlIGxldCB3aG9ldmVyIHdpbGwgZ2l2ZSBldmlkZW5jZSBlaXRoZXIgdGhhdCBQb2xlbW9uIGFuZAogICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqIHdlcmUgbm90IGJyb3RoZXIgYW5kIHNpc3RlciwgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgbW90aGVyLCBvciB0aGF0IFBvbGVtb24gd2FzIG5vdCB0aGUgc29uLCBhbmQgUGh5bG9tYWNow6ogbm90CiAgICAgICAgICAgICAgICAgICAgdGhlIGRhdWdodGVyLCBvZiBIYWduaWFzLCB0aGUgc29uIG9mIEJ1c2VsdXM7IG9yIHRoYXQgUG9sZW1vbiB3YXMgbm90IHRoZSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICBvZiBIYWduaWFzLCA8L3RyYW5zbGF0aW9uPg=="
translation['43.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz53aG9zZSBlc3RhdGUgaXMgaW4gcXVlc3Rpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgc2lzdGVyIG9mIFBvbGVtb24sIG5vdCBoaXMgYXVudDsgb3IgdGhhdCBFdWJ1bGlkZXMgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBzb24gb2YgUGh5bG9tYWNow6osIG9yIG9mIFBoaWxhZ3J1cywgdGhlIGNvdXNpbiBvZiBIYWduaWFzOyBvcgogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoYXQgdGhlIHN0aWxsLWxpdmluZyBQaHlsb21hY2jDqiBpcyBub3QgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgRXVidWxpZGVzLCB0aGUgY291c2luIG9mIEhhZ25pYXMsIGFuZCB0aGlzIGJveSBub3QgaGlzIHNvbiwgYWRvcHRlZCBhY2NvcmRpbmcgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGxhd3MgaW50byB0aGUgZmFtaWx5IG9mIEV1YnVsaWRlcyBvciB0aGF0IFRoZW9wb21wdXMsIHRoZSBmYXRoZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50LCBNYWNhcnRhdHVzLCBiZWxvbmdlZCB0byB0aGUgYnJhbmNoIG9mIEhhZ25pYXMuIExldCBhbnlvbmUgZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBpbiBoaXMgZmF2b3Igb24gd2hhdGV2ZXIgb25lIG9mIHRoZXNlIHBvaW50cyBoZSBjaG9vc2VzLiBCdXQgSSBrbm93CiAgICAgICAgICAgICAgICAgICAgd2VsbCB0aGF0IG5vIG1vcnRhbCBtYW4gd2lsbCBiZSBzbyBkYXJpbmcgb3Igc28gc2Vuc2VsZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdGhhdCBpdCBtYXkKICAgICAgICAgICAgICAgICAgICBiZSB0aGUgbW9yZSBjbGVhciB0byB5b3UsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBpbiB0aGUgZm9ybWVyIHRyaWFsIHRoZXkgZ290IHRoZQogICAgICAgICAgICAgICAgICAgIHVwcGVyIGhhbmQgdGhyb3VnaCB0aGVpciBzaGFtZWxlc3MgYXVkYWNpdHksIGFuZCB0aGF0IHRoZXkgYWR2YW5jZWQgbm8ganVzdAogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cywgcmVhZCBhbGwgdGhlIGRlcG9zaXRpb25zIHRoYXQgcmVtYWluLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudAogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZXMgdGhhdCBoZSBpcyBhIHJlbGF0aXZlIG9mIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgaGUgaGVhcmQgZnJvbSBoaXMgZmF0aGVyIHRoYXQgUGhpbGFncnVzLCB0aGUgZmF0aGVyIG9mIEV1YnVsaWRlcywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBoYW5vc3RyYXR1cywgdGhlIGZhdGhlciBvZiBTdHJhdGl1cywgYW5kIENhbGxpc3RyYXR1cywgdGhlIGZhdGhlciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2lmZSBvZiBTb3NpYXMsIGFuZCBFdWN0ZW1vbiwgd2hvIHdhcyBraW5nLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBraW5nLWFyY2hvbi48L25vdGU+IGFuZCBDaGFyaWRlbXVzLCB0aGUgZmF0aGVyIG9mIFRoZW9wb21wdXMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFN0cmF0b2NsZXMsIHdlcmUgZmlyc3QgY291c2lucyB0byBQb2xlbW9uLCB0aGVpciBmYXRoZXJzIGFsbCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBicm90aGVycywgYW5kIHRoYXQgRXVidWxpZGVzLCB3aXRoIHJlZmVyZW5jZSB0byBoaXMgZmF0aGVyIFBoaWxhZ3J1cywgc3Rvb2QKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNhbWUgZGVncmVlIG9mIHJlbGF0aW9uc2hpcCBhcyB0aGUgc29ucyBvZiB0aGVzZSBtZW4gYW5kIEhhZ25pYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIHdpdGggcmVmZXJlbmNlIHRvIGhpcyBtb3RoZXIgUGh5bG9tYWNow6osIGhlIHdhcyByZWNvZ25pemVkCiAgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBmaXJzdCBjb3VzaW4gb2YgSGFnbmlhcyBvbiBoaXMgZmF0aGVyJ3Mgc2lkZSwgc2luY2UgaGUgd2FzIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhdGVybmFsIGF1bnQgb2YgSGFnbmlhcy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IGhlIGlzIGEgcmVsYXRpdmUgb2YgUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBoZSBoZWFyZCBmcm9tIGhpcyBmYXRoZXIgdGhhdCBQaGlsYWdydXMsIHRoZSBmYXRoZXIgb2YgRXVidWxpZGVzLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgUGhhbm9zdHJhdHVzLCB0aGUgZmF0aGVyIG9mIFN0cmF0aXVzLCBhbmQgQ2FsbGlzdHJhdHVzLCB0aGUgZmF0aGVyIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3aWZlIG9mIFNvc2lhcywgYW5kIEV1Y3RlbW9uLCB3aG8gd2FzIGtpbmcsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGtpbmctYXJjaG9uLjwvbm90ZT4gYW5kIENoYXJpZGVtdXMsIHRoZSBmYXRoZXIgb2YgVGhlb3BvbXB1cwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgU3RyYXRvY2xlcywgd2VyZSBmaXJzdCBjb3VzaW5zIHRvIFBvbGVtb24sIHRoZWlyIGZhdGhlcnMgYWxsIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3RoZXJzLCBhbmQgdGhhdCBFdWJ1bGlkZXMsIHdpdGggcmVmZXJlbmNlIHRvIGhpcyBmYXRoZXIgUGhpbGFncnVzLCBzdG9vZAogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2FtZSBkZWdyZWUgb2YgcmVsYXRpb25zaGlwIGFzIHRoZSBzb25zIG9mIHRoZXNlIG1lbiBhbmQgSGFnbmlhcywKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgd2l0aCByZWZlcmVuY2UgdG8gaGlzIG1vdGhlciBQaHlsb21hY2jDqiwgaGUgd2FzIHJlY29nbml6ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGZpcnN0IGNvdXNpbiBvZiBIYWduaWFzIG9uIGhpcyBmYXRoZXIncyBzaWRlLCBzaW5jZSBoZSB3YXMgdGhlIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGF0ZXJuYWwgYXVudCBvZiBIYWduaWFzLjwvdHJhbnNsYXRpb24+"
translation['43.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgdGhleSBhcmUgcmVsYXRpdmVzIG9mIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxhZ3J1cywgdGhlIGZhdGhlciBvZiBFdWJ1bGlkZXMsIGFuZCBvZiBFdWN0ZW1vbiwgd2hvIHdhcyBraW5nLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IGtub3cgdGhhdCBFdWN0ZW1vbiB3YXMgYnJvdGhlciBieSB0aGUgc2FtZSBmYXRoZXIgdG8gUGhpbGFncnVzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEV1YnVsaWRlcywgYW5kIHRoYXQgd2hlbiBzdWl0IGZvciB0aGUgYWRqdWRpY2F0aW9uIG9mIHRoZSBlc3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgSGFnbmlhcyB3YXMgaW5zdGl0dXRlZCBieSBFdWJ1bGlkZXMgYWdhaW5zdCBHbGF1Y29uLCBFdWN0ZW1vbiB3YXMgc3RpbGwKICAgICAgICAgICAgICAgICAgICAgICAgbGl2aW5nLCBiZWluZyBmaXJzdCBjb3VzaW4gdG8gUG9sZW1vbiwgdGhlIGZhdGhlciBvZiBIYWduaWFzLCB0aGVpciBmYXRoZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmluZyBiZWVuIGJyb3RoZXJzLCBhbmQgdGhhdCBFdWN0ZW1vbiBkaWQgbm90IGRpc3B1dGUgd2l0aCBFdWJ1bGlkZXMgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIHRvIHRoZSBlc3RhdGUgb2YgSGFnbmlhcywgbm9yIGRpZCBhbnlvbmUgZWxzZSBvbiB0aGUgc2NvcmUgb2Yga2luc2hpcAogICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGF0IG9jY2FzaW9uLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vdGhlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGlmeSB0aGF0IHRoZXkgYXJlIHJlbGF0aXZlcyBvZiBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mIEhhZ25pYXMsIGFuZCBvZgogICAgICAgICAgICAgICAgICAgICAgICBQaGlsYWdydXMsIHRoZSBmYXRoZXIgb2YgRXVidWxpZGVzLCBhbmQgb2YgRXVjdGVtb24sIHdobyB3YXMga2luZywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhleSBrbm93IHRoYXQgRXVjdGVtb24gd2FzIGJyb3RoZXIgYnkgdGhlIHNhbWUgZmF0aGVyIHRvIFBoaWxhZ3J1cywgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBFdWJ1bGlkZXMsIGFuZCB0aGF0IHdoZW4gc3VpdCBmb3IgdGhlIGFkanVkaWNhdGlvbiBvZiB0aGUgZXN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIEhhZ25pYXMgd2FzIGluc3RpdHV0ZWQgYnkgRXVidWxpZGVzIGFnYWluc3QgR2xhdWNvbiwgRXVjdGVtb24gd2FzIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdmluZywgYmVpbmcgZmlyc3QgY291c2luIHRvIFBvbGVtb24sIHRoZSBmYXRoZXIgb2YgSGFnbmlhcywgdGhlaXIgZmF0aGVycwogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYmVlbiBicm90aGVycywgYW5kIHRoYXQgRXVjdGVtb24gZGlkIG5vdCBkaXNwdXRlIHdpdGggRXVidWxpZGVzIGhpcwogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMsIG5vciBkaWQgYW55b25lIGVsc2Ugb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgb24gdGhhdCBvY2Nhc2lvbi48L3RyYW5zbGF0aW9uPg=="
translation['43.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgdGhlaXIgZmF0aGVyIFN0cmF0byB3YXMgYSByZWxhdGl2ZSBvZiBQb2xlbW9uLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEhhZ25pYXMsIGFuZCBvZiBDaGFyaWRlbXVzLCB0aGUgZmF0aGVyIG9mIFRoZW9wb21wdXMsIGFuZCBvZiBQaGlsYWdydXMsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIgb2YgRXVidWxpZGVzLCBhbmQgdGhhdCB0aGV5IGhlYXJkIGZyb20gdGhlaXIgZmF0aGVyIHRoYXQgUGhpbGFncnVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2sgZm9yIGhpcyBmaXJzdCB3aWZlIFBoeWxvbWFjaMOqLCB0aGUgc2lzdGVyIG9mIFBvbGVtb24sIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXIgb2YgSGFnbmlhcywgYm9ybiBvZiB0aGUgc2FtZSBmYXRoZXIgYW5kIHRoZSBzYW1lIG1vdGhlciwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGFncnVzIGhhZCBieSBQaHlsb21hY2jDqiBhIHNvbiBFdWJ1bGlkZXMsIGFuZCB0aGF0IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aCBvZiBQaHlsb21hY2jDqiBQaGlsYWdydXMgdG9vayBhIHNlY29uZCB3aWZlCiAgICAgICAgICAgICAgICAgICAgICAgIFRlbGVzaXBww6osIGFuZCB0aGVyZSB3YXMgYm9ybiBhIGJyb3RoZXIgdG8gRXVidWxpZGVzLCBuYW1lbHkKICAgICAgICAgICAgICAgICAgICAgICAgTWVuZXN0aGV1cywgb2YgdGhlIHNhbWUgZmF0aGVyIGJ1dCBub3Qgb2YgdGhlIHNhbWUgbW90aGVyOyBhbmQgdGhhdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEV1YnVsaWRlcyBtYWRlIGNsYWltIHRvIHRoZSBlc3RhdGUgb2YgSGFnbmlhcyBvbiB0aGUgc2NvcmUgb2Yga2luc2hpcCwKICAgICAgICAgICAgICAgICAgICAgICAgTWVuZXN0aGV1cyBkaWQgbm90IGRpc3B1dGUgaGlzIHRpdGxlIHRvIHRoZSBlc3RhdGUgb2YgSGFnbmlhcywgbm9yIGRpZAogICAgICAgICAgICAgICAgICAgICAgICBFdWN0ZW1vbiwgdGhlIGJyb3RoZXIgb2YgUGhpbGFncnVzLCBub3IgZGlkIGFueW9uZSBlbHNlIG9uIHRoZSBzY29yZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBraW5zaGlwIGRpc3B1dGUgdGhlIHRpdGxlIG9mIEV1YnVsaWRlcyBvbiB0aGF0IG9jY2FzaW9uLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vdGhlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGlmeSB0aGF0IHRoZWlyIGZhdGhlciBTdHJhdG8gd2FzIGEgcmVsYXRpdmUgb2YgUG9sZW1vbiwgdGhlIGZhdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBIYWduaWFzLCBhbmQgb2YgQ2hhcmlkZW11cywgdGhlIGZhdGhlciBvZiBUaGVvcG9tcHVzLCBhbmQgb2YgUGhpbGFncnVzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEV1YnVsaWRlcywgYW5kIHRoYXQgdGhleSBoZWFyZCBmcm9tIHRoZWlyIGZhdGhlciB0aGF0IFBoaWxhZ3J1cwogICAgICAgICAgICAgICAgICAgICAgICB0b29rIGZvciBoaXMgZmlyc3Qgd2lmZSBQaHlsb21hY2jDqiwgdGhlIHNpc3RlciBvZiBQb2xlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEhhZ25pYXMsIGJvcm4gb2YgdGhlIHNhbWUgZmF0aGVyIGFuZCB0aGUgc2FtZSBtb3RoZXIsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxhZ3J1cyBoYWQgYnkgUGh5bG9tYWNow6ogYSBzb24gRXVidWxpZGVzLCBhbmQgdGhhdCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGggb2YgUGh5bG9tYWNow6ogUGhpbGFncnVzIHRvb2sgYSBzZWNvbmQgd2lmZQogICAgICAgICAgICAgICAgICAgICAgICBUZWxlc2lwcMOqLCBhbmQgdGhlcmUgd2FzIGJvcm4gYSBicm90aGVyIHRvIEV1YnVsaWRlcywgbmFtZWx5CiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmVzdGhldXMsIG9mIHRoZSBzYW1lIGZhdGhlciBidXQgbm90IG9mIHRoZSBzYW1lIG1vdGhlcjsgYW5kIHRoYXQgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICBFdWJ1bGlkZXMgbWFkZSBjbGFpbSB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAsCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmVzdGhldXMgZGlkIG5vdCBkaXNwdXRlIGhpcyB0aXRsZSB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMsIG5vciBkaWQKICAgICAgICAgICAgICAgICAgICAgICAgRXVjdGVtb24sIHRoZSBicm90aGVyIG9mIFBoaWxhZ3J1cywgbm9yIGRpZCBhbnlvbmUgZWxzZSBvbiB0aGUgc2NvcmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAga2luc2hpcCBkaXNwdXRlIHRoZSB0aXRsZSBvZiBFdWJ1bGlkZXMgb24gdGhhdCBvY2Nhc2lvbi48L3RyYW5zbGF0aW9uPg=="
translation['43.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IGhpcyBmYXRoZXIgQXJjaGltYWNodXMgd2FzIGEgcmVsYXRpdmUgb2YgUG9sZW1vbiwgdGhlIGZhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBvZiBIYWduaWFzLCBhbmQgb2YgQ2hhcmlkZW11cywgdGhlIGZhdGhlciBvZiBUaGVvcG9tcHVzLCBhbmQgb2YgUGhpbGFncnVzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIEV1YnVsaWRlcywgYW5kIHRoYXQgaGUgaGVhcmQgZnJvbSB0aGVpciBmYXRoZXIgdGhhdCBQaGlsYWdydXMKICAgICAgICAgICAgICAgICAgICAgICAgdG9vayBmb3IgaGlzIGZpcnN0IHdpZmUgUGh5bG9tYWNow6osIHRoZSBzaXN0ZXIgb2YgUG9sZW1vbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBIYWduaWFzLCBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUgbW90aGVyLCBhbmQgdGhhdCBieQogICAgICAgICAgICAgICAgICAgICAgICBQaHlsb21hY2jDqiBoZSBoYWQgYSBzb24gRXVidWxpZGVzLCBhbmQgdGhhdCBhZnRlciB0aGUgZGVhdGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGh5bG9tYWNow6ogUGhpbGFncnVzIHRvb2sgYSBzZWNvbmQgd2lmZSBUZWxlc2lwcMOqLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBQaGlsYWdydXMgaGFkIGJ5IFRlbGVzaXBww6ogYSBzb24gTWVuZXN0aGV1cywgYSBicm90aGVyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEV1YnVsaWRlcywgb2YgdGhlIHNhbWUgZmF0aGVyIGJ1dCBub3Qgb2YgdGhlIHNhbWUgbW90aGVyOyBhbmQgdGhhdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEV1YnVsaWRlcy4gbWFkZSBjbGFpbSB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAsCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmVzdGhldXMgZGlkIG5vdCBkaXNwdXRlIGhpcyBjbGFpbSB0byB0aGUgZXN0YXRlLCBub3IgZGlkIEV1Y3RlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBvZiBQaGlsYWdydXMsIG5vciBkaWQgYW55b25lIGVsc2Ugb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAgZGlzcHV0ZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdGl0bGUgb2YgRXVidWxpZGVzIG9uIHRoYXQgb2NjYXNpb24uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IGhpcyBmYXRoZXIgQXJjaGltYWNodXMgd2FzIGEgcmVsYXRpdmUgb2YgUG9sZW1vbiwgdGhlIGZhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBvZiBIYWduaWFzLCBhbmQgb2YgQ2hhcmlkZW11cywgdGhlIGZhdGhlciBvZiBUaGVvcG9tcHVzLCBhbmQgb2YgUGhpbGFncnVzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIEV1YnVsaWRlcywgYW5kIHRoYXQgaGUgaGVhcmQgZnJvbSB0aGVpciBmYXRoZXIgdGhhdCBQaGlsYWdydXMKICAgICAgICAgICAgICAgICAgICAgICAgdG9vayBmb3IgaGlzIGZpcnN0IHdpZmUgUGh5bG9tYWNow6osIHRoZSBzaXN0ZXIgb2YgUG9sZW1vbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBIYWduaWFzLCBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUgbW90aGVyLCBhbmQgdGhhdCBieQogICAgICAgICAgICAgICAgICAgICAgICBQaHlsb21hY2jDqiBoZSBoYWQgYSBzb24gRXVidWxpZGVzLCBhbmQgdGhhdCBhZnRlciB0aGUgZGVhdGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGh5bG9tYWNow6ogUGhpbGFncnVzIHRvb2sgYSBzZWNvbmQgd2lmZSBUZWxlc2lwcMOqLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBQaGlsYWdydXMgaGFkIGJ5IFRlbGVzaXBww6ogYSBzb24gTWVuZXN0aGV1cywgYSBicm90aGVyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEV1YnVsaWRlcywgb2YgdGhlIHNhbWUgZmF0aGVyIGJ1dCBub3Qgb2YgdGhlIHNhbWUgbW90aGVyOyBhbmQgdGhhdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEV1YnVsaWRlcy4gbWFkZSBjbGFpbSB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAsCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbmVzdGhldXMgZGlkIG5vdCBkaXNwdXRlIGhpcyBjbGFpbSB0byB0aGUgZXN0YXRlLCBub3IgZGlkIEV1Y3RlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBvZiBQaGlsYWdydXMsIG5vciBkaWQgYW55b25lIGVsc2Ugb24gdGhlIHNjb3JlIG9mIGtpbnNoaXAgZGlzcHV0ZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdGl0bGUgb2YgRXVidWxpZGVzIG9uIHRoYXQgb2NjYXNpb24uPC90cmFuc2xhdGlvbj4="
translation['43.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJBbm90aGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IGhpcyBtb3RoZXIncyBmYXRoZXIgQ2FsbGlzdHJhdHVzIHdhcyBicm90aGVyIHRvIEV1Y3RlbW9uLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGtpbmcsIGFuZCB0byBQaGlsYWdydXMsIHRoZSBmYXRoZXIgb2YgRXVidWxpZGVzLCBhbmQgdGhhdCB0aGVzZSBtZW4gd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCBjb3VzaW5zIHRvIFBvbGVtb24gdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdG8gQ2hhcmlkZW11cywgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBUaGVvcG9tcHVzLCBhbmQgdGhhdCBoZSBoZWFyZCBmcm9tIGhpcyBtb3RoZXIgdGhhdCBQb2xlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEhhZ25pYXMsIGhhZCBubyBicm90aGVyLCBidXQgaGFkIGEgc2lzdGVyIFBoeWxvbWFjaMOqLAogICAgICAgICAgICAgICAgICAgICAgICBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUgbW90aGVyLCBhbmQgdGhhdCBQaGlsYWdydXMgbWFycmllZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCBhbmQgdGhleSBoYWQgYSBzb24gRXVidWxpZGVzLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgd2lmZSBvZiBTb3NpdGhldXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZmllcyB0aGF0IGhpcyBtb3RoZXIncyBmYXRoZXIgQ2FsbGlzdHJhdHVzIHdhcyBicm90aGVyIHRvIEV1Y3RlbW9uLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGtpbmcsIGFuZCB0byBQaGlsYWdydXMsIHRoZSBmYXRoZXIgb2YgRXVidWxpZGVzLCBhbmQgdGhhdCB0aGVzZSBtZW4gd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCBjb3VzaW5zIHRvIFBvbGVtb24gdGhlIGZhdGhlciBvZiBIYWduaWFzLCBhbmQgdG8gQ2hhcmlkZW11cywgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBUaGVvcG9tcHVzLCBhbmQgdGhhdCBoZSBoZWFyZCBmcm9tIGhpcyBtb3RoZXIgdGhhdCBQb2xlbW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyIG9mIEhhZ25pYXMsIGhhZCBubyBicm90aGVyLCBidXQgaGFkIGEgc2lzdGVyIFBoeWxvbWFjaMOqLAogICAgICAgICAgICAgICAgICAgICAgICBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgdGhlIHNhbWUgbW90aGVyLCBhbmQgdGhhdCBQaGlsYWdydXMgbWFycmllZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCBhbmQgdGhleSBoYWQgYSBzb24gRXVidWxpZGVzLCB0aGUgZmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBoeWxvbWFjaMOqLCB0aGUgd2lmZSBvZiBTb3NpdGhldXMuPC90cmFuc2xhdGlvbj4="
translation['43.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRvIHJlYWQgdGhlc2UgZGVwb3NpdGlvbnMsIG1lbiBvZiB0aGUganVyeSwgaW4gb3JkZXIgdGhhdCB3ZSBtaWdodCBub3QKICAgICAgICAgICAgICAgICAgICBzdWZmZXIgdGhlIHNhbWUgZXhwZXJpZW5jZSBhcyBiZWZvcmUsIGJ5IGJlaW5nIGNhdWdodCBieSB0aGVzZSBtZW4gdW5wcmVwYXJlZC4KICAgICAgICAgICAgICAgICAgICBCdXQgZmFyIG1vcmUgY29udmluY2luZyBldmVuIHRoYW4gdGhlc2Ugc2hhbGwgYmUgdGhlIHRlc3RpbW9ueSB0aGF0IE1hY2FydGF0dXMKICAgICAgICAgICAgICAgICAgICB3aWxsIGdpdmUgYWdhaW5zdCBoaW1zZWxmLCBwcm92aW5nIHRoYXQgbmVpdGhlciBoaXMgZmF0aGVyIFRoZW9wb21wdXMgbm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBoYXMgYW55IGNsYWltIHdoYXRldmVyIHRvIGluaGVyaXQgYW55dGhpbmcgZnJvbSBIYWduaWFzLCBUaGVvcG9tcHVzCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgbGVzcyBuZWFyIG9mIGtpbiwgYW5kIGJlbG9uZ2luZyB0byBxdWl0ZSBhIGRpZmZlcmVudCBicmFuY2ggb2YgdGhlIGZhbWlseS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc3VwcG9zZSBvbmUgc2hvdWxkIGFzaywgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIFdobyBpcyB0aGUgcGVyc29uIHdobyBkaXNwdXRlcyB0aGlzIGJveSdzIHRpdGxlIHRvIHRoZSBlc3RhdGUgb2YgSGFnbmlhcz8KICAgICAgICAgICAgICAgICAgICBJIGtub3cgd2VsbCB0aGF0IGhlIHdvdWxkIHNheSwgTWFjYXJ0YXR1cy4gQm9ybiBvZiB3aGF0IGZhdGhlcj8gVGhlb3BvbXB1cy4gQW5kCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hhdCBtb3RoZXI/IEFwb2xleGlzLCBkYXVnaHRlciBvZiBhIFByb3NwYWx0aWFuLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Qcm9zcGFsdGEgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWNhbWFudGlzLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgc2lzdGVyIG9mIE1hY2FydGF0dXMsIGFsc28gYSBQcm9zcGFsdGlhbi4gQW5kIHdobyB3YXMgdGhlIGZhdGhlciBvZiBUaGVvcG9tcHVzPwogICAgICAgICAgICAgICAgICAgIENoYXJpZGVtdXMuIEFuZCBvZiB3aG9tIHdhcyBDaGFyaWRlbXVzIHRoZSBzb24/IE9mIFN0cmF0aXVzLiBBbmQgb2Ygd2hvbQogICAgICAgICAgICAgICAgICAgIFN0cmF0aXVzPyBPZiBCdXNlbHVzLiBUaGlzLCBtZW4gb2YgdGhlIGp1cnksIGlzIHRoZSBicmFuY2ggb2YgU3RyYXRpdXMsIG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzb25zIG9mIEJ1c2VsdXM7IGFuZCB0aGVzZSB3aG9zZSBuYW1lcyB5b3UgaGF2ZSBoZWFyZCBhcmUgZGVzY2VuZGFudHMgb2YKICAgICAgICAgICAgICAgICAgICBTdHJhdGl1czsgYW5kIGFtb25nIHRoZW0gdGhlcmUgaXMgbm90IG9uZSBzaW5nbGUgbmFtZSBvZiB0aG9zZSBiZWxvbmdpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYnJhbmNoIG9mIEhhZ25pYXMsIG9yIGV2ZW4gb25lIHRoYXQgaXMgc2ltaWxhci4gPC90cmFuc2xhdGlvbj4="
translation['43.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgYWdhaW4gSSBzaGFsbCBxdWVzdGlvbiB0aGlzIGJveSwgYXNraW5nIHdobyBoZSBpcyB3aG8gY29udGVzdHMgdGhlIGNsYWltCiAgICAgICAgICAgICAgICAgICAgb2YgTWFjYXJ0YXR1cyB0byB0aGUgZXN0YXRlIG9mIEhhZ25pYXMuIFRoZSBib3kgY2FuIG1ha2Ugbm8gb3RoZXIgcG9zc2libGUKICAgICAgICAgICAgICAgICAgICBhbnN3ZXIsIG1lbiBvZiB0aGUganVyeSwgdGhhbiB0aGF0IGhlIGlzIEV1YnVsaWRlcy4gVGhlIHNvbiBvZiB3aGF0IGZhdGhlcj8gT2YKICAgICAgICAgICAgICAgICAgICBFdWJ1bGlkZXMsIHRoZSBjb3VzaW4gb2YgSGFnbmlhcy4gQW5kIG9mIHdoYXQgbW90aGVyPyBPZiBQaHlsb21hY2jDqiwKICAgICAgICAgICAgICAgICAgICB3aG8gd2FzIHRoZSBkYXVnaHRlciBvZiBhIGZpcnN0IGNvdXNpbiB0byBIYWduaWFzIG9uIHRoZSBmYXRoZXIncyBzaWRlLiBCdXQgb2YKICAgICAgICAgICAgICAgICAgICB3aG9tIHdhcyBFdWJ1bGlkZXMgdGhlIHNvbj8gT2YgUGhpbGFncnVzLCB0aGUgY291c2luIG9mIEhhZ25pYXMuIEFuZCBvZiB3aGF0CiAgICAgICAgICAgICAgICAgICAgbW90aGVyPyBPZiBQaHlsb21hY2jDqiwgdGhlIGF1bnQgb2YgSGFnbmlhcy4gPC90cmFuc2xhdGlvbj4="
translation['43.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgb2Ygd2hvbSB3YXMgSGFnbmlhcyB0aGUgc29uPyBPZiBQb2xlbW9uLiBBbmQgb2Ygd2hvbSBQb2xlbW9uPyBPZgogICAgICAgICAgICAgICAgICAgIEhhZ25pYXMuIEFuZCBvZiB3aG9tIEhhZ25pYXM/IE9mIEJ1c2VsdXMuIFRoaXMgaXMgYW5vdGhlciBicmFuY2gsIHRoYXQgb2YKICAgICAgICAgICAgICAgICAgICBIYWduaWFzLCBvbmUgb2YgdGhlIHNvbnMgb2YgQnVzZWx1cywgYW5kIGhlcmUgdGhlcmUgb2NjdXJzIG5vdCBhIHNpbmdsZSBuYW1lCiAgICAgICAgICAgICAgICAgICAgaWRlbnRpY2FsIHdpdGggdGhvc2Ugb2YgdGhlIGRlc2NlbmRhbnRzIGluIHRoZSBicmFuY2ggb2YgU3RyYXRpdXMsIG9yIGV2ZW4gb25lCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBzaW1pbGFyOyBidXQgdGhleSBwcm9jZWVkIGluIHRoZSBicmFuY2ggb2YgSGFnbmlhcyB3aXRoIHRoZWlyIG93biBzZXJpZXMKICAgICAgICAgICAgICAgICAgICBvZiBuYW1lcywgcmVjZWl2aW5nIHRoZW0gZnJvbSBvbmUgYW5vdGhlci4gSW4gZXZlcnkgcmVzcGVjdCwgdGhlbiwgYW5kIGluIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgd2F5IGl0IGlzIHByb3ZlZCB0aGF0IHRoZXNlIG1lbiBiZWxvbmcgdG8gYW5vdGhlciBicmFuY2ggb2YgdGhlIGZhbWlseSBhbmQgYXJlCiAgICAgICAgICAgICAgICAgICAgbW9yZSByZW1vdGUgb2Yga2luLCBhbmQgdGhhdCB0aGV5IGFyZSBub3QgZW50aXRsZWQgdG8gaW5oZXJpdCBhbnl0aGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUgb2YgSGFnbmlhcy4gRm9yIHRvIHNob3cgeW91IHRvIHdob20gdGhlIGxhdy1naXZlciBncmFudHMgdGhlIHJpZ2h0IG9mCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2lvbiBhbmQgaW5oZXJpdGFuY2UsIHRoZSBjbGVyayB3aWxsIHJlYWQgeW91IHRoZXNlIGxhd3MuIDwvdHJhbnNsYXRpb24+"
translation['43.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW5ldmVyIGEgbWFuIGRpZXMgd2l0aG91dCBtYWtpbmcgYSB3aWxsLCBpZiBoZSBsZWF2ZXMKICAgICAgICAgICAgICAgICAgICAgICAgZmVtYWxlIGNoaWxkcmVuIGhpcyBlc3RhdGUgc2hhbGwgZ28gd2l0aCB0aGVtLCBidXQgaWYgbm90LCB0aGUgcGVyc29ucwogICAgICAgICAgICAgICAgICAgICAgICBoZXJlaW4gbWVudGlvbmVkIHNoYWxsIGJlIGVudGl0bGVkIHRvIGhpcyBwcm9wZXJ0eTogaWYgdGhlcmUgYmUgYnJvdGhlcnMgYnkKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgZmF0aGVyLCBhbmQgaWYgdGhlcmUgYmUgbGF3ZnVsbHkgYm9ybiBzb25zIG9mIGJyb3RoZXJzLCB0aGV5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRha2UgdGhlIHNoYXJlIG9mIHRoZSBmYXRoZXIuIEJ1dCBpZiB0aGVyZSBhcmUgbm8gYnJvdGhlcnMgb3Igc29ucyBvZgogICAgICAgICAgICAgICAgICAgICAgICBicm90aGVycywgdGhlaXIgZGVzY2VuZGFudHMgc2hhbGwgaW5oZXJpdCBpdCBpbiBsaWtlIG1hbm5lcjsgYnV0IG1hbGVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc29ucyBvZiBtYWxlcyBzaGFsbCB0YWtlIHByZWNlZGVuY2UsIGlmIHRoZXkgYXJlIG9mIHRoZSBzYW1lIGFuY2VzdG9ycywKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbiB0aG91Z2ggdGhleSBiZSBtb3JlIHJlbW90ZSBvZiBraW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCBpcyBub3Qgd2hvbGx5IGNlcnRhaW4sIGFuZCB0aGUgcHJlY2lzZSBtZWFuaW5nIGlzIHRoZXJlZm9yZSBvcGVuIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJhdGUuIFRoZSBsYXcgaXMgcXVvdGVkIGFsc28gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNhZXVzIDcuMjAiIHZhbGlkPSJ5ZXMiPklzYWV1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcuMjA8L2JpYmw+LCB3aGVyZSB0aGUgbm90ZSBvZiBXeXNlIHNob3VsZCBiZSBjb25zdWx0ZWQuIFNlZSBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+TWVpZXIgYW5kIFNjaMO2bWFubiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVyIEF0dGlzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvY2VzczwvdGl0bGU+LCBwLiA1ODY8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+U2F2YWdlLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gRmFtaWx5PC90aXRsZT4sIHBwLiAxMjggZmYuPC9iaWJsPjwvbm90ZT4gSWYgdGhlcmUgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgIG5vIHJlbGF0aXZlcyBvbiB0aGUgZmF0aGVyJ3Mgc2lkZSB3aXRoaW4gdGhlIGRlZ3JlZSBvZiBjaGlsZHJlbiBvZiBjb3VzaW5zLAogICAgICAgICAgICAgICAgICAgICAgICB0aG9zZSBvbiB0aGUgbW90aGVyJ3Mgc2lkZSBzaGFsbCBpbmhlcml0IGluIGxpa2UgbWFubmVyLiBCdXQgaWYgdGhlcmUgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgYmUgbm8gcmVsYXRpdmVzIG9uIGVpdGhlciBzaWRlIHdpdGhpbiB0aGUgZGVncmVlIG1lbnRpb25lZCwgdGhlIG5lYXJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAga2luIG9uIHRoZSBmYXRoZXIncyBzaWRlIHNoYWxsIGluaGVyaXQuIEJ1dCBubyBpbGxlZ2l0aW1hdGUgY2hpbGQgb2YgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHNleCBzaGFsbCBoYXZlIHRoZSByaWdodCBvZiBzdWNjZXNzaW9uIGVpdGhlciB0byByZWxpZ2lvdXMgcml0ZXMgb3IgY2l2aWMKICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlcywgZnJvbSB0aGUgdGltZSBvZiB0aGUgYXJjaG9uc2hpcCBvZiBFdWNsZWlkZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIGluIDxkYXRlIGF1dGhuYW1lPSItNDAzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDAzIj40MDM8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy48L25vdGU+PC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuZXZlciBhIG1hbiBkaWVzIHdpdGhvdXQgbWFraW5nIGEgd2lsbCwgaWYgaGUgbGVhdmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGZlbWFsZSBjaGlsZHJlbiBoaXMgZXN0YXRlIHNoYWxsIGdvIHdpdGggdGhlbSwgYnV0IGlmIG5vdCwgdGhlIHBlcnNvbnMKICAgICAgICAgICAgICAgICAgICAgICAgaGVyZWluIG1lbnRpb25lZCBzaGFsbCBiZSBlbnRpdGxlZCB0byBoaXMgcHJvcGVydHk6IGlmIHRoZXJlIGJlIGJyb3RoZXJzIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGZhdGhlciwgYW5kIGlmIHRoZXJlIGJlIGxhd2Z1bGx5IGJvcm4gc29ucyBvZiBicm90aGVycywgdGhleSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBzaGFyZSBvZiB0aGUgZmF0aGVyLiBCdXQgaWYgdGhlcmUgYXJlIG5vIGJyb3RoZXJzIG9yIHNvbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdGhlcnMsIHRoZWlyIGRlc2NlbmRhbnRzIHNoYWxsIGluaGVyaXQgaXQgaW4gbGlrZSBtYW5uZXI7IGJ1dCBtYWxlcyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNvbnMgb2YgbWFsZXMgc2hhbGwgdGFrZSBwcmVjZWRlbmNlLCBpZiB0aGV5IGFyZSBvZiB0aGUgc2FtZSBhbmNlc3RvcnMsCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhvdWdoIHRoZXkgYmUgbW9yZSByZW1vdGUgb2Yga2luLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgaXMgbm90IHdob2xseSBjZXJ0YWluLCBhbmQgdGhlIHByZWNpc2UgbWVhbmluZyBpcyB0aGVyZWZvcmUgb3BlbiB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGViYXRlLiBUaGUgbGF3IGlzIHF1b3RlZCBhbHNvIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IklzYWV1cyA3LjIwIiB2YWxpZD0ieWVzIj5Jc2FldXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA3LjIwPC9iaWJsPiwgd2hlcmUgdGhlIG5vdGUgb2YgV3lzZSBzaG91bGQgYmUgY29uc3VsdGVkLiBTZWUgYWxzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPk1laWVyIGFuZCBTY2jDtm1hbm4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlciBBdHRpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3M8L3RpdGxlPiwgcC4gNTg2PC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPlNhdmFnZSwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIEZhbWlseTwvdGl0bGU+LCBwcC4gMTI4IGZmLjwvYmlibD48L25vdGU+IElmIHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgICAgICBubyByZWxhdGl2ZXMgb24gdGhlIGZhdGhlcidzIHNpZGUgd2l0aGluIHRoZSBkZWdyZWUgb2YgY2hpbGRyZW4gb2YgY291c2lucywKICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2Ugb24gdGhlIG1vdGhlcidzIHNpZGUgc2hhbGwgaW5oZXJpdCBpbiBsaWtlIG1hbm5lci4gQnV0IGlmIHRoZXJlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIG5vIHJlbGF0aXZlcyBvbiBlaXRoZXIgc2lkZSB3aXRoaW4gdGhlIGRlZ3JlZSBtZW50aW9uZWQsIHRoZSBuZWFyZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbiBvbiB0aGUgZmF0aGVyJ3Mgc2lkZSBzaGFsbCBpbmhlcml0LiBCdXQgbm8gaWxsZWdpdGltYXRlIGNoaWxkIG9mIGVpdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBzZXggc2hhbGwgaGF2ZSB0aGUgcmlnaHQgb2Ygc3VjY2Vzc2lvbiBlaXRoZXIgdG8gcmVsaWdpb3VzIHJpdGVzIG9yIGNpdmljCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZXMsIGZyb20gdGhlIHRpbWUgb2YgdGhlIGFyY2hvbnNoaXAgb2YgRXVjbGVpZGVzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IklzYWV1cyA3LjIwIiB2YWxpZD0ieWVzIj5Jc2FldXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA3LjIwPC9iaWJsPiwgd2hlcmUgdGhlIG5vdGUgb2YgV3lzZSBzaG91bGQgYmUgY29uc3VsdGVkLiBTZWUgYWxzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPk1laWVyIGFuZCBTY2jDtm1hbm4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlciBBdHRpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3M8L3RpdGxlPiwgcC4gNTg2PC9iaWJsPiwgYW5kIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlciBBdHRpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3M8L3RpdGxlPiwgcC4gNTg2PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+U2F2YWdlLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gRmFtaWx5PC90aXRsZT4sIHBwLiAxMjggZmYuPC9iaWJsPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiBGYW1pbHk8L3RpdGxlPiwgcHAuIDEyOCBmZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgaW4gPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLjwvbm90ZT48ZGF0ZSBhdXRobmFtZT0iLTQwMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQwMyI+NDAzPC9kYXRlPgogICAgICAgICAgICAgICAgICAgICAgICBCLkMuPC90cmFuc2xhdGlvbj4="
translation['43.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGxhdywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGV4cHJlc3NseSBkZWNsYXJlcyB0byB3aG9tIHRoZSBpbmhlcml0YW5jZSBzaGFsbCBnby4gTm90LCBieSBIZWF2ZW4sCiAgICAgICAgICAgICAgICAgICAgdG8gVGhlb3BvbXB1cyBub3IgdG8gTWFjYXJ0YXR1cywgdGhlIHNvbiBvZiBUaGVvcG9tcHVzLCB3aG8gYXJlIGluIG5vIHNlbnNlCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgb2YgdGhlIGZhbWlseSBvZiBIYWduaWFzLiBCdXQgdG8gd2hvbSBkb2VzIGl0IGdpdmUgdGhlIGluaGVyaXRhbmNlPyBUbwogICAgICAgICAgICAgICAgICAgIHRoZSBkZXNjZW5kYW50cyBvZiBIYWduaWFzLCB0byB0aG9zZSB3aG8gYXJlIGluIGhpcyBicmFuY2ggb2YgdGhlIGZhbWlseS4gVGhpcwogICAgICAgICAgICAgICAgICAgIGlzIHdoYXQgdGhlIGxhdyBzYXlzLCBhbmQgdGhpcyBpcyB3aGF0IGp1c3RpY2UgZGVtYW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['43.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCB0aGVuLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgdGhlIGxhdy1naXZlciBoYXMgbm90IGdpdmVuIHRoZXNlIHJpZ2h0cyB0byB0aGUgcmVsYXRpdmVzIHdpdGhvdXQgaW1wb3NpbmcKICAgICAgICAgICAgICAgICAgICB1cG9uIHRoZW0gaW4gdGhlIGxhdyBhIGxhcmdlIG51bWJlciBvZiBkdXRpZXMsIHdoaWNoIHRoZSByZWxhdGl2ZXMgbXVzdCBvZgogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2l0eSBwZXJmb3JtLiBObzsgdGhlcmUgYXJlIGZ1bGwgbWFueSBvYmxpZ2F0aW9ucyBsYWlkIHVwb24gdGhlIHJlbGF0aXZlcwogICAgICAgICAgICAgICAgICAgIHRvIHBlcmZvcm0gZm9yIHdoaWNoIHRoZSBsYXcgYWRtaXRzIG9mIG5vIGV4Y3VzZTsgdGhleSBtdXN0IGFic29sdXRlbHkgYmUKICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQsIHByZWZlcmFibHksIHJlYWQgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIGl0c2VsZuKAlHRoZSBmaXJzdCBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['43.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHJlZ2FyZCB0byBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgaGVpcmVzc2VzIHdobyBhcmUgY2xhc3NpZmllZCBhcyBUaGV0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNvbG9uIGhhZCBkaXZpZGVkIHRoZSBwZW9wbGUgaW50byBmb3VyIGNsYXNzZXM6IO+8iDHvvIkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRob3NlIHdobyByZWNlaXZlZCBmcm9tIHRoZWlyIGxhbmQgYW4gaW5jb21lIG9mIGZpdmUgaHVuZHJlZCBtZWFzdXJlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFybGV5IG9yIHdpbmUuIFRoZXNlIHdlcmUgY2FsbGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCcUGVudGFjb3Npb21lZGltaW5pLOKAnSBvciDigJxmaXZlIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmUgbWVuLuKAnSDvvIgy77yJIHRob3NlIHdobyByZWNlaXZlZCB0aHJlZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBtZWFzdXJlcy4gVGhlc2Ugd2VyZSBhc3N1bWVkIHRvIGJlIGFibGUgdG8gZnVybmlzaCBhIGhvcnNlIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFybXksIGFuZCB3ZXJlIHRoZXJlZm9yZSBjYWxsZWQg4oCcS25pZ2h0cy7igJ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDPvvIlUaG9zZSB3aG8gcmVjZWl2ZWQgdHdvIGh1bmRyZWQgbWVhc3VyZXMuIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VsZCBwcmVzdW1hYmx5IG93biBhIHlva2Ugb2Ygb3hlbiBhbmQgd2VyZSBjYWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAnFpldWdpdGFlLOKAnSBvciDigJxZb2xrLW1lbi7igJ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDTvvIkgdGhvc2UgcmVjZWl2aW5nIGxlc3MsIG9yIGhhdmluZyBubyBwcm9wZXJ0eSBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZC4gVGhlc2Ugd2VyZSBjYWxsZWQg4oCcVGhldGVzLOKAnSBpLmUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDigJxMYWJvcmVyc+KAnSBvciDigJxTZXJmcy7igJ08L25vdGU+IGlmCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBuZWFyZXN0IG9mIGtpbiBkb2VzIG5vdCB3aXNoIHRvIG1hcnJ5IG9uZSwgbGV0IGhpbSBnaXZlIGhlciBpbiBtYXJyaWFnZQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGEgcG9ydGlvbiBvZiBmaXZlIGh1bmRyZWQgZHJhY2htYWUsIGlmIGhlIGJlIG9mIHRoZSBjbGFzcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBQZW50YWNvc2lvbWVkaW1uaSwgaWYgb2YgdGhlIGNsYXNzIG9mIEtuaWdodHMsIHdpdGggYSBwb3J0aW9uIG9mIHRocmVlCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bmRyZWQsIGFuZCBpZiBvZiB0aGUgY2xhc3Mgb2YgWmV1Z2l0YWUsIHdpdGggb25lIGh1bmRyZWQgYW5kIGZpZnR5LCBpbgogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiB0byB3aGF0IGlzIGhlciBvd24uIElmIHRoZXJlIGFyZSBzZXZlcmFsIGtpbnNtZW4gaW4gdGhlIHNhbWUgZGVncmVlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHJlbGF0aW9uc2hpcCwgZWFjaCBvbmUgb2YgdGhlbSBzaGFsbCBjb250cmlidXRlIHRvIHRoZSBwb3J0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBoZWlyZXNzIGFjY29yZGluZyB0byBoaXMgZHVlIHNoYXJlLiBBbmQgaWYgdGhlcmUgYmUgc2V2ZXJhbCBoZWlyZXNzZXMsIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIG5vdCBiZSBuZWNlc3NhcnkgZm9yIGEgc2luZ2xlIGtpbnNtYW4gdG8gZ2l2ZSBpbiBtYXJyaWFnZSBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgb25lLCBidXQgdGhlIG5leHQgb2Yga2luIHNoYWxsIGluIGVhY2ggY2FzZSBnaXZlIGhlciBpbiBtYXJyaWFnZSBvciBtYXJyeQogICAgICAgICAgICAgICAgICAgICAgICBoZXIgaGltc2VsZi4gQW5kIGlmIHRoZSBuZWFyZXN0IG9mIGtpbiBkb2VzIG5vdCBtYXJyeSBoZXIgb3IgZ2l2ZSBoZXIgaW4KICAgICAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UsIHRoZSBhcmNob24gc2hhbGwgY29tcGVsIGhpbSBlaXRoZXIgdG8gbWFycnkgaGVyIGhpbXNlbGYgb3IgZ2l2ZQogICAgICAgICAgICAgICAgICAgICAgICBoZXIgaW4gbWFycmlhZ2UuIEFuZCBpZiB0aGUgYXJjaG9uIHNoYWxsIG5vdCBjb21wZWwgaGltLCBsZXQgaGltIGJlIGZpbmVkIGEKICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgZHJhY2htYWUsIHdoaWNoIGFyZSB0byBiZSBjb25zZWNyYXRlIHRvIEhlcmEuIEFuZCBsZXQgYW55IHBlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICB3aG8gY2hvb3NlcyBkZW5vdW5jZSB0byB0aGUgYXJjaG9uIGFueSBwZXJzb24gd2hvIGRpc29iZXlzIHRoaXMgbGF3LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gcmVnYXJkIHRvIGFsbAogICAgICAgICAgICAgICAgICAgICAgICBoZWlyZXNzZXMgd2hvIGFyZSBjbGFzc2lmaWVkIGFzIFRoZXRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U29sb24gaGFkIGRpdmlkZWQgdGhlIHBlb3BsZSBpbnRvIGZvdXIgY2xhc3Nlczog77yIMe+8iQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhvc2Ugd2hvIHJlY2VpdmVkIGZyb20gdGhlaXIgbGFuZCBhbiBpbmNvbWUgb2YgZml2ZSBodW5kcmVkIG1lYXN1cmVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJsZXkgb3Igd2luZS4gVGhlc2Ugd2VyZSBjYWxsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDigJxQZW50YWNvc2lvbWVkaW1pbmks4oCdIG9yIOKAnGZpdmUgaHVuZHJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSBtZW4u4oCdIO+8iDLvvIkgdGhvc2Ugd2hvIHJlY2VpdmVkIHRocmVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodW5kcmVkIG1lYXN1cmVzLiBUaGVzZSB3ZXJlIGFzc3VtZWQgdG8gYmUgYWJsZSB0byBmdXJuaXNoIGEgaG9yc2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgYXJteSwgYW5kIHdlcmUgdGhlcmVmb3JlIGNhbGxlZCDigJxLbmlnaHRzLuKAnQogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIM++8iVRob3NlIHdobyByZWNlaXZlZCB0d28gaHVuZHJlZCBtZWFzdXJlcy4gVGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdWxkIHByZXN1bWFibHkgb3duIGEgeW9rZSBvZiBveGVuIGFuZCB3ZXJlIGNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCcWmV1Z2l0YWUs4oCdIG9yIOKAnFlvbGstbWVuLuKAnQogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yINO+8iSB0aG9zZSByZWNlaXZpbmcgbGVzcywgb3IgaGF2aW5nIG5vIHByb3BlcnR5IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5kLiBUaGVzZSB3ZXJlIGNhbGxlZCDigJxUaGV0ZXMs4oCdIGkuZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAnExhYm9yZXJz4oCdIG9yIOKAnFNlcmZzLuKAnTwvbm90ZT4gaWYKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5lYXJlc3Qgb2Yga2luIGRvZXMgbm90IHdpc2ggdG8gbWFycnkgb25lLCBsZXQgaGltIGdpdmUgaGVyIGluIG1hcnJpYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggYSBwb3J0aW9uIG9mIGZpdmUgaHVuZHJlZCBkcmFjaG1hZSwgaWYgaGUgYmUgb2YgdGhlIGNsYXNzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBlbnRhY29zaW9tZWRpbW5pLCBpZiBvZiB0aGUgY2xhc3Mgb2YgS25pZ2h0cywgd2l0aCBhIHBvcnRpb24gb2YgdGhyZWUKICAgICAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCwgYW5kIGlmIG9mIHRoZSBjbGFzcyBvZiBaZXVnaXRhZSwgd2l0aCBvbmUgaHVuZHJlZCBhbmQgZmlmdHksIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uIHRvIHdoYXQgaXMgaGVyIG93bi4gSWYgdGhlcmUgYXJlIHNldmVyYWwga2luc21lbiBpbiB0aGUgc2FtZSBkZWdyZWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgcmVsYXRpb25zaGlwLCBlYWNoIG9uZSBvZiB0aGVtIHNoYWxsIGNvbnRyaWJ1dGUgdG8gdGhlIHBvcnRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaXJlc3MgYWNjb3JkaW5nIHRvIGhpcyBkdWUgc2hhcmUuIEFuZCBpZiB0aGVyZSBiZSBzZXZlcmFsIGhlaXJlc3NlcywgaXQKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgbm90IGJlIG5lY2Vzc2FyeSBmb3IgYSBzaW5nbGUga2luc21hbiB0byBnaXZlIGluIG1hcnJpYWdlIG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgICAgICBvbmUsIGJ1dCB0aGUgbmV4dCBvZiBraW4gc2hhbGwgaW4gZWFjaCBjYXNlIGdpdmUgaGVyIGluIG1hcnJpYWdlIG9yIG1hcnJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGhlciBoaW1zZWxmLiBBbmQgaWYgdGhlIG5lYXJlc3Qgb2Yga2luIGRvZXMgbm90IG1hcnJ5IGhlciBvciBnaXZlIGhlciBpbgogICAgICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZSwgdGhlIGFyY2hvbiBzaGFsbCBjb21wZWwgaGltIGVpdGhlciB0byBtYXJyeSBoZXIgaGltc2VsZiBvciBnaXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlciBpbiBtYXJyaWFnZS4gQW5kIGlmIHRoZSBhcmNob24gc2hhbGwgbm90IGNvbXBlbCBoaW0sIGxldCBoaW0gYmUgZmluZWQgYQogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hZSwgd2hpY2ggYXJlIHRvIGJlIGNvbnNlY3JhdGUgdG8gSGVyYS4gQW5kIGxldCBhbnkgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgIHdobyBjaG9vc2VzIGRlbm91bmNlIHRvIHRoZSBhcmNob24gYW55IHBlcnNvbiB3aG8gZGlzb2JleXMgdGhpcyBsYXcuPC90cmFuc2xhdGlvbj4="
translation['43.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgc2F5cywgbWVuIG9mIHRoZSBqdXJ5LiBCdXQgd2hlbiBpdCBiZWNhbWUgbmVjZXNzYXJ5IHRvIHN1ZSBmb3IgdGhlIGhhbmQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgaGVpcmVzcyBQaHlsb21hY2jDqiwgdGhlIG1vdGhlciBvZiB0aGlzIGJveSBhbmQgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IGNvdXNpbiBvZiBIYWduaWFzIG9uIGhpcyBmYXRoZXIncyBzaWRlLCBJIGNhbWUgZm9yd2FyZCBvdXQgb2YgcmVzcGVjdAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgbGF3IGFuZCBwcmVmZXJyZWQgbXkgc3VpdCBhcyBiZWluZyBuZXh0IG9mIGtpbjsgYnV0IFRoZW9wb21wdXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiBNYWNhcnRhdHVzLCBuZWl0aGVyIGNhbWUgZm9yd2FyZCBub3IgaW4gYW55IHdheSBkaXNwdXRlZCBteSBjbGFpbSwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIGhhZCBubyBzZW1ibGFuY2Ugb2YgcmlnaHQsIGFsdGhvdWdoIGhlIHdhcyBvZiB0aGUgc2FtZSBhZ2UgYXMgc2hlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBtZW4gb2YgdGhlIGp1cnksIGhvdyBjYW4geW91IGZhaWwKICAgICAgICAgICAgICAgICAgICB0byB0aGluayBpdCBzdHJhbmdlIHRoYXQgVGhlb3BvbXB1cyBuZXZlciBtYWRlIGFueSBjbGFpbSBmb3IgdGhlIGhhbmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaGVpcmVzcywgd2hvIHdhcyB0aGUgZGF1Z2h0ZXIgb2YgdGhlIGZpcnN0IGNvdXNpbiBvZiBIYWduaWFzIG9uIGhpcyBmYXRoZXIncwogICAgICAgICAgICAgICAgICAgIHNpZGUsIGFuZCB5ZXQgZGVtYW5kcyB0byBoYXZlIHRoZSBlc3RhdGUgb2YgSGFnbmlhcyBjb250cmFyeSB0byB0aGUgbGF3cz8gQ291bGQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBiZSBwZXJzb25zIG1vcmUgc2hhbWVsZXNzIG9yIG1vcmUgYWJvbWluYWJsZSB0aGFuIHRoZXNlPzxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBvdGhlciBsYXdzIGFsc28uIDwvdHJhbnNsYXRpb24+"
translation['43.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXdzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UHJvY2xhbWF0aW9uIHNoYWxsIGJlIG1hZGUgaW4gdGhlIG1hcmtldC1wbGFjZSB0byB0aGUgc2hlZGRlciBvZiBibG9vZCBieQogICAgICAgICAgICAgICAgICAgICAgICBhIGtpbnNtYW4gd2l0aGluIHRoZSBkZWdyZWUgb2YgY291c2luIGFuZCBjb3VzaW5zaGlwLCBhbmQgY291c2lucyBhbmQgc29ucwogICAgICAgICAgICAgICAgICAgICAgICBvZiBjb3VzaW5zIGFuZCBzb25zLWluLWxhdyBhbmQgZmF0aGVycy1pbi1sYXcgYW5kIGNsYW5zbWVuIHNoYWxsIGpvaW4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHB1cnN1aXQuIFRvIHNlY3VyZSBjb25kb25hdGlvbiwgaWYgdGhlcmUgYmUgZmF0aGVyIG9yIGJyb3RoZXIgb3Igc29ucywgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIG11c3QgY29uY3VyLCBvciB3aG9ldmVyIG9wcG9zZXMgc2hhbGwgcHJldmFpbC4gQW5kIGlmIHRoZXJlIGJlIG5vbmUgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzbGF5aW5nIHdhcyBpbnZvbHVudGFyeSwgYW5kIHRoZSBGaWZ0eS1vbmUsIHRoZSBFcGhldGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgRXBoZXRhZSBmb3JtZWQgYSBjb3VydCBvZiBmaWZ0eS1vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vYmxlcyDvvIhFdXBhdHJpZGFl77yJIGhhdmluZyBqdXJpc2RpY3Rpb24gb3ZlciBjYXNlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9taWNpZGUuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTciIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU3PC9iaWJsPiwgd2l0aCBTYW5keXMncyBub3RlLjwvbm90ZT4gc2hhbGwgYWdyZWUgdGhhdCB0aGUgc2xheWluZwogICAgICAgICAgICAgICAgICAgICAgICB3YXMgaW52b2x1bnRhcnksIGxldCB0aGUgY2xhbnNtZW4sIHRlbiBpbiBudW1iZXIsIGdyYW50IHRoZSByaWdodCBvZgogICAgICAgICAgICAgICAgICAgICAgICBlbnRyYW5jZSB0byB0aGUgc2hlZGRlciBvZiBibG9vZCwgaWYgdGhleSBzZWUgZml0OyBhbmQgbGV0IHRoZXNlIGJlIGNob3NlbgogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgRmlmdHktb25lIGFjY29yZGluZyB0byByYW5rLiBBbmQgdGhvc2Ugd2hvIGhhZCBzaGVkIGJsb29kIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZW5hY3RtZW50IG9mIHRoaXMgc3RhdHV0ZSBzaGFsbCBiZSBib3VuZCBieSBpdHMgcHJvdmlzaW9ucy7igJRBbmQKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBwZXJzb25zIGRpZSBpbiB0aGUgZGVtZXMgYW5kIG5vIG9uZSB0YWtlcyB0aGVtIHVwIGZvciBidXJpYWwsIGxldCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgRGVtYXJjaCBnaXZlIG5vdGljZSB0byB0aGUgcmVsYXRpdmVzIHRvIHRha2UgdGhlbSB1cCBhbmQgYnVyeSB0aGVtLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcHVyaWZ5IHRoZSBkZW1lIG9uIHRoZSBkYXkgb24gd2hpY2ggZWFjaCBvZiB0aGVtIGRpZXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UHJvY2xhbWF0aW9uIHNoYWxsIGJlIG1hZGUgaW4gdGhlIG1hcmtldC1wbGFjZSB0byB0aGUgc2hlZGRlciBvZiBibG9vZCBieQogICAgICAgICAgICAgICAgICAgICAgICBhIGtpbnNtYW4gd2l0aGluIHRoZSBkZWdyZWUgb2YgY291c2luIGFuZCBjb3VzaW5zaGlwLCBhbmQgY291c2lucyBhbmQgc29ucwogICAgICAgICAgICAgICAgICAgICAgICBvZiBjb3VzaW5zIGFuZCBzb25zLWluLWxhdyBhbmQgZmF0aGVycy1pbi1sYXcgYW5kIGNsYW5zbWVuIHNoYWxsIGpvaW4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHB1cnN1aXQuIFRvIHNlY3VyZSBjb25kb25hdGlvbiwgaWYgdGhlcmUgYmUgZmF0aGVyIG9yIGJyb3RoZXIgb3Igc29ucywgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIG11c3QgY29uY3VyLCBvciB3aG9ldmVyIG9wcG9zZXMgc2hhbGwgcHJldmFpbC4gQW5kIGlmIHRoZXJlIGJlIG5vbmUgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzbGF5aW5nIHdhcyBpbnZvbHVudGFyeSwgYW5kIHRoZSBGaWZ0eS1vbmUsIHRoZSBFcGhldGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgRXBoZXRhZSBmb3JtZWQgYSBjb3VydCBvZiBmaWZ0eS1vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vYmxlcyDvvIhFdXBhdHJpZGFl77yJIGhhdmluZyBqdXJpc2RpY3Rpb24gb3ZlciBjYXNlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9taWNpZGUuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTciIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU3PC9iaWJsPiwgd2l0aCBTYW5keXMncyBub3RlLjwvbm90ZT4gc2hhbGwgYWdyZWUgdGhhdCB0aGUgc2xheWluZwogICAgICAgICAgICAgICAgICAgICAgICB3YXMgaW52b2x1bnRhcnksIGxldCB0aGUgY2xhbnNtZW4sIHRlbiBpbiBudW1iZXIsIGdyYW50IHRoZSByaWdodCBvZgogICAgICAgICAgICAgICAgICAgICAgICBlbnRyYW5jZSB0byB0aGUgc2hlZGRlciBvZiBibG9vZCwgaWYgdGhleSBzZWUgZml0OyBhbmQgbGV0IHRoZXNlIGJlIGNob3NlbgogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgRmlmdHktb25lIGFjY29yZGluZyB0byByYW5rLiBBbmQgdGhvc2Ugd2hvIGhhZCBzaGVkIGJsb29kIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZW5hY3RtZW50IG9mIHRoaXMgc3RhdHV0ZSBzaGFsbCBiZSBib3VuZCBieSBpdHMgcHJvdmlzaW9ucy7igJRBbmQKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBwZXJzb25zIGRpZSBpbiB0aGUgZGVtZXMgYW5kIG5vIG9uZSB0YWtlcyB0aGVtIHVwIGZvciBidXJpYWwsIGxldCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgRGVtYXJjaCBnaXZlIG5vdGljZSB0byB0aGUgcmVsYXRpdmVzIHRvIHRha2UgdGhlbSB1cCBhbmQgYnVyeSB0aGVtLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcHVyaWZ5IHRoZSBkZW1lIG9uIHRoZSBkYXkgb24gd2hpY2ggZWFjaCBvZiB0aGVtIGRpZXMuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDU3IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguIFBvbC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NzwvYmlibD4sIHdpdGggU2FuZHlzJ3Mgbm90ZS48L3RyYW5zbGF0aW9uPg=="
translation['43.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPkluIHRoZSBjYXNlIG9mIHNsYXZlcwogICAgICAgICAgICAgICAgICAgICAgICBoZSBzaGFsbCBnaXZlIG5vdGljZSB0byB0aGVpciBtYXN0ZXJzLCBhbmQgaW4gdGhlIGNhc2Ugb2YgZnJlZW1lbiB0byB0aG9zZQogICAgICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW5nIHRoZWlyIHByb3BlcnR5OyBhbmQgaWYgdGhlIGRlY2Vhc2VkIGhhZCBubyBwcm9wZXJ0eSwgdGhlIERlbWFyY2gKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgZ2l2ZSBub3RpY2UgdG8gdGhlIHJlbGF0aXZlcyBvZiB0aGUgZGVjZWFzZWQuIEFuZCBpZiwgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIERlbWFyY2ggc2hhbGwgaGF2ZSBnaXZlbiBub3RpY2UsIHRoZSByZWxhdGl2ZXMgZG8gbm90IHRha2UgdXAgdGhlIGJvZHksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBEZW1hcmNoIHNoYWxsIGNvbnRyYWN0IGZvciB0aGUgdGFraW5nIHVwIGFuZCBidXJpYWwgb2YgdGhlIGJvZHksIGFuZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHB1cmlmaWNhdGlvbiBvZiB0aGUgZGVtZSBvbiB0aGUgc2FtZSBkYXkgYXQgdGhlIGxvd2VzdCBwb3NzaWJsZSBjb3N0LiBBbmQgaWYKICAgICAgICAgICAgICAgICAgICAgICAgaGUgc2hhbGwgbm90IHNvIGNvbnRyYWN0LCBoZSBzaGFsbCBiZSBib3VuZCB0byBwYXkgYSB0aG91c2FuZCBkcmFjaG1hZSBpbnRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWMgdHJlYXN1cnkuIEFuZCB3aGF0c29ldmVyIGhlIHNoYWxsIGV4cGVuZCwgaGUgc2hhbGwgZXhhY3QgZG91YmxlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhbW91bnQgZnJvbSB0aG9zZSBsaWFibGU7IGFuZCBpZiBoZSBkb2VzIG5vdCBleGFjdCBpdCBoZSBzaGFsbCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIHVuZGVyIG9ibGlnYXRpb24gdG8gcmVwYXkgaXQgdG8gdGhlIGRlbWVzbWVuLiBBbmQgdGhvc2Ugd2hvIGRvIG5vdCBwYXkKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlbnRzIGR1ZSBmb3IgdGhlIGxhbmRzIG9mIHRoZSBnb2RkZXNzIG9yIG9mIHRoZSBnb2RzIGFuZCB0aGUgZXBvbnltb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9lcyBzaGFsbCBiZSBkaXNlbmZyYW5jaGlzZWQsIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGZhbWlseSBhbmQgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpcnMsIHVudGlsIHRoZXkgc2hhbGwgbWFrZSBwYXltZW50LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZHV0aWVzIHdoaWNoIHRoZSBsYXdzIGxheSB1cG9uIHJlbGF0aXZlcyB0byBwZXJmb3JtLCB0aGV5IGxheSB1cG9uIHVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb21wZWwgdXMgdG8gcGVyZm9ybSB0aGVtLCBtZW4gb2YgdGhlIGp1cnkuIEJ1dCB0byBNYWNhcnRhdHVzIGhlcmUgdGhleSBzYXkgbm90CiAgICAgICAgICAgICAgICAgICAgYSB3b3JkLCBub3IgdG8gVGhlb3BvbXB1cywgaGlzIGZhdGhlcjsgZm9yIHRoZXkgYmVsb25nIGluIG5vIHNlbnNlIHRvIHRoZSBmYW1pbHkKICAgICAgICAgICAgICAgICAgICBvZiBIYWduaWFzLiBXaHksIHRoZW4sIHNob3VsZCB0aGUgbGF3cyBsYXkgYW55IGR1dGllcyB1cG9uIHRoZW0/IDwvdHJhbnNsYXRpb24+"
translation['43.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRoZSBkZWZlbmRhbnQsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCB3aGlsZSBoZSBoYXMgbm8ganVzdCBhcmd1bWVudCB3aGF0ZXZlciB0byBtYWtlIGFnYWluc3QgdGhlIGxhd3MgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlcG9zaXRpb25zIHdoaWNoIHdlIHByb2R1Y2UsIG1ha2VzIGEgc2hvdyBvZiBpbmRpZ25hdGlvbiwgYW5kIHNheXMgaGUgaXMKICAgICAgICAgICAgICAgICAgICBiZWluZyBjcnVlbGx5IHRyZWF0ZWQgYmVjYXVzZSwgaGlzIGZhdGhlciBiZWluZyBkZWFkLCBpdCBmYWxscyB0byBoaW0gdG8gYmUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaW4gdGhpcyBzdWl0LiBCdXQgaGUgZG9lcyBub3QgYmVhciBpbiBtaW5kLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHdhcyBhIG1vcnRhbCBtYW4sIGFuZCBoYXMgbWV0IGhpcyBlbmQgYWxvbmcgd2l0aCBtYW55IG90aGVycyBib3RoIHlvdW5nZXIKICAgICAgICAgICAgICAgICAgICBhbmQgb2xkZXIgdGhhbiBoaW1zZWxmLiBZZXQgaWYgVGhlb3BvbXB1cywgdGhlIGZhdGhlciBvZiB0aGUgZGVmZW5kYW50LCBpcyBkZWFkLAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIGFyZSBub3QgZGVhZCwgbm9yIGlzIGp1c3RpY2UsIG5vciBhcmUgdGhlIGp1cnltZW4gd2l0aCB3aG9tIHRoZSB2ZXJkaWN0CiAgICAgICAgICAgICAgICAgICAgcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['43.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHJlc2VudCBjb250ZXN0IGFuZCB0aGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIHRyaWFsIGFyZSBub3QgdG8gZGVjaWRlIHdoZXRoZXIgb25lIG1hbiBoYXMgZGllZCBiZWZvcmUgb3IgYWZ0ZXIgYW5vdGhlciwgYnV0CiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBvciBub3QgaXQgaXMgcmlnaHQgdGhhdCB0aGUga2luc21lbiBvZiBIYWduaWFzLCBjb3VzaW5zIGFuZCBjaGlsZHJlbiBvZgogICAgICAgICAgICAgICAgICAgIGNvdXNpbnMgdG8gSGFnbmlhcyBvbiBoaXMgZmF0aGVyJ3Mgc2lkZSwgc2hvdWxkIGJlIGRyaXZlbiBvdXQgZnJvbSB0aGUgZmFtaWx5IG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcyBieSBwZXJzb25zIGJlbG9uZ2luZyB0byB0aGUgZmFtaWx5IG9mIFN0cmF0aXVzLCB3aG8gaGF2ZSBubyBzaGFkb3cgb2YKICAgICAgICAgICAgICAgICAgICByaWdodCB0byBpbmhlcml0IHRoZSBlc3RhdGUgb2YgSGFnbmlhcywgYnV0IGFyZSBtb3JlIHJlbW90ZSBvZiBraW4uIFRoaXMgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24gYXQgaXNzdWUgaW4gdGhlIHByZXNlbnQgdHJpYWwuIDwvdHJhbnNsYXRpb24+"
translation['43.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHdpbGwgc2VlIGV2ZW4gbW9yZSBjbGVhcmx5LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgZnJvbSB0aGUgZm9sbG93aW5nIGxhdywgdGhhdCB0aGUgbGF3Z2l2ZXIgU29sb24gaXMgdmVyeSBtdWNoIGluIGVhcm5lc3QgaW4KICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhvc2Ugd2hvIGFyZSByZWxhdGl2ZXMsIGFuZCBub3Qgb25seSBnaXZlcyB0aGVtIHRoZSBwcm9wZXJ0eSBsZWZ0IGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGRlY2Vhc2VkLCBidXQgYWxzbyBsYXlzIHVwb24gdGhlbSBhbGwgdGhlIGJ1cmRlbnNvbWUgb2JsaWdhdGlvbnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZWNlYXNlZCBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBsYWlkIG91dCBpbiB0aGUgaG91c2UgaW4gYW55IHdheSBvbmUgY2hvb3NlcywgYW5kIHRoZXkgc2hhbGwgY2Fycnkgb3V0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWNlYXNlZCBvbiB0aGUgZGF5IGFmdGVyIHRoYXQgb24gd2hpY2ggdGhleSBsYXkgaGltIG91dCwgYmVmb3JlIHRoZSBzdW4KICAgICAgICAgICAgICAgICAgICAgICAgcmlzZXMuIEFuZCB0aGUgbWVuIHNoYWxsIHdhbGsgaW4gZnJvbnQsIHdoZW4gdGhleSBjYXJyeSBoaW0gb3V0LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdvbWVuIGJlaGluZC4gQW5kIG5vIHdvbWFuIGxlc3MgdGhhbiBzaXh0eSB5ZWFycyBvZiBhZ2Ugc2hhbGwgYmUgcGVybWl0dGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGVudGVyIHRoZSBjaGFtYmVyIG9mIHRoZSBkZWNlYXNlZCwgb3IgdG8gZm9sbG93IHRoZSBkZWNlYXNlZCB3aGVuIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcnJpZWQgdG8gdGhlIHRvbWIsIGV4Y2VwdCB0aG9zZSB3aG8gYXJlIHdpdGhpbiB0aGUgZGVncmVlIG9mIGNoaWxkcmVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdXNpbnM7IG5vciBzaGFsbCBhbnkgd29tYW4gYmUgcGVybWl0dGVkIHRvIGVudGVyIHRoZSBjaGFtYmVyIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWNlYXNlZCB3aGVuIHRoZSBib2R5IGlzIGNhcnJpZWQgb3V0LCBleGNlcHQgdGhvc2Ugd2hvIGFyZSB3aXRoaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZ3JlZSBvZiBjaGlsZHJlbiBvZiBjb3VzaW5zLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlY2Vhc2VkIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhaWQgb3V0IGluIHRoZSBob3VzZSBpbiBhbnkgd2F5IG9uZSBjaG9vc2VzLCBhbmQgdGhleSBzaGFsbCBjYXJyeSBvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2Vhc2VkIG9uIHRoZSBkYXkgYWZ0ZXIgdGhhdCBvbiB3aGljaCB0aGV5IGxheSBoaW0gb3V0LCBiZWZvcmUgdGhlIHN1bgogICAgICAgICAgICAgICAgICAgICAgICByaXNlcy4gQW5kIHRoZSBtZW4gc2hhbGwgd2FsayBpbiBmcm9udCwgd2hlbiB0aGV5IGNhcnJ5IGhpbSBvdXQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd29tZW4gYmVoaW5kLiBBbmQgbm8gd29tYW4gbGVzcyB0aGFuIHNpeHR5IHllYXJzIG9mIGFnZSBzaGFsbCBiZSBwZXJtaXR0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gZW50ZXIgdGhlIGNoYW1iZXIgb2YgdGhlIGRlY2Vhc2VkLCBvciB0byBmb2xsb3cgdGhlIGRlY2Vhc2VkIHdoZW4gaGUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FycmllZCB0byB0aGUgdG9tYiwgZXhjZXB0IHRob3NlIHdobyBhcmUgd2l0aGluIHRoZSBkZWdyZWUgb2YgY2hpbGRyZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgY291c2luczsgbm9yIHNoYWxsIGFueSB3b21hbiBiZSBwZXJtaXR0ZWQgdG8gZW50ZXIgdGhlIGNoYW1iZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2Vhc2VkIHdoZW4gdGhlIGJvZHkgaXMgY2FycmllZCBvdXQsIGV4Y2VwdCB0aG9zZSB3aG8gYXJlIHdpdGhpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVncmVlIG9mIGNoaWxkcmVuIG9mIGNvdXNpbnMuPC90cmFuc2xhdGlvbj4="
translation['43.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGxhdyBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IGFsbG93IGFueSB3b21hbiBleGNlcHQgZmVtYWxlIHJlbGF0aXZlcyB3aXRoaW4gdGhlIGRlZ3JlZSBvZiBjb3VzaW5zaGlwIHRvCiAgICAgICAgICAgICAgICAgICAgZW50ZXIgdGhlIGNoYW1iZXIgd2hlcmUgdGhlIGRlY2Vhc2VkIGxpZXMsIGFuZCBpdCBwZXJtaXRzIHRoZXNlIHNhbWUgd29tZW4gdG8KICAgICAgICAgICAgICAgICAgICBmb2xsb3cgdG8gdGhlIHRvbWIuIE5vdyBQaHlsb21hY2jDqiwgdGhlIHNpc3RlciBvZiBQb2xlbW9uLCB0aGUgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgb2YgSGFnbmlhcywgd2FzIG5vdCBjb3VzaW4gdG8gSGFnbmlhcywgYnV0IGF1bnQ7IGZvciBzaGUgd2FzIHNpc3RlciB0byBQb2xlbW9uLAogICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgSGFnbmlhcy4gQnV0IEV1YnVsaWRlcywgdGhlIHNvbiBvZiB0aGlzIHdvbWFuLCB3YXMgY291c2luIG9uIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlcidzIHNpZGUgdG8gSGFnbmlhcywgd2hvc2UgaW5oZXJpdGFuY2UgaXMgaW4gcXVlc3Rpb24uIEFuZCB0aGUgbW90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBib3kgaGVyZSB3YXMgdGhlIGRhdWdodGVyIG9mIEV1YnVsaWRlcy4gPC90cmFuc2xhdGlvbj4="
translation['43.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBmZW1hbGUgcmVsYXRpdmVzIHRoZSBsYXcgY29tbWFuZGVkIHRvIGJlIHByZXNlbnQgYXQgdGhlIGxheWluZyBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGVjZWFzZWQsIGFuZCB0byBmb2xsb3cgdG8gdGhlIHRvbWIsIG5vdCB0aGUgbW90aGVyIG9mIE1hY2FydGF0dXMgbm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHdpZmUgb2YgVGhlb3BvbXB1czsgZm9yIHNoZSB3YXMgaW4gbm8gd2F5IHJlbGF0ZWQgdG8gSGFnbmlhcywgYnV0IHdhcyBvZiBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgdHJpYmUsIHRoZSBBY2FtYW50aXMsIGFuZCBvZiBhbm90aGVyIGRlbWUsIHRoYXQgb2YgUHJvc3BhbHRhLCBzbyB0aGF0IHNoZSB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZXZlbiBhcHByaXNlZCBpbiBhbnkgd2F5IGF0IHRoZSB0aW1lIEhhZ25pYXMgbGF5IGRlYWQuIDwvdHJhbnNsYXRpb24+"
translation['43.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzdXJlbHkgYSBtb3N0IG91dHJhZ2VvdXMgcmVzdWx0IHRoYXQgdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgYXJlIHNjaGVtaW5nIHRvIGJyaW5nIGFib3V0LCB0aGF0IGZvcnNvb3RoIHdlIGFuZCB0aGUgd29tZW4gb2Ygb3VyIGZhbWlseSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBpbmhlcml0IHRoZSBib2R5IG9mIEhhZ25pYXMsIHdoZW4gaGUgd2FzIGRlYWQsIGFuZCBzaG91bGQgcGVyZm9ybSBhbGwgdGhlIHByb3BlcgogICAgICAgICAgICAgICAgICAgIHJpdGVzLCBhcyBiZWluZyByZWxhdGl2ZXMgYW5kIG5lYXJlc3Qgb2Yga2luLCBidXQgdGhhdCBNYWNhcnRhdHVzIHNob3VsZCBjbGFpbQogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBwb3NzZXNzIHRoZSBlc3RhdGUgb2YgdGhlIGRlYWQgSGFnbmlhcywgdGhvdWdoIGhlIGJlbG9uZ3MgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgU3RyYXRpdXMgYW5kIGlzIGRlc2NlbmRlZCBmcm9tIEFwb2xleGlzLCBkYXVnaHRlciBvZiB0aGUgUHJvc3BhbHRpYW4KICAgICAgICAgICAgICAgICAgICBhbmQgc2lzdGVyIG9mIE1hY2FydGF0dXMuIEJ1dCB0aGlzIGlzIG5laXRoZXIganVzdCBub3IgcmlnaHRlb3VzLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeS4gPC90cmFuc2xhdGlvbj4="
translation['43.66'] = ""
translation['43.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBqdXJ5LCB0aGF0IFNvbG9uIGluIHRoZSBsYXdzIGFuZCB0aGUgZ29kIGluIHRoZSBvcmFjbGUgdXNlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UsIGJpZGRpbmcgdGhlIHJlbGF0aXZlcyB0byBwZXJmb3JtIHJpdGVzIGZvciB0aGUgZGVwYXJ0ZWQgb24gdGhlIHByb3BlcgogICAgICAgICAgICAgICAgICAgIGRheXMuIEJ1dCBuZWl0aGVyIFRoZW9wb21wdXMgbm9yIHRoZSBkZWZlbmRhbnQgTWFjYXJ0YXR1cyBjYXJlZCBhdCBhbGwgZm9yIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdGhpbmdzOyB0aGV5IGNhcmVkIG9ubHkgZm9yIHRoaXMsIHRoYXQgdGhleSBtaWdodCByZXRhaW4gcG9zc2Vzc2lvbiBvZiB3aGF0IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgYmVsb25nIHRvIHRoZW0sIGFuZCB0byBjb21wbGFpbiB0aGF0IGFmdGVyIGhhdmluZyBoYWQgdGhlIGVzdGF0ZSBmb3Igc28KICAgICAgICAgICAgICAgICAgICBsb25nLCB0aGV5IG11c3Qgbm93IGRlZmVuZCB0aGVpciB0aXRsZSB0byBpdC4gSSBzaG91bGQgaGF2ZSB0aG91Z2h0LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgdGhhdCBvbmUgd2hvIHVuanVzdGx5IGtlZXBzIGluIGhpcyBwb3NzZXNzaW9uIHRoZSBwcm9wZXJ0eSBvZiBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgbWFrZSBjb21wbGFpbnRzIGlmIGhlIGhhcyBrZXB0IGl0IGluIGhpcyBwb3NzZXNzaW9uIGxvbmdlciB0aGFuIGlzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIGJ1dCBzaG91bGQgYmUgZ3JhdGVmdWwsIG5vdCB0byB1cywgYnV0IHRvIGZvcnR1bmUsIHRoYXQgc28gbWFueQogICAgICAgICAgICAgICAgICAgIHVuYXZvaWRhYmxlIGRlbGF5cyBoYXZlIG9jY3VycmVkIGluIHRoZSBpbnRlcmltLCBzbyB0aGF0IGhlIGlzIG5vdCBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgdW50aWwgbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['43.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T3VyIG9wcG9uZW50cywgdGhlbiwgbWVuIG9mIHRoZSBqdXJ5LCBhcmUgbWVuIG9mIHRoaXMgc3RhbXA7IHRoZXkgY2FyZSBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIGZvciB0aGUgZXh0aW5jdGlvbiBvZiB0aGUgaG91c2Ugb2YgSGFnbmlhcywgb3IgZm9yIGFsbCB0aGUgcmVzdCBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxhd2xlc3MgZGVlZHM7IG1lbiwgd2hvLCBPIFpldXMgYW5kIHRoZSBnb2Rz4oCUYnV0IHdoeSBzaG91bGQgb25lCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbiB0aGUgb3RoZXIgdGhpbmdzIHJlbGF0aXZlIHRvIHRoZW0/IFRoZXJlIHdvdWxkIGJlIG11Y2ggaW5kZWVkIHRvIHRlbGwKICAgICAgICAgICAgICAgICAgICBvZi4gQnV0IG9uZSB0aGluZyB3aGljaCB0aGV5IGhhdmUgYnJvdWdodCB0byBwYXNzIGlzIHRoZSBtb3N0IGxhd2xlc3MgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3QgYWJvbWluYWJsZSwgYW5kIG1vc3QgY2xlYXJseSBwcm92ZXMgdGhhdCB0aGV5IGNhcmUgZm9yIG5vdGhpbmcgZXhjZXB0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJvZml0LiA8L3RyYW5zbGF0aW9uPg=="
translation['43.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gc29vbmVyIGhhZCBUaGVvcG9tcHVzIGdvdCB0aGUKICAgICAgICAgICAgICAgICAgICBhd2FyZCBvZiB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgaW4gdGhlIG1hbm5lciB3aGljaCB5b3UgaGF2ZSBoZWFyZCwgdGhhbiBoZSBhdAogICAgICAgICAgICAgICAgICAgIG9uY2UgZ2F2ZSBwcm9vZiB0aGF0IGhlIGtuZXcgd2VsbCB0aGF0IGhlIHdhcyBpbiBwb3NzZXNzaW9uIG9mIHdoYXQgaW4gbm8gc2Vuc2UKICAgICAgICAgICAgICAgICAgICBiZWxvbmdlZCB0byBoaW0uIFRoZSB0aGluZyB3aGljaCB3YXMgb2YgdGhlIGdyZWF0ZXN0IHZhbHVlIG9uIHRoZSBmYXJtcwogICAgICAgICAgICAgICAgICAgIGJlbG9uZ2luZyB0byBIYWduaWFzLCBhbmQgd2hpY2ggd2FzIG1vc3QgYWRtaXJlZCBieSB0aGUgbmVpZ2hib3JzIGFuZCBieQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5Ym9keSBlbHNlLCB3YXMgdGhlIG9saXZlIHRyZWVzLiBUaGVzZSB0aGV5IGR1ZyB1cCBhbmQgcm9vdGVkIG91dCwgbW9yZSB0aGFuCiAgICAgICAgICAgICAgICAgICAgYSB0aG91c2FuZCB0cmVlcywgZnJvbSB3aGljaCBhIGxhcmdlIHF1YW50aXR5IG9mIG9pbCB3YXMgcHJvZHVjZWQuIFRoZXNlIHRyZWVzCiAgICAgICAgICAgICAgICAgICAgb3VyIG9wcG9uZW50cyByb290ZWQgb3V0IGFuZCBzb2xkLCBhbmQgcmVjZWl2ZWQgYSBodWdlIHN1bSBvZiBtb25leS4gQW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBkaWQgdGhpcyB3aGlsZSB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgd2FzIHN0aWxsIHN1YmplY3QgdG8gYWRqdWRpY2F0aW9uIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSB2ZXJ5IGxhdyB3aGljaCBoYWQgcGVybWl0dGVkIHRoZW0gdG8gY2l0ZSB0aGUgbW90aGVyIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBib3kgaGVyZS4gPC90cmFuc2xhdGlvbj4="
translation['43.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IEkgc3BlYWsgdGhlIHRydXRoIGluIHRoaXMsIHRoYXQgdGhleSByb290ZWQgdXAgdGhlIG9saXZlIHRyZWVzIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZmFybXMgd2hpY2ggSGFnbmlhcyBsZWZ0LCBJIHdpbGwgcHJvZHVjZSBmb3IgeW91IGFzIHdpdG5lc3NlcyB0aGUgbmVpZ2hib3JzCiAgICAgICAgICAgICAgICAgICAgYW5kIG90aGVycyB3aG9tIHdlIHN1bW1vbmVkLCB3aGVuIHdlIG1hZGUgYSBzb2xlbW4gcHJvdGVzdCBhZ2FpbnN0IHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzIHRlc3RpZnkgdGhhdCBvbiBiZWluZyBzdW1tb25lZCBieSBTb3NpdGhldXMgdGhleSBhY2NvbXBhbmllZAogICAgICAgICAgICAgICAgICAgICAgICBoaW0gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmFwaGVuIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmFwaGVuIj5BcmFwaGVuPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyYXBoZW4iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyYXBoZW4iPkFyYXBoZW48L3BsYWNlTmFtZT4gd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWVnZcOvcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBsYW5kcyBvZiBIYWduaWFzLCBhZnRlciBUaGVvcG9tcHVzIGhhZCBoYWQgdGhlIGVzdGF0ZSBvZiBIYWduaWFzCiAgICAgICAgICAgICAgICAgICAgICAgIGFkanVkZ2VkIHRvIGhpbSwgYW5kIHRoYXQgU29zaXRoZXVzIHNob3dlZCB0aGVtIHRoZSBvbGl2ZSB0cmVlcyBiZWluZyByb290ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdXAgZnJvbSB0aGUgbGFuZCBvZiBIYWduaWFzLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMgdGVzdGlmeSB0aGF0IG9uIGJlaW5nIHN1bW1vbmVkIGJ5IFNvc2l0aGV1cyB0aGV5IGFjY29tcGFuaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIGhpbSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFyYXBoZW4iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyYXBoZW4iPkFyYXBoZW48L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJhcGhlbiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJhcGhlbiI+QXJhcGhlbjwvcGxhY2VOYW1lPiB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZSBBZWdlw69zLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGxhbmRzIG9mIEhhZ25pYXMsIGFmdGVyIFRoZW9wb21wdXMgaGFkIGhhZCB0aGUgZXN0YXRlIG9mIEhhZ25pYXMKICAgICAgICAgICAgICAgICAgICAgICAgYWRqdWRnZWQgdG8gaGltLCBhbmQgdGhhdCBTb3NpdGhldXMgc2hvd2VkIHRoZW0gdGhlIG9saXZlIHRyZWVzIGJlaW5nIHJvb3RlZAogICAgICAgICAgICAgICAgICAgICAgICB1cCBmcm9tIHRoZSBsYW5kIG9mIEhhZ25pYXMuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBcmFwaGVuIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBcmFwaGVuIj5BcmFwaGVuPC9wbGFjZU5hbWU+IHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlIEFlZ2XDr3MuPC90cmFuc2xhdGlvbj4="
translation['43.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgbm93LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgaXQgd2VyZSBhZ2FpbnN0IHRoZSBkZWFkIG1hbiBvbmx5IHRoYXQgdGhleSBoYWQgY29tbWl0dGVkIGFuIG91dHJhZ2UKICAgICAgICAgICAgICAgICAgICBpbiBkb2luZyB0aGlzLCB0aGVpciBjb25kdWN0IHdvdWxkIGhhdmUgYmVlbiBkaXNncmFjZWZ1bCwgdGhvdWdoIGluIGEgbGVzcwogICAgICAgICAgICAgICAgICAgIGRlZ3JlZTsgYnV0IGluIHJlYWxpdHkgaXQgaXMgYWdhaW5zdCB0aGUgd2hvbGUgY2l0eSB0aGF0IHRoZXkgaGF2ZSBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGlzIG91dHJhZ2UsIGFuZCB0aGV5IGhhdmUgYnJva2VuIHlvdXIgbGF3cy4gWW91IHdpbGwga25vdyB0aGlzLCB3aGVuIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGVhcmQgdGhlIGxhdy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbGF3LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYW55b25lIHNoYWxsIGRpZyB1cAogICAgICAgICAgICAgICAgICAgICAgICBhbiBvbGl2ZSB0cmVlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZXhjZXB0CiAgICAgICAgICAgICAgICAgICAgICAgIGl0IGJlIGZvciBhIHNhbmN0dWFyeSBvZiB0aGUgQXRoZW5pYW4gc3RhdGUgb3Igb2Ygb25lIG9mIGl0cyBkZW1lcywgb3IgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBvd24gdXNlIHRvIHRoZSBudW1iZXIgb2YgdHdvIG9saXZlIHRyZWVzIGVhY2ggeWVhciwgb3IgZXhjZXB0IGl0IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRmdWwgdG8gdXNlIGl0IGZvciB0aGUgc2VydmljZSBvZiBvbmUgd2hvIGlzIGRlYWQsIGhlIHNoYWxsIGJlIGZpbmVkIG9uZQogICAgICAgICAgICAgICAgICAgICAgICBodW5kcmVkIGRyYWNobWFlLCB0byBoZSBwYWlkIGludG8gdGhlIHB1YmxpYyB0cmVhc3VyeSwgZm9yIGVhY2ggdHJlZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0ZW50aCBwYXJ0IG9mIHRoaXMgc3VtIHNoYWxsIGJlbG9uZyB0byB0aGUgZ29kZGVzcy4gRnVydGhlcm1vcmUgaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgYmUgb2JsaWdhdGVkIHRvIHBheSB0byB0aGUgcHJpdmF0ZSBpbmRpdmlkdWFsIHdobyBwcm9zZWN1dGVzIGhpbSBvbmUgaHVuZHJlZAogICAgICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZSBmb3IgZWFjaCBvbGl2ZSB0cmVlLiBBbmQgc3VpdHMgY29uY2VybmluZyB0aGVzZSBtYXR0ZXJzIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYmVmb3JlIHRoZSBhcmNob25zLCBhY2NvcmRpbmcgYXMgdGhleSBzZXZlcmFsbHkgaGF2ZSBqdXJpc2RpY3Rpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIEFuZCB0aGUgcHJvc2VjdXRvciBzaGFsbCBkZXBvc2l0IHRoZSBjb3VydCBmZWVzIGZvciBoaXMgc2hhcmUuIEFuZCB3aGVuIGEKICAgICAgICAgICAgICAgICAgICAgICAgcGVyc29uIHNoYWxsIGhhdmUgYmVlbiBjb252aWN0ZWQsIHRoZSBhcmNob24gYmVmb3JlIHdob20gdGhlIGNhc2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgc2hhbGwgbWFrZSBhIHJlcG9ydCB0byB0aGUgY29sbGVjdG9ycyBvZiB0aGUgYW1vdW50IGR1ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJlYXN1cnksIGFuZCBvZiB0aGUgYW1vdW50IGR1ZSB0byB0aGUgZ29kZGVzcywgdG8gdGhlIHRyZWFzdXJlcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGdvZGRlc3MuIEFuZCBpZiB0aGV5IGZhaWwgdG8gbWFrZSBzdWNoIHJlcG9ydHMsIHRoZXkgc2hhbGwgdGhlbXNlbHZlcyBiZQogICAgICAgICAgICAgICAgICAgICAgICBsaWFibGUgZm9yIHRoZSBhbW91bnQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnlvbmUgc2hhbGwgZGlnIHVwCiAgICAgICAgICAgICAgICAgICAgICAgIGFuIG9saXZlIHRyZWUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBleGNlcHQKICAgICAgICAgICAgICAgICAgICAgICAgaXQgYmUgZm9yIGEgc2FuY3R1YXJ5IG9mIHRoZSBBdGhlbmlhbiBzdGF0ZSBvciBvZiBvbmUgb2YgaXRzIGRlbWVzLCBvciBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIG93biB1c2UgdG8gdGhlIG51bWJlciBvZiB0d28gb2xpdmUgdHJlZXMgZWFjaCB5ZWFyLCBvciBleGNlcHQgaXQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgbmVlZGZ1bCB0byB1c2UgaXQgZm9yIHRoZSBzZXJ2aWNlIG9mIG9uZSB3aG8gaXMgZGVhZCwgaGUgc2hhbGwgYmUgZmluZWQgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bmRyZWQgZHJhY2htYWUsIHRvIGhlIHBhaWQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LCBmb3IgZWFjaCB0cmVlLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRlbnRoIHBhcnQgb2YgdGhpcyBzdW0gc2hhbGwgYmVsb25nIHRvIHRoZSBnb2RkZXNzLiBGdXJ0aGVybW9yZSBoZSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBiZSBvYmxpZ2F0ZWQgdG8gcGF5IHRvIHRoZSBwcml2YXRlIGluZGl2aWR1YWwgd2hvIHByb3NlY3V0ZXMgaGltIG9uZSBodW5kcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIGZvciBlYWNoIG9saXZlIHRyZWUuIEFuZCBzdWl0cyBjb25jZXJuaW5nIHRoZXNlIG1hdHRlcnMgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiZWZvcmUgdGhlIGFyY2hvbnMsIGFjY29yZGluZyBhcyB0aGV5IHNldmVyYWxseSBoYXZlIGp1cmlzZGljdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgQW5kIHRoZSBwcm9zZWN1dG9yIHNoYWxsIGRlcG9zaXQgdGhlIGNvdXJ0IGZlZXMgZm9yIGhpcyBzaGFyZS4gQW5kIHdoZW4gYQogICAgICAgICAgICAgICAgICAgICAgICBwZXJzb24gc2hhbGwgaGF2ZSBiZWVuIGNvbnZpY3RlZCwgdGhlIGFyY2hvbiBiZWZvcmUgd2hvbSB0aGUgY2FzZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBzaGFsbCBtYWtlIGEgcmVwb3J0IHRvIHRoZSBjb2xsZWN0b3JzIG9mIHRoZSBhbW91bnQgZHVlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmVhc3VyeSwgYW5kIG9mIHRoZSBhbW91bnQgZHVlIHRvIHRoZSBnb2RkZXNzLCB0byB0aGUgdHJlYXN1cmVycyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZ29kZGVzcy4gQW5kIGlmIHRoZXkgZmFpbCB0byBtYWtlIHN1Y2ggcmVwb3J0cywgdGhleSBzaGFsbCB0aGVtc2VsdmVzIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpYWJsZSBmb3IgdGhlIGFtb3VudC48L3RyYW5zbGF0aW9uPg=="
translation['43.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGxhdyBpcyB0aHVzCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJlLiBCdXQgcHJheSBwb25kZXIgaW4geW91ciBtaW5kcywgbWVuIG9mIHRoZSBqdXJ5LCB3aGF0IHlvdSBtdXN0IGltYWdpbmUgdXMKICAgICAgICAgICAgICAgICAgICB0byBoYXZlIHN1ZmZlcmVkIGluIHRoZSBwYXN0IGZyb20gdGhlc2UgbWVuIGFuZCB0aGUgaW5zb2xlbmNlIG9mIHRoZXNlIG1lbiwgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBzaG93biBjb250ZW1wdCB0b3dhcmQgeW91LCBzbyBncmVhdCBhIHBlb3BsZSwgYW5kIGhhdmUgZG9uZSB3aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MgZXhwcmVzc2x5IGZvcmJpZCB0aGVpciBkb2luZywgaW4gdGh1cyBjb250ZW1wdHVvdXNseSBsYXlpbmcgd2FzdGUgdGhlIGZhcm1zCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSGFnbmlhcyBsZWZ0LiBUaGUgbGF3IGZvcmJpZHMgYW55b25lIHRvIHJvb3QgdXAgYW55IG9mIHRoZXNlIHRoaW5ncyBldmVuCiAgICAgICAgICAgICAgICAgICAgb3V0IG9mIGhpcyBvd24gbGFuZCBpbmhlcml0ZWQgZnJvbSBoaXMgZmF0aGVycy4gTXVjaCBpbmRlZWQgZG8gdGhlc2UgbWVuIGNhcmUKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgYWJvdXQgb2JlZGllbmNlIHRvIHlvdXIgbGF3cyBvciB0aGUgc2F2aW5nIG9mIHRoZSBob3VzZSBvZiBIYWduaWFzIGZyb20KICAgICAgICAgICAgICAgICAgICBleHRpbmN0aW9uISA8L3RyYW5zbGF0aW9uPg=="
translation['43.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIGRlc2lyZSwgbWVuIG9mIHRoZSBqdXJ5LCB0byBzcGVhayB0byB5b3UgaW4gYSBmZXcgd29yZHMgYWJvdXQgbXlzZWxmLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0byB5b3UgdGhhdCBJIGhhdmUsIGluIGEgdmVyeSBkaWZmZXJlbnQgd2F5IGZyb20gdGhlaXJzLCBzaG93biBteSBjb25jZXJuCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgaG91c2Ugb2YgSGFnbmlhcyBzaG91bGQgbm90IGJlY29tZSBleHRpbmN0LiBGb3IgSSwgdG9vLCBhbSBteXNlbGYgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZmFtaWx5IG9mIEJ1c2VsdXMuIEZvciBDYWxsaXN0cmF0dXMgbWFycmllZCB0aGUgZ3JhbmRkYXVnaHRlciBvZiBIYWJyb24sIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBCdXNlbHVzLCBiZWluZyBoaW1zZWxmIHRoZSBzb24gb2YgRXVidWxpZGVzIGFuZCBncmFuZHNvbiBvZiBCdXNlbHVzOyBhbmQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBncmFuZGRhdWdodGVyIG9mIEhhYnJvbiBhbmQgQ2FsbGlzdHJhdHVzLCB0aGUgbmVwaGV3IG9mIEhhYnJvbiwgb3VyCiAgICAgICAgICAgICAgICAgICAgbW90aGVyIHdhcyBib3JuLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5JIG15c2VsZiwgd2hlbiBJIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYXdhcmRlZCB0aGUgaGFuZCBvZiB0aGUgbW90aGVyIG9mIHRoaXMgYm95LCBhbmQgZm91ciBzb25zIGFuZCBvbmUgZGF1Z2h0ZXIgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBib3JuIHRvIG1lLCBnYXZlIHRoZW0sIG1lbiBvZiB0aGUganVyeSwgdGhlIGZvbGxvd2luZyBuYW1lczogdG8gdGhlIGVsZGVzdAogICAgICAgICAgICAgICAgICAgIEkgZ2F2ZSwgYXMgd2FzIGZpdHRpbmcsIHRoZSBuYW1lIG9mIG15IGZhdGhlciBTb3NpYXMsIGFuZCB0aHVzIEkgZ2F2ZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBlbGRlc3QgdGhpcyBuYW1lIHRoYXQgd2FzIGhpcyBkdWU7IHRvIHRoZSBzb24gYm9ybiBuZXh0IGFmdGVyIGhpbSBJIGdhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbmFtZSBFdWJ1bGlkZXMsIHdoaWNoIHdhcyB0aGUgbmFtZSBvZiB0aGUgZmF0aGVyIG9mIHRoaXMgYm95J3MgbW90aGVyOyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBuZXh0IGFmdGVyIGhpbSBJIGdhdmUgdGhlIG5hbWUgTWVuZXN0aGV1cywgZm9yIE1lbmVzdGhldXMgd2FzIGEgcmVsYXRpdmUgb2YgbXkKICAgICAgICAgICAgICAgICAgICB3aWZlOyBhbmQgdG8gdGhlIHlvdW5nZXN0IEkgZ2F2ZSB0aGUgbmFtZSBDYWxsaXN0cmF0dXMsIHdoaWNoIHdhcyB0aGUgbmFtZSBvZiBteQogICAgICAgICAgICAgICAgICAgIG1vdGhlcidzIGZhdGhlci4gSW4gYWRkaXRpb24gdG8gYWxsIHRoaXMsIEkgZGlkIG5vdCBnaXZlIG15IGRhdWdodGVyIGluIG1hcnJpYWdlCiAgICAgICAgICAgICAgICAgICAgaW50byBhbm90aGVyIGZhbWlseSwgYnV0IHRvIG15IG93biBicm90aGVyJ3Mgc29uLCBpbiBvcmRlciB0aGF0LCBpZiB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGhlYWx0aCwgdGhlIGNoaWxkcmVuIGJvcm4gb2YgdGhlbSBzaG91bGQgYmUgb2YgdGhlIHNhbWUgZmFtaWx5IGFzIEhhZ25pYXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5JLCB0aGVuLCBhZG1pbmlzdGVyZWQgbWF0dGVycyBpbiB0aGlzIHdheSwKICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IHRoZSBmYW1pbGllcyBzcHJpbmdpbmcgZnJvbSBCdXNlbHVzIHNob3VsZCBhcyBjb21wbGV0ZWx5IGFzCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgYmUgcHJlc2VydmVkLiBBcyBmb3Igb3VyIG9wcG9uZW50cywgbGV0IHVzIGV4YW1pbmUgdGhlbSBvbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCBmaXJzdCBvZiBhbGwgcmVhZCB0aGlzIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCB0aGUgYXJjaG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRha2UgY2hhcmdlIG9mIG9ycGhhbnMgYW5kIG9mIGhlaXJlc3NlcyBhbmQgb2YgZmFtaWxpZXMgdGhhdCBhcmUgYmVjb21pbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXh0aW5jdCwgYW5kIG9mIGFsbCB3b21lbiB3aG8gcmVtYWluIGluIHRoZSBob3VzZXMgb2YgdGhlaXIgZGVjZWFzZWQKICAgICAgICAgICAgICAgICAgICAgICAgaHVzYmFuZHMsIGRlY2xhcmluZyB0aGF0IHRoZXkgYXJlIHByZWduYW50LiBMZXQgaGltIHRha2UgY2hhcmdlIG9mIHRoZXNlLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHN1ZmZlciBhbnlvbmUgdG8gZG8gYW55IG91dHJhZ2UgdG8gdGhlbS4gQW5kIGlmIGFueW9uZSBzaGFsbCBjb21taXQKICAgICAgICAgICAgICAgICAgICAgICAgYW55IG91dHJhZ2Ugb3IgYW55IGxhd2xlc3MgYWN0IGFnYWluc3QgdGhlbSwgaGUgc2hhbGwgaGF2ZSBwb3dlciB0byBpbXBvc2UgYQogICAgICAgICAgICAgICAgICAgICAgICBmaW5lIHVwb24gc3VjaCBwZXJzb24gdXAgdG8gdGhlIGxpbWl0IGZpeGVkIGJ5IGxhdy4gQW5kIGlmIHRoZSBvZmZlbmRlcgogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBzZWVtIHRvIGhpbSB0byBiZSBkZXNlcnZpbmcgb2YgYSBtb3JlIHNldmVyZSBwdW5pc2htZW50LCBsZXQgaGltCiAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1vbiBzdWNoIGEgcGVyc29uLCBnaXZpbmcgaGltIGZpdmUgZGF5cycgbm90aWNlLCBhbmQgYnJpbmcgaGltIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY291cnQgb2YgSGVsaWFlYSwgd3JpdGluZyB1cG9uIHRoZSBpbmRpY3RtZW50IHRoZSBwZW5hbHR5IHdoaWNoIGhlIHRoaW5rcyBpcwogICAgICAgICAgICAgICAgICAgICAgICBkZXNlcnZlZC4gQW5kIGlmIHRoZXJlIGJlIGEgY29udmljdGlvbiwgbGV0IHRoZSBjb3VydCBvZiBIZWxpYWVhIGFwcG9pbnQgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvbmUgY29udmljdGVkIHdoYXQgcGVuYWx0eSBoZSBvdWdodCB0byBzdWZmZXIgb3IgcGF5LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IHRoZSBhcmNob24KICAgICAgICAgICAgICAgICAgICAgICAgdGFrZSBjaGFyZ2Ugb2Ygb3JwaGFucyBhbmQgb2YgaGVpcmVzc2VzIGFuZCBvZiBmYW1pbGllcyB0aGF0IGFyZSBiZWNvbWluZwogICAgICAgICAgICAgICAgICAgICAgICBleHRpbmN0LCBhbmQgb2YgYWxsIHdvbWVuIHdobyByZW1haW4gaW4gdGhlIGhvdXNlcyBvZiB0aGVpciBkZWNlYXNlZAogICAgICAgICAgICAgICAgICAgICAgICBodXNiYW5kcywgZGVjbGFyaW5nIHRoYXQgdGhleSBhcmUgcHJlZ25hbnQuIExldCBoaW0gdGFrZSBjaGFyZ2Ugb2YgdGhlc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBub3Qgc3VmZmVyIGFueW9uZSB0byBkbyBhbnkgb3V0cmFnZSB0byB0aGVtLiBBbmQgaWYgYW55b25lIHNoYWxsIGNvbW1pdAogICAgICAgICAgICAgICAgICAgICAgICBhbnkgb3V0cmFnZSBvciBhbnkgbGF3bGVzcyBhY3QgYWdhaW5zdCB0aGVtLCBoZSBzaGFsbCBoYXZlIHBvd2VyIHRvIGltcG9zZSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmUgdXBvbiBzdWNoIHBlcnNvbiB1cCB0byB0aGUgbGltaXQgZml4ZWQgYnkgbGF3LiBBbmQgaWYgdGhlIG9mZmVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIHNlZW0gdG8gaGltIHRvIGJlIGRlc2VydmluZyBvZiBhIG1vcmUgc2V2ZXJlIHB1bmlzaG1lbnQsIGxldCBoaW0KICAgICAgICAgICAgICAgICAgICAgICAgc3VtbW9uIHN1Y2ggYSBwZXJzb24sIGdpdmluZyBoaW0gZml2ZSBkYXlzJyBub3RpY2UsIGFuZCBicmluZyBoaW0gYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb3VydCBvZiBIZWxpYWVhLCB3cml0aW5nIHVwb24gdGhlIGluZGljdG1lbnQgdGhlIHBlbmFsdHkgd2hpY2ggaGUgdGhpbmtzIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2VydmVkLiBBbmQgaWYgdGhlcmUgYmUgYSBjb252aWN0aW9uLCBsZXQgdGhlIGNvdXJ0IG9mIEhlbGlhZWEgYXBwb2ludCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBjb252aWN0ZWQgd2hhdCBwZW5hbHR5IGhlIG91Z2h0IHRvIHN1ZmZlciBvciBwYXkuPC90cmFuc2xhdGlvbj4="
translation['43.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93LCBub3csIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIG1vcmUgZWZmZWN0aXZlbHkgYnJpbmcgYSBob3VzZSB0byBleHRpbmN0aW9uIHRoYW4gaWYsIGJlaW5nIHRoZW1zZWx2ZXMgb2YKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGhvdXNlLCB0aGF0IG9mIFN0cmF0aXVzLCB0aGV5IHNob3VsZCBkaXNwb3NzZXNzIHRob3NlIG5lYXJlc3Qgb2Yga2luIHRvCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcz8gT3IgYWdhaW4sIGlmIG9uZSBzaG91bGQgY2xhaW0gdG8gcG9zc2VzcyB0aGUgZXN0YXRlIG9mIEhhZ25pYXMgYXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICByZWxhdGVkIGJ5IGJsb29kLCB3aGVuIGhlIGJlYXJzIGEgbmFtZSB0aGF0IGlzIG5vdCBvbmx5IG5vdCBkZXJpdmVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFtaWx5IG9mIEhhZ25pYXMsIGJ1dCBub3QgZXZlbiBmcm9tIHRoYXQgb2YgU3RyYXRpdXMsIHRoZSBjbGFpbWFudCdzIG93bgogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9y4oCUbm8sIHdoZW4gaGUgaGFzIG5vdCB0aGUgbmFtZSBvZiBhbnkgb3RoZXIgb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzIG9mIEJ1c2VsdXMsIG1hbnkgYXMgdGhleSBhcmU/IDwvdHJhbnNsYXRpb24+"
translation['43.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuY2UsIHRoZW4sIGRvZXMgaGUgZ2V0IHRoZSBuYW1lIE1hY2FydGF0dXM/IEZyb20gaGlzIG1vdGhlcidzIGZhbWlseS4gRm9yCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGFkb3B0ZWQgaW50byB0aGUgZmFtaWx5IG9mIE1hY2FydGF0dXMgb2YgUHJvc3BhbHRhLCB3aG8gd2FzIGhpcyBtb3RoZXIncwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIGFuZCBoZSBwb3NzZXNzZXMgdGhhdCBlc3RhdGUgYWxzby4gQW5kIHNvIHJlZ2FyZGxlc3Mgb2YgcmlnaHQgaXMgaGUKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGVuIGEgc29uIHdhcyBib3JuIHRvIGhpbSwgaGUgZm9yZ290IHRvIGludHJvZHVjZSBoaW0gaW50byB0aGUgZmFtaWx5IG9mCiAgICAgICAgICAgICAgICAgICAgSGFnbmlhcywgYXMgYSBzb24gdG8gSGFnbmlhcywgYW5kIHRoYXQgdG9vIHdoaWxlIGhlIHdhcyBpbiBwb3NzZXNzaW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSBvZiBIYWduaWFzLCBhbmQgY2xhaW1lZCB0aGF0IGhlIHdhcyByZWxhdGVkIHRvIGhpbSBieSBtYWxlIGRlc2NlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHNvbiB3aG8gd2FzIGJvcm4gdG8gaGltIE1hY2FydGF0dXMKICAgICAgICAgICAgICAgICAgICBoYXMgaW50cm9kdWNlZCBieSBoaXMgbW90aGVyJ3MgZGVzY2VudCBpbnRvIHRoZSBQcm9zcGFsdGlhbnMsIGFuZCBoYXMgc3VmZmVyZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZmFtaWx5IG9mIEhhZ25pYXMgdG8gYmVjb21lIGV4dGluY3QsIHNvIGZhciBhcyB0aGlzIGJveSBpcyBjb25jZXJuZWQ7IGJ1dCBoZQogICAgICAgICAgICAgICAgICAgIGFsbGVnZXMgdGhhdCBoaXMgb3duIGZhdGhlciBUaGVvcG9tcHVzIHdhcyByZWxhdGVkIHRvIEhhZ25pYXMuIFlldCB0aGUgbGF3IG9mCiAgICAgICAgICAgICAgICAgICAgU29sb24gb3JkYWlucyB0aGF0IG1hbGVzIGFuZCB0aGUgc29ucyBvZiBtYWxlcyBzaGFsbCBoYXZlIHByZWNlZGVuY2U7IGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaGFzIHRodXMgbGlnaHRseSBzaG93biBjb250ZW1wdCBib3RoIGZvciBIYWduaWFzIGFuZCBmb3IgdGhlIGxhd3MsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhcyBoYWQgaGlzIHNvbiBpbnRyb2R1Y2VkIGludG8gdGhlIGZhbWlseSBvZiBoaXMgbW90aGVyLiBIb3cgY291bGQgdGhlcmUgYmUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgbW9yZSBzY29ybmZ1bCBvZiBsYXcgb3IgbW9yZSBhcmJpdHJhcnkgdGhhbiB0aGVzZT8gPC90cmFuc2xhdGlvbj4="
translation['43.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoaXMgaXMgbm90IHRoZQogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhpbmcsIG1lbiBvZiB0aGUganVyeS4gVGhlcmUgaXMgYSBwbGFjZSBvZiBidXJpYWwgY29tbW9uIHRvIGFsbCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGRlc2NlbmRlZCBmcm9tIEJ1c2VsdXMg77yIaXQgaXMgY2FsbGVkIHRoZSBidXJpYWwtcGxhY2Ugb2YgdGhlIEJ1c2VsaWRhZSwKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIGFyZWEsIGVuY2xvc2VkLCBhZnRlciB0aGUgbWFubmVyIG9mIHRoZSBtZW4gb2Ygb2xk77yJLiBJbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgYnVyaWFsLXBsYWNlIGxpZSBhbGwgdGhlIG90aGVyIGRlc2NlbmRhbnRzIG9mIEJ1c2VsdXMgYW5kIEhhZ25pYXMgYW5kIEV1YnVsaWRlcwogICAgICAgICAgICAgICAgICAgIGFuZCBQb2xlbW9uLCBhbmQgYWxsIHRoZSByZXN0IG9mIHRoZSBob3N0IG9mIHRob3NlIGRlc2NlbmRlZCBmcm9tIEJ1c2VsdXMsIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIGhvbGQgaW4gY29tbW9uIHRoaXMgcGxhY2Ugb2YgYnVyaWFsLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIHRoZSBkZWZlbmRhbnQgTWFjYXJ0YXR1cyBhbmQgdGhlIGdyYW5kZmF0aGVyIGhhdmUgbm8gc2hhcmUgaW4gaXQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZXkgbWFkZSBmb3IgdGhlbXNlbHZlcyBhIHRvbWIgYXBhcnQsIGF0IGEgZGlzdGFuY2UgZnJvbSB0aGF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIEJ1c2VsaWRhZS4gRG8gdGhleSBhcHBlYXIgdG8geW91LCBtZW4gb2YgdGhlIGp1cnksIHRvIGJlbG9uZyBpbiBhbnkgc2Vuc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgSGFnbmlhcywgZXhjZXB0IHRoYXQgdGhleSBoYXZlIHNlaXplZCBhbmQgaG9sZCB3aGF0IGRvZXMgbm90IGJlbG9uZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZW0/IFdoZXRoZXIgdGhlIGhvdXNlIG9mIEhhZ25pYXMgYW5kIG9mIEV1YnVsaWRlcywgdGhlIGNvdXNpbiBvZiBIYWduaWFzLCBpcwogICAgICAgICAgICAgICAgICAgIHRvIGJlY29tZSBleHRpbmN0IGFuZCBoYXZlIG5vIG5hbWUsIGhhcyBuZXZlciBpbiB0aGUgbGVhc3QgZGVncmVlIGJlZW4gYW4gb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgb2YgY29uY2VybiB0byB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBmb3IgbXkgcGFydCwgbWVuIG9mIHRoZSBqdXJ5LCBhbSBkZWZlbmRpbmcgdG8gdGhlIGZ1bGwgZXh0ZW50CiAgICAgICAgICAgICAgICAgICAgb2YgbXkgcG93ZXIgdGhlIGludGVyZXN0IG9mIHRob3NlIGRlYWQgcmVsYXRpdmVzLCBidXQgaXQgaXMgbm90IGFuIGVhc3kgdGFzayB0bwogICAgICAgICAgICAgICAgICAgIGNvbnRlbmQgYWdhaW5zdCB0aGUgaW50cmlndWVzIG9mIHRoZXNlIG1lbi4gSSB0aGVyZWZvcmUgZGVsaXZlciBvdmVyIHRvIHlvdSB0aGlzCiAgICAgICAgICAgICAgICAgICAgYm95IHRvIGJlIHRoZSBvYmplY3Qgb2YgeW91ciBjYXJlIGluIHdoYXRldmVyIHdheSB5b3UgbWF5IGRlZW0gbW9zdCBqdXN0LiBIZSBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIGFkb3B0ZWQgaW50byB0aGUgaG91c2Ugb2YgRXVidWxpZGVzLCBhbmQgaGFzIGJlZW4gaW50cm9kdWNlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjbGFuc21lbiwgbm90IG1pbmUsIGJ1dCB0aG9zZSBvZiBFdWJ1bGlkZXMgYW5kIEhhZ25pYXMgYW5kIHRoZSBkZWZlbmRhbnQsCiAgICAgICAgICAgICAgICAgICAgTWFjYXJ0YXR1cy4gPC90cmFuc2xhdGlvbj4="
translation['43.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBoZSB3YXMgYmVpbmcgaW50cm9kdWNlZCwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgY2xhbnNtZW4gY2FzdCB0aGVpciB2b3RlcyBzZWNyZXRseSwgYnV0IHRoZSBkZWZlbmRhbnQgTWFjYXJ0YXR1cwogICAgICAgICAgICAgICAgICAgIGJ5IGFuIG9wZW4gdm90ZSBkZWNsYXJlZCB0aGF0IHRoaXMgYm95IHdhcyBiZWluZyByaWdodGx5IGludHJvZHVjZWQgYXMgYSBzb24gdG8KICAgICAgICAgICAgICAgICAgICBFdWJ1bGlkZXM7IGZvciBoZSBkaWQgbm90IHdpc2ggdG8gbGF5IGhpcyBoYW5kIHVwb24gdGhlIHZpY3RpbSBvciB0byByZW1vdmUgaXQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBhbHRhciwgYW5kIHRodXMgbWFrZSBoaW1zZWxmIHJlc3BvbnNpYmxlOyBuYXksIGhlIGV2ZW4gcmVjZWl2ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgcG9ydGlvbiBvZiB0aGUgZmxlc2ggZnJvbSB0aGUgaGFuZCBvZiB0aGlzIGJveSwgYW5kIHRvb2sgaXQgYXdheSB3aXRoIGhpbSwgYXMKICAgICAgICAgICAgICAgICAgICBkaWQgdGhlIHJlc3Qgb2YgdGhlIGNsYW5zbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['43.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlciwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHRoYXQgdGhpcyBib3kgaXMgc2V0IGJlZm9yZSB5b3UgYXMgdGhvdWdoIGhlIHdlcmUgdGhlIHN1cHBsaWFudCdzCiAgICAgICAgICAgICAgICAgICAgd2FuZCwgb24gYmVoYWxmIG9mIHRoZSBkZWNlYXNlZCBIYWduaWFzIGFuZCBFdWJ1bGlkZXMgYW5kIHRoZSBvdGhlciBkZXNjZW5kYW50cwogICAgICAgICAgICAgICAgICAgIG9mIEhhZ25pYXMsIGFuZCB0aGF0IHRoZXkgc3VwcGxpY2F0ZSB5b3UganVyeW1lbiBub3QgdG8gYWxsb3cgdGhlaXIgaG91c2UgdG8gYmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRvIGV4dGluY3Rpb24gYnkgdGhlc2UgbG9hdGhzb21lIG1vbnN0ZXJzLCB3aG8gYXJlIG9mIHRoZSBob3VzZSBvZgogICAgICAgICAgICAgICAgICAgIFN0cmF0aXVzLCBhbmQgbmV2ZXIgYmVsb25nZWQgdG8gdGhhdCBvZiBIYWduaWFzLiBEbyBub3Qgc3VmZmVyIHRoZW0gdG8ga2VlcCB3aGF0CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IHRoZWlyIG93biwgYnV0IGNvbXBlbCB0aGVtIHRvIGdpdmUgaXQgYmFjayBpbnRvIHRoZSBob3VzZSBvZiBIYWduaWFzIGZvcgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBhcmUgaGlzIHJlbGF0aXZlcy4gPC90cmFuc2xhdGlvbj4="
translation['43.84'] = ""
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyB0aGUgZmF1bHQKICAgICAgICAgICAgICAgICAgICBvZiBMZW9jaGFyZXMsIHRoZSBkZWZlbmRhbnQsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBoZSBpcyBoaW1zZWxmIGJlaW5nIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byB0cmlhbCwgYW5kIHRoYXQgSSwgZGVzcGl0ZSBteSB5b3V0aCwgYW0gYWRkcmVzc2luZyB5b3UsIGZvciBoZSBjbGFpbXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgdG8gaW5oZXJpdCB3aGF0IGRvZXMgbm90IGJlbG9uZyB0byBoaW0sIGFuZCBoYXMgbWFkZSBhIGZhbHNlIGFmZmlkYXZpdCBvZgogICAgICAgICAgICAgICAgICAgIG9iamVjdGlvbnMgYmVmb3JlIHRoZSBhcmNob24gaW4gc3VwcG9ydCBvZiBoaXMgY2xhaW0uIDwvdHJhbnNsYXRpb24+"
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBpbmN1bWJlbnQgdXBvbiB1c+KAlHNpbmNlIHRoZSBsYXcgZ3JhbnRzIHRoZSByaWdodCBvZgogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3Npb24gdG8gdGhvc2UgbmVhcmVzdCBvZiBraW4sIGFuZCB3ZSBhcmUgcmVsYXRpdmVzIG9mIEFyY2hpYWRlcywgd2hvCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxseSBsZWZ0IHRoZSBlc3RhdGXigJRub3QgdG8gc3VmZmVyIGhpcyBob3VzZSB0byBiZWNvbWUgZXh0aW5jdCwKICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXJzLCB3aG8gaGFkIG5vIHJpZ2h0IHdoYXRldmVyIHRvIGl0LCB0byBpbmhlcml0IGhpcyBwcm9wZXJ0eTsgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50LCB3aG8gd2FzIG5laXRoZXIgYSBzb24gYnkgYmxvb2Qgb2YgdGhlIGRlY2Vhc2VkIG5vciBhIHNvbiBhZG9wdGVkCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHlvdXIgbGF3cywgYXMgSSBzaGFsbCBzaG93LCBoYXMgdGh1cyByZWNrbGVzc2x5IG1hZGUgYSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGFmZmlkYXZpdCwgYW5kIGlzIHNlZWtpbmcgdG8gcm9iIG1lIG9mIHRoZSBpbmhlcml0YW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB0byBjb21lIHRvIHRoZSBhaWQgb2YgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgYW5kIG15c2VsZiwgaWYgb3VyIHBsZWFkaW5nIHNoYWxsIHNlZW0ganVzdCwgYW5kIG5vdCBzdWZmZXIgbWVuIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBwb29yIGFuZCB3aXRob3V0IGluZmx1ZW5jZSB0byBiZSBjcnVzaGVkIGJ5IHRoZSBsYXdsZXNzIG1lbiBtYXJzaGFsbGVkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB1cy4gRm9yIHdlIGhhdmUgY29tZSBiZWZvcmUgeW91IHJlbHlpbmcgdXBvbiB0aGUgdHJ1dGgsIHdlbGwgY29udGVudCBpZiB3ZSBhcmUKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQgdG8gb2J0YWluIG91ciBsZWdhbCByaWdodHM7IHdoaWxlIG91ciBhZHZlcnNhcmllcyBoYXZlIGZyb20gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgY2Vhc2VkIHRvIHJlbHkgdXBvbiBpbnRyaWd1ZSBhbmQgdGhlIHNwZW5kaW5nIG9mIG1vbmV5LCBhbmQgdmVyeSBuYXR1cmFsbHkKICAgICAgICAgICAgICAgICAgICBpbiBteSBvcGluaW9uOyBmb3IgdGhleSByZWFkaWx5IG1ha2UgZXhwZW5kaXR1cmVzIGZyb20gZnVuZHMgd2hpY2ggYmVsb25nIHRvCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCBhbmQgc28gaGF2ZSBwcm92aWRlZCB0aGVtc2VsdmVzIHdpdGggYSBob3N0IG9mIHBlb3BsZSB3aG8gd2lsbCBzcGVhayBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGJlaGFsZiBhbmQgZ2l2ZSBmYWxzZSB0ZXN0aW1vbnkuIDwvdHJhbnNsYXRpb24+"
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGhlcmUg77yIIGZvciB0aGUgdHJ1dGggc2hhbGwgYmUgdG9sZCB5b3XvvIkgY29tZXMgaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0IHdpdGggbWFuaWZlc3Qgc2lnbnMgdGhhdCBoZSBpcywgYXMgeW91IGFyZSBhbGwgYXdhcmUsIGEgcG9vciBtYW4sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUga25vd3Mgbm90aGluZyBvZiBwbGVhZGluZyBpbiBjb3VydDsgZm9yIGhlIGhhcyBsb25nIGJlZW4gYSBwdWJsaWMgY3JpZXIgaW4KICAgICAgICAgICAgICAgICAgICBQZWlyYWV1cywgYW5kIHRoaXMgaXMgbm90IG9ubHkgYSBzaWduIG9mIHRoZSBwb3ZlcnR5IHdoaWNoIGlzIGNvbW1vbiB0byBtYW4sIGJ1dAogICAgICAgICAgICAgICAgICAgIGFsc28gb2YgdGhlIGZhY3QgdGhhdCBoZSBoYXMgbm8gdGltZSB0byBtZWRkbGUgd2l0aCB0aGUgbGF3OyBmb3IgYSBtYW4gc28KICAgICAgICAgICAgICAgICAgICBlbXBsb3llZCBoYXMgdG8gc3BlbmQgdGhlIHdob2xlIGRheSBpbiB0aGUgbWFya2V0LXBsYWNlLiBJZiB5b3UgYmVhciB0aGlzIGluCiAgICAgICAgICAgICAgICAgICAgbWluZCwgeW91IHdpbGwgYmUgZm9yY2VkIHRvIGNvbmNsdWRlIHRoYXQsIGlmIHdlIGRpZCBub3QgcmVseSB1cG9uIHRoZSBqdXN0aWNlCiAgICAgICAgICAgICAgICAgICAgb2Ygb3VyIGNhdXNlLCB3ZSBzaG91bGQgbmV2ZXIgaGF2ZSBjb21lIGJlZm9yZSB5b3UgYXQgYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaXRoIHJlZmVyZW5jZSB0bwogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgb2YgdGhpcyBuYXR1cmUgeW91IHdpbGwgZ2FpbiBjbGVhcmVyIGluZm9ybWF0aW9uIGluIHRoZSBjb3Vyc2Ugb2YgbXkKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLCBidXQgSSB0aGluayBJIG11c3Qgbm93IGluZm9ybSB5b3UgYWJvdXQgdGhlIGFmZmlkYXZpdCBhbmQgdGhlIGNhc2UgYXQKICAgICAgICAgICAgICAgICAgICBpc3N1ZS4gSWYsIG1lbiBvZiB0aGUganVyeSwgTGVvY2hhcmVzLCBiYXNpbmcgaGlzIGRlZmVuY2UgdXBvbiB0aGUgYWZmaWRhdml0CiAgICAgICAgICAgICAgICAgICAgaXRzZWxmLCB3ZXJlIGdvaW5nIHRvIHByb3ZlIHRoYXQgaGUgaXMgdGhlIGxhd2Z1bGx5IGJvcm4gc29uIG9mIEFyY2hpYWRlcywgdGhlcmUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBubyBuZWVkIG9mIG1hbnkgd29yZHMsIG5vciBhbnkgbmVlZCB0aGF0IEkgc2hvdWxkIHRyYWNlIG91ciBmYW1pbHkgbGluZQogICAgICAgICAgICAgICAgICAgIGJhY2sgdG8gaXRzIG9yaWdpbjsgPC90cmFuc2xhdGlvbj4="
translation['44.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzaW5jZSB0aGUgbWF0dGVycyBzd29ybgogICAgICAgICAgICAgICAgICAgIHRvIGluIHRoZSBhZmZpZGF2aXQgYXJlIG9mIGEgZGlmZmVyZW50IG5hdHVyZSwgYW5kIG1vc3Qgb2YgdGhlIGFyZ3VtZW50cyBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcmllcyB3aWxsIGJlIGRldm90ZWQgdG8gcHJvdmluZyB0aGF0IHRoZXkgd2VyZSBhZG9wdGVkIGFuZCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBwcm9wZXJseSBpbmhlcml0IHRoZSBlc3RhdGUgYnkgcmlnaHQgb2YgZGVzY2VudCBhcyBsYXdmdWwgY2hpbGRyZW4sIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IGZvciB0aGlzIHJlYXNvbiwgbWVuIG9mIHRoZSBqdXJ5LCB0byBnbyBiYWNrIGEgbGl0dGxlIHdheSBhbmQgaW5zdHJ1Y3QKICAgICAgICAgICAgICAgICAgICB5b3UgcmVnYXJkaW5nIHRoZSBwZWRpZ3JlZTsgZm9yIHdoZW4geW91IHVuZGVyc3RhbmQgdGhpcyBtYXR0ZXIgY2xlYXJseSwgdGhlcmUKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIG5vIGRhbmdlciBvZiB5b3VyIGJlaW5nIG1pc2xlZCBieSB0aGVpciBhcmd1bWVudHMuIDwvdHJhbnNsYXRpb24+"
translation['44.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlZlcnkgd2VsbCB0aGVuLCB0aGUgY2FzZSBiZWZvcmUgeW91IGlzIG9uZSB0byBzZXR0bGUKICAgICAgICAgICAgICAgICAgICB0aGUgdGl0bGUgdG8gYW4gaW5oZXJpdGFuY2UuIE91ciBjbGFpbSB0byB0aGUgZXN0YXRlIGlzIGJhc2VkIHVwb24gZGVzY2VudCwKICAgICAgICAgICAgICAgICAgICB0aGVpcnMgdXBvbiBhZG9wdGlvbi4gV2UgYWRtaXQgaGVyZSBpbiB5b3VyIHByZXNlbmNlIHRoYXQgYWxsIGFkb3B0aW9ucywgaWYKICAgICAgICAgICAgICAgICAgICByaWdodGx5IG1hZGUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXdzLCBvdWdodCB0byBiZSB2YWxpZC4gQmVhciBpbiBtaW5kLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgdGhlIGJhc2VzIHVwb24gd2hpY2ggb3VyIHJlc3BlY3RpdmUgY2xhaW1zIHJlc3QsIGFuZCBpZiB0aGV5IHByb3ZlIHRvCiAgICAgICAgICAgICAgICAgICAgeW91IHRoYXQgdGhlIGxhd3MgZ3JhbnQgd2hhdCB0aGV5IGhhdmUgc3dvcm4gaW4gdGhlaXIgYWZmaWRhdml0LCBhZGp1ZGdlIHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSB0byB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVuIGlmIHRoZXkgaGF2ZSBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydCBvZiB0aGUgbGF3cywgYnV0IGl0IHNlZW1zIHRvIHlvdSB0aGF0IHdoYXQgdGhleSBzYXkgaXMgaW4gYWNjb3JkYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGgganVzdGljZSBhbmQgZ2VuZXJvc2l0eSwgZXZlbiBzbyB3ZSB3aXRoZHJhdyBvdXIgY2xhaW0uIEhvd2V2ZXIsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGtub3cgdGhhdCwgd2hpbGUgd2UgYXJlIGJ5IGRlc2NlbnQgdGhlIG5lYXJlc3Qgb2Yga2luLCB3ZSBkbyBub3QgcmVzdCBvdXIKICAgICAgICAgICAgICAgICAgICBjYXNlIHVwb24gdGhpcyBhbG9uZSwgYnV0IHVwb24gYWxsIHRoZSBvdGhlciBncm91bmRzIGFzIHdlbGwsIEkgd2lsbCBmaXJzdAogICAgICAgICAgICAgICAgICAgIGluc3RydWN0IHlvdSByZWdhcmRpbmcgdGhlIGZhbWlseSBpdHNlbGYgZnJvbSB3aGljaCB0aGUgaW5oZXJpdGFuY2UgY29tZXM7IGZvciBJCiAgICAgICAgICAgICAgICAgICAgYW0gc3VyZSB0aGF0LCBpZiB5b3UgZm9sbG93IHdpdGggY2xlYXIgdW5kZXJzdGFuZGluZyB0aGlzIHBoYXNlIG9mIHRoZSBtYXR0ZXIgYXQKICAgICAgICAgICAgICAgICAgICBpc3N1ZSwgeW91IHdpbGwgaGF2ZSBubyBkaWZmaWN1bHR5IGluIGdyYXNwaW5nIGFueSBvZiB0aGUgb3RoZXIgZmFjdHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBnbyBiYWNrCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGJlZ2lubmluZywgbWVuIG9mIHRoZSBqdXJ5LCB0aGVyZSB3ZXJlIGJvcm4gdG8gRXV0aHltYWNodXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE90cnluw6osPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIDEgYWJvdmUuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHRocmVlIHNvbnMsIE1laWR5bGlkZXMgYW5kIEFyY2hpcHB1cyBhbmQgQXJjaGlhZGVzLCBhbmQgYSBkYXVnaHRlciB3aG9zZSBuYW1lCiAgICAgICAgICAgICAgICAgICAgd2FzIEFyY2hpZGljw6ouIEFmdGVyIHRoZSBkZWF0aCBvZiB0aGVpciBmYXRoZXIgdGhlIGJyb3RoZXJzIGdhdmUKICAgICAgICAgICAgICAgICAgICBBcmNoaWRpY8OqIGluIG1hcnJpYWdlIHRvIExlb3N0cmF0dXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGV1c2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGV1c2lzIj5FbGV1c2lzPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPiB3YXMgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBIaXBwb3Rob250aXMuPC9ub3RlPiA7IG9mIHRoZSB0aHJlZSBicm90aGVycyBBcmNoaXBwdXMgbG9zdCBoaXMgbGlmZQogICAgICAgICAgICAgICAgICAgIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPiB3YXMgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBIaXBwb3Rob250aXMuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXRoeW1uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWV0aHltbmEiPk1ldGh5bW5hPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWV0aHltbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1ldGh5bW5hIj5NZXRoeW1uYTwvcGxhY2VOYW1lPiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICB0b3duIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzIiPkxlc2JvczwvcGxhY2VOYW1lPi48L25vdGU+IHdoaWxlCiAgICAgICAgICAgICAgICAgICAgc2VydmluZyBhcyB0cmllcmFyY2gsIGFuZCBNZWlkeWxpZGVzIG5vdCBsb25nIGFmdGVyd2FyZCBtYXJyaWVkIE1uZXNpbWFjaGUsIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIEx5c2lwcHVzIG9mIENyaW9hLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWV0aHltbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1ldGh5bW5hIj5NZXRoeW1uYTwvcGxhY2VOYW1lPiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICB0b3duIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzIiPkxlc2JvczwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q3Jpb2Egd2FzIGEgZGVtZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgQW50aW9jaGlzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBoaW0gdGhlcmUgd2FzIGJvcm4gYSBkYXVnaHRlciwKICAgICAgICAgICAgICAgICAgICBDbGVpdG9tYWNow6ogYnkgbmFtZSwgd2hvbSBoZSB3aXNoZWQgdG8gZ2l2ZSBpbiBtYXJyaWFnZSB0byBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgd2hvIHdhcyBzdGlsbCB1bm1hcnJpZWQ7IGJ1dCBzaW5jZSBBcmNoaWFkZXMgZGVjbGFyZWQgdGhhdCBoZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgd2lzaCB0byBtYXJyeSwgYW5kIGZvciB0aGlzIHJlYXNvbiBhbGxvd2VkIHRoZSBwcm9wZXJ0eSB0byByZW1haW4gdW5kaXZpZGVkLCBhbmQKICAgICAgICAgICAgICAgICAgICBsaXZlZCBieSBoaW1zZWxmIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4sIE1laWR5bGlkZXMKICAgICAgICAgICAgICAgICAgICBhdCBsZW5ndGggZ2F2ZSBoaXMgZGF1Z2h0ZXIgaW4gbWFycmlhZ2UgdG8gQXJpc3RvdGVsZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFsbGVuw6osPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBhbGxlbsOqIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbWUgb2YgdGhlIHRyaWJlIEFudGlvY2hpcy48L25vdGU+IG15IGdyYW5kZmF0aGVyLiBPZiB0aGVtIHdlcmUgYm9ybiB0aHJlZQogICAgICAgICAgICAgICAgICAgIHNvbnMsIEFyaXN0b2RlbXVzIGhlcmUsIG15IGZhdGhlciwgYW5kIEhhYnJvbmljaHVzLCBteSB1bmNsZSwgYW5kIE1laWR5bGlkZXMsCiAgICAgICAgICAgICAgICAgICAgd2hvIGlzIG5vdyBkZWFkLiBPdXIgcmlnaHQgb2YgaW5oZXJpdGFuY2UsIGJhc2VkIG9uIGtpbnNoaXAgaW4gdGhlIGZhbWlseSB0bwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBlc3RhdGUgYmVsb25ncywgaXMsIG1lbiBvZiB0aGUganVyeSwgc3Vic3RhbnRpYWxseSB0aGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2UgYXJlIHRoZSBuZWFyZXN0IG9mIGtpbiB0byBBcmNoaWFkZXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFsZSBsaW5lLCBhbmQsIGFzIHdlIGRlZW1lZCBpdCByaWdodCBhY2NvcmRpbmcgdG8gdGhpcyBsYXcgdGhhdCB3ZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBpbmhlcml0IGhpcyBlc3RhdGUsIGFuZCBub3QgYWxsb3cgdGhlIGZhbWlseSB0byBiZSBicm91Z2h0IHRvIGV4dGluY3Rpb24sIHdlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBzdWl0IGZvciB0aGUgaW5oZXJpdGFuY2UgYmVmb3JlIHRoZSBhcmNob24uIE91ciBvcHBvbmVudHMsIHdobyBob2xkIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IHdpdGhvdXQgcmlnaHQsIGhhdmUgbm93IGZpbGVkIGFuIGFmZmlkYXZpdCBvZiBvYmplY3Rpb25zLCBiYXNpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlbnRpcmUgY2xhaW0gdXBvbiBhZG9wdGlvbiwgYnV0IGFsbGVnaW5nIGFsc28gdGhhdCB0aGV5IGFyZSBuZWFyIG9mIGtpbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHdpdGggcmVnYXJkIHRvIHRoaXMgYWRvcHRpb24sIHdlIHdpbGwKICAgICAgICAgICAgICAgICAgICBzaG93IHlvdSBwbGFpbmx5IGxhdGVyIG9uIHdoYXQgaXRzIGNoYXJhY3RlciB3YXM7IGJ1dCB3aXRoIHJlZmVyZW5jZSB0byBibG9vZAogICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uc2hpcCwgSSBtdXN0IHByb3ZlIHRvIHlvdSB0aGF0IHRoZXkgYXJlIG5vdCBuZWFyZXIgb2Yga2luIHRoYW4gd2UuIE9uZQogICAgICAgICAgICAgICAgICAgIHRoaW5nIGlzIGFkbWl0dGVkLCB0aGF0IGluIHRoZSBtYXR0ZXIgb2YgaW5oZXJpdGFuY2UgbWFsZXMgYW5kIHRob3NlIGRlc2NlbmRlZAogICAgICAgICAgICAgICAgICAgIGZyb20gbWFsZXMgaGF2ZSB0aGUgcHJlY2VkZW5jZSwgZm9yIHRoZSBsYXcgZXhwbGljaXRseSBnaXZlcyB0aGUgaW5oZXJpdGFuY2UgYXMKICAgICAgICAgICAgICAgICAgICB0aGVpciBkdWUgdG8gdGhlIG5lYXJlc3Qgb2Yga2luIGluIHRoZSBtYWxlIGxpbmUsIHdoZW4gdGhlcmUgYXJlIG5vIGNoaWxkcmVuLgogICAgICAgICAgICAgICAgICAgIFdlbGwsIGl0IGlzIHdlIHdobyBhbnN3ZXIgdGhpcyBkZXNjcmlwdGlvbjsgZm9yIEFyY2hpYWRlcyBpcyBhZG1pdHRlZCB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGllZCB3aXRob3V0IGlzc3VlLCBhbmQgd2UgYXJlIHRoZSBuZWFyZXN0IG9mIGtpbiB0byBoaW0gaW4gdGhlIG1hbGUgbGluZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlcm1vcmUsIHdlIGFyZSBhbHNvIGhpcyBuZWFyZXN0CiAgICAgICAgICAgICAgICAgICAgb2Yga2luIGluIHRoZSBmZW1hbGUgbGluZTsgZm9yIE1laWR5bGlkZXMgd2FzIHRoZSBicm90aGVyIG9mIEFyY2hpYWRlcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIE1laWR5bGlkZXMgd2FzIHRoZSBtb3RoZXIgb2YgbXkgZmF0aGVyLCBzbyB0aGF0IEFyY2hpYWRlcywgZm9yIHdob3NlCiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2Ugd2UgYXJlIG5vdyBwcm9zZWN1dGluZyBvdXIgY2xhaW0sIGlzIHVuY2xlIO+8iCB0aGVpciBmYXRoZXJzCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGJlZW4gYnJvdGhlcnPvvIkgdG8gdGhlIG1vdGhlciBvZiBteSBmYXRoZXIsIGhhdmluZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgcmVsYXRpb25zaGlwIGluIHRoZSBtYWxlIGxpbmUsIG5vdCBpbiB0aGUgZmVtYWxlIGxpbmUuIEJ1dCBMZW9zdHJhdHVzIGhlcmUgaXMgaW4KICAgICAgICAgICAgICAgICAgICBraW5zaGlwIGZ1cnRoZXIgcmVtb3ZlZCwgYW5kIGlzIHJlbGF0ZWQgdG8gQXJjaGlhZGVzIG9uIHRoZSBmZW1hbGUgc2lkZTsgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG1vdGhlciBvZiBMZW9jcmF0ZXMsIHRoZSBmYXRoZXIgb2YgdGhlIGRlZmVuZGFudCwgd2FzIG5pZWNlIHRvIHRoZSBBcmNoaWFkZXMgaW4KICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiBhbmQgdG8gTWVpZHlsaWRlcywgYXMgZGVzY2VuZGFudHMgb2Ygd2hvbSB3ZSBjbGFpbSB0aGUgcmlnaHQgdG8gd2luIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rmlyc3QsIG1lbiBvZiB0aGUganVyeSwgdG8gcHJvdmUgdGhhdCBvdXIgcGVkaWdyZWUgaXMgYXMgSSBoYXZlIHN0YXRlZCwgdGhlCiAgICAgICAgICAgICAgICAgICAgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb25zLCBhbmQgdGhlcmVhZnRlciB0aGUgbGF3IGl0c2VsZiB3aGljaCBhd2FyZHMKICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZXMgdG8gdGhlIGZhbWlsaWVzIGFuZCB0byB0aG9zZSBuZWFyZXN0IG9mIGtpbiBpbiB0aGUgbWFsZSBsaW5lLiBGb3IsCiAgICAgICAgICAgICAgICAgICAgSSB0YWtlIGl0LCB0aGVzZSBhcmUgdGhlIGVzc2VudGlhbCBwb2ludHMgaW4gdGhlIGNhc2UgYW5kIHRoZSBtYXR0ZXJzIHVwb24gd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3UgY2FzdCB5b3VyIHZvdGUgdW5kZXIgb2F0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCB0aGUgd2l0bmVzc2VzCiAgICAgICAgICAgICAgICAgICAgdXAgaGVyZSwgcGxlYXNlLCBhbmQgcmVhZCB0aGUgbGF3LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWF0dGVycwogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5pbmcgdGhlaXIgcGVkaWdyZWUgYW5kIGNvbmNlcm5pbmcgb3VycywgbWVuIG9mIHRoZSBqdXJ5LCBzdGFuZCB0aHVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBzbyBpdCBpcyByaWdodCB0aGF0IHRob3NlIHdobyBoYXZlIHByb3ZlZCBvbiB0aGUgYmFzaXMgb2YgdGhlIGFmZmlkYXZpdHMKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRoYXQgdGhleSBhcmUgbmVhcmVyIG9mIGtpbiwgc2hvdWxkIGhhdmUgdGhlIGluaGVyaXRhbmNlLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtYWRuZXNzIG9mIHRoZSBvbmUgd2hvIG1hZGUgdGhlIGFmZmlkYXZpdCBvZiBvYmplY3Rpb25zIHNob3VsZCBub3QgcHJvdmUKICAgICAgICAgICAgICAgICAgICBzdHJvbmdlciB0aGFuIHlvdXIgbGF3cy4gRm9yIGlmIHRoZXkgbGF5IHN0cmVzcyBvbiB0aGUgYWRvcHRpb24sIHRoZSBuYXR1cmUgb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCBJIHNoYWxsIG1ha2UgY2xlYXIgdG8geW91LCB5ZXQgc3VyZWx5IGFmdGVyIHRoZSBkZWF0aCB3aXRob3V0IGlzc3VlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFkb3B0ZWQgc29uLCB3aGVuIHRoZSBob3VzZSB1cCB0byB0aGUgZmlsaW5nIG9mIG91ciBzdWl0IGhhZCBiZWNvbWUgZXh0aW5jdCwgaXQKICAgICAgICAgICAgICAgICAgICBpcyByaWdodCB0aGF0IHRob3NlIHdobyBhcmUgbmVhcmVzdCBvZiBraW4gc2hvdWxkIHJlY2VpdmUgdGhlIGluaGVyaXRhbmNlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBzaG91bGQgZ2l2ZSB5b3VyIGFpZCwgbm90IHRvIHRob3NlIGNpdGl6ZW5zIHdobyBhcmUgYWJsZSB0byBnZXQgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgc3Ryb25nZXN0IGJhY2tpbmcsIGJ1dCB0byB0aG9zZSB3aG8gYXJlIHN1ZmZlcmluZyB3cm9uZy4gPC90cmFuc2xhdGlvbj4="
translation['44.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCBoYWQgYmVlbiBpbiBvdXIgcG93ZXIsIGFmdGVyIHNldHRpbmcgZm9ydGgKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHJlZ2FyZGluZyB0aGUgcGVkaWdyZWUgYW5kIHRoZSBhZmZpZGF2aXQgaXRzZWxmLCB0byBsZWF2ZSB0aGUgcGxhdGZvcm0sCiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIGhhdmUgbm8gbmVlZCBvZiBmdXJ0aGVyIHdvcmRzLCBzaW5jZSBwcmFjdGljYWxseSB0aGUgbW9zdCBpbXBvcnRhbnQKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgd291bGQgaGF2ZSBiZWVuIGFkdmFuY2VkLCB3ZSBzaG91bGQgbm90IHRyb3VibGUgeW91IGZ1cnRoZXIuIEJ1dCBzaW5jZQogICAgICAgICAgICAgICAgICAgIG91ciBvcHBvbmVudHMgd2lsbCBub3QgcmVseSB1cG9uIHRoZSBsYXdzLCBidXQgdGhyb3VnaCBoYXZpbmcgZm9yZXN0YWxsZWQgdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZ290IHNvbWUgY29udHJvbCBvZiB0aGUgc2l0dWF0aW9uIGxvbmcgYWdvLCBhbmQgdGhyb3VnaCBoYXZpbmcgZW50ZXJlZCBpbnRvCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGUgZXN0YXRlLCB3aWxsIHVzZSB0aGVzZSBmYWN0cyBhcyBwcm9vZnMsIGFuZCBkZWNsYXJlIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSB0aGUgaGVpcnMsIGl0IGlzIHBlcmhhcHMgbmVjZXNzYXJ5IHRvIGRpc2N1c3MgdGhlc2UgbWF0dGVycyBhcyB3ZWxsLCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IG9mIGFsbCBodW1hbmtpbmQgb3VyIG9wcG9uZW50cyBhcmUgdGhlIG1vc3QgYXJiaXRyYXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['44.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gZ28gYmFjayB0byB0aGUKICAgICAgICAgICAgICAgICAgICBiZWdpbm5pbmcsIG1lbiBvZiB0aGUganVyeSwgTWVpZHlsaWRlcyBhbmQgQXJjaGlhZGVzIGdhdmUgdGhlaXIgc2lzdGVyIGluCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgdG8gTGVvc3RyYXR1cyBvZiBFbGV1c2lzOyBhbmQgYWZ0ZXIgYSB0aW1lIGZyb20gdGhpcyBzaXN0ZXIgb2YgdGhlaXJzLAogICAgICAgICAgICAgICAgICAgIHRodXMgZ2l2ZW4gaW4gbWFycmlhZ2UsIHRoZXJlIHdhcyBib3JuIExlb2NyYXRlcywgdGhlIElhdGhlciBvZiB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgTGVvc3RyYXR1czsgb2JzZXJ2ZSBob3cgZGlzdGFudGx5IHJlbGF0ZWQgaGUgaXMgdG8gQXJjaGlhZGVzLCByZWdhcmRpbmcgd2hvbQogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBmaWxlZCB0aGUgYWZmaWRhdml0IG9mIG9iamVjdGlvbnMuIFdoZW4gbWF0dGVycyB3ZXJlIGFzIEkgaGF2ZSBzdGF0ZWQsCiAgICAgICAgICAgICAgICAgICAgQXJjaGlhZGVzIGRpZCBub3QgbWFycnksIGJ1dCBoaXMgYnJvdGhlciBNZWlkeWxpZGVzLCB0aGUgZ3JhbmRmYXRoZXIgb2YgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaGVyZSwgZGlkIG1hcnJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['44.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IG1hZGUgYXMgeWV0IG5vCiAgICAgICAgICAgICAgICAgICAgZGl2aXNpb24gb2YgdGhlIHByb3BlcnR5LCBidXQsIGJvdGggaGF2aW5nIGVub3VnaCB0byBsaXZlIG9uLCBNZWlkeWxpZGVzCiAgICAgICAgICAgICAgICAgICAgY29udGludWVkIHRvIGxpdmUgaW4gdGhlIGNpdHksIGFuZCBBcmNoaWFkZXMgbWFkZSBoaXMgaG9tZSBpbiBTYWxhbWlzLiBOb3QgbG9uZwogICAgICAgICAgICAgICAgICAgIGFmdGVyd2FyZCwgd2hlbiBNZWlkeWxpZGVzLCBteSBmYXRoZXIncyBncmFuZGZhdGhlciwgaGFwcGVuZWQgdG8gZ28gb24gYSBqb3VybmV5CiAgICAgICAgICAgICAgICAgICAgb3V0IG9mIHRoZSBjb3VudHJ5LCBBcmNoaWFkZXMgZmVsbCBzaWNrLCBhbmQgZGllZCBkdXJpbmcgdGhlIGFic2VuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBNZWlkeWxpZGVzLCBiZWluZyBzdGlsbCB1bm1hcnJpZWQuIFdoYXQgaXMgdGhlIHByb29mIG9mIHRoaXM/IEEgbWFpZGVuIGJlYXJpbmcKICAgICAgICAgICAgICAgICAgICBhbiB1cm4gZm9yIHdhdGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlIGFyZSB0b2xkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBvbGwuIDguNjYiPlBvbGx1eCBPbm9tYXN0aWNvbiA4LjY2PC9iaWJsPiB0aGF0IHRoZSBmaWd1cmUgb2YgYQogICAgICAgICAgICAgICAgICAgICAgICBtYWlkZW4gYmVhcmluZyBhIHdhdGVyLXBpdGNoZXIgd2FzIHBsYWNlZCBvdmVyIHRoZSB0b21icyBvZiBtZW4gd2hvIGRpZWQKICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXJyaWVkLiBPdGhlciBhdXRob3JpdGllcyBzdGF0ZSB0aGF0IHRoZSBmaWd1cmUgd2FzIHRoYXQgb2YgYSB5b3V0aCwgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGEgbWFpZGVuLjwvbm90ZT4gc3RhbmRzIHVwb24gdGhlIHRvbWIgb2YgQXJjaGlhZGVzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQb2xsLiA4LjY2Ij5Qb2xsdXggT25vbWFzdGljb24gOC42NjwvYmlibD4gdGhhdCB0aGUgZmlndXJlIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgbWFpZGVuIGJlYXJpbmcgYSB3YXRlci1waXRjaGVyIHdhcyBwbGFjZWQgb3ZlciB0aGUgdG9tYnMgb2YgbWVuIHdobyBkaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIHVubWFycmllZC4gT3RoZXIgYXV0aG9yaXRpZXMgc3RhdGUgdGhhdCB0aGUgZmlndXJlIHdhcyB0aGF0IG9mIGEgeW91dGgsIG5vdAogICAgICAgICAgICAgICAgICAgICAgICBvZiBhIG1haWRlbi48L3RyYW5zbGF0aW9uPg=="
translation['44.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIGp1bmN0dXJlIExlb2NyYXRlcywgdGhlIGZhdGhlciBvZiBMZW9zdHJhdHVzCiAgICAgICAgICAgICAgICAgICAgaGVyZSwgb24gdGhlIHByZXRleHQgb2YgaGlzIHJlbGF0aW9uc2hpcCBvbiB0aGUgZmVtYWxlIHNpZGUsIGdvdCBoaW1zZWxmIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICBhcyBzb24gdG8gQXJjaGlhZGVzLCBhbmQgc28gZW50ZXJlZCBpbnRvIHBvc3Nlc3Npb24gb2YgdGhlIGVzdGF0ZSwgYXMgdGhvdWdoIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gYWRvcHRlZCBieSBBcmNoaWFkZXMgZHVyaW5nIGhpcyBsaWZldGltZS4gV2hlbiBNZWlkeWxpZGVzIHJldHVybmVkLCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBpbmNlbnNlZCBhdCB3aGF0IGhhZCBiZWVuIGRvbmUsIGFuZCB3YXMgaW4gYSBtb29kIHRvIGVudGVyIHN1aXQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIExlb2NyYXRlczsgYnV0IHVuZGVyIHRoZSBwZXJzdWFzaW9uIG9mIGhpcyByZWxhdGl2ZXMgYW5kIHRoZWlyIHBsZWFzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgc3VmZmVyIExlb2NyYXRlcyB0byByZW1haW4gaW4gdGhlIGZhbWlseSBhcyB0aGUgc29uIGJ5IGFkb3B0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgQXJjaGlhZGVzLCBoZSB5aWVsZGVkIHRoZSBwb2ludCzigJRub3QgdGhyb3VnaCBsb3NpbmcgaGlzIGNhc2UgaW4gY291cnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFic29sdXRlbHkgdGhyb3VnaCBiZWluZyBkZWNlaXZlZCBieSB0aGVzZSBtZW4gaGVyZSBhbmQgcGFydGx5IGFsc28gdGhyb3VnaAogICAgICAgICAgICAgICAgICAgIGdpdmluZyB3YXkgdG8gdGhlIHBlcnN1YXNpb24gb2YgaGlzIHJlbGF0aXZlcy4gPC90cmFuc2xhdGlvbj4="
translation['44.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGV4cGVyaWVuY2UgTWVpZHlsaWRlcyBkaWVkLCBhbmQgTGVvY3JhdGVzIGNvbnRpbnVlZCBpbiBwb3NzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGVzdGF0ZSBvZiBBcmNoaWFkZXMsIGFuZCBjb25kdWN0ZWQgaGltc2VsZiBhcyBoZWlyIGZvciBtYW55IHllYXJzLCBhcwogICAgICAgICAgICAgICAgICAgIGJlaW5nIGhpcyBhZG9wdGVkIHNvbjsgYW5kIHdlLCBvbiBvdXIgcGFydCwgaW5hc211Y2ggYXMgTWVpZHlsaWRlcyBoYWQgbWFkZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgY29uY2Vzc2lvbiwgcmVmcmFpbmVkIGZyb20gYWN0aW9uLiBObyBsb25nIHRpbWUgYWZ0ZXJ3YXJkcywKICAgICAgICAgICAgICAgICAgICBob3dldmVyLOKAlGFuZCBub3csIG1lbiBvZiB0aGUganVyeSwgcGF5IGNsb3NlIGhlZWQgdG8gd2hhdCBJIGFtIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdG8gc2F54oCUIDwvdHJhbnNsYXRpb24+"
translation['44.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5MZW9jcmF0ZXMsIHdobyBoYWQgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgc29uIGJ5IGFkb3B0aW9uIHRvIEFyY2hpYWRlcywgaGltc2VsZiByZXR1cm5lZCB0byB0aGUgRWxldXNpbmlhbnMsIHRvIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbGx5IGJlbG9uZ2VkLCBsZWF2aW5nIExlb3N0cmF0dXMgaGVyZSBpbiB0aGUgZmFtaWx5IGFzIGEgbGF3ZnVsbHkgYm9ybgogICAgICAgICAgICAgICAgICAgIHNvbi4gRXZlbiB0aGVuIHdlIGRpZCBub3QgYXMgeWV0IGRpc3R1cmIgYW55IG9mIHRoZSBhcnJhbmdlbWVudHMgcmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgYnV0IGNvbnRpbnVlZCBhcyBiZWZvcmUuIDwvdHJhbnNsYXRpb24+"
translation['44.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIG5vdywKICAgICAgICAgICAgICAgICAgICBMZW9zdHJhdHVzIGhlcmUsIGFsdGhvdWdoIGhlIHdhcyBhbiBhZG9wdGVkIHNvbiBhbmQgaGFkIGJlZW4gbGVmdCBpbiB0aGUgZmFtaWx5CiAgICAgICAgICAgICAgICAgICAgb2YgQXJjaGlhZGVzLCBoaW1zZWxmIHJldHVybmVkLCBhcyBoaXMgZmF0aGVyIGhhZCBkb25lLCB0byB0aGUgRWxldXNpbmlhbnMsCiAgICAgICAgICAgICAgICAgICAgbGVhdmluZyBpbiBoaXMgcGxhY2UgYSBsYXdmdWxseSBib3JuIHNvbiwgYW5kLCBpbiBkZWZpYW5jZSBvZiB0aGUgbGF3cywgc2V0dGluZwogICAgICAgICAgICAgICAgICAgIHVwIHRoZSBvcmlnaW5hbCBhZG9wdGlvbiBhcyB2YWxpZCB0aHJvdWdoIHRoZSBsaXZlcyBvZiB0aHJlZSBwZXJzb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaG93IGNvdWxkIGl0IGJlIG90aGVyIHRoYW4gY29udHJhcnkgdG8gdGhlIGxhd3MsCiAgICAgICAgICAgICAgICAgICAgd2hlbiBvbmUsIGJlaW5nIGhpbXNlbGYgYW4gYWRvcHRlZCBzb24sIHJldHVybmVkIHRvIGhpcyBvcmlnaW5hbCBmYW1pbHkgbGVhdmluZwogICAgICAgICAgICAgICAgICAgIGFkb3B0ZWQgc29ucyBpbiBoaXMgcGxhY2U/IFRoYXQgaXMgd2hhdCBMZW9zdHJhdHVzIGhhcyBkb25lIHVwIHRvIHRoaXMgZGF5LCBhbmQKICAgICAgICAgICAgICAgICAgICBieSB0aGlzIG1lYW5zIHRoZXkgdGhpbmsgdG8gcm9iIHVzIG9mIG91ciBpbmhlcml0YW5jZSwgbWFraW5nIHByb2ZpdCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSBvZiBBcmNoaWFkZXMsIGFuZCBzdXBwb3J0aW5nIHRoZWlyIGNoaWxkcmVuIGJ5IGl0LCBhbmQgYWx3YXlzIHJldHVybmluZwogICAgICAgICAgICAgICAgICAgIGZyb20gaXQgdG8gdGhlIGVzdGF0ZSBvZiB0aGVpciBmYXRoZXJzLCBrZWVwaW5nIHRoYXQgaW50YWN0LCB3aGlsZSBzcGVuZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['44.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBtYXR0ZXJzIHdlcmUgaW4gdGhpcyBjb25kaXRpb24sIGFzIEkgaGF2ZSB0b2xkIHlvdSwgd2UKICAgICAgICAgICAgICAgICAgICBzdWJtaXR0ZWQgdG8gZXZlcnl0aGluZy4gVW50aWwgd2hlbj8gVW50aWwgTGVvY3JhdGVzLCB3aG8gaGFkIGJlZW4gbGVmdCBieQogICAgICAgICAgICAgICAgICAgIExlb3N0cmF0dXMgaW4gdGhlIGhvdXNlIGFzIGEgc29uLCBkaWVkIHdpdGhvdXQgaXNzdWUuIEJ1dCBzaW5jZSBoZSBkaWVkIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBpc3N1ZSwgd2UsIHdobyBhcmUgbmVhcmVzdCBvZiBraW4gdG8gQXJjaGlhZGVzLCBjbGFpbSB0byBpbmhlcml0IHRoZSBwcm9wZXJ0eTsKICAgICAgICAgICAgICAgICAgICBhbmQgd2UgY2xhaW0gdGhhdCB0aGUgZGVmZW5kYW50IGNhbm5vdCwgaW4gb3JkZXIgdG8gcm9iIHVzIG9mIHdoYXQgaXMgb3VycywgZ2l2ZQogICAgICAgICAgICAgICAgICAgIGFuIGFkb3B0ZWQgc29uIHRvIHRoZSBkZWFkIG1hbiB3aG8gd2FzIGhpbXNlbGYgYWRvcHRlZC4gPC90cmFuc2xhdGlvbj4="
translation['44.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgTGVvY3JhdGVzIGhhZCBoaW1zZWxmIGFkb3B0ZWQgYSBzb24gZHVyaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIGxpZmV0aW1lLCBldmVuIHRob3VnaCB0aGUgYWN0aW9uIHdhcyBjb250cmFyeSB0byBsYXcsIHdlIHNob3VsZCBoYXZlIG1hZGUgbm8KICAgICAgICAgICAgICAgICAgICBwcm90ZXN0OyBidXQgc2luY2UgaGUgaGFkIG5vIHNvbiBib3JuIHRvIGhpbSwgbm9yIGhhZCBhZG9wdGVkIG9uZSBkdXJpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgbGlmZXRpbWUsIGFuZCBhcyB0aGUgbGF3IGdpdmVzIGluaGVyaXRhbmNlcyB0byB0aGUgbmVhcmVzdCBvZiBraW4sIGhvdyBjYW4gaXQgYmUKICAgICAgICAgICAgICAgICAgICBvdGhlciB0aGFuIHJpZ2h0IHRoYXQgd2Ugc2hvdWxkIG5vdCBiZSByb2JiZWQgb2YgdGhpcyBpbmhlcml0YW5jZSwgdG8gd2hpY2ggd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGEgZG91YmxlIHRpdGxlPyA8L3RyYW5zbGF0aW9uPg=="
translation['44.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2UgYXJlIG5lYXJlc3Qgb2Yga2luCiAgICAgICAgICAgICAgICAgICAgdG8gQXJjaGlhZGVzLCB0byB3aG9tIHRoZSBwcm9wZXJ0eSBvcmlnaW5hbGx5IGJlbG9uZ2VkLCBhbmQgYWxzbyB0byB0aGUgYWRvcHRlZAogICAgICAgICAgICAgICAgICAgIExlb2NyYXRlczsgZm9yIGhpcyBmYXRoZXIsIHNlZWluZyB0aGF0IGhlIGhhcyByZXR1cm5lZCB0byB0aGUgRWxldXNpbmlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgZG9lcyBub3QgaW5kaWNhdGUgYSBtZXJlIGNoYW5nZSBvZgogICAgICAgICAgICAgICAgICAgICAgICByZXNpZGVuY2UuIEhlIHJlbm91bmNlZCBoaXMgbWVtYmVyc2hpcCBpbiB0aGUgZGVtZSBPdHJ5bsOqLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lZCBtZW1iZXJzaGlwIGluIHRoZSBFbGV1c2luaWFuIGRlbWUuIEJ5IHNvIGRvaW5nLCBoZSByZWxpbnF1aXNoZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1lciBsZWdhbCByZWxhdGlvbnNoaXAuPC9ub3RlPiBubyBsb25nZXIgcmV0YWluZWQgaGlzIGxlZ2FsIHJlbGF0aW9uc2hpcCwKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIHdlLCB0byB3aG9zZSBmYW1pbHkgaGUgaGFkIGNvbWUgdG8gYmVsb25nLCBoYWQgdGhlIGNsb3Nlc3QgcmVsYXRpb25zaGlwLAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGNoaWxkcmVuIG9mIHRoYXQgZmF0aGVyJ3MgZmlyc3QgY291c2luLiBTbywgaWYgeW91IGxpa2UsIHdlIGNsYWltIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlIGFzIGtpbnNtZW4gb2YgQXJjaGlhZGVzLCBvciwgaWYgeW91IGxpa2UgaXQgYmV0dGVyLCBhcyBraW5zbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgTGVvY3JhdGVzOyBmb3Igc2luY2UgaGUgZGllZCB3aXRob3V0IGlzc3VlLCBubyBvbmUgaXMgbmVhcmVyIG9mIGtpbiB0aGFuIHdlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmYXIgYXMgeW91IGFyZSBjb25jZXJuZWQsIExlb3N0cmF0dXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhbWlseSBoYXMgYmVjb21lIGV4dGluY3Q7IGZvciB5b3Ugc291Z2h0IHRvIG1haW50YWluIGEgcmVsYXRpb25zaGlwIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHksIG5vdCB3aXRoIHRob3NlIHdobyBhZG9wdGVkIHlvdS4gQWZ0ZXIgdGhlIGRlYXRoIG9mIExlb2NyYXRlcywgc28KICAgICAgICAgICAgICAgICAgICBsb25nIGFzIG5vIG9uZSBsYWlkIGNsYWltIHRvIHRoZSBlc3RhdGUsIHlvdSBzb3VnaHQgdG8gZ2V0IG5vIG9uZSBhZG9wdGVkIGFzIGEKICAgICAgICAgICAgICAgICAgICBzb24gdG8gQXJjaGlhZGVzOyBidXQgbm93IHRoYXQgd2UgaGF2ZSBjb21lIGZvcndhcmQgYXMga2luc21lbiwgdGhlbiB5b3UgZ2V0IG9uZQogICAgICAgICAgICAgICAgICAgIGFkb3B0ZWQsIHRoYXQgeW91IG1heSBnZXQgcG9zc2Vzc2lvbiBvZiB0aGUgcHJvcGVydHkuIEFuZCB5b3UgZGVjbGFyZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXJjaGlhZGVzLCBpbnRvIHdob3NlIGhvdXNlIHlvdSB3ZXJlIGFkb3B0ZWQsIGhhZCBubyBwcm9wZXJ0eSwgeWV0IHlvdSBmaWxlIGFuCiAgICAgICAgICAgICAgICAgICAgYWZmaWRhdml0IG9mIG9iamVjdGlvbnMgYWdhaW5zdCB1cywgc2Vla2luZyB0byBleGNsdWRlIGhpcyBhY2tub3dsZWRnZWQga2luZHJlZC4KICAgICAgICAgICAgICAgICAgICBJZiB0aGVyZSBpcyBub3RoaW5nIGluIHRoZSBlc3RhdGUsIHdoZXJlaW4gZG8geW91IHN1ZmZlciBsb3NzLCBpZiB3ZSBpbmhlcml0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBub3RoaW5nPyA8L3RyYW5zbGF0aW9uPg=="
translation['44.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGZhY3QgaXMsIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCB0aGF0IGhpcyBpbXB1ZGVuY2UgYW5kIGdyZWVkIGFyZSBzdWNoIHRoYXQgaGUgdGhpbmtzIGl0IGlzIGxlZ2l0aW1hdGUgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIHJldHVybiB0byB0aGUgRWxldXNpbmlhbnMgYW5kIHJldGFpbiB0aGUgZXN0YXRlIG9mIGhpcyBmYXRoZXJzLCBhbmQgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSB0aW1lIHRvIGJlIG1hc3RlciBvZiB0aGF0IGludG8gd2hpY2ggaGUgd2FzIGludHJvZHVjZWQgYnkgYWRvcHRpb24sCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYmVpbmcgbm8gc29uIGluIHRoZSBmYW1pbHkuIEFuZCBhbGwgdGhpcyBoZSBlYXNpbHkgbWFuYWdlZCwgZm9yIG92ZXIgdXMsCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBwb29yIG1lbiBhbmQgbWVuIHdpdGhvdXQgaW5mbHVlbmNlLCBoZSBoYXMgYSBncmVhdCBhZHZhbnRhZ2UsIHNpbmNlIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgYWJsZSB0byBzcGVuZCB3aGF0IGJlbG9uZ3MgdG8gb3RoZXJzLiBJIGNvbnNpZGVyLCB0aGVyZWZvcmUsIHRoYXQgaXQgaXMgeW91cgogICAgICAgICAgICAgICAgICAgIGR1dHksIG1lbiBvZiB0aGUganVyeSwgdG8gZ2l2ZSBhaWQgdG8gdXMgd2hvIGFyZSBub3Qgc2Vla2luZyB0byBnYWluIGFuCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlIG92ZXIgb3RoZXJzLCBidXQgd2hvIGFyZSBjb250ZW50IGlmIHdlIGFyZSBhbGxvd2VkIHRvIHdpbiBvdXIgbGVnYWwKICAgICAgICAgICAgICAgICAgICByaWdodHMuIDwvdHJhbnNsYXRpb24+"
translation['44.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdCBhcmUgd2UgdG8gZG8sIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5PyBXaGVuIHRoZSBhZG9wdGlvbiBoYXMgYmVlbiBjb250aW51ZWQgdGhyb3VnaCB0aHJlZSBwZXJzb25zLCBhbmQgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIGxhc3QgbGVmdCBpbiB0aGUgZmFtaWx5IGhhcyBkaWVkIHdpdGhvdXQgaXNzdWUsIGFyZSB3ZSBub3QgYXQgdGhlIGxhc3QgdG8KICAgICAgICAgICAgICAgICAgICByZWNvdmVyIHdoYXQgaXMgb3VyIG93bj8gV2VsbCB0aGVuLCBoYXZpbmcgdGhpcyBqdXN0IGNsYWltLCB3ZSBicm91Z2h0IHN1aXQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGluaGVyaXRhbmNlIGJlZm9yZSB0aGUgYXJjaG9uLiBCdXQgdGhpcyBmZWxsb3cgTGVvY2hhcmVzIGhlcmUsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGxpZ2h0bHkgc3dvcm4gYSBmYWxzZSBhZmZpZGF2aXQsIHRoaW5rcyB0aGF0IGhlIGhhcyB0aGUgcmlnaHQgdG8gcm9iIHVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlIGluIGRlZmlhbmNlIG9mIGFsbCB0aGUgbGF3cy4gPC90cmFuc2xhdGlvbj4="
translation['44.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rmlyc3QsIHRoZW4sIHRvIHByb3ZlIHRoYXQgd2hhdCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVkIGFib3V0IHRoZSBhZG9wdGlvbnMgYW5kIHRoZSBwZWRpZ3JlZSBvZiB0aGVzZSBtZW4gaXMgdHJ1ZSwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2F0ZXItYmVhcmVyIGRvZXMgc3RhbmQgdXBvbiB0aGUgdG9tYiBvZiBBcmNoaWFkZXMsIHdlIHdpc2ggdG8gcmVhZCB0byB5b3UgdGhlc2UKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy4gQWZ0ZXIgdGhhdCB3ZSB3aWxsIGluc3RydWN0IHlvdSBwbGFpbmx5IHJlZ2FyZGluZyB0aGUgcmVtYWluaW5nCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBhcyB3ZWxsLCBhbmQgc28gY29udmljdCBvdXIgb3Bwb25lbnRzIG9mIGhhdmluZyBzd29ybiBhIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGFmZmlkYXZpdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSwgcGxlYXNlLCB0aGUgZGVwb3NpdGlvbnMgb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCBJIHNwZWFrLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICByZWFsIG1lYW5pbmcgb2YgdGhpcyBhZmZhaXIsIG1lbiBvZiB0aGUganVyeSwgYW5kIHN1Y2ggdGhlIGxlZ2FsIHJpZ2h0cyBvZgogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLCBwbGFpbmx5IHN0YXRlZDsgYW5kIHlvdSBoYXZlIGFsc28gaGVhcmQgd2hhdCBhbW91bnRzIHRvIGEgc3VtbWFyeQogICAgICAgICAgICAgICAgICAgIG9mIGFsbCB0aGF0IGhhcyBiZWVuIGRvbmUgZnJvbSB0aGUgc3RhcnQuIEJ1dCBJIGNvbnNpZGVyIGl0IG5lY2Vzc2FyeSB0byB0ZWxsCiAgICAgICAgICAgICAgICAgICAgeW91IGFsc28gb2Ygd2hhdCB0aGV5IGhhdmUgZG9uZSBzaW5jZSB0aGUgc3VpdCBmb3IgdGhlIGluaGVyaXRhbmNlIHdhcwogICAgICAgICAgICAgICAgICAgIGluc3RpdHV0ZWQsIGFuZCB0aGUgbWFubmVyIGluIHdoaWNoIHRoZXkgaGF2ZSB0cmVhdGVkIHVzOyBmb3IgaW4gbXkgb3BpbmlvbiBubwogICAgICAgICAgICAgICAgICAgIG90aGVyIHBlb3BsZSBoYXZlIGV2ZXIgaW4gYW4gaW5oZXJpdGFuY2Ugc3VpdCBiZWVuIGRlYWx0IHdpdGggaW4gYSBtYW5uZXIgc28KICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byBsYXcgYXMgd2UgaGF2ZSBiZWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbgogICAgICAgICAgICAgICAgICAgIExlb2NyYXRlcyBkaWVkLCBhbmQgaGlzIGZ1bmVyYWwgaGFkIHRha2VuIHBsYWNlLCBhbmQgd2Ugd2VudCB0byB0YWtlIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiBoaXMgcHJvcGVydHksIHNpbmNlIGhlIGhhZCBkaWVkIHdpdGhvdXQgaXNzdWUgYW5kIHVubWFycmllZCwgTGVvc3RyYXR1cyBoZXJlCiAgICAgICAgICAgICAgICAgICAgZWplY3RlZCB1cywgZGVjbGFyaW5nIHRoYXQgaXQgYmVsb25nZWQgdG8gaGltLiBOb3cgaGlzIHByZXZlbnRpbmcgdXMgZnJvbQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1pbmcgYW55IG9mIHRoZSBwcm9wZXIgcml0ZXMgZm9yIHRoZSBkZWNlYXNlZCBpcyBwZXJoYXBzIHRvIGJlIGV4Y3VzZWQsCiAgICAgICAgICAgICAgICAgICAgc2VlaW5nIHRoYXQgaGUgd2FzIGhpcyBmYXRoZXIsIGFsdGhvdWdoIHRoZSBhY3Qgd2FzIGNvbnRyYXJ5IHRvIGxhdzsgZm9yIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVyIHRoYXQgdGhlIGNhcmUgb2YgdGhlIGZ1bmVyYWwgc2hvdWxkIGJlIGNvbW1pdHRlZCB0byB0aGUgbmF0dXJhbCBmYXRoZXIsCiAgICAgICAgICAgICAgICAgICAgYnV0LCBuZXh0IGFmdGVyIGhpbSwgYWxzbyB0byB1cyB0aGUgbWVtYmVycyBvZiB0aGUgZmFtaWx5IHRvIHdob20gdGhlIGRlY2Vhc2VkCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlbGF0ZWQgYnkgdmlydHVlIG9mIHRoZSBhZG9wdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['44.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgZnVuZXJhbCByaXRlcyB3ZXJlIGZpbmlzaGVkLCB3aGF0IGxhdyB3aWxsIGJlIGZvdW5kIHRvIGp1c3RpZnkgaGltLAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGZhbWlseSB3YXMgZXh0aW5jdCwgaW4gZHJpdmluZyB1cywgdGhlIG5lYXJlc3Qgb2Yga2luLCBmcm9tIHRoZSBlc3RhdGUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZGVjZWFzZWQ/IEJlY2F1c2UsIHRoZXkgd2lsbCBzYXksIGhlIHdhcyBmYXRoZXIgdG8gdGhlIGRlYWQgbWFuLiBZZXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCByZXR1cm5lZCB0byB0aGUgZmFtaWx5IG9mIGhpcyBmYXRoZXJzLCBhbmQgd2FzIG5vIGxvbmdlciBtYXN0ZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlIG92ZXIgd2hpY2ggaGUgaGFkIGxlZnQgaGlzIHNvbiBpbiBjaGFyZ2UuIE90aGVyd2lzZSB3aGF0IGlzIHRoZSB1c2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3cz8gPC90cmFuc2xhdGlvbj4="
translation['44.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCBhZnRlciBvdXIgZWplY3RtZW50IGhhZCB0YWtlbgogICAgICAgICAgICAgICAgICAgIHBsYWNlIO+8iCB0byBvbWl0IG1vc3Qgb2YgdGhlIGRldGFpbHPvvIkgd2UgYnJvdWdodCBzdWl0IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZSBiZWZvcmUgdGhlIGFyY2hvbiwgaW5hc211Y2ggYXMgdGhlIGRlY2Vhc2VkIGhhZCBubyBzb24sIGFzIEkgc3RhdGVkLAogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgbm90IGFkb3B0ZWQgYW55IGFjY29yZGluZyB0byB0aGUgbGF3cy4gQWZ0ZXIgdGhpcywgTGVvc3RyYXR1cyBoZXJlIG1hZGUKICAgICAgICAgICAgICAgICAgICBhIGRlcG9zaXQgZm9yIGNvc3RzLCBhcyBiZWluZyB0aGUgc29uIG9mIHRoZSBhZm9yZXNhaWQgQXJjaGlhZGVzLCBub3QgdGFraW5nCiAgICAgICAgICAgICAgICAgICAgaW50byBhY2NvdW50IHRoYXQgaGUgaGFkIHJldHVybmVkIHRvIHRoZSBFbGV1c2luaWFucywgb3IgdGhhdCBhZG9wdGVkIGNoaWxkcmVuCiAgICAgICAgICAgICAgICAgICAgYXJlIG1hZGUgc3VjaCwgbm90IGJ5IHRoZW1zZWx2ZXMgYnV0IGJ5IHRob3NlIHdobyBhZG9wdCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHRydXRoIGlzLCBJIHByZXN1bWUgaGlzIG9uZSBzaW1wbGUgaWRlYSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIG11c3QgYnkgZmFpciBtZWFucyBvciBmb3VsIGxheSBjbGFpbSB0byB0aGUgcHJvcGVydHkgb2Ygb3RoZXJzLiBBbmQKICAgICAgICAgICAgICAgICAgICBmaXJzdCBoZSBoYWQgdGhlIGF1ZGFjaXR5IHRvIGdvIGFuZCBlbnJvbGwgaGltc2VsZiBvbiB0aGUgYXNzZW1ibHkgbGlzdDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHdhcyBhIGxpc3Qgb2YgYWxsIHRob3NlIHdobyBoYWQgdGhlIHJpZ2h0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHZvdGUgaW4gdGhlIHBvcHVsYXIgYXNzZW1ibHkg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQzrrOus67zrfPg+G9t86xPC9mb3JlaWduPu+8iSAuPC9ub3RlPiBvZiB0aGUgT3RyeW5pYW5zLCBhbHRob3VnaCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhbiBFbGV1c2luaWFuLCBhbmQgbWFuYWdlZCB0byBwdXQgdGhpcyB0aHJvdWdoOyB0aGVuLCBiZWZvcmUgaGlzIG5hbWUgd2FzCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCBvbiB0aGUgYWR1bHQgcmVnaXN0ZXI8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOus66zrvOt8+D4b23zrE8L2ZvcmVpZ24+77yJIC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mZmljaWFsIGxpc3Qgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGRlbWUsIGluIHdoaWNoIGV2ZXJ5IHlvdW5nIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkIHRoZSBzY3J1dGlueSB3YXMgcmVnaXN0ZXJlZCB3aGVuIGhlIHJlYWNoZWQgdGhlIGFnZSBvZiBlaWdodGVlbi4gRWFjaAogICAgICAgICAgICAgICAgICAgICAgICBkZW1lIGhhZCBpdHMgb3duIGFzc2VtYmx5LCBwcmVzaWRlZCBvdmVyIGJ5IHRoZSBkZW1hcmNoLCBvcgogICAgICAgICAgICAgICAgICAgICAgICBib3JvdWdoLXByZXNpZGVudC48L25vdGU+IG9mIHRoZSBPdHJ5bmlhbnMsIGhlIHNvdWdodCB0byBjbGFpbSBhIHNoYXJlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHB1YmxpYyBiZW5lZml0cyBpbiBmbGFncmFudCBkZWZpYW5jZSBvZiBsYXcsIGJlY2F1c2Ugb2YgaGlzIGdyZWVkIGZvciBnYWluLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5XZSwgc2VlaW5nIHdoYXQgd2FzIGdvaW5nIG9uLCBjYWxsZWQKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgYW5kIHB1dCBhIHN0b3AgdG8gaXQsIGhvbGRpbmcgdGhlIHZpZXcgdGhhdCBpdCB3YXMgbmVjZXNzYXJ5IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgb2YgaW5oZXJpdGFuY2Ugc2hvdWxkIGZpcnN0IGJlIGRlY2lkZWQgaW4geW91ciBjb3VydCBiZWZvcmUgYW55b25lIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGJlIG5hbWVkIGFzIHRoZSBhZG9wdGVkIHNvbiBvZiBBcmNoaWFkZXMuIEhlIHdhcyB0aHdhcnRlZCB0aGVuLCBhbmQgY29udmljdGVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzIG9mIGZyYXVkdWxlbnQgYWN0aW9uLCBib3RoIGluIHRoZSBtYXR0ZXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlzdCwgYW5kIGluIHRoZSBhc3NlbWJseSBmb3IgdGhlIGVsZWN0aW9uIG9mIHRoZSBkZW1lJ3Mgb2ZmaWNlcnMsIHlldAogICAgICAgICAgICAgICAgICAgIG5ldmVydGhlbGVzcyBoZSBwZXJzaXN0ZWQgaW4gdHJ5aW5nIHRvIGZvcmNlIGhpcyB3YXkgaW4sIGFuZCBieSBoaXMgaW50cmlndWVzIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgaGltc2VsZiBzdHJvbmdlciB0aGFuIHlvdXIgbGF3cy4gV2hhdCBpcyB0aGUgcHJvb2Ygb2YgdGhpcz8gPC90cmFuc2xhdGlvbj4="
translation['44.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBnb3QgdG9nZXRoZXIgc29tZSBvZiB0aGUgT3RyeW5pYW5zIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgZGVtYXJjaCwgYW5kIHBlcnN1YWRlZCB0aGVtIGF0IHRoZSBvcGVuaW5nIG9mIHRoZSBhZHVsdCByZWdpc3RlciB0byBpbnNjcmliZSBoaXMKICAgICAgICAgICAgICAgICAgICBuYW1lLiBBbmQgYWZ0ZXIgdGhhdCBvbiB0aGUgb2NjYXNpb24gb2YgdGhlIGdyZWF0IFBhbmF0aGVuYWVhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBncmVhdCBQYW5hdGhlbmVhLCB0aGUgbW9zdCBpbXBvcnRhbnQgb2YgYWxsIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGZlc3RpdmFscywgd2FzIGhlbGQgZXZlcnkgZm91ciB5ZWFycyBpbiB0aGUgbW9udGggb2YgSGVjYXRvbWJhZW9uIO+8iAogICAgICAgICAgICAgICAgICAgICAgICBKdWx577yJIC48L25vdGU+IGF0IHRoZSB0aW1lIG9mIHRoZSBkaXN0cmlidXRpb24sIGhlIGNhbWUgdG8gZ2V0IGhpcwogICAgICAgICAgICAgICAgICAgIGFkbWlzc2lvbiBmZWUsIGFuZCB3aGVuIHRoZSBvdGhlciBkZW1lc21lbiB3ZXJlIHJlY2VpdmluZyBpdCwgaGUgZGVtYW5kZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IGJlIGdpdmVuIGhpbSBhbHNvLCBhbmQgdGhhdCBoZSBzaG91bGQgYmUgZW50ZXJlZCBvbiB0aGUgcmVnaXN0ZXIgdW5kZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbmFtZSBvZiBBcmNoaWFkZXMuIEJ1dCB3aGVuIHdlIGVudGVyZWQgYSBzb2xlbW4gcHJvdGVzdCwgYW5kIGFsbCB0aGUgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZWQgdGhhdCB3aGF0IGhlIHdhcyBkb2luZyB3YXMgYW4gb3V0cmFnZSwgaGUgd2VudCBhd2F5IHdpdGhvdXQgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGhpcyBuYW1lIGluc2NyaWJlZCBvciByZWNlaXZpbmcgdGhlIGFkbWlzc2lvbiBmZWUuIDwvdHJhbnNsYXRpb24+"
translation['44.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGRvIHlvdSBub3QgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IGEgbWFuLCB3aG8gaW4gZGVmaWFuY2Ugb2YgeW91ciBkZWNyZWUgY2xhaW1lZCB0aGUgcmlnaHQgdG8gcmVjZWl2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBhZG1pc3Npb24gZmVlIGJlZm9yZSBoaXMgbmFtZSBoYWQgYmVlbiBpbnNjcmliZWQgb24gdGhlIGxpc3Qgb2YgdGhlIE90cnluaWFucywKICAgICAgICAgICAgICAgICAgICBiZWxvbmdpbmcgYXMgaGUgZGlkIHRvIGFub3RoZXIgZGVtZSwgd291bGQgbGF5IGNsYWltIHRvIGFuIGluaGVyaXRhbmNlIGluCiAgICAgICAgICAgICAgICAgICAgZGVmaWFuY2Ugb2YgdGhlIGxhd3M/IE9yIHdoZW4gYSBtYW4sIGJlZm9yZSB0aGUgY291cnQgaGFzIHJlbmRlcmVkIGl0cyBkZWNpc2lvbiwKICAgICAgICAgICAgICAgICAgICBzY2hlbWVzIHRvIGdldCBhZHZhbnRhZ2VzIHNvIHVuanVzdCwgY2FuIHlvdSB0aGluayBpdCByZWFzb25hYmxlIHRvIGFzc3VtZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgcmVsaWVzIHVwb24gdGhlIGp1c3RpY2Ugb2YgaGlzIGNhc2U/IEZvciBoZSwgd2hvIGZyYXVkdWxlbnRseSBjbGFpbWVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRvIHJlY2VpdmUgdGhlIGFkbWlzc2lvbiBmZWUsIGhhcyBub3cgb2J2aW91c2x5IHByYWN0aXNlZCB0aGUgc2FtZSBkZXNpZ24KICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgdGhlIGluaGVyaXRhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5OYXkgbW9yZSwgaGUgZXZlbgogICAgICAgICAgICAgICAgICAgIGRlY2VpdmVkIHRoZSBhcmNob24sIHdoZW4gaGUgbWFkZSBoaXMgZGVwb3NpdCBmb3IgY29zdHMgdG8gdGh3YXJ0IHVzLCBhbmQgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgY291bnRlci1zdGF0ZW1lbnQgZGVjbGFyZWQgdGhhdCBoZSB3YXMgYW4gT3RyeW5pYW4sIHdoZW4gaGUgd2FzIGluIGZhY3QgYQogICAgICAgICAgICAgICAgICAgIGRlbWVzbWFuIGFtb25nIHRoZSBFbGV1c2luaWFucy4gV2hlbiwgaG93ZXZlciwgaGUgZmFpbGVkIGluIGFsbCB0aGVzZSBzY2hlbWVzLAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBsYXN0IGVsZWN0aW9uIG9mIG9mZmljZXJzIHRoZSBmZWxsb3cgZ290IHRvZ2V0aGVyIHNvbWUgb2YgdGhlIGRlbWVzbWVuLAogICAgICAgICAgICAgICAgICAgIGFuZCBkZW1hbmRlZCB0aGF0IGhlIGJlIHJlZ2lzdGVyZWQgYXMgdGhlIGFkb3B0ZWQgc29uIG9mIEFyY2hpYWRlcy4gPC90cmFuc2xhdGlvbj4="
translation['44.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiB3ZSBwcm90ZXN0ZWQgdGhhdCB0aGUgZGVtZXNtZW4gc2hvdWxkIGdpdmUKICAgICAgICAgICAgICAgICAgICB0aGVpciB2b3RlcyBvbmx5IHdoZW4gdGhlIGluaGVyaXRhbmNlIHN1aXQgc2hvdWxkIGhhdmUgYmVlbiBkZWNpZGVkLCBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlOyBhbmQgdG8gdGhpcyB0aGV5IGFncmVlZCwgbm90IG9uIHRoZWlyIG93biByZXNwb25zaWJpbGl0eSwgYnV0IG91dCBvZgogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QgZm9yIHRoZSBsYXdzOyBmb3IgaXQgc2VlbWVkIHRvIHRoZW0gYW4gb3V0cmFnZW91cyB0aGluZyB0aGF0IGEgbWFuIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBtYWRlIGEgZGVwb3NpdCBmb3IgY29zdHMgaW4gYW4gaW5oZXJpdGFuY2Ugc3VpdCwgc2hvdWxkIGdldCBoaW1zZWxmIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICBhcyBhIHNvbiB3aGlsZSB0aGUgbWF0dGVyIHdhcyBzdGlsbCB1bmRlY2lkZWQ7IGJ1dCB0aGUgdGhpbmcgd2hpY2ggdGhpcyBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBMZW9zdHJhdHVzIGNvbnRyaXZlZCBhZnRlciB0aGlzIGlzIHRoZSBtb3N0IG91dHJhZ2VvdXMgb2YgYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIHdoZW4gaGUgZmFpbGVkIHRvCiAgICAgICAgICAgICAgICAgICAgZ2V0IGhpcyBvd24gbmFtZSBpbnNjcmliZWQsIGhlIGVudGVyZWQgaGlzIG93biBzb24gTGVvY2hhcmVzIGFzIGFuIGFkb3B0ZWQgc29uCiAgICAgICAgICAgICAgICAgICAgb2YgQXJjaGlhZGVzLCBpbiBkZWZpYW5jZSBvZiBhbGwgdGhlIGxhd3MsIGJlZm9yZSB0aGUgc2NydXRpbnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Rm9yIHRoaXMgc2NydXRpbnkgc2VlIG5vdGUgMyBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNzwvYmlibD4uPC9ub3RlPiBvZiB0aGUgZGVtZSBoYWQgdGFrZW4gcGxhY2UuIEJ1dCBMZW9jaGFyZXMgaGFkIG5vdCB5ZXQKICAgICAgICAgICAgICAgICAgICBiZWVuIGludHJvZHVjZWQgdG8gdGhlIGNsYW5zbWVuIG9mIEFyY2hpYWRlczsgeWV0IHdoZW4gaGlzIG5hbWUgaGFkIGJlZW4gZW50ZXJlZAogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBsaXN0IG9mIHRoZSBkZW1lLCBvbmx5IHRoZW4gZGlkIExlb3N0cmF0dXMsIGJ5IGJyaW5naW5nIGluZmx1ZW5jZSB0byBiZWFyCiAgICAgICAgICAgICAgICAgICAgdXBvbiBhIGNlcnRhaW4gbWVtYmVyIG9mIHRoZSBjbGFuLCBnZXQgdGhlIG5hbWUgaW5zY3JpYmVkIHVwb24gdGhlIGNsYW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjc8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHNob3VsZCBoYXZlIG5vcm1hbGx5IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgYmVlbiBkb25lIHNob3J0bHkgYWZ0ZXIgYmlydGgsIGZvciB0aGUgZW5yb2xsbWVudCBpbiB0aGUgY2xhbiBtYXJrZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdGFuY2Ugb2YgdGhlIGNoaWxkIGFzIGEgbWVtYmVyIG9mIHRoZSBmYW1pbHksIGFzIHRoZSBlbnJvbGxtZW50IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZW1lIG1hcmtlZCBhIHlvdXRoJ3MgYXNzdW1wdGlvbiBvZiB0aGUgc3RhdHVzIG9mIGNpdGl6ZW5zaGlwLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgdGhhdCwgaW4gaGlzIGFmZmlkYXZpdCBiZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJjaG9uIGhlIGluc2NyaWJlZCBMZW9jaGFyZXMgYXMgYmVpbmcgdGhlIGxhd2Z1bGx5IGJvcm4gc29uIG9mIHRoZSBtYW4gd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gZGVhZCBtYW55IHllYXJzIHBhc3TigJRMZW9jaGFyZXMsIHdobyBoYWQgYmVlbiByZWdpc3RlcmVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgY2xhbiBvbmx5IGEgZGF5IG9yIHR3byBiZWZvcmUhIFNvIGl0IHJlc3VsdHMgdGhhdCB0aGV5IGJvdGggbGF5IGNsYWltIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlOyBmb3IgTGVvc3RyYXR1cyBoZXJlIG1hZGUgdGhlIGRlcG9zaXQgZm9yIGNvc3RzIGluIHRoZSBpbmhlcml0YW5jZQogICAgICAgICAgICAgICAgICAgIHN1aXQgYXMgYmVpbmcgdGhlIGxhd2Z1bGx5IGJvcm4gc29uIG9mIEFyY2hpYWRlcywgYW5kIExlb2NoYXJlcyBoZXJlIGhhcyBmaWxlZAogICAgICAgICAgICAgICAgICAgIHRoZSBhZmZpZGF2aXQsIGFzIGJlaW5nIHRoZSBsYXdmdWxseSBib3JuIHNvbiBvZiB0aGUgc2FtZSBmYXRoZXIhIDwvdHJhbnNsYXRpb24+"
translation['44.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gbmVpdGhlciBjYXNlIGlzIGl0IHRvIGEgbGl2aW5nIG1hbiwgYnV0IHRvIG9uZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgZGVhZCwgdGhhdCBlYWNoIG9mIHRoZW0gbWFrZXMgaGltc2VsZiBhbiBhZG9wdGVkIHNvbiEgQnV0IGluIG91cgogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIG1lbiBvZiB0aGUganVyeSwgeW91IG91Z2h0LCB3aGVuIHlvdSBzaGFsbCBoYXZlIGNhc3QgeW91ciB2b3RlCiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyB0aGUgcHJlc2VudCBjYXNlLCB0aGVuLCBhbmQgbm90IHRpbGwgdGhlbiwgdG8gZmluZCBmcm9tIGFtb25nIHVzLCB3aG8KICAgICAgICAgICAgICAgICAgICBhcmUgbmVhcmVzdCBvZiBraW4sIGFuIGFkb3B0ZWQgc29uIGZvciB0aGUgZGVjZWFzZWQsIGluIG9yZGVyIHRoYXQgdGhlIGZhbWlseQogICAgICAgICAgICAgICAgICAgIG1heSBub3QgYmVjb21lIGV4dGluY3QuIDwvdHJhbnNsYXRpb24+"
translation['44.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rmlyc3QsIG1lbiBvZiB0aGUganVyeSwgdG8gcHJvdmUgdGhhdCBMZW9zdHJhdHVzIGhlcmUgaGFzCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgdG8gdGhlIEVsZXVzaW5pYW5zIGZyb20gdGhlIGRlbWVzbWVuIG9mIE90cnluw6osIGxlYXZpbmcgYQogICAgICAgICAgICAgICAgICAgIGxhd2Z1bGx5IGJvcm4gc29uIGluIHRoZSBmYW1pbHkgb2YgQXJjaGlhZGVzOyBhbmQgdGhhdCBoaXMgZmF0aGVyIGF0IGFuIGVhcmxpZXIKICAgICAgICAgICAgICAgICAgICBkYXRlIGhhZCBkb25lIHRoaXMgc2FtZSB0aGluZzsgYW5kIHRoYXQgdGhlIHNvbiBzbyBsZWZ0IGhhcyBkaWVkIHdpdGhvdXQgaXNzdWU7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlIG9uZSB3aG8gaGFzIG5vdyBzd29ybiB0aGUgYWZmaWRhdml0IHdhcyBlbnJvbGxlZCBhbW9uZyB0aGUgZGVtZXNtZW4KICAgICAgICAgICAgICAgICAgICBiZWZvcmUgaGUgaGFkIGJlZW4gZW5yb2xsZWQgYW1vbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGNsYW7igJR0byBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIGZhY3RzIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbnMgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGNsYW4KICAgICAgICAgICAgICAgICAgICBhbmQgb2YgdGhlIGRlbWU7IGFuZCBpbiBwcm9vZiBvZiBhbGwgdGhlIG90aGVyIHRoaW5ncyBJIGhhdmUgbWVudGlvbmVkIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGhhdmUgZG9uZSBJIHNoYWxsIHByb2R1Y2UgdGVzdGltb255IGNvbmNlcm5pbmcgZWFjaCBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3QuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBsZWFzZSBjYWxsIHRoZSB3aXRuZXNzZXMgdG8gY29tZQogICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoZSBmYWN0cwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjYXNlLCB0aGVuLCB5b3UgaGF2ZSBoZWFyZCwgbWVuIG9mIHRoZSBqdXJ5LCBhbGwgdGhhdCB0b29rIHBsYWNlIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGluIGNvbm5lY3Rpb24gd2l0aCB0aGlzIGluaGVyaXRhbmNlLCBhbmQgYWxsIHRoYXQgb2NjdXJyZWQgc3Vic2VxdWVudGx5LAogICAgICAgICAgICAgICAgICAgIGFzIHNvb24gYXMgd2UgY29tbWVuY2VkIG91ciBzdWl0LiBJdCByZW1haW5zIHRvIHNwZWFrIG9mIHRoZSBhZmZpZGF2aXQgaXRzZWxmCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBsYXdzIGluIGFjY29yZGFuY2Ugd2l0aCB3aGljaCB3ZSBjbGFpbSB0byBpbmhlcml0OyBhbmQgZnVydGhlcm1vcmUsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIHdhdGVyIGhvbGRzIG91dCBhbmQgd2Ugc2hhbGwgbm90IGJlIHRyb3VibGluZyB5b3UgdG9vIG11Y2gsIHRvIHJlZnV0ZSB0aGUKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgd2hpY2ggb3VyIG9wcG9uZW50cyBhcmUgZ29pbmcgdG8gYWR2YW5jZSwgcHJvdmluZyB0byB5b3UgdGhhdCB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIganVzdCBub3Igc291bmQuIEFuZCBmaXJzdCBsZXQgdGhlIGNsZXJrIHJlYWQgdGhlIGFmZmlkYXZpdDsgYW5kIEkgYmVnCiAgICAgICAgICAgICAgICAgICAgeW91IHRvIGdpdmUgaXQgY2xvc2UgYXR0ZW50aW9uOyBmb3IgaXQgaXMgcmVnYXJkaW5nIHRoaXMgdGhhdCB5b3VyIHZvdGVzIGFyZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnRseSB0byBiZSBjYXN0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkFmZmlkYXZpdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFmZmlkYXZpdDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZmZpZGF2aXQ8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGhhcyBzd29ybiwgYXMgeW91IGhhdmUgaGVhcmQsIOKAnCB0aGF0IHRoZSBpbmhlcml0YW5jZSBvZgogICAgICAgICAgICAgICAgICAgIEFyY2hpYWRlcyBpcyBub3Qgb3BlbiB0byBsaXRpZ2F0aW9uLCBzaW5jZSBoZSBoYXMgY2hpbGRyZW4gbGF3ZnVsbHkgYm9ybiBhbmQKICAgICAgICAgICAgICAgICAgICByaWdodGZ1bGx5IGVzdGFibGlzaGVkIGFjY29yZGluZyB0byB0aGUgc3RhdHV0ZS7igJ0gTGV0IHVzLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGlucXVpcmUgaWYgdGhlcmUgYXJlIGFueSwgb3IgaWYgdGhlIGRlZmVuZGFudCBoYXMgc3dvcm4gdG8gd2hhdCBpcyBmYWxzZS4gVGhlCiAgICAgICAgICAgICAgICAgICAgYWZvcmVzYWlkIEFyY2hpYWRlcywgd2hvc2UgZXN0YXRlIGlzIGluIHF1ZXN0aW9uLCBhZG9wdGVkIGFzIGhpcyBzb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JhbmRmYXRoZXIgb2YgdGhlIG9uZSB3aG8gaGFzIG5vdyBzd29ybiB0aGlzIGFmZmlkYXZpdDsgaGUsIGxlYXZpbmcgYSBsYXdmdWxseQogICAgICAgICAgICAgICAgICAgIGJvcm4gc29uLCBMZW9zdHJhdHVzLCB0aGUgZmF0aGVyIG9mIHRoZSBkZWZlbmRhbnQsIHJldHVybmVkIHRvIHRoZSBFbGV1c2luaWFucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBMZW9zdHJhdHVzIGhlcmUgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHJldHVybmVkIHRvIHRoZSBob3VzZSBvZiBoaXMgZmF0aGVycywgbGVhdmluZyBhIHNvbiBpbiB0aGUgYWRvcHRpdmUgaG91c2U7IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBzb24gd2hvbSBoZSBsZWZ0LCBhbmQgd2hvIHdhcyB0aGUgbGFzdCBvZiBhbGwgdGhlIGFkb3B0ZWQgY2hpbGRyZW4sIGhhcyBkaWVkCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBpc3N1ZSwgc28gdGhhdCB0aGUgaG91c2UgdGhlcmVieSBiZWNvbWVzIGV4dGluY3QgYW5kIHRoZSBpbmhlcml0YW5jZSBoYXMKICAgICAgICAgICAgICAgICAgICByZXZlcnRlZCBhZ2FpbiB0byB0aG9zZSBvcmlnaW5hbGx5IG5lYXJlc3Qgb2Yga2luLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3csIHRoZW4sIGNvdWxkIEFyY2hpYWRlcyBzdGlsbCBoYXZlIGFueSBzb25zLCBhcyB0aGUgYWZmaWRhdml0CiAgICAgICAgICAgICAgICAgICAgY2xhaW1zLCB3aGVuIGl0IGlzIGFkbWl0dGVkIHRoYXQgaGlzIGFkb3B0ZWQgY2hpbGRyZW4gcmV0dXJuZWQgdG8gdGhlaXIgb3JpZ2luYWwKICAgICAgICAgICAgICAgICAgICBmYW1pbHkgYW5kIHRoZSBsYXN0IG9uZSBsZWZ0IGhhcyBkaWVkIHdpdGhvdXQgaXNzdWU/IEl0IGZvbGxvd3MsIHRoZW4sIG9mCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzaXR5IHRoYXQgdGhlIGZhbWlseSBpcyBleHRpbmN0LiBCdXQgd2hlbiB0aGUgZmFtaWx5IGlzIGV4dGluY3QsIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgY2Fubm90IGJlIGxhd2Z1bGx5IGJvcm4gc29ucyBzdGlsbCBsaXZpbmcuIFRoZSBmZWxsb3csIHRoZW4sIGhhcyBzd29ybiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm9uLWV4aXN0ZW50IHBlcnNvbnMgZXhpc3QsIGFuZCBoYXMgd3JpdHRlbiBpbiB0aGUgYWZmaWRhdml0IOKAnCBzaW5jZQogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBjaGlsZHJlbizigJ0gYWxsZWdpbmcgdGhhdCBoZSBoaW1zZWxmIGlzIG9uZSBvZiB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VyZWx5LCB3aGVuIGhlIHNheXMg4oCcIGxhd2Z1bGx5IGJvcm4KICAgICAgICAgICAgICAgICAgICBhbmQgcmlnaHRmdWxseSBlc3RhYmxpc2hlZCBhY2NvcmRpbmcgdG8gdGhlIHN0YXR1dGUs4oCdIGhlIGlzIHF1aWJibGluZwogICAgICAgICAgICAgICAgICAgIGFuZCBkZWZ5aW5nIHRoZSBsYXdzLiBGb3IgdGhlIOKAnCBsYXdmdWxseSBib3Ju4oCdIGV4aXN0cywgd2hlbgogICAgICAgICAgICAgICAgICAgIGl0IGlzIGJvcm4gb2YgdGhlIGJvZHk7IGFuZCB0aGUgbGF3IGJlYXJzIHRlc3RpbW9ueSB0byB0aGlzLCB3aGVuIGl0IHNheXMsCiAgICAgICAgICAgICAgICAgICAg4oCcIExhd2Z1bGx5IGJvcm4gYXJlIGNoaWxkcmVuIG9mIGEgd29tYW4gd2hvbSBoZXIgZmF0aGVyIG9yIGJyb3RoZXIgb3IKICAgICAgICAgICAgICAgICAgICBncmFuZGZhdGhlciBoYXMgZ2l2ZW4gaW4gbWFycmlhZ2Uu4oCdIEJ1dCDigJwgcmlnaHRmdWxseQogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVk4oCdIHRoZSBsYXdnaXZlciB1bmRlcnN0b29kIG9mIGFkb3B0aW9ucywgY29uc2lkZXJpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoZW4gYSBtYW4sIGJlaW5nIGNoaWxkbGVzcyBhbmQgbWFzdGVyIG9mIGhpcyBwcm9wZXJ0eSwgYWRvcHRzIGEgc29uLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIG91Z2h0IHRvIGJlIHJpZ2h0ZnVsLiBXZWxsLCBvdXIgb3Bwb25lbnQgc2F5cyB0aGF0IEFyY2hpYWRlcyBoYWQgbm8gc29uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGJvZHksIGJ1dCBpbiB0aGUgYWZmaWRhdml0IGhlIGhhcyBzd29ybiB0byB0aGUgd29yZHMg4oCcIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYXJlIGxhd2Z1bGx5IGJvcm4gY2hpbGRyZW4s4oCdIHRodXMgbWFraW5nIGEgc3dvcm4gc3RhdGVtZW50IHRoYXQKICAgICAgICAgICAgICAgICAgICBpcyBjb250cmFyeSB0byB0aGUgdHJ1dGguIDwvdHJhbnNsYXRpb24+"
translation['44.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhZG1pdHMgdGhhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGFuIGFkb3B0ZWQgc29uLCB5ZXQgaXQgaXMgbWFuaWZlc3QgdGhhdCBoZSB3YXMgbm90IGFkb3B0ZWQgYnkgdGhlIGRlYWQgbWFuCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZjsgc28gaG93IGNhbiB5b3UgY2xhaW0gdGhhdCB0aGlzIHN0YXR1cyBpcyDigJwgcmlnaHRmaWxseQogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIGFjY29yZGluZyB0byB0aGUgc3RhdHV0ZeKAnSA/IEJlY2F1c2UsIGhlIHdpbGwgc2F5LCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkIGFzIHRoZSBzb24gb2YgQXJjaGlhZGVzLiBZZXMsIGJ5IHRoZSBhcmJpdHJhcnkgYWN0IG9mIHRoZXNlIG1lbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvbmx5IHRoZSBvdGhlciBkYXksIHdoZW4gdGhlIHN1aXQgZm9yIHRoZSBlc3RhdGUgaGFkIGFscmVhZHkgYmVlbgogICAgICAgICAgICAgICAgICAgIGluc3RpdHV0ZWQuIFN1cmVseSBpdCBpcyBub3QgcmlnaHQgZm9yIGEgbWFuIHRvIHJlZ2FyZCBhcyBldmlkZW5jZSBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbCBhY3QuIDwvdHJhbnNsYXRpb24+"
translation['44.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXMgaXQgbm90IGFuIG91dHJhZ2VvdXMKICAgICAgICAgICAgICAgICAgICB0aGluZywgbWVuIG9mIHRsaWUganVyeSwgdGhhdCBoZSBzaG91bGQgc3RhdGXigJRhcyBoZSB3aWxsIHByZXNlbnRseSBpbgogICAgICAgICAgICAgICAgICAgIGhpcyBzcGVlY2jigJR0aGF0IGhlIGlzIGFuIGFkb3B0ZWQgc29uLCB3aGlsZSBpbiBoaXMgYWZmaWRhdml0IGhlIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBkYXJlIHRvIHdyaXRlIHRoaXM/IE9yIHRoYXQsIHdoaWxlIGluIHRoZSBhZmZpZGF2aXQgdGhlIHByb3Rlc3QgaXMgbWFkZSBhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCBmb3IgYSBzb24gb2YgdGhlIGJvZHksIHRoZSBzcGVlY2ggdGhhdCB3aWxsIHByZXNlbnRseSBiZSBtYWRlIHdpbGwgYmUgb24KICAgICAgICAgICAgICAgICAgICBiZWhhbGYgb2YgYW4gYWRvcHRlZCBzb24/IElmIHRoZXkgYXJlIGdvaW5nIHRvIG1ha2UgdGhlaXIgZGVmZW5jZSBjb25mbGljdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGFmZmlkYXZpdCwgc3VyZWx5IGVpdGhlciB3aGF0IHRoZXkgc2F5LCBvciB3aGF0IHRoZXkgc3dvcmUsIGlzIGZhbHNlLiBJdCB3YXMKICAgICAgICAgICAgICAgICAgICB3aXRoIGdvb2QgcmVhc29uIHRoYXQgdGhleSBkaWQgbm90IGFkZCB0byB0aGUgYWZmaWRhdml0IG1lbnRpb24gb2YgdGhlIGFkb3B0aW9uLAogICAgICAgICAgICAgICAgICAgIGZvciBpbiB0aGF0IGNhc2UgdGhleSB3b3VsZCBoYXZlIGhhZCB0byBhZGQgdGhlIHdvcmRzIOKAnCBhZG9wdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgc28tYW5kLXNvLuKAnSBCdXQgQXJjaGlhZGVzIG5ldmVyIGRpZCBhZG9wdCB0aGVtOyB0aGV5IGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLCBpbiBvcmRlciB0byByb2IgdXMgb2YgdGhlIGluaGVyaXRhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlzIG5vdCB0aGVpciBuZXh0IHByb2NlZWRpbmcKICAgICAgICAgICAgICAgICAgICBhYnN1cmQgYXMgd2VsbCBhcyBvdXRyYWdlb3VzP+KAlHRoYXQgTGVvc3RyYXR1cyBoZXJlIHNob3VsZCBoYXZlIG1hZGUKICAgICAgICAgICAgICAgICAgICBoaXMgZGVwb3NpdCBmb3IgY29zdHMgaW4gdGhlIGluaGVyaXRhbmNlIHN1aXQgYmVmb3JlIHRoZSBhcmNob24sIGFzIGJlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBBcmNoaWFkZXMg77yIIHdoaWxlIGhlIHdhcyBhbiBFbGV1c2luaWFuLCBhbmQgQXJjaGlhZGVzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlbWUgT3RyeW7Dqu+8iSAsIGJ1dCB0aGF0IHNvbWVvbmUgZWxzZSBzaG91bGQgaGF2ZSBzd29ybiB0aGUKICAgICAgICAgICAgICAgICAgICBhZmZpZGF2aXQsIGFzIHlvdSBzZWUgZm9yIHlvdXJzZWx2ZXMsIGFsbGVnaW5nIHRoYXQgaGUsIHRvbywgd2FzIGEgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgQXJjaGlhZGVzPyBUbyB3aGljaCBvZiB0aGUgdHdvIHNob3VsZCB5b3UgcGF5IGF0dGVudGlvbiwgYXMgdGVsbGluZyB0aGUgdHJ1dGg/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHZlcnkgdGhpbmcgaXMgdGhlIHN0cm9uZ2VzdCBwcm9vZiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBmYWxzZWhvb2Qgb2YgdGhlIGFmZmlkYXZpdOKAlHRoYXQgaXQgaXMgbm90IHRoZSBzYW1lIHBlcnNvbiB3aG8KICAgICAgICAgICAgICAgICAgICBtYWtlcyB0aGUgY2xhaW0gYWJvdXQgdGhlIHNhbWUgbWF0dGVyLiBBbmQgdGhpcyBpcyBub3Qgc3RyYW5nZSBmb3IsIEkgZmFuY3ksCiAgICAgICAgICAgICAgICAgICAgd2hlbiBMZW9zdHJhdHVzIGhlcmUgbWFkZSBoaXMgZGVwb3NpdCBpbiB0aGUgaW5oZXJpdGFuY2Ugc3VpdCBhZ2FpbnN0IHVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIGhhcyBub3cgc3dvcm4gdGhlIGFmZmlkYXZpdCBoYWQgbm90IHlldCByZWdpc3RlcmVkIGhpbXNlbGYgYXMgYSBtZW1iZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZGVtZS4gV2Ugc2hvdWxkIHRoZXJlZm9yZSBiZSBtb3N0IGNydWVsbHkgdHJlYXRlZCBpZiB5b3Ugc2hvdWxkIGJlbGlldmUKICAgICAgICAgICAgICAgICAgICBhbiBhZmZpZGF2aXQgbWFkZSBhZnRlciB0aGUgc3VpdCB3YXMgYmVndW4uIDwvdHJhbnNsYXRpb24+"
translation['44.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmF5IG1vcmUsIExlb2NoYXJlcyBoYXMgaW4gdGhlIGFmZmlkYXZpdAogICAgICAgICAgICAgICAgICAgIHN3b3JuIHRvIGZhY3RzIGFjdHVhbGx5IG9sZGVyIHRoYW4gaGltc2VsZi4gRm9yIGhvdyBjb3VsZCBhIHBlcnNvbiB3aG8gd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIHlldCBhIG1lbWJlciBvZiB0aGUgaG91c2Ugb2YgQXJjaGlhZGVzIHdoZW4gdGhpcyBzdWl0IGZvciB0aGUgaW5oZXJpdGFuY2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgaW5zdGl0dXRlZCwga25vdyBhbnl0aGluZyBhYm91dCB0aGVzZSBtYXR0ZXJzPyBNb3Jlb3ZlciwgaWYgaGUgaGFkIHN3b3JuIGl0IG9mCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhbG9uZSwgdGhlcmUgd291bGQgaGF2ZSBiZWVuIHNvbWUgc2Vuc2UgaW4gaGlzIGFjdGlvbjsgaGUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gd2hhdCB3YXMgZmFsc2UsIGJ1dCBuZXZlcnRoZWxlc3MgaGlzIHN0YXRlbWVudCB3b3VsZCBoYXZlIGNvbmNlcm5lZCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiBhbiBhZ2UgdG8ga25vdy4gQnV0IGFzIGl0IGlzLCBoZSBoYXMgd3JpdHRlbiB0aGF0IHRoZSBhZm9yZXNhaWQgQXJjaGlhZGVzIGhhZAogICAgICAgICAgICAgICAgICAgIGxhd2Z1bGx5IGJvcm4gc29ucywgbWVhbmluZywgb2YgY291cnNlLCBoaXMgb3duIGZhdGhlciBhbmQgdGhlIG9uZSBtYWRlIHN1Y2ggYnkKICAgICAgICAgICAgICAgICAgICB0aGUgb3JpZ2luYWwgYWRvcHRpb24sIG5vdCB0YWtpbmcgY29nbml6YW5jZSBvZiB0aGUgZmFjdCB0aGF0IHRoZXkgaGFkIHJldHVybmVkCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlaXIgb3JpZ2luYWwgZmFtaWx5LiBJdCBmb2xsb3dzLCB0aGVuLCBvZiBuZWNlc3NpdHkgdGhhdCBoZSBoYXMgc3dvcm4gdG8KICAgICAgICAgICAgICAgICAgICBldmVudHMgb2xkZXIgdGhhbiBoaW1zZWxmLCBhbmQgbm90IHRvIHRoaW5ncyB3aGljaCBoYXZlIGhhcHBlbmVkIGluIGhpcyBvd24gZGF5LgogICAgICAgICAgICAgICAgICAgIEFyZSB5b3UsIHRoZW4sIHRvIGNyZWRpdCBvbmUgd2hvIGhhcyBkYXJlZCBhIHRoaW5nIGxpa2UgdGhhdCwgYXMgdGhvdWdoIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICBzcGVha2luZyB0aGUgdHJ1dGg/IDwvdHJhbnNsYXRpb24+"
translation['44.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5BaCwgYnV0IGhlIHdpbGwgc2F5IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgaGVhcmQgZnJvbSBoaXMgZmF0aGVyIHRoZSBmYWN0cyB0byB3aGljaCBoZSBoYXMgc3dvcm4uIEJ1dCB0aGUgbGF3IGRvZXMKICAgICAgICAgICAgICAgICAgICBub3QgYWRtaXQgaGVhcnNheSBldmlkZW5jZSwgc2F2ZSBpbiB0aGUgY2FzZSBvZiBkZWNlYXNlZCBwZXJzb25zOyB3aGVyZWFzIHRoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3cgaGFzIGRhcmVkIHRvIHN3ZWFyIHRvIGFjdHMgZG9uZSBieSBoaXMgZmF0aGVyLCB3aGlsZSB0aGF0IGZhdGhlciBpcyBzdGlsbAogICAgICAgICAgICAgICAgICAgIGFsaXZlLiBUaGVuIGFnYWluLCB3aHkgZGlkIExlb3N0cmF0dXMgaGVyZSBpbnNjcmliZSBvbiB0aGUgYWZmaWRhdml0IHRoZSBuYW1lLAogICAgICAgICAgICAgICAgICAgIG5vdCBvZiBoaW1zZWxmLCBidXQgb2YgdGhlIGRlZmVuZGFudD8gRm9yIHRoZSBvbGRlciBmYWN0cyBzaG91bGQgaGF2ZSBiZWVuIHN3b3JuCiAgICAgICAgICAgICAgICAgICAgdG8gYnkgdGhlIG9sZGVyIG1hbi4gSXQgd2FzLCBoZSBtaWdodCBzYXksIGJlY2F1c2UgSSBoYXZlIGhhZCB0aGlzIHlvdXRoIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICBhcyBzb24gdG8gQXJjaGlhZGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIHlvdSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgaGltIGFkb3B0ZWQgYW5kIGNvbmNvY3RlZCB0aGUgd2hvbGUgYWZmYWlyIG91Z2h0IHRvIGhhdmUgcmVuZGVyZWQgYW4gYWNjb3VudCBvZgogICAgICAgICAgICAgICAgICAgIGl0LCBhbmQgbWFkZSB5b3Vyc2VsZiByZXNwb25zaWJsZSBmb3Igd2hhdCB5b3UgaGF2ZSBkb25lLiBZb3Ugb3VnaHQgYWJzb2x1dGVseQogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgZG9uZSBzby4gQnV0IHlvdSBldmFkZWQgdGhpcywgYW5kIHdyb3RlIG92ZXIgdGhlIGFmZmlkYXZpdCB0aGUgbmFtZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgc29uIGhlcmUsIHdobyBrbmV3IG5vdGhpbmcgb2YgdGhlIG1hdHRlci4gWW91IHNlZSwgdGhlbiwgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHN0YXRlbWVudHMgaW4gdGhlIGFmZmlkYXZpdCBhcmUgZmFsc2UsIGFuZCB0aGV5IGFyZSBhZG1pdHRlZCBieSB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiB0aGVtc2VsdmVzIHRvIGJlIHNvLiBXaHksIGl0IHdvdWxkIGV2ZW4gYmUgcmlnaHQgZm9yIHlvdSB0byByZWZ1c2UgdG8gbGlzdGVuCiAgICAgICAgICAgICAgICAgICAgdG8gdGhpcyBtYW4gTGVvc3RyYXR1cywgd2hlbiBoZSBwcmVzZW50bHkgdW5kZXJ0YWtlcyB0byBtYWtlIHN0YXRlbWVudHMgdG8gd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgbm90IHZlbnR1cmUgdG8gc3dlYXIgaW4gdGhlIGFmZmlkYXZpdC4gPC90cmFuc2xhdGlvbj4="
translation['44.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsIHRoYXQgYWZmaWRhdml0cyBvZiBvYmplY3Rpb24KICAgICAgICAgICAgICAgICAgICBhcmUgb2YgYWxsIGZvcm1zIG9mIHRyaWFsIHRoZSBtb3N0IHVuanVzdCwgYW5kIHRoYXQgdGhvc2UgaGF2aW5nIHJlY291cnNlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSBhcmUgbW9zdCBkZXNlcnZpbmcgb2YgeW91ciByZXNlbnRtZW50LCBvbmUgY2FuIHNlZSB2ZXJ5IGNsZWFybHkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmcgZmFjdHMuIEluIHRoZSBmaXJzdCBwbGFjZSwgdGhleSBhcmUgbm90IG5lY2Vzc2FyeSBhcyB0aGUgb3RoZXIgZm9ybXMKICAgICAgICAgICAgICAgICAgICBvZiBwcm9jZWR1cmUgYXJlLCBidXQgdGhleSBhcmUgaW5zdGl0dXRlZCBieSB0aGUgd2lsbCBhbmQgZGVzaXJlIG9mIHRoZSBvbmUKICAgICAgICAgICAgICAgICAgICBzd2VhcmluZyB0byB0aGVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYWZmaWRhdml0IG9mIG9iamVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOuc6xzrzOsc+Bz4ThvbvPgc65zrE8L2ZvcmVpZ24+77yJICwgbGlrZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3BlY2lhbCBwbGVhIGluIGJhciBvZiBhY3Rpb24g77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOsc+BzrHOs8+BzrHPhuG9tTwvZm9yZWlnbj7vvIkgLCBhZmZvcmRlZCBhIG1lYW5zIGJ5IHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgY291bGQgcHJldmVudCBhIGNhc2UgZnJvbSBiZWluZyB0cmllZCB1cG9uIGl0cyBtZXJpdHMsIGFuZCBzbwogICAgICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSByZWdhcmRlZCBhcyBhIG1lYW5zIG9mIHRod2FydGluZyB0aGUgY291cnNlIG9mIGp1c3RpY2UuPC9ub3RlPiBJZgogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtYXR0ZXIgb2YgZGlzcHV0ZWQgY2xhaW1zIHRoZXJlIGlzIG5vIG90aGVyIHdheSBvZiBnZXR0aW5nIGEganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgdGhhbiBieSBzdWNoIGFuIGFmZmlkYXZpdCwgaXQgaXMgcGVyaGFwcyBuZWNlc3NhcnkgdG8gbWFrZSBvbmUuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrnOsc68zrHPgc+E4b27z4HOuc6xPC9mb3JlaWduPu+8iSAsIGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNwZWNpYWwgcGxlYSBpbiBiYXIgb2YgYWN0aW9uIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+AzrHPgc6xzrPPgc6xz4bhvbU8L2ZvcmVpZ24+77yJICwgYWZmb3JkZWQgYSBtZWFucyBieSB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGNvdWxkIHByZXZlbnQgYSBjYXNlIGZyb20gYmVpbmcgdHJpZWQgdXBvbiBpdHMgbWVyaXRzLCBhbmQgc28KICAgICAgICAgICAgICAgICAgICAgICAgY291bGQgYmUgcmVnYXJkZWQgYXMgYSBtZWFucyBvZiB0aHdhcnRpbmcgdGhlIGNvdXJzZSBvZiBqdXN0aWNlLjwvdHJhbnNsYXRpb24+"
translation['44.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGlmIGl0IGlzIHBvc3NpYmxlIHdpdGhvdXQgYW4gYWZmaWRhdml0IG9mCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0aW9ucyB0byBvYnRhaW4gYSBoZWFyaW5nIGJlZm9yZSBhbGwgdHJpYnVuYWxzLCBpcyBub3QgdGhlIHVzZSBvZiBvbmUgYQogICAgICAgICAgICAgICAgICAgIG1hcmsgb2YgcmVja2xlc3NuZXNzIGFuZCB1dHRlciBkZXNwZXJhdGlvbj8gRm9yIHRoZSBsYXdnaXZlciBkaWQgbm90IG1ha2UgaXQKICAgICAgICAgICAgICAgICAgICBvYmxpZ2F0b3J5IG9uIHRoZSBjb250ZW5kaW5nIHBhcnRpZXMsIGJ1dCBncmFudGVkIHRoZW0gdGhlIHByaXZpbGVnZSBvZiBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgaW4gc3VjaCBhbiBhZmZpZGF2aXQsIGlmIHRoZXkgY2hvc2UsIGFzIHRob3VnaCBoZSB3ZXJlIHRlc3RpbmcgdGhlIGNoYXJhY3RlciBvZgogICAgICAgICAgICAgICAgICAgIGVhY2ggb25lIG9mIHVzLCB0byBzZWUgaG93IHdlIHN0YW5kIHdpdGggcmVmZXJlbmNlIHRvIGEgcmVja2xlc3MgcHJvY2VkdXJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSBpcywgb2YgY291cnNlLCB0aGUgaW1wbGljYXRpb24gdGhhdCB0aG9zZQogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcmVjb3Vyc2UgdG8gdGhpcyBwcm9jZWR1cmUgdGhlcmVieSBzaG93ZWQgdGhlbXNlbHZlcyBlaXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgdW5zY3J1cHVsb3VzIG9yIGluIGRlc3BhaXIgb2YgdGhlaXIgY2FzZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBpZiBpdCByZXN0ZWQgd2l0aCB0aG9zZSB3aG8gZmlsZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIGFmZmlkYXZpdHMsIHRoZXJlIHdvdWxkIGJlIG5laXRoZXIgY291cnRzIG9mIGp1c3RpY2Ugbm9yIHRyaWFsczsgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG5hdHVyZSBvZiBhZmZpZGF2aXRzIG9mIG9iamVjdGlvbnMgaXMgdG8gYklvY2sgYWxsIHRoZXNlIHRoaW5ncyBhbmQgdG8gcHJldmVudAogICAgICAgICAgICAgICAgICAgIGFsbCBjYXNlcyBmcm9tIGJlaW5nIGJyb3VnaHQgaW50byB0aGUgY291cnQtcm9vbeKAlGF0IGxlYXN0IHNvIGZhciBhcwogICAgICAgICAgICAgICAgICAgIHRoZSB3aWxsIG9mIHRoZSBvbmUgc3dlYXJpbmcgdGhlIGFmZmlkYXZpdCBnb2VzLiBUaGVyZWZvcmUgSSB0aGluayB3ZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICByZWdhcmQgc3VjaCBwZW9wbGUgYXMgdGhlIGNvbW1vbiBlbmVtaWVzIG9mIGFsbCBtZW4sIGFuZCB0aGF0IHRoZXkgc2hvdWxkIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSBhbnkgaW5kdWxnZW5jZSB3aGVuIHRoZXkgYXJlIG9uIHRyaWFsIGJlZm9yZSB5b3U7IGZvciBlYWNoIG9uZSBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgY29tZXMgaW50byBjb3VydCwgbm90IHVuZGVyIGNvbXB1bHNpb24sIGJ1dCBoYXZpbmcgY2hvc2VuIHRvIGluY3VyIHRoZSByaXNrIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGguIDwvdHJhbnNsYXRpb24+"
translation['44.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHRoYXQgdGhlIGFmZmlkYXZpdCBpcyBmYWxzZSwgeW91IGhhdmUgbGVhcm5lZCBwcmV0dHkgZGVmaW5pdGVseSBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMgY29udGFpbmVkIGluIGl0IGFuZCBmcm9tIHRoZSBhcmd1bWVudHMgd2hpY2ggeW91IGhhdmUgaGVhcmQuIEJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgYWxzbyBnaXZlIHVzIHRoaXMgaW5oZXJpdGFuY2UgYXMgb3VyIHJpZ2h0LCBtZW4gb2YgdGhlIGp1cnksIEkgd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlIGluIGEgZmV3IHdvcmRz4oCUbm90IGFzIHRob3VnaCB0aGlzIGhhZCBub3QgYmVlbiBtYWRlIGNsZWFyIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGluIHdoYXQgSSBzYWlkIGF0IHRoZSBvdXRzZXQsIGJ1dCB0aGF0IHlvdSBtYXkgdGhlIGJldHRlciBiZWFyIGluIG1pbmQgdGhlCiAgICAgICAgICAgICAgICAgICAganVzdGljZSBvZiBvdXIgY2FzZSwgYW5kIHNvIG1lZXQgdGhlIGZhbHNlIHN0YXRlbWVudHMgb2Ygb3VyIG9wcG9uZW50cy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gc3VtIHVwCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hdHRlciBicmllZmx5LCB3ZSwgc2luY2Ugd2UgYXJlIHRoZSBuZWFyZXN0IG9mIGtpbiBpbiB0aGUgbWFsZSBsaW5lIHRvCiAgICAgICAgICAgICAgICAgICAgQXJjaGlhZGVzLCB0byB3aG9tIHRoaXMgZXN0YXRlIGJlbG9uZ2VkLCBhbmQgc2luY2Ugb2YgdGhlIHBlcnNvbnMgd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIGFkb3B0ZWQgc29tZSBoYXZlIGdvbmUgYmFjayB0byB0aGUgZmFtaWx5IG9mIHRoZWlyIGZhdGhlcnMsIGFuZCB0aGUgb25lIGxhc3QKICAgICAgICAgICAgICAgICAgICBsZWZ0IGhhZCBkaWVkIHdpdGhvdXQgaXNzdWUs4oCUaW4gdGhlc2UgY2lyY3Vtc3RhbmNlcywgd2UsIEkgc2F5LCBjbGFpbQogICAgICAgICAgICAgICAgICAgIHRvIGluaGVyaXQuIDwvdHJhbnNsYXRpb24+"
translation['44.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5XZSBhcmUgbm90IGRlcHJpdmluZyBMZW9zdHJhdHVzIG9mCiAgICAgICAgICAgICAgICAgICAgYW55IHByb3BlcnR5IO+8iCBmb3IgdGhlc2UgbWVuIGhvbGQgd2hhdCBpcyB0aGVpciBvd27vvIkgLCBidXQgd2UKICAgICAgICAgICAgICAgICAgICBjbGFpbSB0aGUgZXN0YXRlIGxlZnQgYnkgQXJjaGlhZGVzLCB3aGljaCBpcyBvdXJzIGFjY29yZGluZyB0byB0aGUgbGF3cy4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdywgbWVuIG9mIHRoZSBqdXJ5LCBvcmRhaW5zIHRoYXQgbWFsZXMgYW5kIHRoZSBzb25zIG9mIG1hbGVzIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgcHJlY2VkZW5jZTsgYW5kIHN1Y2ggd2UgYXJlLiBBcmNoaWFkZXMgaGFkIG5vIGNoaWxkcmVuLCBhbmQgd2UgYXJlIHRoZSBvbmVzCiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdCBvZiBraW4gdG8gaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['44.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBpdCBpcyBzdXJlbHkKICAgICAgICAgICAgICAgICAgICBub3QganVzdCB0aGF0IGFuIGFkb3B0ZWQgc29uIHNob3VsZCBicmluZyBvdGhlciBzb25zIGludG8gYSBmYW1pbHkgYnkgYWRvcHRpb247CiAgICAgICAgICAgICAgICAgICAgaGUgbWF5IGxlYXZlIGluIGl0IGNoaWxkcmVuIGJvcm4gdG8gaGltLCBidXQgaW4gZGVmYXVsdCBvZiB0aGVzZSBoZSBtdXN0IHJlc3RvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgaW5oZXJpdGFuY2UgdG8gdGhvc2UgcmVsYXRlZCBieSBibG9vZC4gVGhhdCBpcyB3aGF0IHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGFpbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIGlzIGl0IG5vdCBwbGFpbiB0aGF0IGVhY2ggb25lIG9mCiAgICAgICAgICAgICAgICAgICAgeW91IGlzIGV4Y2x1ZGVkIGZyb20gdGhlIHJpZ2h0IG9mIGluaGVyaXRhbmNlIGJ5IGRpcmVjdCBkZXNjZW50LCBpZiB0aGlzIGxpY2VuY2UKICAgICAgICAgICAgICAgICAgICBiZSBncmFudGVkIHRvIGNoaWxkcmVuIGJ5IGFkb3B0aW9uPyBGb3IgeW91IHNlZSB0aGF0IG1vc3QgcGVvcGxlIHdobyBhZG9wdAogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGRvIHNvIHRocm91Z2ggYmVpbmcgY2Fqb2xlZCBieSBmbGF0dGVyeSBhbmQgb2Z0ZW4gaW4gYSBzcGlyaXQgb2YKICAgICAgICAgICAgICAgICAgICBjb250ZW50aW91c25lc3MgY2F1c2VkIGJ5IGZhbWlseSBxdWFycmVscy4gQnV0IGlmIGFuIGFkb3B0ZWQgc29uIGlzIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIGluIGRlZmlhbmNlIG9mIHRoZSBsYXcgdG8gYWRvcHQgd2hvbXNvZXZlciBoZSBwbGVhc2VzLCBpbmhlcml0YW5jZXMKICAgICAgICAgICAgICAgICAgICB3aWxsIG5ldmVyIGJlIGdpdmVuIHRvIGJsb29kLXJlbGF0aW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['44.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMKICAgICAgICAgICAgICAgICAgICB0byBndWFyZCBhZ2FpbnN0IHRoaXMgdGhhdCB0aGUgbGF3Z2l2ZXIgZm9yYmFkZSBhIHBlcnNvbiB3aG8gd2FzIGhpbXNlbGYgYWRvcHRlZAogICAgICAgICAgICAgICAgICAgIHRvIGNyZWF0ZSBhIHNvbiBieSBhZG9wdGlvbi4gSW4gd2hhdCBtYW5uZXIgZGlkIGhlIGRlY2xhcmUgaGlzIHZpZXcgcmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhpcz8gV2hlbiBoZSBzYXlzIOKAnCBhIG1hbiBtYXkgcmV0dXJuIHRvIGhpcyBvd24gZmFtaWx5LCBsZWF2aW5nCiAgICAgICAgICAgICAgICAgICAgYmVoaW5kIGhpbSBhIGxhd2Z1bGx5IGJvcm4gc29u4oCdIGhlIG1ha2VzIGl0IHBsYWluLCBJIHRha2UgaXQsIHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBpcyBub3QgbGF3ZnVsIGZvciBoaW0gdG8gYWRvcHQ7IGZvciBpdCBpcyBpbXBvc3NpYmxlIGZvciBhIG1hbiB0byBsZWF2ZSBiZWhpbmQKICAgICAgICAgICAgICAgICAgICBoaW0gYSBsYXdmdWxseSBib3JuIHNvbiwgdW5sZXNzIGhlIGhhdmUgYSBzb24gYm9ybiBvZiBoaXMgYm9keS4gQnV0IHlvdSwKICAgICAgICAgICAgICAgICAgICBMZW9zdHJhdHVzLCBjbGFpbSB0aGUgcmlnaHQgdG8gYnJpbmcgYW4gYWRvcHRlZCBzb24gaW50byB0aGUgaW5oZXJpdGFuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVhZCBtYW4sIHdobyBoYWQgaGltc2VsZiBiZWVuIGFkb3B0ZWQgaW50byBvdXIgZmFtaWx5LCBqdXN0IGFzIHRob3VnaCB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHRha2luZyBwb3NzZXNzaW9uIG9mIHlvdXIgb3duIHByb3BlcnR5LCBhbmQgbm90IHRoYXQgd2hpY2ggdGhlIGxhdyBkZWNsYXJlcwogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIGdpdmVuIHRvIHRoZSBuZWFyZXN0IG9mIGtpbi4gPC90cmFuc2xhdGlvbj4="
translation['44.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIG91cnNlbHZlcywgbWVuIG9mIHRoZSBqdXJ5LCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNlYXNlZCBoYWQgYWRvcHRlZCBhbnlvbmUsIGV2ZW4gdGhvdWdoIHRoZSBsYXcgZG9lcyBub3QgYWxsb3cgaXQsIHdlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgc3VibWl0dGVkOyBvciwgaWYgaGUgaGFkIGxlZnQgYSB3aWxsLCB3ZSBzaG91bGQgYWxzbyBoYXZlIGJlZW4gcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICBhYmlkZSBieSB0aGF0OyBmb3IgZnJvbSB0aGUgYmVnaW5uaW5nIHRoaXMgaGFzIGJlZW4gb3VyIHBvc2l0aW9uOyB3ZSBtYWRlIG5vCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0aW9uIHRvIHRoZWlyIGhvbGRpbmcgdGhlIHByb3BlcnR5IGFuZCByZXR1cm5pbmcgdG8gdGhlaXIgb3JpZ2luYWwgZmFtaWx5CiAgICAgICAgICAgICAgICAgICAgaW4gd2hhdGV2ZXIgbWFubmVyIHRoZXkgcGxlYXNlZC4gPC90cmFuc2xhdGlvbj4="
translation['44.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYWZmYWlyIGhhcyBhdCBsZW5ndGggYmVlbiBleHBvc2VkIGJvdGggYnkgdGhlc2UgbWVuIHRoZW1zZWx2ZXMgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MsIHdlIGhvbGQgdGhhdCBpdCBpcyByaWdodCBmb3IgdXMgdG8gaW5oZXJpdCB0aGUgZXN0YXRlIG9mIEFyY2hpYWRlcywKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCB0aGUgc29uIHRvIGJlIGFkb3B0ZWQgc2hvdWxkIGNvbWUgZnJvbSB1cyB3aG8gaGF2ZSBub3QgYmVlbiBhZG9wdGVkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlLCBhbmQgbm90IGZyb20gdGhlbS4gRm9yIGl0IHdhcyBqdXN0LCBpbiBteSBvcGluaW9uLCB0aGF0IHRoZSBsYXdnaXZlciwgYXMKICAgICAgICAgICAgICAgICAgICBoZSBsYWlkIHVwb24gdGhlIG5lYXJlc3Qgb2Yga2luIHRoZSBkdXR5IG9mIHJlbGlldmluZyB0aGUgbWlzZm9ydHVuZXMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZXMsIGFuZCBvZiBnaXZpbmcgaW4gbWFycmlhZ2UgdGhlaXIgd29tZW4tZm9saywgc28gYWxzbyBoYXMgZ2l2ZW4gdG8KICAgICAgICAgICAgICAgICAgICB0aGVzZSBzYW1lIHBlb3BsZSBhcyB0aGVpciBkdWUgdGhlIHJpZ2h0IG9mIGluaGVyaXRpbmcgYW5kIG9mIHNoYXJpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZCB0aGluZ3MuIDwvdHJhbnNsYXRpb24+"
translation['44.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCB3aGljaCBpcyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHNpZ25pZmljYW50IHRoaW5nLCBhbmQgdGhlIHRoaW5nIGJlc3Qga25vd24gdG8geW91LCBpcyB0aGlzOiB0aGUgbGF3IG9mIFNvbG9uCiAgICAgICAgICAgICAgICAgICAgZG9lcyBub3QgYWxsb3cgYW4gYWRvcHRlZCBzb24gZXZlbiB0byBkaXNwb3NlIGJ5IHdpbGwgb2YgdGhlIHByb3BlcnR5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZhbWlseSBpbnRvIHdoaWNoIGhlIGNvbWVzIGJ5IGFkb3B0aW9uLiBBbmQgdGhlcmUgaXMgZ29vZCByZWFzb24gZm9yIHRoaXMsIGluIG15CiAgICAgICAgICAgICAgICAgICAgdmlldzsgZm9yIGEgcGVyc29uIHdobyBjb21lcyBieSBsZWdhbCBhZG9wdGlvbiBpbnRvIHBvc3Nlc3Npb24gb2YgdGhlIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgb2YgYW5vdGhlciwgb3VnaHQgbm90IHRvIGRlYWwgd2l0aCBpdCBhcyBpZiBpdCB3ZXJlIGhpcyBvd24gcHJpdmF0ZSBlc3RhdGUuIE5vLAogICAgICAgICAgICAgICAgICAgIGhlIHNob3VsZCBhY3QgY29uc2lzdGVudGx5IHdpdGggdGhlIGxhd3MsIGFuZCBkbyBpbiBlYWNoIHBhcnRpY3VsYXIgd2hhdCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzIHByZXNjcmliZS4gPC90cmFuc2xhdGlvbj4="
translation['44.68'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDUiIG9yZz0idW5pZm9ybSIgc2FtcGxlPSJjb21wbGV0ZSIgdHlwZT0ic3BlZWNoIj4KICAgICAgICAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXBvbGxvZG9ydXMgQWdhaW5zdCBTdGVwaGFudXMgMTwvaGVhZD4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5IYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIG92ZXJ3aGVsbWVkIGJ5IGZhbHNlIHRlc3RpbW9ueSwgbWVuIG9mIEF0aGVucywgYW5kIGhhdmluZyBiZWVuIG91dHJhZ2VvdXNseSBhbmQKICAgICAgICAgICAgICAgICAgICBjcnVlbGx5IHRyZWF0ZWQgYnkgUGhvcm1pbywgSSBoYXZlIGNvbWUgdG8gd2luIGluIHlvdXIgY291cnQgYSB2ZXJkaWN0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aG9zZSByZXNwb25zaWJsZSBmb3IgdGhlIHdyb25nLiBJIGJlZyBhbmQgYmVzZWVjaCBhbmQgaW1wbG9yZSB5b3UgYWxsLCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSB0byBnaXZlIG1lIGEgZmF2b3JhYmxlIGhlYXJpbmcg77yIZm9yIGl0IGlzIGEgZ3JlYXQgdGhpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgbWV0IHdpdGggbWlzZm9ydHVuZSwgYXMgSSBoYXZlIGRvbmUsIHRvIGJlIGFibGUgdG8gdGVsbCBvdGhlcnMgb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZXkgaGF2ZSBzdWZmZXJlZCwgYW5kIHRvIGZpbmQgaW4geW91IGxpc3RlbmVycyB3aG8gYXJlIGtpbmRseQogICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlZO+8iTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gUEIgNjM3IiB2YWxpZD0ieWVzIj5BZXNjaC4gUEIgNjM3LTYzOTwvYmlibD4gZm9yIGFuIGFsbW9zdCBpZGVudGljYWwKICAgICAgICAgICAgICAgICAgICAgICAgc2VudGltZW50Ljwvbm90ZT47IGFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBpZiBJIHNoYWxsIHNlZW0gdG8geW91IHRvIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIHZpY3RpbSBvZiB3cm9uZ2RvaW5nLCB0byByZW5kZXIgbWUgdGhlIGFpZCB3aGljaCBpcyBteSBkdWUuIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JIHNoYWxsIHByb3ZlIHRvIHlvdSB0aGF0IHRoaXMgbWFuIFN0ZXBoYW51cyBoYXMgYm90aAogICAgICAgICAgICAgICAgICAgIGdpdmVuIGZhbHNlIHRlc3RpbW9ueSwgYW5kIGhhcyBkb25lIHRoaXMgZnJvbSBhIGJhc2UgZGVzaXJlIGZvciBnYWluLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGlzIGNvbnZpY3RlZCBvdXQgb2YgaGlzIG93biBsaXBzOyBzbyB0cmFuc3BhcmVudCBpcyB0aGUgY2FzZSBmcm9tIGV2ZXJ5IHBvaW50CiAgICAgICAgICAgICAgICAgICAgb2Ygdmlldy4gQW5kIEkgc2hhbGwgZW5kZWF2b3IgdG8gcmVsYXRlIHRvIHlvdSBpbiB0aGUgZmV3ZXN0IHBvc3NpYmxlIHdvcmRzIGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGFzIHRha2VuIHBsYWNlIGJldHdlZW4gUGhvcm1pbyBhbmQgbXlzZWxmIGZyb20gdGhlIGZpcnN0OyBhbmQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBoZWFyaW5nIHRoaXMgeW91IHdpbGwgYmUgY29udmluY2VkIGJvdGggb2YgdGhlIHZpbGxhaW55IG9mIFBob3JtaW8gYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gaGF2ZSBib3JuZSBmYWxzZSB0ZXN0aW1vbnkuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzIGZvciBteXNlbGYsIG1lbiBvZiB0aGUganVyeSwgYSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IHdhcyBsZWZ0IG1lIGJ5IG15IGZhdGhlciwgYW5kIHRoaXMgd2FzIGluIHRoZSBwb3NzZXNzaW9uIG9mIFBob3JtaW8sCiAgICAgICAgICAgICAgICAgICAgd2hvIGZ1cnRoZXJtb3JlIGhhZCBtYXJyaWVkIG15IG1vdGhlciB3aGlsZSBJIHdhcyBvdXQgb2YgdGhlIGNvdW50cnkgb24gcHVibGljCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MsIHNlcnZpbmcgYXMgeW91ciB0cmllcmFyY2guIO+8iEhvdyBoZSBtYW5hZ2VkIGl0LCBwZXJoYXBzIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHByb3BlciBmb3IgYSBzb24gZnVsbHkgdG8gZXhwbGFpbiBhYm91dCBoaXMgbW90aGVyLu+8iSBXaGVuIEkKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCBhbmQgbGVhcm5lZCBvZiB0aGlzIGFuZCBzYXcgd2hhdCBoYWQgYmVlbiBkb25lLCBhbHRob3VnaCBJIHdhcyBncmVhdGx5CiAgICAgICAgICAgICAgICAgICAgaW5jZW5zZWQgYW5kIHRvb2sgaXQgbXVjaCB0byBoZWFydCwgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5hYmxlIHRvIGJyaW5nIGEgcHJpdmF0ZSBhY3Rpb24g77yIZm9yIHRoZXJlIHdlcmUgbm8gYWN0aW9ucyBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgc2luY2UgeW91IHB1dCBvZmYgYWxsIHN1Y2ggbWF0dGVycyBiZWNhdXNlIG9mIHRoZSB3YXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWZlcmVuY2UgaXMgdG8gdGhlIGhvc3RpbGl0aWVzIGJldHdlZW4gQXRoZW5zIGFuZCBUaGViZXMKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHBlcmlvZCBiZXR3ZWVuIHRoZSBiYXR0bGUgb2YgTGV1Y3RyYSDvvIg8ZGF0ZSBhdXRobmFtZT0iLTM3MSIgdmFsdWU9Ii0zNzEiPjM3MTwvZGF0ZT4gQi5DLu+8iSBhbmQgdGhlIGJhdHRsZSBvZiBNYW50aW5lYSDvvIg8ZGF0ZSBhdXRobmFtZT0iLTM2MiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLu+8iS48L25vdGU+77yJLCBidXQgSSBpbmRpY3RlZAogICAgICAgICAgICAgICAgICAgIGhpbSBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgYSBvbiBwLiAyMDIKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygdm9sLiAxLjwvbm90ZT4gb24gdGhlIGNoYXJnZSBvZiBvdXRyYWdlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7hvZXOss+BzrXPic+CIM6zz4HOsc+G4b21PC9mb3JlaWduPiB3YXMgYSBwdWJsaWMgaW5kaWN0bWVudAogICAgICAgICAgICAgICAgICAgICAgICBmb3Igd2FudG9uIG91dHJhZ2UuIEl0IHdhcyBhIGNyaW1pbmFsIGNoYXJnZSwgYW5kIGludm9sdmVkIHRoZSBwZW5hbHR5IG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgZmluZSBwYXlhYmxlIHRvIHRoZSBTdGF0ZSwgb3IsIGluIGV4dHJlbWUgY2FzZXMsIGV2ZW4gdGhlIHBlbmFsdHkgb2YgZGVhdGguCiAgICAgICAgICAgICAgICAgICAgICAgIEl0IHdhcyBmYXIgbW9yZSBzZXJpb3VzIHRoYW4gYSBjaGFyZ2Ugb2YgY29tbW9uIGFzc2F1bHQg77yIPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs6x4bywzrrOteG9t86xz4IgzrThvbfOus63PC9mb3JlaWduPu+8iS4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU0LjEiIHZhbGlkPSJ5ZXMiPkRlbS4gNTQuMTwvYmlibD48L25vdGU+IEhvd2V2ZXIsIHRpbWUgcGFzc2VkIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50IHdhcyBldmFkZWQg77yIc2VlaW5nIHRoYXQgYWN0aW9ucyB3ZXJlIG5vdCBiZWluZwogICAgICAgICAgICAgICAgICAgIGhlbGTvvIksIGFuZCBtb3Jlb3ZlciBjaGlsZHJlbiB3ZXJlIGJvcm4gYnkgbXkgbW90aGVyIHRvIFBob3JtaW8sIGFuZAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoaXMg77yIZm9yIHRoZSB3aG9sZSB0cnV0aCBzaGFsbCBiZSB0b2xkIHlvdSwgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnnvvIksIG1hbnkga2luZGx5IG92ZXJ0dXJlcyB3ZXJlIG1hZGUgb24gdGhlIHBhcnQgb2YgbXkgbW90aGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICBwbGVhcyBvbiBiZWhhbGYgb2YgdGhpcyBtYW4gUGhvcm1pbywgYW5kIG1hbnkgb3ZlcnR1cmVzIG9uIHRoZSBwYXJ0IG9mIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHRoYXQgd2VyZSBib3RoIG1vZGVyYXRlIGFuZCBodW1ibGUgaW4gdGhlaXIgdGVybXMuIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0byBtYWtlIHRoZSBzdG9yeSBicmllZiwgbWVuIG9mIEF0aGVucywgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgZG8gb25lIG9mIHRoZSB0aGluZ3MgdG8gd2hpY2ggaGUgaGFkIGFncmVlZCwgYW5kIHRyaWVkIHRvIHdpdGhob2xkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBtZSB0aGUgbW9uZXkgd2hpY2ggaGUgaGVsZCBhcyBjYXBpdGFsIGluIHRoZSBiYW5rOyBzbyB0aGVuIEkgd2FzIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIGVudGVyIHN1aXQgYWdhaW5zdCBoaW0gYXQgdGhlIGVhcmxpZXN0IG9wcG9ydHVuaXR5LiBQaG9ybWlvIG9uIGhpcyBwYXJ0LAogICAgICAgICAgICAgICAgICAgIHNlZWluZyB0aGF0IGV2ZXJ5dGhpbmcgd291bGQgYmUgYnJvdWdodCB0byBsaWdodCwgYW5kIHRoYXQgaGUgd291bGQgYmUgcHJvdmVkIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhY3RlZCB0b3dhcmQgbWUgYXMgdGhlIGJhc2VzdCBvZiBodW1hbmtpbmQsIGNvbnRyaXZlZCBhbmQgY29uY29jdGVkIHRoaXMKICAgICAgICAgICAgICAgICAgICBwbG90IGluIGZ1cnRoZXJhbmNlIG9mIHdoaWNoIHRoZSBkZWZlbmRhbnQgU3RlcGhhbnVzIGdhdmUgdGhpcyBmYWxzZSB0ZXN0aW1vbnkKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1lLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlIGVudGVyZWQgYSBzcGVjaWFsIHBsZWEgaW4gdGhlIHN1aXQgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgZGVmZW5kYW50LCBjbGFpbWluZyB0aGF0IHRoZSBzdWl0IHdhcyBub3QgYWRtaXNzaWJsZTsgYW5kIHRoZW4gaGUKICAgICAgICAgICAgICAgICAgICBwcm9kdWNlZCBmYWxzZSB3aXRuZXNzZXMgd2hvIHN0YXRlZCB0aGF0IEkgaGFkIGdpdmVuIGhpbSBhIHJlbGVhc2UgZnJvbSBteQogICAgICAgICAgICAgICAgICAgIGNsYWltcywgYW5kIHdobyBkZXBvc2VkIHRvIGEgZm9yZ2VkIGxlYXNlIGFuZCB0byBhIHdpbGwgd2hpY2ggbmV2ZXIgZXhpc3RlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCB0aGUgYWR2YW50YWdlIG92ZXIgbWUgaW4gYmVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgc3BlYWtlciwgYmVjYXVzZSB0aGlzIHdhcyBhIHNwZWNpYWwgcGxlYSBhbmQgdGhlIGNhc2Ugd2FzIG5vdCBjb21pbmcgdG8KICAgICAgICAgICAgICAgICAgICB0cmlhbCB1cG9uIHRoZSByZWFsIGlzc3VlLCBhbmQgYnkgcmVhZGluZyB0aGVzZSBkb2N1bWVudHMgYW5kIG1ha2luZyBvdGhlciBmYWxzZQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMgd2hpY2ggaGUgdGhvdWdodCB3b3VsZCBmYXZvciBoaXMgY2FzZSwgaGUgbWFkZSBzdWNoIGFuIGltcHJlc3Npb24gb24KICAgICAgICAgICAgICAgICAgICB0aGUganVyeSB0aGF0IHRoZXkgcmVmdXNlZCB0byBoZWFyIGEgc2luZ2xlIHdvcmQgZnJvbSBtZS4gSSB3YXMgZmluZWQgb25lLXNpeHRoCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGFtb3VudCBjbGFpbWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgYSBvbiBwLiA1MCBvZgogICAgICAgICAgICAgICAgICAgICAgICB2b2wuIDEuPC9ub3RlPiB3YXMgZGVuaWVkIHRoZSByaWdodCBvZiBhIGhlYXJpbmcsIGFuZCB3YXMgdHJlYXRlZCB3aXRoIHN1Y2gKICAgICAgICAgICAgICAgICAgICBjb250dW1lbHkgYXMgSSBkb3VidCBpZiBhbnkgb3RoZXIgbWFuIGV2ZXIgd2FzLCBhbmQgSSB3ZW50IGZyb20gdGhlIGNvdXJ0LCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiBBdGhlbnMsIHRha2luZyB0aGUgbWF0dGVyIGJpdHRlcmx5IGFuZCBncmlldm91c2x5IHRvIGhlYXJ0LiA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBnb2luZyBvdmVyIGl0IGluIG15IG93biBtaW5kLCBob3dldmVyLCBJIHNlZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIGFidW5kYW50IGV4Y3VzZSBmb3IgdGhvc2Ugd2hvIGdhdmUgdGhhdCB2ZXJkaWN0IO+8iGZvciBJIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGtub3cgd2hhdCBvdGhlciB2b3RlIEkgY291bGQgbXlzZWxmIGhhdmUgZ2l2ZW4sIGlmIEkgaGFkIGtub3duIG5vdGhpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgYW5kIGhhZCBoZWFyZCB0aGUgdGVzdGltb25577yJLCBidXQgdGhhdCBvdXIgYW5nZXIgc2hvdWxkIGZhbGwgdXBvbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiB3aG8gYnkgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSB3ZXJlIHJlc3BvbnNpYmxlIGZvciB0aGlzIHJlc3VsdC4gT2YgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIHdobyBoYXZlIGdpdmVuIHRlc3RpbW9ueSBJIHNoYWxsIHNwZWFrIHdoZW4gSSBwcm9jZWVkIGFnYWluc3QgdGhlbSwgYnV0CiAgICAgICAgICAgICAgICAgICAgcmVnYXJkaW5nIHRoZSB0ZXN0aW1vbnkgb2YgdGhlIGRlZmVuZGFudCBTdGVwaGFudXMgSSBzaGFsbCB0cnkgdG8gaW5zdHJ1Y3QgeW91CiAgICAgICAgICAgICAgICAgICAgYXQgb25jZS4gPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZQogICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvc2l0aW9uIGl0c2VsZiwgYW5kIHJlYWQgaXQsIHBsZWFzZSwgdGhhdCBmcm9tIGl0cyB2ZXJ5IGxhbmd1YWdlIEkgbWF5CiAgICAgICAgICAgICAgICAgICAgcHJvdmUgbXkgcG9pbnQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkOyBhbmQgZG8geW91IGNoZWNrIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3YXRlci48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RlcGhhbnVzLCBzb24gb2YgTWVuZWNsZXMsIG9mIEFjaGFybmFlLCBFbmRpdXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBFcGlnZW5lcywgb2YgTGFtcHRyYWUsIFNjeXRoZXMsIHNvbiBvZiBIYXJtYXRldXMsIG9mIEN5ZGF0aGVuYWV1bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNoYXJuYWUgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9lbmXDr3MsIExhbXB0cmFlIG9mIHRoZSB0cmliZSBFcmVjdGhlw69zLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5ZGF0aGVuYWV1bSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT4gZGVwb3NlIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMsIG9mIEFjaGFybmFlLCB3aGVuIFBob3JtaW8gY2hhbGxlbmdlZAogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cywgaWYgaGUgZGVjbGFyZWQgdGhhdCB0aGUgZG9jdW1lbnQgd2hpY2ggUGhvcm1pbyBwdXQgaW50byB0aGUgYm94CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLCB0byBvcGVuIHRoZSB3aWxsIG9mIFBhc2lvLCB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaWFzLCBicm90aGVyLWluLWxhdyBvZiBDZXBoaXNvcGhvbiwgc3VibWl0dGVkIHRvIHRoZSBhcmJpdHJhdG9yOyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBBcG9sbG9kb3J1cyByZWZ1c2VkIHRvIG9wZW4gaXQ7IGFuZCB0aGF0IHRoZSBkb2N1bWVudCBpbiBxdWVzdGlvbiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgZGVwb3NpdGlvbiwgbWVuIG9mIHRoZSBqdXJ5LCBhbmQgSSB0aGluayB0aGF0IGV2ZW4gaWYgeW91IGhhdmUgbm90aWNlZAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgZWxzZSwgdGhpcyBhdCBsZWFzdCBtdXN0IGhhdmUgc2VlbWVkIHN0cmFuZ2UgdG8geW91LCB0aGF0IGl0IGJlZ2lucyB3aXRoCiAgICAgICAgICAgICAgICAgICAgYSBjaGFsbGVuZ2UgYW5kIGVuZHMgd2l0aCBhIHdpbGwuIEhvd2V2ZXIsIEkgb24gbXkgcGFydCwgY291bnQgaXQgcmlnaHQsIHdoZW4gSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGhhdmUgc2hvd24gd2hhdCBtYXkgYmUgY2FsbGVkIHRoZSBtYWluIHN1YnN0YW5jZSBvZiB0aGUgdGVzdGltb255IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZmFsc2UsIHRoZW4sIGFuZCBub3QgdGlsbCB0aGVuLCB0byBzYXkgc29tZXRoaW5nIGFsc28gYWJvdXQgbWF0dGVycyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgc29ydC4gPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBpdCBpcyBkZXBvc2VkIGJ5IHRoZW0gdGhhdAogICAgICAgICAgICAgICAgICAgIFBob3JtaW8gY2hhbGxlbmdlZCBtZSB0byBvcGVuIHRoZSB3aWxsIHdoaWNoIEFtcGhpYXMsCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcuKAlGlu4oCUbGF3IG9mIENlcGhpc29waG9uLCBzdWJtaXR0ZWQgdG8gdGhlIGFyYml0cmF0b3IKICAgICAgICAgICAgICAgICAgICBUZWlzaWFzOyBhbmQgdGhhdCBJIHJlZnVzZWQgdG8gb3BlbiBpdDsgYW5kIHRoYXQgdGhlIHdpbGwgdG8gd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgZGVwb3NlZCB3YXMgYSBjb3B5IG9mIHRoYXQgb3JpZ2luYWw7IGFuZCB0aGVuIGZvbGxvd3MgYSBjb3B5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGwuIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGFzIHRvIHdoZXRoZXIgUGhvcm1pbyB0ZW5kZXJlZCBtZQogICAgICAgICAgICAgICAgICAgIHRoaXMgY2hhbGxlbmdlIG9yIG5vdCwgYW5kIHdoZXRoZXIgdGhlIHdpbGwgaXMgZ2VudWluZSBvciBzcHVyaW91cyBJIHNheSBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYXMgeWV0OyBJIHdpbGwgZGlzY3VzcyB0aGVzZSBtYXR0ZXJzIGJlZm9yZSB5b3UgcHJlc2VudGx5OyBidXQgSSB3aWxsIHRha2UgdXAKICAgICAgICAgICAgICAgICAgICB0aGUgdGVzdGltb255IHRoZXkgaGF2ZSBnaXZlbiwgdGhhdCBJIHJlZnVzZWQgdG8gb3BlbiB0aGUgZG9jdW1lbnQuIEkgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHlvdSBsb29rIGF0IHRoZSBtYXR0ZXIgaW4gdGhpcyB3YXnigJR3aGF0IHJlYXNvbiB3b3VsZCBhbnlvbmUgaGF2ZSBoYWQKICAgICAgICAgICAgICAgICAgICBmb3IgcmVmdXNpbmcgdG8gb3BlbiBpdD8gSW4gb3JkZXIsIG9uZSBtYXkgc2F5LCB0aGF0IHRoZSB3aWxsIG1pZ2h0IG5vdCBiZSBzaG93bgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBqdXJ5LiA8bWlsZXN0b25lIG49IjEyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwgYW5kIGdvb2QuIElmIHRoZXkgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIGRlcG9zZWQgdG8gdGhlIHdpbGwgYXMgd2VsbCBhcyB0byB0aGUgY2hhbGxlbmdlLCB0aGVyZSB3b3VsZCBoYXZlIGJlZW4gc29tZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBpbiBteSByZWZ1c2luZyB0byBvcGVuIHRoZSBkb2N1bWVudDsgYnV0IHNpbmNlIHRoZXkgZGVwb3NlZCB0byBib3RoLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUganVyeW1lbiB3ZXJlIGdvaW5nIHRvIGhlYXIgdGhlIHdpbGwgaW4gYW55IGNhc2UsIHdoYXQgYWR2YW50YWdlIHdhcyB0aGVyZQogICAgICAgICAgICAgICAgICAgIGZvciBtZSBpbiByZWZ1c2luZz8gTm9uZSwgYXNzdXJlZGx5LiBRdWl0ZSB0aGUgY29udHJhcnksIG1lbiBvZiBBdGhlbnM7IGV2ZW4gaWYKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gaGFkIHRlbmRlcmVkIG5vIGNoYWxsZW5nZSwgYnV0IGhhZCBtZXJlbHkgdGFsa2VkIG9mIHRoZSBtYXR0ZXIsIGFuZAogICAgICAgICAgICAgICAgICAgIHNvbWVvbmUgaGFkIGRlbGl2ZXJlZCBhIGRvY3VtZW50IHRvIHRoZW0gYXMgYSB3aWxsLCA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJzZWN0aW9uIiAvPml0IHdvdWxkIGhhdmUgYmVlbiBteSBidXNpbmVzcyB0byB0ZW5kZXIgdGhlIGNoYWxsZW5nZSBhbmQgdG8gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIG9wZW4gaXQsIGluIG9yZGVyIHRoYXQsIGlmIHRoZSBjb250ZW50cyBkaWZmZXJlZCBmcm9tIHRoZSBzdGF0ZW1lbnRzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlc2UgbWVuIGhhZCBtYWRlIGluIHRoZWlyIGRlcG9zaXRpb24sIEkgbWlnaHQgaGF2ZSBjYWxsZWQgYSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgYnlzdGFuZGVycyBhcyB3aXRuZXNzZXMsIGFuZCBoYXZlIHVzZWQgdGhpcyBmYWN0IGFzIGEgcHJvb2YgdGhhdCB0aGUgcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHN0b3J5IHRvbyB3YXMgYSBmYWJyaWNhdGlvbjsgYnV0LCBpZiB0aGUgY29udGVudHMgd2VyZSB0aGUgc2FtZSwgSSBtaWdodAogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVxdWlyZWQgdGhlIG9uZSBwcmVzZW50aW5nIGl0IHRvIGdpdmUgZXZpZGVuY2UgaGltc2VsZi4gSWYgaGUgY29uc2VudGVkLCBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgaGFkIGEgcmVzcG9uc2libGUgd2l0bmVzcywgYW5kLCBpZiBoZSByZWZ1c2VkLCB0aGlzIHZlcnkgZmFjdCBhZ2FpbgogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgYmVlbiBhIGNvbnZpbmNpbmcgcHJvb2YgZm9yIG1lIHRoYXQgdGhlIGFmZmFpciBoYWQgYmVlbiBjb25jb2N0ZWQuCiAgICAgICAgICAgICAgICAgICAgQW5kIGluIHRoZSBmb3JtZXIgY2FzZSB0aGUgcmVzdWx0IHdvdWxkIGhhdmUgYmVlbiB0aGF0IEkgaGFkIG9uZSBwZXJzb24gd2l0aAogICAgICAgICAgICAgICAgICAgIHdob20gdG8gZGVhbCwgd2hlcmVhcyBhY2NvcmRpbmcgdG8gdGhlIGRlcG9zaXRpb25zIG9mIHRoZXNlIG1lbiBJIGhhdmUgbWFueS4gSXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhbnlvbmUgYW1vbmcgeW91IHdobyB3b3VsZCBoYXZlIGNob3NlbiB0aGUgbGF0dGVyIGNvdXJzZT8gSSB0aGluayBub3Qgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgeW91IHdvdWxkIGhhdmUuIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCB0aGVuLCB5b3Ugb3VnaHQgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSBpdCBvZiBhbnlvbmUgZWxzZSBlaXRoZXIuIEZvciwgbWVuIG9mIEF0aGVucywgaW4gYWxsIGNvdXJzZXMgb2YgYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaW52b2x2ZSBhbmdlciBvciBzb21lIGdldHRpbmcgb2YgZ2FpbiBvciBleGFzcGVyYXRpb24gb3IgYSBzcGlyaXQgb2YKICAgICAgICAgICAgICAgICAgICBqZWFsb3VzeSwgZGlmZmVyZW50IHBlcnNvbnMgd2lsbCBhY3QgaW4gZGlmZmVyZW50IHdheXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbCBkaXNwb3NpdGlvbnM7IGJ1dCBpbiBhbGwgY2FzZXMgd2hlcmUgbm9uZSBvZiB0aGVzZSB0aGluZ3MgaXMgaW52b2x2ZWQsCiAgICAgICAgICAgICAgICAgICAgYnV0IG1lcmVseSBhIGNhbG0gY2FsY3VsYXRpb24gb2Ygb25lJ3Mgb3duIGludGVyZXN0LCB3aG8gd291bGQgYmUgc28gc2Vuc2VsZXNzCiAgICAgICAgICAgICAgICAgICAgYXMgdG8gZGlzbWlzcyB3aGF0IHdvdWxkIGhlbHAgaGltIGFuZCBkbyB3aGF0IHdvdWxkIG1ha2UgaXQgbW9yZSBkaWZmaWN1bHQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIHdpbiBoaXMgY2FzZT8gWWV0IGEgY291cnNlIG9mIGFjdGlvbiB3aGljaCBpcyBuZWl0aGVyIG5hdHVyYWwgbm9yCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSwgd2hpY2gsIGluIHNob3J0LCBubyBodW1hbiBiZWluZyB3b3VsZCBoYXZlIHVuZGVydGFrZW7igJR0aGlzCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2l0bmVzc2VzIGhhdmUgYXR0cmlidXRlZCB0byBtZS4gPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vcmVvdmVyLCBpdCBpcyBub3Qgb25seSBmcm9tIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3RhdGVkIGluIHRoZWlyIGRlcG9zaXRpb24gcmVnYXJkaW5nIG15IHJlZnVzYWwgdG8gb3BlbiB0aGUgZG9jdW1lbnQgdGhhdAogICAgICAgICAgICAgICAgICAgIG9uZSBjYW4gdGVsbCB0aGF0IHRoZXkgYXJlIGx5aW5nLCBidXQgYWxzbyBmcm9tIHRoZSBmYWN0IHRoYXQgdGhleSBoYXZlIGRlcG9zZWQKICAgICAgICAgICAgICAgICAgICBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUgYm90aCB0byBhIGNoYWxsZW5nZSBhbmQgdG8gYSB3aWxsLiBGb3IgSSB0aGluayB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgYWxsIGF3YXJlIHRoYXQgY2hhbGxlbmdlcyB3ZXJlIGRldmlzZWQgZm9yIGFsbCB0cmFuc2FjdGlvbnMgd2hpY2ggaXQgaXMKICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlIHRvIGJyaW5nIGJlZm9yZSB5b3U7IDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIGluc3RhbmNlLAogICAgICAgICAgICAgICAgICAgIGEgbWFuIG1heSBub3QgYmUgcHV0IHRvIHRvcnR1cmUgaW4geW91ciBwcmVzZW5jZeKAlGZvciB0aGlzIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRoYXQgdGhlcmUgYmUgYSBjaGFsbGVuZ2U7IGFnYWluLCBpZiBhbnl0aGluZyBoYXMgYmVlbiB0cmFuc2FjdGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGhhcyB0YWtlbiBwbGFjZSBzb21ld2hlcmUgb3V0IG9mIHRoZSBjb3VudHJ5LCBpdCBpcyBuZWNlc3NhcnkgdGhhdCBmb3IgdGhpcyB0b28KICAgICAgICAgICAgICAgICAgICB0aGVyZSBzaG91bGQgYmUgYSBjaGFsbGVuZ2UgdG8gZ28gYnkgc2VhIG9yIGxhbmQgdG8gdGhlIHBsYWNlIHdoZXJlIHRoZSB0aGluZwogICAgICAgICAgICAgICAgICAgIHdhcyBkb25lOyBhbmQgc28gZm9yIG90aGVyIHRoaW5ncyBvZiB0aGF0IHNvcnQuIEJ1dCBpbiBjYXNlcyB3aGVyZSBpdCBpcwogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlIHRvIHByb2R1Y2UgdGhlIHRoaW5ncyB0aGVtc2VsdmVzIGJlZm9yZSB5b3VyIGV5ZXMsIHdoYXQgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICBzaW1wbGVyIHRoYW4gdG8gcHJvZHVjZSB0aGVtIHB1YmxpY2x5PyA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsCiAgICAgICAgICAgICAgICAgICAgbXkgZmF0aGVyIGRpZWQgYXQgQXRoZW5zLCB0aGUgYXJiaXRyYXRpb24gdG9vayBwbGFjZSBpbiB0aGUgUGFpbnRlZCBTdG9hLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFBhaW50ZWQgU3RvYSB3YXMgdGhlIGxhcmdlc3QgYW5kIGZpbmVzdCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcG9ydGljb2VzIHN1cnJvdW5kaW5nIHRoZSBhZ29yYS4gSXQgZ290IGl0cyBuYW1lIGZyb20gdGhlIGZhbW91cwogICAgICAgICAgICAgICAgICAgICAgICBwYWludGluZ3Mgd2l0aCB3aGljaCBpdHMgd2FsbHMgd2VyZSBhZG9ybmVkLjwvbm90ZT4gYW5kIHRoZXNlIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NlZCB0aGF0IEFtcGhpYXMgcHJvZHVjZWQgdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgYXJiaXRyYXRvci4gVGhlbiwgaWYgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgZ2VudWluZSwgdGhlIGRvY3VtZW50IG91Z2h0IHRvIGhhdmUgYmVlbiBwdXQgaW50byB0aGUgYm94LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTMuMiIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQXRoLiBQb2wuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1My4yPC9iaWJsPjwvbm90ZT4gYW5kIHRoZSBvbmUgcHJvZHVjaW5nIGl0IHNob3VsZCBoYXZlIHNvIHRlc3RpZmllZCwgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IHRoZSBqdXJ5bWVuIG1pZ2h0IGhhdmUgcmVhY2hlZCBhIGRlY2lzaW9uIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBhbmQgYWZ0ZXIgYW4gaW5zcGVjdGlvbiBvZiB0aGUgc2VhbHM7IGFuZCBJLCBvbiBteSBwYXJ0LCBpZiBhbnlvbmUgd2FzCiAgICAgICAgICAgICAgICAgICAgd3JvbmdpbmcgbWUsIG1pZ2h0IGhhdmUgcHJvY2VlZGVkIGFnYWluc3QgaGltLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYXMgaXQgaXMsIG5vIG9uZSBwZXJzb24gaGFzIHRha2VuIHRoZSB3aG9sZSBtYXR0ZXIgdXBvbiBoaW1zZWxmIG9yIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgc3RyYWlnaHRmb3J3YXJkIHRlc3RpbW9ueSwgYXMgb25lIHdvdWxkIGRvIGluIHRlc3RpZnlpbmcgdG8gdGhlIHRydXRoLCBidXQgZWFjaAogICAgICAgICAgICAgICAgICAgIGhhcyBkZXBvc2VkIHRvIGEgcGFydCBvZiB0aGUgc3RvcnksIGZhbmN5aW5nIHRoYXQgaGUgaXMgdmVyeSBjbGV2ZXIgYW5kIHRoYXQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyByZWFzb24gaGUgd2lsbCBlc2NhcGUgcHVuaXNobWVudCzigJRvbmUgb2YgdGhlbSBkZXBvc2luZyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaG9sZHMgYSBkb2N1bWVudCBvbiB3aGljaCBpcyB3cml0dGVuIOKAnHRoZSB3aWxsIG9mIFBhc2lv4oCdOwogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgdGhhdCwgYmVpbmcgc2VudCBieSB0aGUgZm9ybWVyIHBlcnNvbiwgaGUgcHJvZHVjZWQgdGhpcyBkb2N1bWVudCwgYnV0CiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIGtub3dsZWRnZSBhcyB0byB3aGV0aGVyIGl0IHdhcyBnZW51aW5lIG9yIHNwdXJpb3VzLiA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgd2hvIGFyZSBoZXJlIGluIGNvdXJ0LCB1c2luZyB0aGUgY2hhbGxlbmdlCiAgICAgICAgICAgICAgICAgICAgYXMgYSBzY3JlZW4sIGRlcG9zZWQgdG8gYSB3aWxsIGluIHN1Y2ggYSB3YXkgdGhhdCB0aGUganVyeW1lbiBiZWxpZXZlZCB0aGlzIHdpbGwKICAgICAgICAgICAgICAgICAgICB0byBiZSBteSBmYXRoZXIncywgYW5kIEkgd2FzIGRlYmFycmVkIGZyb20gb2J0YWluaW5nIGEgaGVhcmluZyByZWdhcmRpbmcgbXkKICAgICAgICAgICAgICAgICAgICB3cm9uZ3MsIGJ1dCBpbiBzdWNoIGEgd2F5IGFsc28gdGhhdCB0aGV5IG9uIHRoZWlyIHBhcnQgd291bGQgbW9zdCBjbGVhcmx5IGJlCiAgICAgICAgICAgICAgICAgICAgY29udmljdGVkIG9mIGhhdmluZyBnaXZlbiBmYWxzZSB0ZXN0aW1vbnkuIEFuZCB5ZXQgdGhpcyB3YXMgdGhlIHZlcnkgb3Bwb3NpdGUgb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZXkgaW50ZW5kZWQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ib3dldmVyLCB0aGF0IHlvdSBtYXkga25vdwogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgdGFrZSB0aGUgZGVwb3NpdGlvbiBvZiBDZXBoaXNvcGhvbi48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2VwaGlzb3Bob24sIHNvbiBvZiBDZXBoYWxpb24sIG9mIEFwaGlkbmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcGhpZG5hIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlIEFlYW50aXMuPC9ub3RlPiBkZXBvc2VzIHRoYXQgYSBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbGVmdCBoaW0gYnkgaGlzIGZhdGhlciwgb24gd2hpY2ggd2FzIGluc2NyaWJlZCDigJx0aGUgd2lsbCBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYXNpby7igJ08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCB3YXMgYSBzaW1wbGUKICAgICAgICAgICAgICAgICAgICB0aGluZywgbWVuIG9mIHRoZSBqdXJ5LCBmb3IgdGhlIG9uZSB3aG8gZ2F2ZSB0aGlzIHRlc3RpbW9ueSB0byBhZGQKICAgICAgICAgICAgICAgICAgICDigJxhbmQgdGhpcyBpcyB0aGUgZG9jdW1lbnQgd2hpY2ggdGhlIGRlcG9uZW50IGV4aGliaXRzLOKAnSBhbmQKICAgICAgICAgICAgICAgICAgICB0byBwdXQgdGhlIGRvY3VtZW50IGludG8gdGhlIGJveC4gQnV0LCBJIHByZXN1bWUsIGhlIHRob3VnaHQgdGhhdCB0aGlzIGZhbHNlaG9vZAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGRlc2VydmUgeW91ciBpbmRpZ25hdGlvbiwgYW5kIHRoYXQgeW91IHdvdWxkIHB1bmlzaCBoaW0gZm9yIGl0LCB3aGVyZWFzIHRvCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmeSB0aGF0IGEgZG9jdW1lbnQgaGFkIGJlZW4gYmVxdWVhdGhlZCB0byBoaW0gd2FzIGEgdHJpZmxpbmcgbWF0dGVyIGFuZCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiBubyBjb25zZXF1ZW5jZS4gQW5kIHlldCBpdCBpcyB0aGlzIHZlcnkgdGhpbmcgdGhhdCBtYWtlcyB0aGUgd2hvbGUgbWF0dGVyCiAgICAgICAgICAgICAgICAgICAgY2xlYXIsIGFuZCBwcm92ZXMgdGhhdCB0aGV5IGhhdmUgY29uY29jdGVkIGl0LiA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiB0aGUgaW5zY3JpcHRpb24gb24gdGhlIHdpbGwgaGFkIGJlZW4g4oCcdGhlIHByb3BlcnR5IG9mIFBhc2lvCiAgICAgICAgICAgICAgICAgICAgYW5kIFBob3JtaW/igJ0gb3Ig4oCcaW4gdGhlIG1hdHRlciBvZiBQaG9ybWlvLOKAnSBvcgogICAgICAgICAgICAgICAgICAgIHNvbWV0aGluZyBvZiB0aGF0IHNvcnQsIGhlIHdvdWxkIG5hdHVyYWxseSBoYXZlIGtlcHQgaXQgZm9yIGhpbTsgYnV0IGlmLCBhcyBoZQogICAgICAgICAgICAgICAgICAgIGhhcyB0ZXN0aWZpZWQsIHRoZSBpbnNjcmlwdGlvbiB3YXMg4oCcdGhlIHdpbGwgb2YgUGFzaW8s4oCdIEkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgY2VydGFpbmx5IGhhdmUgYXBwcm9wcmlhdGVkIGl0LCBrbm93aW5nIHRoYXQgSSB3YXMgYWJvdXQgdG8gZ28gdG8gbGF3LAogICAgICAgICAgICAgICAgICAgIGFuZCBrbm93aW5nIGZ1cnRoZXIgdGhhdCwgaWYgaXRzIGNvbnRlbnRzIHdlcmUgYXMgcmVwcmVzZW50ZWQsIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHByZWp1ZGljaWFsIHRvIG15IGludGVyZXN0czsgZm9yIEkgd2FzIHRoZSBoZWlyLCBhbmQgaWYgdGhlIHdpbGwgd2FzIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyJ3MsIGl0IGJlbG9uZ2VkIHRvIG1lLCBhcyBkaWQgYWxzbyBhbGwgdGhlIHJlc3Qgb2YgbXkgZmF0aGVyJ3MgZXN0YXRlLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgYnkgaXRzIGhhdmluZyBiZWVuIHByb2R1Y2VkIHRvCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbywgYnkgaXRzIGhhdmluZyBiZWVuIGluc2NyaWJlZCDigJx0aGUgd2lsbCBvZiBQYXNpbyzigJ0KICAgICAgICAgICAgICAgICAgICBhbmQgeWV0IGlnbm9yZWQgYnkgbWUsIGl0IGlzIHByb3ZlZCB0aGF0IHRoZSB3aWxsIGlzIGEgZm9yZ2VyeSBhbmQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgb2YgQ2VwaGlzb3Bob24gaXMgZmFsc2UuIEJ1dCBubyBtb3JlIG9mIENlcGhpc29waG9uOyBpdCBpcyBub3Qgd2l0aAogICAgICAgICAgICAgICAgICAgIGhpbSB0aGF0IEkgaGF2ZSB0byBkbyBhdCBwcmVzZW50LCBhbmQgaGUgaGFzIGdpdmVuIG5vIHRlc3RpbW9ueSBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb250ZW50cyBvZiB0aGUgd2lsbC4gPG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBtZW4gb2YgQXRoZW5zLAogICAgICAgICAgICAgICAgICAgIEkgd291bGQgaGF2ZSB5b3UgY29uc2lkZXIgaG93IHN0cm9uZyBhIHByb29mIHRoaXMgYWxzbyBpcyB0aGF0IHRoZXNlIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gZmFsc2UgdGVzdGltb255LiBGb3Igd2hlbiB0aGUgd2l0bmVzcyB3aG8gc3RhdGVkIHRoYXQgaGUgaGFkIHRoZSBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgIGluIGhpcyBvd24gcG9zc2Vzc2lvbiBkaWQgbm90IGRhcmUgdG8gc2F5IHRoYXQgdGhlIG9uZSBwcm9kdWNlZCBieSBQaG9ybWlvIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgY29weSBvZiB0aGUgb25lIGluIGhpcyBvd24ga2VlcGluZzsgYW5kIHdoZW4gdGhlc2UgbWVuIGNhbm5vdCBzdGF0ZSB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIHByZXNlbnQgaW4gdGhlIGZpcnN0IGluc3RhbmNlIG9yIHRoYXQgdGhleSBzYXcgdGhlIGRvY3VtZW50IG9wZW5lZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRyYXRvciwgYnV0IGhhdmUgdGhlbXNlbHZlcyBhY3R1YWxseSBkZXBvc2VkIHRoYXQgSSByZWZ1c2VkIHRvIG9wZW4gaXQsCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSB0ZXN0aWZpZWQgbm93IHRoYXQgdGhlIG9uZSBpcyBhIGNvcHkgb2YgdGhlIG90aGVyLCBpcyBub3QgdGhpcyB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlZCB0aGVtc2VsdmVzIG9mIGZhbHNpZnlpbmc/IDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3JlIHRoYW4gYWxsIHRoaXMsIG1lbiBvZiBBdGhlbnMsIGFueSBtYW4gYnkgZXhhbWluaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmRpbmcgb2YgdGhlIGRlcG9zaXRpb24gY2FuIHNlZSB0aGF0IGl0IGlzIG5vdGhpbmcgYnV0IGEgY29udHJpdmFuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGVpcnMgdG8gdGhlIGVuZCB0aGF0IHJpZ2h0bHkgb3Igd3JvbmdseSBpdCBtYXkgYXBwZWFyIHRoYXQgbXkgZmF0aGVyIG1hZGUgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICB3aWxsLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRha2UgdGhlIGRlcG9zaXRpb24gaXRzZWxmLCBhbmQKICAgICAgICAgICAgICAgICAgICByZWFkLCBzdG9wcGluZyB3aGVyZXZlciBJIGJpZCB5b3UsIHRoYXQgZnJvbSBpdHMgb3duIHdvcmRpbmcgSSBtYXkgcHJvdmUgbXkKICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQuPHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZT5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPi4gLiAuIGRlcG9zZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGJlZm9yZSB0aGUgYXJiaXRyYXRvcgogICAgICAgICAgICAgICAgICAgICAgICBUZWlzaWFzLCB3aGVuIFBob3JtaW8gY2hhbGxlbmdlZCBBcG9sbG9kb3J1cywgaWYgaGUgZGVjbGFyZWQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQgd2FzIG5vdCBhIGNvcHkgb2YgdGhlIHdpbGwgb2YgUGFzaW8gLiAuIC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjUiIHVuaXQ9InNlY3Rpb24iIC8+U3RvcCByZWFkaW5nLiBCZWFyIGluIG1pbmQgdGhhdCB0aGUgd29yZHMgYXJlCiAgICAgICAgICAgICAgICAgICAg4oCcb2YgdGhlIHdpbGwgb2YgUGFzaW8u4oCdIE5vdyBwZXJzb25zIHdobyB3aXNoZWQgdG8gYmVhcgogICAgICAgICAgICAgICAgICAgIHdpdG5lc3MgdG8gdGhlIHRydXRo4oCUYXNzdW1pbmcgdGhhdCBpdCBpcyBhYnNvbHV0ZWx5IGVzdGFibGlzaGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgY2hhbGxlbmdlIHdhcyB0ZW5kZXJlZCwgd2hpY2ggaXQgd2FzIG5vdOKAlG91Z2h0IHRvIGhhdmUgZ2l2ZW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgaW4gdGhlIGZvbGxvd2luZyB3YXkuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gYWdhaW4gZnJvbSB0aGUgYmVnaW5uaW5nLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBkZXBvc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IgVGVpc2lhcyAuIC4gLjwvcXVvdGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZSBkbyBkZXBvc2U7IGZvciB3ZSB3ZXJlIHByZXNlbnQuIFJlYWQgb24uPHF1b3RlIHR5cGU9ImNvbnRpbnVlZCI+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiB3aGVuIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlZCBBcG9sbG9kb3J1cyAuIC4gLjwvcXVvdGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzLAogICAgICAgICAgICAgICAgICAgIHRvbywgdGhleSBtaWdodCBwcm9wZXJseSBoYXZlIHN0YXRlZCwgYXNzdW1pbmcgdGhhdCBoZSByZWFsbHkgdGVuZGVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZS48cXVvdGUgdHlwZT0iY29udGludWVkIj48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPi4gLiAuIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkIHRoYXQgdGhlIGRvY3VtZW50IHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvIC4gLiAuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCByaWdodAogICAgICAgICAgICAgICAgICAgIHRoZXJlLiBUaGVyZSBpcyBub3QgYSBwZXJzb24gaW4gdGhlIHdvcmxkLCBJIHByZXN1bWUsIHdobyB3b3VsZCBoYXZlIHByb2NlZWRlZAogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgdGhpcyB0ZXN0aW1vbnksIHVubGVzcyBoZSBoYWQgYmVlbiBwcmVzZW50IHdoZW4gbXkgZmF0aGVyIGRyZXcgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbC4gSW5zdGVhZCwgaGUgd291bGQgaGF2ZSBzYWlkIGF0IG9uY2UsIOKAnEhvdyBkbyB3ZSBrbm93IGlmIHRoZXJlIGlzCiAgICAgICAgICAgICAgICAgICAgYW55IHdpbGwgb2YgUGFzaW8ncz/igJ3igJRhbmQgaGUgd291bGQgaGF2ZSBkZW1hbmRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyB3cml0ZSwgYXMgaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgY2hhbGxlbmdlOiDigJxJZiBJIGRlY2xhcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIG5vdCBhIGNvcHkgb2YgdGhlIHdpbGwgd2hpY2ggUGhvcm1pbyBzdGF0ZWQgdGhhdCBQYXNpbyBoYWQKICAgICAgICAgICAgICAgICAgICBsZWZ0LOKAneKAlG5vdCDigJxvZiB0aGUgd2lsbCBvZiBQYXNpby7igJ0gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyB3YXMgdG8gdGVzdGlmeSB0aGF0IHRoZXJlIHdhcyBhIHdpbGwg77yId2hpY2ggd2FzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9u77yJLCB0aGUgb3RoZXIgdGhhdCBQaG9ybWlvIHNhaWQgdGhhdCB0aGVyZSB3YXMuIEFuZCwgSSB0YWtlIGl0LAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIGEgd29ybGQgb2YgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgdGhpbmcncyBiZWluZyBzbywgYW5kIFBob3JtaW8ncyBzYXlpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGlzLiA8bWlsZXN0b25lIG49IjI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28sCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCB5b3UgbWF5IGtub3cgaG93IG1hbnkgYW5kIGhvdyBpbXBvcnRhbnQgb2JqZWN0cyB3ZXJlIHRvIGJlIHNlY3VyZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZmFicmljYXRpb24gb2YgdGhlIHdpbGwsIGxpc3RlbiBmb3IgYSBtb21lbnQuIFRoZSBmaXJzdCwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICB3YXMgdGhpcywgdGhhdCBQaG9ybWlvIHNob3VsZCBlc2NhcGUgcGF5aW5nIHRoZSBwZW5hbHR5IGZvciBjb3JydXB0aW5nIG9uZSB3aG9tCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHByb3BlciBmb3IgbWUgdG8gbmFtZSwgYnV0IHdob20geW91IGtub3cgb2YgeW91cnNlbHZlcywgZXZlbiBpZiBJIGRvCiAgICAgICAgICAgICAgICAgICAgbm90IG5hbWUgaGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGFzc3VtcHRpb24gb2YgcmVsdWN0YW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBzcGVhayBvZiBoaXMgbW90aGVyIGlzIGluIGdsYXJpbmcgY29udHJhc3Qgd2l0aCB0aGUgZ3Jvc3MgYWNjdXNhdGlvbiBtYWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGVyIGxhdGVyIGluIHRoZSBzcGVlY2guPC9ub3RlPjsgbmV4dCwgdGhhdCBoZSBtaWdodCBnZXQgcG9zc2Vzc2lvbgogICAgICAgICAgICAgICAgICAgIG9mIG15IGZhdGhlcidzIHByb3BlcnR5IHdoaWNoIHdhcyBpbiBteSBtb3RoZXIncyBrZWVwaW5nOyBhbmQgaW4gYWRkaXRpb24gdG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCB0aGF0IGhlIG1pZ2h0IGJlY29tZSBtYXN0ZXIgb2YgZXZlcnl0aGluZyBlbHNlIHdoaWNoIGJlbG9uZ2VkIHRvIHVzLiBUaGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBpcyBzbywgeW91IHdpbGwgYmUgY29udmluY2VkIHdoZW4geW91IGhlYXIgdGhlIHdpbGwuIEZvciBpdCB3aWxsIGJlIGZvdW5kLAogICAgICAgICAgICAgICAgICAgIG5vdCBsaWtlIHRoYXQgb2YgYSBmYXRoZXIgd3JpdGluZyBpbiB0aGUgaW50ZXJlc3Qgb2YgaGlzIHNvbnMsIGJ1dCBsaWtlIHRoYXQgb2YKICAgICAgICAgICAgICAgICAgICBhIHNsYXZlIHdobyBoYXMgc2hhbWVmdWxseSBtaXN1c2VkIHdoYXQgYmVsb25nZWQgdG8gaGlzIG1hc3RlciwgYW5kIHdobyBpcwogICAgICAgICAgICAgICAgICAgIHNlZWtpbmcgaG93IGhlIG1heSBlc2NhcGUgcHVuaXNobWVudC4gPG1pbGVzdG9uZSBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlbSB0aGUgd2lsbCBpdHNlbGYsIHRvIHdoaWNoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGhhdmUgZGVwb3NlZCBhbG9uZyB3aXRoIHRoZSBjaGFsbGVuZ2U7IGFuZCBkbyB5b3UgbWFyayB3ZWxsIHdoYXQgSQogICAgICAgICAgICAgICAgICAgICAgICBzYXkuPHF1b3RlIHR5cGU9IldpbGwiPjx0aXRsZT5XaWxsPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgaXMgdGhlIHdpbGwgb2YgUGFzaW8gb2YgQWNoYXJuYWUuIEkgZ2l2ZSBteSB3aWZlIEFyY2hpcHDDqgogICAgICAgICAgICAgICAgICAgICAgICB0byBQaG9ybWlvLCBhbmQgSSBnaXZlIGFzIGRvd3J5IHRvIEFyY2hpcHDDqiB0aGUgdGFsZW50IGR1ZSB0byBtZQogICAgICAgICAgICAgICAgICAgICAgICBhdCBQZXBhcmV0aHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGVwYXJldGh1cyBpcyBhIHNtYWxsIGlzbGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ydGggb2YgRXVib2VhLCBvbiB3aGljaCB3YXMgYW4gQXRoZW5pYW4gY29sb255LiBJdHMgbW9kZXJuIG5hbWUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNrb3BlbG9zLjwvbm90ZT4gdGhlIHRhbGVudCBkdWUgdG8gbWUgaGVyZSBpbiBBdGhlbnMsIGEgbG9kZ2luZy1ob3VzZQogICAgICAgICAgICAgICAgICAgICAgICB3b3J0aCBvbmUgaHVuZHJlZCBtaW5hZSwgdGhlIGZlbWFsZSBzbGF2ZXMgYW5kIGpld2VscnksIGFuZCBhbGwgZWxzZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHNoZSBoYXMgaW4gdGhlIGhvdXNlLiBBbGwgdGhlc2UgdGhpbmdzIEkgZ2l2ZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBBcmNoaXBww6ouPC9xdW90ZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoYXZlIGhlYXJkLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBBdGhlbnMsIHRoZSBsYXJnZSBhbW91bnQgb2YgdGhlIGRvd3J5LOKAlGEgdGFsZW50IGZyb20KICAgICAgICAgICAgICAgICAgICBQZXBhcmV0aHVzLCBhIHRhbGVudCBmcm9tIEF0aGVucywgYSBsb2RnaW5nLWhvdXNlIHdvcnRoIGEgaHVuZHJlZCBtaW5hZSwgZmVtYWxlCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzIGFuZCBqZXdlbHJ5LCBhbmQgYWxsIGVsc2UgdGhhdCBzaGUgaGFzIGluIGhlciBwb3NzZXNzaW9u4oCUSSBnaXZlCiAgICAgICAgICAgICAgICAgICAgaXQgYWxsLCBzYXlzIHRoZSB3aWxsOyBhbmQgYnkgdGhpcyBjbGF1c2UgaGUgcHJlY2x1ZGVzIHVzIGV2ZW4gZnJvbSBzZWFyY2hpbmcKICAgICAgICAgICAgICAgICAgICBmb3IgYW55IG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHdhcyBsZWZ0LiA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGxldCBtZSBzaG93IHlvdSB0aGUgbGVhc2UgdW5kZXIgd2hpY2gKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGhhZCB0YWtlbiB0aGUgYmFuayBmcm9tIG15IGZhdGhlcjsgZm9yIGZyb20gdGhpcyBhbHNvLCBzcHVyaW91cyB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBpdCBpcywgeW91IHdpbGwgc2VlIHRoYXQgdGhlIHdpbGwgaXMgZmFicmljYXRpb24gdGhyb3VnaCBhbmQgdGhyb3VnaC4gSSB3aWxsIHNldAogICAgICAgICAgICAgICAgICAgIGZvcnRoIGZvciB5b3UsIG5vdCBhIGRpZmZlcmVudCBsZWFzZSwgYnV0IHRoZSBvbmUgd2hpY2ggUGhvcm1pbyBwcm9kdWNlZCwgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGVyZSBpcyBhbiBhZGRlZCBjbGF1c2Ugc2V0dGluZyBkb3duIG15IGZhdGhlciBhcyBvd2luZyBQaG9ybmlpbyBlbGV2ZW4KICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIG9uIHRoZSBkZXBvc2l0cy4gPG1pbGVzdG9uZSBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGhhZCwgSSB0aGluaywKICAgICAgICAgICAgICAgICAgICB0aGUgZm9sbG93aW5nIHB1cnBvc2UuIE9mIHRoZSBlZmZlY3RzIGluIHRoZSBob3VzZSBoZSBtYWRlIGhpbXNlbGYgbWFzdGVyIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGwsIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IGhhZCBiZWVuIGdpdmVuIGFzIGEgZG93cnkgd2l0aCBteSBtb3RoZXIsIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUganVzdCBoZWFyZDsgYnV0IHRoZSBtb25leSBpbiB0aGUgYmFuaywgYWJvdXQgd2hpY2ggZXZlcnlib2R5IGtuZXcsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGNvdWxkIG5vdCBiZSBoaWRkZW4sIGhlIGdvdCBpbnRvIGhpcyBoYW5kcyBieSByZXByZXNlbnRpbmcgdGhhdCBvdXIgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgb3dlZCBpdCwgc28gdGhhdCB3aGF0ZXZlciBzdW1zIGhlIG1pZ2h0IGJlIHByb3ZlZCB0byBoYXZlIGluIGhpcyBwb3NzZXNzaW9uIGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgY2xhaW0gdG8gaGF2ZSByZWNlaXZlZCBpbiBwYXltZW50LiBZb3UgaGF2ZSBwZXJoYXBzIGltYWdpbmVkLCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbGVjaXplczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+4oCcPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs+D4b25zrvOv865zrrOv8+CPC9mb3JlaWduPiBpcyBhIHdvcmQgb2YgbmFycm93ZXIgbWVhbmluZyB0aGFuIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OsuG9sc+BzrLOsc+Bzr/PgjwvZm9yZWlnbj4sIGFuZCBpcyBhcHBsaWVkIG1haW5seSB0byBmYXVsdHMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcHJvbnVuY2lhdGlvbiBvciBtaXN0YWtlcyBpbiBncmFtbWFyLCBlc3BlY2lhbGx5IHN5bnRheCwgZHVlIHRvIGZvcmVpZ24KICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2lu4oCdIO+8iFNhbmR5c++8iS4gSXQgd291bGQsIGhvd2V2ZXIsIGJlIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1dGlsZSB0byBsb29rIGZvciBhIHNwZWNpZmljIGVycm9yIGluIHRoZSwgdmVyeSBwcm9iYWJseSBzcHVyaW91cywgbGVhc2UKICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQgaW4gdGhlIG9yYXRpb24uPC9ub3RlPiBpbiBoaXMgc3BlZWNoLCB0aGF0IGhlIGlzIGEgYmFyYmFyaWFuIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHJlYWRpbHkgdG8gYmUgZGVzcGlzZWQuIFRoZSBmZWxsb3cgaXMgaW5kZWVkIGEgYmFyYmFyaWFuIGluIHRoYXQgaGUgaGF0ZXMKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG9tIGhlIG91Z2h0IHRvIGhvbm9yOyBidXQgaW4gdmlsbGFpbnkgYW5kIGluIGJyaW5naW5nIG1hdHRlcnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcnVpbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1ldGFwaG9yIGlzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgaG91c2UtYnJlYWtpbmcuPC9ub3RlPiBoZSBpcyBzZWNvbmQgdG8gbm9uZS4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UgdGhlIGxlYXNlIGFuZCByZWFkCiAgICAgICAgICAgICAgICAgICAgaXTigJR0aGUgbGVhc2Ugd2hpY2ggdGhleSBwdXQgaW4sIGFzIHRoZXkgZGlkIHRoZSB3aWxsLCBieSBtZWFucyBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZS48cXVvdGUgdHlwZT0iTGVhc2Ugb2YgVGhlIEJhbmsiPjx0aXRsZT5MZWFzZSBvZiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhbms8L3RpdGxlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24gdGhlIGZvbGxvd2luZyB0ZXJtcyBQYXNpbwogICAgICAgICAgICAgICAgICAgICAgICBoYXMgbGV0IHRoZSBiYW5rIHRvIFBob3JtaW86IFBob3JtaW8gaXMgdG8gcGF5IHRvIHRoZSBzb25zIG9mIFBhc2lvIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbnRhbCBmb3IgdGhlIGJhbmsgdHdvIHRhbGVudHMgYW5kIGZvcnR5IG1pbmFlIGVhY2ggeWVhciBhYm92ZSB0aGUgZGFpbHkKICAgICAgICAgICAgICAgICAgICAgICAgZXhwZW5kaXR1cmUsIGFuZCBpdCBzaGFsbCBub3QgYmUgbGF3ZnVsIGZvciBQaG9ybWlvIHRvIGNhcnJ5IG9uIGEgYmFua2luZwogICAgICAgICAgICAgICAgICAgICAgICBidXNpbmVzcyBpbmRlcGVuZGVudGx5IHVubGVzcyBoZSBmaXJzdCBvYnRhaW5zIHRoZSBjb25zZW50IG9mIHRoZSBzb25zIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhc2lvLiBBbmQgUGFzaW8gb3dlcyB0aGUgYmFuayBlbGV2ZW4gdGFsZW50cyB1cG9uIHRoZSBkZXBvc2l0cy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgaXMgdGhlIGFncmVlbWVudCB3aGljaCBQaG9ybWlvIHByb2R1Y2VkLCBhbGxlZ2luZyB0aGF0IGhlIGhhZCBsZWFzZWQKICAgICAgICAgICAgICAgICAgICB0aGUgYmFuayB1cG9uIHRoZXNlIHRlcm1zLiBZb3UgbGVhcm4gZnJvbSBoZWFyaW5nIGl0IHJlYWQgdGhhdCBQaG9ybWlvLCBvdmVyIGFuZAogICAgICAgICAgICAgICAgICAgIGFib3ZlIHRoZSBkYWlseSBleHBlbmRpdHVyZSwgd2FzIHRvIHBheSBhcyByZW50IHR3byB0YWxlbnRzIGFuZCBmb3J0eSBtaW5hZSBlYWNoCiAgICAgICAgICAgICAgICAgICAgeWVhciwgYW5kIHRoYXQgaXQgd2FzIG5vdCB0byBiZSBwZXJtaXR0ZWQgaGltIHRvIGNhcnJ5IG9uIGEgYmFua2luZyBidXNpbmVzcywKICAgICAgICAgICAgICAgICAgICB1bmxlc3MgaGUgb2J0YWluZWQgb3VyIGNvbnNlbnQ7IGFuZCB0aGVyZSBpcyBhZGRlZCBhcyBhIGZpbmFsIHN0YXRlbWVudCwKICAgICAgICAgICAgICAgICAgICDigJxQYXNpbyBvd2VzIGVsZXZlbiB0YWxlbnRzIHVwb24gdGhlIGRlcG9zaXRzLuKAnSA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXMgdGhlcmUgYW55IG1hbiB3aG8gd291bGQgaGF2ZSBzdWJtaXR0ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcGF5bWVudCBvZiBzbyBsYXJnZSBhIHJlbnRhbCBmb3IgdGhlIGNvdW50ZXIsIHRoZSBzaXRlLCBhbmQgdGhlIGJvb2tzPyBBbmQgaXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhbnkgbWFuIHdobyB3b3VsZCBoYXZlIGVudHJ1c3RlZCB0aGUgcmVzdCBvZiB0aGUgYXNzZXRzIHRvIGEgbWFuIHRoYW5rcyB0bwogICAgICAgICAgICAgICAgICAgIHdob20gdGhlIGJhbmsgaGFkIGluY3VycmVkIHNvIGdyZWF0IGEgbGlhYmlsaXR5Pzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGFzaW8gaXMgc3RhdGVkIGJ5IFBob3JtaW8gdG8gaGF2ZSBvd2VkIHRoZSBiYW5rIGVsZXZlbiB0YWxlbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNi40IiB2YWxpZD0ieWVzIj5EZW0uIDM2LjQ8L2JpYmw+77yJLiBUaGlzIGRlYnQgbWF5CiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGFzc3VtZWQgdG8gaGF2ZSBiZWVuIHByb3Blcmx5IHNlY3VyZWQsIHNvIHRoYXQgaXQgd2FzIGluIG5vIHNlbnNlIGEKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaWNpdC4gVGhlIHByZXNlbnQgc3BlYWtlciwgaG93ZXZlciwgcmVwcmVzZW50cyBpdCBhcyBzdWNoLCBhbmQgaW1wbGllcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBiYW5rIGhhZCBiZWVuIGJyb3VnaHQgdG8gaW5zb2x2ZW5jZSB0aHJvdWdoIFBob3JtaW8ncwogICAgICAgICAgICAgICAgICAgICAgICBpbmNvbXBldGVuY2UuPC9ub3RlPiBGb3IsIGlmIHRoZXJlIHdhcyBhIHNob3J0YWdlIG9mIHNvIGxhcmdlIGFuIGFtb3VudCwgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgaW5jdXJyZWQgd2hpbGUgUGhvcm1pbyB3YXMgbWFuYWdlci4gRm9yIHlvdSBhbGwga25vdyB0aGF0LCB3aGlsZSBteSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICB3YXMgZW5nYWdlZCBpbiB0aGUgYmFua2luZyBidXNpbmVzcywgUGhvcm1pbyBzYXQgYXQgdGhlIGNvdW50ZXIgYW5kIHdhcyBoaXMKICAgICAgICAgICAgICAgICAgICBtYW5hZ2VyOyBzbyB0aGF0IGhlIG91Z2h0IHJhdGhlciB0byBiZSBpbiB0aGUgbWlsbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2xhdmVzIHdlcmUgb2Z0ZW4gY29uZGVtbmVkIHRvIHRoZSBoZWF2eSBsYWJvciBvZiB0dXJuaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtaWxsc3RvbmUuPC9ub3RlPiB0aGFuIHRvIGJlY29tZSBtYXN0ZXIgb2YgdGhlIHJlc3Qgb2YgdGhlIHByb3BlcnR5LgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjM0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEkgcGFzcyBvdmVyIHRoaXMgYW5kIGFsbCBlbHNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIG1pZ2h0IGZpbmQgdG8gc2F5IGFib3V0IHRoZSBlbGV2ZW4gdGFsZW50cywgdG8gc2hvdyB0aGF0IG15IGZhdGhlciBkaWQKICAgICAgICAgICAgICAgICAgICBub3Qgb3dlIHRoZW0gYnV0IHRoYXQgUGhvcm1pbyBzZWNyZXRseSBhcHByb3ByaWF0ZWQgdGhlbS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBsZXQgbWUgcmVtaW5kIHlvdSBvZiB0aGUgcHVycG9zZSBmb3Igd2hpY2ggSSByZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGxlYXNlLCBuYW1lbHksIHRvIHByb3ZlIHRoYXQgdGhlIHdpbGwgaXMgc3B1cmlvdXMuIEZvciBpdCBzdGFuZHMgd3JpdHRlbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzZSB0aGF0IGl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgZm9yIFBob3JtaW8gdG8gZW5nYWdlIGluIGJhbmtpbmcgYnVzaW5lc3MsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIGhlIG9idGFpbnMgb3VyIGNvbnNlbnQuIFRoaXMgY2xhdXNlIGFic29sdXRlbHkgcHJvdmVzIHRoZSB3aWxsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc3B1cmlvdXMuIEZvciB3aGF0IG1hbiwgd2hvIGhhZCB0YWtlbiBwcmVjYXV0aW9ucyB0aGF0IHRoZSBwcm9maXRzIHdoaWNoIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBtaWdodCBtYWtlIGJ5IGJhbmtpbmcgc2hvdWxkIGFjY3J1ZSB0byBoaXMgb3duIGNoaWxkcmVuIGFuZCBub3QgdG8gUGhvcm1pbwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYsIGFuZCB0byBzZWN1cmUgdGhpcyBlbmQgaGFkIHN0aXB1bGF0ZWQgdGhhdCBpdCBzaG91bGQgbm90IGJlIHBlcm1pdHRlZAogICAgICAgICAgICAgICAgICAgIGhpbSB0byBlbmdhZ2UgaW4gYmFua2luZyBmb3IgaGltc2VsZiwgbGVzdCBoaXMgaW50ZXJlc3RzIG1pZ2h0IGJlIHNlcGFyYXRlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgb3Vyc+KAlHdoYXQgbWFuLCBJIGFzaywgaW4gdGhlc2UgY2lyY3Vtc3RhbmNlcyB3b3VsZCBoYXZlIHByb3ZpZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIHNob3VsZCBnZXQgcG9zc2Vzc2lvbiBvZiB3aGF0IGhlIGhhZCBoaW1zZWxmIHdvbiBieSBoaXMgbGFib3IgYW5kIGxlZnQKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgaG91c2U/IDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdvdWxkIGhlIGhhdmUgYmVncnVkZ2VkIGhpbQogICAgICAgICAgICAgICAgICAgIHRoZSBiYW5raW5nIGJ1c2luZXNzLCBpbiB3aGljaCBoZSBtaWdodCBoYXZlIGdpdmVuIGhpbSBhIHNoYXJlIHdpdGhvdXQgZGlzZ3JhY2UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHlldCBoYXZlIGdpdmVuIGhpbSBoaXMgd2lmZSwgYSBiZXF1ZXN0IGRpc2dyYWNlZnVsIGFib3ZlIGFsbCBvdGhlcnM/IFllcywKICAgICAgICAgICAgICAgICAgICBhZnRlciByZWNlaXZpbmcgZnJvbSB5b3UgdGhlIGdpZnQgb2YgY2l0aXplbnNoaXAsIGhlIGdhdmUgaGlzIHdpZmUg77yIaWYKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgaGUgZ2F2ZSBoZXLvvIkgYXMgYSBzbGF2ZSBnaXZpbmcgdG8gaGlzIG1hc3RlciwgYW5kIG5vdCwgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnksIGFzIGEgbWFzdGVyIHRvIGEgc2xhdmUsIGFuZCBoZSBhZGRlZCBzdWNoIGEgZG93cnkgYXMgbm8gbWFuIGluIEF0aGVucwogICAgICAgICAgICAgICAgICAgIHdhcyBldmVyIGtub3duIHRvIGdpdmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbW90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIGJyb3VnaHQgdG8gaGVyIGh1c2JhbmQgYSBkb3dyeSBvZiBvbmx5IDgwIG1pbmFlIO+8iDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjUiIHZhbGlkPSJ5ZXMiPkRlbS4gMjcuNTwvYmlibD7vvIk7IHRoZSBtb3RoZXIgb2YgTWFudGl0aGV1cyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgNjAgbWluYWUg77yIPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDAuNiIgdmFsaWQ9InllcyI+RGVtLiA0MC42PC9iaWJsPu+8iTsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0d28gZGF1Z2h0ZXJzIG9mIFBvbHlldWN0dXMgZG93cmllcyBvZiA0MCBtaW5hZSBlYWNoIO+8iDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQxLjMiIHZhbGlkPSJ5ZXMiPkRlbS4gNDEuMzwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQxLjI3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MS4yNzwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgdG8gaGF2ZSBiZWVuIGhvbm9yZWQgd2l0aCB0aGUgaGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBtaXN0cmVzcyB3YXMgb2YgaXRzZWxmIGVub3VnaCB0byBtYWtlIHRoaXMgZmVsbG93IGNvbnRlbnQsIHdoZXJlYXMgaW4gbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIncyBjYXNlLCBldmVuIGlmIGhlIHJlY2VpdmVkIGFzIG11Y2ggbW9uZXkgYXMgdGhlc2UgcGVvcGxlIGFsbGVnZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZ2F2ZSwgaXQgd2FzIG5vdCByZWFzb25hYmxlIGZvciBoaW0gdG8gbWFrZSB0aGlzIGFycmFuZ2VtZW50Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaXQgd291bGQgbm90IGhhdmUgYmVlbiByZWFzb25hYmxlIGZvciBoaW0gdG8gbGVhdmUKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIHdpZmUgdG8gaGlzIGZvcm1lciBzbGF2ZSBldmVuIGlmIGhlIGhhZCByZWNlaXZlZCBhcyBhIGJyaWJlIHRoZSBsYXJnZQogICAgICAgICAgICAgICAgICAgICAgICBzdW0gd2hpY2ggaGUgaXMgYWxsZWdlZCB0byBoYXZlIGdpdmVuIGFzIGEgbWFycmlhZ2UgcG9ydGlvbi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgTmV2ZXJ0aGVsZXNzLCB0byB0aGluZ3Mgd2hpY2ggYXJlIHByb3ZlZCB0byBiZSBmYWxzZSBieSB0aGUgcHJvYmFiaWxpdGllcywgdGhlCiAgICAgICAgICAgICAgICAgICAgZGF0ZXMgYW5kIHRoZSBmYWN0cywgdG8gdGhlc2UgdGhpcyBtYW4gU3RlcGhhbnVzIGhhcyBub3QgaGVzaXRhdGVkIHRvIGRlcG9zZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4gaGUKICAgICAgICAgICAgICAgICAgICBnb2VzIGFib3V0LCBzYXlpbmcgdGhhdCBOaWNvY2xlcyB0ZXN0aWZpZWQgdGhhdCBoZSBoYWQgc2VydmVkIGFzIGd1YXJkaWFuIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHdpbGwsIGFuZCBQYXNpY2xlcyB0aGF0IGhlIGhhZCBsaXZlZCBhcyB3YXJkIHVuZGVyIHRoZSB3aWxsLiBCdXQgZm9yIG15IHBhcnQKICAgICAgICAgICAgICAgICAgICBJIGhvbGQgdGhhdCB0aGVzZSB2ZXJ5IGZhY3RzIGFyZSBwcm9vZnMgdGhhdCBuZWl0aGVyIHRoZXNlIHdpdG5lc3NlcyBub3IgdGhvc2UKICAgICAgICAgICAgICAgICAgICBoYXZlIHRlc3RpZmllZCB0byB0aGUgdHJ1dGguIEZvciBhIHBlcnNvbiB3aG8gdGVzdGlmaWVzIHRoYXQgaGUgc2VydmVkIGFzCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW4gdW5kZXIgYSB3aWxsIHNob3VsZCBjZXJ0YWlubHkga25vdyB3aGF0IHRoZSBuYXR1cmUgb2YgdGhlIHdpbGwgd2FzLCBhbmQKICAgICAgICAgICAgICAgICAgICBhIHBlcnNvbiB3aG8gdGVzdGlmaWVzIHRoYXQgaGUgbGl2ZWQgYXMgd2FyZCB1bmRlciBhIHdpbGwgc2hvdWxkIGNlcnRhaW5seSBrbm93CiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgbmF0dXJlIG9mIHRoZSB3aWxsIHdhcy4gPG1pbGVzdG9uZSBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQsIHRoZW4sIFN0ZXBoYW51cywgZGlkIHlvdSBwZW9wbGUgZGVwb3NlIHRvIHRoZSB3aWxsIHVuZGVyIHRoZSBmb3JtIG9mIGEKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsIGluc3RlYWQgb2YgbGVhdmluZyB0aGUgbWF0dGVyIHRvIHRoZW0/IElmIHRoZXkgb24gdGhlaXIgcGFydCBzaGFsbAogICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgdGhhdCB0aGV5IGRvIG5vdCBrbm93IHRoZSBjb250ZW50cyBvZiB0aGUgd2lsbCwgaG93IGlzIGl0IHBvc3NpYmxlIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSB0byBrbm93IHRoZW0sIHlvdSB3aG8gaGF2ZSBuZXZlciBpbiBhbnkgd2F5IGJlZW4gY29ubmVjdGVkIHdpdGggdGhlIG1hdHRlcj8KICAgICAgICAgICAgICAgICAgICBXaHksIHByYXksIGlzIGl0IHRoYXQgb25lIGdyb3VwIG9mIHdpdG5lc3NlcyB0ZXN0aWZpZWQgdG8gdGhlc2UgZmFjdHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgZ3JvdXAgdG8gdGhvc2U/IEl0IGlzIGFzIEkgaGF2ZSBhbHJlYWR5IHRvbGQgeW91OiB0aGV5IGRpdmlkZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJhdWQuIFRoZSBvbmUgc28gdGVzdGlmeWluZyBzYXcgbm8gZGFuZ2VyIGluIGRlcG9zaW5nIHRoYXQgaGUgc2VydmVkIGFzCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW4gdW5kZXIgdGhlIHdpbGwsIG9yIHRoYXQgaGUgbGl2ZWQgYXMgd2FyZCB1bmRlciB0aGUgd2lsbCwgPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5lYWNoIG9uZSBvZiB0aGVtIG9taXR0aW5nIHRvIHN0YXRlIHdoYXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGluIHRoZSB3aWxsIGJ5IFBob3JtaW8s4oCUbm8gZGFuZ2VyIGluIGRlcG9zaW5nIHRoYXQgb25lJ3MKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaGFkIGxlZnQgaGltIGEgZG9jdW1lbnQgd2l0aCB0aGUgd29yZCDigJx3aWxs4oCdIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICBvbiBpdCwgb3IgYW55dGhpbmcgb2YgdGhhdCBzb3J0LiBCdXQgdG8gdGVzdGlmeSB0byB0aGUgZXhpc3RlbmNlIG9mIGEgd2lsbCBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgaW52b2x2ZWQgdGhlIHRoZWZ0IG9mIHN1Y2ggdmFzdCBzdW1zLCB0aGUgY29ycnVwdGlvbiBvZiBhIGxhZHksIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlIG9mIGEgbWlzdHJlc3Mgd2l0aCBoZXIgc2xhdmUsIG1hdHRlcnMgd2hpY2ggZW50YWlsZWQgc3VjaCBzaGFtZSBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNncmFjZeKAlG5vYm9keSB3YXMgcmVhZHkgdG8gZG8gdGhpcyBzYXZlIHRoZXNlIG1lbiB3aG8gZ290IHVwIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZTsgYW5kIGZyb20gdGhlbSBpdCBpcyByaWdodCB0byBleGFjdCB0aGUgcGVuYWx0eSBmb3IgdGhlIHdob2xlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICB2aWxsYWlub3VzIGZyYXVkLiA8bWlsZXN0b25lIG49IjQwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgQXRoZW5zLCB0aGF0IGl0IG1heSBiZSBtYWRlIGNsZWFyIHRvIHlvdSB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3cgU3RlcGhhbnVzIGhhcyBnaXZlbiBmYWxzZSB0ZXN0aW1vbnnigJRtYWRlIGNsZWFyIG5vdCBtZXJlbHkgYnkgbXkKICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9ucyBhbmQgcHJvb2ZzLCBidXQgYWxzbyBieSB0aGUgYWN0cyBvZiB0aGUgcGVyc29uIHdobyBicm91Z2h0IGhpbQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgYXMgYSB3aXRuZXNz4oCUSSB3aXNoIHRvIHRlbGwgeW91IHdoYXQgdGhhdCBwZXJzb24gaGFzIGRvbmUuIEFzCiAgICAgICAgICAgICAgICAgICAgSSBzYWlkIGF0IHRoZSBiZWdpbm5pbmcgb2YgbXkgc3BlZWNoLCBJIHNoYWxsIHNob3cgdGhhdCB0aGV5IGFyZSB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBhY2N1c2Vycy4gSW4gdGhlIHN1aXQgaW4gd2hpY2ggdGhpcyB0ZXN0aW1vbnkgd2FzIGdpdmVuLCBQaG9ybWlvIGVudGVyZWQgYQogICAgICAgICAgICAgICAgICAgIHNwZWNpYWwgcGxlYSB0byBlc3RvcCBtZSBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIHN1aXQgd2FzIG5vdCBhZG1pc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIGFsbGVnaW5nIHRoYXQgSSBoYWQgcmVsZWFzZWQgaGltIGZyb20gYWxsIGNsYWltcy4gPG1pbGVzdG9uZSBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBteXNlbGYga25vdyB0aGF0IHRoaXMgaXMgZmFsc2UsIGFuZCBJIHNoYWxsIHByb3ZlIGl0IHNvIHdoZW4gSQogICAgICAgICAgICAgICAgICAgIHByb2NlZWQgYWdhaW5zdCB0aG9zZSB3aG8gZ2F2ZSB0aGlzIHRlc3RpbW9ueTsgYnV0IFN0ZXBoYW51cyBpcyBub3QgYXQgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIHRvIHNheSBpdCBpcyBmYWxzZS4gSWYsIHRoZW4sIHlvdSBzaG91bGQgYmVsaWV2ZSBpbiB0aGUgZ2VudWluZW5lc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSwgdGhpcywgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHdvdWxkIHByb3ZlIHRoYXQgdGhlIGZlbGxvdyBoYXMgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBmYWxzZSB0ZXN0aW1vbnksIGFuZCBoYXMgZGVwb3NlZCB0byBhIHdpbGwgdGhhdCBpcyBmb3JnZWQuIEZvciB3aG8gd291bGQgYmUgc28KICAgICAgICAgICAgICAgICAgICBzZW5zZWxlc3MgYXMgdG8gZ2l2ZSBhIHJlbGVhc2UgaW4gdGhlIHByZXNlbmNlIG9mIHdpdG5lc3NlcywgdGhhdCBoaXMgZGlzY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYmUgYmluZGluZywgYW5kIHlldCB0byBzdWZmZXIgdGhlIGFydGljbGVzIG9mIGFncmVlbWVudCwgdGhlIHdpbGwsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBkb2N1bWVudHMgcmVnYXJkaW5nIHdoaWNoIGhlIGdhdmUgdGhlIHJlbGVhc2UsIHRvIHJlbWFpbiB1bmRlciBzZWFsIGFzCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgYWdhaW5zdCBoaW1zZWxmPyA8bWlsZXN0b25lIG49IjQyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzcGVjaWFsIHBsZWEsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBjb250cmFkaWN0cyBhbGwgdGhlIGV2aWRlbmNlLCBhbmQgdGhlIGxlYXNlIHdoaWNoIEkganVzdCBub3cgcmVhZCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSBjb250cmFkaWN0cyB0aGlzIHdpbGw7IG5vdCBvbmUgb2YgdGhlaXIgYWN0cyBpcyBlaXRoZXIgcmVhc29uYWJsZSBvcgogICAgICAgICAgICAgICAgICAgIHN0cmFpZ2h0Zm9yd2FyZCBvciBjb25zaXN0ZW50IHdpdGggaXRzZWxmLiBJbiB0aGlzIG1hbm5lciB0aGVpciB3aG9sZSBzdG9yeSBpcwogICAgICAgICAgICAgICAgICAgIHNob3duIHRvIGJlIGEgZmljdGlvbiBhbmQgYSBmcmF1ZC4gPG1pbGVzdG9uZSBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgdGhlIHN0YXRlbWVudHMgaW4gdGhlIGRlcG9zaXRpb24gYXJlIHRydWUgSSBob2xkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBuZWl0aGVyIFN0ZXBoYW51cyBoaW1zZWxmIG5vciBhbnlvbmUgZWxzZSBpbiBoaXMgYmVoYWxmIHdpbGwgYmUgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlLiBJIGhlYXIsIGhvd2V2ZXIsIHRoYXQgaGUgaXMgcHJlcGFyZWQgdG8gbWFrZSBzb21lIHN1Y2ggc3RhdGVtZW50IGFzIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBpcyByZXNwb25zaWJsZSBmb3IgYSBjaGFsbGVuZ2UsIG5vdCBmb3IgYSBkZXBvc2l0aW9uLCBhbmQgdGhhdCBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBoZWxkIHRvIGFjY291bnQsIG5vdCBmb3IgZXZlcnl0aGluZyB3cml0dGVuIGluIGl0LCBidXQgZm9yIHR3byB0aGluZ3MKICAgICAgICAgICAgICAgICAgICBvbmx54oCUd2hldGhlciBQaG9ybWlvIHRlbmRlcmVkIG1lIHRoaXMgY2hhbGxlbmdlIG9yIG5vdCwgYW5kIHdoZXRoZXIgSQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgaXQ7IHRoZXNlIG1hdHRlcnMgYW5kIG5vIG1vcmUsIGhlIHdpbGwgc2F5LCB3ZXJlIGluY2x1ZGVkIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb247IGFzIGZvciB0aGUgcmVzdCwgUGhvcm1pbyBjb3ZlcmVkIHRoZW0gaW4gaGlzIGNoYWxsZW5nZSwgYnV0IHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgdHJ1ZSBvciBub3QgaXQgd2FzIG5vdCB0aGUgYnVzaW5lc3Mgb2YgdGhlIHdpdG5lc3MgdG8gaW5xdWlyZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBhbnN3ZXIgdG8gdGhpcyBhcmd1bWVudCBhbmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuJ3MgaW1wdWRlbmNlIGl0IGlzIGJldHRlciB0aGF0IEkgc2F5IGEgZmV3IHdvcmRzIHRvIHlvdSBpbiBhZHZhbmNlLCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGJlIG5vdCB0YWtlbiBhdCB1bmF3YXJlcyBhbmQgbWlzbGVkLiBJbiB0aGUgZmlyc3QgcGxhY2UsIHdoZW4gaGUgdHJpZXMgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIHRoZSBhcmd1bWVudCB0aGF0IGhlIGlzIG5vdCByZXNwb25zaWJsZSBmb3IgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24sIGJlYXIgaW4gbWluZCB0aGF0IHRoZSByZWFzb24gd2h5IHRoZSBsYXcgcmVxdWlyZXMgcGVvcGxlIHRvIGdpdmUKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBpbiB3cml0dGVuIGZvcm0gaXMgdGhhdCBpdCBtYXkgbm90IGJlIG9wZW4gdG8gdGhlbSB0byBzdHJpa2Ugb3V0IGFueQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2Ygd2hhdCBoYXMgYmVlbiB3cml0dGVuLCBvciBhZGQgYW55dGhpbmcgdG8gaXQuIEhlIHNob3VsZCBhdCB0aGUgdGltZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgdGhlIGVyYXN1cmUgb2YgdGhlIHN0YXRlbWVudHMgdG8gd2hpY2ggaGUgd2lsbCBub3cgZGVueSBoYXZpbmcgZGVwb3NlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHRyeSBub3cgdG8gYnJhemVuIGl0IG91dCwgd2hpbGUgdGhleSBzdGFuZCBpbiB0aGUgZG9jdW1lbnQuIDxtaWxlc3RvbmUgbj0iNDUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGNvbnNpZGVyIHRoaXMgdG9vLCB3aGV0aGVyIHlvdSB3b3VsZCBzdWZmZXIKICAgICAgICAgICAgICAgICAgICBtZSBpbiB5b3VyIHByZXNlbmNlIHRvIHRha2UgdGhlIGRvY3VtZW50IGFuZCBhZGQgdG8gaXQuIE9mIGNvdXJzZSB5b3Ugd291bGQgbm90LgogICAgICAgICAgICAgICAgICAgIFdlbGwsIHRoZW4sIG5laXRoZXIgaXMgaXQgZml0dGluZyB0byBzdWZmZXIgaGltIHRvIHN0cmlrZSBvdXQgYW55IG9mIGl0cwogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzLiBGb3Igd2hvIHdpbGwgZXZlciBiZSBjb252aWN0ZWQgb2YgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSwgaWYgaGUgaXMgdG8KICAgICAgICAgICAgICAgICAgICBkZXBvc2UgdG8gd2hhdCBoZSBwbGVhc2VzLCBhbmQgYmUgYWNjb3VudGFibGUgb25seSBmb3Igd2hhdCBoZSBwbGVhc2VzPyBObywgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGRvZXMgbm90IHRodXMgbWFrZSBhIGRpc3RpbmN0aW9uIGluIHRoZXNlIG1hdHRlcnMsIGFuZCB5b3Ugb3VnaHQgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuIHRvIHN1Y2ggYSB0aGluZyBlaXRoZXIuIFRoZSBzdHJhaWdodGZvcndhcmQgYW5kIGhvbmVzdCBjb3Vyc2UgaXMgdGhpczoKICAgICAgICAgICAgICAgICAgICDigJxXaGF0IHN0YW5kcyB3cml0dGVuPyBUbyB3aGF0IGhhdmUgeW91IGRlcG9zZWQ/IFNob3cgdGhhdCB0aGlzIGlzCiAgICAgICAgICAgICAgICAgICAgdHJ1ZS4gRm9yIHlvdSBoYXZlIHdyaXR0ZW4gaW4geW91ciBwbGVhIGluIGFuc3dlciB0byB0aGUgY29tcGxhaW50IHRoZXNlIHdvcmRzLAogICAgICAgICAgICAgICAgICAgICdJIGhhdmUgZ2l2ZW4gdHJ1ZSB0ZXN0aW5pb255IGluIHRlc3RpZnlpbmcgdG8gd2hhdCBpcyBjb250YWluZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbifigJRub3QgJ3RvIHRoaXMgb3IgdGhhdCBpbiB0aGUgZGVwb3NpdGlvbi4n4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyBpcyBzbywgdGFrZSwgcGxlYXNlLCB0aGUgcGxlYSBpdHNlbGYuIFJlYWQgaXQuPHF1b3RlIHR5cGU9IkNvbXBsYWludCI+PHRpdGxlPkNvbXBsYWludCBhbmQgQ291bnRlci1QbGVhPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFwb2xsb2RvcnVzLCBzb24gb2YgUGFzaW8sIG9mIEFjaGFybmFlLCBzdWVzIFN0ZXBoYW51cywgc29uIG9mIE1lbmVjbGVzLAogICAgICAgICAgICAgICAgICAgICAgICBvZiBBY2hhcm5hZSwgZm9yIGZhbHNlIHRlc3RpbW9ueTsgZGFtYWdlcyBvbmUgdGFsZW50LiBTdGVwaGFudXMgZ2F2ZSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgYWdhaW5zdCBtZSBpbiB0ZXN0aWZ5aW5nIHRvIHRoYXQgd2hpY2ggaXMgY29udGFpbmVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBnYXZlIHRydWUgdGVzdGltb255IGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnlpbmcgdG8gdGhhdCB3aGljaCBpcyBjb250YWluZWQgaW4gdGhlIHJlY29yZC48L3F1b3RlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBpcyB0aGUgcGxlYSB3aGljaCB0aGUgZGVmZW5kYW50IGhpbXNlbGYgaGFzCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZC4gWW91IG11c3Qga2VlcCBpdCBpbiBtaW5kLCBhbmQgbm90IHJlZ2FyZCB0aGUgZGVjZWl0ZnVsIGxhbmd1YWdlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2lsbCBzb29uIGJlIGFkZHJlc3NlZCB0byB5b3UgYXMgYmVpbmcgbW9yZSB3b3J0aHkgb2YgY3JlZGVuY2UgdGhhbiB0aGUgbGF3cyBhbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSBkZWZlbmRhbnQgaGFzIHdyaXR0ZW4gaW4gaGlzIG93biBwbGVhLiA8bWlsZXN0b25lIG49IjQ3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBsZWFybiB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIHNwZWFrIGFib3V0CiAgICAgICAgICAgICAgICAgICAgbXkgb3JpZ2luYWwgc3VpdCBhbmQgdG8gZGVub3VuY2UgaXQgYXMgYmFzZWxlc3MgYW5kIG1hbGljaW91cy4gQnV0IEkgb24gbXkgcGFydAogICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSBtZW50aW9uZWQgdG8geW91IGFuZCBleHBsYWluZWQgaW4gZGV0YWlsIHRoZSBtYW5uZXIgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGNvbmNvY3RlZCB0aGUgbGVhc2UsIGluIG9yZGVyIHRvIGdldCBpbnRvIGhpcyBwb3NzZXNzaW9uIHRoZQogICAgICAgICAgICAgICAgICAgIGJhbmtpbmctc3RvY2ssIGFuZCBJIHNob3VsZCBiZSB1bmFibGUgdG8gc3BlYWsgb2YgdGhlc2Ugb3RoZXIgbWF0dGVycyBhbmQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB0aW1lIGNvbnZpY3QgdGhlc2UgbWVuIG9mIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnk7IGZvciB0aGUgYW1vdW50IG9mIHdhdGVyCiAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgbWUgaXMgbm90IHN1ZmZpY2llbnQuIDxtaWxlc3RvbmUgbj0iNDgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyBjb3VsZCBub3QgaW4gZmFpcm5lc3MgYmUgd2lsbGluZyB0byBsaXN0ZW4gdG8gdGhlbSBpbiByZWdhcmQgdG8gdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHlvdSB3aWxsIHNlZSBhdCBvbmNlLCBpZiB5b3UgcmVmbGVjdCB0aGF0IGl0IGlzIG5vIGRpZmZpY3VsdCBtYXR0ZXIgdG8KICAgICAgICAgICAgICAgICAgICBzcGVhayBub3cgYWJvdXQgc3ViamVjdHMgY29uY2VybmluZyB3aGljaCBubyBjaGFyZ2UgaXMgbWFkZSwganVzdCBhcyBpdCB3YXMgbm8KICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQgbWF0dGVyIGZvciBQaG9ybWlvIHRvIGdldCBoaW1zZWxmIGFjcXVpdHRlZCBieSByZWFkaW5nIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMuIEhvd2V2ZXIsIG5vIG1hbiB3b3VsZCBzYXkgdGhhdCBlaXRoZXIgb2YgdGhlc2UgY291cnNlcyBpcyByaWdodCwKICAgICAgICAgICAgICAgICAgICBidXQgdGhhdCBjb3Vyc2UgcmF0aGVyIHdoaWNoIEkgYW0gYWJvdXQgdG8gcHJvcG9zZS4gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5MaXN0ZW4sIGFuZCBqdWRnZS4gSSBkZW1hbmQgdGhhdCB0aGV5IGRvIG5vdCBub3cgc2VlayBmb3IgdGhlIHByb29mcwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyBteSBjaGFyZ2VzLCBwcm9vZnMgd2hpY2ggc2hvdWxkIGhhdmUgYmVlbiBtZW50aW9uZWQgYXQgdGhlIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHRyaWFsLCBidXQgb2Ygd2hpY2ggdGhleSBkZXByaXZlZCBtZTsgYnV0IHRoYXQgdGhleSBwcm92ZSB0aGF0IHRoZSB0ZXN0aW1vbnkgYnkKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGRlcHJpdmVkIG1lIG9mIHRoZW0gd2FzIHRydWUuIElmLCB3aGVuIEkgYnJpbmcgaW4gbXkgc3VpdCwgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICB0byBkZW1hbmQgdGhhdCBJIHJlZnV0ZSB0aGVpciB0ZXN0aW1vbnksIGFuZCwgd2hlbiBJIHByb2NlZWQgYWdhaW5zdCB0aGF0LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIHRvIGJpZCBtZSBzcGVhayByZWdhcmRpbmcgbXkgb3JpZ2luYWwgY2hhcmdlcywgd2hhdCB0aGV5IHByb3Bvc2Ugd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgcmlnaHQgbm9yIGluIHlvdXIgaW50ZXJlc3QuIDxtaWxlc3RvbmUgbj0iNTAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3dvcm4gdG8gZ2l2ZSBhIHZlcmRpY3QsIG5vdCBpbiByZWdhcmQgdG8gbWF0dGVycyB1cG9uIHdoaWNoIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBhc2tzIHlvdXIgZGVjaXNpb24sIGJ1dCBpbiByZWdhcmQgdG8gdGhvc2Ugb25seSB3aGljaCBhcmUgcmFpc2VkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0aW9uLiBUaGUgY2F1c2Ugb2YgYWN0aW9uIG11c3QgYmUgbWFkZSBjbGVhciBieSB0aGUgY29tcGxhaW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0b3IsIGFuZCB0aGlzIGluIG15IGNhc2UgaXMgYSBzdWl0IGFnYWluc3QgdGhpcyBtYW4gZm9yIGZhbHNlIHRlc3RpbW9ueS4KICAgICAgICAgICAgICAgICAgICBMZXQgaGltIG5vdCwgdGhlbiwgbGVhdmUgdGhpcyBhbmQgdGFsayBhYm91dCBtYXR0ZXJzIHJlZ2FyZGluZyB3aGljaCBJIGFtIG5vdAogICAgICAgICAgICAgICAgICAgIHN1aW5nIGhpbTsgYW5kIGRvIHlvdSwgaWYgaGUgaXMgc28gc2hhbWVsZXNzLCByZWZ1c2UgdG8gcGVybWl0IGl0LiA8bWlsZXN0b25lIG49IjUxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBpbWFnaW5lIHRoYXQsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG5vIGp1c3QgYXJndW1lbnQgdG8gYWR2YW5jZSBvbiBhbnkgcG9pbnQsIGhlIHdpbGwgaGF2ZSByZWNvdXJzZSB0byB0aGlzIGRlZmVuY2UKICAgICAgICAgICAgICAgICAgICBhbHNv4oCUdGhhdCBpdCBpcyBhYnN1cmQgZm9yIG1lLCBhZnRlciBoYXZpbmcgYmVlbiB3b3JzdGVkIGluIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNwZWNpYWwgcGxlYSwgdG8gc3VlIHRob3NlIHdobyBnYXZlIGV2aWRlbmNlIG9mIGEgd2lsbDsgYW5kIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBtYWludGFpbiB0aGF0IHRoZSBqdXJ5bWVuIGluIHRoYXQgdHJpYWwgd2VyZSBsZWQgdG8gdm90ZSBpbiBmYXZvciBvZiBQaG9ybWlvLCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBldmlkZW5jZSBvZiB0aG9zZSB3aG8gdGVzdGlmaWVkIHRvIHRoZSByZWxlYXNlIHJhdGhlciB0aGFuIGJ5IHRoYXQgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gdGVzdGlmaWVkIHRvIHRoZSB3aWxsLiBCdXQsIG1lbiBvZiBBdGhlbnMsIEkgdGhpbmsgeW91IGFsbCBrbm93IHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICB5b3VyIGhhYml0IHRvIGV4YW1pbmUgdGhlIGZhY3RzIG5vIGxlc3MgY2xvc2VseSB0aGFuIHRoZSBwbGVhcyB3aGljaCBtZW4gbWFrZQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGVtOyBhbmQgdGhlc2UgbWVuLCBieSBnaXZpbmcgZmFsc2UgdGVzdGltb255IGFnYWluc3QgbWUgcmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzIHRoZW1zZWx2ZXMsIHdlYWtlbmVkIG15IGFyZ3VtZW50cyBvbiB0aGUgc3BlY2lhbCBwbGVhLiA8bWlsZXN0b25lIG49IjUyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGJlc2lkZXMgdGhpcywgaXQgaXMgYWJzdXJkLCB3aGVuIGFsbCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gZmFsc2UgZXZpZGVuY2UsIHRvIGRlbW9uc3RyYXRlIHdobyBkaWQgdGhlIGdyZWF0ZXN0IGFtb3VudCBvZiBoYXJtLAogICAgICAgICAgICAgICAgICAgIGluc3RlYWQgb2YgbWFraW5nIGVhY2ggb25lIHByb3ZlIHRoYXQgaGUgaGFzIGhpbXNlbGYgdGVzdGlmaWVkIHRvIHRoZSB0cnV0aC4gSXQKICAgICAgICAgICAgICAgICAgICBpcyBub3QgYnkgcHJvdmluZyB0aGF0IGFub3RoZXIgaGFzIGRvbmUgbW9yZSBvdXRyYWdlb3VzIHRoaW5ncyB0aGFuIGhpbXNlbGYgdGhhdAogICAgICAgICAgICAgICAgICAgIGEgd2l0bmVzcyBpcyB0byBiZSBsZXQgb2ZmLCBidXQgYnkgc2hvd2luZyB0aGF0IGhlIGhhcyBoaW1zZWxmIGdpdmVuIHRlc3RpbW9ueQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgdHJ1ZS4gPG1pbGVzdG9uZSBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgbWVuIG9mIEF0aGVucywgbGV0IG1lIHNob3cgeW91IHRoZSB0aGluZyBmb3Igd2hpY2ggbW9yZSB0aGFuIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgZWxzZSB0aGlzIGZlbGxvdyBTdGVwaGFudXMgZGVzZXJ2ZXMgdG8gYmUgcHV0IHRvIGRlYXRoLiBJdCBpcyBhbiBhd2Z1bCB0aGluZyB0bwogICAgICAgICAgICAgICAgICAgIGJlYXIgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGFueW9uZSB3aG9tc29ldmVyLCBidXQgaXQgaXMgYSB0aGluZyBtb3JlIGF3ZnVsIGJ5CiAgICAgICAgICAgICAgICAgICAgZmFyLCBhbmQgbW9yZSBkZXNlcnZpbmcgb2YgaW5kaWduYXRpb24sIHRvIGJlYXIgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IHRob3NlIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gYmxvb2Q7IGZvciBhIG1hbiBvZiB0aGF0IHN0YW1wIHZpb2xhdGVzLCBub3QgdGhlIHdyaXR0ZW4gbGF3cyBhbG9uZSwKICAgICAgICAgICAgICAgICAgICBidXQgYWxzbyB0aGUgdGllcyBvZiBuYXR1cmFsIHJlbGF0aW9uc2hpcC4gVGhpcywgdGhlbiwgU3RlcGhhbnVzIHNoYWxsIGJlIHByb3ZlZAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgZG9uZS4gPG1pbGVzdG9uZSBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGlzIG1vdGhlciBhbmQgdGhlIGZhdGhlciBvZgogICAgICAgICAgICAgICAgICAgIG15IHdpZmUgYXJlIGEgYnJvdGhlciBhbmQgc2lzdGVyLCBzbyB0aGF0IG15IHdpZmUgaXMgaGlzIGZpcnN0IGNvdXNpbiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGJvcm4gdG8gaGVyIGFuZCB0byBtZSBhcmUgaGlzIGNvdXNpbidzIGNoaWxkcmVuLiBEbyB5b3UgdGhpbmssIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIG1hbiwgaWYgaGUgc2F3IGhpcyBmZW1hbGUgcmVsYXRpdmVzIGRyaXZlbiBieSB3YW50IHRvIHNoYW1lZnVsCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucywgd291bGQgZ2l2ZSB0aGVtIGluIG1hcnJpYWdlIGFuZCBhZGQgbWFycmlhZ2UgcG9ydGlvbnMgb3V0IG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXPigJRhIHRoaW5nIHdoaWNoIG1hbnkgYSBtYW4gaGFzIGRvbmUgZXJlIG5vd+KAlHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoYXMgY2hvc2VuIHRvIGdpdmUgZmFsc2UgdGVzdGltb255IGluIG9yZGVyIHRvIHByZXZlbnQgdGhlaXIgZ2V0dGluZyB3aGF0CiAgICAgICAgICAgICAgICAgICAgYmVsb25ncyB0byB0aGVtLCBhbmQgaGFzIGNvdW50ZWQgdGhlIHdlYWx0aCBvZiBQaG9ybWlvIG9mIGhpZ2hlciB3b3J0aCB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIHN0cm9uZyB0aWVzIG9mIGtpbnNoaXA/IDxtaWxlc3RvbmUgbj0iNTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ib3dldmVyLCB0byBwcm92ZSB0aGF0IEkgYW0gdGVsbGluZyB0aGUgdHJ1dGggaW4gdGhpcywgdGFrZSB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIG9mIERlaW5pYXMgYW5kIHJlYWQgaXQ7IGFuZCBjYWxsIERlaW5pYXMuPHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZT5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRlaW5pYXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaGVvbW5lc3R1cywgb2YgQXRobW9ub24sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdGhtb25vbiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVtZSBvZiB0aGUgdHJpYmUgQ2Vjcm9waXMuPC9ub3RlPiBkZXBvc2VzIHRoYXQgaGUgZ2F2ZSBoaXMgZGF1Z2h0ZXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgdG8gbGl2ZSB3aXRoIGhpbSBhcyBoaXMgd2lmZSBhY2NvcmRpbmcgdG8gdGhlIGxhd3MsIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBuZXZlciBwcmVzZW50IHdoZW4gQXBvbGxvZG9ydXMgcmVsZWFzZWQgUGhvcm1pbyBmcm9tIGFsbCBjbGFpbXMsIG5vciB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZXZlciBhd2FyZSB0aGF0IGhlIGhhZCBkb25lIHNvLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRlaW5pYXMsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCBpcyB2ZXJ5IGxpa2UgU3RlcGhhbnVzLCBpcyBoZSBub3Q/4oCURGVpbmlhcywgd2hvIG9uIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgcmVsYXRpb25zaGlwLCByZWZ1c2VzIHRvIHRlc3RpZnkgYWdhaW5zdCB0aGUgZGVmZW5kYW50IGV2ZW4gdG8gd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIHRydWUsIGFuZCBvbiBiZWhhbGYgb2YgaGlzIGRhdWdodGVyIGFuZCBoaXMgZGF1Z2h0ZXIncyBjaGlsZHJlbiwgYW5kIG1lLCBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgc29uLWluLWxhdyE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlIG11c3QgYXNzdW1lIHRoYXQgRGVpbmlhcywKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBjYWxsZWQgdXBvbiwgcmVmdXNlZCB0byBzd2VhciB0byB0aGUgZGVwb3NpdGlvbiB3aGljaCB3YXMgcmVhZAogICAgICAgICAgICAgICAgICAgICAgICDvvIh3aGV0aGVyIHRoZSBkZXBvc2l0aW9uIGdpdmVuIGluIHRoZSB0ZXh0IGlzIGF1dGhlbnRpYyBvciBub3QKICAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90IGJlIGRldGVybWluZWQgd2l0aCBjZXJ0YWludHnvvIkuIEhlIG11c3QsIHRoZXJlZm9yZSwgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICB0YWtlbiB0aGUgb2F0aCBvZiBkaXNjbGFpbWVyIO+8iDxmb3JlaWduIGxhbmc9ImdyZWVrIj7hvJDOvs+JzrzOv8+D4b23zrE8L2ZvcmVpZ24+77yJLCBhbHRob3VnaCB0aGlzIGlzIG5vdCBzdGF0ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQuIEFwb2xsb2RvcnVzIGFzc2VydHMgdGhhdCBEZWluaWFzIHRvb2sgdGhpcyBjb3Vyc2UgZm9yIGZlYXIgdGhhdCBieQogICAgICAgICAgICAgICAgICAgICAgICBzd2VhcmluZyB0byB0aGUgZGVwb3NpdGlvbiBoZSB3b3VsZCB3b3JrIGhhcm0gdG8gaGlzIGtpbnNtYW4gU3RlcGhhbnVzLiBXZQogICAgICAgICAgICAgICAgICAgICAgICBtdXN0IGJlIGNvbnRlbnQgdG8gY29uZmVzcyBvdXIgaWdub3JhbmNlIG9mIGhpcyByZWFzb25zLjwvbm90ZT4gTm90IHNvCiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGhlcmUuIEhlIGRpZCBub3QgaGVzaXRhdGUgdG8gZ2l2ZSBmYWxzZSB0ZXN0aW1vbnkgYWdhaW5zdCB1czsgZXZlbgogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QgZm9yIGhpcyBvd24gbW90aGVyLCBpZiBmb3Igbm8gb25lIGVsc2UsIGRpZCBub3Qga2VlcCBoaW0gZnJvbSBicmluZ2luZwogICAgICAgICAgICAgICAgICAgIHRoZSBleHRyZW1lc3QgcG92ZXJ0eSB1cG9uIHRob3NlIHdobyB0aHJvdWdoIGhlciB3ZXJlIGhpcyByZWxhdGl2ZXMuIDxtaWxlc3RvbmUgbj0iNTciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpc2ggbm93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgdG8gdGVsbCB5b3Ugb2YgdGhlIG1vc3QgYSBvdXRyYWdlb3VzIHRoaW5nIHdoaWNoIGhhcyBiZWVuIGRvbmUgdG8KICAgICAgICAgICAgICAgICAgICBtZSzigJRhIHRoaW5nIHdoaWNoIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIG92ZXJ3aGVsbWVkIG1lIHdpdGggZGlzbWF5CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNvdXJzZSBvZiB0aGUgdHJpYWw7IGZvciB5b3Ugd2lsbCB0aHVzIHNlZSBldmVuIG1vcmUgY2xlYXJseSB0aGUgZmVsbG93J3MKICAgICAgICAgICAgICAgICAgICBiYXNlbmVzcywgYW5kIEksIGJ5IHZlbnRpbmcgYmVmb3JlIHlvdSBteSBncmllZiBmb3Igd2hhdCBoYXMgaGFwcGVuZWQsIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgZmluZCwgYXMgaXQgd2VyZSwgYSBzb3J0IG9mIHJlbGllZi4gVGhlIGRlcG9zaXRpb24sIHdoaWNoIEkgdGhvdWdodCB3YXMgdGhlcmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdoaWNoIGFmZm9yZGVkIHRoZSBzdHJvbmdlc3QgZXZpZGVuY2UgaW4gc3VwcG9ydCBvZiBteSBjYXNlLCBJIGRpZCBub3QgZmluZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBib3guIDxtaWxlc3RvbmUgbj0iNTgiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUsIGRpc21heWVkIGJ5IHRoaXMKICAgICAgICAgICAgICAgICAgICBtaXNmb3J0dW5lLCBJIGNvdWxkIGltYWdpbmUgbm90aGluZyBlbHNlIHRoYW4gdGhhdCB0aGUgbWFnaXN0cmF0ZSBoYWQgd3JvbmdlZCBtZQogICAgICAgICAgICAgICAgICAgIGFuZCB0YW1wZXJlZCB3aXRoIHRoZSBib3guIE5vdywgaG93ZXZlciwgZnJvbSB3aGF0IEkgaGF2ZSBzaW5jZSBsZWFybmVkLCBJIGZpbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBkZWZlbmRhbnQgU3RlcGhhbnVzIGhhZCBmaWxjaGVkIHRoZSBkb2N1bWVudCBhd2F5IGluIHRoZSB2ZXJ5IHByZXNlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGFyYml0cmF0b3IsIHdoZW4gSSBoYWQgZ290IHVwIHRvIHB1dCBhIHdpdG5lc3Mgb24gaGlzIG9hdGguIEFuZCB0byBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgZGVwb3NpdGlvbnMgc2hhbGwgZmlyc3QgYmUgb2ZmZXJlZCB5b3UKICAgICAgICAgICAgICAgICAgICBmcm9tIHRob3NlIHdobyB3ZXJlIHByZXNlbnQgYXQgdGhlIHRpbWUgYW5kIHNhdyBpdDsgZm9yIEkgZG8gbm90IHRoaW5rIHRoZXkgd2lsbAogICAgICAgICAgICAgICAgICAgIGNob29zZSB0byB0YWtlIGFuIG9hdGggb2YgZGlzY2xhaW1lci4gPG1pbGVzdG9uZSBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBzaGFtZWxlc3MgZW5vdWdoIHRvIGRvIHRoaXMgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IGEgY2hhbGxlbmdlIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IHdpbGwgY2F0Y2ggdGhlbSBpbiB0aGUgdmVyeSBhY3Qgb2YgcGVyanVyeSwgYW5kIHdpbGwga25vdyBhbGwgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgbWFuIGRpZCBzdGVhbCB0aGUgZGVwb3NpdGlvbi4gQW5kIHlldCwgbWVuIG9mIEF0aGVucywgYSBwZXJzb24gd2hvCiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IHNocmluayBmcm9tIGJlaW5nIG5hbWVkIGFzIG9uZSB3aG8gaGFkIHN0b2xlbiB3aGF0IHdhcyBwcmVqdWRpY2lhbCB0bwogICAgICAgICAgICAgICAgICAgIGFub3RoZXLigJR3aGF0IGRvIHlvdSBzdXBwb3NlIGhlIHdvdWxkIGRvIGluIGhpcyBvd24gaW50ZXJlc3Q/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24sIGFuZCB0aGVuIHRoaXMgY2hhbGxlbmdlLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnkgdGhhdCB0aGV5IGFyZSBmcmllbmRzIGFuZCBhc3NvY2lhdGVzIG9mIFBob3JtaW8sIGFuZCB0aGF0IHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGhlZm9yZSB0aGUgYXJiaXRyYXRvciBUZWlzaWFzIHdoZW4gdGhlIGFubm91bmNlbWVudCBvZiB0aGUgYXdhcmQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgaW4gdGhlIHN1aXQgYmV0d2VlbiBBcG9sbG9kb3J1cyBhbmQgUGhvcm1pbywgYW5kIHRoYXQgdGhleSBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGZpbGNoZWQgYXdheSB0aGUgZGVwb3NpdGlvbiB3aGljaCBBcG9sbG9kb3J1cyBjaGFyZ2VzIGhpbSwgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgc3RvbGVuLjwvcXVvdGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5FaXRoZXIgZGVwb3NlLCBvciB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGggb2YgZGlzY2xhaW1lci48cXVvdGUgdHlwZT0iT2F0aCBvZiBEaXNjbGFpbWVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPk9hdGggb2YgRGlzY2xhaW1lcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIHBsYWluCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgdGhleSB3b3VsZCBkbyB0aGlz4oCUdGFrZSB0aGUgb2F0aCBvZgogICAgICAgICAgICAgICAgICAgIGRpc2NsYWltZXIgd2l0aCBlYWdlcm5lc3MuIFdlbGwsIHRoZW4sIHRoYXQgdGhleSBtYXkgYXQgb25jZSBiZSBjb252aWN0ZWQgb2YKICAgICAgICAgICAgICAgICAgICBwZXJqdXJ5LCB0YWtlLCBwbGVhc2UsIHRoaXMgZGVwb3NpdGlvbiBhbmQgY2hhbGxlbmdlLiBSZWFkLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIGFuZCBDaGFsbGVuZ2UiPjx0aXRsZT5EZXBvc2l0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbGxlbmdlPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMgdGVzdGlmeQogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IHdoZW4gQXBvbGxvZG9ydXMgY2hhbGxlbmdlZCBTdGVwaGFudXMgdG8gZ2l2ZSB1cCBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXR0ZW5kYW50IHNsYXZlIHRvIGJlIHB1dCB0byB0aGUgdG9ydHVyZSBjb25jZXJuaW5nIHRoZSB0aGVmdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQsIGFuZCBBcG9sbG9kb3J1cyB3YXMgcmVhZHkgdG8gd3JpdGUgb3V0IHRoZSBjb25kaXRpb25zIG9uIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIHdhcyB0byBiZSBhZG1pbmlzdGVyZWQ7IGFuZCB0aGF0IHdoZW4gQXBvbGxvZG9ydXMgdGVuZGVyZWQgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsIFN0ZXBoYW51cyByZWZ1c2VkIHRvIGdpdmUgdXAgdGhlIHNsYXZlLCBidXQgcmVwbGllZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cyB0aGF0IGhlIG1pZ2h0IGJyaW5nIHN1aXQsIGlmIGhlIGNob3NlLCBpZiBoZSBtYWludGFpbmVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGJlaW5nIGluIGFueSB3YXkgd3JvbmdlZCBieSBoaW0uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hvIGlzIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2hvLCBvbiBhIGNoYXJnZSBsaWtlIHRoYXQsIGlmIGhlIHdlcmUgc3VyZSBvZiBoaXMgaW5ub2NlbmNlLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBoYXZlIGFjY2VwdGVkIHRoZSB0b3J0dXJlPyBUaGVuLCBieSByZWZ1c2luZyB0aGUgdG9ydHVyZSwgaGUgaXMKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgb2YgdGhlIHRoZWZ0LiBOb3cgZG8geW91IHRoaW5rIHRoYXQgYSBtYW4gd291bGQgYmUgYXNoYW1lZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uIG9mIGhhdmluZyBib3JuZSBmYWxzZSB3aXRuZXNzLCB3aG8gZGlkIG5vdCBzaHJpbmsgZnJvbSBiZWluZyBwcm92ZWQgYQogICAgICAgICAgICAgICAgICAgIHRoaWVmPyBPciB0aGF0IGhlIHdvdWxkIGhlc2l0YXRlIHRvIGdpdmUgZmFsc2Ugd2l0bmVzcyBhdCB0aGUgcmVxdWVzdCBvZgogICAgICAgICAgICAgICAgICAgIGFub3RoZXIsIHdoZW4sIGF0IG5vIG1hbidzIGJpZGRpbmcsIGhlIHZvbHVudGFyaWx5IGNvbW1pdHRlZCBhIGZyYXVkPyA8bWlsZXN0b25lIG49IjYzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlIGp1cnksCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgaGUgbWlnaHQganVzdGx5IGJlIG1hZGUgdG8gcGF5IHRoZSBwZW5hbHR5IGZvciBhbGwgdGhlc2UgdGhpbmdzLCBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzIGV2ZW4gbW9yZSB0byBiZSBwdW5pc2hlZCBpbiB5b3VyIGNvdXJ0IGZvciB0aGUgcmVzdCBvZiBoaXMgY29uZHVjdC4KICAgICAgICAgICAgICAgICAgICBPYnNlcnZlIHRoZSBraW5kIG9mIGEgbGlmZSBoZSBoYXMgbGl2ZWQsIGFuZCBqdWRnZS4gRm9yIHNvIGxvbmcgYXMgaXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGxvdCBvZiBBcmlzdG9sb2NodXMsIHRoZSBiYW5rZXIsIHRvIGVuam95IHByb3NwZXJpdHksIHRoaXMgZmVsbG93IGZhd25lZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgaGltIGFzIGhlIHdhbGtlZCBiZXNpZGUgaGltLCBhZGFwdGluZyBoaXMgcGFjZSB0byBoaXMsIGFuZCB0aGlzIGlzIHdlbGwga25vd24gdG8KICAgICAgICAgICAgICAgICAgICBtYW55IG9mIHlvdSB3aG8gYXJlIHByZXNlbnQgaGVyZS4gPG1pbGVzdG9uZSBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbgogICAgICAgICAgICAgICAgICAgIEFyaXN0b2xvY2h1cyB3YXMgcnVpbmVkIGFuZCBsb3N0IGhpcyBwcm9wZXJ0eSwgY2hpZWZseSB0aHJvdWdoIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmVkIGJ5IHRoaXMgZmVsbG93IGFuZCBvdGhlcnMgb2YgaGlzIHN0YW1wLCBTdGVwaGFudXMgbmV2ZXIgc3Rvb2QgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIEFyaXN0b2xvY2h1cywgd2hvIHdhcyBvdmVyYnVyZGVuZWQgd2l0aCBsYXdzdWl0cywgbm9yIGFpZGVkIGhpbSwgYnV0IGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIEFwb2xleGlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcG9sZXhpcyBpcyBhIG5vdCB1bmZhbWlsaWFyIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAg77yIc2VlIGUuZy4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDMuNDgiIHZhbGlkPSJ5ZXMiPkRlbS4gNDMuNDg8L2JpYmw+77yJLCBidXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEFwb2xleGlzIG9yIHRoZSBTb2xvbiBoZXJlIG1lbnRpb25lZCBub3RoaW5nIGlzIGtub3duLjwvbm90ZT4gb3IgU29sb24KICAgICAgICAgICAgICAgICAgICBvciBhbnlib2R5IGVsc2UgdGhhdCBoZWxwZWQgaGltIHJhdGhlciB0aGFuIGhlLiBUaGVuIGhlIGhhcyBjb3VydGVkIFBob3JtaW8gYW5kCiAgICAgICAgICAgICAgICAgICAgYmVjb21lIGludGltYXRlIHdpdGggaGltLCBjaG9vc2luZyBoaW0gb3V0IG9mIGFsbCB0aGUgQXRoZW5pYW5zOyBhbmQgaGUgc2FpbGVkCiAgICAgICAgICAgICAgICAgICAgdG8gQnl6YW50aXVtPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeXphbnRpdW0sIHRoZSBtb2Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgSXN0YW5idWwuPC9ub3RlPiBhcyBhZ2VudCBpbiBoaXMgaW50ZXJlc3QsIHdoZW4gdGhlIEJ5emFudGluZXMgZGV0YWluZWQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvJ3MgdmVzc2VscywgYW5kIGhlIHBsZWFkZWQgaGlzIGNhdXNlIGFnYWluc3QgdGhlIENhbGNoZWRvbmlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DYWxjaGVkb24gaXMgYSB0b3duIG9uIHRoZSBlYXN0IHNpZGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEJvc3BvcnVzLCBvcHBvc2l0ZSBCeXphbnRpdW0uPC9ub3RlPiBhbmQgaGUgaGFzIHRodXMgZmxhZ3JhbnRseSBnaXZlbiBmYWxzZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3MgYWdhaW5zdCBtZS4gPG1pbGVzdG9uZSBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5BIG1hbiwgdGhlbiwgd2hvIGlzIGEKICAgICAgICAgICAgICAgICAgICBmbGF0dGVyZXIgb2YgdGhvc2UgaW4gcHJvc3Blcml0eSwgYW5kIHdobyBiZXRyYXlzIHRoZXNlIHNhbWUgbWVuIGlmIHRoZXkgZmFsbAogICAgICAgICAgICAgICAgICAgIGludG8gYWR2ZXJzaXR5OyB3aG8gb3V0IG9mIGFsbCB0aGUgaG9zdCBvZiBnb29kIGFuZCB3b3J0aHkgY2l0aXplbnMgb2YgQXRoZW5zCiAgICAgICAgICAgICAgICAgICAgZGVhbHMgd2l0aCBub3QgYSBzaW5nbGUgb25lIG9uIHRoZSBiYXNpcyBvZiBlcXVhbGl0eSwgYnV0IHdpbGxpbmdseSBmYXducyB1cG9uCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGxpa2UgUGhvcm1pbzsgd2hvIHRha2VzIG5vIHRob3VnaHQgd2hldGhlciBoZSBpcyBnb2luZyB0byBpbmp1cmUgYW55IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGtpbnNmb2xrIGJ5IHRoZXNlIGFjdGlvbnMsIG9yIHdoZXRoZXIgaGUgaXMgZ29pbmcgdG8gd2luIGFuIGV2aWwgcmVwdXRhdGlvbgogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtaW5kcyBvZiBvdGhlciBtZW4sIGJ1dCB0aGlua3Mgb25seSBvZiBvbmUgdGhpbmcsIGhvdyBoZSBtYXkgZW5yaWNoCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZuKAlG91Z2h0IHlvdSBub3QgdG8gbG9hdGhlIHRoaXMgbWFuIGFzIGEgY29tbW9uIGVuZW15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIGh1bWFuIHJhY2U/IEkgY2VydGFpbmx5IHRoaW5rIHNvLiA8bWlsZXN0b25lIG49IjY2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMKICAgICAgICAgICAgICAgICAgICBjb3Vyc2Ugb2YgYWN0aW9uLCBpbnZvbHZpbmcgc28gZ3JlYXQgZGlzZ3JhY2UsIGhlIGhhcyBhZG9wdGVkLCBtZW4gb2YgQXRoZW5zLAogICAgICAgICAgICAgICAgICAgIHdpdGggYSB2aWV3IHRvIGV2YWRpbmcgaGlzIGR1dGllcyB0byB0aGUgc3RhdGUgYW5kIHRvIGNvbmNlYWwgaGlzIHdlYWx0aCwgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIG1heSBtYWtlIHNlY3JldCBwcm9maXRzIGJ5IG1lYW5zIG9mIHRoZSBiYW5rLCBhbmQgbmV2ZXIgc2VydmUgYXMgY2hvcmVndXMgb3IKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2gsIG9yIHBlcmZvcm0gYW55IG90aGVyIG9mIHRoZSBwdWJsaWMgZHV0aWVzIHdoaWNoIGJlZml0IGhpcyBzdGF0aW9uLgogICAgICAgICAgICAgICAgICAgIEFuZCBoZSBoYXMgYWNjb21wbGlzaGVkIHRoaXMgb2JqZWN0LiBIZXJlIGlzIGEgcHJvb2YuIEFsdGhvdWdoIGhlIGhhcyBzbyBsYXJnZQogICAgICAgICAgICAgICAgICAgIGFuIGVzdGF0ZSB0aGF0IGhlIGdhdmUgaGlzIGRhdWdodGVyIGEgbWFycmlhZ2UgcG9ydGlvbiBvZiBvbmUgaHVuZHJlZCBtaW5hZSwgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgbmV2ZXIgYmVlbiBzZWVuIGJ5IHlvdSB0byBwZXJmb3JtIGFueSBwdWJsaWMgc2VydmljZSB3aGF0ZXZlciwgZXZlbiB0aGUgdmVyeQogICAgICAgICAgICAgICAgICAgIHNsaWdodGVzdC4gQW5kIHlldCBob3cgbXVjaCBtb3JlIGhvbm9yYWJsZSBpdCB3b3VsZCBoYXZlIGJlZW4gdG8gYmUgcHJvdmVkIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgb2YgcHVibGljIHNwaXJpdCBhbmQgb25lIHplYWxvdXMgaW4gdGhlIHBlcmZvcm1hbmNlIG9mIGhpcyBkdXRpZXMgdG8gdGhlIHN0YXRlLAogICAgICAgICAgICAgICAgICAgIHRoYW4gYSBmbGF0dGVyZXIgYW5kIGEgYmVhcmVyIG9mIGZhbHNlIHRlc3RpbW9ueSEgQnV0IHRoZSBmZWxsb3cgd291bGQgZG8KICAgICAgICAgICAgICAgICAgICBhbnl0aGluZyB0byBnZXQgbW9uZXkuIDxtaWxlc3RvbmUgbj0iNjciIHVuaXQ9InNlY3Rpb24iIC8+U3VyZWx5LCBtZW4gb2YgQXRoZW5zLAogICAgICAgICAgICAgICAgICAgIHlvdSBvdWdodCB0byBmZWVsIGluZGlnbmF0aW9uIHJhdGhlciB0b3dhcmQgdGhvc2Ugd2hvIGFyZSByYXNjYWxzIGluIHdlYWx0aCB0aGFuCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHRob3NlIHdobyBhcmUgc3VjaCBpbiBwb3ZlcnR5LiBJbiB0aGUgY2FzZSBvZiB0aGUgbGF0dGVyIHRoZSBwcmVzc3VyZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG5lZWR5IHN0YXRlIGFmZm9yZHMgdGhlbSBzb21lIGV4Y3VzZSBpbiB0aGUgZXllcyBvZiB0aG9zZSB3aG8gbG9vayBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgd2l0aCBodW1hbiBzeW1wYXRoeSwgd2hlcmVhcyB0aG9zZSB3aG8sIGxpa2UgdGhpcyBmZWxsb3csIGFyZSByYXNjYWxzCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgcG9zc2Vzc2luZyBhYnVuZGFuY2UsIGNvdWxkIGZpbmQgbm8gcmVhc29uYWJsZSBleGN1c2UgdG8gb2ZmZXIsIGJ1dCB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgc2hvd24gdG8gYWN0IGFzIHRoZXkgZG8gZnJvbSBhIHNwaXJpdCBvZiBzaGFtZWZ1bCBncmVlZCBhbmQgY292ZXRvdXNuZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSwgYW5kIGEgcmVzb2x2ZSB0byBtYWtlIHRoZWlyIG93biBwbG90cyBzdHJvbmdlciB0aGFuIHRoZSBsYXdzLiBOb3Qgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgdGhpbmdzIGlzIHRvIHlvdXIgaW50ZXJlc3QsIGJ1dCByYXRoZXIgdGhhdCB0aGUgd2VhaywgaWYgaGUgc3VmZmVycwogICAgICAgICAgICAgICAgICAgIHdyb25nLCBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmVkcmVzcyBmcm9tIHRoZSB3ZWFsdGh5LiBBbmQgaGUgd2lsbCBiZSBhYmxlLCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBwdW5pc2ggdGhvc2Ugd2hvIGFyZSB0aHVzIG1hbmlmZXN0bHkgcmFzY2FscyB3aGlsZSBwb3NzZXNzaW5nIHdlYWx0aC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5laXRoZXIKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGhlIGFpcnMgd2hpY2ggdGhlIGZlbGxvdyBwdXRzIG9uIGFzIGhlIHdhbGtzIHdpdGggc3VsbGVuIGZhY2UgYWxvbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgd2FsbHMgYmUgcHJvcGVybHkgY29uc2lkZXJlZCBhcyBtYXJrcyBvZiBzb2JyaWV0eSwgYnV0IHJhdGhlciBhcyBtYXJrcyBvZgogICAgICAgICAgICAgICAgICAgIG1pc2FudGhyb3B5LiBJbiBteSBvcGluaW9uIGEgbWFuIHdob20gbm8gbWlzZm9ydHVuZSBoYXMgYmVmYWxsZW4sIGFuZCB3aG8gaXMgaW4KICAgICAgICAgICAgICAgICAgICBubyBsYWNrIG9mIHRoZSBuZWNlc3NhcmllcyBvZiBsaWZlLCBidXQgd2hvIG5vbmUgdGhlIGxlc3MgaGFiaXR1YWxseSBtYWludGFpbnMKICAgICAgICAgICAgICAgICAgICB0aGlzIGRlbWVhbm9yLGhhcyByZXZpZXdlZCB0aGUgbWF0dGVyIGFuZCByZWFjaGVkIHRoZSBjb25jbHVzaW9uIGluIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBtaW5kLCB0aGF0IHRvIHRob3NlIHdobyB3YWxrIGluIGEgc2ltcGxlIGFuZCBuYXR1cmFsIHdheSBhbmQgd2VhciBhIGNoZWVyZnVsCiAgICAgICAgICAgICAgICAgICAgY291bnRlbmFuY2UsIG1lbiBkcmF3IG5lYXIgdW5oZXNpdGF0aW5nbHkgd2l0aCByZXF1ZXN0cyBhbmQgcHJvcG9zYWxzLCB3aGVyZWFzCiAgICAgICAgICAgICAgICAgICAgdGhleSBzaHJpbmsgZnJvbSBkcmF3aW5nIG5lYXIgaW4gdGhlIGZpcnN0IHBsYWNlIHRvIGFmZmVjdGVkIGFuZCBzdWxsZW4KICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzLiA8bWlsZXN0b25lIG49IjY5IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVtZWFub3IsIHRoZW4sIGlzIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBidXQgYSBjbG9hayB0byBjb3ZlciBoaXMgcmVhbCBjaGFyYWN0ZXIsIGFuZCBoZSBzaG93cyB0aGVyZWluIHRoZSBydWRlbmVzcyBhbmQKICAgICAgICAgICAgICAgICAgICBtYWxpZ25pdHkgb2YgaGlzIHRlbXBlci4gSGVyZSBpcyBhIHByb29mLiBZb3UgaGF2ZSBiZWVuIGZhciBiZXR0ZXIgb2ZmIHRoYW4geW91CiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQsIHlldCB0byB3aG9tIGFtb25nIHRoZSB3aG9sZSBob3N0IG9mIEF0aGVuaWFucyBoYXZlIHlvdSBldmVyIG1hZGUgYQogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbj8gVG8gd2hvbSBoYXZlIHlvdSBldmVyIGxlbnQgYWlkLCBvciB0byB3aG9tIGRvbmUgYSBraW5kbmVzcz8KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgY291bGQgbm90IG5hbWUgYSBzaW5nbGUgb25lOyBidXQgd2hpbGUKICAgICAgICAgICAgICAgICAgICBsZW5kaW5nIG1vbmV5IGF0IGludGVyZXN0IGFuZCByZWdhcmRpbmcgdGhlIG1pc2ZvcnR1bmVzIGFuZCBuZWNlc3NpdGllcyBvZgogICAgICAgICAgICAgICAgICAgIG90aGVycyBhcyB5b3VyIG93biBnb29kIGZvcnR1bmUsIHlvdSBlamVjdGVkIHlvdXIgb3duIHVuY2xlIE5pY2lhcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGhvdXNlIG9mIGhpcyBmYXRoZXJzLCB5b3UgaGF2ZSB0YWtlbiBmcm9tIHlvdXIgb3duIG1vdGhlci1pbi1sYXcgdGhlIHJlc291cmNlcwogICAgICAgICAgICAgICAgICAgIHVwb24gd2hpY2ggc2hlIGxpdmVkLCBhbmQgeW91IGhhdmUsIGluIHNvIGZhciBhcyBpdCBkZXBlbmRlZCB1cG9uIHlvdSwgcmVuZGVyZWQKICAgICAgICAgICAgICAgICAgICBob21lbGVzcyB0aGUgc29uIG9mIEFyY2hlZGVtdXMuIE5vIG9uZSBldmVyIGV4YWN0ZWQgcGF5bWVudCBmcm9tIGEgZGVmYXVsdGVyIGFzCiAgICAgICAgICAgICAgICAgICAgcmlnb3JvdXNseSBhcyB5b3UgZXhhY3QgaW50ZXJlc3QgZnJvbSB5b3VyIGRlYnRvcnMuIEEgbWFuLCB0aGVuLCB3aG9tIHlvdSBmaW5kCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgc28gYnJ1dGFsIGFuZCBzbyBzYXZhZ2Ugb24gYWxsIG9jY2FzaW9ucywgYXJlIHlvdSBnb2luZyB0byBmYWlsIHRvIHB1bmlzaAogICAgICAgICAgICAgICAgICAgIGhpbSB3aGVuIHlvdSBoYXZlIGNhdWdodCBoaW0gaW4gdGhlIHZlcnkgYWN0IG9mIHdyb25nZG9pbmc/IEluIHRoYXQgY2FzZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHlvdSB3aWxsIGRvIHdoYXQgaXMgYW4gb3V0cmFnZSBhbmQgaW4gbm8gc2Vuc2UgcmlnaHQuIDxtaWxlc3RvbmUgbj0iNzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyBmaXR0aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBtZW4gb2YgQXRoZW5zLCB0aGF0IHlvdSBzaG91bGQgd2F4IGluZGlnbmFudCBhbHNvIGFnYWluc3QgUGhvcm1pbywKICAgICAgICAgICAgICAgICAgICBmb3IgYnJpbmdpbmcgdGhpcyBtYW4gZm9yd2FyZCBhcyBhIHdpdG5lc3MsIHdoZW4geW91IHNlZSB0aGUgc2hhbWVsZXNzbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBjaGFyYWN0ZXIgYW5kIGhpcyBpbmdyYXRpdHVkZS4gRm9yIEkgZmFuY3kgeW91IGFsbCBrbm93IHRoYXQgaWYsIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmVsbG93IHdhcyBmb3Igc2FsZSwgYSBjb29rIG9yIGFuIGFydGlzYW4gaW4gYW55IG90aGVyIHRyYWRlIGhhZCBib3VnaHQgaGltLCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgbGVhcm5lZCB0aGUgdHJhZGUgb2YgaGlzIG1hc3RlciBhbmQgYmVlbiBmYXIgcmVtb3ZlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NwZXJpdHkgd2hpY2ggbm93IGlzIGhpcy4gPG1pbGVzdG9uZSBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaW50byB3aG9zZSBwb3NzZXNzaW9uIGhlIGNhbWUsIHdhcyBhIGJhbmtlciBhbmQgdGF1Z2h0IGhpbSBsZXR0ZXJzIGFuZAogICAgICAgICAgICAgICAgICAgIGluc3RydWN0ZWQgaGltIGluIGhpcyBidXNpbmVzcyBhbmQgcHV0IGhpbSBpbiBjb250cm9sIG9mIGxhcmdlIHN1bXMgb2YgbW9uZXksIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlY29tZSB3ZWFsdGh5LCBoYXZpbmcgZm91bmQgdGhlIGdvb2QgbHVjayB3aGljaCBicm91Z2h0IGhpbSBpbnRvIG91ciBmYW1pbHkKICAgICAgICAgICAgICAgICAgICB0aGUgZm91bmRhdGlvbiBvZiBhbGwgaGlzIHByZXNlbnQgd2VhbHRoLiA8bWlsZXN0b25lIG49IjczIiB1bml0PSJzZWN0aW9uIiAvPkl0CiAgICAgICAgICAgICAgICAgICAgaXMgb3V0cmFnZW91cywgdGhlbiwgTyBFYXJ0aCBhbmQgdGhlIGdvZHMsIGFuZCB3b3JzZSB0aGFuIG91dHJhZ2VvdXMsIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgc3VmZmVyIHRob3NlIHdobyBtYWRlIGhpbSBhIEdyZWVrIGluc3RlYWQgb2YgYSBiYXJiYXJpYW4gYW5kIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgbm90ZSBpbnN0ZWFkIG9mIGEgc2xhdmUsIGFuZCB3aG8gYnJvdWdodCBoaW0gdG8gc3VjaCBncmVhdCBwcm9zcGVyaXR5LCB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgaW4gZGlyZSB3YW50IHdoaWxlIGhlIGhhcyBtZWFucyBhbmQgaXMgcmljaCwgYW5kIHRoYXQgaGUgc2hvdWxkIGhhdmUgY29tZSB0bwogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBwaXRjaCBvZiBzaGFtZWxlc3NuZXNzIHRoYXQgaGUgY2Fubm90IGJyaW5nIGhpbXNlbGYgdG8gc2hhcmUgd2l0aCB1cyB0aGUKICAgICAgICAgICAgICAgICAgICBnb29kIGZvcnR1bmUgd2hpY2ggd2Ugc2hhcmVkIHdpdGggaGltLiA8bWlsZXN0b25lIG49Ijc0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3IKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGhlIGhhcyBub3Qgc2NydXBsZWQgdG8gbWFycnkgaGlzIG1pc3RyZXNzLCBhbmQgaGUgZHdlbGxzIGFzIGh1c2JhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIGhlciB3aG8gc2NhdHRlcmVkIHRoZSBzd2VhdG1lYXRzIG92ZXIgaGltIHdoZW4gaGUgd2FzIGJvdWdodCBhcyBhIHNsYXZlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgd2FzIGJlbGlldmVkIHRvIGJlIGEgZ29vZCBvbWVuIHRvIHNjYXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgc3dlZXRtZWF0cywgbnV0cywgZXRjLiwgb3ZlciB0aGUgaGVhZCBvZiBhIG5ld2x5IHB1cmNoYXNlZCBzbGF2ZS4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG9waC4gUGwuIDc2OCIgdmFsaWQ9InllcyI+QXJpc3RvcGguIFBsLiA3Njg8L2JpYmw+PC9ub3RlPiBub3IgdG8gd3JpdGUgYQogICAgICAgICAgICAgICAgICAgIGNsYXVzZSBnaXZpbmcgaGltc2VsZiBhIG1hcnJpYWdlIHBvcnRpb24gb2YgZml2ZSB0YWxlbnRzIGluIGFkZGl0aW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhcmdlIHN1bXMgb2Ygd2hpY2ggaGUgYmVjYW1lIG1hc3RlciwgaW5hc211Y2ggYXMgdGhleSB3ZXJlIGluIHRoZSBjdXN0b2R5IG9mIG15CiAgICAgICAgICAgICAgICAgICAgbW90aGVy4oCUZm9yIHdoeSBkbyB5b3Ugc3VwcG9zZSBoZSB3cm90ZSBpbiB0aGUgd2lsbCB0aGUgY2xhdXNlCiAgICAgICAgICAgICAgICAgICAg4oCcYW5kIGFsbCBlbHNlIHdoaWNoIHNoZSBoYXMgSSBnaXZlIHRvCiAgICAgICAgICAgICAgICAgICAgQXJjaGlwcMOq4oCdP+KAlHdoaWxlIGhlIGxvb2tzIHdpdGggaW5kaWZmZXJlbmNlIG9uIG15CiAgICAgICAgICAgICAgICAgICAgZGF1Z2h0ZXJzLCB3aG8gYXJlIGRvb21lZCB0aHJvdWdoIHBvdmVydHkgdG8gZ3JvdyBvbGQgaW4gbWFpZGVuaG9vZCB3aXRoIG5vbmUgdG8KICAgICAgICAgICAgICAgICAgICBkb3dlciB0aGVtLiA8bWlsZXN0b25lIG49Ijc1IiB1bml0PSJzZWN0aW9uIiAvPklmIFBob3JtaW8gaGFkIGJlZW4gcG9vciwgYW5kIGl0CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gb3VyIGZvcnR1bmUgdG8gYmUgd2VhbHRoeSwgYW5kIGlmLCBpbiB0aGUgY291cnNlIG9mIG5hdHVyZSwgYW55dGhpbmcKICAgICAgICAgICAgICAgICAgICBoYWQgaGFwcGVuZWQgdG8gbWUsIHRoaXMgZmVsbG93J3Mgc29ucyB3b3VsZCBoYXZlIGNsYWltZWQgbXkgZGF1Z2h0ZXJzIGluCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2XigJR0aGUgc29ucyBvZiB0aGUgc2xhdmUgd291bGQgaGF2ZSBjbGFpbWVkIHRoZSBkYXVnaHRlcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFzdGVyISBGb3IgdGhleSBhcmUgdGhlaXIgdW5jbGVzLCBzaW5jZSB0aGUgbWFuIG1hcnJpZWQgbXkgbW90aGVyOyBidXQgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBpcyB3ZSB3aG8gYXJlIHBvb3IsIGhlIHdpbGwgbm90IGhlbHAgdG8gcG9ydGlvbiB0aGVtIG9mZiwgYnV0IGhlIHRhbGtzCiAgICAgICAgICAgICAgICAgICAgYW5kIHRhbGtzLCBhbmQgcmVja29ucyB1cCB0aGUgYW1vdW50IG9mIHByb3BlcnR5IHdoaWNoIEkgcG9zc2Vzcy4gPG1pbGVzdG9uZSBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciB0aGlzIGlzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgYWJzdXJkIHRoaW5nIG9mIGFsbC4gVXAgdG8gdGhpcyBkYXkgaGUgaGFzIG5ldmVyIHNlZW4gZml0IHRvIHJlbmRlciBhbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1vbmV5IG9mIHdoaWNoIGhlIGhhcyBkZWZyYXVkZWQgbWUsIGJ1dCBlbnRlcnMgYSBzcGVjaWFsIHBsZWEgdGhhdCBteQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBpcyBub3QgZXZlbiBhZG1pc3NpYmxlOyB5ZXQgaGUgY2hhcmdlcyBhZ2FpbnN0IG1lIHdoYXQgSSBoYXZlIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZXN0YXRlIG9mIG15IGZhdGhlcnMuIE90aGVyIHNsYXZlcyBvbmUgbWF5IHNlZSBjYWxsZWQgdG8gc3RyaWN0IGFjY291bnQKICAgICAgICAgICAgICAgICAgICBieSB0aGVpciBtYXN0ZXJzLCBidXQgaGVyZSB3ZSBzZWUgdGhlIHZlcnkgb3Bwb3NpdGU6IHRoZSBmZWxsb3csIHRob3VnaCBhIHNsYXZlLAogICAgICAgICAgICAgICAgICAgIGNhbGxzIGhpcyBtYXN0ZXIgdG8gYWNjb3VudCwgdGhpbmtpbmcgdGhlcmVieSB0byBzaG93IGhpbSBmb3J0aCBhcyBhIHZpbGUgZmVsbG93CiAgICAgICAgICAgICAgICAgICAgYW5kIGEgcHJvZGlnYWwuIDxtaWxlc3RvbmUgbj0iNzciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG15c2VsZiwgbWVuIG9mIEF0aGVucywgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbWF0dGVyIG9mIG15IG91dHdhcmQgYXBwZWFyYW5jZSwgbXkgZmFzdCB3YWxraW5nLCBhbmQgbXkgbG91ZCB2b2ljZSwgSSBqdWRnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBhbSBub3Qgb25lIG9mIHRob3NlIGZhdm9yZWQgYnkgbmF0dXJlOyBmb3IgaW4gc28gZmFyIGFzIEkgYW5ub3kgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBiZW5lZml0aW5nIG15c2VsZiwgSSBhbSBpbiBtYW55IHJlc3BlY3RzIGF0IGEgZGlzYWR2YW50YWdlOyBidXQgc2luY2UgSQogICAgICAgICAgICAgICAgICAgIGFtIG1vZGVyYXRlIGluIGFsbCBteSBwZXJzb25hbCBleHBlbnNlcywgaXQgd2lsbCBiZSBzZWVuIHRoYXQgSSBsaXZlIGEgbXVjaCBtb3JlCiAgICAgICAgICAgICAgICAgICAgb3JkZXJseSBsaWZlIHRoYW4gUGhvcm1pbyBhbmQgb3RoZXJzIHdobyBhcmUgbGlrZSBoaW0uIDxtaWxlc3RvbmUgbj0iNzgiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdGV2ZXIgY29uY2VybnMgdGhlIHN0YXRlLCBob3dldmVyLCBhbmQgYWxsIHRoYXQgY29uY2VybnMgeW91LCBJCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSwgYXMgeW91IGtub3csIGFzIGxhdmlzaGx5IGFzIEkgY2FuOyBmb3IgSSBhbSB3ZWxsIGF3YXJlIHRoYXQgZm9yIHlvdSB3aG8KICAgICAgICAgICAgICAgICAgICBhcmUgY2l0aXplbnMgYnkgYmlydGggaXQgaXMgc3VmZmljaWVudCB0byBwZXJmb3JtIHB1YmxpYyBzZXJ2aWNlcyBhcyB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIHJlcXVpcmU7IHdlIG9uIHRoZSBjb250cmFyeSB3aG8gYXJlIGNyZWF0ZWQgY2l0aXplbnMgb3VnaHQgdG8gc2hvdyB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSB0aGVtIGFzIGEgZ3JhdGVmdWwgcGF5bWVudCBvZiBhIGRlYnQuIENlYXNlLCB0aGVuLCB0byBmbGluZyBpbnRvIG15CiAgICAgICAgICAgICAgICAgICAgdGVldGggbWF0dGVycyBmb3Igd2hpY2ggSSBzaG91bGQgcHJvcGVybHkgd2luIGNvbW1lbmRhdGlvbi4gPG1pbGVzdG9uZSBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIFBob3JtaW8sIHdob20gb2YgdGhlIGNpdGl6ZW5zIGhhdmUgSSBoaXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICBwcm9zdGl0dXRpb24sIGFzIHlvdSBoYXZlIGRvbmU/IFNob3cgbWUuIFdob20gaGF2ZSBJIGRlcHJpdmVkIG9mIHRoZSBjaXRpemVuc2hpcAogICAgICAgICAgICAgICAgICAgIG9mIHdoaWNoIEkgd2FzIGRlZW1lZCB3b3J0aHksIGFuZCBvZiB0aGUgcmlnaHQgb2YgZnJlZSBzcGVlY2ggaW4gdGhlIGNpdHksIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGRpZCBpbiB0aGUgY2FzZSBvZiB0aGUgbWFuIHdob20geW91IGRpc2hvbm9yZWQ/IFdob3NlIHdpZmUgaGF2ZSBJIGRlYmF1Y2hlZCwKICAgICAgICAgICAgICAgICAgICBhcyB5b3UgaGF2ZSB0aGUgd2l2ZXMgb2YgbWFueT/igJRhbW9uZyB0aGVtIGhlciB0byB3aG9tIHRoaXMKICAgICAgICAgICAgICAgICAgICBnb2QtZGV0ZXN0ZWQgZmVsbG93IGJ1aWx0IHRoZSBtb251bWVudCBuZWFyIHRoYXQgb2YgaGlzIG1pc3RyZXNzIGF0IGEgY29zdCBvZgogICAgICAgICAgICAgICAgICAgIG1vcmUgdGhhbiB0d28gdGFsZW50cy4gQW5kIGhlIGRpZCBub3Qgc2VlIHRoYXQgYSBzdHJ1Y3R1cmUsIGJlaW5nIG9mIHRoYXQgc29ydCwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBhIG1vbnVtZW50LCBub3Qgb2YgaGVyIHRvbWIsIGJ1dCBvZiB0aGUgd3Jvbmcgd2hpY2ggYmVjYXVzZSBvZiBoaW0gc2hlCiAgICAgICAgICAgICAgICAgICAgaGFkIGRvbmUgdG8gaGVyIGh1c2JhbmQuIDxtaWxlc3RvbmUgbj0iODAiIHVuaXQ9InNlY3Rpb24iIC8+RG8geW91LCB0aGVuLCB3aG8KICAgICAgICAgICAgICAgICAgICBwZXJmb3JtIGFjdHMgbGlrZSB0aGVzZSwgYW5kIHdobyBoYXZlIGdpdmVuIHN1Y2ggbWFuaWZlc3QgcHJvb2ZzIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBvdXRyYWdlb3VzIGNvbmR1Y3QsIGRhcmUgdG8gc2NydXRpbml6ZSB0aGUgbWFubmVyIG9mIGxpZmUgb2YgYW55b25lIGVsc2U/IEJ5IGRheQogICAgICAgICAgICAgICAgICAgIHlvdSBhY3Qgc29iZXJseSwgYnV0IHRoZSB3aG9sZSBuaWdodCBsb25nIHlvdSBpbmR1bGdlIGluIGFjdGlvbnMgZm9yIHdoaWNoIGRlYXRoCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIHBlbmFsdHkuIEhlIGlzIGEga25hdmUsIG1lbiBvZiBBdGhlbnMsIGEga25hdmUgYW5kIGEgdmlsbGFpbiwgYW5kIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gc3VjaCBmcm9tIG9mIG9sZCwgZXZlciBzaW5jZSBoZSBsZWZ0IHRoZSB0ZW1wbGUgb2YgQ2FzdG9yIGFuZCBQb2xsdXguPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHdhcyBvbmUgb2YgdGhlIHBsYWNlcyB3aGVyZSBzbGF2ZXMgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBzb2xkLjwvbm90ZT4gSGVyZSBpcyB0aGUgcHJvb2YuIElmIGhlIGhhZCBiZWVuIGhvbmVzdCwgaGUgd291bGQgaGF2ZSBtYW5hZ2VkCiAgICAgICAgICAgICAgICAgICAgaGlzIG1hc3RlcidzIGJ1c2luZXNzLCBhbmQgcmVtYWluZWQgcG9vci4gQnV0IGFzIGl0IGlzLCBoYXZpbmcgZ290IGNvbnRyb2wgb2Ygc28KICAgICAgICAgICAgICAgICAgICBsYXJnZSBhbiBhbW91bnQgb2YgbW9uZXkgdGhhdCBoZSBjb3VsZCBzdGVhbCBmcm9tIGl0IGFsbCB0aGF0IGhlIG5vdyBwb3NzZXNzZXMKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGRldGVjdGlvbiwgaGUgcmVnYXJkcyB3aGF0IGhlIGhvbGRzLCBub3QgYXMgYSBkZWJ0LCBidXQgYXMgYW4gaW5oZXJpdGVkCiAgICAgICAgICAgICAgICAgICAgcGF0cmltb255LiA8bWlsZXN0b25lIG49IjgxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIGJ5IHRoZSBnb2RzLCBpZiBJIGhhZCBsZWQKICAgICAgICAgICAgICAgICAgICB5b3Ugb2ZmIHRvIHByaXNvbiBhcyBhIHRoaWVmIGNhdWdodCBpbiB0aGUgYWN0LCBwaWxpbmcgdXBvbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYmFja+KAlGlmIHRoaXMgaGFkIGJlZW4gaW4gYW55IHdheSBwb3NzaWJsZeKAlHRoZSB3ZWFsdGggd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3Ugbm93IHBvc3Nlc3MsIGFuZCBoYWQgdGhlbiBkZW1hbmRlZCBvZiB5b3UsIGlmIHlvdSBkZW5pZWQgaGF2aW5nIGdvdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgd2VhbHRoIGJ5IHRoaWV2ZXJ5LCB0byByZWZlciBtZSB0byB0aGUgc291cmNlIGZyb20gd2hpY2ggeW91IGdvdCBpdCwgdG8gd2hvbQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHlvdSBoYXZlIHJlZmVycmVkIG1lPyBZb3VyIGZhdGhlciBkaWQgbm90IGdpdmUgaXQgdG8geW91OyB5b3UgZGlkIG5vdCBmaW5kCiAgICAgICAgICAgICAgICAgICAgaXQ7IHlvdSBoYWQgbm90IGdvdCBpdCBmcm9tIHNvbWUgb3RoZXIgc291cmNlIHdoZW4geW91IGNvbWUgaW50byBvdXIgZmFtaWx5OyBmb3IKICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBhIGJhcmJhcmlhbiB3aGVuIHlvdSB3ZXJlIHB1cmNoYXNlZC4gSGF2ZSB5b3UsIHRoZW4sIGEgbWFuIHdobyBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBwdWJsaWNseSBwdXQgdG8gZGVhdGggZm9yIHdoYXQgeW91IGhhdmUgZG9uZSwgYWZ0ZXIgc2F2aW5nIHlvdXIgc2tpbiwKICAgICAgICAgICAgICAgICAgICBhZnRlciBzZWN1cmluZyBmb3IgeW91cnNlbGYgYSBjaXR5IHdpdGggb3VyIG1vbmV5LCBhbmQgYWZ0ZXIgYmVpbmcgYWxsb3dlZCB0bwogICAgICAgICAgICAgICAgICAgIGJlZ2V0IGNoaWxkcmVuIGFzIGJyb3RoZXJzIHRvIHlvdXIgb3duIG1hc3RlcnPigJRoYXZlIHlvdSBlbnRlcmVkIGEKICAgICAgICAgICAgICAgICAgICBzcGVjaWFsIHBsZWEgdGhhdCBvdXIgYWN0aW9uIGZvciB0aGUgc3VtcyBjbGFpbWVkIGZyb20geW91IGlzIGluYWRtaXNzaWJsZT8KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIHRoZW4sIGRpZCB5b3Ugc3BlYWsgZXZpbCBvZiBtZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5xdWlyZSB3aGF0IG1hbm5lciBvZiBtYW4gbXkgZmF0aGVyIHdhcz8gTWVuIG9mIEF0aGVucywgd2hvIHdvdWxkIG5vdCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBpbmRpZ25hbnQgYXQgdGhpcz8gRm9yIG15IHBhcnQsIHRob3VnaCBpdCBiZXNlZW0gbWUgdG8gaGF2ZSBsZXNzIG9mIHByaWRlIHRoYW4KICAgICAgICAgICAgICAgICAgICBhbnkgb2YgeW91LCB5ZXQgSSBqdWRnZSB0aGF0IEkgbWF5IGF0IGxlYXN0IGhhdmUgbW9yZSB0aGFuIFBob3JtaW8sIHdoaWxlIGFzIGZvcgogICAgICAgICAgICAgICAgICAgIGhpbSwgdGhvdWdoIHRoZXJlIGJlIG5vIG9uZSBlbHNlIHRoYW4gd2hvbSBoZSBzaG91bGQgaGF2ZSBsZXNzLCB5ZXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBsZXNzIHRoYW4gSTsgZm9yLCBhc3N1bWluZyB0aGF0IHdlIGFyZSB0aGUgc29ydCBvZiBwZW9wbGUgeW91ciB3b3JkcyBtYWRlCiAgICAgICAgICAgICAgICAgICAgdXMgb3V0IHRvIGJlLCB5b3UsIFBob3JtaW8sIHdlcmUgbm9uZSB0aGUgbGVzcyBvdXIgc2xhdmUuIDxtaWxlc3RvbmUgbj0iODMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBpcyBwZXJoYXBzCiAgICAgICAgICAgICAgICAgICAgc29tZXRoaW5nIGVsc2Ugd2hpY2ggb25lIG9mIHRoZW0gbWF5IHNheTogdGhhdCBQYXNpY2xlcywgYWx0aG91Z2ggaGUgaXMgbXkKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCBtYWtlcyBubyBjaGFyZ2UgYWdhaW5zdCBQaG9ybWlvIGZvciB0aGVzZSBzYW1lIGFjdGlvbnMuIFdlbGwsIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIHNwZWFrIGFib3V0IFBhc2ljbGVzLCB0b28sIG1lbiBvZiBBdGhlbnMsIHRob3VnaCBJIGJlZyBhbmQgaW1wbG9yZSB5b3UgdG8gcGFyZG9uCiAgICAgICAgICAgICAgICAgICAgbWUsIGlmIEkgYW0gc28gY2FycmllZCBhd2F5IGJ5IGluZGlnbmF0aW9uIGF0IHRoZSBvdXRyYWdlcyBJIGhhdmUgcmVjZWl2ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIG15IG93biBzbGF2ZXMgYXMgdG8gYmUgdW5hYmxlIHRvIHJlc3RyYWluIG15c2VsZjsgSSB3aWxsIG5vdCBrZWVwIHNpbGVudCwgYnV0CiAgICAgICAgICAgICAgICAgICAgd2lsbCBkZWNsYXJlIHdoYXQgdW50aWwgbm93IEkgcHJldGVuZGVkIG5vdCB0byBoZWFyIHdoZW4gb3RoZXJzIHNhaWQKICAgICAgICAgICAgICAgICAgICBpdDvigJQgPG1pbGVzdG9uZSBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5JIGNvbnNpZGVyIFBhc2ljbGVzIHRvIGJlIG15CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBvbiBteSBtb3RoZXIncyBzaWRlLCBidXQgd2hldGhlciBvbiBteSBmYXRoZXIncyBzaWRlIGFsc28sIEkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAga25vdzsgYnV0IEkgYW0gYWZyYWlkIHRoYXQgdGhlIHdyb25ncyB3aGljaCBQaG9ybWlvIGhhcyBkb25lIHVzIGJlZ2FuIHdpdGgKICAgICAgICAgICAgICAgICAgICBQYXNpY2xlcy4gRm9yIHdoZW4gaGUgam9pbnMgaW4gcGxlYWRpbmcgdGhlIGNhdXNlIG9mIHRoZSBzbGF2ZSBhbmQgZGlzaG9ub3JzIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIHdoZW4gaGUgZmF3bnMgdXBvbiB0aG9zZSwgYW5kIGN1cnJpZXMgdGhlIGZhdm9yIG9mIHRob3NlLCB3aG8gb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBzZWVrIGhpcyBmYXZvciwgdG8gd2hhdCBzdXNwaWNpb24gZG9lcyB0aGlzIG5hdHVyYWxseSBnaXZlIHJpc2U/IEF3YXksIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgd2l0aCBQYXNpY2xlcywgYW5kIGxldCBoaW0gYmUgY2FsbGVkIHlvdXIgc29uIGluc3RlYWQgb2YgeW91ciBtYXN0ZXIsIGFuZCBteQogICAgICAgICAgICAgICAgICAgIGFkdmVyc2FyeSDvvIhzaW5jZSBoZSBzbyBjaG9vc2Vz77yJIGluc3RlYWQgb2YgbXkgYnJvdGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgYmlkIGFkaWV1CiAgICAgICAgICAgICAgICAgICAgdG8gdGhpcyBmZWxsb3cgYW5kIGFwcGVhbCB0byB0aG9zZSB0byB3aG9tIG15IGZhdGhlciBsZWZ0IG1lIGFzIG15IGhlbHBlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc+KAlHRvIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LiBBbmQgSSBiZWcgYW5kIGVudHJlYXQgYW5kIGltcGxvcmUKICAgICAgICAgICAgICAgICAgICB5b3UsIGRvIG5vdCBzdWZmZXIgbXkgZGF1Z2h0ZXJzIGFuZCBteXNlbGYgdGhyb3VnaCBvdXIgcG92ZXJ0eSB0byBiZWNvbWUgYQogICAgICAgICAgICAgICAgICAgIHNvdXJjZSBvZiBtYWxpY2lvdXMgam95IHRvIG15IG93biBzbGF2ZXMgYW5kIHRvIGhpcyBmbGF0dGVyZXJzLiBNeSBmYXRoZXIgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHlvdSBhIHRob3VzYW5kIHNoaWVsZHMgYW5kIG1hZGUgaGltc2VsZiBzZXJ2aWNlYWJsZSB0byB5b3UgaW4gbWFueSB3YXlzLCBhbmQKICAgICAgICAgICAgICAgICAgICBmaXZlIHRpbWVzIHNlcnZlZCBhcyB0cmllcmFyY2gsIHZvbHVudGFyaWx5IGVxdWlwcGluZyB0aGUgc2hpcHMgYW5kIG1hbm5pbmcgdGhlbQogICAgICAgICAgICAgICAgICAgIGF0IGhpcyBvd24gZXhwZW5zZS4gSSByZW1pbmQgeW91IG9mIHRoaXMsIG5vdCBiZWNhdXNlIEkgY29uc2lkZXIgdGhhdCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgb2JsaWdhdGlvbiB0byBtZeKAlGZvciBpdCBpcyBJIHRoYXQgYW0gdW5kZXIgb2JsaWdhdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHlvdSzigJRidXQgaW4gb3JkZXIgdGhhdCBJIG1heSBub3Qgc3VmZmVyIHVud29ydGh5IHRyZWF0bWVudCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgeW91ciBrbm93aW5nIGl0LiBGb3IgdGhhdCB3b3VsZCBub3QgYmUgYSBjcmVkaXQgdG8geW91IGFueSBtb3JlIHRoYW4gdG8gbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iODYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGhhdmUgbXVjaAogICAgICAgICAgICAgICAgICAgIHRvIHNheSByZWdhcmRpbmcgdGhlIGluZGlnbml0aWVzIHdoaWNoIEkgaGF2ZSBzdWZmZXJlZCwgYnV0IEkgc2VlIHRoYXQgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm90IGVub3VnaCB3YXRlciBsZWZ0IGluIHRoZSBjbG9jay4gSSB3aWxsIHRlbGwgeW91LCB0aGVyZWZvcmUsIGhvdyBJIHRoaW5rIHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgYWxsIGJlc3QgY29tZSB0byBrbm93IHRoZSBlbm9ybWl0eSBvZiB0aGUgd3JvbmdzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgbWUuCiAgICAgICAgICAgICAgICAgICAgWW91IG11c3QgZWFjaCBvZiB5b3UgY29uc2lkZXIgd2hhdCBzbGF2ZSBoZSBsZWZ0IGF0IGhvbWUsIGFuZCB0aGVuIGltYWdpbmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHN1ZmZlcmVkIGZyb20gaGltIHRoZSBzYW1lIHRyZWF0bWVudCB0aGF0IEkgaGF2ZSBzdWZmZXJlZCBmcm9tIFBob3JtaW8uCiAgICAgICAgICAgICAgICAgICAgRG8gbm90IHRha2UgaW50byBjb25zaWRlcmF0aW9uIHRoYXQgdGhleSBhcmUgc2V2ZXJhbGx5IFN5cnVzIG9yIE1hbmVzIG9yIHdoYXQKICAgICAgICAgICAgICAgICAgICBub3QsIHdoaWxlIHRoaXMgZmVsbG93IGlzIFBob3JtaW8uIFRoZSB0aGluZyBpcyB0aGUgc2FtZeKAlHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzLCBhbmQgaGUgd2FzIGEgc2xhdmU7IHlvdSBhcmUgbWFzdGVycywgYW5kIEkgd2FzIG1hc3Rlci4gPG1pbGVzdG9uZSBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz5CZWxpZXZlLCB0aGVuLCB0aGF0IGl0IGlzIGZpdHRpbmcgbm93IGZvciBtZSB0byBleGFjdAogICAgICAgICAgICAgICAgICAgIHRoZSBwZW5hbHR5IHdoaWNoIGVhY2ggb25lIG9mIHlvdSB3b3VsZCBjbGFpbTsgYW5kIGluIHRoZSBpbnRlcmVzdCBvZiB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGFuZCBvZiB0aGUgb2F0aHMgd2hpY2ggeW91IGhhdmUgdGFrZW4gYXMganVyb3JzIHB1bmlzaCB0aGUgbWFuIHdobyBoYXMgcm9iYmVkIG1lCiAgICAgICAgICAgICAgICAgICAgb2YgYSB2ZXJkaWN0IGJ5IGdpdmluZyBmYWxzZSB0ZXN0aW1vbnksIGFuZCBtYWtlIGhpbSBhbiBleGFtcGxlIHRvIG90aGVycywKICAgICAgICAgICAgICAgICAgICByZW1lbWJlcmluZyBhbGwgdGhhdCB5b3UgaGF2ZSBoZWFyZCBmcm9tIG1lIGFuZCBiZWFyaW5nIGl0IGluIG1pbmQsIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0IHRvIG1pc2xlYWQgeW91LCBhbmQgbWVldGluZyB0aGVtIGF0IGV2ZXJ5IHBvaW50LiBJZiB0aGV5IGRlbnkgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBib3JuZSB3aXRuZXNzIHRvIGFsbCB0aGUgZmFjdHMsIGFzayB0aGVtIHRoZXNlIHF1ZXN0aW9ucywg4oCcV2hhdAogICAgICAgICAgICAgICAgICAgIHN0YW5kcyB3cml0dGVuIGluIHRoZSBkZXBvc2l0aW9uPyBXaHkgZGlkIHlvdSBub3Qgc3RyaWtlIGl0IG91dCBhdCB0aGUgdGltZT8KICAgICAgICAgICAgICAgICAgICBXaGF0IGlzIHRoZSBjb3VudGVyLXBsZWEgaW4gdGhlIGN1c3RvZHkgb2YgdGhlIGFyY2hvbnM/4oCdIDxtaWxlc3RvbmUgbj0iODgiIHVuaXQ9InNlY3Rpb24iIC8+SWYgdGhleSBkZWNsYXJlIHRoYXQgdGhleSBoYXZlIHRlc3RpZmllZCwgb25lIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbGl2ZWQgYXMgd2FyZCB1bmRlciBhIHdpbGwsIGFub3RoZXIgdGhhdCBoZSBzZXJ2ZWQgYXMgZ3VhcmRpYW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgdGhhdCBoZSBoYXMgdGhlIHdpbGwgaW4gaGlzIHBvc3Nlc3Npb24sIGRlbWFuZCBvZiB0aGVtLCDigJxXaGF0CiAgICAgICAgICAgICAgICAgICAgd2lsbD8gV2hhdCB3ZXJlIHRoZSBwcm92aXNpb25zIGNvbnRhaW5lZCBpbiBpdD/igJ0gRm9yIHRvIHRoZSBkZXBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgdG8gd2hpY2ggdGhlc2UgbWVuIGJvcmUgd2l0bmVzcyBubyBvbmUgb2YgdGhlIG90aGVycyBoYXMgZ2l2ZW4gY29ycm9ib3JhdGl2ZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueS4gQnV0IGlmIHRoZXkgdHJ5IHdoaW5pbmcgdGFjdGljcywgeW91IHNob3VsZCBjb25zaWRlciB0aGF0IHRoZSBvbmUKICAgICAgICAgICAgICAgICAgICB3cm9uZ2VkIGlzIG1vcmUgZGVzZXJ2aW5nIG9mIHBpdHkgdGhhbiB0aG9zZSBhYm91dCB0byBiZSBwdW5pc2hlZC4gSWYgeW91IGFjdCBpbgogICAgICAgICAgICAgICAgICAgIHRoaXMgd2F5LCB5b3Ugd2lsbCBzdWNjb3IgbWUsIGFuZCB5b3Ugd2lsbCByZXN0cmFpbiB0aGVzZSBtZW4gZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGV4Y2Vzc2l2ZSBhZHVsYXRpb247IGFuZCB0byB5b3VyIG93biBzYXRpc2ZhY3Rpb24geW91IHdpbGwgaGF2ZSByZW5kZXJlZCBhCiAgICAgICAgICAgICAgICAgICAgcmlnaHRlb3VzIHZlcmRpY3QuPC9wPgogICAgICAgICAgICA8L2RpdjE+CgogICAgICAgICAgICA8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPkFwb2xsb2RvcnVzIEFnYWluc3QgU3RlcGhhbnVzIDE8L2hlYWQ+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBvdmVyd2hlbG1lZCBieSBmYWxzZSB0ZXN0aW1vbnksIG1lbiBvZiBBdGhlbnMsIGFuZCBoYXZpbmcgYmVlbiBvdXRyYWdlb3VzbHkgYW5kCiAgICAgICAgICAgICAgICAgICAgY3J1ZWxseSB0cmVhdGVkIGJ5IFBob3JtaW8sIEkgaGF2ZSBjb21lIHRvIHdpbiBpbiB5b3VyIGNvdXJ0IGEgdmVyZGljdCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhvc2UgcmVzcG9uc2libGUgZm9yIHRoZSB3cm9uZy4gSSBiZWcgYW5kIGJlc2VlY2ggYW5kIGltcGxvcmUgeW91IGFsbCwgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UgdG8gZ2l2ZSBtZSBhIGZhdm9yYWJsZSBoZWFyaW5nIO+8iGZvciBpdCBpcyBhIGdyZWF0IHRoaW5nIGZvcgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYXZlIG1ldCB3aXRoIG1pc2ZvcnR1bmUsIGFzIEkgaGF2ZSBkb25lLCB0byBiZSBhYmxlIHRvIHRlbGwgb3RoZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGV5IGhhdmUgc3VmZmVyZWQsIGFuZCB0byBmaW5kIGluIHlvdSBsaXN0ZW5lcnMgd2hvIGFyZSBraW5kbHkKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWTvvIk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQWVzY2guIFBCIDYzNyIgdmFsaWQ9InllcyI+QWVzY2guIFBCIDYzNy02Mzk8L2JpYmw+IGZvciBhbiBhbG1vc3QgaWRlbnRpY2FsCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudC48L25vdGU+OyBhbmQgaW4gdGhlIHNlY29uZCBwbGFjZSwgaWYgSSBzaGFsbCBzZWVtIHRvIHlvdSB0byBiZSB0aGUKICAgICAgICAgICAgICAgICAgICB2aWN0aW0gb2Ygd3Jvbmdkb2luZywgdG8gcmVuZGVyIG1lIHRoZSBhaWQgd2hpY2ggaXMgbXkgZHVlLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SSBzaGFsbCBwcm92ZSB0byB5b3UgdGhhdCB0aGlzIG1hbiBTdGVwaGFudXMgaGFzIGJvdGgKICAgICAgICAgICAgICAgICAgICBnaXZlbiBmYWxzZSB0ZXN0aW1vbnksIGFuZCBoYXMgZG9uZSB0aGlzIGZyb20gYSBiYXNlIGRlc2lyZSBmb3IgZ2FpbiwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyBjb252aWN0ZWQgb3V0IG9mIGhpcyBvd24gbGlwczsgc28gdHJhbnNwYXJlbnQgaXMgdGhlIGNhc2UgZnJvbSBldmVyeSBwb2ludAogICAgICAgICAgICAgICAgICAgIG9mIHZpZXcuIEFuZCBJIHNoYWxsIGVuZGVhdm9yIHRvIHJlbGF0ZSB0byB5b3UgaW4gdGhlIGZld2VzdCBwb3NzaWJsZSB3b3JkcyBhbGwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhhcyB0YWtlbiBwbGFjZSBiZXR3ZWVuIFBob3JtaW8gYW5kIG15c2VsZiBmcm9tIHRoZSBmaXJzdDsgYW5kIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgaGVhcmluZyB0aGlzIHlvdSB3aWxsIGJlIGNvbnZpbmNlZCBib3RoIG9mIHRoZSB2aWxsYWlueSBvZiBQaG9ybWlvIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGhhdmUgYm9ybmUgZmFsc2UgdGVzdGltb255LiA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcyBmb3IgbXlzZWxmLCBtZW4gb2YgdGhlIGp1cnksIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3YXMgbGVmdCBtZSBieSBteSBmYXRoZXIsIGFuZCB0aGlzIHdhcyBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBQaG9ybWlvLAogICAgICAgICAgICAgICAgICAgIHdobyBmdXJ0aGVybW9yZSBoYWQgbWFycmllZCBteSBtb3RoZXIgd2hpbGUgSSB3YXMgb3V0IG9mIHRoZSBjb3VudHJ5IG9uIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzLCBzZXJ2aW5nIGFzIHlvdXIgdHJpZXJhcmNoLiDvvIhIb3cgaGUgbWFuYWdlZCBpdCwgcGVyaGFwcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBwcm9wZXIgZm9yIGEgc29uIGZ1bGx5IHRvIGV4cGxhaW4gYWJvdXQgaGlzIG1vdGhlci7vvIkgV2hlbiBJCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgYW5kIGxlYXJuZWQgb2YgdGhpcyBhbmQgc2F3IHdoYXQgaGFkIGJlZW4gZG9uZSwgYWx0aG91Z2ggSSB3YXMgZ3JlYXRseQogICAgICAgICAgICAgICAgICAgIGluY2Vuc2VkIGFuZCB0b29rIGl0IG11Y2ggdG8gaGVhcnQsIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JIHdhcwogICAgICAgICAgICAgICAgICAgIHVuYWJsZSB0byBicmluZyBhIHByaXZhdGUgYWN0aW9uIO+8iGZvciB0aGVyZSB3ZXJlIG5vIGFjdGlvbnMgYXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRpbWUsIHNpbmNlIHlvdSBwdXQgb2ZmIGFsbCBzdWNoIG1hdHRlcnMgYmVjYXVzZSBvZiB0aGUgd2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcmVmZXJlbmNlIGlzIHRvIHRoZSBob3N0aWxpdGllcyBiZXR3ZWVuIEF0aGVucyBhbmQgVGhlYmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBwZXJpb2QgYmV0d2VlbiB0aGUgYmF0dGxlIG9mIExldWN0cmEg77yIPGRhdGUgYXV0aG5hbWU9Ii0zNzEiIHZhbHVlPSItMzcxIj4zNzE8L2RhdGU+IEIuQy7vvIkgYW5kIHRoZSBiYXR0bGUgb2YgTWFudGluZWEg77yIPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIHZhbHVlPSItMzYyIj4zNjI8L2RhdGU+IEIuQy7vvIkuPC9ub3RlPu+8iSwgYnV0IEkgaW5kaWN0ZWQKICAgICAgICAgICAgICAgICAgICBoaW0gYmVmb3JlIHRoZSBUaGVzbW90aGV0YWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIGEgb24gcC4gMjAyCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHZvbC4gMS48L25vdGU+IG9uIHRoZSBjaGFyZ2Ugb2Ygb3V0cmFnZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSA8Zm9yZWlnbiBsYW5nPSJncmVlayI+4b2VzrLPgc61z4nPgiDOs8+BzrHPhuG9tTwvZm9yZWlnbj4gd2FzIGEgcHVibGljIGluZGljdG1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHdhbnRvbiBvdXRyYWdlLiBJdCB3YXMgYSBjcmltaW5hbCBjaGFyZ2UsIGFuZCBpbnZvbHZlZCB0aGUgcGVuYWx0eSBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmUgcGF5YWJsZSB0byB0aGUgU3RhdGUsIG9yLCBpbiBleHRyZW1lIGNhc2VzLCBldmVuIHRoZSBwZW5hbHR5IG9mIGRlYXRoLgogICAgICAgICAgICAgICAgICAgICAgICBJdCB3YXMgZmFyIG1vcmUgc2VyaW91cyB0aGFuIGEgY2hhcmdlIG9mIGNvbW1vbiBhc3NhdWx0IO+8iDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OseG8sM66zrXhvbfOsc+CIM604b23zrrOtzwvZm9yZWlnbj7vvIkuIFNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1NC4xIiB2YWxpZD0ieWVzIj5EZW0uIDU0LjE8L2JpYmw+PC9ub3RlPiBIb3dldmVyLCB0aW1lIHBhc3NlZCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCB3YXMgZXZhZGVkIO+8iHNlZWluZyB0aGF0IGFjdGlvbnMgd2VyZSBub3QgYmVpbmcKICAgICAgICAgICAgICAgICAgICBoZWxk77yJLCBhbmQgbW9yZW92ZXIgY2hpbGRyZW4gd2VyZSBib3JuIGJ5IG15IG1vdGhlciB0byBQaG9ybWlvLCBhbmQKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGlzIO+8iGZvciB0aGUgd2hvbGUgdHJ1dGggc2hhbGwgYmUgdG9sZCB5b3UsIG1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ577yJLCBtYW55IGtpbmRseSBvdmVydHVyZXMgd2VyZSBtYWRlIG9uIHRoZSBwYXJ0IG9mIG15IG1vdGhlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgcGxlYXMgb24gYmVoYWxmIG9mIHRoaXMgbWFuIFBob3JtaW8sIGFuZCBtYW55IG92ZXJ0dXJlcyBvbiB0aGUgcGFydCBvZiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB0aGF0IHdlcmUgYm90aCBtb2RlcmF0ZSBhbmQgaHVtYmxlIGluIHRoZWlyIHRlcm1zLiA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdG8gbWFrZSB0aGUgc3RvcnkgYnJpZWYsIG1lbiBvZiBBdGhlbnMsIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IGRvIG9uZSBvZiB0aGUgdGhpbmdzIHRvIHdoaWNoIGhlIGhhZCBhZ3JlZWQsIGFuZCB0cmllZCB0byB3aXRoaG9sZAogICAgICAgICAgICAgICAgICAgIGZyb20gbWUgdGhlIG1vbmV5IHdoaWNoIGhlIGhlbGQgYXMgY2FwaXRhbCBpbiB0aGUgYmFuazsgc28gdGhlbiBJIHdhcyBjb21wZWxsZWQKICAgICAgICAgICAgICAgICAgICB0byBlbnRlciBzdWl0IGFnYWluc3QgaGltIGF0IHRoZSBlYXJsaWVzdCBvcHBvcnR1bml0eS4gUGhvcm1pbyBvbiBoaXMgcGFydCwKICAgICAgICAgICAgICAgICAgICBzZWVpbmcgdGhhdCBldmVyeXRoaW5nIHdvdWxkIGJlIGJyb3VnaHQgdG8gbGlnaHQsIGFuZCB0aGF0IGhlIHdvdWxkIGJlIHByb3ZlZCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYWN0ZWQgdG93YXJkIG1lIGFzIHRoZSBiYXNlc3Qgb2YgaHVtYW5raW5kLCBjb250cml2ZWQgYW5kIGNvbmNvY3RlZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcGxvdCBpbiBmdXJ0aGVyYW5jZSBvZiB3aGljaCB0aGUgZGVmZW5kYW50IFN0ZXBoYW51cyBnYXZlIHRoaXMgZmFsc2UgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZS4gSW4gdGhlIGZpcnN0IHBsYWNlLCBoZSBlbnRlcmVkIGEgc3BlY2lhbCBwbGVhIGluIHRoZSBzdWl0IGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGRlZmVuZGFudCwgY2xhaW1pbmcgdGhhdCB0aGUgc3VpdCB3YXMgbm90IGFkbWlzc2libGU7IGFuZCB0aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZWQgZmFsc2Ugd2l0bmVzc2VzIHdobyBzdGF0ZWQgdGhhdCBJIGhhZCBnaXZlbiBoaW0gYSByZWxlYXNlIGZyb20gbXkKICAgICAgICAgICAgICAgICAgICBjbGFpbXMsIGFuZCB3aG8gZGVwb3NlZCB0byBhIGZvcmdlZCBsZWFzZSBhbmQgdG8gYSB3aWxsIHdoaWNoIG5ldmVyIGV4aXN0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoYWQgdGhlIGFkdmFudGFnZSBvdmVyIG1lIGluIGJlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHNwZWFrZXIsIGJlY2F1c2UgdGhpcyB3YXMgYSBzcGVjaWFsIHBsZWEgYW5kIHRoZSBjYXNlIHdhcyBub3QgY29taW5nIHRvCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgdXBvbiB0aGUgcmVhbCBpc3N1ZSwgYW5kIGJ5IHJlYWRpbmcgdGhlc2UgZG9jdW1lbnRzIGFuZCBtYWtpbmcgb3RoZXIgZmFsc2UKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnRzIHdoaWNoIGhlIHRob3VnaHQgd291bGQgZmF2b3IgaGlzIGNhc2UsIGhlIG1hZGUgc3VjaCBhbiBpbXByZXNzaW9uIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnkgdGhhdCB0aGV5IHJlZnVzZWQgdG8gaGVhciBhIHNpbmdsZSB3b3JkIGZyb20gbWUuIEkgd2FzIGZpbmVkIG9uZS1zaXh0aAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBhbW91bnQgY2xhaW1lZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIGEgb24gcC4gNTAgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdm9sLiAxLjwvbm90ZT4gd2FzIGRlbmllZCB0aGUgcmlnaHQgb2YgYSBoZWFyaW5nLCBhbmQgd2FzIHRyZWF0ZWQgd2l0aCBzdWNoCiAgICAgICAgICAgICAgICAgICAgY29udHVtZWx5IGFzIEkgZG91YnQgaWYgYW55IG90aGVyIG1hbiBldmVyIHdhcywgYW5kIEkgd2VudCBmcm9tIHRoZSBjb3VydCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgQXRoZW5zLCB0YWtpbmcgdGhlIG1hdHRlciBiaXR0ZXJseSBhbmQgZ3JpZXZvdXNseSB0byBoZWFydC4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gZ29pbmcgb3ZlciBpdCBpbiBteSBvd24gbWluZCwgaG93ZXZlciwgSSBzZWUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBhYnVuZGFudCBleGN1c2UgZm9yIHRob3NlIHdobyBnYXZlIHRoYXQgdmVyZGljdCDvvIhmb3IgSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBrbm93IHdoYXQgb3RoZXIgdm90ZSBJIGNvdWxkIG15c2VsZiBoYXZlIGdpdmVuLCBpZiBJIGhhZCBrbm93biBub3RoaW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3RzIGFuZCBoYWQgaGVhcmQgdGhlIHRlc3RpbW9uee+8iSwgYnV0IHRoYXQgb3VyIGFuZ2VyIHNob3VsZCBmYWxsIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gd2hvIGJ5IGdpdmluZyBmYWxzZSB0ZXN0aW1vbnkgd2VyZSByZXNwb25zaWJsZSBmb3IgdGhpcyByZXN1bHQuIE9mIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVycyB3aG8gaGF2ZSBnaXZlbiB0ZXN0aW1vbnkgSSBzaGFsbCBzcGVhayB3aGVuIEkgcHJvY2VlZCBhZ2FpbnN0IHRoZW0sIGJ1dAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGUgdGVzdGltb255IG9mIHRoZSBkZWZlbmRhbnQgU3RlcGhhbnVzIEkgc2hhbGwgdHJ5IHRvIGluc3RydWN0IHlvdQogICAgICAgICAgICAgICAgICAgIGF0IG9uY2UuIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UKICAgICAgICAgICAgICAgICAgICB0aGUgZGVwb3NpdGlvbiBpdHNlbGYsIGFuZCByZWFkIGl0LCBwbGVhc2UsIHRoYXQgZnJvbSBpdHMgdmVyeSBsYW5ndWFnZSBJIG1heQogICAgICAgICAgICAgICAgICAgIHByb3ZlIG15IHBvaW50LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZDsgYW5kIGRvIHlvdSBjaGVjayB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2F0ZXIuPHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZT5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN0ZXBoYW51cywgc29uIG9mIE1lbmVjbGVzLCBvZiBBY2hhcm5hZSwgRW5kaXVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgRXBpZ2VuZXMsIG9mIExhbXB0cmFlLCBTY3l0aGVzLCBzb24gb2YgSGFybWF0ZXVzLCBvZiBDeWRhdGhlbmFldW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjaGFybmFlIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPZW5lw69zLCBMYW1wdHJhZSBvZiB0aGUgdHJpYmUgRXJlY3RoZcOvcywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDeWRhdGhlbmFldW0gb2YgdGhlIHRyaWJlIFBhbmRpb25pcy48L25vdGU+IGRlcG9zZSB0aGF0IHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGJlZm9yZSB0aGUgYXJiaXRyYXRvciBUZWlzaWFzLCBvZiBBY2hhcm5hZSwgd2hlbiBQaG9ybWlvIGNoYWxsZW5nZWQKICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMsIGlmIGhlIGRlY2xhcmVkIHRoYXQgdGhlIGRvY3VtZW50IHdoaWNoIFBob3JtaW8gcHV0IGludG8gdGhlIGJveAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbm90IGEgY29weSBvZiB0aGUgd2lsbCBvZiBQYXNpbywgdG8gb3BlbiB0aGUgd2lsbCBvZiBQYXNpbywgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgQW1waGlhcywgYnJvdGhlci1pbi1sYXcgb2YgQ2VwaGlzb3Bob24sIHN1Ym1pdHRlZCB0byB0aGUgYXJiaXRyYXRvcjsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgQXBvbGxvZG9ydXMgcmVmdXNlZCB0byBvcGVuIGl0OyBhbmQgdGhhdCB0aGUgZG9jdW1lbnQgaW4gcXVlc3Rpb24gd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgY29weSBvZiB0aGUgd2lsbCBvZiBQYXNpby48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoYXZlIGhlYXJkCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlcG9zaXRpb24sIG1lbiBvZiB0aGUganVyeSwgYW5kIEkgdGhpbmsgdGhhdCBldmVuIGlmIHlvdSBoYXZlIG5vdGljZWQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIGVsc2UsIHRoaXMgYXQgbGVhc3QgbXVzdCBoYXZlIHNlZW1lZCBzdHJhbmdlIHRvIHlvdSwgdGhhdCBpdCBiZWdpbnMgd2l0aAogICAgICAgICAgICAgICAgICAgIGEgY2hhbGxlbmdlIGFuZCBlbmRzIHdpdGggYSB3aWxsLiBIb3dldmVyLCBJIG9uIG15IHBhcnQsIGNvdW50IGl0IHJpZ2h0LCB3aGVuIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBoYXZlIHNob3duIHdoYXQgbWF5IGJlIGNhbGxlZCB0aGUgbWFpbiBzdWJzdGFuY2Ugb2YgdGhlIHRlc3RpbW9ueSB0byBiZQogICAgICAgICAgICAgICAgICAgIGZhbHNlLCB0aGVuLCBhbmQgbm90IHRpbGwgdGhlbiwgdG8gc2F5IHNvbWV0aGluZyBhbHNvIGFib3V0IG1hdHRlcnMgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIHNvcnQuIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgaXQgaXMgZGVwb3NlZCBieSB0aGVtIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGNoYWxsZW5nZWQgbWUgdG8gb3BlbiB0aGUgd2lsbCB3aGljaCBBbXBoaWFzLAogICAgICAgICAgICAgICAgICAgIGJyb3RoZXLigJRpbuKAlGxhdyBvZiBDZXBoaXNvcGhvbiwgc3VibWl0dGVkIHRvIHRoZSBhcmJpdHJhdG9yCiAgICAgICAgICAgICAgICAgICAgVGVpc2lhczsgYW5kIHRoYXQgSSByZWZ1c2VkIHRvIG9wZW4gaXQ7IGFuZCB0aGF0IHRoZSB3aWxsIHRvIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGRlcG9zZWQgd2FzIGEgY29weSBvZiB0aGF0IG9yaWdpbmFsOyBhbmQgdGhlbiBmb2xsb3dzIGEgY29weSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3aWxsLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBhcyB0byB3aGV0aGVyIFBob3JtaW8gdGVuZGVyZWQgbWUKICAgICAgICAgICAgICAgICAgICB0aGlzIGNoYWxsZW5nZSBvciBub3QsIGFuZCB3aGV0aGVyIHRoZSB3aWxsIGlzIGdlbnVpbmUgb3Igc3B1cmlvdXMgSSBzYXkgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGFzIHlldDsgSSB3aWxsIGRpc2N1c3MgdGhlc2UgbWF0dGVycyBiZWZvcmUgeW91IHByZXNlbnRseTsgYnV0IEkgd2lsbCB0YWtlIHVwCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlc3RpbW9ueSB0aGV5IGhhdmUgZ2l2ZW4sIHRoYXQgSSByZWZ1c2VkIHRvIG9wZW4gdGhlIGRvY3VtZW50LiBJIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICB5b3UgbG9vayBhdCB0aGUgbWF0dGVyIGluIHRoaXMgd2F54oCUd2hhdCByZWFzb24gd291bGQgYW55b25lIGhhdmUgaGFkCiAgICAgICAgICAgICAgICAgICAgZm9yIHJlZnVzaW5nIHRvIG9wZW4gaXQ/IEluIG9yZGVyLCBvbmUgbWF5IHNheSwgdGhhdCB0aGUgd2lsbCBtaWdodCBub3QgYmUgc2hvd24KICAgICAgICAgICAgICAgICAgICB0byB0aGUganVyeS4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIGFuZCBnb29kLiBJZiB0aGV5IGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBkZXBvc2VkIHRvIHRoZSB3aWxsIGFzIHdlbGwgYXMgdG8gdGhlIGNoYWxsZW5nZSwgdGhlcmUgd291bGQgaGF2ZSBiZWVuIHNvbWUKICAgICAgICAgICAgICAgICAgICByZWFzb24gaW4gbXkgcmVmdXNpbmcgdG8gb3BlbiB0aGUgZG9jdW1lbnQ7IGJ1dCBzaW5jZSB0aGV5IGRlcG9zZWQgdG8gYm90aCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnltZW4gd2VyZSBnb2luZyB0byBoZWFyIHRoZSB3aWxsIGluIGFueSBjYXNlLCB3aGF0IGFkdmFudGFnZSB3YXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICBmb3IgbWUgaW4gcmVmdXNpbmc/IE5vbmUsIGFzc3VyZWRseS4gUXVpdGUgdGhlIGNvbnRyYXJ5LCBtZW4gb2YgQXRoZW5zOyBldmVuIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGhhZCB0ZW5kZXJlZCBubyBjaGFsbGVuZ2UsIGJ1dCBoYWQgbWVyZWx5IHRhbGtlZCBvZiB0aGUgbWF0dGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICBzb21lb25lIGhhZCBkZWxpdmVyZWQgYSBkb2N1bWVudCB0byB0aGVtIGFzIGEgd2lsbCwgPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5pdCB3b3VsZCBoYXZlIGJlZW4gbXkgYnVzaW5lc3MgdG8gdGVuZGVyIHRoZSBjaGFsbGVuZ2UgYW5kIHRvIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBvcGVuIGl0LCBpbiBvcmRlciB0aGF0LCBpZiB0aGUgY29udGVudHMgZGlmZmVyZWQgZnJvbSB0aGUgc3RhdGVtZW50cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXNlIG1lbiBoYWQgbWFkZSBpbiB0aGVpciBkZXBvc2l0aW9uLCBJIG1pZ2h0IGhhdmUgY2FsbGVkIGEgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGJ5c3RhbmRlcnMgYXMgd2l0bmVzc2VzLCBhbmQgaGF2ZSB1c2VkIHRoaXMgZmFjdCBhcyBhIHByb29mIHRoYXQgdGhlIHJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBzdG9yeSB0b28gd2FzIGEgZmFicmljYXRpb247IGJ1dCwgaWYgdGhlIGNvbnRlbnRzIHdlcmUgdGhlIHNhbWUsIEkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBoYXZlIHJlcXVpcmVkIHRoZSBvbmUgcHJlc2VudGluZyBpdCB0byBnaXZlIGV2aWRlbmNlIGhpbXNlbGYuIElmIGhlIGNvbnNlbnRlZCwgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIGhhZCBhIHJlc3BvbnNpYmxlIHdpdG5lc3MsIGFuZCwgaWYgaGUgcmVmdXNlZCwgdGhpcyB2ZXJ5IGZhY3QgYWdhaW4KICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gYSBjb252aW5jaW5nIHByb29mIGZvciBtZSB0aGF0IHRoZSBhZmZhaXIgaGFkIGJlZW4gY29uY29jdGVkLgogICAgICAgICAgICAgICAgICAgIEFuZCBpbiB0aGUgZm9ybWVyIGNhc2UgdGhlIHJlc3VsdCB3b3VsZCBoYXZlIGJlZW4gdGhhdCBJIGhhZCBvbmUgcGVyc29uIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aG9tIHRvIGRlYWwsIHdoZXJlYXMgYWNjb3JkaW5nIHRvIHRoZSBkZXBvc2l0aW9ucyBvZiB0aGVzZSBtZW4gSSBoYXZlIG1hbnkuIElzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYW55b25lIGFtb25nIHlvdSB3aG8gd291bGQgaGF2ZSBjaG9zZW4gdGhlIGxhdHRlciBjb3Vyc2U/IEkgdGhpbmsgbm90IG9uZQogICAgICAgICAgICAgICAgICAgIG9mIHlvdSB3b3VsZCBoYXZlLiA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgeW91IG91Z2h0IG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgaXQgb2YgYW55b25lIGVsc2UgZWl0aGVyLiBGb3IsIG1lbiBvZiBBdGhlbnMsIGluIGFsbCBjb3Vyc2VzIG9mIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGludm9sdmUgYW5nZXIgb3Igc29tZSBnZXR0aW5nIG9mIGdhaW4gb3IgZXhhc3BlcmF0aW9uIG9yIGEgc3Bpcml0IG9mCiAgICAgICAgICAgICAgICAgICAgamVhbG91c3ksIGRpZmZlcmVudCBwZXJzb25zIHdpbGwgYWN0IGluIGRpZmZlcmVudCB3YXlzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgZGlzcG9zaXRpb25zOyBidXQgaW4gYWxsIGNhc2VzIHdoZXJlIG5vbmUgb2YgdGhlc2UgdGhpbmdzIGlzIGludm9sdmVkLAogICAgICAgICAgICAgICAgICAgIGJ1dCBtZXJlbHkgYSBjYWxtIGNhbGN1bGF0aW9uIG9mIG9uZSdzIG93biBpbnRlcmVzdCwgd2hvIHdvdWxkIGJlIHNvIHNlbnNlbGVzcwogICAgICAgICAgICAgICAgICAgIGFzIHRvIGRpc21pc3Mgd2hhdCB3b3VsZCBoZWxwIGhpbSBhbmQgZG8gd2hhdCB3b3VsZCBtYWtlIGl0IG1vcmUgZGlmZmljdWx0IGZvcgogICAgICAgICAgICAgICAgICAgIGhpbSB0byB3aW4gaGlzIGNhc2U/IFlldCBhIGNvdXJzZSBvZiBhY3Rpb24gd2hpY2ggaXMgbmVpdGhlciBuYXR1cmFsIG5vcgogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUsIHdoaWNoLCBpbiBzaG9ydCwgbm8gaHVtYW4gYmVpbmcgd291bGQgaGF2ZSB1bmRlcnRha2Vu4oCUdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdpdG5lc3NlcyBoYXZlIGF0dHJpYnV0ZWQgdG8gbWUuIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3Jlb3ZlciwgaXQgaXMgbm90IG9ubHkgZnJvbSB3aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIHN0YXRlZCBpbiB0aGVpciBkZXBvc2l0aW9uIHJlZ2FyZGluZyBteSByZWZ1c2FsIHRvIG9wZW4gdGhlIGRvY3VtZW50IHRoYXQKICAgICAgICAgICAgICAgICAgICBvbmUgY2FuIHRlbGwgdGhhdCB0aGV5IGFyZSBseWluZywgYnV0IGFsc28gZnJvbSB0aGUgZmFjdCB0aGF0IHRoZXkgaGF2ZSBkZXBvc2VkCiAgICAgICAgICAgICAgICAgICAgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lIGJvdGggdG8gYSBjaGFsbGVuZ2UgYW5kIHRvIGEgd2lsbC4gRm9yIEkgdGhpbmsgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGFsbCBhd2FyZSB0aGF0IGNoYWxsZW5nZXMgd2VyZSBkZXZpc2VkIGZvciBhbGwgdHJhbnNhY3Rpb25zIHdoaWNoIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSB0byBicmluZyBiZWZvcmUgeW91OyA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJzZWN0aW9uIiAvPmZvciBpbnN0YW5jZSwKICAgICAgICAgICAgICAgICAgICBhIG1hbiBtYXkgbm90IGJlIHB1dCB0byB0b3J0dXJlIGluIHlvdXIgcHJlc2VuY2XigJRmb3IgdGhpcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSB0aGF0IHRoZXJlIGJlIGEgY2hhbGxlbmdlOyBhZ2FpbiwgaWYgYW55dGhpbmcgaGFzIGJlZW4gdHJhbnNhY3RlZCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXMgdGFrZW4gcGxhY2Ugc29tZXdoZXJlIG91dCBvZiB0aGUgY291bnRyeSwgaXQgaXMgbmVjZXNzYXJ5IHRoYXQgZm9yIHRoaXMgdG9vCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgc2hvdWxkIGJlIGEgY2hhbGxlbmdlIHRvIGdvIGJ5IHNlYSBvciBsYW5kIHRvIHRoZSBwbGFjZSB3aGVyZSB0aGUgdGhpbmcKICAgICAgICAgICAgICAgICAgICB3YXMgZG9uZTsgYW5kIHNvIGZvciBvdGhlciB0aGluZ3Mgb2YgdGhhdCBzb3J0LiBCdXQgaW4gY2FzZXMgd2hlcmUgaXQgaXMKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSB0byBwcm9kdWNlIHRoZSB0aGluZ3MgdGhlbXNlbHZlcyBiZWZvcmUgeW91ciBleWVzLCB3aGF0IGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgc2ltcGxlciB0aGFuIHRvIHByb2R1Y2UgdGhlbSBwdWJsaWNseT8gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLAogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlciBkaWVkIGF0IEF0aGVucywgdGhlIGFyYml0cmF0aW9uIHRvb2sgcGxhY2UgaW4gdGhlIFBhaW50ZWQgU3RvYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBQYWludGVkIFN0b2Egd2FzIHRoZSBsYXJnZXN0IGFuZCBmaW5lc3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBvcnRpY29lcyBzdXJyb3VuZGluZyB0aGUgYWdvcmEuIEl0IGdvdCBpdHMgbmFtZSBmcm9tIHRoZSBmYW1vdXMKICAgICAgICAgICAgICAgICAgICAgICAgcGFpbnRpbmdzIHdpdGggd2hpY2ggaXRzIHdhbGxzIHdlcmUgYWRvcm5lZC48L25vdGU+IGFuZCB0aGVzZSBtZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlcG9zZWQgdGhhdCBBbXBoaWFzIHByb2R1Y2VkIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IuIFRoZW4sIGlmIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIGdlbnVpbmUsIHRoZSBkb2N1bWVudCBvdWdodCB0byBoYXZlIGJlZW4gcHV0IGludG8gdGhlIGJveCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDUzLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNTMuMjwvYmlibD48L25vdGU+IGFuZCB0aGUgb25lIHByb2R1Y2luZyBpdCBzaG91bGQgaGF2ZSBzbyB0ZXN0aWZpZWQsIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCB0aGUganVyeW1lbiBtaWdodCBoYXZlIHJlYWNoZWQgYSBkZWNpc2lvbiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggYW5kIGFmdGVyIGFuIGluc3BlY3Rpb24gb2YgdGhlIHNlYWxzOyBhbmQgSSwgb24gbXkgcGFydCwgaWYgYW55b25lIHdhcwogICAgICAgICAgICAgICAgICAgIHdyb25naW5nIG1lLCBtaWdodCBoYXZlIHByb2NlZWRlZCBhZ2FpbnN0IGhpbS4gPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IGlzLCBubyBvbmUgcGVyc29uIGhhcyB0YWtlbiB0aGUgd2hvbGUgbWF0dGVyIHVwb24gaGltc2VsZiBvciBnaXZlbgogICAgICAgICAgICAgICAgICAgIHN0cmFpZ2h0Zm9yd2FyZCB0ZXN0aW1vbnksIGFzIG9uZSB3b3VsZCBkbyBpbiB0ZXN0aWZ5aW5nIHRvIHRoZSB0cnV0aCwgYnV0IGVhY2gKICAgICAgICAgICAgICAgICAgICBoYXMgZGVwb3NlZCB0byBhIHBhcnQgb2YgdGhlIHN0b3J5LCBmYW5jeWluZyB0aGF0IGhlIGlzIHZlcnkgY2xldmVyIGFuZCB0aGF0IGZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgcmVhc29uIGhlIHdpbGwgZXNjYXBlIHB1bmlzaG1lbnQs4oCUb25lIG9mIHRoZW0gZGVwb3NpbmcgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGhvbGRzIGEgZG9jdW1lbnQgb24gd2hpY2ggaXMgd3JpdHRlbiDigJx0aGUgd2lsbCBvZiBQYXNpb+KAnTsKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHRoYXQsIGJlaW5nIHNlbnQgYnkgdGhlIGZvcm1lciBwZXJzb24sIGhlIHByb2R1Y2VkIHRoaXMgZG9jdW1lbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIGhhZCBubyBrbm93bGVkZ2UgYXMgdG8gd2hldGhlciBpdCB3YXMgZ2VudWluZSBvciBzcHVyaW91cy4gPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4sIHdobyBhcmUgaGVyZSBpbiBjb3VydCwgdXNpbmcgdGhlIGNoYWxsZW5nZQogICAgICAgICAgICAgICAgICAgIGFzIGEgc2NyZWVuLCBkZXBvc2VkIHRvIGEgd2lsbCBpbiBzdWNoIGEgd2F5IHRoYXQgdGhlIGp1cnltZW4gYmVsaWV2ZWQgdGhpcyB3aWxsCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbXkgZmF0aGVyJ3MsIGFuZCBJIHdhcyBkZWJhcnJlZCBmcm9tIG9idGFpbmluZyBhIGhlYXJpbmcgcmVnYXJkaW5nIG15CiAgICAgICAgICAgICAgICAgICAgd3JvbmdzLCBidXQgaW4gc3VjaCBhIHdheSBhbHNvIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHdvdWxkIG1vc3QgY2xlYXJseSBiZQogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZCBvZiBoYXZpbmcgZ2l2ZW4gZmFsc2UgdGVzdGltb255LiBBbmQgeWV0IHRoaXMgd2FzIHRoZSB2ZXJ5IG9wcG9zaXRlIG9mCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGV5IGludGVuZGVkLjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdGhhdCB5b3UgbWF5IGtub3cKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIHRha2UgdGhlIGRlcG9zaXRpb24gb2YgQ2VwaGlzb3Bob24uPHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZT5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNlcGhpc29waG9uLCBzb24gb2YgQ2VwaGFsaW9uLCBvZiBBcGhpZG5hLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXBoaWRuYSB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZSBBZWFudGlzLjwvbm90ZT4gZGVwb3NlcyB0aGF0IGEgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGxlZnQgaGltIGJ5IGhpcyBmYXRoZXIsIG9uIHdoaWNoIHdhcyBpbnNjcmliZWQg4oCcdGhlIHdpbGwgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFzaW8u4oCdPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIGEgc2ltcGxlCiAgICAgICAgICAgICAgICAgICAgdGhpbmcsIG1lbiBvZiB0aGUganVyeSwgZm9yIHRoZSBvbmUgd2hvIGdhdmUgdGhpcyB0ZXN0aW1vbnkgdG8gYWRkCiAgICAgICAgICAgICAgICAgICAg4oCcYW5kIHRoaXMgaXMgdGhlIGRvY3VtZW50IHdoaWNoIHRoZSBkZXBvbmVudCBleGhpYml0cyzigJ0gYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gcHV0IHRoZSBkb2N1bWVudCBpbnRvIHRoZSBib3guIEJ1dCwgSSBwcmVzdW1lLCBoZSB0aG91Z2h0IHRoYXQgdGhpcyBmYWxzZWhvb2QKICAgICAgICAgICAgICAgICAgICB3b3VsZCBkZXNlcnZlIHlvdXIgaW5kaWduYXRpb24sIGFuZCB0aGF0IHlvdSB3b3VsZCBwdW5pc2ggaGltIGZvciBpdCwgd2hlcmVhcyB0bwogICAgICAgICAgICAgICAgICAgIHRlc3RpZnkgdGhhdCBhIGRvY3VtZW50IGhhZCBiZWVuIGJlcXVlYXRoZWQgdG8gaGltIHdhcyBhIHRyaWZsaW5nIG1hdHRlciBhbmQgb25lCiAgICAgICAgICAgICAgICAgICAgb2Ygbm8gY29uc2VxdWVuY2UuIEFuZCB5ZXQgaXQgaXMgdGhpcyB2ZXJ5IHRoaW5nIHRoYXQgbWFrZXMgdGhlIHdob2xlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIGNsZWFyLCBhbmQgcHJvdmVzIHRoYXQgdGhleSBoYXZlIGNvbmNvY3RlZCBpdC4gPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgdGhlIGluc2NyaXB0aW9uIG9uIHRoZSB3aWxsIGhhZCBiZWVuIOKAnHRoZSBwcm9wZXJ0eSBvZiBQYXNpbwogICAgICAgICAgICAgICAgICAgIGFuZCBQaG9ybWlv4oCdIG9yIOKAnGluIHRoZSBtYXR0ZXIgb2YgUGhvcm1pbyzigJ0gb3IKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgb2YgdGhhdCBzb3J0LCBoZSB3b3VsZCBuYXR1cmFsbHkgaGF2ZSBrZXB0IGl0IGZvciBoaW07IGJ1dCBpZiwgYXMgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgdGVzdGlmaWVkLCB0aGUgaW5zY3JpcHRpb24gd2FzIOKAnHRoZSB3aWxsIG9mIFBhc2lvLOKAnSBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGNlcnRhaW5seSBoYXZlIGFwcHJvcHJpYXRlZCBpdCwga25vd2luZyB0aGF0IEkgd2FzIGFib3V0IHRvIGdvIHRvIGxhdywKICAgICAgICAgICAgICAgICAgICBhbmQga25vd2luZyBmdXJ0aGVyIHRoYXQsIGlmIGl0cyBjb250ZW50cyB3ZXJlIGFzIHJlcHJlc2VudGVkLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBwcmVqdWRpY2lhbCB0byBteSBpbnRlcmVzdHM7IGZvciBJIHdhcyB0aGUgaGVpciwgYW5kIGlmIHRoZSB3aWxsIHdhcyBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlcidzLCBpdCBiZWxvbmdlZCB0byBtZSwgYXMgZGlkIGFsc28gYWxsIHRoZSByZXN0IG9mIG15IGZhdGhlcidzIGVzdGF0ZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIGJ5IGl0cyBoYXZpbmcgYmVlbiBwcm9kdWNlZCB0bwogICAgICAgICAgICAgICAgICAgIFBob3JtaW8sIGJ5IGl0cyBoYXZpbmcgYmVlbiBpbnNjcmliZWQg4oCcdGhlIHdpbGwgb2YgUGFzaW8s4oCdCiAgICAgICAgICAgICAgICAgICAgYW5kIHlldCBpZ25vcmVkIGJ5IG1lLCBpdCBpcyBwcm92ZWQgdGhhdCB0aGUgd2lsbCBpcyBhIGZvcmdlcnkgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IG9mIENlcGhpc29waG9uIGlzIGZhbHNlLiBCdXQgbm8gbW9yZSBvZiBDZXBoaXNvcGhvbjsgaXQgaXMgbm90IHdpdGgKICAgICAgICAgICAgICAgICAgICBoaW0gdGhhdCBJIGhhdmUgdG8gZG8gYXQgcHJlc2VudCwgYW5kIGhlIGhhcyBnaXZlbiBubyB0ZXN0aW1vbnkgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29udGVudHMgb2YgdGhlIHdpbGwuIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICBJIHdvdWxkIGhhdmUgeW91IGNvbnNpZGVyIGhvdyBzdHJvbmcgYSBwcm9vZiB0aGlzIGFsc28gaXMgdGhhdCB0aGVzZSBtZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIGZhbHNlIHRlc3RpbW9ueS4gRm9yIHdoZW4gdGhlIHdpdG5lc3Mgd2hvIHN0YXRlZCB0aGF0IGhlIGhhZCB0aGUgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgb3duIHBvc3Nlc3Npb24gZGlkIG5vdCBkYXJlIHRvIHNheSB0aGF0IHRoZSBvbmUgcHJvZHVjZWQgYnkgUGhvcm1pbyB3YXMgYQogICAgICAgICAgICAgICAgICAgIGNvcHkgb2YgdGhlIG9uZSBpbiBoaXMgb3duIGtlZXBpbmc7IGFuZCB3aGVuIHRoZXNlIG1lbiBjYW5ub3Qgc3RhdGUgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBwcmVzZW50IGluIHRoZSBmaXJzdCBpbnN0YW5jZSBvciB0aGF0IHRoZXkgc2F3IHRoZSBkb2N1bWVudCBvcGVuZWQgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFyYml0cmF0b3IsIGJ1dCBoYXZlIHRoZW1zZWx2ZXMgYWN0dWFsbHkgZGVwb3NlZCB0aGF0IEkgcmVmdXNlZCB0byBvcGVuIGl0LAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgdGVzdGlmaWVkIG5vdyB0aGF0IHRoZSBvbmUgaXMgYSBjb3B5IG9mIHRoZSBvdGhlciwgaXMgbm90IHRoaXMgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGFjY3VzZWQgdGhlbXNlbHZlcyBvZiBmYWxzaWZ5aW5nPyA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZSB0aGFuIGFsbCB0aGlzLCBtZW4gb2YgQXRoZW5zLCBhbnkgbWFuIGJ5IGV4YW1pbmluZwogICAgICAgICAgICAgICAgICAgIHRoZSB3b3JkaW5nIG9mIHRoZSBkZXBvc2l0aW9uIGNhbiBzZWUgdGhhdCBpdCBpcyBub3RoaW5nIGJ1dCBhIGNvbnRyaXZhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXJzIHRvIHRoZSBlbmQgdGhhdCByaWdodGx5IG9yIHdyb25nbHkgaXQgbWF5IGFwcGVhciB0aGF0IG15IGZhdGhlciBtYWRlIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgd2lsbC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCB0YWtlIHRoZSBkZXBvc2l0aW9uIGl0c2VsZiwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhZCwgc3RvcHBpbmcgd2hlcmV2ZXIgSSBiaWQgeW91LCB0aGF0IGZyb20gaXRzIG93biB3b3JkaW5nIEkgbWF5IHByb3ZlIG15CiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBkZXBvc2UgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgVGVpc2lhcywgd2hlbiBQaG9ybWlvIGNoYWxsZW5nZWQgQXBvbGxvZG9ydXMsIGlmIGhlIGRlY2xhcmVkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50IHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvIC4gLiAuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJzZWN0aW9uIiAvPlN0b3AgcmVhZGluZy4gQmVhciBpbiBtaW5kIHRoYXQgdGhlIHdvcmRzIGFyZQogICAgICAgICAgICAgICAgICAgIOKAnG9mIHRoZSB3aWxsIG9mIFBhc2lvLuKAnSBOb3cgcGVyc29ucyB3aG8gd2lzaGVkIHRvIGJlYXIKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzIHRvIHRoZSB0cnV0aOKAlGFzc3VtaW5nIHRoYXQgaXQgaXMgYWJzb2x1dGVseSBlc3RhYmxpc2hlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNoYWxsZW5nZSB3YXMgdGVuZGVyZWQsIHdoaWNoIGl0IHdhcyBub3TigJRvdWdodCB0byBoYXZlIGdpdmVuIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGluIHRoZSBmb2xsb3dpbmcgd2F5LjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIGFnYWluIGZyb20gdGhlIGJlZ2lubmluZy48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+LiAuIC4gZGVwb3NlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMgLiAuIC48L3F1b3RlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2UgZG8gZGVwb3NlOyBmb3Igd2Ugd2VyZSBwcmVzZW50LiBSZWFkIG9uLjxxdW90ZSB0eXBlPSJjb250aW51ZWQiPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+LiAuIC4gd2hlbiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZWQgQXBvbGxvZG9ydXMgLiAuIC48L3F1b3RlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywKICAgICAgICAgICAgICAgICAgICB0b28sIHRoZXkgbWlnaHQgcHJvcGVybHkgaGF2ZSBzdGF0ZWQsIGFzc3VtaW5nIHRoYXQgaGUgcmVhbGx5IHRlbmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuPHF1b3RlIHR5cGU9ImNvbnRpbnVlZCI+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBpZiBoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZCB0aGF0IHRoZSBkb2N1bWVudCB3YXMgbm90IGEgY29weSBvZiB0aGUgd2lsbCBvZiBQYXNpbyAuIC4gLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN0b3AgcmlnaHQKICAgICAgICAgICAgICAgICAgICB0aGVyZS4gVGhlcmUgaXMgbm90IGEgcGVyc29uIGluIHRoZSB3b3JsZCwgSSBwcmVzdW1lLCB3aG8gd291bGQgaGF2ZSBwcm9jZWVkZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIHRoaXMgdGVzdGltb255LCB1bmxlc3MgaGUgaGFkIGJlZW4gcHJlc2VudCB3aGVuIG15IGZhdGhlciBkcmV3IHVwIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGwuIEluc3RlYWQsIGhlIHdvdWxkIGhhdmUgc2FpZCBhdCBvbmNlLCDigJxIb3cgZG8gd2Uga25vdyBpZiB0aGVyZSBpcwogICAgICAgICAgICAgICAgICAgIGFueSB3aWxsIG9mIFBhc2lvJ3M/4oCd4oCUYW5kIGhlIHdvdWxkIGhhdmUgZGVtYW5kZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIFBob3JtaW8gd3JpdGUsIGFzIGluIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNoYWxsZW5nZTog4oCcSWYgSSBkZWNsYXJlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGRvY3VtZW50IHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIHdoaWNoIFBob3JtaW8gc3RhdGVkIHRoYXQgUGFzaW8gaGFkCiAgICAgICAgICAgICAgICAgICAgbGVmdCzigJ3igJRub3Qg4oCcb2YgdGhlIHdpbGwgb2YgUGFzaW8u4oCdIEZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgd2FzIHRvIHRlc3RpZnkgdGhhdCB0aGVyZSB3YXMgYSB3aWxsIO+8iHdoaWNoIHdhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGludGVudGlvbu+8iSwgdGhlIG90aGVyIHRoYXQgUGhvcm1pbyBzYWlkIHRoYXQgdGhlcmUgd2FzLiBBbmQsIEkgdGFrZSBpdCwKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBhIHdvcmxkIG9mIGRpZmZlcmVuY2UgYmV0d2VlbiBhIHRoaW5nJ3MgYmVpbmcgc28sIGFuZCBQaG9ybWlvJ3Mgc2F5aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBpcy4gPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvLAogICAgICAgICAgICAgICAgICAgIGluIG9yZGVyIHRoYXQgeW91IG1heSBrbm93IGhvdyBtYW55IGFuZCBob3cgaW1wb3J0YW50IG9iamVjdHMgd2VyZSB0byBiZSBzZWN1cmVkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGZhYnJpY2F0aW9uIG9mIHRoZSB3aWxsLCBsaXN0ZW4gZm9yIGEgbW9tZW50LiBUaGUgZmlyc3QsIG1lbiBvZiBBdGhlbnMsCiAgICAgICAgICAgICAgICAgICAgd2FzIHRoaXMsIHRoYXQgUGhvcm1pbyBzaG91bGQgZXNjYXBlIHBheWluZyB0aGUgcGVuYWx0eSBmb3IgY29ycnVwdGluZyBvbmUgd2hvbQogICAgICAgICAgICAgICAgICAgIGl0IGlzIG5vdCBwcm9wZXIgZm9yIG1lIHRvIG5hbWUsIGJ1dCB3aG9tIHlvdSBrbm93IG9mIHlvdXJzZWx2ZXMsIGV2ZW4gaWYgSSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBuYW1lIGhlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBhc3N1bXB0aW9uIG9mIHJlbHVjdGFuY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgc3BlYWsgb2YgaGlzIG1vdGhlciBpcyBpbiBnbGFyaW5nIGNvbnRyYXN0IHdpdGggdGhlIGdyb3NzIGFjY3VzYXRpb24gbWFkZQogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhlciBsYXRlciBpbiB0aGUgc3BlZWNoLjwvbm90ZT47IG5leHQsIHRoYXQgaGUgbWlnaHQgZ2V0IHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBvZiBteSBmYXRoZXIncyBwcm9wZXJ0eSB3aGljaCB3YXMgaW4gbXkgbW90aGVyJ3Mga2VlcGluZzsgYW5kIGluIGFkZGl0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhhdCBoZSBtaWdodCBiZWNvbWUgbWFzdGVyIG9mIGV2ZXJ5dGhpbmcgZWxzZSB3aGljaCBiZWxvbmdlZCB0byB1cy4gVGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgaXMgc28sIHlvdSB3aWxsIGJlIGNvbnZpbmNlZCB3aGVuIHlvdSBoZWFyIHRoZSB3aWxsLiBGb3IgaXQgd2lsbCBiZSBmb3VuZCwKICAgICAgICAgICAgICAgICAgICBub3QgbGlrZSB0aGF0IG9mIGEgZmF0aGVyIHdyaXRpbmcgaW4gdGhlIGludGVyZXN0IG9mIGhpcyBzb25zLCBidXQgbGlrZSB0aGF0IG9mCiAgICAgICAgICAgICAgICAgICAgYSBzbGF2ZSB3aG8gaGFzIHNoYW1lZnVsbHkgbWlzdXNlZCB3aGF0IGJlbG9uZ2VkIHRvIGhpcyBtYXN0ZXIsIGFuZCB3aG8gaXMKICAgICAgICAgICAgICAgICAgICBzZWVraW5nIGhvdyBoZSBtYXkgZXNjYXBlIHB1bmlzaG1lbnQuIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZW0gdGhlIHdpbGwgaXRzZWxmLCB0byB3aGljaCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBoYXZlIGRlcG9zZWQgYWxvbmcgd2l0aCB0aGUgY2hhbGxlbmdlOyBhbmQgZG8geW91IG1hcmsgd2VsbCB3aGF0IEkKICAgICAgICAgICAgICAgICAgICAgICAgc2F5LjxxdW90ZSB0eXBlPSJXaWxsIj48dGl0bGU+V2lsbDwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGlzIHRoZSB3aWxsIG9mIFBhc2lvIG9mIEFjaGFybmFlLiBJIGdpdmUgbXkgd2lmZSBBcmNoaXBww6oKICAgICAgICAgICAgICAgICAgICAgICAgdG8gUGhvcm1pbywgYW5kIEkgZ2l2ZSBhcyBkb3dyeSB0byBBcmNoaXBww6ogdGhlIHRhbGVudCBkdWUgdG8gbWUKICAgICAgICAgICAgICAgICAgICAgICAgYXQgUGVwYXJldGh1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBlcGFyZXRodXMgaXMgYSBzbWFsbCBpc2xhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcnRoIG9mIEV1Ym9lYSwgb24gd2hpY2ggd2FzIGFuIEF0aGVuaWFuIGNvbG9ueS4gSXRzIG1vZGVybiBuYW1lIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTa29wZWxvcy48L25vdGU+IHRoZSB0YWxlbnQgZHVlIHRvIG1lIGhlcmUgaW4gQXRoZW5zLCBhIGxvZGdpbmctaG91c2UKICAgICAgICAgICAgICAgICAgICAgICAgd29ydGggb25lIGh1bmRyZWQgbWluYWUsIHRoZSBmZW1hbGUgc2xhdmVzIGFuZCBqZXdlbHJ5LCBhbmQgYWxsIGVsc2UgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBzaGUgaGFzIGluIHRoZSBob3VzZS4gQWxsIHRoZXNlIHRoaW5ncyBJIGdpdmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQXJjaGlwcMOqLjwvcXVvdGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGF2ZSBoZWFyZCwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgQXRoZW5zLCB0aGUgbGFyZ2UgYW1vdW50IG9mIHRoZSBkb3dyeSzigJRhIHRhbGVudCBmcm9tCiAgICAgICAgICAgICAgICAgICAgUGVwYXJldGh1cywgYSB0YWxlbnQgZnJvbSBBdGhlbnMsIGEgbG9kZ2luZy1ob3VzZSB3b3J0aCBhIGh1bmRyZWQgbWluYWUsIGZlbWFsZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBhbmQgamV3ZWxyeSwgYW5kIGFsbCBlbHNlIHRoYXQgc2hlIGhhcyBpbiBoZXIgcG9zc2Vzc2lvbuKAlEkgZ2l2ZQogICAgICAgICAgICAgICAgICAgIGl0IGFsbCwgc2F5cyB0aGUgd2lsbDsgYW5kIGJ5IHRoaXMgY2xhdXNlIGhlIHByZWNsdWRlcyB1cyBldmVuIGZyb20gc2VhcmNoaW5nCiAgICAgICAgICAgICAgICAgICAgZm9yIGFueSBvZiB0aGUgcHJvcGVydHkgdGhhdCB3YXMgbGVmdC4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBsZXQgbWUgc2hvdyB5b3UgdGhlIGxlYXNlIHVuZGVyIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBoYWQgdGFrZW4gdGhlIGJhbmsgZnJvbSBteSBmYXRoZXI7IGZvciBmcm9tIHRoaXMgYWxzbywgc3B1cmlvdXMgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaXQgaXMsIHlvdSB3aWxsIHNlZSB0aGF0IHRoZSB3aWxsIGlzIGZhYnJpY2F0aW9uIHRocm91Z2ggYW5kIHRocm91Z2guIEkgd2lsbCBzZXQKICAgICAgICAgICAgICAgICAgICBmb3J0aCBmb3IgeW91LCBub3QgYSBkaWZmZXJlbnQgbGVhc2UsIGJ1dCB0aGUgb25lIHdoaWNoIFBob3JtaW8gcHJvZHVjZWQsIGluCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlcmUgaXMgYW4gYWRkZWQgY2xhdXNlIHNldHRpbmcgZG93biBteSBmYXRoZXIgYXMgb3dpbmcgUGhvcm5paW8gZWxldmVuCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cyBvbiB0aGUgZGVwb3NpdHMuIDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBoYWQsIEkgdGhpbmssCiAgICAgICAgICAgICAgICAgICAgdGhlIGZvbGxvd2luZyBwdXJwb3NlLiBPZiB0aGUgZWZmZWN0cyBpbiB0aGUgaG91c2UgaGUgbWFkZSBoaW1zZWxmIG1hc3RlciBieSB0aGUKICAgICAgICAgICAgICAgICAgICB3aWxsLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSBoYWQgYmVlbiBnaXZlbiBhcyBhIGRvd3J5IHdpdGggbXkgbW90aGVyLCBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGp1c3QgaGVhcmQ7IGJ1dCB0aGUgbW9uZXkgaW4gdGhlIGJhbmssIGFib3V0IHdoaWNoIGV2ZXJ5Ym9keSBrbmV3LCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGljaCBjb3VsZCBub3QgYmUgaGlkZGVuLCBoZSBnb3QgaW50byBoaXMgaGFuZHMgYnkgcmVwcmVzZW50aW5nIHRoYXQgb3VyIGZhdGhlcgogICAgICAgICAgICAgICAgICAgIG93ZWQgaXQsIHNvIHRoYXQgd2hhdGV2ZXIgc3VtcyBoZSBtaWdodCBiZSBwcm92ZWQgdG8gaGF2ZSBpbiBoaXMgcG9zc2Vzc2lvbiBoZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGNsYWltIHRvIGhhdmUgcmVjZWl2ZWQgaW4gcGF5bWVudC4gWW91IGhhdmUgcGVyaGFwcyBpbWFnaW5lZCwgYmVjYXVzZSBoZQogICAgICAgICAgICAgICAgICAgICAgICBzb2xlY2l6ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPuKAnDxmb3JlaWduIGxhbmc9ImdyZWVrIj7Pg+G9uc67zr/Ouc66zr/PgjwvZm9yZWlnbj4gaXMgYSB3b3JkIG9mIG5hcnJvd2VyIG1lYW5pbmcgdGhhbiA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zrLhvbHPgc6yzrHPgc6/z4I8L2ZvcmVpZ24+LCBhbmQgaXMgYXBwbGllZCBtYWlubHkgdG8gZmF1bHRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHByb251bmNpYXRpb24gb3IgbWlzdGFrZXMgaW4gZ3JhbW1hciwgZXNwZWNpYWxseSBzeW50YXgsIGR1ZSB0byBmb3JlaWduCiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbuKAnSDvvIhTYW5keXPvvIkuIEl0IHdvdWxkLCBob3dldmVyLCBiZSBxdWl0ZQogICAgICAgICAgICAgICAgICAgICAgICBmdXRpbGUgdG8gbG9vayBmb3IgYSBzcGVjaWZpYyBlcnJvciBpbiB0aGUsIHZlcnkgcHJvYmFibHkgc3B1cmlvdXMsIGxlYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkIGluIHRoZSBvcmF0aW9uLjwvbm90ZT4gaW4gaGlzIHNwZWVjaCwgdGhhdCBoZSBpcyBhIGJhcmJhcmlhbiBhbmQgYQogICAgICAgICAgICAgICAgICAgIG1hbiByZWFkaWx5IHRvIGJlIGRlc3Bpc2VkLiBUaGUgZmVsbG93IGlzIGluZGVlZCBhIGJhcmJhcmlhbiBpbiB0aGF0IGhlIGhhdGVzCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvbSBoZSBvdWdodCB0byBob25vcjsgYnV0IGluIHZpbGxhaW55IGFuZCBpbiBicmluZ2luZyBtYXR0ZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1aW48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtZXRhcGhvciBpcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlLWJyZWFraW5nLjwvbm90ZT4gaGUgaXMgc2Vjb25kIHRvIG5vbmUuIDxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIHRoZSBsZWFzZSBhbmQgcmVhZAogICAgICAgICAgICAgICAgICAgIGl04oCUdGhlIGxlYXNlIHdoaWNoIHRoZXkgcHV0IGluLCBhcyB0aGV5IGRpZCB0aGUgd2lsbCwgYnkgbWVhbnMgb2YgYQogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuPHF1b3RlIHR5cGU9IkxlYXNlIG9mIFRoZSBCYW5rIj48dGl0bGU+TGVhc2Ugb2YgVGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYW5rPC90aXRsZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIHRoZSBmb2xsb3dpbmcgdGVybXMgUGFzaW8KICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGxldCB0aGUgYmFuayB0byBQaG9ybWlvOiBQaG9ybWlvIGlzIHRvIHBheSB0byB0aGUgc29ucyBvZiBQYXNpbyBhcwogICAgICAgICAgICAgICAgICAgICAgICByZW50YWwgZm9yIHRoZSBiYW5rIHR3byB0YWxlbnRzIGFuZCBmb3J0eSBtaW5hZSBlYWNoIHllYXIgYWJvdmUgdGhlIGRhaWx5CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVuZGl0dXJlLCBhbmQgaXQgc2hhbGwgbm90IGJlIGxhd2Z1bCBmb3IgUGhvcm1pbyB0byBjYXJyeSBvbiBhIGJhbmtpbmcKICAgICAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MgaW5kZXBlbmRlbnRseSB1bmxlc3MgaGUgZmlyc3Qgb2J0YWlucyB0aGUgY29uc2VudCBvZiB0aGUgc29ucyBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYXNpby4gQW5kIFBhc2lvIG93ZXMgdGhlIGJhbmsgZWxldmVuIHRhbGVudHMgdXBvbiB0aGUgZGVwb3NpdHMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjMyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGlzIHRoZSBhZ3JlZW1lbnQgd2hpY2ggUGhvcm1pbyBwcm9kdWNlZCwgYWxsZWdpbmcgdGhhdCBoZSBoYWQgbGVhc2VkCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhbmsgdXBvbiB0aGVzZSB0ZXJtcy4gWW91IGxlYXJuIGZyb20gaGVhcmluZyBpdCByZWFkIHRoYXQgUGhvcm1pbywgb3ZlciBhbmQKICAgICAgICAgICAgICAgICAgICBhYm92ZSB0aGUgZGFpbHkgZXhwZW5kaXR1cmUsIHdhcyB0byBwYXkgYXMgcmVudCB0d28gdGFsZW50cyBhbmQgZm9ydHkgbWluYWUgZWFjaAogICAgICAgICAgICAgICAgICAgIHllYXIsIGFuZCB0aGF0IGl0IHdhcyBub3QgdG8gYmUgcGVybWl0dGVkIGhpbSB0byBjYXJyeSBvbiBhIGJhbmtpbmcgYnVzaW5lc3MsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIGhlIG9idGFpbmVkIG91ciBjb25zZW50OyBhbmQgdGhlcmUgaXMgYWRkZWQgYXMgYSBmaW5hbCBzdGF0ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAg4oCcUGFzaW8gb3dlcyBlbGV2ZW4gdGFsZW50cyB1cG9uIHRoZSBkZXBvc2l0cy7igJ0gPG1pbGVzdG9uZSBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGlzIHRoZXJlIGFueSBtYW4gd2hvIHdvdWxkIGhhdmUgc3VibWl0dGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHBheW1lbnQgb2Ygc28gbGFyZ2UgYSByZW50YWwgZm9yIHRoZSBjb3VudGVyLCB0aGUgc2l0ZSwgYW5kIHRoZSBib29rcz8gQW5kIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYW55IG1hbiB3aG8gd291bGQgaGF2ZSBlbnRydXN0ZWQgdGhlIHJlc3Qgb2YgdGhlIGFzc2V0cyB0byBhIG1hbiB0aGFua3MgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHRoZSBiYW5rIGhhZCBpbmN1cnJlZCBzbyBncmVhdCBhIGxpYWJpbGl0eT88bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBhc2lvIGlzIHN0YXRlZCBieSBQaG9ybWlvIHRvIGhhdmUgb3dlZCB0aGUgYmFuayBlbGV2ZW4gdGFsZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzYuNCIgdmFsaWQ9InllcyI+RGVtLiAzNi40PC9iaWJsPu+8iS4gVGhpcyBkZWJ0IG1heQogICAgICAgICAgICAgICAgICAgICAgICBiZSBhc3N1bWVkIHRvIGhhdmUgYmVlbiBwcm9wZXJseSBzZWN1cmVkLCBzbyB0aGF0IGl0IHdhcyBpbiBubyBzZW5zZSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmljaXQuIFRoZSBwcmVzZW50IHNwZWFrZXIsIGhvd2V2ZXIsIHJlcHJlc2VudHMgaXQgYXMgc3VjaCwgYW5kIGltcGxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgYmFuayBoYWQgYmVlbiBicm91Z2h0IHRvIGluc29sdmVuY2UgdGhyb3VnaCBQaG9ybWlvJ3MKICAgICAgICAgICAgICAgICAgICAgICAgaW5jb21wZXRlbmNlLjwvbm90ZT4gRm9yLCBpZiB0aGVyZSB3YXMgYSBzaG9ydGFnZSBvZiBzbyBsYXJnZSBhbiBhbW91bnQsIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIGluY3VycmVkIHdoaWxlIFBob3JtaW8gd2FzIG1hbmFnZXIuIEZvciB5b3UgYWxsIGtub3cgdGhhdCwgd2hpbGUgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIGVuZ2FnZWQgaW4gdGhlIGJhbmtpbmcgYnVzaW5lc3MsIFBob3JtaW8gc2F0IGF0IHRoZSBjb3VudGVyIGFuZCB3YXMgaGlzCiAgICAgICAgICAgICAgICAgICAgbWFuYWdlcjsgc28gdGhhdCBoZSBvdWdodCByYXRoZXIgdG8gYmUgaW4gdGhlIG1pbGw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNsYXZlcyB3ZXJlIG9mdGVuIGNvbmRlbW5lZCB0byB0aGUgaGVhdnkgbGFib3Igb2YgdHVybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWlsbHN0b25lLjwvbm90ZT4gdGhhbiB0byBiZWNvbWUgbWFzdGVyIG9mIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBJIHBhc3Mgb3ZlciB0aGlzIGFuZCBhbGwgZWxzZQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBtaWdodCBmaW5kIHRvIHNheSBhYm91dCB0aGUgZWxldmVuIHRhbGVudHMsIHRvIHNob3cgdGhhdCBteSBmYXRoZXIgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IG93ZSB0aGVtIGJ1dCB0aGF0IFBob3JtaW8gc2VjcmV0bHkgYXBwcm9wcmlhdGVkIHRoZW0uPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgbGV0IG1lIHJlbWluZCB5b3Ugb2YgdGhlIHB1cnBvc2UgZm9yIHdoaWNoIEkgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzZSwgbmFtZWx5LCB0byBwcm92ZSB0aGF0IHRoZSB3aWxsIGlzIHNwdXJpb3VzLiBGb3IgaXQgc3RhbmRzIHdyaXR0ZW4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGVhc2UgdGhhdCBpdCBzaGFsbCBub3QgYmUgbGF3ZnVsIGZvciBQaG9ybWlvIHRvIGVuZ2FnZSBpbiBiYW5raW5nIGJ1c2luZXNzLAogICAgICAgICAgICAgICAgICAgIHVubGVzcyBoZSBvYnRhaW5zIG91ciBjb25zZW50LiBUaGlzIGNsYXVzZSBhYnNvbHV0ZWx5IHByb3ZlcyB0aGUgd2lsbCB0byBiZQogICAgICAgICAgICAgICAgICAgIHNwdXJpb3VzLiBGb3Igd2hhdCBtYW4sIHdobyBoYWQgdGFrZW4gcHJlY2F1dGlvbnMgdGhhdCB0aGUgcHJvZml0cyB3aGljaCBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgbWFrZSBieSBiYW5raW5nIHNob3VsZCBhY2NydWUgdG8gaGlzIG93biBjaGlsZHJlbiBhbmQgbm90IHRvIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCBhbmQgdG8gc2VjdXJlIHRoaXMgZW5kIGhhZCBzdGlwdWxhdGVkIHRoYXQgaXQgc2hvdWxkIG5vdCBiZSBwZXJtaXR0ZWQKICAgICAgICAgICAgICAgICAgICBoaW0gdG8gZW5nYWdlIGluIGJhbmtpbmcgZm9yIGhpbXNlbGYsIGxlc3QgaGlzIGludGVyZXN0cyBtaWdodCBiZSBzZXBhcmF0ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIG91cnPigJR3aGF0IG1hbiwgSSBhc2ssIGluIHRoZXNlIGNpcmN1bXN0YW5jZXMgd291bGQgaGF2ZSBwcm92aWRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBzaG91bGQgZ2V0IHBvc3Nlc3Npb24gb2Ygd2hhdCBoZSBoYWQgaGltc2VsZiB3b24gYnkgaGlzIGxhYm9yIGFuZCBsZWZ0CiAgICAgICAgICAgICAgICAgICAgaW4gaGlzIGhvdXNlPyA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3b3VsZCBoZSBoYXZlIGJlZ3J1ZGdlZCBoaW0KICAgICAgICAgICAgICAgICAgICB0aGUgYmFua2luZyBidXNpbmVzcywgaW4gd2hpY2ggaGUgbWlnaHQgaGF2ZSBnaXZlbiBoaW0gYSBzaGFyZSB3aXRob3V0IGRpc2dyYWNlLAogICAgICAgICAgICAgICAgICAgIGFuZCB5ZXQgaGF2ZSBnaXZlbiBoaW0gaGlzIHdpZmUsIGEgYmVxdWVzdCBkaXNncmFjZWZ1bCBhYm92ZSBhbGwgb3RoZXJzPyBZZXMsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgcmVjZWl2aW5nIGZyb20geW91IHRoZSBnaWZ0IG9mIGNpdGl6ZW5zaGlwLCBoZSBnYXZlIGhpcyB3aWZlIO+8iGlmCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkIGhlIGdhdmUgaGVy77yJIGFzIGEgc2xhdmUgZ2l2aW5nIHRvIGhpcyBtYXN0ZXIsIGFuZCBub3QsIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5LCBhcyBhIG1hc3RlciB0byBhIHNsYXZlLCBhbmQgaGUgYWRkZWQgc3VjaCBhIGRvd3J5IGFzIG5vIG1hbiBpbiBBdGhlbnMKICAgICAgICAgICAgICAgICAgICB3YXMgZXZlciBrbm93biB0byBnaXZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1vdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBicm91Z2h0IHRvIGhlciBodXNiYW5kIGEgZG93cnkgb2Ygb25seSA4MCBtaW5hZSDvvIg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy41IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU8L2JpYmw+77yJOyB0aGUgbW90aGVyIG9mIE1hbnRpdGhldXMgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIDYwIG1pbmFlIO+8iDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjYiIHZhbGlkPSJ5ZXMiPkRlbS4gNDAuNjwvYmlibD7vvIk7IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdHdvIGRhdWdodGVycyBvZiBQb2x5ZXVjdHVzIGRvd3JpZXMgb2YgNDAgbWluYWUgZWFjaCDvvIg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MS4zIiB2YWxpZD0ieWVzIj5EZW0uIDQxLjM8L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MS4yNyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDEuMjc8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjM2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQsIHRvIGhhdmUgYmVlbiBob25vcmVkIHdpdGggdGhlIGhhbmQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgbWlzdHJlc3Mgd2FzIG9mIGl0c2VsZiBlbm91Z2ggdG8gbWFrZSB0aGlzIGZlbGxvdyBjb250ZW50LCB3aGVyZWFzIGluIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyJ3MgY2FzZSwgZXZlbiBpZiBoZSByZWNlaXZlZCBhcyBtdWNoIG1vbmV5IGFzIHRoZXNlIHBlb3BsZSBhbGxlZ2UgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGdhdmUsIGl0IHdhcyBub3QgcmVhc29uYWJsZSBmb3IgaGltIHRvIG1ha2UgdGhpcyBhcnJhbmdlbWVudC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gcmVhc29uYWJsZSBmb3IgaGltIHRvIGxlYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyB3aWZlIHRvIGhpcyBmb3JtZXIgc2xhdmUgZXZlbiBpZiBoZSBoYWQgcmVjZWl2ZWQgYXMgYSBicmliZSB0aGUgbGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgc3VtIHdoaWNoIGhlIGlzIGFsbGVnZWQgdG8gaGF2ZSBnaXZlbiBhcyBhIG1hcnJpYWdlIHBvcnRpb24uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIE5ldmVydGhlbGVzcywgdG8gdGhpbmdzIHdoaWNoIGFyZSBwcm92ZWQgdG8gYmUgZmFsc2UgYnkgdGhlIHByb2JhYmlsaXRpZXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdGVzIGFuZCB0aGUgZmFjdHMsIHRvIHRoZXNlIHRoaXMgbWFuIFN0ZXBoYW51cyBoYXMgbm90IGhlc2l0YXRlZCB0byBkZXBvc2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVuIGhlCiAgICAgICAgICAgICAgICAgICAgZ29lcyBhYm91dCwgc2F5aW5nIHRoYXQgTmljb2NsZXMgdGVzdGlmaWVkIHRoYXQgaGUgaGFkIHNlcnZlZCBhcyBndWFyZGlhbiB1bmRlcgogICAgICAgICAgICAgICAgICAgIHRoZSB3aWxsLCBhbmQgUGFzaWNsZXMgdGhhdCBoZSBoYWQgbGl2ZWQgYXMgd2FyZCB1bmRlciB0aGUgd2lsbC4gQnV0IGZvciBteSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgSSBob2xkIHRoYXQgdGhlc2UgdmVyeSBmYWN0cyBhcmUgcHJvb2ZzIHRoYXQgbmVpdGhlciB0aGVzZSB3aXRuZXNzZXMgbm9yIHRob3NlCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0ZXN0aWZpZWQgdG8gdGhlIHRydXRoLiBGb3IgYSBwZXJzb24gd2hvIHRlc3RpZmllcyB0aGF0IGhlIHNlcnZlZCBhcwogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuIHVuZGVyIGEgd2lsbCBzaG91bGQgY2VydGFpbmx5IGtub3cgd2hhdCB0aGUgbmF0dXJlIG9mIHRoZSB3aWxsIHdhcywgYW5kCiAgICAgICAgICAgICAgICAgICAgYSBwZXJzb24gd2hvIHRlc3RpZmllcyB0aGF0IGhlIGxpdmVkIGFzIHdhcmQgdW5kZXIgYSB3aWxsIHNob3VsZCBjZXJ0YWlubHkga25vdwogICAgICAgICAgICAgICAgICAgIHdoYXQgdGhlIG5hdHVyZSBvZiB0aGUgd2lsbCB3YXMuIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+V2h5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcmxkLCB0aGVuLCBTdGVwaGFudXMsIGRpZCB5b3UgcGVvcGxlIGRlcG9zZSB0byB0aGUgd2lsbCB1bmRlciB0aGUgZm9ybSBvZiBhCiAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlLCBpbnN0ZWFkIG9mIGxlYXZpbmcgdGhlIG1hdHRlciB0byB0aGVtPyBJZiB0aGV5IG9uIHRoZWlyIHBhcnQgc2hhbGwKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlIHRoYXQgdGhleSBkbyBub3Qga25vdyB0aGUgY29udGVudHMgb2YgdGhlIHdpbGwsIGhvdyBpcyBpdCBwb3NzaWJsZSBmb3IKICAgICAgICAgICAgICAgICAgICB5b3UgdG8ga25vdyB0aGVtLCB5b3Ugd2hvIGhhdmUgbmV2ZXIgaW4gYW55IHdheSBiZWVuIGNvbm5lY3RlZCB3aXRoIHRoZSBtYXR0ZXI/CiAgICAgICAgICAgICAgICAgICAgV2h5LCBwcmF5LCBpcyBpdCB0aGF0IG9uZSBncm91cCBvZiB3aXRuZXNzZXMgdGVzdGlmaWVkIHRvIHRoZXNlIGZhY3RzLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGdyb3VwIHRvIHRob3NlPyBJdCBpcyBhcyBJIGhhdmUgYWxyZWFkeSB0b2xkIHlvdTogdGhleSBkaXZpZGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGZyYXVkLiBUaGUgb25lIHNvIHRlc3RpZnlpbmcgc2F3IG5vIGRhbmdlciBpbiBkZXBvc2luZyB0aGF0IGhlIHNlcnZlZCBhcwogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuIHVuZGVyIHRoZSB3aWxsLCBvciB0aGF0IGhlIGxpdmVkIGFzIHdhcmQgdW5kZXIgdGhlIHdpbGwsIDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9InNlY3Rpb24iIC8+ZWFjaCBvbmUgb2YgdGhlbSBvbWl0dGluZyB0byBzdGF0ZSB3aGF0IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiBpbiB0aGUgd2lsbCBieSBQaG9ybWlvLOKAlG5vIGRhbmdlciBpbiBkZXBvc2luZyB0aGF0IG9uZSdzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGhhZCBsZWZ0IGhpbSBhIGRvY3VtZW50IHdpdGggdGhlIHdvcmQg4oCcd2lsbOKAnSB3cml0dGVuCiAgICAgICAgICAgICAgICAgICAgb24gaXQsIG9yIGFueXRoaW5nIG9mIHRoYXQgc29ydC4gQnV0IHRvIHRlc3RpZnkgdG8gdGhlIGV4aXN0ZW5jZSBvZiBhIHdpbGwgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB3ZXJlIGludm9sdmVkIHRoZSB0aGVmdCBvZiBzdWNoIHZhc3Qgc3VtcywgdGhlIGNvcnJ1cHRpb24gb2YgYSBsYWR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZSBvZiBhIG1pc3RyZXNzIHdpdGggaGVyIHNsYXZlLCBtYXR0ZXJzIHdoaWNoIGVudGFpbGVkIHN1Y2ggc2hhbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzZ3JhY2XigJRub2JvZHkgd2FzIHJlYWR5IHRvIGRvIHRoaXMgc2F2ZSB0aGVzZSBtZW4gd2hvIGdvdCB1cCB0aGUKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2U7IGFuZCBmcm9tIHRoZW0gaXQgaXMgcmlnaHQgdG8gZXhhY3QgdGhlIHBlbmFsdHkgZm9yIHRoZSB3aG9sZSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgdmlsbGFpbm91cyBmcmF1ZC4gPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgbWVuIG9mIEF0aGVucywgdGhhdCBpdCBtYXkgYmUgbWFkZSBjbGVhciB0byB5b3UgdGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgZmVsbG93IFN0ZXBoYW51cyBoYXMgZ2l2ZW4gZmFsc2UgdGVzdGltb2554oCUbWFkZSBjbGVhciBub3QgbWVyZWx5IGJ5IG15CiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbnMgYW5kIHByb29mcywgYnV0IGFsc28gYnkgdGhlIGFjdHMgb2YgdGhlIHBlcnNvbiB3aG8gYnJvdWdodCBoaW0KICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIGFzIGEgd2l0bmVzc+KAlEkgd2lzaCB0byB0ZWxsIHlvdSB3aGF0IHRoYXQgcGVyc29uIGhhcyBkb25lLiBBcwogICAgICAgICAgICAgICAgICAgIEkgc2FpZCBhdCB0aGUgYmVnaW5uaW5nIG9mIG15IHNwZWVjaCwgSSBzaGFsbCBzaG93IHRoYXQgdGhleSBhcmUgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlcnMuIEluIHRoZSBzdWl0IGluIHdoaWNoIHRoaXMgdGVzdGltb255IHdhcyBnaXZlbiwgUGhvcm1pbyBlbnRlcmVkIGEKICAgICAgICAgICAgICAgICAgICBzcGVjaWFsIHBsZWEgdG8gZXN0b3AgbWUgb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBzdWl0IHdhcyBub3QgYWRtaXNzaWJsZSwKICAgICAgICAgICAgICAgICAgICBhbGxlZ2luZyB0aGF0IEkgaGFkIHJlbGVhc2VkIGhpbSBmcm9tIGFsbCBjbGFpbXMuIDxtaWxlc3RvbmUgbj0iNDEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEkgbXlzZWxmIGtub3cgdGhhdCB0aGlzIGlzIGZhbHNlLCBhbmQgSSBzaGFsbCBwcm92ZSBpdCBzbyB3aGVuIEkKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkIGFnYWluc3QgdGhvc2Ugd2hvIGdhdmUgdGhpcyB0ZXN0aW1vbnk7IGJ1dCBTdGVwaGFudXMgaXMgbm90IGF0IGxpYmVydHkKICAgICAgICAgICAgICAgICAgICB0byBzYXkgaXQgaXMgZmFsc2UuIElmLCB0aGVuLCB5b3Ugc2hvdWxkIGJlbGlldmUgaW4gdGhlIGdlbnVpbmVuZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UsIHRoaXMsIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCB3b3VsZCBwcm92ZSB0aGF0IHRoZSBmZWxsb3cgaGFzIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgdGVzdGltb255LCBhbmQgaGFzIGRlcG9zZWQgdG8gYSB3aWxsIHRoYXQgaXMgZm9yZ2VkLiBGb3Igd2hvIHdvdWxkIGJlIHNvCiAgICAgICAgICAgICAgICAgICAgc2Vuc2VsZXNzIGFzIHRvIGdpdmUgYSByZWxlYXNlIGluIHRoZSBwcmVzZW5jZSBvZiB3aXRuZXNzZXMsIHRoYXQgaGlzIGRpc2NoYXJnZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGJpbmRpbmcsIGFuZCB5ZXQgdG8gc3VmZmVyIHRoZSBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQsIHRoZSB3aWxsLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgZG9jdW1lbnRzIHJlZ2FyZGluZyB3aGljaCBoZSBnYXZlIHRoZSByZWxlYXNlLCB0byByZW1haW4gdW5kZXIgc2VhbCBhcwogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlIGFnYWluc3QgaGltc2VsZj8gPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BlY2lhbCBwbGVhLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgY29udHJhZGljdHMgYWxsIHRoZSBldmlkZW5jZSwgYW5kIHRoZSBsZWFzZSB3aGljaCBJIGp1c3Qgbm93IHJlYWQgdG8KICAgICAgICAgICAgICAgICAgICB5b3UgY29udHJhZGljdHMgdGhpcyB3aWxsOyBub3Qgb25lIG9mIHRoZWlyIGFjdHMgaXMgZWl0aGVyIHJlYXNvbmFibGUgb3IKICAgICAgICAgICAgICAgICAgICBzdHJhaWdodGZvcndhcmQgb3IgY29uc2lzdGVudCB3aXRoIGl0c2VsZi4gSW4gdGhpcyBtYW5uZXIgdGhlaXIgd2hvbGUgc3RvcnkgaXMKICAgICAgICAgICAgICAgICAgICBzaG93biB0byBiZSBhIGZpY3Rpb24gYW5kIGEgZnJhdWQuIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IHRoZSBzdGF0ZW1lbnRzIGluIHRoZSBkZXBvc2l0aW9uIGFyZSB0cnVlIEkgaG9sZAogICAgICAgICAgICAgICAgICAgIHRoYXQgbmVpdGhlciBTdGVwaGFudXMgaGltc2VsZiBub3IgYW55b25lIGVsc2UgaW4gaGlzIGJlaGFsZiB3aWxsIGJlIGFibGUgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZS4gSSBoZWFyLCBob3dldmVyLCB0aGF0IGhlIGlzIHByZXBhcmVkIHRvIG1ha2Ugc29tZSBzdWNoIHN0YXRlbWVudCBhcyB0aGlzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaXMgcmVzcG9uc2libGUgZm9yIGEgY2hhbGxlbmdlLCBub3QgZm9yIGEgZGVwb3NpdGlvbiwgYW5kIHRoYXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgaGVsZCB0byBhY2NvdW50LCBub3QgZm9yIGV2ZXJ5dGhpbmcgd3JpdHRlbiBpbiBpdCwgYnV0IGZvciB0d28gdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgb25seeKAlHdoZXRoZXIgUGhvcm1pbyB0ZW5kZXJlZCBtZSB0aGlzIGNoYWxsZW5nZSBvciBub3QsIGFuZCB3aGV0aGVyIEkKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIGl0OyB0aGVzZSBtYXR0ZXJzIGFuZCBubyBtb3JlLCBoZSB3aWxsIHNheSwgd2VyZSBpbmNsdWRlZCBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uOyBhcyBmb3IgdGhlIHJlc3QsIFBob3JtaW8gY292ZXJlZCB0aGVtIGluIGhpcyBjaGFsbGVuZ2UsIGJ1dCB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIHRydWUgb3Igbm90IGl0IHdhcyBub3QgdGhlIGJ1c2luZXNzIG9mIHRoZSB3aXRuZXNzIHRvIGlucXVpcmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNDQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gYW5zd2VyIHRvIHRoaXMgYXJndW1lbnQgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbidzIGltcHVkZW5jZSBpdCBpcyBiZXR0ZXIgdGhhdCBJIHNheSBhIGZldyB3b3JkcyB0byB5b3UgaW4gYWR2YW5jZSwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBiZSBub3QgdGFrZW4gYXQgdW5hd2FyZXMgYW5kIG1pc2xlZC4gSW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGhlIHRyaWVzIHRvIGJyaW5nCiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCB0aGUgYXJndW1lbnQgdGhhdCBoZSBpcyBub3QgcmVzcG9uc2libGUgZm9yIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLCBiZWFyIGluIG1pbmQgdGhhdCB0aGUgcmVhc29uIHdoeSB0aGUgbGF3IHJlcXVpcmVzIHBlb3BsZSB0byBnaXZlCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgaW4gd3JpdHRlbiBmb3JtIGlzIHRoYXQgaXQgbWF5IG5vdCBiZSBvcGVuIHRvIHRoZW0gdG8gc3RyaWtlIG91dCBhbnkKICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHdoYXQgaGFzIGJlZW4gd3JpdHRlbiwgb3IgYWRkIGFueXRoaW5nIHRvIGl0LiBIZSBzaG91bGQgYXQgdGhlIHRpbWUgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIHRoZSBlcmFzdXJlIG9mIHRoZSBzdGF0ZW1lbnRzIHRvIHdoaWNoIGhlIHdpbGwgbm93IGRlbnkgaGF2aW5nIGRlcG9zZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCB0cnkgbm93IHRvIGJyYXplbiBpdCBvdXQsIHdoaWxlIHRoZXkgc3RhbmQgaW4gdGhlIGRvY3VtZW50LiA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBjb25zaWRlciB0aGlzIHRvbywgd2hldGhlciB5b3Ugd291bGQgc3VmZmVyCiAgICAgICAgICAgICAgICAgICAgbWUgaW4geW91ciBwcmVzZW5jZSB0byB0YWtlIHRoZSBkb2N1bWVudCBhbmQgYWRkIHRvIGl0LiBPZiBjb3Vyc2UgeW91IHdvdWxkIG5vdC4KICAgICAgICAgICAgICAgICAgICBXZWxsLCB0aGVuLCBuZWl0aGVyIGlzIGl0IGZpdHRpbmcgdG8gc3VmZmVyIGhpbSB0byBzdHJpa2Ugb3V0IGFueSBvZiBpdHMKICAgICAgICAgICAgICAgICAgICBjb250ZW50cy4gRm9yIHdobyB3aWxsIGV2ZXIgYmUgY29udmljdGVkIG9mIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnksIGlmIGhlIGlzIHRvCiAgICAgICAgICAgICAgICAgICAgZGVwb3NlIHRvIHdoYXQgaGUgcGxlYXNlcywgYW5kIGJlIGFjY291bnRhYmxlIG9ubHkgZm9yIHdoYXQgaGUgcGxlYXNlcz8gTm8sIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdyBkb2VzIG5vdCB0aHVzIG1ha2UgYSBkaXN0aW5jdGlvbiBpbiB0aGVzZSBtYXR0ZXJzLCBhbmQgeW91IG91Z2h0IG5vdCB0bwogICAgICAgICAgICAgICAgICAgIGxpc3RlbiB0byBzdWNoIGEgdGhpbmcgZWl0aGVyLiBUaGUgc3RyYWlnaHRmb3J3YXJkIGFuZCBob25lc3QgY291cnNlIGlzIHRoaXM6CiAgICAgICAgICAgICAgICAgICAg4oCcV2hhdCBzdGFuZHMgd3JpdHRlbj8gVG8gd2hhdCBoYXZlIHlvdSBkZXBvc2VkPyBTaG93IHRoYXQgdGhpcyBpcwogICAgICAgICAgICAgICAgICAgIHRydWUuIEZvciB5b3UgaGF2ZSB3cml0dGVuIGluIHlvdXIgcGxlYSBpbiBhbnN3ZXIgdG8gdGhlIGNvbXBsYWludCB0aGVzZSB3b3JkcywKICAgICAgICAgICAgICAgICAgICAnSSBoYXZlIGdpdmVuIHRydWUgdGVzdGluaW9ueSBpbiB0ZXN0aWZ5aW5nIHRvIHdoYXQgaXMgY29udGFpbmVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24n4oCUbm90ICd0byB0aGlzIG9yIHRoYXQgaW4gdGhlIGRlcG9zaXRpb24uJ+KAnQogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjQ2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgaXMgc28sIHRha2UsIHBsZWFzZSwgdGhlIHBsZWEgaXRzZWxmLiBSZWFkIGl0LjxxdW90ZSB0eXBlPSJDb21wbGFpbnQiPjx0aXRsZT5Db21wbGFpbnQgYW5kIENvdW50ZXItUGxlYTwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcG9sbG9kb3J1cywgc29uIG9mIFBhc2lvLCBvZiBBY2hhcm5hZSwgc3VlcyBTdGVwaGFudXMsIHNvbiBvZiBNZW5lY2xlcywKICAgICAgICAgICAgICAgICAgICAgICAgb2YgQWNoYXJuYWUsIGZvciBmYWxzZSB0ZXN0aW1vbnk7IGRhbWFnZXMgb25lIHRhbGVudC4gU3RlcGhhbnVzIGdhdmUgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGFnYWluc3QgbWUgaW4gdGVzdGlmeWluZyB0byB0aGF0IHdoaWNoIGlzIGNvbnRhaW5lZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgZ2F2ZSB0cnVlIHRlc3RpbW9ueSBpbgogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5aW5nIHRvIHRoYXQgd2hpY2ggaXMgY29udGFpbmVkIGluIHRoZSByZWNvcmQuPC9xdW90ZT48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgaXMgdGhlIHBsZWEgd2hpY2ggdGhlIGRlZmVuZGFudCBoaW1zZWxmIGhhcwogICAgICAgICAgICAgICAgICAgIGVudGVyZWQuIFlvdSBtdXN0IGtlZXAgaXQgaW4gbWluZCwgYW5kIG5vdCByZWdhcmQgdGhlIGRlY2VpdGZ1bCBsYW5ndWFnZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHdpbGwgc29vbiBiZSBhZGRyZXNzZWQgdG8geW91IGFzIGJlaW5nIG1vcmUgd29ydGh5IG9mIGNyZWRlbmNlIHRoYW4gdGhlIGxhd3MgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgZGVmZW5kYW50IGhhcyB3cml0dGVuIGluIGhpcyBvd24gcGxlYS4gPG1pbGVzdG9uZSBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgbGVhcm4gdGhhdCB0aGV5IGFyZSBnb2luZyB0byBzcGVhayBhYm91dAogICAgICAgICAgICAgICAgICAgIG15IG9yaWdpbmFsIHN1aXQgYW5kIHRvIGRlbm91bmNlIGl0IGFzIGJhc2VsZXNzIGFuZCBtYWxpY2lvdXMuIEJ1dCBJIG9uIG15IHBhcnQKICAgICAgICAgICAgICAgICAgICBoYXZlIGFscmVhZHkgbWVudGlvbmVkIHRvIHlvdSBhbmQgZXhwbGFpbmVkIGluIGRldGFpbCB0aGUgbWFubmVyIGluIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBjb25jb2N0ZWQgdGhlIGxlYXNlLCBpbiBvcmRlciB0byBnZXQgaW50byBoaXMgcG9zc2Vzc2lvbiB0aGUKICAgICAgICAgICAgICAgICAgICBiYW5raW5nLXN0b2NrLCBhbmQgSSBzaG91bGQgYmUgdW5hYmxlIHRvIHNwZWFrIG9mIHRoZXNlIG90aGVyIG1hdHRlcnMgYW5kIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdGltZSBjb252aWN0IHRoZXNlIG1lbiBvZiBnaXZpbmcgZmFsc2UgdGVzdGltb255OyBmb3IgdGhlIGFtb3VudCBvZiB3YXRlcgogICAgICAgICAgICAgICAgICAgIGFsbG90dGVkIG1lIGlzIG5vdCBzdWZmaWNpZW50LiA8bWlsZXN0b25lIG49IjQ4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgY291bGQgbm90IGluIGZhaXJuZXNzIGJlIHdpbGxpbmcgdG8gbGlzdGVuIHRvIHRoZW0gaW4gcmVnYXJkIHRvIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyB5b3Ugd2lsbCBzZWUgYXQgb25jZSwgaWYgeW91IHJlZmxlY3QgdGhhdCBpdCBpcyBubyBkaWZmaWN1bHQgbWF0dGVyIHRvCiAgICAgICAgICAgICAgICAgICAgc3BlYWsgbm93IGFib3V0IHN1YmplY3RzIGNvbmNlcm5pbmcgd2hpY2ggbm8gY2hhcmdlIGlzIG1hZGUsIGp1c3QgYXMgaXQgd2FzIG5vCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0IG1hdHRlciBmb3IgUGhvcm1pbyB0byBnZXQgaGltc2VsZiBhY3F1aXR0ZWQgYnkgcmVhZGluZyBmYWxzZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLiBIb3dldmVyLCBubyBtYW4gd291bGQgc2F5IHRoYXQgZWl0aGVyIG9mIHRoZXNlIGNvdXJzZXMgaXMgcmlnaHQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgY291cnNlIHJhdGhlciB3aGljaCBJIGFtIGFib3V0IHRvIHByb3Bvc2UuIDxtaWxlc3RvbmUgbj0iNDkiIHVuaXQ9InNlY3Rpb24iIC8+TGlzdGVuLCBhbmQganVkZ2UuIEkgZGVtYW5kIHRoYXQgdGhleSBkbyBub3Qgbm93IHNlZWsgZm9yIHRoZSBwcm9vZnMKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgbXkgY2hhcmdlcywgcHJvb2ZzIHdoaWNoIHNob3VsZCBoYXZlIGJlZW4gbWVudGlvbmVkIGF0IHRoZSBmb3JtZXIKICAgICAgICAgICAgICAgICAgICB0cmlhbCwgYnV0IG9mIHdoaWNoIHRoZXkgZGVwcml2ZWQgbWU7IGJ1dCB0aGF0IHRoZXkgcHJvdmUgdGhhdCB0aGUgdGVzdGltb255IGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhleSBkZXByaXZlZCBtZSBvZiB0aGVtIHdhcyB0cnVlLiBJZiwgd2hlbiBJIGJyaW5nIGluIG15IHN1aXQsIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgdG8gZGVtYW5kIHRoYXQgSSByZWZ1dGUgdGhlaXIgdGVzdGltb255LCBhbmQsIHdoZW4gSSBwcm9jZWVkIGFnYWluc3QgdGhhdCwgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSB0byBiaWQgbWUgc3BlYWsgcmVnYXJkaW5nIG15IG9yaWdpbmFsIGNoYXJnZXMsIHdoYXQgdGhleSBwcm9wb3NlIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIHJpZ2h0IG5vciBpbiB5b3VyIGludGVyZXN0LiA8bWlsZXN0b25lIG49IjUwIiB1bml0PSJzZWN0aW9uIiAvPkZvciB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIHN3b3JuIHRvIGdpdmUgYSB2ZXJkaWN0LCBub3QgaW4gcmVnYXJkIHRvIG1hdHRlcnMgdXBvbiB3aGljaCB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgYXNrcyB5b3VyIGRlY2lzaW9uLCBidXQgaW4gcmVnYXJkIHRvIHRob3NlIG9ubHkgd2hpY2ggYXJlIHJhaXNlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGlvbi4gVGhlIGNhdXNlIG9mIGFjdGlvbiBtdXN0IGJlIG1hZGUgY2xlYXIgYnkgdGhlIGNvbXBsYWludCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dG9yLCBhbmQgdGhpcyBpbiBteSBjYXNlIGlzIGEgc3VpdCBhZ2FpbnN0IHRoaXMgbWFuIGZvciBmYWxzZSB0ZXN0aW1vbnkuCiAgICAgICAgICAgICAgICAgICAgTGV0IGhpbSBub3QsIHRoZW4sIGxlYXZlIHRoaXMgYW5kIHRhbGsgYWJvdXQgbWF0dGVycyByZWdhcmRpbmcgd2hpY2ggSSBhbSBub3QKICAgICAgICAgICAgICAgICAgICBzdWluZyBoaW07IGFuZCBkbyB5b3UsIGlmIGhlIGlzIHNvIHNoYW1lbGVzcywgcmVmdXNlIHRvIHBlcm1pdCBpdC4gPG1pbGVzdG9uZSBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgaW1hZ2luZSB0aGF0LCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBubyBqdXN0IGFyZ3VtZW50IHRvIGFkdmFuY2Ugb24gYW55IHBvaW50LCBoZSB3aWxsIGhhdmUgcmVjb3Vyc2UgdG8gdGhpcyBkZWZlbmNlCiAgICAgICAgICAgICAgICAgICAgYWxzb+KAlHRoYXQgaXQgaXMgYWJzdXJkIGZvciBtZSwgYWZ0ZXIgaGF2aW5nIGJlZW4gd29yc3RlZCBpbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzcGVjaWFsIHBsZWEsIHRvIHN1ZSB0aG9zZSB3aG8gZ2F2ZSBldmlkZW5jZSBvZiBhIHdpbGw7IGFuZCBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbWFpbnRhaW4gdGhhdCB0aGUganVyeW1lbiBpbiB0aGF0IHRyaWFsIHdlcmUgbGVkIHRvIHZvdGUgaW4gZmF2b3Igb2YgUGhvcm1pbywgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgZXZpZGVuY2Ugb2YgdGhvc2Ugd2hvIHRlc3RpZmllZCB0byB0aGUgcmVsZWFzZSByYXRoZXIgdGhhbiBieSB0aGF0IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIHRlc3RpZmllZCB0byB0aGUgd2lsbC4gQnV0LCBtZW4gb2YgQXRoZW5zLCBJIHRoaW5rIHlvdSBhbGwga25vdyB0aGF0IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgeW91ciBoYWJpdCB0byBleGFtaW5lIHRoZSBmYWN0cyBubyBsZXNzIGNsb3NlbHkgdGhhbiB0aGUgcGxlYXMgd2hpY2ggbWVuIG1ha2UKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgdGhlbTsgYW5kIHRoZXNlIG1lbiwgYnkgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSBhZ2FpbnN0IG1lIHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmYWN0cyB0aGVtc2VsdmVzLCB3ZWFrZW5lZCBteSBhcmd1bWVudHMgb24gdGhlIHNwZWNpYWwgcGxlYS4gPG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBiZXNpZGVzIHRoaXMsIGl0IGlzIGFic3VyZCwgd2hlbiBhbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIGZhbHNlIGV2aWRlbmNlLCB0byBkZW1vbnN0cmF0ZSB3aG8gZGlkIHRoZSBncmVhdGVzdCBhbW91bnQgb2YgaGFybSwKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIG1ha2luZyBlYWNoIG9uZSBwcm92ZSB0aGF0IGhlIGhhcyBoaW1zZWxmIHRlc3RpZmllZCB0byB0aGUgdHJ1dGguIEl0CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGJ5IHByb3ZpbmcgdGhhdCBhbm90aGVyIGhhcyBkb25lIG1vcmUgb3V0cmFnZW91cyB0aGluZ3MgdGhhbiBoaW1zZWxmIHRoYXQKICAgICAgICAgICAgICAgICAgICBhIHdpdG5lc3MgaXMgdG8gYmUgbGV0IG9mZiwgYnV0IGJ5IHNob3dpbmcgdGhhdCBoZSBoYXMgaGltc2VsZiBnaXZlbiB0ZXN0aW1vbnkKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIHRydWUuIDxtaWxlc3RvbmUgbj0iNTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIG1lbiBvZiBBdGhlbnMsIGxldCBtZSBzaG93IHlvdSB0aGUgdGhpbmcgZm9yIHdoaWNoIG1vcmUgdGhhbiBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIGVsc2UgdGhpcyBmZWxsb3cgU3RlcGhhbnVzIGRlc2VydmVzIHRvIGJlIHB1dCB0byBkZWF0aC4gSXQgaXMgYW4gYXdmdWwgdGhpbmcgdG8KICAgICAgICAgICAgICAgICAgICBiZWFyIGZhbHNlIHdpdG5lc3MgYWdhaW5zdCBhbnlvbmUgd2hvbXNvZXZlciwgYnV0IGl0IGlzIGEgdGhpbmcgbW9yZSBhd2Z1bCBieQogICAgICAgICAgICAgICAgICAgIGZhciwgYW5kIG1vcmUgZGVzZXJ2aW5nIG9mIGluZGlnbmF0aW9uLCB0byBiZWFyIGZhbHNlIHdpdG5lc3MgYWdhaW5zdCB0aG9zZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgb3duIGJsb29kOyBmb3IgYSBtYW4gb2YgdGhhdCBzdGFtcCB2aW9sYXRlcywgbm90IHRoZSB3cml0dGVuIGxhd3MgYWxvbmUsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFsc28gdGhlIHRpZXMgb2YgbmF0dXJhbCByZWxhdGlvbnNoaXAuIFRoaXMsIHRoZW4sIFN0ZXBoYW51cyBzaGFsbCBiZSBwcm92ZWQKICAgICAgICAgICAgICAgICAgICB0byBoYXZlIGRvbmUuIDxtaWxlc3RvbmUgbj0iNTQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBtb3RoZXIgYW5kIHRoZSBmYXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICBteSB3aWZlIGFyZSBhIGJyb3RoZXIgYW5kIHNpc3Rlciwgc28gdGhhdCBteSB3aWZlIGlzIGhpcyBmaXJzdCBjb3VzaW4sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBib3JuIHRvIGhlciBhbmQgdG8gbWUgYXJlIGhpcyBjb3VzaW4ncyBjaGlsZHJlbi4gRG8geW91IHRoaW5rLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyBtYW4sIGlmIGhlIHNhdyBoaXMgZmVtYWxlIHJlbGF0aXZlcyBkcml2ZW4gYnkgd2FudCB0byBzaGFtZWZ1bAogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMsIHdvdWxkIGdpdmUgdGhlbSBpbiBtYXJyaWFnZSBhbmQgYWRkIG1hcnJpYWdlIHBvcnRpb25zIG91dCBvZiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2Vz4oCUYSB0aGluZyB3aGljaCBtYW55IGEgbWFuIGhhcyBkb25lIGVyZSBub3figJR3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGNob3NlbiB0byBnaXZlIGZhbHNlIHRlc3RpbW9ueSBpbiBvcmRlciB0byBwcmV2ZW50IHRoZWlyIGdldHRpbmcgd2hhdAogICAgICAgICAgICAgICAgICAgIGJlbG9uZ3MgdG8gdGhlbSwgYW5kIGhhcyBjb3VudGVkIHRoZSB3ZWFsdGggb2YgUGhvcm1pbyBvZiBoaWdoZXIgd29ydGggdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdHJvbmcgdGllcyBvZiBraW5zaGlwPyA8bWlsZXN0b25lIG49IjU1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdGhhdCBJIGFtIHRlbGxpbmcgdGhlIHRydXRoIGluIHRoaXMsIHRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiBvZiBEZWluaWFzIGFuZCByZWFkIGl0OyBhbmQgY2FsbCBEZWluaWFzLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5EZWluaWFzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgVGhlb21uZXN0dXMsIG9mIEF0aG1vbm9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXRobW9ub24gd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbWUgb2YgdGhlIHRyaWJlIENlY3JvcGlzLjwvbm90ZT4gZGVwb3NlcyB0aGF0IGhlIGdhdmUgaGlzIGRhdWdodGVyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIHRvIGxpdmUgd2l0aCBoaW0gYXMgaGlzIHdpZmUgYWNjb3JkaW5nIHRvIHRoZSBsYXdzLCBhbmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbmV2ZXIgcHJlc2VudCB3aGVuIEFwb2xsb2RvcnVzIHJlbGVhc2VkIFBob3JtaW8gZnJvbSBhbGwgY2xhaW1zLCBub3Igd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXIgYXdhcmUgdGhhdCBoZSBoYWQgZG9uZSBzby48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5EZWluaWFzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgaXMgdmVyeSBsaWtlIFN0ZXBoYW51cywgaXMgaGUgbm90P+KAlERlaW5pYXMsIHdobyBvbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIHJlbGF0aW9uc2hpcCwgcmVmdXNlcyB0byB0ZXN0aWZ5IGFnYWluc3QgdGhlIGRlZmVuZGFudCBldmVuIHRvIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0cnVlLCBhbmQgb24gYmVoYWxmIG9mIGhpcyBkYXVnaHRlciBhbmQgaGlzIGRhdWdodGVyJ3MgY2hpbGRyZW4sIGFuZCBtZSwgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbi1pbi1sYXchPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XZSBtdXN0IGFzc3VtZSB0aGF0IERlaW5pYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gY2FsbGVkIHVwb24sIHJlZnVzZWQgdG8gc3dlYXIgdG8gdGhlIGRlcG9zaXRpb24gd2hpY2ggd2FzIHJlYWQKICAgICAgICAgICAgICAgICAgICAgICAg77yId2hldGhlciB0aGUgZGVwb3NpdGlvbiBnaXZlbiBpbiB0aGUgdGV4dCBpcyBhdXRoZW50aWMgb3Igbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbm5vdCBiZSBkZXRlcm1pbmVkIHdpdGggY2VydGFpbnR577yJLiBIZSBtdXN0LCB0aGVyZWZvcmUsIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgdGFrZW4gdGhlIG9hdGggb2YgZGlzY2xhaW1lciDvvIg8Zm9yZWlnbiBsYW5nPSJncmVlayI+4byQzr7Pic68zr/Pg+G9t86xPC9mb3JlaWduPu+8iSwgYWx0aG91Z2ggdGhpcyBpcyBub3Qgc3RhdGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LiBBcG9sbG9kb3J1cyBhc3NlcnRzIHRoYXQgRGVpbmlhcyB0b29rIHRoaXMgY291cnNlIGZvciBmZWFyIHRoYXQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgc3dlYXJpbmcgdG8gdGhlIGRlcG9zaXRpb24gaGUgd291bGQgd29yayBoYXJtIHRvIGhpcyBraW5zbWFuIFN0ZXBoYW51cy4gV2UKICAgICAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSBjb250ZW50IHRvIGNvbmZlc3Mgb3VyIGlnbm9yYW5jZSBvZiBoaXMgcmVhc29ucy48L25vdGU+IE5vdCBzbwogICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBoZXJlLiBIZSBkaWQgbm90IGhlc2l0YXRlIHRvIGdpdmUgZmFsc2UgdGVzdGltb255IGFnYWluc3QgdXM7IGV2ZW4KICAgICAgICAgICAgICAgICAgICByZXNwZWN0IGZvciBoaXMgb3duIG1vdGhlciwgaWYgZm9yIG5vIG9uZSBlbHNlLCBkaWQgbm90IGtlZXAgaGltIGZyb20gYnJpbmdpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgZXh0cmVtZXN0IHBvdmVydHkgdXBvbiB0aG9zZSB3aG8gdGhyb3VnaCBoZXIgd2VyZSBoaXMgcmVsYXRpdmVzLiA8bWlsZXN0b25lIG49IjU3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHRvIHRlbGwgeW91IG9mIHRoZSBtb3N0IGEgb3V0cmFnZW91cyB0aGluZyB3aGljaCBoYXMgYmVlbiBkb25lIHRvCiAgICAgICAgICAgICAgICAgICAgbWUs4oCUYSB0aGluZyB3aGljaCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBvdmVyd2hlbG1lZCBtZSB3aXRoIGRpc21heQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBjb3Vyc2Ugb2YgdGhlIHRyaWFsOyBmb3IgeW91IHdpbGwgdGh1cyBzZWUgZXZlbiBtb3JlIGNsZWFybHkgdGhlIGZlbGxvdydzCiAgICAgICAgICAgICAgICAgICAgYmFzZW5lc3MsIGFuZCBJLCBieSB2ZW50aW5nIGJlZm9yZSB5b3UgbXkgZ3JpZWYgZm9yIHdoYXQgaGFzIGhhcHBlbmVkLCBzaGFsbAogICAgICAgICAgICAgICAgICAgIGZpbmQsIGFzIGl0IHdlcmUsIGEgc29ydCBvZiByZWxpZWYuIFRoZSBkZXBvc2l0aW9uLCB3aGljaCBJIHRob3VnaHQgd2FzIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aGljaCBhZmZvcmRlZCB0aGUgc3Ryb25nZXN0IGV2aWRlbmNlIGluIHN1cHBvcnQgb2YgbXkgY2FzZSwgSSBkaWQgbm90IGZpbmQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgYm94LiA8bWlsZXN0b25lIG49IjU4IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lLCBkaXNtYXllZCBieSB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWlzZm9ydHVuZSwgSSBjb3VsZCBpbWFnaW5lIG5vdGhpbmcgZWxzZSB0aGFuIHRoYXQgdGhlIG1hZ2lzdHJhdGUgaGFkIHdyb25nZWQgbWUKICAgICAgICAgICAgICAgICAgICBhbmQgdGFtcGVyZWQgd2l0aCB0aGUgYm94LiBOb3csIGhvd2V2ZXIsIGZyb20gd2hhdCBJIGhhdmUgc2luY2UgbGVhcm5lZCwgSSBmaW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGVmZW5kYW50IFN0ZXBoYW51cyBoYWQgZmlsY2hlZCB0aGUgZG9jdW1lbnQgYXdheSBpbiB0aGUgdmVyeSBwcmVzZW5jZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBhcmJpdHJhdG9yLCB3aGVuIEkgaGFkIGdvdCB1cCB0byBwdXQgYSB3aXRuZXNzIG9uIGhpcyBvYXRoLiBBbmQgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIGRlcG9zaXRpb25zIHNoYWxsIGZpcnN0IGJlIG9mZmVyZWQgeW91CiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aG9zZSB3aG8gd2VyZSBwcmVzZW50IGF0IHRoZSB0aW1lIGFuZCBzYXcgaXQ7IGZvciBJIGRvIG5vdCB0aGluayB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBjaG9vc2UgdG8gdGFrZSBhbiBvYXRoIG9mIGRpc2NsYWltZXIuIDxtaWxlc3RvbmUgbj0iNTkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgc2hhbWVsZXNzIGVub3VnaCB0byBkbyB0aGlzIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSBhIGNoYWxsZW5nZSBieQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSB3aWxsIGNhdGNoIHRoZW0gaW4gdGhlIHZlcnkgYWN0IG9mIHBlcmp1cnksIGFuZCB3aWxsIGtub3cgYWxsIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIG1hbiBkaWQgc3RlYWwgdGhlIGRlcG9zaXRpb24uIEFuZCB5ZXQsIG1lbiBvZiBBdGhlbnMsIGEgcGVyc29uIHdobwogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBzaHJpbmsgZnJvbSBiZWluZyBuYW1lZCBhcyBvbmUgd2hvIGhhZCBzdG9sZW4gd2hhdCB3YXMgcHJlanVkaWNpYWwgdG8KICAgICAgICAgICAgICAgICAgICBhbm90aGVy4oCUd2hhdCBkbyB5b3Ugc3VwcG9zZSBoZSB3b3VsZCBkbyBpbiBoaXMgb3duIGludGVyZXN0PwogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLCBhbmQgdGhlbiB0aGlzIGNoYWxsZW5nZS48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgdGhleSBhcmUgZnJpZW5kcyBhbmQgYXNzb2NpYXRlcyBvZiBQaG9ybWlvLCBhbmQgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBoZWZvcmUgdGhlIGFyYml0cmF0b3IgVGVpc2lhcyB3aGVuIHRoZSBhbm5vdW5jZW1lbnQgb2YgdGhlIGF3YXJkIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIGluIHRoZSBzdWl0IGJldHdlZW4gQXBvbGxvZG9ydXMgYW5kIFBob3JtaW8sIGFuZCB0aGF0IHRoZXkga25vdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBmaWxjaGVkIGF3YXkgdGhlIGRlcG9zaXRpb24gd2hpY2ggQXBvbGxvZG9ydXMgY2hhcmdlcyBoaW0sIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHN0b2xlbi48L3F1b3RlPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RWl0aGVyIGRlcG9zZSwgb3IgdGFrZQogICAgICAgICAgICAgICAgICAgIHRoZSBvYXRoIG9mIGRpc2NsYWltZXIuPHF1b3RlIHR5cGU9Ik9hdGggb2YgRGlzY2xhaW1lciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5PYXRoIG9mIERpc2NsYWltZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHdhcyBwbGFpbgogICAgICAgICAgICAgICAgICAgIGVub3VnaCwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHRoZXkgd291bGQgZG8gdGhpc+KAlHRha2UgdGhlIG9hdGggb2YKICAgICAgICAgICAgICAgICAgICBkaXNjbGFpbWVyIHdpdGggZWFnZXJuZXNzLiBXZWxsLCB0aGVuLCB0aGF0IHRoZXkgbWF5IGF0IG9uY2UgYmUgY29udmljdGVkIG9mCiAgICAgICAgICAgICAgICAgICAgcGVyanVyeSwgdGFrZSwgcGxlYXNlLCB0aGlzIGRlcG9zaXRpb24gYW5kIGNoYWxsZW5nZS4gUmVhZC48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbiBhbmQgQ2hhbGxlbmdlIj48dGl0bGU+RGVwb3NpdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYWxsZW5nZTwvdGl0bGU+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzIHRlc3RpZnkKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCB3aGVuIEFwb2xsb2RvcnVzIGNoYWxsZW5nZWQgU3RlcGhhbnVzIHRvIGdpdmUgdXAgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGVuZGFudCBzbGF2ZSB0byBiZSBwdXQgdG8gdGhlIHRvcnR1cmUgY29uY2VybmluZyB0aGUgdGhlZnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LCBhbmQgQXBvbGxvZG9ydXMgd2FzIHJlYWR5IHRvIHdyaXRlIG91dCB0aGUgY29uZGl0aW9ucyBvbiB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSB3YXMgdG8gYmUgYWRtaW5pc3RlcmVkOyBhbmQgdGhhdCB3aGVuIEFwb2xsb2RvcnVzIHRlbmRlcmVkIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlLCBTdGVwaGFudXMgcmVmdXNlZCB0byBnaXZlIHVwIHRoZSBzbGF2ZSwgYnV0IHJlcGxpZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgdGhhdCBoZSBtaWdodCBicmluZyBzdWl0LCBpZiBoZSBjaG9zZSwgaWYgaGUgbWFpbnRhaW5lZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBiZWluZyBpbiBhbnkgd2F5IHdyb25nZWQgYnkgaGltLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPldobyBpcyB0aGVyZSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIHdobywgb24gYSBjaGFyZ2UgbGlrZSB0aGF0LCBpZiBoZSB3ZXJlIHN1cmUgb2YgaGlzIGlubm9jZW5jZSwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgaGF2ZSBhY2NlcHRlZCB0aGUgdG9ydHVyZT8gVGhlbiwgYnkgcmVmdXNpbmcgdGhlIHRvcnR1cmUsIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgY29udmljdGVkIG9mIHRoZSB0aGVmdC4gTm93IGRvIHlvdSB0aGluayB0aGF0IGEgbWFuIHdvdWxkIGJlIGFzaGFtZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvZiBoYXZpbmcgYm9ybmUgZmFsc2Ugd2l0bmVzcywgd2hvIGRpZCBub3Qgc2hyaW5rIGZyb20gYmVpbmcgcHJvdmVkIGEKICAgICAgICAgICAgICAgICAgICB0aGllZj8gT3IgdGhhdCBoZSB3b3VsZCBoZXNpdGF0ZSB0byBnaXZlIGZhbHNlIHdpdG5lc3MgYXQgdGhlIHJlcXVlc3Qgb2YKICAgICAgICAgICAgICAgICAgICBhbm90aGVyLCB3aGVuLCBhdCBubyBtYW4ncyBiaWRkaW5nLCBoZSB2b2x1bnRhcmlseSBjb21taXR0ZWQgYSBmcmF1ZD8gPG1pbGVzdG9uZSBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGhlIG1pZ2h0IGp1c3RseSBiZSBtYWRlIHRvIHBheSB0aGUgcGVuYWx0eSBmb3IgYWxsIHRoZXNlIHRoaW5ncywgaGUKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlcyBldmVuIG1vcmUgdG8gYmUgcHVuaXNoZWQgaW4geW91ciBjb3VydCBmb3IgdGhlIHJlc3Qgb2YgaGlzIGNvbmR1Y3QuCiAgICAgICAgICAgICAgICAgICAgT2JzZXJ2ZSB0aGUga2luZCBvZiBhIGxpZmUgaGUgaGFzIGxpdmVkLCBhbmQganVkZ2UuIEZvciBzbyBsb25nIGFzIGl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBsb3Qgb2YgQXJpc3RvbG9jaHVzLCB0aGUgYmFua2VyLCB0byBlbmpveSBwcm9zcGVyaXR5LCB0aGlzIGZlbGxvdyBmYXduZWQgdXBvbgogICAgICAgICAgICAgICAgICAgIGhpbSBhcyBoZSB3YWxrZWQgYmVzaWRlIGhpbSwgYWRhcHRpbmcgaGlzIHBhY2UgdG8gaGlzLCBhbmQgdGhpcyBpcyB3ZWxsIGtub3duIHRvCiAgICAgICAgICAgICAgICAgICAgbWFueSBvZiB5b3Ugd2hvIGFyZSBwcmVzZW50IGhlcmUuIDxtaWxlc3RvbmUgbj0iNjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4KICAgICAgICAgICAgICAgICAgICBBcmlzdG9sb2NodXMgd2FzIHJ1aW5lZCBhbmQgbG9zdCBoaXMgcHJvcGVydHksIGNoaWVmbHkgdGhyb3VnaCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIHBsdW5kZXJlZCBieSB0aGlzIGZlbGxvdyBhbmQgb3RoZXJzIG9mIGhpcyBzdGFtcCwgU3RlcGhhbnVzIG5ldmVyIHN0b29kIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBBcmlzdG9sb2NodXMsIHdobyB3YXMgb3ZlcmJ1cmRlbmVkIHdpdGggbGF3c3VpdHMsIG5vciBhaWRlZCBoaW0sIGJ1dCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBBcG9sZXhpczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXBvbGV4aXMgaXMgYSBub3QgdW5mYW1pbGlhciBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iHNlZSBlLmcuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQzLjQ4IiB2YWxpZD0ieWVzIj5EZW0uIDQzLjQ4PC9iaWJsPu+8iSwgYnV0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBBcG9sZXhpcyBvciB0aGUgU29sb24gaGVyZSBtZW50aW9uZWQgbm90aGluZyBpcyBrbm93bi48L25vdGU+IG9yIFNvbG9uCiAgICAgICAgICAgICAgICAgICAgb3IgYW55Ym9keSBlbHNlIHRoYXQgaGVscGVkIGhpbSByYXRoZXIgdGhhbiBoZS4gVGhlbiBoZSBoYXMgY291cnRlZCBQaG9ybWlvIGFuZAogICAgICAgICAgICAgICAgICAgIGJlY29tZSBpbnRpbWF0ZSB3aXRoIGhpbSwgY2hvb3NpbmcgaGltIG91dCBvZiBhbGwgdGhlIEF0aGVuaWFuczsgYW5kIGhlIHNhaWxlZAogICAgICAgICAgICAgICAgICAgIHRvIEJ5emFudGl1bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Qnl6YW50aXVtLCB0aGUgbW9kZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIElzdGFuYnVsLjwvbm90ZT4gYXMgYWdlbnQgaW4gaGlzIGludGVyZXN0LCB3aGVuIHRoZSBCeXphbnRpbmVzIGRldGFpbmVkCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbydzIHZlc3NlbHMsIGFuZCBoZSBwbGVhZGVkIGhpcyBjYXVzZSBhZ2FpbnN0IHRoZSBDYWxjaGVkb25pYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2FsY2hlZG9uIGlzIGEgdG93biBvbiB0aGUgZWFzdCBzaWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBCb3Nwb3J1cywgb3Bwb3NpdGUgQnl6YW50aXVtLjwvbm90ZT4gYW5kIGhlIGhhcyB0aHVzIGZsYWdyYW50bHkgZ2l2ZW4gZmFsc2UKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzIGFnYWluc3QgbWUuIDxtaWxlc3RvbmUgbj0iNjUiIHVuaXQ9InNlY3Rpb24iIC8+QSBtYW4sIHRoZW4sIHdobyBpcyBhCiAgICAgICAgICAgICAgICAgICAgZmxhdHRlcmVyIG9mIHRob3NlIGluIHByb3NwZXJpdHksIGFuZCB3aG8gYmV0cmF5cyB0aGVzZSBzYW1lIG1lbiBpZiB0aGV5IGZhbGwKICAgICAgICAgICAgICAgICAgICBpbnRvIGFkdmVyc2l0eTsgd2hvIG91dCBvZiBhbGwgdGhlIGhvc3Qgb2YgZ29vZCBhbmQgd29ydGh5IGNpdGl6ZW5zIG9mIEF0aGVucwogICAgICAgICAgICAgICAgICAgIGRlYWxzIHdpdGggbm90IGEgc2luZ2xlIG9uZSBvbiB0aGUgYmFzaXMgb2YgZXF1YWxpdHksIGJ1dCB3aWxsaW5nbHkgZmF3bnMgdXBvbgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBsaWtlIFBob3JtaW87IHdobyB0YWtlcyBubyB0aG91Z2h0IHdoZXRoZXIgaGUgaXMgZ29pbmcgdG8gaW5qdXJlIGFueSBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBraW5zZm9sayBieSB0aGVzZSBhY3Rpb25zLCBvciB3aGV0aGVyIGhlIGlzIGdvaW5nIHRvIHdpbiBhbiBldmlsIHJlcHV0YXRpb24KICAgICAgICAgICAgICAgICAgICBpbiB0aGUgbWluZHMgb2Ygb3RoZXIgbWVuLCBidXQgdGhpbmtzIG9ubHkgb2Ygb25lIHRoaW5nLCBob3cgaGUgbWF5IGVucmljaAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGbigJRvdWdodCB5b3Ugbm90IHRvIGxvYXRoZSB0aGlzIG1hbiBhcyBhIGNvbW1vbiBlbmVteSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBodW1hbiByYWNlPyBJIGNlcnRhaW5seSB0aGluayBzby4gPG1pbGVzdG9uZSBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzCiAgICAgICAgICAgICAgICAgICAgY291cnNlIG9mIGFjdGlvbiwgaW52b2x2aW5nIHNvIGdyZWF0IGRpc2dyYWNlLCBoZSBoYXMgYWRvcHRlZCwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgdmlldyB0byBldmFkaW5nIGhpcyBkdXRpZXMgdG8gdGhlIHN0YXRlIGFuZCB0byBjb25jZWFsIGhpcyB3ZWFsdGgsIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBtYXkgbWFrZSBzZWNyZXQgcHJvZml0cyBieSBtZWFucyBvZiB0aGUgYmFuaywgYW5kIG5ldmVyIHNlcnZlIGFzIGNob3JlZ3VzIG9yCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoLCBvciBwZXJmb3JtIGFueSBvdGhlciBvZiB0aGUgcHVibGljIGR1dGllcyB3aGljaCBiZWZpdCBoaXMgc3RhdGlvbi4KICAgICAgICAgICAgICAgICAgICBBbmQgaGUgaGFzIGFjY29tcGxpc2hlZCB0aGlzIG9iamVjdC4gSGVyZSBpcyBhIHByb29mLiBBbHRob3VnaCBoZSBoYXMgc28gbGFyZ2UKICAgICAgICAgICAgICAgICAgICBhbiBlc3RhdGUgdGhhdCBoZSBnYXZlIGhpcyBkYXVnaHRlciBhIG1hcnJpYWdlIHBvcnRpb24gb2Ygb25lIGh1bmRyZWQgbWluYWUsIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIG5ldmVyIGJlZW4gc2VlbiBieSB5b3UgdG8gcGVyZm9ybSBhbnkgcHVibGljIHNlcnZpY2Ugd2hhdGV2ZXIsIGV2ZW4gdGhlIHZlcnkKICAgICAgICAgICAgICAgICAgICBzbGlnaHRlc3QuIEFuZCB5ZXQgaG93IG11Y2ggbW9yZSBob25vcmFibGUgaXQgd291bGQgaGF2ZSBiZWVuIHRvIGJlIHByb3ZlZCBhIG1hbgogICAgICAgICAgICAgICAgICAgIG9mIHB1YmxpYyBzcGlyaXQgYW5kIG9uZSB6ZWFsb3VzIGluIHRoZSBwZXJmb3JtYW5jZSBvZiBoaXMgZHV0aWVzIHRvIHRoZSBzdGF0ZSwKICAgICAgICAgICAgICAgICAgICB0aGFuIGEgZmxhdHRlcmVyIGFuZCBhIGJlYXJlciBvZiBmYWxzZSB0ZXN0aW1vbnkhIEJ1dCB0aGUgZmVsbG93IHdvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdG8gZ2V0IG1vbmV5LiA8bWlsZXN0b25lIG49IjY3IiB1bml0PSJzZWN0aW9uIiAvPlN1cmVseSwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICB5b3Ugb3VnaHQgdG8gZmVlbCBpbmRpZ25hdGlvbiByYXRoZXIgdG93YXJkIHRob3NlIHdobyBhcmUgcmFzY2FscyBpbiB3ZWFsdGggdGhhbgogICAgICAgICAgICAgICAgICAgIHRvd2FyZCB0aG9zZSB3aG8gYXJlIHN1Y2ggaW4gcG92ZXJ0eS4gSW4gdGhlIGNhc2Ugb2YgdGhlIGxhdHRlciB0aGUgcHJlc3N1cmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBuZWVkeSBzdGF0ZSBhZmZvcmRzIHRoZW0gc29tZSBleGN1c2UgaW4gdGhlIGV5ZXMgb2YgdGhvc2Ugd2hvIGxvb2sgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIHdpdGggaHVtYW4gc3ltcGF0aHksIHdoZXJlYXMgdGhvc2Ugd2hvLCBsaWtlIHRoaXMgZmVsbG93LCBhcmUgcmFzY2FscwogICAgICAgICAgICAgICAgICAgIHdoaWxlIHBvc3Nlc3NpbmcgYWJ1bmRhbmNlLCBjb3VsZCBmaW5kIG5vIHJlYXNvbmFibGUgZXhjdXNlIHRvIG9mZmVyLCBidXQgd2lsbAogICAgICAgICAgICAgICAgICAgIGJlIHNob3duIHRvIGFjdCBhcyB0aGV5IGRvIGZyb20gYSBzcGlyaXQgb2Ygc2hhbWVmdWwgZ3JlZWQgYW5kIGNvdmV0b3VzbmVzcyBhbmQKICAgICAgICAgICAgICAgICAgICBpbnNvbGVuY2UsIGFuZCBhIHJlc29sdmUgdG8gbWFrZSB0aGVpciBvd24gcGxvdHMgc3Ryb25nZXIgdGhhbiB0aGUgbGF3cy4gTm90IG9uZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZXNlIHRoaW5ncyBpcyB0byB5b3VyIGludGVyZXN0LCBidXQgcmF0aGVyIHRoYXQgdGhlIHdlYWssIGlmIGhlIHN1ZmZlcnMKICAgICAgICAgICAgICAgICAgICB3cm9uZywgc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJlZHJlc3MgZnJvbSB0aGUgd2VhbHRoeS4gQW5kIGhlIHdpbGwgYmUgYWJsZSwgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgcHVuaXNoIHRob3NlIHdobyBhcmUgdGh1cyBtYW5pZmVzdGx5IHJhc2NhbHMgd2hpbGUgcG9zc2Vzc2luZyB3ZWFsdGguCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5OZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHRoZSBhaXJzIHdoaWNoIHRoZSBmZWxsb3cgcHV0cyBvbiBhcyBoZSB3YWxrcyB3aXRoIHN1bGxlbiBmYWNlIGFsb25nIHRoZQogICAgICAgICAgICAgICAgICAgIHdhbGxzIGJlIHByb3Blcmx5IGNvbnNpZGVyZWQgYXMgbWFya3Mgb2Ygc29icmlldHksIGJ1dCByYXRoZXIgYXMgbWFya3Mgb2YKICAgICAgICAgICAgICAgICAgICBtaXNhbnRocm9weS4gSW4gbXkgb3BpbmlvbiBhIG1hbiB3aG9tIG5vIG1pc2ZvcnR1bmUgaGFzIGJlZmFsbGVuLCBhbmQgd2hvIGlzIGluCiAgICAgICAgICAgICAgICAgICAgbm8gbGFjayBvZiB0aGUgbmVjZXNzYXJpZXMgb2YgbGlmZSwgYnV0IHdobyBub25lIHRoZSBsZXNzIGhhYml0dWFsbHkgbWFpbnRhaW5zCiAgICAgICAgICAgICAgICAgICAgdGhpcyBkZW1lYW5vcixoYXMgcmV2aWV3ZWQgdGhlIG1hdHRlciBhbmQgcmVhY2hlZCB0aGUgY29uY2x1c2lvbiBpbiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgbWluZCwgdGhhdCB0byB0aG9zZSB3aG8gd2FsayBpbiBhIHNpbXBsZSBhbmQgbmF0dXJhbCB3YXkgYW5kIHdlYXIgYSBjaGVlcmZ1bAogICAgICAgICAgICAgICAgICAgIGNvdW50ZW5hbmNlLCBtZW4gZHJhdyBuZWFyIHVuaGVzaXRhdGluZ2x5IHdpdGggcmVxdWVzdHMgYW5kIHByb3Bvc2Fscywgd2hlcmVhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgc2hyaW5rIGZyb20gZHJhd2luZyBuZWFyIGluIHRoZSBmaXJzdCBwbGFjZSB0byBhZmZlY3RlZCBhbmQgc3VsbGVuCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVycy4gPG1pbGVzdG9uZSBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGRlbWVhbm9yLCB0aGVuLCBpcyBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYnV0IGEgY2xvYWsgdG8gY292ZXIgaGlzIHJlYWwgY2hhcmFjdGVyLCBhbmQgaGUgc2hvd3MgdGhlcmVpbiB0aGUgcnVkZW5lc3MgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFsaWduaXR5IG9mIGhpcyB0ZW1wZXIuIEhlcmUgaXMgYSBwcm9vZi4gWW91IGhhdmUgYmVlbiBmYXIgYmV0dGVyIG9mZiB0aGFuIHlvdQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkLCB5ZXQgdG8gd2hvbSBhbW9uZyB0aGUgd2hvbGUgaG9zdCBvZiBBdGhlbmlhbnMgaGF2ZSB5b3UgZXZlciBtYWRlIGEKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb24/IFRvIHdob20gaGF2ZSB5b3UgZXZlciBsZW50IGFpZCwgb3IgdG8gd2hvbSBkb25lIGEga2luZG5lc3M/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNzAiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGNvdWxkIG5vdCBuYW1lIGEgc2luZ2xlIG9uZTsgYnV0IHdoaWxlCiAgICAgICAgICAgICAgICAgICAgbGVuZGluZyBtb25leSBhdCBpbnRlcmVzdCBhbmQgcmVnYXJkaW5nIHRoZSBtaXNmb3J0dW5lcyBhbmQgbmVjZXNzaXRpZXMgb2YKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgYXMgeW91ciBvd24gZ29vZCBmb3J0dW5lLCB5b3UgZWplY3RlZCB5b3VyIG93biB1bmNsZSBOaWNpYXMgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZSBvZiBoaXMgZmF0aGVycywgeW91IGhhdmUgdGFrZW4gZnJvbSB5b3VyIG93biBtb3RoZXItaW4tbGF3IHRoZSByZXNvdXJjZXMKICAgICAgICAgICAgICAgICAgICB1cG9uIHdoaWNoIHNoZSBsaXZlZCwgYW5kIHlvdSBoYXZlLCBpbiBzbyBmYXIgYXMgaXQgZGVwZW5kZWQgdXBvbiB5b3UsIHJlbmRlcmVkCiAgICAgICAgICAgICAgICAgICAgaG9tZWxlc3MgdGhlIHNvbiBvZiBBcmNoZWRlbXVzLiBObyBvbmUgZXZlciBleGFjdGVkIHBheW1lbnQgZnJvbSBhIGRlZmF1bHRlciBhcwogICAgICAgICAgICAgICAgICAgIHJpZ29yb3VzbHkgYXMgeW91IGV4YWN0IGludGVyZXN0IGZyb20geW91ciBkZWJ0b3JzLiBBIG1hbiwgdGhlbiwgd2hvbSB5b3UgZmluZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIHNvIGJydXRhbCBhbmQgc28gc2F2YWdlIG9uIGFsbCBvY2Nhc2lvbnMsIGFyZSB5b3UgZ29pbmcgdG8gZmFpbCB0byBwdW5pc2gKICAgICAgICAgICAgICAgICAgICBoaW0gd2hlbiB5b3UgaGF2ZSBjYXVnaHQgaGltIGluIHRoZSB2ZXJ5IGFjdCBvZiB3cm9uZ2RvaW5nPyBJbiB0aGF0IGNhc2UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB5b3Ugd2lsbCBkbyB3aGF0IGlzIGFuIG91dHJhZ2UgYW5kIGluIG5vIHNlbnNlIHJpZ2h0LiA8bWlsZXN0b25lIG49IjcxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgZml0dGluZwogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgbWVuIG9mIEF0aGVucywgdGhhdCB5b3Ugc2hvdWxkIHdheCBpbmRpZ25hbnQgYWxzbyBhZ2FpbnN0IFBob3JtaW8sCiAgICAgICAgICAgICAgICAgICAgZm9yIGJyaW5naW5nIHRoaXMgbWFuIGZvcndhcmQgYXMgYSB3aXRuZXNzLCB3aGVuIHlvdSBzZWUgdGhlIHNoYW1lbGVzc25lc3Mgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgY2hhcmFjdGVyIGFuZCBoaXMgaW5ncmF0aXR1ZGUuIEZvciBJIGZhbmN5IHlvdSBhbGwga25vdyB0aGF0IGlmLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGZlbGxvdyB3YXMgZm9yIHNhbGUsIGEgY29vayBvciBhbiBhcnRpc2FuIGluIGFueSBvdGhlciB0cmFkZSBoYWQgYm91Z2h0IGhpbSwgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGxlYXJuZWQgdGhlIHRyYWRlIG9mIGhpcyBtYXN0ZXIgYW5kIGJlZW4gZmFyIHJlbW92ZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zcGVyaXR5IHdoaWNoIG5vdyBpcyBoaXMuIDxtaWxlc3RvbmUgbj0iNzIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGludG8gd2hvc2UgcG9zc2Vzc2lvbiBoZSBjYW1lLCB3YXMgYSBiYW5rZXIgYW5kIHRhdWdodCBoaW0gbGV0dGVycyBhbmQKICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGVkIGhpbSBpbiBoaXMgYnVzaW5lc3MgYW5kIHB1dCBoaW0gaW4gY29udHJvbCBvZiBsYXJnZSBzdW1zIG9mIG1vbmV5LCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBiZWNvbWUgd2VhbHRoeSwgaGF2aW5nIGZvdW5kIHRoZSBnb29kIGx1Y2sgd2hpY2ggYnJvdWdodCBoaW0gaW50byBvdXIgZmFtaWx5CiAgICAgICAgICAgICAgICAgICAgdGhlIGZvdW5kYXRpb24gb2YgYWxsIGhpcyBwcmVzZW50IHdlYWx0aC4gPG1pbGVzdG9uZSBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIGlzIG91dHJhZ2VvdXMsIHRoZW4sIE8gRWFydGggYW5kIHRoZSBnb2RzLCBhbmQgd29yc2UgdGhhbiBvdXRyYWdlb3VzLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHN1ZmZlciB0aG9zZSB3aG8gbWFkZSBoaW0gYSBHcmVlayBpbnN0ZWFkIG9mIGEgYmFyYmFyaWFuIGFuZCBhIG1hbiBvZgogICAgICAgICAgICAgICAgICAgIG5vdGUgaW5zdGVhZCBvZiBhIHNsYXZlLCBhbmQgd2hvIGJyb3VnaHQgaGltIHRvIHN1Y2ggZ3JlYXQgcHJvc3Blcml0eSwgdG8gbGl2ZQogICAgICAgICAgICAgICAgICAgIGluIGRpcmUgd2FudCB3aGlsZSBoZSBoYXMgbWVhbnMgYW5kIGlzIHJpY2gsIGFuZCB0aGF0IGhlIHNob3VsZCBoYXZlIGNvbWUgdG8KICAgICAgICAgICAgICAgICAgICBzdWNoIGEgcGl0Y2ggb2Ygc2hhbWVsZXNzbmVzcyB0aGF0IGhlIGNhbm5vdCBicmluZyBoaW1zZWxmIHRvIHNoYXJlIHdpdGggdXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZCBmb3J0dW5lIHdoaWNoIHdlIHNoYXJlZCB3aXRoIGhpbS4gPG1pbGVzdG9uZSBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBoZSBoYXMgbm90IHNjcnVwbGVkIHRvIG1hcnJ5IGhpcyBtaXN0cmVzcywgYW5kIGhlIGR3ZWxscyBhcyBodXNiYW5kIHdpdGgKICAgICAgICAgICAgICAgICAgICBoZXIgd2hvIHNjYXR0ZXJlZCB0aGUgc3dlYXRtZWF0cyBvdmVyIGhpbSB3aGVuIGhlIHdhcyBib3VnaHQgYXMgYSBzbGF2ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkl0IHdhcyBiZWxpZXZlZCB0byBiZSBhIGdvb2Qgb21lbiB0byBzY2F0dGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHN3ZWV0bWVhdHMsIG51dHMsIGV0Yy4sIG92ZXIgdGhlIGhlYWQgb2YgYSBuZXdseSBwdXJjaGFzZWQgc2xhdmUuIFNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvcGguIFBsLiA3NjgiIHZhbGlkPSJ5ZXMiPkFyaXN0b3BoLiBQbC4gNzY4PC9iaWJsPjwvbm90ZT4gbm9yIHRvIHdyaXRlIGEKICAgICAgICAgICAgICAgICAgICBjbGF1c2UgZ2l2aW5nIGhpbXNlbGYgYSBtYXJyaWFnZSBwb3J0aW9uIG9mIGZpdmUgdGFsZW50cyBpbiBhZGRpdGlvbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsYXJnZSBzdW1zIG9mIHdoaWNoIGhlIGJlY2FtZSBtYXN0ZXIsIGluYXNtdWNoIGFzIHRoZXkgd2VyZSBpbiB0aGUgY3VzdG9keSBvZiBteQogICAgICAgICAgICAgICAgICAgIG1vdGhlcuKAlGZvciB3aHkgZG8geW91IHN1cHBvc2UgaGUgd3JvdGUgaW4gdGhlIHdpbGwgdGhlIGNsYXVzZQogICAgICAgICAgICAgICAgICAgIOKAnGFuZCBhbGwgZWxzZSB3aGljaCBzaGUgaGFzIEkgZ2l2ZSB0bwogICAgICAgICAgICAgICAgICAgIEFyY2hpcHDDquKAnT/igJR3aGlsZSBoZSBsb29rcyB3aXRoIGluZGlmZmVyZW5jZSBvbiBteQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVycywgd2hvIGFyZSBkb29tZWQgdGhyb3VnaCBwb3ZlcnR5IHRvIGdyb3cgb2xkIGluIG1haWRlbmhvb2Qgd2l0aCBub25lIHRvCiAgICAgICAgICAgICAgICAgICAgZG93ZXIgdGhlbS4gPG1pbGVzdG9uZSBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBQaG9ybWlvIGhhZCBiZWVuIHBvb3IsIGFuZCBpdAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIG91ciBmb3J0dW5lIHRvIGJlIHdlYWx0aHksIGFuZCBpZiwgaW4gdGhlIGNvdXJzZSBvZiBuYXR1cmUsIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgaGFkIGhhcHBlbmVkIHRvIG1lLCB0aGlzIGZlbGxvdydzIHNvbnMgd291bGQgaGF2ZSBjbGFpbWVkIG15IGRhdWdodGVycyBpbgogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdl4oCUdGhlIHNvbnMgb2YgdGhlIHNsYXZlIHdvdWxkIGhhdmUgY2xhaW1lZCB0aGUgZGF1Z2h0ZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlciEgRm9yIHRoZXkgYXJlIHRoZWlyIHVuY2xlcywgc2luY2UgdGhlIG1hbiBtYXJyaWVkIG15IG1vdGhlcjsgYnV0IHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgd2Ugd2hvIGFyZSBwb29yLCBoZSB3aWxsIG5vdCBoZWxwIHRvIHBvcnRpb24gdGhlbSBvZmYsIGJ1dCBoZSB0YWxrcwogICAgICAgICAgICAgICAgICAgIGFuZCB0YWxrcywgYW5kIHJlY2tvbnMgdXAgdGhlIGFtb3VudCBvZiBwcm9wZXJ0eSB3aGljaCBJIHBvc3Nlc3MuIDxtaWxlc3RvbmUgbj0iNzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gb3IgdGhpcyBpcyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGFic3VyZCB0aGluZyBvZiBhbGwuIFVwIHRvIHRoaXMgZGF5IGhlIGhhcyBuZXZlciBzZWVuIGZpdCB0byByZW5kZXIgYW4gYWNjb3VudAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtb25leSBvZiB3aGljaCBoZSBoYXMgZGVmcmF1ZGVkIG1lLCBidXQgZW50ZXJzIGEgc3BlY2lhbCBwbGVhIHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICBhY3Rpb24gaXMgbm90IGV2ZW4gYWRtaXNzaWJsZTsgeWV0IGhlIGNoYXJnZXMgYWdhaW5zdCBtZSB3aGF0IEkgaGF2ZSByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGVzdGF0ZSBvZiBteSBmYXRoZXJzLiBPdGhlciBzbGF2ZXMgb25lIG1heSBzZWUgY2FsbGVkIHRvIHN0cmljdCBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgbWFzdGVycywgYnV0IGhlcmUgd2Ugc2VlIHRoZSB2ZXJ5IG9wcG9zaXRlOiB0aGUgZmVsbG93LCB0aG91Z2ggYSBzbGF2ZSwKICAgICAgICAgICAgICAgICAgICBjYWxscyBoaXMgbWFzdGVyIHRvIGFjY291bnQsIHRoaW5raW5nIHRoZXJlYnkgdG8gc2hvdyBoaW0gZm9ydGggYXMgYSB2aWxlIGZlbGxvdwogICAgICAgICAgICAgICAgICAgIGFuZCBhIHByb2RpZ2FsLiA8bWlsZXN0b25lIG49Ijc3IiB1bml0PSJzZWN0aW9uIiAvPkZvciBteXNlbGYsIG1lbiBvZiBBdGhlbnMsIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hdHRlciBvZiBteSBvdXR3YXJkIGFwcGVhcmFuY2UsIG15IGZhc3Qgd2Fsa2luZywgYW5kIG15IGxvdWQgdm9pY2UsIEkganVkZ2UKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gbm90IG9uZSBvZiB0aG9zZSBmYXZvcmVkIGJ5IG5hdHVyZTsgZm9yIGluIHNvIGZhciBhcyBJIGFubm95IG90aGVycwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYmVuZWZpdGluZyBteXNlbGYsIEkgYW0gaW4gbWFueSByZXNwZWN0cyBhdCBhIGRpc2FkdmFudGFnZTsgYnV0IHNpbmNlIEkKICAgICAgICAgICAgICAgICAgICBhbSBtb2RlcmF0ZSBpbiBhbGwgbXkgcGVyc29uYWwgZXhwZW5zZXMsIGl0IHdpbGwgYmUgc2VlbiB0aGF0IEkgbGl2ZSBhIG11Y2ggbW9yZQogICAgICAgICAgICAgICAgICAgIG9yZGVybHkgbGlmZSB0aGFuIFBob3JtaW8gYW5kIG90aGVycyB3aG8gYXJlIGxpa2UgaGltLiA8bWlsZXN0b25lIG49Ijc4IiB1bml0PSJzZWN0aW9uIiAvPldoYXRldmVyIGNvbmNlcm5zIHRoZSBzdGF0ZSwgaG93ZXZlciwgYW5kIGFsbCB0aGF0IGNvbmNlcm5zIHlvdSwgSQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm0sIGFzIHlvdSBrbm93LCBhcyBsYXZpc2hseSBhcyBJIGNhbjsgZm9yIEkgYW0gd2VsbCBhd2FyZSB0aGF0IGZvciB5b3Ugd2hvCiAgICAgICAgICAgICAgICAgICAgYXJlIGNpdGl6ZW5zIGJ5IGJpcnRoIGl0IGlzIHN1ZmZpY2llbnQgdG8gcGVyZm9ybSBwdWJsaWMgc2VydmljZXMgYXMgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICByZXF1aXJlOyB3ZSBvbiB0aGUgY29udHJhcnkgd2hvIGFyZSBjcmVhdGVkIGNpdGl6ZW5zIG91Z2h0IHRvIHNob3cgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm0gdGhlbSBhcyBhIGdyYXRlZnVsIHBheW1lbnQgb2YgYSBkZWJ0LiBDZWFzZSwgdGhlbiwgdG8gZmxpbmcgaW50byBteQogICAgICAgICAgICAgICAgICAgIHRlZXRoIG1hdHRlcnMgZm9yIHdoaWNoIEkgc2hvdWxkIHByb3Blcmx5IHdpbiBjb21tZW5kYXRpb24uIDxtaWxlc3RvbmUgbj0iNzkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCBQaG9ybWlvLCB3aG9tIG9mIHRoZSBjaXRpemVucyBoYXZlIEkgaGlyZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgcHJvc3RpdHV0aW9uLCBhcyB5b3UgaGF2ZSBkb25lPyBTaG93IG1lLiBXaG9tIGhhdmUgSSBkZXByaXZlZCBvZiB0aGUgY2l0aXplbnNoaXAKICAgICAgICAgICAgICAgICAgICBvZiB3aGljaCBJIHdhcyBkZWVtZWQgd29ydGh5LCBhbmQgb2YgdGhlIHJpZ2h0IG9mIGZyZWUgc3BlZWNoIGluIHRoZSBjaXR5LCBhcwogICAgICAgICAgICAgICAgICAgIHlvdSBkaWQgaW4gdGhlIGNhc2Ugb2YgdGhlIG1hbiB3aG9tIHlvdSBkaXNob25vcmVkPyBXaG9zZSB3aWZlIGhhdmUgSSBkZWJhdWNoZWQsCiAgICAgICAgICAgICAgICAgICAgYXMgeW91IGhhdmUgdGhlIHdpdmVzIG9mIG1hbnk/4oCUYW1vbmcgdGhlbSBoZXIgdG8gd2hvbSB0aGlzCiAgICAgICAgICAgICAgICAgICAgZ29kLWRldGVzdGVkIGZlbGxvdyBidWlsdCB0aGUgbW9udW1lbnQgbmVhciB0aGF0IG9mIGhpcyBtaXN0cmVzcyBhdCBhIGNvc3Qgb2YKICAgICAgICAgICAgICAgICAgICBtb3JlIHRoYW4gdHdvIHRhbGVudHMuIEFuZCBoZSBkaWQgbm90IHNlZSB0aGF0IGEgc3RydWN0dXJlLCBiZWluZyBvZiB0aGF0IHNvcnQsCiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgYSBtb251bWVudCwgbm90IG9mIGhlciB0b21iLCBidXQgb2YgdGhlIHdyb25nIHdoaWNoIGJlY2F1c2Ugb2YgaGltIHNoZQogICAgICAgICAgICAgICAgICAgIGhhZCBkb25lIHRvIGhlciBodXNiYW5kLiA8bWlsZXN0b25lIG49IjgwIiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSwgdGhlbiwgd2hvCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybSBhY3RzIGxpa2UgdGhlc2UsIGFuZCB3aG8gaGF2ZSBnaXZlbiBzdWNoIG1hbmlmZXN0IHByb29mcyBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZW91cyBjb25kdWN0LCBkYXJlIHRvIHNjcnV0aW5pemUgdGhlIG1hbm5lciBvZiBsaWZlIG9mIGFueW9uZSBlbHNlPyBCeSBkYXkKICAgICAgICAgICAgICAgICAgICB5b3UgYWN0IHNvYmVybHksIGJ1dCB0aGUgd2hvbGUgbmlnaHQgbG9uZyB5b3UgaW5kdWxnZSBpbiBhY3Rpb25zIGZvciB3aGljaCBkZWF0aAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBwZW5hbHR5LiBIZSBpcyBhIGtuYXZlLCBtZW4gb2YgQXRoZW5zLCBhIGtuYXZlIGFuZCBhIHZpbGxhaW4sIGFuZCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHN1Y2ggZnJvbSBvZiBvbGQsIGV2ZXIgc2luY2UgaGUgbGVmdCB0aGUgdGVtcGxlIG9mIENhc3RvciBhbmQgUG9sbHV4Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgb25lIG9mIHRoZSBwbGFjZXMgd2hlcmUgc2xhdmVzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgc29sZC48L25vdGU+IEhlcmUgaXMgdGhlIHByb29mLiBJZiBoZSBoYWQgYmVlbiBob25lc3QsIGhlIHdvdWxkIGhhdmUgbWFuYWdlZAogICAgICAgICAgICAgICAgICAgIGhpcyBtYXN0ZXIncyBidXNpbmVzcywgYW5kIHJlbWFpbmVkIHBvb3IuIEJ1dCBhcyBpdCBpcywgaGF2aW5nIGdvdCBjb250cm9sIG9mIHNvCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgYW4gYW1vdW50IG9mIG1vbmV5IHRoYXQgaGUgY291bGQgc3RlYWwgZnJvbSBpdCBhbGwgdGhhdCBoZSBub3cgcG9zc2Vzc2VzCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBkZXRlY3Rpb24sIGhlIHJlZ2FyZHMgd2hhdCBoZSBob2xkcywgbm90IGFzIGEgZGVidCwgYnV0IGFzIGFuIGluaGVyaXRlZAogICAgICAgICAgICAgICAgICAgIHBhdHJpbW9ueS4gPG1pbGVzdG9uZSBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBieSB0aGUgZ29kcywgaWYgSSBoYWQgbGVkCiAgICAgICAgICAgICAgICAgICAgeW91IG9mZiB0byBwcmlzb24gYXMgYSB0aGllZiBjYXVnaHQgaW4gdGhlIGFjdCwgcGlsaW5nIHVwb24geW91cgogICAgICAgICAgICAgICAgICAgIGJhY2vigJRpZiB0aGlzIGhhZCBiZWVuIGluIGFueSB3YXkgcG9zc2libGXigJR0aGUgd2VhbHRoIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdyBwb3NzZXNzLCBhbmQgaGFkIHRoZW4gZGVtYW5kZWQgb2YgeW91LCBpZiB5b3UgZGVuaWVkIGhhdmluZyBnb3QgdGhpcwogICAgICAgICAgICAgICAgICAgIHdlYWx0aCBieSB0aGlldmVyeSwgdG8gcmVmZXIgbWUgdG8gdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHlvdSBnb3QgaXQsIHRvIHdob20KICAgICAgICAgICAgICAgICAgICB3b3VsZCB5b3UgaGF2ZSByZWZlcnJlZCBtZT8gWW91ciBmYXRoZXIgZGlkIG5vdCBnaXZlIGl0IHRvIHlvdTsgeW91IGRpZCBub3QgZmluZAogICAgICAgICAgICAgICAgICAgIGl0OyB5b3UgaGFkIG5vdCBnb3QgaXQgZnJvbSBzb21lIG90aGVyIHNvdXJjZSB3aGVuIHlvdSBjb21lIGludG8gb3VyIGZhbWlseTsgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91IHdlcmUgYSBiYXJiYXJpYW4gd2hlbiB5b3Ugd2VyZSBwdXJjaGFzZWQuIEhhdmUgeW91LCB0aGVuLCBhIG1hbiB3aG8gb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gcHVibGljbHkgcHV0IHRvIGRlYXRoIGZvciB3aGF0IHlvdSBoYXZlIGRvbmUsIGFmdGVyIHNhdmluZyB5b3VyIHNraW4sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgc2VjdXJpbmcgZm9yIHlvdXJzZWxmIGEgY2l0eSB3aXRoIG91ciBtb25leSwgYW5kIGFmdGVyIGJlaW5nIGFsbG93ZWQgdG8KICAgICAgICAgICAgICAgICAgICBiZWdldCBjaGlsZHJlbiBhcyBicm90aGVycyB0byB5b3VyIG93biBtYXN0ZXJz4oCUaGF2ZSB5b3UgZW50ZXJlZCBhCiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCBwbGVhIHRoYXQgb3VyIGFjdGlvbiBmb3IgdGhlIHN1bXMgY2xhaW1lZCBmcm9tIHlvdSBpcyBpbmFkbWlzc2libGU/CiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iODIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCB0aGVuLCBkaWQgeW91IHNwZWFrIGV2aWwgb2YgbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGlucXVpcmUgd2hhdCBtYW5uZXIgb2YgbWFuIG15IGZhdGhlciB3YXM/IE1lbiBvZiBBdGhlbnMsIHdobyB3b3VsZCBub3QgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYW50IGF0IHRoaXM/IEZvciBteSBwYXJ0LCB0aG91Z2ggaXQgYmVzZWVtIG1lIHRvIGhhdmUgbGVzcyBvZiBwcmlkZSB0aGFuCiAgICAgICAgICAgICAgICAgICAgYW55IG9mIHlvdSwgeWV0IEkganVkZ2UgdGhhdCBJIG1heSBhdCBsZWFzdCBoYXZlIG1vcmUgdGhhbiBQaG9ybWlvLCB3aGlsZSBhcyBmb3IKICAgICAgICAgICAgICAgICAgICBoaW0sIHRob3VnaCB0aGVyZSBiZSBubyBvbmUgZWxzZSB0aGFuIHdob20gaGUgc2hvdWxkIGhhdmUgbGVzcywgeWV0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgbGVzcyB0aGFuIEk7IGZvciwgYXNzdW1pbmcgdGhhdCB3ZSBhcmUgdGhlIHNvcnQgb2YgcGVvcGxlIHlvdXIgd29yZHMgbWFkZQogICAgICAgICAgICAgICAgICAgIHVzIG91dCB0byBiZSwgeW91LCBQaG9ybWlvLCB3ZXJlIG5vbmUgdGhlIGxlc3Mgb3VyIHNsYXZlLiA8bWlsZXN0b25lIG49IjgzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHNvbWV0aGluZyBlbHNlIHdoaWNoIG9uZSBvZiB0aGVtIG1heSBzYXk6IHRoYXQgUGFzaWNsZXMsIGFsdGhvdWdoIGhlIGlzIG15CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgbWFrZXMgbm8gY2hhcmdlIGFnYWluc3QgUGhvcm1pbyBmb3IgdGhlc2Ugc2FtZSBhY3Rpb25zLiBXZWxsLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBzcGVhayBhYm91dCBQYXNpY2xlcywgdG9vLCBtZW4gb2YgQXRoZW5zLCB0aG91Z2ggSSBiZWcgYW5kIGltcGxvcmUgeW91IHRvIHBhcmRvbgogICAgICAgICAgICAgICAgICAgIG1lLCBpZiBJIGFtIHNvIGNhcnJpZWQgYXdheSBieSBpbmRpZ25hdGlvbiBhdCB0aGUgb3V0cmFnZXMgSSBoYXZlIHJlY2VpdmVkIGZyb20KICAgICAgICAgICAgICAgICAgICBteSBvd24gc2xhdmVzIGFzIHRvIGJlIHVuYWJsZSB0byByZXN0cmFpbiBteXNlbGY7IEkgd2lsbCBub3Qga2VlcCBzaWxlbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIHdpbGwgZGVjbGFyZSB3aGF0IHVudGlsIG5vdyBJIHByZXRlbmRlZCBub3QgdG8gaGVhciB3aGVuIG90aGVycyBzYWlkCiAgICAgICAgICAgICAgICAgICAgaXQ74oCUIDxtaWxlc3RvbmUgbj0iODQiIHVuaXQ9InNlY3Rpb24iIC8+SSBjb25zaWRlciBQYXNpY2xlcyB0byBiZSBteQogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgb24gbXkgbW90aGVyJ3Mgc2lkZSwgYnV0IHdoZXRoZXIgb24gbXkgZmF0aGVyJ3Mgc2lkZSBhbHNvLCBJIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGtub3c7IGJ1dCBJIGFtIGFmcmFpZCB0aGF0IHRoZSB3cm9uZ3Mgd2hpY2ggUGhvcm1pbyBoYXMgZG9uZSB1cyBiZWdhbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgUGFzaWNsZXMuIEZvciB3aGVuIGhlIGpvaW5zIGluIHBsZWFkaW5nIHRoZSBjYXVzZSBvZiB0aGUgc2xhdmUgYW5kIGRpc2hvbm9ycyBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCB3aGVuIGhlIGZhd25zIHVwb24gdGhvc2UsIGFuZCBjdXJyaWVzIHRoZSBmYXZvciBvZiB0aG9zZSwgd2hvIG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgc2VlayBoaXMgZmF2b3IsIHRvIHdoYXQgc3VzcGljaW9uIGRvZXMgdGhpcyBuYXR1cmFsbHkgZ2l2ZSByaXNlPyBBd2F5LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHdpdGggUGFzaWNsZXMsIGFuZCBsZXQgaGltIGJlIGNhbGxlZCB5b3VyIHNvbiBpbnN0ZWFkIG9mIHlvdXIgbWFzdGVyLCBhbmQgbXkKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkg77yIc2luY2UgaGUgc28gY2hvb3Nlc++8iSBpbnN0ZWFkIG9mIG15IGJyb3RoZXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iODUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGJpZCBhZGlldQogICAgICAgICAgICAgICAgICAgIHRvIHRoaXMgZmVsbG93IGFuZCBhcHBlYWwgdG8gdGhvc2UgdG8gd2hvbSBteSBmYXRoZXIgbGVmdCBtZSBhcyBteSBoZWxwZXJzIGFuZAogICAgICAgICAgICAgICAgICAgIGZyaWVuZHPigJR0byB5b3UsIG1lbiBvZiB0aGUganVyeS4gQW5kIEkgYmVnIGFuZCBlbnRyZWF0IGFuZCBpbXBsb3JlCiAgICAgICAgICAgICAgICAgICAgeW91LCBkbyBub3Qgc3VmZmVyIG15IGRhdWdodGVycyBhbmQgbXlzZWxmIHRocm91Z2ggb3VyIHBvdmVydHkgdG8gYmVjb21lIGEKICAgICAgICAgICAgICAgICAgICBzb3VyY2Ugb2YgbWFsaWNpb3VzIGpveSB0byBteSBvd24gc2xhdmVzIGFuZCB0byBoaXMgZmxhdHRlcmVycy4gTXkgZmF0aGVyIGdhdmUKICAgICAgICAgICAgICAgICAgICB5b3UgYSB0aG91c2FuZCBzaGllbGRzIGFuZCBtYWRlIGhpbXNlbGYgc2VydmljZWFibGUgdG8geW91IGluIG1hbnkgd2F5cywgYW5kCiAgICAgICAgICAgICAgICAgICAgZml2ZSB0aW1lcyBzZXJ2ZWQgYXMgdHJpZXJhcmNoLCB2b2x1bnRhcmlseSBlcXVpcHBpbmcgdGhlIHNoaXBzIGFuZCBtYW5uaW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICBhdCBoaXMgb3duIGV4cGVuc2UuIEkgcmVtaW5kIHlvdSBvZiB0aGlzLCBub3QgYmVjYXVzZSBJIGNvbnNpZGVyIHRoYXQgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHVuZGVyIG9ibGlnYXRpb24gdG8gbWXigJRmb3IgaXQgaXMgSSB0aGF0IGFtIHVuZGVyIG9ibGlnYXRpb24gdG8KICAgICAgICAgICAgICAgICAgICB5b3Us4oCUYnV0IGluIG9yZGVyIHRoYXQgSSBtYXkgbm90IHN1ZmZlciB1bndvcnRoeSB0cmVhdG1lbnQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHlvdXIga25vd2luZyBpdC4gRm9yIHRoYXQgd291bGQgbm90IGJlIGEgY3JlZGl0IHRvIHlvdSBhbnkgbW9yZSB0aGFuIHRvIG1lLgogICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49Ijg2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIG11Y2gKICAgICAgICAgICAgICAgICAgICB0byBzYXkgcmVnYXJkaW5nIHRoZSBpbmRpZ25pdGllcyB3aGljaCBJIGhhdmUgc3VmZmVyZWQsIGJ1dCBJIHNlZSB0aGF0IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIG5vdCBlbm91Z2ggd2F0ZXIgbGVmdCBpbiB0aGUgY2xvY2suIEkgd2lsbCB0ZWxsIHlvdSwgdGhlcmVmb3JlLCBob3cgSSB0aGluayB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGFsbCBiZXN0IGNvbWUgdG8ga25vdyB0aGUgZW5vcm1pdHkgb2YgdGhlIHdyb25ncyB0aGF0IGhhdmUgYmVlbiBkb25lIG1lLgogICAgICAgICAgICAgICAgICAgIFlvdSBtdXN0IGVhY2ggb2YgeW91IGNvbnNpZGVyIHdoYXQgc2xhdmUgaGUgbGVmdCBhdCBob21lLCBhbmQgdGhlbiBpbWFnaW5lIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzdWZmZXJlZCBmcm9tIGhpbSB0aGUgc2FtZSB0cmVhdG1lbnQgdGhhdCBJIGhhdmUgc3VmZmVyZWQgZnJvbSBQaG9ybWlvLgogICAgICAgICAgICAgICAgICAgIERvIG5vdCB0YWtlIGludG8gY29uc2lkZXJhdGlvbiB0aGF0IHRoZXkgYXJlIHNldmVyYWxseSBTeXJ1cyBvciBNYW5lcyBvciB3aGF0CiAgICAgICAgICAgICAgICAgICAgbm90LCB3aGlsZSB0aGlzIGZlbGxvdyBpcyBQaG9ybWlvLiBUaGUgdGhpbmcgaXMgdGhlIHNhbWXigJR0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcywgYW5kIGhlIHdhcyBhIHNsYXZlOyB5b3UgYXJlIG1hc3RlcnMsIGFuZCBJIHdhcyBtYXN0ZXIuIDxtaWxlc3RvbmUgbj0iODciIHVuaXQ9InNlY3Rpb24iIC8+QmVsaWV2ZSwgdGhlbiwgdGhhdCBpdCBpcyBmaXR0aW5nIG5vdyBmb3IgbWUgdG8gZXhhY3QKICAgICAgICAgICAgICAgICAgICB0aGUgcGVuYWx0eSB3aGljaCBlYWNoIG9uZSBvZiB5b3Ugd291bGQgY2xhaW07IGFuZCBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICBhbmQgb2YgdGhlIG9hdGhzIHdoaWNoIHlvdSBoYXZlIHRha2VuIGFzIGp1cm9ycyBwdW5pc2ggdGhlIG1hbiB3aG8gaGFzIHJvYmJlZCBtZQogICAgICAgICAgICAgICAgICAgIG9mIGEgdmVyZGljdCBieSBnaXZpbmcgZmFsc2UgdGVzdGltb255LCBhbmQgbWFrZSBoaW0gYW4gZXhhbXBsZSB0byBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXJpbmcgYWxsIHRoYXQgeW91IGhhdmUgaGVhcmQgZnJvbSBtZSBhbmQgYmVhcmluZyBpdCBpbiBtaW5kLCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdCB0byBtaXNsZWFkIHlvdSwgYW5kIG1lZXRpbmcgdGhlbSBhdCBldmVyeSBwb2ludC4gSWYgdGhleSBkZW55IHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgYm9ybmUgd2l0bmVzcyB0byBhbGwgdGhlIGZhY3RzLCBhc2sgdGhlbSB0aGVzZSBxdWVzdGlvbnMsIOKAnFdoYXQKICAgICAgICAgICAgICAgICAgICBzdGFuZHMgd3JpdHRlbiBpbiB0aGUgZGVwb3NpdGlvbj8gV2h5IGRpZCB5b3Ugbm90IHN0cmlrZSBpdCBvdXQgYXQgdGhlIHRpbWU/CiAgICAgICAgICAgICAgICAgICAgV2hhdCBpcyB0aGUgY291bnRlci1wbGVhIGluIHRoZSBjdXN0b2R5IG9mIHRoZSBhcmNob25zP+KAnSA8bWlsZXN0b25lIG49Ijg4IiB1bml0PSJzZWN0aW9uIiAvPklmIHRoZXkgZGVjbGFyZSB0aGF0IHRoZXkgaGF2ZSB0ZXN0aWZpZWQsIG9uZSBwZXJzb24KICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGxpdmVkIGFzIHdhcmQgdW5kZXIgYSB3aWxsLCBhbm90aGVyIHRoYXQgaGUgc2VydmVkIGFzIGd1YXJkaWFuLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHRoYXQgaGUgaGFzIHRoZSB3aWxsIGluIGhpcyBwb3NzZXNzaW9uLCBkZW1hbmQgb2YgdGhlbSwg4oCcV2hhdAogICAgICAgICAgICAgICAgICAgIHdpbGw/IFdoYXQgd2VyZSB0aGUgcHJvdmlzaW9ucyBjb250YWluZWQgaW4gaXQ/4oCdIEZvciB0byB0aGUgZGVwb3NpdGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHdoaWNoIHRoZXNlIG1lbiBib3JlIHdpdG5lc3Mgbm8gb25lIG9mIHRoZSBvdGhlcnMgaGFzIGdpdmVuIGNvcnJvYm9yYXRpdmUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkuIEJ1dCBpZiB0aGV5IHRyeSB3aGluaW5nIHRhY3RpY3MsIHlvdSBzaG91bGQgY29uc2lkZXIgdGhhdCB0aGUgb25lCiAgICAgICAgICAgICAgICAgICAgd3JvbmdlZCBpcyBtb3JlIGRlc2VydmluZyBvZiBwaXR5IHRoYW4gdGhvc2UgYWJvdXQgdG8gYmUgcHVuaXNoZWQuIElmIHlvdSBhY3QgaW4KICAgICAgICAgICAgICAgICAgICB0aGlzIHdheSwgeW91IHdpbGwgc3VjY29yIG1lLCBhbmQgeW91IHdpbGwgcmVzdHJhaW4gdGhlc2UgbWVuIGZyb20gdGhlaXIKICAgICAgICAgICAgICAgICAgICBleGNlc3NpdmUgYWR1bGF0aW9uOyBhbmQgdG8geW91ciBvd24gc2F0aXNmYWN0aW9uIHlvdSB3aWxsIGhhdmUgcmVuZGVyZWQgYQogICAgICAgICAgICAgICAgICAgIHJpZ2h0ZW91cyB2ZXJkaWN0LjwvcD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIG92ZXJ3aGVsbWVkIGJ5IGZhbHNlIHRlc3RpbW9ueSwgbWVuIG9mIEF0aGVucywgYW5kIGhhdmluZyBiZWVuIG91dHJhZ2VvdXNseSBhbmQKICAgICAgICAgICAgICAgICAgICBjcnVlbGx5IHRyZWF0ZWQgYnkgUGhvcm1pbywgSSBoYXZlIGNvbWUgdG8gd2luIGluIHlvdXIgY291cnQgYSB2ZXJkaWN0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aG9zZSByZXNwb25zaWJsZSBmb3IgdGhlIHdyb25nLiBJIGJlZyBhbmQgYmVzZWVjaCBhbmQgaW1wbG9yZSB5b3UgYWxsLCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSB0byBnaXZlIG1lIGEgZmF2b3JhYmxlIGhlYXJpbmcg77yIZm9yIGl0IGlzIGEgZ3JlYXQgdGhpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGhhdmUgbWV0IHdpdGggbWlzZm9ydHVuZSwgYXMgSSBoYXZlIGRvbmUsIHRvIGJlIGFibGUgdG8gdGVsbCBvdGhlcnMgb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZXkgaGF2ZSBzdWZmZXJlZCwgYW5kIHRvIGZpbmQgaW4geW91IGxpc3RlbmVycyB3aG8gYXJlIGtpbmRseQogICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlZO+8iTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2guIFBCIDYzNyIgdmFsaWQ9InllcyI+QWVzY2guIFBCIDYzNy02Mzk8L2JpYmw+IGZvciBhbiBhbG1vc3QgaWRlbnRpY2FsCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudC48L25vdGU+OyBhbmQgaW4gdGhlIHNlY29uZCBwbGFjZSwgaWYgSSBzaGFsbCBzZWVtIHRvIHlvdSB0byBiZSB0aGUKICAgICAgICAgICAgICAgICAgICB2aWN0aW0gb2Ygd3Jvbmdkb2luZywgdG8gcmVuZGVyIG1lIHRoZSBhaWQgd2hpY2ggaXMgbXkgZHVlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gUEIgNjM3IiB2YWxpZD0ieWVzIj5BZXNjaC4gUEIgNjM3LTYzOTwvYmlibD4gZm9yIGFuIGFsbW9zdCBpZGVudGljYWwKICAgICAgICAgICAgICAgICAgICAgICAgc2VudGltZW50LjwvdHJhbnNsYXRpb24+"
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgcHJvdmUgdG8geW91IHRoYXQgdGhpcyBtYW4gU3RlcGhhbnVzIGhhcyBib3RoCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gZmFsc2UgdGVzdGltb255LCBhbmQgaGFzIGRvbmUgdGhpcyBmcm9tIGEgYmFzZSBkZXNpcmUgZm9yIGdhaW4sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaXMgY29udmljdGVkIG91dCBvZiBoaXMgb3duIGxpcHM7IHNvIHRyYW5zcGFyZW50IGlzIHRoZSBjYXNlIGZyb20gZXZlcnkgcG9pbnQKICAgICAgICAgICAgICAgICAgICBvZiB2aWV3LiBBbmQgSSBzaGFsbCBlbmRlYXZvciB0byByZWxhdGUgdG8geW91IGluIHRoZSBmZXdlc3QgcG9zc2libGUgd29yZHMgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoYXMgdGFrZW4gcGxhY2UgYmV0d2VlbiBQaG9ybWlvIGFuZCBteXNlbGYgZnJvbSB0aGUgZmlyc3Q7IGFuZCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhlYXJpbmcgdGhpcyB5b3Ugd2lsbCBiZSBjb252aW5jZWQgYm90aCBvZiB0aGUgdmlsbGFpbnkgb2YgUGhvcm1pbyBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiBoYXZlIGJvcm5lIGZhbHNlIHRlc3RpbW9ueS4gPC90cmFuc2xhdGlvbj4="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcyBmb3IgbXlzZWxmLCBtZW4gb2YgdGhlIGp1cnksIGEgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3YXMgbGVmdCBtZSBieSBteSBmYXRoZXIsIGFuZCB0aGlzIHdhcyBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBQaG9ybWlvLAogICAgICAgICAgICAgICAgICAgIHdobyBmdXJ0aGVybW9yZSBoYWQgbWFycmllZCBteSBtb3RoZXIgd2hpbGUgSSB3YXMgb3V0IG9mIHRoZSBjb3VudHJ5IG9uIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzLCBzZXJ2aW5nIGFzIHlvdXIgdHJpZXJhcmNoLiDvvIhIb3cgaGUgbWFuYWdlZCBpdCwgcGVyaGFwcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBwcm9wZXIgZm9yIGEgc29uIGZ1bGx5IHRvIGV4cGxhaW4gYWJvdXQgaGlzIG1vdGhlci7vvIkgV2hlbiBJCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgYW5kIGxlYXJuZWQgb2YgdGhpcyBhbmQgc2F3IHdoYXQgaGFkIGJlZW4gZG9uZSwgYWx0aG91Z2ggSSB3YXMgZ3JlYXRseQogICAgICAgICAgICAgICAgICAgIGluY2Vuc2VkIGFuZCB0b29rIGl0IG11Y2ggdG8gaGVhcnQsIDwvdHJhbnNsYXRpb24+"
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5hYmxlIHRvIGJyaW5nIGEgcHJpdmF0ZSBhY3Rpb24g77yIZm9yIHRoZXJlIHdlcmUgbm8gYWN0aW9ucyBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgc2luY2UgeW91IHB1dCBvZmYgYWxsIHN1Y2ggbWF0dGVycyBiZWNhdXNlIG9mIHRoZSB3YXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHJlZmVyZW5jZSBpcyB0byB0aGUgaG9zdGlsaXRpZXMgYmV0d2VlbiBBdGhlbnMgYW5kIFRoZWJlcwogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcGVyaW9kIGJldHdlZW4gdGhlIGJhdHRsZSBvZiBMZXVjdHJhIO+8iDxkYXRlIGF1dGhuYW1lPSItMzcxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzcxIj4zNzE8L2RhdGU+IEIuQy7vvIkgYW5kIHRoZSBiYXR0bGUgb2YgTWFudGluZWEg77yIPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLu+8iS48L25vdGU+77yJLCBidXQgSSBpbmRpY3RlZAogICAgICAgICAgICAgICAgICAgIGhpbSBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZTxkYXRlIGF1dGhuYW1lPSItMzcxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzcxIj4zNzE8L2RhdGU+IEIuQy7vvIkgYW5kIHRoZSBiYXR0bGUgb2YgTWFudGluZWEg77yIPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLu+8iS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgYSBvbiBwLiAyMDIKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygdm9sLiAxLjwvbm90ZT4gb24gdGhlIGNoYXJnZSBvZiBvdXRyYWdlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4b2VzrLPgc61z4nPgiDOs8+BzrHPhuG9tTwvZm9yZWlnbj4gd2FzIGEgcHVibGljIGluZGljdG1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHdhbnRvbiBvdXRyYWdlLiBJdCB3YXMgYSBjcmltaW5hbCBjaGFyZ2UsIGFuZCBpbnZvbHZlZCB0aGUgcGVuYWx0eSBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmUgcGF5YWJsZSB0byB0aGUgU3RhdGUsIG9yLCBpbiBleHRyZW1lIGNhc2VzLCBldmVuIHRoZSBwZW5hbHR5IG9mIGRlYXRoLgogICAgICAgICAgICAgICAgICAgICAgICBJdCB3YXMgZmFyIG1vcmUgc2VyaW91cyB0aGFuIGEgY2hhcmdlIG9mIGNvbW1vbiBhc3NhdWx0IO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6x4bywzrrOteG9t86xz4IgzrThvbfOus63PC9mb3JlaWduPu+8iS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTQuMSIgdmFsaWQ9InllcyI+RGVtLiA1NC4xPC9iaWJsPjwvbm90ZT4gSG93ZXZlciwgdGltZSBwYXNzZWQgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGluZGljdG1lbnQgd2FzIGV2YWRlZCDvvIhzZWVpbmcgdGhhdCBhY3Rpb25zIHdlcmUgbm90IGJlaW5nCiAgICAgICAgICAgICAgICAgICAgaGVsZO+8iSwgYW5kIG1vcmVvdmVyIGNoaWxkcmVuIHdlcmUgYm9ybiBieSBteSBtb3RoZXIgdG8gUGhvcm1pbywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhpcyDvvIhmb3IgdGhlIHdob2xlIHRydXRoIHNoYWxsIGJlIHRvbGQgeW91LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyee+8iSwgbWFueSBraW5kbHkgb3ZlcnR1cmVzIHdlcmUgbWFkZSBvbiB0aGUgcGFydCBvZiBteSBtb3RoZXIsIGFuZAogICAgICAgICAgICAgICAgICAgIHBsZWFzIG9uIGJlaGFsZiBvZiB0aGlzIG1hbiBQaG9ybWlvLCBhbmQgbWFueSBvdmVydHVyZXMgb24gdGhlIHBhcnQgb2YgUGhvcm1pbwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdGhhdCB3ZXJlIGJvdGggbW9kZXJhdGUgYW5kIGh1bWJsZSBpbiB0aGVpciB0ZXJtcy4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4b2VzrLPgc61z4nPgiDOs8+BzrHPhuG9tTwvZm9yZWlnbj4gd2FzIGEgcHVibGljIGluZGljdG1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHdhbnRvbiBvdXRyYWdlLiBJdCB3YXMgYSBjcmltaW5hbCBjaGFyZ2UsIGFuZCBpbnZvbHZlZCB0aGUgcGVuYWx0eSBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmUgcGF5YWJsZSB0byB0aGUgU3RhdGUsIG9yLCBpbiBleHRyZW1lIGNhc2VzLCBldmVuIHRoZSBwZW5hbHR5IG9mIGRlYXRoLgogICAgICAgICAgICAgICAgICAgICAgICBJdCB3YXMgZmFyIG1vcmUgc2VyaW91cyB0aGFuIGEgY2hhcmdlIG9mIGNvbW1vbiBhc3NhdWx0IO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6x4bywzrrOteG9t86xz4IgzrThvbfOus63PC9mb3JlaWduPu+8iS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTQuMSIgdmFsaWQ9InllcyI+RGVtLiA1NC4xPC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRvIG1ha2UgdGhlIHN0b3J5IGJyaWVmLCBtZW4gb2YgQXRoZW5zLCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBkbyBvbmUgb2YgdGhlIHRoaW5ncyB0byB3aGljaCBoZSBoYWQgYWdyZWVkLCBhbmQgdHJpZWQgdG8gd2l0aGhvbGQKICAgICAgICAgICAgICAgICAgICBmcm9tIG1lIHRoZSBtb25leSB3aGljaCBoZSBoZWxkIGFzIGNhcGl0YWwgaW4gdGhlIGJhbms7IHNvIHRoZW4gSSB3YXMgY29tcGVsbGVkCiAgICAgICAgICAgICAgICAgICAgdG8gZW50ZXIgc3VpdCBhZ2FpbnN0IGhpbSBhdCB0aGUgZWFybGllc3Qgb3Bwb3J0dW5pdHkuIFBob3JtaW8gb24gaGlzIHBhcnQsCiAgICAgICAgICAgICAgICAgICAgc2VlaW5nIHRoYXQgZXZlcnl0aGluZyB3b3VsZCBiZSBicm91Z2h0IHRvIGxpZ2h0LCBhbmQgdGhhdCBoZSB3b3VsZCBiZSBwcm92ZWQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGFjdGVkIHRvd2FyZCBtZSBhcyB0aGUgYmFzZXN0IG9mIGh1bWFua2luZCwgY29udHJpdmVkIGFuZCBjb25jb2N0ZWQgdGhpcwogICAgICAgICAgICAgICAgICAgIHBsb3QgaW4gZnVydGhlcmFuY2Ugb2Ygd2hpY2ggdGhlIGRlZmVuZGFudCBTdGVwaGFudXMgZ2F2ZSB0aGlzIGZhbHNlIHRlc3RpbW9ueQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUuIEluIHRoZSBmaXJzdCBwbGFjZSwgaGUgZW50ZXJlZCBhIHNwZWNpYWwgcGxlYSBpbiB0aGUgc3VpdCBpbiB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBkZWZlbmRhbnQsIGNsYWltaW5nIHRoYXQgdGhlIHN1aXQgd2FzIG5vdCBhZG1pc3NpYmxlOyBhbmQgdGhlbiBoZQogICAgICAgICAgICAgICAgICAgIHByb2R1Y2VkIGZhbHNlIHdpdG5lc3NlcyB3aG8gc3RhdGVkIHRoYXQgSSBoYWQgZ2l2ZW4gaGltIGEgcmVsZWFzZSBmcm9tIG15CiAgICAgICAgICAgICAgICAgICAgY2xhaW1zLCBhbmQgd2hvIGRlcG9zZWQgdG8gYSBmb3JnZWQgbGVhc2UgYW5kIHRvIGEgd2lsbCB3aGljaCBuZXZlciBleGlzdGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCB0aGUgYWR2YW50YWdlIG92ZXIgbWUgaW4gYmVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgc3BlYWtlciwgYmVjYXVzZSB0aGlzIHdhcyBhIHNwZWNpYWwgcGxlYSBhbmQgdGhlIGNhc2Ugd2FzIG5vdCBjb21pbmcgdG8KICAgICAgICAgICAgICAgICAgICB0cmlhbCB1cG9uIHRoZSByZWFsIGlzc3VlLCBhbmQgYnkgcmVhZGluZyB0aGVzZSBkb2N1bWVudHMgYW5kIG1ha2luZyBvdGhlciBmYWxzZQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMgd2hpY2ggaGUgdGhvdWdodCB3b3VsZCBmYXZvciBoaXMgY2FzZSwgaGUgbWFkZSBzdWNoIGFuIGltcHJlc3Npb24gb24KICAgICAgICAgICAgICAgICAgICB0aGUganVyeSB0aGF0IHRoZXkgcmVmdXNlZCB0byBoZWFyIGEgc2luZ2xlIHdvcmQgZnJvbSBtZS4gSSB3YXMgZmluZWQgb25lLXNpeHRoCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGFtb3VudCBjbGFpbWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgbm90ZSBhIG9uIHAuIDUwIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHZvbC4gMS48L25vdGU+IHdhcyBkZW5pZWQgdGhlIHJpZ2h0IG9mIGEgaGVhcmluZywgYW5kIHdhcyB0cmVhdGVkIHdpdGggc3VjaAogICAgICAgICAgICAgICAgICAgIGNvbnR1bWVseSBhcyBJIGRvdWJ0IGlmIGFueSBvdGhlciBtYW4gZXZlciB3YXMsIGFuZCBJIHdlbnQgZnJvbSB0aGUgY291cnQsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIEF0aGVucywgdGFraW5nIHRoZSBtYXR0ZXIgYml0dGVybHkgYW5kIGdyaWV2b3VzbHkgdG8gaGVhcnQuIDwvdHJhbnNsYXRpb24+"
translation['45.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gZ29pbmcgb3ZlciBpdCBpbiBteSBvd24gbWluZCwgaG93ZXZlciwgSSBzZWUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdhcyBhYnVuZGFudCBleGN1c2UgZm9yIHRob3NlIHdobyBnYXZlIHRoYXQgdmVyZGljdCDvvIhmb3IgSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBrbm93IHdoYXQgb3RoZXIgdm90ZSBJIGNvdWxkIG15c2VsZiBoYXZlIGdpdmVuLCBpZiBJIGhhZCBrbm93biBub3RoaW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3RzIGFuZCBoYWQgaGVhcmQgdGhlIHRlc3RpbW9uee+8iSwgYnV0IHRoYXQgb3VyIGFuZ2VyIHNob3VsZCBmYWxsIHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gd2hvIGJ5IGdpdmluZyBmYWxzZSB0ZXN0aW1vbnkgd2VyZSByZXNwb25zaWJsZSBmb3IgdGhpcyByZXN1bHQuIE9mIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVycyB3aG8gaGF2ZSBnaXZlbiB0ZXN0aW1vbnkgSSBzaGFsbCBzcGVhayB3aGVuIEkgcHJvY2VlZCBhZ2FpbnN0IHRoZW0sIGJ1dAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGUgdGVzdGltb255IG9mIHRoZSBkZWZlbmRhbnQgU3RlcGhhbnVzIEkgc2hhbGwgdHJ5IHRvIGluc3RydWN0IHlvdQogICAgICAgICAgICAgICAgICAgIGF0IG9uY2UuIDwvdHJhbnNsYXRpb24+"
translation['45.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlcG9zaXRpb24gaXRzZWxmLCBhbmQgcmVhZCBpdCwgcGxlYXNlLCB0aGF0IGZyb20gaXRzIHZlcnkgbGFuZ3VhZ2UgSSBtYXkKICAgICAgICAgICAgICAgICAgICBwcm92ZSBteSBwb2ludC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZDsgYW5kIGRvIHlvdSBjaGVjayB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2F0ZXIuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN0ZXBoYW51cywgc29uIG9mIE1lbmVjbGVzLCBvZiBBY2hhcm5hZSwgRW5kaXVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgRXBpZ2VuZXMsIG9mIExhbXB0cmFlLCBTY3l0aGVzLCBzb24gb2YgSGFybWF0ZXVzLCBvZiBDeWRhdGhlbmFldW08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNoYXJuYWUgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9lbmXDr3MsIExhbXB0cmFlIG9mIHRoZSB0cmliZSBFcmVjdGhlw69zLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5ZGF0aGVuYWV1bSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT4gZGVwb3NlIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMsIG9mIEFjaGFybmFlLCB3aGVuIFBob3JtaW8gY2hhbGxlbmdlZAogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cywgaWYgaGUgZGVjbGFyZWQgdGhhdCB0aGUgZG9jdW1lbnQgd2hpY2ggUGhvcm1pbyBwdXQgaW50byB0aGUgYm94CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLCB0byBvcGVuIHRoZSB3aWxsIG9mIFBhc2lvLCB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaWFzLCBicm90aGVyLWluLWxhdyBvZiBDZXBoaXNvcGhvbiwgc3VibWl0dGVkIHRvIHRoZSBhcmJpdHJhdG9yOyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBBcG9sbG9kb3J1cyByZWZ1c2VkIHRvIG9wZW4gaXQ7IGFuZCB0aGF0IHRoZSBkb2N1bWVudCBpbiBxdWVzdGlvbiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN0ZXBoYW51cywgc29uIG9mIE1lbmVjbGVzLCBvZiBBY2hhcm5hZSwgRW5kaXVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgRXBpZ2VuZXMsIG9mIExhbXB0cmFlLCBTY3l0aGVzLCBzb24gb2YgSGFybWF0ZXVzLCBvZiBDeWRhdGhlbmFldW08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNoYXJuYWUgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9lbmXDr3MsIExhbXB0cmFlIG9mIHRoZSB0cmliZSBFcmVjdGhlw69zLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5ZGF0aGVuYWV1bSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT4gZGVwb3NlIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMsIG9mIEFjaGFybmFlLCB3aGVuIFBob3JtaW8gY2hhbGxlbmdlZAogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cywgaWYgaGUgZGVjbGFyZWQgdGhhdCB0aGUgZG9jdW1lbnQgd2hpY2ggUGhvcm1pbyBwdXQgaW50byB0aGUgYm94CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLCB0byBvcGVuIHRoZSB3aWxsIG9mIFBhc2lvLCB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaWFzLCBicm90aGVyLWluLWxhdyBvZiBDZXBoaXNvcGhvbiwgc3VibWl0dGVkIHRvIHRoZSBhcmJpdHJhdG9yOyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBBcG9sbG9kb3J1cyByZWZ1c2VkIHRvIG9wZW4gaXQ7IGFuZCB0aGF0IHRoZSBkb2N1bWVudCBpbiBxdWVzdGlvbiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvLjwvdHJhbnNsYXRpb24+"
translation['45.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGF2ZSBoZWFyZAogICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvc2l0aW9uLCBtZW4gb2YgdGhlIGp1cnksIGFuZCBJIHRoaW5rIHRoYXQgZXZlbiBpZiB5b3UgaGF2ZSBub3RpY2VkCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyBlbHNlLCB0aGlzIGF0IGxlYXN0IG11c3QgaGF2ZSBzZWVtZWQgc3RyYW5nZSB0byB5b3UsIHRoYXQgaXQgYmVnaW5zIHdpdGgKICAgICAgICAgICAgICAgICAgICBhIGNoYWxsZW5nZSBhbmQgZW5kcyB3aXRoIGEgd2lsbC4gSG93ZXZlciwgSSBvbiBteSBwYXJ0LCBjb3VudCBpdCByaWdodCwgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGF2ZSBzaG93biB3aGF0IG1heSBiZSBjYWxsZWQgdGhlIG1haW4gc3Vic3RhbmNlIG9mIHRoZSB0ZXN0aW1vbnkgdG8gYmUKICAgICAgICAgICAgICAgICAgICBmYWxzZSwgdGhlbiwgYW5kIG5vdCB0aWxsIHRoZW4sIHRvIHNheSBzb21ldGhpbmcgYWxzbyBhYm91dCBtYXR0ZXJzIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb3J0LiA8L3RyYW5zbGF0aW9uPg=="
translation['45.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBpdCBpcyBkZXBvc2VkIGJ5IHRoZW0gdGhhdAogICAgICAgICAgICAgICAgICAgIFBob3JtaW8gY2hhbGxlbmdlZCBtZSB0byBvcGVuIHRoZSB3aWxsIHdoaWNoIEFtcGhpYXMsCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcuKAlGlu4oCUbGF3IG9mIENlcGhpc29waG9uLCBzdWJtaXR0ZWQgdG8gdGhlIGFyYml0cmF0b3IKICAgICAgICAgICAgICAgICAgICBUZWlzaWFzOyBhbmQgdGhhdCBJIHJlZnVzZWQgdG8gb3BlbiBpdDsgYW5kIHRoYXQgdGhlIHdpbGwgdG8gd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgZGVwb3NlZCB3YXMgYSBjb3B5IG9mIHRoYXQgb3JpZ2luYWw7IGFuZCB0aGVuIGZvbGxvd3MgYSBjb3B5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGwuIDwvdHJhbnNsYXRpb24+"
translation['45.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgYXMgdG8gd2hldGhlciBQaG9ybWlvIHRlbmRlcmVkIG1lCiAgICAgICAgICAgICAgICAgICAgdGhpcyBjaGFsbGVuZ2Ugb3Igbm90LCBhbmQgd2hldGhlciB0aGUgd2lsbCBpcyBnZW51aW5lIG9yIHNwdXJpb3VzIEkgc2F5IG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBhcyB5ZXQ7IEkgd2lsbCBkaXNjdXNzIHRoZXNlIG1hdHRlcnMgYmVmb3JlIHlvdSBwcmVzZW50bHk7IGJ1dCBJIHdpbGwgdGFrZSB1cAogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXN0aW1vbnkgdGhleSBoYXZlIGdpdmVuLCB0aGF0IEkgcmVmdXNlZCB0byBvcGVuIHRoZSBkb2N1bWVudC4gSSB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgeW91IGxvb2sgYXQgdGhlIG1hdHRlciBpbiB0aGlzIHdheeKAlHdoYXQgcmVhc29uIHdvdWxkIGFueW9uZSBoYXZlIGhhZAogICAgICAgICAgICAgICAgICAgIGZvciByZWZ1c2luZyB0byBvcGVuIGl0PyBJbiBvcmRlciwgb25lIG1heSBzYXksIHRoYXQgdGhlIHdpbGwgbWlnaHQgbm90IGJlIHNob3duCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGp1cnkuIDwvdHJhbnNsYXRpb24+"
translation['45.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIGFuZCBnb29kLiBJZiB0aGV5IGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBkZXBvc2VkIHRvIHRoZSB3aWxsIGFzIHdlbGwgYXMgdG8gdGhlIGNoYWxsZW5nZSwgdGhlcmUgd291bGQgaGF2ZSBiZWVuIHNvbWUKICAgICAgICAgICAgICAgICAgICByZWFzb24gaW4gbXkgcmVmdXNpbmcgdG8gb3BlbiB0aGUgZG9jdW1lbnQ7IGJ1dCBzaW5jZSB0aGV5IGRlcG9zZWQgdG8gYm90aCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnltZW4gd2VyZSBnb2luZyB0byBoZWFyIHRoZSB3aWxsIGluIGFueSBjYXNlLCB3aGF0IGFkdmFudGFnZSB3YXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICBmb3IgbWUgaW4gcmVmdXNpbmc/IE5vbmUsIGFzc3VyZWRseS4gUXVpdGUgdGhlIGNvbnRyYXJ5LCBtZW4gb2YgQXRoZW5zOyBldmVuIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIGhhZCB0ZW5kZXJlZCBubyBjaGFsbGVuZ2UsIGJ1dCBoYWQgbWVyZWx5IHRhbGtlZCBvZiB0aGUgbWF0dGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICBzb21lb25lIGhhZCBkZWxpdmVyZWQgYSBkb2N1bWVudCB0byB0aGVtIGFzIGEgd2lsbCwgPC90cmFuc2xhdGlvbj4="
translation['45.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5pdCB3b3VsZCBoYXZlIGJlZW4gbXkgYnVzaW5lc3MgdG8gdGVuZGVyIHRoZSBjaGFsbGVuZ2UgYW5kIHRvIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBvcGVuIGl0LCBpbiBvcmRlciB0aGF0LCBpZiB0aGUgY29udGVudHMgZGlmZmVyZWQgZnJvbSB0aGUgc3RhdGVtZW50cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXNlIG1lbiBoYWQgbWFkZSBpbiB0aGVpciBkZXBvc2l0aW9uLCBJIG1pZ2h0IGhhdmUgY2FsbGVkIGEgbnVtYmVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGJ5c3RhbmRlcnMgYXMgd2l0bmVzc2VzLCBhbmQgaGF2ZSB1c2VkIHRoaXMgZmFjdCBhcyBhIHByb29mIHRoYXQgdGhlIHJlc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBzdG9yeSB0b28gd2FzIGEgZmFicmljYXRpb247IGJ1dCwgaWYgdGhlIGNvbnRlbnRzIHdlcmUgdGhlIHNhbWUsIEkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBoYXZlIHJlcXVpcmVkIHRoZSBvbmUgcHJlc2VudGluZyBpdCB0byBnaXZlIGV2aWRlbmNlIGhpbXNlbGYuIElmIGhlIGNvbnNlbnRlZCwgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIGhhZCBhIHJlc3BvbnNpYmxlIHdpdG5lc3MsIGFuZCwgaWYgaGUgcmVmdXNlZCwgdGhpcyB2ZXJ5IGZhY3QgYWdhaW4KICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gYSBjb252aW5jaW5nIHByb29mIGZvciBtZSB0aGF0IHRoZSBhZmZhaXIgaGFkIGJlZW4gY29uY29jdGVkLgogICAgICAgICAgICAgICAgICAgIEFuZCBpbiB0aGUgZm9ybWVyIGNhc2UgdGhlIHJlc3VsdCB3b3VsZCBoYXZlIGJlZW4gdGhhdCBJIGhhZCBvbmUgcGVyc29uIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aG9tIHRvIGRlYWwsIHdoZXJlYXMgYWNjb3JkaW5nIHRvIHRoZSBkZXBvc2l0aW9ucyBvZiB0aGVzZSBtZW4gSSBoYXZlIG1hbnkuIElzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYW55b25lIGFtb25nIHlvdSB3aG8gd291bGQgaGF2ZSBjaG9zZW4gdGhlIGxhdHRlciBjb3Vyc2U/IEkgdGhpbmsgbm90IG9uZQogICAgICAgICAgICAgICAgICAgIG9mIHlvdSB3b3VsZCBoYXZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIHlvdSBvdWdodCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIGl0IG9mIGFueW9uZSBlbHNlIGVpdGhlci4gRm9yLCBtZW4gb2YgQXRoZW5zLCBpbiBhbGwgY291cnNlcyBvZiBhY3Rpb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBpbnZvbHZlIGFuZ2VyIG9yIHNvbWUgZ2V0dGluZyBvZiBnYWluIG9yIGV4YXNwZXJhdGlvbiBvciBhIHNwaXJpdCBvZgogICAgICAgICAgICAgICAgICAgIGplYWxvdXN5LCBkaWZmZXJlbnQgcGVyc29ucyB3aWxsIGFjdCBpbiBkaWZmZXJlbnQgd2F5cyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlaXIKICAgICAgICAgICAgICAgICAgICBzZXZlcmFsIGRpc3Bvc2l0aW9uczsgYnV0IGluIGFsbCBjYXNlcyB3aGVyZSBub25lIG9mIHRoZXNlIHRoaW5ncyBpcyBpbnZvbHZlZCwKICAgICAgICAgICAgICAgICAgICBidXQgbWVyZWx5IGEgY2FsbSBjYWxjdWxhdGlvbiBvZiBvbmUncyBvd24gaW50ZXJlc3QsIHdobyB3b3VsZCBiZSBzbyBzZW5zZWxlc3MKICAgICAgICAgICAgICAgICAgICBhcyB0byBkaXNtaXNzIHdoYXQgd291bGQgaGVscCBoaW0gYW5kIGRvIHdoYXQgd291bGQgbWFrZSBpdCBtb3JlIGRpZmZpY3VsdCBmb3IKICAgICAgICAgICAgICAgICAgICBoaW0gdG8gd2luIGhpcyBjYXNlPyBZZXQgYSBjb3Vyc2Ugb2YgYWN0aW9uIHdoaWNoIGlzIG5laXRoZXIgbmF0dXJhbCBub3IKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmxlLCB3aGljaCwgaW4gc2hvcnQsIG5vIGh1bWFuIGJlaW5nIHdvdWxkIGhhdmUgdW5kZXJ0YWtlbuKAlHRoaXMKICAgICAgICAgICAgICAgICAgICB0aGVzZSB3aXRuZXNzZXMgaGF2ZSBhdHRyaWJ1dGVkIHRvIG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsIGl0IGlzIG5vdCBvbmx5IGZyb20gd2hhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzdGF0ZWQgaW4gdGhlaXIgZGVwb3NpdGlvbiByZWdhcmRpbmcgbXkgcmVmdXNhbCB0byBvcGVuIHRoZSBkb2N1bWVudCB0aGF0CiAgICAgICAgICAgICAgICAgICAgb25lIGNhbiB0ZWxsIHRoYXQgdGhleSBhcmUgbHlpbmcsIGJ1dCBhbHNvIGZyb20gdGhlIGZhY3QgdGhhdCB0aGV5IGhhdmUgZGVwb3NlZAogICAgICAgICAgICAgICAgICAgIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSBib3RoIHRvIGEgY2hhbGxlbmdlIGFuZCB0byBhIHdpbGwuIEZvciBJIHRoaW5rIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBhbGwgYXdhcmUgdGhhdCBjaGFsbGVuZ2VzIHdlcmUgZGV2aXNlZCBmb3IgYWxsIHRyYW5zYWN0aW9ucyB3aGljaCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgdG8gYnJpbmcgYmVmb3JlIHlvdTsgPC90cmFuc2xhdGlvbj4="
translation['45.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgaW5zdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgYSBtYW4gbWF5IG5vdCBiZSBwdXQgdG8gdG9ydHVyZSBpbiB5b3VyIHByZXNlbmNl4oCUZm9yIHRoaXMgaXQgaXMKICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcnkgdGhhdCB0aGVyZSBiZSBhIGNoYWxsZW5nZTsgYWdhaW4sIGlmIGFueXRoaW5nIGhhcyBiZWVuIHRyYW5zYWN0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFzIHRha2VuIHBsYWNlIHNvbWV3aGVyZSBvdXQgb2YgdGhlIGNvdW50cnksIGl0IGlzIG5lY2Vzc2FyeSB0aGF0IGZvciB0aGlzIHRvbwogICAgICAgICAgICAgICAgICAgIHRoZXJlIHNob3VsZCBiZSBhIGNoYWxsZW5nZSB0byBnbyBieSBzZWEgb3IgbGFuZCB0byB0aGUgcGxhY2Ugd2hlcmUgdGhlIHRoaW5nCiAgICAgICAgICAgICAgICAgICAgd2FzIGRvbmU7IGFuZCBzbyBmb3Igb3RoZXIgdGhpbmdzIG9mIHRoYXQgc29ydC4gQnV0IGluIGNhc2VzIHdoZXJlIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgdG8gcHJvZHVjZSB0aGUgdGhpbmdzIHRoZW1zZWx2ZXMgYmVmb3JlIHlvdXIgZXllcywgd2hhdCBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHNpbXBsZXIgdGhhbiB0byBwcm9kdWNlIHRoZW0gcHVibGljbHk/IDwvdHJhbnNsYXRpb24+"
translation['45.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLAogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlciBkaWVkIGF0IEF0aGVucywgdGhlIGFyYml0cmF0aW9uIHRvb2sgcGxhY2UgaW4gdGhlIFBhaW50ZWQgU3RvYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFBhaW50ZWQgU3RvYSB3YXMgdGhlIGxhcmdlc3QgYW5kIGZpbmVzdCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcG9ydGljb2VzIHN1cnJvdW5kaW5nIHRoZSBhZ29yYS4gSXQgZ290IGl0cyBuYW1lIGZyb20gdGhlIGZhbW91cwogICAgICAgICAgICAgICAgICAgICAgICBwYWludGluZ3Mgd2l0aCB3aGljaCBpdHMgd2FsbHMgd2VyZSBhZG9ybmVkLjwvbm90ZT4gYW5kIHRoZXNlIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NlZCB0aGF0IEFtcGhpYXMgcHJvZHVjZWQgdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgYXJiaXRyYXRvci4gVGhlbiwgaWYgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgZ2VudWluZSwgdGhlIGRvY3VtZW50IG91Z2h0IHRvIGhhdmUgYmVlbiBwdXQgaW50byB0aGUgYm94LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDUzLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNTMuMjwvYmlibD48L25vdGU+IGFuZCB0aGUgb25lIHByb2R1Y2luZyBpdCBzaG91bGQgaGF2ZSBzbyB0ZXN0aWZpZWQsIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCB0aGUganVyeW1lbiBtaWdodCBoYXZlIHJlYWNoZWQgYSBkZWNpc2lvbiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggYW5kIGFmdGVyIGFuIGluc3BlY3Rpb24gb2YgdGhlIHNlYWxzOyBhbmQgSSwgb24gbXkgcGFydCwgaWYgYW55b25lIHdhcwogICAgICAgICAgICAgICAgICAgIHdyb25naW5nIG1lLCBtaWdodCBoYXZlIHByb2NlZWRlZCBhZ2FpbnN0IGhpbS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDUzLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNTMuMjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['45.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IGlzLCBubyBvbmUgcGVyc29uIGhhcyB0YWtlbiB0aGUgd2hvbGUgbWF0dGVyIHVwb24gaGltc2VsZiBvciBnaXZlbgogICAgICAgICAgICAgICAgICAgIHN0cmFpZ2h0Zm9yd2FyZCB0ZXN0aW1vbnksIGFzIG9uZSB3b3VsZCBkbyBpbiB0ZXN0aWZ5aW5nIHRvIHRoZSB0cnV0aCwgYnV0IGVhY2gKICAgICAgICAgICAgICAgICAgICBoYXMgZGVwb3NlZCB0byBhIHBhcnQgb2YgdGhlIHN0b3J5LCBmYW5jeWluZyB0aGF0IGhlIGlzIHZlcnkgY2xldmVyIGFuZCB0aGF0IGZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgcmVhc29uIGhlIHdpbGwgZXNjYXBlIHB1bmlzaG1lbnQs4oCUb25lIG9mIHRoZW0gZGVwb3NpbmcgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGhvbGRzIGEgZG9jdW1lbnQgb24gd2hpY2ggaXMgd3JpdHRlbiDigJx0aGUgd2lsbCBvZiBQYXNpb+KAnTsKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHRoYXQsIGJlaW5nIHNlbnQgYnkgdGhlIGZvcm1lciBwZXJzb24sIGhlIHByb2R1Y2VkIHRoaXMgZG9jdW1lbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIGhhZCBubyBrbm93bGVkZ2UgYXMgdG8gd2hldGhlciBpdCB3YXMgZ2VudWluZSBvciBzcHVyaW91cy4gPC90cmFuc2xhdGlvbj4="
translation['45.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4sIHdobyBhcmUgaGVyZSBpbiBjb3VydCwgdXNpbmcgdGhlIGNoYWxsZW5nZQogICAgICAgICAgICAgICAgICAgIGFzIGEgc2NyZWVuLCBkZXBvc2VkIHRvIGEgd2lsbCBpbiBzdWNoIGEgd2F5IHRoYXQgdGhlIGp1cnltZW4gYmVsaWV2ZWQgdGhpcyB3aWxsCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbXkgZmF0aGVyJ3MsIGFuZCBJIHdhcyBkZWJhcnJlZCBmcm9tIG9idGFpbmluZyBhIGhlYXJpbmcgcmVnYXJkaW5nIG15CiAgICAgICAgICAgICAgICAgICAgd3JvbmdzLCBidXQgaW4gc3VjaCBhIHdheSBhbHNvIHRoYXQgdGhleSBvbiB0aGVpciBwYXJ0IHdvdWxkIG1vc3QgY2xlYXJseSBiZQogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZCBvZiBoYXZpbmcgZ2l2ZW4gZmFsc2UgdGVzdGltb255LiBBbmQgeWV0IHRoaXMgd2FzIHRoZSB2ZXJ5IG9wcG9zaXRlIG9mCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGV5IGludGVuZGVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ib3dldmVyLCB0aGF0IHlvdSBtYXkga25vdwogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgdGFrZSB0aGUgZGVwb3NpdGlvbiBvZiBDZXBoaXNvcGhvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2VwaGlzb3Bob24sIHNvbiBvZiBDZXBoYWxpb24sIG9mIEFwaGlkbmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwaGlkbmEgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWVhbnRpcy48L25vdGU+IGRlcG9zZXMgdGhhdCBhIGRvY3VtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBsZWZ0IGhpbSBieSBoaXMgZmF0aGVyLCBvbiB3aGljaCB3YXMgaW5zY3JpYmVkIOKAnHRoZSB3aWxsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhc2lvLuKAnTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNlcGhpc29waG9uLCBzb24gb2YgQ2VwaGFsaW9uLCBvZiBBcGhpZG5hLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcGhpZG5hIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlIEFlYW50aXMuPC9ub3RlPiBkZXBvc2VzIHRoYXQgYSBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbGVmdCBoaW0gYnkgaGlzIGZhdGhlciwgb24gd2hpY2ggd2FzIGluc2NyaWJlZCDigJx0aGUgd2lsbCBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYXNpby7igJ08L3RyYW5zbGF0aW9uPg=="
translation['45.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIGEgc2ltcGxlCiAgICAgICAgICAgICAgICAgICAgdGhpbmcsIG1lbiBvZiB0aGUganVyeSwgZm9yIHRoZSBvbmUgd2hvIGdhdmUgdGhpcyB0ZXN0aW1vbnkgdG8gYWRkCiAgICAgICAgICAgICAgICAgICAg4oCcYW5kIHRoaXMgaXMgdGhlIGRvY3VtZW50IHdoaWNoIHRoZSBkZXBvbmVudCBleGhpYml0cyzigJ0gYW5kCiAgICAgICAgICAgICAgICAgICAgdG8gcHV0IHRoZSBkb2N1bWVudCBpbnRvIHRoZSBib3guIEJ1dCwgSSBwcmVzdW1lLCBoZSB0aG91Z2h0IHRoYXQgdGhpcyBmYWxzZWhvb2QKICAgICAgICAgICAgICAgICAgICB3b3VsZCBkZXNlcnZlIHlvdXIgaW5kaWduYXRpb24sIGFuZCB0aGF0IHlvdSB3b3VsZCBwdW5pc2ggaGltIGZvciBpdCwgd2hlcmVhcyB0bwogICAgICAgICAgICAgICAgICAgIHRlc3RpZnkgdGhhdCBhIGRvY3VtZW50IGhhZCBiZWVuIGJlcXVlYXRoZWQgdG8gaGltIHdhcyBhIHRyaWZsaW5nIG1hdHRlciBhbmQgb25lCiAgICAgICAgICAgICAgICAgICAgb2Ygbm8gY29uc2VxdWVuY2UuIEFuZCB5ZXQgaXQgaXMgdGhpcyB2ZXJ5IHRoaW5nIHRoYXQgbWFrZXMgdGhlIHdob2xlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIGNsZWFyLCBhbmQgcHJvdmVzIHRoYXQgdGhleSBoYXZlIGNvbmNvY3RlZCBpdC4gPC90cmFuc2xhdGlvbj4="
translation['45.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgdGhlIGluc2NyaXB0aW9uIG9uIHRoZSB3aWxsIGhhZCBiZWVuIOKAnHRoZSBwcm9wZXJ0eSBvZiBQYXNpbwogICAgICAgICAgICAgICAgICAgIGFuZCBQaG9ybWlv4oCdIG9yIOKAnGluIHRoZSBtYXR0ZXIgb2YgUGhvcm1pbyzigJ0gb3IKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgb2YgdGhhdCBzb3J0LCBoZSB3b3VsZCBuYXR1cmFsbHkgaGF2ZSBrZXB0IGl0IGZvciBoaW07IGJ1dCBpZiwgYXMgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgdGVzdGlmaWVkLCB0aGUgaW5zY3JpcHRpb24gd2FzIOKAnHRoZSB3aWxsIG9mIFBhc2lvLOKAnSBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGNlcnRhaW5seSBoYXZlIGFwcHJvcHJpYXRlZCBpdCwga25vd2luZyB0aGF0IEkgd2FzIGFib3V0IHRvIGdvIHRvIGxhdywKICAgICAgICAgICAgICAgICAgICBhbmQga25vd2luZyBmdXJ0aGVyIHRoYXQsIGlmIGl0cyBjb250ZW50cyB3ZXJlIGFzIHJlcHJlc2VudGVkLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBwcmVqdWRpY2lhbCB0byBteSBpbnRlcmVzdHM7IGZvciBJIHdhcyB0aGUgaGVpciwgYW5kIGlmIHRoZSB3aWxsIHdhcyBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlcidzLCBpdCBiZWxvbmdlZCB0byBtZSwgYXMgZGlkIGFsc28gYWxsIHRoZSByZXN0IG9mIG15IGZhdGhlcidzIGVzdGF0ZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIGJ5IGl0cyBoYXZpbmcgYmVlbiBwcm9kdWNlZCB0bwogICAgICAgICAgICAgICAgICAgIFBob3JtaW8sIGJ5IGl0cyBoYXZpbmcgYmVlbiBpbnNjcmliZWQg4oCcdGhlIHdpbGwgb2YgUGFzaW8s4oCdCiAgICAgICAgICAgICAgICAgICAgYW5kIHlldCBpZ25vcmVkIGJ5IG1lLCBpdCBpcyBwcm92ZWQgdGhhdCB0aGUgd2lsbCBpcyBhIGZvcmdlcnkgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IG9mIENlcGhpc29waG9uIGlzIGZhbHNlLiBCdXQgbm8gbW9yZSBvZiBDZXBoaXNvcGhvbjsgaXQgaXMgbm90IHdpdGgKICAgICAgICAgICAgICAgICAgICBoaW0gdGhhdCBJIGhhdmUgdG8gZG8gYXQgcHJlc2VudCwgYW5kIGhlIGhhcyBnaXZlbiBubyB0ZXN0aW1vbnkgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29udGVudHMgb2YgdGhlIHdpbGwuIDwvdHJhbnNsYXRpb24+"
translation['45.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBtZW4gb2YgQXRoZW5zLAogICAgICAgICAgICAgICAgICAgIEkgd291bGQgaGF2ZSB5b3UgY29uc2lkZXIgaG93IHN0cm9uZyBhIHByb29mIHRoaXMgYWxzbyBpcyB0aGF0IHRoZXNlIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gZmFsc2UgdGVzdGltb255LiBGb3Igd2hlbiB0aGUgd2l0bmVzcyB3aG8gc3RhdGVkIHRoYXQgaGUgaGFkIHRoZSBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgIGluIGhpcyBvd24gcG9zc2Vzc2lvbiBkaWQgbm90IGRhcmUgdG8gc2F5IHRoYXQgdGhlIG9uZSBwcm9kdWNlZCBieSBQaG9ybWlvIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgY29weSBvZiB0aGUgb25lIGluIGhpcyBvd24ga2VlcGluZzsgYW5kIHdoZW4gdGhlc2UgbWVuIGNhbm5vdCBzdGF0ZSB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIHByZXNlbnQgaW4gdGhlIGZpcnN0IGluc3RhbmNlIG9yIHRoYXQgdGhleSBzYXcgdGhlIGRvY3VtZW50IG9wZW5lZCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRyYXRvciwgYnV0IGhhdmUgdGhlbXNlbHZlcyBhY3R1YWxseSBkZXBvc2VkIHRoYXQgSSByZWZ1c2VkIHRvIG9wZW4gaXQsCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSB0ZXN0aWZpZWQgbm93IHRoYXQgdGhlIG9uZSBpcyBhIGNvcHkgb2YgdGhlIG90aGVyLCBpcyBub3QgdGhpcyB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlZCB0aGVtc2VsdmVzIG9mIGZhbHNpZnlpbmc/IDwvdHJhbnNsYXRpb24+"
translation['45.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZSB0aGFuIGFsbCB0aGlzLCBtZW4gb2YgQXRoZW5zLCBhbnkgbWFuIGJ5IGV4YW1pbmluZwogICAgICAgICAgICAgICAgICAgIHRoZSB3b3JkaW5nIG9mIHRoZSBkZXBvc2l0aW9uIGNhbiBzZWUgdGhhdCBpdCBpcyBub3RoaW5nIGJ1dCBhIGNvbnRyaXZhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXJzIHRvIHRoZSBlbmQgdGhhdCByaWdodGx5IG9yIHdyb25nbHkgaXQgbWF5IGFwcGVhciB0aGF0IG15IGZhdGhlciBtYWRlIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgd2lsbC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRha2UgdGhlIGRlcG9zaXRpb24gaXRzZWxmLCBhbmQKICAgICAgICAgICAgICAgICAgICByZWFkLCBzdG9wcGluZyB3aGVyZXZlciBJIGJpZCB5b3UsIHRoYXQgZnJvbSBpdHMgb3duIHdvcmRpbmcgSSBtYXkgcHJvdmUgbXkKICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPi4gLiAuIGRlcG9zZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGJlZm9yZSB0aGUgYXJiaXRyYXRvcgogICAgICAgICAgICAgICAgICAgICAgICBUZWlzaWFzLCB3aGVuIFBob3JtaW8gY2hhbGxlbmdlZCBBcG9sbG9kb3J1cywgaWYgaGUgZGVjbGFyZWQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQgd2FzIG5vdCBhIGNvcHkgb2YgdGhlIHdpbGwgb2YgUGFzaW8gLiAuIC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBkZXBvc2UgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgVGVpc2lhcywgd2hlbiBQaG9ybWlvIGNoYWxsZW5nZWQgQXBvbGxvZG9ydXMsIGlmIGhlIGRlY2xhcmVkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50IHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvIC4gLiAuPC90cmFuc2xhdGlvbj4="
translation['45.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5TdG9wIHJlYWRpbmcuIEJlYXIgaW4gbWluZCB0aGF0IHRoZSB3b3JkcyBhcmUKICAgICAgICAgICAgICAgICAgICDigJxvZiB0aGUgd2lsbCBvZiBQYXNpby7igJ0gTm93IHBlcnNvbnMgd2hvIHdpc2hlZCB0byBiZWFyCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyB0byB0aGUgdHJ1dGjigJRhc3N1bWluZyB0aGF0IGl0IGlzIGFic29sdXRlbHkgZXN0YWJsaXNoZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFsbGVuZ2Ugd2FzIHRlbmRlcmVkLCB3aGljaCBpdCB3YXMgbm904oCUb3VnaHQgdG8gaGF2ZSBnaXZlbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBpbiB0aGUgZm9sbG93aW5nIHdheS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIGFnYWluIGZyb20gdGhlIGJlZ2lubmluZy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+LiAuIC4gZGVwb3NlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMgLiAuIC48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBkZXBvc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCBiZWZvcmUgdGhlIGFyYml0cmF0b3IgVGVpc2lhcyAuIC4gLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZSBkbyBkZXBvc2U7IGZvciB3ZSB3ZXJlIHByZXNlbnQuIFJlYWQgb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+LiAuIC4gd2hlbiBQaG9ybWlvCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZWQgQXBvbGxvZG9ydXMgLiAuIC48L3F1b3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiB3aGVuIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlZCBBcG9sbG9kb3J1cyAuIC4gLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzLAogICAgICAgICAgICAgICAgICAgIHRvbywgdGhleSBtaWdodCBwcm9wZXJseSBoYXZlIHN0YXRlZCwgYXNzdW1pbmcgdGhhdCBoZSByZWFsbHkgdGVuZGVyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz4uIC4gLiBpZiBoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZCB0aGF0IHRoZSBkb2N1bWVudCB3YXMgbm90IGEgY29weSBvZiB0aGUgd2lsbCBvZiBQYXNpbyAuIC4gLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPi4gLiAuIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkIHRoYXQgdGhlIGRvY3VtZW50IHdhcyBub3QgYSBjb3B5IG9mIHRoZSB3aWxsIG9mIFBhc2lvIC4gLiAuPC90cmFuc2xhdGlvbj4="
translation['45.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCByaWdodAogICAgICAgICAgICAgICAgICAgIHRoZXJlLiBUaGVyZSBpcyBub3QgYSBwZXJzb24gaW4gdGhlIHdvcmxkLCBJIHByZXN1bWUsIHdobyB3b3VsZCBoYXZlIHByb2NlZWRlZAogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgdGhpcyB0ZXN0aW1vbnksIHVubGVzcyBoZSBoYWQgYmVlbiBwcmVzZW50IHdoZW4gbXkgZmF0aGVyIGRyZXcgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbC4gSW5zdGVhZCwgaGUgd291bGQgaGF2ZSBzYWlkIGF0IG9uY2UsIOKAnEhvdyBkbyB3ZSBrbm93IGlmIHRoZXJlIGlzCiAgICAgICAgICAgICAgICAgICAgYW55IHdpbGwgb2YgUGFzaW8ncz/igJ3igJRhbmQgaGUgd291bGQgaGF2ZSBkZW1hbmRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyB3cml0ZSwgYXMgaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgY2hhbGxlbmdlOiDigJxJZiBJIGRlY2xhcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIG5vdCBhIGNvcHkgb2YgdGhlIHdpbGwgd2hpY2ggUGhvcm1pbyBzdGF0ZWQgdGhhdCBQYXNpbyBoYWQKICAgICAgICAgICAgICAgICAgICBsZWZ0LOKAneKAlG5vdCDigJxvZiB0aGUgd2lsbCBvZiBQYXNpby7igJ0gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhpcyB3YXMgdG8gdGVzdGlmeSB0aGF0IHRoZXJlIHdhcyBhIHdpbGwg77yId2hpY2ggd2FzIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9u77yJLCB0aGUgb3RoZXIgdGhhdCBQaG9ybWlvIHNhaWQgdGhhdCB0aGVyZSB3YXMuIEFuZCwgSSB0YWtlIGl0LAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIGEgd29ybGQgb2YgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgdGhpbmcncyBiZWluZyBzbywgYW5kIFBob3JtaW8ncyBzYXlpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28sCiAgICAgICAgICAgICAgICAgICAgaW4gb3JkZXIgdGhhdCB5b3UgbWF5IGtub3cgaG93IG1hbnkgYW5kIGhvdyBpbXBvcnRhbnQgb2JqZWN0cyB3ZXJlIHRvIGJlIHNlY3VyZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZmFicmljYXRpb24gb2YgdGhlIHdpbGwsIGxpc3RlbiBmb3IgYSBtb21lbnQuIFRoZSBmaXJzdCwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICB3YXMgdGhpcywgdGhhdCBQaG9ybWlvIHNob3VsZCBlc2NhcGUgcGF5aW5nIHRoZSBwZW5hbHR5IGZvciBjb3JydXB0aW5nIG9uZSB3aG9tCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHByb3BlciBmb3IgbWUgdG8gbmFtZSwgYnV0IHdob20geW91IGtub3cgb2YgeW91cnNlbHZlcywgZXZlbiBpZiBJIGRvCiAgICAgICAgICAgICAgICAgICAgbm90IG5hbWUgaGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgYXNzdW1wdGlvbiBvZiByZWx1Y3RhbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWFrIG9mIGhpcyBtb3RoZXIgaXMgaW4gZ2xhcmluZyBjb250cmFzdCB3aXRoIHRoZSBncm9zcyBhY2N1c2F0aW9uIG1hZGUKICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoZXIgbGF0ZXIgaW4gdGhlIHNwZWVjaC48L25vdGU+OyBuZXh0LCB0aGF0IGhlIG1pZ2h0IGdldCBwb3NzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgZmF0aGVyJ3MgcHJvcGVydHkgd2hpY2ggd2FzIGluIG15IG1vdGhlcidzIGtlZXBpbmc7IGFuZCBpbiBhZGRpdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoYXQgaGUgbWlnaHQgYmVjb21lIG1hc3RlciBvZiBldmVyeXRoaW5nIGVsc2Ugd2hpY2ggYmVsb25nZWQgdG8gdXMuIFRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIGlzIHNvLCB5b3Ugd2lsbCBiZSBjb252aW5jZWQgd2hlbiB5b3UgaGVhciB0aGUgd2lsbC4gRm9yIGl0IHdpbGwgYmUgZm91bmQsCiAgICAgICAgICAgICAgICAgICAgbm90IGxpa2UgdGhhdCBvZiBhIGZhdGhlciB3cml0aW5nIGluIHRoZSBpbnRlcmVzdCBvZiBoaXMgc29ucywgYnV0IGxpa2UgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIGEgc2xhdmUgd2hvIGhhcyBzaGFtZWZ1bGx5IG1pc3VzZWQgd2hhdCBiZWxvbmdlZCB0byBoaXMgbWFzdGVyLCBhbmQgd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgc2Vla2luZyBob3cgaGUgbWF5IGVzY2FwZSBwdW5pc2htZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['45.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGVtIHRoZSB3aWxsIGl0c2VsZiwgdG8gd2hpY2ggdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gaGF2ZSBkZXBvc2VkIGFsb25nIHdpdGggdGhlIGNoYWxsZW5nZTsgYW5kIGRvIHlvdSBtYXJrIHdlbGwgd2hhdCBJCiAgICAgICAgICAgICAgICAgICAgICAgIHNheS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaWxsIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaWxsPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBpcyB0aGUgd2lsbCBvZiBQYXNpbyBvZiBBY2hhcm5hZS4gSSBnaXZlIG15IHdpZmUgQXJjaGlwcMOqCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIFBob3JtaW8sIGFuZCBJIGdpdmUgYXMgZG93cnkgdG8gQXJjaGlwcMOqIHRoZSB0YWxlbnQgZHVlIHRvIG1lCiAgICAgICAgICAgICAgICAgICAgICAgIGF0IFBlcGFyZXRodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBlcGFyZXRodXMgaXMgYSBzbWFsbCBpc2xhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcnRoIG9mIEV1Ym9lYSwgb24gd2hpY2ggd2FzIGFuIEF0aGVuaWFuIGNvbG9ueS4gSXRzIG1vZGVybiBuYW1lIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTa29wZWxvcy48L25vdGU+IHRoZSB0YWxlbnQgZHVlIHRvIG1lIGhlcmUgaW4gQXRoZW5zLCBhIGxvZGdpbmctaG91c2UKICAgICAgICAgICAgICAgICAgICAgICAgd29ydGggb25lIGh1bmRyZWQgbWluYWUsIHRoZSBmZW1hbGUgc2xhdmVzIGFuZCBqZXdlbHJ5LCBhbmQgYWxsIGVsc2UgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBzaGUgaGFzIGluIHRoZSBob3VzZS4gQWxsIHRoZXNlIHRoaW5ncyBJIGdpdmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQXJjaGlwcMOqLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2lsbDwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgaXMgdGhlIHdpbGwgb2YgUGFzaW8gb2YgQWNoYXJuYWUuIEkgZ2l2ZSBteSB3aWZlIEFyY2hpcHDDqgogICAgICAgICAgICAgICAgICAgICAgICB0byBQaG9ybWlvLCBhbmQgSSBnaXZlIGFzIGRvd3J5IHRvIEFyY2hpcHDDqiB0aGUgdGFsZW50IGR1ZSB0byBtZQogICAgICAgICAgICAgICAgICAgICAgICBhdCBQZXBhcmV0aHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QZXBhcmV0aHVzIGlzIGEgc21hbGwgaXNsYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3J0aCBvZiBFdWJvZWEsIG9uIHdoaWNoIHdhcyBhbiBBdGhlbmlhbiBjb2xvbnkuIEl0cyBtb2Rlcm4gbmFtZSBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2tvcGVsb3MuPC9ub3RlPiB0aGUgdGFsZW50IGR1ZSB0byBtZSBoZXJlIGluIEF0aGVucywgYSBsb2RnaW5nLWhvdXNlCiAgICAgICAgICAgICAgICAgICAgICAgIHdvcnRoIG9uZSBodW5kcmVkIG1pbmFlLCB0aGUgZmVtYWxlIHNsYXZlcyBhbmQgamV3ZWxyeSwgYW5kIGFsbCBlbHNlIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgc2hlIGhhcyBpbiB0aGUgaG91c2UuIEFsbCB0aGVzZSB0aGluZ3MgSSBnaXZlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hpcHDDqi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIEF0aGVucywgdGhlIGxhcmdlIGFtb3VudCBvZiB0aGUgZG93cnks4oCUYSB0YWxlbnQgZnJvbQogICAgICAgICAgICAgICAgICAgIFBlcGFyZXRodXMsIGEgdGFsZW50IGZyb20gQXRoZW5zLCBhIGxvZGdpbmctaG91c2Ugd29ydGggYSBodW5kcmVkIG1pbmFlLCBmZW1hbGUKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMgYW5kIGpld2VscnksIGFuZCBhbGwgZWxzZSB0aGF0IHNoZSBoYXMgaW4gaGVyIHBvc3Nlc3Npb27igJRJIGdpdmUKICAgICAgICAgICAgICAgICAgICBpdCBhbGwsIHNheXMgdGhlIHdpbGw7IGFuZCBieSB0aGlzIGNsYXVzZSBoZSBwcmVjbHVkZXMgdXMgZXZlbiBmcm9tIHNlYXJjaGluZwogICAgICAgICAgICAgICAgICAgIGZvciBhbnkgb2YgdGhlIHByb3BlcnR5IHRoYXQgd2FzIGxlZnQuIDwvdHJhbnNsYXRpb24+"
translation['45.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGxldCBtZSBzaG93IHlvdSB0aGUgbGVhc2UgdW5kZXIgd2hpY2gKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGhhZCB0YWtlbiB0aGUgYmFuayBmcm9tIG15IGZhdGhlcjsgZm9yIGZyb20gdGhpcyBhbHNvLCBzcHVyaW91cyB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBpdCBpcywgeW91IHdpbGwgc2VlIHRoYXQgdGhlIHdpbGwgaXMgZmFicmljYXRpb24gdGhyb3VnaCBhbmQgdGhyb3VnaC4gSSB3aWxsIHNldAogICAgICAgICAgICAgICAgICAgIGZvcnRoIGZvciB5b3UsIG5vdCBhIGRpZmZlcmVudCBsZWFzZSwgYnV0IHRoZSBvbmUgd2hpY2ggUGhvcm1pbyBwcm9kdWNlZCwgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGVyZSBpcyBhbiBhZGRlZCBjbGF1c2Ugc2V0dGluZyBkb3duIG15IGZhdGhlciBhcyBvd2luZyBQaG9ybmlpbyBlbGV2ZW4KICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIG9uIHRoZSBkZXBvc2l0cy4gPC90cmFuc2xhdGlvbj4="
translation['45.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGhhZCwgSSB0aGluaywKICAgICAgICAgICAgICAgICAgICB0aGUgZm9sbG93aW5nIHB1cnBvc2UuIE9mIHRoZSBlZmZlY3RzIGluIHRoZSBob3VzZSBoZSBtYWRlIGhpbXNlbGYgbWFzdGVyIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGwsIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IGhhZCBiZWVuIGdpdmVuIGFzIGEgZG93cnkgd2l0aCBteSBtb3RoZXIsIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUganVzdCBoZWFyZDsgYnV0IHRoZSBtb25leSBpbiB0aGUgYmFuaywgYWJvdXQgd2hpY2ggZXZlcnlib2R5IGtuZXcsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGNvdWxkIG5vdCBiZSBoaWRkZW4sIGhlIGdvdCBpbnRvIGhpcyBoYW5kcyBieSByZXByZXNlbnRpbmcgdGhhdCBvdXIgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgb3dlZCBpdCwgc28gdGhhdCB3aGF0ZXZlciBzdW1zIGhlIG1pZ2h0IGJlIHByb3ZlZCB0byBoYXZlIGluIGhpcyBwb3NzZXNzaW9uIGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgY2xhaW0gdG8gaGF2ZSByZWNlaXZlZCBpbiBwYXltZW50LiBZb3UgaGF2ZSBwZXJoYXBzIGltYWdpbmVkLCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbGVjaXplczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj7igJw8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg+G9uc67zr/Ouc66zr/PgjwvZm9yZWlnbj4gaXMgYSB3b3JkIG9mIG5hcnJvd2VyIG1lYW5pbmcgdGhhbiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OsuG9sc+BzrLOsc+Bzr/PgjwvZm9yZWlnbj4sIGFuZCBpcyBhcHBsaWVkIG1haW5seSB0byBmYXVsdHMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcHJvbnVuY2lhdGlvbiBvciBtaXN0YWtlcyBpbiBncmFtbWFyLCBlc3BlY2lhbGx5IHN5bnRheCwgZHVlIHRvIGZvcmVpZ24KICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2lu4oCdIO+8iFNhbmR5c++8iS4gSXQgd291bGQsIGhvd2V2ZXIsIGJlIHF1aXRlCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1dGlsZSB0byBsb29rIGZvciBhIHNwZWNpZmljIGVycm9yIGluIHRoZSwgdmVyeSBwcm9iYWJseSBzcHVyaW91cywgbGVhc2UKICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQgaW4gdGhlIG9yYXRpb24uPC9ub3RlPiBpbiBoaXMgc3BlZWNoLCB0aGF0IGhlIGlzIGEgYmFyYmFyaWFuIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHJlYWRpbHkgdG8gYmUgZGVzcGlzZWQuIFRoZSBmZWxsb3cgaXMgaW5kZWVkIGEgYmFyYmFyaWFuIGluIHRoYXQgaGUgaGF0ZXMKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG9tIGhlIG91Z2h0IHRvIGhvbm9yOyBidXQgaW4gdmlsbGFpbnkgYW5kIGluIGJyaW5naW5nIG1hdHRlcnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcnVpbjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+D4b25zrvOv865zrrOv8+CPC9mb3JlaWduPiBpcyBhIHdvcmQgb2YgbmFycm93ZXIgbWVhbmluZyB0aGFuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6y4b2xz4HOss6xz4HOv8+CPC9mb3JlaWduPiwgYW5kIGlzIGFwcGxpZWQgbWFpbmx5IHRvIGZhdWx0cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBwcm9udW5jaWF0aW9uIG9yIG1pc3Rha2VzIGluIGdyYW1tYXIsIGVzcGVjaWFsbHkgc3ludGF4LCBkdWUgdG8gZm9yZWlnbgogICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW7igJ0g77yIU2FuZHlz77yJLiBJdCB3b3VsZCwgaG93ZXZlciwgYmUgcXVpdGUKICAgICAgICAgICAgICAgICAgICAgICAgZnV0aWxlIHRvIGxvb2sgZm9yIGEgc3BlY2lmaWMgZXJyb3IgaW4gdGhlLCB2ZXJ5IHByb2JhYmx5IHNwdXJpb3VzLCBsZWFzZQogICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCBpbiB0aGUgb3JhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1ldGFwaG9yIGlzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgaG91c2UtYnJlYWtpbmcuPC9ub3RlPiBoZSBpcyBzZWNvbmQgdG8gbm9uZS4gPC90cmFuc2xhdGlvbj4="
translation['45.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSB0aGUgbGVhc2UgYW5kIHJlYWQKICAgICAgICAgICAgICAgICAgICBpdOKAlHRoZSBsZWFzZSB3aGljaCB0aGV5IHB1dCBpbiwgYXMgdGhleSBkaWQgdGhlIHdpbGwsIGJ5IG1lYW5zIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxlYXNlIG9mIFRoZSBCYW5rIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZWFzZSBvZiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhbms8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiB0aGUgZm9sbG93aW5nIHRlcm1zIFBhc2lvCiAgICAgICAgICAgICAgICAgICAgICAgIGhhcyBsZXQgdGhlIGJhbmsgdG8gUGhvcm1pbzogUGhvcm1pbyBpcyB0byBwYXkgdG8gdGhlIHNvbnMgb2YgUGFzaW8gYXMKICAgICAgICAgICAgICAgICAgICAgICAgcmVudGFsIGZvciB0aGUgYmFuayB0d28gdGFsZW50cyBhbmQgZm9ydHkgbWluYWUgZWFjaCB5ZWFyIGFib3ZlIHRoZSBkYWlseQogICAgICAgICAgICAgICAgICAgICAgICBleHBlbmRpdHVyZSwgYW5kIGl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgZm9yIFBob3JtaW8gdG8gY2Fycnkgb24gYSBiYW5raW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIGluZGVwZW5kZW50bHkgdW5sZXNzIGhlIGZpcnN0IG9idGFpbnMgdGhlIGNvbnNlbnQgb2YgdGhlIHNvbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFzaW8uIEFuZCBQYXNpbyBvd2VzIHRoZSBiYW5rIGVsZXZlbiB0YWxlbnRzIHVwb24gdGhlIGRlcG9zaXRzLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGVhc2Ugb2YgVGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYW5rPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24gdGhlIGZvbGxvd2luZyB0ZXJtcyBQYXNpbwogICAgICAgICAgICAgICAgICAgICAgICBoYXMgbGV0IHRoZSBiYW5rIHRvIFBob3JtaW86IFBob3JtaW8gaXMgdG8gcGF5IHRvIHRoZSBzb25zIG9mIFBhc2lvIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbnRhbCBmb3IgdGhlIGJhbmsgdHdvIHRhbGVudHMgYW5kIGZvcnR5IG1pbmFlIGVhY2ggeWVhciBhYm92ZSB0aGUgZGFpbHkKICAgICAgICAgICAgICAgICAgICAgICAgZXhwZW5kaXR1cmUsIGFuZCBpdCBzaGFsbCBub3QgYmUgbGF3ZnVsIGZvciBQaG9ybWlvIHRvIGNhcnJ5IG9uIGEgYmFua2luZwogICAgICAgICAgICAgICAgICAgICAgICBidXNpbmVzcyBpbmRlcGVuZGVudGx5IHVubGVzcyBoZSBmaXJzdCBvYnRhaW5zIHRoZSBjb25zZW50IG9mIHRoZSBzb25zIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhc2lvLiBBbmQgUGFzaW8gb3dlcyB0aGUgYmFuayBlbGV2ZW4gdGFsZW50cyB1cG9uIHRoZSBkZXBvc2l0cy48L3RyYW5zbGF0aW9uPg=="
translation['45.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGlzIHRoZSBhZ3JlZW1lbnQgd2hpY2ggUGhvcm1pbyBwcm9kdWNlZCwgYWxsZWdpbmcgdGhhdCBoZSBoYWQgbGVhc2VkCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhbmsgdXBvbiB0aGVzZSB0ZXJtcy4gWW91IGxlYXJuIGZyb20gaGVhcmluZyBpdCByZWFkIHRoYXQgUGhvcm1pbywgb3ZlciBhbmQKICAgICAgICAgICAgICAgICAgICBhYm92ZSB0aGUgZGFpbHkgZXhwZW5kaXR1cmUsIHdhcyB0byBwYXkgYXMgcmVudCB0d28gdGFsZW50cyBhbmQgZm9ydHkgbWluYWUgZWFjaAogICAgICAgICAgICAgICAgICAgIHllYXIsIGFuZCB0aGF0IGl0IHdhcyBub3QgdG8gYmUgcGVybWl0dGVkIGhpbSB0byBjYXJyeSBvbiBhIGJhbmtpbmcgYnVzaW5lc3MsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIGhlIG9idGFpbmVkIG91ciBjb25zZW50OyBhbmQgdGhlcmUgaXMgYWRkZWQgYXMgYSBmaW5hbCBzdGF0ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAg4oCcUGFzaW8gb3dlcyBlbGV2ZW4gdGFsZW50cyB1cG9uIHRoZSBkZXBvc2l0cy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['45.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGlzIHRoZXJlIGFueSBtYW4gd2hvIHdvdWxkIGhhdmUgc3VibWl0dGVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHBheW1lbnQgb2Ygc28gbGFyZ2UgYSByZW50YWwgZm9yIHRoZSBjb3VudGVyLCB0aGUgc2l0ZSwgYW5kIHRoZSBib29rcz8gQW5kIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgYW55IG1hbiB3aG8gd291bGQgaGF2ZSBlbnRydXN0ZWQgdGhlIHJlc3Qgb2YgdGhlIGFzc2V0cyB0byBhIG1hbiB0aGFua3MgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHRoZSBiYW5rIGhhZCBpbmN1cnJlZCBzbyBncmVhdCBhIGxpYWJpbGl0eT88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGFzaW8gaXMgc3RhdGVkIGJ5IFBob3JtaW8gdG8gaGF2ZSBvd2VkIHRoZSBiYW5rIGVsZXZlbiB0YWxlbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM2LjQiIHZhbGlkPSJ5ZXMiPkRlbS4gMzYuNDwvYmlibD7vvIkuIFRoaXMgZGVidCBtYXkKICAgICAgICAgICAgICAgICAgICAgICAgYmUgYXNzdW1lZCB0byBoYXZlIGJlZW4gcHJvcGVybHkgc2VjdXJlZCwgc28gdGhhdCBpdCB3YXMgaW4gbm8gc2Vuc2UgYQogICAgICAgICAgICAgICAgICAgICAgICBkZWZpY2l0LiBUaGUgcHJlc2VudCBzcGVha2VyLCBob3dldmVyLCByZXByZXNlbnRzIGl0IGFzIHN1Y2gsIGFuZCBpbXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGJhbmsgaGFkIGJlZW4gYnJvdWdodCB0byBpbnNvbHZlbmNlIHRocm91Z2ggUGhvcm1pbydzCiAgICAgICAgICAgICAgICAgICAgICAgIGluY29tcGV0ZW5jZS48L25vdGU+IEZvciwgaWYgdGhlcmUgd2FzIGEgc2hvcnRhZ2Ugb2Ygc28gbGFyZ2UgYW4gYW1vdW50LCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBpbmN1cnJlZCB3aGlsZSBQaG9ybWlvIHdhcyBtYW5hZ2VyLiBGb3IgeW91IGFsbCBrbm93IHRoYXQsIHdoaWxlIG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyBlbmdhZ2VkIGluIHRoZSBiYW5raW5nIGJ1c2luZXNzLCBQaG9ybWlvIHNhdCBhdCB0aGUgY291bnRlciBhbmQgd2FzIGhpcwogICAgICAgICAgICAgICAgICAgIG1hbmFnZXI7IHNvIHRoYXQgaGUgb3VnaHQgcmF0aGVyIHRvIGJlIGluIHRoZSBtaWxsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNi40IiB2YWxpZD0ieWVzIj5EZW0uIDM2LjQ8L2JpYmw+77yJLiBUaGlzIGRlYnQgbWF5CiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGFzc3VtZWQgdG8gaGF2ZSBiZWVuIHByb3Blcmx5IHNlY3VyZWQsIHNvIHRoYXQgaXQgd2FzIGluIG5vIHNlbnNlIGEKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaWNpdC4gVGhlIHByZXNlbnQgc3BlYWtlciwgaG93ZXZlciwgcmVwcmVzZW50cyBpdCBhcyBzdWNoLCBhbmQgaW1wbGllcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBiYW5rIGhhZCBiZWVuIGJyb3VnaHQgdG8gaW5zb2x2ZW5jZSB0aHJvdWdoIFBob3JtaW8ncwogICAgICAgICAgICAgICAgICAgICAgICBpbmNvbXBldGVuY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNsYXZlcyB3ZXJlIG9mdGVuIGNvbmRlbW5lZCB0byB0aGUgaGVhdnkgbGFib3Igb2YgdHVybmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWlsbHN0b25lLjwvbm90ZT4gdGhhbiB0byBiZWNvbWUgbWFzdGVyIG9mIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBJIHBhc3Mgb3ZlciB0aGlzIGFuZCBhbGwgZWxzZQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBtaWdodCBmaW5kIHRvIHNheSBhYm91dCB0aGUgZWxldmVuIHRhbGVudHMsIHRvIHNob3cgdGhhdCBteSBmYXRoZXIgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IG93ZSB0aGVtIGJ1dCB0aGF0IFBob3JtaW8gc2VjcmV0bHkgYXBwcm9wcmlhdGVkIHRoZW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBsZXQgbWUgcmVtaW5kIHlvdSBvZiB0aGUgcHVycG9zZSBmb3Igd2hpY2ggSSByZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGxlYXNlLCBuYW1lbHksIHRvIHByb3ZlIHRoYXQgdGhlIHdpbGwgaXMgc3B1cmlvdXMuIEZvciBpdCBzdGFuZHMgd3JpdHRlbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzZSB0aGF0IGl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgZm9yIFBob3JtaW8gdG8gZW5nYWdlIGluIGJhbmtpbmcgYnVzaW5lc3MsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIGhlIG9idGFpbnMgb3VyIGNvbnNlbnQuIFRoaXMgY2xhdXNlIGFic29sdXRlbHkgcHJvdmVzIHRoZSB3aWxsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc3B1cmlvdXMuIEZvciB3aGF0IG1hbiwgd2hvIGhhZCB0YWtlbiBwcmVjYXV0aW9ucyB0aGF0IHRoZSBwcm9maXRzIHdoaWNoIFBob3JtaW8KICAgICAgICAgICAgICAgICAgICBtaWdodCBtYWtlIGJ5IGJhbmtpbmcgc2hvdWxkIGFjY3J1ZSB0byBoaXMgb3duIGNoaWxkcmVuIGFuZCBub3QgdG8gUGhvcm1pbwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYsIGFuZCB0byBzZWN1cmUgdGhpcyBlbmQgaGFkIHN0aXB1bGF0ZWQgdGhhdCBpdCBzaG91bGQgbm90IGJlIHBlcm1pdHRlZAogICAgICAgICAgICAgICAgICAgIGhpbSB0byBlbmdhZ2UgaW4gYmFua2luZyBmb3IgaGltc2VsZiwgbGVzdCBoaXMgaW50ZXJlc3RzIG1pZ2h0IGJlIHNlcGFyYXRlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgb3Vyc+KAlHdoYXQgbWFuLCBJIGFzaywgaW4gdGhlc2UgY2lyY3Vtc3RhbmNlcyB3b3VsZCBoYXZlIHByb3ZpZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIHNob3VsZCBnZXQgcG9zc2Vzc2lvbiBvZiB3aGF0IGhlIGhhZCBoaW1zZWxmIHdvbiBieSBoaXMgbGFib3IgYW5kIGxlZnQKICAgICAgICAgICAgICAgICAgICBpbiBoaXMgaG91c2U/IDwvdHJhbnNsYXRpb24+"
translation['45.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd291bGQgaGUgaGF2ZSBiZWdydWRnZWQgaGltCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhbmtpbmcgYnVzaW5lc3MsIGluIHdoaWNoIGhlIG1pZ2h0IGhhdmUgZ2l2ZW4gaGltIGEgc2hhcmUgd2l0aG91dCBkaXNncmFjZSwKICAgICAgICAgICAgICAgICAgICBhbmQgeWV0IGhhdmUgZ2l2ZW4gaGltIGhpcyB3aWZlLCBhIGJlcXVlc3QgZGlzZ3JhY2VmdWwgYWJvdmUgYWxsIG90aGVycz8gWWVzLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHJlY2VpdmluZyBmcm9tIHlvdSB0aGUgZ2lmdCBvZiBjaXRpemVuc2hpcCwgaGUgZ2F2ZSBoaXMgd2lmZSDvvIhpZgogICAgICAgICAgICAgICAgICAgIGluZGVlZCBoZSBnYXZlIGhlcu+8iSBhcyBhIHNsYXZlIGdpdmluZyB0byBoaXMgbWFzdGVyLCBhbmQgbm90LCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSwgYXMgYSBtYXN0ZXIgdG8gYSBzbGF2ZSwgYW5kIGhlIGFkZGVkIHN1Y2ggYSBkb3dyeSBhcyBubyBtYW4gaW4gQXRoZW5zCiAgICAgICAgICAgICAgICAgICAgd2FzIGV2ZXIga25vd24gdG8gZ2l2ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1vdGhlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBicm91Z2h0IHRvIGhlciBodXNiYW5kIGEgZG93cnkgb2Ygb25seSA4MCBtaW5hZSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjUiIHZhbGlkPSJ5ZXMiPkRlbS4gMjcuNTwvYmlibD7vvIk7IHRoZSBtb3RoZXIgb2YgTWFudGl0aGV1cyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgNjAgbWluYWUg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MC42IiB2YWxpZD0ieWVzIj5EZW0uIDQwLjY8L2JpYmw+77yJOyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHR3byBkYXVnaHRlcnMgb2YgUG9seWV1Y3R1cyBkb3dyaWVzIG9mIDQwIG1pbmFlIGVhY2gg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0MS4zIiB2YWxpZD0ieWVzIj5EZW0uIDQxLjM8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQxLjI3IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MS4yNzwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNSIgdmFsaWQ9InllcyI+RGVtLiAyNy41PC9iaWJsPu+8iTsgdGhlIG1vdGhlciBvZiBNYW50aXRoZXVzIG9uZQogICAgICAgICAgICAgICAgICAgICAgICBvZiA2MCBtaW5hZSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQwLjYiIHZhbGlkPSJ5ZXMiPkRlbS4gNDAuNjwvYmlibD7vvIk7IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdHdvIGRhdWdodGVycyBvZiBQb2x5ZXVjdHVzIGRvd3JpZXMgb2YgNDAgbWluYWUgZWFjaCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQxLjMiIHZhbGlkPSJ5ZXMiPkRlbS4gNDEuMzwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDEuMjciIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQxLjI3PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['45.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCB0byBoYXZlIGJlZW4gaG9ub3JlZCB3aXRoIHRoZSBoYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG1pc3RyZXNzIHdhcyBvZiBpdHNlbGYgZW5vdWdoIHRvIG1ha2UgdGhpcyBmZWxsb3cgY29udGVudCwgd2hlcmVhcyBpbiBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlcidzIGNhc2UsIGV2ZW4gaWYgaGUgcmVjZWl2ZWQgYXMgbXVjaCBtb25leSBhcyB0aGVzZSBwZW9wbGUgYWxsZWdlIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBnYXZlLCBpdCB3YXMgbm90IHJlYXNvbmFibGUgZm9yIGhpbSB0byBtYWtlIHRoaXMgYXJyYW5nZW1lbnQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGl0IHdvdWxkIG5vdCBoYXZlIGJlZW4gcmVhc29uYWJsZSBmb3IgaGltIHRvIGxlYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyB3aWZlIHRvIGhpcyBmb3JtZXIgc2xhdmUgZXZlbiBpZiBoZSBoYWQgcmVjZWl2ZWQgYXMgYSBicmliZSB0aGUgbGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgc3VtIHdoaWNoIGhlIGlzIGFsbGVnZWQgdG8gaGF2ZSBnaXZlbiBhcyBhIG1hcnJpYWdlIHBvcnRpb24uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIE5ldmVydGhlbGVzcywgdG8gdGhpbmdzIHdoaWNoIGFyZSBwcm92ZWQgdG8gYmUgZmFsc2UgYnkgdGhlIHByb2JhYmlsaXRpZXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdGVzIGFuZCB0aGUgZmFjdHMsIHRvIHRoZXNlIHRoaXMgbWFuIFN0ZXBoYW51cyBoYXMgbm90IGhlc2l0YXRlZCB0byBkZXBvc2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiBoZQogICAgICAgICAgICAgICAgICAgIGdvZXMgYWJvdXQsIHNheWluZyB0aGF0IE5pY29jbGVzIHRlc3RpZmllZCB0aGF0IGhlIGhhZCBzZXJ2ZWQgYXMgZ3VhcmRpYW4gdW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGUgd2lsbCwgYW5kIFBhc2ljbGVzIHRoYXQgaGUgaGFkIGxpdmVkIGFzIHdhcmQgdW5kZXIgdGhlIHdpbGwuIEJ1dCBmb3IgbXkgcGFydAogICAgICAgICAgICAgICAgICAgIEkgaG9sZCB0aGF0IHRoZXNlIHZlcnkgZmFjdHMgYXJlIHByb29mcyB0aGF0IG5laXRoZXIgdGhlc2Ugd2l0bmVzc2VzIG5vciB0aG9zZQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGVzdGlmaWVkIHRvIHRoZSB0cnV0aC4gRm9yIGEgcGVyc29uIHdobyB0ZXN0aWZpZXMgdGhhdCBoZSBzZXJ2ZWQgYXMKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbiB1bmRlciBhIHdpbGwgc2hvdWxkIGNlcnRhaW5seSBrbm93IHdoYXQgdGhlIG5hdHVyZSBvZiB0aGUgd2lsbCB3YXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGEgcGVyc29uIHdobyB0ZXN0aWZpZXMgdGhhdCBoZSBsaXZlZCBhcyB3YXJkIHVuZGVyIGEgd2lsbCBzaG91bGQgY2VydGFpbmx5IGtub3cKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSBuYXR1cmUgb2YgdGhlIHdpbGwgd2FzLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd29ybGQsIHRoZW4sIFN0ZXBoYW51cywgZGlkIHlvdSBwZW9wbGUgZGVwb3NlIHRvIHRoZSB3aWxsIHVuZGVyIHRoZSBmb3JtIG9mIGEKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsIGluc3RlYWQgb2YgbGVhdmluZyB0aGUgbWF0dGVyIHRvIHRoZW0/IElmIHRoZXkgb24gdGhlaXIgcGFydCBzaGFsbAogICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgdGhhdCB0aGV5IGRvIG5vdCBrbm93IHRoZSBjb250ZW50cyBvZiB0aGUgd2lsbCwgaG93IGlzIGl0IHBvc3NpYmxlIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSB0byBrbm93IHRoZW0sIHlvdSB3aG8gaGF2ZSBuZXZlciBpbiBhbnkgd2F5IGJlZW4gY29ubmVjdGVkIHdpdGggdGhlIG1hdHRlcj8KICAgICAgICAgICAgICAgICAgICBXaHksIHByYXksIGlzIGl0IHRoYXQgb25lIGdyb3VwIG9mIHdpdG5lc3NlcyB0ZXN0aWZpZWQgdG8gdGhlc2UgZmFjdHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgZ3JvdXAgdG8gdGhvc2U/IEl0IGlzIGFzIEkgaGF2ZSBhbHJlYWR5IHRvbGQgeW91OiB0aGV5IGRpdmlkZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJhdWQuIFRoZSBvbmUgc28gdGVzdGlmeWluZyBzYXcgbm8gZGFuZ2VyIGluIGRlcG9zaW5nIHRoYXQgaGUgc2VydmVkIGFzCiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW4gdW5kZXIgdGhlIHdpbGwsIG9yIHRoYXQgaGUgbGl2ZWQgYXMgd2FyZCB1bmRlciB0aGUgd2lsbCwgPC90cmFuc2xhdGlvbj4="
translation['45.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5lYWNoIG9uZSBvZiB0aGVtIG9taXR0aW5nIHRvIHN0YXRlIHdoYXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICB3cml0dGVuIGluIHRoZSB3aWxsIGJ5IFBob3JtaW8s4oCUbm8gZGFuZ2VyIGluIGRlcG9zaW5nIHRoYXQgb25lJ3MKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaGFkIGxlZnQgaGltIGEgZG9jdW1lbnQgd2l0aCB0aGUgd29yZCDigJx3aWxs4oCdIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICBvbiBpdCwgb3IgYW55dGhpbmcgb2YgdGhhdCBzb3J0LiBCdXQgdG8gdGVzdGlmeSB0byB0aGUgZXhpc3RlbmNlIG9mIGEgd2lsbCBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlcmUgaW52b2x2ZWQgdGhlIHRoZWZ0IG9mIHN1Y2ggdmFzdCBzdW1zLCB0aGUgY29ycnVwdGlvbiBvZiBhIGxhZHksIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlIG9mIGEgbWlzdHJlc3Mgd2l0aCBoZXIgc2xhdmUsIG1hdHRlcnMgd2hpY2ggZW50YWlsZWQgc3VjaCBzaGFtZSBhbmQKICAgICAgICAgICAgICAgICAgICBkaXNncmFjZeKAlG5vYm9keSB3YXMgcmVhZHkgdG8gZG8gdGhpcyBzYXZlIHRoZXNlIG1lbiB3aG8gZ290IHVwIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZTsgYW5kIGZyb20gdGhlbSBpdCBpcyByaWdodCB0byBleGFjdCB0aGUgcGVuYWx0eSBmb3IgdGhlIHdob2xlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICB2aWxsYWlub3VzIGZyYXVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgQXRoZW5zLCB0aGF0IGl0IG1heSBiZSBtYWRlIGNsZWFyIHRvIHlvdSB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3cgU3RlcGhhbnVzIGhhcyBnaXZlbiBmYWxzZSB0ZXN0aW1vbnnigJRtYWRlIGNsZWFyIG5vdCBtZXJlbHkgYnkgbXkKICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9ucyBhbmQgcHJvb2ZzLCBidXQgYWxzbyBieSB0aGUgYWN0cyBvZiB0aGUgcGVyc29uIHdobyBicm91Z2h0IGhpbQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgYXMgYSB3aXRuZXNz4oCUSSB3aXNoIHRvIHRlbGwgeW91IHdoYXQgdGhhdCBwZXJzb24gaGFzIGRvbmUuIEFzCiAgICAgICAgICAgICAgICAgICAgSSBzYWlkIGF0IHRoZSBiZWdpbm5pbmcgb2YgbXkgc3BlZWNoLCBJIHNoYWxsIHNob3cgdGhhdCB0aGV5IGFyZSB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBhY2N1c2Vycy4gSW4gdGhlIHN1aXQgaW4gd2hpY2ggdGhpcyB0ZXN0aW1vbnkgd2FzIGdpdmVuLCBQaG9ybWlvIGVudGVyZWQgYQogICAgICAgICAgICAgICAgICAgIHNwZWNpYWwgcGxlYSB0byBlc3RvcCBtZSBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIHN1aXQgd2FzIG5vdCBhZG1pc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIGFsbGVnaW5nIHRoYXQgSSBoYWQgcmVsZWFzZWQgaGltIGZyb20gYWxsIGNsYWltcy4gPC90cmFuc2xhdGlvbj4="
translation['45.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBteXNlbGYga25vdyB0aGF0IHRoaXMgaXMgZmFsc2UsIGFuZCBJIHNoYWxsIHByb3ZlIGl0IHNvIHdoZW4gSQogICAgICAgICAgICAgICAgICAgIHByb2NlZWQgYWdhaW5zdCB0aG9zZSB3aG8gZ2F2ZSB0aGlzIHRlc3RpbW9ueTsgYnV0IFN0ZXBoYW51cyBpcyBub3QgYXQgbGliZXJ0eQogICAgICAgICAgICAgICAgICAgIHRvIHNheSBpdCBpcyBmYWxzZS4gSWYsIHRoZW4sIHlvdSBzaG91bGQgYmVsaWV2ZSBpbiB0aGUgZ2VudWluZW5lc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSwgdGhpcywgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHdvdWxkIHByb3ZlIHRoYXQgdGhlIGZlbGxvdyBoYXMgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBmYWxzZSB0ZXN0aW1vbnksIGFuZCBoYXMgZGVwb3NlZCB0byBhIHdpbGwgdGhhdCBpcyBmb3JnZWQuIEZvciB3aG8gd291bGQgYmUgc28KICAgICAgICAgICAgICAgICAgICBzZW5zZWxlc3MgYXMgdG8gZ2l2ZSBhIHJlbGVhc2UgaW4gdGhlIHByZXNlbmNlIG9mIHdpdG5lc3NlcywgdGhhdCBoaXMgZGlzY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYmUgYmluZGluZywgYW5kIHlldCB0byBzdWZmZXIgdGhlIGFydGljbGVzIG9mIGFncmVlbWVudCwgdGhlIHdpbGwsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBkb2N1bWVudHMgcmVnYXJkaW5nIHdoaWNoIGhlIGdhdmUgdGhlIHJlbGVhc2UsIHRvIHJlbWFpbiB1bmRlciBzZWFsIGFzCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgYWdhaW5zdCBoaW1zZWxmPyA8L3RyYW5zbGF0aW9uPg=="
translation['45.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BlY2lhbCBwbGVhLAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgY29udHJhZGljdHMgYWxsIHRoZSBldmlkZW5jZSwgYW5kIHRoZSBsZWFzZSB3aGljaCBJIGp1c3Qgbm93IHJlYWQgdG8KICAgICAgICAgICAgICAgICAgICB5b3UgY29udHJhZGljdHMgdGhpcyB3aWxsOyBub3Qgb25lIG9mIHRoZWlyIGFjdHMgaXMgZWl0aGVyIHJlYXNvbmFibGUgb3IKICAgICAgICAgICAgICAgICAgICBzdHJhaWdodGZvcndhcmQgb3IgY29uc2lzdGVudCB3aXRoIGl0c2VsZi4gSW4gdGhpcyBtYW5uZXIgdGhlaXIgd2hvbGUgc3RvcnkgaXMKICAgICAgICAgICAgICAgICAgICBzaG93biB0byBiZSBhIGZpY3Rpb24gYW5kIGEgZnJhdWQuIDwvdHJhbnNsYXRpb24+"
translation['45.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUgc3RhdGVtZW50cyBpbiB0aGUgZGVwb3NpdGlvbiBhcmUgdHJ1ZSBJIGhvbGQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5laXRoZXIgU3RlcGhhbnVzIGhpbXNlbGYgbm9yIGFueW9uZSBlbHNlIGluIGhpcyBiZWhhbGYgd2lsbCBiZSBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmUuIEkgaGVhciwgaG93ZXZlciwgdGhhdCBoZSBpcyBwcmVwYXJlZCB0byBtYWtlIHNvbWUgc3VjaCBzdGF0ZW1lbnQgYXMgdGhpcywKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGlzIHJlc3BvbnNpYmxlIGZvciBhIGNoYWxsZW5nZSwgbm90IGZvciBhIGRlcG9zaXRpb24sIGFuZCB0aGF0IGhlIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGJlIGhlbGQgdG8gYWNjb3VudCwgbm90IGZvciBldmVyeXRoaW5nIHdyaXR0ZW4gaW4gaXQsIGJ1dCBmb3IgdHdvIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIG9ubHnigJR3aGV0aGVyIFBob3JtaW8gdGVuZGVyZWQgbWUgdGhpcyBjaGFsbGVuZ2Ugb3Igbm90LCBhbmQgd2hldGhlciBJCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCBpdDsgdGhlc2UgbWF0dGVycyBhbmQgbm8gbW9yZSwgaGUgd2lsbCBzYXksIHdlcmUgaW5jbHVkZWQgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbjsgYXMgZm9yIHRoZSByZXN0LCBQaG9ybWlvIGNvdmVyZWQgdGhlbSBpbiBoaXMgY2hhbGxlbmdlLCBidXQgd2hldGhlcgogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSB0cnVlIG9yIG5vdCBpdCB3YXMgbm90IHRoZSBidXNpbmVzcyBvZiB0aGUgd2l0bmVzcyB0byBpbnF1aXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBhbnN3ZXIgdG8gdGhpcyBhcmd1bWVudCBhbmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuJ3MgaW1wdWRlbmNlIGl0IGlzIGJldHRlciB0aGF0IEkgc2F5IGEgZmV3IHdvcmRzIHRvIHlvdSBpbiBhZHZhbmNlLCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGJlIG5vdCB0YWtlbiBhdCB1bmF3YXJlcyBhbmQgbWlzbGVkLiBJbiB0aGUgZmlyc3QgcGxhY2UsIHdoZW4gaGUgdHJpZXMgdG8gYnJpbmcKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIHRoZSBhcmd1bWVudCB0aGF0IGhlIGlzIG5vdCByZXNwb25zaWJsZSBmb3IgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24sIGJlYXIgaW4gbWluZCB0aGF0IHRoZSByZWFzb24gd2h5IHRoZSBsYXcgcmVxdWlyZXMgcGVvcGxlIHRvIGdpdmUKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBpbiB3cml0dGVuIGZvcm0gaXMgdGhhdCBpdCBtYXkgbm90IGJlIG9wZW4gdG8gdGhlbSB0byBzdHJpa2Ugb3V0IGFueQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2Ygd2hhdCBoYXMgYmVlbiB3cml0dGVuLCBvciBhZGQgYW55dGhpbmcgdG8gaXQuIEhlIHNob3VsZCBhdCB0aGUgdGltZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgdGhlIGVyYXN1cmUgb2YgdGhlIHN0YXRlbWVudHMgdG8gd2hpY2ggaGUgd2lsbCBub3cgZGVueSBoYXZpbmcgZGVwb3NlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHRyeSBub3cgdG8gYnJhemVuIGl0IG91dCwgd2hpbGUgdGhleSBzdGFuZCBpbiB0aGUgZG9jdW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['45.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgY29uc2lkZXIgdGhpcyB0b28sIHdoZXRoZXIgeW91IHdvdWxkIHN1ZmZlcgogICAgICAgICAgICAgICAgICAgIG1lIGluIHlvdXIgcHJlc2VuY2UgdG8gdGFrZSB0aGUgZG9jdW1lbnQgYW5kIGFkZCB0byBpdC4gT2YgY291cnNlIHlvdSB3b3VsZCBub3QuCiAgICAgICAgICAgICAgICAgICAgV2VsbCwgdGhlbiwgbmVpdGhlciBpcyBpdCBmaXR0aW5nIHRvIHN1ZmZlciBoaW0gdG8gc3RyaWtlIG91dCBhbnkgb2YgaXRzCiAgICAgICAgICAgICAgICAgICAgY29udGVudHMuIEZvciB3aG8gd2lsbCBldmVyIGJlIGNvbnZpY3RlZCBvZiBnaXZpbmcgZmFsc2UgdGVzdGltb255LCBpZiBoZSBpcyB0bwogICAgICAgICAgICAgICAgICAgIGRlcG9zZSB0byB3aGF0IGhlIHBsZWFzZXMsIGFuZCBiZSBhY2NvdW50YWJsZSBvbmx5IGZvciB3aGF0IGhlIHBsZWFzZXM/IE5vLCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXcgZG9lcyBub3QgdGh1cyBtYWtlIGEgZGlzdGluY3Rpb24gaW4gdGhlc2UgbWF0dGVycywgYW5kIHlvdSBvdWdodCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBsaXN0ZW4gdG8gc3VjaCBhIHRoaW5nIGVpdGhlci4gVGhlIHN0cmFpZ2h0Zm9yd2FyZCBhbmQgaG9uZXN0IGNvdXJzZSBpcyB0aGlzOgogICAgICAgICAgICAgICAgICAgIOKAnFdoYXQgc3RhbmRzIHdyaXR0ZW4/IFRvIHdoYXQgaGF2ZSB5b3UgZGVwb3NlZD8gU2hvdyB0aGF0IHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICB0cnVlLiBGb3IgeW91IGhhdmUgd3JpdHRlbiBpbiB5b3VyIHBsZWEgaW4gYW5zd2VyIHRvIHRoZSBjb21wbGFpbnQgdGhlc2Ugd29yZHMsCiAgICAgICAgICAgICAgICAgICAgJ0kgaGF2ZSBnaXZlbiB0cnVlIHRlc3RpbmlvbnkgaW4gdGVzdGlmeWluZyB0byB3aGF0IGlzIGNvbnRhaW5lZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uJ+KAlG5vdCAndG8gdGhpcyBvciB0aGF0IGluIHRoZSBkZXBvc2l0aW9uLifigJ0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgaXMgc28sIHRha2UsIHBsZWFzZSwgdGhlIHBsZWEgaXRzZWxmLiBSZWFkIGl0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbXBsYWludCI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29tcGxhaW50IGFuZCBDb3VudGVyLVBsZWE8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcG9sbG9kb3J1cywgc29uIG9mIFBhc2lvLCBvZiBBY2hhcm5hZSwgc3VlcyBTdGVwaGFudXMsIHNvbiBvZiBNZW5lY2xlcywKICAgICAgICAgICAgICAgICAgICAgICAgb2YgQWNoYXJuYWUsIGZvciBmYWxzZSB0ZXN0aW1vbnk7IGRhbWFnZXMgb25lIHRhbGVudC4gU3RlcGhhbnVzIGdhdmUgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGFnYWluc3QgbWUgaW4gdGVzdGlmeWluZyB0byB0aGF0IHdoaWNoIGlzIGNvbnRhaW5lZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBnYXZlIHRydWUgdGVzdGltb255IGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnlpbmcgdG8gdGhhdCB3aGljaCBpcyBjb250YWluZWQgaW4gdGhlIHJlY29yZC48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbXBsYWludCBhbmQgQ291bnRlci1QbGVhPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXBvbGxvZG9ydXMsIHNvbiBvZiBQYXNpbywgb2YgQWNoYXJuYWUsIHN1ZXMgU3RlcGhhbnVzLCBzb24gb2YgTWVuZWNsZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIEFjaGFybmFlLCBmb3IgZmFsc2UgdGVzdGltb255OyBkYW1hZ2VzIG9uZSB0YWxlbnQuIFN0ZXBoYW51cyBnYXZlIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBhZ2FpbnN0IG1lIGluIHRlc3RpZnlpbmcgdG8gdGhhdCB3aGljaCBpcyBjb250YWluZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgZ2F2ZSB0cnVlIHRlc3RpbW9ueSBpbgogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5aW5nIHRvIHRoYXQgd2hpY2ggaXMgY29udGFpbmVkIGluIHRoZSByZWNvcmQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgaXMgdGhlIHBsZWEgd2hpY2ggdGhlIGRlZmVuZGFudCBoaW1zZWxmIGhhcwogICAgICAgICAgICAgICAgICAgIGVudGVyZWQuIFlvdSBtdXN0IGtlZXAgaXQgaW4gbWluZCwgYW5kIG5vdCByZWdhcmQgdGhlIGRlY2VpdGZ1bCBsYW5ndWFnZSB3aGljaAogICAgICAgICAgICAgICAgICAgIHdpbGwgc29vbiBiZSBhZGRyZXNzZWQgdG8geW91IGFzIGJlaW5nIG1vcmUgd29ydGh5IG9mIGNyZWRlbmNlIHRoYW4gdGhlIGxhd3MgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCB0aGUgZGVmZW5kYW50IGhhcyB3cml0dGVuIGluIGhpcyBvd24gcGxlYS4gPC90cmFuc2xhdGlvbj4="
translation['45.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBsZWFybiB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIHNwZWFrIGFib3V0CiAgICAgICAgICAgICAgICAgICAgbXkgb3JpZ2luYWwgc3VpdCBhbmQgdG8gZGVub3VuY2UgaXQgYXMgYmFzZWxlc3MgYW5kIG1hbGljaW91cy4gQnV0IEkgb24gbXkgcGFydAogICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSBtZW50aW9uZWQgdG8geW91IGFuZCBleHBsYWluZWQgaW4gZGV0YWlsIHRoZSBtYW5uZXIgaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvIGNvbmNvY3RlZCB0aGUgbGVhc2UsIGluIG9yZGVyIHRvIGdldCBpbnRvIGhpcyBwb3NzZXNzaW9uIHRoZQogICAgICAgICAgICAgICAgICAgIGJhbmtpbmctc3RvY2ssIGFuZCBJIHNob3VsZCBiZSB1bmFibGUgdG8gc3BlYWsgb2YgdGhlc2Ugb3RoZXIgbWF0dGVycyBhbmQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB0aW1lIGNvbnZpY3QgdGhlc2UgbWVuIG9mIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnk7IGZvciB0aGUgYW1vdW50IG9mIHdhdGVyCiAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgbWUgaXMgbm90IHN1ZmZpY2llbnQuIDwvdHJhbnNsYXRpb24+"
translation['45.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIGNvdWxkIG5vdCBpbiBmYWlybmVzcyBiZSB3aWxsaW5nIHRvIGxpc3RlbiB0byB0aGVtIGluIHJlZ2FyZCB0byB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgeW91IHdpbGwgc2VlIGF0IG9uY2UsIGlmIHlvdSByZWZsZWN0IHRoYXQgaXQgaXMgbm8gZGlmZmljdWx0IG1hdHRlciB0bwogICAgICAgICAgICAgICAgICAgIHNwZWFrIG5vdyBhYm91dCBzdWJqZWN0cyBjb25jZXJuaW5nIHdoaWNoIG5vIGNoYXJnZSBpcyBtYWRlLCBqdXN0IGFzIGl0IHdhcyBubwogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdCBtYXR0ZXIgZm9yIFBob3JtaW8gdG8gZ2V0IGhpbXNlbGYgYWNxdWl0dGVkIGJ5IHJlYWRpbmcgZmFsc2UKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy4gSG93ZXZlciwgbm8gbWFuIHdvdWxkIHNheSB0aGF0IGVpdGhlciBvZiB0aGVzZSBjb3Vyc2VzIGlzIHJpZ2h0LAogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0IGNvdXJzZSByYXRoZXIgd2hpY2ggSSBhbSBhYm91dCB0byBwcm9wb3NlLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5MaXN0ZW4sIGFuZCBqdWRnZS4gSSBkZW1hbmQgdGhhdCB0aGV5IGRvIG5vdCBub3cgc2VlayBmb3IgdGhlIHByb29mcwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyBteSBjaGFyZ2VzLCBwcm9vZnMgd2hpY2ggc2hvdWxkIGhhdmUgYmVlbiBtZW50aW9uZWQgYXQgdGhlIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHRyaWFsLCBidXQgb2Ygd2hpY2ggdGhleSBkZXByaXZlZCBtZTsgYnV0IHRoYXQgdGhleSBwcm92ZSB0aGF0IHRoZSB0ZXN0aW1vbnkgYnkKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGRlcHJpdmVkIG1lIG9mIHRoZW0gd2FzIHRydWUuIElmLCB3aGVuIEkgYnJpbmcgaW4gbXkgc3VpdCwgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICB0byBkZW1hbmQgdGhhdCBJIHJlZnV0ZSB0aGVpciB0ZXN0aW1vbnksIGFuZCwgd2hlbiBJIHByb2NlZWQgYWdhaW5zdCB0aGF0LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlIHRvIGJpZCBtZSBzcGVhayByZWdhcmRpbmcgbXkgb3JpZ2luYWwgY2hhcmdlcywgd2hhdCB0aGV5IHByb3Bvc2Ugd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgcmlnaHQgbm9yIGluIHlvdXIgaW50ZXJlc3QuIDwvdHJhbnNsYXRpb24+"
translation['45.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzd29ybiB0byBnaXZlIGEgdmVyZGljdCwgbm90IGluIHJlZ2FyZCB0byBtYXR0ZXJzIHVwb24gd2hpY2ggdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIGFza3MgeW91ciBkZWNpc2lvbiwgYnV0IGluIHJlZ2FyZCB0byB0aG9zZSBvbmx5IHdoaWNoIGFyZSByYWlzZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRpb24uIFRoZSBjYXVzZSBvZiBhY3Rpb24gbXVzdCBiZSBtYWRlIGNsZWFyIGJ5IHRoZSBjb21wbGFpbnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRvciwgYW5kIHRoaXMgaW4gbXkgY2FzZSBpcyBhIHN1aXQgYWdhaW5zdCB0aGlzIG1hbiBmb3IgZmFsc2UgdGVzdGltb255LgogICAgICAgICAgICAgICAgICAgIExldCBoaW0gbm90LCB0aGVuLCBsZWF2ZSB0aGlzIGFuZCB0YWxrIGFib3V0IG1hdHRlcnMgcmVnYXJkaW5nIHdoaWNoIEkgYW0gbm90CiAgICAgICAgICAgICAgICAgICAgc3VpbmcgaGltOyBhbmQgZG8geW91LCBpZiBoZSBpcyBzbyBzaGFtZWxlc3MsIHJlZnVzZSB0byBwZXJtaXQgaXQuIDwvdHJhbnNsYXRpb24+"
translation['45.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBpbWFnaW5lIHRoYXQsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG5vIGp1c3QgYXJndW1lbnQgdG8gYWR2YW5jZSBvbiBhbnkgcG9pbnQsIGhlIHdpbGwgaGF2ZSByZWNvdXJzZSB0byB0aGlzIGRlZmVuY2UKICAgICAgICAgICAgICAgICAgICBhbHNv4oCUdGhhdCBpdCBpcyBhYnN1cmQgZm9yIG1lLCBhZnRlciBoYXZpbmcgYmVlbiB3b3JzdGVkIGluIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNwZWNpYWwgcGxlYSwgdG8gc3VlIHRob3NlIHdobyBnYXZlIGV2aWRlbmNlIG9mIGEgd2lsbDsgYW5kIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBtYWludGFpbiB0aGF0IHRoZSBqdXJ5bWVuIGluIHRoYXQgdHJpYWwgd2VyZSBsZWQgdG8gdm90ZSBpbiBmYXZvciBvZiBQaG9ybWlvLCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBldmlkZW5jZSBvZiB0aG9zZSB3aG8gdGVzdGlmaWVkIHRvIHRoZSByZWxlYXNlIHJhdGhlciB0aGFuIGJ5IHRoYXQgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gdGVzdGlmaWVkIHRvIHRoZSB3aWxsLiBCdXQsIG1lbiBvZiBBdGhlbnMsIEkgdGhpbmsgeW91IGFsbCBrbm93IHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICB5b3VyIGhhYml0IHRvIGV4YW1pbmUgdGhlIGZhY3RzIG5vIGxlc3MgY2xvc2VseSB0aGFuIHRoZSBwbGVhcyB3aGljaCBtZW4gbWFrZQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGVtOyBhbmQgdGhlc2UgbWVuLCBieSBnaXZpbmcgZmFsc2UgdGVzdGltb255IGFnYWluc3QgbWUgcmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzIHRoZW1zZWx2ZXMsIHdlYWtlbmVkIG15IGFyZ3VtZW50cyBvbiB0aGUgc3BlY2lhbCBwbGVhLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBiZXNpZGVzIHRoaXMsIGl0IGlzIGFic3VyZCwgd2hlbiBhbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIGZhbHNlIGV2aWRlbmNlLCB0byBkZW1vbnN0cmF0ZSB3aG8gZGlkIHRoZSBncmVhdGVzdCBhbW91bnQgb2YgaGFybSwKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIG1ha2luZyBlYWNoIG9uZSBwcm92ZSB0aGF0IGhlIGhhcyBoaW1zZWxmIHRlc3RpZmllZCB0byB0aGUgdHJ1dGguIEl0CiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGJ5IHByb3ZpbmcgdGhhdCBhbm90aGVyIGhhcyBkb25lIG1vcmUgb3V0cmFnZW91cyB0aGluZ3MgdGhhbiBoaW1zZWxmIHRoYXQKICAgICAgICAgICAgICAgICAgICBhIHdpdG5lc3MgaXMgdG8gYmUgbGV0IG9mZiwgYnV0IGJ5IHNob3dpbmcgdGhhdCBoZSBoYXMgaGltc2VsZiBnaXZlbiB0ZXN0aW1vbnkKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIHRydWUuIDwvdHJhbnNsYXRpb24+"
translation['45.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgQXRoZW5zLCBsZXQgbWUgc2hvdyB5b3UgdGhlIHRoaW5nIGZvciB3aGljaCBtb3JlIHRoYW4gYW55dGhpbmcKICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMgZmVsbG93IFN0ZXBoYW51cyBkZXNlcnZlcyB0byBiZSBwdXQgdG8gZGVhdGguIEl0IGlzIGFuIGF3ZnVsIHRoaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgYmVhciBmYWxzZSB3aXRuZXNzIGFnYWluc3QgYW55b25lIHdob21zb2V2ZXIsIGJ1dCBpdCBpcyBhIHRoaW5nIG1vcmUgYXdmdWwgYnkKICAgICAgICAgICAgICAgICAgICBmYXIsIGFuZCBtb3JlIGRlc2VydmluZyBvZiBpbmRpZ25hdGlvbiwgdG8gYmVhciBmYWxzZSB3aXRuZXNzIGFnYWluc3QgdGhvc2Ugb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIG93biBibG9vZDsgZm9yIGEgbWFuIG9mIHRoYXQgc3RhbXAgdmlvbGF0ZXMsIG5vdCB0aGUgd3JpdHRlbiBsYXdzIGFsb25lLAogICAgICAgICAgICAgICAgICAgIGJ1dCBhbHNvIHRoZSB0aWVzIG9mIG5hdHVyYWwgcmVsYXRpb25zaGlwLiBUaGlzLCB0aGVuLCBTdGVwaGFudXMgc2hhbGwgYmUgcHJvdmVkCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSBkb25lLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGlzIG1vdGhlciBhbmQgdGhlIGZhdGhlciBvZgogICAgICAgICAgICAgICAgICAgIG15IHdpZmUgYXJlIGEgYnJvdGhlciBhbmQgc2lzdGVyLCBzbyB0aGF0IG15IHdpZmUgaXMgaGlzIGZpcnN0IGNvdXNpbiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGJvcm4gdG8gaGVyIGFuZCB0byBtZSBhcmUgaGlzIGNvdXNpbidzIGNoaWxkcmVuLiBEbyB5b3UgdGhpbmssIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIG1hbiwgaWYgaGUgc2F3IGhpcyBmZW1hbGUgcmVsYXRpdmVzIGRyaXZlbiBieSB3YW50IHRvIHNoYW1lZnVsCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucywgd291bGQgZ2l2ZSB0aGVtIGluIG1hcnJpYWdlIGFuZCBhZGQgbWFycmlhZ2UgcG9ydGlvbnMgb3V0IG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXPigJRhIHRoaW5nIHdoaWNoIG1hbnkgYSBtYW4gaGFzIGRvbmUgZXJlIG5vd+KAlHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoYXMgY2hvc2VuIHRvIGdpdmUgZmFsc2UgdGVzdGltb255IGluIG9yZGVyIHRvIHByZXZlbnQgdGhlaXIgZ2V0dGluZyB3aGF0CiAgICAgICAgICAgICAgICAgICAgYmVsb25ncyB0byB0aGVtLCBhbmQgaGFzIGNvdW50ZWQgdGhlIHdlYWx0aCBvZiBQaG9ybWlvIG9mIGhpZ2hlciB3b3J0aCB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIHN0cm9uZyB0aWVzIG9mIGtpbnNoaXA/IDwvdHJhbnNsYXRpb24+"
translation['45.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdGhhdCBJIGFtIHRlbGxpbmcgdGhlIHRydXRoIGluIHRoaXMsIHRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiBvZiBEZWluaWFzIGFuZCByZWFkIGl0OyBhbmQgY2FsbCBEZWluaWFzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EZWluaWFzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgVGhlb21uZXN0dXMsIG9mIEF0aG1vbm9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdGhtb25vbiB3YXMgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVtZSBvZiB0aGUgdHJpYmUgQ2Vjcm9waXMuPC9ub3RlPiBkZXBvc2VzIHRoYXQgaGUgZ2F2ZSBoaXMgZGF1Z2h0ZXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgdG8gbGl2ZSB3aXRoIGhpbSBhcyBoaXMgd2lmZSBhY2NvcmRpbmcgdG8gdGhlIGxhd3MsIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBuZXZlciBwcmVzZW50IHdoZW4gQXBvbGxvZG9ydXMgcmVsZWFzZWQgUGhvcm1pbyBmcm9tIGFsbCBjbGFpbXMsIG5vciB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZXZlciBhd2FyZSB0aGF0IGhlIGhhZCBkb25lIHNvLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRlaW5pYXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaGVvbW5lc3R1cywgb2YgQXRobW9ub24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkF0aG1vbm9uIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW1lIG9mIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+IGRlcG9zZXMgdGhhdCBoZSBnYXZlIGhpcyBkYXVnaHRlciB0bwogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cyB0byBsaXZlIHdpdGggaGltIGFzIGhpcyB3aWZlIGFjY29yZGluZyB0byB0aGUgbGF3cywgYW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIG5ldmVyIHByZXNlbnQgd2hlbiBBcG9sbG9kb3J1cyByZWxlYXNlZCBQaG9ybWlvIGZyb20gYWxsIGNsYWltcywgbm9yIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBldmVyIGF3YXJlIHRoYXQgaGUgaGFkIGRvbmUgc28uPC90cmFuc2xhdGlvbj4="
translation['45.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RGVpbmlhcywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIGlzIHZlcnkgbGlrZSBTdGVwaGFudXMsIGlzIGhlIG5vdD/igJREZWluaWFzLCB3aG8gb24gYWNjb3VudAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyByZWxhdGlvbnNoaXAsIHJlZnVzZXMgdG8gdGVzdGlmeSBhZ2FpbnN0IHRoZSBkZWZlbmRhbnQgZXZlbiB0byB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdHJ1ZSwgYW5kIG9uIGJlaGFsZiBvZiBoaXMgZGF1Z2h0ZXIgYW5kIGhpcyBkYXVnaHRlcidzIGNoaWxkcmVuLCBhbmQgbWUsIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzb24taW4tbGF3ITxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XZSBtdXN0IGFzc3VtZSB0aGF0IERlaW5pYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gY2FsbGVkIHVwb24sIHJlZnVzZWQgdG8gc3dlYXIgdG8gdGhlIGRlcG9zaXRpb24gd2hpY2ggd2FzIHJlYWQKICAgICAgICAgICAgICAgICAgICAgICAg77yId2hldGhlciB0aGUgZGVwb3NpdGlvbiBnaXZlbiBpbiB0aGUgdGV4dCBpcyBhdXRoZW50aWMgb3Igbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbm5vdCBiZSBkZXRlcm1pbmVkIHdpdGggY2VydGFpbnR577yJLiBIZSBtdXN0LCB0aGVyZWZvcmUsIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgdGFrZW4gdGhlIG9hdGggb2YgZGlzY2xhaW1lciDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOvs+JzrzOv8+D4b23zrE8L2ZvcmVpZ24+77yJLCBhbHRob3VnaCB0aGlzIGlzIG5vdCBzdGF0ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQuIEFwb2xsb2RvcnVzIGFzc2VydHMgdGhhdCBEZWluaWFzIHRvb2sgdGhpcyBjb3Vyc2UgZm9yIGZlYXIgdGhhdCBieQogICAgICAgICAgICAgICAgICAgICAgICBzd2VhcmluZyB0byB0aGUgZGVwb3NpdGlvbiBoZSB3b3VsZCB3b3JrIGhhcm0gdG8gaGlzIGtpbnNtYW4gU3RlcGhhbnVzLiBXZQogICAgICAgICAgICAgICAgICAgICAgICBtdXN0IGJlIGNvbnRlbnQgdG8gY29uZmVzcyBvdXIgaWdub3JhbmNlIG9mIGhpcyByZWFzb25zLjwvbm90ZT4gTm90IHNvCiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGhlcmUuIEhlIGRpZCBub3QgaGVzaXRhdGUgdG8gZ2l2ZSBmYWxzZSB0ZXN0aW1vbnkgYWdhaW5zdCB1czsgZXZlbgogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QgZm9yIGhpcyBvd24gbW90aGVyLCBpZiBmb3Igbm8gb25lIGVsc2UsIGRpZCBub3Qga2VlcCBoaW0gZnJvbSBicmluZ2luZwogICAgICAgICAgICAgICAgICAgIHRoZSBleHRyZW1lc3QgcG92ZXJ0eSB1cG9uIHRob3NlIHdobyB0aHJvdWdoIGhlciB3ZXJlIGhpcyByZWxhdGl2ZXMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM6+z4nOvM6/z4PhvbfOsTwvZm9yZWlnbj7vvIksIGFsdGhvdWdoIHRoaXMgaXMgbm90IHN0YXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC4gQXBvbGxvZG9ydXMgYXNzZXJ0cyB0aGF0IERlaW5pYXMgdG9vayB0aGlzIGNvdXJzZSBmb3IgZmVhciB0aGF0IGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHN3ZWFyaW5nIHRvIHRoZSBkZXBvc2l0aW9uIGhlIHdvdWxkIHdvcmsgaGFybSB0byBoaXMga2luc21hbiBTdGVwaGFudXMuIFdlCiAgICAgICAgICAgICAgICAgICAgICAgIG11c3QgYmUgY29udGVudCB0byBjb25mZXNzIG91ciBpZ25vcmFuY2Ugb2YgaGlzIHJlYXNvbnMuPC90cmFuc2xhdGlvbj4="
translation['45.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHRvIHRlbGwgeW91IG9mIHRoZSBtb3N0IGEgb3V0cmFnZW91cyB0aGluZyB3aGljaCBoYXMgYmVlbiBkb25lIHRvCiAgICAgICAgICAgICAgICAgICAgbWUs4oCUYSB0aGluZyB3aGljaCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBvdmVyd2hlbG1lZCBtZSB3aXRoIGRpc21heQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBjb3Vyc2Ugb2YgdGhlIHRyaWFsOyBmb3IgeW91IHdpbGwgdGh1cyBzZWUgZXZlbiBtb3JlIGNsZWFybHkgdGhlIGZlbGxvdydzCiAgICAgICAgICAgICAgICAgICAgYmFzZW5lc3MsIGFuZCBJLCBieSB2ZW50aW5nIGJlZm9yZSB5b3UgbXkgZ3JpZWYgZm9yIHdoYXQgaGFzIGhhcHBlbmVkLCBzaGFsbAogICAgICAgICAgICAgICAgICAgIGZpbmQsIGFzIGl0IHdlcmUsIGEgc29ydCBvZiByZWxpZWYuIFRoZSBkZXBvc2l0aW9uLCB3aGljaCBJIHRob3VnaHQgd2FzIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aGljaCBhZmZvcmRlZCB0aGUgc3Ryb25nZXN0IGV2aWRlbmNlIGluIHN1cHBvcnQgb2YgbXkgY2FzZSwgSSBkaWQgbm90IGZpbmQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgYm94LiA8L3RyYW5zbGF0aW9uPg=="
translation['45.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSwgZGlzbWF5ZWQgYnkgdGhpcwogICAgICAgICAgICAgICAgICAgIG1pc2ZvcnR1bmUsIEkgY291bGQgaW1hZ2luZSBub3RoaW5nIGVsc2UgdGhhbiB0aGF0IHRoZSBtYWdpc3RyYXRlIGhhZCB3cm9uZ2VkIG1lCiAgICAgICAgICAgICAgICAgICAgYW5kIHRhbXBlcmVkIHdpdGggdGhlIGJveC4gTm93LCBob3dldmVyLCBmcm9tIHdoYXQgSSBoYXZlIHNpbmNlIGxlYXJuZWQsIEkgZmluZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGRlZmVuZGFudCBTdGVwaGFudXMgaGFkIGZpbGNoZWQgdGhlIGRvY3VtZW50IGF3YXkgaW4gdGhlIHZlcnkgcHJlc2VuY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgYXJiaXRyYXRvciwgd2hlbiBJIGhhZCBnb3QgdXAgdG8gcHV0IGEgd2l0bmVzcyBvbiBoaXMgb2F0aC4gQW5kIHRvIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBpbiB0aGlzLCBkZXBvc2l0aW9ucyBzaGFsbCBmaXJzdCBiZSBvZmZlcmVkIHlvdQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhvc2Ugd2hvIHdlcmUgcHJlc2VudCBhdCB0aGUgdGltZSBhbmQgc2F3IGl0OyBmb3IgSSBkbyBub3QgdGhpbmsgdGhleSB3aWxsCiAgICAgICAgICAgICAgICAgICAgY2hvb3NlIHRvIHRha2UgYW4gb2F0aCBvZiBkaXNjbGFpbWVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBzaGFtZWxlc3MgZW5vdWdoIHRvIGRvIHRoaXMgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IGEgY2hhbGxlbmdlIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IHdpbGwgY2F0Y2ggdGhlbSBpbiB0aGUgdmVyeSBhY3Qgb2YgcGVyanVyeSwgYW5kIHdpbGwga25vdyBhbGwgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgbWFuIGRpZCBzdGVhbCB0aGUgZGVwb3NpdGlvbi4gQW5kIHlldCwgbWVuIG9mIEF0aGVucywgYSBwZXJzb24gd2hvCiAgICAgICAgICAgICAgICAgICAgd291bGQgbm90IHNocmluayBmcm9tIGJlaW5nIG5hbWVkIGFzIG9uZSB3aG8gaGFkIHN0b2xlbiB3aGF0IHdhcyBwcmVqdWRpY2lhbCB0bwogICAgICAgICAgICAgICAgICAgIGFub3RoZXLigJR3aGF0IGRvIHlvdSBzdXBwb3NlIGhlIHdvdWxkIGRvIGluIGhpcyBvd24gaW50ZXJlc3Q/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLCBhbmQgdGhlbiB0aGlzIGNoYWxsZW5nZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cwogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5IHRoYXQgdGhleSBhcmUgZnJpZW5kcyBhbmQgYXNzb2NpYXRlcyBvZiBQaG9ybWlvLCBhbmQgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBoZWZvcmUgdGhlIGFyYml0cmF0b3IgVGVpc2lhcyB3aGVuIHRoZSBhbm5vdW5jZW1lbnQgb2YgdGhlIGF3YXJkIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIGluIHRoZSBzdWl0IGJldHdlZW4gQXBvbGxvZG9ydXMgYW5kIFBob3JtaW8sIGFuZCB0aGF0IHRoZXkga25vdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBmaWxjaGVkIGF3YXkgdGhlIGRlcG9zaXRpb24gd2hpY2ggQXBvbGxvZG9ydXMgY2hhcmdlcyBoaW0sIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHN0b2xlbi48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnkgdGhhdCB0aGV5IGFyZSBmcmllbmRzIGFuZCBhc3NvY2lhdGVzIG9mIFBob3JtaW8sIGFuZCB0aGF0IHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGhlZm9yZSB0aGUgYXJiaXRyYXRvciBUZWlzaWFzIHdoZW4gdGhlIGFubm91bmNlbWVudCBvZiB0aGUgYXdhcmQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgaW4gdGhlIHN1aXQgYmV0d2VlbiBBcG9sbG9kb3J1cyBhbmQgUGhvcm1pbywgYW5kIHRoYXQgdGhleSBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGZpbGNoZWQgYXdheSB0aGUgZGVwb3NpdGlvbiB3aGljaCBBcG9sbG9kb3J1cyBjaGFyZ2VzIGhpbSwgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgc3RvbGVuLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FaXRoZXIgZGVwb3NlLCBvciB0YWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGggb2YgZGlzY2xhaW1lci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJPYXRoIG9mIERpc2NsYWltZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PYXRoIG9mIERpc2NsYWltZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2F0aCBvZiBEaXNjbGFpbWVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIHBsYWluCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgdGhleSB3b3VsZCBkbyB0aGlz4oCUdGFrZSB0aGUgb2F0aCBvZgogICAgICAgICAgICAgICAgICAgIGRpc2NsYWltZXIgd2l0aCBlYWdlcm5lc3MuIFdlbGwsIHRoZW4sIHRoYXQgdGhleSBtYXkgYXQgb25jZSBiZSBjb252aWN0ZWQgb2YKICAgICAgICAgICAgICAgICAgICBwZXJqdXJ5LCB0YWtlLCBwbGVhc2UsIHRoaXMgZGVwb3NpdGlvbiBhbmQgY2hhbGxlbmdlLiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24gYW5kIENoYWxsZW5nZSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYWxsZW5nZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkZXBvbmVudHMgdGVzdGlmeQogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IHdoZW4gQXBvbGxvZG9ydXMgY2hhbGxlbmdlZCBTdGVwaGFudXMgdG8gZ2l2ZSB1cCBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXR0ZW5kYW50IHNsYXZlIHRvIGJlIHB1dCB0byB0aGUgdG9ydHVyZSBjb25jZXJuaW5nIHRoZSB0aGVmdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQsIGFuZCBBcG9sbG9kb3J1cyB3YXMgcmVhZHkgdG8gd3JpdGUgb3V0IHRoZSBjb25kaXRpb25zIG9uIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIHdhcyB0byBiZSBhZG1pbmlzdGVyZWQ7IGFuZCB0aGF0IHdoZW4gQXBvbGxvZG9ydXMgdGVuZGVyZWQgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsIFN0ZXBoYW51cyByZWZ1c2VkIHRvIGdpdmUgdXAgdGhlIHNsYXZlLCBidXQgcmVwbGllZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cyB0aGF0IGhlIG1pZ2h0IGJyaW5nIHN1aXQsIGlmIGhlIGNob3NlLCBpZiBoZSBtYWludGFpbmVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGJlaW5nIGluIGFueSB3YXkgd3JvbmdlZCBieSBoaW0uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbGxlbmdlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlcG9uZW50cyB0ZXN0aWZ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSB3ZXJlIHByZXNlbnQgd2hlbiBBcG9sbG9kb3J1cyBjaGFsbGVuZ2VkIFN0ZXBoYW51cyB0byBnaXZlIHVwIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBhdHRlbmRhbnQgc2xhdmUgdG8gYmUgcHV0IHRvIHRoZSB0b3J0dXJlIGNvbmNlcm5pbmcgdGhlIHRoZWZ0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudCwgYW5kIEFwb2xsb2RvcnVzIHdhcyByZWFkeSB0byB3cml0ZSBvdXQgdGhlIGNvbmRpdGlvbnMgb24gd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcnR1cmUgd2FzIHRvIGJlIGFkbWluaXN0ZXJlZDsgYW5kIHRoYXQgd2hlbiBBcG9sbG9kb3J1cyB0ZW5kZXJlZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSwgU3RlcGhhbnVzIHJlZnVzZWQgdG8gZ2l2ZSB1cCB0aGUgc2xhdmUsIGJ1dCByZXBsaWVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIHRoYXQgaGUgbWlnaHQgYnJpbmcgc3VpdCwgaWYgaGUgY2hvc2UsIGlmIGhlIG1haW50YWluZWQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgYmVpbmcgaW4gYW55IHdheSB3cm9uZ2VkIGJ5IGhpbS48L3RyYW5zbGF0aW9uPg=="
translation['45.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hvIGlzIHRoZXJlLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2hvLCBvbiBhIGNoYXJnZSBsaWtlIHRoYXQsIGlmIGhlIHdlcmUgc3VyZSBvZiBoaXMgaW5ub2NlbmNlLAogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBoYXZlIGFjY2VwdGVkIHRoZSB0b3J0dXJlPyBUaGVuLCBieSByZWZ1c2luZyB0aGUgdG9ydHVyZSwgaGUgaXMKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgb2YgdGhlIHRoZWZ0LiBOb3cgZG8geW91IHRoaW5rIHRoYXQgYSBtYW4gd291bGQgYmUgYXNoYW1lZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uIG9mIGhhdmluZyBib3JuZSBmYWxzZSB3aXRuZXNzLCB3aG8gZGlkIG5vdCBzaHJpbmsgZnJvbSBiZWluZyBwcm92ZWQgYQogICAgICAgICAgICAgICAgICAgIHRoaWVmPyBPciB0aGF0IGhlIHdvdWxkIGhlc2l0YXRlIHRvIGdpdmUgZmFsc2Ugd2l0bmVzcyBhdCB0aGUgcmVxdWVzdCBvZgogICAgICAgICAgICAgICAgICAgIGFub3RoZXIsIHdoZW4sIGF0IG5vIG1hbidzIGJpZGRpbmcsIGhlIHZvbHVudGFyaWx5IGNvbW1pdHRlZCBhIGZyYXVkPyA8L3RyYW5zbGF0aW9uPg=="
translation['45.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlIGp1cnksCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgaGUgbWlnaHQganVzdGx5IGJlIG1hZGUgdG8gcGF5IHRoZSBwZW5hbHR5IGZvciBhbGwgdGhlc2UgdGhpbmdzLCBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzIGV2ZW4gbW9yZSB0byBiZSBwdW5pc2hlZCBpbiB5b3VyIGNvdXJ0IGZvciB0aGUgcmVzdCBvZiBoaXMgY29uZHVjdC4KICAgICAgICAgICAgICAgICAgICBPYnNlcnZlIHRoZSBraW5kIG9mIGEgbGlmZSBoZSBoYXMgbGl2ZWQsIGFuZCBqdWRnZS4gRm9yIHNvIGxvbmcgYXMgaXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGxvdCBvZiBBcmlzdG9sb2NodXMsIHRoZSBiYW5rZXIsIHRvIGVuam95IHByb3NwZXJpdHksIHRoaXMgZmVsbG93IGZhd25lZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgaGltIGFzIGhlIHdhbGtlZCBiZXNpZGUgaGltLCBhZGFwdGluZyBoaXMgcGFjZSB0byBoaXMsIGFuZCB0aGlzIGlzIHdlbGwga25vd24gdG8KICAgICAgICAgICAgICAgICAgICBtYW55IG9mIHlvdSB3aG8gYXJlIHByZXNlbnQgaGVyZS4gPC90cmFuc2xhdGlvbj4="
translation['45.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbgogICAgICAgICAgICAgICAgICAgIEFyaXN0b2xvY2h1cyB3YXMgcnVpbmVkIGFuZCBsb3N0IGhpcyBwcm9wZXJ0eSwgY2hpZWZseSB0aHJvdWdoIGhhdmluZyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmVkIGJ5IHRoaXMgZmVsbG93IGFuZCBvdGhlcnMgb2YgaGlzIHN0YW1wLCBTdGVwaGFudXMgbmV2ZXIgc3Rvb2QgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIEFyaXN0b2xvY2h1cywgd2hvIHdhcyBvdmVyYnVyZGVuZWQgd2l0aCBsYXdzdWl0cywgbm9yIGFpZGVkIGhpbSwgYnV0IGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIEFwb2xleGlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwb2xleGlzIGlzIGEgbm90IHVuZmFtaWxpYXIgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICDvvIhzZWUgZS5nLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQzLjQ4IiB2YWxpZD0ieWVzIj5EZW0uIDQzLjQ4PC9iaWJsPu+8iSwgYnV0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBBcG9sZXhpcyBvciB0aGUgU29sb24gaGVyZSBtZW50aW9uZWQgbm90aGluZyBpcyBrbm93bi48L25vdGU+IG9yIFNvbG9uCiAgICAgICAgICAgICAgICAgICAgb3IgYW55Ym9keSBlbHNlIHRoYXQgaGVscGVkIGhpbSByYXRoZXIgdGhhbiBoZS4gVGhlbiBoZSBoYXMgY291cnRlZCBQaG9ybWlvIGFuZAogICAgICAgICAgICAgICAgICAgIGJlY29tZSBpbnRpbWF0ZSB3aXRoIGhpbSwgY2hvb3NpbmcgaGltIG91dCBvZiBhbGwgdGhlIEF0aGVuaWFuczsgYW5kIGhlIHNhaWxlZAogICAgICAgICAgICAgICAgICAgIHRvIEJ5emFudGl1bTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDMuNDgiIHZhbGlkPSJ5ZXMiPkRlbS4gNDMuNDg8L2JpYmw+77yJLCBidXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEFwb2xleGlzIG9yIHRoZSBTb2xvbiBoZXJlIG1lbnRpb25lZCBub3RoaW5nIGlzIGtub3duLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeXphbnRpdW0sIHRoZSBtb2Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgSXN0YW5idWwuPC9ub3RlPiBhcyBhZ2VudCBpbiBoaXMgaW50ZXJlc3QsIHdoZW4gdGhlIEJ5emFudGluZXMgZGV0YWluZWQKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvJ3MgdmVzc2VscywgYW5kIGhlIHBsZWFkZWQgaGlzIGNhdXNlIGFnYWluc3QgdGhlIENhbGNoZWRvbmlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNhbGNoZWRvbiBpcyBhIHRvd24gb24gdGhlIGVhc3Qgc2lkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQm9zcG9ydXMsIG9wcG9zaXRlIEJ5emFudGl1bS48L25vdGU+IGFuZCBoZSBoYXMgdGh1cyBmbGFncmFudGx5IGdpdmVuIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyBhZ2FpbnN0IG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5BIG1hbiwgdGhlbiwgd2hvIGlzIGEKICAgICAgICAgICAgICAgICAgICBmbGF0dGVyZXIgb2YgdGhvc2UgaW4gcHJvc3Blcml0eSwgYW5kIHdobyBiZXRyYXlzIHRoZXNlIHNhbWUgbWVuIGlmIHRoZXkgZmFsbAogICAgICAgICAgICAgICAgICAgIGludG8gYWR2ZXJzaXR5OyB3aG8gb3V0IG9mIGFsbCB0aGUgaG9zdCBvZiBnb29kIGFuZCB3b3J0aHkgY2l0aXplbnMgb2YgQXRoZW5zCiAgICAgICAgICAgICAgICAgICAgZGVhbHMgd2l0aCBub3QgYSBzaW5nbGUgb25lIG9uIHRoZSBiYXNpcyBvZiBlcXVhbGl0eSwgYnV0IHdpbGxpbmdseSBmYXducyB1cG9uCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGxpa2UgUGhvcm1pbzsgd2hvIHRha2VzIG5vIHRob3VnaHQgd2hldGhlciBoZSBpcyBnb2luZyB0byBpbmp1cmUgYW55IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGtpbnNmb2xrIGJ5IHRoZXNlIGFjdGlvbnMsIG9yIHdoZXRoZXIgaGUgaXMgZ29pbmcgdG8gd2luIGFuIGV2aWwgcmVwdXRhdGlvbgogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtaW5kcyBvZiBvdGhlciBtZW4sIGJ1dCB0aGlua3Mgb25seSBvZiBvbmUgdGhpbmcsIGhvdyBoZSBtYXkgZW5yaWNoCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZuKAlG91Z2h0IHlvdSBub3QgdG8gbG9hdGhlIHRoaXMgbWFuIGFzIGEgY29tbW9uIGVuZW15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIGh1bWFuIHJhY2U/IEkgY2VydGFpbmx5IHRoaW5rIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzCiAgICAgICAgICAgICAgICAgICAgY291cnNlIG9mIGFjdGlvbiwgaW52b2x2aW5nIHNvIGdyZWF0IGRpc2dyYWNlLCBoZSBoYXMgYWRvcHRlZCwgbWVuIG9mIEF0aGVucywKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgdmlldyB0byBldmFkaW5nIGhpcyBkdXRpZXMgdG8gdGhlIHN0YXRlIGFuZCB0byBjb25jZWFsIGhpcyB3ZWFsdGgsIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBtYXkgbWFrZSBzZWNyZXQgcHJvZml0cyBieSBtZWFucyBvZiB0aGUgYmFuaywgYW5kIG5ldmVyIHNlcnZlIGFzIGNob3JlZ3VzIG9yCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoLCBvciBwZXJmb3JtIGFueSBvdGhlciBvZiB0aGUgcHVibGljIGR1dGllcyB3aGljaCBiZWZpdCBoaXMgc3RhdGlvbi4KICAgICAgICAgICAgICAgICAgICBBbmQgaGUgaGFzIGFjY29tcGxpc2hlZCB0aGlzIG9iamVjdC4gSGVyZSBpcyBhIHByb29mLiBBbHRob3VnaCBoZSBoYXMgc28gbGFyZ2UKICAgICAgICAgICAgICAgICAgICBhbiBlc3RhdGUgdGhhdCBoZSBnYXZlIGhpcyBkYXVnaHRlciBhIG1hcnJpYWdlIHBvcnRpb24gb2Ygb25lIGh1bmRyZWQgbWluYWUsIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIG5ldmVyIGJlZW4gc2VlbiBieSB5b3UgdG8gcGVyZm9ybSBhbnkgcHVibGljIHNlcnZpY2Ugd2hhdGV2ZXIsIGV2ZW4gdGhlIHZlcnkKICAgICAgICAgICAgICAgICAgICBzbGlnaHRlc3QuIEFuZCB5ZXQgaG93IG11Y2ggbW9yZSBob25vcmFibGUgaXQgd291bGQgaGF2ZSBiZWVuIHRvIGJlIHByb3ZlZCBhIG1hbgogICAgICAgICAgICAgICAgICAgIG9mIHB1YmxpYyBzcGlyaXQgYW5kIG9uZSB6ZWFsb3VzIGluIHRoZSBwZXJmb3JtYW5jZSBvZiBoaXMgZHV0aWVzIHRvIHRoZSBzdGF0ZSwKICAgICAgICAgICAgICAgICAgICB0aGFuIGEgZmxhdHRlcmVyIGFuZCBhIGJlYXJlciBvZiBmYWxzZSB0ZXN0aW1vbnkhIEJ1dCB0aGUgZmVsbG93IHdvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdG8gZ2V0IG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['45.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHksIG1lbiBvZiBBdGhlbnMsCiAgICAgICAgICAgICAgICAgICAgeW91IG91Z2h0IHRvIGZlZWwgaW5kaWduYXRpb24gcmF0aGVyIHRvd2FyZCB0aG9zZSB3aG8gYXJlIHJhc2NhbHMgaW4gd2VhbHRoIHRoYW4KICAgICAgICAgICAgICAgICAgICB0b3dhcmQgdGhvc2Ugd2hvIGFyZSBzdWNoIGluIHBvdmVydHkuIEluIHRoZSBjYXNlIG9mIHRoZSBsYXR0ZXIgdGhlIHByZXNzdXJlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgbmVlZHkgc3RhdGUgYWZmb3JkcyB0aGVtIHNvbWUgZXhjdXNlIGluIHRoZSBleWVzIG9mIHRob3NlIHdobyBsb29rIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlciB3aXRoIGh1bWFuIHN5bXBhdGh5LCB3aGVyZWFzIHRob3NlIHdobywgbGlrZSB0aGlzIGZlbGxvdywgYXJlIHJhc2NhbHMKICAgICAgICAgICAgICAgICAgICB3aGlsZSBwb3NzZXNzaW5nIGFidW5kYW5jZSwgY291bGQgZmluZCBubyByZWFzb25hYmxlIGV4Y3VzZSB0byBvZmZlciwgYnV0IHdpbGwKICAgICAgICAgICAgICAgICAgICBiZSBzaG93biB0byBhY3QgYXMgdGhleSBkbyBmcm9tIGEgc3Bpcml0IG9mIHNoYW1lZnVsIGdyZWVkIGFuZCBjb3ZldG91c25lc3MgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5zb2xlbmNlLCBhbmQgYSByZXNvbHZlIHRvIG1ha2UgdGhlaXIgb3duIHBsb3RzIHN0cm9uZ2VyIHRoYW4gdGhlIGxhd3MuIE5vdCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGVzZSB0aGluZ3MgaXMgdG8geW91ciBpbnRlcmVzdCwgYnV0IHJhdGhlciB0aGF0IHRoZSB3ZWFrLCBpZiBoZSBzdWZmZXJzCiAgICAgICAgICAgICAgICAgICAgd3JvbmcsIHNob3VsZCBiZSBhYmxlIHRvIGdldCByZWRyZXNzIGZyb20gdGhlIHdlYWx0aHkuIEFuZCBoZSB3aWxsIGJlIGFibGUsIGlmCiAgICAgICAgICAgICAgICAgICAgeW91IHB1bmlzaCB0aG9zZSB3aG8gYXJlIHRodXMgbWFuaWZlc3RseSByYXNjYWxzIHdoaWxlIHBvc3Nlc3Npbmcgd2VhbHRoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmVpdGhlcgogICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGUgYWlycyB3aGljaCB0aGUgZmVsbG93IHB1dHMgb24gYXMgaGUgd2Fsa3Mgd2l0aCBzdWxsZW4gZmFjZSBhbG9uZyB0aGUKICAgICAgICAgICAgICAgICAgICB3YWxscyBiZSBwcm9wZXJseSBjb25zaWRlcmVkIGFzIG1hcmtzIG9mIHNvYnJpZXR5LCBidXQgcmF0aGVyIGFzIG1hcmtzIG9mCiAgICAgICAgICAgICAgICAgICAgbWlzYW50aHJvcHkuIEluIG15IG9waW5pb24gYSBtYW4gd2hvbSBubyBtaXNmb3J0dW5lIGhhcyBiZWZhbGxlbiwgYW5kIHdobyBpcyBpbgogICAgICAgICAgICAgICAgICAgIG5vIGxhY2sgb2YgdGhlIG5lY2Vzc2FyaWVzIG9mIGxpZmUsIGJ1dCB3aG8gbm9uZSB0aGUgbGVzcyBoYWJpdHVhbGx5IG1haW50YWlucwogICAgICAgICAgICAgICAgICAgIHRoaXMgZGVtZWFub3IsaGFzIHJldmlld2VkIHRoZSBtYXR0ZXIgYW5kIHJlYWNoZWQgdGhlIGNvbmNsdXNpb24gaW4gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIG1pbmQsIHRoYXQgdG8gdGhvc2Ugd2hvIHdhbGsgaW4gYSBzaW1wbGUgYW5kIG5hdHVyYWwgd2F5IGFuZCB3ZWFyIGEgY2hlZXJmdWwKICAgICAgICAgICAgICAgICAgICBjb3VudGVuYW5jZSwgbWVuIGRyYXcgbmVhciB1bmhlc2l0YXRpbmdseSB3aXRoIHJlcXVlc3RzIGFuZCBwcm9wb3NhbHMsIHdoZXJlYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IHNocmluayBmcm9tIGRyYXdpbmcgbmVhciBpbiB0aGUgZmlyc3QgcGxhY2UgdG8gYWZmZWN0ZWQgYW5kIHN1bGxlbgogICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcnMuIDwvdHJhbnNsYXRpb24+"
translation['45.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGRlbWVhbm9yLCB0aGVuLCBpcyBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYnV0IGEgY2xvYWsgdG8gY292ZXIgaGlzIHJlYWwgY2hhcmFjdGVyLCBhbmQgaGUgc2hvd3MgdGhlcmVpbiB0aGUgcnVkZW5lc3MgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFsaWduaXR5IG9mIGhpcyB0ZW1wZXIuIEhlcmUgaXMgYSBwcm9vZi4gWW91IGhhdmUgYmVlbiBmYXIgYmV0dGVyIG9mZiB0aGFuIHlvdQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkLCB5ZXQgdG8gd2hvbSBhbW9uZyB0aGUgd2hvbGUgaG9zdCBvZiBBdGhlbmlhbnMgaGF2ZSB5b3UgZXZlciBtYWRlIGEKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb24/IFRvIHdob20gaGF2ZSB5b3UgZXZlciBsZW50IGFpZCwgb3IgdG8gd2hvbSBkb25lIGEga2luZG5lc3M/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgY291bGQgbm90IG5hbWUgYSBzaW5nbGUgb25lOyBidXQgd2hpbGUKICAgICAgICAgICAgICAgICAgICBsZW5kaW5nIG1vbmV5IGF0IGludGVyZXN0IGFuZCByZWdhcmRpbmcgdGhlIG1pc2ZvcnR1bmVzIGFuZCBuZWNlc3NpdGllcyBvZgogICAgICAgICAgICAgICAgICAgIG90aGVycyBhcyB5b3VyIG93biBnb29kIGZvcnR1bmUsIHlvdSBlamVjdGVkIHlvdXIgb3duIHVuY2xlIE5pY2lhcyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGhvdXNlIG9mIGhpcyBmYXRoZXJzLCB5b3UgaGF2ZSB0YWtlbiBmcm9tIHlvdXIgb3duIG1vdGhlci1pbi1sYXcgdGhlIHJlc291cmNlcwogICAgICAgICAgICAgICAgICAgIHVwb24gd2hpY2ggc2hlIGxpdmVkLCBhbmQgeW91IGhhdmUsIGluIHNvIGZhciBhcyBpdCBkZXBlbmRlZCB1cG9uIHlvdSwgcmVuZGVyZWQKICAgICAgICAgICAgICAgICAgICBob21lbGVzcyB0aGUgc29uIG9mIEFyY2hlZGVtdXMuIE5vIG9uZSBldmVyIGV4YWN0ZWQgcGF5bWVudCBmcm9tIGEgZGVmYXVsdGVyIGFzCiAgICAgICAgICAgICAgICAgICAgcmlnb3JvdXNseSBhcyB5b3UgZXhhY3QgaW50ZXJlc3QgZnJvbSB5b3VyIGRlYnRvcnMuIEEgbWFuLCB0aGVuLCB3aG9tIHlvdSBmaW5kCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgc28gYnJ1dGFsIGFuZCBzbyBzYXZhZ2Ugb24gYWxsIG9jY2FzaW9ucywgYXJlIHlvdSBnb2luZyB0byBmYWlsIHRvIHB1bmlzaAogICAgICAgICAgICAgICAgICAgIGhpbSB3aGVuIHlvdSBoYXZlIGNhdWdodCBoaW0gaW4gdGhlIHZlcnkgYWN0IG9mIHdyb25nZG9pbmc/IEluIHRoYXQgY2FzZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHlvdSB3aWxsIGRvIHdoYXQgaXMgYW4gb3V0cmFnZSBhbmQgaW4gbm8gc2Vuc2UgcmlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['45.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgZml0dGluZwogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgbWVuIG9mIEF0aGVucywgdGhhdCB5b3Ugc2hvdWxkIHdheCBpbmRpZ25hbnQgYWxzbyBhZ2FpbnN0IFBob3JtaW8sCiAgICAgICAgICAgICAgICAgICAgZm9yIGJyaW5naW5nIHRoaXMgbWFuIGZvcndhcmQgYXMgYSB3aXRuZXNzLCB3aGVuIHlvdSBzZWUgdGhlIHNoYW1lbGVzc25lc3Mgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgY2hhcmFjdGVyIGFuZCBoaXMgaW5ncmF0aXR1ZGUuIEZvciBJIGZhbmN5IHlvdSBhbGwga25vdyB0aGF0IGlmLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGZlbGxvdyB3YXMgZm9yIHNhbGUsIGEgY29vayBvciBhbiBhcnRpc2FuIGluIGFueSBvdGhlciB0cmFkZSBoYWQgYm91Z2h0IGhpbSwgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGxlYXJuZWQgdGhlIHRyYWRlIG9mIGhpcyBtYXN0ZXIgYW5kIGJlZW4gZmFyIHJlbW92ZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zcGVyaXR5IHdoaWNoIG5vdyBpcyBoaXMuIDwvdHJhbnNsYXRpb24+"
translation['45.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaW50byB3aG9zZSBwb3NzZXNzaW9uIGhlIGNhbWUsIHdhcyBhIGJhbmtlciBhbmQgdGF1Z2h0IGhpbSBsZXR0ZXJzIGFuZAogICAgICAgICAgICAgICAgICAgIGluc3RydWN0ZWQgaGltIGluIGhpcyBidXNpbmVzcyBhbmQgcHV0IGhpbSBpbiBjb250cm9sIG9mIGxhcmdlIHN1bXMgb2YgbW9uZXksIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlY29tZSB3ZWFsdGh5LCBoYXZpbmcgZm91bmQgdGhlIGdvb2QgbHVjayB3aGljaCBicm91Z2h0IGhpbSBpbnRvIG91ciBmYW1pbHkKICAgICAgICAgICAgICAgICAgICB0aGUgZm91bmRhdGlvbiBvZiBhbGwgaGlzIHByZXNlbnQgd2VhbHRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIGlzIG91dHJhZ2VvdXMsIHRoZW4sIE8gRWFydGggYW5kIHRoZSBnb2RzLCBhbmQgd29yc2UgdGhhbiBvdXRyYWdlb3VzLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHN1ZmZlciB0aG9zZSB3aG8gbWFkZSBoaW0gYSBHcmVlayBpbnN0ZWFkIG9mIGEgYmFyYmFyaWFuIGFuZCBhIG1hbiBvZgogICAgICAgICAgICAgICAgICAgIG5vdGUgaW5zdGVhZCBvZiBhIHNsYXZlLCBhbmQgd2hvIGJyb3VnaHQgaGltIHRvIHN1Y2ggZ3JlYXQgcHJvc3Blcml0eSwgdG8gbGl2ZQogICAgICAgICAgICAgICAgICAgIGluIGRpcmUgd2FudCB3aGlsZSBoZSBoYXMgbWVhbnMgYW5kIGlzIHJpY2gsIGFuZCB0aGF0IGhlIHNob3VsZCBoYXZlIGNvbWUgdG8KICAgICAgICAgICAgICAgICAgICBzdWNoIGEgcGl0Y2ggb2Ygc2hhbWVsZXNzbmVzcyB0aGF0IGhlIGNhbm5vdCBicmluZyBoaW1zZWxmIHRvIHNoYXJlIHdpdGggdXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29vZCBmb3J0dW5lIHdoaWNoIHdlIHNoYXJlZCB3aXRoIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['45.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBoZSBoYXMgbm90IHNjcnVwbGVkIHRvIG1hcnJ5IGhpcyBtaXN0cmVzcywgYW5kIGhlIGR3ZWxscyBhcyBodXNiYW5kIHdpdGgKICAgICAgICAgICAgICAgICAgICBoZXIgd2hvIHNjYXR0ZXJlZCB0aGUgc3dlYXRtZWF0cyBvdmVyIGhpbSB3aGVuIGhlIHdhcyBib3VnaHQgYXMgYSBzbGF2ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SXQgd2FzIGJlbGlldmVkIHRvIGJlIGEgZ29vZCBvbWVuIHRvIHNjYXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgc3dlZXRtZWF0cywgbnV0cywgZXRjLiwgb3ZlciB0aGUgaGVhZCBvZiBhIG5ld2x5IHB1cmNoYXNlZCBzbGF2ZS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3BoLiBQbC4gNzY4IiB2YWxpZD0ieWVzIj5BcmlzdG9waC4gUGwuIDc2ODwvYmlibD48L25vdGU+IG5vciB0byB3cml0ZSBhCiAgICAgICAgICAgICAgICAgICAgY2xhdXNlIGdpdmluZyBoaW1zZWxmIGEgbWFycmlhZ2UgcG9ydGlvbiBvZiBmaXZlIHRhbGVudHMgaW4gYWRkaXRpb24gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGFyZ2Ugc3VtcyBvZiB3aGljaCBoZSBiZWNhbWUgbWFzdGVyLCBpbmFzbXVjaCBhcyB0aGV5IHdlcmUgaW4gdGhlIGN1c3RvZHkgb2YgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXLigJRmb3Igd2h5IGRvIHlvdSBzdXBwb3NlIGhlIHdyb3RlIGluIHRoZSB3aWxsIHRoZSBjbGF1c2UKICAgICAgICAgICAgICAgICAgICDigJxhbmQgYWxsIGVsc2Ugd2hpY2ggc2hlIGhhcyBJIGdpdmUgdG8KICAgICAgICAgICAgICAgICAgICBBcmNoaXBww6rigJ0/4oCUd2hpbGUgaGUgbG9va3Mgd2l0aCBpbmRpZmZlcmVuY2Ugb24gbXkKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlcnMsIHdobyBhcmUgZG9vbWVkIHRocm91Z2ggcG92ZXJ0eSB0byBncm93IG9sZCBpbiBtYWlkZW5ob29kIHdpdGggbm9uZSB0bwogICAgICAgICAgICAgICAgICAgIGRvd2VyIHRoZW0uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3BoLiBQbC4gNzY4IiB2YWxpZD0ieWVzIj5BcmlzdG9waC4gUGwuIDc2ODwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['45.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBQaG9ybWlvIGhhZCBiZWVuIHBvb3IsIGFuZCBpdAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIG91ciBmb3J0dW5lIHRvIGJlIHdlYWx0aHksIGFuZCBpZiwgaW4gdGhlIGNvdXJzZSBvZiBuYXR1cmUsIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgaGFkIGhhcHBlbmVkIHRvIG1lLCB0aGlzIGZlbGxvdydzIHNvbnMgd291bGQgaGF2ZSBjbGFpbWVkIG15IGRhdWdodGVycyBpbgogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdl4oCUdGhlIHNvbnMgb2YgdGhlIHNsYXZlIHdvdWxkIGhhdmUgY2xhaW1lZCB0aGUgZGF1Z2h0ZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hc3RlciEgRm9yIHRoZXkgYXJlIHRoZWlyIHVuY2xlcywgc2luY2UgdGhlIG1hbiBtYXJyaWVkIG15IG1vdGhlcjsgYnV0IHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgd2Ugd2hvIGFyZSBwb29yLCBoZSB3aWxsIG5vdCBoZWxwIHRvIHBvcnRpb24gdGhlbSBvZmYsIGJ1dCBoZSB0YWxrcwogICAgICAgICAgICAgICAgICAgIGFuZCB0YWxrcywgYW5kIHJlY2tvbnMgdXAgdGhlIGFtb3VudCBvZiBwcm9wZXJ0eSB3aGljaCBJIHBvc3Nlc3MuIDwvdHJhbnNsYXRpb24+"
translation['45.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIHRoaXMgaXMgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBhYnN1cmQgdGhpbmcgb2YgYWxsLiBVcCB0byB0aGlzIGRheSBoZSBoYXMgbmV2ZXIgc2VlbiBmaXQgdG8gcmVuZGVyIGFuIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbW9uZXkgb2Ygd2hpY2ggaGUgaGFzIGRlZnJhdWRlZCBtZSwgYnV0IGVudGVycyBhIHNwZWNpYWwgcGxlYSB0aGF0IG15CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGlzIG5vdCBldmVuIGFkbWlzc2libGU7IHlldCBoZSBjaGFyZ2VzIGFnYWluc3QgbWUgd2hhdCBJIGhhdmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBlc3RhdGUgb2YgbXkgZmF0aGVycy4gT3RoZXIgc2xhdmVzIG9uZSBtYXkgc2VlIGNhbGxlZCB0byBzdHJpY3QgYWNjb3VudAogICAgICAgICAgICAgICAgICAgIGJ5IHRoZWlyIG1hc3RlcnMsIGJ1dCBoZXJlIHdlIHNlZSB0aGUgdmVyeSBvcHBvc2l0ZTogdGhlIGZlbGxvdywgdGhvdWdoIGEgc2xhdmUsCiAgICAgICAgICAgICAgICAgICAgY2FsbHMgaGlzIG1hc3RlciB0byBhY2NvdW50LCB0aGlua2luZyB0aGVyZWJ5IHRvIHNob3cgaGltIGZvcnRoIGFzIGEgdmlsZSBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBhbmQgYSBwcm9kaWdhbC4gPC90cmFuc2xhdGlvbj4="
translation['45.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXlzZWxmLCBtZW4gb2YgQXRoZW5zLCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXIgb2YgbXkgb3V0d2FyZCBhcHBlYXJhbmNlLCBteSBmYXN0IHdhbGtpbmcsIGFuZCBteSBsb3VkIHZvaWNlLCBJIGp1ZGdlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGFtIG5vdCBvbmUgb2YgdGhvc2UgZmF2b3JlZCBieSBuYXR1cmU7IGZvciBpbiBzbyBmYXIgYXMgSSBhbm5veSBvdGhlcnMKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGJlbmVmaXRpbmcgbXlzZWxmLCBJIGFtIGluIG1hbnkgcmVzcGVjdHMgYXQgYSBkaXNhZHZhbnRhZ2U7IGJ1dCBzaW5jZSBJCiAgICAgICAgICAgICAgICAgICAgYW0gbW9kZXJhdGUgaW4gYWxsIG15IHBlcnNvbmFsIGV4cGVuc2VzLCBpdCB3aWxsIGJlIHNlZW4gdGhhdCBJIGxpdmUgYSBtdWNoIG1vcmUKICAgICAgICAgICAgICAgICAgICBvcmRlcmx5IGxpZmUgdGhhbiBQaG9ybWlvIGFuZCBvdGhlcnMgd2hvIGFyZSBsaWtlIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['45.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0ZXZlciBjb25jZXJucyB0aGUgc3RhdGUsIGhvd2V2ZXIsIGFuZCBhbGwgdGhhdCBjb25jZXJucyB5b3UsIEkKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtLCBhcyB5b3Uga25vdywgYXMgbGF2aXNobHkgYXMgSSBjYW47IGZvciBJIGFtIHdlbGwgYXdhcmUgdGhhdCBmb3IgeW91IHdobwogICAgICAgICAgICAgICAgICAgIGFyZSBjaXRpemVucyBieSBiaXJ0aCBpdCBpcyBzdWZmaWNpZW50IHRvIHBlcmZvcm0gcHVibGljIHNlcnZpY2VzIGFzIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZTsgd2Ugb24gdGhlIGNvbnRyYXJ5IHdobyBhcmUgY3JlYXRlZCBjaXRpemVucyBvdWdodCB0byBzaG93IHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtIHRoZW0gYXMgYSBncmF0ZWZ1bCBwYXltZW50IG9mIGEgZGVidC4gQ2Vhc2UsIHRoZW4sIHRvIGZsaW5nIGludG8gbXkKICAgICAgICAgICAgICAgICAgICB0ZWV0aCBtYXR0ZXJzIGZvciB3aGljaCBJIHNob3VsZCBwcm9wZXJseSB3aW4gY29tbWVuZGF0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['45.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIFBob3JtaW8sIHdob20gb2YgdGhlIGNpdGl6ZW5zIGhhdmUgSSBoaXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICBwcm9zdGl0dXRpb24sIGFzIHlvdSBoYXZlIGRvbmU/IFNob3cgbWUuIFdob20gaGF2ZSBJIGRlcHJpdmVkIG9mIHRoZSBjaXRpemVuc2hpcAogICAgICAgICAgICAgICAgICAgIG9mIHdoaWNoIEkgd2FzIGRlZW1lZCB3b3J0aHksIGFuZCBvZiB0aGUgcmlnaHQgb2YgZnJlZSBzcGVlY2ggaW4gdGhlIGNpdHksIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGRpZCBpbiB0aGUgY2FzZSBvZiB0aGUgbWFuIHdob20geW91IGRpc2hvbm9yZWQ/IFdob3NlIHdpZmUgaGF2ZSBJIGRlYmF1Y2hlZCwKICAgICAgICAgICAgICAgICAgICBhcyB5b3UgaGF2ZSB0aGUgd2l2ZXMgb2YgbWFueT/igJRhbW9uZyB0aGVtIGhlciB0byB3aG9tIHRoaXMKICAgICAgICAgICAgICAgICAgICBnb2QtZGV0ZXN0ZWQgZmVsbG93IGJ1aWx0IHRoZSBtb251bWVudCBuZWFyIHRoYXQgb2YgaGlzIG1pc3RyZXNzIGF0IGEgY29zdCBvZgogICAgICAgICAgICAgICAgICAgIG1vcmUgdGhhbiB0d28gdGFsZW50cy4gQW5kIGhlIGRpZCBub3Qgc2VlIHRoYXQgYSBzdHJ1Y3R1cmUsIGJlaW5nIG9mIHRoYXQgc29ydCwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBhIG1vbnVtZW50LCBub3Qgb2YgaGVyIHRvbWIsIGJ1dCBvZiB0aGUgd3Jvbmcgd2hpY2ggYmVjYXVzZSBvZiBoaW0gc2hlCiAgICAgICAgICAgICAgICAgICAgaGFkIGRvbmUgdG8gaGVyIGh1c2JhbmQuIDwvdHJhbnNsYXRpb24+"
translation['45.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3UsIHRoZW4sIHdobwogICAgICAgICAgICAgICAgICAgIHBlcmZvcm0gYWN0cyBsaWtlIHRoZXNlLCBhbmQgd2hvIGhhdmUgZ2l2ZW4gc3VjaCBtYW5pZmVzdCBwcm9vZnMgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXMgY29uZHVjdCwgZGFyZSB0byBzY3J1dGluaXplIHRoZSBtYW5uZXIgb2YgbGlmZSBvZiBhbnlvbmUgZWxzZT8gQnkgZGF5CiAgICAgICAgICAgICAgICAgICAgeW91IGFjdCBzb2Jlcmx5LCBidXQgdGhlIHdob2xlIG5pZ2h0IGxvbmcgeW91IGluZHVsZ2UgaW4gYWN0aW9ucyBmb3Igd2hpY2ggZGVhdGgKICAgICAgICAgICAgICAgICAgICBpcyB0aGUgcGVuYWx0eS4gSGUgaXMgYSBrbmF2ZSwgbWVuIG9mIEF0aGVucywgYSBrbmF2ZSBhbmQgYSB2aWxsYWluLCBhbmQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBzdWNoIGZyb20gb2Ygb2xkLCBldmVyIHNpbmNlIGhlIGxlZnQgdGhlIHRlbXBsZSBvZiBDYXN0b3IgYW5kIFBvbGx1eC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgb25lIG9mIHRoZSBwbGFjZXMgd2hlcmUgc2xhdmVzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgc29sZC48L25vdGU+IEhlcmUgaXMgdGhlIHByb29mLiBJZiBoZSBoYWQgYmVlbiBob25lc3QsIGhlIHdvdWxkIGhhdmUgbWFuYWdlZAogICAgICAgICAgICAgICAgICAgIGhpcyBtYXN0ZXIncyBidXNpbmVzcywgYW5kIHJlbWFpbmVkIHBvb3IuIEJ1dCBhcyBpdCBpcywgaGF2aW5nIGdvdCBjb250cm9sIG9mIHNvCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgYW4gYW1vdW50IG9mIG1vbmV5IHRoYXQgaGUgY291bGQgc3RlYWwgZnJvbSBpdCBhbGwgdGhhdCBoZSBub3cgcG9zc2Vzc2VzCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBkZXRlY3Rpb24sIGhlIHJlZ2FyZHMgd2hhdCBoZSBob2xkcywgbm90IGFzIGEgZGVidCwgYnV0IGFzIGFuIGluaGVyaXRlZAogICAgICAgICAgICAgICAgICAgIHBhdHJpbW9ueS4gPC90cmFuc2xhdGlvbj4="
translation['45.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBieSB0aGUgZ29kcywgaWYgSSBoYWQgbGVkCiAgICAgICAgICAgICAgICAgICAgeW91IG9mZiB0byBwcmlzb24gYXMgYSB0aGllZiBjYXVnaHQgaW4gdGhlIGFjdCwgcGlsaW5nIHVwb24geW91cgogICAgICAgICAgICAgICAgICAgIGJhY2vigJRpZiB0aGlzIGhhZCBiZWVuIGluIGFueSB3YXkgcG9zc2libGXigJR0aGUgd2VhbHRoIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IG5vdyBwb3NzZXNzLCBhbmQgaGFkIHRoZW4gZGVtYW5kZWQgb2YgeW91LCBpZiB5b3UgZGVuaWVkIGhhdmluZyBnb3QgdGhpcwogICAgICAgICAgICAgICAgICAgIHdlYWx0aCBieSB0aGlldmVyeSwgdG8gcmVmZXIgbWUgdG8gdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHlvdSBnb3QgaXQsIHRvIHdob20KICAgICAgICAgICAgICAgICAgICB3b3VsZCB5b3UgaGF2ZSByZWZlcnJlZCBtZT8gWW91ciBmYXRoZXIgZGlkIG5vdCBnaXZlIGl0IHRvIHlvdTsgeW91IGRpZCBub3QgZmluZAogICAgICAgICAgICAgICAgICAgIGl0OyB5b3UgaGFkIG5vdCBnb3QgaXQgZnJvbSBzb21lIG90aGVyIHNvdXJjZSB3aGVuIHlvdSBjb21lIGludG8gb3VyIGZhbWlseTsgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91IHdlcmUgYSBiYXJiYXJpYW4gd2hlbiB5b3Ugd2VyZSBwdXJjaGFzZWQuIEhhdmUgeW91LCB0aGVuLCBhIG1hbiB3aG8gb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gcHVibGljbHkgcHV0IHRvIGRlYXRoIGZvciB3aGF0IHlvdSBoYXZlIGRvbmUsIGFmdGVyIHNhdmluZyB5b3VyIHNraW4sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgc2VjdXJpbmcgZm9yIHlvdXJzZWxmIGEgY2l0eSB3aXRoIG91ciBtb25leSwgYW5kIGFmdGVyIGJlaW5nIGFsbG93ZWQgdG8KICAgICAgICAgICAgICAgICAgICBiZWdldCBjaGlsZHJlbiBhcyBicm90aGVycyB0byB5b3VyIG93biBtYXN0ZXJz4oCUaGF2ZSB5b3UgZW50ZXJlZCBhCiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCBwbGVhIHRoYXQgb3VyIGFjdGlvbiBmb3IgdGhlIHN1bXMgY2xhaW1lZCBmcm9tIHlvdSBpcyBpbmFkbWlzc2libGU/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIHRoZW4sIGRpZCB5b3Ugc3BlYWsgZXZpbCBvZiBtZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5xdWlyZSB3aGF0IG1hbm5lciBvZiBtYW4gbXkgZmF0aGVyIHdhcz8gTWVuIG9mIEF0aGVucywgd2hvIHdvdWxkIG5vdCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBpbmRpZ25hbnQgYXQgdGhpcz8gRm9yIG15IHBhcnQsIHRob3VnaCBpdCBiZXNlZW0gbWUgdG8gaGF2ZSBsZXNzIG9mIHByaWRlIHRoYW4KICAgICAgICAgICAgICAgICAgICBhbnkgb2YgeW91LCB5ZXQgSSBqdWRnZSB0aGF0IEkgbWF5IGF0IGxlYXN0IGhhdmUgbW9yZSB0aGFuIFBob3JtaW8sIHdoaWxlIGFzIGZvcgogICAgICAgICAgICAgICAgICAgIGhpbSwgdGhvdWdoIHRoZXJlIGJlIG5vIG9uZSBlbHNlIHRoYW4gd2hvbSBoZSBzaG91bGQgaGF2ZSBsZXNzLCB5ZXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBsZXNzIHRoYW4gSTsgZm9yLCBhc3N1bWluZyB0aGF0IHdlIGFyZSB0aGUgc29ydCBvZiBwZW9wbGUgeW91ciB3b3JkcyBtYWRlCiAgICAgICAgICAgICAgICAgICAgdXMgb3V0IHRvIGJlLCB5b3UsIFBob3JtaW8sIHdlcmUgbm9uZSB0aGUgbGVzcyBvdXIgc2xhdmUuIDwvdHJhbnNsYXRpb24+"
translation['45.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgcGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHNvbWV0aGluZyBlbHNlIHdoaWNoIG9uZSBvZiB0aGVtIG1heSBzYXk6IHRoYXQgUGFzaWNsZXMsIGFsdGhvdWdoIGhlIGlzIG15CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciwgbWFrZXMgbm8gY2hhcmdlIGFnYWluc3QgUGhvcm1pbyBmb3IgdGhlc2Ugc2FtZSBhY3Rpb25zLiBXZWxsLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBzcGVhayBhYm91dCBQYXNpY2xlcywgdG9vLCBtZW4gb2YgQXRoZW5zLCB0aG91Z2ggSSBiZWcgYW5kIGltcGxvcmUgeW91IHRvIHBhcmRvbgogICAgICAgICAgICAgICAgICAgIG1lLCBpZiBJIGFtIHNvIGNhcnJpZWQgYXdheSBieSBpbmRpZ25hdGlvbiBhdCB0aGUgb3V0cmFnZXMgSSBoYXZlIHJlY2VpdmVkIGZyb20KICAgICAgICAgICAgICAgICAgICBteSBvd24gc2xhdmVzIGFzIHRvIGJlIHVuYWJsZSB0byByZXN0cmFpbiBteXNlbGY7IEkgd2lsbCBub3Qga2VlcCBzaWxlbnQsIGJ1dAogICAgICAgICAgICAgICAgICAgIHdpbGwgZGVjbGFyZSB3aGF0IHVudGlsIG5vdyBJIHByZXRlbmRlZCBub3QgdG8gaGVhciB3aGVuIG90aGVycyBzYWlkCiAgICAgICAgICAgICAgICAgICAgaXQ74oCUIDwvdHJhbnNsYXRpb24+"
translation['45.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5JIGNvbnNpZGVyIFBhc2ljbGVzIHRvIGJlIG15CiAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBvbiBteSBtb3RoZXIncyBzaWRlLCBidXQgd2hldGhlciBvbiBteSBmYXRoZXIncyBzaWRlIGFsc28sIEkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAga25vdzsgYnV0IEkgYW0gYWZyYWlkIHRoYXQgdGhlIHdyb25ncyB3aGljaCBQaG9ybWlvIGhhcyBkb25lIHVzIGJlZ2FuIHdpdGgKICAgICAgICAgICAgICAgICAgICBQYXNpY2xlcy4gRm9yIHdoZW4gaGUgam9pbnMgaW4gcGxlYWRpbmcgdGhlIGNhdXNlIG9mIHRoZSBzbGF2ZSBhbmQgZGlzaG9ub3JzIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXIsIHdoZW4gaGUgZmF3bnMgdXBvbiB0aG9zZSwgYW5kIGN1cnJpZXMgdGhlIGZhdm9yIG9mIHRob3NlLCB3aG8gb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBzZWVrIGhpcyBmYXZvciwgdG8gd2hhdCBzdXNwaWNpb24gZG9lcyB0aGlzIG5hdHVyYWxseSBnaXZlIHJpc2U/IEF3YXksIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgd2l0aCBQYXNpY2xlcywgYW5kIGxldCBoaW0gYmUgY2FsbGVkIHlvdXIgc29uIGluc3RlYWQgb2YgeW91ciBtYXN0ZXIsIGFuZCBteQogICAgICAgICAgICAgICAgICAgIGFkdmVyc2FyeSDvvIhzaW5jZSBoZSBzbyBjaG9vc2Vz77yJIGluc3RlYWQgb2YgbXkgYnJvdGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBiaWQgYWRpZXUKICAgICAgICAgICAgICAgICAgICB0byB0aGlzIGZlbGxvdyBhbmQgYXBwZWFsIHRvIHRob3NlIHRvIHdob20gbXkgZmF0aGVyIGxlZnQgbWUgYXMgbXkgaGVscGVycyBhbmQKICAgICAgICAgICAgICAgICAgICBmcmllbmRz4oCUdG8geW91LCBtZW4gb2YgdGhlIGp1cnkuIEFuZCBJIGJlZyBhbmQgZW50cmVhdCBhbmQgaW1wbG9yZQogICAgICAgICAgICAgICAgICAgIHlvdSwgZG8gbm90IHN1ZmZlciBteSBkYXVnaHRlcnMgYW5kIG15c2VsZiB0aHJvdWdoIG91ciBwb3ZlcnR5IHRvIGJlY29tZSBhCiAgICAgICAgICAgICAgICAgICAgc291cmNlIG9mIG1hbGljaW91cyBqb3kgdG8gbXkgb3duIHNsYXZlcyBhbmQgdG8gaGlzIGZsYXR0ZXJlcnMuIE15IGZhdGhlciBnYXZlCiAgICAgICAgICAgICAgICAgICAgeW91IGEgdGhvdXNhbmQgc2hpZWxkcyBhbmQgbWFkZSBoaW1zZWxmIHNlcnZpY2VhYmxlIHRvIHlvdSBpbiBtYW55IHdheXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGZpdmUgdGltZXMgc2VydmVkIGFzIHRyaWVyYXJjaCwgdm9sdW50YXJpbHkgZXF1aXBwaW5nIHRoZSBzaGlwcyBhbmQgbWFubmluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXQgaGlzIG93biBleHBlbnNlLiBJIHJlbWluZCB5b3Ugb2YgdGhpcywgbm90IGJlY2F1c2UgSSBjb25zaWRlciB0aGF0IHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICB1bmRlciBvYmxpZ2F0aW9uIHRvIG1l4oCUZm9yIGl0IGlzIEkgdGhhdCBhbSB1bmRlciBvYmxpZ2F0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgeW91LOKAlGJ1dCBpbiBvcmRlciB0aGF0IEkgbWF5IG5vdCBzdWZmZXIgdW53b3J0aHkgdHJlYXRtZW50IHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGtub3dpbmcgaXQuIEZvciB0aGF0IHdvdWxkIG5vdCBiZSBhIGNyZWRpdCB0byB5b3UgYW55IG1vcmUgdGhhbiB0byBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIG11Y2gKICAgICAgICAgICAgICAgICAgICB0byBzYXkgcmVnYXJkaW5nIHRoZSBpbmRpZ25pdGllcyB3aGljaCBJIGhhdmUgc3VmZmVyZWQsIGJ1dCBJIHNlZSB0aGF0IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIG5vdCBlbm91Z2ggd2F0ZXIgbGVmdCBpbiB0aGUgY2xvY2suIEkgd2lsbCB0ZWxsIHlvdSwgdGhlcmVmb3JlLCBob3cgSSB0aGluayB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGFsbCBiZXN0IGNvbWUgdG8ga25vdyB0aGUgZW5vcm1pdHkgb2YgdGhlIHdyb25ncyB0aGF0IGhhdmUgYmVlbiBkb25lIG1lLgogICAgICAgICAgICAgICAgICAgIFlvdSBtdXN0IGVhY2ggb2YgeW91IGNvbnNpZGVyIHdoYXQgc2xhdmUgaGUgbGVmdCBhdCBob21lLCBhbmQgdGhlbiBpbWFnaW5lIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzdWZmZXJlZCBmcm9tIGhpbSB0aGUgc2FtZSB0cmVhdG1lbnQgdGhhdCBJIGhhdmUgc3VmZmVyZWQgZnJvbSBQaG9ybWlvLgogICAgICAgICAgICAgICAgICAgIERvIG5vdCB0YWtlIGludG8gY29uc2lkZXJhdGlvbiB0aGF0IHRoZXkgYXJlIHNldmVyYWxseSBTeXJ1cyBvciBNYW5lcyBvciB3aGF0CiAgICAgICAgICAgICAgICAgICAgbm90LCB3aGlsZSB0aGlzIGZlbGxvdyBpcyBQaG9ybWlvLiBUaGUgdGhpbmcgaXMgdGhlIHNhbWXigJR0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcywgYW5kIGhlIHdhcyBhIHNsYXZlOyB5b3UgYXJlIG1hc3RlcnMsIGFuZCBJIHdhcyBtYXN0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['45.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz5CZWxpZXZlLCB0aGVuLCB0aGF0IGl0IGlzIGZpdHRpbmcgbm93IGZvciBtZSB0byBleGFjdAogICAgICAgICAgICAgICAgICAgIHRoZSBwZW5hbHR5IHdoaWNoIGVhY2ggb25lIG9mIHlvdSB3b3VsZCBjbGFpbTsgYW5kIGluIHRoZSBpbnRlcmVzdCBvZiB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGFuZCBvZiB0aGUgb2F0aHMgd2hpY2ggeW91IGhhdmUgdGFrZW4gYXMganVyb3JzIHB1bmlzaCB0aGUgbWFuIHdobyBoYXMgcm9iYmVkIG1lCiAgICAgICAgICAgICAgICAgICAgb2YgYSB2ZXJkaWN0IGJ5IGdpdmluZyBmYWxzZSB0ZXN0aW1vbnksIGFuZCBtYWtlIGhpbSBhbiBleGFtcGxlIHRvIG90aGVycywKICAgICAgICAgICAgICAgICAgICByZW1lbWJlcmluZyBhbGwgdGhhdCB5b3UgaGF2ZSBoZWFyZCBmcm9tIG1lIGFuZCBiZWFyaW5nIGl0IGluIG1pbmQsIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0IHRvIG1pc2xlYWQgeW91LCBhbmQgbWVldGluZyB0aGVtIGF0IGV2ZXJ5IHBvaW50LiBJZiB0aGV5IGRlbnkgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBib3JuZSB3aXRuZXNzIHRvIGFsbCB0aGUgZmFjdHMsIGFzayB0aGVtIHRoZXNlIHF1ZXN0aW9ucywg4oCcV2hhdAogICAgICAgICAgICAgICAgICAgIHN0YW5kcyB3cml0dGVuIGluIHRoZSBkZXBvc2l0aW9uPyBXaHkgZGlkIHlvdSBub3Qgc3RyaWtlIGl0IG91dCBhdCB0aGUgdGltZT8KICAgICAgICAgICAgICAgICAgICBXaGF0IGlzIHRoZSBjb3VudGVyLXBsZWEgaW4gdGhlIGN1c3RvZHkgb2YgdGhlIGFyY2hvbnM/4oCdIDwvdHJhbnNsYXRpb24+"
translation['45.88'] = ""
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FdmVuIG9mIG15c2VsZiwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIEkgY291bGQgcHJldHR5IHdlbGwgc3VzcGVjdCB0aGF0IHRoaXMgZmVsbG93IFN0ZXBoYW51cyB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBiZSBhdCBhIGxvc3MgZm9yIHNvbWV0aGluZyB0byBzYXkgaW4gZGVmZW5jZSBvZiBoaXMgdGVzdGltb255OyBhbmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHNlZWsgdG8gbWlzbGVhZCBhbmQgZGVjZWl2ZSB5b3UgaW4gaGlzIHNwZWVjaCBieSBhbGxlZ2luZyB0aGF0IGhlIGhhcyBub3QKICAgICAgICAgICAgICAgICAgICBib3JuZSB3aXRuZXNzIHRvIGV2ZXJ5dGhpbmcgd3JpdHRlbiBpbiB0aGUgZGVwb3NpdGlvbi4gRm9yIGhlIGlzIGEga25hdmUsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBtYW55IHRvIHdyaXRlIHNwZWVjaGVzIGFuZCBnaXZlIGFkdmljZSBvbiBQaG9ybWlvJ3MgYmVoYWxmLgogICAgICAgICAgICAgICAgICAgIEZ1cnRoZXJtb3JlIGl0IGlzIGJ1dCBuYXR1cmFsIHRoYXQgdGhvc2Ugd2hvIHVuZGVydGFrZSB0byBnaXZlIGZhbHNlIHRlc3RpbW9ueQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBhdCB0aGUgc3RhcnQgcHJlcGFyZSBzb21lIG1lYW5zIG9mIGRlZmVuZGluZyBpdC4gPC90cmFuc2xhdGlvbj4="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBJIGJpZCB5b3UgdG8gYmVhciB0aGlzIGluIG1pbmQsIHRoYXQgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcywgbG9uZyBhcyBpdCB3YXMsIGhlIG5vd2hlcmUgYnJvdWdodCBmb3J3YXJkIHdpdG5lc3NlcyB0byBwcm92ZSB0byB5b3UKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhhdCBoZSB3YXMgaGltc2VsZiBwcmVzZW50IHdoZW4gbXkgZmF0aGVyIG1hZGUgdGhpcyB3aWxsLCBzbyBhcyB0byBrbm93CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgd2lsbCB3aGljaCBteSBmYXRoZXIgbWFkZSwgb3IgdGhhdCBoZSBzYXcgdGhlCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQgb3BlbmVkIHdoaWNoIHRoZXkgZGVjbGFyZSBteSBmYXRoZXIgZHJldyB1cCBhbmQgbGVmdCBhcyBoaXMgd2lsbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIG15IG9wcG9uZW50IGhhcyB0ZXN0aWZpZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHdoYXQgd2FzIHdyaXR0ZW4gaW4gdGhlIGRvY3VtZW50IHdhcyBhIGNvcHkgb2YgdGhlIHdpbGwgb2YgUGFzaW8sIGJ1dCBpcwogICAgICAgICAgICAgICAgICAgIHVuYWJsZSB0byBwcm92ZSBlaXRoZXIgdGhhdCBteSBmYXRoZXIgbWFkZSBhIHdpbGwgb3IgdGhhdCBoZSB3YXMgaGltc2VsZiBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgYW5kIHNhdyBpdCB3aGVuIG15IGZhdGhlciBkcmV3IGl0IHVwLCBpcyBoZSBub3QgbWFuaWZlc3RseSBwcm92ZWQgdG8gaGF2ZSBnaXZlbgogICAgICAgICAgICAgICAgICAgIGZhbHNlIHRlc3RpbW9ueT8gPC90cmFuc2xhdGlvbj4="
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiwgbm93LCBoZSBtYWludGFpbnMgdGhhdCBpdCB3YXMgYSBjaGFsbGVuZ2UgYW5kIG5vdCBhIGRlcG9zaXRpb24sIGhlIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHRlbGxpbmcgdGhlIHRydXRoLiBGb3IgYWxsIHBpZWNlcyBvZiBldmlkZW5jZSB3aGljaCB0aGUgcGFydGllcyB0byBhIHN1aXQgYnJpbmcKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIGNvdXJ0IHdoZW4gdGhleSB0ZW5kZXIgY2hhbGxlbmdlcyB0byBvbmUgYW5vdGhlciwgdGhleSBicmluZyBpbiBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIGRlcG9zaXRpb25zLiBPdGhlcndpc2UgeW91IHdvdWxkIG5vdCBrbm93IHdoZXRoZXIgd2hhdCB0aGV5IHNldmVyYWxseQogICAgICAgICAgICAgICAgICAgIHNheSBpcyB0cnVlIG9yIGZhbHNlLCBpZiB0aGV5IGRpZCBub3QgYnJpbmcgZm9yd2FyZCB0aGUgd2l0bmVzc2VzIGFsc28uIEJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBkbyBicmluZyBpbiB3aXRuZXNzZXMsIHlvdSByZWx5IHVwb24gdGhlc2UgYXMgYmVpbmcgcmVzcG9uc2libGUsIGFuZCBzbwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHN0YXRlbWVudHMgYW5kIHRoZSB0ZXN0aW1vbnkgb2ZmZXJlZCB5b3UgY2FzdCB5b3VyIHZvdGVzIGZvciB3aGF0IHNlZW1zCiAgICAgICAgICAgICAgICAgICAgdG8geW91IHRvIGJlIGEganVzdCB2ZXJkaWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['46.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgd2lzaCB0aGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICB0byBwcm92ZSB0byB5b3UgdGhhdCB0aGUgZGVwb3NpdGlvbiBpcyBub3QgYSBjaGFsbGVuZ2UsIGFuZCB0byBzaG93IHlvdSBob3cgdGhleQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGhhdmUgZGVwb3NlZCBpZiB0aGUgY2hhbGxlbmdlIHdhcyBnaXZlbiwgd2hpY2ggaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90LOKAlOKAnFRoZSBkZXBvbmVudHMgdGVzdGlmeSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZSBhcmJpdHJhdG9yIFRlaXNpYXMsIHdoZW4gUGhvcm1pbyBjaGFsbGVuZ2VkIEFwb2xsb2RvcnVzIHRvIG9wZW4gdGhlIGRvY3VtZW50CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggQW1waGlhcywgdGhlIGJyb3RoZXItaW4tbGF3IG9mIENlcGhpc29waG9uLCBwcm9kdWNlZCwgYW5kIHRoYXQgQXBvbGxvZG9ydXMKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIG9wZW4gaXQu4oCdIElmIHRoZXkgaGFkIGdpdmVuIHRoZWlyIGV2aWRlbmNlIGluIHRoaXMgd2F5LAogICAgICAgICAgICAgICAgICAgIHRoZXkgd291bGQgaGF2ZSBhcHBlYXJlZCB0byBiZSBzcGVha2luZyB0aGUgdHJ1dGguIEJ1dCB0byBkZXBvc2UgdGhhdCB3aGF0IHdhcwogICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gaW4gdGhlIGRvY3VtZW50IHdoaWNoIFBob3JtaW8gcHJvZHVjZWQgd2FzIGEgY29weSBvZiB0aGUgd2lsbCBvZiBQYXNpbywKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGhhdmluZyBiZWVuIHByZXNlbnQgd2hlbiBQYXNpbyBtYWRlIHRoZSB3aWxsLCBvciBrbm93aW5nIHRoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgbWFkZSBvbmUsIGRvZXMgdGhpcyBub3Qgc2VlbSB0byB5b3UgdG8gYmUgYSBtYW5pZmVzdCBwaWVjZSBvZiBpbnNvbGVuY2U/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['46.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgc3VyZWx5LAogICAgICAgICAgICAgICAgICAgIGlmIGhlIHNheXMgdGhhdCBoZSBiZWxpZXZlZCB0aGlzIHRvIGJlIHRydWUgYmVjYXVzZSBQaG9ybWlvIHNhaWQgaXQgd2FzLCBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGxpa2UgdGhlIHNhbWUgbWFuIHRvIGJlbGlldmUgaGltIHdoZW4gaGUgc2FpZCB0aGlzLCBhbmQgdG8gdGVzdGlmeSB0bwogICAgICAgICAgICAgICAgICAgIGl0IGF0IGhpcyBiaWRkaW5nLiBUaGUgbGF3cywgaG93ZXZlciwgZG8gbm90IHNheSB0aGlzLCBidXQgb3JkYWluIHRoYXQgYSBtYW4gbWF5CiAgICAgICAgICAgICAgICAgICAgdGVzdGlmeSB0byB3aGF0IGhlIGtub3dzLCBvciB0byBtYXR0ZXJzIGF0IHRoZSBkb2luZyBvZiB3aGljaCBoZSB3YXMgcHJlc2VudCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBoaXMgdGVzdGltb255IG11c3QgYmUgY29tbWl0dGVkIHRvIHdyaXRpbmcgaW4gb3JkZXIgdGhhdCBpdCBtYXkgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUgdG8gc3VidHJhY3QgYW55dGhpbmcgZnJvbSB3aGF0IGlzIHdyaXR0ZW4sIG9yIHRvIGFkZCBhbnl0aGluZyB0byBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlYXJzYXkgZXZpZGVuY2UgdGhleSBkbyBub3QgYWRtaXQgZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgbGl2aW5nIHBlcnNvbiwgYnV0IG9ubHkgZnJvbSBvbmUgd2hvIGlzIGRlYWQ7IGJ1dCBpbiB0aGUgY2FzZSBvZiB0aG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgc2ljayBvciBhYnNlbnQgZnJvbSB0aGUgY291bnRyeSB0aGV5IGFsbG93IGV2aWRlbmNlIHRvIGJlIGludHJvZHVjZWQsIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgaXQgYmUgaW4gd3JpdHRlbiBmb3JtLCBhbmQgdGhlIGFic2VudCB3aXRuZXNzIGFuZCB0aGUgb25lIHN1Ym1pdHRpbmcgaGlzCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IHNoYWxsIGFsaWtlIGJlIGxpYWJsZSB0byBhY3Rpb24gdW5kZXIgdGhlIHNhbWUgaW1wZWFjaG1lbnQsIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgaWYgdGhlIGFic2VudCB3aXRuZXNzIGFja25vd2xlZGdlcyBoaXMgZXZpZGVuY2UsIGhlIG1heSBiZSBsaWFibGUgdG8KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gZm9yIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnksIGFuZCBpZiBoZSBkb2VzIG5vdCBhY2tub3dsZWRnZSBpdCwgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIHdobyBzdWJtaXR0ZWQgaGlzIHRlc3RpbW9ueSBtYXkgYmUgbGlhYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['46.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdwogICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBoZXJlLCB3aXRob3V0IGtub3dpbmcgdGhhdCBteSBmYXRoZXIgbGVmdCBhIHdpbGwgb3IgaGF2aW5nIGV2ZXIgYmVlbgogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgd2hlbiBoZSBkcmV3IG9uZSB1cCwgYnV0IGhhdmluZyBiZWVuIHRvbGQgdGhpcyBieSBQaG9ybWlvLCBoYXMgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBoZWFyc2F5IGV2aWRlbmNlIHdoaWNoIGlzIGZhbHNlLCBhbmQgaGFzIGRvbmUgaXQgaW4gZGVmaWFuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhdy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHRlbGxpbmcgdGhlIHRydXRoIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZSBsYXcgaXRzZWxmLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgc2hhbGwgYmUgbGF3ZnVsIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjZSBoZWFyc2F5IGV2aWRlbmNlIGZyb20gb25lIHRoYXQgaXMgZGVhZCwgYW5kIHdyaXR0ZW4gZXZpZGVuY2UgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICAgICAgaW4gYWJzZW5jZSBmcm9tIG9uZSB3aG8gaXMgb3V0IG9mIHRoZSBjb3VudHJ5LCBvciBpcyBzaWNrLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgc2hhbGwgYmUgbGF3ZnVsIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjZSBoZWFyc2F5IGV2aWRlbmNlIGZyb20gb25lIHRoYXQgaXMgZGVhZCwgYW5kIHdyaXR0ZW4gZXZpZGVuY2UgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICAgICAgaW4gYWJzZW5jZSBmcm9tIG9uZSB3aG8gaXMgb3V0IG9mIHRoZSBjb3VudHJ5LCBvciBpcyBzaWNrLjwvdHJhbnNsYXRpb24+"
translation['46.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgSSB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgdG8geW91IHRoYXQgaGUgaGFzIGdpdmVuIGV2aWRlbmNlIGNvbnRyYXJ5IHRvIGFub3RoZXIgbGF3IGFsc28sIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGtub3cgdGhhdCBQaG9ybWlvLCBoYXZpbmcgbm8gaGFyYm9yIG9mIHJlZnVnZSBmcm9tIHRoZSBncmlldm91cyB3cm9uZ3MgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgY29tbWl0dGVkLCBoYWQgbWFkZSBhIHByZXRlbmNlIG9mIHRoZSBjaGFsbGVuZ2UsIGJ1dCBhY3R1YWxseSBoYXMgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBmb3IgaGltc2VsZiwgc2NyZWVuaW5nIGhpbXNlbGYgYmVoaW5kIHRoZSB0ZXN0aW1vbnkgb2YgdGhlc2UgbWVuLCBieQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBqdXJ5bWVuIHdlcmUgZGVjZWl2ZWQsIGFzc3VtaW5nIHRoYXQgdGhleSB3ZXJlIHRlc3RpZnlpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIGFuZCBJIHdhcyByb2JiZWQgb2YgdGhlIHByb3BlcnR5IHdoaWNoIG15IGZhdGhlciBsZWZ0IG1lIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIHJlcGFyYXRpb24gZm9yIHRoZSB3cm9uZ3Mgd2hpY2ggSSBoYXZlIHN1ZmZlcmVkLiBGb3IgdGhlIGxhd3MgZG8gbm90IHBlcm1pdCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHRvIGdpdmUgZXZpZGVuY2UgZm9yIGhpbXNlbGYgZWl0aGVyIGluIGNyaW1pbmFsIHN1aXRzIG9yIGluIGNpdmlsIHN1aXRzIG9yCiAgICAgICAgICAgICAgICAgICAgaW4gYXVkaXRzLiBQaG9ybWlvLCBob3dldmVyLCBoYXMgZ2l2ZW4gZXZpZGVuY2UgZm9yIGhpbXNlbGYsIHdoZW4gdGhlc2UgbWVuIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYXZlIGdpdmVuIHRoaXMgdGVzdGltb255IG9uIHRoZSBzdHJlbmd0aCBvZiB3aGF0IHRoZXkgaGVhcmQgZnJvbSBoaW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['46.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgbWF5IGJlIGZ1bGx5IGNvbnZpbmNlZCBvZiB0aGlzLCBwbGVhc2UgcmVhZCB0aGUgbGF3IGl0c2VsZi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSB0d28gcGFydGllcyB0byBhCiAgICAgICAgICAgICAgICAgICAgICAgIHN1aXQgc2hhbGwgYmUgY29tcGVsbGVkIHRvIGFuc3dlciBvbmUgYW5vdGhlcidzIHF1ZXN0aW9ucywgYnV0IHRoZXkgbWF5IG5vdAogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aWZ5LjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHR3byBwYXJ0aWVzIHRvIGEKICAgICAgICAgICAgICAgICAgICAgICAgc3VpdCBzaGFsbCBiZSBjb21wZWxsZWQgdG8gYW5zd2VyIG9uZSBhbm90aGVyJ3MgcXVlc3Rpb25zLCBidXQgdGhleSBtYXkgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RpZnkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBjb25zaWRlciB0aGlzIGxhdyBhbHNvCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggb3JkYWlucyB0aGF0IGFjdGlvbiBmb3IgZmFsc2UgdGVzdGltb255IG1heSBhbHNvIGJlIGJyb3VnaHQgb24gdGhpcyB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kLCBuYW1lbHksIHRoYXQgb25lIHRlc3RpZmllcyBjb250cmFyeSB0byBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgd2l0bmVzcyBzaGFsbCBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGxpYWJsZSB0byBhY3Rpb24gZm9yIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnkgb24gdGhlIG1lcmUgZ3JvdW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZXMgZXZpZGVuY2UgY29udHJhcnkgdG8gbGF3LCBhbmQgdGhlIG9uZSBwcm9kdWNpbmcgaGltIHNoYWxsIGFsc28gYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGlhYmxlIGluIHRoZSBzZWxmc2FtZSBtYW5uZXIuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgd2l0bmVzcyBzaGFsbCBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGxpYWJsZSB0byBhY3Rpb24gZm9yIGdpdmluZyBmYWxzZSB0ZXN0aW1vbnkgb24gdGhlIG1lcmUgZ3JvdW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZXMgZXZpZGVuY2UgY29udHJhcnkgdG8gbGF3LCBhbmQgdGhlIG9uZSBwcm9kdWNpbmcgaGltIHNoYWxsIGFsc28gYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGlhYmxlIGluIHRoZSBzZWxmc2FtZSBtYW5uZXIuPC90cmFuc2xhdGlvbj4="
translation['46.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsCiAgICAgICAgICAgICAgICAgICAgZXZlbiBmcm9tIHRoZSB0YWJsZXQgdXBvbiB3aGljaCB0aGUgZGVwb3NpdGlvbiBpcyB3cml0dGVuIG9uZSBjYW4gdGVsbCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGdpdmVuIGZhbHNlIGV2aWRlbmNlLiBGb3IgaXQgaXMgd2hpdGVuZWQsIGFuZCB3YXMgcHJlcGFyZWQgYXQgaG9tZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXMgdGhlIGRlcG9zaXRpb24gd2FzIHdyaXR0ZW4sIO+8iHdpdGggYQogICAgICAgICAgICAgICAgICAgICAgICBkYXJrIHBpZ21lbnTvvIkgb24gYSB3aGl0ZW5lZCB0YWJsZXQsIGl0IGhhZCBvYnZpb3VzbHkgYmVlbiBwcmVwYXJlZAogICAgICAgICAgICAgICAgICAgICAgICBpbiBhZHZhbmNlLiBBbiBvZmYtaGFuZCBhbnN3ZXIgdG8gYSBjaGFsbGVuZ2Ugd291bGQgaGF2ZSBiZWVuIHdyaXR0ZW4gb24gYQogICAgICAgICAgICAgICAgICAgICAgICB3YXhlZCB0YWJsZXQuPC9ub3RlPiBZZXQgaXQgaXMgb25seSB0aG9zZSB3aG8gdGVzdGlmeSB0byBmYWN0cyB3aG8gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgZGVwb3NpdGlvbnMgcHJlcGFyZWQgYXQgaG9tZTsgdGhvc2Ugd2hvIHRlc3RpZnkgdG8gY2hhbGxlbmdlcywgd2hvIHN0YW5kCiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBvbiB0aGUgc3B1ciBvZiB0aGUgbW9tZW50LCBzaG91bGQgcHJlc2VudCB0aGVpciBkZXBvc2l0aW9ucyB3cml0dGVuIGluCiAgICAgICAgICAgICAgICAgICAgd2F4LCBpbiBvcmRlciB0aGF0LCBpZiBvbmUgd2FudHMgdG8gYWRkIG9yIHRvIGVyYXNlIGFueXRoaW5nLCBpdCBtYXkgYmUgZWFzaWVyCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gc28uIDwvdHJhbnNsYXRpb24+"
translation['46.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBhbGwgdGhlc2UgdGhpbmdzLCB0aGVuLCBoZSBpcwogICAgICAgICAgICAgICAgICAgIHNob3duIHRvIGhhdmUgZ2l2ZW4gZmFsc2UgdGVzdGltb255LCBhbmQgdG8gaGF2ZSBnaXZlbiBpdCBjb250cmFyeSB0byBsYXc7IGJ1dCBJCiAgICAgICAgICAgICAgICAgICAgd2lzaCB0byBwcm92ZSB0aGlzIGZ1cnRoZXIgZmFjdCwgdGhhdCBvdXIgZmF0aGVyIGRpZCBub3QgbWFrZSBhIHdpbGwsIGFuZCBjb3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBsZWdhbGx5IG1ha2Ugb25lLiBGb3IsIGlmIGFueW9uZSBzaG91bGQgYXNrIHlvdSBpbiBhY2NvcmRhbmNlIHdpdGggd2hhdCBsYXdzCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hvdWxkIGxpdmUgYXMgY2l0aXplbnMsIHlvdSB3b3VsZCBvZiBjb3Vyc2UgYW5zd2VyLCB0aGUgZXN0YWJsaXNoZWQgbGF3cy4KICAgICAgICAgICAgICAgICAgICBCdXQgbG9vayB5b3UsIHRoZSBsYXdzIG9yZGFpbiwg4oCcbm9yIHNoYWxsIGl0IGJlIHBlcm1pdHRlZCB0byBlbmFjdCBhCiAgICAgICAgICAgICAgICAgICAgbGF3IGFwcGx5aW5nIHRvIGFuIGluZGl2aWR1YWwsIHVubGVzcyB0aGUgc2FtZSBsYXcgYXBwbGllcyBhbHNvIHRvIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMu4oCdIDwvdHJhbnNsYXRpb24+"
translation['46.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGxhdywgdGhlbiwgb3JkYWlucwogICAgICAgICAgICAgICAgICAgIHRoYXQgd2Ugc2hvdWxkIGxpdmUgYXMgY2l0aXplbnMgdW5kZXIgdGhlIHNhbWUgbGF3cyBhbmQgbm90IG9uZSB1bmRlciBvbmUgbGF3LAogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgdW5kZXIgYW5vdGhlci4gQnV0IG15IGZhdGhlciBkaWVkIGR1cmluZyB0aGUgYXJjaG9uc2hpcCBvZgogICAgICAgICAgICAgICAgICAgICAgICBEeXNuaWNldHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzcxLy0zNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3MSIgdG89Ii0zNzAiPjM3MTwvZGF0ZVJhbmdlPi0zNzAgQi5DLjwvbm90ZT4gYW5kIFBob3JtaW8gYmVjYW1lCiAgICAgICAgICAgICAgICAgICAgYW4gQXRoZW5pYW4gY2l0aXplbiBkdXJpbmcgdGhlIGFyY2hvbnNoaXAgb2YgTmljb3BoZW11cyw8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzcxLy0zNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3MSIgdG89Ii0zNzAiPjM3MTwvZGF0ZVJhbmdlPi0zNzAgQi5DLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzYxLy0zNjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM2MSIgdG89Ii0zNjAiPjM2MTwvZGF0ZVJhbmdlPi0zNjAgQi5DLjwvbm90ZT4gaW4gdGhlIHRlbnRoIHllYXIgYWZ0ZXIgbXkgZmF0aGVyIGRpZWQuCiAgICAgICAgICAgICAgICAgICAgSG93LCB0aGVuLCBjb3VsZCBteSBmYXRoZXIsIG5vdCBrbm93aW5nIHRoYXQgUGhvcm1pbyB3YXMgdG8gYmVjb21lIGFuIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiwgaGF2ZSBnaXZlbiBoaW0gaW4gbWFycmlhZ2UgaGlzIG93biB3aWZlLCBhbmQgdGh1cyBoYXZlIG91dHJhZ2VkIHVzLAogICAgICAgICAgICAgICAgICAgIHNob3duIGhpcyBjb250ZW1wdCBvZiB0aGUgZ2lmdCBvZiBjaXRpemVuc2hpcCB3aGljaCBoZSBoYWQgcmVjZWl2ZWQgZnJvbSB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIGRpc3JlZ2FyZGVkIHlvdXIgbGF3cz8gQW5kIHdoaWNoIHdhcyB0aGUgbW9yZSBob25vcmFibGUgY291cnNlIGZvcgogICAgICAgICAgICAgICAgICAgIGhpbeKAlHRvIGRvIHRoaXMgZHVyaW5nIGhpcyBsaWZldGltZSwgc3VwcG9zaW5nIGhlIHdpc2hlZCB0byBkbyBpdCwgb3IKICAgICAgICAgICAgICAgICAgICB0byBsZWF2ZSBiZWhpbmQgaGltIGF0IGhpcyBkZWF0aCBhIHdpbGwgd2hpY2ggaGUgaGFkIG5vIGxlZ2FsIHJpZ2h0IHRvIG1ha2U/CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNjEvLTM2MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzYxIiB0bz0iLTM2MCI+MzYxPC9kYXRlUmFuZ2U+LTM2MCBCLkMuPC90cmFuc2xhdGlvbj4="
translation['46.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdmVyaWx5LCB3aGVuIHlvdSBoYXZlIGhlYXJkIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyB5b3Ugd2lsbCBzZWUgY2xlYXJseSB0aGF0IFBhc2lvIGhhZCBubyByaWdodCB0byBtYWtlIGEKICAgICAgICAgICAgICAgICAgICAgICAgd2lsbC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbGF3LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW55IGNpdGl6ZW4sIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiBvZiB0aG9zZSB3aG8gaGFkIGJlZW4gYWRvcHRlZCB3aGVuIFNvbG9uIGVudGVyZWQgdXBvbiBoaXMgb2ZmaWNlLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgaGFkIHRoZXJlYnkgYmVjb21lIHVuYWJsZSBlaXRoZXIgdG8gcmVub3VuY2Ugb3IgdG8gY2xhaW0gYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcHJlY2lzZSBtZWFuaW5nIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBocmFzZSBpcyBkaXNwdXRlZC4gU2VlIHRoZSBhdXRob3JpdGllcyBjaXRlZCBpbiB0aGUgbmV4dCBub3RlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGF2ZSB0aGUgcmlnaHQgdG8gZGlzcG9zZSBvZiBoaXMgb3duIHByb3BlcnR5IGJ5IHdpbGwgYXMgaGUgc2hhbGwgc2VlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpdCwgaWYgaGUgaGF2ZSBubyBtYWxlIGNoaWxkcmVuIGxhd2Z1bGx5IGJvcm4sIHVubGVzcyBoaXMgbWluZCBiZSBpbXBhaXJlZAogICAgICAgICAgICAgICAgICAgICAgICBieSBvbmUgb2YgdGhlc2UgdGhpbmdzLCBsdW5hY3kgb3Igb2xkIGFnZSBvciBkcnVncyBvciBkaXNlYXNlLCBvciB1bmxlc3MgaGUKICAgICAgICAgICAgICAgICAgICAgICAgYmUgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBhIHdvbWFuLCBvciB1bmRlciBjb25zdHJhaW50IG9yIGRlcHJpdmVkIG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGliZXJ0eS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T24gdGhpcyBsYXcgY29uc3VsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkhlcm1hbm4tVGhhbGhlaW0sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlY2h0c2FsdGVydGjDvGZtZXI8L3RpdGxlPiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcC4gNjggZmYuPC9iaWJsPiwgd2l0aCB0aGUgYXV0aG9yaXRpZXMgdGhlcmUgY2l0ZWQuIEl0IGlzIHF1b3RlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHBhcnQsIGFsc28gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NC42OCIgdmFsaWQ9InllcyI+RGVtLiA0NC42ODwvYmlibD4sIGFuZCBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlcXVlbnRseSByZWZlcnJlZCB0byBieSBJc2FldXMuIFNlZSBXeXNlJ3Mgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc2FldXMgMi4xMyIgdmFsaWQ9InllcyI+SXNhZXVzIDIuMTM8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+U2F2YWdlLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gRmFtaWx5PC90aXRsZT4sIHAuIDExOTwvYmlibD4uIE9ic2VydmUgdGhhdCwgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXcgaGFzIHRvIGRvIHdpdGggdGhvc2UgYWRvcHRlZCBpbnRvIHRoZSBmYW1pbHksIG91ciBwbGVhZGVyIG1ha2VzIGl0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlciB0byB0aG9zZSBhZG9wdGVkIGFzIGNpdGl6ZW5zLjwvbm90ZT48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFueSBjaXRpemVuLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHRpb24gb2YgdGhvc2Ugd2hvIGhhZCBiZWVuIGFkb3B0ZWQgd2hlbiBTb2xvbiBlbnRlcmVkIHVwb24gaGlzIG9mZmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhhZCB0aGVyZWJ5IGJlY29tZSB1bmFibGUgZWl0aGVyIHRvIHJlbm91bmNlIG9yIHRvIGNsYWltIGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByZWNpc2UgbWVhbmluZyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaHJhc2UgaXMgZGlzcHV0ZWQuIFNlZSB0aGUgYXV0aG9yaXRpZXMgY2l0ZWQgaW4gdGhlIG5leHQgbm90ZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGhhdmUgdGhlIHJpZ2h0IHRvIGRpc3Bvc2Ugb2YgaGlzIG93biBwcm9wZXJ0eSBieSB3aWxsIGFzIGhlIHNoYWxsIHNlZQogICAgICAgICAgICAgICAgICAgICAgICBmaXQsIGlmIGhlIGhhdmUgbm8gbWFsZSBjaGlsZHJlbiBsYXdmdWxseSBib3JuLCB1bmxlc3MgaGlzIG1pbmQgYmUgaW1wYWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgb25lIG9mIHRoZXNlIHRoaW5ncywgbHVuYWN5IG9yIG9sZCBhZ2Ugb3IgZHJ1Z3Mgb3IgZGlzZWFzZSwgb3IgdW5sZXNzIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgYSB3b21hbiwgb3IgdW5kZXIgY29uc3RyYWludCBvciBkZXByaXZlZCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYmVydHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9uIHRoaXMgbGF3IGNvbnN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5IZXJtYW5uLVRoYWxoZWltLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWNodHNhbHRlcnRow7xmbWVyPC90aXRsZT4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHAuIDY4IGZmLjwvYmlibD4sIHdpdGggdGhlIGF1dGhvcml0aWVzIHRoZXJlIGNpdGVkLiBJdCBpcyBxdW90ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBwYXJ0LCBhbHNvIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDQuNjgiIHZhbGlkPSJ5ZXMiPkRlbS4gNDQuNjg8L2JpYmw+LCBhbmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXF1ZW50bHkgcmVmZXJyZWQgdG8gYnkgSXNhZXVzLiBTZWUgV3lzZSdzIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNhZXVzIDIuMTMiIHZhbGlkPSJ5ZXMiPklzYWV1cyAyLjEzPC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPlNhdmFnZSwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIEZhbWlseTwvdGl0bGU+LCBwLiAxMTk8L2JpYmw+LiBPYnNlcnZlIHRoYXQsIHdoaWxlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF3IGhhcyB0byBkbyB3aXRoIHRob3NlIGFkb3B0ZWQgaW50byB0aGUgZmFtaWx5LCBvdXIgcGxlYWRlciBtYWtlcyBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXIgdG8gdGhvc2UgYWRvcHRlZCBhcyBjaXRpemVucy48L25vdGU+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SGVybWFubi1UaGFsaGVpbSwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVjaHRzYWx0ZXJ0aMO8Zm1lcjwvdGl0bGU+LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBwLiA2OCBmZi48L2JpYmw+LCB3aXRoIHRoZSBhdXRob3JpdGllcyB0aGVyZSBjaXRlZC4gSXQgaXMgcXVvdGVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gcGFydCwgYWxzbyBpbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWNodHNhbHRlcnRow7xmbWVyPC90aXRsZT4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHAuIDY4IGZmLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDQuNjgiIHZhbGlkPSJ5ZXMiPkRlbS4gNDQuNjg8L2JpYmw+LCBhbmQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXF1ZW50bHkgcmVmZXJyZWQgdG8gYnkgSXNhZXVzLiBTZWUgV3lzZSdzIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSXNhZXVzIDIuMTMiIHZhbGlkPSJ5ZXMiPklzYWV1cyAyLjEzPC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPlNhdmFnZSwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIEZhbWlseTwvdGl0bGU+LCBwLiAxMTk8L2JpYmw+LiBPYnNlcnZlIHRoYXQsIHdoaWxlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF3IGhhcyB0byBkbyB3aXRoIHRob3NlIGFkb3B0ZWQgaW50byB0aGUgZmFtaWx5LCBvdXIgcGxlYWRlciBtYWtlcyBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXIgdG8gdGhvc2UgYWRvcHRlZCBhcyBjaXRpemVucy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gRmFtaWx5PC90aXRsZT4sIHAuIDExOTwvdHJhbnNsYXRpb24+"
translation['46.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LCB0aGVuLCB3aGljaCBkb2VzIG5vdCBwZXJtaXQgYSBtYW4gdG8gZGlzcG9zZSBvZiBoaXMgcHJvcGVydHkgYnkgd2lsbCwKICAgICAgICAgICAgICAgICAgICBpZiBoZSBoYXZlIG1hbGUgY2hpbGRyZW4gbGF3ZnVsbHkgYm9ybi4gQnV0IHRoZXNlIG1lbiBkZWNsYXJlIHRoYXQgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGlzIHdpbGwsIHlldCB0aGV5IGNhbm5vdCBwcm92ZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGF0IHRoZSB0aW1lLgogICAgICAgICAgICAgICAgICAgIEFub3RoZXIgdGhpbmcgYWxzbyBkZXNlcnZlcyB0byBiZSBib3JuZSBpbiBtaW5kLCB0aGF0IGl0IGlzIHRvIHRob3NlIHdobyBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgYmVlbiBhZG9wdGVkLCBidXQgd2VyZSBsYXdmdWxseSBib3JuLCB0aGF0IHRoZSBsYXcgZ2l2ZXMgdGhlIHJpZ2h0LCBpbiBjYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYmVpbmcgY2hpbGRsZXNzLCB0byBkaXNwb3NlIG9mIHRoZWlyIHByb3BlcnR5IGJ5IHdpbGwuIE5vdyBteSBmYXRoZXIgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhZG9wdGVkIGFzIGEgY2l0aXplbiBieSB0aGUgcGVvcGxlLCBzbyB0aGF0IG9uIHRoaXMgYWNjb3VudCBhbHNvIGhlIGhhZCBub3QKICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgdG8gbWFrZSBhIHdpbGwsIGVzcGVjaWFsbHkgaW4gcmVnYXJkIHRvIGhpcyB3aWZlLCBvZiB3aG9tIGhlIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBldmVuIHRoZSBsZWdhbCBndWFyZGlhbjsgYW5kIGJlc2lkZXMgaGUgaGFkIGNoaWxkcmVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['46.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3RlIGZ1cnRoZXIsIHRoYXQgZXZlbiBpZiBhIG1hbiBiZSBjaGlsZGxlc3MsIGhlIGhhcyBub3QgdGhlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgdG8gZGlzcG9zZSBvZiBoaXMgcHJvcGVydHkgYnkgd2lsbCwgdW5sZXNzIGhlIGJlIG9mIHNvdW5kIG1pbmQ7IGJ1dCBpZiBoZSBiZQogICAgICAgICAgICAgICAgICAgIGltcGFpcmVkIGJ5IGRpc2Vhc2Ugb3IgdGhlIGVmZmVjdCBvZiBkcnVncywgb3IgYmUgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgd29tYW4sIG9yIGJlIHRoZSB2aWN0aW0gb2Ygb2xkIGFnZSBvciBtYWRuZXNzLCBvciBiZSB1bmRlciBjb25zdHJhaW50LCB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIG9yZGFpbiB0aGF0IGhlIGJlIGluY29tcGV0ZW50LiBOb3cgY29uc2lkZXIgd2hldGhlciB0aGUgd2lsbCwgd2hpY2ggdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgc2F5IG15IGZhdGhlciBtYWRlLCBzZWVtcyB0byB5b3UgdG8gYmUgdGhlIHdpbGwgb2YgYSBtYW4gb2Ygc291bmQgbWluZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5UYWtpbmcgdGhlIGxlYXNlLCBhbmQgbm90aGluZyBlbHNlLCBhcyBhbgogICAgICAgICAgICAgICAgICAgIGV4YW1wbGUsIHRlbGwgbWUgd2hldGhlciBpdCBzZWVtcyB0byB5b3UgY29uc2lzdGVudCB0aGF0IG15IGZhdGhlciBzaG91bGQgcmVmdXNlCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBwZXJtaXNzaW9uIHRvIGNhcnJ5IG9uIGhpcyBidXNpbmVzcyBleGNlcHQgaW4gYXNzb2NpYXRpb24gd2l0aCB1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgeWV0IHRoYXQgaGUgc2hvdWxkIGdpdmUgaGltIGhpcyB3aWZlIGluIG1hcnJpYWdlLCBhbmQgdGh1cyBtYWtlIGhpbSBhIHBhcnRuZXIgaW4KICAgICAgICAgICAgICAgICAgICBoaXMgb3duIGZhdGhlcmhvb2Q/IEFuZCBkbyBub3QgYmUgc3VycHJpc2VkIHRoYXQsIHdoaWxlIHRoZXkgd2VyZSBhcnJhbmdpbmcgYWxsCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpbiByZWdhcmQgdG8gdGhlIGxlYXNlIHNvIGNsZXZlcmx5LCB0aGV5IG92ZXJsb29rZWQgdGhpcy4gRm9yIHBlcmhhcHMgdGhleQogICAgICAgICAgICAgICAgICAgIHBhaWQgbm8gaGVlZCB0byBhbnl0aGluZyBlbHNlLCBzYXZlIHRvIHJvYiBtZSBvZiBteSBtb25leSBhbmQgdG8gc2V0IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIGRvd24gYXMgYSBkZWJ0b3IgdG8gdGhlIGJhbms7IGFuZCB0aGVuIHRoZXkgZGlkIG5vdCBzdXBwb3NlIHRoYXQgSSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBjbGV2ZXIgZW5vdWdoIHRvIGxvb2sgaW50byB0aGVzZSBtYXR0ZXJzIGNsb3NlbHkuIDwvdHJhbnNsYXRpb24+"
translation['46.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCB0aGVuLCBjb25zaWRlciB0aGUgbGF3cywgYW5kIHNlZQogICAgICAgICAgICAgICAgICAgIGZyb20gd2hvbSB0aGV5IG9yZGFpbiB0aGF0IGJldHJvdGhhbHMgc2hvdWxkIGJlIG1hZGUsIHRoYXQgeW91IG1heSBjb21lIHRvIGtub3cKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW0gYWxzbywgdGhhdCB0aGlzIGZlbGxvdyBTdGVwaGFudXMgaGFzIHByb3ZlZCBoaW1zZWxmIHRvIGJlIGEgZmFsc2UKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzIHRvIGEgZm9yZ2VkIHdpbGwuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhIHdvbWFuIGJlIGJldHJvdGhlZCBmb3IgbGF3ZnVsIG1hcnJpYWdlIGJ5IGhlciBmYXRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgb3IgYnkgYSBicm90aGVyIGJlZ290dGVuIG9mIHRoZSBzYW1lIGZhdGhlciBvciBieSBoZXIgZ3JhbmRmYXRoZXIgb24gaGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlcidzIHNpZGUsIGhlciBjaGlsZHJlbiBzaGFsbCBiZSBsZWdpdGltYXRlLiBJbiBjYXNlIHRoZXJlIGJlIG5vbmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2UgcmVsYXRpdmVzLCBpZiB0aGUgd29tYW4gYmUgYW4gaGVpcmVzcywgaGVyIGd1YXJkaWFuIHNoYWxsIHRha2UgaGVyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmUsIGFuZCBpZiBzaGUgYmUgbm90LCB0aGF0IG1hbiBzaGFsbCBiZSBoZXIgZ3VhcmRpYW4gdG8gd2hvbSBzaGUgbWF5CiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ1c3QgaGVyc2VsZi48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGEgd29tYW4gYmUgYmV0cm90aGVkIGZvciBsYXdmdWwgbWFycmlhZ2UgYnkgaGVyIGZhdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBvciBieSBhIGJyb3RoZXIgYmVnb3R0ZW4gb2YgdGhlIHNhbWUgZmF0aGVyIG9yIGJ5IGhlciBncmFuZGZhdGhlciBvbiBoZXIKICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyJ3Mgc2lkZSwgaGVyIGNoaWxkcmVuIHNoYWxsIGJlIGxlZ2l0aW1hdGUuIEluIGNhc2UgdGhlcmUgYmUgbm9uZSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGVzZSByZWxhdGl2ZXMsIGlmIHRoZSB3b21hbiBiZSBhbiBoZWlyZXNzLCBoZXIgZ3VhcmRpYW4gc2hhbGwgdGFrZSBoZXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgd2lmZSwgYW5kIGlmIHNoZSBiZSBub3QsIHRoYXQgbWFuIHNoYWxsIGJlIGhlciBndWFyZGlhbiB0byB3aG9tIHNoZSBtYXkKICAgICAgICAgICAgICAgICAgICAgICAgZW50cnVzdCBoZXJzZWxmLjwvdHJhbnNsYXRpb24+"
translation['46.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB3aGF0IHBlcnNvbnMgdGhpcyBsYXcgaGFzIGFwcG9pbnRlZCB0byBiZSBndWFyZGlhbnM7IGFuZCB0aGF0IG15IG1vdGhlciBoYWQgbm9uZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZXNlIG15IG9wcG9uZW50cyBoYXZlIHRoZW1zZWx2ZXMgYm9ybmUgd2l0bmVzcy4gRm9yIGlmIHRoZXJlIGhhZCBiZWVuIHN1Y2gsCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBoYXZlIHByb2R1Y2VkIHRoZW0uIE9yIGRvIHlvdSBzdXBwb3NlIHRoZXkgd291bGQgaGF2ZSBwcm9kdWNlZCBmYWxzZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyBhbmQgYSBub24tZXhpc3RlbnQgd2lsbCwgYnV0IHdvdWxkIG5vdCBoYXZlIHByb2R1Y2VkIGEgYnJvdGhlciBvciBhCiAgICAgICAgICAgICAgICAgICAgZ3JhbmRmYXRoZXIgb3IgYSBmYXRoZXIsIGlmIHRoZXkgY291bGQgaGF2ZSBkb25lIGl0IGZvciBtb25leT8gU2luY2UsIHRoZW4sIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgcGxhaW4gdGhhdCBubyBvbmUgb2YgdGhlc2Ugd2FzIGxpdmluZywgaXQgZm9sbG93cyBuZWNlc3NhcmlseSB0aGF0IG15IG1vdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyBhbiBoZWlyZXNzLiBOb3cgc2VlIHdob20gdGhlIGxhdyBvcmRhaW5zIHRvIGJlIGd1YXJkaWFucyBvZiBhbiBoZWlyZXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGF3LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYKICAgICAgICAgICAgICAgICAgICAgICAgb25lIGJlIGJvcm4gdGhlIHNvbiBvZiBhbiBoZWlyZXNzLCB0d28geWVhcnMgYWZ0ZXIgaGUgaGFzIHJlYWNoZWQgdGhlIGFnZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuaG9vZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzIGF0IHRoZSBhZ2Ugb2YgZWlnaHRlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXJzIO+8iHNlZSBub3RlIGIgb24gcC4gOSBvZiB2b2wuIDEu77yJLjwvbm90ZT4gaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgYXNzdW1lIGNvbnRyb2wgb2YgdGhlIGVzdGF0ZSwgYW5kIGhlIHNoYWxsIG1ha2UgZHVlIHByb3Zpc2lvbiBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGhlcidzIG1haW50ZW5hbmNlLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYKICAgICAgICAgICAgICAgICAgICAgICAgb25lIGJlIGJvcm4gdGhlIHNvbiBvZiBhbiBoZWlyZXNzLCB0d28geWVhcnMgYWZ0ZXIgaGUgaGFzIHJlYWNoZWQgdGhlIGFnZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuaG9vZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzIGF0IHRoZSBhZ2Ugb2YgZWlnaHRlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXJzIO+8iHNlZSBub3RlIGIgb24gcC4gOSBvZiB2b2wuIDEu77yJLjwvbm90ZT4gaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgYXNzdW1lIGNvbnRyb2wgb2YgdGhlIGVzdGF0ZSwgYW5kIGhlIHNoYWxsIG1ha2UgZHVlIHByb3Zpc2lvbiBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGhlcidzIG1haW50ZW5hbmNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgbGF3LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRzIHRoYXQgc29ucyB3aG8gaGF2ZSByZWFjaGVkIHRoZSBhZ2Ugb2YgbWFuaG9vZCBzaGFsbCBiZSBndWFyZGlhbnMgb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciBtb3RoZXIgYW5kIHNoYWxsIG1ha2UgZHVlIHByb3Zpc2lvbiBmb3IgdGhlaXIgbW90aGVyJ3MgbWFpbnRlbmFuY2UuIEJ1dCBpdAogICAgICAgICAgICAgICAgICAgIGlzIGNsZWFyIHRoYXQgSSB3YXMgb24gYSBtaWxpdGFyeSBleHBlZGl0aW9uIGFuZCBpbiBjb21tYW5kIG9mIGEgdHJpcmVtZSBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlbmNlIGhlIGhhZCBvYnZpb3VzbHkgY29tZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBtYW5ob29kLjwvbm90ZT4gd2hlbiB0aGlzIG1hbiBtYXJyaWVkIG15IG1vdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['46.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5OYXkgbW9yZSwgdG8gcHJvdmUgdGhhdCBJIHdhcyBhYnNlbnQgaW4gY29tbWFuZCBvZiBhIHRyaXJlbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgbXkgZmF0aGVyIGhhZCBiZWVuIGRlYWQgZm9yIHNvbWUgdGltZSwgd2hlbiB0aGUgZmVsbG93IG1hcnJpZWQsIEkgZGVtYW5kZWQKICAgICAgICAgICAgICAgICAgICBvZiBoaW0gdGhlIGZlbWFsZSBzbGF2ZXMsIGFuZCBjbGFpbWVkIHRoZSByaWdodCBvZiBoYXZpbmcgdGhlbSBwdXQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSB0byBlc3RhYmxpc2ggdGhpcyB2ZXJ5IHBvaW50LCB3aGV0aGVyIHdoYXQgSSBhbSBzYXlpbmcgaXMKICAgICAgICAgICAgICAgICAgICB0cnVl4oCUdG8gcHJvdmUgYWxsIHRoaXMsIGFuZCB0aGF0IEkgdGVuZGVyZWQgaGltIGEgY2hhbGxlbmdlLCBwbGVhc2UKICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzIHRlc3RpZnkgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIGNoYWxsZW5nZWQgUGhvcm1pbywgbmFtZWx5LCB3aGVuIEFwb2xsb2RvcnVzIGRlbWFuZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBnaXZlIHVwIHRoZSBmZW1hbGUgc2xhdmVzIGZvciB0aGUgdG9ydHVyZSwgaWYgUGhvcm1vIGRlbmllZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBzZWR1Y2VkIG15IG1vdGhlciBiZWZvcmUgdGhlIHRpbWUgd2hlbiBQaG9ybWlvIGRlY2xhcmVzIHRoYXQgaGUgbWFycmllZAogICAgICAgICAgICAgICAgICAgICAgICBoZXIsIGFmdGVyIHNoZSBoYWQgYmVlbiBiZXRyb3RoZWQgdG8gaGltIGJ5IFBhc2lvLiBBbmQgd2hlbiBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICB0ZW5kZXJlZCB0aGlzIGNoYWxsZW5nZSwgUGhvcm1pbyByZWZ1c2VkIHRvIHN1cnJlbmRlciB0aGUgZmVtYWxlCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlcy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVwb25lbnRzIHRlc3RpZnkgdGhhdCB0aGV5IHdlcmUgcHJlc2VudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIGNoYWxsZW5nZWQgUGhvcm1pbywgbmFtZWx5LCB3aGVuIEFwb2xsb2RvcnVzIGRlbWFuZGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBnaXZlIHVwIHRoZSBmZW1hbGUgc2xhdmVzIGZvciB0aGUgdG9ydHVyZSwgaWYgUGhvcm1vIGRlbmllZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBzZWR1Y2VkIG15IG1vdGhlciBiZWZvcmUgdGhlIHRpbWUgd2hlbiBQaG9ybWlvIGRlY2xhcmVzIHRoYXQgaGUgbWFycmllZAogICAgICAgICAgICAgICAgICAgICAgICBoZXIsIGFmdGVyIHNoZSBoYWQgYmVlbiBiZXRyb3RoZWQgdG8gaGltIGJ5IFBhc2lvLiBBbmQgd2hlbiBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICB0ZW5kZXJlZCB0aGlzIGNoYWxsZW5nZSwgUGhvcm1pbyByZWZ1c2VkIHRvIHN1cnJlbmRlciB0aGUgZmVtYWxlCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlcy48L3RyYW5zbGF0aW9uPg=="
translation['46.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaW4gYWRkaXRpb24gdG8gdGhpcyByZWFkIHRoZSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhcHBvaW50cyB0aGF0IHRoZXJlIHNoYWxsIGJlIGFuIGFkanVkaWNhdGlvbiBvZiBhbGwgaGVpcmVzc2VzLCB3aGV0aGVyIGFsaWVuIG9yCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiwgYW5kIHRoYXQgaW4gdGhlIGNhc2Ugb2YgdGhvc2Ugd2hvIGFyZSBjaXRpemVucyB0aGUgYXJjaG9uIHNoYWxsIGhhdmUKICAgICAgICAgICAgICAgICAgICBqdXJpc2RpY3Rpb24gYW5kIHNoYWxsIHRha2UgY2hhcmdlIG9mIHRoZSBtYXR0ZXIsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBhcmUgcmVzaWRlbnQgYWxpZW5zLCB0aGUgcG9sZW1hcmNoOyBhbmQgaXQgc2hhbGwgbm90IGJlIGxhd2Z1bCBmb3IgYW55b25lIHRvCiAgICAgICAgICAgICAgICAgICAgb2J0YWluIGFuIGluaGVyaXRhbmNlIG9yIGFuIGhlaXJlc3Mgd2l0aG91dCBsZWdhbCBhZGp1ZGljYXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgYXJjaG9uIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbiBieSBsb3QgZGF5cyBmb3IgdGhlIHRyaWFsIG9mIGNsYWltcyB0byBpbmhlcml0YW5jZXMgb3IgaGVpcmVzc2VzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG1vbnRoIGV4Y2VwdCBTY2lyb3Bob3Jpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1vbnRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTY2lyb3Bob3Jpb24gY29ycmVzcG9uZHMgdG8gdGhlIGxhdHRlciBoYWxmIG9mIEp1bmUgYW5kIHRoZSBwcmlvciBoYWxmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBKdWx5LiDigJxUaGlzIG1vbnRoIG1heSBoYXZlIGJlZW4gZXhjZXB0ZWQsIHNpbmNlIGl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgbW9udGggb2YgdGhlIEF0dGljIHllYXIsIGFuZCBpbiBpdCB0aGUgbWFnaXN0cmF0ZXMgdmFjYXRlZCBvZmZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBwYXNzZWQgdGhlaXIgYXVkaXQu4oCdIO+8iFNhbmR5c++8iTwvbm90ZT47CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBubyBvbmUgc2hhbGwgb2J0YWluIGFuIGluaGVyaXRhbmNlIHdpdGhvdXQgYWRqdWRpY2F0aW9uLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGFyY2hvbiBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ24gYnkgbG90IGRheXMgZm9yIHRoZSB0cmlhbCBvZiBjbGFpbXMgdG8gaW5oZXJpdGFuY2VzIG9yIGhlaXJlc3NlcyBpbgogICAgICAgICAgICAgICAgICAgICAgICBldmVyeSBtb250aCBleGNlcHQgU2Npcm9waG9yaW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBtb250aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Npcm9waG9yaW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXR0ZXIgaGFsZiBvZiBKdW5lIGFuZCB0aGUgcHJpb3IgaGFsZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgSnVseS4g4oCcVGhpcyBtb250aCBtYXkgaGF2ZSBiZWVuIGV4Y2VwdGVkLCBzaW5jZSBpdCB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0IG1vbnRoIG9mIHRoZSBBdHRpYyB5ZWFyLCBhbmQgaW4gaXQgdGhlIG1hZ2lzdHJhdGVzIHZhY2F0ZWQgb2ZmaWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgcGFzc2VkIHRoZWlyIGF1ZGl0LuKAnSDvvIhTYW5keXPvvIk8L25vdGU+OwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm8gb25lIHNoYWxsIG9idGFpbiBhbiBpbmhlcml0YW5jZSB3aXRob3V0IGFkanVkaWNhdGlvbi48L3RyYW5zbGF0aW9uPg=="
translation['46.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCBpZgogICAgICAgICAgICAgICAgICAgIGhlIGhhZCB3aXNoZWQgdG8gcHJvY2VlZCByZWd1bGFybHksIGhlIG91Z2h0IHRvIGhhdmUgZW50ZXJlZCBoaXMgY2xhaW0gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGhlaXJlc3MsIHdoZXRoZXIgdGhlIGNsYWltIHdhcyBiYXNlZCB1cG9uIGEgZ2lmdCBvciB1cG9uIG5lYXJuZXNzIG9mIGtpbiwgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFyY2hvbiwgaWYgaGUgY2xhaW1lZCBoZXIgYXMgYSBjaXRpemVuLCBhbmQgYmVmb3JlIHRoZSBwb2xlbWFyY2gsIGlmIGFzIGFuCiAgICAgICAgICAgICAgICAgICAgYWxpZW47IGFuZCB0aGVuLCBpZiBoZSBoYWQgYW55IGp1c3QgY2xhaW0gdG8gYWR2YW5jZSwgaXQgd2FzIGhpcyBkdXR5IHRvCiAgICAgICAgICAgICAgICAgICAgY29udmluY2UgdGhvc2Ugb2YgeW91IHdobyB3ZXJlIGRyYXduIG9uIHRoZSBqdXJ5LCBhbmQgc28gb2J0YWluIHRoZSB3b21hbiBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIHZlcmRpY3QgYW5kIGluIGEgbWFubmVyIHNhbmN0aW9uZWQgYnkgeW91ciBsYXdzLCBpbnN0ZWFkIG9mIGhhdmluZyBtYWRlCiAgICAgICAgICAgICAgICAgICAgbGF3cyB2YWxpZCBmb3IgaGltc2VsZiBhbG9uZSwgYW5kIGluIHRoYXQgd2F5IGhhdmluZyBhY2NvbXBsaXNoZWQgd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIGRlc2lyZWQuIDwvdHJhbnNsYXRpb24+"
translation['46.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90ZSwKICAgICAgICAgICAgICAgICAgICB0b28sIHRoZSBmb2xsb3dpbmcgbGF3LCB0aGF0IGEgd2lsbCBzaGFsbCBiZSB2YWxpZCB3aGljaCBhIGZhdGhlciBtYWtlcywgZXZlbgogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBoYXMgc29ucyBsYXdmdWxseSBib3JuLCBwcm92aWRlZCB0aGUgc29ucyBkaWUgYmVmb3JlIHRoZXkgcmVhY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgYWdlIG9mIG1hbmhvb2QuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGF0c29ldmVyIHdpbGwgYSBmYXRoZXIgc2hhbGwgbWFrZSwgd2hpbGUgaGUgaGFzIGxhd2Z1bGx5IGJvcm4gc29ucywgaWYKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNvbnMgZGllIHdpdGhpbiB0d28geWVhcnMgYWZ0ZXIgaGF2aW5nIHJlYWNoZWQgdGhlIGFnZSBvZiBtYW5ob29kLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlcidzIHdpbGwgc2hhbGwgYmUgdmFsaWQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGF0c29ldmVyIHdpbGwgYSBmYXRoZXIgc2hhbGwgbWFrZSwgd2hpbGUgaGUgaGFzIGxhd2Z1bGx5IGJvcm4gc29ucywgaWYKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNvbnMgZGllIHdpdGhpbiB0d28geWVhcnMgYWZ0ZXIgaGF2aW5nIHJlYWNoZWQgdGhlIGFnZSBvZiBtYW5ob29kLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlcidzIHdpbGwgc2hhbGwgYmUgdmFsaWQuPC90cmFuc2xhdGlvbj4="
translation['46.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHNlZWluZyB0aGF0IHRoZSBzb25zIGFyZSBhbGl2ZSwgdGhlIHdpbGwgd2hpY2ggdGhlc2UgbWVuIHNheSBteSBmYXRoZXIgbGVmdCBpcwogICAgICAgICAgICAgICAgICAgIGludmFsaWQsIGFuZCB0aGlzIG1hbiBTdGVwaGFudXMgaGFzIGJvcm5lIGZhbHNlIHdpdG5lc3MgaW4gZGVmaWFuY2Ugb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIGluIGRlY2xhcmluZyB0aGF0IHRoZSBkb2N1bWVudCBpcyBhIGNvcHkgb2YgUGFzaW8ncyB3aWxsLiBXaHksIGhvdyBkbyB5b3UKICAgICAgICAgICAgICAgICAgICBrbm93IHRoYXQgaXQgaXM/IFdoZXJlIHdlcmUgeW91IGV2ZXIgcHJlc2VudCB3aGVuIG15IGZhdGhlciBtYWRlIGl0PyBZb3UgYXJlCiAgICAgICAgICAgICAgICAgICAgc2hvd24gdG8gaGF2ZSBiZWVuIGd1aWx0eSBvZiB0cmlja2VyeSBpbiB0aGUgc3VpdCwgdG8gaGF2ZSBnaXZlbiBmYWxzZSB3aXRuZXNzCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgd2l0aG91dCBzY3J1cGxlLCB0byBoYXZlIHN0b2xlbiBkZXBvc2l0aW9ucyB3aGljaCBzdXBwb3J0ZWQgdGhlIHRydXRoLAogICAgICAgICAgICAgICAgICAgIHRvIGhhdmUgbWlzbGVkIHRoZSBqdXJ5LCBhbmQgdG8gaGF2ZSBlbnRlcmVkIGludG8gYSBjb25zcGlyYWN5IHRvIGRlZmVhdAogICAgICAgICAgICAgICAgICAgIGp1c3RpY2UuIEJ1dCB0aGUgbGF3cyBoYXZlIHByb3ZpZGVkIGNyaW1pbmFsIHN1aXRzIGZvciBhY3Rpb25zIHN1Y2ggYXMgdGhlc2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['46.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXcsIHBsZWFzZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFueSBtYW4gZW50ZXIgaW50byBhIGNvbnNwaXJhY3ksIG9yIGpvaW4gaW4gc2Vla2luZyB0byBicmliZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgSGVsaWFlYSBvciBhbnkgb2YgdGhlIGNvdXJ0cyBpbiBBdGhlbnMsIG9yIHRoZSBTZW5hdGUsIGJ5IGdpdmluZyBvcgogICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmcgbW9uZXkgZm9yIGNvcnJ1cHQgZW5kcywgb3Igc2hhbGwgb3JnYW5pemUgYSBjbGlxdWUgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBvdmVydGhyb3cgb2YgdGhlIGRlbW9jcmFjeSwgb3IsIHdoaWxlIHNlcnZpbmcgYXMgcHVibGljIGFkdm9jYXRlLCBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQgbW9uZXkgaW4gYW55IHN1aXQsIHByaXZhdGUgb3IgcHVibGljLCBjcmltaW5hbCBzdWl0cyBzaGFsbCBiZSBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGVzZSBhY3RzIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYW55IG1hbiBlbnRlciBpbnRvIGEgY29uc3BpcmFjeSwgb3Igam9pbiBpbiBzZWVraW5nIHRvIGJyaWJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBIZWxpYWVhIG9yIGFueSBvZiB0aGUgY291cnRzIGluIEF0aGVucywgb3IgdGhlIFNlbmF0ZSwgYnkgZ2l2aW5nIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZyBtb25leSBmb3IgY29ycnVwdCBlbmRzLCBvciBzaGFsbCBvcmdhbml6ZSBhIGNsaXF1ZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ0aHJvdyBvZiB0aGUgZGVtb2NyYWN5LCBvciwgd2hpbGUgc2VydmluZyBhcyBwdWJsaWMgYWR2b2NhdGUsIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdCBtb25leSBpbiBhbnkgc3VpdCwgcHJpdmF0ZSBvciBwdWJsaWMsIGNyaW1pbmFsIHN1aXRzIHNoYWxsIGJlIGVudGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZXNlIGFjdHMgYmVmb3JlIHRoZSBUaGVzbW90aGV0YWUuPC90cmFuc2xhdGlvbj4="
translation['46.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28sIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGxpZ2h0IG9mIGFsbCB0aGVzZSB0aGluZ3MsIEkgc2hvdWxkIGxpa2UgdG8gYXNrIHlvdSBpbiBhY2NvcmRhbmNlIHdpdGggd2hhdCBsYXdzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc3dvcm4gdG8gZ2l2ZSBqdWRnZW1lbnQ6IHdoZXRoZXIgYWNjb3JkaW5nIHRvIHRoZSBsYXdzIG9mIHRoZSBzdGF0ZSwgb3IKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGxhd3Mgd2hpY2ggUGhvcm1pbyBlbmFjdHMgZm9yIGhpbXNlbGYuIEkgYnJpbmcgYmVmb3JlIHlvdSwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGVzZSBsYXdzLCBhbmQgSSBwcm92ZSB0aGF0IGJvdGggdGhlc2UgbWVuIGhhdmUgdHJhbnNncmVzc2VkIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgUGhvcm1pbyBieSBoYXZpbmcgYXQgdGhlIG91dHNldCB3cm9uZ2VkIG1lIGFuZCByb2JiZWQgbWUgb2YgdGhlIG1vbmV5IHdoaWNoIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGxlZnQgbWUsIGFuZCB3aGljaCB0aGF0IGZhdGhlciBsZWFzZWQgdG8gUGhvcm1pbyB0b2dldGhlciB3aXRoIHRoZSBiYW5rCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBtYW51ZmFjdG9yeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNi40IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNi40PC9iaWJsPjwvbm90ZT47IFN0ZXBoYW51cyBoZXJlLCBieSBoYXZpbmcgZ2l2ZW4gZmFsc2UgdGVzdGltb255LCBhbmQKICAgICAgICAgICAgICAgICAgICBnaXZlbiBpdCBpbiBkZWZpYW5jZSBvZiB0aGUgbGF3LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM2LjQiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM2LjQ8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['46.28'] = ""
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyBpbiBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIG1lbiBvZiB0aGUganVyeSwgYW4gYWRtaXJhYmxlIHByb3Zpc2lvbiBvZiB0aGUgbGF3cyB0aGF0IHRoZXkgYWxsb3cKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGNoYW5jZSBhZnRlciBhIHRyaWFsIGJ5IG1lYW5zIG9mIHByb2NlZWRpbmdzIGZvciBmYWxzZSB0ZXN0aW1vbnksIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCwgaWYgYW55b25lIGJ5IGJyaW5naW5nIGZvcndhcmQgd2l0bmVzc2VzIHRlc3RpZnlpbmcgdG8gd2hhdCBpcyBmYWxzZQogICAgICAgICAgICAgICAgICAgIG9yIGJ5IGNpdGluZyBjaGFsbGVuZ2VzIHdoaWNoIHdlcmUgbmV2ZXIgdGVuZGVyZWQgb3IgZGVwb3NpdGlvbnMgbWFkZSBjb250cmFyeQogICAgICAgICAgICAgICAgICAgIHRvIGxhdywgaGFzIGRlY2VpdmVkIHRoZSBqdXJ5LCBoZSBtYXkgZ2FpbiBub3RoaW5nIGJ5IGl0LCBidXQgdGhlIG9uZSB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiB3cm9uZ2VkIG1heSBpbXBlYWNoIHRoZSB0ZXN0aW1vbnksIGFuZCBjb21lIGludG8geW91ciBjb3VydCBhbmQgc2hvdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHdpdG5lc3NlcyBoYXZlIGdpdmVuIGZhbHNlIHRlc3RpbW9ueSByZWdhcmRpbmcgdGhlIG1hdHRlciBhdCBpc3N1ZSwgYW5kIHRodXMKICAgICAgICAgICAgICAgICAgICBleGFjdCB0aGUgcGVuYWx0eSBmcm9tIHRoZW0gYW5kIGhvbGQgdGhlIG9uZSB3aG8gYnJvdWdodCB0aGVtIGZvcndhcmQgbGlhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgYW4gYWN0aW9uIGZvciBzdWJvcm5hdGlvbiBvZiBwZXJqdXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGlzIHJlYXNvbiB0aGV5IGhhdmUgbWFkZSB0aGUgZmluZSBsZXNzIGZvciB0aGUgcGxhaW50aWZmLCBpZiBoZSBsb3NlIGhpcyBjYXNlLAogICAgICAgICAgICAgICAgICAgIGluIG9yZGVyIHRoYXQgdGhvc2Ugd2hvIGhhdmUgYmVlbiB3cm9uZ2VkIG1heSBub3QgYnkgdGhlIGZpbmUgYmUgZGV0ZXJyZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0aW5nIHdpdG5lc3NlcyBmb3IgZmFsc2UgdGVzdGltb255LCB3aGlsZSB0aGV5IGhhdmUgaW1wb3NlZCBhIGhlYXZ5CiAgICAgICAgICAgICAgICAgICAgcGVuYWx0eSB1cG9uIHRoZSBkZWZlbmRhbnQsIGlmIGhlIGJlIGNvbnZpY3RlZCBhbmQgYmUgdGhvdWdodCBieSB5b3UgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIGZhbHNlIHRlc3RpbW9ueS4gPC90cmFuc2xhdGlvbj4="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBqdXN0bHkgc28sIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LiBGb3IgeW91IGxvb2sgdG8gdGhlIHdpdG5lc3NlcyBhbmQgZ2l2ZSB5b3VyIHZlcmRpY3QgYXMgeW91IGRvLCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgYmVsaWV2ZWQgdGhlIHRlc3RpbW9ueSB3aGljaCB0aGV5IGhhdmUgZ2l2ZW4uIEl0IGlzLCB0aGVyZWZvcmUsIHRvCiAgICAgICAgICAgICAgICAgICAgcHJldmVudCB5b3UgZnJvbSBiZWluZyBkZWNlaXZlZCBhbmQgdGhvc2Ugd2hvIGNvbWUgaW50byB5b3VyIGNvdXJ0IGZyb20gYmVpbmcKICAgICAgICAgICAgICAgICAgICB3cm9uZ2VkIHRoYXQgdGhlIGxhd2dpdmVyIG1hZGUgdGhlIHdpdG5lc3NlcyByZXNwb25zaWJsZS4gSSwgdGhlcmVmb3JlLCBiZWcgb2YKICAgICAgICAgICAgICAgICAgICB5b3UgaGVhciBtZSB3aXRoIGdvb2R3aWxsLCB3aGlsZSBJIHJlaGVhcnNlIGFsbCB0aGUgZmFjdHMgZnJvbSB0aGUgYmVnaW5uaW5nLCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgZnJvbSB0aGVzZSB5b3UgbWF5IHNlZSB0aGUgbWFnbml0dWRlIG9mIHRoZSB3cm9uZ3MgSSBoYXZlIHN1ZmZlcmVkLAogICAgICAgICAgICAgICAgICAgIGFuZCBrbm93IHRoYXQgdGhlIGp1cnltZW4gd2VyZSBkZWNlaXZlZCBhbmQgdGhhdCB0aGVzZSBtZW4gaGF2ZSBnaXZlbiB0ZXN0aW1vbnkKICAgICAgICAgICAgICAgICAgICB3aGljaCBpcyBmYWxzZS4gPC90cmFuc2xhdGlvbj4="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHNob3VsZCBoYXZlIG11Y2ggcHJlZmVycmVkIG5vdCB0byBnbyB0byBsYXcsIGJ1dCwgaWYgZm9yY2VkIHRvIGRvIHNvLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGEgc2F0aXNmYWN0aW9uIHRvIGFwcGVhciBhZ2FpbnN0IG1lbiB3aG8gYXJlIG5vdCB1bmtub3duIHRvIHlvdS4gSG93ZXZlciwgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGRldm90ZSBhIGxhcmdlciBwYXJ0IG9mIG15IHNwZWVjaCB0byBleHBvc2luZyB0aGUgY2hhcmFjdGVyIG9mIHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgIHRoYW4gdG8gcHJvdmluZyB0aGF0IHRoZWlyIHRlc3RpbW9ueSBpcyBmYWxzZS4gQXMgdG8gbXkgY2hhcmdlIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IHRvIHdoaWNoIHRoZXkgaGF2ZSBkZXBvc2VkIGlzIGZhbHNlLCB0aGV5IHNlZW0gdG8gbWUgdG8gaGF2ZSBnaXZlbgogICAgICAgICAgICAgICAgICAgIHByb29mIGJ5IHRoZWlyIG93biBhY3Rpb25zLCBhbmQgdGhlcmUgaXMgbm8gbmVlZCBmb3IgbWUgdG8gcHJvZHVjZSBhbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgdGhhbiB0aGVtc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZXkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBoYXZlIGdvdCByaWQgb2YgYWxsIHRyb3VibGUsIGFuZCBoYXZlIGF2b2lkZWQgdGhlIHJpc2sgd2hpY2ggdGhleSBydW4gaW4gY29taW5nCiAgICAgICAgICAgICAgICAgICAgaW50byB5b3VyIGNvdXJ0LCBieSBlc3RhYmxpc2hpbmcgaW4gZmFjdCB0aGUgdHJ1dGggb2YgdGhlaXIgdGVzdGltb255LCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIGRlbGl2ZXIgdXAgdGhlIHdvbWFuLCB3aG9tIHRoZXkgaGF2ZSB0ZXN0aWZpZWQgdGhhdCBUaGVvcGhlbXVzIHdhcwogICAgICAgICAgICAgICAgICAgIHJlYWR5IHRvIGRlbGl2ZXIgdXAsIGFuZCBoYWQgb2ZmZXJlZCB0byBkZWxpdmVyIHVwIGJlZm9yZSB0aGUgYXJiaXRyYXRvciwKICAgICAgICAgICAgICAgICAgICBQeXRob2RvcnVzIG9mIENlZGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZWRhZSB3YXMgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBFcmVjdGhlw69zLjwvbm90ZT4gYnV0IHdob3NlIHN1cnJlbmRlciBJLCBpbiBmYWN0LCBkZW1hbmRlZCwKICAgICAgICAgICAgICAgICAgICBhcyB0aGUgd2l0bmVzc2VzIHdobyB3ZXJlIHRoZW4gcHJlc2VudCBpbiBjb3VydCB0ZXN0aWZpZWQsIGFuZCB3aWxsIG5vdyB0ZXN0aWZ5LgogICAgICAgICAgICAgICAgICAgIEFuZCBUaGVvcGhlbXVzIGhhcyBub3QgaW1wZWFjaGVkIHRoZW0gZm9yIGdpdmluZyB0ZXN0aW1vbnkgdGhhdCB3YXMgbm90IHRydWUsCiAgICAgICAgICAgICAgICAgICAgbm9yIGRvZXMgaGUgcHJvY2VlZCBhZ2FpbnN0IHRoZW0gZm9yIGZhbHNlIHdpdG5lc3MuIDwvdHJhbnNsYXRpb24+"
translation['47.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVmZW5kYW50cyB0aGVtc2VsdmVzIHByYWN0aWNhbGx5CiAgICAgICAgICAgICAgICAgICAgYWRtaXQgaW4gdGhlaXIgZGVwb3NpdGlvbiB0aGF0IEkgd2FzIGFueGlvdXMgdG8gcmVjZWl2ZSB0aGUgd29tYW4gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmUsIGFuZCB0aGF0IFRoZW9waGVtdXMgdXJnZWQgbWUgdG8gcG9zdHBvbmUgdGhlIGFjdGlvbiwgd2hlcmVhcyBJIHdhcwogICAgICAgICAgICAgICAgICAgIHVud2lsbGluZyB0byBkbyBzby4gQW5kIHlldCBpdCB3YXMgcmVnYXJkaW5nIHRoaXMgd29tYW4sIHdob20gSSBkZW1hbmRlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSwgYnV0IHdob20gVGhlb3BoZW11cyBvZmZlcmVkIHRvIGdpdmUgdXAsIGFzIHRoZXNlIG1lbiBzYXk7IHdob20sCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgbm8gb25lIGV2ZXIgc2F3IHByZXNlbnQgaW4gcGVyc29uIGVpdGhlciBhdCB0aGF0IHRpbWUgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3Igb3IgYWZ0ZXJ3YXJkcyBpbiB0aGUgY291cnQtcm9vbSwgb3IgcHJvZHVjZWQgYXQgYW55IG90aGVyCiAgICAgICAgICAgICAgICAgICAgcGxhY2Us4oCUaXQgd2FzIHJlZ2FyZGluZyBoZXIgdGhhdCB0aGVzZSB3aXRuZXNzZXMgZGVwb3NlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgVGhlb3BoZW11cyB3YXMgcmVhZHkgdG8gZ2l2ZSBoZXIgdXAsIGFuZCBtYWRlIHRoZSBvZmZlciB3aXRoIGEgY2hhbGxlbmdlOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUganVyeSB0aG91Z2h0IHRoYXQgdGhlIHRlc3RpbW9ueSB3YXMKICAgICAgICAgICAgICAgICAgICB0cnVlLCBhbmQgdGhhdCBJIHdhcyBzZWVraW5nIHRvIGV2YWRlIHRoZSBldmlkZW5jZSB3aGljaCB0aGUgd29tYW4gbWlnaHQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIGluIHJlZ2FyZCB0byB0aGUgYXNzYXVsdCBhbmQgdGhlIHF1ZXN0aW9uIGFzIHRvIHdoaWNoIG9uZSBvZiB1cyBkZWxpdmVyZWQKICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgYmxvdyDvvIhmb3IgdGhpcyBpcyB3aGF0IGNvbnN0aXR1dGVzIGFzc2F1bHTvvIkuIElzIGl0CiAgICAgICAgICAgICAgICAgICAgbm90LCB0aGVuLCBhIG5lY2Vzc2FyeSBpbmZlcmVuY2UgdGhhdCB0aGVzZSB3aXRuZXNzZXMgaGF2ZSBnaXZlbiBmYWxzZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSwgbWVuIHdobyBldmVuIHVwIHRvIHRoaXMgZGF5IGRhcmUgbm90IGRlbGl2ZXIgdXAgdGhlIHdvbWFuIGluIHBlcnNvbiwKICAgICAgICAgICAgICAgICAgICBhcyBhY2NvcmRpbmcgdG8gdGhlaXIgc3RhdGVtZW50IFRoZW9waGVtdXMgb2ZmZXJlZCB0byBkbywgYW5kIGFzIHRoZXkgdGVzdGlmaWVkCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpbT8gQW5kIHRoZXkgZGFyZSBub3QgZXN0YWJsaXNoIGJ5IGFjdHVhbCBmYWN0IHRoZSB0cnV0aCBvZiB0aGVpciB0ZXN0aW1vbnkKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmcmVlIHRoZSB3aXRuZXNzZXMgZnJvbSB0aGUgcmlzayBvZiBhCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgYnkgbWFraW5nIFRoZW9waGVtdXMsIHNpbmNlIGhlIHRoZW4gcmVmdXNlZCB0byBkbyBzbywgZGVsaXZlciB1cCB0aGUgd29tYW4KICAgICAgICAgICAgICAgICAgICBpbiBwZXJzb24sIHRvIGJlIHB1dCB0byB0aGUgdG9ydHVyZSByZWdhcmRpbmcgdGhlIGFzc2F1bHQgZm9yIHdoaWNoIEkgYW0gc3VpbmcKICAgICAgICAgICAgICAgICAgICBUaGVvcGhlbXVzLCBhbmQgc28gbWFrZSB0aGUgcHJvb2YgcmVzdWx0IGZyb20gdGhlIHZlcnkgc3RhdGVtZW50cyBtYWRlIGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aW1lIGJ5IFRoZW9waGVtdXMgd2l0aCBhIHZpZXcgdG8gZGVjZWl2aW5nIHRoZSBqdXJvcnMuIEZvciBoZSBzYWlkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJzZSBvZiB0aGUgdHJpYWwgZm9yIGFzc2F1bHQgdGhhdCB0aGUgd2l0bmVzc2VzIHdobyBoYWQgYmVlbiBwcmVzZW50IGFuZCB3aG8KICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZWQgdG8gd2hhdCBoYWQgdGFrZW4gcGxhY2UgYnkgYSBkZXBvc2l0aW9uIGluIHdyaXRpbmcsIGFzIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBwcm92aWRlcywgd2VyZSBmYWxzZSB3aXRuZXNzZXMgYW5kIGhhZCBiZWVuIHN1Ym9ybmVkIGJ5IG1lOyBidXQgdGhhdCB0aGUgd29tYW4KICAgICAgICAgICAgICAgICAgICB3aG8gaGFkIGJlZW4gcHJlc2VudCB3b3VsZCB0ZWxsIHRoZSB0cnV0aCwgZGVwb3NpbmcsIG5vdCB0byBhIHdyaXR0ZW4gZG9jdW1lbnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHVuZGVyIHRvcnR1cmUsIGdpdmluZyB0aHVzIHRoZSBzdHJvbmdlc3Qga2luZCBvZiBldmlkZW5jZSBhcyB0byB3aGljaCBwYXJ0eQogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCB0aGUgZmlyc3QgYmxvdy4gPC90cmFuc2xhdGlvbj4="
translation['47.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgd2hhdCBoZSBzYWlkCiAgICAgICAgICAgICAgICAgICAgYXQgdGhhdCB0aW1lLCB1c2luZyB0aGUgbW9zdCB2aWdvcm91cyBsYW5ndWFnZSBhbmQgYnJpbmdpbmcgZm9yd2FyZCB3aXRuZXNzZXMgdG8KICAgICAgICAgICAgICAgICAgICBzdXBwb3J0IGhpcyBzdGF0ZW1lbnRzLCBhbmQgYnkgdGhpcyBtZWFucyBkZWNlaXZpbmcgdGhlIGp1cm9yczsgYnV0IG5vdyBhbGwgdGhpcwogICAgICAgICAgICAgICAgICAgIGlzIHByb3ZlZCB0byBiZSBmYWxzZTsgZm9yIGhlIGRvZXMgbm90IGRhcmUgdG8gZGVsaXZlciB1cCB0aGUgd29tYW4sIHdob20gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIGhhdmUgZGVjbGFyZWQgdGhhdCBoZSB3YXMgcmVhZHkgdG8gZGVsaXZlciB1cCwgYnV0IHByZWZlcnMgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBicm90aGVyIGFuZCBoaXMgYnJvdGhlci1pbi1sYXcgc2hvdWxkIGhhdmUgdG8gc3RhbmQgdHJpYWwgb24gYSBjaGFyZ2Ugb2YgZ2l2aW5nCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgdGVzdGltb255LCByYXRoZXIgdGhhbiB0aGF0IGhlIHNob3VsZCBkZWxpdmVyIHVwIHRoZSB3b21hbiBpbiBwZXJzb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHNvIGJlIHdlbGwgcmlkIG9mIGhpcyB0cm91YmxlcyBpbiBhIGZhaXIgYW5kIGxlZ2FsIHdheSwgYW5kIHRoYXQgdGhleSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgdHJ5IGJ5IGFyZ3VtZW50cyBhbmQgZW50cmVhdGllcyB0byBmaW5kIGEgbWVhbnMgb2YgZXNjYXBlIGJ5IGRlY2VpdmluZyB5b3UsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhleSBjb3VsZDsgPC90cmFuc2xhdGlvbj4="
translation['47.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5hbHRob3VnaCBJIGNoYWxsZW5nZWQgaGltIGFnYWluCiAgICAgICAgICAgICAgICAgICAgYW5kIGFnYWluLCBhbmQgYXNrZWQgZm9yIHRoZSB3b21hbiwgZGVtYW5kaW5nIHRvIHJlY2VpdmUgaGVyIGZvciB0aGUgdG9ydHVyZQogICAgICAgICAgICAgICAgICAgIGJvdGggYXQgdGhhdCB0aW1lIGFuZCBhZnRlciB0aGUgdHJpYWwsIGFuZCBhZ2FpbiB3aGVuIEkgcGFpZCB0aGVtIHRoZSBtb25leSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gbXkgc3VpdCBmb3IgYXNzYXVsdCBhZ2FpbnN0IFRoZW9waGVtdXMsIGFuZCBpbiB0aGUgZXhhbWluYXRpb24gYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGUgaW4gdGhlIHRyaWFsIGZvciBmYWxzZSB0ZXN0aW1vbnkuIFRoZXNlIG1lbiBkbyBub3QgdHJ5IHRvIGhpZGUKICAgICAgICAgICAgICAgICAgICBhbnl0aGluZzsgdGhlaXIgd29yZHMgYXJlIHBlcmp1cnksIHRoZWlyIGFjdCBpcyB0byByZWZ1c2UgdG8gZGVsaXZlciB1cCB0aGUKICAgICAgICAgICAgICAgICAgICB3b21hbjsgZm9yIHRoZXkga25ldyB3ZWxsIHRoYXQsIGlmIHNoZSBzaG91bGQgYmUgcHV0IHRvIHRoZSB0b3J0dXJlLCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHByb3ZlZCB0aGF0IHRoZXkgd2VyZSB0aGUgd3Jvbmdkb2VycyBhbmQgbm90IHRoZSBwYXJ0aWVzIHdyb25nZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgdGhlIGNsZXJrCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb25zIGNvbmNlcm5pbmcgdGhlc2UgbWF0dGVycy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCwgZGVzcGl0ZQogICAgICAgICAgICAgICAgICAgIG15IGZyZXF1ZW50IGNoYWxsZW5nZXMgYW5kIGRlbWFuZHMgZm9yIHRoZSBkZWxpdmVyeSBvZiB0aGUgd29tYW4gZm9yCiAgICAgICAgICAgICAgICAgICAgZXhhbWluYXRpb24sIG5vIG9uZSBoYXMgZXZlciBkZWxpdmVyZWQgaGVyIHVwLCBoYXMgYmVlbiBzaG93biB0byB5b3UgYnkKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMuIEJ1dCBpbiBvcmRlciB0aGF0IHlvdSBtYXkga25vdyBmcm9tIGNpcmN1bXN0YW50aWFsIHByb29mcyBhbHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgZ2l2ZW4gZmFsc2UgdGVzdGltb255LCBJIHdpbGwgcHJvdmUgaXQuIEZvciBpZiB3aGF0IHRoZXkgc3RhdGUgd2VyZQogICAgICAgICAgICAgICAgICAgIHRydWUsIG5hbWVseSwgdGhhdCBUaGVvcGhlbXVzIHRlbmRlcmVkIHRoZSBjaGFsbGVuZ2UgYW5kIG9mZmVyZWQgdG8gZ2l2ZSB1cCB0aGUKICAgICAgICAgICAgICAgICAgICB3b21hbiBpbiBwZXJzb24sIHRoZXNlIG1lbiwgSSB0YWtlIGl0LCB3b3VsZCBub3QgaGF2ZSBwcm9kdWNlZCB0d28gd2l0bmVzc2VzCiAgICAgICAgICAgICAgICAgICAgb25seSwgYSBicm90aGVyIGFuZCBhIGJyb3RoZXItaW4tbGF3LCB0byB0ZXN0aWZ5IHRvIHdoYXQgd2FzIHRydWUsIGJ1dCBtYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIGFzIHdlbGwuIDwvdHJhbnNsYXRpb24+"
translation['47.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGFyYml0cmF0aW9uIHRvb2sgcGxhY2UKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgSGVsaWFlYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHBsYWNlIGZvciBob2xkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9ucyBvZiB0aGUgY291cnQgb2YgdGhhdCBuYW1lLjwvbm90ZT4gd2hlcmUgdGhvc2Ugc2VydmluZyBhcwogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3JzIGZvciB0aGUgT2VuZcOvZCBhbmQgRXJlY3RoZcOvZCB0cmliZXMgaG9sZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHNlc3Npb25zOyBhbmQgd2hlbiBjaGFsbGVuZ2VzIG9mIHRoaXMgc29ydCBhcmUgZ2l2ZW4sIGFuZCBhIHBhcnR5IGJyaW5ncyBoaXMKICAgICAgICAgICAgICAgICAgICBzbGF2ZSBpbiBwZXJzb24sIGFuZCBkZWxpdmVycyBoaW0gdXAgZm9yIGV4YW1pbmF0aW9uIGJ5IHRoZSB0b3J0dXJlLCBob3N0cyBvZgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBzdGFuZCBmb3J0aCB0byBoZWFyIHdoYXQgaXMgc2FpZDsgc28gdGhhdCB0aGV5IHdvdWxkIG5vdCBoYXZlIGJlZW4gYXQgYQogICAgICAgICAgICAgICAgICAgIGxvc3MgZm9yIHdpdG5lc3NlcywgaWYgdGhlcmUgaGFkIGJlZW4gdGhlIGxlYXN0IHRydXRoIGluIHRoZSBkZXBvc2l0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmaWVkLCB0aGVuLCBpbiB0aGUgc2FtZSBkZXBvc2l0aW9uLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgSSB3YXMgdW53aWxsaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSBhIHBvc3Rwb25lbWVudCwgYnV0IHRoYXQgVGhlb3BoZW11cyB1cmdlZCBpdCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSB0aGUgd29tYW4uIFRoYXQgdGhpcyBpcyBub3QgdHJ1ZSwgSSB3aWxsIHNob3cgeW91LiBGb3IgaWYgSSBoYWQgdGVuZGVyZWQKICAgICAgICAgICAgICAgICAgICB0byBUaGVvcGhlbXVzIHRoaXMgY2hhbGxlbmdlIHRvIHdoaWNoIHRoZXkgaGF2ZSBkZXBvc2VkLCByZXF1aXJpbmcgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB1cCB0aGUgd29tYW4sIDwvdHJhbnNsYXRpb24+"
translation['47.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBtaWdodCBmaXR0aW5nbHkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkIGJ5IHVyZ2luZyB0aGF0IHRoZSBhcmJpdHJhdGlvbiBiZSBwdXQgb2ZmIHVudGlsIHRoZSBuZXh0IG1lZXRpbmcsIGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCBoZSBtaWdodCBicmluZyB0aGUgd29tYW4gYW5kIGRlbGl2ZXIgaGVyIHVwIHRvIG1lOyBidXQgYXMgaXQgaXMsCiAgICAgICAgICAgICAgICAgICAgVGhlb3BoZW11cywgdGhleSBoYXZlIGRlcG9zZWQgdGhhdCBpdCB3YXMgeW91IHdobyBkZXNpcmVkIHRvIGRlbGl2ZXIgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgd29tYW4gYW5kIHRoYXQgSSB3YXMgbm90IHdpbGxpbmcgdG8gcmVjZWl2ZSBoZXIuIEhvdyBpcyBpdCB0aGF0IHlvdSwgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgd29tYW4ncyBtYXN0ZXIsIHdoZW4geW91IHdlcmUgb24gdGhlIHBvaW50IG9mIHRlbmRlcmluZyBtZSB0aGlzIGNoYWxsZW5nZSwKICAgICAgICAgICAgICAgICAgICB0byB3aGljaCB5b3VyIHdpdG5lc3NlcyBoYXZlIGRlcG9zZWQsIHdoZW4geW91IHdlcmUgZm9yY2VkIHRvIHRha2UgcmVmdWdlIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyB3b21hbidzIHRlc3RpbW9ueSB0byBlc3RhYmxpc2ggeW91ciBjYXNlLCA8L3RyYW5zbGF0aW9uPg=="
translation['47.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiB5b3UgaGFkIG5vIG90aGVyIHdpdG5lc3MgdG8gbXkgaGF2aW5nIGFzc2F1bHRlZCB5b3UgYW5kIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCB0aGUgZmlyc3QgYmxvd+KAlGhvdyBpcyBpdCwgSSBhc2ssIHRoYXQgeW91IGRpZCBub3QgYnJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgd29tYW4gd2l0aCB5b3UgdG8gdGhlIGFyYml0cmF0b3IgYW5kIGRlbGl2ZXIgaGVyIHVwLCBoYXZpbmcgaGVyIHRoZW4gcHJlc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHBlcnNvbiwgYW5kIGJlaW5nIHlvdXJzZWxmIGhlciBtYXN0ZXI/IE5heSwgeW91IHN0YXRlIHRoYXQgeW91IHRlbmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZTsgYnV0IG5vIG9uZSBzYXcgdGhlIHdvbWFuIGJ5IG1lYW5zIG9mIHdob20geW91IGRlY2VpdmVkIHRoZSBqdXJvcnMsCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaCBwcm9kdWNpbmcgZmFsc2Ugd2l0bmVzc2VzIHRvIHJlcHJlc2VudCB0aGF0IHlvdSB3aXNoZWQgdG8gZ2l2ZSBoZXIgdXAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlbiwKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgd29tYW4gd2FzIG5vdCBwcmVzZW50IHdpdGggeW91IGF0IHRoYXQgdGltZSBhbmQgdGhlIGJveGVzIGhhZAogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzbHkgYmVlbiBzZWFsZWQsIGRpZCB5b3UgYXQgYW55IHRpbWUgYWZ0ZXJ3YXJkIGJyaW5nIGhlciBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldC1wbGFjZSBvciBiZWZvcmUgdGhlIGNvdXJ0PyBGb3IgaWYgc2hlIHdhcyBub3QgcHJlc2VudCB3aXRoIHlvdSBhdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGltZSwgeW91IHN1cmVseSBvdWdodCB0byBoYXZlIGRlbGl2ZXJlZCBoZXIgdXAgYWZ0ZXJ3YXJkcywgYW5kIHRvIGhhdmUgY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRvIHByb3ZlIHRoYXQgeW91IHdlcmUgd2lsbGluZyB0byBoYXZlIHRoZSB0ZXN0IG1hZGUgYnkgdGhlIHdvbWFuJ3MKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGNoYWxsZW5nZSB3aGljaCB5b3UgaGFkIHRlbmRlcmVkLCBhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgY2hhbGxlbmdlIGhhZCBiZWVuIHB1dCBpbiB0aGUgYm94LCBhbmQgYSBkZXBvc2l0aW9uIHN0YXRpbmcgdGhhdCB5b3Ugd2VyZSByZWFkeQogICAgICAgICAgICAgICAgICAgIHRvIGRlbGl2ZXIgaGVyIHVwLiBXZWxsIHRoZW4sIHdoZW4geW91IHdlcmUgb24gdGhlIHBvaW50IG9mIGVudGVyaW5nIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdHJpYWwsIGRpZCB5b3UgZXZlciBicmluZyB0aGUgd29tYW4gYmVmb3JlIHRoZSBjb3VydD8gPC90cmFuc2xhdGlvbj4="
translation['47.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBpZiB3aGF0IHRoZXkgc2F5IGFib3V0IGhpcyB0ZW5kZXJpbmcgdGhlIGNoYWxsZW5nZSBpcyB0cnVlLAogICAgICAgICAgICAgICAgICAgIGhlIG91Z2h0LCB3aGVuIHRoZSBjb3VydC1yb29tcyB3ZXJlIGJlaW5nIGFzc2lnbmVkIGJ5IGxvdCwgdG8gaGF2ZSBicm91Z2h0IHRoZQogICAgICAgICAgICAgICAgICAgIHdvbWFuLCBnb3QgYSBoZXJhbGQgdG8gYXR0ZW5kLCBhbmQgYmlkZGVuIG1lLCBpZiBJIGNob3NlLCB0byBwdXQgaGVyIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmUsIGFuZCBoYXZlIG1hZGUgdGhlIGp1cm9ycyBhcyB0aGV5IGNhbWUgaW4gd2l0bmVzc2VzIHRvIHRoZSBmYWN0IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgcmVhZHkgdG8gZGVsaXZlciBoZXIgdXAuIEJ1dCBhcyBpdCBpcywgaGUgaGFzIG1hZGUgZGVjZWl0ZnVsIHN0YXRlbWVudHMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFzIHByb2R1Y2VkIGZhbHNlIHdpdG5lc3NlcywgYnV0IGV2ZW4gdG8gdGhpcyBkYXkgaGUgZG9lcyBub3QgZGFyZSB0byBkZWxpdmVyCiAgICAgICAgICAgICAgICAgICAgdXAgdGhlIHdvbWFuLCB0aG91Z2ggSSBoYXZlIG1hZGUgcmVwZWF0ZWQgY2hhbGxlbmdlcyBhbmQgZGVtYW5kcywgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQgaGF2ZSB0ZXN0aWZpZWQgYmVmb3JlIHlvdS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIHJlYWQgdGhlIGRlcG9zaXRpb25zIGFnYWluLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHRvIGV4cGxhaW4gdG8geW91IHRoZSBvcmlnaW4gb2YgbXkgYWN0aW9uIGFnYWluc3QgVGhlb3BoZW11cywgaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IHlvdSBtYXkgYmUgYXNzdXJlZCB0aGF0IGhlIG5vdCBvbmx5IHNlY3VyZWQgbXkgY29uZGVtbmF0aW9uIHVuanVzdGx5CiAgICAgICAgICAgICAgICAgICAgYnkgZGVjZWl2aW5nIHRoZSBqdXJ5LCBidXQgYWxzbyBhdCB0aGUgc2FtZSB0aW1lIHNlY3VyZWQgYnkgdGhlIHNhbWUgdmVyZGljdCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25kZW1uYXRpb24gb2YgdGhlIHNlbmF0ZSBvZiBmaXZlIGh1bmRyZWQsIGFuZCBtYWRlIG9mIG5vIGVmZmVjdCB0aGUgZGVjaXNpb25zCiAgICAgICAgICAgICAgICAgICAgb2YgeW91ciBjb3VydHMgYW5kIG9mIG5vIGVmZmVjdCB5b3VyIGRlY3JlZXMgYW5kIHlvdXIgbGF3cywgYW5kIHNob29rIHlvdXIgZmFpdGgKICAgICAgICAgICAgICAgICAgICBpbiB5b3VyIG1hZ2lzdHJhdGVzIGFuZCBpbiB0aGUgaW5zY3JpcHRpb25zIG9uIHRoZSBwdWJsaWMgc3RlbGFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSBzdGVsYWUgd2VyZSBtYXJibGUgc2xhYnMgdXBvbiB3aGljaCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGluc2NyaWJlZCB0aGUgbmFtZXMgb2YgdGhvc2UgdHJpZXJhcmNocyB3aG8gd2VyZSBpbmRlYnRlZCB0byB0aGUgc3RhdGUgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSBvciBsb3NzIG9mIGVxdWlwbWVudC4gQSBnb29kIG1hbnkgc3VjaCBpbnNjcmlwdGlvbnMgYXJlIHN0aWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGFudC48L25vdGU+IEhvdyBoZSBoYXMgZG9uZSB0aGlzIEkgd2lsbCBzaG93IHlvdSBwb2ludCBieSBwb2ludC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5JIG5ldmVyIGJlZm9yZSBhdCBhbnkgdGltZSBpbiBteSBsaWZlIGhhZAogICAgICAgICAgICAgICAgICAgIGFueSBidXNpbmVzcyB0cmFuc2FjdGlvbiB3aXRoIFRoZW9waGVtdXMsIG5vciB5ZXQgYW55IHJldmVsIG9yIGxvdmUtYWZmYWlyIG9yCiAgICAgICAgICAgICAgICAgICAgZHJpbmtpbmctYm91dCwgdG8gbGVhZCBtZSB0byBnbyB0byBoaXMgaG91c2UsIGJlY2F1c2Ugb2YgYSBxdWFycmVsIHdpdGggaGltCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgc29tZSBtYXR0ZXIgaW4gd2hpY2ggaGUgaGFkIGdvdCB0aGUgYmV0dGVyIG9mIG1lLCBvciB1bmRlciB0aGUgZXhjaXRlbWVudAogICAgICAgICAgICAgICAgICAgIG9mIGFtb3JvdXMgcGFzc2lvbi4gTm8sIGJ1dCBpbiBvYmVkaWVuY2UgdG8gZGVjcmVlcyBwYXNzZWQgYnkgeW91ciBhc3NlbWJseSBhbmQKICAgICAgICAgICAgICAgICAgICBzZW5hdGUgYW5kIGF0IHRoZSBiaWRkaW5nIG9mIHRoZSBsYXcgSSBkZW1hbmRlZCBvZiBoaW0gdGhlIHNoaXAncyBlcXVpcG1lbnQKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBvd2VkIHRvIHRoZSBzdGF0ZS4gRm9yIHdoYXQgcmVhc29uLCBJIHNoYWxsIHByb2NlZWQgdG8gdGVsbCB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBjaGFuY2VkIHRoYXQgc29tZSB0cmlyZW1lcyB3ZXJlIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdG8gc2FpbCwgYSBtaWxpdGFyeSBmb3JjZSBoYXZpbmcgdG8gYmUgZGVzcGF0Y2hlZCBpbiBoYXN0ZS4gTm93IHRoZXJlIHdhcyBub3QgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZG9ja3lhcmRzIGVxdWlwbWVudCBmb3IgdGhlIHNoaXBzLCBidXQgdGhvc2UgZnJvbSB3aG9tIGl0IHdhcyBkdWUsIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGVpciBwb3NzZXNzaW9uIHN1Y2ggZXF1aXBtZW50LCBoYWQgZmFpbGVkIHRvIHJldHVybiBpdDsgYW5kIGZ1cnRoZXJtb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIG5vdCBhdmFpbGFibGUgZm9yIHB1cmNoYXNlIGluIHRoZSBQZWlyYWV1cyBlaXRoZXIgYW4gYWRlcXVhdGUgc3VwcGx5CiAgICAgICAgICAgICAgICAgICAgb2Ygc2FpbC1jbG90aCBhbmQgdG93IGFuZCBjb3JkYWdlLCB3aGljaCBzZXJ2ZSBmb3IgdGhlIGVxdWlwbWVudCBvZiBhIHRyaXJlbWUuCiAgICAgICAgICAgICAgICAgICAgQ2hhZXJpZGVtdXMsIHRoZXJlZm9yZSwgcHJvcG9zZWQgdGhpcyBkZWNyZWUsIGluIG9yZGVyIHRoYXQgdGhlIGVxdWlwbWVudCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcHMgbWlnaHQgYmUgcmVjb3ZlcmVkIGFuZCBrZXB0IHNhZmUgZm9yIHRoZSBzdGF0ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgZGVjcmVlLCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGhhZCBiZWVuIHBhc3NlZCwgdGhlIG1hZ2lzdHJhdGVzIGNob3NlIGJ5IGxvdCB0aG9zZSB3aG8gb3dlZCB0aGUgc2hpcCdzCiAgICAgICAgICAgICAgICAgICAgZXF1aXBtZW50IHRvIHRoZSBzdGF0ZSBhbmQgaGFuZGVkIG92ZXIgdGhlaXIgbmFtZXMsIGFuZCB0aGUgb3ZlcnNlZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRvY2t5YXJkcyBwYXNzZWQgb24gdGhlIGxpc3QgdG8gdGhlIHRyaWVyYXJjaHMgd2hvIHdlcmUgdGhlbiBhYm91dCB0byBzYWlsLCBhbmQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgb3ZlcnNlZXJzIG9mIHRoZSBuYXZ5LWJvYXJkcy4gVGhlIGxhdyBvZiBQZXJpYW5kZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBsYXcgd2FzIHBhc3NlZCBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItNTM4Ly01MzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTUzOCIgdG89Ii01MzciPjUzODwvZGF0ZVJhbmdlPi01MzcgQi5DLjwvbm90ZT4gZm9yY2VkIHVzIGFuZCBsYWlkIGNvbW1hbmQgdXBvbiB1cyB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlIGxpc3Qgb2YgdGhvc2Ugd2hvIG93ZWQgZXF1aXBtZW50IHRvIHRoZSBzdGF0ZSzigJRJIG1lYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGluIGFjY29yZGFuY2Ugd2l0aCB3aGljaCB0aGUgbmF2eS1ib2FyZHMgd2VyZSBjb25zdGl0dXRlZC4gQW5kIGJlc2lkZXMgdGhpcwogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgZGVjcmVlIG9mIHRoZSBwZW9wbGUgY29tcGVsbGVkIHRoZW0gdG8gYXNzaWduIHRvIHVzIHRoZSBzZXZlcmFsIGRlYnRvcnMKICAgICAgICAgICAgICAgICAgICB0aGF0IHdlIG1pZ2h0IHJlY292ZXIgZnJvbSBlYWNoIG1hbiBoaXMgcHJvcG9ydGlvbmF0ZSBhbW91bnQuIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii01MzgvLTUzNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItNTM4IiB0bz0iLTUzNyI+NTM4PC9kYXRlUmFuZ2U+LTUzNyBCLkMuPC90cmFuc2xhdGlvbj4="
translation['47.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSwgYXMgaXQgaGFwcGVuZWQsIHdhcyBhIHRyaWVyYXJjaCBhbmQgb3ZlcnNlZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmF2eS1ib2FyZCwgYW5kIERlbW9jaGFyZXMgb2YgUGFlYW5pYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QYWVhbmlhIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlIFBhbmRpb25pcy48L25vdGU+IHdhcyBpbiB0aGUgbmF2eS1ib2FyZCwKICAgICAgICAgICAgICAgICAgICBhbmQgd2FzIGluZGVidGVkIHRvIHRoZSBzdGF0ZSBmb3IgdGhlIGVxdWlwbWVudCBvZiBhIHNoaXAgaW4gY29uanVuY3Rpb24gd2l0aAogICAgICAgICAgICAgICAgICAgIFRoZW9waGVtdXMgaGVyZSwgZm9yIGhlIGhhZCBzZXJ2ZWQgYXMgam9pbnQgdHJpZXJhcmNoIHdpdGggaGltLiBCb3RoIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbmFtZXMsIHRoZW4sIGhhZCBiZWVuIGluc2NyaWJlZCBvbiB0aGUgc3RlbMOqIGFzIGluZGVidGVkIHRvIHRoZSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgc2hpcCdzIGVxdWlwbWVudCwgYW5kIHRoZSBtYWdpc3RyYXRlcywgcmVjZWl2aW5nIHRoZWlyIG5hbWVzIGZyb20gdGhvc2UKICAgICAgICAgICAgICAgICAgICBpbiBvZmZpY2UgYmVmb3JlIHRoZW0sIGdhdmUgdGhlbSBvdmVyIHRvIHVzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgdGhlcmVmb3JlIGEgbWF0dGVyIG9mCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzaXR5IGZvciB1cyB0byByZWNlaXZlIHRoZW0uIEkgbXVzdCB0ZWxsIHlvdSB0aGF0IGhpdGhlcnRvLCBhbHRob3VnaCBJIGhhZAogICAgICAgICAgICAgICAgICAgIG9mdGVuIHNlcnZlZCBhcyB5b3VyIHRyaWVyYXJjaCwgSSBoYWQgbmV2ZXIgdGFrZW4gZXF1aXBtZW50IGZyb20gdGhlIGRvY2t5YXJkcywKICAgICAgICAgICAgICAgICAgICBidXQgaGFkIHN1cHBsaWVkIGl0IGF0IG15IG93biBwcml2YXRlIGV4cGVuc2Ugd2hlbmV2ZXIgbmVlZCBhcm9zZSwgaW4gb3JkZXIgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgbWlnaHQgaGF2ZSBhcyBsaXR0bGUgdHJvdWJsZSBhcyBwb3NzaWJsZSB3aXRoIHRoZSBzdGF0ZS4gT24gdGhpcyBvY2Nhc2lvbiwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBJIHdhcyBjb21wZWxsZWQgdG8gdGFrZSBvdmVyIHRoZSBuYW1lcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGRlY3JlZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGxhdy4gPC90cmFuc2xhdGlvbj4="
translation['47.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIEkgc2hhbGwgcHJvZHVjZSBhcyB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICBzdXBwb3J0aW5nIHRoZXNlIGZhY3RzLCB0aGUgZGVjcmVlIGFuZCB0aGUgbGF3LCBuZXh0IHRoZSBtYWdpc3RyYXRlIHdobyBnYXZlIHRoZQogICAgICAgICAgICAgICAgICAgIG5hbWVzIG92ZXIgdG8gbWUgYW5kIHdobyBicm91Z2h0IHRoZSBjYXNlIGludG8gY291cnQsIGFuZCBmaW5hbGx5IHRoZSBtZW1iZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hdnktYm9hcmQgaW4gd2hpY2ggSSB3YXMgb3ZlcnNlZXIgYW5kIHRyaWVyYXJjaC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCwgcGxlYXNlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZWx5IG5lY2Vzc2FyeSwgdGhlcmVmb3JlLCBmb3IgbWUgdG8gdGFrZSBvdmVyIHRoZSBuYW1lcyBvZiB0aG9zZSBpbmRlYnRlZAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzdGF0ZSwgeW91IGhhdmUgaGVhcmQgZnJvbSB0aGUgbGF3IGFuZCB0aGUgZGVjcmVlczsgYW5kIHRoYXQgSSB0b29rIHRoZW0KICAgICAgICAgICAgICAgICAgICBvdmVyIGZyb20gdGhlIG1hZ2lzdHJhdGUsIHRoZSBvbmUgd2hvIGRlbGl2ZXJlZCB0aGVtIHRvIG1lIGhhcyB0ZXN0aWZpZWQuIFNvLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHRoZSBmaXJzdCBxdWVzdGlvbiBmb3IgeW91IHRvIGNvbnNpZGVyIGF0IHRoZSBvdXRzZXQsIG1lbiBvZiB0aGUganVyeSwgaXMKICAgICAgICAgICAgICAgICAgICB0aGlzLCB3aGV0aGVyIHRoZSB3cm9uZ2RvZXIgd2FzIEksIHdobyB3YXMgY29tcGVsbGVkIHRvIHJlY292ZXIgZnJvbSBUaGVvcGhlbXVzCiAgICAgICAgICAgICAgICAgICAgd2hhdCBoZSBvd2VkLCBvciBUaGVvcGhlbXVzLCB3aG8gaGFkIGxvbmcgb3dlZCB0aGUgZXF1aXBtZW50IHRvIHRoZSBzdGF0ZSBhbmQKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIGdpdmUgaXQgYmFjay4gPC90cmFuc2xhdGlvbj4="
translation['47.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgeW91IGxvb2sgYXQKICAgICAgICAgICAgICAgICAgICBlYWNoIG1hdHRlciBzZXZlcmFsbHksIHlvdSB3aWxsIGZpbmQgdGhhdCBUaGVvcGhlbXVzIHdhcyB3aG9sbHkgaW4gdGhlIHdyb25nLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoaXMgaXMgbm90IG1lcmVseSBhIHN0YXRlbWVudCBvZiBtaW5lIGJ1dCBhIGZhY3QgZGVjaWRlZCBieSB2b3RlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlbmF0ZSBhbmQgdGhlIGNvdXJ0LiBGb3Igd2hlbiBJIGhhZCByZWNlaXZlZCBoaXMgbmFtZSBmcm9tIHRoZSBtYWdpc3RyYXRlLAogICAgICAgICAgICAgICAgICAgIEkgYXBwcm9hY2hlZCBoaW0gYW5kIGZpcnN0IGRlbWFuZGVkIHRoZSBzaGlwJ3MgZXF1aXBtZW50OyB3aGVuIGhlIHJlZnVzZWQgdG8KICAgICAgICAgICAgICAgICAgICBnaXZlIGl0IGJhY2sgb24gbXkgbWFraW5nIHRoaXMgc3RhdGVtZW50LCBJIHN1YnNlcXVlbnRseSBmZWxsIGluIHdpdGggaGltIG5lYXIKICAgICAgICAgICAgICAgICAgICB0aGUgSGVybWVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgSGVybWVzLCBkZWRpY2F0ZWQgYnkgdGhlIG5pbmUKICAgICAgICAgICAgICAgICAgICAgICAgYXJjaG9ucyBpbiA0OTMtNDkyLCBzdG9vZCBuZWFyIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIjPg8+EzrnOuuG9uM+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOoM+Fzrvhvb3OvTwvZm9yZWlnbj4sIG9yIENpdHkgR2F0ZSwgb2YgdGhlIG5vcnRoIGZvcnRpZmljYXRpb24gd2FsbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5KdWRlaWNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ub3BvZ3JhcGhpZSB2b24gQXRoZW48L3RpdGxlPiAyLCBwcC4gMTUyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLjwvYmlibD48L25vdGU+IHdoaWNoIHN0YW5kcyBieSB0aGUgbGl0dGxlIGdhdGUgYW5kIHN1bW1vbmVkIGhpbSBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgZGVzcGF0Y2hpbmcgYm9hcmQgYW5kIHRoZSBvdmVyc2VlcnMgb2YgdGhlIGRvY2t5YXJkczsgZm9yIGl0IHdhcyB0aGV5IHdobyBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGltZSBicm91Z2h0IGludG8gY291cnQgc3VpdHMgcmVnYXJkaW5nIHNoaXAncyBlcXVpcG1lbnRzLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIjPg8+EzrnOuuG9uM+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOoM+Fzrvhvb3OvTwvZm9yZWlnbj4sIG9yIENpdHkgR2F0ZSwgb2YgdGhlIG5vcnRoIGZvcnRpZmljYXRpb24gd2FsbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5KdWRlaWNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ub3BvZ3JhcGhpZSB2b24gQXRoZW48L3RpdGxlPiAyLCBwcC4gMTUyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLjwvYmlibD48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Ub3BvZ3JhcGhpZSB2b24gQXRoZW48L3RpdGxlPiAyLCBwcC4gMTUyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLjwvdHJhbnNsYXRpb24+"
translation['47.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgdGhlIHRydXRoLCBJIHNoYWxsIHByb2R1Y2UgYXMgd2l0bmVzc2VzIHRvIHRoZXNlIGZhY3RzIHRob3NlIHdobyBzZXJ2ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgc3VtbW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBoZSB3YXMgc3VtbW9uZWQgYnkgbWUsIHRoZW4sIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gdGVzdGlmaWVkIHRvIHlvdSBieSB0aG9zZSB3aG8gc2VydmVkIHRoZSBzdW1tb25zOyBub3cgdG8gcHJvdmUgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGludG8gY291cnQsIHRha2UgdGhlIGRlcG9zaXRpb24gb2YgdGhlIGRlc3BhdGNoaW5nIGJvYXJkIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWFnaXN0cmF0ZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIG9uZSB3aG8gSQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgd291bGQgZ2l2ZSBtZSB0cm91YmxlLCBEZW1vY2hhcmVzIG9mIFBhZWFuaWEsIHdhcyBpbmRlZWQgZGlzYWdyZWVhYmxlCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhlIHdhcyBicm91Z2h0IGludG8gY291cnQsIGJ1dCBhZnRlciBoZSBoYWQgYmVlbiB0cmllZCBhbmQgY29udmljdGVkIGhlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgdGhlIHBhcnQgb2YgdGhlIHNoaXAncyBlcXVpcG1lbnQgdGhhdCB3YXMgZHVlIGZyb20gaGltLiBCdXQgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIHdob20gSSBzaG91bGQgbmV2ZXIgaGF2ZSBleHBlY3RlZCB0byBnbyB0byBzdWNoIGFuIGV4dHJlbWUgb2YgcmFzY2FsaXR5IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBldmVyIGRhcmUgdG8gcm9iIHRoZSBzdGF0ZSBvZiB0aGUgZXF1aXBtZW50LCBoYXMgZ29uZSBhaGVhZCB3aXRoIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHRyb3VibGVzb21lIGxhd3N1aXRzLiBIZSB3YXMgcHJlc2VudCBpbiB0aGUgY291cnQtcm9vbSB3aGVuIHRoZSBzdWl0IHdhcyBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgaW4sIGJ1dCBuZXZlciBtYWRlIGFueSBkZWZlbmNlLCBub3IgZGlkIGhlIGdpdmUgaW4gdGhlIG5hbWUgb2YgYW55b25lIGZvciBhbgogICAgICAgICAgICAgICAgICAgICAgICBhZGp1ZGljYXRpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM65zrHOtM65zrrOsc+D4b23zrE8L2ZvcmVpZ24+IHdhcyBhIHByb2NlZHVyZSBmb3IgdGhlIGFkanVkaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW1zIG9yIHJlc3BvbnNpYmlsaXRpZXMgb2YgdmFyaW91cyBjb250ZXN0YW50cy4gVGhlIHRlY2huaWNhbCBtb2Rlcm4gdGVybQogICAgICAgICAgICAgICAgICAgICAgICBpcyDigJxpbnRlcnBsZWFkZXIu4oCdPC9ub3RlPiBhcyBoZSBzaG91bGQgaGF2ZSBkb25lLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGNsYWltcyB0aGF0IHNvbWVvbmUgZWxzZSBoYXMgdGhlIGVxdWlwbWVudCBhbmQgdGhhdCBpdCB3YXMgbm90IGhpcyBkdXR5IHRvIGdpdmUKICAgICAgICAgICAgICAgICAgICBpdCBiYWNrOyBidXQgaGUgc3VmZmVyZWQgdGhlIHZlcmRpY3QgdG8gYmUgZ2l2ZW4gYWdhaW5zdCBoaW07IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrnOsc60zrnOus6xz4PhvbfOsTwvZm9yZWlnbj4gd2FzIGEgcHJvY2VkdXJlIGZvciB0aGUgYWRqdWRpY2F0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXMgb3IgcmVzcG9uc2liaWxpdGllcyBvZiB2YXJpb3VzIGNvbnRlc3RhbnRzLiBUaGUgdGVjaG5pY2FsIG1vZGVybiB0ZXJtCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIOKAnGludGVycGxlYWRlci7igJ08L3RyYW5zbGF0aW9uPg=="
translation['47.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz55ZXQgYWZ0ZXIgaGUgbGVmdCB0aGUgY291cnRyb29tIGhlIGRpZCBub3QgcGF5IGFueQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIGJlY2F1c2Ugb2YgdGhhdCwgYnV0IGRlY2lkZWQgdGhhdCBmb3IgdGhlIHRpbWUgYmVpbmcgaGUgd291bGQga2VlcCBvdXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgd2F5IGFuZCByZW1haW4gcXVpZXQgdW50aWwgSSBzaG91bGQgaGF2ZSBzYWlsZWQgd2l0aCB0aGUgZmxlZXQsIGFuZCBzb21lCiAgICAgICAgICAgICAgICAgICAgdGltZSBzaG91bGQgaGF2ZSBlbGFwc2VkLCB0aGlua2luZyB0aGF0IEkgc2hvdWxkIGhhdmUgdG8gcGF5IGZvciB0aGUgZXF1aXBtZW50CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgb3dlZCB0byB0aGUgc3RhdGUgZWl0aGVyIHdoZW4gSSByZXR1cm5lZCBoZXJlLCBvciBlbHNlIHRvIG15IHN1Y2Nlc3NvcgogICAgICAgICAgICAgICAgICAgIHdobyBzaG91bGQgY29tZSBmcm9tIHRoZSBuYXZ5LWJvYXJkcyB0byB0YWtlIGNvbW1hbmQgb2YgdGhlIHNoaXAuIEZvciB3aGF0CiAgICAgICAgICAgICAgICAgICAgYW5zd2VyIGNvdWxkIEkgaGF2ZSBnaXZlbiB0aGlzIG1hbiwgd2hlbiBoZSBwcm9kdWNlZCBkZWNyZWVzIGFuZCBsYXdzIHNob3dpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgd2FzIG9ibGlnZWQgdG8gcmVjb3ZlciB0aGUgZXF1aXBtZW50PyA8L3RyYW5zbGF0aW9uPg=="
translation['47.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgVGhlb3BoZW11cywgYWZ0ZXIgYSBsYXBzZSBvZiB0aW1lLCB3aGVuIEkgaGFkIGNvbWUgYmFjayBhbmQgbWFkZSBkZW1hbmRzCiAgICAgICAgICAgICAgICAgICAgdXBvbiBoaW0sIHdvdWxkIGhhdmUgc2FpZCB0aGF0IGhlIGhhZCBwYWlkIGJhY2sgdGhlIGVxdWlwbWVudCwgYW5kIHRvIHNob3cgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBwYWlkIHdvdWxkIGhhdmUgaW5zaXN0ZWQgdXBvbiB0aGVzZSBwcm9vZnPigJR0aGUgY3Jpc2lzLCB0aGUKICAgICAgICAgICAgICAgICAgICB1cmdlbmN5LCBhbmQgdGhhdCBJIHdhcyBub3Qgc3VjaCBhIGZvb2wgYW5kIGhhZCBuZXZlciBiZWVuIHN1Y2ggYSBmcmllbmQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYXMgdG8gd2FpdDsgZm9yIHdoYXQgcG9zc2libGUgcmVhc29uLCB0aGVuLCB3aGVuIEkgd2FzIHNlcnZpbmcgdGhlIHN0YXRlIGFzCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoIGFuZCB3YXMgb3ZlcnNlZXIgb2YgdGhlIG5hdnktYm9hcmQsIGFuZCB3aGVuIGRlY3JlZXMgb2Ygc3VjaCBhIG5hdHVyZQogICAgICAgICAgICAgICAgICAgIGFuZCBzdWNoIGEgbGF3IHdlcmUgaW4gZm9yY2UsIHNob3VsZCBJIGhhdmUgb2JsaWdlZCBoaW0gYnkgZGVsYXlpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['47.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgYmVjYXVzZSBUaGVvcGhlbXVzIHJlYXNvbmVkCiAgICAgICAgICAgICAgICAgICAgaW4gdGhpcyB3YXkgdGhhdCBoZSB0aGVuIHJlZnVzZWQgdG8gcmVzdG9yZSB0aGUgZXF1aXBtZW50IGJ1dCBrZXB0IGhpbXNlbGYgb3V0CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHdheSwgYW5kIHRob3VnaHQgdGhhdCBsYXRlciBvbiBoZSB3b3VsZCBoZSBhYmxlIHRvIHJvYiBtZTsgYW5kIGJlc2lkZXMKICAgICAgICAgICAgICAgICAgICB0aGlzLCBoZSBjb3VsZCB0YWtlIHJlZnVnZSBpbiBhbiBvYXRoIGFuZCBwZXJqdXJlIGhpbXNlbGYgd2l0aG91dCB0cm91YmxlLCBhCiAgICAgICAgICAgICAgICAgICAgdGhpbmcgd2hpY2ggaGUgaGFzIGRvbmUgdG8gb3RoZXJzIGFsc28uIEZvciB0aGUgZ3JlZWRpbmVzcyBvZiB0aGUgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgaW4gbWF0dGVycyB3aGVyZSBoaXMgaW50ZXJlc3RzIGFyZSBpbnZvbHZlZCBpcyBkcmVhZGZ1bCwgYXMgSSBzaGFsbAogICAgICAgICAgICAgICAgICAgIHNob3cgeW91IGluIGZhY3QuIEZvciBUaGVvcGhlbXVzLCB3aGlsZSBvd2luZyB0aGlzIGVxdWlwbWVudCB0byB0aGUgc3RhdGUsIG1hZGUKICAgICAgICAgICAgICAgICAgICBhIHByZXRlbmNlIG9mIHNoaWZ0aW5nIHRoZSBjaGFyZ2UgdG8gQXBoYXJldXMsIGJ1dCBpbiBhY3R1YWwgZmFjdCBoZSBuZXZlcgogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIGhpcyBuYW1lIGZvciBhbiBhZGp1ZGljYXRpb24sIHdlbGwga25vd2luZyB0aGF0IGhlIHdvdWxkIGJlIGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIG9mIGZhbHNlaG9vZCwgaWYgaGUgc2hvdWxkIGNvbWUgaW50byBjb3VydC4gPC90cmFuc2xhdGlvbj4="
translation['47.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQXBoYXJldXMgcHJvdmVkIHRoYXQgVGhlb3BoZW11cyBoYWQgcmVja29uZWQgdXAgYWdhaW5zdCBoaW0gdGhlIGNvc3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZXF1aXBtZW50IGFuZCBoYWQgZ290IHRoZSBtb25leSBmcm9tIGhpbSwgd2hlbiBoZSB0b29rIG92ZXIgdGhlIHRyaWVyYXJjaHkuCiAgICAgICAgICAgICAgICAgICAgTm93IFRoZW9waGVtdXMgbWFpbnRhaW5zIHRoYXQgaGUgZ2F2ZSBpdCBvdmVyIHRvIERlbW9jaGFyZXMsIGFuZCBoZSBpcyBzdWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBvZiBEZW1vY2hhcmVzLCB3aG8gaXMgbm93IGRlYWQuIEJ1dCwgd2hpbGUgRGVtb2NoYXJlcyBsaXZlZCwgVGhlb3BoZW11cwogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgcmVwb3J0IGhpcyBuYW1lIGZvciBhbiBhZGp1ZGljYXRpb24gd2hlbiBoZSB3YXMgYmVpbmcgc3VlZCBieSBtZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZXF1aXBtZW50OyBoZSBtZXJlbHkgd2lzaGVkLCBvbiB0aGUgcHJldGVuY2Ugb2YgdGhlIGxhcHNlIG9mIHRpbWUsIHRvIHJvYiB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSBvZiB0aGUgZXF1aXBtZW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyB0aGUgdHJ1dGgsIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVhcmluZyBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVzZSBmYWN0cyBpbiBtaW5kLCB0aGVyZWZvcmUsIGFuZCBoZWFyaW5nIGZyb20gdGhvc2Ugd2hvIGhhZCBoYWQgZGVhbGluZ3Mgd2l0aAogICAgICAgICAgICAgICAgICAgIFRoZW9waGVtdXMgd2hhdCBzb3J0IG9mIGEgbWFuIGhlIHdhcyBpbiBtYXR0ZXJzIHdoZXJlIGhpcyBpbnRlcmVzdHMgd2VyZQogICAgICAgICAgICAgICAgICAgIGludm9sdmVkLCBhbmQgZmFpbGluZyB0byByZWNvdmVyIHRoZSBlcXVpcG1lbnQgZnJvbSBoaW0sIEkgYXBwcm9hY2hlZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXNwYXRjaGluZyBib2FyZCBhbmQgdGhlIHNlbmF0ZSwgc3RhdGluZyB0aGF0IFRoZW9waGVtdXMgd291bGQgbm90IHJldHVybiB0byBtZQogICAgICAgICAgICAgICAgICAgIHRoZSBlcXVpcG1lbnQgZm9yIHdoaWNoIGhlIHdhcyBhY2NvdW50YWJsZSBieSBqdWRnZW1lbnQgb2YgdGhlIGNvdXJ0LiBBbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgdHJpZXJhcmNocyBhbHNvIGFwcHJvYWNoZWQgdGhlIHNlbmF0ZSwgYWxsIHRob3NlIHdobyBoYWQgbm90IGJlZW4gYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHJlY292ZXIgdGhlIGVxdWlwbWVudCBmcm9tIHRoZSBwZXJzb25zIGJvdW5kIHRvIHByb2R1Y2UgaXQuIEFuZCBhZnRlciBtdWNoCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgdGhlIHNlbmF0ZSBhbnN3ZXJlZCBieSBhIGRlY3JlZSB3aGljaCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RpbmcgdXMgdG8gcmVjb3ZlciB3aGF0IHdhcyBkdWUgaW4gd2hhdGV2ZXIgd2F5IHdlIGNvdWxkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiwgdGhlbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGhhZCBiZWVuIHBhc3NlZCBieSB0aGUgc2VuYXRlLCBzaW5jZSBubyBvbmUgaW5kaWN0ZWQgaXQgZm9yIGlsbGVnYWxpdHksCiAgICAgICAgICAgICAgICAgICAgYnV0IGl0IGJlY2FtZSB2YWxpZCwgSSBhcHByb2FjaGVkIHRoaXMgbWFuIEV2ZXJndXMsIHRoZSBicm90aGVyIG9mIFRoZW9waGVtdXMsCiAgICAgICAgICAgICAgICAgICAgc2luY2UgSSB3YXMgdW5hYmxlIHRvIHNlZSBUaGVvcGhlbXVzOyBhbmQgaGF2aW5nIHRoZSBkZWNyZWUgaW4gbXkgaGFuZCBJIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgdGhlIHJldHVybiBvZiB0aGUgZXF1aXBtZW50LCBhbmQgYmFkZSBoaW0gaW5mb3JtIFRoZW9waGVtdXM7IHRoZW4sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgYWxsb3dpbmcgYSBmZXcgZGF5cyB0byBwYXNzLCBzaW5jZSBoZSByZWZ1c2VkIHRvIHJldHVybiB0aGUgZXF1aXBtZW50LCBidXQKICAgICAgICAgICAgICAgICAgICBvbmx5IGplZXJlZCBhdCBtZSwgSSB0b29rIHNvbWUgd2l0bmVzc2VzIHdpdGggbWUsIGFuZCBhc2tlZCBoaW0gd2hldGhlciBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIHRoZSBlc3RhdGUgd2l0aCBoaXMgYnJvdGhlciwgb3Igd2hldGhlciB0aGVpciBwcm9wZXJ0eSB3YXMgaGVsZCBpbgogICAgICAgICAgICAgICAgICAgIGNvbW1vbi4gPC90cmFuc2xhdGlvbj4="
translation['47.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBFdmVyZ3VzJ3MgYW5zd2VyaW5nIG1lIHRoYXQgaXQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkaXZpZGVkIGFuZCB0aGF0IFRoZW9waGVtdXMgbGl2ZWQgaW4gYSBob3VzZSBieSBoaW1zZWxmLCBidXQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIO+8iEV2ZXJndXPvvIkgbGl2ZWQgd2l0aCBoaXMgZmF0aGVyLCBJIHRodXMgbGVhcm5lZCB3aGVyZQogICAgICAgICAgICAgICAgICAgIFRoZW9waGVtdXMgbGl2ZWQsIGFuZCB0YWtpbmcgd2l0aCBtZSBhIHNlcnZhbnQgZnJvbSB0aGUgbWFnaXN0cmF0ZXMsIEkgd2VudCB0bwogICAgICAgICAgICAgICAgICAgIFRoZW9waGVtdXMncyBob3VzZS4gQXMgSSBkaWQgbm90IGZpbmQgaGltIGF0IGhvbWUsIEkgYmFkZSB0aGUgd29tYW4gd2hvIGFuc3dlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGRvb3IgdG8gZ28gYW5kIGZldGNoIGhpbSB3aGVyZXZlciBoZSBtaWdodCBiZS4gVGhpcyB3YXMgdGhlIHdvbWFuLCB3aG9tLAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgZGVwb3NpdGlvbnMgb2YgdGhlc2UgbWVuLCBUaGVvcGhlbXVzIG9mZmVyZWQgdG8gZGVsaXZlciB1cCwgYnV0CiAgICAgICAgICAgICAgICAgICAgd2hvbSwgYWZ0ZXIgcmVwZWF0ZWQgZGVtYW5kcywgSSBjYW5ub3QgZ2V0IGZyb20gaGltLCB0aGF0IHlvdSBtaWdodCBsZWFybiB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBhcyB0byB3aGljaCBwYXJ0eSBiZWdhbiB0aGUgYXNzYXVsdC4gPC90cmFuc2xhdGlvbj4="
translation['47.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB3aGVuIFRoZW9waGVtdXMgY2FtZSBpbiwgYWZ0ZXIgdGhlIHdvbWFuIGhhZCBnb25lIHRvIGZldGNoIGhpbSwgSSBhc2tlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5IG9mIHRoZSBlcXVpcG1lbnQsIHRlbGxpbmcgaGltIHRoYXQgSSB3YXMgbm93IG9uIHRoZSBwb2ludCBvZiBzYWlsaW5nOwogICAgICAgICAgICAgICAgICAgIGFuZCBJIHNob3dlZCBoaW0gdGhlIGRlY3JlZSBvZiB0aGUgc2VuYXRlLiBXaGVuLCBvbiBteSBzYXlpbmcgdGhpcywgaGUgcmVmdXNlZAogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgaXQgdXAsIGJ1dCBiZWdhbiB0byB0aHJlYXRlbiBtZSBhbmQgYWJ1c2UgbWUsIEkgYmFkZSB0aGUgYm95IGNhbGwgaW4KICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBzdHJlZXQgYW55IGNpdGl6ZW5zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9ubHkgYSBjaXRpemVuCiAgICAgICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGEgY29tcGV0ZW50IHdpdG5lc3MuIEEgc2xhdmUgb3IgYW4gYWxpZW4gd291bGQgbm90IHN1ZmZpY2UuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHdob20gaGUgbWlnaHQgc2VlIHBhc3NpbmcgYnksIHRoYXQgSSBtaWdodCBoYXZlIHRoZW0gYXMgd2l0bmVzc2VzIHRvIHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgc2FpZCwgPC90cmFuc2xhdGlvbj4="
translation['47.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgSSBhZ2FpbiBtYWRlIGRlbWFuZCB1cG9uIFRoZW9waGVtdXMKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdG8gZ28gd2l0aCBtZSBoaW1zZWxmIHRvIHRoZSBkZXNwYXRjaGluZyBib2FyZCBhbmQgdGhlIHNlbmF0ZSwgYW5kLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGRlbmllZCB0aGF0IGhlIHdhcyBsaWFibGUsIHRvIGNvbnZpbmNlIHRob3NlIHdobyBoYWQgZ2l2ZW4gb3ZlciB0aGUgbmFtZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIHVzIHRvIHNlZWsgdG8gcmVjb3ZlciB3aGF0IHdhcyBkdWUsIG9yIGVsc2UgdG8gcGF5IGJhY2sgdGhlIGVxdWlwbWVudDsKICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UsIEkgZGVjbGFyZWQgdGhhdCBJIHNob3VsZCB0YWtlIGdvb2RzIGFzIHNlY3VyaXR5IGluIGFjY29yZGFuY2Ugd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIGFuZCB0aGUgZGVjcmVlcy4gU2luY2UgaGUgd2FzIG5vdCB3aWxsaW5nIHRvIGRvIGFueXRoaW5nIHRoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIEkgc3RhcnRlZCB0byBsZWFkIGF3YXkgdGhlIHdvbWFuIHdobyB3YXMgc3RhbmRpbmcgYnkgdGhlIGRvb3IsIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgb25lIHdobyBoYWQgZ29uZSB0byBmZXRjaCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['47.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzZWl6ZWQgaGVyCiAgICAgICAgICAgICAgICAgICAgdG8gcHJldmVudCBtZSwgYW5kIEkgbGV0IGdvIG9mIHRoZSB3b21hbiwgYnV0IHByb2NlZWRlZCB0byBlbnRlciB0aGUgaG91c2UgdG8KICAgICAgICAgICAgICAgICAgICB0YWtlIHNvbWUgc2VjdXJpdHkgZm9yIHRoZSBlcXVpcG1lbnQgZHVlOyBmb3IgdGhlIGRvb3IsIGFzIGl0IGhhcHBlbmVkLCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIG9wZW5lZCB3aGVuIFRoZW9waGVtdXMgY2FtZSwgYW5kIGhlIGhhZCBub3QgeWV0IGdvbmUgaW4uIEkgaGFkIGFscmVhZHkgaW5mb3JtZWQKICAgICAgICAgICAgICAgICAgICBteXNlbGYgdGhhdCBoZSB3YXMgbm90IG1hcnJpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlbmNlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzcGVha2VyIGZlbHQgYXQgbGliZXJ0eSB0byBlbnRlciB0aGUgYXBhcnRtZW50Ljwvbm90ZT4gQXMgSSB3YXMgZ29pbmcgaW4KICAgICAgICAgICAgICAgICAgICBUaGVvcGhlbXVzIHN0cnVjayBtZSBvbiB0aGUgbW91dGggd2l0aCBoaXMgZmlzdCwgYW5kIEksIGNhbGxpbmcgdXBvbiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIHByZXNlbnQgdG8gYmVhciB3aXRuZXNzLCByZXR1cm5lZCB0aGUgYmxvdy4gPC90cmFuc2xhdGlvbj4="
translation['47.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIHByb29mIHRoYXQgd2hhdCBJIGFtIHNheWluZyBpcyB0cnVlLCBhbmQgdGhhdCBUaGVvcGhlbXVzCiAgICAgICAgICAgICAgICAgICAgYmVnYW4gdGhlIGFzc2F1bHQsIG5lZWRzLCBJIHRoaW5rLCBub3RoaW5nIGVsc2UgZm9yIGl0cyBlc3RhYmxpc2htZW50IHRoYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IG9mIHRoZSB3b21hbiB3aG9tIHRoZXNlIHdpdG5lc3NlcyBoYXZlIHN0YXRlZCB0aGF0IFRoZW9waGVtdXMgd2FzCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgdG8gZGVsaXZlciB1cC4gQnkgbWVhbnMgb2YgdGhpcyB0ZXN0aW1vbnkgVGhlb3BoZW11cywgd2hvc2UgY2FzZSBjYW1lCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgaW50byBjb3VydCwgc2VlaW5nIHRoYXQgSSBkaWQgbm90IGVudGVyIGEgc3BlY2lhbCBwbGVhIG9yIGFuIGFmZmlkYXZpdCBmb3IKICAgICAgICAgICAgICAgICAgICBkZWxheSwgc2luY2UgdGhlc2UgbWVhc3VyZXMgaGFkIG9uY2UgYmVlbiBhIGRpc2FkdmFudGFnZSB0byBtZSBpbiBhIGZvcm1lciBzdWl0LAogICAgICAgICAgICAgICAgICAgIGRlY2VpdmVkIHRoZSBqdXJvcnMsIHNheWluZyB0aGF0IHRoZSB3aXRuZXNzZXMgd2hvbSBJIGhhZCBicm91Z2h0IGZvcndhcmQgZ2F2ZQogICAgICAgICAgICAgICAgICAgIGZhbHNlIHRlc3RpbW9ueSwgYnV0IHRoYXQgdGhpcyB3b21hbiB3b3VsZCB0ZWxsIHRoZSB0cnV0aCBpZiBzaGUgd2VyZSBwdXQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZS4gPC90cmFuc2xhdGlvbj4="
translation['47.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlaXIgYWN0aW9ucyBub3cgYXJlIHNob3duIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIHZlcnkgb3Bwb3NpdGUgb2YgdGhlIGxhbmd1YWdlIHdoaWNoIHRoZXkgdGhlbiB1c2VkIHdpdGggc3VjaCBpbnNpc3RlbmNlOyBmb3IKICAgICAgICAgICAgICAgICAgICBJIGFtIHVuYWJsZSB0byBnZXQgdGhlIHdvbWFuIGZvciBleGFtaW5hdGlvbiBkZXNwaXRlIHJlcGVhdGVkIGRlbWFuZHMsIGFzIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gc3RhdGVkIHRvIHlvdSBieSB3aXRuZXNzZXMuIFNpbmNlLCB0aGVyZWZvcmUsIHRoZXkgcmVmdXNlIHRvIGRlbGl2ZXIgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgd29tYW4sIHdob20gdGhleSB0aGVtc2VsdmVzIGRlY2xhcmUgdGhhdCBJIHdhcyBjaGFsbGVuZ2VkIHRvIHJlY2VpdmUsIEkgZGVzaXJlCiAgICAgICAgICAgICAgICAgICAgdG8gY2FsbCBiZWZvcmUgeW91IHRoZSB3aXRuZXNzZXMgd2hvIHNhdyBUaGVvcGhlbXVzIGRlYWwgbWUgdGhlIGZpcnN0IGJsb3cuIEFuZAogICAgICAgICAgICAgICAgICAgIHRoaXMgaXMgd2hhdCBjb25zdGl0dXRlcyBhc3NhdWx0LCB3aGVuIGEgbWFuIGNvbW1pdHMgdGhlIGZpcnN0IGFjdCBvZiB2aW9sZW5jZSwKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IHdoZW4gaGUgc3RyaWtlcyBvbmUgd2hvIGlzIHNlZWtpbmcgdG8gZXhhY3QgcGF5bWVudCBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgbGF3cyBhbmQgeW91ciBkZWNyZWVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzIGFuZCB0aGUgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28gd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBwbGVkZ2Ugd2hpY2ggSSBoYWQgc2VpemVkIGhhZCBiZWVuIHRha2VuIGZyb20gbWUgYnkgVGhlb3BoZW11cywgYW5kIEkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBiZWF0ZW4sIEkgd2VudCB0byB0aGUgc2VuYXRlIGFuZCBzaG93ZWQgdGhlbSB0aGUgbWFya3Mgb2YgdGhlIGJsb3dzLCBhbmQgdG9sZAogICAgICAgICAgICAgICAgICAgIHRoZW0gaG93IEkgaGFkIGJlZW4gdHJlYXRlZCwgYW5kIGFsc28gdGhhdCBpdCB3YXMgd2hpbGUgSSB3YXMgc2Vla2luZyB0byBjb2xsZWN0CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBzdGF0ZSB0aGUgc2hpcCdzIGVxdWlwbWVudC4gVGhlIHNlbmF0ZSwgYW5nZXJlZCBhdCB0aGUgdHJlYXRtZW50IHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBoYWQgcmVjZWl2ZWQgYW5kIHNlZWluZyB0aGUgcGxpZ2h0IHRoYXQgSSB3YXMgaW4sIHRoaW5raW5nLCB0b28sIHRoYXQgdGhlIGluc3VsdAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIG9mZmVyZWQsIG5vdCB0byBtZSwgYnV0IHRvIGl0c2VsZiBhbmQgdGhlIGFzc2VtYmx5IHdoaWNoIGhhZCBwYXNzZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGFuZCB0aGUgbGF3IHdoaWNoIGNvbXBlbGxlZCB1cyB0byBleGFjdCBwYXltZW50IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQs4oCUIDwvdHJhbnNsYXRpb24+"
translation['47.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz50aGUgc2VuYXRlLCBJIHNheSwKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIG1lIHRvIHByZWZlciBhbiBpbXBlYWNobWVudCwgYW5kIHRoYXQgdGhlIHByeXRhbmVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNpbmNlIHRoZSBlbnRpcmUgc2VuYXRlIG9mIGZpdmUgaHVuZHJlZCBtZW1iZXJzIGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgICAgICBhbHdheXMgbWVldCBhcyBhIHdob2xlLCB0aGUgZmlmdHkgbWVtYmVycyBmcm9tIGVhY2ggdHJpYmUgc2VydmVkIGluIHR1cm4KICAgICAgICAgICAgICAgICAgICAgICAg77yIdGhlIG9yZGVyIGJlaW5nIGRldGVybWluZWQgYnkgbG9077yJIGFzIGEgc29ydCBvZiBleGVjdXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVlIGZvciBvbmUtdGVudGggb2YgdGhlIHllYXIsIHRoZSBwcmVzaWRpbmcgb2ZmaWNlciBmb3IgdGhlIGRheSBiZWluZwogICAgICAgICAgICAgICAgICAgICAgICBjaG9zZW4gZnJvbSB0aGVpciBudW1iZXIuIFRoZXNlIGdyb3VwcyB3ZXJlIGNhbGxlZCB0aGUgcHJ5dGFuZXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBnaXZlIFRoZW9waGVtdXMgdHdvIGRheXMnIG5vdGljZSBvZiB0cmlhbCBvbiBhIGNoYXJnZSBvZiBicmVha2luZyB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIGltcGVkaW5nIHRoZSBmbGVldCdzIGRlcGFydHVyZSwgY2hhcmdpbmcgZnVydGhlciB0aGF0IGhlIGhhZCByZWZ1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoZSBzaGlwJ3MgZXF1aXBtZW50IGFuZCBoYWQgdGFrZW4gZnJvbSBtZSB0aGUgcGxlZGdlIHdoaWNoIEkgaGFkIHNlaXplZCwKICAgICAgICAgICAgICAgICAgICBhbmQgYmVhdGVuIG1lIHdoZW4gSSB3YXMgc2Vla2luZyB0byBjb2xsZWN0IHdoYXQgd2FzIGR1ZSBhbmQgd2FzIHBlcmZvcm1pbmcgbXkKICAgICAgICAgICAgICAgICAgICBkdXR5IHRvIHRoZSBzdGF0ZS4gV2VsbCwgdGhlbiwgdGhlIHRyaWFsIG9mIFRoZW9waGVtdXMgY2FtZSBvbiBiZWZvcmUgdGhlIHNlbmF0ZQogICAgICAgICAgICAgICAgICAgIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgaW1wZWFjaG1lbnQgd2hpY2ggSSBoYWQgcHJlZmVycmVkOyBhbmQgYWZ0ZXIgYm90aCBzaWRlcwogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGhlYXJkIGFuZCB0aGUgc2VuYXRvcnMgaGFkIGNhc3QgdGhlaXIgdm90ZXMgc2VjcmV0bHksIGhlIHdhcyBjb252aWN0ZWQKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2VuYXRlLWNoYW1iZXIgYW5kIGFkanVkZ2VkIHRvIGJlIGd1aWx0eS4gPC90cmFuc2xhdGlvbj4="
translation['47.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGUgc2VuYXRlIHdhcyBnb2luZyBpbnRvIGEgZGl2aXNpb24gb24gdGhlIHF1ZXN0aW9uCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBpdCBzaG91bGQgcmVtYW5kIGhpbSB0byBhIGp1cnktY291cnQgb3Igc2VudGVuY2UgaGltIHRvIGEgZmluZSBvZiBmaXZlCiAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBkcmFjaG1hZSwgdGhlIGhpZ2hlc3QgcGVuYWx0eSB3aGljaCB0aGUgbGF3IGFsbG93ZWQgaXQgdG8gaW5mbGljdCwgd2hpbGUKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlc2UgbWVuIHdlcmUgbWFraW5nIHBsZWFzIGFuZCBlbnRyZWF0aWVzIGFuZCBzZW5kaW5nIGFueSBudW1iZXIgb2YgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgdG8gaW50ZXJjZWRlIGZvciB0aGVtLCBhbmQgb2ZmZXJpbmcgdXMgcmlnaHQgdGhlcmUgaW4gdGhlIHNlbmF0ZS1jaGFtYmVyIHRoZQogICAgICAgICAgICAgICAgICAgIGludmVudG9yeSBvZiB0aGUgZXF1aXBtZW50IGR1ZSwgYW5kIHByb21pc2luZyB0byBzdWJtaXQgdGhlIHF1ZXN0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFzc2F1bHQgdG8gYW55IG9uZSBvZiB0aGUgQXRoZW5pYW5zIHdob20gSSBzaG91bGQgbmFtZSwgSSBjb25zZW50ZWQgdGhhdCBhIGZpbmUKICAgICAgICAgICAgICAgICAgICBvZiB0d2VudHktZml2ZSBkcmFjaG1hZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGV4dCB3b3VsZCBuYXR1cmFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgbWVhbiBhbiBhZGRpdGlvbmFsIGZpbmUsIGJ1dCB0aGUgc3BlYWtlciBpcyBlbXBoYXNpemluZyBoaXMgcmVhc29uYWJsZW5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgaW4gaGlzIHRyZWF0bWVudCBvZiBoaXMgb3Bwb25lbnRzLiBUaGlzIHdhcyBzaG93biBieSBoaXMgY29uc2VudGluZyB0byBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmUgb2YgbWVyZWx5IDUgZHJhY2htYWUsIHdoZXJlYXMgaXQgbWlnaHQgaGF2ZSBiZWVuIDUwMCBkcmFjaG1hZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGlvbiBvZiB0aGUgZGVmZW5kYW50J3MgcHJvcGVydHkuIEkgdGhpbmsgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Az4HOv8+CPC9mb3JlaWduPi0gbWVhbnMgYSBmaW5lIGluIGFkZGl0aW9uIHRvIHRoZSBvdGhlciBjaGFyZ2VzIHRvIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgd2FzIGFscmVhZHkgbGlhYmxlLjwvbm90ZT4gc2hvdWxkIGJlIGltcG9zZWQgdXBvbiBUaGVvcGhlbXVzLgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM+Bzr/PgjwvZm9yZWlnbj4tIG1lYW5zIGEgZmluZSBpbiBhZGRpdGlvbiB0byB0aGUgb3RoZXIgY2hhcmdlcyB0byB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50IHdhcyBhbHJlYWR5IGxpYWJsZS48L3RyYW5zbGF0aW9uPg=="
translation['47.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIEkgYmVnIGFsbCBvZiB5b3Ugd2hvIHdlcmUgc2VuYXRvcnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYXJjaG9uc2hpcCBvZiBBZ2F0aG9jbGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIGluIDxkYXRlIGF1dGhuYW1lPSItMzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU2Ij4zNTY8L2RhdGU+IEIuQy48L25vdGU+IHRvIHRlbGwgdGhlIGZhY3RzIHRvIHRob3NlIHdobyBzaXQKICAgICAgICAgICAgICAgICAgICBieSB5b3UsIGFuZCBJIHdpbGwgYnJpbmcgYmVmb3JlIHlvdSBhcyB3aXRuZXNzZXMgYWxsIHRob3NlIHdob20gSSBoYXZlIGJlZW4gYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIGZpbmQgd2hvIHdlcmUgc2VuYXRvcnMgdGhhdCB5ZWFyLjxkYXRlIGF1dGhuYW1lPSItMzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU2Ij4zNTY8L2RhdGU+IEIuQy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSwgeW91IHNlZSwgbWVuIG9mIHRoZSBqdXJ5LCBzaG93ZWQKICAgICAgICAgICAgICAgICAgICBteXNlbGYgdGh1cyByZWFzb25hYmxlIHRvd2FyZCB0aGVzZSBtZW4uIEFuZCB5ZXQgdGhlIGRlY3JlZSBvcmRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGlvbiBvZiB0aGUgcHJvcGVydHksIG5vdCBvbmx5IG9mIHRob3NlIHdobyBoYWQgc2hpcCdzIGVxdWlwbWVudCBhbmQgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IHJldHVybiBpdCB0byB0aGUgc3RhdGUsIGJ1dCBhbHNvIG9mIGFueW9uZSB3aG8sIGhhdmluZyBzdWNoIGVxdWlwbWVudCwKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIHNlbGwgaXQ7IHN1Y2ggYSBzY2FyY2l0eSBvZiBlcXVpcG1lbnQgd2FzIHRoZXJlIGluIHRoZSBjaXR5IGF0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGltZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgZGVjcmVlLCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBJIGhhZCBjb21lCiAgICAgICAgICAgICAgICAgICAgYmFjayBmcm9tIG15IHZveWFnZSwgbWVuIG9mIHRoZSBqdXJ5LCBhcyBUaGVvcGhlbXVzIHJlZnVzZWQgdG8gcmVmZXIgdG8gYW55b25lCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hdHRlciBvZiB0aGUgYmxvd3Mgd2hpY2ggaGUgaGFkIGRlYWx0IG1lLCBJIHN1bW1vbmVkIGhpbSwgYW5kIGJlZ2FuIGFuCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGFnYWluc3QgaGltIGZvciBhc3NhdWx0LiBIZSBzdW1tb25lZCBtZSBpbiBhIGNyb3NzLWFjdGlvbiwgYW5kIHdoaWxlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3JzIGhhZCB0aGUgY2F1c2VzIGJlZm9yZSB0aGVtLCBhbmQgdGhlIHRpbWUgY2FtZSBmb3IgbWFraW5nIHRoZSBhd2FyZCwKICAgICAgICAgICAgICAgICAgICBoZSBwdXQgaW4gYSBzcGVjaWFsIHBsZWEgYW5kIGFuIGFmZmlkYXZpdCBmb3IgcG9zdHBvbmVtZW50OyBJLCBob3dldmVyLCBiZWluZwogICAgICAgICAgICAgICAgICAgIGNvbnNjaW91cyB0aGF0IEkgaGFkIGRvbmUgbm8gd3JvbmcsIGNhbWUgaW4gZm9yIHRyaWFsIGJlZm9yZSB5b3VyIGNvdXJ0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVvcGhlbXVzLCBieSBicmluZ2luZyB0aGlzIHRlc3RpbW9ueSB0bwogICAgICAgICAgICAgICAgICAgIHdoaWNoIG5vIG9uZSBlbHNlIGhhcyBkZXBvc2VkLCBidXQgb25seSBoaXMgYnJvdGhlciBhbmQgaGlzIGJyb3RoZXItaW4tbGF3LCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBlZmZlY3QgdGhhdCBoZSB3YXMgd2lsbGluZyB0byBkZWxpdmVyIHVwIHRoZSB3b21hbiwgYW5kIGJ5IHByZXRlbmRpbmcgdG8gYmUKICAgICAgICAgICAgICAgICAgICBhIG1hbiB3aXRob3V0IGd1aWxlLCBkZWNlaXZlZCB0aGUganVyb3JzLiBCdXQgbm93IEkgbWFrZSBvZiB5b3UgYSBmYWlyIHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgYm90aCB0byBkZWNpZGUgcmVnYXJkaW5nIHRoZSB0ZXN0aW1vbnkgd2hldGhlciBpdCBpcyB0cnVlIG9yIGZhbHNlLCBhbmQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB0aW1lIHRvIGNvbnNpZGVyIHRoZSB3aG9sZSBjYXNlIGZyb20gdGhlIGJlZ2lubmluZy4gPC90cmFuc2xhdGlvbj4="
translation['47.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5JLCBmb3IgbXkgcGFydCwgaG9sZCB0aGF0IHRoZSBwcm9vZiBzaG91bGQgYmUgZHJhd24KICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSB2ZXJ5IGNvdXJzZSBvZiBwcm9jZWR1cmUgdG8gd2hpY2ggdGhlIGZlbGxvdyBhdCB0aGF0IHRpbWUgZmxlZCBmb3IKICAgICAgICAgICAgICAgICAgICByZWZ1Z2UsIHRoYXQgaXMsIGZyb20gdGhlIGV4YW1pbmF0aW9uIG9mIHRoZSB3b21hbiBieSB0aGUgdG9ydHVyZSwgdG8gZGV0ZXJtaW5lCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggcGFydHkgc3RydWNrIHRoZSBmaXJzdCBibG93OyBmb3IgdGhpcyBpcyB3aGF0IGNvbnN0aXR1dGVzIGFzc2F1bHQuIEFuZCBpdAogICAgICAgICAgICAgICAgICAgIGlzIGZvciB0aGlzIHJlYXNvbiB0aGF0IEkgYW0gc3VpbmcgdGhlIHdpdG5lc3NlcyBmb3IgZmFsc2UgdGVzdGltb255LCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgdGhleSBkZXBvc2VkIHRoYXQgVGhlb3BoZW11cyB3YXMgd2lsbGluZyB0byBkZWxpdmVyIHVwIHRoZSB3b21hbiwgd2hlcmVhcyBoZQogICAgICAgICAgICAgICAgICAgIG5ldmVyIHdvdWxkIHByb2R1Y2UgaGVyIGluIHBlcnNvbiBlaXRoZXIgYXQgdGhhdCB0aW1lIGJlZm9yZSB0aGUgYXJiaXRyYXRvciBvcgogICAgICAgICAgICAgICAgICAgIHN1YnNlcXVlbnRseSwgZGVzcGl0ZSBteSByZXBlYXRlZCBkZW1hbmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IG91Z2h0LCB0aGVyZWZvcmUsIHRvIHN1ZmZlciBhIGRvdWJsZSBwdW5pc2htZW50LCBib3RoIGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIGRlY2VpdmVkIHRoZSBqdXJvcnMgYnkgYnJpbmdpbmcgZm9yd2FyZCBmYWxzZSB0ZXN0aW1vbnnigJR0aGF0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGJyb3RoZXItaW4tbGF3IGFuZCB0aGUgYnJvdGhlcuKAlCwgYW5kIGJlY2F1c2UgdGhleSB3cm9uZ2VkIG1lIHdoaWxlIEkKICAgICAgICAgICAgICAgICAgICB3YXMgemVhbG91c2x5IHBlcmZvcm1pbmcgYSBwdWJsaWMgc2VydmljZSwgZG9pbmcgd2hhdCB0aGUgc3RhdGUgY29tbWFuZGVkIG1lLAogICAgICAgICAgICAgICAgICAgIGFuZCBvYmV5aW5nIHlvdXIgbGF3cyBhbmQgeW91ciBkZWNyZWVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0byB5b3UgdGhhdCBJIHdhcyBub3QgdGhlIG9ubHkgb25lIHRodXMgY29tbWlzc2lvbmVkLCB3aGVuIEkgcmVjZWl2ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBtYWdpc3RyYXRlcyB0aGUgbmFtZSBvZiB0aGlzIG1hbiB3aXRoIG9yZGVycyB0byBleGFjdCBmcm9tIGhpbSB0aGUgZXF1aXBtZW50CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgb3dlZCB0byB0aGUgc3RhdGUsIGJ1dCB0aGF0IG90aGVycyBvZiB0aGUgdHJpZXJhcmNocyB0b29rIHN1Y2ggbWVhc3VyZXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG90aGVycyB3aG9zZSBuYW1lcyB0aGV5IGhhZCByZWNlaXZlZCwgcmVhZCwgcGxlYXNlLCB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHRvIHNldCBmb3J0aCBiZWZvcmUgeW91IHRoZSB0cmVhdG1lbnQgd2l0aCB3aGljaCBJIGhhdmUgbWV0IGF0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaGFuZHMuIEZvciB3aGVuIEkgaGFkIGxvc3QgdG8gdGhlbSB0aGUgc3VpdCBpbiB3aGljaCB0aGUgd2l0bmVzc2VzIGdhdmUKICAgICAgICAgICAgICAgICAgICB0aGUgZmFsc2UgdGVzdGltb255IGZvciB3aGljaCBJIGFtIHN1aW5nIHRoZW0sIGFuZCB0aGUgdGltZSBmb3IgcGF5aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudCB3YXMgYWJvdXQgdG8gZXhwaXJlLCBJIGNhbWUgdXAgdG8gVGhlb3BoZW11cyBhbmQgYmVnZ2VkIGhpbSB0byBvYmxpZ2UKICAgICAgICAgICAgICAgICAgICBtZSBieSB3YWl0aW5nIGEgbGl0dGxlIHdoaWxlLCB0ZWxsaW5nIGhpbSB3aGF0IHdhcyB0cnVlLCB0aGF0IGFsdGhvdWdoIEkgaGFkIGdvdAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHRoZSBtb25leSB3aGljaCBJIHdhcyBnb2luZyB0byBwYXkgaGltLCBhIHRyaWVyYXJjaHkgaGFkIGZhbGxlbiB0byBteQogICAgICAgICAgICAgICAgICAgIGxvdCwgPC90cmFuc2xhdGlvbj4="
translation['47.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaXQgd2FzIG5lY2Vzc2FyeSB0byBkZXNwYXRjaCB0aGUKICAgICAgICAgICAgICAgICAgICB0cmlyZW1lIHdpdGggYWxsIHNwZWVkLCBhbmQgdGhhdCBBbGNpbWFjaHVzLCB0aGUgZ2VuZXJhbCwgaGFkIG9yZGVyZWQgbWUgdG8KICAgICAgICAgICAgICAgICAgICBmdXJuaXNoIHRoaXMgc2hpcCBmb3IgaGlzIG93biB1c2U7IHRoZSBtb25leSwgdGhlcmVmb3JlLCB3aGljaCBJIGhhZCBnb3QKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB0byBwYXkgVGhlb3BoZW11cywgSSBoYWQgdG8gdXNlIHVwIGZvciB0aGlzIHB1cnBvc2UuIFNvIEkgYXNrZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kIHRoZSB0aW1lIG9mIHBheW1lbnQgdW50aWwgSSBzaG91bGQgaGF2ZSBzZW50IG9mZiB0aGUgc2hpcC4gQW5kIGhlCiAgICAgICAgICAgICAgICAgICAgYW5zd2VyZWQgbWUgcXVpdGUgcmVhZGlseSBhbmQgZ3VpbGVsZXNzbHk6IOKAnFRoZXJlIGlzIG5vIG9iamVjdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHRoYXQs4oCdIGhlIHNhaWQsIOKAnGJ1dCwgd2hlbiB5b3Ugc2hhbGwgaGF2ZSBkZXNwYXRjaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXAsIGFsc28gYnJpbmcgdGhlIG1vbmV5IHRvIG1lLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['47.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFRoZW9waGVtdXMgaGFkIGdpdmVuIG1lIHRoaXMgYW5zd2VyIGFuZCBoYWQgZXh0ZW5kZWQgdGhlIHRpbWUgb2YgcGF5bWVudCwKICAgICAgICAgICAgICAgICAgICBhbmQgZXNwZWNpYWxseSBiZWNhdXNlIEkgcmVsaWVkIHVwb24gbXkgaW1wZWFjaG1lbnQgZm9yIGZhbHNlIHRlc3RpbW9ueSBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgdW53aWxsaW5nbmVzcyB0byBkZWxpdmVyIHVwIHRoZSB3b21hbiwgYW5kIHNvIHRob3VnaHQgaGUgd291bGQgdGFrZSBubyB2aW9sZW50CiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMgaW4gbXkgYWZmYWlyLCBJIGRlc3BhdGNoZWQgdGhlIHRyaXJlbWUsIGFuZCBhIGZldyBkYXlzIGxhdGVyLCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBnb3QgdGhlIG1vbmV5IHRvZ2V0aGVyLCBJIGFwcHJvYWNoZWQgaGltIGFuZCBiYWRlIGhpbSB0byBnbyB3aXRoIG1lIHRvIHRoZSBiYW5rCiAgICAgICAgICAgICAgICAgICAgdG8gcmVjZWl2ZSB0aGUgYW1vdW50IG9mIGhpcyBqdWRnZW1lbnQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBpbiB0aGlzLCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb25zCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkaW5nIHRoZXNlIG1hdHRlcnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlb3BoZW11cywKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBpbnN0ZWFkIG9mIGdvaW5nIHdpdGggbWUgdG8gdGhlIGJhbmsgYW5kIHJlY2VpdmluZyB0aGUgYW1vdW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudCwgd2VudCBhbmQgc2VpemVkIGZpZnR5IHNvZnQtd29vbGxlZCBzaGVlcCBvZiBtaW5lIHRoYXQgd2VyZSBncmF6aW5nCiAgICAgICAgICAgICAgICAgICAgYW5kIHdpdGggdGhlbSB0aGUgc2hlcGhlcmQgYW5kIGFsbCB0aGF0IGJlbG9uZ2VkIHRvIHRoZSBmbG9jaywgYW5kIGFsc28gYQogICAgICAgICAgICAgICAgICAgIHNlcnZpbmctYm95IHdobyB3YXMgY2FycnlpbmcgYmFjayBhIGJyb256ZSBwaXRjaGVyIG9mIGdyZWF0IHZhbHVlIHdoaWNoIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBvdXJzLCBidXQgaGFkIGJlZW4gYm9ycm93ZWQuIEFuZCB0aGV5IHdlcmUgbm90IGNvbnRlbnQgd2l0aCBoYXZpbmcgdGhlc2UsIGJ1dAogICAgICAgICAgICAgICAgICAgIHdlbnQgb24gdG8gbXkgZmFybSA8L3RyYW5zbGF0aW9uPg=="
translation['47.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz7vvIhJIGhhdmUgYSBwaWVjZSBvZgogICAgICAgICAgICAgICAgICAgIGxhbmQgbmVhciB0aGUgSGlwcG9kcm9tZSwgYW5kIGhhdmUgbGl2ZWQgdGhlcmUgc2luY2UgbXkgYm95aG9vZO+8iSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgdGhleSBtYWRlIGEgcnVzaCB0byBzZWl6ZSB0aGUgaG91c2Vob2xkIHNsYXZlcywgYnV0IHNpbmNlIHRoZXNlIGVzY2FwZWQKICAgICAgICAgICAgICAgICAgICB0aGVtIGFuZCBnb3Qgb2ZmIG9uZSBoZXJlIGFuZCBhbm90aGVyIHRoZXJlLCB0aGV5IHdlbnQgdG8gdGhlIGhvdXNlLCBhbmQKICAgICAgICAgICAgICAgICAgICBidXJzdGluZyBvcGVuIHRoZSBnYXRlIHdoaWNoIGxlZCBpbnRvIHRoZSBnYXJkZW4g77yIdGhlc2Ugd2VyZSB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIEV2ZXJndXMsIHRoZSBicm90aGVyIG9mIFRoZW9waGVtdXMsIGFuZCBNbmVzaWJ1bHVzLCBoaXMgYnJvdGhlci1pbi1sYXcsIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICB3b24gbm8ganVkZ2VtZW50IGFnYWluc3QgbWUsIGFuZCB3aG8gaGFkIG5vIHJpZ2h0IHRvIHRvdWNoIGFueXRoaW5nIHRoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbWluZe+8ieKAlHRoZXNlIG1lbiwgSSBzYXksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGFuIHVucGFyZG9uYWJsZSBvdXRyYWdlLjwvbm90ZT4gZW50ZXJlZCBpbnRvIHRoZSBwcmVzZW5jZSBvZiBteSB3aWZlIGFuZAogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGFuZCBjYXJyaWVkIG9mZiBhbGwgdGhlIGZ1cm5pdHVyZSB0aGF0IHdhcyBzdGlsbCBsZWZ0IGluIHRoZSBob3VzZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHRob3VnaHQgdG8gZ2V0LCBub3Qgc28gbXVjaCBtZXJlbHksCiAgICAgICAgICAgICAgICAgICAgYnV0IGZhciBtb3JlLCBmb3IgdGhleSBleHBlY3RlZCB0byBmaW5kIHRoZSBzdG9jayBvZiBob3VzZWhvbGQgZnVybml0dXJlIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBmb3JtZXJseSBoYWQ7IGJ1dCBiZWNhdXNlIG9mIG15IHB1YmxpYyBzZXJ2aWNlcyBhbmQgdGF4ZXMgYW5kIG15IGxpYmVyYWxpdHkKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgeW91LCBzb21lIG9mIHRoZSBmdXJuaXR1cmUgaXMgbHlpbmcgaW4gcGF3biwgYW5kIHNvbWUgaGFzIGJlZW4gc29sZC4gQWxsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3YXMgbGVmdCwgaG93ZXZlciwgdGhleSB0b29rIGF3YXkgd2l0aCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gdGhpcywgbWVuIG9mIHRoZSBqdXJ5LCBteSB3aWZlIGhhcHBlbmVkIHRvIGJlIGx1bmNoaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgY2hpbGRyZW4gaW4gdGhlIGNvdXJ0IGFuZCB3aXRoIGhlciB3YXMgYW4gZWxkZXJseSB3b21hbiB3aG8gaGFkIGJlZW4gbXkKICAgICAgICAgICAgICAgICAgICBudXJzZSwgYSBkZXZvdGVkIHNvdWwgYW5kIGEgZmFpdGhmdWwsIHdobyBoYWQgYmVlbiBzZXQgZnJlZSBieSBteSBmYXRoZXIuIEFmdGVyCiAgICAgICAgICAgICAgICAgICAgc2hlIGhhZCBiZWVuIGdpdmVuIGhlciBmcmVlZG9tIHNoZSBsaXZlZCB3aXRoIGhlciBodXNiYW5kLCBidXQgYWZ0ZXIgaGlzIGRlYXRoLAogICAgICAgICAgICAgICAgICAgIHdoZW4gc2hlIGhlcnNlbGYgd2FzIGFuIG9sZCB3b21hbiBhbmQgdGhlcmUgd2FzIG5vYm9keSB0byBjYXJlIGZvciBoZXIsIHNoZSBjYW1lCiAgICAgICAgICAgICAgICAgICAgYmFjayB0byBtZS4gPC90cmFuc2xhdGlvbj4="
translation['47.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5JIGNvdWxkIG5vdCBzdWZmZXIgbXkgb2xkIG51cnNlLAogICAgICAgICAgICAgICAgICAgIG9yIHRoZSBzbGF2ZSB3aG8gYXR0ZW5kZWQgbWUgYXMgYSBib3ksIHRvIGxpdmUgaW4gd2FudDsgYXQgdGhlIHNhbWUgdGltZSBJIHdhcwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRvIHNhaWwgYXMgdHJpZXJhcmNoIGFuZCBpdCB3YXMgbXkgd2lmZSdzIHdpc2ggdGhhdCBJIHNob3VsZCBsZWF2ZSBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBwZXJzb24gdG8gbGl2ZSBpbiB0aGUgaG91c2Ugd2l0aCBoZXIuIFRoZXkgd2VyZSBsdW5jaGluZyBpbiB0aGUgY291cnQgd2hlbiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBidXJzdCBpbiBhbmQgZm91bmQgdGhlbSB0aGVyZSwgYW5kIGJlZ2FuIHRvIHNlaXplIHRoZSBmdXJuaXR1cmUuIFRoZSByZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZlbWFsZSBzbGF2ZXMg77yIdGhleSB3ZXJlIGluIGEgdG93ZXIgcm9vbSB3aGVyZSB0aGV5IGxpdmXvvIksCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IGhlYXJkIHRoZSB0dW11bHQsIGNsb3NlZCB0aGUgZG9vciBsZWFkaW5nIHRvIHRoZSB0b3dlciwgc28gdGhlIG1lbiBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgZ2V0IGluIHRoZXJlOyBidXQgdGhleSBjYXJyaWVkIG9mZiB0aGUgZnVybml0dXJlIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGhvdXNlLAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIG15IHdpZmUgZm9yYmFkZSB0aGVtIHRvIHRvdWNoIGl0LCA8L3RyYW5zbGF0aW9uPg=="
translation['47.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZCB0aGF0IGl0IHdhcyBoZXIgcHJvcGVydHksIG1vcnRnYWdlZCB0byBzZWN1cmUgaGVyIG1hcnJpYWdlIHBvcnRpb247IHNoZQogICAgICAgICAgICAgICAgICAgIHNhaWQgdG8gdGhlbSBhbHNvLCDigJxZb3UgaGF2ZSB0aGUgZmlmdHkgc2hlZXAsIHRoZSBzZXJ2aW5nIGJveSwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHNoZXBoZXJkLCB3aG9zZSB2YWx1ZSBpcyBpbiBleGNlc3Mgb2YgdGhlIGFtb3VudCBvZiB5b3VyIGp1ZGdlbWVudOKAnQogICAgICAgICAgICAgICAgICAgIO+8iGZvciBvbmUgb2YgdGhlIG5laWdoYm9ycyBrbm9ja2VkIGF0IHRoZSBkb29yIGFuZCB0b2xkIGhlcgogICAgICAgICAgICAgICAgICAgIHRoaXPvvIkuIEZ1cnRoZXJtb3JlIHNoZSB0b2xkIHRoZW0gdGhhdCB0aGUgbW9uZXkgd2FzIGx5aW5nIGF0IHRoZSBiYW5rCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZW0sIGZvciBzaGUgaGFkIGhlYXJkIG1lIHNheSBzby4g4oCcQW5kLCBpZiB5b3Ugd2lsbCB3YWl0CiAgICAgICAgICAgICAgICAgICAgaGVyZSzigJ0gc2hlIHNhaWQsIOKAnG9yIGlmIG9uZSBvZiB5b3Ugd2lsbCBnbyBhZnRlciBoaW0sIHlvdQogICAgICAgICAgICAgICAgICAgIHNoYWxsIHRha2UgdGhlIG1vbmV5IGJhY2sgd2l0aCB5b3UgYXQgb25jZTsgYnV0IGxldCB0aGUgZnVybml0dXJlIGFsb25lLCBhbmQgZG8KICAgICAgICAgICAgICAgICAgICBub3QgY2Fycnkgb2ZmIGFueXRoaW5nIHRoYXQgaXMgbWluZeKAlGVzcGVjaWFsbHkgc2luY2UgeW91IGhhdmUgdGhlIGZ1bGwKICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiB5b3VyIGp1ZGdlbWVudC7igJ0gPC90cmFuc2xhdGlvbj4="
translation['47.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCBteSB3aWZlIHNwb2tlIGluIHRoaXMgd2F5LCB0aGV5IG5vdCBvbmx5IGRpZCBub3QgZGVzaXN0LCBidXQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBudXJzZSB0b29rIHRoZSBjdXAgd2hpY2ggd2FzIHNldCBieSBoZXIgYW5kIGZyb20gd2hpY2ggc2hlIGhhZCBiZWVuIGRyaW5raW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCBwdXQgaXQgaW4gaGVyIGJvc29tIHRvIHByZXZlbnQgdGhlc2UgbWVuIGZyb20gdGFraW5nIGl0LCB3aGVuIHNoZSBzYXcgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBpbiB0aGUgaG91c2UsIFRoZW9waGVtdXMgYW5kIEV2ZXJndXMsIHRoaXMgYnJvdGhlciBvZiBoaXMsIG9ic2VydmluZwogICAgICAgICAgICAgICAgICAgIGhlciwgdHJlYXRlZCBoZXIgc28gcm91Z2hseSBpbiB0YWtpbmcgdGhlIGN1cCBmcm9tIGhlciA8L3RyYW5zbGF0aW9uPg=="
translation['47.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IGhlciBhcm1zIGFuZCB3cmlzdHMgd2VyZSBjb3ZlcmVkIHdpdGggYmxvb2QsIGFzIHRoZXkgd3JlbmNoZWQKICAgICAgICAgICAgICAgICAgICBoZXIgYXJtcyBhbmQgcHVsbGVkIGhlciB0aGlzIHdheSBhbmQgdGhhdCBpbiB0YWtpbmcgdGhlIGN1cCBmcm9tIGhlciwgYW5kIHNoZQogICAgICAgICAgICAgICAgICAgIGhhZCBsYWNlcmF0aW9ucyBvbiBoZXIgdGhyb2F0LCB3aGVyZSB0aGV5IHN0cmFuZ2xlZCBoZXIsIGFuZCBoZXIgYnJlYXN0IHdhcwogICAgICAgICAgICAgICAgICAgIGJsYWNrIGFuZCBibHVlLiBBbmQgdGhleSBwdXNoZWQgdGhlaXIgYnJ1dGFsaXR5IHRvIHN1Y2ggZXh0cmVtZXMsIHRoYXQgdGhleSBkaWQKICAgICAgICAgICAgICAgICAgICBub3Qgc3RvcCB0aHJvdHRsaW5nIGFuZCBiZWF0aW5nIHRoZSBvbGQgd29tYW4sIHVudGlsIHRoZXkgaGFkIHRha2VuIHRoZSBjdXAgZnJvbQogICAgICAgICAgICAgICAgICAgIGhlciBib3NvbS4gPC90cmFuc2xhdGlvbj4="
translation['47.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2VydmFudHMgb2YgdGhlIG5laWdoYm9ycywKICAgICAgICAgICAgICAgICAgICBoZWFyaW5nIHRoZSB0dW11bHQgYW5kIHNlZWluZyB0aGF0IG15IGhvdXNlIHdhcyBiZWluZyBwaWxsYWdlZCwgc29tZSBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIGZyb20gdGhlIHJvb2ZzIG9mIHRoZWlyIG93biBob3VzZXMgdG8gdGhlIHBlb3BsZSBwYXNzaW5nIGJ5LCBhbmQgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgd2VudCBpbnRvIHRoZSBvdGhlciBzdHJlZXQgYW5kIHNlZWluZyBIYWdub3BoaWx1cyBwYXNzaW5nIGJ5LCBiYWRlIGhpbSB0byBjb21lLgogICAgICAgICAgICAgICAgICAgIEhhZ25vcGhpbHVzLCB3aGVuIGhlIGNhbWUgdXAsIHN1bW1vbmVkIGJ5IGEgc2VydmFudCBvZiBBbnRoZW1pb24sIHdobyBpcyBhCiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3Igb2YgbWluZSwgZGlkIG5vdCBlbnRlciB0aGUgaG91c2Ug77yIZm9yIGhlIHRob3VnaHQgaGUgb3VnaHQgbm90CiAgICAgICAgICAgICAgICAgICAgdG8gZG8gc28gaW4gdGhlIGFic2VuY2Ugb2YgdGhlIG1hc3Rlcu+8iSwgYnV0LCBzdGFuZGluZyBvbiBBbnRoZW1pb24ncwogICAgICAgICAgICAgICAgICAgIGxhbmQsIHNhdyB0aGUgZnVybml0dXJlIGJlaW5nIGNhcnJpZWQgb2ZmIGFuZCBFdmVyZ3VzIGFuZCBUaGVvcGhlbXVzIGNvbWluZyBvdXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgaG91c2UuIDwvdHJhbnNsYXRpb24+"
translation['47.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm90IG9ubHkgZGlkIHRoZXkgZ28gb2ZmCiAgICAgICAgICAgICAgICAgICAgd2l0aCBteSBmdXJuaXR1cmUsIG1lbiBvZiB0aGUganVyeSwgYnV0IHRoZXkgd2VyZSBldmVuIG9uIHRoZSBwb2ludCBvZiB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBhd2F5IG15IHNvbiwgYXMgdGhvdWdoIGhlIHdlcmUgYSBzbGF2ZSwgdW50aWwgSGVybW9nZW5lcywgb25lIG9mIG15IG5laWdoYm9ycywKICAgICAgICAgICAgICAgICAgICBtZXQgdGhlbSBhbmQgdG9sZCB0aGVtIHRoYXQgaGUgd2FzIG15IHNvbi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoIGluIHRoaXMsIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiwgdGhlbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgbmV3cyBvZiB3aGF0IGhhZCBiZWVuIGRvbmUgd2FzIGJyb3VnaHQgbWUgaW4gUGVpcmFldXMgYnkgdGhlIG5laWdoaG9ycywgSSB3ZW50CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGZhcm0sIGJ1dCBmb3VuZCB0aGF0IHRoZXNlIG1lbiBoYWQgbGVmdDsgSSBzYXcsIGhvd2V2ZXIsIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgaG91c2Vob2xkIGdvb2RzIGhhZCBiZWVuIGNhcnJpZWQgb2ZmIGFuZCBpbiB3aGF0IHBsaWdodCB0aGUgb2xkIHdvbWFuIHdhcy4gTXkKICAgICAgICAgICAgICAgICAgICB3aWZlIHRvbGQgbWUgd2hhdCBoYWQgdGFrZW4gcGxhY2UsIHNvLCBlYXJseSBuZXh0IG1vcm5pbmcsIEkgYXBwcm9hY2hlZAogICAgICAgICAgICAgICAgICAgIFRoZW9waGVtdXMgaW4gdGhlIGNpdHksIGhhdmluZyB3aXRuZXNzZXMgd2l0aCBtZSwgYW5kIGRlbWFuZGVkLCBmaXJzdCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0IHBheW1lbnQgb2YgdGhlIGFtb3VudCBvZiBoaXMganVkZ2VtZW50LCBhbmQgZ28gd2l0aCBtZSB0byB0aGUgYmFuaywgdGhlbiwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHNob3VsZCBwcm92aWRlIGZvciB0aGUgY2FyZSBvZiB0aGUgb2xkIHdvbWFuIHdob20gdGhleSBoYWQgYmVhdGVuLAogICAgICAgICAgICAgICAgICAgIGNhbGxpbmcgaW4gYW55IHBoeXNpY2lhbiB3aG9tIHRoZXkgcGxlYXNlZC4gPC90cmFuc2xhdGlvbj4="
translation['47.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBJIHdhcyBzYXlpbmcgdGhpcyBhbmQgc29sZW1ubHkgcHJvdGVzdGluZyBhZ2FpbnN0IHRoZWlyIGFjdGlvbnMsIHRoZXkKICAgICAgICAgICAgICAgICAgICBhYnVzZWQgbWUgcm91bmRseTsgdGhlbiBUaGVvcGhlbXVzIHdlbnQgd2l0aCBtZSB2ZXJ5IHJlbHVjdGFudGx5IGFuZCBtYWtpbmcgbXVjaAogICAgICAgICAgICAgICAgICAgIGRlbGF5LCBhbGxlZ2luZyB0aGF0IGhlIHRvbyB3aXNoZWQgdG8gdGFrZSB3aXRuZXNzZXMgYWxvbmcgd2l0aCBoaW0KICAgICAgICAgICAgICAgICAgICDvvIh0aGlzIHRhbGsgd2FzIGEgdHJpY2sgb24gaGlzIHBhcnQgdG8gZ2FpbiB0aW1l77yJOyBidXQgdGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBFdmVyZ3VzIHdlbnQgYXQgb25jZSBmcm9tIHRoZSBjaXR5IGluIGNvbXBhbnkgd2l0aCBzb21lIG90aGVycyBvZiBsaWtlCiAgICAgICAgICAgICAgICAgICAgc3RhbXAgdG8gdGhlIGZhcm0uIFRoZSBmdXJuaXR1cmUgd2hpY2ggSSBoYWQgcmVtYWluaW5n4oCUc29tZSBmZXcgcGllY2VzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIGRheSBiZWZvcmUgaGFwcGVuZWQgdG8gYmUgaW4gdGhlIHRvd2VyIGFuZCBub3Qgb3V0c2lkZeKAlGhhZCwKICAgICAgICAgICAgICAgICAgICBhZnRlciBJIGNhbWUgaG9tZSwgbmVjZXNzYXJpbHkgYmVlbiBicm91Z2h0IGRvd24sIGFuZCBFdmVyZ3VzLCBmb3JjaW5nIG9wZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZ2F0ZSB3aGljaCB0aGV5IGhhZCBicm9rZW4gZG93biB0aGUgZGF5IGJlZm9yZSwgYW5kIHdoaWNoIHdhcyBzY2FyY2VseSBmYXN0ZW5lZCwKICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIG9mZiBteSBmdXJuaXR1cmXigJRFdmVyZ3VzLCB0byB3aG9tIEkgb3dlZCBubyBqdWRnZW1lbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGggd2hvbSBJIGhhZCBoYWQgbm8gYnVzaW5lc3MgdHJhbnNhY3Rpb24gd2hhdGV2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['47.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5PbiBteSBtYWtpbmcgZnVsbCBwYXltZW50IHRvIFRoZW9waGVtdXMgdG8gd2hvbSBJIG93ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LCB3aGVuIEkgaGFkIHBhaWQgaGltIGluIHRoZSBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3NlcyBlbGV2ZW4gaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlLCB0aGUgYW1vdW50IG9mIHRoZSBqdWRnZW1lbnQsIG9uZSBodW5kcmVkIGFuZCBlaWdodHktdGhyZWUgZHJhY2htYWUgdHdvCiAgICAgICAgICAgICAgICAgICAgb2JvbHMgZm9yIHRoZSBmaW5lIG9mIG9uZS1zaXh0aCBvZiB0aGF0IHN1bSwgYW5kIHRoaXJ0eSBkcmFjaG1hZSBmb3IgY291cnQgZmVlcwogICAgICAgICAgICAgICAgICAgIO+8iEkgb3dlZCBoaW0gbm90aGluZyBpbiB0aGUgd2F5IG9mIG90aGVyCiAgICAgICAgICAgICAgICAgICAgcGVuYWx0aWVz77yJ4oCUd2hlbiwgSSBzYXksIGhlIGhhZCByZWNlaXZlZCBmcm9tIG1lIGF0IHRoZSBiYW5rCiAgICAgICAgICAgICAgICAgICAgb25lIHRob3VzYW5kIHRocmVlIGh1bmRyZWQgYW5kIHRoaXJ0ZWVuIGRyYWNobWFlIHR3byBvYm9scywgdGhlIHRvdGFsIGFtb3VudCwgb24KICAgICAgICAgICAgICAgICAgICBteSBkZW1hbmRpbmcgdGhlIHJldHVybiBvZiB0aGUgc2hlZXAgYW5kIHRoZSBzbGF2ZXMgYW5kIHRoZSBmdXJuaXR1cmUgb2Ygd2hpY2gKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcm9iYmVkIG1lLCBoZSBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCByZXR1cm4gdGhlbSB0byBtZSB1bmxlc3MgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCByZWxlYXNlIGhpbSBhbmQgaGlzIGFzc29jaWF0ZXMgZnJvbSBhbGwgY2xhaW1zLCBhbmQgdGhlIHdpdG5lc3NlcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1aXQgZm9yIGZhbHNlIHRlc3RpbW9ueS4gPC90cmFuc2xhdGlvbj4="
translation['47.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGdpdmVuIG1lIHRoaXMgcmVwbHksIEkgY2FsbGVkIHVwb24gdGhvc2UgcHJlc2VudCB0byBiZSB3aXRuZXNzZXMgdG8gaGlzIGFuc3dlciwKICAgICAgICAgICAgICAgICAgICBidXQgSSBwYWlkIGhpbSB0aGUganVkZ2VtZW50LCBmb3IgSSBkaWQgbm90IHRoaW5rIGl0IGJlc3QgdG8gaGUgaW4gZGVmYXVsdC4gQXMKICAgICAgICAgICAgICAgICAgICBmb3IgRXZlcmd1cywgSSBkaWQgbm90IGtub3cgdGhhdCBoZSBoYWQgZ29uZSB0byBteSBob3VzZSBvbiB0aGF0IGRheSwgYnV0IGFzCiAgICAgICAgICAgICAgICAgICAgc29vbiBhcyB0aGUganVkZ2VtZW50IGhhZCBiZWVuIHBhaWQsIHdoaWxlIFRoZW9waGVtdXMgc3RpbGwgaGFkIHRoZSBzaGVlcCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmVzIGFuZCB0aGUgZnVybml0dXJlLCBhIHN0b25lLWN1dHRlciwgd2hvIHdhcyB3b3JraW5nIG9uIHRoZSBtb251bWVudAogICAgICAgICAgICAgICAgICAgIG5lYXIgYnksIGNhbWUgdG8gYnJpbmcgbWUgd29yZCB0aGF0IEV2ZXJndXMgaGFkIGNhcnJpZWQgb2ZmIGZyb20gdGhlIGhvdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgbXkgZnVybml0dXJl4oCUdGhhdCwgbmFtZWx5LCB3aGljaCBoYWQgcmVtYWluZWQgdW50b3VjaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGRheSBiZWZvcmUs4oCURXZlcmd1cywgd2l0aCB3aG9tIEkgaGFkIG5vdGhpbmcgd2hhdGV2ZXIgdG8gZG8uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoLCB0aGF0IG9uIHRoZSBkYXkgYmVmb3JlIHRoZXkgaGFkIHRha2VuIGZyb20gbWUKICAgICAgICAgICAgICAgICAgICBnb29kcyBhcyBzZWN1cml0eSwgYW5kIHRoYXQgdGhlIG5leHQgZGF5IHRoZXkgcmVjb3ZlcmVkIHRoZSBtb25leSBmcm9tIG1lCiAgICAgICAgICAgICAgICAgICAg77yIYW5kIHlldCwgaWYgdGhlIG1vbmV5IGhhZCBub3QgYmVlbiBnb3QgdG9nZXRoZXIgYW5kIEkgaGFkIG5vdCBnaXZlbgogICAgICAgICAgICAgICAgICAgIHRoZW0gbm90aWNlLCBob3csIHByYXksIGNvdWxkIHRoZXkgaGF2ZSBzZWN1cmVkIGltbWVkaWF0ZSBwYXltZW50P++8iSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBvbiB0aGF0IHZlcnkgZGF5IHRoZXkgaGFkIGdvbmUgYWdhaW4gaW50byB0aGUgaG91c2UsIHdoaWxlIEkgd2FzIHBheWluZwogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leeKAlHRvIHByb3ZlIGFsbCB0aGlzLCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2luY2UsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCBoZSBwYWlkIG5vIGhlZWQsIHdoZW4gSSBzZXJ2ZWQgbm90aWNlIG9uIGhpbSB0byBjYXJlIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICB3b21hbiB3aG9tIHRoZXkgaGFkIGJlYXRlbiBhbmQgdG8gYnJpbmcgaW4gYSBwaHlzaWNpYW4sIEkgbXlzZWxmIGJyb3VnaHQgaW4gb25lCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aG9tIEkgaGFkIGhhZCBkZWFsaW5ncyBmb3IgbWFueSB5ZWFycywgYW5kIGhlIGNhcmVkIGZvciBoZXIgZHVyaW5nIGhlcgogICAgICAgICAgICAgICAgICAgIGlsbG5lc3MuIEkgc2hvd2VkIGhpbSB0aGUgcGxpZ2h0IHNoZSB3YXMgaW4sIGFuZCBicm91Z2h0IHdpdG5lc3Nlcy4gSGVhcmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHBoeXNpY2lhbiB0aGF0IHRoZSB3b21hbidzIGNvbmRpdGlvbiB3YXMgaG9wZWxlc3MsIEkgYWdhaW4gdG9vayBvdGhlcgogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcywgYW5kIHBvaW50aW5nIG91dCB0aGUgY29uZGl0aW9uIHNoZSB3YXMgaW4gc2VydmVkIG5vdGljZSBvbiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICB0byBjYXJlIGZvciBoZXIuIE9uIHRoZSBzaXh0aCBkYXkgYWZ0ZXIgdGhlc2UgbWVuIGhhZCBjb21lIGludG8gdGhlIGhvdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIG51cnNlIGRpZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGgKICAgICAgICAgICAgICAgICAgICBpbiB0aGlzLCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb25zIGJlYXJpbmcgdXBvbiB0aGVzZQogICAgICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIGhlciBkZWF0aCBJIHdlbnQgdG8gdGhlIEludGVycHJldGVyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWRpdGlvbmFsLCByYXRoZXIgdGhhbiBvZmZpY2lhbCwgYm9keSBvZiBtZW4gZnJvbSB0aGUgb2xkIG5vYmxlIGZhbWlsaWVzLAogICAgICAgICAgICAgICAgICAgICAgICB3aG8gYWxvbmUgY291bGQgaW50ZXJwcmV0IHRoZSB1bndyaXR0ZW4gbGF3cyBnb3Zlcm5pbmcgbWF0dGVycyBvZiBjZXJlbW9uaWFsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCByZWxpZ2lvdXMgb2JzZXJ2YW5jZS48L25vdGU+IGluIG9yZGVyIHRvIGxlYXJuIHdoYXQgSSBvdWdodCB0byBkbyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIsIGFuZCBJIHJlbGF0ZWQgdG8gdGhlbSBhbGwgdGhhdCBoYWQgdGFrZW4gcGxhY2U6IHRoZSBjb21pbmcgb2YgdGhlc2UgbWVuLAogICAgICAgICAgICAgICAgICAgIHRoZSBkZXZvdGlvbiBvZiB0aGUgd29tYW4sIHdoeSBpdCB3YXMgdGhhdCBJIGtlcHQgaGVyIGluIG15IGhvdXNlLCBhbmQgdGhhdCBzaGUKICAgICAgICAgICAgICAgICAgICBoYWQgbWV0IGhlciBlbmQgYmVjYXVzZSBzaGUgd291bGQgbm90IHN1cnJlbmRlciB0aGUgY3VwLiBXaGVuIHRoZSBJbnRlcnByZXRlcnMKICAgICAgICAgICAgICAgICAgICBoYWQgaGVhcmQgYWxsIHRoaXMgZnJvbSBtZSwgdGhleSBhc2tlZCBtZSB3aGV0aGVyIHRoZXkgc2hvdWxkIGludGVycHJldCB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgZm9yIG1lIGFuZCBub3RoaW5nIG1vcmUsIG9yIHNob3VsZCBhbHNvIGFkdmlzZSBtZS4gPC90cmFuc2xhdGlvbj4="
translation['47.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBteSBhbnN3ZXJpbmcgdGhlbSwg4oCcQm90aCzigJ0gdGhleSBzYWlkIHRvIG1lLAogICAgICAgICAgICAgICAgICAgIOKAnFZlcnkgd2VsbCwgd2Ugd2lsbCBpbnRlcnByZXQgZm9yIHlvdSB0aGUgbGF3LCBhbmQgYWxzbyBnaXZlIHlvdQogICAgICAgICAgICAgICAgICAgIGFkdmljZSB0byB5b3VyIHByb2ZpdC4gSW4gdGhlIGZpcnN0IHBsYWNlLCBpZiB0aGVyZSBiZSBhbnlvbmUgcmVsYXRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICB3b21hbiwgbGV0IGhpbSBjYXJyeSBhIHNwZWFyIHdoZW4gc2hlIGlzIGJvcm5lIGZvcnRoIHRvIHRoZSB0b21iIGFuZCBtYWtlIHNvbGVtbgogICAgICAgICAgICAgICAgICAgIHByb2NsYW1hdGlvbiBhdCB0aGUgdG9tYiwgYW5kIHRoZXJlYWZ0ZXIgbGV0IGhpbSBndWFyZCB0aGUgdG9tYiBmb3IgdGhlIHNwYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhyZWUgZGF5cy4gQW5kIHRoaXMgaXMgdGhlIGFkdmljZSB3aGljaCB3ZSBnaXZlIHlvdTogc2luY2UgeW91IHdlcmUgbm90CiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgcHJlc2VudCwgYnV0IG9ubHkgeW91ciB3aWZlIGFuZCB5b3VyIGNoaWxkcmVuLCBhbmQgc2luY2UgeW91IGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICBvdGhlciB3aXRuZXNzZXMsIHdlIGFkdmlzZSB5b3Ugbm90IHRvIG1ha2UgcHJvY2xhbWF0aW9uIGFnYWluc3QgYW55b25lIGJ5IG5hbWUsCiAgICAgICAgICAgICAgICAgICAgYnV0IGluIGdlbmVyYWwgYWdhaW5zdCB0aGUgcGVycGV0cmF0b3JzIGFuZCB0aGUgbXVyZGVyZXJzOyA8L3RyYW5zbGF0aW9uPg=="
translation['47.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYWdhaW4gbm90IHRvIGluc3RpdHV0ZSBzdWl0IGJlZm9yZSB0aGUga2luZy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhlIGtpbmctYXJjaG9uOyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0My40MiIgdmFsaWQ9InllcyI+RGVtLiA0My40MjwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDMuNDMiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzLjQzPC9iaWJsPjwvbm90ZT4gRm9yIHRoYXQgY291cnNlIGlzIG5vdCBvcGVuIHRvIHlvdSB1bmRlciB0aGUgbGF3LAogICAgICAgICAgICAgICAgICAgIHNpbmNlIHRoZSB3b21hbiBpcyBub3QgYSByZWxhdGl2ZSBvZiB5b3VycyBub3IgeWV0IGEgc2VydmFudCwgYWNjb3JkaW5nIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBvd24gc3RhdGVtZW50OyBhbmQgaXQgaXMgdG8gcmVsYXRpdmVzIG9yIHRvIG1hc3RlcnMgdGhhdCB0aGUgbGF3IGFwcG9pbnRzIHRoZQogICAgICAgICAgICAgICAgICAgIGR1dHkgb2YgcHJvc2VjdXRpbmcuIElmLCB0aGVuLCB5b3Ugc2hvdWxkIHRha2UgdGhlIG9hdGggYXQgdGhlIFBhbGxhZGl1bSw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQzLjQyIiB2YWxpZD0ieWVzIj5EZW0uIDQzLjQyPC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0My40MyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDMuNDM8L2JpYmw+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBQYWxsYWRpdW0g77yIcHJvcGVybHkgYSBzdGF0dWUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFsbGFz77yJIHdhcyB0aGUgbmFtZSBvZiB0aGUgcGxhY2Ugd2hlcmUgdGhlIGNvdXJ0IG9mIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPhuG9s8+EzrHOuTwvZm9yZWlnbj4gaGVsZCBpdHMgc2Vzc2lvbnMuIE9uIHRoaXMgY291cnQgc2VlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQzLjU3IiB2YWxpZD0ieWVzIj5EZW0uIDQzLjU3PC9iaWJsPiwgd2l0aCB0aGUgbm90ZS48L25vdGU+IHlvdXJzZWxmCiAgICAgICAgICAgICAgICAgICAgYW5kIHlvdXIgd2lmZSBhbmQgeW91ciBjaGlsZHJlbiwgYW5kIGltcHJlY2F0ZSBjdXJzZXMgdXBvbiB5b3Vyc2VsdmVzIGFuZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgaG91c2UsIHlvdSB3aWxsIGxvc2UgdGhlIGdvb2R3aWxsIG9mIG1hbnksIGFuZCBpZiB5b3VyIG9wcG9uZW50IGlzIGFjcXVpdHRlZCwKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBiZSB0aG91Z2h0IHRvIGhhdmUgY29tbWl0dGVkIHBlcmp1cnksIGFuZCBpZiB5b3UgY29udmljdCBoaW0sIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgaGUgYW4gb2JqZWN0IG9mIG1hbGljZS4gTm8sIGFmdGVyIHlvdSBoYXZlIHBlcmZvcm1lZCB0aGUgcHJvcGVyIHJlbGlnaW91cyByaXRlcwogICAgICAgICAgICAgICAgICAgIHRvIGNsZWFuc2UgeW91cnNlbGYgYW5kIHlvdXIgaG91c2UsIGJlYXIgeW91ciBtaXNmb3J0dW5lIHdpdGggc3VjaCBwYXRpZW5jZSBhcwogICAgICAgICAgICAgICAgICAgIHlvdSBjYW4sIGFuZCwgaWYgeW91IGNob29zZSwgYXZlbmdlIHlvdXJzZWxmIGluIHNvbWUgb3RoZXIgd2F5LuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPhuG9s8+EzrHOuTwvZm9yZWlnbj4gaGVsZCBpdHMgc2Vzc2lvbnMuIE9uIHRoaXMgY291cnQgc2VlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQzLjU3IiB2YWxpZD0ieWVzIj5EZW0uIDQzLjU3PC9iaWJsPiwgd2l0aCB0aGUgbm90ZS48L3RyYW5zbGF0aW9uPg=="
translation['47.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBJIGhhZAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIHRoaXMgYWR2aWNlIGZyb20gdGhlIEludGVycHJldGVycyBhbmQgaGFkIGxvb2tlZCBhdCB0aGUgbGF3cyBvZiBEcmFjbwogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBpbnNjcmliZWQgc2xhYiwgSSBjb25zdWx0ZWQgd2l0aCBteSBmcmllbmRzIGFzIHRvIHdoYXQgY291cnNlIG9mIGFjdGlvbiBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHB1cnN1ZS4gQXMgdGhleSBnYXZlIG1lIHRoZSBzYW1lIGFkdmljZSwgSSBkaWQgd2hhdCB3YXMgbmVjZXNzYXJ5IHRvCiAgICAgICAgICAgICAgICAgICAgcHVyaWZ5IHRoZSBob3VzZSBhbmQgd2hhdCB0aGUgSW50ZXJwcmV0ZXJzIGhhZCBwcmVzY3JpYmVkLCBhbmQgYWJzdGFpbmVkIGZyb20KICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIGFjdGlvbiB3aGljaCB0aGUgbGF3cyBmb3JiYWRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBtZW4gb2YgdGhlIGp1cnksIG9yZGFpbnMgdGhhdCBwcm9zZWN1dGlvbiBzaGFsbCBiZSBieSByZWxhdGl2ZXMgd2l0aGluIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZ3JlZSBvZiBjaGlsZHJlbiBvZiBjb3VzaW5zOyBhbmQgdGhhdCBpbiB0aGUgb2F0aCBpbnF1aXJ5IHNoYWxsIGJlIG1hZGUgYXMgdG8KICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSByZWxhdGlvbnNoaXAgaXMsIGV2ZW4gaWYgdGhlIHZpY3RpbSBiZSBhIHNlcnZhbnQ7IGFuZCBpdCBpcyBmcm9tIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyB0aGF0IGNyaW1pbmFsIGFjdGlvbnMgc2hhbGwgcHJvY2VlZC4gQnV0IHRoZSB3b21hbiB3YXMgaW4gbm8gd2F5IHJlbGF0ZWQKICAgICAgICAgICAgICAgICAgICB0byBtZSBieSBibG9vZCwgc2hlIGhhZCBvbmx5IGJlZW4gbXkgbnVyc2U7IG5vciBhZ2FpbiB3YXMgc2hlIGEgc2VydmFudDsgZm9yIHNoZQogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIHNldCBmcmVlIGJ5IG15IGZhdGhlciwgYW5kIHNoZSBsaXZlZCBpbiBhIHNlcGFyYXRlIGhvdXNlLCBhbmQgaGFkIHRha2VuCiAgICAgICAgICAgICAgICAgICAgYSBodXNiYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRvIHRlbGwgYSBmYWxzZSBzdG9yeSB0byB5b3UKICAgICAgICAgICAgICAgICAgICBhbmQgc3VwcG9ydCBpdCBieSBhbiBvYXRoIHdpdGggaW1wcmVjYXRpb25zIG9uIG15c2VsZiwgbXkgc29uLCBhbmQgbXkgd2lmZSwgd2FzCiAgICAgICAgICAgICAgICAgICAgYSB0aGluZyBJIGRhcmVkIG5vdCBkbywgZXZlbiBpZiBJIGtuZXcgd2VsbCB0aGF0IEkgc2hvdWxkIGNvbnZpY3QgdGhlc2UgbWVuOyBmb3IKICAgICAgICAgICAgICAgICAgICBJIGRvIG5vdCBoYXRlIHRoZW0gYXMgbXVjaCBhcyBJIGxvdmUgbXlzZWxmLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBtYXkgaGVhciB0aGlzIG5vdCBtZXJlbHkgZnJvbSBteSBvd24gbGlwcywgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZQogICAgICAgICAgICAgICAgICAgIGxhdyBpdHNlbGYuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBmYW5jeSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHRoYXQgaXQgaGFzIGJlY29tZSBjbGVhciB0byB5b3Ugb24gbWFueSBncm91bmRzIHRoYXQgdGhlIGRlcG9zaXRpb24gaXMKICAgICAgICAgICAgICAgICAgICBmYWxzZSwgYnV0IHRoYXQgeW91IHNlZSBpdCBtb3N0IHJlYWRpbHkgZnJvbSB0aGUgY29uZHVjdCBvZiB0aGUgbWVuIHRoZW1zZWx2ZXMuCiAgICAgICAgICAgICAgICAgICAgRm9yIHRoZXkgdGhvdWdodCwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0LCBpZiB0aGV5IHRvb2sgYSBsYXJnZSBxdWFudGl0eSBvZiBnb29kcwogICAgICAgICAgICAgICAgICAgIGZyb20gbWUgYXMgc2VjdXJpdHksIEkgc2hvdWxkIGJlIGdsYWQgdG8gcmVsZWFzZSB0aGUgd2l0bmVzc2VzIGZyb20gdGhlIGNoYXJnZQogICAgICAgICAgICAgICAgICAgIG9mIGZhbHNlIHRlc3RpbW9ueSBpbiBvcmRlciB0byBnZXQgYmFjayB0aGUgZ29vZHMuIDwvdHJhbnNsYXRpb24+"
translation['47.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBJIGFza2VkIFRoZW9waGVtdXMgdG8gb2JsaWdlIG1lIGJ5IGV4dGVuZGluZyB0aGUgdGltZSBvZgogICAgICAgICAgICAgICAgICAgIHBheW1lbnQsIGhlIHdhcyBnbGFkIHRvIGNvbXBseSBpbiBvcmRlciB0aGF0IEkgbWlnaHQgYmUgaW4gZGVmYXVsdCwgYW5kIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBjYXJyeSBvZmYgYXMgbWFueSBnb29kcyBhcyBwb3NzaWJsZS4gSXQgd2FzIGZvciB0aGlzIHJlYXNvbiB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgYWNjZWRlZCB0byBteSByZXF1ZXN0IHNvIGd1aWxlbGVzc2x5IGFuZCBzbyBwcm9tcHRseSBpbiBvcmRlciB0byB3aW4gbXkKICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlIGFuZCBrZWVwIG1lIGZyb20gc2VlaW5nIGhpcyBwbG90OyBmb3IgaGUgdGhvdWdodCBpdCB3YXMgbm90IHBvc3NpYmxlCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpbSBpbiBhbnkgb3RoZXIgd2F5IHRvIGdldCB0aGUgd2l0bmVzc2VzIHJlbGVhc2VkIGZyb20gdGhlIGNoYXJnZSBvZiBmYWxzZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSB0aGFuIGJ5IHRyaWNraW5nIG1lLCBjYXRjaGluZyBtZSBpbiBkZWZhdWx0IGFuZCBjYXJyeWluZyBvZmYgYXMgbWFueQogICAgICAgICAgICAgICAgICAgIGdvb2RzIGFzIHBvc3NpYmxlOyBmb3IgaGUgZXhwZWN0ZWQgdG8gZ2V0LCBub3Qgb25seSB3aGF0IHRoZXkgYWN0dWFsbHkgaGF2ZSBvZgogICAgICAgICAgICAgICAgICAgIG1pbmUsIGJ1dCBhIGdyZWF0IGRlYWwgbW9yZS4gPC90cmFuc2xhdGlvbj4="
translation['47.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgd2FpdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgdGhlIHRpbWUsIHRoaW5raW5nIHRoYXQgSSBzaG91bGQgbm90IHF1aWNrbHkgZ2V0IHRoZSBtb25leSB0b2dldGhlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2lzaGluZyB0byBzZWl6ZSB0aGUgZ29vZHMgYXMgc2VjdXJpdHkganVzdCB3aGVuIHRoZSB0cmlhbCBmb3IgZmFsc2UgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgd2FzIGNvbWluZyBvbjsgYnV0IHdoZW4gSSBzZXJ2ZWQgbm90aWNlIG9uIGhpbSB0byBjb21lIGFuZCBjb2xsZWN0IHRoZSBhbW91bnQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVkZ2VtZW50LCBoZSB3ZW50IGFuZCBzZWl6ZWQgbXkgZnVybml0dXJlIGFuZCBzbGF2ZXMgYW5kIHNoZWVwIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmcgcGF5bWVudC4gSSB0aWxsIGEgZmFybSBuZWFyIHRoZSBIaXBwb2Ryb21lLCBzbyB0aGF0IGhlIGRpZCBub3QgaGF2ZQogICAgICAgICAgICAgICAgICAgIGZhciB0byBnby4gPC90cmFuc2xhdGlvbj4="
translation['47.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IHdoYXQgSSBhbSBzYXlpbmcgaXMgdHJ1ZSBsZXQKICAgICAgICAgICAgICAgICAgICB0aGlzIGJlIGEgc3Ryb25nIHByb29mOiBoZSBnb3QgdGhlIGFtb3VudCBvZiB0aGUganVkZ2VtZW50IHRoZSBkYXkgYWZ0ZXIgaGUKICAgICAgICAgICAgICAgICAgICBzZWl6ZWQgdGhlIHNlY3VyaXR5LiBBbmQgeWV0LCBpZiBJIGhhZCBub3QgZ290IHRoZSBtb25leSB0b2dldGhlciwgaG93IGNvdWxkIGhlCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBnb3QgcGF5bWVudCBhdCBvbmNlIGluIGNhc2gsIG9uZSB0aG91c2FuZCB0aHJlZSBodW5kcmVkIGFuZCB0aGlydGVlbgogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIHR3byBvYm9scz8gQW5kIHRoZSBnb29kcyB3aGljaCBoZSBoYWQgc2VpemVkIGFzIHNlY3VyaXR5IGhlIHJlZnVzZWQgdG8KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8gbWUsIGJ1dCB1cCB0byB0aGlzIGRheSBoZSBrZWVwcyB0aGVtLCBhcyB0aG91Z2ggSSB3ZXJlIGluIGRlZmF1bHQuIEJ1dAogICAgICAgICAgICAgICAgICAgIHRvIHByb3ZlIHRoYXQgSSB3YXMgbm90IGluIGRlZmF1bHQsIHJlYWQgbWUgdGhlIGRlcG9zaXRpb24gYW5kIHRoZSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBvcmRhaW5zIHRoYXQgYWxsIGFncmVlbWVudHMgZW50ZXJlZCBpbnRvIGJ5IHRoZSB0d28gcGFydGllcyBzaGFsbCBiZSBiaW5kaW5nOyBJCiAgICAgICAgICAgICAgICAgICAgd2FzLCB0aGVyZWZvcmUsIGFzIHlvdSBzZWUsIG5vIGxvbmdlciBpbiBkZWZhdWx0IHRvIGhpbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGNvbnNlbnRlZCBhbmQgZXh0ZW5kZWQgdGhlIHRpbWUgb2YgcGF5bWVudCBoYXMgYmVlbiBlc3RhYmxpc2hlZCBmb3IgeW91CiAgICAgICAgICAgICAgICAgICAgYnkgd2l0bmVzc2VzLCBhbmQgdGhhdCBJIHdhcyBzZXJ2aW5nIGFzIHRyaWVyYXJjaCBteSBjb2xsZWFndWUgaW4gdGhlIHRyaWVyYXJjaHkKICAgICAgICAgICAgICAgICAgICBoYXMgdGVzdGlmaWVkLCBhbmQgYWxzbyB0aGF0IHRoZSBzaGlwIHdhcyBlcXVpcHBlZCBhcyBmbGFnc2hpcCBmb3IgdGhlIGFkbWlyYWwKICAgICAgICAgICAgICAgICAgICBBbGNpbWFjaHVzLiBTdXJlbHksIHRoZW4sIEkgd2FzIG5vdCBpbiBkZWZhdWx0IHRvIGhpbSB3aGVuIGhlIGhhZCBleHRlbmRlZCB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1lLCBlc3BlY2lhbGx5IHNpbmNlIEkgcGFpZCB0aGUgbW9uZXkgaW4gZnVsbC4gQnV0IHRoZSBncmFzcGluZ25lc3Mgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZGlzcG9zaXRpb24sIHdoZW4gaXQgaXMgYSBxdWVzdGlvbiBvZiBtb3JlIG9yIGxlc3MsIGlzIGRyZWFkZnVsLCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeS4gQW5kIHRoZXkga25ldyB3ZWxsIHRoYXQsIGlmIHRoZXkgc2hvdWxkIGRlbGl2ZXIgdXAgdGhlIHdvbWFuIGZvcgogICAgICAgICAgICAgICAgICAgIGV4YW1pbmF0aW9uLCBpdCB3b3VsZCBiZSBwcm92ZWQgdGhhdCB0aGVpciBjaGFyZ2Ugd2FzIGZhbHNlLCB3aGlsZSwgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgZGVsaXZlciB1cCB0aGUgd29tYW4sIHdob20gdGhlIHdpdG5lc3NlcyBzdGF0ZWQgdGhhdCBUaGVvcGhlbXVzIHdhcwogICAgICAgICAgICAgICAgICAgIHdpbGxpbmcgdG8gZGVsaXZlciB1cCwgdGhleSB3b3VsZCBiZSBjb252aWN0ZWQgb2YgZmFsc2UgdGVzdGltb255LiA8L3RyYW5zbGF0aW9uPg=="
translation['47.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5JIGJlZyBvZiB5b3UsIG1lbiBvZiB0aGUganVyeSwgaWYgYW55IG9uZSBvZiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyB0aGVuIHNlcnZlZCBhcyBqdXJvcnMgaGFwcGVucyB0byBiZSBpbiB0aGUgY291cnQtcm9vbSwgdG8gYWN0IHVwb24gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGVzIGFzIHlvdSBkaWQgdGhlbjsgYW5kLCBpZiB0aGUgZGVwb3NpdGlvbiBzZWVtZWQgdG8geW91IHRvIGJlIHdvcnRoeSBvZgogICAgICAgICAgICAgICAgICAgIGNyZWRlbmNlLCBhbmQgSSBzZWVtZWQgdG8gc2hyaW5rIGZyb20gdGhlIHRlc3Qgd2hpY2ggdGhlIGV4YW1pbmF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdvbWFuIHdvdWxkIGhhdmUgYWZmb3JkZWQsIG5vdywgd2hlbiB0aGV5IGFyZSBwcm92ZWQgdG8gaGF2ZSBnaXZlbiBmYWxzZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBhbmQgZG8gbm90IGRlbGl2ZXIgdXAgdGhlIHdvbWFuLCB0byBjb21lIHRvIG15IGFpZDogYW5kIGlmIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBhbmdyeSB3aXRoIG1lIGJlY2F1c2UgSSB3ZW50IHRvIHRoZSBob3VzZSBvZiBUaGVvcGhlbXVzIHRvIHRha2Ugc2VjdXJpdHksIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYW5ncnkgbm93IHdpdGggdGhlc2UgbWVuIGFsc28gYmVjYXVzZSB0aGV5IHdlbnQgdG8gbXkgaG91c2UuIDwvdHJhbnNsYXRpb24+"
translation['47.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSwgd2hvIHdhcyBmb3JjZWQgdG8gZ28gYnkgdGhlIGxhd3MgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZXMsIHdhcyBjYXJlZnVsIG5vdCB0byBtYWtlIG15IHdheSBpbnRvIHRoZSBwcmVzZW5jZSBvZiB0aGUgZmF0aGVyIG9yCiAgICAgICAgICAgICAgICAgICAgbW90aGVyIG9mIFRoZW9waGVtdXMgb3IgdG8gdGFrZSBhbnl0aGluZyBiZWxvbmdpbmcgdG8gaGlzIGJyb3RoZXI7IGJ1dCBJIHdlbnQgdG8KICAgICAgICAgICAgICAgICAgICB3aGVyZSBUaGVvcGhlbXVzIGxpdmVkIGJ5IGhpbXNlbGYsIGFuZCB3aGVuIEkgZGlkIG5vdCBmaW5kIGhpbSBhdCBob21lLCBJIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBzZWl6ZSBhbnl0aGluZyBhbmQgY2FycnkgaXQgb2ZmLCBidXQgYmFkZSBzb21lb25lIGZldGNoIGhpbSwgYW5kIEkgdG9vayB0aGUKICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSBpbiBoaXMgcHJlc2VuY2UgYW5kIG5vdCBpbiBoaXMgYWJzZW5jZTsgYW5kIHdoZW4gaXQgd2FzIHRha2VuIGZyb20gbWUsCiAgICAgICAgICAgICAgICAgICAgSSBnYXZlIGl0IHVwIGFuZCBiZXRvb2sgbXlzZWxmIHRvIHRoZSBzZW5hdGUsIHRoZSBwcm9wZXIgYXV0aG9yaXR5LCBhbmQgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgaGFkIHByZWZlcnJlZCBteSBpbXBlYWNobWVudCBhbmQgaGFkIGNvbnZpY3RlZCBoaW0gaW4gdGhlIHNlbmF0ZSwgSSB0aG91Z2h0IGl0CiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIG1lcmVseSB0byByZWNvdmVyIHRoZSBzaGlwJ3MgZXF1aXBtZW50LCBhbmQgdG8gbGVhdmUgdGhlIG1hdHRlciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhc3NhdWx0IHRvIGEgcmVmZXJlZSwgYW5kIHRvIG1ha2UgYSBjb25jZXNzaW9uIGluIHRoZSBtYXR0ZXIgb2YgdGhlIGZpbmUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5JLCB0aGVuLCB3YXMgbGVuaWVudCB0b3dhcmQgdGhlc2UgbWVuLAogICAgICAgICAgICAgICAgICAgIHdoZXJlYXMgdGhleSB3ZXJlIHNvIGJydXRhbCBhbmQgcnV0aGxlc3MgdGhhdCB0aGV5IGZvcmNlZCB0aGVtc2VsdmVzIGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2Ugb2YgbXkgd2lmZSBhbmQgY2hpbGRyZW4sIGFsdGhvdWdoIHRoZXkgaGFkIGluIHRoZWlyIHBvc3Nlc3Npb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc2hlZXAgYW5kIHRoZSBzbGF2ZXMsIG9mIGdyZWF0ZXIgdmFsdWUgdGhhbiB0aGVpciBqdWRnZW1lbnQsIGFuZCBhbHRob3VnaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIGdpdmVuIG1lIGFuIGV4dGVuc2lvbiBvZiB0aW1lIGFuZCBJIGhhZCBnaXZlbiB0aGVtIG5vdGljZSB0byBjb21lIGFuZAogICAgICAgICAgICAgICAgICAgIHJlY292ZXIgdGhlaXIganVkZ2VtZW50LCBhcyBoYXMgYmVlbiBwcm92ZWQgdG8geW91IGJ5IHRlc3RpbW9ueS4gVGhleSBjYW1lIHRvIG15CiAgICAgICAgICAgICAgICAgICAgaG91c2UgYW5kIG5vdCBvbmx5IGNhcnJpZWQgb2ZmIHRoZSBmdXJuaXR1cmUsIGJ1dCBiZWF0IHRoZSBudXJzZSwgYW4gb2xkIHdvbWFuLAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgc2FrZSBvZiBhIGN1cDsgYW5kIHRoZXkga2VlcCBwb3NzZXNzaW9uIG9mIGFsbCB0aGVzZSB0aGluZ3MsIGFuZCByZWZ1c2UKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIHRoZW0gdXAsIHRob3VnaCBJIGhhdmUgcGFpZCBpbiBmdWxsIHRoZSBhbW91bnQgb2YgdGhlIGp1ZGdlbWVudCwgb25lCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBhbmQgdGhpcnRlZW4gZHJhY2htYWUgdHdvIG9ib2xzLiA8L3RyYW5zbGF0aW9uPg=="
translation['47.82'] = ""
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyBwZXJoYXBzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5LCBtZW4gb2YgdGhlIGp1cnksIGV2ZW4gZm9yIHRob3NlIHdobyBoYXZlIG5laXRoZXIgcHJhY3RpY2Ugbm9yIHNraWxsCiAgICAgICAgICAgICAgICAgICAgaW4gc3BlYWtpbmcgdG8gY29tZSBpbnRvIGNvdXJ0IHdoZW4gdGhleSBoYXZlIGJlZW4gd3JvbmdlZCBieSBhbnlvbmUsIGVzcGVjaWFsbHkKICAgICAgICAgICAgICAgICAgICBpZiBpdCBiZSBieSB0aG9zZSB3aG8gc2hvdWxkIGJlIHRoZSBsYXN0IHRvIHdyb25nIHRoZW0sIGFzIGhhcyBub3cgY29tZSB0byBwYXNzCiAgICAgICAgICAgICAgICAgICAgd2l0aCBtZS4gRm9yLCBhbHRob3VnaCBJIGhhdmUgYmVlbiB1bndpbGxpbmcsIG1lbiBvZiB0aGUganVyeSwgdG8gZ28gdG8gbGF3IHdpdGgKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMsIHdobyBpcyBhIHJlbGF0aXZlIG9mIG1pbmUgYW5kIHdob3NlIHNpc3RlciBpcyBteSB3aWZlLCBJIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGZvcmNlZCB0byBkbyBzbyBiZWNhdXNlIG9mIHRoZSBtYWduaXR1ZGUgb2YgdGhlIHdyb25ncyB3aGljaCBoZSBoYXMgZG9uZSBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmIEkgd2VyZSBlbnRlcmluZyB1cG9uIHRoaXMgY291cnNlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgd2l0aG91dCBoYXZpbmcgYmVlbiB3cm9uZ2VkLCBvciB3ZXJlIHRydW1waW5nIHVwIGEgZmFsc2UgY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBPbHltcGlvZG9ydXMsIG9yIGlmIEkgd2VyZSB1bndpbGxpbmcgdG8gcmVmZXIgdGhlIG1hdHRlciB0byBtZW4gd2hvIGFyZQogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYm90aCBvZiBPbHltcGlvZG9ydXMgYW5kIG15c2VsZiwgb3IgaWYgSSB3ZXJlIHJlZnVzaW5nIHRvIGFkb3B0IGFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIGZhaXIgY291cnNlIG9mIGFjdGlvbiwgYmUgYXNzdXJlZCB0aGF0IEkgc2hvdWxkIGJlIHRob3JvdWdobHkgYXNoYW1lZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHRoaW5rIG15c2VsZiBhIHdvcnRobGVzcyBzb3J0IG9mIGZlbGxvdzogYnV0IGFzIGl0IGlzLCB0aGUgbG9zcyBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgT2x5bXBpb2RvcnVzIGlzIG5vIHNtYWxsIG9uZTsgSSBoYXZlIG5vdCByZWZ1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0IGFueSByZWZlcmVlLCBhbmQgSSBzd2VhciBieSBaZXVzIHRoZSBTdXByZW1lIHRoYXQgaXQgaXMgbm90IHdpbGxpbmdseSwKICAgICAgICAgICAgICAgICAgICBidXQgd2l0aCB0aGUgdXRtb3N0IHBvc3NpYmxlIHJlbHVjdGFuY2UsIHRoYXQgSSBoYXZlIGJlZW4gZm9yY2VkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCB0byBicmluZyB0aGlzIHN1aXQuIDwvdHJhbnNsYXRpb24+"
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIG9mIHlvdSwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIG1lbiBvZiB0aGUganVyeSwgd2hlbiB5b3UgaGF2ZSBoZWFyZCB1cyBib3RoIGFuZCBoYXZlIHNpZnRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgZm9yIHlvdXJzZWx2ZXMsIHByZWZlcmFibHkgdG8gZmluZCBzb21lIHNldHRsZW1lbnQgb2Ygb3VyIHF1YXJyZWwgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzbWlzcyB1cywgYW5kIHRodXMgYmVjb21lIGJlbmVmYWN0b3JzIG9mIHVzIGJvdGg7IGJ1dCBpZiB5b3UgY2Fubm90IHN1Y2NlZWQgaW4KICAgICAgICAgICAgICAgICAgICB0aGlzLCBvZiB0aGUgY291cnNlcyByZW1haW5pbmcgb3BlbiB0byB5b3UsIEkgYmVnIHlvdSB0byBnaXZlIHlvdXIgdm90ZSB0byBoaW0KICAgICAgICAgICAgICAgICAgICB3aG9zZSBwbGVhIGlzIGp1c3QuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZpcnN0LCB0aGVuLCB0aGUgY2xlcmsgc2hhbGwKICAgICAgICAgICAgICAgICAgICByZWFkIHRvIHlvdSB0aGUgZGVwb3NpdGlvbnMgd2hpY2ggc2hvdyB0aGF0IGl0IGlzIG5vdCBJIHdobyBhbSByZXNwb25zaWJsZSBmb3IKICAgICAgICAgICAgICAgICAgICBicmluZ2luZyB0aGUgY2FzZSBpbnRvIGNvdXJ0LCBidXQgdGhlIGRlZmVuZGFudCBoaW1zZWxmLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0IEkgb2ZmZXJlZAogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUgYW5kIGZpdHRpbmcgdGVybXMgdG8gT2x5bXBpb2RvcnVzIGhhcyBiZWVuIHRlc3RpZmllZCB0byB5b3UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCBieSB0aG9zZSB3aG8gd2VyZSBwcmVzZW50LiBTaW5jZSwgaG93ZXZlciwgaGUgZG9lcyBub3QgY2hvb3NlIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdGhhdCBpcyByaWdodCwgaXQgaXMgbmVjZXNzYXJ5IGZvciBtZSB0byBzZXQgZm9ydGggYmVmb3JlIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIGluIHdoaWNoIEkgaGF2ZSBiZWVuIHdyb25nZWQgYnkgaGltLiBCdXQgdGhlIHN0b3J5IGlzIGEgc2hvcnQgb25lLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSB3YXMgYQogICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gQ29tb24gb2YgSGFsYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXJlIHdlcmUgdHdvIGRlbWVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgbmFtZSwgb25lIG9uIHRoZSBlYXN0IGNvYXN0IG9mIEF0dGljYSBhbmQgdGhlIG90aGVyIG9uIHRoZSBTYXJvbmljCiAgICAgICAgICAgICAgICAgICAgICAgIEd1bGYuIFRoZSBmb3JtZXIgYmVsb25nZWQgdG8gdGhlIHRyaWJlIEFlZ2VpcywgdGhlIGxhdHRlciB0byB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQ2Vjcm9waXMuIFRoZXJlIGlzIG5vdGhpbmcgdG8gc2hvdyB3aGljaCBvbmUgaXMgaGVyZSByZWZlcnJlZCB0by48L25vdGU+IG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSwganVyeSwgYSByZWxhdGl2ZSBvZiBvdXJzLiBUaGlzIENvbW9uIGRpZWQgd2l0aG91dCBpc3N1ZSBhZnRlciBhIHZlcnkKICAgICAgICAgICAgICAgICAgICBzaG9ydCBpbGxuZXNzOyBoZSBoYWQgbGl2ZWQsIGhvd2V2ZXIsIG1hbnkgeWVhcnMsIGFuZCB3YXMgYW4gb2xkIG1hbiB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgZGllZC4gV2hlbiBJIHNhdyB0aGF0IGhlIGNvdWxkIG5vdCBwb3NzaWJseSByZWNvdmVyLCBJIHNlbnQgZm9yIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMgdGhhdCBoZSBtaWdodCBiZSB3aXRoIHVzLCBhbmQgam9pbiB3aXRoIHVzIGluIHRha2luZyBhbGwgcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXMuIEFuZCBPbHltcGlvZG9ydXMsIHdoZW4gaGUgaGFkIGNvbWUgdG8gbWUgYW5kIHRvIG15IHdpZmUsIHdobyBpcyBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gc2lzdGVyLCBhaWRlZCB1cyBpbiBtYWtpbmcgYWxsIHRoZSBhcnJhbmdlbWVudHMuIDwvdHJhbnNsYXRpb24+"
translation['48.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHdlIHdlcmUgdGh1cyBvY2N1cGllZCwgdGhpcyBmZWxsb3cgT2x5bXBpb2RvcnVzIHN1ZGRlbmx5IGZsdW5nCiAgICAgICAgICAgICAgICAgICAgYXQgbWUgdGhlIHN0YXRlbWVudCB0aGF0IGhpcyBtb3RoZXIgYWxzbyB3YXMgcmVsYXRlZCB0byBDb21vbiwgdGhlIGRlYWQgbWFuLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBmYWlyIHRoYXQgaGUsIHRvbywgc2hvdWxkIHJlY2VpdmUgaGlzIHNoYXJlIG9mIGFsbCB0aGUgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICB3aGljaCBDb21vbiBsZWZ0LiBJIGZvciBteSBwYXJ0LCBtZW4gb2YgdGhlIGp1cnksIGFzIEkga25ldyB0aGF0IGhlIHdhcyBseWluZwogICAgICAgICAgICAgICAgICAgIGFuZCB0cnlpbmcgdG8gcHV0IGEgYm9sZCBmYWNlIG9uIGl0LCBhbmQgdGhhdCB0aGVyZSB3YXMgbm9ib2R5IGVsc2UgbmVhcmVyIG9mCiAgICAgICAgICAgICAgICAgICAga2luIHRvIENvbW9uIHRoYW4gbXlzZWxmLCBiZWNhbWUgYXQgZmlyc3QgZXhjZWVkaW5nbHkgd3JvdGggYW5kIGluZGlnbmFudCBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzaGFtZWxlc3NuZXNzIG9mIGhpcyBjbGFpbTsgcHJlc2VudGx5LCBob3dldmVyLCBJIHJlZmxlY3RlZCB0aGF0IGl0IHdhcyBub3QgYQogICAgICAgICAgICAgICAgICAgIHByb3BlciB0aW1lIGZvciBhbmdlciwgYW5kIEkgbWFkZSBhbnN3ZXIgdG8gaGltLCB0aGF0IGZvciB0aGUgcHJlc2VudCBpdCB3YXMgb3VyCiAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBidXJ5IHRoZSBkZWFkIG1hbiBhbmQgZG8gYWxsIGVsc2UgdGhhdCBjdXN0b20gY2FsbGVkIGZvciwgYW5kIHRoYXQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB3ZSBzaG91bGQgaGF2ZSBkaXNjaGFyZ2VkIGFsbCB0aGVzZSBkdXRpZXMgd2Ugd291bGQgdGFsayB3aXRoIG9uZSBhbm90aGVyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBPbHltcGlvZG9ydXMsIG1lbiBvZiB0aGUganVyeSwgYXNzZW50ZWQKICAgICAgICAgICAgICAgICAgICB0byB0aGlzLCBhbmQgc2FpZCB0aGF0IEkgd2FzIHF1aXRlIHJpZ2h0LiBTbyB3aGVuIHdlIGhhZCBmaW5pc2hlZCBhbGwgdGhpcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFkIGRvbmUgYWxsIHRoYXQgY3VzdG9tIHJlcXVpcmVkLCB3ZSBjYWxsZWQgaW4gYWxsIG91ciByZWxhdGl2ZXMgYW5kIHF1aWV0bHkKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzZWQgd2l0aCBvbmUgYW5vdGhlciB0aGUgY2xhaW1zIHdoaWNoIHRoaXMgZmVsbG93IGFkdmFuY2VkLiBOb3csIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB3aHkgc2hvdWxkIEkgd2VhcnkgeW91IG9yIG15c2VsZiBieSByZWxhdGluZyB0aGUgdmFyaW91cyBkaWZmZXJlbmNlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFyb3NlIGJldHdlZW4gdXMgYXMgd2UgdGFsa2VkIHRoZXNlIG1hdHRlcnMgb3Zlcj8gPC90cmFuc2xhdGlvbj4="
translation['48.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25jbHVzaW9uIHRvIHdoaWNoIHdlIGNhbWUsIGhvd2V2ZXIsIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IGZvciB5b3UgdG8gaGVhci4gSSBteXNlbGYgcmVhY2hlZCB0aGUgZGVjaXNpb24gcmVnYXJkaW5nIGhpcyBjbGFpbXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhlIHJlZ2FyZGluZyBtaW5lLCB0aGF0IHdlIHNob3VsZCBlYWNoIHRha2UgaGFsZiBvZiB3aGF0IENvbW9uIGxlZnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlIHNob3VsZCBiZSBubyBmdXJ0aGVyIHVucGxlYXNhbnRuZXNzIGJldHdlZW4gdXMuIEkgY2hvc2UsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB2b2x1bnRhcmlseSB0byBzaGFyZSB0aGUgaW5oZXJpdGFuY2Ugd2l0aCBoaW0gcmF0aGVyIHRoYW4gY29tZSBpbnRvIGNvdXJ0IGFuZAogICAgICAgICAgICAgICAgICAgIHJpc2sgYSB0cmlhbCB3aXRoIHRoZSBmZWxsb3csIHdobyBpcyBhIHJlbGF0aXZlLCBhbmQgdG8gc2F5IHVucGxlYXNhbnQgdGhpbmdzIG9mCiAgICAgICAgICAgICAgICAgICAgb25lIHdobyBpcyBhIGJyb3RoZXIgb2YgbXkgd2lmZSBhbmQgdGhlIHVuY2xlIG9mIG15IGNoaWxkcmVuLCBhbmQgaGVhcgogICAgICAgICAgICAgICAgICAgIGRpc2FncmVlYWJsZSB0aGluZ3MgZnJvbSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['48.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoaW5raW5nIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRoaW5ncyBJIGNhbWUgdG8gdGVybXMgd2l0aCBoaW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIHRoaXMKICAgICAgICAgICAgICAgICAgICB3ZSBkcmV3IHVwIHdyaXR0ZW4gYXJ0aWNsZXMgb2YgYWdyZWVtZW50IHJlZ2FyZGluZyBhbGwgbWF0dGVycyBpbnZvbHZlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgc3dvcmUgc29sZW1uIG9hdGhzIHRvIG9uZSBhbm90aGVyIHRoYXQgd2Ugd291bGQgaW4gdmVyeSB0cnV0aCBkaXZpZGUgZmFpcmx5IGFuZAogICAgICAgICAgICAgICAgICAgIGhvbmVzdGx5IGFsbCB0aGUgdmlzaWJsZSBwcm9wZXJ0eSB0aGF0IHRoZXJlIHdhcywgYW5kIHRoYXQgbmVpdGhlciBvZiB1cyB3b3VsZAogICAgICAgICAgICAgICAgICAgIGluIGFueSByZXNwZWN0IHRha2UgYWR2YW50YWdlIG9mIHRoZSBvdGhlciBpbiByZWdhcmQgdG8gQ29tb24ncyBlc3RhdGU7IHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICB3b3VsZCBtYWtlIGpvaW50IGlucXVpcnkgZm9yIHRoZSByZXN0LCBhbmQgd291bGQgYWN0IGluIGNvbW1vbiBpbiBmb3JtaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcGxhbnMgc2hvdWxkIGZyb20gdGltZSB0byB0aW1lIGJlIG5lY2Vzc2FyeS4gPC90cmFuc2xhdGlvbj4="
translation['48.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2Ugc3VzcGVjdGVkLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgb3RoZXJzIGJlc2lkZXMgb3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgd291bGQgY29tZSB0byBsYXkgY2xhaW0gdG8gdGhlIGVzdGF0ZSBvZiBDb21vbi4gRm9yIGluc3RhbmNlLCB0aGVyZSB3YXMgbXkKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCBvbiBteSBmYXRoZXIncyBidXQgbm90IG15IG1vdGhlcidzIHNpZGUsIHdobyB3YXMgb3V0IG9mIHRoZSBjb3VudHJ5OwogICAgICAgICAgICAgICAgICAgIGFuZCwgaWYgYW55b25lIGVsc2Ugd2lzaGVkIHRvIHB1dCBpbiBhIGNsYWltLCB0aGVyZSB3YXMgbm8gd2F5IGZvciB1cyB0byBwcmV2ZW50CiAgICAgICAgICAgICAgICAgICAgaXQ7IGZvciB0aGUgbGF3cyBvcmRhaW4gdGhhdCBhbnlvbmUgd2hvIGNob29zZXMgbWF5IHB1dCBpbiBhIGNsYWltLiBGb3Jlc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZXNlIGNvbnRpbmdlbmNpZXMsIHdlIGRyZXcgdXAgb3VyIGFydGljbGVzIG9mIGFncmVlbWVudCBhbmQgc3dvcmUgb3VyCiAgICAgICAgICAgICAgICAgICAgb2F0aHMgaW4gb3JkZXIgdGhhdCBuZWl0aGVyIG9mIHVzIG1pZ2h0IGhhdmUgdGhlIG9wcG9ydHVuaXR5IG9mIGRvaW5nIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgaW5kZXBlbmRlbnRseSwgd2hldGhlciBoZSBzaG91bGQgd2lzaCB0byBkbyBzbyBvciBub3QsIGJ1dCB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGRvIGV2ZXJ5dGhpbmcgYnkgbXV0dWFsIGFncmVlbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['48.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB3ZSBjYWxsZWQgdG8gd2l0bmVzcyB0aGlzIGFncmVlbWVudCwgZmlyc3QgdGhlIGdvZHMgaW4gd2hvc2UgbmFtZSB3ZSBleGNoYW5nZWQKICAgICAgICAgICAgICAgICAgICBvdXIgb2F0aHMsIGFuZCBvdXIgb3duIHJlbGF0aXZlcywgYW5kIG1vcmVvdmVyIEFuZHJvY2xlaWRlcyBvZiBBY2hhcm5hZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNoYXJuYWUgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgT2VuZcOvcy48L25vdGU+IHdpdGggd2hvbSB3ZSBkZXBvc2l0ZWQgdGhlIGFydGljbGVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpc2ggbm93LCBtZW4gb2YgdGhlIGp1cnksIHRvIHJlYWQgdGhlIGxhdyBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCB3aGljaCB3ZSBkcmV3IHVwIG91ciBhZ3JlZW1lbnQsIGFuZCBkZXBvc2l0aW9uIG9mIHRoZSBwZXJzb24gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIHRoZSBhcnRpY2xlcyBpbiBoaXMga2VlcGluZy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgcmVhZCB0aGUgZGVwb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbmRyb2NsZWlkZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB3ZSBoYWQKICAgICAgICAgICAgICAgICAgICBleGNoYW5nZWQgb2F0aHMsIGFuZCB0aGUgYXJ0aWNsZXMgaGFkIGJlZW4gZGVwb3NpdGVkIHdpdGggQW5kcm9jbGVpZGVzLCBJCiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZCB0aGUgcHJvcGVydHkgaW50byB0d28gc2hhcmVzLCBtZW4gb2YgdGhlIGp1cnkuIE9uZSBzaGFyZSBjb25zaXN0ZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgaG91c2UgaW4gd2hpY2ggQ29tb24gaGltc2VsZiBoYWQgbGl2ZWQsIGFuZCB0aGUgc2xhdmVzIGVuZ2FnZWQgaW4gd2VhdmluZwogICAgICAgICAgICAgICAgICAgIHNhY2tjbG90aCwgYW5kIHRoZSBvdGhlciBvZiBhbm90aGVyIGhvdXNlIGFuZCB0aGUgc2xhdmVzIGVuZ2FnZWQgaW4gZ3JpbmRpbmcKICAgICAgICAgICAgICAgICAgICBjb2xvcnMuIFdoYXRldmVyIHJlYWR5IG1vbmV5IENvbW9uIGxlZnQgaW4gdGhlIGJhbmsgb2YgSGVyYWNsZWlkZXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBuZWFybHkgYWxsIHNwZW50IG9uIGhpcyBidXJpYWwgYW5kIHRoZSBvdGhlciBmdW5lcmFsIHJpdGVzLCBhbmQgb24gdGhlIGJ1aWxkaW5nCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIHRvbWIuIDwvdHJhbnNsYXRpb24+"
translation['48.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXIgSSBoYWQgZGl2aWRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBpbnRvIHRoZXNlIHR3byBzaGFyZXMsIEkgZ2F2ZSBPbHltcGlvZG9ydXMgaGlzIGNob2ljZSB0byB0YWtlIHdoaWNoZXZlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0d28gc2hhcmVzIGhlIHBsZWFzZWQ7IGFuZCBoZSBjaG9zZSB0aGUgY29sb3ItZ3JpbmRlcnMgYW5kIHRoZSBzbWFsbAogICAgICAgICAgICAgICAgICAgIGhvdXNlLCB3aGlsZSBJIHRvb2sgdGhlIHdlYXZlcnMgYW5kIHRoZSBkd2VsbGluZy1ob3VzZS4gPC90cmFuc2xhdGlvbj4="
translation['48.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHdoYXQgZWFjaCBvZiB1cyBoYWQuIE5vdyBpbiB0aGUgc2hhcmUgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBPbHltcGlvZG9ydXMgdGhlcmUgd2FzIGEgbWFuLCBvbmUgb2YgdGhlIGNvbG9yLWdyaW5kZXJzLCB3aG9tIENvbW9uIHVzZWQKICAgICAgICAgICAgICAgICAgICB0byByZWdhcmQgYXMgbW9zdCBmYWl0aGZ1bCB0byBoaW1zZWxmOyB0aGUgbWFuJ3MgbmFtZSB3YXMgTW9zY2hpb24uIFRoaXMgc2xhdmUKICAgICAgICAgICAgICAgICAgICBoYWQgYSBwcmV0dHkgZ29vZCBrbm93bGVkZ2Ugb2YgYWxsIENvbW9uJ3Mgb3RoZXIgYWZmYWlycywgYW5kIGluIHBhcnRpY3VsYXIga25ldwogICAgICAgICAgICAgICAgICAgIHdoZXJlIHRoZSBtb25leSB3YXMgd2hpY2ggQ29tb24ga2VwdCBpbiB0aGUgaG91c2U7IDwvdHJhbnNsYXRpb24+"
translation['48.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgQ29tb24sIHdobyB3YXMgb2xkaXNoIGFuZCB3aG8gaGFkIGNvbmZpZGVuY2UgaW4gaGltLCB3YXMgdW5hd2FyZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyBzbGF2ZSBNb3NjaGlvbiB3YXMgc3RlYWxpbmcgaGlzIG1vbmV5LiBIZSBmaXJzdCBzdG9sZSBmcm9tIGhpbSBvbmUKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hZSwgd2hpY2ggc3VtIHdhcyBrZXB0IHNlcGFyYXRlIGZyb20gdGhlIHJlc3Qgb2YgdGhlIG1vbmV5LCBhbmQKICAgICAgICAgICAgICAgICAgICBhZnRlcndhcmRzIHNldmVudHkgbWluYWUgbW9yZS4gSGUgd2FzIGRvaW5nIHRoaXMgd2l0aG91dCBDb21vbidzIHN1c3BlY3RpbmcgaXQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBmZWxsb3cga2VwdCBhbGwgdGhpcyBtb25leSBpbiBoaXMgb3duIHBvc3Nlc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['48.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U29vbiBhZnRlciB3ZSBoYWQKICAgICAgICAgICAgICAgICAgICBkaXZpZGVkIHRoZSBzaGFyZXMgYmV0d2VlbiB1cywgbWVuIG9mIHRoZSBqdXJ5LCB3ZSBiZWNhbWUgc3VzcGljaW91cywgYW5kIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgb3V0IHNvbWV0aGluZyBhYm91dCB0aGlzIG1vbmV5OyBhbmQgYXMgYSByZXN1bHQgb2YgdGhpcyBzdXNwaWNpb24gT2x5bXBpb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgaGVyZSBhbmQgSSBkZWNpZGVkIHRvIHB1dCB0aGUgbWFuIHRvIHRoZSB0b3J0dXJlLiBBbmQgdGhlIGZlbGxvdywgbWVuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIGJlZm9yZSBoZSB3YXMgcHV0IHRvIHRoZSB0b3J0dXJlLCB2b2x1bnRhcmlseSBjb25mZXNzZWQgdGhhdCBoZSBoYWQgc3RvbGVuCiAgICAgICAgICAgICAgICAgICAgYSB0aG91c2FuZCBkcmFjaG1hZSBmcm9tIENvbW9uLCBhbmQgc2FpZCB0aGF0IGhlIHN0aWxsIGhhZCBpbiBoaXMgcXVhcnRlcnMgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5IHdoaWNoIGhhZCBub3QgYmVlbiBzcGVudDsgYnV0IG9mIHRoZSBsYXJnZXIgc3VtIGhlIGRpZCBub3Qgc2F5IGEgd29yZAogICAgICAgICAgICAgICAgICAgIGF0IHRoYXQgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['48.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBoZSBwYWlkIGJhY2sgYWJvdXQgc2l4CiAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBkcmFjaG1hZS4gQW5kIG9mIHRoaXMgc3VtIHdoaWNoIHRoZSBtYW4gcGFpZCBiYWNrIHdlIG1hZGUgYSBqdXN0IGFuZAogICAgICAgICAgICAgICAgICAgIGZhaXIgZGl2aXNpb24gaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBvYXRocyB3aGljaCB3ZSBoYWQgc3dvcm4gYW5kIHRoZSBhZ3JlZW1lbnQKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0ZWQgd2l0aCBBbmRyb2NsZWlkZXMsIEkgdGFraW5nIG9uZSBoYWxmIGFuZCB0aGUgZGVmZW5kYW50IE9seW1waW9kb3J1cwogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['48.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90CiAgICAgICAgICAgICAgICAgICAgbG9uZyBhZnRlciB0aGlzLCBhcyBhIHJlc3VsdCBvZiB0aGUgc3VzcGljaW9uIGFnYWluc3QgdGhlIHNsYXZlIGluIHJlZ2FyZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSwgdGhlIGRlZmVuZGFudCBoYWQgdGhlIG1hbiBib3VuZCBhbmQgYWdhaW4gcHV0IHRvIHRoZSB0b3J0dXJlLiBIZSBkaWQgdGhpcwogICAgICAgICAgICAgICAgICAgIGluZGVwZW5kZW50bHkgYnkgaGltc2VsZiB3aXRob3V0IGNhbGxpbmcgbWUgaW4sIGFsdGhvdWdoIGhlIGhhZCBzd29ybiB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgYWxsIGlucXVpcmllcyBhbmQgZG8gZXZlcnl0aGluZyBpbiBjb25jZXJ0IHdpdGggbWUuIEFuZCB0aGUgZmVsbG93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgd2hlbiByYWNrZWQgYnkgdGhlIHRvcnR1cmUgbWFkZSBmdXJ0aGVyIGNvbmZlc3Npb24gdGhhdCBoZSBoYWQgc3RvbGVuIGZyb20KICAgICAgICAgICAgICAgICAgICBDb21vbiB0aGUgc2V2ZW50eSBtaW5hZTsgYW5kIGhlIHJlc3RvcmVkIHRoaXMgZW50aXJlIHN1bSB0byB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgT2x5bXBpb2RvcnVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['48.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5JLCBvbiBteSBwYXJ0LCBtZW4gb2YgdGhlIGp1cnksCiAgICAgICAgICAgICAgICAgICAgd2hlbiBJIGxlYXJuZWQgdGhhdCB0aGUgbWFuIGhhZCBiZWVuIHRvcnR1cmVkLCBhbmQgdGhhdCBoZSBoYWQgcmVzdG9yZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXksIHN1cHBvc2VkIHRoYXQgT2x5bXBpb2RvcnVzIHdvdWxkIHBheSBtZSBoYWxmIHRoZSBhbW91bnQsIGp1c3QgYXMgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHBhaWQgbWUgaGFsZiBvZiB0aGUgb25lIHRob3VzYW5kIGRyYWNobWFlLiBBdCBmaXJzdCBJIGRpZCBub3QgcHJlc3MgaGltLAogICAgICAgICAgICAgICAgICAgIHRoaW5raW5nIHRoYXQgaGUgd291bGQgcmVjb2duaXplIGhpcyBvYmxpZ2F0aW9uIGFuZCBhcnJhbmdlIG1hdHRlcnMgZm9yIG15CiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QgYW5kIGhpcyBvd24sIHNvIHRoYXQgZWFjaCBvZiB1cyBzaG91bGQgaGF2ZSB3aGF0IHdhcyBmYWlyIGluIGFjY29yZGFuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIG91ciBvYXRocyBhbmQgb3VyIG11dHVhbCBhZ3JlZW1lbnQgdG8gc2hhcmUgZXF1YWxseSBpbiBhbGwgdGhhdCBDb21vbiBsZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgc2luY2UgaGUgZGVsYXllZCwgYW5kIGRpZCBub3RoaW5nLCBJCiAgICAgICAgICAgICAgICAgICAgaGFkIGEgdGFsayB3aXRoIHRoaXMgbWFuIE9seW1waW9kb3J1cywgYW5kIGRlbWFuZGVkIHRoYXQgSSByZWNlaXZlIG15IHNoYXJlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5LiBCdXQgT2x5bXBpb2RvcnVzIGhlcmUga2VwdCBmaW5kaW5nIG9uZSBleGN1c2UgYWZ0ZXIgYW5vdGhlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgcHV0dGluZyBtZSBvZmYuIE1vcmVvdmVyLCBhdCB0aGlzIHZlcnkgdGltZSBzb21lIG90aGVyIHBlb3BsZSBmaWxlZCBjbGFpbXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgZXN0YXRlIG9mIENvbW9uLCBhbmQgQ2FsbGlwcHVzLCBteSBicm90aGVyIG9uIG15IGZhdGhlcidzIHNpZGUsIHJldHVybmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBhYnJvYWQ7IGFuZCBoZSB0b28gZmlsZWQgYSBjbGFpbSBmb3IgaGFsZiB0aGUgZXN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['48.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBPbHltcGlvZG9ydXMgZm91bmQgaW4gdGhpcyBhbm90aGVyIGV4Y3VzZSBmb3Igbm90CiAgICAgICAgICAgICAgICAgICAgcGF5aW5nIG1lIHRoZSBtb25leSwgc2luY2UgdGhlcmUgd2VyZSBtYW55IHdobyB3ZXJlIGxheWluZyBjbGFpbSB0byB0aGUgZXN0YXRlOwogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBzYWlkIHRoYXQgSSBtdXN0IHdhaXQgdW50aWwgdGhlIHN1aXRzIHdlcmUgc2V0dGxlZC4gQW5kIEkgaGFkIHRvIGNvbnNlbnQKICAgICAgICAgICAgICAgICAgICB0byB0aGlzLCBhbmQgSSBkaWQgY29uc2VudC4gPC90cmFuc2xhdGlvbj4="
translation['48.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcyB0aGUgZGVmZW5kYW50IE9seW1waW9kb3J1cyBhbmQgSSB0b29rIGNvdW5zZWwKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciwgYXMgd2UgaGFkIHN3b3JuIHRvIGRvLCB0byBkZXRlcm1pbmUgdGhlIGJlc3QgYW5kIHNhZmVzdCB3YXkgdG8gZGVhbAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIG90aGVyIGNsYWltYW50cy4gQW5kIHdlIGRlY2lkZWQsIG1lbiBvZiB0aGUganVyeSwgdGhhdCB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgT2x5bXBpb2RvcnVzIHNob3VsZCBsYXkgY2xhaW0gdG8gdGhlIHdob2xlIGVzdGF0ZSwgYW5kIHRoYXQsSSBzaG91bGQgY2xhaW0gYQogICAgICAgICAgICAgICAgICAgIGhhbGYsIHNlZWluZyB0aGF0IG15IGJyb3RoZXIgQ2FsbGlwcHVzIGNsYWltZWQgYSBoYWxmIG9ubHkuIDwvdHJhbnNsYXRpb24+"
translation['48.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGFsbCB0aGUgY2xhaW1zIGhhZCBiZWVuIGhlYXJkIGJlZm9yZSB0aGUgYXJjaG9uLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgY2FzZXMgd2VyZSBkdWUgdG8gYmUgdHJpZWQgaW4gY291cnQsIHRoZSBkZWZlbmRhbnQgT2x5bXBpb2RvcnVzIGFuZCBJCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3aG9sbHkgdW5wcmVwYXJlZCBmb3IgYW4gaW1tZWRpYXRlIHRyaWFsIGJlY2F1c2UgdGhvc2Ugd2hvIGhhZCBzdWRkZW5seQogICAgICAgICAgICAgICAgICAgIGFwcGVhcmVkIGFzIGNsYWltYW50cyB3ZXJlIHNvIG1hbnkuIEhvd2V2ZXIsIGluIHZpZXcgb2YgdGhlIHNpdHVhdGlvbiB0aGF0IGhhZAogICAgICAgICAgICAgICAgICAgIGRldmVsb3BlZCwgd2UgbG9va2VkIGludG8gdGhpbmdzIGpvaW50bHkgdG8gc2VlIGlmIGluIGFueSB3YXkgYSBwb3N0cG9uZW1lbnQKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBicm91Z2h0IGFib3V0IGZvciB0aGUgcHJlc2VudCwgc28gdGhhdCB3ZSBtaWdodCBnZXQgb3Vyc2VsdmVzIHJlYWR5IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB0cmlhbCBhdCBvdXIgbGVpc3VyZS4gPC90cmFuc2xhdGlvbj4="
translation['48.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaGFwcGVuZWQgYnkgYQogICAgICAgICAgICAgICAgICAgIHBpZWNlIG9mIGdvb2QgbHVjayB0aGF0IHlvdSB3ZXJlIHBlcnN1YWRlZCBieSB0aGUgcG9saXRpY2lhbnMgdG8gZGVzcGF0Y2ggdHJvb3BzCiAgICAgICAgICAgICAgICAgICAgaW50byBBY2FybmFuaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjYXJuYW5pYSB3YXMgYSBzdGF0ZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2VzdCBjb2FzdCBvZiBHcmVlY2UsIG5vcnRoIG9mIHRoZSBHdWxmIG9mIENvcmludGguPC9ub3RlPiBhbmQgdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIE9seW1waW9kb3J1cyB3YXMgYW1vbmcgdGhvc2UgY2FsbGVkIHRvIHNlcnZpY2UsIGFuZCBoZSBkZXBhcnRlZCB3aXRoIHRoZSBvdGhlcnMKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZXhwZWRpdGlvbi4gVGh1cyBoYWQgY29tZSBhYm91dCwgYXMgd2UgdGhvdWdodCwgYW4gZXhjZWxsZW50IGdyb3VuZCBmb3IKICAgICAgICAgICAgICAgICAgICBwb3N0cG9uZW1lbnQsIHRoZSBkZWZlbmRhbnQgYmVpbmcgYWJyb2FkIG9uIG1pbGl0YXJ5IHNlcnZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['48.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Tbywgd2hlbiB0aGUgYXJjaG9uIHN1bW1vbmVkIGludG8gY291cnQgYWxsIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgZmlsaW5nIGNsYWltcyBhY2NvcmRpbmcgdG8gbGF3LCBJIGVudGVyZWQgYSBzd29ybiBzdGF0ZW1lbnQsIGFza2luZwogICAgICAgICAgICAgICAgICAgIHBvc3Rwb25lbWVudCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIGRlZmVuZGFudCBPbHltcGlvZG9ydXMgd2FzIGFicm9hZCBvbgogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IHNlcnZpY2UsIGJ1dCB0byB0aGlzIHN3b3JuIHN0YXRlbWVudCBvdXIgYWR2ZXJzYXJpZXMgb3Bwb3NlZCBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgIGF0dGFja2luZyBPbHltcGlvZG9ydXM7IGFuZCBhcyB0aGV5IGhhZCB0aGUgbGFzdCB3b3JkLCB0aGV5IGluZHVjZWQgdGhlIGp1cm9ycwogICAgICAgICAgICAgICAgICAgIHRvIGRlY2lkZSB0aGF0IHRoZSBkZWZlbmRhbnQgd2FzIGFic2VudCBvbiBhY2NvdW50IG9mIHRoZSB0cmlhbCBhbmQgbm90IG9uCiAgICAgICAgICAgICAgICAgICAgcHVibGljIHNlcnZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['48.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBqdXJvcnMgaGFkIHRodXMKICAgICAgICAgICAgICAgICAgICBkZWNpZGVkLCB0aGUgYXJjaG9uIFB5dGhvZG90dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGRhdGUgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM0MyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM0MyI+MzQzPC9kYXRlPiBCLkMuPC9ub3RlPiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIHN0cnVjayBvdXQgdGhlIGNsYWltIG9mIHRoZSBkZWZlbmRhbnQ7IGFuZCB3aGVuIHRoaXMgY2xhaW0gd2FzIHN0cmlja2VuIG91dCBJCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJpbHkgaGFkIHRvIGFiYW5kb24gbXkgY2xhaW0gdG8gaGFsZiB0aGUgZXN0YXRlLiBBZnRlciB0aGVzZSBzdGVwcyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHRha2VuLCB0aGUgYXJjaG9uIGFkanVkZ2VkIHRoZSBlc3RhdGUgb2YgQ29tb24gdG8gb3VyIG9wcG9uZW50czsgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MgY29tcGVsbGVkIGhpbSB0byBkbyBzby4gPGRhdGUgYXV0aG5hbWU9Ii0zNDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNDMiPjM0MzwvZGF0ZT4gQi5DLjwvdHJhbnNsYXRpb24+"
translation['48.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5LCBhcyBzb29uIGFzCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgd29uIHRoZSBhZGp1ZGljYXRpb24sIHdlbnQgYXQgb25jZSB0byB0aGUgUGVpcmFldXMgYW5kIHByb2NlZWRlZCB0bwogICAgICAgICAgICAgICAgICAgIHRha2Ugb3ZlciBhbGwgdGhhdCBlaXRoZXIgb2YgdXMgaGFkIHJlY2VpdmVkIGZyb20gdGhlIGRpdmlzaW9uLiBJLCBiZWluZyBhdAogICAgICAgICAgICAgICAgICAgIGhvbWUsIHZvbHVudGFyaWx5IGdhdmUgb3ZlciB0byB0aGVtIHdoYXQgSSBoYWQg77yIZm9yIGl0IHdhcyBuZWNlc3NhcnkgdG8KICAgICAgICAgICAgICAgICAgICBvYmV5IHRoZSBsYXdz77yJLCBidXQgc2luY2UgT2x5bXBpb2RvcnVzIHdhcyBhYnJvYWQsIHRoZXkgY2FycmllZCBvZmYgYWxsCiAgICAgICAgICAgICAgICAgICAgaGlzIGVmZmVjdHMgZXhjZXB0IHRoZSBtb25leSB3aGljaCBoZSBoYWQgc2VwYXJhdGVseSB0YWtlbiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbuKAlHRoZSBzbGF2ZSB3aG9tIGhlIGhhZCBwdXQgdG8gdGhlIHRvcnR1cmU7IGZvciB0aGV5IGhhZCBubyBtZWFucyBvZgogICAgICAgICAgICAgICAgICAgIGdldHRpbmcgaG9sZCBvZiB0aGF0IG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['48.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCB3ZXJlIHRoZSBldmVudHMgd2hpY2ggaGFwcGVuZWQgaW4gdGhlIGFic2VuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMsIGFuZCBzdWNoIHRoZSBiZW5lZml0IEkgZGVyaXZlZCBmcm9tIG15IGFzc29jaWF0aW9uIHdpdGggaGltLiBCdXQKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIHJldHVybmVkIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHRyb29wcywgdGhlIGRlZmVuZGFudCBPbHltcGlvZG9ydXMgd2FzCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYW50LCBtZW4gb2YgdGhlIGp1cnksIGF0IHdoYXQgaGFkIG9jY3VycmVkLCBhbmQgdGhvdWdodCBoZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXNseSB0cmVhdGVkLiBIb3dldmVyLCB3aGVuIGhlIHdhcyBhdCB0aGUgaGVpZ2h0IG9mIGhpcyBpbmRpZ25hdGlvbiwgd2UKICAgICAgICAgICAgICAgICAgICBhZ2FpbiBsb29rZWQgbWF0dGVycyBvdmVyLCB0aGUgZGVmZW5kYW50IE9seW1waW9kb3J1cyBhbmQgSSwgYW5kIHRvb2sgY291bnNlbAogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHRvIHNlZSBob3cgd2UgY291bGQgZ2V0IGJhY2sgc29tZXRoaW5nIG9mIHdoYXQgd2UgaGFkIGxvc3QuIDwvdHJhbnNsYXRpb24+"
translation['48.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgYSByZXN1bHQgb2Ygb3VyIGNvbnN1bHRhdGlvbiB3ZSBkZWNpZGVkIHRvCiAgICAgICAgICAgICAgICAgICAgc3VtbW9uIGludG8gY291cnQgaW4gZHVlIGxlZ2FsIGZvcm0gdGhvc2Ugd2hvIGhhZCBoYWQgdGhlIHByb3BlcnR5IGFkanVkZ2VkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgYW5kIGluIHRoZSBjaXJjdW1zdGFuY2VzIGl0IHNlZW1lZCB0byBiZSB0aGUgc2FmZXN0IGNvdXJzZSBub3QgdG8gcmlzayBhCiAgICAgICAgICAgICAgICAgICAgam9pbnQgc3VpdCBhZ2FpbnN0IHRoZSBvdGhlciBjbGFpbWFudHMsIGJ1dCBmb3IgZWFjaCB0byBhY3Qgc2VwYXJhdGVseTsgYW5kIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgT2x5bXBpb2RvcnVzIHRvIGVudGVyIHN1aXQgZm9yIHRoZSB3aG9sZSBlc3RhdGUgYXMgaGUgaGFkIGRvbmUKICAgICAgICAgICAgICAgICAgICBiZWZvcmUsIGFuZCBjb25kdWN0IGhpcyBjYXNlIGJ5IGhpbXNlbGYsIGFuZCBmb3IgbWUgdG8gZW50ZXIgc3VpdCBmb3IgYSBoYWxmLAogICAgICAgICAgICAgICAgICAgIHNpbmNlIG15IGJyb3RoZXIgQ2FsbGlwcHVzIGNsYWltZWQgdGhlIGhhbGYgb25seTsgPC90cmFuc2xhdGlvbj4="
translation['48.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5zbyB0aGF0LCBpZiBPbHltcGlvZG9ydXMgc2hvdWxkIHdpbiBoaXMgY2FzZSwgSSwgaW4gYWNjb3JkYW5jZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgb3VyIGFncmVlbWVudCBhbmQgb3VyIG9hdGhzLCBtaWdodCByZWNvdmVyIG15IHNoYXJlIGZyb20gaGltLCB3aGlsZSwgaWYgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbG9zZSBpdCBhbmQgdGhlIGp1cm9ycyBnaXZlIGFuIGFkdmVyc2UgdmVyZGljdCwgaGUgbWlnaHQgZmFpcmx5IGFuZAogICAgICAgICAgICAgICAgICAgIGhvbmVzdGx5IHJlY292ZXIgaGlzIHNoYXJlIGZyb20gbWUgaW4gYWNjb3JkYW5jZSB3aXRoIG91ciBvYXRocyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50IG1hZGUgYmV0d2VlbiB1cy4gQWZ0ZXIgd2UgaGFkIHJlYWNoZWQgdGhpcyBjb25jbHVzaW9uLCBhbmQgaXQgc2VlbWVkCiAgICAgICAgICAgICAgICAgICAgc2FmZXN0IGJvdGggZm9yIE9seW1waW9kb3J1cyBhbmQgZm9yIG1lLCBhbGwgdGhvc2Ugd2hvIHdlcmUgaW4gcG9zc2Vzc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUgb2YgQ29tb24gd2VyZSBzdW1tb25lZCBhY2NvcmRpbmcgdG8gbGF3LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkLCBwbGVhc2UsIHRoZSBsYXcgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHRoZSBzdW1tb25zIHdhcyBnaXZlbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoaXMgbGF3LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgdGhlIHN1bW1vbnMgd2FzIGdpdmVuLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHdlIGZpbGVkIG91ciBjb3VudGVyLWNsYWltcyBpbiB0aGUgbWFubmVyIGFwcHJvdmVkIGJ5IE9seW1waW9kb3J1cy4gQWZ0ZXIgdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZSBhcmNob24gY29uZHVjdGVkIHRoZSBwcmVsaW1pbmFyeSBleGFtaW5hdGlvbiBmb3IgYWxsIGNsYWltYW50cywgYW5kIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgY29uY2x1ZGVkIHRoaXMgaGUgYnJvdWdodCB0aGUgY2FzZSBpbnRvIGNvdXJ0LiBUaGUgZGVmZW5kYW50IE9seW1waW9kb3J1cwogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgZmlyc3QgdG8gcGxlYWQsIGFuZCBoZSBzYWlkIHdoYXRldmVyIGhlIHBsZWFzZWQgYW5kIG9mZmVyZWQgd2hhdGV2ZXIKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgaGUgc2F3IGZpdCwgd2hpbGUgSSwgbWVuIG9mIHRoZSBqdXJ5LCBzYXQgaW4gc2lsZW5jZSBvbiB0aGUgb3Bwb3NpdGUKICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybS4gU2luY2UgdGhlIHRyaWFsIGhhZCBiZWVuIGZpeGVkIGluIHRoaXMgd2F5LCBPbHltcGlvZG9ydXMgZWFzaWx5IHdvbgogICAgICAgICAgICAgICAgICAgIGhpcyBjYXNlOyA8L3RyYW5zbGF0aW9uPg=="
translation['48.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiBoZSBoYWQgZ290IHRoZSB2ZXJkaWN0IGFuZAogICAgICAgICAgICAgICAgICAgIHdlIGhhZCBhY2NvbXBsaXNoZWQgaW4gdGhlIGNvdXJ0LXJvb20gYWxsIHRoYXQgd2Ugd2lzaGVkLCB3aGVuIGhlIGhhZCByZWNvdmVyZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRob3NlIHdobyBoYWQgcHJldmlvdXNseSB3b24gdGhlIGFkanVkaWNhdGlvbiBhbGwgdGhhdCB0aGV5IGhhZCB0YWtlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgdXMs4oCUYWx0aG91Z2ggaGUgaGFzIGFsbCB0aGlzIG5vdyBpbiBoaXMgcG9zc2Vzc2lvbiBhcyB3ZWxsIGFzIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IHdoaWNoIGhlIGdvdCBmcm9tIHRoZSBzbGF2ZSB3aG8gd2FzIHB1dCB0byB0aGUgdG9ydHVyZSwgaGUgaGFzIHJlZnVzZWQgdG8KICAgICAgICAgICAgICAgICAgICBkbyBhbnl0aGluZyB3aGF0ZXZlciB0aGF0IGlzIGZhaXIgdG93YXJkIG1lLCBidXQga2VlcHMgZXZlcnl0aGluZyBoaW1zZWxmLCBldmVuCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGhhcyBnaXZlbiBoaXMgb2F0aCBhbmQgbWFkZSBhbiBhZ3JlZW1lbnQgd2l0aCBtZSB0aGF0IGluIHZlcnkgdHJ1dGggd2UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGFrZSBlcXVhbCBzaGFyZXMuIFRoZXNlIGFydGljbGVzIG9mIGFncmVlbWVudCBhcmUgc3RpbGwgdXAgdG8gdGhpcyBkYXkKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY3VzdG9keSBvZiBBbmRyb2NsZWlkZXMsIHdobyBoYXMgaGltc2VsZiBnaXZlbiB0ZXN0aW1vbnkgYmVmb3JlIHlvdS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpc2gsIGhvd2V2ZXIsIHRvIGJyaW5nIGJlZm9yZSB5b3UKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucyBwcm92aW5nIGFsbCB0aGUgb3RoZXIgc3RhdGVtZW50cyBJIGhhdmUgbWFkZSwgYnV0IGZpcnN0IG9mIGFsbCwgdG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IGF0IHRoZSBvdXRzZXQgdGhlIGRlZmVuZGFudCBhbmQgSSwgaGF2aW5nIHNldHRsZWQgb3VyIGRpZmZlcmVuY2VzIGJ5CiAgICAgICAgICAgICAgICAgICAgb3Vyc2VsdmVzLCB0b29rIGVhY2ggYW4gZXF1YWwgc2hhcmUgb2YgYWxsIHRoZSBwcm9wZXJ0eSBsZWZ0IGJ5IENvbW9uIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2UgaGFkIGtub3dsZWRnZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSwgcGxlYXNlLCB0aGlzIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICBmaXJzdCwgYW5kIHRoZW4gcmVhZCBhbGwgdGhlIHJlc3QuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBwbGVhc2UKICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBjaGFsbGVuZ2Ugd2hpY2ggSSB0ZW5kZXJlZCBoaW0gcmVnYXJkaW5nIHRoZSBtb25leSB3aGljaCBoZSBnb3QgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBzbGF2ZSB3aG8gd2FzIHB1dCB0byB0aGUgdG9ydHVyZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBub3cgdGhlIG90aGVyIGRlcG9zaXRpb24sIHRvbywKICAgICAgICAgICAgICAgICAgICBwcm92aW5nIHRoYXQsIHdoZW4gb3VyIG9wcG9uZW50cyBoYWQgcmVjZWl2ZWQgdGhlIGFkanVkaWNhdGlvbiwgdGhleSB0b29rIGZyb20KICAgICAgICAgICAgICAgICAgICB1cyBhbGwgdGhhdCB3ZSBoYWQgZXhjZXB0IHRoZSBtb25leSB3aGljaCBPbHltcGlvZG9ydXMgZ290IGZyb20gdGhlIG1hbiB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgcHV0IHRvIHRoZSB0b3J0dXJlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gd2hhdCB3YXksCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCBPbHltcGlvZG9ydXMgYW5kIEkgb3JpZ2luYWxseSBkaXZpZGVkIGJldHdlZW4gdXMgdGhlIHZpc2libGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUgb2YgQ29tb24sIHlvdSBoYXZlIGJvdGggaGVhcmQgZnJvbSBteSBzdGF0ZW1lbnQsIGFuZCBpdCBoYXMgYmVlbiBwcm92ZWQKICAgICAgICAgICAgICAgICAgICB0byB5b3UgYnkgd2l0bmVzc2VzOyBhbmQgeW91IGhhdmUgYWxzbyBsZWFybmVkIHRoYXQgdGhlIGRlZmVuZGFudCBnb3QgdGhlIHN1bSBvZgogICAgICAgICAgICAgICAgICAgIG1vbmV5IGZyb20gdGhlIHNsYXZlLCBhbmQgdGhhdCB0aG9zZSB3aG8gaGFkIHByZXZpb3VzbHkgd29uIHRoZSBhZGp1ZGljYXRpb24KICAgICAgICAgICAgICAgICAgICB0b29rIGFsbCB0aGF0IHdhcyBpbiBvdXIgcG9zc2Vzc2lvbiwgdW50aWwgT2x5bXBpb2RvcnVzIHdvbiBhIHZlcmRpY3QgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kIHRyaWFsLiA8L3RyYW5zbGF0aW9uPg=="
translation['48.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaGVhciB0aGUgcmVhc29uIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZXMgZm9yIG5vdCBwYXlpbmcgbWUgd2hhdCBpcyBkdWUsIGFuZCBmb3IgcmVmdXNpbmcgdG8gZG8gYW55dGhpbmcgd2hhdGV2ZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIGZhaXI7IGFuZCB0byB0aGlzLCBtZW4gb2YgdGhlIGp1cnksIEkgYmlkIHlvdSBnaXZlIGNsb3NlIGhlZWQsIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgbWF5IG5vdCBiZSBtaXNsZWQgcHJlc2VudGx5IGJ5IHRoZSBvcmF0b3JzIHdob20gaGUgaGFzIGVuZ2FnZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBtZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBkZWZlbmRhbnQgbmV2ZXIgc2F5cyB0aGUgc2FtZSB0aGluZywKICAgICAgICAgICAgICAgICAgICBidXQgb25lIHRoaW5nIG5vdyBhbmQgYW5vdGhlciB0aGVuLCBqdXN0IGFzIGl0IGhhcHBlbnMuIEhlIGdvZXMgYWJvdXQgYnJpbmdpbmcKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIGFic3VyZCBleGN1c2VzLCBiYXNlbGVzcyBpbnNpbnVhdGlvbnMsIGFuZCBmYWxzZSBjaGFyZ2VzLCBhbmQgYWN0cyBpbgogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBidXNpbmVzcyBhcyBhIG1hbiBvZiBiYWQgZmFpdGguIDwvdHJhbnNsYXRpb24+"
translation['48.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3N0cyBvZiBwZW9wbGUgaGF2ZSBoZWFyZCBoaW0gc2F5LCBzb21ldGltZXMgdGhhdCBoZSBuZXZlciBnb3QgdGhlIG1vbmV5IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgYXQgYWxsOyBidXQgYWdhaW4sIHdoZW4gdGhlIGNvbnRyYXJ5IGhhcyBiZWVuIHByb3ZlZCwgaGUgc2F5cyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZ290IHRoZSBtb25leSBmcm9tIGhpcyBvd24gc2xhdmUsIGFuZCB0aGF0IGhlIHdpbGwgZ2l2ZSBtZSBubyBzaGFyZSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgb3Igb2YgYW55dGhpbmcgZWxzZSBvZiB0aGUgZXN0YXRlIHdoaWNoIENvbW9uIGxlZnQuIDwvdHJhbnNsYXRpb24+"
translation['48.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBhbnlvbmUgb2Ygb3VyIGNvbW1vbiBmcmllbmRzIGFza3MgaGltIHdoeSBoZQogICAgICAgICAgICAgICAgICAgIHJlZnVzZXMgdG8gcGF5IG1lLCB3aGVuIGhlIGhhcyBzd29ybiB0byBzaGFyZSBldmVyeXRoaW5nIGVxdWFsbHkgYW5kIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZXMgb2YgYWdyZWVtZW50IGFyZSBzdGlsbCBpbiBjdXN0b2R5LCBoZSBhc3NlcnRzIHRoYXQgSSBoYXZlIGJyb2tlbiB0aGUKICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQgYW5kIGhhdmUgdHJlYXRlZCBoaW0gb3V0cmFnZW91c2x5LCBhbmQgaGUgc3RhdGVzIHRoYXQgSSBoYXZlIGFsbCBhbG9uZwogICAgICAgICAgICAgICAgICAgIGJlZW4gc3BlYWtpbmcgYW5kIGFjdGluZyBpbiBvcHBvc2l0aW9uIHRvIGhpbS4gVGhlc2UgYXJlIHRoZSBleGN1c2VzIGhlIG9mZmVycy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3RhdGVtZW50cyB3aGljaCB0aGUgZmVsbG93IG1ha2VzLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgYXJlIGluc2ludWF0aW9ucyB3aGljaCBoZSBoYXMgaGltc2VsZiBtYWRlIHVwLCBmYWxzZSBleGN1c2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICBiaXRzIG9mIHRyaWNrZXJ5LCBnb3QgdXAgd2l0aCBhIHZpZXcgdG8gZGVmcmF1ZGluZyBtZSBvZiB3aGF0IGhlIG91Z2h0IHRvIHBheQogICAgICAgICAgICAgICAgICAgIG1lLiBCdXQgd2hhdCBJIHNoYWxsIHNheSB0byB5b3UgdG8gcHJvdmUgdGhhdCBoZSBpcyBseWluZyB3aWxsIGJlIG5vIG1lcmUKICAgICAgICAgICAgICAgICAgICBpbnNpbnVhdGlvbiBvbiB0aGUgY29udHJhcnkgSSBzaGFsbCBwcm92ZSBpbiBnbGFyaW5nIGZhc2hpb24gaGlzIHNoYW1lbGVzc25lc3MsCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jaW5nIHByb29mcyB0aGF0IGFyZSB0cnVzdHdvcnRoeSBhbmQga25vd24gdG8gZXZlcnlib2R5LCBhbmQgYnJpbmdpbmcKICAgICAgICAgICAgICAgICAgICBmb3J3YXJkIHdpdG5lc3NlcyByZWdhcmRpbmcgZXZlcnkgcG9pbnQuIDwvdHJhbnNsYXRpb24+"
translation['48.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCBtZW4gb2YgdGhlIGp1cnksIEkgc2F5CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGVmZW5kYW50IHJlZnVzZWQgdG8gcmVmZXIgb3VyIGRpZmZlcmVuY2VzIHRvIG91ciBjb21tb24gZnJpZW5kcyBhbmQKICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZXMgd2hvIGhhZCBmdWxsIGtub3dsZWRnZSBvZiBhbGwgdGhlIGNpcmN1bXN0YW5jZXMgb2YgdGhlIGNhc2UsIGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBmb2xsb3dlZCB0aGVtIGZyb20gdGhlIGJlZ2lubmluZzsgZm9yIHRoaXMgcmVhc29uLCB0aGF0IGhlIGhhZCBmdWxsIGtub3dsZWRnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgaGUgbWFkZSB1c2Ugb2YgYW55IGZhbHNlaG9vZHMsIGhlIHdvdWxkIGJlIHJlZnV0ZWQgYnkgdGhlbSBvbiB0aGUgc3BvdCwKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIGhlIHRoaW5rcyB0aGF0IG5vdyBoZSBtYXkgcGVyaGFwcyBsaWUgYmVmb3JlIHlvdSB3aXRob3V0IGJlaW5nIGRldGVjdGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiBJIHNheSwgaXQgaXMgbm90IGNvbnNpc3RlbnQsCiAgICAgICAgICAgICAgICAgICAgT2x5bXBpb2RvcnVzLCB0aGF0IEkgc2hvdWxkIGFjdCBpbiBvcHBvc2l0aW9uIHRvIHlvdSwgYW5kIHlldCBzaG91bGQgam9pbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgeW91IGluIGV4cGVuZGluZyB3aGF0ZXZlciBmcm9tIHRpbWUgdG8gdGltZSBiZWNhbWUgbmVjZXNzYXJ5LCBvciB0aGF0IEkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmIHZvbHVudGFyaWx5IGFiYW5kb24gbXkgY2xhaW0sIHdoZW4geW91IHdlcmUgYWJyb2FkIGFuZCB5b3VyIGNsYWltIHdhcwogICAgICAgICAgICAgICAgICAgIHN0cmlja2VuIG9mZiBiZWNhdXNlIGl0IHdhcyB0aG91Z2h0IHRoYXQgeW91IHdlcmUgYWJzZW50IG9uIGFjY291bnQgb2YgdGhlIHRyaWFsCiAgICAgICAgICAgICAgICAgICAgYW5kIG5vdCBvbiBwdWJsaWMgc2VydmljZS4gRm9yIGl0IHdhcyBvcGVuIHRvIG1lIHRvIHByZXNzIG15IG93biBjbGFpbSBmb3IKICAgICAgICAgICAgICAgICAgICBvbmUtaGFsZiB0aGUgZXN0YXRlOyBubyBodW1hbiBiZWluZyBvcHBvc2VkIG15IGNsYWltLCBidXQgbXkgb3Bwb25lbnRzCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhbGxvd2VkIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['48.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoYWQgSSBkb25lCiAgICAgICAgICAgICAgICAgICAgdGhpcywgSSBzaG91bGQgYnkgdGhhdCB2ZXJ5IGFjdCBoYXZlIHBlcmp1cmVkIG15c2VsZiwgZm9yIEkgaGFkIHN3b3JuIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0ZWQgd2l0aCB5b3UgdG8gZG8gaW4gY29uY2VydCB3aXRoIHlvdSB3aGF0ZXZlciBzaG91bGQgc2VlbSB0byB1cyBvbgogICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhdGlvbiB0byBiZSBiZXN0LiBUaGVyZWZvcmUgdGhlIHByZXRleHRzIGFuZCBjaGFyZ2VzIG9uIHdoaWNoIHlvdSBiYXNlCiAgICAgICAgICAgICAgICAgICAgeW91ciByZWZ1c2FsIHRvIGFjdCBmYWlybHkgdG93YXJkIG1lIGFyZSBhYnNvbHV0ZWx5IHNpbGx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['48.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnVydGhlcm1vcmXigJRkbyB5b3Ugc3VwcG9zZSwKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMsIHRoYXQgaW4gdGhlIGxhc3QgdHJpYWwgZm9yIHRoZSBlc3RhdGUgSSBzaG91bGQgaGF2ZSBwZXJtaXR0ZWQgeW91CiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHRvIHV0dGVyIHNvIHJlY2tsZXNzbHkgdGhlIHN0YXRlbWVudHMgd2hpY2ggeW91IG1hZGUgdG8gdGhlIGp1cnksIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgZm9yd2FyZCB3aXRuZXNzZXMgYXMgeW91IGRpZCByZWdhcmRpbmcgdGhlIHBvaW50cyB5b3Ugd2lzaGVkIHRvIHByb3ZlLCBpZgogICAgICAgICAgICAgICAgICAgIEkgaGFkIG5vdCBiZWVuIGFjdGluZyBpbiBjb25jZXJ0IHdpdGggeW91IGluIHRoZSB0cmlhbD8gPC90cmFuc2xhdGlvbj4="
translation['48.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGZlbGxvdywgbWVuIG9mIHRoZSBqdXJ5LCBzYWlkIGV2ZXJ5dGhpbmcgZWxzZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgcGxlYXNlZCBpbiB0aGUgY291cnQtcm9vbSwgYW5kIGVtcGhhdGljYWxseSBzdGF0ZWQgdG8gdGhlIGp1cnltZW4gdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGFkIHJlbnRlZCBmcm9tIGhpbSB0aGUgaG91c2Ugd2hpY2ggSSByZWNlaXZlZCBhcyBwYXJ0IG9mIG15IHNoYXJlLCBhbmQgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgaGFkIGJvcnJvd2VkIG9mIGhpbSB0aGUgbW9uZXkgd2hpY2ggSSByZWNlaXZlZOKAlHRoZSBoYWxmLCB0aGF0IGlzLCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB0aG91c2FuZCBkcmFjaG1hZSByZWNvdmVyZWQgZnJvbSB0aGUgc2xhdmUuIEFuZCBoZSBub3Qgb25seSBtYWRlIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50cywgYnV0IGhlIHByb2R1Y2VkIGRlcG9zaXRpb25zIHRvIHN1cHBvcnQgdGhlbS4gQW5kIEkgc2FpZCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgYWdhaW5zdCBhbGwgdGhpcywgbm9yIGRpZCBhbnkgaHVtYW4gYmVpbmcgaGVhciBhIHN5bGxhYmxlIGFsb3VkIG9yCiAgICAgICAgICAgICAgICAgICAgbXV0dGVyZWQgZnJvbSBtZSB3aGlsZSBoZSB3YXMgc3VwcG9ydGluZyBoaXMgY2xhaW0sIGJ1dCBJIGFkbWl0dGVkIHRoZSB0cnV0aCBvZgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgaGUgY2hvc2UgdG8gc2F5LiBGb3IgSSB3YXMgY29vcGVyYXRpbmcgd2l0aCB5b3UsIE9seW1waW9kb3J1cywKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gb3VyIGFncmVlbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['48.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5JZiB3aGF0IEkgYW0KICAgICAgICAgICAgICAgICAgICBzYXlpbmcgaXMgbm90IHRydWUsIHdoeSBkaWQgSSBub3QgcHJvY2VlZCBhZ2FpbnN0IHRoZSB3aXRuZXNzZXMgd2hvIGdhdmUgdGhpcwogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlIGluc3RlYWQgb2Yga2VlcGluZyBhYnNvbHV0ZSBzaWxlbmNlPyBPciB3aHkgZGlkIHlvdSwgT2x5bXBpb2RvcnVzLAogICAgICAgICAgICAgICAgICAgIG5ldmVyIHN1ZSBtZSBmb3IgdGhlIHJlbnQgb2YgdGhlIGhvdXNlIHdoaWNoIHlvdSBhbGxlZ2VkIHdhcyB5b3VyIG93biBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiByZW50ZWQgYnkgeW91IHRvIG1lOyBvciBmb3IgdGhlIG1vbmV5IHdoaWNoIHlvdSB0b2xkIHRoZSBqdXJ5bWVuIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBsZW50IG1lPyBXaHksIEkgc2F5LCBkaWQgeW91IGRvIG5laXRoZXIgb2YgdGhlc2UgdGhpbmdzPyBIb3csIHRoZW4sIGNvdWxkIGFueQogICAgICAgICAgICAgICAgICAgIG1hbiBiZSBtb3JlIGNsZWFybHkgY29udmljdGVkIHRoYW4geW91IGhhdmUgYmVlbiBvZiBseWluZywgb2YgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgY29udHJhZGljdG9yeSBzdGF0ZW1lbnRzLCBhbmQgb2YgcHJlZmVycmluZyBjaGFyZ2VzIHRoYXQgbGFjayBhbGwgZm91bmRhdGlvbj8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgc3Ryb25nZXN0IHByb29mIG9mIGFsbCwgd2hpY2ggd2lsbCBjb252aW5jZSB5b3UsIG1lbiBvZiB0aGUganVyeSwgb2YgaGlzIGJhZAogICAgICAgICAgICAgICAgICAgIGZhaXRoIGFuZCBjb3ZldG91c25lc3MuIElmIHRoZXJlIHdlcmUgYW55IHRydXRoIGluIHdoYXQgaGUgc2F5cywgaGUgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBzdGF0ZWQgaXQgYW5kIHByb3ZlZCBpdCBiZWZvcmUgdGhlIHRyaWFsIGNhbWUgb24sIGFuZCBiZWZvcmUgaGUgdGVzdGVkIHRoZSBqdXJ5CiAgICAgICAgICAgICAgICAgICAgYXMgdG8gaG93IGl0IHdvdWxkIGRlY2lkZTsgYW5kIGhlIHNob3VsZCBoYXZlIHRha2VuIGEgbnVtYmVyIG9mIHdpdG5lc3NlcyBhbmQKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCB0aGF0IHRoZSBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQgYmUgdGFrZW4gZnJvbSB0aGUgY3VzdG9keSBvZgogICAgICAgICAgICAgICAgICAgIEFuZHJvY2xlaWRlcyBvbiB0aGUgZ3JvdW5kIHRoYXQgSSB3YXMgdmlvbGF0aW5nIHRoZW0sIGFuZCBhY3RpbmcgYWdhaW5zdCBoaXMKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMsIGFuZCB0aGF0IHRoZSBhcnRpY2xlcyB3ZXJlIG5vIGxvbmdlciBpbiBmb3JjZSBiZXR3ZWVuIGhpbSBhbmQgbWU7CiAgICAgICAgICAgICAgICAgICAgYWxzbyBoZSBzaG91bGQgaGF2ZSBwcm90ZXN0ZWQgdG8gQW5kcm9jbGVpZGVzLCB3aG8gaGFkIHRoZSBhcnRpY2xlcyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uLCB0aGF0IGhlIGhhZCBubyBsb25nZXIgYW55dGhpbmcgdG8gZG8gd2l0aCB0aGVzZSBhcnRpY2xlcy4gPC90cmFuc2xhdGlvbj4="
translation['48.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHdoYXQgaGUgc2hvdWxkIGhhdmUgZG9uZSwgbWVuIG9mIHRoZSBqdXJ5LCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdlcmUgYW55IHRydXRoIGluIHdoYXQgaGUgc2F5czsgaGUgc2hvdWxkIGhhdmUgZ29uZSBieSBoaW1zZWxmIHRvCiAgICAgICAgICAgICAgICAgICAgQW5kcm9jbGVpZGVzLCBhbmQgbWFkZSB0aGlzIHByb3Rlc3QsIGFuZCBnb25lIGFsc28gd2l0aCBtYW55IHdpdG5lc3NlcywgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIG1pZ2h0IGhhdmUgbWFueSBwZXJzb25zIHdobyB3ZXJlIGF3YXJlIG9mIHRoZSBmYWN0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgdG8gcHJvdmUgdGhhdCBoZSBuZXZlciB0b29rIGFueSBvZiB0aGVzZSBzdGVwcywgdGhlIGNsZXJrCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb24gb2YgQW5kcm9jbGVpZGVzIGhpbXNlbGYgd2l0aCB3aG9tIHRoZSBhcnRpY2xlcyBvZgogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCBhcmUgZGVwb3NpdGVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgeW91IG11c3QgY29uc2lkZXIgYW5vdGhlciB0aGluZyB3aGljaCBoZSBoYXMgZG9uZS4gSSB0ZW5kZXJlZCBoaW0gYQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSwgYW5kIGRlbWFuZGVkIHRoYXQgaGUgZ28gd2l0aCBtZSB0byBBbmRyb2NsZWlkZXMsIHdpdGggd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBhcnRpY2xlcyBhcmUgZGVwb3NpdGVkLCBhbmQgdGhhdCB3ZSBzaG91bGQgam9pbnRseSBtYWtlIGNvcGllcyBvZiB0aGUgYWdyZWVtZW50CiAgICAgICAgICAgICAgICAgICAgYW5kIHNlYWwgaXQgdXAgYWdhaW4sIGJ1dCB0aGF0IHdlIHNob3VsZCBwdXQgdGhlIGNvcGllcyBpbiB0aGUgZXZpZGVuY2UtYm94LCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgdGhlcmUgbWlnaHQgYmUgbm8gZ3JvdW5kIGZvciBzdXNwaWNpb24sIGJ1dCB0aGF0IHlvdSBtaWdodCBoZWFyCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZyBwbGFpbmx5IGFuZCBmYWlybHksIGFuZCB0aGVuIHZvdGUgYXMgc2hvdWxkIHNlZW0gdG8geW91IG1vc3QganVzdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5JIHRlbmRlcmVkIGhpbSB0aGlzIGNoYWxsZW5nZSwgYnV0IGhlCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCB0byBkbyBhbnl0aGluZyBvZiB0aGUgc29ydDsgbm8sIGhlIGhhcyB0cmllZCB0aHVzIGFydGZ1bGx5IHRvIHByZXZlbnQKICAgICAgICAgICAgICAgICAgICB5b3VyIGhlYXJpbmcgdGhlIGFncmVlbWVudCBmcm9tIGNvcGllcyBqb2ludGx5IG1hZGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSB0ZW5kZXJlZCBoaW0gdGhpcyBjaGFsbGVuZ2UsIHRoZSBjbGVyayBzaGFsbAogICAgICAgICAgICAgICAgICAgIHJlYWQgeW91IHRoZSBkZXBvc2l0aW9uIG9mIHRoZSBwZXJzb25zIGluIHdob3NlIHByZXNlbmNlIEkgdGVuZGVyZWQgaXQuIFJlYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGNvdWxkIGl0IGJlIG1hZGUgbW9yZSBwbGFpbiB0aGF0IHRoZSBmZWxsb3cgaXMgdW53aWxsaW5nIHRvIGFjdCBqdXN0bHkgdG93YXJkIG1lCiAgICAgICAgICAgICAgICAgICAgaW4gYW55IHdheSwgdGhhdCBoZSB0aGlua3MgdG8gcm9iIG1lIG9mIHdoYXQgSSBvdWdodCB0byByZWNlaXZlIGJ5IGFkdmFuY2luZwogICAgICAgICAgICAgICAgICAgIGV4Y3VzZXMgYW5kIHByZWZlcnJpbmcgY2hhcmdlcywgYW5kIHRoYXQgaGUgZGV0ZXJtaW5lZCB0aGF0IHlvdSBzaG91bGQgbm90IGhlYXIKICAgICAgICAgICAgICAgICAgICB0aGUgYWdyZWVtZW50IHdoaWNoIGhlIGFzc2VydHMgSSBoYXZlIGJyb2tlbj8gQnV0IEkgY2hhbGxlbmdlZCBoaW0gdGhlbiBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQsIGFuZCBJIGNoYWxsZW5nZSBoaW0gYWdhaW4gbm93IGJlZm9yZSB5b3UKICAgICAgICAgICAgICAgICAgICBqdXJ5bWVuLCBhbmQgSSBkZW1hbmQgdGhhdCBoZSBjb25zZW50LCBhbmQgSSBteXNlbGYgZG8gY29uc2VudCwgdG8gaGF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBhcnRpY2xlcyBvZiBhZ3JlZW1lbnQgb3BlbmVkIGhlcmUgaW4gdGhlIGNvdXJ0LXJvb20sIHRvIGxldCB5b3UgaGVhciB0aGVtLCBhbmQKICAgICAgICAgICAgICAgICAgICB0byBoYXZlIHRoZW0gc2VhbGVkIHVwIGFnYWluIGluIHlvdXIgcHJlc2VuY2UuIDwvdHJhbnNsYXRpb24+"
translation['48.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmRyb2NsZWlkZXMgaXMgcHJlc2VudCBoZXJlOyBmb3IgSSBnYXZlIGhpbSBub3RpY2UgdG8gY29tZSBhbmQgYnJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZXMgb2YgYWdyZWVtZW50LiBJIGNvbnNlbnQsIG1lbiBvZiB0aGUganVyeSwgdGhhdCB0aGV5IGJlIG9wZW5lZCBkdXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50J3Mgc3BlZWNoLCBpbiBlaXRoZXIgaGlzIGZpcnN0IG9yIGhpcyBzZWNvbmQsIGl0IG1ha2VzIG5vCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZSB0byBtZS4gQnV0IEkgd2lzaCB5b3UgdG8gaGVhciB0aGUgYWdyZWVtZW50IGFuZCB0aGUgb2F0aHMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMgdGhlIGRlZmVuZGFudCBhbmQgSSBzd29yZSB0byBvbmUgYW5vdGhlci4gSWYgaGUgY29uc2VudHMsIGxldCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYmUgZG9uZSwgYW5kIGRvIHlvdSBoZWFyIGZvciB5b3Vyc2VsdmVzIHRoZSBhcnRpY2xlcyB3aGVuIGhlIHNoYWxsIHNlZSBmaXQ7IGFuZAogICAgICAgICAgICAgICAgICAgIGlmIGhlIHJlZnVzZXMgdG8gdGFrZSB0aGlzIGNvdXJzZSwgd2lsbCBpdCBub3QgYmUgcGxhaW4gd2l0aG91dCBmdXJ0aGVyIHByb29mLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgdGhhdCBoZSBpcyB0aGUgbW9zdCBzaGFtZWxlc3Mgb2YgaHVtYW5raW5kLCBhbmQgdGhhdCB5b3UgbWF5CiAgICAgICAgICAgICAgICAgICAgcmlnaHRseSByZWZ1c2UgdG8gYWNjZXB0IGFzIHRydWUgYW55dGhpbmcgd2hhdGV2ZXIgdGhhdCBoZSBzYXlzPyA8L3RyYW5zbGF0aW9uPg=="
translation['48.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHdoeSBhbSBJIHNvCiAgICAgICAgICAgICAgICAgICAgZWFybmVzdCBpbiB1cmdpbmcgdGhpcz8gVGhlIGRlZmVuZGFudCBoaW1zZWxmIGtub3dzIHdlbGwgdGhhdCBoZSBoYXMgc2lubmVkCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSBhbmQgc2lubmVkIGFnYWluc3QgdGhlIGdvZHMgaW4gd2hvc2UgbmFtZSBoZSBzd29yZSwgYW5kIHRoYXQgaGUgaXMgYQogICAgICAgICAgICAgICAgICAgIHBlcmp1cmVyLiBCdXQgc29tZXRoaW5nIGhhcyBkZXJhbmdlZCBoaW0sIG1lbiBvZiB0aGUganVyeSwgYW5kIGhlIGlzIG5vdCBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBzZW5zZXMuIEkgYW0gcGFpbmVkIGFuZCBJIGZlZWwgc2hhbWUsIG1lbiBvZiB0aGUganVyeSwgYXQgd2hhdCBJIGFtIGFib3V0IHRvCiAgICAgICAgICAgICAgICAgICAgdGVsbCB5b3UsIGJ1dCBJIGFtIGZvcmNlZCB0byB0ZWxsIGl0LCBpbiBvcmRlciB0aGF0IHlvdSwgaW4gd2hvc2UgaGFuZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgdmVyZGljdCBsaWVzLCBtYXkgaGVhciBhbGwgdGhlIGZhY3RzIGJlZm9yZSB5b3UgcmVhY2ggdGhlIGNvbmNsdXNpb24gcmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdXMgd2hpY2ggbWF5IHNlZW0gdG8geW91IGJlc3QuIDwvdHJhbnNsYXRpb24+"
translation['48.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkKICAgICAgICAgICAgICAgICAgICBtZW50aW9uaW5nIHRoZSB0aGluZ3Mgd2hpY2ggSSBhbSBhYm91dCB0byB0ZWxsIHlvdSB0aGlzIGZlbGxvdyBpcyBoaW1zZWxmIHRvCiAgICAgICAgICAgICAgICAgICAgYmxhbWUsIHNpbmNlIGhlIHJlZnVzZWQgdG8gc2V0dGxlIG91ciBkaWZmZXJlbmNlcyBhbW9uZyBvdXIgcmVsYXRpdmVzLCBidXQgY2hvc2UKICAgICAgICAgICAgICAgICAgICB0byBicmF6ZW4gdGhlIG1hdHRlciBvdXQuIEZvciB5b3UgbXVzdCBrbm93LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgdGhpcyBmZWxsb3cKICAgICAgICAgICAgICAgICAgICBPbHltcGlvZG9ydXMgaGFzIG5ldmVyIG1hcnJpZWQgYW4gQXRoZW5pYW4gd29tYW4gaW4gYWNjb3JkYW5jZSB3aXRoIHlvdXIgbGF3czsKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgbm8gY2hpbGRyZW4gbm9yIGhhcyBldmVyIGhhZCBhbnksIGJ1dCBoZSBrZWVwcyBpbiBoaXMgaG91c2UgYSBtaXN0cmVzcwogICAgICAgICAgICAgICAgICAgIHdob3NlIGZyZWVkb20gaGUgaGFkIHB1cmNoYXNlZCwgYW5kIGl0IGlzIHNoZSB3aG8gaXMgdGhlIHJ1aW4gb2YgdXMgYWxsIGFuZCB3aG8KICAgICAgICAgICAgICAgICAgICBkcml2ZXMgdGhlIG1hbiBvbiB0byBhIGhpZ2hlciBwaXRjaCBvZiBtYWRuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['48.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCBub3QgaW5kZWVkIGEgcHJvb2Ygb2YgaGlzIG1hZG5lc3MgdGhhdCBoZSByZWZ1c2VzIHRvIGRvIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgdGhhdCB3YXMgc3RpcHVsYXRlZCBpbiB0aGUgYWdyZWVtZW50IHdoaWNoIHdhcyBlbnRlcmVkIGludG8gd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBmdWxsIGNvbnNlbnQgYW5kIHdpdGggbXkgb3duLCBhbmQgd2hpY2ggd2FzIGNvbmZpcm1lZCBieSBhbgogICAgICAgICAgICAgICAgICAgIG9hdGg/4oCUZXNwZWNpYWxseSB3aGVuIEkgYW0gc3RyaXZpbmcsIG5vdCBpbiBteSBvd24gaW50ZXJlc3Qgb25seSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGludGVyZXN0IG9mIGhlciB0byB3aG9tIEkgYW0gbWFycmllZCwgaGlzIG93biBzaXN0ZXIsIGJvcm4gb2YgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgYW5kIHRoZSBzYW1lIG1vdGhlciwgYW5kIGluIHRoZSBpbnRlcmVzdCBvZiBoaXMgbmllY2UsIG15IGRhdWdodGVyLiBGb3IKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBiZWluZyB3cm9uZ2VkIG5vdCBsZXNzIHRoYW4gSSwgYnV0IGV2ZW4gbW9yZS4gPC90cmFuc2xhdGlvbj4="
translation['48.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5DYW4gYW55b25lLCBpbmRlZWQsIHNheSB0aGF0IHRoZXkgYXJlIG5vdCB3cm9uZ2VkIGFuZCBhcmUgbm90CiAgICAgICAgICAgICAgICAgICAgc3VmZmVyaW5nIG91dHJhZ2VvdXMgdHJlYXRtZW50LCB3aGVuIHRoZXkgc2VlIHRoaXMgZmVsbG93J3MgbWlzdHJlc3MsIGluCiAgICAgICAgICAgICAgICAgICAgZGVmaWFuY2Ugb2YgYWxsIGRlY2VuY3ksIGRlY2tlZCBvdXQgd2l0aCBtYXNzZXMgb2YgamV3ZWxzIGFuZCB3aXRoIGZpbmUgcmFpbWVudCwKICAgICAgICAgICAgICAgICAgICBnb2luZyBhYnJvYWQgaW4gc3BsZW5kaWQgc3RhdGUgYW5kIGZsYXVudGluZyB0aGUgbHV4dXJ5IHB1cmNoYXNlZCB3aXRoIHdoYXQgaXMKICAgICAgICAgICAgICAgICAgICBvdXJzLCB3aGlsZSB0aGV5IGFyZSB0aGVtc2VsdmVzIHRvbyBwb29yIHRvIGVuam95IHN1Y2ggdGhpbmdzPyBBcmUgdGhleSBub3QKICAgICAgICAgICAgICAgICAgICBzdWZmZXJpbmcgYSB3cm9uZyBldmVuIGdyZWF0ZXIgdGhhbiBteSBvd24/IEFuZCBpbiBhZG9wdGluZyBzdWNoIGEgbWFubmVyIG9mCiAgICAgICAgICAgICAgICAgICAgbGlmZSBpcyBub3QgT2x5bXBpb2RvcnVzIG5vdCBtYW5pZmVzdGx5IG1hZCBhbmQgYmVzaWRlIGhpbXNlbGY/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgdGhhdCBoZSBtYXkgbm90IGNsYWltLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgSSBhbSBzcGVha2luZwogICAgICAgICAgICAgICAgICAgIHRodXMgd2l0aCBhIHZpZXcgdG8gc2xhbmRlcmluZyBoaW0gYmVjYXVzZSBvZiB0aGlzIHN1aXQsIHRoZSBjbGVyayBzaGFsbCByZWFkCiAgICAgICAgICAgICAgICAgICAgeW91IGEgZGVwb3NpdGlvbiBmcm9tIGhpcyByZWxhdGl2ZXMgYW5kIG1pbmUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIE9seW1waW9kb3J1cywgdGhlbiwgaXMgYSBwZXJzb24gb2YgdGhpcyBzb3J0LiBIZSBpcyBub3Qgb25seSBkaXNob25lc3QsIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBvcGluaW9uIG9mIGFsbCBoaXMgcmVsYXRpdmVzIGFuZCBmcmllbmRzIGlzIHByb3ZlZCBieSB0aGUgbWFubmVyIG9mIGxpZmUKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYXMgYWRvcHRlZCB0byBiZSBtZW50YWxseSBkZXJhbmdlZDsgdG8gdXNlIHRoZSBsYW5ndWFnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdnaXZlciBTb2xvbiwgaGUgaXMgYmVzaWRlIGhpbXNlbGYgYXMgbm8gb3RoZXIgbWFuIGV2ZXIgd2FzLCBmb3IgaGUgaXMgdW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGUgaW5mbHVlbmNlIG9mIGEgd29tYW4gd2hvIGlzIGEgaGFybG90LiBBbmQgU29sb24gZXN0YWJsaXNoZWQgYSBsYXc8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBsYXcgaXMgY2l0ZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0Ni4xNCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDYuMTQ8L2JpYmw+PC9ub3RlPiB0aGF0IGFsbCBhY3RzIHNoYWxsIGJlIG51bGwgYW5kIHZvaWQgd2hpY2ggYXJlIGRvbmUKICAgICAgICAgICAgICAgICAgICBieSBhbnlvbmUgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBhIHdvbWFuLCBlc3BlY2lhbGx5IG9mIGEgd29tYW4gb2YgaGVyIHN0YW1wLgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ2LjE0IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0Ni4xNDwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['48.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIG1hdHRlciB0aGUgbGF3Z2l2ZXIgbWFkZSB3aXNlCiAgICAgICAgICAgICAgICAgICAgcHJvdmlzaW9uOyBhbmQgSSBlbnRyZWF0IHlvdeKAlGFuZCBub3QgSSBvbmx5LCBidXQgbXkgd2lmZSBhbHNvLCB0aGUKICAgICAgICAgICAgICAgICAgICBzaXN0ZXIgb2YgdGhpcyBPbHltcGlvZG9ydXMsIGFuZCBteSBkYXVnaHRlciwgaGlzIG5pZWNlLHdlIGFsbCBiZWcgYW5kIGltcGxvcmUKICAgICAgICAgICAgICAgICAgICB5b3UsIG1lbiBvZiB0aGUganVyeSwg77yIZm9yIEkgd291bGQgaGF2ZSB5b3UgaW1hZ2luZSB0aGF0IHRoZXNlIHdvbWVuCiAgICAgICAgICAgICAgICAgICAgYXJlIGhlcmUgcHJlc2VudCBiZWZvcmUgeW9177yJLCA8L3RyYW5zbGF0aW9uPg=="
translation['48.58'] = ""
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkxldCBubyBvbmUgb2YgeW91IHRoaW5rLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQKICAgICAgICAgICAgICAgICAgICBpdCBpcyBhIHRoaW5nIGJleW9uZCBiZWxpZWYgdGhhdCBUaW1vdGhldXMgc2hvdWxkIGhhdmUgb3dlZCBtb25leSB0byBteSBmYXRoZXIKICAgICAgICAgICAgICAgICAgICBhbmQgaXMgbm93IGJlaW5nIHByb3NlY3V0ZWQgYnkgbWUgaW4gdGhpcyBzdWl0LiBPbiB0aGUgY29udHJhcnksIHdoZW4gSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgY2FsbGVkIHRvIHlvdXIgbWluZHMgdGhlIG9jY2FzaW9uIG9uIHdoaWNoIHRoZSBsb2FuIHdhcyBjb250cmFjdGVkIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBldmVudHMgaW4gd2hpY2ggdGhlIGRlZmVuZGFudCB3YXMgYXQgdGhhdCB0aW1lIGludm9sdmVkIGFuZCB0aGUgc3RyYWl0cyB0byB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIHdhcyByZWR1Y2VkLCB5b3Ugd2lsbCB0aGVuIGhvbGQgdGhhdCBteSBmYXRoZXIgd2FzIG1vc3QgZ2VuZXJvdXMgdG8KICAgICAgICAgICAgICAgICAgICBUaW1vdGhldXMsIGFuZCB0aGF0IHRoZSBkZWZlbmRhbnQgaXMgbm90IG9ubHkgdW5ncmF0ZWZ1bCwgYnV0IGlzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgZGlzaG9uZXN0IG9mIGh1bWFua2luZDsgPC90cmFuc2xhdGlvbj4="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBoZSBnb3QgZnJvbSBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBhbGwgdGhhdCBoZSBhc2tlZCwgYW5kIHJlY2VpdmVkIGZyb20gdGhlIGJhbmsgbW9uZXkgYXQgYSB0aW1lIHdoZW4gaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgaW4gZ3JlYXQgbmVlZCBhbmQgd2hlbiBoZSB3YXMgaW4gZ3JpZXZvdXMgZGFuZ2VyIG9mIGxvc2luZyBoaXMgbGlmZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5IaXMgdHJlYXN1cmVyLCBBbnRpbWFjaHVzLCBhY3R1YWxseSB3YXMgY29uZGVtbmVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGRlYXRoLCBhbmQgVGltb3RoZXVzIGhpbXNlbGYgd2FzIHNhdmVkIGZyb20gYSBsaWtlIGZhdGUgb25seSBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjZXNzaW9uIG9mIGluZmx1ZW50aWFsIGZyaWVuZHMuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ5LjEwIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OS4xMDwvYmlibD4uPC9ub3RlPjsgeWV0IGhlIGhhcyBub3Qgb25seSBtYWRlIG5vIHJldHVybiwgYnV0IGV2ZW4gc2Vla3MKICAgICAgICAgICAgICAgICAgICB0byByb2IgbWUgb2YgdGhlIG1vbmV5IHdoaWNoIHdhcyBncmFudGVkIGhpbS4gQW5kIHlldCwgaWYgbWF0dGVycyBoYWQgZ29uZSBiYWRseQogICAgICAgICAgICAgICAgICAgIHdpdGggVGltb3RoZXVzLCBteSBmYXRoZXIncyBtb25leSwgdG9vLCB3YXMgbG9zdCwgZm9yIGhlIGxlbnQgaXQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IGFuZCB3aXRob3V0IHdpdG5lc3NlczsgYnV0LCBpZiB0aGUgZGVmZW5kYW50IGdvdCBvZmYgc2FmZSwgaXQgcmVzdGVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBoaW0gdG8gY2hvb3NlIHdoZW4sIGhhdmluZyB0aGUgZnVuZHMgYXZhaWxhYmxlLCBoZSBzaG91bGQgcGF5IHVzIGJhY2suCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDkuMTAiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ5LjEwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmb3IgYWxsIHRoYXQsIG1lbiBvZiB0aGUganVyeSwgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgZGlkIG5vdCBjb3VudCB0aGUgaG9sZGluZyBvZiBsYXJnZSBzdW1zIG9mIG1vbmV5IGFzIGltcG9ydGFudCBhIG1hdHRlciBhcwogICAgICAgICAgICAgICAgICAgIHRvIHN1cHBseSBUaW1vdGhldXMgd2l0aCB3aGF0IGhlIG5lZWRlZCBpbiB0aGUgdGltZSBvZiBoaXMgZGlzdHJlc3MuIE5vLCBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciB0aG91Z2h0LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQsIGlmIFRpbW90aGV1cyB0aGVuIGdvdCBzYWZlbHkgb3V0IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VycyBhbmQgcmV0dXJuZWQgaG9tZSBmcm9tIHRoZSBzZXJ2aWNlIG9mIHRoZSBraW5nLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZnRlciBiZWluZyBkZXBvc2VkIGZyb20gaGlzIGNvbW1hbmQgb2YgdGhlIEF0aGVuaWFuIGZsZWV0IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM3MyI+MzczPC9kYXRlPiBCLkMuLCBUaW1vdGhldXMgZW50ZXJlZCB0aGUgc2VydmljZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAga2luZyBvZiBQZXJzaWEuPC9ub3RlPiB3aGVuIHRoZSBkZWZlbmRhbnQgd2FzIGluIGJldHRlciBjaXJjdW1zdGFuY2VzIHRoYW4KICAgICAgICAgICAgICAgICAgICBhdCB0aGUgdGltZSwgaGUgd291bGQgbm90IG9ubHkgcmVjb3ZlciBoaXMgbW9uZXksIGJ1dCB3b3VsZCBiZSBpbiBhIHBvc2l0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgb2J0YWluIHdoYXRldmVyIGVsc2UgaGUgbWlnaHQgd2lzaCBmcm9tIFRpbW90aGV1cy4gPGRhdGUgYXV0aG5hbWU9Ii0zNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNzMiPjM3MzwvZGF0ZT4gQi5DLiwgVGltb3RoZXVzIGVudGVyZWQgdGhlIHNlcnZpY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmcgb2YgUGVyc2lhLjwvdHJhbnNsYXRpb24+"
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBtYXR0ZXJzIGhhdmUgbm90IHR1cm5lZCBvdXQgYXMgbXkgZmF0aGVyIGV4cGVjdGVkLCBzaW5jZSB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSB3aGljaCBUaW1vdGhldXMgYXNrZWQgb2YgbXkgZmF0aGVyIGFuZCBncmF0ZWZ1bGx5IHJlY2VpdmVkIGZyb20gdGhlIGJhbmsKICAgICAgICAgICAgICAgICAgICBoZSBpcyBkZXRlcm1pbmVkLCBub3cgdGhhdCBteSBmYXRoZXIgaXMgZGVhZCwgdG8gcGF5IGJhY2sgb25seSBpZiBmb3JjZWQgdG8gZG8KICAgICAgICAgICAgICAgICAgICBzbyBieSBob3N0aWxlIGxlZ2FsIHByb2NlZHVyZSwgYW5kIGJ5IGNvbnZpbmNpbmcgcHJvb2Ygb2YgaGlzIGluZGVidGVkbmVzcywgYW5kLAogICAgICAgICAgICAgICAgICAgIGlmIGhlIGNhbiBjb252aW5jZSB5b3UgYnkgZGVjZWl0ZnVsIGFyZ3VtZW50cyB0aGF0IGhlIGlzIG5vdCBsaWFibGUsIHRvIHJvYiB1cwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtb25leeKAlEkgY291bnQgaXQgbmVjZXNzYXJ5IHRvIGluZm9ybSB5b3UgZnVsbHkgb2YgZXZlcnl0aGluZwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGJlZ2lubmluZzogdGhlIHNldmVyYWwgbG9hbnMsIHRoZSBwdXJwb3NlIGZvciB3aGljaCBoZSBleHBlbmRlZCBlYWNoCiAgICAgICAgICAgICAgICAgICAgc3VtLCBhbmQgdGhlIGRhdGVzIGF0IHdoaWNoIHRoZSBvYmxpZ2F0aW9ucyB3ZXJlIGNvbnRyYWN0ZWQuIDwvdHJhbnNsYXRpb24+"
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsZXQgbm8gb25lIG9mIHlvdSB3b25kZXIgdGhhdCBJIGhhdmUgYWNjdXJhdGUKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2Ugb2YgdGhlc2UgbWF0dGVyczsgZm9yIGJhbmtlcnMgYXJlIGFjY3VzdG9tZWQgdG8gd3JpdGUgb3V0IG1lbW9yYW5kYSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzdW1zIHdoaWNoIHRoZXkgbGVuZCwgdGhlIHB1cnBvc2VzIGZvciB3aGljaCBmdW5kcyBhcmUgZGVzaXJlZCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHBheW1lbnRzIHdoaWNoIGEgYm9ycm93ZXIgbWFrZXMsIGluIG9yZGVyIHRoYXQgaGlzIHJlY2VpcHRzIGFuZCBoaXMgcGF5bWVudHMgbWF5CiAgICAgICAgICAgICAgICAgICAgYmUga25vd24gdG8gdGhlbSBmb3IgdGhlaXIgYWNjb3VudHMuIDwvdHJhbnNsYXRpb24+"
translation['49.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcwogICAgICAgICAgICAgICAgICAgIHRoZW4sIGluIHRoZSBhcmNob25zaGlwIG9mIFNvY3JhdGlkYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBhcmNob25zaGlwIG9mIFNvY3JhdGlkYXMgZmVsbCBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzc0Ly0zNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3NCIgdG89Ii0zNzMiPjM3NDwvZGF0ZVJhbmdlPi08ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzczLy0zNzIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3MyIgdG89Ii0zNzIiPjM3MzwvZGF0ZVJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICBCLkMuPC9ub3RlPiBpbiB0aGUgbW9udGggTXVuaWNoaW9uLDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNzQvLTM3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzc0IiB0bz0iLTM3MyI+Mzc0PC9kYXRlUmFuZ2U+LTxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNzMvLTM3MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzczIiB0bz0iLTM3MiI+MzczPC9kYXRlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TXVuaWNoaW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXR0ZXIgaGFsZiBvZiBBcHJpbCBhbmQgdGhlIHByaW9yIGhhbGYgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTWF5Ljwvbm90ZT4gd2hlbiB0aGUgZGVmZW5kYW50IFRpbW90aGV1cyB3YXMgYWJvdXQgdG8gc2FpbCBvbiBoaXMgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbiBhbmQgd2FzIGFscmVhZHkgaW4gdGhlIFBlaXJhZXVzIG9uIHRoZSBwb2ludCBvZiBwdXR0aW5nIHRvIHNlYSwgdGhhdCwKICAgICAgICAgICAgICAgICAgICBiZWluZyBpbiB3YW50IG9mIG1vbmV5LCBoZSBjYW1lIHRvIG15IGZhdGhlciBpbiB0aGUgcG9ydCBhbmQgdXJnZWQgaGltIHRvIGxlbmQKICAgICAgICAgICAgICAgICAgICBoaW0gb25lIHRob3VzYW5kIHRocmVlIGh1bmRyZWQgYW5kIGZpZnR5LW9uZSBkcmFjaG1hZSB0d28gb2JvbHMsIGRlY2xhcmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbmVlZGVkIHRoYXQgYWRkaXRpb25hbCBzdW07IGFuZCBoZSBiYWRlIGhpbSBnaXZlIHRoZSBtb25leSB0byBoaXMgdHJlYXN1cmVyCiAgICAgICAgICAgICAgICAgICAgQW50aW1hY2h1cywgd2hvIGF0IHRoYXQgdGltZSBtYW5hZ2VkIGV2ZXJ5dGhpbmcgZm9yIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['49.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBUaW1vdGhldXMgd2hvIGJvcnJvd2VkIHRoZSBtb25leSBmcm9tIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCBhbmQgd2hvIGJhZGUgaGltIGdpdmUgaXQgdG8gaGlzIHRyZWFzdXJlciBBbnRpbWFjaHVzLCBidXQgdGhlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB0aGUgbW9uZXkgZnJvbSBQaG9ybWlvIGF0IHRoZSBiYW5rIHdhcyBBdXRvbm9tdXMsIHdobyB0aHJvdWdob3V0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGltZSBzZXJ2ZWQgYXMgc2VjcmV0YXJ5IHRvIEFudGltYWNodXMuIDwvdHJhbnNsYXRpb24+"
translation['49.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgdGhlIG1vbmV5IHdhcyBwYWlkIG91dCwgdGhlIGJhbmsgcmVjb3JkZWQgYXMgZGVidG9yCiAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzLCB3aG8gaGFkIHJlcXVlc3RlZCB0aGUgbG9hbiwgYnV0IG1hZGUgYSBtZW1vcmFuZHVtIGluIHRoZSBuYW1lIG9mCiAgICAgICAgICAgICAgICAgICAgQW50aW1hY2h1cywgdG8gd2hvbSBUaW1vdGhldXMgaGFkIG9yZGVyZWQgdGhlIG1vbmV5IHRvIGJlIHBhaWQsIGFuZCBhbHNvIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgQXV0b25vbXVzLCB3aG9tIEFudGltYWNodXMgaGFkIHNlbnQgdG8gdGhlIGJhbmsgdG8gcmVjZWl2ZSB0aGUgbW9uZXksIHRoZSBhbW91bnQKICAgICAgICAgICAgICAgICAgICBiZWluZyBvbmUgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBhbmQgZmlmdHktb25lIGRyYWNobWFlIHR3byBvYm9scy4gVGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgbG9hbiwgdGhlbiwgd2hpY2ggVGltb3RoZXVzIGNvbnRyYWN0ZWQgYXQgdGhlIHRpbWUgb2YgaGlzIGdvaW5nIHRvIHNlYSwgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBzZXJ2aW5nIGFzIGdlbmVyYWwgdGhlIHNlY29uZCB0aW1lLCB3YXMgZm9yIHRoaXMgYW1vdW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['49.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIHlvdSBoYWQgcmVtb3ZlZCBoaW0gZnJvbSBoaXMgY29tbWFuZCBhcwogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgYmVjYXVzZSBoZSBmYWlsZWQgdG8gc2FpbCByb3VuZCB0aGUgUGVsb3Bvbm5lc3VzLCBhbmQgaGUgaGFkIGJlZW4gZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBvdmVyIHRvIHRoZSBwb3B1bGFyIGFzc2VtYmx5IGZvciB0cmlhbCB1bmRlciBhIHZlcnkgaGVhdnkgY2hhcmdlLCB3aGVuIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGJlaW5nIHByb3NlY3V0ZWQgYnkgQ2FsbGlzdHJhdHVzIGFuZCBJcGhpY3JhdGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbXBvcnRhbnQgZmlndXJlcyBpbiB0aGUgcG9saXRpY2FsIGxpZmUgb2YgQXRoZW5zLiBUaGUgZm9ybWVyIHdhcyBhbgogICAgICAgICAgICAgICAgICAgICAgICBvcmF0b3IsIHRoZSBsYXR0ZXIgb25lIG9mIHRoZSBnZW5lcmFscy48L25vdGU+IG1lbiBvZiBwb3dlciBib3RoIGluIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCBpbiBzcGVlY2gsIGFuZCB0aGV5IGFuZCB0aGVpciBmZWxsb3ctcGxlYWRlcnMgc28gaW5mbHVlbmNlZCB5b3VyIG1pbmRzIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaW0gPC90cmFuc2xhdGlvbj4="
translation['49.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGNvbmRlbW5lZCBhbmQgcHV0IHRvIGRlYXRoIEFudGltYWNodXMsIGhpcyB0cmVhc3VyZXIgYW5kIGEgbWFuIG1vc3QgZGV2b3RlZCB0bwogICAgICAgICAgICAgICAgICAgIGhpbSzigJR5ZXMsIGFuZCBjb25maXNjYXRlZCBoaXMgcHJvcGVydHk7IHdoaWxlIFRpbW90aGV1cyBoaW1zZWxmLAogICAgICAgICAgICAgICAgICAgIHRoYW5rcyB0byB0aGUgaW50ZXJjZXNzaW9uIG9mIGFsbCBoaXMgZnJpZW5kcyBhbmQgcmVsYXRpdmVzLCBhbmQgYWxzbyBvZiBBbGNldGFzCiAgICAgICAgICAgICAgICAgICAgYW5kIEphc29uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGNldGFzIHdhcyBraW5nIG9mIHRoZSBNb2xvc3NpIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVwZWlydXMsIEphc29uIHR5cmFudCBvZiBQaGVyYWUgaW4gVGhlc3NhbHkuIFdpdGggYm90aCBvZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzIGhhZCBmb3JtZWQgY29ubmVjdGlvbnMgd2hpbGUgaW4gY29tbWFuZCBvZiB0aGUgZmxlZXQuPC9ub3RlPiB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIGFsbGllcyBvZiB5b3VycywgeW91IHdlcmUgcmVsdWN0YW50bHkgaW5kdWNlZCB0byBwYXJkb24sIGJ1dCB5b3UgZGVwb3NlZAogICAgICAgICAgICAgICAgICAgIGhpbSBmcm9tIGhpcyBjb21tYW5kO+KAlCA8L3RyYW5zbGF0aW9uPg=="
translation['49.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5zdWNoIHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcyB1bmRlciB3aGljaCBoZSBsYXksIGFuZCBoZSB3YXMgaW4gZGVzcGVyYXRlIG5lZWQgb2YgbW9uZXkuIEZvciBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgaGFkIGJlZW4gbW9ydGdhZ2VkLCBwaWxsYXJzIGhhZCBiZWVuIHNldCB1cCBvbiBpdCwgYW5kIG90aGVyIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHdlcmUgaW4gY29udHJvbC4gSGlzIGZhcm0gaW4gdGhlIHBsYWluIGhhZCBiZWVuIHRha2VuIG92ZXIgYXMgc2VjdXJpdHkgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIEV1bWVsaWRhczsgdGhlIHJlc3Qgb2YgaGlzIHByb3BlcnR5IHdhcyBtb3J0Z2FnZWQsIGZvciBzZXZlbiBtaW5hZSBlYWNoLAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzaXh0eSB0cmllcmFyY2hzIHdobyBzZXQgb3V0IG9uIHRoZSB2b3lhZ2Ugd2l0aCBoaW0sIHdoaWNoIG1vbmV5IGhlIGFzCiAgICAgICAgICAgICAgICAgICAgYWRtaXJhbCBoYWQgZm9yY2VkIHRoZW0gdG8gZGlzdHJpYnV0ZSBhbW9uZyB0aGVpciBjcmV3cyBmb3IgbWFpbnRlbmFuY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHdhcyBkZXBvc2VkLCBoZSByZXBvcnRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHdoaWNoIGhlIHJlbmRlcmVkLCB0aGF0IGhlIGhhZCBhdCB0aGF0IHRpbWUgaGltc2VsZiBnaXZlbiB0aG9zZSBzZXZlbgogICAgICAgICAgICAgICAgICAgIG1pbmFlIGZvciB0aGUgc2hpcHMgZnJvbSB0aGUgbWlsaXRhcnkgZnVuZCwgYnV0LCBmZWFyaW5nIGxlc3QgdGhlIHRyaWVyYXJjaHMKICAgICAgICAgICAgICAgICAgICBzaG91bGQgZ2l2ZSBldmlkZW5jZSBhZ2FpbnN0IGhpbSBhbmQgaGUgc2hvdWxkIGJlIGNvbnZpY3RlZCBvZiBseWluZywgaGUKICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCBwcml2YXRlbHkgZnJvbSBlYWNoIG9uZSBvZiB0aGVtIHNldmVuIG1pbmFlLCBhbmQgZ2F2ZSB0aGVtIGEgbW9ydGdhZ2UKICAgICAgICAgICAgICAgICAgICBvbiBoaXMgcHJvcGVydHkuIFlldCBoZSBpcyBub3cgc2Vla2luZyB0byByb2IgdGhlbSBvZiB0aGlzIG1vbmV5LCBhbmQgaGUgaGFzIGR1ZwogICAgICAgICAgICAgICAgICAgIHVwIHRoZSBwaWxsYXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgaGFyZCBwcmVzc2VkIG9uIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgc2lkZSwgaGlzIGxpZmUgd2FzIGluIGV4dHJlbWUgZGFuZ2VyIGJlY2F1c2Ugb2YgdGhlIGdyYXZpdHkgb2YgdGhlIG1pc2ZvcnR1bmVzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFkIGJlZmFsbGVuIHRoZSBzdGF0ZSwgdGhlIGFybXkgaW4gQ2FsYXVyZWlhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNhbGF1cmVpYSB3YXMgYW4gaXNsYW5kIG9mZiB0aGUgZWFzdCBjb2FzdCBvZiBQZWxvcG9ubmVzdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtb2Rlcm4gUG9yb3MuPC9ub3RlPiBoYWQgYmVlbiBicm9rZW4gdXAgZm9yIHdhbnQgb2YgcGF5LCB0aGUgYWxsaWVzCiAgICAgICAgICAgICAgICAgICAgYXJvdW5kIFBlbG9wb25uZXN1cyB3ZXJlIGJlaW5nIGJlc2llZ2VkIGJ5IHRoZSBMYWNlZGFlbW9uaWFucywgSXBoaWNyYXRlcyBhbmQKICAgICAgICAgICAgICAgICAgICBDYWxsaXN0cmF0dXMgd2VyZSBhY2N1c2luZyBoaW0gb2YgYmVpbmcgcmVzcG9uc2libGUgZm9yIHRoZSBwcmVzZW50IGRpc2FzdGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCwgZnVydGhlcm1vcmUsIHRob3NlIHdobyBjYW1lIGZyb20gdGhlIGFybXkgd2VyZSByZXBvcnRpbmcgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IHRoZSBkaXN0cmVzcyBhbmQgbmVlZCB0aGF0IGV4aXN0ZWQsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGluZGl2aWR1YWxzCiAgICAgICAgICAgICAgICAgICAga2VwdCByZWNlaXZpbmcgd29yZCBmcm9tIHRoZWlyIHJlbGF0aXZlcyBhbmQgZnJpZW5kcyB0ZWxsaW5nIG9mIHRoZWlyIHBsaWdodC4KICAgICAgICAgICAgICAgICAgICBUaGVzZSB0aGluZ3MgeW91IGFsbCBoZWFyZCBpbiB0aGUgcG9wdWxhciBhc3NlbWJseSBhdCB0aGF0IHRpbWUsIGFuZCB5b3UKICAgICAgICAgICAgICAgICAgICByZW1lbWJlciBob3cgZWFjaCBtYW4gb2YgeW91IGZlbHQgdG93YXJkIGhpbTsgeW91IGFyZSBub3Qgd2l0aG91dCBrbm93bGVkZ2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aGF0IHBlb3BsZSB3ZXJlIHNheWluZy4gPC90cmFuc2xhdGlvbj4="
translation['49.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIG9uIHRoZSBwb2ludCBvZiBzYWlsaW5nIGhvbWUgZm9yIGhpcyB0cmlhbCwgdGhlIGRlZmVuZGFudCwgd2hpbGUgc3RpbGwgaW4KICAgICAgICAgICAgICAgICAgICBDYWxhdXJlaWEsIGJvcnJvd2VkIGZyb20gQW50aXBoYW5lcyBvZiBMYW1wdHJhZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGFtcHRyYWUgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUgRXJlY3RoZWlzLjwvbm90ZT4gd2hvIHNhaWxlZCB3aXRoIFBoaWxpcAogICAgICAgICAgICAgICAgICAgIHRoZSBzaGlwb3duZXIgYXMgaGlzIHRyZWFzdXJlciwgdGhlIHN1bSBvZiBvbmUgdGhvdXNhbmQgZHJhY2htYWUgdG8gZGlzdHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIGFtb25nIHRoZSBCb2VvdGlhbiB0cmllcmFyY2hzLCB0aGF0IHRoZXkgbWlnaHQgcmVtYWluIHdpdGggdGhlIGZsZWV0IHVudGlsIGhpcwogICAgICAgICAgICAgICAgICAgIHRyaWFsIHNob3VsZCBjb21lIG9mZiwgZm9yIGZlYXIgbGVzdCwgaWYgdGhlIEJvZW90aWFuIGZsZWV0IHNob3VsZCBmaXJzdCBiZQogICAgICAgICAgICAgICAgICAgIGJyb2tlbiB1cCBhbmQgdGhlIHRyb29wcyBzY2F0dGVyZWQgaGVyZSBhbmQgdGhlcmUgdG8gdGhlaXIgaG9tZXMsIHlvdSBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIGluY2Vuc2VkIGFnYWluc3QgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWx0aG91Z2gKICAgICAgICAgICAgICAgICAgICBvdXIgY291bnRyeW1lbiBlbmR1cmVkIHRoZWlyIHByaXZhdGlvbnMgYW5kIHJlbWFpbmVkIGF0IHRoZWlyIHBvc3RzLCB0aGUKICAgICAgICAgICAgICAgICAgICBCb2VvdGlhbnMgZGVjbGFyZWQgdGhhdCB0aGV5IHdvdWxkIG5vdCBzdGF5LCB1bmxlc3Mgc29tZWJvZHkgc2hvdWxkIGZ1cm5pc2ggdGhlbQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlaXIgZGFpbHkgcmF0aW9ucy4gVW5kZXIgc3RyZXNzIG9mIG5lY2Vzc2l0eSwgdGhlbiwgYXQgdGhhdCB0aW1lIGhlCiAgICAgICAgICAgICAgICAgICAgYm9ycm93ZWQgdGhlIHRob3VzYW5kIGRyYWNobWFlIGZyb20gQW50aXBoYW5lcywgd2hvIHNhaWxlZCB3aXRoIFBoaWxpcCwgdGhlCiAgICAgICAgICAgICAgICAgICAgc2hpcG93bmVyLCBhcyBoaXMgdHJlYXN1cmVyLCBhbmQgZ2F2ZSB0aGVtIHRvIHRoZSBhZG1pcmFsIG9mIHRoZSBCb2VvdGlhbiBmbGVldC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBnb3QgYmFjayB0byBBdGhlbnMsIGJvdGgKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgYW5kIEFudGlwaGFuZXMgZGVtYW5kZWQgb2YgaGltIHRoZSB0aG91c2FuZCBkcmFjaG1hZSB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCBpbiBDYWxhdXJlaWEsIGFuZCB3ZXJlIGFuZ3J5IGF0IG5vdCByZWNlaXZpbmcgdGhlaXIgbW9uZXkgYXQgb25jZS4KICAgICAgICAgICAgICAgICAgICBUaW1vdGhldXMsIHRoZW4sIGZlYXJpbmcgdGhhdCBoaXMgZW5lbWllcyBtaWdodCBsZWFybiB0aGF0IHRoZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlLCB3aGljaCBpbiBoaXMgcmVwb3J0IGhlIHN0YXRlZCBoZSBoYWQgcGFpZCBmb3IgdGhlIEJvZW90aWFuIGZsZWV0IG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBtaWxpdGFyeSBmdW5kLCBoYWQgaW4gZmFjdCBiZWVuIGxlbnQgYnkgUGhpbGlwLCB3aG8gY291bGQgbm90IGdldCB0aGVtCiAgICAgICAgICAgICAgICAgICAgYmFjaywgPC90cmFuc2xhdGlvbj4="
translation['49.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZmVhcmluZyBhbHNvIHRoYXQgUGhpbGlwIG1pZ2h0IGdpdmUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgYWdhaW5zdCBoaW0gYXQgaGlzIHRyaWFsLCBjYW1lIHRvIG15IGZhdGhlciBhbmQgYmVnZ2VkIGhpbSB0byBzZXR0bGUKICAgICAgICAgICAgICAgICAgICB3aXRoIFBoaWxpcCwgYW5kIHRvIGxlbmQgaGltIHRoZSB0aG91c2FuZCBkcmFjaG1hZSB0byBwYXkgUGhpbGlwLiBBbmQgbXkgZmF0aGVyLAogICAgICAgICAgICAgICAgICAgIHNlZWluZyB0aGUgc2VyaW91c25lc3Mgb2YgdGhlIHRyaWFsIGluIHdoaWNoIHRoZSBkZWZlbmRhbnQgd2FzIGludm9sdmVkLCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICB3aGF0IHBsaWdodCBoZSB3YXMsIGZlbHQgcGl0eSBmb3IgaGltLCBhbmQsIHRha2luZyBoaW0gdG8gdGhlIGJhbmssIGJhZGUKICAgICAgICAgICAgICAgICAgICBQaG9ybWlvLCB3aG8gd2FzIGNhc2hpZXIsIHRvIHBheSBQaGlsaXAgdGhlIHRob3VzYW5kIGRyYWNobWFlLCBhbmQgdG8gZW50ZXIgb24KICAgICAgICAgICAgICAgICAgICB0aGUgYm9va3MgVGltb3RoZXVzIGFzIG93aW5nIHRoYXQgYW1vdW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['49.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCB0aGVzZSBzdGF0ZW1lbnRzIGFyZSB0cnVlLCBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgYnJpbmcgZm9yd2FyZCBQaG9ybWlvLCB3aG8gcGFpZCB0aGUgbW9uZXksIGFzIGEgd2l0bmVzcywgYXMgc29vbiBhcyBJCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGF2ZSBleHBsYWluZWQgdG8geW91IHRoZSBvdGhlciBsb2FuLCBpbiBvcmRlciB0aGF0LCBiZWluZyBpbmZvcm1lZAogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggdGhlIHNhbWUgZGVwb3NpdGlvbiBhYm91dCB0aGUgd2hvbGUgb2YgdGhlIGRlYnQsIHlvdSBtYXkga25vdyB0aGF0IEkgYW0KICAgICAgICAgICAgICAgICAgICBzcGVha2luZyB0aGUgdHJ1dGguIEkgc2hhbGwgYWxzbyBjYWxsIGJlZm9yZSB5b3UgQW50aXBoYW5lcywgd2hvIGxlbnQgdGhlIHN1bSBvZgogICAgICAgICAgICAgICAgICAgIG9uZSB0aG91c2FuZCBkcmFjaG1hZSB0byB0aGUgZGVmZW5kYW50IGluIENhbGF1cmVpYSwgYW5kIHdobyB3YXMgcHJlc2VudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwIHJlY2VpdmVkIHBheW1lbnQgb2YgdGhlIG1vbmV5IGZyb20gbXkgZmF0aGVyIGhlcmUgaW4gQXRoZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IEkgZGlkIG5vdCBwdXQgdGhlIGRlcG9zaXRpb24gaW4gdGhlIGJveCBiZWZvcmUKICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRyYXRvciB3YXMgZHVlIHRvIGEgdHJpY2sgb2YgQW50aXBoYW5lcywgd2hvIGtlcHQgc2F5aW5nIHRoYXQgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBnaXZlIGV2aWRlbmNlIGZvciBtZSBvbiB0aGUgZGF5IHNldCBmb3IgdGhlIGRlY2lzaW9uOyBidXQgd2hlbiB0aGUgaGVhcmluZyB3YXMKICAgICAgICAgICAgICAgICAgICBpbiBwcm9ncmVzcyBiZWZvcmUgdGhlIGFyYml0cmF0b3IsIGFsdGhvdWdoIGhlIHdhcyBzdW1tb25lZCBmcm9tIGhpcyBob3VzZQogICAgICAgICAgICAgICAgICAgIO+8iGZvciBoZSB3YXMgbm93aGVyZSB0byBiZSBzZWVu77yJLCBoZSB3YXMgcGVyc3VhZGVkIGJ5IFRpbW90aGV1cwogICAgICAgICAgICAgICAgICAgIHRvIGZhaWwgdG8gYXBwZWFyIGFzIGEgd2l0bmVzcy4gT24gbXkgZGVwb3NpdGluZyBhIGRyYWNobWEgaW4gaGlzIG5hbWUgb24gYQogICAgICAgICAgICAgICAgICAgIGNoYXJnZSBvZiBmYWlsaW5nIHRvIGFwcGVhciwgYXMgdGhlIGxhdyBwcmVzY3JpYmVzLCB0aGUgYXJiaXRyYXRvciBkaWQgbm90IG1ha2UKICAgICAgICAgICAgICAgICAgICBhbiBhd2FyZCBhZ2FpbnN0IHRoZSBkZWZlbmRhbnQsIGJ1dCBkZWNpZGVkIGluIGhpcyBmYXZvciwgYW5kIHRoZW4gd2VudCBvZmYsIGZvcgogICAgICAgICAgICAgICAgICAgIGl0IHdhcyBhbHJlYWR5IGxhdGUuIDwvdHJhbnNsYXRpb24+"
translation['49.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGhvd2V2ZXIsIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGVudGVyZWQgc3VpdCBvbiBteSBvd24gYWNjb3VudCBmb3IgZGFtYWdlcyBhZ2FpbnN0IEFudGlwaGFuZXMgYmVjYXVzZSBoZSBuZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgZ2F2ZSB0ZXN0aW1vbnkgZm9yIG1lLCBub3IgYXNrZWQgdW5kZXIgb2F0aCBmb3IgYSBwb3N0cG9uZW1lbnQsIGFzIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBwcm92aWRlcy4gQW5kIEkgZGVtYW5kIG9mIGhpbSB0aGF0IGhlIGdldCB1cCBhbmQgc3RhdGUgdW5kZXIgb2F0aCBiZWZvcmUgeW91LAogICAgICAgICAgICAgICAgICAgIGZpcnN0LCB3aGV0aGVyIGhlIGxlbnQgVGltb3RoZXVzIGEgdGhvdXNhbmQgZHJhY2htYWUgaW4gQ2FsYXVyZWlhLCBhbmQgc2Vjb25kbHksCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBQaGlsaXAgcmVjZWl2ZWQgaGVyZSBwYXltZW50IG9mIHRoYXQgc3VtIGZyb20gbXkgZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVmZW5kYW50IGhpbXNlbGYgcHJhY3RpY2FsbHkgYWRtaXR0ZWQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3IgdGhhdCBteSBmYXRoZXIgcGFpZCBQaGlsaXAgdGhlIHRob3VzYW5kIGRyYWNobWFlOyBidXQgaGUgZGVjbGFyZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdhcyBub3QgdG8gaGltIO+8iFRpbW90aGV1c++8iSB0aGF0IG15IGZhdGhlciBsZW50IHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5LCBidXQgdG8gdGhlIEJvZW90aWFuIGFkbWlyYWwsIHdobywgaGUgYWxsZWdlcywgZ2F2ZSBzb21lIGNvcHBlciBhcwogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IGZvciB0aGUgc3VtLiBIb3dldmVyLCB0aGF0IGluIHRoaXMgaGUgd2FzIG5vdCBzdGF0aW5nIHRoZSB0cnV0aCwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBib3Jyb3dlZCB0aGUgbW9uZXkgaGltc2VsZiBhbmQgaXMgc2Vla2luZyB0byBhdm9pZCBwYXltZW50LCBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgdG8geW91LCB3aGVuIEkgc2hhbGwgaGF2ZSBpbmZvcm1lZCB5b3UgaW4gZGV0YWlsIHJlZ2FyZGluZyBoaXMgb3RoZXIgZGVidHMKICAgICAgICAgICAgICAgICAgICBhbHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9udGggTWFpbWFjdGVyaW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk1haW1hY3RlcmlvbiBjb3JyZXNwb25kcyB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGF0dGVyIGhhbGYgb2YgTm92ZW1iZXIgYW5kIHRoZSBwcmlvciBoYWxmIG9mIERlY2VtYmVyLjwvbm90ZT4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYXJjaG9uc2hpcCBvZiBBc3RlaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYXJjaG9uc2hpcCBvZiBBc3RlaXVzCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxzIGluIDM3My08ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzcyLy0zNzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3MiIgdG89Ii0zNzEiPjM3MjwvZGF0ZVJhbmdlPiBCLkMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIEFsY2V0YXMgYW5kIEphc29uIGNhbWUgdG8gdmlzaXQgVGltb3RoZXVzIHRvIGJlIHByZXNlbnQgYXQgaGlzIHRyaWFsIGFuZCBnaXZlCiAgICAgICAgICAgICAgICAgICAgaGltIHRoZWlyIHN1cHBvcnQsIGFuZCB0aGV5IGFycml2ZWQgYXQgaGlzIGhvdXNlIGluIFBlaXJhZXVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBIaXBwb2RhbWVpYTxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNzIvLTM3MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzcyIiB0bz0iLTM3MSI+MzcyPC9kYXRlUmFuZ2U+IEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgYW4gYWdvcmEgYnVpbHQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hpdGVjdCBIaXBwb2RhbXVzLjwvbm90ZT4gd2hlbiBpdCB3YXMgYWxyZWFkeSBldmVuaW5nLiBCZWluZyBhdCBhIGxvc3MKICAgICAgICAgICAgICAgICAgICBob3cgdG8gZW50ZXJ0YWluIHRoZW0sIGhlIHNlbnQgaGlzIGJvZHkgc2VydmFudCBBZXNjaHJpb24gdG8gbXkgZmF0aGVyIGFuZCBiYWRlCiAgICAgICAgICAgICAgICAgICAgaGltIGFzayBmb3IgdGhlIGxvYW4gb2Ygc29tZSBiZWRkaW5nIGFuZCBjbG9ha3MgYW5kIHR3byBzaWx2ZXIgYm93bHMgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgYm9ycm93IGEgbWluYSBvZiBzaWx2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['49.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbXkgZmF0aGVyLAogICAgICAgICAgICAgICAgICAgIGhlYXJpbmcgZnJvbSBBZXNjaHJpb24sIHRoZSBib2R5LXNlcnZhbnQgb2YgdGhlIGRlZmVuZGFudCwgdGhhdCB0aGV5IGhhZCBhcnJpdmVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSB1cmdlbnQgbmVlZCBmb3Igd2hpY2ggdGhlIHJlcXVlc3Qgd2FzIG1hZGUsIGJvdGggc3VwcGxpZWQgdGhlIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICBmb3Igd2hpY2ggdGhlIHNsYXZlIGhhZCBjb21lIGFuZCBsZW50IHRoZSBtaW5hIG9mIHNpbHZlciB3aGljaCBoZSBhc2tlZCB0bwogICAgICAgICAgICAgICAgICAgIGJvcnJvdy4gV2VsbCwgd2hlbiBoZSBoYWQgYmVlbiBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZSwgdGhlIGRlZmVuZGFudCBmb3VuZAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaW4gc29yZSBzdHJhaXRzIGZvciBtb25leSB0byBwYXkgaGlzIHByaXZhdGUgZGVidHMgYW5kIHRoZSB0YXhlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSwgYW5kIG15IGZhdGhlciwgc2VlaW5nIHRoaXMsIGRpZCBub3QgdmVudHVyZSB0byBkZW1hbmQgcmVwYXltZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IGF0IG9uY2U7IDwvdHJhbnNsYXRpb24+"
translation['49.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IsIHdoaWxlIGhlIGRpZCBub3QgdGhpbmsKICAgICAgICAgICAgICAgICAgICB0aGF0IFRpbW90aGV1cyB3b3VsZCBkZWZyYXVkIGhpbSB3aGVuIGhlIGhhZCB0aGUgbWVhbnMgdG8gcGF5LCBoZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBzZWUgYW55IHdheSB0byBleGFjdCBwYXltZW50IGZyb20gaGltIHdoZW4gaGUgd2FzIHdpdGhvdXQgbWVhbnMuIFNvLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBkZXBhcnR1cmUgb2YgQWxjZXRhcyBhbmQgSmFzb24sIEFlc2NocmlvbiwgdGhlIGRlZmVuZGFudCdzCiAgICAgICAgICAgICAgICAgICAgYm9keS1zZXJ2YW50LCBicm91Z2h0IGJhY2sgdGhlIGJlZGRpbmcgYW5kIHRoZSBjbG9ha3MsIGJ1dCBoZSBkaWQgbm90IHJldHVybiB0aGUKICAgICAgICAgICAgICAgICAgICB0d28gYm93bHMsIGZvciB3aGljaCBoZSBoYWQgYXNrZWQgYXQgdGhlIHRpbWUgaGUgYm9ycm93ZWQgdGhlIGJlZGRpbmcgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1pbmEgb2Ygc2lsdmVyLiwgd2hlbiBBbGNldGFzIGFuZCBKYXNvbiBhcnJpdmVkIGF0IHRoZSBkZWZlbmRhbnQncyBob3VzZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aGVuIGhlIHdhcyBhYm91dCB0byBsZWF2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IHRvIHRha2Ugc2VydmljZSB3aXRoIHRoZSBraW5nLCBhbmQgaGFkIGFycmFuZ2VkIHRvIHNhaWwgYXMgdGhlIGtpbmcncwogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgdG8gY2Fycnkgb24gdGhlIEVneXB0aWFuIHdhciwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgaGF2ZSB0byBzdWJtaXQKICAgICAgICAgICAgICAgICAgICBhbiBhY2NvdW50IGFuZCB2b3VjaGVycyBmb3IgaGlzIG1pbGl0YXJ5IGFkbWluaXN0cmF0aW9uIGhlcmUsIGhlIHNlbnQgZm9yIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHRvIGNvbWUgdG8gdGhlIFBhcmFsaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbW9udW1lbnQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFBlaXJhZXVzIG9mIHRoZSBBdHRpYyBoZXJvIFBhcmFsdXMuPC9ub3RlPiB0aGFua2VkIGhpbSBmb3IgaGlzIGZvcm1lcgogICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzIHRvIGhpbSwgPC90cmFuc2xhdGlvbj4="
translation['49.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQsIGludHJvZHVjaW5nIHRvIGhpbQogICAgICAgICAgICAgICAgICAgIFBoaWxvbmRhcywgYSBNZWdhcmlhbiBieSBiaXJ0aCwgYnV0IG9uZSB3aG8gcmVzaWRlZCBhcyBhbiBhbGllbiBhdAogICAgICAgICAgICAgICAgICAgIEF0aGVucyzigJRhIG1hbiB3aG8gYXQgdGhhdCB0aW1lIHdhcyBsb3lhbGx5IGRldm90ZWQgdG8gdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIGFuZCB3YXMgZW1wbG95ZWQgaW4gaGlzIHNlcnZpY2XigJRoZSBiZWdnZWQgbXkgZmF0aGVyLCB0aGF0IHdoZW4KICAgICAgICAgICAgICAgICAgICBQaGlsb25pZGFzIO+8iHdob20gaGUgdGhlbiBpbnRyb2R1Y2VkIHRvIGhpbe+8iSBzaG91bGQgY29tZSBiYWNrCiAgICAgICAgICAgICAgICAgICAgZnJvbSBNYWNlZG9uaWEgYnJpbmdpbmcgc29tZSB0aW1iZXIsIHdoaWNoIGhhZCBiZWVuIGdpdmVuIHRvIHRoZSBkZWZlbmRhbnQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgQW15bnRhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QW15bnRhcyB3YXMga2luZyBvZgogICAgICAgICAgICAgICAgICAgICAgICBNYWNlZG9uaWEuPC9ub3RlPiBoZSB3b3VsZCBzdXBwbHkgaGltIHdpdGggbW9uZXkgZm9yIHRoZSBmcmVpZ2h0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHRpbWJlciwgYW5kIGxldCBoaW0gZGVsaXZlciB0aGUgdGltYmVyIHRvIHRoZSBkZWZlbmRhbnQncyBob3VzZSBpbiBQZWlyYWV1czsgZm9yCiAgICAgICAgICAgICAgICAgICAgaGUgZGVjbGFyZWQgdGhlIHRpbWJlciBiZWxvbmdlZCB0byBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['49.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHRpbWUgaW4gcHJlZmVycmluZyB0aGlzIHJlcXVlc3QsIGhlIG1hZGUgc3RhdGVtZW50cyB3aGljaCBhcmUgcXVpdGUKICAgICAgICAgICAgICAgICAgICBpbmNvbnNpc3RlbnQgd2l0aCBoaXMgcHJlc2VudCBhY3Rpb25zLiBGb3IgaGUgc2FpZCB0aGF0IGV2ZW4gaWYgaGUgc2hvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIG9idGFpbiB3aGF0IGhlIGFza2VkIG9mIG15IGZhdGhlciwgaGUgd291bGQgbm90IGJlIGFuZ3J5LCBhcyBhbm90aGVyIG1pZ2h0IHdobwogICAgICAgICAgICAgICAgICAgIGZhaWxlZCB0byBvYnRhaW4gd2hhdCBoZSB3YW50ZWQsIGJ1dCB3b3VsZCBzaG93IGhpcyBncmF0aXR1ZGUsIGlmIGhlIHNob3VsZCBldmVyCiAgICAgICAgICAgICAgICAgICAgZmluZCBoaW1zZWxmIGFibGUgdG8gZG8gc28sIGZvciB0aGUgc2VydmljZXMgd2hpY2ggbXkgZmF0aGVyIGhhZCByZW5kZXJlZCBoaW0gYXQKICAgICAgICAgICAgICAgICAgICBoaXMgcmVxdWVzdC4gT24gaGVhcmluZyB0aGlzIG15IGZhdGhlciB3YXMgcGxlYXNlZCBhdCBoaXMgd29yZHMgYW5kIGNvbW1lbmRlZAogICAgICAgICAgICAgICAgICAgIGhpbSBmb3IgcmVtZW1iZXJpbmcgdGhlIGZhdm9ycyBzaG93biBoaW0sIGFuZCBwcm9taXNlZCB0byBkbyBhbGwgdGhhdCBoZSBhc2tlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5UaW1vdGhldXMsIHRoZW4sIGFmdGVyIHRoaXMgc2V0IHNhaWwgdG8KICAgICAgICAgICAgICAgICAgICBqb2luIHRoZSBraW5nJ3MgZ2VuZXJhbHMsIGJ1dCBQaGlsb25kYXMsIHRvIHdob20gaGUgaGFkIHByZXNlbnRlZCBteSBmYXRoZXIgYXMKICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIHdvdWxkIHBheSB0aGUgZnJlaWdodCwgd2hlbiBoZSBzaG91bGQgY29tZSBiYWNrIHdpdGggdGhlIHRpbWJlciwgc2V0IG91dAogICAgICAgICAgICAgICAgICAgIG9uIGhpcyBqb3VybmV5IHRvIE1hY2Vkb25pYS4gVGhlIHRpbWUgd2FzIGFib3V0IHRoZSBtb250aCBUaGFyZ2VsaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGFyZ2VsaW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXR0ZXIgaGFsZiBvZiBNYXkKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBwcmlvciBoYWxmIG9mIEp1bmUuPC9ub3RlPiBpbiB0aGUgYXJjaG9uc2hpcCBvZiBBc3RlaXVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZm9sbG93aW5nIHllYXIgUGhpbG9uZGFzIGNhbWUgYmFjayBmcm9tCiAgICAgICAgICAgICAgICAgICAgTWFjZWRvbmlhLCBicmluZ2luZyB0aGUgdGltYmVyLCB3aGlsZSBUaW1vdGhldXMgd2FzIGFic2VudCBpbiB0aGUga2luZydzCiAgICAgICAgICAgICAgICAgICAgc2VydmljZS4gSGUgYXBwcm9hY2hlZCBteSBmYXRoZXIgYW5kIGFza2VkIGhpbSB0byBmdXJuaXNoIHRoZSBmcmVpZ2h0IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1iZXIsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgc2V0dGxlIHdpdGggdGhlIHNoaXBvd25lciwgYXMgVGltb3RoZXVzIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZ2dlZCBteSBmYXRoZXIgdG8gZG8sIHdoZW4gaGUgd2FzIGFib3V0IHRvIHNhaWwgYW5kIGhhZCBpbnRyb2R1Y2VkIFBoaWxvbmRhcwogICAgICAgICAgICAgICAgICAgIHRvIGhpbS4gU28gbXkgZmF0aGVyIHRvb2sgaGltIHRvIHRoZSBiYW5rIGFuZCBvcmRlcmVkIFBob3JtaW8gdG8gcGF5IGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICBmcmVpZ2h0IG9mIHRoZSB0aW1iZXIsIG9uZSB0aG91c2FuZCBzZXZlbiBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hZS4gPC90cmFuc2xhdGlvbj4="
translation['49.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUGhvcm1pbyBjb3VudGVkIG91dCB0aGUgbW9uZXksIGFuZCBzZXQgZG93bgogICAgICAgICAgICAgICAgICAgIFRpbW90aGV1cyBhcyBvd2luZyBpdCDvvIhmb3IgaXQgd2FzIGhlIHdobyBoYWQgYXNrZWQgbXkgZmF0aGVyIHRvIGZ1cm5pc2gKICAgICAgICAgICAgICAgICAgICB0aGUgZnJlaWdodCBmb3IgdGhlIHRpbWJlciwgYW5kIHRoZSB0aW1iZXIgd2FzIGhpc++8iSwgYW5kIGhlIHdyb3RlIGEKICAgICAgICAgICAgICAgICAgICBtZW1vcmFuZHVtIG9mIHRoZSBwdXJwb3NlIGZvciB3aGljaCB0aGUgbW9uZXkgd2FzIHJlY2VpdmVkLCBhbmQgdGhlIG5hbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVyc29uIHdobyByZWNlaXZlZCBpdC4gVGhlIGRhdGUgb2YgdGhlIHRyYW5zYWN0aW9uIHdhcyB0aGUgYXJjaG9uc2hpcCBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbGNpc3RoZW5lcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFyY2hvbnNoaXAgb2YgQWxjaXN0aGVuZXMKICAgICAgICAgICAgICAgICAgICAgICAgZmFsbHMgaW4gMzcyLTM3MSBCLkMuPC9ub3RlPiB0aGUgeWVhciBhZnRlciBUaW1vdGhldXMgc2V0IHNhaWwgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIHNlcnZpY2Ugd2l0aCB0aGUga2luZy4gPC90cmFuc2xhdGlvbj4="
translation['49.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5BYm91dCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgVGltb3N0aGVuZXMgb2YgQWVnaWxpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BZWdpbGlhIHdhcyBhIGRlbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlIEFudGlvY2hpcy48L25vdGU+IGFsc28gYXJyaXZlZCBob21lIGZyb20gYSBqb3VybmV5IGFicm9hZCB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBtYWRlIG9uIHByaXZhdGUgYnVzaW5lc3MuIFRpbW9zdGhlbmVzIHdhcyBhIGZyaWVuZCBhbmQgcGFydG5lciBvZiBQaG9ybWlvLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIHNldCBzYWlsIGhlIGhhZCBnaXZlbiB0byBQaG9ybWlvIHRvIHB1dCBhd2F5IGZvciBoaW0gYWxvbmcgd2l0aCBvdGhlcgogICAgICAgICAgICAgICAgICAgIGFydGljbGVzIHR3byBib3dscyBvZiBMeWNpYW4gd29ya21hbnNoaXAuIEJ5IGNoYW5jZSB0aGUgYm95LCBub3Qga25vd2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlc2UgYm93bHMgd2VyZSB0aGUgcHJvcGVydHkgb2Ygc29tZW9uZSBlbHNlLCBnYXZlIHRoZW0gdG8gQWVzY2hyaW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICBib2R5LXNlcnZhbnQgb2YgdGhlIGRlZmVuZGFudCwgd2hlbiBoZSB3YXMgc2VudCB0byBteSBmYXRoZXIgYnkgVGltb3RoZXVzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCB0aGUgYmVkZGluZyBhbmQgdGhlIGNsb2FrcyBhbmQgdGhlIGJvd2xzLCBhbmQgYm9ycm93ZWQgdGhlIG1pbmEgb2YKICAgICAgICAgICAgICAgICAgICBzaWx2ZXIgYXQgdGhlIHRpbWUgd2hlbiBBbGNldGFzIGFuZCBKYXNvbiBjYW1lIHRvIHRoZSBkZWZlbmRhbnQncyBob3VzZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFRpbW9zdGhlbmVzIHJlYWNoZWQgaG9tZSBhbmQgYXNrZWQKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHJldHVybiBvZiB0aGUgYm93bHMsIFRpbW90aGV1cyBiZWluZyBzdGlsbCBhYnJvYWQgaW4gdGhlIGtpbmcncyBzZXJ2aWNlLAogICAgICAgICAgICAgICAgICAgIG15IGZhdGhlciBwZXJzdWFkZWQgaGltIHRvIGFjY2VwdCB0aGUgdmFsdWUgb2YgdGhlIGJvd2xzLCBhcyBtdWNoIGFzIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIHdvcnRoIGJ5IHdlaWdodCwgbmFtZWx5IHR3byBodW5kcmVkIGFuZCB0aGlydHktc2V2ZW4gZHJhY2htYWUuIFNvIGhlIHBhaWQgdG8KICAgICAgICAgICAgICAgICAgICBUaW1vc3RoZW5lcyB0aGUgdmFsdWUgb2YgdGhlIGJvd2xzIGFuZCBlbnRlcmVkIG9uIGhpcyBib29rcyB0aGUgZGVmZW5kYW50IGFzCiAgICAgICAgICAgICAgICAgICAgb3dpbmcgd2hhdCBoZSBwYWlkIHRvIFRpbW9zdGhlbmVzIGZvciB0aGUgYm93bHMgaW4gYWRkaXRpb24gdG8gdGhlIHJlc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVidCB3aGljaCB0aGUgZGVmZW5kYW50IG93ZWQgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBhbGwgdGhlc2Ugc3RhdGVtZW50cyBvZiBtaW5lIGFyZSB0cnVlIHRoZQogICAgICAgICAgICAgICAgICAgIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZSBkZXBvc2l0aW9ucyB3aGljaCBiZWFyIHVwb24gdGhlbTsgZmlyc3QsIHRoYXQgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSBhdCB0aGF0IHRpbWUgY2xlcmtzIGluIHRoZSBiYW5rIGFuZCBwYWlkIHRoZSBtb25leSBmcm9tIGl0cyBmdW5kcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwZXJzb25zIHRvIHdob20gVGltb3RoZXVzIGJhZGUgdGhlbSBwYXkgaXQsIGFuZCB0aGVuIHRoYXQgb2YgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB0aGUgcHJpY2Ugb2YgdGhlIGJvd2xzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGF2ZSBsZWFybmVkLCB0aGVuLCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zIHdoaWNoIGhhdmUganVzdCBiZWVuIHJlYWQsIHRoYXQgSSBhbSB0ZWxsaW5nIHlvdSBub3RoaW5nIGJ1dCB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCByZWdhcmRpbmcgdGhlIG1hdHRlcnMgd2hpY2ggSSBtZW50aW9uZWQuIEFuZCB0aGF0IHRoZSBkZWZlbmRhbnQgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGFkbWl0cyB0aGF0IHRoZSB0aW1iZXIgYnJvdWdodCBieSBQaGlsb25kYXMgd2FzIGRlbGl2ZXJlZCB0byBoaXMgaG91c2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMs4oCUdGhpcywgdG9vLCBpcyBwcm92ZWQgYnkgdGhlIGRlcG9zaXRpb24gd2hpY2ggd2lsbCBiZSByZWFkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHlvdS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['49.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1iZXIsIHRoZW4sIHdoaWNoIFBoaWxvbmRhcyBicm91Z2h0IHdhcyB0aGUgcHJvcGVydHkgb2YgdGhlIGRlZmVuZGFudCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBoaXMgb3duIHRlc3RpbW9ueSB0byBwcm92ZTsgZm9yIGhlIGFkbWl0dGVkIGJlZm9yZSB0aGUgYXJiaXRyYXRvciB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCB0byBoaXMgaG91c2UgaW4gUGVpcmFldXMsIGFzIHRob3NlIHdobyBoZWFyZCBoaW0gaGF2ZSB0ZXN0aWZpZWQuIEJ1dAogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMgdGhpcyBJIHNoYWxsIHRyeSB0byBwcm92ZSB0byB5b3UgYnkgY2lyY3Vtc3RhbnRpYWwgZXZpZGVuY2UgdGhhdCBJIGFtCiAgICAgICAgICAgICAgICAgICAgdGVsbGluZyB0aGUgdHJ1dGguIDwvdHJhbnNsYXRpb24+"
translation['49.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZG8geW91IHN1cHBvc2UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB0aGF0LCBpZiB0aGUgdGltYmVyIGhhZCBub3QgYmVlbiB0aGUgcHJvcGVydHkgb2YgVGltb3RoZXVzLCBhbmQgaWYgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgbm90IGJlZ2dlZCBteSBmYXRoZXLigJRhdCB0aGUgdGltZSBoZSBpbnRyb2R1Y2VkIFBoaWxvbmRhcyB0byBoaW0sCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSB3YXMgYWJvdXQgdG8gc2V0IHNhaWwgdG8gam9pbiB0aGUga2luZydzIGdlbmVyYWxz4oCUdG8gcHJvdmlkZQogICAgICAgICAgICAgICAgICAgIHRoZSBmcmVpZ2h0LCBteSBmYXRoZXIgd291bGQgZXZlciBoYXZlIGFsbG93ZWQgUGhpbG9uZGFzIHRvIGNhcnJ5IHRoZSB0aW1iZXIKICAgICAgICAgICAgICAgICAgICBhd2F5IGZyb20gdGhlIGhhcmJvciwgc2VlaW5nIHRoYXQgaXQgd2FzIHBsZWRlZ2VkIGFzIHNlY3VyaXR5IHRvIGhpbSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJlaWdodCwgYW5kIHdvdWxkIG5vdCByYXRoZXIgaGF2ZSBzZXQgb25lIG9mIGhpcyBzZXJ2YW50cyB0byBrZWVwIHdhdGNoIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlIHByaWNlIGFzIHRoZSB0aW1iZXIgd2FzIHNvbGQsIHVudGlsIGhlIGhhZCByZWNvdmVyZWQgaGlzIG1vbmV5LCBpZgogICAgICAgICAgICAgICAgICAgIHdlIHN1cHBvc2UgdGhhdCB0aGUgdGltYmVyIHdhcyB0aGUgcHJvcGVydHkgb2YgUGhpbG9uZGFzIGFuZCB3YXMgYnJvdWdodCBpbiBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgc2FrZSBvZiB0cmFkZT8gPC90cmFuc2xhdGlvbj4="
translation['49.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBiZXNpZGVzIHRoaXMsIGRvZXMgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtIHRvIGFueW9uZSBsaWtlbHksIHRoYXQgaWYgVGltb3RoZXVzIGhhZCBub3QgYmlkZGVuIG15IGZhdGhlciB0byBzdXBwbHkgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJlaWdodCBmb3IgdGhlIHRpbWJlciBnaXZlbiB0byBoaW0gYnkgQW15bnRhcywgbXkgZmF0aGVyIHdvdWxkIGhhdmUgdHJ1c3RlZAogICAgICAgICAgICAgICAgICAgIFBoaWxvbmRhcywgYW5kIGhhdmUgc3VmZmVyZWQgaGltIHRvIGRlbGl2ZXIgdGhlIHRpbWJlciB0byB0aGUgZGVmZW5kYW50J3MgaG91c2U/CiAgICAgICAgICAgICAgICAgICAgT3IsIGhvdyBpcyBpdCBwb3NzaWJsZSB0aGF0IFBoaWxvbmRhcywgYXMgaXMgc3RhdGVkIGJ5IHRoZSBkZWZlbmRhbnQsIGJyb3VnaHQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgdGltYmVyIGZvciB0aGUgc2FrZSBvZiB0cmFkZSwgYW5kIHlldCB0aGF0IHRoZSBkZWZlbmRhbnQgb24gaGlzIHJldHVybiB1c2VkCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aW1iZXIgZm9yIHRoZSBidWlsZGluZyBvZiBoaXMgaG91c2U/IDwvdHJhbnNsYXRpb24+"
translation['49.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlIHRoaXMgYWxzbywgdGhhdCBtYW55IHdvcnRoeSBjaXRpemVucyB3ZXJlIGZyaWVuZHMgb2YgdGhlIGRlZmVuZGFudCBhbmQKICAgICAgICAgICAgICAgICAgICBsb29rZWQgYWZ0ZXIgaGlzIGFmZmFpcnMgd2hpbGUgVGltb3RoZXVzIHdhcyBhYnJvYWQgaW4gdGhlIHNlcnZpY2Ugb2YgdGhlIGtpbmcsCiAgICAgICAgICAgICAgICAgICAgYW5kIHlldCBub3Qgb25lIG9mIHRoZXNlIGhhcyBkYXJlZCB0byB0ZXN0aWZ5IG9uIGhpcyBiZWhhbGYgZWl0aGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaGlsb25kYXMgZGlkIG5vdCByZWNlaXZlIGZyb20gdGhlIGJhbmsgdGhlIGZyZWlnaHQgb2YgdGhlIHRpbWJlciwgb3IgdGhhdCwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcmVjZWl2ZWQgaXQsIGhlIHBhaWQgaXQgYmFjazsgb3IsIGFnYWluLCB0aGF0IGFueSBvbmUgb2YgdGhlbSBzZXR0bGVkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBmcmVpZ2h0IG9mIHRoZSB0aW1iZXIgd2hpY2ggUGhpbG9uZGFzIGJyb3VnaHQgYW5kIHdoaWNoIGhhZCBiZWVuIGdpdmVuIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCBieSBBbXludGFzLiBGb3IgdGhleSBkZWVtIGl0IGEgbWF0dGVyIG9mIGhpZ2hlciBpbXBvcnQgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRvIHByZXNlcnZlIHRoZWlyIGNoYXJhY3RlciBhcyB3b3J0aHkgYW5kIGhvbm9yYWJsZSBtZW4gdGhhbiB0byBkbyBhCiAgICAgICAgICAgICAgICAgICAgZmF2b3IgdG8gVGltb3RoZXVzIGJ5IGdpdmluZyBmYWxzZSB0ZXN0aW1vbnkuIDwvdHJhbnNsYXRpb24+"
translation['49.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhleSBkZWNsYXJlZCB0aGF0IHRoZXkgd291bGQgbm90IHRlc3RpZnkgdG8gdGhlIHRydXRoIGFnYWluc3QgaGltOyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGV5IHNhaWQgaGUgd2FzIHRoZWlyIGZyaWVuZC4gU2luY2UsIHRoZW4sIG5vIG9uZSBvZiB0aG9zZSB3aG8gYXJlIGhpcyBmcmllbmRzLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG8gbG9va2VkIGFmdGVyIGhpcyBhZmZhaXJzIHdoZW4gaGUgd2FzIGFicm9hZCBpbiB0aGUgc2VydmljZSBvZiB0aGUga2luZywKICAgICAgICAgICAgICAgICAgICBoYXMgdmVudHVyZWQgdG8gdGVzdGlmeSBlaXRoZXIgdGhhdCBQaGlsb25kYXMgZGlkIG5vdCByZWNlaXZlIGZyb20gdGhlIGJhbmsgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJlaWdodCBmb3IgdGhlIHRpbWJlciwgb3IgdGhhdCBhbnkgb25lIG9mIHRoZW0gcGFpZCBpdCwgaXMgaXQgbm90IHJlYXNvbmFibGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBzaG91bGQgYmVsaWV2ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlIHRydXRoPyA8L3RyYW5zbGF0aW9uPg=="
translation['49.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgaGUgd2lsbCBub3QgdmVudHVyZSB0byBzYXkgdGhpcywgdGhhdCBhbnlvbmUgb3RoZXIgdGhhbiBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBwYWlkIHRoZSBmcmVpZ2h0IGZvciB0aGUgdGltYmVyIHdoaWNoIFBoaWxvbmRhcyBicm91Z2h0LiBJZiBoZSBkb2VzCiAgICAgICAgICAgICAgICAgICAgaW5zaXN0IHVwb24gdGhpcyBhcmd1bWVudCwgZGVtYW5kIG9mIGhpbSB0aGF0IGhlIHByb2R1Y2UgYmVmb3JlIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIG9mIHRoZSBwZXJzb24gd2hvIHBhaWQgdGhlIGZyZWlnaHQgZm9yIHRoZSB0aW1iZXIuIEZvciBpdCBpcyBhZG1pdHRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIGhpbXNlbGYgYWJyb2FkIGluIHRoZSBraW5nJ3Mgc2VydmljZSwgYW5kIGFzIGZvciBQaGlsb25kYXMsIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBzZW50IHRvIGZldGNoIHRoZSB0aW1iZXIgYW5kIHdob20gaGUgaW50cm9kdWNlZCB0byBteSBmYXRoZXLigJR5b3UgZm91bmQKICAgICAgICAgICAgICAgICAgICBvbiB5b3VyIHJldHVybiBmcm9tIHRoZSBraW5nJ3Mgc2VydmljZSwgVGltb3RoZXVzLCB0aGF0IGhlIHdhcyBkZWFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBtdXN0IGJlLCB0aGVuLCB0aGF0IHNvbWUgb3RoZXIgb2YgeW91ciByZWxhdGl2ZXMKICAgICAgICAgICAgICAgICAgICBhbmQgZnJpZW5kcywgd2hvbSB5b3UgbGVmdCB0byBsb29rIGFmdGVyIHlvdXIgYWZmYWlycyB3aGVuIHlvdSB3ZXJlIGFib3V0IHRvIGdvCiAgICAgICAgICAgICAgICAgICAgYWJyb2FkLCBrbm93cyBmcm9tIHdoYXQgc291cmNlIFBoaWxvbmRhcyBnb3QgdGhlIGZyZWlnaHQgZm9yIHRoZSB0aW1iZXIgYW5kIHBhaWQKICAgICAgICAgICAgICAgICAgICB0aGUgc2hpcG93bmVyLCBpZiB5b3UgZGVueSB0aGF0IHlvdSBpbnRyb2R1Y2VkIG15IGZhdGhlciB0byBQaGlsb25kYXMsIG9yIHRoYXQKICAgICAgICAgICAgICAgICAgICBQaGlsb25kYXMgZ290IHRoZSBmcmVpZ2h0IGZvciB0aGUgdGltYmVyIGZyb20gbXkgZmF0aGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB5b3UgY2Fubm90IHByb2R1Y2UgYSBkZXBvc2l0aW9uIGZyb20gYW55IG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBmcmllbmRzIHRvIHByb3ZlIHRoYXQgdGhlIGZyZWlnaHQgZm9yIHRoZSB0aW1iZXIgd2FzIG5vdCByZWNlaXZlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGJhbmssIHdoaWxlIHlvdSB3ZXJlIGFicm9hZDsgdGhlcmVmb3JlIG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvIHRoaW5ncyBmb2xsb3dzOgogICAgICAgICAgICAgICAgICAgIGVpdGhlciB5b3UgYXJlIG9uIGdvb2QgdGVybXMgd2l0aCBubyBvbmUgb2YgeW91ciBmcmllbmRzIGFuZCBoYXZlIG5vIGNvbmZpZGVuY2UKICAgICAgICAgICAgICAgICAgICBpbiBhbnkgb2YgeW91ciBjb25uZWN0aW9ucywgb3IgZWxzZSwgdGhvdWdoIGtub3dpbmcgd2VsbCB0aGF0IFBoaWxvbmRhcyBkaWQKICAgICAgICAgICAgICAgICAgICByZWNlaXZlIHRoZSBmcmVpZ2h0IGZvciB0aGUgdGltYmVyIGZyb20gbXkgZmF0aGVyLCB0byB3aG9tIHlvdSBpbnRyb2R1Y2VkIGhpbQogICAgICAgICAgICAgICAgICAgIHdoZW4geW91IHdlcmUgYWJvdXQgdG8gc2V0IG91dCBvbiB5b3VyIHZveWFnZSwgeW91IHNlZSBmaXQgdG8gcm9iIHVzLCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBjYW4sIGFuZCBlbnJpY2ggeW91cnNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['49.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5PbiBteSBwYXJ0LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgaW4gYWRkaXRpb24gdG8gdGhlIGRlcG9zaXRpb24gd2hpY2ggSSBoYXZlIHByb2R1Y2VkIGJlZm9yZSB5b3Ugb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXQgdGhlIHRpbWUgd2VyZSBzZXJ2aW5nIGFzIGNsZXJrcyBpbiB0aGUgYmFuayBhbmQgd2hvIHBhaWQgdGhlIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHBlcnNvbnMgdG8gd2hvbSBUaW1vdGhldXMgYmFkZSB0aGVtIHBheSBpdCwgSSB3YXMgcmVhZHkgYWxzbyB0byBjb25maXJtCiAgICAgICAgICAgICAgICAgICAgbXkgc3RhdGVtZW50cyBieSBhbiBvYXRoLCB3aGljaCB0aGUgY2xlcmsgd2lsbCByZWFkIHRvIHlvdS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJPYXRoIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2F0aDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PYXRoPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlIGp1cnksIG15IGZhdGhlciBub3Qgb25seQogICAgICAgICAgICAgICAgICAgIHdyb3RlIG91dCBhbmQgbGVmdCB0byBtZSBhIHJlY29yZCBvZiBoaXMgY3JlZGl0cywgYnV0IGFsc28gZHVyaW5nIGhpcyBpbGxuZXNzCiAgICAgICAgICAgICAgICAgICAgdG9sZCBtZSBvZiBlYWNoIHBhcnRpY3VsYXIgZGVidCB0aGF0IHdhcyBkdWUgdG8gaGltLCB0aGUgcGVyc29uIGluIHdob3NlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiB0aGUgbW9uZXkgd2FzLCBhbmQgdGhlIHB1cnBvc2UgZm9yIHdoaWNoIGl0IHdhcyByZWNlaXZlZDsgYW5kIGhlIG1hZGUKICAgICAgICAgICAgICAgICAgICB0aGVzZSBzdGF0ZW1lbnRzIHRvIG15IGJyb3RoZXIgYWxzby4gVG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBpbgogICAgICAgICAgICAgICAgICAgIHRoaXMsIHJlYWQsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb24gb2YgbXkgYnJvdGhlci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['49.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzIHdhcyBsZWZ0IGJ5IG15IGZhdGhlciBvd2luZyB1cyB0aGUgbW9uZXkgYXMgYSBkZWJ0b3IgZm9yIHdoaWNoIEkgYW0KICAgICAgICAgICAgICAgICAgICBzdWluZyBoaW0sIGFuZCB0aGF0IHRoaXMgaXMgYSBwYXJ0IG9mIG15IHNoYXJlLCBteSBicm90aGVyIGhhcyB0ZXN0aWZpZWQsIGFuZCBzbwogICAgICAgICAgICAgICAgICAgIGhhcyBQaG9ybWlvLCB3aG8gcGFpZCB0aGUgbW9uZXk7IGFuZCBJIHdhcyByZWFkeSBjb25maXJtIHRoZSBmYWN0IGJ5IGFuIG9hdGguCiAgICAgICAgICAgICAgICAgICAgQnV0IHdoZW4gdGhlIGRlZmVuZGFudCBjaGFsbGVuZ2VkIG1lIGJlZm9yZSB0aGUgYXJiaXRyYXRvciwgYmlkZGluZyBtZSBicmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBib29rcyBmcm9tIHRoZSBiYW5rIGFuZCBkZW1hbmRpbmcgY29waWVzLCBhbmQgc2VudCBQaHJhc2llbmRlcyB0byB0aGUgYmFuaywgSQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgb3V0IHRoZSBib29rcyBhbmQgYWxsb3dlZCBQaHJhc2llbmRlcyB0byBleGFtaW5lIHRoZW0gYW5kIHRvIGNvcHkgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVudHJpZXMgb2YgYWxsIHRoZSBzdW1zIHRoYXQgVGltb3RoZXVzIG93ZWQuIFRvIHByb3ZlIHRoYXQgdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYWRtaXR0ZWQgaGF2aW5nIHJlY2VpdmVkIHRoZSBjb3BpZXMsIHBsZWFzZSByZWFkIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB0aGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRoZSBib29rcyB0byB0aGUgYXJiaXRyYXRvci4gUGhvcm1pbyBhbmQgRXVwaHJhZXVzLCB3aG8gaGFkIHBhaWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgdG8gdGhlIHBlcnNvbnMgZGVzaWduYXRlZCBieSBUaW1vdGhldXMsIHdlcmUgcHJlc2VudCwgYW5kIHRoZXkgZXhwb3NlZCBoaXMKICAgICAgICAgICAgICAgICAgICBmYWxzZWhvb2RzIGJ5IHNob3dpbmcgdGhlIGRhdGUgYXQgd2hpY2ggaGUgaGFkIGNvbnRyYWN0ZWQgZWFjaCBsb2FuLCB0aGUgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgd2hvIHJlY2VpdmVkIHRoZSBtb25leSwgYW5kIHRoZSB1c2UgZm9yIHdoaWNoIGhlIGV4cGVuZGVkIGl0LiBSZWdhcmRpbmcgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIHRocmVlIGh1bmRyZWQgYW5kIGZpZnR5LW9uZSBkcmFjaG1hZSB0d28gb2JvbHMsIHdoaWNoIGhlIGJvcnJvd2VkIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IGxvYW4gaW4gdGhlIG1vbnRoIE11bmljaGlvbiBpbiB0aGUgYXJjaG9uc2hpcCBvZiBTb2NyYXRpZGFzLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIGFib3V0IHRvIHNldCBvdXQgb24gaGlzIHZveWFnZSwgYW5kIHdoaWNoIHRoZSBkZWZlbmRhbnQgb3JkZXJlZCB0byBiZSBwYWlkCiAgICAgICAgICAgICAgICAgICAgdG8gQW50aW1hY2h1cywgaGlzIHRyZWFzdXJlciwgaGUgZGVjbGFyZWQgdGhhdCBteSBmYXRoZXIgbGVudCB0aGUgbW9uZXkgdG8KICAgICAgICAgICAgICAgICAgICBBbnRpbWFjaHVzIG9uIGhpcyBvd24gcHJpdmF0ZSBhY2NvdW50LCBhbmQgdGhhdCBoZSDvvIh0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnTvvIkgZGlkIG5vdCBoaW1zZWxmIHJlY2VpdmUgaXQuIDwvdHJhbnNsYXRpb24+"
translation['49.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGUgdHJ1dGggb2YgdGhpcyBzdGF0ZW1lbnQgaGUgaGFzIHByb2R1Y2VkIG5vIHdpdG5lc3MsIGJ1dCBpcwogICAgICAgICAgICAgICAgICAgIHZpZ29yb3VzIGluIGhpcyBhc3NlcnRpb24sIGluIG9yZGVyIHRoYXQgaXQgbWF5IG5vdCBhcHBlYXIgdGhhdCBoZSBpcyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgZGVmcmF1ZGluZyB1cywgYnV0IHRoYXQgQW50aW1hY2h1cyBib3Jyb3dlZCB0aGUgbW9uZXkuIEFuZCB5ZXQsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICBJIHdpbGwgZ2l2ZSB5b3UgYSBjb252aW5jaW5nIHByb29mIHRoYXQgbXkgZmF0aGVyIGxlbnQgdGhlIG1vbmV5LCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBBbnRpbWFjaHVzLCBidXQgdG8gVGltb3RoZXVzIHdoZW4gaGUgd2FzIGFib3V0IHRvIHNhaWwuIEZvciB3aGljaCBkbyB5b3UgdGhpbmsKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gdGhlIGVhc2llciBjb3Vyc2UgZm9yIG15IGZhdGhlciwgdG8gZmlsZSBhIGNsYWltIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlIG9mIEFudGltYWNodXMsIHdoZW4gaGlzIHByb3BlcnR5IHdhcyBjb25maXNjYXRlZCwgZm9yIHRoaXMgc3VtIGFzIGR1ZSB0bwogICAgICAgICAgICAgICAgICAgIGhpbSwgc3VwcG9zaW5nIGhlIGhhZCBsZW50IGl0IHRvIEFudGltYWNodXMsIDwvdHJhbnNsYXRpb24+"
translation['49.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5vciB0byB3YWl0IHVudGlsIHRoZSBkZWZlbmRhbnQgbWlnaHQgYmUgaW4gYmV0dGVyIGNpcmN1bXN0YW5jZXMgc28gYXMgdG8KICAgICAgICAgICAgICAgICAgICBjb2xsZWN0IGl0IGZyb20gaGltLCBzZWVpbmcgdGhhdCBoZSBoYWQgYXQgdGhhdCB0aW1lIGxpdHRsZSBob3BlIG9mIGRlbGl2ZXJhbmNlPwogICAgICAgICAgICAgICAgICAgIFN1cmVseSwgaWYgaGUgaGFkIGZpbGVkIHRoZSBjbGFpbSwgaGUgd291bGQgbm90IGhhdmUgYmVlbiBhdCBhIGxvc3MgdG8gZmluZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0IG1vbmV5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHdhcyBhIHNtYWxsIHN1bSB0byBjb3ZlcgogICAgICAgICAgICAgICAgICAgICAgICBjb3VydCBjaGFyZ2VzLjwvbm90ZT4gbm9yIHdvdWxkIHlvdSBoYXZlIGhhZCBhbnkgY2F1c2UgdG8gZGlzYmVsaWV2ZSBoaW0uCiAgICAgICAgICAgICAgICAgICAgRm9yIHlvdSBhbGwga25vdyB0aGF0IG15IGZhdGhlciBoYWQgbm8gd2lzaCB1bmp1c3RseSB0byBhY3F1aXJlIHB1YmxpYyBmdW5kcywKICAgICAgICAgICAgICAgICAgICBidXQgdGhhdCBoZSB3aWxsaW5nbHkgZXhwZW5kZWQgaGlzIG93biBtb25leSBpbiB5b3VyIHNlcnZpY2Ugd2hlbmV2ZXIgeW91IGJhZGUKICAgICAgICAgICAgICAgICAgICBoaW0gZG8gc287IDwvdHJhbnNsYXRpb24+"
translation['49.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYmVzaWRlcywgQ2FsbGlzdHJhdHVzLCB3aG8gc29sZAogICAgICAgICAgICAgICAgICAgIHRoZSBnb29kcyBvZiBBbnRpbWFjaHVzLCB3YXMgYSBmcmllbmQgb2YgaGlzLCBzbyB0aGF0IG15IGZhdGhlciB3YXMgbWVldGluZyBubwogICAgICAgICAgICAgICAgICAgIG9wcG9zaXRpb24uIFdoYXQgcG9zc2libGUgbW90aXZlIHRoZW4sIGNvdWxkIG15IGZhdGhlciBoYXZlIGhhZCB0byBsZWF2ZQogICAgICAgICAgICAgICAgICAgIFRpbW90aGV1cyBpbnNjcmliZWQgaW4gaGlzIGJvb2tzIGlzIG91ciBkZWJ0b3IsIGlmIGhlIGRpZCBub3QgcmVhbGx5IG93ZSB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSwgcmF0aGVyIHRoYW4gZmlsZSBoaXMgY2xhaW0gYW5kIHJlY292ZXIgaGlzIGRlYnQgZnJvbSB0aGUgY29uZmlzY2F0ZWQKICAgICAgICAgICAgICAgICAgICBlc3RhdGUgb2YgQW50aW1hY2h1cz8gPC90cmFuc2xhdGlvbj4="
translation['49.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHdpdGggcmVnYXJkIHRvIHRoZSBvbmUgdGhvdXNhbmQgZHJhY2htYWUgd2hpY2ggaGUgYm9ycm93ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIEFudGlwaGFuZXMgaW4gQ2FsYXVyZWlhIHRvIGRpc3RyaWJ1dGUgdG8gdGhlIEJvZW90aWFuIHRyaWVyYXJjaHMsd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhYm91dCB0byBzYWlsIGhvbWUgZm9yIGhpcyB0cmlhbCwgYW5kIHdoaWNoIGhlIHBhaWQgdG8gUGhpbGlwIHRoZSBzaGlwb3duZXIKICAgICAgICAgICAgICAgICAgICBhZnRlciBoZSBoYWQgZ290IHRoZW0gZnJvbSBteSBmYXRoZXIsIGhlIG1haW50YWlucyB0aGF0IHRoZSBCb2VvdGlhbiBhZG1pcmFsCiAgICAgICAgICAgICAgICAgICAgYm9ycm93ZWQgdGhlIG1vbmV5IGFuZCBnYXZlIG15IGZhdGhlciBzb21lIGNvcHBlciBhcyBzZWN1cml0eSBmb3IgaXQuIFRoYXQgdGhpcywKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBpcyB1bnRydWUsIEkgd2lsbCBnaXZlIHlvdSBhIGNvbnZpbmNpbmcgcHJvb2YuIDwvdHJhbnNsYXRpb24+"
translation['49.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIGl0IGlzIHByb3ZlZCB0aGF0IHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBib3Jyb3dlZCB0aGUgdGhvdXNhbmQgZHJhY2htYWUgaW4gQ2FsYXVyZWlhLCBhbmQgbm90IHRoZSBCb2VvdGlhbiBhZG1pcmFsOwogICAgICAgICAgICAgICAgICAgIHNlY29uZGx5LCB0aGF0IFBoaWxpcCBkZW1hbmRlZCBwYXltZW50IG9mIHRoZSB0aG91c2FuZCBkcmFjaG1hZSBoZXJlIGZyb20KICAgICAgICAgICAgICAgICAgICBUaW1vdGhldXMgYW5kIG5vdCBmcm9tIHRoZSBCb2VvdGlhbiBhZG1pcmFsLCBhbmQgdGhhdCBUaW1vdGhldXMgbWFkZSBwYXltZW50IGFuZAogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgQm9lb3RpYW4gYWRtaXJhbDsgZm9yIGl0IHdhcyBxdWl0ZSBwcm9wZXIgdGhhdCB0aGUgQm9lb3RpYW4gYWRtaXJhbAogICAgICAgICAgICAgICAgICAgIHNob3VsZCByZWNlaXZlIGZyb20gVGltb3RoZXVzIHRoZSBtYWludGVuYW5jZSBmb3IgdGhlIGNyZXdzIG9mIGhpcyBzaGlwcywgc2luY2UKICAgICAgICAgICAgICAgICAgICB0aGUgcGF5IGZvciB0aGUgdHJvb3BzIGNhbWUgb3V0IG9mIGEgY29tbW9uIGNvbnRyaWJ1dGlvbiwgYW5kIGl0IHdhcyB5b3UsCiAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzLCB3aG8gY29sbGVjdGVkIGFsbCB0aGUgbW9uZXkgZnJvbSB0aGUgYWxsaWVzLCBhbmQgeW91IHdlcmUgYm91bmQgdG8KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IGZvciBpdC4gPC90cmFuc2xhdGlvbj4="
translation['49.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwgc3VwcG9zaW5nIHRoZSBCb2VvdGlhbgogICAgICAgICAgICAgICAgICAgIGZsZWV0IGhhZCBkaXNiYW5kZWQgYW5kIHRoZSB0cm9vcHMgaGFkIGRpc3BlcnNlZCB0byB0aGVpciB2YXJpb3VzIGhvbWVzLCB0aGUKICAgICAgICAgICAgICAgICAgICBCb2VvdGlhbiBhZG1pcmFsIHdhcyBpbiBubyBkYW5nZXIgZnJvbSB0aGUgQXRoZW5pYW5zLCBub3Igd2FzIGFueSB0cmlhbAogICAgICAgICAgICAgICAgICAgIGltcGVuZGluZyBvdmVyIGhpbTsgeW91LCBob3dldmVyLCB3ZXJlIGluIHZlcnkgZ3JlYXQgZGFuZ2VyLCBhbmQgaW4geW91ciB1dHRlcgogICAgICAgICAgICAgICAgICAgIHRlcnJvciB5b3UgdGhvdWdodCBpdCB3b3VsZCBiZSBhIGdyZWF0IGFpZCB0byB5b3VyIGRlZmVuY2UsIGlmIHRoZSBCb2VvdGlhbgogICAgICAgICAgICAgICAgICAgIHRyaXJlbWVzIHNob3VsZCBzdGF5IHdpdGggdGhlIGZsZWV0IHVudGlsIHlvdXIgdHJpYWwgc2hvdWxkIGNvbWUgb2ZmLiBCZXNpZGVzLAogICAgICAgICAgICAgICAgICAgIGZyb20gd2hhdCBtb3RpdmUgb2YgZnJpZW5kc2hpcCBwcmF5LCB3b3VsZCBteSBmYXRoZXIgaGF2ZSBsZW50IHRoZSBvbmUgdGhvdXNhbmQKICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZSB0byB0aGUgQm9lb3RpYW4gYWRtaXJhbCB3aG9tIGhlIGRpZCBub3QgZXZlbiBrbm93PyBBaCwgYnV0IGhlIHNheXMgdGhlCiAgICAgICAgICAgICAgICAgICAgYWRtaXJhbCBwbGVkZ2VkIHNvbWUgY29wcGVyIGFzIHNlY3VyaXR5LiBIb3cgbXVjaCwgdGhlbj8gYW5kIGZyb20gd2hhdCBjb3VudHJ5CiAgICAgICAgICAgICAgICAgICAgd2FzIGl0IGltcG9ydGVkPyA8L3RyYW5zbGF0aW9uPg=="
translation['49.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnJvbSB3aGF0IHNvdXJjZSBkaWQgdGhlCiAgICAgICAgICAgICAgICAgICAgQm9lb3RpYW4gYWRtaXJhbCBnZXQgdGhlIGNvcHBlcj8gV2FzIGl0IGltcG9ydGVkIGJ5IHdheSBvZiB0cmFkZSwgb3Igd2FzIGl0CiAgICAgICAgICAgICAgICAgICAgb2J0YWluZWQgZnJvbSBwcmlzb25lcnM/IFRoZW4gd2hvIHdlcmUgdGhlIHBlcnNvbnMgd2hvIGJyb3VnaHQgdGhlIGNvcHBlciB0byBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlcj8gV2VyZSB0aGV5IGhpcmVkIG1lbiwgb3Igc2xhdmVzPyA8L3RyYW5zbGF0aW9uPg=="
translation['49.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB3aGljaCBvbmUgb2Ygb3VyIHNsYXZlcyB3YXMgaXQgd2hvIHJlY2VpdmVkIGl0PyBGb3IsIGlmIHNsYXZlcyBicm91Z2h0IGl0LCBoZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGhhdmUgZGVsaXZlcmVkIHRoZW0gdXAgZm9yIHRoZSB0b3J0dXJlLCBidXQgaWYgaGlyZWQgbWVuLCBoZSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgZGVtYW5kZWQgZm9yIHRoZSB0b3J0dXJlIHRoZSBzbGF2ZSBvZiBvdXJzIHdobyByZWNlaXZlZCBhbmQgd2VpZ2hlZCB0aGUKICAgICAgICAgICAgICAgICAgICBjb3BwZXI7IGZvciwgSSBmYW5jeSwgbmVpdGhlciB3b3VsZCB0aGUgb25lIHRha2luZyB0aGUgY29wcGVyIGluIHBsZWRnZSBhY2NlcHQKICAgICAgICAgICAgICAgICAgICBpdCwgbm9yIHRoZSBvbmUgb2ZmZXJpbmcgaXQgZ2l2ZSBpdCBvdmVyLCB3aXRob3V0IHdlaWdoaW5nOyBub3Igd2FzIG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIGxpa2VseSB0byBjYXJyeSB0aGUgY29wcGVyIGFuZCB3ZWlnaCBpdCBoaW1zZWxmLCBzaW5jZSBoZSBoYWQgc2xhdmVzIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWNjdXN0b21lZCB0byByZWNlaXZlIHRoZSBhcnRpY2xlcyBnaXZlbiBhcyBzZWN1cml0eSBmb3IgbG9hbnMuIDwvdHJhbnNsYXRpb24+"
translation['49.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgSSBjZXJ0YWlubHkgd29uZGVyIGZvciB3aGF0IHBvc3NpYmxlIHJlYXNvbiB0aGUKICAgICAgICAgICAgICAgICAgICBCb2VvdGlhbiBhZG1pcmFsIHNob3VsZCBoYXZlIGdpdmVuIHRoZSBjb3BwZXIgdG8gbXkgZmF0aGVyIGFzIHNlY3VyaXR5LCBpZiBoZQogICAgICAgICAgICAgICAgICAgIG93ZWQgYSB0aG91c2FuZCBkcmFjaG1hZSB0byBQaGlsaXAuIFdhcyBpdCB0aGF0IFBoaWxpcCB3b3VsZCBub3QgaGF2ZSBiZWVuIGdsYWQKICAgICAgICAgICAgICAgICAgICB0byByZWNlaXZlIGludGVyZXN0LCBpZiBoaXMgbW9uZXkgd2FzIGxlbnQgc2FmZWx5IGFuZCBvbiBzZWN1cml0eT8gb3IgdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBoYWQgbm8gbW9uZXk/IFNvLCB3aGF0IG5lZWQgd2FzIHRoZXJlIGZvciB0aGUgQm9lb3RpYW4gYWRtaXJhbCB0byBhc2sgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgdG8gbGVuZCB0aGUgdGhvdXNhbmQgZHJhY2htYWUgYW5kIHBheSBQaGlsaXAsIHJhdGhlciB0aGFuIGdpdmUgdGhlIGNvcHBlcgogICAgICAgICAgICAgICAgICAgIGFzIHNlY3VyaXR5IHRvIFBoaWxpcD8gPC90cmFuc2xhdGlvbj4="
translation['49.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIG1lbiBvZiB0aGUganVyeSwKICAgICAgICAgICAgICAgICAgICB0aGUgY29wcGVyIHdhcyBub3QgZ2l2ZW4gYXMgc2VjdXJpdHksIG5vciBkaWQgdGhlIEJvZW90aWFuIGFkbWlyYWwgYm9ycm93IHRoZQogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGRyYWNobWFlIGZyb20gbXkgZmF0aGVyLCBidXQgdGhpcyBtYW4gVGltb3RoZXVzIGJvcnJvd2VkIHRoZW0sIGJlaW5nIGluCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZGlzdHJlc3M7IGFuZCB0aGUgdXJnZW50IG5lZWQsIHRvIG1lZXQgd2hpY2ggaGUgdXNlZCB0aGUgbW9uZXksIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRvbGQgeW91LiBCdXQgaW5zdGVhZCBvZiBldmluY2luZyBncmF0aXR1ZGUgZm9yIHRoZSBjb25maWRlbmNlIHNob3duIGhpbSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbG9hbiB3aGljaCBoZSByZWNlaXZlZCBmcm9tIG15IGZhdGhlciwgaGUgdGhpbmtzIGl0IHByb3BlciB0byBkZWZyYXVkIHVzLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGNhbiwgZXZlbiBvZiB0aGUgcHJpbmNpcGFsLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBhcyB0byB0aGUgYm93bHMgYW5kIHRoZSBtaW5hIG9mIHNpbHZlciwgd2hpY2ggaGUgYm9ycm93ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIG15IGZhdGhlciB3aGVuIGhlIHNlbnQgaGlzIGJvZHlzZXJ2YW50IEFlc2NocmlvbiB0byBteSBmYXRoZXIgaW4gdGhlIG5pZ2h0LAogICAgICAgICAgICAgICAgICAgIEkgYXNrZWQgaGltIGJlZm9yZSB0aGUgYXJiaXRyYXRvciBpZiBBZXNjaHJpb24gd2FzIHN0aWxsIGEgc2xhdmUsIGFuZCBkZW1hbmRlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgYmUgcHV0IHRvIHRoZSB0ZXN0IOKAnGluIGhpcyBoaWRlLuKAnTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCB1bmRlciB0aGUgdG9ydHVyZTsgaW4gdGhpcyBjYXNlIGFwcGFyZW50bHkKICAgICAgICAgICAgICAgICAgICAgICAgc2NvdXJnaW5nLjwvbm90ZT4gSGUgYW5zd2VyZWQgdGhhdCBBZXNjaHJpb24gd2FzIGZyZWUsIHNvIEkgZGVzaXN0ZWQgZnJvbSBteQogICAgICAgICAgICAgICAgICAgIGRlbWFuZDsgYnV0IEkgcmVxdWlyZWQgaGltIHRvIHB1dCBpbiBhIGRlcG9zaXRpb24gbWFkZSBieSBBZXNjaHJpb24gYXMgYmVpbmcgYQogICAgICAgICAgICAgICAgICAgIGZyZWUgbWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['49.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5IZSwgaG93ZXZlciwgbmVpdGhlciBwcm92aWRlZCBhCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiBmcm9tIEFlc2NocmlvbiwgYXMgYmVpbmcgZnJlZSwgbm9yIHdvdWxkIGhlIGRlbGl2ZXIgaGltIHVwIGFzIGEgc2xhdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHByb29mIG1pZ2h0IGJlIGhhZCBmcm9tIGhpcyBib2R5OyBmb3IgaGUgd2FzIGFmcmFpZCB0aGF0LCBpZiBoZSBwcm9kdWNlZCBhCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiBmcm9tIGhpbSBhcyBiZWluZyBmcmVlLCBJIHNob3VsZCBicmluZyBzdWl0IGZvciBmYWxzZSB0ZXN0aW1vbnksIGFuZAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHByb3ZpbmcgdGhhdCBBZXNjaHJpb24gaGFkIHRlc3RpZmllZCBmYWxzZWx5LCBzaG91bGQgcHJvY2VlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgVGltb3RoZXVzIGhpbXNlbGYgZm9yIHN1Ym9ybmF0aW9uLCBhcyB0aGUgbGF3IHByb3ZpZGVzOyBhbmQgaWYsIGFnYWluLCBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBkZWxpdmVyIGhpbSB1cCBmb3IgdGhlIHRvcnR1cmUsIGhlIHdhcyBhZnJhaWQgdGhhdCBBZXNjaHJpb24gd291bGQgc3RhdGUgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggYWdhaW5zdCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['49.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGl0IHdhcyBhIGZpbmUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBmb3IgaGltLCBpZiBoZSB3YXMgdW5hYmxlIHRvIHByb2R1Y2Ugd2l0bmVzc2VzIGNvbmNlcm5pbmcgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgcmVjZWlwdHMgb2YgbW9uZXksIHRvIHByb3ZlIHRoaXMgYXQgYW55IHJhdGUgYnkgdGhlIHdvcmRzIG9mCiAgICAgICAgICAgICAgICAgICAgQWVzY2hyaW9u4oCUdGhhdCB0aGUgYm93bHMgYW5kIHRoZSBtaW5hIG9mIHNpbHZlciB3ZXJlIG5vdCByZWNlaXZlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBBZXNjaHJpb24gd2FzIG5vdCBzZW50IGJ5IGhpbSB0byBteSBmYXRoZXI7IGFuZCB0aGVuIHRvIHVzZSB0aGlzIGFzCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgdG8geW91IHRoYXQgSSBhbSB1dHRlcmluZyBmYWxzZWhvb2RzIGluIHJlZ2FyZCB0byBteSBvdGhlciBjbGFpbXMgdXBvbgogICAgICAgICAgICAgICAgICAgIGhpbSwgc2VlaW5nIHRoYXQgaGlzIHNsYXZlLCB3aG9tIEkgZGVjbGFyZSB0byBoYXZlIHJlY2VpdmVkIHRoZSBib3dscyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWluYSBvZiBzaWx2ZXIsIHdhcyBwcm92ZWQgYnkgdGhlIHRvcnR1cmUgbm90IHRvIGhhdmUgcmVjZWl2ZWQgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['49.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlbiwgdGhpcyB3b3VsZCBoYXZlIGJlZW4gYSBzdHJvbmcgcGllY2Ugb2YKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBmb3IgaGltIHRvIHVzZSBiZWZvcmUgeW91LCB0aGF0LCBuYW1lbHksIGhlIG9mZmVyZWQgdG8gZGVsaXZlciB1cAogICAgICAgICAgICAgICAgICAgIEFlc2Nocmlvbiwgd2hvbSBJIGRlY2xhcmUgdG8gaGF2ZSBiZWVuIHNlbnQgYnkgdGhlIGRlZmVuZGFudCBhbmQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIHRoZSBib3dscyBmcm9tIG15IGZhdGhlciBhbmQgdG8gaGF2ZSBib3Jyb3dlZCB0aGUgbWluYSBvZiBzaWx2ZXIsIGxldAogICAgICAgICAgICAgICAgICAgIGl0IGFsc28gYmUgZXZpZGVuY2UgZm9yIG1lIHRvIHVzZSBiZWZvcmUgeW91LCB0aGF0IGtub3dpbmcgbXkgY2xhaW1zIHRvIGJlIHRydWUsCiAgICAgICAgICAgICAgICAgICAgaGUgZG9lcyBub3QgZGFyZSB0byBkZWxpdmVyIHVwIEFlc2NocmlvbiBmb3IgdGhlIHRvcnR1cmUuIDwvdHJhbnNsYXRpb24+"
translation['49.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgaGUgd2lsbCBtYWtlIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuY2UgdGhhdCBoZSB3YXMgbGlzdGVkIGluIHRoZSBib29rcyBvZiB0aGUgYmFuayBpbiB0aGUgYXJjaG9uc2hpcCBvZgogICAgICAgICAgICAgICAgICAgIEFsY2lzdGhlbmVzIGFzIGhhdmluZyByZWNlaXZlZCB0aGUgZnJlaWdodCBvZiB0aGUgdGltYmVyIGFuZCB0aGUgcHJpY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYm93bHMsIHdoaWNoIG15IGZhdGhlciBwYWlkIHRvIFRpbW9zdGhlbmVzIG9uIGhpcyBiZWhhbGYsIGFuZCB0aGF0IGhlIHdhcyBub3QgYXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRpbWUgaW4gdGhlIGNvdW50cnksIGJ1dCB3YXMgaW4gdGhlIHNlcnZpY2Ugb2YgdGhlIGtpbmcuIEFib3V0IHRoaXMgSSB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSB5b3UgYWNjdXJhdGUgaW5mb3JtYXRpb24sIHRoYXQgeW91IG1heSB1bmRlcnN0YW5kIGNsZWFybHkgaG93IHRoZSBib29rcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBiYW5rIGFyZSBrZXB0LiA8L3RyYW5zbGF0aW9uPg=="
translation['49.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVmZW5kYW50IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbnRoIFRoYXJnZWxpb24gaW4gdGhlIGFyY2hvbnNoaXAgb2YgQXN0ZWl1cyB3aGVuIGhlIHdhcyBhYm91dCB0byBzYWlsIHRvIHRha2UKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIHdpdGggdGhlIGtpbmcsIGludHJvZHVjZWQgUGhpbG9uZGFzIHRvIG15IGZhdGhlcjsgYW5kIGluIHRoZSBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICB5ZWFyIGluIHRoZSBhcmNob25zaGlwIG9mIEFsY2lzdGhlbmVzLCBQaGlsb25kYXMgYXJyaXZlZCBicmluZ2luZyB0aGUgdGltYmVyCiAgICAgICAgICAgICAgICAgICAgZnJvbSBNYWNlZG9uaWEgYW5kIHJlY2VpdmVkIHRoZSBmcmVpZ2h0IGZyb20gbXkgZmF0aGVyLCB3aGlsZSBUaW1vdGhldXMgd2FzCiAgICAgICAgICAgICAgICAgICAgYWJyb2FkIGluIHRoZSBzZXJ2aWNlIG9mIHRoZSBraW5nLiBBY2NvcmRpbmdseSB0aGV5IGVudGVyZWQgdGhlIGRlZmVuZGFudCBhcwogICAgICAgICAgICAgICAgICAgIGRlYnRvciBhdCB0aGUgdGltZSB0aGV5IHBhaWQgdGhlIG1vbmV5LCBub3QgYXQgdGhlIHRpbWUgd2hlbiwgYmVpbmcgaW4gQXRoZW5zLAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBpbnRyb2R1Y2VkIFBoaWxvbmRhcyB0byBteSBmYXRoZXIuIDwvdHJhbnNsYXRpb24+"
translation['49.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSBpbnRyb2R1Y2VkIGhpbSwgdGhlIHRpbWJlciBoYWQgbm90IHlldCBjb21lLCBidXQgUGhpbG9uZGFzIHdhcyBhYm91dCB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgdGhlIGpvdXJuZXkgdG8gZmV0Y2ggaXQ7IHdoZW4sIGhvd2V2ZXIsIGhlIGNhbWUgYmFjaywgYnJpbmdpbmcgdGhlIHRpbWJlciwKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50IHdhcyBhYnJvYWQsIGJ1dCBQaGlsb25kYXMgcmVjZWl2ZWQgdGhlIGZyZWlnaHQgZm9yIHRoZSB0aW1iZXIKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGRlZmVuZGFudCdzIG9yZGVycywgYW5kIHRoZSB0aW1iZXIgd2FzIGRlbGl2ZXJlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBob3VzZSBpbiBQZWlyYWV1cy4gVGhhdCBUaW1vdGhldXMgd2FzIG5vdCB3ZWxsIHByb3ZpZGVkIHdpdGggZnVuZHMKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIHNhaWxlZCBmcm9tIEF0aGVucyBpcyBhbHJlYWR5IGtub3duIHRvIGFsbCBvZiB5b3UgdG8gd2hvbSBoaXMgZXN0YXRlIHdhcwogICAgICAgICAgICAgICAgICAgIG1vcnRnYWdlZCwgYW5kIHdob20gaGUgaXMgbm93IHNlZWtpbmcgdG8gZGVmcmF1ZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgdG8gcHJvdmUgdGhhdCBoZSBib3Jyb3dlZCBtb25leSBmcm9tIHNvbWUgb2Ygb3VyIGNpdGl6ZW5zIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSwgc2luY2UgaGUgaGFkIG5vIGVxdWl2YWxlbnQgc2VjdXJpdHkgdG8gZ2l2ZSwgcGxlYXNlIHJlYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBib3dscyB3aGljaCBBZXNjaHJpb24sIHRoZSBib2R5LXNlcnZhbnQgb2YgdGhlIGRlZmVuZGFudCwgcmVxdWVzdGVkIG9mIG1lIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbnRoIE1haW1hY3RlcmlvbiBpbiB0aGUgYXJjaG9uc2hpcCBvZiBBc3RlaXVzLCB3aGVuIFRpbW90aGV1cyB3YXMgaW4KICAgICAgICAgICAgICAgICAgICBBdGhlbnMgYXQgdGhlIHRpbWUgd2hlbiBoZSBlbnRlcnRhaW5lZCBBbGNldGFzIGFuZCBKYXNvbiwgYW5kIHdpdGggdGhlIHZhbHVlIG9mCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgd2FzIGRlYml0ZWQgaW4gdGhlIGFyY2hvbnNoaXAgb2YgQWxjaXN0aGVuZXPigJRmb3Igc29tZSB0aW1lIG15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIHN1cHBvc2VkIGhlIHdvdWxkIHJldHVybiB0aGUgYm93bHMgd2hpY2ggaGUgaGFkIGJvcnJvd2VkOyBidXQgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHdlbnQgb2ZmIHdpdGhvdXQgaGF2aW5nIHJldHVybmVkIHRoZW0sIGFuZCB0aGUgYm93bHMgb2YgVGltb3N0aGVuZXMgd2VyZSBubwogICAgICAgICAgICAgICAgICAgIGxvbmdlciBpbiB0aGUgY3VzdG9keSBvZiBQaG9ybWlvLCBhbmQgdGhlIG9uZSB3aG8gaGFkIGRlcG9zaXRlZCB0aGVtIGNhbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgdGhlaXIgcmV0dXJuLCBteSBmYXRoZXIgcGFpZCB0aGUgcHJpY2Ugb2YgdGhlIGJvd2xzIHRvIFRpbW9zdGhlbmVzLCBhbmQKICAgICAgICAgICAgICAgICAgICB3cm90ZSB0aGUgZGVmZW5kYW50IGRvd24gYXMgb3dpbmcgdGhpcyBzdW0gaW4gYWRkaXRpb24gdG8gdGhlIHJlc3Qgb2YgaGlzIGRlYnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlbiwgaGUgbWFrZXMgdXNlIG9mIHRoaXMgZGVmZW5jZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdhcyBub3QgaW4gQXRoZW5zIGF0IHRoZSB0aW1lIHdoZW4gaGUgd2FzIGRlYml0ZWQgd2l0aCB0aGUgY29zdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBib3dscywgbWFrZSB0aGlzIHJlcGx5IHRvIGhpbTog4oCcWW91IHJlY2VpdmVkIHRoZW0sIHdoZW4gaGVyZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2luY2UgeW91IGRpZCBub3QgcmV0dXJuIHRoZW0sIGFuZCB3ZXJlIGFicm9hZCwgYW5kIHRoZSBib3dscyB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0b3IgY2xhaW1lZCB3ZXJlIG5vdCB0aGVyZSwgeW91IHdlcmUgZGViaXRlZCB3aXRoIHRoZWlyIHZhbHVlLCB0aGF0IHN1bSwKICAgICAgICAgICAgICAgICAgICBuYW1lbHksIHdoaWNoIHdhcyBwYWlkIGZvciB0aGUgYm93bHMu4oCdIDwvdHJhbnNsYXRpb24+"
translation['49.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5BaCBidXQsIGhlIHdpbGwgcGVyaGFwcyBzYXksIG15IGZhdGhlciBvdWdodCB0byBoYXZlIGRlbWFuZGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJldHVybiBvZiB0aGUgYm93bHMgZnJvbSBoaW0uIEJ1dCBteSBmYXRoZXIgc2F3IGluIHdoYXQgc3RyYWl0cyB5b3Ugd2VyZSwKICAgICAgICAgICAgICAgICAgICBUaW1vdGhldXMuIEhlIHRydXN0ZWQgeW91IGluIHJlZ2FyZCB0byB0aGUgcmVzdCBvZiB5b3VyIGRlYnQsIGFuZCBiZWxpZXZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgeW91ciByZXR1cm4gdG8gQXRoZW5zIGhlIHdvdWxkIHJlY292ZXIgaGlzIG1vbmV5IGZyb20geW91LCB3aGVuIHlvdSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBiZXR0ZXIgb2ZmIGZvciBmdW5kcy4gV2FzIGhlLCB0aGVuLCBnb2luZyB0byBkaXN0cnVzdCB5b3UgaW4gdGhlIG1hdHRlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBib3dscz8gSGUgcHJvbWlzZWQgYXQgeW91ciByZXF1ZXN0IHRoYXQgaGUgd291bGQgcHJvdmlkZSB0aGUgZnJlaWdodCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgdGltYmVyIHdoZW4geW91IHdlcmUgc2FpbGluZyB0byB0YWtlIHNlcnZpY2Ugd2l0aCB0aGUga2luZzsgd2FzIGhlLCB0aGVuLCBnb2luZwogICAgICAgICAgICAgICAgICAgIHRvIGRpc3RydXN0IHlvdSBiZWNhdXNlIG9mIGEgY291cGxlIG9mIGJvd2xzPyBIZSBkaWQgbm90IGRlbWFuZCBvZiB5b3UgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBwYXkgdGhlIHJlc3Qgb2YgdGhlIGRlYnQsIGJlY2F1c2UgaGUgc2F3IHRoYXQgeW91IHdlcmUgd2l0aG91dCBmdW5kcy4gV2FzIGhlLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGdvaW5nIHRvIGRlbWFuZCB0aGUgYm93bHM/IDwvdHJhbnNsYXRpb24+"
translation['49.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0byBzcGVhayBhYm91dCB0aGUgY2hhbGxlbmdlIHRvIGFuIG9hdGgsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSB0ZW5kZXJlZCB0aGUgZGVmZW5kYW50LCBhbmQgaGUgdGVuZGVyZWQgbWUuIEZvciBhZnRlciBJIGhhZCBwdXQgYW4gb2F0aAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBldmlkZW5jZS1ib3gsIGhlIHRob3VnaHQgdGhhdCwgYnkgdGFraW5nIGFuIG9hdGggaGltc2VsZiwgaGUgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICBxdWl0IG9mIHRoZSBhZmZhaXIuIEFuZCwgaWYgSSBoYWQgbm90IGtub3duIHRoYXQgaGUgaGFkIGZsYWdyYW50bHkgcGVyanVyZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGluIG1hbnkgc29sZW1uIG9hdGhzIGJvdGggdG8gc3RhdGVzIGFuZCB0byBpbmRpdmlkdWFscywgSSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgaGltIHRvIHRha2UgdGhlIG9hdGg7IGJ1dCBhcyBpdCB3YXMsIHNlZWluZyB0aGF0IEkgaGFkIHdpdG5lc3NlcyB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRoYXQgdGhlIHBlcnNvbnMgYXBwb2ludGVkIGJ5IGhpbSBoYWQgaW4gZmFjdCByZWNlaXZlZCB0aGUgbW9uZXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBiYW5rLCBhbmQgY29uY2x1c2l2ZSBjaXJjdW1zdGFudGlhbCBldmlkZW5jZSBhcyB3ZWxsLCBpdCBzZWVtZWQgdG8gbWUgYQogICAgICAgICAgICAgICAgICAgIG1vbnN0cm91cyB0aGluZyB0byBnaXZlIGFuIG9hdGggdG8gb25lIHdobyB3b3VsZCBub3Qgb25seSB0YWtlIG5vIGNhcmUgdG8gc3dlYXIKICAgICAgICAgICAgICAgICAgICBob25lc3RseSwgYnV0IHdobywgd2hlbiBpdCB3YXMgYSBxdWVzdGlvbiBvZiBnYWluLCBoYXMgbm90IHNwYXJlZCBldmVuIHRlbXBsZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BlY2lmaWMgaW5zdGFuY2VzIG9mIHRoZSBwZXJqdXJpZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYXMgY29tbWl0dGVkIHdpdGhvdXQgc2NydXBsZSB3b3VsZCBtYWtlIGEgbG9uZyBzdG9yeTsgYnV0IEkgd2lsbCBjYWxsCiAgICAgICAgICAgICAgICAgICAgdG8geW91ciBtaW5kcyB0aGUgbW9zdCBmbGFncmFudCBpbnN0YW5jZXMgYW5kIHRob3NlIG9mIHdoaWNoIHlvdSBhcmUgYWxsIHdlbGwKICAgICAgICAgICAgICAgICAgICBhd2FyZS4gWW91IGtub3cgdGhhdCBoZSBzd29yZSBpbiB0aGUgYXNzZW1ibHksIGltcHJlY2F0aW5nIGRlc3RydWN0aW9uIHVwb24KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGFuZCBkZWRpY2F0aW5nIGhpcyBwcm9wZXJ0eSB0byBzYWNyZWQgdXNlcywgaWYgaGUgc2hvdWxkIGZhaWwgdG8gaW5kaWN0CiAgICAgICAgICAgICAgICAgICAgSXBoaWNyYXRlcyBhcyBhIHVzdXJwZXIgb2YgdGhlIHJpZ2h0cyBvZiBjaXRpemVuc2hpcC4gWWV0LCBhbHRob3VnaCBoZSBoYWQgc3dvcm4KICAgICAgICAgICAgICAgICAgICBhbmQgcHJvbWlzZWQgdGhpcyBpbiB0aGUgYXNzZW1ibHksIG5vIGxvbmcgdGltZSBhZnRlcndhcmRzLCBpbiBvcmRlciB0byBzZXJ2ZQogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gaW50ZXJlc3RzLCBoZSBnYXZlIGhpcyBkYXVnaHRlciBpbiBtYXJyYWlnZSB0byB0aGUgc29uIG9mIElwaGljcmF0ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGEgbWFuLCB0aGVuLCBmZWx0IG5vIHNoYW1lIGluCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2aW5nIHlvdSB0byB3aG9tIGhlIGhhZCBwbGVkZ2VkIGhpcyB3b3JkLCB0aG91Z2ggdGhlcmUgYXJlIGxhd3Mgd2hpY2gKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlIHRoYXQsIGlmIGEgbWFuIGRlY2VpdmUgdGhlIHBlb3BsZSBieSBhIHByb21pc2UsIGhlIHNoYWxsIGJlIGxpYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGltcGVhY2htZW50LOKAlHdoZW4sIGFmdGVyIHN3ZWFyaW5nIGFuZCBpbXByZWNhdGluZyBkZXN0cnVjdGlvbiB1cG9uCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgaGUgaGFkIG5vIGZlYXIgb2YgdGhlIGdvZHMgaW4gd2hvc2UgbmFtZSBoZSBoYWQgcGVyanVyZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxm4oCUd2FzIGl0IHN0cmFuZ2UgdGhhdCBJIHdhcyB1bndpbGxpbmcgdG8gYWxsb3cgaGltIHRvIHRha2UgYW4KICAgICAgICAgICAgICAgICAgICBvYXRoPyBBZ2Fpbiwgbm90IHZlcnkgbG9uZyBhZ28sIGhlIG9uY2UgbW9yZSBzb2xlbW5seSBkZWNsYXJlZCBpbiB0aGUgYXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBub3QgYWRlcXVhdGUgcHJvdmlzaW9uIGZvciBoaXMgb2xkIGFnZeKAlGhlLCB3aG8gcG9zc2Vzc2VzCiAgICAgICAgICAgICAgICAgICAgc28gbGFyZ2UgYW4gZXN0YXRlOyBzbyBpbnNhdGlhdGUgYW5kIGdyYXNwaW5nIGlzIGhpcyBjaGFyYWN0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['49.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5JIHNob3VsZCBiZSBnbGFkLCBob3dldmVyLCB0byBhc2sgeW91IHdoZXRoZXIgeW91CiAgICAgICAgICAgICAgICAgICAgZmVlbCBhbmdlciBhZ2FpbnN0IGJhbmtlcnMgd2hvIGhhdmUgZmFpbGVkLiBGb3IsIGlmIHlvdSBoYXZlIHJlYXNvbiB0byBmZWVsCiAgICAgICAgICAgICAgICAgICAgYW5nZXIgYWdhaW5zdCB0aGVtIGJlY2F1c2UgdGhleSBkbyB5b3UgaW5qdXJ5LCBpcyBpdCBub3QgcmVhc29uYWJsZSBmb3IgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydCB0aG9zZSB3aG8gZG8geW91IG5vIGluanVyeT8gU3VyZWx5IGl0IGlzIHRocm91Z2ggbWVuIGxpa2UgVGltb3RoZXVzIHRoYXQKICAgICAgICAgICAgICAgICAgICBiYW5rcyBhcmUgY2F1c2VkIHRvIGZhaWw7IGZvciB3aGVuIHRoZXkgYXJlIGluIG5lZWQgdGhleSBib3Jyb3cgbW9uZXksIGFuZCB0aGluawogICAgICAgICAgICAgICAgICAgIHRoZXkgc2hvdWxkIG9idGFpbiBjcmVkaXQgYmVjYXVzZSBvZiB0aGVpciByZXB1dGF0aW9uOyBidXQgd2hlbiB0aGV5IGFyZSBpbgogICAgICAgICAgICAgICAgICAgIGZ1bmRzIHRoZXkgZG8gbm90IG1ha2UgcGF5bWVudHMgYnV0IHNlZWsgdG8gZGVmcmF1ZCB0aGVpciBjcmVkaXRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['49.69'] = ""
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBzdWl0cyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlLCBtZW4gb2YgdGhlIGp1cnksIGl0IGlzIGZpdHRpbmcgdGhhdCB0aG9zZSB3aG8gYXJlIHRvIHJlbmRlciBhIGRlY2lzaW9uLAogICAgICAgICAgICAgICAgICAgIGFzIHdlbGwgYXMgdGhlIGxpdGlnYW50cyB0aGVtc2VsdmVzLCBzaG91bGQgZ2l2ZSB0aGUgY2xvc2VzdCBhdHRlbnRpb24uIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzdWl0IGlzIG5vdCBhIHByaXZhdGUgb25lIGNvbmNlcm5pbmcgUG9seWNsZXMgYW5kIG15c2VsZiBhbG9uZSwgYnV0IGl0IHRvdWNoZXMKICAgICAgICAgICAgICAgICAgICBhbHNvIHRoZSBpbnRlcmVzdHMgb2YgdGhlIHN0YXRlIGFzIHdlbGwuIEluIGNhc2VzIHdoZXJlIHRoZSBjaGFyZ2VzIGluZGVlZCBhcmUKICAgICAgICAgICAgICAgICAgICBvZiBhIHByaXZhdGUgbmF0dXJlLCBidXQgdGhlIGluanVyeSBpcyBwdWJsaWMsIGl0IGlzIHN1cmVseSBmaXR0aW5nIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGxpc3RlbiBhbmQgZGVjaWRlIGFyaWdodC4gSWYgSSBoYWQgY29tZSBiZWZvcmUgeW91IHF1YXJyZWxsaW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICBQb2x5Y2xlcyBhYm91dCBhIGNvbnRyYWN0IG9mIHNvbWUgb3RoZXIgc29ydCwgdGhlIGNvbnRlc3Qgd291bGQgaGF2ZSBjb25jZXJuZWQKICAgICAgICAgICAgICAgICAgICBQb2x5Y2xlcyBhbmQgbXlzZWxmIGFsb25lOyBidXQgYXMgaXQgaXMsIHRoZSBxdWVzdGlvbiBjb25jZXJucyB0aGUgc3VjY2Vzc2lvbiB0bwogICAgICAgICAgICAgICAgICAgIGEgc2hpcCwgYW5kIGV4dHJhIHRyaWVyYXJjaGFsIGV4cGVuc2VzIGZvciBmaXZlIG1vbnRocyBhbmQgc2l4IGRheXMsIGFuZCBpdAogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5zIGFsc28gdGhlIGxhd3MsIHdoZXRoZXIgdGhleSBhcmUgdG8gYmUgaW4gZm9yY2UsIG9yIG5vdC4gPC90cmFuc2xhdGlvbj4="
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHNlZW1zIHRvIG1lLCB0aGVyZWZvcmUsIHRvIGJlIG5lY2Vzc2FyeSB0byBleHBsYWluCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBmYWN0cyB0byB5b3UgZnJvbSB0aGUgYmVnaW5uaW5nLiBBbmQgYnkgdGhlIGdvZHMsIG1lbiBvZiB0aGUganVyeSwgSSBiZWcKICAgICAgICAgICAgICAgICAgICB5b3Ugbm90IHRvIHRoaW5rIHRoYXQgSSBhbSB0YWxraW5nIGlkbHksIGlmIEkgc2V0IGZvcnRoIGF0IHNvbWUgbGVuZ3RoIHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgZXhwZW5kZWQgYW5kIHdoYXQgSSBoYXZlIGRvbmUsIHRvIHNob3cgdGhhdCBteSBzZXZlcmFsIHNlcnZpY2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCBvcHBvcnR1bmVseSwgYW5kIHRoYXQgdGhleSB3ZXJlIGhlbHBmdWwgdG8gdGhlIHN0YXRlLiBJZiBhbnlvbmUgaXMgYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIHNob3cgdGhhdCBJIGFtIHV0dGVyaW5nIGZhbHNlaG9vZHMsIGxldCBoaW0gZ2V0IHVwIGluIHRoZSB0aW1lIGFsbG90dGVkIHRvIG1lCiAgICAgICAgICAgICAgICAgICAgYW5kIGRpc3Byb3ZlIHdoYXRldmVyIHN0YXRlbWVudCBJIG1heSBtYWtlIHRvIHlvdSB3aGljaCBoZSBob2xkcyB0byBiZSBmYWxzZS4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgbXkgc3RhdGVtZW50cyBhcmUgdHJ1ZSwgYW5kIG5vIG9uZSB3b3VsZCBjb250cmFkaWN0IHRoZW0gc2F2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIEkgbWFrZSBvZiB5b3UgYWxsIGEgcmVxdWVzdCB0aGF0IGlzIGZhaXIuIDwvdHJhbnNsYXRpb24+"
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB5b3Ugd2hvIHdlcmUgaW4gdGhlIGFybXkgYW5kIHdlcmUgcHJlc2VudCBpbiB0aGUgY2FtcGFpZ24sIGNhbGwKICAgICAgICAgICAgICAgICAgICB0byBtaW5kIGFuZCB0ZWxsIHRvIHRob3NlIHdobyBzaXQgYnkgeW91IG15IG93biBlZmZvcnRzIGFuZCB0aGUgdHJvdWJsZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3NlcyBpbiB3aGljaCB0aGUgc3RhdGUgd2FzIGludm9sdmVkIGF0IHRoYXQgY3Jpc2lzLCBpbiBvcmRlciB0aGF0IHlvdSBtYXkKICAgICAgICAgICAgICAgICAgICBrbm93IGZyb20gdGhpcyBldmlkZW5jZSB3aGF0IG1hbm5lciBvZiBtYW4gSSBhbSBpbiBjYXJyeWluZyBvdXQgdGhlIG9yZGVycyB5b3UKICAgICAgICAgICAgICAgICAgICBsYXkgdXBvbiBtZS4gQW5kIGFsbCBvZiB5b3Ugd2hvIHN0YXllZCBhdCBob21lLCBsaXN0ZW4gdG8gbWUgaW4gc2lsZW5jZSwgd2hpbGUgSQogICAgICAgICAgICAgICAgICAgIHNldCBmb3J0aCBiZWZvcmUgeW91IGFsbCB0aGUgZmFjdHMsIGFuZCBwcm9kdWNlIGluIHN1cHBvcnQgb2YgZXZlcnkgc3RhdGVtZW50CiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIG1ha2UgdGhlIGxhd3MgYW5kIGRlY3JlZXMgYm90aCBvZiB0aGUgc2VuYXRlIGFuZCB0aGUgcGVvcGxlLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IG9mIHdpdG5lc3Nlcy4gPC90cmFuc2xhdGlvbj4="
translation['50.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PbiB0aGUgdHdlbnR5LWZvdXJ0aCBkYXkgb2YgdGhlIG1vbnRoIE1ldGFnZWl0bmlvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gTWV0YWdlaXRuaW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBsYXR0ZXIgaGFsZiBvZgogICAgICAgICAgICAgICAgICAgICAgICBBdWd1c3QgYW5kIHRoZSBwcmlvciBoYWxmIG9mIFNlcHRlbWJlci48L25vdGU+IGluIHRoZSBhcmNob25zaGlwIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE1vbG9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYXJjaG9uc2hpcCBvZiBNb2xvbiBmYWxscyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLjwvbm90ZT4gd2hlbiBhbiBhc3NlbWJseSBoYWQgYmVlbiBoZWxkCiAgICAgICAgICAgICAgICAgICAgYW5kIHRpZGluZ3Mgb2YgbWFueSBzZXJpb3VzIGV2ZW50cyBoYWQgYmVlbiBicm91Z2h0IGJlZm9yZSB5b3UsIHlvdSB2b3RlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWVyYXJjaHMg77yIb2Ygd2hvbSBJIHdhcyBvbmXvvIkgc2hvdWxkIGxhdW5jaCB0aGVpciBzaGlwcy4KICAgICAgICAgICAgICAgICAgICBJdCBpcyBub3QgbmVjZXNzYXJ5IGZvciBtZSB0byBnbyBpbnRvIGRldGFpbHMgcmVnYXJkaW5nIHRoZSBjcmlzaXMgd2hpY2ggaGFkIGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lIGJlZmFsbGVuIHRoZSBzdGF0ZTsgeW91IG9mIHlvdXJzZWx2ZXMga25vdyB0aGF0IFRlbm9zPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gVGVub3MsIG9uZSBvZiB0aGUgQ3ljbGFkZXMgaXNsYW5kcyBpbiB0aGUgQWVnZWFuIFNlYSwgaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gY2FwdHVyZWQgYnkgdGhlIGZsZWV0IG9uIEFsZXhhbmRlciBvZiBQaGVyYWUsIHdobyBhdCB0aGlzIHRpbWUgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlciBvZiBUaGVzc2FseS48L25vdGU+IGhhZCBiZWVuIHNlaXplZCBieSBBbGV4YW5kZXIsIGFuZCBpdHMgcGVvcGxlIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gcmVkdWNlZCB0byBzbGF2ZXJ5OyA8L3RyYW5zbGF0aW9uPg=="
translation['50.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgTWlsdG9jeXRoZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IE1pbHRvY3l0aGVzIHdhcyBhIHZhc3NhbCBvZiBDb3R5cywga2luZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgT2RyeXNhZSBpbiBUaHJhY2UsIGEgZm9ybWVyIGZyaWVuZCwgYnV0IG5vdyBhbiBlbmVteSBvZiBBdGhlbnMuPC9ub3RlPiBoYWQKICAgICAgICAgICAgICAgICAgICByZXZvbHRlZCBmcm9tIENvdHlzLCBhbmQgaGFkIHNlbnQgYW1iYXNzYWRvcnMgcmVnYXJkaW5nIGFuIGFsbGlhbmNlLCBiZWdnaW5nIHlvdQogICAgICAgICAgICAgICAgICAgIHRvIHNlbmQgdHJvb3BzIHRvIGhpcyBhaWQsIGFuZCBvZmZlcmluZyB0byByZXN0b3JlIHRoZSBDaGVyc29uZXN1czsgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUHJvY29ubmVzaWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IFByb2Nvbm5lc3VzLCBhbiBpc2xhbmQgb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFByb3BvbnRpcyDvvIhTZWEgb2YgTWFybW9yYe+8iS48L25vdGU+IHlvdXIgYWxsaWVzLCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGluZyB5b3UgaW4gdGhlIGFzc2VtYmx5IHRvIGNvbWUgdG8gdGhlaXIgYWlkLCBzdGF0aW5nIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEN5emljZW5lczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DeXppY3VzLCBhIHRvd24gb24gdGhlIHNvdXRoZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3JlIG9mIHRoZSBQcm9wb250aXMuPC9ub3RlPiB3ZXJlIHByZXNzaW5nIHRoZW0gaGFyZCBpbiB3YXIgYnkgYm90aCBsYW5kCiAgICAgICAgICAgICAgICAgICAgYW5kIHNlYSwgYW5kIGltcGxvcmluZyB5b3Ugbm90IHRvIGxvb2sgaWRseSBvbiB3aGlsZSB0aGV5IHBlcmlzaGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4geW91IGhlYXJkIGFsbCB0aGVzZSB0aWRpbmdzIGF0IHRoYXQgdGltZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBmcm9tIGJvdGggdGhlIHNwZWFrZXJzIHRoZW1zZWx2ZXMgYW5kIHRob3NlIHdobyBzdXBwb3J0ZWQgdGhlbTsgd2hlbgogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXJtb3JlIHRoZSBtZXJjaGFudHMgYW5kIHNoaXBvd25lcnMgd2VyZSBhYm91dCB0byBzYWlsIG91dCBvZiB0aGUgUG9udHVzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgQnl6YW50aW5lcyBhbmQgQ2FsY2hlZG9uaWFuczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DYWxjaGVkb24sCiAgICAgICAgICAgICAgICAgICAgICAgIGEgdG93biBhY3Jvc3MgdGhlIEJvc3BvcnVzIGZyb20gQnl6YW50aXVtLjwvbm90ZT4gYW5kIEN5emljZW5lcyB3ZXJlIGZvcmNpbmcKICAgICAgICAgICAgICAgICAgICB0aGVpciBzaGlwcyB0byBwdXQgaW4gdG8gdGhlaXIgcG9ydHMgYmVjYXVzZSBvZiB0aGUgc2NhcmNpdHkgb2YgZ3JhaW4gaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICBvd24gY291bnRyaWVzOyBzZWVpbmcgYWxzbyB0aGF0IHRoZSBwcmljZSBvZiBncmFpbiB3YXMgYWR2YW5jaW5nIGluIHRoZQogICAgICAgICAgICAgICAgICAgIFBlaXJhZXVzLCBhbmQgdGhhdCB0aGVyZSB3YXMgbm90IHZlcnkgbXVjaCB0byBiZSBib3VnaHQsIHlvdSB2b3RlZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaHMgc2hvdWxkIGxhdW5jaCB0aGVpciBzaGlwcyBhbmQgYnJpbmcgdGhlbSB1cCB0byB0aGUgcGllciwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVtYmVycyBvZiB0aGUgc2VuYXRlIGFuZCB0aGUgZGVtYXJjaHMgc2hvdWxkIG1ha2Ugb3V0IGxpc3RzIG9mIHRoZSBkZW1lc21lbiBhbmQKICAgICAgICAgICAgICAgICAgICByZXBvcnRzIG9mIGF2YWlsYWJsZSBzZWFtZW4sIGFuZCB0aGF0IHRoZSBhcm1hbWVudCBzaG91bGQgYmUgZGVzcGF0Y2hlZCBhdCBvbmNlLAogICAgICAgICAgICAgICAgICAgIGFuZCBhaWQgc2VudCB0byB0aGUgdmFyaW91cyByZWdpb25zLiBBbmQgdGhpcyBkZWNyZWUsIHByb3Bvc2VkIGJ5IEFyaXN0b3Bob24sCiAgICAgICAgICAgICAgICAgICAgd2FzIHBhc3NlZCwgYXMgZm9sbG93czo8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZGVjcmVlLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHlvdSBoYXZlIGhlYXJkLCBtZW4gb2YgdGhlIGp1cnkuIEZvciBteSBvd24gcGFydCwgd2hlbiB0aGUgc2FpbG9ycyBsaXN0ZWQKICAgICAgICAgICAgICAgICAgICBieSB0aGUgZGVtZXNtZW4gZGlkIG5vdCBhcHBlYXIsIHNhdmUgYSB2ZXJ5IGZldywgYW5kIHRoZXNlIGluY29tcGV0ZW50LCBJCiAgICAgICAgICAgICAgICAgICAgZGlzbWlzc2VkIHRoZW07IGFuZCBoYXZpbmcgbW9ydGdhZ2VkIG15IHByb3BlcnR5IGFuZCBib3Jyb3dlZCBtb25leSwgSSB3YXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgdG8gbWFuIG15IHNoaXAsIGhpcmluZyB0aGUgYmVzdCBzYWlsb3JzIHBvc3NpYmxlIGJ5IGdpdmluZyB0byBlYWNoIG1hbgogICAgICAgICAgICAgICAgICAgIGxhcmdlIGJvbnVzZXMgYW5kIGFkdmFuY2UgcGF5bWVudHMuIE1vcmUgdGhhbiB0aGF0LCBJIGZ1cm5pc2hlZCB0aGUgc2hpcCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZXF1aXBtZW50IHdob2xseSBteSBvd24sIHRha2luZyBub3RoaW5nIGZyb20gdGhlIHB1YmxpYyBzdG9yZXMsIGFuZCBJIG1hZGUKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIGFzIGJlYXV0aWZ1bCBhbmQgbWFnbmlmaWNlbnQgYXMgcG9zc2libGUsIG91dGRvaW5nIGFsbCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2hzLiBBcyBmb3Igcm93ZXJzLCBJIGhpcmVkIHRoZSBiZXN0IHRoYXQgY291bGQgYmUgaGFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3Qgb25seSBkaWQgSSBkZWZyYXkgdGhlIHRyaWVyYXJjaGFsIGV4cGVuc2VzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGF0IHRoYXQgdGltZSB3ZXJlIHNvIHZlcnkgaGVhdnksIGJ1dCBJIGFsc28gcGFpZCBpbiBhZHZhbmNlIG5vIHNtYWxsIHBhcnQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdGF4ZXMgd2hpY2ggeW91IGhhZCBvcmRlcmVkIHRvIGJlIGNvbGxlY3RlZCBmb3IgdGhlIGNvc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbi4gRm9yIHdoZW4geW91IGhhZCB2b3RlZCB0aGF0IHRoZSBtZW1iZXJzIG9mIHRoZSBzZW5hdGUgb24gYmVoYWxmIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlbWVzbWVuIHNob3VsZCByZXBvcnQgdGhlIG5hbWVzIG9mIHRob3NlIHdobyB3ZXJlIHRvIHBheSB0YXhlcyBpbiBhZHZhbmNlLAogICAgICAgICAgICAgICAgICAgIGJvdGggb2YgdGhvc2Ugd2hvIHdlcmUgbWVtYmVycyBvZiB0aGUgZGVtZXMgYW5kIHRob3NlIHdobyBvd25lZCBwcm9wZXJ0eSBpbgogICAgICAgICAgICAgICAgICAgIHRoZW0sIG15IG5hbWUgd2FzIHJlcG9ydGVkIGZyb20gdGhyZWUgZGVtZXMsIGFzIG15IHByb3BlcnR5IHdhcyBpbiBsYW5kLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlIEkgd2FzIHRoZSBmaXJzdCB0byBwYXkgbXkgdGF4ZXMgaW4KICAgICAgICAgICAgICAgICAgICBhZHZhbmNlLCBub3IgZGlkIEkgc2VlayB0byBnZXQgbXlzZWxmIGV4Y3VzZWQgZWl0aGVyIG9uIHRoZSBncm91bmQgdGhhdCBJIHdhcwogICAgICAgICAgICAgICAgICAgIHNlcnZpbmcgYXMgdHJpZXJhcmNoIGFuZCBjb3VsZCBub3QgZGVmcmF5IHRoZSBjb3N0cyBvZiB0d28gcHVibGljIHNlcnZpY2VzIGF0CiAgICAgICAgICAgICAgICAgICAgb25jZSwgb3IgdGhhdCB0aGUgbGF3cyBkaWQgbm90IHBlcm1pdCBzdWNoIGEgdGhpbmcuIEFuZCBJIGhhdmUgbmV2ZXIgcmVjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5IHdoaWNoIEkgYWR2YW5jZWQsIGJlY2F1c2UgYXQgdGhlIHRpbWUgSSB3YXMgYWJyb2FkIGluIHlvdXIgc2VydmljZSBhcwogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaCwgYW5kIGFmdGVyd2FyZHMsIHdoZW4gSSByZXR1cm5lZCwgSSBmb3VuZCB0aGF0IHRoZSBtb25leSBmcm9tIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCByZXNvdXJjZXMgaGFkIGFscmVhZHkgYmVlbiBnYXRoZXJlZCBpbiBieSBvdGhlcnMsIGFuZCB0aGF0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgbGVmdCBoYWQgbm90aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['50.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBJIGFtIHN0YXRpbmcgdGhlIHRydXRoIHRvIHlvdSBpbiB0aGlzLCB0aGUgY2xlcmsKICAgICAgICAgICAgICAgICAgICBzaGFsbCByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbnMgY292ZXJpbmcgdGhlc2UgbWF0dGVycywgdGhvc2Ugb2YgdGhlIHBlcnNvbnMgd2hvCiAgICAgICAgICAgICAgICAgICAgYXQgdGhhdCB0aW1lIGNvbGxlY3RlZCB0aGUgbWlsaXRhcnkgc3VwcGxpZXMgYW5kIG9mIHRoZSBkZXNwYXRjaGluZyBib2FyZDsgYWxzbwogICAgICAgICAgICAgICAgICAgIHRoZSByZWNvcmQgb2YgdGhlIHBheSB3aGljaCBJIGdhdmUgb3V0IGV2ZXJ5IG1vbnRoIHRvIHRoZSByb3dlcnMgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmluZXMsIHJlY2VpdmluZyBmcm9tIHRoZSBnZW5lcmFscyBzdWJzaXN0ZW5jZS1tb25leSBhbG9uZSwgZXhjZXB0IHBheSBmb3IgdHdvCiAgICAgICAgICAgICAgICAgICAgbW9udGhzIG9ubHkgaW4gYSBwZXJpb2Qgb2YgYSB5ZWFyIGFuZCBmaXZlIG1vbnRocyBhbHNvIGEgbGlzdCBvZiB0aGUgc2FpbG9ycyB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIGhpcmVkLCBhbmQgaG93IG11Y2ggbW9uZXkgZWFjaCBvZiB0aGVtIHJlY2VpdmVkOyB0byB0aGUgZW5kIHRoYXQgZnJvbSB0aGlzCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2UgeW91IG1heSBrbm93IGhvdyBnZW5lcm91cyBJIHdhcyBhbmQgd2h5IHRoZSBkZWZlbmRhbnQgd2FzIHVud2lsbGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRha2Ugb3ZlciB0aGUgc2hpcCBmcm9tIG1lIHdoZW4gdGhlIHRlcm0gb2YgbXkgdHJpZXJhcmNoeSBoYWQgZXhwaXJlZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHByb29mLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHRoYXQgSSBhbSB1dHRlcmluZyBubyBmYWxzZWhvb2RzIGluIHJlZ2FyZCB0byB0aGUgbWF0dGVycyB3aGljaCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBtZW50aW9uZWQsIHlvdSBoYXZlIGxlYXJuZWQsIG1lbiBvZiB0aGUganVyeSwgZnJvbSB0aGUgcmVhZGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy4gQnV0LCBmdXJ0aGVyLCB5b3Ugd2lsbCBhbGwgYWdyZWUgd2l0aCBtZSB0aGF0IHdoYXQgSSBhbSBhYm91dCB0bwogICAgICAgICAgICAgICAgICAgIHNheSBpcyB0cnVlLiBJdCBpcyBhZG1pdHRlZCB0aGF0IHRoZSB1c2VmdWxuZXNzIG9mIGEgc2hpcCBpcyBkb25lIGF3YXkgd2l0aCwKICAgICAgICAgICAgICAgICAgICBmaXJzdCwgaWYgdGhlIG1lbiBhcmUgbm90IHBhaWQsIGFuZCBzZWNvbmRseSwgaWYgc2hlIHB1dCBpbnRvIHRoZSBQZWlyYWV1cwogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoZXIgZXhwZWRpdGlvbiBpcyBmaW5pc2hlZDsgZm9yIGluIHRoYXQgY2FzZSB0aGVyZSBpcyBhIGdyZWF0IGRlYWwgb2YKICAgICAgICAgICAgICAgICAgICBkZXNlcnRpb24sIGFuZCB0aG9zZSBvZiB0aGUgc2FpbG9ycyB3aG8gcmVtYWluIGFyZSB1bndpbGxpbmcgdG8gZW1iYXJrIGFnYWluLAogICAgICAgICAgICAgICAgICAgIHVubGVzcyBhZGRpdGlvbmFsIG1vbmV5IGlzIGdpdmVuIHRoZW0gZm9yIHRoZWlyIGhvdXNlaG9sZCBleHBlbnNlcy4gQm90aCBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRoaW5ncyBoYXBwZW5lZCB0byBtZSwgbWVuIG9mIHRoZSBqdXJ5LCBzbyB0aGF0IG15IHRyaWVyYXJjaHkgYmVjYW1lIHRoZQogICAgICAgICAgICAgICAgICAgIG1vcmUgY29zdGx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['50.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSByZWNlaXZlZCBubyBwYXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIGZvciB0aGUgc3BhY2Ugb2YgZWlnaHQgbW9udGhzLCBhbmQgSSBzYWlsZWQgaG9tZSB0byBQZWlyYWV1cyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIGJlY2F1c2UgbXkgc2hpcCB3YXMgdGhlIGZhc3Rlc3Qgc2FpbGVyLCBhbmQgYWdhaW4sIHdoZW4gSSB3YXMKICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIGJ5IHRoZSBwZW9wbGUgdG8gdGFrZSBNZW5vbiB0aGUgZ2VuZXJhbCB0byB0aGUgSGVsbGVzcG9udCB0byByZXBsYWNlCiAgICAgICAgICAgICAgICAgICAgQXV0b2NsZXMsIHdobyBoYWQgYmVlbiByZW1vdmVkIGZyb20gaGlzIGNvbW1hbmQsIEkgc2V0IHNhaWwgb24gc2hvcnQgbm90aWNlIGZyb20KICAgICAgICAgICAgICAgICAgICBBdGhlbnMuIEluIHRoZSBwbGFjZSBvZiB0aGUgc2VhbWVuIHdobyBoYWQgZGVzZXJ0ZWQgSSBoaXJlZCBvdGhlcnMsIGdpdmluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgbGFyZ2UgYm9udXNlcyBhbmQgYWR2YW5jZSBwYXltZW50cywgYW5kIEkgZ2F2ZSB0byB0aG9zZSBvZiB0aGUgb3JpZ2luYWwgc2FpbG9ycwogICAgICAgICAgICAgICAgICAgIHdobyBzdGF5ZWQgd2l0aCBtZSBzb21ldGhpbmcgdG8gbGVhdmUgYmVoaW5kIGZvciB0aGUgbWFpbnRlbmFuY2Ugb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGRzIGluIGFkZGl0aW9uIHRvIHdoYXQgdGhleSBoYWQgYmVmb3JlOyA8L3RyYW5zbGF0aW9uPg=="
translation['50.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgSSB3YXMgd2VsbCBhd2FyZSBvZiB0aGUgbmVlZCB0aGV5IGZlbHQsIGFuZCBob3cgaXQgcHJlc3NlZCB1cG9uIGVhY2ggb25lLAogICAgICAgICAgICAgICAgICAgIGFuZCBJIHdhcyBteXNlbGYgZW1iYXJyYXNzZWQgZm9yIGZ1bmRzIGFzLCBieSBaZXVzIGFuZCBBcG9sbG8sIG5vIG9uZSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGJlbGlldmUsIHdobyBoYWQgbm90IGFjY3VyYXRlbHkgZm9sbG93ZWQgdGhlIGNvdXJzZSBvZiBteSBhZmZhaXJzLiBIb3dldmVyLCBJCiAgICAgICAgICAgICAgICAgICAgbW9ydGdhZ2VkIG15IGZhcm0gdG8gVGhyYXN5bG9jaHVzIGFuZCBBcmNoZW5lw7xzLCBhbmQgaGF2aW5nIGJvcnJvd2VkCiAgICAgICAgICAgICAgICAgICAgdGhpcnR5IG1pbmFlIGZyb20gdGhlbSBhbmQgZGlzdHJpYnV0ZWQgdGhlIG1vbmV5IGFtb25nIHRoZSBjcmV3LCBJIHB1dCB0byBzZWEsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyBwYXJ0IG9mIHRoZSBwZW9wbGUncyBvcmRlcnMgbWlnaHQgZmFpbCB0byBiZSBjYXJyaWVkIG91dCwgYXMgZmFyIGFzIGl0CiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZWQgb24gbWUuIEFuZCB0aGUgcGVvcGxlLCBoZWFyaW5nIG9mIHRoaXMsIGdhdmUgbWUgYSB2b3RlIG9mIHRoYW5rcywgYW5kCiAgICAgICAgICAgICAgICAgICAgaW52aXRlZCBtZSB0byBkaW5lIGluIHRoZSBQcnl0YW5ldW0uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQKICAgICAgICAgICAgICAgICAgICBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aCBpbiB0aGlzLCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlIGRlcG9zaXRpb24gZGVhbGluZwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlc2UgZmFjdHMsIGFuZCB0aGUgZGVjcmVlIG9mIHRoZSBwZW9wbGUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiwgd2hlbiB3ZQogICAgICAgICAgICAgICAgICAgIGNhbWUgdG8gdGhlIEhlbGxlc3BvbnQsIGFuZCB0aGUgdGVybSBvZiBteSB0cmllcmFyY2h5IGhhZCBleHBpcmVkLCBhbmQgbm8gcGF5CiAgICAgICAgICAgICAgICAgICAgaGFkIGJlZW4gZ2l2ZW4gdG8gdGhlIHNvbGRpZXJzIGV4Y2VwdCBmb3IgdHdvIG1vbnRocyB3aGVuIGFub3RoZXIgZ2VuZXJhbCwKICAgICAgICAgICAgICAgICAgICBUaW1vbWFjaHVzLCBoYWQgY29tZeKAlHRob3VnaCBldmVuIGhlIGJyb3VnaHQgdG8gdGhlIGZsZWV0IG5vIG5ldwogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaHMgdG8gcmVsaWV2ZSB0aG9zZSBpbiBzZXJ2aWNlLOKAlG1hbnkgb2YgbXkgY3JldyBiZWNhbWUKICAgICAgICAgICAgICAgICAgICBkaXNjb3VyYWdlZCBhbmQgd2VudCBvZmYsIGRlc2VydGluZyB0aGUgc2hpcCwgc29tZSB0byB0aGUgbWFpbmxhbmQgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIG1pbGl0YXJ5IHNlcnZpY2UsIGFuZCBzb21lIHRvIHRoZSBmbGVldCBvZiB0aGUgVGhhc2lhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPiBUaGFzb3MsIGEgbGFyZ2UgaXNsYW5kIGluIHRoZSBub3RoZXJuIEFlZ2Vhbi48L25vdGU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBNYXJvbml0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPiBNYXJvbmVpYSwgYSB0b3duIG9uIHRoZSBzb3V0aGVybgogICAgICAgICAgICAgICAgICAgICAgICBjb2FzdCBvZiBUaHJhY2UuPC9ub3RlPiB3b24gb3ZlciBieSB0aGUgcHJvbWlzZSBvZiBoaWdoIHBheSBhbmQgcmVjZWl2aW5nCiAgICAgICAgICAgICAgICAgICAgc3Vic3RhbnRpYWwgc3VtcyBpbiBhZHZhbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHNhdyBhbHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCBteSByZXNvdXJjZXMgd2VyZSBieSBub3cgZXhoYXVzdGVkLCB0aGF0IHRoZSBzdGF0ZSB3YXMgbmVnbGVjdGZ1bCBvZiB0aGVtLAogICAgICAgICAgICAgICAgICAgIHRoYXQgb3VyIGFsbGllcyB3ZXJlIGluIG5lZWQsIGFuZCB0aGUgZ2VuZXJhbHMgbm90IHRvIGJlIGRlcGVuZGVkIG9uLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGFkIGJlZW4gZGVjZWl2ZWQgYnkgdGhlIHdvcmRzIG9mIG1hbnkgb2YgdGhlbTsgYW5kIHRoZXkga25ldyB0aGF0IHRoZSB0ZXJtCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgdHJpZXJhcmNoeSBoYWQgZXhwaXJlZCBhbmQgdGhhdCB0aGVpciB2b3lhZ2Ugd2FzIG5vdCB0byBiZSBob21ld2FyZCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vIHN1Y2Nlc3NvciBoYWQgYXJyaXZlZCB0byB0YWtlIGNvbW1hbmQgZnJvbSB3aG9tIHRoZXkgY291bGQgZXhwZWN0IGFueQogICAgICAgICAgICAgICAgICAgIHJlbGllZi4gRm9yIHRoZSBtb3JlIGFtYml0aW91cyBJIGhhZCBiZWVuIHRvIG1hbiBteSBzaGlwIHdpdGggZ29vZCByb3dlcnMsIGJ5IHNvCiAgICAgICAgICAgICAgICAgICAgbXVjaCB3YXMgdGhlIGRlc2VydGlvbiBmcm9tIG1lIGdyZWF0ZXIgdGhhbiBmcm9tIHRoZSBvdGhlciB0cmllcmFyY2hzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIG90aGVycyBoYWQgdGhpcyBhZHZhbnRhZ2UgYXQgYW55CiAgICAgICAgICAgICAgICAgICAgcmF0ZSwgdGhhdCB0aGUgc2FpbG9ycyB3aG8gaGFkIGNvbWUgdG8gdGhlaXIgc2hpcHMgZHJhd24gZnJvbSB0aGUgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICBsaXN0cywgc3RheWVkIHdpdGggdGhlbSBpbiBvcmRlciB0byBtYWtlIHN1cmUgb2YgdGhlaXIgcmV0dXJuIGhvbWUgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIHNob3VsZCBkaXNjaGFyZ2UgdGhlbTsgd2hlcmVhcyBtaW5lLCB0cnVzdGluZyBpbiB0aGVpciBza2lsbCBhcyBhYmxlCiAgICAgICAgICAgICAgICAgICAgcm93ZXJzLCB3ZW50IG9mZiB3aGVyZXZlciB0aGV5IHdlcmUgbGlrZWx5IHRvIGJlIHJlLWVtcGxveWVkIGF0IHRoZSBoaWdoZXN0CiAgICAgICAgICAgICAgICAgICAgd2FnZXMsIHRoaW5raW5nIG1vcmUgb2YgdGhlaXIgZ2FpbiBmb3IgdGhlIGltbWVkaWF0ZSBwcmVzZW50IHRoYW4gb2YgdGhlIGRhbmdlcgogICAgICAgICAgICAgICAgICAgIGltcGVuZGluZyBvdmVyIHRoZW0sIGlmIHRoZXkgc2hvdWxkIGV2ZXIgYmUgY2F1Z2h0IGJ5IG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q29uc2VxdWVudGx5IHdoZW4gbXkKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzIHdlcmUgaW4gdGhlIGNvbmRpdGlvbiB3aGljaCBJIGhhdmUgZGVzY3JpYmVkLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBJIHdhcwogICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgYnkgdGhlIGdlbmVyYWwsIFRpbW9tYWNodXMsIHRvIHNhaWwgdG8gSGllcm9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhpZXJvbiB3YXMgb24gdGhlIGVhc3Rlcm4gc2hvcmUgb2YgdGhlIENpbW1lcmlhbiBCb3Nwb3J1cwogICAgICAgICAgICAgICAgICAgICAgICDvvIh0aGUgc3RyYWlnaHQgYmV0d2VlbiB0aGUgQmxhY2sgU2VhIGFuZCB0aGUgU2VhIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEF6b2bvvIkuPC9ub3RlPiB0byBjb252b3kgdGhlIGdyYWluLCB0aG91Z2ggaGUgcHJvdmlkZWQgbm8gcGF5CiAgICAgICAgICAgICAgICAgICAg77yId29yZCBoYWQgYmVlbiBicm91Z2h0IHRoYXQgdGhlIEJ5emFudGluZXMgYW5kIHRoZSBDYWxjaGVkb25pYW5zIHdlcmUKICAgICAgICAgICAgICAgICAgICBhZ2FpbiBicmluZ2luZyB0aGUgc2hpcHMgaW50byBwb3J0IGFuZCBmb3JjaW5nIHRoZW0gdG8gdW5sb2FkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZ3JhaW7vvIksIEkgYm9ycm93ZWQgbW9uZXkgZnJvbSBBcmNoaWRlbXVzIG9mIEFuYXBobHlzdHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gQW5hcGhseXN0dXMsIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQW50aW9jaGlzLjwvbm90ZT4gZmlmdGVlbiBtaW5hZSBhdCBpbnRlcmVzdCwgYW5kIEkgc2VjdXJlZCBmcm9tIE5pY2lwcHVzLAogICAgICAgICAgICAgICAgICAgIHRoZSBzaGlwb3duZXIsIHdobyBoYXBwZW5lZCB0byBiZSBpbiBTZXN0dXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPgogICAgICAgICAgICAgICAgICAgICAgICBTZXN0dXMsIGFsc28gYSB0b3duIG9uIHRoZSBIZWxsZXNwb250Ljwvbm90ZT4gZWlnaHQgaHVuZHJlZCBkcmFjaG1hZSwgYXMgYQogICAgICAgICAgICAgICAgICAgIG1hcml0aW1lIGxvYW4gYXQgMTIgMS8yIHBlciBjZW50LCBvbiBjb25kaXRpb24gdGhhdCBJIHNob3VsZCBwYXkgaGltIHByaW5jaXBhbAogICAgICAgICAgICAgICAgICAgIGFuZCBpbnRlcmVzdCB3aGVuIHRoZSBzaGlwIHNob3VsZCBnZXQgc2FmZWx5IGJhY2sgdG8gQXRoZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBJIHNlbnQgRXVjdGVtb24sIHRoZSBwZW50ZWNvbnRhcmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gVGhlIHBlbnRlY29udGFyY2ggd2FzIHByb3Blcmx5IGFuIHVuZGVyLW9mZmljZXIKICAgICAgICAgICAgICAgICAgICAgICAgaW4gY2hhcmdlIG9mIGEgdGllciBvZiBmaWZ0eSBvYXJzbWVuLjwvbm90ZT4gdG8gTGFtcHNhY3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gTGFtcHNhY3VzLCBhIHRvd24gb24gdGhlIEhlbGxlc3BvbnQuPC9ub3RlPiBnaXZpbmcgaGltIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgYW5kIGxldHRlcnMgdG8gZnJpZW5kcyBvZiBteSBmYXRoZXIsIGFuZCBiYWRlIGhpbSBoaXJlIGZvciBtZSB0aGUgYmVzdCBzYWlsb3JzCiAgICAgICAgICAgICAgICAgICAgaGUgY291bGQuIEkgbXlzZWxmIHN0YXllZCBpbiBTZXN0dXMgYW5kIGdhdmUgc29tZSBtb25leeKAlGFsbCBJCiAgICAgICAgICAgICAgICAgICAgaGFk4oCUdG8gdGhlIG9sZCBzYWlsb3JzIHdobyBzdGF5ZWQgd2l0aCBtZSwgc2luY2UgdGhlIHRlcm0gb2YgbXkKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2h5IGhhZCBleHBpcmVkLCBhbmQgSSBzZWN1cmVkIGFsc28gc29tZSBvdGhlciBzYWlsb3JzIGF0IGZ1bGwgcGF5LCB3aGlsZQogICAgICAgICAgICAgICAgICAgIHRoZSBnZW5lcmFsIHdhcyBtYWtpbmcgcmVhZHkgZm9yIGhpcyB2b3lhZ2UgdG8gSGllcm9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBFdWN0ZW1vbiBjYW1lIGJhY2sgZnJvbSBMYW1wc2FjdXMsIGJyaW5naW5nIHRoZSBzYWlsb3JzCiAgICAgICAgICAgICAgICAgICAgd2hvbSBoZSBoYWQgaGlyZWQsIGFuZCB0aGUgZ2VuZXJhbCBnYXZlIHRoZSB3b3JkIGZvciB1cyB0byBwdXQgdG8gc2VhLCBpdAogICAgICAgICAgICAgICAgICAgIGhhcHBlbmVkIHRoYXQgRXVjdGVtb24gc3VkZGVubHkgZmVsbCBzaWNrLCBhbmQgd2FzIGluIGEgdmVyeSBzZXJpb3VzIGNvbmRpdGlvbi4KICAgICAgICAgICAgICAgICAgICBJLCB0aGVyZWZvcmUsIGdhdmUgaGltIGhpcyBwYXksIGFkZGluZyBtb25leSBmb3IgaGlzIGpvdXJuZXksIGFuZCBzZW50IGhpbSBob21lOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIEkgc2VjdXJlZCBhbm90aGVyIHBlbnRlY29udGFyY2ggYW5kIHB1dCBvdXQgdG8gc2VhIHRvIGNvbnZveSB0aGUgZ3JhaW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIEkgc3RheWVkIHRoZXJlIGZvcnR5LWZpdmUgZGF5cywgdW50aWwgdGhlIHZlc3NlbHMgc2FpbGVkIG91dCBmcm9tIFBvbnR1cwogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSByaXNpbmcgb2YgQXJjdHVydXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByaXNpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQXJjdHVydXMgZmFsbHMgYXQgdGhlIHRpbWUgb2YgdGhlIGF1dHVtbmFsIGVxdWlub3guPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgYXJyaXZlZCBhdCBTZXN0dXMsIEkgZXhwZWN0ZWQgdG8gc2FpbAogICAgICAgICAgICAgICAgICAgIGZvciBob21lLCBhcyBteSB0ZXJtIG9mIHNlcnZpY2UgaGFkIGV4cGlyZWQsIGFuZCBJIGhhZCBhbHJlYWR5IHNlcnZlZCB0d28gbW9udGhzCiAgICAgICAgICAgICAgICAgICAgYmV5b25kIGl0IGFuZCBubyBzdWNjZXNzb3IgaGFkIGFycml2ZWQgdG8gdGFrZSBvdmVyIHRoZSBzaGlwLiBUaGUgZ2VuZXJhbCwKICAgICAgICAgICAgICAgICAgICBUaW1vbWFjaHVzLCBob3dldmVyLOKAlGZvciBhbiBlbWJhc3N5IGZyb20gdGhlIE1hcm9uaXRlcyBoYWQgY29tZSB0bwogICAgICAgICAgICAgICAgICAgIGhpbSwgYmVnZ2luZyBoaW0gdG8gY29udm95IHRoZWlyIGdyYWluIHNoaXBz4oCUb3JkZXJlZCB1cyB0cmllcmFyY2hzIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBjYWJsZXMgZmFzdCB0byB0aGUgc2hpcHMgYW5kIHRvdyB0aGVtIHRvIE1hcm9uZWlh4oCUYSBsb25nIHZveWFnZQogICAgICAgICAgICAgICAgICAgIGFjcm9zcyB0aGUgb3BlbiBzZWEuIDwvdHJhbnNsYXRpb24+"
translation['50.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIHRvbGQgYWxsIHRoZXNlIGZhY3RzIHRvIHlvdSBmcm9tIHRoZSBiZWdpbm5pbmcsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGtub3cgaG93IG11Y2ggSSBoYXZlIG15c2VsZiBleHBlbmRlZCBhbmQgaG93IGJ1cmRlbnNvbWUgbXkgc2VydmljZSBhcwogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaCBoYXMgYmVlbiB0byBtZSwgYW5kIGFsbCB0aGUgZXhwZW5zZXMgd2hpY2ggSSBzdWJzZXF1ZW50bHkgYm9yZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdCBvZiB0aGUgZGVmZW5kYW50IGJ5IHNlcnZpbmcgYmV5b25kIG15IHRlcm0sIHNpbmNlIGhlIGRpZCBub3QgY29tZSB0bwogICAgICAgICAgICAgICAgICAgIHRha2Ugb3ZlciB0aGUgc2hpcCwgYW5kIGFsbCB0aGUgZGFuZ2VycyBJIG15c2VsZiBpbmN1cnJlZCBmcm9tIHN0b3JtcyBhbmQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBlbmVteS4gRm9yIGFmdGVyIHdlIGhhZCBjb252b3llZCB0aGUgc2hpcHMgdG8gTWFyb25laWEsIGFuZCBoYWQgYXJyaXZlZCBhdAogICAgICAgICAgICAgICAgICAgIFRoYXNvcywgVGltb21hY2h1cyBjYW1lIGFuZCB1bmRlcnRvb2sgYWdhaW4gaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgVGhhc2lhbnMgdG8KICAgICAgICAgICAgICAgICAgICBjb252b3kgZ3JhaW4gYW5kIGEgYm9keSBvZiBwZWx0YXN0czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gTGlnaHQtYXJtZWQKICAgICAgICAgICAgICAgICAgICAgICAgdHJvb3BzLjwvbm90ZT4gdG8gU3RyeW3Dqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IFN0cnltZSwKICAgICAgICAgICAgICAgICAgICAgICAgYSB0b3duIG9uIHRoZSBzb3V0aGVybiBjb2FzdCBvZiBUaHJhY2UuPC9ub3RlPiB3aXRoIHRoZSBpbnRlbnRpb24gb2YgdGFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHBsYWNlIGhpbXNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['50.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgTWFyb25pdGVzCiAgICAgICAgICAgICAgICAgICAgYXJyYXllZCB0aGVpciBzaGlwcyBhZ2FpbnN0IHVzIGluIGRlZmVuY2Ugb2YgdGhlIHBsYWNlLCBhbmQgb2ZmZXJlZCBiYXR0bGUsIGFuZAogICAgICAgICAgICAgICAgICAgIG91ciBtZW4gd2VyZSB0aXJlZCBvdXQgd2l0aCB0aGVpciBsb25nIHZveWFnZSBhbmQgZnJvbSB0b3dpbmcgdGhlIHNoaXBzIGZyb20KICAgICAgICAgICAgICAgICAgICBUaGFzb3MgdG8gU3RyeW3DqiBiZXNpZGVzLCBpdCB3YXMgc3Rvcm15LCBhbmQgdGhlIHBsYWNlIG9mZmVyZWQgbm8KICAgICAgICAgICAgICAgICAgICBoYXJib3IsIGFuZCBpdCB3YXMgaW1wb3NzaWJsZSB0byBnbyBhc2hvcmUgYW5kIGdldCBhIG1lYWwsIGZvciB0aGUgY291bnRyeSB3YXMKICAgICAgICAgICAgICAgICAgICBob3N0aWxlLCBhbmQgYWxsIGFyb3VuZCB0aGUgd2FsbCBiYW5kcyBvZiBtZXJjZW5hcmllcyBhbmQgYmFyYmFyaWFucyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIG5laWdoYm9yaG9vZCBsYXkgZW5jYW1wZWQ7IHNvIHdlIHdlcmUgZm9yY2VkIHRvIHJpZGUgYXQgYW5jaG9yIGFsbCBuaWdodCBsb25nIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG9wZW4gc2VhIHdpdGhvdXQgZm9vZCBhbmQgd2l0aG91dCBzbGVlcCwga2VlcGluZyB3YXRjaCBsZXN0IHRoZSBzaGlwcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBNYXJvbml0ZXMgc2hvdWxkIGF0dGFjayB1cyBpbiB0aGUgbmlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['50.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IKICAgICAgICAgICAgICAgICAgICB3YXMgdGhpcyBhbGwuIEl0IHdhcyBvdXIgbG90IHRvIGhhdmUgYnkgbmlnaHQgcmFpbiBhbmQgdGh1bmRlciBhbmQgYSB2aW9sZW50CiAgICAgICAgICAgICAgICAgICAgd2luZCBhdCB0aGF0IHNlYXNvbiBvZiB0aGUgeWVhciDvvIhmb3IgdGhlIHRpbWUgd2FzIGp1c3QgYXQgdGhlIHNldHRpbmcKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgUGxlaWFkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IFJvdWdobHkgdGhlIGVuZCBvZiBPY3RvYmVyLAogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBzdG9ybXkgc2Vhc29uIGhhZCBzZXQgaW4uPC9ub3RlPu+8iTsgc28gY2FuIHlvdSBub3QgaW1hZ2luZSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIHdoYXQgZGVzcG9uZGVuY3kgZmVsbCB1cG9uIG91ciBtZW4sIGFuZCB3aGF0IGFuIGFtb3VudCBvZgogICAgICAgICAgICAgICAgICAgIGRlc2VydGlvbiBJIGhhZCBhZ2FpbiB0byBmYWNlIGFmdGVyIHRoaXM/IEZvciB0aGUgb2xkIHNhaWxvcnMgaGFkIGJvcm5lIG1hbnkKICAgICAgICAgICAgICAgICAgICBoYXJkc2hpcHMgYW5kIHJlY2VpdmVkIGJ1dCBsaXR0bGUgY29tcGVuc2F0aW9u4oCUbWVyZWx5IHdoYXQgSSB3YXMgYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIGJvcnJvdyBhbmQgZ2l2ZSB0byBlYWNoIG1hbiBpbiBhZGRpdGlvbiB0byB3aGF0IHRoZXkgaGFkIGhhZCBmcm9tIG1lIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgZ2VuZXJhbCBkaWQgbm90IHN1cHBseSBlbm91Z2ggZXZlbiBmb3IgdGhlaXIgZGFpbHkgc3VzdGVuYW5jZS4gQnkgbm93CiAgICAgICAgICAgICAgICAgICAgSSBoYWQgc2VydmVkIHRocmVlIG1vbnRocyBiZXlvbmQgbXkgdGVybSwgYW5kIHRoZSBkZWZlbmRhbnQgaGFkIG5vdCB5ZXQgY29tZSB0bwogICAgICAgICAgICAgICAgICAgIHRha2Ugb3ZlciB0aGUgc2hpcDsgYnV0IEkgYm9ycm93ZWQgbW9uZXkgYW5kIGhpcmVkIHNhaWxvcnMgdG8gcmVwbGFjZSB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgZGVzZXJ0ZWQuIDwvdHJhbnNsYXRpb24+"
translation['50.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRlZmVuZGFudCBhbG9uZSBvZiB0aGUgdHJpZXJhcmNocyBhcHBvaW50ZWQgdG8gc3VjY2VlZCB1cyBoYXMgbm8gZXhjdXNlCiAgICAgICAgICAgICAgICAgICAgbGVmdCBoaW0gZm9yIG5vdCBoYXZpbmcgY29tZSB0byB0YWtlIG92ZXIgdGhlIHNoaXAgbG9uZyBiZWZvcmUuIEZvciBFdWN0ZW1vbiwKICAgICAgICAgICAgICAgICAgICB0aGUgcGVudGVjb250YXJjaCwgYWZ0ZXIgaGUgd2FzIHNlbnQgaG9tZSBmcm9tIHRoZSBIZWxsZXNwb250IG9uIGFjY291bnQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgc2lja25lc3MsIHdoZW4gaGUgcmVhY2hlZCBwb3J0IGFuZCBoZWFyZCB0aGF0IFBvbHljbGVzIGhhZCBiZWVuIGFwcG9pbnRlZCB0bwogICAgICAgICAgICAgICAgICAgIHJlbGlldmUgbWUsIGtub3dpbmcgdGhhdCB0aGUgdGVybSBvZiBteSB0cmllcmFyY2h5IGhhZCBleHBpcmVkIGFuZCB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgbm93IHNlcnZpbmcgb3ZlciB0aW1lLCB0b29rIHdpdGggaGltIG15IGZhdGhlci1pbi1sYXcsIERlaW5pYXMsIGFuZCBjb21pbmcgdXAgdG8KICAgICAgICAgICAgICAgICAgICBQb2x5Y2xlcyBpbiB0aGUgc2FtcGxlIG1hcmtldCwgYmFkZSBoaW0gc2V0IHNhaWwgYW5kIHRha2Ugb3ZlciB0aGUgc2hpcCB3aXRoIGFsbAogICAgICAgICAgICAgICAgICAgIHNwZWVkLCB0ZWxsaW5nIGhpbSB0aGF0IHRoZSBleHBlbnNlcyB3aGljaCB3ZXJlIGluY3VycmVkIGV2ZXJ5IGRheSBpbiBhZGRpdGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBwcm92aXNpb24gbW9uZXkgc3VwcGxpZWQgYnkgdGhlIGdlbmVyYWwgd2VyZSB2ZXJ5IGhlYXZ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['50.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0b2xkIGhpbSBpbiBkZXRhaWwgb2YgdGhlIHBheSBnaXZlbiBlYWNoIG1vbnRoIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIHJvd2VycyBhbmQgdGhlIG1hcmluZXMsIGJvdGggdG8gdGhlIHNhaWxvcnMgd2hvbSBoZSBoYWQgaGltc2VsZiBoaXJlZCBhdAogICAgICAgICAgICAgICAgICAgIExhbXBzYWN1cyBhbmQgdG8gdGhvc2Ugd2hvIGNhbWUgb24gYm9hcmQgc3Vic2VxdWVudGx5IHRvIHJlcGxhY2UgdGhvc2Ugd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGRlc2VydGVkLCBhbmQgYWxzbyBvZiB0aGUgYWRkaXRpb25hbCBzdW1zIHdoaWNoIEkgaGFkIGdpdmVuIHRvIGVhY2ggb2YgdGhlIG9sZAogICAgICAgICAgICAgICAgICAgIHNhaWxvcnMgYXQgdGhlaXIgcmVxdWVzdCBhZnRlciB0aGUgdGVybSBvZiBteSB0cmllcmFyY2h5IGhhZCBleHBpcmVkLCBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3Qgb2YgdGhlIG1vbmV5IGV4cGVuZGVkIHVwb24gdGhlIHNoaXAgZnJvbSBkYXkgdG8gZGF5LiBXaXRoIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgRXVjdGVtb24gd2FzIHRob3JvdWdobHkgYWNxdWFpbnRlZCwgZm9yIGl0IHdhcyB0aHJvdWdoIGhpbSBhcwogICAgICAgICAgICAgICAgICAgIHBlbnRlY29udGFyY2ggdGhhdCBhbGwgcHVyY2hhc2VzIGFuZCBkaXNidXJzZW1lbnRzIHdlcmUgbWFkZS4gPC90cmFuc2xhdGlvbj4="
translation['50.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB0b2xkIGhpbSwgdG9vLCBhYm91dCB0aGUgc2hpcCdzIGVxdWlwbWVudCwgdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIHdhcyB3aG9sbHkgbXkgb3duLCBhbmQgdGhhdCBJIGhhZCBub3RoaW5nIGZyb20gdGhlIHB1YmxpYyBzdG9yZXMuCiAgICAgICAgICAgICAgICAgICAg4oCcVGhlcmVmb3JlLOKAnSBoZSBzYWlkLCDigJxwbGFuIHRvIGNvbWUgdG8gYW4KICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnQgd2l0aCBoaW0sIG9yIHNhaWwgZnJvbSBoZXJlIHRha2luZyB5b3VyIG93biBlcXVpcG1lbnQgd2l0aCB5b3UuIEkKICAgICAgICAgICAgICAgICAgICB0aGluaywgaG93ZXZlcizigJ0gaGUgYWRkZWQsIOKAnHRoYXQgaGUgd2lsbCByZWFkaWx5IGNvbWUgdG8KICAgICAgICAgICAgICAgICAgICB0ZXJtcyB3aXRoIHlvdTsgZm9yIGhlIG93ZXMgbW9uZXkgdGhlcmUsIHdoaWNoIGhlIHdpbGwgYmUgZ2xhZCB0byBwYXkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwcmljZSBvZiB0aGUgZXF1aXBtZW50LuKAnSBXaGVuIHRoZSBkZWZlbmRhbnQgaGVhcmQgdGhlc2Ugd29yZHMgZnJvbQogICAgICAgICAgICAgICAgICAgIEV1Y3RlbW9uIGFuZCBEZWluaWFzIG15IGZhdGhlci1pbi1sYXcsIGhlIG1hZGUgbm8gYW5zd2VyIHRvIHRoZW0gcmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgb2Ygd2hpY2ggdGhleSBzcG9rZSBidXQsIHRoZXkgc2FpZCwgaGUgYnJva2UgaW50byBhIGxhdWdoLCBhbmQgc2FpZCwKICAgICAgICAgICAgICAgICAgICDigJxUaGUgbW91c2UgaGFzIGp1c3QgdGFzdGVkIHBpdGNoPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPiBBCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlsaWFyIHByb3ZlcmIgb2YgdGhvc2Ugd2hvIGZhbGwgaW50byBkaWZmaWN1bHRpZXMgdGhyb3VnaCB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICAgICAgZm9sbHkuIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaGVvYy4gRXAuIDE0IiB2YWxpZD0ieWVzIj5UaGVvY3JpdHVzIDE0LjUxPC9iaWJsPi4gVGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgICAgICBjbGF1c2UgZml0cyB0aGUgcHJlc2VudCBzaXR1YXRpb246IFBhc2lvbiBoYWQgc291Z2h0IEF0aGVuaWFuIGNpdGl6ZW5zaGlwOgogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG9kb3J1cyBpcyBub3cgcGF5aW5nIHRoZSBwcmljZS48L25vdGU+OyBmb3IgaGUgd2FudGVkIHRvIGJlIGFuCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4u4oCdIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRoZW9jLiBFcC4gMTQiIHZhbGlkPSJ5ZXMiPlRoZW9jcml0dXMgMTQuNTE8L2JpYmw+LiBUaGUgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXVzZSBmaXRzIHRoZSBwcmVzZW50IHNpdHVhdGlvbjogUGFzaW9uIGhhZCBzb3VnaHQgQXRoZW5pYW4gY2l0aXplbnNoaXA6CiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIGlzIG5vdyBwYXlpbmcgdGhlIHByaWNlLjwvdHJhbnNsYXRpb24+"
translation['50.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB3aGVuIGhlIHBhaWQgbm8KICAgICAgICAgICAgICAgICAgICBoZWVkIHRvIHdoYXQgaGUgaGVhcmQgZnJvbSBFdWN0ZW1vbiBhbmQgRGVpbmlhcywgbGF0ZXIgb24gUHl0aG9kb3J1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBBY2hhcm5hZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IEFjaGFybmFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIE9lbmXDr3MuPC9ub3RlPiBhbmQgQXBvbGxvZG9ydXMgb2YgTGV1Y29ub8OrLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IExldWNvbm9lLCBhIGRlbWUgb2YgdGhlIHRyaWJlIExlb250aXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGNvbm5lY3Rpb25zIG9mIG1pbmUsIGFnYWluIGFwcHJvYWNoZWQgaGltLCBhbmQgdXJnZWQgaGltIHRvIGdvIGFuZAogICAgICAgICAgICAgICAgICAgIHRha2Ugb3ZlciB0aGUgc2hpcCwgYXMgaGUgaGFkIGJlZW4gZGVzaWduYXRlZCBhcyBteSBzdWNjZXNzb3I7IGFuZCB0aGV5IHRvbGQgaGltCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIGVxdWlwbWVudCwgdGhhdCBpdCB3YXMgd2hvbGx5IG15IG93biwgYW5kIHRoYXQgSSBoYWQgbm90aGluZyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBzdG9yZXMuIDwvdHJhbnNsYXRpb24+"
translation['50.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz7igJxTbywgaWYgeW91IHdhbnQgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIHVzZSBvZiB0aGF0LOKAnSB0aGV5IHNhaWQsIOKAnGxlYXZlIG1vbmV5IGhlcmUsIGFuZCBkbyBub3QKICAgICAgICAgICAgICAgICAgICBydW4gdGhlIHJpc2sgb2YgY2FycnlpbmcgaXQgYWJyb2FkLuKAnSBGb3IgdGhleSB3YW50ZWQgdG8gcmVkZWVtIHRoZQogICAgICAgICAgICAgICAgICAgIGZhcm0gZm9yIG1lIGJ5IHBheWluZyBBcmNoZW5lw7xzIGFuZCBUaHJhc3lsb2NodXMgdGhpcnR5IG1pbmFlLgogICAgICAgICAgICAgICAgICAgIFJlZ2FyZGluZyB0aGUgd2VhciBhbmQgdGVhciBvZiB0aGUgc2hpcCdzIGVxdWlwbWVudCB0aGV5IHdlcmUgd2lsbGluZyB0byBkcmF3IHVwCiAgICAgICAgICAgICAgICAgICAgYW4gYWdyZWVtZW50IHdpdGggaGltLCBhbmQgdGhlbXNlbHZlcyB0byBiZSBzdXJldGllcyBmb3IgbWUsIHRoYXQgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBhc3N1cmVkbHkgaGF2ZSB0aGUgdGVybXMgd2hpY2ggdGhlIG90aGVyIHRyaWVyYXJjaHMgZ2F2ZSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzb3JzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggaW4gYWxsIHRoaXMsIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbnMgYmVhcmluZyB1cG9uIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdHRlcnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgYXJlIG1hbnkKICAgICAgICAgICAgICAgICAgICBwcm9vZnMgZnJvbSB3aGljaCBJIHRoaW5rIEkgY2FuIHNob3cgeW91IHRoYXQgUG9seWNsZXMgbmVpdGhlciBhdCB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBpbnRlbmRlZCB0byB0YWtlIG92ZXIgdGhlIHNoaXAgZnJvbSBtZSwgbm9yLCBhZnRlciBoZSB3YXMgZm9yY2VkIGJ5IHlvdSBhbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGRlY3JlZSB0byBnbyBhbmQgam9pbiB0aGUgc2hpcCwgd2FzIGhlIHdpbGxpbmcgdG8gdGFrZSBpdCBvdmVyIGFzIG15IHN1Y2Nlc3Nvci4KICAgICAgICAgICAgICAgICAgICBGb3IgYWZ0ZXIgaGUgYXJyaXZlZCBhdCBUaGFzb3MsIHdoZW4gSSB3YXMgc2VydmluZyBmb3IgdGhlIGZvdXJ0aCBtb250aCBhZnRlciBteQogICAgICAgICAgICAgICAgICAgIHRlcm0gaGFkIGV4cGlyZWQsIEkgdG9vayB3aXRuZXNzZXMgd2l0aCBtZSwgYXMgbWFueSBvZiB0aGUgY2l0aXplbnMgYXMgSSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbWFyaW5lcyBhbmQgcm93ZXJzLCBhbmQsIGNvbWluZyB1cCB0byBoaW0gaW4gdGhlIG1hcmtldC1wbGFjZSBhdCBUaGFzb3MsCiAgICAgICAgICAgICAgICAgICAgSSBiYWRlIGhpbSB0YWtlIG92ZXIgdGhlIHNoaXAgZnJvbSBtZSBhcyBteSBzdWNjZXNzb3IgYW5kIHJlcGF5IG1lIHdoYXQgSSBoYWQKICAgICAgICAgICAgICAgICAgICBleHBlbmRlZCBzaW5jZSB0aGUgZXhwaXJhdGlvbiBvZiBteSB0ZXJtLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5JCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlYWR5IHRvIHJlY2tvbiBpdCB1cCBpdGVtIGJ5IGl0ZW0sIHdoaWxlIEkgaGFkIGJ5IG1lIGFzIHdpdG5lc3NlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBleHBlbmRpdHVyZXMgdGhlIHNhaWxvcnMgYW5kIHRoZSBtYXJpbmVzIGFuZCB0aGUgcm93ZXJzLCBpbiBvcmRlciB0aGF0LCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGRpc3B1dGVkIGFueXRoaW5nLCBJIG1pZ2h0IHJlZnV0ZSBoaW0gYXQgb25jZS4gRXZlcnl0aGluZyBoYWQgYmVlbiByZWNvcmRlZCBzbwogICAgICAgICAgICAgICAgICAgIGFjY3VyYXRlbHkgYnkgbWUsIHRoYXQgSSBoYWQgd3JpdHRlbiBkb3duIG5vdCBvbmx5IHRoZSBkaXNidXJzZW1lbnRzIHRoZW1zZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFsc28gdGhlIG9iamVjdHMgZm9yIHdoaWNoIHRoZSBtb25leSBoYWQgYmVlbiBzcGVudCwgdGhlIG5hdHVyZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIHJlbmRlcmVkLCB3aGF0IHRoZSBwcmljZSB3YXMsIGluIHRoZSBjb2luYWdlIG9mIHdoYXQgY291bnRyeSB0aGUgcGF5bWVudAogICAgICAgICAgICAgICAgICAgIHdhcyBtYWRlLCBhbmQgd2hhdCB0aGUgbG9zcyBpbiBleGNoYW5nZSB3YXMsIGluIG9yZGVyIHRoYXQgSSBtaWdodCBiZSBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBjb252aW5jaW5nIHByb29mIHRvIG15IHN1Y2Nlc3NvciwgaWYgaGUgdGhvdWdodCBhbnkgZmFsc2UgZW50cmllcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYmVpbmcgbWFkZSBhZ2FpbnN0IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['50.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVzaWRlcyBJIHdhcwogICAgICAgICAgICAgICAgICAgIHJlYWR5IHRvIHRha2UgYW4gb2F0aCB0byBjb25maXJtIG15IHJlY2tvbmluZy4gVXBvbiBteSBnaXZpbmcgaGltIHRoaXMKICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UsIGhlIGFuc3dlcmVkIHRoYXQgaGUgaGFkIG5vIGludGVyZXN0IGluIHdoYXQgSSB3YXMgc2F5aW5nLiBBdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgYSBzZXJ2YW50IGNhbWUgZnJvbSB0aGUgZ2VuZXJhbCB3aXRoIG9yZGVycyBmb3IgbWUgdG8gc2V0IHNhaWwuIFRoZSBvcmRlcgogICAgICAgICAgICAgICAgICAgIHdhcyBnaXZlbiB0byBtZSwgbm90IHRvIHRoZSBkZWZlbmRhbnQsIG15IHN1Y2Nlc3NvciwgdXBvbiB3aG9tIHRoZSBkdXR5IHdhcyBub3cKICAgICAgICAgICAgICAgICAgICBkZXZvbHZpbmc7IGJ1dCB0aGUgcmVhc29uIGZvciB0aGlzIEkgd2lsbCBleHBsYWluIGluIHRoZSBjb3Vyc2Ugb2YgbXkgYWRkcmVzcy4KICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHRpbWUgYmVpbmcgaXQgc2VlbWVkIHRvIG1lIGJlc3QgdG8gd2VpZ2ggYW5jaG9yIGFuZCBzYWlsIHdoZXJlIGhlCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCBtZSwgPC90cmFuc2xhdGlvbj4="
translation['50.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiBJIHB1dCBpbnRvIFRoYXNvcyBhZ2FpbiwKICAgICAgICAgICAgICAgICAgICBhZnRlciB0b3dpbmcgdGhlIHZlc3NlbHMgdG8gU3RyeW3DqiBhcyB0aGUgZ2VuZXJhbCBoYWQgb3JkZXJlZCwgYmlkZGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBzYWlsb3JzIGFuZCB0aGUgbWFyaW5lcyBhbmQgdGhlIHJvd2VycyB0byByZW1haW4gb24gYm9hcmQsIEkgd2VudCBieSBteXNlbGYKICAgICAgICAgICAgICAgICAgICB0byB0aGUgaG91c2Ugd2hlcmUgdGhlIGdlbmVyYWwsIFRpbW9tYWNodXMsIGxvZGdlZCwgd2lzaGluZyB0aGF0IGhlIHRvbyBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBwcmVzZW50LCB3aGVuIEkgb2ZmZXJlZCB0aGUgc2hpcCB3aXRoIGhlciBmdWxsIGNyZXcgdG8gdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIFBvbHljbGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5JIGZvdW5kIHRoZSBkZWZlbmRhbnQgdGhlcmUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaHMgYW5kIHRob3NlIHdobyB3ZXJlIHRvIHN1Y2NlZWQgdGhlbSwgYW5kIHNvbWUgb3RoZXJzIG9mIG91ciBjaXRpemVuczsKICAgICAgICAgICAgICAgICAgICBhbmQgb24gY29taW5nIGluIEkgc3Bva2UgYXQgb25jZSB0byBQb2x5Y2xlcyBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGdlbmVyYWwsIGFuZAogICAgICAgICAgICAgICAgICAgIGNhbGxlZCB1cG9uIGhpbSB0byB0YWtlIG92ZXIgdGhlIHNoaXAgZnJvbSBtZSwgYW5kIHRvIHBheSBtZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzYnVyc2VtZW50cyBtYWRlIGR1cmluZyB0aGUgcGVyaW9kIHNpbmNlIG15IHRlcm0gb2Ygc2VydmljZSBoYWQgZXhwaXJlZDsgYW5kIEkKICAgICAgICAgICAgICAgICAgICBhc2tlZCBoaW0gYWJvdXQgdGhlIHNoaXAncyBlcXVpcG1lbnQsIHdoZXRoZXIgaGUgd291bGQgdGFrZSBpdCBvdmVyLCBvciB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGJyb3VnaHQgZXF1aXBtZW50IG9mIGhpcyBvd24gd2l0aCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['50.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgdGh1cyBjaGFsbGVuZ2VkIGhpbSwgaGUgYXNrZWQgbWUgd2h5IEkgd2FzIHRoZSBvbmx5IG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2hzIHdobyBoYWQgZXF1aXBtZW50IG9mIG15IG93biwgYW5kIHdoZXRoZXIgdGhlIHN0YXRlIGRpZCBub3Qga25vdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2VyZSBzb21lIHBlb3BsZSBhYmxlIHRvIHByb3ZpZGUgZXF1aXBtZW50IGZvciB0aGVpciBzaGlwcywgc28gdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSBpdHNlbGYgZGlkIG5vdCBuZWVkIHRvIGRvIGl0LiDigJxPciBoYXZlIHlvdSzigJ0gaGUgc2FpZCwKICAgICAgICAgICAgICAgICAgICDigJxzbyBmYXIgc3VycGFzc2VkIHRoZSBvdGhlcnMgaW4gd2VhbHRoIGFzIHRvIGJlIHRoZSBvbmx5IG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2hzIHRvIGhhdmUgZXF1aXBtZW50IG9mIHlvdXIgb3duIGFuZCBnaWxkZWQgb3JuYW1lbnRzPyA8L3RyYW5zbGF0aW9uPg=="
translation['50.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5XaG8s4oCdIGhlIGNvbnRpbnVlZCwg4oCcY291bGQgZW5kdXJlCiAgICAgICAgICAgICAgICAgICAgeW91ciBtYWRuZXNzIGFuZCBleHRyYXZhZ2FuY2UsIGEgY3JldyBjb3JydXB0ZWQgYW5kIGFjY3VzdG9tZWQgdG8gcmVjZWl2ZSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHN1bXMgaW4gYWR2YW5jZSBhbmQgdG8gZW5qb3kgZXhlbXB0aW9uIGZyb20gc2VydmljZXMgbm9ybWFsbHkgcmVxdWlyZWQgb24gYm9hcmQKICAgICAgICAgICAgICAgICAgICBhIHNoaXAsIGFuZCBhYmxlIGFsc28gdG8gbWFrZSB1c2Ugb2YgdGhlIGJhdGhzLCBhbmQgbWFyaW5lcyBhbmQgcm93ZXJzIHJlbmRlcmVkCiAgICAgICAgICAgICAgICAgICAgbHV4dXJpb3VzIGJ5IGhpZ2ggd2FnZXMgcGFpZCBpbiBmdWxsPyBCYWQgd2F5cyzigJ0gaGUgc2FpZCwKICAgICAgICAgICAgICAgICAgICDigJxhcmUgdGhlc2UgeW91IGhhdmUgdGF1Z2h0IHRoZSBhcm15LiBJdCBpcyBwYXJ0bHkgeW91ciBmYXVsdCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHRyb29wcyBvZiB0aGUgb3RoZXIgdHJpZXJhcmNocyBoYXZlIGJlY29tZSBtb3JlIHVucnVseSwgc2Vla2luZyB0byBoYXZlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgdHJlYXRtZW50IHRoYXQgeW91cnMgZW5qb3k7IHlvdSBvdWdodCB0byBoYXZlIGRvbmUgdGhlIHNhbWUgYXMgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNocy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['50.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIGhpcyBzYXlpbmcgdGhpcywgSQogICAgICAgICAgICAgICAgICAgIGFuc3dlcmVkIHRoYXQgdGhlIHJlYXNvbiBJIGhhZCB0YWtlbiBubyBlcXVpcG1lbnQgZnJvbSB0aGUgZG9ja3Mgd2FzIGJlY2F1c2UsCiAgICAgICAgICAgICAgICAgICAg4oCcWW91LOKAnSBzYWlkIEksIOKAnGhhdmUgYnJvdWdodCB0aGUgc3RvcmVzIGludG8gYmFkCiAgICAgICAgICAgICAgICAgICAgcmVwdXRlLiBIb3dldmVyLCBpZiB5b3UgbGlrZSwgdGFrZSB0aGlzIGVxdWlwbWVudCBvZiBtaW5lOyBpZiBub3QsIHByb3ZpZGUKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgZm9yIHlvdXJzZWxmLiBBcyBmb3IgdGhlIHNhaWxvcnMgYW5kIG1hcmluZXMgYW5kIHJvd2VycywgaWYgeW91IHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYXZlIGJlZW4gY29ycnVwdGVkIGJ5IG1lLCB0YWtlIG92ZXIgdGhlIHNoaXAsIGFuZCBnZXQgc2FpbG9ycyBhbmQKICAgICAgICAgICAgICAgICAgICBtYXJpbmVzIGFuZCByb3dlcnMgZm9yIHlvdXJzZWxmLCB3aG8gd2lsbCBzYWlsIHdpdGggeW91IHdpdGhvdXQgcGF5LiBCdXQgdGFrZQogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlIHNoaXAsIGZvciBpdCBpcyBub3QgbXkgcGxhY2UgdG8gc2VydmUgYW55IGxvbmdlcjsgdGhlIHRlcm0gb2YgbXkKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2h5IGhhcyBleHBpcmVkLCBhbmQgSSBoYXZlIHNlcnZlZCBmb3VyIG1vbnRocyBiZXlvbmQgaXQu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgc2FpZCB0aGlzIHRvIGhpbSwgaGUgYW5zd2VyZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhpcyBjb2xsZWFndWUgaW4gdGhlIHRyaWVyYXJjaHkgaGFkIG5vdCBjb21lIHRvIHRoZSBzaGlwLgogICAgICAgICAgICAgICAgICAgIOKAnFNvLOKAnSBzYWlkIGhlLCDigJxJIHdpbGwgbm90IHRha2Ugb3ZlciB0aGUgc2hpcAogICAgICAgICAgICAgICAgICAgIGFsb25lLuKAnSBUbyBwcm92ZSB0aGF0IEkgYW0gdGVsbGluZyB5b3UgdGhlIHRydXRoIGluIHRoaXMsIHRoYXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFya2V0LXBsYWNlIGhlIG1hZGUgdGhlIGFuc3dlciBtZW50aW9uZWQgYWJvdmUsIHRoYXQgaGUgY2FyZWQgbm90aGluZyBmb3Igd2hhdAogICAgICAgICAgICAgICAgICAgIEkgd2FzIHNheWluZywgYW5kIHRoYXQgaW4gdGhlIGhvdXNlIHdoZXJlIFRpbW9tYWNodXMgbG9kZ2VkIGhlIGRlY2xhcmVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgdGFrZSBvdmVyIHRoZSBzaGlwIGFsb25l4oCUdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zIGJlYXJpbmcgb24gdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHdoZW4gdGhlIGRlZmVuZGFudCB3b3VsZCBuZWl0aGVyIHRha2Ugb3ZlciB0aGUgc2hpcCBmcm9tIG1lIG5vciBwYXkKICAgICAgICAgICAgICAgICAgICB0aGUgZXhwZW5zZXMgZm9yIHRoZSBwZXJpb2QgYmV5b25kIG15IHRlcm0sIGFuZCB0aGUgZ2VuZXJhbCBvcmRlcmVkIG1lIHRvIHNldAogICAgICAgICAgICAgICAgICAgIHNhaWwsIEkgYXBwcm9hY2hlZCBoaW0gaW4gdGhlIGhhcmJvciBpbiBUaGFzb3MsIGFuZCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCwgd2hlbiB0aGUgc2hpcCB3YXMgZnVsbHkgbWFubmVkLCBhbmQgbWFkZSBhIHByb3Bvc2FsLCB3aGljaCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgaW5kZWVkIGZhaXIsIHNpbmNlIHRoZSBhZHZhbnRhZ2Ugd2FzIGFsbCBvbiBoaXMgc2lkZSwgYnV0IHdoaWNoIHdhcyBmb3JjZWQgdXBvbgogICAgICAgICAgICAgICAgICAgIG1lIGJ5IHRoZSBjaXJjdW1zdGFuY2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz7igJxTaW5jZSB5b3UKICAgICAgICAgICAgICAgICAgICBzYXksIFBvbHljbGVzLCB0aGF0IHlvdXIgYXNzb2NpYXRlIGluIHRoZSB0cmllcmFyY2h5IGhhcyBub3QgY29tZSwgSSB3aWxsIGdldAogICAgICAgICAgICAgICAgICAgIGZyb20gaGltLCBpZiBJIGNhbiwgdGhlIGFtb3VudCBleHBlbmRlZCBkdXJpbmcgbXkgZXh0cmEgdGltZSBvZiBzZXJ2aWNlLCB0aGUKICAgICAgICAgICAgICAgICAgICBmb3VyIG1vbnRoczsgYnV0IGRvIHlvdSB0YWtlIG92ZXIgdGhlIHNoaXAsIGFuZCBmaXJzdCBzZXJ2ZSBhcyB0cmllcmFyY2ggZm9yCiAgICAgICAgICAgICAgICAgICAgeW91ciB0ZXJtLCB0aGUgc2l4IG1vbnRoczsgdGhlbiwgaWYgeW91ciBjb2xsZWFndWUgc2hhbGwgaGF2ZSBhcnJpdmVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyaW0sIHlvdSB3aWxsIGdpdmUgb3ZlciB0aGUgc2hpcCwgaGF2aW5nIGZ1bGZpbGxlZCB5b3VyIHRlcm0gb2Ygc2VydmljZTsKICAgICAgICAgICAgICAgICAgICBhbmQsIGlmIGhlIGRvZXMgbm90IGNvbWUsIHlvdSB3aWxsIHN1ZmZlciBubyBncmVhdCBoYXJtIGluIHNlcnZpbmcgdHdvIG1vbnRocwogICAgICAgICAgICAgICAgICAgIGJleW9uZCB5b3VyIHRlcm0uIDwvdHJhbnNsYXRpb24+"
translation['50.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5PciwgYW0gSSwgd2hvIGhhdmUgc2VydmVkCiAgICAgICAgICAgICAgICAgICAgZm9yIG15IG93biB0ZXJtIGFuZCB0aGF0IG9mIG15IGNvbGxlYWd1ZSwgdG8gaGF2ZSBwZXJmb3JtZWQgZXh0cmEgc2VydmljZSBhcwogICAgICAgICAgICAgICAgICAgIHRyaWVyYXJjaCBmb3IgeW91IGFuZCB5b3VyIGFzc29jaWF0ZSwgYW5kIGFyZSB5b3UsIHdobyBoYXZlIGluY3VycmVkIG5vIGV4cGVuc2UsCiAgICAgICAgICAgICAgICAgICAgdG8gcmVmdXNlIGVpdGhlciB0byB0YWtlIG92ZXIgdGhlIHNoaXAgYW5kIHNlcnZlIHlvdXIgb3duIHRlcm0sIG9yIHRvIHJlaW1idXJzZQogICAgICAgICAgICAgICAgICAgIG1lIGZvciB0aGUgZXhwZW5zZXMgSSBoYXZlIGJvcm5lP+KAnSBXaGVuIEkgc2FpZCB0aGlzLCBoZSBhbnN3ZXJlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgSSB3YXMgcm9tYW5jaW5nLiBUaGVuIHRoZSBnZW5lcmFsIG9yZGVyZWQgbWUgdG8gZ28gb24gYm9hcmQgbXkgc2hpcCBhbmQgcHV0IHRvCiAgICAgICAgICAgICAgICAgICAgc2VhIHdpdGggaGltLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IGhlIGRpZCBnaXZlIG1lIHRoaXMKICAgICAgICAgICAgICAgICAgICBhbnN3ZXIsIHBsZWFzZSByZWFkIHRoZSBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0bwogICAgICAgICAgICAgICAgICAgIG1lbnRpb24gYSBtYXR0ZXIgdG8geW91LCB0byB0aGUgZW5kIHRoYXQgeW91IG1heSB1bmRlcnN0YW5kIGhvdyBmbGFncmFudGx5IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gd3JvbmdlZC4gRm9yIGFib3V0IHRoZSBzYW1lIHRpbWUgTW5lc2lsb2NodXMgb2YgUGVyaXRob2lkYWU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IFBlcml0aG9pZGFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIE9lbmXDr3MuPC9ub3RlPiBhbmQgUGhyYXNpZXJpZGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPgogICAgICAgICAgICAgICAgICAgICAgICBQb3NzaWJseSB0aGUgc2FtZSBhcyB0aGUgZnJpZW5kIG9mIFRpbW90aGV1cyBtZW50aW9uZWQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0OSIgdmFsaWQ9InllcyI+RGVtLiA0OTwvYmlibD4uPC9ub3RlPiBvZiBBbmFwaGx5c3R1cyB3ZXJlIGFwcG9pbnRlZCB0byBzdWNjZWVkIEhhZ25pYXMKICAgICAgICAgICAgICAgICAgICBhbmQgUHJheGljbGVzLiBCdXQsIHNpbmNlIFBocmFzaWVyaWRlcyBkaWQgbm90IGFycml2ZSB0byBqb2luIHRoZSBzaGlwLAogICAgICAgICAgICAgICAgICAgIE1uZXNpbG9jaHVzIHdlbnQgdG8gVGhhc29zIGFuZCB0b29rIG92ZXIgdGhlIHRyaXJlbWUgZnJvbSBIYWduaWFzLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ5IiB2YWxpZD0ieWVzIj5EZW0uIDQ5PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['50.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgcGFpZCB0byBIYWduaWFzIHdoYXQgdGhlIGxhdHRlciBjb252aW5jZWQgaGltIHdhcwogICAgICAgICAgICAgICAgICAgIGR1ZSBmb3IgdGhlIGV4cGVuc2VzIGhlIGhhZCBpbmN1cnJlZCBvbiB0aGVpciBiZWhhbGYgd2hpbGUgc2VydmluZyBhcyB0cmllcmFyY2gKICAgICAgICAgICAgICAgICAgICBiZXlvbmQgaGlzIHRpbWUsIGFuZCBoaXJlZCBmcm9tIEhhZ25pYXMgdGhlIHNoaXAncyBlcXVpcG1lbnQsIGFuZCBhc3N1bWVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB0aGUgZHV0aWVzIG9mIHRyaWVyYXJjaC4gQWZ0ZXJ3YXJkcywgd2hlbiB0aGUgbWVuIGZyb20gUGhyYXNpZXJpZGVzCiAgICAgICAgICAgICAgICAgICAgY2FtZSwgdGhleSBwYWlkIGhpcyBzaGFyZSBvZiB0aGUgZXhwZW5zZXMgdG8gTW5lc2lsb2NodXMsIGFuZCBmb3IgdGhlIHJlbWFpbmRlcgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0ZXJtIGpvaW5lZCBpbiBtZWV0aW5nIHdoYXRldmVyIGV4cGVuZGl0dXJlcyBoZSByZXF1aXJlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXAuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQsIHBsZWFzZSwgdGhlIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hpbmcgdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGVyaGFwcywgbm93LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgeW91IHdhbnQgdG8gaGVhciBmb3Igd2hhdCBwb3NzaWJsZSByZWFzb24gdGhlIGdlbmVyYWwgZmFpbGVkIHRvCiAgICAgICAgICAgICAgICAgICAgY29tcGVsIHRoZSBkZWZlbmRhbnQgdG8gdGFrZSBvdmVyIHRoZSBzaGlwLCB3aGVuIGhlIGNhbWUgdG8gaXQgYXMgbXkgc3VjY2Vzc29yLAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIG9uIHRoZSBtYXR0ZXIgYmVpbmcgc28gc3RyaWN0LiBJbiByZWdhcmQgdG8gdGhpcyBJIHdpc2ggdG8gc2hvdyB5b3UKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHdoeSBpdCB3YXMuIEZvciBUaW1vbWFjaHVzLCBtZW4gb2YgdGhlIGp1cnksIHdpc2hlZCBhYm92ZSBhbGwgdGhpbmdzIHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0aGUgdHJpcmVtZSB3ZWxsIGVxdWlwcGVkIGZvciBldmVyeSBzZXJ2aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbmV3LCBob3dldmVyLCB0aGF0IHRoZSBkZWZlbmRhbnQsIGlmIGhlIHRvb2sgb3ZlciB0aGUgc2hpcCwKICAgICAgICAgICAgICAgICAgICB3b3VsZCBtYW5hZ2Ugd3JldGNoZWRseSBhcyB0cmllcmFyY2g7IHRoYXQgaGUgd291bGQgZ2V0IHNlcnZpY2UgbmVpdGhlciBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGNyZXcgbm9yIHRoZSBtYXJpbmVzIG5vciB0aGUgcm93ZXJzLCBmb3Igbm90IG9uZSBvZiB0aGVtIHdvdWxkIHN0YXkgd2l0aCBoaW0uCiAgICAgICAgICAgICAgICAgICAgQmVzaWRlcywgaGUga25ldyB0aGF0LCBpZiBoZSBvcmRlcmVkIGhpbSB0byBzYWlsIHdpdGhvdXQgZ2l2aW5nIGhpbSBtb25leSwgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QgcHV0IG91dCB0byBzZWEgYXQgaGlzIGJpZGRpbmcsIGFzIEkgc2hvdWxkIGRvLCBidXQgd291bGQgbWFrZSB0cm91YmxlLgogICAgICAgICAgICAgICAgICAgIEFuZCBpbiBhZGRpdGlvbiB0byB0aGlzIGhlIGJvcnJvd2VkIGZyb20gaGltIHRoaXJ0eSBtaW5hZSBvbiB0aGUgdW5kZXJzdGFuZGluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd291bGQgbm90IGZvcmNlIGhpbSB0byB0YWtlIG92ZXIgdGhlIHNoaXAuIDwvdHJhbnNsYXRpb24+"
translation['50.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2h5IGl0IHdhcyB0aGF0IGhlIHdhcyBlc3BlY2lhbGx5IGluY2Vuc2VkIGFnYWluc3QgbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgdHJlYXRlZCBtZSBkZXNwaXRlZnVsbHksIGFuZCB3b3VsZCBuZXZlciBvbiBhbnkgb2NjYXNpb24gbGlzdGVuIHRvIGEgd29yZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgbWUgcmVnYXJkaW5nIGFueSBtYXR0ZXIsIEkgd2lzaCB0byBzaG93IHlvdSBjbGVhcmx5LCB0aGF0IHlvdSBtYXkgdW5kZXJzdGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBjYXJlZCBsZXNzIGF0IHRoYXQgdGltZSBmb3IgbXkgb3duIGNvbWZvcnQgb3IgZm9yIHRoZSBnZW5lcmFsJ3MgcG93ZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIGZvciB0aGUgcGVvcGxlIG9mIEF0aGVucyBhbmQgdGhlIGxhd3MsIGFuZCB0aGF0IEkgZW5kdXJlZCBpbGwtdHJlYXRtZW50IGFuZAogICAgICAgICAgICAgICAgICAgIGFidXNlLCB3aGljaCB3ZXJlIGZhciBtb3JlIGdyaWV2b3VzIHRvIG1lIHRoYW4gdGhlIGV4cGVuc2VzIEkgaW5jdXJyZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIHdoaWxlIHRoZSBmbGVldCB3YXMgbHlpbmcgYXQgVGhhc29zLAogICAgICAgICAgICAgICAgICAgIGEgZGVzcGF0Y2gtYm9hdCBjYW1lIGZyb20gTWV0aG9uw6ogaW4gTWFjZWRvbmlhIHRvIFRoYXNvcywgYnJpbmdpbmcgYQogICAgICAgICAgICAgICAgICAgIG1hbiB3aXRoIGxldHRlcnMgZnJvbSBDYWxsaXN0cmF0dXMgdG8gVGltb21hY2h1cywgd2hpY2gsIGFzIEkgYWZ0ZXJ3YXJkIGxlYXJuZWQsCiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVkIGEgcmVxdWVzdCB0aGF0IGhlIHNob3VsZCBzZW5kIHRoZSBzd2lmdGVzdC1zYWlsaW5nIHNoaXAgaGUgaGFkIHRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgQ2FsbGlzdHJhdHVzIHRvIGhpbS4gQXQgb25jZSwgdGhlbiwgYXQgZGF5YnJlYWsgdGhlIG5leHQgbW9ybmluZywgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlciBmcm9tIHRoZSBnZW5lcmFsIGNhbWUgYW5kIG9yZGVyZWQgbWUgdG8gc3VtbW9uIG15IGNyZXcgdG8gdGhlIHNoaXAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGl0IHdhcyBtYW5uZWQsIENhbGxpcHB1cywgdGhlIHNvbiBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvbiwgb2YgQWV4b27Dqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IEFleG9uZSwgYSBkZW1lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+IGNhbWUgb24gYm9hcmQsIGFuZCBvcmRlcmVkIHRoZSBwaWxvdCB0byBzdGVlciB0aGUKICAgICAgICAgICAgICAgICAgICBjb3Vyc2UgZm9yIE1hY2Vkb25pYS4gV2hlbiB3ZSBoYWQgcmVhY2hlZCBhIHBsYWNlIG9uIHRoZSBvcHBvc2l0ZSBtYWlubGFuZCwgYQogICAgICAgICAgICAgICAgICAgIHRyYWRpbmcgcG9zdCBvZiB0aGUgVGhhc2lhbnMsIGFuZCBoYWQgZ29uZSBhc2hvcmUgYW5kIHdlcmUgZ2V0dGluZyBvdXIgZGlubmVyLAogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGUgc2FpbG9ycywgQ2FsbGljbGVzLCB0aGUgc29uIG9mIEVwaXRyZXBoZXMsIG9mIFRocmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaHJpYSwgYSBkZW1lIG9mIHRoZSB0cmliZSBPZW5lw69zPC9ub3RlPiBjYW1lIHVwIHRvCiAgICAgICAgICAgICAgICAgICAgbWUsIGFuZCBzYWlkIHRoYXQgaGUgd2lzaGVkIHRvIHNwZWFrIHRvIG1lIGFib3V0IGEgbWF0dGVyIHdoaWNoIGNvbmNlcm5lZAogICAgICAgICAgICAgICAgICAgIG15c2VsZi4gSSBiYWRlIGhpbSBzcGVhayBvbiwgYW5kIGhlIHNhaWQgdGhhdCBoZSB3YW50ZWQgdG8gbWFrZSB3aGF0IHJldHVybiBoZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGZvciB0aGUgaGVscCBJIGhhZCBnaXZlbiBoaW0gaW4gaGlzIG5lZWQuIDwvdHJhbnNsYXRpb24+"
translation['50.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz7igJxEbyB5b3Uga25vdywgdGhlbizigJ0gaGUgYXNrZWQsIOKAnGZvciB3aGF0IHB1cnBvc2UKICAgICAgICAgICAgICAgICAgICB5b3UgYXJlIG1ha2luZyB0aGlzIHZveWFnZSwgYW5kIHdoZXJlIHlvdSBhcmUgZ29pbmc/4oCdIFdoZW4gSSByZXBsaWVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIGRpZCBub3Qga25vdywgaGUgc2FpZCwg4oCcVGhlbiBJIHdpbGwgdGVsbCB5b3U7IGZvciB5b3UgbXVzdAogICAgICAgICAgICAgICAgICAgIGxlYXJuIHRoaXMgaW4gb3JkZXIgdG8gcGxhbiB5b3VyIGFjdGlvbiBhcmlnaHQuIFlvdSBhcmUgZ29pbmcs4oCdIHNhaWQKICAgICAgICAgICAgICAgICAgICBoZSwg4oCcdG8gYnJpbmcgQ2FsbGlzdHJhdHVzLCBhbiBleGlsZSB3aG9tIHRoZSBBdGhlbmlhbnMgaGF2ZSB0d2ljZQogICAgICAgICAgICAgICAgICAgIGNvbmRlbW5lZCB0byBkZWF0aCwgZnJvbSBNZXRob27DqiB0byBUaGFzb3MgdG8gVGltb21hY2h1cywgaGlzIGtpbnNtYW4KICAgICAgICAgICAgICAgICAgICBieSBtYXJyaWFnZS4gSSBoYXZlIGZvdW5kIHRoaXMgb3V0LOKAnSBoZSBzYWlkLCDigJxmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHNlcnZhbnRzIG9mIENhbGxpcHB1cy4gRm9yIHlvdXIgb3duIHBhcnQsIHRoZW4sIGlmIHlvdSBhcmUgd2lzZSwgeW91IHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0IGFueSBleGlsZSB0byBjb21lIG9uIGJvYXJkIHRoZSBzaGlwOyBmb3IgdGhlIGxhd3MgZm9yYmlkIGl0LuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBoZWFyaW5nIHRoaXMgZnJvbSBDYWxsaWNsZXMsIEkKICAgICAgICAgICAgICAgICAgICBhcHByb2FjaGVkIENhbGxpcHB1cywgYW5kIGFza2VkIGhpbSB0byB3aGF0IHBsYWNlIGhlIHdhcyBzYWlsaW5nLCBhbmQgd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBnb2luZyB0byBmZXRjaC4gSGUgc3Bva2Ugcm91Z2hseSB0byBtZSBhbmQgdGhyZWF0ZW5lZCBtZSBpbiBhIHdheSB5b3UgY2FuCiAgICAgICAgICAgICAgICAgICAgZWFzaWx5IHVuZGVyc3RhbmQg77yIZm9yIHlvdSBhcmUgbm90IHdpdGhvdXQgZXhwZXJpZW5jZSBvZiB0aGUgd2F5cyBvZgogICAgICAgICAgICAgICAgICAgIENhbGxpcHB1c++8iSwgYW5kIEkgc2FpZCB0byBoaW0sIOKAnEkgaGVhciB0aGF0IHlvdSBhcmUgc2FpbGluZwogICAgICAgICAgICAgICAgICAgIHRvIGZldGNoIENhbGxpc3RyYXR1cy4gTm93LCBJIHdpbGwgdHJhbnNwb3J0IG5vIGV4aWxlLCBub3Igd2lsbCBJIGdvIHRvIGZldGNoCiAgICAgICAgICAgICAgICAgICAgaGltOyBmb3IgdGhlIGxhd3MgZm9yYmlkIGFueW9uZSB0byBnaXZlIGhhcmJvcmFnZSB0byBhbnkgZXhpbGUsIGFuZCBtYWtlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBkb2VzIHNvIGxpYWJsZSB0byB0aGUgc2FtZSBwdW5pc2htZW50LiBJIHNoYWxsLCB0aGVyZWZvcmUsIHNhaWwgYmFjayB0byB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIGluIFRoYXNvcy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['50.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Tbywgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYWlsb3JzIGNhbWUgb24gYm9hcmQsIEkgb3JkZXJlZCB0aGUgcGlsb3QgdG8gc2FpbCBiYWNrIHRvIFRoYXNvcy4gQ2FsbGlwcHVzCiAgICAgICAgICAgICAgICAgICAgcHJvdGVzdGVkLCBhbmQgYmFkZSBoaW0gc2FpbCBmb3IgTWFjZWRvbmlhIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgZ2VuZXJhbCdzCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHM7IGJ1dCBQb3NpZGlwcHVzLCB0aGUgcGlsb3QsIGFuc3dlcmVkIGhpbSB0aGF0IEkgd2FzIHRyaWVyYXJjaCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzaGlwLCBhbmQgdGhlIG9uZSByZXNwb25zaWJsZSwgYW5kIHRoYXQgaGUgZ290IGhpcyBwYXkgZnJvbSBtZTsgaGUgd291bGQgc2FpbCwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIHdoaXRoZXIgSSBiYWRlIGhpbSBzYWls4oCUdG8gVGhhc29zLCB0byB0aGUgZ2VuZXJhbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHdlIHJlYWNoZWQgVGhhc29zIHRoZSBuZXh0IGRheSwKICAgICAgICAgICAgICAgICAgICBUaW1vbWFjaHVzIHNlbnQgZm9yIG1lIHRvIGNvbWUgdG8gdGhlIHBsYWNlIHdoZXJlIGhlIGxvZGdlZCBvdXRzaWRlIHRoZSB3YWxsLiBJCiAgICAgICAgICAgICAgICAgICAgd2FzIGFmcmFpZCB0aGF0IGhlIHdvdWxkIHB1dCBtZSB1bmRlciBhcnJlc3Qgb24gZmFsc2UgY2hhcmdlcyBwcmVmZXJyZWQgYnkKICAgICAgICAgICAgICAgICAgICBDYWxsaXBwdXMsIHNvIGRpZCBub3Qgb2JleSB0aGUgc3VtbW9ucyBpbiBwZXJzb24sIGJ1dCB0b2xkIHRoZSBvZmZpY2VyIHRoYXQsIGlmCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIGFueXRoaW5nIHRvIHNheSB0byBtZSwgSSBzaG91bGQgYmUgaW4gdGhlIG1hcmtldC1wbGFjZTsgYW5kIEkgc2VudCBteQogICAgICAgICAgICAgICAgICAgIHNlcnZhbnQgd2l0aCBoaW0sIGluIG9yZGVyIHRoYXQsIGlmIHRoZSBnZW5lcmFsIGhhZCBhbnkgb3JkZXJzIHRvIGdpdmUgaGUgbWlnaHQKICAgICAgICAgICAgICAgICAgICBoZWFyIGFuZCByZXBvcnQgdG8gbWUuIDwvdHJhbnNsYXRpb24+"
translation['50.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgZm9yIHRoaXMgcmVhc29uLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIEkgaGF2ZSBzdGF0ZWQgdG8geW91LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgVGltb21hY2h1cyBkaWQgbm90IGZvcmNlIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCB0byB0YWtlIG92ZXIgdGhlIHNoaXAsIGFuZCBiZXNpZGVzLCBoZSB3YW50ZWQgdGhlIHVzZSBvZiB0aGUgc2hpcCBmb3IKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCBhcyBzaGUgd2FzIHRoZSBiZXN0IHNhaWxlci4gQXMgZm9yIHRoZSB0cmlyZW1lIG9mIFRocmFzeWxvY2h1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbmFneXJ1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QW5hZ3lydXMsIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgRXJlY3RoZcOvcy48L25vdGU+IG9uIGJvYXJkIHdoaWNoIGhlIHdhcyBoaW1zZWxmIHNhaWxpbmcsIGhlIGluZHVjZWQKICAgICAgICAgICAgICAgICAgICBUaHJhc3lsb2NodXMgdG8gbGV0IGhpcyB0cmllcmFyY2h5IHRvIENhbGxpcHB1cywgdGhhdCBDYWxsaXBwdXMsIGJlaW5nIGluIGZ1bGwKICAgICAgICAgICAgICAgICAgICBjb250cm9sIG9mIHRoZSBzaGlwLCBtaWdodCBjYXJyeSBDYWxsaXN0cmF0dXMgYWJvdXQsIGFzIGhlIHBsZWFzZWQuIFRpbW9tYWNodXMKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGNhbWUgb24gYm9hcmQgbXkgc2hpcCwgYW5kIHNhaWxlZCBhcm91bmQgaGVyZSBhbmQgdGhlcmUgdW50aWwgaGUgcmVhY2hlZAogICAgICAgICAgICAgICAgICAgIHRoZSBIZWxsZXNwb250LiA8L3RyYW5zbGF0aW9uPg=="
translation['50.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBoZSBoYWQgbm8gbG9uZ2VyIG5lZWQgb2Ygc2hpcHMgb2Ygd2FyLCBoZSBwdXQgb24gYm9hcmQgbXkgdmVzc2VsIEV1Y2ludXMKICAgICAgICAgICAgICAgICAgICBvZiBQYWxsZW7Dqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGFsbGVuZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGFsbGVuZSI+UGFsbGVuZTwvcGxhY2VOYW1lPiwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBBbnRpb2NoaXMuPC9ub3RlPiBhcyBjb21tYW5kZXIsIGFuZCwgZW5qb2luaW5nIHVwb24gaGltIHRvIGdpdmUgdGhlIHNhaWxvcnMKICAgICAgICAgICAgICAgICAgICBtb25leSBldmVyeSBkYXksIG9yZGVyZWQgbWUgdG8gc2FpbCBmb3IgaG9tZS4gV2hlbiwgdGhlbiwgb24gb3VyIGhvbWV3YXJkIHZveWFnZQogICAgICAgICAgICAgICAgICAgIHdlIHdlcmUgaW4gVGVuZWRvcywgYW5kIEx1Y2ludXMsIGRlc3BpdGUgdGhlIG9yZGVycyBnaXZlbiBoaW0gYnkgVGltb21hY2h1cywgd2FzCiAgICAgICAgICAgICAgICAgICAgZnVybmlzaGluZyBubyBtb25leSBmb3Igc3VzdGVuYW5jZSB0byB0aGUgc2FpbG9ycyDvvIhoZSBzYWlkIGhlIGhhZCBub25lLAogICAgICAgICAgICAgICAgICAgIGJ1dCBzaG91bGQgZ2V0IHNvbWUgZnJvbSBNeXRpbGVuw6rvvIksIGFuZCB0aGUgbWVuIGhhZCBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB3aGljaCB0byBidXkgcHJvdmlzaW9ucywgYW5kIHdpdGhvdXQgZm9vZCBjb3VsZCBub3QgaGF2ZSBjb250aW51ZWQgcm93aW5nLAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBhbGxlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBhbGxlbmUiPlBhbGxlbmU8L3BsYWNlTmFtZT4sIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQW50aW9jaGlzLjwvdHJhbnNsYXRpb24+"
translation['50.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5hZ2FpbiB0YWtpbmcgc29tZSBvZiBvdXIgY2l0aXplbnMgYXMKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgSSBhcHByb2FjaGVkIHRoZSBkZWZlbmRhbnQgaW4gVGVuZWRvcywgYW5kIGJhZGUgaGltIHRha2Ugb3ZlciB0aGUgc2hpcAogICAgICAgICAgICAgICAgICAgIGFzIG15IHN1Y2Nlc3NvciwgYW5kIHRvIHJlaW1idXJzZSBtZSBmb3IgdGhlIGV4cGVuc2VzIEkgaGFkIGluY3VycmVkIHdoaWxlIEkKICAgICAgICAgICAgICAgICAgICBzZXJ2aW5nIGFzIHRyaWVyYXJjaCBpbiBoaXMgc3RlYWQgYmV5b25kIG15IHRlcm0uIEkgZGlkIHRoaXMgaW4gb3JkZXIgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IG5vdCBtYWtlIHVzZSBvZiB0aGUgcHJldGV4dCwgaW4gaGlzIGRlZmVuY2UgYmVmb3JlIHlvdSwgdGhhdCBJIHJlZnVzZWQgdG8KICAgICAgICAgICAgICAgICAgICBoYW5kIG92ZXIgdGhlIHNoaXAgdG8gaGltIGJlY2F1c2UgSSB3YXMgYW1iaXRpb3VzIHRvIHNhaWwgaG9tZSBpbiBhIGZhc3Qtc2FpbGluZwogICAgICAgICAgICAgICAgICAgIHNoaXAgYW5kIHNob3cgb2ZmIHRvIHlvdSBteSBsYXZpc2ggZXhwZW5kaXR1cmUuIDwvdHJhbnNsYXRpb24+"
translation['50.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5TaW5jZSBoZSByZWZ1c2VkIHRvIHRha2Ugb3ZlciB0aGUgc2hpcCwgYW5kIHRoZSBzYWlsb3JzIHdlcmUgYXNraW5nIGZvciBtb25leQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBtaWdodCBidXkgc3VwcGxpZXMsIEkgY2FtZSB1cCB0byBoaW0gYWdhaW4sIGhhdmluZyB3aXRuZXNzZXMgd2l0aCBtZSwKICAgICAgICAgICAgICAgICAgICBhbmQgYXNrZWQgd2hldGhlciBoZSBoYWQgY29tZSBvdXQgd2l0aCBtb25leSB3aXRoIHRoZSBwdXJwb3NlIG9mIHRha2luZyBvdmVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXAgZnJvbSBtZSwgb3Igbm90LiBPbiBoaXMgcmVwbHlpbmcgdGhhdCBoZSBoYWQgYnJvdWdodCBtb25leSB3aXRoIGhpbSwgSQogICAgICAgICAgICAgICAgICAgIHVyZ2VkIGhpbSB0byBsZW5kIG1lIHNvbWUgb24gdGhlIHNlY3VyaXR5IG9mIHRoZSBzaGlwJ3MgZXF1aXBtZW50LCB0aGF0IEkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRlIGl0IGFtb25nIHRoZSBzYWlsb3JzIGFuZCBicmluZyB0aGUgc2hpcCBob21lLCBzZWVpbmcgdGhhdCBoZSByZWZ1c2VkCiAgICAgICAgICAgICAgICAgICAgdG8gdGFrZSBvdmVyIHRoZSBzaGlwLCBhbHRob3VnaCBoZSB3YXMgbXkgc3VjY2Vzc29yLiA8L3RyYW5zbGF0aW9uPg=="
translation['50.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGlzIHJlcXVlc3Qgb2YgbWluZSBoZSByZXBsaWVkIHRoYXQgaGUgd291bGQgbm90IGxlbmQgbWUgYQogICAgICAgICAgICAgICAgICAgIGZhcnRoaW5nLiBBY2NvcmRpbmdseSBJIGJvcnJvd2VkIGZyb20gQ2xlYW5heCBhbmQgRXBlcmF0dXMsIGZyaWVuZHMgb2YgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaW4gVGVuZWRvcywgYW5kIGdhdmUgdGhlIHNhaWxvcnMgdGhlaXIgcHJvdmlzaW9uLW1vbmV5OyBmb3Igb24gYWNjb3VudCBvZiBteQogICAgICAgICAgICAgICAgICAgIGJlaW5nIFBhc2lvbidzIHNvbiwgYW5kIHRoZSBmYWN0IHRoYXQgaGUgd2FzIGNvbm5lY3RlZCBieSB0aWVzIG9mIGhvc3BpdGFsaXR5CiAgICAgICAgICAgICAgICAgICAgd2l0aCBtYW55LCBhbmQgd2FzIHRydXN0ZWQgdGhyb3VnaG91dCB0aGUgR3JlZWsgd29ybGQsIEkgaGFkIG5vIGRpZmZpY3VsdHkgaW4KICAgICAgICAgICAgICAgICAgICBib3Jyb3dpbmcgbW9uZXkgd2hlcmV2ZXIgSSBuZWVkZWQgaXQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgc3RhdGVtZW50cyBJIGFtIG1ha2luZyB0byB5b3UgYXJlIHRydWUsIEkgc2hhbGwgcHJvZHVjZSBmb3IgeW91IHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zIGVzdGFibGlzaGluZyB0aGVzZSBmYWN0cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGNsZXJrIGhhcwogICAgICAgICAgICAgICAgICAgIHJlYWQgdGhlIGRlcG9zaXRpb25zIG9mIGFsbCB0aG9zZSB3aG9tIEkgd2FzIGFibGUgdG8gcHJvZHVjZSwgd2hvIHdlcmUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGluIHBlcnNvbiwgdG8gcHJvdmUgdGhhdCBJIGFnYWluIGFuZCBhZ2FpbiBvZmZlcmVkIHRvIGdpdmUgb3ZlciB0aGUgc2hpcCB0bwogICAgICAgICAgICAgICAgICAgIFBvbHljbGVzLCBhbmQgdGhhdCBoZSByZWZ1c2VkIHRvIHRha2UgaXQuIE1vcmUgdGhhbiB0aGF0LCBJIGhhdmUgc2hvd24gYnkKICAgICAgICAgICAgICAgICAgICBjb252aW5jaW5nIGNpcmN1bXN0YW50aWFsIGV2aWRlbmNlLCB3aHkgaXQgd2FzIHRoYXQgaGUgcmVmdXNlZCB0byB0YWtlIG92ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgc2hpcC4gSSBkZXNpcmUgbm93IHRvIGhhdmUgcmVhZCB0byB5b3UgdGhlIGxhdyBhbHNvIHJlZ2FyZGluZyB0aG9zZSBhcHBvaW50ZWQgdG8KICAgICAgICAgICAgICAgICAgICBzdWNjZWVkIG90aGVycyBpbiB0aGUgdHJpZXJhcmNoeSwgdGhhdCB5b3UgbWF5IGtub3cgaG93IHNldmVyZSB0aGUgcGVuYWx0aWVzIGFyZQogICAgICAgICAgICAgICAgICAgIHdoZW4gYSBtYW4gZmFpbHMgdG8gdGFrZSBvdmVyIGEgc2hpcCBmcm9tIGhpcyBwcmVkZWNlc3NvciB3aXRoaW4gdGhlIGFwcG9pbnRlZAogICAgICAgICAgICAgICAgICAgIHRpbWUsIGFuZCBob3cgUG9seWNsZXMgc2NvZmZlZCwgbm90IGF0IG1lIG9ubHksIGJ1dCBhdCB5b3UgYW5kIGF0IHRoZSBsYXdzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmYXIgYXMgaGUgaXMgY29uY2VybmVkLCBhbGwgbWVhc3VyZXMKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2VuIGJ5IHRoZSBzdGF0ZSBhbmQgaGVyIGFsbGllcyBoYXZlIGZhaWxlZDsgZm9yIGhlIG5laXRoZXIgam9pbmVkIGhpcwogICAgICAgICAgICAgICAgICAgIHNoaXAsIGFzIHRoZSBsYXcgY29tbWFuZHMsIG5vciwgd2hlbiBoZSBkaWQgY29tZSwgd2FzIGhlIHdpbGxpbmcgdG8gdGFrZSBvdmVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHNoaXAgZnJvbSBoaXMgcHJlZGVjZXNzb3I7IHdoZXJlYXMgSSBzZXJ2ZWQgZm9yIG15IG93biB0ZXJtIGFuZCB0aGF0IG9mIG15CiAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlIGluIHRoZSB0cmllcmFyY2h5LCBhbmQgd2hlbiBteSB0ZXJtIG9mIHNlcnZpY2UgaGFkIGV4cGlyZWQgYW5kIEkgd2FzCiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZCBieSB0aGUgZ2VuZXJhbCB0byBzYWlsIHRvIEhpZXJvbiwgSSBjb252b3llZCB0aGUgZ3JhaW4gZm9yIG91ciBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoZXkgbWlnaHQgYnV5IGluIGEgcGxlbnRpZnVsIG1hcmtldCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCwgc28gZmFyIGFzIGRlcGVuZGVkIG9uIG1lLCB0aGVyZSBzaG91bGQgYmUgbm8gbGFjazsgYW5kIEkgcGVyZm9ybWVkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBnZW5lcmFsIGV2ZXJ5IG90aGVyIHNlcnZpY2Ugd2hpY2ggaGUgZGVzaXJlZCBlaXRoZXIgb2YgbXlzZWxmIG9yIG9mIG15CiAgICAgICAgICAgICAgICAgICAgdHJpcmVtZSwgbm90IG9ubHkgc3BlbmRpbmcgbXkgcHJvcGVydHksIGJ1dCByaXNraW5nIG15IGxpZmUgYXMgd2VsbCB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzIG1ha2luZyB0aGUgdm95YWdlIGluIHBlcnNvbiwgYWx0aG91Z2ggbXkgZG9tZXN0aWMgYWZmYWlycyB3ZXJlIGluIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiBhdCB0aGF0IHRpbWUgdGhhdCB5b3Ugd291bGQgcGl0eSBtZSwgaWYgeW91IGhlYXJkIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['50.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5NeSBtb3RoZXIgbGF5IHNpY2ssPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgc3BlYWtlcidzIHByZXRlbmRlZCBjb25jZXJuIGZvciBoaXMgbW90aGVyIGFjY29yZHMgaWxsIHdpdGggdGhlIGF0dGl0dWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlIHNob3dzIHRvd2FyZCBoZXIgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NSIgdmFsaWQ9InllcyI+RGVtLiA0NTwvYmlibD4uPC9ub3RlPiBhbmQgd2FzIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHBvaW50IG9mIGRlYXRoIHdoaWxlIEkgd2FzIGFicm9hZCwgc28gdGhhdCBzaGUgd2FzIHVuYWJsZSBhbnkgbG9uZ2VyIHRvIGhlbHAKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZGVwbGV0aW9uIG9mIG15IHJlc291cmNlcyBzYXZlIHRvIGEgc2xpZ2h0IGV4dGVudC4gSSBoYWQgYmVlbiBidXQgc2l4CiAgICAgICAgICAgICAgICAgICAgZGF5cyBhdCBob21lLCB3aGVuLCBhZnRlciBzaGUgaGFkIHNlZW4gYW5kIGdyZWV0ZWQgbWUsIHNoZSBicmVhdGhlZCBoZXIgbGFzdCwKICAgICAgICAgICAgICAgICAgICBiZWluZyBubyBsb25nZXIgbWlzdHJlc3Mgb2YgaGVyIHByb3BlcnR5LCBzbyBhcyB0byBnaXZlIG1lIEkgYXMgbXVjaCBhcyBzaGUKICAgICAgICAgICAgICAgICAgICB3aXNoZWQuIFNoZSBoYWQgb2Z0ZW4gc2VudCBmb3IgbWUgYmVmb3JlIHRoaXMsIGJlZ2dpbmcgbWUgdG8gY29tZSB0byBoZXIgYnkKICAgICAgICAgICAgICAgICAgICBteXNlbGYgaWYgSSBjb3VsZCBub3QgY29tZSBpbiBteSBzaGlwLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1IiB2YWxpZD0ieWVzIj5EZW0uIDQ1PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['50.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5NeQogICAgICAgICAgICAgICAgICAgIHdpZmUsIHRvbywgdG8gd2hvbSBJIGFtIGRlZXBseSBhdHRhY2hlZCwgd2FzIGluIHBvb3IgaGVhbHRoIGZvciBhIGxvbmcgdGltZQogICAgICAgICAgICAgICAgICAgIGR1cmluZyBteSBhYnNlbmNlOyBteSBjaGlsZHJlbiB3ZXJlIHNtYWxsIGFuZCBteSBlc3RhdGUgd2FzIGluIGRlYnQ7IG15IGxhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSBwcm9kdWNlZCBubyBjcm9wcywgYnV0IHRoYXQgeWVhciwgYXMgeW91IGFsbCBrbm93LCB0aGUgd2F0ZXIgZXZlbiBkcmllZCB1cAogICAgICAgICAgICAgICAgICAgIGluIHRoZSB3ZWxscywgc28gdGhhdCBub3QgYSB2ZWdldGFibGUgZ3JldyBpbiB0aGUgZ2FyZGVuOyBhbmQgbXkgY3JlZGl0b3JzIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGV4cGlyYXRpb24gb2YgdGhlIHllYXIgY2FtZSB0byBjb2xsZWN0IHRoZWlyIGludGVyZXN0LCB1bmxlc3MgdGhlIHByaW5jaXBhbAogICAgICAgICAgICAgICAgICAgIHdhcyBwYWlkIHRvIHRoZW0gYWNjb3JkaW5nIHRvIHRoZSBjb250cmFjdC4gPC90cmFuc2xhdGlvbj4="
translation['50.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgaGVhcmQgdGhlc2UgZmFjdHMgZnJvbSB0aGUgbGlwcyBvZiB0aG9zZSB3aG8gY2FtZSBhbmQgYWxzbyB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgbGV0dGVycyBmcm9tIG15IHJlbGF0aXZlcywgaG93IGRvIHlvdSB0aGluayBJIG11c3QgaGF2ZSBmZWx0LCBhbmQgaG93IG1hbnkgdGVhcnMKICAgICAgICAgICAgICAgICAgICBtdXN0IEkgaGF2ZSBzaGVkLCB3aGlsZSBJIHJlY2tvbmVkIHVwIG15IHByZXNlbnQgdHJvdWJsZXMgYW5kIHdhcyBsb25naW5nIHRvIHNlZQogICAgICAgICAgICAgICAgICAgIG15IGNoaWxkcmVuIGFuZCBteSB3aWZlLCBhbmQgbXkgbW90aGVyIHdob20gSSBoYWQgbGl0dGxlIGhvcGUgb2YgZmluZGluZyBhbGl2ZT8KICAgICAgICAgICAgICAgICAgICBGb3Igd2hhdCBpcyBzd2VldGVyIHRvIGEgbWFuIHRoYW4gdGhlc2UsIG9yIHdoeSBzaG91bGQgb25lIHdpc2ggdG8gbGl2ZSwgaWYKICAgICAgICAgICAgICAgICAgICBkZXByaXZlZCBvZiB0aGVtPyA8L3RyYW5zbGF0aW9uPg=="
translation['50.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggdGhlIG1pc2ZvcnR1bmVzIHdoaWNoIGhhZCBiZWZhbGxlbiBtZSB3ZXJlIHRodXMKICAgICAgICAgICAgICAgICAgICBncmlldm91cywgSSBkaWQgbm90IGNvdW50IG15IHByaXZhdGUgaW50ZXJlc3RzIG9mIHNvIG11Y2ggaW1wb3J0YW5jZSBhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzLCBidXQgZmVsdCB0aGF0IEkgb3VnaHQgdG8gcmlzZSBhYm92ZSB0aGUgd2FzdGluZyBvZiBteSBmb3J0dW5lLCB0aGUKICAgICAgICAgICAgICAgICAgICBuZWdsZWN0IG9mIG15IGhvdXNlaG9sZCBhZmZhaXJzLCBhbmQgdGhlIHNpY2tuZXNzIG9mIG15IHdpZmUgYW5kIG15IG1vdGhlciwgc28KICAgICAgICAgICAgICAgICAgICB0aGF0IG5vIG9uZSBjb3VsZCBhY2N1c2UgbWUgb2YgZGVzZXJ0aW5nIG15IHBvc3Qgb3IgbGV0dGluZyBteSBzaGlwIGJlIHVzZWxlc3MKICAgICAgICAgICAgICAgICAgICB0byB0aGUgc3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['50.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5JbiByZXR1cm4gZm9yIGFsbCB0aGlzIEkgbm93CiAgICAgICAgICAgICAgICAgICAgaW1wbG9yZSB5b3UsIHRoYXQsIGFzIEkgc2hvd2VkIG15c2VsZiBvYmVkaWVudCBhbmQgdXNlZnVsIGluIHlvdXIgc2VydmljZSwgc28KICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBub3cgdGFrZSB0aG91Z2h0IG9mIG1lLCBhbmQsIHJlbWVtYmVyaW5nIGFsbCB0aGF0IEkgaGF2ZSB0b2xkIHlvdSwgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbnMgd2hpY2ggSSBoYXZlIHByb2R1Y2VkIGFuZCB0aGUgZGVjcmVlcywgeW91IHdpbGwgc3VjY29yIG1lIHdoZW4gSSBhbQogICAgICAgICAgICAgICAgICAgIGJlaW5nIHdyb25nZWQsIHdpbGwgbWV0ZSBvdXQgcHVuaXNobWVudCBpbiB5b3VyIG93biBpbnRlcmVzdCwgYW5kIHdpbGwgZXhhY3QKICAgICAgICAgICAgICAgICAgICByZXBheW1lbnQgb2YgdGhlIGZ1bmRzIGV4cGVuZGVkIGluIHRoZSBkZWZlbmRhbnQncyBiZWhhbGYuIE9yIHdobyB3aWxsIHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBiZSB6ZWFsb3VzIG9uIHlvdXIgc2VydmljZSwgd2hlbiBtZW4gc2VlIHRoYXQgeW91IG5laXRoZXIgcmV3YXJkIHRob3NlIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICBob25lc3QgYW5kIG9iZWRpZW50LCBub3IgcHVuaXNoIHRob3NlIHdobyBhcmUgZGlzaG9uZXN0IGFuZCBkaXNvYmVkaWVudD8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2xlcmsgc2hhbGwgcmVhZCB5b3UgdGhlIGxhdyBhbmQgYW4KICAgICAgICAgICAgICAgICAgICBhY2NvdW50IG9mIG15IGV4cGVuc2VzIGluIGRldGFpbCBmb3IgdGhlIHBlcmlvZCBkdXJpbmcgd2hpY2ggSSBzZXJ2ZWQgYXMKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2ggYmV5b25kIG15IHRlcm0gb24gdGhlIGRlZmVuZGFudCdzIGJlaGFsZiwgYW5kIHRoZSBzdW1zIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHNldmVyYWwgZGVzZXJ0ZXJzIHRvb2sgd2l0aCB0aGVtIHdoZW4gdGhleSByYW4gYXdheSBmcm9tIHRoZSBzaGlwLCBhbmQgd2hlcmUKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlbnQsIGluIG9yZGVyIHRoYXQgeW91IG1heSBiZSBhc3N1cmVkIHRoYXQgbmVpdGhlciBub3cgbm9yIGF0IGFueSB0aW1lCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGhhdmUgSSBtYWRlIGZhbHNlIHN0YXRlbWVudHMgdG8geW91LiBJIGNvdW50IGl0IG15IGR1dHkgdG8gc2VydmUgeW91IGluIGEKICAgICAgICAgICAgICAgICAgICBtYW5uZXIgYWJvdmUgcmVwcm9hY2ggZm9yIHRoZSBwZXJpb2QgcHJlc2NyaWJlZCBieSBsYXcsIGFuZCBhcyByZWdhcmRzIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHNjb3JuIHlvdSBhbmQgdGhlIGxhd3MsIGFuZCB3aWxsIG5vdCBvYmV5IHRoZSBsYXdzLCB0byBjb252aWN0IHRoZW0gYW5kIGdldCB0aGVtCiAgICAgICAgICAgICAgICAgICAgcHVuaXNoZWQgaW4geW91ciBjb3VydHMuIDwvdHJhbnNsYXRpb24+"
translation['50.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5CZSBhc3N1cmVkIHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIG5vIG1vcmUgaW4gbXkgaW50ZXJlc3QgdGhhbiBpbiB5b3VyIG93biB0aGF0IHlvdSB3aWxsIHB1bmlzaCBQb2x5Y2xlcywKICAgICAgICAgICAgICAgICAgICBub3Igd2lsbCB5b3UgYmUgc2hvd2luZyBjb25jZXJuIG1lcmVseSBmb3IgdGhvc2Ugd2hvIGhhdmUgc2VydmVkIGFzIHRyaWVyYXJjaHMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcGFzdDsgbm8sIHlvdSB3aWxsIGJlIHRha2luZyB0aG91Z2h0IGFsc28gZm9yIHRob3NlIHdobyBhcmUgdG8gc2VydmUgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZnV0dXJlLCBzbyB0aGF0IHRob3NlIHdobyBwZXJmb3JtIHB1YmxpYyBzZXJ2aWNlcyBtYXkgbm90IGJlIGRpc2NvdXJhZ2VkLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aG9zZSB3aG8gYXJlIGRlc2lnbmF0ZWQgYXMgdGhlaXIgc3VjY2Vzc29ycyBtYXkgbm90IHNob3cgY29udGVtcHQgdG93YXJkCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MsIGJ1dCBtYXkgZ28gdG8gdGhlaXIgc2hpcHMgd2hlbiB0aGV5IGFyZSBhcHBvaW50ZWQuIFRoZXNlIG1hdHRlcnMgeW91CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlYXIgaW4gbWluZCwgYW5kIHJlYWNoIGEgZmFpciBhbmQganVzdCBkZWNpc2lvbiByZWdhcmRpbmcgYWxsIHRoZSBwb2ludHMKICAgICAgICAgICAgICAgICAgICBhdCBpc3N1ZS4gPC90cmFuc2xhdGlvbj4="
translation['50.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBnbGFkbHkgYXNrIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB3aGF0IG9waW5pb24geW91IHdvdWxkIGhhdmUgaGFkIG9mIG1lLAogICAgICAgICAgICAgICAgICAgIGlmLCB3aGVuIG15IHRlcm0gb2Ygc2VydmljZSBoYWQgZXhwaXJlZCBhbmQgdGhlIGRlZmVuZGFudCBoYWQgbm90IGNvbWUgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlIHNoaXAsIEkgaGFkIHJlZnVzZWQgdG8gc2VydmUgbG9uZ2VyIHdoZW4gdGhlIGdlbmVyYWwgc28gb3JkZXJlZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgaGFkIHNhaWxlZCBhd2F5LiBXb3VsZCB5b3Ugbm90IGhhdmUgYmVlbiBpbmRpZ25hbnQgYW5kIGhhdmUgdGhvdWdodCB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgd3JvbmdpbmcgeW91PyBJZiwgdGhlbiwgeW91IHdvdWxkIGhhdmUgYmVlbiBpbmRpZ25hbnQgaW4gdGhhdCBjYXNlLCBiZWNhdXNlIEkKICAgICAgICAgICAgICAgICAgICByZWZ1c2VkIHRvIHNlcnZlIGJleW9uZCBteSB0ZXJtLCBzaG91bGQgeW91IG5vdCBub3cgZXhhY3QgZnJvbSB0aGUgZGVmZW5kYW50IHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IGV4cGVuZGVkIGJ5IG1lIG9uIGhpcyBiZWhhbGYsIHNlZWluZyB0aGF0IGhlIGRpZCBub3QgdGFrZSBvdmVyIHRoZSBzaGlwPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
