var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBDaW1vbiBhbHNvIGRpZWQgYmVmb3JlIEdyZWVjZSB3YXMgY29uZm91bmRlZCwgYW5kIHdoaWxlIHNoZSB3YXMgYXQgdGhlIGFjbWUgb2YgaGVyIHBvd2VyLiBIZSBkaWVkLCBob3dldmVyLCBpbiB0aGUgZmllbGQsIGFuZCBhdCB0aGUgaGVhZCBvZiBhbiBhcm15LCBub3QgZXhoYXVzdGVkIG9yIG9mIGEgd2FuZGVyaW5nIG1pbmQsIG5vciB5ZXQgbWFraW5nIGZlYXN0aW5ncyBhbmQgcmV2ZWxsaW5ncyB0aGUgY3Jvd25pbmcgcHJpemUgZm9yIGFybXMgYW5kIGNhbXBhaWducyBhbmQgdHJvcGhpZXMuIFBsYXRvPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiAzNjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCBpaS4gcC4gMzYzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBiYW50ZXJzIHRoZSBmb2xsb3dlcnMgb2YgT3JwaGV1cyBmb3IgZGVjbGFyaW5nIHRoYXQgZm9yIHRob3NlIHdobyBoYXZlIGxpdmVkIHJpZ2h0bHksIHRoZXJlIGlzIGxhaWQgdXAgaW4gSGFkZXMgYSB0cmVhc3VyZSBvZiBldmVybGFzdGluZyBpbnRveGljYXRpb24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiAzNjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCBpaS4gcC4gMzYzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgaWkuIHAuIDM2My48L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkxlaXN1cmUsIG5vIGRvdWJ0LCBhbmQgcXVpZXQsIGFuZCB0aGUgcHVyc3VpdCBvZiBwbGVhc2FudGx5IHNwZWN1bGF0aXZlIGxlYXJuaW5nLCBmdXJuaXNoIGEgbW9zdCBmaXR0aW5nIHNvbGFjZSBmb3IgYSBtYW4gb2YgeWVhcnMgd2hvIGhhcyByZXRpcmVkIGZyb20gd2FycyBhbmQgcG9saXRpY3MuIEJ1dCB0byBkaXZlcnQgZmFpciBhY2hpZXZlbWVudHMgdG8gcGxlYXN1cmUgYXMgdGhlaXIgZmluYWwgZW5kLCBhbmQgdGhlbiB0byBzcG9ydCBhbmQgd2FudG9uIGF0IHRoZSBoZWFkIG9mIEFwaHJvZGl0ZSdzIHRyYWluLCBhcyBhIHNlcXVlbCB0byB3YXJzIGFuZCBmaWdodGluZ3MsIHdhcyBub3Qgd29ydGh5IG9mIHRoZSBub2JsZSBBY2FkZW15LCBub3IgeWV0IG9mIG9uZSB3aG8gd291bGQgZm9sbG93IFhlbm9jcmF0ZXMsIGJ1dCByYXRoZXIgb2Ygb25lIHdobyBsZWFuZWQgdG93YXJkcyBFcGljdXJ1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGlzIHRoZSBtb3JlIGFzdG9uaXNoaW5nLCBiZWNhdXNlLCBjb250cmFyaXdpc2UsIENpbW9uIHNlZW1zIHRvIGhhdmUgYmVlbiBvZiBpbGwgcmVwdXRlIGFuZCB1bnJlc3RyYWluZWQgaW4gaGlzIHlvdXRoLCB3aGlsZSBMdWN1bGx1cyB3YXMgZGlzY2lwbGluZWQgYW5kIHNvYmVyLiBCZXR0ZXIsIHN1cmVseSwgaXMgdGhlIG1hbiBpbiB3aG9tIHRoZSBjaGFuZ2UgaXMgZm9yIHRoZSBiZXR0ZXI7IGZvciBpdCBhcmd1ZXMgYSBtb3JlIHdob2xlc29tZSBuYXR1cmUgd2hlbiBpdHMgZXZpbCB3aXRoZXJzIGFuZCBpdHMgZ29vZCByaXBlbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGZ1cnRoZXIsIHRob3VnaCBib3RoIGFsaWtlIHdlcmUgd2VhbHRoeSwgdGhleSBkaWQgbm90IG1ha2UgYSBsaWtlIHVzZSBvZiB0aGVpciB3ZWFsdGguIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaXMgbm8gY29tcGFyaW5nIHRoZSBzb3V0aCB3YWxsIG9mIHRoZSBBY3JvcG9saXMsIHdoaWNoIHdhcyBjb21wbGV0ZWQgd2l0aCB0aGUgbW9uZXlzIGJyb3VnaHQgaG9tZSBieSBDaW1vbiwgd2l0aCB0aGUgcGFsYWNlcyBhbmQgc2VhLXdhc2hlZCBCZWx2aWRlcmVzIGF0IE5lYXBvbGlzLCB3aGljaCBMdWN1bGx1cyBidWlsdCBvdXQgb2YgdGhlIHNwb2lscyBvZiB0aGUgQmFyYmFyaWFucy4gTm9yIGNhbiB0aGUgdGFibGUgb2YgQ2ltb24gYmUgbGlrZW5lZCB0byB0aGF0IG9mIEx1Y3VsbHVzOyB0aGUgb25lIHdhcyBkZW1vY3JhdGljIGFuZCBjaGFyaXRhYmxlLCB0aGUgb3RoZXIgc3VtcHR1b3VzIGFuZCBvcmllbnRhbC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9uZSwgYXQgc2xpZ2h0IG91dGxheSwgZ2F2ZSBkYWlseSBzdXN0ZW5hbmNlIHRvIG1hbnk7IHRoZSBvdGhlciwgYXQgbGFyZ2UgY29zdCwgd2FzIHByZXBhcmVkIGZvciBhIGZldyBsdXh1cmlvdXMgbGl2ZXJzLiBJdCBtYXkgYmUgc2FpZCwgaW5kZWVkLCB0aGF0IHRoZSBkaWZmZXJlbmNlIGluIHN0YXRlIHdhcyBkdWUgdG8gdGhlIGRpZmZlcmVuY2UgaW4gdGltZS4gRm9yIGl0IGlzIGF0IGxlYXN0IHBvc3NpYmxlIHRoYXQgQ2ltb24gYWxzbywgaWYgaGUgaGFkIHJldGlyZWQgYWZ0ZXIgaGlzIGFjdGl2ZSBjYW1wYWlnbnMgdG8gYW4gb2xkIGFnZSB3aGljaCBrbmV3IG5laXRoZXIgd2FyIG5vciBwb2xpdGljcywgbWlnaHQgaGF2ZSBsZWQgYW4gZXZlbiBtb3JlIG9zdGVudGF0aW91cyBhbmQgcGxlYXN1cmUtbG92aW5nIGxpZmUuIEhlIHdhcyBmb25kIG9mIHdpbmUgYW5kIGdpdmVuIHRvIGRpc3BsYXksIGFuZCBoaXMgcmVsYXRpb25zIHdpdGggd29tZW4sIGFzIEkgaGF2ZSBzYWlkIGJlZm9yZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpbS4gNC44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpbW9uPC90aXRsZT4sIGl2LiA4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3ZXJlIHNjYW5kYWxvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdWNjZXNzIGluIHN0cmVudW91cyBhY2hpZXZlbWVudCwgYWZmb3JkaW5nIGFzIGl0IGRvZXMgYSBoaWdoZXIgcGxlYXN1cmUsIGdpdmVzIHB1YmxpYy1zcGlyaXRlZCBhbmQgYW1iaXRpb3VzIG5hdHVyZXMgbm8gdGltZSB0byBpbmR1bGdlIHRoZSBiYXNlciBhcHBldGl0ZXMsIHdoaWNoIGFyZSBmb3Jnb3R0ZW4uIEF0IGFueSByYXRlLCBpZiBMdWN1bGx1cyBhbHNvIGhhZCBlbmRlZCBoaXMgZGF5cyBpbiBhY3RpdmUgbWlsaXRhcnkgY29tbWFuZCwgbm90IGV2ZW4gdGhlIG1vc3QgY2FycGluZyBhbmQgY2Vuc29yaW91cyBzcGlyaXQsIEkgdGhpbmssIGNvdWxkIGhhdmUgYnJvdWdodCBhY2N1c2F0aW9uIGFnYWluc3QgaGltLiBUaHVzIG11Y2ggY29uY2VybmluZyB0aGVpciBtYW5uZXIgb2YgbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIG5vIGNvbXBhcmluZyB0aGUgc291dGggd2FsbCBvZiB0aGUgQWNyb3BvbGlzLCB3aGljaCB3YXMgY29tcGxldGVkIHdpdGggdGhlIG1vbmV5cyBicm91Z2h0IGhvbWUgYnkgQ2ltb24sIHdpdGggdGhlIHBhbGFjZXMgYW5kIHNlYS13YXNoZWQgQmVsdmlkZXJlcyBhdCBOZWFwb2xpcywgd2hpY2ggTHVjdWxsdXMgYnVpbHQgb3V0IG9mIHRoZSBzcG9pbHMgb2YgdGhlIEJhcmJhcmlhbnMuIE5vciBjYW4gdGhlIHRhYmxlIG9mIENpbW9uIGJlIGxpa2VuZWQgdG8gdGhhdCBvZiBMdWN1bGx1czsgdGhlIG9uZSB3YXMgZGVtb2NyYXRpYyBhbmQgY2hhcml0YWJsZSwgdGhlIG90aGVyIHN1bXB0dW91cyBhbmQgb3JpZW50YWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvbmUsIGF0IHNsaWdodCBvdXRsYXksIGdhdmUgZGFpbHkgc3VzdGVuYW5jZSB0byBtYW55OyB0aGUgb3RoZXIsIGF0IGxhcmdlIGNvc3QsIHdhcyBwcmVwYXJlZCBmb3IgYSBmZXcgbHV4dXJpb3VzIGxpdmVycy4gSXQgbWF5IGJlIHNhaWQsIGluZGVlZCwgdGhhdCB0aGUgZGlmZmVyZW5jZSBpbiBzdGF0ZSB3YXMgZHVlIHRvIHRoZSBkaWZmZXJlbmNlIGluIHRpbWUuIEZvciBpdCBpcyBhdCBsZWFzdCBwb3NzaWJsZSB0aGF0IENpbW9uIGFsc28sIGlmIGhlIGhhZCByZXRpcmVkIGFmdGVyIGhpcyBhY3RpdmUgY2FtcGFpZ25zIHRvIGFuIG9sZCBhZ2Ugd2hpY2gga25ldyBuZWl0aGVyIHdhciBub3IgcG9saXRpY3MsIG1pZ2h0IGhhdmUgbGVkIGFuIGV2ZW4gbW9yZSBvc3RlbnRhdGlvdXMgYW5kIHBsZWFzdXJlLWxvdmluZyBsaWZlLiBIZSB3YXMgZm9uZCBvZiB3aW5lIGFuZCBnaXZlbiB0byBkaXNwbGF5LCBhbmQgaGlzIHJlbGF0aW9ucyB3aXRoIHdvbWVuLCBhcyBJIGhhdmUgc2FpZCBiZWZvcmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ltLiA0LjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaW1vbjwvdGl0bGU+LCBpdi4gOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2VyZSBzY2FuZGFsb3VzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpbS4gNC44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ltb248L3RpdGxlPiwgaXYuIDguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaW1vbjwvdGl0bGU+LCBpdi4gOC48L3RyYW5zbGF0aW9uPg=="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdWNjZXNzIGluIHN0cmVudW91cyBhY2hpZXZlbWVudCwgYWZmb3JkaW5nIGFzIGl0IGRvZXMgYSBoaWdoZXIgcGxlYXN1cmUsIGdpdmVzIHB1YmxpYy1zcGlyaXRlZCBhbmQgYW1iaXRpb3VzIG5hdHVyZXMgbm8gdGltZSB0byBpbmR1bGdlIHRoZSBiYXNlciBhcHBldGl0ZXMsIHdoaWNoIGFyZSBmb3Jnb3R0ZW4uIEF0IGFueSByYXRlLCBpZiBMdWN1bGx1cyBhbHNvIGhhZCBlbmRlZCBoaXMgZGF5cyBpbiBhY3RpdmUgbWlsaXRhcnkgY29tbWFuZCwgbm90IGV2ZW4gdGhlIG1vc3QgY2FycGluZyBhbmQgY2Vuc29yaW91cyBzcGlyaXQsIEkgdGhpbmssIGNvdWxkIGhhdmUgYnJvdWdodCBhY2N1c2F0aW9uIGFnYWluc3QgaGltLiBUaHVzIG11Y2ggY29uY2VybmluZyB0aGVpciBtYW5uZXIgb2YgbGlmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3YXIsIGl0IGlzIHBsYWluIHRoYXQgYm90aCB3ZXJlIGdvb2QgZmlnaHRlcnMsIGJvdGggb24gbGFuZCBhbmQgc2VhLiBCdXQganVzdCBhcyB0aG9zZSBhdGhsZXRlcyB3aG8gd2luIGNyb3ducyBpbiB3cmVzdGxpbmcgYW5kIHRoZSBwYW5jcmF0aXVtIG9uIGEgc2luZ2xlIGRheSBhcmUgY2FsbGVkLCBieSBjdXN0b20sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VmljdG9ycy1leHRyYW9yZGluYXJ5LDwvcT4gc28gQ2ltb24sIHdobyBpbiBhIHNpbmdsZSBkYXkgY3Jvd25lZCBHcmVlY2Ugd2l0aCB0aGUgdHJvcGhpZXMgb2YgYSBsYW5kIGFuZCBzZWEgdmljdG9yeSwgbWF5IGp1c3RseSBoYXZlIGEgY2VydGFpbiBwcmUtZW1pbmVuY2UgYW1vbmcgZ2VuZXJhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCBpdCB3YXMgaGlzIGNvdW50cnkgd2hpY2ggY29uZmVycmVkIGltcGVyaWFsIHBvd2VyIHVwb24gTHVjdWxsdXMsIHdoZXJlYXMgQ2ltb24gY29uZmVycmVkIGl0IHVwb24gaGlzLiBUaGUgb25lIGFkZGVkIGhpcyBmb3JlaWduIGNvbnF1ZXN0cyB0byBhIGNvdW50cnkgd2hpY2ggYWxyZWFkeSBydWxlZCBoZXIgYWxsaWVzOyB0aGUgb3RoZXIgZm91bmQgaGlzIGNvdW50cnkgb2JleWluZyBvdGhlcnMsIGFuZCBnYXZlIGhlciBjb21tYW5kIG92ZXIgaGVyIGFsbGllcyBhbmQgdmljdG9yeSBvdmVyIGhlciBmb3JlaWduIGZvZXMsIGJ5IGRlZmVhdGluZyB0aGUgUGVyc2lhbnMgYW5kIGRyaXZpbmcgdGhlbSBmcm9tIHRoZSBzZWEsIGFuZCBieSBwZXJzdWFkaW5nIHRoZSBMYWNlZGFlbW9uaWFucyB2b2x1bnRhcmlseSByZWxpbnF1aXNoIHRoZSBjb21tYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5HcmFudGVkIHRoYXQgaXQgaXMgdGhlIG1vc3QgaW1wb3J0YW50IHRhc2sgb2YgYSBsZWFkZXIgdG8gc2VjdXJlIHByb21wdCBvYmVkaWVuY2UgdGhyb3VnaCBnb29kIHdpbGwsIEx1Y3VsbHVzIHdhcyBkZXNwaXNlZCBieSBoaXMgb3duIHNvbGRpZXJzLCB3aGlsZSBDaW1vbiB3YXMgYWRtaXJlZCBieSB0aGUgYWxsaWVzLiBIaXMgc29sZGllcnMgZGVzZXJ0ZWQgdGhlIG9uZTsgdGhlIGFsbGllcyBjYW1lIG92ZXIgdG8gdGhlIG90aGVyLiBUaGUgb25lIGNhbWUgYmFjayBob21lIGFiYW5kb25lZCBieSB0aG9zZSB3aG9tIGhlIGNvbW1hbmRlZCB3aGVuIGhlIHNldCBvdXQ7IHRoZSBvdGhlciB3YXMgc2VudCBvdXQgd2l0aCBhbGxpZXMgdG8gZG8gdGhlIGNvbW1hbmRzIG9mIG90aGVycywgYnV0IGJlZm9yZSBoZSBzYWlsZWQgaG9tZSBoZSBoaW1zZWxmIGdhdmUgY29tbWFuZHMgdG8gdGhvc2UgYWxsaWVzLCBoYXZpbmcgc3VjY2Vzc2Z1bGx5IHNlY3VyZWQgZm9yIGhpcyBjaXR5IHRocmVlIG9mIHRoZSBtb3N0IGRpZmZpY3VsdCBvYmplY3RzIGF0IG9uY2UsIG5hbWVseSwgcGVhY2Ugd2l0aCB0aGUgZW5lbXksIGxlYWRlcnNoaXAgb2YgdGhlIGFsbGllcywgYW5kIGNvbmNvcmQgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3YXIsIGl0IGlzIHBsYWluIHRoYXQgYm90aCB3ZXJlIGdvb2QgZmlnaHRlcnMsIGJvdGggb24gbGFuZCBhbmQgc2VhLiBCdXQganVzdCBhcyB0aG9zZSBhdGhsZXRlcyB3aG8gd2luIGNyb3ducyBpbiB3cmVzdGxpbmcgYW5kIHRoZSBwYW5jcmF0aXVtIG9uIGEgc2luZ2xlIGRheSBhcmUgY2FsbGVkLCBieSBjdXN0b20sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WaWN0b3JzLWV4dHJhb3JkaW5hcnksPC9xPiBzbyBDaW1vbiwgd2hvIGluIGEgc2luZ2xlIGRheSBjcm93bmVkIEdyZWVjZSB3aXRoIHRoZSB0cm9waGllcyBvZiBhIGxhbmQgYW5kIHNlYSB2aWN0b3J5LCBtYXkganVzdGx5IGhhdmUgYSBjZXJ0YWluIHByZS1lbWluZW5jZSBhbW9uZyBnZW5lcmFscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCBpdCB3YXMgaGlzIGNvdW50cnkgd2hpY2ggY29uZmVycmVkIGltcGVyaWFsIHBvd2VyIHVwb24gTHVjdWxsdXMsIHdoZXJlYXMgQ2ltb24gY29uZmVycmVkIGl0IHVwb24gaGlzLiBUaGUgb25lIGFkZGVkIGhpcyBmb3JlaWduIGNvbnF1ZXN0cyB0byBhIGNvdW50cnkgd2hpY2ggYWxyZWFkeSBydWxlZCBoZXIgYWxsaWVzOyB0aGUgb3RoZXIgZm91bmQgaGlzIGNvdW50cnkgb2JleWluZyBvdGhlcnMsIGFuZCBnYXZlIGhlciBjb21tYW5kIG92ZXIgaGVyIGFsbGllcyBhbmQgdmljdG9yeSBvdmVyIGhlciBmb3JlaWduIGZvZXMsIGJ5IGRlZmVhdGluZyB0aGUgUGVyc2lhbnMgYW5kIGRyaXZpbmcgdGhlbSBmcm9tIHRoZSBzZWEsIGFuZCBieSBwZXJzdWFkaW5nIHRoZSBMYWNlZGFlbW9uaWFucyB2b2x1bnRhcmlseSByZWxpbnF1aXNoIHRoZSBjb21tYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkdyYW50ZWQgdGhhdCBpdCBpcyB0aGUgbW9zdCBpbXBvcnRhbnQgdGFzayBvZiBhIGxlYWRlciB0byBzZWN1cmUgcHJvbXB0IG9iZWRpZW5jZSB0aHJvdWdoIGdvb2Qgd2lsbCwgTHVjdWxsdXMgd2FzIGRlc3Bpc2VkIGJ5IGhpcyBvd24gc29sZGllcnMsIHdoaWxlIENpbW9uIHdhcyBhZG1pcmVkIGJ5IHRoZSBhbGxpZXMuIEhpcyBzb2xkaWVycyBkZXNlcnRlZCB0aGUgb25lOyB0aGUgYWxsaWVzIGNhbWUgb3ZlciB0byB0aGUgb3RoZXIuIFRoZSBvbmUgY2FtZSBiYWNrIGhvbWUgYWJhbmRvbmVkIGJ5IHRob3NlIHdob20gaGUgY29tbWFuZGVkIHdoZW4gaGUgc2V0IG91dDsgdGhlIG90aGVyIHdhcyBzZW50IG91dCB3aXRoIGFsbGllcyB0byBkbyB0aGUgY29tbWFuZHMgb2Ygb3RoZXJzLCBidXQgYmVmb3JlIGhlIHNhaWxlZCBob21lIGhlIGhpbXNlbGYgZ2F2ZSBjb21tYW5kcyB0byB0aG9zZSBhbGxpZXMsIGhhdmluZyBzdWNjZXNzZnVsbHkgc2VjdXJlZCBmb3IgaGlzIGNpdHkgdGhyZWUgb2YgdGhlIG1vc3QgZGlmZmljdWx0IG9iamVjdHMgYXQgb25jZSwgbmFtZWx5LCBwZWFjZSB3aXRoIHRoZSBlbmVteSwgbGVhZGVyc2hpcCBvZiB0aGUgYWxsaWVzLCBhbmQgY29uY29yZCB3aXRoIHRoZSBMYWNlZGFlbW9uaWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIGJvdGggYXR0ZW1wdGVkIHRvIHN1YnZlcnQgZ3JlYXQgZW1waXJlcyBhbmQgdG8gc3ViZHVlIGFsbCBBc2lhLCBhbmQgYm90aCBsZWZ0IHRoZWlyIHdvcmsgdW5maW5pc2hlZDogQ2ltb24gdGhyb3VnaCBpbGwgZm9ydHVuZSBwdXJlIGFuZCBzaW1wbGUsIGZvciBoZSBkaWVkIGF0IHRoZSBoZWFkIG9mIGhpcyBhcm15IGFuZCBhdCB0aGUgaGVpZ2h0IG9mIGhpcyBzdWNjZXNzOyBidXQgTHVjdWxsdXMgb25lIGNhbm5vdCBhbHRvZ2V0aGVyIGFjcXVpdCBvZiBibGFtZSwgd2hldGhlciBoZSB3YXMgaWdub3JhbnQgb2YsIG9yIHdvdWxkIG5vdCBhdHRlbmQgdG8gdGhlIGdyaWV2YW5jZXMgYW5kIGNvbXBsYWludHMgYW1vbmcgaGlzIHNvbGRpZXJ5LCBpbiBjb25zZXF1ZW5jZSBvZiB3aGljaCBoZSBiZWNhbWUgc28gYml0dGVybHkgaGF0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9yIHBlcmhhcHMgdGhpcyBoYXMgaXRzIGNvdW50ZXJwYXJ0IGluIHRoZSBsaWZlIG9mIENpbW9uLCBmb3IgaGUgd2FzIGJyb3VnaHQgdG8gdHJpYWwgYnkgaGlzIGZlbGxvdyBjaXRpemVucyBhbmQgZmluYWxseSBvc3RyYWNpc2VkLCBpbiBvcmRlciB0aGF0IGZvciB0ZW4geWVhcnMsIGFzIFBsYXRvIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBHb3JnLiA1MTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+R29yZ2lhczwvdGl0bGU+LCBwLiA1MTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZXkgbWlnaHQgbm90IGhlYXIgaGlzIHZvaWNlLiBGb3IgYXJpc3RvY3JhdGljIG5hdHVyZXMgYXJlIGxpdHRsZSBpbiBhY2NvcmQgd2l0aCB0aGUgbXVsdGl0dWRlLCBhbmQgc2VsZG9tIHBsZWFzZSBpdCwgYnV0IGJ5IHNvIG9mdGVuIHVzaW5nIGZvcmNlIHRvIHJlY3RpZnkgaXRzIGFiZXJyYXRpb25zLCB0aGV5IHZleCBhbmQgYW5ub3kgaXQsIGp1c3QgYXMgcGh5c2ljaWFucycgYmFuZGFnZXMgdmV4IGFuZCBhbm5veSwgYWx0aG91Z2ggdGhleSBicmluZyB0aGUgZGlzbG9jYXRlZCBtZW1iZXJzIGludG8gdGhlaXIgbmF0dXJhbCBwb3NpdGlvbi4gUGVyaGFwcywgdGhlbiwgYm90aCBjb21lIG9mZiBhYm91dCBhbGlrZSBvbiB0aGlzIGNvdW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBib3RoIGF0dGVtcHRlZCB0byBzdWJ2ZXJ0IGdyZWF0IGVtcGlyZXMgYW5kIHRvIHN1YmR1ZSBhbGwgQXNpYSwgYW5kIGJvdGggbGVmdCB0aGVpciB3b3JrIHVuZmluaXNoZWQ6IENpbW9uIHRocm91Z2ggaWxsIGZvcnR1bmUgcHVyZSBhbmQgc2ltcGxlLCBmb3IgaGUgZGllZCBhdCB0aGUgaGVhZCBvZiBoaXMgYXJteSBhbmQgYXQgdGhlIGhlaWdodCBvZiBoaXMgc3VjY2VzczsgYnV0IEx1Y3VsbHVzIG9uZSBjYW5ub3QgYWx0b2dldGhlciBhY3F1aXQgb2YgYmxhbWUsIHdoZXRoZXIgaGUgd2FzIGlnbm9yYW50IG9mLCBvciB3b3VsZCBub3QgYXR0ZW5kIHRvIHRoZSBncmlldmFuY2VzIGFuZCBjb21wbGFpbnRzIGFtb25nIGhpcyBzb2xkaWVyeSwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggaGUgYmVjYW1lIHNvIGJpdHRlcmx5IGhhdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9yIHBlcmhhcHMgdGhpcyBoYXMgaXRzIGNvdW50ZXJwYXJ0IGluIHRoZSBsaWZlIG9mIENpbW9uLCBmb3IgaGUgd2FzIGJyb3VnaHQgdG8gdHJpYWwgYnkgaGlzIGZlbGxvdyBjaXRpemVucyBhbmQgZmluYWxseSBvc3RyYWNpc2VkLCBpbiBvcmRlciB0aGF0IGZvciB0ZW4geWVhcnMsIGFzIFBsYXRvIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gR29yZy4gNTE2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R29yZ2lhczwvdGl0bGU+LCBwLiA1MTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoZXkgbWlnaHQgbm90IGhlYXIgaGlzIHZvaWNlLiBGb3IgYXJpc3RvY3JhdGljIG5hdHVyZXMgYXJlIGxpdHRsZSBpbiBhY2NvcmQgd2l0aCB0aGUgbXVsdGl0dWRlLCBhbmQgc2VsZG9tIHBsZWFzZSBpdCwgYnV0IGJ5IHNvIG9mdGVuIHVzaW5nIGZvcmNlIHRvIHJlY3RpZnkgaXRzIGFiZXJyYXRpb25zLCB0aGV5IHZleCBhbmQgYW5ub3kgaXQsIGp1c3QgYXMgcGh5c2ljaWFucycgYmFuZGFnZXMgdmV4IGFuZCBhbm5veSwgYWx0aG91Z2ggdGhleSBicmluZyB0aGUgZGlzbG9jYXRlZCBtZW1iZXJzIGludG8gdGhlaXIgbmF0dXJhbCBwb3NpdGlvbi4gUGVyaGFwcywgdGhlbiwgYm90aCBjb21lIG9mZiBhYm91dCBhbGlrZSBvbiB0aGlzIGNvdW50LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBHb3JnLiA1MTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Hb3JnaWFzPC90aXRsZT4sIHAuIDUxNi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkdvcmdpYXM8L3RpdGxlPiwgcC4gNTE2LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEx1Y3VsbHVzIHdhcyBtdWNoIHRoZSBncmVhdGVyIGluIHdhci4gSGUgd2FzIHRoZSBmaXJzdCBSb21hbiB0byBjcm9zcyB0aGUgVGF1cnVzIHdpdGggYW4gYXJteTsgaGUgcGFzc2VkIHRoZSBUaWdyaXMgYW5kIGNhcHR1cmVkIGFuZCBidXJuZWQgdGhlIHJveWFsIGNpdGllcyBvZiBBc2lhLOKAlFRpZ3Jhbm9jZXJ0YSBDYWJpcmEsIFNpbm9w4oCULCBhbmQgTmlzaWJpcywgYmVmb3JlIHRoZSBleWVzIG9mIHRoZWlyIGtpbmdzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSBtYWRlIGhpcyBvd24gdGhlIHJlZ2lvbnMgdG8gdGhlIG5vcnRoIGFzIGZhciBhcyB0aGUgUGhhc2lzLCB0byB0aGUgZWFzdCBhcyBmYXIgYXMgTWVkaWEsIGFuZCB0byB0aGUgc291dGggYXMgZmFyIGFzIHRoZSBSZWQgU2VhLCB0aHJvdWdoIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSBBcmFiaWFuIGtpbmdzOyBoZSBhbm5paGlsYXRlZCB0aGUgZm9yY2VzIG9mIHRoZSBob3N0aWxlIGtpbmdzLCBhbmQgZmFpbGVkIG9ubHkgaW4gdGhlIGNhcHR1cmUgb2YgdGhlaXIgcGVyc29ucywgc2luY2UgbGlrZSB3aWxkIGJlYXN0cyB0aGV5IGZsZWQgYXdheSBpbnRvIGRlc2VydHMgYW5kIHRyYWNrbGVzcyBhbmQgaW1wZW5ldHJhYmxlIGZvcmVzdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0cm9uZyBwcm9vZiBvZiBoaXMgc3VwZXJpb3JpdHkgaXMgc2VlbiBpbiB0aGlzLCB0aGF0IHRoZSBQZXJzaWFucywgc2luY2UgdGhleSBoYWQgc3VmZmVyZWQgbm8gZ3JlYXQgaGFybSBhdCB0aGUgaGFuZHMgb2YgQ2ltb24sIHN0cmFpZ2h0d2F5IGFycmF5ZWQgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZSBHcmVla3MsIGFuZCBvdmVyd2hlbG1lZCBhbmQgZGVzdHJveWVkIHRoYXQgbGFyZ2UgZm9yY2Ugb2YgdGhlaXJzIGluIEVneXB0Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjQ1NCBCLkMuIFNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMS4xMDkiIHZhbGlkPSJ5ZXMiPlRodWN5ZGlkZXMsIGkuIDEwOSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGVyZWFzLCBhZnRlciBMdWN1bGx1cywgVGlncmFuZXMgYW5kIE1pdGhyaWRhdGVzIGF2YWlsZWQgbm90aGluZzogdGhlIGxhdHRlciwgYWxyZWFkeSB3ZWFrIGFuZCBkaXNhYmxlZCBieSBoaXMgZmlyc3Qgc3RydWdnbGVzLCBkaWQgbm90IG9uY2UgZGFyZSB0byBzaG93IFBvbXBleSBoaXMgZm9yY2VzIG91dHNpZGUgdGhlaXIgY2FtcCwgYnV0IGZsZWQgYXdheSB0byB0aGUgQm9zcG9ydXMsIGFuZCB0aGVyZSBwdXQgYW4gZW5kIHRvIGhpcyBsaWZlOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hcyBmb3IgVGlncmFuZXMsIGhlIGhhc3RlbmVkIHRvIHRocm93IGhpbXNlbGYsIHdoaWxlIHVucm9iZWQgYW5kIHVuYXJtZWQsIGF0IHRoZSBmZWV0IG9mIFBvbXBleSwgYW5kIHRha2luZyB0aGUgZGlhZGVtIGZyb20gb2ZmIGhpcyBoZWFkLCBsYWlkIGl0IHRoZXJlIHVwb24gdGhlIGdyb3VuZCwgZmxhdHRlcmluZyBQb21wZXkgdGh1cyBub3Qgd2l0aCBoaXMgb3duIGV4cGxvaXRzLCBidXQgd2l0aCB0aG9zZSBmb3Igd2hpY2ggTHVjdWxsdXMgaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoLiBBdCBhbnkgcmF0ZSwgaGUgd2FzIGFzIG11Y2ggZGVsaWdodGVkIHRvIGdldCBiYWNrIHRoZSBpbnNpZ25pYSBvZiBoaXMgcm95YWx0eSBhcyB0aG91Z2ggaGUgaGFkIGJlZW4gcm9iYmVkIG9mIHRoZW0gYmVmb3JlLiBHcmVhdGVyIHRoZXJlZm9yZSBpcyB0aGUgZ2VuZXJhbCwgYXMgaXMgdGhlIGF0aGxldGUsIHdobyBoYW5kcyBvdmVyIGhpcyBhbnRhZ29uaXN0IHRvIGhpcyBzdWNjZXNzb3IgaW4gYSB3ZWFrZXIgcGxpZ2h0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTHVjdWxsdXMgd2FzIG11Y2ggdGhlIGdyZWF0ZXIgaW4gd2FyLiBIZSB3YXMgdGhlIGZpcnN0IFJvbWFuIHRvIGNyb3NzIHRoZSBUYXVydXMgd2l0aCBhbiBhcm15OyBoZSBwYXNzZWQgdGhlIFRpZ3JpcyBhbmQgY2FwdHVyZWQgYW5kIGJ1cm5lZCB0aGUgcm95YWwgY2l0aWVzIG9mIEFzaWEs4oCUVGlncmFub2NlcnRhIENhYmlyYSwgU2lub3DigJQsIGFuZCBOaXNpYmlzLCBiZWZvcmUgdGhlIGV5ZXMgb2YgdGhlaXIga2luZ3M7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIG1hZGUgaGlzIG93biB0aGUgcmVnaW9ucyB0byB0aGUgbm9ydGggYXMgZmFyIGFzIHRoZSBQaGFzaXMsIHRvIHRoZSBlYXN0IGFzIGZhciBhcyBNZWRpYSwgYW5kIHRvIHRoZSBzb3V0aCBhcyBmYXIgYXMgdGhlIFJlZCBTZWEsIHRocm91Z2ggdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIEFyYWJpYW4ga2luZ3M7IGhlIGFubmloaWxhdGVkIHRoZSBmb3JjZXMgb2YgdGhlIGhvc3RpbGUga2luZ3MsIGFuZCBmYWlsZWQgb25seSBpbiB0aGUgY2FwdHVyZSBvZiB0aGVpciBwZXJzb25zLCBzaW5jZSBsaWtlIHdpbGQgYmVhc3RzIHRoZXkgZmxlZCBhd2F5IGludG8gZGVzZXJ0cyBhbmQgdHJhY2tsZXNzIGFuZCBpbXBlbmV0cmFibGUgZm9yZXN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0cm9uZyBwcm9vZiBvZiBoaXMgc3VwZXJpb3JpdHkgaXMgc2VlbiBpbiB0aGlzLCB0aGF0IHRoZSBQZXJzaWFucywgc2luY2UgdGhleSBoYWQgc3VmZmVyZWQgbm8gZ3JlYXQgaGFybSBhdCB0aGUgaGFuZHMgb2YgQ2ltb24sIHN0cmFpZ2h0d2F5IGFycmF5ZWQgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZSBHcmVla3MsIGFuZCBvdmVyd2hlbG1lZCBhbmQgZGVzdHJveWVkIHRoYXQgbGFyZ2UgZm9yY2Ugb2YgdGhlaXJzIGluIEVneXB0Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NDU0IEIuQy4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDEuMTA5IiB2YWxpZD0ieWVzIj5UaHVjeWRpZGVzLCBpLiAxMDkgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlcmVhcywgYWZ0ZXIgTHVjdWxsdXMsIFRpZ3JhbmVzIGFuZCBNaXRocmlkYXRlcyBhdmFpbGVkIG5vdGhpbmc6IHRoZSBsYXR0ZXIsIGFscmVhZHkgd2VhayBhbmQgZGlzYWJsZWQgYnkgaGlzIGZpcnN0IHN0cnVnZ2xlcywgZGlkIG5vdCBvbmNlIGRhcmUgdG8gc2hvdyBQb21wZXkgaGlzIGZvcmNlcyBvdXRzaWRlIHRoZWlyIGNhbXAsIGJ1dCBmbGVkIGF3YXkgdG8gdGhlIEJvc3BvcnVzLCBhbmQgdGhlcmUgcHV0IGFuIGVuZCB0byBoaXMgbGlmZTsgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAxLjEwOSIgdmFsaWQ9InllcyI+VGh1Y3lkaWRlcywgaS4gMTA5IGYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFzIGZvciBUaWdyYW5lcywgaGUgaGFzdGVuZWQgdG8gdGhyb3cgaGltc2VsZiwgd2hpbGUgdW5yb2JlZCBhbmQgdW5hcm1lZCwgYXQgdGhlIGZlZXQgb2YgUG9tcGV5LCBhbmQgdGFraW5nIHRoZSBkaWFkZW0gZnJvbSBvZmYgaGlzIGhlYWQsIGxhaWQgaXQgdGhlcmUgdXBvbiB0aGUgZ3JvdW5kLCBmbGF0dGVyaW5nIFBvbXBleSB0aHVzIG5vdCB3aXRoIGhpcyBvd24gZXhwbG9pdHMsIGJ1dCB3aXRoIHRob3NlIGZvciB3aGljaCBMdWN1bGx1cyBoYWQgY2VsZWJyYXRlZCBhIHRyaXVtcGguIEF0IGFueSByYXRlLCBoZSB3YXMgYXMgbXVjaCBkZWxpZ2h0ZWQgdG8gZ2V0IGJhY2sgdGhlIGluc2lnbmlhIG9mIGhpcyByb3lhbHR5IGFzIHRob3VnaCBoZSBoYWQgYmVlbiByb2JiZWQgb2YgdGhlbSBiZWZvcmUuIEdyZWF0ZXIgdGhlcmVmb3JlIGlzIHRoZSBnZW5lcmFsLCBhcyBpcyB0aGUgYXRobGV0ZSwgd2hvIGhhbmRzIG92ZXIgaGlzIGFudGFnb25pc3QgdG8gaGlzIHN1Y2Nlc3NvciBpbiBhIHdlYWtlciBwbGlnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbmQgc3RpbGwgZnVydGhlciwgQ2ltb24gbWFkZSBoaXMgb25zZXRzIHdoZW4gdGhlIHBvd2VyIG9mIHRoZSBraW5nIGhhZCBiZWVuIGJyb2tlbiwgYW5kIHRoZSBwcmlkZSBvZiB0aGUgUGVyc2lhbnMgaHVtYmxlZCBieSBncmVhdCBkZWZlYXRzIGFuZCBpbmNlc3NhbnQgcm91dHMgYXQgdGhlIGhhbmRzIG9mIFRoZW1pc3RvY2xlcywgUGF1c2FuaWFzLCBhbmQgTGVvdHljaGlkZXMsIGFuZCBlYXNpbHkgY29ucXVlcmVkIHRoZSBib2RpZXMgb2YgbWVuIHdob3NlIHNwaXJpdHMgaGFkIGJlZW4gZGVmZWF0ZWQgYmVmb3JlaGFuZCBhbmQgbGF5IHByb25lLiBCdXQgd2hlbiBUaWdyYW5lcyBlbmNvdW50ZXJlZCBMdWN1bGx1cywgaGUgaGFkIGtub3duIG5vIGRlZmVhdCBpbiBtYW55IGJhdHRsZXMsIGFuZCB3YXMgaW4gZXh1bHRhbnQgbW9vZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SW4gcG9pbnQgb2YgbnVtYmVycyBhbHNvLCB0aG9zZSB3aG8gd2VyZSBvdmVycG93ZXJlZCBieSBDaW1vbiBhcmUgbm90IHdvcnRoeSBvZiBjb21wYXJpc29uIHdpdGggdGhvc2Ugd2hvIHVuaXRlZCBhZ2FpbnN0IEx1Y3VsbHVzLiBUaGVyZWZvcmUsIG9uZSB3aG8gdGFrZXMgZXZlcnl0aGluZyBpbnRvIGNvbnNpZGVyYXRpb24gZmluZHMgaXQgaGFyZCB0byByZWFjaCBhIGRlY2lzaW9uLiBIZWF2ZW4gc2VlbXMgdG8gaGF2ZSBiZWVuIGtpbmRseSBkaXNwb3NlZCB0byBib3RoLCBkaXJlY3RpbmcgdGhlIG9uZSBhcyB0byB3aGF0IGhlIG11c3QgcGVyZm9ybSwgYW5kIHRoZSBvdGhlciBhcyB0byB3aGF0IGhlIG11c3QgYXZvaWQuIEJvdGgsIHRoZXJlZm9yZSwgbWF5IGJlIHNhaWQgdG8gaGF2ZSByZWNlaXZlZCB0aGUgdm90ZSBvZiB0aGUgZ29kcyBhcyBub2JsZSBhbmQgZ29kLWxpa2UgbmF0dXJlcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbmQgc3RpbGwgZnVydGhlciwgQ2ltb24gbWFkZSBoaXMgb25zZXRzIHdoZW4gdGhlIHBvd2VyIG9mIHRoZSBraW5nIGhhZCBiZWVuIGJyb2tlbiwgYW5kIHRoZSBwcmlkZSBvZiB0aGUgUGVyc2lhbnMgaHVtYmxlZCBieSBncmVhdCBkZWZlYXRzIGFuZCBpbmNlc3NhbnQgcm91dHMgYXQgdGhlIGhhbmRzIG9mIFRoZW1pc3RvY2xlcywgUGF1c2FuaWFzLCBhbmQgTGVvdHljaGlkZXMsIGFuZCBlYXNpbHkgY29ucXVlcmVkIHRoZSBib2RpZXMgb2YgbWVuIHdob3NlIHNwaXJpdHMgaGFkIGJlZW4gZGVmZWF0ZWQgYmVmb3JlaGFuZCBhbmQgbGF5IHByb25lLiBCdXQgd2hlbiBUaWdyYW5lcyBlbmNvdW50ZXJlZCBMdWN1bGx1cywgaGUgaGFkIGtub3duIG5vIGRlZmVhdCBpbiBtYW55IGJhdHRsZXMsIGFuZCB3YXMgaW4gZXh1bHRhbnQgbW9vZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
