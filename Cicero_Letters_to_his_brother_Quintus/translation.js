var translation={}
translation['60.1'] = ""
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaXQgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCB0aGF0IGFtb25nIGV2ZW4gc3VjaCBtZW4gYXMgdGhlc2UgdGhlcmUgb2NjdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpb3VzIGRpc3B1dGVzLCBtYW55IHdyb25nZnVsIGFjdHMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkLCBhbmQgaG90bHkgY29udGVzdGVkIGxpdGlnYXRpb24gaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LiBBcyB0aG91Z2ggSSBldmVyIHRob3VnaHQgdGhhdCB5b3UgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSB0byBjb250ZW5kIHdpdGghIEkga25vdyB0aGF0IHRoZSB0cm91YmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZXhjZWVkaW5nbHkgZ3JlYXQsIGFuZCBzdWNoIGFzIGRlbWFuZHMgdGhlIHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBwcnVkZW5jZTsgYnV0IHJlbWVtYmVyIHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcnVkZW5jZSBtdWNoIG1vcmUgdGhhbiBmb3J0dW5lIG9uIHdoaWNoLCBpbiBteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9waW5pb24sIHRoZSByZXN1bHQgb2YgeW91ciB0cm91YmxlIGRlcGVuZHMuIEZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgdHJvdWJsZSBpcyBpdCB0byBnb3Zlcm4gdGhvc2Ugb3ZlciB3aG9tIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBzZXQsIGlmIHlvdSBkbyBidXQgZ292ZXJuIHlvdXJzZWxmPyBUaGF0IG1heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGEgZ3JlYXQgYW5kIGRpZmZpY3VsdCB0YXNrIHRvIG90aGVycywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZWVkIGl0IGlzIG1vc3QgZGlmZmljdWx0OiB0byB5b3UgaXQgaGFzIGFsd2F5cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gdGhlIGVhc2llc3QgdGhpbmcgaW4gdGhlIHdvcmxkLCBhbmQgaW5kZWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gYmUgc28sIGZvciB5b3VyIG5hdHVyYWwgZGlzcG9zaXRpb24gaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNoIHRoYXQsIGV2ZW4gd2l0aG91dCBkaXNjaXBsaW5lLCBpdCBhcHBlYXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJsZSBvZiBzZWxmLWNvbnRyb2w7IHdoZXJlYXMgYSBkaXNjaXBsaW5lIGhhcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBmYWN0LCBiZWVuIGFwcGxpZWQgdGhhdCBtaWdodCBlZHVjYXRlIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmF1bHR5IG9mIGNoYXJhY3RlcnMuIEJ1dCB3aGlsZSB5b3UgcmVzaXN0LCBhcyB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbywgbW9uZXksIHBsZWFzdXJlLCBhbmQgZXZlcnkga2luZCBvZiBkZXNpcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiwgdGhlcmUgd2lsbCwgSSBhbSB0byBiZSB0b2xkLCBiZSBhIHJpc2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG5vdCBiZWluZyBhYmxlIHRvIHN1cHByZXNzIHNvbWUgZnJhdWR1bGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbmtlciBvciBzb21lIHJhdGhlciBvdmVyLWV4dG9ydGlvbmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRheC1jb2xsZWN0b3IhIEZvciBhcyB0byB0aGUgR3JlZWtzLCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGluaywgYXMgdGhleSBiZWhvbGQgdGhlIGlubm9jZW5jZSBvZiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgLz4geW91ciBsaWZlLCB0aGF0IG9uZSBvZiB0aGUgaGVyb2VzIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeSwgb3IgYSBkZW1pZ29kIGZyb20gaGVhdmVuLCBoYXMgY29tZSBkb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgcHJvdmluY2UuIEFuZCB0aGlzIEkgc2F5LCBub3QgdG8gaW5kdWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHRvIGFjdCB0aHVzLCBidXQgdG8gbWFrZSB5b3UgZ2xhZCB0aGF0IHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpbmcgb3IgaGF2ZSBhY3RlZCBzby4gSXQgaXMgYSBzcGxlbmRpZCB0aGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiB0aHJlZSB5ZWFycyBpbiBzdXByZW1lIHBvd2VyIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYWxsb3dpbmcgc3RhdHVlLCBwaWN0dXJlLCBwbGF0ZSwgbmFwZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlLCBhbnlvbmUncyBnb29kIGxvb2tzLCBvciBhbnkgb2ZmZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25leeKAlGFsbCBvZiB3aGljaCBhcmUgcGxlbnRpZnVsIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jZeKAlHRvIGNhdXNlIHlvdSB0byBzd2VydmUgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IGFic29sdXRlIGhvbmVzdHkgYW5kIHB1cml0eSBvZiBsaWZlLiBXaGF0IGNhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGltYWdpbmVkIHNvIHN0cmlraW5nIG9yIHNvIGRlc2lyYWJsZSBhcyB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXJ0dWUsIGEgY29tbWFuZCBvdmVyIHRoZSBwYXNzaW9ucywgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYtY29udHJvbCBzdWNoIGFzIHlvdXJzLCBhcmUgbm90IHJlbWFpbmluZyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmtuZXNzIGFuZCBvYnNjdXJpdHksIGJ1dCBoYXZlIGJlZW4gc2V0IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkIGRheWxpZ2h0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGJlZm9yZSB0aGUgZXllcyBvZiBhIGZhbW91cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlLCBhbmQgaW4gdGhlIGhlYXJpbmcgb2YgYWxsIG5hdGlvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVvcGxlcz8gVGhhdCB0aGUgaW5oYWJpdGFudHMgYXJlIG5vdCBiZWluZyBydWluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSB5b3VyIHByb2dyZXNzZXMsIGRyYWluZWQgYnkgeW91ciBjaGFyZ2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnaXRhdGVkIGJ5IHlvdXIgYXBwcm9hY2g/IFRoYXQgdGhlcmUgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWxpZXN0IGpveSwgcHVibGljIGFuZCBwcml2YXRlLCB3aGVyZXNvZXZlciB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21lLCB0aGUgY2l0eSByZWdhcmRpbmcgeW91IGFzIGEgcHJvdGVjdG9yIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBhIHR5cmFudCwgdGhlIHByaXZhdGUgaG91c2UgYXMgYSBndWVzdCBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBwbHVuZGVyZXI/IDwvdHJhbnNsYXRpb24+"
translation['60.3'] = ""
translation['60.4'] = ""
translation['60.7'] = ""
translation['60.8'] = ""
translation['60.9'] = ""
translation['60.10'] = ""
translation['60.11'] = ""
translation['60.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpZiB0aGV5IHdpbGwgZmFpcmx5IHJlY29uY2lsZSB0aGVtc2VsdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGV4aXN0ZW5jZSBhbmQgbmFtZSBvZiBwdWJsaWNhbiwgYWxsIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5IGJlIG1hZGUgdG8gYXBwZWFyIHRvIHRoZW0gaW4gYSBsZXNzIG9mZmVuc2l2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0IGJ5IHlvdXIgc2tpbGwgYW5kIHBydWRlbmNlLiBUaGV5IG1heSwgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtpbmcgdGhlaXIgYmFyZ2FpbnMgd2l0aCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiwgbm90IGhhdmUgcmVnYXJkIHNvIG11Y2ggdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXhhY3QgY29uZGl0aW9ucyBsYWlkIGRvd24gYnkgdGhlIGNlbnNvcnMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29udmVuaWVuY2Ugb2Ygc2V0dGxpbmcgdGhlIGJ1c2luZXNzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVpbmcgdGhlbXNlbHZlcyBmcm9tIGZhcnRoZXIgdHJvdWJsZS4gWW91IGFsc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgZG8sIHdoYXQgeW91IGhhdmUgZG9uZSBzcGxlbmRpZGx5IGFuZCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlsbCBkb2luZywgbmFtZWx5LCBkd2VsbCBvbiB0aGUgaGlnaCBwb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LCBhbmQgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIG9ibGlnYXRpb25zIHRvIHRoYXQgb3JkZXIsIGluIHN1Y2ggYSB3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc+KAlHB1dHRpbmcgb3V0IG9mIHRoZSBxdWVzdGlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyBvZiB5b3VyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiBhbmQgdGhlIHBvd2VyIG9mIHlvdXIgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgYW5kIGRpZ25pdHnigJR0byByZWNvbmNpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdpdGggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj47IGFuZCB0byBiZWcgb2YgdGhvc2UsIHdob20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZXJ2ZWQgZW1pbmVudGx5IHdlbGwsIGFuZCB3aG8gb3dlIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIHRvIHN1ZmZlciB5b3UgYnkgdGhlaXIgY29tcGxpYW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50YWluIGFuZCBwcmVzZXJ2ZSB0aGUgYm9uZHMgd2hpY2ggdW5pdGUgdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dCB3aHkgZG8gSSBhZGRyZXNzIHRoZXNlIGV4aG9ydGF0aW9ucyB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBub3Qgb25seSBjYXBhYmxlIG9mIGNhcnJ5aW5nIHRoZW0gb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gYWNjb3JkIHdpdGhvdXQgYW55b25lJ3MgaW5zdHJ1Y3Rpb24sIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSB0byBhIGdyZWF0IGV4dGVudCB0aG9yb3VnaGx5IGRvbmUgc28/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBtb3N0IHJlc3BlY3RhYmxlIGFuZCBpbXBvcnRhbnQgY29tcGFuaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gbm90IGNlYXNlIG9mZmVyaW5nIG1lIHRoYW5rcyBkYWlseSwgYW5kIHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIG1vcmUgZ3JhdGlmeWluZyB0byBtZSBiZWNhdXNlIHRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB0aGUgc2FtZS4gTm93IGl0IGlzIGFuIGFjaGlldmVtZW50IG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSB0byB1bml0ZSBpbiBmZWVsaW5nIHRoaW5ncyB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSBpbiBpbnRlcmVzdHMsIGFpbXMsIGFuZCwgSSBoYWQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCwgaW4gdGhlaXIgdmVyeSBuYXR1cmUuIEJ1dCBJIGhhdmUgbm90IHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcyB0byBpbnN0cnVjdCB5b3XigJRmb3IgeW91ciB3aXNkb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBtYW4ncyBpbnN0cnVjdGlvbuKAlGJ1dCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGEgcGxlYXN1cmUgdG8gbWUgd2hpbGUgd3JpdGluZyB0byBzZXQgZG93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgdmlydHVlcywgdGhvdWdoIEkgaGF2ZSBydW4gdG8gZ3JlYXRlciBsZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGlzIGxldHRlciB0aGFuIEkgY291bGQgaGF2ZSB3aXNoZWQsIG9yIHRoYW4gSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgSSBzaG91bGQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiwgbm90IGhhdmUgcmVnYXJkIHNvIG11Y2ggdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXhhY3QgY29uZGl0aW9ucyBsYWlkIGRvd24gYnkgdGhlIGNlbnNvcnMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29udmVuaWVuY2Ugb2Ygc2V0dGxpbmcgdGhlIGJ1c2luZXNzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVpbmcgdGhlbXNlbHZlcyBmcm9tIGZhcnRoZXIgdHJvdWJsZS4gWW91IGFsc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgZG8sIHdoYXQgeW91IGhhdmUgZG9uZSBzcGxlbmRpZGx5IGFuZCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlsbCBkb2luZywgbmFtZWx5LCBkd2VsbCBvbiB0aGUgaGlnaCBwb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LCBhbmQgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIG9ibGlnYXRpb25zIHRvIHRoYXQgb3JkZXIsIGluIHN1Y2ggYSB3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc+KAlHB1dHRpbmcgb3V0IG9mIHRoZSBxdWVzdGlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyBvZiB5b3VyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiBhbmQgdGhlIHBvd2VyIG9mIHlvdXIgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgYW5kIGRpZ25pdHnigJR0byByZWNvbmNpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdpdGggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj47IGFuZCB0byBiZWcgb2YgdGhvc2UsIHdob20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZXJ2ZWQgZW1pbmVudGx5IHdlbGwsIGFuZCB3aG8gb3dlIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIHRvIHN1ZmZlciB5b3UgYnkgdGhlaXIgY29tcGxpYW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50YWluIGFuZCBwcmVzZXJ2ZSB0aGUgYm9uZHMgd2hpY2ggdW5pdGUgdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dCB3aHkgZG8gSSBhZGRyZXNzIHRoZXNlIGV4aG9ydGF0aW9ucyB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBub3Qgb25seSBjYXBhYmxlIG9mIGNhcnJ5aW5nIHRoZW0gb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gYWNjb3JkIHdpdGhvdXQgYW55b25lJ3MgaW5zdHJ1Y3Rpb24sIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSB0byBhIGdyZWF0IGV4dGVudCB0aG9yb3VnaGx5IGRvbmUgc28/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBtb3N0IHJlc3BlY3RhYmxlIGFuZCBpbXBvcnRhbnQgY29tcGFuaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gbm90IGNlYXNlIG9mZmVyaW5nIG1lIHRoYW5rcyBkYWlseSwgYW5kIHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIG1vcmUgZ3JhdGlmeWluZyB0byBtZSBiZWNhdXNlIHRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB0aGUgc2FtZS4gTm93IGl0IGlzIGFuIGFjaGlldmVtZW50IG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSB0byB1bml0ZSBpbiBmZWVsaW5nIHRoaW5ncyB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSBpbiBpbnRlcmVzdHMsIGFpbXMsIGFuZCwgSSBoYWQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCwgaW4gdGhlaXIgdmVyeSBuYXR1cmUuIEJ1dCBJIGhhdmUgbm90IHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcyB0byBpbnN0cnVjdCB5b3XigJRmb3IgeW91ciB3aXNkb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBtYW4ncyBpbnN0cnVjdGlvbuKAlGJ1dCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGEgcGxlYXN1cmUgdG8gbWUgd2hpbGUgd3JpdGluZyB0byBzZXQgZG93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgdmlydHVlcywgdGhvdWdoIEkgaGF2ZSBydW4gdG8gZ3JlYXRlciBsZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGlzIGxldHRlciB0aGFuIEkgY291bGQgaGF2ZSB3aXNoZWQsIG9yIHRoYW4gSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgSSBzaG91bGQuIDwvdHJhbnNsYXRpb24+"
translation['60.13'] = ""
translation['60.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSB5b3VyIGZpcnN0IHllYXIgZ2F2ZSByaXNlIHRvIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWxrIGluIHJlZ2FyZCB0byB0aGlzIHBhcnRpY3VsYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnTigJRJIGJlbGlldmUgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cm9uZy1kb2luZywgdGhlIGNvdmV0b3VzbmVzcywgYW5kIHRoZSBhcnJvZ2FuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBtZW4gY2FtZSB1cG9uIHlvdSBhcyBhIHN1cnByaXNlLCBhbmQgc2VlbWVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHVuYmVhcmFibGUtd2hpbGUgeW91ciBzZWNvbmQgeWVhciB3YXMgbXVjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbGRlciwgYmVjYXVzZSBoYWJpdCBhbmQgcmVmZWN0aW9uLCBhbmQsIGFzIEkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGluaywgbXkgbGV0dGVycyBhbHNvLCByZW5kZXJlZCB5b3UgbW9yZSB0b2xlcmFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBnZW50bGUsIHRoZSB0aGlyZCBvdWdodCB0byBiZSBzbyBjb21wbGV0ZWx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmb3JtZWQsIGFzIG5vdCB0byBnaXZlIGV2ZW4gdGhlIHNtYWxsZXN0IGdyb3VuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhbnlvbmUgdG8gZmluZCBmYXVsdC4gQW5kIGhlcmUgSSBnbyBvbiB0byB1cmdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiB5b3UsIG5vdCBieSB3YXkgb2YgZXhob3J0YXRpb24gb3IgYWRtb25pdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgYnkgYnJvdGhlcmx5IGVudHJlYXRpZXMsIHRoYXQgeW91IHdvdWxkIHNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgd2hvbGUgaGVhcnQsIGNhcmUsIGFuZCB0aG91Z2h0IG9uIHRoZSBnYWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcHJhaXNlIGZyb20gZXZlcnlib2R5IGFuZCBmcm9tIGV2ZXJ5IHF1YXJ0ZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYsIGluZGVlZCwgb3VyIGFjaGlldmVtZW50cyB3ZXJlIG9ubHkgdGhlIHN1YmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhIG1vZGVyYXRlIGFtb3VudCBvZiB0YWxrIGFuZCBjb21tZW5kYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBlbWluZW50LCBub3RoaW5nIGJleW9uZCB0aGUgcHJhY3RpY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIHdvdWxkIGhhdmUgYmVlbiBkZW1hbmRlZCBvZiB5b3UuIEFzIGl0IGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIG93aW5nIHRvIHRoZSBicmlsbGlhbmN5IGFuZCBtYWduaXR1ZGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgYWZmYWlycyBpbiB3aGljaCB3ZSBoYXZlIGJlZW4gZW5nYWdlZCwgaWYgd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyBub3Qgb2J0YWluIHRoZSB2ZXJ5IGhpZ2hlc3QgcmVwdXRhdGlvbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBwcm92aW5jZSwgaXQgc2VlbXMgc2NhcmNlbHkgcG9zc2libGUgZm9yIHVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYXZvaWQgdGhlIG1vc3QgdmlvbGVudCBhYnVzZS4gT3VyIHBvc2l0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjaCB0aGF0IGFsbCBsb3lhbGlzdHMgc3VwcG9ydCB1cywgYnV0IGRlbWFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gYW5kIGV4cGVjdCBmcm9tIHVzIGV2ZXJ5IGtpbmQgb2YgYWN0aXZpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlydHVlLCB3aGlsZSBhbGwgdGhlIGRpc2xveWFsLCBzZWVpbmcgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgZW50ZXJlZCB1cG9uIGEgbGFzdGluZyB3YXIgd2l0aCB0aGVtLCBhcHBlYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ZWQgd2l0aCB0aGUgdmVyeSBzbWFsbGVzdCBleGN1c2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNraW5nIHVzLiBXaGVyZWZvcmUsIHNpbmNlIGZvcnR1bmUgaGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgdG8geW91IHN1Y2ggYSB0aGVhdHJlIGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGNvbXBsZXRlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZWQgd2l0aCBhbiBhdWRpZW5jZSwgb2YgaW1tZW5zZSBzaXplLCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IHJlZmluZWQganVkZ21lbnQsIGFuZCwgbW9yZW92ZXIsIG5hdHVyYWxseSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFibGUgb2YgY29udmV5aW5nIHNvdW5kLCB0aGF0IGl0cyBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIG9waW5pb24gYW5kIGl0cyByZW1hcmtzIHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgcHV0IG91dCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHBvd2VyLCBJIGJlc2VlY2ggeW91LCBleGVydCBhbGwgeW91ciBlbmVyZ2llcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGVhciBub3Qgb25seSB0byBoYXZlIGJlZW4gd29ydGh5IG9mIHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgcGxheWVkIGhlcmUsIGJ1dCB0byBoYXZlIHN1cnBhc3NlZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSB0aGVyZSBieSB5b3VyIGhpZ2ggcXVhbGl0aWVzLiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGNvbXBsZXRlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZWQgd2l0aCBhbiBhdWRpZW5jZSwgb2YgaW1tZW5zZSBzaXplLCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IHJlZmluZWQganVkZ21lbnQsIGFuZCwgbW9yZW92ZXIsIG5hdHVyYWxseSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFibGUgb2YgY29udmV5aW5nIHNvdW5kLCB0aGF0IGl0cyBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIG9waW5pb24gYW5kIGl0cyByZW1hcmtzIHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgcHV0IG91dCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHBvd2VyLCBJIGJlc2VlY2ggeW91LCBleGVydCBhbGwgeW91ciBlbmVyZ2llcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGVhciBub3Qgb25seSB0byBoYXZlIGJlZW4gd29ydGh5IG9mIHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgcGxheWVkIGhlcmUsIGJ1dCB0byBoYXZlIHN1cnBhc3NlZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSB0aGVyZSBieSB5b3VyIGhpZ2ggcXVhbGl0aWVzLiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['60.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBzaW5jZSBjaGFuY2UgaGFzIGFzc2lnbmVkIHRvIG1lIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhY2llcyB0aGUgQ29uZHVjdCBvZiBwdWJsaWMgYnVzaW5lc3MgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eSwgdG8geW91IHRoYXQgaW4gYSBwcm92aW5jZSwgaWYgbXkgc2hhcmUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZlcmlvciB0byBubyBvbmUncywgdGFrZSBjYXJlIHRoYXQgeW91cnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJwYXNzZXMgb3RoZXJzLiBBdCB0aGUgc2FtZSB0aW1lIHRoaW5rIG9mIHRoaXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgYXJlIG5vdCBub3cgd29ya2luZyBmb3IgYSBmdXR1cmUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvc3BlY3RpdmUgZ2xvcnksIGJ1dCBhcmUgZmlnaHRpbmcgaW4gZGVmZW5jZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgaGFzIGJlZW4gYWxyZWFkeSBnYWluZWQ7IHdoaWNoIGluZGVlZCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3Qgc28gbXVjaCBhbiBvYmplY3QgdG8gZ2FpbiBhcyBpdCBpcyBub3cgb3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBkZWZlbmQuIEFuZCBpZiBhbnl0aGluZyBpbiBtZSBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwYXJ0IGZyb20geW91LCBJIHNob3VsZCBkZXNpcmUgbm90aGluZyBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcG9zaXRpb24gd2hpY2ggSSBoYXZlIGFscmVhZHkgZ2FpbmVkLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwgZmFjdCwgaG93ZXZlciwgaXMgdGhhdCB1bmxlc3MgYWxsIHlvdXIgYWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBkZWVkcyBpbiB5b3VyIHByb3ZpbmNlIGNvcnJlc3BvbmQgdG8gbXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMsIEkgc2hhbGwgdGhpbmsgdGhhdCBJIGhhdmUgZ2FpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBieSB0aG9zZSBncmVhdCBsYWJvdXJzIGFuZCBkYW5nZXJzLCBpbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB3aGljaCB5b3UgaGF2ZSBzaGFyZWQuIEJ1dCBpZiBpdCB3YXMgeW91IHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm92ZSBhbGwgb3RoZXJzLCBhc3Npc3RlZCBtZSB0byBnYWluIGEgbW9zdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGVuZGlkIHJlcHV0YXRpb24sIHlvdSB3aWxsIGNlcnRhaW5seSBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFib3VyIG1vcmUgdGhhbiBvdGhlcnMgdG8gZW5hYmxlIG1lIHRvIHJldGFpbiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgbXVzdCBub3QgYmUgZ3VpZGVkIGJ5IHRoZSBvcGluaW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdWRnbWVudHMgb2YgdGhlIHByZXNlbnQgZ2VuZXJhdGlvbiBvbmx5LCBidXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aG9zZSB0byBjb21lIGFsc286IGFuZCB5ZXQgdGhlIGxhdHRlciB3aWxsIGJlIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlIGNhbmRpZCBqdWRnbWVudCwgZm9yIGl0IHdpbGwgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlZCBieSBkZXRyYWN0aW9uIGFuZCBtYWxpY2UuIEZpbmFsbHksIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGluayBvZiB0aGlz4oCUdGhhdCB5b3UgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWtpbmcgZ2xvcnkgZm9yIHlvdXJzZWxmIGFsb25lIChhbmQgZXZlbiBpZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGUgY2FzZSwgeW91IHN0aWxsIG91Z2h0IG5vdCB0byBiZSBjYXJlbGVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGl0LCBlc3BlY2lhbGx5IGFzIHlvdSBoYWQgZGV0ZXJtaW5lZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNlY3JhdGUgdGhlIG1lbW9yeSBvZiB5b3VyIG5hbWUgYnkgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBtb251bWVudHMpLCBidXQgeW91IGhhdmUgdG8gc2hhcmUgaXQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLCBhbmQgdG8gaGFuZCBpdCBkb3duIHRvIG91ciBjaGlsZHJlbi4gSW4gcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2hpY2ggeW91IG11c3QgYmUgb24geW91ciBndWFyZCBsZXN0IGJ5IGFueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VzcyBvZiBjYXJlbGVzc25lc3MgeW91IHNob3VsZCBzZWVtIG5vdCBvbmx5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBuZWdsZWN0ZWQgeW91ciBvd24gaW50ZXJlc3RzLCBidXQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ3J1ZGdlZCB0aG9zZSBvZiB5b3VyIGZhbWlseSBhbHNvLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.16'] = ""
translation['volume 1 appendix a.1'] = ""
translation['volume 1 appendix a.2'] = ""
translation['volume 1 appendix a.3'] = ""
translation['volume 1 appendix a.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGF2aW5nIHRodXMgc2V0IGZvcnRoIHdoYXQgYWR2YW50YWdlcyB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBtaWdodCBoYXZlIHRvIHNldCBhZ2FpbnN0IHlvdXIgIm5ld25lc3MsIiBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpbmsgSSBvdWdodCBub3cgdG8gc2F5IGEgd29yZCBvbiB0aGUgaW1wb3J0YW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHdoYXQgeW91IGFyZSB0cnlpbmcgZm9yLiBZb3UgYXJlIHNlZWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Vsc2hpcCwgYW4gb2ZmaWNlIG9mIHdoaWNoIG5vIG9uZSB0aGlua3MgeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW53b3J0aHksIGJ1dCBvZiB3aGljaCB0aGVyZSBhcmUgbWFueSB3aG8gd2lsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGplYWxvdXMuIEZvciwgd2hpbGUgYnkgYmlydGggb2YgZXF1ZXN0cmlhbiByYW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgcGxhY2U9InVuc3BlY2lmaWVkIj5DaWNlcm8sIG9mIGNvdXJzZSwgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93IGEgc2VuYXRvciwgYnV0IGhlIHdhcyB0aGUgZmlyc3Qgb2YgaGlzIGZhbWlseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdobyBoYWQgYmVlbiBzby4gVGhlIG90aGVycyB3aG8gY2FtZSBmb3J3YXJkIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdWxzaGlwIHdlcmUgdHdvIHBhdHJpY2lhbnMsIFAuIFN1bHBpY2l1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhbGJhLCBMLiBTZXJnaXVzIENhdGlsaW5hOyBmb3VyIHBsZWJlaWFucy4gQy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnRvbml1cywgTC4gQ2Fzc2l1cyBMb25naW51cywgd2hvbSBBc2Nvbml1cyBjYWxscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vYmlsZXM8L2ZvcmVpZ24+LCBpLmUuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgZmFtaWxpZXMgd2hvIGhhZCBoZWxkIGN1cnVsZSBvZmZpY2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFEuIENvcm5pZmljaXVzIGFuZCBDLiBMaWNpbml1cyBTYWNlcmRvcywgd2hvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbGllcyBoYWQgb25seSByZWNlbnRseSByaXNlbiB0byB0aGlzIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnRhbnR1bSBub24gcHJpbWkgZXggZmFtaWxpaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWlzIG1hZ2lzdHJhdHVtIGFkZXB0aSBlcmFudDwvZm9yZWlnbj4gKEFzYy4pLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbm90ZT4geW91IGFyZSBzZWVraW5nIHRoZSBoaWdoZXN0IHJhbmsgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUsIGFuZCB5ZXQgb25lIHdoaWNoLCB0aG91Z2ggdGhlIGhpZ2hlc3QsIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3MSIgLz4gcmVmbGVjdHMgbXVjaCBncmVhdGVyIHNwbGVuZG91ciBvbiBhIG1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNvdXJhZ2UgZWxvcXVlbmNlIGFuZCBwdXJlIGxpZmUgdGhhbiBvbiBvdGhlcnMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9uJ3Qgc3VwcG9zZSB0aGF0IHRob3NlIHdobyBoYXZlIGFscmVhZHkgaGVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgb2ZmaWNlIGFyZSBibGluZCB0byB0aGUgcG9saXRpY2FsIHBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgb2NjdXB5LCB3aGVuIG9uY2UgeW91IGhhdmUgb2J0YWluZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZS4gSSBzdXNwZWN0LCBob3dldmVyLCB0aGF0IHRob3NlIHdobywgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9ybiBvZiBjb25zdWxhciBmYW1pbGllcywgaGF2ZSBub3QgYXR0YWluZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gb2YgdGhlaXIgYW5jZXN0b3JzIHdpbGwgdW5sZXNzIHRoZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXBwZW4gdG8gaGUgc3Ryb25nbHkgYXR0YWNoZWQgdG8geW91IGZlZWwgJ3NvbWUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamVhbG91c3kuIEV2ZW4gIm5ldyBtZW4iIHdobyBoYXZlIGJlZW4gcHJhZXRvcnMgSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaW5rLCB1bmxlc3MgdW5kZXIgZ3JlYXQgb2JsaWdhdGlvbnMgdG8geW91LCB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGxpa2UgdG8gYmUgc3VycGFzc2VkIGJ5IHlvdSBpbiBvZmZpY2lhbCByYW5rLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhc3RseSwgaW4gdGhlIHBvcHVsYWNlIGl0c2VsZiwgSSBhbSBzdXJlIGl0IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvY2N1ciB0byB5b3UgaG93IG1hbnkgYXJlIGVudmlvdXMsIGhvdyBtYW55LCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHByZWNlZGVudHMgb2YgcmVjZW50IHllYXJzLCBhcmUgYXZlcnNlIHRvICJuZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW4uIiBJdCBtdXN0IGFsc28gbmVlZHMgYmUgdGhhdCBzb21lIGFyZSBhbmdyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggeW91IGluIGNvbnNlcXVlbmNlIG9mIHRoZSBjYXVzZXMgd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBwbGVhZGVkLiBOYXksIGNhcmVmdWxseSBjb25zaWRlciB0aGlzIGFsc28sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hldGhlciwgc2VlaW5nIHRoYXQgeW91IGhhdmUgZGV2b3RlZCB5b3Vyc2VsZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggc3VjaCBmZXJ2b3VyIHRvIHRoZSBwcm9tb3Rpb24gb2YgUG9tcGV5J3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9yeSB5b3UgY2FuIHN1cHBvc2UgY2VydGFpbiBtZW4gdG8gYmUgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgb24gdGhhdCBhY2NvdW50LiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHBsYWNlPSJ1bnNwZWNpZmllZCI+SGUgaGludHMsIEkgdGhpbmssIGF0IENhZXNhciwgd2hvIFN1cHBvcnRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFudG9uaXVzIGFuZCBDYXRpbGluZSBhbmQgYWxzbyB0aGUgTHVjdWxsaSwgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBvcHBvbmVudHMgb2YgUG9tcGV5LiA8L25vdGU+IFdoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVpbmcgdGhhdCB5b3UgYXJlIHNlZWtpbmcgdGhlIGhpZ2hlc3QgcGxhY2UgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdGUsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgdGhlcmUgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdCBzZW50aW1lbnRzIG9wcG9zZWQgdG8geW91LCB5b3UgbXVzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlbHkgZW1wbG95IGV2ZXJ5IG1ldGhvZCBhbmQgYWxsIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWdpbGFuY2UsIGxhYm91ciwgYW5kIGF0dGVudGlvbiB0byBidXNpbmVzcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiBwbGFjZT0idW5zcGVjaWZpZWQiPkNpY2Vybywgb2YgY291cnNlLCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgYSBzZW5hdG9yLCBidXQgaGUgd2FzIHRoZSBmaXJzdCBvZiBoaXMgZmFtaWx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGhhZCBiZWVuIHNvLiBUaGUgb3RoZXJzIHdobyBjYW1lIGZvcndhcmQgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN1bHNoaXAgd2VyZSB0d28gcGF0cmljaWFucywgUC4gU3VscGljaXVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FsYmEsIEwuIFNlcmdpdXMgQ2F0aWxpbmE7IGZvdXIgcGxlYmVpYW5zLiBDLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFudG9uaXVzLCBMLiBDYXNzaXVzIExvbmdpbnVzLCB3aG9tIEFzY29uaXVzIGNhbGxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm9iaWxlczwvZm9yZWlnbj4sIGkuZS4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVycyBvZiBmYW1pbGllcyB3aG8gaGFkIGhlbGQgY3VydWxlIG9mZmljZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgUS4gQ29ybmlmaWNpdXMgYW5kIEMuIExpY2luaXVzIFNhY2VyZG9zLCB3aG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlsaWVzIGhhZCBvbmx5IHJlY2VudGx5IHJpc2VuIHRvIHRoaXMgcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGFudHVtIG5vbiBwcmltaSBleCBmYW1pbGlpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1aXMgbWFnaXN0cmF0dW0gYWRlcHRpIGVyYW50PC9mb3JlaWduPiAoQXNjLikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ub3RlPiB5b3UgYXJlIHNlZWtpbmcgdGhlIGhpZ2hlc3QgcmFuayBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSwgYW5kIHlldCBvbmUgd2hpY2gsIHRob3VnaCB0aGUgaGlnaGVzdCwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm9iaWxlczwvZm9yZWlnbj4sIGkuZS4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVycyBvZiBmYW1pbGllcyB3aG8gaGFkIGhlbGQgY3VydWxlIG9mZmljZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgUS4gQ29ybmlmaWNpdXMgYW5kIEMuIExpY2luaXVzIFNhY2VyZG9zLCB3aG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlsaWVzIGhhZCBvbmx5IHJlY2VudGx5IHJpc2VuIHRvIHRoaXMgcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dGFudHVtIG5vbiBwcmltaSBleCBmYW1pbGlpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1aXMgbWFnaXN0cmF0dW0gYWRlcHRpIGVyYW50PC9mb3JlaWduPiAoQXNjLikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzcxIiAvPiByZWZsZWN0cyBtdWNoIGdyZWF0ZXIgc3BsZW5kb3VyIG9uIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgY291cmFnZSBlbG9xdWVuY2UgYW5kIHB1cmUgbGlmZSB0aGFuIG9uIG90aGVycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb24ndCBzdXBwb3NlIHRoYXQgdGhvc2Ugd2hvIGhhdmUgYWxyZWFkeSBoZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBvZmZpY2UgYXJlIGJsaW5kIHRvIHRoZSBwb2xpdGljYWwgcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBvY2N1cHksIHdoZW4gb25jZSB5b3UgaGF2ZSBvYnRhaW5lZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lLiBJIHN1c3BlY3QsIGhvd2V2ZXIsIHRoYXQgdGhvc2Ugd2hvLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JuIG9mIGNvbnN1bGFyIGZhbWlsaWVzLCBoYXZlIG5vdCBhdHRhaW5lZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBvZiB0aGVpciBhbmNlc3RvcnMgd2lsbCB1bmxlc3MgdGhleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcHBlbiB0byBoZSBzdHJvbmdseSBhdHRhY2hlZCB0byB5b3UgZmVlbCAnc29tZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZWFsb3VzeS4gRXZlbiAibmV3IG1lbiIgd2hvIGhhdmUgYmVlbiBwcmFldG9ycyBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpbmssIHVubGVzcyB1bmRlciBncmVhdCBvYmxpZ2F0aW9ucyB0byB5b3UsIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgbGlrZSB0byBiZSBzdXJwYXNzZWQgYnkgeW91IGluIG9mZmljaWFsIHJhbmsuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGFzdGx5LCBpbiB0aGUgcG9wdWxhY2UgaXRzZWxmLCBJIGFtIHN1cmUgaXQgd2lsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VyIHRvIHlvdSBob3cgbWFueSBhcmUgZW52aW91cywgaG93IG1hbnksIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJlY2VkZW50cyBvZiByZWNlbnQgeWVhcnMsIGFyZSBhdmVyc2UgdG8gIm5ldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbi4iIEl0IG11c3QgYWxzbyBuZWVkcyBiZSB0aGF0IHNvbWUgYXJlIGFuZ3J5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB5b3UgaW4gY29uc2VxdWVuY2Ugb2YgdGhlIGNhdXNlcyB3aGljaCB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXZlIHBsZWFkZWQuIE5heSwgY2FyZWZ1bGx5IGNvbnNpZGVyIHRoaXMgYWxzbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGV0aGVyLCBzZWVpbmcgdGhhdCB5b3UgaGF2ZSBkZXZvdGVkIHlvdXJzZWxmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBzdWNoIGZlcnZvdXIgdG8gdGhlIHByb21vdGlvbiBvZiBQb21wZXkncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb3J5IHlvdSBjYW4gc3VwcG9zZSBjZXJ0YWluIG1lbiB0byBiZSB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kcyBvbiB0aGF0IGFjY291bnQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgcGxhY2U9InVuc3BlY2lmaWVkIj5IZSBoaW50cywgSSB0aGluaywgYXQgQ2Flc2FyLCB3aG8gU3VwcG9ydGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW50b25pdXMgYW5kIENhdGlsaW5lIGFuZCBhbHNvIHRoZSBMdWN1bGxpLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIG9wcG9uZW50cyBvZiBQb21wZXkuIDwvbm90ZT4gV2hlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWluZyB0aGF0IHlvdSBhcmUgc2Vla2luZyB0aGUgaGlnaGVzdCBwbGFjZSBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdGhhdCB0aGVyZSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0IHNlbnRpbWVudHMgb3Bwb3NlZCB0byB5b3UsIHlvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpdmVseSBlbXBsb3kgZXZlcnkgbWV0aG9kIGFuZCBhbGwgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZ2lsYW5jZSwgbGFib3VyLCBhbmQgYXR0ZW50aW9uIHRvIGJ1c2luZXNzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['volume 1 appendix a.5'] = ""
translation['volume 1 appendix a.6'] = ""
translation['volume 1 appendix a.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGFsdGhvdWdoIHlvdSBvdWdodCB0byByZWx5IG9uIGFuZCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcnRpZmllZCBieSwgZnJpZW5kc2hpcHMgYWxyZWFkeSBnYWluZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlybWx5IHNlY3VyZWQsIHlldCBpbiB0aGUgY291cnNlIG9mIHRoZSBjYW52YXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRzZWxmIHZlcnkgbnVtZXJvdXMgYW5kIHVzZWZ1bCBmcmllbmRzaGlwcyBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3F1aXJlZC4gRm9yIGFtb25nIGl0cyBhbm5veWFuY2VzIGEgY2FuZGlkYXR1cmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXMgdGhpcyBhZHZhbnRhZ2UgOiB5b3UgY2FuIHdpdGhvdXQgbG9zcyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZ25pdHksIGFzIHlvdSBjYW5ub3QgaW4gb3RoZXIgYWZmYWlycyBvZiBsaWZlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWl0IHdob21zb2V2ZXIgeW91IGNob29zZSB0byB5b3VyIGZyaWVuZHNoaXAgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9tIGlmIHlvdSB3ZXJlIGF0IGFueSBvdGhlciB0aW1lIHRvIG9mZmVyIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NpZXR5LCB5b3Ugd291bGQgYmUgdGhvdWdodCBndWlsdHkgb2YgYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2NlbnRyaWNpdHk7IHdoZXJlYXMgZHVyaW5nIGEgY2FudmFzcywgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uJ3QgZG8gc28gd2l0aCBtYW55LCBhbmQgdGFrZSBwYWlucyBhYm91dCBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc2lkZXMsIHlvdSB3b3VsZCBiZSB0aG91Z2h0IHRvIGJlIG5vIHVzZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlIGF0IGFsbC4gTW9yZW92ZXIsIEkgY2FuIGFzc3VyZSB5b3Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCB0aGF0IHRoZXJlIGlzIG5vIG9uZSB1bmxlc3MgaGUgaGFwcGVucyB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kIGJ5IHNvbWUgc3BlY2lhbCB0aWUgdG8gc29tZSBvbmUgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzc0IiAvPiBvZiB5b3VyIHJpdmFscywgd2hvbSB5b3UgY291bGQgbm90IGluZHVjZSwgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgdG9vayBwYWlucywgdG8gZWFybiB5b3VyIGFmZmVjdGlvbiBieSBoaXMgZ29vZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzLCBhbmQgdG8gc2VpemUgdGhlIG9wcG9ydHVuaXR5IG9mIHB1dHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgdW5kZXIgYW4gb2JsaWdhdGlvbuKAlGxldCBoaW0gYnV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHkgdW5kZXJzdGFuZCB0aGF0IHlvdSB2YWx1ZSBoaW0gaGlnaGx5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHJlYWxseSBtZWFuIHdoYXQgeW91IHNheSwgdGhhdCBoZSBpcyBtYWtpbmcgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2QgaW52ZXN0bWVudCwgYW5kIHRoYXQgdGhlcmUgd2lsbCBhY2NydWUgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IG5vdCBvbmx5IGEgYnJpZWYgYW5kIGVsZWN0aW9uZWVyaW5nIGZyaWVuZHNoaXAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0IGEgZmlybSBhbmQgbGFzdGluZyBvbmUuIFRoZXJlIHdpbGwgYmUgbm8gb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlbGlldmUgbWUsIGlmIGhlIGhhcyBhbnl0aGluZyBpbiBoaW0gYXQgYWxsLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGxldCBzbGlwIHRoaXMgb3Bwb3J0dW5pdHkgb2ZmZXJlZCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGluZyBhIGZyaWVuZHNoaXAgd2l0aCB5b3UsIGVzcGVjaWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGJ5IGdvb2QgbHVjayB5b3UgaGF2ZSBjb21wZXRpdG9ycyB3aG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZHNoaXAgaXMgb25lIHRvIGJlIG5lZ2xlY3RlZCBvciBhdm9pZGVkLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG8gbm90IG9ubHkgYXJlIHVuYWJsZSB0byBzZWN1cmUgd2hhdCBJIGFtIHVyZ2luZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSB0byBzZWN1cmUsIGJ1dCBjYW5ub3QgZXZlbiBtYWtlIHRoZSBmaXJzdCBzdGVwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG93YXJkcyBpdC4gRm9yIGhvdyBzaG91bGQgQW50b25pdXMgbWFrZSB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwIHRvd2FyZHMgYXR0YWNoaW5nIHBlb3BsZSB0byBoaW1zZWxmLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90IGV2ZW4gY2FsbCB0aGVtLCB1bmFpZGVkLCBieSB0aGVpciBwcm9wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lcz8gSSwgZm9yIG9uZSwgdGhpbmsgdGhhdCB0aGVyZSBjYW4gYmUgbm8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVyIGZvbGx5IHRoYW4gdG8gaW1hZ2luZSBhIG1hbiBzb2xpY2l0b3VzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmUgeW91IHdob20geW91IGRvbid0IGtub3cgYnkgc2lnaHQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXh0cmFvcmRpbmFyeSBpbmRlZWQgbXVzdCBiZSB0aGUgZmFtZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9saXRpY2FsIHBvc2l0aW9uIGFuZCBleHRlbnQgb2YgdGhlIHB1YmxpYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzIG9mIHRoYXQgbWFuIHdob20gZW50aXJlIHN0cmFuZ2VycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHN1cHBvcnRlcnMgdG8gYmFjayBoaW0sIHdvdWxkIGVsZWN0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmaWNlLiBUaGF0IGEgbWFuIHdpdGhvdXQgcHJpbmNpcGxlIG9yIGVuZXJneSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGRvaW5nIGFueSBnb29kIHNlcnZpY2UsIGFuZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSwgbHlpbmcgdW5kZXIgYSBjbG91ZCBvZiBkaXNjcmVkaXQsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZnJpZW5kcywgc2hvdWxkIGJlYXQgYSBtYW4gZm9ydGlmaWVkIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGV2b3Rpb24gb2YgYSBudW1lcm91cyBjaXJjbGUgYW5kIGJ5IHRoZSBnb29kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBvZiBhbGwsIGNhbm5vdCBwb3NzaWJseSBvY2N1ciBleGNlcHQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3NzIG5lZ2xpZ2VuY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNzQiIC8+IG9mIHlvdXIgcml2YWxzLCB3aG9tIHlvdSBjb3VsZCBub3QgaW5kdWNlLCBpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSB0b29rIHBhaW5zLCB0byBlYXJuIHlvdXIgYWZmZWN0aW9uIGJ5IGhpcyBnb29kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXMsIGFuZCB0byBzZWl6ZSB0aGUgb3Bwb3J0dW5pdHkgb2YgcHV0dGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSB1bmRlciBhbiBvYmxpZ2F0aW9u4oCUbGV0IGhpbSBidXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxseSB1bmRlcnN0YW5kIHRoYXQgeW91IHZhbHVlIGhpbSBoaWdobHksIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgcmVhbGx5IG1lYW4gd2hhdCB5b3Ugc2F5LCB0aGF0IGhlIGlzIG1ha2luZyBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZCBpbnZlc3RtZW50LCBhbmQgdGhhdCB0aGVyZSB3aWxsIGFjY3J1ZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgbm90IG9ubHkgYSBicmllZiBhbmQgZWxlY3Rpb25lZXJpbmcgZnJpZW5kc2hpcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgYSBmaXJtIGFuZCBsYXN0aW5nIG9uZS4gVGhlcmUgd2lsbCBiZSBubyBvbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSBtZSwgaWYgaGUgaGFzIGFueXRoaW5nIGluIGhpbSBhdCBhbGwsIHdobwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgbGV0IHNsaXAgdGhpcyBvcHBvcnR1bml0eSBvZmZlcmVkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoaW5nIGEgZnJpZW5kc2hpcCB3aXRoIHlvdSwgZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYnkgZ29vZCBsdWNrIHlvdSBoYXZlIGNvbXBldGl0b3JzIHdob3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCBpcyBvbmUgdG8gYmUgbmVnbGVjdGVkIG9yIGF2b2lkZWQsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdobyBub3Qgb25seSBhcmUgdW5hYmxlIHRvIHNlY3VyZSB3aGF0IEkgYW0gdXJnaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHRvIHNlY3VyZSwgYnV0IGNhbm5vdCBldmVuIG1ha2UgdGhlIGZpcnN0IHN0ZXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIGl0LiBGb3IgaG93IHNob3VsZCBBbnRvbml1cyBtYWtlIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAgdG93YXJkcyBhdHRhY2hpbmcgcGVvcGxlIHRvIGhpbXNlbGYsIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5ub3QgZXZlbiBjYWxsIHRoZW0sIHVuYWlkZWQsIGJ5IHRoZWlyIHByb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzPyBJLCBmb3Igb25lLCB0aGluayB0aGF0IHRoZXJlIGNhbiBiZSBubwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXIgZm9sbHkgdGhhbiB0byBpbWFnaW5lIGEgbWFuIHNvbGljaXRvdXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZSB5b3Ugd2hvbSB5b3UgZG9uJ3Qga25vdyBieSBzaWdodC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeHRyYW9yZGluYXJ5IGluZGVlZCBtdXN0IGJlIHRoZSBmYW1lLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xpdGljYWwgcG9zaXRpb24gYW5kIGV4dGVudCBvZiB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgb2YgdGhhdCBtYW4gd2hvbSBlbnRpcmUgc3RyYW5nZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgc3VwcG9ydGVycyB0byBiYWNrIGhpbSwgd291bGQgZWxlY3QgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZpY2UuIFRoYXQgYSBtYW4gd2l0aG91dCBwcmluY2lwbGUgb3IgZW5lcmd5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZG9pbmcgYW55IGdvb2Qgc2VydmljZSwgYW5kIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYmlsaXR5LCBseWluZyB1bmRlciBhIGNsb3VkIG9mIGRpc2NyZWRpdCwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBmcmllbmRzLCBzaG91bGQgYmVhdCBhIG1hbiBmb3J0aWZpZWQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZXZvdGlvbiBvZiBhIG51bWVyb3VzIGNpcmNsZSBhbmQgYnkgdGhlIGdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGluaW9uIG9mIGFsbCwgY2Fubm90IHBvc3NpYmx5IG9jY3VyIGV4Y2VwdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvc3MgbmVnbGlnZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['volume 1 appendix a.8'] = ""
translation['volume 1 appendix a.9'] = ""
translation['volume 1 appendix a.10'] = ""
translation['volume 1 appendix a.11'] = ""
translation['volume 1 appendix a.12'] = ""
translation['volume 1 appendix a.13'] = ""
var translation={}
translation['60.1'] = ""
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBCdXQgaXQgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCB0aGF0IGFtb25nIGV2ZW4gc3VjaCBtZW4gYXMgdGhlc2UgdGhlcmUgb2NjdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpb3VzIGRpc3B1dGVzLCBtYW55IHdyb25nZnVsIGFjdHMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkLCBhbmQgaG90bHkgY29udGVzdGVkIGxpdGlnYXRpb24gaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LiBBcyB0aG91Z2ggSSBldmVyIHRob3VnaHQgdGhhdCB5b3UgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSB0byBjb250ZW5kIHdpdGghIEkga25vdyB0aGF0IHRoZSB0cm91YmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZXhjZWVkaW5nbHkgZ3JlYXQsIGFuZCBzdWNoIGFzIGRlbWFuZHMgdGhlIHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVzdCBwcnVkZW5jZTsgYnV0IHJlbWVtYmVyIHRoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcnVkZW5jZSBtdWNoIG1vcmUgdGhhbiBmb3J0dW5lIG9uIHdoaWNoLCBpbiBteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9waW5pb24sIHRoZSByZXN1bHQgb2YgeW91ciB0cm91YmxlIGRlcGVuZHMuIEZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgdHJvdWJsZSBpcyBpdCB0byBnb3Zlcm4gdGhvc2Ugb3ZlciB3aG9tIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBzZXQsIGlmIHlvdSBkbyBidXQgZ292ZXJuIHlvdXJzZWxmPyBUaGF0IG1heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGEgZ3JlYXQgYW5kIGRpZmZpY3VsdCB0YXNrIHRvIG90aGVycywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZWVkIGl0IGlzIG1vc3QgZGlmZmljdWx0OiB0byB5b3UgaXQgaGFzIGFsd2F5cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gdGhlIGVhc2llc3QgdGhpbmcgaW4gdGhlIHdvcmxkLCBhbmQgaW5kZWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gYmUgc28sIGZvciB5b3VyIG5hdHVyYWwgZGlzcG9zaXRpb24gaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNoIHRoYXQsIGV2ZW4gd2l0aG91dCBkaXNjaXBsaW5lLCBpdCBhcHBlYXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJsZSBvZiBzZWxmLWNvbnRyb2w7IHdoZXJlYXMgYSBkaXNjaXBsaW5lIGhhcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBmYWN0LCBiZWVuIGFwcGxpZWQgdGhhdCBtaWdodCBlZHVjYXRlIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmF1bHR5IG9mIGNoYXJhY3RlcnMuIEJ1dCB3aGlsZSB5b3UgcmVzaXN0LCBhcyB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbywgbW9uZXksIHBsZWFzdXJlLCBhbmQgZXZlcnkga2luZCBvZiBkZXNpcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiwgdGhlcmUgd2lsbCwgSSBhbSB0byBiZSB0b2xkLCBiZSBhIHJpc2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG5vdCBiZWluZyBhYmxlIHRvIHN1cHByZXNzIHNvbWUgZnJhdWR1bGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbmtlciBvciBzb21lIHJhdGhlciBvdmVyLWV4dG9ydGlvbmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRheC1jb2xsZWN0b3IhIEZvciBhcyB0byB0aGUgR3JlZWtzLCB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGluaywgYXMgdGhleSBiZWhvbGQgdGhlIGlubm9jZW5jZSBvZiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgLz4geW91ciBsaWZlLCB0aGF0IG9uZSBvZiB0aGUgaGVyb2VzIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeSwgb3IgYSBkZW1pZ29kIGZyb20gaGVhdmVuLCBoYXMgY29tZSBkb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgcHJvdmluY2UuIEFuZCB0aGlzIEkgc2F5LCBub3QgdG8gaW5kdWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHRvIGFjdCB0aHVzLCBidXQgdG8gbWFrZSB5b3UgZ2xhZCB0aGF0IHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpbmcgb3IgaGF2ZSBhY3RlZCBzby4gSXQgaXMgYSBzcGxlbmRpZCB0aGluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiB0aHJlZSB5ZWFycyBpbiBzdXByZW1lIHBvd2VyIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYWxsb3dpbmcgc3RhdHVlLCBwaWN0dXJlLCBwbGF0ZSwgbmFwZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlLCBhbnlvbmUncyBnb29kIGxvb2tzLCBvciBhbnkgb2ZmZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25leeKAlGFsbCBvZiB3aGljaCBhcmUgcGxlbnRpZnVsIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jZeKAlHRvIGNhdXNlIHlvdSB0byBzd2VydmUgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IGFic29sdXRlIGhvbmVzdHkgYW5kIHB1cml0eSBvZiBsaWZlLiBXaGF0IGNhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGltYWdpbmVkIHNvIHN0cmlraW5nIG9yIHNvIGRlc2lyYWJsZSBhcyB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXJ0dWUsIGEgY29tbWFuZCBvdmVyIHRoZSBwYXNzaW9ucywgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYtY29udHJvbCBzdWNoIGFzIHlvdXJzLCBhcmUgbm90IHJlbWFpbmluZyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmtuZXNzIGFuZCBvYnNjdXJpdHksIGJ1dCBoYXZlIGJlZW4gc2V0IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkIGRheWxpZ2h0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGJlZm9yZSB0aGUgZXllcyBvZiBhIGZhbW91cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlLCBhbmQgaW4gdGhlIGhlYXJpbmcgb2YgYWxsIG5hdGlvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVvcGxlcz8gVGhhdCB0aGUgaW5oYWJpdGFudHMgYXJlIG5vdCBiZWluZyBydWluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSB5b3VyIHByb2dyZXNzZXMsIGRyYWluZWQgYnkgeW91ciBjaGFyZ2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnaXRhdGVkIGJ5IHlvdXIgYXBwcm9hY2g/IFRoYXQgdGhlcmUgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWxpZXN0IGpveSwgcHVibGljIGFuZCBwcml2YXRlLCB3aGVyZXNvZXZlciB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21lLCB0aGUgY2l0eSByZWdhcmRpbmcgeW91IGFzIGEgcHJvdGVjdG9yIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBhIHR5cmFudCwgdGhlIHByaXZhdGUgaG91c2UgYXMgYSBndWVzdCBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBwbHVuZGVyZXI/IDwvdHJhbnNsYXRpb24+"
translation['60.3'] = ""
translation['60.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW4gdGhlIGNhc2UsIGhvd2V2ZXIsIG9mIHRob3NlIG9mIHlvdXIgcGVyc29uYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFmZiBvciBvZmZpY2lhbCBhdHRlbmRhbnRzIHdob20geW91IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBzZWxlY3RlZCB0byBiZSBhYm91dCB5b3XigJR3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgdXN1YWxseSBzcG9rZW4gb2YgYXMgYSBraW5kIG9mIHByYWV0b3IncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvaG9ydOKAlHdlIG11c3Qgdm91Y2gsIG5vdCBvbmx5IGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHMsIGJ1dCBldmVuIGZvciB0aGVpciB3b3Jkcy4gQnV0IHRob3NlIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB5b3UgYXJlIHRoZSBzb3J0IG9mIG1lbiBvZiB3aG9tIHlvdSBtYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbHkgYmUgZm9uZCB3aGVuIHRoZXkgYXJlIGFjdGluZyByaWdodGx5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9tIHlvdSBtYXkgdmVyeSBlYXNpbHkgY2hlY2sgd2hlbiB0aGV5IHNob3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN1ZmZpY2llbnQgcmVnYXJkIGZvciB5b3VyIHJlcHV0YXRpb24uIEJ5IHRoZXNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geW91IHdlcmUgcmF3IHRvIHRoZSB3b3JrLCB5b3VyIGZyYW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zaXRpb24gbWlnaHQgcG9zc2libHkgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWTigJRmb3IgdGhlIGJldHRlciBhIG1hbiBpcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXNzIGVhc2lseSBkb2VzIGhlIHN1c3BlY3Qgb3RoZXJzIG9mIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFk4oCUbm93LCBob3dldmVyLCBsZXQgdGhpcyB0aGlyZCB5ZWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyBhbiBpbnRlZ3JpdHkgYXMgcGVyZmVjdCBhcyB0aGUgdHdvIGZvcm1lciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgc3RpbGwgbW9yZSB3YXJ5IGFuZCB2aWdpbGFudC4gTGlzdGVuIHRvIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmx5IHdoaWNoIHlvdSBhcmUgc3VwcG9zZWQgdG8gbGlzdGVuIHRvOyBkb24ndAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5b3VyIGVhcnMgYmUgb3BlbiB0byB3aGlzcGVyZWQgZmFsc2Vob29kcyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdGVkIHN1Z2dlc3Rpb25zLiBEb24ndCBsZXQgeW91ciBzaWduZXQgcmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGEgbWVyZSBpbXBsZW1lbnQsIGJ1dCwgYXMgaXQgd2VyZSwgeW91ciBzZWNvbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmOiBub3QgdGhlIG1pbmlzdGVyIG9mIGFub3RoZXIncyB3aWxsLCBidXQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdG5lc3Mgb2YgeW91ciBvd24uIExldCB5b3VyIG1hcnNoYWwgaG9sZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5rIHdoaWNoIG91ciBhbmNlc3RvcnMgd2lzaGVkIGhpbSB0byBob2xkLCB3aG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9va2luZyB1cG9uIHRoaXMgcGxhY2UgYXMgbm90IG9uZSBvZiBwcm9maXQsIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGxhYm91ciBhbmQgZHV0eSwgc2NhcmNlbHkgZXZlciBjb25mZXJyZWQgaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cG9uIGFueSBidXQgdGhlaXIgZnJlZWRtZW4sIHdob20gdGhleSBpbmRlZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVkIGFsbW9zdCBhcyBhYnNvbHV0ZWx5IGFzIHRoZWlyIHNsYXZlcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZXQgdGhlIGxpY3RvciBiZSB0aGUgZGlzcGVuc2VyIG9mIHlvdXIgY2xlbWVuY3ksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGhpcyBvd247IGFuZCBsZXQgdGhlIGZhc2NlcyBhbmQgYXhlcyB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgY2FycnkgYmVmb3JlIHlvdSBjb25zdGl0dXRlIGVuc2lnbnMgcmF0aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuayB0aGFuIG9mIHBvd2VyLiBMZXQgaXQsIGluIGZhY3QsIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGtub3duIHRvIHRoZSB3aG9sZSBwcm92aW5jZSB0aGF0IHRoZSBsaWZlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBmYW1lLCBhbmQgZm9ydHVuZXMgb2YgYWxsIG92ZXIgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzaWRlIGFyZSBleGNlZWRpbmdseSBkZWFyIHRvIHlvdS4gRmluYWxseSwgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgYmUgYmVsaWV2ZWQgdGhhdCB5b3Ugd2lsbCwgaWYgeW91IGRldGVjdCBpdCwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0aWxlIG5vdCBvbmx5IHRvIHRob3NlIHdobyBoYXZlIGFjY2VwdGVkIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmliZSwgYnV0IHRvIHRob3NlIGFsc28gd2hvIGhhdmUgZ2l2ZW4gaXQuIEFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIG5vIG9uZSB3aWxsIGdpdmUgYW55dGhpbmcsIGlmIGl0IGlzIG1hZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWl0ZSBjbGVhciB0aGF0IG5vdGhpbmcgaXMgdXN1YWxseSBvYnRhaW5lZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHRocm91Z2ggdGhvc2Ugd2hvIHByZXRlbmQgdG8gYmUgdmVyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZmx1ZW50aWFsIHdpdGggeW91LiBOb3QsIGhvd2V2ZXIsIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IG9mIHRoaXMgZGlzY291cnNlIGlzIHRvIG1ha2UgeW91IG92ZXItaGFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBzdXNwaWNpb3VzIHRvd2FyZHMgeW91ciBzdGFmZi4gRm9yIGlmIGFueSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW0gaW4gdGhlIGNvdXJzZSBvZiB0aGUgbGFzdCB0d28geWVhcnMgaGFzIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGVuIHVuZGVyIHN1c3BpY2lvbiBvZiByYXBhY2l0eSwgYXMgSSBhbSB0b2xkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQgQ2Flc2l1cyBhbmQgQ2hhZXJpcHB1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYWJlb+KAlGFuZCB0aGluayBpdCB0cnVlLCBiZWNhdXNlIEkga25vdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW3igJR0aGVyZSBpcyBubyBhdXRob3JpdHksIEkgdGhpbmssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggbWF5IG5vdCBiZSBlbnRydXN0ZWQgdG8gdGhlbSwgYW5kIG5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZSB3aGljaCBtYXkgbm90IGJlIHBsYWNlZCBpbiB0aGVtIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdXRtb3N0IHByb3ByaWV0eSwgYW5kIGluIGFueW9uZSBlbHNlIGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtLiBCdXQgaWYgdGhlcmUgaXMgYW55b25lIG9mIHdob20geW91IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGhhZCByZWFzb24gdG8gZG91YnQsIG9yIGNvbmNlcm5pbmcgd2hvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIG1hZGUgc29tZSBkaXNjb3ZlcnksIGluIHN1Y2ggYSBtYW4gcGxhY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubyBjb25maWRlbmNlLCBpbnRydXN0IGhpbSB3aXRoIG5vIHBhcnRpY2xlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciByZXB1dGF0aW9uLiBWLiBJZiwgaG93ZXZlciwgeW91IGhhdmUgZm91bmQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmluY2UgaXRzZWxmIGFueW9uZSwgaGl0aGVydG8gdW5rbm93biB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzLCB3aG8gaGFzIG1hZGUgaGlzIHdheSBpbnRvIGludGltYWN5IHdpdGggeW91LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2UgY2FyZSBob3cgbXVjaCBjb25maWRlbmNlIHlvdSByZXBvc2UgaW4gaGltOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB0aGF0IHRoZXJlIG1heSBub3QgYmUgbWFueSBnb29kIHByb3ZpbmNpYWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCwgdGhvdWdoIHdlIG1heSBob3BlIHNvLCBpdCBpcyByaXNreSB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlLiBGb3IgZXZlcnlvbmUncyByZWFsIGNoYXJhY3RlciBpcyBjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgbWFueSB3cmFwcGluZ3Mgb2YgcHJldGVuY2UgYW5kIGlzIGNvbmNlYWxlZCBieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEga2luZCBvZiB2ZWlsOiBmYWNlLCBleWVzLCBleHByZXNzaW9uIHZlcnkgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWUsIHNwZWVjaCBtb3N0IG9mdGVuIG9mIGFsbC4gV2hlcmVmb3JlLCBob3cgY2FuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IGV4cGVjdCB0byBmaW5kIGluIHRoYXQgY2xhc3MgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBjbGFzcyBvZiBSb21hbnMgd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmFjdGljYWxseSBiZWNvbWUgcHJvdmluY2lhbHMuIDwvbm90ZT4gYW55IHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBmb3JlZ29pbmcgZm9yIHRoZSBzYWtlIG9mIG1vbmV5IGFsbCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2UgY2FuIHNjYXJjZWx5IHRlYXIgb3Vyc2VsdmVzIGF3YXksIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgcGxhY2U9InVuc3BlY2lmaWVkIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gYW5kIGl0cyBzb2NpZXR5IGFuZCBpbnRlcmVzdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ub3RlPiB3aWxsIHlldCBsb3ZlIHlvdSBzaW5jZXJlbHkgYW5kIG5vdCBtZXJlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV0ZW5kIHRvIGRvIHNvIGZyb20gaW50ZXJlc3RlZCBtb3RpdmVzPyBJIHRoaW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVlZCwgaXQgaXMgYSBoYXJkIHRhc2sgdG8gZmluZCBzdWNoIG1lbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGlmIHdlIG5vdGljZSB0aGF0IHRoZSBzYW1lIHBlcnNvbnMgY2FyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgZm9yIGFsbW9zdCBhbnkgbWFuIG91dCBvZiBvZmZpY2UsIHlldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5cyB3aXRoIG9uZSBjb25zZW50IHNob3cgYWZmZWN0aW9uIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmFldG9ycy4gQnV0IG9mIHRoaXMgY2xhc3MsIGlmIGJ5IGNoYW5jZSB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQgYW55IG9uZSB0byBiZSBmb25kZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3XigJRmb3IgaXQgbWF5IHNvIGhhcHBlbuKAlHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG9mZmljZSwgc3VjaCBhIG1hbiBpbmRlZWQgZ2xhZGx5IGFkbWl0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgLz4geW91ciBsaXN0IG9mIGZyaWVuZHM6IGJ1dCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsIHRvIHBlcmNlaXZlIHRoYXQsIHRoZXJlIGlzIG5vIENsYXNzIG9mIHBlb3BsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBtdXN0IGJlIG1vcmUgb24geW91ciBndWFyZCBhZ2FpbnN0IGFkbWl0dGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGludGltYWN5LCBqdXN0IGJlY2F1c2UgdGhleSBhcmUgYWNxdWFpbnRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSB3YXlzIG9mIG1ha2luZyBtb25leSwgZG8gZXZlcnl0aGluZyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2FrZSBvZiBpdCwgYW5kIGhhdmUgbm8gY29uc2lkZXJhdGlvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvZiBhIG1hbiB3aXRoIHdob20gdGhleSBhcmUgbm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluZWQgdG8gcGFzcyB0aGVpciBsaXZlcy4gQW5kIGV2ZW4gYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHRoZW1zZWx2ZXMgeW91IG11c3QgYmUgb24geW91ciBndWFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgYWRtaXR0aW5nIGNsb3NlIGludGltYWNpZXMsIGV4Y2VwdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9mIHRoZSB2ZXJ5IGZldywgaWYgc3VjaCBhcmUgdG8gYmUgZm91bmQsIHdobwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSB3b3J0aHkgb2YgYW5jaWVudCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIEFzIHRoaW5ncyBub3cgc3RhbmQsIGluZGVlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b28gbWFueSBvZiB0aGVtIGFyZSB1bnRydXN0d29ydGh5LCBmYWxzZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nob29sZWQgYnkgbG9uZyBzZXJ2aXR1ZGUgaW4gdGhlIGFydHMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYXZhZ2FudCBhZHVsYXRpb24uIE15IGFkdmljZSBpcyB0aGF0IHRoZXNlIG1lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBhbGwgYmUgZW50ZXJ0YWluZWQgd2l0aCBjb3VydGVzeSwgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSB0aWVzIG9mIGhvc3BpdGFsaXR5IG9yIGZyaWVuZHNoaXAgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSBiZSBmb3JtZWQgd2l0aCB0aGUgYmVzdCBvZiB0aGVtOiBleGNlc3NpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRpbWFjaWVzIHdpdGggdGhlbSBhcmUgbm90IHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVzdHdvcnRoeeKAlGZvciB0aGV5IGRvIG5vdCB2ZW50dXJlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Bwb3NlIG91ciB3aXNoZXPigJRhbmQgdGhleSBhcmUgbm90IG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZWFsb3VzIG9mIG91ciBjb3VudHJ5bWVuLCBidXQgb2YgdGhlaXIgb3duIGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VsbC4gVkkuIEFuZCBub3csIGNvbnNpZGVyaW5nIHRoZSBjYXV0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmUgdGhhdCBJIHdvdWxkIHNob3cgaW4gbWF0dGVycyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZOKAlGluIHdoaWNoIEkgZmVhciBJIG1heSBiZSBzb21ld2hhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXItc2V2ZXJl4oCUd2hhdCBkbyB5b3Ugc3VwcG9zZSBteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRpbWVudHMgYXJlIGluIHJlZ2FyZCB0byBzbGF2ZXM/IFVwb24gdGhlc2Ugd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBrZWVwIGEgaG9sZCBpbiBhbGwgcGxhY2VzLCBidXQgZXNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBwcm92aW5jZXMuIE9uIHRoaXMgaGVhZCBtYW55IHJ1bGVzIG1heSBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhaWQgZG93biwgYnV0IHRoaXMgaXMgYXQgb25jZSB0aGUgc2hvcnRlc3QgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9zdCBlYXNpbHkgbWFpbnRhaW5lZOKAlHRoYXQgdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWhhdmUgZHVyaW5nIHlvdXIgcHJvZ3Jlc3NlcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+IGFzIHRob3VnaCB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHRyYXZlbGxpbmcgb24gdGhlIEFwcGlhbiB3YXksIGFuZCBub3Qgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgbWFrZXMgYW55IGRpZmZlcmVuY2Ugd2hldGhlciB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTkiPlRyYWxsZXM8L3BsYWNlTmFtZT4gb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxGb3JtaWFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxGb3JtaWFlIj5Gb3JtaWFlPC9wbGFjZU5hbWU+LiBCdXQgaWYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW4sIGFueSBvbmUgb2YgeW91ciBzbGF2ZXMgaXMgY29uc3BpY3VvdXNseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydXN0d29ydGh5LCBlbXBsb3kgaGltIGluIHlvdXIgZG9tZXN0aWMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBhZmZhaXJzOyBidXQgaW4gYWZmYWlycyBwZXJ0YWluaW5nIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZpY2UgYXMgZ292ZXJub3IsIG9yIGluIGFueSBkZXBhcnRtZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLCBkbyBub3QgbGV0IGhpbSBsYXkgYSBmaW5nZXIuIEZvciBtYW55CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpbmdzIHdoaWNoIG1heSwgd2l0aCBwZXJmZWN0IHByb3ByaWV0eSwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbi10cnVzdGVkIHRvIHNsYXZlcywgbXVzdCB5ZXQgbm90IGJlIHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnVzdGVkLCBmb3IgdGhlIHNha2Ugb2YgYXZvaWRpbmcgdGFsayBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0aWxlIHJlbWFyay4gQnV0IG15IGRpc2NvdXJzZSwgSSBrbm93IG5vdCBob3csCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzIHNsaXBwZWQgaW50byB0aGUgZGlkYWN0aWMgdmVpbiwgdGhvdWdoIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3Qgd2hhdCBJIHByb3Bvc2VkIHRvIG15c2VsZiBvcmlnaW5hbGx5LiBGb3Igd2hhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0IGhhdmUgSSB0byBiZSBsYXlpbmcgZG93biBydWxlcyBmb3Igb25lIHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJIGFtIGZ1bGx5IGF3YXJlLCBpbiB0aGlzIHN1YmplY3QgZXNwZWNpYWxseSwgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgbXkgaW5mZXJpb3IgaW4gd2lzZG9tLCB3aGlsZSBpbiBleHBlcmllbmNlIGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZXZlbiBteSBzdXBlcmlvcj8gWWV0LCBhZnRlciBhbGwsIGlmIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zIGhhZCB0aGUgYWRkaXRpb25hbCB3ZWlnaHQgb2YgbXkgYXBwcm92YWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSSA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgLz4gdGhvdWdodCB0aGF0IHRoZXkgd291bGQgc2VlbSBtb3JlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0b3J5IHRvIHlvdXJzZWxmLiBXaGVyZWZvcmUsIGxldCB0aGVzZSBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmb3VuZGF0aW9ucyBvbiB3aGljaCB5b3VyIHB1YmxpYyBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0czogZmlyc3QgYW5kIGZvcmVtb3N0IHlvdXIgb3duIGhvbmVzdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi1jb250cm9sLCB0aGVuIHRoZSBzY3J1cHVsb3VzIGNvbmR1Y3Qgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBzdGFmZiwgdGhlIGV4Y2VlZGluZ2x5IGNhdXRpb3VzIGFuZCBjYXJlZnVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uIGluIHJlZ2FyZCB0byBpbnRpbWFjaWVzIHdpdGggcHJvdmluY2lhbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgR3JlZWtzLCB0aGUgc3RyaWN0IGFuZCB1bmJlbmRpbmcgZ292ZXJubWVudCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgc2xhdmVzLiBUaGVzZSBhcmUgY3JlZGl0YWJsZSBldmVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmR1Y3Qgb2Ygb3VyIHByaXZhdGUgYW5kIGV2ZXJ5ZGF5IGJ1c2luZXNzOiBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2ggYW4gaW1wb3J0YW50IGdvdmVybm1lbnQsIHdoZXJlIG1vcmFscyBhcmUgc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJhc2VkIGFuZCB0aGUgcHJvdmluY2UgaGFzIHN1Y2ggYSBjb3JydXB0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlLCB0aGV5IG11c3QgbmVlZHMgc2VlbSBkaXZpbmUuIFN1Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGVzIGFuZCBjb25kdWN0IG9uIHlvdXIgcGFydCBhcmUgc3VmZmljaWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGp1c3RpZnkgdGhlIHN0cmljdG5lc3Mgd2hpY2ggeW91IGhhdmUgZGlzcGxheWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gc29tZSBhY3RzIG9mIGFkbWluaXN0cmF0aW9uLCBvd2luZyB0byB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBlbmNvdW50ZXJlZCBjZXJ0YWluIHBlcnNvbmFsIGRpc3B1dGVzIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVhdCBzYXRpc2ZhY3Rpb24sIHVubGVzcywgaW5kZWVkLCB5b3Ugc3VwcG9zZSBtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIGFubm95ZWQgYnkgdGhlIGNvbXBsYWludHMgb2YgYSBmZWxsb3cgbGlrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhY29uaXVz4oCUd2hvIGlzIG5vdCBldmVuIGEgR3JlZWssIGJ1dCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxpdHkgYSBNeXNpYW4gb3IgUGhyeWdpYW7igJRvciBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkcyBvZiBUdXNjZW5pdXMsIGEgbWFkbWFuIGFuZCBhIGtuYXZlLCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvc2UgYWJvbWluYWJsZSBqYXdzIHlvdSBzbmF0Y2hlZCB0aGUgZnJ1aXRzIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IGluZmFtb3VzIHBpZWNlIG9mIGV4dG9ydGlvbiB3aXRoIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUganVzdGljZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49Ijc1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGtub3duIHRvIHRoZSB3aG9sZSBwcm92aW5jZSB0aGF0IHRoZSBsaWZlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBmYW1lLCBhbmQgZm9ydHVuZXMgb2YgYWxsIG92ZXIgd2hvbSB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzaWRlIGFyZSBleGNlZWRpbmdseSBkZWFyIHRvIHlvdS4gRmluYWxseSwgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgYmUgYmVsaWV2ZWQgdGhhdCB5b3Ugd2lsbCwgaWYgeW91IGRldGVjdCBpdCwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0aWxlIG5vdCBvbmx5IHRvIHRob3NlIHdobyBoYXZlIGFjY2VwdGVkIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmliZSwgYnV0IHRvIHRob3NlIGFsc28gd2hvIGhhdmUgZ2l2ZW4gaXQuIEFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlZWQsIG5vIG9uZSB3aWxsIGdpdmUgYW55dGhpbmcsIGlmIGl0IGlzIG1hZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWl0ZSBjbGVhciB0aGF0IG5vdGhpbmcgaXMgdXN1YWxseSBvYnRhaW5lZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHRocm91Z2ggdGhvc2Ugd2hvIHByZXRlbmQgdG8gYmUgdmVyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZmx1ZW50aWFsIHdpdGggeW91LiBOb3QsIGhvd2V2ZXIsIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IG9mIHRoaXMgZGlzY291cnNlIGlzIHRvIG1ha2UgeW91IG92ZXItaGFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBzdXNwaWNpb3VzIHRvd2FyZHMgeW91ciBzdGFmZi4gRm9yIGlmIGFueSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW0gaW4gdGhlIGNvdXJzZSBvZiB0aGUgbGFzdCB0d28geWVhcnMgaGFzIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGVuIHVuZGVyIHN1c3BpY2lvbiBvZiByYXBhY2l0eSwgYXMgSSBhbSB0b2xkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQgQ2Flc2l1cyBhbmQgQ2hhZXJpcHB1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYWJlb+KAlGFuZCB0aGluayBpdCB0cnVlLCBiZWNhdXNlIEkga25vdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW3igJR0aGVyZSBpcyBubyBhdXRob3JpdHksIEkgdGhpbmssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggbWF5IG5vdCBiZSBlbnRydXN0ZWQgdG8gdGhlbSwgYW5kIG5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZSB3aGljaCBtYXkgbm90IGJlIHBsYWNlZCBpbiB0aGVtIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdXRtb3N0IHByb3ByaWV0eSwgYW5kIGluIGFueW9uZSBlbHNlIGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtLiBCdXQgaWYgdGhlcmUgaXMgYW55b25lIG9mIHdob20geW91IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGhhZCByZWFzb24gdG8gZG91YnQsIG9yIGNvbmNlcm5pbmcgd2hvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIG1hZGUgc29tZSBkaXNjb3ZlcnksIGluIHN1Y2ggYSBtYW4gcGxhY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubyBjb25maWRlbmNlLCBpbnRydXN0IGhpbSB3aXRoIG5vIHBhcnRpY2xlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciByZXB1dGF0aW9uLiBWLiBJZiwgaG93ZXZlciwgeW91IGhhdmUgZm91bmQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmluY2UgaXRzZWxmIGFueW9uZSwgaGl0aGVydG8gdW5rbm93biB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzLCB3aG8gaGFzIG1hZGUgaGlzIHdheSBpbnRvIGludGltYWN5IHdpdGggeW91LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2UgY2FyZSBob3cgbXVjaCBjb25maWRlbmNlIHlvdSByZXBvc2UgaW4gaGltOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB0aGF0IHRoZXJlIG1heSBub3QgYmUgbWFueSBnb29kIHByb3ZpbmNpYWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCwgdGhvdWdoIHdlIG1heSBob3BlIHNvLCBpdCBpcyByaXNreSB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlLiBGb3IgZXZlcnlvbmUncyByZWFsIGNoYXJhY3RlciBpcyBjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgbWFueSB3cmFwcGluZ3Mgb2YgcHJldGVuY2UgYW5kIGlzIGNvbmNlYWxlZCBieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEga2luZCBvZiB2ZWlsOiBmYWNlLCBleWVzLCBleHByZXNzaW9uIHZlcnkgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWUsIHNwZWVjaCBtb3N0IG9mdGVuIG9mIGFsbC4gV2hlcmVmb3JlLCBob3cgY2FuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IGV4cGVjdCB0byBmaW5kIGluIHRoYXQgY2xhc3MgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiBwbGFjZT0idW5zcGVjaWZpZWQiPlRoZSBjbGFzcyBvZiBSb21hbnMgd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmFjdGljYWxseSBiZWNvbWUgcHJvdmluY2lhbHMuIDwvbm90ZT4gYW55IHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBmb3JlZ29pbmcgZm9yIHRoZSBzYWtlIG9mIG1vbmV5IGFsbCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2UgY2FuIHNjYXJjZWx5IHRlYXIgb3Vyc2VsdmVzIGF3YXksIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgcGxhY2U9InVuc3BlY2lmaWVkIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gYW5kIGl0cyBzb2NpZXR5IGFuZCBpbnRlcmVzdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ub3RlPiB3aWxsIHlldCBsb3ZlIHlvdSBzaW5jZXJlbHkgYW5kIG5vdCBtZXJlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV0ZW5kIHRvIGRvIHNvIGZyb20gaW50ZXJlc3RlZCBtb3RpdmVzPyBJIHRoaW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVlZCwgaXQgaXMgYSBoYXJkIHRhc2sgdG8gZmluZCBzdWNoIG1lbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGlmIHdlIG5vdGljZSB0aGF0IHRoZSBzYW1lIHBlcnNvbnMgY2FyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgZm9yIGFsbW9zdCBhbnkgbWFuIG91dCBvZiBvZmZpY2UsIHlldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5cyB3aXRoIG9uZSBjb25zZW50IHNob3cgYWZmZWN0aW9uIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmFldG9ycy4gQnV0IG9mIHRoaXMgY2xhc3MsIGlmIGJ5IGNoYW5jZSB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQgYW55IG9uZSB0byBiZSBmb25kZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3XigJRmb3IgaXQgbWF5IHNvIGhhcHBlbuKAlHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG9mZmljZSwgc3VjaCBhIG1hbiBpbmRlZWQgZ2xhZGx5IGFkbWl0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFJvbWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFJvbWUiPlJvbWU8L3BsYWNlTmFtZT4gYW5kIGl0cyBzb2NpZXR5IGFuZCBpbnRlcmVzdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzYiIC8+IHlvdXIgbGlzdCBvZiBmcmllbmRzOiBidXQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCB0byBwZXJjZWl2ZSB0aGF0LCB0aGVyZSBpcyBubyBDbGFzcyBvZiBwZW9wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgbXVzdCBiZSBtb3JlIG9uIHlvdXIgZ3VhcmQgYWdhaW5zdCBhZG1pdHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBpbnRpbWFjeSwganVzdCBiZWNhdXNlIHRoZXkgYXJlIGFjcXVhaW50ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgd2F5cyBvZiBtYWtpbmcgbW9uZXksIGRvIGV2ZXJ5dGhpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNha2Ugb2YgaXQsIGFuZCBoYXZlIG5vIGNvbnNpZGVyYXRpb24gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHV0YXRpb24gb2YgYSBtYW4gd2l0aCB3aG9tIHRoZXkgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmVkIHRvIHBhc3MgdGhlaXIgbGl2ZXMuIEFuZCBldmVuIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVrcyB0aGVtc2VsdmVzIHlvdSBtdXN0IGJlIG9uIHlvdXIgZ3VhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGFkbWl0dGluZyBjbG9zZSBpbnRpbWFjaWVzLCBleGNlcHQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvZiB0aGUgdmVyeSBmZXcsIGlmIHN1Y2ggYXJlIHRvIGJlIGZvdW5kLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgd29ydGh5IG9mIGFuY2llbnQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LiBBcyB0aGluZ3Mgbm93IHN0YW5kLCBpbmRlZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vIG1hbnkgb2YgdGhlbSBhcmUgdW50cnVzdHdvcnRoeSwgZmFsc2UsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaG9vbGVkIGJ5IGxvbmcgc2Vydml0dWRlIGluIHRoZSBhcnRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmF2YWdhbnQgYWR1bGF0aW9uLiBNeSBhZHZpY2UgaXMgdGhhdCB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgYWxsIGJlIGVudGVydGFpbmVkIHdpdGggY291cnRlc3ksIGJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UgdGllcyBvZiBob3NwaXRhbGl0eSBvciBmcmllbmRzaGlwIHNob3VsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgYmUgZm9ybWVkIHdpdGggdGhlIGJlc3Qgb2YgdGhlbTogZXhjZXNzaXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50aW1hY2llcyB3aXRoIHRoZW0gYXJlIG5vdCB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1c3R3b3J0aHnigJRmb3IgdGhleSBkbyBub3QgdmVudHVyZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wcG9zZSBvdXIgd2lzaGVz4oCUYW5kIHRoZXkgYXJlIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamVhbG91cyBvZiBvdXIgY291bnRyeW1lbiwgYnV0IG9mIHRoZWlyIG93biBhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlbGwuIFZJLiBBbmQgbm93LCBjb25zaWRlcmluZyB0aGUgY2F1dGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJlIHRoYXQgSSB3b3VsZCBzaG93IGluIG1hdHRlcnMgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmTigJRpbiB3aGljaCBJIGZlYXIgSSBtYXkgYmUgc29tZXdoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyLXNldmVyZeKAlHdoYXQgZG8geW91IHN1cHBvc2UgbXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW50aW1lbnRzIGFyZSBpbiByZWdhcmQgdG8gc2xhdmVzPyBVcG9uIHRoZXNlIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8ga2VlcCBhIGhvbGQgaW4gYWxsIHBsYWNlcywgYnV0IGVzcGVjaWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcHJvdmluY2VzLiBPbiB0aGlzIGhlYWQgbWFueSBydWxlcyBtYXkgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWlkIGRvd24sIGJ1dCB0aGlzIGlzIGF0IG9uY2UgdGhlIHNob3J0ZXN0IGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vc3QgZWFzaWx5IG1haW50YWluZWTigJR0aGF0IHRoZXkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZlIGR1cmluZyB5b3VyIHByb2dyZXNzZXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiBhcyB0aG91Z2ggeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSB0cmF2ZWxsaW5nIG9uIHRoZSBBcHBpYW4gd2F5LCBhbmQgbm90IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IG1ha2VzIGFueSBkaWZmZXJlbmNlIHdoZXRoZXIgdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM1OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzU5Ij5UcmFsbGVzPC9wbGFjZU5hbWU+IG9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRm9ybWlhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRm9ybWlhZSI+Rm9ybWlhZTwvcGxhY2VOYW1lPi4gQnV0IGlmLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluLCBhbnkgb25lIG9mIHlvdXIgc2xhdmVzIGlzIGNvbnNwaWN1b3VzbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVzdHdvcnRoeSwgZW1wbG95IGhpbSBpbiB5b3VyIGRvbWVzdGljIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGUgYWZmYWlyczsgYnV0IGluIGFmZmFpcnMgcGVydGFpbmluZyB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmaWNlIGFzIGdvdmVybm9yLCBvciBpbiBhbnkgZGVwYXJ0bWVudCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSwgZG8gbm90IGxldCBoaW0gbGF5IGEgZmluZ2VyLiBGb3IgbWFueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaW5ncyB3aGljaCBtYXksIHdpdGggcGVyZmVjdCBwcm9wcmlldHksIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4tdHJ1c3RlZCB0byBzbGF2ZXMsIG11c3QgeWV0IG5vdCBiZSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ1c3RlZCwgZm9yIHRoZSBzYWtlIG9mIGF2b2lkaW5nIHRhbGsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdGlsZSByZW1hcmsuIEJ1dCBteSBkaXNjb3Vyc2UsIEkga25vdyBub3QgaG93LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcyBzbGlwcGVkIGludG8gdGhlIGRpZGFjdGljIHZlaW4sIHRob3VnaCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IHdoYXQgSSBwcm9wb3NlZCB0byBteXNlbGYgb3JpZ2luYWxseS4gRm9yIHdoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodCBoYXZlIEkgdG8gYmUgbGF5aW5nIGRvd24gcnVsZXMgZm9yIG9uZSB3aG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSSBhbSBmdWxseSBhd2FyZSwgaW4gdGhpcyBzdWJqZWN0IGVzcGVjaWFsbHksIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IG15IGluZmVyaW9yIGluIHdpc2RvbSwgd2hpbGUgaW4gZXhwZXJpZW5jZSBoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGV2ZW4gbXkgc3VwZXJpb3I/IFlldCwgYWZ0ZXIgYWxsLCBpZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyBoYWQgdGhlIGFkZGl0aW9uYWwgd2VpZ2h0IG9mIG15IGFwcHJvdmFsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNzciIC8+IHRob3VnaHQgdGhhdCB0aGV5IHdvdWxkIHNlZW0gbW9yZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdG9yeSB0byB5b3Vyc2VsZi4gV2hlcmVmb3JlLCBsZXQgdGhlc2UgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZm91bmRhdGlvbnMgb24gd2hpY2ggeW91ciBwdWJsaWMgY2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdHM6IGZpcnN0IGFuZCBmb3JlbW9zdCB5b3VyIG93biBob25lc3R5IGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYtY29udHJvbCwgdGhlbiB0aGUgc2NydXB1bG91cyBjb25kdWN0IG9mIGFsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgc3RhZmYsIHRoZSBleGNlZWRpbmdseSBjYXV0aW91cyBhbmQgY2FyZWZ1bAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiBpbiByZWdhcmQgdG8gaW50aW1hY2llcyB3aXRoIHByb3ZpbmNpYWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIEdyZWVrcywgdGhlIHN0cmljdCBhbmQgdW5iZW5kaW5nIGdvdmVybm1lbnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHNsYXZlcy4gVGhlc2UgYXJlIGNyZWRpdGFibGUgZXZlbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kdWN0IG9mIG91ciBwcml2YXRlIGFuZCBldmVyeWRheSBidXNpbmVzczogaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNoIGFuIGltcG9ydGFudCBnb3Zlcm5tZW50LCB3aGVyZSBtb3JhbHMgYXJlIHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGViYXNlZCBhbmQgdGhlIHByb3ZpbmNlIGhhcyBzdWNoIGEgY29ycnVwdGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZmx1ZW5jZSwgdGhleSBtdXN0IG5lZWRzIHNlZW0gZGl2aW5lLiBTdWNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGxlcyBhbmQgY29uZHVjdCBvbiB5b3VyIHBhcnQgYXJlIHN1ZmZpY2llbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBqdXN0aWZ5IHRoZSBzdHJpY3RuZXNzIHdoaWNoIHlvdSBoYXZlIGRpc3BsYXllZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHNvbWUgYWN0cyBvZiBhZG1pbmlzdHJhdGlvbiwgb3dpbmcgdG8gd2hpY2ggSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgZW5jb3VudGVyZWQgY2VydGFpbiBwZXJzb25hbCBkaXNwdXRlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXQgc2F0aXNmYWN0aW9uLCB1bmxlc3MsIGluZGVlZCwgeW91IHN1cHBvc2UgbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBhbm5veWVkIGJ5IHRoZSBjb21wbGFpbnRzIG9mIGEgZmVsbG93IGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYWNvbml1c+KAlHdobyBpcyBub3QgZXZlbiBhIEdyZWVrLCBidXQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsaXR5IGEgTXlzaWFuIG9yIFBocnlnaWFu4oCUb3IgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMgb2YgVHVzY2VuaXVzLCBhIG1hZG1hbiBhbmQgYSBrbmF2ZSwgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob3NlIGFib21pbmFibGUgamF3cyB5b3Ugc25hdGNoZWQgdGhlIGZydWl0cyBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9zdCBpbmZhbW91cyBwaWVjZSBvZiBleHRvcnRpb24gd2l0aCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlIGp1c3RpY2UuIDwvdHJhbnNsYXRpb24+"
translation['60.7'] = ""
translation['60.8'] = ""
translation['60.9'] = ""
translation['60.10'] = ""
translation['60.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhvd2V2ZXIsIHRvIHN1Y2ggYSByZXNvbHV0aW9uIGFuZCBkZWxpYmVyYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5IG9uIHlvdXIgcGFydCB0aGUgZ3JlYXQgb2JzdGFjbGUgYXJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj46IGZvciwgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgLz4gd2Ugb3Bwb3NlIHRoZW0sIHdlIHNoYWxsIGFsaWVuYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBvdXJzZWx2ZXMgYW5kIGZyb20gdGhlIFJlcHVibGljIGFuIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFzIGRvbmUgdXMgbW9zdCBleGNlbGxlbnQgc2VydmljZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFzIGJlZW4gYnJvdWdodCBpbnRvIHN5bXBhdGh5IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVwdWJsaWMgYnkgb3VyIG1lYW5zOyBpZiwgb24gdGhlIG90aGVyIGhhbmQsIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGx5IHdpdGggdGhlbSBpbiBldmVyeSBjYXNlLCB3ZSBzaGFsbCBhbGxvdyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBydWluIG9mIHRob3NlIHdob3NlIGludGVyZXN0cywgdG8gc2F5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBvZiB0aGVpciBwcmVzZXJ2YXRpb24sIHdlIGFyZSBib3VuZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHQuIFRoaXMgaXMgdGhlIG9uZSBkaWZmaWN1bHR5LCBpZiB3ZSBsb29rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRoaW5nIGZhaXJseSBpbiB0aGUgZmFjZSwgaW4geW91ciB3aG9sZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQuIEZvciBkaXNpbnRlcmVzdGVkIGNvbmR1Y3Qgb24gb25lJ3Mgb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydCwgdGhlIHN1cHByZXNzaW9uIG9mIGFsbCBpbm9yZGluYXRlIGRlc2lyZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGtlZXBpbmcgYSBjaGVjayB1cG9uIG9uZSdzIHN0YWZmLCBjb3VydGVzeSBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJpbmcgY2F1c2VzLCBpbiBsaXN0ZW5pbmcgdG8gYW5kIGFkbWl0dGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1aXRvcuKAlGFsbCB0aGlzIGlzIHJhdGhlciBhIHF1ZXN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGl0IHRoYW4gb2YgZGlmZmljdWx0eTogZm9yIGl0IGRvZXMgbm90IGRlcGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIGFueSBzcGVjaWFsIGV4ZXJ0aW9uLCBidXQgcmF0aGVyIG9uIGEgbWVudGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSBhbmQgaW5jbGluYXRpb24uIEJ1dCBob3cgbXVjaCBiaXR0ZXJuZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmVlbGluZyBpcyBjYXVzZWQgdG8gYWxsaWVzIGJ5IHRoYXQgcXVlc3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFkIHJlYXNvbiB0byBrbm93IGluIHRoZSBjYXNlIG9mIGNpdGl6ZW5zIHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHJlY2VudGx5IHVyZ2luZyB0aGUgcmVtb3ZhbCBvZiB0aGUgcG9ydC1kdWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBjb21wbGFpbiBzbyBtdWNoIG9mIHRoZSBkdWVzIHRoZW1zZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgb2YgY2VydGFpbiBleHRvcnRpb25hdGUgY29uZHVjdCBvbiB0aGUgcGFydCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsZWN0b3JzLiBXaGVyZWZvcmUsIGFmdGVyIGhlYXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlcyBvZiBjaXRpemVucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgSSBjYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVoZW5kIHdoYXQgaGFwcGVucyB0byBhbGxpZXMgaW4gZGlzdGFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmRzLiBUbyBjb25kdWN0IG9uZXNlbGYgaW4gdGhpcyBtYXR0ZXIgaW4gc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F5IGFzIHRvIHNhdGlzZnkgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj4gZXNwZWNpYWxseSB3aGVuIGNvbnRyYWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiB1bmRlcnRha2VuIGF0IGEgbG9zcywgYW5kIHlldCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlIHRoZSBhbGxpZXMgZnJvbSBydWluLCBzZWVtcyB0byBkZW1hbmQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpcnR1ZSB3aXRoIHNvbWV0aGluZyBkaXZpbmUgaW4gaXQsIEkgbWVhbiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlydHVlIGxpa2UgeW91cnMuIFRvIGJlZ2luIHdpdGgsIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IHRvIHRheCBhdCBhbGwsIHdoaWNoIGlzIHRoZWlyIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlLCBvdWdodCBub3QgdG8gYmUgdGhvdWdodCBzbyBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmVla3MsIGJlY2F1c2UgdGhleSB3ZXJlIHNvIHN1YmplY3QgYnkgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF3cyB3aXRob3V0IHRoZSBSb21hbiBnb3Zlcm5tZW50LiBBZ2FpbiwgdGhleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbm5vdCBkZXNwaXNlIHRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FudXM8L2ZvcmVpZ24+LCBmb3IgdGhleSBoYXZlIGJlZW4gdW5hYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gcGF5IHRoZSBhc3Nlc3NtZW50IGFjY29yZGluZyB0byBTdWxsYSdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbC10YXggd2l0aG91dCB0aGUgYWlkIG9mIHRoZSBwdWJsaWNhbi4gQnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmVlayA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+IGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBtb3JlIGNvbnNpZGVyYXRlIGluIGV4YWN0aW5nIHRoZSBwYXltZW50IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGF4ZXMgdGhhbiBvdXIgb3duIG1heSBiZSBnYXRoZXJlZCBmcm9tIHRoZSBmYWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgQ2F1bmlpLCBhbmQgYWxsIHRoZSBpc2xhbmRzIGFzc2lnbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFJob2RpYW5zIGJ5IFN1bGxhLCByZWNlbnRseSBhcHBlYWxlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIG9mIHRoZSBzZW5hdGUsIGFuZCBwZXRpdGlvbmVkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB0byBwYXkgdGhlaXIgdGF4IHRvIHVzIHJhdGhlciB0aGFuIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJob2RpYW5zLiBXaGVyZWZvcmUgbmVpdGhlciBvdWdodCB0aG9zZSB0byByZXZvbHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdCB0aGUgbmFtZSBvZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FudXM8L2ZvcmVpZ24+IHdobyBoYXZlIGFsd2F5cyBiZWVuIHN1YmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0YXgsIG5vciB0aG9zZSB0byBkZXNwaXNlIGl0IHdobyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gbWFrZSB1cCB0aGUgdHJpYnV0ZSBieSB0aGVtc2VsdmVzLCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgLz4gbm9yIHRob3NlIHRvIHJlZnVzZSBoaXMgc2VydmljZXMgd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2tlZCBmb3IgdGhlbS4gQXQgdGhlIHNhbWUgdGltZSBsZXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiByZWZsZWN0IG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhhdCBpZiBzaGUgd2VyZSBub3QgdW5kZXIgb3VyIGdvdmVybm1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gY2FsYW1pdHkgb2YgZm9yZWlnbiB3YXIgb3IgaW50ZXJuYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpZmUgZnJvbSB3aGljaCBzaGUgd291bGQgYmUgZnJlZS4gQW5kIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBnb3Zlcm5tZW50IGNhbm5vdCBwb3NzaWJseSBiZSBtYWludGFpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCB0YXhlcywgc2hlIHNob3VsZCBiZSBjb250ZW50IHRvIHB1cmNoYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVycGV0dWFsIHBlYWNlIGFuZCB0cmFucXVpbGxpdHkgYXQgdGhlIHByaWNlIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIHByb3BvcnRpb24gb2YgaGVyIHByb2R1Y3RzLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj46IGZvciwgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgLz4gd2Ugb3Bwb3NlIHRoZW0sIHdlIHNoYWxsIGFsaWVuYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBvdXJzZWx2ZXMgYW5kIGZyb20gdGhlIFJlcHVibGljIGFuIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFzIGRvbmUgdXMgbW9zdCBleGNlbGxlbnQgc2VydmljZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGFzIGJlZW4gYnJvdWdodCBpbnRvIHN5bXBhdGh5IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVwdWJsaWMgYnkgb3VyIG1lYW5zOyBpZiwgb24gdGhlIG90aGVyIGhhbmQsIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGx5IHdpdGggdGhlbSBpbiBldmVyeSBjYXNlLCB3ZSBzaGFsbCBhbGxvdyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSBydWluIG9mIHRob3NlIHdob3NlIGludGVyZXN0cywgdG8gc2F5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBvZiB0aGVpciBwcmVzZXJ2YXRpb24sIHdlIGFyZSBib3VuZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHQuIFRoaXMgaXMgdGhlIG9uZSBkaWZmaWN1bHR5LCBpZiB3ZSBsb29rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRoaW5nIGZhaXJseSBpbiB0aGUgZmFjZSwgaW4geW91ciB3aG9sZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQuIEZvciBkaXNpbnRlcmVzdGVkIGNvbmR1Y3Qgb24gb25lJ3Mgb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydCwgdGhlIHN1cHByZXNzaW9uIG9mIGFsbCBpbm9yZGluYXRlIGRlc2lyZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGtlZXBpbmcgYSBjaGVjayB1cG9uIG9uZSdzIHN0YWZmLCBjb3VydGVzeSBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJpbmcgY2F1c2VzLCBpbiBsaXN0ZW5pbmcgdG8gYW5kIGFkbWl0dGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1aXRvcuKAlGFsbCB0aGlzIGlzIHJhdGhlciBhIHF1ZXN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGl0IHRoYW4gb2YgZGlmZmljdWx0eTogZm9yIGl0IGRvZXMgbm90IGRlcGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIGFueSBzcGVjaWFsIGV4ZXJ0aW9uLCBidXQgcmF0aGVyIG9uIGEgbWVudGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSBhbmQgaW5jbGluYXRpb24uIEJ1dCBob3cgbXVjaCBiaXR0ZXJuZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmVlbGluZyBpcyBjYXVzZWQgdG8gYWxsaWVzIGJ5IHRoYXQgcXVlc3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFkIHJlYXNvbiB0byBrbm93IGluIHRoZSBjYXNlIG9mIGNpdGl6ZW5zIHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHJlY2VudGx5IHVyZ2luZyB0aGUgcmVtb3ZhbCBvZiB0aGUgcG9ydC1kdWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA4MCI+SXRhbHk8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBjb21wbGFpbiBzbyBtdWNoIG9mIHRoZSBkdWVzIHRoZW1zZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgb2YgY2VydGFpbiBleHRvcnRpb25hdGUgY29uZHVjdCBvbiB0aGUgcGFydCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsZWN0b3JzLiBXaGVyZWZvcmUsIGFmdGVyIGhlYXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlcyBvZiBjaXRpemVucyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDgwIj5JdGFseTwvcGxhY2VOYW1lPiwgSSBjYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVoZW5kIHdoYXQgaGFwcGVucyB0byBhbGxpZXMgaW4gZGlzdGFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmRzLiBUbyBjb25kdWN0IG9uZXNlbGYgaW4gdGhpcyBtYXR0ZXIgaW4gc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F5IGFzIHRvIHNhdGlzZnkgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj4gZXNwZWNpYWxseSB3aGVuIGNvbnRyYWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiB1bmRlcnRha2VuIGF0IGEgbG9zcywgYW5kIHlldCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlIHRoZSBhbGxpZXMgZnJvbSBydWluLCBzZWVtcyB0byBkZW1hbmQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpcnR1ZSB3aXRoIHNvbWV0aGluZyBkaXZpbmUgaW4gaXQsIEkgbWVhbiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlydHVlIGxpa2UgeW91cnMuIFRvIGJlZ2luIHdpdGgsIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IHRvIHRheCBhdCBhbGwsIHdoaWNoIGlzIHRoZWlyIGdyZWF0ZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlLCBvdWdodCBub3QgdG8gYmUgdGhvdWdodCBzbyBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmVla3MsIGJlY2F1c2UgdGhleSB3ZXJlIHNvIHN1YmplY3QgYnkgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF3cyB3aXRob3V0IHRoZSBSb21hbiBnb3Zlcm5tZW50LiBBZ2FpbiwgdGhleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbm5vdCBkZXNwaXNlIHRoZSB3b3JkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FudXM8L2ZvcmVpZ24+LCBmb3IgdGhleSBoYXZlIGJlZW4gdW5hYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gcGF5IHRoZSBhc3Nlc3NtZW50IGFjY29yZGluZyB0byBTdWxsYSdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbC10YXggd2l0aG91dCB0aGUgYWlkIG9mIHRoZSBwdWJsaWNhbi4gQnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmVlayA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+IGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBtb3JlIGNvbnNpZGVyYXRlIGluIGV4YWN0aW5nIHRoZSBwYXltZW50IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGF4ZXMgdGhhbiBvdXIgb3duIG1heSBiZSBnYXRoZXJlZCBmcm9tIHRoZSBmYWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgQ2F1bmlpLCBhbmQgYWxsIHRoZSBpc2xhbmRzIGFzc2lnbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFJob2RpYW5zIGJ5IFN1bGxhLCByZWNlbnRseSBhcHBlYWxlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0aW9uIG9mIHRoZSBzZW5hdGUsIGFuZCBwZXRpdGlvbmVkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB0byBwYXkgdGhlaXIgdGF4IHRvIHVzIHJhdGhlciB0aGFuIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJob2RpYW5zLiBXaGVyZWZvcmUgbmVpdGhlciBvdWdodCB0aG9zZSB0byByZXZvbHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdCB0aGUgbmFtZSBvZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FudXM8L2ZvcmVpZ24+IHdobyBoYXZlIGFsd2F5cyBiZWVuIHN1YmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0YXgsIG5vciB0aG9zZSB0byBkZXNwaXNlIGl0IHdobyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmFibGUgdG8gbWFrZSB1cCB0aGUgdHJpYnV0ZSBieSB0aGVtc2VsdmVzLCA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgLz4gbm9yIHRob3NlIHRvIHJlZnVzZSBoaXMgc2VydmljZXMgd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2tlZCBmb3IgdGhlbS4gQXQgdGhlIHNhbWUgdGltZSBsZXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiByZWZsZWN0IG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcywgdGhhdCBpZiBzaGUgd2VyZSBub3QgdW5kZXIgb3VyIGdvdmVybm1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gY2FsYW1pdHkgb2YgZm9yZWlnbiB3YXIgb3IgaW50ZXJuYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpZmUgZnJvbSB3aGljaCBzaGUgd291bGQgYmUgZnJlZS4gQW5kIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBnb3Zlcm5tZW50IGNhbm5vdCBwb3NzaWJseSBiZSBtYWludGFpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCB0YXhlcywgc2hlIHNob3VsZCBiZSBjb250ZW50IHRvIHB1cmNoYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVycGV0dWFsIHBlYWNlIGFuZCB0cmFucXVpbGxpdHkgYXQgdGhlIHByaWNlIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIHByb3BvcnRpb24gb2YgaGVyIHByb2R1Y3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['60.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBpZiB0aGV5IHdpbGwgZmFpcmx5IHJlY29uY2lsZSB0aGVtc2VsdmVzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGV4aXN0ZW5jZSBhbmQgbmFtZSBvZiBwdWJsaWNhbiwgYWxsIHRoZSByZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5IGJlIG1hZGUgdG8gYXBwZWFyIHRvIHRoZW0gaW4gYSBsZXNzIG9mZmVuc2l2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0IGJ5IHlvdXIgc2tpbGwgYW5kIHBydWRlbmNlLiBUaGV5IG1heSwgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtpbmcgdGhlaXIgYmFyZ2FpbnMgd2l0aCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiwgbm90IGhhdmUgcmVnYXJkIHNvIG11Y2ggdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXhhY3QgY29uZGl0aW9ucyBsYWlkIGRvd24gYnkgdGhlIGNlbnNvcnMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29udmVuaWVuY2Ugb2Ygc2V0dGxpbmcgdGhlIGJ1c2luZXNzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVpbmcgdGhlbXNlbHZlcyBmcm9tIGZhcnRoZXIgdHJvdWJsZS4gWW91IGFsc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgZG8sIHdoYXQgeW91IGhhdmUgZG9uZSBzcGxlbmRpZGx5IGFuZCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlsbCBkb2luZywgbmFtZWx5LCBkd2VsbCBvbiB0aGUgaGlnaCBwb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LCBhbmQgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIG9ibGlnYXRpb25zIHRvIHRoYXQgb3JkZXIsIGluIHN1Y2ggYSB3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc+KAlHB1dHRpbmcgb3V0IG9mIHRoZSBxdWVzdGlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyBvZiB5b3VyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiBhbmQgdGhlIHBvd2VyIG9mIHlvdXIgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgYW5kIGRpZ25pdHnigJR0byByZWNvbmNpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdpdGggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj47IGFuZCB0byBiZWcgb2YgdGhvc2UsIHdob20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZXJ2ZWQgZW1pbmVudGx5IHdlbGwsIGFuZCB3aG8gb3dlIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIHRvIHN1ZmZlciB5b3UgYnkgdGhlaXIgY29tcGxpYW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50YWluIGFuZCBwcmVzZXJ2ZSB0aGUgYm9uZHMgd2hpY2ggdW5pdGUgdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dCB3aHkgZG8gSSBhZGRyZXNzIHRoZXNlIGV4aG9ydGF0aW9ucyB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBub3Qgb25seSBjYXBhYmxlIG9mIGNhcnJ5aW5nIHRoZW0gb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gYWNjb3JkIHdpdGhvdXQgYW55b25lJ3MgaW5zdHJ1Y3Rpb24sIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSB0byBhIGdyZWF0IGV4dGVudCB0aG9yb3VnaGx5IGRvbmUgc28/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBtb3N0IHJlc3BlY3RhYmxlIGFuZCBpbXBvcnRhbnQgY29tcGFuaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gbm90IGNlYXNlIG9mZmVyaW5nIG1lIHRoYW5rcyBkYWlseSwgYW5kIHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIG1vcmUgZ3JhdGlmeWluZyB0byBtZSBiZWNhdXNlIHRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB0aGUgc2FtZS4gTm93IGl0IGlzIGFuIGFjaGlldmVtZW50IG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSB0byB1bml0ZSBpbiBmZWVsaW5nIHRoaW5ncyB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSBpbiBpbnRlcmVzdHMsIGFpbXMsIGFuZCwgSSBoYWQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCwgaW4gdGhlaXIgdmVyeSBuYXR1cmUuIEJ1dCBJIGhhdmUgbm90IHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcyB0byBpbnN0cnVjdCB5b3XigJRmb3IgeW91ciB3aXNkb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBtYW4ncyBpbnN0cnVjdGlvbuKAlGJ1dCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGEgcGxlYXN1cmUgdG8gbWUgd2hpbGUgd3JpdGluZyB0byBzZXQgZG93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgdmlydHVlcywgdGhvdWdoIEkgaGF2ZSBydW4gdG8gZ3JlYXRlciBsZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGlzIGxldHRlciB0aGFuIEkgY291bGQgaGF2ZSB3aXNoZWQsIG9yIHRoYW4gSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgSSBzaG91bGQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHVibGljYW5pPC9mb3JlaWduPiwgbm90IGhhdmUgcmVnYXJkIHNvIG11Y2ggdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXhhY3QgY29uZGl0aW9ucyBsYWlkIGRvd24gYnkgdGhlIGNlbnNvcnMgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgY29udmVuaWVuY2Ugb2Ygc2V0dGxpbmcgdGhlIGJ1c2luZXNzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVpbmcgdGhlbXNlbHZlcyBmcm9tIGZhcnRoZXIgdHJvdWJsZS4gWW91IGFsc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgZG8sIHdoYXQgeW91IGhhdmUgZG9uZSBzcGxlbmRpZGx5IGFuZCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlsbCBkb2luZywgbmFtZWx5LCBkd2VsbCBvbiB0aGUgaGlnaCBwb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LCBhbmQgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIG9ibGlnYXRpb25zIHRvIHRoYXQgb3JkZXIsIGluIHN1Y2ggYSB3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc+KAlHB1dHRpbmcgb3V0IG9mIHRoZSBxdWVzdGlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyBvZiB5b3VyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmltcGVyaXVtPC9mb3JlaWduPiBhbmQgdGhlIHBvd2VyIG9mIHlvdXIgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgYW5kIGRpZ25pdHnigJR0byByZWNvbmNpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdpdGggdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnB1YmxpY2FuaTwvZm9yZWlnbj47IGFuZCB0byBiZWcgb2YgdGhvc2UsIHdob20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzZXJ2ZWQgZW1pbmVudGx5IHdlbGwsIGFuZCB3aG8gb3dlIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIHRvIHN1ZmZlciB5b3UgYnkgdGhlaXIgY29tcGxpYW5jZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW50YWluIGFuZCBwcmVzZXJ2ZSB0aGUgYm9uZHMgd2hpY2ggdW5pdGUgdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wdWJsaWNhbmk8L2ZvcmVpZ24+LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dCB3aHkgZG8gSSBhZGRyZXNzIHRoZXNlIGV4aG9ydGF0aW9ucyB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBub3Qgb25seSBjYXBhYmxlIG9mIGNhcnJ5aW5nIHRoZW0gb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBvd24gYWNjb3JkIHdpdGhvdXQgYW55b25lJ3MgaW5zdHJ1Y3Rpb24sIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYWxyZWFkeSB0byBhIGdyZWF0IGV4dGVudCB0aG9yb3VnaGx5IGRvbmUgc28/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBtb3N0IHJlc3BlY3RhYmxlIGFuZCBpbXBvcnRhbnQgY29tcGFuaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gbm90IGNlYXNlIG9mZmVyaW5nIG1lIHRoYW5rcyBkYWlseSwgYW5kIHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIG1vcmUgZ3JhdGlmeWluZyB0byBtZSBiZWNhdXNlIHRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB0aGUgc2FtZS4gTm93IGl0IGlzIGFuIGFjaGlldmVtZW50IG9mIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSB0byB1bml0ZSBpbiBmZWVsaW5nIHRoaW5ncyB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHBvc2l0ZSBpbiBpbnRlcmVzdHMsIGFpbXMsIGFuZCwgSSBoYWQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCwgaW4gdGhlaXIgdmVyeSBuYXR1cmUuIEJ1dCBJIGhhdmUgbm90IHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcyB0byBpbnN0cnVjdCB5b3XigJRmb3IgeW91ciB3aXNkb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlcyBubyBtYW4ncyBpbnN0cnVjdGlvbuKAlGJ1dCBpdCBoYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGEgcGxlYXN1cmUgdG8gbWUgd2hpbGUgd3JpdGluZyB0byBzZXQgZG93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgdmlydHVlcywgdGhvdWdoIEkgaGF2ZSBydW4gdG8gZ3JlYXRlciBsZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGlzIGxldHRlciB0aGFuIEkgY291bGQgaGF2ZSB3aXNoZWQsIG9yIHRoYW4gSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQgSSBzaG91bGQuIDwvdHJhbnNsYXRpb24+"
translation['60.13'] = ""
translation['60.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzaW5jZSB5b3VyIGZpcnN0IHllYXIgZ2F2ZSByaXNlIHRvIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWxrIGluIHJlZ2FyZCB0byB0aGlzIHBhcnRpY3VsYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnTigJRJIGJlbGlldmUgYmVjYXVzZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cm9uZy1kb2luZywgdGhlIGNvdmV0b3VzbmVzcywgYW5kIHRoZSBhcnJvZ2FuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBtZW4gY2FtZSB1cG9uIHlvdSBhcyBhIHN1cnByaXNlLCBhbmQgc2VlbWVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IHVuYmVhcmFibGUtd2hpbGUgeW91ciBzZWNvbmQgeWVhciB3YXMgbXVjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbGRlciwgYmVjYXVzZSBoYWJpdCBhbmQgcmVmZWN0aW9uLCBhbmQsIGFzIEkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGluaywgbXkgbGV0dGVycyBhbHNvLCByZW5kZXJlZCB5b3UgbW9yZSB0b2xlcmFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBnZW50bGUsIHRoZSB0aGlyZCBvdWdodCB0byBiZSBzbyBjb21wbGV0ZWx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmb3JtZWQsIGFzIG5vdCB0byBnaXZlIGV2ZW4gdGhlIHNtYWxsZXN0IGdyb3VuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhbnlvbmUgdG8gZmluZCBmYXVsdC4gQW5kIGhlcmUgSSBnbyBvbiB0byB1cmdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBvbiB5b3UsIG5vdCBieSB3YXkgb2YgZXhob3J0YXRpb24gb3IgYWRtb25pdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgYnkgYnJvdGhlcmx5IGVudHJlYXRpZXMsIHRoYXQgeW91IHdvdWxkIHNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgd2hvbGUgaGVhcnQsIGNhcmUsIGFuZCB0aG91Z2h0IG9uIHRoZSBnYWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcHJhaXNlIGZyb20gZXZlcnlib2R5IGFuZCBmcm9tIGV2ZXJ5IHF1YXJ0ZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYsIGluZGVlZCwgb3VyIGFjaGlldmVtZW50cyB3ZXJlIG9ubHkgdGhlIHN1YmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhIG1vZGVyYXRlIGFtb3VudCBvZiB0YWxrIGFuZCBjb21tZW5kYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBlbWluZW50LCBub3RoaW5nIGJleW9uZCB0aGUgcHJhY3RpY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIHdvdWxkIGhhdmUgYmVlbiBkZW1hbmRlZCBvZiB5b3UuIEFzIGl0IGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIG93aW5nIHRvIHRoZSBicmlsbGlhbmN5IGFuZCBtYWduaXR1ZGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgYWZmYWlycyBpbiB3aGljaCB3ZSBoYXZlIGJlZW4gZW5nYWdlZCwgaWYgd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyBub3Qgb2J0YWluIHRoZSB2ZXJ5IGhpZ2hlc3QgcmVwdXRhdGlvbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ciBwcm92aW5jZSwgaXQgc2VlbXMgc2NhcmNlbHkgcG9zc2libGUgZm9yIHVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYXZvaWQgdGhlIG1vc3QgdmlvbGVudCBhYnVzZS4gT3VyIHBvc2l0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjaCB0aGF0IGFsbCBsb3lhbGlzdHMgc3VwcG9ydCB1cywgYnV0IGRlbWFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gYW5kIGV4cGVjdCBmcm9tIHVzIGV2ZXJ5IGtpbmQgb2YgYWN0aXZpdHkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlydHVlLCB3aGlsZSBhbGwgdGhlIGRpc2xveWFsLCBzZWVpbmcgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgZW50ZXJlZCB1cG9uIGEgbGFzdGluZyB3YXIgd2l0aCB0aGVtLCBhcHBlYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ZWQgd2l0aCB0aGUgdmVyeSBzbWFsbGVzdCBleGN1c2UgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNraW5nIHVzLiBXaGVyZWZvcmUsIHNpbmNlIGZvcnR1bmUgaGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3R0ZWQgdG8geW91IHN1Y2ggYSB0aGVhdHJlIGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGNvbXBsZXRlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZWQgd2l0aCBhbiBhdWRpZW5jZSwgb2YgaW1tZW5zZSBzaXplLCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IHJlZmluZWQganVkZ21lbnQsIGFuZCwgbW9yZW92ZXIsIG5hdHVyYWxseSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFibGUgb2YgY29udmV5aW5nIHNvdW5kLCB0aGF0IGl0cyBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIG9waW5pb24gYW5kIGl0cyByZW1hcmtzIHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgcHV0IG91dCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHBvd2VyLCBJIGJlc2VlY2ggeW91LCBleGVydCBhbGwgeW91ciBlbmVyZ2llcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGVhciBub3Qgb25seSB0byBoYXZlIGJlZW4gd29ydGh5IG9mIHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgcGxheWVkIGhlcmUsIGJ1dCB0byBoYXZlIHN1cnBhc3NlZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSB0aGVyZSBieSB5b3VyIGhpZ2ggcXVhbGl0aWVzLiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGNvbXBsZXRlbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZWQgd2l0aCBhbiBhdWRpZW5jZSwgb2YgaW1tZW5zZSBzaXplLCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3N0IHJlZmluZWQganVkZ21lbnQsIGFuZCwgbW9yZW92ZXIsIG5hdHVyYWxseSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFibGUgb2YgY29udmV5aW5nIHNvdW5kLCB0aGF0IGl0cyBleHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIG9waW5pb24gYW5kIGl0cyByZW1hcmtzIHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUm9tZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUm9tZSI+Um9tZTwvcGxhY2VOYW1lPiwgcHV0IG91dCBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHBvd2VyLCBJIGJlc2VlY2ggeW91LCBleGVydCBhbGwgeW91ciBlbmVyZ2llcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGVhciBub3Qgb25seSB0byBoYXZlIGJlZW4gd29ydGh5IG9mIHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgcGxheWVkIGhlcmUsIGJ1dCB0byBoYXZlIHN1cnBhc3NlZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSB0aGVyZSBieSB5b3VyIGhpZ2ggcXVhbGl0aWVzLiA8cGIgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['60.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBzaW5jZSBjaGFuY2UgaGFzIGFzc2lnbmVkIHRvIG1lIGFtb25nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhY2llcyB0aGUgQ29uZHVjdCBvZiBwdWJsaWMgYnVzaW5lc3MgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eSwgdG8geW91IHRoYXQgaW4gYSBwcm92aW5jZSwgaWYgbXkgc2hhcmUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZlcmlvciB0byBubyBvbmUncywgdGFrZSBjYXJlIHRoYXQgeW91cnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJwYXNzZXMgb3RoZXJzLiBBdCB0aGUgc2FtZSB0aW1lIHRoaW5rIG9mIHRoaXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgYXJlIG5vdCBub3cgd29ya2luZyBmb3IgYSBmdXR1cmUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvc3BlY3RpdmUgZ2xvcnksIGJ1dCBhcmUgZmlnaHRpbmcgaW4gZGVmZW5jZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgaGFzIGJlZW4gYWxyZWFkeSBnYWluZWQ7IHdoaWNoIGluZGVlZCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3Qgc28gbXVjaCBhbiBvYmplY3QgdG8gZ2FpbiBhcyBpdCBpcyBub3cgb3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBkZWZlbmQuIEFuZCBpZiBhbnl0aGluZyBpbiBtZSBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwYXJ0IGZyb20geW91LCBJIHNob3VsZCBkZXNpcmUgbm90aGluZyBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcG9zaXRpb24gd2hpY2ggSSBoYXZlIGFscmVhZHkgZ2FpbmVkLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwgZmFjdCwgaG93ZXZlciwgaXMgdGhhdCB1bmxlc3MgYWxsIHlvdXIgYWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBkZWVkcyBpbiB5b3VyIHByb3ZpbmNlIGNvcnJlc3BvbmQgdG8gbXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMsIEkgc2hhbGwgdGhpbmsgdGhhdCBJIGhhdmUgZ2FpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aGluZyBieSB0aG9zZSBncmVhdCBsYWJvdXJzIGFuZCBkYW5nZXJzLCBpbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB3aGljaCB5b3UgaGF2ZSBzaGFyZWQuIEJ1dCBpZiBpdCB3YXMgeW91IHdobywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm92ZSBhbGwgb3RoZXJzLCBhc3Npc3RlZCBtZSB0byBnYWluIGEgbW9zdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGVuZGlkIHJlcHV0YXRpb24sIHlvdSB3aWxsIGNlcnRhaW5seSBhbHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFib3VyIG1vcmUgdGhhbiBvdGhlcnMgdG8gZW5hYmxlIG1lIHRvIHJldGFpbiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgbXVzdCBub3QgYmUgZ3VpZGVkIGJ5IHRoZSBvcGluaW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdWRnbWVudHMgb2YgdGhlIHByZXNlbnQgZ2VuZXJhdGlvbiBvbmx5LCBidXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aG9zZSB0byBjb21lIGFsc286IGFuZCB5ZXQgdGhlIGxhdHRlciB3aWxsIGJlIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlIGNhbmRpZCBqdWRnbWVudCwgZm9yIGl0IHdpbGwgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlZCBieSBkZXRyYWN0aW9uIGFuZCBtYWxpY2UuIEZpbmFsbHksIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCB0aGluayBvZiB0aGlz4oCUdGhhdCB5b3UgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWtpbmcgZ2xvcnkgZm9yIHlvdXJzZWxmIGFsb25lIChhbmQgZXZlbiBpZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGUgY2FzZSwgeW91IHN0aWxsIG91Z2h0IG5vdCB0byBiZSBjYXJlbGVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGl0LCBlc3BlY2lhbGx5IGFzIHlvdSBoYWQgZGV0ZXJtaW5lZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNlY3JhdGUgdGhlIG1lbW9yeSBvZiB5b3VyIG5hbWUgYnkgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxlbmRpZCBtb251bWVudHMpLCBidXQgeW91IGhhdmUgdG8gc2hhcmUgaXQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLCBhbmQgdG8gaGFuZCBpdCBkb3duIHRvIG91ciBjaGlsZHJlbi4gSW4gcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2hpY2ggeW91IG11c3QgYmUgb24geW91ciBndWFyZCBsZXN0IGJ5IGFueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VzcyBvZiBjYXJlbGVzc25lc3MgeW91IHNob3VsZCBzZWVtIG5vdCBvbmx5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBuZWdsZWN0ZWQgeW91ciBvd24gaW50ZXJlc3RzLCBidXQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ3J1ZGdlZCB0aG9zZSBvZiB5b3VyIGZhbWlseSBhbHNvLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['60.16'] = ""
translation['volume 1 appendix a.1'] = ""
translation['volume 1 appendix a.2'] = ""
translation['volume 1 appendix a.3'] = ""
translation['volume 1 appendix a.4'] = ""
translation['volume 1 appendix a.5'] = ""
translation['volume 1 appendix a.6'] = ""
translation['volume 1 appendix a.7'] = ""
translation['volume 1 appendix a.8'] = ""
translation['volume 1 appendix a.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHNpbmNlIEkgaGF2ZSBtZW50aW9uZWQgImF0dGVuZGFuY2UsIiBJIG1heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZCB0aGF0IHlvdSBzaG91bGQgYmUgY2FyZWZ1bCB0byBzZWUgbGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW5pZXMgZXZlcnkgZGF5IG9mIGV2ZXJ5IGNsYXNzIGFuZCBvcmRlcjsgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgbWVyZSBudW1iZXIgb2YgdGhlc2UgYSBndWVzcyBtYXkgd2VsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgYXMgdG8gdGhlIGFtb3VudCBvZiBzdXBwb3J0IHlvdSBhcmUgbGlrZWx5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBpbiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y2FtcHVzPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0c2VsZi4gU3VjaCB2aXNpdG9ycyBhcmUgb2YgdGhyZWUga2luZHM6IG9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNpc3RzIG9mIG1vcm5pbmcgY2FsbGVycyB3aG8gY29tZSB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91c2UsIGEgc2Vjb25kIG9mIHRob3NlIHdobyBlc2NvcnQgeW91IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcnVtLCBhIHRoaXJkIG9mIHRob3NlIHdobyBhdHRlbmQgeW91IG9uIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNzLiBJbiB0aGUgY2FzZSBvZiB0aGUgbW9ybmluZyBjYWxsZXJzLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgbGVzcyBzZWxlY3QgYW5kLCBhY2NvcmRpbmcgdG8gdGhlIHByZXZhaWxpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYXNoaW9uLCBjb21lIGluIGdyZWF0ZXIgbnVtYmVycywgeW91IG11c3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cml2ZSB0byBtYWtlIHRoZW0gdGhpbmsgdGhhdCB5b3UgdmFsdWUgZXZlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgc2xpZ2h0IGF0dGVudGlvbiB2ZXJ5IGhpZ2hseS4gTGV0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGNvbWUgdG8geW91ciBob3VzZSBzZWUgdGhhdCB5b3UgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzc2IiAvPiBub3RpY2UgaXQ7IHNoZXcgeW91ciBncmF0aWZpY2F0aW9uIHRvIHN1Y2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBmcmllbmRzIGFzIHdpbGwgcmVwZWF0IGl0IHRvIHRoZW0gOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXF1ZW50bHkgbWVudGlvbiBpdCB0byB0aGUgcGVyc29ucyB0aGVtc2VsdmVzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG9mdGVuIGhhcHBlbnMgdGhhdCBwZW9wbGUsIHdoZW4gdGhleSB2aXNpdCBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGNhbmRpZGF0ZXMsIGFuZCBvYnNlcnZlIHRoYXQgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIGFib3ZlIHRoZSByZXN0IG5vdGljZXMgdGhlc2UgYXR0ZW50aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZvdGUgdGhlbXNlbHZlcyB0byBoaW0gOyBsZWF2ZSBvZmYgdmlzaXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzIDsgbGl0dGxlIGJ5IGxpdHRsZSBiZWNvbWUgZGV2b3RlZCB0byBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIGJlaW5nIG5ldXRyYWwsIGFuZCBmcm9tIHNoYW0gdHVybiBvdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsIHN1cHBvcnRlcnMuIEZ1cnRoZXJtb3JlLCBjYXJlZnVsbHkgcmVtZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCBpZiB5b3UgaGF2ZSBiZWVuIHRvbGQgb3IgaGF2ZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiB3aG8gaGFzIGdpdmVuIHlvdSBoaXMgcHJvbWlzZSBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkcmVzc2luZyBmb3IgdGhlIG9jY2FzaW9uLCIgYXMgdGhlIHBocmFzZSBnb2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2UgYXMgdGhvdWdoIHlvdSBoYWQgbmVpdGhlciBoZWFyZCBpdCBub3Iga25ldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IDsgaWYgYW55IG9mZmVycyB0byBjbGVhciBoaW1zZWxmIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHRoaW5rcyBoaW1zZWxmIHN1c3BlY3RlZCwgYXNzZXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRseSB0aGF0IHlvdSBoYXZlIG5ldmVyIGRvdWJ0ZWQgaGlzIHNpbmNlcml0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBoYXZlIG5vIHJpZ2h0IHRvIGRvdWJ0IGl0LiBGb3IgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlua3MgdGhhdCBoZSBpcyBub3QgZ2l2aW5nIHNhdGlzZmFjdGlvbiBjYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXZlciBiZSBhIGZyaWVuZC4gWW91IG91Z2h0LCBob3dldmVyLCB0byBrbm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCBtYW4ncyByZWFsIGZlZWxpbmcsIGluIG9yZGVyIHRvIHNldHRsZSBob3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWNoIGNvbmZpZGVuY2UgdG8gcGxhY2UgaW4gaGltLiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y2FtcHVzPC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0c2VsZi4gU3VjaCB2aXNpdG9ycyBhcmUgb2YgdGhyZWUga2luZHM6IG9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNpc3RzIG9mIG1vcm5pbmcgY2FsbGVycyB3aG8gY29tZSB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91c2UsIGEgc2Vjb25kIG9mIHRob3NlIHdobyBlc2NvcnQgeW91IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcnVtLCBhIHRoaXJkIG9mIHRob3NlIHdobyBhdHRlbmQgeW91IG9uIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNzLiBJbiB0aGUgY2FzZSBvZiB0aGUgbW9ybmluZyBjYWxsZXJzLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgbGVzcyBzZWxlY3QgYW5kLCBhY2NvcmRpbmcgdG8gdGhlIHByZXZhaWxpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYXNoaW9uLCBjb21lIGluIGdyZWF0ZXIgbnVtYmVycywgeW91IG11c3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cml2ZSB0byBtYWtlIHRoZW0gdGhpbmsgdGhhdCB5b3UgdmFsdWUgZXZlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgc2xpZ2h0IGF0dGVudGlvbiB2ZXJ5IGhpZ2hseS4gTGV0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGNvbWUgdG8geW91ciBob3VzZSBzZWUgdGhhdCB5b3UgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzc2IiAvPiBub3RpY2UgaXQ7IHNoZXcgeW91ciBncmF0aWZpY2F0aW9uIHRvIHN1Y2ggb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBmcmllbmRzIGFzIHdpbGwgcmVwZWF0IGl0IHRvIHRoZW0gOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXF1ZW50bHkgbWVudGlvbiBpdCB0byB0aGUgcGVyc29ucyB0aGVtc2VsdmVzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG9mdGVuIGhhcHBlbnMgdGhhdCBwZW9wbGUsIHdoZW4gdGhleSB2aXNpdCBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGNhbmRpZGF0ZXMsIGFuZCBvYnNlcnZlIHRoYXQgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIGFib3ZlIHRoZSByZXN0IG5vdGljZXMgdGhlc2UgYXR0ZW50aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZvdGUgdGhlbXNlbHZlcyB0byBoaW0gOyBsZWF2ZSBvZmYgdmlzaXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzIDsgbGl0dGxlIGJ5IGxpdHRsZSBiZWNvbWUgZGV2b3RlZCB0byBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIGJlaW5nIG5ldXRyYWwsIGFuZCBmcm9tIHNoYW0gdHVybiBvdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsIHN1cHBvcnRlcnMuIEZ1cnRoZXJtb3JlLCBjYXJlZnVsbHkgcmVtZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCBpZiB5b3UgaGF2ZSBiZWVuIHRvbGQgb3IgaGF2ZSBkaXNjb3ZlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiB3aG8gaGFzIGdpdmVuIHlvdSBoaXMgcHJvbWlzZSBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkcmVzc2luZyBmb3IgdGhlIG9jY2FzaW9uLCIgYXMgdGhlIHBocmFzZSBnb2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2UgYXMgdGhvdWdoIHlvdSBoYWQgbmVpdGhlciBoZWFyZCBpdCBub3Iga25ldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IDsgaWYgYW55IG9mZmVycyB0byBjbGVhciBoaW1zZWxmIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHRoaW5rcyBoaW1zZWxmIHN1c3BlY3RlZCwgYXNzZXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRseSB0aGF0IHlvdSBoYXZlIG5ldmVyIGRvdWJ0ZWQgaGlzIHNpbmNlcml0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBoYXZlIG5vIHJpZ2h0IHRvIGRvdWJ0IGl0LiBGb3IgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlua3MgdGhhdCBoZSBpcyBub3QgZ2l2aW5nIHNhdGlzZmFjdGlvbiBjYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXZlciBiZSBhIGZyaWVuZC4gWW91IG91Z2h0LCBob3dldmVyLCB0byBrbm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCBtYW4ncyByZWFsIGZlZWxpbmcsIGluIG9yZGVyIHRvIHNldHRsZSBob3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWNoIGNvbmZpZGVuY2UgdG8gcGxhY2UgaW4gaGltLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPlNlY29uZGx5LCBvZiB0aG9zZSB3aG8gZXNjb3J0IHlvdSB0byB0aGUgZm9ydW06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luY2UgdGhpcyBpcyBhIGdyZWF0ZXIgYXR0ZW50aW9uIHRoYW4gYSBtb3JuaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbCwgaW5kaWNhdGUgYW5kIG1ha2UgY2xlYXIgdGhhdCBpdCBpcyBzdGlsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgZ3JhdGlmeWluZyB0byB5b3UsIGFuZCBhcyBmYXIgYXMgaXQgc2hhbGwgbGllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4geW91ciBwb3dlciBnbyBkb3duIHRvIHRoZSBmb3J1bSBhdCBmaXhlZCB0aW1lcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZGFpbHkgZXNjb3J0IGJ5IGl0cyBudW1iZXJzIHByb2R1Y2VzIGEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByZXNzaW9uIGFuZCBjb25mZXJzIGdyZWF0IHBlcnNvbmFsIGRpc3RpbmN0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSB0aGlyZCBjbGFzcyBpcyB0aGF0IG9mIG51bWJlcnMgcGVycGV0dWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRlbmRpbmcgeW91IG9uIHlvdXIgY2FudmFzcy4gU2VlIHRoYXQgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gc28gc3BvbnRhbmVvdXNseSB1bmRlcnN0YW5kIHRoYXQgeW91IHJlZ2FyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXJzZWxmIGFzIGZvciBldmVyIG9ibGlnZWQgYnkgdGhlaXIgZXh0cmVtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmRuZXNzIDogZnJvbSB0aG9zZSwgb24gdGhlIG90aGVyIGhhbmQsIHdobyBvd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3UgdGhpcyBhdHRlbnRpb24sIGZyYW5rbHkgZGVtYW5kIHRoYXQsIGFzIGZhciBhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZWlyIGFnZSBhbmQgYnVzaW5lc3MgYWxsb3csIHRoZXkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRseSBiZSBpbiBwZXJzb25hbCBhdHRlbmRhbmNlLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBhcmUgdW5hYmxlIHRvIGFjY29tcGFueSB5b3UgaW4gcGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGZpbmQgcmVsYXRpb25zIHRvIHRha2UgdGhlaXIgcGxhY2UgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtaW5nIHRoaXMgZHV0eS4gSSBhbSB2ZXJ5IGFueGlvdXMsIGFuZCB0aGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IGV4dHJlbWVseSBpbXBvcnRhbnQsIHRoYXQgeW91IHNob3VsZCBhbHdheXMgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGVkIGJ5IGxhcmdlIG51bWJlcnMuIEJlc2lkZXMsIGl0IGNvbmZlcnMgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0IHJlcHV0YXRpb24gYW5kIGdyZWF0IGRpc3RpbmN0aW9uIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb21wYW5pZWQgYnkgdGhvc2Ugd2hvIGJ5IHlvdXIgZXhlcnRpb25zIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWVuIGRlZmVuZGVkLCBwcmVzZXJ2ZWQsIGFuZCBhY3F1aXR0ZWQgaW4gdGhlIGxhdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdXJ0cy4gUHV0IHRoaXMgZGVtYW5kIGZhaXJseSBiZWZvcmUgdGhlbSwgdGhhdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5jZSBieSB5b3VyIG1lYW5zIGFuZCB3aXRob3V0IGFueSBwYXltZW50IHNvbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXZlIHJldGFpbmVkIHRoZWlyIHByb3BlcnR5LCBvdGhlcnMgdGhlaXIgaG9ub3VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVycyB0aGVpciBjaXZpbCBleGlzdGVuY2UgYW5kIGVudGlyZSBmb3J0dW5lcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc2luY2UgdGhlcmUgd2lsbCBuZXZlciBiZSBhbnkgb3RoZXIgdGltZSBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgY2FuIHNoZXcgdGhlaXIgZ3JhdGl0dWRlLCB0aGV5IHNob3VsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbXVuZXJhdGUgeW91IGJ5IHRoaXMgc2VydmljZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJzZWN0aW9uIiAvPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['volume 1 appendix a.10'] = ""
translation['volume 1 appendix a.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48cCBjbGFzcz0idHJhbnNsYXRpb24iPkhhdmluZyBzYWlkIGVub3VnaCBhYm91dCBzZWN1cmluZyBmcmllbmRzaGlwcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJIG11c3Qgbm93IHNwZWFrIG9uIGFub3RoZXIgZGVwYXJ0bWVudCBvZiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlJ3MgdGFzaywgd2hpY2ggaXMgY29uY2VybmVkIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2lsaWF0aW9uIG9mIHRoZSBwZW9wbGUuIFRoaXMgZGVtYW5kcyBhIGtuYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcmVtZW1iZXJpbmcgbmFtZXMsIGluc2ludWF0aW5nIG1hbm5lcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnQgYXR0ZW5kYW5jZSwgbGliZXJhbGl0eSwgdGhlIHBvd2VyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZyBhIHJlcG9ydCBhZmxvYXQgYW5kIGNyZWF0aW5nIGEgaG9wZWZ1bAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZWxpbmcgaW4gdGhlIHN0YXRlLiBGaXJzdCBvZiBhbGwsIG1ha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjdWx0eSB5b3UgcG9zc2VzcyBvZiByZWNvZ25pemluZyBwZW9wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zcGljdW91cywgYW5kIGdvIG9uIGluY3JlYXNpbmcgYW5kIGltcHJvdmluZyBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGRheS4gSSBkb24ndCB0aGluayB0aGVyZSBpcyBhbnl0aGluZyBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXIgb3Igc28gY29uY2lsaWF0b3J5LiBOZXh0LCBpZiBuYXR1cmUgaGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuaWVkIHlvdSBzb21lIHF1YWxpdHksIHJlc29sdmUgdG8gYXNzdW1lIGl0LCBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzIHRvIGFwcGVhciB0byBiZSBhY3RpbmcgbmF0dXJhbGx5LiBBbHRob3VnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdHVyZSBoYXMgZ3JlYXQgZm9yY2UsIHlldCBpbiBhIGJ1c2luZXNzIGxhc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmx5IGEgZmV3IG1vbnRocyBpdCBzZWVtcyBwcm9iYWJsZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFydGlmaWNpYWwgbWF5IGJlIHRoZSBtb3JlIGVmZmVjdGl2ZS4gRm9yIHRob3VnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgbm90IGxhY2tpbmcgaW4gdGhlIGNvdXJ0ZXN5IHdoaWNoIGdvb2QgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9saXRlIG1lbiBzaG91bGQgaGF2ZSwgeWV0IHRoZXJlIGlzIGdyZWF0IG5lZWQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIGZsYXR0ZXJpbmcgbWFubmVyIHdoaWNoLCBob3dldmVyIGZhdWx0eSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjcmVkaXRhYmxlIGluIG90aGVyIHRyYW5zYWN0aW9ucyBvZiBsaWZlLCBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlldCBuZWNlc3NhcnkgZHVyaW5nIGEgY2FuZGlkYXRlc2hpcC4gRm9yIHdoZW4gaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlcyBhIG1hbiB3b3JzZSBieSB0cnVja2xpbmcsIGl0IGlzIHdyb25nOyBidXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIG9ubHkgbW9yZSBmcmllbmRseSwgaXQgZG9lcyBub3QgZGVzZXJ2ZSBzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcnNoIGEgdGVybSA7IHdoaWxlIGl0IGlzIGFic29sdXRlbHkgbmVjZXNzYXJ5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBjYW5kaWRhdGUsIHdob3NlIGZhY2UgYW5kIGV4cHJlc3Npb24gYW5kIHN0eWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgY29udmVyc2F0aW9uIGhhdmUgdG8gYmUgdmFyaWVkIGFuZCBhY2NvbW1vZGF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgZmVlbGluZ3MgYW5kIHRhc3RlcyBvZiBldmVyeW9uZSBoZSBtZWV0cy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcyBmb3IgImNvbnN0YW50IGF0dGVuZGFuY2UsIiB0aGVyZSBpcyBubyBuZWVkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5aW5nIGRvd24gYW55IHJ1bGUsIHRoZSBwaHJhc2Ugc3BlYWtzIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0c2VsZi4gSXQgaXMsIG9mIGNvdXJzZSwgb2YgdmVyeSBncmVhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIG5vdCB0byBnbyBhd2F5IGFueXdoZXJlOyBidXQgdGhlIHJlYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2Ugb2Ygc3VjaCBjb25zdGFudCBhdHRlbmRhbmNlIGlzIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGJlaW5nIGF0IFJvbWUgYW5kIGluIDxwYiBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3OCIgLz4gdGhlIGZvcnVtLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCB0aGUgcHVzaGluZyBvbmUncyBDYW52YXNzIGFzc2lkdW91c2x5LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzaW5nIG9uZXNlbGYgYWdhaW4gYW5kIGFnYWluIHRvIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc29ucywgdGhlIG1ha2luZyBpdCBpbXBvc3NpYmxlIChhcyBmYXIgYXMgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvd2VyIGdvZXMpIGZvciBhbnlvbmUgdG8gc2F5IHRoYXQgaGUgaGFzIG5vdCBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNrZWQgYnkgeW91LCBhbmQgZWFybmVzdGx5IGFuZCBjYXJlZnVsbHkgYXNrZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGliZXJhbGl0eSBpcywgYWdhaW4sIG9mIHdpZGUgYXBwbGljYXRpb24gOyBpdCBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoZXduIGluIHJlZ2FyZCB0byB0aGUgbWFuYWdlbWVudCBvZiB5b3VyIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSwgd2hpY2gsIGV2ZW4gaWYgaXQgZG9lcyBub3QgYWN0dWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjaCB0aGUgbXVsdGl0dWRlLCB5ZXQsIGlmIHNwb2tlbiBvZiB3aXRoIHByYWlzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IGZyaWVuZHMsIGVhcm5zIHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZS4gSXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgYWxzbyBiZSBkaXNwbGF5ZWQgaW4gYmFucXVldHMsIHdoaWNoIHlvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZSBjYXJlIHRvIGF0dGVuZCB5b3Vyc2VsZiBhbmQgdG8gY2F1c2UgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgdG8gYXR0ZW5kLCB3aGV0aGVyIG9wZW4gb25lcyBvciB0aG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpbmVkIHRvIHBhcnRpY3VsYXIgdHJpYmVzLiBJdCBtYXksIGFnYWluLCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZCBpbiBnaXZpbmcgcHJhY3RpY2FsIGFzc2lzdGFuY2UsIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIHlvdSByZW5kZXIgYXZhaWxhYmxlIGZhciBhbmQgd2lkZSA6IGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNhcmVmdWwgdGhlcmVpbiB0byBiZSBhY2Nlc3NpYmxlIHRvIGFsbCBieSBkYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgbmlnaHQsIGFuZCBub3Qgb25seSBieSB0aGUgZG9vcnMgb2YgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlLCBidXQgYnkgeW91ciBmYWNlIGFuZCBjb3VudGVuYW5jZSwgd2hpY2ggaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZG9vciBvZiB0aGUgbWluZCBmb3IsIGlmIHRoYXQgc2hld3MgeW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZWxpbmdzIHRvIGJlIHRob3NlIG9mIHJlc2VydmUgYW5kIGNvbmNlYWxtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0IGlzIG9mIGxpdHRsZSBnb29kIHRvIGhhdmUgeW91ciBob3VzZSBkb29ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4uIEZvciBtZW4gZGVzaXJlIG5vdCBvbmx5IHRvIGhhdmUgcHJvbWlzZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWRlIHRoZW0sIGVzcGVjaWFsbHkgaW4gdGhlaXIgYXBwbGljYXRpb25zIHRvIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUsIGJ1dCB0byBoYXZlIHRoZW0gbWFkZSBpbiBhIGxpYmVyYWwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxpbWVudGFyeSBtYW5uZXIuIEFjY29yZGluZ2x5LCBpdCBpcyBhbiBlYXN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBtYWtlLCB0aGF0IHlvdSBzaG91bGQgaW5kaWNhdGUgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIHlvdSBhcmUgZ29pbmcgdG8gZG8geW91IHdpbGwgZG8gd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJ0aW5lc3MgYW5kIHBsZWFzdXJlOyBpdCBpcyBzb21ld2hhdCBtb3JlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0LCBhbmQgcmF0aGVyIGEgY29uY2Vzc2lvbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWNlc3NpdGllcyBvZiB0aGUgbW9tZW50IHRoYW4gdG8geW91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2xpbmF0aW9uLCB0aGF0IHdoZW4geW91IGNhbm5vdCBkbyBhIHRoaW5nIHlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBbZWl0aGVyIHByb21pc2VdIG9yIHB1dCB5b3VyIHJlZnVzYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGVhc2FudGx5IDogdGhlIGxhdHRlciBpcyB0aGUgY29uZHVjdCBvZiBhIGdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW4sIHRoZSBmb3JtZXIgb2YgYSBnb29kIGNhbmRpZGF0ZS4gRm9yIHdoZW4gYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgaXMgbWFkZSB3aGljaCB3ZSBjYW5ub3QgZ3JhbnQgd2l0aCBob25vdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciB3aXRob3V0IGxvc3MgdG8gb3Vyc2VsdmVzLCBmb3IgaW5zdGFuY2UsIGlmIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW4gd2VyZSB0byBhc2sgdXMgdG8gYXBwZWFyIGluIGEgc3VpdCBhZ2FpbnN0IGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmllbmQsIGEgcmVmdXNhbCBtdXN0IGJlIGdpdmVuIGluIGEgZ2VudGxlbWFubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXk6IHlvdSBtdXN0IHBvaW50IG91dCB0byBoaW0gdGhhdCB5b3VyIGhhbmRzIGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpZWQsIG11c3Qgc2hldyB0aGF0IHlvdSBhcmUgZXhjZWVkaW5nbHkgc29ycnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVzdCBjb252aW5jZSBoaW0gdGhhdCB5b3Ugd2lsbCBtYWtlIHVwIGZvciBpdCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHdheXMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzc4IiAvPiB0aGUgZm9ydW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBwdXNoaW5nIG9uZSdzIENhbnZhc3MgYXNzaWR1b3VzbHksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3Npbmcgb25lc2VsZiBhZ2FpbiBhbmQgYWdhaW4gdG8gdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzb25zLCB0aGUgbWFraW5nIGl0IGltcG9zc2libGUgKGFzIGZhciBhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG93ZXIgZ29lcykgZm9yIGFueW9uZSB0byBzYXkgdGhhdCBoZSBoYXMgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2tlZCBieSB5b3UsIGFuZCBlYXJuZXN0bHkgYW5kIGNhcmVmdWxseSBhc2tlZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaWJlcmFsaXR5IGlzLCBhZ2Fpbiwgb2Ygd2lkZSBhcHBsaWNhdGlvbiA7IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hld24gaW4gcmVnYXJkIHRvIHRoZSBtYW5hZ2VtZW50IG9mIHlvdXIgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LCB3aGljaCwgZXZlbiBpZiBpdCBkb2VzIG5vdCBhY3R1YWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWNoIHRoZSBtdWx0aXR1ZGUsIHlldCwgaWYgc3Bva2VuIG9mIHdpdGggcHJhaXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgZnJpZW5kcywgZWFybnMgdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlLiBJdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heSBhbHNvIGJlIGRpc3BsYXllZCBpbiBiYW5xdWV0cywgd2hpY2ggeW91IG11c3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlIGNhcmUgdG8gYXR0ZW5kIHlvdXJzZWxmIGFuZCB0byBjYXVzZSB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJpZW5kcyB0byBhdHRlbmQsIHdoZXRoZXIgb3BlbiBvbmVzIG9yIHRob3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmluZWQgdG8gcGFydGljdWxhciB0cmliZXMuIEl0IG1heSwgYWdhaW4sIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkIGluIGdpdmluZyBwcmFjdGljYWwgYXNzaXN0YW5jZSwgd2hpY2ggSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgeW91IHJlbmRlciBhdmFpbGFibGUgZmFyIGFuZCB3aWRlIDogYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY2FyZWZ1bCB0aGVyZWluIHRvIGJlIGFjY2Vzc2libGUgdG8gYWxsIGJ5IGRheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBuaWdodCwgYW5kIG5vdCBvbmx5IGJ5IHRoZSBkb29ycyBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91c2UsIGJ1dCBieSB5b3VyIGZhY2UgYW5kIGNvdW50ZW5hbmNlLCB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkb29yIG9mIHRoZSBtaW5kIGZvciwgaWYgdGhhdCBzaGV3cyB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlbGluZ3MgdG8gYmUgdGhvc2Ugb2YgcmVzZXJ2ZSBhbmQgY29uY2VhbG1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgaXMgb2YgbGl0dGxlIGdvb2QgdG8gaGF2ZSB5b3VyIGhvdXNlIGRvb3JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbi4gRm9yIG1lbiBkZXNpcmUgbm90IG9ubHkgdG8gaGF2ZSBwcm9taXNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgdGhlbSwgZXNwZWNpYWxseSBpbiB0aGVpciBhcHBsaWNhdGlvbnMgdG8gYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSwgYnV0IHRvIGhhdmUgdGhlbSBtYWRlIGluIGEgbGliZXJhbCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGltZW50YXJ5IG1hbm5lci4gQWNjb3JkaW5nbHksIGl0IGlzIGFuIGVhc3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG1ha2UsIHRoYXQgeW91IHNob3VsZCBpbmRpY2F0ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgeW91IGFyZSBnb2luZyB0byBkbyB5b3Ugd2lsbCBkbyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhcnRpbmVzcyBhbmQgcGxlYXN1cmU7IGl0IGlzIHNvbWV3aGF0IG1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHQsIGFuZCByYXRoZXIgYSBjb25jZXNzaW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lY2Vzc2l0aWVzIG9mIHRoZSBtb21lbnQgdGhhbiB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbGluYXRpb24sIHRoYXQgd2hlbiB5b3UgY2Fubm90IGRvIGEgdGhpbmcgeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIFtlaXRoZXIgcHJvbWlzZV0gb3IgcHV0IHlvdXIgcmVmdXNhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsZWFzYW50bHkgOiB0aGUgbGF0dGVyIGlzIHRoZSBjb25kdWN0IG9mIGEgZ29vZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbiwgdGhlIGZvcm1lciBvZiBhIGdvb2QgY2FuZGlkYXRlLiBGb3Igd2hlbiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCBpcyBtYWRlIHdoaWNoIHdlIGNhbm5vdCBncmFudCB3aXRoIGhvbm91cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHdpdGhvdXQgbG9zcyB0byBvdXJzZWx2ZXMsIGZvciBpbnN0YW5jZSwgaWYgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbiB3ZXJlIHRvIGFzayB1cyB0byBhcHBlYXIgaW4gYSBzdWl0IGFnYWluc3QgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyaWVuZCwgYSByZWZ1c2FsIG11c3QgYmUgZ2l2ZW4gaW4gYSBnZW50bGVtYW5seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdheTogeW91IG11c3QgcG9pbnQgb3V0IHRvIGhpbSB0aGF0IHlvdXIgaGFuZHMgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllZCwgbXVzdCBzaGV3IHRoYXQgeW91IGFyZSBleGNlZWRpbmdseSBzb3JyeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXN0IGNvbnZpbmNlIGhpbSB0aGF0IHlvdSB3aWxsIG1ha2UgdXAgZm9yIGl0IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgd2F5cy4gPC90cmFuc2xhdGlvbj4="
translation['volume 1 appendix a.12'] = ""
translation['volume 1 appendix a.13'] = ""
