var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGl0IGlzIHNhaWQgdGhhdCBOdW1hIHdhcyBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgUHl0aGFnb3Jhcywgc29tZSBkZW55IHV0dGVybHkgdGhhdCBOdW1hIGhhZCBhbnkgR3JlZWsgY3VsdHVyZSwgaG9sZGluZyBlaXRoZXIgdGhhdCBoZSB3YXMgbmF0dXJhbGx5IGNhcGFibGUgb2YgYXR0YWluaW5nIGV4Y2VsbGVuY2UgYnkgaGlzIG93biBlZmZvcnRzLCBvciB0aGF0IHRoZSBjdWx0dXJlIG9mIHRoZSBraW5nIHdhcyBkdWUgdG8gc29tZSBCYXJiYXJpYW4gc3VwZXJpb3IgdG8gUHl0aGFnb3Jhcy4gT3RoZXJzIHNheSB0aGF0IFB5dGhhZ29yYXMgdGhlIHBoaWxvc29waGVyIGxpdmVkIGFzIG1hbnkgYXMgZml2ZSBnZW5lcmF0aW9ucyBhZnRlciBOdW1hLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGF0IHRoZXJlIHdhcyBhbm90aGVyIFB5dGhhZ29yYXMsIHRoZSBTcGFydGFuLCB3aG8gd2FzIE9seW1waWMgdmljdG9yIGluIHRoZSBmb290LXJhY2UgZm9yIHRoZSBzaXh0ZWVudGggT2x5bXBpYWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjY1Ny02NTQgQi5DLjwvbm90ZT4gKGluIHRoZSB0aGlyZCB5ZWFyIG9mIHdoaWNoIE51bWEgd2FzIG1hZGUga2luZyksIGFuZCB0aGF0IGluIGhpcyB3YW5kZXJpbmdzIGFib3V0IEl0YWx5IGhlIG1hZGUgdGhlIGFjcXVhaW50YW5jZSBvZiBOdW1hLCBhbmQgaGVscGVkIGhpbSBhcnJhbmdlIHRoZSBnb3Zlcm5tZW50IG9mIHRoZSBjaXR5LCB3aGVuY2UgaXQgY2FtZSBhYm91dCB0aGF0IG1hbnkgU3BhcnRhbiBjdXN0b21zIHdlcmUgbWluZ2xlZCB3aXRoIHRoZSBSb21hbiwgYXMgUHl0aGFnb3JhcyB0YXVnaHQgdGhlbSB0byBOdW1hLiBBbmQgYXQgYWxsIGV2ZW50cywgTnVtYSB3YXMgb2YgU2FiaW5lIGRlc2NlbnQsIGFuZCB0aGUgU2FiaW5lcyB3aWxsIGhhdmUgaXQgdGhhdCB0aGV5IHdlcmUgY29sb25pc3RzIGZyb20gTGFjZWRhZW1vbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNocm9ub2xvZ3ksIGhvd2V2ZXIsIGlzIGhhcmQgdG8gZml4LCBhbmQgZXNwZWNpYWxseSB0aGF0IHdoaWNoIGlzIGJhc2VkIG9uIHRoZSBuYW1lcyBvZiB2aWN0b3JzIGluIHRoZSBPbHltcGljIGdhbWVzLCB0aGUgbGlzdCBvZiB3aGljaCBpcyBzYWlkIHRvIGhhdmUgYmVlbiBwdWJsaXNoZWQgYXQgYSBsYXRlIHBlcmlvZCBieSBIaXBwaWFzIG9mIEVsaXMsIHdobyBoYWQgbm8gZnVsbHkgYXV0aG9yaXRhdGl2ZSBiYXNpcyBmb3IgaGlzIHdvcmsuIEkgc2hhbGwgdGhlcmVmb3JlIGJlZ2luIGF0IGEgY29udmVuaWVudCBwb2ludCwgYW5kIHJlbGF0ZSB0aGUgbm90ZXdvcnRoeSBmYWN0cyB3aGljaCBJIGhhdmUgZm91bmQgaW4gdGhlIGxpZmUgb2YgTnVtYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcnR5LXNldmVuIHllYXJzLCBub3csIFJvbWUgaGFkIGJlZW4gYnVpbHQgYW5kIFJvbXVsdXMgaGFkIGJlZW4gaXRzIGtpbmc7IGFuZCBvbiB0aGUgZmlmdGggb2YgdGhlIG1vbnRoIG9mIEp1bHksIHdoaWNoIGRheSB0aGV5IG5vdyBjYWxsIHRoZSBDYXByYXRpbmUgTm9uZXMsIFJvbXVsdXMgd2FzIG9mZmVyaW5nIGEgcHVibGljIHNhY3JpZmljZSBvdXRzaWRlIHRoZSBjaXR5IGF0IHRoZSBzby1jYWxsZWQgR29hdCdzIE1hcnNoLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNlbmF0ZSBhbmQgbW9zdCBvZiB0aGUgcGVvcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdWRkZW5seSB0aGVyZSB3YXMgYSBncmVhdCBjb21tb3Rpb24gaW4gdGhlIGFpciwgYW5kIGEgY2xvdWQgZGVzY2VuZGVkIHVwb24gdGhlIGVhcnRoIGJyaW5naW5nIHdpdGggaXQgYmxhc3RzIG9mIHdpbmQgYW5kIHJhaW4uIFRoZSB0aHJvbmcgb2YgY29tbW9uIGZvbGsgd2VyZSB0ZXJyaWZpZWQgYW5kIGZsZWQgaW4gYWxsIGRpcmVjdGlvbnMsIGJ1dCBSb211bHVzIGRpc2FwcGVhcmVkLCBhbmQgd2FzIG5ldmVyIGZvdW5kIGFnYWluIGVpdGhlciBhbGl2ZSBvciBkZWFkLiBVcG9uIHRoaXMgYSBncmlldm91cyBzdXNwaWNpb24gYXR0YWNoZWQgaXRzZWxmIHRvIHRoZSBwYXRyaWNpYW5zLCBhbmQgYW4gYWNjdXNpbmcgc3Rvcnkgd2FzIGN1cnJlbnQgYW1vbmcgdGhlIHBlb3BsZSB0byB0aGUgZWZmZWN0IHRoYXQgdGhleSBoYWQgbG9uZyBiZWVuIHdlYXJ5IG9mIGtpbmdseSBydWxlLCBhbmQgZGVzaXJlZCB0byB0cmFuc2ZlciB0aGUgcG93ZXIgdG8gdGhlbXNlbHZlcywgYW5kIGhhZCB0aGVyZWZvcmUgbWFkZSBhd2F5IHdpdGggdGhlIGtpbmcuIEFuZCBpbmRlZWQgaXQgaGFkIGJlZW4gbm90aWNlZCBmb3Igc29tZSB0aW1lIHRoYXQgaGUgdHJlYXRlZCB0aGVtIHdpdGggZ3JlYXRlciBoYXJzaG5lc3MgYW5kIGFycm9nYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdXNwaWNpb24gdGhlIHBhdHJpY2lhbnMgc291Z2h0IHRvIHJlbW92ZSBieSBhc2NyaWJpbmcgZGl2aW5lIGhvbm91cnMgdG8gUm9tdWx1cywgb24gdGhlIGdyb3VuZCB0aGF0IGhlIHdhcyBub3QgZGVhZCwgYnV0IGJsZXNzZWQgd2l0aCBhIGJldHRlciBsb3QuIEFuZCBQcm9jdWx1cywgYSBtYW4gb2YgZW1pbmVuY2UsIHRvb2sgb2F0aCB0aGF0IGhlIGhhZCBzZWVuIFJvbXVsdXMgYXNjZW5kaW5nIHRvIGhlYXZlbiBpbiBmdWxsIGFybW91ciwgYW5kIGhhZCBoZWFyZCBoaXMgdm9pY2UgY29tbWFuZGluZyB0aGF0IGhlIGJlIGNhbGxlZCBRdWlyaW51cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjcuMyIgdmFsaWQ9InllcyI+Um9tdWx1cywgeHh2aWkuIDMteHh2aWlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcnR5LXNldmVuIHllYXJzLCBub3csIFJvbWUgaGFkIGJlZW4gYnVpbHQgYW5kIFJvbXVsdXMgaGFkIGJlZW4gaXRzIGtpbmc7IGFuZCBvbiB0aGUgZmlmdGggb2YgdGhlIG1vbnRoIG9mIEp1bHksIHdoaWNoIGRheSB0aGV5IG5vdyBjYWxsIHRoZSBDYXByYXRpbmUgTm9uZXMsIFJvbXVsdXMgd2FzIG9mZmVyaW5nIGEgcHVibGljIHNhY3JpZmljZSBvdXRzaWRlIHRoZSBjaXR5IGF0IHRoZSBzby1jYWxsZWQgR29hdCdzIE1hcnNoLCBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNlbmF0ZSBhbmQgbW9zdCBvZiB0aGUgcGVvcGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1ZGRlbmx5IHRoZXJlIHdhcyBhIGdyZWF0IGNvbW1vdGlvbiBpbiB0aGUgYWlyLCBhbmQgYSBjbG91ZCBkZXNjZW5kZWQgdXBvbiB0aGUgZWFydGggYnJpbmdpbmcgd2l0aCBpdCBibGFzdHMgb2Ygd2luZCBhbmQgcmFpbi4gVGhlIHRocm9uZyBvZiBjb21tb24gZm9sayB3ZXJlIHRlcnJpZmllZCBhbmQgZmxlZCBpbiBhbGwgZGlyZWN0aW9ucywgYnV0IFJvbXVsdXMgZGlzYXBwZWFyZWQsIGFuZCB3YXMgbmV2ZXIgZm91bmQgYWdhaW4gZWl0aGVyIGFsaXZlIG9yIGRlYWQuIFVwb24gdGhpcyBhIGdyaWV2b3VzIHN1c3BpY2lvbiBhdHRhY2hlZCBpdHNlbGYgdG8gdGhlIHBhdHJpY2lhbnMsIGFuZCBhbiBhY2N1c2luZyBzdG9yeSB3YXMgY3VycmVudCBhbW9uZyB0aGUgcGVvcGxlIHRvIHRoZSBlZmZlY3QgdGhhdCB0aGV5IGhhZCBsb25nIGJlZW4gd2Vhcnkgb2Yga2luZ2x5IHJ1bGUsIGFuZCBkZXNpcmVkIHRvIHRyYW5zZmVyIHRoZSBwb3dlciB0byB0aGVtc2VsdmVzLCBhbmQgaGFkIHRoZXJlZm9yZSBtYWRlIGF3YXkgd2l0aCB0aGUga2luZy4gQW5kIGluZGVlZCBpdCBoYWQgYmVlbiBub3RpY2VkIGZvciBzb21lIHRpbWUgdGhhdCBoZSB0cmVhdGVkIHRoZW0gd2l0aCBncmVhdGVyIGhhcnNobmVzcyBhbmQgYXJyb2dhbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3VzcGljaW9uIHRoZSBwYXRyaWNpYW5zIHNvdWdodCB0byByZW1vdmUgYnkgYXNjcmliaW5nIGRpdmluZSBob25vdXJzIHRvIFJvbXVsdXMsIG9uIHRoZSBncm91bmQgdGhhdCBoZSB3YXMgbm90IGRlYWQsIGJ1dCBibGVzc2VkIHdpdGggYSBiZXR0ZXIgbG90LiBBbmQgUHJvY3VsdXMsIGEgbWFuIG9mIGVtaW5lbmNlLCB0b29rIG9hdGggdGhhdCBoZSBoYWQgc2VlbiBSb211bHVzIGFzY2VuZGluZyB0byBoZWF2ZW4gaW4gZnVsbCBhcm1vdXIsIGFuZCBoYWQgaGVhcmQgaGlzIHZvaWNlIGNvbW1hbmRpbmcgdGhhdCBoZSBiZSBjYWxsZWQgUXVpcmludXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyNy4zIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4eHZpaS4gMy14eHZpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjcuMyIgdmFsaWQ9InllcyI+Um9tdWx1cywgeHh2aWkuIDMteHh2aWlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNpdHkgd2FzIG5vdyBiZXNldCB3aXRoIGZyZXNoIGRpc3R1cmJhbmNlIGFuZCBmYWN0aW9uIG92ZXIgdGhlIGtpbmcgdG8gYmUgYXBwb2ludGVkIGluIGhpcyBzdGVhZCwgZm9yIHRoZSBuZXcgY29tZXJzIHdlcmUgbm90IHlldCBhbHRvZ2V0aGVyIGJsZW5kZWQgd2l0aCB0aGUgb3JpZ2luYWwgY2l0aXplbnMsIGJ1dCB0aGUgY29tbW9uYWx0eSB3YXMgc3RpbGwgbGlrZSBhIHN1cmdpbmcgc2VhLCBhbmQgdGhlIHBhdHJpY2lhbnMgZnVsbCBvZiBqZWFsb3VzeSB0b3dhcmRzIG9uZSBhbm90aGVyIG9uIGFjY291bnQgb2YgdGhlaXIgZGlmZmVyZW50IG5hdGlvbmFsaXRpZXMuIEl0IGlzIGluZGVlZCB0cnVlIHRoYXQgaXQgd2FzIHRoZSBwbGVhc3VyZSBvZiBhbGwgdG8gaGF2ZSBhIGtpbmcsIGJ1dCB0aGV5IHdyYW5nbGVkIGFuZCBxdWFycmVsbGVkLCBub3Qgb25seSBhYm91dCB0aGUgbWFuIHdobyBzaG91bGQgYmUgdGhlaXIgbGVhZGVyLCBidXQgYWxzbyBhYm91dCB0aGUgdHJpYmUgd2hpY2ggc2hvdWxkIGZ1cm5pc2ggaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvc2Ugd2hvIGhhZCBidWlsdCB0aGUgY2l0eSB3aXRoIFJvbXVsdXMgYXQgdGhlIG91dHNldCB0aG91Z2h0IGl0IGludG9sZXJhYmxlIHRoYXQgdGhlIFNhYmluZXMsIGFmdGVyIGdldHRpbmcgYSBzaGFyZSBpbiB0aGUgY2l0eSBhbmQgaXRzIHRlcnJpdG9yeSwgc2hvdWxkIGluc2lzdCBvbiBydWxpbmcgdGhvc2Ugd2hvIGhhZCByZWNlaXZlZCB0aGVtIGludG8gc3VjaCBwcml2aWxlZ2VzOyBhbmQgdGhlIFNhYmluZXMsIHNpbmNlIG9uIHRoZSBkZWF0aCBvZiB0aGVpciBraW5nIFRhdGl1cyB0aGV5IGhhZCByYWlzZWQgbm8gZmFjdGlvbiBhZ2FpbnN0IFJvbXVsdXMsIGJ1dCBzdWZmZXJlZCBoaW0gdG8gcnVsZSBhbG9uZSwgaGFkIGEgcmVhc29uYWJsZSBncm91bmQgZm9yIGRlbWFuZGluZyB0aGF0IG5vdyB0aGUgcnVsZXIgc2hvdWxkIGNvbWUgZnJvbSB0aGVtLiBUaGV5IHdvdWxkIG5vdCBhZG1pdCB0aGF0IHRoZXkgaGFkIGFkZGVkIHRoZW1zZWx2ZXMgYXMgaW5mZXJpb3JzIHRvIHN1cGVyaW9ycywgYnV0IGhlbGQgcmF0aGVyIHRoYXQgdGhlaXIgYWRkaXRpb24gaGFkIGJyb3VnaHQgdGhlIHN0cmVuZ3RoIG9mIG51bWJlcnMgYW5kIGFkdmFuY2VkIGJvdGggcGFydGllcyBhbGlrZSB0byB0aGUgZGlnbml0eSBvZiBhIGNpdHkuIE9uIHRoZXNlIHF1ZXN0aW9ucywgdGhlbiwgdGhleSB3ZXJlIGRpdmlkZWQgaW50byBmYWN0aW9ucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjaXR5IHdhcyBub3cgYmVzZXQgd2l0aCBmcmVzaCBkaXN0dXJiYW5jZSBhbmQgZmFjdGlvbiBvdmVyIHRoZSBraW5nIHRvIGJlIGFwcG9pbnRlZCBpbiBoaXMgc3RlYWQsIGZvciB0aGUgbmV3IGNvbWVycyB3ZXJlIG5vdCB5ZXQgYWx0b2dldGhlciBibGVuZGVkIHdpdGggdGhlIG9yaWdpbmFsIGNpdGl6ZW5zLCBidXQgdGhlIGNvbW1vbmFsdHkgd2FzIHN0aWxsIGxpa2UgYSBzdXJnaW5nIHNlYSwgYW5kIHRoZSBwYXRyaWNpYW5zIGZ1bGwgb2YgamVhbG91c3kgdG93YXJkcyBvbmUgYW5vdGhlciBvbiBhY2NvdW50IG9mIHRoZWlyIGRpZmZlcmVudCBuYXRpb25hbGl0aWVzLiBJdCBpcyBpbmRlZWQgdHJ1ZSB0aGF0IGl0IHdhcyB0aGUgcGxlYXN1cmUgb2YgYWxsIHRvIGhhdmUgYSBraW5nLCBidXQgdGhleSB3cmFuZ2xlZCBhbmQgcXVhcnJlbGxlZCwgbm90IG9ubHkgYWJvdXQgdGhlIG1hbiB3aG8gc2hvdWxkIGJlIHRoZWlyIGxlYWRlciwgYnV0IGFsc28gYWJvdXQgdGhlIHRyaWJlIHdoaWNoIHNob3VsZCBmdXJuaXNoIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG9zZSB3aG8gaGFkIGJ1aWx0IHRoZSBjaXR5IHdpdGggUm9tdWx1cyBhdCB0aGUgb3V0c2V0IHRob3VnaHQgaXQgaW50b2xlcmFibGUgdGhhdCB0aGUgU2FiaW5lcywgYWZ0ZXIgZ2V0dGluZyBhIHNoYXJlIGluIHRoZSBjaXR5IGFuZCBpdHMgdGVycml0b3J5LCBzaG91bGQgaW5zaXN0IG9uIHJ1bGluZyB0aG9zZSB3aG8gaGFkIHJlY2VpdmVkIHRoZW0gaW50byBzdWNoIHByaXZpbGVnZXM7IGFuZCB0aGUgU2FiaW5lcywgc2luY2Ugb24gdGhlIGRlYXRoIG9mIHRoZWlyIGtpbmcgVGF0aXVzIHRoZXkgaGFkIHJhaXNlZCBubyBmYWN0aW9uIGFnYWluc3QgUm9tdWx1cywgYnV0IHN1ZmZlcmVkIGhpbSB0byBydWxlIGFsb25lLCBoYWQgYSByZWFzb25hYmxlIGdyb3VuZCBmb3IgZGVtYW5kaW5nIHRoYXQgbm93IHRoZSBydWxlciBzaG91bGQgY29tZSBmcm9tIHRoZW0uIFRoZXkgd291bGQgbm90IGFkbWl0IHRoYXQgdGhleSBoYWQgYWRkZWQgdGhlbXNlbHZlcyBhcyBpbmZlcmlvcnMgdG8gc3VwZXJpb3JzLCBidXQgaGVsZCByYXRoZXIgdGhhdCB0aGVpciBhZGRpdGlvbiBoYWQgYnJvdWdodCB0aGUgc3RyZW5ndGggb2YgbnVtYmVycyBhbmQgYWR2YW5jZWQgYm90aCBwYXJ0aWVzIGFsaWtlIHRvIHRoZSBkaWduaXR5IG9mIGEgY2l0eS4gT24gdGhlc2UgcXVlc3Rpb25zLCB0aGVuLCB0aGV5IHdlcmUgZGl2aWRlZCBpbnRvIGZhY3Rpb25zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gb3JkZXIgdGhhdCB0aGVpciBmYWN0aW9ucyBtaWdodCBub3QgcHJvZHVjZSB1dHRlciBjb25mdXNpb24gZnJvbSB0aGUgYWJzZW5jZSBvZiBhbGwgYXV0aG9yaXR5LCBub3cgdGhhdCB0aGUgYWRtaW5pc3RyYXRpb24gb2YgYWZmYWlycyB3YXMgc3VzcGVuZGVkLCBpdCB3YXMgYXJyYW5nZWQgYnkgdGhlIHNlbmF0b3JzLCB3aG8gd2VyZSBvbmUgaHVuZHJlZCBhbmQgZmlmdHkgaW4gbnVtYmVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyMC4xIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4eC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBlYWNoIG9mIHRoZW0gaW4gaGlzIHR1cm4gc2hvdWxkIGFzc3VtZSB0aGUgaW5zaWduaWEgb2Ygcm95YWx0eSwgbWFrZSB0aGUgY3VzdG9tYXJ5IHNhY3JpZmljZXMgdG8gdGhlIGdvZHMsIGFuZCB0cmFuc2FjdCBwdWJsaWMgYnVzaW5lc3MsIGZvciB0aGUgc3BhY2Ugb2Ygc2l4IGhvdXJzIGJ5IGRheSBhbmQgc2l4IGhvdXJzIGJ5IG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGRpc3RyaWJ1dGlvbiBvZiB0aW1lcyBzZWVtZWQgd2VsbCBhZGFwdGVkIHRvIHNlY3VyZSBlcXVhbGl0eSBiZXR3ZWVuIHRoZSB0d28gZmFjdGlvbnMsIGFuZCB0aGUgdHJhbnNmZXIgb2YgcG93ZXIgbGlrZWx5IHRvIHJlbW92ZSBhbGwgamVhbG91c3kgb24gdGhlIHBhcnQgb2YgdGhlIHBlb3BsZSwgd2hlbiB0aGV5IHNhdyB0aGUgc2FtZSBtYW4sIGluIHRoZSBjb3Vyc2Ugb2YgYSBzaW5nbGUgZGF5IGFuZCBuaWdodCwgYmVjb21lIGtpbmcgYW5kIHRoZW4gYSBwcml2YXRlIGNpdGl6ZW4gYWdhaW4uIFRoaXMgZm9ybSBvZiBnb3Zlcm5tZW50IHRoZSBSb21hbnMgY2FsbCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmludGVycmVnbnVtLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBvcmRlciB0aGF0IHRoZWlyIGZhY3Rpb25zIG1pZ2h0IG5vdCBwcm9kdWNlIHV0dGVyIGNvbmZ1c2lvbiBmcm9tIHRoZSBhYnNlbmNlIG9mIGFsbCBhdXRob3JpdHksIG5vdyB0aGF0IHRoZSBhZG1pbmlzdHJhdGlvbiBvZiBhZmZhaXJzIHdhcyBzdXNwZW5kZWQsIGl0IHdhcyBhcnJhbmdlZCBieSB0aGUgc2VuYXRvcnMsIHdobyB3ZXJlIG9uZSBodW5kcmVkIGFuZCBmaWZ0eSBpbiBudW1iZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyMC4xIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4eC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBlYWNoIG9mIHRoZW0gaW4gaGlzIHR1cm4gc2hvdWxkIGFzc3VtZSB0aGUgaW5zaWduaWEgb2Ygcm95YWx0eSwgbWFrZSB0aGUgY3VzdG9tYXJ5IHNhY3JpZmljZXMgdG8gdGhlIGdvZHMsIGFuZCB0cmFuc2FjdCBwdWJsaWMgYnVzaW5lc3MsIGZvciB0aGUgc3BhY2Ugb2Ygc2l4IGhvdXJzIGJ5IGRheSBhbmQgc2l4IGhvdXJzIGJ5IG5pZ2h0LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjAuMSIgdmFsaWQ9InllcyI+Um9tdWx1cywgeHguIDEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGlzdHJpYnV0aW9uIG9mIHRpbWVzIHNlZW1lZCB3ZWxsIGFkYXB0ZWQgdG8gc2VjdXJlIGVxdWFsaXR5IGJldHdlZW4gdGhlIHR3byBmYWN0aW9ucywgYW5kIHRoZSB0cmFuc2ZlciBvZiBwb3dlciBsaWtlbHkgdG8gcmVtb3ZlIGFsbCBqZWFsb3VzeSBvbiB0aGUgcGFydCBvZiB0aGUgcGVvcGxlLCB3aGVuIHRoZXkgc2F3IHRoZSBzYW1lIG1hbiwgaW4gdGhlIGNvdXJzZSBvZiBhIHNpbmdsZSBkYXkgYW5kIG5pZ2h0LCBiZWNvbWUga2luZyBhbmQgdGhlbiBhIHByaXZhdGUgY2l0aXplbiBhZ2Fpbi4gVGhpcyBmb3JtIG9mIGdvdmVybm1lbnQgdGhlIFJvbWFucyBjYWxsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbnRlcnJlZ251bS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFsdGhvdWdoIGluIHRoaXMgd2F5IHRoZSBzZW5hdG9ycyB3ZXJlIHRob3VnaHQgdG8gcnVsZSBjb25zdGl0dXRpb25hbGx5IGFuZCB3aXRob3V0IG9wcHJlc3Npb24sIHRoZXkgcm91c2VkIHN1c3BpY2lvbnMgYW5kIGNsYW1vcm91cyBjaGFyZ2VzIHRoYXQgdGhleSBoYWQgY2hhbmdlZCB0aGUgZm9ybSBvZiBnb3Zlcm5tZW50IHRvIGFuIG9saWdhcmNoeSwgYW5kIHdlcmUgaG9sZGluZyB0aGUgc3RhdGUgaW4gdHV0ZWxhZ2UgYW1vbmcgdGhlbXNlbHZlcywgYW5kIHdlcmUgdW53aWxsaW5nIHRvIGJlIHJ1bGVkIGJ5IGEga2luZy4gVGhlcmVmb3JlIGl0IHdhcyBhZ3JlZWQgYnkgYm90aCBmYWN0aW9ucyB0aGF0IG9uZSBzaG91bGQgYXBwb2ludCBhIGtpbmcgZnJvbSB0aGUgb3RoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRob3VnaHQgdGhlIGJlc3Qgd2F5IHRvIGVuZCB0aGVpciBwcmV2YWlsaW5nIHBhcnRpc2Fuc2hpcCwgYW5kIHRoZSBraW5nIHRodXMgYXBwb2ludGVkIHdvdWxkIGJlIGVxdWFsbHkgd2VsbC1kaXNwb3NlZCB0byBib3RoIHBhcnRpZXMsIGJlaW5nIGdyYWNpb3VzIHRvIHRoZSBvbmUgYXMgaGlzIGVsZWN0b3JzLCBhbmQgZnJpZW5kbHkgdG8gdGhlIG90aGVyIGJlY2F1c2Ugb2YgaGlzIGtpbnNoaXAgd2l0aCB0aGVtLiBUaGVuLCBhcyB0aGUgU2FiaW5lcyBnYXZlIHRoZSBSb21hbnMgdGhlaXIgb3B0aW9uIGluIHRoZSBtYXR0ZXIsIGl0IHNlZW1lZCB0byB0aGVtIGJldHRlciB0byBoYXZlIGEgU2FiaW5lIGtpbmcgb2YgdGhlaXIgb3duIG5vbWluYXRpb24sIHRoYW4gdG8gaGF2ZSBhIFJvbWFuIG1hZGUga2luZyBieSB0aGUgU2FiaW5lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0b29rIGNvdW5zZWwsIHRoZXJlZm9yZSwgYW1vbmcgdGhlbXNlbHZlcywgYW5kIG5vbWluYXRlZCBOdW1hIFBvbXBpbGl1cyBmcm9tIGFtb25nIHRoZSBTYWJpbmVzLCBhIG1hbiB3aG8gaGFkIG5vdCBqb2luZWQgdGhlIGVtaWdyYW50cyB0byBSb21lLCBidXQgd2FzIHNvIHVuaXZlcnNhbGx5IGNlbGVicmF0ZWQgZm9yIGhpcyB2aXJ0dWVzIHRoYXQsIHdoZW4gaGUgd2FzIG5vbWluYXRlZCwgdGhlIFNhYmluZXMgYWNjZXB0ZWQgaGltIHdpdGggZXZlbiBncmVhdGVyIHJlYWRpbmVzcyB0aGFuIHRob3NlIHdobyBoYWQgY2hvc2VuIGhpbS4gQWNjb3JkaW5nbHksIGFmdGVyIG1ha2luZyB0aGVpciBkZWNpc2lvbiBrbm93biB0byB0aGUgcGVvcGxlLCB0aGUgbGVhZGluZyBzZW5hdG9ycyBvZiBib3RoIHBhcnRpZXMgd2VyZSBzZW50IGFzIGFtYmFzc2Fkb3JzIHRvIE51bWEsIGJlZ2dpbmcgaGltIHRvIGNvbWUgYW5kIGFzc3VtZSB0aGUgcm95YWwgcG93ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWx0aG91Z2ggaW4gdGhpcyB3YXkgdGhlIHNlbmF0b3JzIHdlcmUgdGhvdWdodCB0byBydWxlIGNvbnN0aXR1dGlvbmFsbHkgYW5kIHdpdGhvdXQgb3BwcmVzc2lvbiwgdGhleSByb3VzZWQgc3VzcGljaW9ucyBhbmQgY2xhbW9yb3VzIGNoYXJnZXMgdGhhdCB0aGV5IGhhZCBjaGFuZ2VkIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQgdG8gYW4gb2xpZ2FyY2h5LCBhbmQgd2VyZSBob2xkaW5nIHRoZSBzdGF0ZSBpbiB0dXRlbGFnZSBhbW9uZyB0aGVtc2VsdmVzLCBhbmQgd2VyZSB1bndpbGxpbmcgdG8gYmUgcnVsZWQgYnkgYSBraW5nLiBUaGVyZWZvcmUgaXQgd2FzIGFncmVlZCBieSBib3RoIGZhY3Rpb25zIHRoYXQgb25lIHNob3VsZCBhcHBvaW50IGEga2luZyBmcm9tIHRoZSBvdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRob3VnaHQgdGhlIGJlc3Qgd2F5IHRvIGVuZCB0aGVpciBwcmV2YWlsaW5nIHBhcnRpc2Fuc2hpcCwgYW5kIHRoZSBraW5nIHRodXMgYXBwb2ludGVkIHdvdWxkIGJlIGVxdWFsbHkgd2VsbC1kaXNwb3NlZCB0byBib3RoIHBhcnRpZXMsIGJlaW5nIGdyYWNpb3VzIHRvIHRoZSBvbmUgYXMgaGlzIGVsZWN0b3JzLCBhbmQgZnJpZW5kbHkgdG8gdGhlIG90aGVyIGJlY2F1c2Ugb2YgaGlzIGtpbnNoaXAgd2l0aCB0aGVtLiBUaGVuLCBhcyB0aGUgU2FiaW5lcyBnYXZlIHRoZSBSb21hbnMgdGhlaXIgb3B0aW9uIGluIHRoZSBtYXR0ZXIsIGl0IHNlZW1lZCB0byB0aGVtIGJldHRlciB0byBoYXZlIGEgU2FiaW5lIGtpbmcgb2YgdGhlaXIgb3duIG5vbWluYXRpb24sIHRoYW4gdG8gaGF2ZSBhIFJvbWFuIG1hZGUga2luZyBieSB0aGUgU2FiaW5lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdG9vayBjb3Vuc2VsLCB0aGVyZWZvcmUsIGFtb25nIHRoZW1zZWx2ZXMsIGFuZCBub21pbmF0ZWQgTnVtYSBQb21waWxpdXMgZnJvbSBhbW9uZyB0aGUgU2FiaW5lcywgYSBtYW4gd2hvIGhhZCBub3Qgam9pbmVkIHRoZSBlbWlncmFudHMgdG8gUm9tZSwgYnV0IHdhcyBzbyB1bml2ZXJzYWxseSBjZWxlYnJhdGVkIGZvciBoaXMgdmlydHVlcyB0aGF0LCB3aGVuIGhlIHdhcyBub21pbmF0ZWQsIHRoZSBTYWJpbmVzIGFjY2VwdGVkIGhpbSB3aXRoIGV2ZW4gZ3JlYXRlciByZWFkaW5lc3MgdGhhbiB0aG9zZSB3aG8gaGFkIGNob3NlbiBoaW0uIEFjY29yZGluZ2x5LCBhZnRlciBtYWtpbmcgdGhlaXIgZGVjaXNpb24ga25vd24gdG8gdGhlIHBlb3BsZSwgdGhlIGxlYWRpbmcgc2VuYXRvcnMgb2YgYm90aCBwYXJ0aWVzIHdlcmUgc2VudCBhcyBhbWJhc3NhZG9ycyB0byBOdW1hLCBiZWdnaW5nIGhpbSB0byBjb21lIGFuZCBhc3N1bWUgdGhlIHJveWFsIHBvd2VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5OdW1hIGJlbG9uZ2VkIHRvIGEgY29uc3BpY3VvdXMgY2l0eSBvZiB0aGUgU2FiaW5lcyBjYWxsZWQgQ3VyZXMsIGZyb20gd2hpY2ggdGhlIFJvbWFucywgdG9nZXRoZXIgd2l0aCB0aGUgaW5jb3Jwb3JhdGVkIFNhYmluZXMsIHRvb2sgdGhlIGpvaW50IG5hbWUgb2YgUXVpcml0ZXMuIEhlIHdhcyBhIHNvbiBvZiBQb21wb24sIGFuIGlsbHVzdHJpb3VzIG1hbiwgYW5kIHdhcyB0aGUgeW91bmdlc3Qgb2YgZm91ciBicm90aGVycy4gSGUgd2FzIGJvcm4sIG1vcmVvdmVyLCBieSBzb21lIGRpdmluZSBmZWxpY2l0eSwgb24gdGhlIHZlcnkgZGF5IHdoZW4gUm9tZSB3YXMgZm91bmRlZCBieSBSb211bHVzLCB0aGF0IGlzLCB0aGUgdHdlbnR5LWZpcnN0IGRheSBvZiBBcHJpbC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMTIuMSIgdmFsaWQ9InllcyI+Um9tdWx1cywgeGlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IG5hdHVyYWwgdGVtcGVyYW1lbnQgaGUgd2FzIGluY2xpbmVkIHRvIHRoZSBwcmFjdGljZSBvZiBldmVyeSB2aXJ0dWUsIGFuZCBoZSBoYWQgc3ViZHVlZCBoaW1zZWxmIHN0aWxsIG1vcmUgYnkgZGlzY2lwbGluZSwgZW5kdXJhbmNlIG9mIGhhcmRzaGlwcywgYW5kIHRoZSBzdHVkeSBvZiB3aXNkb20uIEhlIGhhZCB0aHVzIHB1dCBhd2F5IGZyb20gaGltc2VsZiBub3Qgb25seSB0aGUgaW5mYW1vdXMgcGFzc2lvbnMgb2YgdGhlIHNvdWwsIGJ1dCBhbHNvIHRoYXQgdmlvbGVuY2UgYW5kIHJhcGFjaXR5IHdoaWNoIGFyZSBpbiBzdWNoIGhpZ2ggcmVwdXRlIGFtb25nIEJhcmJhcmlhbnMsIGJlbGlldmluZyB0aGF0IHRydWUgYnJhdmVyeSBjb25zaXN0ZWQgaW4gdGhlIHN1Ymp1Z2F0aW9uIG9mIG9uZSdzIHBhc3Npb25zIGJ5IHJlYXNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBhY2NvdW50IGhlIGJhbmlzaGVkIGZyb20gaGlzIGhvdXNlIGFsbCBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZSwgYW5kIHdoaWxlIGNpdGl6ZW4gYW5kIHN0cmFuZ2VyIGFsaWtlIGZvdW5kIGluIGhpbSBhIGZhdWx0bGVzcyBqdWRnZSBhbmQgY291bnNlbGxvciwgaGUgZGV2b3RlZCBoaXMgaG91cnMgb2YgcHJpdmFjeSBhbmQgbGVpc3VyZSwgbm90IHRvIGVuam95bWVudHMgYW5kIG1vbmV5LW1ha2luZywgYnV0IHRvIHRoZSBzZXJ2aWNlIG9mIHRoZSBnb2RzLCBhbmQgdGhlIHJhdGlvbmFsIGNvbnRlbXBsYXRpb24gb2YgdGhlaXIgbmF0dXJlIGFuZCBwb3dlci4gSW4gY29uc2VxdWVuY2UgaGUgaGFkIGEgZ3JlYXQgbmFtZSBhbmQgZmFtZSwgc28gdGhhdCBUYXRpdXMsIHRoZSByb3lhbCBjb2xsZWFndWUgb2YgUm9tdWx1cyBhdCBSb21lLCBtYWRlIGhpbSB0aGUgaHVzYmFuZCBvZiBoaXMgb25seSBkYXVnaHRlciwgVGF0aWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBub3QsIGhvd2V2ZXIsIHNvIGV4YWx0ZWQgYnkgaGlzIG1hcnJpYWdlIGFzIHRvIGdvIHRvIGR3ZWxsIHdpdGggaGlzIHJveWFsIGZhdGhlci1pbi1sYXcsIGJ1dCByZW1haW5lZCBhbW9uZyB0aGUgU2FiaW5lcyBtaW5pc3RlcmluZyB0byBoaXMgYWdlZCBmYXRoZXIuIFRhdGlhLCB0b28sIHByZWZlcnJlZCB0aGUgcXVpZXQgbGlmZSB3aGljaCBoZXIgaHVzYmFuZCBsZWQgYXMgYSBwcml2YXRlIGNpdGl6ZW4gdG8gdGhlIGhvbm91ciBhbmQgZmFtZSB3aGljaCBzaGUgaGFkIGVuam95ZWQgYXQgUm9tZSBiZWNhdXNlIG9mIGhlciBmYXRoZXIuIEJ1dCBzaGUgZGllZCwgYXMgd2UgYXJlIHRvbGQsIGluIHRoZSB0aGlydGVlbnRoIHllYXIgYWZ0ZXIgaGVyIG1hcnJpYWdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk51bWEgYmVsb25nZWQgdG8gYSBjb25zcGljdW91cyBjaXR5IG9mIHRoZSBTYWJpbmVzIGNhbGxlZCBDdXJlcywgZnJvbSB3aGljaCB0aGUgUm9tYW5zLCB0b2dldGhlciB3aXRoIHRoZSBpbmNvcnBvcmF0ZWQgU2FiaW5lcywgdG9vayB0aGUgam9pbnQgbmFtZSBvZiBRdWlyaXRlcy4gSGUgd2FzIGEgc29uIG9mIFBvbXBvbiwgYW4gaWxsdXN0cmlvdXMgbWFuLCBhbmQgd2FzIHRoZSB5b3VuZ2VzdCBvZiBmb3VyIGJyb3RoZXJzLiBIZSB3YXMgYm9ybiwgbW9yZW92ZXIsIGJ5IHNvbWUgZGl2aW5lIGZlbGljaXR5LCBvbiB0aGUgdmVyeSBkYXkgd2hlbiBSb21lIHdhcyBmb3VuZGVkIGJ5IFJvbXVsdXMsIHRoYXQgaXMsIHRoZSB0d2VudHktZmlyc3QgZGF5IG9mIEFwcmlsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMTIuMSIgdmFsaWQ9InllcyI+Um9tdWx1cywgeGlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxMi4xIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4aWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ5IG5hdHVyYWwgdGVtcGVyYW1lbnQgaGUgd2FzIGluY2xpbmVkIHRvIHRoZSBwcmFjdGljZSBvZiBldmVyeSB2aXJ0dWUsIGFuZCBoZSBoYWQgc3ViZHVlZCBoaW1zZWxmIHN0aWxsIG1vcmUgYnkgZGlzY2lwbGluZSwgZW5kdXJhbmNlIG9mIGhhcmRzaGlwcywgYW5kIHRoZSBzdHVkeSBvZiB3aXNkb20uIEhlIGhhZCB0aHVzIHB1dCBhd2F5IGZyb20gaGltc2VsZiBub3Qgb25seSB0aGUgaW5mYW1vdXMgcGFzc2lvbnMgb2YgdGhlIHNvdWwsIGJ1dCBhbHNvIHRoYXQgdmlvbGVuY2UgYW5kIHJhcGFjaXR5IHdoaWNoIGFyZSBpbiBzdWNoIGhpZ2ggcmVwdXRlIGFtb25nIEJhcmJhcmlhbnMsIGJlbGlldmluZyB0aGF0IHRydWUgYnJhdmVyeSBjb25zaXN0ZWQgaW4gdGhlIHN1Ymp1Z2F0aW9uIG9mIG9uZSdzIHBhc3Npb25zIGJ5IHJlYXNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgYWNjb3VudCBoZSBiYW5pc2hlZCBmcm9tIGhpcyBob3VzZSBhbGwgbHV4dXJ5IGFuZCBleHRyYXZhZ2FuY2UsIGFuZCB3aGlsZSBjaXRpemVuIGFuZCBzdHJhbmdlciBhbGlrZSBmb3VuZCBpbiBoaW0gYSBmYXVsdGxlc3MganVkZ2UgYW5kIGNvdW5zZWxsb3IsIGhlIGRldm90ZWQgaGlzIGhvdXJzIG9mIHByaXZhY3kgYW5kIGxlaXN1cmUsIG5vdCB0byBlbmpveW1lbnRzIGFuZCBtb25leS1tYWtpbmcsIGJ1dCB0byB0aGUgc2VydmljZSBvZiB0aGUgZ29kcywgYW5kIHRoZSByYXRpb25hbCBjb250ZW1wbGF0aW9uIG9mIHRoZWlyIG5hdHVyZSBhbmQgcG93ZXIuIEluIGNvbnNlcXVlbmNlIGhlIGhhZCBhIGdyZWF0IG5hbWUgYW5kIGZhbWUsIHNvIHRoYXQgVGF0aXVzLCB0aGUgcm95YWwgY29sbGVhZ3VlIG9mIFJvbXVsdXMgYXQgUm9tZSwgbWFkZSBoaW0gdGhlIGh1c2JhbmQgb2YgaGlzIG9ubHkgZGF1Z2h0ZXIsIFRhdGlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBub3QsIGhvd2V2ZXIsIHNvIGV4YWx0ZWQgYnkgaGlzIG1hcnJpYWdlIGFzIHRvIGdvIHRvIGR3ZWxsIHdpdGggaGlzIHJveWFsIGZhdGhlci1pbi1sYXcsIGJ1dCByZW1haW5lZCBhbW9uZyB0aGUgU2FiaW5lcyBtaW5pc3RlcmluZyB0byBoaXMgYWdlZCBmYXRoZXIuIFRhdGlhLCB0b28sIHByZWZlcnJlZCB0aGUgcXVpZXQgbGlmZSB3aGljaCBoZXIgaHVzYmFuZCBsZWQgYXMgYSBwcml2YXRlIGNpdGl6ZW4gdG8gdGhlIGhvbm91ciBhbmQgZmFtZSB3aGljaCBzaGUgaGFkIGVuam95ZWQgYXQgUm9tZSBiZWNhdXNlIG9mIGhlciBmYXRoZXIuIEJ1dCBzaGUgZGllZCwgYXMgd2UgYXJlIHRvbGQsIGluIHRoZSB0aGlydGVlbnRoIHllYXIgYWZ0ZXIgaGVyIG1hcnJpYWdlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTnVtYSwgZm9yc2FraW5nIHRoZSB3YXlzIG9mIGNpdHkgZm9saywgZGV0ZXJtaW5lZCB0byBsaXZlIGZvciB0aGUgbW9zdCBwYXJ0IGluIGNvdW50cnkgcGxhY2VzLCBhbmQgdG8gd2FuZGVyIHRoZXJlIGFsb25lLCBwYXNzaW5nIGhpcyBkYXlzIGluIGdyb3ZlcyBvZiB0aGUgZ29kcywgc2FjcmVkIG1lYWRvd3MsIGFuZCBzb2xpdHVkZXMuIFRoaXMsIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCBnYXZlIHJpc2UgdG8gdGhlIHN0b3J5IGFib3V0IGhpcyBnb2RkZXNzLiBJdCB3YXMgbm90LCBzbyB0aGUgc3RvcnkgcmFuLCBmcm9tIGFueSBkaXN0cmVzcyBvciBhYmVycmF0aW9uIG9mIHNwaXJpdCB0aGF0IGhlIGZvcnNvb2sgdGhlIHdheXMgb2YgbWVuLCBidXQgaGUgaGFkIHRhc3RlZCB0aGUgam95IG9mIG1vcmUgYXVndXN0IGNvbXBhbmlvbnNoaXAgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGhhZCBiZWVuIGhvbm91cmVkIHdpdGggYSBjZWxlc3RpYWwgbWFycmlhZ2U7IHRoZSBnb2RkZXNzIEVnZXJpYSBsb3ZlZCBoaW0gYW5kIGJlc3Rvd2VkIGhlcnNlbGYgdXBvbiBoaW0sIGFuZCBpdCB3YXMgaGlzIGNvbW11bmlvbiB3aXRoIGhlciB0aGF0IGdhdmUgaGltIGEgbGlmZSBvZiBibGVzc2VkbmVzcyBhbmQgYSB3aXNkb20gbW9yZSB0aGFuIGh1bWFuLiBIb3dldmVyLCB0aGF0IHRoaXMgc3RvcnkgcmVzZW1ibGVzIG1hbnkgb2YgdGhlIHZlcnkgYW5jaWVudCB0YWxlcyB3aGljaCB0aGUgUGhyeWdpYW5zIGhhdmUgcmVjZWl2ZWQgYW5kIGNoZXJpc2hlZCBjb25jZXJuaW5nIEF0dGlzLCB0aGUgQml0aHluaWFucyBjb25jZXJuaW5nIEhlcm9kb3R1cywgdGhlIEFyY2FkaWFucyBjb25jZXJuaW5nIEVuZHltaW9uLCBhbmQgb3RoZXIgcGVvcGxlcyBjb25jZXJuaW5nIG90aGVyIG1vcnRhbHMgd2hvIHdlcmUgdGhvdWdodCB0byBoYXZlIGFjaGlldmVkIGEgbGlmZSBvZiBibGVzc2VkbmVzcyBpbiB0aGUgbG92ZSBvZiB0aGUgZ29kcywgaXMgcXVpdGUgZXZpZGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXJlIGlzIHNvbWUgcmVhc29uIGluIHN1cHBvc2luZyB0aGF0IERlaXR5LCB3aG8gaXMgbm90IGEgbG92ZXIgb2YgaG9yc2VzIG9yIGJpcmRzLCBidXQgYSBsb3ZlciBvZiBtZW4sIHNob3VsZCBiZSB3aWxsaW5nIHRvIGNvbnNvcnQgd2l0aCBtZW4gb2Ygc3VwZXJsYXRpdmUgZ29vZG5lc3MsIGFuZCBzaG91bGQgbm90IGRpc2xpa2Ugb3IgZGlzZGFpbiB0aGUgY29tcGFueSBvZiBhIHdpc2UgYW5kIGhvbHkgbWFuLiBCdXQgdGhhdCBhbiBpbW1vcnRhbCBnb2Qgc2hvdWxkIHRha2UgY2FybmFsIHBsZWFzdXJlIGluIGEgbW9ydGFsIGJvZHkgYW5kIGl0cyBiZWF1dHksIHRoaXMsIHN1cmVseSwgaXMgaGFyZCB0byBiZWxpZXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIE51bWEsIGZvcnNha2luZyB0aGUgd2F5cyBvZiBjaXR5IGZvbGssIGRldGVybWluZWQgdG8gbGl2ZSBmb3IgdGhlIG1vc3QgcGFydCBpbiBjb3VudHJ5IHBsYWNlcywgYW5kIHRvIHdhbmRlciB0aGVyZSBhbG9uZSwgcGFzc2luZyBoaXMgZGF5cyBpbiBncm92ZXMgb2YgdGhlIGdvZHMsIHNhY3JlZCBtZWFkb3dzLCBhbmQgc29saXR1ZGVzLiBUaGlzLCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgZ2F2ZSByaXNlIHRvIHRoZSBzdG9yeSBhYm91dCBoaXMgZ29kZGVzcy4gSXQgd2FzIG5vdCwgc28gdGhlIHN0b3J5IHJhbiwgZnJvbSBhbnkgZGlzdHJlc3Mgb3IgYWJlcnJhdGlvbiBvZiBzcGlyaXQgdGhhdCBoZSBmb3Jzb29rIHRoZSB3YXlzIG9mIG1lbiwgYnV0IGhlIGhhZCB0YXN0ZWQgdGhlIGpveSBvZiBtb3JlIGF1Z3VzdCBjb21wYW5pb25zaGlwIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYWQgYmVlbiBob25vdXJlZCB3aXRoIGEgY2VsZXN0aWFsIG1hcnJpYWdlOyB0aGUgZ29kZGVzcyBFZ2VyaWEgbG92ZWQgaGltIGFuZCBiZXN0b3dlZCBoZXJzZWxmIHVwb24gaGltLCBhbmQgaXQgd2FzIGhpcyBjb21tdW5pb24gd2l0aCBoZXIgdGhhdCBnYXZlIGhpbSBhIGxpZmUgb2YgYmxlc3NlZG5lc3MgYW5kIGEgd2lzZG9tIG1vcmUgdGhhbiBodW1hbi4gSG93ZXZlciwgdGhhdCB0aGlzIHN0b3J5IHJlc2VtYmxlcyBtYW55IG9mIHRoZSB2ZXJ5IGFuY2llbnQgdGFsZXMgd2hpY2ggdGhlIFBocnlnaWFucyBoYXZlIHJlY2VpdmVkIGFuZCBjaGVyaXNoZWQgY29uY2VybmluZyBBdHRpcywgdGhlIEJpdGh5bmlhbnMgY29uY2VybmluZyBIZXJvZG90dXMsIHRoZSBBcmNhZGlhbnMgY29uY2VybmluZyBFbmR5bWlvbiwgYW5kIG90aGVyIHBlb3BsZXMgY29uY2VybmluZyBvdGhlciBtb3J0YWxzIHdobyB3ZXJlIHRob3VnaHQgdG8gaGF2ZSBhY2hpZXZlZCBhIGxpZmUgb2YgYmxlc3NlZG5lc3MgaW4gdGhlIGxvdmUgb2YgdGhlIGdvZHMsIGlzIHF1aXRlIGV2aWRlbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSBpcyBzb21lIHJlYXNvbiBpbiBzdXBwb3NpbmcgdGhhdCBEZWl0eSwgd2hvIGlzIG5vdCBhIGxvdmVyIG9mIGhvcnNlcyBvciBiaXJkcywgYnV0IGEgbG92ZXIgb2YgbWVuLCBzaG91bGQgYmUgd2lsbGluZyB0byBjb25zb3J0IHdpdGggbWVuIG9mIHN1cGVybGF0aXZlIGdvb2RuZXNzLCBhbmQgc2hvdWxkIG5vdCBkaXNsaWtlIG9yIGRpc2RhaW4gdGhlIGNvbXBhbnkgb2YgYSB3aXNlIGFuZCBob2x5IG1hbi4gQnV0IHRoYXQgYW4gaW1tb3J0YWwgZ29kIHNob3VsZCB0YWtlIGNhcm5hbCBwbGVhc3VyZSBpbiBhIG1vcnRhbCBib2R5IGFuZCBpdHMgYmVhdXR5LCB0aGlzLCBzdXJlbHksIGlzIGhhcmQgdG8gYmVsaWV2ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGUgQWVneXB0aWFucyBtYWtlIGEgZGlzdGluY3Rpb24gaGVyZSB3aGljaCBpcyB0aG91Z2h0IHBsYXVzaWJsZSwgbmFtZWx5LCB0aGF0IHdoaWxlIGEgd29tYW4gY2FuIGJlIGFwcHJvYWNoZWQgYnkgYSBkaXZpbmUgc3Bpcml0IGFuZCBtYWRlIHByZWduYW50LCB0aGVyZSBpcyBubyBzdWNoIHRoaW5nIGFzIGNhcm5hbCBpbnRlcmNvdXJzZSBhbmQgY29tbXVuaW9uIGJldHdlZW4gYSBtYW4gYW5kIGEgZGl2aW5pdHkuIEJ1dCB0aGV5IGxvc2Ugc2lnaHQgb2YgdGhlIGZhY3QgdGhhdCBpbnRlcmNvdXJzZSBpcyBhIHJlY2lwcm9jYWwgbWF0dGVyLCBhbmQgdGhhdCBib3RoIHBhcnRpZXMgdG8gaXQgZW50ZXIgaW50byBhIGxpa2UgY29tbXVuaW9uLiBIb3dldmVyLCB0aGF0IGEgZ29kIHNob3VsZCBoYXZlIGFmZmVjdGlvbiBmb3IgYSBtYW4sIGFuZCBhIHNvLWNhbGxlZCBsb3ZlIHdoaWNoIGlzIGJhc2VkIHVwb24gYWZmZWN0aW9uLCBhbmQgdGFrZXMgdGhlIGZvcm0gb2Ygc29saWNpdHVkZSBmb3IgaGlzIGNoYXJhY3RlciBhbmQgaGlzIHZpcnR1ZSwgaXMgZml0IGFuZCBwcm9wZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZWZvcmUgaXQgaXMgbm8gbWlzdGFrZSB3aGVuIHRoZSBhbmNpZW50IHBvZXRzIHRlbGwgdGhlaXIgdGFsZXMgb2YgdGhlIGxvdmUgQXBvbGxvIGJvcmUgUGhvcmJhcywgSHlhY2ludGh1cywgYW5kIEFkbWV0dXMsIGFzIHdlbGwgYXMgdGhlIFNpY3lvbmlhbiBIaXBwb2x5dHVzIGFsc28sIG9mIHdob20gaXQgaXMgc2FpZCwgdGhhdCwgYXMgb2Z0ZW4gYXMgaGUgc2V0IG91dCB0byBzYWlsIGZyb20gU2ljeW9uIHRvIENpcnJoYSwgdGhlIFB5dGhpYW4gcHJpZXN0ZXNzLCBhcyB0aG91Z2ggdGhlIGdvZCBrbmV3IG9mIGhpcyBjb21pbmcgYW5kIHJlam9pY2VkIHRoZXJlYXQsIGNoYW50ZWQgdGhpcyBwcm9waGV0aWMgdmVyc2U64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkxvLCBvbmNlIG1vcmUgZG90aCBiZWxvdmVkIEhpcHBvbHl0dXMgaGl0aGVyIG1ha2Ugdm95YWdlLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIEFlZ3lwdGlhbnMgbWFrZSBhIGRpc3RpbmN0aW9uIGhlcmUgd2hpY2ggaXMgdGhvdWdodCBwbGF1c2libGUsIG5hbWVseSwgdGhhdCB3aGlsZSBhIHdvbWFuIGNhbiBiZSBhcHByb2FjaGVkIGJ5IGEgZGl2aW5lIHNwaXJpdCBhbmQgbWFkZSBwcmVnbmFudCwgdGhlcmUgaXMgbm8gc3VjaCB0aGluZyBhcyBjYXJuYWwgaW50ZXJjb3Vyc2UgYW5kIGNvbW11bmlvbiBiZXR3ZWVuIGEgbWFuIGFuZCBhIGRpdmluaXR5LiBCdXQgdGhleSBsb3NlIHNpZ2h0IG9mIHRoZSBmYWN0IHRoYXQgaW50ZXJjb3Vyc2UgaXMgYSByZWNpcHJvY2FsIG1hdHRlciwgYW5kIHRoYXQgYm90aCBwYXJ0aWVzIHRvIGl0IGVudGVyIGludG8gYSBsaWtlIGNvbW11bmlvbi4gSG93ZXZlciwgdGhhdCBhIGdvZCBzaG91bGQgaGF2ZSBhZmZlY3Rpb24gZm9yIGEgbWFuLCBhbmQgYSBzby1jYWxsZWQgbG92ZSB3aGljaCBpcyBiYXNlZCB1cG9uIGFmZmVjdGlvbiwgYW5kIHRha2VzIHRoZSBmb3JtIG9mIHNvbGljaXR1ZGUgZm9yIGhpcyBjaGFyYWN0ZXIgYW5kIGhpcyB2aXJ0dWUsIGlzIGZpdCBhbmQgcHJvcGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZWZvcmUgaXQgaXMgbm8gbWlzdGFrZSB3aGVuIHRoZSBhbmNpZW50IHBvZXRzIHRlbGwgdGhlaXIgdGFsZXMgb2YgdGhlIGxvdmUgQXBvbGxvIGJvcmUgUGhvcmJhcywgSHlhY2ludGh1cywgYW5kIEFkbWV0dXMsIGFzIHdlbGwgYXMgdGhlIFNpY3lvbmlhbiBIaXBwb2x5dHVzIGFsc28sIG9mIHdob20gaXQgaXMgc2FpZCwgdGhhdCwgYXMgb2Z0ZW4gYXMgaGUgc2V0IG91dCB0byBzYWlsIGZyb20gU2ljeW9uIHRvIENpcnJoYSwgdGhlIFB5dGhpYW4gcHJpZXN0ZXNzLCBhcyB0aG91Z2ggdGhlIGdvZCBrbmV3IG9mIGhpcyBjb21pbmcgYW5kIHJlam9pY2VkIHRoZXJlYXQsIGNoYW50ZWQgdGhpcyBwcm9waGV0aWMgdmVyc2U64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Mbywgb25jZSBtb3JlIGRvdGggYmVsb3ZlZCBIaXBwb2x5dHVzIGhpdGhlciBtYWtlIHZveWFnZS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TG8sIG9uY2UgbW9yZSBkb3RoIGJlbG92ZWQgSGlwcG9seXR1cyBoaXRoZXIgbWFrZSB2b3lhZ2UuPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBpcyBhIGxlZ2VuZCwgdG9vLCB0aGF0IFBhbiBiZWNhbWUgZW5hbW91cmVkIG9mIFBpbmRhciBhbmQgaGlzIHZlcnNlcy4gQW5kIHRoZSBkaXZpbmUgcG93ZXJzIGJlc3Rvd2VkIHNpZ25hbCBob25vdXIgb24gQXJjaGlsb2NodXMgYW5kIEhlc2lvZCBhZnRlciB0aGVpciBkZWF0aHMsIGZvciB0aGUgc2FrZSBvZiB0aGUgTXVzZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIERlbHBoaWFuIG9yYWNsZSBwcm9ub3VuY2VkIGEgY3Vyc2Ugb24gdGhlIG1hbiB3aG8ga2lsbGVkIEFyY2hpbG9jaHVzLCBiZWNhdXNlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhlIGhhZCBzbGFpbiB0aGUgc2VydmFudCBvZiB0aGUgTXVzZXMuPC9xPiBBbmQgdGhlIHNhbWUgb3JhY2xlIHRvbGQgdGhlIHBlb3BsZSBvZiBPcmNob21lbnVzLCB3aGVuIGEgcGxhZ3VlIGhhZCBmYWxsZW4gdXBvbiB0aGVtLCB0aGF0IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBvbmx5IHJlbWVkeSB3YXMgdG8gYnJpbmcgYmFjayB0aGUgYm9uZXMgb2YgSGVzaW9kIGZyb20gdGhlIGxhbmQgb2YgTmF1cGFjdHVzIHRvIHRoZSBsYW5kIG9mIE9yY2hvbWVudXMuPC9xPgogICAgICAgICAgICA8L25vdGU+IEFnYWluLCB0aGVyZSBpcyBhIHN0b3J5LCBzdGlsbCB3ZWxsIGF0dGVzdGVkLCB0aGF0IFNvcGhvY2xlcywgZHVyaW5nIGhpcyBsaWZlLCB3YXMgYmxlc3NlZCB3aXRoIHRoZSBmcmllbmRzaGlwIG9mIEFlc2N1bGFwaXVzLCBhbmQgdGhhdCB3aGVuIGhlIGRpZWQsIGFub3RoZXIgZGVpdHkgcHJvY3VyZWQgaGltIGZpdHRpbmcgYnVyaWFsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRpb255c3VzIGlzIHNhaWQgdG8gaGF2ZSBhcHBlYXJlZCB0byBMeXNhbmRlciBhbmQgb3JkZXJlZCBoaW0gdG8gYWxsb3cgU29waG9jbGVzIHRvIGJlIGJ1cmllZCBpbiB0aGUgdG9tYiBvZiBoaXMgZmF0aGVycywgb24gdGhlIHJvYWQgdG8gRGVjZWxlaWEsIHRoZW4gb2NjdXBpZWQgYnkgdGhlIExhY2VkYWVtb25pYW4gYXJteS4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjIxLjEiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaS4gMjEsIDE8L2JpYmw+LCB3aXRoIEZyYXplcidzIG5vdGUuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPklzIGl0IHdvcnRoIHdoaWxlLCB0aGVuLCBpZiB3ZSBjb25jZWRlIHRoZXNlIGluc3RhbmNlcyBvZiBkaXZpbmUgZmF2b3VyLCB0byBkaXNiZWxpZXZlIHRoYXQgWmFsZXVjdXMsIE1pbm9zLCBab3JvYXN0ZXIsIE51bWEsIGFuZCBMeWN1cmd1cywgd2hvIHBpbG90ZWQga2luZ2RvbXMgYW5kIGZvcm11bGF0ZWQgY29uc3RpdHV0aW9ucywgaGFkIGZyZXF1ZW50IGF1ZGllbmNlIG9mIHRoZSBEZWl0eT8gSXMgaXQgbm90IGxpa2VseSwgcmF0aGVyLCB0aGF0IHRoZSBnb2RzIGFyZSBpbiBlYXJuZXN0IHdoZW4gdGhleSBob2xkIGNvbnZlcnNlIHdpdGggc3VjaCBtZW4gYXMgdGhlc2UsIGluIG9yZGVyIHRvIGluc3RydWN0IGFuZCBhZHZpc2UgdGhlbSBpbiB0aGUgaGlnaGVzdCBhbmQgYmVzdCB3YXksIGJ1dCB1c2UgcG9ldHMgYW5kIHdhcmJsaW5nIHNpbmdlcnMsIGlmIGF0IGFsbCwgZm9yIHRoZWlyIG93biBkaXZlcnNpb24/IAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIGFueSBvbmUgaXMgb3RoZXJ3aXNlIG1pbmRlZCwgSSBzYXkgd2l0aCBCYWNjaHlsaWRlcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ccm9hZCBpcyB0aGUgd2F5LjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMjkgKEplYmIsIEJhY2NoeWxpZGVzLCBwLiA0MjMpLjwvbm90ZT4gIEluZGVlZCB0aGVyZSBpcyBubyBhYnN1cmRpdHkgaW4gdGhlIG90aGVyIGFjY291bnQgd2hpY2ggaXMgZ2l2ZW4gb2YgTHljdXJndXMgYW5kIE51bWEgYW5kIHRoZWlyIGxpa2UsIG5hbWVseSwgdGhhdCBzaW5jZSB0aGV5IHdlcmUgbWFuYWdpbmcgaGVhZHN0cm9uZyBhbmQgY2FwdGlvdXMgbXVsdGl0dWRlcywgYW5kIGludHJvZHVjaW5nIGdyZWF0IGlubm92YXRpb25zIGluIG1vZGVzIG9mIGdvdmVybm1lbnQsIHRoZXkgcHJldGVuZGVkIHRvIGdldCBhIHNhbmN0aW9uIGZyb20gdGhlIGdvZCwgd2hpY2ggc2FuY3Rpb24gd2FzIHRoZSBzYWx2YXRpb24gb2YgdGhlIHZlcnkgb25lcyBhZ2FpbnN0IHdob20gaXQgd2FzIGNvbnRyaXZlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIGEgbGVnZW5kLCB0b28sIHRoYXQgUGFuIGJlY2FtZSBlbmFtb3VyZWQgb2YgUGluZGFyIGFuZCBoaXMgdmVyc2VzLiBBbmQgdGhlIGRpdmluZSBwb3dlcnMgYmVzdG93ZWQgc2lnbmFsIGhvbm91ciBvbiBBcmNoaWxvY2h1cyBhbmQgSGVzaW9kIGFmdGVyIHRoZWlyIGRlYXRocywgZm9yIHRoZSBzYWtlIG9mIHRoZSBNdXNlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBEZWxwaGlhbiBvcmFjbGUgcHJvbm91bmNlZCBhIGN1cnNlIG9uIHRoZSBtYW4gd2hvIGtpbGxlZCBBcmNoaWxvY2h1cywgYmVjYXVzZSAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhlIGhhZCBzbGFpbiB0aGUgc2VydmFudCBvZiB0aGUgTXVzZXMuPC9xPiBBbmQgdGhlIHNhbWUgb3JhY2xlIHRvbGQgdGhlIHBlb3BsZSBvZiBPcmNob21lbnVzLCB3aGVuIGEgcGxhZ3VlIGhhZCBmYWxsZW4gdXBvbiB0aGVtLCB0aGF0IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIG9ubHkgcmVtZWR5IHdhcyB0byBicmluZyBiYWNrIHRoZSBib25lcyBvZiBIZXNpb2QgZnJvbSB0aGUgbGFuZCBvZiBOYXVwYWN0dXMgdG8gdGhlIGxhbmQgb2YgT3JjaG9tZW51cy48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gQWdhaW4sIHRoZXJlIGlzIGEgc3RvcnksIHN0aWxsIHdlbGwgYXR0ZXN0ZWQsIHRoYXQgU29waG9jbGVzLCBkdXJpbmcgaGlzIGxpZmUsIHdhcyBibGVzc2VkIHdpdGggdGhlIGZyaWVuZHNoaXAgb2YgQWVzY3VsYXBpdXMsIGFuZCB0aGF0IHdoZW4gaGUgZGllZCwgYW5vdGhlciBkZWl0eSBwcm9jdXJlZCBoaW0gZml0dGluZyBidXJpYWwuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZSBoYWQgc2xhaW4gdGhlIHNlcnZhbnQgb2YgdGhlIE11c2VzLjwvcT4gQW5kIHRoZSBzYW1lIG9yYWNsZSB0b2xkIHRoZSBwZW9wbGUgb2YgT3JjaG9tZW51cywgd2hlbiBhIHBsYWd1ZSBoYWQgZmFsbGVuIHVwb24gdGhlbSwgdGhhdCAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBvbmx5IHJlbWVkeSB3YXMgdG8gYnJpbmcgYmFjayB0aGUgYm9uZXMgb2YgSGVzaW9kIGZyb20gdGhlIGxhbmQgb2YgTmF1cGFjdHVzIHRvIHRoZSBsYW5kIG9mIE9yY2hvbWVudXMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRpb255c3VzIGlzIHNhaWQgdG8gaGF2ZSBhcHBlYXJlZCB0byBMeXNhbmRlciBhbmQgb3JkZXJlZCBoaW0gdG8gYWxsb3cgU29waG9jbGVzIHRvIGJlIGJ1cmllZCBpbiB0aGUgdG9tYiBvZiBoaXMgZmF0aGVycywgb24gdGhlIHJvYWQgdG8gRGVjZWxlaWEsIHRoZW4gb2NjdXBpZWQgYnkgdGhlIExhY2VkYWVtb25pYW4gYXJteS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuMjEuMSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpLiAyMSwgMTwvYmlibD4sIHdpdGggRnJhemVyJ3Mgbm90ZS48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjIxLjEiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaS4gMjEsIDE8L2JpYmw+LCB3aXRoIEZyYXplcidzIG5vdGUuPC90cmFuc2xhdGlvbj4="
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPklzIGl0IHdvcnRoIHdoaWxlLCB0aGVuLCBpZiB3ZSBjb25jZWRlIHRoZXNlIGluc3RhbmNlcyBvZiBkaXZpbmUgZmF2b3VyLCB0byBkaXNiZWxpZXZlIHRoYXQgWmFsZXVjdXMsIE1pbm9zLCBab3JvYXN0ZXIsIE51bWEsIGFuZCBMeWN1cmd1cywgd2hvIHBpbG90ZWQga2luZ2RvbXMgYW5kIGZvcm11bGF0ZWQgY29uc3RpdHV0aW9ucywgaGFkIGZyZXF1ZW50IGF1ZGllbmNlIG9mIHRoZSBEZWl0eT8gSXMgaXQgbm90IGxpa2VseSwgcmF0aGVyLCB0aGF0IHRoZSBnb2RzIGFyZSBpbiBlYXJuZXN0IHdoZW4gdGhleSBob2xkIGNvbnZlcnNlIHdpdGggc3VjaCBtZW4gYXMgdGhlc2UsIGluIG9yZGVyIHRvIGluc3RydWN0IGFuZCBhZHZpc2UgdGhlbSBpbiB0aGUgaGlnaGVzdCBhbmQgYmVzdCB3YXksIGJ1dCB1c2UgcG9ldHMgYW5kIHdhcmJsaW5nIHNpbmdlcnMsIGlmIGF0IGFsbCwgZm9yIHRoZWlyIG93biBkaXZlcnNpb24/IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGlmIGFueSBvbmUgaXMgb3RoZXJ3aXNlIG1pbmRlZCwgSSBzYXkgd2l0aCBCYWNjaHlsaWRlcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJyb2FkIGlzIHRoZSB3YXkuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDI5IChKZWJiLCBCYWNjaHlsaWRlcywgcC4gNDIzKS48L25vdGU+ICBJbmRlZWQgdGhlcmUgaXMgbm8gYWJzdXJkaXR5IGluIHRoZSBvdGhlciBhY2NvdW50IHdoaWNoIGlzIGdpdmVuIG9mIEx5Y3VyZ3VzIGFuZCBOdW1hIGFuZCB0aGVpciBsaWtlLCBuYW1lbHksIHRoYXQgc2luY2UgdGhleSB3ZXJlIG1hbmFnaW5nIGhlYWRzdHJvbmcgYW5kIGNhcHRpb3VzIG11bHRpdHVkZXMsIGFuZCBpbnRyb2R1Y2luZyBncmVhdCBpbm5vdmF0aW9ucyBpbiBtb2RlcyBvZiBnb3Zlcm5tZW50LCB0aGV5IHByZXRlbmRlZCB0byBnZXQgYSBzYW5jdGlvbiBmcm9tIHRoZSBnb2QsIHdoaWNoIHNhbmN0aW9uIHdhcyB0aGUgc2FsdmF0aW9uIG9mIHRoZSB2ZXJ5IG9uZXMgYWdhaW5zdCB3aG9tIGl0IHdhcyBjb250cml2ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSB0aGUgc3RvcnksIE51bWEgd2FzIGFscmVhZHkgY29tcGxldGluZyBoaXMgZm9ydGlldGggeWVhciB3aGVuIHRoZSBlbWJhc3N5IGNhbWUgZnJvbSBSb21lIGludml0aW5nIGhpbSB0byB0YWtlIHRoZSB0aHJvbmUuIFRoZSBzcGVha2VycyB3ZXJlIFByb2N1bHVzIGFuZCBWZWxlc3VzLCBvbmUgb3IgdGhlIG90aGVyIG9mIHdob20gdGhlIHBlb3BsZSB3YXMgZXhwZWN0ZWQgdG8gY2hvb3NlIGFzIHRoZWlyIGtpbmcsIFByb2N1bHVzIGJlaW5nIHRoZSBmYXZvdXJpdGUgb2YgdGhlIHBlb3BsZSBvZiBSb211bHVzLCBhbmQgVmVsZXN1cyBvZiB0aGUgcGVvcGxlIG9mIFRhdGl1cy4gVGhlc2Ugc3BlYWtlcnMsIHRoZW4sIHdlcmUgYnJpZWYgc3VwcG9zaW5nIHRoYXQgTnVtYSB3b3VsZCB3ZWxjb21lIGhpcyBnb29kIGZvcnR1bmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcywgaG93ZXZlciwgbm8gc2xpZ2h0IHRhc2ssIGJ1dCBvbmUgcmVxdWlyaW5nIG11Y2ggYXJndW1lbnQgYW5kIGVudHJlYXR5LCB0byBwZXJzdWFkZSBhbmQgaW5kdWNlIGEgbWFuIHdobyBoYWQgbGl2ZWQgaW4gcGVhY2UgYW5kIHF1aWV0LCB0byBhY2NlcHQgdGhlIGdvdmVybm1lbnQgb2YgYSBjaXR5IHdoaWNoIG93ZWQgaXRzIGV4aXN0ZW5jZSBhbmQgZ3Jvd3RoLCBpbiBhIGZhc2hpb24sIHRvIHdhci4gSGlzIHJlcGx5LCB0aGVyZWZvcmUsIGluIHRoZSBwcmVzZW5jZSBvZiBoaXMgZmF0aGVyIGFuZCBvbmUgb2YgaGlzIGtpbnNtZW4gbmFtZWQgTWFyY2l1cywgd2FzIGFzIGZvbGxvd3MuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RXZlcnkgY2hhbmdlIGluIGEgbWFuJ3MgbGlmZSBpcyBwZXJpbG91czsgYnV0IHdoZW4gYSBtYW4ga25vd3Mgbm8gbGFjaywgYW5kIGhhcyBubyBmYXVsdCB0byBmaW5kIHdpdGggaGlzIHByZXNlbnQgbG90LCBub3RoaW5nIHNob3J0IG9mIG1hZG5lc3MgY2FuIGNoYW5nZSBoaXMgcHVycG9zZXMgYW5kIHJlbW92ZSBoaW0gZnJvbSBoaXMgd29udGVkIGNvdXJzZSBvZiBsaWZlLCB3aGljaCwgZXZlbiB0aG91Z2ggaXQgaGF2ZSBubyBvdGhlciBhZHZhbnRhZ2UsIGlzIGF0IGxlYXN0IGZpeGVkIGFuZCBzZWN1cmUsIGFuZCB0aGVyZWZvcmUgYmV0dGVyIHRoYW4gb25lIHdoaWNoIGlzIGFsbCB1bmNlcnRhaW4uIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxvdCBvZiBvbmUgd2hvIGJlY29tZXMgeW91ciBraW5nIGNhbm5vdCBldmVuIGJlIGNhbGxlZCB1bmNlcnRhaW4sIGp1ZGdpbmcgZnJvbSB0aGUgZXhwZXJpZW5jZSBvZiBSb211bHVzLCBzaW5jZSBoZSBoaW1zZWxmIHdhcyBhY2N1c2VkIG9mIGJhc2VseSBwbG90dGluZyBhZ2FpbnN0IGhpcyBjb2xsZWFndWUgVGF0aXVzLCBhbmQgaW52b2x2ZWQgdGhlIHBhdHJpY2lhbnMgaW4gdGhlIGNoYXJnZSBvZiBoYXZpbmcgYmFzZWx5IHB1dCB0aGVpciBraW5nIG91dCBvZiB0aGUgd2F5LiBBbmQgeWV0IHRob3NlIHdobyBicmluZyB0aGVzZSBhY2N1c2F0aW9ucyBsYXVkIFJvbXVsdXMgYXMgYSBjaGlsZCBvZiB0aGUgZ29kcywgYW5kIHRlbGwgaG93IGhlIHdhcyBwcmVzZXJ2ZWQgaW4gYW4gaW5jcmVkaWJsZSB3YXkgYW5kIGZlZCBpbiBhIG1pcmFjdWxvdXMgbWFubmVyIHdoZW4gaGUgd2FzIHN0aWxsIGFuIGluZmFudC4gQnV0IEkgYW0gb2YgbW9ydGFsIGJpcnRoLCBhbmQgSSB3YXMgbm91cmlzaGVkIGFuZCB0cmFpbmVkIGJ5IG1lbiB3aG9tIHlvdSBrbm93LiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSB2ZXJ5IHRyYWl0cyBpbiBteSBkaXNwb3NpdGlvbiB3aGljaCBhcmUgY29tbWVuZGVkLCBhcmUgZmFyIGZyb20gbWFya2luZyBhIG1hbiBkZXN0aW5lZCB0byBiZSBhIGtpbmcsIG5hbWVseSwgbXkgZ3JlYXQgbG92ZSBvZiByZXRpcmVtZW50LCBteSBkZXZvdGlvbiB0byBzdHVkaWVzIGluY29uc2lzdGVudCB3aXRoIHRoZSB1c3VhbCBhY3Rpdml0aWVzIG9mIG1lbiwgYW5kIG15IHdlbGwta25vd24gc3Ryb25nIGFuZCBpbnZldGVyYXRlIGxvdmUgb2YgcGVhY2UsIG9mIHVud2FybGlrZSBvY2N1cGF0aW9ucywgYW5kIG9mIG1lbiB3aG8gY29tZSB0b2dldGhlciBvbmx5IGZvciB0aGUgd29yc2hpcCBvZiB0aGUgZ29kcyBhbmQgZm9yIGZyaWVuZGx5IGludGVyY291cnNlLCBidXQgd2hvIG90aGVyd2lzZSBsaXZlIGJ5IHRoZW1zZWx2ZXMgYXMgdGlsbGVycyBvZiB0aGUgc29pbCBvciBoZXJkc21lbi4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMsIHVudG8geW91LCBPIFJvbWFucywgd2hldGhlciB5b3Ugd2FudCB0aGVtIG9yIG5vdCwgUm9tdWx1cyBoYXMgYmVxdWVhdGhlZCBtYW55IHdhcnMsIGFuZCB0byBtYWtlIGhlYWQgYWdhaW5zdCB0aGVzZSB0aGUgY2l0eSBuZWVkcyBhIGtpbmcgd2l0aCBhIHdhcnJpb3IncyBleHBlcmllbmNlIGFuZCBzdHJlbmd0aC4gQmVzaWRlcywgdGhlIHBlb3BsZSBoYXMgYmVjb21lIG11Y2ggYWNjdXN0b21lZCB0byB3YXIsIGFuZCBlYWdlciBmb3IgaXQgYmVjYXVzZSBvZiB0aGVpciBzdWNjZXNzZXMsIGFuZCBubyBvbmUgaXMgYmxpbmQgdG8gdGhlaXIgZGVzaXJlIGZvciBncm93dGggYnkgY29ucXVlc3QuIEkgc2hvdWxkIHRoZXJlZm9yZSBiZWNvbWUgYSBsYXVnaGluZy1zdG9jayBpZiBJIHNvdWdodCB0byBzZXJ2ZSB0aGUgZ29kcywgYW5kIHRhdWdodCBtZW4gdG8gaG9ub3VyIGp1c3RpY2UgYW5kIGhhdGUgdmlvbGVuY2UgYW5kIHdhciwgaW4gYSBjaXR5IHdoaWNoIGRlc2lyZXMgYSBsZWFkZXIgb2YgaXRzIGFybWllcyByYXRoZXIgdGhhbiBhIGtpbmcuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gcmVzdW1lIHRoZSBzdG9yeSwgTnVtYSB3YXMgYWxyZWFkeSBjb21wbGV0aW5nIGhpcyBmb3J0aWV0aCB5ZWFyIHdoZW4gdGhlIGVtYmFzc3kgY2FtZSBmcm9tIFJvbWUgaW52aXRpbmcgaGltIHRvIHRha2UgdGhlIHRocm9uZS4gVGhlIHNwZWFrZXJzIHdlcmUgUHJvY3VsdXMgYW5kIFZlbGVzdXMsIG9uZSBvciB0aGUgb3RoZXIgb2Ygd2hvbSB0aGUgcGVvcGxlIHdhcyBleHBlY3RlZCB0byBjaG9vc2UgYXMgdGhlaXIga2luZywgUHJvY3VsdXMgYmVpbmcgdGhlIGZhdm91cml0ZSBvZiB0aGUgcGVvcGxlIG9mIFJvbXVsdXMsIGFuZCBWZWxlc3VzIG9mIHRoZSBwZW9wbGUgb2YgVGF0aXVzLiBUaGVzZSBzcGVha2VycywgdGhlbiwgd2VyZSBicmllZiBzdXBwb3NpbmcgdGhhdCBOdW1hIHdvdWxkIHdlbGNvbWUgaGlzIGdvb2QgZm9ydHVuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcywgaG93ZXZlciwgbm8gc2xpZ2h0IHRhc2ssIGJ1dCBvbmUgcmVxdWlyaW5nIG11Y2ggYXJndW1lbnQgYW5kIGVudHJlYXR5LCB0byBwZXJzdWFkZSBhbmQgaW5kdWNlIGEgbWFuIHdobyBoYWQgbGl2ZWQgaW4gcGVhY2UgYW5kIHF1aWV0LCB0byBhY2NlcHQgdGhlIGdvdmVybm1lbnQgb2YgYSBjaXR5IHdoaWNoIG93ZWQgaXRzIGV4aXN0ZW5jZSBhbmQgZ3Jvd3RoLCBpbiBhIGZhc2hpb24sIHRvIHdhci4gSGlzIHJlcGx5LCB0aGVyZWZvcmUsIGluIHRoZSBwcmVzZW5jZSBvZiBoaXMgZmF0aGVyIGFuZCBvbmUgb2YgaGlzIGtpbnNtZW4gbmFtZWQgTWFyY2l1cywgd2FzIGFzIGZvbGxvd3MuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5FdmVyeSBjaGFuZ2UgaW4gYSBtYW4ncyBsaWZlIGlzIHBlcmlsb3VzOyBidXQgd2hlbiBhIG1hbiBrbm93cyBubyBsYWNrLCBhbmQgaGFzIG5vIGZhdWx0IHRvIGZpbmQgd2l0aCBoaXMgcHJlc2VudCBsb3QsIG5vdGhpbmcgc2hvcnQgb2YgbWFkbmVzcyBjYW4gY2hhbmdlIGhpcyBwdXJwb3NlcyBhbmQgcmVtb3ZlIGhpbSBmcm9tIGhpcyB3b250ZWQgY291cnNlIG9mIGxpZmUsIHdoaWNoLCBldmVuIHRob3VnaCBpdCBoYXZlIG5vIG90aGVyIGFkdmFudGFnZSwgaXMgYXQgbGVhc3QgZml4ZWQgYW5kIHNlY3VyZSwgYW5kIHRoZXJlZm9yZSBiZXR0ZXIgdGhhbiBvbmUgd2hpY2ggaXMgYWxsIHVuY2VydGFpbi4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBsb3Qgb2Ygb25lIHdobyBiZWNvbWVzIHlvdXIga2luZyBjYW5ub3QgZXZlbiBiZSBjYWxsZWQgdW5jZXJ0YWluLCBqdWRnaW5nIGZyb20gdGhlIGV4cGVyaWVuY2Ugb2YgUm9tdWx1cywgc2luY2UgaGUgaGltc2VsZiB3YXMgYWNjdXNlZCBvZiBiYXNlbHkgcGxvdHRpbmcgYWdhaW5zdCBoaXMgY29sbGVhZ3VlIFRhdGl1cywgYW5kIGludm9sdmVkIHRoZSBwYXRyaWNpYW5zIGluIHRoZSBjaGFyZ2Ugb2YgaGF2aW5nIGJhc2VseSBwdXQgdGhlaXIga2luZyBvdXQgb2YgdGhlIHdheS4gQW5kIHlldCB0aG9zZSB3aG8gYnJpbmcgdGhlc2UgYWNjdXNhdGlvbnMgbGF1ZCBSb211bHVzIGFzIGEgY2hpbGQgb2YgdGhlIGdvZHMsIGFuZCB0ZWxsIGhvdyBoZSB3YXMgcHJlc2VydmVkIGluIGFuIGluY3JlZGlibGUgd2F5IGFuZCBmZWQgaW4gYSBtaXJhY3Vsb3VzIG1hbm5lciB3aGVuIGhlIHdhcyBzdGlsbCBhbiBpbmZhbnQuIEJ1dCBJIGFtIG9mIG1vcnRhbCBiaXJ0aCwgYW5kIEkgd2FzIG5vdXJpc2hlZCBhbmQgdHJhaW5lZCBieSBtZW4gd2hvbSB5b3Uga25vdy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgdmVyeSB0cmFpdHMgaW4gbXkgZGlzcG9zaXRpb24gd2hpY2ggYXJlIGNvbW1lbmRlZCwgYXJlIGZhciBmcm9tIG1hcmtpbmcgYSBtYW4gZGVzdGluZWQgdG8gYmUgYSBraW5nLCBuYW1lbHksIG15IGdyZWF0IGxvdmUgb2YgcmV0aXJlbWVudCwgbXkgZGV2b3Rpb24gdG8gc3R1ZGllcyBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgdXN1YWwgYWN0aXZpdGllcyBvZiBtZW4sIGFuZCBteSB3ZWxsLWtub3duIHN0cm9uZyBhbmQgaW52ZXRlcmF0ZSBsb3ZlIG9mIHBlYWNlLCBvZiB1bndhcmxpa2Ugb2NjdXBhdGlvbnMsIGFuZCBvZiBtZW4gd2hvIGNvbWUgdG9nZXRoZXIgb25seSBmb3IgdGhlIHdvcnNoaXAgb2YgdGhlIGdvZHMgYW5kIGZvciBmcmllbmRseSBpbnRlcmNvdXJzZSwgYnV0IHdobyBvdGhlcndpc2UgbGl2ZSBieSB0aGVtc2VsdmVzIGFzIHRpbGxlcnMgb2YgdGhlIHNvaWwgb3IgaGVyZHNtZW4uIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWFzLCB1bnRvIHlvdSwgTyBSb21hbnMsIHdoZXRoZXIgeW91IHdhbnQgdGhlbSBvciBub3QsIFJvbXVsdXMgaGFzIGJlcXVlYXRoZWQgbWFueSB3YXJzLCBhbmQgdG8gbWFrZSBoZWFkIGFnYWluc3QgdGhlc2UgdGhlIGNpdHkgbmVlZHMgYSBraW5nIHdpdGggYSB3YXJyaW9yJ3MgZXhwZXJpZW5jZSBhbmQgc3RyZW5ndGguIEJlc2lkZXMsIHRoZSBwZW9wbGUgaGFzIGJlY29tZSBtdWNoIGFjY3VzdG9tZWQgdG8gd2FyLCBhbmQgZWFnZXIgZm9yIGl0IGJlY2F1c2Ugb2YgdGhlaXIgc3VjY2Vzc2VzLCBhbmQgbm8gb25lIGlzIGJsaW5kIHRvIHRoZWlyIGRlc2lyZSBmb3IgZ3Jvd3RoIGJ5IGNvbnF1ZXN0LiBJIHNob3VsZCB0aGVyZWZvcmUgYmVjb21lIGEgbGF1Z2hpbmctc3RvY2sgaWYgSSBzb3VnaHQgdG8gc2VydmUgdGhlIGdvZHMsIGFuZCB0YXVnaHQgbWVuIHRvIGhvbm91ciBqdXN0aWNlIGFuZCBoYXRlIHZpb2xlbmNlIGFuZCB3YXIsIGluIGEgY2l0eSB3aGljaCBkZXNpcmVzIGEgbGVhZGVyIG9mIGl0cyBhcm1pZXMgcmF0aGVyIHRoYW4gYSBraW5nLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbG90IG9mIG9uZSB3aG8gYmVjb21lcyB5b3VyIGtpbmcgY2Fubm90IGV2ZW4gYmUgY2FsbGVkIHVuY2VydGFpbiwganVkZ2luZyBmcm9tIHRoZSBleHBlcmllbmNlIG9mIFJvbXVsdXMsIHNpbmNlIGhlIGhpbXNlbGYgd2FzIGFjY3VzZWQgb2YgYmFzZWx5IHBsb3R0aW5nIGFnYWluc3QgaGlzIGNvbGxlYWd1ZSBUYXRpdXMsIGFuZCBpbnZvbHZlZCB0aGUgcGF0cmljaWFucyBpbiB0aGUgY2hhcmdlIG9mIGhhdmluZyBiYXNlbHkgcHV0IHRoZWlyIGtpbmcgb3V0IG9mIHRoZSB3YXkuIEFuZCB5ZXQgdGhvc2Ugd2hvIGJyaW5nIHRoZXNlIGFjY3VzYXRpb25zIGxhdWQgUm9tdWx1cyBhcyBhIGNoaWxkIG9mIHRoZSBnb2RzLCBhbmQgdGVsbCBob3cgaGUgd2FzIHByZXNlcnZlZCBpbiBhbiBpbmNyZWRpYmxlIHdheSBhbmQgZmVkIGluIGEgbWlyYWN1bG91cyBtYW5uZXIgd2hlbiBoZSB3YXMgc3RpbGwgYW4gaW5mYW50LiBCdXQgSSBhbSBvZiBtb3J0YWwgYmlydGgsIGFuZCBJIHdhcyBub3VyaXNoZWQgYW5kIHRyYWluZWQgYnkgbWVuIHdob20geW91IGtub3cuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgdmVyeSB0cmFpdHMgaW4gbXkgZGlzcG9zaXRpb24gd2hpY2ggYXJlIGNvbW1lbmRlZCwgYXJlIGZhciBmcm9tIG1hcmtpbmcgYSBtYW4gZGVzdGluZWQgdG8gYmUgYSBraW5nLCBuYW1lbHksIG15IGdyZWF0IGxvdmUgb2YgcmV0aXJlbWVudCwgbXkgZGV2b3Rpb24gdG8gc3R1ZGllcyBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgdXN1YWwgYWN0aXZpdGllcyBvZiBtZW4sIGFuZCBteSB3ZWxsLWtub3duIHN0cm9uZyBhbmQgaW52ZXRlcmF0ZSBsb3ZlIG9mIHBlYWNlLCBvZiB1bndhcmxpa2Ugb2NjdXBhdGlvbnMsIGFuZCBvZiBtZW4gd2hvIGNvbWUgdG9nZXRoZXIgb25seSBmb3IgdGhlIHdvcnNoaXAgb2YgdGhlIGdvZHMgYW5kIGZvciBmcmllbmRseSBpbnRlcmNvdXJzZSwgYnV0IHdobyBvdGhlcndpc2UgbGl2ZSBieSB0aGVtc2VsdmVzIGFzIHRpbGxlcnMgb2YgdGhlIHNvaWwgb3IgaGVyZHNtZW4uIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlYXMsIHVudG8geW91LCBPIFJvbWFucywgd2hldGhlciB5b3Ugd2FudCB0aGVtIG9yIG5vdCwgUm9tdWx1cyBoYXMgYmVxdWVhdGhlZCBtYW55IHdhcnMsIGFuZCB0byBtYWtlIGhlYWQgYWdhaW5zdCB0aGVzZSB0aGUgY2l0eSBuZWVkcyBhIGtpbmcgd2l0aCBhIHdhcnJpb3IncyBleHBlcmllbmNlIGFuZCBzdHJlbmd0aC4gQmVzaWRlcywgdGhlIHBlb3BsZSBoYXMgYmVjb21lIG11Y2ggYWNjdXN0b21lZCB0byB3YXIsIGFuZCBlYWdlciBmb3IgaXQgYmVjYXVzZSBvZiB0aGVpciBzdWNjZXNzZXMsIGFuZCBubyBvbmUgaXMgYmxpbmQgdG8gdGhlaXIgZGVzaXJlIGZvciBncm93dGggYnkgY29ucXVlc3QuIEkgc2hvdWxkIHRoZXJlZm9yZSBiZWNvbWUgYSBsYXVnaGluZy1zdG9jayBpZiBJIHNvdWdodCB0byBzZXJ2ZSB0aGUgZ29kcywgYW5kIHRhdWdodCBtZW4gdG8gaG9ub3VyIGp1c3RpY2UgYW5kIGhhdGUgdmlvbGVuY2UgYW5kIHdhciwgaW4gYSBjaXR5IHdoaWNoIGRlc2lyZXMgYSBsZWFkZXIgb2YgaXRzIGFybWllcyByYXRoZXIgdGhhbiBhIGtpbmcuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHN1Y2ggd29yZHMgZGlkIE51bWEgZGVjbGluZSB0aGUga2luZ2RvbS4gVGhlbiB0aGUgUm9tYW5zIHB1dCBmb3J0aCBldmVyeSBlZmZvcnQgdG8gbWVldCBoaXMgb2JqZWN0aW9ucywgYW5kIGJlZ2dlZCBoaW0gbm90IHRvIHBsdW5nZSB0aGVtIGFnYWluIGludG8gZmFjdGlvbiBhbmQgY2l2aWwgd2FyLCBzaW5jZSB0aGVyZSB3YXMgbm9uZSBvdGhlciBvbiB3aG9tIGJvdGggcGFydGllcyBjb3VsZCB1bml0ZS4gSGlzIGZhdGhlciBhbHNvIGFuZCBNYXJjaXVzLCB3aGVuIHRoZSBlbnZveXMgaGFkIHdpdGhkcmF3biwgYmVzZXQgaGltIHByaXZhdGVseSwgYW5kIHRyaWVkIHRvIHBlcnN1YWRlIGhpbSB0byBhY2NlcHQgc28gZ3JlYXQgYSBnaWZ0IG9mIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RXZlbiB0aG91Z2gsPC9xPiB0aGV5IHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBuZWl0aGVyIGRlc2lyZXN0IHdlYWx0aCBmb3IgdGh5c2VsZiwgYmVjYXVzZSB0aG91IGhhc3QgZW5vdWdoLCBub3IgY292ZXRlc3QgdGhlIGZhbWUgd2hpY2ggY29tZXMgZnJvbSBhdXRob3JpdHkgYW5kIHBvd2VyLCBiZWNhdXNlIHRob3UgaGFzdCB0aGUgZ3JlYXRlciBmYW1lIHdoaWNoIGNvbWVzIGZyb20gdmlydHVlLCB5ZXQgY29uc2lkZXIgdGhhdCB0aGUgd29yayBvZiBhIHRydWUga2luZyBpcyBhIHNlcnZpY2UgcmVuZGVyZWQgdG8gR29kLCB3aG8gbm93IHJvdXNlcyB1cCBhbmQgcmVmdXNlcyB0byBsZWF2ZSBkb3JtYW50IGFuZCBpbmFjdGl2ZSB0aGUgZ3JlYXQgcmlnaHRlb3VzbmVzcyB3aGljaCBpcyB3aXRoaW4gdGhlZS4gRG8gbm90LCB0aGVyZWZvcmUsIGF2b2lkIG5vciBmbGVlIGZyb20gdGhpcyBvZmZpY2UsIHdoaWNoIGEgd2lzZSBtYW4gd2lsbCByZWdhcmQgYXMgYSBmaWVsZCBmb3IgZ3JlYXQgYW5kIG5vYmxlIGFjdGlvbnMsIHdoZXJlIHRoZSBnb2RzIGFyZSBob25vdXJlZCB3aXRoIG1hZ25pZmljZW50IHdvcnNoaXAsIGFuZCB0aGUgaGVhcnRzIG9mIG1lbiBhcmUgZWFzaWx5IGFuZCBxdWlja2x5IHNvZnRlbmVkIGFuZCBpbmNsaW5lZCB0b3dhcmRzIHBpZXR5LCB0aHJvdWdoIHRoZSBtb3VsZGluZyBpbmZsdWVuY2Ugb2YgdGhlaXIgcnVsZXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHBlb3BsZSBsb3ZlZCBUYXRpdXMsIHRob3VnaCBoZSB3YXMgYSBmb3JlaWduIHByaW5jZSwgYW5kIHRoZXkgcGF5IGRpdmluZSBob25vdXJzIHRvIHRoZSBtZW1vcnkgb2YgUm9tdWx1cy4gQW5kIHdobyBrbm93cyBidXQgdGhhdCB0aGUgcGVvcGxlLCBldmVuIHRob3VnaCB2aWN0b3Jpb3VzLCBpcyBzYXRlZCB3aXRoIHdhciwgYW5kLCBub3cgdGhhdCBpdCBpcyBnbHV0dGVkIHdpdGggdHJpdW1waHMgYW5kIHNwb2lscywgaXMgZGVzaXJvdXMgb2YgYSBnZW50bGUgcHJpbmNlLCB3aG8gaXMgYSBmcmllbmQgb2YganVzdGljZSwgYW5kIHdpbGwgbGVhZCB0aGVtIGluIHRoZSBwYXRocyBvZiBvcmRlciBhbmQgcGVhY2U/IEJ1dCBpZiwgaW5kZWVkLCB0aGV5IGFyZSBhbHRvZ2V0aGVyIGludGVtcGVyYXRlIGFuZCBtYWQgaW4gdGhlaXIgZGVzaXJlIGZvciB3YXIsIHRoZW4gd2VyZSBpdCBub3QgYmV0dGVyIHRoYXQgdGhvdSwgaG9sZGluZyB0aGUgcmVpbnMgb2YgZ292ZXJubWVudCBpbiB0aHkgaGFuZCBzaG91bGRzdCB0dXJuIHRoZWlyIGVhZ2VyIGNvdXJzZSBhbm90aGVyIHdheSwgYW5kIHRoYXQgdGh5IG5hdGl2ZSBjaXR5IGFuZCB0aGUgd2hvbGUgU2FiaW5lIG5hdGlvbiBzaG91bGQgaGF2ZSBpbiB0aGVlIGEgYm9uZCBvZiBnb29kd2lsbCBhbmQgZnJpZW5kc2hpcCB3aXRoIGEgdmlnb3JvdXMgYW5kIHBvd2VyZnVsIGNpdHk/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFwcGVhbHMgd2VyZSBzdHJlbmd0aGVuZWQsIHdlIGFyZSB0b2xkLCBieSBhdXNwaWNpb3VzIG9tZW5zIGFuZCBieSB0aGUgemVhbG91cyBhcmRvdXIgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgd2hvLCB3aGVuIHRoZXkgbGVhcm5lZCBvZiB0aGUgZW1iYXNzeSBmcm9tIFJvbWUsIGJlZ2dlZCBoaW0gdG8gcmV0dXJuIHdpdGggaXQgYW5kIGFzc3VtZSB0aGUgcm95YWwgcG93ZXIgdGhlcmUsIGluIG9yZGVyIHRvIHVuaXRlIGFuZCBibGVuZCB0b2dldGhlciB0aGUgY2l0aXplbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHN1Y2ggd29yZHMgZGlkIE51bWEgZGVjbGluZSB0aGUga2luZ2RvbS4gVGhlbiB0aGUgUm9tYW5zIHB1dCBmb3J0aCBldmVyeSBlZmZvcnQgdG8gbWVldCBoaXMgb2JqZWN0aW9ucywgYW5kIGJlZ2dlZCBoaW0gbm90IHRvIHBsdW5nZSB0aGVtIGFnYWluIGludG8gZmFjdGlvbiBhbmQgY2l2aWwgd2FyLCBzaW5jZSB0aGVyZSB3YXMgbm9uZSBvdGhlciBvbiB3aG9tIGJvdGggcGFydGllcyBjb3VsZCB1bml0ZS4gSGlzIGZhdGhlciBhbHNvIGFuZCBNYXJjaXVzLCB3aGVuIHRoZSBlbnZveXMgaGFkIHdpdGhkcmF3biwgYmVzZXQgaGltIHByaXZhdGVseSwgYW5kIHRyaWVkIHRvIHBlcnN1YWRlIGhpbSB0byBhY2NlcHQgc28gZ3JlYXQgYSBnaWZ0IG9mIHRoZSBnb2RzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkV2ZW4gdGhvdWdoLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSBuZWl0aGVyIGRlc2lyZXN0IHdlYWx0aCBmb3IgdGh5c2VsZiwgYmVjYXVzZSB0aG91IGhhc3QgZW5vdWdoLCBub3IgY292ZXRlc3QgdGhlIGZhbWUgd2hpY2ggY29tZXMgZnJvbSBhdXRob3JpdHkgYW5kIHBvd2VyLCBiZWNhdXNlIHRob3UgaGFzdCB0aGUgZ3JlYXRlciBmYW1lIHdoaWNoIGNvbWVzIGZyb20gdmlydHVlLCB5ZXQgY29uc2lkZXIgdGhhdCB0aGUgd29yayBvZiBhIHRydWUga2luZyBpcyBhIHNlcnZpY2UgcmVuZGVyZWQgdG8gR29kLCB3aG8gbm93IHJvdXNlcyB1cCBhbmQgcmVmdXNlcyB0byBsZWF2ZSBkb3JtYW50IGFuZCBpbmFjdGl2ZSB0aGUgZ3JlYXQgcmlnaHRlb3VzbmVzcyB3aGljaCBpcyB3aXRoaW4gdGhlZS4gRG8gbm90LCB0aGVyZWZvcmUsIGF2b2lkIG5vciBmbGVlIGZyb20gdGhpcyBvZmZpY2UsIHdoaWNoIGEgd2lzZSBtYW4gd2lsbCByZWdhcmQgYXMgYSBmaWVsZCBmb3IgZ3JlYXQgYW5kIG5vYmxlIGFjdGlvbnMsIHdoZXJlIHRoZSBnb2RzIGFyZSBob25vdXJlZCB3aXRoIG1hZ25pZmljZW50IHdvcnNoaXAsIGFuZCB0aGUgaGVhcnRzIG9mIG1lbiBhcmUgZWFzaWx5IGFuZCBxdWlja2x5IHNvZnRlbmVkIGFuZCBpbmNsaW5lZCB0b3dhcmRzIHBpZXR5LCB0aHJvdWdoIHRoZSBtb3VsZGluZyBpbmZsdWVuY2Ugb2YgdGhlaXIgcnVsZXIuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGVvcGxlIGxvdmVkIFRhdGl1cywgdGhvdWdoIGhlIHdhcyBhIGZvcmVpZ24gcHJpbmNlLCBhbmQgdGhleSBwYXkgZGl2aW5lIGhvbm91cnMgdG8gdGhlIG1lbW9yeSBvZiBSb211bHVzLiBBbmQgd2hvIGtub3dzIGJ1dCB0aGF0IHRoZSBwZW9wbGUsIGV2ZW4gdGhvdWdoIHZpY3RvcmlvdXMsIGlzIHNhdGVkIHdpdGggd2FyLCBhbmQsIG5vdyB0aGF0IGl0IGlzIGdsdXR0ZWQgd2l0aCB0cml1bXBocyBhbmQgc3BvaWxzLCBpcyBkZXNpcm91cyBvZiBhIGdlbnRsZSBwcmluY2UsIHdobyBpcyBhIGZyaWVuZCBvZiBqdXN0aWNlLCBhbmQgd2lsbCBsZWFkIHRoZW0gaW4gdGhlIHBhdGhzIG9mIG9yZGVyIGFuZCBwZWFjZT8gQnV0IGlmLCBpbmRlZWQsIHRoZXkgYXJlIGFsdG9nZXRoZXIgaW50ZW1wZXJhdGUgYW5kIG1hZCBpbiB0aGVpciBkZXNpcmUgZm9yIHdhciwgdGhlbiB3ZXJlIGl0IG5vdCBiZXR0ZXIgdGhhdCB0aG91LCBob2xkaW5nIHRoZSByZWlucyBvZiBnb3Zlcm5tZW50IGluIHRoeSBoYW5kIHNob3VsZHN0IHR1cm4gdGhlaXIgZWFnZXIgY291cnNlIGFub3RoZXIgd2F5LCBhbmQgdGhhdCB0aHkgbmF0aXZlIGNpdHkgYW5kIHRoZSB3aG9sZSBTYWJpbmUgbmF0aW9uIHNob3VsZCBoYXZlIGluIHRoZWUgYSBib25kIG9mIGdvb2R3aWxsIGFuZCBmcmllbmRzaGlwIHdpdGggYSB2aWdvcm91cyBhbmQgcG93ZXJmdWwgY2l0eT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGVvcGxlIGxvdmVkIFRhdGl1cywgdGhvdWdoIGhlIHdhcyBhIGZvcmVpZ24gcHJpbmNlLCBhbmQgdGhleSBwYXkgZGl2aW5lIGhvbm91cnMgdG8gdGhlIG1lbW9yeSBvZiBSb211bHVzLiBBbmQgd2hvIGtub3dzIGJ1dCB0aGF0IHRoZSBwZW9wbGUsIGV2ZW4gdGhvdWdoIHZpY3RvcmlvdXMsIGlzIHNhdGVkIHdpdGggd2FyLCBhbmQsIG5vdyB0aGF0IGl0IGlzIGdsdXR0ZWQgd2l0aCB0cml1bXBocyBhbmQgc3BvaWxzLCBpcyBkZXNpcm91cyBvZiBhIGdlbnRsZSBwcmluY2UsIHdobyBpcyBhIGZyaWVuZCBvZiBqdXN0aWNlLCBhbmQgd2lsbCBsZWFkIHRoZW0gaW4gdGhlIHBhdGhzIG9mIG9yZGVyIGFuZCBwZWFjZT8gQnV0IGlmLCBpbmRlZWQsIHRoZXkgYXJlIGFsdG9nZXRoZXIgaW50ZW1wZXJhdGUgYW5kIG1hZCBpbiB0aGVpciBkZXNpcmUgZm9yIHdhciwgdGhlbiB3ZXJlIGl0IG5vdCBiZXR0ZXIgdGhhdCB0aG91LCBob2xkaW5nIHRoZSByZWlucyBvZiBnb3Zlcm5tZW50IGluIHRoeSBoYW5kIHNob3VsZHN0IHR1cm4gdGhlaXIgZWFnZXIgY291cnNlIGFub3RoZXIgd2F5LCBhbmQgdGhhdCB0aHkgbmF0aXZlIGNpdHkgYW5kIHRoZSB3aG9sZSBTYWJpbmUgbmF0aW9uIHNob3VsZCBoYXZlIGluIHRoZWUgYSBib25kIG9mIGdvb2R3aWxsIGFuZCBmcmllbmRzaGlwIHdpdGggYSB2aWdvcm91cyBhbmQgcG93ZXJmdWwgY2l0eT88L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFwcGVhbHMgd2VyZSBzdHJlbmd0aGVuZWQsIHdlIGFyZSB0b2xkLCBieSBhdXNwaWNpb3VzIG9tZW5zIGFuZCBieSB0aGUgemVhbG91cyBhcmRvdXIgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgd2hvLCB3aGVuIHRoZXkgbGVhcm5lZCBvZiB0aGUgZW1iYXNzeSBmcm9tIFJvbWUsIGJlZ2dlZCBoaW0gdG8gcmV0dXJuIHdpdGggaXQgYW5kIGFzc3VtZSB0aGUgcm95YWwgcG93ZXIgdGhlcmUsIGluIG9yZGVyIHRvIHVuaXRlIGFuZCBibGVuZCB0b2dldGhlciB0aGUgY2l0aXplbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TnVtYSB0aGVyZWZvcmUgZGVjaWRlZCB0byB5aWVsZCwgYW5kIGFmdGVyIHNhY3JpZmljaW5nIHRvIHRoZSBnb2RzLCBzZXQgb3V0IGZvciBSb21lLiBUaGUgc2VuYXRlIGFuZCBwZW9wbGUgbWV0IGhpbSBvbiBoaXMgd2F5LCBmaWxsZWQgd2l0aCBhIHdvbmRyb3VzIGxvdmUgb2YgdGhlIG1hbjsgd29tZW4gd2VsY29tZWQgaGltIHdpdGggZml0dGluZyBjcmllcyBvZiBqb3k7IHNhY3JpZmljZXMgd2VyZSBvZmZlcmVkIGluIHRoZSB0ZW1wbGVzLCBhbmQgam95IHdhcyB1bml2ZXJzYWwsIGFzIGlmIHRoZSBjaXR5IHdlcmUgcmVjZWl2aW5nLCBub3QgYSBraW5nLCBidXQgYSBraW5nZG9tLiBXaGVuIHRoZXkgd2VyZSBjb21lIGRvd24gaW50byB0aGUgZm9ydW0sIFNwdXJpdXMgVmV0dGl1cyB3aG9zZSBsb3QgaXQgd2FzIHRvIGJlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW50ZXJyZXg8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAyLjciIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWkuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGF0IHRoYXQgaG91ciwgY2FsbGVkIGZvciBhIHZvdGUgb2YgdGhlIGNpdGl6ZW5zLCBhbmQgYWxsIHZvdGVkIGZvciBOdW1hLiBCdXQgd2hlbiB0aGUgaW5zaWduaWEgb2Ygcm95YWx0eSB3ZXJlIGJyb3VnaHQgdG8gaGltLCBoZSBiYWRlIHRoZSBwZW9wbGUgcGF1c2UsIGFuZCBzYWlkIGhpcyBhdXRob3JpdHkgbXVzdCBmaXJzdCBiZSByYXRpZmllZCBieSBIZWF2ZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGFraW5nIHdpdGggaGltIHRoZSBhdWd1cnMgYW5kIHByaWVzdHMsIGhlIGFzY2VuZGVkIHRoZSBDYXBpdG9sLCB3aGljaCB0aGUgUm9tYW5zIG9mIHRoYXQgdGltZSBjYWxsZWQgdGhlIFRhcnBlaWFuIEhpbGwuIFRoZXJlIHRoZSBjaGllZiBvZiB0aGUgYXVndXJzIHR1cm5lZCB0aGUgdmVpbGVkIGhlYWQgb2YgTnVtYSB0b3dhcmRzIHRoZSBzb3V0aCwgd2hpbGUgaGUgaGltc2VsZiwgc3RhbmRpbmcgYmVoaW5kIGhpbSwgYW5kIGxheWluZyB0aGUgcmlnaHQgaGFuZCBvbiBoaXMgaGVhZCwgcHJheWVkIGFsb3VkLCBhbmQgdHVybmVkIGhpcyBleWVzIGluIGFsbCBkaXJlY3Rpb25zIHRvIG9ic2VydmUgd2hhdGV2ZXIgYmlyZHMgb3Igb3RoZXIgb21lbnMgbWlnaHQgYmUgc2VudCBmcm9tIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGFuIGluY3JlZGlibGUgc2lsZW5jZSBmZWxsIHVwb24gdGhlIHZhc3QgbXVsdGl0dWRlIGluIHRoZSBmb3J1bSwgd2hvIHdhdGNoZWQgaW4gZWFnZXIgc3VzcGVuc2UgZm9yIHRoZSBpc3N1ZSwgdW50aWwgYXQgbGFzdCBhdXNwaWNpb3VzIGJpcmRzIGFwcGVhcmVkIGFuZCBhcHByb2FjaGVkIHRoZSBzY2VuZSBvbiB0aGUgcmlnaHQuIFRoZW4gTnVtYSBwdXQgb24gaGlzIHJveWFsIHJvYmVzIGFuZCB3ZW50IGRvd24gZnJvbSB0aGUgY2l0YWRlbCB0byB0aGUgbXVsdGl0dWRlLCB3aGVyZSBoZSB3YXMgcmVjZWl2ZWQgd2l0aCBnbGFkIGNyaWVzIG9mIHdlbGNvbWUgYXMgdGhlIG1vc3QgcGlvdXMgb2YgbWVuIGFuZCBtb3N0IGJlbG92ZWQgb2YgdGhlIGdvZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OdW1hIHRoZXJlZm9yZSBkZWNpZGVkIHRvIHlpZWxkLCBhbmQgYWZ0ZXIgc2FjcmlmaWNpbmcgdG8gdGhlIGdvZHMsIHNldCBvdXQgZm9yIFJvbWUuIFRoZSBzZW5hdGUgYW5kIHBlb3BsZSBtZXQgaGltIG9uIGhpcyB3YXksIGZpbGxlZCB3aXRoIGEgd29uZHJvdXMgbG92ZSBvZiB0aGUgbWFuOyB3b21lbiB3ZWxjb21lZCBoaW0gd2l0aCBmaXR0aW5nIGNyaWVzIG9mIGpveTsgc2FjcmlmaWNlcyB3ZXJlIG9mZmVyZWQgaW4gdGhlIHRlbXBsZXMsIGFuZCBqb3kgd2FzIHVuaXZlcnNhbCwgYXMgaWYgdGhlIGNpdHkgd2VyZSByZWNlaXZpbmcsIG5vdCBhIGtpbmcsIGJ1dCBhIGtpbmdkb20uIFdoZW4gdGhleSB3ZXJlIGNvbWUgZG93biBpbnRvIHRoZSBmb3J1bSwgU3B1cml1cyBWZXR0aXVzIHdob3NlIGxvdCBpdCB3YXMgdG8gYmUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmludGVycmV4PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIuNyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYXQgdGhhdCBob3VyLCBjYWxsZWQgZm9yIGEgdm90ZSBvZiB0aGUgY2l0aXplbnMsIGFuZCBhbGwgdm90ZWQgZm9yIE51bWEuIEJ1dCB3aGVuIHRoZSBpbnNpZ25pYSBvZiByb3lhbHR5IHdlcmUgYnJvdWdodCB0byBoaW0sIGhlIGJhZGUgdGhlIHBlb3BsZSBwYXVzZSwgYW5kIHNhaWQgaGlzIGF1dGhvcml0eSBtdXN0IGZpcnN0IGJlIHJhdGlmaWVkIGJ5IEhlYXZlbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIuNyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gNy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGFraW5nIHdpdGggaGltIHRoZSBhdWd1cnMgYW5kIHByaWVzdHMsIGhlIGFzY2VuZGVkIHRoZSBDYXBpdG9sLCB3aGljaCB0aGUgUm9tYW5zIG9mIHRoYXQgdGltZSBjYWxsZWQgdGhlIFRhcnBlaWFuIEhpbGwuIFRoZXJlIHRoZSBjaGllZiBvZiB0aGUgYXVndXJzIHR1cm5lZCB0aGUgdmVpbGVkIGhlYWQgb2YgTnVtYSB0b3dhcmRzIHRoZSBzb3V0aCwgd2hpbGUgaGUgaGltc2VsZiwgc3RhbmRpbmcgYmVoaW5kIGhpbSwgYW5kIGxheWluZyB0aGUgcmlnaHQgaGFuZCBvbiBoaXMgaGVhZCwgcHJheWVkIGFsb3VkLCBhbmQgdHVybmVkIGhpcyBleWVzIGluIGFsbCBkaXJlY3Rpb25zIHRvIG9ic2VydmUgd2hhdGV2ZXIgYmlyZHMgb3Igb3RoZXIgb21lbnMgbWlnaHQgYmUgc2VudCBmcm9tIHRoZSBnb2RzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYW4gaW5jcmVkaWJsZSBzaWxlbmNlIGZlbGwgdXBvbiB0aGUgdmFzdCBtdWx0aXR1ZGUgaW4gdGhlIGZvcnVtLCB3aG8gd2F0Y2hlZCBpbiBlYWdlciBzdXNwZW5zZSBmb3IgdGhlIGlzc3VlLCB1bnRpbCBhdCBsYXN0IGF1c3BpY2lvdXMgYmlyZHMgYXBwZWFyZWQgYW5kIGFwcHJvYWNoZWQgdGhlIHNjZW5lIG9uIHRoZSByaWdodC4gVGhlbiBOdW1hIHB1dCBvbiBoaXMgcm95YWwgcm9iZXMgYW5kIHdlbnQgZG93biBmcm9tIHRoZSBjaXRhZGVsIHRvIHRoZSBtdWx0aXR1ZGUsIHdoZXJlIGhlIHdhcyByZWNlaXZlZCB3aXRoIGdsYWQgY3JpZXMgb2Ygd2VsY29tZSBhcyB0aGUgbW9zdCBwaW91cyBvZiBtZW4gYW5kIG1vc3QgYmVsb3ZlZCBvZiB0aGUgZ29kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGZpcnN0IG1lYXN1cmUgb24gYXNzdW1pbmcgdGhlIGdvdmVybm1lbnQgd2FzIHRvIGRpc2JhbmQgdGhlIGJvZHkgb2YgdGhyZWUgaHVuZHJlZCBtZW4gdGhhdCBSb211bHVzIGFsd2F5cyBrZXB0IGFib3V0IGhpcyBwZXJzb24sIGFuZCBjYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DZWxlcmVzPC9xPiAodGhhdCBpcywgPGVtcGg+c3dpZnQgb25lczwvZW1waD4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI2LjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHh4dmkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+KTsgZm9yIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGRpc3RydXN0IHRob3NlIHdobyB0cnVzdGVkIGhpbSwgbm9yIHRvIHJlaWduIG92ZXIgdGhvc2Ugd2hvIGRpc3RydXN0ZWQgaGltLiBIaXMgc2Vjb25kIG1lYXN1cmUgd2FzIHRvIGFkZCB0byB0aGUgdHdvIHByaWVzdHMgb2YgSnVwaXRlciBhbmQgTWFycyBhIHRoaXJkIHByaWVzdCBvZiBSb211bHVzLCB3aG9tIGhlIGNhbGxlZCB0aGUgRmxhbWVuIFF1aXJpbmFsaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBiZWZvcmUgdGhpcyB0aW1lIHRoZSBSb21hbnMgY2FsbGVkIHRoZWlyIHByaWVzdHMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mbGFtaW5lcyw8L3E+IGZyb20gdGhlIGNsb3NlLWZpdHRpbmcgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waWxvaSw8L3E+IG9yIDxlbXBoPmNhcHM8L2VtcGg+LCB3aGljaCB0aGV5IHdlYXIgdXBvbiB0aGVpciBoZWFkcywgYW5kIHdoaWNoIGhhdmUgdGhlIGxvbmdlciBuYW1lIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGlsYW1lbmFpLDwvcT4gYXMgd2UgYXJlIHRvbGQsIHRoZXJlIGJlaW5nIG1vcmUgR3JlZWsgd29yZHMgbWluZ2xlZCB3aXRoIHRoZSBMYXRpbiBhdCB0aGF0IHRpbWUgdGhhbiBub3cuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE1LjMiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHh2LiAzLjwvYmlibD4gUGx1dGFyY2ggZG9lcyBub3QgaGVzaXRhdGUgdG8gZGVyaXZlIHRoZSBMYXRpbiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mbGFtaW5lczwvcT4gZnJvbSB0aGUgZG91YnRmdWwgR3JlZWsgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGlsYW1hbmVpLjwvcT4KICAgICAgICAgICAgPC9ub3RlPiBUaHVzIGFsc28gdGhlIG5hbWUgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sYWVuYSw8L3E+IHdoaWNoIHRoZSBSb21hbnMgZ2l2ZSB0byB0aGUgcHJpZXN0bHkgbWFudGxlLCBKdWJhIHNheXMgaXMgdGhlIHNhbWUgYXMgdGhlIEdyZWVrIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2hsYWluYTwvcT47IGFuZCB0aGF0IHRoZSBuYW1lIENhbWlsbHVzLCB3aGljaCB0aGUgUm9tYW5zIGdpdmUgdG8gdGhlIGJveSB3aXRoIGJvdGggcGFyZW50cyBsaXZpbmcgd2hvIGF0dGVuZHMgdXBvbiB0aGUgcHJpZXN0IG9mIEp1cGl0ZXIsIGlzIHRoZSBzYW1lIGFzIHRoYXQgd2hpY2ggc29tZSBvZiB0aGUgR3JlZWtzIGdpdmUgdG8gSGVybWVzLCBmcm9tIGhpcyBvZmZpY2Ugb2YgYXR0ZW5kYW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmaXJzdCBtZWFzdXJlIG9uIGFzc3VtaW5nIHRoZSBnb3Zlcm5tZW50IHdhcyB0byBkaXNiYW5kIHRoZSBib2R5IG9mIHRocmVlIGh1bmRyZWQgbWVuIHRoYXQgUm9tdWx1cyBhbHdheXMga2VwdCBhYm91dCBoaXMgcGVyc29uLCBhbmQgY2FsbGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DZWxlcmVzPC9xPiAodGhhdCBpcywgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5zd2lmdCBvbmVzPC9lbXBoPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDI2LjIiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHh4dmkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+KTsgZm9yIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIGRpc3RydXN0IHRob3NlIHdobyB0cnVzdGVkIGhpbSwgbm9yIHRvIHJlaWduIG92ZXIgdGhvc2Ugd2hvIGRpc3RydXN0ZWQgaGltLiBIaXMgc2Vjb25kIG1lYXN1cmUgd2FzIHRvIGFkZCB0byB0aGUgdHdvIHByaWVzdHMgb2YgSnVwaXRlciBhbmQgTWFycyBhIHRoaXJkIHByaWVzdCBvZiBSb211bHVzLCB3aG9tIGhlIGNhbGxlZCB0aGUgRmxhbWVuIFF1aXJpbmFsaXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyNi4yIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4eHZpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBiZWZvcmUgdGhpcyB0aW1lIHRoZSBSb21hbnMgY2FsbGVkIHRoZWlyIHByaWVzdHMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZsYW1pbmVzLDwvcT4gZnJvbSB0aGUgY2xvc2UtZml0dGluZyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGlsb2ksPC9xPiBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmNhcHM8L2VtcGg+LCB3aGljaCB0aGV5IHdlYXIgdXBvbiB0aGVpciBoZWFkcywgYW5kIHdoaWNoIGhhdmUgdGhlIGxvbmdlciBuYW1lIG9mIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waWxhbWVuYWksPC9xPiBhcyB3ZSBhcmUgdG9sZCwgdGhlcmUgYmVpbmcgbW9yZSBHcmVlayB3b3JkcyBtaW5nbGVkIHdpdGggdGhlIExhdGluIGF0IHRoYXQgdGltZSB0aGFuIG5vdy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE1LjMiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHh2LiAzLjwvYmlibD4gUGx1dGFyY2ggZG9lcyBub3QgaGVzaXRhdGUgdG8gZGVyaXZlIHRoZSBMYXRpbiAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZsYW1pbmVzPC9xPiBmcm9tIHRoZSBkb3VidGZ1bCBHcmVlayAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBpbGFtYW5laS48L3E+CiAgICAgICAgICAgIDwvbm90ZT4gVGh1cyBhbHNvIHRoZSBuYW1lIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxNS4zIiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4di4gMy48L2JpYmw+IFBsdXRhcmNoIGRvZXMgbm90IGhlc2l0YXRlIHRvIGRlcml2ZSB0aGUgTGF0aW4gCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mbGFtaW5lczwvcT4gZnJvbSB0aGUgZG91YnRmdWwgR3JlZWsgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waWxhbWFuZWkuPC9xPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxhZW5hLDwvcT4gd2hpY2ggdGhlIFJvbWFucyBnaXZlIHRvIHRoZSBwcmllc3RseSBtYW50bGUsIEp1YmEgc2F5cyBpcyB0aGUgc2FtZSBhcyB0aGUgR3JlZWsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNobGFpbmE8L3E+OyBhbmQgdGhhdCB0aGUgbmFtZSBDYW1pbGx1cywgd2hpY2ggdGhlIFJvbWFucyBnaXZlIHRvIHRoZSBib3kgd2l0aCBib3RoIHBhcmVudHMgbGl2aW5nIHdobyBhdHRlbmRzIHVwb24gdGhlIHByaWVzdCBvZiBKdXBpdGVyLCBpcyB0aGUgc2FtZSBhcyB0aGF0IHdoaWNoIHNvbWUgb2YgdGhlIEdyZWVrcyBnaXZlIHRvIEhlcm1lcywgZnJvbSBoaXMgb2ZmaWNlIG9mIGF0dGVuZGFudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0YWtpbmcgc3VjaCBtZWFzdXJlcyB0byBzZWN1cmUgdGhlIGdvb2R3aWxsIGFuZCBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgTnVtYSBzdHJhaWdodHdheSBhdHRlbXB0ZWQgdG8gc29mdGVuIHRoZSBjaXR5LCBhcyBpcm9uIGlzIHNvZnRlbmVkIGluIHRoZSBmaXJlLCBhbmQgY2hhbmdlIGl0cyBoYXJzaCBhbmQgd2FybGlrZSB0ZW1wZXIgaW50byBvbmUgb2YgZ3JlYXRlciBnZW50bGVuZXNzIGFuZCBqdXN0aWNlLiBGb3IgaWYgYSBjaXR5IHdhcyBldmVyIGluIHdoYXQgUGxhdG8gY2FsbHM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNS42IiB2YWxpZD0ieWVzIj5MeWN1cmd1cywgdi4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZldmVyaXNoPC9xPiBzdGF0ZSwgUm9tZSBjZXJ0YWlubHkgd2FzIGF0IHRoYXQgdGltZS4gSXQgd2FzIGJyb3VnaHQgaW50byBiZWluZyBhdCB0aGUgdmVyeSBvdXRzZXQgYnkgdGhlIGV4Y2Vzc2l2ZSBkYXJpbmcgYW5kIHJlY2tsZXNzIGNvdXJhZ2Ugb2YgdGhlIGJvbGRlc3QgYW5kIG1vc3Qgd2FybGlrZSBzcGlyaXRzLCB3aG8gZm9yY2VkIHRoZWlyIHdheSB0aGl0aGVyIGZyb20gYWxsIHBhcnRzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW4gaXRzIG1hbnkgZXhwZWRpdGlvbnMgYW5kIGl0cyBjb250aW51b3VzIHdhcnMgaXQgZm91bmQgbm91cmlzaG1lbnQgYW5kIGluY3JlYXNlIG9mIGl0cyBwb3dlcjsgYW5kIGp1c3QgYXMgd2hhdCBpcyBwbGFudGVkIGluIHRoZSBlYXJ0aCBnZXRzIGEgZmlybWVyIHNlYXQgdGhlIG1vcmUgaXQgaXMgc2hha2VuLCBzbyBSb21lIHNlZW1lZCB0byBiZSBtYWRlIHN0cm9uZyBieSBpdHMgdmVyeSBwZXJpbHMuIEFuZCB0aGVyZWZvcmUgTnVtYSwganVkZ2luZyBpdCB0byBiZSBubyBzbGlnaHQgb3IgdHJpdmlhbCB1bmRlcnRha2luZyB0byBtb2xsaWZ5IGFuZCBuZXdseSBmYXNoaW9uIGZvciBwZWFjZSBzbyBwcmVzdW1wdHVvdXMgYW5kIHN0dWJib3JuIGEgcGVvcGxlLCBjYWxsZWQgaW4gdGhlIGdvZHMgdG8gYWlkIGFuZCBhc3Npc3QgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgZm9yIHRoZSBtb3N0IHBhcnQgYnkgc2FjcmlmaWNlcywgcHJvY2Vzc2lvbnMsIGFuZCByZWxpZ2lvdXMgZGFuY2VzLCB3aGljaCBoZSBoaW1zZWxmIGFwcG9pbnRlZCBhbmQgY29uZHVjdGVkLCBhbmQgd2hpY2ggbWluZ2xlZCB3aXRoIHRoZWlyIHNvbGVtbml0eSBhIGRpdmVyc2lvbiBmdWxsIG9mIGNoYXJtIGFuZCBhIGJlbmVmaWNlbnQgcGxlYXN1cmUsIHRoYXQgaGUgd29uIHRoZSBwZW9wbGUncyBmYXZvdXIgYW5kIHRhbWVkIHRoZWlyIGZpZXJjZSBhbmQgd2FybGlrZSB0ZW1wZXJzLiBBdCB0aW1lcywgYWxzbywgYnkgaGVyYWxkaW5nIHRvIHRoZW0gdmFndWUgdGVycm9ycyBmcm9tIHRoZSBnb2QsIHN0cmFuZ2UgYXBwYXJpdGlvbnMgb2YgZGl2aW5lIGJlaW5ncyBhbmQgdGhyZWF0ZW5pbmcgdm9pY2VzLCBoZSB3b3VsZCBzdWJkdWUgYW5kIGh1bWJsZSB0aGVpciBtaW5kcyBieSBtZWFucyBvZiBzdXBlcnN0aXRpb3VzIGZlYXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgY2hpZWYgcmVhc29uIHdoeSBOdW1hJ3Mgd2lzZG9tIGFuZCBjdWx0dXJlIHdlcmUgc2FpZCB0byBoYXZlIGJlZW4gZHVlIHRvIGhpcyBpbnRpbWFjeSB3aXRoIFB5dGhhZ29yYXM7IGZvciBpbiB0aGUgcGhpbG9zb3BoeSBvZiB0aGUgb25lLCBhbmQgaW4gdGhlIGNpdmlsIHBvbGl0eSBvZiB0aGUgb3RoZXIsIHJlbGlnaW91cyBzZXJ2aWNlcyBhbmQgb2NjdXBhdGlvbnMgaGF2ZSBhIGxhcmdlIHBsYWNlLiBJdCBpcyBzYWlkIGFsc28gdGhhdCB0aGUgc29sZW1uaXR5IG9mIGhpcyBvdXR3YXJkIGRlbWVhbm91ciB3YXMgYWRvcHRlZCBieSBoaW0gYmVjYXVzZSBoZSBzaGFyZWQgdGhlIGZlZWxpbmdzIG9mIFB5dGhhZ29yYXMgYWJvdXQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgcGhpbG9zb3BoZXIsIGluZGVlZCwgaXMgdGhvdWdodCB0byBoYXZlIHRhbWVkIGFuIGVhZ2xlLCB3aGljaCBoZSBzdG9wcGVkIGJ5IGNlcnRhaW4gY3JpZXMgb2YgaGlzLCBhbmQgYnJvdWdodCBkb3duIGZyb20gaGlzIGxvZnR5IGZsaWdodDsgYWxzbyB0byBoYXZlIGRpc2Nsb3NlZCBoaXMgZ29sZGVuIHRoaWdoIGFzIGhlIHBhc3NlZCB0aHJvdWdoIHRoZSBhc3NlbWJsZWQgdGhyb25ncyBhdCBPbHltcGlhLiBBbmQgd2UgaGF2ZSByZXBvcnRzIG9mIG90aGVyIGRldmljZXMgYW5kIHBlcmZvcm1hbmNlcyBvZiBoaXMgd2hpY2ggc2F2b3VyZWQgb2YgdGhlIG1hcnZlbGxvdXMsIHJlZ2FyZGluZyB3aGljaCBUaW1vbiB0aGUgUGhsaWFzaWFuIHdyb3RlOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5Eb3duIHRvIGEganVnZ2xlcidzIGxldmVsIGhlIHNpbmtzIHdpdGggaGlzIGNoZWF0aW5nIGRldmljZXMsPC9sPgoJCQkJCSAgICAgICAgICA8bD5MYXlpbmcgaGlzIG5ldHMgZm9yIG1lbiwgUHl0aGFnb3JhcywgbG92ZXIgb2YgYm9tYmFzdC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsaWtlIG1hbm5lciBOdW1hJ3MgZmljdGlvbiB3YXMgdGhlIGxvdmUgd2hpY2ggYSBjZXJ0YWluIGdvZGRlc3Mgb3IgbW91bnRhaW4gbnltcGggYm9yZSBoaW0sIGFyaWQgaGVyIHNlY3JldCBtZWV0aW5ncyB3aXRoIGhpbSwgYXMgYWxyZWFkeSBtZW50aW9uZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDQuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBpdi4gMS0yLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgaGlzIGZhbWlsaWFyIGNvbnZlcnNlIHdpdGggdGhlIE11c2VzLiBGb3IgaGUgYXNjcmliZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgb3JhY3VsYXIgdGVhY2hpbmdzIHRvIHRoZSBNdXNlcywgYW5kIGhlIHRhdWdodCB0aGUgUm9tYW5zIHRvIHBheSBlc3BlY2lhbCBob25vdXJzIHRvIG9uZSBNdXNlIGluIHBhcnRpY3VsYXIsIHdob20gaGUgY2FsbGVkIFRhY2l0YSwgdGhhdCBpcywgPGVtcGg+dGhlIHNpbGVudDwvZW1waD4sIG9yIDxlbXBoPnNwZWVjaGxlc3Mgb25lPC9lbXBoPjsgdGhlcmVieSBwZXJoYXBzIGhhbmRpbmcgb24gYW5kIGhvbm91cmluZyB0aGUgUHl0aGFnb3JlYW4gcHJlY2VwdCBvZiBzaWxlbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0YWtpbmcgc3VjaCBtZWFzdXJlcyB0byBzZWN1cmUgdGhlIGdvb2R3aWxsIGFuZCBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgTnVtYSBzdHJhaWdodHdheSBhdHRlbXB0ZWQgdG8gc29mdGVuIHRoZSBjaXR5LCBhcyBpcm9uIGlzIHNvZnRlbmVkIGluIHRoZSBmaXJlLCBhbmQgY2hhbmdlIGl0cyBoYXJzaCBhbmQgd2FybGlrZSB0ZW1wZXIgaW50byBvbmUgb2YgZ3JlYXRlciBnZW50bGVuZXNzIGFuZCBqdXN0aWNlLiBGb3IgaWYgYSBjaXR5IHdhcyBldmVyIGluIHdoYXQgUGxhdG8gY2FsbHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDUuNiIgdmFsaWQ9InllcyI+THljdXJndXMsIHYuIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGEgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDUuNiIgdmFsaWQ9InllcyI+THljdXJndXMsIHYuIDYuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZldmVyaXNoPC9xPiBzdGF0ZSwgUm9tZSBjZXJ0YWlubHkgd2FzIGF0IHRoYXQgdGltZS4gSXQgd2FzIGJyb3VnaHQgaW50byBiZWluZyBhdCB0aGUgdmVyeSBvdXRzZXQgYnkgdGhlIGV4Y2Vzc2l2ZSBkYXJpbmcgYW5kIHJlY2tsZXNzIGNvdXJhZ2Ugb2YgdGhlIGJvbGRlc3QgYW5kIG1vc3Qgd2FybGlrZSBzcGlyaXRzLCB3aG8gZm9yY2VkIHRoZWlyIHdheSB0aGl0aGVyIGZyb20gYWxsIHBhcnRzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiBpdHMgbWFueSBleHBlZGl0aW9ucyBhbmQgaXRzIGNvbnRpbnVvdXMgd2FycyBpdCBmb3VuZCBub3VyaXNobWVudCBhbmQgaW5jcmVhc2Ugb2YgaXRzIHBvd2VyOyBhbmQganVzdCBhcyB3aGF0IGlzIHBsYW50ZWQgaW4gdGhlIGVhcnRoIGdldHMgYSBmaXJtZXIgc2VhdCB0aGUgbW9yZSBpdCBpcyBzaGFrZW4sIHNvIFJvbWUgc2VlbWVkIHRvIGJlIG1hZGUgc3Ryb25nIGJ5IGl0cyB2ZXJ5IHBlcmlscy4gQW5kIHRoZXJlZm9yZSBOdW1hLCBqdWRnaW5nIGl0IHRvIGJlIG5vIHNsaWdodCBvciB0cml2aWFsIHVuZGVydGFraW5nIHRvIG1vbGxpZnkgYW5kIG5ld2x5IGZhc2hpb24gZm9yIHBlYWNlIHNvIHByZXN1bXB0dW91cyBhbmQgc3R1YmJvcm4gYSBwZW9wbGUsIGNhbGxlZCBpbiB0aGUgZ29kcyB0byBhaWQgYW5kIGFzc2lzdCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBmb3IgdGhlIG1vc3QgcGFydCBieSBzYWNyaWZpY2VzLCBwcm9jZXNzaW9ucywgYW5kIHJlbGlnaW91cyBkYW5jZXMsIHdoaWNoIGhlIGhpbXNlbGYgYXBwb2ludGVkIGFuZCBjb25kdWN0ZWQsIGFuZCB3aGljaCBtaW5nbGVkIHdpdGggdGhlaXIgc29sZW1uaXR5IGEgZGl2ZXJzaW9uIGZ1bGwgb2YgY2hhcm0gYW5kIGEgYmVuZWZpY2VudCBwbGVhc3VyZSwgdGhhdCBoZSB3b24gdGhlIHBlb3BsZSdzIGZhdm91ciBhbmQgdGFtZWQgdGhlaXIgZmllcmNlIGFuZCB3YXJsaWtlIHRlbXBlcnMuIEF0IHRpbWVzLCBhbHNvLCBieSBoZXJhbGRpbmcgdG8gdGhlbSB2YWd1ZSB0ZXJyb3JzIGZyb20gdGhlIGdvZCwgc3RyYW5nZSBhcHBhcml0aW9ucyBvZiBkaXZpbmUgYmVpbmdzIGFuZCB0aHJlYXRlbmluZyB2b2ljZXMsIGhlIHdvdWxkIHN1YmR1ZSBhbmQgaHVtYmxlIHRoZWlyIG1pbmRzIGJ5IG1lYW5zIG9mIHN1cGVyc3RpdGlvdXMgZmVhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBjaGllZiByZWFzb24gd2h5IE51bWEncyB3aXNkb20gYW5kIGN1bHR1cmUgd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiBkdWUgdG8gaGlzIGludGltYWN5IHdpdGggUHl0aGFnb3JhczsgZm9yIGluIHRoZSBwaGlsb3NvcGh5IG9mIHRoZSBvbmUsIGFuZCBpbiB0aGUgY2l2aWwgcG9saXR5IG9mIHRoZSBvdGhlciwgcmVsaWdpb3VzIHNlcnZpY2VzIGFuZCBvY2N1cGF0aW9ucyBoYXZlIGEgbGFyZ2UgcGxhY2UuIEl0IGlzIHNhaWQgYWxzbyB0aGF0IHRoZSBzb2xlbW5pdHkgb2YgaGlzIG91dHdhcmQgZGVtZWFub3VyIHdhcyBhZG9wdGVkIGJ5IGhpbSBiZWNhdXNlIGhlIHNoYXJlZCB0aGUgZmVlbGluZ3Mgb2YgUHl0aGFnb3JhcyBhYm91dCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgcGhpbG9zb3BoZXIsIGluZGVlZCwgaXMgdGhvdWdodCB0byBoYXZlIHRhbWVkIGFuIGVhZ2xlLCB3aGljaCBoZSBzdG9wcGVkIGJ5IGNlcnRhaW4gY3JpZXMgb2YgaGlzLCBhbmQgYnJvdWdodCBkb3duIGZyb20gaGlzIGxvZnR5IGZsaWdodDsgYWxzbyB0byBoYXZlIGRpc2Nsb3NlZCBoaXMgZ29sZGVuIHRoaWdoIGFzIGhlIHBhc3NlZCB0aHJvdWdoIHRoZSBhc3NlbWJsZWQgdGhyb25ncyBhdCBPbHltcGlhLiBBbmQgd2UgaGF2ZSByZXBvcnRzIG9mIG90aGVyIGRldmljZXMgYW5kIHBlcmZvcm1hbmNlcyBvZiBoaXMgd2hpY2ggc2F2b3VyZWQgb2YgdGhlIG1hcnZlbGxvdXMsIHJlZ2FyZGluZyB3aGljaCBUaW1vbiB0aGUgUGhsaWFzaWFuIHdyb3RlOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RG93biB0byBhIGp1Z2dsZXIncyBsZXZlbCBoZSBzaW5rcyB3aXRoIGhpcyBjaGVhdGluZyBkZXZpY2VzLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXlpbmcgaGlzIG5ldHMgZm9yIG1lbiwgUHl0aGFnb3JhcywgbG92ZXIgb2YgYm9tYmFzdC48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RG93biB0byBhIGp1Z2dsZXIncyBsZXZlbCBoZSBzaW5rcyB3aXRoIGhpcyBjaGVhdGluZyBkZXZpY2VzLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXlpbmcgaGlzIG5ldHMgZm9yIG1lbiwgUHl0aGFnb3JhcywgbG92ZXIgb2YgYm9tYmFzdC48L2w+CgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIGxpa2UgbWFubmVyIE51bWEncyBmaWN0aW9uIHdhcyB0aGUgbG92ZSB3aGljaCBhIGNlcnRhaW4gZ29kZGVzcyBvciBtb3VudGFpbiBueW1waCBib3JlIGhpbSwgYXJpZCBoZXIgc2VjcmV0IG1lZXRpbmdzIHdpdGggaGltLCBhcyBhbHJlYWR5IG1lbnRpb25lZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDQuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBpdi4gMS0yLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgaGlzIGZhbWlsaWFyIGNvbnZlcnNlIHdpdGggdGhlIE11c2VzLiBGb3IgaGUgYXNjcmliZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgb3JhY3VsYXIgdGVhY2hpbmdzIHRvIHRoZSBNdXNlcywgYW5kIGhlIHRhdWdodCB0aGUgUm9tYW5zIHRvIHBheSBlc3BlY2lhbCBob25vdXJzIHRvIG9uZSBNdXNlIGluIHBhcnRpY3VsYXIsIHdob20gaGUgY2FsbGVkIFRhY2l0YSwgdGhhdCBpcywgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiA0LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgaXYuIDEtMi48L2JpYmw+CiAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+dGhlIHNpbGVudDwvZW1waD4sIG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+c3BlZWNobGVzcyBvbmU8L2VtcGg+OyB0aGVyZWJ5IHBlcmhhcHMgaGFuZGluZyBvbiBhbmQgaG9ub3VyaW5nIHRoZSBQeXRoYWdvcmVhbiBwcmVjZXB0IG9mIHNpbGVuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoaXMgb3JkaW5hbmNlcyBjb25jZXJuaW5nIGltYWdlcyBhcmUgYWx0b2dldGhlciBpbiBoYXJtb255IHdpdGggdGhlIGRvY3RyaW5lcyBvZiBQeXRoYWdvcmFzLiBGb3IgdGhhdCBwaGlsb3NvcGhlciBtYWludGFpbmVkIHRoYXQgdGhlIGZpcnN0IHByaW5jaXBsZSBvZiBiZWluZyB3YXMgYmV5b25kIHNlbnNlIG9yIGZlZWxpbmcsIHdhcyBpbnZpc2libGUgYW5kIHVuY3JlYXRlZCwgYW5kIGRpc2Nlcm5pYmxlIG9ubHkgYnkgdGhlIG1pbmQuIEFuZCBpbiBsaWtlIG1hbm5lciBOdW1hIGZvcmJhZGUgdGhlIFJvbWFucyB0byByZXZlcmUgYW4gaW1hZ2Ugb2YgR29kIHdoaWNoIGhhZCB0aGUgZm9ybSBvZiBtYW4gb3IgYmVhc3QuIE5vciB3YXMgdGhlcmUgYW1vbmcgdGhlbSBpbiB0aGlzIGVhcmxpZXIgdGltZSBhbnkgcGFpbnRlZCBvciBncmF2ZW4gbGlrZW5lc3Mgb2YgRGVpdHksIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGlsZSBmb3IgdGhlIGZpcnN0IGh1bmRyZWQgYW5kIHNldmVudHkgeWVhcnMgdGhleSB3ZXJlIGNvbnRpbnVhbGx5IGJ1aWxkaW5nIHRlbXBsZXMgYW5kIGVzdGFibGlzaGluZyBzYWNyZWQgc2hyaW5lcywgdGhleSBtYWRlIG5vIHN0YXR1ZXMgaW4gYm9kaWx5IGZvcm0gZm9yIHRoZW0sIGNvbnZpbmNlZCB0aGF0IGl0IHdhcyBpbXBpb3VzIHRvIGxpa2VuIGhpZ2hlciB0aGluZ3MgdG8gbG93ZXIsIGFuZCB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlIHRvIGFwcHJlaGVuZCBEZWl0eSBleGNlcHQgYnkgdGhlIGludGVsbGVjdC4gVGhlaXIgc2FjcmlmaWNlcywgdG9vLCB3ZXJlIGFsdG9nZXRoZXIgYXBwcm9wcmlhdGUgdG8gdGhlIFB5dGhhZ29yZWFuIHdvcnNoaXA7IGZvciBtb3N0IG9mIHRoZW0gaW52b2x2ZWQgbm8gYmxvb2RzaGVkLCBidXQgd2VyZSBtYWRlIHdpdGggZmxvdXIsIGRyaW5rLW9mZmVyaW5ncywgYW5kIHRoZSBsZWFzdCBjb3N0bHkgZ2lmdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoaXMgb3JkaW5hbmNlcyBjb25jZXJuaW5nIGltYWdlcyBhcmUgYWx0b2dldGhlciBpbiBoYXJtb255IHdpdGggdGhlIGRvY3RyaW5lcyBvZiBQeXRoYWdvcmFzLiBGb3IgdGhhdCBwaGlsb3NvcGhlciBtYWludGFpbmVkIHRoYXQgdGhlIGZpcnN0IHByaW5jaXBsZSBvZiBiZWluZyB3YXMgYmV5b25kIHNlbnNlIG9yIGZlZWxpbmcsIHdhcyBpbnZpc2libGUgYW5kIHVuY3JlYXRlZCwgYW5kIGRpc2Nlcm5pYmxlIG9ubHkgYnkgdGhlIG1pbmQuIEFuZCBpbiBsaWtlIG1hbm5lciBOdW1hIGZvcmJhZGUgdGhlIFJvbWFucyB0byByZXZlcmUgYW4gaW1hZ2Ugb2YgR29kIHdoaWNoIGhhZCB0aGUgZm9ybSBvZiBtYW4gb3IgYmVhc3QuIE5vciB3YXMgdGhlcmUgYW1vbmcgdGhlbSBpbiB0aGlzIGVhcmxpZXIgdGltZSBhbnkgcGFpbnRlZCBvciBncmF2ZW4gbGlrZW5lc3Mgb2YgRGVpdHksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGlsZSBmb3IgdGhlIGZpcnN0IGh1bmRyZWQgYW5kIHNldmVudHkgeWVhcnMgdGhleSB3ZXJlIGNvbnRpbnVhbGx5IGJ1aWxkaW5nIHRlbXBsZXMgYW5kIGVzdGFibGlzaGluZyBzYWNyZWQgc2hyaW5lcywgdGhleSBtYWRlIG5vIHN0YXR1ZXMgaW4gYm9kaWx5IGZvcm0gZm9yIHRoZW0sIGNvbnZpbmNlZCB0aGF0IGl0IHdhcyBpbXBpb3VzIHRvIGxpa2VuIGhpZ2hlciB0aGluZ3MgdG8gbG93ZXIsIGFuZCB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlIHRvIGFwcHJlaGVuZCBEZWl0eSBleGNlcHQgYnkgdGhlIGludGVsbGVjdC4gVGhlaXIgc2FjcmlmaWNlcywgdG9vLCB3ZXJlIGFsdG9nZXRoZXIgYXBwcm9wcmlhdGUgdG8gdGhlIFB5dGhhZ29yZWFuIHdvcnNoaXA7IGZvciBtb3N0IG9mIHRoZW0gaW52b2x2ZWQgbm8gYmxvb2RzaGVkLCBidXQgd2VyZSBtYWRlIHdpdGggZmxvdXIsIGRyaW5rLW9mZmVyaW5ncywgYW5kIHRoZSBsZWFzdCBjb3N0bHkgZ2lmdHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIHRoaW5ncywgb3RoZXIgZXh0ZXJuYWwgcHJvb2ZzIGFyZSB1cmdlZCB0byBzaG93IHRoYXQgdGhlIHR3byBtZW4gd2VyZSBhY3F1YWludGVkIHdpdGggZWFjaCBvdGhlci4gT25lIG9mIHRoZXNlIGlzIHRoYXQgUHl0aGFnb3JhcyB3YXMgZW5yb2xsZWQgYXMgYSBjaXRpemVuIG9mIFJvbWUuIFRoaXMgZmFjdCBpcyByZWNvcmRlZCBieSBFcGljaGFybXVzIHRoZSBjb21pYyBwb2V0LCBpbiBhIGNlcnRhaW4gdHJlYXRpc2Ugd2hpY2ggaGUgZGVkaWNhdGVkIHRvIEFudGVub3I7IGFuZCBFcGljaGFybXVzIHdhcyBhbiBhbmNpZW50LCBhbmQgYmVsb25nZWQgdG8gdGhlIHNjaG9vbCBvZiBQeXRoYWdvcmFzLiBBbm90aGVyIHByb29mIGlzIHRoYXQgb25lIG9mIHRoZSBmb3VyIHNvbnMgYm9ybiB0byBraW5nIE51bWEgd2FzIG5hbWVkIE1hbWVyY3VzLCBhZnRlciB0aGUgc29uIG9mIFB5dGhhZ29yYXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnJvbSBoaW0gdGhleSBzYXkgdGhhdCB0aGUgcGF0cmljaWFuIGZhbWlseSBvZiB0aGUgQWVtaWxpaSB0b29rIGl0cyBuYW1lLCBBZW1pbGl1cyBiZWluZyB0aGUgZW5kZWFyaW5nIG5hbWUgd2hpY2ggdGhlIGtpbmcgZ2F2ZSBoaW0gZm9yIHRoZSBncmFjZSBhbmQgPGVtcGg+d2luc29tZW5lc3M8L2VtcGg+IG9mIGhpcyBzcGVlY2guIE1vcmVvdmVyLCBJIG15c2VsZiBoYXZlIGhlYXJkIG1hbnkgcGVvcGxlIGF0IFJvbWUgcmVjb3VudCBob3csIHdoZW4gYW4gb3JhY2xlIG9uY2UgY29tbWFuZGVkIHRoZSBSb21hbnMgdG8gZXJlY3QgaW4gdGhlaXIgY2l0eSBtb251bWVudHMgdG8gdGhlIHdpc2VzdCBhbmQgdGhlIGJyYXZlc3Qgb2YgdGhlIEdyZWVrcywgdGhleSBzZXQgdXAgaW4gdGhlIGZvcnVtIHR3byBzdGF0dWVzIGluIGJyb256ZSwgb25lIG9mIEFsY2liaWFkZXMsIGFuZCBvbmUgb2YgUHl0aGFnb3Jhcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gdGhlIGVsZGVyIFBsaW55ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxpbi4gTmF0LiAzNC4xMiIgdmFsaWQ9InllcyI+Ti5ILiB4eHhpdi4gMTI8L2JpYmw+KSwgdGhlc2Ugc3RhdHVlcyBzdG9vZCBpbiB0aGUgY29taXRpdW0gYXQgUm9tZSBmcm9tIHRoZSB0aW1lIG9mIHRoZSBTYW1uaXRlIHdhcnMgKDM0My0yOTAgQi5DLikgZG93biB0byB0aGF0IG9mIFN1bGxhICgxMzgtNzggQi5DLikuPC9ub3RlPiAgSG93ZXZlciwgc2luY2UgdGhlIG1hdHRlciBvZiBOdW1hJ3MgYWNxdWFpbnRhbmNlIHdpdGggUHl0aGFnb3JhcyBpcyBpbnZvbHZlZCBpbiBtdWNoIGRpc3B1dGUsIHRvIGRpc2N1c3MgaXQgYXQgZ3JlYXRlciBsZW5ndGgsIGFuZCB0byB3aW4gYmVsaWVmIGZvciBpdCwgd291bGQgc2F2b3VyIG9mIHlvdXRoZnVsIGNvbnRlbnRpb3VzbmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIHRoaW5ncywgb3RoZXIgZXh0ZXJuYWwgcHJvb2ZzIGFyZSB1cmdlZCB0byBzaG93IHRoYXQgdGhlIHR3byBtZW4gd2VyZSBhY3F1YWludGVkIHdpdGggZWFjaCBvdGhlci4gT25lIG9mIHRoZXNlIGlzIHRoYXQgUHl0aGFnb3JhcyB3YXMgZW5yb2xsZWQgYXMgYSBjaXRpemVuIG9mIFJvbWUuIFRoaXMgZmFjdCBpcyByZWNvcmRlZCBieSBFcGljaGFybXVzIHRoZSBjb21pYyBwb2V0LCBpbiBhIGNlcnRhaW4gdHJlYXRpc2Ugd2hpY2ggaGUgZGVkaWNhdGVkIHRvIEFudGVub3I7IGFuZCBFcGljaGFybXVzIHdhcyBhbiBhbmNpZW50LCBhbmQgYmVsb25nZWQgdG8gdGhlIHNjaG9vbCBvZiBQeXRoYWdvcmFzLiBBbm90aGVyIHByb29mIGlzIHRoYXQgb25lIG9mIHRoZSBmb3VyIHNvbnMgYm9ybiB0byBraW5nIE51bWEgd2FzIG5hbWVkIE1hbWVyY3VzLCBhZnRlciB0aGUgc29uIG9mIFB5dGhhZ29yYXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZnJvbSBoaW0gdGhleSBzYXkgdGhhdCB0aGUgcGF0cmljaWFuIGZhbWlseSBvZiB0aGUgQWVtaWxpaSB0b29rIGl0cyBuYW1lLCBBZW1pbGl1cyBiZWluZyB0aGUgZW5kZWFyaW5nIG5hbWUgd2hpY2ggdGhlIGtpbmcgZ2F2ZSBoaW0gZm9yIHRoZSBncmFjZSBhbmQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj53aW5zb21lbmVzczwvZW1waD4gb2YgaGlzIHNwZWVjaC4gTW9yZW92ZXIsIEkgbXlzZWxmIGhhdmUgaGVhcmQgbWFueSBwZW9wbGUgYXQgUm9tZSByZWNvdW50IGhvdywgd2hlbiBhbiBvcmFjbGUgb25jZSBjb21tYW5kZWQgdGhlIFJvbWFucyB0byBlcmVjdCBpbiB0aGVpciBjaXR5IG1vbnVtZW50cyB0byB0aGUgd2lzZXN0IGFuZCB0aGUgYnJhdmVzdCBvZiB0aGUgR3JlZWtzLCB0aGV5IHNldCB1cCBpbiB0aGUgZm9ydW0gdHdvIHN0YXR1ZXMgaW4gYnJvbnplLCBvbmUgb2YgQWxjaWJpYWRlcywgYW5kIG9uZSBvZiBQeXRoYWdvcmFzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIHRoZSBlbGRlciBQbGlueSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxpbi4gTmF0LiAzNC4xMiIgdmFsaWQ9InllcyI+Ti5ILiB4eHhpdi4gMTI8L2JpYmw+KSwgdGhlc2Ugc3RhdHVlcyBzdG9vZCBpbiB0aGUgY29taXRpdW0gYXQgUm9tZSBmcm9tIHRoZSB0aW1lIG9mIHRoZSBTYW1uaXRlIHdhcnMgKDM0My0yOTAgQi5DLikgZG93biB0byB0aGF0IG9mIFN1bGxhICgxMzgtNzggQi5DLikuPC9ub3RlPiAgSG93ZXZlciwgc2luY2UgdGhlIG1hdHRlciBvZiBOdW1hJ3MgYWNxdWFpbnRhbmNlIHdpdGggUHl0aGFnb3JhcyBpcyBpbnZvbHZlZCBpbiBtdWNoIGRpc3B1dGUsIHRvIGRpc2N1c3MgaXQgYXQgZ3JlYXRlciBsZW5ndGgsIGFuZCB0byB3aW4gYmVsaWVmIGZvciBpdCwgd291bGQgc2F2b3VyIG9mIHlvdXRoZnVsIGNvbnRlbnRpb3VzbmVzcy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxpbi4gTmF0LiAzNC4xMiIgdmFsaWQ9InllcyI+Ti5ILiB4eHhpdi4gMTI8L2JpYmw+KSwgdGhlc2Ugc3RhdHVlcyBzdG9vZCBpbiB0aGUgY29taXRpdW0gYXQgUm9tZSBmcm9tIHRoZSB0aW1lIG9mIHRoZSBTYW1uaXRlIHdhcnMgKDM0My0yOTAgQi5DLikgZG93biB0byB0aGF0IG9mIFN1bGxhICgxMzgtNzggQi5DLikuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBOdW1hIGlzIGFsc28gYXNjcmliZWQgdGhlIGluc3RpdHV0aW9uIG9mIHRoYXQgb3JkZXIgb2YgaGlnaCBwcmllc3RzIHdobyBhcmUgY2FsbGVkIFBvbnRpZmljZXMsIGFuZCBoZSBoaW1zZWxmIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBvZiB0aGVtLiBBY2NvcmRpbmcgdG8gc29tZSB0aGV5IGFyZSBjYWxsZWQgUG9udGlmaWNlcyBiZWNhdXNlIGVtcGxveWVkIGluIHRoZSBzZXJ2aWNlIG9mIHRoZSBnb2RzLCB3aG8gYXJlIDxlbXBoPnBvd2VyZnVsPC9lbXBoPiBhbmQgc3VwcmVtZSBvdmVyIGFsbCB0aGUgd29ybGQ7IGFuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBvdGVuczwvcT4gaXMgdGhlIFJvbWFuIHdvcmQgZm9yIDxlbXBoPnBvd2VyZnVsPC9lbXBoPi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXJzIHNheSB0aGF0IHRoZSBuYW1lIHdhcyBtZWFudCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDxlbXBoPnBvc3NpYmxlPC9lbXBoPiBhbmQgaW1wb3NzaWJsZSBmdW5jdGlvbnM7IHRoZSBsYXdnaXZlciBlbmpvaW5pbmcgdXBvbiB0aGVzZSBwcmllc3RzIHRoZSBwZXJmb3JtYW5jZSBvZiBzdWNoIHNhY3JlZCBvZmZpY2VzIG9ubHkgYXMgd2VyZSA8ZW1waD5wb3NzaWJsZTwvZW1waD4sIGFuZCBmaW5kaW5nIG5vIGZhdWx0IHdpdGggdGhlbSBpZiBhbnkgc2VyaW91cyBvYnN0YWNsZSBwcmV2ZW50ZWQuIEJ1dCBtb3N0IHdyaXRlcnMgZ2l2ZSBhbiBhYnN1cmQgZXhwbGFuYXRpb24gb2YgdGhlIG5hbWU7IFBvbnRpZmljZXMgbWVhbnMsIHRoZXkgc2F5LCBub3RoaW5nIG1vcmUgbm9yIGxlc3MgdGhhbiA8ZW1waD5icmlkZ2UtYnVpbGRlcnM8L2VtcGg+LCBmcm9tIHRoZSBzYWNyaWZpY2VzIHdoaWNoIHRoZXkgcGVyZm9ybWVkIGF0IHRoZSBicmlkZ2Ugb3ZlciB0aGUgVGliZXIsIHNhY3JpZmljZXMgb2YgdGhlIGdyZWF0ZXN0IGFudGlxdWl0eSBhbmQgdGhlIG1vc3Qgc2FjcmVkIGNoYXJhY3RlcjsgZm9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cG9uczwvcT4gaXMgdGhlIExhdGluIHdvcmQgZm9yIDxlbXBoPmJyaWRnZTwvZW1waD4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F5LCBtb3Jlb3ZlciwgdGhhdCB0aGUgY3VzdG9keSBhbmQgbWFpbnRlbmFuY2Ugb2YgdGhlIGJyaWRnZSwgbGlrZSBhbGwgdGhlIG90aGVyIGludmlvbGFibGUgYW5kIGFuY2VzdHJhbCByaXRlcywgYXR0YWNoZWQgdG8gdGhlIHByaWVzdGhvb2QsIGZvciB0aGUgUm9tYW5zIGhlbGQgdGhlIGRlbW9saXRpb24gb2YgdGhlIHdvb2RlbiBicmlkZ2UgdG8gYmUgbm90IG9ubHkgdW5sYXdmdWwsIGJ1dCBhY3R1YWxseSBzYWNyaWxlZ2lvdXMuIEl0IGlzIGFsc28gc2FpZCB0aGF0IGl0IHdhcyBidWlsdCBlbnRpcmVseSB3aXRob3V0IGlyb24gYW5kIGZhc3RlbmVkIHRvZ2V0aGVyIHdpdGggd29vZGVuIHBpbnMgaW4gb2JlZGllbmNlIHRvIGFuIG9yYWNsZS4gVGhlIHN0b25lIGJyaWRnZSB3YXMgY29uc3RydWN0ZWQgYXQgYSBtdWNoIGxhdGVyIHBlcmlvZCwgd2hlbiBBZW1pbGl1cyB3YXMgcXVhZXN0b3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTc5IEIuQy48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaXQgaXMgc2FpZCB0aGF0IHRoZSB3b29kZW4gYnJpZGdlIGFsc28gd2FzIGxhdGVyIHRoYW4gdGhlIHRpbWUgb2YgTnVtYSwgYW5kIHdhcyBjb21wbGV0ZWQgYnkgQW5jdXMgTWFyY2l1cywgdGhlIGdyYW5kc29uIG9mIE51bWEgYnkgaGlzIGRhdWdodGVyLCB3aGVuIGhlIHdhcyBraW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBOdW1hIGlzIGFsc28gYXNjcmliZWQgdGhlIGluc3RpdHV0aW9uIG9mIHRoYXQgb3JkZXIgb2YgaGlnaCBwcmllc3RzIHdobyBhcmUgY2FsbGVkIFBvbnRpZmljZXMsIGFuZCBoZSBoaW1zZWxmIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBvZiB0aGVtLiBBY2NvcmRpbmcgdG8gc29tZSB0aGV5IGFyZSBjYWxsZWQgUG9udGlmaWNlcyBiZWNhdXNlIGVtcGxveWVkIGluIHRoZSBzZXJ2aWNlIG9mIHRoZSBnb2RzLCB3aG8gYXJlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cG93ZXJmdWw8L2VtcGg+IGFuZCBzdXByZW1lIG92ZXIgYWxsIHRoZSB3b3JsZDsgYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wb3RlbnM8L3E+IGlzIHRoZSBSb21hbiB3b3JkIGZvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBvd2VyZnVsPC9lbXBoPi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk90aGVycyBzYXkgdGhhdCB0aGUgbmFtZSB3YXMgbWVhbnQgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3NpYmxlPC9lbXBoPiBhbmQgaW1wb3NzaWJsZSBmdW5jdGlvbnM7IHRoZSBsYXdnaXZlciBlbmpvaW5pbmcgdXBvbiB0aGVzZSBwcmllc3RzIHRoZSBwZXJmb3JtYW5jZSBvZiBzdWNoIHNhY3JlZCBvZmZpY2VzIG9ubHkgYXMgd2VyZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBvc3NpYmxlPC9lbXBoPiwgYW5kIGZpbmRpbmcgbm8gZmF1bHQgd2l0aCB0aGVtIGlmIGFueSBzZXJpb3VzIG9ic3RhY2xlIHByZXZlbnRlZC4gQnV0IG1vc3Qgd3JpdGVycyBnaXZlIGFuIGFic3VyZCBleHBsYW5hdGlvbiBvZiB0aGUgbmFtZTsgUG9udGlmaWNlcyBtZWFucywgdGhleSBzYXksIG5vdGhpbmcgbW9yZSBub3IgbGVzcyB0aGFuIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YnJpZGdlLWJ1aWxkZXJzPC9lbXBoPiwgZnJvbSB0aGUgc2FjcmlmaWNlcyB3aGljaCB0aGV5IHBlcmZvcm1lZCBhdCB0aGUgYnJpZGdlIG92ZXIgdGhlIFRpYmVyLCBzYWNyaWZpY2VzIG9mIHRoZSBncmVhdGVzdCBhbnRpcXVpdHkgYW5kIHRoZSBtb3N0IHNhY3JlZCBjaGFyYWN0ZXI7IGZvciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cG9uczwvcT4gaXMgdGhlIExhdGluIHdvcmQgZm9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YnJpZGdlPC9lbXBoPi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc2F5LCBtb3Jlb3ZlciwgdGhhdCB0aGUgY3VzdG9keSBhbmQgbWFpbnRlbmFuY2Ugb2YgdGhlIGJyaWRnZSwgbGlrZSBhbGwgdGhlIG90aGVyIGludmlvbGFibGUgYW5kIGFuY2VzdHJhbCByaXRlcywgYXR0YWNoZWQgdG8gdGhlIHByaWVzdGhvb2QsIGZvciB0aGUgUm9tYW5zIGhlbGQgdGhlIGRlbW9saXRpb24gb2YgdGhlIHdvb2RlbiBicmlkZ2UgdG8gYmUgbm90IG9ubHkgdW5sYXdmdWwsIGJ1dCBhY3R1YWxseSBzYWNyaWxlZ2lvdXMuIEl0IGlzIGFsc28gc2FpZCB0aGF0IGl0IHdhcyBidWlsdCBlbnRpcmVseSB3aXRob3V0IGlyb24gYW5kIGZhc3RlbmVkIHRvZ2V0aGVyIHdpdGggd29vZGVuIHBpbnMgaW4gb2JlZGllbmNlIHRvIGFuIG9yYWNsZS4gVGhlIHN0b25lIGJyaWRnZSB3YXMgY29uc3RydWN0ZWQgYXQgYSBtdWNoIGxhdGVyIHBlcmlvZCwgd2hlbiBBZW1pbGl1cyB3YXMgcXVhZXN0b3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xNzkgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IGlzIHNhaWQgdGhhdCB0aGUgd29vZGVuIGJyaWRnZSBhbHNvIHdhcyBsYXRlciB0aGFuIHRoZSB0aW1lIG9mIE51bWEsIGFuZCB3YXMgY29tcGxldGVkIGJ5IEFuY3VzIE1hcmNpdXMsIHRoZSBncmFuZHNvbiBvZiBOdW1hIGJ5IGhpcyBkYXVnaHRlciwgd2hlbiBoZSB3YXMga2luZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgY2hpZWYgb2YgdGhlIFBvbnRpZmljZXMsIHRoZSBQb250aWZleCBNYXhpbXVzLCBoYWQgdGhlIGR1dHkgb2YgZXhwb3VuZGluZyBhbmQgaW50ZXJwcmV0aW5nIHRoZSBkaXZpbmUgd2lsbCwgb3IgcmF0aGVyIG9mIGRpcmVjdGluZyBzYWNyZWQgcml0ZXMsIG5vdCBvbmx5IGJlaW5nIGluIGNoYXJnZSBvZiBwdWJsaWMgY2VyZW1vbmllcywgYnV0IGFsc28gd2F0Y2hpbmcgb3ZlciBwcml2YXRlIHNhY3JpZmljZXMgYW5kIHByZXZlbnRpbmcgYW55IGRlcGFydHVyZSBmcm9tIGVzdGFibGlzaGVkIGN1c3RvbSwgYXMgd2VsbCBhcyB0ZWFjaGluZyB3aGF0ZXZlciB3YXMgcmVxdWlzaXRlIGZvciB0aGUgd29yc2hpcCBvciBwcm9waXRpYXRpb24gb2YgdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGFsc28gb3ZlcnNlZXIgb2YgdGhlIGhvbHkgdmlyZ2lucyBjYWxsZWQgVmVzdGFsczsgZm9yIHRvIE51bWEgaXMgYXNjcmliZWQgdGhlIGNvbnNlY3JhdGlvbiBvZiB0aGUgVmVzdGFsIHZpcmdpbnMsIGFuZCBpbiBnZW5lcmFsIHRoZSB3b3JzaGlwIGFuZCBjYXJlIG9mIHRoZSBwZXJwZXR1YWwgZmlyZSBlbnRydXN0ZWQgdG8gdGhlaXIgY2hhcmdlLiBJdCB3YXMgZWl0aGVyIGJlY2F1c2UgaGUgdGhvdWdodCB0aGUgbmF0dXJlIG9mIGZpcmUgcHVyZSBhbmQgdW5jb3JydXB0ZWQsIGFuZCB0aGVyZWZvcmUgZW50cnVzdGVkIGl0IHRvIGNoYXN0ZSBhbmQgdW5kZWZpbGVkIHBlcnNvbnMsIG9yIGJlY2F1c2UgaGUgdGhvdWdodCBvZiBpdCBhcyB1bmZydWl0ZnVsIGFuZCBiYXJyZW4sIGFuZCB0aGVyZWZvcmUgYXNzb2NpYXRlZCBpdCB3aXRoIHZpcmdpbml0eS4gU2luY2Ugd2hlcmV2ZXIgaW4gR3JlZWNlIGEgcGVycGV0dWFsIGZpcmUgaXMga2VwdCwgYXMgYXQgRGVscGhpIGFuZCBBdGhlbnMsIGl0IGlzIGNvbW1pdHRlZCB0byB0aGUgY2hhcmdlLCBub3Qgb2YgdmlyZ2lucywgYnV0IG9mIHdpZG93cyBwYXN0IHRoZSBhZ2Ugb2YgbWFycmlhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBieSBhbnkgY2hhbmNlIGl0IGdvZXMgb3V0LCBhcyBhdCBBdGhlbnMgZHVyaW5nIHRoZSB0eXJhbm55IG9mIEFyaXN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODgtODYgQi5DLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gMTkuNiIgdmFsaWQ9InllcyI+THVjdWxsdXMsIHhpeC4gNjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMy4zIiB2YWxpZD0ieWVzIj5TdWxsYSwgeGlpaSwgMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIHNhY3JlZCBsYW1wIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGV4dGluZ3Vpc2hlZCwgYW5kIGF0IERlbHBoaSB3aGVuIHRoZSB0ZW1wbGUgd2FzIGJ1cm5lZCBieSB0aGUgTWVkZXMsIGFuZCBhcyBkdXJpbmcgdGhlIE1pdGhyaWRhdGljIGFuZCB0aGUgUm9tYW4gY2l2aWwgd2FycyB0aGUgYWx0YXIgd2FzIGRlbW9saXNoZWQgYW5kIHRoZSBmaXJlIGV4dGluZ3Vpc2hlZCwgdGhlbiB0aGV5IHNheSBpdCBtdXN0IG5vciBiZSBraW5kbGVkIGFnYWluIGZyb20gb3RoZXIgZmlyZSwgYnV0IG1hZGUgZnJlc2ggYW5kIG5ldywgYnkgbGlnaHRpbmcgYSBwdXJlIGFuZCB1bnBvbGx1dGVkIGZsYW1lIGZyb20gdGhlIHJheXMgb2YgdGhlIHN1bi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgdGhleSB1c3VhbGx5IGVmZmVjdCBieSBtZWFucyBvZiBtZXRhbGxpYyBtaXJyb3JzLCB0aGUgY29uY2F2aXR5IG9mIHdoaWNoIGlzIG1hZGUgdG8gZm9sbG93IHRoZSBzaWRlcyBvZiBhbiBpc29zY2VsZXMgcmVjdGFuZ3VsYXIgdHJpYW5nbGUsIGFuZCB3aGljaCBjb252ZXJnZSBmcm9tIHRoZWlyIGNpcmN1bWZlcmVuY2UgdG8gYSBzaW5nbGUgcG9pbnQgaW4gdGhlIGNlbnRyZS4gV2hlbiwgdGhlcmVmb3JlLCB0aGVzZSBhcmUgcGxhY2VkIG9wcG9zaXRlIHRoZSBzdW4sIHNvIHRoYXQgaXRzIHJheXMsIGFzIHRoZXkgZmFsbCB1cG9uIHRoZW0gZnJvbSBhbGwgc2lkZXMsIGFyZSBjb2xsZWN0ZWQgYW5kIGNvbmNlbnRyYXRlZCBhdCB0aGUgY2VudHJlLCB0aGUgYWlyIGl0c2VsZiBpcyByYXJlZmllZCB0aGVyZSwgYW5kIHZlcnkgbGlnaHQgYW5kIGRyeSBzdWJzdGFuY2VzIHBsYWNlZCB0aGVyZSBxdWlja2x5IGJsYXplIHVwIGZyb20gaXRzIHJlc2lzdGFuY2UsIHRoZSBzdW4ncyByYXlzIG5vdyBhY3F1aXJpbmcgdGhlIHN1YnN0YW5jZSBhbmQgZm9yY2Ugb2YgZmlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgbW9yZW92ZXIsIGFyZSBvZiB0aGUgb3BpbmlvbiB0aGF0IG5vdGhpbmcgYnV0IHRoaXMgcGVycGV0dWFsIGZpcmUgaXMgZ3VhcmRlZCBieSB0aGUgc2FjcmVkIHZpcmdpbnM7IHdoaWxlIHNvbWUgc2F5IHRoYXQgY2VydGFpbiBzYWNyZWQgb2JqZWN0cywgd2hpY2ggbm9uZSBvdGhlcnMgbWF5IGJlaG9sZCwgYXJlIGtlcHQgaW4gY29uY2VhbG1lbnQgYnkgdGhlbS4gV2hhdCBtYXkgbGF3ZnVsbHkgYmUgbGVhcm5lZCBhbmQgdG9sZCBhYm91dCB0aGVzZSB0aGluZ3MsIEkgaGF2ZSB3cml0dGVuIGluIG15IExpZmUgb2YgQ2FtaWxsdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDIwLjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHguIDMtNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIG92ZXJzZWVyIG9mIHRoZSBob2x5IHZpcmdpbnMgY2FsbGVkIFZlc3RhbHM7IGZvciB0byBOdW1hIGlzIGFzY3JpYmVkIHRoZSBjb25zZWNyYXRpb24gb2YgdGhlIFZlc3RhbCB2aXJnaW5zLCBhbmQgaW4gZ2VuZXJhbCB0aGUgd29yc2hpcCBhbmQgY2FyZSBvZiB0aGUgcGVycGV0dWFsIGZpcmUgZW50cnVzdGVkIHRvIHRoZWlyIGNoYXJnZS4gSXQgd2FzIGVpdGhlciBiZWNhdXNlIGhlIHRob3VnaHQgdGhlIG5hdHVyZSBvZiBmaXJlIHB1cmUgYW5kIHVuY29ycnVwdGVkLCBhbmQgdGhlcmVmb3JlIGVudHJ1c3RlZCBpdCB0byBjaGFzdGUgYW5kIHVuZGVmaWxlZCBwZXJzb25zLCBvciBiZWNhdXNlIGhlIHRob3VnaHQgb2YgaXQgYXMgdW5mcnVpdGZ1bCBhbmQgYmFycmVuLCBhbmQgdGhlcmVmb3JlIGFzc29jaWF0ZWQgaXQgd2l0aCB2aXJnaW5pdHkuIFNpbmNlIHdoZXJldmVyIGluIEdyZWVjZSBhIHBlcnBldHVhbCBmaXJlIGlzIGtlcHQsIGFzIGF0IERlbHBoaSBhbmQgQXRoZW5zLCBpdCBpcyBjb21taXR0ZWQgdG8gdGhlIGNoYXJnZSwgbm90IG9mIHZpcmdpbnMsIGJ1dCBvZiB3aWRvd3MgcGFzdCB0aGUgYWdlIG9mIG1hcnJpYWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBieSBhbnkgY2hhbmNlIGl0IGdvZXMgb3V0LCBhcyBhdCBBdGhlbnMgZHVyaW5nIHRoZSB0eXJhbm55IG9mIEFyaXN0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44OC04NiBCLkMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDE5LjYiIHZhbGlkPSJ5ZXMiPkx1Y3VsbHVzLCB4aXguIDY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMy4zIiB2YWxpZD0ieWVzIj5TdWxsYSwgeGlpaSwgMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhlIHNhY3JlZCBsYW1wIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGV4dGluZ3Vpc2hlZCwgYW5kIGF0IERlbHBoaSB3aGVuIHRoZSB0ZW1wbGUgd2FzIGJ1cm5lZCBieSB0aGUgTWVkZXMsIGFuZCBhcyBkdXJpbmcgdGhlIE1pdGhyaWRhdGljIGFuZCB0aGUgUm9tYW4gY2l2aWwgd2FycyB0aGUgYWx0YXIgd2FzIGRlbW9saXNoZWQgYW5kIHRoZSBmaXJlIGV4dGluZ3Vpc2hlZCwgdGhlbiB0aGV5IHNheSBpdCBtdXN0IG5vciBiZSBraW5kbGVkIGFnYWluIGZyb20gb3RoZXIgZmlyZSwgYnV0IG1hZGUgZnJlc2ggYW5kIG5ldywgYnkgbGlnaHRpbmcgYSBwdXJlIGFuZCB1bnBvbGx1dGVkIGZsYW1lIGZyb20gdGhlIHJheXMgb2YgdGhlIHN1bi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDE5LjYiIHZhbGlkPSJ5ZXMiPkx1Y3VsbHVzLCB4aXguIDY8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMy4zIiB2YWxpZD0ieWVzIj5TdWxsYSwgeGlpaSwgMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHRoZXkgdXN1YWxseSBlZmZlY3QgYnkgbWVhbnMgb2YgbWV0YWxsaWMgbWlycm9ycywgdGhlIGNvbmNhdml0eSBvZiB3aGljaCBpcyBtYWRlIHRvIGZvbGxvdyB0aGUgc2lkZXMgb2YgYW4gaXNvc2NlbGVzIHJlY3Rhbmd1bGFyIHRyaWFuZ2xlLCBhbmQgd2hpY2ggY29udmVyZ2UgZnJvbSB0aGVpciBjaXJjdW1mZXJlbmNlIHRvIGEgc2luZ2xlIHBvaW50IGluIHRoZSBjZW50cmUuIFdoZW4sIHRoZXJlZm9yZSwgdGhlc2UgYXJlIHBsYWNlZCBvcHBvc2l0ZSB0aGUgc3VuLCBzbyB0aGF0IGl0cyByYXlzLCBhcyB0aGV5IGZhbGwgdXBvbiB0aGVtIGZyb20gYWxsIHNpZGVzLCBhcmUgY29sbGVjdGVkIGFuZCBjb25jZW50cmF0ZWQgYXQgdGhlIGNlbnRyZSwgdGhlIGFpciBpdHNlbGYgaXMgcmFyZWZpZWQgdGhlcmUsIGFuZCB2ZXJ5IGxpZ2h0IGFuZCBkcnkgc3Vic3RhbmNlcyBwbGFjZWQgdGhlcmUgcXVpY2tseSBibGF6ZSB1cCBmcm9tIGl0cyByZXNpc3RhbmNlLCB0aGUgc3VuJ3MgcmF5cyBub3cgYWNxdWlyaW5nIHRoZSBzdWJzdGFuY2UgYW5kIGZvcmNlIG9mIGZpcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIG1vcmVvdmVyLCBhcmUgb2YgdGhlIG9waW5pb24gdGhhdCBub3RoaW5nIGJ1dCB0aGlzIHBlcnBldHVhbCBmaXJlIGlzIGd1YXJkZWQgYnkgdGhlIHNhY3JlZCB2aXJnaW5zOyB3aGlsZSBzb21lIHNheSB0aGF0IGNlcnRhaW4gc2FjcmVkIG9iamVjdHMsIHdoaWNoIG5vbmUgb3RoZXJzIG1heSBiZWhvbGQsIGFyZSBrZXB0IGluIGNvbmNlYWxtZW50IGJ5IHRoZW0uIFdoYXQgbWF5IGxhd2Z1bGx5IGJlIGxlYXJuZWQgYW5kIHRvbGQgYWJvdXQgdGhlc2UgdGhpbmdzLCBJIGhhdmUgd3JpdHRlbiBpbiBteSBMaWZlIG9mIENhbWlsbHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMjAuMyIgdmFsaWQ9InllcyI+Q2hhcHRlciB4eC4gMy02LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDIwLjMiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHguIDMtNi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBiZWdpbm5pbmcsIHRoZW4sIHRoZXkgc2F5IHRoYXQgR2VnYW5pYSBhbmQgVmVyZW5pYSB3ZXJlIGNvbnNlY3JhdGVkIHRvIHRoaXMgb2ZmaWNlIGJ5IE51bWEsIHdobyBzdWJzZXF1ZW50bHkgYWRkZWQgdG8gdGhlbSBDYW51bGVpYSBhbmQgVGFycGVpYTsgdGhhdCBhdCBhIGxhdGVyIHRpbWUgdHdvIG90aGVycyB3ZXJlIGFkZGVkIGJ5IFNlcnZpdXMsIG1ha2luZyB0aGUgbnVtYmVyIHdoaWNoIGhhcyBjb250aW51ZWQgdG8gdGhlIHByZXNlbnQgdGltZS4gSXQgd2FzIG9yZGFpbmVkIGJ5IHRoZSBraW5nIHRoYXQgdGhlIHNhY3JlZCB2aXJnaW5zIHNob3VsZCB2b3cgdGhlbXNlbHZlcyB0byBjaGFzdGl0eSBmb3IgdGhpcnR5IHllYXJzOyBkdXJpbmcgdGhlIGZpcnN0IGRlY2FkZSB0aGV5IGFyZSB0byBsZWFybiB0aGVpciBkdXRpZXMsIGR1cmluZyB0aGUgc2Vjb25kIHRvIHBlcmZvcm0gdGhlIGR1dGllcyB0aGV5IGhhdmUgbGVhcm5lZCwgYW5kIGR1cmluZyB0aGUgdGhpcmQgdG8gdGVhY2ggb3RoZXJzIHRoZXNlIGR1dGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgdGhlIHRoaXJ0eSB5ZWFycyBiZWluZyBub3cgcGFzc2VkLCBhbnkgb25lIHdobyB3aXNoZXMgaGFzIGxpYmVydHkgdG8gbWFycnkgYW5kIGFkb3B0IGEgZGlmZmVyZW50IG1vZGUgb2YgbGlmZSwgYWZ0ZXIgbGF5aW5nIGRvd24gaGVyIHNhY3JlZCBvZmZpY2UuIFdlIGFyZSB0b2xkLCBob3dldmVyLCB0aGF0IGZldyBoYXZlIHdlbGNvbWVkIHRoZSBpbmR1bGdlbmNlLCBhbmQgdGhhdCB0aG9zZSB3aG8gZGlkIHNvIHdlcmUgbm90IGhhcHB5LCBidXQgd2VyZSBhIHByZXkgdG8gcmVwZW50YW5jZSBhbmQgZGVqZWN0aW9uIGZvciB0aGUgcmVzdCBvZiB0aGVpciBsaXZlcywgdGhlcmVieSBpbnNwaXJpbmcgdGhlIHJlc3Qgd2l0aCBzdXBlcnN0aXRpb3VzIGZlYXJzLCBzbyB0aGF0IHVudGlsIG9sZCBhZ2UgYW5kIGRlYXRoIHRoZXkgcmVtYWluZWQgc3RlYWRmYXN0IGluIHRoZWlyIHZpcmdpbml0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGJlZ2lubmluZywgdGhlbiwgdGhleSBzYXkgdGhhdCBHZWdhbmlhIGFuZCBWZXJlbmlhIHdlcmUgY29uc2VjcmF0ZWQgdG8gdGhpcyBvZmZpY2UgYnkgTnVtYSwgd2hvIHN1YnNlcXVlbnRseSBhZGRlZCB0byB0aGVtIENhbnVsZWlhIGFuZCBUYXJwZWlhOyB0aGF0IGF0IGEgbGF0ZXIgdGltZSB0d28gb3RoZXJzIHdlcmUgYWRkZWQgYnkgU2Vydml1cywgbWFraW5nIHRoZSBudW1iZXIgd2hpY2ggaGFzIGNvbnRpbnVlZCB0byB0aGUgcHJlc2VudCB0aW1lLiBJdCB3YXMgb3JkYWluZWQgYnkgdGhlIGtpbmcgdGhhdCB0aGUgc2FjcmVkIHZpcmdpbnMgc2hvdWxkIHZvdyB0aGVtc2VsdmVzIHRvIGNoYXN0aXR5IGZvciB0aGlydHkgeWVhcnM7IGR1cmluZyB0aGUgZmlyc3QgZGVjYWRlIHRoZXkgYXJlIHRvIGxlYXJuIHRoZWlyIGR1dGllcywgZHVyaW5nIHRoZSBzZWNvbmQgdG8gcGVyZm9ybSB0aGUgZHV0aWVzIHRoZXkgaGF2ZSBsZWFybmVkLCBhbmQgZHVyaW5nIHRoZSB0aGlyZCB0byB0ZWFjaCBvdGhlcnMgdGhlc2UgZHV0aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHRoZSB0aGlydHkgeWVhcnMgYmVpbmcgbm93IHBhc3NlZCwgYW55IG9uZSB3aG8gd2lzaGVzIGhhcyBsaWJlcnR5IHRvIG1hcnJ5IGFuZCBhZG9wdCBhIGRpZmZlcmVudCBtb2RlIG9mIGxpZmUsIGFmdGVyIGxheWluZyBkb3duIGhlciBzYWNyZWQgb2ZmaWNlLiBXZSBhcmUgdG9sZCwgaG93ZXZlciwgdGhhdCBmZXcgaGF2ZSB3ZWxjb21lZCB0aGUgaW5kdWxnZW5jZSwgYW5kIHRoYXQgdGhvc2Ugd2hvIGRpZCBzbyB3ZXJlIG5vdCBoYXBweSwgYnV0IHdlcmUgYSBwcmV5IHRvIHJlcGVudGFuY2UgYW5kIGRlamVjdGlvbiBmb3IgdGhlIHJlc3Qgb2YgdGhlaXIgbGl2ZXMsIHRoZXJlYnkgaW5zcGlyaW5nIHRoZSByZXN0IHdpdGggc3VwZXJzdGl0aW91cyBmZWFycywgc28gdGhhdCB1bnRpbCBvbGQgYWdlIGFuZCBkZWF0aCB0aGV5IHJlbWFpbmVkIHN0ZWFkZmFzdCBpbiB0aGVpciB2aXJnaW5pdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOdW1hIGJlc3Rvd2VkIGdyZWF0IHByaXZpbGVnZXMgdXBvbiB0aGVtLCBzdWNoIGFzIHRoZSByaWdodCB0byBtYWtlIGEgd2lsbCBkdXJpbmcgdGhlIGxpZmUgdGltZSBvZiB0aGVpciBmYXRoZXJzLCBhbmQgdG8gdHJhbnNhY3QgYW5kIG1hbmFnZSB0aGVpciBvdGhlciBhZmZhaXJzIHdpdGhvdXQgYSBndWFyZGlhbiwgbGlrZSB0aGUgbW90aGVycyBvZiB0aHJlZSBjaGlsZHJlbi4gV2hlbiB0aGV5IGFwcGVhciBpbiBwdWJsaWMsIHRoZSBmYXNjZXMgYXJlIGNhcnJpZWQgYmVmb3JlIHRoZW0sIGFuZCBpZiB0aGV5IGFjY2lkZW50YWxseSBtZWV0IGEgY3JpbWluYWwgb24gaGlzIHdheSB0byBleGVjdXRpb24sIGhpcyBsaWZlIGlzIHNwYXJlZDsgYnV0IHRoZSB2aXJnaW4gbXVzdCBtYWtlIG9hdGggdGhhdCB0aGUgbWVldGluZyB3YXMgaW52b2x1bnRhcnkgYW5kIGZvcnR1aXRvdXMsIGFuZCBub3Qgb2YgZGVzaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3aG8gcGFzc2VzIHVuZGVyIHRoZSBsaXR0ZXIgb24gd2hpY2ggdGhleSBhcmUgYm9ybmUsIGlzIHB1dCB0byBkZWF0aC4gRm9yIHRoZWlyIG1pbm9yIG9mZmVuY2VzIHRoZSB2aXJnaW5zIGFyZSBwdW5pc2hlZCB3aXRoIHN0cmlwZXMsIHRoZSBQb250aWZleCBNYXhpbXVzIHNvbWV0aW1lcyBzY291cmdpbmcgdGhlIGN1bHByaXQgb24gaGVyIGJhcmUgZmxlc2gsIGluIGEgZGFyayBwbGFjZSwgd2l0aCBhIGN1cnRhaW4gaW50ZXJwb3NlZC4gQnV0IHNoZSB0aGF0IGhhcyBicm9rZW4gaGVyIHZvdyBvZiBjaGFzdGl0eSBpcyBidXJpZWQgYWxpdmUgbmVhciB0aGUgQ29sbGluZSBnYXRlLiBIZXJlIGEgbGl0dGxlIHJpZGdlIG9mIGVhcnRoIGV4dGVuZHMgZm9yIHNvbWUgZGlzdGFuY2UgYWxvbmcgdGhlIGluc2lkZSBvZiB0aGUgY2l0eS13YWxsOyB0aGUgTGF0aW4gd29yZCBmb3IgaXQgaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hZ2dlci48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VW5kZXIgaXQgYSBzbWFsbCBjaGFtYmVyIGlzIGNvbnN0cnVjdGVkLCB3aXRoIHN0ZXBzIGxlYWRpbmcgZG93biBmcm9tIGFib3ZlLiBJbiB0aGlzIGFyZSBwbGFjZWQgYSBjb3VjaCB3aXRoIGl0cyBjb3ZlcmluZ3MsIGEgbGlnaHRlZCBsYW1wLCBhbmQgdmVyeSBzbWFsbCBwb3J0aW9ucyBvZiB0aGUgbmVjZXNzYXJpZXMgb2YgbGlmZSwgc3VjaCBhcyBicmVhZCwgYSBib3dsIG9mIHdhdGVyLCBtaWxrLCBhbmQgb2lsLCBhcyB0aG91Z2ggdGhleSB3b3VsZCB0aGVyZWJ5IGFic29sdmUgdGhlbXNlbHZlcyBmcm9tIHRoZSBjaGFyZ2Ugb2YgZGVzdHJveWluZyBieSBodW5nZXIgYSBsaWZlIHdoaWNoIGhhZCBiZWVuIGNvbnNlY3JhdGVkIHRvIHRoZSBoaWdoZXN0IHNlcnZpY2VzIG9mIHJlbGlnaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBjdWxwcml0IGhlcnNlbGYgaXMgcGxhY2VkIG9uIGEgbGl0dGVyLCBvdmVyIHdoaWNoIGNvdmVyaW5ncyBhcmUgdGhyb3duIGFuZCBmYXN0ZW5lZCBkb3duIHdpdGggY29yZHMgc28gdGhhdCBub3QgZXZlbiBhIGNyeSBjYW4gYmUgaGVhcmQgZnJvbSB3aXRoaW4sIGFuZCBjYXJyaWVkIHRocm91Z2ggdGhlIGZvcnVtLiBBbGwgdGhlIHBlb3BsZSB0aGVyZSBzaWxlbnRseSBtYWtlIHdheSBmb3IgdGhlIGxpdHRlciwgYW5kIGZvbGxvdyBpdCB3aXRob3V0IHV0dGVyaW5nIGEgc291bmQsIGluIGEgdGVycmlibGUgZGVwcmVzc2lvbiBvZiBzb3VsLiBObyBvdGhlciBzcGVjdGFjbGUgaXMgbW9yZSBhcHBhbGxpbmcsIG5vciBkb2VzIGFueSBvdGhlciBkYXkgYnJpbmcgbW9yZSBnbG9vbSB0byB0aGUgY2l0eSB0aGFuIHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGxpdHRlciByZWFjaGVzIGl0cyBkZXN0aW5hdGlvbiwgdGhlIGF0dGVuZGFudHMgdW5mYXN0ZW4gdGhlIGNvcmRzIG9mIHRoZSBjb3ZlcmluZ3MuIFRoZW4gdGhlIGhpZ2gtcHJpZXN0LCBhZnRlciBzdHJldGNoaW5nIGhpcyBoYW5kcyB0b3dhcmQgaGVhdmVuIGFuZCB1dHRlcmluZyBjZXJ0YWluIG15c3RlcmlvdXMgcHJheWVycyBiZWZvcmUgdGhlIGZhdGFsIGFjdCwgYnJpbmdzIGZvcnRoIHRoZSBjdWxwcml0LCB3aG8gaXMgY2xvc2VseSB2ZWlsZWQsIGFuZCBwbGFjZXMgaGVyIG9uIHRoZSBzdGVwcyBsZWFkaW5nIGRvd24gaW50byB0aGUgY2hhbWJlci4gQWZ0ZXIgdGhpcyBoZSB0dXJucyBhd2F5IGhpcyBmYWNlLCBhcyBkbyB0aGUgcmVzdCBvZiB0aGUgcHJpZXN0cywgYW5kIHdoZW4gc2hlIGhhcyBnb25lIGRvd24sIHRoZSBzdGVwcyBhcmUgdGFrZW4gdXAsIGFuZCBncmVhdCBxdWFudGl0aWVzIG9mIGVhcnRoIGFyZSB0aHJvd24gaW50byB0aGUgZW50cmFuY2UgdG8gdGhlIGNoYW1iZXIsIGhpZGluZyBpdCBhd2F5LCBhbmQgbWFraW5nIHRoZSBwbGFjZSBsZXZlbCB3aXRoIHRoZSByZXN0IG9mIHRoZSBtb3VuZC4gU3VjaCBpcyB0aGUgcHVuaXNobWVudCBvZiB0aG9zZSB3aG8gYnJlYWsgdGhlaXIgdm93IG9mIHZpcmdpbml0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOdW1hIGJlc3Rvd2VkIGdyZWF0IHByaXZpbGVnZXMgdXBvbiB0aGVtLCBzdWNoIGFzIHRoZSByaWdodCB0byBtYWtlIGEgd2lsbCBkdXJpbmcgdGhlIGxpZmUgdGltZSBvZiB0aGVpciBmYXRoZXJzLCBhbmQgdG8gdHJhbnNhY3QgYW5kIG1hbmFnZSB0aGVpciBvdGhlciBhZmZhaXJzIHdpdGhvdXQgYSBndWFyZGlhbiwgbGlrZSB0aGUgbW90aGVycyBvZiB0aHJlZSBjaGlsZHJlbi4gV2hlbiB0aGV5IGFwcGVhciBpbiBwdWJsaWMsIHRoZSBmYXNjZXMgYXJlIGNhcnJpZWQgYmVmb3JlIHRoZW0sIGFuZCBpZiB0aGV5IGFjY2lkZW50YWxseSBtZWV0IGEgY3JpbWluYWwgb24gaGlzIHdheSB0byBleGVjdXRpb24sIGhpcyBsaWZlIGlzIHNwYXJlZDsgYnV0IHRoZSB2aXJnaW4gbXVzdCBtYWtlIG9hdGggdGhhdCB0aGUgbWVldGluZyB3YXMgaW52b2x1bnRhcnkgYW5kIGZvcnR1aXRvdXMsIGFuZCBub3Qgb2YgZGVzaWduLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdobyBwYXNzZXMgdW5kZXIgdGhlIGxpdHRlciBvbiB3aGljaCB0aGV5IGFyZSBib3JuZSwgaXMgcHV0IHRvIGRlYXRoLiBGb3IgdGhlaXIgbWlub3Igb2ZmZW5jZXMgdGhlIHZpcmdpbnMgYXJlIHB1bmlzaGVkIHdpdGggc3RyaXBlcywgdGhlIFBvbnRpZmV4IE1heGltdXMgc29tZXRpbWVzIHNjb3VyZ2luZyB0aGUgY3VscHJpdCBvbiBoZXIgYmFyZSBmbGVzaCwgaW4gYSBkYXJrIHBsYWNlLCB3aXRoIGEgY3VydGFpbiBpbnRlcnBvc2VkLiBCdXQgc2hlIHRoYXQgaGFzIGJyb2tlbiBoZXIgdm93IG9mIGNoYXN0aXR5IGlzIGJ1cmllZCBhbGl2ZSBuZWFyIHRoZSBDb2xsaW5lIGdhdGUuIEhlcmUgYSBsaXR0bGUgcmlkZ2Ugb2YgZWFydGggZXh0ZW5kcyBmb3Igc29tZSBkaXN0YW5jZSBhbG9uZyB0aGUgaW5zaWRlIG9mIHRoZSBjaXR5LXdhbGw7IHRoZSBMYXRpbiB3b3JkIGZvciBpdCBpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWdnZXIuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIGl0IGEgc21hbGwgY2hhbWJlciBpcyBjb25zdHJ1Y3RlZCwgd2l0aCBzdGVwcyBsZWFkaW5nIGRvd24gZnJvbSBhYm92ZS4gSW4gdGhpcyBhcmUgcGxhY2VkIGEgY291Y2ggd2l0aCBpdHMgY292ZXJpbmdzLCBhIGxpZ2h0ZWQgbGFtcCwgYW5kIHZlcnkgc21hbGwgcG9ydGlvbnMgb2YgdGhlIG5lY2Vzc2FyaWVzIG9mIGxpZmUsIHN1Y2ggYXMgYnJlYWQsIGEgYm93bCBvZiB3YXRlciwgbWlsaywgYW5kIG9pbCwgYXMgdGhvdWdoIHRoZXkgd291bGQgdGhlcmVieSBhYnNvbHZlIHRoZW1zZWx2ZXMgZnJvbSB0aGUgY2hhcmdlIG9mIGRlc3Ryb3lpbmcgYnkgaHVuZ2VyIGEgbGlmZSB3aGljaCBoYWQgYmVlbiBjb25zZWNyYXRlZCB0byB0aGUgaGlnaGVzdCBzZXJ2aWNlcyBvZiByZWxpZ2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGN1bHByaXQgaGVyc2VsZiBpcyBwbGFjZWQgb24gYSBsaXR0ZXIsIG92ZXIgd2hpY2ggY292ZXJpbmdzIGFyZSB0aHJvd24gYW5kIGZhc3RlbmVkIGRvd24gd2l0aCBjb3JkcyBzbyB0aGF0IG5vdCBldmVuIGEgY3J5IGNhbiBiZSBoZWFyZCBmcm9tIHdpdGhpbiwgYW5kIGNhcnJpZWQgdGhyb3VnaCB0aGUgZm9ydW0uIEFsbCB0aGUgcGVvcGxlIHRoZXJlIHNpbGVudGx5IG1ha2Ugd2F5IGZvciB0aGUgbGl0dGVyLCBhbmQgZm9sbG93IGl0IHdpdGhvdXQgdXR0ZXJpbmcgYSBzb3VuZCwgaW4gYSB0ZXJyaWJsZSBkZXByZXNzaW9uIG9mIHNvdWwuIE5vIG90aGVyIHNwZWN0YWNsZSBpcyBtb3JlIGFwcGFsbGluZywgbm9yIGRvZXMgYW55IG90aGVyIGRheSBicmluZyBtb3JlIGdsb29tIHRvIHRoZSBjaXR5IHRoYW4gdGhpcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGxpdHRlciByZWFjaGVzIGl0cyBkZXN0aW5hdGlvbiwgdGhlIGF0dGVuZGFudHMgdW5mYXN0ZW4gdGhlIGNvcmRzIG9mIHRoZSBjb3ZlcmluZ3MuIFRoZW4gdGhlIGhpZ2gtcHJpZXN0LCBhZnRlciBzdHJldGNoaW5nIGhpcyBoYW5kcyB0b3dhcmQgaGVhdmVuIGFuZCB1dHRlcmluZyBjZXJ0YWluIG15c3RlcmlvdXMgcHJheWVycyBiZWZvcmUgdGhlIGZhdGFsIGFjdCwgYnJpbmdzIGZvcnRoIHRoZSBjdWxwcml0LCB3aG8gaXMgY2xvc2VseSB2ZWlsZWQsIGFuZCBwbGFjZXMgaGVyIG9uIHRoZSBzdGVwcyBsZWFkaW5nIGRvd24gaW50byB0aGUgY2hhbWJlci4gQWZ0ZXIgdGhpcyBoZSB0dXJucyBhd2F5IGhpcyBmYWNlLCBhcyBkbyB0aGUgcmVzdCBvZiB0aGUgcHJpZXN0cywgYW5kIHdoZW4gc2hlIGhhcyBnb25lIGRvd24sIHRoZSBzdGVwcyBhcmUgdGFrZW4gdXAsIGFuZCBncmVhdCBxdWFudGl0aWVzIG9mIGVhcnRoIGFyZSB0aHJvd24gaW50byB0aGUgZW50cmFuY2UgdG8gdGhlIGNoYW1iZXIsIGhpZGluZyBpdCBhd2F5LCBhbmQgbWFraW5nIHRoZSBwbGFjZSBsZXZlbCB3aXRoIHRoZSByZXN0IG9mIHRoZSBtb3VuZC4gU3VjaCBpcyB0aGUgcHVuaXNobWVudCBvZiB0aG9zZSB3aG8gYnJlYWsgdGhlaXIgdm93IG9mIHZpcmdpbml0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGl0IGlzIHNhaWQgdGhhdCBOdW1hIGJ1aWx0IHRoZSB0ZW1wbGUgb2YgVmVzdGEsIHdoZXJlIHRoZSBwZXJwZXR1YWwgZmlyZSB3YXMga2VwdCwgb2YgYSBjaXJjdWxhciBmb3JtLCBub3QgaW4gaW1pdGF0aW9uIG9mIHRoZSBzaGFwZSBvZiB0aGUgZWFydGgsIGJlbGlldmluZyBWZXN0YSB0byBiZSB0aGUgZWFydGgsIGJ1dCBvZiB0aGUgZW50aXJlIHVuaXZlcnNlLCBhdCB0aGUgY2VudHJlIG9mIHdoaWNoIHRoZSBQeXRoYWdvcmVhbnMgcGxhY2UgdGhlIGVsZW1lbnQgb2YgZmlyZSwgYW5kIGNhbGwgaXQgVmVzdGEgYW5kIFVuaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IGhvbGQgdGhhdCB0aGUgZWFydGggaXMgbmVpdGhlciBtb3Rpb25sZXNzIG5vciBzaXR1YXRlZCBpbiB0aGUgY2VudHJlIG9mIHN1cnJvdW5kaW5nIHNwYWNlLCBidXQgdGhhdCBpdCByZXZvbHZlcyBpbiBhIGNpcmNsZSBhYm91dCB0aGUgY2VudHJhbCBmaXJlLCBub3QgYmVpbmcgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCwgbm9yIGV2ZW4gb25lIG9mIHRoZSBwcmltYXJ5IGVsZW1lbnRzIG9mIHRoZSB1bml2ZXJzZS4gVGhpcyBpcyB0aGUgY29uY2VwdGlvbiwgd2UgYXJlIHRvbGQsIHdoaWNoIFBsYXRvIGFsc28sIGluIGhpcyBvbGQgYWdlLCBoYWQgb2YgdGhlIGVhcnRoLCBuYW1lbHkgdGhhdCBpdCBpcyBlc3RhYmxpc2hlZCBpbiBhIHNlY29uZGFyeSBzcGFjZSwgYW5kIHRoYXQgdGhlIGNlbnRyYWwgYW5kIHNvdmVyZWlnbiBzcGFjZSBpcyByZXNlcnZlZCBmb3Igc29tZSBvdGhlciBhbmQgbm9ibGVyIGJvZHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGl0IGlzIHNhaWQgdGhhdCBOdW1hIGJ1aWx0IHRoZSB0ZW1wbGUgb2YgVmVzdGEsIHdoZXJlIHRoZSBwZXJwZXR1YWwgZmlyZSB3YXMga2VwdCwgb2YgYSBjaXJjdWxhciBmb3JtLCBub3QgaW4gaW1pdGF0aW9uIG9mIHRoZSBzaGFwZSBvZiB0aGUgZWFydGgsIGJlbGlldmluZyBWZXN0YSB0byBiZSB0aGUgZWFydGgsIGJ1dCBvZiB0aGUgZW50aXJlIHVuaXZlcnNlLCBhdCB0aGUgY2VudHJlIG9mIHdoaWNoIHRoZSBQeXRoYWdvcmVhbnMgcGxhY2UgdGhlIGVsZW1lbnQgb2YgZmlyZSwgYW5kIGNhbGwgaXQgVmVzdGEgYW5kIFVuaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IGhvbGQgdGhhdCB0aGUgZWFydGggaXMgbmVpdGhlciBtb3Rpb25sZXNzIG5vciBzaXR1YXRlZCBpbiB0aGUgY2VudHJlIG9mIHN1cnJvdW5kaW5nIHNwYWNlLCBidXQgdGhhdCBpdCByZXZvbHZlcyBpbiBhIGNpcmNsZSBhYm91dCB0aGUgY2VudHJhbCBmaXJlLCBub3QgYmVpbmcgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCwgbm9yIGV2ZW4gb25lIG9mIHRoZSBwcmltYXJ5IGVsZW1lbnRzIG9mIHRoZSB1bml2ZXJzZS4gVGhpcyBpcyB0aGUgY29uY2VwdGlvbiwgd2UgYXJlIHRvbGQsIHdoaWNoIFBsYXRvIGFsc28sIGluIGhpcyBvbGQgYWdlLCBoYWQgb2YgdGhlIGVhcnRoLCBuYW1lbHkgdGhhdCBpdCBpcyBlc3RhYmxpc2hlZCBpbiBhIHNlY29uZGFyeSBzcGFjZSwgYW5kIHRoYXQgdGhlIGNlbnRyYWwgYW5kIHNvdmVyZWlnbiBzcGFjZSBpcyByZXNlcnZlZCBmb3Igc29tZSBvdGhlciBhbmQgbm9ibGVyIGJvZHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBQb250aWZpY2VzIGFsc28gZXhwbGFpbiBhbmQgZGlyZWN0IHRoZSBhbmNlc3RyYWwgcml0ZXMgb2YgYnVyaWFsIGZvciB0aG9zZSB3aG8gZGVzaXJlIGl0LCBhbmQgdGhleSB3ZXJlIHRhdWdodCBieSBOdW1hIG5vdCB0byByZWdhcmQgYW55IHN1Y2ggb2ZmaWNlcyBhcyBhIHBvbGx1dGlvbiwgYnV0IHRvIGhvbm91ciB0aGUgZ29kcyBiZWxvdyBhbHNvIHdpdGggdGhlIGN1c3RvbWFyeSByaXRlcywgc2luY2UgdGhleSByZWNlaXZlIGludG8gdGhlaXIga2VlcGluZyB0aGUgbW9zdCBzb3ZlcmVpZ24gcGFydCBvZiB1cywgYW5kIHBhcnRpY3VsYXJseSB0aGUgZ29kZGVzcyBjYWxsZWQgTGliaXRpbmEsIHdobyBwcmVzaWRlcyBvdmVyIHRoZSBzb2xlbW4gc2VydmljZXMgZm9yIHRoZSBkZWFkLCB3aGV0aGVyIHNoZSBpcyBQcm9zZXJwaW5hLCBvciwgYXMgdGhlIG1vc3QgbGVhcm5lZCBSb21hbnMgbWFpbnRhaW4sIFZlbnVzOyB0aGVyZWJ5IG5vdCBpbmFwdGx5IGNvbm5lY3RpbmcgbWFuJ3MgYmlydGggYW5kIGRlYXRoIHdpdGggdGhlIHBvd2VyIG9mIG9uZSBhbmQgdGhlIHNhbWUgZ29kZGVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TnVtYSBoaW1zZWxmIGFsc28gcmVndWxhdGVkIHRoZSBwZXJpb2RzIG9mIG1vdXJuaW5nIGFjY29yZGluZyB0byBhZ2VzLiBGb3IgaW5zdGFuY2UsIG92ZXIgYSBjaGlsZCBvZiBsZXNzIHRoYW4gdGhyZWUgeWVhcnMgdGhlcmUgd2FzIHRvIGJlIG5vIG1vdXJuaW5nIGF0IGFsbDsgb3ZlciBvbmUgb2xkZXIgdGhhbiB0aGF0LCB0aGUgbW91cm5pbmcgd2FzIG5vdCB0byBsYXN0IG1vcmUgbW9udGhzIHRoYW4gaXQgaGFkIGxpdmVkIHllYXJzLCB1cCB0byB0ZW47IGFuZCBubyBhZ2Ugd2FzIHRvIGJlIG1vdXJuZWQgbG9uZ2VyIHRoYW4gdGhhdCwgYnV0IHRlbiBtb250aHMgd2FzIHRoZSBwZXJpb2Qgc2V0IGZvciB0aGUgbG9uZ2VzdCBtb3VybmluZy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTkuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoaXMgaXMgYWxzbyB0aGUgcGVyaW9kIGR1cmluZyB3aGljaCB3b21lbiB3aG8gaGF2ZSBsb3N0IHRoZWlyIGh1c2JhbmRzIHJlbWFpbiBpbiB3aWRvd2hvb2QsIGFuZCBzaGUgd2hvIHRvb2sgYW5vdGhlciBodXNiYW5kIGJlZm9yZSB0aGlzIHRlcm0gd2FzIG91dCwgd2FzIG9ibGlnZWQgYnkgdGhlIGxhd3Mgb2YgTnVtYSB0byBzYWNyaWZpY2UgYSBjb3cgd2l0aCBjYWxmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFBvbnRpZmljZXMgYWxzbyBleHBsYWluIGFuZCBkaXJlY3QgdGhlIGFuY2VzdHJhbCByaXRlcyBvZiBidXJpYWwgZm9yIHRob3NlIHdobyBkZXNpcmUgaXQsIGFuZCB0aGV5IHdlcmUgdGF1Z2h0IGJ5IE51bWEgbm90IHRvIHJlZ2FyZCBhbnkgc3VjaCBvZmZpY2VzIGFzIGEgcG9sbHV0aW9uLCBidXQgdG8gaG9ub3VyIHRoZSBnb2RzIGJlbG93IGFsc28gd2l0aCB0aGUgY3VzdG9tYXJ5IHJpdGVzLCBzaW5jZSB0aGV5IHJlY2VpdmUgaW50byB0aGVpciBrZWVwaW5nIHRoZSBtb3N0IHNvdmVyZWlnbiBwYXJ0IG9mIHVzLCBhbmQgcGFydGljdWxhcmx5IHRoZSBnb2RkZXNzIGNhbGxlZCBMaWJpdGluYSwgd2hvIHByZXNpZGVzIG92ZXIgdGhlIHNvbGVtbiBzZXJ2aWNlcyBmb3IgdGhlIGRlYWQsIHdoZXRoZXIgc2hlIGlzIFByb3NlcnBpbmEsIG9yLCBhcyB0aGUgbW9zdCBsZWFybmVkIFJvbWFucyBtYWludGFpbiwgVmVudXM7IHRoZXJlYnkgbm90IGluYXB0bHkgY29ubmVjdGluZyBtYW4ncyBiaXJ0aCBhbmQgZGVhdGggd2l0aCB0aGUgcG93ZXIgb2Ygb25lIGFuZCB0aGUgc2FtZSBnb2RkZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk51bWEgaGltc2VsZiBhbHNvIHJlZ3VsYXRlZCB0aGUgcGVyaW9kcyBvZiBtb3VybmluZyBhY2NvcmRpbmcgdG8gYWdlcy4gRm9yIGluc3RhbmNlLCBvdmVyIGEgY2hpbGQgb2YgbGVzcyB0aGFuIHRocmVlIHllYXJzIHRoZXJlIHdhcyB0byBiZSBubyBtb3VybmluZyBhdCBhbGw7IG92ZXIgb25lIG9sZGVyIHRoYW4gdGhhdCwgdGhlIG1vdXJuaW5nIHdhcyBub3QgdG8gbGFzdCBtb3JlIG1vbnRocyB0aGFuIGl0IGhhZCBsaXZlZCB5ZWFycywgdXAgdG8gdGVuOyBhbmQgbm8gYWdlIHdhcyB0byBiZSBtb3VybmVkIGxvbmdlciB0aGFuIHRoYXQsIGJ1dCB0ZW4gbW9udGhzIHdhcyB0aGUgcGVyaW9kIHNldCBmb3IgdGhlIGxvbmdlc3QgbW91cm5pbmcuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAxOS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBpcyBhbHNvIHRoZSBwZXJpb2QgZHVyaW5nIHdoaWNoIHdvbWVuIHdobyBoYXZlIGxvc3QgdGhlaXIgaHVzYmFuZHMgcmVtYWluIGluIHdpZG93aG9vZCwgYW5kIHNoZSB3aG8gdG9vayBhbm90aGVyIGh1c2JhbmQgYmVmb3JlIHRoaXMgdGVybSB3YXMgb3V0LCB3YXMgb2JsaWdlZCBieSB0aGUgbGF3cyBvZiBOdW1hIHRvIHNhY3JpZmljZSBhIGNvdyB3aXRoIGNhbGYuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTkuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXguIDEuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5OdW1hIGFsc28gZXN0YWJsaXNoZWQgbWFueSBvdGhlciBvcmRlcnMgb2YgcHJpZXN0aG9vZCwgb2Ygd2hpY2ggSSBzaGFsbCBtZW50aW9uIHR3bywgYmVzaWRlcywgdGhvc2Ugb2YgdGhlIFNhbGlpIGFuZCB0aGUgRmV0aWFsZXMsIHdoaWNoIG1vcmUgdGhhbiBhbnkgb3RoZXJzIGdpdmUgZXZpZGVuY2Ugb2YgdGhlIG1hbidzIHJldmVyZW50IHBpZXR5LiBUaGUgRmV0aWFsZXMgd2VyZSBndWFyZGlhbnMgb2YgcGVhY2UsIHNvIHRvIHNwZWFrLCBhbmQgaW4gbXkgb3BpbmlvbiB0b29rIHRoZWlyIG5hbWUgZnJvbSB0aGVpciBvZmZpY2UsIHdoaWNoIHdhcyB0byBwdXQgYSBzdG9wIHRvIGRpc3B1dGVzIGJ5IG9yYWwgY29uZmVyZW5jZSwgb3IgPGVtcGg+cGFybGV5PC9lbXBoPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Db25uZWN0aW5nIHRoZSBuYW1lIHdpdGggZmF0ZXJpLCBmYXJpLCA8ZW1waD50byBzcGVhazwvZW1waD4uPC9ub3RlPiBhbmQgdGhleSB3b3VsZCBub3Qgc3VmZmVyIGEgaG9zdGlsZSBleHBlZGl0aW9uIHRvIGJlIG1hZGUgYmVmb3JlIGV2ZXJ5IGhvcGUgb2YgZ2V0dGluZyBqdXN0aWNlIGhhZCBiZWVuIGN1dCBvZmYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgR3JlZWtzIGNhbGwgaXQgcGVhY2Ugd2hlbiB0d28gcGFydGllcyBzZXR0bGUgdGhlaXIgcXVhcnJlbHMgYnkgbXV0dWFsIGNvbmZlcmVuY2UsIGFuZCBub3QgYnkgdmlvbGVuY2UuIEFuZCB0aGUgUm9tYW4gRmV0aWFsZXMgb2Z0ZW4gd2VudCB0byB0aG9zZSB3aG8gd2VyZSBkb2luZyB0aGVtIGEgd3JvbmcgYW5kIG1hZGUgcGVyc29uYWwgYXBwZWFscyBmb3IgZmFpciB0cmVhdG1lbnQ7IGJ1dCBpZiB0aGUgdW5mYWlyIHRyZWF0bWVudCBjb250aW51ZWQsIHRoZXkgY2FsbGVkIHRoZSBnb2RzIHRvIHdpdG5lc3MsIGludm9rZWQgbWFueSBkcmVhZGZ1bCBldmlscyB1cG9uIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGNvdW50cnkgaW4gY2FzZSB0aGV5IHJlc29ydGVkIHRvIGhvc3RpbGl0aWVzIHVuanVzdGx5LCBhbmQgc28gZGVjbGFyZWQgd2FyIHVwb24gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIHRoZXkgZm9yYmFkZSBpdCBvciB3aXRoaGVsZCB0aGVpciBjb25zZW50LCBuZWl0aGVyIHNvbGRpZXIgbm9yIGtpbmcgb2YgUm9tZSBjb3VsZCBsYXdmdWxseSB0YWtlIHVwIGFybXMuIFdhciBoYWQgdG8gYmVnaW4gd2l0aCB0aGVpciB2ZXJkaWN0IHRoYXQgaXQgd2FzIGp1c3QsIGFuZCB0aGUgcnVsZXIsIG9uIHJlY2VpdmluZyB0aGlzIHZlcmRpY3QsIG11c3QgdGhlbiBkZWxpYmVyYXRlIG9uIHRoZSBwcm9wZXIgd2F5IHRvIHdhZ2UgaXQuIEFuZCBpdCBpcyBzYWlkIHRoYXQgdGhlIGRyZWFkZnVsIGRpc2FzdGVyIHdoaWNoIHRoZSBjaXR5IGV4cGVyaWVuY2VkIGF0IHRoZSBoYW5kcyBvZiB0aGUgR2F1bHMgd2FzIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBpbGxlZ2FsIHRyZWF0bWVudCBvZiB0aGVzZSBwcmllc3RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk51bWEgYWxzbyBlc3RhYmxpc2hlZCBtYW55IG90aGVyIG9yZGVycyBvZiBwcmllc3Rob29kLCBvZiB3aGljaCBJIHNoYWxsIG1lbnRpb24gdHdvLCBiZXNpZGVzLCB0aG9zZSBvZiB0aGUgU2FsaWkgYW5kIHRoZSBGZXRpYWxlcywgd2hpY2ggbW9yZSB0aGFuIGFueSBvdGhlcnMgZ2l2ZSBldmlkZW5jZSBvZiB0aGUgbWFuJ3MgcmV2ZXJlbnQgcGlldHkuIFRoZSBGZXRpYWxlcyB3ZXJlIGd1YXJkaWFucyBvZiBwZWFjZSwgc28gdG8gc3BlYWssIGFuZCBpbiBteSBvcGluaW9uIHRvb2sgdGhlaXIgbmFtZSBmcm9tIHRoZWlyIG9mZmljZSwgd2hpY2ggd2FzIHRvIHB1dCBhIHN0b3AgdG8gZGlzcHV0ZXMgYnkgb3JhbCBjb25mZXJlbmNlLCBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnBhcmxleTwvZW1waD4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Db25uZWN0aW5nIHRoZSBuYW1lIHdpdGggZmF0ZXJpLCBmYXJpLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRvIHNwZWFrPC9lbXBoPi48L25vdGU+IGFuZCB0aGV5IHdvdWxkIG5vdCBzdWZmZXIgYSBob3N0aWxlIGV4cGVkaXRpb24gdG8gYmUgbWFkZSBiZWZvcmUgZXZlcnkgaG9wZSBvZiBnZXR0aW5nIGp1c3RpY2UgaGFkIGJlZW4gY3V0IG9mZi4gCgkJCQk8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRvIHNwZWFrPC9lbXBoPi48L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgR3JlZWtzIGNhbGwgaXQgcGVhY2Ugd2hlbiB0d28gcGFydGllcyBzZXR0bGUgdGhlaXIgcXVhcnJlbHMgYnkgbXV0dWFsIGNvbmZlcmVuY2UsIGFuZCBub3QgYnkgdmlvbGVuY2UuIEFuZCB0aGUgUm9tYW4gRmV0aWFsZXMgb2Z0ZW4gd2VudCB0byB0aG9zZSB3aG8gd2VyZSBkb2luZyB0aGVtIGEgd3JvbmcgYW5kIG1hZGUgcGVyc29uYWwgYXBwZWFscyBmb3IgZmFpciB0cmVhdG1lbnQ7IGJ1dCBpZiB0aGUgdW5mYWlyIHRyZWF0bWVudCBjb250aW51ZWQsIHRoZXkgY2FsbGVkIHRoZSBnb2RzIHRvIHdpdG5lc3MsIGludm9rZWQgbWFueSBkcmVhZGZ1bCBldmlscyB1cG9uIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGNvdW50cnkgaW4gY2FzZSB0aGV5IHJlc29ydGVkIHRvIGhvc3RpbGl0aWVzIHVuanVzdGx5LCBhbmQgc28gZGVjbGFyZWQgd2FyIHVwb24gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB0aGV5IGZvcmJhZGUgaXQgb3Igd2l0aGhlbGQgdGhlaXIgY29uc2VudCwgbmVpdGhlciBzb2xkaWVyIG5vciBraW5nIG9mIFJvbWUgY291bGQgbGF3ZnVsbHkgdGFrZSB1cCBhcm1zLiBXYXIgaGFkIHRvIGJlZ2luIHdpdGggdGhlaXIgdmVyZGljdCB0aGF0IGl0IHdhcyBqdXN0LCBhbmQgdGhlIHJ1bGVyLCBvbiByZWNlaXZpbmcgdGhpcyB2ZXJkaWN0LCBtdXN0IHRoZW4gZGVsaWJlcmF0ZSBvbiB0aGUgcHJvcGVyIHdheSB0byB3YWdlIGl0LiBBbmQgaXQgaXMgc2FpZCB0aGF0IHRoZSBkcmVhZGZ1bCBkaXNhc3RlciB3aGljaCB0aGUgY2l0eSBleHBlcmllbmNlZCBhdCB0aGUgaGFuZHMgb2YgdGhlIEdhdWxzIHdhcyBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgaWxsZWdhbCB0cmVhdG1lbnQgb2YgdGhlc2UgcHJpZXN0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gdGhlIEJhcmJhcmlhbnMgd2VyZSBiZXNpZWdpbmcgQ2x1c2l1bSwgRmFiaXVzIEFtYnVzdHVzIHdhcyBzZW50IGZyb20gUm9tZSB0byB0aGVpciBjYW1wIHRvIGJyaW5nIGFib3V0IGEgY2Vzc2F0aW9uIG9mIGhvc3RpbGl0aWVzIG9uIGJlaGFsZiBvZiB0aGUgYmVzaWVnZWQuIEJ1dCBvbiByZWNlaXZpbmcgYW4gdW5zZWVtbHkgYW5zd2VyLCBoZSB0aG91Z2h0IGhpcyBvZmZpY2Ugb2YgYW1iYXNzYWRvciB3YXMgYXQgYW4gZW5kLCBhbmQgY29tbWl0dGVkIHRoZSB5b3V0aGZ1bCBmb2xseSBvZiB0YWtpbmcgdXAgYXJtcyBmb3IgdGhlIENsdXNpYW5zIGFuZCBjaGFsbGVuZ2luZyB0aGUgYnJhdmVzdCBvZiB0aGUgQmFyYmFyaWFucyB0byBzaW5nbGUgY29tYmF0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5GYWJpdXMgZm91Z2h0IHN1Y2Nlc3NmdWxseSwgdW5ob3JzZWQgaGlzIGFkdmVyc2FyeSwgYW5kIHN0cmlwcGVkIGhpbSBvZiBoaXMgYXJtb3VyLiBCdXQgd2hlbiB0aGUgR2F1bHMgZGlzY292ZXJlZCB3aG8gaGUgd2FzLCB0aGV5IHNlbnQgYSBoZXJhbGQgdG8gUm9tZSBkZW5vdW5jaW5nIEZhYml1cyBmb3IgdmlvbGF0aW5nIGEgdHJ1Y2UsIGJyZWFraW5nIGhpcyBvYXRoLCBhbmQgZmlnaHRpbmcgYWdhaW5zdCB0aGVtIGJlZm9yZSB3YXIgd2FzIGZvcm1hbGx5IGRlY2xhcmVkLiBBdCBSb21lIHRoZSBGZXRpYWxlcyB0cmllZCB0byBwZXJzdWFkZSB0aGUgc2VuYXRlIHRvIGRlbGl2ZXIgRmFiaXVzIGludG8gdGhlIGhhbmRzIG9mIHRoZSBHYXVscywgYnV0IGhlIHRvb2sgcmVmdWdlIHdpdGggdGhlIG11bHRpdHVkZSwgYW5kIHRocm91Z2ggdGhlIGZhdm91ciBvZiB0aGUgcG9wdWxhY2UgZXZhZGVkIGhpcyBwdW5pc2htZW50LiBBZnRlciBhIGxpdHRsZSwgdGhlcmVmb3JlLCB0aGUgR2F1bHMgY2FtZSB1cCBhbmQgc2Fja2VkIFJvbWUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgQ2FwaXRvbC4gQnV0IHRoaXMgc3RvcnkgaXMgbW9yZSBmdWxseSBnaXZlbiBpbiBteSBMaWZlIG9mIENhbWlsbHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAyOCIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4teHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBCYXJiYXJpYW5zIHdlcmUgYmVzaWVnaW5nIENsdXNpdW0sIEZhYml1cyBBbWJ1c3R1cyB3YXMgc2VudCBmcm9tIFJvbWUgdG8gdGhlaXIgY2FtcCB0byBicmluZyBhYm91dCBhIGNlc3NhdGlvbiBvZiBob3N0aWxpdGllcyBvbiBiZWhhbGYgb2YgdGhlIGJlc2llZ2VkLiBCdXQgb24gcmVjZWl2aW5nIGFuIHVuc2VlbWx5IGFuc3dlciwgaGUgdGhvdWdodCBoaXMgb2ZmaWNlIG9mIGFtYmFzc2Fkb3Igd2FzIGF0IGFuIGVuZCwgYW5kIGNvbW1pdHRlZCB0aGUgeW91dGhmdWwgZm9sbHkgb2YgdGFraW5nIHVwIGFybXMgZm9yIHRoZSBDbHVzaWFucyBhbmQgY2hhbGxlbmdpbmcgdGhlIGJyYXZlc3Qgb2YgdGhlIEJhcmJhcmlhbnMgdG8gc2luZ2xlIGNvbWJhdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cyBmb3VnaHQgc3VjY2Vzc2Z1bGx5LCB1bmhvcnNlZCBoaXMgYWR2ZXJzYXJ5LCBhbmQgc3RyaXBwZWQgaGltIG9mIGhpcyBhcm1vdXIuIEJ1dCB3aGVuIHRoZSBHYXVscyBkaXNjb3ZlcmVkIHdobyBoZSB3YXMsIHRoZXkgc2VudCBhIGhlcmFsZCB0byBSb21lIGRlbm91bmNpbmcgRmFiaXVzIGZvciB2aW9sYXRpbmcgYSB0cnVjZSwgYnJlYWtpbmcgaGlzIG9hdGgsIGFuZCBmaWdodGluZyBhZ2FpbnN0IHRoZW0gYmVmb3JlIHdhciB3YXMgZm9ybWFsbHkgZGVjbGFyZWQuIEF0IFJvbWUgdGhlIEZldGlhbGVzIHRyaWVkIHRvIHBlcnN1YWRlIHRoZSBzZW5hdGUgdG8gZGVsaXZlciBGYWJpdXMgaW50byB0aGUgaGFuZHMgb2YgdGhlIEdhdWxzLCBidXQgaGUgdG9vayByZWZ1Z2Ugd2l0aCB0aGUgbXVsdGl0dWRlLCBhbmQgdGhyb3VnaCB0aGUgZmF2b3VyIG9mIHRoZSBwb3B1bGFjZSBldmFkZWQgaGlzIHB1bmlzaG1lbnQuIEFmdGVyIGEgbGl0dGxlLCB0aGVyZWZvcmUsIHRoZSBHYXVscyBjYW1lIHVwIGFuZCBzYWNrZWQgUm9tZSwgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBDYXBpdG9sLiBCdXQgdGhpcyBzdG9yeSBpcyBtb3JlIGZ1bGx5IGdpdmVuIGluIG15IExpZmUgb2YgQ2FtaWxsdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAyOCIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4teHhpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAyOCIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgeHZpaS4teHhpaS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwcmllc3Rob29kIG9mIHRoZSBTYWxpaSBOdW1hIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGVzdGFibGlzaGVkIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbi4gSW4gdGhlIGVpZ2h0aCB5ZWFyIG9mIGhpcyByZWlnbiBhIHBlc3RpbGVuY2UsIHdoaWNoIHRyYXZlcnNlZCBJdGFseSwgZGlzdHJhY3RlZCBSb21lIGFsc28uIFRoZSBzdG9yeSBnb2VzIHRoYXQgd2hpbGUgdGhlIHBlb3BsZSB3ZXJlIGRpc2hlYXJ0ZW5lZCBieSB0aGlzLCBhIGJyb256ZSBidWNrbGVyIGZlbGwgZnJvbSBoZWF2ZW4sIHdoaWNoIGNhbWUgaW50byB0aGUgaGFuZHMgb2YgTnVtYSwgYW5kIGEgd29uZGVyZnVsIGFjY291bnQgb2YgaXQgd2FzIGdpdmVuIGJ5IHRoZSBraW5nLCB3aGljaCBoZSBsZWFybmVkIGZyb20gRWdlcmlhIGFuZCB0aGUgTXVzZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBidWNrbGVyIGNhbWUsIGhlIHNhaWQsIGZvciB0aGUgc2FsdmF0aW9uIG9mIHRoZSBjaXR5LCBhbmQgbXVzdCBiZSBjYXJlZnVsbHkgcHJlc2VydmVkIGJ5IG1ha2luZyBlbGV2ZW4gb3RoZXJzIG9mIGxpa2UgZmFzaGlvbiwgc2l6ZSwgYW5kIHNoYXBlLCBpbiBvcmRlciB0aGF0IHRoZSByZXNlbWJsYW5jZSBiZXR3ZWVuIHRoZW0gbWlnaHQgbWFrZSBpdCBkaWZmaWN1bHQgZm9yIGEgdGhpZWYgdG8gZGlzdGluZ3Vpc2ggdGhlIG9uZSB0aGF0IGZlbGwgZnJvbSBoZWF2ZW4uIEhlIHNhaWQgZnVydGhlciB0aGF0IHRoZSBzcG90IHdoZXJlIGl0IGZlbGwsIGFuZCB0aGUgYWRqYWNlbnQgbWVhZG93cywgd2hlcmUgdGhlIE11c2VzIHVzdWFsbHkgaGFkIGNvbnZlcnNlIHdpdGggaGltLCBtdXN0IGJlIGNvbnNlY3JhdGVkIHRvIHRoZW07IGFuZCB0aGF0IHRoZSBzcHJpbmcgd2hpY2ggd2F0ZXJlZCB0aGUgc3BvdCBzaG91bGQgYmUgZGVjbGFyZWQgaG9seSB3YXRlciBmb3IgdGhlIHVzZSBvZiB0aGUgVmVzdGFsIHZpcmdpbnMsIHdobyBzaG91bGQgZGFpbHkgc3ByaW5rbGUgYW5kIHB1cmlmeSB0aGVpciB0ZW1wbGUgd2l0aCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZXkgc2F5IHRoYXQgdGhlIHRydXRoIG9mIGFsbCB0aGlzIHdhcyBhdHRlc3RlZCBieSB0aGUgaW1tZWRpYXRlIGNlc3NhdGlvbiBvZiB0aGUgcGVzdGlsZW5jZS4gV2hlbiBOdW1hIHNob3dlZCB0aGUgYnVja2xlciB0byB0aGUgYXJ0aWZpY2VycyBhbmQgYmFkZSB0aGVtIGRvIHRoZWlyIGJlc3QgdG8gbWFrZSBvdGhlcnMgbGlrZSBpdCwgdGhleSBhbGwgZGVjbGluZWQsIGV4Y2VwdCBWZXR1cml1cyBNYW11cml1cywgYSBtb3N0IGV4Y2VsbGVudCB3b3JrbWFuLCB3aG8gd2FzIHNvIGhhcHB5IGluIGhpcyBpbWl0YXRpb24gb2YgaXQsIGFuZCBtYWRlIGFsbCB0aGUgZWxldmVuIHNvIGV4YWN0bHkgbGlrZSBpdCwgdGhhdCBub3QgZXZlbiBOdW1hIGhpbXNlbGYgY291bGQgZGlzdGluZ3Vpc2ggdGhlbS4gRm9yIHRoZSB3YXRjaCBhbmQgY2FyZSBvZiB0aGVzZSBidWNrbGVycywgdGhlbiwgaGUgYXBwb2ludGVkIHRoZSBwcmllc3Rob29kIG9mIHRoZSBTYWxpaS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZSBTYWxpaSB3ZXJlIHNvIG5hbWVkLCBub3QsIGFzIHNvbWUgdGVsbCB0aGUgdGFsZSwgZnJvbSBhIG1hbiBvZiBTYW1vdGhyYWNlIG9yIE1hbnRpbmVhLCBuYW1lZCBTYWxpdXMsIHdobyBmaXJzdCB0YXVnaHQgdGhlIGRhbmNlIGluIGFybW91cjsgYnV0IHJhdGhlciBmcm9tIHRoZSA8ZW1waD5sZWFwaW5nPC9lbXBoPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgTGF0aW4gCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2FsaXJlLDwvcT4gCiAgICAgICAgICAgICAgIDxlbXBoPnRvIGxlYXA8L2VtcGg+Ljwvbm90ZT4gd2hpY2ggY2hhcmFjdGVyaXplZCB0aGUgZGFuY2UgaXRzZWxmLiBUaGlzIGRhbmNlIHRoZXkgcGVyZm9ybSB3aGVuIHRoZXkgY2FycnkgdGhlIHNhY3JlZCBidWNrbGVycyB0aHJvdWdoIHRoZSBzdHJlZXRzIG9mIHRoZSBjaXR5IGluIHRoZSBtb250aCBvZiBNYXJjaCwgY2xhZCBpbiBwdXJwbGUgdHVuaWNzLCBnaXJ0IHdpdGggYnJvYWQgYmVsdHMgb2YgYnJvbnplLCB3ZWFyaW5nIGJyb256ZSBoZWxtZXRzIG9uIHRoZWlyIGhlYWRzLCBhbmQgY2Fycnlpbmcgc21hbGwgZGFnZ2VycyB3aXRoIHdoaWNoIHRoZXkgc3RyaWtlIHRoZSBzaGllbGRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGRhbmNlIGlzIGNoaWVmbHkgYSBtYXR0ZXIgb2Ygc3RlcDsgZm9yIHRoZXkgbW92ZSBncmFjZWZ1bGx5LCBhbmQgZXhlY3V0ZSB3aXRoIHZpZ291ciBhbmQgYWdpbGl0eSBjZXJ0YWluIHNoaWZ0aW5nIGNvbnZvbHV0aW9ucywgaW4gcXVpY2sgYW5kIG9mdC1yZWN1cnJpbmcgcmh5dGhtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHByaWVzdGhvb2Qgb2YgdGhlIFNhbGlpIE51bWEgaXMgc2FpZCB0byBoYXZlIGJlZW4gZXN0YWJsaXNoZWQgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uLiBJbiB0aGUgZWlnaHRoIHllYXIgb2YgaGlzIHJlaWduIGEgcGVzdGlsZW5jZSwgd2hpY2ggdHJhdmVyc2VkIEl0YWx5LCBkaXN0cmFjdGVkIFJvbWUgYWxzby4gVGhlIHN0b3J5IGdvZXMgdGhhdCB3aGlsZSB0aGUgcGVvcGxlIHdlcmUgZGlzaGVhcnRlbmVkIGJ5IHRoaXMsIGEgYnJvbnplIGJ1Y2tsZXIgZmVsbCBmcm9tIGhlYXZlbiwgd2hpY2ggY2FtZSBpbnRvIHRoZSBoYW5kcyBvZiBOdW1hLCBhbmQgYSB3b25kZXJmdWwgYWNjb3VudCBvZiBpdCB3YXMgZ2l2ZW4gYnkgdGhlIGtpbmcsIHdoaWNoIGhlIGxlYXJuZWQgZnJvbSBFZ2VyaWEgYW5kIHRoZSBNdXNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBidWNrbGVyIGNhbWUsIGhlIHNhaWQsIGZvciB0aGUgc2FsdmF0aW9uIG9mIHRoZSBjaXR5LCBhbmQgbXVzdCBiZSBjYXJlZnVsbHkgcHJlc2VydmVkIGJ5IG1ha2luZyBlbGV2ZW4gb3RoZXJzIG9mIGxpa2UgZmFzaGlvbiwgc2l6ZSwgYW5kIHNoYXBlLCBpbiBvcmRlciB0aGF0IHRoZSByZXNlbWJsYW5jZSBiZXR3ZWVuIHRoZW0gbWlnaHQgbWFrZSBpdCBkaWZmaWN1bHQgZm9yIGEgdGhpZWYgdG8gZGlzdGluZ3Vpc2ggdGhlIG9uZSB0aGF0IGZlbGwgZnJvbSBoZWF2ZW4uIEhlIHNhaWQgZnVydGhlciB0aGF0IHRoZSBzcG90IHdoZXJlIGl0IGZlbGwsIGFuZCB0aGUgYWRqYWNlbnQgbWVhZG93cywgd2hlcmUgdGhlIE11c2VzIHVzdWFsbHkgaGFkIGNvbnZlcnNlIHdpdGggaGltLCBtdXN0IGJlIGNvbnNlY3JhdGVkIHRvIHRoZW07IGFuZCB0aGF0IHRoZSBzcHJpbmcgd2hpY2ggd2F0ZXJlZCB0aGUgc3BvdCBzaG91bGQgYmUgZGVjbGFyZWQgaG9seSB3YXRlciBmb3IgdGhlIHVzZSBvZiB0aGUgVmVzdGFsIHZpcmdpbnMsIHdobyBzaG91bGQgZGFpbHkgc3ByaW5rbGUgYW5kIHB1cmlmeSB0aGVpciB0ZW1wbGUgd2l0aCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGV5IHNheSB0aGF0IHRoZSB0cnV0aCBvZiBhbGwgdGhpcyB3YXMgYXR0ZXN0ZWQgYnkgdGhlIGltbWVkaWF0ZSBjZXNzYXRpb24gb2YgdGhlIHBlc3RpbGVuY2UuIFdoZW4gTnVtYSBzaG93ZWQgdGhlIGJ1Y2tsZXIgdG8gdGhlIGFydGlmaWNlcnMgYW5kIGJhZGUgdGhlbSBkbyB0aGVpciBiZXN0IHRvIG1ha2Ugb3RoZXJzIGxpa2UgaXQsIHRoZXkgYWxsIGRlY2xpbmVkLCBleGNlcHQgVmV0dXJpdXMgTWFtdXJpdXMsIGEgbW9zdCBleGNlbGxlbnQgd29ya21hbiwgd2hvIHdhcyBzbyBoYXBweSBpbiBoaXMgaW1pdGF0aW9uIG9mIGl0LCBhbmQgbWFkZSBhbGwgdGhlIGVsZXZlbiBzbyBleGFjdGx5IGxpa2UgaXQsIHRoYXQgbm90IGV2ZW4gTnVtYSBoaW1zZWxmIGNvdWxkIGRpc3Rpbmd1aXNoIHRoZW0uIEZvciB0aGUgd2F0Y2ggYW5kIGNhcmUgb2YgdGhlc2UgYnVja2xlcnMsIHRoZW4sIGhlIGFwcG9pbnRlZCB0aGUgcHJpZXN0aG9vZCBvZiB0aGUgU2FsaWkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgU2FsaWkgd2VyZSBzbyBuYW1lZCwgbm90LCBhcyBzb21lIHRlbGwgdGhlIHRhbGUsIGZyb20gYSBtYW4gb2YgU2Ftb3RocmFjZSBvciBNYW50aW5lYSwgbmFtZWQgU2FsaXVzLCB3aG8gZmlyc3QgdGF1Z2h0IHRoZSBkYW5jZSBpbiBhcm1vdXI7IGJ1dCByYXRoZXIgZnJvbSB0aGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5sZWFwaW5nPC9lbXBoPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBMYXRpbiAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNhbGlyZSw8L3E+IAogICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnRvIGxlYXA8L2VtcGg+Ljwvbm90ZT4gd2hpY2ggY2hhcmFjdGVyaXplZCB0aGUgZGFuY2UgaXRzZWxmLiBUaGlzIGRhbmNlIHRoZXkgcGVyZm9ybSB3aGVuIHRoZXkgY2FycnkgdGhlIHNhY3JlZCBidWNrbGVycyB0aHJvdWdoIHRoZSBzdHJlZXRzIG9mIHRoZSBjaXR5IGluIHRoZSBtb250aCBvZiBNYXJjaCwgY2xhZCBpbiBwdXJwbGUgdHVuaWNzLCBnaXJ0IHdpdGggYnJvYWQgYmVsdHMgb2YgYnJvbnplLCB3ZWFyaW5nIGJyb256ZSBoZWxtZXRzIG9uIHRoZWlyIGhlYWRzLCBhbmQgY2Fycnlpbmcgc21hbGwgZGFnZ2VycyB3aXRoIHdoaWNoIHRoZXkgc3RyaWtlIHRoZSBzaGllbGRzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2FsaXJlLDwvcT4gCiAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+dG8gbGVhcDwvZW1waD4uPC90cmFuc2xhdGlvbj4="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZGFuY2UgaXMgY2hpZWZseSBhIG1hdHRlciBvZiBzdGVwOyBmb3IgdGhleSBtb3ZlIGdyYWNlZnVsbHksIGFuZCBleGVjdXRlIHdpdGggdmlnb3VyIGFuZCBhZ2lsaXR5IGNlcnRhaW4gc2hpZnRpbmcgY29udm9sdXRpb25zLCBpbiBxdWljayBhbmQgb2Z0LXJlY3VycmluZyByaHl0aG0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGJ1Y2tsZXJzIHRoZW1zZWx2ZXMgYXJlIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5jaWxpYSw8L3E+IGZyb20gdGhlaXIgc2hhcGU7IGZvciB0aGlzIGlzIG5vdCByb3VuZCwgbm9yIHlldCBjb21wbGV0ZWx5IG92YWwsIGxpa2UgdGhhdCBvZiB0aGUgcmVndWxhciBzaGllbGQsIGJ1dCBoYXMgYSBjdXJ2aW5nIGluZGVudGF0aW9uLCB0aGUgYXJtcyBvZiB3aGljaCBhcmUgYmVudCBiYWNrIGFuZCB1bml0ZWQgd2l0aCBlYWNoIG90aGVyIGF0IHRvcCBhbmQgYm90dG9tIHRoaXMgbWFrZXMgdGhlIHNoYXBlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmN5bG9uLDwvcT4gdGhlIEdyZWVrIGZvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmN1cnZlZDwvZW1waD4uIE9yLCB0aGV5IGFyZSBuYW1lZCBmcm9tIHRoZSBlbGJvdyBvbiB3aGljaCB0aGV5IGFyZSBjYXJyaWVkLCB3aGljaCwgaW4gR3JlZWssIGlzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmtvbi48L3E+IFRoaXMgaXMgd2hhdCBKdWJhIHNheXMsIHdobyBpcyBiZW50IG9uIGRlcml2aW5nIHRoZSBuYW1lIGZyb20gdGhlIEdyZWVrLiBCdXQgdGhlIG5hbWUgbWF5IGNvbWUgZnJvbSB0aGUgR3JlZWsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZWthdGhlbiw8L3E+IGluYXNtdWNoIGFzIHRoZSBvcmlnaW5hbCBzaGllbGQgZmVsbCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmZyb20gb24gaGlnaDwvZW1waD47IG9yIGZyb20gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFrZXNpcyw8L3E+IGJlY2F1c2UgaXQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5oZWFsZWQ8L2VtcGg+IHRob3NlIHdobyB3ZXJlIHNpY2sgb2YgdGhlIHBsYWd1ZTsgb3IgZnJvbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXVjaG1vbiBseXNpcyw8L3E+IGJlY2F1c2UgaXQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5wdXQgYW4gZW5kIHRvIHRoZSBkcm91Z2h0PC9lbXBoPjsgb3IsIGZ1cnRoZXIsIGZyb20gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuYXNjaGVzaXMsPC9xPiBiZWNhdXNlIGl0IGJyb3VnaHQgYSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmNlc3NhdGlvbjwvZW1waD4gb2YgY2FsYW1pdGllcywganVzdCBhcyBDYXN0b3IgYW5kIFBvbGx1eCB3ZXJlIGNhbGxlZCBBbmFrZXMgYnkgdGhlIEF0aGVuaWFuczsgaWYsIHRoYXQgaXMsIHdlIGFyZSBib3VuZCB0byBkZXJpdmUgdGhlIG5hbWUgZnJvbSB0aGUgR3JlZWsuCgkJCTwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hbmNpbGlhLDwvcT4gZnJvbSB0aGVpciBzaGFwZTsgZm9yIHRoaXMgaXMgbm90IHJvdW5kLCBub3IgeWV0IGNvbXBsZXRlbHkgb3ZhbCwgbGlrZSB0aGF0IG9mIHRoZSByZWd1bGFyIHNoaWVsZCwgYnV0IGhhcyBhIGN1cnZpbmcgaW5kZW50YXRpb24sIHRoZSBhcm1zIG9mIHdoaWNoIGFyZSBiZW50IGJhY2sgYW5kIHVuaXRlZCB3aXRoIGVhY2ggb3RoZXIgYXQgdG9wIGFuZCBib3R0b20gdGhpcyBtYWtlcyB0aGUgc2hhcGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuY3lsb24sPC9xPiB0aGUgR3JlZWsgZm9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y3VydmVkPC9lbXBoPi4gT3IsIHRoZXkgYXJlIG5hbWVkIGZyb20gdGhlIGVsYm93IG9uIHdoaWNoIHRoZXkgYXJlIGNhcnJpZWQsIHdoaWNoLCBpbiBHcmVlaywgaXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFua29uLjwvcT4gVGhpcyBpcyB3aGF0IEp1YmEgc2F5cywgd2hvIGlzIGJlbnQgb24gZGVyaXZpbmcgdGhlIG5hbWUgZnJvbSB0aGUgR3JlZWsuIEJ1dCB0aGUgbmFtZSBtYXkgY29tZSBmcm9tIHRoZSBHcmVlayAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5la2F0aGVuLDwvcT4gaW5hc211Y2ggYXMgdGhlIG9yaWdpbmFsIHNoaWVsZCBmZWxsIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZnJvbSBvbiBoaWdoPC9lbXBoPjsgb3IgZnJvbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWtlc2lzLDwvcT4gYmVjYXVzZSBpdCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmhlYWxlZDwvZW1waD4gdGhvc2Ugd2hvIHdlcmUgc2ljayBvZiB0aGUgcGxhZ3VlOyBvciBmcm9tIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hdWNobW9uIGx5c2lzLDwvcT4gYmVjYXVzZSBpdCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnB1dCBhbiBlbmQgdG8gdGhlIGRyb3VnaHQ8L2VtcGg+OyBvciwgZnVydGhlciwgZnJvbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5hc2NoZXNpcyw8L3E+IGJlY2F1c2UgaXQgYnJvdWdodCBhIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y2Vzc2F0aW9uPC9lbXBoPiBvZiBjYWxhbWl0aWVzLCBqdXN0IGFzIENhc3RvciBhbmQgUG9sbHV4IHdlcmUgY2FsbGVkIEFuYWtlcyBieSB0aGUgQXRoZW5pYW5zOyBpZiwgdGhhdCBpcywgd2UgYXJlIGJvdW5kIHRvIGRlcml2ZSB0aGUgbmFtZSBmcm9tIHRoZSBHcmVlay4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+V2UgYXJlIHRvbGQgdGhhdCBNYW1lcnRpdXMgd2FzIHJld2FyZGVkIGZvciBoaXMgd29uZGVyZnVsIGFydCBieSBoYXZpbmcgaGlzIG5hbWUgbWVudGlvbmVkIGluIGEgc29uZyB3aGljaCB0aGUgU2FsaWkgc2luZyBhcyB0aGV5IHBlcmZvcm0gdGhlaXIgd2FyLWRhbmNlLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCB0aGUgc29uZyBkb2VzIG5vdCBjb21tZW1vcmF0ZSBWZXR1cml1cyBNYW11cml1cywgYnV0IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dmV0ZXJlbSBtZW1vcmlhbSw8L3E+IHRoYXQgaXMgdG8gc2F5LCA8ZW1waD5hbmNpZW50IHJlbWVtYnJhbmNlLjwvZW1waD4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkIHRoYXQgTWFtZXJ0aXVzIHdhcyByZXdhcmRlZCBmb3IgaGlzIHdvbmRlcmZ1bCBhcnQgYnkgaGF2aW5nIGhpcyBuYW1lIG1lbnRpb25lZCBpbiBhIHNvbmcgd2hpY2ggdGhlIFNhbGlpIHNpbmcgYXMgdGhleSBwZXJmb3JtIHRoZWlyIHdhci1kYW5jZS4gU29tZSwgaG93ZXZlciwgc2F5IHRoYXQgdGhlIHNvbmcgZG9lcyBub3QgY29tbWVtb3JhdGUgVmV0dXJpdXMgTWFtdXJpdXMsIGJ1dCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dmV0ZXJlbSBtZW1vcmlhbSw8L3E+IHRoYXQgaXMgdG8gc2F5LCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmFuY2llbnQgcmVtZW1icmFuY2UuPC9lbXBoPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBOdW1hIGhhZCB0aHVzIGVzdGFibGlzaGVkIGFuZCByZWd1bGF0ZWQgdGhlIHByaWVzdGx5IG9yZGVycywgaGUgYnVpbHQsIG5lYXIgdGhlIHRlbXBsZSBvZiBWZXN0YSwgdGhlIHNvLWNhbGxlZCBSZWdpYSwgb3Igcm95YWwgaG91c2UuIEhlcmUgaGUgcGFzc2VkIG1vc3Qgb2YgaGlzIHRpbWUsIHBlcmZvcm1pbmcgc2FjcmVkIGZ1bmN0aW9ucywgb3IgdGVhY2hpbmcgdGhlIHByaWVzdHMsIG9yIGVuZ2FnZWQgaW4gdGhlIHF1aWV0IGNvbnRlbXBsYXRpb24gb2YgZGl2aW5lIHRoaW5ncy4gSGUgYWxzbyBoYWQgYW5vdGhlciBob3VzZSBvbiB0aGUgUXVpcmluYWwgaGlsbCwgdGhlIHNpdGUgb2Ygd2hpY2ggaXMgc3RpbGwgcG9pbnRlZCBvdXQuIEF0IGFsbCBwdWJsaWMgYW5kIHNvbGVtbiBwcm9jZXNzaW9ucyBvZiB0aGUgcHJpZXN0cywgaGVyYWxkcyB3ZXJlIHNlbnQgb24gYmVmb3JlIHRocm91Z2ggdGhlIGNpdHksIGJpZGRpbmcgdGhlIHBlb3BsZSBtYWtlIGhvbGlkYXksIGFuZCBwdXR0aW5nIGEgc3RvcCB0byBhbGwgbGFib3VyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGp1c3QgYXMgaXQgaXMgc2FpZCB0aGF0IHRoZSBQeXRoYWdvcmVhbnMgZG8gbm90IGFsbG93IG1lbiB0byB3b3JzaGlwIGFuZCBwcmF5IHRvIHRoZWlyIGdvZHMgY3Vyc29yaWx5IGFuZCBieSB0aGUgd2F5LCBidXQgd291bGQgaGF2ZSB0aGVtIGdvIGZyb20gdGhlaXIgaG9tZXMgZGlyZWN0bHkgdG8gdGhpcyBvZmZpY2UsIHdpdGggdGhlaXIgbWluZHMgcHJlcGFyZWQgZm9yIGl0LCBzbyBOdW1hIHRob3VnaHQgdGhhdCBoaXMgY2l0aXplbnMgb3VnaHQgbmVpdGhlciB0byBoZWFyIG5vciBzZWUgYW55IGRpdmluZSBzZXJ2aWNlIHdoaWxlIHRoZXkgd2VyZSBvY2N1cGllZCB3aXRoIG90aGVyIG1hdHRlcnMgYW5kIHRoZXJlZm9yZSB1bmFibGUgdG8gcGF5IGF0dGVudGlvbi4gVGhleSBzaG91bGQgcmF0aGVyIGJlIGZyZWUgZnJvbSBhbGwgZGlzdHJhY3Rpb25zIGFuZCBkZXZvdGUgdGhlaXIgdGhvdWdodHMgdG8gdGhlIHJlbGlnaW91cyBjZXJlbW9ueSBhcyBhIG1hdHRlciBvZiB0aGUgaGlnaGVzdCBpbXBvcnRhbmNlLiBUaGV5IHNob3VsZCBhbHNvIHJpZCB0aGVpciBzdHJlZXRzIG9mIG5vaXNlIGFuZCBjbGF0dGVyIGFuZCBjbGFtb3VyLCBhbmQgYWxsIHN1Y2ggYWNjb21wYW5pbWVudHMgb2YgbWVuaWFsIGFuZCBtYW51YWwgbGFib3VyLCBhbmQgY2xlYXIgdGhlbSBmb3IgdGhlIHNhY3JlZCBjZXJlbW9uaWVzLiBBbmQgdGhlIFJvbWFucyBzdGlsbCBwcmVzZXJ2ZSBzb21lIHRyYWNlcyBvZiB0aGlzIGVhcmxpZXIgZmVlbGluZy4gV2hlbiBhIG1hZ2lzdHJhdGUgaXMgYnVzeSB0YWtpbmcgYXVzcGljZXMgb3Igc2FjcmlmaWNpbmcsIHRoZSBwZW9wbGUgY3J5IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG9jIGFnZSw8L3E+IHdoaWNoIG1lYW5zIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxlbXBoPk1pbmQgdGhpcyw8L2VtcGg+CiAgICAgICAgICAgIDwvcT4gYW5kIGhlbHBzIHRvIG1ha2UgdGhlIGJ5c3RhbmRlcnMgYXR0ZW50aXZlIGFuZCBvcmRlcmx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgTnVtYSBoYWQgdGh1cyBlc3RhYmxpc2hlZCBhbmQgcmVndWxhdGVkIHRoZSBwcmllc3RseSBvcmRlcnMsIGhlIGJ1aWx0LCBuZWFyIHRoZSB0ZW1wbGUgb2YgVmVzdGEsIHRoZSBzby1jYWxsZWQgUmVnaWEsIG9yIHJveWFsIGhvdXNlLiBIZXJlIGhlIHBhc3NlZCBtb3N0IG9mIGhpcyB0aW1lLCBwZXJmb3JtaW5nIHNhY3JlZCBmdW5jdGlvbnMsIG9yIHRlYWNoaW5nIHRoZSBwcmllc3RzLCBvciBlbmdhZ2VkIGluIHRoZSBxdWlldCBjb250ZW1wbGF0aW9uIG9mIGRpdmluZSB0aGluZ3MuIEhlIGFsc28gaGFkIGFub3RoZXIgaG91c2Ugb24gdGhlIFF1aXJpbmFsIGhpbGwsIHRoZSBzaXRlIG9mIHdoaWNoIGlzIHN0aWxsIHBvaW50ZWQgb3V0LiBBdCBhbGwgcHVibGljIGFuZCBzb2xlbW4gcHJvY2Vzc2lvbnMgb2YgdGhlIHByaWVzdHMsIGhlcmFsZHMgd2VyZSBzZW50IG9uIGJlZm9yZSB0aHJvdWdoIHRoZSBjaXR5LCBiaWRkaW5nIHRoZSBwZW9wbGUgbWFrZSBob2xpZGF5LCBhbmQgcHV0dGluZyBhIHN0b3AgdG8gYWxsIGxhYm91ci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciwganVzdCBhcyBpdCBpcyBzYWlkIHRoYXQgdGhlIFB5dGhhZ29yZWFucyBkbyBub3QgYWxsb3cgbWVuIHRvIHdvcnNoaXAgYW5kIHByYXkgdG8gdGhlaXIgZ29kcyBjdXJzb3JpbHkgYW5kIGJ5IHRoZSB3YXksIGJ1dCB3b3VsZCBoYXZlIHRoZW0gZ28gZnJvbSB0aGVpciBob21lcyBkaXJlY3RseSB0byB0aGlzIG9mZmljZSwgd2l0aCB0aGVpciBtaW5kcyBwcmVwYXJlZCBmb3IgaXQsIHNvIE51bWEgdGhvdWdodCB0aGF0IGhpcyBjaXRpemVucyBvdWdodCBuZWl0aGVyIHRvIGhlYXIgbm9yIHNlZSBhbnkgZGl2aW5lIHNlcnZpY2Ugd2hpbGUgdGhleSB3ZXJlIG9jY3VwaWVkIHdpdGggb3RoZXIgbWF0dGVycyBhbmQgdGhlcmVmb3JlIHVuYWJsZSB0byBwYXkgYXR0ZW50aW9uLiBUaGV5IHNob3VsZCByYXRoZXIgYmUgZnJlZSBmcm9tIGFsbCBkaXN0cmFjdGlvbnMgYW5kIGRldm90ZSB0aGVpciB0aG91Z2h0cyB0byB0aGUgcmVsaWdpb3VzIGNlcmVtb255IGFzIGEgbWF0dGVyIG9mIHRoZSBoaWdoZXN0IGltcG9ydGFuY2UuIFRoZXkgc2hvdWxkIGFsc28gcmlkIHRoZWlyIHN0cmVldHMgb2Ygbm9pc2UgYW5kIGNsYXR0ZXIgYW5kIGNsYW1vdXIsIGFuZCBhbGwgc3VjaCBhY2NvbXBhbmltZW50cyBvZiBtZW5pYWwgYW5kIG1hbnVhbCBsYWJvdXIsIGFuZCBjbGVhciB0aGVtIGZvciB0aGUgc2FjcmVkIGNlcmVtb25pZXMuIEFuZCB0aGUgUm9tYW5zIHN0aWxsIHByZXNlcnZlIHNvbWUgdHJhY2VzIG9mIHRoaXMgZWFybGllciBmZWVsaW5nLiBXaGVuIGEgbWFnaXN0cmF0ZSBpcyBidXN5IHRha2luZyBhdXNwaWNlcyBvciBzYWNyaWZpY2luZywgdGhlIHBlb3BsZSBjcnkgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvYyBhZ2UsPC9xPiB3aGljaCBtZWFucyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWluZCB0aGlzLDwvZW1waD4KICAgICAgICAgICAgPC9xPiBhbmQgaGVscHMgdG8gbWFrZSB0aGUgYnlzdGFuZGVycyBhdHRlbnRpdmUgYW5kIG9yZGVybHkuCgkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWluZCB0aGlzLDwvZW1waD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBvZiBoaXMgb3RoZXIgcHJlY2VwdHMgYWxzbyByZXNlbWJsZWQgdGhvc2Ugb2YgdGhlIFB5dGhhZ29yZWFucy4gRm9yIGluc3RhbmNlLCB0aGUgUHl0aGFnb3JlYW5zIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3QgdXNlIGEgcXVhcnQtbWVhc3VyZSBhcyBhIHNlYXQ8L3E+OyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbid0IHBva2UgdGhlIGZpcmUgd2l0aCBhIHN3b3JkPC9xPjsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIHlvdSBzZXQgb3V0IGZvciBmb3JlaWduIHBhcnRzLCBkb24ndCB0dXJuIGJhY2s8L3E+OyBhbmQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyB0aGUgY2VsZXN0aWFsIGdvZHMgc2FjcmlmaWNlIGFuIG9kZCBudW1iZXIsIGJ1dCBhbiBldmVuIG51bWJlciB0byB0aGUgdGVycmVzdHJpYWw8L3E+OyBhbmQgdGhlIG1lYW5pbmcgb2YgYWxsIHRoZXNlIHByZWNlcHRzIHRoZXkgd291bGQga2VlcCBoaWRkZW4gZnJvbSB0aGUgdnVsZ2FyLiBTbyBpbiBzb21lIG9mIE51bWEncyBydWxlcyB0aGUgbWVhbmluZyBpcyBoaWRkZW47IGFzLCBmb3IgaW5zdGFuY2UsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3Qgb2ZmZXIgdG8gdGhlIGdvZHMgd2luZSBmcm9tIHVucHJ1bmVkIHZpbmVzPC9xPiA7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3QgbWFrZSBhIHNhY3JpZmljZSB3aXRob3V0IG1lYWw8L3E+OyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlR1cm4gcm91bmQgYXMgeW91IHdvcnNoaXA8L3E+OyBhbmQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TaXQgZG93biBhZnRlciB3b3JzaGlwLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgdHdvIHJ1bGVzIHdvdWxkIHNlZW0gdG8gdGVhY2ggdGhhdCB0aGUgc3ViamVjdGlvbiBvZiB0aGUgZWFydGggaXMgYSBwYXJ0IG9mIHJlbGlnaW9uOyBhbmQgdGhlIHdvcnNoaXBwZXJzJyB0dXJuaW5nIHJvdW5kIGlzIHNhaWQgdG8gYmUgYW4gaW1pdGF0aW9uIG9mIHRoZSByb3RhcnkgbW90aW9uIG9mIHRoZSB1bml2ZXJzZTsgYnV0IEkgd291bGQgcmF0aGVyIHRoaW5rIHRoYXQgdGhlIHdvcnNoaXBwZXIgd2hvIGVudGVycyBhIHRlbXBsZSwgc2luY2UgdGVtcGxlcyBmYWNlIHRoZSBlYXN0IGFuZCB0aGUgU3VuLCBoYXMgaGlzIGJhY2sgdG93YXJkcyB0aGUgc3VucmlzZSwgYW5kIHRoZXJlZm9yZSB0dXJucyBoaW1zZWxmIGhhbGYgcm91bmQgaW4gdGhhdCBkaXJlY3Rpb24sIGFuZCB0aGVuIHdoZWVscyBmdWxseSByb3VuZCB0byBmYWNlIHRoZSBnb2Qgb2YgdGhlIHRlbXBsZSwgdGh1cyBtYWtpbmcgYSBjb21wbGV0ZSBjaXJjbGUsIGFuZCBsaW5raW5nIHRoZSBmdWxmaWxtZW50IG9mIGhpcyBwcmF5ZXIgd2l0aCBib3RoIGRlaXRpZXM7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnVubGVzcywgaW5kZWVkLCB0aGlzIGNoYW5nZSBvZiBwb3N0dXJlLCBsaWtlIHRoZSBBZWd5cHRpYW4gd2hlZWxzLCBkYXJrbHkgaGludHMgYW5kIHRlYWNoZXMgdGhhdCB0aGVyZSBpcyBubyBzdGFiaWxpdHkgaW4gaHVtYW4gYWZmYWlycywgYnV0IHRoYXQgd2UgbXVzdCBhY2NlcHQgY29udGVudGVkbHkgd2hhdGV2ZXIgdHdpc3RzIGFuZCB0dXJucyBvdXIgbGl2ZXMgbWF5IHJlY2VpdmUgZnJvbSB0aGUgRGVpdHkuIEFuZCBhcyBmb3IgdGhlIHNpdHRpbmcgZG93biBhZnRlciB3b3JzaGlwLCB3ZSBhcmUgdG9sZCB0aGF0IGl0IGlzIGFuIGF1Z3VyeSBvZiB0aGUgYWNjZXB0YW5jZSBvZiB0aGUgd29yc2hpcHBlcidzIHByYXllcnMgYW5kIHRoZSBkdXJhdGlvbiBvZiBoaXMgYmxlc3NpbmdzLiBXZSBhcmUgYWxzbyB0b2xkLCB0aGF0LCBhcyBkaWZmZXJlbnQgYWN0cyBhcmUgc2VwYXJhdGVkIGJ5IGFuIGludGVydmFsIG9mIHJlc3QsIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoZSB3b3JzaGlwcGVyLCBoYXZpbmcgY29tcGxldGVkIG9uZSBhY3QsIHNpdHMgZG93biBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGdvZHMsIGluIG9yZGVyIHRoYXQgaGUgbWF5IGJlZ2luIGFub3RoZXIgd2l0aCB0aGVpciBibGVzc2luZy4gQnV0IHRoaXMsIHRvbywgY2FuIGJlIGJyb3VnaHQgaW50byBhZ3JlZW1lbnQgd2l0aCB3aGF0IHdhcyBzYWlkIGFib3ZlOiB0aGUgbGF3Z2l2ZXIgaXMgdHJ5aW5nIHRvIGFjY3VzdG9tIHVzIG5vdCB0byBtYWtlIG91ciBwZXRpdGlvbnMgdG8gdGhlIERlaXR5IHdoZW4gd2UgYXJlIGJ1c2llZCB3aXRoIG90aGVyIG1hdHRlcnMgYW5kIGluIGEgaHVycnksIGFzIGl0IHdlcmUsIGJ1dCB3aGVuIHdlIGhhdmUgdGltZSBhbmQgYXJlIGF0IGxlaXN1cmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgb2YgaGlzIG90aGVyIHByZWNlcHRzIGFsc28gcmVzZW1ibGVkIHRob3NlIG9mIHRoZSBQeXRoYWdvcmVhbnMuIEZvciBpbnN0YW5jZSwgdGhlIFB5dGhhZ29yZWFucyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3QgdXNlIGEgcXVhcnQtbWVhc3VyZSBhcyBhIHNlYXQ8L3E+OyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9uJ3QgcG9rZSB0aGUgZmlyZSB3aXRoIGEgc3dvcmQ8L3E+OyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiB5b3Ugc2V0IG91dCBmb3IgZm9yZWlnbiBwYXJ0cywgZG9uJ3QgdHVybiBiYWNrPC9xPjsgYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyB0aGUgY2VsZXN0aWFsIGdvZHMgc2FjcmlmaWNlIGFuIG9kZCBudW1iZXIsIGJ1dCBhbiBldmVuIG51bWJlciB0byB0aGUgdGVycmVzdHJpYWw8L3E+OyBhbmQgdGhlIG1lYW5pbmcgb2YgYWxsIHRoZXNlIHByZWNlcHRzIHRoZXkgd291bGQga2VlcCBoaWRkZW4gZnJvbSB0aGUgdnVsZ2FyLiBTbyBpbiBzb21lIG9mIE51bWEncyBydWxlcyB0aGUgbWVhbmluZyBpcyBoaWRkZW47IGFzLCBmb3IgaW5zdGFuY2UsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb24ndCBvZmZlciB0byB0aGUgZ29kcyB3aW5lIGZyb20gdW5wcnVuZWQgdmluZXM8L3E+IDsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvbid0IG1ha2UgYSBzYWNyaWZpY2Ugd2l0aG91dCBtZWFsPC9xPjsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlR1cm4gcm91bmQgYXMgeW91IHdvcnNoaXA8L3E+OyBhbmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNpdCBkb3duIGFmdGVyIHdvcnNoaXAuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCB0d28gcnVsZXMgd291bGQgc2VlbSB0byB0ZWFjaCB0aGF0IHRoZSBzdWJqZWN0aW9uIG9mIHRoZSBlYXJ0aCBpcyBhIHBhcnQgb2YgcmVsaWdpb247IGFuZCB0aGUgd29yc2hpcHBlcnMnIHR1cm5pbmcgcm91bmQgaXMgc2FpZCB0byBiZSBhbiBpbWl0YXRpb24gb2YgdGhlIHJvdGFyeSBtb3Rpb24gb2YgdGhlIHVuaXZlcnNlOyBidXQgSSB3b3VsZCByYXRoZXIgdGhpbmsgdGhhdCB0aGUgd29yc2hpcHBlciB3aG8gZW50ZXJzIGEgdGVtcGxlLCBzaW5jZSB0ZW1wbGVzIGZhY2UgdGhlIGVhc3QgYW5kIHRoZSBTdW4sIGhhcyBoaXMgYmFjayB0b3dhcmRzIHRoZSBzdW5yaXNlLCBhbmQgdGhlcmVmb3JlIHR1cm5zIGhpbXNlbGYgaGFsZiByb3VuZCBpbiB0aGF0IGRpcmVjdGlvbiwgYW5kIHRoZW4gd2hlZWxzIGZ1bGx5IHJvdW5kIHRvIGZhY2UgdGhlIGdvZCBvZiB0aGUgdGVtcGxlLCB0aHVzIG1ha2luZyBhIGNvbXBsZXRlIGNpcmNsZSwgYW5kIGxpbmtpbmcgdGhlIGZ1bGZpbG1lbnQgb2YgaGlzIHByYXllciB3aXRoIGJvdGggZGVpdGllczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnVubGVzcywgaW5kZWVkLCB0aGlzIGNoYW5nZSBvZiBwb3N0dXJlLCBsaWtlIHRoZSBBZWd5cHRpYW4gd2hlZWxzLCBkYXJrbHkgaGludHMgYW5kIHRlYWNoZXMgdGhhdCB0aGVyZSBpcyBubyBzdGFiaWxpdHkgaW4gaHVtYW4gYWZmYWlycywgYnV0IHRoYXQgd2UgbXVzdCBhY2NlcHQgY29udGVudGVkbHkgd2hhdGV2ZXIgdHdpc3RzIGFuZCB0dXJucyBvdXIgbGl2ZXMgbWF5IHJlY2VpdmUgZnJvbSB0aGUgRGVpdHkuIEFuZCBhcyBmb3IgdGhlIHNpdHRpbmcgZG93biBhZnRlciB3b3JzaGlwLCB3ZSBhcmUgdG9sZCB0aGF0IGl0IGlzIGFuIGF1Z3VyeSBvZiB0aGUgYWNjZXB0YW5jZSBvZiB0aGUgd29yc2hpcHBlcidzIHByYXllcnMgYW5kIHRoZSBkdXJhdGlvbiBvZiBoaXMgYmxlc3NpbmdzLiBXZSBhcmUgYWxzbyB0b2xkLCB0aGF0LCBhcyBkaWZmZXJlbnQgYWN0cyBhcmUgc2VwYXJhdGVkIGJ5IGFuIGludGVydmFsIG9mIHJlc3QsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoZSB3b3JzaGlwcGVyLCBoYXZpbmcgY29tcGxldGVkIG9uZSBhY3QsIHNpdHMgZG93biBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGdvZHMsIGluIG9yZGVyIHRoYXQgaGUgbWF5IGJlZ2luIGFub3RoZXIgd2l0aCB0aGVpciBibGVzc2luZy4gQnV0IHRoaXMsIHRvbywgY2FuIGJlIGJyb3VnaHQgaW50byBhZ3JlZW1lbnQgd2l0aCB3aGF0IHdhcyBzYWlkIGFib3ZlOiB0aGUgbGF3Z2l2ZXIgaXMgdHJ5aW5nIHRvIGFjY3VzdG9tIHVzIG5vdCB0byBtYWtlIG91ciBwZXRpdGlvbnMgdG8gdGhlIERlaXR5IHdoZW4gd2UgYXJlIGJ1c2llZCB3aXRoIG90aGVyIG1hdHRlcnMgYW5kIGluIGEgaHVycnksIGFzIGl0IHdlcmUsIGJ1dCB3aGVuIHdlIGhhdmUgdGltZSBhbmQgYXJlIGF0IGxlaXN1cmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHN1Y2ggdHJhaW5pbmcgYW5kIHNjaG9vbGluZyBpbiByZWxpZ2lvdXMgbWF0dGVycyB0aGUgY2l0eSBiZWNhbWUgc28gdHJhY3RhYmxlLCBhbmQgc3Rvb2QgaW4gc3VjaCBhd2Ugb2YgTnVtYSdzIHBvd2VyLCB0aGF0IHRoZXkgYWNjZXB0ZWQgaGlzIHN0b3JpZXMsIHRob3VnaCBmYWJ1bG91c2x5IHN0cmFuZ2UsIGFuZCB0aG91Z2h0IG5vdGhpbmcgaW5jcmVkaWJsZSBvciBpbXBvc3NpYmxlIHdoaWNoIGhlIHdpc2hlZCB0aGVtIHRvIGJlbGlldmUgb3IgZG8uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB0aGUgc3RvcnkgZ29lcyB0aGF0IGhlIG9uY2UgaW52aXRlZCBhIGxhcmdlIG51bWJlciBvZiB0aGUgY2l0aXplbnMgdG8gaGlzIHRhYmxlLCBhbmQgc2V0IGJlZm9yZSB0aGVtIG1lYW4gZGlzaGVzIGFuZCBhIHZlcnkgc2ltcGxlIHJlcGFzdDsgYnV0IGp1c3QgYXMgdGhleSBiZWdhbiB0byBlYXQsIGhlIHN1cnByaXNlZCB0aGVtIGJ5IHNheWluZyB0aGF0IHRoZSBnb2RkZXNzIHdpdGggd2hvbSBoZSBjb25zb3J0ZWQgd2FzIGNvbWUgdG8gdmlzaXQgaGltLCBhbmQgbG8sIG9uIGEgc3VkZGVuLCB0aGUgcm9vbSB3YXMgZnVsbCBvZiBjb3N0bHkgYmVha2VycyBhbmQgdGhlIHRhYmxlcyB3ZXJlIGxhZGVuIHdpdGggYWxsIHNvcnRzIG9mIG1lYXRzIGFuZCBhYnVuZGFudCBmdXJuaXR1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3RoaW5nIGNhbiBiZSBzbyBzdHJhbmdlIGFzIHdoYXQgaXMgdG9sZCBhYm91dCBoaXMgY29udmVyc2F0aW9uIHdpdGggSnVwaXRlci4gV2hlbiB0aGUgQXZlbnRpbmUgaGlsbOKAlHNvIHJ1bnMgdGhlIHRhbGXigJR3YXMgbm90IHlldCBhIHBhcnQgb2YgdGhlIGNpdHkgbm9yIGV2ZW4gaW5oYWJpdGVkLCBidXQgYWJvdW5kZWQgaW4gc3ByaW5ncyBhbmQgc2hhZHkgZGVsbHMsIHR3byBkZW1pLWdvZHMsIFBpY3VzIGFuZCBGYXVudXMsIG1hZGUgaXQgdGhlaXIgaGF1bnQuIEluIG90aGVyIHdheXMgdGhlc2UgZGl2aW5pdGllcyBtaWdodCBiZSBsaWtlbmVkIHRvIFNhdHlycyBvciBQYW5zLCBidXQgdGhleSBhcmUgc2FpZCB0byBoYXZlIHVzZWQgcG93ZXJmdWwgZHJ1Z3MgYW5kIHByYWN0aXNlZCBjbGV2ZXIgaW5jYW50YXRpb25zLCBhbmQgdG8gaGF2ZSB0cmF2ZXJzZWQgSXRhbHkgcGxheWluZyB0aGUgc2FtZSB0cmlja3MgYXMgdGhlIHNvLWNhbGxlZCBJZGFlYW4gRGFjdHlsaTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZhYnVsb3VzIGdub21lcyBhc3NvY2lhdGVkIHdpdGggdGhlIE1vdW50IElkYSBvZiBQaHJ5Z2lhIGFuZCBDcmV0ZS48L25vdGU+IG9mIHRoZSBHcmVla3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGRlbWktZ29kcyBOdW1hIGlzIHNhaWQgdG8gaGF2ZSBjYXVnaHQsIGJ5IG1peGluZyB3aW5lIGFuZCBob25leSB3aXRoIHRoZSB3YXRlciBvZiB0aGUgc3ByaW5nIGZyb20gd2hpY2ggdGhleSB3ZXJlIHdvbnQgdG8gZHJpbmsuIFdoZW4gY2FwdHVyZWQsIHRoZXkgZHJvcHBlZCB0aGVpciBvd24gZm9ybXMgYW5kIGFzc3VtZWQgbWFueSBkaWZmZXJlbnQgc2hhcGVzLCBwcmVzZW50aW5nIGhpZGVvdXMgYW5kIGRyZWFkZnVsIGFwcGVhcmFuY2VzLiBCdXQgd2hlbiB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZXkgd2VyZSBmYXN0IGNhdWdodCBhbmQgY291bGQgbm90IGVzY2FwZSwgdGhleSBmb3JldG9sZCB0byBOdW1hIG1hbnkgdGhpbmdzIHRoYXQgd291bGQgY29tZSB0byBwYXNzLCBhbmQgdGF1Z2h0IGhpbSBiZXNpZGVzIHRoZSBjaGFybSBhZ2FpbnN0IHRodW5kZXIgYW5kIGxpZ2h0bmluZywgd2hpY2ggaXMgc3RpbGwgcHJhY3Rpc2VkIHdpdGggb25pb25zLCBoYWlyLCBhbmQgc3ByYXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lLCBob3dldmVyLCBzYXkgdGhhdCBpdCB3YXMgbm90IHRoZSBpbXBzIHRoZW1zZWx2ZXMgd2hvIGltcGFydGVkIHRoZSBjaGFybSwgYnV0IHRoYXQgdGhleSBjYWxsZWQgSnVwaXRlciBkb3duIGZyb20gaGVhdmVuIGJ5IHRoZWlyIG1hZ2ljLCBhbmQgdGhhdCB0aGlzIGRlaXR5IGFuZ3JpbHkgdG9sZCBOdW1hIHRoYXQgaGUgbXVzdCBjaGFybSB0aHVuZGVyIGFuZCBsaWdodG5pbmcgd2l0aCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhlYWRzLjwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9mIG9uaW9ucz88L3E+IGFza2VkIE51bWEsIGZpbGxpbmcgb3V0IHRoZSBwaHJhc2UuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T2YgbWVuLDwvcT4gc2FpZCBKdXBpdGVyLiBUaGVyZXVwb24gTnVtYSwgdHJ5aW5nIG9uY2UgbW9yZSB0byBhdmVydCB0aGUgaG9ycm9yIG9mIHRoZSBwcmVzY3JpcHRpb24sIGFza2VkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndpdGggaGFpcj88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksPC9xPiBhbnN3ZXJlZCBKdXBpdGVyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndpdGggbGl2aW5n4oCUPC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c3ByYXRzPzwvcT4gYWRkZWQgTnVtYSwgYXMgaGUgaGFkIGJlZW4gdGF1Z2h0IGJ5IEVnZXJpYSB0byBzYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGdvZCByZXR1cm5lZCB0byBoZWF2ZW4gaW4gYSA8ZW1waD5ncmFjaW91czwvZW1waD4gbW9vZCzigJQKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhpbGVvcyw8L3E+IGFzIHRoZSBHcmVla3Mgc2F5LOKAlGFuZCB0aGUgcGxhY2Ugd2FzIGNhbGxlZCBJbGljaXVtIGZyb20gdGhpcyBjaXJjdW1zdGFuY2U7IGFuZCB0aGF0IGlzIHRoZSB3YXkgdGhlIGNoYXJtIHdhcyBwZXJmZWN0ZWQuIFRoZXNlIHN0b3JpZXMsIGZhYnVsb3VzIGFuZCByaWRpY3Vsb3VzIGFzIHRoZXkgYXJlLCBzaG93IHVzIHRoZSBhdHRpdHVkZSB3aGljaCB0aGUgbWVuIG9mIHRoYXQgdGltZSwgZnJvbSBmb3JjZSBvZiBjdXN0b20sIHRvb2sgdG93YXJkcyB0aGUgZ29kcy4gQW5kIE51bWEgaGltc2VsZiwgYXMgdGhleSBzYXksIGhhZCBzdWNoIGltcGxpY2l0IGNvbmZpZGVuY2UgaW4gdGhlIGdvZHMsIHRoYXQgb25jZSwgd2hlbiBhIG1lc3NhZ2Ugd2FzIGJyb3VnaHQgdG8gaGltIHRoYXQgZW5lbWllcyB3ZXJlIGNvbWluZyB1cCBhZ2FpbnN0IHRoZSBjaXR5LCBoZSBzbWlsZWQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgYW0gc2FjcmlmaWNpbmcuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Qnkgc3VjaCB0cmFpbmluZyBhbmQgc2Nob29saW5nIGluIHJlbGlnaW91cyBtYXR0ZXJzIHRoZSBjaXR5IGJlY2FtZSBzbyB0cmFjdGFibGUsIGFuZCBzdG9vZCBpbiBzdWNoIGF3ZSBvZiBOdW1hJ3MgcG93ZXIsIHRoYXQgdGhleSBhY2NlcHRlZCBoaXMgc3RvcmllcywgdGhvdWdoIGZhYnVsb3VzbHkgc3RyYW5nZSwgYW5kIHRob3VnaHQgbm90aGluZyBpbmNyZWRpYmxlIG9yIGltcG9zc2libGUgd2hpY2ggaGUgd2lzaGVkIHRoZW0gdG8gYmVsaWV2ZSBvciBkby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB0aGUgc3RvcnkgZ29lcyB0aGF0IGhlIG9uY2UgaW52aXRlZCBhIGxhcmdlIG51bWJlciBvZiB0aGUgY2l0aXplbnMgdG8gaGlzIHRhYmxlLCBhbmQgc2V0IGJlZm9yZSB0aGVtIG1lYW4gZGlzaGVzIGFuZCBhIHZlcnkgc2ltcGxlIHJlcGFzdDsgYnV0IGp1c3QgYXMgdGhleSBiZWdhbiB0byBlYXQsIGhlIHN1cnByaXNlZCB0aGVtIGJ5IHNheWluZyB0aGF0IHRoZSBnb2RkZXNzIHdpdGggd2hvbSBoZSBjb25zb3J0ZWQgd2FzIGNvbWUgdG8gdmlzaXQgaGltLCBhbmQgbG8sIG9uIGEgc3VkZGVuLCB0aGUgcm9vbSB3YXMgZnVsbCBvZiBjb3N0bHkgYmVha2VycyBhbmQgdGhlIHRhYmxlcyB3ZXJlIGxhZGVuIHdpdGggYWxsIHNvcnRzIG9mIG1lYXRzIGFuZCBhYnVuZGFudCBmdXJuaXR1cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3RoaW5nIGNhbiBiZSBzbyBzdHJhbmdlIGFzIHdoYXQgaXMgdG9sZCBhYm91dCBoaXMgY29udmVyc2F0aW9uIHdpdGggSnVwaXRlci4gV2hlbiB0aGUgQXZlbnRpbmUgaGlsbOKAlHNvIHJ1bnMgdGhlIHRhbGXigJR3YXMgbm90IHlldCBhIHBhcnQgb2YgdGhlIGNpdHkgbm9yIGV2ZW4gaW5oYWJpdGVkLCBidXQgYWJvdW5kZWQgaW4gc3ByaW5ncyBhbmQgc2hhZHkgZGVsbHMsIHR3byBkZW1pLWdvZHMsIFBpY3VzIGFuZCBGYXVudXMsIG1hZGUgaXQgdGhlaXIgaGF1bnQuIEluIG90aGVyIHdheXMgdGhlc2UgZGl2aW5pdGllcyBtaWdodCBiZSBsaWtlbmVkIHRvIFNhdHlycyBvciBQYW5zLCBidXQgdGhleSBhcmUgc2FpZCB0byBoYXZlIHVzZWQgcG93ZXJmdWwgZHJ1Z3MgYW5kIHByYWN0aXNlZCBjbGV2ZXIgaW5jYW50YXRpb25zLCBhbmQgdG8gaGF2ZSB0cmF2ZXJzZWQgSXRhbHkgcGxheWluZyB0aGUgc2FtZSB0cmlja3MgYXMgdGhlIHNvLWNhbGxlZCBJZGFlYW4gRGFjdHlsaTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RmFidWxvdXMgZ25vbWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgTW91bnQgSWRhIG9mIFBocnlnaWEgYW5kIENyZXRlLjwvbm90ZT4gb2YgdGhlIEdyZWVrcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGRlbWktZ29kcyBOdW1hIGlzIHNhaWQgdG8gaGF2ZSBjYXVnaHQsIGJ5IG1peGluZyB3aW5lIGFuZCBob25leSB3aXRoIHRoZSB3YXRlciBvZiB0aGUgc3ByaW5nIGZyb20gd2hpY2ggdGhleSB3ZXJlIHdvbnQgdG8gZHJpbmsuIFdoZW4gY2FwdHVyZWQsIHRoZXkgZHJvcHBlZCB0aGVpciBvd24gZm9ybXMgYW5kIGFzc3VtZWQgbWFueSBkaWZmZXJlbnQgc2hhcGVzLCBwcmVzZW50aW5nIGhpZGVvdXMgYW5kIGRyZWFkZnVsIGFwcGVhcmFuY2VzLiBCdXQgd2hlbiB0aGV5IHBlcmNlaXZlZCB0aGF0IHRoZXkgd2VyZSBmYXN0IGNhdWdodCBhbmQgY291bGQgbm90IGVzY2FwZSwgdGhleSBmb3JldG9sZCB0byBOdW1hIG1hbnkgdGhpbmdzIHRoYXQgd291bGQgY29tZSB0byBwYXNzLCBhbmQgdGF1Z2h0IGhpbSBiZXNpZGVzIHRoZSBjaGFybSBhZ2FpbnN0IHRodW5kZXIgYW5kIGxpZ2h0bmluZywgd2hpY2ggaXMgc3RpbGwgcHJhY3Rpc2VkIHdpdGggb25pb25zLCBoYWlyLCBhbmQgc3ByYXRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGl0IHdhcyBub3QgdGhlIGltcHMgdGhlbXNlbHZlcyB3aG8gaW1wYXJ0ZWQgdGhlIGNoYXJtLCBidXQgdGhhdCB0aGV5IGNhbGxlZCBKdXBpdGVyIGRvd24gZnJvbSBoZWF2ZW4gYnkgdGhlaXIgbWFnaWMsIGFuZCB0aGF0IHRoaXMgZGVpdHkgYW5ncmlseSB0b2xkIE51bWEgdGhhdCBoZSBtdXN0IGNoYXJtIHRodW5kZXIgYW5kIGxpZ2h0bmluZyB3aXRoIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oZWFkcy48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9mIG9uaW9ucz88L3E+IGFza2VkIE51bWEsIGZpbGxpbmcgb3V0IHRoZSBwaHJhc2UuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PZiBtZW4sPC9xPiBzYWlkIEp1cGl0ZXIuIFRoZXJldXBvbiBOdW1hLCB0cnlpbmcgb25jZSBtb3JlIHRvIGF2ZXJ0IHRoZSBob3Jyb3Igb2YgdGhlIHByZXNjcmlwdGlvbiwgYXNrZWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aXRoIGhhaXI/PC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksPC9xPiBhbnN3ZXJlZCBKdXBpdGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2l0aCBsaXZpbmfigJQ8L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNwcmF0cz88L3E+IGFkZGVkIE51bWEsIGFzIGhlIGhhZCBiZWVuIHRhdWdodCBieSBFZ2VyaWEgdG8gc2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGdvZCByZXR1cm5lZCB0byBoZWF2ZW4gaW4gYSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmdyYWNpb3VzPC9lbXBoPiBtb29kLOKAlAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oaWxlb3MsPC9xPiBhcyB0aGUgR3JlZWtzIHNheSzigJRhbmQgdGhlIHBsYWNlIHdhcyBjYWxsZWQgSWxpY2l1bSBmcm9tIHRoaXMgY2lyY3Vtc3RhbmNlOyBhbmQgdGhhdCBpcyB0aGUgd2F5IHRoZSBjaGFybSB3YXMgcGVyZmVjdGVkLiBUaGVzZSBzdG9yaWVzLCBmYWJ1bG91cyBhbmQgcmlkaWN1bG91cyBhcyB0aGV5IGFyZSwgc2hvdyB1cyB0aGUgYXR0aXR1ZGUgd2hpY2ggdGhlIG1lbiBvZiB0aGF0IHRpbWUsIGZyb20gZm9yY2Ugb2YgY3VzdG9tLCB0b29rIHRvd2FyZHMgdGhlIGdvZHMuIEFuZCBOdW1hIGhpbXNlbGYsIGFzIHRoZXkgc2F5LCBoYWQgc3VjaCBpbXBsaWNpdCBjb25maWRlbmNlIGluIHRoZSBnb2RzLCB0aGF0IG9uY2UsIHdoZW4gYSBtZXNzYWdlIHdhcyBicm91Z2h0IHRvIGhpbSB0aGF0IGVuZW1pZXMgd2VyZSBjb21pbmcgdXAgYWdhaW5zdCB0aGUgY2l0eSwgaGUgc21pbGVkIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgYW0gc2FjcmlmaWNpbmcuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYWxzbyB0aGUgZmlyc3QsIHRoZXkgc2F5LCB0byBidWlsZCB0ZW1wbGVzIHRvIEZhaXRoIGFuZCBUZXJtaW51czsgYW5kIGhlIHRhdWdodCB0aGUgUm9tYW5zIHRoZWlyIG1vc3Qgc29sZW1uIG9hdGggYnkgRmFpdGgsIHdoaWNoIHRoZXkgc3RpbGwgY29udGludWUgdG8gdXNlLiBUZXJtaW51cyBzaWduaWZpZXMgPGVtcGg+Ym91bmRhcnk8L2VtcGg+LCBhbmQgdG8gdGhpcyBnb2QgdGhleSBtYWtlIHB1YmxpYyBhbmQgcHJpdmF0ZSBzYWNyaWZpY2VzIHdoZXJlIHRoZWlyIGZpZWxkcyBhcmUgc2V0IG9mZiBieSBib3VuZGFyaWVzOyBvZiBsaXZpbmcgdmljdGltcyBub3dhZGF5cywgYnV0IGFuY2llbnRseSB0aGUgc2FjcmlmaWNlIHdhcyBhIGJsb29kbGVzcyBvbmUsIHNpbmNlIE51bWEgcmVhc29uZWQgdGhhdCB0aGUgZ29kIG9mIGJvdW5kYXJpZXMgd2FzIGEgZ3VhcmRpYW4gb2YgcGVhY2UgYW5kIGEgd2l0bmVzcyBvZiBqdXN0IGRlYWxpbmcsIGFuZCBzaG91bGQgdGhlcmVmb3JlIGJlIGNsZWFyIGZyb20gc2xhdWdodGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgcXVpdGUgYXBwYXJlbnQgdGhhdCBpdCB3YXMgdGhpcyBraW5nIHdobyBzZXQgYm91bmRzIHRvIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIGNpdHksIGZvciBSb211bHVzIHdhcyB1bndpbGxpbmcgdG8gYWNrbm93bGVkZ2UsIGJ5IG1lYXN1cmluZyBvZmYgaGlzIG93biwgaG93IG11Y2ggaGUgaGFkIHRha2VuIGF3YXkgZnJvbSBvdGhlcnMuIEhlIGtuZXcgdGhhdCBhIGJvdW5kYXJ5LCBpZiBvYnNlcnZlZCwgZmV0dGVycyBsYXdsZXNzIHBvd2VyOyBhbmQgaWYgbm90IG9ic2VydmVkLCBjb252aWN0cyBvZiBpbmp1c3RpY2UuIEFuZCBpbmRlZWQgdGhlIGNpdHkncyB0ZXJyaXRvcnkgd2FzIG5vdCBleHRlbnNpdmUgYXQgZmlyc3QsIGJ1dCBSb211bHVzIGFjcXVpcmVkIG1vc3Qgb2YgaXQgbGF0ZXIgd2l0aCB0aGUgc3BlYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIHdhcyBkaXN0cmlidXRlZCBieSBOdW1hIGFtb25nIHRoZSBpbmRpZ2VudCBjaXRpemVucy4gSGUgd2lzaGVkIHRvIHJlbW92ZSB0aGUgZGVzdGl0dXRpb24gd2hpY2ggZHJpdmVzIG1lbiB0byB3cm9uZ2RvaW5nLCBhbmQgdG8gdHVybiB0aGUgcGVvcGxlIHRvIGFncmljdWx0dXJlLCB0aGF0IHRoZXkgbWlnaHQgYmUgc3ViZHVlZCBhbmQgc29mdGVuZWQgYWxvbmcgd2l0aCB0aGUgc29pbCB0aGV5IHRpbGxlZC4gRm9yIHRoZXJlIGlzIG5vIG90aGVyIG9jY3VwYXRpb24gd2hpY2ggcHJvZHVjZXMgc28ga2VlbiBhbmQgcXVpY2sgYSByZWxpc2ggZm9yIHBlYWNlIGFzIHRoYXQgb2YgYSBmYXJtZXIncyBsaWZlLCB3aGVyZSBzbyBtdWNoIG9mIHRoZSB3YXJyaW9yJ3MgZGFyaW5nIGFzIHByb21wdHMgYSBtYW4gdG8gZmlnaHQgZm9yIGhpcyBvd24sIGlzIGFsd2F5cyBwcmVzZXJ2ZWQsIHdoaWxlIHRoZSB3YXJyaW9yJ3MgbGljZW5jZSB0byBpbmR1bGdlIGluIHJhcGFjaXR5IGFuZCBpbmp1c3RpY2UgaXMgZXh0aXJwYXRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TnVtYSwgdGhlcmVmb3JlLCBhZG1pbmlzdGVyaW5nIGFncmljdWx0dXJlIHRvIGhpcyBjaXRpemVucyBhcyBhIHNvcnQgb2YgcGVhY2UtcG90aW9uLCBhbmQgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGFydCBhcyBmb3N0ZXJpbmcgY2hhcmFjdGVyIHJhdGhlciB0aGFuIHdlYWx0aCwgZGl2aWRlZCB0aGUgY2l0eSdzIHRlcnJpdG9yeSBpbnRvIGRpc3RyaWN0cywgdG8gd2hpY2ggaGUgZ2F2ZSB0aGUgbmFtZSBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBhZ2ksPC9xPiBhbmQgaW4gZWFjaCBvZiB0aGVtIGhlIHNldCBvdmVyc2VlcnMgYW5kIHBhdHJvbHMuIEJ1dCBzb21ldGltZXMgaGUgd291bGQgaW5zcGVjdCB0aGVtIGluIHBlcnNvbiwgYW5kIGp1ZGdpbmcgb2YgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIGNpdGl6ZW5zIGZyb20gdGhlIGNvbmRpdGlvbiBvZiB0aGVpciBmYXJtcywgd291bGQgYWR2YW5jZSBzb21lIHRvIHBvc2l0aW9ucyBvZiBob25vdXIgYW5kIHRydXN0OyB3aGlsZSBvdGhlcnMsIHdobyB3ZXJlIGluZG9sZW50IGFuZCBjYXJlbGVzcywgaGUgd291bGQgY2hpZGUgYW5kIHJlcHJvYWNoLCBhbmQgc28gdHJ5IHRvIG1ha2UgdGhlbSBzZW5zaWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGFsc28gdGhlIGZpcnN0LCB0aGV5IHNheSwgdG8gYnVpbGQgdGVtcGxlcyB0byBGYWl0aCBhbmQgVGVybWludXM7IGFuZCBoZSB0YXVnaHQgdGhlIFJvbWFucyB0aGVpciBtb3N0IHNvbGVtbiBvYXRoIGJ5IEZhaXRoLCB3aGljaCB0aGV5IHN0aWxsIGNvbnRpbnVlIHRvIHVzZS4gVGVybWludXMgc2lnbmlmaWVzIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Ym91bmRhcnk8L2VtcGg+LCBhbmQgdG8gdGhpcyBnb2QgdGhleSBtYWtlIHB1YmxpYyBhbmQgcHJpdmF0ZSBzYWNyaWZpY2VzIHdoZXJlIHRoZWlyIGZpZWxkcyBhcmUgc2V0IG9mZiBieSBib3VuZGFyaWVzOyBvZiBsaXZpbmcgdmljdGltcyBub3dhZGF5cywgYnV0IGFuY2llbnRseSB0aGUgc2FjcmlmaWNlIHdhcyBhIGJsb29kbGVzcyBvbmUsIHNpbmNlIE51bWEgcmVhc29uZWQgdGhhdCB0aGUgZ29kIG9mIGJvdW5kYXJpZXMgd2FzIGEgZ3VhcmRpYW4gb2YgcGVhY2UgYW5kIGEgd2l0bmVzcyBvZiBqdXN0IGRlYWxpbmcsIGFuZCBzaG91bGQgdGhlcmVmb3JlIGJlIGNsZWFyIGZyb20gc2xhdWdodGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBxdWl0ZSBhcHBhcmVudCB0aGF0IGl0IHdhcyB0aGlzIGtpbmcgd2hvIHNldCBib3VuZHMgdG8gdGhlIHRlcnJpdG9yeSBvZiB0aGUgY2l0eSwgZm9yIFJvbXVsdXMgd2FzIHVud2lsbGluZyB0byBhY2tub3dsZWRnZSwgYnkgbWVhc3VyaW5nIG9mZiBoaXMgb3duLCBob3cgbXVjaCBoZSBoYWQgdGFrZW4gYXdheSBmcm9tIG90aGVycy4gSGUga25ldyB0aGF0IGEgYm91bmRhcnksIGlmIG9ic2VydmVkLCBmZXR0ZXJzIGxhd2xlc3MgcG93ZXI7IGFuZCBpZiBub3Qgb2JzZXJ2ZWQsIGNvbnZpY3RzIG9mIGluanVzdGljZS4gQW5kIGluZGVlZCB0aGUgY2l0eSdzIHRlcnJpdG9yeSB3YXMgbm90IGV4dGVuc2l2ZSBhdCBmaXJzdCwgYnV0IFJvbXVsdXMgYWNxdWlyZWQgbW9zdCBvZiBpdCBsYXRlciB3aXRoIHRoZSBzcGVhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIHdhcyBkaXN0cmlidXRlZCBieSBOdW1hIGFtb25nIHRoZSBpbmRpZ2VudCBjaXRpemVucy4gSGUgd2lzaGVkIHRvIHJlbW92ZSB0aGUgZGVzdGl0dXRpb24gd2hpY2ggZHJpdmVzIG1lbiB0byB3cm9uZ2RvaW5nLCBhbmQgdG8gdHVybiB0aGUgcGVvcGxlIHRvIGFncmljdWx0dXJlLCB0aGF0IHRoZXkgbWlnaHQgYmUgc3ViZHVlZCBhbmQgc29mdGVuZWQgYWxvbmcgd2l0aCB0aGUgc29pbCB0aGV5IHRpbGxlZC4gRm9yIHRoZXJlIGlzIG5vIG90aGVyIG9jY3VwYXRpb24gd2hpY2ggcHJvZHVjZXMgc28ga2VlbiBhbmQgcXVpY2sgYSByZWxpc2ggZm9yIHBlYWNlIGFzIHRoYXQgb2YgYSBmYXJtZXIncyBsaWZlLCB3aGVyZSBzbyBtdWNoIG9mIHRoZSB3YXJyaW9yJ3MgZGFyaW5nIGFzIHByb21wdHMgYSBtYW4gdG8gZmlnaHQgZm9yIGhpcyBvd24sIGlzIGFsd2F5cyBwcmVzZXJ2ZWQsIHdoaWxlIHRoZSB3YXJyaW9yJ3MgbGljZW5jZSB0byBpbmR1bGdlIGluIHJhcGFjaXR5IGFuZCBpbmp1c3RpY2UgaXMgZXh0aXJwYXRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk51bWEsIHRoZXJlZm9yZSwgYWRtaW5pc3RlcmluZyBhZ3JpY3VsdHVyZSB0byBoaXMgY2l0aXplbnMgYXMgYSBzb3J0IG9mIHBlYWNlLXBvdGlvbiwgYW5kIHdlbGwgcGxlYXNlZCB3aXRoIHRoZSBhcnQgYXMgZm9zdGVyaW5nIGNoYXJhY3RlciByYXRoZXIgdGhhbiB3ZWFsdGgsIGRpdmlkZWQgdGhlIGNpdHkncyB0ZXJyaXRvcnkgaW50byBkaXN0cmljdHMsIHRvIHdoaWNoIGhlIGdhdmUgdGhlIG5hbWUgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBhZ2ksPC9xPiBhbmQgaW4gZWFjaCBvZiB0aGVtIGhlIHNldCBvdmVyc2VlcnMgYW5kIHBhdHJvbHMuIEJ1dCBzb21ldGltZXMgaGUgd291bGQgaW5zcGVjdCB0aGVtIGluIHBlcnNvbiwgYW5kIGp1ZGdpbmcgb2YgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIGNpdGl6ZW5zIGZyb20gdGhlIGNvbmRpdGlvbiBvZiB0aGVpciBmYXJtcywgd291bGQgYWR2YW5jZSBzb21lIHRvIHBvc2l0aW9ucyBvZiBob25vdXIgYW5kIHRydXN0OyB3aGlsZSBvdGhlcnMsIHdobyB3ZXJlIGluZG9sZW50IGFuZCBjYXJlbGVzcywgaGUgd291bGQgY2hpZGUgYW5kIHJlcHJvYWNoLCBhbmQgc28gdHJ5IHRvIG1ha2UgdGhlbSBzZW5zaWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIGFsbCBoaXMgbWVhc3VyZXMsIHRoZSBvbmUgbW9zdCBhZG1pcmVkIHdhcyBoaXMgZGlzdHJpYnV0aW9uIG9mIHRoZSBwZW9wbGUgaW50byBncm91cHMgYWNjb3JkaW5nIHRvIHRoZWlyIHRyYWRlcyBvciBhcnRzLiBGb3IgdGhlIGNpdHkgd2FzIHN1cHBvc2VkIHRvIGNvbnNpc3Qgb2YgdHdvIHRyaWJlcywgYXMgaGFzIGJlZW4gc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMi40IiB2YWxpZD0ieWVzIj5DaGFwdGVyIGlpLiA0IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFsdGhvdWdoIGl0IGhhZCBubyBjb25zaXN0ZW5jeSwgYnV0IHdhcyByYXRoZXIgZGl2aWRlZCBpbnRvIHR3byB0cmliZXMsIGFuZCB1dHRlcmx5IHJlZnVzZWQgdG8gYmVjb21lIHVuaXRlZCwgb3IgdG8gYmxvdCBvdXQgaXRzIGRpdmVyc2l0aWVzIGFuZCBkaWZmZXJlbmNlcy4gT24gdGhlIGNvbnRyYXJ5LCBpdCB3YXMgZmlsbGVkIHdpdGggY2Vhc2VsZXNzIGNvbGxpc2lvbnMgYW5kIGNvbnRlbnRpb25zIGJldHdlZW4gaXRzIGNvbXBvbmVudCBwYXJ0cy4gTnVtYSwgdGhlcmVmb3JlLCBhd2FyZSB0aGF0IGhhcmQgc3Vic3RhbmNlcyB3aGljaCB3aWxsIG5vdCByZWFkaWx5IG1pbmdsZSBtYXkgYmUgY3J1c2hlZCBhbmQgcHVsdmVyaXplZCwgYW5kIHRoZW4gbW9yZSBlYXNpbHkgbWl4IGFuZCBtaW5nbGUgd2l0aCBlYWNoIG90aGVyLW93aW5nIHRvIHRoZSBzbWFsbG5lc3Mgb2YgdGhlaXIgcGFydGljbGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5kZXRlcm1pbmVkIHRvIGRpdmlkZSB0aGUgZW50aXJlIGJvZHkgb2YgdGhlIHBlb3BsZSBpbnRvIGEgZ3JlYXRlciBudW1iZXIgb2YgZGl2aXNpb25zLCBhbmQgc28sIGJ5IG1lcmdpbmcgaXQgaW4gb3RoZXIgZGlzdGluY3Rpb25zLCB0byBvYmxpdGVyYXRlIHRoZSBvcmlnaW5hbCBhbmQgZ3JlYXQgZGlzdGluY3Rpb24sIHdoaWNoIHdvdWxkIGJlIGxvc3QgYW1vbmcgdGhlIGxlc3NlciBvbmVzLiBIZSBkaXN0cmlidXRlZCB0aGVtLCBhY2NvcmRpbmdseSwgYnkgYXJ0cyBhbmQgdHJhZGVzLCBpbnRvIG11c2ljaWFucywgZ29sZHNtaXRocywgY2FycGVudGVycywgZHllcnMsIGxlYXRoZXJ3b3JrZXJzLCBjdXJyaWVycywgYnJhemllcnMsIGFuZCBwb3R0ZXJzLiBUaGUgcmVtYWluaW5nIHRyYWRlcyBoZSBncm91cGVkIHRvZ2V0aGVyLCBhbmQgbWFkZSBvbmUgYm9keSBvdXQgb2YgYWxsIHdobyBiZWxvbmdlZCB0byB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIGFwcG9pbnRlZCBzb2NpYWwgZ2F0aGVyaW5ncyBhbmQgcHVibGljIGFzc2VtYmxpZXMgYW5kIHJpdGVzIG9mIHdvcnNoaXAgYmVmaXR0aW5nIGVhY2ggYm9keS4gQW5kIHRodXMsIGF0IGxhc3QsIGhlIGJhbmlzaGVkIGZyb20gdGhlIGNpdHkgdGhlIHByYWN0aWNlIG9mIHNwZWFraW5nIGFuZCB0aGlua2luZyBvZiBzb21lIGNpdGl6ZW5zIGFzIFNhYmluZXMsIGFuZCBvZiBvdGhlcnMgYXMgUm9tYW5zOyBvciBvZiBzb21lIGFzIHN1YmplY3RzIG9mIFRhdGl1cywgYW5kIG90aGVycyBvZiBSb211bHVzLCBzbyB0aGF0IGhpcyBkaXZpc2lvbiByZXN1bHRlZCBpbiBhIGhhcm1vbmlvdXMgYmxlbmRpbmcgb2YgdGhlbSBhbGwgdG9nZXRoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIGFsbCBoaXMgbWVhc3VyZXMsIHRoZSBvbmUgbW9zdCBhZG1pcmVkIHdhcyBoaXMgZGlzdHJpYnV0aW9uIG9mIHRoZSBwZW9wbGUgaW50byBncm91cHMgYWNjb3JkaW5nIHRvIHRoZWlyIHRyYWRlcyBvciBhcnRzLiBGb3IgdGhlIGNpdHkgd2FzIHN1cHBvc2VkIHRvIGNvbnNpc3Qgb2YgdHdvIHRyaWJlcywgYXMgaGFzIGJlZW4gc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIuNCIgdmFsaWQ9InllcyI+Q2hhcHRlciBpaS4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbHRob3VnaCBpdCBoYWQgbm8gY29uc2lzdGVuY3ksIGJ1dCB3YXMgcmF0aGVyIGRpdmlkZWQgaW50byB0d28gdHJpYmVzLCBhbmQgdXR0ZXJseSByZWZ1c2VkIHRvIGJlY29tZSB1bml0ZWQsIG9yIHRvIGJsb3Qgb3V0IGl0cyBkaXZlcnNpdGllcyBhbmQgZGlmZmVyZW5jZXMuIE9uIHRoZSBjb250cmFyeSwgaXQgd2FzIGZpbGxlZCB3aXRoIGNlYXNlbGVzcyBjb2xsaXNpb25zIGFuZCBjb250ZW50aW9ucyBiZXR3ZWVuIGl0cyBjb21wb25lbnQgcGFydHMuIE51bWEsIHRoZXJlZm9yZSwgYXdhcmUgdGhhdCBoYXJkIHN1YnN0YW5jZXMgd2hpY2ggd2lsbCBub3QgcmVhZGlseSBtaW5nbGUgbWF5IGJlIGNydXNoZWQgYW5kIHB1bHZlcml6ZWQsIGFuZCB0aGVuIG1vcmUgZWFzaWx5IG1peCBhbmQgbWluZ2xlIHdpdGggZWFjaCBvdGhlci1vd2luZyB0byB0aGUgc21hbGxuZXNzIG9mIHRoZWlyIHBhcnRpY2xlcywgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIuNCIgdmFsaWQ9InllcyI+Q2hhcHRlciBpaS4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmRldGVybWluZWQgdG8gZGl2aWRlIHRoZSBlbnRpcmUgYm9keSBvZiB0aGUgcGVvcGxlIGludG8gYSBncmVhdGVyIG51bWJlciBvZiBkaXZpc2lvbnMsIGFuZCBzbywgYnkgbWVyZ2luZyBpdCBpbiBvdGhlciBkaXN0aW5jdGlvbnMsIHRvIG9ibGl0ZXJhdGUgdGhlIG9yaWdpbmFsIGFuZCBncmVhdCBkaXN0aW5jdGlvbiwgd2hpY2ggd291bGQgYmUgbG9zdCBhbW9uZyB0aGUgbGVzc2VyIG9uZXMuIEhlIGRpc3RyaWJ1dGVkIHRoZW0sIGFjY29yZGluZ2x5LCBieSBhcnRzIGFuZCB0cmFkZXMsIGludG8gbXVzaWNpYW5zLCBnb2xkc21pdGhzLCBjYXJwZW50ZXJzLCBkeWVycywgbGVhdGhlcndvcmtlcnMsIGN1cnJpZXJzLCBicmF6aWVycywgYW5kIHBvdHRlcnMuIFRoZSByZW1haW5pbmcgdHJhZGVzIGhlIGdyb3VwZWQgdG9nZXRoZXIsIGFuZCBtYWRlIG9uZSBib2R5IG91dCBvZiBhbGwgd2hvIGJlbG9uZ2VkIHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gYXBwb2ludGVkIHNvY2lhbCBnYXRoZXJpbmdzIGFuZCBwdWJsaWMgYXNzZW1ibGllcyBhbmQgcml0ZXMgb2Ygd29yc2hpcCBiZWZpdHRpbmcgZWFjaCBib2R5LiBBbmQgdGh1cywgYXQgbGFzdCwgaGUgYmFuaXNoZWQgZnJvbSB0aGUgY2l0eSB0aGUgcHJhY3RpY2Ugb2Ygc3BlYWtpbmcgYW5kIHRoaW5raW5nIG9mIHNvbWUgY2l0aXplbnMgYXMgU2FiaW5lcywgYW5kIG9mIG90aGVycyBhcyBSb21hbnM7IG9yIG9mIHNvbWUgYXMgc3ViamVjdHMgb2YgVGF0aXVzLCBhbmQgb3RoZXJzIG9mIFJvbXVsdXMsIHNvIHRoYXQgaGlzIGRpdmlzaW9uIHJlc3VsdGVkIGluIGEgaGFybW9uaW91cyBibGVuZGluZyBvZiB0aGVtIGFsbCB0b2dldGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+UHJhaXNlIGlzIGFsc28gZ2l2ZW4gdG8gdGhhdCBtZWFzdXJlIG9mIGhpcyB3aGVyZWJ5IHRoZSBsYXcgcGVybWl0dGluZyBmYXRoZXJzIHRvIHNlbGwgdGhlaXIgc29ucyB3YXMgYW1lbmRlZC4gSGUgbWFkZSBhbiBleGNlcHRpb24gb2YgbWFycmllZCBzb25zLCBwcm92aWRlZCB0aGV5IGhhZCBtYXJyaWVkIHdpdGggdGhlIGNvbnNlbnQgYW5kIGFwcHJvdmFsIG9mIHRoZWlyIGZhdGhlcnMuIEZvciBoZSB0aG91Z2h0IGl0IGEgaGFyZCB0aGluZyB0aGF0IGEgd29tYW4gd2hvIGhhZCBtYXJyaWVkIGEgbWFuIHdob20gc2hlIHRob3VnaHQgZnJlZSwgc2hvdWxkIGZpbmQgaGVyc2VsZiBsaXZpbmcgd2l0aCBhIHNsYXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByYWlzZSBpcyBhbHNvIGdpdmVuIHRvIHRoYXQgbWVhc3VyZSBvZiBoaXMgd2hlcmVieSB0aGUgbGF3IHBlcm1pdHRpbmcgZmF0aGVycyB0byBzZWxsIHRoZWlyIHNvbnMgd2FzIGFtZW5kZWQuIEhlIG1hZGUgYW4gZXhjZXB0aW9uIG9mIG1hcnJpZWQgc29ucywgcHJvdmlkZWQgdGhleSBoYWQgbWFycmllZCB3aXRoIHRoZSBjb25zZW50IGFuZCBhcHByb3ZhbCBvZiB0aGVpciBmYXRoZXJzLiBGb3IgaGUgdGhvdWdodCBpdCBhIGhhcmQgdGhpbmcgdGhhdCBhIHdvbWFuIHdobyBoYWQgbWFycmllZCBhIG1hbiB3aG9tIHNoZSB0aG91Z2h0IGZyZWUsIHNob3VsZCBmaW5kIGhlcnNlbGYgbGl2aW5nIHdpdGggYSBzbGF2ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYXBwbGllZCBoaW1zZWxmLCBhbHNvLCB0byB0aGUgYWRqdXN0bWVudCBvZiB0aGUgY2FsZW5kYXIsIG5vdCB3aXRoIGV4YWN0bmVzcywgYW5kIHlldCBub3QgYWx0b2dldGhlciB3aXRob3V0IGNhcmVmdWwgb2JzZXJ2YXRpb24uIEZvciBkdXJpbmcgdGhlIHJlaWduIG9mIFJvbXVsdXMsIHRoZXkgaGFkIGJlZW4gaXJyYXRpb25hbCBhbmQgaXJyZWd1bGFyIGluIHRoZWlyIGZpeGluZyBvZiB0aGUgbW9udGhzLCByZWNrb25pbmcgc29tZSBhdCBsZXNzIHRoYW4gdHdlbnR5IGRheXMsIHNvbWUgYXQgdGhpcnR5LWZpdmUsIGFuZCBzb21lIGF0IG1vcmU7IHRoZXkgaGFkIG5vIGlkZWEgb2YgdGhlIGluZXF1YWxpdHkgaW4gdGhlIGFubnVhbCBtb3Rpb25zIG9mIHRoZSBzdW4gYW5kIG1vb24sIGJ1dCBoZWxkIHRvIHRoaXMgcHJpbmNpcGxlIG9ubHksIHRoYXQgdGhlIHllYXIgc2hvdWxkIGNvbnNpc3Qgb2YgdGhyZWUgaHVuZHJlZCBhbmQgc2l4dHkgZGF5cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE51bWEsIGVzdGltYXRpbmcgdGhlIGV4dGVudCBvZiB0aGUgaW5lcXVhbGl0eSBhdCBlbGV2ZW4gZGF5cywgc2luY2UgdGhlIGx1bmFyIHllYXIgaGFkIHRocmVlIGh1bmRyZWQgYW5kIGZpZnR5LWZvdXIgZGF5cywgYnV0IHRoZSBzb2xhciB5ZWFyIHRocmVlIGh1bmRyZWQgYW5kIHNpeHR5LWZpdmUsIGRvdWJsZWQgdGhlc2UgZWxldmVuIGRheXMsIGFuZCBldmVyeSBvdGhlciB5ZWFyIGluc2VydGVkIGFmdGVyIHRoZSBtb250aCBvZiBGZWJydWFyeSB0aGUgaW50ZXJjYWxhcnkgbW9udGggY2FsbGVkIE1lcmNlZGludXMgYnkgdGhlIFJvbWFucywgd2hpY2ggY29uc2lzdGVkIG9mIHR3ZW50eS10d28gZGF5cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjb3JyZWN0aW9uIG9mIHRoZSBpbmVxdWFsaXR5IHdoaWNoIGhlIG1hZGUgd2FzIGRlc3RpbmVkIHRvIHJlcXVpcmUgb3RoZXIgYW5kIGdyZWF0ZXIgY29ycmVjdGlvbnMgaW4gdGhlIGZ1dHVyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYXBwbGllZCBoaW1zZWxmLCBhbHNvLCB0byB0aGUgYWRqdXN0bWVudCBvZiB0aGUgY2FsZW5kYXIsIG5vdCB3aXRoIGV4YWN0bmVzcywgYW5kIHlldCBub3QgYWx0b2dldGhlciB3aXRob3V0IGNhcmVmdWwgb2JzZXJ2YXRpb24uIEZvciBkdXJpbmcgdGhlIHJlaWduIG9mIFJvbXVsdXMsIHRoZXkgaGFkIGJlZW4gaXJyYXRpb25hbCBhbmQgaXJyZWd1bGFyIGluIHRoZWlyIGZpeGluZyBvZiB0aGUgbW9udGhzLCByZWNrb25pbmcgc29tZSBhdCBsZXNzIHRoYW4gdHdlbnR5IGRheXMsIHNvbWUgYXQgdGhpcnR5LWZpdmUsIGFuZCBzb21lIGF0IG1vcmU7IHRoZXkgaGFkIG5vIGlkZWEgb2YgdGhlIGluZXF1YWxpdHkgaW4gdGhlIGFubnVhbCBtb3Rpb25zIG9mIHRoZSBzdW4gYW5kIG1vb24sIGJ1dCBoZWxkIHRvIHRoaXMgcHJpbmNpcGxlIG9ubHksIHRoYXQgdGhlIHllYXIgc2hvdWxkIGNvbnNpc3Qgb2YgdGhyZWUgaHVuZHJlZCBhbmQgc2l4dHkgZGF5cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOdW1hLCBlc3RpbWF0aW5nIHRoZSBleHRlbnQgb2YgdGhlIGluZXF1YWxpdHkgYXQgZWxldmVuIGRheXMsIHNpbmNlIHRoZSBsdW5hciB5ZWFyIGhhZCB0aHJlZSBodW5kcmVkIGFuZCBmaWZ0eS1mb3VyIGRheXMsIGJ1dCB0aGUgc29sYXIgeWVhciB0aHJlZSBodW5kcmVkIGFuZCBzaXh0eS1maXZlLCBkb3VibGVkIHRoZXNlIGVsZXZlbiBkYXlzLCBhbmQgZXZlcnkgb3RoZXIgeWVhciBpbnNlcnRlZCBhZnRlciB0aGUgbW9udGggb2YgRmVicnVhcnkgdGhlIGludGVyY2FsYXJ5IG1vbnRoIGNhbGxlZCBNZXJjZWRpbnVzIGJ5IHRoZSBSb21hbnMsIHdoaWNoIGNvbnNpc3RlZCBvZiB0d2VudHktdHdvIGRheXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY29ycmVjdGlvbiBvZiB0aGUgaW5lcXVhbGl0eSB3aGljaCBoZSBtYWRlIHdhcyBkZXN0aW5lZCB0byByZXF1aXJlIG90aGVyIGFuZCBncmVhdGVyIGNvcnJlY3Rpb25zIGluIHRoZSBmdXR1cmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgYWxzbyBjaGFuZ2VkIHRoZSBvcmRlciBvZiB0aGUgbW9udGhzLiBNYXJjaCwgd2hpY2ggaGFkIGJlZW4gZmlyc3QsIGhlIG1hZGUgdGhlIHRoaXJkIG1vbnRoLCBhbmQgSmFudWFyeSwgd2hpY2ggaGFkIGJlZW4gdGhlIGVsZXZlbnRoIHVuZGVyIFJvbXVsdXMsIGhlIG1hZGUgdGhlIGZpcnN0IG1vbnRoOyBGZWJydWFyeSwgd2hpY2ggaGFkIGJlZW4gdHdlbGZ0aCBhbmQgbGFzdCwgdGh1cyBiZWNhbWUgdGhlIHNlY29uZCBtb250aCwgYXMgbm93LiBCdXQgdGhlcmUgYXJlIG1hbnkgd2hvIHNheSB0aGF0IHRoZXNlIG1vbnRocyBvZiBKYW51YXJ5IGFuZCBGZWJydWFyeSB3ZXJlIGFkZGVkIHRvIHRoZSBjYWxlbmRhciBieSBOdW1hLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGF0IHRoZSBvdXRzZXQgdGhlIFJvbWFucyBoYWQgb25seSB0ZW4gbW9udGhzIGluIHRoZWlyIHllYXIsIGFzIHNvbWUgQmFyYmFyaWFucyBoYXZlIHRocmVlLCBhbmQgYXMsIGFtb25nIHRoZSBHcmVla3MsIHRoZSBBcmNhZGlhbnMgaGF2ZSBmb3VyLCBhbmQgdGhlIEFjYXJuYW5pYW5zIHNpeDsgdGhlIEFlZ3lwdGlhbiB5ZWFyIGhhZCBhdCBmaXJzdCBvbmx5IGEgc2luZ2xlIG1vbnRoIGluIGl0LCBhZnRlcndhcmRzIGZvdXIsIGFzIHdlIGFyZSB0b2xkLiBBbmQgdGhlcmVmb3JlLCB0aG91Z2ggdGhleSBpbmhhYml0IGEgdmVyeSByZWNlbnQgY291bnRyeSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZXJoYXBzIGFzIGZvcm1lZCBieSB0aGUgZGVwb3NpdHMgb2YgdGhlIE5pbGUgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDIuNSIgdmFsaWQ9InllcyI+SGVyb2QuIGlpLiA1PC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gMi45IiB2YWxpZD0ieWVzIj45PC9iaWJsPikuPC9ub3RlPiB0aGV5IGhhdmUgdGhlIGNyZWRpdCBvZiBiZWluZyBhIHZlcnkgYW5jaWVudCBwZW9wbGUsIGFuZCBsb2FkIHRoZWlyIGdlbmVhbG9naWVzIHdpdGggYSBwcm9kaWdpb3VzIG51bWJlciBvZiB5ZWFycywgc2luY2UgdGhleSByZWFsbHkgY291bnQgdGhlaXIgbW9udGhzIGFzIHNvIG1hbnkgeWVhcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGF0IHRoZSBvdXRzZXQgdGhlIFJvbWFucyBoYWQgb25seSB0ZW4gbW9udGhzIGluIHRoZWlyIHllYXIsIGFzIHNvbWUgQmFyYmFyaWFucyBoYXZlIHRocmVlLCBhbmQgYXMsIGFtb25nIHRoZSBHcmVla3MsIHRoZSBBcmNhZGlhbnMgaGF2ZSBmb3VyLCBhbmQgdGhlIEFjYXJuYW5pYW5zIHNpeDsgdGhlIEFlZ3lwdGlhbiB5ZWFyIGhhZCBhdCBmaXJzdCBvbmx5IGEgc2luZ2xlIG1vbnRoIGluIGl0LCBhZnRlcndhcmRzIGZvdXIsIGFzIHdlIGFyZSB0b2xkLiBBbmQgdGhlcmVmb3JlLCB0aG91Z2ggdGhleSBpbmhhYml0IGEgdmVyeSByZWNlbnQgY291bnRyeSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBlcmhhcHMgYXMgZm9ybWVkIGJ5IHRoZSBkZXBvc2l0cyBvZiB0aGUgTmlsZSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiAyLjUiIHZhbGlkPSJ5ZXMiPkhlcm9kLiBpaS4gNTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMi45IiB2YWxpZD0ieWVzIj45PC9iaWJsPikuPC9ub3RlPiB0aGV5IGhhdmUgdGhlIGNyZWRpdCBvZiBiZWluZyBhIHZlcnkgYW5jaWVudCBwZW9wbGUsIGFuZCBsb2FkIHRoZWlyIGdlbmVhbG9naWVzIHdpdGggYSBwcm9kaWdpb3VzIG51bWJlciBvZiB5ZWFycywgc2luY2UgdGhleSByZWFsbHkgY291bnQgdGhlaXIgbW9udGhzIGFzIHNvIG1hbnkgeWVhcnMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMi41IiB2YWxpZD0ieWVzIj5IZXJvZC4gaWkuIDU8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDIuOSIgdmFsaWQ9InllcyI+OTwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgdGhlIFJvbWFucyBoYWQgYXQgZmlyc3Qgb25seSB0ZW4gbW9udGhzIGluIHRoZWlyIHllYXIsIGFuZCBub3QgdHdlbHZlLCBpcyBwcm92ZWQgYnkgdGhlIG5hbWUgb2YgdGhlaXIgbGFzdCBtb250aDsgZm9yIHRoZXkgc3RpbGwgY2FsbCBpdCBEZWNlbWJlciwgb3IgdGhlIHRlbnRoIG1vbnRoLiBBbmQgdGhhdCBNYXJjaCB1c2VkIHRvIGJlIHRoZWlyIGZpcnN0IG1vbnRoLCBpcyBwcm92ZWQgYnkgdGhlIHNlcXVlbmNlIG9mIG1vbnRocyBhZnRlciBpdDsgZm9yIHRoZSBmaWZ0aCBtb250aCBhZnRlciBpdCB1c2VkIHRvIGJlIGNhbGxlZCBRdWludGlsaXMsIHRoZSBzaXh0aCBTZXh0aWxpcywgYW5kIHNvIG9uIHdpdGggdGhlIHJlc3QuIFRoZXJlZm9yZSwgd2hlbiB0aGV5IHBsYWNlZCBKYW51YXJ5IGFuZCBGZWJydWFyeSBiZWZvcmUgTWFyY2gsIHRoZXkgd2VyZSBndWlsdHkgb2YgbmFtaW5nIHRoZSBhYm92ZS1tZW50aW9uZWQgbW9udGggUXVpbnRpbGlzLCBvciBmaWZ0aCwgYnV0IGNvdW50aW5nIGl0IHNldmVudGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzLCBpdCB3YXMgcmVhc29uYWJsZSB0aGF0IE1hcmNoLCB3aGljaCBpcyBjb25zZWNyYXRlIHRvIE1hcnMsIHNob3VsZCBiZSBwdXQgaW4gdGhlIGZpcnN0IHBsYWNlIGJ5IFJvbXVsdXMsIGFuZCBBcHJpbCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBzaW5jZSB0aGlzIG1vbnRoIGlzIG5hbWVkIGFmdGVyIEFwaHJvZGl0ZS4gSW4gaXQgdGhleSBzYWNyaWZpY2VkIHRvIHRoaXMgZ29kZGVzcywgYW5kIG9uIGl0cyBmaXJzdCBkYXkgdGhlIHdvbWVuIGJhdGhlIHdpdGggbXlydGxlIGdhcmxhbmRzIG9uIHRoZWlyIGhlYWRzLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCBBcHJpbCwgd2l0aCBpdHMgc21vb3RoIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cCw8L3E+IGNhbm5vdCBiZSBkZXJpdmVkIGZyb20gQXBocm9kaXRlLCB3aXRoIGl0cyByb3VnaCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBoLDwvcT4gYnV0IHRoYXQgdGhpcyBtb250aCBvZiBoaWdoIHNwcmluZyB0aW1lIGlzIGNhbGxlZCBBcHJpbCBiZWNhdXNlIGl0IDxlbXBoPm9wZW5zPC9lbXBoPiBhbmQgZGlzY2xvc2VzIHRoZSBidWRzIGFuZCBzaG9vdHMgaW4gdmVnZXRhdGlvbiwgdGhpcyBiZWluZyB0aGUgbWVhbmluZyBvZiB0aGUgd29yZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFwZXJpby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG5leHQgbW9udGggaW4gb3JkZXIgaXMgY2FsbGVkIE1heSwgZnJvbSBNYWlhLCB0aGUgbW90aGVyIG9mIE1lcmN1cnksIHRvIHdob20gaXQgaXMgc2FjcmVkOyBhbmQgSnVuZSBpcyBzbyBuYW1lZCBmcm9tIEp1bm8uIFRoZXJlIGFyZSBzb21lLCBob3dldmVyLCB3aG8gc2F5IHRoYXQgdGhlc2UgbW9udGhzIGdldCB0aGVpciBuYW1lIGZyb20gYW4gYWdlLCBvbGRlciBhbmQgeW91bmdlcjsgZm9yIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFqb3JlczwvcT4gaXMgdGhlaXIgbmFtZSBmb3IgdGhlIDxlbXBoPmVsZGVyPC9lbXBoPiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5qdW5pb3JlczwvcT4gZm9yIHRoZSA8ZW1waD55b3VuZ2VyPC9lbXBoPiBtZW4uIEVhY2ggb2YgdGhlIHJlbWFpbmluZyBtb250aHMgdGhleSBuYW1lZCBmcm9tIGl0cyBhcml0aG1ldGljYWwgcG9zaXRpb24gaW4gdGhlIGxpc3QsIHRoZSBmaWZ0aCBRdWludGlsaXMsIHRoZSBzaXh0aCBTZXh0aWxpcywgYW5kIHNvIG9uIHdpdGggU2VwdGVtYmVyLCBPY3RvYmVyLCBOb3ZlbWJlciwgYW5kIERlY2VtYmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzIHRoZSBmaWZ0aCBtb250aCB3YXMgbmFtZWQgSnVsaXVzLCBmcm9tIEp1bGl1cyBDYWVzYXIsIHRoZSBjb25xdWVyb3Igb2YgUG9tcGV5OyBhbmQgdGhlIHNpeHRoIG1vbnRoIEF1Z3VzdHVzLCBmcm9tIHRoZSBzZWNvbmQgQ2Flc2FyLCB3aG8gd2FzIGdpdmVuIHRoYXQgdGl0bGUuIFRoZSBzZXZlbnRoIGFuZCBlaWdodGggbW9udGhzIGJvcmUgZm9yIGEgc2hvcnQgdGltZSB0aGUgbmFtZXMgR2VybWFuaWN1cyBhbmQgRG9taXRpYW51cywgd2hpY2ggdGhlIGVtcGVyb3IgRG9taXRpYW4gZ2F2ZSB0aGVtOyBidXQgd2hlbiBoZSB3YXMgc2xhaW4sIHRoZXkgcmVzdW1lZCB0aGVpciBvbGQgbmFtZXMgb2YgU2VwdGVtYmVyIGFuZCBPY3RvYmVyLiBPbmx5IHRoZSBsYXN0IHR3byBtb250aHMsIE5vdmVtYmVyIGFuZCBEZWNlbWJlciwgcHJlc2VydmVkIHRoZSBuYW1lcyBkZXJpdmVkIGZyb20gdGhlaXIgcG9zaXRpb24gaW4gdGhlIGxpc3QganVzdCBhcyB0aGV5IHdlcmUgYXQgdGhlIG91dHNldC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB0aGUgUm9tYW5zIGhhZCBhdCBmaXJzdCBvbmx5IHRlbiBtb250aHMgaW4gdGhlaXIgeWVhciwgYW5kIG5vdCB0d2VsdmUsIGlzIHByb3ZlZCBieSB0aGUgbmFtZSBvZiB0aGVpciBsYXN0IG1vbnRoOyBmb3IgdGhleSBzdGlsbCBjYWxsIGl0IERlY2VtYmVyLCBvciB0aGUgdGVudGggbW9udGguIEFuZCB0aGF0IE1hcmNoIHVzZWQgdG8gYmUgdGhlaXIgZmlyc3QgbW9udGgsIGlzIHByb3ZlZCBieSB0aGUgc2VxdWVuY2Ugb2YgbW9udGhzIGFmdGVyIGl0OyBmb3IgdGhlIGZpZnRoIG1vbnRoIGFmdGVyIGl0IHVzZWQgdG8gYmUgY2FsbGVkIFF1aW50aWxpcywgdGhlIHNpeHRoIFNleHRpbGlzLCBhbmQgc28gb24gd2l0aCB0aGUgcmVzdC4gVGhlcmVmb3JlLCB3aGVuIHRoZXkgcGxhY2VkIEphbnVhcnkgYW5kIEZlYnJ1YXJ5IGJlZm9yZSBNYXJjaCwgdGhleSB3ZXJlIGd1aWx0eSBvZiBuYW1pbmcgdGhlIGFib3ZlLW1lbnRpb25lZCBtb250aCBRdWludGlsaXMsIG9yIGZpZnRoLCBidXQgY291bnRpbmcgaXQgc2V2ZW50aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzLCBpdCB3YXMgcmVhc29uYWJsZSB0aGF0IE1hcmNoLCB3aGljaCBpcyBjb25zZWNyYXRlIHRvIE1hcnMsIHNob3VsZCBiZSBwdXQgaW4gdGhlIGZpcnN0IHBsYWNlIGJ5IFJvbXVsdXMsIGFuZCBBcHJpbCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBzaW5jZSB0aGlzIG1vbnRoIGlzIG5hbWVkIGFmdGVyIEFwaHJvZGl0ZS4gSW4gaXQgdGhleSBzYWNyaWZpY2VkIHRvIHRoaXMgZ29kZGVzcywgYW5kIG9uIGl0cyBmaXJzdCBkYXkgdGhlIHdvbWVuIGJhdGhlIHdpdGggbXlydGxlIGdhcmxhbmRzIG9uIHRoZWlyIGhlYWRzLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCBBcHJpbCwgd2l0aCBpdHMgc21vb3RoIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5wLDwvcT4gY2Fubm90IGJlIGRlcml2ZWQgZnJvbSBBcGhyb2RpdGUsIHdpdGggaXRzIHJvdWdoIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waCw8L3E+IGJ1dCB0aGF0IHRoaXMgbW9udGggb2YgaGlnaCBzcHJpbmcgdGltZSBpcyBjYWxsZWQgQXByaWwgYmVjYXVzZSBpdCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPm9wZW5zPC9lbXBoPiBhbmQgZGlzY2xvc2VzIHRoZSBidWRzIGFuZCBzaG9vdHMgaW4gdmVnZXRhdGlvbiwgdGhpcyBiZWluZyB0aGUgbWVhbmluZyBvZiB0aGUgd29yZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXBlcmlvLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBuZXh0IG1vbnRoIGluIG9yZGVyIGlzIGNhbGxlZCBNYXksIGZyb20gTWFpYSwgdGhlIG1vdGhlciBvZiBNZXJjdXJ5LCB0byB3aG9tIGl0IGlzIHNhY3JlZDsgYW5kIEp1bmUgaXMgc28gbmFtZWQgZnJvbSBKdW5vLiBUaGVyZSBhcmUgc29tZSwgaG93ZXZlciwgd2hvIHNheSB0aGF0IHRoZXNlIG1vbnRocyBnZXQgdGhlaXIgbmFtZSBmcm9tIGFuIGFnZSwgb2xkZXIgYW5kIHlvdW5nZXI7IGZvciAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFqb3JlczwvcT4gaXMgdGhlaXIgbmFtZSBmb3IgdGhlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZWxkZXI8L2VtcGg+LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+anVuaW9yZXM8L3E+IGZvciB0aGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj55b3VuZ2VyPC9lbXBoPiBtZW4uIEVhY2ggb2YgdGhlIHJlbWFpbmluZyBtb250aHMgdGhleSBuYW1lZCBmcm9tIGl0cyBhcml0aG1ldGljYWwgcG9zaXRpb24gaW4gdGhlIGxpc3QsIHRoZSBmaWZ0aCBRdWludGlsaXMsIHRoZSBzaXh0aCBTZXh0aWxpcywgYW5kIHNvIG9uIHdpdGggU2VwdGVtYmVyLCBPY3RvYmVyLCBOb3ZlbWJlciwgYW5kIERlY2VtYmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMgdGhlIGZpZnRoIG1vbnRoIHdhcyBuYW1lZCBKdWxpdXMsIGZyb20gSnVsaXVzIENhZXNhciwgdGhlIGNvbnF1ZXJvciBvZiBQb21wZXk7IGFuZCB0aGUgc2l4dGggbW9udGggQXVndXN0dXMsIGZyb20gdGhlIHNlY29uZCBDYWVzYXIsIHdobyB3YXMgZ2l2ZW4gdGhhdCB0aXRsZS4gVGhlIHNldmVudGggYW5kIGVpZ2h0aCBtb250aHMgYm9yZSBmb3IgYSBzaG9ydCB0aW1lIHRoZSBuYW1lcyBHZXJtYW5pY3VzIGFuZCBEb21pdGlhbnVzLCB3aGljaCB0aGUgZW1wZXJvciBEb21pdGlhbiBnYXZlIHRoZW07IGJ1dCB3aGVuIGhlIHdhcyBzbGFpbiwgdGhleSByZXN1bWVkIHRoZWlyIG9sZCBuYW1lcyBvZiBTZXB0ZW1iZXIgYW5kIE9jdG9iZXIuIE9ubHkgdGhlIGxhc3QgdHdvIG1vbnRocywgTm92ZW1iZXIgYW5kIERlY2VtYmVyLCBwcmVzZXJ2ZWQgdGhlIG5hbWVzIGRlcml2ZWQgZnJvbSB0aGVpciBwb3NpdGlvbiBpbiB0aGUgbGlzdCBqdXN0IGFzIHRoZXkgd2VyZSBhdCB0aGUgb3V0c2V0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgbW9udGhzIHdoaWNoIHdlcmUgYWRkZWQgb3IgdHJhbnNwb3NlZCBieSBOdW1hLCBGZWJydWFyeSBtdXN0IGhhdmUgc29tZXRoaW5nIHRvIGRvIHdpdGggPGVtcGg+cHVyaWZpY2F0aW9uPC9lbXBoPiBmb3IgdGhpcyBpcyBuZWFyZXN0IHRvIHRoZSBtZWFuaW5nIG9mIHRoZSB3b3JkLCBhbmQgaW4gdGhpcyBtb250aCB0aGV5IG1ha2Ugb2ZmZXJpbmdzIHRvIHRoZSBkZWFkIGFuZCBjZWxlYnJhdGUgdGhlIGZlc3RpdmFsIG9mIHRoZSBMdXBlcmNhbGlhLCB3aGljaCwgaW4gbW9zdCBvZiBpdHMgZmVhdHVyZXMsIHJlc2VtYmxlcyBhIHB1cmlmaWNhdGlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjEuNCIgdmFsaWQ9InllcyI+Um9tdWx1cywgeHhpLiA0LTguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZSBmaXJzdCBtb250aCwgSmFudWFyeSwgaXMgc28gbmFtZWQgZnJvbSBKYW51cy4gQW5kIEkgdGhpbmsgdGhhdCBNYXJjaCwgd2hpY2ggaXMgbmFtZWQgZnJvbSBNYXJzLCB3YXMgbW92ZWQgYnkgTnVtYSBmcm9tIGl0cyBwbGFjZSBhdCB0aGUgaGVhZCBvZiB0aGUgbW9udGhzIGJlY2F1c2UgaGUgd2lzaGVkIGluIGV2ZXJ5IGNhc2UgdGhhdCBtYXJ0aWFsIGluZmx1ZW5jZXMgc2hvdWxkIHlpZWxkIHByZWNlZGVuY2UgdG8gY2l2aWwgYW5kIHBvbGl0aWNhbC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgSmFudXMsIGluIHJlbW90ZSBhbnRpcXVpdHksIHdoZXRoZXIgaGUgd2FzIGEgZGVtaS1nb2Qgb3IgYSBraW5nLCB3YXMgYSBwYXRyb24gb2YgY2l2aWwgYW5kIHNvY2lhbCBvcmRlciwgYW5kIGlzIHNhaWQgdG8gaGF2ZSBsaWZ0ZWQgaHVtYW4gbGlmZSBvdXQgb2YgaXRzIGJlc3RpYWwgYW5kIHNhdmFnZSBzdGF0ZS4gRm9yIHRoaXMgcmVhc29uIGhlIGlzIHJlcHJlc2VudGVkIHdpdGggdHdvIGZhY2VzLCBpbXBseWluZyB0aGF0IGhlIGJyb3VnaHQgbWVuJ3MgbGl2ZXMgb3V0IG9mIG9uZSBzb3J0IGFuZCBjb25kaXRpb24gaW50byBhbm90aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBtb250aHMgd2hpY2ggd2VyZSBhZGRlZCBvciB0cmFuc3Bvc2VkIGJ5IE51bWEsIEZlYnJ1YXJ5IG11c3QgaGF2ZSBzb21ldGhpbmcgdG8gZG8gd2l0aCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPnB1cmlmaWNhdGlvbjwvZW1waD4gZm9yIHRoaXMgaXMgbmVhcmVzdCB0byB0aGUgbWVhbmluZyBvZiB0aGUgd29yZCwgYW5kIGluIHRoaXMgbW9udGggdGhleSBtYWtlIG9mZmVyaW5ncyB0byB0aGUgZGVhZCBhbmQgY2VsZWJyYXRlIHRoZSBmZXN0aXZhbCBvZiB0aGUgTHVwZXJjYWxpYSwgd2hpY2gsIGluIG1vc3Qgb2YgaXRzIGZlYXR1cmVzLCByZXNlbWJsZXMgYSBwdXJpZmljYXRpb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAyMS40IiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4eGkuIDQtOC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIGZpcnN0IG1vbnRoLCBKYW51YXJ5LCBpcyBzbyBuYW1lZCBmcm9tIEphbnVzLiBBbmQgSSB0aGluayB0aGF0IE1hcmNoLCB3aGljaCBpcyBuYW1lZCBmcm9tIE1hcnMsIHdhcyBtb3ZlZCBieSBOdW1hIGZyb20gaXRzIHBsYWNlIGF0IHRoZSBoZWFkIG9mIHRoZSBtb250aHMgYmVjYXVzZSBoZSB3aXNoZWQgaW4gZXZlcnkgY2FzZSB0aGF0IG1hcnRpYWwgaW5mbHVlbmNlcyBzaG91bGQgeWllbGQgcHJlY2VkZW5jZSB0byBjaXZpbCBhbmQgcG9saXRpY2FsLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFJvbS4gMjEuNCIgdmFsaWQ9InllcyI+Um9tdWx1cywgeHhpLiA0LTguPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIEphbnVzLCBpbiByZW1vdGUgYW50aXF1aXR5LCB3aGV0aGVyIGhlIHdhcyBhIGRlbWktZ29kIG9yIGEga2luZywgd2FzIGEgcGF0cm9uIG9mIGNpdmlsIGFuZCBzb2NpYWwgb3JkZXIsIGFuZCBpcyBzYWlkIHRvIGhhdmUgbGlmdGVkIGh1bWFuIGxpZmUgb3V0IG9mIGl0cyBiZXN0aWFsIGFuZCBzYXZhZ2Ugc3RhdGUuIEZvciB0aGlzIHJlYXNvbiBoZSBpcyByZXByZXNlbnRlZCB3aXRoIHR3byBmYWNlcywgaW1wbHlpbmcgdGhhdCBoZSBicm91Z2h0IG1lbidzIGxpdmVzIG91dCBvZiBvbmUgc29ydCBhbmQgY29uZGl0aW9uIGludG8gYW5vdGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBoYXMgYSB0ZW1wbGUgYXQgUm9tZSB3aXRoIGRvdWJsZSBkb29ycywgd2hpY2ggdGhleSBjYWxsIHRoZSBnYXRlcyBvZiB3YXI7IGZvciB0aGUgdGVtcGxlIGFsd2F5cyBzdGFuZHMgb3BlbiBpbiB0aW1lIG9mIHdhciwgYnV0IGlzIGNsb3NlZCB3aGVuIHBlYWNlIGhhcyBjb21lLiBUaGUgbGF0dGVyIHdhcyBhIGRpZmZpY3VsdCBtYXR0ZXIsIGFuZCBpdCByYXJlbHkgaGFwcGVuZWQsIHNpbmNlIHRoZSByZWFsbSB3YXMgYWx3YXlzIGVuZ2FnZWQgaW4gc29tZSB3YXIsIGFzIGl0cyBpbmNyZWFzaW5nIHNpemUgYnJvdWdodCBpdCBpbnRvIGNvbGxpc2lvbiB3aXRoIHRoZSBiYXJiYXJvdXMgbmF0aW9ucyB3aGljaCBlbmNvbXBhc3NlZCBpdCByb3VuZCBhYm91dC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRoZSB0aW1lIG9mIEF1Z3VzdHVzIENhZXNhciBpdCB3YXMgY2xvc2VkLCBhZnRlciBoZSBoYWQgb3ZlcnRocm93biBBbnRvbnk7IGFuZCBiZWZvcmUgdGhhdCwgd2hlbiBNYXJjdXMgQXRpbGl1cyBhbmQgVGl0dXMgTWFubGl1cyB3ZXJlIGNvbnN1bHMsIGl0IHdhcyBjbG9zZWQgYSBzaG9ydCB0aW1lOyB0aGVuIHdhciBicm9rZSBvdXQgYWdhaW4gYXQgb25jZSwgYW5kIGl0IHdhcyBvcGVuZWQuIER1cmluZyB0aGUgcmVpZ24gb2YgTnVtYSwgaG93ZXZlciwgaXQgd2FzIG5vdCBzZWVuIG9wZW4gZm9yIGEgc2luZ2xlIGRheSwgYnV0IHJlbWFpbmVkIHNodXQgZm9yIHRoZSBzcGFjZSBvZiBmb3J0eS10aHJlZSB5ZWFycyB0b2dldGhlciwgc28gY29tcGxldGUgYW5kIHVuaXZlcnNhbCB3YXMgdGhlIGNlc3NhdGlvbiBvZiB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSB3YXMgdGhlIFJvbWFuIHBlb3BsZSBzb2Z0ZW5lZCBhbmQgY2hhcm1lZCBieSB0aGUgcmlnaHRlb3VzbmVzcyBhbmQgbWlsZG5lc3Mgb2YgdGhlaXIga2luZywgYnV0IGFsc28gdGhlIGNpdGllcyByb3VuZCBhYm91dCwgYXMgaWYgc29tZSBjb29saW5nIGJyZWV6ZSBvciBzYWx1YnJpb3VzIHdpbmQgd2VyZSB3YWZ0ZWQgdXBvbiB0aGVtIGZyb20gUm9tZSwgYmVnYW4gdG8gZXhwZXJpZW5jZSBhIGNoYW5nZSBvZiB0ZW1wZXIsIGFuZCBhbGwgb2YgdGhlbSB3ZXJlIGZpbGxlZCB3aXRoIGxvbmdpbmcgZGVzaXJlIHRvIGhhdmUgZ29vZCBnb3Zlcm5tZW50LCB0byBiZSBhdCBwZWFjZSwgdG8gdGlsbCB0aGUgZWFydGgsIHRvIHJlYXIgdGhlaXIgY2hpbGRyZW4gaW4gcXVpZXQsIGFuZCB0byB3b3JzaGlwIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GZXN0aXZhbHMgYW5kIGZlYXN0cywgaG9zcGl0YWxpdGllcyBhbmQgZnJpZW5kbHkgY29udmVyc2UgYmV0d2VlbiBwZW9wbGUgd2hvIHZpc2l0ZWQgb25lIGFub3RoZXIgcHJvbWlzY3VvdXNseSBhbmQgd2l0aG91dCBmZWFyLOKAlHRoZXNlIHByZXZhaWxlZCB0aHJvdWdob3V0IEl0YWx5LCB3aGlsZSBob25vdXIgYW5kIGp1c3RpY2UgZmxvd2VkIGludG8gYWxsIGhlYXJ0cyBmcm9tIHRoZSB3aXNkb20gb2YgTnVtYSwgYXMgZnJvbSBhIGZvdW50YWluLCBhbmQgdGhlIGNhbG0gc2VyZW5pdHkgb2YgaGlzIHNwaXJpdCBkaWZmdXNlZCBpdHNlbGYgYWJyb2FkLiBUaHVzIGV2ZW4gdGhlIGh5cGVyYm9sZXMgb2YgdGhlIHBvZXRzIGZhbGwgc2hvcnQgb2YgcGljdHVyaW5nIHRoZSBzdGF0ZSBvZiBtYW4gaW4gdGhvc2UgZGF5czogCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBvbiB0aGUgaXJvbi1ib3VuZCBzaGllbGQtaGFuZGxlcyBsaWUgdGhlIHRhd25leSBzcGlkZXJzJyB3ZWJzPC9xPjsgYW5kLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJ1c3Qgbm93IHN1YmR1ZXMgdGhlIHNoYXJwLXBvaW50ZWQgc3BlYXJzIGFuZCB0d28tZWRnZWQgc3dvcmRzOyBubyBsb25nZXIgaXMgdGhlIGJsYXN0IG9mIGJyYXplbiB0cnVtcGV0cyBoZWFyZCwgbm9yIGFyZSB0aGUgZXllbGlkcyByb2JiZWQgb2YgZGVsaWNpb3VzIHNsZWVwLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBmcmVlIGNpdGF0aW9uLCBhcHBhcmVudGx5IGZyb20gbWVtb3J5LCBvZiBCYWNjaHlsaWRlcywgRnJhZ21lbnQgMTMgKEJlcmdrKS4gU2VlIEplYmIncyA8dGl0bGU+QmFjY2h5bGlkZXM8L3RpdGxlPiwgcC4gNDExLjwvbm90ZT4gIEZvciB0aGVyZSBpcyBubyByZWNvcmQgZWl0aGVyIG9mIHdhciwgb3IgZmFjdGlvbiwgb3IgcG9saXRpY2FsIHJldm9sdXRpb24gd2hpbGUgTnVtYSB3YXMga2luZy4gTmF5IG1vcmUsIG5vIGhhdHJlZCBvciBqZWFsb3VzeSB3YXMgZmVsdCB0b3dhcmRzIGhpcyBwZXJzb24sIG5vciBkaWQgYW1iaXRpb24gbGVhZCBtZW4gdG8gcGxvdCBhbmQgY29uc3BpcmUgYWdhaW5zdCBoaXMgdGhyb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgY29udHJhcnksIGVpdGhlciBmZWFyIG9mIHRoZSBnb2RzLCB3aG8gc2VlbWVkIHRvIGhhdmUgaGltIGluIHRoZWlyIGVzcGVjaWFsIGNhcmUsIG9yIHJldmVyZW5jZSBmb3IgaGlzIHZpcnR1ZSwgb3IgYSBtYXJ2ZWxsb3VzIGZlbGljaXR5LCB3aGljaCBpbiBoaXMgZGF5cyBrZXB0IGxpZmUgZnJlZSBmcm9tIHRoZSB0YWludCBvZiBldmVyeSB2aWNlLCBhbmQgcHVyZSwgbWFkZSBoaW0gYSBtYW5pZmVzdCBpbGx1c3RyYXRpb24gYW5kIGNvbmZpcm1hdGlvbiBvZiB0aGUgc2F5aW5nIHdoaWNoIFBsYXRvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0ODdlIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJlcHVibGljPC90aXRsZT4sIHAuIDQ4NyBlLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBtYW55IGdlbmVyYXRpb25zIGxhdGVyLCB2ZW50dXJlZCB0byB1dHRlciByZWdhcmRpbmcgZ292ZXJubWVudCwgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+bmFtZWx5LCB0aGF0IGh1bWFuIGlsbHMgd291bGQgb25seSB0aGVuIGNlYXNlIGFuZCBkaXNhcHBlYXIgd2hlbiwgYnkgc29tZSBkaXZpbmUgZmVsaWNpdHksIHRoZSBwb3dlciBvZiBhIGtpbmcgc2hvdWxkIGJlIHVuaXRlZCBpbiBvbmUgcGVyc29uIHdpdGggdGhlIGluc2lnaHQgb2YgYSBwaGlsb3NvcGhlciwgdGhlcmVieSBlc3RhYmxpc2hpbmcgdmlydHVlIGluIGNvbnRyb2wgYW5kIG1hc3Rlcnkgb3ZlciB2aWNlLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJsZXNzZWQsPC9xPiBpbmRlZWQsIGlzIHN1Y2ggYSB3aXNlIG1hbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIGhpbXNlbGYsIGFuZCBibGVzc2VkLCB0b28sIGFyZSB0aG9zZSB3aG8gaGVhciB0aGUgd29yZHMgb2Ygd2lzZG9tIGlzc3VpbmcgZnJvbSBoaXMgbGlwcy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTGF3cyA3MTFlIiB2YWxpZD0ieWVzIj5QbGF0bywgTGF3cywgcC4gNzExIGUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHBvc3NpYmx5IHRoZXJlIGlzIG5vIG5lZWQgb2YgYW55IGNvbXB1bHNpb24gb3IgbWVuYWNlIGluIGRlYWxpbmcgd2l0aCB0aGUgbXVsdGl0dWRlLCBidXQgd2hlbiB0aGV5IHNlZSB3aXRoIHRoZWlyIG93biBleWVzIGEgY29uc3BpY3VvdXMgYW5kIHNoaW5pbmcgZXhhbXBsZSBvZiB2aXJ0dWUgaW4gdGhlIGxpZmUgb2YgdGhlaXIgcnVsZXIsIHRoZXkgd2lsbCBvZiB0aGVpciBvd24gYWNjb3JkIHdhbGsgaW4gd2lzZG9tJ3Mgd2F5cywgYW5kIHVuaXRlIHdpdGggaGltIGluIGNvbmZvcm1pbmcgdGhlbXNlbHZlcyB0byBhIGJsYW1lbGVzcyBhbmQgYmxlc3NlZCBsaWZlIG9mIGZyaWVuZHNoaXAgYW5kIG11dHVhbCBjb25jb3JkLCBhdHRlbmRlZCBieSByaWdodGVvdXNuZXNzIGFuZCB0ZW1wZXJhbmNlLiBTdWNoIGEgbGlmZSBpcyB0aGUgbm9ibGVzdCBlbmQgb2YgYWxsIGdvdmVybm1lbnQsIGFuZCBoZSBpcyBtb3N0IGEga2luZyB3aG8gY2FuIGluY3VsY2F0ZSBzdWNoIGEgbGlmZSBhbmQgc3VjaCBhIGRpc3Bvc2l0aW9uIGluIGhpcyBzdWJqZWN0cy4gVGhpcywgdGhlbiwgYXMgaXQgYXBwZWFycywgTnVtYSB3YXMgcHJlZW1pbmVudCBpbiBkaXNjZXJuaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBoYXMgYSB0ZW1wbGUgYXQgUm9tZSB3aXRoIGRvdWJsZSBkb29ycywgd2hpY2ggdGhleSBjYWxsIHRoZSBnYXRlcyBvZiB3YXI7IGZvciB0aGUgdGVtcGxlIGFsd2F5cyBzdGFuZHMgb3BlbiBpbiB0aW1lIG9mIHdhciwgYnV0IGlzIGNsb3NlZCB3aGVuIHBlYWNlIGhhcyBjb21lLiBUaGUgbGF0dGVyIHdhcyBhIGRpZmZpY3VsdCBtYXR0ZXIsIGFuZCBpdCByYXJlbHkgaGFwcGVuZWQsIHNpbmNlIHRoZSByZWFsbSB3YXMgYWx3YXlzIGVuZ2FnZWQgaW4gc29tZSB3YXIsIGFzIGl0cyBpbmNyZWFzaW5nIHNpemUgYnJvdWdodCBpdCBpbnRvIGNvbGxpc2lvbiB3aXRoIHRoZSBiYXJiYXJvdXMgbmF0aW9ucyB3aGljaCBlbmNvbXBhc3NlZCBpdCByb3VuZCBhYm91dC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgdGltZSBvZiBBdWd1c3R1cyBDYWVzYXIgaXQgd2FzIGNsb3NlZCwgYWZ0ZXIgaGUgaGFkIG92ZXJ0aHJvd24gQW50b255OyBhbmQgYmVmb3JlIHRoYXQsIHdoZW4gTWFyY3VzIEF0aWxpdXMgYW5kIFRpdHVzIE1hbmxpdXMgd2VyZSBjb25zdWxzLCBpdCB3YXMgY2xvc2VkIGEgc2hvcnQgdGltZTsgdGhlbiB3YXIgYnJva2Ugb3V0IGFnYWluIGF0IG9uY2UsIGFuZCBpdCB3YXMgb3BlbmVkLiBEdXJpbmcgdGhlIHJlaWduIG9mIE51bWEsIGhvd2V2ZXIsIGl0IHdhcyBub3Qgc2VlbiBvcGVuIGZvciBhIHNpbmdsZSBkYXksIGJ1dCByZW1haW5lZCBzaHV0IGZvciB0aGUgc3BhY2Ugb2YgZm9ydHktdGhyZWUgeWVhcnMgdG9nZXRoZXIsIHNvIGNvbXBsZXRlIGFuZCB1bml2ZXJzYWwgd2FzIHRoZSBjZXNzYXRpb24gb2Ygd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSB3YXMgdGhlIFJvbWFuIHBlb3BsZSBzb2Z0ZW5lZCBhbmQgY2hhcm1lZCBieSB0aGUgcmlnaHRlb3VzbmVzcyBhbmQgbWlsZG5lc3Mgb2YgdGhlaXIga2luZywgYnV0IGFsc28gdGhlIGNpdGllcyByb3VuZCBhYm91dCwgYXMgaWYgc29tZSBjb29saW5nIGJyZWV6ZSBvciBzYWx1YnJpb3VzIHdpbmQgd2VyZSB3YWZ0ZWQgdXBvbiB0aGVtIGZyb20gUm9tZSwgYmVnYW4gdG8gZXhwZXJpZW5jZSBhIGNoYW5nZSBvZiB0ZW1wZXIsIGFuZCBhbGwgb2YgdGhlbSB3ZXJlIGZpbGxlZCB3aXRoIGxvbmdpbmcgZGVzaXJlIHRvIGhhdmUgZ29vZCBnb3Zlcm5tZW50LCB0byBiZSBhdCBwZWFjZSwgdG8gdGlsbCB0aGUgZWFydGgsIHRvIHJlYXIgdGhlaXIgY2hpbGRyZW4gaW4gcXVpZXQsIGFuZCB0byB3b3JzaGlwIHRoZSBnb2RzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZlc3RpdmFscyBhbmQgZmVhc3RzLCBob3NwaXRhbGl0aWVzIGFuZCBmcmllbmRseSBjb252ZXJzZSBiZXR3ZWVuIHBlb3BsZSB3aG8gdmlzaXRlZCBvbmUgYW5vdGhlciBwcm9taXNjdW91c2x5IGFuZCB3aXRob3V0IGZlYXIs4oCUdGhlc2UgcHJldmFpbGVkIHRocm91Z2hvdXQgSXRhbHksIHdoaWxlIGhvbm91ciBhbmQganVzdGljZSBmbG93ZWQgaW50byBhbGwgaGVhcnRzIGZyb20gdGhlIHdpc2RvbSBvZiBOdW1hLCBhcyBmcm9tIGEgZm91bnRhaW4sIGFuZCB0aGUgY2FsbSBzZXJlbml0eSBvZiBoaXMgc3Bpcml0IGRpZmZ1c2VkIGl0c2VsZiBhYnJvYWQuIFRodXMgZXZlbiB0aGUgaHlwZXJib2xlcyBvZiB0aGUgcG9ldHMgZmFsbCBzaG9ydCBvZiBwaWN0dXJpbmcgdGhlIHN0YXRlIG9mIG1hbiBpbiB0aG9zZSBkYXlzOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBvbiB0aGUgaXJvbi1ib3VuZCBzaGllbGQtaGFuZGxlcyBsaWUgdGhlIHRhd25leSBzcGlkZXJzJyB3ZWJzPC9xPjsgYW5kLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cnVzdCBub3cgc3ViZHVlcyB0aGUgc2hhcnAtcG9pbnRlZCBzcGVhcnMgYW5kIHR3by1lZGdlZCBzd29yZHM7IG5vIGxvbmdlciBpcyB0aGUgYmxhc3Qgb2YgYnJhemVuIHRydW1wZXRzIGhlYXJkLCBub3IgYXJlIHRoZSBleWVsaWRzIHJvYmJlZCBvZiBkZWxpY2lvdXMgc2xlZXAuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZnJlZSBjaXRhdGlvbiwgYXBwYXJlbnRseSBmcm9tIG1lbW9yeSwgb2YgQmFjY2h5bGlkZXMsIEZyYWdtZW50IDEzIChCZXJnaykuIFNlZSBKZWJiJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmFjY2h5bGlkZXM8L3RpdGxlPiwgcC4gNDExLjwvbm90ZT4gIEZvciB0aGVyZSBpcyBubyByZWNvcmQgZWl0aGVyIG9mIHdhciwgb3IgZmFjdGlvbiwgb3IgcG9saXRpY2FsIHJldm9sdXRpb24gd2hpbGUgTnVtYSB3YXMga2luZy4gTmF5IG1vcmUsIG5vIGhhdHJlZCBvciBqZWFsb3VzeSB3YXMgZmVsdCB0b3dhcmRzIGhpcyBwZXJzb24sIG5vciBkaWQgYW1iaXRpb24gbGVhZCBtZW4gdG8gcGxvdCBhbmQgY29uc3BpcmUgYWdhaW5zdCBoaXMgdGhyb25lLiAKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJhY2NoeWxpZGVzPC90aXRsZT4sIHAuIDQxMS48L3RyYW5zbGF0aW9uPg=="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBjb250cmFyeSwgZWl0aGVyIGZlYXIgb2YgdGhlIGdvZHMsIHdobyBzZWVtZWQgdG8gaGF2ZSBoaW0gaW4gdGhlaXIgZXNwZWNpYWwgY2FyZSwgb3IgcmV2ZXJlbmNlIGZvciBoaXMgdmlydHVlLCBvciBhIG1hcnZlbGxvdXMgZmVsaWNpdHksIHdoaWNoIGluIGhpcyBkYXlzIGtlcHQgbGlmZSBmcmVlIGZyb20gdGhlIHRhaW50IG9mIGV2ZXJ5IHZpY2UsIGFuZCBwdXJlLCBtYWRlIGhpbSBhIG1hbmlmZXN0IGlsbHVzdHJhdGlvbiBhbmQgY29uZmlybWF0aW9uIG9mIHRoZSBzYXlpbmcgd2hpY2ggUGxhdG8sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0ODdlIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgcC4gNDg3IGUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1hbnkgZ2VuZXJhdGlvbnMgbGF0ZXIsIHZlbnR1cmVkIHRvIHV0dGVyIHJlZ2FyZGluZyBnb3Zlcm5tZW50LCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gNDg3ZSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4sIHAuIDQ4NyBlLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgcC4gNDg3IGUuPC90cmFuc2xhdGlvbj4="
translation['20.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPm5hbWVseSwgdGhhdCBodW1hbiBpbGxzIHdvdWxkIG9ubHkgdGhlbiBjZWFzZSBhbmQgZGlzYXBwZWFyIHdoZW4sIGJ5IHNvbWUgZGl2aW5lIGZlbGljaXR5LCB0aGUgcG93ZXIgb2YgYSBraW5nIHNob3VsZCBiZSB1bml0ZWQgaW4gb25lIHBlcnNvbiB3aXRoIHRoZSBpbnNpZ2h0IG9mIGEgcGhpbG9zb3BoZXIsIHRoZXJlYnkgZXN0YWJsaXNoaW5nIHZpcnR1ZSBpbiBjb250cm9sIGFuZCBtYXN0ZXJ5IG92ZXIgdmljZS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJsZXNzZWQsPC9xPiBpbmRlZWQsIGlzIHN1Y2ggYSB3aXNlIG1hbiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gaGltc2VsZiwgYW5kIGJsZXNzZWQsIHRvbywgYXJlIHRob3NlIHdobyBoZWFyIHRoZSB3b3JkcyBvZiB3aXNkb20gaXNzdWluZyBmcm9tIGhpcyBsaXBzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTGF3cyA3MTFlIiB2YWxpZD0ieWVzIj5QbGF0bywgTGF3cywgcC4gNzExIGUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMYXdzIDcxMWUiIHZhbGlkPSJ5ZXMiPlBsYXRvLCBMYXdzLCBwLiA3MTEgZS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBwb3NzaWJseSB0aGVyZSBpcyBubyBuZWVkIG9mIGFueSBjb21wdWxzaW9uIG9yIG1lbmFjZSBpbiBkZWFsaW5nIHdpdGggdGhlIG11bHRpdHVkZSwgYnV0IHdoZW4gdGhleSBzZWUgd2l0aCB0aGVpciBvd24gZXllcyBhIGNvbnNwaWN1b3VzIGFuZCBzaGluaW5nIGV4YW1wbGUgb2YgdmlydHVlIGluIHRoZSBsaWZlIG9mIHRoZWlyIHJ1bGVyLCB0aGV5IHdpbGwgb2YgdGhlaXIgb3duIGFjY29yZCB3YWxrIGluIHdpc2RvbSdzIHdheXMsIGFuZCB1bml0ZSB3aXRoIGhpbSBpbiBjb25mb3JtaW5nIHRoZW1zZWx2ZXMgdG8gYSBibGFtZWxlc3MgYW5kIGJsZXNzZWQgbGlmZSBvZiBmcmllbmRzaGlwIGFuZCBtdXR1YWwgY29uY29yZCwgYXR0ZW5kZWQgYnkgcmlnaHRlb3VzbmVzcyBhbmQgdGVtcGVyYW5jZS4gU3VjaCBhIGxpZmUgaXMgdGhlIG5vYmxlc3QgZW5kIG9mIGFsbCBnb3Zlcm5tZW50LCBhbmQgaGUgaXMgbW9zdCBhIGtpbmcgd2hvIGNhbiBpbmN1bGNhdGUgc3VjaCBhIGxpZmUgYW5kIHN1Y2ggYSBkaXNwb3NpdGlvbiBpbiBoaXMgc3ViamVjdHMuIFRoaXMsIHRoZW4sIGFzIGl0IGFwcGVhcnMsIE51bWEgd2FzIHByZWVtaW5lbnQgaW4gZGlzY2VybmluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgcmVnYXJkcyBoaXMgbWFycmlhZ2VzIGFuZCBvZmZzcHJpbmcsIGhpc3RvcmlhbnMgYXJlIGF0IHZhcmlhbmNlLiBTb21lIHNheSB0aGF0IGhlIGhhZCBubyBvdGhlciB3aWZlIHRoYW4gVGF0aWEsIGFuZCBubyBvdGhlciBjaGlsZCB0aGFuIG9uZSBkYXVnaHRlciwgUG9tcGlsaWEuIE90aGVycyBhc2NyaWJlIHRvIGhpbSBmb3VyIHNvbnMgYmVzaWRlcywgUG9tcG9uLCBQaW51cywgQ2FscHVzLCBhbmQgTWFtZXJjdXMsIGVhY2ggb25lIG9mIHdob20gd2FzIHRoZSBmb3VuZGVyIG9mIGFuIGhvbm91cmFibGUgZmFtaWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIFBvbXBvbiB0aGUgUG9tcG9uaWkgYXJlIGRlc2NlbmRlZCwgZnJvbSBQaW51cyB0aGUgUGluYXJpaSwgZnJvbSBDYWxwdXMgdGhlIENhbHB1cm5paSwgYW5kIGZyb20gTWFtZXJjdXMgdGhlIE1hbWVyY2lpLCB3aG8gZm9yIHRoaXMgcmVhc29uIGhhZCBhbHNvIHRoZSBzdXJuYW1lIG9mIFJlZ2VzLCBvciA8ZW1waD5LaW5ncy48L2VtcGg+IEJ1dCB0aGVyZSBpcyBhIHRoaXJkIGNsYXNzIG9mIHdyaXRlcnMgd2hvIGFjY3VzZSB0aGUgZm9ybWVyIG9mIHBheWluZyBjb3VydCB0byB0aGVzZSBncmVhdCBmYW1pbGllcyBieSBmb3JnaW5nIGZvciB0aGVtIGxpbmVzIG9mIGRlc2NlbnQgZnJvbSBOdW1hLCBhbmQgdGhleSBzYXkgdGhhdCBQb21waWxpYSB3YXMgbm90IHRoZSBkYXVnaHRlciBvZiBUYXRpYSwgYnV0IG9mIEx1Y3JldGlhLCBhbm90aGVyIHdpZmUgd2hvbSBOdW1hIG1hcnJpZWQgYWZ0ZXIgaGUgYmVjYW1lIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsbCBhcmUgYWdyZWVkIHRoYXQgUG9tcGlsaWEgd2FzIG1hcnJpZWQgdG8gTWFyY2l1cy4gTm93IHRoaXMgTWFyY2l1cyB3YXMgYSBzb24gb2YgdGhlIE1hcmNpdXMgd2hvIGluZHVjZWQgTnVtYSB0byBhY2NlcHQgdGhlIHRocm9uZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gNiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhhdCBNYXJjaXVzIGFjY29tcGFuaWVkIE51bWEgdG8gUm9tZSwgYW5kIHRoZXJlIHdhcyBob25vdXJlZCB3aXRoIG1lbWJlcnNoaXAgaW4gdGhlIFNlbmF0ZS4gQWZ0ZXIgTnVtYSdzIGRlYXRoLCBoZSBjb21wZXRlZCBmb3IgdGhlIHRocm9uZSB3aXRoIEhvc3RpbGl1cywgYW5kIGJlaW5nIGRlZmVhdGVkLCBzdGFydmVkIGhpbXNlbGYgdG8gZGVhdGguIEJ1dCBoaXMgc29uIE1hcmNpdXMsIHRoZSBodXNiYW5kIG9mIFBvbXBpbGlhLCByZW1haW5lZCBhdCBSb21lLCBhbmQgYmVnYXQgQW5jdXMgTWFyY2l1cywgd2hvIHN1Y2NlZWRlZCBUdWxsdXMgSG9zdGlsaXVzIGluIHRoZSBraW5nZG9tLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIEFuY3VzIE1hcmNpdXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gb25seSBmaXZlIHllYXJzIG9sZCB3aGVuIE51bWEgZGllZCwgbm90IGEgc3BlZWR5IG5vciBhIHN1ZGRlbiBkZWF0aCwgYnV0IHdhc3RpbmcgYXdheSBncmFkdWFsbHkgZnJvbSBvbGQgYWdlIGFuZCBhIG1pbGQgZGlzb3JkZXIsIGFzIFBpc28gd3JpdGVzLiBIZSB3YXMgc29tZXRoaW5nIG92ZXIgZWlnaHR5IHllYXJzIG9sZCB3aGVuIGhlIGRpZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgcmVnYXJkcyBoaXMgbWFycmlhZ2VzIGFuZCBvZmZzcHJpbmcsIGhpc3RvcmlhbnMgYXJlIGF0IHZhcmlhbmNlLiBTb21lIHNheSB0aGF0IGhlIGhhZCBubyBvdGhlciB3aWZlIHRoYW4gVGF0aWEsIGFuZCBubyBvdGhlciBjaGlsZCB0aGFuIG9uZSBkYXVnaHRlciwgUG9tcGlsaWEuIE90aGVycyBhc2NyaWJlIHRvIGhpbSBmb3VyIHNvbnMgYmVzaWRlcywgUG9tcG9uLCBQaW51cywgQ2FscHVzLCBhbmQgTWFtZXJjdXMsIGVhY2ggb25lIG9mIHdob20gd2FzIHRoZSBmb3VuZGVyIG9mIGFuIGhvbm91cmFibGUgZmFtaWx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gUG9tcG9uIHRoZSBQb21wb25paSBhcmUgZGVzY2VuZGVkLCBmcm9tIFBpbnVzIHRoZSBQaW5hcmlpLCBmcm9tIENhbHB1cyB0aGUgQ2FscHVybmlpLCBhbmQgZnJvbSBNYW1lcmN1cyB0aGUgTWFtZXJjaWksIHdobyBmb3IgdGhpcyByZWFzb24gaGFkIGFsc28gdGhlIHN1cm5hbWUgb2YgUmVnZXMsIG9yIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+S2luZ3MuPC9lbXBoPiBCdXQgdGhlcmUgaXMgYSB0aGlyZCBjbGFzcyBvZiB3cml0ZXJzIHdobyBhY2N1c2UgdGhlIGZvcm1lciBvZiBwYXlpbmcgY291cnQgdG8gdGhlc2UgZ3JlYXQgZmFtaWxpZXMgYnkgZm9yZ2luZyBmb3IgdGhlbSBsaW5lcyBvZiBkZXNjZW50IGZyb20gTnVtYSwgYW5kIHRoZXkgc2F5IHRoYXQgUG9tcGlsaWEgd2FzIG5vdCB0aGUgZGF1Z2h0ZXIgb2YgVGF0aWEsIGJ1dCBvZiBMdWNyZXRpYSwgYW5vdGhlciB3aWZlIHdob20gTnVtYSBtYXJyaWVkIGFmdGVyIGhlIGJlY2FtZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsbCBhcmUgYWdyZWVkIHRoYXQgUG9tcGlsaWEgd2FzIG1hcnJpZWQgdG8gTWFyY2l1cy4gTm93IHRoaXMgTWFyY2l1cyB3YXMgYSBzb24gb2YgdGhlIE1hcmNpdXMgd2hvIGluZHVjZWQgTnVtYSB0byBhY2NlcHQgdGhlIHRocm9uZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoYXQgTWFyY2l1cyBhY2NvbXBhbmllZCBOdW1hIHRvIFJvbWUsIGFuZCB0aGVyZSB3YXMgaG9ub3VyZWQgd2l0aCBtZW1iZXJzaGlwIGluIHRoZSBTZW5hdGUuIEFmdGVyIE51bWEncyBkZWF0aCwgaGUgY29tcGV0ZWQgZm9yIHRoZSB0aHJvbmUgd2l0aCBIb3N0aWxpdXMsIGFuZCBiZWluZyBkZWZlYXRlZCwgc3RhcnZlZCBoaW1zZWxmIHRvIGRlYXRoLiBCdXQgaGlzIHNvbiBNYXJjaXVzLCB0aGUgaHVzYmFuZCBvZiBQb21waWxpYSwgcmVtYWluZWQgYXQgUm9tZSwgYW5kIGJlZ2F0IEFuY3VzIE1hcmNpdXMsIHdobyBzdWNjZWVkZWQgVHVsbHVzIEhvc3RpbGl1cyBpbiB0aGUga2luZ2RvbS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmkuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgQW5jdXMgTWFyY2l1cyBpcyBzYWlkIHRvIGhhdmUgYmVlbiBvbmx5IGZpdmUgeWVhcnMgb2xkIHdoZW4gTnVtYSBkaWVkLCBub3QgYSBzcGVlZHkgbm9yIGEgc3VkZGVuIGRlYXRoLCBidXQgd2FzdGluZyBhd2F5IGdyYWR1YWxseSBmcm9tIG9sZCBhZ2UgYW5kIGEgbWlsZCBkaXNvcmRlciwgYXMgUGlzbyB3cml0ZXMuIEhlIHdhcyBzb21ldGhpbmcgb3ZlciBlaWdodHkgeWVhcnMgb2xkIHdoZW4gaGUgZGllZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIG9ic2VxdWllcyB3ZXJlIGFzIG11Y2ggdG8gYmUgZW52aWVkIGFzIGhpcyBsaWZlLiBUaGUgcGVvcGxlcyB3aGljaCB3ZXJlIGluIGFsbGlhbmNlIGFuZCBmcmllbmRzaGlwIHdpdGggUm9tZSBhc3NlbWJsZWQgYXQgdGhlIHJpdGVzIHdpdGggcHVibGljIG9mZmVyaW5ncyBhbmQgY3Jvd25zOyB0aGUgc2VuYXRvcnMgY2FycmllZCBoaXMgYmllciwgdGhlIHByaWVzdHMgb2YgdGhlIGdvZHMgc2VydmVkIGFzIGl0cyBlc2NvcnQsIGFuZCB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlLCBpbmNsdWRpbmcgd29tZW4gYW5kIGNoaWxkcmVuLCBmb2xsb3dlZCB3aXRoIGdyb2FucyBhbmQgbGFtZW50YXRpb25zLCBub3QgYXMgdGhvdWdoIHRoZXkgd2VyZSBhdHRlbmRpbmcgdGhlIGZ1bmVyYWwgb2YgYW4gYWdlZCBraW5nLCBidXQgYXMgdGhvdWdoIGVhY2ggb25lIG9mIHRoZW0gd2FzIGJ1cnlpbmcgc29tZSBkZWFyZXN0IHJlbGF0aW9uIHRha2VuIGF3YXkgaW4gdGhlIGZsb3dlciBvZiBsaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGRpZCBub3QgYnVybiBoaXMgYm9keSwgYmVjYXVzZSwgYXMgaXQgaXMgc2FpZCwgaGUgZm9yYmFkZSBpdDsgYnV0IHRoZXkgbWFkZSB0d28gc3RvbmUgY29mZmlucyBhbmQgYnVyaWVkIHRoZW0gdW5kZXIgdGhlIEphbmljdWx1bS4gT25lIG9mIHRoZXNlIGhlbGQgaGlzIGJvZHksIGFuZCB0aGUgb3RoZXIgdGhlIHNhY3JlZCBib29rcyB3aGljaCBoZSBoYWQgd3JpdHRlbiBvdXQgd2l0aCBoaXMgb3duIGhhbmQsIGFzIHRoZSBHcmVlayBsYXdnaXZlcnMgdGhlaXIgdGFibGV0cy4gQnV0IHNpbmNlLCB3aGlsZSBoZSB3YXMgc3RpbGwgbGl2aW5nLCBoZSBoYWQgdGF1Z2h0IHRoZSBwcmllc3RzIHRoZSB3cml0dGVuIGNvbnRlbnRzIG9mIHRoZSBib29rcywgYW5kIGhhZCBpbmN1bGNhdGVkIGluIHRoZWlyIGhlYXJ0cyB0aGUgc2NvcGUgYW5kIG1lYW5pbmcgb2YgdGhlbSBhbGwsIGhlIGNvbW1hbmRlZCB0aGF0IHRoZXkgc2hvdWxkIGJlIGJ1cmllZCB3aXRoIGhpcyBib2R5LCBjb252aW5jZWQgdGhhdCBzdWNoIG15c3RlcmllcyBvdWdodCBub3QgdG8gYmUgZW50cnVzdGVkIHRvIHRoZSBjYXJlIG9mIGxpZmVsZXNzIGRvY3VtZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgcmVhc29uLCB3ZSBhcmUgdG9sZCwgd2h5IHRoZSBQeXRoYWdvcmVhbnMgYWxzbyBkbyBub3QgZW50cnVzdCB0aGVpciBwcmVjZXB0cyB0byB3cml0aW5nLCBidXQgaW1wbGFudCB0aGUgbWVtb3J5IGFuZCBwcmFjdGljZSBvZiB0aGVtIGluIGxpdmluZyBkaXNjaXBsZXMgd29ydGh5IHRvIHJlY2VpdmUgdGhlbS4gQW5kIHdoZW4gdGhlaXIgdHJlYXRtZW50IG9mIHRoZSBhYnN0cnVzZSBhbmQgbXlzdGVyaW91cyBwcm9jZXNzZXMgb2YgZ2VvbWV0cnkgaGFkIGJlZW4gZGl2dWxnZWQgdG8gYSBjZXJ0YWluIHVud29ydGh5IHBlcnNvbiwgdGhleSBzYWlkIHRoZSBnb2RzIHRocmVhdGVuZWQgdG8gcHVuaXNoIHN1Y2ggbGF3bGVzc25lc3MgYW5kIGltcGlldHkgd2l0aCBzb21lIHNpZ25hbCBhbmQgd2lkZS1zcHJlYWQgY2FsYW1pdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3ZSBtYXkgd2VsbCBiZSBpbmR1bGdlbnQgd2l0aCB0aG9zZSB3aG8gYXJlIGVhZ2VyIHRvIHByb3ZlLCBvbiB0aGUgYmFzaXMgb2Ygc28gbWFueSByZXNlbWJsYW5jZXMgYmV0d2VlbiB0aGVtLCB0aGF0IE51bWEgd2FzIGFjcXVhaW50ZWQgd2l0aCBQeXRoYWdvcmFzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIG9ic2VxdWllcyB3ZXJlIGFzIG11Y2ggdG8gYmUgZW52aWVkIGFzIGhpcyBsaWZlLiBUaGUgcGVvcGxlcyB3aGljaCB3ZXJlIGluIGFsbGlhbmNlIGFuZCBmcmllbmRzaGlwIHdpdGggUm9tZSBhc3NlbWJsZWQgYXQgdGhlIHJpdGVzIHdpdGggcHVibGljIG9mZmVyaW5ncyBhbmQgY3Jvd25zOyB0aGUgc2VuYXRvcnMgY2FycmllZCBoaXMgYmllciwgdGhlIHByaWVzdHMgb2YgdGhlIGdvZHMgc2VydmVkIGFzIGl0cyBlc2NvcnQsIGFuZCB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlLCBpbmNsdWRpbmcgd29tZW4gYW5kIGNoaWxkcmVuLCBmb2xsb3dlZCB3aXRoIGdyb2FucyBhbmQgbGFtZW50YXRpb25zLCBub3QgYXMgdGhvdWdoIHRoZXkgd2VyZSBhdHRlbmRpbmcgdGhlIGZ1bmVyYWwgb2YgYW4gYWdlZCBraW5nLCBidXQgYXMgdGhvdWdoIGVhY2ggb25lIG9mIHRoZW0gd2FzIGJ1cnlpbmcgc29tZSBkZWFyZXN0IHJlbGF0aW9uIHRha2VuIGF3YXkgaW4gdGhlIGZsb3dlciBvZiBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGlkIG5vdCBidXJuIGhpcyBib2R5LCBiZWNhdXNlLCBhcyBpdCBpcyBzYWlkLCBoZSBmb3JiYWRlIGl0OyBidXQgdGhleSBtYWRlIHR3byBzdG9uZSBjb2ZmaW5zIGFuZCBidXJpZWQgdGhlbSB1bmRlciB0aGUgSmFuaWN1bHVtLiBPbmUgb2YgdGhlc2UgaGVsZCBoaXMgYm9keSwgYW5kIHRoZSBvdGhlciB0aGUgc2FjcmVkIGJvb2tzIHdoaWNoIGhlIGhhZCB3cml0dGVuIG91dCB3aXRoIGhpcyBvd24gaGFuZCwgYXMgdGhlIEdyZWVrIGxhd2dpdmVycyB0aGVpciB0YWJsZXRzLiBCdXQgc2luY2UsIHdoaWxlIGhlIHdhcyBzdGlsbCBsaXZpbmcsIGhlIGhhZCB0YXVnaHQgdGhlIHByaWVzdHMgdGhlIHdyaXR0ZW4gY29udGVudHMgb2YgdGhlIGJvb2tzLCBhbmQgaGFkIGluY3VsY2F0ZWQgaW4gdGhlaXIgaGVhcnRzIHRoZSBzY29wZSBhbmQgbWVhbmluZyBvZiB0aGVtIGFsbCwgaGUgY29tbWFuZGVkIHRoYXQgdGhleSBzaG91bGQgYmUgYnVyaWVkIHdpdGggaGlzIGJvZHksIGNvbnZpbmNlZCB0aGF0IHN1Y2ggbXlzdGVyaWVzIG91Z2h0IG5vdCB0byBiZSBlbnRydXN0ZWQgdG8gdGhlIGNhcmUgb2YgbGlmZWxlc3MgZG9jdW1lbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHJlYXNvbiwgd2UgYXJlIHRvbGQsIHdoeSB0aGUgUHl0aGFnb3JlYW5zIGFsc28gZG8gbm90IGVudHJ1c3QgdGhlaXIgcHJlY2VwdHMgdG8gd3JpdGluZywgYnV0IGltcGxhbnQgdGhlIG1lbW9yeSBhbmQgcHJhY3RpY2Ugb2YgdGhlbSBpbiBsaXZpbmcgZGlzY2lwbGVzIHdvcnRoeSB0byByZWNlaXZlIHRoZW0uIEFuZCB3aGVuIHRoZWlyIHRyZWF0bWVudCBvZiB0aGUgYWJzdHJ1c2UgYW5kIG15c3RlcmlvdXMgcHJvY2Vzc2VzIG9mIGdlb21ldHJ5IGhhZCBiZWVuIGRpdnVsZ2VkIHRvIGEgY2VydGFpbiB1bndvcnRoeSBwZXJzb24sIHRoZXkgc2FpZCB0aGUgZ29kcyB0aHJlYXRlbmVkIHRvIHB1bmlzaCBzdWNoIGxhd2xlc3NuZXNzIGFuZCBpbXBpZXR5IHdpdGggc29tZSBzaWduYWwgYW5kIHdpZGUtc3ByZWFkIGNhbGFtaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3ZSBtYXkgd2VsbCBiZSBpbmR1bGdlbnQgd2l0aCB0aG9zZSB3aG8gYXJlIGVhZ2VyIHRvIHByb3ZlLCBvbiB0aGUgYmFzaXMgb2Ygc28gbWFueSByZXNlbWJsYW5jZXMgYmV0d2VlbiB0aGVtLCB0aGF0IE51bWEgd2FzIGFjcXVhaW50ZWQgd2l0aCBQeXRoYWdvcmFzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFudGlhcywgaG93ZXZlciwgd3JpdGVzIHRoYXQgaXQgd2FzIHR3ZWx2ZSBwb250aWZpY2FsIGJvb2tzLCBhbmQgdHdlbHZlIG90aGVycyBvZiBHcmVlayBwaGlsb3NvcGh5LCB3aGljaCB3ZXJlIHBsYWNlZCBpbiB0aGUgY29mZmluLiBBbmQgYWJvdXQgZm91ciBodW5kcmVkIHllYXJzIGFmdGVyd2FyZHMsIHdoZW4gUHVibGl1cyBDb3JuZWxpdXMgYW5kIE1hcmN1cyBCYWViaXVzIHdlcmUgY29uc3VscywgaGVhdnkgcmFpbnMgZmVsbCwgYW5kIHRoZSB0b3JyZW50IG9mIHdhdGVyIHRvcmUgYXdheSB0aGUgZWFydGggYW5kIGRpc2xvZGdlZCB0aGUgY29mZmlucy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZWlyIGxpZHMgaGFkIGZhbGxlbiBvZmYsIG9uZSBjb2ZmaW4gd2FzIHNlZW4gdG8gYmUgZW50aXJlbHkgZW1wdHksIHdpdGhvdXQgYW55IHRyYWNlIHdoYXRldmVyIG9mIHRoZSBib2R5LCBidXQgaW4gdGhlIG90aGVyIHRoZSB3cml0aW5ncyB3ZXJlIGZvdW5kLiBUaGVzZSBQZXRpbGl1cywgd2hvIHdhcyB0aGVuIHByYWV0b3IsIGlzIHNhaWQgdG8gaGF2ZSByZWFkLCBhbmQgdGhlbiBicm91Z2h0IHRvIHRoZSBzZW5hdGUsIGRlY2xhcmluZyB0aGF0LCBpbiBoaXMgb3BpbmlvbiwgaXQgd2FzIG5vdCBsYXdmdWwgb3IgcHJvcGVyIHRoYXQgdGhlIHdyaXRpbmdzIHNob3VsZCBiZSBwdWJsaXNoZWQgYWJyb2FkLiBUaGUgYm9va3Mgd2VyZSB0aGVyZWZvcmUgY2FycmllZCB0byB0aGUgY29taXRpdW0gYW5kIGJ1cm5lZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlaXIgbGlkcyBoYWQgZmFsbGVuIG9mZiwgb25lIGNvZmZpbiB3YXMgc2VlbiB0byBiZSBlbnRpcmVseSBlbXB0eSwgd2l0aG91dCBhbnkgdHJhY2Ugd2hhdGV2ZXIgb2YgdGhlIGJvZHksIGJ1dCBpbiB0aGUgb3RoZXIgdGhlIHdyaXRpbmdzIHdlcmUgZm91bmQuIFRoZXNlIFBldGlsaXVzLCB3aG8gd2FzIHRoZW4gcHJhZXRvciwgaXMgc2FpZCB0byBoYXZlIHJlYWQsIGFuZCB0aGVuIGJyb3VnaHQgdG8gdGhlIHNlbmF0ZSwgZGVjbGFyaW5nIHRoYXQsIGluIGhpcyBvcGluaW9uLCBpdCB3YXMgbm90IGxhd2Z1bCBvciBwcm9wZXIgdGhhdCB0aGUgd3JpdGluZ3Mgc2hvdWxkIGJlIHB1Ymxpc2hlZCBhYnJvYWQuIFRoZSBib29rcyB3ZXJlIHRoZXJlZm9yZSBjYXJyaWVkIHRvIHRoZSBjb21pdGl1bSBhbmQgYnVybmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyB0cnVlLCBpbmRlZWQsIG9mIGFsbCBqdXN0IGFuZCBnb29kIG1lbiwgdGhhdCB0aGV5IGFyZSBwcmFpc2VkIG1vcmUgYWZ0ZXIgdGhleSBoYXZlIGxlZnQgdGhlIHdvcmxkIHRoYW4gYmVmb3JlLCBzaW5jZSBlbnZ5IGRvZXMgbm90IGxvbmcgc3Vydml2ZSB0aGVtLCBhbmQgc29tZSBldmVuIHNlZSBpdCBkaWUgYmVmb3JlIHRoZW07IGJ1dCBpbiBOdW1hJ3MgY2FzZSB0aGUgbWlzZm9ydHVuZXMgb2YgdGhlIGtpbmdzIHdobyBmb2xsb3dlZCBoaW0gbWFkZSBoaXMgZmFtZSBzaGluZSBhbGwgdGhlIGJyaWdodGVyLiBGb3Igb2YgdGhlIGZpdmUgd2hvIGNhbWUgYWZ0ZXIgaGltLCB0aGUgbGFzdCB3YXMgZGV0aHJvbmVkIGFuZCBncmV3IG9sZCBpbiBleGlsZSwgYW5kIG9mIHRoZSBvdGhlciBmb3VyLCBub3Qgb25lIGRpZWQgYSBuYXR1cmFsIGRlYXRoLiBUaHJlZSBvZiB0aGVtIHdlcmUgY29uc3BpcmVkIGFnYWluc3QgYW5kIHNsYWluOyAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgVHVsbHVzIEhvc3RpbGl1cywgd2hvIHJlaWduZWQgbmV4dCBhZnRlciBOdW1hLCBhbmQgd2hvIG1vY2tlZCBhbmQgZGVyaWRlZCBtb3N0IG9mIGhpcyB2aXJ0dWVzLCBhbmQgYWJvdmUgYWxsIGhpcyBkZXZvdGlvbiB0byByZWxpZ2lvbiwgZGVjbGFyaW5nIHRoYXQgaXQgbWFkZSBtZW4gaWRsZSBhbmQgZWZmZW1pbmF0ZSwgdHVybmVkIHRoZSBtaW5kcyBvZiB0aGUgY2l0aXplbnMgdG8gd2FyLiBIZSBoaW1zZWxmOyBob3dldmVyLCBkaWQgbm90IGFiaWRlIGJ5IGhpcyBwcmVzdW1wdHVvdXMgZm9sbHksIGJ1dCB3YXMgY29udmVydGVkIGJ5IGEgZ3JpZXZvdXMgYW5kIGNvbXBsaWNhdGVkIGRpc2Vhc2UsIGFuZCBnYXZlIGhpbXNlbGYgb3ZlciB0byBhIHN1cGVyc3RpdGlvbiB3aGljaCB3YXMgZmFyIHJlbW92ZWQgZnJvbSB0aGUgcGlldHkgb2YgTnVtYS4gSGlzIHN1YmplY3RzLCB0b28sIHdlcmUgZXZlbiBtb3JlIGFmZmVjdGVkIHdpdGggc3VwZXJzdGl0aW9uLCBhcyB3ZSBhcmUgdG9sZCwgd2hlbiBoZSBkaWVkIGJ5IGEgc3Ryb2tlIG9mIGxpZ2h0bmluZy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHRydWUsIGluZGVlZCwgb2YgYWxsIGp1c3QgYW5kIGdvb2QgbWVuLCB0aGF0IHRoZXkgYXJlIHByYWlzZWQgbW9yZSBhZnRlciB0aGV5IGhhdmUgbGVmdCB0aGUgd29ybGQgdGhhbiBiZWZvcmUsIHNpbmNlIGVudnkgZG9lcyBub3QgbG9uZyBzdXJ2aXZlIHRoZW0sIGFuZCBzb21lIGV2ZW4gc2VlIGl0IGRpZSBiZWZvcmUgdGhlbTsgYnV0IGluIE51bWEncyBjYXNlIHRoZSBtaXNmb3J0dW5lcyBvZiB0aGUga2luZ3Mgd2hvIGZvbGxvd2VkIGhpbSBtYWRlIGhpcyBmYW1lIHNoaW5lIGFsbCB0aGUgYnJpZ2h0ZXIuIEZvciBvZiB0aGUgZml2ZSB3aG8gY2FtZSBhZnRlciBoaW0sIHRoZSBsYXN0IHdhcyBkZXRocm9uZWQgYW5kIGdyZXcgb2xkIGluIGV4aWxlLCBhbmQgb2YgdGhlIG90aGVyIGZvdXIsIG5vdCBvbmUgZGllZCBhIG5hdHVyYWwgZGVhdGguIFRocmVlIG9mIHRoZW0gd2VyZSBjb25zcGlyZWQgYWdhaW5zdCBhbmQgc2xhaW47IAoJCQkJPC90cmFuc2xhdGlvbj4="
