var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIGhlIHNheXMgdGhhdCB0aGUgcHJvdmVyYiBzdG9wcyB0aGUgbW91dGhzIG9mIHRob3NlIHdobywgYmVpbmcgd29ydGhsZXNzIGluIHRoZW1zZWx2ZXMsIHRha2UgcmVmdWdlIGluIHRoZSB2aXJ0dWVzIG9mIGNlcnRhaW4gYW5jZXN0b3JzIGFuZCBhcmUgZm9yZXZlciBwcmFpc2luZyB0aGVtLiBCdXQgc3VyZWx5IGZvciBhIG1hbiBpbiB3aG9tLCB0byB1c2UgUGluZGFyJ3Mgd29yZHMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgbm9ibGUgc3Bpcml0IG5hdHVyYWxseSBkaXNwbGF5ZXMgaXRzZWxmIGFzIGluaGVyaXRlZCBmcm9tIHNpcmVzLDwvcT4gYW5kIHdobywgbGlrZSB0aGVlLCBwYXR0ZXJucyBoaXMgbGlmZSBhZnRlciB0aGUgZmFpcmVzdCBleGFtcGxlcyBpbiBoaXMgZmFtaWx5IGxpbmUs4oCUZm9yIHN1Y2ggbWVuIGl0IHdpbGwgYmUgZ29vZCBmb3J0dW5lIHRvIGJlIHJlbWluZGVkIG9mIHRoZWlyIG5vYmxlc3QgcHJvZ2VuaXRvcnMsIGV2ZXIgYW5kIGFub24gaGVhcmluZyB0aGUgc3Rvcnkgb2YgdGhlbSwgb3IgdGVsbGluZyBpdCB0aGVtc2VsdmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBub3QgdGhhdCB0aGV5IGxhY2sgbm9ibGUgcXVhbGl0aWVzIG9mIHRoZWlyIG93biBhbmQgbWFrZSB0aGVpciByZXB1dGF0aW9uIGRlcGVuZGVudCBvbiB0aGVpciBwcmFpc2VzIG9mIG90aGVycywgbmF5IHJhdGhlciwgdGhleSBhc3NvY2lhdGUgdGhlaXIgb3duIGNhcmVlcnMgd2l0aCB0aGUgY2FyZWVycyBvZiB0aGVpciBncmVhdCBhbmNlc3RvcnMsIHdob20gdGhleSBoYWlsIGJvdGggYXMgZm91bmRlcnMgb2YgdGhlaXIgbGluZSBhbmQgYXMgZGlyZWN0b3JzIG9mIHRoZWlyIGxpdmVzLiBBbmQgdGhlcmVmb3JlLCBub3cgdGhhdCBJIGhhdmUgd3JpdHRlbiB0aGUgbGlmZSBvZiBBcmF0dXMsIHdobyB3YXMgdGh5IGNvdW50cnltYW4gYW5kIGZvcmVmYXRoZXIsIGFuZCB0byB3aG9tIHRob3UgdGh5c2VsZiBhcnQgbm8gZGlzY3JlZGl0IGluIGVpdGhlciByZXB1dGF0aW9uIG9yIGluZmx1ZW5jZSwgSSBzZW5kIGl0IHRvIHRoZWUsIG5vdCBhcyB0aG91Z2ggdGhvdSBoYWRzdCBub3QgYmVlbiBhdCBwYWlucyBmcm9tIHRoZSBiZWdpbm5pbmcgdG8gaGF2ZSB0aGUgbW9zdCBwcmVjaXNlIGtub3dsZWRnZSBvZiB0aHkgZ3JlYXQgYW5jZXN0b3IncyBjYXJlZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbiBvcmRlciB0aGF0IHRoeSBzb25zIFBvbHljcmF0ZXMgYW5kIFB5dGhvY2xlcyBtYXkgYmUgcmVhcmVkLCBub3cgYnkgaGVhcmluZyBhbmQgbm93IGJ5IHJlYWRpbmcsIGFmdGVyIGV4YW1wbGVzIGZvdW5kIGluIHRoZWlyIG93biBmYW1pbHkgbGluZeKAlGV4YW1wbGVzIHdoaWNoIGl0IHdlbGwgYmVjb21lcyB0aGVtIHRvIGltaXRhdGUuIEZvciBpdCBpcyB0aGUgbG92ZXIgb2YgaGltc2VsZiwgYW5kIG5vdCB0aGUgbG92ZXIgb2YgZ29vZG5lc3MsIHdobyB0aGlua3MgaGltc2VsZiBhbHdheXMgc3VwZXJpb3IgdG8gb3RoZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjaXR5IG9mIFNpY3lvbiwgYXMgc29vbiBhcyBpdCBoYWQgZmFsbGVuIGF3YXkgZnJvbSBpdHMgcHVyZSBEb3JpYyBmb3JtIG9mIGFyaXN0b2NyYWN5ICh3aGljaCB3YXMgbm93IGxpa2UgYSBoYXJtb255IGRpc3NvbHZlZCkgYW5kIGhhZCBiZWNvbWUgYSBwcmV5IHRvIGZhY3Rpb25zIGFuZCB0aGUgYW1iaXRpb3VzIHNjaGVtZXMgb2YgZGVtYWdvZ3Vlcywgd2FzIHdpdGhvdXQgY2Vhc2UgZGlzdGVtcGVyZWQgYW5kIGFnaXRhdGVkLCBhbmQga2VwdCBjaGFuZ2luZyBvbmUgdHlyYW50IGZvciBhbm90aGVyLCB1bnRpbCwgYWZ0ZXIgdGhlIG11cmRlciBvZiBDbGVvbiwgVGltb2NsZWlkZXMgYW5kIENsZWluaWFzIHdlcmUgY2hvc2VuIGNoaWVmIG1hZ2lzdHJhdGVzLCBtZW4gb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGFuZCBpbmZsdWVuY2UgYW1vbmcgdGhlIGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm8gc29vbmVyIGRpZCB0aGUgZ292ZXJubWVudCBhcHBlYXIgdG8gYmUgc29tZXdoYXQgc2V0dGxlZCB0aGFuIFRpbW9jbGVpZGVzIGRpZWQsIGFuZCBBYmFudGlkYXMgdGhlIHNvbiBvZiBQYXNlYXMsIGF0dGVtcHRpbmcgdG8gbWFrZSBoaW1zZWxmIHR5cmFudCwgc2xldyBDbGVpbmlhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyNjQgQi5DLjwvbm90ZT4gYW5kLCBvZiB0aGUgZnJpZW5kcyBhbmQga2luc21lbiBvZiBDbGVpbmlhcywgYmFuaXNoZWQgc29tZSBhbmQga2lsbGVkIG90aGVycy4gSGUgdHJpZWQgdG8ga2lsbCBhbHNvIHRoZSBzb24gb2YgQ2xlaW5pYXMsIEFyYXR1cywgbGVmdCBmYXRoZXJsZXNzIGF0IHRoZSBhZ2Ugb2Ygc2V2ZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgY29uZnVzaW9uIHdoaWNoIHByZXZhaWxlZCBhYm91dCB0aGUgaG91c2UgdGhlIGJveSBtYWRlIGhpcyBlc2NhcGUgd2l0aCB0aGUgZnVnaXRpdmVzLCBhbmQgd2FuZGVyaW5nIGFib3V0IGluIHRoZSBjaXR5LCBmdWxsIG9mIGZlYXIgYW5kIGhlbHBsZXNzLCBieSBjaGFuY2UgZ290IHVubm90aWNlZCBpbnRvIHRoZSBob3VzZSBvZiBhIHdvbWFuIHdobyB3YXMgYSBzaXN0ZXIgb2YgQWJhbnRpZGFzLCBidXQgaGFkIG1hcnJpZWQgUHJvcGhhbnR1cyB0aGUgYnJvdGhlciBvZiBDbGVpbmlhcy4gSGVyIG5hbWUgd2FzIFNvc28uIFRoaXMgd29tYW4sIHdobyB3YXMgb2YgYSBub2JsZSBuYXR1cmUsIGFuZCB0aG91Z2h0IGl0IGEgZGl2aW5lIGRpc3BlbnNhdGlvbiB0aGF0IHRoZSBib3kgaGFkIHRha2VuIHJlZnVnZSB3aXRoIGhlciwgaGlkIGhpbSBpbiB0aGUgaG91c2UsIGFuZCBhdCBuaWdodCBzZW50IGhpbSBzZWNyZXRseSBvZmYgdG8gQXJnb3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBvZiBTaWN5b24sIGFzIHNvb24gYXMgaXQgaGFkIGZhbGxlbiBhd2F5IGZyb20gaXRzIHB1cmUgRG9yaWMgZm9ybSBvZiBhcmlzdG9jcmFjeSAod2hpY2ggd2FzIG5vdyBsaWtlIGEgaGFybW9ueSBkaXNzb2x2ZWQpIGFuZCBoYWQgYmVjb21lIGEgcHJleSB0byBmYWN0aW9ucyBhbmQgdGhlIGFtYml0aW91cyBzY2hlbWVzIG9mIGRlbWFnb2d1ZXMsIHdhcyB3aXRob3V0IGNlYXNlIGRpc3RlbXBlcmVkIGFuZCBhZ2l0YXRlZCwgYW5kIGtlcHQgY2hhbmdpbmcgb25lIHR5cmFudCBmb3IgYW5vdGhlciwgdW50aWwsIGFmdGVyIHRoZSBtdXJkZXIgb2YgQ2xlb24sIFRpbW9jbGVpZGVzIGFuZCBDbGVpbmlhcyB3ZXJlIGNob3NlbiBjaGllZiBtYWdpc3RyYXRlcywgbWVuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBhbmQgaW5mbHVlbmNlIGFtb25nIHRoZSBjaXRpemVucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBubyBzb29uZXIgZGlkIHRoZSBnb3Zlcm5tZW50IGFwcGVhciB0byBiZSBzb21ld2hhdCBzZXR0bGVkIHRoYW4gVGltb2NsZWlkZXMgZGllZCwgYW5kIEFiYW50aWRhcyB0aGUgc29uIG9mIFBhc2VhcywgYXR0ZW1wdGluZyB0byBtYWtlIGhpbXNlbGYgdHlyYW50LCBzbGV3IENsZWluaWFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjY0IEIuQy48L25vdGU+IGFuZCwgb2YgdGhlIGZyaWVuZHMgYW5kIGtpbnNtZW4gb2YgQ2xlaW5pYXMsIGJhbmlzaGVkIHNvbWUgYW5kIGtpbGxlZCBvdGhlcnMuIEhlIHRyaWVkIHRvIGtpbGwgYWxzbyB0aGUgc29uIG9mIENsZWluaWFzLCBBcmF0dXMsIGxlZnQgZmF0aGVybGVzcyBhdCB0aGUgYWdlIG9mIHNldmVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGUgY29uZnVzaW9uIHdoaWNoIHByZXZhaWxlZCBhYm91dCB0aGUgaG91c2UgdGhlIGJveSBtYWRlIGhpcyBlc2NhcGUgd2l0aCB0aGUgZnVnaXRpdmVzLCBhbmQgd2FuZGVyaW5nIGFib3V0IGluIHRoZSBjaXR5LCBmdWxsIG9mIGZlYXIgYW5kIGhlbHBsZXNzLCBieSBjaGFuY2UgZ290IHVubm90aWNlZCBpbnRvIHRoZSBob3VzZSBvZiBhIHdvbWFuIHdobyB3YXMgYSBzaXN0ZXIgb2YgQWJhbnRpZGFzLCBidXQgaGFkIG1hcnJpZWQgUHJvcGhhbnR1cyB0aGUgYnJvdGhlciBvZiBDbGVpbmlhcy4gSGVyIG5hbWUgd2FzIFNvc28uIFRoaXMgd29tYW4sIHdobyB3YXMgb2YgYSBub2JsZSBuYXR1cmUsIGFuZCB0aG91Z2h0IGl0IGEgZGl2aW5lIGRpc3BlbnNhdGlvbiB0aGF0IHRoZSBib3kgaGFkIHRha2VuIHJlZnVnZSB3aXRoIGhlciwgaGlkIGhpbSBpbiB0aGUgaG91c2UsIGFuZCBhdCBuaWdodCBzZW50IGhpbSBzZWNyZXRseSBvZmYgdG8gQXJnb3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB3YXMgQXJhdHVzIHN0b2xlbiBhd2F5IGZyb20gdGhlIHBlcmlsIHRoYXQgdGhyZWF0ZW5lZCBoaW0sIGFuZCBhdCBvbmNlIHRoYXQgdmVoZW1lbnQgYW5kIGdsb3dpbmcgaGF0cmVkIG9mIHR5cmFudHMgZm9yIHdoaWNoIGhlIHdhcyBub3RlZCBiZWNhbWUgYSBwYXJ0IG9mIGhpcyBuYXR1cmUgYW5kIGdyZXcgd2l0aCBoaXMgZ3Jvd3RoLiBIZSB3YXMgcmVhcmVkIGluIGxpYmVyYWwgZmFzaGlvbiBhbW9uZyB0aGUgZ3Vlc3RzIGFuZCBmcmllbmRzIG9mIGhpcyBmYXRoZXIncyBob3VzZSBhdCBBcmdvcywgYW5kIHNpbmNlIGhlIHNhdyB0aGF0IGhpcyBib2RpbHkgZ3Jvd3RoIHByb21pc2VkIGhpZ2ggaGVhbHRoIGFuZCBzdGF0dXJlLCBoZSBkZXZvdGVkIGhpbXNlbGYgdG8gdGhlIGV4ZXJjaXNlcyBvZiB0aGUgcGFsYWVzdHJhLCBnb2luZyBzbyBmYXIgYXMgdG8gd2luIHdyZWF0aHMgb2YgdmljdG9yeSBpbiBjb250ZXN0aW5nIHRoZSBwZW50YXRobHVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgY29udGVzdCBpbnZvbHZpbmcgdGhlIGZpdmUgYXJ0cyBvZiBydW5uaW5nLCBsZWFwaW5nLCBodXJsaW5nIHRoZSBzcGVhciwgYm94aW5nLCBhbmQgd3Jlc3RsaW5nLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW5kZWVkIGV2ZW4gaGlzIHN0YXR1ZXMgaGF2ZSBwbGFpbmx5IGFuIGF0aGxldGljIGxvb2ssIGFuZCB0aGUgc2FnYWNpdHkgYW5kIG1hamVzdHkgb2YgaGlzIGNvdW50ZW5hbmNlIGRvIG5vdCBhbHRvZ2V0aGVyIGRpc293biB0aGUgYXRobGV0ZSdzIGZ1bGwgZGlldCBhbmQgd2llbGRpbmcgb2YgdGhlIG1hdHRvY2suIFdoZXJlZm9yZSBoaXMgY3VsdGl2YXRpb24gb2Ygb3JhdG9yeSB3YXMgcGVyaGFwcyBsZXNzIGludGVuc2UgdGhhbiBiZWNhbWUgYSBtYW4gaW4gcHVibGljIGxpZmU7IGFuZCB5ZXQgaGUgaXMgc2FpZCB0byBoYXZlIGJlZW4gYSBtb3JlIG9ybmF0ZSBzcGVha2VyIHRoYW4gc29tZSB0aGluayB3aG8ganVkZ2UgZnJvbSB0aGUgQ29tbWVudGFyaWVzIHdoaWNoIGhlIGxlZnQ7IHRoZXNlIHdlcmUgYSBieWUtd29yaywgYW5kIHdlcmUgY29tcG9zZWQgaW4gaGFzdGUsIG9mZi1oYW5kLCBhbmQgaW4gdGhlIHdvcmRzIHRoYXQgZmlyc3Qgb2NjdXJyZWQgdG8gaGltIGluIHRoZSBoZWF0IG9mIGNvbnRlc3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIHdhcyBBcmF0dXMgc3RvbGVuIGF3YXkgZnJvbSB0aGUgcGVyaWwgdGhhdCB0aHJlYXRlbmVkIGhpbSwgYW5kIGF0IG9uY2UgdGhhdCB2ZWhlbWVudCBhbmQgZ2xvd2luZyBoYXRyZWQgb2YgdHlyYW50cyBmb3Igd2hpY2ggaGUgd2FzIG5vdGVkIGJlY2FtZSBhIHBhcnQgb2YgaGlzIG5hdHVyZSBhbmQgZ3JldyB3aXRoIGhpcyBncm93dGguIEhlIHdhcyByZWFyZWQgaW4gbGliZXJhbCBmYXNoaW9uIGFtb25nIHRoZSBndWVzdHMgYW5kIGZyaWVuZHMgb2YgaGlzIGZhdGhlcidzIGhvdXNlIGF0IEFyZ29zLCBhbmQgc2luY2UgaGUgc2F3IHRoYXQgaGlzIGJvZGlseSBncm93dGggcHJvbWlzZWQgaGlnaCBoZWFsdGggYW5kIHN0YXR1cmUsIGhlIGRldm90ZWQgaGltc2VsZiB0byB0aGUgZXhlcmNpc2VzIG9mIHRoZSBwYWxhZXN0cmEsIGdvaW5nIHNvIGZhciBhcyB0byB3aW4gd3JlYXRocyBvZiB2aWN0b3J5IGluIGNvbnRlc3RpbmcgdGhlIHBlbnRhdGhsdW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGNvbnRlc3QgaW52b2x2aW5nIHRoZSBmaXZlIGFydHMgb2YgcnVubmluZywgbGVhcGluZywgaHVybGluZyB0aGUgc3BlYXIsIGJveGluZywgYW5kIHdyZXN0bGluZy48L25vdGU+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgZXZlbiBoaXMgc3RhdHVlcyBoYXZlIHBsYWlubHkgYW4gYXRobGV0aWMgbG9vaywgYW5kIHRoZSBzYWdhY2l0eSBhbmQgbWFqZXN0eSBvZiBoaXMgY291bnRlbmFuY2UgZG8gbm90IGFsdG9nZXRoZXIgZGlzb3duIHRoZSBhdGhsZXRlJ3MgZnVsbCBkaWV0IGFuZCB3aWVsZGluZyBvZiB0aGUgbWF0dG9jay4gV2hlcmVmb3JlIGhpcyBjdWx0aXZhdGlvbiBvZiBvcmF0b3J5IHdhcyBwZXJoYXBzIGxlc3MgaW50ZW5zZSB0aGFuIGJlY2FtZSBhIG1hbiBpbiBwdWJsaWMgbGlmZTsgYW5kIHlldCBoZSBpcyBzYWlkIHRvIGhhdmUgYmVlbiBhIG1vcmUgb3JuYXRlIHNwZWFrZXIgdGhhbiBzb21lIHRoaW5rIHdobyBqdWRnZSBmcm9tIHRoZSBDb21tZW50YXJpZXMgd2hpY2ggaGUgbGVmdDsgdGhlc2Ugd2VyZSBhIGJ5ZS13b3JrLCBhbmQgd2VyZSBjb21wb3NlZCBpbiBoYXN0ZSwgb2ZmLWhhbmQsIGFuZCBpbiB0aGUgd29yZHMgdGhhdCBmaXJzdCBvY2N1cnJlZCB0byBoaW0gaW4gdGhlIGhlYXQgb2YgY29udGVzdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSB0aW1lIGFmdGVyIHRoZSBlc2NhcGUgb2YgQXJhdHVzLCBBYmFudGlkYXMgd2FzIHNsYWluIGJ5IERlaW5pYXMgYW5kIEFyaXN0b3RsZSB0aGUgbG9naWNpYW4uIFRoZSB0eXJhbnQgd2FzIHdvbnQgdG8gYXR0ZW5kIGFsbCB0aGVpciBwdWJsaWMgZGlzcHV0YXRpb25zIGluIHRoZSBtYXJrZXQtcGxhY2UgYW5kIHRvIHRha2UgcGFydCBpbiB0aGVtOyB0aGV5IGVuY291cmFnZWQgaGltIGluIHRoaXMgcHJhY3RpY2UsIGxhaWQgYSBwbG90LCBhbmQgdG9vayBoaXMgbGlmZS4gUGFzZWFzIGFsc28sIHRoZSBmYXRoZXIgb2YgQWJhbnRpZGFzLCBhZnRlciBhc3N1bWluZyB0aGUgc3VwcmVtZSBwb3dlciwgd2FzIHRyZWFjaGVyb3VzbHkgc2xhaW4gYnkgTmljb2NsZXMsIHdobyB0aGVuIHByb2NsYWltZWQgaGltc2VsZiB0eXJhbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIGlzIHNhaWQgdG8gaGF2ZSBib3JuZSBhIHZlcnkgY2xvc2UgcmVzZW1ibGFuY2UgdG8gUGVyaWFuZGVyIHRoZSBzb24gb2YgQ3lwc2VsdXMsIGp1c3QgYXMgT3JvbnRlcyB0aGUgUGVyc2lhbiBkaWQgdG8gQWxjbWFlb24gdGhlIHNvbiBvZiBBbXBoaWFyYcO8cywgYW5kIGFzIHRoZSBTcGFydGFuIHlvdXRoIG1lbnRpb25lZCBieSBNeXJ0aWx1cyBkaWQgdG8gSGVjdG9yLiBNeXJ0aWx1cyB0ZWxscyB1cyB0aGF0IHdoZW4gdGhlIHRocm9uZyBvZiBzcGVjdGF0b3JzIGJlY2FtZSBhd2FyZSBvZiB0aGlzIHJlc2VtYmxhbmNlLCB0aGUgeW91dGggd2FzIHRyYW1wbGVkIHVuZGVyZm9vdC4gCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGltZSBhZnRlciB0aGUgZXNjYXBlIG9mIEFyYXR1cywgQWJhbnRpZGFzIHdhcyBzbGFpbiBieSBEZWluaWFzIGFuZCBBcmlzdG90bGUgdGhlIGxvZ2ljaWFuLiBUaGUgdHlyYW50IHdhcyB3b250IHRvIGF0dGVuZCBhbGwgdGhlaXIgcHVibGljIGRpc3B1dGF0aW9ucyBpbiB0aGUgbWFya2V0LXBsYWNlIGFuZCB0byB0YWtlIHBhcnQgaW4gdGhlbTsgdGhleSBlbmNvdXJhZ2VkIGhpbSBpbiB0aGlzIHByYWN0aWNlLCBsYWlkIGEgcGxvdCwgYW5kIHRvb2sgaGlzIGxpZmUuIFBhc2VhcyBhbHNvLCB0aGUgZmF0aGVyIG9mIEFiYW50aWRhcywgYWZ0ZXIgYXNzdW1pbmcgdGhlIHN1cHJlbWUgcG93ZXIsIHdhcyB0cmVhY2hlcm91c2x5IHNsYWluIGJ5IE5pY29jbGVzLCB3aG8gdGhlbiBwcm9jbGFpbWVkIGhpbXNlbGYgdHlyYW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIGlzIHNhaWQgdG8gaGF2ZSBib3JuZSBhIHZlcnkgY2xvc2UgcmVzZW1ibGFuY2UgdG8gUGVyaWFuZGVyIHRoZSBzb24gb2YgQ3lwc2VsdXMsIGp1c3QgYXMgT3JvbnRlcyB0aGUgUGVyc2lhbiBkaWQgdG8gQWxjbWFlb24gdGhlIHNvbiBvZiBBbXBoaWFyYcO8cywgYW5kIGFzIHRoZSBTcGFydGFuIHlvdXRoIG1lbnRpb25lZCBieSBNeXJ0aWx1cyBkaWQgdG8gSGVjdG9yLiBNeXJ0aWx1cyB0ZWxscyB1cyB0aGF0IHdoZW4gdGhlIHRocm9uZyBvZiBzcGVjdGF0b3JzIGJlY2FtZSBhd2FyZSBvZiB0aGlzIHJlc2VtYmxhbmNlLCB0aGUgeW91dGggd2FzIHRyYW1wbGVkIHVuZGVyZm9vdC4gCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tmljb2NsZXMgd2FzIHR5cmFudCBvZiB0aGUgY2l0eSBmb3IgZm91ciBtb250aHMsIGR1cmluZyB3aGljaCBoZSB3cm91Z2h0IHRoZSBjaXR5IG11Y2ggaGFybSwgYW5kIG5hcnJvd2x5IGVzY2FwZWQgbG9zaW5nIGl0IHRvIHRoZSBBZXRvbGlhbnMgd2hlbiB0aGV5IHBsb3R0ZWQgdG8gc2VpemUgaXQuIEJ5IHRoaXMgdGltZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjI1MSBCLkMuPC9ub3RlPiBBcmF0dXMsIG5vdyBhIHlvdW5nIG1hbiwgd2FzIGhlbGQgaW4gbWFya2VkIGVzdGVlbSBvbiBhY2NvdW50IG9mIGhpcyBoaWdoIGJpcnRoLCBhbmQgb2YgaGlzIHNwaXJpdC4gVGhpcyB3YXMgc2hvd2luZyBpdHNlbGYgdG8gYmUgbm90IGluc2lnbmlmaWNhbnQgbm9yIHlldCB1bmVudGVycHJpc2luZywgYnV0IGVhcm5lc3QsIGFuZCB0ZW1wZXJlZCB3aXRoIGEganVkZ2VtZW50IHNhZmUgYmV5b25kIGhpcyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIHRoZSBleGlsZXMgZnJvbSBTaWN5b24gaGFkIHRoZWlyIG1pbmRzIGZpeGVkIG1vc3Qgb2YgYWxsIHVwb24gaGltLCBhbmQgTmljb2NsZXMgd2FzIG5vdCBuZWdsZWN0ZnVsIG9mIHdoYXQgd2FzIGdvaW5nIG9uLCBidXQga2VwdCBzZWNyZXQgd2F0Y2ggYW5kIHdhcmQgb3ZlciBoaXMgdW5kZXJ0YWtpbmdzLCBub3QgYmVjYXVzZSBoZSBmZWFyZWQgYW55IGRlZWQgb2Ygc28gZ3JlYXQgZGFyaW5nIGFuZCBoYXphcmQgYXMgdGhhdCBpbiB3aGljaCBBcmF0dXMgZmluYWxseSBlbmdhZ2VkLCBidXQgYmVjYXVzZSBoZSBzdXNwZWN0ZWQgdGhhdCBBcmF0dXMgd2FzIGluIGNvbW11bmljYXRpb24gd2l0aCB0aGUga2luZ3Mgd2hvIGhhZCBiZWVuIG9uIHRlcm1zIG9mIGZyaWVuZHNoaXAgYW5kIGhvc3BpdGFsaXR5IHdpdGggaGlzIGZhdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluIHRydXRoIEFyYXR1cyBoYWQgYXR0ZW1wdGVkIHRvIHRyYXZlbCBhbG9uZyB0aGF0IHBhdGguIEJ1dCBzaW5jZSBBbnRpZ29udXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbnRpZ29udXMgR29uYXRhcywga2luZyBvZiBNYWNlZG9uaWEsIDI4My0yMzkgQi5DLjwvbm90ZT4gbmVnbGVjdGVkIGhpcyBwcm9taXNlcyBhbmQgcHJvbG9uZ2VkIHRoZSB0aW1lLCBhbmQgc2luY2UgdGhlIGhvcGVzIGRlcml2ZWQgZnJvbSBFZ3lwdCBhbmQgUHRvbGVteTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlB0b2xlbXkgUGhpbGFkZWxwaHVzLCBraW5nIG9mIEVneXB0IDI4My0yNDcgQi5DLjwvbm90ZT4gd2VyZSBhIGxvbmcgd2F5IG9mZiwgaGUgcmVzb2x2ZWQgdG8gb3ZlcnRocm93IHRoZSB0eXJhbnQgYnkgaGlzIG93biBlZmZvcnRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5OaWNvY2xlcyB3YXMgdHlyYW50IG9mIHRoZSBjaXR5IGZvciBmb3VyIG1vbnRocywgZHVyaW5nIHdoaWNoIGhlIHdyb3VnaHQgdGhlIGNpdHkgbXVjaCBoYXJtLCBhbmQgbmFycm93bHkgZXNjYXBlZCBsb3NpbmcgaXQgdG8gdGhlIEFldG9saWFucyB3aGVuIHRoZXkgcGxvdHRlZCB0byBzZWl6ZSBpdC4gQnkgdGhpcyB0aW1lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yNTEgQi5DLjwvbm90ZT4gQXJhdHVzLCBub3cgYSB5b3VuZyBtYW4sIHdhcyBoZWxkIGluIG1hcmtlZCBlc3RlZW0gb24gYWNjb3VudCBvZiBoaXMgaGlnaCBiaXJ0aCwgYW5kIG9mIGhpcyBzcGlyaXQuIFRoaXMgd2FzIHNob3dpbmcgaXRzZWxmIHRvIGJlIG5vdCBpbnNpZ25pZmljYW50IG5vciB5ZXQgdW5lbnRlcnByaXNpbmcsIGJ1dCBlYXJuZXN0LCBhbmQgdGVtcGVyZWQgd2l0aCBhIGp1ZGdlbWVudCBzYWZlIGJleW9uZCBoaXMgeWVhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgZXhpbGVzIGZyb20gU2ljeW9uIGhhZCB0aGVpciBtaW5kcyBmaXhlZCBtb3N0IG9mIGFsbCB1cG9uIGhpbSwgYW5kIE5pY29jbGVzIHdhcyBub3QgbmVnbGVjdGZ1bCBvZiB3aGF0IHdhcyBnb2luZyBvbiwgYnV0IGtlcHQgc2VjcmV0IHdhdGNoIGFuZCB3YXJkIG92ZXIgaGlzIHVuZGVydGFraW5ncywgbm90IGJlY2F1c2UgaGUgZmVhcmVkIGFueSBkZWVkIG9mIHNvIGdyZWF0IGRhcmluZyBhbmQgaGF6YXJkIGFzIHRoYXQgaW4gd2hpY2ggQXJhdHVzIGZpbmFsbHkgZW5nYWdlZCwgYnV0IGJlY2F1c2UgaGUgc3VzcGVjdGVkIHRoYXQgQXJhdHVzIHdhcyBpbiBjb21tdW5pY2F0aW9uIHdpdGggdGhlIGtpbmdzIHdobyBoYWQgYmVlbiBvbiB0ZXJtcyBvZiBmcmllbmRzaGlwIGFuZCBob3NwaXRhbGl0eSB3aXRoIGhpcyBmYXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0cnV0aCBBcmF0dXMgaGFkIGF0dGVtcHRlZCB0byB0cmF2ZWwgYWxvbmcgdGhhdCBwYXRoLiBCdXQgc2luY2UgQW50aWdvbnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbnRpZ29udXMgR29uYXRhcywga2luZyBvZiBNYWNlZG9uaWEsIDI4My0yMzkgQi5DLjwvbm90ZT4gbmVnbGVjdGVkIGhpcyBwcm9taXNlcyBhbmQgcHJvbG9uZ2VkIHRoZSB0aW1lLCBhbmQgc2luY2UgdGhlIGhvcGVzIGRlcml2ZWQgZnJvbSBFZ3lwdCBhbmQgUHRvbGVteTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHRvbGVteSBQaGlsYWRlbHBodXMsIGtpbmcgb2YgRWd5cHQgMjgzLTI0NyBCLkMuPC9ub3RlPiB3ZXJlIGEgbG9uZyB3YXkgb2ZmLCBoZSByZXNvbHZlZCB0byBvdmVydGhyb3cgdGhlIHR5cmFudCBieSBoaXMgb3duIGVmZm9ydHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IHRvIHdob20gaGUgaW1wYXJ0ZWQgaGlzIGRlc2lnbiB3ZXJlIEFyaXN0b21hY2h1cyBhbmQgRWNkZWx1cy4gT2YgdGhlc2UsIHRoZSBvbmUgd2FzIGFuIGV4aWxlIGZyb20gU2ljeW9uLCBhbmQgRWNkZWx1cyB3YXMgYW4gQXJjYWRpYW4gb2YgTWVnYWxvcG9saXMsIGEgc3R1ZGVudCBvZiBwaGlsb3NvcGh5IGFuZCBhIG1hbiBvZiBhY3Rpb24sIHdobyBoYWQgYmVlbiBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgQXJjZXNpbGHDvHMgdGhlIEFjYWRlbWljIGF0IEF0aGVucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWVuIGVhZ2VybHkgYWRvcHRlZCBoaXMgcHJvcG9zYWxzLCBhbmQgaGUgdGhlbiBiZWdhbiBjb252ZXJzYXRpb25zIHdpdGggdGhlIG90aGVyIGV4aWxlcy4gQSBmZXcgb2YgdGhlc2UgdG9vayBwYXJ0IGluIHRoZSBlbnRlcnByaXNlIGJlY2F1c2UgdGhleSB3ZXJlIGFzaGFtZWQgdG8gZGlzYXBwb2ludCB0aGUgaG9wZSBwbGFjZWQgaW4gdGhlbSwgYnV0IHRoZSBtYWpvcml0eSBhY3R1YWxseSB0cmllZCB0byBzdG9wIEFyYXR1cywgb24gdGhlIGdyb3VuZCB0aGF0IGhpcyBpbmV4cGVyaWVuY2UgbWFkZSBoaW0gb3Zlci1ib2xkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgdG8gd2hvbSBoZSBpbXBhcnRlZCBoaXMgZGVzaWduIHdlcmUgQXJpc3RvbWFjaHVzIGFuZCBFY2RlbHVzLiBPZiB0aGVzZSwgdGhlIG9uZSB3YXMgYW4gZXhpbGUgZnJvbSBTaWN5b24sIGFuZCBFY2RlbHVzIHdhcyBhbiBBcmNhZGlhbiBvZiBNZWdhbG9wb2xpcywgYSBzdHVkZW50IG9mIHBoaWxvc29waHkgYW5kIGEgbWFuIG9mIGFjdGlvbiwgd2hvIGhhZCBiZWVuIGFuIGludGltYXRlIGZyaWVuZCBvZiBBcmNlc2lsYcO8cyB0aGUgQWNhZGVtaWMgYXQgQXRoZW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiBlYWdlcmx5IGFkb3B0ZWQgaGlzIHByb3Bvc2FscywgYW5kIGhlIHRoZW4gYmVnYW4gY29udmVyc2F0aW9ucyB3aXRoIHRoZSBvdGhlciBleGlsZXMuIEEgZmV3IG9mIHRoZXNlIHRvb2sgcGFydCBpbiB0aGUgZW50ZXJwcmlzZSBiZWNhdXNlIHRoZXkgd2VyZSBhc2hhbWVkIHRvIGRpc2FwcG9pbnQgdGhlIGhvcGUgcGxhY2VkIGluIHRoZW0sIGJ1dCB0aGUgbWFqb3JpdHkgYWN0dWFsbHkgdHJpZWQgdG8gc3RvcCBBcmF0dXMsIG9uIHRoZSBncm91bmQgdGhhdCBoaXMgaW5leHBlcmllbmNlIG1hZGUgaGltIG92ZXItYm9sZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIHBsYW5uaW5nIHRvIHNlaXplIHNvbWUgcG9zdCBpbiB0aGUgdGVycml0b3J5IG9mIFNpY3lvbiBmcm9tIHdoaWNoIGhlIG1pZ2h0IHNhbGx5IGZvcnRoIGFuZCBtYWtlIHdhciB1cG9uIHRoZSB0eXJhbnQsIHRoZXJlIGNhbWUgdG8gQXJnb3MgYSBtYW4gb2YgU2ljeW9uIHdobyBoYWQgcnVuIGF3YXkgZnJvbSBwcmlzb24uIEhlIHdhcyBhIGJyb3RoZXIgb2YgWGVub2NsZXMsIG9uZSBvZiB0aGUgZXhpbGVzOyBhbmQgd2hlbiBoZSBoYWQgYmVlbiBicm91Z2h0IHRvIEFyYXR1cyBieSBYZW5vY2xlcywgaGUgdG9sZCBoaW0gdGhhdCB0aGUgcGFydCBvZiB0aGUgY2l0eSdzIHdhbGwgb3ZlciB3aGljaCBoZSBoYWQgY2xpbWJlZCB0byBzYWZldHkgd2FzIGFsbW9zdCBsZXZlbCB3aXRoIHRoZSBncm91bmQgb24gdGhlIGluc2lkZSwgd2hlcmUgaXQgaGFkIGJlZW4gYXR0YWNoZWQgdG8gc3RlZXAgYW5kIHJvY2t5IHBsYWNlcywgYW5kIHRoYXQgb24gdGhlIG91dHNpZGUgaXQgd2FzIG5vdCBhdCBhbGwgdG9vIGhpZ2ggZm9yIHNjYWxpbmctbGFkZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBBcmF0dXMgaGFkIGhlYXJkIHRoaXMsIGhlIHNlbnQgd2l0aCBYZW5vY2xlcyB0d28gc2VydmFudHMgb2YgaGlzIG93biwgU2V1dGhhcyBhbmQgVGVjaG5vbiwgdG8gbWFrZSBhbiBleGFtaW5hdGlvbiBvZiB0aGUgd2FsbDsgZm9yIGhlIHdhcyByZXNvbHZlZCwgaWYgaGUgY291bGQsIHRvIGhhemFyZCB0aGUgd2hvbGUgZW50ZXJwcmlzZSBvbiBvbmUgc2VjcmV0IGFuZCBzd2lmdCBhdHRlbXB0LCByYXRoZXIgdGhhbiBpbiBhIGxvbmcgd2FyIGFuZCBpbiBvcGVuIGNvbnRlc3RzIHRvIG1hdGNoIGhpcyBwcml2YXRlIHJlc291cmNlcyBhZ2FpbnN0IHRob3NlIG9mIGEgdHlyYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3aGVuIFhlbm9jbGVzIGFuZCBoaXMgcGFydHkgY2FtZSBiYWNrIHdpdGggbWVhc3VyZW1lbnRzIG9mIHRoZSB3YWxsIHdoaWNoIHRoZXkgaGFkIHRha2VuLCBhbmQgd2l0aCBhIHJlcG9ydCB0aGF0IHRoZSBwbGFjZSB3YXMgYnkgbmF0dXJlIG5vdCBpbXBhc3NhYmxlIG5vciBldmVuIGRpZmZpY3VsdCAoYWx0aG91Z2ggdGhleSBkZWNsYXJlZCB0aGF0IGl0IHdhcyBoYXJkIHRvIGdldCB0byBpdCB1bmRldGVjdGVkIG93aW5nIHRvIGEgY2VydGFpbiBnYXJkZW5lcidzIGRvZ3MsIHdoaWNoIHdlcmUgbGl0dGxlIGJlYXN0cywgYnV0IGV4dHJhb3JkaW5hcmlseSBmaWVyY2UgYW5kIHNhdmFnZSksIEFyYXR1cyBhdCBvbmNlIHVuZGVydG9vayB0aGUgYnVzaW5lc3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyBwbGFubmluZyB0byBzZWl6ZSBzb21lIHBvc3QgaW4gdGhlIHRlcnJpdG9yeSBvZiBTaWN5b24gZnJvbSB3aGljaCBoZSBtaWdodCBzYWxseSBmb3J0aCBhbmQgbWFrZSB3YXIgdXBvbiB0aGUgdHlyYW50LCB0aGVyZSBjYW1lIHRvIEFyZ29zIGEgbWFuIG9mIFNpY3lvbiB3aG8gaGFkIHJ1biBhd2F5IGZyb20gcHJpc29uLiBIZSB3YXMgYSBicm90aGVyIG9mIFhlbm9jbGVzLCBvbmUgb2YgdGhlIGV4aWxlczsgYW5kIHdoZW4gaGUgaGFkIGJlZW4gYnJvdWdodCB0byBBcmF0dXMgYnkgWGVub2NsZXMsIGhlIHRvbGQgaGltIHRoYXQgdGhlIHBhcnQgb2YgdGhlIGNpdHkncyB3YWxsIG92ZXIgd2hpY2ggaGUgaGFkIGNsaW1iZWQgdG8gc2FmZXR5IHdhcyBhbG1vc3QgbGV2ZWwgd2l0aCB0aGUgZ3JvdW5kIG9uIHRoZSBpbnNpZGUsIHdoZXJlIGl0IGhhZCBiZWVuIGF0dGFjaGVkIHRvIHN0ZWVwIGFuZCByb2NreSBwbGFjZXMsIGFuZCB0aGF0IG9uIHRoZSBvdXRzaWRlIGl0IHdhcyBub3QgYXQgYWxsIHRvbyBoaWdoIGZvciBzY2FsaW5nLWxhZGRlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQXJhdHVzIGhhZCBoZWFyZCB0aGlzLCBoZSBzZW50IHdpdGggWGVub2NsZXMgdHdvIHNlcnZhbnRzIG9mIGhpcyBvd24sIFNldXRoYXMgYW5kIFRlY2hub24sIHRvIG1ha2UgYW4gZXhhbWluYXRpb24gb2YgdGhlIHdhbGw7IGZvciBoZSB3YXMgcmVzb2x2ZWQsIGlmIGhlIGNvdWxkLCB0byBoYXphcmQgdGhlIHdob2xlIGVudGVycHJpc2Ugb24gb25lIHNlY3JldCBhbmQgc3dpZnQgYXR0ZW1wdCwgcmF0aGVyIHRoYW4gaW4gYSBsb25nIHdhciBhbmQgaW4gb3BlbiBjb250ZXN0cyB0byBtYXRjaCBoaXMgcHJpdmF0ZSByZXNvdXJjZXMgYWdhaW5zdCB0aG9zZSBvZiBhIHR5cmFudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gWGVub2NsZXMgYW5kIGhpcyBwYXJ0eSBjYW1lIGJhY2sgd2l0aCBtZWFzdXJlbWVudHMgb2YgdGhlIHdhbGwgd2hpY2ggdGhleSBoYWQgdGFrZW4sIGFuZCB3aXRoIGEgcmVwb3J0IHRoYXQgdGhlIHBsYWNlIHdhcyBieSBuYXR1cmUgbm90IGltcGFzc2FibGUgbm9yIGV2ZW4gZGlmZmljdWx0IChhbHRob3VnaCB0aGV5IGRlY2xhcmVkIHRoYXQgaXQgd2FzIGhhcmQgdG8gZ2V0IHRvIGl0IHVuZGV0ZWN0ZWQgb3dpbmcgdG8gYSBjZXJ0YWluIGdhcmRlbmVyJ3MgZG9ncywgd2hpY2ggd2VyZSBsaXR0bGUgYmVhc3RzLCBidXQgZXh0cmFvcmRpbmFyaWx5IGZpZXJjZSBhbmQgc2F2YWdlKSwgQXJhdHVzIGF0IG9uY2UgdW5kZXJ0b29rIHRoZSBidXNpbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIGxheWluZyBpbiBvZiBhcm1zIHdhcyBub3RoaW5nIHVudXN1YWwsIHNpbmNlIGFsbW9zdCBldmVyeWJvZHkgYXQgdGhhdCB0aW1lIGluZHVsZ2VkIGluIHJvYmJlcmllcyBhbmQgcHJlZGF0b3J5IGZvcmF5czsgYW5kIGFzIGZvciBzY2FsaW5nLWxhZGRlcnMsIEV1cGhyYW5vciB0aGUgZW5naW5lZXIgbWFkZSB0aGVtIG9wZW5seSwgc2luY2UgaGlzIHRyYWRlIHNjcmVlbmVkIGhpbSBmcm9tIHN1c3BpY2lvbjsgYW5kIGhlIHRvbyB3YXMgb25lIG9mIHRoZSBleGlsZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtZW4sIGVhY2ggb2YgdGhlIGZyaWVuZHMgb2YgQXJhdHVzIGluIEFyZ29zIGZ1cm5pc2hlZCBoaW0gd2l0aCB0ZW4gb3V0IG9mIHRoZSBmZXcgdGhleSBoYWQsIGFuZCBoZSBoaW1zZWxmIGVxdWlwcGVkIHRoaXJ0eSBvZiBoaXMgb3duIHNlcnZhbnRzIHdpdGggYXJtcy4gVGhyb3VnaCBYZW5vcGhpbHVzLCB0aGUgZm9yZW1vc3Qgb2YgdGhlIHJvYmJlciBjYXB0YWlucywgaGUgYWxzbyBoaXJlZCBhIGZldyBzb2xkaWVycywgdG8gd2hvbSBpdCB3YXMgZ2l2ZW4gb3V0IHRoYXQgYSBmb3JheSB3YXMgdG8gYmUgbWFkZSBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgU2ljeW9uIHRvIHNlaXplIHRoZSBob3JzZXMgb2YgQW50aWdvbnVzLiBBbmQgbW9zdCBvZiB0aGVtIHdlcmUgc2VudCBvbiBhaGVhZCBpbiBzbWFsbCBiYW5kcyB0byB0aGUgdG93ZXIgb2YgUG9seWdub3R1cywgd2l0aCBvcmRlcnMgdG8gd2FpdCB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIGFsc28gc2VudCBvbiBpbiBhZHZhbmNlIENhcGhpc2lhcywgbGlnaHRseSBhcm1lZCwgd2l0aCBmb3VyIGNvbXBhbmlvbnM7IHRoZWlyIG9yZGVycyB3ZXJlIHRvIGNvbWUgdG8gdGhlIGdhcmRlbmVyJ3Mgd2hlbiBpdCB3YXMgZGFyaywgcHJldGVuZGluZyB0byBiZSB0cmF2ZWxsZXJzLCBhbmQgYWZ0ZXIgdGFraW5nIHVwIHF1YXJ0ZXJzIHRoZXJlIGZvciB0aGUgbmlnaHQsIHRvIHNodXQgdXAgaGltIGFuZCBoaXMgZG9nczsgZm9yIHRoZXJlIHdhcyBubyBvdGhlciB3YXkgdG8gZ2V0IHBhc3QgdGhlbS4gVGhlIHNjYWxpbmctbGFkZGVycywgd2hpY2ggY291bGQgYmUgdGFrZW4gYXBhcnQsIHdlcmUgcGFja2VkIGluIGJveGVzLCBhbmQgdGh1cyBjb25jZWFsZWQgd2VyZSBzZW50IG9uIGFoZWFkIGluIHdhZ2dvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIGxheWluZyBpbiBvZiBhcm1zIHdhcyBub3RoaW5nIHVudXN1YWwsIHNpbmNlIGFsbW9zdCBldmVyeWJvZHkgYXQgdGhhdCB0aW1lIGluZHVsZ2VkIGluIHJvYmJlcmllcyBhbmQgcHJlZGF0b3J5IGZvcmF5czsgYW5kIGFzIGZvciBzY2FsaW5nLWxhZGRlcnMsIEV1cGhyYW5vciB0aGUgZW5naW5lZXIgbWFkZSB0aGVtIG9wZW5seSwgc2luY2UgaGlzIHRyYWRlIHNjcmVlbmVkIGhpbSBmcm9tIHN1c3BpY2lvbjsgYW5kIGhlIHRvbyB3YXMgb25lIG9mIHRoZSBleGlsZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtZW4sIGVhY2ggb2YgdGhlIGZyaWVuZHMgb2YgQXJhdHVzIGluIEFyZ29zIGZ1cm5pc2hlZCBoaW0gd2l0aCB0ZW4gb3V0IG9mIHRoZSBmZXcgdGhleSBoYWQsIGFuZCBoZSBoaW1zZWxmIGVxdWlwcGVkIHRoaXJ0eSBvZiBoaXMgb3duIHNlcnZhbnRzIHdpdGggYXJtcy4gVGhyb3VnaCBYZW5vcGhpbHVzLCB0aGUgZm9yZW1vc3Qgb2YgdGhlIHJvYmJlciBjYXB0YWlucywgaGUgYWxzbyBoaXJlZCBhIGZldyBzb2xkaWVycywgdG8gd2hvbSBpdCB3YXMgZ2l2ZW4gb3V0IHRoYXQgYSBmb3JheSB3YXMgdG8gYmUgbWFkZSBpbnRvIHRoZSB0ZXJyaXRvcnkgb2YgU2ljeW9uIHRvIHNlaXplIHRoZSBob3JzZXMgb2YgQW50aWdvbnVzLiBBbmQgbW9zdCBvZiB0aGVtIHdlcmUgc2VudCBvbiBhaGVhZCBpbiBzbWFsbCBiYW5kcyB0byB0aGUgdG93ZXIgb2YgUG9seWdub3R1cywgd2l0aCBvcmRlcnMgdG8gd2FpdCB0aGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBhbHNvIHNlbnQgb24gaW4gYWR2YW5jZSBDYXBoaXNpYXMsIGxpZ2h0bHkgYXJtZWQsIHdpdGggZm91ciBjb21wYW5pb25zOyB0aGVpciBvcmRlcnMgd2VyZSB0byBjb21lIHRvIHRoZSBnYXJkZW5lcidzIHdoZW4gaXQgd2FzIGRhcmssIHByZXRlbmRpbmcgdG8gYmUgdHJhdmVsbGVycywgYW5kIGFmdGVyIHRha2luZyB1cCBxdWFydGVycyB0aGVyZSBmb3IgdGhlIG5pZ2h0LCB0byBzaHV0IHVwIGhpbSBhbmQgaGlzIGRvZ3M7IGZvciB0aGVyZSB3YXMgbm8gb3RoZXIgd2F5IHRvIGdldCBwYXN0IHRoZW0uIFRoZSBzY2FsaW5nLWxhZGRlcnMsIHdoaWNoIGNvdWxkIGJlIHRha2VuIGFwYXJ0LCB3ZXJlIHBhY2tlZCBpbiBib3hlcywgYW5kIHRodXMgY29uY2VhbGVkIHdlcmUgc2VudCBvbiBhaGVhZCBpbiB3YWdnb25zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbWVhbnRpbWUgc29tZSBzcGllcyBvZiBOaWNvY2xlcyBhcHBlYXJlZCBpbiBBcmdvcyBhbmQgd2VyZSByZXBvcnRlZCB0byBiZSBzZWNyZXRseSBnb2luZyBhYm91dCBhbmQgd2F0Y2hpbmcgdGhlIG1vdmVtZW50cyBvZiBBcmF0dXMuIEFzIHNvb24gYXMgaXQgd2FzIGRheSwgdGhlcmVmb3JlLCBBcmF0dXMgbGVmdCBoaXMgaG91c2UgYW5kIHNob3dlZCBoaW1zZWxmIG9wZW5seSBpbiB0aGUgbWFya2V0LXBsYWNlLCBjb252ZXJzaW5nIHdpdGggaGlzIGZyaWVuZHM7IHRoZW4gaGUgYW5vaW50ZWQgaGltc2VsZiBpbiB0aGUgZ3ltbmFzaXVtLCB0b29rIHdpdGggaGltIGZyb20gdGhlIHBhbGFlc3RyYSBzb21lIG9mIHRoZSB5b3VuZyBtZW4gd2hvIHdlcmUgd29udCB0byBkcmluayBhbmQgbWFrZSBob2xpZGF5IHdpdGggaGltLCBhbmQgd2VudCBiYWNrIGhvbWU7IGFuZCBhZnRlciBhIGxpdHRsZSBvbmUgb2YgaGlzIHNlcnZhbnRzIHdhcyBzZWVuIGNhcnJ5aW5nIGdhcmxhbmRzIHRocm91Z2ggdGhlIG1hcmtldC1wbGFjZSwgYW5vdGhlciBidXlpbmcgbGlnaHRzLCBhbmQgYW5vdGhlciB0YWxraW5nIHdpdGggdGhlIHdvbWVuIHRoYXQgcmVndWxhcmx5IGZ1cm5pc2hlZCBtdXNpYyBvZiBoYXJwIGFuZCBmbHV0ZSBhdCBiYW5xdWV0cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc3BpZXMgc2F3IGFsbCB0aGlzLCB0aGV5IHdlcmUgY29tcGxldGVseSBkZWNlaXZlZCwgYW5kIHdpdGggbG91ZCBsYXVnaHRlciBzYWlkIHRvIG9uZSBhbm90aGVyOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdGhpbmcsIHlvdSBzZWUsIGlzIG1vcmUgdGltb3JvdXMgdGhhbiBhIHR5cmFudCwgc2luY2UgZXZlbiBOaWNvY2xlcywgdGhvdWdoIG1hc3RlciBvZiBzbyBncmVhdCBhIGNpdHkgYW5kIHNvIGxhcmdlIGEgZm9yY2UsIGlzIGluIGZlYXIgb2YgYSBzdHJpcGxpbmcgd2hvIHNxdWFuZGVycyBvbiBwbGVhc3VyZXMgYW5kIG1pZC1kYXkgYmFucXVldHMgaGlzIG1lYW5zIG9mIHN1YnNpc3RlbmNlIGluIGV4aWxlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtZWFudGltZSBzb21lIHNwaWVzIG9mIE5pY29jbGVzIGFwcGVhcmVkIGluIEFyZ29zIGFuZCB3ZXJlIHJlcG9ydGVkIHRvIGJlIHNlY3JldGx5IGdvaW5nIGFib3V0IGFuZCB3YXRjaGluZyB0aGUgbW92ZW1lbnRzIG9mIEFyYXR1cy4gQXMgc29vbiBhcyBpdCB3YXMgZGF5LCB0aGVyZWZvcmUsIEFyYXR1cyBsZWZ0IGhpcyBob3VzZSBhbmQgc2hvd2VkIGhpbXNlbGYgb3Blbmx5IGluIHRoZSBtYXJrZXQtcGxhY2UsIGNvbnZlcnNpbmcgd2l0aCBoaXMgZnJpZW5kczsgdGhlbiBoZSBhbm9pbnRlZCBoaW1zZWxmIGluIHRoZSBneW1uYXNpdW0sIHRvb2sgd2l0aCBoaW0gZnJvbSB0aGUgcGFsYWVzdHJhIHNvbWUgb2YgdGhlIHlvdW5nIG1lbiB3aG8gd2VyZSB3b250IHRvIGRyaW5rIGFuZCBtYWtlIGhvbGlkYXkgd2l0aCBoaW0sIGFuZCB3ZW50IGJhY2sgaG9tZTsgYW5kIGFmdGVyIGEgbGl0dGxlIG9uZSBvZiBoaXMgc2VydmFudHMgd2FzIHNlZW4gY2FycnlpbmcgZ2FybGFuZHMgdGhyb3VnaCB0aGUgbWFya2V0LXBsYWNlLCBhbm90aGVyIGJ1eWluZyBsaWdodHMsIGFuZCBhbm90aGVyIHRhbGtpbmcgd2l0aCB0aGUgd29tZW4gdGhhdCByZWd1bGFybHkgZnVybmlzaGVkIG11c2ljIG9mIGhhcnAgYW5kIGZsdXRlIGF0IGJhbnF1ZXRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHNwaWVzIHNhdyBhbGwgdGhpcywgdGhleSB3ZXJlIGNvbXBsZXRlbHkgZGVjZWl2ZWQsIGFuZCB3aXRoIGxvdWQgbGF1Z2h0ZXIgc2FpZCB0byBvbmUgYW5vdGhlcjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vdGhpbmcsIHlvdSBzZWUsIGlzIG1vcmUgdGltb3JvdXMgdGhhbiBhIHR5cmFudCwgc2luY2UgZXZlbiBOaWNvY2xlcywgdGhvdWdoIG1hc3RlciBvZiBzbyBncmVhdCBhIGNpdHkgYW5kIHNvIGxhcmdlIGEgZm9yY2UsIGlzIGluIGZlYXIgb2YgYSBzdHJpcGxpbmcgd2hvIHNxdWFuZGVycyBvbiBwbGVhc3VyZXMgYW5kIG1pZC1kYXkgYmFucXVldHMgaGlzIG1lYW5zIG9mIHN1YnNpc3RlbmNlIGluIGV4aWxlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BpZXMsIHRoZW4sIHRodXMgbWlzbGVkLCBsZWZ0IHRoZSBjaXR5OyBidXQgQXJhdHVzLCBpbW1lZGlhdGVseSBhZnRlciB0aGUgbW9ybmluZyBtZWFsLCBzYWxsaWVkIGZvcnRoLCBqb2luZWQgaGlzIHNvbGRpZXJzIGF0IHRoZSB0b3dlciBvZiBQb2x5Z25vdHVzLCBhbmQgbGVkIHRoZW0gb24gdG8gTmVtZWEuIEhlcmUgaGUgZGlzY2xvc2VkIGhpcyBkZXNpZ24sIHRvIG1vc3Qgb2YgdGhlbSB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSwgYW5kIG1hZGUgdGhlbSBleGhvcnRhdGlvbnMgYW5kIHByb21pc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciBnaXZpbmcgb3V0IGFzIHdhdGNod29yZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFwb2xsbyBWaWN0b3Jpb3VzLDwvcT4gaGUgbGVkIHRoZW0gZm9yd2FyZCBhZ2FpbnN0IFNpY3lvbiwgcXVpY2tlbmluZyBvciByZXRhcmRpbmcgaGlzIHByb2dyZXNzIGFjY29yZGluZyB0byB0aGUgcmV2b2x1dGlvbiBvZiB0aGUgbW9vbiwgc28gYXMgdG8gZW5qb3kgaGVyIGxpZ2h0IHdoaWxlIG9uIHRoZSBtYXJjaCwgYW5kIGFzIHNvb24gYXMgc2hlIHdhcyBzZXR0aW5nIHRvIGJlIGF0IHRoZSBnYXJkZW4gbmVhciB0aGUgd2FsbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgQ2FwaGlzaWFzIGNhbWUgdG8gbWVldCBoaW07IGhlIGhhZCBub3Qgc2VjdXJlZCB0aGUgZG9ncyAoZm9yIHRoZXkgaGFkIGJvdW5kZWQgb2ZmIGJlZm9yZSBoZSBjb3VsZCBkbyB0aGlzKSwgYnV0IGhhZCBsb2NrZWQgdXAgdGhlIGdhcmRlbmVyLiBNb3N0IG9mIGhpcyBtZW4gd2VyZSBkaXNoZWFydGVuZWQgYXQgdGhpcyBhbmQgdXJnZWQgQXJhdHVzIHRvIHJldGlyZTsgYnV0IGhlIHRyaWVkIHRvIGVuY291cmFnZSB0aGVtLCBwcm9taXNpbmcgdG8gbGVhZCB0aGVtIGJhY2sgaWYgdGhlIGRvZ3Mgc2hvdWxkIHByb3ZlIHRvbyB0cm91Ymxlc29tZSBmb3IgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHNhbWUgdGltZSBoZSBzZW50IGZvcndhcmQgdGhlIG1lbiB3aG8gY2FycmllZCB0aGUgc2NhbGluZy1sYWRkZXJzLCB1bmRlciB0aGUgY29tbWFuZCBvZiBFY2RlbHVzIGFuZCBNbmFzaXRoZXVzLCB3aGlsZSBoZSBoaW1zZWxmIGZvbGxvd2VkIGFmdGVyIHRoZW0gc2xvd2x5LCB0aGUgZG9ncyBhbHJlYWR5IGJhcmtpbmcgdmlnb3JvdXNseSBhbmQgcnVubmluZyBhbG9uZyBieSB0aGUgc2lkZSBvZiBFY2RlbHVzIGFuZCBoaXMgcGFydHkuIEhvd2V2ZXIsIHRoZXkgcmVhY2hlZCB0aGUgd2FsbCBhbmQgcGxhbnRlZCB0aGVpciBsYWRkZXJzIGFnYWluc3QgaXQgd2l0aG91dCBtaXNoYXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0aGUgZmlyc3QgbWVuIHdlcmUgbW91bnRpbmcgdGhlIGxhZGRlcnMsIHRoZSBvZmZpY2VyIHdobyB3YXMgdG8gc2V0IHRoZSBtb3JuaW5nLXdhdGNoIGJlZ2FuIG1ha2luZyBoaXMgcm91bmRzIHdpdGggYSBiZWxsLCBhbmQgdGhlcmUgd2VyZSBtYW55IGxpZ2h0cyBhbmQgdGhlIG5vaXNlIG9mIHRoZSBzZW50cmllcyBjb21pbmcgdXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbnRyaWVzIHdobyBoYWQgZm9ybWVkIHRoZSBuaWdodC13YXRjaCBjYW1lIHVwIGF0IHRoZSBzb3VuZCBvZiB0aGUgYmVsbCwgdG8gYmUgaW5zcGVjdGVkLCBhbmQgdGhlbiByZWxpZXZlZCBieSB0aGUgbW9ybmluZy13YXRjaC48L25vdGU+IFRoZSBpbnZhZGVycywgaG93ZXZlciwgY3JvdWNoZWQgZG93biBqdXN0IHdoZXJlIHRoZXkgd2VyZSBvbiB0aGUgbGFkZGVycywgYW5kIHNvIGVzY2FwZWQgdGhlIG5vdGljZSBvZiB0aGlzIHBhcnR5IHdpdGhvdXQgYW55IHRyb3VibGU7IGJ1dCBzaW5jZSBhbm90aGVyIHdhdGNoIHdhcyBjb21pbmcgdXAgdG8gbWVldCB0aGUgZmlyc3QsIHRoZXkgaW5jdXJyZWQgdGhlIGdyZWF0ZXN0IGRhbmdlci4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhleSBlc2NhcGVkIHRoZSBub3RpY2Ugb2YgdGhpcyBndWFyZCBhbHNvIGFzIGl0IHBhc3NlZCBieSwgYW5kIHRoZW4gdGhlIGxlYWRlcnMsIE1uYXNpdGhldXMgYW5kIEVjZGVsdXMsIGF0IG9uY2UgbW91bnRlZCB0byB0aGUgdG9wLCBhbmQgYWZ0ZXIgb2NjdXB5aW5nIHRoZSBhcHByb2FjaGVzIHRvIHRoZSB3YWxsIG9uIGVpdGhlciBzaWRlLCBzZW50IFRlY2hub24gdG8gQXJhdHVzLCB1cmdpbmcgaGltIHRvIGhhc3RlbiB1cC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BpZXMsIHRoZW4sIHRodXMgbWlzbGVkLCBsZWZ0IHRoZSBjaXR5OyBidXQgQXJhdHVzLCBpbW1lZGlhdGVseSBhZnRlciB0aGUgbW9ybmluZyBtZWFsLCBzYWxsaWVkIGZvcnRoLCBqb2luZWQgaGlzIHNvbGRpZXJzIGF0IHRoZSB0b3dlciBvZiBQb2x5Z25vdHVzLCBhbmQgbGVkIHRoZW0gb24gdG8gTmVtZWEuIEhlcmUgaGUgZGlzY2xvc2VkIGhpcyBkZXNpZ24sIHRvIG1vc3Qgb2YgdGhlbSB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSwgYW5kIG1hZGUgdGhlbSBleGhvcnRhdGlvbnMgYW5kIHByb21pc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGdpdmluZyBvdXQgYXMgd2F0Y2h3b3JkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BcG9sbG8gVmljdG9yaW91cyw8L3E+IGhlIGxlZCB0aGVtIGZvcndhcmQgYWdhaW5zdCBTaWN5b24sIHF1aWNrZW5pbmcgb3IgcmV0YXJkaW5nIGhpcyBwcm9ncmVzcyBhY2NvcmRpbmcgdG8gdGhlIHJldm9sdXRpb24gb2YgdGhlIG1vb24sIHNvIGFzIHRvIGVuam95IGhlciBsaWdodCB3aGlsZSBvbiB0aGUgbWFyY2gsIGFuZCBhcyBzb29uIGFzIHNoZSB3YXMgc2V0dGluZyB0byBiZSBhdCB0aGUgZ2FyZGVuIG5lYXIgdGhlIHdhbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIENhcGhpc2lhcyBjYW1lIHRvIG1lZXQgaGltOyBoZSBoYWQgbm90IHNlY3VyZWQgdGhlIGRvZ3MgKGZvciB0aGV5IGhhZCBib3VuZGVkIG9mZiBiZWZvcmUgaGUgY291bGQgZG8gdGhpcyksIGJ1dCBoYWQgbG9ja2VkIHVwIHRoZSBnYXJkZW5lci4gTW9zdCBvZiBoaXMgbWVuIHdlcmUgZGlzaGVhcnRlbmVkIGF0IHRoaXMgYW5kIHVyZ2VkIEFyYXR1cyB0byByZXRpcmU7IGJ1dCBoZSB0cmllZCB0byBlbmNvdXJhZ2UgdGhlbSwgcHJvbWlzaW5nIHRvIGxlYWQgdGhlbSBiYWNrIGlmIHRoZSBkb2dzIHNob3VsZCBwcm92ZSB0b28gdHJvdWJsZXNvbWUgZm9yIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUgaGUgc2VudCBmb3J3YXJkIHRoZSBtZW4gd2hvIGNhcnJpZWQgdGhlIHNjYWxpbmctbGFkZGVycywgdW5kZXIgdGhlIGNvbW1hbmQgb2YgRWNkZWx1cyBhbmQgTW5hc2l0aGV1cywgd2hpbGUgaGUgaGltc2VsZiBmb2xsb3dlZCBhZnRlciB0aGVtIHNsb3dseSwgdGhlIGRvZ3MgYWxyZWFkeSBiYXJraW5nIHZpZ29yb3VzbHkgYW5kIHJ1bm5pbmcgYWxvbmcgYnkgdGhlIHNpZGUgb2YgRWNkZWx1cyBhbmQgaGlzIHBhcnR5LiBIb3dldmVyLCB0aGV5IHJlYWNoZWQgdGhlIHdhbGwgYW5kIHBsYW50ZWQgdGhlaXIgbGFkZGVycyBhZ2FpbnN0IGl0IHdpdGhvdXQgbWlzaGFwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0aGUgZmlyc3QgbWVuIHdlcmUgbW91bnRpbmcgdGhlIGxhZGRlcnMsIHRoZSBvZmZpY2VyIHdobyB3YXMgdG8gc2V0IHRoZSBtb3JuaW5nLXdhdGNoIGJlZ2FuIG1ha2luZyBoaXMgcm91bmRzIHdpdGggYSBiZWxsLCBhbmQgdGhlcmUgd2VyZSBtYW55IGxpZ2h0cyBhbmQgdGhlIG5vaXNlIG9mIHRoZSBzZW50cmllcyBjb21pbmcgdXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2VudHJpZXMgd2hvIGhhZCBmb3JtZWQgdGhlIG5pZ2h0LXdhdGNoIGNhbWUgdXAgYXQgdGhlIHNvdW5kIG9mIHRoZSBiZWxsLCB0byBiZSBpbnNwZWN0ZWQsIGFuZCB0aGVuIHJlbGlldmVkIGJ5IHRoZSBtb3JuaW5nLXdhdGNoLjwvbm90ZT4gVGhlIGludmFkZXJzLCBob3dldmVyLCBjcm91Y2hlZCBkb3duIGp1c3Qgd2hlcmUgdGhleSB3ZXJlIG9uIHRoZSBsYWRkZXJzLCBhbmQgc28gZXNjYXBlZCB0aGUgbm90aWNlIG9mIHRoaXMgcGFydHkgd2l0aG91dCBhbnkgdHJvdWJsZTsgYnV0IHNpbmNlIGFub3RoZXIgd2F0Y2ggd2FzIGNvbWluZyB1cCB0byBtZWV0IHRoZSBmaXJzdCwgdGhleSBpbmN1cnJlZCB0aGUgZ3JlYXRlc3QgZGFuZ2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZXkgZXNjYXBlZCB0aGUgbm90aWNlIG9mIHRoaXMgZ3VhcmQgYWxzbyBhcyBpdCBwYXNzZWQgYnksIGFuZCB0aGVuIHRoZSBsZWFkZXJzLCBNbmFzaXRoZXVzIGFuZCBFY2RlbHVzLCBhdCBvbmNlIG1vdW50ZWQgdG8gdGhlIHRvcCwgYW5kIGFmdGVyIG9jY3VweWluZyB0aGUgYXBwcm9hY2hlcyB0byB0aGUgd2FsbCBvbiBlaXRoZXIgc2lkZSwgc2VudCBUZWNobm9uIHRvIEFyYXR1cywgdXJnaW5nIGhpbSB0byBoYXN0ZW4gdXAuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGl0IHdhcyBubyBncmVhdCBkaXN0YW5jZSBmcm9tIHRoZSBnYXJkZW4gdG8gdGhlIHdhbGwsIGFuZCB0byB0aGUgdG93ZXIsIGluIHdoaWNoIGEgaHVnZSBkb2cgd2FzIG9uIHRoZSB3YXRjaCwgYSBodW50ZXIuIFRoZSBkb2cgaGltc2VsZiBkaWQgbm90IG5vdGljZSB0aGVpciBhcHByb2FjaCwgZWl0aGVyIGJlY2F1c2UgaGUgd2FzIG5hdHVyYWxseSBzbHVnZ2lzaCwgb3IgYmVjYXVzZSBkdXJpbmcgdGhlIGRheSBoZSBoYWQgYmVjb21lIHRpcmVkIG91dC4gQnV0IHdoZW4gdGhlIGdhcmRlbmVyJ3Mgd2hlbHBzIGNoYWxsZW5nZWQgaGltIGZyb20gYmVsb3csIGhlIGJlZ2FuIHRvIGdyb3dsIGluIHJlc3BvbnNlLCBmYWludGx5IGFuZCBpbmRpc3RpbmN0bHkgYXQgZmlyc3QsIHRoZW4gYmF5ZWQgb3V0IG1vcmUgbG91ZGx5IGFzIHRoZXkgcGFzc2VkIGJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QcmVzZW50bHkgdGhlIHdob2xlIHBsYWNlIHJlc291bmRlZCB3aXRoIGJhcmtpbmcsIHNvIHRoYXQgdGhlIHdhdGNobWFuIG9wcG9zaXRlIGNhbGxlZCB3aXRoIGEgbG91ZCBjcnkgdG8gdGhlIGh1bnRzbWFuIGFza2luZyB3aHkgaGlzIGRvZyB3YXMgYmF5aW5nIHNvIHNhdmFnZWx5IGFuZCB3aGV0aGVyIHNvbWUgbWlzY2hpZWYgd2FzIG5vdCBhZm9vdC4gVGhlIGh1bnRzbWFuIGFuc3dlcmVkIGhpbSBmcm9tIHRoZSB0b3dlciB0aGF0IHRoZXJlIHdhcyBub3RoaW5nIHRvIGZlYXIsIGJ1dCB0aGF0IGhpcyBkb2cgaGFkIGJlZW4gZXhjaXRlZCBieSB0aGUgbGlnaHRzIG9mIHRoZSBzZW50cmllcyBhbmQgdGhlIGRpbiBvZiB0aGUgYmVsbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBnYXZlIGhlYXJ0IHRvIHRoZSBzb2xkaWVycyBvZiBBcmF0dXMuIFRoZXkgdGhvdWdodCB0aGF0IHRoZSBodW50c21hbiB3YXMgcHJpdnkgdG8gdGhlaXIgZGVzaWduIGFuZCB3YXMgdHJ5aW5nIHRvIGNvbmNlYWwgaXQsIGFuZCB0aGF0IHRoZXJlIHdlcmUgbWFueSBvdGhlcnMgYWxzbyBpbiB0aGUgY2l0eSB3aG8gd291bGQgYXNzaXN0IHRoZW0uIEhvd2V2ZXIsIHdoZW4gdGhlIHJlc3Qgb2YgdGhlIGNvbXBhbnkgZXNzYXllZCB0aGUgd2FsbCwgdGhlaXIgcGVyaWwgd2FzIGdyaWV2b3VzIGFuZCBwcm90cmFjdGVkLCBzaW5jZSB0aGUgbGFkZGVycyBzaG9vayB1bmxlc3MgdGhleSBtb3VudGVkIG9uZSBieSBvbmUgYW5kIHNsb3dseTsgbW9yZW92ZXIsIHRpbWUgd2FzIHByZXNzaW5nLCBzaW5jZSBjb2NrcyB3ZXJlIGFscmVhZHkgY3Jvd2luZywgYW5kIGRpcmVjdGx5IHRoZSBwZW9wbGUgd2hvIGJyb3VnaHQgcHJvZHVjZSBmcm9tIHRoZSBjb3VudHJ5IHRvIHRoZSBtYXJrZXQtcGxhY2Ugd291bGQgYmUgY29taW5nIHVwLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgQXJhdHVzIGFsc28gbW91bnRlZCB0aGUgd2FsbCBpbiBoYXN0ZSwgYWZ0ZXIgZm9ydHkgaW4gYWxsIGhhZCBtb3VudGVkIGJlZm9yZSBoaW07IGFuZCB3aGVuIGhlIGhhZCBiZWVuIGpvaW5lZCBieSBhIGZldyBtb3JlIG9mIHRob3NlIGJlbG93LCBoZSB3ZW50IHVwIGFnYWluc3QgdGhlIHR5cmFudCdzIGhvdXNlIGFuZCB0aGUgcHJhZXRvcml1bSwgd2hlcmUgdGhlIG1lcmNlbmFyeSBzb2xkaWVycyBwYXNzZWQgdGhlIG5pZ2h0LiBBbmQgYWZ0ZXIgZmFsbGluZyB1cG9uIHRoZXNlIHN1ZGRlbmx5IGFuZCBjYXB0dXJpbmcgdGhlbSBhbGwsIGJ1dCBraWxsaW5nIG5vbmUsIGhlIHN0cmFpZ2h0d2F5IHNlbnQgbWVzc2FnZXMgdG8gaGlzIGZyaWVuZHMgc3VtbW9uaW5nIHRoZW0gYWxsIGZyb20gdGhlaXIgaG9tZXMsIGFuZCB0aGV5IHJhbiB0b2dldGhlciBmcm9tIGFsbCBxdWFydGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RGF5IHdhcyBub3cgYnJlYWtpbmcsIGFuZCB0aGUgdGhlYXRyZSB3YXMgdGhyb25nZWQgd2l0aCBwZW9wbGUgd2hvIHN0aWxsIHdlcmUgaW4gc3VzcGVuc2UgYmVjYXVzZSBvZiB0aGUgdW5jZXJ0YWluIHJ1bW91ciB0aGF0IHByZXZhaWxlZCBhbmQgaW4gdXR0ZXIgaWdub3JhbmNlIG9mIHdoYXQgd2FzIGFmb290LCB1bnRpbCB0aGUgaGVyYWxkIGNhbWUgZm9yd2FyZCBhbmQgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCBBcmF0dXMgdGhlIHNvbiBvZiBDbGVpbmlhcyBpbnZpdGVkIHRoZSBjaXRpemVucyB0byBzZWN1cmUgdGhlaXIgZnJlZWRvbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaXQgd2FzIG5vIGdyZWF0IGRpc3RhbmNlIGZyb20gdGhlIGdhcmRlbiB0byB0aGUgd2FsbCwgYW5kIHRvIHRoZSB0b3dlciwgaW4gd2hpY2ggYSBodWdlIGRvZyB3YXMgb24gdGhlIHdhdGNoLCBhIGh1bnRlci4gVGhlIGRvZyBoaW1zZWxmIGRpZCBub3Qgbm90aWNlIHRoZWlyIGFwcHJvYWNoLCBlaXRoZXIgYmVjYXVzZSBoZSB3YXMgbmF0dXJhbGx5IHNsdWdnaXNoLCBvciBiZWNhdXNlIGR1cmluZyB0aGUgZGF5IGhlIGhhZCBiZWNvbWUgdGlyZWQgb3V0LiBCdXQgd2hlbiB0aGUgZ2FyZGVuZXIncyB3aGVscHMgY2hhbGxlbmdlZCBoaW0gZnJvbSBiZWxvdywgaGUgYmVnYW4gdG8gZ3Jvd2wgaW4gcmVzcG9uc2UsIGZhaW50bHkgYW5kIGluZGlzdGluY3RseSBhdCBmaXJzdCwgdGhlbiBiYXllZCBvdXQgbW9yZSBsb3VkbHkgYXMgdGhleSBwYXNzZWQgYnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSB0aGUgd2hvbGUgcGxhY2UgcmVzb3VuZGVkIHdpdGggYmFya2luZywgc28gdGhhdCB0aGUgd2F0Y2htYW4gb3Bwb3NpdGUgY2FsbGVkIHdpdGggYSBsb3VkIGNyeSB0byB0aGUgaHVudHNtYW4gYXNraW5nIHdoeSBoaXMgZG9nIHdhcyBiYXlpbmcgc28gc2F2YWdlbHkgYW5kIHdoZXRoZXIgc29tZSBtaXNjaGllZiB3YXMgbm90IGFmb290LiBUaGUgaHVudHNtYW4gYW5zd2VyZWQgaGltIGZyb20gdGhlIHRvd2VyIHRoYXQgdGhlcmUgd2FzIG5vdGhpbmcgdG8gZmVhciwgYnV0IHRoYXQgaGlzIGRvZyBoYWQgYmVlbiBleGNpdGVkIGJ5IHRoZSBsaWdodHMgb2YgdGhlIHNlbnRyaWVzIGFuZCB0aGUgZGluIG9mIHRoZSBiZWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgZ2F2ZSBoZWFydCB0byB0aGUgc29sZGllcnMgb2YgQXJhdHVzLiBUaGV5IHRob3VnaHQgdGhhdCB0aGUgaHVudHNtYW4gd2FzIHByaXZ5IHRvIHRoZWlyIGRlc2lnbiBhbmQgd2FzIHRyeWluZyB0byBjb25jZWFsIGl0LCBhbmQgdGhhdCB0aGVyZSB3ZXJlIG1hbnkgb3RoZXJzIGFsc28gaW4gdGhlIGNpdHkgd2hvIHdvdWxkIGFzc2lzdCB0aGVtLiBIb3dldmVyLCB3aGVuIHRoZSByZXN0IG9mIHRoZSBjb21wYW55IGVzc2F5ZWQgdGhlIHdhbGwsIHRoZWlyIHBlcmlsIHdhcyBncmlldm91cyBhbmQgcHJvdHJhY3RlZCwgc2luY2UgdGhlIGxhZGRlcnMgc2hvb2sgdW5sZXNzIHRoZXkgbW91bnRlZCBvbmUgYnkgb25lIGFuZCBzbG93bHk7IG1vcmVvdmVyLCB0aW1lIHdhcyBwcmVzc2luZywgc2luY2UgY29ja3Mgd2VyZSBhbHJlYWR5IGNyb3dpbmcsIGFuZCBkaXJlY3RseSB0aGUgcGVvcGxlIHdobyBicm91Z2h0IHByb2R1Y2UgZnJvbSB0aGUgY291bnRyeSB0byB0aGUgbWFya2V0LXBsYWNlIHdvdWxkIGJlIGNvbWluZyB1cC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBBcmF0dXMgYWxzbyBtb3VudGVkIHRoZSB3YWxsIGluIGhhc3RlLCBhZnRlciBmb3J0eSBpbiBhbGwgaGFkIG1vdW50ZWQgYmVmb3JlIGhpbTsgYW5kIHdoZW4gaGUgaGFkIGJlZW4gam9pbmVkIGJ5IGEgZmV3IG1vcmUgb2YgdGhvc2UgYmVsb3csIGhlIHdlbnQgdXAgYWdhaW5zdCB0aGUgdHlyYW50J3MgaG91c2UgYW5kIHRoZSBwcmFldG9yaXVtLCB3aGVyZSB0aGUgbWVyY2VuYXJ5IHNvbGRpZXJzIHBhc3NlZCB0aGUgbmlnaHQuIEFuZCBhZnRlciBmYWxsaW5nIHVwb24gdGhlc2Ugc3VkZGVubHkgYW5kIGNhcHR1cmluZyB0aGVtIGFsbCwgYnV0IGtpbGxpbmcgbm9uZSwgaGUgc3RyYWlnaHR3YXkgc2VudCBtZXNzYWdlcyB0byBoaXMgZnJpZW5kcyBzdW1tb25pbmcgdGhlbSBhbGwgZnJvbSB0aGVpciBob21lcywgYW5kIHRoZXkgcmFuIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkRheSB3YXMgbm93IGJyZWFraW5nLCBhbmQgdGhlIHRoZWF0cmUgd2FzIHRocm9uZ2VkIHdpdGggcGVvcGxlIHdobyBzdGlsbCB3ZXJlIGluIHN1c3BlbnNlIGJlY2F1c2Ugb2YgdGhlIHVuY2VydGFpbiBydW1vdXIgdGhhdCBwcmV2YWlsZWQgYW5kIGluIHV0dGVyIGlnbm9yYW5jZSBvZiB3aGF0IHdhcyBhZm9vdCwgdW50aWwgdGhlIGhlcmFsZCBjYW1lIGZvcndhcmQgYW5kIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgQXJhdHVzIHRoZSBzb24gb2YgQ2xlaW5pYXMgaW52aXRlZCB0aGUgY2l0aXplbnMgdG8gc2VjdXJlIHRoZWlyIGZyZWVkb20uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgY29udmluY2VkIHRoYXQgd2hhdCB0aGV5IGhhZCBsb25nIGV4cGVjdGVkIHdhcyBjb21lLCB0aGV5IHJ1c2hlZCBpbiBhIGJvZHkgdG8gdGhlIHJlc2lkZW5jZSBvZiB0aGUgdHlyYW50LCBjYXJyeWluZyBmaXJlYnJhbmRzLiBBIGdyZWF0IGZsYW1lIGFyb3NlIGFzIHRoZSBob3VzZSBjYXVnaHQgZmlyZSwgYW5kIGl0IHdhcyB2aXNpYmxlIGFzIGZhciBhcyBDb3JpbnRoLCBzbyB0aGF0IHRoZSBwZW9wbGUgb2YgQ29yaW50aCB3ZXJlIGFzdG9uaXNoZWQgYW5kIHdlcmUgb24gdGhlIHBvaW50IG9mIHNhbGx5aW5nIGZvcnRoIHRvIGhlbHAuIE5pY29jbGVzLCB0aGVuLCBzbGlwcGVkIG91dCB1bm5vdGljZWQgYnkgd2F5IG9mIGNlcnRhaW4gdW5kZXJncm91bmQgcGFzc2FnZXMsIGFuZCByYW4gYXdheSBmcm9tIHRoZSBjaXR5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIHNvbGRpZXJzLCBhZnRlciBleHRpbmd1aXNoaW5nIHRoZSBmaXJlIHdpdGggdGhlIGFpZCBvZiB0aGUgU2ljeW9uaWFucywgcGx1bmRlcmVkIGhpcyBob3VzZS4gTm9yIGRpZCBBcmF0dXMgcHJldmVudCB0aGlzLCBidXQgcHV0IHRoZSByZXN0IG9mIHRoZSB3ZWFsdGggb2YgdGhlIHR5cmFudHMgYXQgdGhlIGRpc3Bvc2l0aW9uIG9mIHRoZSBjaXRpemVucy4gQW5kIG5vdCBhIG1hbiB3YXMga2lsbGVkIG9yIGV2ZW4gd291bmRlZCBhdCBhbGwsIGVpdGhlciBhbW9uZyB0aGUgYXNzYWlsYW50cyBvciB0aGVpciBlbmVtaWVzLCBidXQgZm9ydHVuZSBwcmVzZXJ2ZWQgdGhlIGVudGVycHJpc2UgZnJlZSBmcm9tIHRoZSB0YWludCBvZiBjaXZpbCBibG9vZHNoZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBjb252aW5jZWQgdGhhdCB3aGF0IHRoZXkgaGFkIGxvbmcgZXhwZWN0ZWQgd2FzIGNvbWUsIHRoZXkgcnVzaGVkIGluIGEgYm9keSB0byB0aGUgcmVzaWRlbmNlIG9mIHRoZSB0eXJhbnQsIGNhcnJ5aW5nIGZpcmVicmFuZHMuIEEgZ3JlYXQgZmxhbWUgYXJvc2UgYXMgdGhlIGhvdXNlIGNhdWdodCBmaXJlLCBhbmQgaXQgd2FzIHZpc2libGUgYXMgZmFyIGFzIENvcmludGgsIHNvIHRoYXQgdGhlIHBlb3BsZSBvZiBDb3JpbnRoIHdlcmUgYXN0b25pc2hlZCBhbmQgd2VyZSBvbiB0aGUgcG9pbnQgb2Ygc2FsbHlpbmcgZm9ydGggdG8gaGVscC4gTmljb2NsZXMsIHRoZW4sIHNsaXBwZWQgb3V0IHVubm90aWNlZCBieSB3YXkgb2YgY2VydGFpbiB1bmRlcmdyb3VuZCBwYXNzYWdlcywgYW5kIHJhbiBhd2F5IGZyb20gdGhlIGNpdHksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGUgc29sZGllcnMsIGFmdGVyIGV4dGluZ3Vpc2hpbmcgdGhlIGZpcmUgd2l0aCB0aGUgYWlkIG9mIHRoZSBTaWN5b25pYW5zLCBwbHVuZGVyZWQgaGlzIGhvdXNlLiBOb3IgZGlkIEFyYXR1cyBwcmV2ZW50IHRoaXMsIGJ1dCBwdXQgdGhlIHJlc3Qgb2YgdGhlIHdlYWx0aCBvZiB0aGUgdHlyYW50cyBhdCB0aGUgZGlzcG9zaXRpb24gb2YgdGhlIGNpdGl6ZW5zLiBBbmQgbm90IGEgbWFuIHdhcyBraWxsZWQgb3IgZXZlbiB3b3VuZGVkIGF0IGFsbCwgZWl0aGVyIGFtb25nIHRoZSBhc3NhaWxhbnRzIG9yIHRoZWlyIGVuZW1pZXMsIGJ1dCBmb3J0dW5lIHByZXNlcnZlZCB0aGUgZW50ZXJwcmlzZSBmcmVlIGZyb20gdGhlIHRhaW50IG9mIGNpdmlsIGJsb29kc2hlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIHJlc3RvcmVkIGVpZ2h0eSBleGlsZXMgd2hvIGhhZCBiZWVuIGJhbmlzaGVkIGJ5IE5pY29jbGVzLCBhbmQgdGhvc2UgYWxzbyB3aG8gaGFkIGZsZWQgdGhlIGNpdHkgZHVyaW5nIHRoZSByZWlnbiBvZiBmb3JtZXIgdHlyYW50cywgdG8gdGhlIG51bWJlciBvZiBmaXZlIGh1bmRyZWQuIFRoZXNlIGhhZCBsb25nIGJlZW4gd2FuZGVyZXJzLCB5ZXMsIGZvciBjbG9zZSB0byBmaWZ0eSB5ZWFycy4gQW5kIG5vdyB0aGF0IHRoZXkgaGFkIGNvbWUgYmFjaywgbW9zdCBvZiB0aGVtIGluIHBvdmVydHksIHRoZXkgbGFpZCBjbGFpbSB0byB0aGUgcHJvcGVydHkgd2hpY2ggdGhleSBoYWQgZm9ybWVybHkgaGVsZCwgYW5kIGJ5IGdvaW5nIHRvIHRoZWlyIGZhcm1zIGFuZCBob3VzZXMgdGhyZXcgQXJhdHVzIGludG8gZ3JlYXQgcGVycGxleGl0eS4gRm9yIGhlIHNhdyB0aGF0IHRoZSBjaXR5IHdhcyBwbG90dGVkIGFnYWluc3QgYnkgb3V0c2lkZXJzIGFuZCBleWVkIHdpdGggamVhbG91c3kgYnkgQW50aWdvbnVzIGJlY2F1c2UgaXQgaGFkIHJlZ2FpbmVkIGl0cyBmcmVlZG9tLCB3aGlsZSBpdCB3YXMgZnVsbCBvZiBpbnRlcm5hbCBkaXN0dXJiYW5jZXMgYW5kIGZhY3Rpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyByZXN0b3JlZCBlaWdodHkgZXhpbGVzIHdobyBoYWQgYmVlbiBiYW5pc2hlZCBieSBOaWNvY2xlcywgYW5kIHRob3NlIGFsc28gd2hvIGhhZCBmbGVkIHRoZSBjaXR5IGR1cmluZyB0aGUgcmVpZ24gb2YgZm9ybWVyIHR5cmFudHMsIHRvIHRoZSBudW1iZXIgb2YgZml2ZSBodW5kcmVkLiBUaGVzZSBoYWQgbG9uZyBiZWVuIHdhbmRlcmVycywgeWVzLCBmb3IgY2xvc2UgdG8gZmlmdHkgeWVhcnMuIEFuZCBub3cgdGhhdCB0aGV5IGhhZCBjb21lIGJhY2ssIG1vc3Qgb2YgdGhlbSBpbiBwb3ZlcnR5LCB0aGV5IGxhaWQgY2xhaW0gdG8gdGhlIHByb3BlcnR5IHdoaWNoIHRoZXkgaGFkIGZvcm1lcmx5IGhlbGQsIGFuZCBieSBnb2luZyB0byB0aGVpciBmYXJtcyBhbmQgaG91c2VzIHRocmV3IEFyYXR1cyBpbnRvIGdyZWF0IHBlcnBsZXhpdHkuIEZvciBoZSBzYXcgdGhhdCB0aGUgY2l0eSB3YXMgcGxvdHRlZCBhZ2FpbnN0IGJ5IG91dHNpZGVycyBhbmQgZXllZCB3aXRoIGplYWxvdXN5IGJ5IEFudGlnb251cyBiZWNhdXNlIGl0IGhhZCByZWdhaW5lZCBpdHMgZnJlZWRvbSwgd2hpbGUgaXQgd2FzIGZ1bGwgb2YgaW50ZXJuYWwgZGlzdHVyYmFuY2VzIGFuZCBmYWN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUsIGFzIHRoaW5ncyBzdG9vZCwgaGUgdGhvdWdodCBpdCBiZXN0IHRvIGF0dGFjaCB0aGUgY2l0eSBwcm9tcHRseSB0byB0aGUgQWNoYWVhbiBMZWFndWU7IGFuZCBzbywgdGhvdWdoIHRoZSBwZW9wbGUgb2YgU2ljeW9uIHdlcmUgRG9yaWFucywgdGhleSB2b2x1bnRhcmlseSBhc3N1bWVkIHRoZSBuYW1lIGFuZCBjaXZpbCBwb2xpdHkgb2YgdGhlIEFjaGFlYW5zLCB3aG8gYXQgdGhhdCB0aW1lIGhhZCBuZWl0aGVyIGJyaWxsaWFudCByZXB1dGUgbm9yIGdyZWF0IHN0cmVuZ3RoLiBGb3IgbW9zdCBvZiB0aGVtIGxpdmVkIGluIHNtYWxsIGNpdGllcywgb3duZWQgbGFuZCB0aGF0IHdhcyBuZWl0aGVyIGZlcnRpbGUgbm9yIGV4dGVuc2l2ZSwgYW5kIHdlcmUgbmVpZ2hib3VycyB0byBhIHNlYSB0aGF0IGhhZCBubyBoYXJib3VycyBhbmQgZm9yIHRoZSBtb3N0IHBhcnQgd2FzaGVkIGEgcHJlY2lwaXRvdXMgYW5kIHJvY2t5IHNob3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyBwZW9wbGUgbW9yZSB0aGFuIGFueSBvdGhlciBzaG93ZWQgdGhlIHdvcmxkIHRoYXQgR3JlZWsgcHJvd2VzcyB3YXMgaW52aW5jaWJsZSwgd2hlbmV2ZXIgaXQgZW5qb3llZCBnb29kIG9yZGVyLCBoYXJtb25pb3VzIGRpc2NpcGxpbmUsIGFuZCBhIHNlbnNpYmxlIGxlYWRlci4gRm9yIHRob3VnaCB0aGV5IGhhZCB0YWtlbiBhbG1vc3Qgbm8gcGFydCBpbiB0aGUgYW5jaWVudCBnbG9yaWVzIG9mIEdyZWVjZSwgYW5kIGF0IHRoaXMgdGltZSwgdGhvdWdoIGNvdW50ZWQgYWxsIHRvZ2V0aGVyLCBoYWQgbm90IHRoZSBwb3dlciBvZiBhIHNpbmdsZSBjb25zaWRlcmFibGUgY2l0eSwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+c3RpbGwsIG93aW5nIHRvIHRoZWlyIGdvb2QgY291bnNlbHMgYW5kIHRoZWlyIGNvbmNvcmQsIGFuZCBiZWNhdXNlIHRoZXkgd2VyZSBhYmxlLCBpbiBwbGFjZSBvZiBlbnZ5aW5nLCB0byBvYmV5IGFuZCBmb2xsb3cgdGhlIG9uZSB3aG8gd2FzIHByZS1lbWluZW50IGFtb25nIHRoZW0gZm9yIHZpcnR1ZSwgdGhleSBub3Qgb25seSBwcmVzZXJ2ZWQgdGhlaXIgb3duIGZyZWVkb20gaW4gdGhlIG1pZHN0IG9mIHNvIGdyZWF0IGNpdGllcyBhbmQgcG93ZXJzIGFuZCB0eXJhbm5pZXMsIGJ1dCBhbHNvIHdlcmUgY29udGludWFsbHkgc2F2aW5nIGFuZCBzZXR0aW5nIGZyZWUgdmVyeSBtYW55IG9mIHRoZSBvdGhlciBHcmVla3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSwgYXMgdGhpbmdzIHN0b29kLCBoZSB0aG91Z2h0IGl0IGJlc3QgdG8gYXR0YWNoIHRoZSBjaXR5IHByb21wdGx5IHRvIHRoZSBBY2hhZWFuIExlYWd1ZTsgYW5kIHNvLCB0aG91Z2ggdGhlIHBlb3BsZSBvZiBTaWN5b24gd2VyZSBEb3JpYW5zLCB0aGV5IHZvbHVudGFyaWx5IGFzc3VtZWQgdGhlIG5hbWUgYW5kIGNpdmlsIHBvbGl0eSBvZiB0aGUgQWNoYWVhbnMsIHdobyBhdCB0aGF0IHRpbWUgaGFkIG5laXRoZXIgYnJpbGxpYW50IHJlcHV0ZSBub3IgZ3JlYXQgc3RyZW5ndGguIEZvciBtb3N0IG9mIHRoZW0gbGl2ZWQgaW4gc21hbGwgY2l0aWVzLCBvd25lZCBsYW5kIHRoYXQgd2FzIG5laXRoZXIgZmVydGlsZSBub3IgZXh0ZW5zaXZlLCBhbmQgd2VyZSBuZWlnaGJvdXJzIHRvIGEgc2VhIHRoYXQgaGFkIG5vIGhhcmJvdXJzIGFuZCBmb3IgdGhlIG1vc3QgcGFydCB3YXNoZWQgYSBwcmVjaXBpdG91cyBhbmQgcm9ja3kgc2hvcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHBlb3BsZSBtb3JlIHRoYW4gYW55IG90aGVyIHNob3dlZCB0aGUgd29ybGQgdGhhdCBHcmVlayBwcm93ZXNzIHdhcyBpbnZpbmNpYmxlLCB3aGVuZXZlciBpdCBlbmpveWVkIGdvb2Qgb3JkZXIsIGhhcm1vbmlvdXMgZGlzY2lwbGluZSwgYW5kIGEgc2Vuc2libGUgbGVhZGVyLiBGb3IgdGhvdWdoIHRoZXkgaGFkIHRha2VuIGFsbW9zdCBubyBwYXJ0IGluIHRoZSBhbmNpZW50IGdsb3JpZXMgb2YgR3JlZWNlLCBhbmQgYXQgdGhpcyB0aW1lLCB0aG91Z2ggY291bnRlZCBhbGwgdG9nZXRoZXIsIGhhZCBub3QgdGhlIHBvd2VyIG9mIGEgc2luZ2xlIGNvbnNpZGVyYWJsZSBjaXR5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnN0aWxsLCBvd2luZyB0byB0aGVpciBnb29kIGNvdW5zZWxzIGFuZCB0aGVpciBjb25jb3JkLCBhbmQgYmVjYXVzZSB0aGV5IHdlcmUgYWJsZSwgaW4gcGxhY2Ugb2YgZW52eWluZywgdG8gb2JleSBhbmQgZm9sbG93IHRoZSBvbmUgd2hvIHdhcyBwcmUtZW1pbmVudCBhbW9uZyB0aGVtIGZvciB2aXJ0dWUsIHRoZXkgbm90IG9ubHkgcHJlc2VydmVkIHRoZWlyIG93biBmcmVlZG9tIGluIHRoZSBtaWRzdCBvZiBzbyBncmVhdCBjaXRpZXMgYW5kIHBvd2VycyBhbmQgdHlyYW5uaWVzLCBidXQgYWxzbyB3ZXJlIGNvbnRpbnVhbGx5IHNhdmluZyBhbmQgc2V0dGluZyBmcmVlIHZlcnkgbWFueSBvZiB0aGUgb3RoZXIgR3JlZWtzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMgd2FzIGJ5IG5hdHVyYWwgYmVudCBhIHN0YXRlc21hbiwgaGlnaC1taW5kZWQsIG1vcmUgZXhhY3QgaW4gaGlzIHB1YmxpYyB0aGFuIGluIGhpcyBwcml2YXRlIHJlbGF0aW9ucywgYSBiaXR0ZXIgaGF0ZXIgb2YgdHlyYW50cywgYW5kIGV2ZXIgbWFraW5nIGEgcmVnYXJkIGZvciB0aGUgcHVibGljIHdlYWwgZGV0ZXJtaW5lIGhpcyBlbm1pdHkgb3IgaGlzIGZyaWVuZHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSBzZWVtcyB0byBoYXZlIHByb3ZlZCBub3Qgc28gbXVjaCBhIHN0cmljdCBmcmllbmQsIGFzIGEgY29uc2lkZXJhdGUgYW5kIG1pbGQgZW5lbXksIGNoYW5naW5nIGhpcyBncm91bmQgaW4gZWl0aGVyIGRpcmVjdGlvbiBhY2NvcmRpbmcgdG8gdGhlIGV4aWdlbmNpZXMgb2YgdGhlIHN0YXRlLCBsb3ZpbmcgY29uY29yZCBiZXR3ZWVuIG5hdGlvbnMsIGNvbW11bml0eSBvZiBjaXRpZXMsIGFuZCB1bmFuaW1pdHkgb2YgY291bmNpbCBhbmQgYXNzZW1ibHksIGJleW9uZCBhbGwgb3RoZXIgYmxlc3NpbmdzLiBJdCB3YXMgbWFuaWZlc3QgdGhhdCBoZSByZXNvcnRlZCB0byBvcGVuIHdhcmZhcmUgYW5kIHN0cmlmZSB3aXRob3V0IGNvdXJhZ2UgYW5kIHdpdGggbGl0dGxlIGNvbmZpZGVuY2UsIGJ1dCB0aGF0IGluIHN0ZWFsaW5nIGFkdmFudGFnZXMgYW5kIHNlY3JldGx5IG1hbmFnaW5nIGNpdGllcyBhbmQgdHlyYW50cyBoZSB3YXMgbW9zdCBwcm9maWNpZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHRob3VnaCBoZSB3b24gbWFueSB1bmV4cGVjdGVkIHN1Y2Nlc3NlcyB3aGVyZSBoZSBzaG93ZWQgY291cmFnZSwgaGUgc2VlbXMgdG8gaGF2ZSBsb3N0IG5vIGZld2VyIGZhdm91cmFibGUgb3Bwb3J0dW5pdGllcyB0aHJvdWdoIG92ZXItY2F1dGlvbi4gRm9yIG5vdCBvbmx5IGluIHRoZSBjYXNlIG9mIGNlcnRhaW4gd2lsZCBiZWFzdHMsIGFzIGl0IHdvdWxkIHNlZW0sIGlzIHRoZSB2aXNpb24gc3Ryb25nIGJ5IG5pZ2h0IGJ1dCB3aG9sbHkgYmxpbmRlZCBpbiB0aGUgZGF5LXRpbWUgKHNpbmNlIHRoZSBodW1vdXIgaW4gdGhlaXIgZXllcyBpcyB0b28gZHJ5IGFuZCBkZWxpY2F0ZSB0byBiZWFyIGNvbnRhY3Qgd2l0aCB0aGUgbGlnaHQpLCBidXQgdGhlcmUgaXMgYWxzbyBpbiBzb21lIG1lbiBhIGNsZXZlcm5lc3MgYW5kIHNhZ2FjaXR5IHdoaWNoIGlzIHByb25lIHRvIGJlIGNvbmZvdW5kZWQgaW4gdHJhbnNhY3Rpb25zIHRoYXQgYXJlIGNhcnJpZWQgb3V0IHVuZGVyIHRoZSBvcGVuIHNreSBhbmQgcHJvY2xhaW1lZCBhYnJvYWQgYnkgcHVibGljIGNyaWVycywgYnV0IHdoZW4gY29uZnJvbnRpbmcgaGlkZGVuIGFuZCBzZWNyZXQgZW50ZXJwcmlzZXMgcmVjb3ZlcnMgaXRzIGNvdXJhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggdW5ldmVubmVzcyBhIGxhY2sgb2YgcGhpbG9zb3BoeSBtYXkgY2F1c2UgaW4gbWVuIG9mIGdvb2QgbmF0dXJhbCBwYXJ0czsgdGhleSBwcm9kdWNlIHZpcnR1ZSB3aXRob3V0IHNjaWVudGlmaWMga25vd2xlZGdlLCBhbmQgaXQgaXMgbGlrZSBzcG9udGFuZW91cyBhbmQgdW5jdWx0aXZhdGVkIGZydWl0LiBUaGlzIGNhbiBiZSBwcm92ZWQgYnkgZXhhbXBsZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIHdhcyBieSBuYXR1cmFsIGJlbnQgYSBzdGF0ZXNtYW4sIGhpZ2gtbWluZGVkLCBtb3JlIGV4YWN0IGluIGhpcyBwdWJsaWMgdGhhbiBpbiBoaXMgcHJpdmF0ZSByZWxhdGlvbnMsIGEgYml0dGVyIGhhdGVyIG9mIHR5cmFudHMsIGFuZCBldmVyIG1ha2luZyBhIHJlZ2FyZCBmb3IgdGhlIHB1YmxpYyB3ZWFsIGRldGVybWluZSBoaXMgZW5taXR5IG9yIGhpcyBmcmllbmRzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBoZSBzZWVtcyB0byBoYXZlIHByb3ZlZCBub3Qgc28gbXVjaCBhIHN0cmljdCBmcmllbmQsIGFzIGEgY29uc2lkZXJhdGUgYW5kIG1pbGQgZW5lbXksIGNoYW5naW5nIGhpcyBncm91bmQgaW4gZWl0aGVyIGRpcmVjdGlvbiBhY2NvcmRpbmcgdG8gdGhlIGV4aWdlbmNpZXMgb2YgdGhlIHN0YXRlLCBsb3ZpbmcgY29uY29yZCBiZXR3ZWVuIG5hdGlvbnMsIGNvbW11bml0eSBvZiBjaXRpZXMsIGFuZCB1bmFuaW1pdHkgb2YgY291bmNpbCBhbmQgYXNzZW1ibHksIGJleW9uZCBhbGwgb3RoZXIgYmxlc3NpbmdzLiBJdCB3YXMgbWFuaWZlc3QgdGhhdCBoZSByZXNvcnRlZCB0byBvcGVuIHdhcmZhcmUgYW5kIHN0cmlmZSB3aXRob3V0IGNvdXJhZ2UgYW5kIHdpdGggbGl0dGxlIGNvbmZpZGVuY2UsIGJ1dCB0aGF0IGluIHN0ZWFsaW5nIGFkdmFudGFnZXMgYW5kIHNlY3JldGx5IG1hbmFnaW5nIGNpdGllcyBhbmQgdHlyYW50cyBoZSB3YXMgbW9zdCBwcm9maWNpZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgdGhvdWdoIGhlIHdvbiBtYW55IHVuZXhwZWN0ZWQgc3VjY2Vzc2VzIHdoZXJlIGhlIHNob3dlZCBjb3VyYWdlLCBoZSBzZWVtcyB0byBoYXZlIGxvc3Qgbm8gZmV3ZXIgZmF2b3VyYWJsZSBvcHBvcnR1bml0aWVzIHRocm91Z2ggb3Zlci1jYXV0aW9uLiBGb3Igbm90IG9ubHkgaW4gdGhlIGNhc2Ugb2YgY2VydGFpbiB3aWxkIGJlYXN0cywgYXMgaXQgd291bGQgc2VlbSwgaXMgdGhlIHZpc2lvbiBzdHJvbmcgYnkgbmlnaHQgYnV0IHdob2xseSBibGluZGVkIGluIHRoZSBkYXktdGltZSAoc2luY2UgdGhlIGh1bW91ciBpbiB0aGVpciBleWVzIGlzIHRvbyBkcnkgYW5kIGRlbGljYXRlIHRvIGJlYXIgY29udGFjdCB3aXRoIHRoZSBsaWdodCksIGJ1dCB0aGVyZSBpcyBhbHNvIGluIHNvbWUgbWVuIGEgY2xldmVybmVzcyBhbmQgc2FnYWNpdHkgd2hpY2ggaXMgcHJvbmUgdG8gYmUgY29uZm91bmRlZCBpbiB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgY2FycmllZCBvdXQgdW5kZXIgdGhlIG9wZW4gc2t5IGFuZCBwcm9jbGFpbWVkIGFicm9hZCBieSBwdWJsaWMgY3JpZXJzLCBidXQgd2hlbiBjb25mcm9udGluZyBoaWRkZW4gYW5kIHNlY3JldCBlbnRlcnByaXNlcyByZWNvdmVycyBpdHMgY291cmFnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggdW5ldmVubmVzcyBhIGxhY2sgb2YgcGhpbG9zb3BoeSBtYXkgY2F1c2UgaW4gbWVuIG9mIGdvb2QgbmF0dXJhbCBwYXJ0czsgdGhleSBwcm9kdWNlIHZpcnR1ZSB3aXRob3V0IHNjaWVudGlmaWMga25vd2xlZGdlLCBhbmQgaXQgaXMgbGlrZSBzcG9udGFuZW91cyBhbmQgdW5jdWx0aXZhdGVkIGZydWl0LiBUaGlzIGNhbiBiZSBwcm92ZWQgYnkgZXhhbXBsZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cywgbm93LCBhZnRlciB1bml0aW5nIGhpbXNlbGYgYW5kIGhpcyBjaXR5IHdpdGggdGhlIEFjaGFlYW5zLCBzZXJ2ZWQgaW4gdGhlIGNhdmFscnksIGFuZCB3YXMgYmVsb3ZlZCBieSBoaXMgY29tbWFuZGVycyBvbiBhY2NvdW50IG9mIGhpcyByZWFkeSBvYmVkaWVuY2UuIEZvciBhbHRob3VnaCBoZSBoYWQgbWFkZSBncmVhdCBjb250cmlidXRpb25zIHRvIHRoZSBjb21tb253ZWFsdGggaW4gaGlzIG93biByZXB1dGF0aW9uIGFuZCB0aGUgcG93ZXIgb2YgaGlzIG5hdGl2ZSBjaXR5LCBoZSBnYXZlIGhpcyBzZXJ2aWNlcyBsaWtlIHRob3NlIG9mIGFueSBvcmRpbmFyeSBwZXJzb24gdG8gdGhlIG9uZSB3aG8gZnJvbSB0aW1lIHRvIHRpbWUgd2FzIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zLCB3aGV0aGVyIGhlIHdhcyBhIG1hbiBvZiBEeW1lIG9yIG9mIFRyaXRhZWEsIG9yIG9mIGEgbWVhbmVyIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSBjYW1lIHRvIGhpbSBhbHNvIGEgZ2lmdCBvZiBtb25leSBmcm9tIHRoZSBraW5nIG9mIEVneXB0LCBmaXZlLWFuZC10d2VudHkgdGFsZW50cy4gVGhlc2UgQXJhdHVzIGFjY2VwdGVkLCBidXQgZ2F2ZSB0aGVtIGF0IG9uY2UgdG8gaGlzIGZlbGxvdy1jaXRpemVucywgd2hvIHdlcmUgaW4gd2FudCBvZiBtb25leSwgZXNwZWNpYWxseSBmb3IgdGhlIHJhbnNvbWluZyBvZiBzdWNoIGFzIGhhZCBiZWVuIHRha2VuIHByaXNvbmVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzLCBub3csIGFmdGVyIHVuaXRpbmcgaGltc2VsZiBhbmQgaGlzIGNpdHkgd2l0aCB0aGUgQWNoYWVhbnMsIHNlcnZlZCBpbiB0aGUgY2F2YWxyeSwgYW5kIHdhcyBiZWxvdmVkIGJ5IGhpcyBjb21tYW5kZXJzIG9uIGFjY291bnQgb2YgaGlzIHJlYWR5IG9iZWRpZW5jZS4gRm9yIGFsdGhvdWdoIGhlIGhhZCBtYWRlIGdyZWF0IGNvbnRyaWJ1dGlvbnMgdG8gdGhlIGNvbW1vbndlYWx0aCBpbiBoaXMgb3duIHJlcHV0YXRpb24gYW5kIHRoZSBwb3dlciBvZiBoaXMgbmF0aXZlIGNpdHksIGhlIGdhdmUgaGlzIHNlcnZpY2VzIGxpa2UgdGhvc2Ugb2YgYW55IG9yZGluYXJ5IHBlcnNvbiB0byB0aGUgb25lIHdobyBmcm9tIHRpbWUgdG8gdGltZSB3YXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsIHdoZXRoZXIgaGUgd2FzIGEgbWFuIG9mIER5bWUgb3Igb2YgVHJpdGFlYSwgb3Igb2YgYSBtZWFuZXIgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSBjYW1lIHRvIGhpbSBhbHNvIGEgZ2lmdCBvZiBtb25leSBmcm9tIHRoZSBraW5nIG9mIEVneXB0LCBmaXZlLWFuZC10d2VudHkgdGFsZW50cy4gVGhlc2UgQXJhdHVzIGFjY2VwdGVkLCBidXQgZ2F2ZSB0aGVtIGF0IG9uY2UgdG8gaGlzIGZlbGxvdy1jaXRpemVucywgd2hvIHdlcmUgaW4gd2FudCBvZiBtb25leSwgZXNwZWNpYWxseSBmb3IgdGhlIHJhbnNvbWluZyBvZiBzdWNoIGFzIGhhZCBiZWVuIHRha2VuIHByaXNvbmVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBleGlsZXMgd2VyZSBub3QgdG8gYmUgZGlzc3VhZGVkIGZyb20gbW9sZXN0aW5nIHRob3NlIHdobyB3ZXJlIGluIHBvc3Nlc3Npb24gb2YgdGhlaXIgcHJvcGVydHksIGFuZCB0aGUgY2l0eSB3YXMgaW4gZGFuZ2VyIG9mIGFuIHVwaGVhdmFsLiBBcmF0dXMgc2F3IHRoYXQgaGlzIG9ubHkgaG9wZSB3YXMgaW4gdGhlIGdlbmVyb3NpdHkgb2YgUHRvbGVteSwgYW5kIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIHNhaWwgdG8gRWd5cHQgYW5kIGJlZyB0aGUga2luZyB0byBmdXJuaXNoIGhpbSB3aXRoIG1vbmV5IGZvciB0aGUgc2V0dGxlbWVudCBvZiB0aGVzZSBkaXNwdXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgcHV0IHRvIHNlYSBmcm9tIE1vdGhvbmUgYWJvdmUgTWFsZWEsIGludGVuZGluZyB0byBtYWtlIHRoZSBzaG9ydGVzdCBwYXNzYWdlLiBCdXQgdGhlIHN0ZWVyc21hbiBjb3VsZCBub3QgbWFrZSBoZWFkIGFnYWluc3QgYSBzdHJvbmcgd2luZCBhbmQgaGlnaCB3YXZlcyB0aGF0IGNhbWUgaW4gZnJvbSB0aGUgb3BlbiBzZWEsIGFuZCBiZWluZyBjYXJyaWVkIG91dCBvZiBoaXMgY291cnNlIGdvdCB3aXRoIGRpZmZpY3VsdHkgdG8gQWRyaWEsIHdoaWNoIHdhcyBhIGhvc3RpbGUgcGxhY2UuIEZvciBpdCB3YXMgaW4gdGhlIHBvd2VyIG9mIEFudGlnb251cywgYW5kIGhlbGQgYSBnYXJyaXNvbiBvZiBoaXMuIEFyYXR1cyBhbnRpY2lwYXRlZCBhcnJlc3QgYnkgbGFuZGluZywgYW5kIGZvcnNha2luZyB0aGUgc2hpcCB3aXRoZHJldyBhIGxvbmcgd2F5IGZyb20gdGhlIHNlYSwgaGF2aW5nIHdpdGggaGltIG9uZSBvZiBoaXMgZnJpZW5kcywgVGltYW50aGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHRocmV3IHRoZW1zZWx2ZXMgaW50byBhIHBsYWNlIHRoYXQgd2FzIHRoaWNrbHkgY292ZXJlZCB3aXRoIHdvb2RzLCBhbmQgaGFkIGEgZ3JpZXZvdXMgbmlnaHQgb2YgaXQuIEEgbGl0dGxlIGxhdGVyIHRoZSBjb21tYW5kZXIgb2YgdGhlIGdhcnJpc29uIGNhbWUgdG8gdGhlIHNoaXAgaW4gc2VhcmNoIG9mIEFyYXR1cywgYW5kIHdhcyBkZWNlaXZlZCBieSBoaXMgc2VydmFudHMsIHdobyBoYWQgYmVlbiBpbnN0cnVjdGVkIHRvIHNheSB0aGF0IGhlIGhhZCBydW4gYXdheSBhdCBvbmNlIGFuZCBoYWQgc2FpbGVkIG9mZiB0byBFdWJvZWEuIFRoZSBzaGlwLCBob3dldmVyLCB3aXRoIGl0cyBjYXJnbyBhbmQgdGhlIHNlcnZhbnRzIG9mIEFyYXR1cywgd2FzIGRlY2xhcmVkIGEgcHJpemUgb2Ygd2FyIGFuZCBkZXRhaW5lZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBleGlsZXMgd2VyZSBub3QgdG8gYmUgZGlzc3VhZGVkIGZyb20gbW9sZXN0aW5nIHRob3NlIHdobyB3ZXJlIGluIHBvc3Nlc3Npb24gb2YgdGhlaXIgcHJvcGVydHksIGFuZCB0aGUgY2l0eSB3YXMgaW4gZGFuZ2VyIG9mIGFuIHVwaGVhdmFsLiBBcmF0dXMgc2F3IHRoYXQgaGlzIG9ubHkgaG9wZSB3YXMgaW4gdGhlIGdlbmVyb3NpdHkgb2YgUHRvbGVteSwgYW5kIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIHNhaWwgdG8gRWd5cHQgYW5kIGJlZyB0aGUga2luZyB0byBmdXJuaXNoIGhpbSB3aXRoIG1vbmV5IGZvciB0aGUgc2V0dGxlbWVudCBvZiB0aGVzZSBkaXNwdXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIHB1dCB0byBzZWEgZnJvbSBNb3Rob25lIGFib3ZlIE1hbGVhLCBpbnRlbmRpbmcgdG8gbWFrZSB0aGUgc2hvcnRlc3QgcGFzc2FnZS4gQnV0IHRoZSBzdGVlcnNtYW4gY291bGQgbm90IG1ha2UgaGVhZCBhZ2FpbnN0IGEgc3Ryb25nIHdpbmQgYW5kIGhpZ2ggd2F2ZXMgdGhhdCBjYW1lIGluIGZyb20gdGhlIG9wZW4gc2VhLCBhbmQgYmVpbmcgY2FycmllZCBvdXQgb2YgaGlzIGNvdXJzZSBnb3Qgd2l0aCBkaWZmaWN1bHR5IHRvIEFkcmlhLCB3aGljaCB3YXMgYSBob3N0aWxlIHBsYWNlLiBGb3IgaXQgd2FzIGluIHRoZSBwb3dlciBvZiBBbnRpZ29udXMsIGFuZCBoZWxkIGEgZ2Fycmlzb24gb2YgaGlzLiBBcmF0dXMgYW50aWNpcGF0ZWQgYXJyZXN0IGJ5IGxhbmRpbmcsIGFuZCBmb3JzYWtpbmcgdGhlIHNoaXAgd2l0aGRyZXcgYSBsb25nIHdheSBmcm9tIHRoZSBzZWEsIGhhdmluZyB3aXRoIGhpbSBvbmUgb2YgaGlzIGZyaWVuZHMsIFRpbWFudGhlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdGhyZXcgdGhlbXNlbHZlcyBpbnRvIGEgcGxhY2UgdGhhdCB3YXMgdGhpY2tseSBjb3ZlcmVkIHdpdGggd29vZHMsIGFuZCBoYWQgYSBncmlldm91cyBuaWdodCBvZiBpdC4gQSBsaXR0bGUgbGF0ZXIgdGhlIGNvbW1hbmRlciBvZiB0aGUgZ2Fycmlzb24gY2FtZSB0byB0aGUgc2hpcCBpbiBzZWFyY2ggb2YgQXJhdHVzLCBhbmQgd2FzIGRlY2VpdmVkIGJ5IGhpcyBzZXJ2YW50cywgd2hvIGhhZCBiZWVuIGluc3RydWN0ZWQgdG8gc2F5IHRoYXQgaGUgaGFkIHJ1biBhd2F5IGF0IG9uY2UgYW5kIGhhZCBzYWlsZWQgb2ZmIHRvIEV1Ym9lYS4gVGhlIHNoaXAsIGhvd2V2ZXIsIHdpdGggaXRzIGNhcmdvIGFuZCB0aGUgc2VydmFudHMgb2YgQXJhdHVzLCB3YXMgZGVjbGFyZWQgYSBwcml6ZSBvZiB3YXIgYW5kIGRldGFpbmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhIGZldyBkYXlzLCB3aGlsZSBzdGlsbCBpbiB0aGlzIGhlbHBsZXNzIHBsaWdodCwgQXJhdHVzIG1ldCB3aXRoIGEgcmFyZSBwaWVjZSBvZiBnb29kIGZvcnR1bmUsIGZvciBhIFJvbWFuIHNoaXAgcHV0IGluIGF0IHRoZSBwbGFjZSB3aGVyZSBoZSB3YXMgc3RheWluZywgc29tZXRpbWVzIG9uIGEgbG9va291dC1wbGFjZSwgYW5kIHNvbWV0aW1lcyBoaWRpbmcgaGltc2VsZi4gVGhlIHNoaXAgd2FzIGJvdW5kIGZvciBTeXJpYSwgYnV0IGFmdGVyIGdvaW5nIG9uIGJvYXJkIEFyYXR1cyBwZXJzdWFkZWQgdGhlIG1hc3RlciBvZiB0aGUgdmVzc2VsIHRvIGNvbnZleSBoaW0gYXMgZmFyIGFzIENhcmlhLiBUaGl0aGVyIGhlIHdhcyBjb252ZXllZCwgZW5jb3VudGVyaW5nIGZyZXNoIHBlcmlscyBieSBzZWEgYW5kIHBlcmlscyBhcyBncmVhdCBhcyBiZWZvcmUuIEZyb20gQ2FyaWEsIGFmdGVyIGEgbG9uZyB0aW1lLCBoZSBtYWRlIGhpcyB3YXkgYWNyb3NzIHRvIEVneXB0LCBhbmQgZm91bmQgdGhlIGtpbmcgYm90aCBuYXR1cmFsbHkgd2VsbCBkaXNwb3NlZCB0b3dhcmRzIGhpbSwgYW5kIG11Y2ggZ3JhdGlmaWVkIGJlY2F1c2UgQXJhdHVzIGhhZCBzZW50IGhpbSBkcmF3aW5ncyBhbmQgcGFpbnRpbmdzIGZyb20gR3JlZWNlLiBJbiB0aGVzZSBtYXR0ZXJzIEFyYXR1cyBoYWQgYSByZWZpbmVkIGp1ZGdlbWVudCwgYW5kIHdhcyBjb250aW51YWxseSBjb2xsZWN0aW5nIGFuZCBhY3F1aXJpbmcgd29ya3Mgb2YgYXJ0aXN0aWMgc2tpbGwgYW5kIGV4Y2VsbGVuY2UsIGVzcGVjaWFsbHkgdGhvc2Ugb2YgUGFtcGhpbHVzIGFuZCBNZWxhbnRodXMuIFRoZXNlIGhlIHdvdWxkIHNlbmQgdG8gUHRvbGVteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgZmV3IGRheXMsIHdoaWxlIHN0aWxsIGluIHRoaXMgaGVscGxlc3MgcGxpZ2h0LCBBcmF0dXMgbWV0IHdpdGggYSByYXJlIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSwgZm9yIGEgUm9tYW4gc2hpcCBwdXQgaW4gYXQgdGhlIHBsYWNlIHdoZXJlIGhlIHdhcyBzdGF5aW5nLCBzb21ldGltZXMgb24gYSBsb29rb3V0LXBsYWNlLCBhbmQgc29tZXRpbWVzIGhpZGluZyBoaW1zZWxmLiBUaGUgc2hpcCB3YXMgYm91bmQgZm9yIFN5cmlhLCBidXQgYWZ0ZXIgZ29pbmcgb24gYm9hcmQgQXJhdHVzIHBlcnN1YWRlZCB0aGUgbWFzdGVyIG9mIHRoZSB2ZXNzZWwgdG8gY29udmV5IGhpbSBhcyBmYXIgYXMgQ2FyaWEuIFRoaXRoZXIgaGUgd2FzIGNvbnZleWVkLCBlbmNvdW50ZXJpbmcgZnJlc2ggcGVyaWxzIGJ5IHNlYSBhbmQgcGVyaWxzIGFzIGdyZWF0IGFzIGJlZm9yZS4gRnJvbSBDYXJpYSwgYWZ0ZXIgYSBsb25nIHRpbWUsIGhlIG1hZGUgaGlzIHdheSBhY3Jvc3MgdG8gRWd5cHQsIGFuZCBmb3VuZCB0aGUga2luZyBib3RoIG5hdHVyYWxseSB3ZWxsIGRpc3Bvc2VkIHRvd2FyZHMgaGltLCBhbmQgbXVjaCBncmF0aWZpZWQgYmVjYXVzZSBBcmF0dXMgaGFkIHNlbnQgaGltIGRyYXdpbmdzIGFuZCBwYWludGluZ3MgZnJvbSBHcmVlY2UuIEluIHRoZXNlIG1hdHRlcnMgQXJhdHVzIGhhZCBhIHJlZmluZWQganVkZ2VtZW50LCBhbmQgd2FzIGNvbnRpbnVhbGx5IGNvbGxlY3RpbmcgYW5kIGFjcXVpcmluZyB3b3JrcyBvZiBhcnRpc3RpYyBza2lsbCBhbmQgZXhjZWxsZW5jZSwgZXNwZWNpYWxseSB0aG9zZSBvZiBQYW1waGlsdXMgYW5kIE1lbGFudGh1cy4gVGhlc2UgaGUgd291bGQgc2VuZCB0byBQdG9sZW15LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGZhbWUgb2YgU2ljeW9uJ3MgcmVmaW5lZCBhbmQgYmVhdXRpZnVsIHBhaW50aW5ncyB3YXMgc3RpbGwgaW4gZnVsbCBibG9vbSwgYW5kIHRoZXkgYWxvbmUgd2VyZSB0aG91Z2h0IHRvIGhhdmUgYSBiZWF1dHkgdGhhdCB3YXMgaW5kZXN0cnVjdGlibGUuIFRoZXJlZm9yZSBldmVuIHRoZSBncmVhdCBBcGVsbGVzLCB3aGVuIGhlIHdhcyBhbHJlYWR5IGFkbWlyZWQsIGNhbWUgdG8gU2ljeW9uIGFuZCBnYXZlIGEgdGFsZW50IHRoYXQgaGUgbWlnaHQgYmUgYWRtaXR0ZWQgaW50byB0aGUgc29jaWV0eSBvZiBpdHMgYXJ0aXN0cywgZGVzaXJpbmcgdG8gc2hhcmUgdGhlaXIgZmFtZSByYXRoZXIgdGhhbiB0aGVpciBhcnQuIEhlbmNlIGl0IHdhcyB0aGF0IEFyYXR1cywgYWx0aG91Z2ggaGUgYXQgb25jZSBkZXN0cm95ZWQgdGhlIG90aGVyIHBvcnRyYWl0cyBvZiB0aGUgdHlyYW50cyB3aGVuIGhlIGhhZCBnaXZlbiB0aGUgY2l0eSBpdHMgZnJlZWRvbSwgZGVsaWJlcmF0ZWQgYSBsb25nIHRpbWUgYWJvdXQgdGhhdCBvZiBBcmlzdHJhdHVzICh3aG8gZmxvdXJpc2hlZCBpbiB0aGUgdGltZSBvZiBQaGlsaXAgb2YgTWFjZWRvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBoaWxpcCBJSS4sIDM4Mi0zMzYgQi5DLjwvbm90ZT4pLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIHRoZSB3b3JrIG9mIE1lbGFudGh1cyBhbmQgYWxsIGhpcyBwdXBpbHMsIGFuZCBBcmlzdHJhdHVzIHdhcyBwYWludGVkIHN0YW5kaW5nIGJ5IGEgY2hhcmlvdCBpbiB3aGljaCB3YXMgYSBWaWN0b3J5OyBBcGVsbGVzIGFsc28gaGFkIGEgaGFuZCBpbiB0aGUgcGFpbnRpbmcsIGFzIHdlIGFyZSB0b2xkIGJ5IFBvbGVtb24gdGhlIFRvcG9ncmFwaGVyLiBBbmQgdGhlIHdvcmsgd2FzIGEgbWFydmVsbG91cyBvbmUsIHNvIHRoYXQgQXJhdHVzIHdhcyBtb3ZlZCBieSB0aGUgYXJ0aXN0aWMgc2tpbGwgdGhlcmVpbjsgYnV0IGFmdGVyd2FyZHMsIHN1Y2ggd2FzIGhpcyBoYXRyZWQgb2YgdGhlIHR5cmFudHMsIHRoYXQgaGUgb3JkZXJlZCBpdCB0byBiZSByZW1vdmVkIGFuZCBkZXN0cm95ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgcGFpbnRlciBOZWFsY2VzLCB3aG8gd2FzIGEgZnJpZW5kIG9mIEFyYXR1cywgaW50ZXJjZWRlZCB3aXRoIGhpbSBmb3IgdGhlIHBpY3R1cmUsIGFzIHdlIGFyZSB0b2xkLCBhbmQgd2l0aCB0ZWFycywgYW5kIHdoZW4gaGUgY291bGQgbm90IHBlcnN1YWRlIGhpbSwgc2FpZCB0aGF0IHdhciBzaG91bGQgYmUgd2FnZWQgYWdhaW5zdCB0aGUgdHlyYW50cywgYnV0IG5vdCBhZ2FpbnN0IHRoZSB0cmVhc3VyZXMgb2YgdGhlIHR5cmFudHMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIHRoZXJlZm9yZSBsZWF2ZSB0aGUgY2hhcmlvdCBhbmQgdGhlIFZpY3RvcnksIGJ1dCBBcmlzdHJhdHVzIGhpbXNlbGYgSSB3aWxsIHVuZGVydGFrZSB0byByZW1vdmUgZnJvbSB0aGUgcGljdHVyZS48L3E+IEFyYXR1cyB0aGVyZWZvcmUgeWllbGRlZCwgYW5kIE5lYWxjZXMgZXJhc2VkIHRoZSBmaWd1cmUgb2YgQXJpc3RyYXR1cywgYW5kIGluIGl0cyBwbGFjZSBwYWludGVkIGEgcGFsbS10cmVlIG1lcmVseSwgbm90IGRhcmluZyB0byBpbnRyb2R1Y2UgYW55dGhpbmcgZWxzZS4gV2UgYXJlIHRvbGQsIGhvd2V2ZXIsIHRoYXQgdGhlIGZlZXQgb2YgdGhlIGVyYXNlZCBmaWd1cmUgb2YgQXJpc3RyYXR1cyB3ZXJlIGxlZnQgYnkgYW4gb3ZlcnNpZ2h0IGJlbmVhdGggdGhlIGNoYXJpb3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBmYW1lIG9mIFNpY3lvbidzIHJlZmluZWQgYW5kIGJlYXV0aWZ1bCBwYWludGluZ3Mgd2FzIHN0aWxsIGluIGZ1bGwgYmxvb20sIGFuZCB0aGV5IGFsb25lIHdlcmUgdGhvdWdodCB0byBoYXZlIGEgYmVhdXR5IHRoYXQgd2FzIGluZGVzdHJ1Y3RpYmxlLiBUaGVyZWZvcmUgZXZlbiB0aGUgZ3JlYXQgQXBlbGxlcywgd2hlbiBoZSB3YXMgYWxyZWFkeSBhZG1pcmVkLCBjYW1lIHRvIFNpY3lvbiBhbmQgZ2F2ZSBhIHRhbGVudCB0aGF0IGhlIG1pZ2h0IGJlIGFkbWl0dGVkIGludG8gdGhlIHNvY2lldHkgb2YgaXRzIGFydGlzdHMsIGRlc2lyaW5nIHRvIHNoYXJlIHRoZWlyIGZhbWUgcmF0aGVyIHRoYW4gdGhlaXIgYXJ0LiBIZW5jZSBpdCB3YXMgdGhhdCBBcmF0dXMsIGFsdGhvdWdoIGhlIGF0IG9uY2UgZGVzdHJveWVkIHRoZSBvdGhlciBwb3J0cmFpdHMgb2YgdGhlIHR5cmFudHMgd2hlbiBoZSBoYWQgZ2l2ZW4gdGhlIGNpdHkgaXRzIGZyZWVkb20sIGRlbGliZXJhdGVkIGEgbG9uZyB0aW1lIGFib3V0IHRoYXQgb2YgQXJpc3RyYXR1cyAod2hvIGZsb3VyaXNoZWQgaW4gdGhlIHRpbWUgb2YgUGhpbGlwIG9mIE1hY2Vkb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBoaWxpcCBJSS4sIDM4Mi0zMzYgQi5DLjwvbm90ZT4pLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdGhlIHdvcmsgb2YgTWVsYW50aHVzIGFuZCBhbGwgaGlzIHB1cGlscywgYW5kIEFyaXN0cmF0dXMgd2FzIHBhaW50ZWQgc3RhbmRpbmcgYnkgYSBjaGFyaW90IGluIHdoaWNoIHdhcyBhIFZpY3Rvcnk7IEFwZWxsZXMgYWxzbyBoYWQgYSBoYW5kIGluIHRoZSBwYWludGluZywgYXMgd2UgYXJlIHRvbGQgYnkgUG9sZW1vbiB0aGUgVG9wb2dyYXBoZXIuIEFuZCB0aGUgd29yayB3YXMgYSBtYXJ2ZWxsb3VzIG9uZSwgc28gdGhhdCBBcmF0dXMgd2FzIG1vdmVkIGJ5IHRoZSBhcnRpc3RpYyBza2lsbCB0aGVyZWluOyBidXQgYWZ0ZXJ3YXJkcywgc3VjaCB3YXMgaGlzIGhhdHJlZCBvZiB0aGUgdHlyYW50cywgdGhhdCBoZSBvcmRlcmVkIGl0IHRvIGJlIHJlbW92ZWQgYW5kIGRlc3Ryb3llZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgcGFpbnRlciBOZWFsY2VzLCB3aG8gd2FzIGEgZnJpZW5kIG9mIEFyYXR1cywgaW50ZXJjZWRlZCB3aXRoIGhpbSBmb3IgdGhlIHBpY3R1cmUsIGFzIHdlIGFyZSB0b2xkLCBhbmQgd2l0aCB0ZWFycywgYW5kIHdoZW4gaGUgY291bGQgbm90IHBlcnN1YWRlIGhpbSwgc2FpZCB0aGF0IHdhciBzaG91bGQgYmUgd2FnZWQgYWdhaW5zdCB0aGUgdHlyYW50cywgYnV0IG5vdCBhZ2FpbnN0IHRoZSB0cmVhc3VyZXMgb2YgdGhlIHR5cmFudHMuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgdXMgdGhlcmVmb3JlIGxlYXZlIHRoZSBjaGFyaW90IGFuZCB0aGUgVmljdG9yeSwgYnV0IEFyaXN0cmF0dXMgaGltc2VsZiBJIHdpbGwgdW5kZXJ0YWtlIHRvIHJlbW92ZSBmcm9tIHRoZSBwaWN0dXJlLjwvcT4gQXJhdHVzIHRoZXJlZm9yZSB5aWVsZGVkLCBhbmQgTmVhbGNlcyBlcmFzZWQgdGhlIGZpZ3VyZSBvZiBBcmlzdHJhdHVzLCBhbmQgaW4gaXRzIHBsYWNlIHBhaW50ZWQgYSBwYWxtLXRyZWUgbWVyZWx5LCBub3QgZGFyaW5nIHRvIGludHJvZHVjZSBhbnl0aGluZyBlbHNlLiBXZSBhcmUgdG9sZCwgaG93ZXZlciwgdGhhdCB0aGUgZmVldCBvZiB0aGUgZXJhc2VkIGZpZ3VyZSBvZiBBcmlzdHJhdHVzIHdlcmUgbGVmdCBieSBhbiBvdmVyc2lnaHQgYmVuZWF0aCB0aGUgY2hhcmlvdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBsb3ZlIG9mIGFydCBBcmF0dXMgd2FzIGFscmVhZHkgYmVsb3ZlZCBieSB0aGUga2luZywgYW5kIGluIHBlcnNvbmFsIGludGVyY291cnNlIGdyZXcgeWV0IG1vcmUgdXBvbiBoaW0sIGFuZCByZWNlaXZlZCBmb3IgaGlzIGNpdHkgYSBnaWZ0IG9mIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGFsZW50cy4gRm9ydHkgb2YgdGhlc2UgQXJhdHVzIHRvb2sgd2l0aCBoaW0gYXQgb25jZSBhbmQgc2FpbGVkIHRvIFBlbG9wb25uZXN1czsgdGhlIHJlc3QgdGhlIGtpbmcgZGl2aWRlZCBpbnRvIGluc3RhbGxtZW50cywgYW5kIHNlbnQgdGhlbSB0byBoaW0gYWZ0ZXJ3YXJkcyBvbmUgYnkgb25lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgbG92ZSBvZiBhcnQgQXJhdHVzIHdhcyBhbHJlYWR5IGJlbG92ZWQgYnkgdGhlIGtpbmcsIGFuZCBpbiBwZXJzb25hbCBpbnRlcmNvdXJzZSBncmV3IHlldCBtb3JlIHVwb24gaGltLCBhbmQgcmVjZWl2ZWQgZm9yIGhpcyBjaXR5IGEgZ2lmdCBvZiBhIGh1bmRyZWQgYW5kIGZpZnR5IHRhbGVudHMuIEZvcnR5IG9mIHRoZXNlIEFyYXR1cyB0b29rIHdpdGggaGltIGF0IG9uY2UgYW5kIHNhaWxlZCB0byBQZWxvcG9ubmVzdXM7IHRoZSByZXN0IHRoZSBraW5nIGRpdmlkZWQgaW50byBpbnN0YWxsbWVudHMsIGFuZCBzZW50IHRoZW0gdG8gaGltIGFmdGVyd2FyZHMgb25lIGJ5IG9uZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGl0IHdhcyBhIGdyZWF0IGFjaGlldmVtZW50IHRvIHByb2N1cmUgc28gbGFyZ2UgYSBzdW0gb2YgbW9uZXkgZm9yIGhpcyBmZWxsb3ctY2l0aXplbnM7IG90aGVyIGdlbmVyYWxzIGFuZCBsZWFkZXJzIG9mIHRoZSBwZW9wbGUgaGFkIHRha2VuIGJ1dCBhIGZyYWN0aW9uIG9mIHRoaXMgc3VtIGZyb20ga2luZ3MgaW4gcGF5bWVudCBmb3Igd3JvbmdpbmcsIGVuc2xhdmluZywgYW5kIGJldHJheWluZyB0byB0aGVtIHRoZWlyIG5hdGl2ZSBjaXRpZXMuIEJ1dCBpdCB3YXMgYSBmYXIgZ3JlYXRlciBhY2hpZXZlbWVudCBieSBtZWFucyBvZiB0aGlzIG1vbmV5IHRvIGhhdmUgZWZmZWN0ZWQgYSBoYXJtb25pb3VzIGFkanVzdG1lbnQgb2YgdGhlIGRpc3B1dGVzIGJldHdlZW4gcmljaCBhbmQgcG9vciwgYW5kIHNhZmV0eSBhbmQgc2VjdXJpdHkgZm9yIHRoZSBlbnRpcmUgcGVvcGxlLiBNb3Jlb3Zlciwgd2UgbXVzdCBhZG1pcmUgdGhlIG1vZGVyYXRpb24gb2YgdGhlIG1hbiBpbiB0aGUgZXhlcmNpc2Ugb2Ygc28gZ3JlYXQgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGhlIHdhcyBhcHBvaW50ZWQgaW5kZXBlbmRlbnQgYXJiaXRlciwgd2l0aCBhYnNvbHV0ZSBwb3dlcnMgZm9yIHNldHRsaW5nIHRoZSBtb25leSBhZmZhaXJzIG9mIHRoZSBleGlsZXMsIGhlIHdvdWxkIG5vdCBhY2NlcHQgdGhlIG9mZmljZSBhbG9uZSwgYnV0IGFzc29jaWF0ZWQgd2l0aCBoaW1zZWxmIGZpZnRlZW4gb2YgaGlzIGZlbGxvdy1jaXRpemVucywgYnkgd2hvc2UgYWlkLCBhZnRlciBtdWNoIHRvaWwgYW5kIGdyZWF0IHRyb3VibGUsIGhlIGVzdGFibGlzaGVkIHBlYWNlIGFuZCBmcmllbmRzaGlwIGFtb25nIGhpcyBmZWxsb3ctY2l0aXplbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIENpY2VybywgPHRpdGxlPkRlIE9mZi48L3RpdGxlPiBpaS4gMjMsIDgxZmYuPC9ub3RlPiBGb3IgdGhlc2Ugc2VydmljZXMgbm90IG9ubHkgZGlkIHRoZSBlbnRpcmUgYm9keSBvZiBjaXRpemVucyBiZXN0b3cgZml0dGluZyBwdWJsaWMgaG9ub3VycyB1cG9uIGhpbSwgYnV0IHRoZSBleGlsZXMgYWxzbyBvbiB0aGVpciBvd24gYWNjb3VudCBlcmVjdGVkIGEgYnJvbnplIHN0YXR1ZSBvZiBoaW0sIGFuZCBpbnNjcmliZWQgdGhlcmVvbiB0aGUgZm9sbG93aW5nIGVsZWdpYWMgdmVyc2VzOuKAlAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIGNvdW5zZWxzLCB2YWxvcm91cyBkZWVkcywgYW5kIHByb3dlc3MgaW4gYmVoYWxmIG9mIEhlbGxhcywgd2hpY2ggdGhpcyBtYW4gaGFzIGRpc3BsYXllZCwgYXJlIGtub3duIGFzIGZhciBhcyB0aGUgUGlsbGFycyBvZiBIZXJhY2xlczsgYnV0IHdlIHdobyBhY2hpZXZlZCBvdXIgcmV0dXJuIHRocm91Z2ggdGhlZSwgQXJhdHVzLCBmb3IgdGh5IHZpcnR1ZSBhbmQganVzdGljZSwgaGF2ZSBlcmVjdGVkIHRvIHRoZSBTYXZpb3VyIEdvZHMgdGhpcyBzdGF0dWUgb2Ygb3VyIHNhdmlvdXIsIGJlY2F1c2UgdG8gdGh5IG5hdGl2ZSBjaXR5IHRob3UgaGFzdCBicm91Z2h0IGEgc2FjcmVkIGFuZCBoZWF2ZW5seSByZWlnbiBvZiBsYXcuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGl0IHdhcyBhIGdyZWF0IGFjaGlldmVtZW50IHRvIHByb2N1cmUgc28gbGFyZ2UgYSBzdW0gb2YgbW9uZXkgZm9yIGhpcyBmZWxsb3ctY2l0aXplbnM7IG90aGVyIGdlbmVyYWxzIGFuZCBsZWFkZXJzIG9mIHRoZSBwZW9wbGUgaGFkIHRha2VuIGJ1dCBhIGZyYWN0aW9uIG9mIHRoaXMgc3VtIGZyb20ga2luZ3MgaW4gcGF5bWVudCBmb3Igd3JvbmdpbmcsIGVuc2xhdmluZywgYW5kIGJldHJheWluZyB0byB0aGVtIHRoZWlyIG5hdGl2ZSBjaXRpZXMuIEJ1dCBpdCB3YXMgYSBmYXIgZ3JlYXRlciBhY2hpZXZlbWVudCBieSBtZWFucyBvZiB0aGlzIG1vbmV5IHRvIGhhdmUgZWZmZWN0ZWQgYSBoYXJtb25pb3VzIGFkanVzdG1lbnQgb2YgdGhlIGRpc3B1dGVzIGJldHdlZW4gcmljaCBhbmQgcG9vciwgYW5kIHNhZmV0eSBhbmQgc2VjdXJpdHkgZm9yIHRoZSBlbnRpcmUgcGVvcGxlLiBNb3Jlb3Zlciwgd2UgbXVzdCBhZG1pcmUgdGhlIG1vZGVyYXRpb24gb2YgdGhlIG1hbiBpbiB0aGUgZXhlcmNpc2Ugb2Ygc28gZ3JlYXQgcG93ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGhlIHdhcyBhcHBvaW50ZWQgaW5kZXBlbmRlbnQgYXJiaXRlciwgd2l0aCBhYnNvbHV0ZSBwb3dlcnMgZm9yIHNldHRsaW5nIHRoZSBtb25leSBhZmZhaXJzIG9mIHRoZSBleGlsZXMsIGhlIHdvdWxkIG5vdCBhY2NlcHQgdGhlIG9mZmljZSBhbG9uZSwgYnV0IGFzc29jaWF0ZWQgd2l0aCBoaW1zZWxmIGZpZnRlZW4gb2YgaGlzIGZlbGxvdy1jaXRpemVucywgYnkgd2hvc2UgYWlkLCBhZnRlciBtdWNoIHRvaWwgYW5kIGdyZWF0IHRyb3VibGUsIGhlIGVzdGFibGlzaGVkIHBlYWNlIGFuZCBmcmllbmRzaGlwIGFtb25nIGhpcyBmZWxsb3ctY2l0aXplbnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gQ2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBPZmYuPC90aXRsZT4gaWkuIDIzLCA4MWZmLjwvbm90ZT4gRm9yIHRoZXNlIHNlcnZpY2VzIG5vdCBvbmx5IGRpZCB0aGUgZW50aXJlIGJvZHkgb2YgY2l0aXplbnMgYmVzdG93IGZpdHRpbmcgcHVibGljIGhvbm91cnMgdXBvbiBoaW0sIGJ1dCB0aGUgZXhpbGVzIGFsc28gb24gdGhlaXIgb3duIGFjY291bnQgZXJlY3RlZCBhIGJyb256ZSBzdGF0dWUgb2YgaGltLCBhbmQgaW5zY3JpYmVkIHRoZXJlb24gdGhlIGZvbGxvd2luZyBlbGVnaWFjIHZlcnNlczrigJQKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIE9mZi48L3RpdGxlPiBpaS4gMjMsIDgxZmYuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgY291bnNlbHMsIHZhbG9yb3VzIGRlZWRzLCBhbmQgcHJvd2VzcyBpbiBiZWhhbGYgb2YgSGVsbGFzLCB3aGljaCB0aGlzIG1hbiBoYXMgZGlzcGxheWVkLCBhcmUga25vd24gYXMgZmFyIGFzIHRoZSBQaWxsYXJzIG9mIEhlcmFjbGVzOyBidXQgd2Ugd2hvIGFjaGlldmVkIG91ciByZXR1cm4gdGhyb3VnaCB0aGVlLCBBcmF0dXMsIGZvciB0aHkgdmlydHVlIGFuZCBqdXN0aWNlLCBoYXZlIGVyZWN0ZWQgdG8gdGhlIFNhdmlvdXIgR29kcyB0aGlzIHN0YXR1ZSBvZiBvdXIgc2F2aW91ciwgYmVjYXVzZSB0byB0aHkgbmF0aXZlIGNpdHkgdGhvdSBoYXN0IGJyb3VnaHQgYSBzYWNyZWQgYW5kIGhlYXZlbmx5IHJlaWduIG9mIGxhdy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHN1Y2Nlc3NmdWwgYWNoaWV2ZW1lbnRzIHBsYWNlZCBBcmF0dXMgYmV5b25kIHRoZSBqZWFsb3VzeSBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLCBvd2luZyB0byB0aGUgZ3JhdGl0dWRlIHdoaWNoIGhlIGluc3BpcmVkOyBidXQgQW50aWdvbnVzLCB0aGUga2luZywgd2FzIGFubm95ZWQgYnkgdGhlIHBvbGljeSBvZiBBcmF0dXMsIGFuZCB3aXNoZWQgZWl0aGVyIHRvIGJyaW5nIGhpbSBvdmVyIGludG8gY29tcGxldGUgZnJpZW5kc2hpcCB3aXRoIGhpbXNlbGYgb3IgdG8gYWxpZW5hdGUgaGltIGZyb20gUHRvbGVteS4gSGUgdGhlcmVmb3JlIHNob3dlZCBoaW0gbWFueSBraW5kbmVzc2VzIHdoaWNoIHdlcmUgbm90IGF0IGFsbCB3ZWxjb21lLCBhbmQgZXNwZWNpYWxseSB0aGlzLCB0aGF0IGFzIGhlIHdhcyBzYWNyaWZpY2luZyB0byB0aGUgZ29kcyBhdCBDb3JpbnRoLCBoZSBzZW50IHBvcnRpb25zIG9mIHRoZSB2aWN0aW1zIHRvIEFyYXR1cyBhdCBTaWN5b24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCB0aGUgYmFucXVldCB3aGljaCBmb2xsb3dlZCwgd2hlcmUgbWFueSBndWVzdHMgd2VyZSBwcmVzZW50LCBoZSBzYWlkLCBzbyB0aGF0IGFsbCBjb3VsZCBoZWFyOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgdGhvdWdodCB0aGlzIFNpY3lvbmlhbiB5b3V0aCB3YXMgbWVyZWx5IGZyZWUtc3Bpcml0ZWQgYW5kIGEgbG92ZXIgb2YgaGlzIGZlbGxvdy1jaXRpemVuczsgYnV0IGhlIHdvdWxkIHNlZW0gdG8gYmUgYSBjYXBhYmxlIGp1ZGdlIGFsc28gb2YgdGhlIGxpdmVzIGFuZCBhY3Rpb25zIG9mIGtpbmdzLiBGb3IgZm9ybWVybHkgaGUgd2FzIGluY2xpbmVkIHRvIG92ZXJsb29rIHVzLCBmaXhpbmcgaGlzIGhvcGVzIGVsc2V3aGVyZSwgYW5kIGhlIGFkbWlyZWQgdGhlIHdlYWx0aCBvZiBFZ3lwdCwgaGVhcmluZyB0YWxlcyBvZiBpdHMgZWxlcGhhbnRzLCBhbmQgZmxlZXRzLCBhbmQgcGFsYWNlczsgYnV0IG5vdyB0aGF0IGhlIGhhcyBiZWVuIGJlaGluZCB0aGUgc2NlbmVzIGFuZCBzZWVuIHRoYXQgZXZlcnl0aGluZyBpbiBFZ3lwdCBpcyBwbGF5LWFjdGluZyBhbmQgcGFpbnRlZCBzY2VuZXJ5LCBoZSBoYXMgY29tZSBvdmVyIGVudGlyZWx5IHRvIHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgSSBib3RoIHdlbGNvbWUgdGhlIHlvdW5nIG1hbiBteXNlbGYsIGhhdmluZyBkZXRlcm1pbmVkIHRvIG1ha2UgZXZlcnkgcG9zc2libGUgdXNlIG9mIGhpbSwgYW5kIEkgYXNrIHlvdSB0byBjb25zaWRlciBoaW0gYSBmcmllbmQuPC9xPiBUaGVzZSB3b3JkcyB3ZXJlIHNlaXplZCB1cG9uIGJ5IHRoZSBlbnZpb3VzIGFuZCBtYWxldm9sZW50LCB3aG8gdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIHdyaXRpbmcgdG8gUHRvbGVteSBtYW55IGdyaWV2b3VzIGNoYXJnZXMgYWdhaW5zdCBBcmF0dXMsIHNvIHRoYXQgdGhlIGtpbmcgc2VudCBhbiBlbnZveSBhbmQgdXBicmFpZGVkIGhpbS4gU28gZ3JlYXQgbWFsaWNlIGFuZCBlbnZ5IGF0dGVuZCB1cG9uIHRoZSBmcmllbmRzaGlwcyBvZiBraW5ncyBhbmQgdHlyYW50cywgZm9yIHdoaWNoIG1lbiBzdHJpdmUgYW5kIGF0IHdoaWNoIHRoZXkgYWltIHdpdGggYXJkZW50IHBhc3Npb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugc3VjY2Vzc2Z1bCBhY2hpZXZlbWVudHMgcGxhY2VkIEFyYXR1cyBiZXlvbmQgdGhlIGplYWxvdXN5IG9mIGhpcyBmZWxsb3ctY2l0aXplbnMsIG93aW5nIHRvIHRoZSBncmF0aXR1ZGUgd2hpY2ggaGUgaW5zcGlyZWQ7IGJ1dCBBbnRpZ29udXMsIHRoZSBraW5nLCB3YXMgYW5ub3llZCBieSB0aGUgcG9saWN5IG9mIEFyYXR1cywgYW5kIHdpc2hlZCBlaXRoZXIgdG8gYnJpbmcgaGltIG92ZXIgaW50byBjb21wbGV0ZSBmcmllbmRzaGlwIHdpdGggaGltc2VsZiBvciB0byBhbGllbmF0ZSBoaW0gZnJvbSBQdG9sZW15LiBIZSB0aGVyZWZvcmUgc2hvd2VkIGhpbSBtYW55IGtpbmRuZXNzZXMgd2hpY2ggd2VyZSBub3QgYXQgYWxsIHdlbGNvbWUsIGFuZCBlc3BlY2lhbGx5IHRoaXMsIHRoYXQgYXMgaGUgd2FzIHNhY3JpZmljaW5nIHRvIHRoZSBnb2RzIGF0IENvcmludGgsIGhlIHNlbnQgcG9ydGlvbnMgb2YgdGhlIHZpY3RpbXMgdG8gQXJhdHVzIGF0IFNpY3lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCB0aGUgYmFucXVldCB3aGljaCBmb2xsb3dlZCwgd2hlcmUgbWFueSBndWVzdHMgd2VyZSBwcmVzZW50LCBoZSBzYWlkLCBzbyB0aGF0IGFsbCBjb3VsZCBoZWFyOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB0aG91Z2h0IHRoaXMgU2ljeW9uaWFuIHlvdXRoIHdhcyBtZXJlbHkgZnJlZS1zcGlyaXRlZCBhbmQgYSBsb3ZlciBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zOyBidXQgaGUgd291bGQgc2VlbSB0byBiZSBhIGNhcGFibGUganVkZ2UgYWxzbyBvZiB0aGUgbGl2ZXMgYW5kIGFjdGlvbnMgb2Yga2luZ3MuIEZvciBmb3JtZXJseSBoZSB3YXMgaW5jbGluZWQgdG8gb3Zlcmxvb2sgdXMsIGZpeGluZyBoaXMgaG9wZXMgZWxzZXdoZXJlLCBhbmQgaGUgYWRtaXJlZCB0aGUgd2VhbHRoIG9mIEVneXB0LCBoZWFyaW5nIHRhbGVzIG9mIGl0cyBlbGVwaGFudHMsIGFuZCBmbGVldHMsIGFuZCBwYWxhY2VzOyBidXQgbm93IHRoYXQgaGUgaGFzIGJlZW4gYmVoaW5kIHRoZSBzY2VuZXMgYW5kIHNlZW4gdGhhdCBldmVyeXRoaW5nIGluIEVneXB0IGlzIHBsYXktYWN0aW5nIGFuZCBwYWludGVkIHNjZW5lcnksIGhlIGhhcyBjb21lIG92ZXIgZW50aXJlbHkgdG8gdXMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIEkgYm90aCB3ZWxjb21lIHRoZSB5b3VuZyBtYW4gbXlzZWxmLCBoYXZpbmcgZGV0ZXJtaW5lZCB0byBtYWtlIGV2ZXJ5IHBvc3NpYmxlIHVzZSBvZiBoaW0sIGFuZCBJIGFzayB5b3UgdG8gY29uc2lkZXIgaGltIGEgZnJpZW5kLjwvcT4gVGhlc2Ugd29yZHMgd2VyZSBzZWl6ZWQgdXBvbiBieSB0aGUgZW52aW91cyBhbmQgbWFsZXZvbGVudCwgd2hvIHZpZWQgd2l0aCBvbmUgYW5vdGhlciBpbiB3cml0aW5nIHRvIFB0b2xlbXkgbWFueSBncmlldm91cyBjaGFyZ2VzIGFnYWluc3QgQXJhdHVzLCBzbyB0aGF0IHRoZSBraW5nIHNlbnQgYW4gZW52b3kgYW5kIHVwYnJhaWRlZCBoaW0uIFNvIGdyZWF0IG1hbGljZSBhbmQgZW52eSBhdHRlbmQgdXBvbiB0aGUgZnJpZW5kc2hpcHMgb2Yga2luZ3MgYW5kIHR5cmFudHMsIGZvciB3aGljaCBtZW4gc3RyaXZlIGFuZCBhdCB3aGljaCB0aGV5IGFpbSB3aXRoIGFyZGVudCBwYXNzaW9uLgoJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBJIGJvdGggd2VsY29tZSB0aGUgeW91bmcgbWFuIG15c2VsZiwgaGF2aW5nIGRldGVybWluZWQgdG8gbWFrZSBldmVyeSBwb3NzaWJsZSB1c2Ugb2YgaGltLCBhbmQgSSBhc2sgeW91IHRvIGNvbnNpZGVyIGhpbSBhIGZyaWVuZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMgbm93LCBoYXZpbmcgYmVlbiBjaG9zZW4gZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbiBMZWFndWUgZm9yIHRoZSBmaXJzdCB0aW1lLCByYXZhZ2VkIHRoZSBvcHBvc2l0ZSB0ZXJyaXRvcmllcyBvZiBMb2NyaXMgYW5kIENhbHlkb25pYSwgYW5kIHdlbnQgdG8gdGhlIGFzc2lzdGFuY2Ugb2YgdGhlIEJvZW90aWFucyB3aXRoIGFuIGFybXkgb2YgdGVuIHRob3VzYW5kIG1lbi4gSGUgY2FtZSB0b28gbGF0ZSwgaG93ZXZlciwgZm9yIHRoZSBiYXR0bGUgYXQgQ2hhZXJvbmVpYSwgaW4gd2hpY2ggdGhlIEJvZW90aWFucyB3ZXJlIGRlZmVhdGVkIGJ5IHRoZSBBZXRvbGlhbnMsIHdpdGggdGhlIGxvc3Mgb2YgQWJvZW9jcml0dXMsIHRoZWlyIEJvZW90YXJjaCwgYW5kIGEgdGhvdXNhbmQgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BIHllYXIgbGF0ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjQzIEIuQy4sIHR3byB5ZWFycyBsYXRlci4gVGhlIG9mZmljZSBvZiBnZW5lcmFsIGluIHRoZSBMZWFndWUgY291bGQgbm90IGJlIGhlbGQgYnkgdGhlIHNhbWUgcGVyc29uIGluIHN1Y2Nlc3NpdmUgeWVhcnMuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMjQuNCIgdmFsaWQ9InllcyI+Y2hhcC4geHhpdi4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYmVpbmcgZ2VuZXJhbCBhZ2FpbiwgaGUgc2V0IG9uIGZvb3QgdGhlIGVudGVycHJpc2UgZm9yIHRoZSByZWNvdmVyeSBvZiBBY3JvY29yaW50aHVzLCBub3QgaW4gdGhlIGludGVyZXN0cyBvZiBTaWN5b25pYW5zIG9yIEFjaGFlYW5zIG1lcmVseSwgYnV0IHB1cnBvc2luZyB0byBkcml2ZSBmcm9tIHRoYXQgc3Ryb25naG9sZCB3aGF0IGhlbGQgYWxsIEhlbGxhcyBpbiBhIGNvbW1vbiBzdWJqZWN0aW9uLOKAlHRoZSBNYWNlZG9uaWFuIGdhcnJpc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DaGFyZXMgdGhlIEF0aGVuaWFuLCBoYXZpbmcgYmVlbiBzdWNjZXNzZnVsIGluIGEgYmF0dGxlIHdpdGggdGhlIGtpbmcncyBnZW5lcmFscywgd3JvdGUgdG8gdGhlIHBlb3BsZSBvZiBBdGhlbnMgdGhhdCBoZSBoYWQgd29uIGEgYmF0dGxlIHdoaWNoIHdhcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNpc3RlciB0byB0aGF0IGF0IE1hcmF0aG9uPC9xPjsgYW5kIHRoaXMgZW50ZXJwcmlzZSBvZiBBcmF0dXMgbWF5IGJlIHJpZ2h0bHkgY2FsbGVkIGEgc2lzdGVyIG9mIHRob3NlIG9mIFBlbG9waWRhcyB0aGUgVGhlYmFuIGFuZCBUaHJhc3lidWx1cyB0aGUgQXRoZW5pYW4sIGluIHdoaWNoIHRoZXkgc2xldyB0eXJhbnRzLCBleGNlcHQgdGhhdCBpdCBzdXJwYXNzZWQgdGhlbSBpbiBiZWluZyB1bmRlcnRha2VuLCBub3QgYWdhaW5zdCBHcmVla3MsIGJ1dCBhZ2FpbnN0IGEgZm9yZWlnbiBhbmQgYWxpZW4gcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgSXN0aG11cyBvZiBDb3JpbnRoLCBmb3JtaW5nIGEgYmFycmllciBiZXR3ZWVuIHRoZSBzZWFzLCBicmluZ3MgdG9nZXRoZXIgdGhlIHR3byByZWdpb25zLCBhbmQgdGh1cyB1bml0ZXMgb3VyIGNvbnRpbmVudDsgYW5kIHdoZW4gQWNyb2NvcmludGh1cywgd2hpY2ggaXMgYSBsb2Z0eSBoaWxsIHNwcmluZ2luZyB1cCBhdCB0aGlzIGNlbnRyZSBvZiBHcmVlY2UsIGlzIGhlbGQgYnkgYSBnYXJyaXNvbiwgaXQgaGluZGVycyBhbmQgY3V0cyBvZmYgYWxsIHRoZSBjb3VudHJ5IHNvdXRoIG9mIHRoZSBJc3RobXVzIGZyb20gaW50ZXJjb3Vyc2UsIHRyYW5zaXRzLCBhbmQgdGhlIGNhcnJ5aW5nIG9uIG9mIG1pbGl0YXJ5IGV4cGVkaXRpb25zIGJ5IGxhbmQgYW5kIHNlYSwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG1ha2VzIGhpbSB3aG8gY29udHJvbHMgdGhlIHBsYWNlIHdpdGggYSBnYXJyaXNvbiBzb2xlIGxvcmQgb2YgR3JlZWNlLiBUaGVyZWZvcmUgaXQgaXMgdGhvdWdodCB0aGF0IHRoZSB5b3VuZ2VyIFBoaWxpcCBvZiBNYWNlZG9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGhpbGlwIFYuLCAyMzctMTc5IEIuQy48L25vdGU+IHV0dGVyZWQgbm8gamVzdCwgYnV0IHRoZSB0cnV0aCwgd2hlbmV2ZXIgaGUgY2FsbGVkIHRoZSBjaXR5IG9mIENvcmludGggCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgZmV0dGVycyBvZiBHcmVlY2UuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIG5vdywgaGF2aW5nIGJlZW4gY2hvc2VuIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW4gTGVhZ3VlIGZvciB0aGUgZmlyc3QgdGltZSwgcmF2YWdlZCB0aGUgb3Bwb3NpdGUgdGVycml0b3JpZXMgb2YgTG9jcmlzIGFuZCBDYWx5ZG9uaWEsIGFuZCB3ZW50IHRvIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSBCb2VvdGlhbnMgd2l0aCBhbiBhcm15IG9mIHRlbiB0aG91c2FuZCBtZW4uIEhlIGNhbWUgdG9vIGxhdGUsIGhvd2V2ZXIsIGZvciB0aGUgYmF0dGxlIGF0IENoYWVyb25laWEsIGluIHdoaWNoIHRoZSBCb2VvdGlhbnMgd2VyZSBkZWZlYXRlZCBieSB0aGUgQWV0b2xpYW5zLCB3aXRoIHRoZSBsb3NzIG9mIEFib2VvY3JpdHVzLCB0aGVpciBCb2VvdGFyY2gsIGFuZCBhIHRob3VzYW5kIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkEgeWVhciBsYXRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDI0MyBCLkMuLCB0d28geWVhcnMgbGF0ZXIuIFRoZSBvZmZpY2Ugb2YgZ2VuZXJhbCBpbiB0aGUgTGVhZ3VlIGNvdWxkIG5vdCBiZSBoZWxkIGJ5IHRoZSBzYW1lIHBlcnNvbiBpbiBzdWNjZXNzaXZlIHllYXJzLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMjQuNCIgdmFsaWQ9InllcyI+Y2hhcC4geHhpdi4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYmVpbmcgZ2VuZXJhbCBhZ2FpbiwgaGUgc2V0IG9uIGZvb3QgdGhlIGVudGVycHJpc2UgZm9yIHRoZSByZWNvdmVyeSBvZiBBY3JvY29yaW50aHVzLCBub3QgaW4gdGhlIGludGVyZXN0cyBvZiBTaWN5b25pYW5zIG9yIEFjaGFlYW5zIG1lcmVseSwgYnV0IHB1cnBvc2luZyB0byBkcml2ZSBmcm9tIHRoYXQgc3Ryb25naG9sZCB3aGF0IGhlbGQgYWxsIEhlbGxhcyBpbiBhIGNvbW1vbiBzdWJqZWN0aW9uLOKAlHRoZSBNYWNlZG9uaWFuIGdhcnJpc29uLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDI0LjQiIHZhbGlkPSJ5ZXMiPmNoYXAuIHh4aXYuIDQuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNoYXJlcyB0aGUgQXRoZW5pYW4sIGhhdmluZyBiZWVuIHN1Y2Nlc3NmdWwgaW4gYSBiYXR0bGUgd2l0aCB0aGUga2luZydzIGdlbmVyYWxzLCB3cm90ZSB0byB0aGUgcGVvcGxlIG9mIEF0aGVucyB0aGF0IGhlIGhhZCB3b24gYSBiYXR0bGUgd2hpY2ggd2FzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zaXN0ZXIgdG8gdGhhdCBhdCBNYXJhdGhvbjwvcT47IGFuZCB0aGlzIGVudGVycHJpc2Ugb2YgQXJhdHVzIG1heSBiZSByaWdodGx5IGNhbGxlZCBhIHNpc3RlciBvZiB0aG9zZSBvZiBQZWxvcGlkYXMgdGhlIFRoZWJhbiBhbmQgVGhyYXN5YnVsdXMgdGhlIEF0aGVuaWFuLCBpbiB3aGljaCB0aGV5IHNsZXcgdHlyYW50cywgZXhjZXB0IHRoYXQgaXQgc3VycGFzc2VkIHRoZW0gaW4gYmVpbmcgdW5kZXJ0YWtlbiwgbm90IGFnYWluc3QgR3JlZWtzLCBidXQgYWdhaW5zdCBhIGZvcmVpZ24gYW5kIGFsaWVuIHBvd2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgSXN0aG11cyBvZiBDb3JpbnRoLCBmb3JtaW5nIGEgYmFycmllciBiZXR3ZWVuIHRoZSBzZWFzLCBicmluZ3MgdG9nZXRoZXIgdGhlIHR3byByZWdpb25zLCBhbmQgdGh1cyB1bml0ZXMgb3VyIGNvbnRpbmVudDsgYW5kIHdoZW4gQWNyb2NvcmludGh1cywgd2hpY2ggaXMgYSBsb2Z0eSBoaWxsIHNwcmluZ2luZyB1cCBhdCB0aGlzIGNlbnRyZSBvZiBHcmVlY2UsIGlzIGhlbGQgYnkgYSBnYXJyaXNvbiwgaXQgaGluZGVycyBhbmQgY3V0cyBvZmYgYWxsIHRoZSBjb3VudHJ5IHNvdXRoIG9mIHRoZSBJc3RobXVzIGZyb20gaW50ZXJjb3Vyc2UsIHRyYW5zaXRzLCBhbmQgdGhlIGNhcnJ5aW5nIG9uIG9mIG1pbGl0YXJ5IGV4cGVkaXRpb25zIGJ5IGxhbmQgYW5kIHNlYSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYWtlcyBoaW0gd2hvIGNvbnRyb2xzIHRoZSBwbGFjZSB3aXRoIGEgZ2Fycmlzb24gc29sZSBsb3JkIG9mIEdyZWVjZS4gVGhlcmVmb3JlIGl0IGlzIHRob3VnaHQgdGhhdCB0aGUgeW91bmdlciBQaGlsaXAgb2YgTWFjZWRvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGhpbGlwIFYuLCAyMzctMTc5IEIuQy48L25vdGU+IHV0dGVyZWQgbm8gamVzdCwgYnV0IHRoZSB0cnV0aCwgd2hlbmV2ZXIgaGUgY2FsbGVkIHRoZSBjaXR5IG9mIENvcmludGggCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBmZXR0ZXJzIG9mIEdyZWVjZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgcGxhY2Ugd2FzIGFsd2F5cyBhbiBvYmplY3Qgb2YgZ3JlYXQgY29udGVudGlvbiBhbW9uZyBraW5ncyBhbmQgZHluYXN0cywgYnV0IHRoZSBlYWdlcm5lc3Mgb2YgQW50aWdvbnVzIHRvIHNlY3VyZSBpdCBmZWxsIG5vdGhpbmcgc2hvcnQgb2YgdGhlIG1vc3QgZnJlbnppZWQgcGFzc2lvbiwgYW5kIGhlIHdhcyB3aG9sbHkgYWJzb3JiZWQgaW4gc2NoZW1lcyB0byB0YWtlIGl0IGJ5IHN0cmF0YWdlbSBmcm9tIGl0cyBwb3NzZXNzb3JzLCBzaW5jZSBhbiBvcGVuIGF0dGVtcHQgdXBvbiBpdCB3YXMgaG9wZWxlc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIEFsZXhhbmRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgdHlyYW50IG9mIENvcmludGguPC9ub3RlPiBpbiB3aG9zZSBoYW5kcyB0aGUgcGxhY2Ugd2FzLCBoYWQgZGllZCBvZiBwb2lzb24gZ2l2ZW4gaGltIChpdCBpcyBzYWlkKSBpbiBvYmVkaWVuY2UgdG8gQW50aWdvbnVzLCBhbmQgaGlzIHdpZmUgTmljYWVhIGhhZCBzdWNjZWVkZWQgdG8gaGlzIHBvd2VyIGFuZCB3YXMgZ3VhcmRpbmcgdGhlIGNpdGFkZWwsIEFudGlnb251cyBhdCBvbmNlIHNlbnQgaGlzIHNvbiBEZW1ldHJpdXMgdG8gaGVyIGluIGZ1cnRoZXJhbmNlIG9mIGhpcyBzY2hlbWVzLCBhbmQgYnkgaW5zcGlyaW5nIGhlciB3aXRoIHBsZWFzYW50IGhvcGVzIG9mIGEgcm95YWwgbWFycmlhZ2UgYW5kIG9mIHdlZGRlZCBsaWZlIHdpdGggYSB5b3VuZyBtYW4gd2hvIHdvdWxkIGJlIG5vIGRpc2FncmVlYWJsZSBjb21wYW55IGZvciBhbiBlbGRlcmx5IHdvbWFuLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5oZSBjYXB0dXJlZCBoZXIsIHVzaW5nIGhpcyBzb24gZm9yIGFsbCB0aGUgd29ybGQgbGlrZSBhIGJhaXQgZm9yIGhlci4gVGhlIGNpdGFkZWwsIGhvd2V2ZXIsIHNoZSBkaWQgbm90IGdpdmUgdXAsIGJ1dCBrZXB0IGl0IHVuZGVyIHN0cm9uZyBndWFyZC4gUHJldGVuZGluZywgdGhlcmVmb3JlLCBpbmRpZmZlcmVuY2UgdG8gdGhpcywgQW50aWdvbnVzIGNlbGVicmF0ZWQgdGhlIG51cHRpYWxzIG9mIHRoZSBwYWlyIGluIENvcmludGgsIGV4aGliaXRpbmcgc3BlY3RhY2xlcyBhbmQgZ2l2aW5nIGJhbnF1ZXRzIGV2ZXJ5IGRheSwgYXMgb25lIHdob20gcGxlYXN1cmUgYW5kIGtpbmRsaW5lc3MgbGVkIHRvIHRoaW5rIGNoaWVmbHkgb2YgbWlydGggYW5kIGVhc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBjcnVjaWFsIG1vbWVudCBjYW1lLCBhbmQgYXMgQW1vZWJldXMgd2FzIGFib3V0IHRvIHNpbmcgaW4gdGhlIHRoZWF0cmUsIGhlIGVzY29ydGVkIE5pY2FlYSBpbiBwZXJzb24gdG8gdGhlIHNwZWN0YWNsZS4gU2hlIHdhcyBib3JuZSBpbiBhIGxpdHRlciB3aGljaCBoYWQgcm95YWwgdHJhcHBpbmdzLCBwbHVtZWQgaGVyc2VsZiBvbiBoZXIgbmV3IGhvbm91ciwgYW5kIGhhZCBub3QgdGhlIHJlbW90ZXN0IHN1c3BpY2lvbiBvZiB3aGF0IHdhcyB0byBoYXBwZW4uIFRoZW4sIGFycml2ZWQgYXQgdGhlIGRpdmVyZ2luZyBzdHJlZXQgdGhhdCBsZWQgdXAgdG8gdGhlIGNpdGFkZWwsIEFudGlnb251cyBnYXZlIG9yZGVycyB0aGF0IE5pY2FlYSBzaG91bGQgYmUgYm9ybmUgb24gaW50byB0aGUgdGhlYXRyZSwgd2hpbGUgaGUgaGltc2VsZiwgYmlkZGluZyBhZGlldSB0byBBbW9lYmV1cywgYW5kIGFkaWV1IHRvIHRoZSBudXB0aWFscywgd2VudCB1cCB0byBBY3JvY29yaW50aHVzIHdpdGggYSBzcGVlZCB0aGF0IGJlbGllZCBoaXMgeWVhcnM7IGFuZCwgZmluZGluZyB0aGUgZ2F0ZSBsb2NrZWQsIGhlIGJlYXQgdXBvbiBpdCB3aXRoIGhpcyBzdGFmZiBhbmQgb3JkZXJlZCBpdCB0byBiZSBvcGVuZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgZ3VhcmRzIHdpdGhpbiwgc3R1cGVmaWVkLCBvcGVuZWQgaXQuIFRodXMgbWFzdGVyIG9mIHRoZSBwbGFjZSwgaGUgY291bGQgbm90IGNvbnRhaW4gaGltc2VsZiBmb3Igam95LCBidXQgZHJhbmsgYW5kIGRpc3BvcnRlZCBoaW1zZWxmIGluIHRoZSBzdHJlZXRzLCBhbmQgd2l0aCBtdXNpYy1naXJscyBpbiBoaXMgdHJhaW4gYW5kIGdhcmxhbmRzIG9uIGhpcyBoZWFkLCBvbGQgbWFuIHRoYXQgaGUgd2FzIGFuZCBhY3F1YWludGVkIHdpdGggc28gZ3JlYXQgdmljaXNzaXR1ZGVzIG9mIGZvcnR1bmUsIHJldmVsbGVkIHRocm91Z2ggdGhlIG1hcmtldC1wbGFjZSwgZ3JlZXRpbmcgYW5kIGNsYXNwaW5nIGhhbmRzIHdpdGggYWxsIHdobyBtZXQgaGltLiBUaHVzIHdlIHNlZSB0aGF0IG5laXRoZXIgZ3JpZWYgbm9yIGZlYXIgdHJhbnNwb3J0cyBhbmQgYWdpdGF0ZXMgdGhlIHNvdWwgYXMgbXVjaCBhcyBqb3kgdGhhdCBjb21lcyB1bmV4cGVjdGVkbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBwbGFjZSB3YXMgYWx3YXlzIGFuIG9iamVjdCBvZiBncmVhdCBjb250ZW50aW9uIGFtb25nIGtpbmdzIGFuZCBkeW5hc3RzLCBidXQgdGhlIGVhZ2VybmVzcyBvZiBBbnRpZ29udXMgdG8gc2VjdXJlIGl0IGZlbGwgbm90aGluZyBzaG9ydCBvZiB0aGUgbW9zdCBmcmVuemllZCBwYXNzaW9uLCBhbmQgaGUgd2FzIHdob2xseSBhYnNvcmJlZCBpbiBzY2hlbWVzIHRvIHRha2UgaXQgYnkgc3RyYXRhZ2VtIGZyb20gaXRzIHBvc3Nlc3NvcnMsIHNpbmNlIGFuIG9wZW4gYXR0ZW1wdCB1cG9uIGl0IHdhcyBob3BlbGVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIEFsZXhhbmRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB0eXJhbnQgb2YgQ29yaW50aC48L25vdGU+IGluIHdob3NlIGhhbmRzIHRoZSBwbGFjZSB3YXMsIGhhZCBkaWVkIG9mIHBvaXNvbiBnaXZlbiBoaW0gKGl0IGlzIHNhaWQpIGluIG9iZWRpZW5jZSB0byBBbnRpZ29udXMsIGFuZCBoaXMgd2lmZSBOaWNhZWEgaGFkIHN1Y2NlZWRlZCB0byBoaXMgcG93ZXIgYW5kIHdhcyBndWFyZGluZyB0aGUgY2l0YWRlbCwgQW50aWdvbnVzIGF0IG9uY2Ugc2VudCBoaXMgc29uIERlbWV0cml1cyB0byBoZXIgaW4gZnVydGhlcmFuY2Ugb2YgaGlzIHNjaGVtZXMsIGFuZCBieSBpbnNwaXJpbmcgaGVyIHdpdGggcGxlYXNhbnQgaG9wZXMgb2YgYSByb3lhbCBtYXJyaWFnZSBhbmQgb2Ygd2VkZGVkIGxpZmUgd2l0aCBhIHlvdW5nIG1hbiB3aG8gd291bGQgYmUgbm8gZGlzYWdyZWVhYmxlIGNvbXBhbnkgZm9yIGFuIGVsZGVybHkgd29tYW4sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhlIGNhcHR1cmVkIGhlciwgdXNpbmcgaGlzIHNvbiBmb3IgYWxsIHRoZSB3b3JsZCBsaWtlIGEgYmFpdCBmb3IgaGVyLiBUaGUgY2l0YWRlbCwgaG93ZXZlciwgc2hlIGRpZCBub3QgZ2l2ZSB1cCwgYnV0IGtlcHQgaXQgdW5kZXIgc3Ryb25nIGd1YXJkLiBQcmV0ZW5kaW5nLCB0aGVyZWZvcmUsIGluZGlmZmVyZW5jZSB0byB0aGlzLCBBbnRpZ29udXMgY2VsZWJyYXRlZCB0aGUgbnVwdGlhbHMgb2YgdGhlIHBhaXIgaW4gQ29yaW50aCwgZXhoaWJpdGluZyBzcGVjdGFjbGVzIGFuZCBnaXZpbmcgYmFucXVldHMgZXZlcnkgZGF5LCBhcyBvbmUgd2hvbSBwbGVhc3VyZSBhbmQga2luZGxpbmVzcyBsZWQgdG8gdGhpbmsgY2hpZWZseSBvZiBtaXJ0aCBhbmQgZWFzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBjcnVjaWFsIG1vbWVudCBjYW1lLCBhbmQgYXMgQW1vZWJldXMgd2FzIGFib3V0IHRvIHNpbmcgaW4gdGhlIHRoZWF0cmUsIGhlIGVzY29ydGVkIE5pY2FlYSBpbiBwZXJzb24gdG8gdGhlIHNwZWN0YWNsZS4gU2hlIHdhcyBib3JuZSBpbiBhIGxpdHRlciB3aGljaCBoYWQgcm95YWwgdHJhcHBpbmdzLCBwbHVtZWQgaGVyc2VsZiBvbiBoZXIgbmV3IGhvbm91ciwgYW5kIGhhZCBub3QgdGhlIHJlbW90ZXN0IHN1c3BpY2lvbiBvZiB3aGF0IHdhcyB0byBoYXBwZW4uIFRoZW4sIGFycml2ZWQgYXQgdGhlIGRpdmVyZ2luZyBzdHJlZXQgdGhhdCBsZWQgdXAgdG8gdGhlIGNpdGFkZWwsIEFudGlnb251cyBnYXZlIG9yZGVycyB0aGF0IE5pY2FlYSBzaG91bGQgYmUgYm9ybmUgb24gaW50byB0aGUgdGhlYXRyZSwgd2hpbGUgaGUgaGltc2VsZiwgYmlkZGluZyBhZGlldSB0byBBbW9lYmV1cywgYW5kIGFkaWV1IHRvIHRoZSBudXB0aWFscywgd2VudCB1cCB0byBBY3JvY29yaW50aHVzIHdpdGggYSBzcGVlZCB0aGF0IGJlbGllZCBoaXMgeWVhcnM7IGFuZCwgZmluZGluZyB0aGUgZ2F0ZSBsb2NrZWQsIGhlIGJlYXQgdXBvbiBpdCB3aXRoIGhpcyBzdGFmZiBhbmQgb3JkZXJlZCBpdCB0byBiZSBvcGVuZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgZ3VhcmRzIHdpdGhpbiwgc3R1cGVmaWVkLCBvcGVuZWQgaXQuIFRodXMgbWFzdGVyIG9mIHRoZSBwbGFjZSwgaGUgY291bGQgbm90IGNvbnRhaW4gaGltc2VsZiBmb3Igam95LCBidXQgZHJhbmsgYW5kIGRpc3BvcnRlZCBoaW1zZWxmIGluIHRoZSBzdHJlZXRzLCBhbmQgd2l0aCBtdXNpYy1naXJscyBpbiBoaXMgdHJhaW4gYW5kIGdhcmxhbmRzIG9uIGhpcyBoZWFkLCBvbGQgbWFuIHRoYXQgaGUgd2FzIGFuZCBhY3F1YWludGVkIHdpdGggc28gZ3JlYXQgdmljaXNzaXR1ZGVzIG9mIGZvcnR1bmUsIHJldmVsbGVkIHRocm91Z2ggdGhlIG1hcmtldC1wbGFjZSwgZ3JlZXRpbmcgYW5kIGNsYXNwaW5nIGhhbmRzIHdpdGggYWxsIHdobyBtZXQgaGltLiBUaHVzIHdlIHNlZSB0aGF0IG5laXRoZXIgZ3JpZWYgbm9yIGZlYXIgdHJhbnNwb3J0cyBhbmQgYWdpdGF0ZXMgdGhlIHNvdWwgYXMgbXVjaCBhcyBqb3kgdGhhdCBjb21lcyB1bmV4cGVjdGVkbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cywgdGhlbiwgaGF2aW5nIGdvdCBBY3JvY29yaW50aHVzIGludG8gaGlzIHBvd2VyLCBhcyBJIGhhdmUgc2FpZCwga2VwdCBpdCB1bmRlciBndWFyZCwgcHV0dGluZyBtZW4gdGhlcmUgd2hvbSBoZSBtb3N0IHRydXN0ZWQsIGFuZCBtYWtpbmcgUGVyc2FldXMgdGhlIHBoaWxvc29waGVyIHRoZWlyIGNvbW1hbmRlci4gTm93IEFyYXR1cywgZXZlbiB3aGlsZSBBbGV4YW5kZXIgd2FzIHN0aWxsIGxpdmluZywgaGFkIHNldCBoaXMgaGFuZCB0byB0aGUgZW50ZXJwcmlzZSwgYnV0IGFuIGFsbGlhbmNlIHdhcyBtYWRlIGJldHdlZW4gdGhlIEFjaGFlYW5zIGFuZCBBbGV4YW5kZXIsIGFuZCBoZSB0aGVyZWZvcmUgZGVzaXN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIGhvd2V2ZXIsIGEgbmV3IGFuZCBmcmVzaCBiYXNpcyBmb3IgdGhlIGVudGVycHJpc2Ugd2FzIGZvdW5kIGJ5IGhpbSBpbiB0aGUgZm9sbG93aW5nIGNpcmN1bXN0YW5jZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW50aWdvbnVzLCB0aGVuLCBoYXZpbmcgZ290IEFjcm9jb3JpbnRodXMgaW50byBoaXMgcG93ZXIsIGFzIEkgaGF2ZSBzYWlkLCBrZXB0IGl0IHVuZGVyIGd1YXJkLCBwdXR0aW5nIG1lbiB0aGVyZSB3aG9tIGhlIG1vc3QgdHJ1c3RlZCwgYW5kIG1ha2luZyBQZXJzYWV1cyB0aGUgcGhpbG9zb3BoZXIgdGhlaXIgY29tbWFuZGVyLiBOb3cgQXJhdHVzLCBldmVuIHdoaWxlIEFsZXhhbmRlciB3YXMgc3RpbGwgbGl2aW5nLCBoYWQgc2V0IGhpcyBoYW5kIHRvIHRoZSBlbnRlcnByaXNlLCBidXQgYW4gYWxsaWFuY2Ugd2FzIG1hZGUgYmV0d2VlbiB0aGUgQWNoYWVhbnMgYW5kIEFsZXhhbmRlciwgYW5kIGhlIHRoZXJlZm9yZSBkZXNpc3RlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIGhvd2V2ZXIsIGEgbmV3IGFuZCBmcmVzaCBiYXNpcyBmb3IgdGhlIGVudGVycHJpc2Ugd2FzIGZvdW5kIGJ5IGhpbSBpbiB0aGUgZm9sbG93aW5nIGNpcmN1bXN0YW5jZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlcmUgd2VyZSBpbiBDb3JpbnRoIGZvdXIgYnJvdGhlcnMsIFN5cmlhbnMgYnkgcmFjZSwgb25lIG9mIHdob20sIERpb2RlcyBieSBuYW1lLCB3YXMgc2VydmluZyBhcyBhIG1lcmNlbmFyeSBzb2xkaWVyIGluIHRoZSBjaXRhZGVsLiBUaGUgb3RoZXIgdGhyZWUsIGFmdGVyIHN0ZWFsaW5nIHNvbWUgZ29sZCBwbGF0ZSBvZiB0aGUga2luZydzLCBjYW1lIHRvIEFlZ2lhcywgYSBiYW5rZXIgaW4gU2ljeW9uIHdpdGggd2hvbSBBcmF0dXMgZGlkIGJ1c2luZXNzLiBBIHBvcnRpb24gb2YgdGhlIGdvbGQgdGhleSBkaXNwb3NlZCBvZiB0byBoaW0gYXQgb25jZSwgYnV0IHRoZSByZW1haW5kZXIgd2FzIGJlaW5nIHF1aWV0bHkgZXhjaGFuZ2VkIGJ5IG9uZSBvZiB0aGVtLCBFcmdpbnVzLCBpbiBmcmVxdWVudCB2aXNpdHMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RXJnaW51cyB0aHVzIGJlY2FtZSB3ZWxsIGFjcXVhaW50ZWQgd2l0aCBBZWdpYXMsIGFuZCBoYXZpbmcgYmVlbiBsZWQgYnkgaGltIGludG8gY29udmVyc2F0aW9uIGFib3V0IHRoZSBnYXJyaXNvbiBpbiB0aGUgY2l0YWRlbCwgc2FpZCB0aGF0IGFzIGhlIHdhcyBnb2luZyB1cCB0byBzZWUgaGlzIGJyb3RoZXIgaGUgaGFkIG5vdGljZWQgaW4gdGhlIGZhY2Ugb2YgdGhlIGNsaWZmIGEgc2xhbnRpbmcgZmlzc3VyZSBsZWFkaW5nIHRvIHdoZXJlIHRoZSB3YWxsIG9mIHRoZSBjaXRhZGVsIHdhcyBhdCBpdHMgbG93ZXN0LiBUaGVyZXVwb24gQWVnaWFzIGZlbGwgdG8gamVzdGluZyB3aXRoIGhpbSwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91LCB0aGVuLCBiZXN0IG9mIG1lbiwgdGh1cyBmb3IgdGhlIHNha2Ugb2YgYSBsaXR0bGUgZ29sZCBwbGF0ZSByaWZsZSB0aGUga2luZydzIHRyZWFzdXJlcywgd2hlbiBpdCBpcyBpbiB5b3VyIHBvd2VyIHRvIHNlbGwgYSBzaW5nbGUgaG91cidzIHdvcmsgZm9yIGxhcmdlIHN1bXMgb2YgbW9uZXk/IERvbid0IHlvdSBrbm93IHRoYXQgYnVyZ2xhcnMgYXMgd2VsbCBhcyB0cmFpdG9ycywgaWYgdGhleSBhcmUgY2F1Z2h0LCBoYXZlIG9ubHkgb25lIGRlYXRoIHRvIGRpZT88L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RXJnaW51cyBidXJzdCBvdXQgbGF1Z2hpbmcsIGFuZCBhcyBhIGZpcnN0IHN0ZXAgYWdyZWVkIHRvIG1ha2UgdHJpYWwgb2YgRGlvZGVzIChzYXlpbmcgdGhhdCBoZSBoYWQgbm8gY29uZmlkZW5jZSBhdCBhbGwgaW4gaGlzIG90aGVyIGJyb3RoZXJzKSwgYW5kIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcyBjYW1lIGJhY2sgYW5kIGJhcmdhaW5lZCB0byBjb25kdWN0IEFyYXR1cyB0byB0aGUgd2FsbCBhdCBhIHNwb3Qgd2hlcmUgaXQgd2FzIG5vdCBtb3JlIHRoYW4gZmlmdGVlbiBmZWV0IGluIGhlaWdodCwgYW5kIHRvIGFpZCBpbiB0aGUgcmVzdCBvZiB0aGUgZW50ZXJwcmlzZSB0b2dldGhlciB3aXRoIERpb2Rlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVyZ2ludXMgdGh1cyBiZWNhbWUgd2VsbCBhY3F1YWludGVkIHdpdGggQWVnaWFzLCBhbmQgaGF2aW5nIGJlZW4gbGVkIGJ5IGhpbSBpbnRvIGNvbnZlcnNhdGlvbiBhYm91dCB0aGUgZ2Fycmlzb24gaW4gdGhlIGNpdGFkZWwsIHNhaWQgdGhhdCBhcyBoZSB3YXMgZ29pbmcgdXAgdG8gc2VlIGhpcyBicm90aGVyIGhlIGhhZCBub3RpY2VkIGluIHRoZSBmYWNlIG9mIHRoZSBjbGlmZiBhIHNsYW50aW5nIGZpc3N1cmUgbGVhZGluZyB0byB3aGVyZSB0aGUgd2FsbCBvZiB0aGUgY2l0YWRlbCB3YXMgYXQgaXRzIGxvd2VzdC4gVGhlcmV1cG9uIEFlZ2lhcyBmZWxsIHRvIGplc3Rpbmcgd2l0aCBoaW0sIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91LCB0aGVuLCBiZXN0IG9mIG1lbiwgdGh1cyBmb3IgdGhlIHNha2Ugb2YgYSBsaXR0bGUgZ29sZCBwbGF0ZSByaWZsZSB0aGUga2luZydzIHRyZWFzdXJlcywgd2hlbiBpdCBpcyBpbiB5b3VyIHBvd2VyIHRvIHNlbGwgYSBzaW5nbGUgaG91cidzIHdvcmsgZm9yIGxhcmdlIHN1bXMgb2YgbW9uZXk/IERvbid0IHlvdSBrbm93IHRoYXQgYnVyZ2xhcnMgYXMgd2VsbCBhcyB0cmFpdG9ycywgaWYgdGhleSBhcmUgY2F1Z2h0LCBoYXZlIG9ubHkgb25lIGRlYXRoIHRvIGRpZT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkVyZ2ludXMgYnVyc3Qgb3V0IGxhdWdoaW5nLCBhbmQgYXMgYSBmaXJzdCBzdGVwIGFncmVlZCB0byBtYWtlIHRyaWFsIG9mIERpb2RlcyAoc2F5aW5nIHRoYXQgaGUgaGFkIG5vIGNvbmZpZGVuY2UgYXQgYWxsIGluIGhpcyBvdGhlciBicm90aGVycyksIGFuZCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgY2FtZSBiYWNrIGFuZCBiYXJnYWluZWQgdG8gY29uZHVjdCBBcmF0dXMgdG8gdGhlIHdhbGwgYXQgYSBzcG90IHdoZXJlIGl0IHdhcyBub3QgbW9yZSB0aGFuIGZpZnRlZW4gZmVldCBpbiBoZWlnaHQsIGFuZCB0byBhaWQgaW4gdGhlIHJlc3Qgb2YgdGhlIGVudGVycHJpc2UgdG9nZXRoZXIgd2l0aCBEaW9kZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBvbiBoaXMgcGFydCBhZ3JlZWQgdG8gZ2l2ZSB0aGUgbWVuIHNpeHR5IHRhbGVudHMgaWYgaGUgd2FzIHN1Y2Nlc3NmdWwsIGFuZCBpbiBjYXNlIGhlIGZhaWxlZCwgYW5kIGhlIGFzIHdlbGwgYXMgdGhleSBnb3Qgb2ZmIHNhZmVseSwgdG8gZ2l2ZSBlYWNoIG9mIHRoZW0gYSBob3VzZSBhbmQgYSB0YWxlbnQuIFRoZW4sIHNpbmNlIHRoZSBzaXh0eSB0YWxlbnRzIGhhZCB0byBiZSBkZXBvc2l0ZWQgd2l0aCBBZWdpYXMgZm9yIEVyZ2ludXMsIGFuZCBBcmF0dXMgbmVpdGhlciBoYWQgdGhlbSBoaW1zZWxmIG5vciB3YXMgd2lsbGluZyBieSBib3Jyb3dpbmcgdGhlbSB0byBnaXZlIGFueW9uZSBlbHNlIGEgc3VzcGljaW9uIG9mIGhpcyB1bmRlcnRha2luZywgaGUgdG9vayBtb3N0IG9mIGhpcyBwbGF0ZSBhbmQgaGlzIHdpZmUncyBnb2xkZW4gb3JuYW1lbnRzIGFuZCBkZXBvc2l0ZWQgdGhlbSB3aXRoIEFlZ2lhcyBhcyBzZWN1cml0eSBmb3IgdGhlIG1vbmV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIHNvIGV4YWx0ZWQgaW4gc3Bpcml0IGFuZCBoYWQgc28gZ3JlYXQgYSBwYXNzaW9uIGZvciBub2JsZSBkZWVkcyB0aGF0LCBrbm93aW5nIGFzIGhlIGRpZCB0aGF0IFBob2Npb24gYW5kIEVwYW1pbm9uZGFzIHdlcmUgcmVwdXRlZCB0byBoYXZlIGJlZW4gdGhlIGp1c3Rlc3QgYW5kIGJlc3Qgb2YgR3JlZWtzIGJlY2F1c2UgdGhleSBzcHVybmVkIGdyZWF0IGdpZnRzIGFuZCB3b3VsZCBub3QgYmV0cmF5IHRoZWlyIGhvbm91ciBmb3IgbW9uZXksIGhlIGVsZWN0ZWQgdG8gZXhwZW5kIGhpcyBvd24gc3Vic3RhbmNlIHNlY3JldGx5LCBhcyBhbiBhZHZhbmNlLCBvbiBhbiBlbnRlcnByaXNlIGluIHdoaWNoIGhlIGFsb25lIHdhcyByaXNraW5nIGhpcyBsaWZlIGZvciB0aGUgd2hvbGUgYm9keSBvZiBjaXRpemVucywgd2hvIGRpZCBub3QgZXZlbiBrbm93IHdoYXQgd2FzIGdvaW5nIG9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hvIHdpbGwgbm90IGFkbWlyZSB0aGUgbWFnbmFuaW1pdHkgb2YgdGhlIG1hbiwgYW5kIHllYXJuIGV2ZW4gbm93IHRvIGxlbmQgYSBoZWxwaW5nIGhhbmQsIHdobyBwdXJjaGFzZWQgYXQgc28gaGlnaCBhIHByaWNlIHNvIGdyZWF0IGEgZGFuZ2VyLCBhbmQgcGxlZGdlZCB3aGF0IGhlIHRob3VnaHQgdGhlIG1vc3QgcHJlY2lvdXMgb2YgaGlzIHBvc3Nlc3Npb25zIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgYmUgaW50cm9kdWNlZCBieSBuaWdodCBhbW9uZyBoaXMgZW5lbWllcyBhbmQgY29udGVuZCBmb3IgaGlzIGxpZmUsIHJlY2VpdmluZyBhcyBoaXMgc2VjdXJpdHkgZnJvbSBoaXMgY291bnRyeW1lbiB0aGUgaG9wZSBvZiBhIG5vYmxlIGFjdGlvbiwgYW5kIG5vdGhpbmcgZWxzZT8KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIG9uIGhpcyBwYXJ0IGFncmVlZCB0byBnaXZlIHRoZSBtZW4gc2l4dHkgdGFsZW50cyBpZiBoZSB3YXMgc3VjY2Vzc2Z1bCwgYW5kIGluIGNhc2UgaGUgZmFpbGVkLCBhbmQgaGUgYXMgd2VsbCBhcyB0aGV5IGdvdCBvZmYgc2FmZWx5LCB0byBnaXZlIGVhY2ggb2YgdGhlbSBhIGhvdXNlIGFuZCBhIHRhbGVudC4gVGhlbiwgc2luY2UgdGhlIHNpeHR5IHRhbGVudHMgaGFkIHRvIGJlIGRlcG9zaXRlZCB3aXRoIEFlZ2lhcyBmb3IgRXJnaW51cywgYW5kIEFyYXR1cyBuZWl0aGVyIGhhZCB0aGVtIGhpbXNlbGYgbm9yIHdhcyB3aWxsaW5nIGJ5IGJvcnJvd2luZyB0aGVtIHRvIGdpdmUgYW55b25lIGVsc2UgYSBzdXNwaWNpb24gb2YgaGlzIHVuZGVydGFraW5nLCBoZSB0b29rIG1vc3Qgb2YgaGlzIHBsYXRlIGFuZCBoaXMgd2lmZSdzIGdvbGRlbiBvcm5hbWVudHMgYW5kIGRlcG9zaXRlZCB0aGVtIHdpdGggQWVnaWFzIGFzIHNlY3VyaXR5IGZvciB0aGUgbW9uZXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgc28gZXhhbHRlZCBpbiBzcGlyaXQgYW5kIGhhZCBzbyBncmVhdCBhIHBhc3Npb24gZm9yIG5vYmxlIGRlZWRzIHRoYXQsIGtub3dpbmcgYXMgaGUgZGlkIHRoYXQgUGhvY2lvbiBhbmQgRXBhbWlub25kYXMgd2VyZSByZXB1dGVkIHRvIGhhdmUgYmVlbiB0aGUganVzdGVzdCBhbmQgYmVzdCBvZiBHcmVla3MgYmVjYXVzZSB0aGV5IHNwdXJuZWQgZ3JlYXQgZ2lmdHMgYW5kIHdvdWxkIG5vdCBiZXRyYXkgdGhlaXIgaG9ub3VyIGZvciBtb25leSwgaGUgZWxlY3RlZCB0byBleHBlbmQgaGlzIG93biBzdWJzdGFuY2Ugc2VjcmV0bHksIGFzIGFuIGFkdmFuY2UsIG9uIGFuIGVudGVycHJpc2UgaW4gd2hpY2ggaGUgYWxvbmUgd2FzIHJpc2tpbmcgaGlzIGxpZmUgZm9yIHRoZSB3aG9sZSBib2R5IG9mIGNpdGl6ZW5zLCB3aG8gZGlkIG5vdCBldmVuIGtub3cgd2hhdCB3YXMgZ29pbmcgb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aG8gd2lsbCBub3QgYWRtaXJlIHRoZSBtYWduYW5pbWl0eSBvZiB0aGUgbWFuLCBhbmQgeWVhcm4gZXZlbiBub3cgdG8gbGVuZCBhIGhlbHBpbmcgaGFuZCwgd2hvIHB1cmNoYXNlZCBhdCBzbyBoaWdoIGEgcHJpY2Ugc28gZ3JlYXQgYSBkYW5nZXIsIGFuZCBwbGVkZ2VkIHdoYXQgaGUgdGhvdWdodCB0aGUgbW9zdCBwcmVjaW91cyBvZiBoaXMgcG9zc2Vzc2lvbnMgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBiZSBpbnRyb2R1Y2VkIGJ5IG5pZ2h0IGFtb25nIGhpcyBlbmVtaWVzIGFuZCBjb250ZW5kIGZvciBoaXMgbGlmZSwgcmVjZWl2aW5nIGFzIGhpcyBzZWN1cml0eSBmcm9tIGhpcyBjb3VudHJ5bWVuIHRoZSBob3BlIG9mIGEgbm9ibGUgYWN0aW9uLCBhbmQgbm90aGluZyBlbHNlPwoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIGVudGVycHJpc2Ugd2FzIGRhbmdlcm91cyBpbiBpdHNlbGYsIGJ1dCB3YXMgbWFkZSBtb3JlIGRhbmdlcm91cyBzdGlsbCBieSBhIG1pc3Rha2Ugd2hpY2ggb2NjdXJyZWQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIHRocm91Z2ggaWdub3JhbmNlLiBGb3IgVGVjaG5vbiwgdGhlIHNlcnZhbnQgb2YgQXJhdHVzLCBoYWQgYmVlbiBzZW50IHRvIGluc3BlY3QgdGhlIHdhbGwgd2l0aCBEaW9kZXMsIGFuZCBoYWQgbm90IHlldCBtZXQgRGlvZGVzIGZhY2UgdG8gZmFjZSwgYnV0IHRob3VnaHQgaGUgd291bGQga25vdyBob3cgaGUgbG9va2VkIGJlY2F1c2UgRXJnaW51cyBoYWQgZGVzY3JpYmVkIGhpbSBhcyBjdXJseS1oYWlyZWQsIG9mIGEgc3dhcnRoeSBjb21wbGV4aW9uLCBhbmQgd2l0aG91dCBhIGJlYXJkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgY29tZSwgdGhlcmVmb3JlLCB0byB0aGUgcGxhY2UgYXBwb2ludGVkLCBoZSB3YXMgd2FpdGluZyBmb3IgRXJnaW51cyB0byBjb21lIHRoZXJlIHdpdGggRGlvZGVzLCBqdXN0IG91dHNpZGUgdGhlIGNpdHksIG5lYXIgd2hhdCB3YXMgY2FsbGVkIHRoZSBPcm5pcy4gQXMgaGUgd2FzIHdhaXRpbmcsIGhvd2V2ZXIsIHRoZSBvbGRlc3QgYnJvdGhlciBvZiBFcmdpbnVzIGFuZCBEaW9kZXMsIG5hbWVkIERpb255c2l1cywgd2hvIHdhcyBub3QgcHJpdnkgdG8gdGhlIGVudGVycHJpc2UgYW5kIHRvb2sgbm8gcGFydCBpbiBpdCwgYnV0IHJlc2VtYmxlZCBEaW9kZXMsIGNoYW5jZWQgdG8gY29tZSB1cC4gU28gVGVjaG5vbiwgbW92ZWQgYnkgdGhlIHNpbWlsYXJpdHkgaW4gdGhlIG1hcmtzIG9mIGhpcyBvdXR3YXJkIGFwcGVhcmFuY2UsIGFza2VkIGhpbSBpZiBoZSB3YXMgY29ubmVjdGVkIGF0IGFsbCB3aXRoIEVyZ2ludXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvbiBoaXMgc2F5aW5nIHRoYXQgaGUgd2FzIGEgYnJvdGhlciwgVGVjaG5vbiB3YXMgYWx0b2dldGhlciBjb252aW5jZWQgdGhhdCBoZSB3YXMgdGFsa2luZyB3aXRoIERpb2RlcywgYW5kIHdpdGhvdXQgaW5xdWlyaW5nIGhpcyBuYW1lLCBvciB3YWl0aW5nIGZvciBhbnkgb3RoZXIgcHJvb2Ygd2hhdGV2ZXIsIGdhdmUgaGltIGhpcyBoYW5kIGFuZCBiZWdhbiBjaGF0dGluZyB3aXRoIGhpbSBhbmQgYXNraW5nIGhpbSBxdWVzdGlvbnMgYWJvdXQgd2hhdCBoYWQgYmVlbiBhZ3JlZWQgdXBvbiB3aXRoIEVyZ2ludXMuIERpb255c2l1cyB0b29rIGN1bm5pbmcgYWR2YW50YWdlIG9mIGhpcyBtaXN0YWtlLCBhc3NlbnRlZCB0byBhbGwgdGhhdCBoZSBzYWlkLCBhbmQgdHVybmluZyBoaXMgYmFjayB0b3dhcmRzIHRoZSBjaXR5IGxlZCBoaW0gYWxvbmcgaW4gdW5zdXNwaWNpb3VzIGNvbnZlcnNhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGp1c3QgYXMgaGUgd2FzIG5lYXIgdGhlIGNpdHksIGFuZCB3YXMgYXQgdGhlIHZlcnkgcG9pbnQgb2Ygc2VpemluZyBUZWNobm9uLCBieSBhIHNlY29uZCBjaGFuY2UgRXJnaW51cyBtZXQgdGhlbS4gRXJnaW51cyBjb21wcmVoZW5kZWQgdGhlIHRyaWNrIGFuZCB0aGUgZGFuZ2VyLCBtb3Rpb25lZCBUZWNobm9uIHRvIGZseSwgYW5kIGJvdGggb2YgdGhlbSByYW4gb2ZmIGFuZCBnb3Qgc2FmZWx5IHRvIEFyYXR1cy4gQXJhdHVzLCBob3dldmVyLCB3b3VsZCBub3QgZ2l2ZSB1cCBob3BlLCBidXQgYXQgb25jZSBzZW50IEVyZ2ludXMgdG8gYnJpYmUgRGlvbnlzaXVzIGFuZCBiZWcgaGltIHRvIGhvbGQgaGlzIHRvbmd1ZS4gRXJnaW51cyBub3Qgb25seSBkaWQgdGhpcywgYnV0IGFjdHVhbGx5IGJyb3VnaHQgRGlvbnlzaXVzIHdpdGggaGltIHRvIEFyYXR1cy4gQW5kIG5vdyB0aGF0IERpb255c2l1cyB3YXMgdGhlcmUgdGhleSB3b3VsZCBub3QgbGV0IGhpbSBnbywgYnV0IGJvdW5kIGhpbSBhbmQga2VwdCBoaW0gaW5kb29ycyB1bmRlciBsb2NrIGFuZCBrZXksIHdoaWxlIHRoZXkgdGhlbXNlbHZlcyBwcmVwYXJlZCBmb3IgdGhlaXIgYXR0YWNrLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZSBlbnRlcnByaXNlIHdhcyBkYW5nZXJvdXMgaW4gaXRzZWxmLCBidXQgd2FzIG1hZGUgbW9yZSBkYW5nZXJvdXMgc3RpbGwgYnkgYSBtaXN0YWtlIHdoaWNoIG9jY3VycmVkIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyB0aHJvdWdoIGlnbm9yYW5jZS4gRm9yIFRlY2hub24sIHRoZSBzZXJ2YW50IG9mIEFyYXR1cywgaGFkIGJlZW4gc2VudCB0byBpbnNwZWN0IHRoZSB3YWxsIHdpdGggRGlvZGVzLCBhbmQgaGFkIG5vdCB5ZXQgbWV0IERpb2RlcyBmYWNlIHRvIGZhY2UsIGJ1dCB0aG91Z2h0IGhlIHdvdWxkIGtub3cgaG93IGhlIGxvb2tlZCBiZWNhdXNlIEVyZ2ludXMgaGFkIGRlc2NyaWJlZCBoaW0gYXMgY3VybHktaGFpcmVkLCBvZiBhIHN3YXJ0aHkgY29tcGxleGlvbiwgYW5kIHdpdGhvdXQgYSBiZWFyZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBjb21lLCB0aGVyZWZvcmUsIHRvIHRoZSBwbGFjZSBhcHBvaW50ZWQsIGhlIHdhcyB3YWl0aW5nIGZvciBFcmdpbnVzIHRvIGNvbWUgdGhlcmUgd2l0aCBEaW9kZXMsIGp1c3Qgb3V0c2lkZSB0aGUgY2l0eSwgbmVhciB3aGF0IHdhcyBjYWxsZWQgdGhlIE9ybmlzLiBBcyBoZSB3YXMgd2FpdGluZywgaG93ZXZlciwgdGhlIG9sZGVzdCBicm90aGVyIG9mIEVyZ2ludXMgYW5kIERpb2RlcywgbmFtZWQgRGlvbnlzaXVzLCB3aG8gd2FzIG5vdCBwcml2eSB0byB0aGUgZW50ZXJwcmlzZSBhbmQgdG9vayBubyBwYXJ0IGluIGl0LCBidXQgcmVzZW1ibGVkIERpb2RlcywgY2hhbmNlZCB0byBjb21lIHVwLiBTbyBUZWNobm9uLCBtb3ZlZCBieSB0aGUgc2ltaWxhcml0eSBpbiB0aGUgbWFya3Mgb2YgaGlzIG91dHdhcmQgYXBwZWFyYW5jZSwgYXNrZWQgaGltIGlmIGhlIHdhcyBjb25uZWN0ZWQgYXQgYWxsIHdpdGggRXJnaW51czsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBvbiBoaXMgc2F5aW5nIHRoYXQgaGUgd2FzIGEgYnJvdGhlciwgVGVjaG5vbiB3YXMgYWx0b2dldGhlciBjb252aW5jZWQgdGhhdCBoZSB3YXMgdGFsa2luZyB3aXRoIERpb2RlcywgYW5kIHdpdGhvdXQgaW5xdWlyaW5nIGhpcyBuYW1lLCBvciB3YWl0aW5nIGZvciBhbnkgb3RoZXIgcHJvb2Ygd2hhdGV2ZXIsIGdhdmUgaGltIGhpcyBoYW5kIGFuZCBiZWdhbiBjaGF0dGluZyB3aXRoIGhpbSBhbmQgYXNraW5nIGhpbSBxdWVzdGlvbnMgYWJvdXQgd2hhdCBoYWQgYmVlbiBhZ3JlZWQgdXBvbiB3aXRoIEVyZ2ludXMuIERpb255c2l1cyB0b29rIGN1bm5pbmcgYWR2YW50YWdlIG9mIGhpcyBtaXN0YWtlLCBhc3NlbnRlZCB0byBhbGwgdGhhdCBoZSBzYWlkLCBhbmQgdHVybmluZyBoaXMgYmFjayB0b3dhcmRzIHRoZSBjaXR5IGxlZCBoaW0gYWxvbmcgaW4gdW5zdXNwaWNpb3VzIGNvbnZlcnNhdGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIGhlIHdhcyBuZWFyIHRoZSBjaXR5LCBhbmQgd2FzIGF0IHRoZSB2ZXJ5IHBvaW50IG9mIHNlaXppbmcgVGVjaG5vbiwgYnkgYSBzZWNvbmQgY2hhbmNlIEVyZ2ludXMgbWV0IHRoZW0uIEVyZ2ludXMgY29tcHJlaGVuZGVkIHRoZSB0cmljayBhbmQgdGhlIGRhbmdlciwgbW90aW9uZWQgVGVjaG5vbiB0byBmbHksIGFuZCBib3RoIG9mIHRoZW0gcmFuIG9mZiBhbmQgZ290IHNhZmVseSB0byBBcmF0dXMuIEFyYXR1cywgaG93ZXZlciwgd291bGQgbm90IGdpdmUgdXAgaG9wZSwgYnV0IGF0IG9uY2Ugc2VudCBFcmdpbnVzIHRvIGJyaWJlIERpb255c2l1cyBhbmQgYmVnIGhpbSB0byBob2xkIGhpcyB0b25ndWUuIEVyZ2ludXMgbm90IG9ubHkgZGlkIHRoaXMsIGJ1dCBhY3R1YWxseSBicm91Z2h0IERpb255c2l1cyB3aXRoIGhpbSB0byBBcmF0dXMuIEFuZCBub3cgdGhhdCBEaW9ueXNpdXMgd2FzIHRoZXJlIHRoZXkgd291bGQgbm90IGxldCBoaW0gZ28sIGJ1dCBib3VuZCBoaW0gYW5kIGtlcHQgaGltIGluZG9vcnMgdW5kZXIgbG9jayBhbmQga2V5LCB3aGlsZSB0aGV5IHRoZW1zZWx2ZXMgcHJlcGFyZWQgZm9yIHRoZWlyIGF0dGFjay4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhbGwgdGhpbmdzIHdlcmUgcmVhZHksIEFyYXR1cyBvcmRlcmVkIHRoZSByZXN0IG9mIGhpcyBmb3JjZXMgdG8gcGFzcyB0aGUgbmlnaHQgdW5kZXIgYXJtcywgYW5kIHRha2luZyB3aXRoIGhpbSBmb3VyIGh1bmRyZWQgcGlja2VkIG1lbiwgZmV3IG9mIHdob20ga25ldyB3aGF0IHdhcyBvbiBmb290IHRoZW1zZWx2ZXMsIGxlZCB0aGVtIHRvd2FyZHMgdGhlIGdhdGUgb2YgQ29yaW50aCBuZWFyIGJ5IHRoZSB0ZW1wbGUgb2YgSGVyYS4gSXQgd2FzIG1pZHN1bW1lciwgdGhlIG1vb24gd2FzIGF0IGl0cyBmdWxsLCBhbmQgdGhlIG5pZ2h0IHdhcyBjbG91ZGxlc3MgYW5kIGNsZWFyLCBzbyB0aGF0IHRoZXkgZmVhcmVkIGxlc3QgdGhlIGdsZWFtIG9mIHRoZWlyIGFybXMgaW4gdGhlIG1vb25saWdodCBzaG91bGQgZGlzY2xvc2UgdGhlbSB0byB0aGUgc2VudGluZWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQganVzdCBhcyB0aGUgZm9yZW1vc3Qgb2YgdGhlbSB3ZXJlIG5lYXIgdGhlIHdhbGwsIGNsb3VkcyByYW4gdXAgZnJvbSB0aGUgc2VhIGFuZCBlbnZlbG9wZWQgdGhlIGNpdHkgaXRzZWxmIGFuZCB0aGUgcmVnaW9uIG91dHNpZGUsIHdoaWNoIHRodXMgYmVjYW1lIGRhcmsuIFRoZW4gdGhlIHJlc3Qgb2YgdGhlbSBzYXQgZG93biBhbmQgdG9vayBvZmYgdGhlaXIgc2hvZXMsIHNpbmNlIG1lbiBtYWtlIGxpdHRsZSBub2lzZSBhbmQgZG8gbm90IHNsaXAgaWYgdGhleSBhcmUgYmFyZWZvb3RlZCB3aGVuIHRoZXkgY2xpbWIgbGFkZGVyczsgYnV0IEVyZ2ludXMsIHRha2luZyB3aXRoIGhpbSBzZXZlbiB5b3VuZyBtZW4gZXF1aXBwZWQgYXMgdHJhdmVsbGVycywgZ290IHVubm90aWNlZCB0byB0aGUgZ2F0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSB0aGV5IHNsZXcgdGhlIGdhdGUta2VlcGVyIGFuZCB0aGUgc2VudHJpZXMgd2hvIHdlcmUgd2l0aCBoaW0uIEF0IHRoZSBzYW1lIHRpbWUgdGhlIGxhZGRlcnMgd2VyZSBjbGFwcGVkIHRvIHRoZSB3YWxsLCBhbmQgYWZ0ZXIgZ2V0dGluZyBhIGh1bmRyZWQgbWVuIG92ZXIgaW4gYWxsIGhhc3RlLCBBcmF0dXMgb3JkZXJlZCB0aGUgcmVzdCB0byBmb2xsb3cgYXMgZmFzdCBhcyB0aGV5IGNvdWxkOyB0aGVuIGhlIHB1bGxlZCBoaXMgbGFkZGVycyB1cCBhZnRlciBoaW0gYW5kIG1hcmNoZWQgdGhyb3VnaCB0aGUgY2l0eSB3aXRoIGhpcyBodW5kcmVkIG1lbiBhZ2FpbnN0IHRoZSBjaXRhZGVsLCBiZWluZyBhbHJlYWR5IGZ1bGwgb2Ygam95IGF0IGhpcyBlc2NhcGUgZnJvbSBkZXRlY3Rpb24gYW5kIGNvbmZpZGVudCBvZiBzdWNjZXNzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhbGwgdGhpbmdzIHdlcmUgcmVhZHksIEFyYXR1cyBvcmRlcmVkIHRoZSByZXN0IG9mIGhpcyBmb3JjZXMgdG8gcGFzcyB0aGUgbmlnaHQgdW5kZXIgYXJtcywgYW5kIHRha2luZyB3aXRoIGhpbSBmb3VyIGh1bmRyZWQgcGlja2VkIG1lbiwgZmV3IG9mIHdob20ga25ldyB3aGF0IHdhcyBvbiBmb290IHRoZW1zZWx2ZXMsIGxlZCB0aGVtIHRvd2FyZHMgdGhlIGdhdGUgb2YgQ29yaW50aCBuZWFyIGJ5IHRoZSB0ZW1wbGUgb2YgSGVyYS4gSXQgd2FzIG1pZHN1bW1lciwgdGhlIG1vb24gd2FzIGF0IGl0cyBmdWxsLCBhbmQgdGhlIG5pZ2h0IHdhcyBjbG91ZGxlc3MgYW5kIGNsZWFyLCBzbyB0aGF0IHRoZXkgZmVhcmVkIGxlc3QgdGhlIGdsZWFtIG9mIHRoZWlyIGFybXMgaW4gdGhlIG1vb25saWdodCBzaG91bGQgZGlzY2xvc2UgdGhlbSB0byB0aGUgc2VudGluZWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIHRoZSBmb3JlbW9zdCBvZiB0aGVtIHdlcmUgbmVhciB0aGUgd2FsbCwgY2xvdWRzIHJhbiB1cCBmcm9tIHRoZSBzZWEgYW5kIGVudmVsb3BlZCB0aGUgY2l0eSBpdHNlbGYgYW5kIHRoZSByZWdpb24gb3V0c2lkZSwgd2hpY2ggdGh1cyBiZWNhbWUgZGFyay4gVGhlbiB0aGUgcmVzdCBvZiB0aGVtIHNhdCBkb3duIGFuZCB0b29rIG9mZiB0aGVpciBzaG9lcywgc2luY2UgbWVuIG1ha2UgbGl0dGxlIG5vaXNlIGFuZCBkbyBub3Qgc2xpcCBpZiB0aGV5IGFyZSBiYXJlZm9vdGVkIHdoZW4gdGhleSBjbGltYiBsYWRkZXJzOyBidXQgRXJnaW51cywgdGFraW5nIHdpdGggaGltIHNldmVuIHlvdW5nIG1lbiBlcXVpcHBlZCBhcyB0cmF2ZWxsZXJzLCBnb3QgdW5ub3RpY2VkIHRvIHRoZSBnYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhleSBzbGV3IHRoZSBnYXRlLWtlZXBlciBhbmQgdGhlIHNlbnRyaWVzIHdobyB3ZXJlIHdpdGggaGltLiBBdCB0aGUgc2FtZSB0aW1lIHRoZSBsYWRkZXJzIHdlcmUgY2xhcHBlZCB0byB0aGUgd2FsbCwgYW5kIGFmdGVyIGdldHRpbmcgYSBodW5kcmVkIG1lbiBvdmVyIGluIGFsbCBoYXN0ZSwgQXJhdHVzIG9yZGVyZWQgdGhlIHJlc3QgdG8gZm9sbG93IGFzIGZhc3QgYXMgdGhleSBjb3VsZDsgdGhlbiBoZSBwdWxsZWQgaGlzIGxhZGRlcnMgdXAgYWZ0ZXIgaGltIGFuZCBtYXJjaGVkIHRocm91Z2ggdGhlIGNpdHkgd2l0aCBoaXMgaHVuZHJlZCBtZW4gYWdhaW5zdCB0aGUgY2l0YWRlbCwgYmVpbmcgYWxyZWFkeSBmdWxsIG9mIGpveSBhdCBoaXMgZXNjYXBlIGZyb20gZGV0ZWN0aW9uIGFuZCBjb25maWRlbnQgb2Ygc3VjY2Vzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QSBsaXR0bGUgZmFydGhlciBvbiB0aGV5IGVuY291bnRlcmVkIGEgd2F0Y2ggb2YgZm91ciBtZW4gd2l0aCBhIGxpZ2h0OyB0aGV5IHdlcmUgbm90IHNlZW4gYnkgdGhlbSwgYmVpbmcgc3RpbGwgaW4gdGhlIHNoYWRlIG9mIHRoZSBtb29uLCBidXQgc2F3IHRoZW0gY29taW5nIHVwIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uIFNvIHRoZXkgZHJldyBiYWNrIGEgbGl0dGxlIGZvciBzaGVsdGVyIGJlbmVhdGggc29tZSB3YWxscyBhbmQgYnVpbGRpbmdzLCBhbmQgc2V0IGFuIGFtYnVzaCBmb3IgdGhlIG1lbi4gVGhyZWUgb2YgdGhlbSB0aGV5IGtpbGxlZCBpbiB0aGVpciBhdHRhY2ssIGJ1dCB0aGUgZm91cnRoLCB3aXRoIGEgc3dvcmQtd291bmQgaW4gaGlzIGhlYWQsIHRvb2sgdG8gZmxpZ2h0LCBjcnlpbmcgb3V0IHRoYXQgdGhlIGVuZW15IHdlcmUgaW4gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwcmVzZW50bHkgdGhlIHRydW1wZXRzIHdlcmUgc291bmRpbmcsIHRoZSBjaXR5IHdhcyBpbiBhbiB1cHJvYXIgb3ZlciB3aGF0IHdhcyBoYXBwZW5pbmcsIHRoZSBzdHJlZXRzIHdlcmUgZnVsbCBvZiBwZW9wbGUgcnVubmluZyB1cCBhbmQgZG93biwgbWFueSBsaWdodHMgd2VyZSBmbGFzaGluZywgc29tZSBpbiB0aGUgY2l0eSBiZWxvdyBhbmQgc29tZSBpbiB0aGUgY2l0YWRlbCBhYm92ZSwgYW5kIGEgY29uZnVzZWQgc2hvdXRpbmcgYnJva2UgZm9ydGggb24gYWxsIGhhbmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgbGl0dGxlIGZhcnRoZXIgb24gdGhleSBlbmNvdW50ZXJlZCBhIHdhdGNoIG9mIGZvdXIgbWVuIHdpdGggYSBsaWdodDsgdGhleSB3ZXJlIG5vdCBzZWVuIGJ5IHRoZW0sIGJlaW5nIHN0aWxsIGluIHRoZSBzaGFkZSBvZiB0aGUgbW9vbiwgYnV0IHNhdyB0aGVtIGNvbWluZyB1cCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLiBTbyB0aGV5IGRyZXcgYmFjayBhIGxpdHRsZSBmb3Igc2hlbHRlciBiZW5lYXRoIHNvbWUgd2FsbHMgYW5kIGJ1aWxkaW5ncywgYW5kIHNldCBhbiBhbWJ1c2ggZm9yIHRoZSBtZW4uIFRocmVlIG9mIHRoZW0gdGhleSBraWxsZWQgaW4gdGhlaXIgYXR0YWNrLCBidXQgdGhlIGZvdXJ0aCwgd2l0aCBhIHN3b3JkLXdvdW5kIGluIGhpcyBoZWFkLCB0b29rIHRvIGZsaWdodCwgY3J5aW5nIG91dCB0aGF0IHRoZSBlbmVteSB3ZXJlIGluIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBwcmVzZW50bHkgdGhlIHRydW1wZXRzIHdlcmUgc291bmRpbmcsIHRoZSBjaXR5IHdhcyBpbiBhbiB1cHJvYXIgb3ZlciB3aGF0IHdhcyBoYXBwZW5pbmcsIHRoZSBzdHJlZXRzIHdlcmUgZnVsbCBvZiBwZW9wbGUgcnVubmluZyB1cCBhbmQgZG93biwgbWFueSBsaWdodHMgd2VyZSBmbGFzaGluZywgc29tZSBpbiB0aGUgY2l0eSBiZWxvdyBhbmQgc29tZSBpbiB0aGUgY2l0YWRlbCBhYm92ZSwgYW5kIGEgY29uZnVzZWQgc2hvdXRpbmcgYnJva2UgZm9ydGggb24gYWxsIGhhbmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgQXJhdHVzIHdhcyBzdHJ1Z2dsaW5nIHVwIHRoZSBzdGVlcCB3aXRoIGFsbCBoaXMgbWlnaHQsIHNsb3dseSBhbmQgbGFib3Jpb3VzbHkgYXQgZmlyc3QsIHVuYWJsZSB0byBrZWVwIHRvIHRoZSBwYXRoIGFuZCB3YW5kZXJpbmcgZnJvbSBpdCwgc2luY2UgaXQgd2FzIGV2ZXJ5d2hlcmUgc3VuayBpbiB0aGUgc2hhZG93cyBvZiB0aGUganV0dGluZyBjbGlmZnMgYW5kIGhhZCBtYW55IHR3aXN0cyBhbmQgdHVybnMgYmVmb3JlIGl0IGNhbWUgb3V0IGF0IHRoZSB3YWxsIG9mIHRoZSBjaXRhZGVsLiBUaGVuLCBtYXJ2ZWxsb3VzIHRvIHJlbGF0ZSwgdGhlIG1vb24gaXMgc2FpZCB0byBoYXZlIHBhcnRlZCB0aGUgY2xvdWRzIGFuZCBzaG9uZSBvdXQsIG1ha2luZyB0aGUgbW9zdCBkaWZmaWN1bHQgcGFydCBvZiB0aGUgcm9hZCBwbGFpbiwgdW50aWwgaGUgZ290IHRvIHRoZSB3YWxsIGF0IHRoZSBzcG90IGRlc2lyZWQ7IHRoZXJlIHRoZSBjbG91ZHMgY2FtZSB0b2dldGhlciBhZ2FpbiBhbmQgZXZlcnl0aGluZyB3YXMgaGlkZGVuIGluIGRhcmtuZXNzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIEFyYXR1cyB3YXMgc3RydWdnbGluZyB1cCB0aGUgc3RlZXAgd2l0aCBhbGwgaGlzIG1pZ2h0LCBzbG93bHkgYW5kIGxhYm9yaW91c2x5IGF0IGZpcnN0LCB1bmFibGUgdG8ga2VlcCB0byB0aGUgcGF0aCBhbmQgd2FuZGVyaW5nIGZyb20gaXQsIHNpbmNlIGl0IHdhcyBldmVyeXdoZXJlIHN1bmsgaW4gdGhlIHNoYWRvd3Mgb2YgdGhlIGp1dHRpbmcgY2xpZmZzIGFuZCBoYWQgbWFueSB0d2lzdHMgYW5kIHR1cm5zIGJlZm9yZSBpdCBjYW1lIG91dCBhdCB0aGUgd2FsbCBvZiB0aGUgY2l0YWRlbC4gVGhlbiwgbWFydmVsbG91cyB0byByZWxhdGUsIHRoZSBtb29uIGlzIHNhaWQgdG8gaGF2ZSBwYXJ0ZWQgdGhlIGNsb3VkcyBhbmQgc2hvbmUgb3V0LCBtYWtpbmcgdGhlIG1vc3QgZGlmZmljdWx0IHBhcnQgb2YgdGhlIHJvYWQgcGxhaW4sIHVudGlsIGhlIGdvdCB0byB0aGUgd2FsbCBhdCB0aGUgc3BvdCBkZXNpcmVkOyB0aGVyZSB0aGUgY2xvdWRzIGNhbWUgdG9nZXRoZXIgYWdhaW4gYW5kIGV2ZXJ5dGhpbmcgd2FzIGhpZGRlbiBpbiBkYXJrbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzb2xkaWVycyBvZiBBcmF0dXMgd2hvbSBoZSBoYWQgbGVmdCBhdCB0aGUgZ2F0ZSBvdXRzaWRlIG5lYXIgdGhlIHRlbXBsZSBvZiBIZXJhLCB0aHJlZSBodW5kcmVkIGluIG51bWJlciwgd2hlbiBvbmNlIHRoZXkgaGFkIGJ1cnN0IGludG8gdGhlIGNpdHkgYW5kIGZvdW5kIGl0IGZ1bGwgb2YgbGlnaHRzIGFuZCBtYW5pZm9sZCB0dW11bHQsIHdlcmUgdW5hYmxlIHRvIGRpc2NvdmVyIHRoZSBwYXRoIHdoaWNoIHRoZWlyIGNvbXJhZGVzIGhhZCB0YWtlbiBvciBmb2xsb3cgaW4gdGhlaXIgc3RlcHMuIFNvIHRoZXkgY3JvdWNoZWQgZG93biBhbmQgaHVkZGxlZCB0aGVtc2VsdmVzIHRvZ2V0aGVyIGluIGEgc2hhZGVkIGZsYW5rIG9mIHRoZSBjbGlmZiwgYW5kIHRoZXJlIHJlbWFpbmVkIGluIGdyZWF0IGRpc3RyZXNzIGFuZCBpbXBhdGllbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQXJhdHVzIGFuZCBoaXMgcGFydHkgd2VyZSBub3cgYXNzYWlsZWQgd2l0aCBtaXNzaWxlcyBmcm9tIHRoZSBjaXRhZGVsIGFuZCB3ZXJlIGZpZ2h0aW5nLCB0aGUgc2hvdXRzIG9mIHRoZSBjb21iYXRhbnRzIGNhbWUgZG93biB0aGUgc2xvcGVzLCBhbmQgY3JpZXMgZWNob2VkIHJvdW5kIGFib3V0IHdoaWNoIHRoZSByZXZlcmJlcmF0aW9ucyBmcm9tIHRoZSBoaWxscyByZW5kZXJlZCBjb25mdXNlZCBhbmQgb2YgdW5jZXJ0YWluIG9yaWdpbi4gVGhlbiwgYXMgdGhleSB3ZXJlIGF0IGEgbG9zcyB3aGljaCB3YXkgdG8gdHVybiwgQXJjaGVsYcO8cywgdGhlIGNvbW1hbmRlciBvZiB0aGUga2luZydzIGZvcmNlcywgaGF2aW5nIG1hbnkgc29sZGllcnMgd2l0aCBoaW0sIG1hZGUgdXAgdGhlIGFzY2VudCBhbWlkIHNob3V0cyBhbmQgdGhlIGJsYXJlIG9mIHRydW1wZXRzIHRvIGF0dGFjayBBcmF0dXMgYW5kIGhpcyBwYXJ0eSwgYW5kIHRodXMgcGFzc2VkIGJ5IHRoZSB0aHJlZSBodW5kcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgcmlzaW5nIHVwIGZyb20gYW1idXNoIGFzIGl0IHdlcmUsIGZlbGwgdXBvbiBoaW0sIHNsZXcgdGhlIGZpcnN0IHdob20gdGhleSBhdHRhY2tlZCwgcHV0IHRoZSByZXN0LCB0b2dldGhlciB3aXRoIEFyY2hlbGHDvHMsIHRvIHBhbmljIGZsaWdodCwgYW5kIHB1cnN1ZWQgdGhlbSB1bnRpbCB0aGV5IHdlcmUgc2NhdHRlcmVkIGFuZCBkaXNwZXJzZWQgYWJvdXQgdGhlIGNpdHkuIEFuZCBqdXN0IGFzIHRoaXMgdmljdG9yeSBoYWQgYmVlbiB3b24sIEVyZ2ludXMgY2FtZSBmcm9tIHRoZSBwYXJ0eSBmaWdodGluZyBvbiB0aGUgaGVpZ2h0cywgd2l0aCB0aWRpbmdzIHRoYXQgQXJhdHVzIHdhcyBlbmdhZ2VkIHdpdGggdGhlIGVuZW15LCB0aGF0IHRoZXNlIHdlcmUgZGVmZW5kaW5nIHRoZW1zZWx2ZXMgdmlnb3JvdXNseSwgdGhhdCBhIGdyZWF0IHN0cnVnZ2xlIHdhcyBnb2luZyBvbiBhdCB0aGUgdmVyeSB3YWxsLCBhbmQgdGhlcmUgd2FzIG5lZWQgb2Ygc3BlZWR5IGhlbHAuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0aHJlZSBodW5kcmVkIGF0IG9uY2Ugb3JkZXJlZCBoaW0gdG8gbGVhZCB0aGUgd2F5OyBhbmQgYXMgdGhleSB0b29rIHRvIHRoZSBhc2NlbnQgdGhlaXIgY3JpZXMgc2lnbmFsbGVkIHRoZWlyIGNvbWluZyBhbmQgZW5jb3VyYWdlZCB0aGVpciBmcmllbmRzOyB0aGUgbGlnaHQgb2YgdGhlIGZ1bGwgbW9vbiBhbHNvIG1hZGUgdGhlaXIgYXJtcyBhcHBlYXIgbW9yZSBudW1lcm91cyB0byB0aGUgZW5lbXkgdGhhbiB0aGV5IHJlYWxseSB3ZXJlLCBvd2luZyB0byB0aGUgbGVuZ3RoIG9mIHRoZWlyIGxpbmUgb2YgbWFyY2gsIGFuZCB0aGUgZWNob2VzIG9mIHRoZSBuaWdodCBnYXZlIHRoZSBpbXByZXNzaW9uIHRoYXQgdGhlIHNob3V0cyBwcm9jZWVkZWQgZnJvbSBtYW55IHRpbWVzIHRoZSBudW1iZXIgb2YgbWVuIHRoZXJlIHJlYWxseSB3ZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBsYXN0LCB3aXRoIGEgdW5pdGVkIG9uc2V0LCB0aGV5IHJlcHVsc2VkIHRoZSBlbmVteSwgbWFzdGVyZWQgdGhlIGNpdGFkZWwsIGFuZCBoZWxkIGl0cyBnYXJyaXNvbiBpbiB0aGVpciBwb3dlci4gRGF5IHdhcyBub3cgYnJlYWtpbmcsIHRoZSBzdW4gYXQgb25jZSBzaG9uZSBvdXQgdXBvbiB0aGVpciBzdWNjZXNzLCBhbmQgdGhlIHJlc3Qgb2YgdGhlIGZvcmNlcyBvZiBBcmF0dXMgY2FtZSB1cCBmcm9tIFNpY3lvbiwgdGhlIENvcmludGhpYW5zIHJlYWRpbHkgcmVjZWl2aW5nIHRoZW0gYnkgdGhlIGdhdGVzIGFuZCBoZWxwaW5nIHRoZW0gdG8gc2VpemUgdGhlIGtpbmcncyBzb2xkaWVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc29sZGllcnMgb2YgQXJhdHVzIHdob20gaGUgaGFkIGxlZnQgYXQgdGhlIGdhdGUgb3V0c2lkZSBuZWFyIHRoZSB0ZW1wbGUgb2YgSGVyYSwgdGhyZWUgaHVuZHJlZCBpbiBudW1iZXIsIHdoZW4gb25jZSB0aGV5IGhhZCBidXJzdCBpbnRvIHRoZSBjaXR5IGFuZCBmb3VuZCBpdCBmdWxsIG9mIGxpZ2h0cyBhbmQgbWFuaWZvbGQgdHVtdWx0LCB3ZXJlIHVuYWJsZSB0byBkaXNjb3ZlciB0aGUgcGF0aCB3aGljaCB0aGVpciBjb21yYWRlcyBoYWQgdGFrZW4gb3IgZm9sbG93IGluIHRoZWlyIHN0ZXBzLiBTbyB0aGV5IGNyb3VjaGVkIGRvd24gYW5kIGh1ZGRsZWQgdGhlbXNlbHZlcyB0b2dldGhlciBpbiBhIHNoYWRlZCBmbGFuayBvZiB0aGUgY2xpZmYsIGFuZCB0aGVyZSByZW1haW5lZCBpbiBncmVhdCBkaXN0cmVzcyBhbmQgaW1wYXRpZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBcmF0dXMgYW5kIGhpcyBwYXJ0eSB3ZXJlIG5vdyBhc3NhaWxlZCB3aXRoIG1pc3NpbGVzIGZyb20gdGhlIGNpdGFkZWwgYW5kIHdlcmUgZmlnaHRpbmcsIHRoZSBzaG91dHMgb2YgdGhlIGNvbWJhdGFudHMgY2FtZSBkb3duIHRoZSBzbG9wZXMsIGFuZCBjcmllcyBlY2hvZWQgcm91bmQgYWJvdXQgd2hpY2ggdGhlIHJldmVyYmVyYXRpb25zIGZyb20gdGhlIGhpbGxzIHJlbmRlcmVkIGNvbmZ1c2VkIGFuZCBvZiB1bmNlcnRhaW4gb3JpZ2luLiBUaGVuLCBhcyB0aGV5IHdlcmUgYXQgYSBsb3NzIHdoaWNoIHdheSB0byB0dXJuLCBBcmNoZWxhw7xzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBraW5nJ3MgZm9yY2VzLCBoYXZpbmcgbWFueSBzb2xkaWVycyB3aXRoIGhpbSwgbWFkZSB1cCB0aGUgYXNjZW50IGFtaWQgc2hvdXRzIGFuZCB0aGUgYmxhcmUgb2YgdHJ1bXBldHMgdG8gYXR0YWNrIEFyYXR1cyBhbmQgaGlzIHBhcnR5LCBhbmQgdGh1cyBwYXNzZWQgYnkgdGhlIHRocmVlIGh1bmRyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCByaXNpbmcgdXAgZnJvbSBhbWJ1c2ggYXMgaXQgd2VyZSwgZmVsbCB1cG9uIGhpbSwgc2xldyB0aGUgZmlyc3Qgd2hvbSB0aGV5IGF0dGFja2VkLCBwdXQgdGhlIHJlc3QsIHRvZ2V0aGVyIHdpdGggQXJjaGVsYcO8cywgdG8gcGFuaWMgZmxpZ2h0LCBhbmQgcHVyc3VlZCB0aGVtIHVudGlsIHRoZXkgd2VyZSBzY2F0dGVyZWQgYW5kIGRpc3BlcnNlZCBhYm91dCB0aGUgY2l0eS4gQW5kIGp1c3QgYXMgdGhpcyB2aWN0b3J5IGhhZCBiZWVuIHdvbiwgRXJnaW51cyBjYW1lIGZyb20gdGhlIHBhcnR5IGZpZ2h0aW5nIG9uIHRoZSBoZWlnaHRzLCB3aXRoIHRpZGluZ3MgdGhhdCBBcmF0dXMgd2FzIGVuZ2FnZWQgd2l0aCB0aGUgZW5lbXksIHRoYXQgdGhlc2Ugd2VyZSBkZWZlbmRpbmcgdGhlbXNlbHZlcyB2aWdvcm91c2x5LCB0aGF0IGEgZ3JlYXQgc3RydWdnbGUgd2FzIGdvaW5nIG9uIGF0IHRoZSB2ZXJ5IHdhbGwsIGFuZCB0aGVyZSB3YXMgbmVlZCBvZiBzcGVlZHkgaGVscC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0aHJlZSBodW5kcmVkIGF0IG9uY2Ugb3JkZXJlZCBoaW0gdG8gbGVhZCB0aGUgd2F5OyBhbmQgYXMgdGhleSB0b29rIHRvIHRoZSBhc2NlbnQgdGhlaXIgY3JpZXMgc2lnbmFsbGVkIHRoZWlyIGNvbWluZyBhbmQgZW5jb3VyYWdlZCB0aGVpciBmcmllbmRzOyB0aGUgbGlnaHQgb2YgdGhlIGZ1bGwgbW9vbiBhbHNvIG1hZGUgdGhlaXIgYXJtcyBhcHBlYXIgbW9yZSBudW1lcm91cyB0byB0aGUgZW5lbXkgdGhhbiB0aGV5IHJlYWxseSB3ZXJlLCBvd2luZyB0byB0aGUgbGVuZ3RoIG9mIHRoZWlyIGxpbmUgb2YgbWFyY2gsIGFuZCB0aGUgZWNob2VzIG9mIHRoZSBuaWdodCBnYXZlIHRoZSBpbXByZXNzaW9uIHRoYXQgdGhlIHNob3V0cyBwcm9jZWVkZWQgZnJvbSBtYW55IHRpbWVzIHRoZSBudW1iZXIgb2YgbWVuIHRoZXJlIHJlYWxseSB3ZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QsIHdpdGggYSB1bml0ZWQgb25zZXQsIHRoZXkgcmVwdWxzZWQgdGhlIGVuZW15LCBtYXN0ZXJlZCB0aGUgY2l0YWRlbCwgYW5kIGhlbGQgaXRzIGdhcnJpc29uIGluIHRoZWlyIHBvd2VyLiBEYXkgd2FzIG5vdyBicmVha2luZywgdGhlIHN1biBhdCBvbmNlIHNob25lIG91dCB1cG9uIHRoZWlyIHN1Y2Nlc3MsIGFuZCB0aGUgcmVzdCBvZiB0aGUgZm9yY2VzIG9mIEFyYXR1cyBjYW1lIHVwIGZyb20gU2ljeW9uLCB0aGUgQ29yaW50aGlhbnMgcmVhZGlseSByZWNlaXZpbmcgdGhlbSBieSB0aGUgZ2F0ZXMgYW5kIGhlbHBpbmcgdGhlbSB0byBzZWl6ZSB0aGUga2luZydzIHNvbGRpZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGV2ZXJ5dGhpbmcgYXBwZWFyZWQgdG8gYmUgc2FmZSBBcmF0dXMgY2FtZSBkb3duIGZyb20gdGhlIGNpdGFkZWwgaW50byB0aGUgdGhlYXRyZSB3aGl0aGVyIGFuIGltbWVuc2UgbXVsdGl0dWRlIHN0cmVhbWVkIHdpdGggYW4gZWFnZXIgZGVzaXJlIHRvIHNlZSBoaW0gYW5kIGhlYXIgd2hhdCBoZSB3b3VsZCBzYXkgdG8gdGhlIENvcmludGhpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBzdGF0aW9uaW5nIGhpcyBBY2hhZWFucyBhdCBib3RoIHRoZSBzaWRlLWVudHJhbmNlcywgaGUgaGltc2VsZiBhZHZhbmNlZCBmcm9tIHRoZSBiYWNrLXNjZW5lIGludG8gdGhlIG9yY2hlc3RyYSwgd2l0aCBoaXMgYnJlYXN0cGxhdGUgc3RpbGwgb24gYW5kIGhpcyBjb3VudGVuYW5jZSBhbHRlcmVkIGJ5IHRvaWwgYW5kIGxvc3Mgb2Ygc2xlZXAsIHNvIHRoYXQgdGhlIGV4dWx0YXRpb24gYW5kIGpveSBvZiBoaXMgc3Bpcml0IHdlcmUgb3ZlcnBvd2VyZWQgYnkgdGhlIHdlYXJpbmVzcyBvZiBoaXMgYm9keS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgdGhlIG11bHRpdHVkZSwgd2hlbiBoZSBjYW1lIGZvcndhcmQgdG8gYWRkcmVzcyB0aGVtLCB3ZXJlIHByb2Z1c2UgaW4gdGhlaXIgZnJpZW5kbHkgZXhwcmVzc2lvbnMsIHRha2luZyBoaXMgc3BlYXIgaW4gaGlzIHJpZ2h0IGhhbmQgYW5kIHNsaWdodGx5IGluY2xpbmluZyBoaXMga25lZSBhbmQgaGlzIGJvZHksIGhlIHN1cHBvcnRlZCBoaW1zZWxmIHVwb24gaXQgYW5kIHN0b29kIHRodXMgZm9yIGEgbG9uZyB0aW1lIHNpbGVudGx5IHJlY2VpdmluZyB0aGVpciBhcHBsYXVzZSBhbmQgYWNjbGFtYXRpb25zLCB0aGVpciBwcmFpc2VzIG9mIGhpcyB2YWxvdXIgYW5kIHRoZWlyIGNvbmdyYXR1bGF0aW9ucyBvbiBoaXMgc3VjY2Vzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBoYWQgY2Vhc2VkIGFuZCBxdWlldCBoYWQgZW5zdWVkLCBoZSBzdW1tb25lZCBoaXMgc3RyZW5ndGggYW5kIGluIGJlaGFsZiBvZiB0aGUgQWNoYWVhbnMgbWFkZSBhIHNwZWVjaCB3aGljaCBiZWZpdHRlZCB0aGVpciBleHBsb2l0LCBhbmQgcGVyc3VhZGVkIHRoZSBDb3JpbnRoaWFucyB0byBqb2luIHRoZSBBY2hhZWFuIExlYWd1ZS4gSGUgYWxzbyBnYXZlIHRoZW0gYmFjayB0aGUga2V5cyB0byB0aGVpciBnYXRlcywgb2Ygd2hpY2ggdGhleSB0aGVuIGJlY2FtZSBwb3NzZXNzZWQgZm9yIHRoZSBmaXJzdCB0aW1lIHNpbmNlIHRoZSB0aW1lIG9mIFBoaWxpcCBvZiBNYWNlZG9uLiBPZiB0aGUgb2ZmaWNlcnMgb2YgQW50aWdvbnVzLCBoZSBkaXNtaXNzZWQgQXJjaGVsYcO8cywgd2hvIGhhZCBiZWVuIHRha2VuIHByaXNvbmVyLCBidXQgVGhlb3BocmFzdHVzLCB3aG8gd291bGQgbm90IHF1aXQgaGlzIHBvc3QsIGhlIHNsZXc7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFzIGZvciBQZXJzYWV1cywgb24gdGhlIGNhcHR1cmUgb2YgdGhlIGNpdGFkZWwgaGUgbWFkZSBoaXMgZXNjYXBlIHRvIENlbmNocmVhZS4gQW5kIGF0IGEgbGF0ZXIgdGltZSwgYXMgd2UgYXJlIHRvbGQsIHdoZW4gaGUgd2FzIGxlYWRpbmcgYSBsaWZlIG9mIGxlaXN1cmUsIGFuZCBzb21lb25lIHJlbWFya2VkIHRoYXQgaW4gaGlzIG9waW5pb24gdGhlIHdpc2UgbWFuIG9ubHkgY291bGQgYmUgYSBnb29kIGdlbmVyYWwsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLDwvcT4gaGUgcmVwbGllZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGVyZSB3YXMgYSB0aW1lIHdoZW4gSSB0b28gcGFydGljdWxhcmx5IGxpa2VkIHRoaXMgZG9jdHJpbmUgb2YgWmVubydzOyBidXQgbm93LCBzaW5jZSB0aGUgbGVzc29uIEkgZ290IGZyb20gdGhlIHlvdW5nIG1hbiBvZiBTaWN5b24sIEkgYW0gb2YgYW5vdGhlciBtaW5kLjwvcT4gVGhpcyBzdG9yeSBvZiBQZXJzYWV1cyBpcyB0b2xkIGJ5IG1hbnkgd3JpdGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBldmVyeXRoaW5nIGFwcGVhcmVkIHRvIGJlIHNhZmUgQXJhdHVzIGNhbWUgZG93biBmcm9tIHRoZSBjaXRhZGVsIGludG8gdGhlIHRoZWF0cmUgd2hpdGhlciBhbiBpbW1lbnNlIG11bHRpdHVkZSBzdHJlYW1lZCB3aXRoIGFuIGVhZ2VyIGRlc2lyZSB0byBzZWUgaGltIGFuZCBoZWFyIHdoYXQgaGUgd291bGQgc2F5IHRvIHRoZSBDb3JpbnRoaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHN0YXRpb25pbmcgaGlzIEFjaGFlYW5zIGF0IGJvdGggdGhlIHNpZGUtZW50cmFuY2VzLCBoZSBoaW1zZWxmIGFkdmFuY2VkIGZyb20gdGhlIGJhY2stc2NlbmUgaW50byB0aGUgb3JjaGVzdHJhLCB3aXRoIGhpcyBicmVhc3RwbGF0ZSBzdGlsbCBvbiBhbmQgaGlzIGNvdW50ZW5hbmNlIGFsdGVyZWQgYnkgdG9pbCBhbmQgbG9zcyBvZiBzbGVlcCwgc28gdGhhdCB0aGUgZXh1bHRhdGlvbiBhbmQgam95IG9mIGhpcyBzcGlyaXQgd2VyZSBvdmVycG93ZXJlZCBieSB0aGUgd2VhcmluZXNzIG9mIGhpcyBib2R5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZSBtdWx0aXR1ZGUsIHdoZW4gaGUgY2FtZSBmb3J3YXJkIHRvIGFkZHJlc3MgdGhlbSwgd2VyZSBwcm9mdXNlIGluIHRoZWlyIGZyaWVuZGx5IGV4cHJlc3Npb25zLCB0YWtpbmcgaGlzIHNwZWFyIGluIGhpcyByaWdodCBoYW5kIGFuZCBzbGlnaHRseSBpbmNsaW5pbmcgaGlzIGtuZWUgYW5kIGhpcyBib2R5LCBoZSBzdXBwb3J0ZWQgaGltc2VsZiB1cG9uIGl0IGFuZCBzdG9vZCB0aHVzIGZvciBhIGxvbmcgdGltZSBzaWxlbnRseSByZWNlaXZpbmcgdGhlaXIgYXBwbGF1c2UgYW5kIGFjY2xhbWF0aW9ucywgdGhlaXIgcHJhaXNlcyBvZiBoaXMgdmFsb3VyIGFuZCB0aGVpciBjb25ncmF0dWxhdGlvbnMgb24gaGlzIHN1Y2Nlc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgaGFkIGNlYXNlZCBhbmQgcXVpZXQgaGFkIGVuc3VlZCwgaGUgc3VtbW9uZWQgaGlzIHN0cmVuZ3RoIGFuZCBpbiBiZWhhbGYgb2YgdGhlIEFjaGFlYW5zIG1hZGUgYSBzcGVlY2ggd2hpY2ggYmVmaXR0ZWQgdGhlaXIgZXhwbG9pdCwgYW5kIHBlcnN1YWRlZCB0aGUgQ29yaW50aGlhbnMgdG8gam9pbiB0aGUgQWNoYWVhbiBMZWFndWUuIEhlIGFsc28gZ2F2ZSB0aGVtIGJhY2sgdGhlIGtleXMgdG8gdGhlaXIgZ2F0ZXMsIG9mIHdoaWNoIHRoZXkgdGhlbiBiZWNhbWUgcG9zc2Vzc2VkIGZvciB0aGUgZmlyc3QgdGltZSBzaW5jZSB0aGUgdGltZSBvZiBQaGlsaXAgb2YgTWFjZWRvbi4gT2YgdGhlIG9mZmljZXJzIG9mIEFudGlnb251cywgaGUgZGlzbWlzc2VkIEFyY2hlbGHDvHMsIHdobyBoYWQgYmVlbiB0YWtlbiBwcmlzb25lciwgYnV0IFRoZW9waHJhc3R1cywgd2hvIHdvdWxkIG5vdCBxdWl0IGhpcyBwb3N0LCBoZSBzbGV3OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFzIGZvciBQZXJzYWV1cywgb24gdGhlIGNhcHR1cmUgb2YgdGhlIGNpdGFkZWwgaGUgbWFkZSBoaXMgZXNjYXBlIHRvIENlbmNocmVhZS4gQW5kIGF0IGEgbGF0ZXIgdGltZSwgYXMgd2UgYXJlIHRvbGQsIHdoZW4gaGUgd2FzIGxlYWRpbmcgYSBsaWZlIG9mIGxlaXN1cmUsIGFuZCBzb21lb25lIHJlbWFya2VkIHRoYXQgaW4gaGlzIG9waW5pb24gdGhlIHdpc2UgbWFuIG9ubHkgY291bGQgYmUgYSBnb29kIGdlbmVyYWwsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBoZSByZXBsaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlcmUgd2FzIGEgdGltZSB3aGVuIEkgdG9vIHBhcnRpY3VsYXJseSBsaWtlZCB0aGlzIGRvY3RyaW5lIG9mIFplbm8nczsgYnV0IG5vdywgc2luY2UgdGhlIGxlc3NvbiBJIGdvdCBmcm9tIHRoZSB5b3VuZyBtYW4gb2YgU2ljeW9uLCBJIGFtIG9mIGFub3RoZXIgbWluZC48L3E+IFRoaXMgc3Rvcnkgb2YgUGVyc2FldXMgaXMgdG9sZCBieSBtYW55IHdyaXRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBBcmF0dXMsIGhlIGF0IG9uY2UgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiB0aGUgdGVtcGxlIG9mIEhlcmEgYW5kIHRoZSBoYXJib3VyIG9mIExlY2hhZXVtOyBoZSBhbHNvIHNlaXplZCBmaXZlLWFuZC10d2VudHkgb2YgdGhlIGtpbmcncyBzaGlwcywgYW5kIHNvbGQgZml2ZSBodW5kcmVkIGhvcnNlcyBhbmQgZm91ciBodW5kcmVkIFN5cmlhbnM7IEFjcm9jb3JpbnRodXMsIHRvbywgd2FzIGdhcnJpc29uZWQgYnkgdGhlIEFjaGFlYW5zIHdpdGggZm91ciBodW5kcmVkIG1lbi1hdC1hcm1zLCBhbmQgZmlmdHkgZG9ncyB3aXRoIGFzIG1hbnkga2VlcGVycyB3ZXJlIG1haW50YWluZWQgaW4gdGhlIGNpdGFkZWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIEFyYXR1cywgaGUgYXQgb25jZSBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIHRoZSB0ZW1wbGUgb2YgSGVyYSBhbmQgdGhlIGhhcmJvdXIgb2YgTGVjaGFldW07IGhlIGFsc28gc2VpemVkIGZpdmUtYW5kLXR3ZW50eSBvZiB0aGUga2luZydzIHNoaXBzLCBhbmQgc29sZCBmaXZlIGh1bmRyZWQgaG9yc2VzIGFuZCBmb3VyIGh1bmRyZWQgU3lyaWFuczsgQWNyb2NvcmludGh1cywgdG9vLCB3YXMgZ2Fycmlzb25lZCBieSB0aGUgQWNoYWVhbnMgd2l0aCBmb3VyIGh1bmRyZWQgbWVuLWF0LWFybXMsIGFuZCBmaWZ0eSBkb2dzIHdpdGggYXMgbWFueSBrZWVwZXJzIHdlcmUgbWFpbnRhaW5lZCBpbiB0aGUgY2l0YWRlbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZSBSb21hbnMsIGluIHRoZWlyIGFkbWlyYXRpb24gb2YgUGhpbG9wb2VtZW4sIGNhbGwgaGltIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGxhc3Qgb2YgdGhlIEdyZWVrcyw8L3E+IGltcGx5aW5nIHRoYXQgbm8gZ3JlYXQgbWFuIGFyb3NlIGFtb25nIHRoZSBHcmVla3MgYWZ0ZXIgaGltOyBidXQgSSBzaG91bGQgc2F5IHRoYXQgdGhpcyBjYXB0dXJlIG9mIEFjcm9jb3JpbnRodXMgd2FzIHRoZSB2ZXJ5IGxhc3QgYW5kIGxhdGVzdCBhY2hpZXZlbWVudCBvZiB0aGUgR3JlZWtzLCBhbmQgdGhhdCBpdCByaXZhbGxlZCB0aGVpciBiZXN0LCBub3Qgb25seSBpbiBkYXJpbmcsIGJ1dCBhbHNvIGluIGhhcHB5IHJlc3VsdHMsIGFzIGV2ZW50cyBhdCBvbmNlIHNob3dlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIE1lZ2FyYSBzZWNlZGVkIGZyb20gQW50aWdvbnVzIGFuZCBhdHRhY2hlZCBoZXJzZWxmIHRvIEFyYXR1czsgVHJvZXplbiBhbmQgRXBpZGF1cnVzIHdlcmUgZW5yb2xsZWQgaW4gdGhlIEFjaGFlYW4gTGVhZ3VlOyBhbmQgQXJhdHVzLCBtYWtpbmcgYSBkaXN0YW50IGV4cGVkaXRpb24gZm9yIHRoZSBmaXJzdCB0aW1lLCBpbnZhZGVkIEF0dGljYSwgYW5kIGNyb3NzaW5nIHRoZSBzdHJhaXQgcGx1bmRlcmVkIFNhbGFtaXMsIGhpcyBBY2hhZWFuIGZvcmNlcywgYXMgdGhvdWdoIHJlbGVhc2VkIGZyb20gcHJpc29uLCBvYmV5aW5nIGhpcyBldmVyeSB3aXNoLiBCdXQgdGhlIGZyZWVtZW4gYW1vbmcgaGlzIHByaXNvbmVycyBoZSBzZW50IGJhY2sgdG8gdGhlIEF0aGVuaWFucyB3aXRob3V0IHJhbnNvbSwgdGh1cyBsYXlpbmcgYSBmb3VuZGF0aW9uIGZvciB0aGVpciByZXZvbHQgZnJvbSBBbnRpZ29udXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gbWFkZSBQdG9sZW15IGFuIGFsbHkgb2YgdGhlIEFjaGFlYW5zLCB3aXRoIHRoZSBsZWFkZXJzaGlwIGluIHdhciBvbiBsYW5kIGFuZCBzZWEuIEFuZCBoZSB3YXMgc28gaW5mbHVlbnRpYWwgYW1vbmcgdGhlIEFjaGFlYW5zIHRoYXQsIHNpbmNlIGl0IHdhcyBub3QgcGVybWlzc2libGUgZXZlcnkgeWVhciwgdGhleSBjaG9zZSBoaW0gZ2VuZXJhbCBldmVyeSBvdGhlciB5ZWFyLCB0aG91Z2gsIGluIGZhY3QsIGhpcyB3aXNkb20gbWFkZSBoaW0gdGhlaXIgbGVhZGVyIGFsbCB0aGUgdGltZS4gRm9yIHRoZXkgc2F3IHRoYXQgaGUgcHV0IGZpcnN0IGFuZCBmb3JlbW9zdCwgbm90IHdlYWx0aCwgbm90IGZhbWUsIG5vdCBmcmllbmRzaGlwIHdpdGgga2luZ3MsIG5vdCBoaXMgb3duIG5hdGl2ZSBjaXR5J3MgYWR2YW50YWdlLCBidXQgb25seSB0aGUgZ3Jvd3RoIGluIHBvd2VyIG9mIHRoZSBBY2hhZWFuIExlYWd1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGNvbnNpZGVyZWQgdGhhdCB0aGUgR3JlZWsgc3RhdGVzIHdoaWNoIHdlcmUgd2VhayB3b3VsZCBiZSBwcmVzZXJ2ZWQgYnkgbXV0dWFsIHN1cHBvcnQgd2hlbiBvbmNlIHRoZXkgaGFkIGJlZW4gYm91bmQgYXMgaXQgd2VyZSBieSB0aGUgY29tbW9uIGludGVyZXN0LCBhbmQgdGhhdCBqdXN0IGFzIHRoZSBtZW1iZXJzIG9mIHRoZSBib2R5IGhhdmUgYSBjb21tb24gbGlmZSBhbmQgYnJlYXRoIGJlY2F1c2UgdGhleSBjbGVhdmUgdG9nZXRoZXIgaW4gYSBjb21tb24gZ3Jvd3RoLCBidXQgd2hlbiB0aGV5IGFyZSBkcmF3biBhcGFydCBhbmQgYmVjb21lIHNlcGFyYXRlIHRoZXkgd2l0aGVyIGF3YXkgYW5kIGRlY2F5LCBpbiBsaWtlIG1hbm5lciB0aGUgc2V2ZXJhbCBzdGF0ZXMgYXJlIHJ1aW5lZCBieSB0aG9zZSB3aG8gZGlzc2V2ZXIgdGhlaXIgY29tbW9uIGJvbmRzLCBidXQgYXJlIGF1Z21lbnRlZCBieSBtdXR1YWwgc3VwcG9ydCwgd2hlbiB0aGV5IGJlY29tZSBwYXJ0cyBvZiBhIGdyZWF0IHdob2xlIGFuZCBlbmpveSBhIGNvbW1vbiBmb3Jlc2lnaHQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGUgUm9tYW5zLCBpbiB0aGVpciBhZG1pcmF0aW9uIG9mIFBoaWxvcG9lbWVuLCBjYWxsIGhpbSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGxhc3Qgb2YgdGhlIEdyZWVrcyw8L3E+IGltcGx5aW5nIHRoYXQgbm8gZ3JlYXQgbWFuIGFyb3NlIGFtb25nIHRoZSBHcmVla3MgYWZ0ZXIgaGltOyBidXQgSSBzaG91bGQgc2F5IHRoYXQgdGhpcyBjYXB0dXJlIG9mIEFjcm9jb3JpbnRodXMgd2FzIHRoZSB2ZXJ5IGxhc3QgYW5kIGxhdGVzdCBhY2hpZXZlbWVudCBvZiB0aGUgR3JlZWtzLCBhbmQgdGhhdCBpdCByaXZhbGxlZCB0aGVpciBiZXN0LCBub3Qgb25seSBpbiBkYXJpbmcsIGJ1dCBhbHNvIGluIGhhcHB5IHJlc3VsdHMsIGFzIGV2ZW50cyBhdCBvbmNlIHNob3dlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZWdhcmEgc2VjZWRlZCBmcm9tIEFudGlnb251cyBhbmQgYXR0YWNoZWQgaGVyc2VsZiB0byBBcmF0dXM7IFRyb2V6ZW4gYW5kIEVwaWRhdXJ1cyB3ZXJlIGVucm9sbGVkIGluIHRoZSBBY2hhZWFuIExlYWd1ZTsgYW5kIEFyYXR1cywgbWFraW5nIGEgZGlzdGFudCBleHBlZGl0aW9uIGZvciB0aGUgZmlyc3QgdGltZSwgaW52YWRlZCBBdHRpY2EsIGFuZCBjcm9zc2luZyB0aGUgc3RyYWl0IHBsdW5kZXJlZCBTYWxhbWlzLCBoaXMgQWNoYWVhbiBmb3JjZXMsIGFzIHRob3VnaCByZWxlYXNlZCBmcm9tIHByaXNvbiwgb2JleWluZyBoaXMgZXZlcnkgd2lzaC4gQnV0IHRoZSBmcmVlbWVuIGFtb25nIGhpcyBwcmlzb25lcnMgaGUgc2VudCBiYWNrIHRvIHRoZSBBdGhlbmlhbnMgd2l0aG91dCByYW5zb20sIHRodXMgbGF5aW5nIGEgZm91bmRhdGlvbiBmb3IgdGhlaXIgcmV2b2x0IGZyb20gQW50aWdvbnVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gbWFkZSBQdG9sZW15IGFuIGFsbHkgb2YgdGhlIEFjaGFlYW5zLCB3aXRoIHRoZSBsZWFkZXJzaGlwIGluIHdhciBvbiBsYW5kIGFuZCBzZWEuIEFuZCBoZSB3YXMgc28gaW5mbHVlbnRpYWwgYW1vbmcgdGhlIEFjaGFlYW5zIHRoYXQsIHNpbmNlIGl0IHdhcyBub3QgcGVybWlzc2libGUgZXZlcnkgeWVhciwgdGhleSBjaG9zZSBoaW0gZ2VuZXJhbCBldmVyeSBvdGhlciB5ZWFyLCB0aG91Z2gsIGluIGZhY3QsIGhpcyB3aXNkb20gbWFkZSBoaW0gdGhlaXIgbGVhZGVyIGFsbCB0aGUgdGltZS4gRm9yIHRoZXkgc2F3IHRoYXQgaGUgcHV0IGZpcnN0IGFuZCBmb3JlbW9zdCwgbm90IHdlYWx0aCwgbm90IGZhbWUsIG5vdCBmcmllbmRzaGlwIHdpdGgga2luZ3MsIG5vdCBoaXMgb3duIG5hdGl2ZSBjaXR5J3MgYWR2YW50YWdlLCBidXQgb25seSB0aGUgZ3Jvd3RoIGluIHBvd2VyIG9mIHRoZSBBY2hhZWFuIExlYWd1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBjb25zaWRlcmVkIHRoYXQgdGhlIEdyZWVrIHN0YXRlcyB3aGljaCB3ZXJlIHdlYWsgd291bGQgYmUgcHJlc2VydmVkIGJ5IG11dHVhbCBzdXBwb3J0IHdoZW4gb25jZSB0aGV5IGhhZCBiZWVuIGJvdW5kIGFzIGl0IHdlcmUgYnkgdGhlIGNvbW1vbiBpbnRlcmVzdCwgYW5kIHRoYXQganVzdCBhcyB0aGUgbWVtYmVycyBvZiB0aGUgYm9keSBoYXZlIGEgY29tbW9uIGxpZmUgYW5kIGJyZWF0aCBiZWNhdXNlIHRoZXkgY2xlYXZlIHRvZ2V0aGVyIGluIGEgY29tbW9uIGdyb3d0aCwgYnV0IHdoZW4gdGhleSBhcmUgZHJhd24gYXBhcnQgYW5kIGJlY29tZSBzZXBhcmF0ZSB0aGV5IHdpdGhlciBhd2F5IGFuZCBkZWNheSwgaW4gbGlrZSBtYW5uZXIgdGhlIHNldmVyYWwgc3RhdGVzIGFyZSBydWluZWQgYnkgdGhvc2Ugd2hvIGRpc3NldmVyIHRoZWlyIGNvbW1vbiBib25kcywgYnV0IGFyZSBhdWdtZW50ZWQgYnkgbXV0dWFsIHN1cHBvcnQsIHdoZW4gdGhleSBiZWNvbWUgcGFydHMgb2YgYSBncmVhdCB3aG9sZSBhbmQgZW5qb3kgYSBjb21tb24gZm9yZXNpZ2h0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28sIHNpbmNlIGhlIHNhdyB0aGF0IHRoZSBiZXN0IG9mIHRoZSBuZWlnaGJvdXJpbmcgcGVvcGxlcyB3ZXJlIGF1dG9ub21vdXMsIGFuZCB3YXMgZGlzdHJlc3NlZCBhdCB0aGUgc2Vydml0dWRlIG9mIHRoZSBBcmdpdmVzLCBoZSBwbG90dGVkIHRvIGtpbGwgQXJpc3RvbWFjaHVzIHRoZSB0eXJhbnQgb2YgQXJnb3MsIGJlaW5nIGFtYml0aW91cyB0byByZXN0b3JlIGl0cyBmcmVlZG9tIHRvIHRoZSBjaXR5IGFzIGEgcmV3YXJkIGZvciB0aGUgcmVhcmluZyBpdCBoYWQgZ2l2ZW4gaGltLCBhcyB3ZWxsIGFzIHRvIGF0dGFjaCBpdCB0byB0aGUgQWNoYWVhbiBMZWFndWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBtZW4gd2VyZSBmb3VuZCB0byBkYXJlIHRoZSBkZWVkLCBvZiB3aG9tIEFlc2NoeWx1cyBhbmQgQ2hhcmltZW5lcyB0aGUgc2VlciB3ZXJlIHRoZSBjaGllZi4gVGhleSBoYWQgbm8gc3dvcmRzLCBob3dldmVyLCB0aGUgdHlyYW50IGhhdmluZyBwcm9oaWJpdGVkIHRoZSBwb3NzZXNzaW9uIG9mIHRoZW0gdW5kZXIgaGVhdnkgcGVuYWx0aWVzLiBBcmF0dXMsIHRoZXJlZm9yZSwgb3JkZXJlZCBzbWFsbCBkYWdnZXJzIHRvIGJlIG1hZGUgZm9yIHRoZW0gaW4gQ29yaW50aCBhbmQgc2V3ZWQgdGhlbSB1cCBpbiBwYWNrLXNhZGRsZXM7IHRoZXNlIGhlIHB1dCB1cG9uIGJlYXN0cyBvZiBidXJkZW4gY2Fycnlpbmcgb3JkaW5hcnkgd2FyZXMgYW5kIHNlbnQgdGhlbSBpbnRvIEFyZ29zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2hhcmltZW5lcyB0aGUgc2VlciB0b29rIG9uIGEgcGFydG5lciBpbiB0aGUgZW50ZXJwcmlzZSwgYXQgd2hpY2ggQWVzY2h5bHVzIGFuZCBoaXMgZnJpZW5kcyB3ZXJlIGluY2Vuc2VkIGFuZCBwcm9jZWVkZWQgdG8gYWN0IG9uIHRoZWlyIG93biBhY2NvdW50LCBpZ25vcmluZyBDaGFyaW1lbmVzLiBXaGVuIENoYXJpbWVuZXMgd2FzIGF3YXJlIG9mIHRoaXMsIGhlIHdhcyBhbmdyeSBhbmQgaW5mb3JtZWQgYWdhaW5zdCB0aGUgbWVuIGp1c3QgYXMgdGhleSB3ZXJlIHNldHRpbmcgb3V0IHRvIGF0dGFjayB0aGUgdHlyYW50OyBtb3N0IG9mIHRoZW0sIGhvd2V2ZXIsIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyBmcm9tIHRoZSBtYXJrZXQtcGxhY2UgYW5kIGZsZWQgdG8gQ29yaW50aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvLCBzaW5jZSBoZSBzYXcgdGhhdCB0aGUgYmVzdCBvZiB0aGUgbmVpZ2hib3VyaW5nIHBlb3BsZXMgd2VyZSBhdXRvbm9tb3VzLCBhbmQgd2FzIGRpc3RyZXNzZWQgYXQgdGhlIHNlcnZpdHVkZSBvZiB0aGUgQXJnaXZlcywgaGUgcGxvdHRlZCB0byBraWxsIEFyaXN0b21hY2h1cyB0aGUgdHlyYW50IG9mIEFyZ29zLCBiZWluZyBhbWJpdGlvdXMgdG8gcmVzdG9yZSBpdHMgZnJlZWRvbSB0byB0aGUgY2l0eSBhcyBhIHJld2FyZCBmb3IgdGhlIHJlYXJpbmcgaXQgaGFkIGdpdmVuIGhpbSwgYXMgd2VsbCBhcyB0byBhdHRhY2ggaXQgdG8gdGhlIEFjaGFlYW4gTGVhZ3VlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBtZW4gd2VyZSBmb3VuZCB0byBkYXJlIHRoZSBkZWVkLCBvZiB3aG9tIEFlc2NoeWx1cyBhbmQgQ2hhcmltZW5lcyB0aGUgc2VlciB3ZXJlIHRoZSBjaGllZi4gVGhleSBoYWQgbm8gc3dvcmRzLCBob3dldmVyLCB0aGUgdHlyYW50IGhhdmluZyBwcm9oaWJpdGVkIHRoZSBwb3NzZXNzaW9uIG9mIHRoZW0gdW5kZXIgaGVhdnkgcGVuYWx0aWVzLiBBcmF0dXMsIHRoZXJlZm9yZSwgb3JkZXJlZCBzbWFsbCBkYWdnZXJzIHRvIGJlIG1hZGUgZm9yIHRoZW0gaW4gQ29yaW50aCBhbmQgc2V3ZWQgdGhlbSB1cCBpbiBwYWNrLXNhZGRsZXM7IHRoZXNlIGhlIHB1dCB1cG9uIGJlYXN0cyBvZiBidXJkZW4gY2Fycnlpbmcgb3JkaW5hcnkgd2FyZXMgYW5kIHNlbnQgdGhlbSBpbnRvIEFyZ29zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDaGFyaW1lbmVzIHRoZSBzZWVyIHRvb2sgb24gYSBwYXJ0bmVyIGluIHRoZSBlbnRlcnByaXNlLCBhdCB3aGljaCBBZXNjaHlsdXMgYW5kIGhpcyBmcmllbmRzIHdlcmUgaW5jZW5zZWQgYW5kIHByb2NlZWRlZCB0byBhY3Qgb24gdGhlaXIgb3duIGFjY291bnQsIGlnbm9yaW5nIENoYXJpbWVuZXMuIFdoZW4gQ2hhcmltZW5lcyB3YXMgYXdhcmUgb2YgdGhpcywgaGUgd2FzIGFuZ3J5IGFuZCBpbmZvcm1lZCBhZ2FpbnN0IHRoZSBtZW4ganVzdCBhcyB0aGV5IHdlcmUgc2V0dGluZyBvdXQgdG8gYXR0YWNrIHRoZSB0eXJhbnQ7IG1vc3Qgb2YgdGhlbSwgaG93ZXZlciwgc3VjY2VlZGVkIGluIGVzY2FwaW5nIGZyb20gdGhlIG1hcmtldC1wbGFjZSBhbmQgZmxlZCB0byBDb3JpbnRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIGFmdGVyIGEgbGl0dGxlIHdoaWxlIEFyaXN0b21hY2h1cyB3YXMga2lsbGVkIGJ5IHNsYXZlcywgYW5kIEFyaXN0aXBwdXMsIGEgbW9yZSBwZXJuaWNpb3VzIHR5cmFudCB0aGFuIGhlLCBzb29uIHN1Y2NlZWRlZCBpbiBzZWl6aW5nIHRoZSBwb3dlci4gQXJhdHVzIGF0IG9uY2UgdG9vayBhbGwgdGhlIEFjaGFlYW5zIG9mIG1pbGl0YXJ5IGFnZSB3aG8gd2VyZSBhdCBoYW5kIGFuZCB3ZW50IHN3aWZ0bHkgdG8gdGhlIGFpZCBvZiB0aGUgY2l0eSwgc3VwcG9zaW5nIHRoYXQgaGUgd291bGQgYmUgd2VsY29tZWQgYnkgdGhlIEFyZ2l2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBtb3N0IG9mIHRoZW0gd2VyZSBieSB0aGlzIHRpbWUgaGFiaXR1YXRlZCB0byBzbGF2ZXJ5IGFuZCB3aWxsaW5nIHRvIGVuZHVyZSBpdCwgc28gdGhhdCBub3QgYSBtYW4gY2FtZSBvdmVyIHRvIGhpcyBzaWRlLCBoZSByZXRpcmVkLCBhZnRlciBpbnZvbHZpbmcgdGhlIEFjaGFlYW5zIGluIHRoZSBjaGFyZ2Ugb2YgaGF2aW5nIGdvbmUgdG8gd2FyIGluIHRpbWUgb2YgcGVhY2UuIFRoZXkgd2VyZSBwcm9zZWN1dGVkIG9uIHRoaXMgY2hhcmdlIGJlZm9yZSB0aGUgTWFudGluZWFucywgYW5kIGluIHRoZSBhYnNlbmNlIG9mIEFyYXR1cywgQXJpc3RpcHB1cyBhcyBwbGFpbnRpZmYgd29uIGhpcyBjYXNlIGFuZCB3YXMgYXdhcmRlZCBkYW1hZ2VzIHRvIHRoZSBhbW91bnQgb2YgdGhpcnR5IG1pbmFzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkhhbGYgYSB0YWxlbnQsIGVxdWl2YWxlbnQgdG8gYWJvdXQgwqMxMTggb3IgJDYwMCwgYSBtZXJlbHkgbm9taW5hbCBmaW5lLiAgTWFudGluZWlhIGFjdGVkIGFzIGFyYml0cmF0b3IscGVyaGFwcyBieSBzcGVjaWFsIGFncmVlbWVudC48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXJhdHVzIGhpbXNlbGYgdGhlIHR5cmFudCBib3RoIGhhdGVkIGFuZCBmZWFyZWQsIGFuZCBzbyBsYWlkIHBsb3RzIHRvIGtpbGwgaGltIHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgQW50aWdvbnVzIHRoZSBraW5nOyBhbmQgYWxtb3N0IGV2ZXJ5d2hlcmUgdGhlcmUgd2VyZSBtZW4gd2hvIHVuZGVydG9vayB0aGlzIGRlZWQgZm9yIHRoZW0gYW5kIHdhdGNoZWQgZm9yIGFuIG9wcG9ydHVuaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgYWZ0ZXIgYSBsaXR0bGUgd2hpbGUgQXJpc3RvbWFjaHVzIHdhcyBraWxsZWQgYnkgc2xhdmVzLCBhbmQgQXJpc3RpcHB1cywgYSBtb3JlIHBlcm5pY2lvdXMgdHlyYW50IHRoYW4gaGUsIHNvb24gc3VjY2VlZGVkIGluIHNlaXppbmcgdGhlIHBvd2VyLiBBcmF0dXMgYXQgb25jZSB0b29rIGFsbCB0aGUgQWNoYWVhbnMgb2YgbWlsaXRhcnkgYWdlIHdobyB3ZXJlIGF0IGhhbmQgYW5kIHdlbnQgc3dpZnRseSB0byB0aGUgYWlkIG9mIHRoZSBjaXR5LCBzdXBwb3NpbmcgdGhhdCBoZSB3b3VsZCBiZSB3ZWxjb21lZCBieSB0aGUgQXJnaXZlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBtb3N0IG9mIHRoZW0gd2VyZSBieSB0aGlzIHRpbWUgaGFiaXR1YXRlZCB0byBzbGF2ZXJ5IGFuZCB3aWxsaW5nIHRvIGVuZHVyZSBpdCwgc28gdGhhdCBub3QgYSBtYW4gY2FtZSBvdmVyIHRvIGhpcyBzaWRlLCBoZSByZXRpcmVkLCBhZnRlciBpbnZvbHZpbmcgdGhlIEFjaGFlYW5zIGluIHRoZSBjaGFyZ2Ugb2YgaGF2aW5nIGdvbmUgdG8gd2FyIGluIHRpbWUgb2YgcGVhY2UuIFRoZXkgd2VyZSBwcm9zZWN1dGVkIG9uIHRoaXMgY2hhcmdlIGJlZm9yZSB0aGUgTWFudGluZWFucywgYW5kIGluIHRoZSBhYnNlbmNlIG9mIEFyYXR1cywgQXJpc3RpcHB1cyBhcyBwbGFpbnRpZmYgd29uIGhpcyBjYXNlIGFuZCB3YXMgYXdhcmRlZCBkYW1hZ2VzIHRvIHRoZSBhbW91bnQgb2YgdGhpcnR5IG1pbmFzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGFsZiBhIHRhbGVudCwgZXF1aXZhbGVudCB0byBhYm91dCDCozExOCBvciAkNjAwLCBhIG1lcmVseSBub21pbmFsIGZpbmUuICBNYW50aW5laWEgYWN0ZWQgYXMgYXJiaXRyYXRvcixwZXJoYXBzIGJ5IHNwZWNpYWwgYWdyZWVtZW50Ljwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBoaW1zZWxmIHRoZSB0eXJhbnQgYm90aCBoYXRlZCBhbmQgZmVhcmVkLCBhbmQgc28gbGFpZCBwbG90cyB0byBraWxsIGhpbSB3aXRoIHRoZSBhc3Npc3RhbmNlIG9mIEFudGlnb251cyB0aGUga2luZzsgYW5kIGFsbW9zdCBldmVyeXdoZXJlIHRoZXJlIHdlcmUgbWVuIHdobyB1bmRlcnRvb2sgdGhpcyBkZWVkIGZvciB0aGVtIGFuZCB3YXRjaGVkIGZvciBhbiBvcHBvcnR1bml0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXJlIGlzIG5vIHNhZmVndWFyZCBmb3IgYSBydWxlciBsaWtlIGEgc2luY2VyZSBhbmQgc3RlYWRmYXN0IGdvb2R3aWxsIG9uIHRoZSBwYXJ0IG9mIHRoZSBydWxlZC4gRm9yIHdoZW4gYm90aCB0aGUgY29tbW9uIHBlb3BsZSBhbmQgdGhlIGxlYWRpbmcgbWVuIGFyZSBhZnJhaWQsIG5vdCBvZiB0aGVpciBsZWFkZXIsIGJ1dCBmb3IgdGhlaXIgbGVhZGVyLCBoZSBzZWVzIHdpdGggbWFueSBleWVzLCBoZWFycyB3aXRoIG1hbnkgZWFycywgYW5kIHNvIHBlcmNlaXZlcyBiZXRpbWVzIHdoYXQgaXMgZ29pbmcgb24uIFRoZXJlZm9yZSBJIHdpc2ggdG8gc3RvcCBteSBzdG9yeSBhdCB0aGlzIHBvaW50LCBpbiBvcmRlciB0byBkZXNjcmliZSB0aGUgbGlmZSB0aGF0IEFyaXN0aXBwdXMgbGVkLiBUaGlzIHdhcyBsYWlkIHVwb24gaGltIGJ5IGhpcyBvZmZpY2Ugb2YgdHlyYW50LCBzbyBlbnZpZWQgb2YgbWVuLCBhbmQgYnkgdGhlIHByaWRlIGFuZCBwb21wIG9mIG1vbmFyY2h5LCB3aGljaCBtZW4gY2VsZWJyYXRlIGFuZCBjYWxsIGJsZXNzZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVyZSBpcyBubyBzYWZlZ3VhcmQgZm9yIGEgcnVsZXIgbGlrZSBhIHNpbmNlcmUgYW5kIHN0ZWFkZmFzdCBnb29kd2lsbCBvbiB0aGUgcGFydCBvZiB0aGUgcnVsZWQuIEZvciB3aGVuIGJvdGggdGhlIGNvbW1vbiBwZW9wbGUgYW5kIHRoZSBsZWFkaW5nIG1lbiBhcmUgYWZyYWlkLCBub3Qgb2YgdGhlaXIgbGVhZGVyLCBidXQgZm9yIHRoZWlyIGxlYWRlciwgaGUgc2VlcyB3aXRoIG1hbnkgZXllcywgaGVhcnMgd2l0aCBtYW55IGVhcnMsIGFuZCBzbyBwZXJjZWl2ZXMgYmV0aW1lcyB3aGF0IGlzIGdvaW5nIG9uLiBUaGVyZWZvcmUgSSB3aXNoIHRvIHN0b3AgbXkgc3RvcnkgYXQgdGhpcyBwb2ludCwgaW4gb3JkZXIgdG8gZGVzY3JpYmUgdGhlIGxpZmUgdGhhdCBBcmlzdGlwcHVzIGxlZC4gVGhpcyB3YXMgbGFpZCB1cG9uIGhpbSBieSBoaXMgb2ZmaWNlIG9mIHR5cmFudCwgc28gZW52aWVkIG9mIG1lbiwgYW5kIGJ5IHRoZSBwcmlkZSBhbmQgcG9tcCBvZiBtb25hcmNoeSwgd2hpY2ggbWVuIGNlbGVicmF0ZSBhbmQgY2FsbCBibGVzc2VkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvdWdoIGhlIGhhZCBBbnRpZ29udXMgYXMgYWxseSwgYW5kIGtlcHQgbWFueSBndWFyZHMgdG8gcHJvdGVjdCBoaXMgcGVyc29uLCBhbmQgaGFkIGxlZnQgbm8gc2luZ2xlIGVuZW15IGFsaXZlIGluIHRoZSBjaXR5LCB5ZXQgaGUgd291bGQgb3JkZXIgaGlzIHNwZWFybWVuIGFuZCBndWFyZHMgdG8gYml2b3VhYyBvdXRzaWRlIGluIHRoZSBjb2xvbm5hZGU7IGFuZCBhcyBmb3IgaGlzIHNlcnZhbnRzLCBhcyBzb29uIGFzIHN1cHBlciB3YXMgb3ZlciBoZSB3b3VsZCBkcml2ZSB0aGVtIGFsbCBvdXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd291bGQgbG9jayB0aGUgZG9vcnMgb2YgdGhlIGlubmVyIGhvdXNlLCBhbmQgYmV0YWtlIGhpbXNlbGYgd2l0aCBoaXMgbWlzdHJlc3MgdG8gYSBsaXR0bGUgdXBwZXIgcm9vbSB3aGljaCB3YXMgY2xvc2VkIGJ5IGEgdHJhcC1kb29yOyBvbiB0aGlzIGRvb3IgaGUgd291bGQgcGxhY2UgaGlzIGNvdWNoIGFuZCBzbGVlcCwgYXMgb25lIGluIGhpcyBzdGF0ZSBvZiBtaW5kIHdvdWxkIG5hdHVyYWxseSBzbGVlcCwgYnkgZml0cyBhbmQgc3RhcnRzIGFuZCBpbiBncmVhdCBmZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGFkZGVyIHRoZSBtb3RoZXIgb2YgaGlzIG1pc3RyZXNzIHdvdWxkIHRha2UgYXdheSBhbmQgbG9jayB1cCBpbiBhbm90aGVyIHJvb20sIGFuZCBpbiB0aGUgbW9ybmluZyB3b3VsZCBwdXQgaXQgaW4gcGxhY2UgYWdhaW4gYW5kIGNhbGwgdGhlIHdvbmRlcmZ1bCB0eXJhbnQsIHdobyB3b3VsZCBjb21lIGRvd24gbGlrZSBhIGNyZWVwaW5nIHRoaW5nIG91dCBvZiBpdHMgaG9sZS4gQXJhdHVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgbm90IGJ5IGZvcmNlIG9mIGFybXMsIGJ1dCBsZWdhbGx5IGFuZCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgdmlydHVlcywgaGFkIGludmVzdGVkIGhpbXNlbGYgd2l0aCBhbiBlbmR1cmluZyBwb3dlciwgYW5kIHlldCB3ZW50IGFib3V0IGluIG9yZGluYXJ5IHR1bmljIGFuZCBjbG9hazsgaGUgZGVjbGFyZWQgaGltc2VsZiBhIHB1YmxpYyBmb2Ugb2YgYW55IGFuZCBldmVyeSB0eXJhbnQ7IGFuZCBoZSBsZWZ0IGJlaGluZCBoaW0gYSBwb3N0ZXJpdHkgb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGFtb25nIHRoZSBHcmVla3MgZG93biB0byB0aGlzIGRheS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIHRoZSBtZW4gd2hvIHNlaXplIGNpdGFkZWxzLCBtYWludGFpbiBzcGVhcm1lbiwgYW5kIGRlcGVuZCB1cG9uIGFybXMgYW5kIGdhdGVzIGFuZCB0cmFwLWRvb3JzIGZvciB0aGUgc2FmZXR5IG9mIHRoZWlyIHBlcnNvbnMsIG9ubHkgYSBmZXcsIGxpa2UgdGltb3JvdXMgaGFyZXMsIGhhdmUgZXNjYXBlZCBhIHZpb2xlbnQgZGVhdGg7IHdoaWxlIG5vdCBvbmUgb2YgdGhlbSBoYXMgbGVmdCBhIGhvdXNlLCBvciBhIGZhbWlseSwgb3IgYSB0b21iIHRvIGtlZXAgaGlzIG1lbW9yeSBpbiBob25vdXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRob3VnaCBoZSBoYWQgQW50aWdvbnVzIGFzIGFsbHksIGFuZCBrZXB0IG1hbnkgZ3VhcmRzIHRvIHByb3RlY3QgaGlzIHBlcnNvbiwgYW5kIGhhZCBsZWZ0IG5vIHNpbmdsZSBlbmVteSBhbGl2ZSBpbiB0aGUgY2l0eSwgeWV0IGhlIHdvdWxkIG9yZGVyIGhpcyBzcGVhcm1lbiBhbmQgZ3VhcmRzIHRvIGJpdm91YWMgb3V0c2lkZSBpbiB0aGUgY29sb25uYWRlOyBhbmQgYXMgZm9yIGhpcyBzZXJ2YW50cywgYXMgc29vbiBhcyBzdXBwZXIgd2FzIG92ZXIgaGUgd291bGQgZHJpdmUgdGhlbSBhbGwgb3V0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgd291bGQgbG9jayB0aGUgZG9vcnMgb2YgdGhlIGlubmVyIGhvdXNlLCBhbmQgYmV0YWtlIGhpbXNlbGYgd2l0aCBoaXMgbWlzdHJlc3MgdG8gYSBsaXR0bGUgdXBwZXIgcm9vbSB3aGljaCB3YXMgY2xvc2VkIGJ5IGEgdHJhcC1kb29yOyBvbiB0aGlzIGRvb3IgaGUgd291bGQgcGxhY2UgaGlzIGNvdWNoIGFuZCBzbGVlcCwgYXMgb25lIGluIGhpcyBzdGF0ZSBvZiBtaW5kIHdvdWxkIG5hdHVyYWxseSBzbGVlcCwgYnkgZml0cyBhbmQgc3RhcnRzIGFuZCBpbiBncmVhdCBmZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYWRkZXIgdGhlIG1vdGhlciBvZiBoaXMgbWlzdHJlc3Mgd291bGQgdGFrZSBhd2F5IGFuZCBsb2NrIHVwIGluIGFub3RoZXIgcm9vbSwgYW5kIGluIHRoZSBtb3JuaW5nIHdvdWxkIHB1dCBpdCBpbiBwbGFjZSBhZ2FpbiBhbmQgY2FsbCB0aGUgd29uZGVyZnVsIHR5cmFudCwgd2hvIHdvdWxkIGNvbWUgZG93biBsaWtlIGEgY3JlZXBpbmcgdGhpbmcgb3V0IG9mIGl0cyBob2xlLiBBcmF0dXMsIG9uIHRoZSBvdGhlciBoYW5kLCBub3QgYnkgZm9yY2Ugb2YgYXJtcywgYnV0IGxlZ2FsbHkgYW5kIGluIGNvbnNlcXVlbmNlIG9mIGhpcyB2aXJ0dWVzLCBoYWQgaW52ZXN0ZWQgaGltc2VsZiB3aXRoIGFuIGVuZHVyaW5nIHBvd2VyLCBhbmQgeWV0IHdlbnQgYWJvdXQgaW4gb3JkaW5hcnkgdHVuaWMgYW5kIGNsb2FrOyBoZSBkZWNsYXJlZCBoaW1zZWxmIGEgcHVibGljIGZvZSBvZiBhbnkgYW5kIGV2ZXJ5IHR5cmFudDsgYW5kIGhlIGxlZnQgYmVoaW5kIGhpbSBhIHBvc3Rlcml0eSBvZiB0aGUgaGlnaGVzdCByZXB1dGUgYW1vbmcgdGhlIEdyZWVrcyBkb3duIHRvIHRoaXMgZGF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvZiB0aGUgbWVuIHdobyBzZWl6ZSBjaXRhZGVscywgbWFpbnRhaW4gc3BlYXJtZW4sIGFuZCBkZXBlbmQgdXBvbiBhcm1zIGFuZCBnYXRlcyBhbmQgdHJhcC1kb29ycyBmb3IgdGhlIHNhZmV0eSBvZiB0aGVpciBwZXJzb25zLCBvbmx5IGEgZmV3LCBsaWtlIHRpbW9yb3VzIGhhcmVzLCBoYXZlIGVzY2FwZWQgYSB2aW9sZW50IGRlYXRoOyB3aGlsZSBub3Qgb25lIG9mIHRoZW0gaGFzIGxlZnQgYSBob3VzZSwgb3IgYSBmYW1pbHksIG9yIGEgdG9tYiB0byBrZWVwIGhpcyBtZW1vcnkgaW4gaG9ub3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbnN0IEFyaXN0aXBwdXMsIHRoZW4sIGFuZCBpbiB0cnlpbmcgdG8gc2VpemUgQXJnb3MsIEFyYXR1cyBtYWRlIG1hbnkgb3BlbiBhbmQgc2VjcmV0IGF0dGVtcHRzIGluIHZhaW4uIE9uY2UgaGUgc2V0IHVwIHNjYWxpbmctbGFkZGVycywgYXQgZ3JlYXQgaGF6YXJkIGdvdCB1cG9uIHRoZSB3YWxsIHdpdGggYSBmZXcgZm9sbG93ZXJzLCBhbmQga2lsbGVkIHRoZSBzZW50cmllcyB0aGF0IGRlZmVuZGVkIHRoZSBwbGFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBkYXkgY2FtZSBhbmQgdGhlIHR5cmFudCBhdHRhY2tlZCBoaW0gZnJvbSBhbGwgc2lkZXMsIHdoaWxlIHRoZSBBcmdpdmVzLCBhcyB0aG91Z2ggaXQgd2VyZSBub3QgYSBiYXR0bGUgdG8gc2VjdXJlIHRoZWlyIGxpYmVydGllcywgYnV0IGEgY29udGVzdCBpbiB0aGUgTmVtZWFuIGdhbWVzIG9mIHdoaWNoIHRoZXkgd2VyZSB0aGUganVkZ2VzLCBzYXQgYXMganVzdCBhbmQgaW1wYXJ0aWFsIHNwZWN0YXRvcnMgb2Ygd2hhdCB3YXMgZ29pbmcgb24sIHdpdGhvdXQgbGlmdGluZyBhIGZpbmdlci4gQXJhdHVzLCBmaWdodGluZyBzdHVyZGlseSwgaGFkIGhpcyB0aGlnaCB0cmFuc2ZpeGVkIGJ5IGEgc3BlYXItdGhydXN0LCB5ZXQgaGVsZCBoaXMgZ3JvdW5kLCBhbmQgY291bGQgbm90IGJlIGRpc2xvZGdlZCBhdCBjbG9zZSBxdWFydGVycyB1bnRpbCBuaWdodCwgdGhvdWdoIGhhcmFzc2VkIGJ5IGhpcyBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgdGhyb3VnaCB0aGUgbmlnaHQgYWxzbyBoZSBoYWQgbWFpbnRhaW5lZCB0aGUgc3RydWdnbGUsIGhlIHdvdWxkIG5vdCBoYXZlIGZhaWxlZCBpbiBoaXMgYXR0ZW1wdDsgZm9yIHRoZSB0eXJhbnQgd2FzIGFscmVhZHkgYmVudCBvbiBmbGlnaHQgYW5kIGhhZCBzZW50IG9uIG1hbnkgb2YgaGlzIGdvb2RzIHRvIHRoZSBzZWEuIEFzIGl0IHdhcywgaG93ZXZlciwgbm8gb25lIHRvbGQgQXJhdHVzIG9mIHRoaXMsIGFuZCBzaW5jZSB3YXRlciB3YXMgZmFpbGluZyBoaW0gYW5kIGhlIGNvdWxkIG5vdCB1c2UgaGlzIHN0cmVuZ3RoIGJ5IHJlYXNvbiBvZiBoaXMgd291bmQsIGhlIGxlZCBoaXMgc29sZGllcnMgYXdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW5zdCBBcmlzdGlwcHVzLCB0aGVuLCBhbmQgaW4gdHJ5aW5nIHRvIHNlaXplIEFyZ29zLCBBcmF0dXMgbWFkZSBtYW55IG9wZW4gYW5kIHNlY3JldCBhdHRlbXB0cyBpbiB2YWluLiBPbmNlIGhlIHNldCB1cCBzY2FsaW5nLWxhZGRlcnMsIGF0IGdyZWF0IGhhemFyZCBnb3QgdXBvbiB0aGUgd2FsbCB3aXRoIGEgZmV3IGZvbGxvd2VycywgYW5kIGtpbGxlZCB0aGUgc2VudHJpZXMgdGhhdCBkZWZlbmRlZCB0aGUgcGxhY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gZGF5IGNhbWUgYW5kIHRoZSB0eXJhbnQgYXR0YWNrZWQgaGltIGZyb20gYWxsIHNpZGVzLCB3aGlsZSB0aGUgQXJnaXZlcywgYXMgdGhvdWdoIGl0IHdlcmUgbm90IGEgYmF0dGxlIHRvIHNlY3VyZSB0aGVpciBsaWJlcnRpZXMsIGJ1dCBhIGNvbnRlc3QgaW4gdGhlIE5lbWVhbiBnYW1lcyBvZiB3aGljaCB0aGV5IHdlcmUgdGhlIGp1ZGdlcywgc2F0IGFzIGp1c3QgYW5kIGltcGFydGlhbCBzcGVjdGF0b3JzIG9mIHdoYXQgd2FzIGdvaW5nIG9uLCB3aXRob3V0IGxpZnRpbmcgYSBmaW5nZXIuIEFyYXR1cywgZmlnaHRpbmcgc3R1cmRpbHksIGhhZCBoaXMgdGhpZ2ggdHJhbnNmaXhlZCBieSBhIHNwZWFyLXRocnVzdCwgeWV0IGhlbGQgaGlzIGdyb3VuZCwgYW5kIGNvdWxkIG5vdCBiZSBkaXNsb2RnZWQgYXQgY2xvc2UgcXVhcnRlcnMgdW50aWwgbmlnaHQsIHRob3VnaCBoYXJhc3NlZCBieSBoaXMgZW5lbWllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiB0aHJvdWdoIHRoZSBuaWdodCBhbHNvIGhlIGhhZCBtYWludGFpbmVkIHRoZSBzdHJ1Z2dsZSwgaGUgd291bGQgbm90IGhhdmUgZmFpbGVkIGluIGhpcyBhdHRlbXB0OyBmb3IgdGhlIHR5cmFudCB3YXMgYWxyZWFkeSBiZW50IG9uIGZsaWdodCBhbmQgaGFkIHNlbnQgb24gbWFueSBvZiBoaXMgZ29vZHMgdG8gdGhlIHNlYS4gQXMgaXQgd2FzLCBob3dldmVyLCBubyBvbmUgdG9sZCBBcmF0dXMgb2YgdGhpcywgYW5kIHNpbmNlIHdhdGVyIHdhcyBmYWlsaW5nIGhpbSBhbmQgaGUgY291bGQgbm90IHVzZSBoaXMgc3RyZW5ndGggYnkgcmVhc29uIG9mIGhpcyB3b3VuZCwgaGUgbGVkIGhpcyBzb2xkaWVycyBhd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBzaW5jZSBoZSBkZXNwYWlyZWQgb2Ygc3VjY2VzcyBpbiB0aGlzIHdheSwgaGUgb3Blbmx5IGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBBcmdvcyB3aXRoIGhpcyBhcm15IGFuZCByYXZhZ2VkIGl0OyBhbmQgaW4gYSBmaWVyY2UgYmF0dGxlIHdpdGggQXJpc3RpcHB1cyBhdCB0aGUgcml2ZXIgQ2hhcmVzLCBoZSB3YXMgYWNjdXNlZCBvZiBhYmFuZG9uaW5nIHRoZSBzdHJ1Z2dsZSBhbmQgdGhyb3dpbmcgYXdheSB0aGUgdmljdG9yeS4gRm9yIGFsdGhvdWdoIHRoZSByZXN0IG9mIGhpcyBmb3JjZXMgYWRtaXR0ZWRseSBoYWQgdGhlIHVwcGVyIGhhbmQgYW5kIGhhZCBnb25lIGZhciBvbiBhaGVhZCBpbiBwdXJzdWl0LCBoZSBoaW1zZWxmLCBub3Qgc28gbXVjaCBiZWNhdXNlIGhlIHdhcyBvdXN0ZWQgZnJvbSBoaXMgcG9zaXRpb24gYnkgaGlzIG9wcG9uZW50cywgYXMgb3V0IG9mIG1pc3RydXN0IG9mIHN1Y2Nlc3MgYW5kIGluIHV0dGVyIGZlYXIsIHdpdGhkcmV3IGluIGRpc29yZGVyIHRvIGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgcmVzdCBvZiBoaXMgYXJteSBjYW1lIGJhY2sgZnJvbSB0aGUgcHVyc3VpdCBhbmQgd2VyZSBpbmRpZ25hbnQgYmVjYXVzZSwgdGhvdWdoIHRoZXkgaGFkIHJvdXRlZCB0aGUgZW5lbXkgYW5kIHNsYWluIGZhciBtb3JlIG9mIHRoZW0gdGhhbiB0aGV5IGhhZCBsb3N0IG9mIHRoZWlyIG93biBudW1iZXIsIHRoZXkgaGFkIHN1ZmZlcmVkIHRoZSB2YW5xdWlzaGVkIHRvIGVyZWN0IGEgdHJvcGh5IG92ZXIgdGhlIHZpY3RvcnMsIEFyYXR1cyB3YXMgYXNoYW1lZCBhbmQgZGV0ZXJtaW5lZCBhZ2FpbiB0byBmaWdodCBvdXQgdGhlIHF1ZXN0aW9uIG9mIHRoZSB0cm9waHksIGFuZCBvbiB0aGUgbmV4dCBkYXkgYnV0IG9uZSBwdXQgaGlzIGFybXkgb25jZSBtb3JlIGluIGJhdHRsZSBhcnJheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gcGVyY2VpdmluZyB0aGF0IHRoZSBmb3JjZXMgb2YgdGhlIHR5cmFudCB3ZXJlIG1vcmUgbnVtZXJvdXMgdGhhbiBiZWZvcmUgYW5kIG1vcmUgY291cmFnZW91cyBpbiB0aGVpciByZXNpc3RhbmNlLCBoZSB3b3VsZCBub3QgdmVudHVyZSBhIGRlY2lzaXZlIGJhdHRsZSwgYnV0IHdpdGhkcmV3IGFmdGVyIGJlaW5nIGFsbG93ZWQgdG8gdGFrZSB1cCBoaXMgZGVhZCB1bmRlciBhIHRydWNlLiBOZXZlcnRoZWxlc3MsIGJ5IGhpcyBza2lsbCBpbiBkZWFsaW5nIHdpdGggbWVuIGFuZCBwdWJsaWMgYWZmYWlycywgYW5kIGJ5IHRoZSBmYXZvdXIgaW4gd2hpY2ggaGUgc3Rvb2QsIGhlIHJldHJpZXZlZCB0aGlzIGZhaWx1cmUsIGJyb3VnaHQgQ2xlb25hZSBpbnRvIHRoZSBBY2hhZWFuIExlYWd1ZSwgYW5kIGNlbGVicmF0ZWQgdGhlIE5lbWVhbiBnYW1lcyBpbiB0aGF0IGNpdHksIG9uIHRoZSBncm91bmQgdGhhdCBpdCBoYWQgYW4gYW5jaWVudCBhbmQgbW9yZSBmaXR0aW5nIGNsYWltIHVwb24gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBnYW1lcyB3ZXJlIGFsc28gY2VsZWJyYXRlZCBhdCBBcmdvcywgYW5kIHRoZW4gZm9yIHRoZSBmaXJzdCB0aW1lIHRoZSBwcml2aWxlZ2Ugb2YgYXN5bHVtIGFuZCBzYWZlLWNvbmR1Y3Qgd2hpY2ggaGFkIGJlZW4gZ3JhbnRlZCB0byBjb250ZXN0YW50cyBpbiB0aGUgZ2FtZXMgd2FzIHZpb2xhdGVkLCBzaW5jZSB0aGUgQWNoYWVhbnMgdHJlYXRlZCBhcyBlbmVtaWVzIGFuZCBzb2xkIGludG8gc2xhdmVyeSBhbGwgY29udGVzdGFudHMgaW4gdGhlIGdhbWVzIGF0IEFyZ29zIHdob20gdGhleSBjYXVnaHQgdHJhdmVsbGluZyB0aHJvdWdoIHRoZWlyIHRlcnJpdG9yeS4gU28gZmllcmNlIGFuZCBpbXBsYWNhYmxlIHdhcyBBcmF0dXMgaW4gaGlzIGhhdHJlZCBvZiB0eXJhbnRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgc2luY2UgaGUgZGVzcGFpcmVkIG9mIHN1Y2Nlc3MgaW4gdGhpcyB3YXksIGhlIG9wZW5seSBpbnZhZGVkIHRoZSB0ZXJyaXRvcnkgb2YgQXJnb3Mgd2l0aCBoaXMgYXJteSBhbmQgcmF2YWdlZCBpdDsgYW5kIGluIGEgZmllcmNlIGJhdHRsZSB3aXRoIEFyaXN0aXBwdXMgYXQgdGhlIHJpdmVyIENoYXJlcywgaGUgd2FzIGFjY3VzZWQgb2YgYWJhbmRvbmluZyB0aGUgc3RydWdnbGUgYW5kIHRocm93aW5nIGF3YXkgdGhlIHZpY3RvcnkuIEZvciBhbHRob3VnaCB0aGUgcmVzdCBvZiBoaXMgZm9yY2VzIGFkbWl0dGVkbHkgaGFkIHRoZSB1cHBlciBoYW5kIGFuZCBoYWQgZ29uZSBmYXIgb24gYWhlYWQgaW4gcHVyc3VpdCwgaGUgaGltc2VsZiwgbm90IHNvIG11Y2ggYmVjYXVzZSBoZSB3YXMgb3VzdGVkIGZyb20gaGlzIHBvc2l0aW9uIGJ5IGhpcyBvcHBvbmVudHMsIGFzIG91dCBvZiBtaXN0cnVzdCBvZiBzdWNjZXNzIGFuZCBpbiB1dHRlciBmZWFyLCB3aXRoZHJldyBpbiBkaXNvcmRlciB0byBoaXMgY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSByZXN0IG9mIGhpcyBhcm15IGNhbWUgYmFjayBmcm9tIHRoZSBwdXJzdWl0IGFuZCB3ZXJlIGluZGlnbmFudCBiZWNhdXNlLCB0aG91Z2ggdGhleSBoYWQgcm91dGVkIHRoZSBlbmVteSBhbmQgc2xhaW4gZmFyIG1vcmUgb2YgdGhlbSB0aGFuIHRoZXkgaGFkIGxvc3Qgb2YgdGhlaXIgb3duIG51bWJlciwgdGhleSBoYWQgc3VmZmVyZWQgdGhlIHZhbnF1aXNoZWQgdG8gZXJlY3QgYSB0cm9waHkgb3ZlciB0aGUgdmljdG9ycywgQXJhdHVzIHdhcyBhc2hhbWVkIGFuZCBkZXRlcm1pbmVkIGFnYWluIHRvIGZpZ2h0IG91dCB0aGUgcXVlc3Rpb24gb2YgdGhlIHRyb3BoeSwgYW5kIG9uIHRoZSBuZXh0IGRheSBidXQgb25lIHB1dCBoaXMgYXJteSBvbmNlIG1vcmUgaW4gYmF0dGxlIGFycmF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG9uIHBlcmNlaXZpbmcgdGhhdCB0aGUgZm9yY2VzIG9mIHRoZSB0eXJhbnQgd2VyZSBtb3JlIG51bWVyb3VzIHRoYW4gYmVmb3JlIGFuZCBtb3JlIGNvdXJhZ2VvdXMgaW4gdGhlaXIgcmVzaXN0YW5jZSwgaGUgd291bGQgbm90IHZlbnR1cmUgYSBkZWNpc2l2ZSBiYXR0bGUsIGJ1dCB3aXRoZHJldyBhZnRlciBiZWluZyBhbGxvd2VkIHRvIHRha2UgdXAgaGlzIGRlYWQgdW5kZXIgYSB0cnVjZS4gTmV2ZXJ0aGVsZXNzLCBieSBoaXMgc2tpbGwgaW4gZGVhbGluZyB3aXRoIG1lbiBhbmQgcHVibGljIGFmZmFpcnMsIGFuZCBieSB0aGUgZmF2b3VyIGluIHdoaWNoIGhlIHN0b29kLCBoZSByZXRyaWV2ZWQgdGhpcyBmYWlsdXJlLCBicm91Z2h0IENsZW9uYWUgaW50byB0aGUgQWNoYWVhbiBMZWFndWUsIGFuZCBjZWxlYnJhdGVkIHRoZSBOZW1lYW4gZ2FtZXMgaW4gdGhhdCBjaXR5LCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgaGFkIGFuIGFuY2llbnQgYW5kIG1vcmUgZml0dGluZyBjbGFpbSB1cG9uIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZ2FtZXMgd2VyZSBhbHNvIGNlbGVicmF0ZWQgYXQgQXJnb3MsIGFuZCB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSB0aGUgcHJpdmlsZWdlIG9mIGFzeWx1bSBhbmQgc2FmZS1jb25kdWN0IHdoaWNoIGhhZCBiZWVuIGdyYW50ZWQgdG8gY29udGVzdGFudHMgaW4gdGhlIGdhbWVzIHdhcyB2aW9sYXRlZCwgc2luY2UgdGhlIEFjaGFlYW5zIHRyZWF0ZWQgYXMgZW5lbWllcyBhbmQgc29sZCBpbnRvIHNsYXZlcnkgYWxsIGNvbnRlc3RhbnRzIGluIHRoZSBnYW1lcyBhdCBBcmdvcyB3aG9tIHRoZXkgY2F1Z2h0IHRyYXZlbGxpbmcgdGhyb3VnaCB0aGVpciB0ZXJyaXRvcnkuIFNvIGZpZXJjZSBhbmQgaW1wbGFjYWJsZSB3YXMgQXJhdHVzIGluIGhpcyBoYXRyZWQgb2YgdHlyYW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBsaXR0bGUgd2hpbGUgYWZ0ZXIgdGhpcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BZnRlciB0aGUgZXZlbnRzIG5hcnJhdGVkIGluIHh4eGl2LiBmZi48L25vdGU+IEFyYXR1cyBoZWFyZCB0aGF0IEFyaXN0aXBwdXMgd2FzIHBsb3R0aW5nIGFnYWluc3QgQ2xlb25hZSwgYnV0IGZlYXJlZCB0byBhdHRhY2sgaXQgd2hpbGUgaGlzIGVuZW15IHdhcyBwb3N0ZWQgYXQgQ29yaW50aDsgaGUgdGhlcmVmb3JlIGFzc2VtYmxlZCBhbiBhcm15IGJ5IHB1YmxpYyBwcm9jbGFtYXRpb24uIEFuZCBhZnRlciBvcmRlcmluZyBoaXMgdHJvb3BzIHRvIGNhcnJ5IHByb3Zpc2lvbnMgZm9yIHNldmVyYWwgZGF5cywgaGUgbWFyY2hlZCBkb3duIHRvIENlbmNocmVhZSwgYnkgdGhpcyBzdHJhdGFnZW0gaW52aXRpbmcgQXJpc3RpcHB1cyB0byBhdHRhY2sgQ2xlb25hZSBpbiB0aGUgYmVsaWVmIHRoYXQgaGlzIGVuZW15IHdhcyByaW90IGF0IGhhbmQ7IGFuZCB0aGlzIHdhcyBhY3R1YWxseSB3aGF0IGhhcHBlbmVkLiBGb3IgdGhlIHR5cmFudCBzZXQgb3V0IGF0IG9uY2UgZnJvbSBBcmdvcyB3aXRoIGhpcyBmb3JjZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmF0dXMsIHJldHVybmluZyBmcm9tIENlbmNocmVhZSB0byBDb3JpbnRoIGFzIHNvb24gYXMgaXQgd2FzIGRhcmssIGFuZCBwb3N0aW5nIGd1YXJkcyBhbG9uZyBhbGwgdGhlIHJvYWRzLCBsZWQgaGlzIEFjaGFlYW5zIHRvd2FyZHMgQ2xlb25hZSwgYW5kIHRoZXkgZm9sbG93ZWQgaGltIGluIHN1Y2ggZ29vZCBvcmRlciBhbmQgd2l0aCBzdWNoIHN3aWZ0bmVzcyBhbmQgYWxhY3JpdHkgdGhhdCBub3Qgb25seSB3aGlsZSB0aGV5IHdlcmUgb24gdGhlIG1hcmNoLCBidXQgYWxzbyB3aGVuIHRoZXkgaGFkIGdvdCBpbnRvIENsZW9uYWUsIGJlZm9yZSB0aGUgbmlnaHQgd2FzIG92ZXIsIGFuZCBoYWQgYXJyYXllZCB0aGVtc2VsdmVzIGZvciBiYXR0bGUsIEFyaXN0aXBwdXMga25ldyBub3RoaW5nIGF0IGFsbCBvZiBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYXQgZGF5YnJlYWssIHRoZSBnYXRlcyB3ZXJlIHRocm93biBvcGVuLCB0aGUgdHJ1bXBldCBnYXZlIGl0cyBsb3VkIHNpZ25hbCwgYW5kIGRhc2hpbmcgYXQgYSBydW4gYW5kIHdpdGggc2hvdXRzIHVwb24gdGhlIGVuZW15IEFyYXR1cyByb3V0ZWQgdGhlbSBhdCBvbmNlLCBhbmQga2VwdCBvbiBwdXJzdWluZyB3aGVyZSBoZSBtb3N0IHN1c3BlY3RlZCB0aGF0IEFyaXN0aXBwdXMgd2FzIGluIGZsaWdodCwgdGhlIGNvdW50cnkgaGF2aW5nIG1hbnkgZGl2ZXJnaW5nIHJvdXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHB1cnN1aXQgY29udGludWVkIGFzIGZhciBhcyBNeWNlbmFlLCB3aGVyZSB0aGUgdHlyYW50IHdhcyBvdmVydGFrZW4gYW5kIHNsYWluIGJ5IGEgY2VydGFpbiBDcmV0YW4gbmFtZWQgVHJhZ2lzY3VzLCBhcyBEZWluaWFzIHJlbGF0ZXM7IGFuZCBiZXNpZGVzIGhpbSB0aGVyZSBmZWxsIG92ZXIgZmlmdGVlbiBodW5kcmVkLiBCdXQgYWx0aG91Z2ggQXJhdHVzIGhhZCB3b24gc28gYnJpbGxpYW50IGEgc3VjY2VzcywgYW5kIGhhZCBsb3N0IG5vdCBhIHNpbmdsZSBvbmUgb2YgaGlzIG93biBzb2xkaWVycywgaGUgbmV2ZXJ0aGVsZXNzIGRpZCBub3QgdGFrZSBBcmdvcyBub3Igc2V0IGl0IGZyZWUsIHNpbmNlIEFnaWFzIGFuZCB0aGUgeW91bmdlciBBcmlzdG9tYWNodXMgYnVyc3QgaW50byB0aGUgY2l0eSB3aXRoIHRyb29wcyBvZiB0aGUga2luZyBhbmQgdG9vayBjb250cm9sIG9mIGFmZmFpcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBsaXR0bGUgd2hpbGUgYWZ0ZXIgdGhpcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFmdGVyIHRoZSBldmVudHMgbmFycmF0ZWQgaW4geHh4aXYuIGZmLjwvbm90ZT4gQXJhdHVzIGhlYXJkIHRoYXQgQXJpc3RpcHB1cyB3YXMgcGxvdHRpbmcgYWdhaW5zdCBDbGVvbmFlLCBidXQgZmVhcmVkIHRvIGF0dGFjayBpdCB3aGlsZSBoaXMgZW5lbXkgd2FzIHBvc3RlZCBhdCBDb3JpbnRoOyBoZSB0aGVyZWZvcmUgYXNzZW1ibGVkIGFuIGFybXkgYnkgcHVibGljIHByb2NsYW1hdGlvbi4gQW5kIGFmdGVyIG9yZGVyaW5nIGhpcyB0cm9vcHMgdG8gY2FycnkgcHJvdmlzaW9ucyBmb3Igc2V2ZXJhbCBkYXlzLCBoZSBtYXJjaGVkIGRvd24gdG8gQ2VuY2hyZWFlLCBieSB0aGlzIHN0cmF0YWdlbSBpbnZpdGluZyBBcmlzdGlwcHVzIHRvIGF0dGFjayBDbGVvbmFlIGluIHRoZSBiZWxpZWYgdGhhdCBoaXMgZW5lbXkgd2FzIHJpb3QgYXQgaGFuZDsgYW5kIHRoaXMgd2FzIGFjdHVhbGx5IHdoYXQgaGFwcGVuZWQuIEZvciB0aGUgdHlyYW50IHNldCBvdXQgYXQgb25jZSBmcm9tIEFyZ29zIHdpdGggaGlzIGZvcmNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmF0dXMsIHJldHVybmluZyBmcm9tIENlbmNocmVhZSB0byBDb3JpbnRoIGFzIHNvb24gYXMgaXQgd2FzIGRhcmssIGFuZCBwb3N0aW5nIGd1YXJkcyBhbG9uZyBhbGwgdGhlIHJvYWRzLCBsZWQgaGlzIEFjaGFlYW5zIHRvd2FyZHMgQ2xlb25hZSwgYW5kIHRoZXkgZm9sbG93ZWQgaGltIGluIHN1Y2ggZ29vZCBvcmRlciBhbmQgd2l0aCBzdWNoIHN3aWZ0bmVzcyBhbmQgYWxhY3JpdHkgdGhhdCBub3Qgb25seSB3aGlsZSB0aGV5IHdlcmUgb24gdGhlIG1hcmNoLCBidXQgYWxzbyB3aGVuIHRoZXkgaGFkIGdvdCBpbnRvIENsZW9uYWUsIGJlZm9yZSB0aGUgbmlnaHQgd2FzIG92ZXIsIGFuZCBoYWQgYXJyYXllZCB0aGVtc2VsdmVzIGZvciBiYXR0bGUsIEFyaXN0aXBwdXMga25ldyBub3RoaW5nIGF0IGFsbCBvZiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGF0IGRheWJyZWFrLCB0aGUgZ2F0ZXMgd2VyZSB0aHJvd24gb3BlbiwgdGhlIHRydW1wZXQgZ2F2ZSBpdHMgbG91ZCBzaWduYWwsIGFuZCBkYXNoaW5nIGF0IGEgcnVuIGFuZCB3aXRoIHNob3V0cyB1cG9uIHRoZSBlbmVteSBBcmF0dXMgcm91dGVkIHRoZW0gYXQgb25jZSwgYW5kIGtlcHQgb24gcHVyc3Vpbmcgd2hlcmUgaGUgbW9zdCBzdXNwZWN0ZWQgdGhhdCBBcmlzdGlwcHVzIHdhcyBpbiBmbGlnaHQsIHRoZSBjb3VudHJ5IGhhdmluZyBtYW55IGRpdmVyZ2luZyByb3V0ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwdXJzdWl0IGNvbnRpbnVlZCBhcyBmYXIgYXMgTXljZW5hZSwgd2hlcmUgdGhlIHR5cmFudCB3YXMgb3ZlcnRha2VuIGFuZCBzbGFpbiBieSBhIGNlcnRhaW4gQ3JldGFuIG5hbWVkIFRyYWdpc2N1cywgYXMgRGVpbmlhcyByZWxhdGVzOyBhbmQgYmVzaWRlcyBoaW0gdGhlcmUgZmVsbCBvdmVyIGZpZnRlZW4gaHVuZHJlZC4gQnV0IGFsdGhvdWdoIEFyYXR1cyBoYWQgd29uIHNvIGJyaWxsaWFudCBhIHN1Y2Nlc3MsIGFuZCBoYWQgbG9zdCBub3QgYSBzaW5nbGUgb25lIG9mIGhpcyBvd24gc29sZGllcnMsIGhlIG5ldmVydGhlbGVzcyBkaWQgbm90IHRha2UgQXJnb3Mgbm9yIHNldCBpdCBmcmVlLCBzaW5jZSBBZ2lhcyBhbmQgdGhlIHlvdW5nZXIgQXJpc3RvbWFjaHVzIGJ1cnN0IGludG8gdGhlIGNpdHkgd2l0aCB0cm9vcHMgb2YgdGhlIGtpbmcgYW5kIHRvb2sgY29udHJvbCBvZiBhZmZhaXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHN1Y2Nlc3MsIHRoZW4sIHJlZnV0ZWQgbXVjaCBvZiB0aGUgY2FsdW1ueSBoZWFwZWQgdXBvbiBBcmF0dXMsIGFzIHdlbGwgYXMgdGhlIHNjb2ZmaW5nIGFuZCBhYnVzaXZlIHN0b3JpZXMgb2YgdGhlIGZsYXR0ZXJlcnMgb2YgdGhlIHR5cmFudHMsIHdobyB3b3VsZCByZWNvdW50LCB0byBwbGVhc2UgdGhlaXIgbWFzdGVycywgaG93IHRoZSBnZW5lcmFsIG9mIHRoZSBBY2hhZWFucyBhbHdheXMgaGFkIGNyYW1wcyBpbiB0aGUgYm93ZWxzIHdoZW4gYSBiYXR0bGUgd2FzIGltbWluZW50LCBhbmQgaG93IHRvcnBvciBhbmQgZGl6emluZXNzIHdvdWxkIHNlaXplIGhpbSBhcyBzb29uIGFzIHRoZSB0cnVtcGV0ZXIgc3Rvb2QgYnkgdG8gZ2l2ZSB0aGUgc2lnbmFsLCBhbmQgaG93LCBhZnRlciBoZSBoYWQgZHJhd24gdXAgaGlzIGZvcmNlcyBhbmQgcGFzc2VkIHRoZSB3YXRjaHdvcmQgYWxvbmcsIGhlIHdvdWxkIGFzayBoaXMgbGlldXRlbmFudHMgYW5kIGNhcHRhaW5zIHdoZXRoZXIgdGhlcmUgd2FzIGFueSBmdXJ0aGVyIG5lZWQgb2YgaGlzIHByZXNlbmNlIChzaW5jZSB0aGUgZGllIHdhcyBhbHJlYWR5IGNhc3QpLCBhbmQgdGhlbiBnbyBvZmYgdG8gYXdhaXQgdGhlIGlzc3VlIGFueGlvdXNseSBhdCBhIGRpc3RhbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlc2Ugc3RvcmllcyB3ZXJlIHNvIHByZXZhbGVudCB0aGF0IGV2ZW4gaW4gdGhlIHNjaG9vbHMgb2YgcGhpbG9zb3BoeSwgd2hlbiB0aGUgcXVlcnkgYXJpc2VzIHdoZXRoZXIgcGFscGl0YXRpb24gb2YgdGhlIGhlYXJ0IGFuZCBjaGFuZ2Ugb2YgY29sb3VyIGFuZCBsb29zZW5lc3Mgb2YgdGhlIGJvd2VscywgaW4gdGhlIHByZXNlbmNlIG9mIHNlZW1pbmcgcGVyaWwsIGFyZSB0aGUgbWFyayBvZiBjb3dhcmRpY2UsIG9yIG9mIHNvbWUgZmF1bHR5IHRlbXBlcmFtZW50IGFuZCBjaGlsbGluZXNzIGluIHRoZSBib2R5LCBBcmF0dXMgaXMgYWx3YXlzIG1lbnRpb25lZCBieSBuYW1lIGFzIG9uZSB3aG8gd2FzIGEgZ29vZCBnZW5lcmFsLCBidXQgYWx3YXlzIGhhZCB0aGVzZSBzeW1wdG9tcyB3aGVuIGEgY29udGVzdCB3YXMgaW1wZW5kaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3VjY2VzcywgdGhlbiwgcmVmdXRlZCBtdWNoIG9mIHRoZSBjYWx1bW55IGhlYXBlZCB1cG9uIEFyYXR1cywgYXMgd2VsbCBhcyB0aGUgc2NvZmZpbmcgYW5kIGFidXNpdmUgc3RvcmllcyBvZiB0aGUgZmxhdHRlcmVycyBvZiB0aGUgdHlyYW50cywgd2hvIHdvdWxkIHJlY291bnQsIHRvIHBsZWFzZSB0aGVpciBtYXN0ZXJzLCBob3cgdGhlIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zIGFsd2F5cyBoYWQgY3JhbXBzIGluIHRoZSBib3dlbHMgd2hlbiBhIGJhdHRsZSB3YXMgaW1taW5lbnQsIGFuZCBob3cgdG9ycG9yIGFuZCBkaXp6aW5lc3Mgd291bGQgc2VpemUgaGltIGFzIHNvb24gYXMgdGhlIHRydW1wZXRlciBzdG9vZCBieSB0byBnaXZlIHRoZSBzaWduYWwsIGFuZCBob3csIGFmdGVyIGhlIGhhZCBkcmF3biB1cCBoaXMgZm9yY2VzIGFuZCBwYXNzZWQgdGhlIHdhdGNod29yZCBhbG9uZywgaGUgd291bGQgYXNrIGhpcyBsaWV1dGVuYW50cyBhbmQgY2FwdGFpbnMgd2hldGhlciB0aGVyZSB3YXMgYW55IGZ1cnRoZXIgbmVlZCBvZiBoaXMgcHJlc2VuY2UgKHNpbmNlIHRoZSBkaWUgd2FzIGFscmVhZHkgY2FzdCksIGFuZCB0aGVuIGdvIG9mZiB0byBhd2FpdCB0aGUgaXNzdWUgYW54aW91c2x5IGF0IGEgZGlzdGFuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBzdG9yaWVzIHdlcmUgc28gcHJldmFsZW50IHRoYXQgZXZlbiBpbiB0aGUgc2Nob29scyBvZiBwaGlsb3NvcGh5LCB3aGVuIHRoZSBxdWVyeSBhcmlzZXMgd2hldGhlciBwYWxwaXRhdGlvbiBvZiB0aGUgaGVhcnQgYW5kIGNoYW5nZSBvZiBjb2xvdXIgYW5kIGxvb3NlbmVzcyBvZiB0aGUgYm93ZWxzLCBpbiB0aGUgcHJlc2VuY2Ugb2Ygc2VlbWluZyBwZXJpbCwgYXJlIHRoZSBtYXJrIG9mIGNvd2FyZGljZSwgb3Igb2Ygc29tZSBmYXVsdHkgdGVtcGVyYW1lbnQgYW5kIGNoaWxsaW5lc3MgaW4gdGhlIGJvZHksIEFyYXR1cyBpcyBhbHdheXMgbWVudGlvbmVkIGJ5IG5hbWUgYXMgb25lIHdobyB3YXMgYSBnb29kIGdlbmVyYWwsIGJ1dCBhbHdheXMgaGFkIHRoZXNlIHN5bXB0b21zIHdoZW4gYSBjb250ZXN0IHdhcyBpbXBlbmRpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aHVzIG1hZGUgYXdheSB3aXRoIEFyaXN0aXBwdXMsIEFyYXR1cyBhdCBvbmNlIGJlZ2FuIHRvIHBsb3QgYWdhaW5zdCBMeWRpYWRlcywgd2hvIHdhcyB0eXJhbnQgaW4gaGlzIG5hdGl2ZSBjaXR5IG9mIE1lZ2Fsb3BvbGlzLiBUaGlzIEx5ZGlhZGVzIHdhcyBuZWl0aGVyIG9mIG1lYW4gYmlydGggbm9yIG5hdHVyYWxseSBsYWNraW5nIGluIGhpZ2ggYW1iaXRpb24sIG5vciwgbGlrZSBtb3N0IHNvbGUgcnVsZXJzLCBoYWQgaGUgYmVlbiBkcml2ZW4gYnkgbGljZW5jZSBhbmQgcmFwYWNpdHkgaW50byB0aGlzIGluaXF1aXR5LCBidXQgaGUgaGFkIGJlZW4gZmlyZWQgd2l0aCBhIGxvdmUgb2YgZ2xvcnkgd2hpbGUgc3RpbGwgeW91bmcsIGFuZCBoYWQgdGhvdWdodGxlc3NseSBhc3NvY2lhdGVkIHdpdGggaGlzIGhpZ2ggc3Bpcml0IHRoZSBmYWxzZSBhbmQgZW1wdHkgZG9jdHJpbmVzIGN1cnJlbnQgY29uY2VybmluZyB0eXJhbm55LCB0byB0aGUgZWZmZWN0IHRoYXQgaXQgd2FzIGEgd29uZGVyZnVsIGFuZCBibGVzc2VkIHRoaW5nLiBBbmQgbm93IHRoYXQgaGUgaGFkIG1hZGUgaGltc2VsZiB0eXJhbnQsIGhlIHdhcyBxdWlja2x5IHNhdGVkIHdpdGggdGhlIGJ1cmRlbnMgd2hpY2ggZGV2b2x2ZSB1cG9uIHRoZSBzb2xlIHJ1bGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIGF0IG9uY2UgZW52eWluZyB0aGUgc3VjY2Vzc2VzIG9mIEFyYXR1cyBhbmQgZmVhcmluZyBoaXMgcGxvdHMsIGhlIGFkb3B0ZWQgYSBuZXcgYW5kIG1vc3QgYWRtaXJhYmxlIHBsYW4sIGZpcnN0LCB0byBmcmVlIGhpbXNlbGYgZnJvbSBoYXRyZWQgYW5kIGZlYXIgYW5kIGd1YXJkcyBhbmQgc3BlYXJtZW4sIGFuZCBzZWNvbmQsIHRvIGJlY29tZSBhIGJlbmVmYWN0b3Igb2YgaGlzIG5hdGl2ZSBjaXR5LiBTbyBoZSBzZW50IGZvciBBcmF0dXMsIHJlc2lnbmVkIGhpcyBwb3dlciwgYW5kIG1hZGUgaGlzIGNpdHkgYSBtZW1iZXIgb2YgdGhlIEFjaGFlYW4gTGVhZ3VlLiBXaGVyZWZvcmUgdGhlIEFjaGFlYW5zIGV4YWx0ZWQgaGltIGFuZCBjaG9zZSBoaW0gZ2VuZXJhbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRodXMgbWFkZSBhd2F5IHdpdGggQXJpc3RpcHB1cywgQXJhdHVzIGF0IG9uY2UgYmVnYW4gdG8gcGxvdCBhZ2FpbnN0IEx5ZGlhZGVzLCB3aG8gd2FzIHR5cmFudCBpbiBoaXMgbmF0aXZlIGNpdHkgb2YgTWVnYWxvcG9saXMuIFRoaXMgTHlkaWFkZXMgd2FzIG5laXRoZXIgb2YgbWVhbiBiaXJ0aCBub3IgbmF0dXJhbGx5IGxhY2tpbmcgaW4gaGlnaCBhbWJpdGlvbiwgbm9yLCBsaWtlIG1vc3Qgc29sZSBydWxlcnMsIGhhZCBoZSBiZWVuIGRyaXZlbiBieSBsaWNlbmNlIGFuZCByYXBhY2l0eSBpbnRvIHRoaXMgaW5pcXVpdHksIGJ1dCBoZSBoYWQgYmVlbiBmaXJlZCB3aXRoIGEgbG92ZSBvZiBnbG9yeSB3aGlsZSBzdGlsbCB5b3VuZywgYW5kIGhhZCB0aG91Z2h0bGVzc2x5IGFzc29jaWF0ZWQgd2l0aCBoaXMgaGlnaCBzcGlyaXQgdGhlIGZhbHNlIGFuZCBlbXB0eSBkb2N0cmluZXMgY3VycmVudCBjb25jZXJuaW5nIHR5cmFubnksIHRvIHRoZSBlZmZlY3QgdGhhdCBpdCB3YXMgYSB3b25kZXJmdWwgYW5kIGJsZXNzZWQgdGhpbmcuIEFuZCBub3cgdGhhdCBoZSBoYWQgbWFkZSBoaW1zZWxmIHR5cmFudCwgaGUgd2FzIHF1aWNrbHkgc2F0ZWQgd2l0aCB0aGUgYnVyZGVucyB3aGljaCBkZXZvbHZlIHVwb24gdGhlIHNvbGUgcnVsZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYXQgb25jZSBlbnZ5aW5nIHRoZSBzdWNjZXNzZXMgb2YgQXJhdHVzIGFuZCBmZWFyaW5nIGhpcyBwbG90cywgaGUgYWRvcHRlZCBhIG5ldyBhbmQgbW9zdCBhZG1pcmFibGUgcGxhbiwgZmlyc3QsIHRvIGZyZWUgaGltc2VsZiBmcm9tIGhhdHJlZCBhbmQgZmVhciBhbmQgZ3VhcmRzIGFuZCBzcGVhcm1lbiwgYW5kIHNlY29uZCwgdG8gYmVjb21lIGEgYmVuZWZhY3RvciBvZiBoaXMgbmF0aXZlIGNpdHkuIFNvIGhlIHNlbnQgZm9yIEFyYXR1cywgcmVzaWduZWQgaGlzIHBvd2VyLCBhbmQgbWFkZSBoaXMgY2l0eSBhIG1lbWJlciBvZiB0aGUgQWNoYWVhbiBMZWFndWUuIFdoZXJlZm9yZSB0aGUgQWNoYWVhbnMgZXhhbHRlZCBoaW0gYW5kIGNob3NlIGhpbSBnZW5lcmFsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5MeWRpYWRlcyB3YXMgYXQgb25jZSBhbWJpdGlvdXMgdG8gc3VycGFzcyBBcmF0dXMgaW4gcmVwdXRhdGlvbiwgYW5kIG5vdCBvbmx5IGRpZCBtYW55IG90aGVyIHRoaW5ncyB3aGljaCB3ZXJlIHRob3VnaHQgdW5uZWNlc3NhcnksIGJ1dCBhbHNvIHByb2NsYWltZWQgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBMYWNlZGFlbW9uaWFucy4gQXJhdHVzIG9wcG9zZWQgaGltLCBidXQgd2FzIHRob3VnaHQgdG8gZG8gc28gb3V0IG9mIGplYWxvdXN5OyBhbmQgTHlkaWFkZXMgd2FzIGNob3NlbiBnZW5lcmFsIGZvciB0aGUgc2Vjb25kIHRpbWUsIHRob3VnaCBBcmF0dXMgb3Blbmx5IHdvcmtlZCBhZ2FpbnN0IGhpbSBhbmQgd2FzIGVhZ2VyIHRvIGhhdmUgdGhlIG9mZmljZSBnaXZlbiB0byBzb21lb25lIGVsc2UuIEZvciBBcmF0dXMgaGltc2VsZiwgYXMgSSBoYXZlIHNhaWQsIGhlbGQgdGhlIG9mZmljZSBldmVyeSBvdGhlciB5ZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdW50aWwgaGUgd2FzIGdlbmVyYWwgZm9yIHRoZSB0aGlyZCB0aW1lLCBMeWRpYWRlcyBjb250aW51ZWQgdG8gYmUgaGVsZCBpbiBmYXZvdXIsIGFuZCBoZWxkIHRoZSBvZmZpY2UgZXZlcnkgb3RoZXIgeWVhciBpbiBhbHRlcm5hdGlvbiB3aXRoIEFyYXR1czsgYnV0IGFmdGVyIGRpc3BsYXlpbmcgYW4gb3BlbiBlbm1pdHkgdG8gaGltIGFuZCBmcmVxdWVudGx5IGRlbm91bmNpbmcgaGltIGJlZm9yZSB0aGUgQWNoYWVhbnMsIGhlIHdhcyBjYXN0IGFzaWRlIGFuZCBpZ25vcmVkLCBzaW5jZSBpdCB3YXMgYXBwYXJlbnQgdGhhdCBoZSB3YXMgY29udGVuZGluZywgd2l0aCBhIGZpY3RpdGlvdXMgY2hhcmFjdGVyLCBhZ2FpbnN0IGEgZ2VudWluZSBhbmQgdW5hZHVsdGVyYXRlZCB2aXJ0dWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBqdXN0IGFzIHRoZSBjdWNrb28sIGluIHRoZSBmYWJsZSBvZiBBZXNvcCwgd2hlbiBoZSBhc2tzIHRoZSBsaXR0bGUgYmlyZHMgd2h5IHRoZXkgZmx5IGF3YXkgZnJvbSBoaW0sIGlzIHRvbGQgYnkgdGhlbSB0aGF0IGhlIHdpbGwgb25lIGRheSBiZSBhIGhhd2ssIHNvIGl0IHdvdWxkIHNlZW0gdGhhdCBzaW5jZSBMeWRpYWRlcyBoYWQgb25jZSBiZWVuIGEgdHlyYW50IGhlIHdhcyBuZXZlciBmcmVlIGZyb20gYSBzdXNwaWNpb24sIHdoaWNoIGRpZCBpbmp1c3RpY2UgdG8gaGlzIHJlYWwgbmF0dXJlLCB0aGF0IGhlIHdvdWxkIGNoYW5nZSBhZ2Fpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkx5ZGlhZGVzIHdhcyBhdCBvbmNlIGFtYml0aW91cyB0byBzdXJwYXNzIEFyYXR1cyBpbiByZXB1dGF0aW9uLCBhbmQgbm90IG9ubHkgZGlkIG1hbnkgb3RoZXIgdGhpbmdzIHdoaWNoIHdlcmUgdGhvdWdodCB1bm5lY2Vzc2FyeSwgYnV0IGFsc28gcHJvY2xhaW1lZCBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW5zLiBBcmF0dXMgb3Bwb3NlZCBoaW0sIGJ1dCB3YXMgdGhvdWdodCB0byBkbyBzbyBvdXQgb2YgamVhbG91c3k7IGFuZCBMeWRpYWRlcyB3YXMgY2hvc2VuIGdlbmVyYWwgZm9yIHRoZSBzZWNvbmQgdGltZSwgdGhvdWdoIEFyYXR1cyBvcGVubHkgd29ya2VkIGFnYWluc3QgaGltIGFuZCB3YXMgZWFnZXIgdG8gaGF2ZSB0aGUgb2ZmaWNlIGdpdmVuIHRvIHNvbWVvbmUgZWxzZS4gRm9yIEFyYXR1cyBoaW1zZWxmLCBhcyBJIGhhdmUgc2FpZCwgaGVsZCB0aGUgb2ZmaWNlIGV2ZXJ5IG90aGVyIHllYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB1bnRpbCBoZSB3YXMgZ2VuZXJhbCBmb3IgdGhlIHRoaXJkIHRpbWUsIEx5ZGlhZGVzIGNvbnRpbnVlZCB0byBiZSBoZWxkIGluIGZhdm91ciwgYW5kIGhlbGQgdGhlIG9mZmljZSBldmVyeSBvdGhlciB5ZWFyIGluIGFsdGVybmF0aW9uIHdpdGggQXJhdHVzOyBidXQgYWZ0ZXIgZGlzcGxheWluZyBhbiBvcGVuIGVubWl0eSB0byBoaW0gYW5kIGZyZXF1ZW50bHkgZGVub3VuY2luZyBoaW0gYmVmb3JlIHRoZSBBY2hhZWFucywgaGUgd2FzIGNhc3QgYXNpZGUgYW5kIGlnbm9yZWQsIHNpbmNlIGl0IHdhcyBhcHBhcmVudCB0aGF0IGhlIHdhcyBjb250ZW5kaW5nLCB3aXRoIGEgZmljdGl0aW91cyBjaGFyYWN0ZXIsIGFnYWluc3QgYSBnZW51aW5lIGFuZCB1bmFkdWx0ZXJhdGVkIHZpcnR1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBqdXN0IGFzIHRoZSBjdWNrb28sIGluIHRoZSBmYWJsZSBvZiBBZXNvcCwgd2hlbiBoZSBhc2tzIHRoZSBsaXR0bGUgYmlyZHMgd2h5IHRoZXkgZmx5IGF3YXkgZnJvbSBoaW0sIGlzIHRvbGQgYnkgdGhlbSB0aGF0IGhlIHdpbGwgb25lIGRheSBiZSBhIGhhd2ssIHNvIGl0IHdvdWxkIHNlZW0gdGhhdCBzaW5jZSBMeWRpYWRlcyBoYWQgb25jZSBiZWVuIGEgdHlyYW50IGhlIHdhcyBuZXZlciBmcmVlIGZyb20gYSBzdXNwaWNpb24sIHdoaWNoIGRpZCBpbmp1c3RpY2UgdG8gaGlzIHJlYWwgbmF0dXJlLCB0aGF0IGhlIHdvdWxkIGNoYW5nZSBhZ2Fpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIEFldG9saWFuIHdhciBhbHNvIEFyYXR1cyB3b24gYSBnb29kIHJlcHV0ZS4gRm9yIHdoZW4gdGhlIEFjaGFlYW5zIHdlcmUgYmVudCBvbiBhbiBlbmdhZ2VtZW50IHdpdGggdGhlIEFldG9saWFucyBpbiBmcm9udCBvZiBNZWdhcmEsIGFuZCBBZ2lzIHRoZSBraW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucyB3YXMgY29tZSB1cCB3aXRoIGFuIGFybXkgYW5kIGpvaW5lZCBpbiB1cmdpbmcgdGhlIEFjaGFlYW5zIG9uIHRvIGJhdHRsZSwgQXJhdHVzIG9wcG9zZWQgdGhpcyBjb3Vuc2VsLCBhbmQgaW4gc3BpdGUgb2YgbXVjaCB2aWxpZmljYXRpb24gYW5kIG11Y2ggc2NvZmZpbmcgYWJ1c2UgZm9yIHdlYWtuZXNzIGFuZCBjb3dhcmRpY2Ugd291bGQgbm90IGFiYW5kb24sIGJlY2F1c2Ugb2YgYW55IHNlZW1pbmcgZGlzZ3JhY2UsIHdoaWNoIGhlIGp1ZGdlZCB0byBiZSBmb3IgdGhlIGdlbmVyYWwgYWR2YW50YWdlLCBidXQgYWxsb3dlZCB0aGUgZW5lbXkgdG8gY3Jvc3MgdGhlIEdlcmFuZWlhbiByYW5nZSB3aXRob3V0IGEgYmF0dGxlIGFuZCBwYXNzIG9uIGludG8gUGVsb3Bvbm5lc3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBhZnRlciB0aHVzIHBhc3Npbmcgb24sIHRoZXkgc3VkZGVubHkgc2VpemVkIFBlbGxlbmUsIGhlIHdhcyBubyBsb25nZXIgdGhlIHNhbWUgbWFuLCBub3Igd291bGQgaGUgd2FpdCBhdCBhbGwgaW4gb3JkZXIgdGhhdCBoaXMgZm9yY2VzIG1pZ2h0IGFzc2VtYmxlIGFuZCBjb21lIHRvZ2V0aGVyIGZyb20gYWxsIHF1YXJ0ZXJzLCBidXQgYXQgb25jZSBzZXQgb3V0IHdpdGggdGhvc2UgaGUgaGFkIGFnYWluc3QgdGhlIGVuZW15LCB3aG9tIHRoZSBkaXNvcmRlciBhbmQgd2FudG9ubmVzcyBhdHRlbmRhbnQgdXBvbiB0aGVpciBzdWNjZXNzIGhhZCB3aG9sbHkgd2Vha2VuZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyBzb29uIGFzIHRoZXkgaGFkIGVudGVyZWQgdGhlIGNpdHksIHRoZSBjb21tb24gc29sZGllcnMgaGFkIHNjYXR0ZXJlZCB0aGVtc2VsdmVzIGFtb25nIHRoZSBob3VzZXMsIGpvc3RsaW5nIGFuZCBmaWdodGluZyB3aXRoIG9uZSBhbm90aGVyIG92ZXIgdGhlIGJvb3R5LCB3aGlsZSB0aGUgbGVhZGVycyBhbmQgY2FwdGFpbnMgd2VyZSBnb2luZyBhYm91dCBhbmQgc2VpemluZyB0aGUgd2l2ZXMgYW5kIGRhdWdodGVycyBvZiB0aGUgUGVsbGVuaWFucywgb24gd2hvc2UgaGVhZHMgdGhleSBwdXQgdGhlaXIgb3duIGhlbG1ldHMsIHRoYXQgbm8gb25lIGVsc2UgbWlnaHQgc2VpemUgdGhlbSwgYnV0IHRoYXQgdGhlIGhlbG1ldCBtaWdodCBzaG93IHRvIHdob20gZWFjaCB3b21hbiBiZWxvbmdlZC4gQnV0IHdoaWxlIHRoZXkgd2VyZSBpbiB0aGlzIHNpdHVhdGlvbiBhbmQgdGh1cyBlbmdhZ2VkLCB3b3JkIHdhcyBzdWRkZW5seSBicm91Z2h0IHRoZW0gdGhhdCBBcmF0dXMgaGFkIGF0dGFja2VkLiBEaXNtYXkgZmVsbCB1cG9uIHRoZW0sIGFzIHdhcyBuYXR1cmFsIGFtaWQgc3VjaCBkaXNvcmRlciwgYW5kIGJlZm9yZSBhbGwgaGFkIGxlYXJuZWQgb2YgdGhlIGRhbmdlciB0aGUgZm9yZW1vc3Qgb2YgdGhlbSwgZW5nYWdpbmcgd2l0aCB0aGUgQWNoYWVhbnMgYXQgdGhlIGdhdGVzIGFuZCBpbiB0aGUgc3VidXJicywgd2VyZSBhbHJlYWR5IGNvbnF1ZXJlZCBhbmQgaW4gZnVsbCBmbGlnaHQsIGFuZCBiZWluZyBkcml2ZW4gaW4gaGVhZGxvbmcgcm91dCwgdGhleSBmaWxsZWQgd2l0aCBkaXNtYXkgdGhvc2Ugd2hvIHdlcmUgY29sbGVjdGluZyB0b2dldGhlciBhbmQgY29taW5nIHRvIHRoZWlyIGFpZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIEFldG9saWFuIHdhciBhbHNvIEFyYXR1cyB3b24gYSBnb29kIHJlcHV0ZS4gRm9yIHdoZW4gdGhlIEFjaGFlYW5zIHdlcmUgYmVudCBvbiBhbiBlbmdhZ2VtZW50IHdpdGggdGhlIEFldG9saWFucyBpbiBmcm9udCBvZiBNZWdhcmEsIGFuZCBBZ2lzIHRoZSBraW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucyB3YXMgY29tZSB1cCB3aXRoIGFuIGFybXkgYW5kIGpvaW5lZCBpbiB1cmdpbmcgdGhlIEFjaGFlYW5zIG9uIHRvIGJhdHRsZSwgQXJhdHVzIG9wcG9zZWQgdGhpcyBjb3Vuc2VsLCBhbmQgaW4gc3BpdGUgb2YgbXVjaCB2aWxpZmljYXRpb24gYW5kIG11Y2ggc2NvZmZpbmcgYWJ1c2UgZm9yIHdlYWtuZXNzIGFuZCBjb3dhcmRpY2Ugd291bGQgbm90IGFiYW5kb24sIGJlY2F1c2Ugb2YgYW55IHNlZW1pbmcgZGlzZ3JhY2UsIHdoaWNoIGhlIGp1ZGdlZCB0byBiZSBmb3IgdGhlIGdlbmVyYWwgYWR2YW50YWdlLCBidXQgYWxsb3dlZCB0aGUgZW5lbXkgdG8gY3Jvc3MgdGhlIEdlcmFuZWlhbiByYW5nZSB3aXRob3V0IGEgYmF0dGxlIGFuZCBwYXNzIG9uIGludG8gUGVsb3Bvbm5lc3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIGFmdGVyIHRodXMgcGFzc2luZyBvbiwgdGhleSBzdWRkZW5seSBzZWl6ZWQgUGVsbGVuZSwgaGUgd2FzIG5vIGxvbmdlciB0aGUgc2FtZSBtYW4sIG5vciB3b3VsZCBoZSB3YWl0IGF0IGFsbCBpbiBvcmRlciB0aGF0IGhpcyBmb3JjZXMgbWlnaHQgYXNzZW1ibGUgYW5kIGNvbWUgdG9nZXRoZXIgZnJvbSBhbGwgcXVhcnRlcnMsIGJ1dCBhdCBvbmNlIHNldCBvdXQgd2l0aCB0aG9zZSBoZSBoYWQgYWdhaW5zdCB0aGUgZW5lbXksIHdob20gdGhlIGRpc29yZGVyIGFuZCB3YW50b25uZXNzIGF0dGVuZGFudCB1cG9uIHRoZWlyIHN1Y2Nlc3MgaGFkIHdob2xseSB3ZWFrZW5lZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyBzb29uIGFzIHRoZXkgaGFkIGVudGVyZWQgdGhlIGNpdHksIHRoZSBjb21tb24gc29sZGllcnMgaGFkIHNjYXR0ZXJlZCB0aGVtc2VsdmVzIGFtb25nIHRoZSBob3VzZXMsIGpvc3RsaW5nIGFuZCBmaWdodGluZyB3aXRoIG9uZSBhbm90aGVyIG92ZXIgdGhlIGJvb3R5LCB3aGlsZSB0aGUgbGVhZGVycyBhbmQgY2FwdGFpbnMgd2VyZSBnb2luZyBhYm91dCBhbmQgc2VpemluZyB0aGUgd2l2ZXMgYW5kIGRhdWdodGVycyBvZiB0aGUgUGVsbGVuaWFucywgb24gd2hvc2UgaGVhZHMgdGhleSBwdXQgdGhlaXIgb3duIGhlbG1ldHMsIHRoYXQgbm8gb25lIGVsc2UgbWlnaHQgc2VpemUgdGhlbSwgYnV0IHRoYXQgdGhlIGhlbG1ldCBtaWdodCBzaG93IHRvIHdob20gZWFjaCB3b21hbiBiZWxvbmdlZC4gQnV0IHdoaWxlIHRoZXkgd2VyZSBpbiB0aGlzIHNpdHVhdGlvbiBhbmQgdGh1cyBlbmdhZ2VkLCB3b3JkIHdhcyBzdWRkZW5seSBicm91Z2h0IHRoZW0gdGhhdCBBcmF0dXMgaGFkIGF0dGFja2VkLiBEaXNtYXkgZmVsbCB1cG9uIHRoZW0sIGFzIHdhcyBuYXR1cmFsIGFtaWQgc3VjaCBkaXNvcmRlciwgYW5kIGJlZm9yZSBhbGwgaGFkIGxlYXJuZWQgb2YgdGhlIGRhbmdlciB0aGUgZm9yZW1vc3Qgb2YgdGhlbSwgZW5nYWdpbmcgd2l0aCB0aGUgQWNoYWVhbnMgYXQgdGhlIGdhdGVzIGFuZCBpbiB0aGUgc3VidXJicywgd2VyZSBhbHJlYWR5IGNvbnF1ZXJlZCBhbmQgaW4gZnVsbCBmbGlnaHQsIGFuZCBiZWluZyBkcml2ZW4gaW4gaGVhZGxvbmcgcm91dCwgdGhleSBmaWxsZWQgd2l0aCBkaXNtYXkgdGhvc2Ugd2hvIHdlcmUgY29sbGVjdGluZyB0b2dldGhlciBhbmQgY29taW5nIHRvIHRoZWlyIGFpZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1pZHN0IG9mIHRoaXMgY29uZnVzaW9uLCBvbmUgb2YgdGhlIGNhcHRpdmUgd29tZW4sIGRhdWdodGVyIG9mIEVwaWdldGhlcywgYSBtYW4gb2YgZGlzdGluY3Rpb24sIGFuZCBoZXJzZWxmIGNvbnNwaWN1b3VzIGZvciBiZWF1dHkgYW5kIHN0YXRlbGluZXNzIG9mIHBlcnNvbiwgY2hhbmNlZCB0byBiZSBzaXR0aW5nIGluIHRoZSBzYW5jdHVhcnkgb2YgQXJ0ZW1pcywgd2hlcmUgc2hlIGhhZCBiZWVuIHBsYWNlZCBieSB0aGUgY2FwdGFpbiBvZiBhIHBpY2tlZCBjb3Jwcywgd2hvIGhhZCBzZWl6ZWQgaGVyIGZvciBoaXMgcHJpemUgYW5kIHNldCBoaXMgdGhyZWUtY3Jlc3RlZCBoZWxtZXQgdXBvbiBoZXIgaGVhZC4gQnV0IHN1ZGRlbmx5IHNoZSByYW4gZm9ydGggdG8gdmlldyB0aGUgdHVtdWx0LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYXMgc2hlIHN0b29kIGluIGZyb250IG9mIHRoZSBnYXRlIG9mIHRoZSBzYW5jdHVhcnkgYW5kIGxvb2tlZCBkb3duIHVwb24gdGhlIGNvbWJhdGFudHMgZnJvbSBvbiBoaWdoLCB3aXRoIHRoZSB0aHJlZS1jcmVzdGVkIGhlbG1ldCBvbiBoZXIgaGVhZCwgc2hlIHNlZW1lZCB0byB0aGUgY2l0aXplbnMgdGhlbXNlbHZlcyBhIHZpc2lvbiBvZiBtb3JlIHRoYW4gaHVtYW4gbWFqZXN0eSwgd2hpbGUgdGhlIGVuZW15IHRob3VnaHQgdGhleSBzYXcgYW4gYXBwYXJpdGlvbiBmcm9tIGhlYXZlbiBhbmQgd2VyZSBzdHJ1Y2sgd2l0aCBhbWF6ZW1lbnQgYW5kIHRlcnJvciwgc28gdGhhdCBub3QgYSBtYW4gb2YgdGhlbSB0aG91Z2h0IG9mIGRlZmVuZGluZyBoaW1zZWxmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1pZHN0IG9mIHRoaXMgY29uZnVzaW9uLCBvbmUgb2YgdGhlIGNhcHRpdmUgd29tZW4sIGRhdWdodGVyIG9mIEVwaWdldGhlcywgYSBtYW4gb2YgZGlzdGluY3Rpb24sIGFuZCBoZXJzZWxmIGNvbnNwaWN1b3VzIGZvciBiZWF1dHkgYW5kIHN0YXRlbGluZXNzIG9mIHBlcnNvbiwgY2hhbmNlZCB0byBiZSBzaXR0aW5nIGluIHRoZSBzYW5jdHVhcnkgb2YgQXJ0ZW1pcywgd2hlcmUgc2hlIGhhZCBiZWVuIHBsYWNlZCBieSB0aGUgY2FwdGFpbiBvZiBhIHBpY2tlZCBjb3Jwcywgd2hvIGhhZCBzZWl6ZWQgaGVyIGZvciBoaXMgcHJpemUgYW5kIHNldCBoaXMgdGhyZWUtY3Jlc3RlZCBoZWxtZXQgdXBvbiBoZXIgaGVhZC4gQnV0IHN1ZGRlbmx5IHNoZSByYW4gZm9ydGggdG8gdmlldyB0aGUgdHVtdWx0LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyBzaGUgc3Rvb2QgaW4gZnJvbnQgb2YgdGhlIGdhdGUgb2YgdGhlIHNhbmN0dWFyeSBhbmQgbG9va2VkIGRvd24gdXBvbiB0aGUgY29tYmF0YW50cyBmcm9tIG9uIGhpZ2gsIHdpdGggdGhlIHRocmVlLWNyZXN0ZWQgaGVsbWV0IG9uIGhlciBoZWFkLCBzaGUgc2VlbWVkIHRvIHRoZSBjaXRpemVucyB0aGVtc2VsdmVzIGEgdmlzaW9uIG9mIG1vcmUgdGhhbiBodW1hbiBtYWplc3R5LCB3aGlsZSB0aGUgZW5lbXkgdGhvdWdodCB0aGV5IHNhdyBhbiBhcHBhcml0aW9uIGZyb20gaGVhdmVuIGFuZCB3ZXJlIHN0cnVjayB3aXRoIGFtYXplbWVudCBhbmQgdGVycm9yLCBzbyB0aGF0IG5vdCBhIG1hbiBvZiB0aGVtIHRob3VnaHQgb2YgZGVmZW5kaW5nIGhpbXNlbGYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZSBQZWxsZW5pYW5zIHRoZW1zZWx2ZXMgdGVsbCB1cyB0aGF0IHRoZSBpbWFnZSBvZiB0aGUgZ29kZGVzcyB1c3VhbGx5IHN0YW5kcyB1bnRvdWNoZWQsIGFuZCB0aGF0IHdoZW4gaXQgaXMgcmVtb3ZlZCBieSB0aGUgcHJpZXN0ZXNzIGFuZCBjYXJyaWVkIGZvcnRoIGZyb20gdGhlIHRlbXBsZSwgbm8gbWFuIGxvb2tzIHVwb24gaXQsIGJ1dCBhbGwgdHVybiB0aGVpciBnYXplIGF3YXk7IGZvciBub3Qgb25seSB0byBtYW5raW5kIGlzIGl0IGEgZ3JpZXZvdXMgYW5kIHRlcnJpYmxlIHNpZ2h0LCBidXQgdHJlZXMgYWxzbywgcGFzdCB3aGljaCBpdCBtYXkgYmUgY2FycmllZCwgYmVjb21lIGJhcnJlbiBhbmQgY2FzdCB0aGVpciBmcnVpdC4KCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaW1hZ2UsIHRoZW4sIHRoZXkgc2F5LCB0aGUgcHJpZXN0ZXNzIGNhcnJpZWQgZm9ydGggZnJvbSB0aGUgdGVtcGxlIGF0IHRoaXMgdGltZSwgYW5kIGJ5IGV2ZXIgdHVybmluZyBpdCBpbiB0aGUgZmFjZXMgb2YgdGhlIEFldG9saWFucyByb2JiZWQgdGhlbSBvZiB0aGVpciBzZW5zZXMgYW5kIHRvb2sgYXdheSB0aGVpciByZWFzb24uIEFyYXR1cywgaG93ZXZlciwgaW4gaGlzIENvbW1lbnRhcmllcywgbWFrZXMgbm8gbWVudGlvbiBvZiBzdWNoIGEgdGhpbmcsIGJ1dCBzYXlzIHRoYXQgYWZ0ZXIgcm91dGluZyB0aGUgQWV0b2xpYW5zIGFuZCBidXJzdGluZyBpbnRvIHRoZSBjaXR5IHdpdGggdGhlbSBhcyB0aGV5IGZsZWQsIGhlIGRyb3ZlIHRoZW0gb3V0IGJ5IG1haW4gZm9yY2UsIGFuZCBzbGV3IHNldmVuIGh1bmRyZWQgb2YgdGhlbS4gVGhlIGFjdGlvbiB3YXMgZXh0b2xsZWQgYXMgYW1vbmcgdGhlIGdyZWF0ZXN0IGV4cGxvaXRzLCBhbmQgVGltYW50aGVzIHRoZSBwYWludGVyIG1hZGUgYSBwaWN0dXJlIG9mIHRoZSBiYXR0bGUgd2hpY2ggaW4gaXRzIGNvbXBvc2l0aW9uIHZpdmlkbHkgcG9ydHJheWVkIHRoZSBldmVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaW1hZ2UsIHRoZW4sIHRoZXkgc2F5LCB0aGUgcHJpZXN0ZXNzIGNhcnJpZWQgZm9ydGggZnJvbSB0aGUgdGVtcGxlIGF0IHRoaXMgdGltZSwgYW5kIGJ5IGV2ZXIgdHVybmluZyBpdCBpbiB0aGUgZmFjZXMgb2YgdGhlIEFldG9saWFucyByb2JiZWQgdGhlbSBvZiB0aGVpciBzZW5zZXMgYW5kIHRvb2sgYXdheSB0aGVpciByZWFzb24uIEFyYXR1cywgaG93ZXZlciwgaW4gaGlzIENvbW1lbnRhcmllcywgbWFrZXMgbm8gbWVudGlvbiBvZiBzdWNoIGEgdGhpbmcsIGJ1dCBzYXlzIHRoYXQgYWZ0ZXIgcm91dGluZyB0aGUgQWV0b2xpYW5zIGFuZCBidXJzdGluZyBpbnRvIHRoZSBjaXR5IHdpdGggdGhlbSBhcyB0aGV5IGZsZWQsIGhlIGRyb3ZlIHRoZW0gb3V0IGJ5IG1haW4gZm9yY2UsIGFuZCBzbGV3IHNldmVuIGh1bmRyZWQgb2YgdGhlbS4gVGhlIGFjdGlvbiB3YXMgZXh0b2xsZWQgYXMgYW1vbmcgdGhlIGdyZWF0ZXN0IGV4cGxvaXRzLCBhbmQgVGltYW50aGVzIHRoZSBwYWludGVyIG1hZGUgYSBwaWN0dXJlIG9mIHRoZSBiYXR0bGUgd2hpY2ggaW4gaXRzIGNvbXBvc2l0aW9uIHZpdmlkbHkgcG9ydHJheWVkIHRoZSBldmVudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90d2l0aHN0YW5kaW5nLCBzaW5jZSBtYW55IHBlb3BsZXMgYW5kIGR5bmFzdHMgd2VyZSBjb21iaW5pbmcgYWdhaW5zdCB0aGUgQWNoYWVhbnMsIEFyYXR1cyBhdCBvbmNlIHNvdWdodCB0byBtYWtlIGZyaWVuZHMgb2YgdGhlIEFldG9saWFucywgYW5kIHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgUGFudGFsZW9uLCB0aGVpciBtb3N0IGluZmx1ZW50aWFsIG1hbiwgbm90IG9ubHkgbWFkZSBwZWFjZSwgYnV0IGFsc28gYW4gYWxsaWFuY2UgYmV0d2VlbiB0aGVtIGFuZCB0aGUgQWNoYWVhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90d2l0aHN0YW5kaW5nLCBzaW5jZSBtYW55IHBlb3BsZXMgYW5kIGR5bmFzdHMgd2VyZSBjb21iaW5pbmcgYWdhaW5zdCB0aGUgQWNoYWVhbnMsIEFyYXR1cyBhdCBvbmNlIHNvdWdodCB0byBtYWtlIGZyaWVuZHMgb2YgdGhlIEFldG9saWFucywgYW5kIHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgUGFudGFsZW9uLCB0aGVpciBtb3N0IGluZmx1ZW50aWFsIG1hbiwgbm90IG9ubHkgbWFkZSBwZWFjZSwgYnV0IGFsc28gYW4gYWxsaWFuY2UgYmV0d2VlbiB0aGVtIGFuZCB0aGUgQWNoYWVhbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBoaXMgZWFnZXJuZXNzIHRvIHNldCBBdGhlbnMgZnJlZSBoZSBpbmN1cnJlZCB0aGUgYml0dGVyIHJlcHJvYWNoZXMgb2YgdGhlIEFjaGFlYW5zLCBiZWNhdXNlLCB0aG91Z2ggdGhleSBoYWQgbWFkZSBhIHRydWNlIGFuZCBzdXNwZW5kZWQgaG9zdGlsaXRpZXMgd2l0aCB0aGUgTWFjZWRvbmlhbnMsIGhlIGF0dGVtcHRlZCB0byBzZWl6ZSB0aGUgUGVpcmFldXMuIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIGluIHRoZSBDb21tZW50YXJpZXMgd2hpY2ggaGUgbGVmdCwgbGF5cyB0aGUgYmxhbWUgZm9yIHRoaXMgYXR0ZW1wdCB1cG9uIEVyZ2ludXMsIHdpdGggd2hvc2UgYWlkIGhlIGhhZCBlZmZlY3RlZCB0aGUgY2FwdHVyZSBvZiBBY3JvY29yaW50aHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzYXlzIHRoYXQgRXJnaW51cyBhdHRhY2tlZCB0aGUgUGVpcmFldXMgb24gaGlzIG93biBwcml2YXRlIGFjY291bnQsIGFuZCB0aGF0IHdoZW4gaGlzIHNjYWxpbmctbGFkZGVyIGJyb2tlIGFuZCB0aGUgZW5lbXkgd2VyZSBwdXJzdWluZyBoaW0sIGhlIGtlcHQgY2FsbGluZyB1cG9uIEFyYXR1cyBieSBuYW1lLCBhcyBpZiBBcmF0dXMgd2VyZSB0aGVyZSwgYW5kIHRodXMgZGVjZWl2ZWQgYW5kIG1hZGUgaGlzIGVzY2FwZSBmcm9tIHRoZW0uIEJ1dCB0aGlzIGRlZmVuY2UgZG9lcyBub3Qgc2VlbSB0byBiZSBjb252aW5jaW5nLiBGb3IgRXJnaW51cyB3YXMgYSBwcml2YXRlIG1hbiBhbmQgYSBTeXJpYW4sIGFuZCB0aGVyZSBpcyBubyBsaWtlbGlob29kIHRoYXQgaGUgd291bGQgaGF2ZSBjb25jZWl2ZWQgb2Ygc28gZ3JlYXQgYW4gdW5kZXJ0YWtpbmcgaWYgaGUgaGFkIG5vdCBiZWVuIHVuZGVyIHRoZSBndWlkYW5jZSBvZiBBcmF0dXMgYW5kIG9idGFpbmVkIGZyb20gaGltIHRoZSBmb3JjZSBhbmQgdGhlIGZpdHRpbmcgdGltZSBmb3IgdGhlIGF0dGFjay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIEFyYXR1cyBoaW1zZWxmIGFsc28gbWFkZSB0aGlzIHBsYWluLCBzaW5jZSBoZSBhc3NhdWx0ZWQgdGhlIFBlaXJhZXVzLCBub3QgdHdpY2Ugb3IgdGhyaWNlLCBidXQgbWFueSB0aW1lcywgbGlrZSBhIGRlc3BlcmF0ZSBsb3ZlciwgYW5kIHdvdWxkIG5vdCBkZXNpc3QgaW4gc3BpdGUgb2YgaGlzIGZhaWx1cmVzLCBidXQgd2FzIHJvdXNlZCB0byBmcmVzaCBjb3VyYWdlIGJ5IHRoZSB2ZXJ5IG5hcnJvd25lc3Mgb2YgdGhlIHNsaWdodCBtYXJnaW4gYnkgd2hpY2ggaGUgd2FzIGRpc2FwcG9pbnRlZCBvZiBoaXMgaG9wZXMuIEFuZCBvbmNlIGhlIGFjdHVhbGx5IHB1dCBoaXMgbGVnIG91dCBvZiBqb2ludCBhcyBoZSBmbGVkIHRocm91Z2ggdGhlIFRocmlhc2lhbiBwbGFpbjsgYW5kIHdoaWxlIGhlIHdhcyB1bmRlciB0cmVhdG1lbnQgZm9yIHRoaXMsIHRoZSBrbmlmZSB3YXMgb2Z0ZW4gdXNlZCB1cG9uIGhpbSwgYW5kIGZvciBhIGxvbmcgdGltZSBoZSB3YXMgY2FycmllZCBpbiBhIGxpdHRlciB1cG9uIGhpcyBjYW1wYWlnbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBoaXMgZWFnZXJuZXNzIHRvIHNldCBBdGhlbnMgZnJlZSBoZSBpbmN1cnJlZCB0aGUgYml0dGVyIHJlcHJvYWNoZXMgb2YgdGhlIEFjaGFlYW5zLCBiZWNhdXNlLCB0aG91Z2ggdGhleSBoYWQgbWFkZSBhIHRydWNlIGFuZCBzdXNwZW5kZWQgaG9zdGlsaXRpZXMgd2l0aCB0aGUgTWFjZWRvbmlhbnMsIGhlIGF0dGVtcHRlZCB0byBzZWl6ZSB0aGUgUGVpcmFldXMuIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIGluIHRoZSBDb21tZW50YXJpZXMgd2hpY2ggaGUgbGVmdCwgbGF5cyB0aGUgYmxhbWUgZm9yIHRoaXMgYXR0ZW1wdCB1cG9uIEVyZ2ludXMsIHdpdGggd2hvc2UgYWlkIGhlIGhhZCBlZmZlY3RlZCB0aGUgY2FwdHVyZSBvZiBBY3JvY29yaW50aHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgdGhhdCBFcmdpbnVzIGF0dGFja2VkIHRoZSBQZWlyYWV1cyBvbiBoaXMgb3duIHByaXZhdGUgYWNjb3VudCwgYW5kIHRoYXQgd2hlbiBoaXMgc2NhbGluZy1sYWRkZXIgYnJva2UgYW5kIHRoZSBlbmVteSB3ZXJlIHB1cnN1aW5nIGhpbSwgaGUga2VwdCBjYWxsaW5nIHVwb24gQXJhdHVzIGJ5IG5hbWUsIGFzIGlmIEFyYXR1cyB3ZXJlIHRoZXJlLCBhbmQgdGh1cyBkZWNlaXZlZCBhbmQgbWFkZSBoaXMgZXNjYXBlIGZyb20gdGhlbS4gQnV0IHRoaXMgZGVmZW5jZSBkb2VzIG5vdCBzZWVtIHRvIGJlIGNvbnZpbmNpbmcuIEZvciBFcmdpbnVzIHdhcyBhIHByaXZhdGUgbWFuIGFuZCBhIFN5cmlhbiwgYW5kIHRoZXJlIGlzIG5vIGxpa2VsaWhvb2QgdGhhdCBoZSB3b3VsZCBoYXZlIGNvbmNlaXZlZCBvZiBzbyBncmVhdCBhbiB1bmRlcnRha2luZyBpZiBoZSBoYWQgbm90IGJlZW4gdW5kZXIgdGhlIGd1aWRhbmNlIG9mIEFyYXR1cyBhbmQgb2J0YWluZWQgZnJvbSBoaW0gdGhlIGZvcmNlIGFuZCB0aGUgZml0dGluZyB0aW1lIGZvciB0aGUgYXR0YWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBcmF0dXMgaGltc2VsZiBhbHNvIG1hZGUgdGhpcyBwbGFpbiwgc2luY2UgaGUgYXNzYXVsdGVkIHRoZSBQZWlyYWV1cywgbm90IHR3aWNlIG9yIHRocmljZSwgYnV0IG1hbnkgdGltZXMsIGxpa2UgYSBkZXNwZXJhdGUgbG92ZXIsIGFuZCB3b3VsZCBub3QgZGVzaXN0IGluIHNwaXRlIG9mIGhpcyBmYWlsdXJlcywgYnV0IHdhcyByb3VzZWQgdG8gZnJlc2ggY291cmFnZSBieSB0aGUgdmVyeSBuYXJyb3duZXNzIG9mIHRoZSBzbGlnaHQgbWFyZ2luIGJ5IHdoaWNoIGhlIHdhcyBkaXNhcHBvaW50ZWQgb2YgaGlzIGhvcGVzLiBBbmQgb25jZSBoZSBhY3R1YWxseSBwdXQgaGlzIGxlZyBvdXQgb2Ygam9pbnQgYXMgaGUgZmxlZCB0aHJvdWdoIHRoZSBUaHJpYXNpYW4gcGxhaW47IGFuZCB3aGlsZSBoZSB3YXMgdW5kZXIgdHJlYXRtZW50IGZvciB0aGlzLCB0aGUga25pZmUgd2FzIG9mdGVuIHVzZWQgdXBvbiBoaW0sIGFuZCBmb3IgYSBsb25nIHRpbWUgaGUgd2FzIGNhcnJpZWQgaW4gYSBsaXR0ZXIgdXBvbiBoaXMgY2FtcGFpZ25zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFudGlnb251cyBkaWVkIGFuZCBEZW1ldHJpdXMgc3VjY2VlZGVkIHRvIHRoZSB0aHJvbmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW50aWdvbnVzIEdvbmF0YXMgZGllZCBpbiAyMzkgQi5DLiwgYW5kIHdhcyBzdWNjZWVkZWQgYnkgaGlzIHNvbiwgRGVtZXRyaXVzIElJLiwgd2hvIHJlaWduZWQgdGVuIHllYXJzLjwvbm90ZT4gQXJhdHVzIHdhcyBhbGwgdGhlIG1vcmUgYmVudCB1cG9uIGdldHRpbmcgQXRoZW5zLCBhbmQgd2hvbGx5IGRlc3Bpc2VkIHRoZSBNYWNlZG9uaWFucy4gQW5kIHNvLCBhZnRlciBoZSBoYWQgYmVlbiBvdmVyY29tZSBpbiBhIGJhdHRsZSBhdCBQaHlsYWNpYSBieSBCaXRoeXMgdGhlIGdlbmVyYWwgb2YgRGVtZXRyaXVzLCBhbmQgcmVwb3J0cyB3ZXJlIHJpZmUsIG9uZSB0aGF0IGhlIGhhZCBiZWVuIGNhcHR1cmVkLCBhbmQgYW5vdGhlciB0aGF0IGhlIHdhcyBkZWFkLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5EaW9nZW5lcywgdGhlIGd1YXJkaWFuIG9mIHRoZSBQZWlyYWV1cywgc2VudCBhIGxldHRlciB0byBDb3JpbnRoIG9yZGVyaW5nIHRoZSBBY2hhZWFucyB0byBxdWl0IHRoZSBjaXR5LCBzaW5jZSBBcmF0dXMgaGFkIGJlZW4ga2lsbGVkOyBidXQgd2hlbiB0aGUgbGV0dGVyIGFycml2ZWQgYXQgQ29yaW50aCwgQXJhdHVzIGNoYW5jZWQgdG8gYmUgdGhlcmUgaW4gcGVyc29uLCBhbmQgc28gdGhlIG1lc3NlbmdlcnMgb2YgRGlvZ2VuZXMsIGFmdGVyIGZ1cm5pc2hpbmcgbXVjaCBkaXZlcnNpb24gYW5kIGxhdWdodGVyLCB3ZW50IGF3YXkuIE1vcmVvdmVyLCB0aGUga2luZyBoaW1zZWxmIHNlbnQgYSBzaGlwIGZyb20gTWFjZWRvbmlhLCBvbiB3aGljaCBBcmF0dXMgd2FzIHRvIGJlIGJyb3VnaHQgdG8gaGltIGluIGNoYWlucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBBdGhlbmlhbnMsIGNhcnJ5aW5nIHRoZWlyIGZsYXR0ZXJ5IG9mIHRoZSBNYWNlZG9uaWFucyB0byB0aGUgaGlnaGVzdCBwaXRjaCBvZiBsZXZpdHksIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzIGFzIHNvb24gYXMgdGhleSBoZWFyZCB0aGF0IEFyYXR1cyB3YXMgZGVhZC4gVGhlcmVmb3JlIGhlIHdhcyB3cm90aCwgYW5kIGF0IG9uY2UgbWFkZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlbSwgYW5kIGFkdmFuY2VkIGFzIGZhciBhcyB0aGUgQWNhZGVteTsgdGhlbiBoZSBsaXN0ZW5lZCB0byB0aGVpciBlbnRyZWF0aWVzIGFuZCBkaWQgdGhlbSBubyBoYXJtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBBbnRpZ29udXMgZGllZCBhbmQgRGVtZXRyaXVzIHN1Y2NlZWRlZCB0byB0aGUgdGhyb25lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW50aWdvbnVzIEdvbmF0YXMgZGllZCBpbiAyMzkgQi5DLiwgYW5kIHdhcyBzdWNjZWVkZWQgYnkgaGlzIHNvbiwgRGVtZXRyaXVzIElJLiwgd2hvIHJlaWduZWQgdGVuIHllYXJzLjwvbm90ZT4gQXJhdHVzIHdhcyBhbGwgdGhlIG1vcmUgYmVudCB1cG9uIGdldHRpbmcgQXRoZW5zLCBhbmQgd2hvbGx5IGRlc3Bpc2VkIHRoZSBNYWNlZG9uaWFucy4gQW5kIHNvLCBhZnRlciBoZSBoYWQgYmVlbiBvdmVyY29tZSBpbiBhIGJhdHRsZSBhdCBQaHlsYWNpYSBieSBCaXRoeXMgdGhlIGdlbmVyYWwgb2YgRGVtZXRyaXVzLCBhbmQgcmVwb3J0cyB3ZXJlIHJpZmUsIG9uZSB0aGF0IGhlIGhhZCBiZWVuIGNhcHR1cmVkLCBhbmQgYW5vdGhlciB0aGF0IGhlIHdhcyBkZWFkLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb2dlbmVzLCB0aGUgZ3VhcmRpYW4gb2YgdGhlIFBlaXJhZXVzLCBzZW50IGEgbGV0dGVyIHRvIENvcmludGggb3JkZXJpbmcgdGhlIEFjaGFlYW5zIHRvIHF1aXQgdGhlIGNpdHksIHNpbmNlIEFyYXR1cyBoYWQgYmVlbiBraWxsZWQ7IGJ1dCB3aGVuIHRoZSBsZXR0ZXIgYXJyaXZlZCBhdCBDb3JpbnRoLCBBcmF0dXMgY2hhbmNlZCB0byBiZSB0aGVyZSBpbiBwZXJzb24sIGFuZCBzbyB0aGUgbWVzc2VuZ2VycyBvZiBEaW9nZW5lcywgYWZ0ZXIgZnVybmlzaGluZyBtdWNoIGRpdmVyc2lvbiBhbmQgbGF1Z2h0ZXIsIHdlbnQgYXdheS4gTW9yZW92ZXIsIHRoZSBraW5nIGhpbXNlbGYgc2VudCBhIHNoaXAgZnJvbSBNYWNlZG9uaWEsIG9uIHdoaWNoIEFyYXR1cyB3YXMgdG8gYmUgYnJvdWdodCB0byBoaW0gaW4gY2hhaW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgQXRoZW5pYW5zLCBjYXJyeWluZyB0aGVpciBmbGF0dGVyeSBvZiB0aGUgTWFjZWRvbmlhbnMgdG8gdGhlIGhpZ2hlc3QgcGl0Y2ggb2YgbGV2aXR5LCBjcm93bmVkIHRoZW1zZWx2ZXMgd2l0aCBnYXJsYW5kcyBhcyBzb29uIGFzIHRoZXkgaGVhcmQgdGhhdCBBcmF0dXMgd2FzIGRlYWQuIFRoZXJlZm9yZSBoZSB3YXMgd3JvdGgsIGFuZCBhdCBvbmNlIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZW0sIGFuZCBhZHZhbmNlZCBhcyBmYXIgYXMgdGhlIEFjYWRlbXk7IHRoZW4gaGUgbGlzdGVuZWQgdG8gdGhlaXIgZW50cmVhdGllcyBhbmQgZGlkIHRoZW0gbm8gaGFybS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5TbyB0aGUgQXRoZW5pYW5zIGNhbWUgdG8gcmVjb2duaXplIHRoZSBleGNlbGxlbmNlIG9mIGhpcyBjaGFyYWN0ZXIsIGFuZCB3aGVuLCB1cG9uIHRoZSBkZWF0aCBvZiBEZW1ldHJpdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMjkgQi5DLiAgSGUgd2FzIHN1Y2NlZWRlZCBieSBBbnRpZ29udXMgRG9zb24sIHdobyByZWlnbmVkIG5pbmUgeWVhcnMuPC9ub3RlPiB0aGV5IHNldCBvdXQgdG8gcmVnYWluIHRoZWlyIGZyZWVkb20sIHRoZXkgY2FsbGVkIHVwb24gaGltLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQXJhdHVzLCBhbHRob3VnaCBhbm90aGVyIHdhcyBhdCB0aGF0IHRpbWUgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsIGFuZCBoZSBoaW1zZWxmIHdhcyBjb25maW5lZCB0byBoaXMgYmVkIGJ5IGEgbG9uZyBzaWNrbmVzcywgbmV2ZXJ0aGVsZXNzIHdhcyBjYXJyaWVkIGluIGEgbGl0dGVyIHRvIGhlbHAgdGhlIGNpdHkgaW4gaXRzIHRpbWUgb2YgbmVlZCwgYW5kIGpvaW5lZCBpbiBwZXJzdWFkaW5nIERpb2dlbmVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBnYXJyaXNvbiwgdG8gZ2l2ZSB1cCB0aGUgUGVpcmFldXMsIE11bnljaGlhLCBTYWxhbWlzLCBhbmQgU3VuaXVtIHRvIHRoZSBBdGhlbmlhbnMgZm9yIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGFsZW50cywgdHdlbnR5IG9mIHdoaWNoIEFyYXR1cyBjb250cmlidXRlZCBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgQWVnaW5hIGFuZCBIZXJtaW9uZSBhdCBvbmNlIGNhbWUgb3ZlciB0byB0aGUgQWNoYWVhbnMsIGFuZCB0aGUgZ3JlYXRlciBwYXJ0IG9mIEFyY2FkaWEgam9pbmVkIHRoZWlyIGxlYWd1ZS4gQW5kIHNpbmNlIHRoZSBNYWNlZG9uaWFucyB3ZXJlIGJ1c3kgd2l0aCBjZXJ0YWluIG5laWdoYm91cmluZyBhbmQgYWRqYWNlbnQgd2FycywgYW5kIHRoZSBBZXRvbGlhbnMgd2VyZSBpbiBhbGxpYW5jZSB3aXRoIHRoZSBBY2hhZWFucywgdGhlIHBvd2VyIG9mIHRoZSBBY2hhZWFuIExlYWd1ZSB3YXMgZ3JlYXRseSBpbmNyZWFzZWQuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMjkgQi5DLiAgSGUgd2FzIHN1Y2NlZWRlZCBieSBBbnRpZ29udXMgRG9zb24sIHdobyByZWlnbmVkIG5pbmUgeWVhcnMuPC9ub3RlPiB0aGV5IHNldCBvdXQgdG8gcmVnYWluIHRoZWlyIGZyZWVkb20sIHRoZXkgY2FsbGVkIHVwb24gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQXJhdHVzLCBhbHRob3VnaCBhbm90aGVyIHdhcyBhdCB0aGF0IHRpbWUgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsIGFuZCBoZSBoaW1zZWxmIHdhcyBjb25maW5lZCB0byBoaXMgYmVkIGJ5IGEgbG9uZyBzaWNrbmVzcywgbmV2ZXJ0aGVsZXNzIHdhcyBjYXJyaWVkIGluIGEgbGl0dGVyIHRvIGhlbHAgdGhlIGNpdHkgaW4gaXRzIHRpbWUgb2YgbmVlZCwgYW5kIGpvaW5lZCBpbiBwZXJzdWFkaW5nIERpb2dlbmVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBnYXJyaXNvbiwgdG8gZ2l2ZSB1cCB0aGUgUGVpcmFldXMsIE11bnljaGlhLCBTYWxhbWlzLCBhbmQgU3VuaXVtIHRvIHRoZSBBdGhlbmlhbnMgZm9yIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGFsZW50cywgdHdlbnR5IG9mIHdoaWNoIEFyYXR1cyBjb250cmlidXRlZCBoaW1zZWxmLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBBZWdpbmEgYW5kIEhlcm1pb25lIGF0IG9uY2UgY2FtZSBvdmVyIHRvIHRoZSBBY2hhZWFucywgYW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgQXJjYWRpYSBqb2luZWQgdGhlaXIgbGVhZ3VlLiBBbmQgc2luY2UgdGhlIE1hY2Vkb25pYW5zIHdlcmUgYnVzeSB3aXRoIGNlcnRhaW4gbmVpZ2hib3VyaW5nIGFuZCBhZGphY2VudCB3YXJzLCBhbmQgdGhlIEFldG9saWFucyB3ZXJlIGluIGFsbGlhbmNlIHdpdGggdGhlIEFjaGFlYW5zLCB0aGUgcG93ZXIgb2YgdGhlIEFjaGFlYW4gTGVhZ3VlIHdhcyBncmVhdGx5IGluY3JlYXNlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBBcmF0dXMsIHNlZWtpbmcgdG8gZWZmZWN0IGhpcyBsb25nLXN0YW5kaW5nIHB1cnBvc2UsIGFuZCBpbXBhdGllbnQgb2YgdGhlIHR5cmFubnkgc28gbmVhciB0aGUgQWNoYWVhbnMgaW4gQXJnb3MsIHNlbnQgbWVzc2VuZ2VycyBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgQXJpc3RvbWFjaHVzIHRvIGdpdmUgaGlzIGNpdHkgZnJlZWRvbSBhbmQgYXR0YWNoIGl0IHRvIHRoZSBBY2hhZWFuIExlYWd1ZSwgdXJnaW5nIGhpbSB0byBpbWl0YXRlIEx5ZGlhZGVzIGFuZCBiZSBnZW5lcmFsIG9mIHNvIGdyZWF0IGEgbmF0aW9uIHdpdGggcHJhaXNlIGFuZCBob25vdXIsIHJhdGhlciB0aGFuIHR5cmFudCBvZiBhIHNpbmdsZSBjaXR5IHdpdGggcGVyaWwgYW5kIGhhdHJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXJpc3RvbWFjaHVzIGNvbnNlbnRlZCwgYW5kIHRvbGQgQXJhdHVzIHRvIHNlbmQgaGltIGZpZnR5IHRhbGVudHMsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgZGlzYmFuZCBhbmQgc2VuZCBhd2F5IHRoZSBzb2xkaWVycyB1bmRlciBoaW0sIGFuZCB0aGUgbW9uZXkgd2FzIGJlaW5nIHByb3ZpZGVkLiBVcG9uIHRoaXMsIEx5ZGlhZGVzLCB3aG8gd2FzIHN0aWxsIGdlbmVyYWwgYW5kIGhhZCBhbiBhbWJpdGlvbiB0aGF0IHRoZSBBY2hhZWFucyBzaG91bGQgcmVnYXJkIHRoaXMgdHJhbnNhY3Rpb24gYXMgaGlzIG93biB3b3JrLCBkZW5vdW5jZWQgQXJhdHVzIHRvIEFyaXN0b21hY2h1cyBhcyBhIG1hbiB3aG8gaGFkIGFsd2F5cyBiZWVuIGFuIGltcGxhY2FibGUgZW5lbXkgb2YgdHlyYW50cywgYW5kIGFmdGVyIHBlcnN1YWRpbmcgQXJpc3RvbWFjaHVzIHRvIGVudHJ1c3QgdGhlIG1hdHRlciB0byBoaW1zZWxmLCBicm91Z2h0IGhpbSBiZWZvcmUgdGhlIEFjaGFlYW4gY291bmNpbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgbWVtYmVycyBvZiB0aGUgY291bmNpbCBwdXQgaW50byBjbGVhcmVzdCBsaWdodCB0aGVpciBnb29kd2lsbCB0b3dhcmRzIEFyYXR1cyBhbmQgdGhlaXIgY29uZmlkZW5jZSBpbiBoaW0uIEZvciB3aGVuIGhlIGFuZ3JpbHkgb3Bwb3NlZCB0aGUgcHJvamVjdCwgdGhleSBkcm92ZSBBcmlzdG9tYWNodXMgYXdheTsgYnV0IHdoZW4gaGUgaGFkIGJlZW4gd29uIG92ZXIgYWdhaW4sIGFuZCBjYW1lIGJlZm9yZSB0aGVtIGluIHBlcnNvbiwgYW5kIGJlZ2FuIHRvIGFyZ3VlIGZvciB0aGUgcHJvamVjdCwgdGhleSBzcGVlZGlseSBhbmQgcmVhZGlseSBhZG9wdGVkIGFsbCBoaXMgcHJvcG9zYWxzLCBhZG1pdHRlZCBBcmdvcyBhbmQgUGhsaXVzIGludG8gdGhlIGxlYWd1ZSwgYW5kIGEgeWVhciBsYXRlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIyNyBCLkMuPC9ub3RlPiBhY3R1YWxseSBjaG9vc2UgQXJpc3RvbWFjaHVzIGdlbmVyYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBBcmF0dXMsIHNlZWtpbmcgdG8gZWZmZWN0IGhpcyBsb25nLXN0YW5kaW5nIHB1cnBvc2UsIGFuZCBpbXBhdGllbnQgb2YgdGhlIHR5cmFubnkgc28gbmVhciB0aGUgQWNoYWVhbnMgaW4gQXJnb3MsIHNlbnQgbWVzc2VuZ2VycyBhbmQgdHJpZWQgdG8gcGVyc3VhZGUgQXJpc3RvbWFjaHVzIHRvIGdpdmUgaGlzIGNpdHkgZnJlZWRvbSBhbmQgYXR0YWNoIGl0IHRvIHRoZSBBY2hhZWFuIExlYWd1ZSwgdXJnaW5nIGhpbSB0byBpbWl0YXRlIEx5ZGlhZGVzIGFuZCBiZSBnZW5lcmFsIG9mIHNvIGdyZWF0IGEgbmF0aW9uIHdpdGggcHJhaXNlIGFuZCBob25vdXIsIHJhdGhlciB0aGFuIHR5cmFudCBvZiBhIHNpbmdsZSBjaXR5IHdpdGggcGVyaWwgYW5kIGhhdHJlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFyaXN0b21hY2h1cyBjb25zZW50ZWQsIGFuZCB0b2xkIEFyYXR1cyB0byBzZW5kIGhpbSBmaWZ0eSB0YWxlbnRzLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGRpc2JhbmQgYW5kIHNlbmQgYXdheSB0aGUgc29sZGllcnMgdW5kZXIgaGltLCBhbmQgdGhlIG1vbmV5IHdhcyBiZWluZyBwcm92aWRlZC4gVXBvbiB0aGlzLCBMeWRpYWRlcywgd2hvIHdhcyBzdGlsbCBnZW5lcmFsIGFuZCBoYWQgYW4gYW1iaXRpb24gdGhhdCB0aGUgQWNoYWVhbnMgc2hvdWxkIHJlZ2FyZCB0aGlzIHRyYW5zYWN0aW9uIGFzIGhpcyBvd24gd29yaywgZGVub3VuY2VkIEFyYXR1cyB0byBBcmlzdG9tYWNodXMgYXMgYSBtYW4gd2hvIGhhZCBhbHdheXMgYmVlbiBhbiBpbXBsYWNhYmxlIGVuZW15IG9mIHR5cmFudHMsIGFuZCBhZnRlciBwZXJzdWFkaW5nIEFyaXN0b21hY2h1cyB0byBlbnRydXN0IHRoZSBtYXR0ZXIgdG8gaGltc2VsZiwgYnJvdWdodCBoaW0gYmVmb3JlIHRoZSBBY2hhZWFuIGNvdW5jaWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIG1lbWJlcnMgb2YgdGhlIGNvdW5jaWwgcHV0IGludG8gY2xlYXJlc3QgbGlnaHQgdGhlaXIgZ29vZHdpbGwgdG93YXJkcyBBcmF0dXMgYW5kIHRoZWlyIGNvbmZpZGVuY2UgaW4gaGltLiBGb3Igd2hlbiBoZSBhbmdyaWx5IG9wcG9zZWQgdGhlIHByb2plY3QsIHRoZXkgZHJvdmUgQXJpc3RvbWFjaHVzIGF3YXk7IGJ1dCB3aGVuIGhlIGhhZCBiZWVuIHdvbiBvdmVyIGFnYWluLCBhbmQgY2FtZSBiZWZvcmUgdGhlbSBpbiBwZXJzb24sIGFuZCBiZWdhbiB0byBhcmd1ZSBmb3IgdGhlIHByb2plY3QsIHRoZXkgc3BlZWRpbHkgYW5kIHJlYWRpbHkgYWRvcHRlZCBhbGwgaGlzIHByb3Bvc2FscywgYWRtaXR0ZWQgQXJnb3MgYW5kIFBobGl1cyBpbnRvIHRoZSBsZWFndWUsIGFuZCBhIHllYXIgbGF0ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIyNyBCLkMuPC9ub3RlPiBhY3R1YWxseSBjaG9vc2UgQXJpc3RvbWFjaHVzIGdlbmVyYWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyaXN0b21hY2h1cywgdGhlbiwgYmVpbmcgaW4gaGlnaCBmYXZvdXIgd2l0aCB0aGUgQWNoYWVhbnMsIGFuZCB3aXNoaW5nIHRvIGludmFkZSBMYWNvbmlhLCBzdW1tb25lZCBBcmF0dXMgZnJvbSBBdGhlbnMuIEFyYXR1cyB3cm90ZSBoaW0gYSBsZXR0ZXIgaW4gd2hpY2ggaGUgdHJpZWQgdG8gZGlzc3VhZGUgaGltIGZyb20gdGhlIGV4cGVkaXRpb24sIGFuZCBleHByZXNzZWQgdW53aWxsaW5nbmVzcyB0byBpbnZvbHZlIHRoZSBBY2hhZWFucyBpbiBob3N0aWxpdGllcyB3aXRoIENsZW9tZW5lcywgd2hvIHdhcyBkYXJpbmcgYW5kIGdyb3dpbmcgbWFydmVsbG91c2x5IGluIHBvd2VyOyBidXQsIHNpbmNlIEFyaXN0b21hY2h1cyB3YXMgYWx0b2dldGhlciBpbnNpc3RlbnQsIEFyYXR1cyBvYmV5ZWQgb3JkZXJzIGFuZCBhY2NvbXBhbmllZCB0aGUgZXhwZWRpdGlvbiBpbiBwZXJzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhdCB0aGlzIHRpbWUgdGhhdCBoZSBwcmV2ZW50ZWQgQXJpc3RvbWFjaHVzIGZyb20gam9pbmluZyBiYXR0bGUgd2hlbiBDbGVvbWVuZXMgY2FtZSB1cG9uIHRoZW0gYXQgUGFsbGFudGl1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gNC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCBpdi4gMy00LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgd2FzIGRlbm91bmNlZCB0aGVyZWZvcmUgYnkgTHlkaWFkZXMsIHdpdGggd2hvbSBoZSBjYW1lIGludG8gY29udGVzdCBhbmQgY29tcGV0aXRpb24gZm9yIHRoZSBvZmZpY2Ugb2YgZ2VuZXJhbCwgd2lubmluZyB0aGUgdm90ZSBhbmQgYmVpbmcgY2hvc2VuIGdlbmVyYWwgZm9yIHRoZSB0d2VsZnRoIHRpbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyaXN0b21hY2h1cywgdGhlbiwgYmVpbmcgaW4gaGlnaCBmYXZvdXIgd2l0aCB0aGUgQWNoYWVhbnMsIGFuZCB3aXNoaW5nIHRvIGludmFkZSBMYWNvbmlhLCBzdW1tb25lZCBBcmF0dXMgZnJvbSBBdGhlbnMuIEFyYXR1cyB3cm90ZSBoaW0gYSBsZXR0ZXIgaW4gd2hpY2ggaGUgdHJpZWQgdG8gZGlzc3VhZGUgaGltIGZyb20gdGhlIGV4cGVkaXRpb24sIGFuZCBleHByZXNzZWQgdW53aWxsaW5nbmVzcyB0byBpbnZvbHZlIHRoZSBBY2hhZWFucyBpbiBob3N0aWxpdGllcyB3aXRoIENsZW9tZW5lcywgd2hvIHdhcyBkYXJpbmcgYW5kIGdyb3dpbmcgbWFydmVsbG91c2x5IGluIHBvd2VyOyBidXQsIHNpbmNlIEFyaXN0b21hY2h1cyB3YXMgYWx0b2dldGhlciBpbnNpc3RlbnQsIEFyYXR1cyBvYmV5ZWQgb3JkZXJzIGFuZCBhY2NvbXBhbmllZCB0aGUgZXhwZWRpdGlvbiBpbiBwZXJzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBhdCB0aGlzIHRpbWUgdGhhdCBoZSBwcmV2ZW50ZWQgQXJpc3RvbWFjaHVzIGZyb20gam9pbmluZyBiYXR0bGUgd2hlbiBDbGVvbWVuZXMgY2FtZSB1cG9uIHRoZW0gYXQgUGFsbGFudGl1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDQuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCBpdi4gMy00LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgd2FzIGRlbm91bmNlZCB0aGVyZWZvcmUgYnkgTHlkaWFkZXMsIHdpdGggd2hvbSBoZSBjYW1lIGludG8gY29udGVzdCBhbmQgY29tcGV0aXRpb24gZm9yIHRoZSBvZmZpY2Ugb2YgZ2VuZXJhbCwgd2lubmluZyB0aGUgdm90ZSBhbmQgYmVpbmcgY2hvc2VuIGdlbmVyYWwgZm9yIHRoZSB0d2VsZnRoIHRpbWUuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiA0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgaXYuIDMtNC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCBpdi4gMy00LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBjYW1wYWlnbiBvZiB0aGlzIHllYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMjYgQi5DLiAgQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DbGVvbWVuZXM8L3RpdGxlPiwgdi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgd2FzIGRlZmVhdGVkIGJ5IENsZW9tZW5lcyBuZWFyIE1vdW50IEx5Y2FldW0sIGFuZCB0b29rIHRvIGZsaWdodDsgYW5kLCBzaW5jZSBoZSBsb3N0IGhpcyB3YXkgaW4gdGhlIG5pZ2h0LCBoZSB3YXMgdGhvdWdodCB0byBiZSBkZWFkLCBhbmQgb25jZSBtb3JlIGEgc3RvcnkgdG8gdGhpcyBlZmZlY3QgaGFkIHdpZGUgY3VycmVuY3kgYW1vbmcgdGhlIEdyZWVrcy4gQnV0IGhlIGVzY2FwZWQgYWxpdmUgYW5kIHJhbGxpZWQgaGlzIHNvbGRpZXJzLCBhbmQgdGhlbiB3YXMgbm90IGNvbnRlbnQgdG8gY29tZSBvZmYgc2FmZWx5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgbWFraW5nIHRoZSBiZXN0IHVzZSBvZiBoaXMgb3Bwb3J0dW5pdHksIHdoZW4gbm8gb25lIGV4cGVjdGVkIG9yIGhhZCBhbnkgaWRlYSBvZiB3aGF0IHdhcyB0byBoYXBwZW4sIGhlIHN1ZGRlbmx5IG1hZGUgYW4gYXNzYXVsdCB1cG9uIE1hbnRpbmVpYSwgd2hpY2ggd2FzIGluIGFsbGlhbmNlIHdpdGggQ2xlb21lbmVzOyBhbmQgaGF2aW5nIHRha2VuIHRoZSBjaXR5LCBoZSBzZXQgYSBnYXJyaXNvbiB0aGVyZSwgYW5kIG1hZGUgaXRzIGFsaWVuIHJlc2lkZW50cyBmdWxsIGNpdGl6ZW5zLCB0aHVzIGFjcXVpcmluZyBzaW5nbGUtaGFuZGVkIGZvciB0aGUgY29ucXVlcmVkIEFjaGFlYW5zIHdoYXQgdGhleSBjb3VsZCBub3QgZWFzaWx5IGhhdmUgb2J0YWluZWQgYXMgY29ucXVlcm9ycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGNhbXBhaWduIG9mIHRoaXMgeWVhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjI2IEIuQy4gIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSB3YXMgZGVmZWF0ZWQgYnkgQ2xlb21lbmVzIG5lYXIgTW91bnQgTHljYWV1bSwgYW5kIHRvb2sgdG8gZmxpZ2h0OyBhbmQsIHNpbmNlIGhlIGxvc3QgaGlzIHdheSBpbiB0aGUgbmlnaHQsIGhlIHdhcyB0aG91Z2h0IHRvIGJlIGRlYWQsIGFuZCBvbmNlIG1vcmUgYSBzdG9yeSB0byB0aGlzIGVmZmVjdCBoYWQgd2lkZSBjdXJyZW5jeSBhbW9uZyB0aGUgR3JlZWtzLiBCdXQgaGUgZXNjYXBlZCBhbGl2ZSBhbmQgcmFsbGllZCBoaXMgc29sZGllcnMsIGFuZCB0aGVuIHdhcyBub3QgY29udGVudCB0byBjb21lIG9mZiBzYWZlbHksIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB2LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHYuPC90cmFuc2xhdGlvbj4="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBtYWtpbmcgdGhlIGJlc3QgdXNlIG9mIGhpcyBvcHBvcnR1bml0eSwgd2hlbiBubyBvbmUgZXhwZWN0ZWQgb3IgaGFkIGFueSBpZGVhIG9mIHdoYXQgd2FzIHRvIGhhcHBlbiwgaGUgc3VkZGVubHkgbWFkZSBhbiBhc3NhdWx0IHVwb24gTWFudGluZWlhLCB3aGljaCB3YXMgaW4gYWxsaWFuY2Ugd2l0aCBDbGVvbWVuZXM7IGFuZCBoYXZpbmcgdGFrZW4gdGhlIGNpdHksIGhlIHNldCBhIGdhcnJpc29uIHRoZXJlLCBhbmQgbWFkZSBpdHMgYWxpZW4gcmVzaWRlbnRzIGZ1bGwgY2l0aXplbnMsIHRodXMgYWNxdWlyaW5nIHNpbmdsZS1oYW5kZWQgZm9yIHRoZSBjb25xdWVyZWQgQWNoYWVhbnMgd2hhdCB0aGV5IGNvdWxkIG5vdCBlYXNpbHkgaGF2ZSBvYnRhaW5lZCBhcyBjb25xdWVyb3JzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWdhaW4sIHdoZW4gdGhlIExhY2VkYWVtb25pYW5zIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IE1lZ2Fsb3BvbGlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiA2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoZSB3ZW50IHRvIHRoZSBhaWQgb2YgdGhlIGNpdHksIGJ1dCB3YXMgbG90aCB0byBnaXZlIENsZW9tZW5lcyBhIGNoYW5jZSBmb3IgdGhlIGhhbmQtdG8taGFuZCBmaWdodGluZyB3aGljaCBoZSBkZXNpcmVkLCBhbmQgcmVzaXN0ZWQgdGhlIGltcG9ydHVuaXRpZXMgb2YgdGhlIE1lZ2Fsb3BvbGl0YW5zLiBGb3IgaGUgd2FzIG5ldmVyIGF0IGFueSB0aW1lIHdlbGwgZml0dGVkIGJ5IG5hdHVyZSBmb3Igc2V0IGJhdHRsZXMsIGFuZCBhdCB0aGlzIHRpbWUgaW4gcGFydGljdWxhciBoZSB3YXMgaW5mZXJpb3IgaW4gbnVtYmVycywgYW5kIHdhcyBtYXRjaGVkIGFnYWluc3QgYSBtYW4gd2hvIHdhcyB5b3VuZyBhbmQgZGFyaW5nLCB3aGlsZSBoaXMgb3duIGNvdXJhZ2UgV2FzIHBhc3QgaXRzIHByaW1lLCBhbmQgaGlzIGFtYml0aW9uIGNoYXN0ZW5lZC4gSGUgYWxzbyB0aG91Z2h0IHRoYXQgdGhlIGdsb3J5IHdoaWNoIGhpcyBhZHZlcnNhcnkgd2FzIHRyeWluZyB0byBhY3F1aXJlIGJ5IGhpcyBkYXJpbmcgYW5kIGRpZCBub3QgcG9zc2VzcywgaGFkIGFscmVhZHkgYmVlbiBhY3F1aXJlZCBieSBoaW1zZWxmIGFuZCBtdXN0IGJlIHByZXNlcnZlZCBieSBoaXMgY2F1dGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgTWVnYWxvcG9saXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiA2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgdmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIHdlbnQgdG8gdGhlIGFpZCBvZiB0aGUgY2l0eSwgYnV0IHdhcyBsb3RoIHRvIGdpdmUgQ2xlb21lbmVzIGEgY2hhbmNlIGZvciB0aGUgaGFuZC10by1oYW5kIGZpZ2h0aW5nIHdoaWNoIGhlIGRlc2lyZWQsIGFuZCByZXNpc3RlZCB0aGUgaW1wb3J0dW5pdGllcyBvZiB0aGUgTWVnYWxvcG9saXRhbnMuIEZvciBoZSB3YXMgbmV2ZXIgYXQgYW55IHRpbWUgd2VsbCBmaXR0ZWQgYnkgbmF0dXJlIGZvciBzZXQgYmF0dGxlcywgYW5kIGF0IHRoaXMgdGltZSBpbiBwYXJ0aWN1bGFyIGhlIHdhcyBpbmZlcmlvciBpbiBudW1iZXJzLCBhbmQgd2FzIG1hdGNoZWQgYWdhaW5zdCBhIG1hbiB3aG8gd2FzIHlvdW5nIGFuZCBkYXJpbmcsIHdoaWxlIGhpcyBvd24gY291cmFnZSBXYXMgcGFzdCBpdHMgcHJpbWUsIGFuZCBoaXMgYW1iaXRpb24gY2hhc3RlbmVkLiBIZSBhbHNvIHRob3VnaHQgdGhhdCB0aGUgZ2xvcnkgd2hpY2ggaGlzIGFkdmVyc2FyeSB3YXMgdHJ5aW5nIHRvIGFjcXVpcmUgYnkgaGlzIGRhcmluZyBhbmQgZGlkIG5vdCBwb3NzZXNzLCBoYWQgYWxyZWFkeSBiZWVuIGFjcXVpcmVkIGJ5IGhpbXNlbGYgYW5kIG11c3QgYmUgcHJlc2VydmVkIGJ5IGhpcyBjYXV0aW9uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHZpLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHZpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGlzIGxpZ2h0IGluZmFudHJ5IG9uY2UgbWFkZSBhIHNhbGx5LCBkcm92ZSB0aGUgU3BhcnRhbnMgYXMgZmFyIGFzIHRvIHRoZWlyIGNhbXAsIGFuZCB3ZXJlIHNjYXR0ZXJlZCBhYm91dCBhbW9uZyB0aGUgdGVudHMuIEFyYXR1cywgaG93ZXZlciwgd291bGQgbm90IGV2ZW4gdGhlbiBsZWFkIHVwIGhpcyBtZW4sIGJ1dCBwdXR0aW5nIGEgcmF2aW5lIGJldHdlZW4gaGltc2VsZiBhbmQgdGhlIGVuZW15LCBoYWx0ZWQgdGhlcmUsIGFuZCB3b3VsZCBub3Qgc3VmZmVyIGhpcyBtZW4tYXQtYXJtcyB0byBjcm9zcyBpdC4gVGhlbiBMeWRpYWRlcywgZGlzdHJlc3NlZCBhdCB3aGF0IHdhcyBnb2luZyBvbiwgYW5kIGxvYWRpbmcgQXJhdHVzIHdpdGggcmVwcm9hY2hlcywgY2FsbGVkIGhpcyBob3JzZW1lbiB0byBoaW0gYW5kIGV4aG9ydGVkIHRoZW0gdG8gZ28gdG8gdGhlIGhlbHAgb2YgdGhlIHB1cnN1ZXJzLCBhbmQgbm90IHRvIGxldCB0aGUgdmljdG9yeSBzbGlwIG91dCBvZiB0aGVpciBoYW5kcyBub3IgbGVhdmUgaW4gdGhlIGx1cmNoIGEgY29tbWFuZGVyIHdobyB3YXMgZmlnaHRpbmcgaW4gYmVoYWxmIG9mIGhpcyBuYXRpdmUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBicmF2ZSBtZW4gZ2F0aGVyaW5nIGF0IGhpcyBjYWxsLCBoZSB3YXMgZW1ib2xkZW5lZCB0byBjaGFyZ2UgdXBvbiB0aGUgcmlnaHQgd2luZyBvZiB0aGUgZW5lbXksIHdoaWNoIGhlIHJvdXRlZCBhbmQgcHVyc3VlZC4gQnV0IGhpcyBhcmRvdXIgYW5kIGFtYml0aW9uIHJvYmJlZCBoaW0gb2YgZGlzY3JldGlvbiwgYW5kIGhlIHdhcyBkcmF3biBvbiBpbnRvIHBsYWNlcyB0aGF0IHdlcmUgaW50cmljYXRlIGFuZCBmdWxsIG9mIHBsYW50ZWQgdHJlZXMgYW5kIGJyb2FkIHRyZW5jaGVzLiBIZXJlIENsZW9tZW5lcyBhdHRhY2tlZCBoaW0gYW5kIGhlIGZlbGwsIGFmdGVyIGEgYnJpbGxpYW50IGFuZCBtb3N0IGhvbm91cmFibGUgY29tYmF0IGF0IHRoZSBnYXRlcyBvZiBoaXMgbmF0aXZlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBtZW4gZmxlZCB0byB0aGVpciBtYWluIGxpbmUsIHRocmV3IHRoZSBtZW4tYXQtYXJtcyBpbnRvIGNvbmZ1c2lvbiwgYW5kIHRodXMgaW5mZWN0ZWQgdGhlIHdob2xlIGFybXkgd2l0aCB0aGVpciBkZWZlYXQuIEFyYXR1cyB3YXMgc2V2ZXJlbHkgYmxhbWVkIGZvciB0aGlzLCBiZWluZyB0aG91Z2h0IHRvIGhhdmUgYmV0cmF5ZWQgTHlkaWFkZXM7IGFuZCB3aGVuIHRoZSBBY2hhZWFucyBsZWZ0IHRoZSBmaWVsZCBpbiBhbmdlciwgdGhleSBmb3JjZWQgaGltIHRvIGFjY29tcGFueSB0aGVtIHRvIEFlZ2l1bS4gSGVyZSB0aGV5IGhlbGQgYW4gYXNzZW1ibHksIGFuZCB2b3RlZCBub3QgdG8gZ2l2ZSBoaW0gbW9uZXkgYW5kIG5vdCB0byBtYWludGFpbiBtZXJjZW5hcmllcyBmb3IgaGltOyBpZiBoZSB3YW50ZWQgdG8gd2FnZSB3YXIsIGhlIG11c3QgcHJvdmlkZSB0aGUgbWVhbnMgaGltc2VsZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBoaXMgbGlnaHQgaW5mYW50cnkgb25jZSBtYWRlIGEgc2FsbHksIGRyb3ZlIHRoZSBTcGFydGFucyBhcyBmYXIgYXMgdG8gdGhlaXIgY2FtcCwgYW5kIHdlcmUgc2NhdHRlcmVkIGFib3V0IGFtb25nIHRoZSB0ZW50cy4gQXJhdHVzLCBob3dldmVyLCB3b3VsZCBub3QgZXZlbiB0aGVuIGxlYWQgdXAgaGlzIG1lbiwgYnV0IHB1dHRpbmcgYSByYXZpbmUgYmV0d2VlbiBoaW1zZWxmIGFuZCB0aGUgZW5lbXksIGhhbHRlZCB0aGVyZSwgYW5kIHdvdWxkIG5vdCBzdWZmZXIgaGlzIG1lbi1hdC1hcm1zIHRvIGNyb3NzIGl0LiBUaGVuIEx5ZGlhZGVzLCBkaXN0cmVzc2VkIGF0IHdoYXQgd2FzIGdvaW5nIG9uLCBhbmQgbG9hZGluZyBBcmF0dXMgd2l0aCByZXByb2FjaGVzLCBjYWxsZWQgaGlzIGhvcnNlbWVuIHRvIGhpbSBhbmQgZXhob3J0ZWQgdGhlbSB0byBnbyB0byB0aGUgaGVscCBvZiB0aGUgcHVyc3VlcnMsIGFuZCBub3QgdG8gbGV0IHRoZSB2aWN0b3J5IHNsaXAgb3V0IG9mIHRoZWlyIGhhbmRzIG5vciBsZWF2ZSBpbiB0aGUgbHVyY2ggYSBjb21tYW5kZXIgd2hvIHdhcyBmaWdodGluZyBpbiBiZWhhbGYgb2YgaGlzIG5hdGl2ZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgYnJhdmUgbWVuIGdhdGhlcmluZyBhdCBoaXMgY2FsbCwgaGUgd2FzIGVtYm9sZGVuZWQgdG8gY2hhcmdlIHVwb24gdGhlIHJpZ2h0IHdpbmcgb2YgdGhlIGVuZW15LCB3aGljaCBoZSByb3V0ZWQgYW5kIHB1cnN1ZWQuIEJ1dCBoaXMgYXJkb3VyIGFuZCBhbWJpdGlvbiByb2JiZWQgaGltIG9mIGRpc2NyZXRpb24sIGFuZCBoZSB3YXMgZHJhd24gb24gaW50byBwbGFjZXMgdGhhdCB3ZXJlIGludHJpY2F0ZSBhbmQgZnVsbCBvZiBwbGFudGVkIHRyZWVzIGFuZCBicm9hZCB0cmVuY2hlcy4gSGVyZSBDbGVvbWVuZXMgYXR0YWNrZWQgaGltIGFuZCBoZSBmZWxsLCBhZnRlciBhIGJyaWxsaWFudCBhbmQgbW9zdCBob25vdXJhYmxlIGNvbWJhdCBhdCB0aGUgZ2F0ZXMgb2YgaGlzIG5hdGl2ZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBtZW4gZmxlZCB0byB0aGVpciBtYWluIGxpbmUsIHRocmV3IHRoZSBtZW4tYXQtYXJtcyBpbnRvIGNvbmZ1c2lvbiwgYW5kIHRodXMgaW5mZWN0ZWQgdGhlIHdob2xlIGFybXkgd2l0aCB0aGVpciBkZWZlYXQuIEFyYXR1cyB3YXMgc2V2ZXJlbHkgYmxhbWVkIGZvciB0aGlzLCBiZWluZyB0aG91Z2h0IHRvIGhhdmUgYmV0cmF5ZWQgTHlkaWFkZXM7IGFuZCB3aGVuIHRoZSBBY2hhZWFucyBsZWZ0IHRoZSBmaWVsZCBpbiBhbmdlciwgdGhleSBmb3JjZWQgaGltIHRvIGFjY29tcGFueSB0aGVtIHRvIEFlZ2l1bS4gSGVyZSB0aGV5IGhlbGQgYW4gYXNzZW1ibHksIGFuZCB2b3RlZCBub3QgdG8gZ2l2ZSBoaW0gbW9uZXkgYW5kIG5vdCB0byBtYWludGFpbiBtZXJjZW5hcmllcyBmb3IgaGltOyBpZiBoZSB3YW50ZWQgdG8gd2FnZSB3YXIsIGhlIG11c3QgcHJvdmlkZSB0aGUgbWVhbnMgaGltc2VsZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U21hcnRpbmcgdW5kZXIgdGhpcyBpbnN1bHQsIGhlIHJlc29sdmVkIHRvIGdpdmUgdXAgaGlzIHNlYWwgYXQgb25jZSwgYW5kIHJlc2lnbiB0aGUgb2ZmaWNlIG9mIGdlbmVyYWwsIGJ1dCB1cG9uIHJlZmxlY3Rpb24gaGUgaGVsZCBvbiBmb3IgdGhlIHByZXNlbnQsIGFuZCBhZnRlciBsZWFkaW5nIHRoZSBBY2hhZWFucyBmb3J0aCB0byBPcmNob21lbnVzLCBmb3VnaHQgYSBiYXR0bGUgdGhlcmUgd2l0aCBNZWdpc3Rvbm/DvHMsIHRoZSBzdGVwZmF0aGVyIG9mIENsZW9tZW5lcywgaW4gd2hpY2ggaGUgZ290IHRoZSB1cHBlciBoYW5kLCBraWxsaW5nIHRocmVlIGh1bmRyZWQgb2YgdGhlIGVuZW15IGFuZCB0YWtpbmcgTWVnaXN0b25vw7xzIHByaXNvbmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiwgYWNjdXN0b21lZCBhcyBoZSB3YXMgdG8gYmUgZ2VuZXJhbCBldmVyeSBvdGhlciB5ZWFyLCBoaXMgdHVybiBjYW1lIHJvdW5kIGFnYWluIGFuZCBoZSB3YXMgaW52aXRlZCB0byB0YWtlIHRoZSBvZmZpY2UsIGhlIGZvcm1hbGx5IGRlY2xpbmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCB4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIFRpbW94ZW51cyB3YXMgY2hvc2VuIGdlbmVyYWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDIyNCBCLkMuPC9ub3RlPiBOb3cgdGhlIGdyb3VuZHMgdXN1YWxseSBnaXZlbiBmb3IgdGhpcyByZWZ1c2FsIG9mIEFyYXR1cywgbmFtZWx5LCBoaXMgYW5nZXIgYXQgdGhlIHBlb3BsZSwgd2VyZSBub3QgdGhvdWdodCB0byBiZSBjb252aW5jaW5nLCBhbmQgdGhlIHJlYWwgcmVhc29uIGZvciBpdCB3YXMgdGhlIHNpdHVhdGlvbiBvZiB0aGUgQWNoYWVhbnMuIEZvciB0aGUgaW52YXNpb25zIG9mIENsZW9tZW5lcyB3ZXJlIG5vIGxvbmdlciBxdWlldCBhbmQgcmVzdHJhaW5lZCwgYXMgZm9ybWVybHksIG5vciB3YXMgaGUgZmV0dGVyZWQgYnkgdGhlIGNpdmlsIGF1dGhvcml0aWVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYWZ0ZXIgaGUgaGFkIGtpbGxlZCB0aGUgZXBob3JzLCBkaXZpZGVkIHVwIHRoZSBsYW5kLCBhZHZhbmNlZCBtYW55IHJlc2lkZW50IGFsaWVucyB0byB0aGUgY2l0aXplbnNoaXAsIGFuZCB0aHVzIGdvdCBhbiBpcnJlc3BvbnNpYmxlIHBvd2VyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHZpaWkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxMS4xIiB2YWxpZD0ieWVzIj54aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgaW1tZWRpYXRlbHkgcHJlc3NlZCB0aGUgQWNoYWVhbnMgaGFyZCwgYW5kIGRlbWFuZGVkIHRoZSBzdXByZW1lIGxlYWRlcnNoaXAgZm9yIGhpbXNlbGYuIEFuZCB0aGVyZWZvcmUgbWVuIGJsYW1lIEFyYXR1cywgYmVjYXVzZSwgd2hlbiB0aGUgc2hpcCBvZiBzdGF0ZSB3YXMgZHJpdmluZyBpbiBhIGdyZWF0IHN1cmdlIGFuZCBzdG9ybSwgaGUgZm9yc29vayB0aGUgcGlsb3QncyBoZWxtIGFuZCBsZWZ0IGl0IHRvIGFub3RoZXIsIGFsdGhvdWdoIGl0IGhhZCBiZWVuIHdlbGwsIGV2ZW4gaWYgdGhlIHBlb3BsZSB3ZXJlIHVud2lsbGluZywgdG8gcmVtYWluIGF0IHRoZWlyIGhlYWQgYW5kIHNhdmUgdGhlbTsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGlmIGhlIGRlc3BhaXJlZCBvZiB0aGUgZ292ZXJubWVudCBhbmQgcG93ZXIgb2YgdGhlIEFjaGFlYW5zLCBoZSBvdWdodCB0byBoYXZlIHlpZWxkZWQgdG8gQ2xlb21lbmVzLCBhbmQgbm90IHRvIGhhdmUgbWFkZSBQZWxvcG9ubmVzdXMgcXVpdGUgYmFyYmFyb3VzIGFnYWluIHVuZGVyIE1hY2Vkb25pYW4gZ2Fycmlzb25zLCBub3IgdG8gaGF2ZSBmaWxsZWQgQWNyb2NvcmludGh1cyB3aXRoIElsbHlyaWFuIGFuZCBHYWxsaWMgYXJtcywgbm9yLCBpbiB0aGUgY2FzZSBvZiBtZW4gd2hvbSBoZSB3YXMgYWx3YXlzIGRlZmVhdGluZyBpbiB0aGUgZmllbGRzIG9mIHdhciBhbmQgc3RhdGVzbWFuc2hpcCBhbmQgYWJ1c2luZyBpbiB0aGUgcGFnZXMgb2YgaGlzIENvbW1lbnRhcmllcywgdG8gaGF2ZSBtYWRlIHRoZXNlIG1lbiBsb3JkcyBvdmVyIHRoZSBjaXRpZXMgdW5kZXIgdGhlIGVuZGVhcmluZyBuYW1lIG9mIGFsbGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGlmIENsZW9tZW5lcyB3YXMsIGFzIG11c3QgYmUgZ3JhbnRlZCwgbGF3bGVzcyBhbmQgYXJiaXRyYXJ5LCBzdGlsbCwgSGVyYWNsZWlkYWUgd2VyZSBoaXMgYW5jZXN0b3JzLCBhbmQgU3BhcnRhIHdhcyBoaXMgbmF0aXZlIGxhbmQsIHRoZSBtZWFuZXN0IGNpdGl6ZW4gb2Ygd2hpY2ggd2FzIG1vcmUgd29ydGh5IHRoYW4gdGhlIGZvcmVtb3N0IE1hY2Vkb25pYW4gdG8gYmUgbWFkZSB0aGVpciBsZWFkZXIgYnkgdGhvc2Ugd2hvIGhhZCBhbnkgcmVnYXJkIGZvciBHcmVlayBub2JpbGl0eSBvZiBiaXJ0aC4gQW5kIHlldCBDbGVvbWVuZXMgYXNrZWQgdGhlIEFjaGFlYW5zIGZvciB0aGUgb2ZmaWNlLCB3aXRoIHRoZSBwcm9taXNlIHRoYXQgaGUgd291bGQgY29uZmVyIG1hbnkgYmVuZWZpdHMgdXBvbiB0aGVpciBjaXRpZXMgaW4gcmV0dXJuIGZvciB0aGF0IGhvbm91ciBhbmQgaXRzIHRpdGxlLCAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWFzIEFudGlnb251cywgYWx0aG91Z2ggaGUgd2FzIHByb2NsYWltZWQgbGVhZGVyIHdpdGggZnVsbCBwb3dlcnMgYnkgbGFuZCBhbmQgc2VhLCB3b3VsZCBub3QgYWNjZXB0IHRoZSBvZmZpY2UgdW50aWwgQWNyb2NvcmludGh1cyBoYWQgYmVlbiBwcm9taXNlZCBoaW0gYXMgdGhlIHBheSBmb3IgaGlzIGxlYWRlcnNoaXAuIEluIHRoaXMgaGUgYWN0ZWQganVzdCBsaWtlIEFlc29wJ3MgaHVudGVyLiBGb3IgaGUgd291bGQgbm90IG1vdW50IHRoZSBBY2hhZWFucywgYWx0aG91Z2ggdGhleSBwcmF5ZWQgaGltIHRvIGRvIHNvIGFuZCBwcmVzZW50ZWQgdGhlaXIgYmFja3MgdG8gaGltIGJ5IHdheSBvZiBlbWJhc3NpZXMgYW5kIGRlY3JlZXMsIHVudGlsIHRoZXkgY29uc2VudGVkIHRvIHdlYXIgdGhlIGJpdCBhbmQgYnJpZGxlIG9mIHRoZSBnYXJyaXNvbiB0aGV5IHJlY2VpdmVkIGFuZCB0aGUgaG9zdGFnZXMgdGhleSBnYXZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IEFyYXR1cyBzYXlzIGV2ZXJ5dGhpbmcgdGhhdCBoZSBjYW4gc2F5IGluIGV4cGxhaW5pbmcgdGhlIG5lY2Vzc2l0eSB0aGF0IHdhcyB1cG9uIGhpbS4gUG9seWJpdXMsIGhvd2V2ZXIsIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi40Ny40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkhpc3RvcmllczwvdGl0bGU+LCBpaS4gNDcsIDQgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgZm9yIGEgbG9uZyB0aW1lLCBhbmQgYmVmb3JlIHRoZSBuZWNlc3NpdHkgYXJvc2UsIEFyYXR1cyBtaXN0cnVzdGVkIHRoZSBkYXJpbmcgdGVtcGVyIG9mIENsZW9tZW5lcyBhbmQgbWFkZSBzZWNyZXQgb3ZlcnR1cmVzIHRvIEFudGlnb251cywgYmVzaWRlcyBwdXR0aW5nIHRoZSBNZWdhbG9wb2xpdGFucyBmb3J3YXJkIHRvIGJlZyB0aGUgQWNoYWVhbnMgdG8gY2FsbCBpbiBBbnRpZ29udXMuIEZvciB0aGUgTWVnYWxvcG9saXRhbnMgd2VyZSBtb3N0IG9wcHJlc3NlZCBieSB0aGUgd2FyLCBzaW5jZSBDbGVvbWVuZXMgd2FzIGNvbnRpbnVhbGx5IHBsdW5kZXJpbmcgdGhlaXIgdGVycml0b3J5LiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5BIHNpbWlsYXIgYWNjb3VudCBvZiB0aGVzZSBtYXR0ZXJzIGlzIGdpdmVuIGJ5IFBoeWxhcmNodXMgYWxzbywgaW4gd2hvbSwgYnV0IGZvciB0aGUgdGVzdGltb255IG9mIFBvbHliaXVzLCBvbmUgc2hvdWxkIG5vdCBwdXQgZW50aXJlIGNyZWRlbmNlLiBGb3IgZ29vZHdpbGwgbWFrZXMgaGlzIGV2ZXJ5IG1lbnRpb24gb2YgQ2xlb21lbmVzIGVjc3RhdGljLCBhbmQgYXMgaWYgaGUgd2VyZSBwbGVhZGluZyBpbiBhIGNvdXJ0IG9mIGxhdywgaGUgaXMgZm9yIGV2ZXIgYWNjdXNpbmcgQXJhdHVzIGluIGhpcyBoaXN0b3J5LCBhbmQgZGVmZW5kaW5nIENsZW9tZW5lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U21hcnRpbmcgdW5kZXIgdGhpcyBpbnN1bHQsIGhlIHJlc29sdmVkIHRvIGdpdmUgdXAgaGlzIHNlYWwgYXQgb25jZSwgYW5kIHJlc2lnbiB0aGUgb2ZmaWNlIG9mIGdlbmVyYWwsIGJ1dCB1cG9uIHJlZmxlY3Rpb24gaGUgaGVsZCBvbiBmb3IgdGhlIHByZXNlbnQsIGFuZCBhZnRlciBsZWFkaW5nIHRoZSBBY2hhZWFucyBmb3J0aCB0byBPcmNob21lbnVzLCBmb3VnaHQgYSBiYXR0bGUgdGhlcmUgd2l0aCBNZWdpc3Rvbm/DvHMsIHRoZSBzdGVwZmF0aGVyIG9mIENsZW9tZW5lcywgaW4gd2hpY2ggaGUgZ290IHRoZSB1cHBlciBoYW5kLCBraWxsaW5nIHRocmVlIGh1bmRyZWQgb2YgdGhlIGVuZW15IGFuZCB0YWtpbmcgTWVnaXN0b25vw7xzIHByaXNvbmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuLCBhY2N1c3RvbWVkIGFzIGhlIHdhcyB0byBiZSBnZW5lcmFsIGV2ZXJ5IG90aGVyIHllYXIsIGhpcyB0dXJuIGNhbWUgcm91bmQgYWdhaW4gYW5kIGhlIHdhcyBpbnZpdGVkIHRvIHRha2UgdGhlIG9mZmljZSwgaGUgZm9ybWFsbHkgZGVjbGluZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgVGltb3hlbnVzIHdhcyBjaG9zZW4gZ2VuZXJhbC48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4di4gMS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAyMjQgQi5DLjwvbm90ZT4gTm93IHRoZSBncm91bmRzIHVzdWFsbHkgZ2l2ZW4gZm9yIHRoaXMgcmVmdXNhbCBvZiBBcmF0dXMsIG5hbWVseSwgaGlzIGFuZ2VyIGF0IHRoZSBwZW9wbGUsIHdlcmUgbm90IHRob3VnaHQgdG8gYmUgY29udmluY2luZywgYW5kIHRoZSByZWFsIHJlYXNvbiBmb3IgaXQgd2FzIHRoZSBzaXR1YXRpb24gb2YgdGhlIEFjaGFlYW5zLiBGb3IgdGhlIGludmFzaW9ucyBvZiBDbGVvbWVuZXMgd2VyZSBubyBsb25nZXIgcXVpZXQgYW5kIHJlc3RyYWluZWQsIGFzIGZvcm1lcmx5LCBub3Igd2FzIGhlIGZldHRlcmVkIGJ5IHRoZSBjaXZpbCBhdXRob3JpdGllcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhZnRlciBoZSBoYWQga2lsbGVkIHRoZSBlcGhvcnMsIGRpdmlkZWQgdXAgdGhlIGxhbmQsIGFkdmFuY2VkIG1hbnkgcmVzaWRlbnQgYWxpZW5zIHRvIHRoZSBjaXRpemVuc2hpcCwgYW5kIHRodXMgZ290IGFuIGlycmVzcG9uc2libGUgcG93ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgdmlpaS48L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTEuMSIgdmFsaWQ9InllcyI+eGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIGltbWVkaWF0ZWx5IHByZXNzZWQgdGhlIEFjaGFlYW5zIGhhcmQsIGFuZCBkZW1hbmRlZCB0aGUgc3VwcmVtZSBsZWFkZXJzaGlwIGZvciBoaW1zZWxmLiBBbmQgdGhlcmVmb3JlIG1lbiBibGFtZSBBcmF0dXMsIGJlY2F1c2UsIHdoZW4gdGhlIHNoaXAgb2Ygc3RhdGUgd2FzIGRyaXZpbmcgaW4gYSBncmVhdCBzdXJnZSBhbmQgc3Rvcm0sIGhlIGZvcnNvb2sgdGhlIHBpbG90J3MgaGVsbSBhbmQgbGVmdCBpdCB0byBhbm90aGVyLCBhbHRob3VnaCBpdCBoYWQgYmVlbiB3ZWxsLCBldmVuIGlmIHRoZSBwZW9wbGUgd2VyZSB1bndpbGxpbmcsIHRvIHJlbWFpbiBhdCB0aGVpciBoZWFkIGFuZCBzYXZlIHRoZW07IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB2aWlpLjwvYmlibD4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB2aWlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxMS4xIiB2YWxpZD0ieWVzIj54aS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpZiBoZSBkZXNwYWlyZWQgb2YgdGhlIGdvdmVybm1lbnQgYW5kIHBvd2VyIG9mIHRoZSBBY2hhZWFucywgaGUgb3VnaHQgdG8gaGF2ZSB5aWVsZGVkIHRvIENsZW9tZW5lcywgYW5kIG5vdCB0byBoYXZlIG1hZGUgUGVsb3Bvbm5lc3VzIHF1aXRlIGJhcmJhcm91cyBhZ2FpbiB1bmRlciBNYWNlZG9uaWFuIGdhcnJpc29ucywgbm9yIHRvIGhhdmUgZmlsbGVkIEFjcm9jb3JpbnRodXMgd2l0aCBJbGx5cmlhbiBhbmQgR2FsbGljIGFybXMsIG5vciwgaW4gdGhlIGNhc2Ugb2YgbWVuIHdob20gaGUgd2FzIGFsd2F5cyBkZWZlYXRpbmcgaW4gdGhlIGZpZWxkcyBvZiB3YXIgYW5kIHN0YXRlc21hbnNoaXAgYW5kIGFidXNpbmcgaW4gdGhlIHBhZ2VzIG9mIGhpcyBDb21tZW50YXJpZXMsIHRvIGhhdmUgbWFkZSB0aGVzZSBtZW4gbG9yZHMgb3ZlciB0aGUgY2l0aWVzIHVuZGVyIHRoZSBlbmRlYXJpbmcgbmFtZSBvZiBhbGxpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBDbGVvbWVuZXMgd2FzLCBhcyBtdXN0IGJlIGdyYW50ZWQsIGxhd2xlc3MgYW5kIGFyYml0cmFyeSwgc3RpbGwsIEhlcmFjbGVpZGFlIHdlcmUgaGlzIGFuY2VzdG9ycywgYW5kIFNwYXJ0YSB3YXMgaGlzIG5hdGl2ZSBsYW5kLCB0aGUgbWVhbmVzdCBjaXRpemVuIG9mIHdoaWNoIHdhcyBtb3JlIHdvcnRoeSB0aGFuIHRoZSBmb3JlbW9zdCBNYWNlZG9uaWFuIHRvIGJlIG1hZGUgdGhlaXIgbGVhZGVyIGJ5IHRob3NlIHdobyBoYWQgYW55IHJlZ2FyZCBmb3IgR3JlZWsgbm9iaWxpdHkgb2YgYmlydGguIEFuZCB5ZXQgQ2xlb21lbmVzIGFza2VkIHRoZSBBY2hhZWFucyBmb3IgdGhlIG9mZmljZSwgd2l0aCB0aGUgcHJvbWlzZSB0aGF0IGhlIHdvdWxkIGNvbmZlciBtYW55IGJlbmVmaXRzIHVwb24gdGhlaXIgY2l0aWVzIGluIHJldHVybiBmb3IgdGhhdCBob25vdXIgYW5kIGl0cyB0aXRsZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQW50aWdvbnVzLCBhbHRob3VnaCBoZSB3YXMgcHJvY2xhaW1lZCBsZWFkZXIgd2l0aCBmdWxsIHBvd2VycyBieSBsYW5kIGFuZCBzZWEsIHdvdWxkIG5vdCBhY2NlcHQgdGhlIG9mZmljZSB1bnRpbCBBY3JvY29yaW50aHVzIGhhZCBiZWVuIHByb21pc2VkIGhpbSBhcyB0aGUgcGF5IGZvciBoaXMgbGVhZGVyc2hpcC4gSW4gdGhpcyBoZSBhY3RlZCBqdXN0IGxpa2UgQWVzb3AncyBodW50ZXIuIEZvciBoZSB3b3VsZCBub3QgbW91bnQgdGhlIEFjaGFlYW5zLCBhbHRob3VnaCB0aGV5IHByYXllZCBoaW0gdG8gZG8gc28gYW5kIHByZXNlbnRlZCB0aGVpciBiYWNrcyB0byBoaW0gYnkgd2F5IG9mIGVtYmFzc2llcyBhbmQgZGVjcmVlcywgdW50aWwgdGhleSBjb25zZW50ZWQgdG8gd2VhciB0aGUgYml0IGFuZCBicmlkbGUgb2YgdGhlIGdhcnJpc29uIHRoZXkgcmVjZWl2ZWQgYW5kIHRoZSBob3N0YWdlcyB0aGV5IGdhdmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgQXJhdHVzIHNheXMgZXZlcnl0aGluZyB0aGF0IGhlIGNhbiBzYXkgaW4gZXhwbGFpbmluZyB0aGUgbmVjZXNzaXR5IHRoYXQgd2FzIHVwb24gaGltLiBQb2x5Yml1cywgaG93ZXZlciwgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi40Ny40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdG9yaWVzPC90aXRsZT4sIGlpLiA0NywgNCBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBmb3IgYSBsb25nIHRpbWUsIGFuZCBiZWZvcmUgdGhlIG5lY2Vzc2l0eSBhcm9zZSwgQXJhdHVzIG1pc3RydXN0ZWQgdGhlIGRhcmluZyB0ZW1wZXIgb2YgQ2xlb21lbmVzIGFuZCBtYWRlIHNlY3JldCBvdmVydHVyZXMgdG8gQW50aWdvbnVzLCBiZXNpZGVzIHB1dHRpbmcgdGhlIE1lZ2Fsb3BvbGl0YW5zIGZvcndhcmQgdG8gYmVnIHRoZSBBY2hhZWFucyB0byBjYWxsIGluIEFudGlnb251cy4gRm9yIHRoZSBNZWdhbG9wb2xpdGFucyB3ZXJlIG1vc3Qgb3BwcmVzc2VkIGJ5IHRoZSB3YXIsIHNpbmNlIENsZW9tZW5lcyB3YXMgY29udGludWFsbHkgcGx1bmRlcmluZyB0aGVpciB0ZXJyaXRvcnkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjQ3LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IaXN0b3JpZXM8L3RpdGxlPiwgaWkuIDQ3LCA0IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGlzdG9yaWVzPC90aXRsZT4sIGlpLiA0NywgNCBmZi48L3RyYW5zbGF0aW9uPg=="
translation['38.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkEgc2ltaWxhciBhY2NvdW50IG9mIHRoZXNlIG1hdHRlcnMgaXMgZ2l2ZW4gYnkgUGh5bGFyY2h1cyBhbHNvLCBpbiB3aG9tLCBidXQgZm9yIHRoZSB0ZXN0aW1vbnkgb2YgUG9seWJpdXMsIG9uZSBzaG91bGQgbm90IHB1dCBlbnRpcmUgY3JlZGVuY2UuIEZvciBnb29kd2lsbCBtYWtlcyBoaXMgZXZlcnkgbWVudGlvbiBvZiBDbGVvbWVuZXMgZWNzdGF0aWMsIGFuZCBhcyBpZiBoZSB3ZXJlIHBsZWFkaW5nIGluIGEgY291cnQgb2YgbGF3LCBoZSBpcyBmb3IgZXZlciBhY2N1c2luZyBBcmF0dXMgaW4gaGlzIGhpc3RvcnksIGFuZCBkZWZlbmRpbmcgQ2xlb21lbmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgdGhlIEFjaGFlYW5zIGxvc3QgTWFudGluZWlhLCB3aGljaCB3YXMgdGFrZW4gYWdhaW4gYnkgQ2xlb21lbmVzLCBhbmQgYWZ0ZXIgYmVpbmcgZGVmZWF0ZWQgaW4gYSBncmVhdCBiYXR0bGUgYXQgSGVjYXRvbWJhZXVtIHRoZXkgd2VyZSBzbyBkaXNtYXllZCB0aGF0IHRoZXkgc2VudCBhdCBvbmNlIGFuZCBpbnZpdGVkIENsZW9tZW5lcyB0byBjb21lIHRvIEFyZ29zIGFuZCBhc3N1bWUgdGhlIGxlYWRlcnNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmF0dXMsIHdoZW4gaGUgbGVhcm5lZCB0aGF0IENsZW9tZW5lcyB3YXMgb24gdGhlIHdheSBhbmQgYXQgTGVybmEgd2l0aCBoaXMgZm9yY2VzLCBmZWFyZWQgdGhlIGlzc3VlLCBhbmQgc2VudCBhbiBlbWJhc3N5IHRvIGRlbWFuZCB0aGF0IGhlIHNob3VsZCBjb21lIHdpdGggdGhyZWUgaHVuZHJlZCBtZW4gb25seSwgYXMgdG8gZnJpZW5kcyBhbmQgYWxsaWVzLCBhbmQgdGhhdCBpZiBoZSB3YXMgZGlzdHJ1c3RmdWwsIGhlIHNob3VsZCBhY2NlcHQgaG9zdGFnZXMuIENsZW9tZW5lcyBkZWNsYXJlZCB0aGF0IGhlIHdhcyBpbnN1bHRlZCBhbmQgbW9ja2VkIGJ5IHRoaXMgZGVtYW5kLCBhbmQgcmV0aXJlZCB3aXRoIGhpcyBhcm15LCBhZnRlciB3cml0aW5nIGEgbGV0dGVyIHRvIHRoZSBBY2hhZWFucyB3aGljaCB3YXMgZnVsbCBvZiBiaXR0ZXIgYWNjdXNhdGlvbnMgYWdhaW5zdCBBcmF0dXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBhbHNvIHdyb3RlIGxldHRlcnMgYWdhaW5zdCBDbGVvbWVuZXM7IGFuZCB0aGVpciBtdXR1YWwgYWJ1c2UgYW5kIGRlZmFtYXRpb24gcmVhY2hlZCB0aGUgcG9pbnQgb2YgbWFsaWduaW5nIG9uZSBhbm90aGVyJ3MgbWFycmlhZ2VzIGFuZCB3aXZlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIHRoZSBBY2hhZWFucyBsb3N0IE1hbnRpbmVpYSwgd2hpY2ggd2FzIHRha2VuIGFnYWluIGJ5IENsZW9tZW5lcywgYW5kIGFmdGVyIGJlaW5nIGRlZmVhdGVkIGluIGEgZ3JlYXQgYmF0dGxlIGF0IEhlY2F0b21iYWV1bSB0aGV5IHdlcmUgc28gZGlzbWF5ZWQgdGhhdCB0aGV5IHNlbnQgYXQgb25jZSBhbmQgaW52aXRlZCBDbGVvbWVuZXMgdG8gY29tZSB0byBBcmdvcyBhbmQgYXNzdW1lIHRoZSBsZWFkZXJzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmF0dXMsIHdoZW4gaGUgbGVhcm5lZCB0aGF0IENsZW9tZW5lcyB3YXMgb24gdGhlIHdheSBhbmQgYXQgTGVybmEgd2l0aCBoaXMgZm9yY2VzLCBmZWFyZWQgdGhlIGlzc3VlLCBhbmQgc2VudCBhbiBlbWJhc3N5IHRvIGRlbWFuZCB0aGF0IGhlIHNob3VsZCBjb21lIHdpdGggdGhyZWUgaHVuZHJlZCBtZW4gb25seSwgYXMgdG8gZnJpZW5kcyBhbmQgYWxsaWVzLCBhbmQgdGhhdCBpZiBoZSB3YXMgZGlzdHJ1c3RmdWwsIGhlIHNob3VsZCBhY2NlcHQgaG9zdGFnZXMuIENsZW9tZW5lcyBkZWNsYXJlZCB0aGF0IGhlIHdhcyBpbnN1bHRlZCBhbmQgbW9ja2VkIGJ5IHRoaXMgZGVtYW5kLCBhbmQgcmV0aXJlZCB3aXRoIGhpcyBhcm15LCBhZnRlciB3cml0aW5nIGEgbGV0dGVyIHRvIHRoZSBBY2hhZWFucyB3aGljaCB3YXMgZnVsbCBvZiBiaXR0ZXIgYWNjdXNhdGlvbnMgYWdhaW5zdCBBcmF0dXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBhbHNvIHdyb3RlIGxldHRlcnMgYWdhaW5zdCBDbGVvbWVuZXM7IGFuZCB0aGVpciBtdXR1YWwgYWJ1c2UgYW5kIGRlZmFtYXRpb24gcmVhY2hlZCB0aGUgcG9pbnQgb2YgbWFsaWduaW5nIG9uZSBhbm90aGVyJ3MgbWFycmlhZ2VzIGFuZCB3aXZlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBhIHJlc3VsdCBvZiB0aGlzLCBDbGVvbWVuZXMgc2VudCBhIGhlcmFsZCB0byBkZWNsYXJlIHdhciBhZ2FpbnN0IHRoZSBBY2hhZWFucywgYW5kIGFsbW9zdCBzdWNjZWVkZWQgaW4gc2VpemluZyB0aGUgY2l0eSBvZiBTaWN5b24gd2l0aCB0aGUgaGVscCBvZiB0cmFpdG9yczsgaGUgdHVybmVkIGFzaWRlLCBob3dldmVyLCB3aGVuIGNsb3NlIGF0IGhhbmQsIGFuZCBhc3NhdWx0ZWQgYW5kIHRvb2sgdGhlIGNpdHkgb2YgUGVsbGVuZSwgZnJvbSB3aGljaCB0aGUgQWNoYWVhbiBjb21tYW5kZXIgZmxlZC4gQW5kIG5vdCBsb25nIGFmdGVyd2FyZHMgaGUgdG9vayBQaGVuZXVzIGFsc28gYW5kIFBlbnRlbGVpdW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBBcmdvcyB3ZW50IG92ZXIgdG8gaGlzIHNpZGUsIGFuZCBQaGxpdXMgcmVjZWl2ZWQgYSBnYXJyaXNvbiB3aGljaCBoZSBzZW50LiBJbiBhIHdvcmQsIG5vdCBvbmUgb2YgdGhlaXIgYWNxdWlzaXRpb25zIGxvbmdlciBoZWxkIGZpcm0gdG8gdGhlIEFjaGFlYW5zLCBidXQgYSB2YXN0IGNvbmZ1c2lvbiBzdWRkZW5seSBlbmNvbXBhc3NlZCBBcmF0dXMuIEhlIHNhdyBQZWxvcG9ubmVzdXMgc2hha2luZywgYW5kIGl0cyBjaXRpZXMgZXZlcnl3aGVyZSBzdGlycmVkIHRvIHJldm9sdCBieSByZXN0bGVzcyBhZ2l0YXRvcnMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2l0aCB0aGlzIGNoYXB0ZXIgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHh2aWkuPC9iaWJsPi08YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjEiIHZhbGlkPSJ5ZXMiPnhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQXJnb3Mgd2VudCBvdmVyIHRvIGhpcyBzaWRlLCBhbmQgUGhsaXVzIHJlY2VpdmVkIGEgZ2Fycmlzb24gd2hpY2ggaGUgc2VudC4gSW4gYSB3b3JkLCBub3Qgb25lIG9mIHRoZWlyIGFjcXVpc2l0aW9ucyBsb25nZXIgaGVsZCBmaXJtIHRvIHRoZSBBY2hhZWFucywgYnV0IGEgdmFzdCBjb25mdXNpb24gc3VkZGVubHkgZW5jb21wYXNzZWQgQXJhdHVzLiBIZSBzYXcgUGVsb3Bvbm5lc3VzIHNoYWtpbmcsIGFuZCBpdHMgY2l0aWVzIGV2ZXJ5d2hlcmUgc3RpcnJlZCB0byByZXZvbHQgYnkgcmVzdGxlc3MgYWdpdGF0b3JzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2l0aCB0aGlzIGNoYXB0ZXIgY2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4dmlpLjwvYmlibD4tPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjEiIHZhbGlkPSJ5ZXMiPnhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHZpaS48L2JpYmw+LTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4dmlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxOS4xIiB2YWxpZD0ieWVzIj54aXguIDEuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2FzIG5vIHF1aWV0IGFueXdoZXJlLCBhbmQgbm8gY29udGVudG1lbnQgd2l0aCBwcmVzZW50IGNvbmRpdGlvbnMsIGJ1dCBldmVuIGFtb25nIHRoZSBTaWN5b25pYW5zIGFuZCBDb3JpbnRoaWFucyB0aGVtc2VsdmVzIHRoZXJlIHdlcmUgbWFueSB3aG8gd2VyZSBrbm93biB0byBoYXZlIGJlZW4gaW4gY29uZmVyZW5jZSB3aXRoIENsZW9tZW5lcywgbWVuIHdob20gYSBkZXNpcmUgZm9yIHByaXZhdGUgZG9taW5hdGlvbiBoYWQgbG9uZyBhZ28gbGVkIGludG8gc2VjcmV0IGhvc3RpbGl0eSB0b3dhcmRzIHRoZSBjb21tb24gaW50ZXJlc3RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHB1bmlzaG1lbnQgb2YgdGhlc2UgbWVuIEFyYXR1cyB3YXMgY2xvdGhlZCB3aXRoIGFic29sdXRlIHBvd2VyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gNDEuMS4iIHZhbGlkPSJ5ZXMiPmNoYXAuIHhsaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHNlaXppbmcgdGhvc2UgaW4gU2ljeW9uIHdobyB3ZXJlIHRodXMgY29ycnVwdGVkIGhlIHB1dCB0aGVtIHRvIGRlYXRoOyBidXQgd2hlbiBoZSB0cmllZCB0byBzZWVrIG91dCBhbmQgY2hhc3Rpc2UgdGhvc2UgaW4gQ29yaW50aCwgaGUgcm91c2VkIHRoZSByZXNlbnRtZW50IG9mIHRoZSBwb3B1bGFjZSB0aGVyZSwgd2hpY2ggd2FzIGFscmVhZHkgZGlzYWZmZWN0ZWQgYW5kIGlsbCBhdCBlYXNlIHVuZGVyIHRoZSBBY2hhZWFuIGFkbWluaXN0cmF0aW9uLiBTbyB0aGV5IGFzc2VtYmxlZCBoYXN0aWx5IGluIHRoZSB0ZW1wbGUgb2YgQXBvbGxvIGFuZCBzZW50IGZvciBBcmF0dXMsIGRldGVybWluZWQgdG8ga2lsbCBoaW0gb3Igc2VpemUgaGltLCBhbmQgdGhlbiB0byByZXZvbHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNhbWUsIGFjY29yZGluZ2x5LCBsZWFkaW5nIGhpcyBob3JzZSBhZnRlciBoaW0sIGFzIHRob3VnaCBoZSBoYWQgbm8gZGlzdHJ1c3Qgb3Igc3VzcGljaW9uLCBhbmQgd2hlbiBtYW55IHNwcmFuZyB1cCBhbmQgYWJ1c2VkIGFuZCBkZW5vdW5jZWQgaGltLCB3aXRoIGEgY29tcG9zZWQgY291bnRlbmFuY2UgYW5kIGdlbnRsZSB3b3JkcyBoZSBiYWRlIHRoZW0gc2l0IGRvd24gYW5kIG5vdCBzdGFuZCB0aGVyZSBzaG91dGluZyBpbiBkaXNvcmRlcmx5IGZhc2hpb24sIGJ1dCB0byBhZG1pdCBhbHNvIHRob3NlIHdobyB3ZXJlIG91dHNpZGUgYXQgdGhlIGRvb3I7IGFuZCBhcyBoZSBzcG9rZSwgaGUgd2l0aGRyZXcgc2xvd2x5LCBhcyBpZiBoZSB3b3VsZCBoYW5kIGhpcyBob3JzZSBvdmVyIHRvIHNvbWVib2R5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGh1cyBzbGlwcGVkIG91dCBvZiB0aGUgY3Jvd2QsIGhlIGNvbnZlcnNlZCBjYWxtbHkgd2l0aCB0aGUgQ29yaW50aGlhbnMgd2hvIG1ldCBoaW0sIGJpZGRpbmcgdGhlbSBnbyB0byB0aGUgdGVtcGxlIG9mIEFwb2xsbywgYW5kIHNvLCBiZWZvcmUgaGlzIGVuZW1pZXMgd2VyZSBhd2FyZSBvZiBpdCwgY2FtZSBuaWdoIHRoZSBjaXRhZGVsLiBUaGVuIGhlIGxlYXBlZCB1cG9uIGhpcyBob3JzZSwgYW5kIGFmdGVyIGdpdmluZyBvcmRlcnMgdG8gQ2xlb3BhdGVyIHRoZSBjb21tYW5kZXIgb2YgdGhlIGdhcnJpc29uIGluIHRoZSBjaXRhZGVsIHRvIGd1YXJkIGl0IHdpdGggYSBzdHJvbmcgaGFuZCwgaGUgcm9kZSBvZmYgdG8gU2ljeW9uLCBmb2xsb3dlZCBieSBvbmx5IHRoaXJ0eSBvZiBoaXMgc29sZGllcnM7IHRoZSByZXN0IGRlc2VydGVkIGhpbSBhbmQgZGlzcGVyc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdhcyBubyBxdWlldCBhbnl3aGVyZSwgYW5kIG5vIGNvbnRlbnRtZW50IHdpdGggcHJlc2VudCBjb25kaXRpb25zLCBidXQgZXZlbiBhbW9uZyB0aGUgU2ljeW9uaWFucyBhbmQgQ29yaW50aGlhbnMgdGhlbXNlbHZlcyB0aGVyZSB3ZXJlIG1hbnkgd2hvIHdlcmUga25vd24gdG8gaGF2ZSBiZWVuIGluIGNvbmZlcmVuY2Ugd2l0aCBDbGVvbWVuZXMsIG1lbiB3aG9tIGEgZGVzaXJlIGZvciBwcml2YXRlIGRvbWluYXRpb24gaGFkIGxvbmcgYWdvIGxlZCBpbnRvIHNlY3JldCBob3N0aWxpdHkgdG93YXJkcyB0aGUgY29tbW9uIGludGVyZXN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcHVuaXNobWVudCBvZiB0aGVzZSBtZW4gQXJhdHVzIHdhcyBjbG90aGVkIHdpdGggYWJzb2x1dGUgcG93ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gNDEuMS4iIHZhbGlkPSJ5ZXMiPmNoYXAuIHhsaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHNlaXppbmcgdGhvc2UgaW4gU2ljeW9uIHdobyB3ZXJlIHRodXMgY29ycnVwdGVkIGhlIHB1dCB0aGVtIHRvIGRlYXRoOyBidXQgd2hlbiBoZSB0cmllZCB0byBzZWVrIG91dCBhbmQgY2hhc3Rpc2UgdGhvc2UgaW4gQ29yaW50aCwgaGUgcm91c2VkIHRoZSByZXNlbnRtZW50IG9mIHRoZSBwb3B1bGFjZSB0aGVyZSwgd2hpY2ggd2FzIGFscmVhZHkgZGlzYWZmZWN0ZWQgYW5kIGlsbCBhdCBlYXNlIHVuZGVyIHRoZSBBY2hhZWFuIGFkbWluaXN0cmF0aW9uLiBTbyB0aGV5IGFzc2VtYmxlZCBoYXN0aWx5IGluIHRoZSB0ZW1wbGUgb2YgQXBvbGxvIGFuZCBzZW50IGZvciBBcmF0dXMsIGRldGVybWluZWQgdG8ga2lsbCBoaW0gb3Igc2VpemUgaGltLCBhbmQgdGhlbiB0byByZXZvbHQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gNDEuMS4iIHZhbGlkPSJ5ZXMiPmNoYXAuIHhsaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGNhbWUsIGFjY29yZGluZ2x5LCBsZWFkaW5nIGhpcyBob3JzZSBhZnRlciBoaW0sIGFzIHRob3VnaCBoZSBoYWQgbm8gZGlzdHJ1c3Qgb3Igc3VzcGljaW9uLCBhbmQgd2hlbiBtYW55IHNwcmFuZyB1cCBhbmQgYWJ1c2VkIGFuZCBkZW5vdW5jZWQgaGltLCB3aXRoIGEgY29tcG9zZWQgY291bnRlbmFuY2UgYW5kIGdlbnRsZSB3b3JkcyBoZSBiYWRlIHRoZW0gc2l0IGRvd24gYW5kIG5vdCBzdGFuZCB0aGVyZSBzaG91dGluZyBpbiBkaXNvcmRlcmx5IGZhc2hpb24sIGJ1dCB0byBhZG1pdCBhbHNvIHRob3NlIHdobyB3ZXJlIG91dHNpZGUgYXQgdGhlIGRvb3I7IGFuZCBhcyBoZSBzcG9rZSwgaGUgd2l0aGRyZXcgc2xvd2x5LCBhcyBpZiBoZSB3b3VsZCBoYW5kIGhpcyBob3JzZSBvdmVyIHRvIHNvbWVib2R5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyB0aHVzIHNsaXBwZWQgb3V0IG9mIHRoZSBjcm93ZCwgaGUgY29udmVyc2VkIGNhbG1seSB3aXRoIHRoZSBDb3JpbnRoaWFucyB3aG8gbWV0IGhpbSwgYmlkZGluZyB0aGVtIGdvIHRvIHRoZSB0ZW1wbGUgb2YgQXBvbGxvLCBhbmQgc28sIGJlZm9yZSBoaXMgZW5lbWllcyB3ZXJlIGF3YXJlIG9mIGl0LCBjYW1lIG5pZ2ggdGhlIGNpdGFkZWwuIFRoZW4gaGUgbGVhcGVkIHVwb24gaGlzIGhvcnNlLCBhbmQgYWZ0ZXIgZ2l2aW5nIG9yZGVycyB0byBDbGVvcGF0ZXIgdGhlIGNvbW1hbmRlciBvZiB0aGUgZ2Fycmlzb24gaW4gdGhlIGNpdGFkZWwgdG8gZ3VhcmQgaXQgd2l0aCBhIHN0cm9uZyBoYW5kLCBoZSByb2RlIG9mZiB0byBTaWN5b24sIGZvbGxvd2VkIGJ5IG9ubHkgdGhpcnR5IG9mIGhpcyBzb2xkaWVyczsgdGhlIHJlc3QgZGVzZXJ0ZWQgaGltIGFuZCBkaXNwZXJzZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbGl0dGxlIHdoaWxlIHRoZSBDb3JpbnRoaWFucyBsZWFybmVkIG9mIGhpcyBmbGlnaHQgYW5kIHB1cnN1ZWQgaGltLCBidXQgZGlkIG5vdCBvdmVydGFrZSBoaW0uIFRoZW4gdGhleSBzZW50IGZvciBDbGVvbWVuZXMgYW5kIGRlbGl2ZXJlZCB0aGVpciBjaXR5IGludG8gaGlzIGhhbmRzLCBhbHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgaGUgaGFkIGdhaW5lZCBieSB3aGF0IHRoZXkgZ2F2ZSBoaW0gZmFyIGxlc3MgdGhhbiBoZSBoYWQgbG9zdCBieSB0aGVpciBsZXR0aW5nIEFyYXR1cyBnZXQgYXdheS4gQ2xlb21lbmVzLCBhY2NvcmRpbmdseSwgYWZ0ZXIgdGhlIGFjY2Vzc2lvbiB0byBoaW0gb2YgdGhlIGluaGFiaXRhbnRzIG9mIEFjdGUsIGFzIHRoZSBkaXN0cmljdCBpcyBjYWxsZWQsIHdobyBwbGFjZWQgdGhlaXIgY2l0aWVzIGluIGhpcyBoYW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiAyMjMgQi5DLiBUaGUgc3RvcnkgaXMgdG9sZCB2ZXJ5IGRpZmZlcmVudGx5IGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHhpeC4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gcHJvY2VlZGVkIHRvIHJ1biBhIHdhbGwgYW5kIHBhbGlzYWRlIGFib3V0IEFjcm9jb3JpbnRodXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbGl0dGxlIHdoaWxlIHRoZSBDb3JpbnRoaWFucyBsZWFybmVkIG9mIGhpcyBmbGlnaHQgYW5kIHB1cnN1ZWQgaGltLCBidXQgZGlkIG5vdCBvdmVydGFrZSBoaW0uIFRoZW4gdGhleSBzZW50IGZvciBDbGVvbWVuZXMgYW5kIGRlbGl2ZXJlZCB0aGVpciBjaXR5IGludG8gaGlzIGhhbmRzLCBhbHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgaGUgaGFkIGdhaW5lZCBieSB3aGF0IHRoZXkgZ2F2ZSBoaW0gZmFyIGxlc3MgdGhhbiBoZSBoYWQgbG9zdCBieSB0aGVpciBsZXR0aW5nIEFyYXR1cyBnZXQgYXdheS4gQ2xlb21lbmVzLCBhY2NvcmRpbmdseSwgYWZ0ZXIgdGhlIGFjY2Vzc2lvbiB0byBoaW0gb2YgdGhlIGluaGFiaXRhbnRzIG9mIEFjdGUsIGFzIHRoZSBkaXN0cmljdCBpcyBjYWxsZWQsIHdobyBwbGFjZWQgdGhlaXIgY2l0aWVzIGluIGhpcyBoYW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDIyMyBCLkMuIFRoZSBzdG9yeSBpcyB0b2xkIHZlcnkgZGlmZmVyZW50bHkgaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHhpeC4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gcHJvY2VlZGVkIHRvIHJ1biBhIHdhbGwgYW5kIHBhbGlzYWRlIGFib3V0IEFjcm9jb3JpbnRodXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHhpeC4gMS4gZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4aXguIDEuIGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgZmV3IG9mIHRoZSBBY2hhZWFucyBjYW1lIHRvZ2V0aGVyIHdpdGggQXJhdHVzIGF0IFNpY3lvbjsgYW5kIGluIGFuIGFzc2VtYmx5IHRoZXJlIGhlbGQgaGUgd2FzIGNob3NlbiBnZW5lcmFsIHdpdGggZnVsbCBwb3dlcnMuIEFuZCBub3cgaGUgc3Vycm91bmRlZCBoaW1zZWxmIHdpdGggYSBndWFyZCBmcm9tIGFtb25nIGhpcyBvd24gY2l0aXplbnMuIEZvciB0aHJlZS1hbmQtdGhpcnR5IHllYXJzIGhlIGhhZCBkaXJlY3RlZCBwdWJsaWMgYWZmYWlycyBhbW9uZyB0aGUgQWNoYWVhbnMsIGFuZCBoYWQgZW5qb3llZCBtb3JlIHBvd2VyIGFuZCByZXB1dGF0aW9uIHRoYW4gYW55IG90aGVyIEdyZWVrOyBidXQgbm93LCBhYmFuZG9uZWQgYnkgaGlzIGFsbGllcyBhbmQgaGVscGxlc3NseSBjcnVzaGVkLCBoZSB3YXMgbGlrZSBvbmUgZHJpZnRpbmcgYWJvdXQgaW4gZ3JlYXQgc3VyZ2UgYW5kIHBlcmlsIG9uIHRoZSB3cmVjayBvZiBoaXMgbmF0aXZlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgQWV0b2xpYW5zIHJlZnVzZWQgaGltIHRoZWlyIGFpZCB3aGVuIGhlIGFza2VkIGZvciBpdCwgYW5kIHRoZSBBdGhlbmlhbnMsIHdob20gZ3JhdGl0dWRlIG1hZGUgZWFnZXIgdG8gaGVscCBoaW0sIHdlcmUgcHJldmVudGVkIGJ5IEV1cnljbGVpZGVzIGFuZCBNaWNpb24uIEFzIGZvciB0aGUgaG91c2UgYW5kIHByb3BlcnR5IGJlbG9uZ2luZyB0byBBcmF0dXMgaW4gQ29yaW50aCwgQ2xlb21lbmVzIHdvdWxkIG5vdCB0b3VjaCB0aGVtIGF0IGFsbCwgbm9yIHBlcm1pdCBhbnlvbmUgZWxzZSB0byBkbyBzbywgYnV0IHNlbnQgZm9yIHRoZSBmcmllbmRzIGFuZCBzdGV3YXJkcyBvZiBBcmF0dXMgYW5kIG9yZGVyZWQgdGhlbSB0byBhZG1pbmlzdGVyIGFuZCB3YXRjaCBvdmVyIGV2ZXJ5dGhpbmcgYXMgdGhvdWdoIHRoZXkgYXJlIHRvIHJlbmRlciBhbiBhY2NvdW50IHRvIEFyYXR1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGhlIHByaXZhdGVseSBzZW50IFRyaXB5bHVzIHRvIEFyYXR1cywgYW5kIGFmdGVyd2FyZHMgTWVnaXN0b25vw7xzLCBoaXMgc3RlcGZhdGhlciwgcHJvbWlzaW5nIHRvIGdpdmUgaGltLCBiZXNpZGVzIG1hbnkgb3RoZXIgdGhpbmdzLCBhIHllYXJseSBwZW5zaW9uIG9mIHR3ZWx2ZSB0YWxlbnRzLCB0aHVzIGRvdWJsaW5nIHRoZSBhbW91bnQgd2hpY2ggQXJhdHVzIHJlY2VpdmVkIGFubnVhbGx5IGZyb20gUHRvbGVteTsgZm9yIGhlIHNlbnQgc2l4IHRhbGVudHMgZWFjaCB5ZWFyIHRvIEFyYXR1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QdG9sZW15IElJSS4sIHN1cm5hbWVkIEV1ZXJnZXRlcywga2luZyBvZiBFZ3lwdCAyNDctMjIyIEIuQy48L25vdGU+IENsZW9tZW5lcyBkZW1hbmRlZCwgaG93ZXZlciwgdGhhdCBoZSBzaG91bGQgYmUgcHJvY2xhaW1lZCBsZWFkZXIgb2YgdGhlIEFjaGFlYW5zLCBhbmQgdG9nZXRoZXIgd2l0aCB0aGVtIHNob3VsZCBoYXZlIHRoZSBrZWVwaW5nIG9mIEFjcm9jb3JpbnRodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBtYWRlIGFuc3dlciB0aGF0IGhlIGRpZCBub3QgY29udHJvbCBhZmZhaXJzLCBidXQgcmF0aGVyIHdhcyBjb250cm9sbGVkIGJ5IHRoZW07IHdoZXJldXBvbiBDbGVvbWVuZXMsIHRoaW5raW5nIGhpbXNlbGYgbW9ja2VkLCBhdCBvbmNlIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBTaWN5b24sIHJhdmFnZWQgYW5kIGxhaWQgaXQgd2FzdGUsIGFuZCBlbmNhbXBlZCBiZWZvcmUgdGhlIGNpdHkgdGhyZWUgbW9udGhzLiBBbGwgdGhpcyB3aGlsZSBBcmF0dXMgaGVsZCBvdXQgcGF0aWVudGx5LCBhbmQgZGViYXRlZCB3aXRoIGhpbXNlbGYgd2hldGhlciBoZSBzaG91bGQgYWNjZXB0IEFudGlnb251cyBhcyBhbiBhbGx5IG9uIGNvbmRpdGlvbiBvZiBoYW5kaW5nIG92ZXIgdG8gaGltIEFjcm9jb3JpbnRodXMhIGZvciBvbiBhbnkgb3RoZXIgdGVybXMgQW50aWdvbnVzIHdhcyB1bndpbGxpbmcgdG8gZ2l2ZSBoaW0gaGVscC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAxOS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCB4aXguIDMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgZmV3IG9mIHRoZSBBY2hhZWFucyBjYW1lIHRvZ2V0aGVyIHdpdGggQXJhdHVzIGF0IFNpY3lvbjsgYW5kIGluIGFuIGFzc2VtYmx5IHRoZXJlIGhlbGQgaGUgd2FzIGNob3NlbiBnZW5lcmFsIHdpdGggZnVsbCBwb3dlcnMuIEFuZCBub3cgaGUgc3Vycm91bmRlZCBoaW1zZWxmIHdpdGggYSBndWFyZCBmcm9tIGFtb25nIGhpcyBvd24gY2l0aXplbnMuIEZvciB0aHJlZS1hbmQtdGhpcnR5IHllYXJzIGhlIGhhZCBkaXJlY3RlZCBwdWJsaWMgYWZmYWlycyBhbW9uZyB0aGUgQWNoYWVhbnMsIGFuZCBoYWQgZW5qb3llZCBtb3JlIHBvd2VyIGFuZCByZXB1dGF0aW9uIHRoYW4gYW55IG90aGVyIEdyZWVrOyBidXQgbm93LCBhYmFuZG9uZWQgYnkgaGlzIGFsbGllcyBhbmQgaGVscGxlc3NseSBjcnVzaGVkLCBoZSB3YXMgbGlrZSBvbmUgZHJpZnRpbmcgYWJvdXQgaW4gZ3JlYXQgc3VyZ2UgYW5kIHBlcmlsIG9uIHRoZSB3cmVjayBvZiBoaXMgbmF0aXZlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgQWV0b2xpYW5zIHJlZnVzZWQgaGltIHRoZWlyIGFpZCB3aGVuIGhlIGFza2VkIGZvciBpdCwgYW5kIHRoZSBBdGhlbmlhbnMsIHdob20gZ3JhdGl0dWRlIG1hZGUgZWFnZXIgdG8gaGVscCBoaW0sIHdlcmUgcHJldmVudGVkIGJ5IEV1cnljbGVpZGVzIGFuZCBNaWNpb24uIEFzIGZvciB0aGUgaG91c2UgYW5kIHByb3BlcnR5IGJlbG9uZ2luZyB0byBBcmF0dXMgaW4gQ29yaW50aCwgQ2xlb21lbmVzIHdvdWxkIG5vdCB0b3VjaCB0aGVtIGF0IGFsbCwgbm9yIHBlcm1pdCBhbnlvbmUgZWxzZSB0byBkbyBzbywgYnV0IHNlbnQgZm9yIHRoZSBmcmllbmRzIGFuZCBzdGV3YXJkcyBvZiBBcmF0dXMgYW5kIG9yZGVyZWQgdGhlbSB0byBhZG1pbmlzdGVyIGFuZCB3YXRjaCBvdmVyIGV2ZXJ5dGhpbmcgYXMgdGhvdWdoIHRoZXkgYXJlIHRvIHJlbmRlciBhbiBhY2NvdW50IHRvIEFyYXR1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoZSBwcml2YXRlbHkgc2VudCBUcmlweWx1cyB0byBBcmF0dXMsIGFuZCBhZnRlcndhcmRzIE1lZ2lzdG9ub8O8cywgaGlzIHN0ZXBmYXRoZXIsIHByb21pc2luZyB0byBnaXZlIGhpbSwgYmVzaWRlcyBtYW55IG90aGVyIHRoaW5ncywgYSB5ZWFybHkgcGVuc2lvbiBvZiB0d2VsdmUgdGFsZW50cywgdGh1cyBkb3VibGluZyB0aGUgYW1vdW50IHdoaWNoIEFyYXR1cyByZWNlaXZlZCBhbm51YWxseSBmcm9tIFB0b2xlbXk7IGZvciBoZSBzZW50IHNpeCB0YWxlbnRzIGVhY2ggeWVhciB0byBBcmF0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QdG9sZW15IElJSS4sIHN1cm5hbWVkIEV1ZXJnZXRlcywga2luZyBvZiBFZ3lwdCAyNDctMjIyIEIuQy48L25vdGU+IENsZW9tZW5lcyBkZW1hbmRlZCwgaG93ZXZlciwgdGhhdCBoZSBzaG91bGQgYmUgcHJvY2xhaW1lZCBsZWFkZXIgb2YgdGhlIEFjaGFlYW5zLCBhbmQgdG9nZXRoZXIgd2l0aCB0aGVtIHNob3VsZCBoYXZlIHRoZSBrZWVwaW5nIG9mIEFjcm9jb3JpbnRodXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBtYWRlIGFuc3dlciB0aGF0IGhlIGRpZCBub3QgY29udHJvbCBhZmZhaXJzLCBidXQgcmF0aGVyIHdhcyBjb250cm9sbGVkIGJ5IHRoZW07IHdoZXJldXBvbiBDbGVvbWVuZXMsIHRoaW5raW5nIGhpbXNlbGYgbW9ja2VkLCBhdCBvbmNlIGludmFkZWQgdGhlIHRlcnJpdG9yeSBvZiBTaWN5b24sIHJhdmFnZWQgYW5kIGxhaWQgaXQgd2FzdGUsIGFuZCBlbmNhbXBlZCBiZWZvcmUgdGhlIGNpdHkgdGhyZWUgbW9udGhzLiBBbGwgdGhpcyB3aGlsZSBBcmF0dXMgaGVsZCBvdXQgcGF0aWVudGx5LCBhbmQgZGViYXRlZCB3aXRoIGhpbXNlbGYgd2hldGhlciBoZSBzaG91bGQgYWNjZXB0IEFudGlnb251cyBhcyBhbiBhbGx5IG9uIGNvbmRpdGlvbiBvZiBoYW5kaW5nIG92ZXIgdG8gaGltIEFjcm9jb3JpbnRodXMhIGZvciBvbiBhbnkgb3RoZXIgdGVybXMgQW50aWdvbnVzIHdhcyB1bndpbGxpbmcgdG8gZ2l2ZSBoaW0gaGVscC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMTkuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4aXguIDMgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeGl4LiAzIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeGl4LiAzIGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBBY2hhZWFucyBjYW1lIHRvZ2V0aGVyIGF0IEFlZ2l1bSBhbmQgaW52aXRlZCBBcmF0dXMgdGhpdGhlci4gQnV0IHRoZXJlIHdhcyBkYW5nZXIgaW4gaGlzIHRyeWluZyB0byBnZXQgdGhlcmUsIHNpbmNlIENsZW9tZW5lcyB3YXMgZW5jYW1wZWQgYmVmb3JlIFNpY3lvbi4gQmVzaWRlcywgdGhlIGNpdGl6ZW5zIHRyaWVkIHRvIGRldGFpbiBoaW0sIGJlc2VlY2hpbmcgaGltIG5vdCB0byBnbyBhbmQgcmVmdXNpbmcgdG8gbGV0IGhpbSBleHBvc2UgaGltc2VsZiB3aGlsZSB0aGUgZW5lbXkgd2VyZSBuZWFyOyBhbmQgcHJlc2VudGx5IHRoZSB3b21lbiBhbmQgY2hpbGRyZW4gd2VyZSBjbGluZ2luZyB0byBoaW0gYW5kIHRlYXJmdWxseSBlbWJyYWNpbmcgaGltIGFzIGEgY29tbW9uIGZhdGhlciBhbmQgcHJlc2VydmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIGFmdGVyIGVuY291cmFnaW5nIGFuZCBjb21mb3J0aW5nIHRoZW0sIGhlIHJvZGUgb3V0IHRvIHRoZSBzZWEsIGFjY29tcGFuaWVkIGJ5IHRlbiBmcmllbmRzIGFuZCBieSBoaXMgc29uLCB3aG8gd2FzIG5vdyBhIHlvdW5nIG1hbi4gVmVzc2VscyB3ZXJlIGx5aW5nIGF0IGFuY2hvciBvZmYgdGhlIHNob3JlLCBhbmQgdXBvbiB0aGVzZSB0aGUgcGFydHkgd2VyZSBjb252ZXllZCB0byBBZWdpdW0sIHdoZXJlIHRoZSBhc3NlbWJseSB3YXMgc2l0dGluZy4gSGVyZSBpdCB3YXMgdm90ZWQgdG8gY2FsbCBpbiBBbnRpZ29udXMgYW5kIGhhbmQgb3ZlciB0byBoaW0gQWNyb2NvcmludGh1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc3ByaW5nIG9mIDIyMyBCLkMuIENmIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHhpeC4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMgZXZlbiBzZW50IGhpcyBzb24gdG8gQW50aWdvbnVzIHdpdGggdGhlIG90aGVyIGhvc3RhZ2VzLiBBdCB0aGlzIHRoZSBDb3JpbnRoaWFucyB3ZXJlIGluZGlnbmFudDsgdGhleSBwbHVuZGVyZWQgaGlzIHByb3BlcnR5IGFuZCBtYWRlIGEgcHJlc2VudCBvZiBoaXMgaG91c2UgdG8gQ2xlb21lbmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBBY2hhZWFucyBjYW1lIHRvZ2V0aGVyIGF0IEFlZ2l1bSBhbmQgaW52aXRlZCBBcmF0dXMgdGhpdGhlci4gQnV0IHRoZXJlIHdhcyBkYW5nZXIgaW4gaGlzIHRyeWluZyB0byBnZXQgdGhlcmUsIHNpbmNlIENsZW9tZW5lcyB3YXMgZW5jYW1wZWQgYmVmb3JlIFNpY3lvbi4gQmVzaWRlcywgdGhlIGNpdGl6ZW5zIHRyaWVkIHRvIGRldGFpbiBoaW0sIGJlc2VlY2hpbmcgaGltIG5vdCB0byBnbyBhbmQgcmVmdXNpbmcgdG8gbGV0IGhpbSBleHBvc2UgaGltc2VsZiB3aGlsZSB0aGUgZW5lbXkgd2VyZSBuZWFyOyBhbmQgcHJlc2VudGx5IHRoZSB3b21lbiBhbmQgY2hpbGRyZW4gd2VyZSBjbGluZ2luZyB0byBoaW0gYW5kIHRlYXJmdWxseSBlbWJyYWNpbmcgaGltIGFzIGEgY29tbW9uIGZhdGhlciBhbmQgcHJlc2VydmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgYWZ0ZXIgZW5jb3VyYWdpbmcgYW5kIGNvbWZvcnRpbmcgdGhlbSwgaGUgcm9kZSBvdXQgdG8gdGhlIHNlYSwgYWNjb21wYW5pZWQgYnkgdGVuIGZyaWVuZHMgYW5kIGJ5IGhpcyBzb24sIHdobyB3YXMgbm93IGEgeW91bmcgbWFuLiBWZXNzZWxzIHdlcmUgbHlpbmcgYXQgYW5jaG9yIG9mZiB0aGUgc2hvcmUsIGFuZCB1cG9uIHRoZXNlIHRoZSBwYXJ0eSB3ZXJlIGNvbnZleWVkIHRvIEFlZ2l1bSwgd2hlcmUgdGhlIGFzc2VtYmx5IHdhcyBzaXR0aW5nLiBIZXJlIGl0IHdhcyB2b3RlZCB0byBjYWxsIGluIEFudGlnb251cyBhbmQgaGFuZCBvdmVyIHRvIGhpbSBBY3JvY29yaW50aHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHNwcmluZyBvZiAyMjMgQi5DLiBDZiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeGl4LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDE5LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeGl4LiA0LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHhpeC4gNC48L3RyYW5zbGF0aW9uPg=="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBldmVuIHNlbnQgaGlzIHNvbiB0byBBbnRpZ29udXMgd2l0aCB0aGUgb3RoZXIgaG9zdGFnZXMuIEF0IHRoaXMgdGhlIENvcmludGhpYW5zIHdlcmUgaW5kaWduYW50OyB0aGV5IHBsdW5kZXJlZCBoaXMgcHJvcGVydHkgYW5kIG1hZGUgYSBwcmVzZW50IG9mIGhpcyBob3VzZSB0byBDbGVvbWVuZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGFzIEFudGlnb251cyB3YXMgYXBwcm9hY2hpbmcgd2l0aCBoaXMgZm9yY2VzIChoZSB3YXMgZm9sbG93ZWQgYnkgdHdlbnR5IHRob3VzYW5kIE1hY2Vkb25pYW4gZm9vdG1lbiBhbmQgdGhpcnRlZW4gaHVuZHJlZCBob3JzZSksIEFyYXR1cywgaW4gY29tcGFueSB3aXRoIGhpcyBIaWdoIENvdW5jaWxsb3JzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgYm9keSBvZiB0ZW4gbWVuLCBjaG9zZW4gYXMgYWRtaXJlcnMgb2YgdGhlIGdlbmVyYWwuPC9ub3RlPiB3ZW50IGJ5IHNlYSB0byBtZWV0IGhpbSBhdCBQZWdhZSwgZWx1ZGluZyB0aGUgZW5lbXkuIEhlIGhhZCBubyB2ZXJ5IGdyZWF0IGNvbmZpZGVuY2UgaW4gQW50aWdvbnVzLCBhbmQgcHV0IG5vIHRydXN0IGluIHRoZSBNYWNlZG9uaWFucy4gRm9yIGhlIGtuZXcgdGhhdCBoaXMgb3duIHJpc2UgdG8gcG93ZXIgaGFkIGJlZW4gYSBjb25zZXF1ZW5jZSBvZiB0aGUgaGFybSBoZSBoYWQgZG9uZSB0byB0aGVtLCBhbmQgdGhhdCBoZSBoYWQgZm91bmQgdGhlIGZpcnN0IGFuZCB0aGUgY2hpZWYgYmFzaXMgZm9yIGhpcyBjb25kdWN0IG9mIGFmZmFpcnMgaW4gaGlzIGhhdHJlZCB0b3dhcmRzIHRoZSBmb3JtZXIgQW50aWdvbnVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyBHb25hdGFzLiAgU2VlIHRoZSBub3RlIG9uIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBcmF0LiAzNC4xIiB2YWxpZD0ieWVzIj54eHhpdi4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2VlaW5nIGhvdyBpbmV4b3JhYmxlIHdhcyB0aGUgbmVjZXNzaXR5IGxhaWQgdXBvbiBoaW0gaW4gdGhlIGRlbWFuZHMgb2YgdGhlIGhvdXIsIHRvIHdoaWNoIHRob3NlIHdlIGNhbGwgcnVsZXJzIGFyZSBzbGF2ZXMsIGhlIHdlbnQgb24gdG93YXJkcyB0aGUgZHJlYWQgb3JkZWFsLiBCdXQgQW50aWdvbnVzLCB3aGVuIGhlIHdhcyB0b2xkIHRoYXQgQXJhdHVzIHdhcyBjb21pbmcgdG8gaGltLCBnYXZlIHRoZSByZXN0IG9mIHRoZSBwYXJ0eSBhbiBvcmRpbmFyeSBhbmQgbW9kZXJhdGUgd2VsY29tZTsgQXJhdHVzLCBob3dldmVyLCBoZSByZWNlaXZlZCBhdCB0aGlzIGZpcnN0IG1lZXRpbmcgd2l0aCBzdXBlcmxhdGl2ZSBob25vdXIsIGFuZCBhZnRlcndhcmRzLCBmaW5kaW5nIGhpbSB0byBiZSBhIG1hbiBvZiB3b3J0aCBhbmQgd2lzZG9tLCBkcmV3IGhpbSBpbiBjbG9zZXIgaW50aW1hY3kgdG8gaGltc2VsZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgYXMgQW50aWdvbnVzIHdhcyBhcHByb2FjaGluZyB3aXRoIGhpcyBmb3JjZXMgKGhlIHdhcyBmb2xsb3dlZCBieSB0d2VudHkgdGhvdXNhbmQgTWFjZWRvbmlhbiBmb290bWVuIGFuZCB0aGlydGVlbiBodW5kcmVkIGhvcnNlKSwgQXJhdHVzLCBpbiBjb21wYW55IHdpdGggaGlzIEhpZ2ggQ291bmNpbGxvcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJvZHkgb2YgdGVuIG1lbiwgY2hvc2VuIGFzIGFkbWlyZXJzIG9mIHRoZSBnZW5lcmFsLjwvbm90ZT4gd2VudCBieSBzZWEgdG8gbWVldCBoaW0gYXQgUGVnYWUsIGVsdWRpbmcgdGhlIGVuZW15LiBIZSBoYWQgbm8gdmVyeSBncmVhdCBjb25maWRlbmNlIGluIEFudGlnb251cywgYW5kIHB1dCBubyB0cnVzdCBpbiB0aGUgTWFjZWRvbmlhbnMuIEZvciBoZSBrbmV3IHRoYXQgaGlzIG93biByaXNlIHRvIHBvd2VyIGhhZCBiZWVuIGEgY29uc2VxdWVuY2Ugb2YgdGhlIGhhcm0gaGUgaGFkIGRvbmUgdG8gdGhlbSwgYW5kIHRoYXQgaGUgaGFkIGZvdW5kIHRoZSBmaXJzdCBhbmQgdGhlIGNoaWVmIGJhc2lzIGZvciBoaXMgY29uZHVjdCBvZiBhZmZhaXJzIGluIGhpcyBoYXRyZWQgdG93YXJkcyB0aGUgZm9ybWVyIEFudGlnb251cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyBHb25hdGFzLiAgU2VlIHRoZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDM0LjEiIHZhbGlkPSJ5ZXMiPnh4eGl2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMzQuMSIgdmFsaWQ9InllcyI+eHh4aXYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzZWVpbmcgaG93IGluZXhvcmFibGUgd2FzIHRoZSBuZWNlc3NpdHkgbGFpZCB1cG9uIGhpbSBpbiB0aGUgZGVtYW5kcyBvZiB0aGUgaG91ciwgdG8gd2hpY2ggdGhvc2Ugd2UgY2FsbCBydWxlcnMgYXJlIHNsYXZlcywgaGUgd2VudCBvbiB0b3dhcmRzIHRoZSBkcmVhZCBvcmRlYWwuIEJ1dCBBbnRpZ29udXMsIHdoZW4gaGUgd2FzIHRvbGQgdGhhdCBBcmF0dXMgd2FzIGNvbWluZyB0byBoaW0sIGdhdmUgdGhlIHJlc3Qgb2YgdGhlIHBhcnR5IGFuIG9yZGluYXJ5IGFuZCBtb2RlcmF0ZSB3ZWxjb21lOyBBcmF0dXMsIGhvd2V2ZXIsIGhlIHJlY2VpdmVkIGF0IHRoaXMgZmlyc3QgbWVldGluZyB3aXRoIHN1cGVybGF0aXZlIGhvbm91ciwgYW5kIGFmdGVyd2FyZHMsIGZpbmRpbmcgaGltIHRvIGJlIGEgbWFuIG9mIHdvcnRoIGFuZCB3aXNkb20sIGRyZXcgaGltIGluIGNsb3NlciBpbnRpbWFjeSB0byBoaW1zZWxmLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQXJhdHVzIHdhcyBub3Qgb25seSBoZWxwZnVsIGluIGxhcmdlIHVuZGVydGFraW5ncywgYnV0IGFsc28gbW9yZSBhY2NlcHRhYmxlIHRoYW4gYW55b25lIGVsc2UgYXMgYSBjb21wYW5pb24gaW4gdGhlIGtpbmcncyBsZWlzdXJlIGhvdXJzLiBUaGVyZWZvcmUsIGFsdGhvdWdoIEFudGlnb251cyB3YXMgeW91bmcsIGFzIHNvb24gYXMgaGUgcGVyY2VpdmVkIHRoYXQgQXJhdHVzIHdhcyBuYXR1cmFsbHkgd2VsbCBmaXR0ZWQgdG8gYmUgYSBraW5nJ3MgZnJpZW5kLCBoZSBjb250aW51YWxseSB0cmVhdGVkIGhpbSB3aXRoIGdyZWF0ZXIgaW50aW1hY3kgdGhhbiBhbnlvbmUgZWxzZSwgd2hldGhlciBvZiB0aGUgQWNoYWVhbnMsIG9yIG9mIHRoZSBNYWNlZG9uaWFucyBpbiBoaXMgZm9sbG93aW5nOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGh1cyB0aGUgb21lbiBwcm92ZWQgdHJ1ZSB3aGljaCB0aGUgZ29kIGhhZCBnaXZlbiB0byBBcmF0dXMgaW4gaGlzIHNhY3JpZmljaWFsIHZpY3RpbXMuIEZvciBpdCBpcyByZWxhdGVkIHRoYXQgYXMgaGUgd2FzIHNhY3JpZmljaW5nIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSB0aGlzLCBhIGxpdmVyIHdhcyBmb3VuZCB3aGljaCBoYWQgdHdvIGdhbGwtYmxhZGRlcnMgZW5jbG9zZWQgaW4gYSBzaW5nbGUgY29pbCBvZiBmYXQ7IHdoZXJldXBvbiB0aGUgc2VlciBoYWQgZGVjbGFyZWQgdGhhdCBBcmF0dXMgd291bGQgc29vbiBlbnRlciBpbnRvIGNsb3NlIGZyaWVuZHNoaXAgd2l0aCB3aGF0IGhlIG1vc3QgaGF0ZWQgYW5kIGZvdWdodCBhZ2FpbnN0LiBBdCB0aGUgdGltZSwgdGhlbiwgQXJhdHVzIHBhaWQgbm8gaGVlZCB0byB0aGUgdXR0ZXJhbmNlLCBzaW5jZSBpbiBnZW5lcmFsIGhlIHB1dCBsaXR0bGUgZmFpdGggaW4gdmljdGltcyBhbmQgZGl2aW5hdGlvbnMsIGFuZCB0cnVzdGVkIHJhdGhlciB0byBoaXMgcmVhc29uaW5nIHBvd2Vycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TGF0ZXIsIGhvd2V2ZXIsIHdoZW4gdGhlIHdhciB3YXMgZ29pbmcgb24gd2VsbCwgQW50aWdvbnVzIGdhdmUgYSBmZWFzdCBpbiBDb3JpbnRoLCBhdCB3aGljaCBoZSBoYWQgbWFueSBndWVzdHMsIGFuZCBtYWRlIEFyYXR1cyByZWNsaW5lIGp1c3QgYWJvdmUgaGltc2VsZi4gQWZ0ZXIgYSBsaXR0bGUgd2hpbGUgdGhlIGtpbmcgY2FsbGVkIGZvciBhIGNvdmVybGV0LCBhbmQgYXNrZWQgQXJhdHVzIGlmIGhlIHRvbyBkaWQgbm90IHRoaW5rIGl0IGNvbGQ7IGFuZCB3aGVuIEFyYXR1cyByZXBsaWVkIHRoYXQgaGUgd2FzIHZlcnkgY2hpbGx5LCB0aGUga2luZyBvcmRlcmVkIGhpbSB0byBjb21lIG5lYXJlcjsgc28gdGhhdCB0aGUgcnVnIHdoaWNoIHRoZSBzZXJ2YW50cyBicm91Z2h0IHdhcyB0aHJvd24gb3ZlciBib3RoIG9mIHRoZW0gdG9nZXRoZXIuIFRoZW4sIGluZGVlZCwgQXJhdHVzIGNhbGxlZCB0byBtaW5kIGhpcyBzYWNyaWZpY2lhbCB2aWN0aW1zIGFuZCBidXJzdCBvdXQgbGF1Z2hpbmcsIGFuZCB0b2xkIHRoZSBraW5nIGFib3V0IHRoZSBvbWVuIGFuZCB0aGUgc2VlcidzIHByZWRpY3Rpb24uIEJ1dCB0aGlzIHRvb2sgcGxhY2UgYXQgYSBsYXRlciB0aW1lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBcmF0dXMgd2FzIG5vdCBvbmx5IGhlbHBmdWwgaW4gbGFyZ2UgdW5kZXJ0YWtpbmdzLCBidXQgYWxzbyBtb3JlIGFjY2VwdGFibGUgdGhhbiBhbnlvbmUgZWxzZSBhcyBhIGNvbXBhbmlvbiBpbiB0aGUga2luZydzIGxlaXN1cmUgaG91cnMuIFRoZXJlZm9yZSwgYWx0aG91Z2ggQW50aWdvbnVzIHdhcyB5b3VuZywgYXMgc29vbiBhcyBoZSBwZXJjZWl2ZWQgdGhhdCBBcmF0dXMgd2FzIG5hdHVyYWxseSB3ZWxsIGZpdHRlZCB0byBiZSBhIGtpbmcncyBmcmllbmQsIGhlIGNvbnRpbnVhbGx5IHRyZWF0ZWQgaGltIHdpdGggZ3JlYXRlciBpbnRpbWFjeSB0aGFuIGFueW9uZSBlbHNlLCB3aGV0aGVyIG9mIHRoZSBBY2hhZWFucywgb3Igb2YgdGhlIE1hY2Vkb25pYW5zIGluIGhpcyBmb2xsb3dpbmc7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aHVzIHRoZSBvbWVuIHByb3ZlZCB0cnVlIHdoaWNoIHRoZSBnb2QgaGFkIGdpdmVuIHRvIEFyYXR1cyBpbiBoaXMgc2FjcmlmaWNpYWwgdmljdGltcy4gRm9yIGl0IGlzIHJlbGF0ZWQgdGhhdCBhcyBoZSB3YXMgc2FjcmlmaWNpbmcgYSBsaXR0bGUgd2hpbGUgYmVmb3JlIHRoaXMsIGEgbGl2ZXIgd2FzIGZvdW5kIHdoaWNoIGhhZCB0d28gZ2FsbC1ibGFkZGVycyBlbmNsb3NlZCBpbiBhIHNpbmdsZSBjb2lsIG9mIGZhdDsgd2hlcmV1cG9uIHRoZSBzZWVyIGhhZCBkZWNsYXJlZCB0aGF0IEFyYXR1cyB3b3VsZCBzb29uIGVudGVyIGludG8gY2xvc2UgZnJpZW5kc2hpcCB3aXRoIHdoYXQgaGUgbW9zdCBoYXRlZCBhbmQgZm91Z2h0IGFnYWluc3QuIEF0IHRoZSB0aW1lLCB0aGVuLCBBcmF0dXMgcGFpZCBubyBoZWVkIHRvIHRoZSB1dHRlcmFuY2UsIHNpbmNlIGluIGdlbmVyYWwgaGUgcHV0IGxpdHRsZSBmYWl0aCBpbiB2aWN0aW1zIGFuZCBkaXZpbmF0aW9ucywgYW5kIHRydXN0ZWQgcmF0aGVyIHRvIGhpcyByZWFzb25pbmcgcG93ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkxhdGVyLCBob3dldmVyLCB3aGVuIHRoZSB3YXIgd2FzIGdvaW5nIG9uIHdlbGwsIEFudGlnb251cyBnYXZlIGEgZmVhc3QgaW4gQ29yaW50aCwgYXQgd2hpY2ggaGUgaGFkIG1hbnkgZ3Vlc3RzLCBhbmQgbWFkZSBBcmF0dXMgcmVjbGluZSBqdXN0IGFib3ZlIGhpbXNlbGYuIEFmdGVyIGEgbGl0dGxlIHdoaWxlIHRoZSBraW5nIGNhbGxlZCBmb3IgYSBjb3ZlcmxldCwgYW5kIGFza2VkIEFyYXR1cyBpZiBoZSB0b28gZGlkIG5vdCB0aGluayBpdCBjb2xkOyBhbmQgd2hlbiBBcmF0dXMgcmVwbGllZCB0aGF0IGhlIHdhcyB2ZXJ5IGNoaWxseSwgdGhlIGtpbmcgb3JkZXJlZCBoaW0gdG8gY29tZSBuZWFyZXI7IHNvIHRoYXQgdGhlIHJ1ZyB3aGljaCB0aGUgc2VydmFudHMgYnJvdWdodCB3YXMgdGhyb3duIG92ZXIgYm90aCBvZiB0aGVtIHRvZ2V0aGVyLiBUaGVuLCBpbmRlZWQsIEFyYXR1cyBjYWxsZWQgdG8gbWluZCBoaXMgc2FjcmlmaWNpYWwgdmljdGltcyBhbmQgYnVyc3Qgb3V0IGxhdWdoaW5nLCBhbmQgdG9sZCB0aGUga2luZyBhYm91dCB0aGUgb21lbiBhbmQgdGhlIHNlZXIncyBwcmVkaWN0aW9uLiBCdXQgdGhpcyB0b29rIHBsYWNlIGF0IGEgbGF0ZXIgdGltZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgUGVnYWUgQW50aWdvbnVzIGFuZCBBcmF0dXMgZXhjaGFuZ2VkIG9hdGhzIG9mIGZpZGVsaXR5LCBhbmQgc3RyYWlnaHR3YXkgbWFyY2hlZCBhZ2FpbnN0IHRoZSBlbmVteSBhdCBDb3JpbnRoLiBBbmQgdGhlcmUgd2VyZSBjb25mbGljdHMgYWJvdXQgdGhlIGNpdHksIENsZW9tZW5lcyBiZWluZyB3ZWxsIGZvcnRpZmllZCwgYW5kIHRoZSBDb3JpbnRoaWFucyBkZWZlbmRpbmcgdGhlbXNlbHZlcyB3aXRoIGFyZG91ci4gTWVhbndoaWxlLCBob3dldmVyLCBBcmlzdG90bGUgdGhlIEFyZ2l2ZSwgd2hvIHdhcyBhIGZyaWVuZCBvZiBBcmF0dXMsIHNlbnQgc2VjcmV0bHkgdG8gaGltIGFuZCBwcm9taXNlZCB0byBicmluZyBoaXMgY2l0eSB0byByZXZvbHQgZnJvbSBDbGVvbWVuZXMgaWYgQXJhdHVzIHdvdWxkIGNvbWUgdGhpdGhlciB3aXRoIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBBcmF0dXMsIGFmdGVyIGluZm9ybWluZyBBbnRpZ29udXMsIHRvb2sgZmlmdGVlbiBodW5kcmVkIG1lbiBhbmQgc2FpbGVkIGZyb20gdGhlIElzdGhtdXMgdG8gRXBpZGF1cnVzIHdpdGggYWxsIHNwZWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyMC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNsZW9tZW5lczwvdGl0bGU+LCB4eC4gMyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBCdXQgdGhlIEFyZ2l2ZXMsIHJldm9sdGluZyBwcmVtYXR1cmVseSwgYXR0YWNrZWQgdGhlIGdhcnJpc29uIG9mIENsZW9tZW5lcyBhbmQgc2h1dCB0aGVtIHVwIGluIHRoZSBjaXRhZGVsLCBhbmQgQ2xlb21lbmVzLCBsZWFybmluZyBvZiB0aGlzLCBhbmQgZmVhcmluZyB0aGF0IGlmIGhpcyBlbmVtaWVzIGdvdCBwb3NzZXNzaW9uIG9mIEFyZ29zIHRoZXkgd291bGQgY3V0IGhpbSBvZmYgZnJvbSBhIHNhZmUgcmV0dXJuIGhvbWUsIGFiYW5kb25lZCBBY3JvY29yaW50aHVzIHdoaWxlIGl0IHdhcyBzdGlsbCBuaWdodCBhbmQgd2VudCB0byB0aGVpciBhaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHN1Y2NlZWRlZCBpbiBnZXR0aW5nIGludG8gQXJnb3MgZmlyc3QsIHJvdXRpbmcgc29tZSBvZiB0aGUgZW5lbXkgb24gdGhlIHdheTsgYnV0IHNob3J0bHkgYWZ0ZXJ3YXJkcyBBcmF0dXMgY2FtZSB1cCwgYW5kIEFudGlnb251cyBzaG93ZWQgaGltc2VsZiB3aXRoIGhpcyBmb3JjZXMsIGFuZCBDbGVvbWVuZXMgdGhlcmVmb3JlIHJldHJlYXRlZCB0byBNYW50aW5laWEuIFVwb24gdGhpcyB0aGUgY2l0aWVzIGFsbCBjYW1lIG92ZXIgdG8gdGhlIEFjaGFlYW5zIGFnYWluLCBBY3JvY29yaW50aHVzIHdhcyBoYW5kZWQgb3ZlciB0byBBbnRpZ29udXMsIGFuZCBBcmF0dXMsIGhhdmluZyBiZWVuIGNob3NlbiBnZW5lcmFsIGJ5IHRoZSBBcmdpdmVzLCBwZXJzdWFkZWQgdGhlbSB0byBtYWtlIGEgcHJlc2VudCB0byBBbnRpZ29udXMgb2YgdGhlIHByb3BlcnR5IG9mIHRoZSB0eXJhbnRzIGFuZCBvZiB0aGUgdHJhaXRvcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBBcmlzdG9tYWNodXMsIGhlIHdhcyB0b3J0dXJlZCBhdCBDZW5jaHJlYWUgYW5kIHRoZW4gdGhyb3duIGludG8gdGhlIHNlYTsgZm9yIHdoaWNoIGRlZWQsIG1vcmUgdGhhbiBhbnkgb3RoZXIsIEFyYXR1cyB3YXMgcmVwcm9hY2hlZCwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIGhhZCBhbGxvd2VkIGEgbWFuIHRvIGJlIGxhd2xlc3NseSBwdXQgdG8gZGVhdGggd2hvIHdhcyBub3Qgd2lja2VkLCBidXQgaGFkIGNvb3BlcmF0ZWQgd2l0aCBoaW0sIGFuZCBhdCBoaXMgcGVyc3Vhc2lvbiBoYWQgcmVub3VuY2VkIGhpcyBwb3dlciBhbmQgYXR0YWNoZWQgaGlzIGNpdHkgdG8gdGhlIEFjaGFlYW4gTGVhZ3VlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQXJhdC4gMzUuMSIgdmFsaWQ9InllcyI+Y2hhcC4geHh4di48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgUGVnYWUgQW50aWdvbnVzIGFuZCBBcmF0dXMgZXhjaGFuZ2VkIG9hdGhzIG9mIGZpZGVsaXR5LCBhbmQgc3RyYWlnaHR3YXkgbWFyY2hlZCBhZ2FpbnN0IHRoZSBlbmVteSBhdCBDb3JpbnRoLiBBbmQgdGhlcmUgd2VyZSBjb25mbGljdHMgYWJvdXQgdGhlIGNpdHksIENsZW9tZW5lcyBiZWluZyB3ZWxsIGZvcnRpZmllZCwgYW5kIHRoZSBDb3JpbnRoaWFucyBkZWZlbmRpbmcgdGhlbXNlbHZlcyB3aXRoIGFyZG91ci4gTWVhbndoaWxlLCBob3dldmVyLCBBcmlzdG90bGUgdGhlIEFyZ2l2ZSwgd2hvIHdhcyBhIGZyaWVuZCBvZiBBcmF0dXMsIHNlbnQgc2VjcmV0bHkgdG8gaGltIGFuZCBwcm9taXNlZCB0byBicmluZyBoaXMgY2l0eSB0byByZXZvbHQgZnJvbSBDbGVvbWVuZXMgaWYgQXJhdHVzIHdvdWxkIGNvbWUgdGhpdGhlciB3aXRoIHNvbGRpZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIEFyYXR1cywgYWZ0ZXIgaW5mb3JtaW5nIEFudGlnb251cywgdG9vayBmaWZ0ZWVuIGh1bmRyZWQgbWVuIGFuZCBzYWlsZWQgZnJvbSB0aGUgSXN0aG11cyB0byBFcGlkYXVydXMgd2l0aCBhbGwgc3BlZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENsZW9tLiAyMC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4LiAzIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEJ1dCB0aGUgQXJnaXZlcywgcmV2b2x0aW5nIHByZW1hdHVyZWx5LCBhdHRhY2tlZCB0aGUgZ2Fycmlzb24gb2YgQ2xlb21lbmVzIGFuZCBzaHV0IHRoZW0gdXAgaW4gdGhlIGNpdGFkZWwsIGFuZCBDbGVvbWVuZXMsIGxlYXJuaW5nIG9mIHRoaXMsIGFuZCBmZWFyaW5nIHRoYXQgaWYgaGlzIGVuZW1pZXMgZ290IHBvc3Nlc3Npb24gb2YgQXJnb3MgdGhleSB3b3VsZCBjdXQgaGltIG9mZiBmcm9tIGEgc2FmZSByZXR1cm4gaG9tZSwgYWJhbmRvbmVkIEFjcm9jb3JpbnRodXMgd2hpbGUgaXQgd2FzIHN0aWxsIG5pZ2h0IGFuZCB3ZW50IHRvIHRoZWlyIGFpZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMjAuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eC4gMyBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4LiAzIGYuPC90cmFuc2xhdGlvbj4="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIHN1Y2NlZWRlZCBpbiBnZXR0aW5nIGludG8gQXJnb3MgZmlyc3QsIHJvdXRpbmcgc29tZSBvZiB0aGUgZW5lbXkgb24gdGhlIHdheTsgYnV0IHNob3J0bHkgYWZ0ZXJ3YXJkcyBBcmF0dXMgY2FtZSB1cCwgYW5kIEFudGlnb251cyBzaG93ZWQgaGltc2VsZiB3aXRoIGhpcyBmb3JjZXMsIGFuZCBDbGVvbWVuZXMgdGhlcmVmb3JlIHJldHJlYXRlZCB0byBNYW50aW5laWEuIFVwb24gdGhpcyB0aGUgY2l0aWVzIGFsbCBjYW1lIG92ZXIgdG8gdGhlIEFjaGFlYW5zIGFnYWluLCBBY3JvY29yaW50aHVzIHdhcyBoYW5kZWQgb3ZlciB0byBBbnRpZ29udXMsIGFuZCBBcmF0dXMsIGhhdmluZyBiZWVuIGNob3NlbiBnZW5lcmFsIGJ5IHRoZSBBcmdpdmVzLCBwZXJzdWFkZWQgdGhlbSB0byBtYWtlIGEgcHJlc2VudCB0byBBbnRpZ29udXMgb2YgdGhlIHByb3BlcnR5IG9mIHRoZSB0eXJhbnRzIGFuZCBvZiB0aGUgdHJhaXRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBBcmlzdG9tYWNodXMsIGhlIHdhcyB0b3J0dXJlZCBhdCBDZW5jaHJlYWUgYW5kIHRoZW4gdGhyb3duIGludG8gdGhlIHNlYTsgZm9yIHdoaWNoIGRlZWQsIG1vcmUgdGhhbiBhbnkgb3RoZXIsIEFyYXR1cyB3YXMgcmVwcm9hY2hlZCwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIGhhZCBhbGxvd2VkIGEgbWFuIHRvIGJlIGxhd2xlc3NseSBwdXQgdG8gZGVhdGggd2hvIHdhcyBub3Qgd2lja2VkLCBidXQgaGFkIGNvb3BlcmF0ZWQgd2l0aCBoaW0sIGFuZCBhdCBoaXMgcGVyc3Vhc2lvbiBoYWQgcmVub3VuY2VkIGhpcyBwb3dlciBhbmQgYXR0YWNoZWQgaGlzIGNpdHkgdG8gdGhlIEFjaGFlYW4gTGVhZ3VlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDM1LjEiIHZhbGlkPSJ5ZXMiPmNoYXAuIHh4eHYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFyYXQuIDM1LjEiIHZhbGlkPSJ5ZXMiPmNoYXAuIHh4eHYuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QcmVzZW50bHksIHRvbywgbWVuIGJlZ2FuIHRvIGJsYW1lIEFyYXR1cyBmb3Igd2hhdGV2ZXIgZWxzZSB3YXMgZG9uZSwgYXMsIGZvciBpbnN0YW5jZSwgdGhhdCB0aGUgQWNoYWVhbnMgbWFkZSBhIHByZXNlbnQgdG8gQW50aWdvbnVzIG9mIHRoZSBjaXR5IG9mIENvcmludGgsIGFzIGlmIGl0IGhhZCBiZWVuIGFuIG9yZGluYXJ5IHZpbGxhZ2U7IHRoYXQgdGhleSBhbGxvd2VkIHRoZSBraW5nIHRvIHBsdW5kZXIgT3JjaG9tZW51cyBhbmQgcHV0IGEgTWFjZWRvbmlhbiBnYXJyaXNvbiBpbiBpdDsgdGhhdCB0aGV5IGRlY3JlZWQgbm90IHRvIHdyaXRlIG9yIHNlbmQgYW4gZW1iYXNzeSB0byBhbnkgb3RoZXIga2luZyBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgQW50aWdvbnVzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IHRoZXkgd2VyZSBmb3JjZWQgdG8gZnVybmlzaCBzdXBwbGllcyBhbmQgcGF5IGZvciB0aGUgTWFjZWRvbmlhbiB0cm9vcHM7IGFuZCB0aGF0IHRoZXkgY2VsZWJyYXRlZCBzYWNyaWZpY2VzLCBwcm9jZXNzaW9ucywgYW5kIGdhbWVzIGluIGhvbm91ciBvZiBBbnRpZ29udXMsIHRoZSBmZWxsb3ctY2l0aXplbnMgb2YgQXJhdHVzIGxlYWRpbmcgdGhlIHdheSBhbmQgcmVjZWl2aW5nIEFudGlnb251cyBpbnRvIHRoZWlyIGNpdHksIHdoZXJlIGhlIHdhcyB0aGUgZ3Vlc3Qgb2YgQXJhdHVzLiBGb3IgYWxsIHRoZXNlIHRoaW5ncyBtZW4gYmxhbWVkIEFyYXR1cywgbm90IGtub3dpbmcgdGhhdCwgc2luY2UgaGUgaGFkIGVudHJ1c3RlZCB0aGUgcmVpbnMgdG8gdGhlIGtpbmcgYW5kIHdhcyBkcmFnZ2VkIGFsb25nIGluIHRoZSB3YWtlIG9mIHRoZSBraW5nJ3MgcG93ZXIsIGhlIHdhcyBubyBsb25nZXIgbWFzdGVyIG9mIGFueXRoaW5nIGV4Y2VwdCBoaXMgdG9uZ3VlLCB3aGljaCBpdCB3YXMgZGFuZ2Vyb3VzIGZvciBoaW0gdG8gdXNlIHdpdGggZnJlZWRvbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUgQXJhdHVzIHdhcyBwbGFpbmx5IGFubm95ZWQgYXQgbWFueSBhY3RzIG9mIHRoZSBraW5nLCBhbmQgZXNwZWNpYWxseSBhdCBoaXMgdHJlYXRtZW50IG9mIHRoZSBzdGF0dWVzIGluIEFyZ29zOyBmb3IgdGhvc2Ugb2YgdGhlIHR5cmFudHMsIHdoaWNoIGhhZCBiZWVuIGNhc3QgZG93biwgQW50aWdvbnVzIHNldCB1cCBhZ2Fpbiwgd2hpbGUgdGhvc2Ugb2YgdGhlIGNhcHRvcnMgb2YgQWNyb2NvcmludGh1cywgd2hpY2ggd2VyZSBzdGFuZGluZywgaGUgdGhyZXcgZG93biwgdGhhdCBvZiBBcmF0dXMgb25seSBleGNlcHRlZDsgYW5kIHRob3VnaCBBcmF0dXMgbWFkZSBtYW55IGFwcGVhbHMgdG8gaGltIGluIHRoZSBtYXR0ZXIsIGhlIGNvdWxkIG5vdCBwZXJzdWFkZSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aG91Z2h0IGFsc28gdGhhdCB0aGUgdHJlYXRtZW50IG9mIE1hbnRpbmVpYSBieSB0aGUgQWNoYWVhbnMgd2FzIG5vdCBpbiBhY2NvcmQgd2l0aCB0aGUgR3JlZWsgc3Bpcml0LiBGb3IgYWZ0ZXIgbWFzdGVyaW5nIHRoYXQgY2l0eSB3aXRoIHRoZSBhaWQgb2YgQW50aWdvbnVzLCB0aGV5IHB1dCB0byBkZWF0aCB0aGUgbGVhZGluZyBhbmQgbW9zdCBub3RlZCBjaXRpemVucywgYW5kIG9mIHRoZSByZXN0LCBzb21lIHRoZXkgc29sZCBpbnRvIHNsYXZlcnksIHdoaWxlIG90aGVycyB0aGV5IHNlbnQgb2ZmIGludG8gTWFjZWRvbmlhIGluIGNoYWlucywgYW5kIG1hZGUgc2xhdmVzIG9mIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgZGl2aWRpbmcgYSB0aGlyZCBvZiB0aGUgbW9uZXkgdGh1cyByYWlzZWQgYW1vbmcgdGhlbXNlbHZlcywgYW5kIGdpdmluZyB0aGUgcmVtYWluaW5nIHR3by10aGlyZHMgdG8gdGhlIE1hY2Vkb25pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyB0cnVlIHRoYXQgdGhpcyBjYW1lIHVuZGVyIHRoZSBsYXcgb2YgcmVwcmlzYWw7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHJlcGVhdGVkIHRyZWFjaGVyaWVzIG9mIHRoZSBNYW50aW5laWFucyB0b3dhcmRzIHRoZSBBY2hhZWFucyBhcmUgcmVsYXRlZCBhdCBsZW5ndGggaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi41NyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpLiA1NyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgdGhvdWdoIGl0IGlzIGEgdGVycmlibGUgdGhpbmcgdG8gdHJlYXQgbWVuIG9mIHRoZSBzYW1lIHJhY2UgYW5kIGJsb29kIGluIHRoaXMgd2F5LCBvdXQgb2YgYW5nZXIsIHN0aWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gZGlyZSBzdHJlc3MgZXZlbiBjcnVlbHR5IGlzIHN3ZWV0LDwvcT4gYXMgU2ltb25pZGVzIHNheXMsIHdoZW4gbWVuLCBhcyBpdCB3ZXJlLCBnaXZlIHNhdGlzZmFjdGlvbiBhbmQgaGVhbGluZyBjYXJlIHRvIGEgbWluZCB0aGF0IGlzIGluIGFuZ3Vpc2ggYW5kIGluZmxhbWVkLiBCdXQgdGhlIHN1YnNlcXVlbnQgdHJlYXRtZW50IG9mIHRoZSBjaXR5IGJ5IEFyYXR1cyB3YXMgbmVpdGhlciBuZWNlc3Nhcnkgbm9yIGhvbm91cmFibGUsIGFuZCBjYW5ub3QgYmUgZXhjdXNlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFmdGVyIHRoZSBBY2hhZWFucyBoYWQgcmVjZWl2ZWQgdGhlIGNpdHkgZnJvbSBBbnRpZ29udXMgYXMgYSBwcmVzZW50IGFuZCBoYWQgZGVjaWRlZCB0byBjb2xvbml6ZSBpdCwgQXJhdHVzIGhpbXNlbGYgd2FzIGNob3NlbiB0byBiZSB0aGUgZm91bmRlciBvZiB0aGUgbmV3IHNldHRsZW1lbnQsIGFuZCBiZWluZyB0aGVuIGdlbmVyYWwsIGdvdCBhIGRlY3JlZSBwYXNzZWQgdGhhdCB0aGUgY2l0eSBzaG91bGQgbm8gbG9uZ2VyIGJlIGNhbGxlZCBNYW50aW5laWEsIGJ1dCBBbnRpZ29uZWlhLCBhbmQgdGhpcyBpcyBpdHMgbmFtZSBkb3duIHRvIHRoZSBwcmVzZW50IHRpbWUuIEFuZCBzbyBpdCB3YXMgZHVlIHRvIEFyYXR1cyB0aGF0IHRoZSBuYW1lIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bG92ZWx5IE1hbnRpbmVpYTwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyLjYwNyIgdmFsaWQ9InllcyI+SG9tZXIsIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCBpaS4gNjA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3YXMgYWx0b2dldGhlciBleHRpbmd1aXNoZWQsIGFuZCB0aGUgY2l0eSBjb250aW51ZXMgdG8gYmVhciB0aGUgbmFtZSBvZiBoaW0gd2hvIGRlc3Ryb3llZCBhbmQgc2xldyBpdHMgZm9ybWVyIGNpdGl6ZW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBvbGQgbmFtZSBvZiB0aGUgY2l0eSB3YXMgcmVzdG9yZWQgYnkgdGhlIEVtcGVyb3IgSGFkcmlhbiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDguOC4xMiIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCB2aWlpLiA4LiAxMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5LCB0b28sIG1lbiBiZWdhbiB0byBibGFtZSBBcmF0dXMgZm9yIHdoYXRldmVyIGVsc2Ugd2FzIGRvbmUsIGFzLCBmb3IgaW5zdGFuY2UsIHRoYXQgdGhlIEFjaGFlYW5zIG1hZGUgYSBwcmVzZW50IHRvIEFudGlnb251cyBvZiB0aGUgY2l0eSBvZiBDb3JpbnRoLCBhcyBpZiBpdCBoYWQgYmVlbiBhbiBvcmRpbmFyeSB2aWxsYWdlOyB0aGF0IHRoZXkgYWxsb3dlZCB0aGUga2luZyB0byBwbHVuZGVyIE9yY2hvbWVudXMgYW5kIHB1dCBhIE1hY2Vkb25pYW4gZ2Fycmlzb24gaW4gaXQ7IHRoYXQgdGhleSBkZWNyZWVkIG5vdCB0byB3cml0ZSBvciBzZW5kIGFuIGVtYmFzc3kgdG8gYW55IG90aGVyIGtpbmcgYWdhaW5zdCB0aGUgd2lzaGVzIG9mIEFudGlnb251czsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgdGhleSB3ZXJlIGZvcmNlZCB0byBmdXJuaXNoIHN1cHBsaWVzIGFuZCBwYXkgZm9yIHRoZSBNYWNlZG9uaWFuIHRyb29wczsgYW5kIHRoYXQgdGhleSBjZWxlYnJhdGVkIHNhY3JpZmljZXMsIHByb2Nlc3Npb25zLCBhbmQgZ2FtZXMgaW4gaG9ub3VyIG9mIEFudGlnb251cywgdGhlIGZlbGxvdy1jaXRpemVucyBvZiBBcmF0dXMgbGVhZGluZyB0aGUgd2F5IGFuZCByZWNlaXZpbmcgQW50aWdvbnVzIGludG8gdGhlaXIgY2l0eSwgd2hlcmUgaGUgd2FzIHRoZSBndWVzdCBvZiBBcmF0dXMuIEZvciBhbGwgdGhlc2UgdGhpbmdzIG1lbiBibGFtZWQgQXJhdHVzLCBub3Qga25vd2luZyB0aGF0LCBzaW5jZSBoZSBoYWQgZW50cnVzdGVkIHRoZSByZWlucyB0byB0aGUga2luZyBhbmQgd2FzIGRyYWdnZWQgYWxvbmcgaW4gdGhlIHdha2Ugb2YgdGhlIGtpbmcncyBwb3dlciwgaGUgd2FzIG5vIGxvbmdlciBtYXN0ZXIgb2YgYW55dGhpbmcgZXhjZXB0IGhpcyB0b25ndWUsIHdoaWNoIGl0IHdhcyBkYW5nZXJvdXMgZm9yIGhpbSB0byB1c2Ugd2l0aCBmcmVlZG9tLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlIEFyYXR1cyB3YXMgcGxhaW5seSBhbm5veWVkIGF0IG1hbnkgYWN0cyBvZiB0aGUga2luZywgYW5kIGVzcGVjaWFsbHkgYXQgaGlzIHRyZWF0bWVudCBvZiB0aGUgc3RhdHVlcyBpbiBBcmdvczsgZm9yIHRob3NlIG9mIHRoZSB0eXJhbnRzLCB3aGljaCBoYWQgYmVlbiBjYXN0IGRvd24sIEFudGlnb251cyBzZXQgdXAgYWdhaW4sIHdoaWxlIHRob3NlIG9mIHRoZSBjYXB0b3JzIG9mIEFjcm9jb3JpbnRodXMsIHdoaWNoIHdlcmUgc3RhbmRpbmcsIGhlIHRocmV3IGRvd24sIHRoYXQgb2YgQXJhdHVzIG9ubHkgZXhjZXB0ZWQ7IGFuZCB0aG91Z2ggQXJhdHVzIG1hZGUgbWFueSBhcHBlYWxzIHRvIGhpbSBpbiB0aGUgbWF0dGVyLCBoZSBjb3VsZCBub3QgcGVyc3VhZGUgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aG91Z2h0IGFsc28gdGhhdCB0aGUgdHJlYXRtZW50IG9mIE1hbnRpbmVpYSBieSB0aGUgQWNoYWVhbnMgd2FzIG5vdCBpbiBhY2NvcmQgd2l0aCB0aGUgR3JlZWsgc3Bpcml0LiBGb3IgYWZ0ZXIgbWFzdGVyaW5nIHRoYXQgY2l0eSB3aXRoIHRoZSBhaWQgb2YgQW50aWdvbnVzLCB0aGV5IHB1dCB0byBkZWF0aCB0aGUgbGVhZGluZyBhbmQgbW9zdCBub3RlZCBjaXRpemVucywgYW5kIG9mIHRoZSByZXN0LCBzb21lIHRoZXkgc29sZCBpbnRvIHNsYXZlcnksIHdoaWxlIG90aGVycyB0aGV5IHNlbnQgb2ZmIGludG8gTWFjZWRvbmlhIGluIGNoYWlucywgYW5kIG1hZGUgc2xhdmVzIG9mIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgZGl2aWRpbmcgYSB0aGlyZCBvZiB0aGUgbW9uZXkgdGh1cyByYWlzZWQgYW1vbmcgdGhlbXNlbHZlcywgYW5kIGdpdmluZyB0aGUgcmVtYWluaW5nIHR3by10aGlyZHMgdG8gdGhlIE1hY2Vkb25pYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHRydWUgdGhhdCB0aGlzIGNhbWUgdW5kZXIgdGhlIGxhdyBvZiByZXByaXNhbDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSByZXBlYXRlZCB0cmVhY2hlcmllcyBvZiB0aGUgTWFudGluZWlhbnMgdG93YXJkcyB0aGUgQWNoYWVhbnMgYXJlIHJlbGF0ZWQgYXQgbGVuZ3RoIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMi41NyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpLiA1NyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgdGhvdWdoIGl0IGlzIGEgdGVycmlibGUgdGhpbmcgdG8gdHJlYXQgbWVuIG9mIHRoZSBzYW1lIHJhY2UgYW5kIGJsb29kIGluIHRoaXMgd2F5LCBvdXQgb2YgYW5nZXIsIHN0aWxsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAyLjU3IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgaWkuIDU3IGYuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIGRpcmUgc3RyZXNzIGV2ZW4gY3J1ZWx0eSBpcyBzd2VldCw8L3E+IGFzIFNpbW9uaWRlcyBzYXlzLCB3aGVuIG1lbiwgYXMgaXQgd2VyZSwgZ2l2ZSBzYXRpc2ZhY3Rpb24gYW5kIGhlYWxpbmcgY2FyZSB0byBhIG1pbmQgdGhhdCBpcyBpbiBhbmd1aXNoIGFuZCBpbmZsYW1lZC4gQnV0IHRoZSBzdWJzZXF1ZW50IHRyZWF0bWVudCBvZiB0aGUgY2l0eSBieSBBcmF0dXMgd2FzIG5laXRoZXIgbmVjZXNzYXJ5IG5vciBob25vdXJhYmxlLCBhbmQgY2Fubm90IGJlIGV4Y3VzZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhZnRlciB0aGUgQWNoYWVhbnMgaGFkIHJlY2VpdmVkIHRoZSBjaXR5IGZyb20gQW50aWdvbnVzIGFzIGEgcHJlc2VudCBhbmQgaGFkIGRlY2lkZWQgdG8gY29sb25pemUgaXQsIEFyYXR1cyBoaW1zZWxmIHdhcyBjaG9zZW4gdG8gYmUgdGhlIGZvdW5kZXIgb2YgdGhlIG5ldyBzZXR0bGVtZW50LCBhbmQgYmVpbmcgdGhlbiBnZW5lcmFsLCBnb3QgYSBkZWNyZWUgcGFzc2VkIHRoYXQgdGhlIGNpdHkgc2hvdWxkIG5vIGxvbmdlciBiZSBjYWxsZWQgTWFudGluZWlhLCBidXQgQW50aWdvbmVpYSwgYW5kIHRoaXMgaXMgaXRzIG5hbWUgZG93biB0byB0aGUgcHJlc2VudCB0aW1lLiBBbmQgc28gaXQgd2FzIGR1ZSB0byBBcmF0dXMgdGhhdCB0aGUgbmFtZSBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bG92ZWx5IE1hbnRpbmVpYTwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMi42MDciIHZhbGlkPSJ5ZXMiPkhvbWVyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpaS4gNjA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3YXMgYWx0b2dldGhlciBleHRpbmd1aXNoZWQsIGFuZCB0aGUgY2l0eSBjb250aW51ZXMgdG8gYmVhciB0aGUgbmFtZSBvZiBoaW0gd2hvIGRlc3Ryb3llZCBhbmQgc2xldyBpdHMgZm9ybWVyIGNpdGl6ZW5zLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIuNjA3IiB2YWxpZD0ieWVzIj5Ib21lciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaWkuIDYwNy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIGlpLiA2MDcuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgb2xkIG5hbWUgb2YgdGhlIGNpdHkgd2FzIHJlc3RvcmVkIGJ5IHRoZSBFbXBlcm9yIEhhZHJpYW4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDguOC4xMiIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCB2aWlpLiA4LiAxMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOC44LjEyIiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIHZpaWkuIDguIDEyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQ2xlb21lbmVzLCBoYXZpbmcgYmVlbiBkZWZlYXRlZCBpbiBhIGdyZWF0IGJhdHRsZSBhdCBTZWxsYXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMjEgQi5DLiwgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2xlb20uIDI4LjEiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHh4dmlpaS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvcnNvb2sgU3BhcnRhIGFuZCBzYWlsZWQgb2ZmIHRvIEVneXB0LCBhbmQgQW50aWdvbnVzLCBhZnRlciBoYXZpbmcgYWNjb3JkZWQgdG8gQXJhdHVzIGZhaXIgYW5kIGtpbmRseSB0cmVhdG1lbnQgaW4gZXZlcnkgd2F5LCBsZWQgaGlzIGFybXkgYmFjayB0byBNYWNlZG9uaWEuIFRoZXJlLCBiZWluZyBub3cgYSBzaWNrIG1hbiwgaGUgc2VudCBQaGlsaXAsIGhpcyBzdWNjZXNzb3IgaW4gdGhlIGtpbmdkb20sIHdobyB3YXMgc3RpbGwgYSBzdHJpcGxpbmcsIGludG8gdGhlIFBlbG9wb25uZXN1cywgYW5kIHVyZ2VkIGhpbSB0byBhdHRhY2ggaGltc2VsZiB0byBBcmF0dXMgYWJvdmUgYWxsIG90aGVycywgYW5kIHRocm91Z2ggaGltIHRvIGRlYWwgd2l0aCB0aGUgY2l0aWVzIGFuZCBtYWtlIHRoZSBhY3F1YWludGFuY2Ugb2YgdGhlIEFjaGFlYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW5kZWVkIEFyYXR1cyBkaWQgdGFrZSB0aGUgcHJpbmNlIGluIGhhbmQsIGFuZCBtYW5hZ2VkIG1hdHRlcnMgc28gYXMgdG8gc2VuZCBoaW0gYmFjayB0byBNYWNlZG9uaWEgZnVsbCBvZiBncmVhdCBnb29kd2lsbCB0b3dhcmRzIGhpcyBwYXRyb24gYW5kIG9mIGFyZG91ciBhbmQgYW1iaXRpb24gZm9yIHRoZSBjb25kdWN0IG9mIEhlbGxlbmljIGFmZmFpcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQ2xlb21lbmVzLCBoYXZpbmcgYmVlbiBkZWZlYXRlZCBpbiBhIGdyZWF0IGJhdHRsZSBhdCBTZWxsYXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIyMSBCLkMuLCBjZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNsZW9tLiAyOC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4dmlpaS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvcnNvb2sgU3BhcnRhIGFuZCBzYWlsZWQgb2ZmIHRvIEVneXB0LCBhbmQgQW50aWdvbnVzLCBhZnRlciBoYXZpbmcgYWNjb3JkZWQgdG8gQXJhdHVzIGZhaXIgYW5kIGtpbmRseSB0cmVhdG1lbnQgaW4gZXZlcnkgd2F5LCBsZWQgaGlzIGFybXkgYmFjayB0byBNYWNlZG9uaWEuIFRoZXJlLCBiZWluZyBub3cgYSBzaWNrIG1hbiwgaGUgc2VudCBQaGlsaXAsIGhpcyBzdWNjZXNzb3IgaW4gdGhlIGtpbmdkb20sIHdobyB3YXMgc3RpbGwgYSBzdHJpcGxpbmcsIGludG8gdGhlIFBlbG9wb25uZXN1cywgYW5kIHVyZ2VkIGhpbSB0byBhdHRhY2ggaGltc2VsZiB0byBBcmF0dXMgYWJvdmUgYWxsIG90aGVycywgYW5kIHRocm91Z2ggaGltIHRvIGRlYWwgd2l0aCB0aGUgY2l0aWVzIGFuZCBtYWtlIHRoZSBhY3F1YWludGFuY2Ugb2YgdGhlIEFjaGFlYW5zLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNsZW9tLiAyOC4xIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2xlb21lbmVzPC90aXRsZT4sIHh4dmlpaS4gZmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh2aWlpLiBmZi48L3RyYW5zbGF0aW9uPg=="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgQXJhdHVzIGRpZCB0YWtlIHRoZSBwcmluY2UgaW4gaGFuZCwgYW5kIG1hbmFnZWQgbWF0dGVycyBzbyBhcyB0byBzZW5kIGhpbSBiYWNrIHRvIE1hY2Vkb25pYSBmdWxsIG9mIGdyZWF0IGdvb2R3aWxsIHRvd2FyZHMgaGlzIHBhdHJvbiBhbmQgb2YgYXJkb3VyIGFuZCBhbWJpdGlvbiBmb3IgdGhlIGNvbmR1Y3Qgb2YgSGVsbGVuaWMgYWZmYWlycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHVwb24gdGhlIGRlYXRoIG9mIEFudGlnb251czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIyMSBCLkMuICBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgQWV0b2xpYW5zLCBkZXNwaXNpbmcgdGhlIEFjaGFlYW5zIG9uIGFjY291bnQgb2YgdGhlaXIgc2xvdGhmdWwgd2F5cyAoZm9yIG5vdyB0aGF0IHRoZXkgd2VyZSBhY2N1c3RvbWVkIHRvIHNhdmUgdGhlbXNlbHZlcyBieSBvdGhlciBtZW4ncyBwcm93ZXNzIGFuZCBoYWQgdGFrZW4gc2hlbHRlciBiZWhpbmQgdGhlIE1hY2Vkb25pYW4gYXJtcywgdGhleSB3ZXJlIGxpdmluZyBpbiBncmVhdCBpbmFjdGl2aXR5IGFuZCBsYWNrIG9mIGRpc2NpcGxpbmUpLCBwcm9jZWVkZWQgdG8gaW50ZXJmZXJlIGluIHRoZSBhZmZhaXJzIG9mIFBlbG9wb25uZXN1czs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMm8gQi5DLiAgU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2xlb21lbmVzPC90aXRsZT4sIHh4eGl2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgYWZ0ZXIgcGx1bmRlcmluZyB0aGUgdGVycml0b3JpZXMgb2YgUGF0cmFlIGFuZCBEeW1lIG9uIHRoZWlyIHdheSwgdGhleSBpbnZhZGVkIE1lc3NlbmlhIGFuZCByYXZhZ2VkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIEFyYXR1cyB3YXMgaW5jZW5zZWQsIGFuZCBzZWVpbmcgdGhhdCBUaW1veGVudXMsIHdobyBhdCB0aGF0IHRpbWUgd2FzIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zLCB3YXMgaGVzaXRhbnQgYW5kIGRpbGF0b3J5LCBzaW5jZSBoaXMgdGVybSBvZiBvZmZpY2Ugd2FzIGp1c3QgYWJvdXQgdG8gZXhwaXJlLCBoZSBoaW1zZWxmLCBoYXZpbmcgYmVlbiBjaG9zZW4gdG8gc3VjY2VlZCBUaW1veGVudXMsIGFudGljaXBhdGVkIGhpcyB0ZXJtIG9mIG9mZmljZSBieSBmaXZlIGRheXMgZm9yIHRoZSBzYWtlIG9mIGdpdmluZyBhaWQgdG8gdGhlIE1lc3NlbmlhbnMuIEFuZCBoYXZpbmcgYXNzZW1ibGVkIHRoZSBBY2hhZWFucywgd2hvIHdlcmUgcGh5c2ljYWxseSBhbmQgbWVudGFsbHkgdW5maXQgZm9yIHdhciwgaGUgbWV0IHdpdGggZGVmZWF0IGF0IENhcGh5YWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGJlaW5nIHRob3VnaHQgdG8gaGF2ZSBjb25kdWN0ZWQgdGhlIGNhbXBhaWduIHdpdGggdG9vIG11Y2ggYXJkb3VyLCBoaXMgcHVycG9zZXMgd2VyZSBvbmNlIG1vcmUgYmx1bnRlZCBhbmQgaGUgZ2F2ZSB1cCB0aGUgY2F1c2UgYW5kIGhpcyBob3BlcyBmb3IgbG9zdCwgc28gdGhhdCBvZnRlbnRpbWVzLCB3aGVuIHRoZSBBZXRvbGlhbnMgZ2F2ZSBoaW0gYW4gYWR2YW50YWdlLCBoZSBuZWdsZWN0ZWQgaXQsIGFuZCBzdWZmZXJlZCB0aGVtIHRvIHJldmVsLCBhcyBpdCB3ZXJlLCBpbiBQZWxvcG9ubmVzdXMsIHdpdGggZ3JlYXQgYm9sZG5lc3MgYW5kIHdhbnRvbm5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgbW9yZSwgdGhlcmVmb3JlLCB0aGUgQWNoYWVhbnMgc3RyZXRjaGVkIG91dCB0aGVpciBoYW5kcyBpbXBsb3JpbmdseSB0byBNYWNlZG9uaWEsIGFuZCBicm91Z2h0IFBoaWxpcCBkb3duIHRvIHRha2UgcGFydCBpbiBIZWxsZW5pYyBhZmZhaXJzLCBhYm92ZSBhbGwgdGhpbmdzIGJlY2F1c2UgaGlzIGdvb2R3aWxsIHRvd2FyZHMgQXJhdHVzIGFuZCBoaXMgY29uZmlkZW5jZSBpbiBoaW0gbGVkIHRoZW0gdG8gaG9wZSB0aGF0IHRoZXkgd291bGQgZmluZCBoaW0gZWFzeS10ZW1wZXJlZCBpbiBhbGwgdGhpbmdzIGFuZCBtYW5hZ2VhYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHVwb24gdGhlIGRlYXRoIG9mIEFudGlnb251czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjIxIEIuQy4gIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDMwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aGUgQWV0b2xpYW5zLCBkZXNwaXNpbmcgdGhlIEFjaGFlYW5zIG9uIGFjY291bnQgb2YgdGhlaXIgc2xvdGhmdWwgd2F5cyAoZm9yIG5vdyB0aGF0IHRoZXkgd2VyZSBhY2N1c3RvbWVkIHRvIHNhdmUgdGhlbXNlbHZlcyBieSBvdGhlciBtZW4ncyBwcm93ZXNzIGFuZCBoYWQgdGFrZW4gc2hlbHRlciBiZWhpbmQgdGhlIE1hY2Vkb25pYW4gYXJtcywgdGhleSB3ZXJlIGxpdmluZyBpbiBncmVhdCBpbmFjdGl2aXR5IGFuZCBsYWNrIG9mIGRpc2NpcGxpbmUpLCBwcm9jZWVkZWQgdG8gaW50ZXJmZXJlIGluIHRoZSBhZmZhaXJzIG9mIFBlbG9wb25uZXN1czs8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDbGVvbS4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNsZW9tZW5lczwvdGl0bGU+LCB4eHguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjJvIEIuQy4gIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4aXYuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBhZnRlciBwbHVuZGVyaW5nIHRoZSB0ZXJyaXRvcmllcyBvZiBQYXRyYWUgYW5kIER5bWUgb24gdGhlaXIgd2F5LCB0aGV5IGludmFkZWQgTWVzc2VuaWEgYW5kIHJhdmFnZWQgaXQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2xlb20uIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4aXYuIDEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DbGVvbWVuZXM8L3RpdGxlPiwgeHh4aXYuIDEuPC90cmFuc2xhdGlvbj4="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgQXJhdHVzIHdhcyBpbmNlbnNlZCwgYW5kIHNlZWluZyB0aGF0IFRpbW94ZW51cywgd2hvIGF0IHRoYXQgdGltZSB3YXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMsIHdhcyBoZXNpdGFudCBhbmQgZGlsYXRvcnksIHNpbmNlIGhpcyB0ZXJtIG9mIG9mZmljZSB3YXMganVzdCBhYm91dCB0byBleHBpcmUsIGhlIGhpbXNlbGYsIGhhdmluZyBiZWVuIGNob3NlbiB0byBzdWNjZWVkIFRpbW94ZW51cywgYW50aWNpcGF0ZWQgaGlzIHRlcm0gb2Ygb2ZmaWNlIGJ5IGZpdmUgZGF5cyBmb3IgdGhlIHNha2Ugb2YgZ2l2aW5nIGFpZCB0byB0aGUgTWVzc2VuaWFucy4gQW5kIGhhdmluZyBhc3NlbWJsZWQgdGhlIEFjaGFlYW5zLCB3aG8gd2VyZSBwaHlzaWNhbGx5IGFuZCBtZW50YWxseSB1bmZpdCBmb3Igd2FyLCBoZSBtZXQgd2l0aCBkZWZlYXQgYXQgQ2FwaHlhZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGJlaW5nIHRob3VnaHQgdG8gaGF2ZSBjb25kdWN0ZWQgdGhlIGNhbXBhaWduIHdpdGggdG9vIG11Y2ggYXJkb3VyLCBoaXMgcHVycG9zZXMgd2VyZSBvbmNlIG1vcmUgYmx1bnRlZCBhbmQgaGUgZ2F2ZSB1cCB0aGUgY2F1c2UgYW5kIGhpcyBob3BlcyBmb3IgbG9zdCwgc28gdGhhdCBvZnRlbnRpbWVzLCB3aGVuIHRoZSBBZXRvbGlhbnMgZ2F2ZSBoaW0gYW4gYWR2YW50YWdlLCBoZSBuZWdsZWN0ZWQgaXQsIGFuZCBzdWZmZXJlZCB0aGVtIHRvIHJldmVsLCBhcyBpdCB3ZXJlLCBpbiBQZWxvcG9ubmVzdXMsIHdpdGggZ3JlYXQgYm9sZG5lc3MgYW5kIHdhbnRvbm5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uY2UgbW9yZSwgdGhlcmVmb3JlLCB0aGUgQWNoYWVhbnMgc3RyZXRjaGVkIG91dCB0aGVpciBoYW5kcyBpbXBsb3JpbmdseSB0byBNYWNlZG9uaWEsIGFuZCBicm91Z2h0IFBoaWxpcCBkb3duIHRvIHRha2UgcGFydCBpbiBIZWxsZW5pYyBhZmZhaXJzLCBhYm92ZSBhbGwgdGhpbmdzIGJlY2F1c2UgaGlzIGdvb2R3aWxsIHRvd2FyZHMgQXJhdHVzIGFuZCBoaXMgY29uZmlkZW5jZSBpbiBoaW0gbGVkIHRoZW0gdG8gaG9wZSB0aGF0IHRoZXkgd291bGQgZmluZCBoaW0gZWFzeS10ZW1wZXJlZCBpbiBhbGwgdGhpbmdzIGFuZCBtYW5hZ2VhYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGZvciB0aGUgZmlyc3QgdGltZSBBcGVsbGVzLCBNZWdhbGVhcywgYW5kIHN1bmRyeSBvdGhlciBjb3VydGllcnMgbWFkZSBmYWxzZSBjaGFyZ2VzIGFnYWluc3QgQXJhdHVzIHRvIHdoaWNoIHRoZSBraW5nIGxpc3RlbmVkLCBhbmQgam9pbmluZyBpbiB0aGUgY2FudmFzcyBtYWRlIGJ5IHRob3NlIG9mIHRoZSBvcHBvc2l0ZSBmYWN0aW9uLCBoZSBmYXZvdXJlZCB0aGUgZWxlY3Rpb24gb2YgRXBlcmF0dXMgYXMgZ2VuZXJhbCBvZiB0aGUgQWNoYWVhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFcGVyYXR1cyB3YXMgYWx0b2dldGhlciBkZXNwaXNlZCBieSB0aGUgQWNoYWVhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDUuMzAiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCB2LiAzMDwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgYXMgbG9uZyBhcyBBcmF0dXMgZ2F2ZSBsaXR0bGUgaGVlZCB0byBwdWJsaWMgbWF0dGVycyBub3RoaW5nIHdlbnQgd2VsbC4gUGhpbGlwIHRoZXJlZm9yZSBwZXJjZWl2ZWQgdGhhdCBoZSBoYWQgYmVlbiBlbnRpcmVseSB3cm9uZy4gU28gaGUgcmV2ZXJzZWQgaGlzIGNvdXJzZSwgd2VudCBiYWNrIHRvIEFyYXR1cywgYW5kIHdhcyB3aG9sbHkgaGlzOyBhbmQgc2luY2UgdGhlIHByb2dyZXNzIG9mIGV2ZW50cyBub3cgYnJvdWdodCBoaW0gaW5jcmVhc2VkIHBvd2VyIGFuZCByZXB1dGF0aW9uLCBoZSBkZXBlbmRlZCBhbHRvZ2V0aGVyIHVwb24gQXJhdHVzLCBjb252aW5jZWQgdGhhdCBoaXMgcmVwdXRlIGFuZCBzdHJlbmd0aCB3ZXJlIGR1ZSB0byBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbGwgdGhlIHdvcmxkIHRob3VnaHQgdGhhdCBBcmF0dXMgd2FzIGEgZ29vZCBndWFyZGlhbiBhbmQgdHV0b3IgZm9yIGEga2luZ2RvbSBubyBsZXNzIHRoYW4gZm9yIGEgZGVtb2NyYWN5OyBmb3IgaGlzIHByaW5jaXBsZXMgYW5kIGNoYXJhY3RlciB3ZXJlIG1hbmlmZXN0LCBsaWtlIGNvbG91ciBpbiBhIGZhYnJpYywgaW4gdGhlIGFjdGlvbnMgb2YgdGhlIGtpbmcuIEZvciBpbnN0YW5jZSwgdGhlIG1vZGVyYXRpb24gb2YgdGhlIHlvdW5nIHByaW5jZSBpbiBkZWFsaW5nIHdpdGggdGhlIG9mZmVuZGluZyBMYWNlZGFlbW9uaWFucywgaGlzIGVuZ2FnaW5nIGJlaGF2aW91ciB0b3dhcmRzIHRoZSBDcmV0YW5zLCBieSBtZWFucyBvZiB3aGljaCBoZSB3b24gdGhlIHdob2xlIGlzbGFuZCB0byBvYmVkaWVuY2UgaW4gYSBmZXcgZGF5cywgYW5kIHRoZSBhc3RvbmlzaGluZ2x5IHZpZ29yb3VzIGNvbmR1Y3Qgb2YgaGlzIGNhbXBhaWduIGFnYWluc3QgdGhlIEFldG9saWFucywgYWxsIGFkZGVkIHRvIHRoZSByZXB1dGF0aW9uIG9mIFBoaWxpcCBmb3IgdGFraW5nIGdvb2QgYWR2aWNlLCBhbmQgdG8gdGhhdCBvZiBBcmF0dXMgZm9yIGdpdmluZyBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0b28sIHRoZSByb3lhbCBjb3VydGllcnMgd2VyZSBhbGwgdGhlIG1vcmUgZW52aW91cyBvZiBoaW0sIGFuZCBzaW5jZSB0aGV5IGNvdWxkIGFjY29tcGxpc2ggbm90aGluZyBieSB0aGVpciBzZWNyZXQgY2FsdW1uaWVzLCB0aGV5IHRvb2sgdG8gYWJ1c2luZyBhbmQgaW5zdWx0aW5nIGhpbSBvcGVubHkgYXQgdGhlaXIgYmFucXVldHMsIHdpdGggZ3JlYXQgd2FudG9ubmVzcyBhbmQgc2N1cnJpbGl0eTsgYW5kIG9uY2UgdGhleSBhY3R1YWxseSBwdXJzdWVkIGFuZCB0aHJldyBzdG9uZXMgYXQgaGltIGFzIGhlIHdhcyBnb2luZyB0byBoaXMgdGVudCBhZnRlciBzdXBwZXIuIEF0IHRoaXMgUGhpbGlwIHdhcyBlbnJhZ2VkLCBhbmQgZm9yIHRoZSBub25jZSBmaW5lZCB0aGVtIHR3ZW50eSB0YWxlbnRzOyBhZnRlcndhcmRzLCBob3dldmVyLCByZWdhcmRpbmcgdGhlbSBhcyBhIG5veGlvdXMgYW5kIGNvbmZ1c2luZyBlbGVtZW50IGluIGhpcyBhZmZhaXJzLCBoZSBwdXQgdGhlbSB0byBkZWF0aC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gNS4xNSIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHYuIDE1IGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBmb3IgdGhlIGZpcnN0IHRpbWUgQXBlbGxlcywgTWVnYWxlYXMsIGFuZCBzdW5kcnkgb3RoZXIgY291cnRpZXJzIG1hZGUgZmFsc2UgY2hhcmdlcyBhZ2FpbnN0IEFyYXR1cyB0byB3aGljaCB0aGUga2luZyBsaXN0ZW5lZCwgYW5kIGpvaW5pbmcgaW4gdGhlIGNhbnZhc3MgbWFkZSBieSB0aG9zZSBvZiB0aGUgb3Bwb3NpdGUgZmFjdGlvbiwgaGUgZmF2b3VyZWQgdGhlIGVsZWN0aW9uIG9mIEVwZXJhdHVzIGFzIGdlbmVyYWwgb2YgdGhlIEFjaGFlYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFcGVyYXR1cyB3YXMgYWx0b2dldGhlciBkZXNwaXNlZCBieSB0aGUgQWNoYWVhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA1LjMwIiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdi4gMzA8L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGFzIGxvbmcgYXMgQXJhdHVzIGdhdmUgbGl0dGxlIGhlZWQgdG8gcHVibGljIG1hdHRlcnMgbm90aGluZyB3ZW50IHdlbGwuIFBoaWxpcCB0aGVyZWZvcmUgcGVyY2VpdmVkIHRoYXQgaGUgaGFkIGJlZW4gZW50aXJlbHkgd3JvbmcuIFNvIGhlIHJldmVyc2VkIGhpcyBjb3Vyc2UsIHdlbnQgYmFjayB0byBBcmF0dXMsIGFuZCB3YXMgd2hvbGx5IGhpczsgYW5kIHNpbmNlIHRoZSBwcm9ncmVzcyBvZiBldmVudHMgbm93IGJyb3VnaHQgaGltIGluY3JlYXNlZCBwb3dlciBhbmQgcmVwdXRhdGlvbiwgaGUgZGVwZW5kZWQgYWx0b2dldGhlciB1cG9uIEFyYXR1cywgY29udmluY2VkIHRoYXQgaGlzIHJlcHV0ZSBhbmQgc3RyZW5ndGggd2VyZSBkdWUgdG8gaGltLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gNS4zMCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHYuIDMwPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbGwgdGhlIHdvcmxkIHRob3VnaHQgdGhhdCBBcmF0dXMgd2FzIGEgZ29vZCBndWFyZGlhbiBhbmQgdHV0b3IgZm9yIGEga2luZ2RvbSBubyBsZXNzIHRoYW4gZm9yIGEgZGVtb2NyYWN5OyBmb3IgaGlzIHByaW5jaXBsZXMgYW5kIGNoYXJhY3RlciB3ZXJlIG1hbmlmZXN0LCBsaWtlIGNvbG91ciBpbiBhIGZhYnJpYywgaW4gdGhlIGFjdGlvbnMgb2YgdGhlIGtpbmcuIEZvciBpbnN0YW5jZSwgdGhlIG1vZGVyYXRpb24gb2YgdGhlIHlvdW5nIHByaW5jZSBpbiBkZWFsaW5nIHdpdGggdGhlIG9mZmVuZGluZyBMYWNlZGFlbW9uaWFucywgaGlzIGVuZ2FnaW5nIGJlaGF2aW91ciB0b3dhcmRzIHRoZSBDcmV0YW5zLCBieSBtZWFucyBvZiB3aGljaCBoZSB3b24gdGhlIHdob2xlIGlzbGFuZCB0byBvYmVkaWVuY2UgaW4gYSBmZXcgZGF5cywgYW5kIHRoZSBhc3RvbmlzaGluZ2x5IHZpZ29yb3VzIGNvbmR1Y3Qgb2YgaGlzIGNhbXBhaWduIGFnYWluc3QgdGhlIEFldG9saWFucywgYWxsIGFkZGVkIHRvIHRoZSByZXB1dGF0aW9uIG9mIFBoaWxpcCBmb3IgdGFraW5nIGdvb2QgYWR2aWNlLCBhbmQgdG8gdGhhdCBvZiBBcmF0dXMgZm9yIGdpdmluZyBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdG9vLCB0aGUgcm95YWwgY291cnRpZXJzIHdlcmUgYWxsIHRoZSBtb3JlIGVudmlvdXMgb2YgaGltLCBhbmQgc2luY2UgdGhleSBjb3VsZCBhY2NvbXBsaXNoIG5vdGhpbmcgYnkgdGhlaXIgc2VjcmV0IGNhbHVtbmllcywgdGhleSB0b29rIHRvIGFidXNpbmcgYW5kIGluc3VsdGluZyBoaW0gb3Blbmx5IGF0IHRoZWlyIGJhbnF1ZXRzLCB3aXRoIGdyZWF0IHdhbnRvbm5lc3MgYW5kIHNjdXJyaWxpdHk7IGFuZCBvbmNlIHRoZXkgYWN0dWFsbHkgcHVyc3VlZCBhbmQgdGhyZXcgc3RvbmVzIGF0IGhpbSBhcyBoZSB3YXMgZ29pbmcgdG8gaGlzIHRlbnQgYWZ0ZXIgc3VwcGVyLiBBdCB0aGlzIFBoaWxpcCB3YXMgZW5yYWdlZCwgYW5kIGZvciB0aGUgbm9uY2UgZmluZWQgdGhlbSB0d2VudHkgdGFsZW50czsgYWZ0ZXJ3YXJkcywgaG93ZXZlciwgcmVnYXJkaW5nIHRoZW0gYXMgYSBub3hpb3VzIGFuZCBjb25mdXNpbmcgZWxlbWVudCBpbiBoaXMgYWZmYWlycywgaGUgcHV0IHRoZW0gdG8gZGVhdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA1LjE1IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdi4gMTUgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiA1LjE1IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdi4gMTUgZi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uLCBhcyB0aGUga2luZydzIGZvcnR1bmUgZmxvd2VkIHNtb290aGx5IG9uLCBoZSB3YXMgbGlmdGVkIHVwIGJ5IGhpcyBzdWNjZXNzLCBhbmQgZGV2ZWxvcGVkIG1hbnkgaW5vcmRpbmF0ZSBkZXNpcmVzOyBoaXMgaW5oZXJlbnQgYmFkbmVzcywgdG9vLCBmb3JjaW5nIGFzaWRlIHRoZSB1bm5hdHVyYWwgcmVzdHJhaW50cyBvZiBoaXMgYXNzdW1lZCBkZXBvcnRtZW50IGFuZCBtYWtpbmcgaXQgc3dheXRvIHRoZSBsaWdodCwgbGl0dGxlIGJ5IGxpdHRsZSBsYWlkIGJhcmUgYW5kIHJldmVhbGVkIGhpcyB0cnVlIGNoYXJhY3Rlci4gSW4gdGhlIGZpcnN0IHBsYWNlIGhlIGluZmxpY3RlZCBhIHByaXZhdGUgd3JvbmcgdXBvbiB0aGUgeW91bmdlciBBcmF0dXMgYnkgY29ycnVwdGluZyBoaXMgd2lmZSwgYW5kIHdhcyBmb3IgYSBsb25nIHRpbWUgdW5kZXRlY3RlZCwgc2luY2UgaGUgd2FzIGEgaG91c2VtYXRlIGFuZCBhIGd1ZXN0IG9mIHRoZSBmYW1pbHk7IGluIHRoZSBzZWNvbmQgcGxhY2UsIGhlIGJlZ2FuIHRvIHNob3cgaG9zdGlsaXR5IHRvd2FyZHMgdGhlIGNpdmlsIHBvbGl0aWVzIG9mIHRoZSBHcmVla3MsIGFuZCBpdCB3YXMgcHJlc2VudGx5IGNsZWFyIHRoYXQgaGUgd2FzIHRyeWluZyB0byBzaGFrZSBvZmYgQXJhdHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCBncm91bmRzIG9mIHN1c3BpY2lvbiB3ZXJlIGFmZm9yZGVkIGJ5IGhpcyBjb25kdWN0IGF0IE1lc3NlbmUuIEZvciB0aGVyZSB3YXMgZmFjdGlvbmFsIHN0cmlmZSBpbiB0aGUgY2l0eSwgYW5kIEFyYXR1cyB3YXMgdGFyZHkgaW4gY29taW5nIHRvIGl0cyBhaWQsIGFuZCBQaGlsaXAsIHdobyBnb3QgdG8gdGhlIGNpdHkgYSBkYXkgYmVmb3JlIEFyYXR1cywgYXQgb25jZSBnb2FkZWQgb24gdGhlIHR3byBwYXJ0aWVzIGFnYWluc3Qgb25lIGFub3RoZXIuIEluIHByaXZhdGUgaGUgYXNrZWQgdGhlIGdlbmVyYWxzIG9mIHRoZSBNZXNzZW5pYW5zIGlmIHRoZXkgaGFkIG5vdCBsYXdzIHRvIGVuZm9yY2UgYWdhaW5zdCB0aGUgY29tbW9uIHBlb3BsZSwgYW5kIGFnYWluIGluIHByaXZhdGUgaGUgYXNrZWQgdGhlIGxlYWRlcnMgb2YgdGhlIGNvbW1vbiBwZW9wbGUgaWYgdGhleSBoYWQgbm90IGhhbmRzIHRvIGxpZnQgYWdhaW5zdCB0aGUgdHlyYW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIHRoZSBvZmZpY2lhbHMgcGx1Y2tlZCB1cCBjb3VyYWdlIGFuZCB0cmllZCB0byBsYXkgaGFuZHMgdXBvbiB0aGUgbGVhZGVycyBvZiB0aGUgcGVvcGxlLCBhbmQgdGhleSwgY29taW5nIHRvIHRoZSBhdHRhY2sgYXQgdGhlIGhlYWQgb2YgdGhlaXIgZm9sbG93ZXJzLCBzbGV3IHRoZSBvZmZpY2lhbHMgYW5kIG5lYXJseSB0d28gaHVuZHJlZCBjaXRpemVucyBiZXNpZGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNvb24sIGFzIHRoZSBraW5nJ3MgZm9ydHVuZSBmbG93ZWQgc21vb3RobHkgb24sIGhlIHdhcyBsaWZ0ZWQgdXAgYnkgaGlzIHN1Y2Nlc3MsIGFuZCBkZXZlbG9wZWQgbWFueSBpbm9yZGluYXRlIGRlc2lyZXM7IGhpcyBpbmhlcmVudCBiYWRuZXNzLCB0b28sIGZvcmNpbmcgYXNpZGUgdGhlIHVubmF0dXJhbCByZXN0cmFpbnRzIG9mIGhpcyBhc3N1bWVkIGRlcG9ydG1lbnQgYW5kIG1ha2luZyBpdCBzd2F5dG8gdGhlIGxpZ2h0LCBsaXR0bGUgYnkgbGl0dGxlIGxhaWQgYmFyZSBhbmQgcmV2ZWFsZWQgaGlzIHRydWUgY2hhcmFjdGVyLiBJbiB0aGUgZmlyc3QgcGxhY2UgaGUgaW5mbGljdGVkIGEgcHJpdmF0ZSB3cm9uZyB1cG9uIHRoZSB5b3VuZ2VyIEFyYXR1cyBieSBjb3JydXB0aW5nIGhpcyB3aWZlLCBhbmQgd2FzIGZvciBhIGxvbmcgdGltZSB1bmRldGVjdGVkLCBzaW5jZSBoZSB3YXMgYSBob3VzZW1hdGUgYW5kIGEgZ3Vlc3Qgb2YgdGhlIGZhbWlseTsgaW4gdGhlIHNlY29uZCBwbGFjZSwgaGUgYmVnYW4gdG8gc2hvdyBob3N0aWxpdHkgdG93YXJkcyB0aGUgY2l2aWwgcG9saXRpZXMgb2YgdGhlIEdyZWVrcywgYW5kIGl0IHdhcyBwcmVzZW50bHkgY2xlYXIgdGhhdCBoZSB3YXMgdHJ5aW5nIHRvIHNoYWtlIG9mZiBBcmF0dXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZpcnN0IGdyb3VuZHMgb2Ygc3VzcGljaW9uIHdlcmUgYWZmb3JkZWQgYnkgaGlzIGNvbmR1Y3QgYXQgTWVzc2VuZS4gRm9yIHRoZXJlIHdhcyBmYWN0aW9uYWwgc3RyaWZlIGluIHRoZSBjaXR5LCBhbmQgQXJhdHVzIHdhcyB0YXJkeSBpbiBjb21pbmcgdG8gaXRzIGFpZCwgYW5kIFBoaWxpcCwgd2hvIGdvdCB0byB0aGUgY2l0eSBhIGRheSBiZWZvcmUgQXJhdHVzLCBhdCBvbmNlIGdvYWRlZCBvbiB0aGUgdHdvIHBhcnRpZXMgYWdhaW5zdCBvbmUgYW5vdGhlci4gSW4gcHJpdmF0ZSBoZSBhc2tlZCB0aGUgZ2VuZXJhbHMgb2YgdGhlIE1lc3NlbmlhbnMgaWYgdGhleSBoYWQgbm90IGxhd3MgdG8gZW5mb3JjZSBhZ2FpbnN0IHRoZSBjb21tb24gcGVvcGxlLCBhbmQgYWdhaW4gaW4gcHJpdmF0ZSBoZSBhc2tlZCB0aGUgbGVhZGVycyBvZiB0aGUgY29tbW9uIHBlb3BsZSBpZiB0aGV5IGhhZCBub3QgaGFuZHMgdG8gbGlmdCBhZ2FpbnN0IHRoZSB0eXJhbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcyB0aGUgb2ZmaWNpYWxzIHBsdWNrZWQgdXAgY291cmFnZSBhbmQgdHJpZWQgdG8gbGF5IGhhbmRzIHVwb24gdGhlIGxlYWRlcnMgb2YgdGhlIHBlb3BsZSwgYW5kIHRoZXksIGNvbWluZyB0byB0aGUgYXR0YWNrIGF0IHRoZSBoZWFkIG9mIHRoZWlyIGZvbGxvd2Vycywgc2xldyB0aGUgb2ZmaWNpYWxzIGFuZCBuZWFybHkgdHdvIGh1bmRyZWQgY2l0aXplbnMgYmVzaWRlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBvdXRyYWdlb3VzIGRlZWQgb2YgUGhpbGlwJ3MsIGFuZCB3aGlsZSBoZSB3YXMgc3RyaXZpbmcgbW9yZSB0aGFuIGV2ZXIgdG8gc2V0IHRoZSBNZXNzZW5pYW5zIGJ5IHRoZSBlYXJzLCBBcmF0dXMgcmVhY2hlZCB0aGUgY2l0eS4gSGUgc2hvd2VkIGNsZWFybHkgdGhhdCBoZSB3YXMgaW5kaWduYW50IGhpbXNlbGYsIGFuZCB3b3VsZCBub3QgY2hlY2sgaGlzIHNvbiB3aGVuIGhlIGJpdHRlcmx5IHJlcHJvYWNoZWQgYW5kIHJldmlsZWQgUGhpbGlwLiBOb3csIGl0IHdvdWxkIHNlZW0gdGhhdCB0aGUgeW91bmcgbWFuIHdhcyBhIGxvdmVyIG9mIFBoaWxpcDsgYW5kIHNvIGF0IHRoaXMgdGltZSBoZSB0b2xkIFBoaWxpcCwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGF0IGhlIG5vIGxvbmdlciB0aG91Z2h0IGhpbSBmYWlyIHRvIGxvb2sgdXBvbiwgYWZ0ZXIgc28gZm91bCBhIGRlZWQsIGJ1dCB0aGUgbW9zdCByZXB1bHNpdmUgb2YgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAgbWFkZSBubyBhbnN3ZXIgdG8gaGltLCBhbHRob3VnaCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCwgc2luY2UgaW4gaGlzIGFuZ2VyIGhlIGhhZCBtYW55IHRpbWVzIGNyaWVkIG91dCBzYXZhZ2VseSB3aGlsZSB0aGUgeW91bmcgbWFuIHdhcyBzcGVha2luZywgYnV0IGFzIHRob3VnaCBoZSBtZWVrbHkgc3VibWl0dGVkIHRvIHdoYXQgaGFkIGJlZW4gc2FpZCBhbmQgd2FzIGEgcGVyc29uIG9mIG1vZGVyYXRpb24gYW5kIG5vdCBhYm92ZSB0aGUgb3JkaW5hcnkgY2l0aXplbiwgaGUgZ2F2ZSB0aGUgZWxkZXIgQXJhdHVzIGhpcyBoYW5kLCBsZWQgaGltIGZvcnRoIGZyb20gdGhlIHRoZWF0cmUsIGFuZCBicm91Z2h0IGhpbSB0byB0aGUgSXRob21hdGFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcHJlY2luY3Qgb2YgWmV1cywgb24gdGhlIHN1bW1pdCBvZiBNdC4gSXRob21lLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDQuMy45IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGl2LiAzLiA5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiBvcmRlciB0byBzYWNyaWZpY2UgdG8gWmV1cyBhbmQgdGFrZSBhIHZpZXcgb2YgdGhlIHBsYWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgcXVpdGUgYXMgd2VsbCB3YWxsZWQgaW4gYXMgQWNyb2NvcmludGh1cywgYW5kIHdpdGggYSBnYXJyaXNvbiBpbiBpdCBpcyBkaWZmaWN1bHQgb2YgYWNjZXNzIGFuZCBhIGhhcmQgcGxhY2UgZm9yIGl0cyBuZWlnaGJvdXJzIHRvIHRha2UgYnkgZm9yY2UuIFRoaXRoZXIgUGhpbGlwIHdlbnQgdXAsIGFuZCBvZmZlcmVkIHNhY3JpZmljZSwgYW5kIHdoZW4gdGhlIHNlZXIgYnJvdWdodCBoaW0gdGhlIGVudHJhaWxzIG9mIHRoZSBveCwgaGUgdG9vayB0aGVtIGluIGJvdGggaGFuZHMgYW5kIHNob3dlZCB0aGVtIHRvIEFyYXR1cyBhbmQgRGVtZXRyaXVzIG9mIFBoYXJvcywgbGVhbmluZyB0b3dhcmRzIGVhY2ggb25lIGluIHR1cm4gYW5kIGFza2luZyB0aGVtIHdoYXQgaW5kaWNhdGlvbnMgdGhleSBzYXcgaW4gdGhlIG9tZW5zOyB3YXMgaGUgdG8gYmUgbWFzdGVyIG9mIHRoZSBjaXRhZGVsLCBvciB0byBnaXZlIGl0IGJhY2sgdG8gdGhlIE1lc3NlbmlhbnM/IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkRlbWV0cml1cywgd2l0aCBhIGxhdWdoLCByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgaGFzdCB0aGUgc3Bpcml0IG9mIGEgc2VlciwgdGhvdSB3aWx0IGdpdmUgdXAgdGhlIHBsYWNlOyBidXQgaWYgdGhhdCBvZiBhIGtpbmcsIHRob3Ugd2lsdCBob2xkIHRoZSBveCBieSBib3RoIGl0cyBob3Jucyw8L3E+IHNwZWFraW5nIGRhcmtseSBvZiBQZWxvcG9ubmVzdXMsIHdoaWNoLCBpZiBQaGlsaXAgYWRkZWQgdGhlIEl0aG9tYXRhcyB0byBBY3JvY29yaW50aHVzLCB3b3VsZCBiZSBhbHRvZ2V0aGVyIHN1YmplY3QgYW5kIHN1Ym1pc3NpdmUgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcmF0dXMgaGVsZCBoaXMgcGVhY2UgZm9yIGEgbG9uZyB0aW1lLCBidXQgdXBvbiBQaGlsaXAncyBhc2tpbmcgaGltIHRvIGV4cHJlc3MgaGlzIG9waW5pb24sIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlcmUgYXJlIG1hbnkgbG9mdHkgaGlsbHMgaW4gQ3JldGUsIE8gUGhpbGlwLCBhbmQgbWFueSB0b3dlcmluZyBjaXRhZGVscyBpbiBCb2VvdGlhIGFuZCBQaG9jaXM7IGluIEFjYXJuYW5pYSwgdG9vLCBJIHN1cHBvc2UsIGFzIHdlbGwgaW5sYW5kIGFzIG9uIGl0cyBzaG9yZXMsIHRoZXJlIGFyZSBtYW55IHBsYWNlcyB3aGljaCBzaG93IGFuIGFtYXppbmcgc3RyZW5ndGg7IGJ1dCBub3Qgb25lIG9mIHRoZXNlIGRvc3QgdGhvdSBvY2N1cHksIGFuZCB5ZXQgYWxsIHRoZXNlIHBlb3BsZXMgZ2xhZGx5IGRvIHRoeSBiaWRkaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgcm9iYmVycyB0aGF0IGNsaW5nIHRvIGNsaWZmcyBhbmQgY3JhZ3MsIGJ1dCBmb3IgYSBraW5nIHRoZXJlIGlzIG5vIHN0cm9uZ2VyIG9yIG1vcmUgc2VjdXJlIGRlZmVuY2UgdGhhbiB0cnVzdCBhbmQgZ3JhdGl0dWRlLiBUaGVzZSBvcGVuIHVwIGZvciB0aGVlIHRoZSBDcmV0YW4gc2VhLCB0aGVzZSB0aGUgUGVsb3Bvbm5lc3VzLiBSZWx5aW5nIHVwb24gdGhlc2UsIHlvdW5nIGFzIHRob3UgYXJ0LCB0aG91IGhhc3QgYWxyZWFkeSBtYWRlIHRoeXNlbGYgbGVhZGVyIGhlcmUsIGFuZCBtYXN0ZXIgdGhlcmUuPC9xPiBXaGlsZSBoZSB3YXMgeWV0IHNwZWFraW5nLCBQaGlsaXAgaGFuZGVkIHRoZSBlbnRyYWlscyB0byB0aGUgc2VlciwgYW5kIGRyYXdpbmcgQXJhdHVzIHRvIGhpbSBieSB0aGUgaGFuZCwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lIGhpdGhlciwgdGhlbiwgYW5kIGxldCB1cyB0YWtlIHRoZSBzYW1lIHJvYWQsPC9xPiBpbXBseWluZyB0aGF0IGhlIGhhZCBiZWVuIGNvbnN0cmFpbmVkIGJ5IGhpbSBhbmQgbWFkZSB0byBnaXZlIHVwIHRoZSBjaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBvdXRyYWdlb3VzIGRlZWQgb2YgUGhpbGlwJ3MsIGFuZCB3aGlsZSBoZSB3YXMgc3RyaXZpbmcgbW9yZSB0aGFuIGV2ZXIgdG8gc2V0IHRoZSBNZXNzZW5pYW5zIGJ5IHRoZSBlYXJzLCBBcmF0dXMgcmVhY2hlZCB0aGUgY2l0eS4gSGUgc2hvd2VkIGNsZWFybHkgdGhhdCBoZSB3YXMgaW5kaWduYW50IGhpbXNlbGYsIGFuZCB3b3VsZCBub3QgY2hlY2sgaGlzIHNvbiB3aGVuIGhlIGJpdHRlcmx5IHJlcHJvYWNoZWQgYW5kIHJldmlsZWQgUGhpbGlwLiBOb3csIGl0IHdvdWxkIHNlZW0gdGhhdCB0aGUgeW91bmcgbWFuIHdhcyBhIGxvdmVyIG9mIFBoaWxpcDsgYW5kIHNvIGF0IHRoaXMgdGltZSBoZSB0b2xkIFBoaWxpcCwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGF0IGhlIG5vIGxvbmdlciB0aG91Z2h0IGhpbSBmYWlyIHRvIGxvb2sgdXBvbiwgYWZ0ZXIgc28gZm91bCBhIGRlZWQsIGJ1dCB0aGUgbW9zdCByZXB1bHNpdmUgb2YgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBtYWRlIG5vIGFuc3dlciB0byBoaW0sIGFsdGhvdWdoIGl0IHdhcyBleHBlY3RlZCB0aGF0IGhlIHdvdWxkLCBzaW5jZSBpbiBoaXMgYW5nZXIgaGUgaGFkIG1hbnkgdGltZXMgY3JpZWQgb3V0IHNhdmFnZWx5IHdoaWxlIHRoZSB5b3VuZyBtYW4gd2FzIHNwZWFraW5nLCBidXQgYXMgdGhvdWdoIGhlIG1lZWtseSBzdWJtaXR0ZWQgdG8gd2hhdCBoYWQgYmVlbiBzYWlkIGFuZCB3YXMgYSBwZXJzb24gb2YgbW9kZXJhdGlvbiBhbmQgbm90IGFib3ZlIHRoZSBvcmRpbmFyeSBjaXRpemVuLCBoZSBnYXZlIHRoZSBlbGRlciBBcmF0dXMgaGlzIGhhbmQsIGxlZCBoaW0gZm9ydGggZnJvbSB0aGUgdGhlYXRyZSwgYW5kIGJyb3VnaHQgaGltIHRvIHRoZSBJdGhvbWF0YXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHByZWNpbmN0IG9mIFpldXMsIG9uIHRoZSBzdW1taXQgb2YgTXQuIEl0aG9tZS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDQuMy45IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGl2LiAzLiA5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiBvcmRlciB0byBzYWNyaWZpY2UgdG8gWmV1cyBhbmQgdGFrZSBhIHZpZXcgb2YgdGhlIHBsYWNlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDQuMy45IiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGl2LiAzLiA5LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBxdWl0ZSBhcyB3ZWxsIHdhbGxlZCBpbiBhcyBBY3JvY29yaW50aHVzLCBhbmQgd2l0aCBhIGdhcnJpc29uIGluIGl0IGlzIGRpZmZpY3VsdCBvZiBhY2Nlc3MgYW5kIGEgaGFyZCBwbGFjZSBmb3IgaXRzIG5laWdoYm91cnMgdG8gdGFrZSBieSBmb3JjZS4gVGhpdGhlciBQaGlsaXAgd2VudCB1cCwgYW5kIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgd2hlbiB0aGUgc2VlciBicm91Z2h0IGhpbSB0aGUgZW50cmFpbHMgb2YgdGhlIG94LCBoZSB0b29rIHRoZW0gaW4gYm90aCBoYW5kcyBhbmQgc2hvd2VkIHRoZW0gdG8gQXJhdHVzIGFuZCBEZW1ldHJpdXMgb2YgUGhhcm9zLCBsZWFuaW5nIHRvd2FyZHMgZWFjaCBvbmUgaW4gdHVybiBhbmQgYXNraW5nIHRoZW0gd2hhdCBpbmRpY2F0aW9ucyB0aGV5IHNhdyBpbiB0aGUgb21lbnM7IHdhcyBoZSB0byBiZSBtYXN0ZXIgb2YgdGhlIGNpdGFkZWwsIG9yIHRvIGdpdmUgaXQgYmFjayB0byB0aGUgTWVzc2VuaWFucz8gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkRlbWV0cml1cywgd2l0aCBhIGxhdWdoLCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgdGhvdSBoYXN0IHRoZSBzcGlyaXQgb2YgYSBzZWVyLCB0aG91IHdpbHQgZ2l2ZSB1cCB0aGUgcGxhY2U7IGJ1dCBpZiB0aGF0IG9mIGEga2luZywgdGhvdSB3aWx0IGhvbGQgdGhlIG94IGJ5IGJvdGggaXRzIGhvcm5zLDwvcT4gc3BlYWtpbmcgZGFya2x5IG9mIFBlbG9wb25uZXN1cywgd2hpY2gsIGlmIFBoaWxpcCBhZGRlZCB0aGUgSXRob21hdGFzIHRvIEFjcm9jb3JpbnRodXMsIHdvdWxkIGJlIGFsdG9nZXRoZXIgc3ViamVjdCBhbmQgc3VibWlzc2l2ZSB0byBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFyYXR1cyBoZWxkIGhpcyBwZWFjZSBmb3IgYSBsb25nIHRpbWUsIGJ1dCB1cG9uIFBoaWxpcCdzIGFza2luZyBoaW0gdG8gZXhwcmVzcyBoaXMgb3Bpbmlvbiwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZXJlIGFyZSBtYW55IGxvZnR5IGhpbGxzIGluIENyZXRlLCBPIFBoaWxpcCwgYW5kIG1hbnkgdG93ZXJpbmcgY2l0YWRlbHMgaW4gQm9lb3RpYSBhbmQgUGhvY2lzOyBpbiBBY2FybmFuaWEsIHRvbywgSSBzdXBwb3NlLCBhcyB3ZWxsIGlubGFuZCBhcyBvbiBpdHMgc2hvcmVzLCB0aGVyZSBhcmUgbWFueSBwbGFjZXMgd2hpY2ggc2hvdyBhbiBhbWF6aW5nIHN0cmVuZ3RoOyBidXQgbm90IG9uZSBvZiB0aGVzZSBkb3N0IHRob3Ugb2NjdXB5LCBhbmQgeWV0IGFsbCB0aGVzZSBwZW9wbGVzIGdsYWRseSBkbyB0aHkgYmlkZGluZy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgcm9iYmVycyB0aGF0IGNsaW5nIHRvIGNsaWZmcyBhbmQgY3JhZ3MsIGJ1dCBmb3IgYSBraW5nIHRoZXJlIGlzIG5vIHN0cm9uZ2VyIG9yIG1vcmUgc2VjdXJlIGRlZmVuY2UgdGhhbiB0cnVzdCBhbmQgZ3JhdGl0dWRlLiBUaGVzZSBvcGVuIHVwIGZvciB0aGVlIHRoZSBDcmV0YW4gc2VhLCB0aGVzZSB0aGUgUGVsb3Bvbm5lc3VzLiBSZWx5aW5nIHVwb24gdGhlc2UsIHlvdW5nIGFzIHRob3UgYXJ0LCB0aG91IGhhc3QgYWxyZWFkeSBtYWRlIHRoeXNlbGYgbGVhZGVyIGhlcmUsIGFuZCBtYXN0ZXIgdGhlcmUuPC9xPiBXaGlsZSBoZSB3YXMgeWV0IHNwZWFraW5nLCBQaGlsaXAgaGFuZGVkIHRoZSBlbnRyYWlscyB0byB0aGUgc2VlciwgYW5kIGRyYXdpbmcgQXJhdHVzIHRvIGhpbSBieSB0aGUgaGFuZCwgc2FpZDogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyByb2JiZXJzIHRoYXQgY2xpbmcgdG8gY2xpZmZzIGFuZCBjcmFncywgYnV0IGZvciBhIGtpbmcgdGhlcmUgaXMgbm8gc3Ryb25nZXIgb3IgbW9yZSBzZWN1cmUgZGVmZW5jZSB0aGFuIHRydXN0IGFuZCBncmF0aXR1ZGUuIFRoZXNlIG9wZW4gdXAgZm9yIHRoZWUgdGhlIENyZXRhbiBzZWEsIHRoZXNlIHRoZSBQZWxvcG9ubmVzdXMuIFJlbHlpbmcgdXBvbiB0aGVzZSwgeW91bmcgYXMgdGhvdSBhcnQsIHRob3UgaGFzdCBhbHJlYWR5IG1hZGUgdGh5c2VsZiBsZWFkZXIgaGVyZSwgYW5kIG1hc3RlciB0aGVyZS48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUgaGl0aGVyLCB0aGVuLCBhbmQgbGV0IHVzIHRha2UgdGhlIHNhbWUgcm9hZCw8L3E+IGltcGx5aW5nIHRoYXQgaGUgaGFkIGJlZW4gY29uc3RyYWluZWQgYnkgaGltIGFuZCBtYWRlIHRvIGdpdmUgdXAgdGhlIGNpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBcmF0dXMgcHJlc2VudGx5IGJlZ2FuIHRvIHdpdGhkcmF3IGZyb20gdGhlIGNvdXJ0IGFuZCBsaXR0bGUgYnkgbGl0dGxlIHRvIHJldGlyZSBmcm9tIGhpcyBpbnRpbWFjeSB3aXRoIFBoaWxpcC4gV2hlbiB0aGUga2luZyB3YXMgYWJvdXQgdG8gY3Jvc3MgaW50byBFcGVpcnVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjE1IEIuQy4gUGhpbGlwIGhhZCBtYWRlIGFuIGFsbGlhbmNlIHdpdGggdGhlIENhcnRoYWdpbmlhbnMgYWdhaW5zdCB0aGUgUm9tYW5zLjwvbm90ZT4gYW5kIGFza2VkIGhpbSB0byBqb2luIHRoZSBleHBlZGl0aW9uLCBoZSByZWZ1c2VkIGFuZCByZW1haW5lZCBhdCBob21lLCBmZWFyaW5nIHRoYXQgaGUgd291bGQgYmUgY292ZXJlZCB3aXRoIGlnbm9taW55IGJ5IHRpbmUga2luZydzIHByb2NlZWRpbmdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAgbG9zdCBoaXMgZmxlZXQgbW9zdCBzaGFtZWZ1bGx5IGF0IHRoZSBoYW5kcyBvZiB0aGUgUm9tYW5zLCBhbmQgYWZ0ZXIgdXR0ZXIgZmFpbHVyZSBpbiBoaXMgdW5kZXJ0YWtpbmdzLCBjYW1lIGJhY2sgaW50byBQZWxvcG9ubmVzdXMuIEhlcmUgaGUgdHJpZWQgb25jZSBtb3JlIHRvIGhvb2R3aW5rIHRoZSBNZXNzZW5pYW5zLCBhbmQgYWZ0ZXIgYmVpbmcgZGV0ZWN0ZWQgaW4gdGhpcywgd3JvbmdlZCB0aGVtIG9wZW5seSBhbmQgcmF2YWdlZCB0aGVpciB0ZXJyaXRvcnkuIFRoZW4gQXJhdHVzIHdhcyBhbHRvZ2V0aGVyIGVzdHJhbmdlZCBhbmQgZmlsbGVkIHdpdGggZGlzdHJ1c3Qgb2YgdGhlIGtpbmcsIGJlaW5nIG5vdyBhd2FyZSBhbHNvIG9mIHRoZSBjcmltZSBjb21taXR0ZWQgYWdhaW5zdCBoaXMgZG9tZXN0aWMgbGlmZS4gQXQgdGhpcyBoZSB3YXMgc29yZWx5IHZleGVkIGhpbXNlbGYsIGJ1dCBrZXB0IGl0IGhpZGRlbiBmcm9tIGhpcyBzb24sIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndobyBjb3VsZCBvbmx5IGtub3cgdGhhdCBoZSBoYWQgYmVlbiBzaGFtZWZ1bGx5IGFidXNlZCwgc2VlaW5nIHRoYXQgaGUgd2FzIG5vdCBhYmxlIHRvIGF2ZW5nZSBoaW1zZWxmLiBGb3IgUGhpbGlwIHdvdWxkIHNlZW0gdG8gaGF2ZSB1bmRlcmdvbmUgYSB2ZXJ5IGdyZWF0IGFuZCBpbmV4cGxpY2FibGUgY2hhbmdlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiA3LjEzIiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgdmlpLiAxMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW4gdGhhdCBmcm9tIGEgZ2VudGxlIHByaW5jZSBhbmQgY2hhc3RlIHlvdXRoIGhlIGJlY2FtZSBhIGxhc2NpdmlvdXMgbWFuIGFuZCBhIHBlcm5pY2lvdXMgdHlyYW50LiBJbiBmYWN0LCBob3dldmVyLCB0aGlzIHdhcyBub3QgYSBjaGFuZ2Ugb2YgbmF0dXJlLCBidXQgYSBzaG93aW5nIGZvcnRoLCBpbiB0aW1lIG9mIHNlY3VyaXR5LCBvZiBhIGJhc2VuZXNzIHdoaWNoIGhpcyBmZWFycyBoYWQgbG9uZyBsZWQgaGltIHRvIGNvbmNlYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFyYXR1cyBwcmVzZW50bHkgYmVnYW4gdG8gd2l0aGRyYXcgZnJvbSB0aGUgY291cnQgYW5kIGxpdHRsZSBieSBsaXR0bGUgdG8gcmV0aXJlIGZyb20gaGlzIGludGltYWN5IHdpdGggUGhpbGlwLiBXaGVuIHRoZSBraW5nIHdhcyBhYm91dCB0byBjcm9zcyBpbnRvIEVwZWlydXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIxNSBCLkMuIFBoaWxpcCBoYWQgbWFkZSBhbiBhbGxpYW5jZSB3aXRoIHRoZSBDYXJ0aGFnaW5pYW5zIGFnYWluc3QgdGhlIFJvbWFucy48L25vdGU+IGFuZCBhc2tlZCBoaW0gdG8gam9pbiB0aGUgZXhwZWRpdGlvbiwgaGUgcmVmdXNlZCBhbmQgcmVtYWluZWQgYXQgaG9tZSwgZmVhcmluZyB0aGF0IGhlIHdvdWxkIGJlIGNvdmVyZWQgd2l0aCBpZ25vbWlueSBieSB0aW5lIGtpbmcncyBwcm9jZWVkaW5ncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBsb3N0IGhpcyBmbGVldCBtb3N0IHNoYW1lZnVsbHkgYXQgdGhlIGhhbmRzIG9mIHRoZSBSb21hbnMsIGFuZCBhZnRlciB1dHRlciBmYWlsdXJlIGluIGhpcyB1bmRlcnRha2luZ3MsIGNhbWUgYmFjayBpbnRvIFBlbG9wb25uZXN1cy4gSGVyZSBoZSB0cmllZCBvbmNlIG1vcmUgdG8gaG9vZHdpbmsgdGhlIE1lc3NlbmlhbnMsIGFuZCBhZnRlciBiZWluZyBkZXRlY3RlZCBpbiB0aGlzLCB3cm9uZ2VkIHRoZW0gb3Blbmx5IGFuZCByYXZhZ2VkIHRoZWlyIHRlcnJpdG9yeS4gVGhlbiBBcmF0dXMgd2FzIGFsdG9nZXRoZXIgZXN0cmFuZ2VkIGFuZCBmaWxsZWQgd2l0aCBkaXN0cnVzdCBvZiB0aGUga2luZywgYmVpbmcgbm93IGF3YXJlIGFsc28gb2YgdGhlIGNyaW1lIGNvbW1pdHRlZCBhZ2FpbnN0IGhpcyBkb21lc3RpYyBsaWZlLiBBdCB0aGlzIGhlIHdhcyBzb3JlbHkgdmV4ZWQgaGltc2VsZiwgYnV0IGtlcHQgaXQgaGlkZGVuIGZyb20gaGlzIHNvbiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndobyBjb3VsZCBvbmx5IGtub3cgdGhhdCBoZSBoYWQgYmVlbiBzaGFtZWZ1bGx5IGFidXNlZCwgc2VlaW5nIHRoYXQgaGUgd2FzIG5vdCBhYmxlIHRvIGF2ZW5nZSBoaW1zZWxmLiBGb3IgUGhpbGlwIHdvdWxkIHNlZW0gdG8gaGF2ZSB1bmRlcmdvbmUgYSB2ZXJ5IGdyZWF0IGFuZCBpbmV4cGxpY2FibGUgY2hhbmdlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gNy4xMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIHZpaS4gMTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIHRoYXQgZnJvbSBhIGdlbnRsZSBwcmluY2UgYW5kIGNoYXN0ZSB5b3V0aCBoZSBiZWNhbWUgYSBsYXNjaXZpb3VzIG1hbiBhbmQgYSBwZXJuaWNpb3VzIHR5cmFudC4gSW4gZmFjdCwgaG93ZXZlciwgdGhpcyB3YXMgbm90IGEgY2hhbmdlIG9mIG5hdHVyZSwgYnV0IGEgc2hvd2luZyBmb3J0aCwgaW4gdGltZSBvZiBzZWN1cml0eSwgb2YgYSBiYXNlbmVzcyB3aGljaCBoaXMgZmVhcnMgaGFkIGxvbmcgbGVkIGhpbSB0byBjb25jZWFsLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDcuMTMiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCB2aWkuIDEzLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoYXQgdGhlIGZlZWxpbmdzIHdoaWNoIGhlIGhhZCBjaGVyaXNoZWQgZnJvbSB0aGUgYmVnaW5uaW5nIHRvd2FyZHMgQXJhdHVzIGhhZCBhbiBhZG1peHR1cmUgb2Ygc2hhbWUgYW5kIGZlYXIsIHdhcyBtYWRlIHBsYWluIGJ5IHdoYXQgaGUgZGlkIHRvIGhpbSBhdCB0aGUgbGFzdC4gRm9yIGhlIGRlc2lyZWQgdG8ga2lsbCBBcmF0dXMsIGFuZCB0aG91Z2h0IGhlIGNvdWxkIG5vdCBiZSBhIGZyZWUgbWFuIHdoaWxlIEFyYXR1cyBsaXZlZCwgbXVjaCBsZXNzIGEgdHlyYW50IG9yIGEga2luZy4gSW4gYSB2aW9sZW50IHdheSwgaG93ZXZlciwgaGUgbWFkZSBubyBhdHRlbXB0IHVwb24gaGltLCBidXQgb3JkZXJlZCBUYXVyaW9uLCBvbmUgb2YgaGlzIG9mZmljZXJzIGFuZCBmcmllbmRzLCB0byBkbyB0aGlzIGluIGEgc2VjcmV0IHdheSwgcHJlZmVyYWJseSBieSBwb2lzb24sIHdoZW4gdGhlIGtpbmcgd2FzIGFic2VudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gVGF1cmlvbiBtYWRlIGFuIGludGltYXRlIGNvbXBhbmlvbiBvZiBBcmF0dXMsIGFuZCBnYXZlIGhpbSBwb2lzb24sIG5vdCBvZiBhIHNoYXJwIGFuZCB2aW9sZW50IHNvcnQsIGJ1dCBvbmUgb2YgdGhvc2Ugd2hpY2ggZmlyc3QgaW5kdWNlIGdlbnRsZSBoZWF0cyBpbiB0aGUgYm9keSwgYW5kIGEgZHVsbCBjb3VnaCwgYW5kIHRoZW4gbGl0dGxlIGJ5IGxpdHRsZSBicmluZyBvbiBjb25zdW1wdGlvbi4gVGhlIHRoaW5nIHdhcyBub3QgaGlkZGVuIGZyb20gQXJhdHVzLCBidXQgc2luY2UgaXQgd2FzIG5vIHVzZSBmb3IgaGltIHRvIGNvbnZpY3QgdGhlIGNyaW1pbmFsLCBoZSBjYWxtbHkgYW5kIHNpbGVudGx5IGRyYW5rIGhpcyBjdXAgb2Ygc3VmZmVyaW5nIHRvIHRoZSBkcmVncywgYXMgaWYgaGlzIHNpY2tuZXNzIGhhZCBiZWVuIG9mIGEgY29tbW9uIGFuZCBmYW1pbGlhciB0eXBlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGVuIG9uZSBvZiBoaXMgaW50aW1hdGUgY29tcGFuaW9ucyB3aG8gd2FzIHdpdGggaGltIGluIGhpcyBjaGFtYmVyIHNhdyBoaW0gc3BpdCBibG9vZCwgYW5kIGV4cHJlc3NlZCBzdXJwcmlzZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdWNoLCBteSBkZWFyIENlcGhhbG8sPC9xPiBzYWlkIEFyYXR1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmUgdGhlIHdhZ2VzIG9mIHJveWFsIGZyaWVuZHNoaXAuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoYXQgdGhlIGZlZWxpbmdzIHdoaWNoIGhlIGhhZCBjaGVyaXNoZWQgZnJvbSB0aGUgYmVnaW5uaW5nIHRvd2FyZHMgQXJhdHVzIGhhZCBhbiBhZG1peHR1cmUgb2Ygc2hhbWUgYW5kIGZlYXIsIHdhcyBtYWRlIHBsYWluIGJ5IHdoYXQgaGUgZGlkIHRvIGhpbSBhdCB0aGUgbGFzdC4gRm9yIGhlIGRlc2lyZWQgdG8ga2lsbCBBcmF0dXMsIGFuZCB0aG91Z2h0IGhlIGNvdWxkIG5vdCBiZSBhIGZyZWUgbWFuIHdoaWxlIEFyYXR1cyBsaXZlZCwgbXVjaCBsZXNzIGEgdHlyYW50IG9yIGEga2luZy4gSW4gYSB2aW9sZW50IHdheSwgaG93ZXZlciwgaGUgbWFkZSBubyBhdHRlbXB0IHVwb24gaGltLCBidXQgb3JkZXJlZCBUYXVyaW9uLCBvbmUgb2YgaGlzIG9mZmljZXJzIGFuZCBmcmllbmRzLCB0byBkbyB0aGlzIGluIGEgc2VjcmV0IHdheSwgcHJlZmVyYWJseSBieSBwb2lzb24sIHdoZW4gdGhlIGtpbmcgd2FzIGFic2VudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIFRhdXJpb24gbWFkZSBhbiBpbnRpbWF0ZSBjb21wYW5pb24gb2YgQXJhdHVzLCBhbmQgZ2F2ZSBoaW0gcG9pc29uLCBub3Qgb2YgYSBzaGFycCBhbmQgdmlvbGVudCBzb3J0LCBidXQgb25lIG9mIHRob3NlIHdoaWNoIGZpcnN0IGluZHVjZSBnZW50bGUgaGVhdHMgaW4gdGhlIGJvZHksIGFuZCBhIGR1bGwgY291Z2gsIGFuZCB0aGVuIGxpdHRsZSBieSBsaXR0bGUgYnJpbmcgb24gY29uc3VtcHRpb24uIFRoZSB0aGluZyB3YXMgbm90IGhpZGRlbiBmcm9tIEFyYXR1cywgYnV0IHNpbmNlIGl0IHdhcyBubyB1c2UgZm9yIGhpbSB0byBjb252aWN0IHRoZSBjcmltaW5hbCwgaGUgY2FsbWx5IGFuZCBzaWxlbnRseSBkcmFuayBoaXMgY3VwIG9mIHN1ZmZlcmluZyB0byB0aGUgZHJlZ3MsIGFzIGlmIGhpcyBzaWNrbmVzcyBoYWQgYmVlbiBvZiBhIGNvbW1vbiBhbmQgZmFtaWxpYXIgdHlwZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gb25lIG9mIGhpcyBpbnRpbWF0ZSBjb21wYW5pb25zIHdobyB3YXMgd2l0aCBoaW0gaW4gaGlzIGNoYW1iZXIgc2F3IGhpbSBzcGl0IGJsb29kLCBhbmQgZXhwcmVzc2VkIHN1cnByaXNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VjaCwgbXkgZGVhciBDZXBoYWxvLDwvcT4gc2FpZCBBcmF0dXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hcmUgdGhlIHdhZ2VzIG9mIHJveWFsIGZyaWVuZHNoaXAuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gaGUgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMTMgQi5DLjwvbm90ZT4gYXQgQWVnaXVtLCB3aGlsZSBnZW5lcmFsIGZvciB0aGUgc2V2ZW50ZWVudGggdGltZSwgYW5kIHRoZSBBY2hhZWFucyB3ZXJlIHZlcnkgZGVzaXJvdXMgdGhhdCBoZSBzaG91bGQgaGF2ZSBidXJpYWwgdGhlcmUgYW5kIG1lbW9yaWFscyBiZWZpdHRpbmcgaGlzIGxpZmUuIEJ1dCB0aGUgU2ljeW9uaWFucyByZWdhcmRlZCBpdCBhcyBhIGNhbGFtaXR5IHRoYXQgaGUgc2hvdWxkIG5vdCBiZSBidXJpZWQgaW4gdGhlaXIgY2l0eSwgYW5kIHBlcnN1YWRlZCB0aGUgQWNoYWVhbnMgdG8gc3VycmVuZGVyIGhpcyBib2R5IHRvIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkLCBob3dldmVyLCBhbiBhbmNpZW50IGxhdyB0aGF0IG5vIG9uZSBzaG91bGQgYmUgYnVyaWVkIGluc2lkZSB0aGUgY2l0eSB3YWxscywgYW5kIHRoZSBsYXcgd2FzIHN1cHBvcnRlZCBieSBzdHJvbmcgZmVlbGluZ3Mgb2Ygc3VwZXJzdGl0aW9uLiBTbyB0aGV5IHNlbnQgdG8gRGVscGhpIHRvIGdldCBhZHZpY2UgaW4gdGhlIG1hdHRlciBmcm9tIHRoZSBQeXRoaWFuIHByaWVzdGVzcywgYW5kIHNoZSBnYXZlIHRoZW0gdGhlIGZvbGxvd2luZyBvcmFjdWxhciBhbnN3ZXI64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPldvdWxkJ3N0IHRob3UsIE8gU2ljeW9uLCBwYXkgQXJhdHVzIGxhc3RpbmcgaG9ub3VyIGZvciB0aGUgbGl2ZXMgaGUgc2F2ZWQsIDwvbD4KCQkJCQkgICAgICAgICAgPGw+QW5kIGpvaW4gaW4gcGlvdXMgZnVuZXJhbCByaXRlcyBmb3IgdGh5IGRlcGFydGVkIGxvcmQ/IDwvbD4KCQkJCQkgICAgICAgICAgPGw+S25vdyB0aGF0IHRoZSBwbGFjZSB3aGljaCB2ZXhlcyBvciBpcyB2ZXhlZCBieSBoaW0gPC9sPgoJCQkJCSAgICAgICAgICA8bD5JcyBzYWNyaWxlZ2lvdXMsIGJlIGl0IGluIGVhcnRoIG9yIHNreSBvciBzZWEuPC9sPgogICAgICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlXaGVuIHRoZSBvcmFjbGUgd2FzIGJyb3VnaHQgdG8gdGhlbSB0aGUgQWNoYWVhbnMgd2VyZSBhbGwgZGVsaWdodGVkLCBhbmQgdGhlIFNpY3lvbmlhbnMsIGluIHBhcnRpY3VsYXIsIGNoYW5naW5nIHRoZWlyIG1vdXJuaW5nIGludG8gZmVzdGl2YWwsIGF0IG9uY2UgcHV0IG9uIGdhcmxhbmRzIGFuZCB3aGl0ZSByYWltZW50IGFuZCBicm91Z2h0IHRoZSBib2R5IG9mIEFyYXR1cyBmcm9tIEFlZ2l1bSBpbnRvIHRoZWlyIGNpdHksIGFtaWQgaHltbnMgb2YgcHJhaXNlIGFuZCBjaG9yYWwgZGFuY2VzOyBhbmQgY2hvb3Npbmcgb3V0IGEgY29tbWFuZGluZyBwbGFjZSwgdGhleSBidXJpZWQgaGltIHRoZXJlLCBjYWxsaW5nIGhpbSBmb3VuZGVyIGFuZCBzYXZpb3VyIG9mIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIHBsYWNlIGlzIGNhbGxlZCB0byB0aGlzIGRheSBBcmF0ZWl1bSwgYW5kIHllYXJseSBzYWNyaWZpY2VzIGFyZSBtYWRlIHRvIEFyYXR1cyB0aGVyZSwgb25lIG9uIHRoZSBkYXkgd2hlbiBoZSBmcmVlZCB0aGUgY2l0eSBmcm9tIGl0cyB0eXJhbm554oCUdGhlIGZpZnRoIGRheSBvZiB0aGUgbW9udGggRGFlc2l1cyAod2hpY2ggdGhlIEF0aGVuaWFucyBjYWxsIEFudGhlc3Rlbm9uKSwgd2hpY2ggc2FjcmlmaWNlIGhhcyB0aGUgbmFtZSBTb3RlcmlhLCBhbmQgb25lIG9uIHRoZSBkYXkgb2YgdGhlIG1vbnRoIHdoZW4sIGFjY29yZGluZyB0byB0aGUgcmVjb3JkcywgaGUgd2FzIGJvcm4uIFRoZSBmaXJzdCBvZiB0aGVzZSBzYWNyaWZpY2VzIHdhcyBwZXJmb3JtZWQgYnkgdGhlIHByaWVzdCBvZiBaZXVzIHRoZSBTYXZpb3VyOyB0aGUgc2Vjb25kIGJ5IHRoZSBwcmllc3Qgb2YgQXJhdHVzLCB3aG8gd29yZSBhIGhlYWRiYW5kLCBub3QgcHVyZSB3aGl0ZSBidXQgcHVycGxlIGFuZCB3aGl0ZSwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGh5bW5zIHdpdGggYWNjb21wYW5pbWVudCBvZiBseXJlIHdlcmUgc3VuZyBieSB0aGUgYXJ0aXN0cyBvZiBEaW9ueXN1cywgYW5kIHRoZSBneW1uYXNpYXJjaCB0b29rIHBhcnQgaW4gdGhlIHByb2Nlc3Npb24sIGF0IHRoZSBoZWFkIG9mIHRoZSBib3lzIGFuZCB5b3VuZyBtZW4gb2YgbWlsaXRhcnkgYWdlOyB0aGVuIGZvbGxvd2VkIHRoZSBjb3VuY2lsbG9ycyB3ZWFyaW5nIGdhcmxhbmRzLCBhbmQgYWxsIG90aGVyIGNpdGl6ZW5zIHdobyBkZXNpcmVkLiBPZiB0aGVzZSBjZXJlbW9uaWFsIHJpdGVzIHRoZSBTaWN5b25pYW5zIHN0aWxsIHByZXNlcnZlIHNsaWdodCB0cmFjZXMsIGNlbGVicmF0ZWQgb24gdGhlIHNhbWUgZGF5cyBvZiB0aGUgeWVhciwgYnV0IG1vc3Qgb2YgdGhlbSwgb3dpbmcgdG8gdGhlIHBhc3NhZ2Ugb2YgdGltZSBhbmQgdGhlIHByZXNzdXJlIG9mIG90aGVyIG1hdHRlcnMsIGhhdmUgbGFwc2VkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGhlIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAyMTMgQi5DLjwvbm90ZT4gYXQgQWVnaXVtLCB3aGlsZSBnZW5lcmFsIGZvciB0aGUgc2V2ZW50ZWVudGggdGltZSwgYW5kIHRoZSBBY2hhZWFucyB3ZXJlIHZlcnkgZGVzaXJvdXMgdGhhdCBoZSBzaG91bGQgaGF2ZSBidXJpYWwgdGhlcmUgYW5kIG1lbW9yaWFscyBiZWZpdHRpbmcgaGlzIGxpZmUuIEJ1dCB0aGUgU2ljeW9uaWFucyByZWdhcmRlZCBpdCBhcyBhIGNhbGFtaXR5IHRoYXQgaGUgc2hvdWxkIG5vdCBiZSBidXJpZWQgaW4gdGhlaXIgY2l0eSwgYW5kIHBlcnN1YWRlZCB0aGUgQWNoYWVhbnMgdG8gc3VycmVuZGVyIGhpcyBib2R5IHRvIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkLCBob3dldmVyLCBhbiBhbmNpZW50IGxhdyB0aGF0IG5vIG9uZSBzaG91bGQgYmUgYnVyaWVkIGluc2lkZSB0aGUgY2l0eSB3YWxscywgYW5kIHRoZSBsYXcgd2FzIHN1cHBvcnRlZCBieSBzdHJvbmcgZmVlbGluZ3Mgb2Ygc3VwZXJzdGl0aW9uLiBTbyB0aGV5IHNlbnQgdG8gRGVscGhpIHRvIGdldCBhZHZpY2UgaW4gdGhlIG1hdHRlciBmcm9tIHRoZSBQeXRoaWFuIHByaWVzdGVzcywgYW5kIHNoZSBnYXZlIHRoZW0gdGhlIGZvbGxvd2luZyBvcmFjdWxhciBhbnN3ZXI64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3VsZCdzdCB0aG91LCBPIFNpY3lvbiwgcGF5IEFyYXR1cyBsYXN0aW5nIGhvbm91ciBmb3IgdGhlIGxpdmVzIGhlIHNhdmVkLCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGpvaW4gaW4gcGlvdXMgZnVuZXJhbCByaXRlcyBmb3IgdGh5IGRlcGFydGVkIGxvcmQ/IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Lbm93IHRoYXQgdGhlIHBsYWNlIHdoaWNoIHZleGVzIG9yIGlzIHZleGVkIGJ5IGhpbSA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXMgc2FjcmlsZWdpb3VzLCBiZSBpdCBpbiBlYXJ0aCBvciBza3kgb3Igc2VhLjwvbD4KICAgICAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Xb3VsZCdzdCB0aG91LCBPIFNpY3lvbiwgcGF5IEFyYXR1cyBsYXN0aW5nIGhvbm91ciBmb3IgdGhlIGxpdmVzIGhlIHNhdmVkLCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIGpvaW4gaW4gcGlvdXMgZnVuZXJhbCByaXRlcyBmb3IgdGh5IGRlcGFydGVkIGxvcmQ/IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Lbm93IHRoYXQgdGhlIHBsYWNlIHdoaWNoIHZleGVzIG9yIGlzIHZleGVkIGJ5IGhpbSA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXMgc2FjcmlsZWdpb3VzLCBiZSBpdCBpbiBlYXJ0aCBvciBza3kgb3Igc2VhLjwvbD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJV2hlbiB0aGUgb3JhY2xlIHdhcyBicm91Z2h0IHRvIHRoZW0gdGhlIEFjaGFlYW5zIHdlcmUgYWxsIGRlbGlnaHRlZCwgYW5kIHRoZSBTaWN5b25pYW5zLCBpbiBwYXJ0aWN1bGFyLCBjaGFuZ2luZyB0aGVpciBtb3VybmluZyBpbnRvIGZlc3RpdmFsLCBhdCBvbmNlIHB1dCBvbiBnYXJsYW5kcyBhbmQgd2hpdGUgcmFpbWVudCBhbmQgYnJvdWdodCB0aGUgYm9keSBvZiBBcmF0dXMgZnJvbSBBZWdpdW0gaW50byB0aGVpciBjaXR5LCBhbWlkIGh5bW5zIG9mIHByYWlzZSBhbmQgY2hvcmFsIGRhbmNlczsgYW5kIGNob29zaW5nIG91dCBhIGNvbW1hbmRpbmcgcGxhY2UsIHRoZXkgYnVyaWVkIGhpbSB0aGVyZSwgY2FsbGluZyBoaW0gZm91bmRlciBhbmQgc2F2aW91ciBvZiB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgcGxhY2UgaXMgY2FsbGVkIHRvIHRoaXMgZGF5IEFyYXRlaXVtLCBhbmQgeWVhcmx5IHNhY3JpZmljZXMgYXJlIG1hZGUgdG8gQXJhdHVzIHRoZXJlLCBvbmUgb24gdGhlIGRheSB3aGVuIGhlIGZyZWVkIHRoZSBjaXR5IGZyb20gaXRzIHR5cmFubnnigJR0aGUgZmlmdGggZGF5IG9mIHRoZSBtb250aCBEYWVzaXVzICh3aGljaCB0aGUgQXRoZW5pYW5zIGNhbGwgQW50aGVzdGVub24pLCB3aGljaCBzYWNyaWZpY2UgaGFzIHRoZSBuYW1lIFNvdGVyaWEsIGFuZCBvbmUgb24gdGhlIGRheSBvZiB0aGUgbW9udGggd2hlbiwgYWNjb3JkaW5nIHRvIHRoZSByZWNvcmRzLCBoZSB3YXMgYm9ybi4gVGhlIGZpcnN0IG9mIHRoZXNlIHNhY3JpZmljZXMgd2FzIHBlcmZvcm1lZCBieSB0aGUgcHJpZXN0IG9mIFpldXMgdGhlIFNhdmlvdXI7IHRoZSBzZWNvbmQgYnkgdGhlIHByaWVzdCBvZiBBcmF0dXMsIHdobyB3b3JlIGEgaGVhZGJhbmQsIG5vdCBwdXJlIHdoaXRlIGJ1dCBwdXJwbGUgYW5kIHdoaXRlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['53.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoeW1ucyB3aXRoIGFjY29tcGFuaW1lbnQgb2YgbHlyZSB3ZXJlIHN1bmcgYnkgdGhlIGFydGlzdHMgb2YgRGlvbnlzdXMsIGFuZCB0aGUgZ3ltbmFzaWFyY2ggdG9vayBwYXJ0IGluIHRoZSBwcm9jZXNzaW9uLCBhdCB0aGUgaGVhZCBvZiB0aGUgYm95cyBhbmQgeW91bmcgbWVuIG9mIG1pbGl0YXJ5IGFnZTsgdGhlbiBmb2xsb3dlZCB0aGUgY291bmNpbGxvcnMgd2VhcmluZyBnYXJsYW5kcywgYW5kIGFsbCBvdGhlciBjaXRpemVucyB3aG8gZGVzaXJlZC4gT2YgdGhlc2UgY2VyZW1vbmlhbCByaXRlcyB0aGUgU2ljeW9uaWFucyBzdGlsbCBwcmVzZXJ2ZSBzbGlnaHQgdHJhY2VzLCBjZWxlYnJhdGVkIG9uIHRoZSBzYW1lIGRheXMgb2YgdGhlIHllYXIsIGJ1dCBtb3N0IG9mIHRoZW0sIG93aW5nIHRvIHRoZSBwYXNzYWdlIG9mIHRpbWUgYW5kIHRoZSBwcmVzc3VyZSBvZiBvdGhlciBtYXR0ZXJzLCBoYXZlIGxhcHNlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGxpZmUgYW5kIHN1Y2ggdGhlIG5hdHVyZSBvZiB0aGUgZWxkZXIgQXJhdHVzLCBhcyBoaXN0b3J5IHRlbGxzIHVzOyBhbmQgYXMgZm9yIGhpcyBzb24sIGhlIHdhcyBkZXByaXZlZCBvZiBoaXMgcmVhc29uIGJ5IFBoaWxpcCwgd2hvIGhhZCBhbiBhYm9taW5hYmxlIG5hdHVyZSBhbmQgYWRkZWQgc2F2YWdlIGNydWVsdHkgdG8gaGlzIHdhbnRvbiBleGVyY2lzZSBvZiBwb3dlci4gSGUgZ2F2ZSB0aGUgeW91bmcgbWFuIHBvaXNvbnMgd2hpY2ggZGlkIG5vdCBraWxsLCBidXQgY3JhemVkLCBhbmQgdGh1cyBtYWRlIGhpbSBhIHByZXkgdG8gc3RyYW5nZSBhbmQgZHJlYWRmdWwgaW1wdWxzZXMsIHVuZGVyIHdoaWNoIGhlIGdyYXNwZWQgYXQgYWJzdXJkIGFjdGl2aXRpZXMsIGFuZCBleHBlcmllbmNlcyBub3Qgb25seSBzaGFtZWZ1bCBidXQgZGVzdHJ1Y3RpdmUsIHNvIHRoYXQgZGVhdGggY2FtZSB0byBoaW0sIGFsdGhvdWdoIGhlIHdhcyB5b3VuZyBhbmQgaW4gdGhlIGZsb3dlciBvZiBoaXMgbGlmZSwgbm90IGFzIGEgY2FsYW1pdHksIGJ1dCBhcyByZWxlYXNlIGZyb20gZXZpbHMsIGFuZCBzYWx2YXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHVuaG9seSBkZWVkLCBob3dldmVyLCBQaGlsaXAgcGFpZCBhbXBsZSBwZW5hbHRpZXMgdG8gWmV1cywgdGhlIGd1YXJkaWFuIG9mIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwLCBhcyBsb25nIGFzIGhlIGxpdmVkLiBGb3IgYWZ0ZXIgYmVpbmcgc3ViZHVlZCBieSB0aGUgUm9tYW5zIGFuZCBwdXR0aW5nIGhpcyBmb3J0dW5lcyBpbiB0aGVpciBoYW5kcywgaGUgd2FzIHN0cmlwcGVkIG9mIG1vc3Qgb2YgaGlzIGRvbWluaW9ucywgc3VycmVuZGVyZWQgYWxsIGhpcyBzaGlwcyBidXQgZml2ZSwgYWdyZWVkIHRvIHBheSBhIHRob3VzYW5kIHRhbGVudHMgYmVzaWRlcywgZ2F2ZSB1cCBoaXMgc29uIHRvIHNlcnZlIGFzIGhvc3RhZ2UsIGFuZCBvbmx5IG91dCBvZiBwaXR5IG9idGFpbmVkIE1hY2Vkb25pYSBhbmQgaXRzIHRyaWJ1dGFyaWVzLiBCdXQgaGUgd2FzIGZvciBldmVyIHB1dHRpbmcgdG8gZGVhdGggdGhlIG5vYmxlc3Qgb2YgaGlzIHN1YmplY3RzIGFuZCBoaXMgbmVhcmVzdCBraW4sIGFuZCB0aHVzIGZpbGxlZCBoaXMgd2hvbGUga2luZ2RvbSB3aXRoIGhvcnJvciBhbmQgaGF0cmVkIG9mIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T25lIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBvbmx5IHdhcyBoaXMsIGFtaWQgc28gbWFueSBpbGxzLCBhbmQgdGhhdCB3YXMgYSBzb24gb2Ygc3VycGFzc2luZyBleGNlbGxlbmNlOyBidXQgdGhpcyBzb24gaGUga2lsbGVkLCBvdXQgb2YgZW52eSBhbmQgamVhbG91c3kgb2YgdGhlIGhvbm91ciBwYWlkIGhpbSBieSB0aGUgUm9tYW5zLCBhbmQgbGVmdCBoaXMga2luZ2RvbSB0byBoaXMgb3RoZXIgc29uLCBQZXJzZXVzLCB3aG8gd2FzIG5vdCBsZWdpdGltYXRlLCBhcyB3ZSBhcmUgdG9sZCwgYnV0IHN1cHBvc2l0aXRpb3VzLCB0aGUgY2hpbGQgb2YgYSBzZW1wc3RyZXNzLCBHbmF0aGFlbmlvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDguNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZW1pbGl1cyBQYXVsdXM8L3RpdGxlPiwgdmlpaS4gNiBmLjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDM0LjEiIHZhbGlkPSJ5ZXMiPnh4eGl2LjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDM2LjEiIHZhbGlkPSJ5ZXMiPnh4eHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGlzIGtpbmcgZ3JhY2VkIHRoZSB0cml1bXBoIG9mIEFlbWlsaXVzLCBhbmQgd2l0aCBoaW0gZW5kZWQgdGhlIHJveWFsIGxpbmUgb2YgdGhlIEFudGlnb25pZHM7IHdoZXJlYXMgdGhlIGRlc2NlbmRhbnRzIG9mIEFyYXR1cyB3ZXJlIGxpdmluZyBhdCBTaWN5b24gYW5kIFBlbGxlbmUgaW4gbXkgdGltZS4gCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGxpZmUgYW5kIHN1Y2ggdGhlIG5hdHVyZSBvZiB0aGUgZWxkZXIgQXJhdHVzLCBhcyBoaXN0b3J5IHRlbGxzIHVzOyBhbmQgYXMgZm9yIGhpcyBzb24sIGhlIHdhcyBkZXByaXZlZCBvZiBoaXMgcmVhc29uIGJ5IFBoaWxpcCwgd2hvIGhhZCBhbiBhYm9taW5hYmxlIG5hdHVyZSBhbmQgYWRkZWQgc2F2YWdlIGNydWVsdHkgdG8gaGlzIHdhbnRvbiBleGVyY2lzZSBvZiBwb3dlci4gSGUgZ2F2ZSB0aGUgeW91bmcgbWFuIHBvaXNvbnMgd2hpY2ggZGlkIG5vdCBraWxsLCBidXQgY3JhemVkLCBhbmQgdGh1cyBtYWRlIGhpbSBhIHByZXkgdG8gc3RyYW5nZSBhbmQgZHJlYWRmdWwgaW1wdWxzZXMsIHVuZGVyIHdoaWNoIGhlIGdyYXNwZWQgYXQgYWJzdXJkIGFjdGl2aXRpZXMsIGFuZCBleHBlcmllbmNlcyBub3Qgb25seSBzaGFtZWZ1bCBidXQgZGVzdHJ1Y3RpdmUsIHNvIHRoYXQgZGVhdGggY2FtZSB0byBoaW0sIGFsdGhvdWdoIGhlIHdhcyB5b3VuZyBhbmQgaW4gdGhlIGZsb3dlciBvZiBoaXMgbGlmZSwgbm90IGFzIGEgY2FsYW1pdHksIGJ1dCBhcyByZWxlYXNlIGZyb20gZXZpbHMsIGFuZCBzYWx2YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHVuaG9seSBkZWVkLCBob3dldmVyLCBQaGlsaXAgcGFpZCBhbXBsZSBwZW5hbHRpZXMgdG8gWmV1cywgdGhlIGd1YXJkaWFuIG9mIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwLCBhcyBsb25nIGFzIGhlIGxpdmVkLiBGb3IgYWZ0ZXIgYmVpbmcgc3ViZHVlZCBieSB0aGUgUm9tYW5zIGFuZCBwdXR0aW5nIGhpcyBmb3J0dW5lcyBpbiB0aGVpciBoYW5kcywgaGUgd2FzIHN0cmlwcGVkIG9mIG1vc3Qgb2YgaGlzIGRvbWluaW9ucywgc3VycmVuZGVyZWQgYWxsIGhpcyBzaGlwcyBidXQgZml2ZSwgYWdyZWVkIHRvIHBheSBhIHRob3VzYW5kIHRhbGVudHMgYmVzaWRlcywgZ2F2ZSB1cCBoaXMgc29uIHRvIHNlcnZlIGFzIGhvc3RhZ2UsIGFuZCBvbmx5IG91dCBvZiBwaXR5IG9idGFpbmVkIE1hY2Vkb25pYSBhbmQgaXRzIHRyaWJ1dGFyaWVzLiBCdXQgaGUgd2FzIGZvciBldmVyIHB1dHRpbmcgdG8gZGVhdGggdGhlIG5vYmxlc3Qgb2YgaGlzIHN1YmplY3RzIGFuZCBoaXMgbmVhcmVzdCBraW4sIGFuZCB0aHVzIGZpbGxlZCBoaXMgd2hvbGUga2luZ2RvbSB3aXRoIGhvcnJvciBhbmQgaGF0cmVkIG9mIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
