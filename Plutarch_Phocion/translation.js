var translation={}
translation['1.1'] = ""
translation['2.1'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBwcmluY2lwbGVzIGZvdW5kIGFuIGlsbHVzdHJhdGlvbiBpbiBDYXRvIHRoZSBZb3VuZ2VyIGFsc28uIEZvciBoaXMgbWFubmVycyB3ZXJlIG5vdCB3aW5uaW5nLCBub3IgcGxlYXNpbmcgdG8gdGhlIHBvcHVsYWNlLCBub3Igd2FzIGhlIGVtaW5lbnQgaW4gaGlzIHB1YmxpYyBjYXJlZXIgZm9yIHBvcHVsYXJpdHkuIEluZGVlZCwgQ2ljZXJvIHNheXMgaXQgd2FzIGJlY2F1c2UgaGUgYWN0ZWQgYXMgaWYgaGUgbGl2ZWQgaW4gUGxhdG8ncyBjb21tb253ZWFsdGgsIGFuZCBub3QgYW1vbmcgdGhlIGRyZWdzIG9mIFJvbXVsdXMsIHRoYXQgaGUgd2FzIGRlZmVhdGVkIHdoZW4gaGUgc3Rvb2QgZm9yIHRoZSBjb25zdWxzaGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDIuMS44IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiBpaS4gMSwgODwvYmlibD4sIHdoZXJlLCBob3dldmVyLCB0aGVyZSBpcyBubyBhbGx1c2lvbiB0byBDYXRvJ3MgbG9zcyBvZiB0aGUgY29uc3Vsc2hpcC4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RGljaXQgZW5pbSB0YW1xdWFtIGluIFBsYXRvbmlzPC9mb3JlaWduPiAKICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOv867zrnPhM614b234b6zPC9mb3JlaWduPiwgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+bm9uIHRhbXF1YW0gaW4gUm9tdWxpIGZhZWNlLCBzZW50ZW50aWFtLjwvZm9yZWlnbj4KICAgICAgICAgICAgPC9ub3RlPiBidXQgSSB0aGluayBoZSBmYXJlZCBqdXN0IGFzIGZydWl0cyBkbyB3aGljaCBtYWtlIHRoZWlyIGFwcGVhcmFuY2Ugb3V0IG9mIHNlYXNvbi4gRm9yLCBhcyB3ZSBsb29rIHVwb24gdGhlc2Ugd2l0aCBkZWxpZ2h0IGFuZCBhZG1pcmF0aW9uLCBidXQgZG8gbm90IHVzZSB0aGVtLCBzbyB0aGUgb2xkLWZhc2hpb25lZCBjaGFyYWN0ZXIgb2YgQ2F0bywgd2hpY2gsIGFmdGVyIGEgbG9uZyBsYXBzZSBvZiB0aW1lLCBtYWRlIGl0cyBhcHBlYXJhbmNlIGFtb25nIGxpdmVzIHRoYXQgd2VyZSBjb3JydXB0ZWQgYW5kIGN1c3RvbXMgdGhhdCB3ZXJlIGRlYmFzZWQsIGVuam95ZWQgZ3JlYXQgcmVwdXRlIGFuZCBmYW1lLCBidXQgd2FzIG5vdCBzdWl0ZWQgdG8gdGhlIG5lZWRzIG9mIG1lbiBiZWNhdXNlIG9mIHRoZSB3ZWlnaHQgYW5kIGdyYW5kZXVyIG9mIGl0cyB2aXJ0dWUsIHdoaWNoIHdlcmUgb3V0IG9mIGFsbCBwcm9wb3J0aW9uIHRvIHRoZSBpbW1lZGlhdGUgdGltZXMuIEZvciBoaXMgbmF0aXZlIGNpdHkgd2FzIG5vdCBhbHJlYWR5IHByb3N0cmF0ZSwgbGlrZSB0aGF0IG9mIFBob2Npb24sIGJ1dCBzdHJ1Z2dsaW5nIHdpdGggZ3JlYXQgdGVtcGVzdCBhbmQgc3VyZ2UsIGFuZCB0aG91Z2ggaGUgY291bGQgb25seSBzZXJ2ZSBoZXIgYnkgcHV0dGluZyBoYW5kIHRvIHNhaWxzIGFuZCByb3BlcyBhbmQgYnkgc3VwcG9ydGluZyBtZW4gb2YgZ3JlYXRlciBpbmZsdWVuY2UsIGJ1dCB3YXMgcmVwdWxzZWQgZnJvbSBydWRkZXItc3dlZXBzIGFuZCBwaWxvdGFnZSwgaGUgbmV2ZXJ0aGVsZXNzIGdhdmUgRm9ydHVuZSBhIGhhcmQgY29udGVzdC4gU2hlIGRpZCwgaW5kZWVkLCBzZWl6ZSBhbmQgb3ZlcnRocm93IHRoZSBjb21tb253ZWFsdGggYnkgbWVhbnMgb2Ygb3RoZXIgbWVuLCBidXQgd2l0aCBkaWZmaWN1bHR5LCBzbG93bHksIGFmdGVyIGEgbG9uZyB0aW1lLCBhbmQgd2hlbiBpdCBoYWQgYWxtb3N0IHdvbiB0aGUgZGF5IHRocm91Z2ggQ2F0byBhbmQgdGhlIHZpcnR1ZSBvZiBDYXRvLiBBbmQgd2l0aCB0aGlzIHZpcnR1ZSB3ZSBjb21wYXJlIHRoYXQgb2YgUGhvY2lvbiwgdGhvdWdoIG5vdCBmb3IgdGhlaXIgZ2VuZXJhbCByZXNlbWJsYW5jZXMsIGJ1dCBvbiB0aGUgZ3JvdW5kIHRoYXQgYm90aCB3ZXJlIGdvb2QgbWVuIGFuZCBkZXZvdGVkIHRvIHRoZSBzdGF0ZS4gRm9yIHRoZXJlIGlzIHN1cmVseSBhIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgYnJhdmVyeSBvZiBvbmUgbWFuIGFuZCB0aGF0IG9mIGFub3RoZXIsIGFzLCBmb3IgaW5zdGFuY2UsIGJldHdlZW4gdGhhdCBvZiBBbGNpYmlhZGVzIGFuZCB0aGF0IG9mIEVwYW1pbm9uZGFzOyBiZXR3ZWVuIHRoZSB3aXNkb20gb2Ygb25lIG1hbiBhbmQgdGhhdCBvZiBhbm90aGVyLCBhcywgYmV0d2VlbiB0aGF0IG9mIFRoZW1pc3RvY2xlcyBhbmQgdGhhdCBvZiBBcmlzdGlkZXM7IGJldHdlZW4gdGhlIGp1c3RpY2Ugb2Ygb25lIG1hbiBhbmQgdGhhdCBvZiBhbm90aGVyLCBhcywgYmV0d2VlbiB0aGF0IG9mIE51bWEgYW5kIHRoYXQgb2YgQWdlc2lsYcO8cy4gQnV0IHRoZSB2aXJ0dWVzIG9mIHRoZXNlIG1lbiwgZXZlbiBkb3duIHRvIHRoZWlyIHVsdGltYXRlIGFuZCBtaW51dGUgZGlmZmVyZW5jZXMsIHNob3cgdGhhdCB0aGVpciBuYXR1cmVzIGhhZCBvbmUgYW5kIHRoZSBzYW1lIHN0YW1wLCBzaGFwZSwgYW5kIGdlbmVyYWwgY29sb3VyOyB0aGV5IHdlcmUgYW4gZXF1YWwgYmxlbmQsIHNvIHRvIHNwZWFrLCBvZiBzZXZlcml0eSBhbmQga2luZG5lc3MsIG9mIGNhdXRpb24gYW5kIGJyYXZlcnksIG9mIHNvbGljaXR1ZGUgZm9yIG90aGVycyBhbmQgZmVhcmxlc3NuZXNzIGZvciB0aGVtc2VsdmVzLCBvZiB0aGUgY2FyZWZ1bCBhdm9pZGFuY2Ugb2YgYmFzZW5lc3MgYW5kLCBpbiBsaWtlIGRlZ3JlZSwgdGhlIGVhZ2VyIHB1cnN1aXQgb2YganVzdGljZS4gVGhlcmVmb3JlIHdlIHNoYWxsIG5lZWQgYSB2ZXJ5IHN1YnRsZSBpbnN0cnVtZW50IG9mIHJlYXNvbmluZywgYXMgaXQgd2VyZSwgZm9yIHRoZSBkaXNjb3ZlcnkgYW5kIGRldGVybWluYXRpb24gb2YgdGhlaXIgZGlmZmVyZW5jZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gQXR0LiAyLjEuOCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBBdHQuPC90aXRsZT4gaWkuIDEsIDg8L2JpYmw+LCB3aGVyZSwgaG93ZXZlciwgdGhlcmUgaXMgbm8gYWxsdXNpb24gdG8gQ2F0bydzIGxvc3Mgb2YgdGhlIGNvbnN1bHNoaXAuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiBpaS4gMSwgODxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkRpY2l0IGVuaW0gdGFtcXVhbSBpbiBQbGF0b25pczwvZm9yZWlnbj4gCiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Azr/Ou865z4TOteG9t+G+szwvZm9yZWlnbj4sIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vbiB0YW1xdWFtIGluIFJvbXVsaSBmYWVjZSwgc2VudGVudGlhbS48L2ZvcmVpZ24+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBDYXRvJ3MgbGluZWFnZSwgdGhlbiwgd2FzIGlsbHVzdHJpb3VzLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQsIGFzIHdpbGwgYmUgc2FpZCBsYXRlcjsgYnV0IFBob2Npb24ncywgYXMgSSBqdWRnZSwgd2FzIG5vdCBhbHRvZ2V0aGVyIGlnbm9ibGUgb3IgbG93bHkuIEZvciBoYWQgaGUgYmVlbiB0aGUgc29uIG9mIGEgcGVzdGxlLW1ha2VyLCBhcyBJZG9tZW5ldXMgc2F5cywgdGhlbiBHbGF1Y2lwcHVzIHRoZSBzb24gb2YgSHlwZXJlaWRlcywgaW4gdGhlIHNwZWVjaCB3aGVyZWluIGhlIGNvbGxlY3RlZCBjb3VudGxlc3MgZXZpbCB0aGluZ3MgdG8gc2F5IGFnYWluc3QgaGltLCB3b3VsZCBub3QgaGF2ZSBvbWl0dGVkIGhpcyBtZWFuIGJpcnRoOyBub3Igd291bGQgUGhvY2lvbiBoYXZlIGxpdmVkIG9uIHNvIGhpZ2ggYSBwbGFuZSBvciBlbmpveWVkIHNvIHNvdW5kIGFuIGVkdWNhdGlvbiBhcyB0byBoYXZlIGJlZW4gYSBwdXBpbCBvZiBQbGF0byB3aGVuIGhlIHdhcyBzdGlsbCBhIHN0cmlwbGluZywgYW5kIGxhdGVyIGEgcHVwaWwgb2YgWGVub2NyYXRlcywgaW4gdGhlIEFjYWRlbXksIGFuZCB0byBoYXZlIGN1bHRpdmF0ZWQgdGhlIG5vYmxlc3QgYmVoYXZpb3VyIGZyb20gdGhlIHZlcnkgYmVnaW5uaW5nLiBGb3IgaGFyZGx5IGFueSBBdGhlbmlhbiBldmVyIHNhdyBQaG9jaW9uIGluIGxhdWdodGVyIG9yIGluIHRlYXJzLCBvciBtYWtpbmcgdXNlIG9mIGEgcHVibGljIGJhdGgsIGFzIER1cmlzIHRlbGxzIHVzLCBvciBob2xkaW5nIGhpcyBoYW5kIG91dHNpZGUgaGlzIGNsb2FrLOKAlHdoZW4gaGUgd29yZSBhIGNsb2FrLiBTaW5jZSBpbiB0aGUgY291bnRyeSwgYXQgbGVhc3QsIGFuZCBvbiBoaXMgY2FtcGFpZ25zLCBoZSBhbHdheXMgd2Fsa2VkIHdpdGhvdXQgc2hvZXMgb3Igb3V0ZXIgZ2FybWVudCwgdW5sZXNzIHRoZSBjb2xkIHdhcyBleGNlc3NpdmUgYW5kIGhhcmQgdG8gYmVhciwgc28gdGhhdCBwcmVzZW50bHkgaGlzIHNvbGRpZXJzIHVzZWQgdG8gc2F5IGluIGplc3QgdGhhdCBpdCB3YXMgYSBzaWduIG9mIHNldmVyZSB3aW50ZXIgd2hlbiBQaG9jaW9uIHdvcmUgYSBjbG9hay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IENhdG8ncyBsaW5lYWdlLCB0aGVuLCB3YXMgaWxsdXN0cmlvdXMsIGlzIGdlbmVyYWxseSBhZG1pdHRlZCwgYXMgd2lsbCBiZSBzYWlkIGxhdGVyOyBidXQgUGhvY2lvbidzLCBhcyBJIGp1ZGdlLCB3YXMgbm90IGFsdG9nZXRoZXIgaWdub2JsZSBvciBsb3dseS4gRm9yIGhhZCBoZSBiZWVuIHRoZSBzb24gb2YgYSBwZXN0bGUtbWFrZXIsIGFzIElkb21lbmV1cyBzYXlzLCB0aGVuIEdsYXVjaXBwdXMgdGhlIHNvbiBvZiBIeXBlcmVpZGVzLCBpbiB0aGUgc3BlZWNoIHdoZXJlaW4gaGUgY29sbGVjdGVkIGNvdW50bGVzcyBldmlsIHRoaW5ncyB0byBzYXkgYWdhaW5zdCBoaW0sIHdvdWxkIG5vdCBoYXZlIG9taXR0ZWQgaGlzIG1lYW4gYmlydGg7IG5vciB3b3VsZCBQaG9jaW9uIGhhdmUgbGl2ZWQgb24gc28gaGlnaCBhIHBsYW5lIG9yIGVuam95ZWQgc28gc291bmQgYW4gZWR1Y2F0aW9uIGFzIHRvIGhhdmUgYmVlbiBhIHB1cGlsIG9mIFBsYXRvIHdoZW4gaGUgd2FzIHN0aWxsIGEgc3RyaXBsaW5nLCBhbmQgbGF0ZXIgYSBwdXBpbCBvZiBYZW5vY3JhdGVzLCBpbiB0aGUgQWNhZGVteSwgYW5kIHRvIGhhdmUgY3VsdGl2YXRlZCB0aGUgbm9ibGVzdCBiZWhhdmlvdXIgZnJvbSB0aGUgdmVyeSBiZWdpbm5pbmcuIEZvciBoYXJkbHkgYW55IEF0aGVuaWFuIGV2ZXIgc2F3IFBob2Npb24gaW4gbGF1Z2h0ZXIgb3IgaW4gdGVhcnMsIG9yIG1ha2luZyB1c2Ugb2YgYSBwdWJsaWMgYmF0aCwgYXMgRHVyaXMgdGVsbHMgdXMsIG9yIGhvbGRpbmcgaGlzIGhhbmQgb3V0c2lkZSBoaXMgY2xvYWss4oCUd2hlbiBoZSB3b3JlIGEgY2xvYWsuIFNpbmNlIGluIHRoZSBjb3VudHJ5LCBhdCBsZWFzdCwgYW5kIG9uIGhpcyBjYW1wYWlnbnMsIGhlIGFsd2F5cyB3YWxrZWQgd2l0aG91dCBzaG9lcyBvciBvdXRlciBnYXJtZW50LCB1bmxlc3MgdGhlIGNvbGQgd2FzIGV4Y2Vzc2l2ZSBhbmQgaGFyZCB0byBiZWFyLCBzbyB0aGF0IHByZXNlbnRseSBoaXMgc29sZGllcnMgdXNlZCB0byBzYXkgaW4gamVzdCB0aGF0IGl0IHdhcyBhIHNpZ24gb2Ygc2V2ZXJlIHdpbnRlciB3aGVuIFBob2Npb24gd29yZSBhIGNsb2FrLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBoaXMgbmF0dXJlIHdhcyBtb3N0IGdlbnRsZSBhbmQgbW9zdCBraW5kLCBoaXMgY291bnRlbmFuY2UgbWFkZSBoaW0gc2VlbSBmb3JiaWRkaW5nIGFuZCBzdWxsZW4sIHNvIHRoYXQgaGFyZGx5IGFueSBvbmUgb2YgdGhvc2Ugd2hvIHdlcmUgbm90IG9uIGludGltYXRlIHRlcm1zIGNhcmVkIHRvIGNvbnZlcnNlIHdpdGggaGltIGFsb25lLiBUaGVyZWZvcmUsIHdoZW4gQ2hhcmVzIG9uY2UgbWFkZSB0aGUgQXRoZW5pYW5zIGxhdWdoIGJ5IHNwZWFraW5nIG9mIFBob2Npb24ncyBmcm93bmluZyBicm93cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ObyBoYXJtLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhhcyBjb21lIHRvIHlvdSBmcm9tIHRoaXMgYnJvdyBvZiBtaW5lOyBidXQgdGhlc2UgbWVuJ3MgbGF1Z2h0ZXIgaGFzIGNvc3QgdGhlIGNpdHkgbWFueSBhIHRlYXIuPC9xPiBBbmQgaW4gbGlrZSBtYW5uZXIgUGhvY2lvbidzIGxhbmd1YWdlLCBhbHNvLCB3YXMgc2FsdXRhcnkgaW4gaXRzIGV4Y2VsbGVudCBpbnZlbnRpb25zIGFuZCBoYXBweSBjb25jZWl0cywgYWx0aG91Z2ggaXQgaGFkIGEgYnJldml0eSB3aGljaCB3YXMgcmF0aGVyIGltcGVyaW91cywgc2V2ZXJlLCBhbmQgdW5wbGVhc2FudC4gRm9yLCBhcyBaZW5vIHVzZWQgdG8gc2F5IHRoYXQgYSBwaGlsb3NvcGhlciBzaG91bGQgaW1tZXJzZSBoaXMgd29yZHMgaW4gbWVhbmluZyBiZWZvcmUgaGUgdXR0ZXJzIHRoZW0sIHNvIFBob2Npb24ncyBsYW5ndWFnZSBoYWQgbW9zdCBtZWFuaW5nIGluIGZld2VzdCB3b3Jkcy4gQW5kIHRoaXMgaXMgcHJvYmFibHkgd2hhdCBQb2x5ZXVjdHVzIHRoZSBTcGhldHRpYW4gaGFkIGluIG1pbmQgd2hlbiBoZSBzYWlkIHRoYXQgRGVtb3N0aGVuZXMgd2FzIGEgbW9zdCBleGNlbGxlbnQgb3JhdG9yLCBidXQgUGhvY2lvbiBhIG1vc3QgcG93ZXJmdWwgc3BlYWtlci4gRm9yLCBhcyBhIHZhbHVhYmxlIGNvaW4gaGFzIGdyZWF0ZXN0IHdvcnRoIGluIHNtYWxsZXN0IGJ1bGssIHNvIGVmZmVjdGl2ZSBzcGVlY2ggd291bGQgc2VlbSB0byBpbmRpY2F0ZSBtdWNoIHdpdGggZmV3IHdvcmRzLiBJbmRlZWQsIGl0IGlzIHNhaWQgdGhhdCBvbmNlIHVwb24gYSB0aW1lLCB3aGVuLCB0aGUgdGhlYXRyZSB3YXMgZmlsbGluZyB1cCB3aXRoIHBlb3BsZSwgUGhvY2lvbiBoaW1zZWxmIHdhcyB3YWxraW5nIGFib3V0IGJlaGluZCB0aGUgc2NlbmVzIGxvc3QgaW4gdGhvdWdodCBhbmQgdGhhdCB3aGVuIG9uZSBvZiBoaXMgZnJpZW5kcyByZW1hcmtlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3Ugc2VlbSB0byBiZSBjb25zaWRlcmluZywgUGhvY2lvbiw8L3E+IGhlIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLCBpbmRlZWQsIEkgYW0gY29uc2lkZXJpbmcgd2hldGhlciBJIGNhbiBzaG9ydGVuIHRoZSBzcGVlY2ggd2hpY2ggSSBhbSB0byBkZWxpdmVyIHRvIHRoZSBBdGhlbmlhbnMuPC9xPiBBbmQgRGVtb3N0aGVuZXMsIHdobyBoZWxkIHRoZSBvdGhlciBvcmF0b3JzIGluIGdyZWF0IGNvbnRlbXB0LCB3aGVuIFBob2Npb24gcm9zZSB0byBzcGVhaywgd2FzIHdvbnQgdG8gc2F5IHF1aWV0bHkgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyZSBjb21lcyB0aGUgcHJ1bmluZy1rbmlmZSBvZiBteSBzcGVlY2hlcy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMTAuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EZW1vc3RoZW5lczwvdGl0bGU+LCB4LiAyPC9iaWJsPi48L25vdGU+IEJ1dCBwZXJoYXBzIHRoaXMgbXVzdCBiZSByZWZlcnJlZCB0byBQaG9jaW9uJ3MgY2hhcmFjdGVyOyBzaW5jZSBhIHdvcmQgb3IgYSBub2QgbWVyZWx5IGZyb20gYSBnb29kIG1hbiBpcyBvZiBtb3JlIGNvbnZpbmNpbmcgd2VpZ2h0IHRoYW4gYW55IG51bWJlciBvZiBlbGFib3JhdGUgcGVyaW9kcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaG91Z2ggaGlzIG5hdHVyZSB3YXMgbW9zdCBnZW50bGUgYW5kIG1vc3Qga2luZCwgaGlzIGNvdW50ZW5hbmNlIG1hZGUgaGltIHNlZW0gZm9yYmlkZGluZyBhbmQgc3VsbGVuLCBzbyB0aGF0IGhhcmRseSBhbnkgb25lIG9mIHRob3NlIHdobyB3ZXJlIG5vdCBvbiBpbnRpbWF0ZSB0ZXJtcyBjYXJlZCB0byBjb252ZXJzZSB3aXRoIGhpbSBhbG9uZS4gVGhlcmVmb3JlLCB3aGVuIENoYXJlcyBvbmNlIG1hZGUgdGhlIEF0aGVuaWFucyBsYXVnaCBieSBzcGVha2luZyBvZiBQaG9jaW9uJ3MgZnJvd25pbmcgYnJvd3MsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ObyBoYXJtLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGFzIGNvbWUgdG8geW91IGZyb20gdGhpcyBicm93IG9mIG1pbmU7IGJ1dCB0aGVzZSBtZW4ncyBsYXVnaHRlciBoYXMgY29zdCB0aGUgY2l0eSBtYW55IGEgdGVhci48L3E+IEFuZCBpbiBsaWtlIG1hbm5lciBQaG9jaW9uJ3MgbGFuZ3VhZ2UsIGFsc28sIHdhcyBzYWx1dGFyeSBpbiBpdHMgZXhjZWxsZW50IGludmVudGlvbnMgYW5kIGhhcHB5IGNvbmNlaXRzLCBhbHRob3VnaCBpdCBoYWQgYSBicmV2aXR5IHdoaWNoIHdhcyByYXRoZXIgaW1wZXJpb3VzLCBzZXZlcmUsIGFuZCB1bnBsZWFzYW50LiBGb3IsIGFzIFplbm8gdXNlZCB0byBzYXkgdGhhdCBhIHBoaWxvc29waGVyIHNob3VsZCBpbW1lcnNlIGhpcyB3b3JkcyBpbiBtZWFuaW5nIGJlZm9yZSBoZSB1dHRlcnMgdGhlbSwgc28gUGhvY2lvbidzIGxhbmd1YWdlIGhhZCBtb3N0IG1lYW5pbmcgaW4gZmV3ZXN0IHdvcmRzLiBBbmQgdGhpcyBpcyBwcm9iYWJseSB3aGF0IFBvbHlldWN0dXMgdGhlIFNwaGV0dGlhbiBoYWQgaW4gbWluZCB3aGVuIGhlIHNhaWQgdGhhdCBEZW1vc3RoZW5lcyB3YXMgYSBtb3N0IGV4Y2VsbGVudCBvcmF0b3IsIGJ1dCBQaG9jaW9uIGEgbW9zdCBwb3dlcmZ1bCBzcGVha2VyLiBGb3IsIGFzIGEgdmFsdWFibGUgY29pbiBoYXMgZ3JlYXRlc3Qgd29ydGggaW4gc21hbGxlc3QgYnVsaywgc28gZWZmZWN0aXZlIHNwZWVjaCB3b3VsZCBzZWVtIHRvIGluZGljYXRlIG11Y2ggd2l0aCBmZXcgd29yZHMuIEluZGVlZCwgaXQgaXMgc2FpZCB0aGF0IG9uY2UgdXBvbiBhIHRpbWUsIHdoZW4sIHRoZSB0aGVhdHJlIHdhcyBmaWxsaW5nIHVwIHdpdGggcGVvcGxlLCBQaG9jaW9uIGhpbXNlbGYgd2FzIHdhbGtpbmcgYWJvdXQgYmVoaW5kIHRoZSBzY2VuZXMgbG9zdCBpbiB0aG91Z2h0IGFuZCB0aGF0IHdoZW4gb25lIG9mIGhpcyBmcmllbmRzIHJlbWFya2VkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IHNlZW0gdG8gYmUgY29uc2lkZXJpbmcsIFBob2Npb24sPC9xPiBoZSByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLCBpbmRlZWQsIEkgYW0gY29uc2lkZXJpbmcgd2hldGhlciBJIGNhbiBzaG9ydGVuIHRoZSBzcGVlY2ggd2hpY2ggSSBhbSB0byBkZWxpdmVyIHRvIHRoZSBBdGhlbmlhbnMuPC9xPiBBbmQgRGVtb3N0aGVuZXMsIHdobyBoZWxkIHRoZSBvdGhlciBvcmF0b3JzIGluIGdyZWF0IGNvbnRlbXB0LCB3aGVuIFBob2Npb24gcm9zZSB0byBzcGVhaywgd2FzIHdvbnQgdG8gc2F5IHF1aWV0bHkgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZXJlIGNvbWVzIHRoZSBwcnVuaW5nLWtuaWZlIG9mIG15IHNwZWVjaGVzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMTAuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIHguIDI8L2JpYmw+Ljwvbm90ZT4gQnV0IHBlcmhhcHMgdGhpcyBtdXN0IGJlIHJlZmVycmVkIHRvIFBob2Npb24ncyBjaGFyYWN0ZXI7IHNpbmNlIGEgd29yZCBvciBhIG5vZCBtZXJlbHkgZnJvbSBhIGdvb2QgbWFuIGlzIG9mIG1vcmUgY29udmluY2luZyB3ZWlnaHQgdGhhbiBhbnkgbnVtYmVyIG9mIGVsYWJvcmF0ZSBwZXJpb2RzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDEwLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lczwvdGl0bGU+LCB4LiAyPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lczwvdGl0bGU+LCB4LiAyPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHdhcyBhIHlvdW5nIG1hbiwgUGhvY2lvbiBhdHRhY2hlZCBoaW1zZWxmIHRvIENoYWJyaWFzIHRoZSBnZW5lcmFsIGFzIGEgY2xvc2UgZm9sbG93ZXIsIHByb2ZpdGluZyBtdWNoIHRoZXJlYnkgaW4gbWlsaXRhcnkgZXhwZXJpZW5jZSwgYW5kIHNvbWV0aW1lcyBhbHNvIHJlY3RpZnlpbmcgdGhhdCBnZW5lcmFsJ3MgdGVtcGVyYW1lbnQsIHdoaWNoIHdhcyB1bmV2ZW4gYW5kIHZpb2xlbnQuIEZvciB0aG91Z2ggQ2hhYnJpYXMgd2FzIHNsdWdnaXNoIGFuZCBoYXJkIHRvIG1vdmUgYXQgb3RoZXIgdGltZXMsIGluIGFjdHVhbCBiYXR0bGUgaGlzIHNwaXJpdCB3YXMgZXhjaXRlZCBhbmQgYWxsIG9uIGZpcmUsIGFuZCBoZSB3b3VsZCBydXNoIG9uIHdpdGggdGhlIGJvbGRlc3QgYXQgdG9vIGdyZWF0IGEgaGF6YXJkLCBqdXN0IGFzLCB3aXRob3V0IGRvdWJ0LCBoZSBhY3R1YWxseSB0aHJldyBhd2F5IGhpcyBsaWZlIGF0IENoaW9zPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzU3IEIuQy4gIENoaW9zLCBSaG9kZXMsIGFuZCBCeXphbnRpdW0gaGFkIHJldm9sdGVkIGZyb20gQXRoZW5zLjwvbm90ZT4gYnkgYmVpbmcgdGhlIGZpcnN0IHRvIGRyaXZlIGhpcyB0cmlyZW1lIHRvIHNob3JlIGFuZCB0cnlpbmcgdG8gZm9yY2UgYSBsYW5kaW5nLiBTbyB0aGVuIFBob2Npb24sIHdobyBhbGxvd2VkIGhpbXNlbGYgYXQgb25jZSBzYWZlIGFuZCBhY3RpdmUsIHdvdWxkIHB1dCBhcmRvdXIgaW50byBDaGFicmlhcyB3aGVuIGhlIGRlbGF5ZWQsIGFuZCBhZ2FpbiB3b3VsZCB0YWtlIGF3YXkgdGhlIHVuc2Vhc29uYWJsZSBpbnRlbnNpdHkgb2YgaGlzIGVmZm9ydHMuIFdoZXJlZm9yZSBDaGFicmlhcywgd2hvIHdhcyBhIGdvb2QtbmF0dXJlZCBhbmQgd29ydGh5IG1hbiwgbWFkZSBtdWNoIG9mIGhpbSBhbmQgYWR2YW5jZWQgaGltIHRvIGVudGVycHJpc2VzIGFuZCBjb21tYW5kcywgbWFraW5nIGhpbSBrbm93biB0byB0aGUgR3JlZWtzLCBhbmQgZW1wbG95aW5nIGhpbSBpbiBtb3N0IGFmZmFpcnMgb2YgbW9tZW50LiBFc3BlY2lhbGx5IGluIHRoZSBzZWEtZmlnaHQgb2ZmIE5heG9zPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzc2IEIuQy4gVGhlIEF0aGVuaWFucyBkZWZlYXRlZCB0aGUgTGFjZWRhZW1vbmlhbiBmbGVldCBhbmQgcmVnYWluZWQgdGhlIG1hc3Rlcnkgb2YgdGhlIHNlYS48L25vdGU+IGhlIGNvbmZlcnJlZCBubyBsaXR0bGUgbmFtZSBhbmQgZmFtZSB1cG9uIFBob2Npb247IGZvciBoZSBnYXZlIGhpbSBjb21tYW5kIG9mIHRoZSBsZWZ0IHdpbmcsIGFuZCBoZXJlIHRoZSBiYXR0bGUgcmFnZWQgaG90bHkgYW5kIHRoZSBpc3N1ZSB3YXMgc3BlZWRpbHkgZGVjaWRlZC4gQWNjb3JkaW5nbHksIGFzIHRoaXMgd2FzIHRoZSBmaXJzdCBzZWEtZmlnaHQgd2hpY2ggdGhlIEF0aGVuaWFucyBoYWQgZm91Z2h0IHdpdGggdGhlIEdyZWVrcyBvbiB0aGVpciBvd24gYWNjb3VudCBzaW5jZSB0aGUgY2FwdHVyZSBvZiB0aGVpciBjaXR5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSBjbG9zZSBvZiB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIgKDQwNCBCLkMuKS48L25vdGU+IGFuZCBhcyBpdCBoYWQgc3VjY2VlZGVkLCB0aGV5IG1hZGUgZXhjZWVkaW5nIG11Y2ggb2YgQ2hhYnJpYXMsIGFuZCBjYW1lIHRvIGxvb2sgdXBvbiBQaG9jaW9uIGFzIGEgbWFuIGZpdCBmb3IgY29tbWFuZC4gVGhleSB3b24gdGhlIHZpY3RvcnkgZHVyaW5nIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgZ3JlYXQgbXlzdGVyaWVzOyBhbmQgdGhlcmVmb3JlIENoYWJyaWFzIHVzZWQgdG8gZnVybmlzaCB0aGUgQXRoZW5pYW5zIHdpdGggd2luZSBmb3IgdGhlIGZlc3RpdmFsIGV2ZXJ5IHllYXIgb24gdGhlIHNpeHRlZW50aCBvZiB0aGUgbW9udGggQm9lZHJvbWlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHdhcyBhIHlvdW5nIG1hbiwgUGhvY2lvbiBhdHRhY2hlZCBoaW1zZWxmIHRvIENoYWJyaWFzIHRoZSBnZW5lcmFsIGFzIGEgY2xvc2UgZm9sbG93ZXIsIHByb2ZpdGluZyBtdWNoIHRoZXJlYnkgaW4gbWlsaXRhcnkgZXhwZXJpZW5jZSwgYW5kIHNvbWV0aW1lcyBhbHNvIHJlY3RpZnlpbmcgdGhhdCBnZW5lcmFsJ3MgdGVtcGVyYW1lbnQsIHdoaWNoIHdhcyB1bmV2ZW4gYW5kIHZpb2xlbnQuIEZvciB0aG91Z2ggQ2hhYnJpYXMgd2FzIHNsdWdnaXNoIGFuZCBoYXJkIHRvIG1vdmUgYXQgb3RoZXIgdGltZXMsIGluIGFjdHVhbCBiYXR0bGUgaGlzIHNwaXJpdCB3YXMgZXhjaXRlZCBhbmQgYWxsIG9uIGZpcmUsIGFuZCBoZSB3b3VsZCBydXNoIG9uIHdpdGggdGhlIGJvbGRlc3QgYXQgdG9vIGdyZWF0IGEgaGF6YXJkLCBqdXN0IGFzLCB3aXRob3V0IGRvdWJ0LCBoZSBhY3R1YWxseSB0aHJldyBhd2F5IGhpcyBsaWZlIGF0IENoaW9zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNTcgQi5DLiAgQ2hpb3MsIFJob2RlcywgYW5kIEJ5emFudGl1bSBoYWQgcmV2b2x0ZWQgZnJvbSBBdGhlbnMuPC9ub3RlPiBieSBiZWluZyB0aGUgZmlyc3QgdG8gZHJpdmUgaGlzIHRyaXJlbWUgdG8gc2hvcmUgYW5kIHRyeWluZyB0byBmb3JjZSBhIGxhbmRpbmcuIFNvIHRoZW4gUGhvY2lvbiwgd2hvIGFsbG93ZWQgaGltc2VsZiBhdCBvbmNlIHNhZmUgYW5kIGFjdGl2ZSwgd291bGQgcHV0IGFyZG91ciBpbnRvIENoYWJyaWFzIHdoZW4gaGUgZGVsYXllZCwgYW5kIGFnYWluIHdvdWxkIHRha2UgYXdheSB0aGUgdW5zZWFzb25hYmxlIGludGVuc2l0eSBvZiBoaXMgZWZmb3J0cy4gV2hlcmVmb3JlIENoYWJyaWFzLCB3aG8gd2FzIGEgZ29vZC1uYXR1cmVkIGFuZCB3b3J0aHkgbWFuLCBtYWRlIG11Y2ggb2YgaGltIGFuZCBhZHZhbmNlZCBoaW0gdG8gZW50ZXJwcmlzZXMgYW5kIGNvbW1hbmRzLCBtYWtpbmcgaGltIGtub3duIHRvIHRoZSBHcmVla3MsIGFuZCBlbXBsb3lpbmcgaGltIGluIG1vc3QgYWZmYWlycyBvZiBtb21lbnQuIEVzcGVjaWFsbHkgaW4gdGhlIHNlYS1maWdodCBvZmYgTmF4b3M8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3NiBCLkMuIFRoZSBBdGhlbmlhbnMgZGVmZWF0ZWQgdGhlIExhY2VkYWVtb25pYW4gZmxlZXQgYW5kIHJlZ2FpbmVkIHRoZSBtYXN0ZXJ5IG9mIHRoZSBzZWEuPC9ub3RlPiBoZSBjb25mZXJyZWQgbm8gbGl0dGxlIG5hbWUgYW5kIGZhbWUgdXBvbiBQaG9jaW9uOyBmb3IgaGUgZ2F2ZSBoaW0gY29tbWFuZCBvZiB0aGUgbGVmdCB3aW5nLCBhbmQgaGVyZSB0aGUgYmF0dGxlIHJhZ2VkIGhvdGx5IGFuZCB0aGUgaXNzdWUgd2FzIHNwZWVkaWx5IGRlY2lkZWQuIEFjY29yZGluZ2x5LCBhcyB0aGlzIHdhcyB0aGUgZmlyc3Qgc2VhLWZpZ2h0IHdoaWNoIHRoZSBBdGhlbmlhbnMgaGFkIGZvdWdodCB3aXRoIHRoZSBHcmVla3Mgb24gdGhlaXIgb3duIGFjY291bnQgc2luY2UgdGhlIGNhcHR1cmUgb2YgdGhlaXIgY2l0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSBjbG9zZSBvZiB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIgKDQwNCBCLkMuKS48L25vdGU+IGFuZCBhcyBpdCBoYWQgc3VjY2VlZGVkLCB0aGV5IG1hZGUgZXhjZWVkaW5nIG11Y2ggb2YgQ2hhYnJpYXMsIGFuZCBjYW1lIHRvIGxvb2sgdXBvbiBQaG9jaW9uIGFzIGEgbWFuIGZpdCBmb3IgY29tbWFuZC4gVGhleSB3b24gdGhlIHZpY3RvcnkgZHVyaW5nIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgZ3JlYXQgbXlzdGVyaWVzOyBhbmQgdGhlcmVmb3JlIENoYWJyaWFzIHVzZWQgdG8gZnVybmlzaCB0aGUgQXRoZW5pYW5zIHdpdGggd2luZSBmb3IgdGhlIGZlc3RpdmFsIGV2ZXJ5IHllYXIgb24gdGhlIHNpeHRlZW50aCBvZiB0aGUgbW9udGggQm9lZHJvbWlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzLCB3ZSBhcmUgdG9sZCwgd2hlbiBDaGFicmlhcyBzZW50IGhpbSB0byBnZXQgdGhlaXIgY29udHJpYnV0aW9ucyBmcm9tIHRoZSBpc2xhbmRlcnMgYW5kIG9mZmVyZWQgaGltIHR3ZW50eSBzaGlwcywgUGhvY2lvbiBzYWlkIHRoYXQgaWYgaGUgd2FzIHNlbnQgdG8gd2FnZSB3YXIsIGhlIG5lZWRlZCBhIGxhcmdlciBmb3JjZSwgYnV0IGlmIHRvIGNvbmZlciB3aXRoIGFsbGllcywgb25lIHNoaXAgd2FzIGVub3VnaDsgYW5kIGFmdGVyIHNhaWxpbmcgb3V0IHdpdGggaGlzIG93biB0cmlyZW1lIGFuZCBkaXNjdXNzaW5nIG1hdHRlcnMgd2l0aCB0aGUgY2l0aWVzIGFuZCBkZWFsaW5nIHdpdGggdGhlIG1hZ2lzdHJhdGVzIGNvbnNpZGVyYXRlbHkgYW5kIGluIGEgc3RyYWlnaHRmb3J3YXJkIG1hbm5lciwgaGUgcmV0dXJuZWQgd2l0aCBtYW55IHNoaXBzLCB3aGljaCB0aGUgYWxsaWVzIHNlbnQgb2ZmIHdpdGggbW9uZXkgZm9yIHRoZSBBdGhlbmlhbnMuIEFuZCBub3Qgb25seSB3aGlsZSBDaGFicmlhcyB3YXMgYWxpdmUgZGlkIFBob2Npb24gY29udGludWUgdG8gc2hvdyBoaW0gYXR0ZW50aW9uIGFuZCBob25vdXIsIGJ1dCBhbHNvIGFmdGVyIGhpcyBkZWF0aCBoZSB0b29rIGdvb2QgY2FyZSBvZiBoaXMgcmVsYXRpdmVzLCBhbmQgZXNwZWNpYWxseSBvZiBoaXMgc29uIEN0ZXNpcHB1cywgd2hvbSBoZSB3aXNoZWQgdG8gbWFrZSBhIGdvb2QgbWFuOyBhbmQgYWx0aG91Z2ggaGUgc2F3IHRoYXQgdGhlIHlvdXRoIHdhcyBjYXByaWNpb3VzIGFuZCBpbnRyYWN0YWJsZSwgaGUgbmV2ZXJ0aGVsZXNzIHBlcnNpc3RlZCBpbiBjb3JyZWN0aW5nIGFuZCBjb3ZlcmluZyB1cCBoaXMgZGlzZ3JhY2VmdWwgY29uZHVjdC4gT25jZSwgaG93ZXZlciwgd2UgYXJlIHRvbGQsIHdoZW4gdGhlIHlvdW5nIG1hbiB3YXMgdHJvdWJsZXNvbWUgdG8gaGltIG9uIGFuIGV4cGVkaXRpb24sIGFuZCBwbGllZCBoaW0gd2l0aCB1bnNlYXNvbmFibGUgcXVlc3Rpb25zIGFuZCBhZHZpY2UsIGxpa2Ugb25lIG1ha2luZyBjb3JyZWN0aW9ucyBhbmQgc2hhcmluZyBpbiB0aGUgY29tbWFuZCwgaGUgY3JpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBDaGFicmlhcywgQ2hhYnJpYXMsIHN1cmVseSBJIG1ha2UgdGhlZSBhIGxhcmdlIHJldHVybiBmb3IgdGh5IGZyaWVuZHNoaXAgaW4gZW5kdXJpbmcgdGh5IHNvbi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlcndhcmRzLCB3ZSBhcmUgdG9sZCwgd2hlbiBDaGFicmlhcyBzZW50IGhpbSB0byBnZXQgdGhlaXIgY29udHJpYnV0aW9ucyBmcm9tIHRoZSBpc2xhbmRlcnMgYW5kIG9mZmVyZWQgaGltIHR3ZW50eSBzaGlwcywgUGhvY2lvbiBzYWlkIHRoYXQgaWYgaGUgd2FzIHNlbnQgdG8gd2FnZSB3YXIsIGhlIG5lZWRlZCBhIGxhcmdlciBmb3JjZSwgYnV0IGlmIHRvIGNvbmZlciB3aXRoIGFsbGllcywgb25lIHNoaXAgd2FzIGVub3VnaDsgYW5kIGFmdGVyIHNhaWxpbmcgb3V0IHdpdGggaGlzIG93biB0cmlyZW1lIGFuZCBkaXNjdXNzaW5nIG1hdHRlcnMgd2l0aCB0aGUgY2l0aWVzIGFuZCBkZWFsaW5nIHdpdGggdGhlIG1hZ2lzdHJhdGVzIGNvbnNpZGVyYXRlbHkgYW5kIGluIGEgc3RyYWlnaHRmb3J3YXJkIG1hbm5lciwgaGUgcmV0dXJuZWQgd2l0aCBtYW55IHNoaXBzLCB3aGljaCB0aGUgYWxsaWVzIHNlbnQgb2ZmIHdpdGggbW9uZXkgZm9yIHRoZSBBdGhlbmlhbnMuIEFuZCBub3Qgb25seSB3aGlsZSBDaGFicmlhcyB3YXMgYWxpdmUgZGlkIFBob2Npb24gY29udGludWUgdG8gc2hvdyBoaW0gYXR0ZW50aW9uIGFuZCBob25vdXIsIGJ1dCBhbHNvIGFmdGVyIGhpcyBkZWF0aCBoZSB0b29rIGdvb2QgY2FyZSBvZiBoaXMgcmVsYXRpdmVzLCBhbmQgZXNwZWNpYWxseSBvZiBoaXMgc29uIEN0ZXNpcHB1cywgd2hvbSBoZSB3aXNoZWQgdG8gbWFrZSBhIGdvb2QgbWFuOyBhbmQgYWx0aG91Z2ggaGUgc2F3IHRoYXQgdGhlIHlvdXRoIHdhcyBjYXByaWNpb3VzIGFuZCBpbnRyYWN0YWJsZSwgaGUgbmV2ZXJ0aGVsZXNzIHBlcnNpc3RlZCBpbiBjb3JyZWN0aW5nIGFuZCBjb3ZlcmluZyB1cCBoaXMgZGlzZ3JhY2VmdWwgY29uZHVjdC4gT25jZSwgaG93ZXZlciwgd2UgYXJlIHRvbGQsIHdoZW4gdGhlIHlvdW5nIG1hbiB3YXMgdHJvdWJsZXNvbWUgdG8gaGltIG9uIGFuIGV4cGVkaXRpb24sIGFuZCBwbGllZCBoaW0gd2l0aCB1bnNlYXNvbmFibGUgcXVlc3Rpb25zIGFuZCBhZHZpY2UsIGxpa2Ugb25lIG1ha2luZyBjb3JyZWN0aW9ucyBhbmQgc2hhcmluZyBpbiB0aGUgY29tbWFuZCwgaGUgY3JpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIENoYWJyaWFzLCBDaGFicmlhcywgc3VyZWx5IEkgbWFrZSB0aGVlIGEgbGFyZ2UgcmV0dXJuIGZvciB0aHkgZnJpZW5kc2hpcCBpbiBlbmR1cmluZyB0aHkgc29uLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSBzYXcgdGhhdCB0aGUgcHVibGljIG1lbiBvZiBoaXMgZGF5IGhhZCBkaXN0cmlidXRlZCBhbW9uZyB0aGVtc2VsdmVzIGFzIGlmIGJ5IGxvdCB0aGUgd29yayBvZiB0aGUgZ2VuZXJhbCBhbmQgdGhlIG9yYXRvci4gU29tZSBvZiB0aGVtIG1lcmVseSBzcG9rZSBiZWZvcmUgdGhlIHBlb3BsZSBhbmQgaW50cm9kdWNlZCBtZWFzdXJlcyzigJRtZW4gbGlrZSBFdWJ1bHVzLCBBcmlzdG9waG9uLCBEZW1vc3RoZW5lcywgTHljdXJndXMsIGFuZCBIeXBlcmVpZGVzOyB3aGlsZSBzdWNoIG1lbiBhcyBEaW9wZWl0aGVzLCBNZW5lc3RoZXVzLCBMZW9zdGhlbmVzLCBhbmQgQ2hhYnJpYXMgYWR2YW5jZWQgdGhlbXNlbHZlcyBieSBob2xkaW5nIHRoZSBvZmZpY2Ugb2YgZ2VuZXJhbCBhbmQgd2FnaW5nIHdhci4gSGUgdGhlcmVmb3JlIHdpc2hlZCB0byByZXN1bWUgYW5kIHJlc3RvcmUgdGhlIHB1YmxpYyBzZXJ2aWNlIHJlbmRlcmVkIGJ5IFBlcmljbGVzLCBBcmlzdGlkZXMsIGFuZCBTb2xvbiwgd2hpY2ggd2FzIGVxdWFsbHkgYXBwb3J0aW9uZWQgaW4gYm90aCBmaWVsZHMgb2YgYWN0aW9uLiBGb3IgZWFjaCBvZiB0aG9zZSBtZW4gc2hvd2VkIGhpbXNlbGYgdG8gYmUsIGluIHRoZSB3b3JkcyBvZiBBcmNoaWxvY2h1cywKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIHdlbGwgYSBzcXVpcmUgb2YgRW55YWxpdXMgZ29kIG9mIHdhciw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgdmVyc2VkIGluIHRoZSBsb3ZlbHkgTXVzZXMnIGdpZnRzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCUhlIGFsc28gc2F3IHRoYXQgdGhlIGdvZGRlc3MgQXRoZW5hIHdhcyBhIGdvZGRlc3Mgb2Ygd2FyIGFzIHdlbGwgYXMgb2Ygc3RhdGVjcmFmdCwgYW5kIHdhcyBzbyBhZGRyZXNzZWQuCgkJCTwvcD4KICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgd2VsbCBhIHNxdWlyZSBvZiBFbnlhbGl1cyBnb2Qgb2Ygd2FyLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyB2ZXJzZWQgaW4gdGhlIGxvdmVseSBNdXNlcycgZ2lmdHMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJSGUgYWxzbyBzYXcgdGhhdCB0aGUgZ29kZGVzcyBBdGhlbmEgd2FzIGEgZ29kZGVzcyBvZiB3YXIgYXMgd2VsbCBhcyBvZiBzdGF0ZWNyYWZ0LCBhbmQgd2FzIHNvIGFkZHJlc3NlZC4KCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyB3ZWxsIGEgc3F1aXJlIG9mIEVueWFsaXVzIGdvZCBvZiB3YXIsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkFzIHZlcnNlZCBpbiB0aGUgbG92ZWx5IE11c2VzJyBnaWZ0cy48L2w+CgkJCQkgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRha2VuIHRoaXMgc3RhbmQsIGhpcyBjaXZpbCBwb2xpY2llcyB3ZXJlIGFsd2F5cyBpbiBmYXZvdXIgb2YgcGVhY2UgYW5kIHF1aWV0OyBhbmQgeWV0IGhlIGhlbGQgdGhlIG9mZmljZSBvZiBnZW5lcmFsIG1vcmUgZnJlcXVlbnRseSB0aGFuIGFueSBtYW4sIGFuZCBJIHNwZWFrIG5vdCBvbmx5IG9mIHRoZSBtZW4gb2YgaGlzIG93biB0aW1lLCBidXQgYWxzbyBvZiB0aG9zZSB3aG8gY2FtZSBiZWZvcmUgaGltLiBIZSBkaWQgbm90IHNlZWsgdGhlIG9mZmljZSBvciBjYW52YXNzIGZvciBpdDsgbm9yLCBvbiB0aGUgb3RoZXIgaGFuZCwgZGlkIGhlIGZsZWUgb3IgcnVuIGF3YXkgd2hlbiBoaXMgY2l0eSBjYWxsZWQgaGltLiBJdCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQsIGluZGVlZCwgdGhhdCBoZSBoZWxkIHRoZSBvZmZpY2Ugb2YgZ2VuZXJhbCBmb3J0eS1maXZlIHRpbWVzLCBhbHRob3VnaCBoZSB3YXMgbm90IGV2ZW4gb25jZSBwcmVzZW50IGF0IHRoZSBlbGVjdGlvbiwgYnV0IHdhcyBhbHdheXMgYWJzZW50IHdoZW4gdGhlIHBlb3BsZSBzdW1tb25lZCBhbmQgY2hvc2UgaGltLiBUaGVyZWZvcmUgbWVuIG9mIGxpdHRsZSB1bmRlcnN0YW5kaW5nIGFyZSBhbWF6ZWQgYXQgdGhlIGNvbmR1Y3Qgb2YgdGhlIEF0aGVuaWFuIHBlb3BsZS4gRm9yIFBob2Npb24gb3Bwb3NlZCB0aGVtIG1vcmUgdGhhbiBhbnlib2R5IGVsc2UsIGFuZCBuZXZlciBzYWlkIG9yIGRpZCBhbnl0aGluZyB0byB3aW4gdGhlaXIgZmF2b3VyOyBhbmQgeWV0LCBqdXN0IGFzIGtpbmdzIGFyZSBzdXBwb3NlZCB0byBsaXN0ZW4gdG8gdGhlaXIgZmxhdHRlcmVycyBhZnRlciBkaW5uZXIgaGFzIGJlZ3VuLCBzbyB0aGUgQXRoZW5pYW5zIG1hZGUgdXNlIG9mIHRoZWlyIG1vcmUgZWxlZ2FudCBhbmQgc3ByaWdodGx5IGxlYWRlcnMgYnkgd2F5IG9mIGRpdmVyc2lvbiwgYnV0IHdoZW4gdGhleSB3YW50ZWQgYSBjb21tYW5kZXIgdGhleSB3ZXJlIGFsd2F5cyBzb2JlciBhbmQgc2VyaW91cywgYW5kIGNhbGxlZCB1cG9uIHRoZSBzZXZlcmVzdCBhbmQgbW9zdCBzZW5zaWJsZSBjaXRpemVuLCBvbmUgd2hvIGFsb25lLCBvciBtb3JlIHRoYW4gdGhlIHJlc3QsIGFycmF5ZWQgaGltc2VsZiBhZ2FpbnN0IHRoZWlyIGRlc2lyZXMgYW5kIGltcHVsc2VzLiBJbmRlZWQsIHdoZW4gYW4gb3JhY2xlIGZyb20gRGVscGhpIHdhcyByZWFkIG91dCBpbiB0aGUgYXNzZW1ibHksIGRlY2xhcmluZyB0aGF0IHdoZW4gdGhlIHJlc3Qgb2YgdGhlIEF0aGVuaWFucyB3ZXJlIG9mIGxpa2UgbWluZCwgb25lIG1hbiBoYWQgYSBtaW5kIGF0IHZhcmlhbmNlIHdpdGggdGhlIGNpdHksIFBob2Npb24gY2FtZSBmb3J3YXJkIGFuZCBiYWRlIHRoZW0gc2VlayBubyBmdXJ0aGVyLCBzaW5jZSBoZSBoaW1zZWxmIHdhcyB0aGUgbWFuIGluIHF1ZXN0aW9uOyBmb3IgdGhlcmUgd2FzIG5vIG9uZSBidXQgaGUgd2hvIGRpc2xpa2VkIGV2ZXJ5dGhpbmcgdGhleSBkaWQuIEFuZCB3aGVuLCBhcyBoZSB3YXMgb25jZSBkZWxpdmVyaW5nIGFuIG9waW5pb24gdG8gdGhlIHBlb3BsZSwgaGUgbWV0IHdpdGggdGhlaXIgYXBwcm92YWwsIGFuZCBzYXcgdGhhdCBhbGwgYWxpa2UgYWNjZXB0ZWQgaGlzIGFyZ3VtZW50LCBoZSB0dXJuZWQgdG8gaGlzIGZyaWVuZHMgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FuIGl0IHBvc3NpYmx5IGJlIHRoYXQgSSBhbSBtYWtpbmcgYSBiYWQgYXJndW1lbnQgd2l0aG91dCBrbm93aW5nIGl0PzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGFrZW4gdGhpcyBzdGFuZCwgaGlzIGNpdmlsIHBvbGljaWVzIHdlcmUgYWx3YXlzIGluIGZhdm91ciBvZiBwZWFjZSBhbmQgcXVpZXQ7IGFuZCB5ZXQgaGUgaGVsZCB0aGUgb2ZmaWNlIG9mIGdlbmVyYWwgbW9yZSBmcmVxdWVudGx5IHRoYW4gYW55IG1hbiwgYW5kIEkgc3BlYWsgbm90IG9ubHkgb2YgdGhlIG1lbiBvZiBoaXMgb3duIHRpbWUsIGJ1dCBhbHNvIG9mIHRob3NlIHdobyBjYW1lIGJlZm9yZSBoaW0uIEhlIGRpZCBub3Qgc2VlayB0aGUgb2ZmaWNlIG9yIGNhbnZhc3MgZm9yIGl0OyBub3IsIG9uIHRoZSBvdGhlciBoYW5kLCBkaWQgaGUgZmxlZSBvciBydW4gYXdheSB3aGVuIGhpcyBjaXR5IGNhbGxlZCBoaW0uIEl0IGlzIGdlbmVyYWxseSBhZG1pdHRlZCwgaW5kZWVkLCB0aGF0IGhlIGhlbGQgdGhlIG9mZmljZSBvZiBnZW5lcmFsIGZvcnR5LWZpdmUgdGltZXMsIGFsdGhvdWdoIGhlIHdhcyBub3QgZXZlbiBvbmNlIHByZXNlbnQgYXQgdGhlIGVsZWN0aW9uLCBidXQgd2FzIGFsd2F5cyBhYnNlbnQgd2hlbiB0aGUgcGVvcGxlIHN1bW1vbmVkIGFuZCBjaG9zZSBoaW0uIFRoZXJlZm9yZSBtZW4gb2YgbGl0dGxlIHVuZGVyc3RhbmRpbmcgYXJlIGFtYXplZCBhdCB0aGUgY29uZHVjdCBvZiB0aGUgQXRoZW5pYW4gcGVvcGxlLiBGb3IgUGhvY2lvbiBvcHBvc2VkIHRoZW0gbW9yZSB0aGFuIGFueWJvZHkgZWxzZSwgYW5kIG5ldmVyIHNhaWQgb3IgZGlkIGFueXRoaW5nIHRvIHdpbiB0aGVpciBmYXZvdXI7IGFuZCB5ZXQsIGp1c3QgYXMga2luZ3MgYXJlIHN1cHBvc2VkIHRvIGxpc3RlbiB0byB0aGVpciBmbGF0dGVyZXJzIGFmdGVyIGRpbm5lciBoYXMgYmVndW4sIHNvIHRoZSBBdGhlbmlhbnMgbWFkZSB1c2Ugb2YgdGhlaXIgbW9yZSBlbGVnYW50IGFuZCBzcHJpZ2h0bHkgbGVhZGVycyBieSB3YXkgb2YgZGl2ZXJzaW9uLCBidXQgd2hlbiB0aGV5IHdhbnRlZCBhIGNvbW1hbmRlciB0aGV5IHdlcmUgYWx3YXlzIHNvYmVyIGFuZCBzZXJpb3VzLCBhbmQgY2FsbGVkIHVwb24gdGhlIHNldmVyZXN0IGFuZCBtb3N0IHNlbnNpYmxlIGNpdGl6ZW4sIG9uZSB3aG8gYWxvbmUsIG9yIG1vcmUgdGhhbiB0aGUgcmVzdCwgYXJyYXllZCBoaW1zZWxmIGFnYWluc3QgdGhlaXIgZGVzaXJlcyBhbmQgaW1wdWxzZXMuIEluZGVlZCwgd2hlbiBhbiBvcmFjbGUgZnJvbSBEZWxwaGkgd2FzIHJlYWQgb3V0IGluIHRoZSBhc3NlbWJseSwgZGVjbGFyaW5nIHRoYXQgd2hlbiB0aGUgcmVzdCBvZiB0aGUgQXRoZW5pYW5zIHdlcmUgb2YgbGlrZSBtaW5kLCBvbmUgbWFuIGhhZCBhIG1pbmQgYXQgdmFyaWFuY2Ugd2l0aCB0aGUgY2l0eSwgUGhvY2lvbiBjYW1lIGZvcndhcmQgYW5kIGJhZGUgdGhlbSBzZWVrIG5vIGZ1cnRoZXIsIHNpbmNlIGhlIGhpbXNlbGYgd2FzIHRoZSBtYW4gaW4gcXVlc3Rpb247IGZvciB0aGVyZSB3YXMgbm8gb25lIGJ1dCBoZSB3aG8gZGlzbGlrZWQgZXZlcnl0aGluZyB0aGV5IGRpZC4gQW5kIHdoZW4sIGFzIGhlIHdhcyBvbmNlIGRlbGl2ZXJpbmcgYW4gb3BpbmlvbiB0byB0aGUgcGVvcGxlLCBoZSBtZXQgd2l0aCB0aGVpciBhcHByb3ZhbCwgYW5kIHNhdyB0aGF0IGFsbCBhbGlrZSBhY2NlcHRlZCBoaXMgYXJndW1lbnQsIGhlIHR1cm5lZCB0byBoaXMgZnJpZW5kcyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhbiBpdCBwb3NzaWJseSBiZSB0aGF0IEkgYW0gbWFraW5nIGEgYmFkIGFyZ3VtZW50IHdpdGhvdXQga25vd2luZyBpdD88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEF0aGVuaWFucyB3ZXJlIG9uY2UgYXNraW5nIGNvbnRyaWJ1dGlvbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxjaWJpYWRlczwvdGl0bGU+LCB4LiAxPC9iaWJsPi48L25vdGU+IGZvciBhIHB1YmxpYyBzYWNyaWZpY2UsIGFuZCB0aGUgcmVzdCB3ZXJlIGNvbnRyaWJ1dGluZywgYnV0IFBob2Npb24sIGFmdGVyIGJlaW5nIG1hbnkgdGltZXMgYXNrZWQgdG8gZ2l2ZSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Bc2sgZnJvbSB0aGVzZSByaWNoIG1lbjsgZm9yIEkgc2hvdWxkIGJlIGFzaGFtZWQgdG8gbWFrZSBhIGNvbnRyaWJ1dGlvbiB0byB5b3UgYmVmb3JlIEkgaGF2ZSBwYWlkIG15IGRlYnQgdG8gdGhpcyBtYW4gaGVyZSw8L3E+IHBvaW50aW5nIHRvIENhbGxpY2xlcyB0aGUgbW9uZXktbGVuZGVyLiBBbmQgb25jZSB3aGVuIGhpcyBhdWRpZW5jZSB3b3VsZCBub3QgY2Vhc2Ugc2hvdXRpbmcgYW5kIGNyeWluZyBoaW0gZG93biwgaGUgdG9sZCB0aGVtIHRoaXMgZmFibGUuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QSBjb3dhcmQgd2FzIGdvaW5nIGZvcnRoIHRvIHdhciwgYnV0IHdoZW4gc29tZSByYXZlbnMgY3JvYWtlZCwgaGUgbGFpZCBkb3duIGhpcyBhcm1zIGFuZCBrZXB0IHF1aWV0OyB0aGVuIGhlIHBpY2tlZCB0aGVtIHVwIGFuZCB3YXMgZ29pbmcgZm9ydGggYWdhaW4sIGFuZCB3aGVuIHRoZSByYXZlbnMgY3JvYWtlZCBvbmNlIG1vcmUsIGhlIHN0b3BwZWQsIGFuZCBzYWlkIGF0IGxhc3Q6IOKAmFlvdSBtYXkgY3JvYWsgd2l0aCBhbGwgeW91ciBtaWdodCwgYnV0IHlvdSBzaGFsbCBub3QgZ2V0IGEgdGFzdGUgb2YgbWUu4oCZPC9xPiBBbmQgYXQgYW5vdGhlciB0aW1lLCB3aGVuIHRoZSBBdGhlbmlhbnMgdXJnZWQgaGltIHRvIGxlYWQgZm9ydGggYWdhaW5zdCB0aGUgZW5lbXksIGFuZCBjYWxsZWQgaGltIGFuIHVubWFubHkgY293YXJkIGJlY2F1c2UgaGUgZGlkIG5vdCB3aXNoIHRvIGRvIHNvLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIGNhbm5vdCBtYWtlIG1lIGJvbGQsIG5vciBjYW4gSSBtYWtlIHlvdSBjb3dhcmRzLiBIb3dldmVyLCB3ZSBrbm93IG9uZSBhbm90aGVyLjwvcT4gQW5kIGFnYWluLCBpbiBhIHRpbWUgb2YgcGVyaWwsIHdoZW4gdGhlIHBlb3BsZSB3ZXJlIGJlaGF2aW5nIHZlcnkgaGFyc2hseSB0b3dhcmRzIGhpbSBhbmQgZGVtYW5kaW5nIHRoYXQgaGUgcmVuZGVyIHVwIGFjY291bnRzIG9mIGhpcyBnZW5lcmFsc2hpcCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIGZyaWVuZHMsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1ha2Ugc3VyZSBvZiB5b3VyIHNhZmV0eSBmaXJzdC48L3E+IEFnYWluLCB3aGVuIHRoZXkgaGFkIGJlZW4gaHVtYmxlIGFuZCB0aW1vcm91cyBkdXJpbmcgYSB3YXIsIGJ1dCB0aGVuLCBhZnRlciBwZWFjZSBoYWQgYmVlbiBtYWRlLCB3ZXJlIGdldHRpbmcgYm9sZCBhbmQgZGVub3VuY2luZyBQaG9jaW9uIG9uIHRoZSBncm91bmQgdGhhdCBoZSBoYWQgcm9iYmVkIHRoZW0gb2YgdGhlIHZpY3RvcnksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgYXJlIGZvcnR1bmF0ZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gaGF2aW5nIGEgZ2VuZXJhbCB3aG8ga25vd3MgeW91OyBzaW5jZSBvdGhlcndpc2UgeWUgaGFkIGxvbmcgYWdvIHBlcmlzaGVkLjwvcT4gT25jZSwgdG9vLCB3aGVuIHRoZSBwZW9wbGUgd2VyZSB1bndpbGxpbmcgdG8gYWRqdWRpY2F0ZSB3aXRoIHRoZSBCb2VvdGlhbnMgYSBxdWVzdGlvbiBvZiB0ZXJyaXRvcnksIGJ1dCB3YW50ZWQgdG8gZ28gdG8gd2FyIGFib3V0IGl0LCBoZSBjb3Vuc2VsbGVkIHRoZW0gdG8gZmlnaHQgd2l0aCB3b3JkcywgaW4gd2hpY2ggdGhleSB3ZXJlIHN1cGVyaW9yLCBhbmQgbm90IHdpdGggYXJtcywgaW4gd2hpY2ggdGhleSB3ZXJlIGluZmVyaW9yLiBBZ2Fpbiwgd2hlbiBoZSB3YXMgc3BlYWtpbmcgYW5kIHRoZXkgd291bGQgbm90IGhlZWQgb3IgZXZlbiBjb25zZW50IHRvIGhlYXIgaGltLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIGNhbiBmb3JjZSBtZSB0byBhY3QgYWdhaW5zdCBteSB3aXNoZXMsIGJ1dCB5ZSBzaGFsbCBub3QgY29tcGVsIG1lIHRvIHNwZWFrIGFnYWluc3QgbXkganVkZ2VtZW50LjwvcT4gQW5kIHdoZW4gRGVtb3N0aGVuZXMsIG9uZSBvZiB0aGUgb3JhdG9ycyBpbiBvcHBvc2l0aW9uIHRvIGhpbSwgc2FpZCB0byBoaW0sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIEF0aGVuaWFucyB3aWxsIGtpbGwgdGhlZSwgUGhvY2lvbiwgc2hvdWxkIHRoZXkgZ28gY3JhenksPC9xPiBoZSByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB0aGV5IHdpbGwga2lsbCB0aGVlLCBzaG91bGQgdGhleSBjb21lIHRvIHRoZWlyIHNlbnNlcy48L3E+IEFnYWluLCB3aGVuIGhlIHNhdyBQb2x5ZXVjdHVzIHRoZSBTcGhldHRpYW4sIG9uIGEgaG90IGRheSwgY291bnNlbGxpbmcgdGhlIEF0aGVuaWFucyB0byBnbyB0byB3YXIgd2l0aCBQaGlsaXAsIGFuZCB0aGVuLCBmcm9tIG11Y2ggcGFudGluZyBhbmQgc3dlYXRpbmcsIHNpbmNlIGhlIHdhcyByZWFsbHkgdmVyeSBjb3JwdWxlbnQsIGZyZXF1ZW50bHkgZ3VscGluZyBkb3duIHdhdGVyLCBQaG9jaW9uIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgbWVldCB0aGF0IHllIHNob3VsZCBiZSBwZXJzdWFkZWQgYnkgdGhpcyBtYW4gdG8gZ28gdG8gd2FyOyBmb3Igd2hhdCBkbyB5ZSB0aGluayBoZSB3b3VsZCBkbyB1bmRlciBicmVhc3RwbGF0ZSBhbmQgc2hpZWxkLCB3aGVuIHRoZSBlbmVteSB3ZXJlIG5lYXIsIGlmLCBpbiBtYWtpbmcgeW91IGEgcHJlbWVkaXRhdGVkIHNwZWVjaCwgaGUgaXMgaW4gZGFuZ2VyIG9mIGNob2tpbmcgdG8gZGVhdGg/PC9xPiBBdCBhbm90aGVyIHRpbWUgTHljdXJndXMgaGVhcGVkIG11Y2ggYWJ1c2UgdXBvbiBoaW0gaW4gdGhlIGFzc2VtYmx5LCBhbmQgYWJvdmUgYWxsIGJlY2F1c2UsIHdoZW4gQWxleGFuZGVyIGRlbWFuZGVkIHRlbiBvZiB0aGUgY2l0aXplbnMgb2YgQXRoZW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAyIGY8L2JpYmw+Ljwvbm90ZT4gUGhvY2lvbiBjb3Vuc2VsbGVkIHRoZWlyIHN1cnJlbmRlcjsgUGhvY2lvbiwgaG93ZXZlciwgbWVyZWx5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGdpdmVuIHRoaXMgcGVvcGxlIG11Y2ggZ29vZCBhbmQgcHJvZml0YWJsZSBjb3Vuc2VsLCBidXQgdGhleSB3aWxsIG5vdCBsaXN0ZW4gdG8gbWUuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQXRoZW5pYW5zIHdlcmUgb25jZSBhc2tpbmcgY29udHJpYnV0aW9uczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIHguIDE8L2JpYmw+Ljwvbm90ZT4gZm9yIGEgcHVibGljIHNhY3JpZmljZSwgYW5kIHRoZSByZXN0IHdlcmUgY29udHJpYnV0aW5nLCBidXQgUGhvY2lvbiwgYWZ0ZXIgYmVpbmcgbWFueSB0aW1lcyBhc2tlZCB0byBnaXZlLCBzYWlkOiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgeC4gMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4LiAxPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Bc2sgZnJvbSB0aGVzZSByaWNoIG1lbjsgZm9yIEkgc2hvdWxkIGJlIGFzaGFtZWQgdG8gbWFrZSBhIGNvbnRyaWJ1dGlvbiB0byB5b3UgYmVmb3JlIEkgaGF2ZSBwYWlkIG15IGRlYnQgdG8gdGhpcyBtYW4gaGVyZSw8L3E+IHBvaW50aW5nIHRvIENhbGxpY2xlcyB0aGUgbW9uZXktbGVuZGVyLiBBbmQgb25jZSB3aGVuIGhpcyBhdWRpZW5jZSB3b3VsZCBub3QgY2Vhc2Ugc2hvdXRpbmcgYW5kIGNyeWluZyBoaW0gZG93biwgaGUgdG9sZCB0aGVtIHRoaXMgZmFibGUuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BIGNvd2FyZCB3YXMgZ29pbmcgZm9ydGggdG8gd2FyLCBidXQgd2hlbiBzb21lIHJhdmVucyBjcm9ha2VkLCBoZSBsYWlkIGRvd24gaGlzIGFybXMgYW5kIGtlcHQgcXVpZXQ7IHRoZW4gaGUgcGlja2VkIHRoZW0gdXAgYW5kIHdhcyBnb2luZyBmb3J0aCBhZ2FpbiwgYW5kIHdoZW4gdGhlIHJhdmVucyBjcm9ha2VkIG9uY2UgbW9yZSwgaGUgc3RvcHBlZCwgYW5kIHNhaWQgYXQgbGFzdDog4oCYWW91IG1heSBjcm9hayB3aXRoIGFsbCB5b3VyIG1pZ2h0LCBidXQgeW91IHNoYWxsIG5vdCBnZXQgYSB0YXN0ZSBvZiBtZS7igJk8L3E+IEFuZCBhdCBhbm90aGVyIHRpbWUsIHdoZW4gdGhlIEF0aGVuaWFucyB1cmdlZCBoaW0gdG8gbGVhZCBmb3J0aCBhZ2FpbnN0IHRoZSBlbmVteSwgYW5kIGNhbGxlZCBoaW0gYW4gdW5tYW5seSBjb3dhcmQgYmVjYXVzZSBoZSBkaWQgbm90IHdpc2ggdG8gZG8gc28sIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZSBjYW5ub3QgbWFrZSBtZSBib2xkLCBub3IgY2FuIEkgbWFrZSB5b3UgY293YXJkcy4gSG93ZXZlciwgd2Uga25vdyBvbmUgYW5vdGhlci48L3E+IEFuZCBhZ2FpbiwgaW4gYSB0aW1lIG9mIHBlcmlsLCB3aGVuIHRoZSBwZW9wbGUgd2VyZSBiZWhhdmluZyB2ZXJ5IGhhcnNobHkgdG93YXJkcyBoaW0gYW5kIGRlbWFuZGluZyB0aGF0IGhlIHJlbmRlciB1cCBhY2NvdW50cyBvZiBoaXMgZ2VuZXJhbHNoaXAsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIGZyaWVuZHMsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFrZSBzdXJlIG9mIHlvdXIgc2FmZXR5IGZpcnN0LjwvcT4gQWdhaW4sIHdoZW4gdGhleSBoYWQgYmVlbiBodW1ibGUgYW5kIHRpbW9yb3VzIGR1cmluZyBhIHdhciwgYnV0IHRoZW4sIGFmdGVyIHBlYWNlIGhhZCBiZWVuIG1hZGUsIHdlcmUgZ2V0dGluZyBib2xkIGFuZCBkZW5vdW5jaW5nIFBob2Npb24gb24gdGhlIGdyb3VuZCB0aGF0IGhlIGhhZCByb2JiZWQgdGhlbSBvZiB0aGUgdmljdG9yeSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIGFyZSBmb3J0dW5hdGUsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gaGF2aW5nIGEgZ2VuZXJhbCB3aG8ga25vd3MgeW91OyBzaW5jZSBvdGhlcndpc2UgeWUgaGFkIGxvbmcgYWdvIHBlcmlzaGVkLjwvcT4gT25jZSwgdG9vLCB3aGVuIHRoZSBwZW9wbGUgd2VyZSB1bndpbGxpbmcgdG8gYWRqdWRpY2F0ZSB3aXRoIHRoZSBCb2VvdGlhbnMgYSBxdWVzdGlvbiBvZiB0ZXJyaXRvcnksIGJ1dCB3YW50ZWQgdG8gZ28gdG8gd2FyIGFib3V0IGl0LCBoZSBjb3Vuc2VsbGVkIHRoZW0gdG8gZmlnaHQgd2l0aCB3b3JkcywgaW4gd2hpY2ggdGhleSB3ZXJlIHN1cGVyaW9yLCBhbmQgbm90IHdpdGggYXJtcywgaW4gd2hpY2ggdGhleSB3ZXJlIGluZmVyaW9yLiBBZ2Fpbiwgd2hlbiBoZSB3YXMgc3BlYWtpbmcgYW5kIHRoZXkgd291bGQgbm90IGhlZWQgb3IgZXZlbiBjb25zZW50IHRvIGhlYXIgaGltLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgY2FuIGZvcmNlIG1lIHRvIGFjdCBhZ2FpbnN0IG15IHdpc2hlcywgYnV0IHllIHNoYWxsIG5vdCBjb21wZWwgbWUgdG8gc3BlYWsgYWdhaW5zdCBteSBqdWRnZW1lbnQuPC9xPiBBbmQgd2hlbiBEZW1vc3RoZW5lcywgb25lIG9mIHRoZSBvcmF0b3JzIGluIG9wcG9zaXRpb24gdG8gaGltLCBzYWlkIHRvIGhpbSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBBdGhlbmlhbnMgd2lsbCBraWxsIHRoZWUsIFBob2Npb24sIHNob3VsZCB0aGV5IGdvIGNyYXp5LDwvcT4gaGUgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB0aGV5IHdpbGwga2lsbCB0aGVlLCBzaG91bGQgdGhleSBjb21lIHRvIHRoZWlyIHNlbnNlcy48L3E+IEFnYWluLCB3aGVuIGhlIHNhdyBQb2x5ZXVjdHVzIHRoZSBTcGhldHRpYW4sIG9uIGEgaG90IGRheSwgY291bnNlbGxpbmcgdGhlIEF0aGVuaWFucyB0byBnbyB0byB3YXIgd2l0aCBQaGlsaXAsIGFuZCB0aGVuLCBmcm9tIG11Y2ggcGFudGluZyBhbmQgc3dlYXRpbmcsIHNpbmNlIGhlIHdhcyByZWFsbHkgdmVyeSBjb3JwdWxlbnQsIGZyZXF1ZW50bHkgZ3VscGluZyBkb3duIHdhdGVyLCBQaG9jaW9uIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBtZWV0IHRoYXQgeWUgc2hvdWxkIGJlIHBlcnN1YWRlZCBieSB0aGlzIG1hbiB0byBnbyB0byB3YXI7IGZvciB3aGF0IGRvIHllIHRoaW5rIGhlIHdvdWxkIGRvIHVuZGVyIGJyZWFzdHBsYXRlIGFuZCBzaGllbGQsIHdoZW4gdGhlIGVuZW15IHdlcmUgbmVhciwgaWYsIGluIG1ha2luZyB5b3UgYSBwcmVtZWRpdGF0ZWQgc3BlZWNoLCBoZSBpcyBpbiBkYW5nZXIgb2YgY2hva2luZyB0byBkZWF0aD88L3E+IEF0IGFub3RoZXIgdGltZSBMeWN1cmd1cyBoZWFwZWQgbXVjaCBhYnVzZSB1cG9uIGhpbSBpbiB0aGUgYXNzZW1ibHksIGFuZCBhYm92ZSBhbGwgYmVjYXVzZSwgd2hlbiBBbGV4YW5kZXIgZGVtYW5kZWQgdGVuIG9mIHRoZSBjaXRpemVucyBvZiBBdGhlbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAyIGY8L2JpYmw+Ljwvbm90ZT4gUGhvY2lvbiBjb3Vuc2VsbGVkIHRoZWlyIHN1cnJlbmRlcjsgUGhvY2lvbiwgaG93ZXZlciwgbWVyZWx5IHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpLiAyIGY8L2JpYmw+LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoYXZlIGdpdmVuIHRoaXMgcGVvcGxlIG11Y2ggZ29vZCBhbmQgcHJvZml0YWJsZSBjb3Vuc2VsLCBidXQgdGhleSB3aWxsIG5vdCBsaXN0ZW4gdG8gbWUuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3YXMgYSBjZXJ0YWluIEFyY2hpYmlhZGVzLCBuaWNrbmFtZWQgTGFjb25pc3RlcywgYmVjYXVzZSwgaW4gaW1pdGF0aW9uIG9mIHRoZSBTcGFydGFucywgaGUgbGV0IGhpcyBiZWFyZCBncm93IHRvIGFuIGV4dHJhdmFnYW50IHNpemUsIGFsd2F5cyB3b3JlIGEgc2hvcnQgY2xvYWssIGFuZCBoYWQgYSBzY293bCBvbiBoaXMgZmFjZS4gUGhvY2lvbiB3YXMgb25jZSBzdG9ybWlseSBpbnRlcnJ1cHRlZCBpbiB0aGUgY291bmNpbCwgYW5kIGNhbGxlZCB1cG9uIHRoaXMgbWFuIGZvciB0ZXN0aW1vbnkgYW5kIHN1cHBvcnQgaW4gd2hhdCBoZSBzYWlkLiBCdXQgd2hlbiB0aGUgbWFuIHJvc2UgdXAgYW5kIGdhdmUgc3VjaCBjb3Vuc2VsIGFzIHdhcyBwbGVhc2luZyB0byB0aGUgQXRoZW5pYW5zLCBQaG9jaW9uIHNlaXplZCBoaW0gYnkgdGhlIGJlYXJkIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gQXJjaGliaWFkZXMsIHdoeSwgdGhlbiwgZGlkc3QgdGhvdSBub3Qgc2hhdmUgdGh5c2VsZj88L3E+IEFnYWluLCB3aGVuIEFyaXN0b2dlaXRvbiB0aGUgcHVibGljIGluZm9ybWVyLCB3aG8gd2FzIGFsd2F5cyB3YXJsaWtlIGluIHRoZSBhc3NlbWJsaWVzIGFuZCB0cmllZCB0byB1cmdlIHRoZSBwZW9wbGUgb24gdG8gYWN0aW9uLCBjYW1lIHRvIHRoZSBwbGFjZSBvZiBtdXN0ZXIgbGVhbmluZyBvbiBhIHN0YWZmIGFuZCB3aXRoIGJvdGggbGVncyBiYW5kYWdlZCwgUGhvY2lvbiBzcGllZCBoaW0gZnJvbSB0aGUgdHJpYnVuYWwgd2hlbiBoZSB3YXMgYWZhciBvZmYsIGFuZCBjcmllZCBvdXQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHV0IGRvd24gQXJpc3RvZ2VpdG9uLCB0b28sIGFzIGxhbWUgYW5kIHdvcnRobGVzcy48L3E+IFNvIHRoYXQgb25lIG1pZ2h0IHdvbmRlciBob3cgYW5kIHdoeSBhIG1hbiBzbyBoYXJzaCBhbmQgc3Rlcm4gZ290IHRoZSBzdXJuYW1lIG9mIFRoZSBHb29kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGEgY2VydGFpbiBBcmNoaWJpYWRlcywgbmlja25hbWVkIExhY29uaXN0ZXMsIGJlY2F1c2UsIGluIGltaXRhdGlvbiBvZiB0aGUgU3BhcnRhbnMsIGhlIGxldCBoaXMgYmVhcmQgZ3JvdyB0byBhbiBleHRyYXZhZ2FudCBzaXplLCBhbHdheXMgd29yZSBhIHNob3J0IGNsb2FrLCBhbmQgaGFkIGEgc2Nvd2wgb24gaGlzIGZhY2UuIFBob2Npb24gd2FzIG9uY2Ugc3Rvcm1pbHkgaW50ZXJydXB0ZWQgaW4gdGhlIGNvdW5jaWwsIGFuZCBjYWxsZWQgdXBvbiB0aGlzIG1hbiBmb3IgdGVzdGltb255IGFuZCBzdXBwb3J0IGluIHdoYXQgaGUgc2FpZC4gQnV0IHdoZW4gdGhlIG1hbiByb3NlIHVwIGFuZCBnYXZlIHN1Y2ggY291bnNlbCBhcyB3YXMgcGxlYXNpbmcgdG8gdGhlIEF0aGVuaWFucywgUGhvY2lvbiBzZWl6ZWQgaGltIGJ5IHRoZSBiZWFyZCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gQXJjaGliaWFkZXMsIHdoeSwgdGhlbiwgZGlkc3QgdGhvdSBub3Qgc2hhdmUgdGh5c2VsZj88L3E+IEFnYWluLCB3aGVuIEFyaXN0b2dlaXRvbiB0aGUgcHVibGljIGluZm9ybWVyLCB3aG8gd2FzIGFsd2F5cyB3YXJsaWtlIGluIHRoZSBhc3NlbWJsaWVzIGFuZCB0cmllZCB0byB1cmdlIHRoZSBwZW9wbGUgb24gdG8gYWN0aW9uLCBjYW1lIHRvIHRoZSBwbGFjZSBvZiBtdXN0ZXIgbGVhbmluZyBvbiBhIHN0YWZmIGFuZCB3aXRoIGJvdGggbGVncyBiYW5kYWdlZCwgUGhvY2lvbiBzcGllZCBoaW0gZnJvbSB0aGUgdHJpYnVuYWwgd2hlbiBoZSB3YXMgYWZhciBvZmYsIGFuZCBjcmllZCBvdXQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5QdXQgZG93biBBcmlzdG9nZWl0b24sIHRvbywgYXMgbGFtZSBhbmQgd29ydGhsZXNzLjwvcT4gU28gdGhhdCBvbmUgbWlnaHQgd29uZGVyIGhvdyBhbmQgd2h5IGEgbWFuIHNvIGhhcnNoIGFuZCBzdGVybiBnb3QgdGhlIHN1cm5hbWUgb2YgVGhlIEdvb2QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRob3VnaCBpdCBpcyBkaWZmaWN1bHQsIGl0IGlzIG5vdCBpbXBvc3NpYmxlLCBJIHRoaW5rLCBmb3IgdGhlIHNhbWUgbWFuLCBsaWtlIHRoZSBzYW1lIHdpbmUsIHRvIGJlIGF0IG9uY2UgcGxlYXNhbnQgYW5kIGF1c3RlcmU7IGp1c3QgYXMgb3RoZXJzLCBvbiB0aGUgY29udHJhcnksIGFwcGVhciB0byBiZSBzd2VldCwgYnV0IGFyZSBtb3N0IHVucGxlYXNhbnQgdG8gdGhvc2Ugd2hvIHVzZSB0aGVtLCBhbmQgbW9zdCBpbmp1cmlvdXMuIEFuZCB5ZXQgd2UgYXJlIHRvbGQgdGhhdCBIeXBlcmVpZGVzIG9uY2Ugc2FpZCB0byB0aGUgcGVvcGxlOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8gbm90IGFzaywgbWVuIG9mIEF0aGVucywgbWVyZWx5IHdoZXRoZXIgSSBhbSBiaXR0ZXIsIGJ1dCB3aGV0aGVyIEkgYW0gcGFpZCBmb3IgYmVpbmcgYml0dGVyLDwvcT4gYXMgaWYgdGhlIG11bHRpdHVkZSB3ZXJlIGxlZCBieSB0aGVpciBhdmFyaWNlIHRvIGZlYXIgYW5kIGF0dGFjayB0aG9zZSBvbmx5IHdobyBhcmUgdHJvdWJsZXNvbWUgYW5kIHZleGF0aW91cywgYW5kIG5vdCByYXRoZXIgYWxsIHdobyB1c2UgdGhlaXIgcG93ZXIgdG8gZ3JhdGlmeSB0aGVpciBpbnNvbGVuY2Ugb3IgZW52eSBvciB3cmF0aCBvciBjb250ZW50aW91c25lc3MuIFBob2Npb24sIHRoZW4sIHdyb3VnaHQgbm8gaW5qdXJ5IHRvIGFueSBvbmUgb2YgaGlzIGZlbGxvdyBjaXRpemVucyBvdXQgb2YgZW5taXR5LCBub3IgZGlkIGhlIHJlZ2FyZCBhbnkgb25lIG9mIHRoZW0gYXMgaGlzIGVuZW15OyBidXQgaGUgd2FzIGhhcnNoLCBvYnN0aW5hdGUsIGFuZCBpbmV4b3JhYmxlIG9ubHkgc28gZmFyIGFzIHdhcyBuZWNlc3NhcnkgdG8gc3RydWdnbGUgc3VjY2Vzc2Z1bGx5IGFnYWluc3QgdGhvc2Ugd2hvIG9wcG9zZWQgaGlzIGVmZm9ydHMgaW4gYmVoYWxmIG9mIHRoZSBjb3VudHJ5LCBhbmQgaW4gb3RoZXIgcmVsYXRpb25zIG9mIGxpZmUgc2hvd2VkIGhpbXNlbGYgd2VsbC1kaXNwb3NlZCB0byBhbGwsIGFjY2Vzc2libGUsIGFuZCBodW1hbmUsIHNvIHRoYXQgaGUgZXZlbiBnYXZlIGFpZCB0byBoaXMgYWR2ZXJzYXJpZXMgd2hlbiB0aGV5IHdlcmUgaW4gdHJvdWJsZSBvciBpbiBkYW5nZXIgb2YgYmVpbmcgYnJvdWdodCB0byBhY2NvdW50LiBXaGVuIGhpcyBmcmllbmRzIGNoaWRlZCBoaW0gZm9yIHBsZWFkaW5nIHRoZSBjYXVzZSBvZiBzb21lIHdvcnRobGVzcyBtYW4sIGhlIHNhaWQgdGhhdCBnb29kIG1lbiBuZWVkZWQgbm8gYWlkLiBBZ2Fpbiwgd2hlbiBBcmlzdG9nZWl0b24gdGhlIHB1YmxpYyBpbmZvcm1lciwgd2hvIHdhcyB1bmRlciBjb25kZW1uYXRpb24sIHNlbnQgYW5kIGFza2VkIGhpbSB0byBjb21lIHRvIGhpbSwgaGUgb2JleWVkIHRoZSBzdW1tb25zIGFuZCBzZXQgb3V0IGZvciB0aGUgcHJpc29uOyBhbmQgd2hlbiBoaXMgZnJpZW5kcyBzb3VnaHQgdG8gcHJldmVudCBoaW0sIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgbWUgZ28sIG15IGdvb2QgbWVuOyBmb3Igd2hlcmUgY291bGQgb25lIHRha2UgZ3JlYXRlciBwbGVhc3VyZSBpbiBtZWV0aW5nIEFyaXN0b2dlaXRvbj88L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyBub3QgYXNrLCBtZW4gb2YgQXRoZW5zLCBtZXJlbHkgd2hldGhlciBJIGFtIGJpdHRlciwgYnV0IHdoZXRoZXIgSSBhbSBwYWlkIGZvciBiZWluZyBiaXR0ZXIsPC9xPiBhcyBpZiB0aGUgbXVsdGl0dWRlIHdlcmUgbGVkIGJ5IHRoZWlyIGF2YXJpY2UgdG8gZmVhciBhbmQgYXR0YWNrIHRob3NlIG9ubHkgd2hvIGFyZSB0cm91Ymxlc29tZSBhbmQgdmV4YXRpb3VzLCBhbmQgbm90IHJhdGhlciBhbGwgd2hvIHVzZSB0aGVpciBwb3dlciB0byBncmF0aWZ5IHRoZWlyIGluc29sZW5jZSBvciBlbnZ5IG9yIHdyYXRoIG9yIGNvbnRlbnRpb3VzbmVzcy4gUGhvY2lvbiwgdGhlbiwgd3JvdWdodCBubyBpbmp1cnkgdG8gYW55IG9uZSBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zIG91dCBvZiBlbm1pdHksIG5vciBkaWQgaGUgcmVnYXJkIGFueSBvbmUgb2YgdGhlbSBhcyBoaXMgZW5lbXk7IGJ1dCBoZSB3YXMgaGFyc2gsIG9ic3RpbmF0ZSwgYW5kIGluZXhvcmFibGUgb25seSBzbyBmYXIgYXMgd2FzIG5lY2Vzc2FyeSB0byBzdHJ1Z2dsZSBzdWNjZXNzZnVsbHkgYWdhaW5zdCB0aG9zZSB3aG8gb3Bwb3NlZCBoaXMgZWZmb3J0cyBpbiBiZWhhbGYgb2YgdGhlIGNvdW50cnksIGFuZCBpbiBvdGhlciByZWxhdGlvbnMgb2YgbGlmZSBzaG93ZWQgaGltc2VsZiB3ZWxsLWRpc3Bvc2VkIHRvIGFsbCwgYWNjZXNzaWJsZSwgYW5kIGh1bWFuZSwgc28gdGhhdCBoZSBldmVuIGdhdmUgYWlkIHRvIGhpcyBhZHZlcnNhcmllcyB3aGVuIHRoZXkgd2VyZSBpbiB0cm91YmxlIG9yIGluIGRhbmdlciBvZiBiZWluZyBicm91Z2h0IHRvIGFjY291bnQuIFdoZW4gaGlzIGZyaWVuZHMgY2hpZGVkIGhpbSBmb3IgcGxlYWRpbmcgdGhlIGNhdXNlIG9mIHNvbWUgd29ydGhsZXNzIG1hbiwgaGUgc2FpZCB0aGF0IGdvb2QgbWVuIG5lZWRlZCBubyBhaWQuIEFnYWluLCB3aGVuIEFyaXN0b2dlaXRvbiB0aGUgcHVibGljIGluZm9ybWVyLCB3aG8gd2FzIHVuZGVyIGNvbmRlbW5hdGlvbiwgc2VudCBhbmQgYXNrZWQgaGltIHRvIGNvbWUgdG8gaGltLCBoZSBvYmV5ZWQgdGhlIHN1bW1vbnMgYW5kIHNldCBvdXQgZm9yIHRoZSBwcmlzb247IGFuZCB3aGVuIGhpcyBmcmllbmRzIHNvdWdodCB0byBwcmV2ZW50IGhpbSwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCBtZSBnbywgbXkgZ29vZCBtZW47IGZvciB3aGVyZSBjb3VsZCBvbmUgdGFrZSBncmVhdGVyIHBsZWFzdXJlIGluIG1lZXRpbmcgQXJpc3RvZ2VpdG9uPzwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGNlcnRhaW5seSB0aGUgYWxsaWVzIGFuZCB0aGUgaXNsYW5kZXJzIHJlZ2FyZGVkIGVudm95cyBmcm9tIEF0aGVucyB1bmRlciB0aGUgY29uZHVjdCBvZiBhbnkgb3RoZXIgZ2VuZXJhbCBhcyBlbmVtaWVzLCBiYXJyaWNhZGluZyB0aGVpciBnYXRlcywgb2JzdHJ1Y3RpbmcgdGhlaXIgaGFyYm91cnMsIGFuZCBicmluZ2luZyBpbnRvIHRoZWlyIGNpdGllcyBmcm9tIHRoZSBjb3VudHJ5IHRoZWlyIGhlcmRzLCBzbGF2ZXMsIHdvbWVuIGFuZCBjaGlsZHJlbjsgYnV0IHdoZW5ldmVyIFBob2Npb24gd2FzIHRoZSBsZWFkZXIsIHRoZXkgd2VudCBmYXIgb3V0IHRvIG1lZXQgaGltIGluIHRoZWlyIG93biBzaGlwcywgd2VhcmluZyBnYXJsYW5kcyBhbmQgcmVqb2ljaW5nLCBhbmQgY29uZHVjdGVkIGhpbSB0byB0aGVpciBob21lcyB0aGVtc2VsdmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGNlcnRhaW5seSB0aGUgYWxsaWVzIGFuZCB0aGUgaXNsYW5kZXJzIHJlZ2FyZGVkIGVudm95cyBmcm9tIEF0aGVucyB1bmRlciB0aGUgY29uZHVjdCBvZiBhbnkgb3RoZXIgZ2VuZXJhbCBhcyBlbmVtaWVzLCBiYXJyaWNhZGluZyB0aGVpciBnYXRlcywgb2JzdHJ1Y3RpbmcgdGhlaXIgaGFyYm91cnMsIGFuZCBicmluZ2luZyBpbnRvIHRoZWlyIGNpdGllcyBmcm9tIHRoZSBjb3VudHJ5IHRoZWlyIGhlcmRzLCBzbGF2ZXMsIHdvbWVuIGFuZCBjaGlsZHJlbjsgYnV0IHdoZW5ldmVyIFBob2Npb24gd2FzIHRoZSBsZWFkZXIsIHRoZXkgd2VudCBmYXIgb3V0IHRvIG1lZXQgaGltIGluIHRoZWlyIG93biBzaGlwcywgd2VhcmluZyBnYXJsYW5kcyBhbmQgcmVqb2ljaW5nLCBhbmQgY29uZHVjdGVkIGhpbSB0byB0aGVpciBob21lcyB0aGVtc2VsdmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBoaWxpcCB3YXMgc3RlYWxpbmcgaW50byBFdWJvZWEgYW5kIGJyaW5naW5nIGEgZm9yY2UgYWNyb3NzIGZyb20gTWFjZWRvbmlhIGFuZCBtYWtpbmcgdGhlIGNpdGllcyBoaXMgb3duIGJ5IG1lYW5zIG9mIHR5cmFudHMgYW5kIHdoZW4gUGx1dGFyY2ggdGhlIEVyZXRyaWFuIGNhbGxlZCB1cG9uIHRoZSBBdGhlbmlhbnMgYW5kIGJlZ2dlZCB0aGVtIHRvIHJlc2N1ZSB0aGUgaXNsYW5kIGZyb20gaXRzIG9jY3VwYXRpb24gYnkgdGhlIE1hY2Vkb25pYW4sIFBob2Npb24gd2FzIHNlbnQgb3V0IGFzIGdlbmVyYWwgd2l0aCBhIHNtYWxsIGZvcmNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM1MCBCLkMuPC9ub3RlPiBpbiB0aGUgYmVsaWVmIHRoYXQgdGhlIHBlb3BsZSBvZiB0aGUgaXNsYW5kIHdvdWxkIHJhbGx5IHJlYWRpbHkgdG8gaGlzIGFpZC4gQnV0IGhlIGZvdW5kIHRoZSB3aG9sZSBpc2xhbmQgZnVsbCBvZiB0cmFpdG9ycywgZGlzYWZmZWN0ZWQsIGFuZCBob25leWNvbWJlZCB3aXRoIGJyaWJlcnksIGFuZCB3YXMgdGhlcmVmb3JlIGluIGEgcG9zaXRpb24gb2YgZ3JlYXQgcGVyaWwuIFNvIGhlIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIGNyZXN0IG9mIGdyb3VuZCB3aGljaCB3YXMgc2VwYXJhdGVkIGJ5IGEgZGVlcCByYXZpbmUgZnJvbSB0aGUgcGxhaW5zIGFib3V0IFRhbXluYWUsIGFuZCBvbiB0aGlzIGFzc2VtYmxlZCBhbmQgaGVsZCB0b2dldGhlciB0aGUgYmVzdCBmaWdodGluZyBtZW4gb2YgaGlzIGZvcmNlLiBUbyB0aGUgZGlzb3JkZXJseSBhbmQgd29ydGhsZXNzIHRyaWZsZXJzIHdobyByYW4gYXdheSBmcm9tIHRoZSBjYW1wIGFuZCBtYWRlIHRoZWlyIHdheSBob21lIGhlIGJhZGUgaGlzIG9mZmljZXJzIGdpdmUgbm8gaGVlZCwgZm9yIGluIHRoZSBjYW1wIHRoZWlyIGxhY2sgb2YgZGlzY2lwbGluZSB3b3VsZCBtYWtlIHRoZW0gdXNlbGVzcyBhbmQgaGFybWZ1bCB0byB0aGUgZmlnaHRpbmcgbWVuLCB3aGlsZSBhdCBob21lIHRoZWlyIGFjY3VzaW5nIGNvbnNjaWVuY2VzIHdvdWxkIG1ha2UgdGhlbSBsZXNzIGxpYWJsZSB0byBjcnkgZG93biB0aGVpciBjb21tYW5kZXIsIGFuZCB3b3VsZCBrZWVwIHRoZW0gZW50aXJlbHkgZnJvbSBtYWxpY2lvdXMgYWNjdXNhdGlvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQaGlsaXAgd2FzIHN0ZWFsaW5nIGludG8gRXVib2VhIGFuZCBicmluZ2luZyBhIGZvcmNlIGFjcm9zcyBmcm9tIE1hY2Vkb25pYSBhbmQgbWFraW5nIHRoZSBjaXRpZXMgaGlzIG93biBieSBtZWFucyBvZiB0eXJhbnRzIGFuZCB3aGVuIFBsdXRhcmNoIHRoZSBFcmV0cmlhbiBjYWxsZWQgdXBvbiB0aGUgQXRoZW5pYW5zIGFuZCBiZWdnZWQgdGhlbSB0byByZXNjdWUgdGhlIGlzbGFuZCBmcm9tIGl0cyBvY2N1cGF0aW9uIGJ5IHRoZSBNYWNlZG9uaWFuLCBQaG9jaW9uIHdhcyBzZW50IG91dCBhcyBnZW5lcmFsIHdpdGggYSBzbWFsbCBmb3JjZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM1MCBCLkMuPC9ub3RlPiBpbiB0aGUgYmVsaWVmIHRoYXQgdGhlIHBlb3BsZSBvZiB0aGUgaXNsYW5kIHdvdWxkIHJhbGx5IHJlYWRpbHkgdG8gaGlzIGFpZC4gQnV0IGhlIGZvdW5kIHRoZSB3aG9sZSBpc2xhbmQgZnVsbCBvZiB0cmFpdG9ycywgZGlzYWZmZWN0ZWQsIGFuZCBob25leWNvbWJlZCB3aXRoIGJyaWJlcnksIGFuZCB3YXMgdGhlcmVmb3JlIGluIGEgcG9zaXRpb24gb2YgZ3JlYXQgcGVyaWwuIFNvIGhlIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIGNyZXN0IG9mIGdyb3VuZCB3aGljaCB3YXMgc2VwYXJhdGVkIGJ5IGEgZGVlcCByYXZpbmUgZnJvbSB0aGUgcGxhaW5zIGFib3V0IFRhbXluYWUsIGFuZCBvbiB0aGlzIGFzc2VtYmxlZCBhbmQgaGVsZCB0b2dldGhlciB0aGUgYmVzdCBmaWdodGluZyBtZW4gb2YgaGlzIGZvcmNlLiBUbyB0aGUgZGlzb3JkZXJseSBhbmQgd29ydGhsZXNzIHRyaWZsZXJzIHdobyByYW4gYXdheSBmcm9tIHRoZSBjYW1wIGFuZCBtYWRlIHRoZWlyIHdheSBob21lIGhlIGJhZGUgaGlzIG9mZmljZXJzIGdpdmUgbm8gaGVlZCwgZm9yIGluIHRoZSBjYW1wIHRoZWlyIGxhY2sgb2YgZGlzY2lwbGluZSB3b3VsZCBtYWtlIHRoZW0gdXNlbGVzcyBhbmQgaGFybWZ1bCB0byB0aGUgZmlnaHRpbmcgbWVuLCB3aGlsZSBhdCBob21lIHRoZWlyIGFjY3VzaW5nIGNvbnNjaWVuY2VzIHdvdWxkIG1ha2UgdGhlbSBsZXNzIGxpYWJsZSB0byBjcnkgZG93biB0aGVpciBjb21tYW5kZXIsIGFuZCB3b3VsZCBrZWVwIHRoZW0gZW50aXJlbHkgZnJvbSBtYWxpY2lvdXMgYWNjdXNhdGlvbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGVuZW15IGNhbWUgdXAgYWdhaW5zdCBoaW0sIGhlIG9yZGVyZWQgaGlzIG1lbiB0byByZW1haW4gcXVpZXRseSB1bmRlciBhcm1zIHVudGlsIGhlIHNob3VsZCBoYXZlIGZpbmlzaGVkIHNhY3JpZmljaW5nLCBhbmQgdGhlbiB3YWl0ZWQgYSBjb25zaWRlcmFibGUgdGltZSwgZWl0aGVyIGJlY2F1c2UgdGhlIG9tZW5zIHdlcmUgYmFkLCBvciBiZWNhdXNlIGhlIHdpc2hlZCB0byBkcmF3IHRoZSBlbmVteSBuZWFyZXIuIFRoZXJlZm9yZSwgdG8gYmVnaW4gd2l0aCwgUGx1dGFyY2gsIHdobyB0aG91Z2h0IHRoYXQgUGhvY2lvbidzIGRlbGF5IHdhcyBkdWUgdG8gY293YXJkaWNlLCBzYWxsaWVkIGZvcnRoIHdpdGggaGlzIG1lcmNlbmFyaWVzLiBOZXh0LCB0aGUgaG9yc2VtZW4sIGNhdGNoaW5nIHNpZ2h0IG9mIFBsdXRhcmNoLCBjb3VsZCBub3QgcmVzdHJhaW4gdGhlbXNlbHZlcywgYnV0IHJvZGUgYXQgb25jZSBpbnRvIHRoZSBlbmVteSwgaHVycnlpbmcgb3V0IG9mIHRoZSBjYW1wIGluIGEgZGlzb3JkZXJseSBhbmQgc2NhdHRlcmVkIGZhc2hpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb3JlbW9zdCBvZiB0aGVtIHdlcmUgY29ucXVlcmVkLCBhbmQgdGhlbiBhbGwgb2YgdGhlbSBkaXNwZXJzZWQgYW5kIFBsdXRhcmNoIHRvb2sgdG8gZmxpZ2h0LCB3aGlsZSBzb21lIG9mIHRoZSBlbmVteSBnYWluZWQgdGhlIHJhbXBhcnRzIGFuZCB0cmllZCB0byBjdXQgdGhlbSBhd2F5IGFuZCBkZXN0cm95IHRoZW0sIHN1cHBvc2luZyB0aGVtc2VsdmVzIHRvIGJlIGVudGlyZWx5IHZpY3RvcmlvdXMuIEJ1dCBhdCB0aGlzIHBvaW50IHRoZSBzYWNyaWZpY2VzIHdlcmUgY29tcGxldGVkLCBhbmQgdGhlIEF0aGVuaWFucywgYnVyc3Rpbmcgb3V0IG9mIHRoZWlyIGNhbXAsIHJvdXRlZCB0aGVpciBhc3NhaWxhbnRzIGFuZCBzbGV3IG1vc3Qgb2YgdGhlbSBhcyB0aGV5IGZsZWQgYW1vbmcgdGhlIGVudHJlbmNobWVudHMuIFRoZW4gUGhvY2lvbiBvcmRlcmVkIGhpcyBwaGFsYW54IHRvIGhhbHQgZm9yIHRoZSByZWNlcHRpb24gYW5kIHN1cHBvcnQgb2YgdGhlIHRyb29wcyB3aGljaCBoYWQgYmVlbiBzY2F0dGVyZWQgaW4gdGhlIHByZXZpb3VzIGZsaWdodCwgd2hpbGUgaGUgaGltc2VsZiB3aXRoIGhpcyBwaWNrZWQgbWVuIGZlbGwgdXBvbiB0aGUgbWFpbiBib2R5IG9mIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QSBmaWVyY2UgYmF0dGxlIGVuc3VlZCwgaW4gd2hpY2ggYWxsIHRoZSBBdGhlbmlhbnMgZm91Z2h0IHdpdGggc3Bpcml0IGFuZCBnYWxsYW50cnk7IGJ1dCBUaGFsbHVzIHRoZSBzb24gb2YgQ2luZWFzIGFuZCBHbGF1Y3VzIHRoZSBzb24gb2YgUG9seW1lZGVzLCB3aG9zZSBwb3N0IHdhcyBhdCB0aGVpciBnZW5lcmFsJ3Mgc2lkZSwgYm9yZSBhd2F5IHRoZSBwYWxtLiBIb3dldmVyLCBDbGVvcGhhbmVzIGFsc28gZGlkIG1vc3QgdmFsdWFibGUgc2VydmljZSBpbiB0aGF0IGJhdHRsZS4gRm9yLCBieSBjYWxsaW5nIGJhY2sgdGhlIGNhdmFscnkgZnJvbSB0aGVpciBmbGlnaHQgYW5kIGV4aG9ydGluZyB0aGVtIHdpdGggbG91ZCBjcmllcyB0byBzdWNjb3VyIHRoZWlyIGdlbmVyYWwgaW4gaGlzIHBlcmlsLCBoZSBtYWRlIHRoZW0gdHVybiBiYWNrIGFuZCBjb25maXJtIHRoZSB2aWN0b3J5IG9mIHRoZSBtZW4tYXQtYXJtcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZW5lbXkgY2FtZSB1cCBhZ2FpbnN0IGhpbSwgaGUgb3JkZXJlZCBoaXMgbWVuIHRvIHJlbWFpbiBxdWlldGx5IHVuZGVyIGFybXMgdW50aWwgaGUgc2hvdWxkIGhhdmUgZmluaXNoZWQgc2FjcmlmaWNpbmcsIGFuZCB0aGVuIHdhaXRlZCBhIGNvbnNpZGVyYWJsZSB0aW1lLCBlaXRoZXIgYmVjYXVzZSB0aGUgb21lbnMgd2VyZSBiYWQsIG9yIGJlY2F1c2UgaGUgd2lzaGVkIHRvIGRyYXcgdGhlIGVuZW15IG5lYXJlci4gVGhlcmVmb3JlLCB0byBiZWdpbiB3aXRoLCBQbHV0YXJjaCwgd2hvIHRob3VnaHQgdGhhdCBQaG9jaW9uJ3MgZGVsYXkgd2FzIGR1ZSB0byBjb3dhcmRpY2UsIHNhbGxpZWQgZm9ydGggd2l0aCBoaXMgbWVyY2VuYXJpZXMuIE5leHQsIHRoZSBob3JzZW1lbiwgY2F0Y2hpbmcgc2lnaHQgb2YgUGx1dGFyY2gsIGNvdWxkIG5vdCByZXN0cmFpbiB0aGVtc2VsdmVzLCBidXQgcm9kZSBhdCBvbmNlIGludG8gdGhlIGVuZW15LCBodXJyeWluZyBvdXQgb2YgdGhlIGNhbXAgaW4gYSBkaXNvcmRlcmx5IGFuZCBzY2F0dGVyZWQgZmFzaGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb3JlbW9zdCBvZiB0aGVtIHdlcmUgY29ucXVlcmVkLCBhbmQgdGhlbiBhbGwgb2YgdGhlbSBkaXNwZXJzZWQgYW5kIFBsdXRhcmNoIHRvb2sgdG8gZmxpZ2h0LCB3aGlsZSBzb21lIG9mIHRoZSBlbmVteSBnYWluZWQgdGhlIHJhbXBhcnRzIGFuZCB0cmllZCB0byBjdXQgdGhlbSBhd2F5IGFuZCBkZXN0cm95IHRoZW0sIHN1cHBvc2luZyB0aGVtc2VsdmVzIHRvIGJlIGVudGlyZWx5IHZpY3RvcmlvdXMuIEJ1dCBhdCB0aGlzIHBvaW50IHRoZSBzYWNyaWZpY2VzIHdlcmUgY29tcGxldGVkLCBhbmQgdGhlIEF0aGVuaWFucywgYnVyc3Rpbmcgb3V0IG9mIHRoZWlyIGNhbXAsIHJvdXRlZCB0aGVpciBhc3NhaWxhbnRzIGFuZCBzbGV3IG1vc3Qgb2YgdGhlbSBhcyB0aGV5IGZsZWQgYW1vbmcgdGhlIGVudHJlbmNobWVudHMuIFRoZW4gUGhvY2lvbiBvcmRlcmVkIGhpcyBwaGFsYW54IHRvIGhhbHQgZm9yIHRoZSByZWNlcHRpb24gYW5kIHN1cHBvcnQgb2YgdGhlIHRyb29wcyB3aGljaCBoYWQgYmVlbiBzY2F0dGVyZWQgaW4gdGhlIHByZXZpb3VzIGZsaWdodCwgd2hpbGUgaGUgaGltc2VsZiB3aXRoIGhpcyBwaWNrZWQgbWVuIGZlbGwgdXBvbiB0aGUgbWFpbiBib2R5IG9mIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmllcmNlIGJhdHRsZSBlbnN1ZWQsIGluIHdoaWNoIGFsbCB0aGUgQXRoZW5pYW5zIGZvdWdodCB3aXRoIHNwaXJpdCBhbmQgZ2FsbGFudHJ5OyBidXQgVGhhbGx1cyB0aGUgc29uIG9mIENpbmVhcyBhbmQgR2xhdWN1cyB0aGUgc29uIG9mIFBvbHltZWRlcywgd2hvc2UgcG9zdCB3YXMgYXQgdGhlaXIgZ2VuZXJhbCdzIHNpZGUsIGJvcmUgYXdheSB0aGUgcGFsbS4gSG93ZXZlciwgQ2xlb3BoYW5lcyBhbHNvIGRpZCBtb3N0IHZhbHVhYmxlIHNlcnZpY2UgaW4gdGhhdCBiYXR0bGUuIEZvciwgYnkgY2FsbGluZyBiYWNrIHRoZSBjYXZhbHJ5IGZyb20gdGhlaXIgZmxpZ2h0IGFuZCBleGhvcnRpbmcgdGhlbSB3aXRoIGxvdWQgY3JpZXMgdG8gc3VjY291ciB0aGVpciBnZW5lcmFsIGluIGhpcyBwZXJpbCwgaGUgbWFkZSB0aGVtIHR1cm4gYmFjayBhbmQgY29uZmlybSB0aGUgdmljdG9yeSBvZiB0aGUgbWVuLWF0LWFybXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBob2Npb24gZXhwZWxsZWQgUGx1dGFyY2ggZnJvbSBFcmV0cmlhLCB0b29rIHBvc3Nlc3Npb24gb2YgWmFyZXRyYSwgYSBmb3J0cmVzcyBtb3N0IGFkdmFudGFnZW91c2x5IHNpdHVhdGVkIHdoZXJlIHRoZSBpc2xhbmQgaXMgcmVkdWNlZCB0byBpdHMgbmFycm93ZXN0IHdpZHRoIGJ5IHRoZSBzZWEsIHdoaWNoIGhlbXMgaXQgaW4gb24gYm90aCBzaWRlcywgYW5kIHJlbGVhc2VkIGFsbCB0aGUgR3JlZWtzIHdob20gaGUgaGFkIHRha2VuIHByaXNvbmVycy4gRm9yIGhlIHdhcyBhZnJhaWQgdGhhdCB0aGUgb3JhdG9ycyBhdCBBdGhlbnMgbWlnaHQgZHJpdmUgdGhlIHBlb3BsZSwgaW4gc29tZSBmaXQgb2YgYW5nZXIsIHRvIHRyZWF0IHRoZW0gd2l0aCBjcnVlbHR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFBob2Npb24gZXhwZWxsZWQgUGx1dGFyY2ggZnJvbSBFcmV0cmlhLCB0b29rIHBvc3Nlc3Npb24gb2YgWmFyZXRyYSwgYSBmb3J0cmVzcyBtb3N0IGFkdmFudGFnZW91c2x5IHNpdHVhdGVkIHdoZXJlIHRoZSBpc2xhbmQgaXMgcmVkdWNlZCB0byBpdHMgbmFycm93ZXN0IHdpZHRoIGJ5IHRoZSBzZWEsIHdoaWNoIGhlbXMgaXQgaW4gb24gYm90aCBzaWRlcywgYW5kIHJlbGVhc2VkIGFsbCB0aGUgR3JlZWtzIHdob20gaGUgaGFkIHRha2VuIHByaXNvbmVycy4gRm9yIGhlIHdhcyBhZnJhaWQgdGhhdCB0aGUgb3JhdG9ycyBhdCBBdGhlbnMgbWlnaHQgZHJpdmUgdGhlIHBlb3BsZSwgaW4gc29tZSBmaXQgb2YgYW5nZXIsIHRvIHRyZWF0IHRoZW0gd2l0aCBjcnVlbHR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGVzZSB0aGluZ3MgaGFkIGJlZW4gYWNjb21wbGlzaGVkLCBQaG9jaW9uIHNhaWxlZCBiYWNrIGhvbWUsIGFuZCB0aGVuIHRoZSBhbGxpZXMgc3BlZWRpbHkgZmVsdCB0aGUgYWJzZW5jZSBvZiBoaXMgcHJvYml0eSBhbmQganVzdGljZSwgYW5kIHNwZWVkaWx5IGRpZCB0aGUgQXRoZW5pYW5zIHJlY29nbml6ZSB0aGUgZXhwZXJpZW5jZSBhbmQgdmlnb3VyIHdoaWNoIGhhZCBiZWVuIHNob3duIGJ5IGhpbS4gRm9yIGhpcyBzdWNjZXNzb3IgaW4gY29tbWFuZCwgTW9sb3NzdXMsIGNvbmR1Y3RlZCB0aGUgd2FyIGluIHN1Y2ggYSB3YXkgYXMgYWN0dWFsbHkgdG8gZmFsbCBhbGl2ZSBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgUGhpbGlwLCBjaGVyaXNoaW5nIGdyZWF0IGFudGljaXBhdGlvbnMsIHdlbnQgdG8gdGhlIEhlbGxlc3BvbnQgd2l0aCBhbGwgaGlzIGZvcmNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNDAgQi5DLjwvbm90ZT4gZXhwZWN0aW5nIHRvIGdldCB0aGUgQ2hlcnNvbmVzdXMsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIFBlcmludGh1cyBhbmQgQnl6YW50aXVtLCBpbnRvIGhpcyBwb3dlci4gVGhlIEF0aGVuaWFucyB3ZXJlIGVhZ2VyIHRvIGdpdmUgYWlkIHRvIHRoZWlyIGFsbGllcywgYnV0IHRoZWlyIG9yYXRvcnMgc3Ryb3ZlIHN1Y2Nlc3NmdWxseSB0byBoYXZlIENoYXJlcyBzZW50IG91dCBhcyBjb21tYW5kZXIsIGFuZCBoZSwgYWZ0ZXIgc2FpbGluZyB0aGl0aGVyLCBkaWQgbm90aGluZyB3b3J0aHkgb2YgdGhlIGZvcmNlIHVuZGVyIGhpcyBvcmRlcnMsIG5vciB3b3VsZCB0aGUgY2l0aWVzIGV2ZW4gcmVjZWl2ZSBoaXMgYXJtYW1lbnQgaW50byB0aGVpciBoYXJib3Vycy4gT24gdGhlIGNvbnRyYXJ5LCBoZSB3YXMgaGVsZCBpbiBzdXNwaWNpb24gYnkgYWxsIG9mIHRoZW0sIGFuZCB3YW5kZXJlZCBhYm91dCBleGFjdGluZyBtb25leSBmcm9tIHRoZSBhbGxpZXMgYW5kIGRlc3Bpc2VkIGJ5IHRoZSBlbmVteSwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+c28gdGhhdCB0aGUgcGVvcGxlIG9mIEF0aGVucywgaW5zdGlnYXRlZCBieSB0aGVpciBvcmF0b3JzLCB3ZXJlIGluY2Vuc2VkIGF0IGhpbSwgYW5kIHJlcGVudGVkIG9mIGhhdmluZyBzZW50IGFpZCB0byB0aGUgQnl6YW50aWFucy4gVGhlbiBQaG9jaW9uIHJvc2UgaW4gdGhlIGFzc2VtYmx5IGFuZCBkZWNsYXJlZCB0aGF0IHRoZXkgbXVzdCBub3QgYmUgYW5ncnkgYXQgdGhlaXIgYWxsaWVzIHdobyBzaG93ZWQgZGlzdHJ1c3QsIGJ1dCBhdCB0aGVpciBnZW5lcmFscyB3aG8gd2VyZSBkaXN0cnVzdGVkOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB0aGVzZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bWFrZSB5b3UgdG8gYmUgZmVhcmVkIGV2ZW4gYnkgdGhvc2Ugd2hvIGNhbiBiZSBzYXZlZCBvbmx5IGJ5IHlvdXIgaGVscC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2UgdGhpbmdzIGhhZCBiZWVuIGFjY29tcGxpc2hlZCwgUGhvY2lvbiBzYWlsZWQgYmFjayBob21lLCBhbmQgdGhlbiB0aGUgYWxsaWVzIHNwZWVkaWx5IGZlbHQgdGhlIGFic2VuY2Ugb2YgaGlzIHByb2JpdHkgYW5kIGp1c3RpY2UsIGFuZCBzcGVlZGlseSBkaWQgdGhlIEF0aGVuaWFucyByZWNvZ25pemUgdGhlIGV4cGVyaWVuY2UgYW5kIHZpZ291ciB3aGljaCBoYWQgYmVlbiBzaG93biBieSBoaW0uIEZvciBoaXMgc3VjY2Vzc29yIGluIGNvbW1hbmQsIE1vbG9zc3VzLCBjb25kdWN0ZWQgdGhlIHdhciBpbiBzdWNoIGEgd2F5IGFzIGFjdHVhbGx5IHRvIGZhbGwgYWxpdmUgaW50byB0aGUgaGFuZHMgb2YgdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgUGhpbGlwLCBjaGVyaXNoaW5nIGdyZWF0IGFudGljaXBhdGlvbnMsIHdlbnQgdG8gdGhlIEhlbGxlc3BvbnQgd2l0aCBhbGwgaGlzIGZvcmNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM0MCBCLkMuPC9ub3RlPiBleHBlY3RpbmcgdG8gZ2V0IHRoZSBDaGVyc29uZXN1cywgYW5kIGF0IHRoZSBzYW1lIHRpbWUgUGVyaW50aHVzIGFuZCBCeXphbnRpdW0sIGludG8gaGlzIHBvd2VyLiBUaGUgQXRoZW5pYW5zIHdlcmUgZWFnZXIgdG8gZ2l2ZSBhaWQgdG8gdGhlaXIgYWxsaWVzLCBidXQgdGhlaXIgb3JhdG9ycyBzdHJvdmUgc3VjY2Vzc2Z1bGx5IHRvIGhhdmUgQ2hhcmVzIHNlbnQgb3V0IGFzIGNvbW1hbmRlciwgYW5kIGhlLCBhZnRlciBzYWlsaW5nIHRoaXRoZXIsIGRpZCBub3RoaW5nIHdvcnRoeSBvZiB0aGUgZm9yY2UgdW5kZXIgaGlzIG9yZGVycywgbm9yIHdvdWxkIHRoZSBjaXRpZXMgZXZlbiByZWNlaXZlIGhpcyBhcm1hbWVudCBpbnRvIHRoZWlyIGhhcmJvdXJzLiBPbiB0aGUgY29udHJhcnksIGhlIHdhcyBoZWxkIGluIHN1c3BpY2lvbiBieSBhbGwgb2YgdGhlbSwgYW5kIHdhbmRlcmVkIGFib3V0IGV4YWN0aW5nIG1vbmV5IGZyb20gdGhlIGFsbGllcyBhbmQgZGVzcGlzZWQgYnkgdGhlIGVuZW15LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgdGhlIHBlb3BsZSBvZiBBdGhlbnMsIGluc3RpZ2F0ZWQgYnkgdGhlaXIgb3JhdG9ycywgd2VyZSBpbmNlbnNlZCBhdCBoaW0sIGFuZCByZXBlbnRlZCBvZiBoYXZpbmcgc2VudCBhaWQgdG8gdGhlIEJ5emFudGlhbnMuIFRoZW4gUGhvY2lvbiByb3NlIGluIHRoZSBhc3NlbWJseSBhbmQgZGVjbGFyZWQgdGhhdCB0aGV5IG11c3Qgbm90IGJlIGFuZ3J5IGF0IHRoZWlyIGFsbGllcyB3aG8gc2hvd2VkIGRpc3RydXN0LCBidXQgYXQgdGhlaXIgZ2VuZXJhbHMgd2hvIHdlcmUgZGlzdHJ1c3RlZDsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB0aGVzZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tYWtlIHlvdSB0byBiZSBmZWFyZWQgZXZlbiBieSB0aG9zZSB3aG8gY2FuIGJlIHNhdmVkIG9ubHkgYnkgeW91ciBoZWxwLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BY2NvcmRpbmdseSwgbW92ZWQgYnkgaGlzIHdvcmRzLCB0aGUgcGVvcGxlIGNoYW5nZWQgdGhlaXIgbWluZHMgYWdhaW4gYW5kIG9yZGVyZWQgaGltIHRvIHRha2UgYW5vdGhlciBmb3JjZSBhbmQgZ28gaGltc2VsZiB0byB0aGUgaGVscCBvZiB0aGVpciBhbGxpZXMgb24gdGhlIEhlbGxlc3BvbnQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMzkgQi5DLjwvbm90ZT4gYSBjb21taXNzaW9uIHdoaWNoIGNvbnRyaWJ1dGVkIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRvIHRoZSBzYWx2YXRpb24gb2YgQnl6YW50aXVtLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbHJlYWR5IFBob2Npb24gd2FzIGhlbGQgaW4gaGlnaCByZXB1dGUgdGhlcmU7IGFuZCB3aGVuIExlb248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDIyLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TmljaWFzPC90aXRsZT4sIHh4aWkuIDM8L2JpYmw+Ljwvbm90ZT4gYWxzbywgYSBtYW4gd2hvIHdhcyBmaXJzdCBhbW9uZyB0aGUgQnl6YW50aWFucyBmb3IgdmlydHVlLCBhbmQgaGFkIGJlZW4gYSBmYW1pbGlhciBjb21wYW5pb24gb2YgUGhvY2lvbiBpbiB0aGUgQWNhZGVteSwgd2VudCBzdXJldHkgZm9yIGhpbSB3aXRoIHRoZSBjaXR5LCB0aGV5IHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIGdvIGludG8gY2FtcCBvdXRzaWRlIHRoZSBjaXR5LCBhcyBoZSB3aXNoZWQsIGJ1dCB0aHJldyBvcGVuIHRoZWlyIGdhdGVzIGFuZCByZWNlaXZlZCB0aGUgQXRoZW5pYW5zIGludG8gY2xvc2UgY29tcGFuaW9uc2hpcCB3aXRoIHRoZW1zZWx2ZXMuIFRoaXMgbWFyayBvZiBjb25maWRlbmNlIGNhdXNlZCB0aGUgQXRoZW5pYW5zIHRvIGJlIG5vdCBvbmx5IGRpc2NyZWV0IGFuZCBibGFtZWxlc3MgaW4gdGhlaXIgZ2VuZXJhbCBjb25kdWN0LCBidXQgYWxzbyBtb3N0IHNwaXJpdGVkIGluIHRoZSBzdHJ1Z2dsZXMgZm9yIHRoZSBjaXR5J3MgZGVmZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyB3YXkgUGhpbGlwIHdhcyBleHBlbGxlZCBmcm9tIHRoZSBIZWxsZXNwb250IGF0IHRoaXMgdGltZSBhbmQgYnJvdWdodCBpbnRvIGNvbnRlbXB0LCBhbHRob3VnaCBtZW4gaGFkIHRob3VnaHQgdGhlcmUgd2FzIG5vIGZpZ2h0aW5nIG9yIGNvbnRlbmRpbmcgd2l0aCBoaW0gYXQgYWxsOyBtb3Jlb3ZlciwgUGhvY2lvbiBjYXB0dXJlZCBzb21lIG9mIGhpcyBzaGlwcyBhbmQgcmVjb3ZlcmVkIGNpdGllcyB3aGljaCBoZSBoYWQgZ2Fycmlzb25lZC4gSGUgYWxzbyBsYW5kZWQgaW4gbWFueSBwYXJ0cyBvZiBQaGlsaXAncyB0ZXJyaXRvcnkgYW5kIHBsdW5kZXJlZCBhbmQgb3ZlcnJhbiBpdCwgdW50aWwgaGUgd2FzIHdvdW5kZWQgYnkgdGhvc2Ugd2hvIHJhbGxpZWQgdG8gaXRzIGRlZmVuY2UsIGFuZCBzYWlsZWQgYmFjayBob21lLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM5IEIuQy48L25vdGU+IGEgY29tbWlzc2lvbiB3aGljaCBjb250cmlidXRlZCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSB0byB0aGUgc2FsdmF0aW9uIG9mIEJ5emFudGl1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbHJlYWR5IFBob2Npb24gd2FzIGhlbGQgaW4gaGlnaCByZXB1dGUgdGhlcmU7IGFuZCB3aGVuIExlb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAyMi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHh4aWkuIDM8L2JpYmw+Ljwvbm90ZT4gYWxzbywgYSBtYW4gd2hvIHdhcyBmaXJzdCBhbW9uZyB0aGUgQnl6YW50aWFucyBmb3IgdmlydHVlLCBhbmQgaGFkIGJlZW4gYSBmYW1pbGlhciBjb21wYW5pb24gb2YgUGhvY2lvbiBpbiB0aGUgQWNhZGVteSwgd2VudCBzdXJldHkgZm9yIGhpbSB3aXRoIHRoZSBjaXR5LCB0aGV5IHdvdWxkIG5vdCBzdWZmZXIgaGltIHRvIGdvIGludG8gY2FtcCBvdXRzaWRlIHRoZSBjaXR5LCBhcyBoZSB3aXNoZWQsIGJ1dCB0aHJldyBvcGVuIHRoZWlyIGdhdGVzIGFuZCByZWNlaXZlZCB0aGUgQXRoZW5pYW5zIGludG8gY2xvc2UgY29tcGFuaW9uc2hpcCB3aXRoIHRoZW1zZWx2ZXMuIFRoaXMgbWFyayBvZiBjb25maWRlbmNlIGNhdXNlZCB0aGUgQXRoZW5pYW5zIHRvIGJlIG5vdCBvbmx5IGRpc2NyZWV0IGFuZCBibGFtZWxlc3MgaW4gdGhlaXIgZ2VuZXJhbCBjb25kdWN0LCBidXQgYWxzbyBtb3N0IHNwaXJpdGVkIGluIHRoZSBzdHJ1Z2dsZXMgZm9yIHRoZSBjaXR5J3MgZGVmZW5jZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDIyLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeHhpaS4gMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIHh4aWkuIDM8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IFBoaWxpcCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgSGVsbGVzcG9udCBhdCB0aGlzIHRpbWUgYW5kIGJyb3VnaHQgaW50byBjb250ZW1wdCwgYWx0aG91Z2ggbWVuIGhhZCB0aG91Z2h0IHRoZXJlIHdhcyBubyBmaWdodGluZyBvciBjb250ZW5kaW5nIHdpdGggaGltIGF0IGFsbDsgbW9yZW92ZXIsIFBob2Npb24gY2FwdHVyZWQgc29tZSBvZiBoaXMgc2hpcHMgYW5kIHJlY292ZXJlZCBjaXRpZXMgd2hpY2ggaGUgaGFkIGdhcnJpc29uZWQuIEhlIGFsc28gbGFuZGVkIGluIG1hbnkgcGFydHMgb2YgUGhpbGlwJ3MgdGVycml0b3J5IGFuZCBwbHVuZGVyZWQgYW5kIG92ZXJyYW4gaXQsIHVudGlsIGhlIHdhcyB3b3VuZGVkIGJ5IHRob3NlIHdobyByYWxsaWVkIHRvIGl0cyBkZWZlbmNlLCBhbmQgc2FpbGVkIGJhY2sgaG9tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSBvZiBNZWdhcmEgb25jZSBtYWRlIGEgc2VjcmV0IGFwcGVhbCB0byBBdGhlbnMgZm9yIGhlbHAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWdhaW5zdCBhIGZhY3Rpb24gaW4gdGhlIGNpdHkgd2hpY2ggd291bGQgaGF2ZSBkZWxpdmVyZWQgaXQgaW50byB0aGUgcG93ZXIgb2YgUGhpbGlwLiBUaGUgZGF0ZSBvZiB0aGVzZSBldmVudHMgaXMgdW5jZXJ0YWluIChwZXJoYXBzIDM0NC0zNDMgQi5DLikuPC9ub3RlPiBhbmQgUGhvY2lvbiwgZmVhcmluZyB0aGF0IHRoZSBCb2VvdGlhbnMgbWlnaHQgZ2V0IGVhcmx5IGtub3dsZWRnZSBvZiB0aGUgYXBwZWFsIGFuZCBhbnRpY2lwYXRlIEF0aGVucyBpbiBzZW5kaW5nIGhlbHAsIGNhbGxlZCBhbiBhc3NlbWJseSBlYXJseSBpbiB0aGUgbW9ybmluZyBhbmQgYW5ub3VuY2VkIHRvIHRoZSBBdGhlbmlhbnMgdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBNZWdhcmEuIFRoZW4sIGFzIHNvb24gYXMgdGhlIHJlcXVpc2l0ZSBkZWNyZWUgaGFkIGJlZW4gcGFzc2VkLCBoZSBvcmRlcmVkIHRoZSB0cnVtcGV0ZXIgdG8gZ2l2ZSB0aGUgc2lnbmFsIGFuZCBsZWQgdGhlbSwgdW5kZXIgYXJtcywgZGlyZWN0bHkgZnJvbSB0aGUgYXNzZW1ibHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNZWdhcmlhbnMgcmVjZWl2ZWQgaGltIGVhZ2VybHksIGFuZCBoZSBlbmNsb3NlZCBOaXNhZWE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2VhLXBvcnQgb2YgTWVnYXJhLCBhYm91dCBhIG1pbGUgYXdheS48L25vdGU+IHdpdGggYSB3YWxsLCBidWlsdCB0d28gbG9uZyB3YWxscyBkb3duIHRvIHRoZSBzZWEtcG9ydCBmcm9tIE1lZ2FyYSwgYW5kIHRodXMgdW5pdGVkIHRoZSBjaXR5IHdpdGggdGhlIHNlYSwgc28gdGhhdCBzaGUgbmVlZCBub3cgcGF5IGxpdHRsZSBoZWVkIHRvIGVuZW1pZXMgb24gbGFuZCBhbmQgY291bGQgYmUgaW4gY2xvc2UgY29ubmVjdGlvbiB3aXRoIEF0aGVucyBieSBzZWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSBvZiBNZWdhcmEgb25jZSBtYWRlIGEgc2VjcmV0IGFwcGVhbCB0byBBdGhlbnMgZm9yIGhlbHAsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BZ2FpbnN0IGEgZmFjdGlvbiBpbiB0aGUgY2l0eSB3aGljaCB3b3VsZCBoYXZlIGRlbGl2ZXJlZCBpdCBpbnRvIHRoZSBwb3dlciBvZiBQaGlsaXAuIFRoZSBkYXRlIG9mIHRoZXNlIGV2ZW50cyBpcyB1bmNlcnRhaW4gKHBlcmhhcHMgMzQ0LTM0MyBCLkMuKS48L25vdGU+IGFuZCBQaG9jaW9uLCBmZWFyaW5nIHRoYXQgdGhlIEJvZW90aWFucyBtaWdodCBnZXQgZWFybHkga25vd2xlZGdlIG9mIHRoZSBhcHBlYWwgYW5kIGFudGljaXBhdGUgQXRoZW5zIGluIHNlbmRpbmcgaGVscCwgY2FsbGVkIGFuIGFzc2VtYmx5IGVhcmx5IGluIHRoZSBtb3JuaW5nIGFuZCBhbm5vdW5jZWQgdG8gdGhlIEF0aGVuaWFucyB0aGUgbWVzc2FnZSByZWNlaXZlZCBmcm9tIE1lZ2FyYS4gVGhlbiwgYXMgc29vbiBhcyB0aGUgcmVxdWlzaXRlIGRlY3JlZSBoYWQgYmVlbiBwYXNzZWQsIGhlIG9yZGVyZWQgdGhlIHRydW1wZXRlciB0byBnaXZlIHRoZSBzaWduYWwgYW5kIGxlZCB0aGVtLCB1bmRlciBhcm1zLCBkaXJlY3RseSBmcm9tIHRoZSBhc3NlbWJseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBNZWdhcmlhbnMgcmVjZWl2ZWQgaGltIGVhZ2VybHksIGFuZCBoZSBlbmNsb3NlZCBOaXNhZWE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzZWEtcG9ydCBvZiBNZWdhcmEsIGFib3V0IGEgbWlsZSBhd2F5Ljwvbm90ZT4gd2l0aCBhIHdhbGwsIGJ1aWx0IHR3byBsb25nIHdhbGxzIGRvd24gdG8gdGhlIHNlYS1wb3J0IGZyb20gTWVnYXJhLCBhbmQgdGh1cyB1bml0ZWQgdGhlIGNpdHkgd2l0aCB0aGUgc2VhLCBzbyB0aGF0IHNoZSBuZWVkIG5vdyBwYXkgbGl0dGxlIGhlZWQgdG8gZW5lbWllcyBvbiBsYW5kIGFuZCBjb3VsZCBiZSBpbiBjbG9zZSBjb25uZWN0aW9uIHdpdGggQXRoZW5zIGJ5IHNlYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzQwIEIuQy48L25vdGU+IHRoZSByZWxhdGlvbnMgYmV0d2VlbiBBdGhlbnMgYW5kIFBoaWxpcCB3ZXJlIGFsdG9nZXRoZXIgaG9zdGlsZSwgYW5kLCBpbiBQaG9jaW9uJ3MgYWJzZW5jZSwgb3RoZXIgZ2VuZXJhbHMgd2VyZSBjaG9zZW4gdG8gY29uZHVjdCB0aGUgd2FyLiBCdXQgd2hlbiBQaG9jaW9uIHJldHVybmVkIHdpdGggaGlzIGZsZWV0IGZyb20gdGhlIGlzbGFuZHMsIHRvIGJlZ2luIHdpdGgsIGhlIHRyaWVkIHRvIHBlcnN1YWRlIHRoZSBwZW9wbGUsIHNpbmNlIFBoaWxpcCB3YXMgcGVhY2VhYmx5IGluY2xpbmVkIGFuZCBncmVhdGx5IGZlYXJlZCB0aGUgcGVyaWwgb2Ygd2FyLCB0byBhY2NlcHQgdGhlIHRlcm1zIG9mIHNldHRsZW1lbnQgd2hpY2ggaGUgb2ZmZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gb25lIG9mIHRob3NlIHdobyBoYXVudGVkIHRoZSBsYXctY291cnRzIGluIHRoZSBjYXBhY2l0eSBvZiBwdWJsaWMgaW5mb3JtZXIgb3Bwb3NlZCBoaW0sIGFuZCBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhbnN0IHRob3UgZGFyZSwgTyBQaG9jaW9uLCB0byBkaXZlcnQgdGhlIEF0aGVuaWFucyBmcm9tIHdhciB3aGVuIHRoZXkgYXJlIGFscmVhZHkgdW5kZXIgYXJtcz88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNhbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIHRoYXQsIHRvbywgdGhvdWdoIEkga25vdyB0aGF0IHdoaWxlIHRoZXJlIGlzIHdhciB0aG91IHdpbHQgYmUgdW5kZXIgbXkgb3JkZXJzLCBidXQgd2hlbiBwZWFjZSBoYXMgYmVlbiBtYWRlIEkgc2hhbGwgYmUgdW5kZXIgdGhpbmUuPC9xPiBXaGVuLCBob3dldmVyLCBoZSBjb3VsZCBub3QgcHJldmFpbCwgYnV0IERlbW9zdGhlbmVzIGNhcnJpZWQgdGhlIGRheSBhbmQgd2FzIHVyZ2luZyB0aGUgQXRoZW5pYW5zIHRvIGpvaW4gYmF0dGxlIHdpdGggUGhpbGlwIGFzIGZhciBmcm9tIEF0dGljYSBhcyBwb3NzaWJsZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFNpciw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sZXQgdXMgbm90IGFzayB3aGVyZSB3ZSBjYW4gZmlnaHQsIGJ1dCBob3cgd2Ugc2hhbGwgYmUgdmljdG9yaW91cy4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGF0IGNhc2UgdGhlIHdhciB3aWxsIGJlIGF0IGEgbG9uZyByZW1vdmU7IGJ1dCB3aGVyZXZlciBtZW4gYXJlIGRlZmVhdGVkIGV2ZXJ5IHRlcnJvciBpcyBjbG9zZSBhdCBoYW5kLjwvcT4gQnV0IHdoZW4gdGhlIGRlZmVhdCBjYW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzOCBCLkMuLCBhdCBDaGFlcm9uZWlhLCB3aGVyZSBQaGlsaXAgZGVmZWF0ZWQgdGhlIGFsbGllZCBHcmVla3MgYW5kIHB1dCBhbiBlbmQgdG8gdGhlaXIgaW5kZXBlbmRlbmNlLjwvbm90ZT4gYW5kIHRoZSB0dXJidWxlbnQgYW5kIHJldm9sdXRpb25hcnkgc3Bpcml0cyBpbiB0aGUgY2l0eSBkcmFnZ2VkIENoYXJpZGVtdXMgdG8gdGhlIHRyaWJ1bmFsIGFuZCBkZW1hbmRlZCB0aGF0IGhlIGJlIG1hZGUgZ2VuZXJhbCwgdGhlIGJlc3QgY2l0aXplbnMgd2VyZSBmaWxsZWQgd2l0aCBmZWFyOyBhbmQgd2l0aCB0aGUgYWlkIG9mIHRoZSBjb3VuY2lsIG9mIHRoZSBBcmVpb3BhZ3VzIGluIHRoZSBhc3NlbWJseSwgYnkgZGludCBvZiBlbnRyZWF0aWVzIGFuZCB0ZWFycywgdGhleSBwZXJzdWFkZWQgdGhlbSBhdCBsYXN0IHRvIGVudHJ1c3QgdGhlIGNpdHkgdG8gdGhlIGd1aWRhbmNlIG9mIFBob2Npb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UHJlc2VudGx5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNDAgQi5DLjwvbm90ZT4gdGhlIHJlbGF0aW9ucyBiZXR3ZWVuIEF0aGVucyBhbmQgUGhpbGlwIHdlcmUgYWx0b2dldGhlciBob3N0aWxlLCBhbmQsIGluIFBob2Npb24ncyBhYnNlbmNlLCBvdGhlciBnZW5lcmFscyB3ZXJlIGNob3NlbiB0byBjb25kdWN0IHRoZSB3YXIuIEJ1dCB3aGVuIFBob2Npb24gcmV0dXJuZWQgd2l0aCBoaXMgZmxlZXQgZnJvbSB0aGUgaXNsYW5kcywgdG8gYmVnaW4gd2l0aCwgaGUgdHJpZWQgdG8gcGVyc3VhZGUgdGhlIHBlb3BsZSwgc2luY2UgUGhpbGlwIHdhcyBwZWFjZWFibHkgaW5jbGluZWQgYW5kIGdyZWF0bHkgZmVhcmVkIHRoZSBwZXJpbCBvZiB3YXIsIHRvIGFjY2VwdCB0aGUgdGVybXMgb2Ygc2V0dGxlbWVudCB3aGljaCBoZSBvZmZlcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIG9uZSBvZiB0aG9zZSB3aG8gaGF1bnRlZCB0aGUgbGF3LWNvdXJ0cyBpbiB0aGUgY2FwYWNpdHkgb2YgcHVibGljIGluZm9ybWVyIG9wcG9zZWQgaGltLCBhbmQgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhbnN0IHRob3UgZGFyZSwgTyBQaG9jaW9uLCB0byBkaXZlcnQgdGhlIEF0aGVuaWFucyBmcm9tIHdhciB3aGVuIHRoZXkgYXJlIGFscmVhZHkgdW5kZXIgYXJtcz88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2FuLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFuZCB0aGF0LCB0b28sIHRob3VnaCBJIGtub3cgdGhhdCB3aGlsZSB0aGVyZSBpcyB3YXIgdGhvdSB3aWx0IGJlIHVuZGVyIG15IG9yZGVycywgYnV0IHdoZW4gcGVhY2UgaGFzIGJlZW4gbWFkZSBJIHNoYWxsIGJlIHVuZGVyIHRoaW5lLjwvcT4gV2hlbiwgaG93ZXZlciwgaGUgY291bGQgbm90IHByZXZhaWwsIGJ1dCBEZW1vc3RoZW5lcyBjYXJyaWVkIHRoZSBkYXkgYW5kIHdhcyB1cmdpbmcgdGhlIEF0aGVuaWFucyB0byBqb2luIGJhdHRsZSB3aXRoIFBoaWxpcCBhcyBmYXIgZnJvbSBBdHRpY2EgYXMgcG9zc2libGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFNpciw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCB1cyBub3QgYXNrIHdoZXJlIHdlIGNhbiBmaWdodCwgYnV0IGhvdyB3ZSBzaGFsbCBiZSB2aWN0b3Jpb3VzLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhhdCBjYXNlIHRoZSB3YXIgd2lsbCBiZSBhdCBhIGxvbmcgcmVtb3ZlOyBidXQgd2hlcmV2ZXIgbWVuIGFyZSBkZWZlYXRlZCBldmVyeSB0ZXJyb3IgaXMgY2xvc2UgYXQgaGFuZC48L3E+IEJ1dCB3aGVuIHRoZSBkZWZlYXQgY2FtZSw8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiB0aGF0IGNhc2UgdGhlIHdhciB3aWxsIGJlIGF0IGEgbG9uZyByZW1vdmU7IGJ1dCB3aGVyZXZlciBtZW4gYXJlIGRlZmVhdGVkIGV2ZXJ5IHRlcnJvciBpcyBjbG9zZSBhdCBoYW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM4IEIuQy4sIGF0IENoYWVyb25laWEsIHdoZXJlIFBoaWxpcCBkZWZlYXRlZCB0aGUgYWxsaWVkIEdyZWVrcyBhbmQgcHV0IGFuIGVuZCB0byB0aGVpciBpbmRlcGVuZGVuY2UuPC9ub3RlPiBhbmQgdGhlIHR1cmJ1bGVudCBhbmQgcmV2b2x1dGlvbmFyeSBzcGlyaXRzIGluIHRoZSBjaXR5IGRyYWdnZWQgQ2hhcmlkZW11cyB0byB0aGUgdHJpYnVuYWwgYW5kIGRlbWFuZGVkIHRoYXQgaGUgYmUgbWFkZSBnZW5lcmFsLCB0aGUgYmVzdCBjaXRpemVucyB3ZXJlIGZpbGxlZCB3aXRoIGZlYXI7IGFuZCB3aXRoIHRoZSBhaWQgb2YgdGhlIGNvdW5jaWwgb2YgdGhlIEFyZWlvcGFndXMgaW4gdGhlIGFzc2VtYmx5LCBieSBkaW50IG9mIGVudHJlYXRpZXMgYW5kIHRlYXJzLCB0aGV5IHBlcnN1YWRlZCB0aGVtIGF0IGxhc3QgdG8gZW50cnVzdCB0aGUgY2l0eSB0byB0aGUgZ3VpZGFuY2Ugb2YgUGhvY2lvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZ2VuZXJhbCwgUGhvY2lvbiB0aG91Z2h0IHRoYXQgdGhlIHBvbGljeSBhbmQga2luZGx5IG92ZXJ0dXJlcyBvZiBQaGlsaXAgc2hvdWxkIGJlIGFjY2VwdGVkIGJ5IHRoZSBBdGhlbmlhbnM7IGJ1dCB3aGVuIERlbWFkZXMgYnJvdWdodCBpbiBhIG1vdGlvbiB0aGF0IHRoZSBjaXR5IHNob3VsZCBwYXJ0aWNpcGF0ZSB3aXRoIHRoZSBHcmVla3MgaW4gdGhlIGNvbW1vbiBwZWFjZSBhbmQgaW4gdGhlIGNvbmdyZXNzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBDb25ncmVzcyBvZiBHcmVlayBzdGF0ZXMgc3VtbW9uZWQgYnkgUGhpbGlwIHRvIG1lZXQgYXQgQ29yaW50aC4gSXQgdm90ZWQgZm9yIHdhciBhZ2FpbnN0IFBlcnNpYSB1bmRlciB0aGUgbGVhZGVyc2hpcCBvZiBQaGlsaXAuPC9ub3RlPiBQaG9jaW9uIHdvdWxkIG5vdCBmYXZvdXIgaXQgYmVmb3JlIHRoZXkgZm91bmQgb3V0IHdoYXQgZGVtYW5kcyBQaGlsaXAgd2FzIGdvaW5nIHRvIG1ha2UgdXBvbiB0aGUgR3JlZWtzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgb3BpbmlvbiBkaWQgbm90IHByZXZhaWwsIG93aW5nIHRvIHRoZSBjcmlzaXMsIGFuZCB5ZXQgYXMgc29vbiBhcyBoZSBzYXcgdGhhdCB0aGUgQXRoZW5pYW5zIHdlcmUgcmVwZW50aW5nIG9mIHRoZWlyIGNvdXJzZSwgYmVjYXVzZSB0aGV5IHdlcmUgcmVxdWlyZWQgdG8gZnVybmlzaCBQaGlsaXAgd2l0aCB0cmlyZW1lcyBhbmQgaG9yc2VtZW4sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB3aGF0IEkgZmVhcmVkLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aGVuIEkgb3Bwb3NlZCB5b3VyIGFjdGlvbjsgYnV0IHNpbmNlIHlvdSBhZ3JlZWQgdXBvbiBpdCwgeW91IG11c3Qgbm90IHJlcGluZSBvciBiZSBkZWplY3RlZCwgcmVtZW1iZXJpbmcgdGhhdCBvdXIgYW5jZXN0b3JzIGFsc28gd2VyZSBzb21ldGltZXMgaW4gY29tbWFuZCwgYW5kIHNvbWV0aW1lcyB1bmRlciBjb21tYW5kLCBidXQgYnkgZG9pbmcgd2VsbCBpbiBib3RoIHRoZXNlIHBvc2l0aW9ucyBzYXZlZCBib3RoIHRoZWlyIGNpdHkgYW5kIHRoZSBHcmVla3MuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbiB0aGUgZGVhdGggb2YgUGhpbGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjE5SW4gMzM2IEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXIgeHhpaTwvYmlibD4uPC9ub3RlPiBoZSB3YXMgb3Bwb3NlZCB0byB0aGUgcGVvcGxlcyBvZmZlcmluZyBzYWNyaWZpY2VzIG9mIGdsYWQgdGlkaW5nczsgZm9yIGl0IHdhcyBhbiBpZ25vYmxlIHRoaW5nLCBoZSBzYWlkLCB0byByZWpvaWNlIHRoZXJlYXQsIGFuZCB0aGUgZm9yY2Ugd2hpY2ggaGFkIGJlZW4gYXJyYXllZCBhZ2FpbnN0IHRoZW0gYXQgQ2hhZXJvbmVpYSB3YXMgZGltaW5pc2hlZCBieSBvbmx5IG9uZSBwZXJzb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGdlbmVyYWwsIFBob2Npb24gdGhvdWdodCB0aGF0IHRoZSBwb2xpY3kgYW5kIGtpbmRseSBvdmVydHVyZXMgb2YgUGhpbGlwIHNob3VsZCBiZSBhY2NlcHRlZCBieSB0aGUgQXRoZW5pYW5zOyBidXQgd2hlbiBEZW1hZGVzIGJyb3VnaHQgaW4gYSBtb3Rpb24gdGhhdCB0aGUgY2l0eSBzaG91bGQgcGFydGljaXBhdGUgd2l0aCB0aGUgR3JlZWtzIGluIHRoZSBjb21tb24gcGVhY2UgYW5kIGluIHRoZSBjb25ncmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBDb25ncmVzcyBvZiBHcmVlayBzdGF0ZXMgc3VtbW9uZWQgYnkgUGhpbGlwIHRvIG1lZXQgYXQgQ29yaW50aC4gSXQgdm90ZWQgZm9yIHdhciBhZ2FpbnN0IFBlcnNpYSB1bmRlciB0aGUgbGVhZGVyc2hpcCBvZiBQaGlsaXAuPC9ub3RlPiBQaG9jaW9uIHdvdWxkIG5vdCBmYXZvdXIgaXQgYmVmb3JlIHRoZXkgZm91bmQgb3V0IHdoYXQgZGVtYW5kcyBQaGlsaXAgd2FzIGdvaW5nIHRvIG1ha2UgdXBvbiB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBvcGluaW9uIGRpZCBub3QgcHJldmFpbCwgb3dpbmcgdG8gdGhlIGNyaXNpcywgYW5kIHlldCBhcyBzb29uIGFzIGhlIHNhdyB0aGF0IHRoZSBBdGhlbmlhbnMgd2VyZSByZXBlbnRpbmcgb2YgdGhlaXIgY291cnNlLCBiZWNhdXNlIHRoZXkgd2VyZSByZXF1aXJlZCB0byBmdXJuaXNoIFBoaWxpcCB3aXRoIHRyaXJlbWVzIGFuZCBob3JzZW1lbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaXMgd2hhdCBJIGZlYXJlZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aGVuIEkgb3Bwb3NlZCB5b3VyIGFjdGlvbjsgYnV0IHNpbmNlIHlvdSBhZ3JlZWQgdXBvbiBpdCwgeW91IG11c3Qgbm90IHJlcGluZSBvciBiZSBkZWplY3RlZCwgcmVtZW1iZXJpbmcgdGhhdCBvdXIgYW5jZXN0b3JzIGFsc28gd2VyZSBzb21ldGltZXMgaW4gY29tbWFuZCwgYW5kIHNvbWV0aW1lcyB1bmRlciBjb21tYW5kLCBidXQgYnkgZG9pbmcgd2VsbCBpbiBib3RoIHRoZXNlIHBvc2l0aW9ucyBzYXZlZCBib3RoIHRoZWlyIGNpdHkgYW5kIHRoZSBHcmVla3MuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbiB0aGUgZGVhdGggb2YgUGhpbGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTlJbiAzMzYgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXIgeHhpaTwvYmlibD4uPC9ub3RlPiBoZSB3YXMgb3Bwb3NlZCB0byB0aGUgcGVvcGxlcyBvZmZlcmluZyBzYWNyaWZpY2VzIG9mIGdsYWQgdGlkaW5nczsgZm9yIGl0IHdhcyBhbiBpZ25vYmxlIHRoaW5nLCBoZSBzYWlkLCB0byByZWpvaWNlIHRoZXJlYXQsIGFuZCB0aGUgZm9yY2Ugd2hpY2ggaGFkIGJlZW4gYXJyYXllZCBhZ2FpbnN0IHRoZW0gYXQgQ2hhZXJvbmVpYSB3YXMgZGltaW5pc2hlZCBieSBvbmx5IG9uZSBwZXJzb24uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXIgeHhpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtb3N0aGVuZXM8L3RpdGxlPiwgY2hhcHRlciB4eGlpPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdoZW4gRGVtb3N0aGVuZXMgd2FzIGhlYXBpbmcgYWJ1c2UgdXBvbiBBbGV4YW5kZXIsIHdobyB3YXMgYWxyZWFkeSBhZHZhbmNpbmcgYWdhaW5zdCBUaGViZXMsIFBob2Npb24gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj7igJhSYXNoIG9uZSwgd2h5IGRvc3QgdGhvdSBzZWVrIHRvIHByb3Zva2UgYSBtYW4gd2hvIGlzIHNhdmFnZSzigJk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDkuNDk0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXk8L3RpdGxlPiwgaXguIDQ5NDwvYmlibD4sIE9keXNzZXVzLCB0byBhIGNvbXBhbmlvbiwgb2YgUG9seXBoZW11cyB0aGUgQ3ljbG9wcy48L25vdGU+IGFuZCBpcyByZWFjaGluZyBvdXQgYWZ0ZXIgZ3JlYXQgZ2xvcnk/IENhbnN0IHRob3Ugd2lzaCwgd2hlbiBzbyBncmVhdCBhIGNvbmZsYWdyYXRpb24gaXMgbmVhciwgdG8gZmFuIHRoZSBjaXR5IGludG8gZmxhbWU/IEJ1dCBJLCB3aG8gYW0gYmVhcmluZyB0aGUgYnVyZGVucyBvZiBjb21tYW5kIHdpdGggdGhpcyBvYmplY3QgaW4gdmlldywgd2lsbCBub3Qgc3VmZmVyIHRoZXNlIGZlbGxvdyBjaXRpemVucyBvZiBtaW5lIHRvIHBlcmlzaCBldmVuIGlmIHRoYXQgaXMgdGhlaXIgZGVzaXJlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBUaGViZXMgaGFkIGJlZW4gZGVzdHJveWVkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM1IEIuQy48L25vdGU+IGFuZCBBbGV4YW5kZXIgd2FzIGRlbWFuZGluZyB0aGUgc3VycmVuZGVyIG9mIERlbW9zdGhlbmVzLCBMeWN1cmd1cywgSHlwZXJlaWRlcywgQ2hhcmlkZW11cywgYW5kIG90aGVycywgYW5kIHRoZSBhc3NlbWJseSB0dXJuZWQgdGhlaXIgZXllcyB1cG9uIFBob2Npb24gYW5kIGNhbGxlZCB1cG9uIGhpbSBtYW55IHRpbWVzIGJ5IG5hbWUsIGhlIHJvc2UgdXAsIGFuZCBkcmF3aW5nIHRvIGhpcyBzaWRlIG9uZSBvZiBoaXMgZnJpZW5kcywgd2hvbSBoZSBhbHdheXMgY2hlcmlzaGVkLCB0cnVzdGVkLCBhbmQgbG92ZWQgbW9zdCBvZiBhbGwsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlc2UgbWVuIGhhdmUgYnJvdWdodCB0aGUgY2l0eSB0byBzdWNoIGEgcGFzcyB0aGF0IEksIGZvciBteSBwYXJ0LCBldmVuIGlmIHRoaXMgTmljb2NsZXMgc2hvdWxkIGJlIGRlbWFuZGVkLCB3b3VsZCB1cmdlIHlvdSB0byBnaXZlIGhpbSB1cC4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBJIG1pZ2h0IGRpZSBteXNlbGYgaW4gYmVoYWxmIG9mIHlvdSBhbGwsIEkgc2hvdWxkIGRlZW0gaXQgYSBwaWVjZSBvZiBnb29kIGZvcnR1bmUgZm9yIG1lLiBBbmQgSSBmZWVsIHBpdHksPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPm1lbiBvZiBBdGhlbnMsIGZvciB0aG9zZSBhbHNvIHdobyBoYXZlIGZsZWQgaGl0aGVyIGZyb20gVGhlYmVzOyBidXQgaXQgaXMgZW5vdWdoIHRoYXQgdGhlIEdyZWVrcyBzaG91bGQgaGF2ZSB0aGUgZmF0ZSBvZiBUaGViZXMgdG8gbW91cm4uIFRoZXJlZm9yZSBpdCBpcyBiZXR0ZXIgdG8gc3VwcGxpY2F0ZSBhbmQgdHJ5IHRvIHBlcnN1YWRlIHRoZSB2aWN0b3JzIGZvciBib3RoIHlvdSBhbmQgdGhlbSwgYW5kIG5vdCB0byBmaWdodC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdoZW4gRGVtb3N0aGVuZXMgd2FzIGhlYXBpbmcgYWJ1c2UgdXBvbiBBbGV4YW5kZXIsIHdobyB3YXMgYWxyZWFkeSBhZHZhbmNpbmcgYWdhaW5zdCBUaGViZXMsIFBob2Npb24gc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPuKAmFJhc2ggb25lLCB3aHkgZG9zdCB0aG91IHNlZWsgdG8gcHJvdm9rZSBhIG1hbiB3aG8gaXMgc2F2YWdlLOKAmTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDkuNDk0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpeC4gNDk0PC9iaWJsPiwgT2R5c3NldXMsIHRvIGEgY29tcGFuaW9uLCBvZiBQb2x5cGhlbXVzIHRoZSBDeWNsb3BzLjwvbm90ZT4gYW5kIGlzIHJlYWNoaW5nIG91dCBhZnRlciBncmVhdCBnbG9yeT8gQ2Fuc3QgdGhvdSB3aXNoLCB3aGVuIHNvIGdyZWF0IGEgY29uZmxhZ3JhdGlvbiBpcyBuZWFyLCB0byBmYW4gdGhlIGNpdHkgaW50byBmbGFtZT8gQnV0IEksIHdobyBhbSBiZWFyaW5nIHRoZSBidXJkZW5zIG9mIGNvbW1hbmQgd2l0aCB0aGlzIG9iamVjdCBpbiB2aWV3LCB3aWxsIG5vdCBzdWZmZXIgdGhlc2UgZmVsbG93IGNpdGl6ZW5zIG9mIG1pbmUgdG8gcGVyaXNoIGV2ZW4gaWYgdGhhdCBpcyB0aGVpciBkZXNpcmUuPC9xPiAKCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gOS40OTQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl4LiA0OTQ8L2JpYmw+LCBPZHlzc2V1cywgdG8gYSBjb21wYW5pb24sIG9mIFBvbHlwaGVtdXMgdGhlIEN5Y2xvcHMuPC9ub3RlPiBhbmQgaXMgcmVhY2hpbmcgb3V0IGFmdGVyIGdyZWF0IGdsb3J5PyBDYW5zdCB0aG91IHdpc2gsIHdoZW4gc28gZ3JlYXQgYSBjb25mbGFncmF0aW9uIGlzIG5lYXIsIHRvIGZhbiB0aGUgY2l0eSBpbnRvIGZsYW1lPyBCdXQgSSwgd2hvIGFtIGJlYXJpbmcgdGhlIGJ1cmRlbnMgb2YgY29tbWFuZCB3aXRoIHRoaXMgb2JqZWN0IGluIHZpZXcsIHdpbGwgbm90IHN1ZmZlciB0aGVzZSBmZWxsb3cgY2l0aXplbnMgb2YgbWluZSB0byBwZXJpc2ggZXZlbiBpZiB0aGF0IGlzIHRoZWlyIGRlc2lyZS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA5LjQ5NCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXguIDQ5NDwvYmlibD4sIE9keXNzZXVzLCB0byBhIGNvbXBhbmlvbiwgb2YgUG9seXBoZW11cyB0aGUgQ3ljbG9wcy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl4LiA0OTQ8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFRoZWJlcyBoYWQgYmVlbiBkZXN0cm95ZWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzNSBCLkMuPC9ub3RlPiBhbmQgQWxleGFuZGVyIHdhcyBkZW1hbmRpbmcgdGhlIHN1cnJlbmRlciBvZiBEZW1vc3RoZW5lcywgTHljdXJndXMsIEh5cGVyZWlkZXMsIENoYXJpZGVtdXMsIGFuZCBvdGhlcnMsIGFuZCB0aGUgYXNzZW1ibHkgdHVybmVkIHRoZWlyIGV5ZXMgdXBvbiBQaG9jaW9uIGFuZCBjYWxsZWQgdXBvbiBoaW0gbWFueSB0aW1lcyBieSBuYW1lLCBoZSByb3NlIHVwLCBhbmQgZHJhd2luZyB0byBoaXMgc2lkZSBvbmUgb2YgaGlzIGZyaWVuZHMsIHdob20gaGUgYWx3YXlzIGNoZXJpc2hlZCwgdHJ1c3RlZCwgYW5kIGxvdmVkIG1vc3Qgb2YgYWxsLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlc2UgbWVuIGhhdmUgYnJvdWdodCB0aGUgY2l0eSB0byBzdWNoIGEgcGFzcyB0aGF0IEksIGZvciBteSBwYXJ0LCBldmVuIGlmIHRoaXMgTmljb2NsZXMgc2hvdWxkIGJlIGRlbWFuZGVkLCB3b3VsZCB1cmdlIHlvdSB0byBnaXZlIGhpbSB1cC4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIEkgbWlnaHQgZGllIG15c2VsZiBpbiBiZWhhbGYgb2YgeW91IGFsbCwgSSBzaG91bGQgZGVlbSBpdCBhIHBpZWNlIG9mIGdvb2QgZm9ydHVuZSBmb3IgbWUuIEFuZCBJIGZlZWwgcGl0eSw8L3E+IHNhaWQgaGUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBJIG1pZ2h0IGRpZSBteXNlbGYgaW4gYmVoYWxmIG9mIHlvdSBhbGwsIEkgc2hvdWxkIGRlZW0gaXQgYSBwaWVjZSBvZiBnb29kIGZvcnR1bmUgZm9yIG1lLiBBbmQgSSBmZWVsIHBpdHksPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5tZW4gb2YgQXRoZW5zLCBmb3IgdGhvc2UgYWxzbyB3aG8gaGF2ZSBmbGVkIGhpdGhlciBmcm9tIFRoZWJlczsgYnV0IGl0IGlzIGVub3VnaCB0aGF0IHRoZSBHcmVla3Mgc2hvdWxkIGhhdmUgdGhlIGZhdGUgb2YgVGhlYmVzIHRvIG1vdXJuLiBUaGVyZWZvcmUgaXQgaXMgYmV0dGVyIHRvIHN1cHBsaWNhdGUgYW5kIHRyeSB0byBwZXJzdWFkZSB0aGUgdmljdG9ycyBmb3IgYm90aCB5b3UgYW5kIHRoZW0sIGFuZCBub3QgdG8gZmlnaHQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gQWxleGFuZGVyIGdvdCB0aGUgZmlyc3QgZGVjcmVlIHdoaWNoIHRoZSBBdGhlbmlhbnMgcGFzc2VkLCBoZSBjYXN0IGl0IGZyb20gaGltIGFuZCByYW4gd2l0aCBhdmVydGVkIGZhY2UgZnJvbSB0aGUgZW52b3lzOyB0aGUgc2Vjb25kLCBob3dldmVyLCBoZSBhY2NlcHRlZCwgYmVjYXVzZSBpdCB3YXMgYnJvdWdodCBieSBQaG9jaW9uLCBhbmQgYmVjYXVzZSBoZSBoZWFyZCBmcm9tIHRoZSBvbGRlciBNYWNlZG9uaWFucyB0aGF0IFBoaWxpcCBhbHNvIHVzZWQgdG8gYWRtaXJlIHRoaXMgbWFuLiBBbmQgaGUgbm90IG9ubHkgY29uc2VudGVkIHRvIG1lZXQgUGhvY2lvbiBhbmQgaGVhciBoaXMgcGV0aXRpb24sIGJ1dCBhY3R1YWxseSBsaXN0ZW5lZCB0byBoaXMgY291bnNlbHMuIEFuZCBQaG9jaW9uIGNvdW5zZWxsZWQgaGltLCBpZiBoZSBzb3VnaHQgcXVpZXQsIHRvIG1ha2UgYW4gZW5kIG9mIHRoZSB3YXI7IGJ1dCBpZiBnbG9yeSwgdG8gdHJhbnNmZXIgdGhlIHdhciwgYW5kIHR1cm4gaGlzIGFybXMgYXdheSBmcm9tIEdyZWVjZSBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYnkgc2F5aW5nIG1hbnkgdGhpbmdzIHRoYXQgc3VpdGVkIHdlbGwgd2l0aCBBbGV4YW5kZXIncyBuYXR1cmUgYW5kIGRlc2lyZXMgaGUgc28gZmFyIGNoYW5nZWQgYW5kIHNvZnRlbmVkIGhpcyBmZWVsaW5ncyB0aGF0IGhlIGFkdmlzZWQgdGhlIEF0aGVuaWFucyB0byBnaXZlIGNsb3NlIGF0dGVudGlvbiB0byB0aGVpciBhZmZhaXJzLCBzaW5jZSwgaWYgYW55dGhpbmcgc2hvdWxkIGhhcHBlbiB0byBoaW0sIHRoZSBsZWFkZXJzaGlwIG9mIEdyZWVjZSB3b3VsZCBwcm9wZXJseSBmYWxsIHRvIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMTMuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbGV4YW5kZXI8L3RpdGxlPiwgeGlpaS4gMjwvYmlibD4uPC9ub3RlPiBJbiBwcml2YXRlLCB0b28sIGhlIG1hZGUgUGhvY2lvbiBoaXMgZnJpZW5kIGFuZCBndWVzdCwgYW5kIHNob3dlZCBoaW0gZ3JlYXRlciBob25vdXIgdGhhbiBtb3N0IG9mIGhpcyBjb25zdGFudCBhc3NvY2lhdGVzIGVuam95ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBEdXJpcyB3cml0ZXMgdGhhdCBhZnRlciBBbGV4YW5kZXIgaGFkIGJlY29tZSBncmVhdCBhbmQgaGFkIGNvbnF1ZXJlZCBEYXJlaXVzLCBoZSBkcm9wcGVkIGZyb20gaGlzIGxldHRlcnMgdGhlIHdvcmQgb2Ygc2FsdXRhdGlvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jaGFpcmVpbiw8L3E+IGV4Y2VwdCB3aGVuZXZlciBoZSB3YXMgd3JpdGluZyB0byBQaG9jaW9uOyBoaW0gYWxvbmUsIGxpa2UgQW50aXBhdGVyLCBoZSB1c2VkIHRvIGFkZHJlc3Mgd2l0aCB0aGUgd29yZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNoYWlyZWluLjwvcT4gVGhpcyBpcyB0aGUgdGVzdGltb255IG9mIENoYXJlcyBhbHNvLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBBbGV4YW5kZXIgZ290IHRoZSBmaXJzdCBkZWNyZWUgd2hpY2ggdGhlIEF0aGVuaWFucyBwYXNzZWQsIGhlIGNhc3QgaXQgZnJvbSBoaW0gYW5kIHJhbiB3aXRoIGF2ZXJ0ZWQgZmFjZSBmcm9tIHRoZSBlbnZveXM7IHRoZSBzZWNvbmQsIGhvd2V2ZXIsIGhlIGFjY2VwdGVkLCBiZWNhdXNlIGl0IHdhcyBicm91Z2h0IGJ5IFBob2Npb24sIGFuZCBiZWNhdXNlIGhlIGhlYXJkIGZyb20gdGhlIG9sZGVyIE1hY2Vkb25pYW5zIHRoYXQgUGhpbGlwIGFsc28gdXNlZCB0byBhZG1pcmUgdGhpcyBtYW4uIEFuZCBoZSBub3Qgb25seSBjb25zZW50ZWQgdG8gbWVldCBQaG9jaW9uIGFuZCBoZWFyIGhpcyBwZXRpdGlvbiwgYnV0IGFjdHVhbGx5IGxpc3RlbmVkIHRvIGhpcyBjb3Vuc2Vscy4gQW5kIFBob2Npb24gY291bnNlbGxlZCBoaW0sIGlmIGhlIHNvdWdodCBxdWlldCwgdG8gbWFrZSBhbiBlbmQgb2YgdGhlIHdhcjsgYnV0IGlmIGdsb3J5LCB0byB0cmFuc2ZlciB0aGUgd2FyLCBhbmQgdHVybiBoaXMgYXJtcyBhd2F5IGZyb20gR3JlZWNlIGFnYWluc3QgdGhlIEJhcmJhcmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBieSBzYXlpbmcgbWFueSB0aGluZ3MgdGhhdCBzdWl0ZWQgd2VsbCB3aXRoIEFsZXhhbmRlcidzIG5hdHVyZSBhbmQgZGVzaXJlcyBoZSBzbyBmYXIgY2hhbmdlZCBhbmQgc29mdGVuZWQgaGlzIGZlZWxpbmdzIHRoYXQgaGUgYWR2aXNlZCB0aGUgQXRoZW5pYW5zIHRvIGdpdmUgY2xvc2UgYXR0ZW50aW9uIHRvIHRoZWlyIGFmZmFpcnMsIHNpbmNlLCBpZiBhbnl0aGluZyBzaG91bGQgaGFwcGVuIHRvIGhpbSwgdGhlIGxlYWRlcnNoaXAgb2YgR3JlZWNlIHdvdWxkIHByb3Blcmx5IGZhbGwgdG8gdGhlbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMTMuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCB4aWlpLiAyPC9iaWJsPi48L25vdGU+IEluIHByaXZhdGUsIHRvbywgaGUgbWFkZSBQaG9jaW9uIGhpcyBmcmllbmQgYW5kIGd1ZXN0LCBhbmQgc2hvd2VkIGhpbSBncmVhdGVyIGhvbm91ciB0aGFuIG1vc3Qgb2YgaGlzIGNvbnN0YW50IGFzc29jaWF0ZXMgZW5qb3llZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiAxMy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIHhpaWkuIDI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCB4aWlpLiAyPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBEdXJpcyB3cml0ZXMgdGhhdCBhZnRlciBBbGV4YW5kZXIgaGFkIGJlY29tZSBncmVhdCBhbmQgaGFkIGNvbnF1ZXJlZCBEYXJlaXVzLCBoZSBkcm9wcGVkIGZyb20gaGlzIGxldHRlcnMgdGhlIHdvcmQgb2Ygc2FsdXRhdGlvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNoYWlyZWluLDwvcT4gZXhjZXB0IHdoZW5ldmVyIGhlIHdhcyB3cml0aW5nIHRvIFBob2Npb247IGhpbSBhbG9uZSwgbGlrZSBBbnRpcGF0ZXIsIGhlIHVzZWQgdG8gYWRkcmVzcyB3aXRoIHRoZSB3b3JkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jaGFpcmVpbi48L3E+IFRoaXMgaXMgdGhlIHRlc3RpbW9ueSBvZiBDaGFyZXMgYWxzby4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0b3J5IGFib3V0IHRoZSBtb25leSwgaW5kZWVkLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQsIG5hbWVseSwgdGhhdCBBbGV4YW5kZXIgc2VudCBoaW0gYSBwcmVzZW50IG9mIGEgaHVuZHJlZCB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB0YWxlbnQgd2FzIGVxdWl2YWxlbnQgdG8gYWJvdXQgwqMyMzUsIG9yICQxLDIwMCwgd2l0aCBmb3VyIG9yIGZpdmUgdGltZXMgdGhlIHB1cmNoYXNpbmcgcG93ZXIgb2YgbW9kZXJuIG1vbmV5Ljwvbm90ZT4gV2hlbiB0aGlzIHdhcyBicm91Z2h0IHRvIEF0aGVucywgUGhvY2lvbiBhc2tlZCB0aGUgYmVhcmVycyB3aHkgaW4gdGhlIHdvcmxkLCB3aGVuIHRoZXJlIHdlcmUgc28gbWFueSBBdGhlbmlhbnMsIEFsZXhhbmRlciBvZmZlcmVkIHN1Y2ggYSBzdW0gdG8gaGltIGFsb25lLiBUaGV5IHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSBBbGV4YW5kZXIganVkZ2VzIHRoYXQgdGhvdSBhbG9uZSBhcnQgYSBtYW4gb2YgaG9ub3VyIGFuZCB3b3J0aC48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGV0IGhpbSBzdWZmZXIgbWUgdG8gYmUgYW5kIGJlIHRob3VnaHQgc3VjaCBhbHdheXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBtZXNzZW5nZXJzIGFjY29tcGFuaWVkIGhpbSB0byBoaXMgaG9tZSBhbmQgc2F3IHRoZXJlIGEgZ3JlYXQgc2ltcGxpY2l0eSzigJRoaXMgd2lmZSBrbmVhZGluZyBicmVhZCwgd2hpbGUgUGhvY2lvbiB3aXRoIGhpcyBvd24gaGFuZHMgZHJldyB3YXRlciBmcm9tIHRoZSB3ZWxsIGFuZCB3YXNoZWQgaGlzIGZlZXQs4oCUdGhleSB3ZXJlIGluZGlnbmFudCwgYW5kIHByZXNzZWQgdGhlIG1vbmV5IHVwb24gaGltIHN0aWxsIG1vcmUgdXJnZW50bHksIGRlY2xhcmluZyBpdCBhbiBpbnRvbGVyYWJsZSB0aGluZyB0aGF0IGhlLCB0aG91Z2ggYSBmcmllbmQgb2YgdGhlIGtpbmcsIHNob3VsZCBsaXZlIGluIHN1Y2ggcG92ZXJ0eS4gUGhvY2lvbiwgYWNjb3JkaW5nbHksIHNlZWluZyBhIHBvb3Igb2xkIG1hbiB3YWxraW5nIHRoZSBzdHJlZXQgaW4gYSBkaXJ0eSBjbG9haywgYXNrZWQgdGhlbSBpZiB0aGV5IGNvbnNpZGVyZWQgaGltIGluZmVyaW9yIHRvIHRoaXMgbWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVhdmVuIGZvcmJpZCE8L3E+IHRoZXkgY3JpZWQuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHlldCB0aGlzIG1hbiw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5oYXMgbGVzcyB0byBsaXZlIHVwb24gdGhhbiBJLCBhbmQgZmluZHMgaXQgc3VmZmljaWVudC4gQW5kLCBpbiBhIHdvcmQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmlmIEkgbWFrZSBubyB1c2Ugb2YgdGhpcyBncmVhdCBzdW0gb2YgbW9uZXksIGl0IHdpbGwgZG8gbWUgbm8gZ29vZCB0byBoYXZlIGl0OyBvciwgaWYgSSB1c2UgaXQsIEkgc2hhbGwgYnJpbmcgbXlzZWxmLCBhbmQgdGhlIGtpbmcgYXMgd2VsbCwgdW5kZXIgdGhlIGNhbHVtbmllcyBvZiB0aGUgY2l0aXplbnMuPC9xPiBTbyB0aGUgdHJlYXN1cmUgd2VudCBiYWNrIGFnYWluIGZyb20gQXRoZW5zLCBhZnRlciBpdCBoYWQgc2hvd2VkIHRoZSBHcmVla3MgdGhhdCB0aGUgbWFuIHdobyBkaWQgbm90IHdhbnQgc28gZ3JlYXQgYSBzdW0gd2FzIHJpY2hlciB0aGFuIHRoZSBtYW4gd2hvIG9mZmVyZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciB3YXMgdmV4ZWQgYW5kIHdyb3RlIGJhY2sgdG8gUGhvY2lvbiB0aGF0IGhlIGNvdWxkIG5vdCByZWdhcmQgYXMgaGlzIGZyaWVuZHMgdGhvc2Ugd2hvIHdhbnRlZCBub3RoaW5nIG9mIGhpbS4gQnV0IG5vdCBldmVuIHRoZW4gd291bGQgUGhvY2lvbiB0YWtlIHRoZSBtb25leTsgaGUgZGlkLCBob3dldmVyLCBhc2sgZm9yIHRoZSByZWxlYXNlIG9mIEVjaGVjcmF0aWRlcyB0aGUgc29waGlzdCwgQXRoZW5vZG9ydXMgb2YgSW1icm9zLCBhbmQgdHdvIG1lbiBvZiBSaG9kZXMsIERlbWFyYXR1cyBhbmQgU3BhcnRvbiwgd2hvIGhhZCBiZWVuIGFycmVzdGVkIHVwb24gc3VuZHJ5IGNoYXJnZXMgYW5kIGltcHJpc29uZWQgaW4gU2FyZGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4sIHRoZW4sIEFsZXhhbmRlciBzZXQgZnJlZSBhdCBvbmNlLCBhbmQgYXQgYSBsYXRlciB0aW1lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyNCBCLkMuLCB3aGVuIENyYXRlcnVzIHdhcyBjb21taXNzaW9uZWQgdG8gbGVhZCB0aGUgdmV0ZXJhbiBzb2xkaWVycyBvZiBBbGV4YW5kZXIgYmFjayB0byBNYWNlZG9uaWEuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDcxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWxleGFuZGVyPC90aXRsZT4sIGNoYXB0ZXIgbHh4aTwvYmlibD4uPC9ub3RlPiB3aGVuIGhlIHNlbnQgQ3JhdGVydXMgYmFjayBpbnRvIE1hY2Vkb25pYSwgaGUgb3JkZXJlZCBoaW0gdG8gdHVybiBvdmVyIHRvIFBob2Npb24gdGhlIHJldmVudWVzIGZyb20gd2hpY2hldmVyIG9uZSBvZiBmb3VyIGNpdGllcyBpbiBBc2lhIGhlIG1pZ2h0IHNlbGVjdCzigJRlaXRoZXIgQ2l1cywgR2VyZ2l0aHVzLCBNeWxhc2EsIG9yIEVsYWVhLOKAlGluc2lzdGluZyBzdGlsbCBtb3JlIHN0cm9uZ2x5IHRoYW4gYmVmb3JlIHRoYXQgaGUgd291bGQgYmUgYW5ncnkgaWYgUGhvY2lvbiBkaWQgbm90IHRha2UgdGhlbS4gQnV0IFBob2Npb24gd291bGQgbm90IHRha2UgdGhlbSwgYW5kIHZlcnkgc29vbiBBbGV4YW5kZXIgZGllZC4gQW5kIGV2ZW4gdG8gdGhlIHByZXNlbnQgZGF5IFBob2Npb24ncyBob3VzZSBpcyBwb2ludGVkIG91dCBpbiBNZWxpdMOpLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZGVtZSwgb3Igd2FyZCwgaW4gdGhlIFMuIFcuIHBhcnQgb2YgQXRoZW5zLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAyMi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4eGlpLiAyPC9iaWJsPi48L25vdGU+IGFkb3JuZWQgd2l0aCBicm9uemUgZGlza3MsIGJ1dCBvdGhlcndpc2UgcGxhaW4gYW5kIHNpbXBsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0b3J5IGFib3V0IHRoZSBtb25leSwgaW5kZWVkLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQsIG5hbWVseSwgdGhhdCBBbGV4YW5kZXIgc2VudCBoaW0gYSBwcmVzZW50IG9mIGEgaHVuZHJlZCB0YWxlbnRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHRhbGVudCB3YXMgZXF1aXZhbGVudCB0byBhYm91dCDCozIzNSwgb3IgJDEsMjAwLCB3aXRoIGZvdXIgb3IgZml2ZSB0aW1lcyB0aGUgcHVyY2hhc2luZyBwb3dlciBvZiBtb2Rlcm4gbW9uZXkuPC9ub3RlPiBXaGVuIHRoaXMgd2FzIGJyb3VnaHQgdG8gQXRoZW5zLCBQaG9jaW9uIGFza2VkIHRoZSBiZWFyZXJzIHdoeSBpbiB0aGUgd29ybGQsIHdoZW4gdGhlcmUgd2VyZSBzbyBtYW55IEF0aGVuaWFucywgQWxleGFuZGVyIG9mZmVyZWQgc3VjaCBhIHN1bSB0byBoaW0gYWxvbmUuIFRoZXkgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UgQWxleGFuZGVyIGp1ZGdlcyB0aGF0IHRob3UgYWxvbmUgYXJ0IGEgbWFuIG9mIGhvbm91ciBhbmQgd29ydGguPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sZXQgaGltIHN1ZmZlciBtZSB0byBiZSBhbmQgYmUgdGhvdWdodCBzdWNoIGFsd2F5cy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBtZXNzZW5nZXJzIGFjY29tcGFuaWVkIGhpbSB0byBoaXMgaG9tZSBhbmQgc2F3IHRoZXJlIGEgZ3JlYXQgc2ltcGxpY2l0eSzigJRoaXMgd2lmZSBrbmVhZGluZyBicmVhZCwgd2hpbGUgUGhvY2lvbiB3aXRoIGhpcyBvd24gaGFuZHMgZHJldyB3YXRlciBmcm9tIHRoZSB3ZWxsIGFuZCB3YXNoZWQgaGlzIGZlZXQs4oCUdGhleSB3ZXJlIGluZGlnbmFudCwgYW5kIHByZXNzZWQgdGhlIG1vbmV5IHVwb24gaGltIHN0aWxsIG1vcmUgdXJnZW50bHksIGRlY2xhcmluZyBpdCBhbiBpbnRvbGVyYWJsZSB0aGluZyB0aGF0IGhlLCB0aG91Z2ggYSBmcmllbmQgb2YgdGhlIGtpbmcsIHNob3VsZCBsaXZlIGluIHN1Y2ggcG92ZXJ0eS4gUGhvY2lvbiwgYWNjb3JkaW5nbHksIHNlZWluZyBhIHBvb3Igb2xkIG1hbiB3YWxraW5nIHRoZSBzdHJlZXQgaW4gYSBkaXJ0eSBjbG9haywgYXNrZWQgdGhlbSBpZiB0aGV5IGNvbnNpZGVyZWQgaGltIGluZmVyaW9yIHRvIHRoaXMgbWFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlYXZlbiBmb3JiaWQhPC9xPiB0aGV5IGNyaWVkLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHlldCB0aGlzIG1hbiw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhhcyBsZXNzIHRvIGxpdmUgdXBvbiB0aGFuIEksIGFuZCBmaW5kcyBpdCBzdWZmaWNpZW50LiBBbmQsIGluIGEgd29yZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBJIG1ha2Ugbm8gdXNlIG9mIHRoaXMgZ3JlYXQgc3VtIG9mIG1vbmV5LCBpdCB3aWxsIGRvIG1lIG5vIGdvb2QgdG8gaGF2ZSBpdDsgb3IsIGlmIEkgdXNlIGl0LCBJIHNoYWxsIGJyaW5nIG15c2VsZiwgYW5kIHRoZSBraW5nIGFzIHdlbGwsIHVuZGVyIHRoZSBjYWx1bW5pZXMgb2YgdGhlIGNpdGl6ZW5zLjwvcT4gU28gdGhlIHRyZWFzdXJlIHdlbnQgYmFjayBhZ2FpbiBmcm9tIEF0aGVucywgYWZ0ZXIgaXQgaGFkIHNob3dlZCB0aGUgR3JlZWtzIHRoYXQgdGhlIG1hbiB3aG8gZGlkIG5vdCB3YW50IHNvIGdyZWF0IGEgc3VtIHdhcyByaWNoZXIgdGhhbiB0aGUgbWFuIHdobyBvZmZlcmVkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciB3YXMgdmV4ZWQgYW5kIHdyb3RlIGJhY2sgdG8gUGhvY2lvbiB0aGF0IGhlIGNvdWxkIG5vdCByZWdhcmQgYXMgaGlzIGZyaWVuZHMgdGhvc2Ugd2hvIHdhbnRlZCBub3RoaW5nIG9mIGhpbS4gQnV0IG5vdCBldmVuIHRoZW4gd291bGQgUGhvY2lvbiB0YWtlIHRoZSBtb25leTsgaGUgZGlkLCBob3dldmVyLCBhc2sgZm9yIHRoZSByZWxlYXNlIG9mIEVjaGVjcmF0aWRlcyB0aGUgc29waGlzdCwgQXRoZW5vZG9ydXMgb2YgSW1icm9zLCBhbmQgdHdvIG1lbiBvZiBSaG9kZXMsIERlbWFyYXR1cyBhbmQgU3BhcnRvbiwgd2hvIGhhZCBiZWVuIGFycmVzdGVkIHVwb24gc3VuZHJ5IGNoYXJnZXMgYW5kIGltcHJpc29uZWQgaW4gU2FyZGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgdGhlbiwgQWxleGFuZGVyIHNldCBmcmVlIGF0IG9uY2UsIGFuZCBhdCBhIGxhdGVyIHRpbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMjQgQi5DLiwgd2hlbiBDcmF0ZXJ1cyB3YXMgY29tbWlzc2lvbmVkIHRvIGxlYWQgdGhlIHZldGVyYW4gc29sZGllcnMgb2YgQWxleGFuZGVyIGJhY2sgdG8gTWFjZWRvbmlhLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDcxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGV4YW5kZXI8L3RpdGxlPiwgY2hhcHRlciBseHhpPC9iaWJsPi48L25vdGU+IHdoZW4gaGUgc2VudCBDcmF0ZXJ1cyBiYWNrIGludG8gTWFjZWRvbmlhLCBoZSBvcmRlcmVkIGhpbSB0byB0dXJuIG92ZXIgdG8gUGhvY2lvbiB0aGUgcmV2ZW51ZXMgZnJvbSB3aGljaGV2ZXIgb25lIG9mIGZvdXIgY2l0aWVzIGluIEFzaWEgaGUgbWlnaHQgc2VsZWN0LOKAlGVpdGhlciBDaXVzLCBHZXJnaXRodXMsIE15bGFzYSwgb3IgRWxhZWEs4oCUaW5zaXN0aW5nIHN0aWxsIG1vcmUgc3Ryb25nbHkgdGhhbiBiZWZvcmUgdGhhdCBoZSB3b3VsZCBiZSBhbmdyeSBpZiBQaG9jaW9uIGRpZCBub3QgdGFrZSB0aGVtLiBCdXQgUGhvY2lvbiB3b3VsZCBub3QgdGFrZSB0aGVtLCBhbmQgdmVyeSBzb29uIEFsZXhhbmRlciBkaWVkLiBBbmQgZXZlbiB0byB0aGUgcHJlc2VudCBkYXkgUGhvY2lvbidzIGhvdXNlIGlzIHBvaW50ZWQgb3V0IGluIE1lbGl0w6ksPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNzEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCBjaGFwdGVyIGx4eGk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCBjaGFwdGVyIGx4eGk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZGVtZSwgb3Igd2FyZCwgaW4gdGhlIFMuIFcuIHBhcnQgb2YgQXRoZW5zLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDIyLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHhpaS4gMjwvYmlibD4uPC9ub3RlPiBhZG9ybmVkIHdpdGggYnJvbnplIGRpc2tzLCBidXQgb3RoZXJ3aXNlIHBsYWluIGFuZCBzaW1wbGUuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDIyLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeHhpaS4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIHh4aWkuIDI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGlzIHdpdmVzLCBub3RoaW5nIGlzIHRvbGQgdXMgYWJvdXQgdGhlIGZpcnN0LCBleGNlcHQgdGhhdCBzaGUgd2FzIGEgc2lzdGVyIG9mIENlcGhpc29kb3R1cyB0aGUgc2N1bHB0b3I7IGJ1dCB0aGUgcmVwdXRhdGlvbiB3aGljaCB0aGUgc2Vjb25kIGhhZCBhbW9uZyB0aGUgQXRoZW5pYW5zIGZvciBzb2JyaWV0eSBhbmQgc2ltcGxpY2l0eSB3YXMgbm90IGxlc3MgdGhhbiB0aGF0IG9mIFBob2Npb24gZm9yIHByb2JpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIHdoZW4gdGhlIEF0aGVuaWFucyB3ZXJlIHdpdG5lc3NpbmcgYW4gZXhoaWJpdGlvbiBvZiBuZXcgdHJhZ2VkaWVzLCB0aGUgYWN0b3Igd2hvIHdhcyB0byB0YWtlIHRoZSBwYXJ0IG9mIGEgcXVlZW4gYXNrZWQgdGhlIGNob3JlZ3VzIHRvIGZ1cm5pc2ggaGltIHdpdGggYSBncmVhdCBudW1iZXIgb2YgYXR0ZW5kYW50IHdvbWVuIGluIGV4cGVuc2l2ZSBhcnJheTsgYW5kIHdoZW4gaGUgY291bGQgbm90IGdldCB0aGVtLCBoZSB3YXMgaW5kaWduYW50LCBhbmQga2VwdCB0aGUgYXVkaWVuY2Ugd2FpdGluZyBieSBoaXMgcmVmdXNhbCB0byBjb21lIG91dC4gQnV0IHRoZSBjaG9yZWd1cywgTWVsYW50aGl1cywgcHVzaGVkIGhpbSBiZWZvcmUgdGhlIHNwZWN0YXRvcnMsIGNyeWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb3N0IHRob3Ugbm90IHNlZSB0aGF0IFBob2Npb24ncyB3aWZlIGFsd2F5cyBnb2VzIG91dCB3aXRoIG9uZSBtYWlkLXNlcnZhbnQ/IFRoeSB2YW5pdHkgd2lsbCBiZSB0aGUgdW5kb2luZyBvZiBvdXIgd29tZW4tZm9say48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHdvcmRzIHdlcmUgcGxhaW5seSBoZWFyZCBieSB0aGUgYXVkaWVuY2UsIGFuZCB3ZXJlIHJlY2VpdmVkIHdpdGggdHVtdWx0dW91cyBhcHBsYXVzZS4gQW5kIHRoaXMgdmVyeSB3aWZlLCB3aGVuIGFuIElvbmlhbiB3b21hbiB3aG8gd2FzIGhlciBndWVzdCBkaXNwbGF5ZWQgb3JuYW1lbnRzIG9mIGdvbGQgYW5kIHByZWNpb3VzIHN0b25lcyB3b3JrZWQgaW50byBjb2xsYXJzIGFuZCBuZWNrbGFjZXMsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgb3JuYW1lbnQgaXMgUGhvY2lvbiwgd2hvIGlzIG5vdyBmb3IgdGhlIHR3ZW50aWV0aCB5ZWFyIGEgZ2VuZXJhbCBvZiBBdGhlbnMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpcyB3aXZlcywgbm90aGluZyBpcyB0b2xkIHVzIGFib3V0IHRoZSBmaXJzdCwgZXhjZXB0IHRoYXQgc2hlIHdhcyBhIHNpc3RlciBvZiBDZXBoaXNvZG90dXMgdGhlIHNjdWxwdG9yOyBidXQgdGhlIHJlcHV0YXRpb24gd2hpY2ggdGhlIHNlY29uZCBoYWQgYW1vbmcgdGhlIEF0aGVuaWFucyBmb3Igc29icmlldHkgYW5kIHNpbXBsaWNpdHkgd2FzIG5vdCBsZXNzIHRoYW4gdGhhdCBvZiBQaG9jaW9uIGZvciBwcm9iaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlIHdoZW4gdGhlIEF0aGVuaWFucyB3ZXJlIHdpdG5lc3NpbmcgYW4gZXhoaWJpdGlvbiBvZiBuZXcgdHJhZ2VkaWVzLCB0aGUgYWN0b3Igd2hvIHdhcyB0byB0YWtlIHRoZSBwYXJ0IG9mIGEgcXVlZW4gYXNrZWQgdGhlIGNob3JlZ3VzIHRvIGZ1cm5pc2ggaGltIHdpdGggYSBncmVhdCBudW1iZXIgb2YgYXR0ZW5kYW50IHdvbWVuIGluIGV4cGVuc2l2ZSBhcnJheTsgYW5kIHdoZW4gaGUgY291bGQgbm90IGdldCB0aGVtLCBoZSB3YXMgaW5kaWduYW50LCBhbmQga2VwdCB0aGUgYXVkaWVuY2Ugd2FpdGluZyBieSBoaXMgcmVmdXNhbCB0byBjb21lIG91dC4gQnV0IHRoZSBjaG9yZWd1cywgTWVsYW50aGl1cywgcHVzaGVkIGhpbSBiZWZvcmUgdGhlIHNwZWN0YXRvcnMsIGNyeWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSBub3Qgc2VlIHRoYXQgUGhvY2lvbidzIHdpZmUgYWx3YXlzIGdvZXMgb3V0IHdpdGggb25lIG1haWQtc2VydmFudD8gVGh5IHZhbml0eSB3aWxsIGJlIHRoZSB1bmRvaW5nIG9mIG91ciB3b21lbi1mb2xrLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3b3JkcyB3ZXJlIHBsYWlubHkgaGVhcmQgYnkgdGhlIGF1ZGllbmNlLCBhbmQgd2VyZSByZWNlaXZlZCB3aXRoIHR1bXVsdHVvdXMgYXBwbGF1c2UuIEFuZCB0aGlzIHZlcnkgd2lmZSwgd2hlbiBhbiBJb25pYW4gd29tYW4gd2hvIHdhcyBoZXIgZ3Vlc3QgZGlzcGxheWVkIG9ybmFtZW50cyBvZiBnb2xkIGFuZCBwcmVjaW91cyBzdG9uZXMgd29ya2VkIGludG8gY29sbGFycyBhbmQgbmVja2xhY2VzLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgb3JuYW1lbnQgaXMgUGhvY2lvbiwgd2hvIGlzIG5vdyBmb3IgdGhlIHR3ZW50aWV0aCB5ZWFyIGEgZ2VuZXJhbCBvZiBBdGhlbnMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBob2N1cyBoaXMgc29uIHdpc2hlZCB0byBjb21wZXRlIGF0IHRoZSBQYW5hdGhlbmFpYyBmZXN0aXZhbCBhcyBhIHZhdWx0aW5nIHJpZGVyIG9mIGhvcnNlcywgUGhvY2lvbiBwZXJtaXR0ZWQgaXQsIG5vdCBiZWNhdXNlIGhlIHdhcyBhbWJpdGlvdXMgZm9yIHRoZSB2aWN0b3J5LCBidXQgaW4gb3JkZXIgdGhhdCBjYXJlIGFuZCB0cmFpbmluZyBvZiB0aGUgYm9keSBtaWdodCBtYWtlIGhpcyBzb24gYSBiZXR0ZXIgbWFuOyBmb3IgaW4gZ2VuZXJhbCB0aGUgeW91dGggd2FzIGZvbmQgb2Ygd2luZSBhbmQgaXJyZWd1bGFyIGluIGhpcyBoYWJpdHMuIFRoZSB5b3V0aCB3YXMgdmljdG9yaW91cywgYW5kIG1hbnkgYXNrZWQgaGltIHRvIHRoZWlyIGhvdXNlcyBmb3IgdGhlIHZpY3RvcidzIGJhbnF1ZXQ7IGJ1dCBQaG9jaW9uIGRlY2xpbmVkIHRoZSBvdGhlciBpbnZpdGF0aW9ucyBhbmQgZ3JhbnRlZCB0aGUgY292ZXRlZCBob25vdXIgdG8gb25lIGhvc3Qgb25seS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gaGUgd2VudCB0byB0aGUgYmFucXVldCBhbmQgc2F3IHRoZSBnZW5lcmFsIG1hZ25pZmljZW5jZSBvZiB0aGUgcHJlcGFyYXRpb25zLCBhbmQgcGFydGljdWxhcmx5IHRoZSBmb290LWJhc2lucyBvZiBzcGljZWQgd2luZSB0aGF0IHdlcmUgYnJvdWdodCB0byB0aGUgZ3Vlc3RzIGFzIHRoZXkgZW50ZXJlZCwgaGUgY2FsbGVkIGhpcyBzb24gYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGhvY3VzLCBkbyBub3QgbGV0IHRoeSBjb21wYW5pb24gcnVpbiB0aHkgdmljdG9yeS48L3E+IE1vcmVvdmVyLCB3aXNoaW5nIHRvIHJlbW92ZSB0aGUgeW91bmcgbWFuIGVudGlyZWx5IGZyb20gdGhhdCBzdHlsZSBvZiBsaXZpbmcsIGhlIHRvb2sgaGltIG9mZiB0byBTcGFydGEgYW5kIHB1dCBoaW0gYW1vbmcgdGhlIHlvdXRocyB3aG8gd2VyZSBmb2xsb3dpbmcgdGhlIGNvdXJzZSBvZiBkaXNjaXBsaW5lIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFnb2dlLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgaS4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdmV4ZWQgdGhlIEF0aGVuaWFucywgd2hvIHRob3VnaHQgdGhhdCBQaG9jaW9uIGRlc3Bpc2VkIGFuZCBsb29rZWQgZG93biB1cG9uIHRoZSBuYXRpdmUgY3VzdG9tcy4gQW5kIG9uY2UgRGVtYWRlcyBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5QaG9jaW9uLCB3aHkgc2hvdWxkbid0IHdlIHRyeSB0byBwZXJzdWFkZSB0aGUgQXRoZW5pYW5zIHRvIGFkb3B0IHRoZSBTcGFydGFuIHBvbGl0eT8gRm9yIGlmIHRob3Ugc2F5ZXN0IHRoZSB3b3JkLCBJIGFtIHJlYWR5IHRvIGludHJvZHVjZSBhbmQgc3VwcG9ydCB0aGUgcmVxdWlzaXRlIGxhdy48L3E+IEJ1dCBQaG9jaW9uIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkIGl0IHdvdWxkIHZlcnkgd2VsbCBiZWNvbWUgdGhlZSwgd2l0aCBzbyBzdHJvbmcgYSBzY2VudCBvZiBvaW50bWVudCB1cG9uIHRoZWUsIGFuZCB3ZWFyaW5nIHN1Y2ggYSBtYW50bGUgYXMgdGhpbmUsIHRvIHJlY29tbWVuZCB0byB0aGUgQXRoZW5pYW5zIHRoZSBwdWJsaWMgbWVzcy1oYWxscyBvZiB0aGUgU3BhcnRhbnMsIGFuZCB0byBleHRvbCBMeWN1cmd1cy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQaG9jdXMgaGlzIHNvbiB3aXNoZWQgdG8gY29tcGV0ZSBhdCB0aGUgUGFuYXRoZW5haWMgZmVzdGl2YWwgYXMgYSB2YXVsdGluZyByaWRlciBvZiBob3JzZXMsIFBob2Npb24gcGVybWl0dGVkIGl0LCBub3QgYmVjYXVzZSBoZSB3YXMgYW1iaXRpb3VzIGZvciB0aGUgdmljdG9yeSwgYnV0IGluIG9yZGVyIHRoYXQgY2FyZSBhbmQgdHJhaW5pbmcgb2YgdGhlIGJvZHkgbWlnaHQgbWFrZSBoaXMgc29uIGEgYmV0dGVyIG1hbjsgZm9yIGluIGdlbmVyYWwgdGhlIHlvdXRoIHdhcyBmb25kIG9mIHdpbmUgYW5kIGlycmVndWxhciBpbiBoaXMgaGFiaXRzLiBUaGUgeW91dGggd2FzIHZpY3RvcmlvdXMsIGFuZCBtYW55IGFza2VkIGhpbSB0byB0aGVpciBob3VzZXMgZm9yIHRoZSB2aWN0b3IncyBiYW5xdWV0OyBidXQgUGhvY2lvbiBkZWNsaW5lZCB0aGUgb3RoZXIgaW52aXRhdGlvbnMgYW5kIGdyYW50ZWQgdGhlIGNvdmV0ZWQgaG9ub3VyIHRvIG9uZSBob3N0IG9ubHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGhlIHdlbnQgdG8gdGhlIGJhbnF1ZXQgYW5kIHNhdyB0aGUgZ2VuZXJhbCBtYWduaWZpY2VuY2Ugb2YgdGhlIHByZXBhcmF0aW9ucywgYW5kIHBhcnRpY3VsYXJseSB0aGUgZm9vdC1iYXNpbnMgb2Ygc3BpY2VkIHdpbmUgdGhhdCB3ZXJlIGJyb3VnaHQgdG8gdGhlIGd1ZXN0cyBhcyB0aGV5IGVudGVyZWQsIGhlIGNhbGxlZCBoaXMgc29uIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGhvY3VzLCBkbyBub3QgbGV0IHRoeSBjb21wYW5pb24gcnVpbiB0aHkgdmljdG9yeS48L3E+IE1vcmVvdmVyLCB3aXNoaW5nIHRvIHJlbW92ZSB0aGUgeW91bmcgbWFuIGVudGlyZWx5IGZyb20gdGhhdCBzdHlsZSBvZiBsaXZpbmcsIGhlIHRvb2sgaGltIG9mZiB0byBTcGFydGEgYW5kIHB1dCBoaW0gYW1vbmcgdGhlIHlvdXRocyB3aG8gd2VyZSBmb2xsb3dpbmcgdGhlIGNvdXJzZSBvZiBkaXNjaXBsaW5lIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YWdvZ2UuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCBpLiAxPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIGkuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgaS4gMTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdmV4ZWQgdGhlIEF0aGVuaWFucywgd2hvIHRob3VnaHQgdGhhdCBQaG9jaW9uIGRlc3Bpc2VkIGFuZCBsb29rZWQgZG93biB1cG9uIHRoZSBuYXRpdmUgY3VzdG9tcy4gQW5kIG9uY2UgRGVtYWRlcyBzYWlkIHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBob2Npb24sIHdoeSBzaG91bGRuJ3Qgd2UgdHJ5IHRvIHBlcnN1YWRlIHRoZSBBdGhlbmlhbnMgdG8gYWRvcHQgdGhlIFNwYXJ0YW4gcG9saXR5PyBGb3IgaWYgdGhvdSBzYXllc3QgdGhlIHdvcmQsIEkgYW0gcmVhZHkgdG8gaW50cm9kdWNlIGFuZCBzdXBwb3J0IHRoZSByZXF1aXNpdGUgbGF3LjwvcT4gQnV0IFBob2Npb24gcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCBpdCB3b3VsZCB2ZXJ5IHdlbGwgYmVjb21lIHRoZWUsIHdpdGggc28gc3Ryb25nIGEgc2NlbnQgb2Ygb2ludG1lbnQgdXBvbiB0aGVlLCBhbmQgd2VhcmluZyBzdWNoIGEgbWFudGxlIGFzIHRoaW5lLCB0byByZWNvbW1lbmQgdG8gdGhlIEF0aGVuaWFucyB0aGUgcHVibGljIG1lc3MtaGFsbHMgb2YgdGhlIFNwYXJ0YW5zLCBhbmQgdG8gZXh0b2wgTHljdXJndXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFsZXhhbmRlciB3cm90ZSBhc2tpbmcgdGhlIEF0aGVuaWFucyB0byBzZW5kIGhpbSB0cmlyZW1lcywgYW5kIHRoZSBvcmF0b3JzIG9wcG9zZWQgdGhlIHJlcXVlc3QsIGFuZCB0aGUgY291bmNpbCBiYWRlIFBob2Npb24gc3BlYWsgdXBvbiB0aGUgbWF0dGVyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgdGVsbCB5b3UsIHRoZW4sPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmVpdGhlciB0byBiZSBzdXBlcmlvciBpbiBhcm1zIG9yIHRvIGJlIGZyaWVuZHMgd2l0aCB0aG9zZSB3aG8gYXJlIHN1cGVyaW9yLjwvcT4gVG8gUHl0aGVhcywgd2hvIGF0IHRoYXQgdGltZSB3YXMganVzdCBiZWdpbm5pbmcgdG8gYWRkcmVzcyB0aGUgQXRoZW5pYW5zLCBidXQgd2FzIGFscmVhZHkgbG9xdWFjaW91cyBhbmQgYm9sZCwgUGhvY2lvbiBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvbGQgdGh5IHBlYWNlLCB0aG91IHdobyBhcnQgYnV0IGEgbmV3bHkgYm91Z2h0IHNsYXZlIG9mIHRoZSBwZW9wbGUhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEhhcnBhbHVzLCB3aG8gaGFkIHJ1biBhd2F5IGZyb20gQWxleGFuZGVyIG91dCBvZiBBc2lhIHdpdGggZ3JlYXQgc3VtcyBvZiBtb25leSwgbGFuZGVkIGluIEF0dGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGVtb3N0aGVuZXM8L3RpdGxlPiwgY2hhcHRlciB4eHY8L2JpYmw+Ljwvbm90ZT4gYW5kIHRob3NlIHdobyB3ZXJlIHdvbnQgdG8gbWFrZSBtZXJjaGFuZGlzZSBvZiB0aGVpciBpbmZsdWVuY2UgYXMgb3JhdG9ycyBjYW1lIHJ1bm5pbmcgdG8gaGltIGF0IGJyZWFrbmVjayBzcGVlZCwgdG8gdGhlc2UgbWVuIGhlIGRyb3BwZWQgYW5kIHNjYXR0ZXJlZCBzbWFsbCBtb3JzZWxzIG9mIGhpcyB3ZWFsdGggYnkgd2F5IG9mIGJhaXQ7IGJ1dCBoZSBzZW50IHRvIFBob2Npb24gYW5kIG9mZmVyZWQgaGltIHNldmVuIGh1bmRyZWQgdGFsZW50cywgYW5kIGV2ZXJ5dGhpbmcgZWxzZSB0aGF0IGhlIGhhZCwgYW5kIHB1dCBoaW1zZWxmIHdpdGggYWxsIGhpcyBwb3NzZXNzaW9ucyBhdCB0aGUgc29sZSBkaXNwb3NpdGlvbiBvZiBQaG9jaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGhvY2lvbiBhbnN3ZXJlZCBzaGFycGx5IHRoYXQgSGFycGFsdXMgd291bGQgcnVlIGl0IGlmIGhlIGRpZCBub3QgY2Vhc2UgdHJ5aW5nIHRvIGNvcnJ1cHQgdGhlIGNpdHksIGFuZCBmb3IgdGhlIHRpbWUgYmVpbmcgdGhlIHRyYWl0b3Igd2FzIGFiYXNoZWQgYW5kIGRlc2lzdGVkIGZyb20gaGlzIGVmZm9ydHMuIEFmdGVyIGEgbGl0dGxlLCBob3dldmVyLCB3aGVuIHRoZSBBdGhlbmlhbnMgd2VyZSBkZWxpYmVyYXRpbmcgdXBvbiBoaXMgY2FzZSwgaGUgZm91bmQgdGhhdCB0aG9zZSB3aG8gaGFkIHRha2VuIG1vbmV5IGZyb20gaGltIHdlcmUgY2hhbmdpbmcgc2lkZXMgYW5kIGRlbm91bmNpbmcgaGltLCB0aGF0IHRoZXkgbWlnaHQgbm90IGJlIGRpc2NvdmVyZWQ7IHdoaWxlIFBob2Npb24sIHdobyB3b3VsZCB0YWtlIG5vdGhpbmcsIHdhcyBub3cgZ2l2aW5nIHNvbWUgY29uc2lkZXJhdGlvbiB0byB0aGUgc2FmZXR5IG9mIEhhcnBhbHVzIGFzIHdlbGwgYXMgdG8gdGhlIHB1YmxpYyBpbnRlcmVzdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGVyZWZvcmUsIGhlIHdhcyBsZWQgdG8gcGF5IGNvdXJ0IHRvIFBob2Npb24sIGJ1dCBhZnRlciBhbGwgaGlzIGVmZm9ydHMgdG8gYnJpYmUgaGltIGZvdW5kIHRoYXQgaGUgd2FzIGltcHJlZ25hYmxlIG9uIGFsbCBzaWRlcyBsaWtlIGEgZm9ydHJlc3MuIE9mIENoYXJpY2xlcywgaG93ZXZlciwgUGhvY2lvbidzIHNvbi1pbi1sYXcsIEhhcnBhbHVzIG1hZGUgYW4gaW50aW1hdGUgYXNzb2NpYXRlIGFuZCBmcmllbmQsIHRydXN0aW5nIGhpbSBpbiBldmVyeXRoaW5nIGFuZCB1c2luZyBoaW0gaW4gZXZlcnl0aGluZywgYW5kIHRodXMgY292ZXJlZCBoaW0gd2l0aCBpbmZhbXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBBbGV4YW5kZXIgd3JvdGUgYXNraW5nIHRoZSBBdGhlbmlhbnMgdG8gc2VuZCBoaW0gdHJpcmVtZXMsIGFuZCB0aGUgb3JhdG9ycyBvcHBvc2VkIHRoZSByZXF1ZXN0LCBhbmQgdGhlIGNvdW5jaWwgYmFkZSBQaG9jaW9uIHNwZWFrIHVwb24gdGhlIG1hdHRlciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgdGVsbCB5b3UsIHRoZW4sPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZWl0aGVyIHRvIGJlIHN1cGVyaW9yIGluIGFybXMgb3IgdG8gYmUgZnJpZW5kcyB3aXRoIHRob3NlIHdobyBhcmUgc3VwZXJpb3IuPC9xPiBUbyBQeXRoZWFzLCB3aG8gYXQgdGhhdCB0aW1lIHdhcyBqdXN0IGJlZ2lubmluZyB0byBhZGRyZXNzIHRoZSBBdGhlbmlhbnMsIGJ1dCB3YXMgYWxyZWFkeSBsb3F1YWNpb3VzIGFuZCBib2xkLCBQaG9jaW9uIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ib2xkIHRoeSBwZWFjZSwgdGhvdSB3aG8gYXJ0IGJ1dCBhIG5ld2x5IGJvdWdodCBzbGF2ZSBvZiB0aGUgcGVvcGxlITwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEhhcnBhbHVzLCB3aG8gaGFkIHJ1biBhd2F5IGZyb20gQWxleGFuZGVyIG91dCBvZiBBc2lhIHdpdGggZ3JlYXQgc3VtcyBvZiBtb25leSwgbGFuZGVkIGluIEF0dGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtb3N0aGVuZXM8L3RpdGxlPiwgY2hhcHRlciB4eHY8L2JpYmw+Ljwvbm90ZT4gYW5kIHRob3NlIHdobyB3ZXJlIHdvbnQgdG8gbWFrZSBtZXJjaGFuZGlzZSBvZiB0aGVpciBpbmZsdWVuY2UgYXMgb3JhdG9ycyBjYW1lIHJ1bm5pbmcgdG8gaGltIGF0IGJyZWFrbmVjayBzcGVlZCwgdG8gdGhlc2UgbWVuIGhlIGRyb3BwZWQgYW5kIHNjYXR0ZXJlZCBzbWFsbCBtb3JzZWxzIG9mIGhpcyB3ZWFsdGggYnkgd2F5IG9mIGJhaXQ7IGJ1dCBoZSBzZW50IHRvIFBob2Npb24gYW5kIG9mZmVyZWQgaGltIHNldmVuIGh1bmRyZWQgdGFsZW50cywgYW5kIGV2ZXJ5dGhpbmcgZWxzZSB0aGF0IGhlIGhhZCwgYW5kIHB1dCBoaW1zZWxmIHdpdGggYWxsIGhpcyBwb3NzZXNzaW9ucyBhdCB0aGUgc29sZSBkaXNwb3NpdGlvbiBvZiBQaG9jaW9uLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXIgeHh2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lczwvdGl0bGU+LCBjaGFwdGVyIHh4djwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQaG9jaW9uIGFuc3dlcmVkIHNoYXJwbHkgdGhhdCBIYXJwYWx1cyB3b3VsZCBydWUgaXQgaWYgaGUgZGlkIG5vdCBjZWFzZSB0cnlpbmcgdG8gY29ycnVwdCB0aGUgY2l0eSwgYW5kIGZvciB0aGUgdGltZSBiZWluZyB0aGUgdHJhaXRvciB3YXMgYWJhc2hlZCBhbmQgZGVzaXN0ZWQgZnJvbSBoaXMgZWZmb3J0cy4gQWZ0ZXIgYSBsaXR0bGUsIGhvd2V2ZXIsIHdoZW4gdGhlIEF0aGVuaWFucyB3ZXJlIGRlbGliZXJhdGluZyB1cG9uIGhpcyBjYXNlLCBoZSBmb3VuZCB0aGF0IHRob3NlIHdobyBoYWQgdGFrZW4gbW9uZXkgZnJvbSBoaW0gd2VyZSBjaGFuZ2luZyBzaWRlcyBhbmQgZGVub3VuY2luZyBoaW0sIHRoYXQgdGhleSBtaWdodCBub3QgYmUgZGlzY292ZXJlZDsgd2hpbGUgUGhvY2lvbiwgd2hvIHdvdWxkIHRha2Ugbm90aGluZywgd2FzIG5vdyBnaXZpbmcgc29tZSBjb25zaWRlcmF0aW9uIHRvIHRoZSBzYWZldHkgb2YgSGFycGFsdXMgYXMgd2VsbCBhcyB0byB0aGUgcHVibGljIGludGVyZXN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGVyZWZvcmUsIGhlIHdhcyBsZWQgdG8gcGF5IGNvdXJ0IHRvIFBob2Npb24sIGJ1dCBhZnRlciBhbGwgaGlzIGVmZm9ydHMgdG8gYnJpYmUgaGltIGZvdW5kIHRoYXQgaGUgd2FzIGltcHJlZ25hYmxlIG9uIGFsbCBzaWRlcyBsaWtlIGEgZm9ydHJlc3MuIE9mIENoYXJpY2xlcywgaG93ZXZlciwgUGhvY2lvbidzIHNvbi1pbi1sYXcsIEhhcnBhbHVzIG1hZGUgYW4gaW50aW1hdGUgYXNzb2NpYXRlIGFuZCBmcmllbmQsIHRydXN0aW5nIGhpbSBpbiBldmVyeXRoaW5nIGFuZCB1c2luZyBoaW0gaW4gZXZlcnl0aGluZywgYW5kIHRodXMgY292ZXJlZCBoaW0gd2l0aCBpbmZhbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgb24gdGhlIGRlYXRoIG9mIFB5dGhvbmljw6kgdGhlIGNvdXJ0ZXNhbiwgd2hvIHdhcyB0aGUgcGFzc2lvbmF0ZWx5IGxvdmVkIG1pc3RyZXNzIG9mIEhhcnBhbHVzIGFuZCBoYWQgYm9ybmUgaGltIGEgZGF1Z2h0ZXIsIEhhcnBhbHVzIHJlc29sdmVkIHRvIGJ1aWxkIGhlciBhIHZlcnkgZXhwZW5zaXZlIG1vbnVtZW50LCBhbmQgY29tbWl0dGVkIHRoZSBjYXJlIG9mIHRoZSB3b3JrIHRvIENoYXJpY2xlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzZXJ2aWNlIHdhcyBhbiBpZ25vYmxlIG9uZSBpbiBpdHNlbGYsIGJ1dCBpdCBhY3F1aXJlZCBhZGRpdGlvbmFsIGRpc2dyYWNlIGZyb20gdGhlIGNvbXBsZXRlZCB0b21iLiBGb3IgdGhpcyBpcyBzdGlsbCB0byBiZSBzZWVuIGluIEhlcm11cywgb24gdGhlIHJvYWQgZnJvbSBBdGhlbnMgdG8gRWxldXNpcywgYW5kIGl0IGhhcyBub3RoaW5nIHdvcnRoeSBvZiB0aGUgbGFyZ2Ugc3VtIG9mIHRoaXJ0eSB0YWxlbnRzIHdoaWNoIENoYXJpY2xlcyBpcyBzYWlkIHRvIGhhdmUgY2hhcmdlZCBIYXJwYWx1cyBmb3IgdGhlIHdvcmsuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjM3LjUiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaS4gMzcsIDU8L2JpYmw+LCB3aXRoIEZyYXplcidzIG5vdGVzLiBQYXVzYW5pYXMgc3BlYWtzIG9mIGl0IGFzIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBiZXN0IHdvcnRoIHNlZWluZyBvZiBhbGwgYW5jaWVudCBHcmVlayB0b21icy48L3E+CiAgICAgICAgICAgIDwvbm90ZT5BbmQgeWV0IGFmdGVyIHRoZSBkZWF0aCBvZiBIYXJwYWx1cyBoaW1zZWxmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlwYXRlciBkZW1hbmRlZCBoaXMgc3VycmVuZGVyIGJ5IHRoZSBBdGhlbmlhbnMsIGFuZCBIYXJwYWx1cyBmbGVkIHRvIENyZXRlLCB3aGVyZSBoZSB3YXMgYXNzYXNzaW5hdGVkLjwvbm90ZT4gaGlzIGRhdWdodGVyIHdhcyB0YWtlbiB1cCBieSBDaGFyaWNsZXMgYW5kIFBob2Npb24gYW5kIGVkdWNhdGVkIHdpdGggZXZlcnkgY2FyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiBDaGFyaWNsZXMgd2FzIGJyb3VnaHQgdG8gdHJpYWwgZm9yIGhpcyBkZWFsaW5ncyB3aXRoIEhhcnBhbHVzLCBhbmQgYmVnZ2VkIFBob2Npb24gdG8gaGVscCBoaW0gYW5kIGdvIHdpdGggaGltIGludG8gdGhlIGNvdXJ0LXJvb20sIFBob2Npb24gcmVmdXNlZCwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgbWFkZSB0aGVlIG15IHNvbi1pbi1sYXcsIENoYXJpY2xlcywgZm9yIG5vbmUgYnV0IGp1c3QgcHVycG9zZXMuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCBvbiB0aGUgZGVhdGggb2YgUHl0aG9uaWPDqSB0aGUgY291cnRlc2FuLCB3aG8gd2FzIHRoZSBwYXNzaW9uYXRlbHkgbG92ZWQgbWlzdHJlc3Mgb2YgSGFycGFsdXMgYW5kIGhhZCBib3JuZSBoaW0gYSBkYXVnaHRlciwgSGFycGFsdXMgcmVzb2x2ZWQgdG8gYnVpbGQgaGVyIGEgdmVyeSBleHBlbnNpdmUgbW9udW1lbnQsIGFuZCBjb21taXR0ZWQgdGhlIGNhcmUgb2YgdGhlIHdvcmsgdG8gQ2hhcmljbGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc2VydmljZSB3YXMgYW4gaWdub2JsZSBvbmUgaW4gaXRzZWxmLCBidXQgaXQgYWNxdWlyZWQgYWRkaXRpb25hbCBkaXNncmFjZSBmcm9tIHRoZSBjb21wbGV0ZWQgdG9tYi4gRm9yIHRoaXMgaXMgc3RpbGwgdG8gYmUgc2VlbiBpbiBIZXJtdXMsIG9uIHRoZSByb2FkIGZyb20gQXRoZW5zIHRvIEVsZXVzaXMsIGFuZCBpdCBoYXMgbm90aGluZyB3b3J0aHkgb2YgdGhlIGxhcmdlIHN1bSBvZiB0aGlydHkgdGFsZW50cyB3aGljaCBDaGFyaWNsZXMgaXMgc2FpZCB0byBoYXZlIGNoYXJnZWQgSGFycGFsdXMgZm9yIHRoZSB3b3JrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuMzcuNSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpLiAzNywgNTwvYmlibD4sIHdpdGggRnJhemVyJ3Mgbm90ZXMuIFBhdXNhbmlhcyBzcGVha3Mgb2YgaXQgYXMgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgYmVzdCB3b3J0aCBzZWVpbmcgb2YgYWxsIGFuY2llbnQgR3JlZWsgdG9tYnMuPC9xPgogICAgICAgICAgICA8L25vdGU+QW5kIHlldCBhZnRlciB0aGUgZGVhdGggb2YgSGFycGFsdXMgaGltc2VsZiw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjM3LjUiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgaS4gMzcsIDU8L2JpYmw+LCB3aXRoIEZyYXplcidzIG5vdGVzLiBQYXVzYW5pYXMgc3BlYWtzIG9mIGl0IGFzIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGJlc3Qgd29ydGggc2VlaW5nIG9mIGFsbCBhbmNpZW50IEdyZWVrIHRvbWJzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbnRpcGF0ZXIgZGVtYW5kZWQgaGlzIHN1cnJlbmRlciBieSB0aGUgQXRoZW5pYW5zLCBhbmQgSGFycGFsdXMgZmxlZCB0byBDcmV0ZSwgd2hlcmUgaGUgd2FzIGFzc2Fzc2luYXRlZC48L25vdGU+IGhpcyBkYXVnaHRlciB3YXMgdGFrZW4gdXAgYnkgQ2hhcmljbGVzIGFuZCBQaG9jaW9uIGFuZCBlZHVjYXRlZCB3aXRoIGV2ZXJ5IGNhcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gQ2hhcmljbGVzIHdhcyBicm91Z2h0IHRvIHRyaWFsIGZvciBoaXMgZGVhbGluZ3Mgd2l0aCBIYXJwYWx1cywgYW5kIGJlZ2dlZCBQaG9jaW9uIHRvIGhlbHAgaGltIGFuZCBnbyB3aXRoIGhpbSBpbnRvIHRoZSBjb3VydC1yb29tLCBQaG9jaW9uIHJlZnVzZWQsIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgbWFkZSB0aGVlIG15IHNvbi1pbi1sYXcsIENoYXJpY2xlcywgZm9yIG5vbmUgYnV0IGp1c3QgcHVycG9zZXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFzY2xlcGlhZGVzIHRoZSBzb24gb2YgSGlwcGFyY2h1cyB3YXMgdGhlIGZpcnN0IG9uZSB0byBicmluZyB0byB0aGUgQXRoZW5pYW5zIHRoZSB0aWRpbmdzIHRoYXQgQWxleGFuZGVyIHdhcyBkZWFkLiBUaGVyZXVwb24gRGVtYWRlcyB1cmdlZCB0aGVtIHRvIHBheSBubyBoZWVkIHRvIHRoZSByZXBvcnQsIHNpbmNlLCBoYWQgaXQgYmVlbiB0cnVlLCB0aGUgd2hvbGUgZWFydGggd291bGQgbG9uZyBhZ28gaGF2ZSBiZWVuIGZpbGxlZCB3aXRoIHRoZSBzdGVuY2ggb2YgdGhlIGJvZHkuIEJ1dCBQaG9jaW9uLCB3aG8gc2F3IHRoYXQgdGhlIHBlb3BsZSB3ZXJlIGJlbnQgb24gcmV2b2x1dGlvbiwgdHJpZWQgdG8gZGlzc3VhZGUgdGhlbSBhbmQgcmVzdHJhaW4gdGhlbS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBtYW55IG9mIHRoZW0gc3ByYW5nIHRvd2FyZHMgdGhlIGJlbWEsIGFuZCBzaG91dGVkIHRoYXQgdGhlIHRpZGluZ3MgYnJvdWdodCBieSBBc2NsZXBpYWRlcyB3ZXJlIHRydWUgYW5kIHRoYXQgQWxleGFuZGVyIHdhcyBkZWFkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgaGUgaXMgZGVhZCB0by1kYXksIGhlIHdpbGwgYmUgZGVhZCB0by1tb3Jyb3cgYW5kIHRoZSBkYXkgYWZ0ZXIuIFRoZXJlZm9yZSB3ZSBjYW4gZGVsaWJlcmF0ZSBpbiBxdWlldCwgYW5kIHdpdGggZ3JlYXRlciBzYWZldHkuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIG1hbnkgb2YgdGhlbSBzcHJhbmcgdG93YXJkcyB0aGUgYmVtYSwgYW5kIHNob3V0ZWQgdGhhdCB0aGUgdGlkaW5ncyBicm91Z2h0IGJ5IEFzY2xlcGlhZGVzIHdlcmUgdHJ1ZSBhbmQgdGhhdCBBbGV4YW5kZXIgd2FzIGRlYWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCB0aGVuLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgaGUgaXMgZGVhZCB0by1kYXksIGhlIHdpbGwgYmUgZGVhZCB0by1tb3Jyb3cgYW5kIHRoZSBkYXkgYWZ0ZXIuIFRoZXJlZm9yZSB3ZSBjYW4gZGVsaWJlcmF0ZSBpbiBxdWlldCwgYW5kIHdpdGggZ3JlYXRlciBzYWZldHkuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5MZW9zdGhlbmVzLCB3aG8gaGFkIHBsdW5nZWQgdGhlIGNpdHkgaW50byB0aGUgTGFtaWFuIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjMyMy0zMjIgQi5DLiBTbyBuYW1lZCBiZWNhdXNlIHRoZSBjb25mZWRlcmF0ZSBHcmVla3MgaGVsZCBBbnRpcGF0ZXIgYW5kIGhpcyBmb3JjZXMgZm9yIHNvbWUgdGltZSBiZXNpZWdlZCBpbiBMYW1pYSwgYSBjaXR5IG9mIFMuIEUuIFRoZXNzYWx5ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMjMuNCIgdmFsaWQ9InllcyI+wqcgNDwvYmlibD4pLjwvbm90ZT4gbXVjaCB0byBQaG9jaW9uJ3MgZGlzcGxlYXN1cmUsIG9uY2UgYXNrZWQgaGltIGRlcmlzaXZlbHkgd2hhdCBnb29kIGhlIGhhZCBkb25lIHRoZSBjaXR5IGR1cmluZyB0aGUgbWFueSB5ZWFycyBpbiB3aGljaCBoZSBoYWQgYmVlbiBnZW5lcmFsLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vIHNsaWdodCBnb29kLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluIHRoYXQgaXRzIGNpdGl6ZW5zIGFyZSBidXJpZWQgaW4gdGhlaXIgb3duIHNlcHVsY2hyZXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIExlb3N0aGVuZXMgd2FzIHRhbGtpbmcgdmVyeSBib2xkbHkgYW5kIGJvYXN0ZnVsbHkgaW4gdGhlIGFzc2VtYmx5LCBQaG9jaW9uIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh5IHNwZWVjaGVzLCB5b3VuZyBtYW4sIGFyZSBsaWtlIGN5cHJlc3MtdHJlZXMsIHdoaWNoIGFyZSBsYXJnZSBhbmQgdG93ZXJpbmcsIGJ1dCBiZWFyIG5vIGZydWl0LjwvcT4gQW5kIHdoZW4gSHlwZXJlaWRlcyBjb25mcm9udGVkIGhpbSB3aXRoIHRoZSBxdWVzdGlvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuLCB0aGVuLCBPIFBob2Npb24sIHdpbHQgdGhvdSBjb3Vuc2VsIHRoZSBBdGhlbmlhbnMgdG8gZ28gdG8gd2FyPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW5ldmVyLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2VlIHRoZSB5b3VuZyBtZW4gd2lsbGluZyB0byBob2xkIHRoZWlyIHBsYWNlcyBpbiB0aGUgcmFua3MsIHRoZSByaWNoIHRvIG1ha2UgY29udHJpYnV0aW9ucywgYW5kIHRoZSBvcmF0b3JzIHRvIGtlZXAgdGhlaXIgdGhpZXZpc2ggaGFuZHMgYXdheSBmcm9tIHRoZSBwdWJsaWMgbW9uZXlzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TGVvc3RoZW5lcywgd2hvIGhhZCBwbHVuZ2VkIHRoZSBjaXR5IGludG8gdGhlIExhbWlhbiB3YXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjMyMy0zMjIgQi5DLiBTbyBuYW1lZCBiZWNhdXNlIHRoZSBjb25mZWRlcmF0ZSBHcmVla3MgaGVsZCBBbnRpcGF0ZXIgYW5kIGhpcyBmb3JjZXMgZm9yIHNvbWUgdGltZSBiZXNpZWdlZCBpbiBMYW1pYSwgYSBjaXR5IG9mIFMuIEUuIFRoZXNzYWx5ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaG9jLiAyMy40IiB2YWxpZD0ieWVzIj7CpyA0PC9iaWJsPikuPC9ub3RlPiBtdWNoIHRvIFBob2Npb24ncyBkaXNwbGVhc3VyZSwgb25jZSBhc2tlZCBoaW0gZGVyaXNpdmVseSB3aGF0IGdvb2QgaGUgaGFkIGRvbmUgdGhlIGNpdHkgZHVyaW5nIHRoZSBtYW55IHllYXJzIGluIHdoaWNoIGhlIGhhZCBiZWVuIGdlbmVyYWwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMjMuNCIgdmFsaWQ9InllcyI+wqcgNDwvYmlibD4pLjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm8gc2xpZ2h0IGdvb2QsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbiB0aGF0IGl0cyBjaXRpemVucyBhcmUgYnVyaWVkIGluIHRoZWlyIG93biBzZXB1bGNocmVzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIExlb3N0aGVuZXMgd2FzIHRhbGtpbmcgdmVyeSBib2xkbHkgYW5kIGJvYXN0ZnVsbHkgaW4gdGhlIGFzc2VtYmx5LCBQaG9jaW9uIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHkgc3BlZWNoZXMsIHlvdW5nIG1hbiwgYXJlIGxpa2UgY3lwcmVzcy10cmVlcywgd2hpY2ggYXJlIGxhcmdlIGFuZCB0b3dlcmluZywgYnV0IGJlYXIgbm8gZnJ1aXQuPC9xPiBBbmQgd2hlbiBIeXBlcmVpZGVzIGNvbmZyb250ZWQgaGltIHdpdGggdGhlIHF1ZXN0aW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiwgdGhlbiwgTyBQaG9jaW9uLCB3aWx0IHRob3UgY291bnNlbCB0aGUgQXRoZW5pYW5zIHRvIGdvIHRvIHdhcj88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW5ldmVyLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzZWUgdGhlIHlvdW5nIG1lbiB3aWxsaW5nIHRvIGhvbGQgdGhlaXIgcGxhY2VzIGluIHRoZSByYW5rcywgdGhlIHJpY2ggdG8gbWFrZSBjb250cmlidXRpb25zLCBhbmQgdGhlIG9yYXRvcnMgdG8ga2VlcCB0aGVpciB0aGlldmlzaCBoYW5kcyBhd2F5IGZyb20gdGhlIHB1YmxpYyBtb25leXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIG1hbnkgd2VyZSBhZG1pcmluZyB0aGUgZm9yY2UgZ290IHRvZ2V0aGVyIGJ5IExlb3N0aGVuZXMsIGFuZCB3ZXJlIGFza2luZyBQaG9jaW9uIHdoYXQgaGUgdGhvdWdodCBvZiB0aGUgY2l0eSdzIHByZXBhcmF0aW9ucywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGV5IGFyZSBnb29kLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgdGhlIHNob3J0IGNvdXJzZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2hvcnQgY291cnNlIGluIHRoZSBmb290LXJhY2VzIHdhcyBzdHJhaWdodCBhd2F5LCB0aGUgbGVuZ3RoIG9mIHRoZSBzdGFkaXVtOyB0aGUgbG9uZyBjb3Vyc2Ugd2FzIHRlbiB0aW1lcyBiYWNrIGFuZCBmb3J0aC48L25vdGU+IGJ1dCBpdCBpcyB0aGUgbG9uZyBjb3Vyc2Ugd2hpY2ggSSBmZWFyIGluIHRoZSB3YXIsIHNpbmNlIHRoZSBjaXR5IGhhcyBubyBvdGhlciBtb25leXMsIG9yIHNoaXBzLCBvciBtZW4tYXQtYXJtcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGV2ZW50cyBqdXN0aWZpZWQgaGlzIGZlYXIuIEZvciBhdCBmaXJzdCBMZW9zdGhlbmVzIGFjaGlldmVkIGJyaWxsaWFudCBzdWNjZXNzZXMsIGNvbnF1ZXJpbmcgdGhlIEJvZW90aWFucyBpbiBiYXR0bGUsIGFuZCBkcml2aW5nIEFudGlwYXRlciBpbnRvIExhbWlhLiBUaGVuLCB0b28sIHRoZXkgc2F5IHRoYXQgdGhlIGNpdHkgY2FtZSB0byBjaGVyaXNoIGhpZ2ggaG9wZXMsIGFuZCB3YXMgY29udGludW91c2x5IGhvbGRpbmcgZmVzdGl2YWxzIGFuZCBtYWtpbmcgc2FjcmlmaWNlcyBvZiBnbGFkIHRpZGluZ3MuIFBob2Npb24sIGhvd2V2ZXIsIHdoZW4gbWVuIHRob3VnaHQgdG8gY29udmljdCBoaW0gb2YgZXJyb3IgYW5kIGFza2VkIGhpbSBpZiBoZSB3b3VsZCBub3QgaGF2ZSBiZWVuIGdsYWQgdG8gaGF2ZSBwZXJmb3JtZWQgdGhlc2UgZXhwbG9pdHMsIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgYWxsIG1lYW5zOyBidXQgSSBhbSBnbGFkIHRvIGhhdmUgZ2l2ZW4gdGhlIGFkdmljZSBJIGRpZC48L3E+IEFuZCBhZ2Fpbiwgd2hlbiBnbGFkIHRpZGluZ3MgY2FtZSBpbiBxdWljayBzdWNjZXNzaW9uIGJ5IGxldHRlciBhbmQgbWVzc2VuZ2VyIGZyb20gdGhlIGNhbXAsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiwgcHJheSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2lsbCBvdXIgdmljdG9yaWVzIGNlYXNlPzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gbWFueSB3ZXJlIGFkbWlyaW5nIHRoZSBmb3JjZSBnb3QgdG9nZXRoZXIgYnkgTGVvc3RoZW5lcywgYW5kIHdlcmUgYXNraW5nIFBob2Npb24gd2hhdCBoZSB0aG91Z2h0IG9mIHRoZSBjaXR5J3MgcHJlcGFyYXRpb25zLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhleSBhcmUgZ29vZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgdGhlIHNob3J0IGNvdXJzZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzaG9ydCBjb3Vyc2UgaW4gdGhlIGZvb3QtcmFjZXMgd2FzIHN0cmFpZ2h0IGF3YXksIHRoZSBsZW5ndGggb2YgdGhlIHN0YWRpdW07IHRoZSBsb25nIGNvdXJzZSB3YXMgdGVuIHRpbWVzIGJhY2sgYW5kIGZvcnRoLjwvbm90ZT4gYnV0IGl0IGlzIHRoZSBsb25nIGNvdXJzZSB3aGljaCBJIGZlYXIgaW4gdGhlIHdhciwgc2luY2UgdGhlIGNpdHkgaGFzIG5vIG90aGVyIG1vbmV5cywgb3Igc2hpcHMsIG9yIG1lbi1hdC1hcm1zLjwvcT4gCgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNob3J0IGNvdXJzZSBpbiB0aGUgZm9vdC1yYWNlcyB3YXMgc3RyYWlnaHQgYXdheSwgdGhlIGxlbmd0aCBvZiB0aGUgc3RhZGl1bTsgdGhlIGxvbmcgY291cnNlIHdhcyB0ZW4gdGltZXMgYmFjayBhbmQgZm9ydGguPC9ub3RlPiBidXQgaXQgaXMgdGhlIGxvbmcgY291cnNlIHdoaWNoIEkgZmVhciBpbiB0aGUgd2FyLCBzaW5jZSB0aGUgY2l0eSBoYXMgbm8gb3RoZXIgbW9uZXlzLCBvciBzaGlwcywgb3IgbWVuLWF0LWFybXMuPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVudHMganVzdGlmaWVkIGhpcyBmZWFyLiBGb3IgYXQgZmlyc3QgTGVvc3RoZW5lcyBhY2hpZXZlZCBicmlsbGlhbnQgc3VjY2Vzc2VzLCBjb25xdWVyaW5nIHRoZSBCb2VvdGlhbnMgaW4gYmF0dGxlLCBhbmQgZHJpdmluZyBBbnRpcGF0ZXIgaW50byBMYW1pYS4gVGhlbiwgdG9vLCB0aGV5IHNheSB0aGF0IHRoZSBjaXR5IGNhbWUgdG8gY2hlcmlzaCBoaWdoIGhvcGVzLCBhbmQgd2FzIGNvbnRpbnVvdXNseSBob2xkaW5nIGZlc3RpdmFscyBhbmQgbWFraW5nIHNhY3JpZmljZXMgb2YgZ2xhZCB0aWRpbmdzLiBQaG9jaW9uLCBob3dldmVyLCB3aGVuIG1lbiB0aG91Z2h0IHRvIGNvbnZpY3QgaGltIG9mIGVycm9yIGFuZCBhc2tlZCBoaW0gaWYgaGUgd291bGQgbm90IGhhdmUgYmVlbiBnbGFkIHRvIGhhdmUgcGVyZm9ybWVkIHRoZXNlIGV4cGxvaXRzLCByZXBsaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnkgYWxsIG1lYW5zOyBidXQgSSBhbSBnbGFkIHRvIGhhdmUgZ2l2ZW4gdGhlIGFkdmljZSBJIGRpZC48L3E+IEFuZCBhZ2Fpbiwgd2hlbiBnbGFkIHRpZGluZ3MgY2FtZSBpbiBxdWljayBzdWNjZXNzaW9uIGJ5IGxldHRlciBhbmQgbWVzc2VuZ2VyIGZyb20gdGhlIGNhbXAsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuLCBwcmF5LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndpbGwgb3VyIHZpY3RvcmllcyBjZWFzZT88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMZW9zdGhlbmVzIHdhcyBraWxsZWQsIGFuZCB0aGVuIHRob3NlIHdobyBmZWFyZWQgdGhhdCBQaG9jaW9uLCBpZiBoZSB3ZXJlIHNlbnQgb3V0IGFzIGdlbmVyYWwsIHdvdWxkIHB1dCBhIHN0b3AgdG8gdGhlIHdhciwgYXJyYW5nZWQgd2l0aCBhIGNlcnRhaW4gb2JzY3VyZSBwZXJzb24gdG8gcmlzZSBpbiB0aGUgYXNzZW1ibHkgYW5kIHNheSB0aGF0IGhlIHdhcyBhIGZyaWVuZCBhbmQgaW50aW1hdGUgYXNzb2NpYXRlIG9mIFBob2Npb24sIGFuZCB0aGVyZWZvcmUgYWR2aXNlZCB0aGUgcGVvcGxlIHRvIHNwYXJlIGhpbSBhbmQga2VlcCBoaW0gaW4gcmVzZXJ2ZSwgc2luY2UgdGhleSBoYWQgbm9uZSBvdGhlciBsaWtlIGhpbSwgYW5kIHRvIHNlbmQgb3V0IEFudGlwaGlsdXMgdG8gdGhlIGFybXkuIFRoaXMgY291cnNlIHdhcyBhcHByb3ZlZCBieSB0aGUgQXRoZW5pYW5zLCB3aGVyZXVwb24gUGhvY2lvbiBjYW1lIGZvcndhcmQgYW5kIHNhaWQgdGhhdCBoZSBoYWQgbmV2ZXIgYmVlbiBpbnRpbWF0ZWx5IGFzc29jaWF0ZWQgd2l0aCB0aGUgcGVyc29uLCBub3IgaW4gYW55IHdheSBmYW1pbGlhciBvciBhY3F1YWludGVkIHdpdGggaGltOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IG5vdyw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnJvbSB0aGlzIHZlcnkgZGF5IEkgbWFrZSB0aGVlIGEgZnJpZW5kIGFuZCBjbG9zZSBjb21wYW5pb24sIGZvciB0aG91IGhhc3QgY291bnNlbGxlZCB3aGF0IHdhcyBmb3IgbXkgYWR2YW50YWdlLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IExlb3N0aGVuZXMgd2FzIGtpbGxlZCwgYW5kIHRoZW4gdGhvc2Ugd2hvIGZlYXJlZCB0aGF0IFBob2Npb24sIGlmIGhlIHdlcmUgc2VudCBvdXQgYXMgZ2VuZXJhbCwgd291bGQgcHV0IGEgc3RvcCB0byB0aGUgd2FyLCBhcnJhbmdlZCB3aXRoIGEgY2VydGFpbiBvYnNjdXJlIHBlcnNvbiB0byByaXNlIGluIHRoZSBhc3NlbWJseSBhbmQgc2F5IHRoYXQgaGUgd2FzIGEgZnJpZW5kIGFuZCBpbnRpbWF0ZSBhc3NvY2lhdGUgb2YgUGhvY2lvbiwgYW5kIHRoZXJlZm9yZSBhZHZpc2VkIHRoZSBwZW9wbGUgdG8gc3BhcmUgaGltIGFuZCBrZWVwIGhpbSBpbiByZXNlcnZlLCBzaW5jZSB0aGV5IGhhZCBub25lIG90aGVyIGxpa2UgaGltLCBhbmQgdG8gc2VuZCBvdXQgQW50aXBoaWx1cyB0byB0aGUgYXJteS4gVGhpcyBjb3Vyc2Ugd2FzIGFwcHJvdmVkIGJ5IHRoZSBBdGhlbmlhbnMsIHdoZXJldXBvbiBQaG9jaW9uIGNhbWUgZm9yd2FyZCBhbmQgc2FpZCB0aGF0IGhlIGhhZCBuZXZlciBiZWVuIGludGltYXRlbHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwZXJzb24sIG5vciBpbiBhbnkgd2F5IGZhbWlsaWFyIG9yIGFjcXVhaW50ZWQgd2l0aCBoaW07IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBub3csPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZnJvbSB0aGlzIHZlcnkgZGF5IEkgbWFrZSB0aGVlIGEgZnJpZW5kIGFuZCBjbG9zZSBjb21wYW5pb24sIGZvciB0aG91IGhhc3QgY291bnNlbGxlZCB3aGF0IHdhcyBmb3IgbXkgYWR2YW50YWdlLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2Fpbiwgd2hlbiB0aGUgQXRoZW5pYW5zIHdlcmUgYmVudCBvbiBtYWtpbmcgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBCb2VvdGlhbnMsIGF0IGZpcnN0IGhlIG9wcG9zZWQgaXQ7IGFuZCB3aGVuIGhpcyBmcmllbmRzIHRvbGQgaGltIHRoYXQgaGUgd291bGQgYmUgcHV0IHRvIGRlYXRoIGJ5IHRoZSBBdGhlbmlhbnMgaWYgaGUgb2ZmZW5kZWQgdGhlbSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgd2lsbCBiZSB1bmp1c3QsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgSSBhY3QgZm9yIHRoZWlyIGFkdmFudGFnZTsgYnV0IGlmIEkgcGxheSB0aGVtIGZhbHNlLCBpdCB3aWxsIGJlIGp1c3QuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcywgaG93ZXZlciwgc2VlaW5nIHRoYXQgdGhleSB3b3VsZCBub3QgZGVzaXN0LCBidXQgY29udGludWVkIHRoZWlyIGNsYW1vdXIsIGhlIG9yZGVyZWQgdGhlIGhlcmFsZCB0byBtYWtlIHByb2NsYW1hdGlvbiB0aGF0IGV2ZXJ5IG1hbiBpbiBBdGhlbnMgdW5kZXIgc2l4dHkgeWVhcnMgb2YgYWdlIHNob3VsZCB0YWtlIHByb3Zpc2lvbnMgZm9yIGZpdmUgZGF5cyBhbmQgZm9sbG93IGhpbSBhdCBvbmNlIGZyb20gdGhlIGFzc2VtYmx5LiBUaGVyZXVwb24gYSBncmVhdCB0dW11bHQgYXJvc2UsIHRoZSBlbGRlcmx5IG1lbiBsZWFwaW5nIHRvIHRoZWlyIGZlZXQgYW5kIHNob3V0aW5nIHRoZWlyIGRpc3NlbnQuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgbm8gaGFyZHNoaXAsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIEkgd2hvIGFtIHRvIGJlIHlvdXIgZ2VuZXJhbCBhbSBpbiBteSBlaWdodGlldGggeWVhci48L3E+IEZvciB0aGUgdGltZSBiZWluZyB0aGlzIGNoZWNrZWQgdGhlbSBhbmQgY2hhbmdlZCB0aGVpciBwdXJwb3NlLgoJCQk8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhhdCB3aWxsIGJlIHVuanVzdCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiBJIGFjdCBmb3IgdGhlaXIgYWR2YW50YWdlOyBidXQgaWYgSSBwbGF5IHRoZW0gZmFsc2UsIGl0IHdpbGwgYmUganVzdC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMsIGhvd2V2ZXIsIHNlZWluZyB0aGF0IHRoZXkgd291bGQgbm90IGRlc2lzdCwgYnV0IGNvbnRpbnVlZCB0aGVpciBjbGFtb3VyLCBoZSBvcmRlcmVkIHRoZSBoZXJhbGQgdG8gbWFrZSBwcm9jbGFtYXRpb24gdGhhdCBldmVyeSBtYW4gaW4gQXRoZW5zIHVuZGVyIHNpeHR5IHllYXJzIG9mIGFnZSBzaG91bGQgdGFrZSBwcm92aXNpb25zIGZvciBmaXZlIGRheXMgYW5kIGZvbGxvdyBoaW0gYXQgb25jZSBmcm9tIHRoZSBhc3NlbWJseS4gVGhlcmV1cG9uIGEgZ3JlYXQgdHVtdWx0IGFyb3NlLCB0aGUgZWxkZXJseSBtZW4gbGVhcGluZyB0byB0aGVpciBmZWV0IGFuZCBzaG91dGluZyB0aGVpciBkaXNzZW50LiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgbm8gaGFyZHNoaXAsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgSSB3aG8gYW0gdG8gYmUgeW91ciBnZW5lcmFsIGFtIGluIG15IGVpZ2h0aWV0aCB5ZWFyLjwvcT4gRm9yIHRoZSB0aW1lIGJlaW5nIHRoaXMgY2hlY2tlZCB0aGVtIGFuZCBjaGFuZ2VkIHRoZWlyIHB1cnBvc2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlaXIgc2VhLWNvYXN0IHdhcyBiZWluZyBkZXZhc3RhdGVkIGJ5IE1pY2lvbiwgd2hvIGxhbmRlZCBhdCBSaGFtbnVzIHdpdGggYSBob3JkZSBvZiBNYWNlZG9uaWFucyBhbmQgbWVyY2VuYXJpZXMgYW5kIG92ZXJyYW4gdGhlIGFkamFjZW50IHRlcnJpdG9yeSwgUGhvY2lvbiBsZWQgdGhlIEF0aGVuaWFucyBvdXQgYWdhaW5zdCBoaW0uIEFuZCBhcyB0aGV5IG1hcmNoZWQsIG1lbiB3b3VsZCBydW4gdXAgdG8gdGhlaXIgZ2VuZXJhbCBmcm9tIGFsbCBzaWRlcyBhbmQgc2hvdyBoaW0gd2hhdCB0byBkby4gSGUgd2FzIGFkdmlzZWQgdG8gc2VpemUgYSBoaWxsIGhlcmUsIHRvIHNlbmQgaGlzIGhvcnNlbWVuIGFyb3VuZCB0aGl0aGVyLCBvciB0byBtYWtlIGhpcyBhdHRhY2sgdXBvbiB0aGUgZW5lbXkgdGhlcmUuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBIZXJhY2xlcyw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ob3cgbWFueSBnZW5lcmFscyBJIHNlZSwgYW5kIGhvdyBmZXcgc29sZGllcnMhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBhZnRlciBoZSBoYWQgZHJhd24gdXAgaGlzIG1lbi1hdC1hcm1zLCBvbmUgb2YgdGhlbSB3ZW50IG91dCBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgcmVzdCwgYW5kIHRoZW4gd2FzIHN0cmlja2VuIHdpdGggZmVhciB3aGVuIGFuIGVuZW15IGFkdmFuY2VkIHRvIG1lZXQgaGltLCBhbmQgd2VudCBiYWNrIGFnYWluIHRvIGhpcyBwb3N0LiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNoYW1lIG9uIHRoZWUsIHlvdW5nIG1hbiw8L3E+IHNhaWQgUGhvY2lvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IgaGF2aW5nIGFiYW5kb25lZCB0d28gcG9zdHMsIHRoZSBvbmUgd2hpY2ggd2FzIGdpdmVuIHRoZWUgYnkgdGh5IGdlbmVyYWwsIGFuZCB0aGUgb25lIHdoaWNoIHRob3UgZGlkc3QgZ2l2ZSB0aHlzZWxmLjwvcT4gSG93ZXZlciwgaGUgYXR0YWNrZWQgdGhlIGVuZW15LCByb3V0ZWQgdGhlbSB1dHRlcmx5LCBhbmQgc2xldyBNaWNpb24gaGltc2VsZiB0b2dldGhlciB3aXRoIG1hbnkgb3RoZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgR3JlZWsgYXJteSBpbiBUaGVzc2FseSwgYWxzbywgYWx0aG91Z2ggTGVvbm5hdHVzIGFuZCBoaXMgTWFjZWRvbmlhbnMgZnJvbSBBc2lhIGhhZCBqb2luZWQgQW50aXBhdGVyLCB3YXMgdmljdG9yaW91cyBpbiBiYXR0bGUsIGFuZCBMZW9ubmF0dXMgZmVsbDsgdGhlIEdyZWVrIG1lbi1hdC1hcm1zIHdlcmUgbGVkIGJ5IEFudGlwaGlsdXMsIHRoZWlyIGNhdmFscnkgYnkgTWVub24gdGhlIFRoZXNzYWxpYW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGVpciBzZWEtY29hc3Qgd2FzIGJlaW5nIGRldmFzdGF0ZWQgYnkgTWljaW9uLCB3aG8gbGFuZGVkIGF0IFJoYW1udXMgd2l0aCBhIGhvcmRlIG9mIE1hY2Vkb25pYW5zIGFuZCBtZXJjZW5hcmllcyBhbmQgb3ZlcnJhbiB0aGUgYWRqYWNlbnQgdGVycml0b3J5LCBQaG9jaW9uIGxlZCB0aGUgQXRoZW5pYW5zIG91dCBhZ2FpbnN0IGhpbS4gQW5kIGFzIHRoZXkgbWFyY2hlZCwgbWVuIHdvdWxkIHJ1biB1cCB0byB0aGVpciBnZW5lcmFsIGZyb20gYWxsIHNpZGVzIGFuZCBzaG93IGhpbSB3aGF0IHRvIGRvLiBIZSB3YXMgYWR2aXNlZCB0byBzZWl6ZSBhIGhpbGwgaGVyZSwgdG8gc2VuZCBoaXMgaG9yc2VtZW4gYXJvdW5kIHRoaXRoZXIsIG9yIHRvIG1ha2UgaGlzIGF0dGFjayB1cG9uIHRoZSBlbmVteSB0aGVyZS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gSGVyYWNsZXMsPC9xPiBzYWlkIFBob2Npb24sIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ob3cgbWFueSBnZW5lcmFscyBJIHNlZSwgYW5kIGhvdyBmZXcgc29sZGllcnMhPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBhZnRlciBoZSBoYWQgZHJhd24gdXAgaGlzIG1lbi1hdC1hcm1zLCBvbmUgb2YgdGhlbSB3ZW50IG91dCBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgcmVzdCwgYW5kIHRoZW4gd2FzIHN0cmlja2VuIHdpdGggZmVhciB3aGVuIGFuIGVuZW15IGFkdmFuY2VkIHRvIG1lZXQgaGltLCBhbmQgd2VudCBiYWNrIGFnYWluIHRvIGhpcyBwb3N0LiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2hhbWUgb24gdGhlZSwgeW91bmcgbWFuLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIGhhdmluZyBhYmFuZG9uZWQgdHdvIHBvc3RzLCB0aGUgb25lIHdoaWNoIHdhcyBnaXZlbiB0aGVlIGJ5IHRoeSBnZW5lcmFsLCBhbmQgdGhlIG9uZSB3aGljaCB0aG91IGRpZHN0IGdpdmUgdGh5c2VsZi48L3E+IEhvd2V2ZXIsIGhlIGF0dGFja2VkIHRoZSBlbmVteSwgcm91dGVkIHRoZW0gdXR0ZXJseSwgYW5kIHNsZXcgTWljaW9uIGhpbXNlbGYgdG9nZXRoZXIgd2l0aCBtYW55IG90aGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBHcmVlayBhcm15IGluIFRoZXNzYWx5LCBhbHNvLCBhbHRob3VnaCBMZW9ubmF0dXMgYW5kIGhpcyBNYWNlZG9uaWFucyBmcm9tIEFzaWEgaGFkIGpvaW5lZCBBbnRpcGF0ZXIsIHdhcyB2aWN0b3Jpb3VzIGluIGJhdHRsZSwgYW5kIExlb25uYXR1cyBmZWxsOyB0aGUgR3JlZWsgbWVuLWF0LWFybXMgd2VyZSBsZWQgYnkgQW50aXBoaWx1cywgdGhlaXIgY2F2YWxyeSBieSBNZW5vbiB0aGUgVGhlc3NhbGlhbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgc2hvcnQgdGltZSBhZnRlcndhcmRzIENyYXRlcnVzIGNyb3NzZWQgZnJvbSBBc2lhIHdpdGggYSBsYXJnZSBmb3JjZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBob2MuIDE4LjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaWkuIDU8L2JpYmw+Ljwvbm90ZT4gYW5kIHRoZXJlIHdhcyBhbm90aGVyIHBpdGNoZWQgYmF0dGxlIGF0IENyYW5ub24uIEhlcmUgdGhlIEdyZWVrcyB3ZXJlIGRlZmVhdGVkLiBUaGVpciBkZWZlYXQgd2FzIG5vdCBzZXZlcmUsIG5vciBkaWQgbWFueSBvZiB0aGVtIGZhbGwsIGJ1dCBvd2luZyB0byB0aGVpciBsYWNrIG9mIG9iZWRpZW5jZSB0byB0aGVpciBjb21tYW5kZXJzLCB3aG8gd2VyZSB5b3VuZyBhbmQgc29mdC1oZWFydGVkLCBhbmQgYmVjYXVzZSBhdCB0aGUgc2FtZSB0aW1lIEFudGlwYXRlciBtYWRlIHRlbXB0aW5nIG92ZXJ0dXJlcyB0byB0aGVpciBzZXZlcmFsIGNpdGllcywgdGhlaXIgYXJteSBtZWx0ZWQgYXdheSBhbmQgbW9zdCBzaGFtZWZ1bGx5IGFiYW5kb25lZCB0aGUgY2F1c2Ugb2YgZnJlZWRvbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCBBbnRpcGF0ZXIgbGVkIGhpcyBmb3JjZXMgYWdhaW5zdCBBdGhlbnMsIGFuZCBEZW1vc3RoZW5lcyBhbmQgSHlwZXJlaWRlcyBsZWZ0IHRoZSBjaXR5LiBEZW1hZGVzLCBob3dldmVyIHRob3VnaCBoZSB3YXMgdW5hYmxlIHRvIHBheSBhbnkgcG9ydGlvbiBvZiB0aGUgZmluZXMgd2hpY2ggaGFkIGJlZW4gaW1wb3NlZCB1cG9uIGhpbSBieSB0aGUgY2l0eSAoaGUgaGFkIGJlZW4gc2V2ZW4gdGltZXMgY29udmljdGVkIG9mIGludHJvZHVjaW5nIGlsbGVnYWwgbWVhc3VyZXMsIGhhZCBsb3N0IGhpcyBjaXZpYyByaWdodHMsIGFuZCB3YXMgdGhlcmVmb3JlIGRlYmFycmVkIGZyb20gc3BlYWtpbmcgaW4gdGhlIGFzc2VtYmx5KSwgb2J0YWluZWQgaW1tdW5pdHkgYXQgdGhpcyB0aW1lLCBhbmQgYnJvdWdodCBpbiBhIGJpbGwgZm9yIHNlbmRpbmcgdG8gQW50aXBhdGVyIGFtYmFzc2Fkb3JzIHBsZW5pcG90ZW50aWFyeSB0byB0cmVhdCBmb3IgcGVhY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcGVvcGxlIHdlcmUgZmVhcmZ1bCwgYW5kIGNhbGxlZCB1cG9uIFBob2Npb24sIGRlY2xhcmluZyB0aGF0IGhlIHdhcyB0aGUgb25seSBtYW4gd2hvbSB0aGV5IGNvdWxkIHRydXN0LiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBpZiBJIGhhZCBiZWVuIHRydXN0ZWQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZW4gSSBnYXZlIHlvdSBjb3Vuc2VsLCB3ZSBzaG91bGQgbm90IG5vdyBiZSBkZWxpYmVyYXRpbmcgb24gc3VjaCBtYXR0ZXJzLjwvcT4gQW5kIHdoZW4gdGhlIGJpbGwgaGFkIHRodXMgYmVlbiBwYXNzZWQsIGhlIHdhcyBzZW50IG9mZiB0byBBbnRpcGF0ZXIsIHdobyB3YXMgZW5jYW1wZWQgaW4gdGhlIENhZG1laWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGNpdGFkZWwgb2YgVGhlYmVzLjwvbm90ZT4gYW5kIHdhcyBtYWtpbmcgcHJlcGFyYXRpb25zIHRvIG1hcmNoIGludG8gQXR0aWNhIGF0IG9uY2UuIEFuZCB0aGlzIHdhcyB0aGUgZmlyc3QgcmVxdWVzdCB0aGF0IFBob2Npb24gbWFkZSwgbmFtZWx5LCB0aGF0IEFudGlwYXRlciBzaG91bGQgcmVtYWluIHdoZXJlIGhlIHdhcyBhbmQgbWFrZSB0aGUgdHJlYXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDcmF0ZXJ1cyBkZWNsYXJlZCB0aGF0IGl0IHdhcyBub3QgZmFpciBpbiBQaG9jaW9uIHRvIHRyeSB0byBwZXJzdWFkZSB0aGVtIHRvIHJlbWFpbiBpbiB0aGUgdGVycml0b3J5IG9mIHRoZWlyIGZyaWVuZHMgYW5kIGFsbGllcyBhbmQgcmF2YWdlIGl0LCB3aGVuIHRoZXkgaGFkIGl0IGluIHRoZWlyIHBvd2VyIHRvIGdldCBib290eSBmcm9tIHRoYXQgb2YgdGhlaXIgZW5lbWllcywgQW50aXBhdGVyIHRvb2sgaGltIGJ5IHRoZSBoYW5kIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIG11c3QgZ3JhbnQgUGhvY2lvbiB0aGlzIGZhdm91ci48L3E+IEJ1dCBhcyBmb3IgdGhlIG90aGVyIHRlcm1zIG9mIHRoZSBwZWFjZSwgaGUgb3JkZXJlZCB0aGUgQXRoZW5pYW5zIHRvIGxlYXZlIHRoZW0gdG8gdGhlIGNvbnF1ZXJvcnMsIGp1c3QgYXMsIGF0IExhbWlhLCBoZSBoYWQgYmVlbiBvcmRlcmVkIHRvIGRvIGJ5IExlb3N0aGVuZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGEgc2hvcnQgdGltZSBhZnRlcndhcmRzIENyYXRlcnVzIGNyb3NzZWQgZnJvbSBBc2lhIHdpdGggYSBsYXJnZSBmb3JjZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaG9jLiAxOC41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aWlpLiA1PC9iaWJsPi48L25vdGU+IGFuZCB0aGVyZSB3YXMgYW5vdGhlciBwaXRjaGVkIGJhdHRsZSBhdCBDcmFubm9uLiBIZXJlIHRoZSBHcmVla3Mgd2VyZSBkZWZlYXRlZC4gVGhlaXIgZGVmZWF0IHdhcyBub3Qgc2V2ZXJlLCBub3IgZGlkIG1hbnkgb2YgdGhlbSBmYWxsLCBidXQgb3dpbmcgdG8gdGhlaXIgbGFjayBvZiBvYmVkaWVuY2UgdG8gdGhlaXIgY29tbWFuZGVycywgd2hvIHdlcmUgeW91bmcgYW5kIHNvZnQtaGVhcnRlZCwgYW5kIGJlY2F1c2UgYXQgdGhlIHNhbWUgdGltZSBBbnRpcGF0ZXIgbWFkZSB0ZW1wdGluZyBvdmVydHVyZXMgdG8gdGhlaXIgc2V2ZXJhbCBjaXRpZXMsIHRoZWlyIGFybXkgbWVsdGVkIGF3YXkgYW5kIG1vc3Qgc2hhbWVmdWxseSBhYmFuZG9uZWQgdGhlIGNhdXNlIG9mIGZyZWVkb20uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTguNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpaS4gNTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZXJlZm9yZSwgQW50aXBhdGVyIGxlZCBoaXMgZm9yY2VzIGFnYWluc3QgQXRoZW5zLCBhbmQgRGVtb3N0aGVuZXMgYW5kIEh5cGVyZWlkZXMgbGVmdCB0aGUgY2l0eS4gRGVtYWRlcywgaG93ZXZlciB0aG91Z2ggaGUgd2FzIHVuYWJsZSB0byBwYXkgYW55IHBvcnRpb24gb2YgdGhlIGZpbmVzIHdoaWNoIGhhZCBiZWVuIGltcG9zZWQgdXBvbiBoaW0gYnkgdGhlIGNpdHkgKGhlIGhhZCBiZWVuIHNldmVuIHRpbWVzIGNvbnZpY3RlZCBvZiBpbnRyb2R1Y2luZyBpbGxlZ2FsIG1lYXN1cmVzLCBoYWQgbG9zdCBoaXMgY2l2aWMgcmlnaHRzLCBhbmQgd2FzIHRoZXJlZm9yZSBkZWJhcnJlZCBmcm9tIHNwZWFraW5nIGluIHRoZSBhc3NlbWJseSksIG9idGFpbmVkIGltbXVuaXR5IGF0IHRoaXMgdGltZSwgYW5kIGJyb3VnaHQgaW4gYSBiaWxsIGZvciBzZW5kaW5nIHRvIEFudGlwYXRlciBhbWJhc3NhZG9ycyBwbGVuaXBvdGVudGlhcnkgdG8gdHJlYXQgZm9yIHBlYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcGVvcGxlIHdlcmUgZmVhcmZ1bCwgYW5kIGNhbGxlZCB1cG9uIFBob2Npb24sIGRlY2xhcmluZyB0aGF0IGhlIHdhcyB0aGUgb25seSBtYW4gd2hvbSB0aGV5IGNvdWxkIHRydXN0LiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGlmIEkgaGFkIGJlZW4gdHJ1c3RlZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj53aGVuIEkgZ2F2ZSB5b3UgY291bnNlbCwgd2Ugc2hvdWxkIG5vdCBub3cgYmUgZGVsaWJlcmF0aW5nIG9uIHN1Y2ggbWF0dGVycy48L3E+IEFuZCB3aGVuIHRoZSBiaWxsIGhhZCB0aHVzIGJlZW4gcGFzc2VkLCBoZSB3YXMgc2VudCBvZmYgdG8gQW50aXBhdGVyLCB3aG8gd2FzIGVuY2FtcGVkIGluIHRoZSBDYWRtZWlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGNpdGFkZWwgb2YgVGhlYmVzLjwvbm90ZT4gYW5kIHdhcyBtYWtpbmcgcHJlcGFyYXRpb25zIHRvIG1hcmNoIGludG8gQXR0aWNhIGF0IG9uY2UuIEFuZCB0aGlzIHdhcyB0aGUgZmlyc3QgcmVxdWVzdCB0aGF0IFBob2Npb24gbWFkZSwgbmFtZWx5LCB0aGF0IEFudGlwYXRlciBzaG91bGQgcmVtYWluIHdoZXJlIGhlIHdhcyBhbmQgbWFrZSB0aGUgdHJlYXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIENyYXRlcnVzIGRlY2xhcmVkIHRoYXQgaXQgd2FzIG5vdCBmYWlyIGluIFBob2Npb24gdG8gdHJ5IHRvIHBlcnN1YWRlIHRoZW0gdG8gcmVtYWluIGluIHRoZSB0ZXJyaXRvcnkgb2YgdGhlaXIgZnJpZW5kcyBhbmQgYWxsaWVzIGFuZCByYXZhZ2UgaXQsIHdoZW4gdGhleSBoYWQgaXQgaW4gdGhlaXIgcG93ZXIgdG8gZ2V0IGJvb3R5IGZyb20gdGhhdCBvZiB0aGVpciBlbmVtaWVzLCBBbnRpcGF0ZXIgdG9vayBoaW0gYnkgdGhlIGhhbmQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBtdXN0IGdyYW50IFBob2Npb24gdGhpcyBmYXZvdXIuPC9xPiBCdXQgYXMgZm9yIHRoZSBvdGhlciB0ZXJtcyBvZiB0aGUgcGVhY2UsIGhlIG9yZGVyZWQgdGhlIEF0aGVuaWFucyB0byBsZWF2ZSB0aGVtIHRvIHRoZSBjb25xdWVyb3JzLCBqdXN0IGFzLCBhdCBMYW1pYSwgaGUgaGFkIGJlZW4gb3JkZXJlZCB0byBkbyBieSBMZW9zdGhlbmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgUGhvY2lvbiByZXR1cm5lZCB0byBBdGhlbnMgd2l0aCB0aGVzZSBkZW1hbmRzLCBhbmQgdGhlIEF0aGVuaWFucyBhY2NlZWRlZCB0byB0aGVtLCB1bmRlciB0aGUgbmVjZXNzaXR5IHRoYXQgd2FzIHVwb24gdGhlbS4gVGhlbiBQaG9jaW9uIHdlbnQgb25jZSBtb3JlIHRvIFRoZWJlcywgd2l0aCB0aGUgb3RoZXIgYW1iYXNzYWRvcnMsIHRvIHdob20gdGhlIEF0aGVuaWFucyBoYWQgYWRkZWQgWGVub2NyYXRlcyB0aGUgcGhpbG9zb3BoZXIuIEZvciBzbyBoaWdoIGFuIGVzdGltYXRlIHdhcyBzZXQgdXBvbiB0aGUgdmlydHVlIG9mIFhlbm9jcmF0ZXMsIGFuZCBzbyBncmVhdCB3YXMgaGlzIHJlcHV0YXRpb24gYW5kIGZhbWUgaW4gdGhlIGV5ZXMgb2YgYWxsLCB0aGF0IGl0IHdhcyBzdXBwb3NlZCB0aGUgaHVtYW4gaGVhcnQgY291bGQgaGFyYm91ciBubyBpbnNvbGVuY2Ugb3IgY3J1ZWx0eSBvciB3cmF0aCB3aGljaCB0aGUgbWVyZSBzaWdodCBvZiB0aGUgbWFuIHdvdWxkIG5vdCBpbmZ1c2Ugd2l0aCByZXZlcmVuY2UgYW5kIGEgZGVzaXJlIHRvIGRvIGhpbSBob25vdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcmVzdWx0IGluIHRoaXMgY2FzZSB3YXMgdGhlIG9wcG9zaXRlLCBvd2luZyB0byBhIGNlcnRhaW4gcnV0aGxlc3NuZXNzIGFuZCBoYXRyZWQgb2YgZ29vZG5lc3MgaW4gQW50aXBhdGVyLiBGb3IsIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgd291bGQgbm90IHNhbHV0ZSBYZW5vY3JhdGVzLCBhbHRob3VnaCBoZSBncmVldGVkIHRoZSBvdGhlciBhbWJhc3NhZG9yczsgYXQgd2hpY2ggWGVub2NyYXRlcyBpcyBzYWlkIHRvIGhhdmUgcmVtYXJrZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW50aXBhdGVyIGRvZXMgd2VsbCB0byBmZWVsIHNoYW1lIGJlZm9yZSBtZSBhbG9uZSBvZiBoaXMgcnV0aGxlc3MgZGVzaWducyBhZ2FpbnN0IG91ciBjaXR5LjwvcT4gQW5kIGFnYWluLCB3aGVuIHRoZSBwaGlsb3NvcGhlciBiZWdhbiB0byBzcGVhaywgQW50aXBhdGVyIHdvdWxkIG5vdCBsaXN0ZW4gdG8gaGltLCBidXQgYW5ncmlseSBjb250cmFkaWN0ZWQgaGltIGFuZCBmb3JjZWQgaGltIGludG8gc2lsZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gUGhvY2lvbiBoYWQgbWFkZSBoaXMgcGxlYSwgQW50aXBhdGVyIHJlcGxpZWQgdGhhdCB0aGUgQXRoZW5pYW5zIGNvdWxkIGJlIGhpcyBmcmllbmRzIGFuZCBhbGxpZXMgb24gY29uZGl0aW9uIHRoYXQgdGhleSBkZWxpdmVyZWQgdXAgRGVtb3N0aGVuZXMgYW5kIEh5cGVyZWlkZXMsIHJldmVydGVkIHRvIHRoZWlyIGVhcmxpZXIgY29uc3RpdHV0aW9uIHdpdGggaXRzIGJhc2lzIG9mIHByb3BlcnR5IHF1YWxpZmljYXRpb24sIHJlY2VpdmVkIGEgZ2Fycmlzb24gaW50byBNdW55Y2hpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYWNyb3BvbGlzIG9mIFBlaXJhZXVzLjwvbm90ZT4gYW5kLCBpbiBhZGRpdGlvbiwgcGFpZCB0aGUgY29zdHMgb2YgdGhlIHdhciBhbmQgYSBmaW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIFBob2Npb24gcmV0dXJuZWQgdG8gQXRoZW5zIHdpdGggdGhlc2UgZGVtYW5kcywgYW5kIHRoZSBBdGhlbmlhbnMgYWNjZWVkZWQgdG8gdGhlbSwgdW5kZXIgdGhlIG5lY2Vzc2l0eSB0aGF0IHdhcyB1cG9uIHRoZW0uIFRoZW4gUGhvY2lvbiB3ZW50IG9uY2UgbW9yZSB0byBUaGViZXMsIHdpdGggdGhlIG90aGVyIGFtYmFzc2Fkb3JzLCB0byB3aG9tIHRoZSBBdGhlbmlhbnMgaGFkIGFkZGVkIFhlbm9jcmF0ZXMgdGhlIHBoaWxvc29waGVyLiBGb3Igc28gaGlnaCBhbiBlc3RpbWF0ZSB3YXMgc2V0IHVwb24gdGhlIHZpcnR1ZSBvZiBYZW5vY3JhdGVzLCBhbmQgc28gZ3JlYXQgd2FzIGhpcyByZXB1dGF0aW9uIGFuZCBmYW1lIGluIHRoZSBleWVzIG9mIGFsbCwgdGhhdCBpdCB3YXMgc3VwcG9zZWQgdGhlIGh1bWFuIGhlYXJ0IGNvdWxkIGhhcmJvdXIgbm8gaW5zb2xlbmNlIG9yIGNydWVsdHkgb3Igd3JhdGggd2hpY2ggdGhlIG1lcmUgc2lnaHQgb2YgdGhlIG1hbiB3b3VsZCBub3QgaW5mdXNlIHdpdGggcmV2ZXJlbmNlIGFuZCBhIGRlc2lyZSB0byBkbyBoaW0gaG9ub3VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcmVzdWx0IGluIHRoaXMgY2FzZSB3YXMgdGhlIG9wcG9zaXRlLCBvd2luZyB0byBhIGNlcnRhaW4gcnV0aGxlc3NuZXNzIGFuZCBoYXRyZWQgb2YgZ29vZG5lc3MgaW4gQW50aXBhdGVyLiBGb3IsIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgd291bGQgbm90IHNhbHV0ZSBYZW5vY3JhdGVzLCBhbHRob3VnaCBoZSBncmVldGVkIHRoZSBvdGhlciBhbWJhc3NhZG9yczsgYXQgd2hpY2ggWGVub2NyYXRlcyBpcyBzYWlkIHRvIGhhdmUgcmVtYXJrZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpcGF0ZXIgZG9lcyB3ZWxsIHRvIGZlZWwgc2hhbWUgYmVmb3JlIG1lIGFsb25lIG9mIGhpcyBydXRobGVzcyBkZXNpZ25zIGFnYWluc3Qgb3VyIGNpdHkuPC9xPiBBbmQgYWdhaW4sIHdoZW4gdGhlIHBoaWxvc29waGVyIGJlZ2FuIHRvIHNwZWFrLCBBbnRpcGF0ZXIgd291bGQgbm90IGxpc3RlbiB0byBoaW0sIGJ1dCBhbmdyaWx5IGNvbnRyYWRpY3RlZCBoaW0gYW5kIGZvcmNlZCBoaW0gaW50byBzaWxlbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIFBob2Npb24gaGFkIG1hZGUgaGlzIHBsZWEsIEFudGlwYXRlciByZXBsaWVkIHRoYXQgdGhlIEF0aGVuaWFucyBjb3VsZCBiZSBoaXMgZnJpZW5kcyBhbmQgYWxsaWVzIG9uIGNvbmRpdGlvbiB0aGF0IHRoZXkgZGVsaXZlcmVkIHVwIERlbW9zdGhlbmVzIGFuZCBIeXBlcmVpZGVzLCByZXZlcnRlZCB0byB0aGVpciBlYXJsaWVyIGNvbnN0aXR1dGlvbiB3aXRoIGl0cyBiYXNpcyBvZiBwcm9wZXJ0eSBxdWFsaWZpY2F0aW9uLCByZWNlaXZlZCBhIGdhcnJpc29uIGludG8gTXVueWNoaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYWNyb3BvbGlzIG9mIFBlaXJhZXVzLjwvbm90ZT4gYW5kLCBpbiBhZGRpdGlvbiwgcGFpZCB0aGUgY29zdHMgb2YgdGhlIHdhciBhbmQgYSBmaW5lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVzdCBvZiB0aGUgYW1iYXNzYWRvcnMgd2VyZSBzYXRpc2ZpZWQgd2l0aCB0aGVzZSB0ZXJtcyBhbmQgY29uc2lkZXJlZCB0aGVtIGh1bWFuZSwgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIFhlbm9jcmF0ZXMsIHdobyBzYWlkIHRoYXQgQW50aXBhdGVyIGRlYWx0IHdpdGggdGhlbSBtb2RlcmF0ZWx5IGlmIGhlIGhlbGQgdGhlbSB0byBiZSBzbGF2ZXMsIGJ1dCBzZXZlcmVseSBpZiBoZSBoZWxkIHRoZW0gdG8gYmUgZnJlZW1lbi4gUGhvY2lvbiwgaG93ZXZlciwgYmVzb3VnaHQgQW50aXBhdGVyIHRvIHNwYXJlIHRoZW0gdGhlIGdhcnJpc29uLCB0byB3aGljaCBBbnRpcGF0ZXIsIGFzIHdlIGFyZSB0b2xkLCByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gUGhvY2lvbiwgd2Ugd2lzaCB0byBncmF0aWZ5IHRoZWUgaW4gYWxsIHRoaW5ncywgZXhjZXB0IHRob3NlIHdoaWNoIHdpbGwgcnVpbiB0aGVlIGFuZCB1cy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNvbWUgdGVsbCBhIGRpZmZlcmVudCBzdG9yeSwgYW5kIHNheSB0aGF0IEFudGlwYXRlciBhc2tlZCB3aGV0aGVyLCBpbiBjYXNlIGhlIGluZHVsZ2VkIHRoZSBBdGhlbmlhbnMgaW4gdGhlIG1hdHRlciBvZiB0aGUgZ2Fycmlzb24sIFBob2Npb24gd291bGQgZ28gc3VyZXR5IHRoYXQgaGlzIGNpdHkgd291bGQgYWJpZGUgYnkgdGhlIHBlYWNlIGFuZCBzdGlyIHVwIG5vIHRyb3VibGU7IGFuZCB0aGF0IHdoZW4gUGhvY2lvbiB3YXMgc2lsZW50IGFuZCBkZWxheWVkIGhpcyBhbnN3ZXIsIENhbGxpbWVkb24sIHN1cm5hbWVkIENhcmFidXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxnbG9zcz5TdGFnLWJlZXRsZTwvZ2xvc3M+Ljwvbm90ZT4gYW4gYXJyb2dhbnQgbWFuIGFuZCBhIGhhdGVyIG9mIGRlbW9jcmFjeSwgc3ByYW5nIHRvIGhpcyBmZWV0IGFuZCBjcmllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgZXZlbiBpZiB0aGUgZmVsbG93IHNob3VsZCBwcmF0ZSBzdWNoIG5vbnNlbnNlLCBBbnRpcGF0ZXIsIHdpbHQgdGhvdSB0cnVzdCBoaW0gYW5kIGdpdmUgdXAgd2hhdCB0aG91IGhhc3QgcGxhbm5lZCB0byBkbz88L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIHRoZSBhbWJhc3NhZG9ycyB3ZXJlIHNhdGlzZmllZCB3aXRoIHRoZXNlIHRlcm1zIGFuZCBjb25zaWRlcmVkIHRoZW0gaHVtYW5lLCB3aXRoIHRoZSBleGNlcHRpb24gb2YgWGVub2NyYXRlcywgd2hvIHNhaWQgdGhhdCBBbnRpcGF0ZXIgZGVhbHQgd2l0aCB0aGVtIG1vZGVyYXRlbHkgaWYgaGUgaGVsZCB0aGVtIHRvIGJlIHNsYXZlcywgYnV0IHNldmVyZWx5IGlmIGhlIGhlbGQgdGhlbSB0byBiZSBmcmVlbWVuLiBQaG9jaW9uLCBob3dldmVyLCBiZXNvdWdodCBBbnRpcGF0ZXIgdG8gc3BhcmUgdGhlbSB0aGUgZ2Fycmlzb24sIHRvIHdoaWNoIEFudGlwYXRlciwgYXMgd2UgYXJlIHRvbGQsIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIFBob2Npb24sIHdlIHdpc2ggdG8gZ3JhdGlmeSB0aGVlIGluIGFsbCB0aGluZ3MsIGV4Y2VwdCB0aG9zZSB3aGljaCB3aWxsIHJ1aW4gdGhlZSBhbmQgdXMuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb21lIHRlbGwgYSBkaWZmZXJlbnQgc3RvcnksIGFuZCBzYXkgdGhhdCBBbnRpcGF0ZXIgYXNrZWQgd2hldGhlciwgaW4gY2FzZSBoZSBpbmR1bGdlZCB0aGUgQXRoZW5pYW5zIGluIHRoZSBtYXR0ZXIgb2YgdGhlIGdhcnJpc29uLCBQaG9jaW9uIHdvdWxkIGdvIHN1cmV0eSB0aGF0IGhpcyBjaXR5IHdvdWxkIGFiaWRlIGJ5IHRoZSBwZWFjZSBhbmQgc3RpciB1cCBubyB0cm91YmxlOyBhbmQgdGhhdCB3aGVuIFBob2Npb24gd2FzIHNpbGVudCBhbmQgZGVsYXllZCBoaXMgYW5zd2VyLCBDYWxsaW1lZG9uLCBzdXJuYW1lZCBDYXJhYnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPlN0YWctYmVldGxlPC9nbG9zcz4uPC9ub3RlPiBhbiBhcnJvZ2FudCBtYW4gYW5kIGEgaGF0ZXIgb2YgZGVtb2NyYWN5LCBzcHJhbmcgdG8gaGlzIGZlZXQgYW5kIGNyaWVkOiAKCQkJCTxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPlN0YWctYmVldGxlPC9nbG9zcz4uPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgZXZlbiBpZiB0aGUgZmVsbG93IHNob3VsZCBwcmF0ZSBzdWNoIG5vbnNlbnNlLCBBbnRpcGF0ZXIsIHdpbHQgdGhvdSB0cnVzdCBoaW0gYW5kIGdpdmUgdXAgd2hhdCB0aG91IGhhc3QgcGxhbm5lZCB0byBkbz88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlIEF0aGVuaWFucyB3ZXJlIG9ibGlnZWQgdG8gcmVjZWl2ZSBhIE1hY2Vkb25pYW4gZ2Fycmlzb24sIHdoaWNoIHdhcyB1bmRlciB0aGUgY29tbWFuZCBvZiBNZW55bGx1cywgYW4gZXF1aXRhYmxlIG1hbiBhbmQgYSBmcmllbmQgb2YgUGhvY2lvbi4gQnV0IHRoZSBtZWFzdXJlIHdhcyBoZWxkIHRvIGJlIGFuIGFycm9nYW50IG9uZSwgYW5kIHJhdGhlciBhIGRpc3BsYXkgb2YgcG93ZXIgd2hpY2ggZGVsaWdodGVkIGluIGluc29sZW5jZSB0aGFuIGFuIG9jY3VwYXRpb24gZHVlIHRvIHN0cmVzcyBvZiBjaXJjdW1zdGFuY2UuIEFuZCBpdCBjYW1lIGF0IGEgdGltZSB3aGljaCBhZGRlZCBub3QgYSBsaXR0bGUgdG8gdGhlIGRpc3RyZXNzIG9mIHRoZSBwZW9wbGUuIEZvciB0aGUgZ2Fycmlzb24gd2FzIGludHJvZHVjZWQgb24gdGhlIHR3ZW50aWV0aCBvZiB0aGUgbW9udGggQm/Dq2Ryb21pb24sIHdoaWxlIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgbXlzdGVyaWVzIHdhcyBpbiBwcm9ncmVzcywgb24gdGhlIGRheSB3aGVuIHRoZSBnb2QgSWFjY2h1cyBpcyBjb25kdWN0ZWQgZnJvbSB0aGUgY2l0eSB0byBFbGV1c2lzLCBzbyB0aGF0IHRoZSBkaXN0dXJiYW5jZSBvZiB0aGUgc2FjcmVkIHJpdGUgbGVkIG1vc3QgbWVuIHRvIHJlZmxlY3QgdXBvbiB0aGUgYXR0aXR1ZGUgb2YgdGhlIGhlYXZlbmx5IHBvd2VycyBpbiBlYXJsaWVyIHRpbWVzIGFuZCBhdCB0aGUgcHJlc2VudCBkYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiBvbGQgdGhlIG15c3RpYyBzaGFwZXMgYW5kIHZvaWNlcyB3ZXJlIHZvdWNoc2FmZWQgdG8gdGhlbSBpbiB0aGUgbWlkc3Qgb2YgdGhlaXIgbW9zdCBnbG9yaW91cyBzdWNjZXNzZXMsIGFuZCBicm91Z2h0IGNvbnN0ZXJuYXRpb24gYW5kIGFmZnJpZ2h0IHVwb24gdGhlaXIgZW5lbWllczs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4di4gMTwvYmlibD4uPC9ub3RlPiBidXQgbm93LCB3aGlsZSB0aGUgc2FtZSBzYWNyZWQgY2VyZW1vbmllcyB3ZXJlIGluIHByb2dyZXNzLCB0aGUgZ29kcyBsb29rZWQgZG93biB3aXRoIGluZGlmZmVyZW5jZSB1cG9uIHRoZSBtb3N0IGdyaWV2b3VzIHdvZXMgb2YgSGVsbGFzLCBhbmQgdGhlIHByb2ZhbmF0aW9uIG9mIHRoZSBzZWFzb24gd2hpY2ggaGFkIGJlZW4gbW9zdCBzd2VldCBhbmQgaG9seSBpbiB0aGVpciBleWVzIG1hZGUgaXQgZm9yIHRoZSBmdXR1cmUgZ2l2ZSBpdHMgbmFtZSB0byB0aGVpciBncmVhdGVzdCBldmlscy4gSW5kZWVkLCBhIGZldyB5ZWFycyBiZWZvcmUgdGhpcyB0aGUgQXRoZW5pYW5zIGhhZCByZWNlaXZlZCBhbiBvcmFjbGUgZnJvbSBEb2RvbmEgYmlkZGluZyB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Z3VhcmQgdGhlIHN1bW1pdHMgb2YgQXJ0ZW1pcyw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFydGVtaXMgd2FzIHRoZSBwYXRyb24gZ29kZGVzcyBvZiBNdW55Y2hpYS48L25vdGU+IHRoYXQgc3RyYW5nZXJzIG1pZ2h0IG5vdCBzZWl6ZSB0aGVtOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbm93LCBkdXJpbmcgdGhlIGRheXMgb2YgdGhlIGZlc3RpdmFsLCB3aGVuIHRoZSBmaWxsZXRzIHdpdGggd2hpY2ggdGhleSBlbnR3aW5lIHRoZSBteXN0aWMgY2hlc3RzIHdlcmUgZHllZCwgaW5zdGVhZCBvZiBwdXJwbGUgdGhleSBzaG93ZWQgYSBzYWxsb3cgYW5kIGRlYXRobHkgY29sb3VyLCBhbmQsIHdoYXQgd2FzIG1vcmUgc2lnbmlmaWNhbnQgc3RpbGwsIGFsbCB0aGUgYXJ0aWNsZXMgZm9yIGNvbW1vbiB1c2Ugd2hpY2ggd2VyZSBkeWVkIGFsb25nIHdpdGggdGhlIGZpbGxldHMgdG9vayB0aGUgbmF0dXJhbCBodWUuIE1vcmVvdmVyLCBhcyBhIG15c3RpYyBpbml0aWF0ZSB3YXMgd2FzaGluZyBhIHBpZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIG9mZmVyaW5nIGZvciBEZW1ldGVyLCB0aGUgY2hpZWYgZGl2aW5pdHkgb2YgdGhlIG15c3Rlcmllcy48L25vdGU+IGluIHRoZSBoYXJib3VyIG9mIENhbnRoYXJ1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QYXJ0IG9mIHRoZSBoYXJib3VyIG9mIFBlaXJhZXVzLjwvbm90ZT4gYSBncmVhdCBmaXNoIHNlaXplZCB0aGUgbWFuIGFuZCBkZXZvdXJlZCB0aGUgbG93ZXIgcGFydHMgb2YgaGlzIGJvZHkgYXMgZmFyIGFzIHRoZSBiZWxseSwgYnkgd2hpY2ggSGVhdmVuIGNsZWFybHkgaW5kaWNhdGVkIHRvIHRoZW0gaW4gYWR2YW5jZSB0aGF0IHRoZXkgd291bGQgYmUgZGVwcml2ZWQgb2YgdGhlIGxvd2VyIHBhcnRzIG9mIHRoZSBjaXR5IHdoaWNoIGFkam9pbmVkIHRoZSBzZWEsIGJ1dCB3b3VsZCByZXRhaW4gdGhlIHVwcGVyIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgQXRoZW5pYW5zIHdlcmUgb2JsaWdlZCB0byByZWNlaXZlIGEgTWFjZWRvbmlhbiBnYXJyaXNvbiwgd2hpY2ggd2FzIHVuZGVyIHRoZSBjb21tYW5kIG9mIE1lbnlsbHVzLCBhbiBlcXVpdGFibGUgbWFuIGFuZCBhIGZyaWVuZCBvZiBQaG9jaW9uLiBCdXQgdGhlIG1lYXN1cmUgd2FzIGhlbGQgdG8gYmUgYW4gYXJyb2dhbnQgb25lLCBhbmQgcmF0aGVyIGEgZGlzcGxheSBvZiBwb3dlciB3aGljaCBkZWxpZ2h0ZWQgaW4gaW5zb2xlbmNlIHRoYW4gYW4gb2NjdXBhdGlvbiBkdWUgdG8gc3RyZXNzIG9mIGNpcmN1bXN0YW5jZS4gQW5kIGl0IGNhbWUgYXQgYSB0aW1lIHdoaWNoIGFkZGVkIG5vdCBhIGxpdHRsZSB0byB0aGUgZGlzdHJlc3Mgb2YgdGhlIHBlb3BsZS4gRm9yIHRoZSBnYXJyaXNvbiB3YXMgaW50cm9kdWNlZCBvbiB0aGUgdHdlbnRpZXRoIG9mIHRoZSBtb250aCBCb8OrZHJvbWlvbiwgd2hpbGUgdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBteXN0ZXJpZXMgd2FzIGluIHByb2dyZXNzLCBvbiB0aGUgZGF5IHdoZW4gdGhlIGdvZCBJYWNjaHVzIGlzIGNvbmR1Y3RlZCBmcm9tIHRoZSBjaXR5IHRvIEVsZXVzaXMsIHNvIHRoYXQgdGhlIGRpc3R1cmJhbmNlIG9mIHRoZSBzYWNyZWQgcml0ZSBsZWQgbW9zdCBtZW4gdG8gcmVmbGVjdCB1cG9uIHRoZSBhdHRpdHVkZSBvZiB0aGUgaGVhdmVubHkgcG93ZXJzIGluIGVhcmxpZXIgdGltZXMgYW5kIGF0IHRoZSBwcmVzZW50IGRheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiBvbGQgdGhlIG15c3RpYyBzaGFwZXMgYW5kIHZvaWNlcyB3ZXJlIHZvdWNoc2FmZWQgdG8gdGhlbSBpbiB0aGUgbWlkc3Qgb2YgdGhlaXIgbW9zdCBnbG9yaW91cyBzdWNjZXNzZXMsIGFuZCBicm91Z2h0IGNvbnN0ZXJuYXRpb24gYW5kIGFmZnJpZ2h0IHVwb24gdGhlaXIgZW5lbWllczs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4di4gMTwvYmlibD4uPC9ub3RlPiBidXQgbm93LCB3aGlsZSB0aGUgc2FtZSBzYWNyZWQgY2VyZW1vbmllcyB3ZXJlIGluIHByb2dyZXNzLCB0aGUgZ29kcyBsb29rZWQgZG93biB3aXRoIGluZGlmZmVyZW5jZSB1cG9uIHRoZSBtb3N0IGdyaWV2b3VzIHdvZXMgb2YgSGVsbGFzLCBhbmQgdGhlIHByb2ZhbmF0aW9uIG9mIHRoZSBzZWFzb24gd2hpY2ggaGFkIGJlZW4gbW9zdCBzd2VldCBhbmQgaG9seSBpbiB0aGVpciBleWVzIG1hZGUgaXQgZm9yIHRoZSBmdXR1cmUgZ2l2ZSBpdHMgbmFtZSB0byB0aGVpciBncmVhdGVzdCBldmlscy4gSW5kZWVkLCBhIGZldyB5ZWFycyBiZWZvcmUgdGhpcyB0aGUgQXRoZW5pYW5zIGhhZCByZWNlaXZlZCBhbiBvcmFjbGUgZnJvbSBEb2RvbmEgYmlkZGluZyB0aGVtIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4di4gMTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlbWlzdG9jbGVzPC90aXRsZT4sIHh2LiAxPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ndWFyZCB0aGUgc3VtbWl0cyBvZiBBcnRlbWlzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcnRlbWlzIHdhcyB0aGUgcGF0cm9uIGdvZGRlc3Mgb2YgTXVueWNoaWEuPC9ub3RlPiB0aGF0IHN0cmFuZ2VycyBtaWdodCBub3Qgc2VpemUgdGhlbTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3csIGR1cmluZyB0aGUgZGF5cyBvZiB0aGUgZmVzdGl2YWwsIHdoZW4gdGhlIGZpbGxldHMgd2l0aCB3aGljaCB0aGV5IGVudHdpbmUgdGhlIG15c3RpYyBjaGVzdHMgd2VyZSBkeWVkLCBpbnN0ZWFkIG9mIHB1cnBsZSB0aGV5IHNob3dlZCBhIHNhbGxvdyBhbmQgZGVhdGhseSBjb2xvdXIsIGFuZCwgd2hhdCB3YXMgbW9yZSBzaWduaWZpY2FudCBzdGlsbCwgYWxsIHRoZSBhcnRpY2xlcyBmb3IgY29tbW9uIHVzZSB3aGljaCB3ZXJlIGR5ZWQgYWxvbmcgd2l0aCB0aGUgZmlsbGV0cyB0b29rIHRoZSBuYXR1cmFsIGh1ZS4gTW9yZW92ZXIsIGFzIGEgbXlzdGljIGluaXRpYXRlIHdhcyB3YXNoaW5nIGEgcGlnPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBvZmZlcmluZyBmb3IgRGVtZXRlciwgdGhlIGNoaWVmIGRpdmluaXR5IG9mIHRoZSBteXN0ZXJpZXMuPC9ub3RlPiBpbiB0aGUgaGFyYm91ciBvZiBDYW50aGFydXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QYXJ0IG9mIHRoZSBoYXJib3VyIG9mIFBlaXJhZXVzLjwvbm90ZT4gYSBncmVhdCBmaXNoIHNlaXplZCB0aGUgbWFuIGFuZCBkZXZvdXJlZCB0aGUgbG93ZXIgcGFydHMgb2YgaGlzIGJvZHkgYXMgZmFyIGFzIHRoZSBiZWxseSwgYnkgd2hpY2ggSGVhdmVuIGNsZWFybHkgaW5kaWNhdGVkIHRvIHRoZW0gaW4gYWR2YW5jZSB0aGF0IHRoZXkgd291bGQgYmUgZGVwcml2ZWQgb2YgdGhlIGxvd2VyIHBhcnRzIG9mIHRoZSBjaXR5IHdoaWNoIGFkam9pbmVkIHRoZSBzZWEsIGJ1dCB3b3VsZCByZXRhaW4gdGhlIHVwcGVyIGNpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGdhcnJpc29uLCBvd2luZyB0byB0aGUgaW5mbHVlbmNlIG9mIE1lbnlsbHVzLCBkaWQgbm8gaGFybSB0byB0aGUgaW5oYWJpdGFudHM7IGJ1dCB0aGUgY2l0aXplbnMgd2hvIHdlcmUgZGVwcml2ZWQgb2YgdGhlaXIgZnJhbmNoaXNlIGJlY2F1c2Ugb2YgdGhlaXIgcG92ZXJ0eSBudW1iZXJlZCBtb3JlIHRoYW4gdHdlbHZlIHRob3VzYW5kLCBhbmQgdGhvc2Ugb2YgdGhlbSB3aG8gcmVtYWluZWQgYXQgaG9tZSBhcHBlYXJlZCB0byBiZSBzdWZmZXJpbmcgZ3JpZXZvdXMgYW5kIHVuZGVzZXJ2ZWQgd3JvbmdzLCB3aGlsZSB0aG9zZSB3aG8gb24gdGhpcyBhY2NvdW50IGZvcnNvb2sgdGhlIGNpdHkgYW5kIG1pZ3JhdGVkIHRvIFRocmFjZSwgd2hlcmUgQW50aXBhdGVyIGZ1cm5pc2hlZCB0aGVtIHdpdGggbGFuZCBhbmQgYSBjaXR5LCB3ZXJlIGxpa2UgbWVuIGRyaXZlbiBmcm9tIGEgY2FwdHVyZWQgY2l0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGdhcnJpc29uLCBvd2luZyB0byB0aGUgaW5mbHVlbmNlIG9mIE1lbnlsbHVzLCBkaWQgbm8gaGFybSB0byB0aGUgaW5oYWJpdGFudHM7IGJ1dCB0aGUgY2l0aXplbnMgd2hvIHdlcmUgZGVwcml2ZWQgb2YgdGhlaXIgZnJhbmNoaXNlIGJlY2F1c2Ugb2YgdGhlaXIgcG92ZXJ0eSBudW1iZXJlZCBtb3JlIHRoYW4gdHdlbHZlIHRob3VzYW5kLCBhbmQgdGhvc2Ugb2YgdGhlbSB3aG8gcmVtYWluZWQgYXQgaG9tZSBhcHBlYXJlZCB0byBiZSBzdWZmZXJpbmcgZ3JpZXZvdXMgYW5kIHVuZGVzZXJ2ZWQgd3JvbmdzLCB3aGlsZSB0aG9zZSB3aG8gb24gdGhpcyBhY2NvdW50IGZvcnNvb2sgdGhlIGNpdHkgYW5kIG1pZ3JhdGVkIHRvIFRocmFjZSwgd2hlcmUgQW50aXBhdGVyIGZ1cm5pc2hlZCB0aGVtIHdpdGggbGFuZCBhbmQgYSBjaXR5LCB3ZXJlIGxpa2UgbWVuIGRyaXZlbiBmcm9tIGEgY2FwdHVyZWQgY2l0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBkZWF0aCBvZiBEZW1vc3RoZW5lcyBpbiBDYWxhdXJpYSwgYW5kIHRoYXQgb2YgSHlwZXJlaWRlcyBhdCBDbGVvbmFlLCBhYm91dCB3aGljaCBJIGhhdmUgd3JpdHRlbiBlbHNld2hlcmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXJzIHh4dmlpaS48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDMwLjEiIHZhbGlkPSJ5ZXMiPnh4eDwvYmlibD4uPC9ub3RlPiBtYWRlIHRoZSBBdGhlbmlhbnMgeWVhcm4gYWxtb3N0IHBhc3Npb25hdGVseSBmb3IgUGhpbGlwIGFuZCBBbGV4YW5kZXIuIEF0IGEgbGF0ZXIgdGltZSwgYWZ0ZXIgQW50aWdvbnVzIGhhZCBiZWVuIHNsYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyB3YXMgZGVmZWF0ZWQgYnkgU2VsZXVjdXMgYW5kIEx5c2ltYWNodXMgYXQgSXBzdXMsIGluIFBocnlnaWEsIGluIDMwMSBCLkMuLCBhbmQgZmVsbCBpbiB0aGUgYmF0dGxlLjwvbm90ZT4gYW5kIHRob3NlIHdobyBzbGV3IGhpbSBiZWdhbiB0byBvcHByZXNzIGFuZCB2ZXggdGhlIHBlb3BsZSwgYSBwZWFzYW50IGluIFBocnlnaWEgd2hvIHdhcyBkaWdnaW5nIG9uIGhpcyBmYXJtIHdhcyBhc2tlZCBieSBzb21lb25lIHdoYXQgaGUgd2FzIGRvaW5nLCBhbmQgYW5zd2VyZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhbSBsb29raW5nIGZvciBBbnRpZ29udXMuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIG5vdyBtYW55IHdlcmUgbW92ZWQgdG8gc3BlYWssIGFzIHRoZXkgY2FsbGVkIHRvIG1pbmQgaG93IHRoZSBncmVhdG5lc3MgYW5kIGdlbmVyb3NpdHkgb2YgdGhvc2UgaWxsdXN0cmlvdXMga2luZ3MgbWFkZSB0aGVpciB3cmF0aCBlYXN5IHRvIGFwcGVhc2U7IHdoZXJlYXMgQW50aXBhdGVyLCBhbHRob3VnaCBoZSB0cmllZCB0byBjb25jZWFsIGhpcyBwb3dlciB1bmRlciB0aGUgbWFzayBvZiBhIGNvbW1vbiBtYW4gb2YgbWVhbiBhdHRpcmUgYW5kIHNpbXBsZSBtb2RlIG9mIGxpZmUsIHdhcyByZWFsbHkgYSBtb3JlIGJ1cmRlbnNvbWUgdHlyYW50IGFuZCBtYXN0ZXIgdG8gdGhvc2Ugd2hvIHdlcmUgaW4gdHJvdWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5ldmVydGhlbGVzcyBQaG9jaW9uIHN1Y2Nlc3NmdWxseSBwbGVhZGVkIHdpdGggQW50aXBhdGVyIGZvciB0aGUgZXhlbXB0aW9uIG9mIG1hbnkgZnJvbSBleGlsZSwgYW5kIGZvciB0aG9zZSB3aG8gd2VudCBpbnRvIGV4aWxlIGhlIG9idGFpbmVkIHRoZSBwcml2aWxlZ2Ugb2YgcmVzaWRpbmcgaW4gUGVsb3Bvbm5lc3VzLCBpbnN0ZWFkIG9mIGJlaW5nIGRyaXZlbiBvdXQgb2YgSGVsbGFzIGJleW9uZCB0aGUgQ2VyYXVuaWFuIG1vdW50YWlucyBhbmQgdGhlIHByb21vbnRvcnkgb2YgVGFlbmFydW0gbGlrZSBvdGhlciBtZW4gaW4gYmFuaXNobWVudC4gT2YgdGhpcyBudW1iZXIgd2FzIEhhZ25vbmlkZXMgdGhlIHB1YmxpYyBpbmZvcm1lci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGJ5IG1hbmFnaW5nIHRoZSBhZmZhaXJzIG9mIHRoZSBjaXR5IHdpdGggbWlsZG5lc3MgYW5kIGFjY29yZGluZyB0byB0aGUgbGF3cywgaGUga2VwdCB0aGUgbWVuIG9mIGVkdWNhdGlvbiBhbmQgY3VsdHVyZSBhbHdheXMgaW4gb2ZmaWNlLCB3aGlsZSB0aGUgYnVzeWJvZGllcyBhbmQgaW5ub3ZhdG9ycywgd2hvIHdpdGhlcmVkIGludG8gaW5zaWduaWZpY2FuY2UgZnJvbSB0aGUgdmVyeSBmYWN0IHRoYXQgdGhleSBoZWxkIG5vIG9mZmljZSBhbmQgcmFpc2VkIG5vIHVwcm9hcnMsIHdlcmUgdGF1Z2h0IGJ5IGhpbSB0byBiZSBmb25kIG9mIGhvbWUgYW5kIHRvIGRlbGlnaHQgaW4gdGlsbGluZyB0aGUgc29pbC4gV2hlbiBoZSBzYXcgdGhhdCBYZW5vY3JhdGVzIHBhaWQgdGhlIHJlc2lkZW50IGFsaWVuIHRheCwgaGUgb2ZmZXJlZCB0byBlbnJvbGwgaGltIGFzIGEgY2l0aXplbjsgYnV0IHRoZSBwaGlsb3NvcGhlciByZWZ1c2VkLCBzYXlpbmcgdGhhdCBoZSBjb3VsZCBub3QgdGFrZSBwYXJ0IGluIGFuIGFkbWluaXN0cmF0aW9uIGZvciB0aGUgcHJldmVudGlvbiBvZiB3aGljaCBoZSBoYWQgc2VydmVkIG9uIGFuIGVtYmFzc3kuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQaG9jLiAyNy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4dmlpPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBkZWF0aCBvZiBEZW1vc3RoZW5lcyBpbiBDYWxhdXJpYSwgYW5kIHRoYXQgb2YgSHlwZXJlaWRlcyBhdCBDbGVvbmFlLCBhYm91dCB3aGljaCBJIGhhdmUgd3JpdHRlbiBlbHNld2hlcmUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzPC90aXRsZT4sIGNoYXB0ZXJzIHh4dmlpaS48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMzAuMSIgdmFsaWQ9InllcyI+eHh4PC9iaWJsPi48L25vdGU+IG1hZGUgdGhlIEF0aGVuaWFucyB5ZWFybiBhbG1vc3QgcGFzc2lvbmF0ZWx5IGZvciBQaGlsaXAgYW5kIEFsZXhhbmRlci4gQXQgYSBsYXRlciB0aW1lLCBhZnRlciBBbnRpZ29udXMgaGFkIGJlZW4gc2xhaW4sPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtb3N0aGVuZXM8L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLjwvYmlibD4tPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVtb3N0aGVuZXM8L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMzAuMSIgdmFsaWQ9InllcyI+eHh4PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyB3YXMgZGVmZWF0ZWQgYnkgU2VsZXVjdXMgYW5kIEx5c2ltYWNodXMgYXQgSXBzdXMsIGluIFBocnlnaWEsIGluIDMwMSBCLkMuLCBhbmQgZmVsbCBpbiB0aGUgYmF0dGxlLjwvbm90ZT4gYW5kIHRob3NlIHdobyBzbGV3IGhpbSBiZWdhbiB0byBvcHByZXNzIGFuZCB2ZXggdGhlIHBlb3BsZSwgYSBwZWFzYW50IGluIFBocnlnaWEgd2hvIHdhcyBkaWdnaW5nIG9uIGhpcyBmYXJtIHdhcyBhc2tlZCBieSBzb21lb25lIHdoYXQgaGUgd2FzIGRvaW5nLCBhbmQgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIGxvb2tpbmcgZm9yIEFudGlnb251cy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIG5vdyBtYW55IHdlcmUgbW92ZWQgdG8gc3BlYWssIGFzIHRoZXkgY2FsbGVkIHRvIG1pbmQgaG93IHRoZSBncmVhdG5lc3MgYW5kIGdlbmVyb3NpdHkgb2YgdGhvc2UgaWxsdXN0cmlvdXMga2luZ3MgbWFkZSB0aGVpciB3cmF0aCBlYXN5IHRvIGFwcGVhc2U7IHdoZXJlYXMgQW50aXBhdGVyLCBhbHRob3VnaCBoZSB0cmllZCB0byBjb25jZWFsIGhpcyBwb3dlciB1bmRlciB0aGUgbWFzayBvZiBhIGNvbW1vbiBtYW4gb2YgbWVhbiBhdHRpcmUgYW5kIHNpbXBsZSBtb2RlIG9mIGxpZmUsIHdhcyByZWFsbHkgYSBtb3JlIGJ1cmRlbnNvbWUgdHlyYW50IGFuZCBtYXN0ZXIgdG8gdGhvc2Ugd2hvIHdlcmUgaW4gdHJvdWJsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBuZXZlcnRoZWxlc3MgUGhvY2lvbiBzdWNjZXNzZnVsbHkgcGxlYWRlZCB3aXRoIEFudGlwYXRlciBmb3IgdGhlIGV4ZW1wdGlvbiBvZiBtYW55IGZyb20gZXhpbGUsIGFuZCBmb3IgdGhvc2Ugd2hvIHdlbnQgaW50byBleGlsZSBoZSBvYnRhaW5lZCB0aGUgcHJpdmlsZWdlIG9mIHJlc2lkaW5nIGluIFBlbG9wb25uZXN1cywgaW5zdGVhZCBvZiBiZWluZyBkcml2ZW4gb3V0IG9mIEhlbGxhcyBiZXlvbmQgdGhlIENlcmF1bmlhbiBtb3VudGFpbnMgYW5kIHRoZSBwcm9tb250b3J5IG9mIFRhZW5hcnVtIGxpa2Ugb3RoZXIgbWVuIGluIGJhbmlzaG1lbnQuIE9mIHRoaXMgbnVtYmVyIHdhcyBIYWdub25pZGVzIHRoZSBwdWJsaWMgaW5mb3JtZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBieSBtYW5hZ2luZyB0aGUgYWZmYWlycyBvZiB0aGUgY2l0eSB3aXRoIG1pbGRuZXNzIGFuZCBhY2NvcmRpbmcgdG8gdGhlIGxhd3MsIGhlIGtlcHQgdGhlIG1lbiBvZiBlZHVjYXRpb24gYW5kIGN1bHR1cmUgYWx3YXlzIGluIG9mZmljZSwgd2hpbGUgdGhlIGJ1c3lib2RpZXMgYW5kIGlubm92YXRvcnMsIHdobyB3aXRoZXJlZCBpbnRvIGluc2lnbmlmaWNhbmNlIGZyb20gdGhlIHZlcnkgZmFjdCB0aGF0IHRoZXkgaGVsZCBubyBvZmZpY2UgYW5kIHJhaXNlZCBubyB1cHJvYXJzLCB3ZXJlIHRhdWdodCBieSBoaW0gdG8gYmUgZm9uZCBvZiBob21lIGFuZCB0byBkZWxpZ2h0IGluIHRpbGxpbmcgdGhlIHNvaWwuIFdoZW4gaGUgc2F3IHRoYXQgWGVub2NyYXRlcyBwYWlkIHRoZSByZXNpZGVudCBhbGllbiB0YXgsIGhlIG9mZmVyZWQgdG8gZW5yb2xsIGhpbSBhcyBhIGNpdGl6ZW47IGJ1dCB0aGUgcGhpbG9zb3BoZXIgcmVmdXNlZCwgc2F5aW5nIHRoYXQgaGUgY291bGQgbm90IHRha2UgcGFydCBpbiBhbiBhZG1pbmlzdHJhdGlvbiBmb3IgdGhlIHByZXZlbnRpb24gb2Ygd2hpY2ggaGUgaGFkIHNlcnZlZCBvbiBhbiBlbWJhc3N5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBob2MuIDI3LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2aWk8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMjcuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpaTwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNZW55bGx1cyBvZmZlcmVkIFBob2Npb24gYSBnaWZ0IG9mIG1vbmV5LCBoZSByZXBsaWVkIHRoYXQgbmVpdGhlciB3YXMgTWVueWxsdXMgYmV0dGVyIHRoYW4gQWxleGFuZGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTguMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpaTwvYmlibD4uPC9ub3RlPiBub3Igd2FzIHRoZXJlIGFueSBzdHJvbmdlciByZWFzb24gd2h5IHRoZSBtYW4gd2hvIHdvdWxkIG5vdCBhY2NlcHQgaXQgdGhlbiBzaG91bGQgdGFrZSBpdCBub3cuIE1lbnlsbHVzLCBob3dldmVyLCBiZWdnZWQgaGltIHRvIHRha2UgdGhlIG1vbmV5IGZvciBoaXMgc29uIFBob2N1cyBhdCBsZWFzdCwgd2hlcmV1cG9uIFBob2Npb24gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgUGhvY3VzLCBzaG91bGQgaGUgYmUgY29udmVydGVkIHRvIHNvYnJpZXR5IG9mIGxpZmUsIGhpcyBwYXRyaW1vbnkgd2lsbCBiZSBlbm91Z2g7IGJ1dCBhcyBoZSBpcyBub3csIG5vdGhpbmcgaXMgc3VmZmljaWVudC48L3E+IEFnYWluLCB3aGVuIEFudGlwYXRlciBkZXNpcmVkIGhpbSB0byBkbyBzb21ldGhpbmcgdGhhdCB3YXMgbm90IHNlZW1seSwgaGUgZ2F2ZSBoaW0gYSBzaGFycGVyIGFuc3dlciwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGlwYXRlciBjYW5ub3QgaGF2ZSBmcm9tIG1lIHRoZSBzZXJ2aWNlcyBvZiBmcmllbmQgYW5kIGZsYXR0ZXJlciBhdCBvbmNlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgQW50aXBhdGVyIGhpbXNlbGYgb25jZSBzYWlkLCBhcyB3ZSBhcmUgdG9sZCwgdGhhdCBiZSBoYWQgdHdvIGZyaWVuZHMgYXQgQXRoZW5zLCBQaG9jaW9uIGFuZCBEZW1hZGVzOyBvbmUgaGUgY291bGQgbmV2ZXIgcGVyc3VhZGUgdG8gdGFrZSBhbnl0aGluZywgdGhlIG90aGVyIGhlIGNvdWxkIG5ldmVyIHNhdGlzZnkgd2l0aCBoaXMgZ2lmdHMuIEFuZCB2ZXJpbHkgUGhvY2lvbiBkaXNwbGF5ZWQgYXMgYSB2aXJ0dWUgdGhlIHBvdmVydHkgaW4gd2hpY2g7IHRob3VnaCBoZSBoYWQgYmVlbiBzbyBtYW55IHRpbWVzIGEgZ2VuZXJhbCBvZiBBdGhlbnMgYW5kIGhhZCBlbmpveWVkIHRoZSBmcmllbmRzaGlwIG9mIGtpbmdzLCBoZSBoYWQgY29tZSB0byBvbGQgYWdlOyB3aGVyZWFzIERlbWFkZXMgbWFkZSBhIGdyZWF0IHBhcmFkZSBvZiBoaXMgd2VhbHRoLCBldmVuIHRob3VnaCBoZSB3YXMgdmlvbGF0aW5nIHRoZSBsYXdzIHRvIGRvIHNvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW5zdGFuY2UsIHRoZXJlIHdhcyBhIGxhdyBvZiBBdGhlbnMgYXQgdGhpcyB0aW1lIGZvcmJpZGRpbmcgYSBjaG9yZWd1cyB0byBoYXZlIGEgZm9yZWlnbmVyIGluIGhpcyBjaG9ydXMsIHVuZGVyIHBlbmFsdHkgb2YgYSB0aG91c2FuZCBkcmFjaG1hczsgYnV0IERlbWFkZXMgcHJlc2VudGVkIGEgY2hvcnVzIG9mIGEgaHVuZHJlZCBtZW1iZXJzIGFsbCBvZiB3aG9tIHdlcmUgZm9yZWlnbmVycywgYW5kIGF0IHRoZSBzYW1lIHRpbWUgYnJvdWdodCBpbnRvIHRoZSB0aGVhdHJlIGhpcyBmaW5lIG9mIGEgdGhvdXNhbmQgZHJhY2htYXMgZm9yIGVhY2ggb25lIG9mIHRoZW0uIEFnYWluLCB3aGVuIGhlIHdhcyBicmluZ2luZyBob21lIGEgd2lmZSBmb3IgaGlzIHNvbiBEZW1lYXMsIGhlIHNhaWQgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoZW4gSSBtYXJyaWVkIHRoeSBtb3RoZXIsIG15IHNvbiwgbm90IGV2ZW4gYSBuZWlnaGJvdXIgbm90aWNlZCBpdDsgYnV0IHRvIHRoeSBudXB0aWFscyBraW5ncyBhbmQgcG90ZW50YXRlcyBhcmUgY29udHJpYnV0aW5nLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNZW55bGx1cyBvZmZlcmVkIFBob2Npb24gYSBnaWZ0IG9mIG1vbmV5LCBoZSByZXBsaWVkIHRoYXQgbmVpdGhlciB3YXMgTWVueWxsdXMgYmV0dGVyIHRoYW4gQWxleGFuZGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBob2MuIDE4LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpaWk8L2JpYmw+Ljwvbm90ZT4gbm9yIHdhcyB0aGVyZSBhbnkgc3Ryb25nZXIgcmVhc29uIHdoeSB0aGUgbWFuIHdobyB3b3VsZCBub3QgYWNjZXB0IGl0IHRoZW4gc2hvdWxkIHRha2UgaXQgbm93LiBNZW55bGx1cywgaG93ZXZlciwgYmVnZ2VkIGhpbSB0byB0YWtlIHRoZSBtb25leSBmb3IgaGlzIHNvbiBQaG9jdXMgYXQgbGVhc3QsIHdoZXJldXBvbiBQaG9jaW9uIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTguMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmlpaTwvYmlibD4uPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgUGhvY3VzLCBzaG91bGQgaGUgYmUgY29udmVydGVkIHRvIHNvYnJpZXR5IG9mIGxpZmUsIGhpcyBwYXRyaW1vbnkgd2lsbCBiZSBlbm91Z2g7IGJ1dCBhcyBoZSBpcyBub3csIG5vdGhpbmcgaXMgc3VmZmljaWVudC48L3E+IEFnYWluLCB3aGVuIEFudGlwYXRlciBkZXNpcmVkIGhpbSB0byBkbyBzb21ldGhpbmcgdGhhdCB3YXMgbm90IHNlZW1seSwgaGUgZ2F2ZSBoaW0gYSBzaGFycGVyIGFuc3dlciwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW50aXBhdGVyIGNhbm5vdCBoYXZlIGZyb20gbWUgdGhlIHNlcnZpY2VzIG9mIGZyaWVuZCBhbmQgZmxhdHRlcmVyIGF0IG9uY2UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBbnRpcGF0ZXIgaGltc2VsZiBvbmNlIHNhaWQsIGFzIHdlIGFyZSB0b2xkLCB0aGF0IGJlIGhhZCB0d28gZnJpZW5kcyBhdCBBdGhlbnMsIFBob2Npb24gYW5kIERlbWFkZXM7IG9uZSBoZSBjb3VsZCBuZXZlciBwZXJzdWFkZSB0byB0YWtlIGFueXRoaW5nLCB0aGUgb3RoZXIgaGUgY291bGQgbmV2ZXIgc2F0aXNmeSB3aXRoIGhpcyBnaWZ0cy4gQW5kIHZlcmlseSBQaG9jaW9uIGRpc3BsYXllZCBhcyBhIHZpcnR1ZSB0aGUgcG92ZXJ0eSBpbiB3aGljaDsgdGhvdWdoIGhlIGhhZCBiZWVuIHNvIG1hbnkgdGltZXMgYSBnZW5lcmFsIG9mIEF0aGVucyBhbmQgaGFkIGVuam95ZWQgdGhlIGZyaWVuZHNoaXAgb2Yga2luZ3MsIGhlIGhhZCBjb21lIHRvIG9sZCBhZ2U7IHdoZXJlYXMgRGVtYWRlcyBtYWRlIGEgZ3JlYXQgcGFyYWRlIG9mIGhpcyB3ZWFsdGgsIGV2ZW4gdGhvdWdoIGhlIHdhcyB2aW9sYXRpbmcgdGhlIGxhd3MgdG8gZG8gc28uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGhlcmUgd2FzIGEgbGF3IG9mIEF0aGVucyBhdCB0aGlzIHRpbWUgZm9yYmlkZGluZyBhIGNob3JlZ3VzIHRvIGhhdmUgYSBmb3JlaWduZXIgaW4gaGlzIGNob3J1cywgdW5kZXIgcGVuYWx0eSBvZiBhIHRob3VzYW5kIGRyYWNobWFzOyBidXQgRGVtYWRlcyBwcmVzZW50ZWQgYSBjaG9ydXMgb2YgYSBodW5kcmVkIG1lbWJlcnMgYWxsIG9mIHdob20gd2VyZSBmb3JlaWduZXJzLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBicm91Z2h0IGludG8gdGhlIHRoZWF0cmUgaGlzIGZpbmUgb2YgYSB0aG91c2FuZCBkcmFjaG1hcyBmb3IgZWFjaCBvbmUgb2YgdGhlbS4gQWdhaW4sIHdoZW4gaGUgd2FzIGJyaW5naW5nIGhvbWUgYSB3aWZlIGZvciBoaXMgc29uIERlbWVhcywgaGUgc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIEkgbWFycmllZCB0aHkgbW90aGVyLCBteSBzb24sIG5vdCBldmVuIGEgbmVpZ2hib3VyIG5vdGljZWQgaXQ7IGJ1dCB0byB0aHkgbnVwdGlhbHMga2luZ3MgYW5kIHBvdGVudGF0ZXMgYXJlIGNvbnRyaWJ1dGluZy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIEF0aGVuaWFucyBpbXBvcnR1bmVkIFBob2Npb24gdG8gZ28gYW5kIHBlcnN1YWRlIEFudGlwYXRlciB0byByZW1vdmUgdGhlIGdhcnJpc29uLCB3aGV0aGVyIGl0IHdhcyBiZWNhdXNlIGhlIGRlc3BhaXJlZCBvZiBwZXJzdWFkaW5nIGhpbSwgb3IgYmVjYXVzZSBoZSBzYXcgdGhhdCB0aGUgcGVvcGxlIHdlcmUgbW9yZSBzZW5zaWJsZSBhbmQgY29uZHVjdGVkIHB1YmxpYyBhZmZhaXJzIHdpdGggbW9yZSBkZWNvcnVtIHdoZW4gdGhleSB3ZXJlIHRodXMgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBmZWFyLCBoZSBjb250aW51YWxseSByZWplY3RlZCB0aGF0IG1pc3Npb247IGhlIGRpZCwgaG93ZXZlciwgcGVyc3VhZGUgQW50aXBhdGVyIG5vdCB0byBleGFjdCB0aGUgbW9uZXlzIGR1ZSBmcm9tIHRoZSBjaXR5LCBidXQgdG8gZGVsYXksIGFuZCBwb3N0cG9uZSB0aGVpciBwYXltZW50LiBUaGUgcGVvcGxlLCBhY2NvcmRpbmdseSwgdHJhbnNmZXJyZWQgdGhlaXIgaW1wb3J0dW5pdGllcyB0byBEZW1hZGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZSByZWFkaWx5IHVuZGVydG9vayB0aGUgbWlzc2lvbiwgYW5kIHRha2luZyBoaXMgc29uIHdpdGggaGltIHNldCBvdXQgZm9yIE1hY2Vkb25pYS4gSGUgYXJyaXZlZCB0aGVyZSwgYXMgc29tZSBoZWF2ZW5seSBwb3dlciwgZG91YnRsZXNzLCB3b3VsZCBoYXZlIGl0LCBwcmVjaXNlbHkgYXQgdGhlIHRpbWUgd2hlbiBBbnRpcGF0ZXIgd2FzIGFscmVhZHkgYWZmbGljdGVkIHdpdGggc2lja25lc3MsIGFuZCB3aGVuIENhc3NhbmRlciwgd2hvIGhhZCBhc3N1bWVkIGNvbnRyb2wgb2YgYWZmYWlycywgaGFkIGZvdW5kIGEgbGV0dGVyIHdoaWNoIERlbWFkZXMgaGFkIHdyaXR0ZW4gdG8gQW50aWdvbnVzIGluIEFzaWEsIGJlc2VlY2hpbmcgaGltIHRvIHByZXNlbnQgaGltc2VsZiBzdWRkZW5seSBpbiBHcmVlY2UgYW5kIE1hY2Vkb25pYSwgd2hpY2ggaHVuZyBieSBhbiBvbGQgYW5kIHJvdHRlbiB0aHJlYWQsIGFzIGhlIGZhY2V0aW91c2x5IGNhbGxlZCBBbnRpcGF0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgQ2Fzc2FuZGVyIHNhdyBEZW1hZGVzIGFmdGVyIGhpcyBhcnJpdmFsLCBoZSBhcnJlc3RlZCBoaW0sIGFuZCBmaXJzdCBzbGF1Z2h0ZXJlZCBoaXMgc29uLCB3aG9tIGhlIGhhZCBicm91Z2h0IHNvIG5lYXIgdGhhdCB0aGUgZm9sZHMgb2YgaGlzIGZhdGhlcidzIHJvYmUgY2F1Z2h0IHRoZSBibG9vZCBvZiBoaXMgbXVyZGVyIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGl0LCBhbmQgdGhlbiwgYWZ0ZXIgaGVhcGluZyBtdWNoIGluc3VsdCBhbmQgYWJ1c2UgdXBvbiBoaW0gZm9yIGhpcyBpbmdyYXRpdHVkZSBhbmQgdHJlYWNoZXJ5LCBzbGV3IHRoZSBmYXRoZXIgdG9vLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIEF0aGVuaWFucyBpbXBvcnR1bmVkIFBob2Npb24gdG8gZ28gYW5kIHBlcnN1YWRlIEFudGlwYXRlciB0byByZW1vdmUgdGhlIGdhcnJpc29uLCB3aGV0aGVyIGl0IHdhcyBiZWNhdXNlIGhlIGRlc3BhaXJlZCBvZiBwZXJzdWFkaW5nIGhpbSwgb3IgYmVjYXVzZSBoZSBzYXcgdGhhdCB0aGUgcGVvcGxlIHdlcmUgbW9yZSBzZW5zaWJsZSBhbmQgY29uZHVjdGVkIHB1YmxpYyBhZmZhaXJzIHdpdGggbW9yZSBkZWNvcnVtIHdoZW4gdGhleSB3ZXJlIHRodXMgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBmZWFyLCBoZSBjb250aW51YWxseSByZWplY3RlZCB0aGF0IG1pc3Npb247IGhlIGRpZCwgaG93ZXZlciwgcGVyc3VhZGUgQW50aXBhdGVyIG5vdCB0byBleGFjdCB0aGUgbW9uZXlzIGR1ZSBmcm9tIHRoZSBjaXR5LCBidXQgdG8gZGVsYXksIGFuZCBwb3N0cG9uZSB0aGVpciBwYXltZW50LiBUaGUgcGVvcGxlLCBhY2NvcmRpbmdseSwgdHJhbnNmZXJyZWQgdGhlaXIgaW1wb3J0dW5pdGllcyB0byBEZW1hZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHJlYWRpbHkgdW5kZXJ0b29rIHRoZSBtaXNzaW9uLCBhbmQgdGFraW5nIGhpcyBzb24gd2l0aCBoaW0gc2V0IG91dCBmb3IgTWFjZWRvbmlhLiBIZSBhcnJpdmVkIHRoZXJlLCBhcyBzb21lIGhlYXZlbmx5IHBvd2VyLCBkb3VidGxlc3MsIHdvdWxkIGhhdmUgaXQsIHByZWNpc2VseSBhdCB0aGUgdGltZSB3aGVuIEFudGlwYXRlciB3YXMgYWxyZWFkeSBhZmZsaWN0ZWQgd2l0aCBzaWNrbmVzcywgYW5kIHdoZW4gQ2Fzc2FuZGVyLCB3aG8gaGFkIGFzc3VtZWQgY29udHJvbCBvZiBhZmZhaXJzLCBoYWQgZm91bmQgYSBsZXR0ZXIgd2hpY2ggRGVtYWRlcyBoYWQgd3JpdHRlbiB0byBBbnRpZ29udXMgaW4gQXNpYSwgYmVzZWVjaGluZyBoaW0gdG8gcHJlc2VudCBoaW1zZWxmIHN1ZGRlbmx5IGluIEdyZWVjZSBhbmQgTWFjZWRvbmlhLCB3aGljaCBodW5nIGJ5IGFuIG9sZCBhbmQgcm90dGVuIHRocmVhZCwgYXMgaGUgZmFjZXRpb3VzbHkgY2FsbGVkIEFudGlwYXRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgQ2Fzc2FuZGVyIHNhdyBEZW1hZGVzIGFmdGVyIGhpcyBhcnJpdmFsLCBoZSBhcnJlc3RlZCBoaW0sIGFuZCBmaXJzdCBzbGF1Z2h0ZXJlZCBoaXMgc29uLCB3aG9tIGhlIGhhZCBicm91Z2h0IHNvIG5lYXIgdGhhdCB0aGUgZm9sZHMgb2YgaGlzIGZhdGhlcidzIHJvYmUgY2F1Z2h0IHRoZSBibG9vZCBvZiBoaXMgbXVyZGVyIGFuZCB3ZXJlIGZpbGxlZCB3aXRoIGl0LCBhbmQgdGhlbiwgYWZ0ZXIgaGVhcGluZyBtdWNoIGluc3VsdCBhbmQgYWJ1c2UgdXBvbiBoaW0gZm9yIGhpcyBpbmdyYXRpdHVkZSBhbmQgdHJlYWNoZXJ5LCBzbGV3IHRoZSBmYXRoZXIgdG9vLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBBbnRpcGF0ZXIgZGllZCwgYWZ0ZXIgYXBwb2ludGluZyBQb2x5c3BlcmNob24gZ2VuZXJhbC1pbi1jaGllZiwgYW5kIENhc3NhbmRlciBjaGlsaWFyY2gsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IHRvIGJlIHRha2VuIGluIGl0cyBsaXRlcmFsIG1lYW5pbmcgb2YgPGdsb3NzPmNvbW1hbmRlciBvZiBhIHRob3VzYW5kPC9nbG9zcz4sIGJ1dCBpbiB0aGUgZ2VuZXJhbCBzZW5zZSBvZiA8Z2xvc3M+bGlldXRlbmFudC1nZW5lcmFsPC9nbG9zcz4sIHNlY29uZCBpbiBjb21tYW5kLiBBbnRpcGF0ZXIgdmFpbmx5IHNvdWdodCB0byBkZXByaXZlIGhpcyBzb24gb2YgdGhlIHN1Y2Nlc3Npb24uPC9ub3RlPiBDYXNzYW5kZXIgYXQgb25jZSBiZWNhbWUgcmViZWxsaW91cywgcHJvbXB0bHkgdG9vayB0aGUgZ292ZXJubWVudCBpbnRvIGhpcyBvd24gaGFuZHMsIGFuZCBzZW50IE5pY2Fub3Igd2l0aCBhbGwgc3BlZWQgdG8gcmVsaWV2ZSBNZW55bGx1cyBmcm9tIHRoZSBjb21tYW5kIG9mIHRoZSBnYXJyaXNvbiBhdCBBdGhlbnMsIGJpZGRpbmcgaGltIHRha2Ugb3ZlciBNdW55Y2hpYSBiZWZvcmUgQW50aXBhdGVyJ3MgZGVhdGggYmVjYW1lIGtub3duLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBkb25lLCBhbmQgd2hlbiwgYWZ0ZXIgYSBmZXcgZGF5cywgdGhlIEF0aGVuaWFucyBsZWFybmVkIHRoYXQgQW50aXBhdGVyIHdhcyBkZWFkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMxOSBCLkMuPC9ub3RlPiB0aGV5IGJsYW1lZCBQaG9jaW9uIHNldmVyZWx5LCBhbGxlZ2luZyB0aGF0IGhlIGhhZCBrbm93biBhYm91dCBpdCBiZWZvcmUgYW5kIGhhZCBoZWxkIGhpcyBwZWFjZSBhcyBhIGZhdm91ciB0byBOaWNhbm9yLiBQaG9jaW9uLCBob3dldmVyLCBwYWlkIG5vIGhlZWQgdG8gdGhlc2UgY2hhcmdlcywgYnV0IGJ5IGludGVydmlld3MgYW5kIGRpc2N1c3Npb25zIHdpdGggTmljYW5vciByZW5kZXJlZCBoaW0gaW4gZ2VuZXJhbCBtaWxkIGFuZCBncmFjaW91cyB0byB0aGUgQXRoZW5pYW5zLCBhbmQsIGluIHBhcnRpY3VsYXIsIHBlcnN1YWRlZCBoaW0gdG8gdW5kZXJ0YWtlIHN1bmRyeSBleHBlbnNpdmUgZXhoaWJpdGlvbnMgYXMgZGlyZWN0b3Igb2YgZ2FtZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQW50aXBhdGVyIGRpZWQsIGFmdGVyIGFwcG9pbnRpbmcgUG9seXNwZXJjaG9uIGdlbmVyYWwtaW4tY2hpZWYsIGFuZCBDYXNzYW5kZXIgY2hpbGlhcmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm90IHRvIGJlIHRha2VuIGluIGl0cyBsaXRlcmFsIG1lYW5pbmcgb2YgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Y29tbWFuZGVyIG9mIGEgdGhvdXNhbmQ8L2dsb3NzPiwgYnV0IGluIHRoZSBnZW5lcmFsIHNlbnNlIG9mIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmxpZXV0ZW5hbnQtZ2VuZXJhbDwvZ2xvc3M+LCBzZWNvbmQgaW4gY29tbWFuZC4gQW50aXBhdGVyIHZhaW5seSBzb3VnaHQgdG8gZGVwcml2ZSBoaXMgc29uIG9mIHRoZSBzdWNjZXNzaW9uLjwvbm90ZT4gQ2Fzc2FuZGVyIGF0IG9uY2UgYmVjYW1lIHJlYmVsbGlvdXMsIHByb21wdGx5IHRvb2sgdGhlIGdvdmVybm1lbnQgaW50byBoaXMgb3duIGhhbmRzLCBhbmQgc2VudCBOaWNhbm9yIHdpdGggYWxsIHNwZWVkIHRvIHJlbGlldmUgTWVueWxsdXMgZnJvbSB0aGUgY29tbWFuZCBvZiB0aGUgZ2Fycmlzb24gYXQgQXRoZW5zLCBiaWRkaW5nIGhpbSB0YWtlIG92ZXIgTXVueWNoaWEgYmVmb3JlIEFudGlwYXRlcidzIGRlYXRoIGJlY2FtZSBrbm93bi4gCgkJCQk8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5jb21tYW5kZXIgb2YgYSB0aG91c2FuZDwvZ2xvc3M+LCBidXQgaW4gdGhlIGdlbmVyYWwgc2Vuc2Ugb2YgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bGlldXRlbmFudC1nZW5lcmFsPC9nbG9zcz4sIHNlY29uZCBpbiBjb21tYW5kLiBBbnRpcGF0ZXIgdmFpbmx5IHNvdWdodCB0byBkZXByaXZlIGhpcyBzb24gb2YgdGhlIHN1Y2Nlc3Npb24uPC90cmFuc2xhdGlvbj4="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGRvbmUsIGFuZCB3aGVuLCBhZnRlciBhIGZldyBkYXlzLCB0aGUgQXRoZW5pYW5zIGxlYXJuZWQgdGhhdCBBbnRpcGF0ZXIgd2FzIGRlYWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMTkgQi5DLjwvbm90ZT4gdGhleSBibGFtZWQgUGhvY2lvbiBzZXZlcmVseSwgYWxsZWdpbmcgdGhhdCBoZSBoYWQga25vd24gYWJvdXQgaXQgYmVmb3JlIGFuZCBoYWQgaGVsZCBoaXMgcGVhY2UgYXMgYSBmYXZvdXIgdG8gTmljYW5vci4gUGhvY2lvbiwgaG93ZXZlciwgcGFpZCBubyBoZWVkIHRvIHRoZXNlIGNoYXJnZXMsIGJ1dCBieSBpbnRlcnZpZXdzIGFuZCBkaXNjdXNzaW9ucyB3aXRoIE5pY2Fub3IgcmVuZGVyZWQgaGltIGluIGdlbmVyYWwgbWlsZCBhbmQgZ3JhY2lvdXMgdG8gdGhlIEF0aGVuaWFucywgYW5kLCBpbiBwYXJ0aWN1bGFyLCBwZXJzdWFkZWQgaGltIHRvIHVuZGVydGFrZSBzdW5kcnkgZXhwZW5zaXZlIGV4aGliaXRpb25zIGFzIGRpcmVjdG9yIG9mIGdhbWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbWVhbnRpbWUsIHRvbywgUG9seXNwZXJjaG9uLCB3aG8gaGFkIHRoZSBraW5nPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGltYmVjaWxlIFBoaWxpcCBBcnJoaWRhZXVzLCBoYWxmLWJyb3RoZXIgb2YgQWxleGFuZGVyLiBUaGUgb3RoZXIga2luZywgdGhlIGxpdHRsZSBzb24gb2YgQWxleGFuZGVyIGJ5IFJveGFuYSwgd2FzIGluIEVwZWlydXMgd2l0aCBPbHltcGlhcywgdGhlIG1vdGhlciBvZiBBbGV4YW5kZXIuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkV1bWVuZXM8L3RpdGxlPiwgaWlpLiAxPC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy43IiB2YWxpZD0ieWVzIj43PC9iaWJsPiwgd2l0aCB0aGUgbm90ZXMuPC9ub3RlPiBpbiBoaXMgb3duIHBlcnNvbmFsIGNoYXJnZSBhbmQgd2FzIHNlZWtpbmcgdG8gdGh3YXJ0IHRoZSBzY2hlbWVzIG9mIENhc3NhbmRlciwgc2VudCBhIGxldHRlciB0byB0aGUgY2l0aXplbnMgb2YgQXRoZW5zLCBhbm5vdW5jaW5nIHRoYXQgdGhlIGtpbmcgcmVzdG9yZWQgdG8gdGhlbSB0aGVpciBkZW1vY3JhY3kgYW5kIG9yZGVyZWQgdGhhdCBhbGwgQXRoZW5pYW5zIHNob3VsZCB0YWtlIHBhcnQgaW4gdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSBjaXR5IGFjY29yZGluZyB0byB0aGVpciBlYXJsaWVyIHBvbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgYSBwbG90IGFnYWluc3QgUGhvY2lvbi4gRm9yIFBvbHlzcGVyY2hvbiB3YXMgc2NoZW1pbmcgKGFzIGhlIHBsYWlubHkgc2hvd2VkIGEgbGl0dGxlIGxhdGVyKSB0byBkaXNwb3NlIHRoZSBjaXR5IGluIGhpcyBvd24gaW50ZXJlc3RzLCBhbmQgaGFkIG5vIGhvcGUgb2Ygc3VjY2VlZGluZyB1bmxlc3MgUGhvY2lvbiB3YXMgYmFuaXNoZWQ7IGhlIHdhcyBzdXJlLCBob3dldmVyLCB0aGF0IFBob2Npb24gd291bGQgYmUgYmFuaXNoZWQgaWYgdGhlIGRpc2ZyYW5jaGlzZWQgY2l0aXplbnMgb3ZlcndoZWxtZWQgdGhlIGFkbWluaXN0cmF0aW9uLCBhbmQgdGhlIHRyaWJ1bmFsIHdhcyBhZ2FpbiBhdCB0aGUgbWVyY3kgb2YgZGVtYWdvZ3VlcyBhbmQgcHVibGljIGluZm9ybWVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1lYW50aW1lLCB0b28sIFBvbHlzcGVyY2hvbiwgd2hvIGhhZCB0aGUga2luZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGltYmVjaWxlIFBoaWxpcCBBcnJoaWRhZXVzLCBoYWxmLWJyb3RoZXIgb2YgQWxleGFuZGVyLiBUaGUgb3RoZXIga2luZywgdGhlIGxpdHRsZSBzb24gb2YgQWxleGFuZGVyIGJ5IFJveGFuYSwgd2FzIGluIEVwZWlydXMgd2l0aCBPbHltcGlhcywgdGhlIG1vdGhlciBvZiBBbGV4YW5kZXIuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmVzPC90aXRsZT4sIGlpaS4gMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy43IiB2YWxpZD0ieWVzIj43PC9iaWJsPiwgd2l0aCB0aGUgbm90ZXMuPC9ub3RlPiBpbiBoaXMgb3duIHBlcnNvbmFsIGNoYXJnZSBhbmQgd2FzIHNlZWtpbmcgdG8gdGh3YXJ0IHRoZSBzY2hlbWVzIG9mIENhc3NhbmRlciwgc2VudCBhIGxldHRlciB0byB0aGUgY2l0aXplbnMgb2YgQXRoZW5zLCBhbm5vdW5jaW5nIHRoYXQgdGhlIGtpbmcgcmVzdG9yZWQgdG8gdGhlbSB0aGVpciBkZW1vY3JhY3kgYW5kIG9yZGVyZWQgdGhhdCBhbGwgQXRoZW5pYW5zIHNob3VsZCB0YWtlIHBhcnQgaW4gdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSBjaXR5IGFjY29yZGluZyB0byB0aGVpciBlYXJsaWVyIHBvbGl0eS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV1bWVuZXM8L3RpdGxlPiwgaWlpLiAxPC9iaWJsPiBhbmQgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpaWkuIDE8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDMuNyIgdmFsaWQ9InllcyI+NzwvYmlibD4sIHdpdGggdGhlIG5vdGVzLjwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGEgcGxvdCBhZ2FpbnN0IFBob2Npb24uIEZvciBQb2x5c3BlcmNob24gd2FzIHNjaGVtaW5nIChhcyBoZSBwbGFpbmx5IHNob3dlZCBhIGxpdHRsZSBsYXRlcikgdG8gZGlzcG9zZSB0aGUgY2l0eSBpbiBoaXMgb3duIGludGVyZXN0cywgYW5kIGhhZCBubyBob3BlIG9mIHN1Y2NlZWRpbmcgdW5sZXNzIFBob2Npb24gd2FzIGJhbmlzaGVkOyBoZSB3YXMgc3VyZSwgaG93ZXZlciwgdGhhdCBQaG9jaW9uIHdvdWxkIGJlIGJhbmlzaGVkIGlmIHRoZSBkaXNmcmFuY2hpc2VkIGNpdGl6ZW5zIG92ZXJ3aGVsbWVkIHRoZSBhZG1pbmlzdHJhdGlvbiwgYW5kIHRoZSB0cmlidW5hbCB3YXMgYWdhaW4gYXQgdGhlIG1lcmN5IG9mIGRlbWFnb2d1ZXMgYW5kIHB1YmxpYyBpbmZvcm1lcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZSBBdGhlbmlhbnMgd2VyZSBzb21ld2hhdCBzdGlycmVkIGJ5IHRoZXNlIGNvbW11bmljYXRpb25zLCBOaWNhbm9yIHdpc2hlZCB0byBhZGRyZXNzIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TmljYW5vciwgYWN0aW5nIGluIHRoZSBpbnRlcmVzdHMgb2YgQ2Fzc2FuZGVyLCB3aXNoZWQgdG8gZXhwb3NlIHRvIHRoZSBBdGhlbmlhbnMgdGhlIGRlc2lnbnMgb2YgUG9seXNwZXJjaG9uLjwvbm90ZT4gYW5kIGFmdGVyIGEgY291bmNpbCBoYWQgYmVlbiBjb252ZW5lZCBpbiBQZWlyYWV1cywgaGUgY2FtZSBiZWZvcmUgaXQsIHJlbHlpbmcgdXBvbiBQaG9jaW9uIGZvciB0aGUgc2FmZXR5IG9mIGhpcyBwZXJzb24uIEJ1dCBEZXJjeWxsdXMsIHRoZSBBdGhlbmlhbiBnZW5lcmFsIGluIGNvbW1hbmQgb2YgdGhlIGRpc3RyaWN0LCBtYWRlIGFuIGF0dGVtcHQgdG8gYXJyZXN0IGhpbSwgd2hlcmV1cG9uIE5pY2Fub3IsIHdobyBiZWNhbWUgYXdhcmUgb2YgdGhlIGF0dGVtcHQgaW4gdGltZSwgZGFzaGVkIGF3YXksIGFuZCB3YXMgY2xlYXJseSBhYm91dCB0byBpbmZsaWN0IHNwZWVkeSBwdW5pc2htZW50IHVwb24gdGhlIGNpdHkuIFBob2Npb24sIGhvd2V2ZXIsIHdoZW4gYXNzYWlsZWQgZm9yIGxldHRpbmcgTmljYW5vciBnbyBhbmQgbm90IGRldGFpbmluZyBoaW0sIHNhaWQgdGhhdCBoZSBoYWQgY29uZmlkZW5jZSBpbiBOaWNhbm9yIGFuZCBleHBlY3RlZCBubyBldmlsIGF0IGhpcyBoYW5kczsgYnV0IGluIGFueSBjYXNlLCBoZSB3b3VsZCByYXRoZXIgYmUgZm91bmQgc3VmZmVyaW5nIHdyb25nIHRoYW4gZG9pbmcgd3JvbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc3VjaCBhbiB1dHRlcmFuY2UgYXMgdGhpcyBtaWdodCBzZWVtIGhvbm91cmFibGUgYW5kIG5vYmxlIGluIG9uZSB3aG8gaGFkIHJlZ2FyZCB0byBoaXMgb3duIGludGVyZXN0cyBhbG9uZTsgYnV0IGhlIHdobyBlbmRhbmdlcnMgaGlzIGNvdW50cnkncyBzYWZldHksIGFuZCB0aGF0LCB0b28sIHdoZW4gaGUgaXMgaGVyIGNvbW1hbmRpbmcgZ2VuZXJhbCwgdHJhbnNncmVzc2VzLCBJIHN1c3BlY3QsIGEgbGFyZ2VyIGFuZCBtb3JlIHZlbmVyYWJsZSBvYmxpZ2F0aW9uIG9mIGp1c3RpY2UgdG93YXJkcyBoaXMgZmVsbG93IGNpdGl6ZW5zLiBGb3IgaXQgY2Fubm90IGV2ZW4gYmUgc2FpZCB0aGF0IGl0IHdhcyB0aGUgZmVhciBvZiBwbHVuZ2luZyB0aGUgY2l0eSBpbnRvIHdhciB3aGljaCBtYWRlIFBob2Npb24gcmVmcmFpbiBmcm9tIHNlaXppbmcgTmljYW5vciwgYnV0IHRoYXQgaGUgc291Z2h0IHRvIGV4Y3VzZSBoaW1zZWxmIG9uIG90aGVyIGdyb3VuZHMgYnkgcHJvdGVzdGF0aW9ucyBvZiBnb29kIGZhaXRoIGFuZCBqdXN0aWNlLCBpbiBvcmRlciB0aGF0IE5pY2Fub3IgbWlnaHQgcmVzcGVjdCB0aGVzZSBvYmxpZ2F0aW9ucyBhbmQga2VlcCB0aGUgcGVhY2UgYW5kIGRvIHRoZSBBdGhlbmlhbnMgbm8gd3Jvbmc7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm5heSwgaXQgd291bGQgc2VlbSB0aGF0IGhlIHJlYWxseSBoYWQgdG9vIHN0cm9uZyBhIGNvbmZpZGVuY2UgaW4gTmljYW5vci4gRm9yIHRob3VnaCBtYW55IGdhdmUgd2FybmluZyBhZ2FpbnN0IHRoYXQgb2ZmaWNlciBhbmQgYWNjdXNlZCBoaW0gb2YgaG9zdGlsZSBkZXNpZ25zIGFnYWluc3QgdGhlIFBlaXJhZXVzLCBpbiB0aGF0IGhlIHdhcyBzZW5kaW5nIG1lcmNlbmFyaWVzIGFjcm9zcyB0byBTYWxhbWlzLCBhbmQgdGFtcGVyaW5nIHdpdGggc29tZSBvZiB0aGUgcmVzaWRlbnRzIGluIFBlaXJhZXVzLCBQaG9jaW9uIHdvdWxkIG5vdCBnaXZlIGhlZWQgdG8gdGhlIHN0b3J5IG5vciBiZWxpZXZlIGl0IGF0IGFsbC4gSW5kZWVkLCBldmVuIGFmdGVyIFBoaWxvbWVsdXMgb2YgTGFtcHRyYWUgYnJvdWdodCBpbiBhIGRlY3JlZSB0aGF0IGFsbCBBdGhlbmlhbnMgc2hvdWxkIHN0YW5kIHVuZGVyIGFybXMgYW5kIGF3YWl0IG9yZGVycyBmcm9tIFBob2Npb24gdGhlaXIgZ2VuZXJhbCwgaGUgcGFpZCBubyBhdHRlbnRpb24gdG8gdGhlIG1hdHRlciwgdW50aWwgTmljYW5vciBsZWQgaGlzIHRyb29wcyBmb3J0aCBmcm9tIE11bnljaGlhIGFuZCBiZWdhbiB0byBydW4gdHJlbmNoZXMgYXJvdW5kIHRoZSBQZWlyYWV1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIHRoZSBBdGhlbmlhbnMgd2VyZSBzb21ld2hhdCBzdGlycmVkIGJ5IHRoZXNlIGNvbW11bmljYXRpb25zLCBOaWNhbm9yIHdpc2hlZCB0byBhZGRyZXNzIHRoZW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OaWNhbm9yLCBhY3RpbmcgaW4gdGhlIGludGVyZXN0cyBvZiBDYXNzYW5kZXIsIHdpc2hlZCB0byBleHBvc2UgdG8gdGhlIEF0aGVuaWFucyB0aGUgZGVzaWducyBvZiBQb2x5c3BlcmNob24uPC9ub3RlPiBhbmQgYWZ0ZXIgYSBjb3VuY2lsIGhhZCBiZWVuIGNvbnZlbmVkIGluIFBlaXJhZXVzLCBoZSBjYW1lIGJlZm9yZSBpdCwgcmVseWluZyB1cG9uIFBob2Npb24gZm9yIHRoZSBzYWZldHkgb2YgaGlzIHBlcnNvbi4gQnV0IERlcmN5bGx1cywgdGhlIEF0aGVuaWFuIGdlbmVyYWwgaW4gY29tbWFuZCBvZiB0aGUgZGlzdHJpY3QsIG1hZGUgYW4gYXR0ZW1wdCB0byBhcnJlc3QgaGltLCB3aGVyZXVwb24gTmljYW5vciwgd2hvIGJlY2FtZSBhd2FyZSBvZiB0aGUgYXR0ZW1wdCBpbiB0aW1lLCBkYXNoZWQgYXdheSwgYW5kIHdhcyBjbGVhcmx5IGFib3V0IHRvIGluZmxpY3Qgc3BlZWR5IHB1bmlzaG1lbnQgdXBvbiB0aGUgY2l0eS4gUGhvY2lvbiwgaG93ZXZlciwgd2hlbiBhc3NhaWxlZCBmb3IgbGV0dGluZyBOaWNhbm9yIGdvIGFuZCBub3QgZGV0YWluaW5nIGhpbSwgc2FpZCB0aGF0IGhlIGhhZCBjb25maWRlbmNlIGluIE5pY2Fub3IgYW5kIGV4cGVjdGVkIG5vIGV2aWwgYXQgaGlzIGhhbmRzOyBidXQgaW4gYW55IGNhc2UsIGhlIHdvdWxkIHJhdGhlciBiZSBmb3VuZCBzdWZmZXJpbmcgd3JvbmcgdGhhbiBkb2luZyB3cm9uZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc3VjaCBhbiB1dHRlcmFuY2UgYXMgdGhpcyBtaWdodCBzZWVtIGhvbm91cmFibGUgYW5kIG5vYmxlIGluIG9uZSB3aG8gaGFkIHJlZ2FyZCB0byBoaXMgb3duIGludGVyZXN0cyBhbG9uZTsgYnV0IGhlIHdobyBlbmRhbmdlcnMgaGlzIGNvdW50cnkncyBzYWZldHksIGFuZCB0aGF0LCB0b28sIHdoZW4gaGUgaXMgaGVyIGNvbW1hbmRpbmcgZ2VuZXJhbCwgdHJhbnNncmVzc2VzLCBJIHN1c3BlY3QsIGEgbGFyZ2VyIGFuZCBtb3JlIHZlbmVyYWJsZSBvYmxpZ2F0aW9uIG9mIGp1c3RpY2UgdG93YXJkcyBoaXMgZmVsbG93IGNpdGl6ZW5zLiBGb3IgaXQgY2Fubm90IGV2ZW4gYmUgc2FpZCB0aGF0IGl0IHdhcyB0aGUgZmVhciBvZiBwbHVuZ2luZyB0aGUgY2l0eSBpbnRvIHdhciB3aGljaCBtYWRlIFBob2Npb24gcmVmcmFpbiBmcm9tIHNlaXppbmcgTmljYW5vciwgYnV0IHRoYXQgaGUgc291Z2h0IHRvIGV4Y3VzZSBoaW1zZWxmIG9uIG90aGVyIGdyb3VuZHMgYnkgcHJvdGVzdGF0aW9ucyBvZiBnb29kIGZhaXRoIGFuZCBqdXN0aWNlLCBpbiBvcmRlciB0aGF0IE5pY2Fub3IgbWlnaHQgcmVzcGVjdCB0aGVzZSBvYmxpZ2F0aW9ucyBhbmQga2VlcCB0aGUgcGVhY2UgYW5kIGRvIHRoZSBBdGhlbmlhbnMgbm8gd3Jvbmc7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPm5heSwgaXQgd291bGQgc2VlbSB0aGF0IGhlIHJlYWxseSBoYWQgdG9vIHN0cm9uZyBhIGNvbmZpZGVuY2UgaW4gTmljYW5vci4gRm9yIHRob3VnaCBtYW55IGdhdmUgd2FybmluZyBhZ2FpbnN0IHRoYXQgb2ZmaWNlciBhbmQgYWNjdXNlZCBoaW0gb2YgaG9zdGlsZSBkZXNpZ25zIGFnYWluc3QgdGhlIFBlaXJhZXVzLCBpbiB0aGF0IGhlIHdhcyBzZW5kaW5nIG1lcmNlbmFyaWVzIGFjcm9zcyB0byBTYWxhbWlzLCBhbmQgdGFtcGVyaW5nIHdpdGggc29tZSBvZiB0aGUgcmVzaWRlbnRzIGluIFBlaXJhZXVzLCBQaG9jaW9uIHdvdWxkIG5vdCBnaXZlIGhlZWQgdG8gdGhlIHN0b3J5IG5vciBiZWxpZXZlIGl0IGF0IGFsbC4gSW5kZWVkLCBldmVuIGFmdGVyIFBoaWxvbWVsdXMgb2YgTGFtcHRyYWUgYnJvdWdodCBpbiBhIGRlY3JlZSB0aGF0IGFsbCBBdGhlbmlhbnMgc2hvdWxkIHN0YW5kIHVuZGVyIGFybXMgYW5kIGF3YWl0IG9yZGVycyBmcm9tIFBob2Npb24gdGhlaXIgZ2VuZXJhbCwgaGUgcGFpZCBubyBhdHRlbnRpb24gdG8gdGhlIG1hdHRlciwgdW50aWwgTmljYW5vciBsZWQgaGlzIHRyb29wcyBmb3J0aCBmcm9tIE11bnljaGlhIGFuZCBiZWdhbiB0byBydW4gdHJlbmNoZXMgYXJvdW5kIHRoZSBQZWlyYWV1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBzdGF0ZSBvZiBhZmZhaXJzLCBQaG9jaW9uLCB3aG8gbm93IHdpc2hlZCB0byBsZWFkIHRoZSBBdGhlbmlhbnMgZm9ydGggdG8gYmF0dGxlLCB3YXMgc3Rvcm1lZCBhdCBhbmQgaGVsZCBpbiBkZXJpc2lvbiwgYW5kIEFsZXhhbmRlciB0aGUgc29uIG9mIFBvbHlzcGVyY2hvbiBjYW1lIHdpdGggYW4gYXJtZWQgZm9yY2UuIEhpcyBvc3RlbnNpYmxlIGRlc2lnbiB3YXMgdG8gYnJpbmcgYWlkIHRvIHRoZSBjaXRpemVucyBhZ2FpbnN0IE5pY2Fub3IsIGJ1dCBoZSByZWFsbHkgd2lzaGVkIHRvIHNlaXplIHRoZSBjaXR5LCBpZiBoZSBjb3VsZCwgbm93IHRoYXQgc2hlIHdhcyBydWlub3VzbHkgZGl2aWRlZCBhZ2FpbnN0IGhlcnNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZXhpbGVzIHdobyBoYWQgYnVyc3QgaW50byB0aGUgY291bnRyeSB3aXRoIGhpbSB3ZXJlIGF0IG9uY2UgaW4gdGhlIGNpdHksIHN0cmFuZ2VycyBhbmQgZGlzZnJhbmNoaXNlZCBjaXRpemVucyByYW4gaW4gdG8gam9pbiB0aGVtLCBhbmQgYSBtb3RsZXkgYW5kIHR1cmJ1bGVudCBhc3NlbWJseSB3YXMgZ2F0aGVyZWQgdG9nZXRoZXIsIGluIHdoaWNoIFBob2Npb24gd2FzIGRlcG9zZWQgZnJvbSBoaXMgY29tbWFuZCBhbmQgb3RoZXIgZ2VuZXJhbHMgd2VyZSBjaG9zZW4uIEFuZCBoYWQgbm90IEFsZXhhbmRlciBiZWVuIHNlZW4gaW4gY2xvc2UgY29uZmVyZW5jZSB3aXRoIE5pY2Fub3IgbmVhciB0aGUgd2FsbHMsIGFuZCBoYWQgbm90IHRoZWlyIGludGVydmlldywgd2hpY2ggd2FzIG9mdGVuIHJlcGVhdGVkLCByZW5kZXJlZCB0aGUgQXRoZW5pYW5zIHN1c3BpY2lvdXMsIHRoZSBjaXR5IHdvdWxkIG5vdCBoYXZlIGVzY2FwZWQgaXRzIHBlcmlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgSGFnbm9uaWRlcyB0aGUgb3JhdG9yPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNhbWUgYXMgdGhlIHB1YmxpYyBpbmZvcm1lciBvZiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTkuMyIgdmFsaWQ9InllcyI+eHhpeC4gMzwvYmlibD4uPC9ub3RlPiBhdCBvbmNlIGFzc2FpbGVkIFBob2Npb24gYW5kIGRlbm91bmNlZCBoaW0gYXMgYSB0cmFpdG9yLCB3aGVyZXVwb24gQ2FsbGltZWRvbiBhbmQgQ2hhcmljbGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvbWluZW50IHBhcnRpc2FucyBvZiBBbnRpcGF0ZXIsIHdobyBoYWQgdHJhbnNmZXJyZWQgdGhlaXIgYWxsZWdpYW5jZSB0byBDYXNzYW5kZXIsIHRoZSBzb24gb2YgQW50aXBhdGVyLCByYXRoZXIgdGhhbiB0byBQb2x5c3BlcmNob24sIHRoZSBzdWNjZXNzb3Igb2YgQW50aXBhdGVyLjwvbm90ZT4gdG9vayBmcmlnaHQgYW5kIGxlZnQgdGhlIGNpdHksIHdoaWxlIFBob2Npb24sIGFuZCB3aXRoIGhpbSB0aG9zZSBvZiBoaXMgZnJpZW5kcyB3aG8gcmVtYWluZWQgZmFpdGhmdWwsIHNldCBvdXQgdG8gZ28gdG8gUG9seXNwZXJjaG9uLiBUaGVyZSB3ZW50IGZvcnRoIHdpdGggdGhlbSBhbHNvLCBvdXQgb2YgcmVnYXJkIGZvciBQaG9jaW9uLCBTb2xvbiBvZiBQbGF0YWVhIGFuZCBEZWluYXJjaHVzIG9mIENvcmludGgsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW50aXBhdGVyJ3MgY2hpZWYgYWdlbnQgaW4gUGVsb3Bvbm5lc3VzLjwvbm90ZT4gd2hvIHdlcmUgcmVwdXRlZCB0byBiZSBpbnRpbWF0ZSBmcmllbmRzIG9mIFBvbHlzcGVyY2hvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERlaW5hcmNodXMgZmVsbCBzaWNrLCBhbmQgdGhlIHBhcnR5IHRoZXJlZm9yZSB0YXJyaWVkIG1hbnkgZGF5cyBpbiBFbGF0ZWlhLCBkdXJpbmcgd2hpY2ggdGltZSB0aGUgcGVvcGxlIG9mIEF0aGVucywgaW4gYWNjb3JkYW5jZSB3aXRoIGEgZGVjcmVlIGJyb3VnaHQgaW4gYnkgQXJjaGVzdHJhdHVzIGFuZCBzdXBwb3J0ZWQgYnkgSGFnbm9uaWRlcywgc2VudCBhbiBlbWJhc3N5IHRvIGRlbm91bmNlIFBob2Npb24uIEJvdGggdGhlIHBhcnRpZXMgZmVsbCBpbiB3aXRoIFBvbHlzcGVyY2hvbiBhdCB0aGUgc2FtZSB0aW1lLCBhcyBoZSB3YXMgbWFyY2hpbmcgd2l0aCB0aGUga2luZyBuZWFyIFBoYXJ5Z2FlLCBhIHZpbGxhZ2Ugb2YgUGhvY2lzIGx5aW5nIGF0IHRoZSBmb290IG9mIE1vdW50IEFjcnVyaXVtLCB3aGljaCBpcyBub3cgY2FsbGVkIEdhbGF0YS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBzdGF0ZSBvZiBhZmZhaXJzLCBQaG9jaW9uLCB3aG8gbm93IHdpc2hlZCB0byBsZWFkIHRoZSBBdGhlbmlhbnMgZm9ydGggdG8gYmF0dGxlLCB3YXMgc3Rvcm1lZCBhdCBhbmQgaGVsZCBpbiBkZXJpc2lvbiwgYW5kIEFsZXhhbmRlciB0aGUgc29uIG9mIFBvbHlzcGVyY2hvbiBjYW1lIHdpdGggYW4gYXJtZWQgZm9yY2UuIEhpcyBvc3RlbnNpYmxlIGRlc2lnbiB3YXMgdG8gYnJpbmcgYWlkIHRvIHRoZSBjaXRpemVucyBhZ2FpbnN0IE5pY2Fub3IsIGJ1dCBoZSByZWFsbHkgd2lzaGVkIHRvIHNlaXplIHRoZSBjaXR5LCBpZiBoZSBjb3VsZCwgbm93IHRoYXQgc2hlIHdhcyBydWlub3VzbHkgZGl2aWRlZCBhZ2FpbnN0IGhlcnNlbGYuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZXhpbGVzIHdobyBoYWQgYnVyc3QgaW50byB0aGUgY291bnRyeSB3aXRoIGhpbSB3ZXJlIGF0IG9uY2UgaW4gdGhlIGNpdHksIHN0cmFuZ2VycyBhbmQgZGlzZnJhbmNoaXNlZCBjaXRpemVucyByYW4gaW4gdG8gam9pbiB0aGVtLCBhbmQgYSBtb3RsZXkgYW5kIHR1cmJ1bGVudCBhc3NlbWJseSB3YXMgZ2F0aGVyZWQgdG9nZXRoZXIsIGluIHdoaWNoIFBob2Npb24gd2FzIGRlcG9zZWQgZnJvbSBoaXMgY29tbWFuZCBhbmQgb3RoZXIgZ2VuZXJhbHMgd2VyZSBjaG9zZW4uIEFuZCBoYWQgbm90IEFsZXhhbmRlciBiZWVuIHNlZW4gaW4gY2xvc2UgY29uZmVyZW5jZSB3aXRoIE5pY2Fub3IgbmVhciB0aGUgd2FsbHMsIGFuZCBoYWQgbm90IHRoZWlyIGludGVydmlldywgd2hpY2ggd2FzIG9mdGVuIHJlcGVhdGVkLCByZW5kZXJlZCB0aGUgQXRoZW5pYW5zIHN1c3BpY2lvdXMsIHRoZSBjaXR5IHdvdWxkIG5vdCBoYXZlIGVzY2FwZWQgaXRzIHBlcmlsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBIYWdub25pZGVzIHRoZSBvcmF0b3I8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzYW1lIGFzIHRoZSBwdWJsaWMgaW5mb3JtZXIgb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTkuMyIgdmFsaWQ9InllcyI+eHhpeC4gMzwvYmlibD4uPC9ub3RlPiBhdCBvbmNlIGFzc2FpbGVkIFBob2Npb24gYW5kIGRlbm91bmNlZCBoaW0gYXMgYSB0cmFpdG9yLCB3aGVyZXVwb24gQ2FsbGltZWRvbiBhbmQgQ2hhcmljbGVzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTkuMyIgdmFsaWQ9InllcyI+eHhpeC4gMzwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9taW5lbnQgcGFydGlzYW5zIG9mIEFudGlwYXRlciwgd2hvIGhhZCB0cmFuc2ZlcnJlZCB0aGVpciBhbGxlZ2lhbmNlIHRvIENhc3NhbmRlciwgdGhlIHNvbiBvZiBBbnRpcGF0ZXIsIHJhdGhlciB0aGFuIHRvIFBvbHlzcGVyY2hvbiwgdGhlIHN1Y2Nlc3NvciBvZiBBbnRpcGF0ZXIuPC9ub3RlPiB0b29rIGZyaWdodCBhbmQgbGVmdCB0aGUgY2l0eSwgd2hpbGUgUGhvY2lvbiwgYW5kIHdpdGggaGltIHRob3NlIG9mIGhpcyBmcmllbmRzIHdobyByZW1haW5lZCBmYWl0aGZ1bCwgc2V0IG91dCB0byBnbyB0byBQb2x5c3BlcmNob24uIFRoZXJlIHdlbnQgZm9ydGggd2l0aCB0aGVtIGFsc28sIG91dCBvZiByZWdhcmQgZm9yIFBob2Npb24sIFNvbG9uIG9mIFBsYXRhZWEgYW5kIERlaW5hcmNodXMgb2YgQ29yaW50aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlwYXRlcidzIGNoaWVmIGFnZW50IGluIFBlbG9wb25uZXN1cy48L25vdGU+IHdobyB3ZXJlIHJlcHV0ZWQgdG8gYmUgaW50aW1hdGUgZnJpZW5kcyBvZiBQb2x5c3BlcmNob24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEZWluYXJjaHVzIGZlbGwgc2ljaywgYW5kIHRoZSBwYXJ0eSB0aGVyZWZvcmUgdGFycmllZCBtYW55IGRheXMgaW4gRWxhdGVpYSwgZHVyaW5nIHdoaWNoIHRpbWUgdGhlIHBlb3BsZSBvZiBBdGhlbnMsIGluIGFjY29yZGFuY2Ugd2l0aCBhIGRlY3JlZSBicm91Z2h0IGluIGJ5IEFyY2hlc3RyYXR1cyBhbmQgc3VwcG9ydGVkIGJ5IEhhZ25vbmlkZXMsIHNlbnQgYW4gZW1iYXNzeSB0byBkZW5vdW5jZSBQaG9jaW9uLiBCb3RoIHRoZSBwYXJ0aWVzIGZlbGwgaW4gd2l0aCBQb2x5c3BlcmNob24gYXQgdGhlIHNhbWUgdGltZSwgYXMgaGUgd2FzIG1hcmNoaW5nIHdpdGggdGhlIGtpbmcgbmVhciBQaGFyeWdhZSwgYSB2aWxsYWdlIG9mIFBob2NpcyBseWluZyBhdCB0aGUgZm9vdCBvZiBNb3VudCBBY3J1cml1bSwgd2hpY2ggaXMgbm93IGNhbGxlZCBHYWxhdGEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHRoZW4sIFBvbHlzcGVyY2hvbiwgYWZ0ZXIgc2V0dGluZyB1cCB0aGUgZ29sZGVuIGNhbm9weSBhbmQgc2VhdGluZyBiZW5lYXRoIGl0IHRoZSBraW5nIGFuZCBoaXMgZnJpZW5kcywgYXMgc29vbiBhcyBEZWluYXJjaHVzIGNhbWUgZm9yd2FyZCwgb3JkZXJlZCBoaW0gdG8gYmUgc2VpemVkLCB0b3J0dXJlZCwgYW5kIHB1dCB0byBkZWF0aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBvcmRlciB0byBtYWludGFpbiBoaW1zZWxmIGluIHBvd2VyLCBQb2x5c3BlcmNob24gd2FzIGZvcmNlZCB0byB0cmVhdCBBbnRpcGF0ZXIncyBmcmllbmRzIGFzIGhpcyBvd24gZW5lbWllcy48L25vdGU+IGFuZCB0aGVuIGdhdmUgYXVkaWVuY2UgdG8gdGhlIEF0aGVuaWFucy4gQnV0IHRoZXkgcmFpc2VkIGEgdHVtdWx0dW91cyBzaG91dGluZyB3aXRoIHRoZWlyIGRlbnVuY2lhdGlvbnMgb2Ygb25lIGFub3RoZXIgaW4gdGhlIGNvdW5jaWwsIGFuZCBhdCBsYXN0IEhhZ25vbmlkZXMgY2FtZSBmb3J3YXJkIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRocm93IHVzIGFsbCBpbnRvIG9uZSBjYWdlIGFuZCBzZW5kIHVzIGJhY2sgdG8gQXRoZW5zIHRvIHJlbmRlciBhbiBhY2NvdW50LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzLCB0aGUga2luZyBidXJzdCBvdXQgbGF1Z2hpbmc7IGJ1dCB0aGUgTWFjZWRvbmlhbnMgYW5kIGZvcmVpZ25lcnMgd2hvIHdlcmUgZ2F0aGVyZWQgYWJvdXQgdGhlIGNvdW5jaWwsIGhhdmluZyBub3RoaW5nIGVsc2UgdG8gZG8sIHdlcmUgZWFnZXIgdG8gbGlzdGVuLCBhbmQgbm9kZGVkIHRvIHRoZSBhbWJhc3NhZG9ycyB0byBtYWtlIHRoZWlyIGRlbnVuY2lhdGlvbiB0aGVyZS4gQnV0IHRoZXJlIHdhcyBubyBmYWlybmVzcyBpbiB0aGUgY29uZHVjdCBvZiB0aGUgY2FzZSwgc2luY2UsIHdoZW4gUGhvY2lvbiB0cmllZCB0byBzcGVhaywgaGUgd2FzIGZyZXF1ZW50bHkgaW50ZXJydXB0ZWQgYnkgUG9seXNwZXJjaG9uLCBhbmQgYXQgbGFzdCwgc21pdGluZyB0aGUgZ3JvdW5kIHdpdGggaGlzIHN0YWZmLCBoZSByZXRpcmVkIGFuZCBoZWxkIGhpcyBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gSGVnZW1vbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSBvZiBQaG9jaW9uJ3MgcGFydHksIGFuZCwgbGlrZSBoaW0sIHVuZGVyIGFjY3VzYXRpb24gb2YgdHJlYWNoZXJ5LCBpLmUuIG9mIGZhdm91cmluZyBDYXNzYW5kZXIgcmF0aGVyIHRoYW4gUG9seXNwZXJjaG9uLjwvbm90ZT4gc2FpZCB0aGF0IFBvbHlzcGVyY2hvbiBjb3VsZCBiZWFyIHdpdG5lc3MgdG8gaGlzIGdvb2Qgd2lsbCB0b3dhcmRzIHRoZSBwZW9wbGUsIGFuZCBQb2x5c3BlcmNob24gcmVwbGllZCBpbiB3cmF0aCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DZWFzZSB0ZWxsaW5nIGxpZXMgYWdhaW5zdCBtZSBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIGtpbmcsPC9xPiB0aGUga2luZyBzcHJhbmcgdG8gaGlzIGZlZXQgYW5kIHdvdWxkIGhhdmUgc21pdHRlbiBIZWdlbW9uIHdpdGggYSBzcGVhci4gQnV0IFBvbHlzcGVyY2hvbiBxdWlja2x5IHRocmV3IGhpcyBhcm1zIGFib3V0IHRoZSBraW5nLCBhbmQgdGh1cyB0aGUgY291bmNpbCB3YXMgZGlzc29sdmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHRoZW4sIFBvbHlzcGVyY2hvbiwgYWZ0ZXIgc2V0dGluZyB1cCB0aGUgZ29sZGVuIGNhbm9weSBhbmQgc2VhdGluZyBiZW5lYXRoIGl0IHRoZSBraW5nIGFuZCBoaXMgZnJpZW5kcywgYXMgc29vbiBhcyBEZWluYXJjaHVzIGNhbWUgZm9yd2FyZCwgb3JkZXJlZCBoaW0gdG8gYmUgc2VpemVkLCB0b3J0dXJlZCwgYW5kIHB1dCB0byBkZWF0aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIG9yZGVyIHRvIG1haW50YWluIGhpbXNlbGYgaW4gcG93ZXIsIFBvbHlzcGVyY2hvbiB3YXMgZm9yY2VkIHRvIHRyZWF0IEFudGlwYXRlcidzIGZyaWVuZHMgYXMgaGlzIG93biBlbmVtaWVzLjwvbm90ZT4gYW5kIHRoZW4gZ2F2ZSBhdWRpZW5jZSB0byB0aGUgQXRoZW5pYW5zLiBCdXQgdGhleSByYWlzZWQgYSB0dW11bHR1b3VzIHNob3V0aW5nIHdpdGggdGhlaXIgZGVudW5jaWF0aW9ucyBvZiBvbmUgYW5vdGhlciBpbiB0aGUgY291bmNpbCwgYW5kIGF0IGxhc3QgSGFnbm9uaWRlcyBjYW1lIGZvcndhcmQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHJvdyB1cyBhbGwgaW50byBvbmUgY2FnZSBhbmQgc2VuZCB1cyBiYWNrIHRvIEF0aGVucyB0byByZW5kZXIgYW4gYWNjb3VudC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIHRoZSBraW5nIGJ1cnN0IG91dCBsYXVnaGluZzsgYnV0IHRoZSBNYWNlZG9uaWFucyBhbmQgZm9yZWlnbmVycyB3aG8gd2VyZSBnYXRoZXJlZCBhYm91dCB0aGUgY291bmNpbCwgaGF2aW5nIG5vdGhpbmcgZWxzZSB0byBkbywgd2VyZSBlYWdlciB0byBsaXN0ZW4sIGFuZCBub2RkZWQgdG8gdGhlIGFtYmFzc2Fkb3JzIHRvIG1ha2UgdGhlaXIgZGVudW5jaWF0aW9uIHRoZXJlLiBCdXQgdGhlcmUgd2FzIG5vIGZhaXJuZXNzIGluIHRoZSBjb25kdWN0IG9mIHRoZSBjYXNlLCBzaW5jZSwgd2hlbiBQaG9jaW9uIHRyaWVkIHRvIHNwZWFrLCBoZSB3YXMgZnJlcXVlbnRseSBpbnRlcnJ1cHRlZCBieSBQb2x5c3BlcmNob24sIGFuZCBhdCBsYXN0LCBzbWl0aW5nIHRoZSBncm91bmQgd2l0aCBoaXMgc3RhZmYsIGhlIHJldGlyZWQgYW5kIGhlbGQgaGlzIHBlYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIEhlZ2Vtb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSBvZiBQaG9jaW9uJ3MgcGFydHksIGFuZCwgbGlrZSBoaW0sIHVuZGVyIGFjY3VzYXRpb24gb2YgdHJlYWNoZXJ5LCBpLmUuIG9mIGZhdm91cmluZyBDYXNzYW5kZXIgcmF0aGVyIHRoYW4gUG9seXNwZXJjaG9uLjwvbm90ZT4gc2FpZCB0aGF0IFBvbHlzcGVyY2hvbiBjb3VsZCBiZWFyIHdpdG5lc3MgdG8gaGlzIGdvb2Qgd2lsbCB0b3dhcmRzIHRoZSBwZW9wbGUsIGFuZCBQb2x5c3BlcmNob24gcmVwbGllZCBpbiB3cmF0aCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNlYXNlIHRlbGxpbmcgbGllcyBhZ2FpbnN0IG1lIGluIHRoZSBwcmVzZW5jZSBvZiB0aGUga2luZyw8L3E+IHRoZSBraW5nIHNwcmFuZyB0byBoaXMgZmVldCBhbmQgd291bGQgaGF2ZSBzbWl0dGVuIEhlZ2Vtb24gd2l0aCBhIHNwZWFyLiBCdXQgUG9seXNwZXJjaG9uIHF1aWNrbHkgdGhyZXcgaGlzIGFybXMgYWJvdXQgdGhlIGtpbmcsIGFuZCB0aHVzIHRoZSBjb3VuY2lsIHdhcyBkaXNzb2x2ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkEgZ3VhcmQgd2FzIG5vdyBwbGFjZWQgYWJvdXQgUGhvY2lvbiBhbmQgaGlzIGFzc29jaWF0ZXMsIGFuZCBhdCBzaWdodCBvZiB0aGlzIGFsbCBvZiBoaXMgZnJpZW5kcyB3aG8gd2VyZSBzdGFuZGluZyBhdCBzb21lIHJlbW92ZSBjb3ZlcmVkIHVwIHRoZWlyIGZhY2VzIGFuZCBzb3VnaHQgc2FmZXR5IGluIGZsaWdodC4gUGhvY2lvbiBhbmQgaGlzIHBhcnR5LCBob3dldmVyLCB3ZXJlIHRha2VuIGJhY2sgdG8gQXRoZW5zIGJ5IENsZWl0dXMsIG9zdGVuc2libHkgdG8gYmUgdHJpZWQsIGJ1dCByZWFsbHkgdW5kZXIgc2VudGVuY2Ugb2YgZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzLCB0aGUgbWFubmVyIG9mIHRoZWlyIHJldHVybiB0byB0aGUgY2l0eSB3YXMgc2hhbWVmdWwsIGZvciB0aGV5IHdlcmUgY2FycmllZCBvbiB3YWdnb25zIHRocm91Z2ggdGhlIENlcmFtZWljdXMgdG8gdGhlIHRoZWF0cmUuIEZvciB0aGl0aGVyIENsZWl0dXMgYnJvdWdodCB0aGVtIGFuZCB0aGVyZSBoZSBrZXB0IHRoZW0sIHVudGlsIHRoZSBtYWdpc3RyYXRlcyBoYWQgbWFkZSB1cCBhbiBhc3NlbWJseSwgZnJvbSB3aGljaCB0aGV5IGV4Y2x1ZGVkIG5laXRoZXIgc2xhdmUsIGZvcmVpZ25lciwgbm9yIGRpc2ZyYW5jaGlzZWQgcGVyc29uLCBidXQgYWxsb3dlZCBhbGwgYWxpa2UsIGJvdGggbWVuIGFuZCB3b21lbiwgZnJlZSBhY2Nlc3MgdG8gdGhlYXRyZSBhbmQgdHJpYnVuYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBsZXR0ZXIgb2YgdGhlIGtpbmcgaGFkIGJlZW4gcmVhZCBhbG91ZCwgaW4gd2hpY2ggaGUgc2FpZCB0aGF0IGFjY29yZGluZyB0byBoaXMganVkZ2VtZW50IHRoZSBtZW4gd2VyZSB0cmFpdG9ycywgYnV0IHRoYXQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zLCB3aG8gd2VyZSBmcmVlbWVuIGFuZCBzZWxmLWdvdmVybmluZywgc2hvdWxkIHByb25vdW5jZSBzZW50ZW5jZSB1cG9uIHRoZW0sIENsZWl0dXMgbGVkIHRoZSBtZW4gaW4uIFRoZW4gdGhlIGJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCBhdCBzaWdodCBvZiBQaG9jaW9uLCBjb3ZlcmVkIHRoZWlyIGZhY2VzLCBiZW50IHRoZWlyIGhlYWRzLCBhbmQgd2VwdC4gT25lIG9mIHRoZW0sIGhvd2V2ZXIsIHJvc2UgdXAgYW5kIGhhZCB0aGUgY291cmFnZSB0byBzYXkgdGhhdCwgc2luY2UgdGhlIGtpbmcgaGFkIHB1dCBhIGNhc2Ugb2Ygc3VjaCBpbXBvcnRhbmNlIGludG8gdGhlIGhhbmRzIG9mIHRoZSBwZW9wbGUsIGl0IHdlcmUgd2VsbCB0aGF0IHNsYXZlcyBhbmQgZm9yZWlnbmVycyBzaG91bGQgbGVhdmUgdGhlIGFzc2VtYmx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHRoZSBtdWx0aXR1ZGUgd291bGQgbm90IHRvbGVyYXRlLCBidXQgY3JpZWQgb3V0IHRvIHN0b25lIHRoZSBvbGlnYXJjaHMgYW5kIGhhdGVycyBvZiB0aGUgcGVvcGxlLiBUaGVyZWZvcmUgbm8gb25lIGVsc2UgdW5kZXJ0b29rIHRvIHNwZWFrIGluIGJlaGFsZiBvZiBQaG9jaW9uLCBidXQgaGUgaGltc2VsZiwgd2l0aCBncmVhdCBkaWZmaWN1bHR5LCBhdCBsYXN0IG1hZGUgaGltc2VsZiBoZWFyZCwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHllIHdpc2ggdG8gcHV0IHVzIHRvIGRlYXRoIHVuanVzdGx5IG9yIGp1c3RseT88L3E+IEFuZCB3aGVuIHNvbWUgYW5zd2VyZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SnVzdGx5LDwvcT4gaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbmQgaG93IHdpbGwgeWUgZGV0ZXJtaW5lIHRoaXMgd2l0aG91dCBoZWFyaW5nIG1lPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhleSB3ZXJlIG5vdCBhIHdoaXQgbW9yZSB3aWxsaW5nIHRvIGhlYXIgaGltLCBhbmQgdGhlcmVmb3JlLCBkcmF3aW5nIG5lYXJlciwgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFkbWl0IG15IG93biBndWlsdCwgYW5kIEkgYXNzaWduIGRlYXRoIGFzIHRoZSBwZW5hbHR5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gY2FzZXMgd2hlcmUgdGhlIHBlbmFsdHkgd2FzIG5vdCBmaXhlZCBieSBsYXcsIHRoZSBhY2N1c2VyIHByb3Bvc2VkIGEgcGVuYWx0eSwgYW5kIHRoZSBhY2N1c2VkIGhhZCB0aGUgcmlnaHQgdG8gcHJvcG9zZSBhIGNvdW50ZXItcGVuYWx0eS4gVGhlIGNvdXJ0IHRoZW4gY2hvc2UgYmV0d2VlbiB0aGUgdHdvIHBlbmFsdGllcy4gUGhvY2lvbiB3YWl2ZWQgYWxsIHRoZSBhZHZhbnRhZ2Ugb2YgdGhpcyByaWdodCwgYXMgU29jcmF0ZXMsIGluIGEgZGlmZmVyZW50IHdheSwgaGFkIGRvbmUuPC9ub3RlPiBmb3IgbXkgcG9saXRpY2FsIGNvbmR1Y3Q7IGJ1dCB0aGVzZSBtZW4gd2l0aCBtZSwgbWVuIG9mIEF0aGVucywgYXJlIG5vdCBndWlsdHkgYXQgYWxsLCBhbmQgd2h5IHdpbGwgeWUgcHV0IHRoZW0gdG8gZGVhdGg/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSB0aGV5IGFyZSB0aHkgZnJpZW5kcyw8L3E+IGFuc3dlcmVkIG1hbnksIHdoZXJlYXQgUGhvY2lvbiByZXRpcmVkIGFuZCBoZWxkIGhpcyBwZWFjZS4gQnV0IEhhZ25vbmlkZXMgcmVhZCBhbG91ZCBhbiBlZGljdCB3aGljaCBoZSBoYWQgcHJlcGFyZWQsIGluIGFjY29yZGFuY2Ugd2l0aCB3aGljaCB0aGUgcGVvcGxlIHdlcmUgdG8gdm90ZSBieSBzaG93IG9mIGhhbmRzIHdoZXRoZXIgdGhleSB0aG91Z2h0IHRoZSBtZW4gdG8gYmUgZ3VpbHR5LCBhbmQgdGhlIG1lbiwgaWYgdGhlIHNob3cgb2YgaGFuZHMgd2FzIGFnYWluc3QgdGhlbSwgd2VyZSB0byBiZSBwdXQgdG8gZGVhdGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBndWFyZCB3YXMgbm93IHBsYWNlZCBhYm91dCBQaG9jaW9uIGFuZCBoaXMgYXNzb2NpYXRlcywgYW5kIGF0IHNpZ2h0IG9mIHRoaXMgYWxsIG9mIGhpcyBmcmllbmRzIHdobyB3ZXJlIHN0YW5kaW5nIGF0IHNvbWUgcmVtb3ZlIGNvdmVyZWQgdXAgdGhlaXIgZmFjZXMgYW5kIHNvdWdodCBzYWZldHkgaW4gZmxpZ2h0LiBQaG9jaW9uIGFuZCBoaXMgcGFydHksIGhvd2V2ZXIsIHdlcmUgdGFrZW4gYmFjayB0byBBdGhlbnMgYnkgQ2xlaXR1cywgb3N0ZW5zaWJseSB0byBiZSB0cmllZCwgYnV0IHJlYWxseSB1bmRlciBzZW50ZW5jZSBvZiBkZWF0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzLCB0aGUgbWFubmVyIG9mIHRoZWlyIHJldHVybiB0byB0aGUgY2l0eSB3YXMgc2hhbWVmdWwsIGZvciB0aGV5IHdlcmUgY2FycmllZCBvbiB3YWdnb25zIHRocm91Z2ggdGhlIENlcmFtZWljdXMgdG8gdGhlIHRoZWF0cmUuIEZvciB0aGl0aGVyIENsZWl0dXMgYnJvdWdodCB0aGVtIGFuZCB0aGVyZSBoZSBrZXB0IHRoZW0sIHVudGlsIHRoZSBtYWdpc3RyYXRlcyBoYWQgbWFkZSB1cCBhbiBhc3NlbWJseSwgZnJvbSB3aGljaCB0aGV5IGV4Y2x1ZGVkIG5laXRoZXIgc2xhdmUsIGZvcmVpZ25lciwgbm9yIGRpc2ZyYW5jaGlzZWQgcGVyc29uLCBidXQgYWxsb3dlZCBhbGwgYWxpa2UsIGJvdGggbWVuIGFuZCB3b21lbiwgZnJlZSBhY2Nlc3MgdG8gdGhlYXRyZSBhbmQgdHJpYnVuYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBsZXR0ZXIgb2YgdGhlIGtpbmcgaGFkIGJlZW4gcmVhZCBhbG91ZCwgaW4gd2hpY2ggaGUgc2FpZCB0aGF0IGFjY29yZGluZyB0byBoaXMganVkZ2VtZW50IHRoZSBtZW4gd2VyZSB0cmFpdG9ycywgYnV0IHRoYXQgdGhlaXIgZmVsbG93IGNpdGl6ZW5zLCB3aG8gd2VyZSBmcmVlbWVuIGFuZCBzZWxmLWdvdmVybmluZywgc2hvdWxkIHByb25vdW5jZSBzZW50ZW5jZSB1cG9uIHRoZW0sIENsZWl0dXMgbGVkIHRoZSBtZW4gaW4uIFRoZW4gdGhlIGJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCBhdCBzaWdodCBvZiBQaG9jaW9uLCBjb3ZlcmVkIHRoZWlyIGZhY2VzLCBiZW50IHRoZWlyIGhlYWRzLCBhbmQgd2VwdC4gT25lIG9mIHRoZW0sIGhvd2V2ZXIsIHJvc2UgdXAgYW5kIGhhZCB0aGUgY291cmFnZSB0byBzYXkgdGhhdCwgc2luY2UgdGhlIGtpbmcgaGFkIHB1dCBhIGNhc2Ugb2Ygc3VjaCBpbXBvcnRhbmNlIGludG8gdGhlIGhhbmRzIG9mIHRoZSBwZW9wbGUsIGl0IHdlcmUgd2VsbCB0aGF0IHNsYXZlcyBhbmQgZm9yZWlnbmVycyBzaG91bGQgbGVhdmUgdGhlIGFzc2VtYmx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdGhlIG11bHRpdHVkZSB3b3VsZCBub3QgdG9sZXJhdGUsIGJ1dCBjcmllZCBvdXQgdG8gc3RvbmUgdGhlIG9saWdhcmNocyBhbmQgaGF0ZXJzIG9mIHRoZSBwZW9wbGUuIFRoZXJlZm9yZSBubyBvbmUgZWxzZSB1bmRlcnRvb2sgdG8gc3BlYWsgaW4gYmVoYWxmIG9mIFBob2Npb24sIGJ1dCBoZSBoaW1zZWxmLCB3aXRoIGdyZWF0IGRpZmZpY3VsdHksIGF0IGxhc3QgbWFkZSBoaW1zZWxmIGhlYXJkLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyB5ZSB3aXNoIHRvIHB1dCB1cyB0byBkZWF0aCB1bmp1c3RseSBvciBqdXN0bHk/PC9xPiBBbmQgd2hlbiBzb21lIGFuc3dlcmVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SnVzdGx5LDwvcT4gaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBob3cgd2lsbCB5ZSBkZXRlcm1pbmUgdGhpcyB3aXRob3V0IGhlYXJpbmcgbWU/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGV5IHdlcmUgbm90IGEgd2hpdCBtb3JlIHdpbGxpbmcgdG8gaGVhciBoaW0sIGFuZCB0aGVyZWZvcmUsIGRyYXdpbmcgbmVhcmVyLCBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhZG1pdCBteSBvd24gZ3VpbHQsIGFuZCBJIGFzc2lnbiBkZWF0aCBhcyB0aGUgcGVuYWx0eTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gY2FzZXMgd2hlcmUgdGhlIHBlbmFsdHkgd2FzIG5vdCBmaXhlZCBieSBsYXcsIHRoZSBhY2N1c2VyIHByb3Bvc2VkIGEgcGVuYWx0eSwgYW5kIHRoZSBhY2N1c2VkIGhhZCB0aGUgcmlnaHQgdG8gcHJvcG9zZSBhIGNvdW50ZXItcGVuYWx0eS4gVGhlIGNvdXJ0IHRoZW4gY2hvc2UgYmV0d2VlbiB0aGUgdHdvIHBlbmFsdGllcy4gUGhvY2lvbiB3YWl2ZWQgYWxsIHRoZSBhZHZhbnRhZ2Ugb2YgdGhpcyByaWdodCwgYXMgU29jcmF0ZXMsIGluIGEgZGlmZmVyZW50IHdheSwgaGFkIGRvbmUuPC9ub3RlPiBmb3IgbXkgcG9saXRpY2FsIGNvbmR1Y3Q7IGJ1dCB0aGVzZSBtZW4gd2l0aCBtZSwgbWVuIG9mIEF0aGVucywgYXJlIG5vdCBndWlsdHkgYXQgYWxsLCBhbmQgd2h5IHdpbGwgeWUgcHV0IHRoZW0gdG8gZGVhdGg/PC9xPiAKCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBjYXNlcyB3aGVyZSB0aGUgcGVuYWx0eSB3YXMgbm90IGZpeGVkIGJ5IGxhdywgdGhlIGFjY3VzZXIgcHJvcG9zZWQgYSBwZW5hbHR5LCBhbmQgdGhlIGFjY3VzZWQgaGFkIHRoZSByaWdodCB0byBwcm9wb3NlIGEgY291bnRlci1wZW5hbHR5LiBUaGUgY291cnQgdGhlbiBjaG9zZSBiZXR3ZWVuIHRoZSB0d28gcGVuYWx0aWVzLiBQaG9jaW9uIHdhaXZlZCBhbGwgdGhlIGFkdmFudGFnZSBvZiB0aGlzIHJpZ2h0LCBhcyBTb2NyYXRlcywgaW4gYSBkaWZmZXJlbnQgd2F5LCBoYWQgZG9uZS48L25vdGU+IGZvciBteSBwb2xpdGljYWwgY29uZHVjdDsgYnV0IHRoZXNlIG1lbiB3aXRoIG1lLCBtZW4gb2YgQXRoZW5zLCBhcmUgbm90IGd1aWx0eSBhdCBhbGwsIGFuZCB3aHkgd2lsbCB5ZSBwdXQgdGhlbSB0byBkZWF0aD88cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UgdGhleSBhcmUgdGh5IGZyaWVuZHMsPC9xPiBhbnN3ZXJlZCBtYW55LCB3aGVyZWF0IFBob2Npb24gcmV0aXJlZCBhbmQgaGVsZCBoaXMgcGVhY2UuIEJ1dCBIYWdub25pZGVzIHJlYWQgYWxvdWQgYW4gZWRpY3Qgd2hpY2ggaGUgaGFkIHByZXBhcmVkLCBpbiBhY2NvcmRhbmNlIHdpdGggd2hpY2ggdGhlIHBlb3BsZSB3ZXJlIHRvIHZvdGUgYnkgc2hvdyBvZiBoYW5kcyB3aGV0aGVyIHRoZXkgdGhvdWdodCB0aGUgbWVuIHRvIGJlIGd1aWx0eSwgYW5kIHRoZSBtZW4sIGlmIHRoZSBzaG93IG9mIGhhbmRzIHdhcyBhZ2FpbnN0IHRoZW0sIHdlcmUgdG8gYmUgcHV0IHRvIGRlYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZWRpY3QgaGFkIGJlZW4gcmVhZCBhbG91ZCwgc29tZSBkZW1hbmRlZCBhbiBhZGRpdGlvbmFsIGNsYXVzZSBwcm92aWRpbmcgdGhhdCBQaG9jaW9uIHNob3VsZCBiZSB0b3J0dXJlZCBiZWZvcmUgaGUgd2FzIHB1dCB0byBkZWF0aCwgYW5kIGluc2lzdGVkIHRoYXQgdGhlIHJhY2sgc2hvdWxkIGJlIGJyb3VnaHQgaW4gYW5kIHRoZSBleGVjdXRpb25lcnMgc3VtbW9uZWQuIEJ1dCBIYWdub25pZGVzLCB3aG8gc2F3IHRoYXQgQ2xlaXR1cyB3YXMgZGlzcGxlYXNlZCBhdCB0aGlzLCBhbmQgY29uc2lkZXJlZCB0aGUgbWVhc3VyZSBhYm9taW5hYmxlIGFuZCBiYXJiYXJvdXMsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbmV2ZXIgd2UgY2F0Y2ggdGhhdCByYXNjYWxseSBDYWxsaW1lZG9uLCBtZW4gb2YgQXRoZW5zLCB3ZSB3aWxsIHB1dCBoaW0gdG8gdGhlIHRvcnR1cmU7IGJ1dCBJIGNhbm5vdCBtYWtlIGFueSBzdWNoIG1vdGlvbiBpbiB0aGUgY2FzZSBvZiBQaG9jaW9uLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHNvbWUgZGVjZW50IGZlbGxvdyBjYWxsZWQgb3V0IGluIHJlc3BvbnNlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJpZ2h0IHRob3UgYXJ0OyBmb3IgaWYgd2Ugc2hvdWxkIHRvcnR1cmUgUGhvY2lvbiwgd2hhdCB3b3VsZCBiZSBsZWZ0IGZvciB1cyB0byBkbyB0byB0aGVlPzwvcT4gU28gdGhlIGZvcm0gb2YgdGhlIGVkaWN0IHdhcyBhcHByb3ZlZCwgYW5kIHdoZW4gdGhlIHNob3cgb2YgaGFuZHMgd2FzIHRha2VuLCBubyBvbmUga2VlcGluZyBoaXMgc2VhdCwgYnV0IGFsbCByaXNpbmcgdG8gdGhlaXIgZmVldCwgYW5kIG1vc3Qgb2YgdGhlbSB3cmVhdGhpbmcgdGhlbXNlbHZlcyB3aXRoIGdhcmxhbmRzLCB0aGV5IGNvbmRlbW5lZCB0aGUgbWVuIHRvIGRlYXRoLiBOb3csIHRoZXJlIHdlcmUgd2l0aCBQaG9jaW9uLCBOaWNvY2xlcywgVGh1ZGlwcHVzLCBIZWdlbW9uLCBhbmQgUHl0aG9jbGVzOyBhbmQgRGVtZXRyaXVzIG9mIFBoYWxlcnVtLCBDYWxsaW1lZG9uLCBDaGFyaWNsZXMsIGFuZCBzdW5kcnkgb3RoZXJzLCB3ZXJlIGNvbmRlbW5lZCB0byBkZWF0aCBpbiBhYnNlbnRpYS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGVkaWN0IGhhZCBiZWVuIHJlYWQgYWxvdWQsIHNvbWUgZGVtYW5kZWQgYW4gYWRkaXRpb25hbCBjbGF1c2UgcHJvdmlkaW5nIHRoYXQgUGhvY2lvbiBzaG91bGQgYmUgdG9ydHVyZWQgYmVmb3JlIGhlIHdhcyBwdXQgdG8gZGVhdGgsIGFuZCBpbnNpc3RlZCB0aGF0IHRoZSByYWNrIHNob3VsZCBiZSBicm91Z2h0IGluIGFuZCB0aGUgZXhlY3V0aW9uZXJzIHN1bW1vbmVkLiBCdXQgSGFnbm9uaWRlcywgd2hvIHNhdyB0aGF0IENsZWl0dXMgd2FzIGRpc3BsZWFzZWQgYXQgdGhpcywgYW5kIGNvbnNpZGVyZWQgdGhlIG1lYXN1cmUgYWJvbWluYWJsZSBhbmQgYmFyYmFyb3VzLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbmV2ZXIgd2UgY2F0Y2ggdGhhdCByYXNjYWxseSBDYWxsaW1lZG9uLCBtZW4gb2YgQXRoZW5zLCB3ZSB3aWxsIHB1dCBoaW0gdG8gdGhlIHRvcnR1cmU7IGJ1dCBJIGNhbm5vdCBtYWtlIGFueSBzdWNoIG1vdGlvbiBpbiB0aGUgY2FzZSBvZiBQaG9jaW9uLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgc29tZSBkZWNlbnQgZmVsbG93IGNhbGxlZCBvdXQgaW4gcmVzcG9uc2U6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SaWdodCB0aG91IGFydDsgZm9yIGlmIHdlIHNob3VsZCB0b3J0dXJlIFBob2Npb24sIHdoYXQgd291bGQgYmUgbGVmdCBmb3IgdXMgdG8gZG8gdG8gdGhlZT88L3E+IFNvIHRoZSBmb3JtIG9mIHRoZSBlZGljdCB3YXMgYXBwcm92ZWQsIGFuZCB3aGVuIHRoZSBzaG93IG9mIGhhbmRzIHdhcyB0YWtlbiwgbm8gb25lIGtlZXBpbmcgaGlzIHNlYXQsIGJ1dCBhbGwgcmlzaW5nIHRvIHRoZWlyIGZlZXQsIGFuZCBtb3N0IG9mIHRoZW0gd3JlYXRoaW5nIHRoZW1zZWx2ZXMgd2l0aCBnYXJsYW5kcywgdGhleSBjb25kZW1uZWQgdGhlIG1lbiB0byBkZWF0aC4gTm93LCB0aGVyZSB3ZXJlIHdpdGggUGhvY2lvbiwgTmljb2NsZXMsIFRodWRpcHB1cywgSGVnZW1vbiwgYW5kIFB5dGhvY2xlczsgYW5kIERlbWV0cml1cyBvZiBQaGFsZXJ1bSwgQ2FsbGltZWRvbiwgQ2hhcmljbGVzLCBhbmQgc3VuZHJ5IG90aGVycywgd2VyZSBjb25kZW1uZWQgdG8gZGVhdGggaW4gYWJzZW50aWEuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGFjY29yZGluZ2x5LCB0aGUgYXNzZW1ibHkgaGFkIGJlZW4gZGlzc29sdmVkIGFuZCB0aGUgbWVuIHdlcmUgYmVpbmcgbGVkIHRvIHRoZSBwcmlzb24sIHRoZSByZXN0IG9mIHRoZW0sIGFzIHRoZWlyIGZyaWVuZHMgYW5kIHJlbGF0aXZlcyBjbHVuZyBhYm91dCB0aGVtLCB3YWxrZWQgYWxvbmcgbGFtZW50aW5nIGFuZCBzaGVkZGluZyB0ZWFyczsgYnV0IHRoZSBjb3VudGVuYW5jZSBvZiBQaG9jaW9uIHdhcyB0aGUgc2FtZSBhcyBpdCB1c2VkIHRvIGJlIHdoZW4gaGUgd2FzIGVzY29ydGVkIGZyb20gdGhlIGFzc2VtYmx5IGFzIGdlbmVyYWwsIGFuZCB3aGVuIG1lbiBzYXcgaXQsIHRoZXkgd2VyZSBhbWF6ZWQgYXQgdGhlIG1hbidzIGNhbG1uZXNzIGFuZCBhdCBoaXMgZ3JhbmRldXIgb2Ygc3Bpcml0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZW5lbWllcywgaG93ZXZlciwgcmFuIGFsb25nIGJ5IGhpcyBzaWRlIGFuZCByZXZpbGVkIGhpbTsgYW5kIG9uZSBvZiB0aGVtIGFjdHVhbGx5IGNhbWUgdXAgYW5kIHNwYXQgaW4gaGlzIGZhY2UuIEF0IHRoaXMsIGFzIHdlIGFyZSB0b2xkLCBQaG9jaW9uIGxvb2tlZCB0b3dhcmRzIHRoZSBtYWdpc3RyYXRlcyBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaWxsIG5vdCBzb21lb25lIHN0b3AgdGhpcyBmZWxsb3cncyB1bnNlZW1seSBiZWhhdmlvdXI/PC9xPiBBZ2Fpbiwgd2hlbiBUaHVkaXBwdXMsIG9uIGVudGVyaW5nIHRoZSBwcmlzb24gYW5kIHNlZWluZyB0aGUgZXhlY3V0aW9uZXIgYnJ1aXNpbmcgdGhlIGhlbWxvY2ssIGdyZXcgYW5ncnkgYW5kIGJld2FpbGVkIGhpcyBoYXJkIGZhdGUsIGRlY2xhcmluZyBpdCBub3QgZml0dGluZyB0aGF0IGhlIHNob3VsZCBwZXJpc2ggd2l0aCBQaG9jaW9uLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklzIGl0IG5vIHNhdGlzZmFjdGlvbiB0byB0aGVlLCB0aGVuLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgdGhvdSBhcnQgcHV0IHRvIGRlYXRoIGluIGNvbXBhbnkgd2l0aCBQaG9jaW9uPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBvbmUgb2YgaGlzIGZyaWVuZHMgYXNrZWQgaGltIGlmIGhlIGhhZCBhbnkgbWVzc2FnZSBmb3IgaGlzIHNvbiBQaG9jdXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2VydGFpbmx5LDwvcT4gc2FpZCBoZTsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5teSBtZXNzYWdlIGlzIHRoYXQgaGUgY2hlcmlzaCBubyByZXNlbnRtZW50IGFnYWluc3QgdGhlIEF0aGVuaWFucy48L3E+IEFnYWluLCB3aGVuIE5pY29jbGVzLCBoaXMgbW9zdCBmYWl0aGZ1bCBmcmllbmQsIGJlZ2dlZCB0aGUgcHJpdmlsZWdlIG9mIGRyaW5raW5nIHRoZSBkcnVnIGZpcnN0LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gTmljb2NsZXMsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoeSByZXF1ZXN0IGlzIGdyaWV2b3VzIHRvIG1lIGFuZCBwYWluZnVsOyBidXQgc2luY2UgSSBoYXZlIG5ldmVyIGluIGFsbCBteSBsaWZlIGRlbmllZCB0aGVlIGFueSBvdGhlciBmYXZvdXIsIEkgZ3JhbnQgdGhlZSB0aGlzIG9uZSBhbHNvLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBhbGwgdGhlIHJlc3QgaGFkIGRydW5rIG9mIGl0LCB0aGUgZHJ1ZyByYW4gc2hvcnQsIGFuZCB0aGUgZXhlY3V0aW9uZXIgcmVmdXNlZCB0byBicnVpc2UgYW5vdGhlciBwb3J0aW9uIHVubGVzcyBoZSB3ZXJlIHBhaWQgdHdlbHZlIGRyYWNobWFzLCB3aGljaCB3YXMgdGhlIHByaWNlIG9mIHRoZSB3ZWlnaHQgcmVxdWlyZWQuIEhvd2V2ZXIsIGFmdGVyIGEgZGVsYXkgb2Ygc29tZSBsZW5ndGgsIFBob2Npb24gY2FsbGVkIG9uZSBvZiBoaXMgZnJpZW5kcywgYW5kLCBhc2tpbmcgaWYgYSBtYW4gY291bGQgbm90IGV2ZW4gZGllIGF0IEF0aGVucyB3aXRob3V0IHBheWluZyBmb3IgdGhlIHByaXZpbGVnZSwgYmFkZSBoaW0gZ2l2ZSB0aGUgZXhlY3V0aW9uZXIgaGlzIG1vbmV5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgYWNjb3JkaW5nbHksIHRoZSBhc3NlbWJseSBoYWQgYmVlbiBkaXNzb2x2ZWQgYW5kIHRoZSBtZW4gd2VyZSBiZWluZyBsZWQgdG8gdGhlIHByaXNvbiwgdGhlIHJlc3Qgb2YgdGhlbSwgYXMgdGhlaXIgZnJpZW5kcyBhbmQgcmVsYXRpdmVzIGNsdW5nIGFib3V0IHRoZW0sIHdhbGtlZCBhbG9uZyBsYW1lbnRpbmcgYW5kIHNoZWRkaW5nIHRlYXJzOyBidXQgdGhlIGNvdW50ZW5hbmNlIG9mIFBob2Npb24gd2FzIHRoZSBzYW1lIGFzIGl0IHVzZWQgdG8gYmUgd2hlbiBoZSB3YXMgZXNjb3J0ZWQgZnJvbSB0aGUgYXNzZW1ibHkgYXMgZ2VuZXJhbCwgYW5kIHdoZW4gbWVuIHNhdyBpdCwgdGhleSB3ZXJlIGFtYXplZCBhdCB0aGUgbWFuJ3MgY2FsbW5lc3MgYW5kIGF0IGhpcyBncmFuZGV1ciBvZiBzcGlyaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBlbmVtaWVzLCBob3dldmVyLCByYW4gYWxvbmcgYnkgaGlzIHNpZGUgYW5kIHJldmlsZWQgaGltOyBhbmQgb25lIG9mIHRoZW0gYWN0dWFsbHkgY2FtZSB1cCBhbmQgc3BhdCBpbiBoaXMgZmFjZS4gQXQgdGhpcywgYXMgd2UgYXJlIHRvbGQsIFBob2Npb24gbG9va2VkIHRvd2FyZHMgdGhlIG1hZ2lzdHJhdGVzIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2lsbCBub3Qgc29tZW9uZSBzdG9wIHRoaXMgZmVsbG93J3MgdW5zZWVtbHkgYmVoYXZpb3VyPzwvcT4gQWdhaW4sIHdoZW4gVGh1ZGlwcHVzLCBvbiBlbnRlcmluZyB0aGUgcHJpc29uIGFuZCBzZWVpbmcgdGhlIGV4ZWN1dGlvbmVyIGJydWlzaW5nIHRoZSBoZW1sb2NrLCBncmV3IGFuZ3J5IGFuZCBiZXdhaWxlZCBoaXMgaGFyZCBmYXRlLCBkZWNsYXJpbmcgaXQgbm90IGZpdHRpbmcgdGhhdCBoZSBzaG91bGQgcGVyaXNoIHdpdGggUGhvY2lvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklzIGl0IG5vIHNhdGlzZmFjdGlvbiB0byB0aGVlLCB0aGVuLDwvcT4gc2FpZCBQaG9jaW9uLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCB0aG91IGFydCBwdXQgdG8gZGVhdGggaW4gY29tcGFueSB3aXRoIFBob2Npb24/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIG9uZSBvZiBoaXMgZnJpZW5kcyBhc2tlZCBoaW0gaWYgaGUgaGFkIGFueSBtZXNzYWdlIGZvciBoaXMgc29uIFBob2N1cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNlcnRhaW5seSw8L3E+IHNhaWQgaGU7IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5teSBtZXNzYWdlIGlzIHRoYXQgaGUgY2hlcmlzaCBubyByZXNlbnRtZW50IGFnYWluc3QgdGhlIEF0aGVuaWFucy48L3E+IEFnYWluLCB3aGVuIE5pY29jbGVzLCBoaXMgbW9zdCBmYWl0aGZ1bCBmcmllbmQsIGJlZ2dlZCB0aGUgcHJpdmlsZWdlIG9mIGRyaW5raW5nIHRoZSBkcnVnIGZpcnN0LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBOaWNvY2xlcyw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aHkgcmVxdWVzdCBpcyBncmlldm91cyB0byBtZSBhbmQgcGFpbmZ1bDsgYnV0IHNpbmNlIEkgaGF2ZSBuZXZlciBpbiBhbGwgbXkgbGlmZSBkZW5pZWQgdGhlZSBhbnkgb3RoZXIgZmF2b3VyLCBJIGdyYW50IHRoZWUgdGhpcyBvbmUgYWxzby48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGFsbCB0aGUgcmVzdCBoYWQgZHJ1bmsgb2YgaXQsIHRoZSBkcnVnIHJhbiBzaG9ydCwgYW5kIHRoZSBleGVjdXRpb25lciByZWZ1c2VkIHRvIGJydWlzZSBhbm90aGVyIHBvcnRpb24gdW5sZXNzIGhlIHdlcmUgcGFpZCB0d2VsdmUgZHJhY2htYXMsIHdoaWNoIHdhcyB0aGUgcHJpY2Ugb2YgdGhlIHdlaWdodCByZXF1aXJlZC4gSG93ZXZlciwgYWZ0ZXIgYSBkZWxheSBvZiBzb21lIGxlbmd0aCwgUGhvY2lvbiBjYWxsZWQgb25lIG9mIGhpcyBmcmllbmRzLCBhbmQsIGFza2luZyBpZiBhIG1hbiBjb3VsZCBub3QgZXZlbiBkaWUgYXQgQXRoZW5zIHdpdGhvdXQgcGF5aW5nIGZvciB0aGUgcHJpdmlsZWdlLCBiYWRlIGhpbSBnaXZlIHRoZSBleGVjdXRpb25lciBoaXMgbW9uZXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGUgbmluZXRlZW50aCBkYXkgb2YgdGhlIG1vbnRoIE11bnljaGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiBNYXksIDMxOCBCLkMuPC9ub3RlPiBhbmQgdGhlIGhvcnNlbWVuIGNvbmR1Y3RpbmcgdGhlIHByb2Nlc3Npb24gaW4gaG9ub3VyIG9mIFpldXMgd2VyZSBwYXNzaW5nIGJ5IHRoZSBwcmlzb24uIFNvbWUgb2YgdGhlbSB0b29rIG9mZiB0aGVpciBnYXJsYW5kcywgYW5kIG90aGVycyBnYXplZCBhdCB0aGUgZG9vciBvZiB0aGUgcHJpc29uIHdpdGggdGVhcnMgaW4gdGhlaXIgZXllcy4gQW5kIGl0IHdhcyB0aG91Z2h0IGJ5IGFsbCB0aG9zZSB3aG9zZSBzb3VscyB3ZXJlIG5vdCB3aG9sbHkgc2F2YWdlIGFuZCBkZWJhdWNoZWQgYnkgcmFnZSBhbmQgamVhbG91c3ksIHRoYXQgYW4gaW1waW91cyB0aGluZyBoYWQgYmVlbiBkb25lIGluIG5vdCB3YWl0aW5nIG92ZXIgdGhhdCBkYXksIGFuZCBzbyBrZWVwaW5nIHRoZSBjaXR5IHB1cmUgZnJvbSBhIHB1YmxpYyBleGVjdXRpb24gd2hlbiBpdCB3YXMgaG9sZGluZyBmZXN0aXZhbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGlzIGVuZW1pZXMsIGFzIGlmIHRoZWlyIHRyaXVtcGggd2VyZSBpbmNvbXBsZXRlLCBnb3QgYSBkZWNyZWUgcGFzc2VkIHRoYXQgdGhlIGJvZHkgb2YgUGhvY2lvbiBzaG91bGQgYmUgY2FycmllZCBiZXlvbmQgdGhlIGJvdW5kYXJ5IG9mIHRoZSBjb3VudHJ5LCBhbmQgdGhhdCBubyBBdGhlbmlhbiBzaG91bGQgbGlnaHQgYSBmaXJlIGZvciBoaXMgb2JzZXF1aWVzLiBUaGVyZWZvcmUgbm8gZnJpZW5kIG9mIGhpcyB2ZW50dXJlZCB0byB0b3VjaCBoaXMgYm9keSwgYnV0IGEgY2VydGFpbiBDb25vcGlvbiwgd2hvIHdhcyB3b250IHRvIHBlcmZvcm0gc3VjaCBzZXJ2aWNlcyBmb3IgaGlyZSwgY2FycmllZCB0aGUgYm9keSBiZXlvbmQgRWxldXNpcywgdG9vayBmaXJlIGZyb20gdGhlIE1lZ2FyaWFuIHRlcnJpdG9yeSwgYW5kIGJ1cm5lZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdpZmUgb2YgUGhvY2lvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBob2MuIDE5LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGl4PC9iaWJsPi48L25vdGU+IGhvd2V2ZXIsIHdobyB3YXMgcHJlc2VudCB3aXRoIGhlciBtYWlkLXNlcnZhbnRzLCBoZWFwZWQgdXAgYSBjZW5vdGFwaCBvbiB0aGUgc3BvdCBhbmQgcG91cmVkIGxpYmF0aW9ucyB1cG9uIGl0OyB0aGVuLCBwdXR0aW5nIHRoZSBib25lcyBpbiBoZXIgYm9zb20gYW5kIGNhcnJ5aW5nIHRoZW0gYnkgbmlnaHQgdG8gaGVyIGR3ZWxsaW5nLCBzaGUgYnVyaWVkIHRoZW0gYnkgdGhlIGhlYXJ0aCwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIHRoZWUsIGRlYXIgSGVhcnRoLCBJIGVudHJ1c3QgdGhlc2UgcmVtYWlucyBvZiBhIG5vYmxlIG1hbjsgYnV0IGRvIHRob3UgcmVzdG9yZSB0aGVtIHRvIHRoZSBzZXB1bGNocmUgb2YgaGlzIGZhdGhlcnMsIHdoZW4gdGhlIEF0aGVuaWFucyBzaGFsbCBoYXZlIGNvbWUgdG8gdGhlaXIgc2Vuc2VzLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRoZSBuaW5ldGVlbnRoIGRheSBvZiB0aGUgbW9udGggTXVueWNoaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgaW4gTWF5LCAzMTggQi5DLjwvbm90ZT4gYW5kIHRoZSBob3JzZW1lbiBjb25kdWN0aW5nIHRoZSBwcm9jZXNzaW9uIGluIGhvbm91ciBvZiBaZXVzIHdlcmUgcGFzc2luZyBieSB0aGUgcHJpc29uLiBTb21lIG9mIHRoZW0gdG9vayBvZmYgdGhlaXIgZ2FybGFuZHMsIGFuZCBvdGhlcnMgZ2F6ZWQgYXQgdGhlIGRvb3Igb2YgdGhlIHByaXNvbiB3aXRoIHRlYXJzIGluIHRoZWlyIGV5ZXMuIEFuZCBpdCB3YXMgdGhvdWdodCBieSBhbGwgdGhvc2Ugd2hvc2Ugc291bHMgd2VyZSBub3Qgd2hvbGx5IHNhdmFnZSBhbmQgZGViYXVjaGVkIGJ5IHJhZ2UgYW5kIGplYWxvdXN5LCB0aGF0IGFuIGltcGlvdXMgdGhpbmcgaGFkIGJlZW4gZG9uZSBpbiBub3Qgd2FpdGluZyBvdmVyIHRoYXQgZGF5LCBhbmQgc28ga2VlcGluZyB0aGUgY2l0eSBwdXJlIGZyb20gYSBwdWJsaWMgZXhlY3V0aW9uIHdoZW4gaXQgd2FzIGhvbGRpbmcgZmVzdGl2YWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhpcyBlbmVtaWVzLCBhcyBpZiB0aGVpciB0cml1bXBoIHdlcmUgaW5jb21wbGV0ZSwgZ290IGEgZGVjcmVlIHBhc3NlZCB0aGF0IHRoZSBib2R5IG9mIFBob2Npb24gc2hvdWxkIGJlIGNhcnJpZWQgYmV5b25kIHRoZSBib3VuZGFyeSBvZiB0aGUgY291bnRyeSwgYW5kIHRoYXQgbm8gQXRoZW5pYW4gc2hvdWxkIGxpZ2h0IGEgZmlyZSBmb3IgaGlzIG9ic2VxdWllcy4gVGhlcmVmb3JlIG5vIGZyaWVuZCBvZiBoaXMgdmVudHVyZWQgdG8gdG91Y2ggaGlzIGJvZHksIGJ1dCBhIGNlcnRhaW4gQ29ub3Bpb24sIHdobyB3YXMgd29udCB0byBwZXJmb3JtIHN1Y2ggc2VydmljZXMgZm9yIGhpcmUsIGNhcnJpZWQgdGhlIGJvZHkgYmV5b25kIEVsZXVzaXMsIHRvb2sgZmlyZSBmcm9tIHRoZSBNZWdhcmlhbiB0ZXJyaXRvcnksIGFuZCBidXJuZWQgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aWZlIG9mIFBob2Npb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTkuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXg8L2JpYmw+Ljwvbm90ZT4gaG93ZXZlciwgd2hvIHdhcyBwcmVzZW50IHdpdGggaGVyIG1haWQtc2VydmFudHMsIGhlYXBlZCB1cCBhIGNlbm90YXBoIG9uIHRoZSBzcG90IGFuZCBwb3VyZWQgbGliYXRpb25zIHVwb24gaXQ7IHRoZW4sIHB1dHRpbmcgdGhlIGJvbmVzIGluIGhlciBib3NvbSBhbmQgY2FycnlpbmcgdGhlbSBieSBuaWdodCB0byBoZXIgZHdlbGxpbmcsIHNoZSBidXJpZWQgdGhlbSBieSB0aGUgaGVhcnRoLCBzYXlpbmc6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMTkuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXg8L2JpYmw+LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VG8gdGhlZSwgZGVhciBIZWFydGgsIEkgZW50cnVzdCB0aGVzZSByZW1haW5zIG9mIGEgbm9ibGUgbWFuOyBidXQgZG8gdGhvdSByZXN0b3JlIHRoZW0gdG8gdGhlIHNlcHVsY2hyZSBvZiBoaXMgZmF0aGVycywgd2hlbiB0aGUgQXRoZW5pYW5zIHNoYWxsIGhhdmUgY29tZSB0byB0aGVpciBzZW5zZXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW5kZWVkLCBhZnRlciBhIHNob3J0IHRpbWUgaGFkIHBhc3NlZCwgYW5kIHdoZW4gdGhlIGNvdXJzZSBvZiBldmVudHMgd2FzIHRlYWNoaW5nIHRoZW0gd2hhdCBhIHBhdHJvbiBhbmQgZ3VhcmRpYW4gb2YgbW9kZXJhdGlvbiBhbmQganVzdGljZSB0aGUgcGVvcGxlIGhhZCBsb3N0LCB0aGV5IHNldCB1cCBhIHN0YXR1ZSBvZiBoaW0gaW4gYnJvbnplLCBhbmQgZ2F2ZSBoaXMgYm9uZXMgYSBwdWJsaWMgYnVyaWFsLiBNb3Jlb3ZlciwgYXMgcmVnYXJkcyBoaXMgYWNjdXNlcnMsIHRoZSBwZW9wbGUgdGhlbXNlbHZlcyBjb25kZW1uZWQgSGFnbm9uaWRlcyBhbmQgcHV0IGhpbSB0byBkZWF0aDsgd2hpbGUgRXBpY3VydXMgYW5kIERlbW9waGlsdXMsIHdobyBoYWQgcnVuIGF3YXkgZnJvbSB0aGUgY2l0eSwgd2VyZSBmb3VuZCBvdXQgYnkgUGhvY2lvbidzIHNvbiBhbmQgdmlzaXRlZCB3aXRoIGhpcyB2ZW5nZWFuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCwgYWZ0ZXIgYSBzaG9ydCB0aW1lIGhhZCBwYXNzZWQsIGFuZCB3aGVuIHRoZSBjb3Vyc2Ugb2YgZXZlbnRzIHdhcyB0ZWFjaGluZyB0aGVtIHdoYXQgYSBwYXRyb24gYW5kIGd1YXJkaWFuIG9mIG1vZGVyYXRpb24gYW5kIGp1c3RpY2UgdGhlIHBlb3BsZSBoYWQgbG9zdCwgdGhleSBzZXQgdXAgYSBzdGF0dWUgb2YgaGltIGluIGJyb256ZSwgYW5kIGdhdmUgaGlzIGJvbmVzIGEgcHVibGljIGJ1cmlhbC4gTW9yZW92ZXIsIGFzIHJlZ2FyZHMgaGlzIGFjY3VzZXJzLCB0aGUgcGVvcGxlIHRoZW1zZWx2ZXMgY29uZGVtbmVkIEhhZ25vbmlkZXMgYW5kIHB1dCBoaW0gdG8gZGVhdGg7IHdoaWxlIEVwaWN1cnVzIGFuZCBEZW1vcGhpbHVzLCB3aG8gaGFkIHJ1biBhd2F5IGZyb20gdGhlIGNpdHksIHdlcmUgZm91bmQgb3V0IGJ5IFBob2Npb24ncyBzb24gYW5kIHZpc2l0ZWQgd2l0aCBoaXMgdmVuZ2VhbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHNvbiBvZiBQaG9jaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGhvYy4gMjAuMSIgdmFsaWQ9InllcyI+Y2hhcHRlcnMgeHguPC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBob2MuIDMwLjEiIHZhbGlkPSJ5ZXMiPnh4eC4gMTwvYmlibD4uPC9ub3RlPiB3ZSBhcmUgdG9sZCwgdHVybmVkIG91dCB0byBiZSBhIG1hbiBvZiBubyB3b3J0aCBpbiBnZW5lcmFsLCBhbmQgb25jZSwgYmVpbmcgZW5hbW91cmVkIG9mIGEgZ2lybCB3aG8gd2FzIGtlcHQgaW4gYSBicm90aGVsLCBjaGFuY2VkIHRvIGhlYXIgVGhlb2RvcnVzIHRoZSBBdGhlaXN0IGRpc2NvdXJzZSBpbiB0aGUgTHljZWl1bSBhcyBmb2xsb3dzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRoZXJlIGlzIG5vIGRpc2dyYWNlIGluIHJhbnNvbWluZyBhIG1hbiBiZWxvdmVkLCB0aGUgc2FtZSBpcyB0cnVlIG9mIGEgd29tYW4gbG92ZWQ7IHdoYXQgaXMgdHJ1ZSBvZiBhIGNvbXJhZGUsIGlzIHRydWUgYWxzbyBvZiBhIG1pc3RyZXNzLjwvcT4gQWNjb3JkaW5nbHksIGhpcyBwYXNzaW9uIGxlYWRpbmcgaGltIHRvIHRoaW5rIHRoZSBhcmd1bWVudCBzb3VuZCwgaGUgcmFuc29tZWQgaGlzIG1pc3RyZXNzLiBCdXQgUGhvY2lvbidzIGZhdGUgcmVtaW5kZWQgdGhlIEdyZWVrcyBhbmV3IG9mIHRoYXQgb2YgU29jcmF0ZXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzk5IEIuQy48L25vdGU+IHRoZXkgZmVsdCB0aGF0IHRoZSBzaW4gYW5kIG1pc2ZvcnR1bmUgb2YgQXRoZW5zIHdlcmUgYWxpa2UgaW4gYm90aCBjYXNlcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
