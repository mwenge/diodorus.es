var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBteSBvcGluaW9uIHRob3NlIGhpc3RvcmlhbnMgdGVsbCBhIG1vcmUgcHJvYmFibGUgc3Rvcnkgd2hvIHNheSB0aGF0IGEgdGllIG9mIGd1ZXN0LWZyaWVuZHNoaXAgd2l0aCBoaXMgZmF0aGVyIGxlZCBQaGlsaXAgdG8gZ2l2ZSBhZHZhbmNlbWVudCB0byBFdW1lbmVzLiBBZnRlciBQaGlsaXAncyBkZWF0aCBFdW1lbmVzIHdhcyB0aG91Z2h0IHRvIGJlIGluZmVyaW9yIHRvIG5vbmUgb2YgQWxleGFuZGVyJ3MgZm9sbG93ZXJzIGluIHNhZ2FjaXR5IGFuZCBmaWRlbGl0eSwgYW5kIHRob3VnaCBoZSBoYWQgb25seSB0aGUgdGl0bGUgb2YgY2hpZWYgc2VjcmV0YXJ5LCBoZSB3YXMgaGVsZCBpbiBhcyBtdWNoIGhvbm91ciBhcyB0aGUga2luZydzIHByaW5jaXBhbCBmcmllbmRzIGFuZCBpbnRpbWF0ZXMsIHNvIHRoYXQgb24gdGhlIEluZGlhbiBleHBlZGl0aW9uIGhlIHdhcyBhY3R1YWxseSBzZW50IG91dCBhcyBnZW5lcmFsIHdpdGggYSBmb3JjZSB1bmRlciBoaXMgb3duIG9yZGVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiA1LjI0LjYiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAyNCwgNiBmPC9iaWJsPi48L25vdGU+IGFuZCByZWNlaXZlZCB0aGUgY29tbWFuZCBpbiB0aGUgY2F2YWxyeSB3aGljaCBQZXJkaWNjYXMgaGFkIGhlbGQsIHdoZW4gUGVyZGljY2FzLCBhZnRlciBIZXBoYWVzdGlvbidzIGRlYXRoLCB3YXMgYWR2YW5jZWQgdG8gdGhhdCBvZmZpY2VyJ3MgcG9zaXRpb24uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNS4yNC42Ij5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdi4gMjQsIDYgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2LiAyNCwgNiBmPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIE5lb3B0b2xlbXVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBTaGllbGQtYmVhcmVycywgYWZ0ZXIgQWxleGFuZGVyJ3MgZGVhdGgsIHNhaWQgdGhhdCBoZSBoYWQgZm9sbG93ZWQgdGhlIGtpbmcgd2l0aCBzaGllbGQgYW5kIHNwZWFyLCBidXQgRXVtZW5lcyB3aXRoIHBlbiBhbmQgcGFwZXIsIHRoZSBNYWNlZG9uaWFucyBsYXVnaGVkIGhpbSB0byBzY29ybjsgdGhleSBrbmV3IHRoYXQsIGJlc2lkZXMgaGlzIG90aGVyIGhvbm91cnMsIEV1bWVuZXMgaGFkIGJlZW4gZGVlbWVkIHdvcnRoeSBieSB0aGUga2luZyBvZiByZWxhdGlvbnNoaXAgaW4gbWFycmlhZ2UuIEZvciBCYXJzaW7DqSB0aGUgZGF1Z2h0ZXIgb2YgQXJ0YWJhenVzLCB0aGUgZmlyc3Qgd29tYW4gd2hvbSBBbGV4YW5kZXIga25ldyBpbiBBc2lhLCBhbmQgYnkgd2hvbSBoZSBoYWQgYSBzb24sIEhlcmFjbGVzLCBoYWQgdHdvIHNpc3RlcnM7IG9mIHRoZXNlIEFsZXhhbmRlciBnYXZlIG9uZSwgQXBhbWEsIHRvIFB0b2xlbXksIGFuZCB0aGUgb3RoZXIsIGFsc28gY2FsbGVkIEJhcnNpbsOpLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJyLiBBbi4gNy40LjYiPkFycmlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiB2aWkuIDQsIDYsPC9iaWJsPiB0aGUgbmFtZXMgb2YgdGhlIHNpc3RlcnMgYXJlIEFydGFjYW1hIGFuZCBBcnRvbmlzLCByZXNwZWN0aXZlbHkuPC9ub3RlPiB0byBFdW1lbmVzLiBUaGlzIHdhcyBhdCB0aGUgdGltZSB3aGVuIGhlIGRpc3RyaWJ1dGVkIHRoZSBvdGhlciBQZXJzaWFuIHdvbWVuIGFzIGNvbnNvcnRzIGFtb25nIGhpcyBjb21wYW5pb25zLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDcuNC42Ij5BcnJpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiA0LCA2LDwvYmlibD4gdGhlIG5hbWVzIG9mIHRoZSBzaXN0ZXJzIGFyZSBBcnRhY2FtYSBhbmQgQXJ0b25pcywgcmVzcGVjdGl2ZWx5Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuYWIuPC90aXRsZT4gdmlpLiA0LCA2LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA3MC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIGx4eC4gMjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA3MC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIGx4eC4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIGx4eC4gMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgRXVtZW5lcyB3YXMgb2Z0ZW4gaW4gY29sbGlzaW9uIHdpdGggQWxleGFuZGVyLCBhbmQgaGUgZ290IGhpbXNlbGYgaW50byBkYW5nZXIgdGhyb3VnaCBIZXBoYWVzdGlvbi4gSW4gdGhlIGZpcnN0IHBsYWNlLCBmb3IgaW5zdGFuY2UsIHdoZW4gSGVwaGFlc3Rpb24gYXNzaWduZWQgdG8gRXVpdXMgdGhlIGZsdXRlLXBsYXllciB0aGUgcXVhcnRlcnMgd2hpY2ggaGlzIHNlcnZhbnRzIGhhZCBhbHJlYWR5IHRha2VuIHVwIGZvciBFdW1lbmVzLCBFdW1lbmVzLCBhY2NvbXBhbmllZCBieSBNZW50b3IsIGNhbWUgaW4gYSBwYXNzaW9uIHRvIEFsZXhhbmRlciBhbmQgY3JpZWQgb3V0IHRoYXQgaXQgd2FzIGJlc3QgZm9yIGhpbSB0byB0aHJvdyBhd2F5IGhpcyBhcm1zIGFuZCBiZSBhIGZsdXRlLXBsYXllciBvciBhIHRyYWdpYyBhY3Rvci4gVGhlIGltbWVkaWF0ZSByZXN1bHQgd2FzIHRoYXQgQWxleGFuZGVyIHNoYXJlZCBoaXMgaW5kaWduYXRpb24gYW5kIGhlYXBlZCBhYnVzZSB1cG9uIEhlcGhhZXN0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Tb29uLCBob3dldmVyLCBoZSBjaGFuZ2VkIGhpcyBtaW5kIGFuZCB3YXMgYW5ncnkgd2l0aCBFdW1lbmVzLCBmZWVsaW5nIHRoYXQgaGUgaGFkIGluZHVsZ2VkIGluIGluc29sZW5jZSB0b3dhcmRzIGhpbXNlbGYgbW9yZSB0aGFuIGluIGJvbGQgd29yZHMgYWdhaW5zdCBIZXBoYWVzdGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBFdW1lbmVzIHdhcyBvZnRlbiBpbiBjb2xsaXNpb24gd2l0aCBBbGV4YW5kZXIsIGFuZCBoZSBnb3QgaGltc2VsZiBpbnRvIGRhbmdlciB0aHJvdWdoIEhlcGhhZXN0aW9uLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGZvciBpbnN0YW5jZSwgd2hlbiBIZXBoYWVzdGlvbiBhc3NpZ25lZCB0byBFdWl1cyB0aGUgZmx1dGUtcGxheWVyIHRoZSBxdWFydGVycyB3aGljaCBoaXMgc2VydmFudHMgaGFkIGFscmVhZHkgdGFrZW4gdXAgZm9yIEV1bWVuZXMsIEV1bWVuZXMsIGFjY29tcGFuaWVkIGJ5IE1lbnRvciwgY2FtZSBpbiBhIHBhc3Npb24gdG8gQWxleGFuZGVyIGFuZCBjcmllZCBvdXQgdGhhdCBpdCB3YXMgYmVzdCBmb3IgaGltIHRvIHRocm93IGF3YXkgaGlzIGFybXMgYW5kIGJlIGEgZmx1dGUtcGxheWVyIG9yIGEgdHJhZ2ljIGFjdG9yLiBUaGUgaW1tZWRpYXRlIHJlc3VsdCB3YXMgdGhhdCBBbGV4YW5kZXIgc2hhcmVkIGhpcyBpbmRpZ25hdGlvbiBhbmQgaGVhcGVkIGFidXNlIHVwb24gSGVwaGFlc3Rpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvb24sIGhvd2V2ZXIsIGhlIGNoYW5nZWQgaGlzIG1pbmQgYW5kIHdhcyBhbmdyeSB3aXRoIEV1bWVuZXMsIGZlZWxpbmcgdGhhdCBoZSBoYWQgaW5kdWxnZWQgaW4gaW5zb2xlbmNlIHRvd2FyZHMgaGltc2VsZiBtb3JlIHRoYW4gaW4gYm9sZCB3b3JkcyBhZ2FpbnN0IEhlcGhhZXN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFnYWluLCB3aGVuIEFsZXhhbmRlciB3YXMgc2VuZGluZyBvdXQgTmVhcmNodXMgd2l0aCBhIGZsZWV0IHRvIGV4cGxvcmUgdGhlIG91dGVyIHNlYSwgaGUgYXNrZWQgbW9uZXkgb2YgaGlzIGZyaWVuZHMsIHNpbmNlIHRoZSByb3lhbCB0cmVhc3VyeSB3YXMgZW1wdHkuIEV1bWVuZXMgd2FzIGFza2VkIGZvciB0aHJlZSBodW5kcmVkIHRhbGVudHMsIGJ1dCBnYXZlIG9ubHkgYSBodW5kcmVkLCBhbmQgc2FpZCB0aGF0IGV2ZW4gdGhlc2UgaGFkIGJlZW4gc2xvd2x5IGFuZCB3aXRoIGRpZmZpY3VsdHkgY29sbGVjdGVkIGZvciBoaW0gYnkgaGlzIHN0ZXdhcmRzLiBBbGV4YW5kZXIgbWFkZSBubyByZXByb2FjaGVzLCBub3IgZGlkIGhlIHRha2UgdGhlIG1vbmV5LCBidXQgb3JkZXJlZCBoaXMgc2VydmFudHMgc2VjcmV0bHkgdG8gc2V0IGZpcmUgdG8gdGhlIHRlbnQgb2YgRXVtZW5lcywgd2lzaGluZyB0byB0YWtlIGl0cyBvd25lciBpbiBhIG1hbmlmZXN0IGxpZSB3aGVuIHRoZSB0cmVhc3VyZSB3YXMgY2FycmllZCBvdXQgb2YgaXQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGJlZm9yZSB0aGF0IGNvdWxkIGJlIGRvbmUgdGhlIHRlbnQgd2FzIGNvbnN1bWVkLCBhbmQgdGhlIGRlc3RydWN0aW9uIG9mIGhpcyBwYXBlcnMgbWFkZSBBbGV4YW5kZXIgcmVwZW50IGhpbSBvZiBoaXMgb3JkZXJzLiBTdGlsbCwgdGhlIGdvbGQgYW5kIHNpbHZlciB0aGF0IHdhcyBtZWx0ZWQgZG93biBieSB0aGUgZmlyZSB3YXMgZm91bmQgdG8gYmUgbW9yZSB0aGFuIGEgdGhvdXNhbmQgdGFsZW50cycgd29ydGguIEFsZXhhbmRlciB0b29rIG5vbmUgb2YgaXQsIGhvd2V2ZXIsIGJ1dCBhY3R1YWxseSB3cm90ZSB0byBoaXMgc2F0cmFwcyBhbmQgZ2VuZXJhbHMgZXZlcnl3aGVyZSB0byBzZW5kIGNvcGllcyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgaGFkIGJlZW4gZGVzdHJveWVkLCBhbmQgb3JkZXJlZCBFdW1lbmVzIHRvIHRha2UgdGhlbSBhbGwgaW4gY2hhcmdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgdGhhdCBjb3VsZCBiZSBkb25lIHRoZSB0ZW50IHdhcyBjb25zdW1lZCwgYW5kIHRoZSBkZXN0cnVjdGlvbiBvZiBoaXMgcGFwZXJzIG1hZGUgQWxleGFuZGVyIHJlcGVudCBoaW0gb2YgaGlzIG9yZGVycy4gU3RpbGwsIHRoZSBnb2xkIGFuZCBzaWx2ZXIgdGhhdCB3YXMgbWVsdGVkIGRvd24gYnkgdGhlIGZpcmUgd2FzIGZvdW5kIHRvIGJlIG1vcmUgdGhhbiBhIHRob3VzYW5kIHRhbGVudHMnIHdvcnRoLiBBbGV4YW5kZXIgdG9vayBub25lIG9mIGl0LCBob3dldmVyLCBidXQgYWN0dWFsbHkgd3JvdGUgdG8gaGlzIHNhdHJhcHMgYW5kIGdlbmVyYWxzIGV2ZXJ5d2hlcmUgdG8gc2VuZCBjb3BpZXMgb2YgdGhlIGRvY3VtZW50cyB0aGF0IGhhZCBiZWVuIGRlc3Ryb3llZCwgYW5kIG9yZGVyZWQgRXVtZW5lcyB0byB0YWtlIHRoZW0gYWxsIGluIGNoYXJnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHN0aWxsIGFnYWluLCBFdW1lbmVzIGhhZCBhIHF1YXJyZWwgd2l0aCBIZXBoYWVzdGlvbiBhYm91dCBhIGNlcnRhaW4gZ2lmdCwgYW5kIG11Y2ggYWJ1c2l2ZSBsYW5ndWFnZSBwYXNzZWQgYmV0d2VlbiB0aGVtLiBBdCB0aGUgdGltZSwgaW5kZWVkLCBFdW1lbmVzIHdhcyBubyBsZXNzIGluIGZhdm91ciB0aGFuIGJlZm9yZTsgYnV0IGEgbGl0dGxlIHdoaWxlIGFmdGVyd2FyZHMgSGVwaGFlc3Rpb24gZGllZCwgYW5kIHRoZSBraW5nLCBpbiBoaXMgYml0dGVyIHNvcnJvdywgZGVhbHQgaGFyc2hseSBhbmQgd2FzIHNldmVyZSB3aXRoIGFsbCB3aG8sIGFzIGhlIHRob3VnaHQsIGhhZCBiZWVuIGplYWxvdXMgb2YgaGlzIGZhdm91cml0ZSB3aGlsZSBoZSBsaXZlZCBhbmQgbm93IHJlam9pY2VkIGF0IGhpcyBkZWF0aC4gRXVtZW5lcywgaW4gcGFydGljdWxhciwgaGUgc3VzcGVjdGVkIG9mIHN1Y2ggZmVlbGluZ3MsIGFuZCBvZnRlbiByZXByb2FjaGVkIGhpbSBmb3IgaGlzIGZvcm1lciBxdWFycmVscyB3aXRoIEhlcGhhZXN0aW9uIGFuZCBoaXMgYWJ1c2l2ZSBsYW5ndWFnZSB0b3dhcmRzIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEV1bWVuZXMsIHdobyB3YXMgd2lseSBhbmQgcGVyc3Vhc2l2ZSwgdHJpZWQgdG8gbWFrZSB3aGF0IHRocmVhdGVuZWQgaGlzIHJ1aW4gY29uZHVjZSB0byBoaXMgc2FsdmF0aW9uLiBIZSBzb3VnaHQgcmVmdWdlLCBuYW1lbHksIGluIEFsZXhhbmRlcidzIGFyZGVudCBncmF0aXR1ZGUgdG93YXJkcyBIZXBoYWVzdGlvbiwgc3VnZ2VzdGluZyBob25vdXJzIHdoaWNoIHdlcmUgbW9zdCBsaWtlbHkgdG8gYWRvcm4gdGhlIG1lbW9yeSBvZiB0aGUgZGVjZWFzZWQsIGFuZCBjb250cmlidXRpbmcgbW9uZXkgZm9yIHRoZSBjb25zdHJ1Y3Rpb24gb2YgaGlzIHRvbWIgbGF2aXNobHkgYW5kIHJlYWRpbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCBhZ2FpbiwgRXVtZW5lcyBoYWQgYSBxdWFycmVsIHdpdGggSGVwaGFlc3Rpb24gYWJvdXQgYSBjZXJ0YWluIGdpZnQsIGFuZCBtdWNoIGFidXNpdmUgbGFuZ3VhZ2UgcGFzc2VkIGJldHdlZW4gdGhlbS4gQXQgdGhlIHRpbWUsIGluZGVlZCwgRXVtZW5lcyB3YXMgbm8gbGVzcyBpbiBmYXZvdXIgdGhhbiBiZWZvcmU7IGJ1dCBhIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIEhlcGhhZXN0aW9uIGRpZWQsIGFuZCB0aGUga2luZywgaW4gaGlzIGJpdHRlciBzb3Jyb3csIGRlYWx0IGhhcnNobHkgYW5kIHdhcyBzZXZlcmUgd2l0aCBhbGwgd2hvLCBhcyBoZSB0aG91Z2h0LCBoYWQgYmVlbiBqZWFsb3VzIG9mIGhpcyBmYXZvdXJpdGUgd2hpbGUgaGUgbGl2ZWQgYW5kIG5vdyByZWpvaWNlZCBhdCBoaXMgZGVhdGguIEV1bWVuZXMsIGluIHBhcnRpY3VsYXIsIGhlIHN1c3BlY3RlZCBvZiBzdWNoIGZlZWxpbmdzLCBhbmQgb2Z0ZW4gcmVwcm9hY2hlZCBoaW0gZm9yIGhpcyBmb3JtZXIgcXVhcnJlbHMgd2l0aCBIZXBoYWVzdGlvbiBhbmQgaGlzIGFidXNpdmUgbGFuZ3VhZ2UgdG93YXJkcyBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdW1lbmVzLCB3aG8gd2FzIHdpbHkgYW5kIHBlcnN1YXNpdmUsIHRyaWVkIHRvIG1ha2Ugd2hhdCB0aHJlYXRlbmVkIGhpcyBydWluIGNvbmR1Y2UgdG8gaGlzIHNhbHZhdGlvbi4gSGUgc291Z2h0IHJlZnVnZSwgbmFtZWx5LCBpbiBBbGV4YW5kZXIncyBhcmRlbnQgZ3JhdGl0dWRlIHRvd2FyZHMgSGVwaGFlc3Rpb24sIHN1Z2dlc3RpbmcgaG9ub3VycyB3aGljaCB3ZXJlIG1vc3QgbGlrZWx5IHRvIGFkb3JuIHRoZSBtZW1vcnkgb2YgdGhlIGRlY2Vhc2VkLCBhbmQgY29udHJpYnV0aW5nIG1vbmV5IGZvciB0aGUgY29uc3RydWN0aW9uIG9mIGhpcyB0b21iIGxhdmlzaGx5IGFuZCByZWFkaWx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQWxleGFuZGVyIHdhcyBkZWFkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SnVuZSAxMywgMzIzIEIuQy48L25vdGU+IGFuZCBhIHF1YXJyZWwgaGFkIGFyaXNlbiBiZXR3ZWVuIHRoZSBNYWNlZG9uaWFuIG1lbi1hdC1hcm1zIGFuZCBoaXMgcHJpbmNpcGFsIG9mZmljZXJzLCBvciBjb21wYW5pb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBxdWFycmVsIHdhcyBvdmVyIHRoZSBzdWNjZXNzaW9uIHRvIEFsZXhhbmRlcidzIHRocm9uZS4gVGhlIG9mZmljZXJzLCBzdXBwb3J0ZWQgYnkgdGhlIGNhdmFscnksIHByb3Bvc2VkIHRoYXQgdGhlIGNyb3duIGJlIHJlc2VydmVkIGZvciB0aGUgY2hpbGQgb2YgUm94YW5hIGJ5IEFsZXhhbmRlciwgaWYgaXQgc2hvdWxkIGJlIGEgc29uLCBhbmQgdGhhdCBQZXJkaWNjYXMgc2hvdWxkIGJlIHJlZ2VudCBpbiB0aGUgbWVhbnRpbWU7IHRoZSBpbmZhbnRyeSBkZW1hbmRlZCB0aGF0IEFycmhpZGFldXMsIHRoZSBiYXN0YXJkIGJyb3RoZXIgb2YgQWxleGFuZGVyLCBzaG91bGQgYXQgb25jZSBiZSBwcm9jbGFpbWVkIGtpbmcuIEluIHRoZSBlbmQgYSBjb21wcm9taXNlIHdhcyBlZmZlY3RlZCwgYW5kIFBlcmRpY2NhcyBiZWNhbWUgY2hpZWYgaW4gY29tbWFuZCB1bmRlciBBcnJoaWRhZXVzLCB3aXRoIHdob20gQWxleGFuZGVyJ3Mgc29uLCB3aGVuIGJvcm4sIHdhcyB0byBiZSBqb2ludCBraW5nLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA3Ny41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsZXhhbmRlcjwvdGl0bGU+LCBseHh2aWkuIDU8L2JpYmw+Ljwvbm90ZT4gRXVtZW5lcyBzaWRlZCB3aXRoIHRoZSBsYXR0ZXIgaW4gaGlzIG9waW5pb25zLCBidXQgaW4gd2hhdCBoZSBzYWlkIGhlIHdhcyBhIGtpbmQgb2YgY29tbW9uIGZyaWVuZCB0byBib3RoIGFuZCBoZWxkIGhpbXNlbGYgYWxvb2YgZnJvbSB0aGUgcXVhcnJlbCwgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBubyBidXNpbmVzcyBvZiBoaXMsIHNpbmNlIGhlIHdhcyBhIHN0cmFuZ2VyLCB0byBtZWRkbGUgaW4gZGlzcHV0ZXMgb2YgTWFjZWRvbmlhbnMuIE1vcmVvdmVyLCB3aGVuIHRoZSByZXN0IG9mIHRoZSBwcmluY2lwYWwgb2ZmaWNlcnMgaGFkIHdpdGhkcmF3biBmcm9tIEJhYnlsb24sIGhlIHJlbWFpbmVkIGJlaGluZCBpbiB0aGUgY2l0eSBhbmQgbW9sbGlmaWVkIG1hbnkgb2YgdGhlIG1lbi1hdC1hcm1zIGFuZCBtYWRlIHRoZW0gbW9yZSBkaXNwb3NlZCB0b3dhcmRzIGEgc2V0dGxlbWVudCBvZiB0aGUgcXVhcnJlbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIG9mZmljZXJzLCBoYXZpbmcgY29uZmVycmVkIHdpdGggb25lIGFub3RoZXIsIGJyb3VnaHQgdGhlaXIgZmlyc3QgdHVtdWx0dW91cyBwcm9jZWVkaW5ncyB0byBhbiBlbmQsIGFuZCB3ZXJlIGRpc3RyaWJ1dGluZyBzYXRyYXBpZXMgYW5kIGNvbW1hbmRzLCBFdW1lbmVzIHJlY2VpdmVkIENhcHBhZG9jaWEsIFBhcGhsYWdvbmlhLCBhbmQgdGhlIHNvdXRoZXJuIGNvYXN0IG9mIHRoZSBFdXhpbmUgc2VhIGFzIGZhciBhcyBUcmFwZXp1cy4gSXQgaXMgdHJ1ZSB0aGF0IGF0IHRoZSB0aW1lIHRoaXMgdGVycml0b3J5IHdhcyBub3QgeWV0IHN1YmplY3QgdG8gdGhlIE1hY2Vkb25pYW5zLCBmb3IgQXJpYXJhdGhlcyBoZWxkIHJveWFsIHN3YXkgb3ZlciBpdDsgYnV0IExlb25uYXR1cyBhbmQgQW50aWdvbnVzLCB3aXRoIGEgZ3JlYXQgYXJteTsgd2VyZSB0byBjb25kdWN0IEV1bWVuZXMgdGhpdGhlciBhbmQgZGVjbGFyZSBoaW0gc2F0cmFwIG9mIHRoZSBjb3VudHJ5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEFsZXhhbmRlciB3YXMgZGVhZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SnVuZSAxMywgMzIzIEIuQy48L25vdGU+IGFuZCBhIHF1YXJyZWwgaGFkIGFyaXNlbiBiZXR3ZWVuIHRoZSBNYWNlZG9uaWFuIG1lbi1hdC1hcm1zIGFuZCBoaXMgcHJpbmNpcGFsIG9mZmljZXJzLCBvciBjb21wYW5pb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHF1YXJyZWwgd2FzIG92ZXIgdGhlIHN1Y2Nlc3Npb24gdG8gQWxleGFuZGVyJ3MgdGhyb25lLiBUaGUgb2ZmaWNlcnMsIHN1cHBvcnRlZCBieSB0aGUgY2F2YWxyeSwgcHJvcG9zZWQgdGhhdCB0aGUgY3Jvd24gYmUgcmVzZXJ2ZWQgZm9yIHRoZSBjaGlsZCBvZiBSb3hhbmEgYnkgQWxleGFuZGVyLCBpZiBpdCBzaG91bGQgYmUgYSBzb24sIGFuZCB0aGF0IFBlcmRpY2NhcyBzaG91bGQgYmUgcmVnZW50IGluIHRoZSBtZWFudGltZTsgdGhlIGluZmFudHJ5IGRlbWFuZGVkIHRoYXQgQXJyaGlkYWV1cywgdGhlIGJhc3RhcmQgYnJvdGhlciBvZiBBbGV4YW5kZXIsIHNob3VsZCBhdCBvbmNlIGJlIHByb2NsYWltZWQga2luZy4gSW4gdGhlIGVuZCBhIGNvbXByb21pc2Ugd2FzIGVmZmVjdGVkLCBhbmQgUGVyZGljY2FzIGJlY2FtZSBjaGllZiBpbiBjb21tYW5kIHVuZGVyIEFycmhpZGFldXMsIHdpdGggd2hvbSBBbGV4YW5kZXIncyBzb24sIHdoZW4gYm9ybiwgd2FzIHRvIGJlIGpvaW50IGtpbmcuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gNzcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCBseHh2aWkuIDU8L2JpYmw+Ljwvbm90ZT4gRXVtZW5lcyBzaWRlZCB3aXRoIHRoZSBsYXR0ZXIgaW4gaGlzIG9waW5pb25zLCBidXQgaW4gd2hhdCBoZSBzYWlkIGhlIHdhcyBhIGtpbmQgb2YgY29tbW9uIGZyaWVuZCB0byBib3RoIGFuZCBoZWxkIGhpbXNlbGYgYWxvb2YgZnJvbSB0aGUgcXVhcnJlbCwgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBubyBidXNpbmVzcyBvZiBoaXMsIHNpbmNlIGhlIHdhcyBhIHN0cmFuZ2VyLCB0byBtZWRkbGUgaW4gZGlzcHV0ZXMgb2YgTWFjZWRvbmlhbnMuIE1vcmVvdmVyLCB3aGVuIHRoZSByZXN0IG9mIHRoZSBwcmluY2lwYWwgb2ZmaWNlcnMgaGFkIHdpdGhkcmF3biBmcm9tIEJhYnlsb24sIGhlIHJlbWFpbmVkIGJlaGluZCBpbiB0aGUgY2l0eSBhbmQgbW9sbGlmaWVkIG1hbnkgb2YgdGhlIG1lbi1hdC1hcm1zIGFuZCBtYWRlIHRoZW0gbW9yZSBkaXNwb3NlZCB0b3dhcmRzIGEgc2V0dGxlbWVudCBvZiB0aGUgcXVhcnJlbC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiA3Ny41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIGx4eHZpaS4gNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIGx4eHZpaS4gNTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBvZmZpY2VycywgaGF2aW5nIGNvbmZlcnJlZCB3aXRoIG9uZSBhbm90aGVyLCBicm91Z2h0IHRoZWlyIGZpcnN0IHR1bXVsdHVvdXMgcHJvY2VlZGluZ3MgdG8gYW4gZW5kLCBhbmQgd2VyZSBkaXN0cmlidXRpbmcgc2F0cmFwaWVzIGFuZCBjb21tYW5kcywgRXVtZW5lcyByZWNlaXZlZCBDYXBwYWRvY2lhLCBQYXBobGFnb25pYSwgYW5kIHRoZSBzb3V0aGVybiBjb2FzdCBvZiB0aGUgRXV4aW5lIHNlYSBhcyBmYXIgYXMgVHJhcGV6dXMuIEl0IGlzIHRydWUgdGhhdCBhdCB0aGUgdGltZSB0aGlzIHRlcnJpdG9yeSB3YXMgbm90IHlldCBzdWJqZWN0IHRvIHRoZSBNYWNlZG9uaWFucywgZm9yIEFyaWFyYXRoZXMgaGVsZCByb3lhbCBzd2F5IG92ZXIgaXQ7IGJ1dCBMZW9ubmF0dXMgYW5kIEFudGlnb251cywgd2l0aCBhIGdyZWF0IGFybXk7IHdlcmUgdG8gY29uZHVjdCBFdW1lbmVzIHRoaXRoZXIgYW5kIGRlY2xhcmUgaGltIHNhdHJhcCBvZiB0aGUgY291bnRyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBBbnRpZ29udXMgcGFpZCBubyBoZWVkIHRvIHRoZSBlZGljdHMgb2YgUGVyZGljY2FzLCBiZWluZyBhbHJlYWR5IGxpZnRlZCB1cCBpbiBoaXMgYW1iaXRpb25zIGFuZCBzY29ybmluZyBhbGwgaGlzIGFzc29jaWF0ZXM7IGJ1dCBMZW9ubmF0dXMgY2FtZSBkb3duIGZyb20gdGhlIGludGVyaW9yIGludG8gUGhyeWdpYSBpbiBvcmRlciB0byB1bmRlcnRha2UgdGhlIGV4cGVkaXRpb24gaW4gYmVoYWxmIG9mIEV1bWVuZXMuIEhlcmUsIGhvd2V2ZXIsIEhlY2F0YWV1cyB0aGUgdHlyYW50IG9mIENhcmRpYSBqb2luZWQgaGltIGFuZCBiZXNvdWdodCBoaW0gdG8gZ28gcmF0aGVyIHRvIHRoZSBhc3Npc3RhbmNlIG9mIEFudGlwYXRlciBhbmQgdGhlIE1hY2Vkb25pYW5zIGJlc2llZ2VkIGluIExhbWlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uIHRoZSBkZWF0aCBvZiBBbGV4YW5kZXIgdGhlIEdyZWVrcyBoYWQgcmV2b2x0ZWQgZnJvbSBNYWNlZG9uaWEsIGFuZCBoYWQgZHJpdmVuIEFudGlwYXRlciBhbmQgaGlzIGFybXkgaW50byBMYW1pYSwgYSBjaXR5IG9mIHNvdXRoZXJuIFRoZXNzYWx5Ljwvbm90ZT4gTGVvbm5hdHVzIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIGNyb3NzIG92ZXIgdG8gR3JlZWNlLCBpbnZpdGVkIEV1bWVuZXMgdG8gZ28gd2l0aCBoaW0sIGFuZCB0cmllZCB0byByZWNvbmNpbGUgaGltIHdpdGggSGVjYXRhZXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBoYWQgYSBoZXJlZGl0YXJ5IGRpc3RydXN0IG9mIG9uZSBhbm90aGVyIGFyaXNpbmcgZnJvbSBwb2xpdGljYWwgZGlmZmVyZW5jZXM7IGFuZCBmcmVxdWVudGx5IEV1bWVuZXMgaGFkIGJlZW4ga25vd24gdG8gZGVub3VuY2UgSGVjYXRhZXVzIHdoZW4gYSB0eXJhbnQgYW5kIHRvIGV4aG9ydCBBbGV4YW5kZXIgdG8gcmVzdG9yZSBpdHMgZnJlZWRvbSB0byBDYXJkaWEuIFRoZXJlZm9yZSBhdCB0aGlzIHRpbWUgYWxzbyBFdW1lbmVzIGRlY2xpbmVkIHRvIGdvIG9uIHRoZSBleHBlZGl0aW9uIGFnYWluc3QgdGhlIEdyZWVrcywgc2F5aW5nIGhlIHdhcyBhZnJhaWQgdGhhdCBBbnRpcGF0ZXIsIHdobyBoYWQgbG9uZyBoYXRlZCBoaW0sIHdvdWxkIGtpbGwgaGltIHRvIHBsZWFzZSBIZWNhdGFldXMuIFRoZW4gTGVvbm5hdHVzIHRvb2sgaGltIGludG8gaGlzIGNvbmZpZGVuY2UgYW5kIHJldmVhbGVkIHRvIGhpbSBhbGwgaGlzIHB1cnBvc2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Bc3Npc3RhbmNlIHRvIEFudGlwYXRlciwgbmFtZWx5LCB3YXMgd2hhdCBoZSBhbGxlZ2VkIGFzIGEgcHJldGV4dCBmb3IgaGlzIGV4cGVkaXRpb24sIGJ1dCBoZSByZWFsbHkgbWVhbnQsIGFzIHNvb24gYXMgaGUgaGFkIGNyb3NzZWQgaW50byBFdXJvcGUsIHRvIGxheSBjbGFpbSB0byBNYWNlZG9uaWE7IGFuZCBoZSBzaG93ZWQgY2VydGFpbiBsZXR0ZXJzIGZyb20gQ2xlb3BhdHJhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNpc3RlciBvZiBBbGV4YW5kZXIsIHdpZG93LCBzaW5jZSAzMjYgQi5DLiwgb2YgdGhlIGtpbmcgb2YgRXBlaXJ1cy4gTm8gbGVzcyB0aGFuIHNpeCBvZiBBbGV4YW5kZXIncyBnZW5lcmFscyBzb3VnaHQgaGVyIGhhbmQgaW4gbWFycmlhZ2UuPC9ub3RlPiBpbiB3aGljaCBzaGUgaW52aXRlZCBoaW0gdG8gY29tZSB0byBQZWxsYSBhbmQgcHJvbWlzZWQgdG8gbWFycnkgaGltLiBCdXQgRXVtZW5lcywgZWl0aGVyIGJlY2F1c2UgaGUgd2FzIGFmcmFpZCBvZiBBbnRpcGF0ZXIsIG9yIGJlY2F1c2UgaGUgZGVzcGFpcmVkIG9mIExlb25uYXR1cyBhcyBhIGNhcHJpY2lvdXMgbWFuIGZ1bGwgb2YgdW5jZXJ0YWluIGFuZCByYXNoIGltcHVsc2VzLCB0b29rIGhpcyBvd24gZXF1aXBtZW50IGFuZCBkZWNhbXBlZCBieSBuaWdodC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTmVwb3MgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJOZXAuIEV1bS4gMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkV1bWVuZXM8L3RpdGxlPiwgaWkuIDQ8L2JpYmw+KSwgTGVvbm5hdHVzLCBmYWlsaW5nIHRvIHBlcnN1YWRlIEV1bWVuZXMsIHRyaWVkIHRvIGtpbGwgaGltLjwvbm90ZT4gQW5kIGhlIGhhZCB0aHJlZSBodW5kcmVkIGhvcnNlbWVuLCB0d28gaHVuZHJlZCBhcm1lZCBjYW1wLWZvbGxvd2VycywgYW5kIGluIGdvbGQgd2hhdCB3b3VsZCBhbW91bnQgdG8gZml2ZSB0aG91c2FuZCB0YWxlbnRzIG9mIG1vbmV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHRoaXMgZXF1aXBtZW50IGhlIGZsZWQgdG8gUGVyZGljY2FzLCBhbmQgYnkgdGVsbGluZyBoaW0gb2YgdGhlIGRlc2lnbnMgb2YgTGVvbm5hdHVzIGF0IG9uY2UgZW5qb3llZCBncmVhdCBpbmZsdWVuY2Ugd2l0aCBoaW0gYW5kIHdhcyBtYWRlIGEgbWVtYmVyIG9mIGhpcyBjb3VuY2lsLiBNb3Jlb3ZlciwgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIgaGUgd2FzIGNvbmR1Y3RlZCBpbnRvIENhcHBhZG9jaWEgd2l0aCBhbiBhcm15IHdoaWNoIFBlcmRpY2NhcyBjb21tYW5kZWQgaW4gcGVyc29uLiBUaGVyZSBBcmlhcmF0aGVzIHdhcyB0YWtlbiBwcmlzb25lciwgdGhlIGNvdW50cnkgd2FzIGJyb3VnaHQgaW50byBzdWJqZWN0aW9uLCBhbmQgRXVtZW5lcyB3YXMgcHJvY2xhaW1lZCBzYXRyYXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIGVudHJ1c3RlZCB0aGUgY2l0aWVzIG9mIHRoZSBjb3VudHJ5IHRvIGhpcyBvd24gZnJpZW5kcywgYXBwb2ludGVkIGNvbW1hbmRlcnMgb2YgZ2Fycmlzb25zOyBsZWZ0IGJlaGluZCBoaW0gc3VjaCBqdWRnZXMgYW5kIGFkbWluaXN0cmF0b3JzIGFzIGhlIHdpc2hlZCwgUGVyZGljY2FzIG5vdCBhdCBhbGwgaW50ZXJmZXJpbmcgaW4gdGhlc2UgbWF0dGVycywgYW5kIHRoZW4gbWFyY2hlZCBhd2F5IHdpdGggUGVyZGljY2FzLCBkZXNpcmluZyB0byBwYXkgY291cnQgdG8gdGhhdCBnZW5lcmFsLCBhbmQgbm90IHdpc2hpbmcgdG8gYmUgc2VwYXJhdGVkIGZyb20gdGhlIGtpbmdzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFycmloaWRhZXVzIGFuZCB0aGUgaW5mYW50IHNvbiBvZiBBbGV4YW5kZXIsIGJvdGggdW5kZXIgdGhlIGd1YXJkaWFuc2hpcCBvZiBQZXJkaWNjYXMuIEV1bWVuZXMgdGh1cyByYW5nZWQgaGltc2VsZiB3aXRoIHRoZSBsZWdpdGltaXN0cy48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQW50aWdvbnVzIHBhaWQgbm8gaGVlZCB0byB0aGUgZWRpY3RzIG9mIFBlcmRpY2NhcywgYmVpbmcgYWxyZWFkeSBsaWZ0ZWQgdXAgaW4gaGlzIGFtYml0aW9ucyBhbmQgc2Nvcm5pbmcgYWxsIGhpcyBhc3NvY2lhdGVzOyBidXQgTGVvbm5hdHVzIGNhbWUgZG93biBmcm9tIHRoZSBpbnRlcmlvciBpbnRvIFBocnlnaWEgaW4gb3JkZXIgdG8gdW5kZXJ0YWtlIHRoZSBleHBlZGl0aW9uIGluIGJlaGFsZiBvZiBFdW1lbmVzLiBIZXJlLCBob3dldmVyLCBIZWNhdGFldXMgdGhlIHR5cmFudCBvZiBDYXJkaWEgam9pbmVkIGhpbSBhbmQgYmVzb3VnaHQgaGltIHRvIGdvIHJhdGhlciB0byB0aGUgYXNzaXN0YW5jZSBvZiBBbnRpcGF0ZXIgYW5kIHRoZSBNYWNlZG9uaWFucyBiZXNpZWdlZCBpbiBMYW1pYS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uIHRoZSBkZWF0aCBvZiBBbGV4YW5kZXIgdGhlIEdyZWVrcyBoYWQgcmV2b2x0ZWQgZnJvbSBNYWNlZG9uaWEsIGFuZCBoYWQgZHJpdmVuIEFudGlwYXRlciBhbmQgaGlzIGFybXkgaW50byBMYW1pYSwgYSBjaXR5IG9mIHNvdXRoZXJuIFRoZXNzYWx5Ljwvbm90ZT4gTGVvbm5hdHVzIHRoZXJlZm9yZSBkZXRlcm1pbmVkIHRvIGNyb3NzIG92ZXIgdG8gR3JlZWNlLCBpbnZpdGVkIEV1bWVuZXMgdG8gZ28gd2l0aCBoaW0sIGFuZCB0cmllZCB0byByZWNvbmNpbGUgaGltIHdpdGggSGVjYXRhZXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGhhZCBhIGhlcmVkaXRhcnkgZGlzdHJ1c3Qgb2Ygb25lIGFub3RoZXIgYXJpc2luZyBmcm9tIHBvbGl0aWNhbCBkaWZmZXJlbmNlczsgYW5kIGZyZXF1ZW50bHkgRXVtZW5lcyBoYWQgYmVlbiBrbm93biB0byBkZW5vdW5jZSBIZWNhdGFldXMgd2hlbiBhIHR5cmFudCBhbmQgdG8gZXhob3J0IEFsZXhhbmRlciB0byByZXN0b3JlIGl0cyBmcmVlZG9tIHRvIENhcmRpYS4gVGhlcmVmb3JlIGF0IHRoaXMgdGltZSBhbHNvIEV1bWVuZXMgZGVjbGluZWQgdG8gZ28gb24gdGhlIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgR3JlZWtzLCBzYXlpbmcgaGUgd2FzIGFmcmFpZCB0aGF0IEFudGlwYXRlciwgd2hvIGhhZCBsb25nIGhhdGVkIGhpbSwgd291bGQga2lsbCBoaW0gdG8gcGxlYXNlIEhlY2F0YWV1cy4gVGhlbiBMZW9ubmF0dXMgdG9vayBoaW0gaW50byBoaXMgY29uZmlkZW5jZSBhbmQgcmV2ZWFsZWQgdG8gaGltIGFsbCBoaXMgcHVycG9zZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzc2lzdGFuY2UgdG8gQW50aXBhdGVyLCBuYW1lbHksIHdhcyB3aGF0IGhlIGFsbGVnZWQgYXMgYSBwcmV0ZXh0IGZvciBoaXMgZXhwZWRpdGlvbiwgYnV0IGhlIHJlYWxseSBtZWFudCwgYXMgc29vbiBhcyBoZSBoYWQgY3Jvc3NlZCBpbnRvIEV1cm9wZSwgdG8gbGF5IGNsYWltIHRvIE1hY2Vkb25pYTsgYW5kIGhlIHNob3dlZCBjZXJ0YWluIGxldHRlcnMgZnJvbSBDbGVvcGF0cmE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzaXN0ZXIgb2YgQWxleGFuZGVyLCB3aWRvdywgc2luY2UgMzI2IEIuQy4sIG9mIHRoZSBraW5nIG9mIEVwZWlydXMuIE5vIGxlc3MgdGhhbiBzaXggb2YgQWxleGFuZGVyJ3MgZ2VuZXJhbHMgc291Z2h0IGhlciBoYW5kIGluIG1hcnJpYWdlLjwvbm90ZT4gaW4gd2hpY2ggc2hlIGludml0ZWQgaGltIHRvIGNvbWUgdG8gUGVsbGEgYW5kIHByb21pc2VkIHRvIG1hcnJ5IGhpbS4gQnV0IEV1bWVuZXMsIGVpdGhlciBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgb2YgQW50aXBhdGVyLCBvciBiZWNhdXNlIGhlIGRlc3BhaXJlZCBvZiBMZW9ubmF0dXMgYXMgYSBjYXByaWNpb3VzIG1hbiBmdWxsIG9mIHVuY2VydGFpbiBhbmQgcmFzaCBpbXB1bHNlcywgdG9vayBoaXMgb3duIGVxdWlwbWVudCBhbmQgZGVjYW1wZWQgYnkgbmlnaHQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gTmVwb3MgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ik5lcC4gRXVtLiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmVzPC90aXRsZT4sIGlpLiA0PC9iaWJsPiksIExlb25uYXR1cywgZmFpbGluZyB0byBwZXJzdWFkZSBFdW1lbmVzLCB0cmllZCB0byBraWxsIGhpbS48L25vdGU+IEFuZCBoZSBoYWQgdGhyZWUgaHVuZHJlZCBob3JzZW1lbiwgdHdvIGh1bmRyZWQgYXJtZWQgY2FtcC1mb2xsb3dlcnMsIGFuZCBpbiBnb2xkIHdoYXQgd291bGQgYW1vdW50IHRvIGZpdmUgdGhvdXNhbmQgdGFsZW50cyBvZiBtb25leS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJOZXAuIEV1bS4gMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpaS4gNDwvYmlibD4pLCBMZW9ubmF0dXMsIGZhaWxpbmcgdG8gcGVyc3VhZGUgRXVtZW5lcywgdHJpZWQgdG8ga2lsbCBoaW0uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpaS4gNDwvdHJhbnNsYXRpb24+"
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhpcyBlcXVpcG1lbnQgaGUgZmxlZCB0byBQZXJkaWNjYXMsIGFuZCBieSB0ZWxsaW5nIGhpbSBvZiB0aGUgZGVzaWducyBvZiBMZW9ubmF0dXMgYXQgb25jZSBlbmpveWVkIGdyZWF0IGluZmx1ZW5jZSB3aXRoIGhpbSBhbmQgd2FzIG1hZGUgYSBtZW1iZXIgb2YgaGlzIGNvdW5jaWwuIE1vcmVvdmVyLCBhIGxpdHRsZSB3aGlsZSBhZnRlciBoZSB3YXMgY29uZHVjdGVkIGludG8gQ2FwcGFkb2NpYSB3aXRoIGFuIGFybXkgd2hpY2ggUGVyZGljY2FzIGNvbW1hbmRlZCBpbiBwZXJzb24uIFRoZXJlIEFyaWFyYXRoZXMgd2FzIHRha2VuIHByaXNvbmVyLCB0aGUgY291bnRyeSB3YXMgYnJvdWdodCBpbnRvIHN1YmplY3Rpb24sIGFuZCBFdW1lbmVzIHdhcyBwcm9jbGFpbWVkIHNhdHJhcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIGVudHJ1c3RlZCB0aGUgY2l0aWVzIG9mIHRoZSBjb3VudHJ5IHRvIGhpcyBvd24gZnJpZW5kcywgYXBwb2ludGVkIGNvbW1hbmRlcnMgb2YgZ2Fycmlzb25zOyBsZWZ0IGJlaGluZCBoaW0gc3VjaCBqdWRnZXMgYW5kIGFkbWluaXN0cmF0b3JzIGFzIGhlIHdpc2hlZCwgUGVyZGljY2FzIG5vdCBhdCBhbGwgaW50ZXJmZXJpbmcgaW4gdGhlc2UgbWF0dGVycywgYW5kIHRoZW4gbWFyY2hlZCBhd2F5IHdpdGggUGVyZGljY2FzLCBkZXNpcmluZyB0byBwYXkgY291cnQgdG8gdGhhdCBnZW5lcmFsLCBhbmQgbm90IHdpc2hpbmcgdG8gYmUgc2VwYXJhdGVkIGZyb20gdGhlIGtpbmdzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXJyaWhpZGFldXMgYW5kIHRoZSBpbmZhbnQgc29uIG9mIEFsZXhhbmRlciwgYm90aCB1bmRlciB0aGUgZ3VhcmRpYW5zaGlwIG9mIFBlcmRpY2Nhcy4gRXVtZW5lcyB0aHVzIHJhbmdlZCBoaW1zZWxmIHdpdGggdGhlIGxlZ2l0aW1pc3RzLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBQZXJkaWNjYXMgZmVsdCBjb25maWRlbnQgb2YgY2Fycnlpbmcgb3V0IGhpcyBwcm9qZWN0cyBieSBoaW1zZWxmLCBhbmQgdGhvdWdodCB0aGF0IHRoZSBjb3VudHJ5IHRoZXkgaGFkIGxlZnQgYmVoaW5kIHRoZW0gbmVlZGVkIGFuIGVmZmljaWVudCBhbmQgZmFpdGhmdWwgZ3VhcmRpYW4sIGFuZCB0aGVyZWZvcmUgc2VudCBFdW1lbmVzIGJhY2sgZnJvbSBDaWxpY2lhLCBvc3RlbnNpYmx5IHRvIGhpcyBvd24gc2F0cmFweSwgYnV0IHJlYWxseSB0byByZWR1Y2UgdG8gb2JlZGllbmNlIHRoZSBhZGphY2VudCBjb3VudHJ5IG9mIEFybWVuaWEsIHdoaWNoIGhhZCBiZWVuIHRocm93biBpbnRvIGNvbmZ1c2lvbiBieSBOZW9wdG9sZW11cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmUgb2YgdGhlIHByaW5jaXBhbCBvZmZpY2VycyBvZiBBbGV4YW5kZXIsIHRvIHdob20gQXJtZW5pYSBoYWQgYmVlbiBhc3NpZ25lZCBhcyBhIHByb3ZpbmNlLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGkuIDM8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYWx0aG91Z2ggTmVvcHRvbGVtdXMgd2FzIGEgdmljdGltIG9mIG9zdGVudGF0aW9uIGFuZCBlbXB0eSBwcmlkZSwgRXVtZW5lcyB0cmllZCB0byBjb25zdHJhaW4gaGltIGJ5IHBlcnNvbmFsIGludGVyY291cnNlOyB0aGVuLCBmaW5kaW5nIHRoYXQgdGhlIE1hY2Vkb25pYW4gbWVuLWF0LWFybXMgd2VyZSBjb25jZWl0ZWQgYW5kIGJvbGQsIGhlIHJhaXNlZCBhIGZvcmNlIG9mIGNhdmFscnkgYXMgYSBjb3VudGVycG9pc2UgdG8gdGhlbSwgYnkgb2ZmZXJpbmcgdGhlIG5hdGl2ZXMgb2YgdGhlIGNvdW50cnkgd2hvIHdlcmUgYWJsZSB0byBzZXJ2ZSBhcyBob3JzZW1lbiBpbW11bml0eSBmcm9tIGNvbnRyaWJ1dGlvbnMgYW5kIHRyaWJ1dGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYnkgZGlzdHJpYnV0aW5nIGhvcnNlcyB0aGF0IGhlIGhhZCBib3VnaHQgYW1vbmcgdGhvc2Ugb2YgaGlzIGZvbGxvd2VycyBpbiB3aG9tIGhlIHBsYWNlZCBtb3N0IGNvbmZpZGVuY2U7IHRoZSBzcGlyaXRzIG9mIHRoZXNlIG1lbiwgdG9vLCBoZSBpbmNpdGVkIGJ5IGhvbm91cnMgYW5kIGdpZnRzLCBhbmQgZGV2ZWxvcGVkIHRoZWlyIGJvZGllcyBieSBleGVyY2lzZSBhbmQgZGlzY2lwbGluZTsgc28gdGhhdCBhIHBhcnQgb2YgdGhlIE1hY2Vkb25pYW5zIHdlcmUgYW1hemVkLCBhbmQgYSBwYXJ0IGVtYm9sZGVuZWQsIHdoZW4gdGhleSBzYXcgdGhhdCBpbiBhIHNob3J0IHRpbWUgaGUgaGFkIGFzc2VtYmxlZCBhYm91dCBoaW0gbm8gZmV3ZXIgdGhhbiBzaXh0eS10aHJlZSBodW5kcmVkIGhvcnNlbWVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBQZXJkaWNjYXMgZmVsdCBjb25maWRlbnQgb2YgY2Fycnlpbmcgb3V0IGhpcyBwcm9qZWN0cyBieSBoaW1zZWxmLCBhbmQgdGhvdWdodCB0aGF0IHRoZSBjb3VudHJ5IHRoZXkgaGFkIGxlZnQgYmVoaW5kIHRoZW0gbmVlZGVkIGFuIGVmZmljaWVudCBhbmQgZmFpdGhmdWwgZ3VhcmRpYW4sIGFuZCB0aGVyZWZvcmUgc2VudCBFdW1lbmVzIGJhY2sgZnJvbSBDaWxpY2lhLCBvc3RlbnNpYmx5IHRvIGhpcyBvd24gc2F0cmFweSwgYnV0IHJlYWxseSB0byByZWR1Y2UgdG8gb2JlZGllbmNlIHRoZSBhZGphY2VudCBjb3VudHJ5IG9mIEFybWVuaWEsIHdoaWNoIGhhZCBiZWVuIHRocm93biBpbnRvIGNvbmZ1c2lvbiBieSBOZW9wdG9sZW11cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSBvZiB0aGUgcHJpbmNpcGFsIG9mZmljZXJzIG9mIEFsZXhhbmRlciwgdG8gd2hvbSBBcm1lbmlhIGhhZCBiZWVuIGFzc2lnbmVkIGFzIGEgcHJvdmluY2UuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDEuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpLiAzPC9iaWJsPi48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDEuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpLiAzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhbHRob3VnaCBOZW9wdG9sZW11cyB3YXMgYSB2aWN0aW0gb2Ygb3N0ZW50YXRpb24gYW5kIGVtcHR5IHByaWRlLCBFdW1lbmVzIHRyaWVkIHRvIGNvbnN0cmFpbiBoaW0gYnkgcGVyc29uYWwgaW50ZXJjb3Vyc2U7IHRoZW4sIGZpbmRpbmcgdGhhdCB0aGUgTWFjZWRvbmlhbiBtZW4tYXQtYXJtcyB3ZXJlIGNvbmNlaXRlZCBhbmQgYm9sZCwgaGUgcmFpc2VkIGEgZm9yY2Ugb2YgY2F2YWxyeSBhcyBhIGNvdW50ZXJwb2lzZSB0byB0aGVtLCBieSBvZmZlcmluZyB0aGUgbmF0aXZlcyBvZiB0aGUgY291bnRyeSB3aG8gd2VyZSBhYmxlIHRvIHNlcnZlIGFzIGhvcnNlbWVuIGltbXVuaXR5IGZyb20gY29udHJpYnV0aW9ucyBhbmQgdHJpYnV0ZXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBieSBkaXN0cmlidXRpbmcgaG9yc2VzIHRoYXQgaGUgaGFkIGJvdWdodCBhbW9uZyB0aG9zZSBvZiBoaXMgZm9sbG93ZXJzIGluIHdob20gaGUgcGxhY2VkIG1vc3QgY29uZmlkZW5jZTsgdGhlIHNwaXJpdHMgb2YgdGhlc2UgbWVuLCB0b28sIGhlIGluY2l0ZWQgYnkgaG9ub3VycyBhbmQgZ2lmdHMsIGFuZCBkZXZlbG9wZWQgdGhlaXIgYm9kaWVzIGJ5IGV4ZXJjaXNlIGFuZCBkaXNjaXBsaW5lOyBzbyB0aGF0IGEgcGFydCBvZiB0aGUgTWFjZWRvbmlhbnMgd2VyZSBhbWF6ZWQsIGFuZCBhIHBhcnQgZW1ib2xkZW5lZCwgd2hlbiB0aGV5IHNhdyB0aGF0IGluIGEgc2hvcnQgdGltZSBoZSBoYWQgYXNzZW1ibGVkIGFib3V0IGhpbSBubyBmZXdlciB0aGFuIHNpeHR5LXRocmVlIGh1bmRyZWQgaG9yc2VtZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQ3JhdGVydXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmUgb2YgdGhlIGFibGVzdCBvZiBBbGV4YW5kZXIncyBvZmZpY2Vycywgd2hvLCBpbiB0aGUgZGl2aXNpb24gb2YgdGhlIGVtcGlyZSB0aGF0IGZvbGxvd2VkIEFsZXhhbmRlcidzIGRlYXRoLCB3YXMgbWFkZSBydWxlciwgaW4gY29tbW9uIHdpdGggQW50aXBhdGVyLCBvZiBNYWNlZG9uaWEgYW5kIEdyZWVjZS48L25vdGU+IGFuZCBBbnRpcGF0ZXIsIGFmdGVyIG92ZXJwb3dlcmluZyB0aGUgR3JlZWtzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBiYXR0bGUgb2YgQ3Jhbm5vbiwgQXVnLiA3LCAzMjIsIHdoaWNoIHB1dCBhbiBlbmQgdG8gdGhlIHJldm9sdCBvZiB0aGUgR3JlZWtzIGFuZCB0aGUgd2FyIGNhbGxlZCB0aGUgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGFtaWFuPC9xPiB3YXIuPC9ub3RlPiB3ZXJlIGNyb3NzaW5nIGludG8gQXNpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyMSBCLkMuPC9ub3RlPiB0byBvdmVydGhyb3cgdGhlIHBvd2VyIG9mIFBlcmRpY2NhcywgYW5kIHdlcmUgcmVwb3J0ZWQgdG8gYmUgcGxhbm5pbmcgYW4gaW52YXNpb24gb2YgQ2FwcGFkb2NpYSwgUGVyZGljY2FzLCB3aG8gd2FzIGhpbXNlbGYgaGVhZGluZyBhbiBleHBlZGl0aW9uIGFnYWluc3QgUHRvbGVteSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Ob3cgZ292ZXJub3Igb2YgRWd5cHQuPC9ub3RlPiBhcHBvaW50ZWQgRXVtZW5lcyBjb21tYW5kZXIgb2YgdGhlIGZvcmNlcyBpbiBBcm1lbmlhIGFuZCBDYXBwYWRvY2lhIHdpdGggcGxlbmFyeSBwb3dlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VudCBsZXR0ZXJzIG9uIHRoZSBzdWJqZWN0LCBpbiB3aGljaCBoZSBjb21tYW5kZWQgQWxjZXRhczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgYnJvdGhlciBvZiBQZXJkaWNjYXMuPC9ub3RlPiBhbmQgTmVvcHRvbGVtdXMgdG8gbG9vayB0byBFdW1lbmVzIGZvciBvcmRlcnMsIGFuZCBFdW1lbmVzIHRvIG1hbmFnZSBtYXR0ZXJzIGFzIGhlIHRob3VnaHQgYmVzdC4gQWxjZXRhcywgdGhlbiwgZmxhdGx5IHJlZnVzZWQgdG8gc2VydmUgaW4gdGhlIGNhbXBhaWduLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIE1hY2Vkb25pYW5zIHVuZGVyIGhpbSB3ZXJlIGFzaGFtZWQgdG8gZmlnaHQgQW50aXBhdGVyLCBhbmQgd2VyZSBzbyB3ZWxsIGRpc3Bvc2VkIHRvIENyYXRlcnVzIHRoYXQgdGhleSB3ZXJlIHJlYWR5IHRvIHJlY2VpdmUgaGltIHdpdGggb3BlbiBhcm1zLiBOZW9wdG9sZW11cywgaG93ZXZlciwgcGxvdHRpbmcgdHJlYWNoZXJ5IGFnYWluc3QgRXVtZW5lcywgd2FzIGRldGVjdGVkLCBhbmQgd2hlbiBoZSB3YXMgc3VtbW9uZWQgd291bGQgbm90IG9iZXksIGJ1dCBkcmV3IHVwIGhpcyBmb3JjZXMgaW4gYmF0dGxlIGFycmF5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGZpcnN0IGRpZCBFdW1lbmVzIHJlYXAgdGhlIGZydWl0IG9mIGhpcyBmb3JldGhvdWdodCBhbmQgcHJlcGFyYXRpb247IGZvciB3aGVuIGhpcyBpbmZhbnRyeSBoYWQgYWxyZWFkeSBiZWVuIGRlZmVhdGVkLCBoZSByb3V0ZWQgTmVvcHRvbGVtdXMgd2l0aCBoaXMgY2F2YWxyeSwgYW5kIGNhcHR1cmVkIGhpcyBiYWdnYWdlLCBhbmQgd2hlbiB0aGUgbWVuLWF0LWFybXMgb2YgTmVvcHRvbGVtdXMgd2VyZSBzY2F0dGVyZWQgaW4gcHVyc3VpdCBvZiB0aGVpciBlbmVtaWVzLCBjaGFyZ2VkIHVwb24gdGhlbSB3aXRoIGhpcyBlbnRpcmUgYm9keSBvZiBob3JzZSBhbmQgY29tcGVsbGVkIHRoZW0gdG8gbGF5IGRvd24gdGhlaXIgYXJtcyBhbmQgbWFrZSBvYXRoIHdpdGggaGltIHRvIHNlcnZlIHVuZGVyIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBDcmF0ZXJ1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25lIG9mIHRoZSBhYmxlc3Qgb2YgQWxleGFuZGVyJ3Mgb2ZmaWNlcnMsIHdobywgaW4gdGhlIGRpdmlzaW9uIG9mIHRoZSBlbXBpcmUgdGhhdCBmb2xsb3dlZCBBbGV4YW5kZXIncyBkZWF0aCwgd2FzIG1hZGUgcnVsZXIsIGluIGNvbW1vbiB3aXRoIEFudGlwYXRlciwgb2YgTWFjZWRvbmlhIGFuZCBHcmVlY2UuPC9ub3RlPiBhbmQgQW50aXBhdGVyLCBhZnRlciBvdmVycG93ZXJpbmcgdGhlIEdyZWVrcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBiYXR0bGUgb2YgQ3Jhbm5vbiwgQXVnLiA3LCAzMjIsIHdoaWNoIHB1dCBhbiBlbmQgdG8gdGhlIHJldm9sdCBvZiB0aGUgR3JlZWtzIGFuZCB0aGUgd2FyIGNhbGxlZCB0aGUgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MYW1pYW48L3E+IHdhci48L25vdGU+IHdlcmUgY3Jvc3NpbmcgaW50byBBc2lhPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MYW1pYW48L3E+IHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyMSBCLkMuPC9ub3RlPiB0byBvdmVydGhyb3cgdGhlIHBvd2VyIG9mIFBlcmRpY2NhcywgYW5kIHdlcmUgcmVwb3J0ZWQgdG8gYmUgcGxhbm5pbmcgYW4gaW52YXNpb24gb2YgQ2FwcGFkb2NpYSwgUGVyZGljY2FzLCB3aG8gd2FzIGhpbXNlbGYgaGVhZGluZyBhbiBleHBlZGl0aW9uIGFnYWluc3QgUHRvbGVteSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vdyBnb3Zlcm5vciBvZiBFZ3lwdC48L25vdGU+IGFwcG9pbnRlZCBFdW1lbmVzIGNvbW1hbmRlciBvZiB0aGUgZm9yY2VzIGluIEFybWVuaWEgYW5kIENhcHBhZG9jaWEgd2l0aCBwbGVuYXJ5IHBvd2Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VudCBsZXR0ZXJzIG9uIHRoZSBzdWJqZWN0LCBpbiB3aGljaCBoZSBjb21tYW5kZWQgQWxjZXRhczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBicm90aGVyIG9mIFBlcmRpY2Nhcy48L25vdGU+IGFuZCBOZW9wdG9sZW11cyB0byBsb29rIHRvIEV1bWVuZXMgZm9yIG9yZGVycywgYW5kIEV1bWVuZXMgdG8gbWFuYWdlIG1hdHRlcnMgYXMgaGUgdGhvdWdodCBiZXN0LiBBbGNldGFzLCB0aGVuLCBmbGF0bHkgcmVmdXNlZCB0byBzZXJ2ZSBpbiB0aGUgY2FtcGFpZ24sIG9uIHRoZSBncm91bmQgdGhhdCB0aGUgTWFjZWRvbmlhbnMgdW5kZXIgaGltIHdlcmUgYXNoYW1lZCB0byBmaWdodCBBbnRpcGF0ZXIsIGFuZCB3ZXJlIHNvIHdlbGwgZGlzcG9zZWQgdG8gQ3JhdGVydXMgdGhhdCB0aGV5IHdlcmUgcmVhZHkgdG8gcmVjZWl2ZSBoaW0gd2l0aCBvcGVuIGFybXMuIE5lb3B0b2xlbXVzLCBob3dldmVyLCBwbG90dGluZyB0cmVhY2hlcnkgYWdhaW5zdCBFdW1lbmVzLCB3YXMgZGV0ZWN0ZWQsIGFuZCB3aGVuIGhlIHdhcyBzdW1tb25lZCB3b3VsZCBub3Qgb2JleSwgYnV0IGRyZXcgdXAgaGlzIGZvcmNlcyBpbiBiYXR0bGUgYXJyYXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgZmlyc3QgZGlkIEV1bWVuZXMgcmVhcCB0aGUgZnJ1aXQgb2YgaGlzIGZvcmV0aG91Z2h0IGFuZCBwcmVwYXJhdGlvbjsgZm9yIHdoZW4gaGlzIGluZmFudHJ5IGhhZCBhbHJlYWR5IGJlZW4gZGVmZWF0ZWQsIGhlIHJvdXRlZCBOZW9wdG9sZW11cyB3aXRoIGhpcyBjYXZhbHJ5LCBhbmQgY2FwdHVyZWQgaGlzIGJhZ2dhZ2UsIGFuZCB3aGVuIHRoZSBtZW4tYXQtYXJtcyBvZiBOZW9wdG9sZW11cyB3ZXJlIHNjYXR0ZXJlZCBpbiBwdXJzdWl0IG9mIHRoZWlyIGVuZW1pZXMsIGNoYXJnZWQgdXBvbiB0aGVtIHdpdGggaGlzIGVudGlyZSBib2R5IG9mIGhvcnNlIGFuZCBjb21wZWxsZWQgdGhlbSB0byBsYXkgZG93biB0aGVpciBhcm1zIGFuZCBtYWtlIG9hdGggd2l0aCBoaW0gdG8gc2VydmUgdW5kZXIgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5OZW9wdG9sZW11cywgdGhlbiwgY29sbGVjdGVkIGEgZmV3IG9mIGhpcyBtZW4gZnJvbSB0aGUgcm91dCBhbmQgZmxlZCB0byBDcmF0ZXJ1cyBhbmQgQW50aXBhdGVyLiBCdXQgdGhleSBoYWQgYWxyZWFkeSBzZW50IGFuIGVtYmFzc3kgdG8gRXVtZW5lcyBpbnZpdGluZyBoaW0gdG8gY29tZSBvdmVyIHRvIHRoZWlyIHNpZGU7IGhlIHdvdWxkIGVuam95IHBvc3Nlc3Npb24gb2YgaGlzIHByZXNlbnQgc2F0cmFwaWVzLCB3b3VsZCByZWNlaXZlIGFkZGl0aW9uYWwgdHJvb3BzIGFuZCB0ZXJyaXRvcnkgZnJvbSB0aGVtLCB3b3VsZCBiZWNvbWUgYSBmcmllbmQgdG8gQW50aXBhdGVyIGluc3RlYWQgb2YgYW4gZW5lbXk7IGFuZCB3b3VsZCBub3QgYmVjb21lIGFuIGVuZW15IHRvIENyYXRlcnVzIGluc3RlYWQgb2YgYSBmcmllbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhpcyBwcm9wb3NpdGlvbiBFdW1lbmVzIHJlcGxpZWQgdGhhdCBoZSBoYWQgYmVlbiBBbnRpcGF0ZXIncyBlbmVteSBmcm9tIG9mIG9sZCBhbmQgY291bGQgbm90IG5vdyBiZWNvbWUgaGlzIGZyaWVuZCwgd2hlbiBoZSBzYXcgaGltIHRyZWF0aW5nIGhpcyBmcmllbmRzIGFzIGVuZW1pZXMsIGJ1dCB0aGF0IGhlIHdhcyByZWFkeSB0byByZWNvbmNpbGUgQ3JhdGVydXMgd2l0aCBQZXJkaWNjYXMgYW5kIGJyaW5nIHRoZSB0d28gdG9nZXRoZXIgb24ganVzdCBhbmQgZXF1YWwgdGVybXM7IGlmLCBob3dldmVyLCBlaXRoZXIgdW5kZXJ0b29rIHRvIG92ZXJyZWFjaCB0aGUgb3RoZXIgaGUgd291bGQgZ2l2ZSBhaWQgdG8gdGhlIGluanVyZWQgcGFydHkgYXMgbG9uZyBhcyBoZSBoYWQgYnJlYXRoLCBhbmQgd291bGQgcmF0aGVyIGxvc2UgaGlzIGxpZmUgdGhhbiBoaXMgaG9ub3VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5lb3B0b2xlbXVzLCB0aGVuLCBjb2xsZWN0ZWQgYSBmZXcgb2YgaGlzIG1lbiBmcm9tIHRoZSByb3V0IGFuZCBmbGVkIHRvIENyYXRlcnVzIGFuZCBBbnRpcGF0ZXIuIEJ1dCB0aGV5IGhhZCBhbHJlYWR5IHNlbnQgYW4gZW1iYXNzeSB0byBFdW1lbmVzIGludml0aW5nIGhpbSB0byBjb21lIG92ZXIgdG8gdGhlaXIgc2lkZTsgaGUgd291bGQgZW5qb3kgcG9zc2Vzc2lvbiBvZiBoaXMgcHJlc2VudCBzYXRyYXBpZXMsIHdvdWxkIHJlY2VpdmUgYWRkaXRpb25hbCB0cm9vcHMgYW5kIHRlcnJpdG9yeSBmcm9tIHRoZW0sIHdvdWxkIGJlY29tZSBhIGZyaWVuZCB0byBBbnRpcGF0ZXIgaW5zdGVhZCBvZiBhbiBlbmVteTsgYW5kIHdvdWxkIG5vdCBiZWNvbWUgYW4gZW5lbXkgdG8gQ3JhdGVydXMgaW5zdGVhZCBvZiBhIGZyaWVuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIGhlYXJpbmcgdGhpcyBwcm9wb3NpdGlvbiBFdW1lbmVzIHJlcGxpZWQgdGhhdCBoZSBoYWQgYmVlbiBBbnRpcGF0ZXIncyBlbmVteSBmcm9tIG9mIG9sZCBhbmQgY291bGQgbm90IG5vdyBiZWNvbWUgaGlzIGZyaWVuZCwgd2hlbiBoZSBzYXcgaGltIHRyZWF0aW5nIGhpcyBmcmllbmRzIGFzIGVuZW1pZXMsIGJ1dCB0aGF0IGhlIHdhcyByZWFkeSB0byByZWNvbmNpbGUgQ3JhdGVydXMgd2l0aCBQZXJkaWNjYXMgYW5kIGJyaW5nIHRoZSB0d28gdG9nZXRoZXIgb24ganVzdCBhbmQgZXF1YWwgdGVybXM7IGlmLCBob3dldmVyLCBlaXRoZXIgdW5kZXJ0b29rIHRvIG92ZXJyZWFjaCB0aGUgb3RoZXIgaGUgd291bGQgZ2l2ZSBhaWQgdG8gdGhlIGluanVyZWQgcGFydHkgYXMgbG9uZyBhcyBoZSBoYWQgYnJlYXRoLCBhbmQgd291bGQgcmF0aGVyIGxvc2UgaGlzIGxpZmUgdGhhbiBoaXMgaG9ub3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNyYXRlcnVzIGFuZCBBbnRpcGF0ZXIsIHRoZW4sIGFmdGVyIGdldHRpbmcgdGhpcyBhbnN3ZXIsIHdlcmUgdGFraW5nIGRlbGliZXJhdGUgY291bnNlbCBhYm91dCB0aGUgd2hvbGUgc2l0dWF0aW9uLCB3aGVuIE5lb3B0b2xlbXVzIGNhbWUgdG8gdGhlbSBhZnRlciBoaXMgZmxpZ2h0LCB0b2xkIHRoZW0gYWJvdXQgdGhlIGJhdHRsZSBoZSBoYWQgbG9zdCwgYW5kIHVyZ2VkIHRoZW0gdG8gY29tZSB0byBoaXMgYWlkLCBib3RoIG9mIHRoZW0gaWYgcG9zc2libGUsIGJ1dCBhdCBhbnkgcmF0ZSBDcmF0ZXJ1czsgZm9yIHRoZSBNYWNlZG9uaWFucyBsb25nZWQgZm9yIGhpbSBleGNlZWRpbmdseSwgYW5kIGlmIHRoZXkgc2hvdWxkIG9ubHkgc2VlIGhpcyBjYXAgYW5kIGhlYXIgaGlzIHZvaWNlLCB0aGV5IHdvdWxkIGNvbWUgdG8gaGltIHdpdGggYSBydXNoLCBhcm1zIGFuZCBhbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIG5hbWUgb2YgQ3JhdGVydXMgd2FzIHJlYWxseSBncmVhdCBhbW9uZyB0aGVtLCBhbmQgYWZ0ZXIgdGhlIGRlYXRoIG9mIEFsZXhhbmRlciBtb3N0IG9mIHRoZW0gaGFkIGxvbmdlZCBmb3IgaGltIGFzIHRoZWlyIGNvbW1hbmRlci4gVGhleSByZW1lbWJlcmVkIHRoYXQgaGUgaGFkIG1hbnkgdGltZXMgaW5jdXJyZWQgdGhlIHN0cm9uZyBkaXNwbGVhc3VyZSBvZiBBbGV4YW5kZXIgaGltc2VsZiBpbiB0aGVpciBiZWhhbGYsIGJ5IG9wcG9zaW5nIGhpcyBncmFkdWFsbHkgaW5jcmVhc2luZyBkZXNpcmUgdG8gYWRvcHQgUGVyc2lhbiBjdXN0b21zLCBhbmQgYnkgZGVmZW5kaW5nIHRoZSBtYW5uZXJzIG9mIHRoZWlyIGNvdW50cnksIHdoaWNoLCB0aGFua3MgdG8gdGhlIHNwcmVhZCBvZiBsdXh1cnkgYW5kIHBvbXAsIHdlcmUgYWxyZWFkeSBiZWluZyB0cmVhdGVkIHdpdGggY29udGVtcHQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DcmF0ZXJ1cyBhbmQgQW50aXBhdGVyLCB0aGVuLCBhZnRlciBnZXR0aW5nIHRoaXMgYW5zd2VyLCB3ZXJlIHRha2luZyBkZWxpYmVyYXRlIGNvdW5zZWwgYWJvdXQgdGhlIHdob2xlIHNpdHVhdGlvbiwgd2hlbiBOZW9wdG9sZW11cyBjYW1lIHRvIHRoZW0gYWZ0ZXIgaGlzIGZsaWdodCwgdG9sZCB0aGVtIGFib3V0IHRoZSBiYXR0bGUgaGUgaGFkIGxvc3QsIGFuZCB1cmdlZCB0aGVtIHRvIGNvbWUgdG8gaGlzIGFpZCwgYm90aCBvZiB0aGVtIGlmIHBvc3NpYmxlLCBidXQgYXQgYW55IHJhdGUgQ3JhdGVydXM7IGZvciB0aGUgTWFjZWRvbmlhbnMgbG9uZ2VkIGZvciBoaW0gZXhjZWVkaW5nbHksIGFuZCBpZiB0aGV5IHNob3VsZCBvbmx5IHNlZSBoaXMgY2FwIGFuZCBoZWFyIGhpcyB2b2ljZSwgdGhleSB3b3VsZCBjb21lIHRvIGhpbSB3aXRoIGEgcnVzaCwgYXJtcyBhbmQgYWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhlIG5hbWUgb2YgQ3JhdGVydXMgd2FzIHJlYWxseSBncmVhdCBhbW9uZyB0aGVtLCBhbmQgYWZ0ZXIgdGhlIGRlYXRoIG9mIEFsZXhhbmRlciBtb3N0IG9mIHRoZW0gaGFkIGxvbmdlZCBmb3IgaGltIGFzIHRoZWlyIGNvbW1hbmRlci4gVGhleSByZW1lbWJlcmVkIHRoYXQgaGUgaGFkIG1hbnkgdGltZXMgaW5jdXJyZWQgdGhlIHN0cm9uZyBkaXNwbGVhc3VyZSBvZiBBbGV4YW5kZXIgaGltc2VsZiBpbiB0aGVpciBiZWhhbGYsIGJ5IG9wcG9zaW5nIGhpcyBncmFkdWFsbHkgaW5jcmVhc2luZyBkZXNpcmUgdG8gYWRvcHQgUGVyc2lhbiBjdXN0b21zLCBhbmQgYnkgZGVmZW5kaW5nIHRoZSBtYW5uZXJzIG9mIHRoZWlyIGNvdW50cnksIHdoaWNoLCB0aGFua3MgdG8gdGhlIHNwcmVhZCBvZiBsdXh1cnkgYW5kIHBvbXAsIHdlcmUgYWxyZWFkeSBiZWluZyB0cmVhdGVkIHdpdGggY29udGVtcHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIHRoZW4sIENyYXRlcnVzIHNlbnQgQW50aXBhdGVyIGludG8gQ2lsaWNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbnRpcGF0ZXIsIENyYXRlcnVzLCBhbmQgUHRvbGVteSBoYWQgZGVjbGFyZWQgd2FyIGFnYWluc3QgUGVyZGljY2FzLiBUaGUgZGVzdHJ1Y3Rpb24gb2YgUGVyZGljY2FzJyBhbGx5LCBFdW1lbmVzLCB3YXMgYSBzaWRlIGlzc3VlLiBQZXJkaWNjYXMsIHRha2luZyB3aXRoIGhpbSBBcnJoaWRhZXVzIGFuZCBSb3hhbmEgYW5kIGhlciBpbmZhbnQgc29uLCBoYWQgYWxyZWFkeSBpbnZhZGVkIEVneXB0IGluIGFuIGF0dGVtcHQgdG8gZGVzdHJveSBQdG9sZW15LiBBbnRpcGF0ZXIgd2FzIGhhc3RlbmluZyB0byB0aGUgYWlkIG9mIFB0b2xlbXkuPC9ub3RlPiB3aGlsZSBoZSBoaW1zZWxmIHdpdGggYSBsYXJnZSBwYXJ0IG9mIHRoZSBmb3JjZXMgYWR2YW5jZWQgd2l0aCBOZW9wdG9sZW11cyBhZ2FpbnN0IEV1bWVuZXMuIEhlIHRob3VnaHQgdGhhdCBoZSBzaG91bGQgZmFsbCB1cG9uIGhpbSB3aGVuIGhlIHdhcyBvZmYgaGlzIGd1YXJkLCBhbmQgd2hlbiwgYWZ0ZXIgdGhlaXIgcmVjZW50IHZpY3RvcnksIGhpcyBzb2xkaWVycyB3ZXJlIGluIHJldmVscnkgYW5kIGRpc29yZGVyLiBOb3csIHRoYXQgRXVtZW5lcyBzaG91bGQgbGVhcm4gYmVmb3JlaGFuZCBvZiBoaXMgYXBwcm9hY2ggYW5kIGdldCBoaW1zZWxmIHJlYWR5IGZvciBpdCBpbiBhZHZhbmNlLCBvbmUgbWlnaHQgY29uc2lkZXIgYSBtYXJrIG9mIHNvYmVyIGdlbmVyYWxzaGlwLCB0aG91Z2ggbm90IG9mIHN1cGVybGF0aXZlIGFiaWxpdHk7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGF0IGhlIHNob3VsZCBrZWVwIGhpcyBlbmVtaWVzIGZyb20gZ2V0dGluZyBhbnkga25vd2xlZGdlIHRoYXQgd291bGQgd29yayBoaW0gaGFybSwgYW5kLCBiZXNpZGVzIHRoaXMsIHRoYXQgaGUgc2hvdWxkIGh1cmwgaGlzIHNvbGRpZXJzIHVwb24gQ3JhdGVydXMgYmVmb3JlIHRoZXkga25ldyB3aXRoIHdob20gdGhleSB3ZXJlIGZpZ2h0aW5nLCBhbmQgY29uY2VhbCBmcm9tIHRoZW0gdGhlIG5hbWUgb2YgdGhlIG9wcG9zaW5nIGdlbmVyYWwsIHNlZW1zIHRvIG1lIHRvIGhhdmUgYmVlbiBhbiBleHBsb2l0IHBlY3VsaWFyIHRvIHRoaXMgY29tbWFuZGVyLiBIZSBnYXZlIG91dCB3b3JkLCB0aGVuLCB0aGF0IE5lb3B0b2xlbXVzIHdhcyBvbmNlIG1vcmUgY29taW5nIGFnYWluc3QgaGltLCB3aXRoIFBpZ3JlcywgYW5kIHRoYXQgdGhleSBoYWQgYSBmb3JjZSBvZiBQYXBobGFnb25pYW4gYW5kIENhcHBhZG9jaWFuIGNhdmFscnkuIE9uZSBuaWdodCBoZSB3YXMgcGxhbm5pbmcgdG8gZGVjYW1wIGFuZCB0aGVuIGZlbGwgYXNsZWVwIGFuZCBoYWQgYSBzdHJhbmdlIHZpc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZHJlYW1lZCwgbmFtZWx5LCB0aGF0IGhlIHNhdyB0d28gQWxleGFuZGVycyByZWFkeSB0byBnaXZlIGVhY2ggb3RoZXIgYmF0dGxlLCBlYWNoIGF0IHRoZSBoZWFkIG9mIGEgcGhhbGFueDsgdGhlbiBBdGhlbmEgY2FtZSB0byBoZWxwIHRoZSBvbmUsIGFuZCBEZW1ldGVyIHRoZSBvdGhlciwgYW5kIGFmdGVyIGEgZmllcmNlIHN0cnVnZ2xlIHRoZSBvbmUgd2hvIGhhZCBBdGhlbmEgZm9yIGEgaGVscGVyIHdhcyBiZWF0ZW4sIGFuZCBEZW1ldGVyLCBjdWxsaW5nIGVhcnMgb2YgZ3JhaW4sIHdvdmUgdGhlbSBpbnRvIGEgd3JlYXRoIGZvciB0aGUgdmljdG9yLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIHRoZW4sIENyYXRlcnVzIHNlbnQgQW50aXBhdGVyIGludG8gQ2lsaWNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlwYXRlciwgQ3JhdGVydXMsIGFuZCBQdG9sZW15IGhhZCBkZWNsYXJlZCB3YXIgYWdhaW5zdCBQZXJkaWNjYXMuIFRoZSBkZXN0cnVjdGlvbiBvZiBQZXJkaWNjYXMnIGFsbHksIEV1bWVuZXMsIHdhcyBhIHNpZGUgaXNzdWUuIFBlcmRpY2NhcywgdGFraW5nIHdpdGggaGltIEFycmhpZGFldXMgYW5kIFJveGFuYSBhbmQgaGVyIGluZmFudCBzb24sIGhhZCBhbHJlYWR5IGludmFkZWQgRWd5cHQgaW4gYW4gYXR0ZW1wdCB0byBkZXN0cm95IFB0b2xlbXkuIEFudGlwYXRlciB3YXMgaGFzdGVuaW5nIHRvIHRoZSBhaWQgb2YgUHRvbGVteS48L25vdGU+IHdoaWxlIGhlIGhpbXNlbGYgd2l0aCBhIGxhcmdlIHBhcnQgb2YgdGhlIGZvcmNlcyBhZHZhbmNlZCB3aXRoIE5lb3B0b2xlbXVzIGFnYWluc3QgRXVtZW5lcy4gSGUgdGhvdWdodCB0aGF0IGhlIHNob3VsZCBmYWxsIHVwb24gaGltIHdoZW4gaGUgd2FzIG9mZiBoaXMgZ3VhcmQsIGFuZCB3aGVuLCBhZnRlciB0aGVpciByZWNlbnQgdmljdG9yeSwgaGlzIHNvbGRpZXJzIHdlcmUgaW4gcmV2ZWxyeSBhbmQgZGlzb3JkZXIuIE5vdywgdGhhdCBFdW1lbmVzIHNob3VsZCBsZWFybiBiZWZvcmVoYW5kIG9mIGhpcyBhcHByb2FjaCBhbmQgZ2V0IGhpbXNlbGYgcmVhZHkgZm9yIGl0IGluIGFkdmFuY2UsIG9uZSBtaWdodCBjb25zaWRlciBhIG1hcmsgb2Ygc29iZXIgZ2VuZXJhbHNoaXAsIHRob3VnaCBub3Qgb2Ygc3VwZXJsYXRpdmUgYWJpbGl0eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGF0IGhlIHNob3VsZCBrZWVwIGhpcyBlbmVtaWVzIGZyb20gZ2V0dGluZyBhbnkga25vd2xlZGdlIHRoYXQgd291bGQgd29yayBoaW0gaGFybSwgYW5kLCBiZXNpZGVzIHRoaXMsIHRoYXQgaGUgc2hvdWxkIGh1cmwgaGlzIHNvbGRpZXJzIHVwb24gQ3JhdGVydXMgYmVmb3JlIHRoZXkga25ldyB3aXRoIHdob20gdGhleSB3ZXJlIGZpZ2h0aW5nLCBhbmQgY29uY2VhbCBmcm9tIHRoZW0gdGhlIG5hbWUgb2YgdGhlIG9wcG9zaW5nIGdlbmVyYWwsIHNlZW1zIHRvIG1lIHRvIGhhdmUgYmVlbiBhbiBleHBsb2l0IHBlY3VsaWFyIHRvIHRoaXMgY29tbWFuZGVyLiBIZSBnYXZlIG91dCB3b3JkLCB0aGVuLCB0aGF0IE5lb3B0b2xlbXVzIHdhcyBvbmNlIG1vcmUgY29taW5nIGFnYWluc3QgaGltLCB3aXRoIFBpZ3JlcywgYW5kIHRoYXQgdGhleSBoYWQgYSBmb3JjZSBvZiBQYXBobGFnb25pYW4gYW5kIENhcHBhZG9jaWFuIGNhdmFscnkuIE9uZSBuaWdodCBoZSB3YXMgcGxhbm5pbmcgdG8gZGVjYW1wIGFuZCB0aGVuIGZlbGwgYXNsZWVwIGFuZCBoYWQgYSBzdHJhbmdlIHZpc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIGRyZWFtZWQsIG5hbWVseSwgdGhhdCBoZSBzYXcgdHdvIEFsZXhhbmRlcnMgcmVhZHkgdG8gZ2l2ZSBlYWNoIG90aGVyIGJhdHRsZSwgZWFjaCBhdCB0aGUgaGVhZCBvZiBhIHBoYWxhbng7IHRoZW4gQXRoZW5hIGNhbWUgdG8gaGVscCB0aGUgb25lLCBhbmQgRGVtZXRlciB0aGUgb3RoZXIsIGFuZCBhZnRlciBhIGZpZXJjZSBzdHJ1Z2dsZSB0aGUgb25lIHdobyBoYWQgQXRoZW5hIGZvciBhIGhlbHBlciB3YXMgYmVhdGVuLCBhbmQgRGVtZXRlciwgY3VsbGluZyBlYXJzIG9mIGdyYWluLCB3b3ZlIHRoZW0gaW50byBhIHdyZWF0aCBmb3IgdGhlIHZpY3Rvci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgaGUgY29uamVjdHVyZWQgdGhhdCB0aGUgdmlzaW9uIHdhcyBpbiBoaXMgZmF2b3VyLCBzaW5jZSBoZSB3YXMgZmlnaHRpbmcgZm9yIGEgY291bnRyeSB0aGF0IHdhcyBtb3N0IGZlcnRpbGUgYW5kIGhhZCBhdCB0aGF0IHRpbWUgYW4gYWJ1bmRhbmNlIG9mIGZpbmUgeW91bmcgZ3JhaW4gaW4gdGhlIGVhcjsgZm9yIHRoZSBsYW5kIGhhZCBldmVyeXdoZXJlIGJlZW4gc293biBhbmQgYmVzcG9rZSBhIHRpbWUgb2YgcGVhY2UsIG5vdyB0aGF0IGl0cyBwbGFpbnMgd2VyZSBjb3ZlcmVkIHdpdGggYSBsdXh1cmlhbnQgZ3Jvd3RoOyBhbmQgaGUgd2FzIGFsbCB0aGUgbW9yZSBzdHJlbmd0aGVuZWQgaW4gaGlzIGJlbGllZiB3aGVuIGhlIGxlYXJuZWQgdGhhdCB0aGUgZW5lbXkncyB3YXRjaHdvcmQgd2FzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXRoZW5hIGFuZCBBbGV4YW5kZXIuPC9xPiBBY2NvcmRpbmdseSwgaGUgdG9vIGdhdmUgb3V0IGEgd2F0Y2h3b3JkLCBuYW1lbHksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVtZXRlciBhbmQgQWxleGFuZGVyLDwvcT4gYW5kIG9yZGVyZWQgYWxsIGhpcyBtZW4gdG8gY3Jvd24gdGhlbXNlbHZlcyBhbmQgd3JlYXRoZSB0aGVpciBhcm1zIHdpdGggZWFycyBvZiBncmFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3VnaCBoZSBvZnRlbiBmZWx0IGFuIGltcHVsc2UgdG8gc3BlYWsgb3V0IGFuZCB0ZWxsIGhpcyBwcmluY2lwYWwgb2ZmaWNlcnMgd2hvIGl0IHdhcyBhZ2FpbnN0IHdob20gdGhlaXIgc3RydWdnbGUgd2FzIHRvIGJlLCBhbmQgbm90IHRvIGtlZXAgaGlkZGVuIGF3YXkgaW4gaGlzIG93biBicmVhc3QgYWxvbmUgYSBzZWNyZXQgc28gaW1wb3J0YW50LCBuZXZlcnRoZWxlc3MgaGUgYWJvZGUgYnkgaGlzIGZpcnN0IHJlc29sdXRpb24gYW5kIG1hZGUgaGlzIGp1ZGdtZW50IHN1cmV0eSBmb3IgdGhlIHBlcmlsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIGhlIGNvbmplY3R1cmVkIHRoYXQgdGhlIHZpc2lvbiB3YXMgaW4gaGlzIGZhdm91ciwgc2luY2UgaGUgd2FzIGZpZ2h0aW5nIGZvciBhIGNvdW50cnkgdGhhdCB3YXMgbW9zdCBmZXJ0aWxlIGFuZCBoYWQgYXQgdGhhdCB0aW1lIGFuIGFidW5kYW5jZSBvZiBmaW5lIHlvdW5nIGdyYWluIGluIHRoZSBlYXI7IGZvciB0aGUgbGFuZCBoYWQgZXZlcnl3aGVyZSBiZWVuIHNvd24gYW5kIGJlc3Bva2UgYSB0aW1lIG9mIHBlYWNlLCBub3cgdGhhdCBpdHMgcGxhaW5zIHdlcmUgY292ZXJlZCB3aXRoIGEgbHV4dXJpYW50IGdyb3d0aDsgYW5kIGhlIHdhcyBhbGwgdGhlIG1vcmUgc3RyZW5ndGhlbmVkIGluIGhpcyBiZWxpZWYgd2hlbiBoZSBsZWFybmVkIHRoYXQgdGhlIGVuZW15J3Mgd2F0Y2h3b3JkIHdhcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXRoZW5hIGFuZCBBbGV4YW5kZXIuPC9xPiBBY2NvcmRpbmdseSwgaGUgdG9vIGdhdmUgb3V0IGEgd2F0Y2h3b3JkLCBuYW1lbHksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZW1ldGVyIGFuZCBBbGV4YW5kZXIsPC9xPiBhbmQgb3JkZXJlZCBhbGwgaGlzIG1lbiB0byBjcm93biB0aGVtc2VsdmVzIGFuZCB3cmVhdGhlIHRoZWlyIGFybXMgd2l0aCBlYXJzIG9mIGdyYWluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG91Z2ggaGUgb2Z0ZW4gZmVsdCBhbiBpbXB1bHNlIHRvIHNwZWFrIG91dCBhbmQgdGVsbCBoaXMgcHJpbmNpcGFsIG9mZmljZXJzIHdobyBpdCB3YXMgYWdhaW5zdCB3aG9tIHRoZWlyIHN0cnVnZ2xlIHdhcyB0byBiZSwgYW5kIG5vdCB0byBrZWVwIGhpZGRlbiBhd2F5IGluIGhpcyBvd24gYnJlYXN0IGFsb25lIGEgc2VjcmV0IHNvIGltcG9ydGFudCwgbmV2ZXJ0aGVsZXNzIGhlIGFib2RlIGJ5IGhpcyBmaXJzdCByZXNvbHV0aW9uIGFuZCBtYWRlIGhpcyBqdWRnbWVudCBzdXJldHkgZm9yIHRoZSBwZXJpbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBhcnJheWVkIGFnYWluc3QgQ3JhdGVydXMgbm90IGEgc2luZ2xlIE1hY2Vkb25pYW4sIGJ1dCB0d28gdHJvb3BzIG9mIGZvcmVpZ24gaG9yc2UgY29tbWFuZGVkIGJ5IFBoYXJuYWJhenVzIHRoZSBzb24gb2YgQXJ0YWJhenVzIGFuZCBQaG9lbml4IG9mIFRlbmVkb3MsIHdobyBoYWQgc3RyaWN0IG9yZGVycyB0byBjaGFyZ2UgYXQgZnVsbCBzcGVlZCB3aGVuIHRoZSBlbmVteSBjYW1lIGludG8gdmlldyBhbmQgZW5nYWdlIHRoZW0gYXQgY2xvc2UgcXVhcnRlcnMsIHdpdGhvdXQgZ2l2aW5nIHRoZW0gYSBjaGFuY2UgdG8gd2l0aGRyYXcgb3Igc2F5IGFueXRoaW5nLCBhbmQgd2l0aG91dCByZWNlaXZpbmcgYW55IGhlcmFsZCB0aGV5IG1pZ2h0IHNlbmQuIEZvciBoZSBoYWQgc3Ryb25nIGZlYXJzIHRoYXQgaGlzIE1hY2Vkb25pYW5zLCBpZiB0aGV5IHJlY29nbml6ZWQgQ3JhdGVydXMsIHdvdWxkIGdvIG92ZXIgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoaW1zZWxmLCB3aXRoIGEgZGl2aXNpb24gb2YgaGlzIGJlc3QgaG9yc2VtZW4sIHRocmVlIGh1bmRyZWQgaW4gbnVtYmVyLCByb2RlIGFsb25nIHRvIHRoZSByaWdodCB3aW5nLCB3aGVyZSBoZSBwdXJwb3NlZCB0byBhdHRhY2sgTmVvcHRvbGVtdXMuIFdoZW4gdGhlIGZvcmNlcyBvZiBFdW1lbmVzIGhhZCBjcm9zc2VkIHRoZSBpbnRlcnZlbmluZyBoaWxsIGFuZCB3ZXJlIHNlZW4gY29taW5nIG9uIHRvIHRoZSBhdHRhY2sgd2l0aCBhIHN3aWZ0IGFuZCBpbXBldHVvdXMgZGFzaCwgQ3JhdGVydXMgd2FzIGR1bWJmb3VuZGVkIGFuZCBoZWFwZWQgbXVjaCBhYnVzZSB1cG9uIE5lb3B0b2xlbXVzIGZvciBoYXZpbmcgZGVjZWl2ZWQgaGltIGFib3V0IHRoZSBNYWNlZG9uaWFucyBjaGFuZ2luZyBzaWRlczsgYnV0IGhlIGV4aG9ydGVkIGhpcyBvZmZpY2VycyB0byBhY3QgbGlrZSBicmF2ZSBtZW4sIGFuZCBjaGFyZ2VkIHVwb24gdGhlIGVuZW15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBhcnJheWVkIGFnYWluc3QgQ3JhdGVydXMgbm90IGEgc2luZ2xlIE1hY2Vkb25pYW4sIGJ1dCB0d28gdHJvb3BzIG9mIGZvcmVpZ24gaG9yc2UgY29tbWFuZGVkIGJ5IFBoYXJuYWJhenVzIHRoZSBzb24gb2YgQXJ0YWJhenVzIGFuZCBQaG9lbml4IG9mIFRlbmVkb3MsIHdobyBoYWQgc3RyaWN0IG9yZGVycyB0byBjaGFyZ2UgYXQgZnVsbCBzcGVlZCB3aGVuIHRoZSBlbmVteSBjYW1lIGludG8gdmlldyBhbmQgZW5nYWdlIHRoZW0gYXQgY2xvc2UgcXVhcnRlcnMsIHdpdGhvdXQgZ2l2aW5nIHRoZW0gYSBjaGFuY2UgdG8gd2l0aGRyYXcgb3Igc2F5IGFueXRoaW5nLCBhbmQgd2l0aG91dCByZWNlaXZpbmcgYW55IGhlcmFsZCB0aGV5IG1pZ2h0IHNlbmQuIEZvciBoZSBoYWQgc3Ryb25nIGZlYXJzIHRoYXQgaGlzIE1hY2Vkb25pYW5zLCBpZiB0aGV5IHJlY29nbml6ZWQgQ3JhdGVydXMsIHdvdWxkIGdvIG92ZXIgdG8gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIHdpdGggYSBkaXZpc2lvbiBvZiBoaXMgYmVzdCBob3JzZW1lbiwgdGhyZWUgaHVuZHJlZCBpbiBudW1iZXIsIHJvZGUgYWxvbmcgdG8gdGhlIHJpZ2h0IHdpbmcsIHdoZXJlIGhlIHB1cnBvc2VkIHRvIGF0dGFjayBOZW9wdG9sZW11cy4gV2hlbiB0aGUgZm9yY2VzIG9mIEV1bWVuZXMgaGFkIGNyb3NzZWQgdGhlIGludGVydmVuaW5nIGhpbGwgYW5kIHdlcmUgc2VlbiBjb21pbmcgb24gdG8gdGhlIGF0dGFjayB3aXRoIGEgc3dpZnQgYW5kIGltcGV0dW91cyBkYXNoLCBDcmF0ZXJ1cyB3YXMgZHVtYmZvdW5kZWQgYW5kIGhlYXBlZCBtdWNoIGFidXNlIHVwb24gTmVvcHRvbGVtdXMgZm9yIGhhdmluZyBkZWNlaXZlZCBoaW0gYWJvdXQgdGhlIE1hY2Vkb25pYW5zIGNoYW5naW5nIHNpZGVzOyBidXQgaGUgZXhob3J0ZWQgaGlzIG9mZmljZXJzIHRvIGFjdCBsaWtlIGJyYXZlIG1lbiwgYW5kIGNoYXJnZWQgdXBvbiB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBjb2xsaXNpb24gd2FzIHNldmVyZSwgdGhlIHNwZWFycyB3ZXJlIHF1aWNrbHkgc2hhdHRlcmVkLCBhbmQgdGhlIGZpZ2h0aW5nIHdhcyBkb25lIHdpdGggdGhlIHN3b3Jkcy4gSGVyZSBDcmF0ZXJ1cyBkaWQgbm90IGRpc2dyYWNlIEFsZXhhbmRlciwgYnV0IHNsZXcgbWFueSBmb2VzLCBhbmQgZnJlcXVlbnRseSByb3V0ZWQgdGhlIG9wcG9zaW5nIGFycmF5cy4gQXQgbGFzdCwgaG93ZXZlciwgaGUgd2FzIHdvdW5kZWQgYnkgYSBUaHJhY2lhbiB3aG8gYXR0YWNrZWQgaGltIGZyb20gdGhlIHNpZGUsIGFuZCBmZWxsIGZyb20gaGlzIGhvcnNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSBsYXkgcHJvc3RyYXRlIHRoZXJlIGFsbCBoaXMgZW5lbWllcyByb2RlIHBhc3QgaGltLCBub3Qga25vd2luZyB3aG8gaGUgd2FzLCBleGNlcHQgR29yZ2lhcywgb25lIG9mIHRoZSBvZmZpY2VycyBvZiBFdW1lbmVzOyBoZSByZWNvZ25pemVkIGhpbSwgZGlzbW91bnRlZCBmcm9tIGhpcyBob3JzZSwgYW5kIHN0b29kIGd1YXJkIG92ZXIgaGlzIGJvZHksIGZvciBoZSB3YXMgbm93IGluIGFuIGV2aWwgcGxpZ2h0IGFuZCBzdHJ1Z2dsaW5nIHdpdGggZGVhdGguIEluIHRoZSBtZWFudGltZSBOZW9wdG9sZW11cyBhbHNvIHdhcyBlbmdhZ2VkIHdpdGggRXVtZW5lcy4gVGhleSBoYWQgbG9uZyBoYXRlZCBvbmUgYW5vdGhlciB3aXRoIGEgZGVhZGx5IGhhdHJlZCwgYnV0IGluIHR3byBvbnNldHMgbmVpdGhlciBoYWQgY2F1Z2h0IHNpZ2h0IG9mIHRoZSBvdGhlcjsgaW4gdGhlIHRoaXJkLCBob3dldmVyLCB0aGV5IHJlY29nbml6ZWQgZWFjaCBvdGhlciwgYW5kIGF0IG9uY2UgZHJldyB0aGVpciBzd29yZHMgYW5kIHdpdGggbG91ZCBjcmllcyByb2RlIHRvIHRoZSBhdHRhY2suIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGhvcnNlcyBkYXNoZWQgdG9nZXRoZXIgd2l0aCB0aGUgdmlvbGVuY2Ugb2YgY29sbGlkaW5nIHRyaXJlbWVzLCBhbmQgZHJvcHBpbmcgdGhlIHJlaW5zIHRoZXkgY2x1dGNoZWQgb25lIGFub3RoZXIgd2l0aCB0aGVpciBoYW5kcywgZWFjaCB0cnlpbmcgdG8gdGVhciBvZmYgdGhlIG90aGVyJ3MgaGVsbWV0IGFuZCBzdHJpcCB0aGUgYnJlYXN0cGxhdGUgZnJvbSBoaXMgc2hvdWxkZXJzLiBXaGlsZSB0aGV5IHdlcmUgc3RydWdnbGluZywgdGhlaXIgaG9yc2VzIHJhbiBmcm9tIHVuZGVyIHRoZW0gYW5kIHRoZXkgZmVsbCB0byB0aGUgZ3JvdW5kLCB3aGVyZSB0aGV5IGNsb3NlZCB3aXRoIG9uZSBhbm90aGVyIGFuZCB3cmVzdGxlZCBmb3IgdGhlIG1hc3RlcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gRXVtZW5lcywgYXMgTmVvcHRvbGVtdXMgc291Z2h0IHRvIHJpc2UgZmlyc3QsIGdhdmUgaGltIGFuIHVuZGVyY3V0IGluIHRoZSBoYW0sIGFuZCBoaW1zZWxmIGdvdCB0byBoaXMgZmVldCBiZWZvcmUgaGlzIGFkdmVyc2FyeSBkaWQ7IGJ1dCBOZW9wdG9sZW11cywgc3VwcG9ydGluZyBoaW1zZWxmIG9uIG9uZSBrbmVlLCBhbmQgd291bmRlZCBpbiB0aGUgb3RoZXIsIGRlZmVuZGVkIGhpbXNlbGYgdmlnb3JvdXNseSBmcm9tIHVuZGVybmVhdGguIEhlIGNvdWxkIG5vdCwgaG93ZXZlciwgaW5mbGljdCBmYXRhbCB3b3VuZHMsIGJ1dCB3YXMgaGltc2VsZiB3b3VuZGVkIGluIHRoZSBuZWNrLCBmZWxsIHRvIHRoZSBncm91bmQsIGFuZCBsYXkgdGhlcmUgcHJvc3RyYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc3dvcmQsIGhvd2V2ZXIsIGhlIHN0aWxsIHJldGFpbmVkLCBhbmQgd2hpbGUgRXVtZW5lcywgdHJhbnNwb3J0ZWQgd2l0aCByYWdlIGFuZCBhbmNpZW50IGhhdHJlZCwgd2FzIHN0cmlwcGluZyBvZmYgaGlzIGFybW91ciBhbmQgcmV2aWxpbmcgaGltLCBOZW9wdG9sZW11cyBzdXJwcmlzZWQgaGltIHdpdGggYSB3b3VuZCB1bmRlciB0aGUgYnJlYXN0cGxhdGUsIHdoZXJlIGl0IHJlYWNoZXMgdGhlIGdyb2luLiBCdXQgdGhlIGJsb3cgZ2F2ZSBFdW1lbmVzIG1vcmUgZnJpZ2h0IHRoYW4gaGFybSwgc2luY2UgbGFjayBvZiBzdHJlbmd0aCBtYWRlIGl0IGZlZWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBjb2xsaXNpb24gd2FzIHNldmVyZSwgdGhlIHNwZWFycyB3ZXJlIHF1aWNrbHkgc2hhdHRlcmVkLCBhbmQgdGhlIGZpZ2h0aW5nIHdhcyBkb25lIHdpdGggdGhlIHN3b3Jkcy4gSGVyZSBDcmF0ZXJ1cyBkaWQgbm90IGRpc2dyYWNlIEFsZXhhbmRlciwgYnV0IHNsZXcgbWFueSBmb2VzLCBhbmQgZnJlcXVlbnRseSByb3V0ZWQgdGhlIG9wcG9zaW5nIGFycmF5cy4gQXQgbGFzdCwgaG93ZXZlciwgaGUgd2FzIHdvdW5kZWQgYnkgYSBUaHJhY2lhbiB3aG8gYXR0YWNrZWQgaGltIGZyb20gdGhlIHNpZGUsIGFuZCBmZWxsIGZyb20gaGlzIGhvcnNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIGxheSBwcm9zdHJhdGUgdGhlcmUgYWxsIGhpcyBlbmVtaWVzIHJvZGUgcGFzdCBoaW0sIG5vdCBrbm93aW5nIHdobyBoZSB3YXMsIGV4Y2VwdCBHb3JnaWFzLCBvbmUgb2YgdGhlIG9mZmljZXJzIG9mIEV1bWVuZXM7IGhlIHJlY29nbml6ZWQgaGltLCBkaXNtb3VudGVkIGZyb20gaGlzIGhvcnNlLCBhbmQgc3Rvb2QgZ3VhcmQgb3ZlciBoaXMgYm9keSwgZm9yIGhlIHdhcyBub3cgaW4gYW4gZXZpbCBwbGlnaHQgYW5kIHN0cnVnZ2xpbmcgd2l0aCBkZWF0aC4gSW4gdGhlIG1lYW50aW1lIE5lb3B0b2xlbXVzIGFsc28gd2FzIGVuZ2FnZWQgd2l0aCBFdW1lbmVzLiBUaGV5IGhhZCBsb25nIGhhdGVkIG9uZSBhbm90aGVyIHdpdGggYSBkZWFkbHkgaGF0cmVkLCBidXQgaW4gdHdvIG9uc2V0cyBuZWl0aGVyIGhhZCBjYXVnaHQgc2lnaHQgb2YgdGhlIG90aGVyOyBpbiB0aGUgdGhpcmQsIGhvd2V2ZXIsIHRoZXkgcmVjb2duaXplZCBlYWNoIG90aGVyLCBhbmQgYXQgb25jZSBkcmV3IHRoZWlyIHN3b3JkcyBhbmQgd2l0aCBsb3VkIGNyaWVzIHJvZGUgdG8gdGhlIGF0dGFjay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIGhvcnNlcyBkYXNoZWQgdG9nZXRoZXIgd2l0aCB0aGUgdmlvbGVuY2Ugb2YgY29sbGlkaW5nIHRyaXJlbWVzLCBhbmQgZHJvcHBpbmcgdGhlIHJlaW5zIHRoZXkgY2x1dGNoZWQgb25lIGFub3RoZXIgd2l0aCB0aGVpciBoYW5kcywgZWFjaCB0cnlpbmcgdG8gdGVhciBvZmYgdGhlIG90aGVyJ3MgaGVsbWV0IGFuZCBzdHJpcCB0aGUgYnJlYXN0cGxhdGUgZnJvbSBoaXMgc2hvdWxkZXJzLiBXaGlsZSB0aGV5IHdlcmUgc3RydWdnbGluZywgdGhlaXIgaG9yc2VzIHJhbiBmcm9tIHVuZGVyIHRoZW0gYW5kIHRoZXkgZmVsbCB0byB0aGUgZ3JvdW5kLCB3aGVyZSB0aGV5IGNsb3NlZCB3aXRoIG9uZSBhbm90aGVyIGFuZCB3cmVzdGxlZCBmb3IgdGhlIG1hc3RlcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gRXVtZW5lcywgYXMgTmVvcHRvbGVtdXMgc291Z2h0IHRvIHJpc2UgZmlyc3QsIGdhdmUgaGltIGFuIHVuZGVyY3V0IGluIHRoZSBoYW0sIGFuZCBoaW1zZWxmIGdvdCB0byBoaXMgZmVldCBiZWZvcmUgaGlzIGFkdmVyc2FyeSBkaWQ7IGJ1dCBOZW9wdG9sZW11cywgc3VwcG9ydGluZyBoaW1zZWxmIG9uIG9uZSBrbmVlLCBhbmQgd291bmRlZCBpbiB0aGUgb3RoZXIsIGRlZmVuZGVkIGhpbXNlbGYgdmlnb3JvdXNseSBmcm9tIHVuZGVybmVhdGguIEhlIGNvdWxkIG5vdCwgaG93ZXZlciwgaW5mbGljdCBmYXRhbCB3b3VuZHMsIGJ1dCB3YXMgaGltc2VsZiB3b3VuZGVkIGluIHRoZSBuZWNrLCBmZWxsIHRvIHRoZSBncm91bmQsIGFuZCBsYXkgdGhlcmUgcHJvc3RyYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzd29yZCwgaG93ZXZlciwgaGUgc3RpbGwgcmV0YWluZWQsIGFuZCB3aGlsZSBFdW1lbmVzLCB0cmFuc3BvcnRlZCB3aXRoIHJhZ2UgYW5kIGFuY2llbnQgaGF0cmVkLCB3YXMgc3RyaXBwaW5nIG9mZiBoaXMgYXJtb3VyIGFuZCByZXZpbGluZyBoaW0sIE5lb3B0b2xlbXVzIHN1cnByaXNlZCBoaW0gd2l0aCBhIHdvdW5kIHVuZGVyIHRoZSBicmVhc3RwbGF0ZSwgd2hlcmUgaXQgcmVhY2hlcyB0aGUgZ3JvaW4uIEJ1dCB0aGUgYmxvdyBnYXZlIEV1bWVuZXMgbW9yZSBmcmlnaHQgdGhhbiBoYXJtLCBzaW5jZSBsYWNrIG9mIHN0cmVuZ3RoIG1hZGUgaXQgZmVlYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFmdGVyIHN0cmlwcGluZyB0aGUgZGVhZCBib2R5LCB3ZWFrIGFzIGhlIHdhcyBmcm9tIHdvdW5kcyByZWNlaXZlZCBpbiBsZWdzIGFuZCBhcm1zLCBFdW1lbmVzIG5ldmVydGhlbGVzcyBoYWQgaGltc2VsZiBwdXQgdXBvbiBoaXMgaG9yc2UgYW5kIGhhc3RlbmVkIHRvIHRoZSBvdGhlciB3aW5nLCBzdXBwb3NpbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBzdGlsbCByZXNpc3RpbmcuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgbGVhcm5lZCBvZiB0aGUgZmF0ZSBvZiBDcmF0ZXJ1cyBhbmQgaGFkIHJpZGRlbiB1cCB0byB3aGVyZSBoZSBsYXksIGFuZCBzYXcgdGhhdCBoZSB3YXMgc3RpbGwgYWxpdmUgYW5kIGNvbnNjaW91cywgaGUgZGlzbW91bnRlZCwgd2VwdCBiaXR0ZXJseSwgY2xhc3BlZCBoaXMgaGFuZCwgYW5kIGhhZCBtYW55IHdvcmRzIG9mIGFidXNlIGZvciBOZW9wdG9sZW11cywgYW5kIG1hbnkgd29yZHMgb2YgcGl0eSBmb3IgQ3JhdGVydXMgaW4gaGlzIGV2aWwgZm9ydHVuZSwgYW5kIGZvciBoaW1zZWxmIGluIHRoZSBuZWNlc3NpdHkgd2hpY2ggaGFkIGJyb3VnaHQgaGltIGludG8gYSBjb25mbGljdCB3aXRoIGEgZnJpZW5kIGFuZCBjb21yYWRlLCB3aGVyZSBoZSBtdXN0IGRvIG9yIHN1ZmZlciB0aGlzIGhhcm0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIE5lcG9zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iTmVwLiBFdW0uIDQuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5FdW1lbmVzPC90aXRsZT4sIGl2LiA0PC9iaWJsPiksIEV1bWVuZXMgZ2F2ZSBDcmF0ZXJ1cyB3b3J0aHkgZnVuZXJhbCByaXRlcywgYW5kIHNlbnQgaGlzIHJlbWFpbnMgdG8gaGlzIHdpZmUgYW5kIGNoaWxkcmVuIGluIE1hY2Vkb25pYS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGxlYXJuZWQgb2YgdGhlIGZhdGUgb2YgQ3JhdGVydXMgYW5kIGhhZCByaWRkZW4gdXAgdG8gd2hlcmUgaGUgbGF5LCBhbmQgc2F3IHRoYXQgaGUgd2FzIHN0aWxsIGFsaXZlIGFuZCBjb25zY2lvdXMsIGhlIGRpc21vdW50ZWQsIHdlcHQgYml0dGVybHksIGNsYXNwZWQgaGlzIGhhbmQsIGFuZCBoYWQgbWFueSB3b3JkcyBvZiBhYnVzZSBmb3IgTmVvcHRvbGVtdXMsIGFuZCBtYW55IHdvcmRzIG9mIHBpdHkgZm9yIENyYXRlcnVzIGluIGhpcyBldmlsIGZvcnR1bmUsIGFuZCBmb3IgaGltc2VsZiBpbiB0aGUgbmVjZXNzaXR5IHdoaWNoIGhhZCBicm91Z2h0IGhpbSBpbnRvIGEgY29uZmxpY3Qgd2l0aCBhIGZyaWVuZCBhbmQgY29tcmFkZSwgd2hlcmUgaGUgbXVzdCBkbyBvciBzdWZmZXIgdGhpcyBoYXJtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIE5lcG9zICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJOZXAuIEV1bS4gNC40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpdi4gNDwvYmlibD4pLCBFdW1lbmVzIGdhdmUgQ3JhdGVydXMgd29ydGh5IGZ1bmVyYWwgcml0ZXMsIGFuZCBzZW50IGhpcyByZW1haW5zIHRvIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiBpbiBNYWNlZG9uaWEuPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJOZXAuIEV1bS4gNC40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpdi4gNDwvYmlibD4pLCBFdW1lbmVzIGdhdmUgQ3JhdGVydXMgd29ydGh5IGZ1bmVyYWwgcml0ZXMsIGFuZCBzZW50IGhpcyByZW1haW5zIHRvIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiBpbiBNYWNlZG9uaWEuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCBpdi4gNDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBiYXR0bGUgd2FzIHdvbiBieSBFdW1lbmVzIGFib3V0IHRlbiBkYXlzIGFmdGVyIHRoZSBmb3JtZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2LiAzPC9iaWJsPi48L25vdGU+IEl0IGxpZnRlZCBoaXMgcmVwdXRhdGlvbiBoaWdoLCBhbmQgaGUgd2FzIHRob3VnaHQgdG8gaGF2ZSBhY2NvbXBsaXNoZWQgaGlzIHRhc2sgYWxpa2Ugd2l0aCB3aXNkb20gYW5kIGJyYXZlcnk7IGJ1dCBpdCBnb3QgaGltIG11Y2ggZW52eSBhbmQgaGF0cmVkIGFzIHdlbGwgYW1vbmcgaGlzIGFsbGllcyBhcyBhbW9uZyBoaXMgZW5lbWllcy4gVGhleSBmZWx0IHRoYXQgaGUsIGFuIGFsaWVuIGFuZCBhIHN0cmFuZ2VyLCBoYWQgdXNlZCB0aGUgYXJtcyBhbmQgbWlnaHQgb2YgdGhlIE1hY2Vkb25pYW5zIGZvciBzbGF5aW5nIHRoZSBmb3JlbW9zdCBhbmQgbW9zdCBhcHByb3ZlZCBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGlmIFBlcmRpY2NhcyBjb3VsZCBoYXZlIGxlYXJuZWQgaW4gdGltZSBvZiB0aGUgZGVhdGggb2YgQ3JhdGVydXMsIG5vIG9uZSBlbHNlIHdvdWxkIGhhdmUgaGFkIGNoaWVmIHBsYWNlIGFtb25nIE1hY2Vkb25pYW5zOyBidXQgYXMgaXQgd2FzLCBoZSB3YXMgc2xhaW4gaW4gYSBtdXRpbnkgb2YgaGlzIHNvbGRpZXJzIGluIEVneXB0PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBub3RlIG9uIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMzwvYmlibD4uPC9ub3RlPiB0d28gZGF5cyBiZWZvcmUgdGhpcyByZXBvcnQgb2YgdGhlIGJhdHRsZSBjYW1lIHRvIGhpcyBjYW1wLCBhbmQgaGlzIE1hY2Vkb25pYW5zLCBpbiBhIHJhZ2UsIGF0IG9uY2UgY29uZGVtbmVkIEV1bWVuZXMgdG8gZGVhdGguIE1vcmVvdmVyLCBBbnRpZ29udXMgd2FzIGFwcG9pbnRlZCB0byBjb25kdWN0IHRoZSB3YXIgYWdhaW5zdCBoaW0sIGluIGNvbmp1bmN0aW9uIHdpdGggQW50aXBhdGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGJhdHRsZSB3YXMgd29uIGJ5IEV1bWVuZXMgYWJvdXQgdGVuIGRheXMgYWZ0ZXIgdGhlIGZvcm1lci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDUuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2LiAzPC9iaWJsPi48L25vdGU+IEl0IGxpZnRlZCBoaXMgcmVwdXRhdGlvbiBoaWdoLCBhbmQgaGUgd2FzIHRob3VnaHQgdG8gaGF2ZSBhY2NvbXBsaXNoZWQgaGlzIHRhc2sgYWxpa2Ugd2l0aCB3aXNkb20gYW5kIGJyYXZlcnk7IGJ1dCBpdCBnb3QgaGltIG11Y2ggZW52eSBhbmQgaGF0cmVkIGFzIHdlbGwgYW1vbmcgaGlzIGFsbGllcyBhcyBhbW9uZyBoaXMgZW5lbWllcy4gVGhleSBmZWx0IHRoYXQgaGUsIGFuIGFsaWVuIGFuZCBhIHN0cmFuZ2VyLCBoYWQgdXNlZCB0aGUgYXJtcyBhbmQgbWlnaHQgb2YgdGhlIE1hY2Vkb25pYW5zIGZvciBzbGF5aW5nIHRoZSBmb3JlbW9zdCBhbmQgbW9zdCBhcHByb3ZlZCBvZiB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gNS4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHYuIDM8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaWYgUGVyZGljY2FzIGNvdWxkIGhhdmUgbGVhcm5lZCBpbiB0aW1lIG9mIHRoZSBkZWF0aCBvZiBDcmF0ZXJ1cywgbm8gb25lIGVsc2Ugd291bGQgaGF2ZSBoYWQgY2hpZWYgcGxhY2UgYW1vbmcgTWFjZWRvbmlhbnM7IGJ1dCBhcyBpdCB3YXMsIGhlIHdhcyBzbGFpbiBpbiBhIG11dGlueSBvZiBoaXMgc29sZGllcnMgaW4gRWd5cHQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMzwvYmlibD4uPC9ub3RlPiB0d28gZGF5cyBiZWZvcmUgdGhpcyByZXBvcnQgb2YgdGhlIGJhdHRsZSBjYW1lIHRvIGhpcyBjYW1wLCBhbmQgaGlzIE1hY2Vkb25pYW5zLCBpbiBhIHJhZ2UsIGF0IG9uY2UgY29uZGVtbmVkIEV1bWVuZXMgdG8gZGVhdGguIE1vcmVvdmVyLCBBbnRpZ29udXMgd2FzIGFwcG9pbnRlZCB0byBjb25kdWN0IHRoZSB3YXIgYWdhaW5zdCBoaW0sIGluIGNvbmp1bmN0aW9uIHdpdGggQW50aXBhdGVyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aS4gMzwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBFdW1lbmVzIGZlbGwgaW4gd2l0aCB0aGUgcm95YWwgaGVyZHMgb2YgaG9yc2UgdGhhdCB3ZXJlIHBhc3R1cmluZyBhYm91dCBNb3VudCBJZGEsIGhlIHRvb2sgYXMgbWFueSBob3JzZXMgYXMgaGUgd2FudGVkIGFuZCBzZW50IGEgd3JpdHRlbiBzdGF0ZW1lbnQgb2YgdGhlIG51bWJlciB0byB0aGUgb3ZlcnNlZXJzLiBBdCB0aGlzLCB3ZSBhcmUgdG9sZCwgQW50aXBhdGVyIGxhdWdoZWQgYW5kIHNhaWQgdGhhdCBoZSBhZG1pcmVkIEV1bWVuZXMgZm9yIGhpcyBmb3JldGhvdWdodCwgc2luY2UgaGUgZXZpZGVudGx5IGV4cGVjdGVkIHRvIGdpdmUgYW4gYWNjb3VudCBvZiB0aGUgcm95YWwgcHJvcGVydGllcyB0byB0aGVtLCBvciB0byByZWNlaXZlIG9uZSBmcm9tIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlY2F1c2UgaGUgd2FzIHN1cGVyaW9yIGluIGNhdmFscnksIEV1bWVuZXMgd2lzaGVkIHRvIGdpdmUgYmF0dGxlIGluIHRoZSBwbGFpbnMgb2YgTHlkaWEgYWJvdXQgU2FyZGlzLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBoZSB3YXMgYW1iaXRpb3VzIHRvIG1ha2UgYSBkaXNwbGF5IG9mIGhpcyBmb3JjZXMgYmVmb3JlIENsZW9wYXRyYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgbm90ZSBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAzLjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiA1PC9iaWJsPi48L25vdGU+OyBidXQgYXQgdGhlIHJlcXVlc3Qgb2YgdGhhdCBwcmluY2Vzcywgd2hvIHdhcyBhZnJhaWQgdG8gZ2l2ZSBBbnRpcGF0ZXIgYW55IGNhdXNlIGZvciBjb21wbGFpbnQsIGhlIG1hcmNoZWQgYXdheSBpbnRvIHVwcGVyIFBocnlnaWEgYW5kIHdpbnRlcmVkIGF0IENlbGFlbmFlLiBIZXJlIEFsY2V0YXMsIFBvbGVtb24sIGFuZCBEb2NpbXVzIHN0cm92ZSBlbXVsb3VzbHkgd2l0aCBoaW0gZm9yIHRoZSBjaGllZiBjb21tYW5kLCB3aGVyZXVwb24gaGUgc2FpZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgYmVhcnMgb3V0IHRoZSBzYXlpbmcsIOKAmE9mIHBlcmRpdGlvbiBubyBhY2NvdW50IGlzIG1hZGUu4oCZPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoYXZpbmcgcHJvbWlzZWQgdG8gZ2l2ZSBoaXMgc29sZGllcnMgdGhlaXIgcGF5IHdpdGhpbiB0aHJlZSBkYXlzLCBoZSBzb2xkIHRoZW0gdGhlIGhvbWVzdGVhZHMgYW5kIGNhc3RsZXMgYWJvdXQgdGhlIGNvdW50cnksIHdoaWNoIHdlcmUgZnVsbCBvZiBzbGF2ZXMgYW5kIGZsb2Nrcy4gVGhlbiBldmVyeSBjYXB0YWluIGluIHRoZSBwaGFsYW54IG9yIGNvbW1hbmRlciBvZiBtZXJjZW5hcmllcyB3aG8gaGFkIGJvdWdodCBhIHBsYWNlIHdhcyBzdXBwbGllZCBieSBFdW1lbmVzIHdpdGggaW1wbGVtZW50cyBhbmQgZW5naW5lcyBvZiB3YXIgYW5kIHRvb2sgaXQgYnkgc2llZ2U7IGFuZCB0aHVzIGV2ZXJ5IHNvbGRpZXIgcmVjZWl2ZWQgdGhlIHBheSB0aGF0IHdhcyBkdWUgaGltLCBpbiBhIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2FwdHVyZWQgcHJvcGVydGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhpcywgRXVtZW5lcyB3YXMgYWdhaW4gaW4gaGlnaCBmYXZvdXI7IGFuZCBvbmNlIHdoZW4gbGV0dGVycyB3ZXJlIGZvdW5kIGluIGhpcyBjYW1wIHdoaWNoIHRoZSBsZWFkZXJzIG9mIHRoZSBlbmVteSBoYWQgY2F1c2VkIHRvIGJlIHNjYXR0ZXJlZCB0aGVyZSwgd2hlcmVpbiB0aGV5IG9mZmVyZWQgYSBodW5kcmVkIHRhbGVudHMgYW5kIGhvbm91cnMgdG8gYW55IG9uZSB3aG8gc2hvdWxkIGtpbGwgRXVtZW5lcywgaGlzIE1hY2Vkb25pYW5zIHdlcmUgaGlnaGx5IGluY2Vuc2VkIGFuZCBtYWRlIGEgZGVjcmVlIHRoYXQgYSB0aG91c2FuZCBvZiB0aGUgbGVhZGluZyBzb2xkaWVycyBzaG91bGQgc2VydmUgaGltIGNvbnRpbnVhbGx5IGFzIGEgYm9keS1ndWFyZCwgd2F0Y2hpbmcgb3ZlciBoaW0gd2hlbiBoZSB3ZW50IGFicm9hZCBhbmQgc3BlbmRpbmcgdGhlIG5pZ2h0IGF0IGhpcyBkb29yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBjYXJyaWVkIG91dCB0aGUgZGVjcmVlLCBhbmQgd2VyZSBkZWxpZ2h0ZWQgdG8gcmVjZWl2ZSBmcm9tIEV1bWVuZXMgc3VjaCBob25vdXJzIGFzIGtpbmdzIGJlc3RvdyB1cG9uIHRoZWlyIGZyaWVuZHMuIEZvciBoZSB3YXMgZW1wb3dlcmVkIHRvIGRpc3RyaWJ1dGUgcHVycGxlIGNhcHMgYW5kIG1pbGl0YXJ5IGNsb2FrcywgYW5kIHRoaXMgd2FzIGEgc3BlY2lhbCBnaWZ0IG9mIHJveWFsdHkgYW1vbmcgTWFjZWRvbmlhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRXVtZW5lcyBmZWxsIGluIHdpdGggdGhlIHJveWFsIGhlcmRzIG9mIGhvcnNlIHRoYXQgd2VyZSBwYXN0dXJpbmcgYWJvdXQgTW91bnQgSWRhLCBoZSB0b29rIGFzIG1hbnkgaG9yc2VzIGFzIGhlIHdhbnRlZCBhbmQgc2VudCBhIHdyaXR0ZW4gc3RhdGVtZW50IG9mIHRoZSBudW1iZXIgdG8gdGhlIG92ZXJzZWVycy4gQXQgdGhpcywgd2UgYXJlIHRvbGQsIEFudGlwYXRlciBsYXVnaGVkIGFuZCBzYWlkIHRoYXQgaGUgYWRtaXJlZCBFdW1lbmVzIGZvciBoaXMgZm9yZXRob3VnaHQsIHNpbmNlIGhlIGV2aWRlbnRseSBleHBlY3RlZCB0byBnaXZlIGFuIGFjY291bnQgb2YgdGhlIHJveWFsIHByb3BlcnRpZXMgdG8gdGhlbSwgb3IgdG8gcmVjZWl2ZSBvbmUgZnJvbSB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJlY2F1c2UgaGUgd2FzIHN1cGVyaW9yIGluIGNhdmFscnksIEV1bWVuZXMgd2lzaGVkIHRvIGdpdmUgYmF0dGxlIGluIHRoZSBwbGFpbnMgb2YgTHlkaWEgYWJvdXQgU2FyZGlzLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBoZSB3YXMgYW1iaXRpb3VzIHRvIG1ha2UgYSBkaXNwbGF5IG9mIGhpcyBmb3JjZXMgYmVmb3JlIENsZW9wYXRyYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gNTwvYmlibD4uPC9ub3RlPjsgYnV0IGF0IHRoZSByZXF1ZXN0IG9mIHRoYXQgcHJpbmNlc3MsIHdobyB3YXMgYWZyYWlkIHRvIGdpdmUgQW50aXBhdGVyIGFueSBjYXVzZSBmb3IgY29tcGxhaW50LCBoZSBtYXJjaGVkIGF3YXkgaW50byB1cHBlciBQaHJ5Z2lhIGFuZCB3aW50ZXJlZCBhdCBDZWxhZW5hZS4gSGVyZSBBbGNldGFzLCBQb2xlbW9uLCBhbmQgRG9jaW11cyBzdHJvdmUgZW11bG91c2x5IHdpdGggaGltIGZvciB0aGUgY2hpZWYgY29tbWFuZCwgd2hlcmV1cG9uIGhlIHNhaWQgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDMuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDU8L2JpYmw+LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBiZWFycyBvdXQgdGhlIHNheWluZywg4oCYT2YgcGVyZGl0aW9uIG5vIGFjY291bnQgaXMgbWFkZS7igJk8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBoYXZpbmcgcHJvbWlzZWQgdG8gZ2l2ZSBoaXMgc29sZGllcnMgdGhlaXIgcGF5IHdpdGhpbiB0aHJlZSBkYXlzLCBoZSBzb2xkIHRoZW0gdGhlIGhvbWVzdGVhZHMgYW5kIGNhc3RsZXMgYWJvdXQgdGhlIGNvdW50cnksIHdoaWNoIHdlcmUgZnVsbCBvZiBzbGF2ZXMgYW5kIGZsb2Nrcy4gVGhlbiBldmVyeSBjYXB0YWluIGluIHRoZSBwaGFsYW54IG9yIGNvbW1hbmRlciBvZiBtZXJjZW5hcmllcyB3aG8gaGFkIGJvdWdodCBhIHBsYWNlIHdhcyBzdXBwbGllZCBieSBFdW1lbmVzIHdpdGggaW1wbGVtZW50cyBhbmQgZW5naW5lcyBvZiB3YXIgYW5kIHRvb2sgaXQgYnkgc2llZ2U7IGFuZCB0aHVzIGV2ZXJ5IHNvbGRpZXIgcmVjZWl2ZWQgdGhlIHBheSB0aGF0IHdhcyBkdWUgaGltLCBpbiBhIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2FwdHVyZWQgcHJvcGVydGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMsIEV1bWVuZXMgd2FzIGFnYWluIGluIGhpZ2ggZmF2b3VyOyBhbmQgb25jZSB3aGVuIGxldHRlcnMgd2VyZSBmb3VuZCBpbiBoaXMgY2FtcCB3aGljaCB0aGUgbGVhZGVycyBvZiB0aGUgZW5lbXkgaGFkIGNhdXNlZCB0byBiZSBzY2F0dGVyZWQgdGhlcmUsIHdoZXJlaW4gdGhleSBvZmZlcmVkIGEgaHVuZHJlZCB0YWxlbnRzIGFuZCBob25vdXJzIHRvIGFueSBvbmUgd2hvIHNob3VsZCBraWxsIEV1bWVuZXMsIGhpcyBNYWNlZG9uaWFucyB3ZXJlIGhpZ2hseSBpbmNlbnNlZCBhbmQgbWFkZSBhIGRlY3JlZSB0aGF0IGEgdGhvdXNhbmQgb2YgdGhlIGxlYWRpbmcgc29sZGllcnMgc2hvdWxkIHNlcnZlIGhpbSBjb250aW51YWxseSBhcyBhIGJvZHktZ3VhcmQsIHdhdGNoaW5nIG92ZXIgaGltIHdoZW4gaGUgd2VudCBhYnJvYWQgYW5kIHNwZW5kaW5nIHRoZSBuaWdodCBhdCBoaXMgZG9vci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGNhcnJpZWQgb3V0IHRoZSBkZWNyZWUsIGFuZCB3ZXJlIGRlbGlnaHRlZCB0byByZWNlaXZlIGZyb20gRXVtZW5lcyBzdWNoIGhvbm91cnMgYXMga2luZ3MgYmVzdG93IHVwb24gdGhlaXIgZnJpZW5kcy4gRm9yIGhlIHdhcyBlbXBvd2VyZWQgdG8gZGlzdHJpYnV0ZSBwdXJwbGUgY2FwcyBhbmQgbWlsaXRhcnkgY2xvYWtzLCBhbmQgdGhpcyB3YXMgYSBzcGVjaWFsIGdpZnQgb2Ygcm95YWx0eSBhbW9uZyBNYWNlZG9uaWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHByb3NwZXJpdHkgbGlmdHMgZXZlbiBtZW4gb2YgaW5mZXJpb3IgbmF0dXJlcyB0byBoaWdoZXIgdGhvdWdodHMsIHNvIHRoYXQgdGhleSBhcHBlYXIgdG8gYmUgaW52ZXN0ZWQgd2l0aCBhIGNlcnRhaW4gZ3JlYXRuZXNzIGFuZCBtYWplc3R5IGFzIHRoZXkgbG9vayBkb3duIGZyb20gdGhlaXIgbG9mdHkgc3RhdGU7IGJ1dCB0aGUgdHJ1bHkgbWFnbmFuaW1vdXMgYW5kIGNvbnN0YW50IHNvdWwgcmV2ZWFscyBpdHNlbGYgcmF0aGVyIGluIGl0cyBiZWhhdmlvdXIgdW5kZXIgZGlzYXN0ZXJzIGFuZCBtaXNmb3J0dW5lcy4gQW5kIHNvIGl0IHdhcyB3aXRoIEV1bWVuZXMuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIHRvIGJlZ2luIHdpdGgsIGhlIHdhcyBkZWZlYXRlZCBieSBBbnRpZ29udXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiAzMjAgQi5DLjwvbm90ZT4gYXQgT3JjeW5paSBpbiBDYXBwYWRvY2lhIHRocm91Z2ggdHJlYWNoZXJ5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyBoYWQgY29ycnVwdGVkIEFwb2xsb25pZGVzLCBjb21tYW5kZXIgb2YgYSBkaXZpc2lvbiBvZiBjYXZhbHJ5IHVuZGVyIEV1bWVuZXMsIGFuZCBoZSB3ZW50IG92ZXIgdG8gdGhlIGVuZW15IGluIHRoZSBtaWRzdCBvZiB0aGUgYmF0dGxlLCB3aXRoIGhpcyBkaXZpc2lvbi4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHZpaWkuIDQwLCA1LTg8L2JpYmw+Ljwvbm90ZT4gYW5kIHlldCwgdGhvdWdoIGluIGZsaWdodCwgaGUgZGlkIG5vdCBzdWZmZXIgdGhlIHRyYWl0b3IgdG8gbWFrZSBoaXMgZXNjYXBlIG91dCBvZiB0aGUgcm91dCB0byB0aGUgZW5lbXksIGJ1dCBzZWl6ZWQgYW5kIGhhbmdlZCBoaW0uIFRoZW4sIHRha2luZyB0aGUgb3Bwb3NpdGUgcm91dGUgaW4gaGlzIGZsaWdodCB0byB0aGF0IG9mIGhpcyBwdXJzdWVycywgaGUgY2hhbmdlZCBoaXMgY291cnNlIGJlZm9yZSB0aGV5IGtuZXcgaXQsIGFuZCwgcGFzc2luZyBhbG9uZyBieSB0aGVtLCBjYW1lIHRvIHRoZSBwbGFjZSB3aGVyZSB0aGUgYmF0dGxlIGhhZCBiZWVuIGZvdWdodC4gSGVyZSBoZSBlbmNhbXBlZCwgY29sbGVjdGVkIHRoZSBib2RpZXMgb2YgdGhlIGRlYWQsIGFuZCBidXJuZWQgdGhlbSBvbiBweXJlcyBtYWRlIGZyb20gdGhlIGRvb3JzIG9mIHRoZSBuZWlnaGJvdXJpbmcgdmlsbGFnZXMsIHdoaWNoIGhlIGhhZCBzcGxpdCBpbnRvIGJpbGxldHMuIEhlIGJ1cm5lZCB0aGUgYm9kaWVzIG9mIHRoZSBvZmZpY2VycyBvbiBvbmUgcHlyZSwgdGhvc2Ugb2YgdGhlIGNvbW1vbiBzb2xkaWVycyBvbiBhbm90aGVyLCBoZWFwZWQgZ3JlYXQgbW91bmRzIG9mIGVhcnRoIG92ZXIgdGhlIGFzaGVzLCBhbmQgZGVwYXJ0ZWQsIHNvIHRoYXQgZXZlbiBBbnRpZ29udXMsIHdoZW4gaGUgY2FtZSB1cCBsYXRlciwgYWRtaXJlZCBoaXMgYm9sZG5lc3MgYW5kIGNvbnN0YW5jeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHByb3NwZXJpdHkgbGlmdHMgZXZlbiBtZW4gb2YgaW5mZXJpb3IgbmF0dXJlcyB0byBoaWdoZXIgdGhvdWdodHMsIHNvIHRoYXQgdGhleSBhcHBlYXIgdG8gYmUgaW52ZXN0ZWQgd2l0aCBhIGNlcnRhaW4gZ3JlYXRuZXNzIGFuZCBtYWplc3R5IGFzIHRoZXkgbG9vayBkb3duIGZyb20gdGhlaXIgbG9mdHkgc3RhdGU7IGJ1dCB0aGUgdHJ1bHkgbWFnbmFuaW1vdXMgYW5kIGNvbnN0YW50IHNvdWwgcmV2ZWFscyBpdHNlbGYgcmF0aGVyIGluIGl0cyBiZWhhdmlvdXIgdW5kZXIgZGlzYXN0ZXJzIGFuZCBtaXNmb3J0dW5lcy4gQW5kIHNvIGl0IHdhcyB3aXRoIEV1bWVuZXMuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgdG8gYmVnaW4gd2l0aCwgaGUgd2FzIGRlZmVhdGVkIGJ5IEFudGlnb251czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RWFybHkgaW4gMzIwIEIuQy48L25vdGU+IGF0IE9yY3luaWkgaW4gQ2FwcGFkb2NpYSB0aHJvdWdoIHRyZWFjaGVyeSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudGlnb251cyBoYWQgY29ycnVwdGVkIEFwb2xsb25pZGVzLCBjb21tYW5kZXIgb2YgYSBkaXZpc2lvbiBvZiBjYXZhbHJ5IHVuZGVyIEV1bWVuZXMsIGFuZCBoZSB3ZW50IG92ZXIgdG8gdGhlIGVuZW15IGluIHRoZSBtaWRzdCBvZiB0aGUgYmF0dGxlLCB3aXRoIGhpcyBkaXZpc2lvbi4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkRpb2RvcnVzLCB4dmlpaS4gNDAsIDUtODwvYmlibD4uPC9ub3RlPiBhbmQgeWV0LCB0aG91Z2ggaW4gZmxpZ2h0LCBoZSBkaWQgbm90IHN1ZmZlciB0aGUgdHJhaXRvciB0byBtYWtlIGhpcyBlc2NhcGUgb3V0IG9mIHRoZSByb3V0IHRvIHRoZSBlbmVteSwgYnV0IHNlaXplZCBhbmQgaGFuZ2VkIGhpbS4gVGhlbiwgdGFraW5nIHRoZSBvcHBvc2l0ZSByb3V0ZSBpbiBoaXMgZmxpZ2h0IHRvIHRoYXQgb2YgaGlzIHB1cnN1ZXJzLCBoZSBjaGFuZ2VkIGhpcyBjb3Vyc2UgYmVmb3JlIHRoZXkga25ldyBpdCwgYW5kLCBwYXNzaW5nIGFsb25nIGJ5IHRoZW0sIGNhbWUgdG8gdGhlIHBsYWNlIHdoZXJlIHRoZSBiYXR0bGUgaGFkIGJlZW4gZm91Z2h0LiBIZXJlIGhlIGVuY2FtcGVkLCBjb2xsZWN0ZWQgdGhlIGJvZGllcyBvZiB0aGUgZGVhZCwgYW5kIGJ1cm5lZCB0aGVtIG9uIHB5cmVzIG1hZGUgZnJvbSB0aGUgZG9vcnMgb2YgdGhlIG5laWdoYm91cmluZyB2aWxsYWdlcywgd2hpY2ggaGUgaGFkIHNwbGl0IGludG8gYmlsbGV0cy4gSGUgYnVybmVkIHRoZSBib2RpZXMgb2YgdGhlIG9mZmljZXJzIG9uIG9uZSBweXJlLCB0aG9zZSBvZiB0aGUgY29tbW9uIHNvbGRpZXJzIG9uIGFub3RoZXIsIGhlYXBlZCBncmVhdCBtb3VuZHMgb2YgZWFydGggb3ZlciB0aGUgYXNoZXMsIGFuZCBkZXBhcnRlZCwgc28gdGhhdCBldmVuIEFudGlnb251cywgd2hlbiBoZSBjYW1lIHVwIGxhdGVyLCBhZG1pcmVkIGhpcyBib2xkbmVzcyBhbmQgY29uc3RhbmN5LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHZpaWkuIDQwLCA1LTg8L2JpYmw+LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGhlIGNhbWUgdXBvbiB0aGUgYmFnZ2FnZSBvZiBBbnRpZ29udXMsIGFuZCBjb3VsZCBlYXNpbHkgaGF2ZSBjYXB0dXJlZCBtYW55IGZyZWVtZW4sIG1hbnkgc2xhdmVzLCBhbmQgd2VhbHRoIGFtYXNzZWQgZnJvbSBzbyBtYW55IHdhcnMgYW5kIHBsdW5kZXJpbmdzLCBoZSB3YXMgYWZyYWlkIHRoYXQgaGlzIG1lbiwgaWYgbG9hZGVkIGRvd24gd2l0aCBib290eSBhbmQgc3BvaWxzLCB3b3VsZCBiZWNvbWUgdG9vIGhlYXZ5IGZvciBmbGlnaHQsIGFuZCB0b28gbHV4dXJpb3VzIHRvIGVuZHVyZSB3YW5kZXJpbmdzIGFuZCBsYXBzZSBvZiB0aW1lLiBJbiBsYXBzZSBvZiB0aW1lLCBob3dldmVyLCBoZSBwbGFjZWQgaGlzIGNoaWVmIGhvcGVzIGZvciBlbmRpbmcgdGhlIHdhciwgZmVlbGluZyB0aGF0IGhlIGNvdWxkIHRodXMgY2F1c2UgQW50aWdvbnVzIHRvIHR1cm4gYmFjay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIGl0IHdhcyBxdWl0ZSBhIGRpZmZpY3VsdCBtYXR0ZXIgdG8gZGVmbGVjdCBoaXMgTWFjZWRvbmlhbnMgZnJvbSBnb29kIHRoaW5ncyB3aGljaCB3ZXJlIHdpdGhpbiB0aGVpciByZWFjaCwgaGUgb3JkZXJlZCB0aGVtIHRvIHJlZnJlc2ggdGhlbXNlbHZlcyBhbmQgYmFpdCB0aGVpciBob3JzZXMgYmVmb3JlIGFkdmFuY2luZyB1cG9uIHRoZSBlbmVteS4gSGUgaGltc2VsZiwgaG93ZXZlciwgc2VudCBhIHNlY3JldCBtZXNzYWdlIHRvIE1lbmFuZGVyLCB3aG8gd2FzIGluIGNoYXJnZSBvZiB0aGUgZW5lbXkncyBiYWdnYWdlLCBpbXBseWluZyB0aGF0IGhlIHdhcyBjb25jZXJuZWQgZm9yIGhpbSBhcyBhbiBvbGQgdGltZSBmcmllbmQgYW5kIGNvbXJhZGUsIGFuZCBhZHZpc2luZyBoaW0gdG8gYmUgb24gaGlzIGd1YXJkIGFuZCB3aXRoZHJhdyBhcyBxdWlja2x5IGFzIHBvc3NpYmxlIGZyb20gaGlzIGxvdy1seWluZyBhbmQgYWNjZXNzaWJsZSBwb3NpdGlvbiB0byB0aGUgZm9vdC1oaWxscyBuZWFyIGJ5LCB3aGljaCBjb3VsZCBub3QgYmUgcmVhY2hlZCBieSBjYXZhbHJ5IG9yIHN1cnJvdW5kZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lbmFuZGVyIHNwZWVkaWx5IGNvbXByZWhlbmRlZCBoaXMgcGVyaWwgYW5kIGRlY2FtcGVkLCBhbmQgdGhlbiBFdW1lbmVzIG9wZW5seSBzZW50IG91dCBzY291dHMgYW5kIG9yZGVyZWQgaGlzIHNvbGRpZXJzIHRvIGFybSB0aGVtc2VsdmVzIGFuZCBicmlkbGUgdGhlaXIgaG9yc2VzLCBhcyBoZSB3YXMgZ29pbmcgdG8gbGVhZCB0aGVtIGFnYWluc3QgdGhlIGVuZW15LiBCdXQgd2hlbiB0aGUgc2NvdXRzIGJyb3VnaHQgd29yZCB0aGF0IE1lbmFuZGVyIHdhcyBhbHRvZ2V0aGVyIHNhZmUgZnJvbSBjYXB0dXJlIG5vdyB0aGF0IGhlIGhhZCB0YWtlbiByZWZ1Z2UgaW4gYSBkaWZmaWN1bHQgcmVnaW9uLCBFdW1lbmVzIHByZXRlbmRlZCB0byBiZSB2ZXhlZCwgYW5kIGxlZCBoaXMgZm9yY2VzIGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBNZW5hbmRlciBib3JlIHdpdG5lc3Mgb2YgdGhlc2UgdGhpbmdzIHRvIEFudGlnb251cywgYW5kIHRoZSBNYWNlZG9uaWFucyBiZWdhbiB0byBwcmFpc2UgRXVtZW5lcyBhbmQgZmVsdCBtb3JlIGtpbmRseSB0b3dhcmRzIGhpbSwgYmVjYXVzZSwgd2hlbiBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGVuc2xhdmUgdGhlaXIgY2hpbGRyZW4gYW5kIG91dHJhZ2UgdGhlaXIgd2l2ZXMsIGhlIGhhZCBzcGFyZWQgdGhlbSBhbmQgbGV0IHRoZW0gZ28sIEFudGlnb251cyBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgbXkgZ29vZCBtZW4sIHRoYXQgZmVsbG93IGRpZCBub3QgbGV0IHRoZW0gZ28gb3V0IG9mIHJlZ2FyZCBmb3IgeW91LCBidXQgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIHRvIHB1dCBzdWNoIGZldHRlcnMgb24gaGltc2VsZiBpbiBoaXMgZmxpZ2h0LjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB3aGVuIGhlIGNhbWUgdXBvbiB0aGUgYmFnZ2FnZSBvZiBBbnRpZ29udXMsIGFuZCBjb3VsZCBlYXNpbHkgaGF2ZSBjYXB0dXJlZCBtYW55IGZyZWVtZW4sIG1hbnkgc2xhdmVzLCBhbmQgd2VhbHRoIGFtYXNzZWQgZnJvbSBzbyBtYW55IHdhcnMgYW5kIHBsdW5kZXJpbmdzLCBoZSB3YXMgYWZyYWlkIHRoYXQgaGlzIG1lbiwgaWYgbG9hZGVkIGRvd24gd2l0aCBib290eSBhbmQgc3BvaWxzLCB3b3VsZCBiZWNvbWUgdG9vIGhlYXZ5IGZvciBmbGlnaHQsIGFuZCB0b28gbHV4dXJpb3VzIHRvIGVuZHVyZSB3YW5kZXJpbmdzIGFuZCBsYXBzZSBvZiB0aW1lLiBJbiBsYXBzZSBvZiB0aW1lLCBob3dldmVyLCBoZSBwbGFjZWQgaGlzIGNoaWVmIGhvcGVzIGZvciBlbmRpbmcgdGhlIHdhciwgZmVlbGluZyB0aGF0IGhlIGNvdWxkIHRodXMgY2F1c2UgQW50aWdvbnVzIHRvIHR1cm4gYmFjay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSBpdCB3YXMgcXVpdGUgYSBkaWZmaWN1bHQgbWF0dGVyIHRvIGRlZmxlY3QgaGlzIE1hY2Vkb25pYW5zIGZyb20gZ29vZCB0aGluZ3Mgd2hpY2ggd2VyZSB3aXRoaW4gdGhlaXIgcmVhY2gsIGhlIG9yZGVyZWQgdGhlbSB0byByZWZyZXNoIHRoZW1zZWx2ZXMgYW5kIGJhaXQgdGhlaXIgaG9yc2VzIGJlZm9yZSBhZHZhbmNpbmcgdXBvbiB0aGUgZW5lbXkuIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIHNlbnQgYSBzZWNyZXQgbWVzc2FnZSB0byBNZW5hbmRlciwgd2hvIHdhcyBpbiBjaGFyZ2Ugb2YgdGhlIGVuZW15J3MgYmFnZ2FnZSwgaW1wbHlpbmcgdGhhdCBoZSB3YXMgY29uY2VybmVkIGZvciBoaW0gYXMgYW4gb2xkIHRpbWUgZnJpZW5kIGFuZCBjb21yYWRlLCBhbmQgYWR2aXNpbmcgaGltIHRvIGJlIG9uIGhpcyBndWFyZCBhbmQgd2l0aGRyYXcgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSBmcm9tIGhpcyBsb3ctbHlpbmcgYW5kIGFjY2Vzc2libGUgcG9zaXRpb24gdG8gdGhlIGZvb3QtaGlsbHMgbmVhciBieSwgd2hpY2ggY291bGQgbm90IGJlIHJlYWNoZWQgYnkgY2F2YWxyeSBvciBzdXJyb3VuZGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lbmFuZGVyIHNwZWVkaWx5IGNvbXByZWhlbmRlZCBoaXMgcGVyaWwgYW5kIGRlY2FtcGVkLCBhbmQgdGhlbiBFdW1lbmVzIG9wZW5seSBzZW50IG91dCBzY291dHMgYW5kIG9yZGVyZWQgaGlzIHNvbGRpZXJzIHRvIGFybSB0aGVtc2VsdmVzIGFuZCBicmlkbGUgdGhlaXIgaG9yc2VzLCBhcyBoZSB3YXMgZ29pbmcgdG8gbGVhZCB0aGVtIGFnYWluc3QgdGhlIGVuZW15LiBCdXQgd2hlbiB0aGUgc2NvdXRzIGJyb3VnaHQgd29yZCB0aGF0IE1lbmFuZGVyIHdhcyBhbHRvZ2V0aGVyIHNhZmUgZnJvbSBjYXB0dXJlIG5vdyB0aGF0IGhlIGhhZCB0YWtlbiByZWZ1Z2UgaW4gYSBkaWZmaWN1bHQgcmVnaW9uLCBFdW1lbmVzIHByZXRlbmRlZCB0byBiZSB2ZXhlZCwgYW5kIGxlZCBoaXMgZm9yY2VzIGF3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBNZW5hbmRlciBib3JlIHdpdG5lc3Mgb2YgdGhlc2UgdGhpbmdzIHRvIEFudGlnb251cywgYW5kIHRoZSBNYWNlZG9uaWFucyBiZWdhbiB0byBwcmFpc2UgRXVtZW5lcyBhbmQgZmVsdCBtb3JlIGtpbmRseSB0b3dhcmRzIGhpbSwgYmVjYXVzZSwgd2hlbiBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGVuc2xhdmUgdGhlaXIgY2hpbGRyZW4gYW5kIG91dHJhZ2UgdGhlaXIgd2l2ZXMsIGhlIGhhZCBzcGFyZWQgdGhlbSBhbmQgbGV0IHRoZW0gZ28sIEFudGlnb251cyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBteSBnb29kIG1lbiwgdGhhdCBmZWxsb3cgZGlkIG5vdCBsZXQgdGhlbSBnbyBvdXQgb2YgcmVnYXJkIGZvciB5b3UsIGJ1dCBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgdG8gcHV0IHN1Y2ggZmV0dGVycyBvbiBoaW1zZWxmIGluIGhpcyBmbGlnaHQuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBhcyBoZSB3YW5kZXJlZCBhYm91dCBhbmQgc291Z2h0IHRvIGVsdWRlIGhpcyBlbmVtaWVzLCBFdW1lbmVzIHBlcnN1YWRlZCBtb3N0IG9mIGhpcyBzb2xkaWVycyB0byBsZWF2ZSBoaW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFueSBkZXNlcnRlZCB0byBBbnRpZ29udXMsIGFjY29yZGluZyB0byBEaW9kb3J1cyAoPGJpYmwgZGVmYXVsdD0iTk8iPnh2aWlpLiA0MSwgMTwvYmlibD4pLjwvbm90ZT4gZWl0aGVyIG91dCBvZiByZWdhcmQgZm9yIHRoZW0sIG9yIGJlY2F1c2UgaGUgd2FzIHVud2lsbGluZyB0byB0cmFpbCBhZnRlciBoaW0gYSBib2R5IG9mIG1lbiB0b28gc21hbGwgdG8gZ2l2ZSBiYXR0bGUsIGFuZCB0b28gbGFyZ2UgdG8gZXNjYXBlIHRoZSBlbmVteSdzIG5vdGljZS4gTW9yZW92ZXIsIGFmdGVyIGhlIGhhZCB0YWtlbiByZWZ1Z2UgaW4gTm9yYSwgYSBzdHJvbmdob2xkIG9uIHRoZSBjb25maW5lcyBvZiBMeWNhb25pYSBhbmQgQ2FwcGFkb2NpYSwgd2l0aCBmaXZlIGh1bmRyZWQgaG9yc2VtZW4gYW5kIHR3byBodW5kcmVkIG1lbi1hdC1hcm1zLCBldmVuIHRoZXJlIGFnYWluLCB3aGF0c29ldmVyIGZyaWVuZHMgYXNrZWQgdG8gYmUgZGlzbWlzc2VkIGJlY2F1c2UgdGhleSBjb3VsZCBub3QgZW5kdXJlIHRoZSBhc3Blcml0aWVzIG9mIHRoZSBwbGFjZSBhbmQgdGhlIGNvbnN0cmFpbnQgaW4gZGlldCwgYWxsIHRoZXNlIGhlIHNlbnQgYXdheSwgYWZ0ZXIgYmVzdG93aW5nIHVwb24gdGhlbSB0b2tlbnMgb2YgYWZmZWN0aW9uIGFuZCBraW5kbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQW50aWdvbnVzIGNhbWUgdXAgYW5kIGludml0ZWQgaGltIHRvIGEgY29uZmVyZW5jZSBiZWZvcmUgdGhlIHNpZWdlIGJlZ2FuLCBoZSByZXBsaWVkIHRoYXQgdGhlIGZyaWVuZHMgb2YgQW50aWdvbnVzIGFuZCBvZmZpY2VycyB0byBzdWNjZWVkIEFudGlnb251cyBpbiBjb21tYW5kIHdlcmUgbWFueSwgd2hlcmVhcyB0aG9zZSBpbiB3aG9zZSBiZWhhbGYgaGUgd2FzIGZpZ2h0aW5nIGhhZCBubyBvbmUgbGVmdCB0byBjb21tYW5kIHRoZW0gYWZ0ZXIgaGltOyBhbmQgaGUgYmFkZSBBbnRpZ29udXMgdG8gc2VuZCBob3N0YWdlcyBpZiBoZSB3YW50ZWQgdG8gaGF2ZSBhIGNvbmZlcmVuY2Ugd2l0aCBoaW0uIE1vcmVvdmVyLCB3aGVuIEFudGlnb251cyBkZW1hbmRlZCB0byBiZSBhZGRyZXNzZWQgYnkgaGltIGFzIGEgc3VwZXJpb3IsIEV1bWVuZXMgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHJlZ2FyZCBubyBtYW4gYXMgbXkgc3VwZXJpb3Igc28gbG9uZyBhcyBJIGFtIG1hc3RlciBvZiBteSBzd29yZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBhZnRlciBBbnRpZ29udXMgaGFkIHNlbnQgaGlzIG5lcGhldyBQdG9sZW15IGludG8gdGhlIGZvcnRyZXNzLCBhcyBFdW1lbmVzIGhhZCBkZW1hbmRlZCwgRXVtZW5lcyB3ZW50IGRvd24gdG8gbWVldCBoaW0sIGFuZCB0aGV5IGVtYnJhY2VkIG9uZSBhbm90aGVyIHdpdGggZ3JlZXRpbmdzIG9mIGZyaWVuZHNoaXAgYW5kIGFmZmVjdGlvbiwgc2luY2UgdGhleSBoYWQgZm9ybWVybHkgYmVlbiBjbG9zZSBhc3NvY2lhdGVzIGFuZCBpbnRpbWF0ZSBjb21wYW5pb25zLiBBIGxvbmcgY29uZmVyZW5jZSB3YXMgaGVsZCwgaW4gd2hpY2ggRXVtZW5lcyBtYWRlIG5vIG1lbnRpb24gb2YgaGlzIG93biBzYWZldHkgb3Igb2YgcGVhY2UsIGJ1dCBhY3R1YWxseSBkZW1hbmRlZCB0aGF0IGhlIHNob3VsZCBiZSBjb25maXJtZWQgaW4gdGhlIHBvc3Nlc3Npb24gb2YgaGlzIHNhdHJhcGllcywgYW5kIHRoYXQgd2hhdCB3YXMgaGlzIGJ5IGdpZnQgc2hvdWxkIGJlIHJlc3RvcmVkIHRvIGhpbS4gQXQgdGhpcyB0aGUgYnlzdGFuZGVycyB3ZXJlIGFtYXplZCwgYW5kIHRoZXkgYWRtaXJlZCBoaXMgbG9mdHkgc3Bpcml0IGFuZCBjb25maWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbWVhbndoaWxlIG1hbnkgb2YgdGhlIE1hY2Vkb25pYW5zIGNhbWUgcnVubmluZyB0b2dldGhlciBpbiB0aGVpciBlYWdlcm5lc3MgdG8gc2VlIHdoYXQgc29ydCBvZiBhIG1hbiBFdW1lbmVzIHdhczsgZm9yIG5vIG9uZSBlbHNlIGhhZCBiZWVuIHNvIG11Y2ggdGFsa2VkIGFib3V0IGluIHRoZSBhcm15IHNpbmNlIHRoZSBkZWF0aCBvZiBDcmF0ZXJ1cy4gVGhlbiBBbnRpZ29udXMsIGFmcmFpZCB0aGF0IEV1bWVuZXMgbWlnaHQgc3VmZmVyIHNvbWUgdmlvbGVuY2UsIGZpcnN0IGxvdWRseSBmb3JiYWRlIHRoZSBzb2xkaWVycyB0byBhcHByb2FjaCwgYW5kIHBlbHRlZCB3aXRoIHN0b25lcyB0aG9zZSB3aG8gd2VyZSBodXJyeWluZyB1cCwgYnV0IGZpbmFsbHkgdGhyZXcgaGlzIGFybXMgYWJvdXQgRXVtZW5lcyBhbmQsIGtlZXBpbmcgb2ZmIHRoZSB0aHJvbmcgd2l0aCBoaXMgYm9keWd1YXJkcywgd2l0aCBtdWNoIGFkbyByZW1vdmVkIGhpbSB0byBhIHBsYWNlIG9mIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgYXMgaGUgd2FuZGVyZWQgYWJvdXQgYW5kIHNvdWdodCB0byBlbHVkZSBoaXMgZW5lbWllcywgRXVtZW5lcyBwZXJzdWFkZWQgbW9zdCBvZiBoaXMgc29sZGllcnMgdG8gbGVhdmUgaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFueSBkZXNlcnRlZCB0byBBbnRpZ29udXMsIGFjY29yZGluZyB0byBEaW9kb3J1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+eHZpaWkuIDQxLCAxPC9iaWJsPikuPC9ub3RlPiBlaXRoZXIgb3V0IG9mIHJlZ2FyZCBmb3IgdGhlbSwgb3IgYmVjYXVzZSBoZSB3YXMgdW53aWxsaW5nIHRvIHRyYWlsIGFmdGVyIGhpbSBhIGJvZHkgb2YgbWVuIHRvbyBzbWFsbCB0byBnaXZlIGJhdHRsZSwgYW5kIHRvbyBsYXJnZSB0byBlc2NhcGUgdGhlIGVuZW15J3Mgbm90aWNlLiBNb3Jlb3ZlciwgYWZ0ZXIgaGUgaGFkIHRha2VuIHJlZnVnZSBpbiBOb3JhLCBhIHN0cm9uZ2hvbGQgb24gdGhlIGNvbmZpbmVzIG9mIEx5Y2FvbmlhIGFuZCBDYXBwYWRvY2lhLCB3aXRoIGZpdmUgaHVuZHJlZCBob3JzZW1lbiBhbmQgdHdvIGh1bmRyZWQgbWVuLWF0LWFybXMsIGV2ZW4gdGhlcmUgYWdhaW4sIHdoYXRzb2V2ZXIgZnJpZW5kcyBhc2tlZCB0byBiZSBkaXNtaXNzZWQgYmVjYXVzZSB0aGV5IGNvdWxkIG5vdCBlbmR1cmUgdGhlIGFzcGVyaXRpZXMgb2YgdGhlIHBsYWNlIGFuZCB0aGUgY29uc3RyYWludCBpbiBkaWV0LCBhbGwgdGhlc2UgaGUgc2VudCBhd2F5LCBhZnRlciBiZXN0b3dpbmcgdXBvbiB0aGVtIHRva2VucyBvZiBhZmZlY3Rpb24gYW5kIGtpbmRuZXNzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPnh2aWlpLiA0MSwgMTwvYmlibD4pLjwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFudGlnb251cyBjYW1lIHVwIGFuZCBpbnZpdGVkIGhpbSB0byBhIGNvbmZlcmVuY2UgYmVmb3JlIHRoZSBzaWVnZSBiZWdhbiwgaGUgcmVwbGllZCB0aGF0IHRoZSBmcmllbmRzIG9mIEFudGlnb251cyBhbmQgb2ZmaWNlcnMgdG8gc3VjY2VlZCBBbnRpZ29udXMgaW4gY29tbWFuZCB3ZXJlIG1hbnksIHdoZXJlYXMgdGhvc2UgaW4gd2hvc2UgYmVoYWxmIGhlIHdhcyBmaWdodGluZyBoYWQgbm8gb25lIGxlZnQgdG8gY29tbWFuZCB0aGVtIGFmdGVyIGhpbTsgYW5kIGhlIGJhZGUgQW50aWdvbnVzIHRvIHNlbmQgaG9zdGFnZXMgaWYgaGUgd2FudGVkIHRvIGhhdmUgYSBjb25mZXJlbmNlIHdpdGggaGltLiBNb3Jlb3Zlciwgd2hlbiBBbnRpZ29udXMgZGVtYW5kZWQgdG8gYmUgYWRkcmVzc2VkIGJ5IGhpbSBhcyBhIHN1cGVyaW9yLCBFdW1lbmVzIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHJlZ2FyZCBubyBtYW4gYXMgbXkgc3VwZXJpb3Igc28gbG9uZyBhcyBJIGFtIG1hc3RlciBvZiBteSBzd29yZC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgYWZ0ZXIgQW50aWdvbnVzIGhhZCBzZW50IGhpcyBuZXBoZXcgUHRvbGVteSBpbnRvIHRoZSBmb3J0cmVzcywgYXMgRXVtZW5lcyBoYWQgZGVtYW5kZWQsIEV1bWVuZXMgd2VudCBkb3duIHRvIG1lZXQgaGltLCBhbmQgdGhleSBlbWJyYWNlZCBvbmUgYW5vdGhlciB3aXRoIGdyZWV0aW5ncyBvZiBmcmllbmRzaGlwIGFuZCBhZmZlY3Rpb24sIHNpbmNlIHRoZXkgaGFkIGZvcm1lcmx5IGJlZW4gY2xvc2UgYXNzb2NpYXRlcyBhbmQgaW50aW1hdGUgY29tcGFuaW9ucy4gQSBsb25nIGNvbmZlcmVuY2Ugd2FzIGhlbGQsIGluIHdoaWNoIEV1bWVuZXMgbWFkZSBubyBtZW50aW9uIG9mIGhpcyBvd24gc2FmZXR5IG9yIG9mIHBlYWNlLCBidXQgYWN0dWFsbHkgZGVtYW5kZWQgdGhhdCBoZSBzaG91bGQgYmUgY29uZmlybWVkIGluIHRoZSBwb3NzZXNzaW9uIG9mIGhpcyBzYXRyYXBpZXMsIGFuZCB0aGF0IHdoYXQgd2FzIGhpcyBieSBnaWZ0IHNob3VsZCBiZSByZXN0b3JlZCB0byBoaW0uIEF0IHRoaXMgdGhlIGJ5c3RhbmRlcnMgd2VyZSBhbWF6ZWQsIGFuZCB0aGV5IGFkbWlyZWQgaGlzIGxvZnR5IHNwaXJpdCBhbmQgY29uZmlkZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtZWFud2hpbGUgbWFueSBvZiB0aGUgTWFjZWRvbmlhbnMgY2FtZSBydW5uaW5nIHRvZ2V0aGVyIGluIHRoZWlyIGVhZ2VybmVzcyB0byBzZWUgd2hhdCBzb3J0IG9mIGEgbWFuIEV1bWVuZXMgd2FzOyBmb3Igbm8gb25lIGVsc2UgaGFkIGJlZW4gc28gbXVjaCB0YWxrZWQgYWJvdXQgaW4gdGhlIGFybXkgc2luY2UgdGhlIGRlYXRoIG9mIENyYXRlcnVzLiBUaGVuIEFudGlnb251cywgYWZyYWlkIHRoYXQgRXVtZW5lcyBtaWdodCBzdWZmZXIgc29tZSB2aW9sZW5jZSwgZmlyc3QgbG91ZGx5IGZvcmJhZGUgdGhlIHNvbGRpZXJzIHRvIGFwcHJvYWNoLCBhbmQgcGVsdGVkIHdpdGggc3RvbmVzIHRob3NlIHdobyB3ZXJlIGh1cnJ5aW5nIHVwLCBidXQgZmluYWxseSB0aHJldyBoaXMgYXJtcyBhYm91dCBFdW1lbmVzIGFuZCwga2VlcGluZyBvZmYgdGhlIHRocm9uZyB3aXRoIGhpcyBib2R5Z3VhcmRzLCB3aXRoIG11Y2ggYWRvIHJlbW92ZWQgaGltIHRvIGEgcGxhY2Ugb2Ygc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBBbnRpZ29udXMgYnVpbHQgYSB3YWxsIHJvdW5kIE5vcmEsIGxlZnQgdHJvb3BzIHRvIGd1YXJkIGl0LCBhbmQgcmV0aXJlZDsgRXVtZW5lcywgaG93ZXZlciwgYWx0aG91Z2ggY2xvc2VseSBiZXNpZWdlZCBpbiBhIHN0cm9uZ2hvbGQgd2hpY2ggaGFkIGdyYWluLCB3YXRlciBpbiBhYnVuZGFuY2UsIGFuZCBzYWx0LCBidXQgbm8gb3RoZXIgZWRpYmxlLCBub3QgZXZlbiBhIHJlbGlzaCB0byBnbyB3aXRoIHRoZSBncmFpbiwgbmV2ZXJ0aGVsZXNzLCB3aXRoIHdoYXQgaGUgaGFkLCBtYW5hZ2VkIHRvIHJlbmRlciB0aGUgbGlmZSBvZiBoaXMgYXNzb2NpYXRlcyBjaGVlcmZ1bCwgaW52aXRpbmcgdGhlbSBhbGwgYnkgdHVybnMgdG8gaGlzIG93biB0YWJsZSwgYW5kIHNlYXNvbmluZyB0aGUgbWVhbCB0aHVzIHNoYXJlZCB3aXRoIGNvbnZlcnNhdGlvbiB3aGljaCBoYWQgY2hhcm0gYW5kIGZyaWVuZGxpbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhhZCBhIHBsZWFzYW50IGZhY2UsIG5vdCBsaWtlIHRoYXQgb2YgYSB3YXItd29ybiB2ZXRlcmFuLCBidXQgZGVsaWNhdGUgYW5kIHlvdXRoZnVsLCBhbmQgYWxsIGhpcyBib2R5IGhhZCwgYXMgaXQgd2VyZSwgYXJ0aXN0aWMgcHJvcG9ydGlvbnMsIHdpdGggbGltYnMgb2YgYXN0b25pc2hpbmcgc3ltbWV0cnk7IGFuZCB0aG91Z2ggaGUgd2FzIG5vdCBhIHBvd2VyZnVsIHNwZWFrZXIsIHN0aWxsIGhlIHdhcyBpbnNpbnVhdGluZyBhbmQgcGVyc3Vhc2l2ZSwgYXMgb25lIG1heSBnYXRoZXIgZnJvbSBoaXMgbGV0dGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQW50aWdvbnVzIGJ1aWx0IGEgd2FsbCByb3VuZCBOb3JhLCBsZWZ0IHRyb29wcyB0byBndWFyZCBpdCwgYW5kIHJldGlyZWQ7IEV1bWVuZXMsIGhvd2V2ZXIsIGFsdGhvdWdoIGNsb3NlbHkgYmVzaWVnZWQgaW4gYSBzdHJvbmdob2xkIHdoaWNoIGhhZCBncmFpbiwgd2F0ZXIgaW4gYWJ1bmRhbmNlLCBhbmQgc2FsdCwgYnV0IG5vIG90aGVyIGVkaWJsZSwgbm90IGV2ZW4gYSByZWxpc2ggdG8gZ28gd2l0aCB0aGUgZ3JhaW4sIG5ldmVydGhlbGVzcywgd2l0aCB3aGF0IGhlIGhhZCwgbWFuYWdlZCB0byByZW5kZXIgdGhlIGxpZmUgb2YgaGlzIGFzc29jaWF0ZXMgY2hlZXJmdWwsIGludml0aW5nIHRoZW0gYWxsIGJ5IHR1cm5zIHRvIGhpcyBvd24gdGFibGUsIGFuZCBzZWFzb25pbmcgdGhlIG1lYWwgdGh1cyBzaGFyZWQgd2l0aCBjb252ZXJzYXRpb24gd2hpY2ggaGFkIGNoYXJtIGFuZCBmcmllbmRsaW5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgYSBwbGVhc2FudCBmYWNlLCBub3QgbGlrZSB0aGF0IG9mIGEgd2FyLXdvcm4gdmV0ZXJhbiwgYnV0IGRlbGljYXRlIGFuZCB5b3V0aGZ1bCwgYW5kIGFsbCBoaXMgYm9keSBoYWQsIGFzIGl0IHdlcmUsIGFydGlzdGljIHByb3BvcnRpb25zLCB3aXRoIGxpbWJzIG9mIGFzdG9uaXNoaW5nIHN5bW1ldHJ5OyBhbmQgdGhvdWdoIGhlIHdhcyBub3QgYSBwb3dlcmZ1bCBzcGVha2VyLCBzdGlsbCBoZSB3YXMgaW5zaW51YXRpbmcgYW5kIHBlcnN1YXNpdmUsIGFzIG9uZSBtYXkgZ2F0aGVyIGZyb20gaGlzIGxldHRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIGFsbCBkZXRyaW1lbnRhbCB0byBoaXMgZm9yY2VzIHRodXMgYmVzaWVnZWQgd2FzIHRoZWlyIG5hcnJvdyBxdWFydGVycywgc2luY2UgdGhlaXIgbW92ZW1lbnRzIHdlcmUgY29uZmluZWQgdG8gc21hbGwgaG91c2VzIGFuZCBhIHBsYWNlIG9ubHkgdHdvIGZ1cmxvbmdzIGluIGNpcmN1bWZlcmVuY2UsIHNvIHRoYXQgbmVpdGhlciBtZW4gbm9yIGhvcnNlcyBjb3VsZCBnZXQgZXhlcmNpc2UgYmVmb3JlIGVhdGluZyBvciBiZWluZyBmZWQuIFRoZXJlZm9yZSwgd2lzaGluZyB0byByZW1vdmUgdGhlIHdlYWtuZXNzIGFuZCBsYW5ndW9yIHdpdGggd2hpY2ggdGhlaXIgaW5hY3Rpdml0eSBhZmZsaWN0ZWQgdGhlbSwgYW5kLCBtb3JlIHRoYW4gdGhhdCwgdG8gaGF2ZSB0aGVtIHNvbWVob3cgb3Igb3RoZXIgaW4gdHJhaW5pbmcgZm9yIGZsaWdodCwgaWYgb3Bwb3J0dW5pdHkgc2hvdWxkIG9mZmVyLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBhc3NpZ25lZCB0aGUgbWVuIGEgaG91c2UsIHRoZSBsYXJnZXN0IGluIHRoZSBwbGFjZSwgZm91cnRlZW4gY3ViaXRzIGxvbmcsIGFzIGEgcGxhY2UgdG8gd2Fsaywgb3JkZXJpbmcgdGhlbSBsaXR0bGUgYnkgbGl0dGxlIHRvIGluY3JlYXNlIHRoZWlyIHBhY2UuIEFuZCBhcyBmb3IgdGhlIGhvcnNlcywgaGUgaGFkIHRoZW0gYWxsIGdpcnQgcm91bmQgdGhlIG5lY2sgd2l0aCBncmVhdCBzdHJhcHMgZmFzdGVuZWQgdG8gdGhlIHJvb2YsIGFuZCByYWlzZWQgdGhlbSBwYXJ0bHkgdXAgaW50byB0aGUgYWlyIGJ5IG1lYW5zIG9mIHB1bGxleXMsIHNvIHRoYXQsIHdoaWxlIHdpdGggdGhlaXIgaGluZCBsZWdzIHRoZXkgcmVzdGVkIGZpcm1seSB1cG9uIHRoZSBncm91bmQsIHRoZXkganVzdCB0b3VjaGVkIGl0IHdpdGggdGhlIHRpcHMgb2YgdGhlaXIgZm9yZSBob29mcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2hpbGUgdGhleSB3ZXJlIHRodXMgc3VzcGVuZGVkLCB0aGUgZ3Jvb21zIHdvdWxkIHN0YW5kIGF0IHRoZWlyIHNpZGVzIGFuZCBzdGlyIHRoZW0gdXAgd2l0aCBzaG91dHMgYW5kIHN0cm9rZXMgb2YgdGhlIGdvYWQ7IGFuZCB0aGUgaG9yc2VzLCBmdWxsIG9mIHJhZ2UgYW5kIGZ1cnksIHdvdWxkIGRhbmNlIGFuZCBsZWFwIGFib3V0IG9uIHRoZWlyIGhpbmQgbGVncywgd2hpbGUgd2l0aCB0aGVpciBzd2luZ2luZyBmb3JlIGZlZXQgdGhleSB3b3VsZCBzdHJpa2UgdGhlIGdyb3VuZCBhbmQgdHJ5IHRvIGdldCBhIGZvb3RpbmcgdGhlcmUsIHRodXMgZXhlcnRpbmcgdGhlaXIgd2hvbGUgYm9kaWVzIGFuZCBjb3ZlcmluZyB0aGVtc2VsdmVzIHdpdGggc3dlYXQgYW5kIGZvYW0s4oCUbm8gYmFkIGV4ZXJjaXNlIGVpdGhlciBmb3Igc3BlZWQgb3Igc3RyZW5ndGguPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyBkZXZpY2Ugb2YgRXVtZW5lcyBpcyBkZXNjcmliZWQgYWxzbyBpbiA8YmlibCBkZWZhdWx0PSJOTyI+RGlvZG9ydXMsIHh2aWlpLiA0MiwgMyBmLjwvYmlibD4sIGFuZCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTmVwLiBFdW0uIDUuNCIgdmFsaWQ9InllcyI+TmVwb3MsIDx0aXRsZT5FdW1lbmVzPC90aXRsZT4sIHYuIDQgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiB0aGVpciBiYXJsZXkgd291bGQgYmUgdGhyb3duIHRvIHRoZW0gYm9pbGVkLCB0aGF0IHRoZXkgbWlnaHQgdGhlIHNvb25lciBkaXNwYXRjaCBhbmQgdGhlIGJldHRlciBkaWdlc3QgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIGFsbCBkZXRyaW1lbnRhbCB0byBoaXMgZm9yY2VzIHRodXMgYmVzaWVnZWQgd2FzIHRoZWlyIG5hcnJvdyBxdWFydGVycywgc2luY2UgdGhlaXIgbW92ZW1lbnRzIHdlcmUgY29uZmluZWQgdG8gc21hbGwgaG91c2VzIGFuZCBhIHBsYWNlIG9ubHkgdHdvIGZ1cmxvbmdzIGluIGNpcmN1bWZlcmVuY2UsIHNvIHRoYXQgbmVpdGhlciBtZW4gbm9yIGhvcnNlcyBjb3VsZCBnZXQgZXhlcmNpc2UgYmVmb3JlIGVhdGluZyBvciBiZWluZyBmZWQuIFRoZXJlZm9yZSwgd2lzaGluZyB0byByZW1vdmUgdGhlIHdlYWtuZXNzIGFuZCBsYW5ndW9yIHdpdGggd2hpY2ggdGhlaXIgaW5hY3Rpdml0eSBhZmZsaWN0ZWQgdGhlbSwgYW5kLCBtb3JlIHRoYW4gdGhhdCwgdG8gaGF2ZSB0aGVtIHNvbWVob3cgb3Igb3RoZXIgaW4gdHJhaW5pbmcgZm9yIGZsaWdodCwgaWYgb3Bwb3J0dW5pdHkgc2hvdWxkIG9mZmVyLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIGFzc2lnbmVkIHRoZSBtZW4gYSBob3VzZSwgdGhlIGxhcmdlc3QgaW4gdGhlIHBsYWNlLCBmb3VydGVlbiBjdWJpdHMgbG9uZywgYXMgYSBwbGFjZSB0byB3YWxrLCBvcmRlcmluZyB0aGVtIGxpdHRsZSBieSBsaXR0bGUgdG8gaW5jcmVhc2UgdGhlaXIgcGFjZS4gQW5kIGFzIGZvciB0aGUgaG9yc2VzLCBoZSBoYWQgdGhlbSBhbGwgZ2lydCByb3VuZCB0aGUgbmVjayB3aXRoIGdyZWF0IHN0cmFwcyBmYXN0ZW5lZCB0byB0aGUgcm9vZiwgYW5kIHJhaXNlZCB0aGVtIHBhcnRseSB1cCBpbnRvIHRoZSBhaXIgYnkgbWVhbnMgb2YgcHVsbGV5cywgc28gdGhhdCwgd2hpbGUgd2l0aCB0aGVpciBoaW5kIGxlZ3MgdGhleSByZXN0ZWQgZmlybWx5IHVwb24gdGhlIGdyb3VuZCwgdGhleSBqdXN0IHRvdWNoZWQgaXQgd2l0aCB0aGUgdGlwcyBvZiB0aGVpciBmb3JlIGhvb2ZzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoaWxlIHRoZXkgd2VyZSB0aHVzIHN1c3BlbmRlZCwgdGhlIGdyb29tcyB3b3VsZCBzdGFuZCBhdCB0aGVpciBzaWRlcyBhbmQgc3RpciB0aGVtIHVwIHdpdGggc2hvdXRzIGFuZCBzdHJva2VzIG9mIHRoZSBnb2FkOyBhbmQgdGhlIGhvcnNlcywgZnVsbCBvZiByYWdlIGFuZCBmdXJ5LCB3b3VsZCBkYW5jZSBhbmQgbGVhcCBhYm91dCBvbiB0aGVpciBoaW5kIGxlZ3MsIHdoaWxlIHdpdGggdGhlaXIgc3dpbmdpbmcgZm9yZSBmZWV0IHRoZXkgd291bGQgc3RyaWtlIHRoZSBncm91bmQgYW5kIHRyeSB0byBnZXQgYSBmb290aW5nIHRoZXJlLCB0aHVzIGV4ZXJ0aW5nIHRoZWlyIHdob2xlIGJvZGllcyBhbmQgY292ZXJpbmcgdGhlbXNlbHZlcyB3aXRoIHN3ZWF0IGFuZCBmb2FtLOKAlG5vIGJhZCBleGVyY2lzZSBlaXRoZXIgZm9yIHNwZWVkIG9yIHN0cmVuZ3RoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhpcyBkZXZpY2Ugb2YgRXVtZW5lcyBpcyBkZXNjcmliZWQgYWxzbyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW9kb3J1cywgeHZpaWkuIDQyLCAzIGYuPC9iaWJsPiwgYW5kIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ik5lcC4gRXVtLiA1LjQiIHZhbGlkPSJ5ZXMiPk5lcG9zLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmVzPC90aXRsZT4sIHYuIDQgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlbiB0aGVpciBiYXJsZXkgd291bGQgYmUgdGhyb3duIHRvIHRoZW0gYm9pbGVkLCB0aGF0IHRoZXkgbWlnaHQgdGhlIHNvb25lciBkaXNwYXRjaCBhbmQgdGhlIGJldHRlciBkaWdlc3QgaXQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkRpb2RvcnVzLCB4dmlpaS4gNDIsIDMgZi48L2JpYmw+LCBhbmQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTmVwLiBFdW0uIDUuNCIgdmFsaWQ9InllcyI+TmVwb3MsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV1bWVuZXM8L3RpdGxlPiwgdi4gNCBmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCB2LiA0IGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSwgYXMgdGhlIHNpZWdlIGRyYWdnZWQgYWxvbmcsIEFudGlnb251cyBsZWFybmVkIHRoYXQgQW50aXBhdGVyIGhhZCBkaWVkIGluIE1hY2Vkb25pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMjAgQi5DLiBBZnRlciB0aGUgZGVhdGggb2YgUGVyZGljY2FzIHRoZSBzdXByZW1lIHJlZ2VuY3kgZGV2b2x2ZWQgdXBvbiBBbnRpcGF0ZXIsIGFuZCBoZSByZXRpcmVkIGludG8gTWFjZWRvbmlhIHdpdGggdGhlIHR3byBraW5ncy4gT24gaGlzIGRlYXRoIGhlIGxlZnQgdGhlIHJlZ2VuY3kgdG8gUG9seXNwZXJjaG9uLCBhIGRpc3Rpbmd1aXNoZWQgb2ZmaWNlciBvZiBBbGV4YW5kZXIsIHRvIHRoZSBleGNsdXNpb24gb2YgaGlzIG93biBzb24gQ2Fzc2FuZGVyLjwvbm90ZT4gYW5kIHRoYXQgbWF0dGVycyB3ZXJlIGluIGNvbmZ1c2lvbiBvd2luZyB0byB0aGUgZGlzc2Vuc2lvbiBiZXR3ZWVuIENhc3NhbmRlciBhbmQgUG9seXNwZXJjaG9uLiBIZSB0aGVyZWZvcmUgY2hlcmlzaGVkIG5vIGxvbmdlciBhbiBpbmZlcmlvciBob3BlLCBidXQgZW1icmFjZWQgdGhlIHdob2xlIGVtcGlyZSBpbiBoaXMgc2NoZW1lLCBhbmQgZGVzaXJlZCB0byBoYXZlIEV1bWVuZXMgYXMgZnJpZW5kIGFuZCBoZWxwZXIgaW4gaGlzIHVuZGVydGFraW5ncy4gQWNjb3JkaW5nbHksIGhlIHNlbnQgSGllcm9ueW11cyB0byBtYWtlIGEgdHJlYXR5IHdpdGggRXVtZW5lcywgYW5kIHByb3Bvc2VkIGFuIG9hdGggZm9yIGhpbSB0byB0YWtlLiBUaGlzIG9hdGggRXVtZW5lcyBjb3JyZWN0ZWQgYW5kIHRoZW4gc3VibWl0dGVkIGl0IHRvIHRoZSBNYWNlZG9uaWFucyB3aG8gd2VyZSBiZXNpZWdpbmcgaGltLCByZXF1ZXN0aW5nIHRoZW0gdG8gZGVjaWRlIHdoaWNoIHdhcyB0aGUganVzdGVyIGZvcm0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cywgbmFtZWx5LCBmb3IgZm9ybSdzIHNha2UsIGhhZCBtZW50aW9uZWQgdGhlIGtpbmdzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSBub3RlcyBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAzLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAxPC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy43IiB2YWxpZD0ieWVzIj43PC9iaWJsPi4gT2x5bXBpYXMgd2FzIHRoZSBxdWVlbi1tb3RoZXIsIHRoZSB3aWRvdyBvZiBQaGlsaXAsIG1vdGhlciBvZiBBbGV4YW5kZXIuPC9ub3RlPiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBvYXRoLCBhbmQgdGhlbiBoYWQgbWFkZSB0aGUgcmVzdCBvZiBpdCByZWZlciB0byBoaW1zZWxmOyBidXQgRXVtZW5lcyB3cm90ZSBhdCB0aGUgaGVhZCBvZiB0aGUgb2F0aCB0aGUgbmFtZXMgb2YgT2x5bXBpYXMgYW5kIHRoZSBraW5ncywgYW5kIHByb3Bvc2VkIHRvIHN3ZWFyIGZlYWx0eSwgbm90IHRvIEFudGlnb251cyBhbG9uZSwgYnV0IGFsc28gdG8gT2x5bXBpYXMgYW5kIHRoZSBraW5ncywgYW5kIHRvIGhhdmUgdGhlIHNhbWUgZW5lbWllcyBhbmQgZnJpZW5kcyBhcyB0aGV5LiBUaGlzIHdhcyB0aG91Z2h0IHRvIGJlIG1vcmUganVzdCwgYW5kIHRoZSBNYWNlZG9uaWFucyBhY2NvcmRpbmdseSBhZG1pbmlzdGVyZWQgdGhpcyBvYXRoIHRvIEV1bWVuZXMsIHJhaXNlZCB0aGUgc2llZ2UsIGFuZCBzZW50IHRvIEFudGlnb251cywgdGhhdCBoZSB0b28sIG9uIGhpcyBwYXJ0LCBtaWdodCB0YWtlIHRoZSBvYXRoIHRvIEV1bWVuZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSwgYXMgdGhlIHNpZWdlIGRyYWdnZWQgYWxvbmcsIEFudGlnb251cyBsZWFybmVkIHRoYXQgQW50aXBhdGVyIGhhZCBkaWVkIGluIE1hY2Vkb25pYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyMCBCLkMuIEFmdGVyIHRoZSBkZWF0aCBvZiBQZXJkaWNjYXMgdGhlIHN1cHJlbWUgcmVnZW5jeSBkZXZvbHZlZCB1cG9uIEFudGlwYXRlciwgYW5kIGhlIHJldGlyZWQgaW50byBNYWNlZG9uaWEgd2l0aCB0aGUgdHdvIGtpbmdzLiBPbiBoaXMgZGVhdGggaGUgbGVmdCB0aGUgcmVnZW5jeSB0byBQb2x5c3BlcmNob24sIGEgZGlzdGluZ3Vpc2hlZCBvZmZpY2VyIG9mIEFsZXhhbmRlciwgdG8gdGhlIGV4Y2x1c2lvbiBvZiBoaXMgb3duIHNvbiBDYXNzYW5kZXIuPC9ub3RlPiBhbmQgdGhhdCBtYXR0ZXJzIHdlcmUgaW4gY29uZnVzaW9uIG93aW5nIHRvIHRoZSBkaXNzZW5zaW9uIGJldHdlZW4gQ2Fzc2FuZGVyIGFuZCBQb2x5c3BlcmNob24uIEhlIHRoZXJlZm9yZSBjaGVyaXNoZWQgbm8gbG9uZ2VyIGFuIGluZmVyaW9yIGhvcGUsIGJ1dCBlbWJyYWNlZCB0aGUgd2hvbGUgZW1waXJlIGluIGhpcyBzY2hlbWUsIGFuZCBkZXNpcmVkIHRvIGhhdmUgRXVtZW5lcyBhcyBmcmllbmQgYW5kIGhlbHBlciBpbiBoaXMgdW5kZXJ0YWtpbmdzLiBBY2NvcmRpbmdseSwgaGUgc2VudCBIaWVyb255bXVzIHRvIG1ha2UgYSB0cmVhdHkgd2l0aCBFdW1lbmVzLCBhbmQgcHJvcG9zZWQgYW4gb2F0aCBmb3IgaGltIHRvIHRha2UuIFRoaXMgb2F0aCBFdW1lbmVzIGNvcnJlY3RlZCBhbmQgdGhlbiBzdWJtaXR0ZWQgaXQgdG8gdGhlIE1hY2Vkb25pYW5zIHdobyB3ZXJlIGJlc2llZ2luZyBoaW0sIHJlcXVlc3RpbmcgdGhlbSB0byBkZWNpZGUgd2hpY2ggd2FzIHRoZSBqdXN0ZXIgZm9ybS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cywgbmFtZWx5LCBmb3IgZm9ybSdzIHNha2UsIGhhZCBtZW50aW9uZWQgdGhlIGtpbmdzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGVzIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy43IiB2YWxpZD0ieWVzIj43PC9iaWJsPi4gT2x5bXBpYXMgd2FzIHRoZSBxdWVlbi1tb3RoZXIsIHRoZSB3aWRvdyBvZiBQaGlsaXAsIG1vdGhlciBvZiBBbGV4YW5kZXIuPC9ub3RlPiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBvYXRoLCBhbmQgdGhlbiBoYWQgbWFkZSB0aGUgcmVzdCBvZiBpdCByZWZlciB0byBoaW1zZWxmOyBidXQgRXVtZW5lcyB3cm90ZSBhdCB0aGUgaGVhZCBvZiB0aGUgb2F0aCB0aGUgbmFtZXMgb2YgT2x5bXBpYXMgYW5kIHRoZSBraW5ncywgYW5kIHByb3Bvc2VkIHRvIHN3ZWFyIGZlYWx0eSwgbm90IHRvIEFudGlnb251cyBhbG9uZSwgYnV0IGFsc28gdG8gT2x5bXBpYXMgYW5kIHRoZSBraW5ncywgYW5kIHRvIGhhdmUgdGhlIHNhbWUgZW5lbWllcyBhbmQgZnJpZW5kcyBhcyB0aGV5LiBUaGlzIHdhcyB0aG91Z2h0IHRvIGJlIG1vcmUganVzdCwgYW5kIHRoZSBNYWNlZG9uaWFucyBhY2NvcmRpbmdseSBhZG1pbmlzdGVyZWQgdGhpcyBvYXRoIHRvIEV1bWVuZXMsIHJhaXNlZCB0aGUgc2llZ2UsIGFuZCBzZW50IHRvIEFudGlnb251cywgdGhhdCBoZSB0b28sIG9uIGhpcyBwYXJ0LCBtaWdodCB0YWtlIHRoZSBvYXRoIHRvIEV1bWVuZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy43IiB2YWxpZD0ieWVzIj43PC9iaWJsPi4gT2x5bXBpYXMgd2FzIHRoZSBxdWVlbi1tb3RoZXIsIHRoZSB3aWRvdyBvZiBQaGlsaXAsIG1vdGhlciBvZiBBbGV4YW5kZXIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBob3dldmVyLCBFdW1lbmVzIGdhdmUgYmFjayBhbGwgdGhlIENhcHBhZG9jaWFuIGhvc3RhZ2VzIHdob20gaGUgd2FzIGhvbGRpbmcgaW4gTm9yYSwgYW5kIHJlY2VpdmVkIGZyb20gdGhvc2Ugd2hvIGNhbWUgZm9yIHRoZW0gaG9yc2VzLCBiZWFzdHMgb2YgYnVyZGVuLCBhbmQgdGVudHMuIEhlIGFsc28gY29sbGVjdGVkIGFsbCB0aGUgc29sZGllcnMgd2hvIGhhZCBiZWNvbWUgc2NhdHRlcmVkIGJ5IGhpcyBmbGlnaHQgYW5kIHdlcmUgbm93IHdhbmRlcmluZyBhYm91dCB0aGUgY291bnRyeSwgc28gdGhhdCBoZSBoYWQgYSBmb3JjZSBvZiBhbG1vc3QgYSB0aG91c2FuZCBob3JzZW1lbi4gV2l0aCB0aGVzZSBoZSBzZXQgb3V0IGluIGZsaWdodCwgYmVpbmcgcmlnaHRseSBpbiBmZWFyIG9mIEFudGlnb251cy4gRm9yIEFudGlnb251cyBub3Qgb25seSBvcmRlcmVkIGhpcyBNYWNlZG9uaWFucyB0byB3YWxsIGhpbSBpbiBhZ2FpbiBhbmQgYmVzaWVnZSBoaW0sIGJ1dCBhbHNvIHdyb3RlIGJhY2sgYml0dGVyIHJlcHJvYWNoZXMgdG8gdGhlbSBmb3IgYWNjZXB0aW5nIHRoZSBjb3JyZWN0aW9uIG9mIHRoZSBvYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSwgaG93ZXZlciwgRXVtZW5lcyBnYXZlIGJhY2sgYWxsIHRoZSBDYXBwYWRvY2lhbiBob3N0YWdlcyB3aG9tIGhlIHdhcyBob2xkaW5nIGluIE5vcmEsIGFuZCByZWNlaXZlZCBmcm9tIHRob3NlIHdobyBjYW1lIGZvciB0aGVtIGhvcnNlcywgYmVhc3RzIG9mIGJ1cmRlbiwgYW5kIHRlbnRzLiBIZSBhbHNvIGNvbGxlY3RlZCBhbGwgdGhlIHNvbGRpZXJzIHdobyBoYWQgYmVjb21lIHNjYXR0ZXJlZCBieSBoaXMgZmxpZ2h0IGFuZCB3ZXJlIG5vdyB3YW5kZXJpbmcgYWJvdXQgdGhlIGNvdW50cnksIHNvIHRoYXQgaGUgaGFkIGEgZm9yY2Ugb2YgYWxtb3N0IGEgdGhvdXNhbmQgaG9yc2VtZW4uIFdpdGggdGhlc2UgaGUgc2V0IG91dCBpbiBmbGlnaHQsIGJlaW5nIHJpZ2h0bHkgaW4gZmVhciBvZiBBbnRpZ29udXMuIEZvciBBbnRpZ29udXMgbm90IG9ubHkgb3JkZXJlZCBoaXMgTWFjZWRvbmlhbnMgdG8gd2FsbCBoaW0gaW4gYWdhaW4gYW5kIGJlc2llZ2UgaGltLCBidXQgYWxzbyB3cm90ZSBiYWNrIGJpdHRlciByZXByb2FjaGVzIHRvIHRoZW0gZm9yIGFjY2VwdGluZyB0aGUgY29ycmVjdGlvbiBvZiB0aGUgb2F0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgRXVtZW5lcyB3YXMgaW4gZmxpZ2h0LCBsZXR0ZXJzIHdlcmUgYnJvdWdodCB0byBoaW0gZnJvbSB0aG9zZSBpbiBNYWNlZG9uaWEgd2hvIGZlYXJlZCB0aGUgZ3Jvd2luZyBwb3dlciBvZiBBbnRpZ29udXMuIE9seW1waWFzIGludml0ZWQgaGltIHRvIGNvbWUgYW5kIHRha2UgY2hhcmdlIG9mIEFsZXhhbmRlcidzIGxpdHRsZSBzb24gYW5kIHJlYXIgaGltLCBmZWVsaW5nIHRoYXQgcGxvdHMgd2VyZSBsYWlkIGFnYWluc3QgaGlzIGxpZmU7IFBvbHlzcGVyY2hvbiBhbmQgUGhpbGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGhpbGlwIEFycmhpZGFldXMgKHNlZSB0aGUgbm90ZSBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAzLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAxPC9iaWJsPikuPC9ub3RlPiB0aGUga2luZyBvcmRlcmVkIGhpbSwgYXMgY29tbWFuZGVyIG9mIHRoZSBmb3JjZXMgaW4gQ2FwcGFkb2NpYSwgdG8gd2FnZSB3YXIgdXBvbiBBbnRpZ29udXMsIHRvIHRha2UgZml2ZSBodW5kcmVkIHRhbGVudHMgb2YgdGhlIHRyZWFzdXJlIGF0IFF1aW5kYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9yIEN5aW5kYSwgYmV0dGVyIGtub3duIGFzIEFuYXphcmJ1cywgYSBzdHJvbmdob2xkIGluIENpbGljaWEgd2hpdGhlciBBbnRpZ2VuZXMgYW5kIFRldXRhbXVzIGhhZCBicm91Z2h0IHRoZSByb3lhbCB0cmVhc3VyZSBmcm9tIFN1c2EuPC9ub3RlPiBpbiByZXBhcmF0aW9uIG9mIGhpcyBvd24gbG9zc2VzLCBhbmQgdG8gdXNlIGFzIG11Y2ggb2YgaXQgYXMgaGUgd2lzaGVkIGZvciB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhhZCBhbHNvIHdyaXR0ZW4gY29uY2VybmluZyB0aGVzZSBtYXR0ZXJzIHRvIEFudGlnZW5lcyBhbmQgVGV1dGFtdXMsIHRoZSBjb21tYW5kZXJzIG9mIHRoZSBTaWx2ZXItc2hpZWxkcy4gVGhlc2UgbWVuLCBvbiByZWNlaXZpbmcgdGhlaXIgbGV0dGVycywgb3N0ZW5zaWJseSB0cmVhdGVkIEV1bWVuZXMgd2l0aCBmcmllbmRsaW5lc3MsIGJ1dCB3ZXJlIHBsYWlubHkgZnVsbCBvZiBlbnZ5IGFuZCBjb250ZW50aW91c25lc3MsIGRpc2RhaW5pbmcgdG8gYmUgc2Vjb25kIHRvIGhpbS4gRXVtZW5lcyB0aGVyZWZvcmUgYWxsYXllZCB0aGVpciBlbnZ5IGJ5IG5vdCB0YWtpbmcgdGhlIG1vbmV5LCBhbGxlZ2luZyB0aGF0IGhlIGhhZCBubyBuZWVkIG9mIGl0OyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSB1cG9uIHRoZWlyIGxvdmUgb2YgY29udGVudGlvbiBhbmQgbG92ZSBvZiBjb21tYW5kLCBzZWVpbmcgdGhhdCB0aGV5IHdlcmUgYXMgdW5hYmxlIHRvIGxlYWQgYXMgdGhleSB3ZXJlIHVud2lsbGluZyB0byBmb2xsb3csIGhlIGJyb3VnaHQgc3VwZXJzdGl0aW9uIHRvIGJlYXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgRXVtZW5lcyB3YXMgaW4gZmxpZ2h0LCBsZXR0ZXJzIHdlcmUgYnJvdWdodCB0byBoaW0gZnJvbSB0aG9zZSBpbiBNYWNlZG9uaWEgd2hvIGZlYXJlZCB0aGUgZ3Jvd2luZyBwb3dlciBvZiBBbnRpZ29udXMuIE9seW1waWFzIGludml0ZWQgaGltIHRvIGNvbWUgYW5kIHRha2UgY2hhcmdlIG9mIEFsZXhhbmRlcidzIGxpdHRsZSBzb24gYW5kIHJlYXIgaGltLCBmZWVsaW5nIHRoYXQgcGxvdHMgd2VyZSBsYWlkIGFnYWluc3QgaGlzIGxpZmU7IFBvbHlzcGVyY2hvbiBhbmQgUGhpbGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QaGlsaXAgQXJyaGlkYWV1cyAoc2VlIHRoZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEV1bS4gMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMTwvYmlibD4pLjwvbm90ZT4gdGhlIGtpbmcgb3JkZXJlZCBoaW0sIGFzIGNvbW1hbmRlciBvZiB0aGUgZm9yY2VzIGluIENhcHBhZG9jaWEsIHRvIHdhZ2Ugd2FyIHVwb24gQW50aWdvbnVzLCB0byB0YWtlIGZpdmUgaHVuZHJlZCB0YWxlbnRzIG9mIHRoZSB0cmVhc3VyZSBhdCBRdWluZGE8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDE8L2JpYmw+KS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9yIEN5aW5kYSwgYmV0dGVyIGtub3duIGFzIEFuYXphcmJ1cywgYSBzdHJvbmdob2xkIGluIENpbGljaWEgd2hpdGhlciBBbnRpZ2VuZXMgYW5kIFRldXRhbXVzIGhhZCBicm91Z2h0IHRoZSByb3lhbCB0cmVhc3VyZSBmcm9tIFN1c2EuPC9ub3RlPiBpbiByZXBhcmF0aW9uIG9mIGhpcyBvd24gbG9zc2VzLCBhbmQgdG8gdXNlIGFzIG11Y2ggb2YgaXQgYXMgaGUgd2lzaGVkIGZvciB0aGUgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkIGFsc28gd3JpdHRlbiBjb25jZXJuaW5nIHRoZXNlIG1hdHRlcnMgdG8gQW50aWdlbmVzIGFuZCBUZXV0YW11cywgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIFNpbHZlci1zaGllbGRzLiBUaGVzZSBtZW4sIG9uIHJlY2VpdmluZyB0aGVpciBsZXR0ZXJzLCBvc3RlbnNpYmx5IHRyZWF0ZWQgRXVtZW5lcyB3aXRoIGZyaWVuZGxpbmVzcywgYnV0IHdlcmUgcGxhaW5seSBmdWxsIG9mIGVudnkgYW5kIGNvbnRlbnRpb3VzbmVzcywgZGlzZGFpbmluZyB0byBiZSBzZWNvbmQgdG8gaGltLiBFdW1lbmVzIHRoZXJlZm9yZSBhbGxheWVkIHRoZWlyIGVudnkgYnkgbm90IHRha2luZyB0aGUgbW9uZXksIGFsbGVnaW5nIHRoYXQgaGUgaGFkIG5vIG5lZWQgb2YgaXQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHVwb24gdGhlaXIgbG92ZSBvZiBjb250ZW50aW9uIGFuZCBsb3ZlIG9mIGNvbW1hbmQsIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBhcyB1bmFibGUgdG8gbGVhZCBhcyB0aGV5IHdlcmUgdW53aWxsaW5nIHRvIGZvbGxvdywgaGUgYnJvdWdodCBzdXBlcnN0aXRpb24gdG8gYmVhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IZSBzYWlkLCBuYW1lbHksIHRoYXQgQWxleGFuZGVyIGhhZCBhcHBlYXJlZCB0byBoaW0gaW4gYSBkcmVhbSwgaGFkIHNob3duIGhpbSBhIHRlbnQgYXJyYXllZCBpbiByb3lhbCBmYXNoaW9uIHdpdGggYSB0aHJvbmUgc3RhbmRpbmcgaW4gaXQsIGFuZCBoYWQgdGhlbiBzYWlkIHRoYXQgaWYgdGhleSBoZWxkIHRoZWlyIGNvdW5jaWxzIGFuZCB0cmFuc2FjdGVkIHRoZWlyIGJ1c2luZXNzIHRoZXJlLCBoZSBoaW1zZWxmIHdvdWxkIGJlIHByZXNlbnQgYW5kIHdvdWxkIGFzc2lzdCB0aGVtIGluIGV2ZXJ5IHBsYW4gYW5kIGVudGVycHJpc2Ugd2hpY2ggdGhleSB1bmRlcnRvb2sgaW4gaGlzIG5hbWUuIEV1bWVuZXMgZWFzaWx5IGNvbnZpbmNlZCBBbnRpZ2VuZXMgYW5kIFRldXRhbXVzIHRoYXQgdGhpcyB3YXMgdHJ1ZS4gVGhleSB3ZXJlIHVud2lsbGluZyB0byBnbyB0byBoaW0sIGFuZCBoZSBoaW1zZWxmIHRob3VnaHQgaXQgdW5kaWduaWZpZWQgdG8gYmUgc2VlbiBhdCB0aGUgZG9vcnMgb2Ygb3RoZXJzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZXkgZXJlY3RlZCBhIHJveWFsIHRlbnQsIGFuZCBhIHRocm9uZSBpbiBpdCB3aGljaCB0aGV5IGRlZGljYXRlZCB0byBBbGV4YW5kZXIsIGFuZCB0aGVyZSB0aGV5IG1ldCBmb3IgZGVsaWJlcmF0aW9uIG9uIG1hdHRlcnMgb2YgaGlnaGVzdCBpbXBvcnRhbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZXkgZXJlY3RlZCBhIHJveWFsIHRlbnQsIGFuZCBhIHRocm9uZSBpbiBpdCB3aGljaCB0aGV5IGRlZGljYXRlZCB0byBBbGV4YW5kZXIsIGFuZCB0aGVyZSB0aGV5IG1ldCBmb3IgZGVsaWJlcmF0aW9uIG9uIG1hdHRlcnMgb2YgaGlnaGVzdCBpbXBvcnRhbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBub3csIGFzIHRoZXkgYWR2YW5jZWQgaW50byB0aGUgaW50ZXJpb3Igb2YgdGhlIGNvdW50cnksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMTcgQi5DLiwgYWdhaW5zdCBBbnRpZ29udXMsIHdobyB3YXMgaW4gTWVzb3BvdGFtaWEuIEhlIGhhZCByZWNlaXZlZCB0aGUgc2F0cmFweSBvZiBTdXNpYW5hLjwvbm90ZT4gUGV1Y2VzdGFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25lIG9mIHRoZSBtb3N0IGRpc3Rpbmd1aXNoZWQgb2ZmaWNlcnMgb2YgQWxleGFuZGVyLCB3aG8gYmFkIGJlZW4gbWFkZSBzYXRyYXAgb2YgUGVyc2lhIGR1cmluZyBBbGV4YW5kZXIncyBsaWZldGltZS48L25vdGU+IHdobyB3YXMgYSBmcmllbmQgb2YgRXVtZW5lcywgbWV0IHRoZW0gd2l0aCB0aGUgb3RoZXIgc2F0cmFwcywgYW5kIHRoZXkgam9pbmVkIHRoZWlyIGZvcmNlcywgc28gdGhhdCB0aGUgbnVtYmVyIG9mIHRoZWlyIG1lbiBhbmQgdGhlIHNwbGVuZG91ciBvZiB0aGVpciBlcXVpcG1lbnQgcmFpc2VkIHRoZSBzcGlyaXRzIG9mIHRoZSBNYWNlZG9uaWFucy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxlYWRlcnMgdGhlbXNlbHZlcyBoYWQgYmVlbiBtYWRlIHVubWFuYWdlYWJsZSBieSB0aGVpciBleGVyY2lzZSBvZiBwb3dlciwgYW5kIGVmZmVtaW5hdGUgYnkgdGhlaXIgbW9kZSBvZiBsaWZlLCBhZnRlciB0aGUgZGVhdGggb2YgQWxleGFuZGVyLCBhbmQgdGhleSBicm91Z2h0IGludG8gY29sbGlzaW9uIHNwaXJpdHMgdGhhdCB3ZXJlIHR5cmFubmljYWwgYW5kIGZlZCBvbiBiYXJiYXJpYyBhcnJvZ2FuY2UsIHNvIHRoYXQgdGhleSB3ZXJlIGhhcnNoIHRvd2FyZHMgb25lIGFub3RoZXIgYW5kIGhhcmQgdG8gcmVjb25jaWxlLiBNb3Jlb3ZlciwgYnkgZmxhdHRlcmluZyB0aGUgTWFjZWRvbmlhbiBzb2xkaWVyeSBleHRyYXZhZ2FudGx5IGFuZCBsYXZpc2hpbmcgbW9uZXkgdXBvbiB0aGVtIGZvciBiYW5xdWV0cyBhbmQgc2FjcmlmaWNlcywgaW4gYSBzaG9ydCB0aW1lIHRoZXkgbWFkZSB0aGUgY2FtcCBhIGhvc3RlbHJ5IG9mIGZlc3RhbCBwcm9kaWdhbGl0eSwgYW5kIHRoZSBhcm15IGEgbW9iIHRvIGJlIGNham9sZWQgaW50byB0aGUgZWxlY3Rpb24gb2YgaXRzIGdlbmVyYWxzLCBhcyBpbiBhIGRlbW9jcmFjeS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RXVtZW5lcywgaG93ZXZlciwgcGVyY2VpdmluZyB0aGF0LCB3aGlsZSB0aGV5IGRlc3Bpc2VkIG9uZSBhbm90aGVyLCB0aGV5IGZlYXJlZCBoaW0gYW5kIHdlcmUgb24gdGhlIHdhdGNoIGZvciBhbiBvcHBvcnR1bml0eSB0byBraWxsIGhpbSwgcHJldGVuZGVkIHRvIGJlIGluIG5lZWQgb2YgbW9uZXksIGFuZCBnb3QgdG9nZXRoZXIgbWFueSB0YWxlbnRzIGJ5IGJvcnJvd2luZyBmcm9tIHRob3NlIHdobyBoYXRlZCBoaW0gbW9zdCwgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IHB1dCBjb25maWRlbmNlIGluIGhpbSBhbmQgcmVmcmFpbiBmcm9tIGtpbGxpbmcgaGltIG91dCBvZiByZWdhcmQgZm9yIHRoZSBtb25leSB0aGV5IGhhZCBsZW50IGhpbS4gVGhlIGNvbnNlcXVlbmNlIHdhcyB0aGF0IHRoZSB3ZWFsdGggb2Ygb3RoZXJzIHdhcyBoaXMgYm9keS1ndWFyZCwgYW5kIHRoYXQsIHdoZXJlYXMgbWVuIGdlbmVyYWxseSBwcmVzZXJ2ZSB0aGVpciBsaXZlcyBieSBnaXZpbmcsIGhlIGFsb25lIHdvbiBzYWZldHkgYnkgcmVjZWl2aW5nLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzE3IEIuQy4sIGFnYWluc3QgQW50aWdvbnVzLCB3aG8gd2FzIGluIE1lc29wb3RhbWlhLiBIZSBoYWQgcmVjZWl2ZWQgdGhlIHNhdHJhcHkgb2YgU3VzaWFuYS48L25vdGU+IFBldWNlc3Rhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSBvZiB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIG9mZmljZXJzIG9mIEFsZXhhbmRlciwgd2hvIGJhZCBiZWVuIG1hZGUgc2F0cmFwIG9mIFBlcnNpYSBkdXJpbmcgQWxleGFuZGVyJ3MgbGlmZXRpbWUuPC9ub3RlPiB3aG8gd2FzIGEgZnJpZW5kIG9mIEV1bWVuZXMsIG1ldCB0aGVtIHdpdGggdGhlIG90aGVyIHNhdHJhcHMsIGFuZCB0aGV5IGpvaW5lZCB0aGVpciBmb3JjZXMsIHNvIHRoYXQgdGhlIG51bWJlciBvZiB0aGVpciBtZW4gYW5kIHRoZSBzcGxlbmRvdXIgb2YgdGhlaXIgZXF1aXBtZW50IHJhaXNlZCB0aGUgc3Bpcml0cyBvZiB0aGUgTWFjZWRvbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbGVhZGVycyB0aGVtc2VsdmVzIGhhZCBiZWVuIG1hZGUgdW5tYW5hZ2VhYmxlIGJ5IHRoZWlyIGV4ZXJjaXNlIG9mIHBvd2VyLCBhbmQgZWZmZW1pbmF0ZSBieSB0aGVpciBtb2RlIG9mIGxpZmUsIGFmdGVyIHRoZSBkZWF0aCBvZiBBbGV4YW5kZXIsIGFuZCB0aGV5IGJyb3VnaHQgaW50byBjb2xsaXNpb24gc3Bpcml0cyB0aGF0IHdlcmUgdHlyYW5uaWNhbCBhbmQgZmVkIG9uIGJhcmJhcmljIGFycm9nYW5jZSwgc28gdGhhdCB0aGV5IHdlcmUgaGFyc2ggdG93YXJkcyBvbmUgYW5vdGhlciBhbmQgaGFyZCB0byByZWNvbmNpbGUuIE1vcmVvdmVyLCBieSBmbGF0dGVyaW5nIHRoZSBNYWNlZG9uaWFuIHNvbGRpZXJ5IGV4dHJhdmFnYW50bHkgYW5kIGxhdmlzaGluZyBtb25leSB1cG9uIHRoZW0gZm9yIGJhbnF1ZXRzIGFuZCBzYWNyaWZpY2VzLCBpbiBhIHNob3J0IHRpbWUgdGhleSBtYWRlIHRoZSBjYW1wIGEgaG9zdGVscnkgb2YgZmVzdGFsIHByb2RpZ2FsaXR5LCBhbmQgdGhlIGFybXkgYSBtb2IgdG8gYmUgY2Fqb2xlZCBpbnRvIHRoZSBlbGVjdGlvbiBvZiBpdHMgZ2VuZXJhbHMsIGFzIGluIGEgZGVtb2NyYWN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkV1bWVuZXMsIGhvd2V2ZXIsIHBlcmNlaXZpbmcgdGhhdCwgd2hpbGUgdGhleSBkZXNwaXNlZCBvbmUgYW5vdGhlciwgdGhleSBmZWFyZWQgaGltIGFuZCB3ZXJlIG9uIHRoZSB3YXRjaCBmb3IgYW4gb3Bwb3J0dW5pdHkgdG8ga2lsbCBoaW0sIHByZXRlbmRlZCB0byBiZSBpbiBuZWVkIG9mIG1vbmV5LCBhbmQgZ290IHRvZ2V0aGVyIG1hbnkgdGFsZW50cyBieSBib3Jyb3dpbmcgZnJvbSB0aG9zZSB3aG8gaGF0ZWQgaGltIG1vc3QsIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBwdXQgY29uZmlkZW5jZSBpbiBoaW0gYW5kIHJlZnJhaW4gZnJvbSBraWxsaW5nIGhpbSBvdXQgb2YgcmVnYXJkIGZvciB0aGUgbW9uZXkgdGhleSBoYWQgbGVudCBoaW0uIFRoZSBjb25zZXF1ZW5jZSB3YXMgdGhhdCB0aGUgd2VhbHRoIG9mIG90aGVycyB3YXMgaGlzIGJvZHktZ3VhcmQsIGFuZCB0aGF0LCB3aGVyZWFzIG1lbiBnZW5lcmFsbHkgcHJlc2VydmUgdGhlaXIgbGl2ZXMgYnkgZ2l2aW5nLCBoZSBhbG9uZSB3b24gc2FmZXR5IGJ5IHJlY2VpdmluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIE1hY2Vkb25pYW5zLCBob3dldmVyLCB3aGlsZSB0aGVyZSB3YXMgbm8gZGFuZ2VyLCBjb250aW51ZWQgdG8gdGFrZSBnaWZ0cyBmcm9tIHRoZWlyIGNvcnJ1cHRlcnMsIGFuZCBodW5nIGFib3V0IHRoZSBkb29ycyBvZiB0aGVzZSBtZW4sIHdobyBub3cgaGFkIGJvZHktZ3VhcmRzIGFuZCB3YW50ZWQgdG8gYmUgZ2VuZXJhbHMuIEJ1dCB3aGVuIEFudGlnb251cyBlbmNhbXBlZCBuZWFyIHRoZW0gd2l0aCBhIGxhcmdlIGZvcmNlIGFuZCB0aGUgc2l0dWF0aW9uIGNhbGxlZCBhbG91ZCBmb3IgYSByZWFsIGdlbmVyYWwsIG5vdCBvbmx5IGRpZCB0aGUgY29tbW9uIHNvbGRpZXJzIGF0dGFjaCB0aGVtc2VsdmVzIHRvIEV1bWVuZXMsIGJ1dCBhbHNvIHRob3NlIHdobyB3ZXJlIGdyZWF0IG9ubHkgd2hlbiBwZWFjZSBhbmQgbHV4dXJ5IHByZXZhaWxlZCwgZXZlcnkgbWFuIG9mIHRoZW0sIGdhdmUgaW4gdG8gaGltIGFuZCBjb25zZW50ZWQgd2l0aG91dCBhIG11cm11ciB0byBob2xkIHRoZSBwb3N0IHdoaWNoIGhlIGdhdmUgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCBpbmRlZWQsIHdoZW4gQW50aWdvbnVzIHRyaWVkIHRvIGNyb3NzIHRoZSByaXZlciBQYXNpdGlncmlzLCBub25lIG9mIHRoZSBvdGhlciBjb21tYW5kZXJzIHdobyB3ZXJlIHdhdGNoaW5nIGhpcyBtb3ZlbWVudHMgd2FzIGV2ZW4gYXdhcmUgb2YgaXQsIGJ1dCBFdW1lbmVzLCBhbmQgaGUgYWxvbmUsIHdpdGhzdG9vZCBoaW0sIGpvaW5lZCBiYXR0bGUgd2l0aCBoaW0sIHNsZXcgbWFueSBvZiBoaXMgbWVuIGFuZCBmaWxsZWQgdGhlIHN0cmVhbSB3aXRoIGRlYWQgYm9kaWVzLCBhbmQgdG9vayBmb3VyIHRob3VzYW5kIHByaXNvbmVycy4gQnV0IG1vc3Qgb2YgYWxsIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgc2lja25lc3MgdGhhdCBiZWZlbGwgaGltIGRpZCB0aGUgTWFjZWRvbmlhbnMgbWFrZSBpdCBjbGVhciB0aGF0IHRoZXkgY29uc2lkZXJlZCB0aGUgb3RoZXJzIGFibGUgdG8gZmVhc3QgdGhlbSBzcGxlbmRpZGx5IGFuZCBob2xkIGhpZ2ggZmVzdGl2YWwsIGJ1dCBoaW0gYWxvbmUgY2FwYWJsZSBvZiB3aWVsZGluZyBjb21tYW5kIGFuZCB3YWdpbmcgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgUGV1Y2VzdGFzLCBoYXZpbmcgZmVhc3RlZCB0aGVtIHNwbGVuZGlkbHkgaW4gUGVyc2lzLCBhbmQgaGF2aW5nIGdpdmVuIGV2ZXJ5IG1hbiBhIHZpY3RpbSBmb3Igc2FjcmlmaWNlLCB3YXMgZXhwZWN0aW5nIHRvIGJlIGNoaWVmIGluIGNvbW1hbmQ7IGFuZCBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIGFzIHRoZSBzb2xkaWVycyB3ZXJlIG1hcmNoaW5nIGFnYWluc3QgdGhlIGVuZW15LCBpdCBjaGFuY2VkIHRoYXQgRXVtZW5lcywgaW4gY29uc2VxdWVuY2Ugb2YgYSBkYW5nZXJvdXMgaWxsbmVzcywgd2FzIGJlaW5nIGNhcnJpZWQgYWxvbmcgaW4gYSBsaXR0ZXIgb3V0c2lkZSB0aGUgcmFua3MsIHdoZXJlIGl0IHdhcyBxdWlldCBhbmQgaGlzIHNsZWVwIHdvdWxkIG5vdCBiZSBicm9rZW4uIEJ1dCBhZnRlciB0aGV5IGhhZCBhZHZhbmNlZCBhIGxpdHRsZSB3YXksIHN1ZGRlbmx5IHRoZSBlbmVteSB3ZXJlIHNlZW4gcGFzc2luZyBvdmVyIHNvbWUgaGlsbHMgYW5kIGRlc2NlbmRpbmcgaW50byB0aGUgcGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBnbGVhbXMgb2YgdGhlaXIgZ29sZGVuIGFybW91ciBpbiB0aGUgc3VuIGZsYXNoZWQgZG93biBmcm9tIHRoZSBoZWlnaHRzIGFzIHRoZXkgbWFyY2hlZCBhbG9uZyBpbiBjbG9zZSBmb3JtYXRpb24sIGFuZCBvbiB0aGUgYmFja3Mgb2YgdGhlIGVsZXBoYW50cyB0aGUgdG93ZXJzIGFuZCBwdXJwbGUgdHJhcHBpbmdzIHdlcmUgc2Vlbiwgd2hpY2ggd2FzIHRoZWlyIGFycmF5IHdoZW4gZ29pbmcgaW50byBiYXR0bGUuIEFjY29yZGluZ2x5LCB0aGUgZm9yZW1vc3QgTWFjZWRvbmlhbnMgaGFsdGVkIGluIHRoZWlyIG1hcmNoIGFuZCBjYWxsZWQgd2l0aCBsb3VkIGNyaWVzIGZvciBFdW1lbmVzLCBkZWNsYXJpbmcgdGhhdCB0aGV5IHdvdWxkIG5vdCBnbyBmb3J3YXJkIHVubGVzcyBoZSB3YXMgaW4gY29tbWFuZCBvZiB0aGVtOyBhbmQgZ3JvdW5kaW5nIHRoZWlyIGFybXMgdGhleSBwYXNzZWQgd29yZCB0byBvbmUgYW5vdGhlciB0byB3YWl0LCBhbmQgdG8gdGhlaXIgbGVhZGVycyB0byBrZWVwIHN0aWxsLCBhbmQgd2l0aG91dCBFdW1lbmVzIG5vdCB0byBnaXZlIGJhdHRsZSBvciBydW4gYW55IGhhemFyZCBldmVuIHdpdGggdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEV1bWVuZXMgaGVhcmQgb2YgdGhpcywgaGUgcXVpY2tlbmVkIHRoZSBwYWNlIG9mIGhpcyBiZWFyZXJzIHRvIGEgcnVuIGFuZCBjYW1lIHRvIHRoZW0sIGFuZCBsaWZ0aW5nIHVwIHRoZSBjdXJ0YWlucyBvZiBoaXMgbGl0dGVyIG9uIGVpdGhlciBzaWRlLCBzdHJldGNoZWQgZm9ydGggaGlzIGhhbmQgaW4gZGVsaWdodC4gQW5kIHdoZW4gdGhlIHNvbGRpZXJzIHNhdyBoaW0sIHRoZXkgaGFpbGVkIGhpbSBhdCBvbmNlIGluIHRoZWlyIE1hY2Vkb25pYW4gc3BlZWNoLCBjYXVnaHQgdXAgdGhlaXIgc2hpZWxkcywgYmVhdCB1cG9uIHRoZW0gd2l0aCB0aGVpciBzcGVhcnMsIGFuZCByYWlzZWQgdGhlaXIgYmF0dGxlLWNyeSwgY2hhbGxlbmdpbmcgdGhlIGVuZW15IHRvIGZpZ2h0IGluIHRoZSBhc3N1cmFuY2UgdGhhdCB0aGVpciBsZWFkZXIgd2FzIGF0IGhhbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIE1hY2Vkb25pYW5zLCBob3dldmVyLCB3aGlsZSB0aGVyZSB3YXMgbm8gZGFuZ2VyLCBjb250aW51ZWQgdG8gdGFrZSBnaWZ0cyBmcm9tIHRoZWlyIGNvcnJ1cHRlcnMsIGFuZCBodW5nIGFib3V0IHRoZSBkb29ycyBvZiB0aGVzZSBtZW4sIHdobyBub3cgaGFkIGJvZHktZ3VhcmRzIGFuZCB3YW50ZWQgdG8gYmUgZ2VuZXJhbHMuIEJ1dCB3aGVuIEFudGlnb251cyBlbmNhbXBlZCBuZWFyIHRoZW0gd2l0aCBhIGxhcmdlIGZvcmNlIGFuZCB0aGUgc2l0dWF0aW9uIGNhbGxlZCBhbG91ZCBmb3IgYSByZWFsIGdlbmVyYWwsIG5vdCBvbmx5IGRpZCB0aGUgY29tbW9uIHNvbGRpZXJzIGF0dGFjaCB0aGVtc2VsdmVzIHRvIEV1bWVuZXMsIGJ1dCBhbHNvIHRob3NlIHdobyB3ZXJlIGdyZWF0IG9ubHkgd2hlbiBwZWFjZSBhbmQgbHV4dXJ5IHByZXZhaWxlZCwgZXZlcnkgbWFuIG9mIHRoZW0sIGdhdmUgaW4gdG8gaGltIGFuZCBjb25zZW50ZWQgd2l0aG91dCBhIG11cm11ciB0byBob2xkIHRoZSBwb3N0IHdoaWNoIGhlIGdhdmUgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCwgaW5kZWVkLCB3aGVuIEFudGlnb251cyB0cmllZCB0byBjcm9zcyB0aGUgcml2ZXIgUGFzaXRpZ3Jpcywgbm9uZSBvZiB0aGUgb3RoZXIgY29tbWFuZGVycyB3aG8gd2VyZSB3YXRjaGluZyBoaXMgbW92ZW1lbnRzIHdhcyBldmVuIGF3YXJlIG9mIGl0LCBidXQgRXVtZW5lcywgYW5kIGhlIGFsb25lLCB3aXRoc3Rvb2QgaGltLCBqb2luZWQgYmF0dGxlIHdpdGggaGltLCBzbGV3IG1hbnkgb2YgaGlzIG1lbiBhbmQgZmlsbGVkIHRoZSBzdHJlYW0gd2l0aCBkZWFkIGJvZGllcywgYW5kIHRvb2sgZm91ciB0aG91c2FuZCBwcmlzb25lcnMuIEJ1dCBtb3N0IG9mIGFsbCBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHNpY2tuZXNzIHRoYXQgYmVmZWxsIGhpbSBkaWQgdGhlIE1hY2Vkb25pYW5zIG1ha2UgaXQgY2xlYXIgdGhhdCB0aGV5IGNvbnNpZGVyZWQgdGhlIG90aGVycyBhYmxlIHRvIGZlYXN0IHRoZW0gc3BsZW5kaWRseSBhbmQgaG9sZCBoaWdoIGZlc3RpdmFsLCBidXQgaGltIGFsb25lIGNhcGFibGUgb2Ygd2llbGRpbmcgY29tbWFuZCBhbmQgd2FnaW5nIHdhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQZXVjZXN0YXMsIGhhdmluZyBmZWFzdGVkIHRoZW0gc3BsZW5kaWRseSBpbiBQZXJzaXMsIGFuZCBoYXZpbmcgZ2l2ZW4gZXZlcnkgbWFuIGEgdmljdGltIGZvciBzYWNyaWZpY2UsIHdhcyBleHBlY3RpbmcgdG8gYmUgY2hpZWYgaW4gY29tbWFuZDsgYW5kIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgYXMgdGhlIHNvbGRpZXJzIHdlcmUgbWFyY2hpbmcgYWdhaW5zdCB0aGUgZW5lbXksIGl0IGNoYW5jZWQgdGhhdCBFdW1lbmVzLCBpbiBjb25zZXF1ZW5jZSBvZiBhIGRhbmdlcm91cyBpbGxuZXNzLCB3YXMgYmVpbmcgY2FycmllZCBhbG9uZyBpbiBhIGxpdHRlciBvdXRzaWRlIHRoZSByYW5rcywgd2hlcmUgaXQgd2FzIHF1aWV0IGFuZCBoaXMgc2xlZXAgd291bGQgbm90IGJlIGJyb2tlbi4gQnV0IGFmdGVyIHRoZXkgaGFkIGFkdmFuY2VkIGEgbGl0dGxlIHdheSwgc3VkZGVubHkgdGhlIGVuZW15IHdlcmUgc2VlbiBwYXNzaW5nIG92ZXIgc29tZSBoaWxscyBhbmQgZGVzY2VuZGluZyBpbnRvIHRoZSBwbGFpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBnbGVhbXMgb2YgdGhlaXIgZ29sZGVuIGFybW91ciBpbiB0aGUgc3VuIGZsYXNoZWQgZG93biBmcm9tIHRoZSBoZWlnaHRzIGFzIHRoZXkgbWFyY2hlZCBhbG9uZyBpbiBjbG9zZSBmb3JtYXRpb24sIGFuZCBvbiB0aGUgYmFja3Mgb2YgdGhlIGVsZXBoYW50cyB0aGUgdG93ZXJzIGFuZCBwdXJwbGUgdHJhcHBpbmdzIHdlcmUgc2Vlbiwgd2hpY2ggd2FzIHRoZWlyIGFycmF5IHdoZW4gZ29pbmcgaW50byBiYXR0bGUuIEFjY29yZGluZ2x5LCB0aGUgZm9yZW1vc3QgTWFjZWRvbmlhbnMgaGFsdGVkIGluIHRoZWlyIG1hcmNoIGFuZCBjYWxsZWQgd2l0aCBsb3VkIGNyaWVzIGZvciBFdW1lbmVzLCBkZWNsYXJpbmcgdGhhdCB0aGV5IHdvdWxkIG5vdCBnbyBmb3J3YXJkIHVubGVzcyBoZSB3YXMgaW4gY29tbWFuZCBvZiB0aGVtOyBhbmQgZ3JvdW5kaW5nIHRoZWlyIGFybXMgdGhleSBwYXNzZWQgd29yZCB0byBvbmUgYW5vdGhlciB0byB3YWl0LCBhbmQgdG8gdGhlaXIgbGVhZGVycyB0byBrZWVwIHN0aWxsLCBhbmQgd2l0aG91dCBFdW1lbmVzIG5vdCB0byBnaXZlIGJhdHRsZSBvciBydW4gYW55IGhhemFyZCBldmVuIHdpdGggdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRXVtZW5lcyBoZWFyZCBvZiB0aGlzLCBoZSBxdWlja2VuZWQgdGhlIHBhY2Ugb2YgaGlzIGJlYXJlcnMgdG8gYSBydW4gYW5kIGNhbWUgdG8gdGhlbSwgYW5kIGxpZnRpbmcgdXAgdGhlIGN1cnRhaW5zIG9mIGhpcyBsaXR0ZXIgb24gZWl0aGVyIHNpZGUsIHN0cmV0Y2hlZCBmb3J0aCBoaXMgaGFuZCBpbiBkZWxpZ2h0LiBBbmQgd2hlbiB0aGUgc29sZGllcnMgc2F3IGhpbSwgdGhleSBoYWlsZWQgaGltIGF0IG9uY2UgaW4gdGhlaXIgTWFjZWRvbmlhbiBzcGVlY2gsIGNhdWdodCB1cCB0aGVpciBzaGllbGRzLCBiZWF0IHVwb24gdGhlbSB3aXRoIHRoZWlyIHNwZWFycywgYW5kIHJhaXNlZCB0aGVpciBiYXR0bGUtY3J5LCBjaGFsbGVuZ2luZyB0aGUgZW5lbXkgdG8gZmlnaHQgaW4gdGhlIGFzc3VyYW5jZSB0aGF0IHRoZWlyIGxlYWRlciB3YXMgYXQgaGFuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFudGlnb251cywgaGVhcmluZyBmcm9tIGhpcyBwcmlzb25lcnMgdGhhdCBFdW1lbmVzIHdhcyBzaWNrIGFuZCBpbiBzdWNoIHdyZXRjaGVkIHBsaWdodCBhcyB0byBiZSBib3JuZSBhbG9uZyBpbiBhIGxpdHRlciwgdGhvdWdodCBpdCBubyBncmVhdCB0YXNrIHRvIGNydXNoIHRoZSBvdGhlciBjb21tYW5kZXJzIGlmIEV1bWVuZXMgd2FzIHNpY2suIEhlIHRoZXJlZm9yZSBoYXN0ZW5lZCB0byBsZWFkIGhpcyBhcm15IHRvIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4sIGFzIHRoZSBlbmVteSB3ZXJlIGZvcm1pbmcgaW4gYmF0dGxlIG9yZGVyLCBoZSBoYWQgcmlkZGVuIHBhc3QgdGhlaXIgbGluZXMgYW5kIG9ic2VydmVkIHRoZWlyIHNoYXBlIGFuZCBkaXNwb3NpdGlvbiwgaGUgd2FzIGFtYXplZCwgYW5kIHBhdXNlZCBmb3Igc29tZSB0aW1lOyB0aGVuIHRoZSBsaXR0ZXIgd2FzIHNlZW4gYXMgaXQgd2FzIGNhcnJpZWQgZnJvbSBvbmUgd2luZyB0byB0aGUgb3RoZXIuIEF0IHRoaXMsIEFudGlnb251cyBnYXZlIGEgbG91ZCBsYXVnaCwgYXMgd2FzIGhpcyB3b250LCBhbmQgYWZ0ZXIgc2F5aW5nIHRvIGhpcyBmcmllbmRzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgbGl0dGVyLCBpdCB3b3VsZCBzZWVtLCBpcyB3aGF0IGlzIGFycmF5ZWQgYWdhaW5zdCB1cyw8L3E+IGltbWVkaWF0ZWx5IHJldGlyZWQgd2l0aCBoaXMgZm9yY2VzIGFuZCBwaXRjaGVkIGhpcyBjYW1wLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGV2ZW50cyBhcmUgbW9yZSBmdWxseSBhbmQgdmVyeSBkaWZmZXJlbnRseSBkZXNjcmliZWQgYnkgRGlvZG9ydXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIj54aXguIDI0LTMyPC9iaWJsPikuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEFudGlnb251cywgaGVhcmluZyBmcm9tIGhpcyBwcmlzb25lcnMgdGhhdCBFdW1lbmVzIHdhcyBzaWNrIGFuZCBpbiBzdWNoIHdyZXRjaGVkIHBsaWdodCBhcyB0byBiZSBib3JuZSBhbG9uZyBpbiBhIGxpdHRlciwgdGhvdWdodCBpdCBubyBncmVhdCB0YXNrIHRvIGNydXNoIHRoZSBvdGhlciBjb21tYW5kZXJzIGlmIEV1bWVuZXMgd2FzIHNpY2suIEhlIHRoZXJlZm9yZSBoYXN0ZW5lZCB0byBsZWFkIGhpcyBhcm15IHRvIGJhdHRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuLCBhcyB0aGUgZW5lbXkgd2VyZSBmb3JtaW5nIGluIGJhdHRsZSBvcmRlciwgaGUgaGFkIHJpZGRlbiBwYXN0IHRoZWlyIGxpbmVzIGFuZCBvYnNlcnZlZCB0aGVpciBzaGFwZSBhbmQgZGlzcG9zaXRpb24sIGhlIHdhcyBhbWF6ZWQsIGFuZCBwYXVzZWQgZm9yIHNvbWUgdGltZTsgdGhlbiB0aGUgbGl0dGVyIHdhcyBzZWVuIGFzIGl0IHdhcyBjYXJyaWVkIGZyb20gb25lIHdpbmcgdG8gdGhlIG90aGVyLiBBdCB0aGlzLCBBbnRpZ29udXMgZ2F2ZSBhIGxvdWQgbGF1Z2gsIGFzIHdhcyBoaXMgd29udCwgYW5kIGFmdGVyIHNheWluZyB0byBoaXMgZnJpZW5kcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgbGl0dGVyLCBpdCB3b3VsZCBzZWVtLCBpcyB3aGF0IGlzIGFycmF5ZWQgYWdhaW5zdCB1cyw8L3E+IGltbWVkaWF0ZWx5IHJldGlyZWQgd2l0aCBoaXMgZm9yY2VzIGFuZCBwaXRjaGVkIGhpcyBjYW1wLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgZXZlbnRzIGFyZSBtb3JlIGZ1bGx5IGFuZCB2ZXJ5IGRpZmZlcmVudGx5IGRlc2NyaWJlZCBieSBEaW9kb3J1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+eGl4LiAyNC0zMjwvYmlibD4pLjwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+eGl4LiAyNC0zMjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTWFjZWRvbmlhbnMgb3Bwb3NlZCB0byBoaW0sIGFmdGVyIGdldHRpbmcgYSBsaXR0bGUgcmVzcGl0ZSwgb25jZSBtb3JlIGFjdGVkIGxpa2VkIGEgY2FwcmljaW91cyBtb2IsIGFuZCwgbW9ja2luZyBhdCB0aGVpciBsZWFkZXJzLCBkaXN0cmlidXRlZCB0aGVtc2VsdmVzIGluIHdpbnRlciBxdWFydGVycyBvdmVyIGFsbW9zdCB0aGUgd2hvbGUgb2YgR2FiZW5lLCBzbyB0aGF0IHRoZSByZWFyIHdhcyBzZXBhcmF0ZWQgZnJvbSB0aGUgdmFuIGJ5IGFsbW9zdCBhIHRob3VzYW5kIGZ1cmxvbmdzLiBXaGVuIEFudGlnb251cyBiZWNhbWUgYXdhcmUgb2YgdGhpcywgaGUgc2V0IG91dCBzdWRkZW5seSBhZ2FpbnN0IHRoZW0sIHRha2luZyB0aGlzIHRpbWUgYSByb2FkIHRoYXQgd2FzIGRpZmZpY3VsdCBhbmQgd2l0aG91dCB3YXRlciwgYnV0IGRpcmVjdCBhbmQgc2hvcnQsIGhvcGluZyB0aGF0LCBpbiBjYXNlIGhlIGZlbGwgdXBvbiB0aGVtIHdoZW4gdGhleSB3ZXJlIHNjYXR0ZXJlZCBhYm91dCBpbiB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGl0IHdvdWxkIG5vIGxvbmdlciBiZSBlYXN5IGZvciB0aGUgbWFzcyBvZiB0aGVtIHRvIGpvaW4gdGhlaXIgZ2VuZXJhbHMuIEJ1dCBhZnRlciBoZSBoYWQgZW50ZXJlZCBhbiB1bmluaGFiaXRlZCBjb3VudHJ5LCBkaXJlIHdpbmRzIGFuZCBzZXZlcmUgZnJvc3RzIGdhdmUgdHJvdWJsZSB0byBoaXMgYXJteSBhbmQgaW1wZWRlZCB0aGVpciBtYXJjaC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9ubHkgaGVscCwgdGhlcmVmb3JlLCB3YXMgdG8gYnVybiBtYW55IGZpcmVzLCBhbmQgdGhpcyB3YXMgd2hhdCByZXZlYWxlZCBoaXMgcHJlc2VuY2UgdG8gdGhlIGVuZW15LiBGb3IgdGhlIEJhcmJhcmlhbnMgbGl2aW5nIG9uIHRoZSBtb3VudGFpbnMgd2hpY2ggb3Zlcmxvb2tlZCB0aGUgdW5pbmhhYml0ZWQgdHJhY3QsIGFtYXplZCBhdCB0aGUgbnVtYmVyIG9mIGZpcmVzLCBzZW50IG1lc3NlbmdlcnMgb24gZHJvbWVkYXJpZXMgdG8gUGV1Y2VzdGFzLiBBbmQgaGUsIHdoZW4gaGUgaGVhcmQgdGhlIG5ld3MsIGJlaW5nIGhpbXNlbGYgcXVpdGUgb3V0IG9mIGhpcyBtaW5kIHdpdGggZmVhciBhbmQgc2VlaW5nIHRoYXQgdGhlIG90aGVyIG9mZmljZXJzIHdlcmUgaW4gYSBsaWtlIHN0YXRlLCBzZXQgb3V0IHRvIGZseSwgYWZ0ZXIgcm91c2luZyB1cCB0aG9zZSBvZiB0aGVpciBzb2xkaWVycyBlc3BlY2lhbGx5IHdobyB3ZXJlIHF1YXJ0ZXJlZCBhbG9uZyB0aGUgcm91dGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdW1lbmVzIHRyaWVkIHRvIHB1dCBhIHN0b3AgdG8gdGhlaXIgY29uZnVzaW9uIGFuZCBwYW5pYyBmZWFyLCBieSBwcm9taXNpbmcgc28gdG8gY2hlY2sgdGhlIHNwZWVkIG9mIHRoZSBlbmVteSB0aGF0IHRoZXkgd291bGQgY29tZSB1cCB0aHJlZSBkYXlzIGxhdGVyIHRoYW4gdGhleSB3ZXJlIGV4cGVjdGVkLiBBbmQgd2hlbiBoaXMgaGVhcmVycyB3ZXJlIHBlcnN1YWRlZCwgaGUgc2VudCByb3VuZCBtZXNzZW5nZXJzIHdpdGggb3JkZXJzIHRoYXQgdGhlIGZvcmNlcyBpbiB3aW50ZXIgcXVhcnRlcnMgYW5kIGVsc2V3aGVyZSBzaG91bGQgYXNzZW1ibGUgd2l0aCBhbGwgc3BlZWQ7IGF0IHRoZSBzYW1lIHRpbWUsIHRvbywgaGUgaGltc2VsZiByb2RlIGZvcnRoIHdpdGggdGhlIG90aGVyIGNvbW1hbmRlcnMsIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIHBsYWNlIHdoaWNoIGNvdWxkIGJlIHNlZW4gYXQgYSBkaXN0YW5jZSBieSBzdWNoIGFzIHRyYXZlcnNlZCB0aGUgZGVzZXJ0LCBtZWFzdXJlZCBpdCBvZmYsIGFuZCBvcmRlcmVkIG1hbnkgZmlyZXMgdG8gYmUgbWFkZSBhdCBpbnRlcnZhbHMsIGFzIGluIGFuIGVuY2FtcG1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGRvbmUsIGFuZCB3aGVuIEFudGlnb251cyBzYXcgdGhlc2UgZmlyZXMgb24gdGhlIG1vdW50YWlucywgaGUgd2FzIGRpc3RyZXNzZWQgYW5kIGRpc2hlYXJ0ZW5lZCwgc3VwcG9zaW5nIHRoYXQgaGlzIGVuZW1pZXMgaGFkIGxvbmcgYmVlbiBhd2FyZSBvZiBoaXMgYXBwcm9hY2ggYW5kIHdlcmUgY29taW5nIHRvIG1lZXQgaGltLiBJbiBvcmRlciwgdGhlcmVmb3JlLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSBmb3JjZWQgdG8gZmlnaHQsIHdoZW4gaGlzIG1lbiB3ZXJlIHdvcm4gYW5kIHdlYXJ5IGZyb20gdGhlaXIgbWFyY2gsIGFnYWluc3QgdGhvc2Ugd2hvIGhhZCBzcGVudCBhIGNvbWZvcnRhYmxlIHdpbnRlciBhbmQgd2VyZSByZWFkeSBmb3IgdGhlIGNvbmZsaWN0LCBoZSBmb3Jzb29rIHRoZSBkaXJlY3Qgcm9hZCBhbmQgbGVkIGhpcyBhcm15IHRocm91Z2ggdmlsbGFnZXMgYW5kIGNpdGllcywgdGFraW5nIHRpbWUgdG8gcmVmcmVzaCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gbm8gb25lIHRyaWVkIHRvIG9ic3RydWN0IGhpcyBwcm9ncmVzcywgdGhlIHRoaW5nIHdoaWNoIHVzdWFsbHkgaGFwcGVucyB3aGVuIGVuZW1pZXMgYXJlIGZhY2luZyBvbmUgYW5vdGhlciwgYW5kIHdoZW4gdGhlIHBlb3BsZSByb3VuZCBhYm91dCBzYWlkIHRoZXkgaGFkIHNlZW4gbm8gYXJteSwgYnV0IHRoYXQgdGhlIHBsYWNlIHdhcyBmdWxsIG9mIGxpZ2h0ZWQgZmlyZXMsIEFudGlnb251cyBwZXJjZWl2ZWQgdGhhdCBoZSBoYWQgYmVlbiBvdXRnZW5lcmFsZWQgYnkgRXVtZW5lcywgYW5kIGluIGRlZXAgcmVzZW50bWVudCBsZWQgaGlzIGZvcmNlcyBmb3J3YXJkIHRvIHRyeSB0aGUgaXNzdWUgaW4gb3BlbiBiYXR0bGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTWFjZWRvbmlhbnMgb3Bwb3NlZCB0byBoaW0sIGFmdGVyIGdldHRpbmcgYSBsaXR0bGUgcmVzcGl0ZSwgb25jZSBtb3JlIGFjdGVkIGxpa2VkIGEgY2FwcmljaW91cyBtb2IsIGFuZCwgbW9ja2luZyBhdCB0aGVpciBsZWFkZXJzLCBkaXN0cmlidXRlZCB0aGVtc2VsdmVzIGluIHdpbnRlciBxdWFydGVycyBvdmVyIGFsbW9zdCB0aGUgd2hvbGUgb2YgR2FiZW5lLCBzbyB0aGF0IHRoZSByZWFyIHdhcyBzZXBhcmF0ZWQgZnJvbSB0aGUgdmFuIGJ5IGFsbW9zdCBhIHRob3VzYW5kIGZ1cmxvbmdzLiBXaGVuIEFudGlnb251cyBiZWNhbWUgYXdhcmUgb2YgdGhpcywgaGUgc2V0IG91dCBzdWRkZW5seSBhZ2FpbnN0IHRoZW0sIHRha2luZyB0aGlzIHRpbWUgYSByb2FkIHRoYXQgd2FzIGRpZmZpY3VsdCBhbmQgd2l0aG91dCB3YXRlciwgYnV0IGRpcmVjdCBhbmQgc2hvcnQsIGhvcGluZyB0aGF0LCBpbiBjYXNlIGhlIGZlbGwgdXBvbiB0aGVtIHdoZW4gdGhleSB3ZXJlIHNjYXR0ZXJlZCBhYm91dCBpbiB0aGVpciB3aW50ZXIgcXVhcnRlcnMsIGl0IHdvdWxkIG5vIGxvbmdlciBiZSBlYXN5IGZvciB0aGUgbWFzcyBvZiB0aGVtIHRvIGpvaW4gdGhlaXIgZ2VuZXJhbHMuIEJ1dCBhZnRlciBoZSBoYWQgZW50ZXJlZCBhbiB1bmluaGFiaXRlZCBjb3VudHJ5LCBkaXJlIHdpbmRzIGFuZCBzZXZlcmUgZnJvc3RzIGdhdmUgdHJvdWJsZSB0byBoaXMgYXJteSBhbmQgaW1wZWRlZCB0aGVpciBtYXJjaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvbmx5IGhlbHAsIHRoZXJlZm9yZSwgd2FzIHRvIGJ1cm4gbWFueSBmaXJlcywgYW5kIHRoaXMgd2FzIHdoYXQgcmV2ZWFsZWQgaGlzIHByZXNlbmNlIHRvIHRoZSBlbmVteS4gRm9yIHRoZSBCYXJiYXJpYW5zIGxpdmluZyBvbiB0aGUgbW91bnRhaW5zIHdoaWNoIG92ZXJsb29rZWQgdGhlIHVuaW5oYWJpdGVkIHRyYWN0LCBhbWF6ZWQgYXQgdGhlIG51bWJlciBvZiBmaXJlcywgc2VudCBtZXNzZW5nZXJzIG9uIGRyb21lZGFyaWVzIHRvIFBldWNlc3Rhcy4gQW5kIGhlLCB3aGVuIGhlIGhlYXJkIHRoZSBuZXdzLCBiZWluZyBoaW1zZWxmIHF1aXRlIG91dCBvZiBoaXMgbWluZCB3aXRoIGZlYXIgYW5kIHNlZWluZyB0aGF0IHRoZSBvdGhlciBvZmZpY2VycyB3ZXJlIGluIGEgbGlrZSBzdGF0ZSwgc2V0IG91dCB0byBmbHksIGFmdGVyIHJvdXNpbmcgdXAgdGhvc2Ugb2YgdGhlaXIgc29sZGllcnMgZXNwZWNpYWxseSB3aG8gd2VyZSBxdWFydGVyZWQgYWxvbmcgdGhlIHJvdXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBFdW1lbmVzIHRyaWVkIHRvIHB1dCBhIHN0b3AgdG8gdGhlaXIgY29uZnVzaW9uIGFuZCBwYW5pYyBmZWFyLCBieSBwcm9taXNpbmcgc28gdG8gY2hlY2sgdGhlIHNwZWVkIG9mIHRoZSBlbmVteSB0aGF0IHRoZXkgd291bGQgY29tZSB1cCB0aHJlZSBkYXlzIGxhdGVyIHRoYW4gdGhleSB3ZXJlIGV4cGVjdGVkLiBBbmQgd2hlbiBoaXMgaGVhcmVycyB3ZXJlIHBlcnN1YWRlZCwgaGUgc2VudCByb3VuZCBtZXNzZW5nZXJzIHdpdGggb3JkZXJzIHRoYXQgdGhlIGZvcmNlcyBpbiB3aW50ZXIgcXVhcnRlcnMgYW5kIGVsc2V3aGVyZSBzaG91bGQgYXNzZW1ibGUgd2l0aCBhbGwgc3BlZWQ7IGF0IHRoZSBzYW1lIHRpbWUsIHRvbywgaGUgaGltc2VsZiByb2RlIGZvcnRoIHdpdGggdGhlIG90aGVyIGNvbW1hbmRlcnMsIHRvb2sgcG9zc2Vzc2lvbiBvZiBhIHBsYWNlIHdoaWNoIGNvdWxkIGJlIHNlZW4gYXQgYSBkaXN0YW5jZSBieSBzdWNoIGFzIHRyYXZlcnNlZCB0aGUgZGVzZXJ0LCBtZWFzdXJlZCBpdCBvZmYsIGFuZCBvcmRlcmVkIG1hbnkgZmlyZXMgdG8gYmUgbWFkZSBhdCBpbnRlcnZhbHMsIGFzIGluIGFuIGVuY2FtcG1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGRvbmUsIGFuZCB3aGVuIEFudGlnb251cyBzYXcgdGhlc2UgZmlyZXMgb24gdGhlIG1vdW50YWlucywgaGUgd2FzIGRpc3RyZXNzZWQgYW5kIGRpc2hlYXJ0ZW5lZCwgc3VwcG9zaW5nIHRoYXQgaGlzIGVuZW1pZXMgaGFkIGxvbmcgYmVlbiBhd2FyZSBvZiBoaXMgYXBwcm9hY2ggYW5kIHdlcmUgY29taW5nIHRvIG1lZXQgaGltLiBJbiBvcmRlciwgdGhlcmVmb3JlLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSBmb3JjZWQgdG8gZmlnaHQsIHdoZW4gaGlzIG1lbiB3ZXJlIHdvcm4gYW5kIHdlYXJ5IGZyb20gdGhlaXIgbWFyY2gsIGFnYWluc3QgdGhvc2Ugd2hvIGhhZCBzcGVudCBhIGNvbWZvcnRhYmxlIHdpbnRlciBhbmQgd2VyZSByZWFkeSBmb3IgdGhlIGNvbmZsaWN0LCBoZSBmb3Jzb29rIHRoZSBkaXJlY3Qgcm9hZCBhbmQgbGVkIGhpcyBhcm15IHRocm91Z2ggdmlsbGFnZXMgYW5kIGNpdGllcywgdGFraW5nIHRpbWUgdG8gcmVmcmVzaCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIG5vIG9uZSB0cmllZCB0byBvYnN0cnVjdCBoaXMgcHJvZ3Jlc3MsIHRoZSB0aGluZyB3aGljaCB1c3VhbGx5IGhhcHBlbnMgd2hlbiBlbmVtaWVzIGFyZSBmYWNpbmcgb25lIGFub3RoZXIsIGFuZCB3aGVuIHRoZSBwZW9wbGUgcm91bmQgYWJvdXQgc2FpZCB0aGV5IGhhZCBzZWVuIG5vIGFybXksIGJ1dCB0aGF0IHRoZSBwbGFjZSB3YXMgZnVsbCBvZiBsaWdodGVkIGZpcmVzLCBBbnRpZ29udXMgcGVyY2VpdmVkIHRoYXQgaGUgaGFkIGJlZW4gb3V0Z2VuZXJhbGVkIGJ5IEV1bWVuZXMsIGFuZCBpbiBkZWVwIHJlc2VudG1lbnQgbGVkIGhpcyBmb3JjZXMgZm9yd2FyZCB0byB0cnkgdGhlIGlzc3VlIGluIG9wZW4gYmF0dGxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbWVhbndoaWxlIG1vc3Qgb2YgdGhlIGZvcmNlcyB3aXRoIEV1bWVuZXMgaGFkIGFzc2VtYmxlZCwgYW5kLCBhZG1pcmluZyBoaXMgc2FnYWNpdHksIGRlbWFuZGVkIHRoYXQgaGUgc2hvdWxkIGJlIHNvbGUgY29tbWFuZGVyLiBBdCB0aGlzLCBBbnRpZ2VuZXMgYW5kIFRldXRhbXVzLCB0aGUgbGVhZGVycyBvZiB0aGUgU2lsdmVyLXNoaWVsZHMsIHdlcmUgZmlsbGVkIHdpdGggdmV4YXRpb24gYW5kIGplYWxvdXN5LCBzbyB0aGF0IHRoZXkgcGxvdHRlZCBhZ2FpbnN0IHRoZSBsaWZlIG9mIEV1bWVuZXMsIGFuZCwgYXNzZW1ibGluZyBtb3N0IG9mIHRoZSBzYXRyYXBzIGFuZCBnZW5lcmFscywgZGVsaWJlcmF0ZWQgd2hlbiBhbmQgaG93IHRoZXkgbWlnaHQgcHV0IGhpbSBvdXQgb2YgdGhlIHdheS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIHVuYW5pbW91cyBpbiB0aGUgZGVjaXNpb24gdG8gbWFrZSBldmVyeSB1c2Ugb2YgaGltIGluIHRoZSBlbnN1aW5nIGJhdHRsZSwgYW5kIGFmdGVyIHRoZSBiYXR0bGUgdG8ga2lsbCBoaW0gYXQgb25jZS4gQnV0IEV1ZGFtdXMsIHRoZSBtYXN0ZXIgb2YgdGhlIGVsZXBoYW50cywgYW5kIFBoYWVkaW11cywgc2VjcmV0bHkgYnJvdWdodCB3b3JkIHRvIEV1bWVuZXMgb2YgdGhpcyBkZWNpc2lvbjsgbm90IHRoYXQgdGhleSB3ZXJlIG1vdmVkIGJ5IGFueSBnb29kd2lsbCBvciBraW5kbmVzcywgYnV0IGJlY2F1c2UgdGhleSB3ZXJlIGFueGlvdXMgbm90IHRvIGxvc2UgdGhlIG1vbmV5IHRoZXkgaGFkIGxlbnQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAxMy42IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDY8L2JpYmw+Ljwvbm90ZT4gVGhlc2UgbWVuIEV1bWVuZXMgY29tbWVuZGVkLCBhbmQgdGhlbiB3ZW50IG9mZiB0byBoaXMgdGVudCwgd2hlcmUgaGUgc2FpZCB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIHdhcyBsaXZpbmcgaW4gYSBncmVhdCBoZXJkIG9mIHdpbGQgYmVhc3RzLiBUaGVuIGhlIG1hZGUgaGlzIHdpbGwsIGFuZCB0b3JlIHVwIGFuZCBkZXN0cm95ZWQgaGlzIHBhcGVyczsgaGUgZGlkIG5vdCB3aXNoIHRoYXQgYWZ0ZXIgaGlzIGRlYXRoLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgc2VjcmV0cyBjb250YWluZWQgaW4gdGhlc2UgZG9jdW1lbnRzLCBhY2N1c2F0aW9ucyBhbmQgY2FsdW1uaWVzIHNob3VsZCBiZSBicm91Z2h0IGFnYWluc3QgaGlzIGNvcnJlc3BvbmRlbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGJ1c2luZXNzIGhhZCBiZWVuIGZpbmlzaGVkLCBoZSBkZWxpYmVyYXRlZCB3aGV0aGVyIHRvIGdpdmUgb3ZlciB0aGUgdmljdG9yeSB0byB0aGUgZW5lbXksIG9yIHRvIHRha2UgZmxpZ2h0IHRocm91Z2ggTWVkaWEgYW5kIEFybWVuaWEgYW5kIGludmFkZSBDYXBwYWRvY2lhLiBIZSBjYW1lIHRvIG5vIGRlY2lzaW9uIHdoaWxlIGhpcyBmcmllbmRzIHdlcmUgd2l0aCBoaW0sIGJ1dCBhZnRlciBjb25zaWRlcmluZyBtYW55IGV4cGVkaWVudHMgd2l0aCBhIG1pbmQgd2hpY2ggd2FzIGFzIHZlcnNhdGlsZSBhcyBoaXMgZm9ydHVuZXMgd2VyZSBjaGFuZ2VhYmxlLCBoZSBwcm9jZWVkZWQgdG8gZHJhdyB1cCBoaXMgZm9yY2VzLCB1cmdpbmcgb24gdGhlIEdyZWVrcyBhbmQgdGhlIEJhcmJhcmlhbnMsIGFuZCBoaW1zZWxmIGV4aG9ydGVkIGJ5IHRoZSBwaGFsYW54IGFuZCB0aGUgU2lsdmVyLXNoaWVsZHMgdG8gYmUgb2YgZ29vZCBjb3VyYWdlLCBzaW5jZSwgYXMgdGhleSBmZWx0IHN1cmUsIHRoZSBlbmVteSB3b3VsZCBub3Qgd2l0aHN0YW5kIHRoZWlyIGF0dGFjay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB0aGV5IHdlcmUgdGhlIG9sZGVzdCBzb2xkaWVycyBvZiBQaGlsaXAgYW5kIEFsZXhhbmRlciwgd2FyJ3MgYXRobGV0ZXMgYXMgaXQgd2VyZSwgd2l0aG91dCBhIGRlZmVhdCBvciBhIGZhbGwgdXAgdG8gdGhhdCB0aW1lLCBtYW55IG9mIHRoZW0gbm93IHNldmVudHkgeWVhcnMgb2xkLCBhbmQgbm90IGEgbWFuIHlvdW5nZXIgdGhhbiBzaXh0eS4gQW5kIHNvLCB3aGVuIHRoZXkgY2hhcmdlZCB1cG9uIHRoZSBmb3JjZXMgb2YgQW50aWdvbnVzLCB0aGV5IHNob3V0ZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgYWdhaW5zdCB5b3VyIGZhdGhlcnMgdGhhdCB5ZSBzaW4sIHllIG1pc2NyZWFudHM7PC9xPiBhbmQgZmFsbGluZyB1cG9uIHRoZW0gaW4gYSByYWdlIHRoZXkgY3J1c2hlZCB0aGVpciB3aG9sZSBwaGFsYW54IGF0IG9uY2UsIG5vdCBhIG1hbiB3aXRoc3RhbmRpbmcgdGhlbSwgYW5kIG1vc3Qgb2YgdGhlaXIgb3Bwb25lbnRzIGJlaW5nIGN1dCB0byBwaWVjZXMgYXQgY2xvc2UgcXVhcnRlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1lYW53aGlsZSBtb3N0IG9mIHRoZSBmb3JjZXMgd2l0aCBFdW1lbmVzIGhhZCBhc3NlbWJsZWQsIGFuZCwgYWRtaXJpbmcgaGlzIHNhZ2FjaXR5LCBkZW1hbmRlZCB0aGF0IGhlIHNob3VsZCBiZSBzb2xlIGNvbW1hbmRlci4gQXQgdGhpcywgQW50aWdlbmVzIGFuZCBUZXV0YW11cywgdGhlIGxlYWRlcnMgb2YgdGhlIFNpbHZlci1zaGllbGRzLCB3ZXJlIGZpbGxlZCB3aXRoIHZleGF0aW9uIGFuZCBqZWFsb3VzeSwgc28gdGhhdCB0aGV5IHBsb3R0ZWQgYWdhaW5zdCB0aGUgbGlmZSBvZiBFdW1lbmVzLCBhbmQsIGFzc2VtYmxpbmcgbW9zdCBvZiB0aGUgc2F0cmFwcyBhbmQgZ2VuZXJhbHMsIGRlbGliZXJhdGVkIHdoZW4gYW5kIGhvdyB0aGV5IG1pZ2h0IHB1dCBoaW0gb3V0IG9mIHRoZSB3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSB1bmFuaW1vdXMgaW4gdGhlIGRlY2lzaW9uIHRvIG1ha2UgZXZlcnkgdXNlIG9mIGhpbSBpbiB0aGUgZW5zdWluZyBiYXR0bGUsIGFuZCBhZnRlciB0aGUgYmF0dGxlIHRvIGtpbGwgaGltIGF0IG9uY2UuIEJ1dCBFdWRhbXVzLCB0aGUgbWFzdGVyIG9mIHRoZSBlbGVwaGFudHMsIGFuZCBQaGFlZGltdXMsIHNlY3JldGx5IGJyb3VnaHQgd29yZCB0byBFdW1lbmVzIG9mIHRoaXMgZGVjaXNpb247IG5vdCB0aGF0IHRoZXkgd2VyZSBtb3ZlZCBieSBhbnkgZ29vZHdpbGwgb3Iga2luZG5lc3MsIGJ1dCBiZWNhdXNlIHRoZXkgd2VyZSBhbnhpb3VzIG5vdCB0byBsb3NlIHRoZSBtb25leSB0aGV5IGhhZCBsZW50IGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBFdW0uIDEzLjYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpaS4gNjwvYmlibD4uPC9ub3RlPiBUaGVzZSBtZW4gRXVtZW5lcyBjb21tZW5kZWQsIGFuZCB0aGVuIHdlbnQgb2ZmIHRvIGhpcyB0ZW50LCB3aGVyZSBoZSBzYWlkIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgd2FzIGxpdmluZyBpbiBhIGdyZWF0IGhlcmQgb2Ygd2lsZCBiZWFzdHMuIFRoZW4gaGUgbWFkZSBoaXMgd2lsbCwgYW5kIHRvcmUgdXAgYW5kIGRlc3Ryb3llZCBoaXMgcGFwZXJzOyBoZSBkaWQgbm90IHdpc2ggdGhhdCBhZnRlciBoaXMgZGVhdGgsIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBzZWNyZXRzIGNvbnRhaW5lZCBpbiB0aGVzZSBkb2N1bWVudHMsIGFjY3VzYXRpb25zIGFuZCBjYWx1bW5pZXMgc2hvdWxkIGJlIGJyb3VnaHQgYWdhaW5zdCBoaXMgY29ycmVzcG9uZGVudHMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRXVtLiAxMy42IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDY8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgYnVzaW5lc3MgaGFkIGJlZW4gZmluaXNoZWQsIGhlIGRlbGliZXJhdGVkIHdoZXRoZXIgdG8gZ2l2ZSBvdmVyIHRoZSB2aWN0b3J5IHRvIHRoZSBlbmVteSwgb3IgdG8gdGFrZSBmbGlnaHQgdGhyb3VnaCBNZWRpYSBhbmQgQXJtZW5pYSBhbmQgaW52YWRlIENhcHBhZG9jaWEuIEhlIGNhbWUgdG8gbm8gZGVjaXNpb24gd2hpbGUgaGlzIGZyaWVuZHMgd2VyZSB3aXRoIGhpbSwgYnV0IGFmdGVyIGNvbnNpZGVyaW5nIG1hbnkgZXhwZWRpZW50cyB3aXRoIGEgbWluZCB3aGljaCB3YXMgYXMgdmVyc2F0aWxlIGFzIGhpcyBmb3J0dW5lcyB3ZXJlIGNoYW5nZWFibGUsIGhlIHByb2NlZWRlZCB0byBkcmF3IHVwIGhpcyBmb3JjZXMsIHVyZ2luZyBvbiB0aGUgR3JlZWtzIGFuZCB0aGUgQmFyYmFyaWFucywgYW5kIGhpbXNlbGYgZXhob3J0ZWQgYnkgdGhlIHBoYWxhbnggYW5kIHRoZSBTaWx2ZXItc2hpZWxkcyB0byBiZSBvZiBnb29kIGNvdXJhZ2UsIHNpbmNlLCBhcyB0aGV5IGZlbHQgc3VyZSwgdGhlIGVuZW15IHdvdWxkIG5vdCB3aXRoc3RhbmQgdGhlaXIgYXR0YWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhleSB3ZXJlIHRoZSBvbGRlc3Qgc29sZGllcnMgb2YgUGhpbGlwIGFuZCBBbGV4YW5kZXIsIHdhcidzIGF0aGxldGVzIGFzIGl0IHdlcmUsIHdpdGhvdXQgYSBkZWZlYXQgb3IgYSBmYWxsIHVwIHRvIHRoYXQgdGltZSwgbWFueSBvZiB0aGVtIG5vdyBzZXZlbnR5IHllYXJzIG9sZCwgYW5kIG5vdCBhIG1hbiB5b3VuZ2VyIHRoYW4gc2l4dHkuIEFuZCBzbywgd2hlbiB0aGV5IGNoYXJnZWQgdXBvbiB0aGUgZm9yY2VzIG9mIEFudGlnb251cywgdGhleSBzaG91dGVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgYWdhaW5zdCB5b3VyIGZhdGhlcnMgdGhhdCB5ZSBzaW4sIHllIG1pc2NyZWFudHM7PC9xPiBhbmQgZmFsbGluZyB1cG9uIHRoZW0gaW4gYSByYWdlIHRoZXkgY3J1c2hlZCB0aGVpciB3aG9sZSBwaGFsYW54IGF0IG9uY2UsIG5vdCBhIG1hbiB3aXRoc3RhbmRpbmcgdGhlbSwgYW5kIG1vc3Qgb2YgdGhlaXIgb3Bwb25lbnRzIGJlaW5nIGN1dCB0byBwaWVjZXMgYXQgY2xvc2UgcXVhcnRlcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQsIHRoZW4sIEFudGlnb251cyB3YXMgZGVmZWF0ZWQgb3ZlcndoZWxtaW5nbHksIGJ1dCB3aXRoIGhpcyBjYXZhbHJ5IGhlIGdvdCB0aGUgdXBwZXIgaGFuZDsgZm9yIFBldWNlc3RhcyBmb3VnaHQgaW4gYSB3YXkgdGhhdCB3YXMgYWx0b2dldGhlciBsYXggYW5kIGlnbm9ibGUsIGFuZCBBbnRpZ29udXMgY2FwdHVyZWQgYWxsIHRoZSBiYWdnYWdlLiBIZSB3YXMgYSBtYW4gd2hvIGtlcHQgY29vbCBpbiB0aGUgcHJlc2VuY2Ugb2YgZGFuZ2VyLCBhbmQgaGUgd2FzIGFpZGVkIGJ5IHRoZSBncm91bmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcGxhaW4gd2VyZSB0aGV5IGZvdWdodCB3YXMgdmFzdCwgYW5kIGl0cyBzb2lsIHdhcyBuZWl0aGVyIGRlZXAgbm9yIHRyb2RkZW4gaGFyZCwgYnV0IHNhbmR5IGFuZCBmdWxsIG9mIGEgZHJ5IGFuZCBzYWxpbmUgc3Vic3RhbmNlLCB3aGljaCwgbG9vc2VuZWQgdXAgYnkgdGhlIHRyYW1wbGluZyBvZiBzbyBtYW55IGhvcnNlcyBhbmQgbWVuIGR1cmluZyB0aGUgYmF0dGxlLCBpc3N1ZWQgZm9ydGggaW4gYSBkdXN0IGxpa2UgbGltZSwgYW5kIHRoaXMgbWFkZSB0aGUgYWlyIGFsbCB3aGl0ZSBhbmQgb2JzY3VyZWQgdGhlIHZpc2lvbi4gVGhlcmVmb3JlIGl0IHdhcyBlYXN5IGZvciBBbnRpZ29udXMgdG8gY2FwdHVyZSB0aGUgZW5lbXkncyBiYWdnYWdlIHVub2JzZXJ2ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQsIHRoZW4sIEFudGlnb251cyB3YXMgZGVmZWF0ZWQgb3ZlcndoZWxtaW5nbHksIGJ1dCB3aXRoIGhpcyBjYXZhbHJ5IGhlIGdvdCB0aGUgdXBwZXIgaGFuZDsgZm9yIFBldWNlc3RhcyBmb3VnaHQgaW4gYSB3YXkgdGhhdCB3YXMgYWx0b2dldGhlciBsYXggYW5kIGlnbm9ibGUsIGFuZCBBbnRpZ29udXMgY2FwdHVyZWQgYWxsIHRoZSBiYWdnYWdlLiBIZSB3YXMgYSBtYW4gd2hvIGtlcHQgY29vbCBpbiB0aGUgcHJlc2VuY2Ugb2YgZGFuZ2VyLCBhbmQgaGUgd2FzIGFpZGVkIGJ5IHRoZSBncm91bmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcGxhaW4gd2VyZSB0aGV5IGZvdWdodCB3YXMgdmFzdCwgYW5kIGl0cyBzb2lsIHdhcyBuZWl0aGVyIGRlZXAgbm9yIHRyb2RkZW4gaGFyZCwgYnV0IHNhbmR5IGFuZCBmdWxsIG9mIGEgZHJ5IGFuZCBzYWxpbmUgc3Vic3RhbmNlLCB3aGljaCwgbG9vc2VuZWQgdXAgYnkgdGhlIHRyYW1wbGluZyBvZiBzbyBtYW55IGhvcnNlcyBhbmQgbWVuIGR1cmluZyB0aGUgYmF0dGxlLCBpc3N1ZWQgZm9ydGggaW4gYSBkdXN0IGxpa2UgbGltZSwgYW5kIHRoaXMgbWFkZSB0aGUgYWlyIGFsbCB3aGl0ZSBhbmQgb2JzY3VyZWQgdGhlIHZpc2lvbi4gVGhlcmVmb3JlIGl0IHdhcyBlYXN5IGZvciBBbnRpZ29udXMgdG8gY2FwdHVyZSB0aGUgZW5lbXkncyBiYWdnYWdlIHVub2JzZXJ2ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBiYXR0bGUgd2FzIG92ZXIsIFRldXRhbXVzIGF0IG9uY2Ugc2VudCBhbiBlbWJhc3N5IHRvIHRyZWF0IGZvciB0aGUgYmFnZ2FnZS4gQW5kIHdoZW4gQW50aWdvbnVzIHByb21pc2VkIG5vdCBvbmx5IHRvIGdpdmUgdGhpcyBiYWNrIHRvIHRoZSBTaWx2ZXItc2hpZWxkcyBidXQgYWxzbyB0byB0cmVhdCB0aGVtIGtpbmRseSBpbiBvdGhlciB3YXlzLCBwcm92aWRlZCB0aGV5IHdvdWxkIGRlbGl2ZXIgdXAgRXVtZW5lcyB0byBoaW0sIHRoZSBTaWx2ZXItc2hpZWxkcyBmb3JtZWQgYSBkaXJlIGRlc2lnbiB0byBwdXQgdGhlIG1hbiBhbGl2ZSBpbnRvIHRoZSBoYW5kcyBvZiBoaXMgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRvIGJlZ2luIHdpdGgsIHRoZXkgZHJldyBuZWFyIGhpbSwgd2l0aG91dCBhd2FrZW5pbmcgaGlzIHN1c3BpY2lvbnMsIGFuZCBrZXB0IGhpbSBpbiB3YXJkLCBzb21lIG1ha2luZyBjb21wbGFpbnRzIGFib3V0IHRoZWlyIGJhZ2dhZ2UsIG90aGVycyBiaWRkaW5nIGhpbSB0byBiZSBvZiBnb29kIGNvdXJhZ2UsIHNpbmNlIGhlIHdhcyB2aWN0b3Jpb3VzLCBhbmQgb3RoZXJzIHN0aWxsIGRlbm91bmNpbmcgdGhlIG90aGVyIGNvbW1hbmRlcnMuIFRoZW4gdGhleSBmZWxsIHVwb24gaGltLCBzbmF0Y2hlZCBoaXMgc3dvcmQgYXdheSBmcm9tIGhpbSwgYW5kIHRpZWQgaGlzIGhhbmRzIGZhc3Qgd2l0aCBoaXMgZ2lyZGxlLiBBbmQgd2hlbiBOaWNhbm9yIGhhZCBiZWVuIHNlbnQgYnkgQW50aWdvbnVzIHRvIHJlY2VpdmUgaGltIGFuZCBoZSB3YXMgYmVpbmcgbGVkIGFsb25nIHRocm91Z2ggdGhlIE1hY2Vkb25pYW5zLCBoZSBiZWdnZWQgZm9yIGxlYXZlIHRvIHNwZWFrIHRvIHRoZW0sIG5vdCB3aXRoIGEgdmlldyB0byBzdXBwbGljYXRpb24gb3IgZW50cmVhdHksIGJ1dCBpbiBvcmRlciB0byBzZXQgZm9ydGggd2hhdCB3YXMgZm9yIHRoZWlyIGFkdmFudGFnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSB3YXMgb3ZlciwgVGV1dGFtdXMgYXQgb25jZSBzZW50IGFuIGVtYmFzc3kgdG8gdHJlYXQgZm9yIHRoZSBiYWdnYWdlLiBBbmQgd2hlbiBBbnRpZ29udXMgcHJvbWlzZWQgbm90IG9ubHkgdG8gZ2l2ZSB0aGlzIGJhY2sgdG8gdGhlIFNpbHZlci1zaGllbGRzIGJ1dCBhbHNvIHRvIHRyZWF0IHRoZW0ga2luZGx5IGluIG90aGVyIHdheXMsIHByb3ZpZGVkIHRoZXkgd291bGQgZGVsaXZlciB1cCBFdW1lbmVzIHRvIGhpbSwgdGhlIFNpbHZlci1zaGllbGRzIGZvcm1lZCBhIGRpcmUgZGVzaWduIHRvIHB1dCB0aGUgbWFuIGFsaXZlIGludG8gdGhlIGhhbmRzIG9mIGhpcyBlbmVtaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0byBiZWdpbiB3aXRoLCB0aGV5IGRyZXcgbmVhciBoaW0sIHdpdGhvdXQgYXdha2VuaW5nIGhpcyBzdXNwaWNpb25zLCBhbmQga2VwdCBoaW0gaW4gd2FyZCwgc29tZSBtYWtpbmcgY29tcGxhaW50cyBhYm91dCB0aGVpciBiYWdnYWdlLCBvdGhlcnMgYmlkZGluZyBoaW0gdG8gYmUgb2YgZ29vZCBjb3VyYWdlLCBzaW5jZSBoZSB3YXMgdmljdG9yaW91cywgYW5kIG90aGVycyBzdGlsbCBkZW5vdW5jaW5nIHRoZSBvdGhlciBjb21tYW5kZXJzLiBUaGVuIHRoZXkgZmVsbCB1cG9uIGhpbSwgc25hdGNoZWQgaGlzIHN3b3JkIGF3YXkgZnJvbSBoaW0sIGFuZCB0aWVkIGhpcyBoYW5kcyBmYXN0IHdpdGggaGlzIGdpcmRsZS4gQW5kIHdoZW4gTmljYW5vciBoYWQgYmVlbiBzZW50IGJ5IEFudGlnb251cyB0byByZWNlaXZlIGhpbSBhbmQgaGUgd2FzIGJlaW5nIGxlZCBhbG9uZyB0aHJvdWdoIHRoZSBNYWNlZG9uaWFucywgaGUgYmVnZ2VkIGZvciBsZWF2ZSB0byBzcGVhayB0byB0aGVtLCBub3Qgd2l0aCBhIHZpZXcgdG8gc3VwcGxpY2F0aW9uIG9yIGVudHJlYXR5LCBidXQgaW4gb3JkZXIgdG8gc2V0IGZvcnRoIHdoYXQgd2FzIGZvciB0aGVpciBhZHZhbnRhZ2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbGVuY2Ugd2FzIG1hZGUsIGFuZCBzdGFuZGluZyBvbiBhbiBlbWluZW5jZSBoZSBzdHJldGNoZWQgZm9ydGggaGlzIGhhbmRzLCBib3VuZCBhcyB0aGV5IHdlcmUsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgdHJvcGh5LCBPIHllIGJhc2VzdCBvZiBNYWNlZG9uaWFucywgY291bGQgQW50aWdvbnVzIGhhdmUgc28gbXVjaCBkZXNpcmVkIHRvIHNldCB1cCBvdmVyIHlvdXIgZGVmZWF0LCBhcyB0aGlzIHdoaWNoIHllIHlvdXJzZWx2ZXMgYXJlIG5vdyBlcmVjdGluZyBieSBkZWxpdmVyaW5nIHVwIHlvdXIgZ2VuZXJhbCBhcyBhIHByaXNvbmVyPyBJdCBpcyBub3QgYSBkcmVhZGZ1bCB0aGluZywgdGhlbiwgdGhhdCBpbiB0aGUgaG91ciBvZiB5b3VyIHZpY3RvcnkgeWUgc2hvdWxkIGFja25vd2xlZGdlIHlvdXJzZWx2ZXMgZGVmZWF0ZWQgZm9yIHRoZSBzYWtlIG9mIHlvdXIgYmFnZ2FnZSwgaW1wbHlpbmcgdGhhdCB2aWN0b3J5IGxpZXMgaW4geW91ciBwb3NzZXNzaW9ucyBhbmQgbm90IGluIHlvdXIgYXJtcywgYnV0IHllIG11c3QgYWxzbyBzZW5kIHlvdXIgbGVhZGVyIGFzIGEgcmFuc29tIGZvciB0aGF0IGJhZ2dhZ2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgbWUsIHRoZW4sIHllIGxlYWQgbWUgYXdheSB1bmRlZmVhdGVkLCBhIHZpY3RvciBvdmVyIG15IGVuZW1pZXMsIGEgdmljdGltIG9mIG15IGZlbGxvdy1zb2xkaWVyczsgYnV0IGFzIGZvciB5b3UsIGJ5IFpldXMgdGhlIGdvZCBvZiBhcm1pZXMgYW5kIGJ5IHRoZSBnb2RzIHdobyBoYWxsb3cgb2F0aHMsIEkgYmlkIHlvdSBzbGF5IG1lIGhlcmUgd2l0aCB5b3VyIG93biBoYW5kcy4gRXZlbiBzaG91bGQgSSBiZSBzbGFpbiB5b25kZXIsIGl0IHdpbGwgYmUgd2hvbGx5IHlvdXIgd29yay4gTm9yIHdpbGwgQW50aWdvbnVzIGZpbmQgYW55IGZhdWx0OyBmb3IgaGUgd2FudHMgYSBkZWFkIGFuZCBub3QgYSBsaXZpbmcgRXVtZW5lcy4gQW5kIGlmIHllIHdvdWxkIHNwYXJlIHlvdXIgb3duIGhhbmRzLCBvbmUgb2YgbWluZSwgaWYgcmVsZWFzZWQsIHdpbGwgc3VmZmljZSB0byBkbyB0aGUgYnVzaW5lc3MuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgeWUgY2Fubm90IHRydXN0IG1lIHdpdGggYSBzd29yZCwgY2FzdCBtZSB1bmRlciB0aGUgZmVldCBvZiB5b3VyIGVsZXBoYW50cywgYWxsIGJvdW5kIGFzIEkgYW0uIElmIHllIGRvIHRoaXMsIEkgd2lsbCBhYnNvbHZlIHlvdSBmcm9tIHlvdXIgZ3VpbHQgdG93YXJkcyBtZSwgaG9sZGluZyB0aGF0IHllIGhhdmUgc2hvd24geW91cnNlbHZlcyBtb3N0IGp1c3QgYW5kIHJpZ2h0ZW91cyBpbiB5b3VyIGRlYWxpbmdzIHdpdGggeW91ciBvd24gZ2VuZXJhbC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbGVuY2Ugd2FzIG1hZGUsIGFuZCBzdGFuZGluZyBvbiBhbiBlbWluZW5jZSBoZSBzdHJldGNoZWQgZm9ydGggaGlzIGhhbmRzLCBib3VuZCBhcyB0aGV5IHdlcmUsIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCB0cm9waHksIE8geWUgYmFzZXN0IG9mIE1hY2Vkb25pYW5zLCBjb3VsZCBBbnRpZ29udXMgaGF2ZSBzbyBtdWNoIGRlc2lyZWQgdG8gc2V0IHVwIG92ZXIgeW91ciBkZWZlYXQsIGFzIHRoaXMgd2hpY2ggeWUgeW91cnNlbHZlcyBhcmUgbm93IGVyZWN0aW5nIGJ5IGRlbGl2ZXJpbmcgdXAgeW91ciBnZW5lcmFsIGFzIGEgcHJpc29uZXI/IEl0IGlzIG5vdCBhIGRyZWFkZnVsIHRoaW5nLCB0aGVuLCB0aGF0IGluIHRoZSBob3VyIG9mIHlvdXIgdmljdG9yeSB5ZSBzaG91bGQgYWNrbm93bGVkZ2UgeW91cnNlbHZlcyBkZWZlYXRlZCBmb3IgdGhlIHNha2Ugb2YgeW91ciBiYWdnYWdlLCBpbXBseWluZyB0aGF0IHZpY3RvcnkgbGllcyBpbiB5b3VyIHBvc3Nlc3Npb25zIGFuZCBub3QgaW4geW91ciBhcm1zLCBidXQgeWUgbXVzdCBhbHNvIHNlbmQgeW91ciBsZWFkZXIgYXMgYSByYW5zb20gZm9yIHRoYXQgYmFnZ2FnZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIG1lLCB0aGVuLCB5ZSBsZWFkIG1lIGF3YXkgdW5kZWZlYXRlZCwgYSB2aWN0b3Igb3ZlciBteSBlbmVtaWVzLCBhIHZpY3RpbSBvZiBteSBmZWxsb3ctc29sZGllcnM7IGJ1dCBhcyBmb3IgeW91LCBieSBaZXVzIHRoZSBnb2Qgb2YgYXJtaWVzIGFuZCBieSB0aGUgZ29kcyB3aG8gaGFsbG93IG9hdGhzLCBJIGJpZCB5b3Ugc2xheSBtZSBoZXJlIHdpdGggeW91ciBvd24gaGFuZHMuIEV2ZW4gc2hvdWxkIEkgYmUgc2xhaW4geW9uZGVyLCBpdCB3aWxsIGJlIHdob2xseSB5b3VyIHdvcmsuIE5vciB3aWxsIEFudGlnb251cyBmaW5kIGFueSBmYXVsdDsgZm9yIGhlIHdhbnRzIGEgZGVhZCBhbmQgbm90IGEgbGl2aW5nIEV1bWVuZXMuIEFuZCBpZiB5ZSB3b3VsZCBzcGFyZSB5b3VyIG93biBoYW5kcywgb25lIG9mIG1pbmUsIGlmIHJlbGVhc2VkLCB3aWxsIHN1ZmZpY2UgdG8gZG8gdGhlIGJ1c2luZXNzLiAKCQkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGlmIHllIGNhbm5vdCB0cnVzdCBtZSB3aXRoIGEgc3dvcmQsIGNhc3QgbWUgdW5kZXIgdGhlIGZlZXQgb2YgeW91ciBlbGVwaGFudHMsIGFsbCBib3VuZCBhcyBJIGFtLiBJZiB5ZSBkbyB0aGlzLCBJIHdpbGwgYWJzb2x2ZSB5b3UgZnJvbSB5b3VyIGd1aWx0IHRvd2FyZHMgbWUsIGhvbGRpbmcgdGhhdCB5ZSBoYXZlIHNob3duIHlvdXJzZWx2ZXMgbW9zdCBqdXN0IGFuZCByaWdodGVvdXMgaW4geW91ciBkZWFsaW5ncyB3aXRoIHlvdXIgb3duIGdlbmVyYWwuPC9xPgoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtZSwgdGhlbiwgeWUgbGVhZCBtZSBhd2F5IHVuZGVmZWF0ZWQsIGEgdmljdG9yIG92ZXIgbXkgZW5lbWllcywgYSB2aWN0aW0gb2YgbXkgZmVsbG93LXNvbGRpZXJzOyBidXQgYXMgZm9yIHlvdSwgYnkgWmV1cyB0aGUgZ29kIG9mIGFybWllcyBhbmQgYnkgdGhlIGdvZHMgd2hvIGhhbGxvdyBvYXRocywgSSBiaWQgeW91IHNsYXkgbWUgaGVyZSB3aXRoIHlvdXIgb3duIGhhbmRzLiBFdmVuIHNob3VsZCBJIGJlIHNsYWluIHlvbmRlciwgaXQgd2lsbCBiZSB3aG9sbHkgeW91ciB3b3JrLiBOb3Igd2lsbCBBbnRpZ29udXMgZmluZCBhbnkgZmF1bHQ7IGZvciBoZSB3YW50cyBhIGRlYWQgYW5kIG5vdCBhIGxpdmluZyBFdW1lbmVzLiBBbmQgaWYgeWUgd291bGQgc3BhcmUgeW91ciBvd24gaGFuZHMsIG9uZSBvZiBtaW5lLCBpZiByZWxlYXNlZCwgd2lsbCBzdWZmaWNlIHRvIGRvIHRoZSBidXNpbmVzcy4gCgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiB5ZSBjYW5ub3QgdHJ1c3QgbWUgd2l0aCBhIHN3b3JkLCBjYXN0IG1lIHVuZGVyIHRoZSBmZWV0IG9mIHlvdXIgZWxlcGhhbnRzLCBhbGwgYm91bmQgYXMgSSBhbS4gSWYgeWUgZG8gdGhpcywgSSB3aWxsIGFic29sdmUgeW91IGZyb20geW91ciBndWlsdCB0b3dhcmRzIG1lLCBob2xkaW5nIHRoYXQgeWUgaGF2ZSBzaG93biB5b3Vyc2VsdmVzIG1vc3QganVzdCBhbmQgcmlnaHRlb3VzIGluIHlvdXIgZGVhbGluZ3Mgd2l0aCB5b3VyIG93biBnZW5lcmFsLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIEV1bWVuZXMgc2FpZCB0aGlzLCB0aGUgcmVzdCBvZiB0aGUgdGhyb25nIHdhcyBvdmVyd2hlbG1lZCB3aXRoIHNvcnJvdywgYW5kIHNvbWUgd2VwdCwgYnV0IHRoZSBTaWx2ZXItc2hpZWxkcyBzaG91dGVkIHRvIGxlYWQgaGltIGFsb25nIGFuZCBwYXkgbm8gYXR0ZW50aW9uIHRvIGhpcyBiYWJibGluZzsgZm9yIGl0IHdhcyBub3Qgc28gZHJlYWRmdWwgYSB0aGluZywgdGhleSBzYWlkLCB0aGF0IGEgcGVzdCBmcm9tIHRoZSBDaGVyc29uZXN1cyBzaG91bGQgY29tZSB0byBncmllZiBmb3IgaGF2aW5nIGhhcmFzc2VkIE1hY2Vkb25pYW5zIHdpdGggaW5maW5pdGUgd2FycywgYXMgdGhhdCB0aGUgYmVzdCBvZiB0aGUgc29sZGllcnMgb2YgUGhpbGlwIGFuZCBBbGV4YW5kZXIsIGFmdGVyIGFsbCB0aGVpciB0b2lscywgc2hvdWxkIGluIHRoZWlyIG9sZCBhZ2UgYmUgcm9iYmVkIG9mIHRoZWlyIHJld2FyZHMgYW5kIGdldCB0aGVpciBzdXBwb3J0IGZyb20gb3RoZXJzLCBhbmQgdGhhdCB0aGVpciB3aXZlcyBzaG91bGQgYmUgc3BlbmRpbmcgdGhlIHRoaXJkIG5pZ2h0IG5vdyBpbiB0aGUgYXJtcyBvZiB0aGVpciBlbmVtaWVzLiBBdCB0aGUgc2FtZSB0aW1lIHRoZXkgbGVkIGhpbSBhbG9uZyBhdCBhIHF1aWNrZW5lZCBwYWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgRXVtZW5lcyBzYWlkIHRoaXMsIHRoZSByZXN0IG9mIHRoZSB0aHJvbmcgd2FzIG92ZXJ3aGVsbWVkIHdpdGggc29ycm93LCBhbmQgc29tZSB3ZXB0LCBidXQgdGhlIFNpbHZlci1zaGllbGRzIHNob3V0ZWQgdG8gbGVhZCBoaW0gYWxvbmcgYW5kIHBheSBubyBhdHRlbnRpb24gdG8gaGlzIGJhYmJsaW5nOyBmb3IgaXQgd2FzIG5vdCBzbyBkcmVhZGZ1bCBhIHRoaW5nLCB0aGV5IHNhaWQsIHRoYXQgYSBwZXN0IGZyb20gdGhlIENoZXJzb25lc3VzIHNob3VsZCBjb21lIHRvIGdyaWVmIGZvciBoYXZpbmcgaGFyYXNzZWQgTWFjZWRvbmlhbnMgd2l0aCBpbmZpbml0ZSB3YXJzLCBhcyB0aGF0IHRoZSBiZXN0IG9mIHRoZSBzb2xkaWVycyBvZiBQaGlsaXAgYW5kIEFsZXhhbmRlciwgYWZ0ZXIgYWxsIHRoZWlyIHRvaWxzLCBzaG91bGQgaW4gdGhlaXIgb2xkIGFnZSBiZSByb2JiZWQgb2YgdGhlaXIgcmV3YXJkcyBhbmQgZ2V0IHRoZWlyIHN1cHBvcnQgZnJvbSBvdGhlcnMsIGFuZCB0aGF0IHRoZWlyIHdpdmVzIHNob3VsZCBiZSBzcGVuZGluZyB0aGUgdGhpcmQgbmlnaHQgbm93IGluIHRoZSBhcm1zIG9mIHRoZWlyIGVuZW1pZXMuIEF0IHRoZSBzYW1lIHRpbWUgdGhleSBsZWQgaGltIGFsb25nIGF0IGEgcXVpY2tlbmVkIHBhY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUJ1dCBBbnRpZ29udXMsIGZlYXJpbmcgdGhlaXIgbXVsdGl0dWRlIChzaW5jZSBubyBvbmUgaGFkIGJlZW4gbGVmdCBiZWhpbmQgaW4gdGhlIGNhbXApLCBzZW50IG91dCB0ZW4gb2YgaGlzIHN0cm9uZ2VzdCBlbGVwaGFudHMgYW5kIGEgZ3JlYXQgbnVtYmVyIG9mIE1lZGlhbiBhbmQgUGFydGhpYW4gc3BlYXItbWVuIHRvIGRyaXZlIGF3YXkgdGhlIHRocm9uZy4gSGUgaGltc2VsZiBjb3VsZCBub3QgZW5kdXJlIHRvIHNlZSBFdW1lbmVzLCBieSByZWFzb24gb2YgdGhlaXIgZm9ybWVyIGludGltYXRlIGZyaWVuZHNoaXAsIGFuZCB3aGVuIHRob3NlIHdobyBoYWQgcmVjZWl2ZWQgaGltIGFza2VkIGhvdyB0aGV5IHNob3VsZCBndWFyZCBoaXMgcGVyc29uLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkp1c3QgYXMgeWUgd291bGQgYW4gZWxlcGhhbnQgb3IgYSBsaW9uLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgYSBsaXR0bGUgd2hpbGUgaGUgYmVjYW1lIGNvbXBhc3Npb25hdGUgYW5kIG9yZGVyZWQgdGhlIGtlZXBlcnMgdG8gcmVtb3ZlIHRoZSBwcmlzb25lcidzIGhlYXZ5IGZldHRlcnMgYW5kIGFkbWl0IG9uZSBvZiBoaXMgcGVyc29uYWwgc2VydmFudHMgdG8gYW5vaW50IGhpbSwgYW5kIHBlcm1pdHRlZCBhbnkgb25lIG9mIGhpcyBmcmllbmRzIHdobyB3aXNoZWQgdG8gc3BlbmQgdGhlIGRheSB3aXRoIGhpbSBhbmQgYnJpbmcgaGltIHdoYXQgaGUgbmVlZGVkLiBUaGVuIGhlIGRlbGliZXJhdGVkIG1hbnkgZGF5cyB3aGF0IHRvIGRvIHdpdGggaGltLCBhbmQgY29uc2lkZXJlZCB2YXJpb3VzIGFyZ3VtZW50cyBhbmQgc3VnZ2VzdGlvbnMsIERlbWV0cml1cyBoaXMgc29uIGFuZCBOZWFyY2h1cyB0aGUgQ3JldGFuIGJlaW5nIGVhZ2VyIHRvIHNhdmUgdGhlIGxpZmUgb2YgRXVtZW5lcywgd2hpbGUgdGhlIHJlc3QsIGFsbW9zdCBhbGwgb2YgdGhlbSwgd2VyZSBpbnNpc3RlbnQgaW4gdXJnaW5nIHRoYXQgaGUgYmUgcHV0IHRvIGRlYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IEFudGlnb251cywgZmVhcmluZyB0aGVpciBtdWx0aXR1ZGUgKHNpbmNlIG5vIG9uZSBoYWQgYmVlbiBsZWZ0IGJlaGluZCBpbiB0aGUgY2FtcCksIHNlbnQgb3V0IHRlbiBvZiBoaXMgc3Ryb25nZXN0IGVsZXBoYW50cyBhbmQgYSBncmVhdCBudW1iZXIgb2YgTWVkaWFuIGFuZCBQYXJ0aGlhbiBzcGVhci1tZW4gdG8gZHJpdmUgYXdheSB0aGUgdGhyb25nLiBIZSBoaW1zZWxmIGNvdWxkIG5vdCBlbmR1cmUgdG8gc2VlIEV1bWVuZXMsIGJ5IHJlYXNvbiBvZiB0aGVpciBmb3JtZXIgaW50aW1hdGUgZnJpZW5kc2hpcCwgYW5kIHdoZW4gdGhvc2Ugd2hvIGhhZCByZWNlaXZlZCBoaW0gYXNrZWQgaG93IHRoZXkgc2hvdWxkIGd1YXJkIGhpcyBwZXJzb24sIGhlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5KdXN0IGFzIHllIHdvdWxkIGFuIGVsZXBoYW50IG9yIGEgbGlvbi48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhIGxpdHRsZSB3aGlsZSBoZSBiZWNhbWUgY29tcGFzc2lvbmF0ZSBhbmQgb3JkZXJlZCB0aGUga2VlcGVycyB0byByZW1vdmUgdGhlIHByaXNvbmVyJ3MgaGVhdnkgZmV0dGVycyBhbmQgYWRtaXQgb25lIG9mIGhpcyBwZXJzb25hbCBzZXJ2YW50cyB0byBhbm9pbnQgaGltLCBhbmQgcGVybWl0dGVkIGFueSBvbmUgb2YgaGlzIGZyaWVuZHMgd2hvIHdpc2hlZCB0byBzcGVuZCB0aGUgZGF5IHdpdGggaGltIGFuZCBicmluZyBoaW0gd2hhdCBoZSBuZWVkZWQuIFRoZW4gaGUgZGVsaWJlcmF0ZWQgbWFueSBkYXlzIHdoYXQgdG8gZG8gd2l0aCBoaW0sIGFuZCBjb25zaWRlcmVkIHZhcmlvdXMgYXJndW1lbnRzIGFuZCBzdWdnZXN0aW9ucywgRGVtZXRyaXVzIGhpcyBzb24gYW5kIE5lYXJjaHVzIHRoZSBDcmV0YW4gYmVpbmcgZWFnZXIgdG8gc2F2ZSB0aGUgbGlmZSBvZiBFdW1lbmVzLCB3aGlsZSB0aGUgcmVzdCwgYWxtb3N0IGFsbCBvZiB0aGVtLCB3ZXJlIGluc2lzdGVudCBpbiB1cmdpbmcgdGhhdCBoZSBiZSBwdXQgdG8gZGVhdGguCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCBhbHNvLCB0aGF0IEV1bWVuZXMgYXNrZWQgaGlzIGtlZXBlciwgT25vbWFyY2h1cywgd2h5IGluIHRoZSB3b3JsZCBBbnRpZ29udXMsIG5vdyB0aGF0IGhlIGhhZCBnb3QgYSBoYXRlZCBlbmVteSBpbiBoaXMgaGFuZHMsIG5laXRoZXIga2lsbGVkIGhpbSBzcGVlZGlseSBub3IgZ2VuZXJvdXNseSBzZXQgaGltIGZyZWU7IGFuZCB3aGVuIE9ub21hcmNodXMgaW5zb2xlbnRseSB0b2xkIGhpbSBpdCB3YXMgbm90IG5vdywgYnV0IG9uIHRoZSBmaWVsZCBvZiBiYXR0bGUsIHRoYXQgaGUgc2hvdWxkIGhhdmUgZmFjZWQgZGVhdGggYm9sZGx5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllYSwgYnkgWmV1cyw8L3E+IHNhaWQgRXVtZW5lcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGVuLCB0b28sIEkgZGlkIHNvOyBhc2sgdGhlIG1lbiB3aG8gZm91Z2h0IHdpdGggbWU7IEkga25vdyB0aGF0IG5vbmUgSSBtZXQgd2FzIGEgYmV0dGVyIG1hbi48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCB0aGVuLDwvcT4gc2FpZCBPbm9tYXJjaHVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNpbmNlIG5vdyB0aG91IGhhc3QgZm91bmQgdGh5IGJldHRlciwgd2h5IGNhbnN0IHRob3Ugbm90IGJpZGUgaGlzIHRpbWU/PC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCBhbHNvLCB0aGF0IEV1bWVuZXMgYXNrZWQgaGlzIGtlZXBlciwgT25vbWFyY2h1cywgd2h5IGluIHRoZSB3b3JsZCBBbnRpZ29udXMsIG5vdyB0aGF0IGhlIGhhZCBnb3QgYSBoYXRlZCBlbmVteSBpbiBoaXMgaGFuZHMsIG5laXRoZXIga2lsbGVkIGhpbSBzcGVlZGlseSBub3IgZ2VuZXJvdXNseSBzZXQgaGltIGZyZWU7IGFuZCB3aGVuIE9ub21hcmNodXMgaW5zb2xlbnRseSB0b2xkIGhpbSBpdCB3YXMgbm90IG5vdywgYnV0IG9uIHRoZSBmaWVsZCBvZiBiYXR0bGUsIHRoYXQgaGUgc2hvdWxkIGhhdmUgZmFjZWQgZGVhdGggYm9sZGx5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVhLCBieSBaZXVzLDwvcT4gc2FpZCBFdW1lbmVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlbiwgdG9vLCBJIGRpZCBzbzsgYXNrIHRoZSBtZW4gd2hvIGZvdWdodCB3aXRoIG1lOyBJIGtub3cgdGhhdCBub25lIEkgbWV0IHdhcyBhIGJldHRlciBtYW4uPC9xPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCB0aGVuLDwvcT4gc2FpZCBPbm9tYXJjaHVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2luY2Ugbm93IHRob3UgaGFzdCBmb3VuZCB0aHkgYmV0dGVyLCB3aHkgY2Fuc3QgdGhvdSBub3QgYmlkZSBoaXMgdGltZT88L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZW4sIEFudGlnb251cyBoYWQgZGVjaWRlZCB0byBraWxsIEV1bWVuZXMsIGhlIGdhdmUgb3JkZXJzIHRvIGRlcHJpdmUgaGltIG9mIGZvb2QuIEFuZCBzbywgYWZ0ZXIgdHdvIG9yIHRocmVlIGRheXMgb2YgZmFzdGluZywgdGhlIHByaXNvbmVyIGJlZ2FuIHRvIGRyYXcgbmlnaCBoaXMgZW5kLiBCdXQgY2FtcCB3YXMgc3VkZGVubHkgYnJva2VuIGFuZCBhIG1hbiB3YXMgc2VudCB0byBkaXNwYXRjaCBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIE5lcG9zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iTmVwLiBFdW0uIDEyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RXVtZW5lczwvdGl0bGU+LCB4aWkuIDQ8L2JpYmw+KSwgRXVtZW5lcyB3YXMgc3RyYW5nbGVkIGJ5IGhpcyBrZWVwZXJzLCB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgQW50aWdvbnVzLjwvbm90ZT4gSGlzIGJvZHksIGhvd2V2ZXIsIHdhcyBkZWxpdmVyZWQgdG8gaGlzIGZyaWVuZHMgYnkgQW50aWdvbnVzLCB3aG8gcGVybWl0dGVkIHRoZW0gdG8gYnVybiBpdCBhbmQgY29sbGVjdCB0aGUgYXNoZXMgYW5kIHBsYWNlIHRoZW0gaW4gYSBzaWx2ZXIgdXJuLCB0aGF0IHRoZXkgbWlnaHQgYmUgcmV0dXJuZWQgdG8gaGlzIHdpZmUgYW5kIGNoaWxkcmVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlbiwgQW50aWdvbnVzIGhhZCBkZWNpZGVkIHRvIGtpbGwgRXVtZW5lcywgaGUgZ2F2ZSBvcmRlcnMgdG8gZGVwcml2ZSBoaW0gb2YgZm9vZC4gQW5kIHNvLCBhZnRlciB0d28gb3IgdGhyZWUgZGF5cyBvZiBmYXN0aW5nLCB0aGUgcHJpc29uZXIgYmVnYW4gdG8gZHJhdyBuaWdoIGhpcyBlbmQuIEJ1dCBjYW1wIHdhcyBzdWRkZW5seSBicm9rZW4gYW5kIGEgbWFuIHdhcyBzZW50IHRvIGRpc3BhdGNoIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBOZXBvcyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTmVwLiBFdW0uIDEyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmVzPC90aXRsZT4sIHhpaS4gNDwvYmlibD4pLCBFdW1lbmVzIHdhcyBzdHJhbmdsZWQgYnkgaGlzIGtlZXBlcnMsIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiBBbnRpZ29udXMuPC9ub3RlPiBIaXMgYm9keSwgaG93ZXZlciwgd2FzIGRlbGl2ZXJlZCB0byBoaXMgZnJpZW5kcyBieSBBbnRpZ29udXMsIHdobyBwZXJtaXR0ZWQgdGhlbSB0byBidXJuIGl0IGFuZCBjb2xsZWN0IHRoZSBhc2hlcyBhbmQgcGxhY2UgdGhlbSBpbiBhIHNpbHZlciB1cm4sIHRoYXQgdGhleSBtaWdodCBiZSByZXR1cm5lZCB0byBoaXMgd2lmZSBhbmQgY2hpbGRyZW4uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ik5lcC4gRXVtLiAxMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXVtZW5lczwvdGl0bGU+LCB4aWkuIDQ8L2JpYmw+KSwgRXVtZW5lcyB3YXMgc3RyYW5nbGVkIGJ5IGhpcyBrZWVwZXJzLCB3aXRob3V0IHRoZSBrbm93bGVkZ2Ugb2YgQW50aWdvbnVzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV1bWVuZXM8L3RpdGxlPiwgeGlpLiA0PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RXVtZW5lcyB0aHVzIHNsYWluLCBvbiBubyBvdGhlciBtYW4gdGhhbiBBbnRpZ29udXMgZGlkIEhlYXZlbiBkZXZvbHZlIHRoZSBwdW5pc2htZW50IG9mIHRoZSBzb2xkaWVycyBhbmQgY29tbWFuZGVycyB3aG8gYmV0cmF5ZWQgaGltLCBidXQgaGUgaGltc2VsZiwgcmVnYXJkaW5nIHRoZSBTaWx2ZXItc2hpZWxkcyBhcyBpbXBpb3VzIGFuZCBiZXN0aWFsIG1lbiwgcHV0IHRoZW0gaW50byB0aGUgc2VydmljZSBvZiBTaWJ5cnRpdXMgdGhlIGdvdmVybm9yIG9mIEFyYWNob3NpYSwgb3JkZXJpbmcgaGltIHRvIHdlYXIgdGhlbSBvdXQgYW5kIGRlc3Ryb3kgdGhlbSBpbiBldmVyeSBwb3NzaWJsZSB3YXksIHRoYXQgbm90IGEgbWFuIG9mIHRoZW0gbWlnaHQgZXZlciByZXR1cm4gdG8gTWFjZWRvbmlhIG9yIGJlaG9sZCB0aGUgR3JlY2lhbiBzZWEuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
