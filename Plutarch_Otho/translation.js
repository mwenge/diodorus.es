var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgT3RobyBzcG9rZSBhdCBsZW5ndGggaW4gYSBraW5kbHkgc3RyYWluIGFuZCBsaWtlIGEgcG9wdWxhciBsZWFkZXIuIEZvciBwYXJ0IG9mIHRoZSB0aW1lIGR1cmluZyB3aGljaCBoZSBoaW1zZWxmIHdhcyB0byBoYXZlIGJlZW4gY29uc3VsLCBoZSBhc3NpZ25lZCB0aGUgb2ZmaWNlIHRvIFZlcmdpbml1cyBSdWZ1cywgYW5kIGFsbCB0aG9zZSB3aG8gaGFkIGJlZW4gZGVzaWduYXRlZCBhcyBmdXR1cmUgY29uc3VscyBieSBOZXJvIG9yIEdhbGJhIGhlIGNvbmZpcm1lZCBpbiB0aGVpciBhcHBvaW50bWVudC4gVG8gdGhlIHByaWVzdGhvb2RzIGhlIHByb21vdGVkIHRob3NlIHdobyB3ZXJlIHByZWVtaW5lbnQgaW4gYWdlIG9yIHJlcHV0YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0byBhbGwgdGhlIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmsgd2hvIGhhZCBiZWVuIGV4aWxlZCB1bmRlciBOZXJvIGFuZCByZXN0b3JlZCB1bmRlciBHYWxiYSwgaGUgcmVzdG9yZWQgd2hhdGV2ZXIgcG9ydGlvbnMgb2YgZWFjaCBtYW4ncyBwcm9wZXJ0eSBoZSBmb3VuZCB0byBiZSB1bnNvbGQuIFdoZXJlZm9yZSB0aGUgY2l0aXplbnMgb2YgaGlnaGVzdCBiaXJ0aCBhbmQgZ3JlYXRlc3QgaW5mbHVlbmNlLCB3aG8gYmVmb3JlIHRoaXMgaGFkIGZlbHQgYSBzaHVkZGVyaW5nIGZlYXIgdGhhdCBpdCB3YXMgbm90IGEgbWFuLCBidXQgc29tZSBnZW5pdXMgb2YgcmV0cmlidXRpb24gb3IgYXZlbmdpbmcgc3Bpcml0LCB0aGF0IGhhZCBzdWRkZW5seSBmYWxsZW4gdXBvbiB0aGUgc3RhdGUsIGJlY2FtZSBtb3JlIGNoZWVyZnVsIGluIHRoZWlyIGhvcGVzIGZvciBhIGdvdmVybm1lbnQgd2hpY2ggd29yZSBhIGZhY2Ugc28gc21pbGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90aGluZyBzbyBnbGFkZGVuZWQgYWxsIFJvbWFucyBhbGlrZSwgYW5kIHdvbiB0aGVpciBhbGxlZ2lhbmNlIHRvIHRoZSBuZXcgZW1wZXJvciBzbyBtdWNoLCBhcyBoaXMgdHJlYXRtZW50IG9mIFRpZ2VsbGludXMuIE1lbiB3ZXJlIG5vdCBhd2FyZSB0aGF0IFRpZ2VsbGludXMgd2FzIGFscmVhZHkgcHVuaXNoZWQgYnkgaGlzIHZlcnkgZmVhciBvZiB0aGF0IHB1bmlzaG1lbnQgd2hpY2ggdGhlIGNpdHkgd2FzIGRlbWFuZGluZyBhcyBhIGRlYnQgZHVlIHRvIHRoZSBwdWJsaWMsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhbHNvIGJ5IGluY3VyYWJsZSBib2RpbHkgZGlzZWFzZXM7IGFuZCBiZXNpZGVzLCB0aGVyZSB3ZXJlIHRob3NlIHVuaGFsbG93ZWQgYW5kIHVuc3BlYWthYmxlIGdyb3ZlbGxpbmdzIG9mIGhpcyBhbW9uZyB0aGUgdmlsZXN0IGhhcmxvdHMsIGZvciB3aGljaCBoaXMgbHVzdGZ1bCBuYXR1cmUgc3RpbGwgcGFudGVkLCBjbHV0Y2hpbmcgYWZ0ZXIgdGhlbSBhcyBoaXMgbGlmZSBwYWluZnVsbHkgZWJiZWQgYXdheTsgdGhlc2Ugd2VyZSBsb29rZWQgdXBvbiBieSByZWFzb25hYmxlIG1lbiBhcyBleHRyZW1lc3QgcHVuaXNobWVudCBhbmQgYW4gZXF1aXZhbGVudCBvZiBtYW55IGRlYXRocy4gTmV2ZXJ0aGVsZXNzIGl0IHZleGVkIHRoZSBjb21tb24gcGVvcGxlIHRoYXQgaGUgc2hvdWxkIHNlZSB0aGUgbGlnaHQgb2YgZGF5IGFmdGVyIHNvIG1hbnkgZ29vZCBtZW4gaGFkIGJlZW4gcm9iYmVkIG9mIHRoYXQgbGlnaHQgYnkgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgT3RobyBzZW50IGEgbWVzc2VuZ2VyIHRvIGZldGNoIGhpbSBmcm9tIGhpcyBjb3VudHJ5IGVzdGF0ZSBhdCBTaW51ZXNzYTsgZm9yIGhlIHdhcyBzdGF5aW5nIHRoZXJlLCB3aGVyZSB2ZXNzZWxzIGxheSBhdCBhbmNob3IsIHRoYXQgaGUgbWlnaHQgZmx5IHRvIG1vcmUgZGlzdGFudCBwYXJ0cy4gSGUgdHJpZWQgdG8gYnJpYmUgdGhlIG1lc3NlbmdlciB3aXRoIGEgbGFyZ2Ugc3VtIG9mIG1vbmV5IHRvIGxldCBoaW0gZ28sIGJ1dCBmYWlsaW5nIGluIHRoaXMsIGhlIG1hZGUgaGltIGdpZnRzIG5ldmVydGhlbGVzcywgYW5kIGJlZ2dlZCBoaW0gdG8gd2FpdCB0aWxsIGhlIGhhZCBzaGF2ZWQ7IGFuZCB0YWtpbmcgdGhlIHJhem9yIGhlIGN1dCBoaXMgb3duIHRocm9hdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90aGluZyBzbyBnbGFkZGVuZWQgYWxsIFJvbWFucyBhbGlrZSwgYW5kIHdvbiB0aGVpciBhbGxlZ2lhbmNlIHRvIHRoZSBuZXcgZW1wZXJvciBzbyBtdWNoLCBhcyBoaXMgdHJlYXRtZW50IG9mIFRpZ2VsbGludXMuIE1lbiB3ZXJlIG5vdCBhd2FyZSB0aGF0IFRpZ2VsbGludXMgd2FzIGFscmVhZHkgcHVuaXNoZWQgYnkgaGlzIHZlcnkgZmVhciBvZiB0aGF0IHB1bmlzaG1lbnQgd2hpY2ggdGhlIGNpdHkgd2FzIGRlbWFuZGluZyBhcyBhIGRlYnQgZHVlIHRvIHRoZSBwdWJsaWMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhbHNvIGJ5IGluY3VyYWJsZSBib2RpbHkgZGlzZWFzZXM7IGFuZCBiZXNpZGVzLCB0aGVyZSB3ZXJlIHRob3NlIHVuaGFsbG93ZWQgYW5kIHVuc3BlYWthYmxlIGdyb3ZlbGxpbmdzIG9mIGhpcyBhbW9uZyB0aGUgdmlsZXN0IGhhcmxvdHMsIGZvciB3aGljaCBoaXMgbHVzdGZ1bCBuYXR1cmUgc3RpbGwgcGFudGVkLCBjbHV0Y2hpbmcgYWZ0ZXIgdGhlbSBhcyBoaXMgbGlmZSBwYWluZnVsbHkgZWJiZWQgYXdheTsgdGhlc2Ugd2VyZSBsb29rZWQgdXBvbiBieSByZWFzb25hYmxlIG1lbiBhcyBleHRyZW1lc3QgcHVuaXNobWVudCBhbmQgYW4gZXF1aXZhbGVudCBvZiBtYW55IGRlYXRocy4gTmV2ZXJ0aGVsZXNzIGl0IHZleGVkIHRoZSBjb21tb24gcGVvcGxlIHRoYXQgaGUgc2hvdWxkIHNlZSB0aGUgbGlnaHQgb2YgZGF5IGFmdGVyIHNvIG1hbnkgZ29vZCBtZW4gaGFkIGJlZW4gcm9iYmVkIG9mIHRoYXQgbGlnaHQgYnkgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBPdGhvIHNlbnQgYSBtZXNzZW5nZXIgdG8gZmV0Y2ggaGltIGZyb20gaGlzIGNvdW50cnkgZXN0YXRlIGF0IFNpbnVlc3NhOyBmb3IgaGUgd2FzIHN0YXlpbmcgdGhlcmUsIHdoZXJlIHZlc3NlbHMgbGF5IGF0IGFuY2hvciwgdGhhdCBoZSBtaWdodCBmbHkgdG8gbW9yZSBkaXN0YW50IHBhcnRzLiBIZSB0cmllZCB0byBicmliZSB0aGUgbWVzc2VuZ2VyIHdpdGggYSBsYXJnZSBzdW0gb2YgbW9uZXkgdG8gbGV0IGhpbSBnbywgYnV0IGZhaWxpbmcgaW4gdGhpcywgaGUgbWFkZSBoaW0gZ2lmdHMgbmV2ZXJ0aGVsZXNzLCBhbmQgYmVnZ2VkIGhpbSB0byB3YWl0IHRpbGwgaGUgaGFkIHNoYXZlZDsgYW5kIHRha2luZyB0aGUgcmF6b3IgaGUgY3V0IGhpcyBvd24gdGhyb2F0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhhdCB0aGUgZW1wZXJvciBoYWQgZ2l2ZW4gdGhlIHBlb3BsZSB0aGlzIG1vc3QgcmlnaHRlb3VzIGdyYXRpZmljYXRpb24sIGhlIGRpZCBub3QgcmVtZW1iZXIgaGlzIG93biBwcml2YXRlIGdyaWV2YW5jZXMgYWdhaW5zdCBhbnkgbWFuIHNvZXZlciwgYW5kIGluIGhpcyBkZXNpcmUgdG8gcGxlYXNlIHRoZSBtdWx0aXR1ZGUgZGlkIG5vdCByZWZ1c2UgYXQgZmlyc3QgdG8gYmUgaGFpbGVkIGluIHRoZSB0aGVhdHJlcyBieSB0aGUgbmFtZSBvZiBOZXJvLCBhbmQgd2hlbiBzdGF0dWVzIG9mIE5lcm8gd2VyZSBwcm9kdWNlZCBpbiBwdWJsaWMsIGhlIGRpZCBub3QgcHJldmVudCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIENsdXZpdXMgUnVmdXMgdGVsbHMgdXMgdGhhdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpcGxvbWFzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDguNCIgdmFsaWQ9InllcyI+Q2hhcC4gdmlpaSA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBzdWNoIGFzIGNvdXJpZXJzIGFyZSBwcm92aWRlZCB3aXRoLCB3ZXJlIHNlbnQgdG8gU3BhaW4sIGluIHdoaWNoIHRoZSBjb2dub21lbiBvZiBOZXJvIHdhcyBhZGRlZCB0byB0aGUgbmFtZSBvZiBPdGhvLiBIb3dldmVyLCBwZXJjZWl2aW5nIHRoYXQgdGhlIG1lbiBvZiBoaWdoZXN0IGJpcnRoIGFuZCBncmVhdGVzdCBpbmZsdWVuY2Ugd2VyZSBkaXNwbGVhc2VkIGF0IHRoaXMsIE90aG8gZ2F2ZSB1cCB0aGUgcHJhY3RpY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHRoYXQgdGhlIGVtcGVyb3IgaGFkIGdpdmVuIHRoZSBwZW9wbGUgdGhpcyBtb3N0IHJpZ2h0ZW91cyBncmF0aWZpY2F0aW9uLCBoZSBkaWQgbm90IHJlbWVtYmVyIGhpcyBvd24gcHJpdmF0ZSBncmlldmFuY2VzIGFnYWluc3QgYW55IG1hbiBzb2V2ZXIsIGFuZCBpbiBoaXMgZGVzaXJlIHRvIHBsZWFzZSB0aGUgbXVsdGl0dWRlIGRpZCBub3QgcmVmdXNlIGF0IGZpcnN0IHRvIGJlIGhhaWxlZCBpbiB0aGUgdGhlYXRyZXMgYnkgdGhlIG5hbWUgb2YgTmVybywgYW5kIHdoZW4gc3RhdHVlcyBvZiBOZXJvIHdlcmUgcHJvZHVjZWQgaW4gcHVibGljLCBoZSBkaWQgbm90IHByZXZlbnQgaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDbHV2aXVzIFJ1ZnVzIHRlbGxzIHVzIHRoYXQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRpcGxvbWFzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gT3RoLiA4LjQiIHZhbGlkPSJ5ZXMiPkNoYXAuIHZpaWkgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gc3VjaCBhcyBjb3VyaWVycyBhcmUgcHJvdmlkZWQgd2l0aCwgd2VyZSBzZW50IHRvIFNwYWluLCBpbiB3aGljaCB0aGUgY29nbm9tZW4gb2YgTmVybyB3YXMgYWRkZWQgdG8gdGhlIG5hbWUgb2YgT3Roby4gSG93ZXZlciwgcGVyY2VpdmluZyB0aGF0IHRoZSBtZW4gb2YgaGlnaGVzdCBiaXJ0aCBhbmQgZ3JlYXRlc3QgaW5mbHVlbmNlIHdlcmUgZGlzcGxlYXNlZCBhdCB0aGlzLCBPdGhvIGdhdmUgdXAgdGhlIHByYWN0aWNlLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDguNCIgdmFsaWQ9InllcyI+Q2hhcC4gdmlpaSA0LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgd2hpbGUgaGUgd2FzIHBsYWNpbmcgaGlzIGdvdmVybm1lbnQgb24gdGhpcyBiYXNpcywgdGhlIHBhaWQgc29sZGllcnMgYmVnYW4gdG8gbWFrZSB0aGVtc2VsdmVzIHRyb3VibGVzb21lIGJ5IHVyZ2luZyBoaW0gbm90IHRvIHRydXN0IHRoZSBpbmZsdWVudGlhbCBjaXRpemVucywgYnV0IHRvIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IHRoZW0gYW5kIHJlc3RyaWN0IHRoZWlyIHBvd2VyLiBJdCBpcyB1bmNlcnRhaW4gd2hldGhlciB0aGVpciBnb29kd2lsbCBsZWQgdGhlbSB0byBiZSByZWFsbHkgYXBwcmVoZW5zaXZlIGZvciBoaW0sIG9yIHdoZXRoZXIgdGhleSB1c2VkIHRoaXMgcHJldGV4dCBmb3IgcmFpc2luZyBkaXN0dXJiYW5jZSBhbmQgd2FyLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiB0aGUgZW1wZXJvciBzZW50IENyaXNwaW51cyB0byBicmluZyBiYWNrIHRoZSBzZXZlbnRlZW50aCBsZWdpb24gZnJvbSBPc3RpYSwgYW5kIHdoaWxlIHRoYXQgb2ZmaWNlciB3YXMgc3RpbGwgZ2V0dGluZyB0aGUgYmFnZ2FnZSB0b2dldGhlciBhdCBuaWdodCBhbmQgbG9hZGluZyB0aGUgYXJtcyB1cG9uIHRoZSB3YWdnb25zLCB0aGUgYm9sZGVzdCBvZiB0aGUgc29sZGllcnMgYWxsIGJlZ2FuIHRvIGNyeSBvdXQgdGhhdCBDcmlzcGludXMgd2FzIGNvbWUgb24gbm8gZ29vZCBlcnJhbmQsIGFuZCB0aGF0IHRoZSBzZW5hdGUgd2FzIGF0dGVtcHRpbmcgdG8gYnJpbmcgYWJvdXQgYSByZXZvbHV0aW9uLCBhbmQgdGhhdCB0aGUgdHJhbnNwb3J0YXRpb24gb2YgdGhlIGFybXMgd2FzIGFuIGFjdCBvZiBob3N0aWxpdHksIG5vdCBvZiBzZXJ2aWNlLCB0byB0aGUgZW1wZXJvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG5vdGlvbiBwcmV2YWlsZWQgd2l0aCBncmVhdCBudW1iZXJzIGFuZCBleGFzcGVyYXRlZCB0aGVtOyBzb21lIGF0dGFja2VkIHRoZSB3YWdnb25zLCBvdGhlcnMga2lsbGVkIHR3byBjZW50dXJpb25zIHdobyBvcHBvc2VkIHRoZW0sIGFzIHdlbGwgYXMgQ3Jpc3BpbnVzIGhpbXNlbGY7IGFuZCB0aGVuIHRoZSB3aG9sZSBib2R5LCBwdXR0aW5nIHRoZW1zZWx2ZXMgaW4gYXJyYXkgYW5kIGV4aG9ydGluZyBvbmUgYW5vdGhlciB0byBnbyB0byB0aGUgaGVscCBvZiB0aGUgZW1wZXJvciwgbWFyY2hlZCB0byBSb21lLiBIZXJlLCBsZWFybmluZyB0aGF0IGVpZ2h0eSBzZW5hdG9ycyB3ZXJlIGF0IHN1cHBlciB3aXRoIE90aG8sIHRoZXkgcnVzaGVkIHRvIHRoZSBwYWxhY2UsIGRlY2xhcmluZyB0aGF0IG5vdyB3YXMgYSBnb29kIHRpbWUgdG8gdGFrZSBvZmYgYWxsIHRoZSBlbXBlcm9yJ3MgZW5lbWllcyBhdCBvbmUgc3Ryb2tlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIGNpdHkgd2FzIGluIGdyZWF0IGNvbW1vdGlvbiwgZXhwZWN0aW5nIHRvIGJlIHBsdW5kZXJlZCBhdCBvbmNlOyBpbiB0aGUgcGFsYWNlIHRoZXJlIHdlcmUgcnVubmluZ3MgdG8gYW5kIGZybzsgYW5kIGEgZGlyZSBwZXJwbGV4aXR5IGZlbGwgdXBvbiBPdGhvLiBGb3Igd2hpbGUgaGUgaGFkIGZlYXJzIGFib3V0IHRoZSBzYWZldHkgb2YgaGlzIGd1ZXN0cywgaGUgaGltc2VsZiB3YXMgYW4gb2JqZWN0IG9mIGZlYXIgdG8gdGhlbSwgYW5kIGhlIHNhdyB0aGF0IHRoZXkga2VwdCB0aGVpciBleWVzIGZpeGVkIHVwb24gaGltIGluIHNwZWVjaGxlc3MgdGVycm9yLCBzb21lIG9mIHRoZW0gaGF2aW5nIGV2ZW4gYnJvdWdodCB0aGVpciB3aXZlcyB3aXRoIHRoZW0gdG8gdGhlIHN1cHBlci4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlIHNlbnQgdGhlIHByZWZlY3RzIG9mIHRoZSBndWFyZCB3aXRoIG9yZGVycyB0byBleHBsYWluIG1hdHRlcnMgdG8gdGhlIHNvbGRpZXJzIGFuZCBhcHBlYXNlIHRoZW0sIHdoaWxlIGF0IHRoZSBzYW1lIHRpbWUgaGUgZGlzbWlzc2VkIGhpcyBndWVzdHMgYnkgYW5vdGhlciBkb29yOyBhbmQgdGhleSBiYXJlbHkgc3VjY2VlZGVkIGluIG1ha2luZyB0aGVpciBlc2NhcGUgYXMgdGhlIHNvbGRpZXJzLCBmb3JjaW5nIHRoZWlyIHdheSB0aHJvdWdoIHRoZSBndWFyZHMgaW50byB0aGUgZ3JlYXQgaGFsbCwgYXNrZWQgd2hhdCB3YXMgYmVjb21lIG9mIHRoZSBlbmVtaWVzIG9mIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBjcmlzaXMsIHRoZW4sIE90aG8gc3Rvb2QgdXAgb24gaGlzIGNvdWNoLCBhbmQgYWZ0ZXIgbWFueSBleGhvcnRhdGlvbnMsIGFuZCBlbnRyZWF0aWVzLCBhbmQgbm90IHdpdGhvdXQgcGxlbnRpZnVsIHRlYXJzLCBhdCBsYXN0IHN1Y2NlZWRlZCBpbiBzZW5kaW5nIHRoZW0gYXdheTsgYnV0IG9uIHRoZSBmb2xsb3dpbmcgZGF5LCBhZnRlciBtYWtpbmcgYSBnaWZ0IG9mIHR3ZWx2ZSBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hcyB0byBldmVyeSBtYW4sIGhlIHdlbnQgaW50byB0aGUgY2FtcC4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaGUgY29tbWVuZGVkIHRoZSBncmVhdCBib2R5IG9mIHRoZSBzb2xkaWVycyBmb3IgdGhlaXIgZ29vZHdpbGwgYW5kIHplYWwgaW4gaGlzIHNlcnZpY2UsIGJ1dCBzYWlkIHRoYXQgdGhlcmUgd2VyZSBhIGZldyBvZiB0aGVtIHdobyB3ZXJlIGludHJpZ3VpbmcgdG8gbm8gZ29vZCBwdXJwb3NlLCB0aGVyZWJ5IGJyaW5naW5nIGhpcyBtb2RlcmF0aW9uIGFuZCB0aGVpciBmaWRlbGl0eSBpbnRvIGRpc3JlcHV0ZSwgYW5kIGhlIGRlbWFuZGVkIHRoYXQgdGhleSBzaGFyZSBoaXMgcmVzZW50bWVudCBhZ2FpbnN0IHRoZXNlIGFuZCBhc3Npc3QgaGltIGluIHB1bmlzaGluZyB0aGVtLiBBbGwgaGlzIGhlYXJlcnMgYXBwcm92aW5nIG9mIHRoaXMgYW5kIGJpZGRpbmcgaGltIHRvIGRvIGFzIGhlIHdpc2hlZCwgaGUgdG9vayB0d28gbWVuIG9ubHksIGF0IHdob3NlIHB1bmlzaG1lbnQgbm8gb25lIHdhcyBsaWtlbHkgdG8gYmUgZGlzdHJlc3NlZCwgYW5kIHdlbnQgYXdheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbywgd2hlbiB0aGUgZW1wZXJvciBzZW50IENyaXNwaW51cyB0byBicmluZyBiYWNrIHRoZSBzZXZlbnRlZW50aCBsZWdpb24gZnJvbSBPc3RpYSwgYW5kIHdoaWxlIHRoYXQgb2ZmaWNlciB3YXMgc3RpbGwgZ2V0dGluZyB0aGUgYmFnZ2FnZSB0b2dldGhlciBhdCBuaWdodCBhbmQgbG9hZGluZyB0aGUgYXJtcyB1cG9uIHRoZSB3YWdnb25zLCB0aGUgYm9sZGVzdCBvZiB0aGUgc29sZGllcnMgYWxsIGJlZ2FuIHRvIGNyeSBvdXQgdGhhdCBDcmlzcGludXMgd2FzIGNvbWUgb24gbm8gZ29vZCBlcnJhbmQsIGFuZCB0aGF0IHRoZSBzZW5hdGUgd2FzIGF0dGVtcHRpbmcgdG8gYnJpbmcgYWJvdXQgYSByZXZvbHV0aW9uLCBhbmQgdGhhdCB0aGUgdHJhbnNwb3J0YXRpb24gb2YgdGhlIGFybXMgd2FzIGFuIGFjdCBvZiBob3N0aWxpdHksIG5vdCBvZiBzZXJ2aWNlLCB0byB0aGUgZW1wZXJvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBub3Rpb24gcHJldmFpbGVkIHdpdGggZ3JlYXQgbnVtYmVycyBhbmQgZXhhc3BlcmF0ZWQgdGhlbTsgc29tZSBhdHRhY2tlZCB0aGUgd2FnZ29ucywgb3RoZXJzIGtpbGxlZCB0d28gY2VudHVyaW9ucyB3aG8gb3Bwb3NlZCB0aGVtLCBhcyB3ZWxsIGFzIENyaXNwaW51cyBoaW1zZWxmOyBhbmQgdGhlbiB0aGUgd2hvbGUgYm9keSwgcHV0dGluZyB0aGVtc2VsdmVzIGluIGFycmF5IGFuZCBleGhvcnRpbmcgb25lIGFub3RoZXIgdG8gZ28gdG8gdGhlIGhlbHAgb2YgdGhlIGVtcGVyb3IsIG1hcmNoZWQgdG8gUm9tZS4gSGVyZSwgbGVhcm5pbmcgdGhhdCBlaWdodHkgc2VuYXRvcnMgd2VyZSBhdCBzdXBwZXIgd2l0aCBPdGhvLCB0aGV5IHJ1c2hlZCB0byB0aGUgcGFsYWNlLCBkZWNsYXJpbmcgdGhhdCBub3cgd2FzIGEgZ29vZCB0aW1lIHRvIHRha2Ugb2ZmIGFsbCB0aGUgZW1wZXJvcidzIGVuZW1pZXMgYXQgb25lIHN0cm9rZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgY2l0eSB3YXMgaW4gZ3JlYXQgY29tbW90aW9uLCBleHBlY3RpbmcgdG8gYmUgcGx1bmRlcmVkIGF0IG9uY2U7IGluIHRoZSBwYWxhY2UgdGhlcmUgd2VyZSBydW5uaW5ncyB0byBhbmQgZnJvOyBhbmQgYSBkaXJlIHBlcnBsZXhpdHkgZmVsbCB1cG9uIE90aG8uIEZvciB3aGlsZSBoZSBoYWQgZmVhcnMgYWJvdXQgdGhlIHNhZmV0eSBvZiBoaXMgZ3Vlc3RzLCBoZSBoaW1zZWxmIHdhcyBhbiBvYmplY3Qgb2YgZmVhciB0byB0aGVtLCBhbmQgaGUgc2F3IHRoYXQgdGhleSBrZXB0IHRoZWlyIGV5ZXMgZml4ZWQgdXBvbiBoaW0gaW4gc3BlZWNobGVzcyB0ZXJyb3IsIHNvbWUgb2YgdGhlbSBoYXZpbmcgZXZlbiBicm91Z2h0IHRoZWlyIHdpdmVzIHdpdGggdGhlbSB0byB0aGUgc3VwcGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBzZW50IHRoZSBwcmVmZWN0cyBvZiB0aGUgZ3VhcmQgd2l0aCBvcmRlcnMgdG8gZXhwbGFpbiBtYXR0ZXJzIHRvIHRoZSBzb2xkaWVycyBhbmQgYXBwZWFzZSB0aGVtLCB3aGlsZSBhdCB0aGUgc2FtZSB0aW1lIGhlIGRpc21pc3NlZCBoaXMgZ3Vlc3RzIGJ5IGFub3RoZXIgZG9vcjsgYW5kIHRoZXkgYmFyZWx5IHN1Y2NlZWRlZCBpbiBtYWtpbmcgdGhlaXIgZXNjYXBlIGFzIHRoZSBzb2xkaWVycywgZm9yY2luZyB0aGVpciB3YXkgdGhyb3VnaCB0aGUgZ3VhcmRzIGludG8gdGhlIGdyZWF0IGhhbGwsIGFza2VkIHdoYXQgd2FzIGJlY29tZSBvZiB0aGUgZW5lbWllcyBvZiBDYWVzYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgY3Jpc2lzLCB0aGVuLCBPdGhvIHN0b29kIHVwIG9uIGhpcyBjb3VjaCwgYW5kIGFmdGVyIG1hbnkgZXhob3J0YXRpb25zLCBhbmQgZW50cmVhdGllcywgYW5kIG5vdCB3aXRob3V0IHBsZW50aWZ1bCB0ZWFycywgYXQgbGFzdCBzdWNjZWVkZWQgaW4gc2VuZGluZyB0aGVtIGF3YXk7IGJ1dCBvbiB0aGUgZm9sbG93aW5nIGRheSwgYWZ0ZXIgbWFraW5nIGEgZ2lmdCBvZiB0d2VsdmUgaHVuZHJlZCBhbmQgZmlmdHkgZHJhY2htYXMgdG8gZXZlcnkgbWFuLCBoZSB3ZW50IGludG8gdGhlIGNhbXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGhlIGNvbW1lbmRlZCB0aGUgZ3JlYXQgYm9keSBvZiB0aGUgc29sZGllcnMgZm9yIHRoZWlyIGdvb2R3aWxsIGFuZCB6ZWFsIGluIGhpcyBzZXJ2aWNlLCBidXQgc2FpZCB0aGF0IHRoZXJlIHdlcmUgYSBmZXcgb2YgdGhlbSB3aG8gd2VyZSBpbnRyaWd1aW5nIHRvIG5vIGdvb2QgcHVycG9zZSwgdGhlcmVieSBicmluZ2luZyBoaXMgbW9kZXJhdGlvbiBhbmQgdGhlaXIgZmlkZWxpdHkgaW50byBkaXNyZXB1dGUsIGFuZCBoZSBkZW1hbmRlZCB0aGF0IHRoZXkgc2hhcmUgaGlzIHJlc2VudG1lbnQgYWdhaW5zdCB0aGVzZSBhbmQgYXNzaXN0IGhpbSBpbiBwdW5pc2hpbmcgdGhlbS4gQWxsIGhpcyBoZWFyZXJzIGFwcHJvdmluZyBvZiB0aGlzIGFuZCBiaWRkaW5nIGhpbSB0byBkbyBhcyBoZSB3aXNoZWQsIGhlIHRvb2sgdHdvIG1lbiBvbmx5LCBhdCB3aG9zZSBwdW5pc2htZW50IG5vIG9uZSB3YXMgbGlrZWx5IHRvIGJlIGRpc3RyZXNzZWQsIGFuZCB3ZW50IGF3YXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvc2Ugd2hvIHdlcmUgYWxyZWFkeSBmb25kIG9mIE90aG8gYW5kIHB1dCBjb25maWRlbmNlIGluIGhpbSBhZG1pcmVkIHRoaXMgY2hhbmdlIGluIGhpcyBiZWhhdmlvdXIsIGJ1dCBvdGhlcnMgdGhvdWdodCBpdCBhIHBvbGljeSBmb3JjZWQgdXBvbiBoaW0gYnkgdGhlIHNpdHVhdGlvbiwgd2hlcmVpbiBoZSBjb3VydGVkIHBvcHVsYXIgZmF2b3VyIGJlY2F1c2Ugb2YgdGhlIHdhci4gRm9yIGFscmVhZHkgdGhlcmUgd2VyZSBzdXJlIHRpZGluZ3MgdGhhdCBWaXRlbGxpdXMgaGFkIGFzc3VtZWQgdGhlIGRpZ25pdHkgYW5kIHBvd2VyIG9mIGVtcGVyb3I7IGFuZCBzd2lmdCBjb3VyaWVycyB3ZXJlIGNvbnRpbnVhbGx5IGNvbWluZyB3aXRoIGFjY291bnRzIG9mIGV2ZXIgbmV3IGFjY2Vzc2lvbnMgdG8gaGltLCBhbHRob3VnaCBvdGhlcnMgbWFkZSBpdCBjbGVhciB0aGF0IHRoZSBhcm1pZXMgaW4gUGFubm9uaWEsIERhbG1hdGlhLCBhbmQgTXlzaWEsIHdpdGggdGhlaXIgbGVhZGVycywgYWRoZXJlZCB0byBPdGhvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgcXVpY2tseSB0aGVyZSBjYW1lIGFsc28gZnJpZW5kbHkgbGV0dGVycyBmcm9tIE11Y2lhbnVzIGFuZCBWZXNwYXNpYW4sIHdobyB3ZXJlIGF0IHRoZSBoZWFkIG9mIGxhcmdlIGZvcmNlcywgdGhlIG9uZSBpbiBTeXJpYSwgdGhlIG90aGVyIGluIEp1ZGFlYS4gT3RobyB3YXMgZWxhdGVkIGJ5IHRoZXNlLCBhbmQgd3JvdGUgdG8gVml0ZWxsaXVzIGFkdmlzaW5nIGhpbSBub3QgdG8gaGF2ZSBtb3JlIHRoYW4gYSBzb2xkaWVyJ3MgYW1iaXRpb25zLCBpbiB3aGljaCBjYXNlIGhlIHNob3VsZCBiZSByZXdhcmRlZCB3aXRoIGEgbGFyZ2Ugc3VtIG9mIG1vbmV5LCBhbmQgYSBjaXR5LCB3aGVyZSBoZSBjb3VsZCBsaXZlIGluIHRoZSB1dG1vc3QgZWFzZSBhbmQgcGxlYXN1cmUgYW5kIGJlIHVuZGlzdHVyYmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5WaXRlbGxpdXMgYWxzbyB3cm90ZSB0byBPdGhvIGluIHJlcGx5LCBhdCBmaXJzdCBpbiBhIHNvbWV3aGF0IGRpc3NlbWJsaW5nIG1hbm5lcjsgYnV0IGFmdGVyd2FyZHMgYm90aCBnb3QgZXhjaXRlZCBhbmQgd3JvdGUgb25lIGFub3RoZXIgYWJ1c2l2ZSBsZXR0ZXJzIGZpbGxlZCB3aXRoIHNoYW1lZnVsIGluc3VsdHM7IG5vdCB0aGF0IGVpdGhlciBicm91Z2h0IGZhbHNlIGNoYXJnZXMsIGJ1dCBpdCB3YXMgZm9vbGlzaCBhbmQgcmlkaWN1bG91cyBmb3Igb25lIHRvIHN0b3JtIHRoZSBvdGhlciB3aXRoIHJlcHJvYWNoZXMgYXBwbGljYWJsZSB0byBib3RoLiBGb3IgYXMgcmVnYXJkcyBwcm9kaWdhbGl0eSwgZWZmZW1pbmFjeSwgaW5leHBlcmllbmNlIGluIHdhciwgYW5kIG11bHRpcGxpY2l0eSBvZiBkZWJ0cyBpbmN1cnJlZCBpbiBhIHByZXZpb3VzIHN0YXRlIG9mIHBvdmVydHksIGl0IHdlcmUgaGFyZCB0byBzYXkgd2hpY2ggb2YgdGhlbSBoYWQgdGhlIGFkdmFudGFnZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gd2VyZSBhbHJlYWR5IGZvbmQgb2YgT3RobyBhbmQgcHV0IGNvbmZpZGVuY2UgaW4gaGltIGFkbWlyZWQgdGhpcyBjaGFuZ2UgaW4gaGlzIGJlaGF2aW91ciwgYnV0IG90aGVycyB0aG91Z2h0IGl0IGEgcG9saWN5IGZvcmNlZCB1cG9uIGhpbSBieSB0aGUgc2l0dWF0aW9uLCB3aGVyZWluIGhlIGNvdXJ0ZWQgcG9wdWxhciBmYXZvdXIgYmVjYXVzZSBvZiB0aGUgd2FyLiBGb3IgYWxyZWFkeSB0aGVyZSB3ZXJlIHN1cmUgdGlkaW5ncyB0aGF0IFZpdGVsbGl1cyBoYWQgYXNzdW1lZCB0aGUgZGlnbml0eSBhbmQgcG93ZXIgb2YgZW1wZXJvcjsgYW5kIHN3aWZ0IGNvdXJpZXJzIHdlcmUgY29udGludWFsbHkgY29taW5nIHdpdGggYWNjb3VudHMgb2YgZXZlciBuZXcgYWNjZXNzaW9ucyB0byBoaW0sIGFsdGhvdWdoIG90aGVycyBtYWRlIGl0IGNsZWFyIHRoYXQgdGhlIGFybWllcyBpbiBQYW5ub25pYSwgRGFsbWF0aWEsIGFuZCBNeXNpYSwgd2l0aCB0aGVpciBsZWFkZXJzLCBhZGhlcmVkIHRvIE90aG8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBxdWlja2x5IHRoZXJlIGNhbWUgYWxzbyBmcmllbmRseSBsZXR0ZXJzIGZyb20gTXVjaWFudXMgYW5kIFZlc3Bhc2lhbiwgd2hvIHdlcmUgYXQgdGhlIGhlYWQgb2YgbGFyZ2UgZm9yY2VzLCB0aGUgb25lIGluIFN5cmlhLCB0aGUgb3RoZXIgaW4gSnVkYWVhLiBPdGhvIHdhcyBlbGF0ZWQgYnkgdGhlc2UsIGFuZCB3cm90ZSB0byBWaXRlbGxpdXMgYWR2aXNpbmcgaGltIG5vdCB0byBoYXZlIG1vcmUgdGhhbiBhIHNvbGRpZXIncyBhbWJpdGlvbnMsIGluIHdoaWNoIGNhc2UgaGUgc2hvdWxkIGJlIHJld2FyZGVkIHdpdGggYSBsYXJnZSBzdW0gb2YgbW9uZXksIGFuZCBhIGNpdHksIHdoZXJlIGhlIGNvdWxkIGxpdmUgaW4gdGhlIHV0bW9zdCBlYXNlIGFuZCBwbGVhc3VyZSBhbmQgYmUgdW5kaXN0dXJiZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlZpdGVsbGl1cyBhbHNvIHdyb3RlIHRvIE90aG8gaW4gcmVwbHksIGF0IGZpcnN0IGluIGEgc29tZXdoYXQgZGlzc2VtYmxpbmcgbWFubmVyOyBidXQgYWZ0ZXJ3YXJkcyBib3RoIGdvdCBleGNpdGVkIGFuZCB3cm90ZSBvbmUgYW5vdGhlciBhYnVzaXZlIGxldHRlcnMgZmlsbGVkIHdpdGggc2hhbWVmdWwgaW5zdWx0czsgbm90IHRoYXQgZWl0aGVyIGJyb3VnaHQgZmFsc2UgY2hhcmdlcywgYnV0IGl0IHdhcyBmb29saXNoIGFuZCByaWRpY3Vsb3VzIGZvciBvbmUgdG8gc3Rvcm0gdGhlIG90aGVyIHdpdGggcmVwcm9hY2hlcyBhcHBsaWNhYmxlIHRvIGJvdGguIEZvciBhcyByZWdhcmRzIHByb2RpZ2FsaXR5LCBlZmZlbWluYWN5LCBpbmV4cGVyaWVuY2UgaW4gd2FyLCBhbmQgbXVsdGlwbGljaXR5IG9mIGRlYnRzIGluY3VycmVkIGluIGEgcHJldmlvdXMgc3RhdGUgb2YgcG92ZXJ0eSwgaXQgd2VyZSBoYXJkIHRvIHNheSB3aGljaCBvZiB0aGVtIGhhZCB0aGUgYWR2YW50YWdlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIG1hbnkgcmVwb3J0cyBvZiBzaWducyBhbmQgYXBwYXJpdGlvbnMsIG1vc3Qgb2Ygd2hpY2ggd2VyZSBvZiB1bmNlcnRhaW4gYW5kIGR1YmlvdXMgb3JpZ2luOyBidXQgZXZlcnlib2R5IHNhdyB0aGF0IGEgVmljdG9yeSBzdGFuZGluZyBpbiBhIGNoYXJpb3Qgb24gdGhlIENhcGl0b2wgaGFkIGRyb3BwZWQgdGhlIHJlaW5zIGZyb20gaGVyIGhhbmRzLCBhcyBpZiBzaGUgaGFkIG5vdCBwb3dlciB0byBob2xkIHRoZW0sIGFuZCB0aGF0IHRoZSBzdGF0dWUgb2YgQ2FpdXMgQ2Flc2FyIG9uIHRoZSBpc2xhbmQgaW4gdGhlIFRpYmVyLCB3aXRob3V0IHRoZSBvY2N1cnJlbmNlIG9mIGVhcnRocXVha2Ugb3Igd2luZCwgaGFkIHR1cm5lZCBmcm9tIHdlc3QgdG8gZWFzdCwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+d2hpY2ggaXMgc2FpZCB0byBoYXZlIGhhcHBlbmVkIGR1cmluZyB0aGUgdGltZSB3aGVuIFZlc3Bhc2lhbiB3YXMgYXQgbGFzdCBvcGVubHkgdHJ5aW5nIHRvIHNlaXplIHRoZSBzdXByZW1lIHBvd2VyLiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBUaWJlciwgdG9vLCB3YXMgcmVnYXJkZWQgYnkgbW9zdCBwZW9wbGUgYXMgYSBiYWxlZnVsIHNpZ24uIEl0IHdhcyBhIHRpbWUsIHRvIGJlIHN1cmUsIHdoZW4gcml2ZXJzIGFyZSBhdCB0aGVpciBmdWxsZXN0LCBidXQgdGhlIFRpYmVyIGhhZCBuZXZlciBiZWZvcmUgcmlzZW4gc28gaGlnaCwgbm9yIGNhdXNlZCBzbyBncmVhdCBydWluIGFuZCBkZXN0cnVjdGlvbi4gSXQgb3ZlcmZsb3dlZCBpdHMgYmFua3MgYW5kIHN1Ym1lcmdlZCBhIGdyZWF0IHBhcnQgb2YgdGhlIGNpdHksIGFuZCBlc3BlY2lhbGx5IHRoZSBncmFpbi1tYXJrZXQsIHNvIHRoYXQgZGlyZSBzY2FyY2l0eSBvZiBmb29kIHByZXZhaWxlZCBmb3IgbWFueSBkYXlzIHRvZ2V0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgbWFueSByZXBvcnRzIG9mIHNpZ25zIGFuZCBhcHBhcml0aW9ucywgbW9zdCBvZiB3aGljaCB3ZXJlIG9mIHVuY2VydGFpbiBhbmQgZHViaW91cyBvcmlnaW47IGJ1dCBldmVyeWJvZHkgc2F3IHRoYXQgYSBWaWN0b3J5IHN0YW5kaW5nIGluIGEgY2hhcmlvdCBvbiB0aGUgQ2FwaXRvbCBoYWQgZHJvcHBlZCB0aGUgcmVpbnMgZnJvbSBoZXIgaGFuZHMsIGFzIGlmIHNoZSBoYWQgbm90IHBvd2VyIHRvIGhvbGQgdGhlbSwgYW5kIHRoYXQgdGhlIHN0YXR1ZSBvZiBDYWl1cyBDYWVzYXIgb24gdGhlIGlzbGFuZCBpbiB0aGUgVGliZXIsIHdpdGhvdXQgdGhlIG9jY3VycmVuY2Ugb2YgZWFydGhxdWFrZSBvciB3aW5kLCBoYWQgdHVybmVkIGZyb20gd2VzdCB0byBlYXN0LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndoaWNoIGlzIHNhaWQgdG8gaGF2ZSBoYXBwZW5lZCBkdXJpbmcgdGhlIHRpbWUgd2hlbiBWZXNwYXNpYW4gd2FzIGF0IGxhc3Qgb3Blbmx5IHRyeWluZyB0byBzZWl6ZSB0aGUgc3VwcmVtZSBwb3dlci4gVGhlIGJlaGF2aW91ciBvZiB0aGUgVGliZXIsIHRvbywgd2FzIHJlZ2FyZGVkIGJ5IG1vc3QgcGVvcGxlIGFzIGEgYmFsZWZ1bCBzaWduLiBJdCB3YXMgYSB0aW1lLCB0byBiZSBzdXJlLCB3aGVuIHJpdmVycyBhcmUgYXQgdGhlaXIgZnVsbGVzdCwgYnV0IHRoZSBUaWJlciBoYWQgbmV2ZXIgYmVmb3JlIHJpc2VuIHNvIGhpZ2gsIG5vciBjYXVzZWQgc28gZ3JlYXQgcnVpbiBhbmQgZGVzdHJ1Y3Rpb24uIEl0IG92ZXJmbG93ZWQgaXRzIGJhbmtzIGFuZCBzdWJtZXJnZWQgYSBncmVhdCBwYXJ0IG9mIHRoZSBjaXR5LCBhbmQgZXNwZWNpYWxseSB0aGUgZ3JhaW4tbWFya2V0LCBzbyB0aGF0IGRpcmUgc2NhcmNpdHkgb2YgZm9vZCBwcmV2YWlsZWQgZm9yIG1hbnkgZGF5cyB0b2dldGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCB3aGVuIHdvcmQgd2FzIGJyb3VnaHQgdG8gUm9tZSB0aGF0IENhZWNpbmEgYW5kIFZhbGVucywgd2hvIHdlcmUgaW4gY29tbWFuZCB3aXRoIFZpdGVsbGl1cywgd2VyZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBBbHBzLCBEb2xhYmVsbGEsIGEgbWFuIG9mIG5vYmxlIGZhbWlseSwgd2FzIHN1c3BlY3RlZCBieSB0aGUgcHJhZXRvcmlhbiBzb2xkaWVycyBvZiByZXZvbHV0aW9uYXJ5IGRlc2lnbnMuIE90aG8gdGhlcmVmb3JlIHNlbnQgaGltIGF3YXkgKHRocm91Z2ggZmVhciBvZiBoaW0gb3Igb2Ygc29tZW9uZSBlbHNlKSB0byB0aGUgdG93biBvZiBBcXVpbnVtLCB3aXRoIHdvcmRzIG9mIGVuY291cmFnZW1lbnQuIEFuZCBpbiBoaXMgc2VsZWN0aW9uIG9mIHRoZSBtZW4gaW4gYXV0aG9yaXR5IHdobyB3ZXJlIHRvIGFjY29tcGFueSBoaW0gb24gaGlzIGV4cGVkaXRpb24gaGUgaW5jbHVkZWQgYWxzbyBMdWNpdXMsIHRoZSBicm90aGVyIG9mIFZpdGVsbGl1cywgd2l0aG91dCBlaXRoZXIgaW5jcmVhc2luZyBvciBkaW1pbmlzaGluZyBoaXMgaG9ub3Vycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyB0b29rIHN0cm9uZyBtZWFzdXJlcyBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgd2lmZSBhbmQgbW90aGVyIG9mIFZpdGVsbGl1cywgdGhhdCB0aGV5IG1pZ2h0IGhhdmUgbm8gZmVhciBmb3IgdGhlbXNlbHZlcy4gTW9yZW92ZXIsIGhlIGFwcG9pbnRlZCBGbGF2aXVzIFNhYmludXMsIGEgYnJvdGhlciBvZiBWZXNwYXNpYW4sIHByZWZlY3Qgb2YgdGhlIGNpdHksIGVpdGhlciBiZWNhdXNlIGluIHRoaXMgd2F5IGFsc28gaGUgY291bGQgaG9ub3VyIHRoZSBtZW1vcnkgb2YgTmVybyAoZm9yIE5lcm8gaGFkIGJlc3Rvd2VkIHRoZSBvZmZpY2UgdXBvbiBTYWJpbnVzLCBidXQgR2FsYmEgaGFkIGRlcHJpdmVkIGhpbSBvZiBpdCksIG9yIHJhdGhlciBiZWNhdXNlLCBieSBhZHZhbmNpbmcgU2FiaW51cywgaGUgY291bGQgc2hvdyBob3cgaGUgZmF2b3VyZWQgYW5kIHRydXN0ZWQgVmVzcGFzaWFuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCB3aGVuIHdvcmQgd2FzIGJyb3VnaHQgdG8gUm9tZSB0aGF0IENhZWNpbmEgYW5kIFZhbGVucywgd2hvIHdlcmUgaW4gY29tbWFuZCB3aXRoIFZpdGVsbGl1cywgd2VyZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBBbHBzLCBEb2xhYmVsbGEsIGEgbWFuIG9mIG5vYmxlIGZhbWlseSwgd2FzIHN1c3BlY3RlZCBieSB0aGUgcHJhZXRvcmlhbiBzb2xkaWVycyBvZiByZXZvbHV0aW9uYXJ5IGRlc2lnbnMuIE90aG8gdGhlcmVmb3JlIHNlbnQgaGltIGF3YXkgKHRocm91Z2ggZmVhciBvZiBoaW0gb3Igb2Ygc29tZW9uZSBlbHNlKSB0byB0aGUgdG93biBvZiBBcXVpbnVtLCB3aXRoIHdvcmRzIG9mIGVuY291cmFnZW1lbnQuIEFuZCBpbiBoaXMgc2VsZWN0aW9uIG9mIHRoZSBtZW4gaW4gYXV0aG9yaXR5IHdobyB3ZXJlIHRvIGFjY29tcGFueSBoaW0gb24gaGlzIGV4cGVkaXRpb24gaGUgaW5jbHVkZWQgYWxzbyBMdWNpdXMsIHRoZSBicm90aGVyIG9mIFZpdGVsbGl1cywgd2l0aG91dCBlaXRoZXIgaW5jcmVhc2luZyBvciBkaW1pbmlzaGluZyBoaXMgaG9ub3Vycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gdG9vayBzdHJvbmcgbWVhc3VyZXMgZm9yIHRoZSBzYWZldHkgb2YgdGhlIHdpZmUgYW5kIG1vdGhlciBvZiBWaXRlbGxpdXMsIHRoYXQgdGhleSBtaWdodCBoYXZlIG5vIGZlYXIgZm9yIHRoZW1zZWx2ZXMuIE1vcmVvdmVyLCBoZSBhcHBvaW50ZWQgRmxhdml1cyBTYWJpbnVzLCBhIGJyb3RoZXIgb2YgVmVzcGFzaWFuLCBwcmVmZWN0IG9mIHRoZSBjaXR5LCBlaXRoZXIgYmVjYXVzZSBpbiB0aGlzIHdheSBhbHNvIGhlIGNvdWxkIGhvbm91ciB0aGUgbWVtb3J5IG9mIE5lcm8gKGZvciBOZXJvIGhhZCBiZXN0b3dlZCB0aGUgb2ZmaWNlIHVwb24gU2FiaW51cywgYnV0IEdhbGJhIGhhZCBkZXByaXZlZCBoaW0gb2YgaXQpLCBvciByYXRoZXIgYmVjYXVzZSwgYnkgYWR2YW5jaW5nIFNhYmludXMsIGhlIGNvdWxkIHNob3cgaG93IGhlIGZhdm91cmVkIGFuZCB0cnVzdGVkIFZlc3Bhc2lhbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgT3RobyBoaW1zZWxmIHRhcnJpZWQgYmVoaW5kIGF0IEJyaXhpbGx1bSwgYSB0b3duIG9mIEl0YWx5IG9uIHRoZSByaXZlciBQbywgYnV0IHNlbnQgaGlzIGZvcmNlcyBvbiB1bmRlciB0aGUgY29tbWFuZCBvZiBNYXJpdXMgQ2Vsc3VzIGFuZCBTdWV0b25pdXMgUGF1bGludXMsIGJlc2lkZXMgR2FsbHVzIGFuZCBTcHVyaW5hLiBUaGVzZSB3ZXJlIG1lbiBvZiBkaXN0aW5jdGlvbiwgYnV0IHdlcmUgdW5hYmxlIHRvIGNvbmR1Y3QgdGhlIGNhbXBhaWduIGFjY29yZGluZyB0byB0aGVpciBvd24gcGxhbnMgYW5kIHdpc2hlcywgb3dpbmcgdG8gdGhlIGRpc29yZGVybHkgYW5kIGFycm9nYW50IHNwaXJpdCBvZiB0aGVpciBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIHdvdWxkIG5vdCBkZWlnbiB0byBvYmV5IG90aGVyIG9mZmljZXJzLCBzaW5jZSwgYXMgdGhleSBzYWlkLCB0aGV5IGhhZCBtYWRlIHRoZSBlbXBlcm9yIHRoZWlyIGNvbW1hbmRlci4gSXQgaXMgdHJ1ZSB0aGF0IHRoZSBlbmVteSdzIHRyb29wcyBhbHNvIHdlcmUgbm90IGFsdG9nZXRoZXIgaW4gY29uZGl0aW9uLCBub3IgdW5kZXIgdGhlIGNvbnRyb2wgb2YgdGhlaXIgb2ZmaWNlcnMsIGJ1dCBmaWVyY2UgYW5kIGhhdWdodHksIGFuZCBmb3IgdGhlIHNhbWUgcmVhc29uLiBOZXZlcnRoZWxlc3MsIHRoZXkgd2VyZSBjZXJ0YWlubHkgZXhwZXJpZW5jZWQgaW4gZmlnaHRpbmcsIGFuZCBiZWluZyBhY2N1c3RvbWVkIHRvIGhhcmQgbGFib3VyLCB0aGV5IGRpZCBub3Qgc2h1biBpdDsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcyBPdGhvJ3MgbWVuIHdlcmUgc29mdCwgb3dpbmcgdG8gdGhlaXIgbGFjayBvZiBlbXBsb3ltZW50IGFuZCB0aGVpciB1bndhcmxpa2UgbW9kZSBvZiBsaWZlLCBoYXZpbmcgc3BlbnQgbW9zdCBvZiB0aGVpciB0aW1lIGF0IHNwZWN0YWNsZXMgYW5kIGZlc3RpdmFscyBhbmQgcGxheXMsIGFuZCB0aGV5IHdpc2hlZCB0byBjbG9hayB0aGVpciB3ZWFrbmVzcyB3aXRoIGluc29sZW5jZSBhbmQgYm9hc3RpbmcsIGRpc2RhaW5pbmcgdG8gcGVyZm9ybSB0aGUgc2VydmljZXMgbGFpZCB1cG9uIHRoZW0gYmVjYXVzZSB0aGV5IHdlcmUgYWJvdmUgdGhlIHdvcmssIG5vdCBiZWNhdXNlIHRoZXkgd2VyZSB1bmFibGUgdG8gZG8gaXQuIFdoZW4gU3B1cmluYSB0cmllZCB0byBmb3JjZSB0aGVtIGludG8gb2JlZGllbmNlLCBoZSBjYW1lIG5lYXIgYmVpbmcga2lsbGVkIGJ5IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc3BhcmVkIGhpbSBubyBhYnVzZSBub3IgaW5zb2xlbmNlLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgYmV0cmF5aW5nIGFuZCBydWluaW5nIHRoZSBvcHBvcnR1bml0aWVzIGFuZCB0aGUgY2F1c2Ugb2YgQ2Flc2FyLiBOYXksIHNvbWUgb2YgdGhlbSB3aG8gd2VyZSBkcnVuayBjYW1lIGF0IG5pZ2h0IHRvIGhpcyB0ZW50IGFuZCBkZW1hbmRlZCBtb25leSBmb3IgYSBqb3VybmV5LCBmb3IgdGhleSBtdXN0IGdvLCB0aGV5IHNhaWQsIHRvIENhZXNhciwgaW4gb3JkZXIgdG8gZGVub3VuY2UgdGhlaXIgY29tbWFuZGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIE90aG8gaGltc2VsZiB0YXJyaWVkIGJlaGluZCBhdCBCcml4aWxsdW0sIGEgdG93biBvZiBJdGFseSBvbiB0aGUgcml2ZXIgUG8sIGJ1dCBzZW50IGhpcyBmb3JjZXMgb24gdW5kZXIgdGhlIGNvbW1hbmQgb2YgTWFyaXVzIENlbHN1cyBhbmQgU3VldG9uaXVzIFBhdWxpbnVzLCBiZXNpZGVzIEdhbGx1cyBhbmQgU3B1cmluYS4gVGhlc2Ugd2VyZSBtZW4gb2YgZGlzdGluY3Rpb24sIGJ1dCB3ZXJlIHVuYWJsZSB0byBjb25kdWN0IHRoZSBjYW1wYWlnbiBhY2NvcmRpbmcgdG8gdGhlaXIgb3duIHBsYW5zIGFuZCB3aXNoZXMsIG93aW5nIHRvIHRoZSBkaXNvcmRlcmx5IGFuZCBhcnJvZ2FudCBzcGlyaXQgb2YgdGhlaXIgc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSB3b3VsZCBub3QgZGVpZ24gdG8gb2JleSBvdGhlciBvZmZpY2Vycywgc2luY2UsIGFzIHRoZXkgc2FpZCwgdGhleSBoYWQgbWFkZSB0aGUgZW1wZXJvciB0aGVpciBjb21tYW5kZXIuIEl0IGlzIHRydWUgdGhhdCB0aGUgZW5lbXkncyB0cm9vcHMgYWxzbyB3ZXJlIG5vdCBhbHRvZ2V0aGVyIGluIGNvbmRpdGlvbiwgbm9yIHVuZGVyIHRoZSBjb250cm9sIG9mIHRoZWlyIG9mZmljZXJzLCBidXQgZmllcmNlIGFuZCBoYXVnaHR5LCBhbmQgZm9yIHRoZSBzYW1lIHJlYXNvbi4gTmV2ZXJ0aGVsZXNzLCB0aGV5IHdlcmUgY2VydGFpbmx5IGV4cGVyaWVuY2VkIGluIGZpZ2h0aW5nLCBhbmQgYmVpbmcgYWNjdXN0b21lZCB0byBoYXJkIGxhYm91ciwgdGhleSBkaWQgbm90IHNodW4gaXQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgT3RobydzIG1lbiB3ZXJlIHNvZnQsIG93aW5nIHRvIHRoZWlyIGxhY2sgb2YgZW1wbG95bWVudCBhbmQgdGhlaXIgdW53YXJsaWtlIG1vZGUgb2YgbGlmZSwgaGF2aW5nIHNwZW50IG1vc3Qgb2YgdGhlaXIgdGltZSBhdCBzcGVjdGFjbGVzIGFuZCBmZXN0aXZhbHMgYW5kIHBsYXlzLCBhbmQgdGhleSB3aXNoZWQgdG8gY2xvYWsgdGhlaXIgd2Vha25lc3Mgd2l0aCBpbnNvbGVuY2UgYW5kIGJvYXN0aW5nLCBkaXNkYWluaW5nIHRvIHBlcmZvcm0gdGhlIHNlcnZpY2VzIGxhaWQgdXBvbiB0aGVtIGJlY2F1c2UgdGhleSB3ZXJlIGFib3ZlIHRoZSB3b3JrLCBub3QgYmVjYXVzZSB0aGV5IHdlcmUgdW5hYmxlIHRvIGRvIGl0LiBXaGVuIFNwdXJpbmEgdHJpZWQgdG8gZm9yY2UgdGhlbSBpbnRvIG9iZWRpZW5jZSwgaGUgY2FtZSBuZWFyIGJlaW5nIGtpbGxlZCBieSB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgc3BhcmVkIGhpbSBubyBhYnVzZSBub3IgaW5zb2xlbmNlLCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgYmV0cmF5aW5nIGFuZCBydWluaW5nIHRoZSBvcHBvcnR1bml0aWVzIGFuZCB0aGUgY2F1c2Ugb2YgQ2Flc2FyLiBOYXksIHNvbWUgb2YgdGhlbSB3aG8gd2VyZSBkcnVuayBjYW1lIGF0IG5pZ2h0IHRvIGhpcyB0ZW50IGFuZCBkZW1hbmRlZCBtb25leSBmb3IgYSBqb3VybmV5LCBmb3IgdGhleSBtdXN0IGdvLCB0aGV5IHNhaWQsIHRvIENhZXNhciwgaW4gb3JkZXIgdG8gZGVub3VuY2UgdGhlaXIgY29tbWFuZGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTcHVyaW5hIGFuZCB0aGUgZW1wZXJvcidzIGNhdXNlIHdlcmUgaGVscGVkIGZvciB0aGUgdGltZSBieSB0aGUgYWJ1c2Ugd2hpY2ggaGlzIHNvbGRpZXJzIHJlY2VpdmVkIGF0IFBsYWNlbnRpYS4gRm9yIHdoZW4gdGhlIHRyb29wcyBvZiBWaXRlbGxpdXMgYXNzYXVsdGVkIHRoZSB3YWxscywgdGhleSByYWlsZWQgYXQgdGhlIHNvbGRpZXJzIG9mIE90aG8gd2hvIG1hbm5lZCB0aGUgcmFtcGFydHMsIGNhbGxpbmcgdGhlbSBhY3RvcnMsIGRhbmNlcnMsIHNwZWN0YXRvcnMgYXQgUHl0aGlhbiBhbmQgT2x5bXBpYW4gZ2FtZXMsIG1lbiB3aG8gaGFkIG5ldmVyIGtub3duIG9yIHNlZW4gYSBjYW1wYWlnbiBvciBmaWdodGluZywgYW5kIHRob3VnaHQgaGlnaGx5IG9mIHRoZW1zZWx2ZXMgYmVjYXVzZSB0aGV5IGhhZCBjdXQgb2ZmIHRoZSBoZWFkIG9mIGEgZGVmZW5jZWxlc3Mgb2xkIG1hbiAobWVhbmluZyBHYWxiYSksIGJ1dCB3b3VsZCBub3Qgb3Blbmx5IGVudGVyIGEgY29uZmxpY3QgYW5kIGJhdHRsZSBvZiBtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk90aG8ncyBzb2xkaWVycyB3ZXJlIHNvIGRpc3R1cmJlZCBieSB0aGVzZSByZXByb2FjaGVzLCBhbmQgc28gaW5mbGFtZWQsIHRoYXQgdGhleSB0aHJldyB0aGVtc2VsdmVzIGF0IHRoZSBmZWV0IG9mIFNwdXJpbmEsIGJlZ2dpbmcgaGltIHRvIHVzZSB0aGVtIGFuZCBjb21tYW5kIHRoZW0sIGFuZCBwbGVhZGluZyBleGN1c2UgZnJvbSBubyBkYW5nZXIgb3IgdG9pbC4gQW5kIHNvLCB3aGVuIGEgZmllcmNlIGFzc2F1bHQgd2FzIG1hZGUgdXBvbiB0aGUgd2FsbHMgYW5kIG1hbnkgc2llZ2UtZW5naW5lcyB3ZXJlIGJyb3VnaHQgdG8gYmVhciB1cG9uIHRoZW0sIFNwdXJpbmEncyBtZW4gcHJldmFpbGVkLCByZXB1bHNlZCB0aGVpciBvcHBvbmVudHMgd2l0aCBncmVhdCBzbGF1Z2h0ZXIsIGFuZCBoZWxkIHNhZmUgYSBjaXR5IHdoaWNoIHdhcyBmYW1vdXMgYW5kIG1vcmUgZmxvdXJpc2hpbmcgdGhhbiBhbnkgaW4gSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3B1cmluYSBhbmQgdGhlIGVtcGVyb3IncyBjYXVzZSB3ZXJlIGhlbHBlZCBmb3IgdGhlIHRpbWUgYnkgdGhlIGFidXNlIHdoaWNoIGhpcyBzb2xkaWVycyByZWNlaXZlZCBhdCBQbGFjZW50aWEuIEZvciB3aGVuIHRoZSB0cm9vcHMgb2YgVml0ZWxsaXVzIGFzc2F1bHRlZCB0aGUgd2FsbHMsIHRoZXkgcmFpbGVkIGF0IHRoZSBzb2xkaWVycyBvZiBPdGhvIHdobyBtYW5uZWQgdGhlIHJhbXBhcnRzLCBjYWxsaW5nIHRoZW0gYWN0b3JzLCBkYW5jZXJzLCBzcGVjdGF0b3JzIGF0IFB5dGhpYW4gYW5kIE9seW1waWFuIGdhbWVzLCBtZW4gd2hvIGhhZCBuZXZlciBrbm93biBvciBzZWVuIGEgY2FtcGFpZ24gb3IgZmlnaHRpbmcsIGFuZCB0aG91Z2h0IGhpZ2hseSBvZiB0aGVtc2VsdmVzIGJlY2F1c2UgdGhleSBoYWQgY3V0IG9mZiB0aGUgaGVhZCBvZiBhIGRlZmVuY2VsZXNzIG9sZCBtYW4gKG1lYW5pbmcgR2FsYmEpLCBidXQgd291bGQgbm90IG9wZW5seSBlbnRlciBhIGNvbmZsaWN0IGFuZCBiYXR0bGUgb2YgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk90aG8ncyBzb2xkaWVycyB3ZXJlIHNvIGRpc3R1cmJlZCBieSB0aGVzZSByZXByb2FjaGVzLCBhbmQgc28gaW5mbGFtZWQsIHRoYXQgdGhleSB0aHJldyB0aGVtc2VsdmVzIGF0IHRoZSBmZWV0IG9mIFNwdXJpbmEsIGJlZ2dpbmcgaGltIHRvIHVzZSB0aGVtIGFuZCBjb21tYW5kIHRoZW0sIGFuZCBwbGVhZGluZyBleGN1c2UgZnJvbSBubyBkYW5nZXIgb3IgdG9pbC4gQW5kIHNvLCB3aGVuIGEgZmllcmNlIGFzc2F1bHQgd2FzIG1hZGUgdXBvbiB0aGUgd2FsbHMgYW5kIG1hbnkgc2llZ2UtZW5naW5lcyB3ZXJlIGJyb3VnaHQgdG8gYmVhciB1cG9uIHRoZW0sIFNwdXJpbmEncyBtZW4gcHJldmFpbGVkLCByZXB1bHNlZCB0aGVpciBvcHBvbmVudHMgd2l0aCBncmVhdCBzbGF1Z2h0ZXIsIGFuZCBoZWxkIHNhZmUgYSBjaXR5IHdoaWNoIHdhcyBmYW1vdXMgYW5kIG1vcmUgZmxvdXJpc2hpbmcgdGhhbiBhbnkgaW4gSXRhbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIG90aGVyIHdheXMsIHRvbywgdGhlIGdlbmVyYWxzIG9mIFZpdGVsbGl1cyB3ZXJlIG1vcmUgdmV4YXRpb3VzIHRoYW4gdGhvc2Ugb2YgT3RobyBpbiB0aGVpciBkZWFsaW5ncyB3aXRoIGJvdGggY2l0aWVzIGFuZCBwcml2YXRlIHBlcnNvbnMuIE9uZSBvZiB0aGVtLCBDYWVjaW5hLCBoYWQgbmVpdGhlciB0aGUgc3BlZWNoIG5vciB0aGUgb3V0d2FyZCBhcHBlYXJhbmNlIG9mIGEgUm9tYW4gY2l0aXplbiwgYnV0IHdhcyBvZmZlbnNpdmUgYW5kIHN0cmFuZ2UsIGEgbWFuIG9mIGh1Z2Ugc3RhdHVyZSwgd2hvIHdvcmUgR2F1bGlzaCB0cm91c2VycyBhbmQgbG9uZyBzbGVldmVzLCBhbmQgY29udmVyc2VkIGJ5IHNpZ25zIGV2ZW4gd2l0aCBSb21hbiBvZmZpY2lhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3aWZlLCB0b28sIGFjY29tcGFuaWVkIGhpbSwgd2l0aCBhbiBlc2NvcnQgb2YgcGlja2VkIGhvcnNlbWVuOyBzaGUgcm9kZSBhIGhvcnNlLCBhbmQgd2FzIGNvbnNwaWN1b3VzbHkgYWRvcm5lZC4gRmFiaXVzIFZhbGVucywgdGhlIG90aGVyIGdlbmVyYWwsIHdhcyBzbyByYXBhY2lvdXMgdGhhdCBuZWl0aGVyIHdoYXQgaGUgcGx1bmRlcmVkIGZyb20gdGhlIGVuZW15IG5vciB3aGF0IGhlIHN0b2xlIG9yIHJlY2VpdmVkIGFzIGdpZnRzIGZyb20gdGhlIGFsbGllcyBjb3VsZCBzYXRpc2Z5IGhpbS4gSW5kZWVkLCBpdCB3YXMgdGhvdWdodCB0aGF0IHRoaXMgcmFwYWNpdHkgb2YgaGlzIGhhZCBkZWxheWVkIGhpcyBtYXJjaCwgc28gdGhhdCBoZSB3YXMgdG9vIGxhdGUgZm9yIHRoZSBiYXR0bGUgYXQgUGxhY2VudGlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc29tZSBibGFtZSBDYWVjaW5hLCB3aG8sIHRoZXkgc2F5LCB3YXMgZWFnZXIgdG8gd2luIHRoZSB2aWN0b3J5IGhpbXNlbGYgYmVmb3JlIFZhbGVucyBjYW1lLCBhbmQgc28gbm90IG9ubHkgbWFkZSBvdGhlciBtaW5vciBtaXN0YWtlcywgYnV0IGFsc28gam9pbmVkIGJhdHRsZSBpbm9wcG9ydHVuZWx5IGFuZCB3aXRob3V0IG11Y2ggc3Bpcml0LCB0aGVyZWJ5IGFsbW9zdCBydWluaW5nIHRoZWlyIHdob2xlIGVudGVycHJpc2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIG90aGVyIHdheXMsIHRvbywgdGhlIGdlbmVyYWxzIG9mIFZpdGVsbGl1cyB3ZXJlIG1vcmUgdmV4YXRpb3VzIHRoYW4gdGhvc2Ugb2YgT3RobyBpbiB0aGVpciBkZWFsaW5ncyB3aXRoIGJvdGggY2l0aWVzIGFuZCBwcml2YXRlIHBlcnNvbnMuIE9uZSBvZiB0aGVtLCBDYWVjaW5hLCBoYWQgbmVpdGhlciB0aGUgc3BlZWNoIG5vciB0aGUgb3V0d2FyZCBhcHBlYXJhbmNlIG9mIGEgUm9tYW4gY2l0aXplbiwgYnV0IHdhcyBvZmZlbnNpdmUgYW5kIHN0cmFuZ2UsIGEgbWFuIG9mIGh1Z2Ugc3RhdHVyZSwgd2hvIHdvcmUgR2F1bGlzaCB0cm91c2VycyBhbmQgbG9uZyBzbGVldmVzLCBhbmQgY29udmVyc2VkIGJ5IHNpZ25zIGV2ZW4gd2l0aCBSb21hbiBvZmZpY2lhbHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3aWZlLCB0b28sIGFjY29tcGFuaWVkIGhpbSwgd2l0aCBhbiBlc2NvcnQgb2YgcGlja2VkIGhvcnNlbWVuOyBzaGUgcm9kZSBhIGhvcnNlLCBhbmQgd2FzIGNvbnNwaWN1b3VzbHkgYWRvcm5lZC4gRmFiaXVzIFZhbGVucywgdGhlIG90aGVyIGdlbmVyYWwsIHdhcyBzbyByYXBhY2lvdXMgdGhhdCBuZWl0aGVyIHdoYXQgaGUgcGx1bmRlcmVkIGZyb20gdGhlIGVuZW15IG5vciB3aGF0IGhlIHN0b2xlIG9yIHJlY2VpdmVkIGFzIGdpZnRzIGZyb20gdGhlIGFsbGllcyBjb3VsZCBzYXRpc2Z5IGhpbS4gSW5kZWVkLCBpdCB3YXMgdGhvdWdodCB0aGF0IHRoaXMgcmFwYWNpdHkgb2YgaGlzIGhhZCBkZWxheWVkIGhpcyBtYXJjaCwgc28gdGhhdCBoZSB3YXMgdG9vIGxhdGUgZm9yIHRoZSBiYXR0bGUgYXQgUGxhY2VudGlhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb21lIGJsYW1lIENhZWNpbmEsIHdobywgdGhleSBzYXksIHdhcyBlYWdlciB0byB3aW4gdGhlIHZpY3RvcnkgaGltc2VsZiBiZWZvcmUgVmFsZW5zIGNhbWUsIGFuZCBzbyBub3Qgb25seSBtYWRlIG90aGVyIG1pbm9yIG1pc3Rha2VzLCBidXQgYWxzbyBqb2luZWQgYmF0dGxlIGlub3Bwb3J0dW5lbHkgYW5kIHdpdGhvdXQgbXVjaCBzcGlyaXQsIHRoZXJlYnkgYWxtb3N0IHJ1aW5pbmcgdGhlaXIgd2hvbGUgZW50ZXJwcmlzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBDYWVjaW5hLCByZXB1bHNlZCBmcm9tIFBsYWNlbnRpYSwgaGFkIHNldCBvdXQgdG8gYXR0YWNrIENyZW1vbmEsIGFub3RoZXIgbGFyZ2UgYW5kIHByb3NwZXJvdXMgY2l0eSwgZmlyc3QgQW5uaXVzIEdhbGx1cywgd2hvIHdhcyBjb21pbmcgdG8gdGhlIGhlbHAgb2YgU3B1cmluYSBhdCBQbGFjZW50aWEsIGhlYXJpbmcgdXBvbiB0aGUgbWFyY2ggdGhhdCBQbGFjZW50aWEgd2FzIHNhZmUsIGJ1dCB0aGF0IENyZW1vbmEgd2FzIGluIHBlcmlsLCBjaGFuZ2VkIGhpcyBjb3Vyc2UgYW5kIGxlZCBoaXMgYXJteSB0byBDcmVtb25hLCB3aGVyZSBoZSBlbmNhbXBlZCBuZWFyIHRoZSBlbmVteTsgdGhlbiBoaXMgY29sbGVhZ3Vlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNlbHN1cywgUGF1bGludXMgYW5kIFNwdXJpbmEgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDUuMyIgdmFsaWQ9InllcyI+di4gMzwvYmlibD4pLCBhbHRob3VnaCBTcHVyaW5hIGlzIG5vdCBtZW50aW9uZWQgZnVydGhlci48L25vdGU+IGNhbWUgb25lIGJ5IG9uZSB0byBoaXMgYWlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVjaW5hIG5vdyBwbGFjZWQgYSBsYXJnZSBib2R5IG9mIG1lbi1hdC1hcm1zIGluIGFtYnVzaCB3aGVyZSB0aGUgZ3JvdW5kIHdhcyByb3VnaCBhbmQgd29vZHksIGFuZCB0aGVuIG9yZGVyZWQgaGlzIGhvcnNlbWVuIHRvIHJpZGUgdG93YXJkcyB0aGUgZW5lbXksIGFuZCBpZiB0aGV5IHdlcmUgYXR0YWNrZWQsIHRvIHdpdGhkcmF3IGxpdHRsZSBieSBsaXR0bGUgYW5kIHJldHJlYXQsIHVudGlsIHRoZXkgaGFkIGluIHRoaXMgd2F5IGRyYXduIHRoZWlyIHB1cnN1ZXJzIGludG8gdGhlIGFtYnVzaC4gQnV0IGRlc2VydGVycyBicm91Z2h0IHdvcmQgb2YgYWxsIHRoaXMgdG8gQ2Vsc3VzLCB3aG8gcm9kZSBvdXQgd2l0aCBnb29kIGhvcnNlbWVuIHRvIG1lZXQgdGhlIGVuZW15LCBmb2xsb3dlZCB1cCBoaXMgcHVyc3VpdCB3aXRoIGNhdXRpb24sIHN1cnJvdW5kZWQgdGhlIG1lbiBpbiBhbWJ1c2gsIGFuZCB0aHJldyB0aGVtIGludG8gY29uZnVzaW9uLiBUaGVuIGhlIHN1bW1vbmVkIGhpcyBtZW4tYXQtYXJtcyBmcm9tIHRoZSBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXBwYXJlbnRseSwgaWYgdGhlc2UgaGFkIGNvbWUgdXAgaW4gdGltZSB0byB0aGUgc3VwcG9ydCBvZiB0aGUgY2F2YWxyeSwgbm90IGEgbWFuIG9mIHRoZSBlbmVteSB3b3VsZCBoYXZlIGJlZW4gbGVmdCBhbGl2ZSwgYnV0IHRoZSB3aG9sZSBhcm15IHdpdGggQ2FlY2luYSB3b3VsZCBoYXZlIGJlZW4gY3J1c2hlZCBhbmQgc2xhaW4uIEFzIGl0IHdhcywgaG93ZXZlciwgUGF1bGludXMgY2FtZSB0byB0aGVpciBhaWQgdG9vIHNsb3dseSBhbmQgdG9vIGxhdGUsIGFuZCBpbmN1cnJlZCB0aGUgY2hhcmdlIG9mIHN1bGx5aW5nIGhpcyByZXB1dGF0aW9uIGFzIGEgY29tbWFuZGVyIHRocm91Z2ggZXhjZXNzaXZlIGNhdXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIHRoZSBzb2xkaWVycyBhY3R1YWxseSBhY2N1c2VkIGhpbSBvZiB0cmVhY2hlcnksIGFuZCB0cmllZCB0byBpbmNlbnNlIE90aG8gYWdhaW5zdCBoaW0sIGxvdWRseSBib2FzdGluZyB0aGF0IHRoZXkgaGFkIGJlZW4gdmljdG9yaW91cywgYnV0IHRoYXQgdGhlaXIgdmljdG9yeSB3YXMgbWFkZSBpbmNvbXBsZXRlIGJ5IHRoZSBjb3dhcmRpY2Ugb2YgdGhlaXIgY29tbWFuZGVycy4gT3RobyBkaWQgbm90IGJlbGlldmUgdGhlbSwgYW5kIHlldCB3aXNoZWQgdG8gYXZvaWQgdGhlIGFwcGVhcmFuY2Ugb2YgZGlzYmVsaWV2aW5nIHRoZW0uIEhlIHRoZXJlZm9yZSBzZW50IHRvIHRoZSBhcm1pZXMgaGlzIGJyb3RoZXIgVGl0aWFudXMsIGFuZCBQcm9jdWx1cywgdGhlIHByZWZlY3Qgb2YgdGhlIGd1YXJkczsgb2YgdGhlc2UgdHdvIG1lbiBQcm9jdWx1cyBoYWQgdGhlIGVudGlyZSBhdXRob3JpdHkgaW4gcmVhbGl0eSwgYW5kIFRpdGlhbnVzIG9ubHkgaW4gYXBwZWFyYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Q2Vsc3VzIGFuZCBQYXVsaW51cywgdG9vLCBlbmpveWVkIHRoZSBlbXB0eSB0aXRsZSBvZiBmcmllbmRzIGFuZCBjb3Vuc2VsbG9ycywgYnV0IGhhZCBubyBwb3dlciBvciBpbmZsdWVuY2UgaW4gdGhlIGNvbmR1Y3Qgb2YgYWZmYWlycy4gVGhlcmUgd2VyZSBkaXN0dXJiYW5jZXMgYWxzbyBhbW9uZyB0aGUgZW5lbXksIGFuZCBlc3BlY2lhbGx5IGFtb25nIHRoZSB0cm9vcHMgb2YgVmFsZW5zOyBmb3Igd2hlbiB0aGVzZSB3ZXJlIHRvbGQgYWJvdXQgdGhlIGJhdHRsZSBhdCB0aGUgYW1idXNjYWRlLCB0aGV5IHdlcmUgZW5yYWdlZCBiZWNhdXNlIHRoZXkgd2VyZSBub3QgcHJlc2VudCBhbmQgaGFkIGdpdmVuIG5vIGFpZCB3aGVyZSBzbyBtYW55IG1lbiBoYWQgbG9zdCB0aGVpciBsaXZlcy4gVGhleSBhY3R1YWxseSBiZWdhbiB0byBzdG9uZSBWYWxlbnMsIGJ1dCBoZSBmaW5hbGx5IHN1Y2NlZWRlZCBpbiBwYWNpZnlpbmcgdGhlbSwgYW5kIHRoZW4gYnJva2UgY2FtcCBhcmlkIGpvaW5lZCBDYWVjaW5hLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBDYWVjaW5hLCByZXB1bHNlZCBmcm9tIFBsYWNlbnRpYSwgaGFkIHNldCBvdXQgdG8gYXR0YWNrIENyZW1vbmEsIGFub3RoZXIgbGFyZ2UgYW5kIHByb3NwZXJvdXMgY2l0eSwgZmlyc3QgQW5uaXVzIEdhbGx1cywgd2hvIHdhcyBjb21pbmcgdG8gdGhlIGhlbHAgb2YgU3B1cmluYSBhdCBQbGFjZW50aWEsIGhlYXJpbmcgdXBvbiB0aGUgbWFyY2ggdGhhdCBQbGFjZW50aWEgd2FzIHNhZmUsIGJ1dCB0aGF0IENyZW1vbmEgd2FzIGluIHBlcmlsLCBjaGFuZ2VkIGhpcyBjb3Vyc2UgYW5kIGxlZCBoaXMgYXJteSB0byBDcmVtb25hLCB3aGVyZSBoZSBlbmNhbXBlZCBuZWFyIHRoZSBlbmVteTsgdGhlbiBoaXMgY29sbGVhZ3Vlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Vsc3VzLCBQYXVsaW51cyBhbmQgU3B1cmluYSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gT3RoLiA1LjMiIHZhbGlkPSJ5ZXMiPnYuIDM8L2JpYmw+KSwgYWx0aG91Z2ggU3B1cmluYSBpcyBub3QgbWVudGlvbmVkIGZ1cnRoZXIuPC9ub3RlPiBjYW1lIG9uZSBieSBvbmUgdG8gaGlzIGFpZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDUuMyIgdmFsaWQ9InllcyI+di4gMzwvYmlibD4pLCBhbHRob3VnaCBTcHVyaW5hIGlzIG5vdCBtZW50aW9uZWQgZnVydGhlci48L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZWNpbmEgbm93IHBsYWNlZCBhIGxhcmdlIGJvZHkgb2YgbWVuLWF0LWFybXMgaW4gYW1idXNoIHdoZXJlIHRoZSBncm91bmQgd2FzIHJvdWdoIGFuZCB3b29keSwgYW5kIHRoZW4gb3JkZXJlZCBoaXMgaG9yc2VtZW4gdG8gcmlkZSB0b3dhcmRzIHRoZSBlbmVteSwgYW5kIGlmIHRoZXkgd2VyZSBhdHRhY2tlZCwgdG8gd2l0aGRyYXcgbGl0dGxlIGJ5IGxpdHRsZSBhbmQgcmV0cmVhdCwgdW50aWwgdGhleSBoYWQgaW4gdGhpcyB3YXkgZHJhd24gdGhlaXIgcHVyc3VlcnMgaW50byB0aGUgYW1idXNoLiBCdXQgZGVzZXJ0ZXJzIGJyb3VnaHQgd29yZCBvZiBhbGwgdGhpcyB0byBDZWxzdXMsIHdobyByb2RlIG91dCB3aXRoIGdvb2QgaG9yc2VtZW4gdG8gbWVldCB0aGUgZW5lbXksIGZvbGxvd2VkIHVwIGhpcyBwdXJzdWl0IHdpdGggY2F1dGlvbiwgc3Vycm91bmRlZCB0aGUgbWVuIGluIGFtYnVzaCwgYW5kIHRocmV3IHRoZW0gaW50byBjb25mdXNpb24uIFRoZW4gaGUgc3VtbW9uZWQgaGlzIG1lbi1hdC1hcm1zIGZyb20gdGhlIGNhbXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcHBhcmVudGx5LCBpZiB0aGVzZSBoYWQgY29tZSB1cCBpbiB0aW1lIHRvIHRoZSBzdXBwb3J0IG9mIHRoZSBjYXZhbHJ5LCBub3QgYSBtYW4gb2YgdGhlIGVuZW15IHdvdWxkIGhhdmUgYmVlbiBsZWZ0IGFsaXZlLCBidXQgdGhlIHdob2xlIGFybXkgd2l0aCBDYWVjaW5hIHdvdWxkIGhhdmUgYmVlbiBjcnVzaGVkIGFuZCBzbGFpbi4gQXMgaXQgd2FzLCBob3dldmVyLCBQYXVsaW51cyBjYW1lIHRvIHRoZWlyIGFpZCB0b28gc2xvd2x5IGFuZCB0b28gbGF0ZSwgYW5kIGluY3VycmVkIHRoZSBjaGFyZ2Ugb2Ygc3VsbHlpbmcgaGlzIHJlcHV0YXRpb24gYXMgYSBjb21tYW5kZXIgdGhyb3VnaCBleGNlc3NpdmUgY2F1dGlvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIHRoZSBzb2xkaWVycyBhY3R1YWxseSBhY2N1c2VkIGhpbSBvZiB0cmVhY2hlcnksIGFuZCB0cmllZCB0byBpbmNlbnNlIE90aG8gYWdhaW5zdCBoaW0sIGxvdWRseSBib2FzdGluZyB0aGF0IHRoZXkgaGFkIGJlZW4gdmljdG9yaW91cywgYnV0IHRoYXQgdGhlaXIgdmljdG9yeSB3YXMgbWFkZSBpbmNvbXBsZXRlIGJ5IHRoZSBjb3dhcmRpY2Ugb2YgdGhlaXIgY29tbWFuZGVycy4gT3RobyBkaWQgbm90IGJlbGlldmUgdGhlbSwgYW5kIHlldCB3aXNoZWQgdG8gYXZvaWQgdGhlIGFwcGVhcmFuY2Ugb2YgZGlzYmVsaWV2aW5nIHRoZW0uIEhlIHRoZXJlZm9yZSBzZW50IHRvIHRoZSBhcm1pZXMgaGlzIGJyb3RoZXIgVGl0aWFudXMsIGFuZCBQcm9jdWx1cywgdGhlIHByZWZlY3Qgb2YgdGhlIGd1YXJkczsgb2YgdGhlc2UgdHdvIG1lbiBQcm9jdWx1cyBoYWQgdGhlIGVudGlyZSBhdXRob3JpdHkgaW4gcmVhbGl0eSwgYW5kIFRpdGlhbnVzIG9ubHkgaW4gYXBwZWFyYW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkNlbHN1cyBhbmQgUGF1bGludXMsIHRvbywgZW5qb3llZCB0aGUgZW1wdHkgdGl0bGUgb2YgZnJpZW5kcyBhbmQgY291bnNlbGxvcnMsIGJ1dCBoYWQgbm8gcG93ZXIgb3IgaW5mbHVlbmNlIGluIHRoZSBjb25kdWN0IG9mIGFmZmFpcnMuIFRoZXJlIHdlcmUgZGlzdHVyYmFuY2VzIGFsc28gYW1vbmcgdGhlIGVuZW15LCBhbmQgZXNwZWNpYWxseSBhbW9uZyB0aGUgdHJvb3BzIG9mIFZhbGVuczsgZm9yIHdoZW4gdGhlc2Ugd2VyZSB0b2xkIGFib3V0IHRoZSBiYXR0bGUgYXQgdGhlIGFtYnVzY2FkZSwgdGhleSB3ZXJlIGVucmFnZWQgYmVjYXVzZSB0aGV5IHdlcmUgbm90IHByZXNlbnQgYW5kIGhhZCBnaXZlbiBubyBhaWQgd2hlcmUgc28gbWFueSBtZW4gaGFkIGxvc3QgdGhlaXIgbGl2ZXMuIFRoZXkgYWN0dWFsbHkgYmVnYW4gdG8gc3RvbmUgVmFsZW5zLCBidXQgaGUgZmluYWxseSBzdWNjZWVkZWQgaW4gcGFjaWZ5aW5nIHRoZW0sIGFuZCB0aGVuIGJyb2tlIGNhbXAgYXJpZCBqb2luZWQgQ2FlY2luYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PdGhvIG5vdyBjYW1lIHRvIHRoZSBjYW1wIGF0IEJlZHJpY3VtIChhIGxpdHRsZSB2aWxsYWdlIG5lYXIgQ3JlbW9uYSkgYW5kIGhlbGQgYSBjb3VuY2lsIG9mIHdhci4gUHJvY3VsdXMgYW5kIFRpdGlhbnVzIHdlcmUgb2YgdGhlIG9waW5pb24gdGhhdCBoZSBvdWdodCB0byBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZSB3aGlsZSBoaXMgYXJtaWVzIHdlcmUgZmx1c2hlZCB3aXRoIHRoZWlyIHJlY2VudCB2aWN0b3J5LCBhbmQgbm90IHNpdCB0aGVyZSBkdWxsaW5nIHRoZSBlZmZpY2llbmN5IG9mIGhpcyB0cm9vcHMgYW5kIHdhaXRpbmcgZm9yIFZpdGVsbGl1cyB0byBjb21lIGluIHBlcnNvbiBmcm9tIEdhdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBhdWxpbnVzLCBvbiB0aGUgY29udHJhcnksIHNhaWQgdGhhdCB0aGUgZW5lbXkgYWxyZWFkeSBoYWQgYWxsIHRoZSByZXNvdXJjZXMgd2l0aCB3aGljaCB0aGV5IHdvdWxkIGdpdmUgYmF0dGxlLCBhbmQgbGFja2VkIG5vdGhpbmcsIHdoZXJlYXMsIGluIHRoZSBjYXNlIG9mIE90aG8sIGEgZm9yY2UgYXMgbGFyZ2UgYXMgdGhlIG9uZSBoZSBhbHJlYWR5IGhhZCBtaWdodCBiZSBleHBlY3RlZCBmcm9tIE15c2lhIGFuZCBQYW5ub25pYSwgaWYgaGUgd291bGQgb25seSB3YWl0IGZvciBoaXMgb3duIGJlc3Qgb3Bwb3J0dW5pdHkgYW5kIGNvbmR1Y3QgdGhlIGNhbXBhaWduIHRvIHN1aXQgdGhhdCBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgbWVuIHdlcmUgbm93IGNvbmZpZGVudCBvZiBzdWNjZXNzIGluIHNwaXRlIG9mIHRoZWlyIGluZmVyaW9yIG51bWJlcnMsIGFuZCBoZSB3b3VsZCBub3QgZmluZCB0aGVtIGxlc3Mga2VlbiBhZnRlciB0aGV5IGhhZCByZWNlaXZlZCByZWluZm9yY2VtZW50cywgbmF5LCB0aGVpciBzdXBlcmlvcml0eSB3b3VsZCBsZWFkIHRoZW0gdG8gZmlnaHQgYWxsIHRoZSBiZXR0ZXIuIEFuZCBiZXNpZGVzLCBkZWxheSB3YXMgdG8gdGhlaXIgYWR2YW50YWdlLCBzaW5jZSB0aGV5IGhhZCBldmVyeXRoaW5nIGluIGFidW5kYW5jZSwgd2hpbGUgdG8gdGhlIGVuZW15IHRpbWUgd291bGQgYnJpbmcgYSBzY2FyY2l0eSBvZiBzdXBwbGllcywgc2luY2UgdGhleSB3ZXJlIG9jY3VweWluZyBhIGhvc3RpbGUgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U28gUGF1bGludXMgYXJndWVkLCBhbmQgTWFyaXVzIENlbHN1cyB2b3RlZCB3aXRoIGhpbS4gQW5uaXVzIEdhbGx1cyB3YXMgbm90IHByZXNlbnQsIGJlaW5nIHVuZGVyIHRyZWF0bWVudCBmb3IgYSBmYWxsIGZyb20gaGlzIGhvcnNlLCBidXQgT3RobyBhc2tlZCBoaXMgYWR2aWNlIGJ5IGxldHRlciwgYW5kIGhpcyBjb3Vuc2VsIHdhcyBub3QgdG8gaGFzdGVuIHRoZSBiYXR0bGUsIGJ1dCB0byBhd2FpdCB0aGUgZm9yY2VzIGZyb20gTXlzaWEsIHdoaWNoIHdlcmUgYWxyZWFkeSBvbiB0aGUgbWFyY2guIE5ldmVydGhlbGVzcywgT3RobyB3b3VsZCBub3QgbGlzdGVuIHRvIHRoZXNlIGNvdW5zZWxzLCBhbmQgdGhlIGRheSB3YXMgY2FycmllZCBieSB0aG9zZSB3aG8gdXJnZWQgaW1tZWRpYXRlIGJhdHRsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PdGhvIG5vdyBjYW1lIHRvIHRoZSBjYW1wIGF0IEJlZHJpY3VtIChhIGxpdHRsZSB2aWxsYWdlIG5lYXIgQ3JlbW9uYSkgYW5kIGhlbGQgYSBjb3VuY2lsIG9mIHdhci4gUHJvY3VsdXMgYW5kIFRpdGlhbnVzIHdlcmUgb2YgdGhlIG9waW5pb24gdGhhdCBoZSBvdWdodCB0byBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZSB3aGlsZSBoaXMgYXJtaWVzIHdlcmUgZmx1c2hlZCB3aXRoIHRoZWlyIHJlY2VudCB2aWN0b3J5LCBhbmQgbm90IHNpdCB0aGVyZSBkdWxsaW5nIHRoZSBlZmZpY2llbmN5IG9mIGhpcyB0cm9vcHMgYW5kIHdhaXRpbmcgZm9yIFZpdGVsbGl1cyB0byBjb21lIGluIHBlcnNvbiBmcm9tIEdhdWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBhdWxpbnVzLCBvbiB0aGUgY29udHJhcnksIHNhaWQgdGhhdCB0aGUgZW5lbXkgYWxyZWFkeSBoYWQgYWxsIHRoZSByZXNvdXJjZXMgd2l0aCB3aGljaCB0aGV5IHdvdWxkIGdpdmUgYmF0dGxlLCBhbmQgbGFja2VkIG5vdGhpbmcsIHdoZXJlYXMsIGluIHRoZSBjYXNlIG9mIE90aG8sIGEgZm9yY2UgYXMgbGFyZ2UgYXMgdGhlIG9uZSBoZSBhbHJlYWR5IGhhZCBtaWdodCBiZSBleHBlY3RlZCBmcm9tIE15c2lhIGFuZCBQYW5ub25pYSwgaWYgaGUgd291bGQgb25seSB3YWl0IGZvciBoaXMgb3duIGJlc3Qgb3Bwb3J0dW5pdHkgYW5kIGNvbmR1Y3QgdGhlIGNhbXBhaWduIHRvIHN1aXQgdGhhdCBvZiB0aGUgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgbWVuIHdlcmUgbm93IGNvbmZpZGVudCBvZiBzdWNjZXNzIGluIHNwaXRlIG9mIHRoZWlyIGluZmVyaW9yIG51bWJlcnMsIGFuZCBoZSB3b3VsZCBub3QgZmluZCB0aGVtIGxlc3Mga2VlbiBhZnRlciB0aGV5IGhhZCByZWNlaXZlZCByZWluZm9yY2VtZW50cywgbmF5LCB0aGVpciBzdXBlcmlvcml0eSB3b3VsZCBsZWFkIHRoZW0gdG8gZmlnaHQgYWxsIHRoZSBiZXR0ZXIuIEFuZCBiZXNpZGVzLCBkZWxheSB3YXMgdG8gdGhlaXIgYWR2YW50YWdlLCBzaW5jZSB0aGV5IGhhZCBldmVyeXRoaW5nIGluIGFidW5kYW5jZSwgd2hpbGUgdG8gdGhlIGVuZW15IHRpbWUgd291bGQgYnJpbmcgYSBzY2FyY2l0eSBvZiBzdXBwbGllcywgc2luY2UgdGhleSB3ZXJlIG9jY3VweWluZyBhIGhvc3RpbGUgY291bnRyeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIFBhdWxpbnVzIGFyZ3VlZCwgYW5kIE1hcml1cyBDZWxzdXMgdm90ZWQgd2l0aCBoaW0uIEFubml1cyBHYWxsdXMgd2FzIG5vdCBwcmVzZW50LCBiZWluZyB1bmRlciB0cmVhdG1lbnQgZm9yIGEgZmFsbCBmcm9tIGhpcyBob3JzZSwgYnV0IE90aG8gYXNrZWQgaGlzIGFkdmljZSBieSBsZXR0ZXIsIGFuZCBoaXMgY291bnNlbCB3YXMgbm90IHRvIGhhc3RlbiB0aGUgYmF0dGxlLCBidXQgdG8gYXdhaXQgdGhlIGZvcmNlcyBmcm9tIE15c2lhLCB3aGljaCB3ZXJlIGFscmVhZHkgb24gdGhlIG1hcmNoLiBOZXZlcnRoZWxlc3MsIE90aG8gd291bGQgbm90IGxpc3RlbiB0byB0aGVzZSBjb3Vuc2VscywgYW5kIHRoZSBkYXkgd2FzIGNhcnJpZWQgYnkgdGhvc2Ugd2hvIHVyZ2VkIGltbWVkaWF0ZSBiYXR0bGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VmFyaW91cyBvdGhlciByZWFzb25zIGZvciB0aGlzIGFyZSBnaXZlbiBieSB2YXJpb3VzIHdyaXRlcnM7IGJ1dCBtYW5pZmVzdGx5IHRoZSBwcmFldG9yaWFuIHNvbGRpZXJzLCBhcyB0aGV5IHdlcmUgY2FsbGVkLCB3aG8gc2VydmVkIGFzIHRoZSBlbXBlcm9yJ3MgZ3VhcmRzLCBzaW5jZSB0aGV5IHdlcmUgbm93IGdldHRpbmcgYSBtb3JlIGdlbmVyb3VzIHRhc3RlIG9mIHJlYWwgbWlsaXRhcnkgc2VydmljZSBhbmQgbG9uZ2VkIGZvciB0aGVpciBhY2N1c3RvbWVkIGxpZmUgb2YgZGl2ZXJzaW9uIGF0IFJvbWUgaW4gd2hpY2ggZmVzdGl2YWxzIGFib3VuZGVkIGFuZCB3YXIgd2FzIHVua25vd24sIGNvdWxkIG5vdCBiZSByZXN0cmFpbmVkLCBidXQgd2VyZSBlYWdlciBmb3IgdGhlIGJhdHRsZSwgZmVlbGluZyBzdXJlIHRoYXQgYXQgdGhlIHZlcnkgZmlyc3Qgb25zZXQgdGhleSB3b3VsZCBvdmVyd2hlbG0gdGhlaXIgb3Bwb25lbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaXQgd291bGQgc2VlbSB0aGF0IE90aG8gaGltc2VsZiBjb3VsZCBub3QgbG9uZ2VyIGJlYXIgdXAgYWdhaW5zdCB0aGUgdW5jZXJ0YWludHkgb2YgdGhlIGlzc3VlLCBub3IgZW5kdXJlIChzbyBlZmZlbWluYXRlIHdhcyBoZSBhbmQgc28gdW51c2VkIHRvIGNvbW1hbmQpIGhpcyBvd24gdGhvdWdodHMgb2YgdGhlIGRpcmUgcGVyaWwgY29uZnJvbnRpbmcgaGltOyBidXQgd29ybiBvdXQgYnkgaGlzIGFueGlldGllcywgaGUgdmVpbGVkIGhpcyBleWVzLCBsaWtlIG9uZSBhYm91dCB0byBsZWFwIGZyb20gYSBwcmVjaXBpY2UsIGFuZCBoYXN0ZW5lZCB0byBjb21taXQgaGlzIGNhdXNlIHRvIGZvcnR1bmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGlzIHRoZSBhY2NvdW50IGdpdmVuIGJ5IFNlY3VuZHVzIHRoZSByaGV0b3JpY2lhbiwgd2hvIHdhcyBPdGhvJ3Mgc2VjcmV0YXJ5LiBCdXQgb3RoZXJzIHdvdWxkIHRlbGwgdXMgdGhhdCBib3RoIGFybWllcyB3ZXJlIHN0cm9uZ2x5IGluY2xpbmVkIHRvIGNvbmZlcjsgYW5kIGFib3ZlIGFsbCwgaWYgdGhleSBjb3VsZCBhZ3JlZSwgdG8gZWxlY3QgYXMgZW1wZXJvciB0aGUgYmVzdCBvZiB0aGUgY29tbWFuZGVycyB3aG8gd2VyZSB3aXRoIHRoZW0sIGJ1dCBpZiBub3QsIHRvIGNvbnZlbmUgdGhlIHNlbmF0ZSBhbmQgY29tbWl0IHRvIGl0IHRoZSBjaG9pY2Ugb2YgYW4gZW1wZXJvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNpbmNlIG5laXRoZXIgb2YgdGhlIG1lbiB3aG8gdGhlbiBoYWQgdGhlIHRpdGxlIG9mIGVtcGVyb3IgZW5qb3llZCBoaWdoIHJlcHV0ZSwgaXQgaXMgbm90IHVubGlrZWx5IHRoYXQgdGhlIHJlYWwgc29sZGllcnMsIHRob3NlIHdobyBrbmV3IHdoYXQgaGFyZHNoaXAgd2FzIGFuZCBoYWQgc2Vuc2UsIHNob3VsZCBiZSBsZWQgdG8gcmVmbGVjdCB0aGF0IGl0IHdvdWxkIGJlIGEgZHJlYWRmdWwgYW5kIG1vc3QgaGF0ZWZ1bCB0aGluZyBpZiB0aGUgZXZpbHMgd2hpY2ggdGhlIGNpdGl6ZW5zIGhhZCBvbmNlIHRvIHRoZWlyIHNvcnJvdyBpbmZsaWN0ZWQgdXBvbiBvbmUgYW5vdGhlciBhbmQgc3VmZmVyZWQgYmVjYXVzZSBvZiBTdWxsYSBhbmQgTWFyaXVzLCBhbmQgYWdhaW4gYmVjYXVzZSBvZiBDYWVzYXIgYW5kIFBvbXBleSwgc2hvdWxkIG5vdyBiZSBlbmR1cmVkIGFnYWluIG9ubHkgdG8gbWFrZSB0aGUgaW1wZXJpYWwgcG93ZXIgYSBtZWFucyBmb3IgcHJvdmlkaW5nIGZvciB0aGUgZ2x1dHRvbnkgYW5kIGRydW5rZW5uZXNzIG9mIFZpdGVsbGl1cyBvciBmb3IgdGhlIGx1eHVyeSBhbmQgbGljZW50aW91c25lc3Mgb2YgT3Roby4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc3VzcGVjdGVkLCB0aGVuLCB0aGF0IENlbHN1cyB3YXMgYXdhcmUgb2YgdGhlc2UgZmVlbGluZ3MsIGFuZCB0aGVyZWZvcmUgdHJpZWQgdG8gaW50ZXJwb3NlIGRlbGF5LCBob3BpbmcgdGhhdCB0aGUgaXNzdWUgd291bGQgdGh1cyBiZSBkZWNpZGVkIHdpdGhvdXQgaGFyZHNoaXAgYW5kIGJhdHRsZSwgYW5kIHRoYXQgT3RobywgZmVhcmluZyB0aGlzLCBoYXN0ZW5lZCBvbiB0aGUgYmF0dGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5WYXJpb3VzIG90aGVyIHJlYXNvbnMgZm9yIHRoaXMgYXJlIGdpdmVuIGJ5IHZhcmlvdXMgd3JpdGVyczsgYnV0IG1hbmlmZXN0bHkgdGhlIHByYWV0b3JpYW4gc29sZGllcnMsIGFzIHRoZXkgd2VyZSBjYWxsZWQsIHdobyBzZXJ2ZWQgYXMgdGhlIGVtcGVyb3IncyBndWFyZHMsIHNpbmNlIHRoZXkgd2VyZSBub3cgZ2V0dGluZyBhIG1vcmUgZ2VuZXJvdXMgdGFzdGUgb2YgcmVhbCBtaWxpdGFyeSBzZXJ2aWNlIGFuZCBsb25nZWQgZm9yIHRoZWlyIGFjY3VzdG9tZWQgbGlmZSBvZiBkaXZlcnNpb24gYXQgUm9tZSBpbiB3aGljaCBmZXN0aXZhbHMgYWJvdW5kZWQgYW5kIHdhciB3YXMgdW5rbm93biwgY291bGQgbm90IGJlIHJlc3RyYWluZWQsIGJ1dCB3ZXJlIGVhZ2VyIGZvciB0aGUgYmF0dGxlLCBmZWVsaW5nIHN1cmUgdGhhdCBhdCB0aGUgdmVyeSBmaXJzdCBvbnNldCB0aGV5IHdvdWxkIG92ZXJ3aGVsbSB0aGVpciBvcHBvbmVudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBpdCB3b3VsZCBzZWVtIHRoYXQgT3RobyBoaW1zZWxmIGNvdWxkIG5vdCBsb25nZXIgYmVhciB1cCBhZ2FpbnN0IHRoZSB1bmNlcnRhaW50eSBvZiB0aGUgaXNzdWUsIG5vciBlbmR1cmUgKHNvIGVmZmVtaW5hdGUgd2FzIGhlIGFuZCBzbyB1bnVzZWQgdG8gY29tbWFuZCkgaGlzIG93biB0aG91Z2h0cyBvZiB0aGUgZGlyZSBwZXJpbCBjb25mcm9udGluZyBoaW07IGJ1dCB3b3JuIG91dCBieSBoaXMgYW54aWV0aWVzLCBoZSB2ZWlsZWQgaGlzIGV5ZXMsIGxpa2Ugb25lIGFib3V0IHRvIGxlYXAgZnJvbSBhIHByZWNpcGljZSwgYW5kIGhhc3RlbmVkIHRvIGNvbW1pdCBoaXMgY2F1c2UgdG8gZm9ydHVuZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGlzIHRoZSBhY2NvdW50IGdpdmVuIGJ5IFNlY3VuZHVzIHRoZSByaGV0b3JpY2lhbiwgd2hvIHdhcyBPdGhvJ3Mgc2VjcmV0YXJ5LiBCdXQgb3RoZXJzIHdvdWxkIHRlbGwgdXMgdGhhdCBib3RoIGFybWllcyB3ZXJlIHN0cm9uZ2x5IGluY2xpbmVkIHRvIGNvbmZlcjsgYW5kIGFib3ZlIGFsbCwgaWYgdGhleSBjb3VsZCBhZ3JlZSwgdG8gZWxlY3QgYXMgZW1wZXJvciB0aGUgYmVzdCBvZiB0aGUgY29tbWFuZGVycyB3aG8gd2VyZSB3aXRoIHRoZW0sIGJ1dCBpZiBub3QsIHRvIGNvbnZlbmUgdGhlIHNlbmF0ZSBhbmQgY29tbWl0IHRvIGl0IHRoZSBjaG9pY2Ugb2YgYW4gZW1wZXJvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSBuZWl0aGVyIG9mIHRoZSBtZW4gd2hvIHRoZW4gaGFkIHRoZSB0aXRsZSBvZiBlbXBlcm9yIGVuam95ZWQgaGlnaCByZXB1dGUsIGl0IGlzIG5vdCB1bmxpa2VseSB0aGF0IHRoZSByZWFsIHNvbGRpZXJzLCB0aG9zZSB3aG8ga25ldyB3aGF0IGhhcmRzaGlwIHdhcyBhbmQgaGFkIHNlbnNlLCBzaG91bGQgYmUgbGVkIHRvIHJlZmxlY3QgdGhhdCBpdCB3b3VsZCBiZSBhIGRyZWFkZnVsIGFuZCBtb3N0IGhhdGVmdWwgdGhpbmcgaWYgdGhlIGV2aWxzIHdoaWNoIHRoZSBjaXRpemVucyBoYWQgb25jZSB0byB0aGVpciBzb3Jyb3cgaW5mbGljdGVkIHVwb24gb25lIGFub3RoZXIgYW5kIHN1ZmZlcmVkIGJlY2F1c2Ugb2YgU3VsbGEgYW5kIE1hcml1cywgYW5kIGFnYWluIGJlY2F1c2Ugb2YgQ2Flc2FyIGFuZCBQb21wZXksIHNob3VsZCBub3cgYmUgZW5kdXJlZCBhZ2FpbiBvbmx5IHRvIG1ha2UgdGhlIGltcGVyaWFsIHBvd2VyIGEgbWVhbnMgZm9yIHByb3ZpZGluZyBmb3IgdGhlIGdsdXR0b255IGFuZCBkcnVua2VubmVzcyBvZiBWaXRlbGxpdXMgb3IgZm9yIHRoZSBsdXh1cnkgYW5kIGxpY2VudGlvdXNuZXNzIG9mIE90aG8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHN1c3BlY3RlZCwgdGhlbiwgdGhhdCBDZWxzdXMgd2FzIGF3YXJlIG9mIHRoZXNlIGZlZWxpbmdzLCBhbmQgdGhlcmVmb3JlIHRyaWVkIHRvIGludGVycG9zZSBkZWxheSwgaG9waW5nIHRoYXQgdGhlIGlzc3VlIHdvdWxkIHRodXMgYmUgZGVjaWRlZCB3aXRob3V0IGhhcmRzaGlwIGFuZCBiYXR0bGUsIGFuZCB0aGF0IE90aG8sIGZlYXJpbmcgdGhpcywgaGFzdGVuZWQgb24gdGhlIGJhdHRsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T3RobyBoaW1zZWxmIHJldHVybmVkIHRvIEJyaXhpbGx1bSwgYW5kIGluIHRoaXMgdG9vIGhlIG1hZGUgYSBtaXN0YWtlLCBub3Qgb25seSBiZWNhdXNlIGhlIHRvb2sgYXdheSBmcm9tIHRoZSBjb21iYXRhbnRzIHRoZSByZXNwZWN0IGFuZCBhbWJpdGlvbiB3aGljaCBoaXMgcHJlc2VuY2UgYW5kIG92ZXJzaWdodCBpbnNwaXJlZCwgYnV0IGFsc28gYmVjYXVzZSwgYnkgbGVhZGluZyBhd2F5IGFzIGhpcyBib2R5Z3VhcmQgb2YgZm9vdCBhbmQgaG9yc2UgdGhlIG1lbiB3aG8gd2VyZSBtb3N0IHZpZ29yb3VzIGFuZCBlYWdlciB0byBwbGVhc2UgaGltLCBoZSBjdXQgYXdheSwgYXMgaXQgd2VyZSwgdGhlIGhlYWQgYW5kIGZyb250IG9mIGhpcyBhcm15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T3RobyBoaW1zZWxmIHJldHVybmVkIHRvIEJyaXhpbGx1bSwgYW5kIGluIHRoaXMgdG9vIGhlIG1hZGUgYSBtaXN0YWtlLCBub3Qgb25seSBiZWNhdXNlIGhlIHRvb2sgYXdheSBmcm9tIHRoZSBjb21iYXRhbnRzIHRoZSByZXNwZWN0IGFuZCBhbWJpdGlvbiB3aGljaCBoaXMgcHJlc2VuY2UgYW5kIG92ZXJzaWdodCBpbnNwaXJlZCwgYnV0IGFsc28gYmVjYXVzZSwgYnkgbGVhZGluZyBhd2F5IGFzIGhpcyBib2R5Z3VhcmQgb2YgZm9vdCBhbmQgaG9yc2UgdGhlIG1lbiB3aG8gd2VyZSBtb3N0IHZpZ29yb3VzIGFuZCBlYWdlciB0byBwbGVhc2UgaGltLCBoZSBjdXQgYXdheSwgYXMgaXQgd2VyZSwgdGhlIGhlYWQgYW5kIGZyb250IG9mIGhpcyBhcm15LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgdGhpcyB0aW1lIHRoZXJlIHdhcyBhbHNvIGEgY29uZmxpY3QgYXQgdGhlIHJpdmVyIFBvLCB3aGVyZSBDYWVjaW5hIHRyaWVkIHRvIGJ1aWxkIGEgYnJpZGdlIGFjcm9zcyB0aGUgc3RyZWFtLCBhbmQgT3RobydzIHNvbGRpZXJzIGF0dGFja2VkIGhpbSBhbmQgdHJpZWQgdG8gcHJldmVudCBpdC4gTm90IHN1Y2NlZWRpbmcsIE90aG8ncyBtZW4gbG9hZGVkIHRoZWlyIHZlc3NlbHMgd2l0aCB0b3JjaHdvb2QgZnVsbCBvZiBzdWxwaHVyIGFuZCBwaXRjaCwgYW5kIGJlZ2FuIHRvIGNyb3NzIHRoZSByaXZlcjsgYnV0IGEgYmxhc3Qgb2Ygd2luZCBzdWRkZW5seSBzbW90ZSB0aGUgbWF0ZXJpYWwgd2hpY2ggdGhleSBoYWQgcHJlcGFyZWQgZm9yIHVzZSBhZ2FpbnN0IHRoZSBlbmVteSwgYW5kIGZhbm5lZCBpdCBhZmlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rmlyc3Qgc21va2UgYXJvc2UgZnJvbSBpdCwgdGhlbiBicmlnaHQgZmxhbWVzLCBzbyB0aGF0IHRoZSBjcmV3cyB3ZXJlIGNvbmZvdW5kZWQgYW5kIGxlYXBlZCBvdmVyYm9hcmQgaW50byB0aGUgcml2ZXIsIHVwc2V0dGluZyB0aGVpciBib2F0cywgYW5kIHB1dHRpbmcgdGhlbXNlbHZlcyBhdCB0aGUgbWVyY3kgb2YgYSBqZWVyaW5nIGVuZW15LiBNb3Jlb3ZlciwgdGhlIEdlcm1hbnMgYXR0YWNrZWQgT3RobydzIGdsYWRpYXRvcnMgYXQgYW4gaXNsYW5kIGluIHRoZSByaXZlciwgb3ZlcnBvd2VyZWQgdGhlbSBhbmQgc2xldyBub3QgYSBmZXcgb2YgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyB0aGlzIHRpbWUgdGhlcmUgd2FzIGFsc28gYSBjb25mbGljdCBhdCB0aGUgcml2ZXIgUG8sIHdoZXJlIENhZWNpbmEgdHJpZWQgdG8gYnVpbGQgYSBicmlkZ2UgYWNyb3NzIHRoZSBzdHJlYW0sIGFuZCBPdGhvJ3Mgc29sZGllcnMgYXR0YWNrZWQgaGltIGFuZCB0cmllZCB0byBwcmV2ZW50IGl0LiBOb3Qgc3VjY2VlZGluZywgT3RobydzIG1lbiBsb2FkZWQgdGhlaXIgdmVzc2VscyB3aXRoIHRvcmNod29vZCBmdWxsIG9mIHN1bHBodXIgYW5kIHBpdGNoLCBhbmQgYmVnYW4gdG8gY3Jvc3MgdGhlIHJpdmVyOyBidXQgYSBibGFzdCBvZiB3aW5kIHN1ZGRlbmx5IHNtb3RlIHRoZSBtYXRlcmlhbCB3aGljaCB0aGV5IGhhZCBwcmVwYXJlZCBmb3IgdXNlIGFnYWluc3QgdGhlIGVuZW15LCBhbmQgZmFubmVkIGl0IGFmaXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZpcnN0IHNtb2tlIGFyb3NlIGZyb20gaXQsIHRoZW4gYnJpZ2h0IGZsYW1lcywgc28gdGhhdCB0aGUgY3Jld3Mgd2VyZSBjb25mb3VuZGVkIGFuZCBsZWFwZWQgb3ZlcmJvYXJkIGludG8gdGhlIHJpdmVyLCB1cHNldHRpbmcgdGhlaXIgYm9hdHMsIGFuZCBwdXR0aW5nIHRoZW1zZWx2ZXMgYXQgdGhlIG1lcmN5IG9mIGEgamVlcmluZyBlbmVteS4gTW9yZW92ZXIsIHRoZSBHZXJtYW5zIGF0dGFja2VkIE90aG8ncyBnbGFkaWF0b3JzIGF0IGFuIGlzbGFuZCBpbiB0aGUgcml2ZXIsIG92ZXJwb3dlcmVkIHRoZW0gYW5kIHNsZXcgbm90IGEgZmV3IG9mIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGRpc2FzdGVycyB0aHJldyBPdGhvJ3Mgc29sZGllcnMgYXQgQmVkcmlhY3VtIGludG8gYSByYWdlIGZvciBiYXR0bGUsIGFuZCBQcm9jdWx1cyB0aGVyZWZvcmUgbGVkIHRoZW0gZm9ydGggb3V0IG9mIEJlZHJpYWN1bSwgYW5kIGFmdGVyIGEgbWFyY2ggb2YgZmlmdHkgZnVybG9uZ3MgcGl0Y2hlZCBoaXMgY2FtcCwgYnV0IGluIGEgbWFubmVyIHNvIGlnbm9yYW50IGFuZCByaWRpY3Vsb3VzIHRoYXQgaGlzIG1lbiB3ZXJlIHRyb3VibGVkIGJ5IGxhY2sgb2Ygd2F0ZXIsIGFsdGhvdWdoIGl0IHdhcyB0aGUgc3ByaW5nIG9mIHRoZSB5ZWFyIGFuZCB0aGUgcGxhaW5zIGFyb3VuZCBhYm91bmRlZCBpbiBydW5uaW5nIHN0cmVhbXMgYW5kIHJpdmVycyB0aGF0IG5ldmVyIGRyaWVkIHVwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgZm9sbG93aW5nIGRheSBoZSBwcm9wb3NlZCB0byBtYWtlIGEgbWFyY2ggb2Ygbm8gbGVzcyB0aGFuIGEgaHVuZHJlZCBmdXJsb25ncyBhbmQgYXR0YWNrIHRoZSBlbmVteSwgYnV0IFBhdWxpbnVzIG9iamVjdGVkLCBhbmQgdGhvdWdodCB0aGV5IG91Z2h0IHRvIHdhaXQgYW5kIG5vdCB0aXJlIHRoZW1zZWx2ZXMgYmVmb3JlaGFuZCwgbm9yIGpvaW4gYmF0dGxlIGltbWVkaWF0ZWx5IGFmdGVyIGEgbWFyY2ggd2l0aCBtZW4gd2hvIGhhZCBhcm1lZCBhbmQgYXJyYXllZCB0aGVtc2VsdmVzIGF0IHRoZWlyIGxlaXN1cmUsIHdoaWxlIHRoZXkgdGhlbXNlbHZlcyB3ZXJlIGFkdmFuY2luZyBzbyBncmVhdCBhIGRpc3RhbmNlIHdpdGggYWxsIHRoZWlyIGJlYXN0cyBvZiBidXJkZW4gYW5kIGNhbXAtZm9sbG93ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSB0aGUgZ2VuZXJhbHMgd2VyZSBkaXNwdXRpbmcgYWJvdXQgdGhlIG1hdHRlciwgdGhlcmUgY2FtZSBmcm9tIE90aG8gYSBOdW1pZGlhbiBjb3VyaWVyIHdpdGggYSBsZXR0ZXIgd2hpY2ggb3JkZXJlZCB0aGVtIG5vdCB0byB3YWl0IG9yIGRlbGF5LCBidXQgdG8gbWFyY2ggYXQgb25jZSBhZ2FpbnN0IHRoZSBlbmVteS4gQWNjb3JkaW5nbHksIHRoZXkgZGVjYW1wZWQgYW5kIG1vdmVkIGZvcndhcmQsIGFuZCBDYWVjaW5hLCB3aG8gd2FzIG11Y2ggZGlzdHVyYmVkIG9uIGxlYXJuaW5nIG9mIHRoZWlyIGFwcHJvYWNoLCBoYXN0aWx5IGFiYW5kb25lZCBoaXMgb3BlcmF0aW9ucyBhdCB0aGUgcml2ZXIgYW5kIGNhbWUgdG8gaGlzIGNhbXAuIFRoZXJlIG1vc3Qgb2YgdGhlIHNvbGRpZXJzIGhhZCBhbHJlYWR5IGFybWVkIHRoZW1zZWx2ZXMsIGFuZCBWYWxlbnMgd2FzIGdpdmluZyBvdXQgdGhlIHdhdGNod29yZCB0byB0aGVtLCBhbmQgd2hpbGUgdGhlIGxlZ2lvbnMgd2VyZSB0YWtpbmcgdXAgdGhlaXIgcG9zaXRpb25zLCB0aGUgYmVzdCBvZiB0aGUgY2F2YWxyeSB3ZXJlIHNlbnQgb3V0IGluIGFkdmFuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgZGlzYXN0ZXJzIHRocmV3IE90aG8ncyBzb2xkaWVycyBhdCBCZWRyaWFjdW0gaW50byBhIHJhZ2UgZm9yIGJhdHRsZSwgYW5kIFByb2N1bHVzIHRoZXJlZm9yZSBsZWQgdGhlbSBmb3J0aCBvdXQgb2YgQmVkcmlhY3VtLCBhbmQgYWZ0ZXIgYSBtYXJjaCBvZiBmaWZ0eSBmdXJsb25ncyBwaXRjaGVkIGhpcyBjYW1wLCBidXQgaW4gYSBtYW5uZXIgc28gaWdub3JhbnQgYW5kIHJpZGljdWxvdXMgdGhhdCBoaXMgbWVuIHdlcmUgdHJvdWJsZWQgYnkgbGFjayBvZiB3YXRlciwgYWx0aG91Z2ggaXQgd2FzIHRoZSBzcHJpbmcgb2YgdGhlIHllYXIgYW5kIHRoZSBwbGFpbnMgYXJvdW5kIGFib3VuZGVkIGluIHJ1bm5pbmcgc3RyZWFtcyBhbmQgcml2ZXJzIHRoYXQgbmV2ZXIgZHJpZWQgdXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHByb3Bvc2VkIHRvIG1ha2UgYSBtYXJjaCBvZiBubyBsZXNzIHRoYW4gYSBodW5kcmVkIGZ1cmxvbmdzIGFuZCBhdHRhY2sgdGhlIGVuZW15LCBidXQgUGF1bGludXMgb2JqZWN0ZWQsIGFuZCB0aG91Z2h0IHRoZXkgb3VnaHQgdG8gd2FpdCBhbmQgbm90IHRpcmUgdGhlbXNlbHZlcyBiZWZvcmVoYW5kLCBub3Igam9pbiBiYXR0bGUgaW1tZWRpYXRlbHkgYWZ0ZXIgYSBtYXJjaCB3aXRoIG1lbiB3aG8gaGFkIGFybWVkIGFuZCBhcnJheWVkIHRoZW1zZWx2ZXMgYXQgdGhlaXIgbGVpc3VyZSwgd2hpbGUgdGhleSB0aGVtc2VsdmVzIHdlcmUgYWR2YW5jaW5nIHNvIGdyZWF0IGEgZGlzdGFuY2Ugd2l0aCBhbGwgdGhlaXIgYmVhc3RzIG9mIGJ1cmRlbiBhbmQgY2FtcC1mb2xsb3dlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBnZW5lcmFscyB3ZXJlIGRpc3B1dGluZyBhYm91dCB0aGUgbWF0dGVyLCB0aGVyZSBjYW1lIGZyb20gT3RobyBhIE51bWlkaWFuIGNvdXJpZXIgd2l0aCBhIGxldHRlciB3aGljaCBvcmRlcmVkIHRoZW0gbm90IHRvIHdhaXQgb3IgZGVsYXksIGJ1dCB0byBtYXJjaCBhdCBvbmNlIGFnYWluc3QgdGhlIGVuZW15LiBBY2NvcmRpbmdseSwgdGhleSBkZWNhbXBlZCBhbmQgbW92ZWQgZm9yd2FyZCwgYW5kIENhZWNpbmEsIHdobyB3YXMgbXVjaCBkaXN0dXJiZWQgb24gbGVhcm5pbmcgb2YgdGhlaXIgYXBwcm9hY2gsIGhhc3RpbHkgYWJhbmRvbmVkIGhpcyBvcGVyYXRpb25zIGF0IHRoZSByaXZlciBhbmQgY2FtZSB0byBoaXMgY2FtcC4gVGhlcmUgbW9zdCBvZiB0aGUgc29sZGllcnMgaGFkIGFscmVhZHkgYXJtZWQgdGhlbXNlbHZlcywgYW5kIFZhbGVucyB3YXMgZ2l2aW5nIG91dCB0aGUgd2F0Y2h3b3JkIHRvIHRoZW0sIGFuZCB3aGlsZSB0aGUgbGVnaW9ucyB3ZXJlIHRha2luZyB1cCB0aGVpciBwb3NpdGlvbnMsIHRoZSBiZXN0IG9mIHRoZSBjYXZhbHJ5IHdlcmUgc2VudCBvdXQgaW4gYWR2YW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgZm9yIHNvbWUgcmVhc29uLCBpdCB3YXMgYmVsaWV2ZWQgYW5kIHJ1bW91cmVkIGFtb25nIE90aG8ncyB2YW5ndWFyZCB0aGF0IHRoZSBnZW5lcmFscyBvZiBWaXRlbGxpdXMgd291bGQgY29tZSBvdmVyIHRvIHRoZWlyIHNpZGUuIEFjY29yZGluZ2x5LCB3aGVuIHRoZXNlIGRyZXcgbmVhciwgT3RobydzIG1lbiBncmVldGVkIHRoZW0gaW4gYSBmcmllbmRseSBmYXNoaW9uIGFuZCBjYWxsZWQgdGhlbSBmZWxsb3ctc29sZGllcnMuIFRoZSBlbmVteSwgaG93ZXZlciwgcmV0dXJuZWQgdGhlIHNhbHV0YXRpb24gaW4gbm8ga2luZGx5IHNwaXJpdCwgYnV0IHdpdGggYW5nZXIgYW5kIGhvc3RpbGUgY3JpZXMsIHNvIHRoYXQgdGhvc2Ugd2hvIGhhZCBncmVldGVkIHRoZW0gd2VyZSBkZWplY3RlZCwgYW5kIHdlcmUgc3VzcGVjdGVkIG9mIHRyZWFjaGVyeSBieSB0aGUgb3RoZXJzIG9uIHRoZWlyIHNpZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCB0aGluZyB0aGF0IHRocmV3IE90aG8ncyBtZW4gaW50byBjb25mdXNpb24sIGFuZCBhdCBhIHRpbWUgd2hlbiB0aGUgZW5lbXkgd2VyZSBjbG9zZSBhdCBoYW5kLiBBbmQgYmVzaWRlcywgbm90aGluZyBlbHNlIHdhcyBkb25lIHByb3Blcmx5LCBzaW5jZSB0aGUgYmFnZ2FnZS10cmFpbiB3YW5kZXJlZCBhYm91dCBhbW9uZyB0aGUgZmlnaHRpbmcgbWVuIGFuZCBjYXVzZWQgZ3JlYXQgZGlzb3JkZXIuIE1vcmVvdmVyLCB0aGUgbGluZSBvZiBiYXR0bGUgd2FzIG9mdGVuIGJyb2tlbiBieSB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQsIHdoaWNoIHdhcyBmdWxsIG9mIHRyZW5jaGVzIGFuZCBwaXRzLCBhbmQgaW4gYXZvaWRpbmcgb3IgZ29pbmcgYXJvdW5kIHRoZXNlIHRoZSBtZW4gd2VyZSBjb21wZWxsZWQgdG8gZW5nYWdlIHRoZWlyIG9wcG9uZW50cyBwcm9taXNjdW91c2x5IGFuZCBpbiBtYW55IGRldGFjaG1lbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Pbmx5IHR3byBsZWdpb25zICh0byB1c2UgdGhlIFJvbWFuIHdvcmQpLCB0aGF0IG9mIFZpdGVsbGl1cyBjYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SYXBheDwvcT4gKG9yIERldm91cmVyKSBhbmQgdGhhdCBvZiBPdGhvIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFkaXV0cml4PC9xPiAob3IgSGVscGVyKSwgZ290IG91dCBpbnRvIGEgdHJlZWxlc3MgYW5kIGV4dGVuZGVkIHBsYWluLCBlbmdhZ2VkIGluIGZ1bGwgZm9ybWF0aW9uLCBhbmQgZm91Z2h0IGEgcmVndWxhciBiYXR0bGUgZm9yIGEgbG9uZyB0aW1lLiBPdGhvJ3MgbWVuIHdlcmUgc3R1cmR5IGFuZCBicmF2ZSwgYnV0IHdlcmUgbm93IGZvciB0aGUgZmlyc3QgdGltZSBnZXR0aW5nIGEgdGFzdGUgb2Ygd2FyIGFuZCBmaWdodGluZzsgdGhvc2Ugb2YgVml0ZWxsaXVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgaGFkIHNlZW4gbWFueSBiYXR0bGVzIGFuZCB3ZXJlIHVzZWQgdG8gdGhlbSwgYnV0IHRoZXkgd2VyZSBub3cgb2xkIGFuZCBwYXN0IHRoZWlyIHByaW1lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgZm9yIHNvbWUgcmVhc29uLCBpdCB3YXMgYmVsaWV2ZWQgYW5kIHJ1bW91cmVkIGFtb25nIE90aG8ncyB2YW5ndWFyZCB0aGF0IHRoZSBnZW5lcmFscyBvZiBWaXRlbGxpdXMgd291bGQgY29tZSBvdmVyIHRvIHRoZWlyIHNpZGUuIEFjY29yZGluZ2x5LCB3aGVuIHRoZXNlIGRyZXcgbmVhciwgT3RobydzIG1lbiBncmVldGVkIHRoZW0gaW4gYSBmcmllbmRseSBmYXNoaW9uIGFuZCBjYWxsZWQgdGhlbSBmZWxsb3ctc29sZGllcnMuIFRoZSBlbmVteSwgaG93ZXZlciwgcmV0dXJuZWQgdGhlIHNhbHV0YXRpb24gaW4gbm8ga2luZGx5IHNwaXJpdCwgYnV0IHdpdGggYW5nZXIgYW5kIGhvc3RpbGUgY3JpZXMsIHNvIHRoYXQgdGhvc2Ugd2hvIGhhZCBncmVldGVkIHRoZW0gd2VyZSBkZWplY3RlZCwgYW5kIHdlcmUgc3VzcGVjdGVkIG9mIHRyZWFjaGVyeSBieSB0aGUgb3RoZXJzIG9uIHRoZWlyIHNpZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCB0aGluZyB0aGF0IHRocmV3IE90aG8ncyBtZW4gaW50byBjb25mdXNpb24sIGFuZCBhdCBhIHRpbWUgd2hlbiB0aGUgZW5lbXkgd2VyZSBjbG9zZSBhdCBoYW5kLiBBbmQgYmVzaWRlcywgbm90aGluZyBlbHNlIHdhcyBkb25lIHByb3Blcmx5LCBzaW5jZSB0aGUgYmFnZ2FnZS10cmFpbiB3YW5kZXJlZCBhYm91dCBhbW9uZyB0aGUgZmlnaHRpbmcgbWVuIGFuZCBjYXVzZWQgZ3JlYXQgZGlzb3JkZXIuIE1vcmVvdmVyLCB0aGUgbGluZSBvZiBiYXR0bGUgd2FzIG9mdGVuIGJyb2tlbiBieSB0aGUgbmF0dXJlIG9mIHRoZSBncm91bmQsIHdoaWNoIHdhcyBmdWxsIG9mIHRyZW5jaGVzIGFuZCBwaXRzLCBhbmQgaW4gYXZvaWRpbmcgb3IgZ29pbmcgYXJvdW5kIHRoZXNlIHRoZSBtZW4gd2VyZSBjb21wZWxsZWQgdG8gZW5nYWdlIHRoZWlyIG9wcG9uZW50cyBwcm9taXNjdW91c2x5IGFuZCBpbiBtYW55IGRldGFjaG1lbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9ubHkgdHdvIGxlZ2lvbnMgKHRvIHVzZSB0aGUgUm9tYW4gd29yZCksIHRoYXQgb2YgVml0ZWxsaXVzIGNhbGxlZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UmFwYXg8L3E+IChvciBEZXZvdXJlcikgYW5kIHRoYXQgb2YgT3RobyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFkaXV0cml4PC9xPiAob3IgSGVscGVyKSwgZ290IG91dCBpbnRvIGEgdHJlZWxlc3MgYW5kIGV4dGVuZGVkIHBsYWluLCBlbmdhZ2VkIGluIGZ1bGwgZm9ybWF0aW9uLCBhbmQgZm91Z2h0IGEgcmVndWxhciBiYXR0bGUgZm9yIGEgbG9uZyB0aW1lLiBPdGhvJ3MgbWVuIHdlcmUgc3R1cmR5IGFuZCBicmF2ZSwgYnV0IHdlcmUgbm93IGZvciB0aGUgZmlyc3QgdGltZSBnZXR0aW5nIGEgdGFzdGUgb2Ygd2FyIGFuZCBmaWdodGluZzsgdGhvc2Ugb2YgVml0ZWxsaXVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgaGFkIHNlZW4gbWFueSBiYXR0bGVzIGFuZCB3ZXJlIHVzZWQgdG8gdGhlbSwgYnV0IHRoZXkgd2VyZSBub3cgb2xkIGFuZCBwYXN0IHRoZWlyIHByaW1lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyBPdGhvJ3MgbWVuIGNoYXJnZWQgdXBvbiB0aGVtLCBkcm92ZSB0aGVtIGJhY2ssIGFuZCBjYXB0dXJlZCB0aGVpciBlYWdsZSwga2lsbGluZyBuZWFybHkgYWxsIHdobyBzdG9vZCBpbiB0aGUgZmlyc3QgcmFuazsgYnV0IHRoZSBvdGhlcnMsIGltcGVsbGVkIGJ5IHNoYW1lIGFuZCBhbmdlciwgZmVsbCB1cG9uIHRoZWlyIGZvZXMsIHNsZXcgT3JmaWRpdXMsIHRoZSBjb21tYW5kZXIgb2YgdGhlIGxlZ2lvbiwgYW5kIHNlaXplZCBtYW55IG9mIHRoZWlyIHN0YW5kYXJkcy4gQWdhaW5zdCBPdGhvJ3MgZ2xhZGlhdG9ycywgdG9vLCB3aG8gd2VyZSBzdXBwb3NlZCB0byBoYXZlIGV4cGVyaWVuY2UgYW5kIGNvdXJhZ2UgaW4gY2xvc2UgZmlnaHRpbmcsIEFsZmVudXMgVmFydXMgbGVkIHVwIHRoZSB0cm9vcHMgY2FsbGVkIEJhdGF2aWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBhcmUgdGhlIGJlc3QgY2F2YWxyeSBvZiB0aGUgR2VybWFucywgYW5kIGNvbWUgZnJvbSBhbiBpc2xhbmQgbWFkZSBieSB0aGUgUmhpbmUuIEEgZmV3IG9mIHRoZSBnbGFkaWF0b3JzIHdpdGhzdG9vZCB0aGVzZSwgYnV0IG1vc3Qgb2YgdGhlbSBmbGVkIHRvd2FyZHMgdGhlIHJpdmVyLCB3aGVyZSB0aGV5IGVuY291bnRlcmVkIGNvaG9ydHMgb2YgdGhlIGVuZW15IGluIGJhdHRsZSBhcnJheSwgYW5kIGluIGRlZmVuZGluZyB0aGVtc2VsdmVzIGFnYWluc3QgdGhlc2UsIHdlcmUgY3V0IG9mZiB0byBhIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBwcmFldG9yaWFuIHNvbGRpZXJzIGZvdWdodCBtb3JlIHNoYW1lZnVsbHkgdGhhbiBhbnkgb3RoZXJzLiBUaGV5IGRpZCBub3QgZXZlbiB3YWl0IGZvciB0aGVpciBvcHBvbmVudHMgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycywgYnV0IGZsZWQgdGhyb3VnaCB0aGUgcmFua3Mgb2YgdGhlaXIgc3RpbGwgdW52YW5xdWlzaGVkIGNvbXJhZGVzLCBmaWxsaW5nIHRoZW0gd2l0aCBmZWFyIGFuZCBjb25mdXNpb24uIE5vdHdpdGhzdGFuZGluZyBhbGwgdGhpcywgbWFueSBvZiBPdGhvJ3MgbWVuIGNvbnF1ZXJlZCB0aG9zZSB3aG8gb3Bwb3NlZCB0aGVtLCBmb3JjZWQgdGhlaXIgd2F5IHRocm91Z2ggdGhlIHZpY3RvcmlvdXMgZW5lbXksIGFuZCByZWdhaW5lZCB0aGVpciBjYW1wLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIE90aG8ncyBtZW4gY2hhcmdlZCB1cG9uIHRoZW0sIGRyb3ZlIHRoZW0gYmFjaywgYW5kIGNhcHR1cmVkIHRoZWlyIGVhZ2xlLCBraWxsaW5nIG5lYXJseSBhbGwgd2hvIHN0b29kIGluIHRoZSBmaXJzdCByYW5rOyBidXQgdGhlIG90aGVycywgaW1wZWxsZWQgYnkgc2hhbWUgYW5kIGFuZ2VyLCBmZWxsIHVwb24gdGhlaXIgZm9lcywgc2xldyBPcmZpZGl1cywgdGhlIGNvbW1hbmRlciBvZiB0aGUgbGVnaW9uLCBhbmQgc2VpemVkIG1hbnkgb2YgdGhlaXIgc3RhbmRhcmRzLiBBZ2FpbnN0IE90aG8ncyBnbGFkaWF0b3JzLCB0b28sIHdobyB3ZXJlIHN1cHBvc2VkIHRvIGhhdmUgZXhwZXJpZW5jZSBhbmQgY291cmFnZSBpbiBjbG9zZSBmaWdodGluZywgQWxmZW51cyBWYXJ1cyBsZWQgdXAgdGhlIHRyb29wcyBjYWxsZWQgQmF0YXZpYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYXJlIHRoZSBiZXN0IGNhdmFscnkgb2YgdGhlIEdlcm1hbnMsIGFuZCBjb21lIGZyb20gYW4gaXNsYW5kIG1hZGUgYnkgdGhlIFJoaW5lLiBBIGZldyBvZiB0aGUgZ2xhZGlhdG9ycyB3aXRoc3Rvb2QgdGhlc2UsIGJ1dCBtb3N0IG9mIHRoZW0gZmxlZCB0b3dhcmRzIHRoZSByaXZlciwgd2hlcmUgdGhleSBlbmNvdW50ZXJlZCBjb2hvcnRzIG9mIHRoZSBlbmVteSBpbiBiYXR0bGUgYXJyYXksIGFuZCBpbiBkZWZlbmRpbmcgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZXNlLCB3ZXJlIGN1dCBvZmYgdG8gYSBtYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcHJhZXRvcmlhbiBzb2xkaWVycyBmb3VnaHQgbW9yZSBzaGFtZWZ1bGx5IHRoYW4gYW55IG90aGVycy4gVGhleSBkaWQgbm90IGV2ZW4gd2FpdCBmb3IgdGhlaXIgb3Bwb25lbnRzIHRvIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMsIGJ1dCBmbGVkIHRocm91Z2ggdGhlIHJhbmtzIG9mIHRoZWlyIHN0aWxsIHVudmFucXVpc2hlZCBjb21yYWRlcywgZmlsbGluZyB0aGVtIHdpdGggZmVhciBhbmQgY29uZnVzaW9uLiBOb3R3aXRoc3RhbmRpbmcgYWxsIHRoaXMsIG1hbnkgb2YgT3RobydzIG1lbiBjb25xdWVyZWQgdGhvc2Ugd2hvIG9wcG9zZWQgdGhlbSwgZm9yY2VkIHRoZWlyIHdheSB0aHJvdWdoIHRoZSB2aWN0b3Jpb3VzIGVuZW15LCBhbmQgcmVnYWluZWQgdGhlaXIgY2FtcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciB0aGVpciBnZW5lcmFscywgbmVpdGhlciBQcm9jdWx1cyBub3IgUGF1bGludXMgdmVudHVyZWQgdG8gZW50ZXIgdGhlIGNhbXAgd2l0aCB0aGVtLCBidXQgdHVybmVkIGFzaWRlIHRocm91Z2ggZmVhciBvZiB0aGUgc29sZGllcnMsIHdobyB3ZXJlIGFscmVhZHkgbGF5aW5nIHRoZSBibGFtZSBmb3IgdGhlaXIgZGVmZWF0IHVwb24gdGhlaXIgY29tbWFuZGVycy4gQnV0IEFubml1cyBHYWxsdXMgcmVjZWl2ZWQgaW50byB0aGUgdG93biB0aGUgc29sZGllcnMgd2hvIGdhdGhlcmVkIHRoZXJlIG91dCBvZiB0aGUgYmF0dGxlLCBhbmQgdHJpZWQgdG8gZW5jb3VyYWdlIHRoZW0uIFRoZSBiYXR0bGUgaGFkIGJlZW4gbmVhcmx5IGVxdWFsLCBoZSBzYWlkLCBhbmQgaW4gbWFueSBwYXJ0cyBvZiBpdCB0aGV5IGhhZCBvdmVyY29tZSB0aGVpciBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgQ2Vsc3VzLCBtb3Jlb3ZlciwgYXNzZW1ibGVkIHRoZSBvZmZpY2VycyBhbmQgdXJnZWQgdGhlbSB0byBjb25zdWx0IHRoZSBwdWJsaWMgZ29vZC4gSW4gdmlldyBvZiBzbyBncmVhdCBhIGNhbGFtaXR5LCBoZSBzYWlkLCBhbmQgdGhlIHNsYXVnaHRlciBvZiBzbyBtYW55IGNpdGl6ZW5zLCBub3QgZXZlbiBPdGhvIGhpbXNlbGYsIGlmIGhlIHdlcmUgYSBnb29kIG1hbiwgd291bGQgd2lzaCB0byBtYWtlIGZ1cnRoZXIgdHJpYWwgb2YgaGlzIGZvcnR1bmUsIHNpbmNlIGV2ZW4gQ2F0byBhbmQgU2NpcGlvLCBieSByZWZ1c2luZyB0byB5aWVsZCB0byBhIHZpY3RvcmlvdXMgQ2Flc2FyIGFmdGVyIFBoYXJzYWx1cywgaGFkIGluY3VycmVkIHRoZSBjaGFyZ2Ugb2YgbmVlZGxlc3NseSBzcXVhbmRlcmluZyB0aGUgbGl2ZXMgb2YgbWFueSBicmF2ZSBtZW4gaW4gQWZyaWNhLCBhbHRob3VnaCB0aGVpciBzdHJ1Z2dsZSB3YXMgaW4gYmVoYWxmIG9mIFJvbWFuIGZyZWVkb20uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBnZW5lcmFsIGFsbCBtZW4gYWxpa2UgYXJlIHN1YmplY3QgdG8gdGhlIGRlY3JlZXMgb2YgZm9ydHVuZSwgYnV0IG9mIG9uZSB0aGluZyBzaGUgY2Fubm90IHJvYiBhIGdvb2QgbWFuLCBhbmQgdGhhdCBpcyB0aGUgcHJpdmlsZWdlLCBpbiBjYXNlIG9mIGFkdmVyc2l0eSwgb2YgdGFraW5nIHJlYXNvbmFibGUgbWVhc3VyZXMgdG8gY29ycmVjdCB0aGUgc2l0dWF0aW9uIHRoYXQgY29uZnJvbnRzIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciB0aGVpciBnZW5lcmFscywgbmVpdGhlciBQcm9jdWx1cyBub3IgUGF1bGludXMgdmVudHVyZWQgdG8gZW50ZXIgdGhlIGNhbXAgd2l0aCB0aGVtLCBidXQgdHVybmVkIGFzaWRlIHRocm91Z2ggZmVhciBvZiB0aGUgc29sZGllcnMsIHdobyB3ZXJlIGFscmVhZHkgbGF5aW5nIHRoZSBibGFtZSBmb3IgdGhlaXIgZGVmZWF0IHVwb24gdGhlaXIgY29tbWFuZGVycy4gQnV0IEFubml1cyBHYWxsdXMgcmVjZWl2ZWQgaW50byB0aGUgdG93biB0aGUgc29sZGllcnMgd2hvIGdhdGhlcmVkIHRoZXJlIG91dCBvZiB0aGUgYmF0dGxlLCBhbmQgdHJpZWQgdG8gZW5jb3VyYWdlIHRoZW0uIFRoZSBiYXR0bGUgaGFkIGJlZW4gbmVhcmx5IGVxdWFsLCBoZSBzYWlkLCBhbmQgaW4gbWFueSBwYXJ0cyBvZiBpdCB0aGV5IGhhZCBvdmVyY29tZSB0aGVpciBlbmVtaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBDZWxzdXMsIG1vcmVvdmVyLCBhc3NlbWJsZWQgdGhlIG9mZmljZXJzIGFuZCB1cmdlZCB0aGVtIHRvIGNvbnN1bHQgdGhlIHB1YmxpYyBnb29kLiBJbiB2aWV3IG9mIHNvIGdyZWF0IGEgY2FsYW1pdHksIGhlIHNhaWQsIGFuZCB0aGUgc2xhdWdodGVyIG9mIHNvIG1hbnkgY2l0aXplbnMsIG5vdCBldmVuIE90aG8gaGltc2VsZiwgaWYgaGUgd2VyZSBhIGdvb2QgbWFuLCB3b3VsZCB3aXNoIHRvIG1ha2UgZnVydGhlciB0cmlhbCBvZiBoaXMgZm9ydHVuZSwgc2luY2UgZXZlbiBDYXRvIGFuZCBTY2lwaW8sIGJ5IHJlZnVzaW5nIHRvIHlpZWxkIHRvIGEgdmljdG9yaW91cyBDYWVzYXIgYWZ0ZXIgUGhhcnNhbHVzLCBoYWQgaW5jdXJyZWQgdGhlIGNoYXJnZSBvZiBuZWVkbGVzc2x5IHNxdWFuZGVyaW5nIHRoZSBsaXZlcyBvZiBtYW55IGJyYXZlIG1lbiBpbiBBZnJpY2EsIGFsdGhvdWdoIHRoZWlyIHN0cnVnZ2xlIHdhcyBpbiBiZWhhbGYgb2YgUm9tYW4gZnJlZWRvbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBnZW5lcmFsIGFsbCBtZW4gYWxpa2UgYXJlIHN1YmplY3QgdG8gdGhlIGRlY3JlZXMgb2YgZm9ydHVuZSwgYnV0IG9mIG9uZSB0aGluZyBzaGUgY2Fubm90IHJvYiBhIGdvb2QgbWFuLCBhbmQgdGhhdCBpcyB0aGUgcHJpdmlsZWdlLCBpbiBjYXNlIG9mIGFkdmVyc2l0eSwgb2YgdGFraW5nIHJlYXNvbmFibGUgbWVhc3VyZXMgdG8gY29ycmVjdCB0aGUgc2l0dWF0aW9uIHRoYXQgY29uZnJvbnRzIGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CeSB0aGlzIHNwZWVjaCBDZWxzdXMgd29uIG92ZXIgdGhlIG9mZmljZXJzLiBBbmQgYWZ0ZXIgdGhleSBoYWQgc291bmRlZCB0aGUgc29sZGllcnMgYW5kIGZvdW5kIHRoZW0gZGVzaXJvdXMgb2YgcGVhY2UsIGFuZCB3aGVuIFRpdGlhbnVzIHVyZ2VkIHRoYXQgYW4gZW1iYXNzeSBiZSBzZW50IGluIHRoZSBpbnRlcmVzdCBvZiBjb25jb3JkLCBDZWxzdXMgYW5kIEdhbGx1cyBkZWNpZGVkIHRvIGdvIGFuZCBjb25mZXIgd2l0aCBDYWVjaW5hIGFuZCBWYWxlbnMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHRoZXkgd2VyZSBvbiB0aGUgd2F5IHRoZXkgd2VyZSBtZXQgYnkgc29tZSBjZW50dXJpb25zIG9mIHRoZSBlbmVteSwgd2hvIHNhaWQgdGhhdCB0aGVpciBhcm15IHdhcyBhbHJlYWR5IGluIG1vdGlvbiBhbmQgd2FzIG9uIGl0cyB3YXkgdG8gQmVkcmlhY3VtLCBhbmQgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgaGFkIGJlZW4gc2VudCBvdXQgYnkgdGhlaXIgZ2VuZXJhbHMgdG8gdHJlYXQgZm9yIGNvbmNvcmQuIEFjY29yZGluZ2x5LCBDZWxzdXMgY29tbWVuZGVkIHRoZW0sIGFuZCBiYWRlIHRoZW0gdHVybiBiYWNrIHdpdGggaGltIGFuZCBnbyB0byBtZWV0IENhZWNpbmEuIEJ1dCB3aGVuIHRoZXkgd2VyZSBuZWFyIHRoZSBhcm15IG9mIENhZWNpbmEsIENlbHN1cyByYW4gcmlzayBvZiBoaXMgbGlmZS4gRm9yIGl0IGNoYW5jZWQgdGhhdCB0aGUgaG9yc2VtZW4gd2hvIGhhZCBmb3JtZXJseSBiZWVuIHdvcnN0ZWQgYnkgaGltIGF0IHRoZSBhbWJ1c2ggd2VyZSByaWRpbmcgb24gaW4gYWR2YW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiB0aGV5IHNhdyBDZWxzdXMgY29taW5nIHVwLCB0aGV5IGZvcnRod2l0aCByYWlzZWQgYSBzaG91dCBhbmQgZGFzaGVkIGFnYWluc3QgaGltLiBCdXQgdGhlIGNlbnR1cmlvbnMgc3Rvb2QgaW4gZnJvbnQgb2YgaGltIGFuZCBrZXB0IHRoZW0gb2ZmOyB0aGUgb3RoZXIgb2ZmaWNlcnMgYWxzbyBzaG91dGVkIHRvIHRoZSBob3JzZW1lbiB0byBzcGFyZSBDZWxzdXMsIGFuZCBDYWVjaW5hLCBoZWFyaW5nIHRoZWlyIGNyaWVzLCByb2RlIHVwIGFuZCBzcGVlZGlseSBicm91Z2h0IGhpcyBob3JzZW1lbiB0byBvcmRlci4gVGhlbiBoZSBncmVldGVkIENlbHN1cyBpbiBhIGZyaWVuZGx5IG1hbm5lciBhbmQgd2VudCBvbiB3aXRoIGhpbSB0byBCZWRyaWFjdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtZWFud2hpbGUgVGl0aWFudXMgaGFkIHJlcGVudGVkIG9mIGhhdmluZyBzZW50IHRoZSBlbWJhc3N5LCBhbmQgYWZ0ZXIgb3JkZXJpbmcgdGhlIG1vcmUgcmVzb2x1dGUgb2YgdGhlIHNvbGRpZXJzIGJhY2sgYWdhaW4gdXBvbiB0aGUgd2FsbHMsIGhlIGV4aG9ydGVkIHRoZSByZXN0IHRvIGdvIHRvIHRoZWlyIHN1cHBvcnQuIEhvd2V2ZXIsIHdoZW4gQ2FlY2luYSByb2RlIHVwIG9uIGhpcyBob3JzZSBhbmQgc3RyZXRjaGVkIG91dCBoaXMgaGFuZCB0byB0aGVtLCBub3QgYSBtYW4gcmVzaXN0ZWQgZnVydGhlciwgYnV0IHNvbWUgZ3JlZXRlZCBoaXMgc29sZGllcnMgZnJvbSB0aGUgd2FsbHMsIHdoaWxlIG90aGVycywgdGhyb3dpbmcgb3BlbiB0aGUgZ2F0ZXMsIHdlbnQgZm9ydGggYW5kIG1pbmdsZWQgd2l0aCB0aGUgYWR2YW5jaW5nIHRyb29wcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBubyBob3N0aWxpdGllcywgb24gdGhlIHBhcnQgb2YgT3RobydzIG1lbiwgYnV0IG9ubHkgZnJpZW5kbHkgc2FsdXRhdGlvbnMgYW5kIGdyZWV0aW5ncywgYW5kIGFsbCB0b29rIG9hdGggdG8gc3VwcG9ydCBWaXRlbGxpdXMgYW5kIHdlbnQgb3ZlciB0byBoaXMgc2lkZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyB0aGV5IHdlcmUgb24gdGhlIHdheSB0aGV5IHdlcmUgbWV0IGJ5IHNvbWUgY2VudHVyaW9ucyBvZiB0aGUgZW5lbXksIHdobyBzYWlkIHRoYXQgdGhlaXIgYXJteSB3YXMgYWxyZWFkeSBpbiBtb3Rpb24gYW5kIHdhcyBvbiBpdHMgd2F5IHRvIEJlZHJpYWN1bSwgYW5kIHRoYXQgdGhleSB0aGVtc2VsdmVzIGhhZCBiZWVuIHNlbnQgb3V0IGJ5IHRoZWlyIGdlbmVyYWxzIHRvIHRyZWF0IGZvciBjb25jb3JkLiBBY2NvcmRpbmdseSwgQ2Vsc3VzIGNvbW1lbmRlZCB0aGVtLCBhbmQgYmFkZSB0aGVtIHR1cm4gYmFjayB3aXRoIGhpbSBhbmQgZ28gdG8gbWVldCBDYWVjaW5hLiBCdXQgd2hlbiB0aGV5IHdlcmUgbmVhciB0aGUgYXJteSBvZiBDYWVjaW5hLCBDZWxzdXMgcmFuIHJpc2sgb2YgaGlzIGxpZmUuIEZvciBpdCBjaGFuY2VkIHRoYXQgdGhlIGhvcnNlbWVuIHdobyBoYWQgZm9ybWVybHkgYmVlbiB3b3JzdGVkIGJ5IGhpbSBhdCB0aGUgYW1idXNoIHdlcmUgcmlkaW5nIG9uIGluIGFkdmFuY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gdGhleSBzYXcgQ2Vsc3VzIGNvbWluZyB1cCwgdGhleSBmb3J0aHdpdGggcmFpc2VkIGEgc2hvdXQgYW5kIGRhc2hlZCBhZ2FpbnN0IGhpbS4gQnV0IHRoZSBjZW50dXJpb25zIHN0b29kIGluIGZyb250IG9mIGhpbSBhbmQga2VwdCB0aGVtIG9mZjsgdGhlIG90aGVyIG9mZmljZXJzIGFsc28gc2hvdXRlZCB0byB0aGUgaG9yc2VtZW4gdG8gc3BhcmUgQ2Vsc3VzLCBhbmQgQ2FlY2luYSwgaGVhcmluZyB0aGVpciBjcmllcywgcm9kZSB1cCBhbmQgc3BlZWRpbHkgYnJvdWdodCBoaXMgaG9yc2VtZW4gdG8gb3JkZXIuIFRoZW4gaGUgZ3JlZXRlZCBDZWxzdXMgaW4gYSBmcmllbmRseSBtYW5uZXIgYW5kIHdlbnQgb24gd2l0aCBoaW0gdG8gQmVkcmlhY3VtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtZWFud2hpbGUgVGl0aWFudXMgaGFkIHJlcGVudGVkIG9mIGhhdmluZyBzZW50IHRoZSBlbWJhc3N5LCBhbmQgYWZ0ZXIgb3JkZXJpbmcgdGhlIG1vcmUgcmVzb2x1dGUgb2YgdGhlIHNvbGRpZXJzIGJhY2sgYWdhaW4gdXBvbiB0aGUgd2FsbHMsIGhlIGV4aG9ydGVkIHRoZSByZXN0IHRvIGdvIHRvIHRoZWlyIHN1cHBvcnQuIEhvd2V2ZXIsIHdoZW4gQ2FlY2luYSByb2RlIHVwIG9uIGhpcyBob3JzZSBhbmQgc3RyZXRjaGVkIG91dCBoaXMgaGFuZCB0byB0aGVtLCBub3QgYSBtYW4gcmVzaXN0ZWQgZnVydGhlciwgYnV0IHNvbWUgZ3JlZXRlZCBoaXMgc29sZGllcnMgZnJvbSB0aGUgd2FsbHMsIHdoaWxlIG90aGVycywgdGhyb3dpbmcgb3BlbiB0aGUgZ2F0ZXMsIHdlbnQgZm9ydGggYW5kIG1pbmdsZWQgd2l0aCB0aGUgYWR2YW5jaW5nIHRyb29wcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgbm8gaG9zdGlsaXRpZXMsIG9uIHRoZSBwYXJ0IG9mIE90aG8ncyBtZW4sIGJ1dCBvbmx5IGZyaWVuZGx5IHNhbHV0YXRpb25zIGFuZCBncmVldGluZ3MsIGFuZCBhbGwgdG9vayBvYXRoIHRvIHN1cHBvcnQgVml0ZWxsaXVzIGFuZCB3ZW50IG92ZXIgdG8gaGlzIHNpZGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGFjY291bnQgd2hpY2ggbW9zdCBvZiB0aGUgcGFydGljaXBhbnRzIGdpdmUgb2YgdGhlIGJhdHRsZSwgYWx0aG91Z2ggdGhleSB0aGVtc2VsdmVzIGNvbmZlc3MgdGhhdCB0aGV5IHdlcmUgaWdub3JhbnQgb2YgaXRzIGRldGFpbHMsIG93aW5nIHRvIHRoZSBkaXNvcmRlciBhbmQgdGhlIHVuZXF1YWwgZm9ydHVuZXMgb2YgdGhlIHNldmVyYWwgZ3JvdXBzLiBBdCBhIGxhdGVyIHRpbWUsIHdoZW4gSSB3YXMgdHJhdmVsbGluZyB0aHJvdWdoIHRoZSBwbGFpbiwgTWVzdHJpdXMgRmxvcnVzLCBvbmUgb2YgdGhlIG1lbiBvZiBjb25zdWxhciByYW5rIHdobyB3ZXJlIGF0IHRoYXQgdGltZSB3aXRoIE90aG8gKGJ5IGNvbnN0cmFpbnQsIGFuZCBub3Qgb2YgdGhlaXIgb3duIHdpbGwpLCBwb2ludGVkIG91dCB0byBtZSBhbiBhbmNpZW50IHRlbXBsZSwgYW5kIHRvbGQgbWUgaG93LCBhcyBoZSBjYW1lIHVwIHRvIGl0IGFmdGVyIHRoZSBiYXR0bGUsIGhlIHNhdyBhIGhlYXAgb2YgZGVhZCBib2RpZXMgc28gaGlnaCB0aGF0IHRob3NlIG9uIHRvcCBvZiBpdCB0b3VjaGVkIHRoZSBnYWJsZSBvZiB0aGUgdGVtcGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVhc29uIGZvciB0aGlzIGhlIHNhaWQgaGUgY291bGQgbmVpdGhlciBkaXNjb3ZlciBoaW1zZWxmIG5vciBsZWFybiBmcm9tIGFueW9uZSBlbHNlLiBJdCBpcyBuYXR1cmFsLCBpbmRlZWQsIHRoYXQgaW4gY2l2aWwgd2Fycywgd2hlbiBhIHJvdXQgdGFrZXMgcGxhY2UsIG1vcmUgbWVuIHNob3VsZCBiZSBraWxsZWQsIGJlY2F1c2Ugbm8gcXVhcnRlciBpcyBnaXZlbiAodGhlcmUgYmVpbmcgbm8gdXNlIGZvciBwcmlzb25lcnMpOyBidXQgd2h5IHRoZSBkZWFkIGJvZGllcyBzaG91bGQgYmUgY29sbGVjdGVkIGFuZCBoZWFwZWQgdXAgaW4gc3VjaCBhIG1hbm5lciBpcyBub3QgZWFzeSB0byBkZXRlcm1pbmUuCgkJCQk8bWlsZXN0b25lIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUbyBPdGhvIHRoZXJlIGNhbWUgYXQgZmlyc3QsIGFzIGlzIHVzdWFsIGluIHN1Y2ggY2F0YXN0cm9waGVzLCBhbiBpbmRpc3RpbmN0IHJ1bW91ciBvZiB0aGUgcmVzdWx0OyBidXQgcHJlc2VudGx5IHNvbWUgb2YgaGlzIHNvbGRpZXJzIHdobyBoYWQgYmVlbiB3b3VuZGVkIGNhbWUgd2l0aCBkaXJlY3QgdGlkaW5ncyBvZiB0aGUgYmF0dGxlLiBIZXJlIG9uZSBjYW5ub3Qgc28gbXVjaCB3b25kZXIgdGhhdCBoaXMgZnJpZW5kcyB3b3VsZCBub3QgbGV0IGhpbSBnaXZlIHVwIGFsbCBmb3IgbG9zdCwgYW5kIGV4aG9ydGVkIGhpbSB0byBiZSBvZiBnb29kIGNoZWVyOyBidXQgdGhlIGZlZWxpbmdzIG9mIGhpcyBzb2xkaWVycyB0b3dhcmRzIGhpbSBwYXNzZWQgYWxsIGJlbGllZi4gTm90IGEgbWFuIG9mIHRoZW0gbGVmdCBoaW0sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm9yIHdlbnQgb3ZlciB0byB0aGUgdmljdG9yaW91cyBzaWRlLCBvciB3YXMgc2VlbiB0byBkZXNwYWlyIG9mIHRoZSBlbXBlcm9yJ3MgY2F1c2UgYW5kIHNlZWsgaGlzIG93biBzYWZldHksIGJ1dCBhbGwgYWxpa2UgY2FtZSB0byBoaXMgZG9vciwgY2FsbGVkIHVwb24gaGltIGFzIGVtcGVyb3IsIGJlY2FtZSBoaXMgaHVtYmxlIHN1cHBsaWFudHMgd2hlbiBoZSBhcHBlYXJlZCBiZWZvcmUgdGhlbSwgc2VpemVkIGhpcyBoYW5kcyB3aXRoIGNyaWVzIGFuZCBwcmF5ZXJzLCBmZWxsIGRvd24gYmVmb3JlIGhpbSwgd2VwdCwgYmVnZ2VkIGhpbSBub3QgdG8gYWJhbmRvbiB0aGVtLCBhbmQgbm90IHRvIGJldHJheSB0aGVtIHRvIHRoZWlyIGVuZW1pZXMsIGJ1dCB0byB1c2UgdGhlaXIgbGl2ZXMgYW5kIHBlcnNvbnMgaW4gaGlzIHNlcnZpY2UgYXMgbG9uZyBhcyB0aGV5IGhhZCBicmVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2VyZSB0aGVpciB1bml0ZWQgc3VwcGxpY2F0aW9ucy4gQW5kIG9uZSBvYnNjdXJlIHNvbGRpZXIgaGVsZCB1cCBoaXMgc3dvcmQsIGFuZCB3aXRoIHRoZSB3b3JkcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPktub3csIE8gQ2Flc2FyLCB0aGF0IGFsbCBvZiB1cyBzdGFuZCBpbiB0aGlzIGZhc2hpb24gYXQgdGh5IHNpZGUsPC9xPiBzbGV3IGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgYWNjb3VudCB3aGljaCBtb3N0IG9mIHRoZSBwYXJ0aWNpcGFudHMgZ2l2ZSBvZiB0aGUgYmF0dGxlLCBhbHRob3VnaCB0aGV5IHRoZW1zZWx2ZXMgY29uZmVzcyB0aGF0IHRoZXkgd2VyZSBpZ25vcmFudCBvZiBpdHMgZGV0YWlscywgb3dpbmcgdG8gdGhlIGRpc29yZGVyIGFuZCB0aGUgdW5lcXVhbCBmb3J0dW5lcyBvZiB0aGUgc2V2ZXJhbCBncm91cHMuIEF0IGEgbGF0ZXIgdGltZSwgd2hlbiBJIHdhcyB0cmF2ZWxsaW5nIHRocm91Z2ggdGhlIHBsYWluLCBNZXN0cml1cyBGbG9ydXMsIG9uZSBvZiB0aGUgbWVuIG9mIGNvbnN1bGFyIHJhbmsgd2hvIHdlcmUgYXQgdGhhdCB0aW1lIHdpdGggT3RobyAoYnkgY29uc3RyYWludCwgYW5kIG5vdCBvZiB0aGVpciBvd24gd2lsbCksIHBvaW50ZWQgb3V0IHRvIG1lIGFuIGFuY2llbnQgdGVtcGxlLCBhbmQgdG9sZCBtZSBob3csIGFzIGhlIGNhbWUgdXAgdG8gaXQgYWZ0ZXIgdGhlIGJhdHRsZSwgaGUgc2F3IGEgaGVhcCBvZiBkZWFkIGJvZGllcyBzbyBoaWdoIHRoYXQgdGhvc2Ugb24gdG9wIG9mIGl0IHRvdWNoZWQgdGhlIGdhYmxlIG9mIHRoZSB0ZW1wbGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWFzb24gZm9yIHRoaXMgaGUgc2FpZCBoZSBjb3VsZCBuZWl0aGVyIGRpc2NvdmVyIGhpbXNlbGYgbm9yIGxlYXJuIGZyb20gYW55b25lIGVsc2UuIEl0IGlzIG5hdHVyYWwsIGluZGVlZCwgdGhhdCBpbiBjaXZpbCB3YXJzLCB3aGVuIGEgcm91dCB0YWtlcyBwbGFjZSwgbW9yZSBtZW4gc2hvdWxkIGJlIGtpbGxlZCwgYmVjYXVzZSBubyBxdWFydGVyIGlzIGdpdmVuICh0aGVyZSBiZWluZyBubyB1c2UgZm9yIHByaXNvbmVycyk7IGJ1dCB3aHkgdGhlIGRlYWQgYm9kaWVzIHNob3VsZCBiZSBjb2xsZWN0ZWQgYW5kIGhlYXBlZCB1cCBpbiBzdWNoIGEgbWFubmVyIGlzIG5vdCBlYXN5IHRvIGRldGVybWluZS4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUbyBPdGhvIHRoZXJlIGNhbWUgYXQgZmlyc3QsIGFzIGlzIHVzdWFsIGluIHN1Y2ggY2F0YXN0cm9waGVzLCBhbiBpbmRpc3RpbmN0IHJ1bW91ciBvZiB0aGUgcmVzdWx0OyBidXQgcHJlc2VudGx5IHNvbWUgb2YgaGlzIHNvbGRpZXJzIHdobyBoYWQgYmVlbiB3b3VuZGVkIGNhbWUgd2l0aCBkaXJlY3QgdGlkaW5ncyBvZiB0aGUgYmF0dGxlLiBIZXJlIG9uZSBjYW5ub3Qgc28gbXVjaCB3b25kZXIgdGhhdCBoaXMgZnJpZW5kcyB3b3VsZCBub3QgbGV0IGhpbSBnaXZlIHVwIGFsbCBmb3IgbG9zdCwgYW5kIGV4aG9ydGVkIGhpbSB0byBiZSBvZiBnb29kIGNoZWVyOyBidXQgdGhlIGZlZWxpbmdzIG9mIGhpcyBzb2xkaWVycyB0b3dhcmRzIGhpbSBwYXNzZWQgYWxsIGJlbGllZi4gTm90IGEgbWFuIG9mIHRoZW0gbGVmdCBoaW0sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm9yIHdlbnQgb3ZlciB0byB0aGUgdmljdG9yaW91cyBzaWRlLCBvciB3YXMgc2VlbiB0byBkZXNwYWlyIG9mIHRoZSBlbXBlcm9yJ3MgY2F1c2UgYW5kIHNlZWsgaGlzIG93biBzYWZldHksIGJ1dCBhbGwgYWxpa2UgY2FtZSB0byBoaXMgZG9vciwgY2FsbGVkIHVwb24gaGltIGFzIGVtcGVyb3IsIGJlY2FtZSBoaXMgaHVtYmxlIHN1cHBsaWFudHMgd2hlbiBoZSBhcHBlYXJlZCBiZWZvcmUgdGhlbSwgc2VpemVkIGhpcyBoYW5kcyB3aXRoIGNyaWVzIGFuZCBwcmF5ZXJzLCBmZWxsIGRvd24gYmVmb3JlIGhpbSwgd2VwdCwgYmVnZ2VkIGhpbSBub3QgdG8gYWJhbmRvbiB0aGVtLCBhbmQgbm90IHRvIGJldHJheSB0aGVtIHRvIHRoZWlyIGVuZW1pZXMsIGJ1dCB0byB1c2UgdGhlaXIgbGl2ZXMgYW5kIHBlcnNvbnMgaW4gaGlzIHNlcnZpY2UgYXMgbG9uZyBhcyB0aGV5IGhhZCBicmVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2VyZSB0aGVpciB1bml0ZWQgc3VwcGxpY2F0aW9ucy4gQW5kIG9uZSBvYnNjdXJlIHNvbGRpZXIgaGVsZCB1cCBoaXMgc3dvcmQsIGFuZCB3aXRoIHRoZSB3b3JkcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S25vdywgTyBDYWVzYXIsIHRoYXQgYWxsIG9mIHVzIHN0YW5kIGluIHRoaXMgZmFzaGlvbiBhdCB0aHkgc2lkZSw8L3E+IHNsZXcgaGltc2VsZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob25lIG9mIHRoZXNlIHRoaW5ncywgaG93ZXZlciwgYnJva2UgT3RobyBkb3duLCBidXQgbG9va2luZyBhbGwgYXJvdW5kIHdpdGggYSBjb3VudGVuYW5jZSBjb21wb3NlZCBhbmQgY2hlZXJmdWwsIGhlIHNhaWQ6ICIKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBkYXksIG15IGZlbGxvdy1zb2xkaWVycywgSSBkZWVtIG1vcmUgYmxlc3NlZCB0aGFuIHRoYXQgb24gd2hpY2ggeWUgZmlyc3QgbWFkZSBtZSBlbXBlcm9yLCBzaW5jZSBJIHNlZSB5b3Ugc28gZGV2b3RlZCB0byBtZSBhbmQgYW0ganVkZ2VkIHdvcnRoeSBvZiBzbyBoaWdoIGhvbm91ciBhdCB5b3VyIGhhbmRzLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZG8gbm90IHJvYiBtZSBvZiBhIGdyZWF0ZXIgYmxlc3NlZG5lc3MtdGhhdCBvZiBkeWluZyBub2JseSBpbiBiZWhhbGYgb2YgZmVsbG93LWNpdGl6ZW5zIHNvIG1hbnkgYW5kIHNvIGdvb2QuIElmIEkgd2FzIHdvcnRoeSB0byBiZSBSb21hbiBlbXBlcm9yLCBJIG91Z2h0IHRvIGdpdmUgbXkgbGlmZSBmcmVlbHkgZm9yIG15IGNvdW50cnkuIEkga25vdyB0aGF0IHRoZSB2aWN0b3J5IG9mIG91ciBhZHZlcnNhcmllcyBpcyBuZWl0aGVyIGRlY2lzaXZlIG5vciBhc3N1cmVkLiBJIGhhdmUgd29yZCB0aGF0IG91ciBmb3JjZXMgZnJvbSBNeXNpYSBhcmUgYWxyZWFkeSBhcHByb2FjaGluZyB0aGUgQWRyaWF0aWMsIGFuZCBhcmUgb25seSBhIGZldyBkYXlzIGRpc3RhbnQgZnJvbSB1cy4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzaWEsIFN5cmlhLCBFZ3lwdCwgYW5kIHRoZSBhcm1pZXMgZmlnaHRpbmcgYWdhaW5zdCB0aGUgSmV3cywgYXJlIG9uIG91ciBzaWRlOyB0aGUgc2VuYXRlLCB0b28sIGlzIHdpdGggdXMsIGFzIHdlbGwgYXMgdGhlIHdpdmVzIGFuZCBjaGlsZHJlbiBvZiBvdXIgYWR2ZXJzYXJpZXMuIFN0aWxsLCBpdCBpcyBub3QgdG8gZGVmZW5kIEl0YWx5IGFnYWluc3QgSGFubmliYWwsIG9yIFB5cnJodXMsIG9yIHRoZSBDaW1icmksIHRoYXQgb3VyIHdhciBpcyB3YWdlZCwgYnV0IGJvdGggcGFydGllcyBhcmUgd2FnaW5nIHdhciBhZ2FpbnN0IFJvbWFucywgYW5kIHdlIHNpbiBhZ2FpbnN0IG91ciBjb3VudHJ5IHdoZXRoZXIgd2UgY29ucXVlciBvciBhcmUgY29ucXVlcmVkLiBGb3IgdGhlIHZpY3RvcidzIGdhaW4gaXMgb3VyIGNvdW50cnkncyBsb3NzLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QmVsaWV2ZSBtZSB3aGVuIEkgaW5zaXN0IHRoYXQgSSBjYW4gZGllIG1vcmUgaG9ub3VyYWJseSB0aGFuIEkgY2FuIHJlaWduLiBGb3IgSSBkbyBub3Qgc2VlIGhvdyBteSB2aWN0b3J5IGNhbiBiZSBvZiBzbyBncmVhdCBhZHZhbnRhZ2UgdG8gdGhlIFJvbWFucyBhcyBteSBvZmZlcmluZyB1cCBteSBsaWZlIHRvIHNlY3VyZSBwZWFjZSBhbmQgY29uY29yZCwgYW5kIHRvIHByZXZlbnQgSXRhbHkgZnJvbSBiZWhvbGRpbmcgc3VjaCBhIGRheSBhZ2Fpbi48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGRheSwgbXkgZmVsbG93LXNvbGRpZXJzLCBJIGRlZW0gbW9yZSBibGVzc2VkIHRoYW4gdGhhdCBvbiB3aGljaCB5ZSBmaXJzdCBtYWRlIG1lIGVtcGVyb3IsIHNpbmNlIEkgc2VlIHlvdSBzbyBkZXZvdGVkIHRvIG1lIGFuZCBhbSBqdWRnZWQgd29ydGh5IG9mIHNvIGhpZ2ggaG9ub3VyIGF0IHlvdXIgaGFuZHMuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBkbyBub3Qgcm9iIG1lIG9mIGEgZ3JlYXRlciBibGVzc2VkbmVzcy10aGF0IG9mIGR5aW5nIG5vYmx5IGluIGJlaGFsZiBvZiBmZWxsb3ctY2l0aXplbnMgc28gbWFueSBhbmQgc28gZ29vZC4gSWYgSSB3YXMgd29ydGh5IHRvIGJlIFJvbWFuIGVtcGVyb3IsIEkgb3VnaHQgdG8gZ2l2ZSBteSBsaWZlIGZyZWVseSBmb3IgbXkgY291bnRyeS4gSSBrbm93IHRoYXQgdGhlIHZpY3Rvcnkgb2Ygb3VyIGFkdmVyc2FyaWVzIGlzIG5laXRoZXIgZGVjaXNpdmUgbm9yIGFzc3VyZWQuIEkgaGF2ZSB3b3JkIHRoYXQgb3VyIGZvcmNlcyBmcm9tIE15c2lhIGFyZSBhbHJlYWR5IGFwcHJvYWNoaW5nIHRoZSBBZHJpYXRpYywgYW5kIGFyZSBvbmx5IGEgZmV3IGRheXMgZGlzdGFudCBmcm9tIHVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QXNpYSwgU3lyaWEsIEVneXB0LCBhbmQgdGhlIGFybWllcyBmaWdodGluZyBhZ2FpbnN0IHRoZSBKZXdzLCBhcmUgb24gb3VyIHNpZGU7IHRoZSBzZW5hdGUsIHRvbywgaXMgd2l0aCB1cywgYXMgd2VsbCBhcyB0aGUgd2l2ZXMgYW5kIGNoaWxkcmVuIG9mIG91ciBhZHZlcnNhcmllcy4gU3RpbGwsIGl0IGlzIG5vdCB0byBkZWZlbmQgSXRhbHkgYWdhaW5zdCBIYW5uaWJhbCwgb3IgUHlycmh1cywgb3IgdGhlIENpbWJyaSwgdGhhdCBvdXIgd2FyIGlzIHdhZ2VkLCBidXQgYm90aCBwYXJ0aWVzIGFyZSB3YWdpbmcgd2FyIGFnYWluc3QgUm9tYW5zLCBhbmQgd2Ugc2luIGFnYWluc3Qgb3VyIGNvdW50cnkgd2hldGhlciB3ZSBjb25xdWVyIG9yIGFyZSBjb25xdWVyZWQuIEZvciB0aGUgdmljdG9yJ3MgZ2FpbiBpcyBvdXIgY291bnRyeSdzIGxvc3MuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CZWxpZXZlIG1lIHdoZW4gSSBpbnNpc3QgdGhhdCBJIGNhbiBkaWUgbW9yZSBob25vdXJhYmx5IHRoYW4gSSBjYW4gcmVpZ24uIEZvciBJIGRvIG5vdCBzZWUgaG93IG15IHZpY3RvcnkgY2FuIGJlIG9mIHNvIGdyZWF0IGFkdmFudGFnZSB0byB0aGUgUm9tYW5zIGFzIG15IG9mZmVyaW5nIHVwIG15IGxpZmUgdG8gc2VjdXJlIHBlYWNlIGFuZCBjb25jb3JkLCBhbmQgdG8gcHJldmVudCBJdGFseSBmcm9tIGJlaG9sZGluZyBzdWNoIGEgZGF5IGFnYWluLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBkbyBub3Qgcm9iIG1lIG9mIGEgZ3JlYXRlciBibGVzc2VkbmVzcy10aGF0IG9mIGR5aW5nIG5vYmx5IGluIGJlaGFsZiBvZiBmZWxsb3ctY2l0aXplbnMgc28gbWFueSBhbmQgc28gZ29vZC4gSWYgSSB3YXMgd29ydGh5IHRvIGJlIFJvbWFuIGVtcGVyb3IsIEkgb3VnaHQgdG8gZ2l2ZSBteSBsaWZlIGZyZWVseSBmb3IgbXkgY291bnRyeS4gSSBrbm93IHRoYXQgdGhlIHZpY3Rvcnkgb2Ygb3VyIGFkdmVyc2FyaWVzIGlzIG5laXRoZXIgZGVjaXNpdmUgbm9yIGFzc3VyZWQuIEkgaGF2ZSB3b3JkIHRoYXQgb3VyIGZvcmNlcyBmcm9tIE15c2lhIGFyZSBhbHJlYWR5IGFwcHJvYWNoaW5nIHRoZSBBZHJpYXRpYywgYW5kIGFyZSBvbmx5IGEgZmV3IGRheXMgZGlzdGFudCBmcm9tIHVzLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzaWEsIFN5cmlhLCBFZ3lwdCwgYW5kIHRoZSBhcm1pZXMgZmlnaHRpbmcgYWdhaW5zdCB0aGUgSmV3cywgYXJlIG9uIG91ciBzaWRlOyB0aGUgc2VuYXRlLCB0b28sIGlzIHdpdGggdXMsIGFzIHdlbGwgYXMgdGhlIHdpdmVzIGFuZCBjaGlsZHJlbiBvZiBvdXIgYWR2ZXJzYXJpZXMuIFN0aWxsLCBpdCBpcyBub3QgdG8gZGVmZW5kIEl0YWx5IGFnYWluc3QgSGFubmliYWwsIG9yIFB5cnJodXMsIG9yIHRoZSBDaW1icmksIHRoYXQgb3VyIHdhciBpcyB3YWdlZCwgYnV0IGJvdGggcGFydGllcyBhcmUgd2FnaW5nIHdhciBhZ2FpbnN0IFJvbWFucywgYW5kIHdlIHNpbiBhZ2FpbnN0IG91ciBjb3VudHJ5IHdoZXRoZXIgd2UgY29ucXVlciBvciBhcmUgY29ucXVlcmVkLiBGb3IgdGhlIHZpY3RvcidzIGdhaW4gaXMgb3VyIGNvdW50cnkncyBsb3NzLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJlbGlldmUgbWUgd2hlbiBJIGluc2lzdCB0aGF0IEkgY2FuIGRpZSBtb3JlIGhvbm91cmFibHkgdGhhbiBJIGNhbiByZWlnbi4gRm9yIEkgZG8gbm90IHNlZSBob3cgbXkgdmljdG9yeSBjYW4gYmUgb2Ygc28gZ3JlYXQgYWR2YW50YWdlIHRvIHRoZSBSb21hbnMgYXMgbXkgb2ZmZXJpbmcgdXAgbXkgbGlmZSB0byBzZWN1cmUgcGVhY2UgYW5kIGNvbmNvcmQsIGFuZCB0byBwcmV2ZW50IEl0YWx5IGZyb20gYmVob2xkaW5nIHN1Y2ggYSBkYXkgYWdhaW4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgc3Bha2UsIGFuZCBhZnRlciByZXNpc3RpbmcgZmlybWx5IHRob3NlIHdobyB0cmllZCB0byBvcHBvc2UgYW5kIGRpc3N1YWRlIGhpbSwgaGUgb3JkZXJlZCBoaXMgZnJpZW5kcyB0byBkZXBhcnQsIGFzIHdlbGwgYXMgdGhlIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmsgd2hvIHdlcmUgcHJlc2VudDsgdG8gdGhvc2Ugd2hvIHdlcmUgYWJzZW50IGhlIHNlbnQgdGhlIHNhbWUgY29tbWFuZCwgYW5kIHdyb3RlIHRvIHRoZSBjaXRpZXMgdXJnaW5nIHRoZW0gdG8gZXNjb3J0IHRoZSB0cmF2ZWxsZXJzIG9uIHRoZWlyIHdheSB3aXRoIGhvbm91ciBhbmQgaW4gc2FmZXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIHNlbnQgZm9yIGhpcyBuZXBoZXcgQ29jY2VpdXMsIHdobyB3YXMgc3RpbGwgYSB5b3V0aCwgYW5kIGJhZGUgaGltIGJlIG9mIGdvb2QgY2hlZXIgYW5kIG5vdCBmZWFyIFZpdGVsbGl1cywgd2hvc2UgbW90aGVyIGFuZCB3aWZlIGFuZCBjaGlsZHJlbiBoZSBoYWQga2VwdCBzYWZlIGFuZCBjYXJlZCBmb3IgYXMgdGhvdWdoIHRoZXkgd2VyZSBoaXMgb3duLiBIZSBoYWQgZGVzaXJlZCwgaGUgc2FpZCwgdG8gbWFrZSBoaW0gaGlzIHNvbiwgYnV0IGhhZCBwdXQgb2ZmIHRoZSBhZG9wdGlvbiwgaW4gb3JkZXIgdGhhdCB0aGUgeW91dGggbWlnaHQgc2hhcmUgaGlzIHBvd2VyIGFmdGVyIGhlIGhhZCBwcmV2YWlsZWQsIGFuZCBub3QgcGVyaXNoIHdpdGggaGltIGFmdGVyIGhlIGhhZCBmYWlsZWQuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIG5vdywgbXkgYm95LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGlzIGlzIG15IGxhc3QgY2hhcmdlIHRvIHRoZWU7IGRvIG5vdCBhbHRvZ2V0aGVyIGZvcmdldCwgYW5kIGRvIG5vdCB0b28gd2VsbCByZW1lbWJlciwgdGhhdCB0aG91IGhhZHN0IGEgQ2Flc2FyIGZvciBhbiB1bmNsZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgc3Bha2UsIGFuZCBhZnRlciByZXNpc3RpbmcgZmlybWx5IHRob3NlIHdobyB0cmllZCB0byBvcHBvc2UgYW5kIGRpc3N1YWRlIGhpbSwgaGUgb3JkZXJlZCBoaXMgZnJpZW5kcyB0byBkZXBhcnQsIGFzIHdlbGwgYXMgdGhlIG1lbiBvZiBzZW5hdG9yaWFsIHJhbmsgd2hvIHdlcmUgcHJlc2VudDsgdG8gdGhvc2Ugd2hvIHdlcmUgYWJzZW50IGhlIHNlbnQgdGhlIHNhbWUgY29tbWFuZCwgYW5kIHdyb3RlIHRvIHRoZSBjaXRpZXMgdXJnaW5nIHRoZW0gdG8gZXNjb3J0IHRoZSB0cmF2ZWxsZXJzIG9uIHRoZWlyIHdheSB3aXRoIGhvbm91ciBhbmQgaW4gc2FmZXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgc2VudCBmb3IgaGlzIG5lcGhldyBDb2NjZWl1cywgd2hvIHdhcyBzdGlsbCBhIHlvdXRoLCBhbmQgYmFkZSBoaW0gYmUgb2YgZ29vZCBjaGVlciBhbmQgbm90IGZlYXIgVml0ZWxsaXVzLCB3aG9zZSBtb3RoZXIgYW5kIHdpZmUgYW5kIGNoaWxkcmVuIGhlIGhhZCBrZXB0IHNhZmUgYW5kIGNhcmVkIGZvciBhcyB0aG91Z2ggdGhleSB3ZXJlIGhpcyBvd24uIEhlIGhhZCBkZXNpcmVkLCBoZSBzYWlkLCB0byBtYWtlIGhpbSBoaXMgc29uLCBidXQgaGFkIHB1dCBvZmYgdGhlIGFkb3B0aW9uLCBpbiBvcmRlciB0aGF0IHRoZSB5b3V0aCBtaWdodCBzaGFyZSBoaXMgcG93ZXIgYWZ0ZXIgaGUgaGFkIHByZXZhaWxlZCwgYW5kIG5vdCBwZXJpc2ggd2l0aCBoaW0gYWZ0ZXIgaGUgaGFkIGZhaWxlZC4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBub3csIG15IGJveSw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGlzIGlzIG15IGxhc3QgY2hhcmdlIHRvIHRoZWU7IGRvIG5vdCBhbHRvZ2V0aGVyIGZvcmdldCwgYW5kIGRvIG5vdCB0b28gd2VsbCByZW1lbWJlciwgdGhhdCB0aG91IGhhZHN0IGEgQ2Flc2FyIGZvciBhbiB1bmNsZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZG9uZSwgYWZ0ZXIgYSBsaXR0bGUgaGUgaGVhcmQgdHVtdWx0IGFuZCBzaG91dGluZyBhdCBoaXMgZG9vci4gRm9yIGFzIHRoZSBtZW4gb2Ygc2VuYXRvcmlhbCByYW5rIHdlcmUgZGVwYXJ0aW5nLCB0aGUgc29sZGllcnMgdGhyZWF0ZW5lZCB0byBraWxsIHRoZW0gaWYgdGhleSBkaWQgbm90IHJlbWFpbiwgaW5zdGVhZCBvZiBmb3JzYWtpbmcgdGhlaXIgZW1wZXJvci4gT25jZSBtb3JlLCB0aGVuLCBoZSB3ZW50IGZvcnRoLCBzaW5jZSBoZSBmZWFyZWQgZm9yIHRoZSBtZW4ncyBzYWZldHkuIEhlIHdhcyBubyBsb25nZXIgZ2VudGxlIGFuZCBzdXBwbGlhbnQsIGhvd2V2ZXIsIGJ1dCBzdGVybiBvZiBjb3VudGVuYW5jZSwgYW5kIGxvb2tpbmcgYW5ncmlseSByb3VuZCB1cG9uIHRoZSBtb3N0IHR1cmJ1bGVudCBvZiB0aGUgc29sZGllcnMsIGhlIG1hZGUgdGhlbSBnbyBhd2F5IHN1Ym1pc3NpdmVseSBhbmQgaW4gZmVhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZG9uZSwgYWZ0ZXIgYSBsaXR0bGUgaGUgaGVhcmQgdHVtdWx0IGFuZCBzaG91dGluZyBhdCBoaXMgZG9vci4gRm9yIGFzIHRoZSBtZW4gb2Ygc2VuYXRvcmlhbCByYW5rIHdlcmUgZGVwYXJ0aW5nLCB0aGUgc29sZGllcnMgdGhyZWF0ZW5lZCB0byBraWxsIHRoZW0gaWYgdGhleSBkaWQgbm90IHJlbWFpbiwgaW5zdGVhZCBvZiBmb3JzYWtpbmcgdGhlaXIgZW1wZXJvci4gT25jZSBtb3JlLCB0aGVuLCBoZSB3ZW50IGZvcnRoLCBzaW5jZSBoZSBmZWFyZWQgZm9yIHRoZSBtZW4ncyBzYWZldHkuIEhlIHdhcyBubyBsb25nZXIgZ2VudGxlIGFuZCBzdXBwbGlhbnQsIGhvd2V2ZXIsIGJ1dCBzdGVybiBvZiBjb3VudGVuYW5jZSwgYW5kIGxvb2tpbmcgYW5ncmlseSByb3VuZCB1cG9uIHRoZSBtb3N0IHR1cmJ1bGVudCBvZiB0aGUgc29sZGllcnMsIGhlIG1hZGUgdGhlbSBnbyBhd2F5IHN1Ym1pc3NpdmVseSBhbmQgaW4gZmVhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIG5vdyBldmVuaW5nLCBhbmQgYmVpbmcgdGhpcnN0eSwgaGUgZHJhbmsgYSBsaXR0bGUgd2F0ZXIuIEhlIGhhZCB0d28gc3dvcmRzLCBhbmQgYWZ0ZXIgZXhhbWluaW5nIHRoZSBibGFkZSBvZiBlYWNoIGZvciBhIGxvbmcgdGltZSwgaGUgbGFpZCBvbmUgb2YgdGhlbSBhc2lkZSwgYnV0IHB1dCB0aGUgb3RoZXIgdW5kZXIgaGlzIGFybSwgYW5kIHRoZW4gY2FsbGVkIGhpcyBzZXJ2YW50cy4gVGhlc2UgaGUgYWRkcmVzc2VkIGtpbmRseSwgYW5kIGRpc3RyaWJ1dGVkIG1vbmV5IHRvIHRoZW0sIG1vcmUgdG8gb25lIGFuZCBsZXNzIHRvIGFub3RoZXIsIG5vdCBhcyB0aG91Z2ggbGF2aXNoIHdpdGggd2hhdCB3YXMgbm8gbG9uZ2VyIHRvIGJlIGhpcywgYnV0IHdpdGggc3RyaWN0IHJlZ2FyZCB0byBtb2RlcmF0aW9uIGFuZCB0aGUgY2xhaW1zIG9mIG1lcml0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBzZW5kaW5nIHRoZSBzZXJ2YW50cyBhd2F5LCBoZSBiZXRvb2sgaGltc2VsZiB0byByZXN0IGZvciB0aGUgcmVtYWluZGVyIG9mIHRoZSBuaWdodCwgYW5kIHNsZXB0IHNvIHNvdW5kbHkgdGhhdCBoaXMgY2hhbWJlcmxhaW5zIGhlYXJkIGhpcyBoZWF2eSBicmVhdGhpbmcuIEp1c3QgYmVmb3JlIGRhd24gaGUgY2FsbGVkIGEgZnJlZWRtYW4gd2l0aCB3aG9tIGhlIGhhZCBhcnJhbmdlZCBmb3IgdGhlIGRlcGFydHVyZSBvZiB0aGUgc2VuYXRvcnMsIGFuZCBiYWRlIGhpbSBsZWFybiBob3cgdGhleSBmYXJlZC4gQW5kIHdoZW4gaGUgd2FzIHRvbGQgdGhhdCBhbGwgb2YgdGhlbSBoYWQgd2hhdCB3YXMgbmVlZGZ1bCBmb3IgdGhlaXIgam91cm5leSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5HbyB0aG91LCB0aGVuLDwvcT4gaGUgc2FpZCB0byB0aGUgZnJlZWRtYW4sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIHNob3cgdGh5c2VsZiB0byB0aGUgc29sZGllcnMsIHVubGVzcyB0aG91IHdpc2hlc3QgdGhlbSB0byBwdXQgdGhlZSB0byBhIG1pc2VyYWJsZSBkZWF0aCBmb3IgaGVscGluZyBtZSB0byBkaWUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIG1hbiBoYWQgZ29uZSBvdXQsIHdpdGggYm90aCBoYW5kcyBoZSBoZWxkIGhpcyBzd29yZCB1cHJpZ2h0IGJlbmVhdGggaGltLCBhbmQgZmVsbCB1cG9uIGl0LCBnaXZpbmcgYnV0IGEgc2luZ2xlIGdyb2FuIGFzIGhlIGZlbHQgdGhlIHBhbmcuIFRoZSBzZXJ2YW50cyBvdXRzaWRlIGhlYXJkIGhpcyBncm9hbiBhbmQgcmFpc2VkIGEgd2FpbGluZyBjcnksIGFuZCBhdCBvbmNlIHRoZSB3aG9sZSBjYW1wIGFuZCB0aGUgY2l0eSB3ZXJlIGZpbGxlZCB3aXRoIGxhbWVudGF0aW9uLiBUaGUgc29sZGllcnMsIHdpdGggbG91ZCBjcmllcywgYnVyc3QgaW4gYXQgdGhlIGRvb3IsIGFuZCB0aGVuIGJld2FpbGVkIHRoZWlyIGVtcGVyb3IsIGZ1bGwgb2YgYW5ndWlzaCwgYW5kIHJldmlsaW5nIHRoZW1zZWx2ZXMgYmVjYXVzZSB0aGV5IGhhZCBub3Qgd2F0Y2hlZCBvdmVyIGhpbSBhbmQgcHJldmVudGVkIGhpbSBmcm9tIGR5aW5nIGluIHRoZWlyIGJlaGFsZi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG9uZSBvZiBoaXMgZm9sbG93ZXJzIHdlbnQgYXdheSwgYWx0aG91Z2ggdGhlIGVuZW15IHdlcmUgbmVhciwgYnV0IGFmdGVyIGF0dGlyaW5nIHRoZSBib2R5IGFuZCBwcmVwYXJpbmcgYSBmdW5lcmFsIHB5cmUgZm9yIGl0LCB0aGV5IGVzY29ydGVkIGl0IHRoaXRoZXIgd2l0aCBtaWxpdGFyeSBob25vdXJzLCBhbmQgZnVsbCBvZiBleHVsdGF0aW9uIHdlcmUgdGhvc2Ugd2hvIHdvbiB0aGUgcHJpdmlsZWdlIG9mIGNhcnJ5aW5nIHRoZSBiaWVyLiBPZiB0aGUgcmVzdCwgc29tZSBlbWJyYWNlZCB0aGUgZW1wZXJvcidzIGJvZHkgYW5kIGtpc3NlZCBoaXMgd291bmQsIG90aGVycyBncmFzcGVkIGhpcyBoYW5kcywgYW5kIG90aGVycyBzdGlsbCBtYWRlIGhpbSB0aGVpciBvYmVpc2FuY2UgYXQgYSBkaXN0YW5jZS4gVGhlcmUgd2VyZSBzb21lLCB0b28sIHdobyBmaXJzdCBwdXQgdGhlaXIgdG9yY2hlcyB0byB0aGUgcHlyZSBhbmQgdGhlbiBzbGV3IHRoZW1zZWx2ZXMsIG5vdCwgc28gZmFyIGFzIGNvdWxkIGJlIGtub3duLCBiZWNhdXNlIHRoZXkgd2VyZSBlaXRoZXIgaW5kZWJ0ZWQgdG8gdGhlIGRlYWQgZm9yIGZhdm91cnMsIG9yIGZlYXJmdWwgb2YgcHVuaXNobWVudCBhdCB0aGUgaGFuZHMgb2YgdGhlIHZpY3Rvci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCBpdCB3b3VsZCBzZWVtIHRoYXQgbm8ga2luZyBvciB0eXJhbnQgd2FzIGV2ZXIgcG9zc2Vzc2VkIGJ5IHNvIGRpcmUgYW5kIGZyZW56aWVkIGEgcGFzc2lvbiBmb3IgcnVsaW5nIGFzIHdhcyB0aGF0IG9mIHRoZXNlIHNvbGRpZXJzIGZvciBiZWluZyBydWxlZCBhbmQgY29tbWFuZGVkIGJ5IE90aG87IG5vdCBldmVuIGFmdGVyIGhpcyBkZWF0aCBkaWQgdGhlaXIgeWVhcm5pbmcgZm9yIGhpbSBsZWF2ZSB0aGVtLCBuYXksIGl0IGFib2RlIHdpdGggdGhlbSB1bnRpbCBpdCBmaW5hbGx5IGNoYW5nZWQgaW50byBhbiBpbmN1cmFibGUgaGF0cmVkIGZvciBWaXRlbGxpdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIG5vdyBldmVuaW5nLCBhbmQgYmVpbmcgdGhpcnN0eSwgaGUgZHJhbmsgYSBsaXR0bGUgd2F0ZXIuIEhlIGhhZCB0d28gc3dvcmRzLCBhbmQgYWZ0ZXIgZXhhbWluaW5nIHRoZSBibGFkZSBvZiBlYWNoIGZvciBhIGxvbmcgdGltZSwgaGUgbGFpZCBvbmUgb2YgdGhlbSBhc2lkZSwgYnV0IHB1dCB0aGUgb3RoZXIgdW5kZXIgaGlzIGFybSwgYW5kIHRoZW4gY2FsbGVkIGhpcyBzZXJ2YW50cy4gVGhlc2UgaGUgYWRkcmVzc2VkIGtpbmRseSwgYW5kIGRpc3RyaWJ1dGVkIG1vbmV5IHRvIHRoZW0sIG1vcmUgdG8gb25lIGFuZCBsZXNzIHRvIGFub3RoZXIsIG5vdCBhcyB0aG91Z2ggbGF2aXNoIHdpdGggd2hhdCB3YXMgbm8gbG9uZ2VyIHRvIGJlIGhpcywgYnV0IHdpdGggc3RyaWN0IHJlZ2FyZCB0byBtb2RlcmF0aW9uIGFuZCB0aGUgY2xhaW1zIG9mIG1lcml0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNlbmRpbmcgdGhlIHNlcnZhbnRzIGF3YXksIGhlIGJldG9vayBoaW1zZWxmIHRvIHJlc3QgZm9yIHRoZSByZW1haW5kZXIgb2YgdGhlIG5pZ2h0LCBhbmQgc2xlcHQgc28gc291bmRseSB0aGF0IGhpcyBjaGFtYmVybGFpbnMgaGVhcmQgaGlzIGhlYXZ5IGJyZWF0aGluZy4gSnVzdCBiZWZvcmUgZGF3biBoZSBjYWxsZWQgYSBmcmVlZG1hbiB3aXRoIHdob20gaGUgaGFkIGFycmFuZ2VkIGZvciB0aGUgZGVwYXJ0dXJlIG9mIHRoZSBzZW5hdG9ycywgYW5kIGJhZGUgaGltIGxlYXJuIGhvdyB0aGV5IGZhcmVkLiBBbmQgd2hlbiBoZSB3YXMgdG9sZCB0aGF0IGFsbCBvZiB0aGVtIGhhZCB3aGF0IHdhcyBuZWVkZnVsIGZvciB0aGVpciBqb3VybmV5LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R28gdGhvdSwgdGhlbiw8L3E+IGhlIHNhaWQgdG8gdGhlIGZyZWVkbWFuLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YW5kIHNob3cgdGh5c2VsZiB0byB0aGUgc29sZGllcnMsIHVubGVzcyB0aG91IHdpc2hlc3QgdGhlbSB0byBwdXQgdGhlZSB0byBhIG1pc2VyYWJsZSBkZWF0aCBmb3IgaGVscGluZyBtZSB0byBkaWUuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIG1hbiBoYWQgZ29uZSBvdXQsIHdpdGggYm90aCBoYW5kcyBoZSBoZWxkIGhpcyBzd29yZCB1cHJpZ2h0IGJlbmVhdGggaGltLCBhbmQgZmVsbCB1cG9uIGl0LCBnaXZpbmcgYnV0IGEgc2luZ2xlIGdyb2FuIGFzIGhlIGZlbHQgdGhlIHBhbmcuIFRoZSBzZXJ2YW50cyBvdXRzaWRlIGhlYXJkIGhpcyBncm9hbiBhbmQgcmFpc2VkIGEgd2FpbGluZyBjcnksIGFuZCBhdCBvbmNlIHRoZSB3aG9sZSBjYW1wIGFuZCB0aGUgY2l0eSB3ZXJlIGZpbGxlZCB3aXRoIGxhbWVudGF0aW9uLiBUaGUgc29sZGllcnMsIHdpdGggbG91ZCBjcmllcywgYnVyc3QgaW4gYXQgdGhlIGRvb3IsIGFuZCB0aGVuIGJld2FpbGVkIHRoZWlyIGVtcGVyb3IsIGZ1bGwgb2YgYW5ndWlzaCwgYW5kIHJldmlsaW5nIHRoZW1zZWx2ZXMgYmVjYXVzZSB0aGV5IGhhZCBub3Qgd2F0Y2hlZCBvdmVyIGhpbSBhbmQgcHJldmVudGVkIGhpbSBmcm9tIGR5aW5nIGluIHRoZWlyIGJlaGFsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdCBvbmUgb2YgaGlzIGZvbGxvd2VycyB3ZW50IGF3YXksIGFsdGhvdWdoIHRoZSBlbmVteSB3ZXJlIG5lYXIsIGJ1dCBhZnRlciBhdHRpcmluZyB0aGUgYm9keSBhbmQgcHJlcGFyaW5nIGEgZnVuZXJhbCBweXJlIGZvciBpdCwgdGhleSBlc2NvcnRlZCBpdCB0aGl0aGVyIHdpdGggbWlsaXRhcnkgaG9ub3VycywgYW5kIGZ1bGwgb2YgZXh1bHRhdGlvbiB3ZXJlIHRob3NlIHdobyB3b24gdGhlIHByaXZpbGVnZSBvZiBjYXJyeWluZyB0aGUgYmllci4gT2YgdGhlIHJlc3QsIHNvbWUgZW1icmFjZWQgdGhlIGVtcGVyb3IncyBib2R5IGFuZCBraXNzZWQgaGlzIHdvdW5kLCBvdGhlcnMgZ3Jhc3BlZCBoaXMgaGFuZHMsIGFuZCBvdGhlcnMgc3RpbGwgbWFkZSBoaW0gdGhlaXIgb2JlaXNhbmNlIGF0IGEgZGlzdGFuY2UuIFRoZXJlIHdlcmUgc29tZSwgdG9vLCB3aG8gZmlyc3QgcHV0IHRoZWlyIHRvcmNoZXMgdG8gdGhlIHB5cmUgYW5kIHRoZW4gc2xldyB0aGVtc2VsdmVzLCBub3QsIHNvIGZhciBhcyBjb3VsZCBiZSBrbm93biwgYmVjYXVzZSB0aGV5IHdlcmUgZWl0aGVyIGluZGVidGVkIHRvIHRoZSBkZWFkIGZvciBmYXZvdXJzLCBvciBmZWFyZnVsIG9mIHB1bmlzaG1lbnQgYXQgdGhlIGhhbmRzIG9mIHRoZSB2aWN0b3IuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5heSwgaXQgd291bGQgc2VlbSB0aGF0IG5vIGtpbmcgb3IgdHlyYW50IHdhcyBldmVyIHBvc3Nlc3NlZCBieSBzbyBkaXJlIGFuZCBmcmVuemllZCBhIHBhc3Npb24gZm9yIHJ1bGluZyBhcyB3YXMgdGhhdCBvZiB0aGVzZSBzb2xkaWVycyBmb3IgYmVpbmcgcnVsZWQgYW5kIGNvbW1hbmRlZCBieSBPdGhvOyBub3QgZXZlbiBhZnRlciBoaXMgZGVhdGggZGlkIHRoZWlyIHllYXJuaW5nIGZvciBoaW0gbGVhdmUgdGhlbSwgbmF5LCBpdCBhYm9kZSB3aXRoIHRoZW0gdW50aWwgaXQgZmluYWxseSBjaGFuZ2VkIGludG8gYW4gaW5jdXJhYmxlIGhhdHJlZCBmb3IgVml0ZWxsaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCB0aGUgcmVzdCBvZiB0aGUgc3RvcnkgaXMgbm93IGluIHBsYWNlLiBUaGV5IGJ1cmllZCB0aGUgICByZW1haW5zIG9mIE90aG8sIGFuZCBtYWRlIGEgdG9tYiBmb3IgdGhlbSB3aGljaCBuZWl0aGVyIGJ5IHRoZSBncmVhdCBzaXplIG9mIGl0cyBtb3VuZCBub3IgYnkgdGhlIGJvYXN0ZnVsbmVzcyBvZiBpdHMgaW5zY3JpcHRpb24gY291bGQgYXdha2VuIGplYWxvdXN5LiBJIHNhdyBpdCB3aGVuIEkgd2FzIGF0IEJyaXhpbGx1bS4gSXQgaXMgYSBtb2Rlc3QgbWVtb3JpYWwgYW5kIHRoZSBpbnNjcmlwdGlvbiBvbiBpdCwgaW4gdHJhbnNsYXRpb24sIHJ1bnMgdGh1czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyB0aGUgbWVtb3J5IG9mIE1hcmN1cyBPdGhvLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIHJlc3Qgb2YgdGhlIHN0b3J5IGlzIG5vdyBpbiBwbGFjZS4gVGhleSBidXJpZWQgdGhlICAgcmVtYWlucyBvZiBPdGhvLCBhbmQgbWFkZSBhIHRvbWIgZm9yIHRoZW0gd2hpY2ggbmVpdGhlciBieSB0aGUgZ3JlYXQgc2l6ZSBvZiBpdHMgbW91bmQgbm9yIGJ5IHRoZSBib2FzdGZ1bG5lc3Mgb2YgaXRzIGluc2NyaXB0aW9uIGNvdWxkIGF3YWtlbiBqZWFsb3VzeS4gSSBzYXcgaXQgd2hlbiBJIHdhcyBhdCBCcml4aWxsdW0uIEl0IGlzIGEgbW9kZXN0IG1lbW9yaWFsIGFuZCB0aGUgaW5zY3JpcHRpb24gb24gaXQsIGluIHRyYW5zbGF0aW9uLCBydW5zIHRodXM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyB0aGUgbWVtb3J5IG9mIE1hcmN1cyBPdGhvLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T3RobyBkaWVkIGF0IHRoZSBhZ2Ugb2YgdGhpcnR5LXNldmVuIHllYXJzLCBidXQgaGUgaGFkIHJ1bGVkIG9ubHkgdGhyZWUgbW9udGhzLCBhbmQgd2hlbiBoZSB3YXMgZ29uZSwgdGhvc2Ugd2hvIGFwcGxhdWRlZCBoaXMgZGVhdGggd2VyZSBubyBmZXdlciBvciBsZXNzIGlsbHVzdHJpb3VzIHRoYW4gdGhvc2Ugd2hvIGJsYW1lZCBoaXMgbGlmZS4gRm9yIHRob3VnaCBoZSBsaXZlZCBubyBtb3JlIGRlY2VudGx5IHRoYW4gTmVybywgaGUgZGllZCBtb3JlIG5vYmx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk90aG8gZGllZCBhdCB0aGUgYWdlIG9mIHRoaXJ0eS1zZXZlbiB5ZWFycywgYnV0IGhlIGhhZCBydWxlZCBvbmx5IHRocmVlIG1vbnRocywgYW5kIHdoZW4gaGUgd2FzIGdvbmUsIHRob3NlIHdobyBhcHBsYXVkZWQgaGlzIGRlYXRoIHdlcmUgbm8gZmV3ZXIgb3IgbGVzcyBpbGx1c3RyaW91cyB0aGFuIHRob3NlIHdobyBibGFtZWQgaGlzIGxpZmUuIEZvciB0aG91Z2ggaGUgbGl2ZWQgbm8gbW9yZSBkZWNlbnRseSB0aGFuIE5lcm8sIGhlIGRpZWQgbW9yZSBub2JseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIGhpcyBzb2xkaWVycywgd2hlbiBQb2xsaW8sIHRoZWlyIHJlbWFpbmluZyBwcmVmZWN0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBvdGhlciB3YXMgUHJvY3VsdXMsICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gT3RoLiA3LjQiIHZhbGlkPSJ5ZXMiPnZpaS4gNDwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDguMSIgdmFsaWQ9InllcyI+eGlpaS4gMTwvYmlibD4pLjwvbm90ZT4gb3JkZXJlZCB0aGVtIHRvIHN3ZWFyIGFsbGVnaWFuY2UgYXQgb25jZSB0byBWaXRlbGxpdXMsIHRoZXkgd2VyZSBpbmNlbnNlZDsgYW5kIHdoZW4gdGhleSBsZWFybmVkIHRoYXQgc29tZSBvZiB0aGUgc2VuYXRvcnMgd2VyZSBzdGlsbCB0aGVyZSwgdGhleSBsZXQgYWxsIG9mIHRoZW0gZ28gZXhjZXB0IFZlcmdpbml1cyBSdWZ1cywgYW5kIGhpbSB0aGV5IGFubm95ZWQgYnkgZ29pbmcgdG8gaGlzIGhvdXNlIGluIG1pbGl0YXJ5IGFycmF5IGFuZCBpbnZpdGluZyBoaW0gYWdhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gR2FsYi4gNi4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkdhbGJhPC90aXRsZT4sIHZpLiAzPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDEwLjIiIHZhbGlkPSJ5ZXMiPnguIDIgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBldmVuIHVyZ2luZyBoaW0sIHRvIGFzc3VtZSB0aGUgaW1wZXJpYWwgcG93ZXIsIG9yIHRvIGdvIG9uIGFuIGVtYmFzc3kgaW4gdGhlaXIgYmVoYWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgVmVyZ2luaXVzIHRob3VnaHQgaXQgd291bGQgYmUgbWFkbmVzcyBmb3IgaGltIHRvIGFjY2VwdCB0aGUgaW1wZXJpYWwgZGlnbml0eSBub3csIHdoZW4gdGhleSB3ZXJlIGRlZmVhdGVkLCBhZnRlciByZWZ1c2luZyBpdCBiZWZvcmUsIHdoZW4gdGhleSB3ZXJlIHZpY3RvcmlvdXMsIGFuZCBhcyBmb3IgZ29pbmcgb24gYW4gZW1iYXNzeSB0byB0aGUgR2VybWFucywgaGUgZmVhcmVkIHRvIGRvIHNvLCBzaW5jZSB0aGV5IGZlbHQgdGhhdCBoZSBoYWQgb2Z0ZW4gZG9uZSB0aGVtIHZpb2xlbmNlIGJleW9uZCBhbGwgcmVhc29uOyBhbmQgc28gaGUgc3RvbGUgYXdheSB1bm9ic2VydmVkIGJ5IGFub3RoZXIgZG9vci4gV2hlbiB0aGUgc29sZGllcnMgbGVhcm5lZCBvZiB0aGlzLCB0aGV5IGNvbnNlbnRlZCB0byB0YWtlIHRoZSBvYXRocywgYW5kIGpvaW5lZCB0aGUgZm9yY2VzIG9mIENhZWNpbmEsIHRodXMgb2J0YWluaW5nIHBhcmRvbi4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaXMgc29sZGllcnMsIHdoZW4gUG9sbGlvLCB0aGVpciByZW1haW5pbmcgcHJlZmVjdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBvdGhlciB3YXMgUHJvY3VsdXMsICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDcuNCIgdmFsaWQ9InllcyI+dmlpLiA0PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gT3RoLiA4LjEiIHZhbGlkPSJ5ZXMiPnhpaWkuIDE8L2JpYmw+KS48L25vdGU+IG9yZGVyZWQgdGhlbSB0byBzd2VhciBhbGxlZ2lhbmNlIGF0IG9uY2UgdG8gVml0ZWxsaXVzLCB0aGV5IHdlcmUgaW5jZW5zZWQ7IGFuZCB3aGVuIHRoZXkgbGVhcm5lZCB0aGF0IHNvbWUgb2YgdGhlIHNlbmF0b3JzIHdlcmUgc3RpbGwgdGhlcmUsIHRoZXkgbGV0IGFsbCBvZiB0aGVtIGdvIGV4Y2VwdCBWZXJnaW5pdXMgUnVmdXMsIGFuZCBoaW0gdGhleSBhbm5veWVkIGJ5IGdvaW5nIHRvIGhpcyBob3VzZSBpbiBtaWxpdGFyeSBhcnJheSBhbmQgaW52aXRpbmcgaGltIGFnYWluLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE90aC4gNy40IiB2YWxpZD0ieWVzIj52aWkuIDQ8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBPdGguIDguMSIgdmFsaWQ9InllcyI+eGlpaS4gMTwvYmlibD4pLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBHYWxiLiA2LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5HYWxiYTwvdGl0bGU+LCB2aS4gMzwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDEwLjIiIHZhbGlkPSJ5ZXMiPnguIDIgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBldmVuIHVyZ2luZyBoaW0sIHRvIGFzc3VtZSB0aGUgaW1wZXJpYWwgcG93ZXIsIG9yIHRvIGdvIG9uIGFuIGVtYmFzc3kgaW4gdGhlaXIgYmVoYWxmLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEdhbGIuIDYuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkdhbGJhPC90aXRsZT4sIHZpLiAzPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R2FsYmE8L3RpdGxlPiwgdmkuIDM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBHYWxiLiAxMC4yIiB2YWxpZD0ieWVzIj54LiAyIGZmLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
