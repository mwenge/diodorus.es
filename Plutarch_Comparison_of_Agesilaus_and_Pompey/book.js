var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFnZXNpbGHDvHMsIG9uIHRoZSBjb250cmFyeSwgYXBwZWFyZWQgdG8gZ2V0IGhpcyBraW5nZG9tIGJ5IHNpbm5pbmcgYWdhaW5zdCBib3RoIGdvZHMgYW5kIG1lbiwgc2luY2UgaGUgYnJvdWdodCBMZW90eWNoaWRlcyB1bmRlciBjb25kZW1uYXRpb24gZm9yIGJhc3RhcmR5LCBhbHRob3VnaCBoaXMgYnJvdGhlciBoYWQgcmVjb2duaXNlZCBoaW0gYXMgaGlzIGxlZ2l0aW1hdGUgc29uLCBhbmQgbWFkZSBsaWdodCBvZiB0aGUgb3JhY2xlIGNvbmNlcm5pbmcgaGlzIGxhbWVuZXNzLiBJbiB0aGUgc2Vjb25kIHBsYWNlLCBQb21wZXkgbm90IG9ubHkgY29udGludWVkIHRvIGhvbGQgU3VsbGEgaW4gaG9ub3VyIHdoaWxlIGhlIGxpdmVkLCBidXQgYWxzbyBhZnRlciBoaXMgZGVhdGggZ2F2ZSBoaXMgYm9keSBmdW5lcmFsIG9ic2VxdWllcyBpbiBkZXNwaXRlIG9mIExlcGlkdXMsIGFuZCBiZXN0b3dlZCB1cG9uIGhpcyBzb24gRmF1c3R1cyBoaXMgb3duIGRhdWdodGVyIGluIG1hcnJpYWdlOyB3aGVyZWFzIEFnZXNpbGHDvHMgY2FzdCBvdXQgTHlzYW5kZXIgb24gdGhlIG1lcmVzdCBwcmV0ZXh0LCBhbmQgaGVhcGVkIGluc3VsdCB1cG9uIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgU3VsbGEgZ290IG5vIGxlc3MgZnJvbSBQb21wZXkgdGhhbiBoZSBnYXZlIGhpbSwgd2hpbGUgaW4gdGhlIGNhc2Ugb2YgQWdlc2lsYcO8cywgaXQgd2FzIEx5c2FuZGVyIHdobyBtYWRlIGhpbSBraW5nIG9mIFNwYXJ0YSBhbmQgZ2VuZXJhbCBvZiBhbGwgR3JlZWNlLiAgIEFuZCwgdGhpcmRseSwgUG9tcGV5J3MgdHJhbnNncmVzc2lvbnMgb2YgcmlnaHQgYW5kIGp1c3RpY2UgaW4gaGlzIHBvbGl0aWNhbCBsaWZlIHdlcmUgZHVlIHRvIGhpcyBmYW1pbHkgY29ubmVjdGlvbnMsIGZvciBoZSBqb2luZWQgaW4gbW9zdCBvZiB0aGUgd3Jvbmdkb2luZ3Mgb2YgQ2Flc2FyIGFuZCBTY2lwaW8gYmVjYXVzZSB0aGV5IHdlcmUgaGlzIHJlbGF0aW9ucyBieSBtYXJyaWFnZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBZ2VzaWxhw7xzIHNuYXRjaGVkIFNwaG9kcmlhcyBmcm9tIHRoZSBkZWF0aCB3aGljaCBodW5nIG92ZXIgaGltIGZvciB3cm9uZ2luZyB0aGUgQXRoZW5pYW5zLCBtZXJlbHkgdG8gZ3JhdGlmeSB0aGUgbG92ZSBvZiBoaXMgc29uLCBhbmQgd2hlbiBQaG9lYmlkYXMgdHJlYWNoZXJvdXNseSBicm9rZSB0aGUgcGVhY2Ugd2l0aCBUaGViZXMsIGhlIGV2aWRlbnRseSBtYWRlIHRoZSBjcmltZSBpdHNlbGYgYSByZWFzb24gZm9yIHplYWxvdXNseSBzdXBwb3J0aW5nIGhpbS4gIEluIGEgd29yZCwgd2hhdGV2ZXIgaGFybSBQb21wZXkgd2FzIGFjY3VzZWQgb2YgYnJpbmdpbmcgdXBvbiB0aGUgUm9tYW5zIG91dCBvZiBkZWZlcmVuY2UgIHRvICBoaXMgZnJpZW5kcyBvciB0aHJvdWdoIGlnbm9yYW5jZSwgQWdlc2lsYcO8cyBicm91Z2h0IGFzIG11Y2ggdXBvbiB0aGUgTGFjZWRhZW1vbmlhbnMgb3V0IG9mIG9ic3RpbmFjeSBhbmQgcmVzZW50bWVudCB3aGVuIGhlIGtpbmRsZWQgdGhlIEJvZW90aWFuIHdhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaWYgd2UgbXVzdCBhc3NpZ24gdG8gYW55IGlsbC1mb3J0dW5lIG9mIHRoZSB0d28gbWVuIHRoZSBkaXNhc3RlcnMgd2hpY2ggb3ZlcnRvb2sgdGhlbSwgdGhhdCBvZiBQb21wZXkgY291bGQgbm90IGhhdmUgYmVlbiBhbnRpY2lwYXRlZCBieSB0aGUgUm9tYW5zOyBidXQgQWdlc2lsYcO8cyB3b3VsZCBub3QgcGVybWl0IHRoZSBMYWNlZGFlbW9uaWFucyB0byBndWFyZCBhZ2FpbnN0IHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxhbWUgc292ZXJlaWdudHksPC9xPiBhbHRob3VnaCB0aGV5IGhhZCBoZWFyZCBhbmQga25ldyBiZWZvcmUtIGhhbmQgYWJvdXQgaXQuICBGb3IgZXZlbiBpZiBMZW90eWNoaWRlcyBoYWQgYmVlbiB0ZW4gdGhvdXNhbmQgdGltZXMgY29udmljdGVkIG9mIGJlaW5nIGJhc3RhcmQgYW5kIGFsaWVuLCB0aGUgZmFtaWx5IG9mIHRoZSBFdXJ5cG9udGlkYWUgY291bGQgZWFzaWx5IGhhdmUgZnVybmlzaGVkIFNwYXJ0YSB3aXRoIGEga2luZyB3aG8gd2FzIG9mIGxlZ2l0aW1hdGUgYmlydGggYW5kIHNvdW5kIG9mIGxpbWIsIGhhZCBub3QgTHlzYW5kZXIgZGFya2VuZWQgdGhlIG1lYW5pbmcgb2YgdGhlIG9yYWNsZSBpbiB0aGUgaW50ZXJlc3RzIG9mIEFnZXNpbGHDvHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaWYgd2UgbXVzdCBhc3NpZ24gdG8gYW55IGlsbC1mb3J0dW5lIG9mIHRoZSB0d28gbWVuIHRoZSBkaXNhc3RlcnMgd2hpY2ggb3ZlcnRvb2sgdGhlbSwgdGhhdCBvZiBQb21wZXkgY291bGQgbm90IGhhdmUgYmVlbiBhbnRpY2lwYXRlZCBieSB0aGUgUm9tYW5zOyBidXQgQWdlc2lsYcO8cyB3b3VsZCBub3QgcGVybWl0IHRoZSBMYWNlZGFlbW9uaWFucyB0byBndWFyZCBhZ2FpbnN0IHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bGFtZSBzb3ZlcmVpZ250eSw8L3E+IGFsdGhvdWdoIHRoZXkgaGFkIGhlYXJkIGFuZCBrbmV3IGJlZm9yZS0gaGFuZCBhYm91dCBpdC4gIEZvciBldmVuIGlmIExlb3R5Y2hpZGVzIGhhZCBiZWVuIHRlbiB0aG91c2FuZCB0aW1lcyBjb252aWN0ZWQgb2YgYmVpbmcgYmFzdGFyZCBhbmQgYWxpZW4sIHRoZSBmYW1pbHkgb2YgdGhlIEV1cnlwb250aWRhZSBjb3VsZCBlYXNpbHkgaGF2ZSBmdXJuaXNoZWQgU3BhcnRhIHdpdGggYSBraW5nIHdobyB3YXMgb2YgbGVnaXRpbWF0ZSBiaXJ0aCBhbmQgc291bmQgb2YgbGltYiwgaGFkIG5vdCBMeXNhbmRlciBkYXJrZW5lZCB0aGUgbWVhbmluZyBvZiB0aGUgb3JhY2xlIGluIHRoZSBpbnRlcmVzdHMgb2YgQWdlc2lsYcO8cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG90aGVyIGhhbmQsIHdoZW4gd2UgY29uc2lkZXIgdGhlIHJlbWVkeSB3aGljaCBBZ2VzaWxhw7xzIGFwcGxpZWQgdG8gdGhlIHBlcnBsZXhpdHkgb2YgdGhlIHN0YXRlIGluIGRlYWxpbmcgd2l0aCB0aG9zZSB3aG8gaGFkIHBsYXllZCB0aGUgY293YXJkLCBhZnRlciB0aGUgZGlzYXN0ZXIgYXQgTGV1Y3RyYSwgd2hlbiBoZSB1cmdlZCB0aGF0IHRoZSBsYXdzIHNob3VsZCBzbHVtYmVyIGZvciB0aGF0IGRheSwgdGhlcmUgd2FzIG5ldmVyIGFub3RoZXIgcG9saXRpY2FsIGRldmljZSBsaWtlIGl0LCBub3IgY2FuIHdlIGZpbmQgYW55dGhpbmcgaW4gUG9tcGV5J3MgY2FyZWVyIHRvIGNvbXBhcmUgd2l0aCBpdDsgb24gdGhlIGNvbnRyYXJ5LCBoZSBkaWQgbm90IGV2ZW4gdGhpbmsgaXQgaW5jdW1iZW50IHVwb24gaGltIHRvIGFiaWRlIGJ5IHRoZSBsYXdzIHdoaWNoIGhlIGhpbXNlbGYgaGFkIG1hZGUsIGlmIGhlIG1pZ2h0IG9ubHkgZGlzcGxheSB0aGUgZ3JlYXRuZXNzIG9mIGhpcyBwb3dlciB0byBoaXMgZnJpZW5kcy4gQnV0IEFnZXNpbGHDvHMsIHdoZW4gaGUgY29uZnJvbnRlZCB0aGUgbmVjZXNzaXR5IG9mIGFicm9nYXRpbmcgdGhlIGxhd3MgaW4gb3JkZXIgdG8gc2F2ZSBoaXMgZmVsbG93LWNpdGl6ZW5zLCBkZXZpc2VkIGEgd2F5IGJ5IHdoaWNoIHRoZSBjaXRpemVucyBzaG91bGQgbm90IGJlIGhhcm1lZCBieSB0aGUgbGF3cywgbm9yIHRoZSBsYXdzIGJlIGFicm9nYXRlZCB0byBhdm9pZCBzdWNoIGhhcm0uICAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlciwgSSBhdHRyaWJ1dGUgYWxzbyB0byBwb2xpdGljYWwgdmlydHVlIGluIEFnZXNpbGHDvHMgdGhhdCBpbmltaXRhYmxlIGFjdCBvZiBoaXMgaW4gYWJhbmRvbmluZyBoaXMgY2FyZWVyIGluIEFzaWEgb24gcmVjZWlwdCBvZiB0aGUgZGlzcGF0Y2gtcm9sbC4gIEZvciBoZSBkaWQgbm90LCBsaWtlIFBvbXBleSwgaGVscCB0aGUgY29tbW9ud2VhbHRoIG9ubHkgYXMgaGUgbWFkZSBoaW1zZWxmIGdyZWF0LCBidXQgd2l0aCBhbiBleWUgdG8gdGhlIHdlbGZhcmUgb2YgaGlzIGNvdW50cnkgaGUgcmVub3VuY2VkIHN1Y2ggZ3JlYXQgZmFtZSBhbmQgcG93ZXIgYXMgbm8gbWFuIHdvbiBiZWZvcmUgb3Igc2luY2UgaGlzIGRheSwgZXhjZXB0IEFsZXhhbmRlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBvdGhlciBoYW5kLCB3aGVuIHdlIGNvbnNpZGVyIHRoZSByZW1lZHkgd2hpY2ggQWdlc2lsYcO8cyBhcHBsaWVkIHRvIHRoZSBwZXJwbGV4aXR5IG9mIHRoZSBzdGF0ZSBpbiBkZWFsaW5nIHdpdGggdGhvc2Ugd2hvIGhhZCBwbGF5ZWQgdGhlIGNvd2FyZCwgYWZ0ZXIgdGhlIGRpc2FzdGVyIGF0IExldWN0cmEsIHdoZW4gaGUgdXJnZWQgdGhhdCB0aGUgbGF3cyBzaG91bGQgc2x1bWJlciBmb3IgdGhhdCBkYXksIHRoZXJlIHdhcyBuZXZlciBhbm90aGVyIHBvbGl0aWNhbCBkZXZpY2UgbGlrZSBpdCwgbm9yIGNhbiB3ZSBmaW5kIGFueXRoaW5nIGluIFBvbXBleSdzIGNhcmVlciB0byBjb21wYXJlIHdpdGggaXQ7IG9uIHRoZSBjb250cmFyeSwgaGUgZGlkIG5vdCBldmVuIHRoaW5rIGl0IGluY3VtYmVudCB1cG9uIGhpbSB0byBhYmlkZSBieSB0aGUgbGF3cyB3aGljaCBoZSBoaW1zZWxmIGhhZCBtYWRlLCBpZiBoZSBtaWdodCBvbmx5IGRpc3BsYXkgdGhlIGdyZWF0bmVzcyBvZiBoaXMgcG93ZXIgdG8gaGlzIGZyaWVuZHMuIEJ1dCBBZ2VzaWxhw7xzLCB3aGVuIGhlIGNvbmZyb250ZWQgdGhlIG5lY2Vzc2l0eSBvZiBhYnJvZ2F0aW5nIHRoZSBsYXdzIGluIG9yZGVyIHRvIHNhdmUgaGlzIGZlbGxvdy1jaXRpemVucywgZGV2aXNlZCBhIHdheSBieSB3aGljaCB0aGUgY2l0aXplbnMgc2hvdWxkIG5vdCBiZSBoYXJtZWQgYnkgdGhlIGxhd3MsIG5vciB0aGUgbGF3cyBiZSBhYnJvZ2F0ZWQgdG8gYXZvaWQgc3VjaCBoYXJtLiAgIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIEkgYXR0cmlidXRlIGFsc28gdG8gcG9saXRpY2FsIHZpcnR1ZSBpbiBBZ2VzaWxhw7xzIHRoYXQgaW5pbWl0YWJsZSBhY3Qgb2YgaGlzIGluIGFiYW5kb25pbmcgaGlzIGNhcmVlciBpbiBBc2lhIG9uIHJlY2VpcHQgb2YgdGhlIGRpc3BhdGNoLXJvbGwuICBGb3IgaGUgZGlkIG5vdCwgbGlrZSBQb21wZXksIGhlbHAgdGhlIGNvbW1vbndlYWx0aCBvbmx5IGFzIGhlIG1hZGUgaGltc2VsZiBncmVhdCwgYnV0IHdpdGggYW4gZXllIHRvIHRoZSB3ZWxmYXJlIG9mIGhpcyBjb3VudHJ5IGhlIHJlbm91bmNlZCBzdWNoIGdyZWF0IGZhbWUgYW5kIHBvd2VyIGFzIG5vIG1hbiB3b24gYmVmb3JlIG9yIHNpbmNlIGhpcyBkYXksIGV4Y2VwdCBBbGV4YW5kZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBmcm9tIGFub3RoZXIgcG9pbnQgb2YgdmlldywgdGhhdCBvZiB0aGVpciBjYW1wYWlnbnMgYW5kIGFjaGlldmVtZW50cyBpbiB3YXIsIHRoZSB0cm9waGllcyBvZiBQb21wZXkgd2VyZSBzbyBtYW55LCB0aGUgZm9yY2VzIGxlZCBieSBoaW0gc28gdmFzdCwgYW5kIHRoZSBwaXRjaGVkIGJhdHRsZXMgaW4gd2hpY2ggaGUgd2FzIHZpY3RvcmlvdXMgc28gaW5udW1lcmFibGUsIHRoYXQgbm90IGV2ZW4gWGVub3Bob24sIEkgdGhpbmssIHdvdWxkIGNvbXBhcmUgdGhlIHZpY3RvcmllcyBvZiBBZ2VzaWxhw7xzLCBhbHRob3VnaCB0aGF0IGhpc3RvcmlhbiwgYnkgcmVhc29uIG9mIGhpcyBvdGhlciBleGNlbGxlbnQgcXVhbGl0aWVzLCBpcyBzcGVjaWFsbHkgcHJpdmlsZWdlZCwgYXMgaXQgd2VyZSwgdG8gc2F5IGFuZCB3cml0ZSB3aGF0ZXZlciBoZSBwbGVhc2VzIGFib3V0IHRoZSBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgdGhpbmsgYWxzbyB0aGF0IGluIG1lcmNpZnVsIGJlaGF2aW91ciB0b3dhcmRzIHRoZWlyIGVuZW1pZXMgdGhlIHR3byBtZW4gd2VyZSBkaWZmZXJlbnQuICBGb3IgQWdlc2lsYcO8cyB3YXMgc28gYmVudCBvbiBlbnNsYXZpbmcgVGhlYmVzIGFuZCBkZXBvcHVsYXRpbmcgTWVzc2VuaWEsIFRoZWJlcyB0aGUgbW90aGVyLWNpdHkgb2YgaGlzIHJveWFsIGxpbmUsIGFuZCBNZXNzZW5pYSBhIHNpc3RlciBjb2xvbnkgdG8gaGlzIGNvdW50cnksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlYmVzIHdhcyB0aGUgYmlydGgtcGxhY2Ugb2YgSGVyYWNsZXMsIGZyb20gd2hvbSB0aGUgU3BhcnRhbiBraW5ncyB3ZXJlIHN1cHBvc2VkIHRvIGJlIGRlc2NlbmRlZDsgYW5kIE1lc3NlbmlhLCBsaWtlIFNwYXJ0YSwgd2FzIHNldHRsZWQgYnkgdGhlIEhlcmFjbGVpZGFlLjwvbm90ZT4gdGhhdCBoZSBuZWFybHkgbG9zdCBTcGFydGEsIGFuZCBkaWQgbG9zZSBoZXIgc3VwcmVtYWN5IGluIEdyZWVjZTsgd2hlcmVhcyBQb21wZXkgZ2F2ZSBjaXRpZXMgdG8gc3VjaCBvZiB0aGUgcGlyYXRlcyBhcyBjaGFuZ2VkIHRoZWlyIG1vZGUgb2YgbGlmZSwgYW5kIHdoZW4gaXQgd2FzIGluIGhpcyBwb3dlciB0byBsZWFkIFRpZ3JhbmVzIHRoZSBraW5nIG9mIEFybWVuaWEgaW4gaGlzIHRyaXVtcGhhbCBwcm9jZXNzaW9uLCBtYWRlIGhpbSBhbiBhbGx5IGluc3RlYWQsIHNheWluZyB0aGF0IGhlIHRob3VnaHQgbW9yZSBvZiBmdXR1cmUgdGltZSB0aGFuIG9mIGEgc2luZ2xlIGRheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGZyb20gYW5vdGhlciBwb2ludCBvZiB2aWV3LCB0aGF0IG9mIHRoZWlyIGNhbXBhaWducyBhbmQgYWNoaWV2ZW1lbnRzIGluIHdhciwgdGhlIHRyb3BoaWVzIG9mIFBvbXBleSB3ZXJlIHNvIG1hbnksIHRoZSBmb3JjZXMgbGVkIGJ5IGhpbSBzbyB2YXN0LCBhbmQgdGhlIHBpdGNoZWQgYmF0dGxlcyBpbiB3aGljaCBoZSB3YXMgdmljdG9yaW91cyBzbyBpbm51bWVyYWJsZSwgdGhhdCBub3QgZXZlbiBYZW5vcGhvbiwgSSB0aGluaywgd291bGQgY29tcGFyZSB0aGUgdmljdG9yaWVzIG9mIEFnZXNpbGHDvHMsIGFsdGhvdWdoIHRoYXQgaGlzdG9yaWFuLCBieSByZWFzb24gb2YgaGlzIG90aGVyIGV4Y2VsbGVudCBxdWFsaXRpZXMsIGlzIHNwZWNpYWxseSBwcml2aWxlZ2VkLCBhcyBpdCB3ZXJlLCB0byBzYXkgYW5kIHdyaXRlIHdoYXRldmVyIGhlIHBsZWFzZXMgYWJvdXQgdGhlIG1hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgdGhpbmsgYWxzbyB0aGF0IGluIG1lcmNpZnVsIGJlaGF2aW91ciB0b3dhcmRzIHRoZWlyIGVuZW1pZXMgdGhlIHR3byBtZW4gd2VyZSBkaWZmZXJlbnQuICBGb3IgQWdlc2lsYcO8cyB3YXMgc28gYmVudCBvbiBlbnNsYXZpbmcgVGhlYmVzIGFuZCBkZXBvcHVsYXRpbmcgTWVzc2VuaWEsIFRoZWJlcyB0aGUgbW90aGVyLWNpdHkgb2YgaGlzIHJveWFsIGxpbmUsIGFuZCBNZXNzZW5pYSBhIHNpc3RlciBjb2xvbnkgdG8gaGlzIGNvdW50cnksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGViZXMgd2FzIHRoZSBiaXJ0aC1wbGFjZSBvZiBIZXJhY2xlcywgZnJvbSB3aG9tIHRoZSBTcGFydGFuIGtpbmdzIHdlcmUgc3VwcG9zZWQgdG8gYmUgZGVzY2VuZGVkOyBhbmQgTWVzc2VuaWEsIGxpa2UgU3BhcnRhLCB3YXMgc2V0dGxlZCBieSB0aGUgSGVyYWNsZWlkYWUuPC9ub3RlPiB0aGF0IGhlIG5lYXJseSBsb3N0IFNwYXJ0YSwgYW5kIGRpZCBsb3NlIGhlciBzdXByZW1hY3kgaW4gR3JlZWNlOyB3aGVyZWFzIFBvbXBleSBnYXZlIGNpdGllcyB0byBzdWNoIG9mIHRoZSBwaXJhdGVzIGFzIGNoYW5nZWQgdGhlaXIgbW9kZSBvZiBsaWZlLCBhbmQgd2hlbiBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGxlYWQgVGlncmFuZXMgdGhlIGtpbmcgb2YgQXJtZW5pYSBpbiBoaXMgdHJpdW1waGFsIHByb2Nlc3Npb24sIG1hZGUgaGltIGFuIGFsbHkgaW5zdGVhZCwgc2F5aW5nIHRoYXQgaGUgdGhvdWdodCBtb3JlIG9mIGZ1dHVyZSB0aW1lIHRoYW4gb2YgYSBzaW5nbGUgZGF5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgaG93ZXZlciwgaXQgaXMgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGZhci1yZWFjaGluZyBkZWNpc2lvbnMgYW5kIGFjdHMgaW4gd2FyIHRoYXQgYXJlIHRvIGRldGVybWluZSBwcmVlbWluZW5jZSBpbiB0aGUgdmlydHVlcyBvZiBsZWFkZXJzaGlwLCB0aGVuIHRoZSBMYWNlZGFlbW9uaWFuIGxlYXZlcyB0aGUgUm9tYW4gZmFyIGJlaGluZC4gIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCBoZSBkaWQgbm90IGRlc2VydCBub3IgYWJhbmRvbiBoaXMgY2l0eSwgdGhvdWdoIHRoZSBlbmVteSBhdHRhY2tlZCBpdCB3aXRoIGFuIGFybXkgb2YnIHNldmVudHkgdGhvdXNhbmQgbWVuLCB3aGlsZSBoZSBoYWQgb25seSBhIGZldyBtZW4tYXQtYXJtcywgYW5kIHRoZXNlIGhhZCByZWNlbnRseSBiZWVuIHZhbnF1aXNoZWQgYXQgTGV1Y3RyYTsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IFBvbXBleSwgYWZ0ZXIgQ2Flc2FyIGhhZCBvY2N1cGllZCBhIHNpbmdsZSBjaXR5IG9mIEl0YWx5IHdpdGggb25seSBmaWZ0eS10aHJlZSBodW5kcmVkIG1lbiwgaHVycmllZCBhd2F5IGZyb20gUm9tZSBpbiBhIHBhbmljLCBlaXRoZXIgeWllbGRpbmcgaWdub2JseSB0byBzbyBmZXcsIG9yIGNvbmplY3R1cmluZyBmYWxzZWx5IHRoYXQgdGhlcmUgd2VyZSBtb3JlOyBhbmQgYWZ0ZXIgY29udmV5aW5nIGF3YXkgd2l0aCBoaW0gaGlzIG93biB3aWZlIGFuZCBjaGlsZHJlbiwgaGUgbGVmdCB0aG9zZSBvZiB0aGUgb3RoZXIgY2l0aXplbnMgZGVmZW5jZWxlc3MgYW5kIHRvb2sgdG8gZmxpZ2h0LCB3aGVuIGhlIG91Z2h0IGVpdGhlciB0byBoYXZlIGNvbnF1ZXJlZCBpbiBhIGJhdHRsZSBmb3IgaGlzIGNvdW50cnksIG9yIHRvIGhhdmUgYWNjZXB0ZWQgdGVybXMgZnJvbSBoaXMgY29ucXVlcm9yLCB3aG8gd2FzIGEgZmVsbG93LWNpdGl6ZW4gYW5kIGEgcmVsYXRpb24gYnkgbWFycmlhZ2UuICAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgaXQgd2FzLCB0byB0aGUgbWFuIGZvciB3aG9tIGhlIHRob3VnaHQgaXQgYSB0ZXJyaWJsZSB0aGluZyB0byBwcm9sb25nIGEgdGVybSBvZiBtaWxpdGFyeSBjb21tYW5kIG9yIHZvdGUgYSBjb25zdWxzaGlwLCB0byB0aGlzIG1hbiBoZSBnYXZlIHRoZSBwb3dlciBvZiBjYXB0dXJpbmcgdGhlIGNpdHkgYW5kIHNheWluZyB0byBNZXRlbGx1cyB0aGF0IGhlIGNvbnNpZGVyZWQgaGltIGFuZCBhbGwgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zIGFzIGhpcyBwcmlzb25lcnMgb2Ygd2FyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPklmLCBob3dldmVyLCBpdCBpcyB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgZmFyLXJlYWNoaW5nIGRlY2lzaW9ucyBhbmQgYWN0cyBpbiB3YXIgdGhhdCBhcmUgdG8gZGV0ZXJtaW5lIHByZWVtaW5lbmNlIGluIHRoZSB2aXJ0dWVzIG9mIGxlYWRlcnNoaXAsIHRoZW4gdGhlIExhY2VkYWVtb25pYW4gbGVhdmVzIHRoZSBSb21hbiBmYXIgYmVoaW5kLiAgRm9yLCBpbiB0aGUgZmlyc3QgcGxhY2UsIGhlIGRpZCBub3QgZGVzZXJ0IG5vciBhYmFuZG9uIGhpcyBjaXR5LCB0aG91Z2ggdGhlIGVuZW15IGF0dGFja2VkIGl0IHdpdGggYW4gYXJteSBvZicgc2V2ZW50eSB0aG91c2FuZCBtZW4sIHdoaWxlIGhlIGhhZCBvbmx5IGEgZmV3IG1lbi1hdC1hcm1zLCBhbmQgdGhlc2UgaGFkIHJlY2VudGx5IGJlZW4gdmFucXVpc2hlZCBhdCBMZXVjdHJhOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBQb21wZXksIGFmdGVyIENhZXNhciBoYWQgb2NjdXBpZWQgYSBzaW5nbGUgY2l0eSBvZiBJdGFseSB3aXRoIG9ubHkgZmlmdHktdGhyZWUgaHVuZHJlZCBtZW4sIGh1cnJpZWQgYXdheSBmcm9tIFJvbWUgaW4gYSBwYW5pYywgZWl0aGVyIHlpZWxkaW5nIGlnbm9ibHkgdG8gc28gZmV3LCBvciBjb25qZWN0dXJpbmcgZmFsc2VseSB0aGF0IHRoZXJlIHdlcmUgbW9yZTsgYW5kIGFmdGVyIGNvbnZleWluZyBhd2F5IHdpdGggaGltIGhpcyBvd24gd2lmZSBhbmQgY2hpbGRyZW4sIGhlIGxlZnQgdGhvc2Ugb2YgdGhlIG90aGVyIGNpdGl6ZW5zIGRlZmVuY2VsZXNzIGFuZCB0b29rIHRvIGZsaWdodCwgd2hlbiBoZSBvdWdodCBlaXRoZXIgdG8gaGF2ZSBjb25xdWVyZWQgaW4gYSBiYXR0bGUgZm9yIGhpcyBjb3VudHJ5LCBvciB0byBoYXZlIGFjY2VwdGVkIHRlcm1zIGZyb20gaGlzIGNvbnF1ZXJvciwgd2hvIHdhcyBhIGZlbGxvdy1jaXRpemVuIGFuZCBhIHJlbGF0aW9uIGJ5IG1hcnJpYWdlLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBpdCB3YXMsIHRvIHRoZSBtYW4gZm9yIHdob20gaGUgdGhvdWdodCBpdCBhIHRlcnJpYmxlIHRoaW5nIHRvIHByb2xvbmcgYSB0ZXJtIG9mIG1pbGl0YXJ5IGNvbW1hbmQgb3Igdm90ZSBhIGNvbnN1bHNoaXAsIHRvIHRoaXMgbWFuIGhlIGdhdmUgdGhlIHBvd2VyIG9mIGNhcHR1cmluZyB0aGUgY2l0eSBhbmQgc2F5aW5nIHRvIE1ldGVsbHVzIHRoYXQgaGUgY29uc2lkZXJlZCBoaW0gYW5kIGFsbCB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgYXMgaGlzIHByaXNvbmVycyBvZiB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIHRoZSBjaGllZiB0YXNrIG9mIGEgZ29vZCBnZW5lcmFsIGlzIHRvIGZvcmNlIGhpcyBlbmVtaWVzIHRvIGdpdmUgYmF0dGxlIHdoZW4gaGUgaXMgc3VwZXJpb3IgdG8gdGhlbSwgYnV0IG5vdCB0byBiZSBmb3JjZWQgaGltc2VsZiB0byBkbyB0aGlzIHdoZW4gaGlzIGZvcmNlcyBhcmUgaW5mZXJpb3IsIGFuZCBieSBzbyBkb2luZyBBZ2VzaWxhw7xzIGFsd2F5cyBrZXB0IGhpbXNlbGYgdW5jb25xdWVyZWQ7IHdoZXJlYXMgaW4gUG9tcGV5J3MgY2FzZSwgQ2Flc2FyIGVzY2FwZWQgaW5qdXJ5IGF0IGhpcyBoYW5kcyB3aGVuIGhlIHdhcyBpbmZlcmlvciB0byBoaW0sIGFuZCBmb3JjZWQgaGltIHRvIHN0YWtlIHRoZSB3aG9sZSBpc3N1ZSBvbiBhIGJhdHRsZSB3aXRoIGhpcyBsYW5kIGZvcmNlcywgd2hlcmVpbiBDYWVzYXIgd2FzIHN1cGVyaW9yLCB0aHVzIGRlZmVhdGluZyBoaW0gYW5kIGJlY29taW5nIGF0IG9uY2UgbWFzdGVyIG9mIHRyZWFzdXJlcywgcHJvLSB2aXNpb25zLCBhbmQgdGhlIHNlYSzigJRhZHZhbnRhZ2VzIHdoaWNoIHdvdWxkIGhhdmUgYnJvdWdodCBoaXMgcnVpbiB3aXRob3V0IGEgYmF0dGxlIGhhZCB0aGV5IHJlbWFpbmVkIGluIGhpcyBlbmVteSdzIGNvbnRyb2wuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdCB3aGljaCBpcyB1cmdlZCBhcyBhbiBleGN1c2UgZm9yIHRoaXMgZmFpbHVyZSBpcyByZWFsbHkgYSB2ZXJ5IHNldmVyZSBhY2N1c2F0aW9uIGFnYWluc3QgYSBnZW5lcmFsIGxpa2UgaGltLiAgRm9yIHRoYXQgYSB5b3V0aGZ1bCBjb21tYW5kZXIgc2hvdWxkIGJlIGZyaWdodGVuZWQgYnkgdHVtdWx0cyBhbmQgb3V0Y3JpZXMgaW50byBjb3dhcmRseSB3ZWFrbmVzcyBhbmQgYWJhbmRvbiBoaXMgc2FmZXN0IHBsYW5zLCBpcyBuYXR1cmFsIGFuZCBwYXJkb25hYmxlOyBidXQgdGhhdCBQb21wZXkgdGhlIEdyZWF0LCB3aG9zZSBjYW1wIHRoZSBSb21hbnMgY2FsbGVkIHRoZWlyIGNvdW50cnksIGFuZCBoaXMgdGVudCB0aGVpciBzZW5hdGUsIHdoaWxlIHRoZXkgZ2F2ZSB0aGUgbmFtZSBvZiB0cmFpdG9ycyBhbmQgcmViZWxzIHRvIHRoZSBjb25zdWxzIGFuZCBwcmFldG9ycyBhbmQgb3RoZXIgbWFnaXN0cmF0ZXMgYXQgUm9tZSzigJR0aGF0IGhlIHdobyB3YXMga25vd24gdG8gYmUgdW5kZXIgbm8gb25lJ3MgY29tbWFuZCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHRvIGhhdmUgc2VydmVkIGFsbCBoaXMgY2FtcGFpZ25zIG1vc3Qgc3VjY2Vzc2Z1bGx5IGFzIGltcGVyYXRvciwgc2hvdWxkIGJlIGFsbW9zdCBmb3JjZWQgYnkgdGhlIHNjb2ZmcyBvZiBGYXZvbml1cyBhbmQgRG9taXRpdXMsIGFuZCBieSB0aGUgZmVhciBvZiBiZWluZyBjYWxsZWQgQWdhbWVtbm9uLCB0byBwdXQgdG8gdGhlIGhhemFyZCB0aGUgc3VwcmVtYWN5IGFuZCBmcmVlZG9tIG9mIFJvbWUsIHdobyBjb3VsZCB0b2xlcmF0ZSB0aGlzPyAgSWYgaGUgaGFkIHJlZ2FyZCBvbmx5IGZvciB0aGUgaW1tZWRpYXRlIGluZmFteSBpbnZvbHZlZCwgdGhlbiBoZSBvdWdodCB0byBoYXZlIG1hZGUgYSBzdGFuZCBhdCB0aGUgZmlyc3QgYW5kIHRvIGhhdmUgZm91Z2h0IHRvIGl0cyBmaW5pc2ggdGhlIGZpZ2h0IGZvciBSb21lLCBpbnN0ZWFkIG9mIGNhbGxpbmcgdGhlIGZsaWdodCB3aGljaCBoZSB0aGVuIG1hZGUgYSBUaGVtaXN0b2NsZWFuIHN0cmF0YWdlbSBhbmQgYWZ0ZXJ3YXJkcyBjb3VudGluZyBpdCBhIGRpc2dyYWNlZnVsIHRoaW5nIHRvIGRlbGF5IGJlZm9yZSBmaWdodGluZyBpbiBUaGVzc2FseS4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdXJlbHkgSGVhdmVuIGhhZCBub3QgYXBwb2ludGVkIHRoYXQgUGhhcnNhbGlhbiBwbGFpbiB0byBiZSB0aGUgc3RhZGl1bSBhbmQgdGhlYXRyZSBvZiB0aGVpciBzdHJ1Z2dsZSBmb3IgdGhlIHN1cHJlbWFjeSwgbm9yIHdhcyBoZSBzdW1tb25lZCBieSB2b2ljZSBvZiBoZXJhbGQgdG8gZ28gZG93biB0aGl0aGVyIGFuZCBkbyBiYXR0bGUgb3IgbGVhdmUgdG8gYW5vdGhlciB0aGUgdmljdG9yJ3Mgd3JlYXRoOyBuYXksIHRoZXJlIHdlcmUgbWFueSBwbGFpbnMsIHRlbiB0aG91c2FuZCBjaXRpZXMsIGFuZCBhIHdob2xlIGVhcnRoIHdoaWNoIGhpcyBncmVhdCByZXNvdXJjZXMgYnkgc2VhICBhZmZvcmRlZCAgaGltIGhhZCBoZSB3aXNoZWQgdG8gaW1pdGF0ZSBNYXhpbXVzLCBvciBNYXJpdXMsIG9yIEx1Y3VsbHVzLCBvciBBZ2VzaWxhw7xzIGhpbXNlbGYsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndobyB3aXRoc3Rvb2Qgbm8gbGVzcyB0dW11bHRzIGluIFNwYXJ0YSB3aGVuIGl0cyBjaXRpemVucyB3aXNoZWQgdG8gZmlnaHQgd2l0aCB0aGUgVGhlYmFucyBpbiBkZWZlbmNlIG9mIHRoZWlyIGxhbmQsIGFuZCBpbiBFZ3lwdCBlbmR1cmVkIG1hbnkgY2FsdW1uaWVzIGFuZCBhY2N1c2F0aW9ucyBhbmQgc3VzcGljaW9ucyBvbiB0aGUgcGFydCBvZiB0aGUga2luZyB3aGVuIGhlIHVyZ2VkIGhpbSB0byBrZWVwIHF1aWV0OyBidXQgaGUgZm9sbG93ZWQgaGlzIG93biBiZXN0IGNvdW5zZWxzIGFzIGhlIHdpc2hlZCwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG5vdCBvbmx5IHNhdmVkIHRoZSBFZ3lwdGlhbnMgYWdhaW5zdCB0aGVpciB3aWxscywgYW5kIGJ5IGhpcyBzb2xlIGVmZm9ydHMgZXZlciBrZXB0IFNwYXJ0YSB1cHJpZ2h0IGluIHRoZSBtaWRzdCBvZiBzbyBncmVhdCBhIGNvbnZ1bHNpb24sIGJ1dCBhY3R1YWxseSBzZXQgdXAgYSB0cm9waHkgaW4gdGhlIGNpdHkgZm9yIGEgdmljdG9yeSBvdmVyIHRoZSBUaGViYW5zLCB3aGljaCB2aWN0b3J5IGhlIHB1dCBoaXMgY291bnRyeW1lbiBpbiB0aGUgd2F5IG9mIHdpbm5pbmcgbGF0ZXIsIGJ5IGtlZXBpbmcgdGhlbSB0aGVuIGZyb20gdGhlIGRlc3RydWN0aW9uIGludG8gd2hpY2ggdGhleSB3b3VsZCBoYXZlIGZvcmNlZCB0aGVpciB3YXkuICAgV2hlcmVmb3JlIEFnZXNpbGHDvHMgd2FzIGFmdGVyd2FyZHMgY29tbWVuZGVkIGJ5IHRob3NlIHdob20gaGUgaGFkIGZvcmNlZCB0byB0YWtlIHRoZSBwYXRoIG9mIHNhZmV0eSwgd2hpbGUgUG9tcGV5LCB3aG9tIG90aGVycyBoYWQgbGVkIGludG8gZXJyb3IsIGZvdW5kIGFjY3VzZXJzIGluIHRoZSB2ZXJ5IG9uZXMgdG8gd2hvbSBoZSBoYWQgeWllbGRlZC4gIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgc29tZSBzYXkgdGhhdCBoZSB3YXMgZGVjZWl2ZWQgYnkgaGlzIGZhdGhlci1pbi1sYXcgU2NpcGlvLCB3aG8gd2lzaGVkIHRvIGFwcHJvcHJpYXRlIHRvIGhpcyBvd24gdXNlcyB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSB0cmVhc3VyZSB3aGljaCBoZSBoYWQgYnJvdWdodCBmcm9tIEFzaWEsIGFuZCB0aGVyZWZvcmUgaGlkIGl0IGF3YXksIGFuZCB0aGVuIGhhc3RlbmVkIG9uIHRoZSBiYXR0bGUsIG9uIHRoZSBwbGVhIHRoYXQgdGhlcmUgd2FzIG5vIGxvbmdlciBhbnkgbW9uZXkuIEJ1dCBldmVuIGlmIHRoaXMgd2VyZSB0cnVlLCBhIGdlbmVyYWwgb3VnaHQgbm90IHRvIHN1ZmZlciBoaW1zZWxmIHRvIGJlIHNvIGVhc2lseSBkZWNlaXZlZCwgbm9yIGFmdGVyd2FyZHMgdG8gcHV0IGhpcyBncmVhdGVzdCBpbnRlcmVzdHMgYXQgaGF6YXJkLiAgIEluIHRoZXNlIG1hdHRlcnMsIHRoZW4sIHN1Y2ggaXMgdGhlIHdheSBpbiB3aGljaCB3ZSByZWdhcmQgZWFjaCBvZiB0aGUgbWVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgdGhlIGNoaWVmIHRhc2sgb2YgYSBnb29kIGdlbmVyYWwgaXMgdG8gZm9yY2UgaGlzIGVuZW1pZXMgdG8gZ2l2ZSBiYXR0bGUgd2hlbiBoZSBpcyBzdXBlcmlvciB0byB0aGVtLCBidXQgbm90IHRvIGJlIGZvcmNlZCBoaW1zZWxmIHRvIGRvIHRoaXMgd2hlbiBoaXMgZm9yY2VzIGFyZSBpbmZlcmlvciwgYW5kIGJ5IHNvIGRvaW5nIEFnZXNpbGHDvHMgYWx3YXlzIGtlcHQgaGltc2VsZiB1bmNvbnF1ZXJlZDsgd2hlcmVhcyBpbiBQb21wZXkncyBjYXNlLCBDYWVzYXIgZXNjYXBlZCBpbmp1cnkgYXQgaGlzIGhhbmRzIHdoZW4gaGUgd2FzIGluZmVyaW9yIHRvIGhpbSwgYW5kIGZvcmNlZCBoaW0gdG8gc3Rha2UgdGhlIHdob2xlIGlzc3VlIG9uIGEgYmF0dGxlIHdpdGggaGlzIGxhbmQgZm9yY2VzLCB3aGVyZWluIENhZXNhciB3YXMgc3VwZXJpb3IsIHRodXMgZGVmZWF0aW5nIGhpbSBhbmQgYmVjb21pbmcgYXQgb25jZSBtYXN0ZXIgb2YgdHJlYXN1cmVzLCBwcm8tIHZpc2lvbnMsIGFuZCB0aGUgc2VhLOKAlGFkdmFudGFnZXMgd2hpY2ggd291bGQgaGF2ZSBicm91Z2h0IGhpcyBydWluIHdpdGhvdXQgYSBiYXR0bGUgaGFkIHRoZXkgcmVtYWluZWQgaW4gaGlzIGVuZW15J3MgY29udHJvbC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGF0IHdoaWNoIGlzIHVyZ2VkIGFzIGFuIGV4Y3VzZSBmb3IgdGhpcyBmYWlsdXJlIGlzIHJlYWxseSBhIHZlcnkgc2V2ZXJlIGFjY3VzYXRpb24gYWdhaW5zdCBhIGdlbmVyYWwgbGlrZSBoaW0uICBGb3IgdGhhdCBhIHlvdXRoZnVsIGNvbW1hbmRlciBzaG91bGQgYmUgZnJpZ2h0ZW5lZCBieSB0dW11bHRzIGFuZCBvdXRjcmllcyBpbnRvIGNvd2FyZGx5IHdlYWtuZXNzIGFuZCBhYmFuZG9uIGhpcyBzYWZlc3QgcGxhbnMsIGlzIG5hdHVyYWwgYW5kIHBhcmRvbmFibGU7IGJ1dCB0aGF0IFBvbXBleSB0aGUgR3JlYXQsIHdob3NlIGNhbXAgdGhlIFJvbWFucyBjYWxsZWQgdGhlaXIgY291bnRyeSwgYW5kIGhpcyB0ZW50IHRoZWlyIHNlbmF0ZSwgd2hpbGUgdGhleSBnYXZlIHRoZSBuYW1lIG9mIHRyYWl0b3JzIGFuZCByZWJlbHMgdG8gdGhlIGNvbnN1bHMgYW5kIHByYWV0b3JzIGFuZCBvdGhlciBtYWdpc3RyYXRlcyBhdCBSb21lLOKAlHRoYXQgaGUgd2hvIHdhcyBrbm93biB0byBiZSB1bmRlciBubyBvbmUncyBjb21tYW5kLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0byBoYXZlIHNlcnZlZCBhbGwgaGlzIGNhbXBhaWducyBtb3N0IHN1Y2Nlc3NmdWxseSBhcyBpbXBlcmF0b3IsIHNob3VsZCBiZSBhbG1vc3QgZm9yY2VkIGJ5IHRoZSBzY29mZnMgb2YgRmF2b25pdXMgYW5kIERvbWl0aXVzLCBhbmQgYnkgdGhlIGZlYXIgb2YgYmVpbmcgY2FsbGVkIEFnYW1lbW5vbiwgdG8gcHV0IHRvIHRoZSBoYXphcmQgdGhlIHN1cHJlbWFjeSBhbmQgZnJlZWRvbSBvZiBSb21lLCB3aG8gY291bGQgdG9sZXJhdGUgdGhpcz8gIElmIGhlIGhhZCByZWdhcmQgb25seSBmb3IgdGhlIGltbWVkaWF0ZSBpbmZhbXkgaW52b2x2ZWQsIHRoZW4gaGUgb3VnaHQgdG8gaGF2ZSBtYWRlIGEgc3RhbmQgYXQgdGhlIGZpcnN0IGFuZCB0byBoYXZlIGZvdWdodCB0byBpdHMgZmluaXNoIHRoZSBmaWdodCBmb3IgUm9tZSwgaW5zdGVhZCBvZiBjYWxsaW5nIHRoZSBmbGlnaHQgd2hpY2ggaGUgdGhlbiBtYWRlIGEgVGhlbWlzdG9jbGVhbiBzdHJhdGFnZW0gYW5kIGFmdGVyd2FyZHMgY291bnRpbmcgaXQgYSBkaXNncmFjZWZ1bCB0aGluZyB0byBkZWxheSBiZWZvcmUgZmlnaHRpbmcgaW4gVGhlc3NhbHkuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdXJlbHkgSGVhdmVuIGhhZCBub3QgYXBwb2ludGVkIHRoYXQgUGhhcnNhbGlhbiBwbGFpbiB0byBiZSB0aGUgc3RhZGl1bSBhbmQgdGhlYXRyZSBvZiB0aGVpciBzdHJ1Z2dsZSBmb3IgdGhlIHN1cHJlbWFjeSwgbm9yIHdhcyBoZSBzdW1tb25lZCBieSB2b2ljZSBvZiBoZXJhbGQgdG8gZ28gZG93biB0aGl0aGVyIGFuZCBkbyBiYXR0bGUgb3IgbGVhdmUgdG8gYW5vdGhlciB0aGUgdmljdG9yJ3Mgd3JlYXRoOyBuYXksIHRoZXJlIHdlcmUgbWFueSBwbGFpbnMsIHRlbiB0aG91c2FuZCBjaXRpZXMsIGFuZCBhIHdob2xlIGVhcnRoIHdoaWNoIGhpcyBncmVhdCByZXNvdXJjZXMgYnkgc2VhICBhZmZvcmRlZCAgaGltIGhhZCBoZSB3aXNoZWQgdG8gaW1pdGF0ZSBNYXhpbXVzLCBvciBNYXJpdXMsIG9yIEx1Y3VsbHVzLCBvciBBZ2VzaWxhw7xzIGhpbXNlbGYsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPndobyB3aXRoc3Rvb2Qgbm8gbGVzcyB0dW11bHRzIGluIFNwYXJ0YSB3aGVuIGl0cyBjaXRpemVucyB3aXNoZWQgdG8gZmlnaHQgd2l0aCB0aGUgVGhlYmFucyBpbiBkZWZlbmNlIG9mIHRoZWlyIGxhbmQsIGFuZCBpbiBFZ3lwdCBlbmR1cmVkIG1hbnkgY2FsdW1uaWVzIGFuZCBhY2N1c2F0aW9ucyBhbmQgc3VzcGljaW9ucyBvbiB0aGUgcGFydCBvZiB0aGUga2luZyB3aGVuIGhlIHVyZ2VkIGhpbSB0byBrZWVwIHF1aWV0OyBidXQgaGUgZm9sbG93ZWQgaGlzIG93biBiZXN0IGNvdW5zZWxzIGFzIGhlIHdpc2hlZCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3Qgb25seSBzYXZlZCB0aGUgRWd5cHRpYW5zIGFnYWluc3QgdGhlaXIgd2lsbHMsIGFuZCBieSBoaXMgc29sZSBlZmZvcnRzIGV2ZXIga2VwdCBTcGFydGEgdXByaWdodCBpbiB0aGUgbWlkc3Qgb2Ygc28gZ3JlYXQgYSBjb252dWxzaW9uLCBidXQgYWN0dWFsbHkgc2V0IHVwIGEgdHJvcGh5IGluIHRoZSBjaXR5IGZvciBhIHZpY3Rvcnkgb3ZlciB0aGUgVGhlYmFucywgd2hpY2ggdmljdG9yeSBoZSBwdXQgaGlzIGNvdW50cnltZW4gaW4gdGhlIHdheSBvZiB3aW5uaW5nIGxhdGVyLCBieSBrZWVwaW5nIHRoZW0gdGhlbiBmcm9tIHRoZSBkZXN0cnVjdGlvbiBpbnRvIHdoaWNoIHRoZXkgd291bGQgaGF2ZSBmb3JjZWQgdGhlaXIgd2F5LiAgIFdoZXJlZm9yZSBBZ2VzaWxhw7xzIHdhcyBhZnRlcndhcmRzIGNvbW1lbmRlZCBieSB0aG9zZSB3aG9tIGhlIGhhZCBmb3JjZWQgdG8gdGFrZSB0aGUgcGF0aCBvZiBzYWZldHksIHdoaWxlIFBvbXBleSwgd2hvbSBvdGhlcnMgaGFkIGxlZCBpbnRvIGVycm9yLCBmb3VuZCBhY2N1c2VycyBpbiB0aGUgdmVyeSBvbmVzIHRvIHdob20gaGUgaGFkIHlpZWxkZWQuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgc29tZSBzYXkgdGhhdCBoZSB3YXMgZGVjZWl2ZWQgYnkgaGlzIGZhdGhlci1pbi1sYXcgU2NpcGlvLCB3aG8gd2lzaGVkIHRvIGFwcHJvcHJpYXRlIHRvIGhpcyBvd24gdXNlcyB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSB0cmVhc3VyZSB3aGljaCBoZSBoYWQgYnJvdWdodCBmcm9tIEFzaWEsIGFuZCB0aGVyZWZvcmUgaGlkIGl0IGF3YXksIGFuZCB0aGVuIGhhc3RlbmVkIG9uIHRoZSBiYXR0bGUsIG9uIHRoZSBwbGVhIHRoYXQgdGhlcmUgd2FzIG5vIGxvbmdlciBhbnkgbW9uZXkuIEJ1dCBldmVuIGlmIHRoaXMgd2VyZSB0cnVlLCBhIGdlbmVyYWwgb3VnaHQgbm90IHRvIHN1ZmZlciBoaW1zZWxmIHRvIGJlIHNvIGVhc2lseSBkZWNlaXZlZCwgbm9yIGFmdGVyd2FyZHMgdG8gcHV0IGhpcyBncmVhdGVzdCBpbnRlcmVzdHMgYXQgaGF6YXJkLiAgIEluIHRoZXNlIG1hdHRlcnMsIHRoZW4sIHN1Y2ggaXMgdGhlIHdheSBpbiB3aGljaCB3ZSByZWdhcmQgZWFjaCBvZiB0aGUgbWVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyB0byB0aGVpciB2b3lhZ2VzIHRvIEVneXB0LCBvbmUgd2VudCB0aGl0aGVyIG9mIG5lY2Vzc2l0eSBhbmQgaW4gZmxpZ2h0OyB0aGUgb3RoZXIgZm9yIG5vIGhvbm91cmFibGUgcmVhc29uLCBub3Igb2YgbmVjZXNzaXR5LCBidXQgZm9yIG1vbmV5LCB0aGF0IHdoYXQgaGUgZ290IGZvciBzZXJ2aW5nIHRoZSBCYXJiYXJpYW5zIGFzIGNvbW1hbmRlciBtaWdodCBlbmFibGUgaGltIHRvIG1ha2Ugd2FyIHVwb24gdGhlIEdyZWVrcy4gIFRoZW4gYWdhaW4sIGFzIHRvIHRoZSBjaGFyZ2VzIHdoaWNoIHdlIGJyaW5nIGFnYWluc3QgdGhlIEVneXB0aWFucyBmb3IgdGhlaXIgdHJlYXRtZW50IG9mIFBvbXBleSwgdGhlc2UgdGhlIEVneXB0aWFucyBsYXkgYXQgdGhlIGRvb3Igb2YgQWdlc2lsYcO8cyBmb3IgaGlzIHRyZWF0bWVudCBvZiB0aGVtLiAgRm9yIFBvbXBleSB0cnVzdGVkIHRoZW0gYW5kIHdhcyB3cm9uZ2VkIGJ5IHRoZW07IHdoaWxlIEFnZXNpbGHDvHMgd2FzIHRydXN0ZWQgYnkgdGhlbSBhbmQgeWV0IGZvcnNvb2sgdGhlbSBhbmQgd2VudCBvdmVyIHRvIHRoZSBlbmVtaWVzIG9mIHRob3NlIHdob20gaGUgaGFkIHNhaWxlZCB0byBhc3Npc3QuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
