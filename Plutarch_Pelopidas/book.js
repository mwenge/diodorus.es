var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJldXBvbiB0aGUga2luZyB0b29rIGNvbXBhc3Npb24gb24gaGltIGFuZCBvcmRlcmVkIGhpcyBwaHlzaWNpYW5zLCBpZiB0aGVyZSB3YXMgYW55IGhlbHAgZm9yIGhpbSwgdG8gZW1wbG95IHRoZWlyIHV0bW9zdCBza2lsbCBhbmQgY2FyZS4gVGh1cyB0aGUgbWFuIHdhcyBjdXJlZDsgYnV0IHRoZW4gdGhlIGdvb2QgZmVsbG93IGNlYXNlZCB0byBjb3VydCBkYW5nZXIgYW5kIHdhcyBubyBsb25nZXIgYSBmdXJpb3VzIGZpZ2h0ZXIsIHNvIHRoYXQgZXZlbiBBbnRpZ29udXMgcmVidWtlZCBoaW0gYW5kIGV4cHJlc3NlZCBoaXMgd29uZGVyIGF0IHRoZSBjaGFuZ2UuICAgIFRoZSBtYW4sIGhvd2V2ZXIsIG1hZGUgbm8gc2VjcmV0IG9mIHRoZSByZWFzb24sIGJ1dCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBpdCBpcyB0aG91IHdobyBoYXN0IG1hZGUgbWUgbGVzcyBkYXJpbmcsIGJ5IGZyZWVpbmcgbWUgZnJvbSB0aG9zZSBpbGxzIHdoaWNoIG1hZGUgbWUgc2V0IGxpdHRsZSB2YWx1ZSBvbiBsaWZlLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZXNlIGdyb3VuZHMsIHRvbywgYXMgaXQgd291bGQgc2VlbSwgYSBtYW4gb2YgU3liYXJpcyBzYWlkIGl0IHdhcyBubyBncmVhdCB0aGluZyBmb3IgdGhlIFNwYXJ0YW5zIHRvIHNlZWsgZGVhdGggaW4gdGhlIHdhcnMgaW4gb3JkZXIgdG8gZXNjYXBlIHNvIG1hbnkgaGFyZHNoaXBzIGFuZCBzdWNoIGEgd3JldGNoZWQgbGlmZSBhcyB0aGVpcnMuICBCdXQgdG8gdGhlIFN5YmFyaXRlcywgd2hvIHdlcmUgZGlzc29sdmVkIGluIGVmZmVtaW5hdGUgbHV4dXJ5LCBtZW4gd2hvbSBhbWJpdGlvbiBhbmQgYW4gZWFnZXIgcXVlc3Qgb2YgaG9ub3VyIGxlZCB0byBoYXZlIG5vIGZlYXIgb2YgZGVhdGggbmF0dXJhbGx5IHNlZW1lZCB0byBoYXRlIGxpZmU7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgdGhlIHZpcnR1ZXMgb2YgdGhlIExhY2VkYWVtb25pYW5zIGdhdmUgdGhlbSBoYXBwaW5lc3MgYWxpa2UgaW4gbGl2aW5nIG9yIGR5aW5nLCBhcyB0aGUgZm9sbG93aW5nIGVsZWd5IHRlc3RpZmllczogIFRoZXNlLCBpdCBzYXlzLCBkaWVkLCAKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPm5vdCBkZWVtaW5nIGVpdGhlciBsaWZlIG9yIGRlYXRoIGhvbm91cmFibGUgaW4gdGhlbXNlbHZlcywgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBvbmx5IHRoZSBhY2NvbXBsaXNobWVudCBvZiB0aGVtIGJvdGggd2l0aCBob25vdXIuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJRm9yIG5laXRoZXIgaXMgYSBtYW4gdG8gYmUgYmxhbWVkIGZvciBzaHVubmluZyBkZWF0aCwgaWYgaGUgZG9lcyBub3QgY2xpbmcgdG8gbGlmZSBkaXNncmFjZWZ1bGx5LCBub3IgdG8gYmUgcHJhaXNlZCBmb3IgYm9sZGx5IG1lZXRpbmcgZGVhdGgsIGlmIGhlIGRvZXMgdGhpcyB3aXRoIGNvbnRlbXB0IG9mIGxpZmUuIAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5ub3QgZGVlbWluZyBlaXRoZXIgbGlmZSBvciBkZWF0aCBob25vdXJhYmxlIGluIHRoZW1zZWx2ZXMsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgb25seSB0aGUgYWNjb21wbGlzaG1lbnQgb2YgdGhlbSBib3RoIHdpdGggaG9ub3VyLjwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiBIb21lciBhbHdheXMgYnJpbmdzIGhpcyBib2xkZXN0IGFuZCBtb3N0IHZhbGlhbnQgaGVyb2VzIGludG8gYmF0dGxlIHdlbGwgYXJtZWQgYW5kIGVxdWlwcGVkOyBhbmQgdGhlIEdyZWVrIGxhd2dpdmVycyBwdW5pc2ggaGltIHdobyBjYXN0cyBhd2F5IGhpcyBzaGllbGQsIG5vdCBoaW0gd2hvIHRocm93cyBkb3duIGhpcyBzd29yZCBvciBzcGVhciwgdGh1cyB0ZWFjaGluZyB0aGF0IGhpcyBvd24gZGVmZW5jZSBmcm9tIGhhcm0sIHJhdGhlciB0aGFuIHRoZSBpbmZsaWN0aW9uIG9mIGhhcm0gdXBvbiB0aGUgZW5lbXksIHNob3VsZCBiZSBldmVyeSBtYW4ncyBmaXJzdCBjYXJlLCBhbmQgcGFydGljdWxhcmx5IGlmIGhlIGdvdmVybnMgYSBjaXR5IG9yIGNvbW1hbmRzIGFuIGFybXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmLCBhcyBJcGhpY3JhdGVzIGFuYWx5emVkIHRoZSBtYXR0ZXIsIHRoZSBsaWdodC1hcm1lZCB0cm9vcHMgYXJlIGxpa2UgdGhlIGhhbmRzLCB0aGUgY2F2YWxyeSBsaWtlIHRoZSBmZWV0LCB0aGUgbGluZSBvZiBtZW4tYXQtYXJtcyBpdHNlbGYgbGlrZSBjaGVzdCBhbmQgYnJlYXN0cGxhdGUsIGFuZCB0aGUgZ2VuZXJhbCBsaWtlIHRoZSBoZWFkLCB0aGVuIGhlLCBpbiB0YWtpbmcgdW5kdWUgcmlza3MgYW5kIGJlaW5nIG92ZXIgYm9sZCwgd291bGQgc2VlbSB0byBuZWdsZWN0IG5vdCBoaW1zZWxmLCBidXQgYWxsLCBpbmFzbXVjaCBhcyB0aGVpciBzYWZldHkgZGVwZW5kcyBvbiBoaW0sIGFuZCB0aGVpciBkZXN0cnVjdGlvbiB0b28uICBUaGVyZWZvcmUgQ2FsbGljcmF0aWRhcywgYWx0aG91Z2ggb3RoZXJ3aXNlIGhlIHdhcyBhIGdyZWF0IG1hbiwgZGlkIG5vdCBtYWtlIGEgZ29vZCBhbnN3ZXIgdG8gdGhlIHNlZXIgd2hvIGJlZ2dlZCBoaW0gdG8gYmUgY2FyZWZ1bCwgc2luY2UgdGhlIHNhY3JpZmljaWFsIG9tZW5zIGZvcmV0b2xkIGhpcyBkZWF0aDsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TcGFydGEsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvZXMgbm90IGRlcGVuZCB1cG9uIG9uZSBtYW4uPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGZpZ2h0aW5nLCBvciBzYWlsaW5nLCBvciBtYXJjaGluZyB1bmRlciBvcmRlcnMsIENhbGxpY3JhdGlkYXMgd2FzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b25lIG1hbjwvcT47IGJ1dCBhcyBnZW5lcmFsLCBoZSBjb21wcmlzZWQgaW4gaGltc2VsZiB0aGUgc3RyZW5ndGggYW5kIHBvd2VyIG9mIGFsbCwgc28gdGhhdCBoZSB3YXMgbm90IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b25lIG1hbiw8L3E+IHdoZW4gc3VjaCBudW1iZXJzIHBlcmlzaGVkIHdpdGggaGltLiAgQmV0dGVyIHdhcyB0aGUgc3BlZWNoIG9mIG9sZCBBbnRpZ29udXMgYXMgaGUgd2FzIGFib3V0IHRvIGZpZ2h0IGEgc2VhLWZpZ2h0IG9mZiBBbmRyb3MsIGFuZCBzb21lb25lIHRvbGQgaGltIHRoYXQgdGhlIGVuZW15J3Mgc2hpcHMgd2VyZSBmYXIgbW9yZSBudW1lcm91cyB0aGFuIGhpczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hhdCBvZiBteXNlbGYsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhvdyBtYW55IHNoaXBzIHdpbHQgdGhvdSBjb3VudCBtZT88L3E+IGltcGx5aW5nIHRoYXQgdGhlIHdvcnRoIG9mIHRoZSBjb21tYW5kZXIgaXMgYSBncmVhdCB0aGluZywgYXMgaXQgaXMgaW4gZmFjdCwgd2hlbiBhbGxpZWQgd2l0aCBleHBlcmllbmNlIGFuZCB2YWxvdXIsIGFuZCBoaXMgZmlyc3QgZHV0eSBpcyB0byBzYXZlIHRoZSBvbmUgd2hvIHNhdmVzIGV2ZXJ5dGhpbmcgZWxzZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIFRpbW90aGV1cyB3YXMgcmlnaHQgd2hlbiBDaGFyZXMgd2FzIG9uY2Ugc2hvd2luZyB0aGUgQXRoZW5pYW5zIHNvbWUgd291bmRzIGhlIGhhZCByZWNlaXZlZCwgYW5kIGhpcyBzaGllbGQgcGllcmNlZCBieSBhIHNwZWFyLCBpbiBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEksIGhvdyBncmVhdGx5IGFzaGFtZWQgSSB3YXMsIGF0IHRoZSBzaWVnZSBvZiBTYW1vcywgYmVjYXVzZSBhIGJvbHQgZmVsbCBuZWFyIG1lOyBJIHRob3VnaHQgSSB3YXMgYmVoYXZpbmcgbW9yZSBsaWtlIGFuIGltcGV0dW91cyB5b3V0aCB0aGFuIGxpa2UgYSBnZW5lcmFsIGluIGNvbW1hbmQgb2Ygc28gbGFyZ2UgYSBmb3JjZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZXJlIHRoZSB3aG9sZSBpc3N1ZSBpcyBncmVhdGx5IGZ1cnRoZXJlZCBieSB0aGUgZ2VuZXJhbCdzIGV4cG9zaW5nIGhpbXNlbGYgdG8gZGFuZ2VyLCB0aGVyZSBoZSBtdXN0IGVtcGxveSBoYW5kIGFuZCBib2R5IHVuc3BhcmluZ2x5LCBpZ25vcmluZyB0aG9zZSB3aG8gc2F5IHRoYXQgYSBnb29kIGdlbmVyYWwgc2hvdWxkIGRpZSwgaWYgbm90IG9mIG9sZCBhZ2UsIGF0IGxlYXN0IGluIG9sZCBhZ2U7IGJ1dCB3aGVyZSB0aGUgYWR2YW50YWdlIHRvIGJlIGRlcml2ZWQgZnJvbSBoaXMgc3VjY2VzcyBpcyBzbWFsbCwgYW5kIHRoZSB3aG9sZSBjYXVzZSBwZXJpc2hlcyB3aXRoIGhpbSBpZiBoZSBmYWlscywgbm8gb25lIGRlbWFuZHMgdGhhdCBhIGdlbmVyYWwgc2hvdWxkIHJpc2sgaGlzIGxpZmUgaW4gZmlnaHRpbmcgbGlrZSBhIGNvbW1vbiBzb2xkaWVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYsIGFzIElwaGljcmF0ZXMgYW5hbHl6ZWQgdGhlIG1hdHRlciwgdGhlIGxpZ2h0LWFybWVkIHRyb29wcyBhcmUgbGlrZSB0aGUgaGFuZHMsIHRoZSBjYXZhbHJ5IGxpa2UgdGhlIGZlZXQsIHRoZSBsaW5lIG9mIG1lbi1hdC1hcm1zIGl0c2VsZiBsaWtlIGNoZXN0IGFuZCBicmVhc3RwbGF0ZSwgYW5kIHRoZSBnZW5lcmFsIGxpa2UgdGhlIGhlYWQsIHRoZW4gaGUsIGluIHRha2luZyB1bmR1ZSByaXNrcyBhbmQgYmVpbmcgb3ZlciBib2xkLCB3b3VsZCBzZWVtIHRvIG5lZ2xlY3Qgbm90IGhpbXNlbGYsIGJ1dCBhbGwsIGluYXNtdWNoIGFzIHRoZWlyIHNhZmV0eSBkZXBlbmRzIG9uIGhpbSwgYW5kIHRoZWlyIGRlc3RydWN0aW9uIHRvby4gIFRoZXJlZm9yZSBDYWxsaWNyYXRpZGFzLCBhbHRob3VnaCBvdGhlcndpc2UgaGUgd2FzIGEgZ3JlYXQgbWFuLCBkaWQgbm90IG1ha2UgYSBnb29kIGFuc3dlciB0byB0aGUgc2VlciB3aG8gYmVnZ2VkIGhpbSB0byBiZSBjYXJlZnVsLCBzaW5jZSB0aGUgc2FjcmlmaWNpYWwgb21lbnMgZm9yZXRvbGQgaGlzIGRlYXRoOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3BhcnRhLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvZXMgbm90IGRlcGVuZCB1cG9uIG9uZSBtYW4uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGZpZ2h0aW5nLCBvciBzYWlsaW5nLCBvciBtYXJjaGluZyB1bmRlciBvcmRlcnMsIENhbGxpY3JhdGlkYXMgd2FzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vbmUgbWFuPC9xPjsgYnV0IGFzIGdlbmVyYWwsIGhlIGNvbXByaXNlZCBpbiBoaW1zZWxmIHRoZSBzdHJlbmd0aCBhbmQgcG93ZXIgb2YgYWxsLCBzbyB0aGF0IGhlIHdhcyBub3QgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm9uZSBtYW4sPC9xPiB3aGVuIHN1Y2ggbnVtYmVycyBwZXJpc2hlZCB3aXRoIGhpbS4gIEJldHRlciB3YXMgdGhlIHNwZWVjaCBvZiBvbGQgQW50aWdvbnVzIGFzIGhlIHdhcyBhYm91dCB0byBmaWdodCBhIHNlYS1maWdodCBvZmYgQW5kcm9zLCBhbmQgc29tZW9uZSB0b2xkIGhpbSB0aGF0IHRoZSBlbmVteSdzIHNoaXBzIHdlcmUgZmFyIG1vcmUgbnVtZXJvdXMgdGhhbiBoaXM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hhdCBvZiBteXNlbGYsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aG93IG1hbnkgc2hpcHMgd2lsdCB0aG91IGNvdW50IG1lPzwvcT4gaW1wbHlpbmcgdGhhdCB0aGUgd29ydGggb2YgdGhlIGNvbW1hbmRlciBpcyBhIGdyZWF0IHRoaW5nLCBhcyBpdCBpcyBpbiBmYWN0LCB3aGVuIGFsbGllZCB3aXRoIGV4cGVyaWVuY2UgYW5kIHZhbG91ciwgYW5kIGhpcyBmaXJzdCBkdXR5IGlzIHRvIHNhdmUgdGhlIG9uZSB3aG8gc2F2ZXMgZXZlcnl0aGluZyBlbHNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBUaW1vdGhldXMgd2FzIHJpZ2h0IHdoZW4gQ2hhcmVzIHdhcyBvbmNlIHNob3dpbmcgdGhlIEF0aGVuaWFucyBzb21lIHdvdW5kcyBoZSBoYWQgcmVjZWl2ZWQsIGFuZCBoaXMgc2hpZWxkIHBpZXJjZWQgYnkgYSBzcGVhciwgaW4gc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEksIGhvdyBncmVhdGx5IGFzaGFtZWQgSSB3YXMsIGF0IHRoZSBzaWVnZSBvZiBTYW1vcywgYmVjYXVzZSBhIGJvbHQgZmVsbCBuZWFyIG1lOyBJIHRob3VnaHQgSSB3YXMgYmVoYXZpbmcgbW9yZSBsaWtlIGFuIGltcGV0dW91cyB5b3V0aCB0aGFuIGxpa2UgYSBnZW5lcmFsIGluIGNvbW1hbmQgb2Ygc28gbGFyZ2UgYSBmb3JjZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVyZSB0aGUgd2hvbGUgaXNzdWUgaXMgZ3JlYXRseSBmdXJ0aGVyZWQgYnkgdGhlIGdlbmVyYWwncyBleHBvc2luZyBoaW1zZWxmIHRvIGRhbmdlciwgdGhlcmUgaGUgbXVzdCBlbXBsb3kgaGFuZCBhbmQgYm9keSB1bnNwYXJpbmdseSwgaWdub3JpbmcgdGhvc2Ugd2hvIHNheSB0aGF0IGEgZ29vZCBnZW5lcmFsIHNob3VsZCBkaWUsIGlmIG5vdCBvZiBvbGQgYWdlLCBhdCBsZWFzdCBpbiBvbGQgYWdlOyBidXQgd2hlcmUgdGhlIGFkdmFudGFnZSB0byBiZSBkZXJpdmVkIGZyb20gaGlzIHN1Y2Nlc3MgaXMgc21hbGwsIGFuZCB0aGUgd2hvbGUgY2F1c2UgcGVyaXNoZXMgd2l0aCBoaW0gaWYgaGUgZmFpbHMsIG5vIG9uZSBkZW1hbmRzIHRoYXQgYSBnZW5lcmFsIHNob3VsZCByaXNrIGhpcyBsaWZlIGluIGZpZ2h0aW5nIGxpa2UgYSBjb21tb24gc29sZGllci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBpcyB0aGUgcHJlZmFjZSBJIGhhdmUgdGhvdWdodCBmaXQgdG8gbWFrZSBmb3IgdGhlIExpdmVzIG9mIFBlbG9waWRhcyBhbmQgTWFyY2VsbHVzLCBncmVhdCBtZW4gd2hvIHJhc2hseSBmZWxsIGluIGJhdHRsZS4gIEZvciBib3RoIHdlcmUgbW9zdCB2YWxpYW50IGZpZ2h0ZXJzLCBkaWQgaG9ub3VyIHRvIHRoZWlyIGNvdW50cmllcyBpbiBtb3N0IGlsbHVzdHJpb3VzIGNhbXBhaWducywgYW5kIHdoYXQgaXMgbW9yZSwgaGFkIHRoZSBtb3N0IGZvcm1pZGFibGUgYWR2ZXJzYXJpZXMsIG9uZSBiZWluZyB0aGUgZmlyc3QsIGFzIHdlIGFyZSB0b2xkLCB0byByb3V0IEhhbm5pYmFsLCB3aG8gd2FzIGJlZm9yZSBpbnZpbmNpYmxlLCB0aGUgb3RoZXIgY29ucXVlcmluZyBpbiBhIHBpdGNoZWQgYmF0dGxlIHRoZSBMYWNlZGFlbW9uaWFucywgd2hvIHdlcmUgc3VwcmVtZSBvbiBsYW5kIGFuZCBzZWE7IGFuZCB5ZXQgdGhleSB3ZXJlIGNhcmVsZXNzIG9mIHRoZWlyIG93biBsaXZlcywgYW5kIHJlY2tsZXNzbHkgdGhyZXcgdGhlbSBhd2F5IGF0IHRpbWVzIHdoZW4gaXQgd2FzIG1vc3QgaW1wb3J0YW50IHRoYXQgc3VjaCBtZW4gc2hvdWxkICBsaXZlIGFuZCBob2xkIGNvbW1hbmQuIFRoZXNlIGFyZSB0aGUgcmVzZW1ibGFuY2VzIGJldHdlZW4gdGhlbSB3aGljaCBoYXZlIGxlZCBtZSB0byB3cml0ZSB0aGVpciBsaXZlcyBpbiBwYXJhbGxlbC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggaXMgdGhlIHByZWZhY2UgSSBoYXZlIHRob3VnaHQgZml0IHRvIG1ha2UgZm9yIHRoZSBMaXZlcyBvZiBQZWxvcGlkYXMgYW5kIE1hcmNlbGx1cywgZ3JlYXQgbWVuIHdobyByYXNobHkgZmVsbCBpbiBiYXR0bGUuICBGb3IgYm90aCB3ZXJlIG1vc3QgdmFsaWFudCBmaWdodGVycywgZGlkIGhvbm91ciB0byB0aGVpciBjb3VudHJpZXMgaW4gbW9zdCBpbGx1c3RyaW91cyBjYW1wYWlnbnMsIGFuZCB3aGF0IGlzIG1vcmUsIGhhZCB0aGUgbW9zdCBmb3JtaWRhYmxlIGFkdmVyc2FyaWVzLCBvbmUgYmVpbmcgdGhlIGZpcnN0LCBhcyB3ZSBhcmUgdG9sZCwgdG8gcm91dCBIYW5uaWJhbCwgd2hvIHdhcyBiZWZvcmUgaW52aW5jaWJsZSwgdGhlIG90aGVyIGNvbnF1ZXJpbmcgaW4gYSBwaXRjaGVkIGJhdHRsZSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyB3ZXJlIHN1cHJlbWUgb24gbGFuZCBhbmQgc2VhOyBhbmQgeWV0IHRoZXkgd2VyZSBjYXJlbGVzcyBvZiB0aGVpciBvd24gbGl2ZXMsIGFuZCByZWNrbGVzc2x5IHRocmV3IHRoZW0gYXdheSBhdCB0aW1lcyB3aGVuIGl0IHdhcyBtb3N0IGltcG9ydGFudCB0aGF0IHN1Y2ggbWVuIHNob3VsZCAgbGl2ZSBhbmQgaG9sZCBjb21tYW5kLiBUaGVzZSBhcmUgdGhlIHJlc2VtYmxhbmNlcyBiZXR3ZWVuIHRoZW0gd2hpY2ggaGF2ZSBsZWQgbWUgdG8gd3JpdGUgdGhlaXIgbGl2ZXMgaW4gcGFyYWxsZWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGVsb3BpZGFzIHRoZSBzb24gb2YgSGlwcG9jbHVzIHdhcyBvZiBhIGhpZ2hseSBob25vdXJhYmxlIGZhbWlseSBpbiBUaGViZXMsIGFzIHdhcyBFcGFtaW5vbmRhcywgYW5kIGhhdmluZyBiZWVuIHJlYXJlZCBpbiBhZmZsdWVuY2UsIGFuZCBoYXZpbmcgaW5oZXJpdGVkIGluIHlvdXRoIGEgc3BsZW5kaWQgZXN0YXRlLCBoZSBkZXZvdGVkIGhpbXNlbGYgdG8gdGhlIGFzc2lzdGFuY2Ugb2Ygd29ydGh5IG1lbiB3aG8gbmVlZGVkIGl0LCB0aGF0IGhlIG1pZ2h0IGJlIHNlZW4gdG8gYmUgcmVhbGx5IG1hc3RlciBvZiBoaXMgd2VhbHRoLCBhbmQgbm90IGl0cyBzbGF2ZS4gIEZvciBtb3N0IHdlYWx0aHkgbWVuLCBhcyBBcmlzdG90bGUgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCA1NiAoUm9zZSk7IGNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA1MjdhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+IHAuIDUyNyBhLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBlaXRoZXIgbWFrZSBubyB1c2Ugb2YgdGhlaXIgd2VhbHRoIHRocm91Z2ggYXZhcmljZSwgb3IgYWJ1c2UgaXQgdGhyb3VnaCBwcm9kaWdhbGl0eSwgYW5kIHNvIHRoZXkgYXJlIGZvcmV2ZXIgc2xhdmVzLCB0aGVzZSB0byB0aGVpciBwbGVhc3VyZXMsIHRob3NlIHRvIHRoZWlyIGJ1c2luZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVzdCwgYWNjb3JkaW5nbHksIHRoYW5rZnVsbHkgcHJvZml0ZWQgYnkgdGhlIGtpbmRuZXNzIGFuZCBsaWJlcmFsaXR5IG9mIFBlbG9waWRhcyB0b3dhcmRzIHRoZW07IGJ1dCBFcGFtaW5vbmRhcyB3YXMgdGhlIG9ubHkgb25lIG9mIGhpcyBmcmllbmRzIHdob20gaGUgY291bGQgbm90IHBlcnN1YWRlIHRvIHNoYXJlIGhpcyB3ZWFsdGguIFBlbG9waWRhcywgaG93ZXZlciwgc2hhcmVkIHRoZSBwb3ZlcnR5IG9mIHRoaXMgZnJpZW5kLCBhbmQgZ2xvcmllZCBpbiBtb2Rlc3QgYXR0aXJlLCBtZWFncmUgZGlldCwgcmVhZGluZXNzIHRvIHVuZGVyZ28gaGFyZHNoaXBzLCBhbmQgc3RyYWlnaHRmb3J3YXJkIHNlcnZpY2UgYXMgYSBzb2xkaWVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5MaWtlIHRoZSBDYXBhbmV1cyBvZiBFdXJpcGlkZXMsIGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aGFkIGFidW5kYW50IHdlYWx0aCwgYnV0IHJpY2hlcyBkaWQgbm90IG1ha2UgaGltIGFycm9nYW50IGF0IGFsbCw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRXVyLiBTdXBwLiA4NjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VwcGxpY2VzPC90aXRsZT4sIDg2MyBmLjwvYmlibD4gKEtpcmNoaG9mZiwgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPuG8pc66zrnPg8+EzrEgzrTigJkg4b2UzrvOsuG/szwvZm9yZWlnbj4pLjwvbm90ZT4gYW5kIGhlIHdhcyBhc2hhbWVkIHRvIGxldCBtZW4gdGhpbmsgdGhhdCBoZSBzcGVudCBtb3JlIHVwb24gaGlzIHBlcnNvbiB0aGFuIHRoZSBwb29yZXN0IFRoZWJhbi4gIE5vdyBFcGFtaW5vbmRhcywgd2hvc2UgcG92ZXJ0eSB3YXMgaGVyZWRpdGFyeSBhbmQgZmFtaWxpYXIsIG1hZGUgaXQgc3RpbGwgbW9yZSBsaWdodCBhbmQgZWFzeSBieSBwaGlsb3NvcGh5LCBhbmQgYnkgZWxlY3RpbmcgYXQgdGhlIG91dHNldCB0byBsZWFkIGEgc2luZ2xlIGxpZmU7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBlbG9waWRhcywgb24gdGhlIGNvbnRyYXJ5LCBtYWRlIGEgYnJpbGxpYW50IG1hcnJpYWdlLCBhbmQgaGFkIGNoaWxkcmVuIHRvbywgYnV0IG5ldmVydGhlbGVzcyBoZSBuZWdsZWN0ZWQgaGlzIHByaXZhdGUgaW50ZXJlc3RzIHRvIGRldm90ZSBoaXMgd2hvbGUgdGltZSB0byB0aGUgc3RhdGUsIGFuZCBzbyBsZXNzZW5lZCBoaXMgc3Vic3RhbmNlLiAgIEFuZCB3aGVuIGhpcyBmcmllbmRzIGFkbW9uaXNoZWQgaGltIGFuZCB0b2xkIGhpbSB0aGF0IHRoZSBwb3NzZXNzaW9uIG9mIG1vbmV5LCB3aGljaCBoZSBzY29ybmVkLCB3YXMgYSBuZWNlc3NhcnkgdGhpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzIGluZGVlZCw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bmVjZXNzYXJ5IGZvciB0aGlzIE5pY29kZW11cyBoZXJlLDwvcT4gcG9pbnRpbmcgdG8gYSBtYW4gd2hvIHdhcyBsYW1lIGFuZCBibGluZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5QZWxvcGlkYXMgdGhlIHNvbiBvZiBIaXBwb2NsdXMgd2FzIG9mIGEgaGlnaGx5IGhvbm91cmFibGUgZmFtaWx5IGluIFRoZWJlcywgYXMgd2FzIEVwYW1pbm9uZGFzLCBhbmQgaGF2aW5nIGJlZW4gcmVhcmVkIGluIGFmZmx1ZW5jZSwgYW5kIGhhdmluZyBpbmhlcml0ZWQgaW4geW91dGggYSBzcGxlbmRpZCBlc3RhdGUsIGhlIGRldm90ZWQgaGltc2VsZiB0byB0aGUgYXNzaXN0YW5jZSBvZiB3b3J0aHkgbWVuIHdobyBuZWVkZWQgaXQsIHRoYXQgaGUgbWlnaHQgYmUgc2VlbiB0byBiZSByZWFsbHkgbWFzdGVyIG9mIGhpcyB3ZWFsdGgsIGFuZCBub3QgaXRzIHNsYXZlLiAgRm9yIG1vc3Qgd2VhbHRoeSBtZW4sIGFzIEFyaXN0b3RsZSBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgNTYgKFJvc2UpOyBjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA1MjdhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4gcC4gNTI3IGEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGVpdGhlciBtYWtlIG5vIHVzZSBvZiB0aGVpciB3ZWFsdGggdGhyb3VnaCBhdmFyaWNlLCBvciBhYnVzZSBpdCB0aHJvdWdoIHByb2RpZ2FsaXR5LCBhbmQgc28gdGhleSBhcmUgZm9yZXZlciBzbGF2ZXMsIHRoZXNlIHRvIHRoZWlyIHBsZWFzdXJlcywgdGhvc2UgdG8gdGhlaXIgYnVzaW5lc3MuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA1MjdhIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4gcC4gNTI3IGEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiA1MjcgYS48L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0LCBhY2NvcmRpbmdseSwgdGhhbmtmdWxseSBwcm9maXRlZCBieSB0aGUga2luZG5lc3MgYW5kIGxpYmVyYWxpdHkgb2YgUGVsb3BpZGFzIHRvd2FyZHMgdGhlbTsgYnV0IEVwYW1pbm9uZGFzIHdhcyB0aGUgb25seSBvbmUgb2YgaGlzIGZyaWVuZHMgd2hvbSBoZSBjb3VsZCBub3QgcGVyc3VhZGUgdG8gc2hhcmUgaGlzIHdlYWx0aC4gUGVsb3BpZGFzLCBob3dldmVyLCBzaGFyZWQgdGhlIHBvdmVydHkgb2YgdGhpcyBmcmllbmQsIGFuZCBnbG9yaWVkIGluIG1vZGVzdCBhdHRpcmUsIG1lYWdyZSBkaWV0LCByZWFkaW5lc3MgdG8gdW5kZXJnbyBoYXJkc2hpcHMsIGFuZCBzdHJhaWdodGZvcndhcmQgc2VydmljZSBhcyBhIHNvbGRpZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkxpa2UgdGhlIENhcGFuZXVzIG9mIEV1cmlwaWRlcywgaGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmhhZCBhYnVuZGFudCB3ZWFsdGgsIGJ1dCByaWNoZXMgZGlkIG5vdCBtYWtlIGhpbSBhcnJvZ2FudCBhdCBhbGwsPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIFN1cHAuIDg2MyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1cHBsaWNlczwvdGl0bGU+LCA4NjMgZi48L2JpYmw+IChLaXJjaGhvZmYsIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8pc66zrnPg8+EzrEgzrTigJkg4b2UzrvOsuG/szwvZm9yZWlnbj4pLjwvbm90ZT4gYW5kIGhlIHdhcyBhc2hhbWVkIHRvIGxldCBtZW4gdGhpbmsgdGhhdCBoZSBzcGVudCBtb3JlIHVwb24gaGlzIHBlcnNvbiB0aGFuIHRoZSBwb29yZXN0IFRoZWJhbi4gIE5vdyBFcGFtaW5vbmRhcywgd2hvc2UgcG92ZXJ0eSB3YXMgaGVyZWRpdGFyeSBhbmQgZmFtaWxpYXIsIG1hZGUgaXQgc3RpbGwgbW9yZSBsaWdodCBhbmQgZWFzeSBieSBwaGlsb3NvcGh5LCBhbmQgYnkgZWxlY3RpbmcgYXQgdGhlIG91dHNldCB0byBsZWFkIGEgc2luZ2xlIGxpZmU7IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBTdXBwLiA4NjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdXBwbGljZXM8L3RpdGxlPiwgODYzIGYuPC9iaWJsPiAoS2lyY2hob2ZmLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdXBwbGljZXM8L3RpdGxlPiwgODYzIGYuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4bylzrrOuc+Dz4TOsSDOtOKAmSDhvZTOu86y4b+zPC9mb3JlaWduPikuPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBlbG9waWRhcywgb24gdGhlIGNvbnRyYXJ5LCBtYWRlIGEgYnJpbGxpYW50IG1hcnJpYWdlLCBhbmQgaGFkIGNoaWxkcmVuIHRvbywgYnV0IG5ldmVydGhlbGVzcyBoZSBuZWdsZWN0ZWQgaGlzIHByaXZhdGUgaW50ZXJlc3RzIHRvIGRldm90ZSBoaXMgd2hvbGUgdGltZSB0byB0aGUgc3RhdGUsIGFuZCBzbyBsZXNzZW5lZCBoaXMgc3Vic3RhbmNlLiAgIEFuZCB3aGVuIGhpcyBmcmllbmRzIGFkbW9uaXNoZWQgaGltIGFuZCB0b2xkIGhpbSB0aGF0IHRoZSBwb3NzZXNzaW9uIG9mIG1vbmV5LCB3aGljaCBoZSBzY29ybmVkLCB3YXMgYSBuZWNlc3NhcnkgdGhpbmcsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMgaW5kZWVkLDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPm5lY2Vzc2FyeSBmb3IgdGhpcyBOaWNvZGVtdXMgaGVyZSw8L3E+IHBvaW50aW5nIHRvIGEgbWFuIHdobyB3YXMgbGFtZSBhbmQgYmxpbmQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIGFsc28gZml0dGVkIGJ5IG5hdHVyZSBmb3IgdGhlIHB1cnN1aXQgb2YgZXZlcnkgZXhjZWxsZW5jZSwgYW5kIGluIGxpa2UgbWVhc3VyZSwgZXhjZXB0IHRoYXQgUGVsb3BpZGFzIGRlbGlnaHRlZCBtb3JlIGluIGV4ZXJjaXNpbmcgdGhlIGJvZHksIEVwYW1pbm9uZGFzIGluIHN0b3JpbmcgdGhlIG1pbmQsIHNvIHRoYXQgdGhlIG9uZSBkZXZvdGVkIGhpcyBsZWlzdXJlIGhvdXJzIHRvIGJvZGlseSBleGVyY2lzZSBhbmQgaHVudGluZywgdGhlIG90aGVyIHRvIGxlY3R1cmVzIGFuZCBwaGlsb3NvcGh5LiAgQm90aCBoYWQgbWFueSBjbGFpbXMgdXBvbiB0aGUgd29ybGQncyBlc3RlZW0sIGJ1dCB3aXNlIG1lbiBjb25zaWRlciBub25lIG9mIHRoZXNlIHNvIGdyZWF0IGFzIHRoZSB1bnF1ZXN0aW9uZWQgZ29vZCB3aWxsIGFuZCBmcmllbmRzaGlwIHdoaWNoIHN1YnNpc3RlZCBiZXR3ZWVuIHRoZW0gZnJvbSBmaXJzdCB0byBsYXN0IHRocm91Z2ggYWxsIHRoZWlyIHN0cnVnZ2xlcyBhbmQgY2FtcGFpZ25zIGFuZCBjaXZpbCBzZXJ2aWNlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIG9uZSByZWdhcmRzIHRoZSBwb2xpdGljYWwgY2FyZWVycyBvZiBUaGVtaXN0b2NsZXMgYW5kIEFyaXN0aWRlcywgb3Igb2YgQ2ltb24gYW5kIFBlcmljbGVzLCBvciBvZiBOaWNpYXMgYW5kIEFsY2liaWFkZXMsIHdoaWNoIHdlcmUgc28gZnVsbCBvZiBtdXR1YWwgZGlzc2Vuc2lvbnMsIGVudnlpbmdzLCBhbmQgamVhbG91c2llcywgYW5kIHRoZW4gdHVybnMgaGlzIGV5ZXMgdXBvbiB0aGUgaG9ub3VyIGFuZCBraW5kbHkgZmF2b3VyIHdoaWNoIFBlbG9waWRhcyBzaG93ZWQgIEVwYW1pbm9uZGFzLCBoZSB3aWxsIHJpZ2h0bHkgYW5kIGp1c3RseSBjYWxsIHRoZXNlIG1lbiBjb2xsZWFndWVzIGluIGdvdmVybm1lbnQgYW5kIGNvbW1hbmQgcmF0aGVyIHRoYW4gdGhvc2UsIHdobyBldmVyIHN0cm92ZSB0byBnZXQgdGhlIGJldHRlciBvZiBvbmUgYW5vdGhlciByYXRoZXIgdGhhbiBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgdHJ1ZSByZWFzb24gZm9yIHRoZSBzdXBlcmlvcml0eSBvZiB0aGUgVGhlYmFucyB3YXMgdGhlaXIgdmlydHVlLCB3aGljaCBsZWQgdGhlbSBub3QgdG8gYWltIGluIHRoZWlyIGFjdGlvbnMgYXQgZ2xvcnkgb3Igd2VhbHRoLCB3aGljaCBhcmUgbmF0dXJhbGx5IGF0dGVuZGVkIGJ5IGJpdHRlciBlbnZ5aW5nIGFuZCBzdHJpZmU7IG9uIHRoZSBjb250cmFyeSwgdGhleSB3ZXJlIGJvdGggZmlsbGVkIGZyb20gdGhlIGJlZ2lubmluZyB3aXRoIGEgZGl2aW5lIGRlc2lyZSB0byBzZWUgdGhlaXIgY291bnRyeSBiZWNvbWUgbW9zdCBwb3dlcmZ1bCBhbmQgZ2xvcmlvdXMgaW4gdGhlaXIgZGF5IGFuZCBieSB0aGVpciBlZmZvcnRzLCBhbmQgdG8gdGhpcyBlbmQgdGhleSB0cmVhdGVkIG9uZSBhbm90aGVyJ3Mgc3VjY2Vzc2VzIGFzIHRoZWlyIG93bi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgYWxzbyBmaXR0ZWQgYnkgbmF0dXJlIGZvciB0aGUgcHVyc3VpdCBvZiBldmVyeSBleGNlbGxlbmNlLCBhbmQgaW4gbGlrZSBtZWFzdXJlLCBleGNlcHQgdGhhdCBQZWxvcGlkYXMgZGVsaWdodGVkIG1vcmUgaW4gZXhlcmNpc2luZyB0aGUgYm9keSwgRXBhbWlub25kYXMgaW4gc3RvcmluZyB0aGUgbWluZCwgc28gdGhhdCB0aGUgb25lIGRldm90ZWQgaGlzIGxlaXN1cmUgaG91cnMgdG8gYm9kaWx5IGV4ZXJjaXNlIGFuZCBodW50aW5nLCB0aGUgb3RoZXIgdG8gbGVjdHVyZXMgYW5kIHBoaWxvc29waHkuICBCb3RoIGhhZCBtYW55IGNsYWltcyB1cG9uIHRoZSB3b3JsZCdzIGVzdGVlbSwgYnV0IHdpc2UgbWVuIGNvbnNpZGVyIG5vbmUgb2YgdGhlc2Ugc28gZ3JlYXQgYXMgdGhlIHVucXVlc3Rpb25lZCBnb29kIHdpbGwgYW5kIGZyaWVuZHNoaXAgd2hpY2ggc3Vic2lzdGVkIGJldHdlZW4gdGhlbSBmcm9tIGZpcnN0IHRvIGxhc3QgdGhyb3VnaCBhbGwgdGhlaXIgc3RydWdnbGVzIGFuZCBjYW1wYWlnbnMgYW5kIGNpdmlsIHNlcnZpY2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBvbmUgcmVnYXJkcyB0aGUgcG9saXRpY2FsIGNhcmVlcnMgb2YgVGhlbWlzdG9jbGVzIGFuZCBBcmlzdGlkZXMsIG9yIG9mIENpbW9uIGFuZCBQZXJpY2xlcywgb3Igb2YgTmljaWFzIGFuZCBBbGNpYmlhZGVzLCB3aGljaCB3ZXJlIHNvIGZ1bGwgb2YgbXV0dWFsIGRpc3NlbnNpb25zLCBlbnZ5aW5ncywgYW5kIGplYWxvdXNpZXMsIGFuZCB0aGVuIHR1cm5zIGhpcyBleWVzIHVwb24gdGhlIGhvbm91ciBhbmQga2luZGx5IGZhdm91ciB3aGljaCBQZWxvcGlkYXMgc2hvd2VkICBFcGFtaW5vbmRhcywgaGUgd2lsbCByaWdodGx5IGFuZCBqdXN0bHkgY2FsbCB0aGVzZSBtZW4gY29sbGVhZ3VlcyBpbiBnb3Zlcm5tZW50IGFuZCBjb21tYW5kIHJhdGhlciB0aGFuIHRob3NlLCB3aG8gZXZlciBzdHJvdmUgdG8gZ2V0IHRoZSBiZXR0ZXIgb2Ygb25lIGFub3RoZXIgcmF0aGVyIHRoYW4gb2YgdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgdHJ1ZSByZWFzb24gZm9yIHRoZSBzdXBlcmlvcml0eSBvZiB0aGUgVGhlYmFucyB3YXMgdGhlaXIgdmlydHVlLCB3aGljaCBsZWQgdGhlbSBub3QgdG8gYWltIGluIHRoZWlyIGFjdGlvbnMgYXQgZ2xvcnkgb3Igd2VhbHRoLCB3aGljaCBhcmUgbmF0dXJhbGx5IGF0dGVuZGVkIGJ5IGJpdHRlciBlbnZ5aW5nIGFuZCBzdHJpZmU7IG9uIHRoZSBjb250cmFyeSwgdGhleSB3ZXJlIGJvdGggZmlsbGVkIGZyb20gdGhlIGJlZ2lubmluZyB3aXRoIGEgZGl2aW5lIGRlc2lyZSB0byBzZWUgdGhlaXIgY291bnRyeSBiZWNvbWUgbW9zdCBwb3dlcmZ1bCBhbmQgZ2xvcmlvdXMgaW4gdGhlaXIgZGF5IGFuZCBieSB0aGVpciBlZmZvcnRzLCBhbmQgdG8gdGhpcyBlbmQgdGhleSB0cmVhdGVkIG9uZSBhbm90aGVyJ3Mgc3VjY2Vzc2VzIGFzIHRoZWlyIG93bi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgbW9zdCBwZW9wbGUgdGhpbmsgdGhhdCB0aGVpciBhcmRlbnQgZnJpZW5kc2hpcCBkYXRlZCBmcm9tIHRoZSBjYW1wYWlnbiBhdCBNYW50aW5laWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDE4IEIuQy4sIHdoZW4gQXRoZW5zIGdhdmUgYXNzaXN0YW5jZSB0byBBcmdvcywgRWxpcywgYW5kIE1hbnRpbmVpYSBhZ2FpbnN0IFNwYXJ0YS4gIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbGNpYmlhZGVzPC90aXRsZT4sIHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGVyZSB0aGV5IGZvdWdodCBvbiB0aGUgc2lkZSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHdobyB3ZXJlIHN0aWxsIHRoZWlyIGZyaWVuZHMgYW5kIGFsbGllcywgYW5kIHdobyByZWNlaXZlZCBhc3Npc3RhbmNlIGZyb20gVGhlYmVzLiAgRm9yIHRoZXkgc3Rvb2Qgc2lkZSBieSBzaWRlIGFtb25nIHRoZSBtZW4tYXQtYXJtcyBhbmQgZm91Z2h0IGFnYWluc3QgdGhlIEFyY2FkaWFucywgYW5kIHdoZW4gdGhlIExhY2VkYWVtb25pYW4gd2luZyB0byB3aGljaCB0aGV5IGJlbG9uZ2VkIGdhdmUgd2F5IGFuZCB3YXMgcm91dGVkIGZvciB0aGUgbW9zdCBwYXJ0LCB0aGV5IGxvY2tlZCB0aGVpciBzaGllbGRzIHRvZ2V0aGVyIGFuZCByZXBlbGxlZCB0aGVpciBhc3NhaWxhbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5QZWxvcGlkYXMsIGFmdGVyIHJlY2VpdmluZyBzZXZlbiB3b3VuZHMgaW4gZnJvbnQsIHNhbmsgZG93biB1cG9uIGEgZ3JlYXQgaGVhcCBvZiBmcmllbmRzIGFuZCBlbmVtaWVzIHdobyBsYXkgZGVhZCB0b2dldGhlcjsgYnV0IEVwYW1pbm9uZGFzLCBhbHRob3VnaCBoZSB0aG91Z2h0IGhpbSBsaWZlbGVzcywgc3Rvb2QgZm9ydGggdG8gZGVmZW5kIGhpcyBib2R5IGFuZCBoaXMgYXJtcywgYW5kIGZvdWdodCBkZXNwZXJhdGVseSwgc2luZ2xlLWhhbmRlZCBhZ2FpbnN0IG1hbnksIGRldGVybWluZWQgdG8gZGllIHJhdGhlciB0aGFuIGxlYXZlIFBlbG9waWRhcyBseWluZyB0aGVyZS4gICBBbmQgbm93IGhlIHRvbyB3YXMgaW4gYSBzb3JyeSBwbGlnaHQsIGhhdmluZyBiZWVuIHdvdW5kZWQgaW4gdGhlIGJyZWFzdCB3aXRoIGEgc3BlYXIgYW5kIGluIHRoZSBhcm0gd2l0aCBhIHN3b3JkLCB3aGVuIEFnZXNpcG9saXMgdGhlIFNwYXJ0YW4ga2luZyBjYW1lIHRvIGhpcyBhaWQgZnJvbSB0aGUgb3RoZXIgd2luZywgYW5kIHdoZW4gYWxsIGhvcGUgd2FzIGxvc3QsIHNhdmVkIHRoZW0gYm90aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG1vc3QgcGVvcGxlIHRoaW5rIHRoYXQgdGhlaXIgYXJkZW50IGZyaWVuZHNoaXAgZGF0ZWQgZnJvbSB0aGUgY2FtcGFpZ24gYXQgTWFudGluZWlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDE4IEIuQy4sIHdoZW4gQXRoZW5zIGdhdmUgYXNzaXN0YW5jZSB0byBBcmdvcywgRWxpcywgYW5kIE1hbnRpbmVpYSBhZ2FpbnN0IFNwYXJ0YS4gIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAxNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlcmUgdGhleSBmb3VnaHQgb24gdGhlIHNpZGUgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB3aG8gd2VyZSBzdGlsbCB0aGVpciBmcmllbmRzIGFuZCBhbGxpZXMsIGFuZCB3aG8gcmVjZWl2ZWQgYXNzaXN0YW5jZSBmcm9tIFRoZWJlcy4gIEZvciB0aGV5IHN0b29kIHNpZGUgYnkgc2lkZSBhbW9uZyB0aGUgbWVuLWF0LWFybXMgYW5kIGZvdWdodCBhZ2FpbnN0IHRoZSBBcmNhZGlhbnMsIGFuZCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFuIHdpbmcgdG8gd2hpY2ggdGhleSBiZWxvbmdlZCBnYXZlIHdheSBhbmQgd2FzIHJvdXRlZCBmb3IgdGhlIG1vc3QgcGFydCwgdGhleSBsb2NrZWQgdGhlaXIgc2hpZWxkcyB0b2dldGhlciBhbmQgcmVwZWxsZWQgdGhlaXIgYXNzYWlsYW50cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDE1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIHh2LiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCB4di4gMS48L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBlbG9waWRhcywgYWZ0ZXIgcmVjZWl2aW5nIHNldmVuIHdvdW5kcyBpbiBmcm9udCwgc2FuayBkb3duIHVwb24gYSBncmVhdCBoZWFwIG9mIGZyaWVuZHMgYW5kIGVuZW1pZXMgd2hvIGxheSBkZWFkIHRvZ2V0aGVyOyBidXQgRXBhbWlub25kYXMsIGFsdGhvdWdoIGhlIHRob3VnaHQgaGltIGxpZmVsZXNzLCBzdG9vZCBmb3J0aCB0byBkZWZlbmQgaGlzIGJvZHkgYW5kIGhpcyBhcm1zLCBhbmQgZm91Z2h0IGRlc3BlcmF0ZWx5LCBzaW5nbGUtaGFuZGVkIGFnYWluc3QgbWFueSwgZGV0ZXJtaW5lZCB0byBkaWUgcmF0aGVyIHRoYW4gbGVhdmUgUGVsb3BpZGFzIGx5aW5nIHRoZXJlLiAgIEFuZCBub3cgaGUgdG9vIHdhcyBpbiBhIHNvcnJ5IHBsaWdodCwgaGF2aW5nIGJlZW4gd291bmRlZCBpbiB0aGUgYnJlYXN0IHdpdGggYSBzcGVhciBhbmQgaW4gdGhlIGFybSB3aXRoIGEgc3dvcmQsIHdoZW4gQWdlc2lwb2xpcyB0aGUgU3BhcnRhbiBraW5nIGNhbWUgdG8gaGlzIGFpZCBmcm9tIHRoZSBvdGhlciB3aW5nLCBhbmQgd2hlbiBhbGwgaG9wZSB3YXMgbG9zdCwgc2F2ZWQgdGhlbSBib3RoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgdGhlIFNwYXJ0YW5zIG9zdGVuc2libHkgdHJlYXRlZCB0aGUgVGhlYmFucyBhcyBmcmllbmRzIGFuZCBhbGxpZXMsIGJ1dCB0aGV5IHJlYWxseSBsb29rZWQgd2l0aCBzdXNwaWNpb24gb24gdGhlIGFtYml0aW91cyBzcGlyaXQgYW5kIHRoZSBwb3dlciBvZiB0aGUgY2l0eSwgYW5kIGFib3ZlIGFsbCB0aGV5IGhhdGVkIHRoZSBwYXJ0eSBvZiBJc21lbmlhcyBhbmQgQW5kcm9jbGVpZGVzLCB0byB3aGljaCBQZWxvcGlkYXMgYmVsb25nZWQsIGFuZCB3aGljaCB3YXMgdGhvdWdodCB0byBiZSBmcmllbmRseSB0byBmcmVlZG9tIGFuZCBhIHBvcHVsYXIgZm9ybSBvZiBnb3Zlcm5tZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgQXJjaGlhcywgTGVvbnRpZGFzLCBhbmQgUGhpbGlwLCBtZW4gb2YgdGhlIG9saWdhcmNoaWNhbCBmYWN0aW9uIHdobyB3ZXJlIHJpY2ggYW5kIGltbW9kZXJhdGVseSBhbWJpdGlvdXMsIHNvdWdodCB0byBwZXJzdWFkZSBQaG9lYmlkYXMgdGhlIFNwYXJ0YW4sIGFzIGhlIHdhcyBtYXJjaGluZyBwYXN0IHdpdGggYW4gYXJteSwgdG8gdGFrZSB0aGUgQ2FkbWVpYSBieSBzdXJwcmlzZSwgZXhwZWwgZnJvbSB0aGUgY2l0eSB0aGUgcGFydHkgb3Bwb3NlZCB0byB0aGVtLCBhbmQgYnJpbmcgdGhlIGdvdmVybm1lbnQgaW50byBzdWJzZXJ2aWVuY3kgdG8gdGhlIExhY2VkYWVtb25pYW5zIGJ5IHB1dHRpbmcgaXQgaW4gdGhlIGhhbmRzIG9mIGEgZmV3IG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UGhvZWJpZGFzIHlpZWxkZWQgdG8gdGhlaXIgcGVyc3Vhc2lvbnMsIG1hZGUgaGlzIGF0dGFjayB1cG9uIHRoZSBUaGViYW5zIHdoZW4gdGhleSBkaWQgbm90IGV4cGVjdCBpdCwgc2luY2UgaXQgd2FzIHRoZSBmZXN0aXZhbCBvZiB0aGUgVGhlc21vcGhvcmlhLCBhbmQgZ290IHBvc3Nlc3Npb24gb2YgdGhlIGNpdGFkZWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHdpbnRlciBvZiAzODIgQi5DLiAgQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjMuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4aWlpLiAzLTcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZW4gSXNtZW5pYXMgd2FzIGFycmVzdGVkLCBjYXJyaWVkIHRvIFNwYXJ0YSwgYW5kIGFmdGVyIGEgbGl0dGxlIHdoaWxlIHB1dCB0byBkZWF0aDsgd2hpbGUgUGVsb3BpZGFzLCBQaGVyZW5pY3VzLCBBbmRyb2NsZWlkZXMgYW5kIG1hbnkgb3RoZXJzIHRvb2sgdG8gZmxpZ2h0IGFuZCB3ZXJlIHByb2NsYWltZWQgb3V0bGF3cy4gICBFcGFtaW5vbmRhcywgaG93ZXZlciwgd2FzIHN1ZmZlcmVkIHRvIHJlbWFpbiBpbiB0aGUgY2l0eSwgYmVjYXVzZSBoaXMgcGhpbG9zb3BoeSBtYWRlIGhpbSB0byBiZSBsb29rZWQgZG93biB1cG9uIGFzIGEgcmVjbHVzZSwgYW5kIGhpcyBwb3ZlcnR5IGFzIGltcG90ZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHRoZSBTcGFydGFucyBvc3RlbnNpYmx5IHRyZWF0ZWQgdGhlIFRoZWJhbnMgYXMgZnJpZW5kcyBhbmQgYWxsaWVzLCBidXQgdGhleSByZWFsbHkgbG9va2VkIHdpdGggc3VzcGljaW9uIG9uIHRoZSBhbWJpdGlvdXMgc3Bpcml0IGFuZCB0aGUgcG93ZXIgb2YgdGhlIGNpdHksIGFuZCBhYm92ZSBhbGwgdGhleSBoYXRlZCB0aGUgcGFydHkgb2YgSXNtZW5pYXMgYW5kIEFuZHJvY2xlaWRlcywgdG8gd2hpY2ggUGVsb3BpZGFzIGJlbG9uZ2VkLCBhbmQgd2hpY2ggd2FzIHRob3VnaHQgdG8gYmUgZnJpZW5kbHkgdG8gZnJlZWRvbSBhbmQgYSBwb3B1bGFyIGZvcm0gb2YgZ292ZXJubWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBBcmNoaWFzLCBMZW9udGlkYXMsIGFuZCBQaGlsaXAsIG1lbiBvZiB0aGUgb2xpZ2FyY2hpY2FsIGZhY3Rpb24gd2hvIHdlcmUgcmljaCBhbmQgaW1tb2RlcmF0ZWx5IGFtYml0aW91cywgc291Z2h0IHRvIHBlcnN1YWRlIFBob2ViaWRhcyB0aGUgU3BhcnRhbiwgYXMgaGUgd2FzIG1hcmNoaW5nIHBhc3Qgd2l0aCBhbiBhcm15LCB0byB0YWtlIHRoZSBDYWRtZWlhIGJ5IHN1cnByaXNlLCBleHBlbCBmcm9tIHRoZSBjaXR5IHRoZSBwYXJ0eSBvcHBvc2VkIHRvIHRoZW0sIGFuZCBicmluZyB0aGUgZ292ZXJubWVudCBpbnRvIHN1YnNlcnZpZW5jeSB0byB0aGUgTGFjZWRhZW1vbmlhbnMgYnkgcHV0dGluZyBpdCBpbiB0aGUgaGFuZHMgb2YgYSBmZXcgbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBob2ViaWRhcyB5aWVsZGVkIHRvIHRoZWlyIHBlcnN1YXNpb25zLCBtYWRlIGhpcyBhdHRhY2sgdXBvbiB0aGUgVGhlYmFucyB3aGVuIHRoZXkgZGlkIG5vdCBleHBlY3QgaXQsIHNpbmNlIGl0IHdhcyB0aGUgZmVzdGl2YWwgb2YgdGhlIFRoZXNtb3Bob3JpYSwgYW5kIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSBjaXRhZGVsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHdpbnRlciBvZiAzODIgQi5DLiAgQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAyMy4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB4eGlpaS4gMy03LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGVuIElzbWVuaWFzIHdhcyBhcnJlc3RlZCwgY2FycmllZCB0byBTcGFydGEsIGFuZCBhZnRlciBhIGxpdHRsZSB3aGlsZSBwdXQgdG8gZGVhdGg7IHdoaWxlIFBlbG9waWRhcywgUGhlcmVuaWN1cywgQW5kcm9jbGVpZGVzIGFuZCBtYW55IG90aGVycyB0b29rIHRvIGZsaWdodCBhbmQgd2VyZSBwcm9jbGFpbWVkIG91dGxhd3MuICAgRXBhbWlub25kYXMsIGhvd2V2ZXIsIHdhcyBzdWZmZXJlZCB0byByZW1haW4gaW4gdGhlIGNpdHksIGJlY2F1c2UgaGlzIHBoaWxvc29waHkgbWFkZSBoaW0gdG8gYmUgbG9va2VkIGRvd24gdXBvbiBhcyBhIHJlY2x1c2UsIGFuZCBoaXMgcG92ZXJ0eSBhcyBpbXBvdGVudC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjMuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHhpaWkuIDMtNy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHhpaWkuIDMtNy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucyBkZXByaXZlZCBQaG9lYmlkYXMgb2YgaGlzIGNvbW1hbmQgYW5kIGZpbmVkIGhpbSBhIGh1bmRyZWQgdGhvdXNhbmQgZHJhY2htYXMsIGFuZCB5ZXQgaGVsZCB0aGUgQ2FkbWVpYSB3aXRoIGEgZ2Fycmlzb24gbm90d2l0aHN0YW5kaW5nLCBhbGwgdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcyB3ZXJlIGFtYXplZCBhdCB0aGVpciBpbmNvbnNpc3RlbmN5LCBzaW5jZSB0aGV5IHB1bmlzaGVkIHRoZSB3cm9uZy1kb2VyLCBidXQgYXBwcm92ZWQgaGlzIGRlZWQuIEFuZCBhcyBmb3IgdGhlIFRoZWJhbnMsIHRoZXkgaGFkIGxvc3QgdGhlaXIgYW5jZXN0cmFsIGZvcm0gb2YgZ292ZXJubWVudCBhbmQgd2VyZSBlbnNsYXZlZCBieSBBcmNoaWFzIGFuZCBMZW9udGlkYXMsIG5vciBoYWQgdGhleSBob3BlcyBvZiBhbnkgZGVsaXZlcmFuY2UgZnJvbSB0aGlzIHR5cmFubnksIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWNoIHRoZXkgc2F3IHdhcyBndWFyZGVkIGJ5IHRoZSBkb21pbmFudCBtaWxpdGFyeSBwb3dlciBvZiB0aGUgU3BhcnRhbnMgYW5kIGNvdWxkIG5vdCBiZSBwdWxsZWQgZG93biB1bmxlc3MgdGhvc2UgU3BhcnRhbnMgc2hvdWxkIHNvbWVob3cgYmUgZGVwb3NlZCBmcm9tIHRoZWlyIGNvbW1hbmQgb2YgbGFuZCBhbmQgc2VhLiAgIE5ldmVydGhlbGVzcywgTGVvbnRpZGFzIGFuZCBoaXMgYXNzb2NpYXRlcywgbGVhcm5pbmcgdGhhdCB0aGUgZnVnaXRpdmUgVGhlYmFucyB3ZXJlIGxpdmluZyBhdCBBdGhlbnMsIHdoZXJlIHRoZXkgd2VyZSBub3Qgb25seSBpbiBmYXZvdXIgd2l0aCB0aGUgY29tbW9uIHBlb3BsZSBidXQgYWxzbyBob25vdXJlZCBieSB0aGUgbm9iaWxpdHksIHNlY3JldGx5IHBsb3R0ZWQgYWdhaW5zdCB0aGVpciBsaXZlcywgYW5kIHNlbmRpbmcgbWVuIHdobyB3ZXJlIHVua25vd24sIHRoZXkgdHJlYWNoZXJvdXNseSBraWxsZWQgQW5kcm9jbGVpZGVzLCBidXQgZmFpbGVkIGluIHRoZWlyIGRlc2lnbnMgdXBvbiB0aGUgcmVzdC4gIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGNhbWUgYWxzbyBsZXR0ZXJzIGZyb20gdGhlIExhY2VkYWVtb25pYW5zIGNoYXJnaW5nIHRoZSBBdGhlbmlhbnMgbm90IHRvIGhhcmJvdXIgb3IgZW5jb3VyYWdlIHRoZSBleGlsZXMsIGJ1dCB0byBleHBlbCB0aGVtIGFzIG1lbiBkZWNsYXJlZCBjb21tb24gZW5lbWllcyBieSB0aGUgYWxsaWVkIGNpdGllcy4gIFRoZSBBdGhlbmlhbnMsIGhvd2V2ZXIsIG5vdCBvbmx5IHlpZWxkaW5nIHRvIHRoZWlyIHRyYWRpdGlvbmFsIGFuZCBuYXR1cmFsIGluc3RpbmN0cyBvZiBodW1hbml0eSwgYnV0IGFsc28gbWFraW5nIGEgZ3JhdGVmdWwgcmV0dXJuIGZvciB0aGUga2luZG5lc3Mgb2YgdGhlIFRoZWJhbnMsIHdobyBoYWQgYmVlbiBtb3N0IHJlYWR5IHRvIGFpZCB0aGVtIGluIHJlc3RvcmluZyB0aGVpciBkZW1vY3JhY3ksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDAzIEIuQy4sIHdoZW4gVGhyYXN5YnVsdXMgc2V0IG91dCBmcm9tIFRoZWJlcyBvbiBoaXMgY2FtcGFpZ24gYWdhaW5zdCB0aGUgVGhpcnR5IFR5cmFudHMgYXQgQXRoZW5zICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiAyLjQuMiIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5IZWxsLjwvdGl0bGU+IGlpLiA0LCAyPC9iaWJsPikuPC9ub3RlPiBhbmQgaGFkIHBhc3NlZCBhIGRlY3JlZSB0aGF0IGlmIGFueSBBdGhlbmlhbnMgbWFyY2hlZCB0aHJvdWdoIEJvZW90aWEgYWdhaW5zdCB0aGUgdHlyYW50cyBpbiBBdGhlbnMsIG5vIEJvZW90aWFuIHNob3VsZCBzZWUgb3IgaGVhciB0aGVtLCBkaWQgbm8gaGFybSB0byB0aGUgVGhlYmFucyBpbiB0aGVpciBjaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgZGVwcml2ZWQgUGhvZWJpZGFzIG9mIGhpcyBjb21tYW5kIGFuZCBmaW5lZCBoaW0gYSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzLCBhbmQgeWV0IGhlbGQgdGhlIENhZG1laWEgd2l0aCBhIGdhcnJpc29uIG5vdHdpdGhzdGFuZGluZywgYWxsIHRoZSByZXN0IG9mIHRoZSBHcmVla3Mgd2VyZSBhbWF6ZWQgYXQgdGhlaXIgaW5jb25zaXN0ZW5jeSwgc2luY2UgdGhleSBwdW5pc2hlZCB0aGUgd3JvbmctZG9lciwgYnV0IGFwcHJvdmVkIGhpcyBkZWVkLiBBbmQgYXMgZm9yIHRoZSBUaGViYW5zLCB0aGV5IGhhZCBsb3N0IHRoZWlyIGFuY2VzdHJhbCBmb3JtIG9mIGdvdmVybm1lbnQgYW5kIHdlcmUgZW5zbGF2ZWQgYnkgQXJjaGlhcyBhbmQgTGVvbnRpZGFzLCBub3IgaGFkIHRoZXkgaG9wZXMgb2YgYW55IGRlbGl2ZXJhbmNlIGZyb20gdGhpcyB0eXJhbm55LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWNoIHRoZXkgc2F3IHdhcyBndWFyZGVkIGJ5IHRoZSBkb21pbmFudCBtaWxpdGFyeSBwb3dlciBvZiB0aGUgU3BhcnRhbnMgYW5kIGNvdWxkIG5vdCBiZSBwdWxsZWQgZG93biB1bmxlc3MgdGhvc2UgU3BhcnRhbnMgc2hvdWxkIHNvbWVob3cgYmUgZGVwb3NlZCBmcm9tIHRoZWlyIGNvbW1hbmQgb2YgbGFuZCBhbmQgc2VhLiAgIE5ldmVydGhlbGVzcywgTGVvbnRpZGFzIGFuZCBoaXMgYXNzb2NpYXRlcywgbGVhcm5pbmcgdGhhdCB0aGUgZnVnaXRpdmUgVGhlYmFucyB3ZXJlIGxpdmluZyBhdCBBdGhlbnMsIHdoZXJlIHRoZXkgd2VyZSBub3Qgb25seSBpbiBmYXZvdXIgd2l0aCB0aGUgY29tbW9uIHBlb3BsZSBidXQgYWxzbyBob25vdXJlZCBieSB0aGUgbm9iaWxpdHksIHNlY3JldGx5IHBsb3R0ZWQgYWdhaW5zdCB0aGVpciBsaXZlcywgYW5kIHNlbmRpbmcgbWVuIHdobyB3ZXJlIHVua25vd24sIHRoZXkgdHJlYWNoZXJvdXNseSBraWxsZWQgQW5kcm9jbGVpZGVzLCBidXQgZmFpbGVkIGluIHRoZWlyIGRlc2lnbnMgdXBvbiB0aGUgcmVzdC4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGNhbWUgYWxzbyBsZXR0ZXJzIGZyb20gdGhlIExhY2VkYWVtb25pYW5zIGNoYXJnaW5nIHRoZSBBdGhlbmlhbnMgbm90IHRvIGhhcmJvdXIgb3IgZW5jb3VyYWdlIHRoZSBleGlsZXMsIGJ1dCB0byBleHBlbCB0aGVtIGFzIG1lbiBkZWNsYXJlZCBjb21tb24gZW5lbWllcyBieSB0aGUgYWxsaWVkIGNpdGllcy4gIFRoZSBBdGhlbmlhbnMsIGhvd2V2ZXIsIG5vdCBvbmx5IHlpZWxkaW5nIHRvIHRoZWlyIHRyYWRpdGlvbmFsIGFuZCBuYXR1cmFsIGluc3RpbmN0cyBvZiBodW1hbml0eSwgYnV0IGFsc28gbWFraW5nIGEgZ3JhdGVmdWwgcmV0dXJuIGZvciB0aGUga2luZG5lc3Mgb2YgdGhlIFRoZWJhbnMsIHdobyBoYWQgYmVlbiBtb3N0IHJlYWR5IHRvIGFpZCB0aGVtIGluIHJlc3RvcmluZyB0aGVpciBkZW1vY3JhY3ksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0MDMgQi5DLiwgd2hlbiBUaHJhc3lidWx1cyBzZXQgb3V0IGZyb20gVGhlYmVzIG9uIGhpcyBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBUaGlydHkgVHlyYW50cyBhdCBBdGhlbnMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMi40LjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpLiA0LCAyPC9iaWJsPikuPC9ub3RlPiBhbmQgaGFkIHBhc3NlZCBhIGRlY3JlZSB0aGF0IGlmIGFueSBBdGhlbmlhbnMgbWFyY2hlZCB0aHJvdWdoIEJvZW90aWEgYWdhaW5zdCB0aGUgdHlyYW50cyBpbiBBdGhlbnMsIG5vIEJvZW90aWFuIHNob3VsZCBzZWUgb3IgaGVhciB0aGVtLCBkaWQgbm8gaGFybSB0byB0aGUgVGhlYmFucyBpbiB0aGVpciBjaXR5LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDIuNC4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaS4gNCwgMjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gaWkuIDQsIDI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQZWxvcGlkYXMsIGFsdGhvdWdoIGhlIHdhcyBvbmUgb2YgdGhlIHlvdW5nZXN0IG9mIHRoZSBleGlsZXMga2VwdCBpbmNpdGluZyBlYWNoIG1hbiBvZiB0aGVtICBwcml2YXRlbHksIGFuZCB3aGVuICB0aGV5ICBtZXQgIHRvZ2V0aGVyIHBsZWFkZWQgYmVmb3JlIHRoZW0gdGhhdCBpdCB3YXMgbmVpdGhlciByaWdodCBub3IgaG9ub3VyYWJsZSBmb3IgdGhlbSB0byBzdWZmZXIgdGhlaXIgbmF0aXZlIGNpdHkgdG8gYmUgZ2Fycmlzb25lZCBhbmQgZW5zbGF2ZWQsIGFuZCwgY29udGVudCB3aXRoIG1lcmUgbGlmZSBhbmQgc2FmZXR5LCB0byBoYW5nIHVwb24gdGhlIGRlY3JlZXMgb2YgdGhlIEF0aGVuaWFucywgYW5kIHRvIGJlIGFsd2F5cyBjcmluZ2luZyBhbmQgcGF5aW5nIGNvdXJ0IHRvIHN1Y2ggb3JhdG9ycyBhcyBjb3VsZCBwZXJzdWFkZSB0aGUgcGVvcGxlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5uYXksIHRoZXkgbXVzdCByaXNrIHRoZWlyIGxpdmVzIGZvciB0aGUgaGlnaGVzdCBnb29kLCBhbmQgdGFrZSBUaHJhc3lidWx1cyBhbmQgaGlzIGJvbGQgdmFsb3VyIGZvciB0aGVpciBleGFtcGxlLCBpbiBvcmRlciB0aGF0LCBhcyBoZSBvbmNlIHNhbGxpZWQgZm9ydGggZnJvbSBUaGViZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0MDMgQi5DLiwgd2hlbiBUaHJhc3lidWx1cyBzZXQgb3V0IGZyb20gVGhlYmVzIG9uIGhpcyBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBUaGlydHkgVHlyYW50cyBhdCBBdGhlbnMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDIuNC4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlPkhlbGwuPC90aXRsZT4gaWkuIDQsIDI8L2JpYmw+KS48L25vdGU+IGFuZCBvdmVydGhyZXcgdGhlIHR5cmFudHMgaW4gQXRoZW5zLCBzbyB0aGV5IGluIHRoZWlyIHR1cm4gbWlnaHQgZ28gZm9ydGggZnJvbSBBdGhlbnMgYW5kIGxpYmVyYXRlIFRoZWJlcy4gV2hlbiwgdGhlcmVmb3JlLCB0aGV5IGhhZCBiZWVuIHBlcnN1YWRlZCBieSBoaXMgYXBwZWFscywgdGhleSBzZW50IHNlY3JldGx5IHRvIHRoZSBmcmllbmRzIHRoZXkgaGFkIGxlZnQgaW4gVGhlYmVzLCBhbmQgdG9sZCB0aGVtIHdoYXQgdGhleSBwdXJwb3NlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgYXBwcm92ZWQgdGhlaXIgcGxhbjsgYW5kIENoYXJvbiwgYSBtYW4gb2YgdGhlIGhpZ2hlc3QgZGlzdGluY3Rpb24sIGFncmVlZCB0byBwdXQgaGlzIGhvdXNlIGF0IHRoZWlyIGRpc3Bvc2FsLCB3aGlsZSBQaGlsbGlkYXMgY29udHJpdmVkIHRvIGhhdmUgaGltc2VsZiBhcHBvaW50ZWQgc2VjcmV0YXJ5IHRvIEFyY2hpYXMgYW5kIFBoaWxpcCwgdGhlIHBvbGVtYXJjaHMuIEVwYW1pbm9uZGFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXJlIGlzIG5vIG1lbnRpb24gZWl0aGVyIG9mIEVwYW1pbm9uZGFzIG9yIFBlbG9waWRhcyBpbiBYZW5vcGhvbidzIGFjY291bnQgb2YgdGhlc2UgbWF0dGVycyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNS40LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48L3RpdGxlPiB2LiA0LCAxLTEyPC9iaWJsPikgYW5kIGhpcyBzdG9yeSBkaWZmZXJzIGluIG1hbnkgZGV0YWlscyBmcm9tIHRoYXQgb2YgUGx1dGFyY2guPC9ub3RlPiB0b28sIGhhZCBsb25nIHNpbmNlIGZpbGxlZCB0aGUgbWluZHMgb2YgdGhlIFRoZWJhbiB5b3V0aCB3aXRoIGhpZ2ggdGhvdWdodHM7IGZvciBoZSBrZXB0IHVyZ2luZyB0aGVtIGluIHRoZSBneW1uYXN0aWMgc2Nob29scyB0byB0cnkgdGhlIExhY2VkYWVtb25pYW5zIGluIHdyZXN0bGluZywgYW5kIHdoZW4gaGUgc2F3IHRoZW0gZWxhdGVkIHdpdGggdmljdG9yeSBhbmQgbWFzdGVyeSwgaGUgd291bGQgY2hpZGUgdGhlbSwgdGVsbGluZyB0aGVtIHRoZXkgb3VnaHQgcmF0aGVyIHRvIGJlIGFzaGFtZWQsIHNpbmNlIHRoZWlyIGNvd2FyZGljZSBtYWRlIHRoZW0gdGhlIHNsYXZlcyBvZiB0aGUgbWVuIHdob20gdGhleSBzbyBmYXIgc3VycGFzc2VkIGluIGJvZGlseSBwb3dlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGVsb3BpZGFzLCBhbHRob3VnaCBoZSB3YXMgb25lIG9mIHRoZSB5b3VuZ2VzdCBvZiB0aGUgZXhpbGVzIGtlcHQgaW5jaXRpbmcgZWFjaCBtYW4gb2YgdGhlbSAgcHJpdmF0ZWx5LCBhbmQgd2hlbiAgdGhleSAgbWV0ICB0b2dldGhlciBwbGVhZGVkIGJlZm9yZSB0aGVtIHRoYXQgaXQgd2FzIG5laXRoZXIgcmlnaHQgbm9yIGhvbm91cmFibGUgZm9yIHRoZW0gdG8gc3VmZmVyIHRoZWlyIG5hdGl2ZSBjaXR5IHRvIGJlIGdhcnJpc29uZWQgYW5kIGVuc2xhdmVkLCBhbmQsIGNvbnRlbnQgd2l0aCBtZXJlIGxpZmUgYW5kIHNhZmV0eSwgdG8gaGFuZyB1cG9uIHRoZSBkZWNyZWVzIG9mIHRoZSBBdGhlbmlhbnMsIGFuZCB0byBiZSBhbHdheXMgY3JpbmdpbmcgYW5kIHBheWluZyBjb3VydCB0byBzdWNoIG9yYXRvcnMgYXMgY291bGQgcGVyc3VhZGUgdGhlIHBlb3BsZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5heSwgdGhleSBtdXN0IHJpc2sgdGhlaXIgbGl2ZXMgZm9yIHRoZSBoaWdoZXN0IGdvb2QsIGFuZCB0YWtlIFRocmFzeWJ1bHVzIGFuZCBoaXMgYm9sZCB2YWxvdXIgZm9yIHRoZWlyIGV4YW1wbGUsIGluIG9yZGVyIHRoYXQsIGFzIGhlIG9uY2Ugc2FsbGllZCBmb3J0aCBmcm9tIFRoZWJlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDAzIEIuQy4sIHdoZW4gVGhyYXN5YnVsdXMgc2V0IG91dCBmcm9tIFRoZWJlcyBvbiBoaXMgY2FtcGFpZ24gYWdhaW5zdCB0aGUgVGhpcnR5IFR5cmFudHMgYXQgQXRoZW5zICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDIuNC4yIiB2YWxpZD0ieWVzIj5YZW5vcGhvbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaS4gNCwgMjwvYmlibD4pLjwvbm90ZT4gYW5kIG92ZXJ0aHJldyB0aGUgdHlyYW50cyBpbiBBdGhlbnMsIHNvIHRoZXkgaW4gdGhlaXIgdHVybiBtaWdodCBnbyBmb3J0aCBmcm9tIEF0aGVucyBhbmQgbGliZXJhdGUgVGhlYmVzLiBXaGVuLCB0aGVyZWZvcmUsIHRoZXkgaGFkIGJlZW4gcGVyc3VhZGVkIGJ5IGhpcyBhcHBlYWxzLCB0aGV5IHNlbnQgc2VjcmV0bHkgdG8gdGhlIGZyaWVuZHMgdGhleSBoYWQgbGVmdCBpbiBUaGViZXMsIGFuZCB0b2xkIHRoZW0gd2hhdCB0aGV5IHB1cnBvc2VkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gMi40LjIiIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IGlpLiA0LCAyPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiBpaS4gNCwgMjwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGFwcHJvdmVkIHRoZWlyIHBsYW47IGFuZCBDaGFyb24sIGEgbWFuIG9mIHRoZSBoaWdoZXN0IGRpc3RpbmN0aW9uLCBhZ3JlZWQgdG8gcHV0IGhpcyBob3VzZSBhdCB0aGVpciBkaXNwb3NhbCwgd2hpbGUgUGhpbGxpZGFzIGNvbnRyaXZlZCB0byBoYXZlIGhpbXNlbGYgYXBwb2ludGVkIHNlY3JldGFyeSB0byBBcmNoaWFzIGFuZCBQaGlsaXAsIHRoZSBwb2xlbWFyY2hzLiBFcGFtaW5vbmRhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXJlIGlzIG5vIG1lbnRpb24gZWl0aGVyIG9mIEVwYW1pbm9uZGFzIG9yIFBlbG9waWRhcyBpbiBYZW5vcGhvbidzIGFjY291bnQgb2YgdGhlc2UgbWF0dGVycyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkhlbGwuPC90aXRsZT4gdi4gNCwgMS0xMjwvYmlibD4pIGFuZCBoaXMgc3RvcnkgZGlmZmVycyBpbiBtYW55IGRldGFpbHMgZnJvbSB0aGF0IG9mIFBsdXRhcmNoLjwvbm90ZT4gdG9vLCBoYWQgbG9uZyBzaW5jZSBmaWxsZWQgdGhlIG1pbmRzIG9mIHRoZSBUaGViYW4geW91dGggd2l0aCBoaWdoIHRob3VnaHRzOyBmb3IgaGUga2VwdCB1cmdpbmcgdGhlbSBpbiB0aGUgZ3ltbmFzdGljIHNjaG9vbHMgdG8gdHJ5IHRoZSBMYWNlZGFlbW9uaWFucyBpbiB3cmVzdGxpbmcsIGFuZCB3aGVuIGhlIHNhdyB0aGVtIGVsYXRlZCB3aXRoIHZpY3RvcnkgYW5kIG1hc3RlcnksIGhlIHdvdWxkIGNoaWRlIHRoZW0sIHRlbGxpbmcgdGhlbSB0aGV5IG91Z2h0IHJhdGhlciB0byBiZSBhc2hhbWVkLCBzaW5jZSB0aGVpciBjb3dhcmRpY2UgbWFkZSB0aGVtIHRoZSBzbGF2ZXMgb2YgdGhlIG1lbiB3aG9tIHRoZXkgc28gZmFyIHN1cnBhc3NlZCBpbiBib2RpbHkgcG93ZXJzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCAxLTEyPC9iaWJsPikgYW5kIGhpcyBzdG9yeSBkaWZmZXJzIGluIG1hbnkgZGV0YWlscyBmcm9tIHRoYXQgb2YgUGx1dGFyY2guPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2LiA0LCAxLTEyPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIGRheSBmb3IgdGhlIGVudGVycHJpc2UgaGF2aW5nIGJlZW4gZml4ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gdGhlIHdpbnRlciBvZiAzNzkgQi5DLjwvbm90ZT4gdGhlIGV4aWxlcyBkZWNpZGVkIHRoYXQgUGhlcmVuaWN1cywgd2l0aCB0aGUgcmVzdCBvZiB0aGUgcGFydHkgdW5kZXIgaGlzIGNvbW1hbmQsIHNob3VsZCByZW1haW4gaW4gdGhlIFRocmlhc2lhbiBwbGFpbiwgd2hpbGUgYSBmZXcgb2YgdGhlIHlvdW5nZXN0IHRvb2sgdGhlIHJpc2sgb2YgZ29pbmcgZm9yd2FyZCBpbnRvIHRoZSBjaXR5OyBhbmQgaWYgYW55dGhpbmcgaGFwcGVuZWQgdG8gdGhlc2UgYXQgdGhlIGhhbmRzIG9mIHRoZWlyIGVuZW1pZXMsIHRoZSByZXN0IHNob3VsZCBhbGwgc2VlIHRvIGl0IHRoYXQgbmVpdGhlciB0aGVpciBjaGlsZHJlbiBub3IgdGhlaXIgcGFyZW50cyBjYW1lIHRvIGFueSB3YW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QZWxvcGlkYXMgd2FzIGZpcnN0IHRvIHVuZGVydGFrZSB0aGUgZW50ZXJwcmlzZSwgdGhlbiBNZWxvbiwgRGFtb2NsZWlkZXMsIGFuZCBUaGVvcG9tcHVzLCBtZW4gb2YgZm9yZW1vc3QgZmFtaWxpZXMsIGFuZCBvZiBtdXR1YWwgZmlkZWxpdHkgYW5kIGZyaWVuZHNoaXAsIGFsdGhvdWdoIGluIHRoZSByYWNlIGZvciBoZXJvaWMgYWNoaWV2ZW1lbnQgYW5kIGdsb3J5IHRoZXkgd2VyZSBjb25zdGFudCByaXZhbHMuICBXaGVuIHRoZWlyIG51bWJlciBoYWQgcmVhY2hlZCB0d2VsdmUsIHRoZXkgYmFkZSBmYXJld2VsbCB0byB0aG9zZSB3aG8gc3RheWVkIGJlaGluZCwgc2VudCBhIG1lc3NlbmdlciBiZWZvcmUgdGhlbSB0byBDaGFyb24sIGFuZCBzZXQgb3V0IGluIHNob3J0IGNsb2FrcywgdGFraW5nIGh1bnRpbmcgZG9ncyBhbmQgbmV0cyB3aXRoIHRoZW0sIHRoYXQgYW55b25lIHdobyBtZXQgdGhlbSBvbiB0aGUgcm9hZCBtaWdodCBub3Qgc3VzcGVjdCB0aGVpciBwdXJwb3NlLCBidXQgdGFrZSB0aGVtIGZvciBodW50ZXJzIGJlYXRpbmcgYWJvdXQgdGhlIGNvdW50cnkuCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlXaGVuIHRoZWlyIG1lc3NlbmdlciBjYW1lIHRvIENoYXJvbiBhbmQgdG9sZCBoaW0gdGhleSB3ZXJlIG9uIHRoZSB3YXksIENoYXJvbiBoaW1zZWxmIGRpZCBub3QgY2hhbmdlIGhpcyBtaW5kIGF0IGFsbCBldmVuIHRob3VnaCB0aGUgaG91ciBvZiBwZXJpbCBkcmV3IG5pZ2gsIGJ1dCB3YXMgYSBtYW4gb2YgaGlzIHdvcmQgYW5kIHByZXBhcmVkIGhpcyBob3VzZSB0byByZWNlaXZlIHRoZW07IGEgY2VydGFpbiBIaXBwb3N0aGVuaWRhcywgaG93ZXZlciwgbm90IGEgYmFkIG1hbiwgbmF5LCBib3RoIHBhdHJpb3RpYyBhbmQgd2VsbCBkaXNwb3NlZCB0b3dhcmRzIHRoZSBleGlsZXMsIGJ1dCBsYWNraW5nIGluIHRoYXQgZGVncmVlIG9mIGJvbGRuZXNzIHdoaWNoIHRoZSBzaGFycCBjcmlzaXMgYW5kIHRoZSBwcm9qZWN0ZWQgZW50ZXJwcmlzZSBkZW1hbmRlZCwgd2FzIG1hZGUgZGl6enksIHNvIHRvIHNwZWFrLCBieSB0aGUgbWFnbml0dWRlIG9mIHRoZSBzdHJ1Z2dsZSBub3cgc28gY2xvc2UgYXQgaGFuZCwgYW5kIGF0IGxhc3QgY29tcHJlaGVuZGVkIHRoYXQsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmluIHVuZGVydGFraW5nIHRvIG92ZXJ0aHJvdyB0aGUgYXJtZWQgZm9yY2UgaW4gdGhlIGNpdHksIHRoZXkgd2VyZSBpbiBhIG1hbm5lciB0cnlpbmcgdG8gc2hha2UgdGhlIGVtcGlyZSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCBoYWQgcGxhY2VkIHRoZWlyIHJlbGlhbmNlIG9uIHRoZSBob3BlcyBvZiBtZW4gaW4gZXhpbGUgYW5kIHdpdGhvdXQgcmVzb3VyY2VzLiAgSGUgdGhlcmVmb3JlIHdlbnQgcXVpZXRseSBob21lLCBhbmQgc2VudCBvbmUgb2YgaGlzIGZyaWVuZHMgdG8gTWVsb24gYW5kIFBlbG9waWRhcywgdXJnaW5nIHRoZW0gdG8gcG9zdHBvbmUgdGhlIGVudGVycHJpc2UgZm9yIHRoZSBwcmVzZW50LCBnbyBiYWNrIHRvIEF0aGVucywgYW5kIGF3YWl0IGEgbW9yZSBmYXZvdXJhYmxlIG9wcG9ydHVuaXR5LiBDaGxpZG9uIHdhcyB0aGUgbmFtZSBvZiB0aGlzIG1lc3NlbmdlciwgYW5kIGdvaW5nIHRvIGhpcyBvd24gaG9tZSBpbiBoYXN0ZSwgaGUgYnJvdWdodCBvdXQgaGlzIGhvcnNlIGFuZCBhc2tlZCBmb3IgdGhlIGJyaWRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHdpZmUsIGhvd2V2ZXIsIHdhcyBlbWJhcnJhc3NlZCBiZWNhdXNlIHNoZSBjb3VsZCBub3QgZ2l2ZSBpdCB0byBoaW0sIGFuZCBzYWlkIHNoZSBoYWQgbGVudCBpdCB0byBhIG5laWdoYm91ci4gIFdvcmRzIG9mIGFidXNlIHdlcmUgZm9sbG93ZWQgYnkgaW1wcmVjYXRpb25zLCBhbmQgaGlzIHdpZmUgcHJheWVkIHRoYXQgdGhlIGpvdXJuZXkgbWlnaHQgcHJvdmUgZmF0YWwgYm90aCB0byBoaW0gYW5kIHRvIHRob3NlIHRoYXQgc2VudCBoaW0uIENobGlkb24sIHRoZXJlZm9yZSwgYWZ0ZXIgc3BlbmRpbmcgYSBncmVhdCBwYXJ0IG9mIHRoZSBkYXkgaW4gdGhpcyBhbmdyeSBzcXVhYmJsZSwgYW5kIGFmdGVyIG1ha2luZyB1cCBoaXMgbWluZCwgdG9vLCB0aGF0IHdoYXQgaGFkIGhhcHBlbmVkIHdhcyBvbWlub3VzLCBnYXZlIHVwIGhpcyBqb3VybmV5IGVudGlyZWx5IGFuZCB0dXJuZWQgaGlzIHRob3VnaHRzIHRvIHNvbWV0aGluZyBlbHNlLiAgU28gbmVhciBjYW4gdGhlIGdyZWF0ZXN0IGFuZCBmYWlyZXN0IGVudGVycHJpc2VzIGNvbWUsIGF0IHRoZSB2ZXJ5IG91dHNldCwgdG8gbWlzc2luZyB0aGVpciBvcHBvcnR1bml0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIGRheSBmb3IgdGhlIGVudGVycHJpc2UgaGF2aW5nIGJlZW4gZml4ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgd2ludGVyIG9mIDM3OSBCLkMuPC9ub3RlPiB0aGUgZXhpbGVzIGRlY2lkZWQgdGhhdCBQaGVyZW5pY3VzLCB3aXRoIHRoZSByZXN0IG9mIHRoZSBwYXJ0eSB1bmRlciBoaXMgY29tbWFuZCwgc2hvdWxkIHJlbWFpbiBpbiB0aGUgVGhyaWFzaWFuIHBsYWluLCB3aGlsZSBhIGZldyBvZiB0aGUgeW91bmdlc3QgdG9vayB0aGUgcmlzayBvZiBnb2luZyBmb3J3YXJkIGludG8gdGhlIGNpdHk7IGFuZCBpZiBhbnl0aGluZyBoYXBwZW5lZCB0byB0aGVzZSBhdCB0aGUgaGFuZHMgb2YgdGhlaXIgZW5lbWllcywgdGhlIHJlc3Qgc2hvdWxkIGFsbCBzZWUgdG8gaXQgdGhhdCBuZWl0aGVyIHRoZWlyIGNoaWxkcmVuIG5vciB0aGVpciBwYXJlbnRzIGNhbWUgdG8gYW55IHdhbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlbG9waWRhcyB3YXMgZmlyc3QgdG8gdW5kZXJ0YWtlIHRoZSBlbnRlcnByaXNlLCB0aGVuIE1lbG9uLCBEYW1vY2xlaWRlcywgYW5kIFRoZW9wb21wdXMsIG1lbiBvZiBmb3JlbW9zdCBmYW1pbGllcywgYW5kIG9mIG11dHVhbCBmaWRlbGl0eSBhbmQgZnJpZW5kc2hpcCwgYWx0aG91Z2ggaW4gdGhlIHJhY2UgZm9yIGhlcm9pYyBhY2hpZXZlbWVudCBhbmQgZ2xvcnkgdGhleSB3ZXJlIGNvbnN0YW50IHJpdmFscy4gIFdoZW4gdGhlaXIgbnVtYmVyIGhhZCByZWFjaGVkIHR3ZWx2ZSwgdGhleSBiYWRlIGZhcmV3ZWxsIHRvIHRob3NlIHdobyBzdGF5ZWQgYmVoaW5kLCBzZW50IGEgbWVzc2VuZ2VyIGJlZm9yZSB0aGVtIHRvIENoYXJvbiwgYW5kIHNldCBvdXQgaW4gc2hvcnQgY2xvYWtzLCB0YWtpbmcgaHVudGluZyBkb2dzIGFuZCBuZXRzIHdpdGggdGhlbSwgdGhhdCBhbnlvbmUgd2hvIG1ldCB0aGVtIG9uIHRoZSByb2FkIG1pZ2h0IG5vdCBzdXNwZWN0IHRoZWlyIHB1cnBvc2UsIGJ1dCB0YWtlIHRoZW0gZm9yIGh1bnRlcnMgYmVhdGluZyBhYm91dCB0aGUgY291bnRyeS4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJV2hlbiB0aGVpciBtZXNzZW5nZXIgY2FtZSB0byBDaGFyb24gYW5kIHRvbGQgaGltIHRoZXkgd2VyZSBvbiB0aGUgd2F5LCBDaGFyb24gaGltc2VsZiBkaWQgbm90IGNoYW5nZSBoaXMgbWluZCBhdCBhbGwgZXZlbiB0aG91Z2ggdGhlIGhvdXIgb2YgcGVyaWwgZHJldyBuaWdoLCBidXQgd2FzIGEgbWFuIG9mIGhpcyB3b3JkIGFuZCBwcmVwYXJlZCBoaXMgaG91c2UgdG8gcmVjZWl2ZSB0aGVtOyBhIGNlcnRhaW4gSGlwcG9zdGhlbmlkYXMsIGhvd2V2ZXIsIG5vdCBhIGJhZCBtYW4sIG5heSwgYm90aCBwYXRyaW90aWMgYW5kIHdlbGwgZGlzcG9zZWQgdG93YXJkcyB0aGUgZXhpbGVzLCBidXQgbGFja2luZyBpbiB0aGF0IGRlZ3JlZSBvZiBib2xkbmVzcyB3aGljaCB0aGUgc2hhcnAgY3Jpc2lzIGFuZCB0aGUgcHJvamVjdGVkIGVudGVycHJpc2UgZGVtYW5kZWQsIHdhcyBtYWRlIGRpenp5LCBzbyB0byBzcGVhaywgYnkgdGhlIG1hZ25pdHVkZSBvZiB0aGUgc3RydWdnbGUgbm93IHNvIGNsb3NlIGF0IGhhbmQsIGFuZCBhdCBsYXN0IGNvbXByZWhlbmRlZCB0aGF0LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmluIHVuZGVydGFraW5nIHRvIG92ZXJ0aHJvdyB0aGUgYXJtZWQgZm9yY2UgaW4gdGhlIGNpdHksIHRoZXkgd2VyZSBpbiBhIG1hbm5lciB0cnlpbmcgdG8gc2hha2UgdGhlIGVtcGlyZSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCBoYWQgcGxhY2VkIHRoZWlyIHJlbGlhbmNlIG9uIHRoZSBob3BlcyBvZiBtZW4gaW4gZXhpbGUgYW5kIHdpdGhvdXQgcmVzb3VyY2VzLiAgSGUgdGhlcmVmb3JlIHdlbnQgcXVpZXRseSBob21lLCBhbmQgc2VudCBvbmUgb2YgaGlzIGZyaWVuZHMgdG8gTWVsb24gYW5kIFBlbG9waWRhcywgdXJnaW5nIHRoZW0gdG8gcG9zdHBvbmUgdGhlIGVudGVycHJpc2UgZm9yIHRoZSBwcmVzZW50LCBnbyBiYWNrIHRvIEF0aGVucywgYW5kIGF3YWl0IGEgbW9yZSBmYXZvdXJhYmxlIG9wcG9ydHVuaXR5LiBDaGxpZG9uIHdhcyB0aGUgbmFtZSBvZiB0aGlzIG1lc3NlbmdlciwgYW5kIGdvaW5nIHRvIGhpcyBvd24gaG9tZSBpbiBoYXN0ZSwgaGUgYnJvdWdodCBvdXQgaGlzIGhvcnNlIGFuZCBhc2tlZCBmb3IgdGhlIGJyaWRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhpcyB3aWZlLCBob3dldmVyLCB3YXMgZW1iYXJyYXNzZWQgYmVjYXVzZSBzaGUgY291bGQgbm90IGdpdmUgaXQgdG8gaGltLCBhbmQgc2FpZCBzaGUgaGFkIGxlbnQgaXQgdG8gYSBuZWlnaGJvdXIuICBXb3JkcyBvZiBhYnVzZSB3ZXJlIGZvbGxvd2VkIGJ5IGltcHJlY2F0aW9ucywgYW5kIGhpcyB3aWZlIHByYXllZCB0aGF0IHRoZSBqb3VybmV5IG1pZ2h0IHByb3ZlIGZhdGFsIGJvdGggdG8gaGltIGFuZCB0byB0aG9zZSB0aGF0IHNlbnQgaGltLiBDaGxpZG9uLCB0aGVyZWZvcmUsIGFmdGVyIHNwZW5kaW5nIGEgZ3JlYXQgcGFydCBvZiB0aGUgZGF5IGluIHRoaXMgYW5ncnkgc3F1YWJibGUsIGFuZCBhZnRlciBtYWtpbmcgdXAgaGlzIG1pbmQsIHRvbywgdGhhdCB3aGF0IGhhZCBoYXBwZW5lZCB3YXMgb21pbm91cywgZ2F2ZSB1cCBoaXMgam91cm5leSBlbnRpcmVseSBhbmQgdHVybmVkIGhpcyB0aG91Z2h0cyB0byBzb21ldGhpbmcgZWxzZS4gIFNvIG5lYXIgY2FuIHRoZSBncmVhdGVzdCBhbmQgZmFpcmVzdCBlbnRlcnByaXNlcyBjb21lLCBhdCB0aGUgdmVyeSBvdXRzZXQsIHRvIG1pc3NpbmcgdGhlaXIgb3Bwb3J0dW5pdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBlbG9waWRhcyBhbmQgaGlzIGNvbXBhbmlvbnMsIGFmdGVyIHB1dHRpbmcgb24gdGhlIGRyZXNzIG9mIHBlYXNhbnRzLCBhbmQgc2VwYXJhdGluZywgZW50ZXJlZCB0aGUgY2l0eSBhdCBkaWZmZXJlbnQgcG9pbnRzIHdoaWxlIGl0IHdhcyB5ZXQgZGF5LiBUaGVyZSB3YXMgc29tZSB3aW5kIGFuZCBzbm93IGFzIHRoZSB3ZWF0aGVyIGJlZ2FuIHRvIGNoYW5nZSwgYW5kIHRoZXkgd2VyZSB0aGUgbW9yZSB1bm9ic2VydmVkIGJlY2F1c2UgbW9zdCBwZW9wbGUgaGFkIGFscmVhZHkgdGFrZW4gcmVmdWdlIGZyb20gdGhlIHN0b3JtIGluIHRoZWlyIGhvdXNlcy4gIFRob3NlLCBob3dldmVyLCB3aG9zZSBidXNpbmVzcyBpdCB3YXMgdG8ga25vdyB3aGF0IHdhcyBnb2luZyBvbiwgcmVjZWl2ZWQgdGhlIHZpc2l0b3JzIGFzIHRoZXkgY2FtZSwgYW5kIGJyb3VnaHQgdGhlbSBhdCBvbmNlIHRvIHRoZSBob3VzZSBvZiBDaGFyb247IGFuZCB0aGVyZSB3ZXJlLCBjb3VudGluZyB0aGUgZXhpbGVzLCBmb3J0eS1laWdodCBvZiB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGVsb3BpZGFzIGFuZCBoaXMgY29tcGFuaW9ucywgYWZ0ZXIgcHV0dGluZyBvbiB0aGUgZHJlc3Mgb2YgcGVhc2FudHMsIGFuZCBzZXBhcmF0aW5nLCBlbnRlcmVkIHRoZSBjaXR5IGF0IGRpZmZlcmVudCBwb2ludHMgd2hpbGUgaXQgd2FzIHlldCBkYXkuIFRoZXJlIHdhcyBzb21lIHdpbmQgYW5kIHNub3cgYXMgdGhlIHdlYXRoZXIgYmVnYW4gdG8gY2hhbmdlLCBhbmQgdGhleSB3ZXJlIHRoZSBtb3JlIHVub2JzZXJ2ZWQgYmVjYXVzZSBtb3N0IHBlb3BsZSBoYWQgYWxyZWFkeSB0YWtlbiByZWZ1Z2UgZnJvbSB0aGUgc3Rvcm0gaW4gdGhlaXIgaG91c2VzLiAgVGhvc2UsIGhvd2V2ZXIsIHdob3NlIGJ1c2luZXNzIGl0IHdhcyB0byBrbm93IHdoYXQgd2FzIGdvaW5nIG9uLCByZWNlaXZlZCB0aGUgdmlzaXRvcnMgYXMgdGhleSBjYW1lLCBhbmQgYnJvdWdodCB0aGVtIGF0IG9uY2UgdG8gdGhlIGhvdXNlIG9mIENoYXJvbjsgYW5kIHRoZXJlIHdlcmUsIGNvdW50aW5nIHRoZSBleGlsZXMsIGZvcnR5LWVpZ2h0IG9mIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHR5cmFudHMsIG1hdHRlcnMgc3Rvb2QgYXMgZm9sbG93cy4gUGhpbGxpZGFzLCB0aGVpciBzZWNyZXRhcnksIGFzIEkgaGF2ZSBzYWlkLCB3YXMgcHJpdnkgdG8gdGhlIHBsYW5zIG9mIHRoZSBleGlsZXMgYW5kIHdhcyBjb29wZXJhdGluZyBmdWxseSB3aXRoIHRoZW0sIGFuZCBzb21lIHRpbWUgYmVmb3JlIGhhZCBwcm9wb3NlZCBmb3IgdGhhdCBkYXkgdGhhdCBBcmNoaWFzIGFuZCBoaXMgZnJpZW5kcyBzaG91bGQgaGF2ZSBhIGRyaW5raW5nLWJvdXQsIGF0IHdoaWNoIGEgZmV3IG1hcnJpZWQgd29tZW4gc2hvdWxkIGpvaW4gdGhlbSwgaGlzIHNjaGVtZSBiZWluZyB0aGF0IHdoZW4gdGhleSB3ZXJlIGZ1bGwgb2Ygd2luZSBhbmQgY29tcGxldGVseSByZWxheGVkIGluIHRoZWlyIHBsZWFzdXJlcywgaGUgd291bGQgZGVsaXZlciB0aGVtIGludG8gdGhlIGhhbmRzIG9mIHRoZWlyIGFzc2FpbGFudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgdGhlIHBhcnR5IHdlcmUgdmVyeSBkZWVwIGluIHRoZWlyIGN1cHMsIHNvbWUgaW5mb3JtYXRpb24gd2FzIHN1ZGRlbmx5IGJyb3VnaHQgdGhlbSwgbm90IGZhbHNlLCBpbmRlZWQsIGJ1dCB1bmNlcnRhaW4gYW5kIHZlcnkgdmFndWUsIHRoYXQgdGhlIGV4aWxlcyB3ZXJlIGNvbmNlYWxlZCBpbiB0aGUgY2l0eS4gQWx0aG91Z2ggUGhpbGxpZGFzIHRyaWVkIHRvIGNoYW5nZSB0aGUgc3ViamVjdCwgQXJjaGlhcyBuZXZlcnRoZWxlc3Mgc2VudCBvbmUgb2YgaGlzIGF0dGVuZGFudHMgdG8gQ2hhcm9uLCBjb21tYW5kaW5nIGhpbSB0byBjb21lIHRvIGhpbSBhdCBvbmNlLiBJdCB3YXMgZXZlbmluZywgYW5kIFBlbG9waWRhcyBhbmQgaGlzIGNvbXBhbmlvbnMgaW4gQ2hhcm9uJ3MgaG91c2Ugd2VyZSBnZXR0aW5nIHRoZW1zZWx2ZXMgcmVhZHkgZm9yIGFjdGlvbiwgaGF2aW5nIGFscmVhZHkgcHV0IG9uIHRoZWlyIGJyZWFzdHBsYXRlcyBhbmQgdGFrZW4gdXAgdGhlaXIgc3dvcmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZXJlIHdhcyBhIHN1ZGRlbiBrbm9ja2luZyBhdCB0aGUgZG9vci4gIFNvbWVvbmUgcmFuIHRvIGl0LCBsZWFybmVkIGZyb20gdGhlIGF0dGVuZGFudCB0aGF0IGhlIHdhcyBjb21lIGZyb20gdGhlIHBvbGVtYXJjaHMgd2l0aCBhIHN1bW1vbnMgZm9yIENoYXJvbiwgYW5kIGJyb3VnaHQgdGhlIG5ld3MgaW5zaWRlLCBtdWNoIHBlcnR1cmJlZC4gQWxsIHdlcmUgYXQgb25jZSBjb252aW5jZWQgdGhhdCB0aGVpciBlbnRlcnByaXNlIGhhZCBiZWVuIHJldmVhbGVkLCBhbmQgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgd2VyZSBhbGwgbG9zdCwgYmVmb3JlIHRoZXkgaGFkIGV2ZW4gZG9uZSBhbnl0aGluZyB3b3J0aHkgb2YgdGhlaXIgdmFsb3VyLiAgSG93ZXZlciwgdGhleSBkZWNpZGVkIHRoYXQgQ2hhcm9uIG11c3Qgb2JleSB0aGUgc3VtbW9ucyBhbmQgcHJlc2VudCBoaW1zZWxmIGJvbGRseSBiZWZvcmUgdGhlIG1hZ2lzdHJhdGVzLiAgQ2hhcm9uIHdhcyBnZW5lcmFsbHkgYW4gaW50cmVwaWQgbWFuIGFuZCBvZiBhIHN0ZXJuIGNvdXJhZ2UgaW4gdGhlIGZhY2Ugb2YgZGFuZ2VyLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaW4gdGhpcyBjYXNlIGhlIHdhcyBtdWNoIGNvbmNlcm5lZCBhbmQgZnJpZ2h0ZW5lZCBvbiBhY2NvdW50IG9mIGhpcyBmcmllbmRzLCBhcmlkIGZlYXJlZCB0aGF0IHNvdXNlIHN1c3BpY2lvbiBvZiB0cmVhY2hlcnkgd291bGQgZmFsbCB1cG9uIGhpbSBpZiBzbyBtYW55IGFuZCBzdWNoIGV4Y2VsbGVudCBjaXRpemVucyBub3cgbG9zdCB0aGVpciBsaXZlcy4gIEFjY29yZGluZ2x5LCBhcyBoZSB3YXMgYWJvdXQgdG8gZGVwYXJ0LCBoZSBicm91Z2h0IGhpcyBzb24gZnJvbSB0aGUgd29tZW4ncyBhcGFydG1lbnRzLCBhIG1lcmUgYm95IGFzIHlldCwgYnV0IGluIGJlYXV0eSBhbmQgYm9kaWx5IHN0cmVuZ3RoIHN1cnBhc3NpbmcgdGhvc2Ugb2YgaGlzIHllYXJzLCBhbmQgcHV0IGhpbSBpbiB0aGUgaGFuZHMgb2YgUGVsb3BpZGFzLCB0ZWxsaW5nIGhpbSB0aGF0IGlmIGhlIGZvdW5kIGFueSBndWlsZSBvciB0cmVhY2hlcnkgaW4gdGhlIGZhdGhlciwgaGUgbXVzdCB0cmVhdCB0aGUgc29uIGFzIGFuIGVuZW15IGFuZCBzaG93IGhpbSBubyBtZXJjeS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSB3ZXJlIG1vdmVkIHRvIHRlYXJzIGJ5IHRoZSBub2JsZSBjb25jZXJuIHdoaWNoIENoYXJvbiBzaG93ZWQsIGFuZCBhbGwgd2VyZSBpbmRpZ25hbnQgdGhhdCBoZSBzaG91bGQgdGhpbmsgYW55IG9uZSBvZiB0aGVtIHNvIGRlbW9yYWxpemVkIGJ5IHRoZSBwcmVzZW50IHBlcmlsIGFuZCBzbyBtZWFuLXNwaXJpdGVkIGFzIHRvIHN1c3BlY3QgaGltIG9yIGJsYW1lIGhpbSBpbiB0aGUgbGVhc3QuICAgICAgVGhleSBhbHNvIGJlZ2dlZCBoaW0gbm90IHRvIGludm9sdmUgaGlzIHNvbiB3aXRoIHRoZW0sIGJ1dCB0byBwdXQgaGltIG91dCBvZiBoYXJtJ3Mgd2F5LCB0aGF0IGhlIG1pZ2h0IGVzY2FwZSB0aGUgdHlyYW50cyBhbmQgbGl2ZSB0byBiZWNvbWUgYW4gYXZlbmdlciBvZiBoaXMgY2l0eSBhbmQgaGlzIGZyaWVuZHMuICAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5DaGFyb24sIGhvd2V2ZXIsIHJlZnVzZWQgdG8gdGFrZSBoaXMgc29uIGF3YXksIGFza2luZyBpZiBhbnkga2luZCBvZiBsaWZlIG9yIGFueSBzYWZldHkgY291bGQgYmUgbW9yZSBob25vdXJhYmxlIGZvciBoaW0gdGhhbiBhIGRlY29yb3VzIGRlYXRoIHdpdGggaGlzIGZhdGhlciBhbmQgYWxsIHRoZXNlIGZyaWVuZHMuIFRoZW4gaGUgYWRkcmVzc2VkIHRoZSBnb2RzIGluIHByYXllciwgYW5kIGFmdGVyIGVtYnJhY2luZyBhbmQgZW5jb3VyYWdpbmcgdGhlbSBhbGwsIHdlbnQgaGlzIHdheSwgc3RyaXZpbmcgc28gdG8gY29tcG9zZSBoaXMgY291bnRlbmFuY2UgYW5kIG1vZHVsYXRlIGhpcyB2b2ljZSBhcyBub3QgdG8gYmV0cmF5IHdoYXQgaGUgd2FzIHJlYWxseSBkb2luZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHR5cmFudHMsIG1hdHRlcnMgc3Rvb2QgYXMgZm9sbG93cy4gUGhpbGxpZGFzLCB0aGVpciBzZWNyZXRhcnksIGFzIEkgaGF2ZSBzYWlkLCB3YXMgcHJpdnkgdG8gdGhlIHBsYW5zIG9mIHRoZSBleGlsZXMgYW5kIHdhcyBjb29wZXJhdGluZyBmdWxseSB3aXRoIHRoZW0sIGFuZCBzb21lIHRpbWUgYmVmb3JlIGhhZCBwcm9wb3NlZCBmb3IgdGhhdCBkYXkgdGhhdCBBcmNoaWFzIGFuZCBoaXMgZnJpZW5kcyBzaG91bGQgaGF2ZSBhIGRyaW5raW5nLWJvdXQsIGF0IHdoaWNoIGEgZmV3IG1hcnJpZWQgd29tZW4gc2hvdWxkIGpvaW4gdGhlbSwgaGlzIHNjaGVtZSBiZWluZyB0aGF0IHdoZW4gdGhleSB3ZXJlIGZ1bGwgb2Ygd2luZSBhbmQgY29tcGxldGVseSByZWxheGVkIGluIHRoZWlyIHBsZWFzdXJlcywgaGUgd291bGQgZGVsaXZlciB0aGVtIGludG8gdGhlIGhhbmRzIG9mIHRoZWlyIGFzc2FpbGFudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBiZWZvcmUgdGhlIHBhcnR5IHdlcmUgdmVyeSBkZWVwIGluIHRoZWlyIGN1cHMsIHNvbWUgaW5mb3JtYXRpb24gd2FzIHN1ZGRlbmx5IGJyb3VnaHQgdGhlbSwgbm90IGZhbHNlLCBpbmRlZWQsIGJ1dCB1bmNlcnRhaW4gYW5kIHZlcnkgdmFndWUsIHRoYXQgdGhlIGV4aWxlcyB3ZXJlIGNvbmNlYWxlZCBpbiB0aGUgY2l0eS4gQWx0aG91Z2ggUGhpbGxpZGFzIHRyaWVkIHRvIGNoYW5nZSB0aGUgc3ViamVjdCwgQXJjaGlhcyBuZXZlcnRoZWxlc3Mgc2VudCBvbmUgb2YgaGlzIGF0dGVuZGFudHMgdG8gQ2hhcm9uLCBjb21tYW5kaW5nIGhpbSB0byBjb21lIHRvIGhpbSBhdCBvbmNlLiBJdCB3YXMgZXZlbmluZywgYW5kIFBlbG9waWRhcyBhbmQgaGlzIGNvbXBhbmlvbnMgaW4gQ2hhcm9uJ3MgaG91c2Ugd2VyZSBnZXR0aW5nIHRoZW1zZWx2ZXMgcmVhZHkgZm9yIGFjdGlvbiwgaGF2aW5nIGFscmVhZHkgcHV0IG9uIHRoZWlyIGJyZWFzdHBsYXRlcyBhbmQgdGFrZW4gdXAgdGhlaXIgc3dvcmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlcmUgd2FzIGEgc3VkZGVuIGtub2NraW5nIGF0IHRoZSBkb29yLiAgU29tZW9uZSByYW4gdG8gaXQsIGxlYXJuZWQgZnJvbSB0aGUgYXR0ZW5kYW50IHRoYXQgaGUgd2FzIGNvbWUgZnJvbSB0aGUgcG9sZW1hcmNocyB3aXRoIGEgc3VtbW9ucyBmb3IgQ2hhcm9uLCBhbmQgYnJvdWdodCB0aGUgbmV3cyBpbnNpZGUsIG11Y2ggcGVydHVyYmVkLiBBbGwgd2VyZSBhdCBvbmNlIGNvbnZpbmNlZCB0aGF0IHRoZWlyIGVudGVycHJpc2UgaGFkIGJlZW4gcmV2ZWFsZWQsIGFuZCB0aGF0IHRoZXkgdGhlbXNlbHZlcyB3ZXJlIGFsbCBsb3N0LCBiZWZvcmUgdGhleSBoYWQgZXZlbiBkb25lIGFueXRoaW5nIHdvcnRoeSBvZiB0aGVpciB2YWxvdXIuICBIb3dldmVyLCB0aGV5IGRlY2lkZWQgdGhhdCBDaGFyb24gbXVzdCBvYmV5IHRoZSBzdW1tb25zIGFuZCBwcmVzZW50IGhpbXNlbGYgYm9sZGx5IGJlZm9yZSB0aGUgbWFnaXN0cmF0ZXMuICBDaGFyb24gd2FzIGdlbmVyYWxseSBhbiBpbnRyZXBpZCBtYW4gYW5kIG9mIGEgc3Rlcm4gY291cmFnZSBpbiB0aGUgZmFjZSBvZiBkYW5nZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpbiB0aGlzIGNhc2UgaGUgd2FzIG11Y2ggY29uY2VybmVkIGFuZCBmcmlnaHRlbmVkIG9uIGFjY291bnQgb2YgaGlzIGZyaWVuZHMsIGFyaWQgZmVhcmVkIHRoYXQgc291c2Ugc3VzcGljaW9uIG9mIHRyZWFjaGVyeSB3b3VsZCBmYWxsIHVwb24gaGltIGlmIHNvIG1hbnkgYW5kIHN1Y2ggZXhjZWxsZW50IGNpdGl6ZW5zIG5vdyBsb3N0IHRoZWlyIGxpdmVzLiAgQWNjb3JkaW5nbHksIGFzIGhlIHdhcyBhYm91dCB0byBkZXBhcnQsIGhlIGJyb3VnaHQgaGlzIHNvbiBmcm9tIHRoZSB3b21lbidzIGFwYXJ0bWVudHMsIGEgbWVyZSBib3kgYXMgeWV0LCBidXQgaW4gYmVhdXR5IGFuZCBib2RpbHkgc3RyZW5ndGggc3VycGFzc2luZyB0aG9zZSBvZiBoaXMgeWVhcnMsIGFuZCBwdXQgaGltIGluIHRoZSBoYW5kcyBvZiBQZWxvcGlkYXMsIHRlbGxpbmcgaGltIHRoYXQgaWYgaGUgZm91bmQgYW55IGd1aWxlIG9yIHRyZWFjaGVyeSBpbiB0aGUgZmF0aGVyLCBoZSBtdXN0IHRyZWF0IHRoZSBzb24gYXMgYW4gZW5lbXkgYW5kIHNob3cgaGltIG5vIG1lcmN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgd2VyZSBtb3ZlZCB0byB0ZWFycyBieSB0aGUgbm9ibGUgY29uY2VybiB3aGljaCBDaGFyb24gc2hvd2VkLCBhbmQgYWxsIHdlcmUgaW5kaWduYW50IHRoYXQgaGUgc2hvdWxkIHRoaW5rIGFueSBvbmUgb2YgdGhlbSBzbyBkZW1vcmFsaXplZCBieSB0aGUgcHJlc2VudCBwZXJpbCBhbmQgc28gbWVhbi1zcGlyaXRlZCBhcyB0byBzdXNwZWN0IGhpbSBvciBibGFtZSBoaW0gaW4gdGhlIGxlYXN0LiAgICAgIFRoZXkgYWxzbyBiZWdnZWQgaGltIG5vdCB0byBpbnZvbHZlIGhpcyBzb24gd2l0aCB0aGVtLCBidXQgdG8gcHV0IGhpbSBvdXQgb2YgaGFybSdzIHdheSwgdGhhdCBoZSBtaWdodCBlc2NhcGUgdGhlIHR5cmFudHMgYW5kIGxpdmUgdG8gYmVjb21lIGFuIGF2ZW5nZXIgb2YgaGlzIGNpdHkgYW5kIGhpcyBmcmllbmRzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNoYXJvbiwgaG93ZXZlciwgcmVmdXNlZCB0byB0YWtlIGhpcyBzb24gYXdheSwgYXNraW5nIGlmIGFueSBraW5kIG9mIGxpZmUgb3IgYW55IHNhZmV0eSBjb3VsZCBiZSBtb3JlIGhvbm91cmFibGUgZm9yIGhpbSB0aGFuIGEgZGVjb3JvdXMgZGVhdGggd2l0aCBoaXMgZmF0aGVyIGFuZCBhbGwgdGhlc2UgZnJpZW5kcy4gVGhlbiBoZSBhZGRyZXNzZWQgdGhlIGdvZHMgaW4gcHJheWVyLCBhbmQgYWZ0ZXIgZW1icmFjaW5nIGFuZCBlbmNvdXJhZ2luZyB0aGVtIGFsbCwgd2VudCBoaXMgd2F5LCBzdHJpdmluZyBzbyB0byBjb21wb3NlIGhpcyBjb3VudGVuYW5jZSBhbmQgbW9kdWxhdGUgaGlzIHZvaWNlIGFzIG5vdCB0byBiZXRyYXkgd2hhdCBoZSB3YXMgcmVhbGx5IGRvaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHJlYWNoZWQgdGhlIGRvb3Igb2YgdGhlIGhvdXNlLCBBcmNoaWFzIGNhbWUgb3V0IHRvIGhpbSwgd2l0aCBQaGlsbGlkYXMsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNoYXJvbiwgSSBoYXZlIGhlYXJkIHRoYXQgY2VydGFpbiBtZW4gaGF2ZSBjb21lIGFuZCBoaWQgdGhlbXNlbHZlcyBpbiB0aGUgY2l0eSwgYW5kIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgYXJlIGluIGNvbGx1c2lvbiB3aXRoIHRoZW0uPC9xPiBDaGFyb24gd2FzIGRpc3R1cmJlZCBhdCBmaXJzdCwgYnV0IG9uIGFza2luZyB3aG8gdGhlIG1lbiB3ZXJlIHRoYXQgaGFkIGNvbWUgYW5kIHdobyB3ZXJlIGNvbmNlYWxpbmcgdGhlbSwgaGUgc2F3IHRoYXQgQXJjaGlhcyBjb3VsZCBnaXZlIG5vIGNsZWFyIGFjY291bnQgb2YgdGhlIG1hdHRlciwgYW5kIGNvbmplY3R1cmVkIHRoYXQgaGlzIGluZm9ybWF0aW9uIGhhZCBub3QgY29tZSBmcm9tIGFueSBvZiB0aG9zZSB3aG8gd2VyZSBwcml2eSB0byB0aGUgcGxvdC4gSGUgdGhlcmVmb3JlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8gbm90LCB0aGVuLCBzdWZmZXIgYW55IGVtcHR5IHJ1bW91ciB0byBkaXN0dXJiIHlvdS4gIEhvd2V2ZXIsIEkgd2lsbCBsb29rIGludG8gdGhlIG1hdHRlcjsgZm9yIHBlcmhhcHMgbm8gc3Rvcnkgc2hvdWxkIGJlIGlnbm9yZWQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxsaWRhcywgdG9vLCB3aG8gc3Rvb2QgYnksIGFwcHJvdmVkIG9mIHRoaXMsIGFuZCBhZnRlciBsZWFkaW5nIEFyY2hpYXMgYmFjaywgZ290IGhpbSB0byBkcmluayBoYXJkLCBhbmQgdHJpZWQgdG8gcHJvdHJhY3QgdGhlIHJldmVsIHdpdGggaG9wZXMgb2YgYSB2aXNpdCBmcm9tIHRoZSB3b21lbi4gQnV0IENoYXJvbiwgd2hlbiBoZSBnb3QgYmFjayBob21lLCBhbmQgZm91bmQgdGhlIG1lbiB0aGVyZSBkaXNwb3NlZCwgbm90IHRvIGV4cGVjdCBzYWZldHkgb3IgdmljdG9yeSBhdCBhbGwsIGJ1dCB0byBkaWUgZ2xvcmlvdXNseSBhZnRlciBhIGdyZWF0IHNsYXVnaHRlciBvZiB0aGVpciBlbmVtaWVzLCB0b2xkIHRoZSB0cnV0aCBvbmx5IHRvIFBlbG9waWRhcyBoaW1zZWxmLCB3aGlsZSBmb3IgdGhlIHJlc3QgaGUgY29uY29jdGVkIGEgZmFsc2UgdGFsZSB0aGF0IEFyY2hpYXMgaGFkIHRhbGtlZCB3aXRoIGhpbSBhYm91dCBvdGhlciBtYXR0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBQbHV0YXJjaCdzIGxlbmd0aHkgdmVyc2lvbiBvZiB0aGlzIGFmZmFpciBpbiBoaXMgPHRpdGxlPkRpc2NvdXJzZSBjb25jZXJuaW5nIHRoZSBEYWVtb24gb2YgU29jcmF0ZXM8L3RpdGxlPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNTk1ZiI+Y2hhcHRlciAyOSwgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwLiA1OTUgZi48L2JpYmw+KSwgQ2hhcm9uIGhpZCB0aGUgdHJ1dGggZnJvbSBubyBvbmUuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSByZWFjaGVkIHRoZSBkb29yIG9mIHRoZSBob3VzZSwgQXJjaGlhcyBjYW1lIG91dCB0byBoaW0sIHdpdGggUGhpbGxpZGFzLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNoYXJvbiwgSSBoYXZlIGhlYXJkIHRoYXQgY2VydGFpbiBtZW4gaGF2ZSBjb21lIGFuZCBoaWQgdGhlbXNlbHZlcyBpbiB0aGUgY2l0eSwgYW5kIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgYXJlIGluIGNvbGx1c2lvbiB3aXRoIHRoZW0uPC9xPiBDaGFyb24gd2FzIGRpc3R1cmJlZCBhdCBmaXJzdCwgYnV0IG9uIGFza2luZyB3aG8gdGhlIG1lbiB3ZXJlIHRoYXQgaGFkIGNvbWUgYW5kIHdobyB3ZXJlIGNvbmNlYWxpbmcgdGhlbSwgaGUgc2F3IHRoYXQgQXJjaGlhcyBjb3VsZCBnaXZlIG5vIGNsZWFyIGFjY291bnQgb2YgdGhlIG1hdHRlciwgYW5kIGNvbmplY3R1cmVkIHRoYXQgaGlzIGluZm9ybWF0aW9uIGhhZCBub3QgY29tZSBmcm9tIGFueSBvZiB0aG9zZSB3aG8gd2VyZSBwcml2eSB0byB0aGUgcGxvdC4gSGUgdGhlcmVmb3JlIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EbyBub3QsIHRoZW4sIHN1ZmZlciBhbnkgZW1wdHkgcnVtb3VyIHRvIGRpc3R1cmIgeW91LiAgSG93ZXZlciwgSSB3aWxsIGxvb2sgaW50byB0aGUgbWF0dGVyOyBmb3IgcGVyaGFwcyBubyBzdG9yeSBzaG91bGQgYmUgaWdub3JlZC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxsaWRhcywgdG9vLCB3aG8gc3Rvb2QgYnksIGFwcHJvdmVkIG9mIHRoaXMsIGFuZCBhZnRlciBsZWFkaW5nIEFyY2hpYXMgYmFjaywgZ290IGhpbSB0byBkcmluayBoYXJkLCBhbmQgdHJpZWQgdG8gcHJvdHJhY3QgdGhlIHJldmVsIHdpdGggaG9wZXMgb2YgYSB2aXNpdCBmcm9tIHRoZSB3b21lbi4gQnV0IENoYXJvbiwgd2hlbiBoZSBnb3QgYmFjayBob21lLCBhbmQgZm91bmQgdGhlIG1lbiB0aGVyZSBkaXNwb3NlZCwgbm90IHRvIGV4cGVjdCBzYWZldHkgb3IgdmljdG9yeSBhdCBhbGwsIGJ1dCB0byBkaWUgZ2xvcmlvdXNseSBhZnRlciBhIGdyZWF0IHNsYXVnaHRlciBvZiB0aGVpciBlbmVtaWVzLCB0b2xkIHRoZSB0cnV0aCBvbmx5IHRvIFBlbG9waWRhcyBoaW1zZWxmLCB3aGlsZSBmb3IgdGhlIHJlc3QgaGUgY29uY29jdGVkIGEgZmFsc2UgdGFsZSB0aGF0IEFyY2hpYXMgaGFkIHRhbGtlZCB3aXRoIGhpbSBhYm91dCBvdGhlciBtYXR0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFBsdXRhcmNoJ3MgbGVuZ3RoeSB2ZXJzaW9uIG9mIHRoaXMgYWZmYWlyIGluIGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXNjb3Vyc2UgY29uY2VybmluZyB0aGUgRGFlbW9uIG9mIFNvY3JhdGVzPC90aXRsZT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNTk1ZiI+Y2hhcHRlciAyOSwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDU5NSBmLjwvYmlibD4pLCBDaGFyb24gaGlkIHRoZSB0cnV0aCBmcm9tIG5vIG9uZS48L25vdGU+CgkJCSAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpc2NvdXJzZSBjb25jZXJuaW5nIHRoZSBEYWVtb24gb2YgU29jcmF0ZXM8L3RpdGxlPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA1OTVmIj5jaGFwdGVyIDI5LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gNTk1IGYuPC9iaWJsPiksIENoYXJvbiBoaWQgdGhlIHRydXRoIGZyb20gbm8gb25lLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA1OTUgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CZWZvcmUgdGhpcyBmaXJzdCBzdG9ybSBoYWQgeWV0IGJsb3duIG92ZXIsIGZvcnR1bmUgYnJvdWdodCBhIHNlY29uZCBkb3duIHVwb24gdGhlIG1lbi4gRm9yIHRoZXJlIGNhbWUgYSBtZXNzZW5nZXIgZnJvbSBBdGhlbnMsIGZyb20gQXJjaGlhcyB0aGUgaGllcm9waGFudCB0byBoaXMgbmFtZXNha2UgQXJjaGlhcywgd2hvIHdhcyBoaXMgZ3Vlc3QtZnJpZW5kLCBiZWFyaW5nIGEgbGV0dGVyIHdoaWNoIGNvbnRhaW5lZCBubyBlbXB0eSBub3IgZmFsc2Ugc3VzcGljaW9uLCBidXQgc3RhdGVkIGNsZWFybHkgYWxsIHRoZSBkZXRhaWxzIG9mIHRoZSBzY2hlbWUgdGhhdCB3YXMgb24gZm9vdCwgYXMgd2FzIHN1YnNlcXVlbnRseSBsZWFybmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSwgaG93ZXZlciwgQXJjaGlhcyB3YXMgZHJ1bmssIGFuZCB0aGUgYmVhcmVyIG9mIHRoZSBsZXR0ZXIgd2FzIGJyb3VnaHQgdG8gaGltIGFuZCBwdXQgaXQgaW50byBoaXMgaGFuZHMsIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgc2VuZGVyIG9mIHRoaXMgYmFkZSB0aGVlIHJlYWQgaXQgYXQgb25jZTsgZm9yIGl0IGlzIG9uIHNlcmlvdXMgYnVzaW5lc3MuPC9xPiBUaGVuIEFyY2hpYXMgYW5zd2VyZWQgd2l0aCBhIHNtaWxlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNlcmlvdXMgYnVzaW5lc3MgZm9yIHRoZSBtb3Jyb3c8L3E+OyBhbmQgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgdGhlIGxldHRlciBoZSBwdXQgaXQgdW5kZXIgaGlzIHBpbGxvdywgYW5kIHJlc3VtZWQgaGlzIGNhc3VhbCBjb252ZXJzYXRpb24gd2l0aCBQaGlsbGlkYXMuIFdoZXJlZm9yZSB0aGVzZSB3b3JkcyBvZiBoaXMgYXJlIGEgY3VycmVudCBwcm92ZXJiIHRvIHRoaXMgZGF5IGFtb25nIHRoZSBHcmVla3MuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlZm9yZSB0aGlzIGZpcnN0IHN0b3JtIGhhZCB5ZXQgYmxvd24gb3ZlciwgZm9ydHVuZSBicm91Z2h0IGEgc2Vjb25kIGRvd24gdXBvbiB0aGUgbWVuLiBGb3IgdGhlcmUgY2FtZSBhIG1lc3NlbmdlciBmcm9tIEF0aGVucywgZnJvbSBBcmNoaWFzIHRoZSBoaWVyb3BoYW50IHRvIGhpcyBuYW1lc2FrZSBBcmNoaWFzLCB3aG8gd2FzIGhpcyBndWVzdC1mcmllbmQsIGJlYXJpbmcgYSBsZXR0ZXIgd2hpY2ggY29udGFpbmVkIG5vIGVtcHR5IG5vciBmYWxzZSBzdXNwaWNpb24sIGJ1dCBzdGF0ZWQgY2xlYXJseSBhbGwgdGhlIGRldGFpbHMgb2YgdGhlIHNjaGVtZSB0aGF0IHdhcyBvbiBmb290LCBhcyB3YXMgc3Vic2VxdWVudGx5IGxlYXJuZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lLCBob3dldmVyLCBBcmNoaWFzIHdhcyBkcnVuaywgYW5kIHRoZSBiZWFyZXIgb2YgdGhlIGxldHRlciB3YXMgYnJvdWdodCB0byBoaW0gYW5kIHB1dCBpdCBpbnRvIGhpcyBoYW5kcywgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIHNlbmRlciBvZiB0aGlzIGJhZGUgdGhlZSByZWFkIGl0IGF0IG9uY2U7IGZvciBpdCBpcyBvbiBzZXJpb3VzIGJ1c2luZXNzLjwvcT4gVGhlbiBBcmNoaWFzIGFuc3dlcmVkIHdpdGggYSBzbWlsZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNlcmlvdXMgYnVzaW5lc3MgZm9yIHRoZSBtb3Jyb3c8L3E+OyBhbmQgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgdGhlIGxldHRlciBoZSBwdXQgaXQgdW5kZXIgaGlzIHBpbGxvdywgYW5kIHJlc3VtZWQgaGlzIGNhc3VhbCBjb252ZXJzYXRpb24gd2l0aCBQaGlsbGlkYXMuIFdoZXJlZm9yZSB0aGVzZSB3b3JkcyBvZiBoaXMgYXJlIGEgY3VycmVudCBwcm92ZXJiIHRvIHRoaXMgZGF5IGFtb25nIHRoZSBHcmVla3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGF0IHRoZSBmaXR0aW5nIHRpbWUgZm9yIHRoZWlyIHVuZGVydGFraW5nIHNlZW1lZCB0byBoYXZlIGNvbWUsIHRoZXkgc2FsbGllZCBmb3J0aCBpbiB0d28gYmFuZHM7IG9uZSwgdW5kZXIgdGhlIGxlYWQgb2YgUGVsb3BpZGFzIGFuZCBEYW1vY2xlaWRhcywgYWdhaW5zdCBMZW9udGlkYXMgYW5kIEh5cGF0ZXMsIHdobyBsaXZlZCBuZWFyIHRvZ2V0aGVyOyB0aGUgb3RoZXIgYWdhaW5zdCBBcmNoaWFzIGFuZCBQaGlsaXAsIHVuZGVyIENoYXJvbiBhbmQgTWVsb24sIHdobyBoYWQgcHV0IG9uIHdvbWVuJ3MgYXBwYXJlbCBvdmVyIHRoZWlyIGJyZWFzdHBsYXRlcywgYW5kIHdvcmUgdGhpY2sgZ2FybGFuZHMgb2YgcGluZSBhbmQgZmlyIHdoaWNoIHNoYWRlZCB0aGVpciBmYWNlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB3aGVuIHRoZXkgc3Rvb2QgYXQgdGhlIGRvb3Igb2YgdGhlIGJhbnF1ZXQtcm9vbSwgYXQgZmlyc3QgdGhlIGNvbXBhbnkgc2hvdXRlZCBhbmQgY2xhcHBlZCB0aGVpciBoYW5kcywgc3VwcG9zaW5nIHRoYXQgdGhlIHdvbWVuIHdob20gdGhleSBoYWQgbG9uZyBiZWVuIGV4cGVjdGluZyB3ZXJlIGNvbWUuIEJ1dCB0aGVuLCBhZnRlciBzdXJ2ZXlpbmcgdGhlIGJhbnF1ZXQgYW5kIGNhcmVmdWxseSBtYXJraW5nIGVhY2ggb2YgdGhlIHJlY2xpbmluZyBndWVzdHMsIHRoZSB2aXNpdG9ycyBkcmV3IHRoZWlyIHN3b3JkcywgYW5kIHJ1c2hpbmcgdGhyb3VnaCB0aGUgbWlkc3Qgb2YgdGhlIHRhYmxlcyBhdCBBcmNoaWFzIGFuZCBQaGlsaXAsIHJldmVhbGVkIHdobyB0aGV5IHdlcmUuICAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BIGZldyBvZiB0aGUgZ3Vlc3RzIHdlcmUgcGVyc3VhZGVkIGJ5IFBoaWxsaWRhcyB0byByZW1haW4gcXVpZXQsIGJ1dCB0aGUgcmVzdCwgd2hvLCB3aXRoIHRoZSBwb2xlbWFyY2hzLCBvZmZlcmVkIHJlc2lzdGFuY2UgYW5kIHRyaWVkIHRvIGRlZmVuZCB0aGVtc2VsdmVzLCB3ZXJlIGRpc3BhdGNoZWQgd2l0aG91dCBhbnkgdHJvdWJsZSwgc2luY2UgdGhleSB3ZXJlIGRydW5rLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlIGZpdHRpbmcgdGltZSBmb3IgdGhlaXIgdW5kZXJ0YWtpbmcgc2VlbWVkIHRvIGhhdmUgY29tZSwgdGhleSBzYWxsaWVkIGZvcnRoIGluIHR3byBiYW5kczsgb25lLCB1bmRlciB0aGUgbGVhZCBvZiBQZWxvcGlkYXMgYW5kIERhbW9jbGVpZGFzLCBhZ2FpbnN0IExlb250aWRhcyBhbmQgSHlwYXRlcywgd2hvIGxpdmVkIG5lYXIgdG9nZXRoZXI7IHRoZSBvdGhlciBhZ2FpbnN0IEFyY2hpYXMgYW5kIFBoaWxpcCwgdW5kZXIgQ2hhcm9uIGFuZCBNZWxvbiwgd2hvIGhhZCBwdXQgb24gd29tZW4ncyBhcHBhcmVsIG92ZXIgdGhlaXIgYnJlYXN0cGxhdGVzLCBhbmQgd29yZSB0aGljayBnYXJsYW5kcyBvZiBwaW5lIGFuZCBmaXIgd2hpY2ggc2hhZGVkIHRoZWlyIGZhY2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgd2hlbiB0aGV5IHN0b29kIGF0IHRoZSBkb29yIG9mIHRoZSBiYW5xdWV0LXJvb20sIGF0IGZpcnN0IHRoZSBjb21wYW55IHNob3V0ZWQgYW5kIGNsYXBwZWQgdGhlaXIgaGFuZHMsIHN1cHBvc2luZyB0aGF0IHRoZSB3b21lbiB3aG9tIHRoZXkgaGFkIGxvbmcgYmVlbiBleHBlY3Rpbmcgd2VyZSBjb21lLiBCdXQgdGhlbiwgYWZ0ZXIgc3VydmV5aW5nIHRoZSBiYW5xdWV0IGFuZCBjYXJlZnVsbHkgbWFya2luZyBlYWNoIG9mIHRoZSByZWNsaW5pbmcgZ3Vlc3RzLCB0aGUgdmlzaXRvcnMgZHJldyB0aGVpciBzd29yZHMsIGFuZCBydXNoaW5nIHRocm91Z2ggdGhlIG1pZHN0IG9mIHRoZSB0YWJsZXMgYXQgQXJjaGlhcyBhbmQgUGhpbGlwLCByZXZlYWxlZCB3aG8gdGhleSB3ZXJlLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmV3IG9mIHRoZSBndWVzdHMgd2VyZSBwZXJzdWFkZWQgYnkgUGhpbGxpZGFzIHRvIHJlbWFpbiBxdWlldCwgYnV0IHRoZSByZXN0LCB3aG8sIHdpdGggdGhlIHBvbGVtYXJjaHMsIG9mZmVyZWQgcmVzaXN0YW5jZSBhbmQgdHJpZWQgdG8gZGVmZW5kIHRoZW1zZWx2ZXMsIHdlcmUgZGlzcGF0Y2hlZCB3aXRob3V0IGFueSB0cm91YmxlLCBzaW5jZSB0aGV5IHdlcmUgZHJ1bmsuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVsb3BpZGFzIGFuZCBoaXMgcGFydHksIGhvd2V2ZXIsIHdlcmUgY29uZnJvbnRlZCB3aXRoIGEgaGFyZGVyIHRhc2s7IGZvciBMZW9udGlkYXMsIGFnYWluc3Qgd2hvbSB0aGV5IHdlcmUgZ29pbmcsIHdhcyBhIHNvYmVyIGFuZCBmb3JtaWRhYmxlIG1hbiwgYW5kIHRoZXkgZm91bmQgaGlzIGhvdXNlIGNsb3NlZCwgc2luY2UgaGUgaGFkIGFscmVhZHkgZ29uZSB0byBiZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGEgbG9uZyB0aW1lIG5vIG9uZSBhbnN3ZXJlZCB0aGVpciBrbm9ja2luZywgYnV0IGF0IGxhc3QgdGhlIGF0dGVuZGFudCBoZWFyZCB0aGVtIGFuZCBjYW1lIG91dCBhbmQgZHJldyBiYWNrIHRoZSBib2x0LiAgQXMgc29vbiBhcyB0aGUgZG9vciB5aWVsZGVkIGFuZCBnYXZlIHdheSwgdGhleSBydXNoZWQgaW4gdG9nZXRoZXIsIG92ZXJ0dXJuZWQgdGhlIHNlcnZhbnQsIGFuZCBoYXN0ZW5lZCB0b3dhcmRzIHRoZSBiZWQtY2hhbWJlci4gICBCdXQgTGVvbnRpZGFzLCBjb25qZWN0dXJpbmcgd2hhdCB3YXMgaGFwcGVuaW5nIGJ5IHRoZSB2ZXJ5IG5vaXNlIGFuZCB0cmFtcGxpbmcsIHJvc2UgZnJvbSBiZWQgYW5kIGRyZXcgaGlzIGRhZ2dlciwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGhlIGZvcmdvdCB0byBvdmVydGhyb3cgdGhlIGxhbXBzIGFuZCBtYWtlIHRoZSBtZW4gZmFsbCBmb3VsIG9mIG9uZSBhbm90aGVyIGluIHRoZSBkYXJrbmVzcy4gIE9uIHRoZSBjb250cmFyeSwgZXhwb3NlZCB0byB2aWV3IGJ5IGFuIGFidW5kYW5jZSBvZiBsaWdodCwgaGUgd2VudCB0byBtZWV0IHRoZW0gYXQgdGhlIGRvb3Igb2YgaGlzIGNoYW1iZXIsIGFuZCBzdHJ1Y2sgZG93biB0aGUgZmlyc3Qgb25lIHRoYXQgZW50ZXJlZCwgQ2VwaGlzb2RvcnVzLiBXaGVuIHRoaXMgYXNzYWlsYW50IGhhZCBmYWxsZW4sIGhlIGVuZ2FnZWQgUGVsb3BpZGFzIG5leHQ7IGFuZCB0aGVpciBjb25mbGljdCB3YXMgcmVuZGVyZWQgdHJvdWJsZXNvbWUgYW5kIGRpZmZpY3VsdCBieSB0aGUgbmFycm93bmVzcyBvZiB0aGUgZG9vciBhbmQgYnkgQ2VwaGlzb2RvcnVzLCB3aG9zZSBib2R5LCBub3cgZGVhZCwgbGF5IGluIHRoZWlyIHdheS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IGxhc3QgUGVsb3BpZGFzIHByZXZhaWxlZCwgYW5kIGFmdGVyIGRpc3BhdGNoaW5nIExlb250aWRhcyBoZSBhbmQgaGlzIGZvbGxvd2VycyB3ZW50IGF0IG9uY2UgdG8gYXR0YWNrIEh5cGF0ZXMuIFRoZXkgYnJva2UgaW50byBoaXMgaG91c2UgYXMgdGhleSBoYWQgZG9uZSBpbnRvIHRoZSBvdGhlciwgYnV0IGhlIHByb21wdGx5IHBlcmNlaXZlZCB0aGVpciBkZXNpZ24gYW5kIGZsZWQgZm9yIHJlZnVnZSB0byBoaXMgbmVpZ2hib3Vycy4gVGhpdGhlciB0aGV5IGNsb3NlbHkgZm9sbG93ZWQgaGltLCBhbmQgY2F1Z2h0IGhpbSwgYW5kIHNsZXcgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGxvbmcgdGltZSBubyBvbmUgYW5zd2VyZWQgdGhlaXIga25vY2tpbmcsIGJ1dCBhdCBsYXN0IHRoZSBhdHRlbmRhbnQgaGVhcmQgdGhlbSBhbmQgY2FtZSBvdXQgYW5kIGRyZXcgYmFjayB0aGUgYm9sdC4gIEFzIHNvb24gYXMgdGhlIGRvb3IgeWllbGRlZCBhbmQgZ2F2ZSB3YXksIHRoZXkgcnVzaGVkIGluIHRvZ2V0aGVyLCBvdmVydHVybmVkIHRoZSBzZXJ2YW50LCBhbmQgaGFzdGVuZWQgdG93YXJkcyB0aGUgYmVkLWNoYW1iZXIuICAgQnV0IExlb250aWRhcywgY29uamVjdHVyaW5nIHdoYXQgd2FzIGhhcHBlbmluZyBieSB0aGUgdmVyeSBub2lzZSBhbmQgdHJhbXBsaW5nLCByb3NlIGZyb20gYmVkIGFuZCBkcmV3IGhpcyBkYWdnZXIsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBoZSBmb3Jnb3QgdG8gb3ZlcnRocm93IHRoZSBsYW1wcyBhbmQgbWFrZSB0aGUgbWVuIGZhbGwgZm91bCBvZiBvbmUgYW5vdGhlciBpbiB0aGUgZGFya25lc3MuICBPbiB0aGUgY29udHJhcnksIGV4cG9zZWQgdG8gdmlldyBieSBhbiBhYnVuZGFuY2Ugb2YgbGlnaHQsIGhlIHdlbnQgdG8gbWVldCB0aGVtIGF0IHRoZSBkb29yIG9mIGhpcyBjaGFtYmVyLCBhbmQgc3RydWNrIGRvd24gdGhlIGZpcnN0IG9uZSB0aGF0IGVudGVyZWQsIENlcGhpc29kb3J1cy4gV2hlbiB0aGlzIGFzc2FpbGFudCBoYWQgZmFsbGVuLCBoZSBlbmdhZ2VkIFBlbG9waWRhcyBuZXh0OyBhbmQgdGhlaXIgY29uZmxpY3Qgd2FzIHJlbmRlcmVkIHRyb3VibGVzb21lIGFuZCBkaWZmaWN1bHQgYnkgdGhlIG5hcnJvd25lc3Mgb2YgdGhlIGRvb3IgYW5kIGJ5IENlcGhpc29kb3J1cywgd2hvc2UgYm9keSwgbm93IGRlYWQsIGxheSBpbiB0aGVpciB3YXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhdCBsYXN0IFBlbG9waWRhcyBwcmV2YWlsZWQsIGFuZCBhZnRlciBkaXNwYXRjaGluZyBMZW9udGlkYXMgaGUgYW5kIGhpcyBmb2xsb3dlcnMgd2VudCBhdCBvbmNlIHRvIGF0dGFjayBIeXBhdGVzLiBUaGV5IGJyb2tlIGludG8gaGlzIGhvdXNlIGFzIHRoZXkgaGFkIGRvbmUgaW50byB0aGUgb3RoZXIsIGJ1dCBoZSBwcm9tcHRseSBwZXJjZWl2ZWQgdGhlaXIgZGVzaWduIGFuZCBmbGVkIGZvciByZWZ1Z2UgdG8gaGlzIG5laWdoYm91cnMuIFRoaXRoZXIgdGhleSBjbG9zZWx5IGZvbGxvd2VkIGhpbSwgYW5kIGNhdWdodCBoaW0sIGFuZCBzbGV3IGhpbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGFjY29tcGxpc2hlZCwgIHRoZXkgIGpvaW5lZCBNZWxvbidzIHBhcnR5LCBhbmQgc2VudCBpbnRvIEF0dGljYSBmb3IgdGhlIGV4aWxlcyB0aGV5IGhhZCBsZWZ0IHRoZXJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiA4LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhleSBhbHNvIHN1bW1vbmVkIHRoZSBjaXRpemVucyB0byBmaWdodCBmb3IgdGhlaXIgZnJlZWRvbSwgYW5kIGFybWVkIHRob3NlIHdobyBjYW1lLCB0YWtpbmcgZnJvbSB0aGUgcG9ydGljb3MgdGhlIHNwb2lscyBzdXNwZW5kZWQgdGhlcmUsIGFuZCBicmVha2luZyBvcGVuIHRoZSBuZWlnaGJvdXJpbmcgd29ya3Nob3BzIG9mIHNwZWFyLW1ha2VycyBhbmQgc3dvcmQtbWFrZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5FcGFtaW5vbmRhcyBhbmQgR29yZ2lkYXMgYWxzbyBjYW1lIHRvIHRoZWlyIGFpZCB3aXRoIGFuIGFybWVkIGZvbGxvd2luZywgY29tcG9zZWQgb2YgbWFueSB5b3VuZyBtZW4gYW5kIHRoZSBiZXN0IG9mIHRoZSBvbGRlciBtZW4uIEFuZCBub3cgdGhlIGNpdHkgd2FzIGFsbCBpbiBhIGZsdXR0ZXIgb2YgZXhjaXRlbWVudCwgdGhlcmUgd2FzIG11Y2ggbm9pc2UsIHRoZSBob3VzZXMgaGFkIGxpZ2h0cyBpbiB0aGVtLCBhbmQgdGhlcmUgd2FzIHJ1bm5pbmcgdG8gYW5kIGZyby4gVGhlIHBlb3BsZSwgaG93ZXZlciwgZGlkIG5vdCB5ZXQgYXNzZW1ibGU7IHRoZXkgd2VyZSB0ZXJyaWZpZWQgYXQgd2hhdCB3YXMgZ29pbmcgb24sIGFuZCBoYWQgbm8gY2xlYXIga25vd2xlZGdlIG9mIGl0LCBhbmQgd2VyZSB3YWl0aW5nIGZvciBkYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgU3BhcnRhbiBjb21tYW5kZXJzIHdlcmUgdGhvdWdodCB0byBoYXZlIG1hZGUgYSBtaXN0YWtlIGluIG5vdCBhdHRhY2tpbmcgYW5kIGVuZ2FnaW5nIGF0IG9uY2UsIHNpbmNlIHRoZWlyIGdhcnJpc29uIG51bWJlcmVkIGFib3V0IGZpZnRlZW4gaHVuZHJlZCBtZW4sIGFuZCBtYW55IHJhbiB0byBqb2luIHRoZW0gb3V0IG9mIHRoZSBjaXR5OyBidXQgdGhlIHNob3V0aW5nLCB0aGUgZmlyZXMsIGFuZCB0aGUgZ3JlYXQgdGhyb25ncyBpbiBtb3Rpb24gZXZlcnl3aGVyZSwgdGVycmlmaWVkIHRoZW0sIGFuZCB0aGV5IGtlcHQgcXVpZXQsIGhvbGRpbmcgdGhlIGNpdGFkZWwgaXRzZWxmIGluIHRoZWlyIHBvc3Nlc3Npb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSB0aGUgZXhpbGVzIGNhbWUgaW4gZnJvbSBBdHRpY2EgdW5kZXIgYXJtcywgYW5kIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiB0aGUgcGVvcGxlICB3YXMgY29udmVuZWQuIFRoZW4gRXBhbWlub25kYXMgYW5kIEdvcmdpZGFzIGJyb3VnaHQgYmVmb3JlIGl0IFBlbG9waWRhcyBhbmQgaGlzIGNvbXBhbmlvbnMsIHN1cnJvdW5kZWQgYnkgdGhlIHByaWVzdHMsIGhvbGRpbmcgZm9ydGggZ2FybGFuZHMsIGFuZCBjYWxsaW5nIHVwb24gdGhlIGNpdGl6ZW5zIHRvIGNvbWUgdG8gdGhlIGFpZCBvZiB0aGVpciBjb3VudHJ5IGFuZCB0aGVpciBnb2RzLiBBbmQgdGhlIGFzc2VtYmx5LCBhdCB0aGUgc2lnaHQsIHJvc2UgdG8gaXRzIGZlZXQgd2l0aCBzaG91dHMgYW5kIGNsYXBwaW5nIG9mIGhhbmRzLCBhbmQgd2VsY29tZWQgdGhlIG1lbiBhcyBkZWxpdmVyZXJzIGFuZCBiZW5lZmFjdG9ycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgdGhpbmdzIGFjY29tcGxpc2hlZCwgIHRoZXkgIGpvaW5lZCBNZWxvbidzIHBhcnR5LCBhbmQgc2VudCBpbnRvIEF0dGljYSBmb3IgdGhlIGV4aWxlcyB0aGV5IGhhZCBsZWZ0IHRoZXJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gOC4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpaWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoZXkgYWxzbyBzdW1tb25lZCB0aGUgY2l0aXplbnMgdG8gZmlnaHQgZm9yIHRoZWlyIGZyZWVkb20sIGFuZCBhcm1lZCB0aG9zZSB3aG8gY2FtZSwgdGFraW5nIGZyb20gdGhlIHBvcnRpY29zIHRoZSBzcG9pbHMgc3VzcGVuZGVkIHRoZXJlLCBhbmQgYnJlYWtpbmcgb3BlbiB0aGUgbmVpZ2hib3VyaW5nIHdvcmtzaG9wcyBvZiBzcGVhci1tYWtlcnMgYW5kIHN3b3JkLW1ha2Vycy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZWwuIDguMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aWlpLiAxLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzIGFuZCBHb3JnaWRhcyBhbHNvIGNhbWUgdG8gdGhlaXIgYWlkIHdpdGggYW4gYXJtZWQgZm9sbG93aW5nLCBjb21wb3NlZCBvZiBtYW55IHlvdW5nIG1lbiBhbmQgdGhlIGJlc3Qgb2YgdGhlIG9sZGVyIG1lbi4gQW5kIG5vdyB0aGUgY2l0eSB3YXMgYWxsIGluIGEgZmx1dHRlciBvZiBleGNpdGVtZW50LCB0aGVyZSB3YXMgbXVjaCBub2lzZSwgdGhlIGhvdXNlcyBoYWQgbGlnaHRzIGluIHRoZW0sIGFuZCB0aGVyZSB3YXMgcnVubmluZyB0byBhbmQgZnJvLiBUaGUgcGVvcGxlLCBob3dldmVyLCBkaWQgbm90IHlldCBhc3NlbWJsZTsgdGhleSB3ZXJlIHRlcnJpZmllZCBhdCB3aGF0IHdhcyBnb2luZyBvbiwgYW5kIGhhZCBubyBjbGVhciBrbm93bGVkZ2Ugb2YgaXQsIGFuZCB3ZXJlIHdhaXRpbmcgZm9yIGRheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgU3BhcnRhbiBjb21tYW5kZXJzIHdlcmUgdGhvdWdodCB0byBoYXZlIG1hZGUgYSBtaXN0YWtlIGluIG5vdCBhdHRhY2tpbmcgYW5kIGVuZ2FnaW5nIGF0IG9uY2UsIHNpbmNlIHRoZWlyIGdhcnJpc29uIG51bWJlcmVkIGFib3V0IGZpZnRlZW4gaHVuZHJlZCBtZW4sIGFuZCBtYW55IHJhbiB0byBqb2luIHRoZW0gb3V0IG9mIHRoZSBjaXR5OyBidXQgdGhlIHNob3V0aW5nLCB0aGUgZmlyZXMsIGFuZCB0aGUgZ3JlYXQgdGhyb25ncyBpbiBtb3Rpb24gZXZlcnl3aGVyZSwgdGVycmlmaWVkIHRoZW0sIGFuZCB0aGV5IGtlcHQgcXVpZXQsIGhvbGRpbmcgdGhlIGNpdGFkZWwgaXRzZWxmIGluIHRoZWlyIHBvc3Nlc3Npb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGJyZWFrIG9mIGRheSB0aGUgZXhpbGVzIGNhbWUgaW4gZnJvbSBBdHRpY2EgdW5kZXIgYXJtcywgYW5kIGEgZ2VuZXJhbCBhc3NlbWJseSBvZiB0aGUgcGVvcGxlICB3YXMgY29udmVuZWQuIFRoZW4gRXBhbWlub25kYXMgYW5kIEdvcmdpZGFzIGJyb3VnaHQgYmVmb3JlIGl0IFBlbG9waWRhcyBhbmQgaGlzIGNvbXBhbmlvbnMsIHN1cnJvdW5kZWQgYnkgdGhlIHByaWVzdHMsIGhvbGRpbmcgZm9ydGggZ2FybGFuZHMsIGFuZCBjYWxsaW5nIHVwb24gdGhlIGNpdGl6ZW5zIHRvIGNvbWUgdG8gdGhlIGFpZCBvZiB0aGVpciBjb3VudHJ5IGFuZCB0aGVpciBnb2RzLiBBbmQgdGhlIGFzc2VtYmx5LCBhdCB0aGUgc2lnaHQsIHJvc2UgdG8gaXRzIGZlZXQgd2l0aCBzaG91dHMgYW5kIGNsYXBwaW5nIG9mIGhhbmRzLCBhbmQgd2VsY29tZWQgdGhlIG1lbiBhcyBkZWxpdmVyZXJzIGFuZCBiZW5lZmFjdG9ycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGF2aW5nIGJlIGVuIGVsZWN0ZWQgYm9lb3RhcmNoLCBvciBnb3Zlcm5vciBvZiBCb2VvdGlhLCB0b2dldGhlciB3aXRoIE1lbG9uIGFuZCBDaGFyb24sIFBlbG9waWRhcyBhdCBvbmNlIGJsb2NrYWRlZCB0aGUgYWNyb3BvbGlzIGFuZCBhc3NhdWx0ZWQgaXQgb24gZXZlcnkgc2lkZSwgYmVpbmcgYW54aW91cyB0byBkcml2ZSBvdXQgdGhlIExhY2VkYWVtb25pYW5zIGFuZCBmcmVlIHRoZSBDYWRtZWlhIGJlZm9yZSBhbiBhcm15IGNhbWUgdXAgZnJvbSBTcGFydGEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBzdWNjZWVkZWQgYnkgc28gbmFycm93IGEgbWFyZ2luIHRoYXQsIHdoZW4gdGhlIG1lbiBoYWQgc3VycmVuZGVyZWQgY29uZGl0aW9uYWxseSBhbmQgaGFkIGJlZW4gYWxsb3dlZCB0byBkZXBhcnQsIHRoZXkgZ290IG5vIGZ1cnRoZXIgdGhhbiBNZWdhcmEgYmVmb3JlIHRoZXkgd2VyZSBtZXQgYnkgQ2xlb21icm90dXMgbWFyY2hpbmcgYWdhaW5zdCBUaGViZXMgd2l0aCBhIGdyZWF0IGZvcmNlLiAgT2YgdGhlIHRocmVlIG1lbiB3aG8gaGFkIGJlZW4gaGFybW9zdHMsIG9yIGdvdmVybm9ycywgaW4gVGhlYmVzLCB0aGUgU3BhcnRhbnMgY29uZGVtbmVkIGFuZCAgIGV4ZWN1dGVkICBIZXJpcHBpZGFzIGFuZCBBcmNpc3N1cywgYW5kIHRoZSB0aGlyZCwgTHlzYW5vcmlkYXMsIHdhcyBoZWF2aWx5IGZpbmVkIGFuZCBmb3Jzb29rIHRoZSBQZWxvcG9ubmVzdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGF2aW5nIGJlIGVuIGVsZWN0ZWQgYm9lb3RhcmNoLCBvciBnb3Zlcm5vciBvZiBCb2VvdGlhLCB0b2dldGhlciB3aXRoIE1lbG9uIGFuZCBDaGFyb24sIFBlbG9waWRhcyBhdCBvbmNlIGJsb2NrYWRlZCB0aGUgYWNyb3BvbGlzIGFuZCBhc3NhdWx0ZWQgaXQgb24gZXZlcnkgc2lkZSwgYmVpbmcgYW54aW91cyB0byBkcml2ZSBvdXQgdGhlIExhY2VkYWVtb25pYW5zIGFuZCBmcmVlIHRoZSBDYWRtZWlhIGJlZm9yZSBhbiBhcm15IGNhbWUgdXAgZnJvbSBTcGFydGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBzdWNjZWVkZWQgYnkgc28gbmFycm93IGEgbWFyZ2luIHRoYXQsIHdoZW4gdGhlIG1lbiBoYWQgc3VycmVuZGVyZWQgY29uZGl0aW9uYWxseSBhbmQgaGFkIGJlZW4gYWxsb3dlZCB0byBkZXBhcnQsIHRoZXkgZ290IG5vIGZ1cnRoZXIgdGhhbiBNZWdhcmEgYmVmb3JlIHRoZXkgd2VyZSBtZXQgYnkgQ2xlb21icm90dXMgbWFyY2hpbmcgYWdhaW5zdCBUaGViZXMgd2l0aCBhIGdyZWF0IGZvcmNlLiAgT2YgdGhlIHRocmVlIG1lbiB3aG8gaGFkIGJlZW4gaGFybW9zdHMsIG9yIGdvdmVybm9ycywgaW4gVGhlYmVzLCB0aGUgU3BhcnRhbnMgY29uZGVtbmVkIGFuZCAgIGV4ZWN1dGVkICBIZXJpcHBpZGFzIGFuZCBBcmNpc3N1cywgYW5kIHRoZSB0aGlyZCwgTHlzYW5vcmlkYXMsIHdhcyBoZWF2aWx5IGZpbmVkIGFuZCBmb3Jzb29rIHRoZSBQZWxvcG9ubmVzdXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZXhwbG9pdCwgc28gbGlrZSB0aGF0IG9mIFRocmFzeWJ1bHVzIGluIHRoZSB2YWxvdXIsIHRoZSBwZXJpbHMsIGFuZCB0aGUgc3RydWdnbGVzIG9mIGl0cyBoZXJvZXMsIGFuZCwgbGlrZSB0aGF0LCBjcm93bmVkIHdpdGggc3VjY2VzcyBieSBmb3J0dW5lLCB0aGUgR3JlZWtzIHdlcmUgd29udCB0byBjYWxsIGEgc2lzdGVyIHRvIGl0LiAgRm9yIGl0IGlzIG5vdCBlYXN5IHRvIG1lbnRpb24gb3RoZXIgY2FzZXMgd2hlcmUgbWVuIHNvIGZldyBpbiBudW1iZXIgYW5kIHNvIGRlc3RpdHV0ZSBoYXZlIG92ZXJjb21lIGVuZW1pZXMgc28gbXVjaCBtb3JlIG51bWVyb3VzIGFuZCBwb3dlcmZ1bCBieSB0aGUgZXhlcmNpc2Ugb2YgY291cmFnZSBhbmQgc2FnYWNpdHksIGFuZCBoYXZlIHRoZXJlYnkgYmVjb21lIHRoZSBhdXRob3JzIG9mIHNvIGdyZWF0IGJsZXNzaW5ncyBmb3IgdGhlaXIgY291bnRyaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoZSBzdWJzZXF1ZW50IGNoYW5nZSBpbiB0aGUgcG9saXRpY2FsIHNpdHVhdGlvbiBtYWRlIHRoaXMgZXhwbG9pdCB0aGUgbW9yZSBnbG9yaW91cy4gICBGb3IgdGhlIHdhciB3aGljaCBicm9rZSBkb3duIHRoZSBwcmV0ZW5zaW9ucyBvZiBTcGFydGEgYW5kIHB1dCBhbiBlbmQgdG8gaGVyIHN1cHJlbWFjeSBieSBsYW5kIGFuZCBzZWEsIGJlZ2FuIGZyb20gdGhhdCBuaWdodCwgaW4gd2hpY2ggUGVsb3BpZGFzLCBub3QgYnkgc3VycHJpc2luZyBhbnkgZm9ydCBvciBjYXN0bGUgb3IgY2l0YWRlbCwgYnV0IGJ5IGNvbWluZyBiYWNrIGludG8gYSBwcml2YXRlIGhvdXNlIHdpdGggZWxldmVuIG90aGVycywgbG9vc2VkIGFuZCBicm9rZSBpbiBwaWVjZXMsIGlmIHRoZSB0cnV0aCBtYXkgYmUgZXhwcmVzc2VkIGluIGEgIG1ldGFwaG9yLCB0aGUgZmV0dGVycyBvZiB0aGUgTGFjZWRhZW1vbmlhbiBzdXByZW1hY3ksIHdoaWNoIHdlcmUgdGhvdWdodCBpbmRpc3NvbHVibGUgYW5kIG5vdCB0byBiZSBicm9rZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZXhwbG9pdCwgc28gbGlrZSB0aGF0IG9mIFRocmFzeWJ1bHVzIGluIHRoZSB2YWxvdXIsIHRoZSBwZXJpbHMsIGFuZCB0aGUgc3RydWdnbGVzIG9mIGl0cyBoZXJvZXMsIGFuZCwgbGlrZSB0aGF0LCBjcm93bmVkIHdpdGggc3VjY2VzcyBieSBmb3J0dW5lLCB0aGUgR3JlZWtzIHdlcmUgd29udCB0byBjYWxsIGEgc2lzdGVyIHRvIGl0LiAgRm9yIGl0IGlzIG5vdCBlYXN5IHRvIG1lbnRpb24gb3RoZXIgY2FzZXMgd2hlcmUgbWVuIHNvIGZldyBpbiBudW1iZXIgYW5kIHNvIGRlc3RpdHV0ZSBoYXZlIG92ZXJjb21lIGVuZW1pZXMgc28gbXVjaCBtb3JlIG51bWVyb3VzIGFuZCBwb3dlcmZ1bCBieSB0aGUgZXhlcmNpc2Ugb2YgY291cmFnZSBhbmQgc2FnYWNpdHksIGFuZCBoYXZlIHRoZXJlYnkgYmVjb21lIHRoZSBhdXRob3JzIG9mIHNvIGdyZWF0IGJsZXNzaW5ncyBmb3IgdGhlaXIgY291bnRyaWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHN1YnNlcXVlbnQgY2hhbmdlIGluIHRoZSBwb2xpdGljYWwgc2l0dWF0aW9uIG1hZGUgdGhpcyBleHBsb2l0IHRoZSBtb3JlIGdsb3Jpb3VzLiAgIEZvciB0aGUgd2FyIHdoaWNoIGJyb2tlIGRvd24gdGhlIHByZXRlbnNpb25zIG9mIFNwYXJ0YSBhbmQgcHV0IGFuIGVuZCB0byBoZXIgc3VwcmVtYWN5IGJ5IGxhbmQgYW5kIHNlYSwgYmVnYW4gZnJvbSB0aGF0IG5pZ2h0LCBpbiB3aGljaCBQZWxvcGlkYXMsIG5vdCBieSBzdXJwcmlzaW5nIGFueSBmb3J0IG9yIGNhc3RsZSBvciBjaXRhZGVsLCBidXQgYnkgY29taW5nIGJhY2sgaW50byBhIHByaXZhdGUgaG91c2Ugd2l0aCBlbGV2ZW4gb3RoZXJzLCBsb29zZWQgYW5kIGJyb2tlIGluIHBpZWNlcywgaWYgdGhlIHRydXRoIG1heSBiZSBleHByZXNzZWQgaW4gYSAgbWV0YXBob3IsIHRoZSBmZXR0ZXJzIG9mIHRoZSBMYWNlZGFlbW9uaWFuIHN1cHJlbWFjeSwgd2hpY2ggd2VyZSB0aG91Z2h0IGluZGlzc29sdWJsZSBhbmQgbm90IHRvIGJlIGJyb2tlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIExhY2VkYWVtb25pYW5zIG5vdyBpbnZhZGVkIEJvZW90aWEgd2l0aCBhIGxhcmdlIGFybXksIGFuZCB0aGUgQXRoZW5pYW5zLCBoYXZpbmcgYmVjb21lIGZlYXJmdWwsIHJlbm91bmNlZCB0aGVpciBhbGxpYW5jZSB3aXRoIHRoZSBUaGViYW5zLCBhbmQgcHJvc2VjdXRpbmcgdGhvc2UgaW4gdGhlaXIgY2l0eSB3aG8gZmF2b3VyZWQgdGhlIEJvZW90aWFuIGNhdXNlLCBwdXQgc29tZSBvZiB0aGVtIHRvIGRlYXRoLCBiYW5pc2hlZCBvdGhlcnMsIGFuZCBvdGhlcnMgc3RpbGwgdGhleSBmaW5lZCwgc28gdGhhdCB0aGUgVGhlYmFucyBzZWVtZWQgdG8gYmUgaW4gYSBkZXNwZXJhdGUgY2FzZSB3aXRoIG5vbmUgdG8gYWlkIHRoZW0uICAgQnV0IFBlbG9waWRhcyBhbmQgR29yZ2lkYXMsIHdobyB3ZXJlIGJvZW90YXJjaHMsIHBsb3R0ZWQgdG8gZW1icm9pbCB0aGUgQXRoZW5pYW5zIGFnYWluIHdpdGggdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgZGV2aXNlZCB0aGUgZm9sbG93aW5nIHNjaGVtZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3Bob2RyaWFzLCBhIFNwYXJ0YW4sIHdobyBoYWQgYSBzcGxlbmRpZCByZXB1dGF0aW9uIGFzIGEgc29sZGllciwgYnV0IHdhcyByYXRoZXIgd2VhayBpbiBqdWRnZW1lbnQgYW5kIGZ1bGwgb2YgdmFpbiBob3BlcyBhbmQgc2Vuc2VsZXNzIGFtYml0aW9uLCBoYWQgYmVlbiBsZWZ0IGF0IFRoZXNwaWFlIHdpdGggYW4gYXJtZWQgZm9yY2UgdG8gcmVjZWl2ZSBhbmQgc3VjY291ciB0aGUgcmVuZWdhZGUgVGhlYmFucy4gVG8gdGhpcyBtYW4gUGVsb3BpZGFzIGFuZCBHb3JnaWRhcyBwcml2YXRlbHkgc2VudCBvbmUgb2YgdGhlaXIgZnJpZW5kcyB3aG8gd2FzIGEgbWVyY2hhbnQsIHdpdGggbW9uZXksIGFuZCwgd2hhdCBwcm92ZWQgbW9yZSBwZXJzdWFzaXZlIHRoYW4gbW9uZXkgd2l0aCBTcGhvZHJpYXMsIHRoaXMgYWR2aWNlLiAgSGUgb3VnaHQgdG8gcHV0IGhpcyBoYW5kIHRvIGEgbGFyZ2UgZW50ZXJwcmlzZSBhbmQgc2VpemUgdGhlIFBpcmFldXMsIGF0dGFja2luZyBpdCB1bmV4cGVjdGVkbHkgd2hlbiB0aGUgQXRoZW5pYW5zIHdlcmUgb2ZmIHRoZWlyIGd1YXJkOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igbm90aGluZyB3b3VsZCBncmF0aWZ5IHRoZSBMYWNlZGFlbW9uaWFucyBzbyBtdWNoIGFzIHRoZSBjYXB0dXJlIG9mIEF0aGVucywgYW5kIHRoZSBUaGViYW5zLCB3aG8gd2VyZSBub3cgYW5ncnkgd2l0aCB0aGUgQXRoZW5pYW5zIGFuZCBoZWxkIHRoZW0gdG8gYmUgdHJhaXRvcnMsIHdvdWxkIGdpdmUgdGhlbSBubyBhaWQuICBTcGhvZHJpYXMgd2FzIGZpbmFsbHkgcGVyc3VhZGVkLCBhbmQgdGFraW5nIGhpcyBzb2xkaWVycywgaW52YWRlZCBBdHRpY2EgYnkgbmlnaHQuICBIZSBhZHZhbmNlZCBhcyBmYXIgYXMgRWxldXNpcywgYnV0IHRoZXJlIHRoZSBoZWFydHMgb2YgaGlzIHNvbGRpZXJzIGZhaWxlZCB0aGVtIGFuZCBoaXMgZGVzaWduIHdhcyBleHBvc2VkLCBhbmQgYWZ0ZXIgaGF2aW5nIHRodXMgc3RpcnJlZCB1cCBhIHNlcmlvdXMgYW5kIGRpZmZpY3VsdCB3YXIgYWdhaW5zdCB0aGUgU3BhcnRhbnMsIGhlIHdpdGhkcmV3IHRvIFRoZXNwaWFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBhdHRlbXB0IG9mIFNwaG9kcmlhcyBvbiB0aGUgUGlyYWV1cyBpcyBtb3JlIGZ1bGx5IGRlc2NyaWJlZCBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDI0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB4eGl2LiAzLTY8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIExhY2VkYWVtb25pYW5zIG5vdyBpbnZhZGVkIEJvZW90aWEgd2l0aCBhIGxhcmdlIGFybXksIGFuZCB0aGUgQXRoZW5pYW5zLCBoYXZpbmcgYmVjb21lIGZlYXJmdWwsIHJlbm91bmNlZCB0aGVpciBhbGxpYW5jZSB3aXRoIHRoZSBUaGViYW5zLCBhbmQgcHJvc2VjdXRpbmcgdGhvc2UgaW4gdGhlaXIgY2l0eSB3aG8gZmF2b3VyZWQgdGhlIEJvZW90aWFuIGNhdXNlLCBwdXQgc29tZSBvZiB0aGVtIHRvIGRlYXRoLCBiYW5pc2hlZCBvdGhlcnMsIGFuZCBvdGhlcnMgc3RpbGwgdGhleSBmaW5lZCwgc28gdGhhdCB0aGUgVGhlYmFucyBzZWVtZWQgdG8gYmUgaW4gYSBkZXNwZXJhdGUgY2FzZSB3aXRoIG5vbmUgdG8gYWlkIHRoZW0uICAgQnV0IFBlbG9waWRhcyBhbmQgR29yZ2lkYXMsIHdobyB3ZXJlIGJvZW90YXJjaHMsIHBsb3R0ZWQgdG8gZW1icm9pbCB0aGUgQXRoZW5pYW5zIGFnYWluIHdpdGggdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgZGV2aXNlZCB0aGUgZm9sbG93aW5nIHNjaGVtZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNwaG9kcmlhcywgYSBTcGFydGFuLCB3aG8gaGFkIGEgc3BsZW5kaWQgcmVwdXRhdGlvbiBhcyBhIHNvbGRpZXIsIGJ1dCB3YXMgcmF0aGVyIHdlYWsgaW4ganVkZ2VtZW50IGFuZCBmdWxsIG9mIHZhaW4gaG9wZXMgYW5kIHNlbnNlbGVzcyBhbWJpdGlvbiwgaGFkIGJlZW4gbGVmdCBhdCBUaGVzcGlhZSB3aXRoIGFuIGFybWVkIGZvcmNlIHRvIHJlY2VpdmUgYW5kIHN1Y2NvdXIgdGhlIHJlbmVnYWRlIFRoZWJhbnMuIFRvIHRoaXMgbWFuIFBlbG9waWRhcyBhbmQgR29yZ2lkYXMgcHJpdmF0ZWx5IHNlbnQgb25lIG9mIHRoZWlyIGZyaWVuZHMgd2hvIHdhcyBhIG1lcmNoYW50LCB3aXRoIG1vbmV5LCBhbmQsIHdoYXQgcHJvdmVkIG1vcmUgcGVyc3Vhc2l2ZSB0aGFuIG1vbmV5IHdpdGggU3Bob2RyaWFzLCB0aGlzIGFkdmljZS4gIEhlIG91Z2h0IHRvIHB1dCBoaXMgaGFuZCB0byBhIGxhcmdlIGVudGVycHJpc2UgYW5kIHNlaXplIHRoZSBQaXJhZXVzLCBhdHRhY2tpbmcgaXQgdW5leHBlY3RlZGx5IHdoZW4gdGhlIEF0aGVuaWFucyB3ZXJlIG9mZiB0aGVpciBndWFyZDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBub3RoaW5nIHdvdWxkIGdyYXRpZnkgdGhlIExhY2VkYWVtb25pYW5zIHNvIG11Y2ggYXMgdGhlIGNhcHR1cmUgb2YgQXRoZW5zLCBhbmQgdGhlIFRoZWJhbnMsIHdobyB3ZXJlIG5vdyBhbmdyeSB3aXRoIHRoZSBBdGhlbmlhbnMgYW5kIGhlbGQgdGhlbSB0byBiZSB0cmFpdG9ycywgd291bGQgZ2l2ZSB0aGVtIG5vIGFpZC4gIFNwaG9kcmlhcyB3YXMgZmluYWxseSBwZXJzdWFkZWQsIGFuZCB0YWtpbmcgaGlzIHNvbGRpZXJzLCBpbnZhZGVkIEF0dGljYSBieSBuaWdodC4gIEhlIGFkdmFuY2VkIGFzIGZhciBhcyBFbGV1c2lzLCBidXQgdGhlcmUgdGhlIGhlYXJ0cyBvZiBoaXMgc29sZGllcnMgZmFpbGVkIHRoZW0gYW5kIGhpcyBkZXNpZ24gd2FzIGV4cG9zZWQsIGFuZCBhZnRlciBoYXZpbmcgdGh1cyBzdGlycmVkIHVwIGEgc2VyaW91cyBhbmQgZGlmZmljdWx0IHdhciBhZ2FpbnN0IHRoZSBTcGFydGFucywgaGUgd2l0aGRyZXcgdG8gVGhlc3BpYWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYXR0ZW1wdCBvZiBTcGhvZHJpYXMgb24gdGhlIFBpcmFldXMgaXMgbW9yZSBmdWxseSBkZXNjcmliZWQgaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDI0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHh4aXYuIDMtNjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAyNC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB4eGl2LiAzLTY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHhpdi4gMy02PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIEF0aGVuaWFucyB3aXRoIHRoZSBncmVhdGVzdCBlYWdlcm5lc3MgcmVuZXdlZCB0aGVpciBhbGxpYW5jZSB3aXRoIHRoZSBUaGViYW5zLCBhbmQgYmVnYW4gaG9zdGlsZSBvcGVyYXRpb25zIGFnYWluc3QgU3BhcnRhIGJ5IHNlYSwgc2FpbGluZyBhYm91dCBhbmQgaW52aXRpbmcgYW5kIHJlY2VpdmluZyB0aGUgYWxsZWdpYW5jZSBvZiB0aG9zZSBHcmVla3Mgd2hvIHdlcmUgaW5jbGluZWQgdG8gcmV2b2x0LiBUaGUgVGhlYmFucywgdG9vLCBieSBhbHdheXMgZW5nYWdpbmcgc2luZ2x5IGluIEJvZW90aWEgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCBieSBmaWdodGluZyBiYXR0bGVzIHdoaWNoLCB0aG91Z2ggbm90IGltcG9ydGFudCBpbiB0aGVtc2VsdmVzLCBuZXZlcnRoZWxlc3MgYWZmb3JkZWQgdGhlbSBtdWNoIHByYWN0aWNlIGFuZCB0cmFpbmluZywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aGFkIHRoZWlyIHNwaXJpdHMgcm91c2VkIGFuZCB0aGVpciBib2RpZXMgdGhvcm91Z2hseSBpbnVyZWQgdG8gaGFyZHNoaXBzLCBhbmQgZ2FpbmVkIGV4cGVyaWVuY2UgYW5kIGNvdXJhZ2UgZnJvbSB0aGVpciBjb25zdGFudCBzdHJ1Z2dsZXMuIEZvciB0aGlzIHJlYXNvbiBBbnRhbGNpZGFzIHRoZSBTcGFydGFuLCB3ZSBhcmUgdG9sZCwgd2hlbiBBZ2VzaWxhw7xzIGNhbWUgYmFjayBmcm9tIEJvZW90aWEgd2l0aCBhIHdvdW5kLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsIHRoaXMgaXMgYSBmaW5lIHR1aXRpb24tZmVlIHdoaWNoIHRob3UgYXJ0IGdldHRpbmcgZnJvbSB0aGUgVGhlYmFucywgZm9yIHRlYWNoaW5nIHRoZW0gaG93IHRvIHdhciBhbmQgZmlnaHQgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFnZXMuIDI2LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWdlc2lsYcO8czwvdGl0bGU+LCB4eHZpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgdG8gdGVsbCB0aGUgdHJ1dGgsIGl0IHdhcyBub3QgQWdlc2lsYcO8cyB3aG8gd2FzIHRoZWlyIHRlYWNoZXIsIGJ1dCB0aG9zZSBsZWFkZXJzIG9mIHRoZWlycyB3aG8sIGF0IHRoZSByaWdodCB0aW1lIGFuZCBwbGFjZSwgZ2F2ZSB0aGUgVGhlYmFucywgbGlrZSB5b3VuZyBkb2dzIGluIHRyYWluaW5nLCBleHBlcmllbmNlIGluIGF0dGFja2luZyB0aGVpciBlbmVtaWVzLCBhbmQgdGhlbiwgd2hlbiB0aGV5IGhhZCBnb3QgYSB0YXN0ZSBvZiB2aWN0b3J5IGFuZCBpdHMgYXJkb3VycywgYnJvdWdodCB0aGVtIHNhZmVseSBvZmY7IGFuZCBvZiB0aGVzZSBsZWFkZXJzIFBlbG9waWRhcyB3YXMgaW4gZ3JlYXRlc3QgZXN0ZWVtLiAgRm9yIGFmdGVyIGhpcyBjb3VudHJ5bWVuIGhhZCBvbmNlIGNob3NlbiBoaW0gdGhlaXIgbGVhZGVyIGluIGFybXMsIHRoZXJlIHdhcyBub3QgYSBzaW5nbGUgeWVhciB3aGVuIHRoZXkgZGlkIG5vdCBlbGVjdCBoaW0gdG8gb2ZmaWNlLCBidXQgZWl0aGVyIGFzIGxlYWRlciBvZiB0aGUgc2FjcmVkIGJhbmQsIG9yLCBmb3IgdGhlIG1vc3QgcGFydCwgYXMgYm9lb3RhcmNoLCBoZSBjb250aW51ZWQgYWN0aXZlIHVudGlsIGhpcyBkZWF0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIEF0aGVuaWFucyB3aXRoIHRoZSBncmVhdGVzdCBlYWdlcm5lc3MgcmVuZXdlZCB0aGVpciBhbGxpYW5jZSB3aXRoIHRoZSBUaGViYW5zLCBhbmQgYmVnYW4gaG9zdGlsZSBvcGVyYXRpb25zIGFnYWluc3QgU3BhcnRhIGJ5IHNlYSwgc2FpbGluZyBhYm91dCBhbmQgaW52aXRpbmcgYW5kIHJlY2VpdmluZyB0aGUgYWxsZWdpYW5jZSBvZiB0aG9zZSBHcmVla3Mgd2hvIHdlcmUgaW5jbGluZWQgdG8gcmV2b2x0LiBUaGUgVGhlYmFucywgdG9vLCBieSBhbHdheXMgZW5nYWdpbmcgc2luZ2x5IGluIEJvZW90aWEgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCBieSBmaWdodGluZyBiYXR0bGVzIHdoaWNoLCB0aG91Z2ggbm90IGltcG9ydGFudCBpbiB0aGVtc2VsdmVzLCBuZXZlcnRoZWxlc3MgYWZmb3JkZWQgdGhlbSBtdWNoIHByYWN0aWNlIGFuZCB0cmFpbmluZywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhhZCB0aGVpciBzcGlyaXRzIHJvdXNlZCBhbmQgdGhlaXIgYm9kaWVzIHRob3JvdWdobHkgaW51cmVkIHRvIGhhcmRzaGlwcywgYW5kIGdhaW5lZCBleHBlcmllbmNlIGFuZCBjb3VyYWdlIGZyb20gdGhlaXIgY29uc3RhbnQgc3RydWdnbGVzLiBGb3IgdGhpcyByZWFzb24gQW50YWxjaWRhcyB0aGUgU3BhcnRhbiwgd2UgYXJlIHRvbGQsIHdoZW4gQWdlc2lsYcO8cyBjYW1lIGJhY2sgZnJvbSBCb2VvdGlhIHdpdGggYSB3b3VuZCwgc2FpZCB0byBoaW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsIHRoaXMgaXMgYSBmaW5lIHR1aXRpb24tZmVlIHdoaWNoIHRob3UgYXJ0IGdldHRpbmcgZnJvbSB0aGUgVGhlYmFucywgZm9yIHRlYWNoaW5nIHRoZW0gaG93IHRvIHdhciBhbmQgZmlnaHQgd2hlbiB0aGV5IGRpZCBub3Qgd2lzaCB0byBkbyBpdC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiAyNi4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB4eHZpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gMjYuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHh2aS4gMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgeHh2aS4gMi48L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgdG8gdGVsbCB0aGUgdHJ1dGgsIGl0IHdhcyBub3QgQWdlc2lsYcO8cyB3aG8gd2FzIHRoZWlyIHRlYWNoZXIsIGJ1dCB0aG9zZSBsZWFkZXJzIG9mIHRoZWlycyB3aG8sIGF0IHRoZSByaWdodCB0aW1lIGFuZCBwbGFjZSwgZ2F2ZSB0aGUgVGhlYmFucywgbGlrZSB5b3VuZyBkb2dzIGluIHRyYWluaW5nLCBleHBlcmllbmNlIGluIGF0dGFja2luZyB0aGVpciBlbmVtaWVzLCBhbmQgdGhlbiwgd2hlbiB0aGV5IGhhZCBnb3QgYSB0YXN0ZSBvZiB2aWN0b3J5IGFuZCBpdHMgYXJkb3VycywgYnJvdWdodCB0aGVtIHNhZmVseSBvZmY7IGFuZCBvZiB0aGVzZSBsZWFkZXJzIFBlbG9waWRhcyB3YXMgaW4gZ3JlYXRlc3QgZXN0ZWVtLiAgRm9yIGFmdGVyIGhpcyBjb3VudHJ5bWVuIGhhZCBvbmNlIGNob3NlbiBoaW0gdGhlaXIgbGVhZGVyIGluIGFybXMsIHRoZXJlIHdhcyBub3QgYSBzaW5nbGUgeWVhciB3aGVuIHRoZXkgZGlkIG5vdCBlbGVjdCBoaW0gdG8gb2ZmaWNlLCBidXQgZWl0aGVyIGFzIGxlYWRlciBvZiB0aGUgc2FjcmVkIGJhbmQsIG9yLCBmb3IgdGhlIG1vc3QgcGFydCwgYXMgYm9lb3RhcmNoLCBoZSBjb250aW51ZWQgYWN0aXZlIHVudGlsIGhpcyBkZWF0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgYXQgUGxhdGFlYSB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBkZWZlYXRlZCBhbmQgcHV0IHRvIGZsaWdodCwgYW5kIGF0IFRoZXNwaWFlLCB3aGVyZSwgdG9vLCBQaG9lYmlkYXMsIHdobyBoYWQgc2VpemVkIHRoZSBDYWRtZWlhLCB3YXMgc2xhaW47IGFuZCBhdCBUYW5hZ3JhIGEgbGFyZ2UgYm9keSBvZiB0aGVtIHdhcyByb3V0ZWQgYW5kIFBhbnRob2lkYXMgdGhlIGhhcm1vc3Qgd2FzIGtpbGxlZC4gICBCdXQgdGhlc2UgY29tYmF0cywgdGhvdWdoIHRoZXkgZ2F2ZSBhcmRvdXIgYW5kIGJvbGRuZXNzIHRvIHRoZSB2aWN0b3JzLCBkaWQgbm90IGFsdG9nZXRoZXIgYnJlYWsgdGhlIHNwaXJpdHMgb2YgdGhlIHZhbnF1aXNoZWQ7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGV5IHdlcmUgbm90IHBpdGNoZWQgYmF0dGxlcywgbm9yIHdhcyB0aGUgZmlnaHRpbmcgaW4gb3BlbiBhbmQgcmVndWxhciBhcnJheSwgYnV0IGl0IHdhcyBieSBtYWtpbmcgd2VsbC10aW1lZCBzYWxsaWVzLCBhbmQgYnkgZWl0aGVyIHJldHJlYXRpbmcgYmVmb3JlIHRoZSBlbmVteSBvciBieSBwdXJzdWluZyBhbmQgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlbSB0aGF0IHRoZSBUaGViYW5zIHdvbiB0aGVpciBzdWNjZXNzZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIGF0IFBsYXRhZWEgdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgZGVmZWF0ZWQgYW5kIHB1dCB0byBmbGlnaHQsIGFuZCBhdCBUaGVzcGlhZSwgd2hlcmUsIHRvbywgUGhvZWJpZGFzLCB3aG8gaGFkIHNlaXplZCB0aGUgQ2FkbWVpYSwgd2FzIHNsYWluOyBhbmQgYXQgVGFuYWdyYSBhIGxhcmdlIGJvZHkgb2YgdGhlbSB3YXMgcm91dGVkIGFuZCBQYW50aG9pZGFzIHRoZSBoYXJtb3N0IHdhcyBraWxsZWQuICAgQnV0IHRoZXNlIGNvbWJhdHMsIHRob3VnaCB0aGV5IGdhdmUgYXJkb3VyIGFuZCBib2xkbmVzcyB0byB0aGUgdmljdG9ycywgZGlkIG5vdCBhbHRvZ2V0aGVyIGJyZWFrIHRoZSBzcGlyaXRzIG9mIHRoZSB2YW5xdWlzaGVkOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGV5IHdlcmUgbm90IHBpdGNoZWQgYmF0dGxlcywgbm9yIHdhcyB0aGUgZmlnaHRpbmcgaW4gb3BlbiBhbmQgcmVndWxhciBhcnJheSwgYnV0IGl0IHdhcyBieSBtYWtpbmcgd2VsbC10aW1lZCBzYWxsaWVzLCBhbmQgYnkgZWl0aGVyIHJldHJlYXRpbmcgYmVmb3JlIHRoZSBlbmVteSBvciBieSBwdXJzdWluZyBhbmQgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlbSB0aGF0IHRoZSBUaGViYW5zIHdvbiB0aGVpciBzdWNjZXNzZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgY29uZmxpY3QgYXQgVGVneXJhLCB3aGljaCB3YXMgYSBzb3J0IG9mIHByZWx1ZGUgdG8gdGhhdCBhdCBMZXVjdHJhLCByYWlzZWQgaGlnaCB0aGUgcmVwdXRhdGlvbiBvZiBQZWxvcGlkYXM7IGZvciBpdCBhZmZvcmRlZCBoaXMgZmVsbG93IGNvbW1hbmRlcnMgbm8gcml2YWwgY2xhaW0gaW4gaXRzIHN1Y2Nlc3MsIGFuZCBoaXMgZW5lbWllcyBubyBleGN1c2UgZm9yIHRoZWlyIGRlZmVhdC4gQWdhaW5zdCB0aGUgY2l0eSBvZiBPcmNob21lbnVzLCB3aGljaCBoYWQgY2hvc2VuIHRoZSBzaWRlIG9mIHRoZSBTcGFydGFucyBhbmQgcmVjZWl2ZWQgdHdvIGRpdmlzaW9ucyBvZiB0aGVtIGZvciBpdHMgcHJvdGVjdGlvbiwgaGUgd2FzIGV2ZXIgbGF5aW5nIHBsYW5zIGFuZCB3YXRjaGluZyBoaXMgb3Bwb3J0dW5pdHksCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+IGFuZCB3aGVuIGhlIGhlYXJkIHRoYXQgaXRzIGdhcnJpc29uIGhhZCBtYWRlIGFuIGV4cGVkaXRpb24gaW50byBMb2NyaXMsIGhlIGhvcGVkIHRvIGZpbmQgdGhlIGNpdHkgd2l0aG91dCBkZWZlbmRlcnMsIGFuZCBtYXJjaGVkIGFnYWluc3QgaXQsIGhhdmluZyB3aXRoIGhpbSB0aGUgc2FjcmVkIGJhbmQgYW5kIGEgZmV3IGhvcnNlbWVuLiAgICBCdXQgd2hlbiwgb24gYXBwcm9hY2hpbmcgdGhlIGNpdHksIGhlIGZvdW5kIHRoYXQgaXRzIGdhcnJpc29uIGhhZCBiZWVuIHJlcGxhY2VkIHdpdGggb3RoZXIgdHJvb3BzIGZyb20gU3BhcnRhLCBoZSBsZWQgaGlzIGFybXkgYmFjayBhZ2FpbiB0aHJvdWdoIHRoZSBkaXN0cmljdCBvZiBUZWd5cmEsIHRoYXQgYmVpbmcgdGhlIG9ubHkgd2F5IGJ5IHdoaWNoIGhlIGNvdWxkIG1ha2UgYSBjaXJjdWl0IGFsb25nIHRoZSBmb290IG9mIHRoZSBtb3VudGFpbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhlIGludGVydmVuaW5nIHBsYWluIHdhcyBtYWRlIGltcGFzc2FibGUgYnkgdGhlIHJpdmVyIE1lbGFzLCB3aGljaCBubyBzb29uZXIgYmVnaW5zIHRvIGZsb3cgdGhhbiBpdCBzcHJlYWRzIGl0c2VsZiBvdXQgaW50byBuYXZpZ2FibGUgbWFyc2hlcyBhbmQgbGFrZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBjb25mbGljdCBhdCBUZWd5cmEsIHdoaWNoIHdhcyBhIHNvcnQgb2YgcHJlbHVkZSB0byB0aGF0IGF0IExldWN0cmEsIHJhaXNlZCBoaWdoIHRoZSByZXB1dGF0aW9uIG9mIFBlbG9waWRhczsgZm9yIGl0IGFmZm9yZGVkIGhpcyBmZWxsb3cgY29tbWFuZGVycyBubyByaXZhbCBjbGFpbSBpbiBpdHMgc3VjY2VzcywgYW5kIGhpcyBlbmVtaWVzIG5vIGV4Y3VzZSBmb3IgdGhlaXIgZGVmZWF0LiBBZ2FpbnN0IHRoZSBjaXR5IG9mIE9yY2hvbWVudXMsIHdoaWNoIGhhZCBjaG9zZW4gdGhlIHNpZGUgb2YgdGhlIFNwYXJ0YW5zIGFuZCByZWNlaXZlZCB0d28gZGl2aXNpb25zIG9mIHRoZW0gZm9yIGl0cyBwcm90ZWN0aW9uLCBoZSB3YXMgZXZlciBsYXlpbmcgcGxhbnMgYW5kIHdhdGNoaW5nIGhpcyBvcHBvcnR1bml0eSwKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBhbmQgd2hlbiBoZSBoZWFyZCB0aGF0IGl0cyBnYXJyaXNvbiBoYWQgbWFkZSBhbiBleHBlZGl0aW9uIGludG8gTG9jcmlzLCBoZSBob3BlZCB0byBmaW5kIHRoZSBjaXR5IHdpdGhvdXQgZGVmZW5kZXJzLCBhbmQgbWFyY2hlZCBhZ2FpbnN0IGl0LCBoYXZpbmcgd2l0aCBoaW0gdGhlIHNhY3JlZCBiYW5kIGFuZCBhIGZldyBob3JzZW1lbi4gICAgQnV0IHdoZW4sIG9uIGFwcHJvYWNoaW5nIHRoZSBjaXR5LCBoZSBmb3VuZCB0aGF0IGl0cyBnYXJyaXNvbiBoYWQgYmVlbiByZXBsYWNlZCB3aXRoIG90aGVyIHRyb29wcyBmcm9tIFNwYXJ0YSwgaGUgbGVkIGhpcyBhcm15IGJhY2sgYWdhaW4gdGhyb3VnaCB0aGUgZGlzdHJpY3Qgb2YgVGVneXJhLCB0aGF0IGJlaW5nIHRoZSBvbmx5IHdheSBieSB3aGljaCBoZSBjb3VsZCBtYWtlIGEgY2lyY3VpdCBhbG9uZyB0aGUgZm9vdCBvZiB0aGUgbW91bnRhaW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhlIGludGVydmVuaW5nIHBsYWluIHdhcyBtYWRlIGltcGFzc2FibGUgYnkgdGhlIHJpdmVyIE1lbGFzLCB3aGljaCBubyBzb29uZXIgYmVnaW5zIHRvIGZsb3cgdGhhbiBpdCBzcHJlYWRzIGl0c2VsZiBvdXQgaW50byBuYXZpZ2FibGUgbWFyc2hlcyBhbmQgbGFrZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBsaXR0bGUgYmVsb3cgdGhlIG1hcnNoZXMgc3RhbmRzIHRoZSB0ZW1wbGUgb2YgQXBvbGxvIFRlZ3lyYWV1cywgd2l0aCBhbiBvcmFjbGUgd2hpY2ggaGFkIG5vdCBiZWVuIGxvbmcgYWJhbmRvbmVkLCBidXQgd2FzIGZsb3VyaXNoaW5nIGRvd24gdG8gdGhlIFBlcnNpYW4gd2Fycywgd2hlbiBFY2hlY3JhdGVzIHdhcyBwcm9waGV0LXByaWVzdC4gSGVyZSwgYWNjb3JkaW5nIHRvIHRoZSBzdG9yeSwgdGhlIGdvZCB3YXMgYm9ybjsgYW5kIHRoZSBuZWlnaGJvdXJpbmcgbW91bnRhaW4gaXMgY2FsbGVkIERlbG9zLCBhbmQgYXQgaXRzIGJhc2UgdGhlIHJpdmVyIE1lbGFzIGNlYXNlcyB0byBiZSBzcHJlYWQgb3V0LCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZWhpbmQgdGhlIHRlbXBsZSB0d28gc3ByaW5ncyBidXJzdCBmb3J0aCB3aXRoIGEgd29uZGVyZnVsIGZsb3cgb2Ygc3dlZXQsIGNvcGlvdXMsIGFuZCBjb29sIHdhdGVyLiBPbmUgb2YgdGhlc2Ugd2UgY2FsbCBQYWxtLCB0aGUgb3RoZXIgT2xpdmUgdG8gdGhlIHByZXNlbnQgZGF5LCBmb3IgaXQgd2FzIG5vdCBiZXR3ZWVuIHR3byB0cmVlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcyBpbiB0aGUgRGVsaWFuIHN0b3J5IG9mIHRoZSBiaXJ0aCBvZiBBcG9sbG8gYW5kIEFydGVtaXMuPC9ub3RlPiBidXQgYmV0d2VlbiB0d28gZm91bnRhaW5zLCB0aGF0IHRoZSBnb2RkZXNzIExldG8gd2FzIGRlbGl2ZXJlZCBvZiBoZXIgY2hpbGRyZW4uICAgTW9yZW92ZXIsIHRoZSBQdG/DvG08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIG1vdW50YWluIGF0IHRoZSBzb3V0aC1lYXN0ZXJuIHNpZGUgb2YgTGFrZSBDb3Bhw69zLCBvbiB3aGljaCB3YXMgYSBjZWxlYnJhdGVkIHNhbmN0dWFyeSBvZiBBcG9sbG8uPC9ub3RlPiBpcyBuZWFyLCBmcm9tIHdoaWNoLCBpdCBpcyBzYWlkLCBhIGJvYXIgc3VkZGVubHkgY2FtZSBmb3J0aCBhbmQgZnJpZ2h0ZW5lZCB0aGUgZ29kZGVzcywgYW5kIGluIGxpa2UgbWFubmVyIHRoZSBzdG9yaWVzIG9mIHRoZSBQeXRob248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGRyYWdvbiBhbmQgYSBnaWFudCwgd2hvIHdlcmUgc2xhaW4gYnkgQXBvbGxvIGFuZCBBcnRlbWlzLjwvbm90ZT4gYW5kIG9mIFRpdHl1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZHJhZ29uIGFuZCBhIGdpYW50LCB3aG8gd2VyZSBzbGFpbiBieSBBcG9sbG8gYW5kIEFydGVtaXMuPC9ub3RlPiBhcmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBiaXJ0aCBvZiBBcG9sbG8gaW4gdGhpcyBsb2NhbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGUgcHJvb2ZzLCBob3dldmVyLCBJIHNoYWxsIHBhc3Mgb3ZlcjsgZm9yIG15IG5hdGl2ZSB0cmFkaXRpb24gcmVtb3ZlcyB0aGlzIGdvZCBmcm9tIGFtb25nIHRob3NlIGRlaXRpZXMgd2hvIHdlcmUgY2hhbmdlZCBmcm9tIG1vcnRhbHMgaW50byBpbW1vcnRhbHMsIGxpa2UgSGVyYWNsZXMgYW5kIERpb255c3VzLCB3aG9zZSB2aXJ0dWVzIGVuYWJsZWQgdGhlbSB0byBjYXN0IG9mZiBtb3J0YWxpdHkgYW5kIHN1ZmZlcmluZzsgYnV0IGhlIGlzIG9uZSBvZiB0aG9zZSBkZWl0aWVzIHdobyBhcmUgdW5iZWdvdHRlbiBhbmQgZXRlcm5hbCwgaWYgd2UgbWF5IGp1ZGdlIGJ5IHdoYXQgdGhlIG1vc3QgYW5jaWVudCBhbmQgd2lzZXN0IG1lbiBoYXZlIHNhaWQgb24gc3VjaCBtYXR0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZWhpbmQgdGhlIHRlbXBsZSB0d28gc3ByaW5ncyBidXJzdCBmb3J0aCB3aXRoIGEgd29uZGVyZnVsIGZsb3cgb2Ygc3dlZXQsIGNvcGlvdXMsIGFuZCBjb29sIHdhdGVyLiBPbmUgb2YgdGhlc2Ugd2UgY2FsbCBQYWxtLCB0aGUgb3RoZXIgT2xpdmUgdG8gdGhlIHByZXNlbnQgZGF5LCBmb3IgaXQgd2FzIG5vdCBiZXR3ZWVuIHR3byB0cmVlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIGluIHRoZSBEZWxpYW4gc3Rvcnkgb2YgdGhlIGJpcnRoIG9mIEFwb2xsbyBhbmQgQXJ0ZW1pcy48L25vdGU+IGJ1dCBiZXR3ZWVuIHR3byBmb3VudGFpbnMsIHRoYXQgdGhlIGdvZGRlc3MgTGV0byB3YXMgZGVsaXZlcmVkIG9mIGhlciBjaGlsZHJlbi4gICBNb3Jlb3ZlciwgdGhlIFB0b8O8bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBtb3VudGFpbiBhdCB0aGUgc291dGgtZWFzdGVybiBzaWRlIG9mIExha2UgQ29wYcOvcywgb24gd2hpY2ggd2FzIGEgY2VsZWJyYXRlZCBzYW5jdHVhcnkgb2YgQXBvbGxvLjwvbm90ZT4gaXMgbmVhciwgZnJvbSB3aGljaCwgaXQgaXMgc2FpZCwgYSBib2FyIHN1ZGRlbmx5IGNhbWUgZm9ydGggYW5kIGZyaWdodGVuZWQgdGhlIGdvZGRlc3MsIGFuZCBpbiBsaWtlIG1hbm5lciB0aGUgc3RvcmllcyBvZiB0aGUgUHl0aG9uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGRyYWdvbiBhbmQgYSBnaWFudCwgd2hvIHdlcmUgc2xhaW4gYnkgQXBvbGxvIGFuZCBBcnRlbWlzLjwvbm90ZT4gYW5kIG9mIFRpdHl1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBkcmFnb24gYW5kIGEgZ2lhbnQsIHdobyB3ZXJlIHNsYWluIGJ5IEFwb2xsbyBhbmQgQXJ0ZW1pcy48L25vdGU+IGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGJpcnRoIG9mIEFwb2xsbyBpbiB0aGlzIGxvY2FsaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIHByb29mcywgaG93ZXZlciwgSSBzaGFsbCBwYXNzIG92ZXI7IGZvciBteSBuYXRpdmUgdHJhZGl0aW9uIHJlbW92ZXMgdGhpcyBnb2QgZnJvbSBhbW9uZyB0aG9zZSBkZWl0aWVzIHdobyB3ZXJlIGNoYW5nZWQgZnJvbSBtb3J0YWxzIGludG8gaW1tb3J0YWxzLCBsaWtlIEhlcmFjbGVzIGFuZCBEaW9ueXN1cywgd2hvc2UgdmlydHVlcyBlbmFibGVkIHRoZW0gdG8gY2FzdCBvZmYgbW9ydGFsaXR5IGFuZCBzdWZmZXJpbmc7IGJ1dCBoZSBpcyBvbmUgb2YgdGhvc2UgZGVpdGllcyB3aG8gYXJlIHVuYmVnb3R0ZW4gYW5kIGV0ZXJuYWwsIGlmIHdlIG1heSBqdWRnZSBieSB3aGF0IHRoZSBtb3N0IGFuY2llbnQgYW5kIHdpc2VzdCBtZW4gaGF2ZSBzYWlkIG9uIHN1Y2ggbWF0dGVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIGFzIHRoZSBUaGViYW5zIGVudGVyZWQgdGhlIGRpc3RyaWN0IG9mIFRlZ3lyYSBvbiB0aGVpciB3YXkgYmFjayBmcm9tIE9yY2hvbWVudXMsIHRoZSBMYWNlZGFlbW9uaWFucyBhbHNvIGVudGVyZWQgaXQgYXQgdGhlIHNhbWUgdGltZSwgcmV0dXJuaW5nIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gZnJvbSBMb2NyaXMsIGFuZCBtZXQgdGhlbS4gQXMgc29vbiBhcyB0aGV5IHdlcmUgc2VlbiBtYXJjaGluZyB0aHJvdWdoIHRoZSBuYXJyb3cgcGFzcywgc29tZSBvbmUgcmFuIHVwIHRvIFBlbG9waWRhcyBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBoYXZlIGZhbGxlbiBpbnRvIG91ciBlbmVtaWVzJyBoYW5kcyE8L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgYW55IG1vcmUsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYW4gdGhleSBpbnRvIG91cnM/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgYXQgb25jZSBvcmRlcmVkIGFsbCBoaXMgaG9yc2VtZW4gdG8gcmlkZSB1cCBmcm9tIHRoZSByZWFyIGluIG9yZGVyIHRvIGNoYXJnZSwgd2hpbGUgaGUgaGltc2VsZiBwdXQgaGlzIG1lbi1hdC1hcm1zLCB0aHJlZSBodW5kcmVkIGluIG51bWJlciwgaW50byBjbG9zZSBhcnJheSwgZXhwZWN0aW5nIHRoYXQgd2hlcmV2ZXIgdGhleSBjaGFyZ2VkIGhlIHdvdWxkIGJlIG1vc3QgbGlrZWx5IHRvIGN1dCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15LCB3aG8gb3V0bnVtYmVyZWQgaGltLiBOb3csIHRoZXJlIHdlcmUgdHdvIGRpdmlzaW9ucyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHRoZSBkaXZpc2lvbiBjb25zaXN0aW5nIG9mIGZpdmUgaHVuZHJlZCBtZW4sIGFjY29yZGluZyB0byBFcGhvcnVzLCBvZiBzZXZlbiBodW5kcmVkLCBhY2NvcmRpbmcgdG8gQ2FsbGlzdGhlbmVzLCBvZiBuaW5lIGh1bmRyZWQsIGFjY29yZGluZyB0byBjZXJ0YWluIG90aGVyIHdyaXRlcnMsIGFtb25nIHdob20gaXMgUG9seWJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvbmZpZGVudCBvZiB2aWN0b3J5LCB0aGUgcG9sZW1hcmNocyBvZiB0aGUgU3BhcnRhbnMsIEdvcmdvbGVvbiBhbmQgVGhlb3BvbXB1cywgYWR2YW5jZWQgYWdhaW5zdCB0aGUgVGhlYmFucy4gIFRoZSBvbnNldCBiZWluZyBtYWRlIG9uIGJvdGggc2lkZXMgcGFydGljdWxhcmx5IHdoZXJlIHRoZSBjb21tYW5kZXJzIHRoZW1zZWx2ZXMgc3Rvb2QsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhlIExhY2VkYWVtb25pYW4gcG9sZW1hcmNocyBjbGFzaGVkIHdpdGggUGVsb3BpZGFzIGFuZCBmZWxsOyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz50aGVuLCB3aGVuIHRob3NlIGFib3V0IHRoZW0gd2VyZSBiZWluZyB3b3VuZGVkIGFuZCBzbGFpbiwgdGhlaXIgd2hvbGUgYXJteSB3YXMgc2VpemVkIHdpdGggZmVhciBhbmQgb3BlbmVkIHVwIGEgbGFuZSBmb3IgdGhlIFRoZWJhbnMsIGltYWdpbmluZyB0aGF0IHRoZXkgd2lzaGVkIHRvIGZvcmNlIHRoZWlyIHdheSB0aHJvdWdoIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIGFuZCBnZXQgYXdheS4gIEJ1dCBQZWxvcGlkYXMgdXNlZCB0aGUgcGF0aCB0aHVzIG9wZW5lZCB0byBsZWFkIGhpcyBtZW4gYWdhaW5zdCB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIHN0aWxsIGhlbGQgdG9nZXRoZXIsIGFuZCBzbGV3IHRoZW0gYXMgaGUgd2VudCBhbG9uZywgc28gdGhhdCBmaW5hbGx5IGFsbCB0dXJuZWQgYW5kIGZsZWQuIFRoZSBwdXJzdWl0LCBob3dldmVyLCB3YXMgY2FycmllZCBidXQgYSBsaXR0bGUgd2F5LCBmb3IgdGhlIFRoZWJhbnMgZmVhcmVkIHRoZSBPcmNob21lbmlhbnMsIHdobyB3ZXJlIG5lYXIsIGFuZCB0aGUgcmVsaWVmIGZvcmNlIGZyb20gU3BhcnRhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhhZCBzdWNjZWVkZWQsIGhvd2V2ZXIsIGluIGNvbnF1ZXJpbmcgdGhlaXIgZW5lbXkgb3V0cmlnaHQgYW5kIGZvcmNpbmcgdGhlaXIgd2F5IHZpY3RvcmlvdXNseSB0aHJvdWdoIGhpcyB3aG9sZSBhcm15OyBzbyB0aGV5IGVyZWN0ZWQgYSB0cm9waHksIHNwb2lsZWQgdGhlIGRlYWQsIGFuZCByZXRpcmVkIGhvbWV3YXJkcyBpbiBoaWdoIHNwaXJpdHMuICAgRm9yIGluIGFsbCB0aGVpciB3YXJzIHdpdGggR3JlZWtzIGFuZCBCYXJiYXJpYW5zLCBhcyBpdCB3b3VsZCBzZWVtLCBuZXZlciBiZWZvcmUgaGFkIExhY2VkYWVtb25pYW5zIGluIHN1cGVyaW9yIG51bWJlcnMgYmVlbiBvdmVycG93ZXJlZCBieSBhbiBpbmZlcmlvciBmb3JjZSwgbm9yLCBpbmRlZWQsIGluIGEgcGl0Y2hlZCBiYXR0bGUgd2hlcmUgdGhlIGZvcmNlcyB3ZXJlIGV2ZW5seSBtYXRjaGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSB0aGV5IHdlcmUgb2YgYW4gaXJyZXNpc3RpYmxlIGNvdXJhZ2UsIGFuZCB3aGVuIHRoZXkgY2FtZSB0byBjbG9zZSBxdWFydGVycyB0aGVpciB2ZXJ5IHJlcHV0YXRpb24gc3VmZmljZWQgdG8gdGVycmlmeSB0aGVpciBvcHBvbmVudHMsIHdobyBhbHNvLCBvbiB0aGVpciBwYXJ0LCB0aG91Z2h0IHRoZW1zZWx2ZXMgbm8gbWF0Y2ggZm9yIFNwYXJ0YW5zIHdpdGggYW4gZXF1YWwgZm9yY2UuIEJ1dCB0aGlzIGJhdHRsZSBmaXJzdCB0YXVnaHQgdGhlIG90aGVyIEdyZWVrcyBhbHNvIHRoYXQgaXQgd2FzIG5vdCB0aGUgRXVyb3Rhcywgbm9yIHRoZSByZWdpb24gYmV0d2VlbiBCYWJ5Y2UgYW5kIENuYWNpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgbmFtZXMgb2Ygc21hbGwgdHJpYnV0YXJpZXMgb2YgdGhlIEV1cm90YXMgbmVhciBTcGFydGEuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHZpLiAxLTMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoaWNoIGFsb25lIHByb2R1Y2VkIHdhcmxpa2UgZmlnaHRpbmcgbWVuLCBidXQgdGhhdCB3aGVyZXNvZXZlciB5b3VuZyBtZW4gYXJlIHByb25lIHRvIGJlIGFzaGFtZWQgb2YgYmFzZW5lc3MgYW5kIGNvdXJhZ2VvdXMgaW4gYSBub2JsZSBjYXVzZSwgc2h1bm5pbmcgZGlzZ3JhY2UgbW9yZSB0aGFuIGRhbmdlciwgdGhlc2UgYXJlIG1vc3QgZm9ybWlkYWJsZSB0byB0aGVpciBmb2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIGFzIHRoZSBUaGViYW5zIGVudGVyZWQgdGhlIGRpc3RyaWN0IG9mIFRlZ3lyYSBvbiB0aGVpciB3YXkgYmFjayBmcm9tIE9yY2hvbWVudXMsIHRoZSBMYWNlZGFlbW9uaWFucyBhbHNvIGVudGVyZWQgaXQgYXQgdGhlIHNhbWUgdGltZSwgcmV0dXJuaW5nIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gZnJvbSBMb2NyaXMsIGFuZCBtZXQgdGhlbS4gQXMgc29vbiBhcyB0aGV5IHdlcmUgc2VlbiBtYXJjaGluZyB0aHJvdWdoIHRoZSBuYXJyb3cgcGFzcywgc29tZSBvbmUgcmFuIHVwIHRvIFBlbG9waWRhcyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIGhhdmUgZmFsbGVuIGludG8gb3VyIGVuZW1pZXMnIGhhbmRzITwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IGFueSBtb3JlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYW4gdGhleSBpbnRvIG91cnM/PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgYXQgb25jZSBvcmRlcmVkIGFsbCBoaXMgaG9yc2VtZW4gdG8gcmlkZSB1cCBmcm9tIHRoZSByZWFyIGluIG9yZGVyIHRvIGNoYXJnZSwgd2hpbGUgaGUgaGltc2VsZiBwdXQgaGlzIG1lbi1hdC1hcm1zLCB0aHJlZSBodW5kcmVkIGluIG51bWJlciwgaW50byBjbG9zZSBhcnJheSwgZXhwZWN0aW5nIHRoYXQgd2hlcmV2ZXIgdGhleSBjaGFyZ2VkIGhlIHdvdWxkIGJlIG1vc3QgbGlrZWx5IHRvIGN1dCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15LCB3aG8gb3V0bnVtYmVyZWQgaGltLiBOb3csIHRoZXJlIHdlcmUgdHdvIGRpdmlzaW9ucyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIHRoZSBkaXZpc2lvbiBjb25zaXN0aW5nIG9mIGZpdmUgaHVuZHJlZCBtZW4sIGFjY29yZGluZyB0byBFcGhvcnVzLCBvZiBzZXZlbiBodW5kcmVkLCBhY2NvcmRpbmcgdG8gQ2FsbGlzdGhlbmVzLCBvZiBuaW5lIGh1bmRyZWQsIGFjY29yZGluZyB0byBjZXJ0YWluIG90aGVyIHdyaXRlcnMsIGFtb25nIHdob20gaXMgUG9seWJpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvbmZpZGVudCBvZiB2aWN0b3J5LCB0aGUgcG9sZW1hcmNocyBvZiB0aGUgU3BhcnRhbnMsIEdvcmdvbGVvbiBhbmQgVGhlb3BvbXB1cywgYWR2YW5jZWQgYWdhaW5zdCB0aGUgVGhlYmFucy4gIFRoZSBvbnNldCBiZWluZyBtYWRlIG9uIGJvdGggc2lkZXMgcGFydGljdWxhcmx5IHdoZXJlIHRoZSBjb21tYW5kZXJzIHRoZW1zZWx2ZXMgc3Rvb2QsIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhlIExhY2VkYWVtb25pYW4gcG9sZW1hcmNocyBjbGFzaGVkIHdpdGggUGVsb3BpZGFzIGFuZCBmZWxsOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZW4sIHdoZW4gdGhvc2UgYWJvdXQgdGhlbSB3ZXJlIGJlaW5nIHdvdW5kZWQgYW5kIHNsYWluLCB0aGVpciB3aG9sZSBhcm15IHdhcyBzZWl6ZWQgd2l0aCBmZWFyIGFuZCBvcGVuZWQgdXAgYSBsYW5lIGZvciB0aGUgVGhlYmFucywgaW1hZ2luaW5nIHRoYXQgdGhleSB3aXNoZWQgdG8gZm9yY2UgdGhlaXIgd2F5IHRocm91Z2ggdG8gdGhlIG9wcG9zaXRlIHNpZGUgYW5kIGdldCBhd2F5LiAgQnV0IFBlbG9waWRhcyB1c2VkIHRoZSBwYXRoIHRodXMgb3BlbmVkIHRvIGxlYWQgaGlzIG1lbiBhZ2FpbnN0IHRob3NlIG9mIHRoZSBlbmVteSB3aG8gc3RpbGwgaGVsZCB0b2dldGhlciwgYW5kIHNsZXcgdGhlbSBhcyBoZSB3ZW50IGFsb25nLCBzbyB0aGF0IGZpbmFsbHkgYWxsIHR1cm5lZCBhbmQgZmxlZC4gVGhlIHB1cnN1aXQsIGhvd2V2ZXIsIHdhcyBjYXJyaWVkIGJ1dCBhIGxpdHRsZSB3YXksIGZvciB0aGUgVGhlYmFucyBmZWFyZWQgdGhlIE9yY2hvbWVuaWFucywgd2hvIHdlcmUgbmVhciwgYW5kIHRoZSByZWxpZWYgZm9yY2UgZnJvbSBTcGFydGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkIHN1Y2NlZWRlZCwgaG93ZXZlciwgaW4gY29ucXVlcmluZyB0aGVpciBlbmVteSBvdXRyaWdodCBhbmQgZm9yY2luZyB0aGVpciB3YXkgdmljdG9yaW91c2x5IHRocm91Z2ggaGlzIHdob2xlIGFybXk7IHNvIHRoZXkgZXJlY3RlZCBhIHRyb3BoeSwgc3BvaWxlZCB0aGUgZGVhZCwgYW5kIHJldGlyZWQgaG9tZXdhcmRzIGluIGhpZ2ggc3Bpcml0cy4gICBGb3IgaW4gYWxsIHRoZWlyIHdhcnMgd2l0aCBHcmVla3MgYW5kIEJhcmJhcmlhbnMsIGFzIGl0IHdvdWxkIHNlZW0sIG5ldmVyIGJlZm9yZSBoYWQgTGFjZWRhZW1vbmlhbnMgaW4gc3VwZXJpb3IgbnVtYmVycyBiZWVuIG92ZXJwb3dlcmVkIGJ5IGFuIGluZmVyaW9yIGZvcmNlLCBub3IsIGluZGVlZCwgaW4gYSBwaXRjaGVkIGJhdHRsZSB3aGVyZSB0aGUgZm9yY2VzIHdlcmUgZXZlbmx5IG1hdGNoZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlbmNlIHRoZXkgd2VyZSBvZiBhbiBpcnJlc2lzdGlibGUgY291cmFnZSwgYW5kIHdoZW4gdGhleSBjYW1lIHRvIGNsb3NlIHF1YXJ0ZXJzIHRoZWlyIHZlcnkgcmVwdXRhdGlvbiBzdWZmaWNlZCB0byB0ZXJyaWZ5IHRoZWlyIG9wcG9uZW50cywgd2hvIGFsc28sIG9uIHRoZWlyIHBhcnQsIHRob3VnaHQgdGhlbXNlbHZlcyBubyBtYXRjaCBmb3IgU3BhcnRhbnMgd2l0aCBhbiBlcXVhbCBmb3JjZS4gQnV0IHRoaXMgYmF0dGxlIGZpcnN0IHRhdWdodCB0aGUgb3RoZXIgR3JlZWtzIGFsc28gdGhhdCBpdCB3YXMgbm90IHRoZSBFdXJvdGFzLCBub3IgdGhlIHJlZ2lvbiBiZXR3ZWVuIEJhYnljZSBhbmQgQ25hY2lvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IG5hbWVzIG9mIHNtYWxsIHRyaWJ1dGFyaWVzIG9mIHRoZSBFdXJvdGFzIG5lYXIgU3BhcnRhLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgdmkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggYWxvbmUgcHJvZHVjZWQgd2FybGlrZSBmaWdodGluZyBtZW4sIGJ1dCB0aGF0IHdoZXJlc29ldmVyIHlvdW5nIG1lbiBhcmUgcHJvbmUgdG8gYmUgYXNoYW1lZCBvZiBiYXNlbmVzcyBhbmQgY291cmFnZW91cyBpbiBhIG5vYmxlIGNhdXNlLCBzaHVubmluZyBkaXNncmFjZSBtb3JlIHRoYW4gZGFuZ2VyLCB0aGVzZSBhcmUgbW9zdCBmb3JtaWRhYmxlIHRvIHRoZWlyIGZvZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgdmkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHZpLiAxLTMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNhY3JlZCBiYW5kLCB3ZSBhcmUgdG9sZCwgd2FzIGZpcnN0IGZvcm1lZCBieSBHb3JnaWRhcywgb2YgdGhyZWUgaHVuZHJlZCBjaG9zZW4gbWVuLCB0byB3aG9tIHRoZSBjaXR5IGZ1cm5pc2hlZCBleGVyY2lzZSBhbmQgbWFpbnRlbmFuY2UsIGFuZCB3aG8gZW5jYW1wZWQgaW4gdGhlIENhZG1laWE7IGZvciB3aGljaCByZWFzb24sIHRvbywgdGhleSB3ZXJlIGNhbGxlZCB0aGUgY2l0eSBiYW5kOyBmb3IgY2l0YWRlbHMgaW4gdGhvc2UgZGF5cyB3ZXJlIHByb3Blcmx5IGNhbGxlZCBjaXRpZXMuICBCdXQgc29tZSBzYXkgdGhhdCB0aGlzIGJhbmQgd2FzIGNvbXBvc2VkIG9mIGxvdmVycyBhbmQgYmVsb3ZlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgcGxlYXNhbnRyeSBvZiBQYW1tZW5lcyBpcyBjaXRlZCwgaW4gd2hpY2ggaGUgc2FpZCB0aGF0IEhvbWVyJ3MgTmVzdG9yIHdhcyBubyB0YWN0aWNpYW4gd2hlbiBoZSB1cmdlZCB0aGUgR3JlZWtzIHRvIGZvcm0gaW4gY29tcGFuaWVzIGJ5IGNsYW5zIGFuZCB0cmliZXMsIAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGF0IGNsYW4gbWlnaHQgZ2l2ZSBhc3Npc3RhbmNlIHVudG8gY2xhbiwgYW5kIHRyaWJlcyB0byB0cmliZXMsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIuMzYzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkPC90aXRsZT4sIGlpLiAzNjM8L2JpYmw+LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNzYxYiI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Nb3JhbHM8L3RpdGxlPiwgcC4gNzYxIGIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJc2luY2UgaGUgc2hvdWxkIGhhdmUgc3RhdGlvbmVkICAgIGxvdmVyIGJ5IGJlbG92ZWQuIEZvciB0cmliZXNtZW4gYW5kIGNsYW5zbWVuIG1ha2UgbGl0dGxlIGFjY291bnQgb2YgdHJpYmVzbWVuIGFuZCBjbGFuc21lbiBpbiB0aW1lcyBvZiBkYW5nZXI7IHdoZXJlYXMsIGEgYmFuZCB0aGF0IGlzIGhlbGQgdG9nZXRoZXIgYnkgdGhlIGZyaWVuZHNoaXAgYmV0d2VlbiBsb3ZlcnMgaXMgaW5kaXNzb2x1YmxlIGFuZCBub3QgdG8gYmUgYnJva2VuLCBzaW5jZSB0aGUgbG92ZXJzIGFyZSBhc2hhbWVkIHRvIHBsYXkgdGhlIGNvd2FyZCBiZWZvcmUgdGhlaXIgYmVsb3ZlZCwgYW5kIHRoZSBiZWxvdmVkIGJlZm9yZSB0aGVpciBsb3ZlcnMsIGFuZCBib3RoIHN0YW5kIGZpcm0gaW4gZGFuZ2VyIHRvIHByb3RlY3QgZWFjaCBvdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIGlzIHRoaXMgYSB3b25kZXIgc2luY2UgbWVuIGhhdmUgbW9yZSByZWdhcmQgZm9yIHRoZWlyIGxvdmVycyBldmVuIHdoZW4gYWJzZW50IHRoYW4gZm9yIG90aGVycyB3aG8gYXJlIHByZXNlbnQsIGFzIHdhcyB0cnVlIG9mIGhpbSB3aG8sIHdoZW4gaGlzIGVuZW15IHdhcyBhYm91dCB0byBzbGF5IGhpbSB3aGVyZSBoZSBsYXksIGVhcm5lc3RseSBiZXNvdWdodCBoaW0gdG8gcnVuIGhpcyBzd29yZCB0aHJvdWdoIGhpcyBicmVhc3QsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gb3JkZXIsPC9xPiBhcyBoZSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgbXkgYmVsb3ZlZCBtYXkgbm90IGhhdmUgdG8gYmx1c2ggYXQgc2lnaHQgb2YgbXkgYm9keSB3aXRoIGEgd291bmQgaW4gdGhlIGJhY2suPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHJlbGF0ZWQsIHRvbywgdGhhdCBJb2xhw7xzLCB3aG8gc2hhcmVkIHRoZSBsYWJvdXJzIG9mIEhlcmFjbGVzIGFuZCBmb3VnaHQgYnkgaGlzIHNpZGUsIHdhcyBiZWxvdmVkIG9mIGhpbS4gQW5kIEFyaXN0b3RsZSBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgOTcgKFJvc2UpLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA3NjFkIj5DZi4gPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwLiA3NjEgZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBldmVuIGRvd24gdG8gaGlzIGRheSB0aGUgdG9tYiBvZiBJb2xhw7xzIHdhcyBhIHBsYWNlIHdoZXJlIGxvdmVycyBhbmQgYmVsb3ZlZCBwbGlnaHRlZCBtdXR1YWwgZmFpdGguICAgSXQgd2FzIG5hdHVyYWwsIHRoZW4sIHRoYXQgdGhlIGJhbmQgc2hvdWxkIGFsc28gYmUgY2FsbGVkIHNhY3JlZCwgYmVjYXVzZSBldmVuIFBsYXRvIGNhbGxzIHRoZSBsb3ZlciBhIGZyaWVuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluc3BpcmVkIG9mIEdvZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gU3ltLiAxNzlhIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlN5bXBvc2l1bTwvdGl0bGU+LCBwLiAxNzkgYS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gIAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCwgbW9yZW92ZXIsIHRoYXQgdGhlIGJhbmQgd2FzIG5ldmVyIGJlYXRlbiwgdW50aWwgdGhlIGJhdHRsZSBvZiBDaGFlcm9uZWlhOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjMzOCBCLkMuPC9ub3RlPiBhbmQgd2hlbiwgYWZ0ZXIgdGhlIGJhdHRsZSwgUGhpbGlwIHdhcyBzdXJ2ZXlpbmcgdGhlIGRlYWQsIGFuZCBzdG9wcGVkIGF0IHRoZSBwbGFjZSB3aGVyZSB0aGUgdGhyZWUgaHVuZHJlZCB3ZXJlIGx5aW5nLCBhbGwgd2hlcmUgdGhleSBoYWQgZmFjZWQgdGhlIGxvbmcgc3BlYXJzIG9mIGhpcyBwaGFsYW54LCB3aXRoIHRoZWlyIGFybW91ciwgYW5kIG1pbmdsZWQgb25lIHdpdGggYW5vdGhlciwgaGUgd2FzIGFtYXplZCwgYW5kIG9uIGxlYXJuaW5nIHRoYXQgdGhpcyB3YXMgdGhlIGJhbmQgb2YgbG92ZXJzIGFuZCBiZWxvdmVkLCBidXJzdCBpbnRvIHRlYXJzIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlBlcmlzaCBtaXNlcmFibHkgdGhleSB3aG8gdGhpbmsgdGhhdCB0aGVzZSBtZW4gZGlkIG9yIHN1ZmZlcmVkIGF1Z2h0IGRpc2dyYWNlZnVsLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNhY3JlZCBiYW5kLCB3ZSBhcmUgdG9sZCwgd2FzIGZpcnN0IGZvcm1lZCBieSBHb3JnaWRhcywgb2YgdGhyZWUgaHVuZHJlZCBjaG9zZW4gbWVuLCB0byB3aG9tIHRoZSBjaXR5IGZ1cm5pc2hlZCBleGVyY2lzZSBhbmQgbWFpbnRlbmFuY2UsIGFuZCB3aG8gZW5jYW1wZWQgaW4gdGhlIENhZG1laWE7IGZvciB3aGljaCByZWFzb24sIHRvbywgdGhleSB3ZXJlIGNhbGxlZCB0aGUgY2l0eSBiYW5kOyBmb3IgY2l0YWRlbHMgaW4gdGhvc2UgZGF5cyB3ZXJlIHByb3Blcmx5IGNhbGxlZCBjaXRpZXMuICBCdXQgc29tZSBzYXkgdGhhdCB0aGlzIGJhbmQgd2FzIGNvbXBvc2VkIG9mIGxvdmVycyBhbmQgYmVsb3ZlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIHBsZWFzYW50cnkgb2YgUGFtbWVuZXMgaXMgY2l0ZWQsIGluIHdoaWNoIGhlIHNhaWQgdGhhdCBIb21lcidzIE5lc3RvciB3YXMgbm8gdGFjdGljaWFuIHdoZW4gaGUgdXJnZWQgdGhlIEdyZWVrcyB0byBmb3JtIGluIGNvbXBhbmllcyBieSBjbGFucyBhbmQgdHJpYmVzLCAKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoYXQgY2xhbiBtaWdodCBnaXZlIGFzc2lzdGFuY2UgdW50byBjbGFuLCBhbmQgdHJpYmVzIHRvIHRyaWJlcyw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBjbGFuIG1pZ2h0IGdpdmUgYXNzaXN0YW5jZSB1bnRvIGNsYW4sIGFuZCB0cmliZXMgdG8gdHJpYmVzLDwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMi4zNjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpaS4gMzYzPC9iaWJsPi4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNzYxYiI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA3NjEgYi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQlzaW5jZSBoZSBzaG91bGQgaGF2ZSBzdGF0aW9uZWQgICAgbG92ZXIgYnkgYmVsb3ZlZC4gRm9yIHRyaWJlc21lbiBhbmQgY2xhbnNtZW4gbWFrZSBsaXR0bGUgYWNjb3VudCBvZiB0cmliZXNtZW4gYW5kIGNsYW5zbWVuIGluIHRpbWVzIG9mIGRhbmdlcjsgd2hlcmVhcywgYSBiYW5kIHRoYXQgaXMgaGVsZCB0b2dldGhlciBieSB0aGUgZnJpZW5kc2hpcCBiZXR3ZWVuIGxvdmVycyBpcyBpbmRpc3NvbHVibGUgYW5kIG5vdCB0byBiZSBicm9rZW4sIHNpbmNlIHRoZSBsb3ZlcnMgYXJlIGFzaGFtZWQgdG8gcGxheSB0aGUgY293YXJkIGJlZm9yZSB0aGVpciBiZWxvdmVkLCBhbmQgdGhlIGJlbG92ZWQgYmVmb3JlIHRoZWlyIGxvdmVycywgYW5kIGJvdGggc3RhbmQgZmlybSBpbiBkYW5nZXIgdG8gcHJvdGVjdCBlYWNoIG90aGVyLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIuMzYzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgaWkuIDM2MzwvYmlibD4uIENmLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCBpaS4gMzYzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA3NjFiIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDc2MSBiLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDc2MSBiLjwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vciBpcyB0aGlzIGEgd29uZGVyIHNpbmNlIG1lbiBoYXZlIG1vcmUgcmVnYXJkIGZvciB0aGVpciBsb3ZlcnMgZXZlbiB3aGVuIGFic2VudCB0aGFuIGZvciBvdGhlcnMgd2hvIGFyZSBwcmVzZW50LCBhcyB3YXMgdHJ1ZSBvZiBoaW0gd2hvLCB3aGVuIGhpcyBlbmVteSB3YXMgYWJvdXQgdG8gc2xheSBoaW0gd2hlcmUgaGUgbGF5LCBlYXJuZXN0bHkgYmVzb3VnaHQgaGltIHRvIHJ1biBoaXMgc3dvcmQgdGhyb3VnaCBoaXMgYnJlYXN0LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aW4gb3JkZXIsPC9xPiBhcyBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBteSBiZWxvdmVkIG1heSBub3QgaGF2ZSB0byBibHVzaCBhdCBzaWdodCBvZiBteSBib2R5IHdpdGggYSB3b3VuZCBpbiB0aGUgYmFjay48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHJlbGF0ZWQsIHRvbywgdGhhdCBJb2xhw7xzLCB3aG8gc2hhcmVkIHRoZSBsYWJvdXJzIG9mIEhlcmFjbGVzIGFuZCBmb3VnaHQgYnkgaGlzIHNpZGUsIHdhcyBiZWxvdmVkIG9mIGhpbS4gQW5kIEFyaXN0b3RsZSBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCA5NyAoUm9zZSkuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNzYxZCI+Q2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA3NjEgZC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCBldmVuIGRvd24gdG8gaGlzIGRheSB0aGUgdG9tYiBvZiBJb2xhw7xzIHdhcyBhIHBsYWNlIHdoZXJlIGxvdmVycyBhbmQgYmVsb3ZlZCBwbGlnaHRlZCBtdXR1YWwgZmFpdGguICAgSXQgd2FzIG5hdHVyYWwsIHRoZW4sIHRoYXQgdGhlIGJhbmQgc2hvdWxkIGFsc28gYmUgY2FsbGVkIHNhY3JlZCwgYmVjYXVzZSBldmVuIFBsYXRvIGNhbGxzIHRoZSBsb3ZlciBhIGZyaWVuZCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNzYxZCI+Q2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA3NjEgZC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA3NjEgZC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmluc3BpcmVkIG9mIEdvZC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFN5bS4gMTc5YSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN5bXBvc2l1bTwvdGl0bGU+LCBwLiAxNzkgYS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gIAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBTeW0uIDE3OWEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TeW1wb3NpdW08L3RpdGxlPiwgcC4gMTc5IGEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TeW1wb3NpdW08L3RpdGxlPiwgcC4gMTc5IGEuPC90cmFuc2xhdGlvbj4="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IHRoZSBiYW5kIHdhcyBuZXZlciBiZWF0ZW4sIHVudGlsIHRoZSBiYXR0bGUgb2YgQ2hhZXJvbmVpYTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjMzOCBCLkMuPC9ub3RlPiBhbmQgd2hlbiwgYWZ0ZXIgdGhlIGJhdHRsZSwgUGhpbGlwIHdhcyBzdXJ2ZXlpbmcgdGhlIGRlYWQsIGFuZCBzdG9wcGVkIGF0IHRoZSBwbGFjZSB3aGVyZSB0aGUgdGhyZWUgaHVuZHJlZCB3ZXJlIGx5aW5nLCBhbGwgd2hlcmUgdGhleSBoYWQgZmFjZWQgdGhlIGxvbmcgc3BlYXJzIG9mIGhpcyBwaGFsYW54LCB3aXRoIHRoZWlyIGFybW91ciwgYW5kIG1pbmdsZWQgb25lIHdpdGggYW5vdGhlciwgaGUgd2FzIGFtYXplZCwgYW5kIG9uIGxlYXJuaW5nIHRoYXQgdGhpcyB3YXMgdGhlIGJhbmQgb2YgbG92ZXJzIGFuZCBiZWxvdmVkLCBidXJzdCBpbnRvIHRlYXJzIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UGVyaXNoIG1pc2VyYWJseSB0aGV5IHdobyB0aGluayB0aGF0IHRoZXNlIG1lbiBkaWQgb3Igc3VmZmVyZWQgYXVnaHQgZGlzZ3JhY2VmdWwuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlTcGVha2luZyBnZW5lcmFsbHksIGhvd2V2ZXIsIGl0IHdhcyBub3QgdGhlIHBhc3Npb24gb2YgTGFpdXMgdGhhdCwgYXMgdGhlIHBvZXRzIHNheSwgZmlyc3QgbWFkZSB0aGlzIGZvcm0gb2YgbG92ZSBjdXN0b21hcnkgYW1vbmcgdGhlIFRoZWJhbnM7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TGFpdXMgd2FzIGVuYW1vdXJlZCBvZiBDaHJ5c2lwcHVzLCBhIHlvdW5nIHNvbiBvZiBQZWxvcHMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcG9sbG9kLiAzLjUuNSIgdmFsaWQ9InllcyI+QXBvbGxvZG9ydXMsIGlpaS4gNSwgNSwgMTA8L2JpYmw+KS48L25vdGU+IGJ1dCB0aGVpciBsYXctZ2l2ZXJzLCB3aXNoaW5nIHRvIHJlbGF4IGFuZCBtb2xsaWZ5IHRoZWlyIHN0cm9uZyBhbmQgaW1wZXR1b3VzIG5hdHVyZXMgaW4gZWFybGllc3QgYm95aG9vZCwgZ2F2ZSB0aGUgZmx1dGUgZ3JlYXQgcHJvbWluZW5jZSBib3RoIGluIHRoZWlyIHdvcmsgYW5kIGluIHRoZWlyIHBsYXksIGJyaW5naW5nIHRoaXMgaW5zdHJ1bWVudCBpbnRvIHByZWVtaW5lbmNlIGFuZCBob25vdXIsIGFuZCByZWFyZWQgdGhlbSAgdG8gZ2l2ZSBsb3ZlIGEgY29uc3BpY3VvdXMgcGxhY2UgaW4gdGhlIGxpZmUgb2YgdGhlIHBhbGFlc3RyYSwgdGh1cyB0ZW1wZXJpbmcgdGhlIGRpc3Bvc2l0aW9ucyBvZiB0aGUgeW91bmcgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2l0aCB0aGlzIGluIHZpZXcsIHRoZXkgZGlkIHdlbGwgdG8gZ2l2ZSB0aGUgZ29kZGVzcyB3aG8gd2FzIHNhaWQgdG8gaGF2ZSBiZWVuIGJvcm4gb2YgQXJlcyBhbmQgQXBocm9kaXRlIGEgaG9tZSBpbiB0aGVpciBjaXR5OyBmb3IgdGhleSBmZWx0IHRoYXQsIHdoZXJlIHRoZSBmb3JjZSBhbmQgY291cmFnZSBvZiB0aGUgd2FycmlvciBhcmUgbW9zdCBjbG9zZWx5IGFzc29jaWF0ZWQgYW5kIHVuaXRlZCB3aXRoIHRoZSBhZ2Ugd2hpY2ggcG9zc2Vzc2VzIGdyYWNlIGFuZCBwZXJzdWFzaXZlbmVzcywgdGhlcmUgYWxsIHRoZSBhY3Rpdml0aWVzIG9mIGNpdmlsIGxpZmUgYXJlIGJyb3VnaHQgYnkgSGFybW9ueSBpbnRvIHRoZSBtb3N0IHBlcmZlY3QgY29uc29uYW5jZSBhbmQgb3JkZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlTcGVha2luZyBnZW5lcmFsbHksIGhvd2V2ZXIsIGl0IHdhcyBub3QgdGhlIHBhc3Npb24gb2YgTGFpdXMgdGhhdCwgYXMgdGhlIHBvZXRzIHNheSwgZmlyc3QgbWFkZSB0aGlzIGZvcm0gb2YgbG92ZSBjdXN0b21hcnkgYW1vbmcgdGhlIFRoZWJhbnM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5MYWl1cyB3YXMgZW5hbW91cmVkIG9mIENocnlzaXBwdXMsIGEgeW91bmcgc29uIG9mIFBlbG9wcyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBvbGxvZC4gMy41LjUiIHZhbGlkPSJ5ZXMiPkFwb2xsb2RvcnVzLCBpaWkuIDUsIDUsIDEwPC9iaWJsPikuPC9ub3RlPiBidXQgdGhlaXIgbGF3LWdpdmVycywgd2lzaGluZyB0byByZWxheCBhbmQgbW9sbGlmeSB0aGVpciBzdHJvbmcgYW5kIGltcGV0dW91cyBuYXR1cmVzIGluIGVhcmxpZXN0IGJveWhvb2QsIGdhdmUgdGhlIGZsdXRlIGdyZWF0IHByb21pbmVuY2UgYm90aCBpbiB0aGVpciB3b3JrIGFuZCBpbiB0aGVpciBwbGF5LCBicmluZ2luZyB0aGlzIGluc3RydW1lbnQgaW50byBwcmVlbWluZW5jZSBhbmQgaG9ub3VyLCBhbmQgcmVhcmVkIHRoZW0gIHRvIGdpdmUgbG92ZSBhIGNvbnNwaWN1b3VzIHBsYWNlIGluIHRoZSBsaWZlIG9mIHRoZSBwYWxhZXN0cmEsIHRodXMgdGVtcGVyaW5nIHRoZSBkaXNwb3NpdGlvbnMgb2YgdGhlIHlvdW5nIG1lbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcG9sbG9kLiAzLjUuNSIgdmFsaWQ9InllcyI+QXBvbGxvZG9ydXMsIGlpaS4gNSwgNSwgMTA8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aXRoIHRoaXMgaW4gdmlldywgdGhleSBkaWQgd2VsbCB0byBnaXZlIHRoZSBnb2RkZXNzIHdobyB3YXMgc2FpZCB0byBoYXZlIGJlZW4gYm9ybiBvZiBBcmVzIGFuZCBBcGhyb2RpdGUgYSBob21lIGluIHRoZWlyIGNpdHk7IGZvciB0aGV5IGZlbHQgdGhhdCwgd2hlcmUgdGhlIGZvcmNlIGFuZCBjb3VyYWdlIG9mIHRoZSB3YXJyaW9yIGFyZSBtb3N0IGNsb3NlbHkgYXNzb2NpYXRlZCBhbmQgdW5pdGVkIHdpdGggdGhlIGFnZSB3aGljaCBwb3NzZXNzZXMgZ3JhY2UgYW5kIHBlcnN1YXNpdmVuZXNzLCB0aGVyZSBhbGwgdGhlIGFjdGl2aXRpZXMgb2YgY2l2aWwgbGlmZSBhcmUgYnJvdWdodCBieSBIYXJtb255IGludG8gdGhlIG1vc3QgcGVyZmVjdCBjb25zb25hbmNlIGFuZCBvcmRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+R29yZ2lkYXMsIHRoZW4sIGJ5IGRpc3RyaWJ1dGluZyB0aGlzIHNhY3JlZCBiYW5kIGFtb25nIHRoZSBmcm9udCByYW5rcyBvZiB0aGUgd2hvbGUgcGhhbGFueCBvZiBtZW4tYXQtYXJtcywgbWFkZSB0aGUgaGlnaCBleGNlbGxlbmNlIG9mIHRoZSBtZW4gaW5jb25zcGljdW91cywgYW5kIGRpZCBub3QgZGlyZWN0IHRoZWlyIHN0cmVuZ3RoIHVwb24gYSBjb21tb24gb2JqZWN0LCBzaW5jZSBpdCB3YXMgZGlzc2lwYXRlZCBhbmQgYmxlbmRlZCB3aXRoIHRoYXQgb2YgYSBsYXJnZSBib2R5IG9mIGluZmVyaW9yIHRyb29wczsgYnV0IFBlbG9waWRhcywgYWZ0ZXIgdGhlaXIgdmFsb3VyIGhhZCBzaG9uZSBvdXQgYXQgVGVneXJhLCB3aGVyZSB0aGV5IGZvdWdodCBieSB0aGVtc2VsdmVzIGFuZCBhYm91dCBoaXMgb3duIHBlcnNvbiwgbmV2ZXIgYWZ0ZXJ3YXJkcyBkaXZpZGVkIG9yIHNjYXR0ZXJlZCB0aGVtLCBidXQsIHRyZWF0aW5nIHRoZW0gYXMgYSB1bml0LCBwdXQgdGhlbSBpbnRvIHRoZSBmb3JlZnJvbnQgb2YgdGhlIGdyZWF0ZXN0IGNvbmZsaWN0cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGp1c3QgYXMgaG9yc2VzIHJ1biBmYXN0ZXIgd2hlbiB5b2tlZCB0byBhIGNoYXJpb3QgdGhhbiB3aGVuIG1lbiByaWRlIHRoZW0gc2luZ2x5LCBub3QgYmVjYXVzZSB0aGV5IGNsZWF2ZSB0aGUgYWlyIHdpdGggbW9yZSBpbXBldHVzIG93aW5nIHRvIHRoZWlyIHVuaXRlZCB3ZWlnaHQsIGJ1dCBiZWNhdXNlIHRoZWlyIG11dHVhbCByaXZhbHJ5IGFuZCBhbWJpdGlvbiBpbmZsYW1lIHRoZWlyIHNwaXJpdHM7IHNvIGhlIHRob3VnaHQgdGhhdCBicmF2ZSBtZW4gd2VyZSBtb3N0IGFyZGVudCBhbmQgc2VydmljZWFibGUgaW4gYSBjb21tb24gY2F1c2Ugd2hlbiB0aGV5IGluc3BpcmVkIG9uZSBhbm90aGVyIHdpdGggYSB6ZWFsIGZvciBoaWdoIGFjaGlldmVtZW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkdvcmdpZGFzLCB0aGVuLCBieSBkaXN0cmlidXRpbmcgdGhpcyBzYWNyZWQgYmFuZCBhbW9uZyB0aGUgZnJvbnQgcmFua3Mgb2YgdGhlIHdob2xlIHBoYWxhbnggb2YgbWVuLWF0LWFybXMsIG1hZGUgdGhlIGhpZ2ggZXhjZWxsZW5jZSBvZiB0aGUgbWVuIGluY29uc3BpY3VvdXMsIGFuZCBkaWQgbm90IGRpcmVjdCB0aGVpciBzdHJlbmd0aCB1cG9uIGEgY29tbW9uIG9iamVjdCwgc2luY2UgaXQgd2FzIGRpc3NpcGF0ZWQgYW5kIGJsZW5kZWQgd2l0aCB0aGF0IG9mIGEgbGFyZ2UgYm9keSBvZiBpbmZlcmlvciB0cm9vcHM7IGJ1dCBQZWxvcGlkYXMsIGFmdGVyIHRoZWlyIHZhbG91ciBoYWQgc2hvbmUgb3V0IGF0IFRlZ3lyYSwgd2hlcmUgdGhleSBmb3VnaHQgYnkgdGhlbXNlbHZlcyBhbmQgYWJvdXQgaGlzIG93biBwZXJzb24sIG5ldmVyIGFmdGVyd2FyZHMgZGl2aWRlZCBvciBzY2F0dGVyZWQgdGhlbSwgYnV0LCB0cmVhdGluZyB0aGVtIGFzIGEgdW5pdCwgcHV0IHRoZW0gaW50byB0aGUgZm9yZWZyb250IG9mIHRoZSBncmVhdGVzdCBjb25mbGljdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIGhvcnNlcyBydW4gZmFzdGVyIHdoZW4geW9rZWQgdG8gYSBjaGFyaW90IHRoYW4gd2hlbiBtZW4gcmlkZSB0aGVtIHNpbmdseSwgbm90IGJlY2F1c2UgdGhleSBjbGVhdmUgdGhlIGFpciB3aXRoIG1vcmUgaW1wZXR1cyBvd2luZyB0byB0aGVpciB1bml0ZWQgd2VpZ2h0LCBidXQgYmVjYXVzZSB0aGVpciBtdXR1YWwgcml2YWxyeSBhbmQgYW1iaXRpb24gaW5mbGFtZSB0aGVpciBzcGlyaXRzOyBzbyBoZSB0aG91Z2h0IHRoYXQgYnJhdmUgbWVuIHdlcmUgbW9zdCBhcmRlbnQgYW5kIHNlcnZpY2VhYmxlIGluIGEgY29tbW9uIGNhdXNlIHdoZW4gdGhleSBpbnNwaXJlZCBvbmUgYW5vdGhlciB3aXRoIGEgemVhbCBmb3IgaGlnaCBhY2hpZXZlbWVudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBwZWFjZSB3aXRoIGFsbCB0aGUgb3RoZXIgR3JlZWtzIGFuZCBkaXJlY3RlZCB0aGUgd2FyIGFnYWluc3QgdGhlIFRoZWJhbnMgYWxvbmU7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzcxIEIuQy48L25vdGU+IENsZW9tYnJvdHVzIHRoZWlyIGtpbmcgaW52YWRlZCBCb2VvdGlhIHdpdGggYSBmb3JjZSBvZiB0d28gdGhvdXNhbmQgbWVuLWF0LWFybXMgYW5kIGEgdGhvdXNhbmQgaG9yc2U7IGEgbmV3IHBlcmlsIGNvbmZyb250ZWQgdGhlIFRoZWJhbnMsIHNpbmNlIHRoZXkgd2VyZSBvcGVubHkgdGhyZWF0ZW5lZCB3aXRoIGRvd25yaWdodCBkaXNwZXJzaW9uOyBhbmQgYW4gdW5wcmVjZWRlbnRlZCBmZWFyIHJlaWduZWQgaW4gQm9lb3RpYS4gIEl0IHdhcyBhdCB0aGlzIHRpbWUgdGhhdCBQZWxvcGlkYXMsIG9uIGxlYXZpbmcgaGlzIGhvdXNlLCB3aGVuIGhpcyB3aWZlIGZvbGxvd2VkIGhpbSBvbiBoaXMgd2F5IGluIHRlYXJzIGFuZCBiZWdnaW5nIGhpbSBub3QgdG8gbG9zZSBoaXMgbGlmZSwgc2FpZDogCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgYWR2aWNlLCBteSB3aWZlLCBzaG91bGQgYmUgZ2l2ZW4gdG8gcHJpdmF0ZSBtZW47IGJ1dCBtZW4gaW4gYXV0aG9yaXR5IHNob3VsZCBiZSB0b2xkIG5vdCB0byBsb3NlIHRoZSBsaXZlcyBvZiBvdGhlcnMuPC9xPiAgQW5kIHdoZW4gaGUgcmVhY2hlZCB0aGUgY2FtcCBhbmQgZm91bmQgdGhhdCB0aGUgYm9lb3RhcmNocyB3ZXJlIG5vdCBpbiBhY2NvcmQgaGUgd2FzIGZpcnN0IHRvIHNpZGUgd2l0aCBFcGFtaW5vbmRhcyBpbiB2b3RpbmcgdG8gZ2l2ZSB0aGUgZW5lbXkgYmF0dGxlLiBOb3cgUGVsb3BpZGFzLCBhbHRob3VnaCBoZSBoYWQgbm90IGJlZW4gYXBwb2ludGVkIGJvZW90YXJjaCwgd2FzIGNhcHRhaW4gb2YgdGhlIHNhY3JlZCAgIGJhbmQsIGFuZCBoaWdobHkgdHJ1c3RlZCwgYXMgaXQgd2FzIHJpZ2h0IHRoYXQgYSBtYW4gc2hvdWxkIGJlIHdobyBoYWQgZ2l2ZW4gaGlzIGNvdW50cnkgc3VjaCAgICAgICB0b2tlbnMgICBvZiBoaXMgZGV2b3Rpb24gdG8gZnJlZWRvbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyB0aGUgTGFjZWRhZW1vbmlhbnMgbWFkZSBwZWFjZSB3aXRoIGFsbCB0aGUgb3RoZXIgR3JlZWtzIGFuZCBkaXJlY3RlZCB0aGUgd2FyIGFnYWluc3QgdGhlIFRoZWJhbnMgYWxvbmU7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzEgQi5DLjwvbm90ZT4gQ2xlb21icm90dXMgdGhlaXIga2luZyBpbnZhZGVkIEJvZW90aWEgd2l0aCBhIGZvcmNlIG9mIHR3byB0aG91c2FuZCBtZW4tYXQtYXJtcyBhbmQgYSB0aG91c2FuZCBob3JzZTsgYSBuZXcgcGVyaWwgY29uZnJvbnRlZCB0aGUgVGhlYmFucywgc2luY2UgdGhleSB3ZXJlIG9wZW5seSB0aHJlYXRlbmVkIHdpdGggZG93bnJpZ2h0IGRpc3BlcnNpb247IGFuZCBhbiB1bnByZWNlZGVudGVkIGZlYXIgcmVpZ25lZCBpbiBCb2VvdGlhLiAgSXQgd2FzIGF0IHRoaXMgdGltZSB0aGF0IFBlbG9waWRhcywgb24gbGVhdmluZyBoaXMgaG91c2UsIHdoZW4gaGlzIHdpZmUgZm9sbG93ZWQgaGltIG9uIGhpcyB3YXkgaW4gdGVhcnMgYW5kIGJlZ2dpbmcgaGltIG5vdCB0byBsb3NlIGhpcyBsaWZlLCBzYWlkOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgYWR2aWNlLCBteSB3aWZlLCBzaG91bGQgYmUgZ2l2ZW4gdG8gcHJpdmF0ZSBtZW47IGJ1dCBtZW4gaW4gYXV0aG9yaXR5IHNob3VsZCBiZSB0b2xkIG5vdCB0byBsb3NlIHRoZSBsaXZlcyBvZiBvdGhlcnMuPC9xPiAgQW5kIHdoZW4gaGUgcmVhY2hlZCB0aGUgY2FtcCBhbmQgZm91bmQgdGhhdCB0aGUgYm9lb3RhcmNocyB3ZXJlIG5vdCBpbiBhY2NvcmQgaGUgd2FzIGZpcnN0IHRvIHNpZGUgd2l0aCBFcGFtaW5vbmRhcyBpbiB2b3RpbmcgdG8gZ2l2ZSB0aGUgZW5lbXkgYmF0dGxlLiBOb3cgUGVsb3BpZGFzLCBhbHRob3VnaCBoZSBoYWQgbm90IGJlZW4gYXBwb2ludGVkIGJvZW90YXJjaCwgd2FzIGNhcHRhaW4gb2YgdGhlIHNhY3JlZCAgIGJhbmQsIGFuZCBoaWdobHkgdHJ1c3RlZCwgYXMgaXQgd2FzIHJpZ2h0IHRoYXQgYSBtYW4gc2hvdWxkIGJlIHdobyBoYWQgZ2l2ZW4gaGlzIGNvdW50cnkgc3VjaCAgICAgICB0b2tlbnMgICBvZiBoaXMgZGV2b3Rpb24gdG8gZnJlZWRvbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGl0IHdhcyBkZWNpZGVkIHRvIHJpc2sgYSBiYXR0bGUsIGFuZCBhdCBMZXVjdHJhIHRoZXkgZW5jYW1wZWQgb3ZlciBhZ2FpbnN0IHRoZSBMYWNlZGFlbW9uaWFucy4gICBIZXJlIFBlbG9waWRhcyBoYWQgYSBkcmVhbSB3aGljaCBncmVhdGx5IGRpc3R1cmJlZCBoaW0uIE5vdywgaW4gdGhlIHBsYWluIG9mIExldWN0cmEgYXJlIHRoZSB0b21icyBvZiB0aGUgZGF1Z2h0ZXJzIG9mIFNjZWRhc3VzLCB3aG8gYXJlIGNhbGxlZCBmcm9tIHRoZSBwbGFjZSBMZXVjdHJpZGFlLCBmb3IgdGhleSBoYWQgYmVlbiBidXJpZWQgdGhlcmUsIGFmdGVyICBoYXZpbmcgYmVlbiByYXZpc2hlZCBieSAgIFNwYXJ0YW4gc3RyYW5nZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBkYW1zZWxzLCBpbiAgc2hhbWUsIHRvb2sgdGhlaXIgb3duIGxpdmVzLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDkuMTMuMyIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpeC4gMTMsIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIGNvbW1pc3Npb24gb2Ygc3VjaCBhIGdyaWV2b3VzIGFuZCBsYXdsZXNzIGFjdCwgdGhlaXIgZmF0aGVyLCBzaW5jZSBoZSBjb3VsZCBnZXQgbm8ganVzdGljZSBhdCBTcGFydGEsIGhlYXBlZCBjdXJzZXMgdXBvbiB0aGUgU3BhcnRhbnMsIGFuZCAgdGhlbiBzbGV3IGhpbXNlbGYgICB1cG9uICAgdGhlIHRvbWJzIG9mIHRoZSBtYWlkZW5zOyBhbmQgZXZlciBhZnRlciwgcHJvcGhlY2llcyBhbmQgb3JhY2xlcyBrZXB0IHdhcm5pbmcgdGhlIFNwYXJ0YW5zIHRvIGJlIG9uIHdhdGNoZnVsIGd1YXJkIGFnYWluc3QgdGhlIExldWN0cmlhbiB3cmF0aC4gIE1vc3Qgb2YgdGhlbSwgaG93ZXZlciwgZGlkIG5vdCBmdWxseSB1bmRlcnN0YW5kIHRoZSBtYXR0ZXIsIGJ1dCB3ZXJlIGluIGRvdWJ0IGFib3V0IHRoZSBwbGFjZSwgc2luY2UgaW4gTGFjb25pYSB0aGVyZSBpcyBhIGxpdHRsZSB0b3duIG5lYXIgdGhlIHNlYSB3aGljaCBpcyBjYWxsZWQgTGV1Y3RyYSwgYW5kIG5lYXIgTWVnYWxvcG9saXMgaW4gQXJjYWRpYSB0aGVyZSBpcyBhIHBsYWNlIG9mIHRoZSBzYW1lIG5hbWUuICAgVGhpcyBjYWxhbWl0eSwgb2YgY291cnNlLCBvY2N1cnJlZCBsb25nIGJlZm9yZSB0aGUgYmF0dGxlIG9mIExldWN0cmEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBpdCB3YXMgZGVjaWRlZCB0byByaXNrIGEgYmF0dGxlLCBhbmQgYXQgTGV1Y3RyYSB0aGV5IGVuY2FtcGVkIG92ZXIgYWdhaW5zdCB0aGUgTGFjZWRhZW1vbmlhbnMuICAgSGVyZSBQZWxvcGlkYXMgaGFkIGEgZHJlYW0gd2hpY2ggZ3JlYXRseSBkaXN0dXJiZWQgaGltLiBOb3csIGluIHRoZSBwbGFpbiBvZiBMZXVjdHJhIGFyZSB0aGUgdG9tYnMgb2YgdGhlIGRhdWdodGVycyBvZiBTY2VkYXN1cywgd2hvIGFyZSBjYWxsZWQgZnJvbSB0aGUgcGxhY2UgTGV1Y3RyaWRhZSwgZm9yIHRoZXkgaGFkIGJlZW4gYnVyaWVkIHRoZXJlLCBhZnRlciAgaGF2aW5nIGJlZW4gcmF2aXNoZWQgYnkgICBTcGFydGFuIHN0cmFuZ2Vycy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBkYW1zZWxzLCBpbiAgc2hhbWUsIHRvb2sgdGhlaXIgb3duIGxpdmVzLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOS4xMy4zIiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMsIGl4LiAxMywgMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDkuMTMuMyIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCBpeC4gMTMsIDMuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBjb21taXNzaW9uIG9mIHN1Y2ggYSBncmlldm91cyBhbmQgbGF3bGVzcyBhY3QsIHRoZWlyIGZhdGhlciwgc2luY2UgaGUgY291bGQgZ2V0IG5vIGp1c3RpY2UgYXQgU3BhcnRhLCBoZWFwZWQgY3Vyc2VzIHVwb24gdGhlIFNwYXJ0YW5zLCBhbmQgIHRoZW4gc2xldyBoaW1zZWxmICAgdXBvbiAgIHRoZSB0b21icyBvZiB0aGUgbWFpZGVuczsgYW5kIGV2ZXIgYWZ0ZXIsIHByb3BoZWNpZXMgYW5kIG9yYWNsZXMga2VwdCB3YXJuaW5nIHRoZSBTcGFydGFucyB0byBiZSBvbiB3YXRjaGZ1bCBndWFyZCBhZ2FpbnN0IHRoZSBMZXVjdHJpYW4gd3JhdGguICBNb3N0IG9mIHRoZW0sIGhvd2V2ZXIsIGRpZCBub3QgZnVsbHkgdW5kZXJzdGFuZCB0aGUgbWF0dGVyLCBidXQgd2VyZSBpbiBkb3VidCBhYm91dCB0aGUgcGxhY2UsIHNpbmNlIGluIExhY29uaWEgdGhlcmUgaXMgYSBsaXR0bGUgdG93biBuZWFyIHRoZSBzZWEgd2hpY2ggaXMgY2FsbGVkIExldWN0cmEsIGFuZCBuZWFyIE1lZ2Fsb3BvbGlzIGluIEFyY2FkaWEgdGhlcmUgaXMgYSBwbGFjZSBvZiB0aGUgc2FtZSBuYW1lLiAgIFRoaXMgY2FsYW1pdHksIG9mIGNvdXJzZSwgb2NjdXJyZWQgbG9uZyBiZWZvcmUgdGhlIGJhdHRsZSBvZiBMZXVjdHJhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBQZWxvcGlkYXMgaGFkIGxhaW4gZG93biB0byBzbGVlcCBpbiB0aGUgY2FtcCwgaGUgdGhvdWdodCBoZSBzYXcgdGhlc2UgbWFpZGVucyB3ZWVwaW5nIGF0IHRoZWlyIHRvbWJzLCBhcyB0aGV5IGludm9rZWQgY3Vyc2VzIHVwb24gdGhlIFNwYXJ0YW5zLCBhbmQgU2NlZGFzdXMgYmlkZGluZyBoaW0gc2FjcmlmaWNlIHRvIGhpcyBkYXVnaHRlcnMgYSB2aXJnaW4gd2l0aCBhdWJ1cm4gaGFpciwgaWYgaGUgd2lzaGVkIHRvIHdpbiB0aGUgdmljdG9yeSBvdmVyIGhpcyBlbmVtaWVzLiAgVGhlIGluanVuY3Rpb24gc2VlbWVkIGEgbGF3bGVzcyBhbmQgZHJlYWRmdWwgb25lIHRvIGhpbSwgYnV0IGhlIHJvc2UgdXAgYW5kIG1hZGUgaXQga25vd24gdG8gdGhlIHNlZXJzIGFuZCB0aGUgY29tbWFuZGVycy4gICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIG9mIHRoZXNlIHdvdWxkIG5vdCBoZWFyIG9mIHRoZSBpbmp1bmN0aW9uIGJlaW5nIG5lZ2xlY3RlZCBvciBkaXNvYmV5ZWQsIGFkZHVjaW5nIGFzIGV4YW1wbGVzICAgb2Ygc3VjaCAgc2FjcmlmaWNlIGFtb25nICB0aGUgYW5jaWVudHMsIE1lbm9lY2V1cywgc29uIG9mIENyZW9uLCBNYWNhcmlhLCBkYXVnaHRlciAgIG9mIEhlcmFjbGVzOyBhbmQsIGluIGxhdGVyIHRpbWVzLCBQaGVyZWN5ZGVzIHRoZSB3aXNlIG1hbiwgd2hvIHdhcyBwdXQgdG8gZGVhdGggYnkgdGhlIExhY2VkYWVtb25pYW5zLCBhbmQgd2hvc2Ugc2tpbiB3YXMgcHJlc2VydmVkIGJ5IHRoZWlyIGtpbmdzLCBpbiBhY2NvcmRhbmNlIHdpdGggc29tZSBvcmFjbGU7IGFuZCBMZW9uaWRhcywgd2hvLCBpbiBvYmVkaWVuY2UgdG8gdGhlIG9yYWNsZSwgc2FjcmlmaWNlZCBoaW1zZWxmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IFRoZXJtb3B5bGFlLiAgQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMjIwIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMjIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhcyBpdCB3ZXJlLCB0byBzYXZlIEdyZWVjZTsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kLCBzdGlsbCBmdXJ0aGVyLCB0aGUgeW91dGhzIHdobyB3ZXJlIHNhY3JpZmljZWQgYnkgVGhlbWlzdG9jbGVzIHRvIERpb255c3VzIENhcm5pdm9yb3VzIGJlZm9yZSB0aGUgc2VhIGZpZ2h0IGF0IFNhbGFtaXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiA4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+VGhlbWlzdG9jbGVzPC90aXRsZT4sIHhpaWkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZm9yIHRoZSBzdWNjZXNzZXMgd2hpY2ggZm9sbG93ZWQgdGhlc2Ugc2FjcmlmaWNlcyBwcm92ZWQgdGhlbSBhY2NlcHRhYmxlIHRvIHRoZSBnb2RzLiAgTW9yZW92ZXIsIHdoZW4gQWdlc2lsYcO8cywgd2hvIHdhcyBzZXR0aW5nIG91dCBvbiBhbiBleHBlZGl0aW9uIGZyb20gdGhlIHNhbWUgcGxhY2UgYXMgQWdhbWVtbm9uIGRpZCwgYW5kIGFnYWluc3QgdGhlIHNhbWUgZW5lbWllcywgd2FzIGFza2VkIGJ5IHRoZSBnb2RkZXNzIGZvciBoaXMgZGF1Z2h0ZXIgaW4gc2FjcmlmaWNlLCBhbmQgaGFkIHRoaXMgdmlzaW9uIGFzIGhlIGxheSBhc2xlZXAgYXQgQXVsaXMsIGhlIHdhcyB0b28gdGVuZGVyLWhlYXJ0ZWQgdG8gZ2l2ZSBoZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gNi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFnZXNpbGHDvHM8L3RpdGxlPiwgdmkuIDQgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCB0aGVyZWJ5IGJyb3VnaHQgaGlzIGV4cGVkaXRpb24gdG8gYW4gdW5zdWNjZXNzZnVsIGFuZCBpbmdsb3Jpb3VzIGVuZGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T3RoZXJzLCBvbiB0aGUgY29udHJhcnksIGFyZ3VlZCBhZ2FpbnN0IGl0LCBkZWNsYXJpbmcgdGhhdCBzdWNoIGEgbGF3bGVzcyBhbmQgYmFyYmFyb3VzIHNhY3JpZmljZSB3YXMgbm90IGFjY2VwdGFibGUgdG8gYW55IG9uZSBvZiB0aGUgc3VwZXJpb3IgYmVpbmdzIGFib3ZlIHVzLCBmb3IgaXQgd2FzIG5vdCB0aGUgZmFibGVkIHR5cGhvbnMgYW5kIGdpYW50cyB3aG8gZ292ZXJuZWQgdGhlIHdvcmxkLCBidXQgdGhlIGZhdGhlciBvZiBhbGwgZ29kcyBhbmQgbWVuOyBldmVuIHRvIGJlbGlldmUgaW4gdGhlIGV4aXN0ZW5jZSBvZiBkaXZpbmUgYmVpbmdzIHdobyB0YWtlIGRlbGlnaHQgaW4gdGhlIHNsYXVnaHRlciBhbmQgYmxvb2Qgb2YgbWVuIHdhcyBwZXJoYXBzIGEgZm9sbHksIGJ1dCBpZiBzdWNoIGJlaW5ncyBleGlzdGVkLCB0aGV5IG11c3QgYmUgZGlzcmVnYXJkZWQsIGFzIGhhdmluZyBubyBwb3dlcjsgZm9yIG9ubHkgd2Vha25lc3MgYW5kIGRlcHJhdml0eSBvZiBzb3VsIGNvdWxkIHByb2R1Y2Ugb3IgaGFyYm91ciBzdWNoIHVubmF0dXJhbCBhbmQgY3J1ZWwgZGVzaXJlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgUGVsb3BpZGFzIGhhZCBsYWluIGRvd24gdG8gc2xlZXAgaW4gdGhlIGNhbXAsIGhlIHRob3VnaHQgaGUgc2F3IHRoZXNlIG1haWRlbnMgd2VlcGluZyBhdCB0aGVpciB0b21icywgYXMgdGhleSBpbnZva2VkIGN1cnNlcyB1cG9uIHRoZSBTcGFydGFucywgYW5kIFNjZWRhc3VzIGJpZGRpbmcgaGltIHNhY3JpZmljZSB0byBoaXMgZGF1Z2h0ZXJzIGEgdmlyZ2luIHdpdGggYXVidXJuIGhhaXIsIGlmIGhlIHdpc2hlZCB0byB3aW4gdGhlIHZpY3Rvcnkgb3ZlciBoaXMgZW5lbWllcy4gIFRoZSBpbmp1bmN0aW9uIHNlZW1lZCBhIGxhd2xlc3MgYW5kIGRyZWFkZnVsIG9uZSB0byBoaW0sIGJ1dCBoZSByb3NlIHVwIGFuZCBtYWRlIGl0IGtub3duIHRvIHRoZSBzZWVycyBhbmQgdGhlIGNvbW1hbmRlcnMuICAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgdGhlc2Ugd291bGQgbm90IGhlYXIgb2YgdGhlIGluanVuY3Rpb24gYmVpbmcgbmVnbGVjdGVkIG9yIGRpc29iZXllZCwgYWRkdWNpbmcgYXMgZXhhbXBsZXMgICBvZiBzdWNoICBzYWNyaWZpY2UgYW1vbmcgIHRoZSBhbmNpZW50cywgTWVub2VjZXVzLCBzb24gb2YgQ3Jlb24sIE1hY2FyaWEsIGRhdWdodGVyICAgb2YgSGVyYWNsZXM7IGFuZCwgaW4gbGF0ZXIgdGltZXMsIFBoZXJlY3lkZXMgdGhlIHdpc2UgbWFuLCB3aG8gd2FzIHB1dCB0byBkZWF0aCBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIGFuZCB3aG9zZSBza2luIHdhcyBwcmVzZXJ2ZWQgYnkgdGhlaXIga2luZ3MsIGluIGFjY29yZGFuY2Ugd2l0aCBzb21lIG9yYWNsZTsgYW5kIExlb25pZGFzLCB3aG8sIGluIG9iZWRpZW5jZSB0byB0aGUgb3JhY2xlLCBzYWNyaWZpY2VkIGhpbXNlbGYsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBUaGVybW9weWxhZS4gIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMjIwIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMjIwLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhcyBpdCB3ZXJlLCB0byBzYXZlIEdyZWVjZTsgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuMjIwIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gMjIwLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgc3RpbGwgZnVydGhlciwgdGhlIHlvdXRocyB3aG8gd2VyZSBzYWNyaWZpY2VkIGJ5IFRoZW1pc3RvY2xlcyB0byBEaW9ueXN1cyBDYXJuaXZvcm91cyBiZWZvcmUgdGhlIHNlYSBmaWdodCBhdCBTYWxhbWlzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvciB0aGUgc3VjY2Vzc2VzIHdoaWNoIGZvbGxvd2VkIHRoZXNlIHNhY3JpZmljZXMgcHJvdmVkIHRoZW0gYWNjZXB0YWJsZSB0byB0aGUgZ29kcy4gIE1vcmVvdmVyLCB3aGVuIEFnZXNpbGHDvHMsIHdobyB3YXMgc2V0dGluZyBvdXQgb24gYW4gZXhwZWRpdGlvbiBmcm9tIHRoZSBzYW1lIHBsYWNlIGFzIEFnYW1lbW5vbiBkaWQsIGFuZCBhZ2FpbnN0IHRoZSBzYW1lIGVuZW1pZXMsIHdhcyBhc2tlZCBieSB0aGUgZ29kZGVzcyBmb3IgaGlzIGRhdWdodGVyIGluIHNhY3JpZmljZSwgYW5kIGhhZCB0aGlzIHZpc2lvbiBhcyBoZSBsYXkgYXNsZWVwIGF0IEF1bGlzLCBoZSB3YXMgdG9vIHRlbmRlci1oZWFydGVkIHRvIGdpdmUgaGVyLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZW0uIDguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRoZW1pc3RvY2xlczwvdGl0bGU+LCB4aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVtaXN0b2NsZXM8L3RpdGxlPiwgeGlpaS4gMiBmLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZ2VzLiA2LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2VzaWxhw7xzPC90aXRsZT4sIHZpLiA0IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgdGhlcmVieSBicm91Z2h0IGhpcyBleHBlZGl0aW9uIHRvIGFuIHVuc3VjY2Vzc2Z1bCBhbmQgaW5nbG9yaW91cyBlbmRpbmcuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWdlcy4gNi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdlc2lsYcO8czwvdGl0bGU+LCB2aS4gNCBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnZXNpbGHDvHM8L3RpdGxlPiwgdmkuIDQgZmYuPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgb24gdGhlIGNvbnRyYXJ5LCBhcmd1ZWQgYWdhaW5zdCBpdCwgZGVjbGFyaW5nIHRoYXQgc3VjaCBhIGxhd2xlc3MgYW5kIGJhcmJhcm91cyBzYWNyaWZpY2Ugd2FzIG5vdCBhY2NlcHRhYmxlIHRvIGFueSBvbmUgb2YgdGhlIHN1cGVyaW9yIGJlaW5ncyBhYm92ZSB1cywgZm9yIGl0IHdhcyBub3QgdGhlIGZhYmxlZCB0eXBob25zIGFuZCBnaWFudHMgd2hvIGdvdmVybmVkIHRoZSB3b3JsZCwgYnV0IHRoZSBmYXRoZXIgb2YgYWxsIGdvZHMgYW5kIG1lbjsgZXZlbiB0byBiZWxpZXZlIGluIHRoZSBleGlzdGVuY2Ugb2YgZGl2aW5lIGJlaW5ncyB3aG8gdGFrZSBkZWxpZ2h0IGluIHRoZSBzbGF1Z2h0ZXIgYW5kIGJsb29kIG9mIG1lbiB3YXMgcGVyaGFwcyBhIGZvbGx5LCBidXQgaWYgc3VjaCBiZWluZ3MgZXhpc3RlZCwgdGhleSBtdXN0IGJlIGRpc3JlZ2FyZGVkLCBhcyBoYXZpbmcgbm8gcG93ZXI7IGZvciBvbmx5IHdlYWtuZXNzIGFuZCBkZXByYXZpdHkgb2Ygc291bCBjb3VsZCBwcm9kdWNlIG9yIGhhcmJvdXIgc3VjaCB1bm5hdHVyYWwgYW5kIGNydWVsIGRlc2lyZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlLCB0aGVuLCB0aGUgIGNoaWVmIG1lbiB3ZXJlIHRodXMgZGlzcHV0aW5nLCBhbmQgd2hpbGUgUGVsb3BpZGFzIGluIHBhcnRpY3VsYXIgd2FzIGluIHBlcnBsZXhpdHksIGEgZmlsbHkgYnJva2UgYXdheSBmcm9tIHRoZSBoZXJkIG9mIGhvcnNlcyBhbmQgc3BlZCB0aHJvdWdoIHRoZSBjYW1wLCBhbmQgd2hlbiBzaGUgY2FtZSB0byB0aGUgdmVyeSBwbGFjZSBvZiB0aGVpciBjb25mZXJlbmNlLCBzdG9vZCBzdGlsbC4gICBUaGUgcmVzdCBvbmx5IGFkbWlyZWQgdGhlIGNvbG91ciBvZiBoZXIgZ2xvc3N5IG1hbmUsIHdoaWNoIHdhcyAgZmllcnkgcmVkLCBoZXIgaGlnaCBtZXR0bGUsIGFuZCB0aGUgdmVoZW1lbmNlICBhbmQgIGJvbGRuZXNzIG9mIGhlciBuZWlnaGluZzsgYnV0IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW9jcml0dXMgdGhlIHNlZXIsIGFmdGVyIHRha2luZyB0aG91Z2h0LCBjcmllZCBvdXQgdG8gUGVsb3BpZGFzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoeSBzYWNyaWZpY2lhbCB2aWN0aW0gaXMgY29tZSwgZ29vZCBtYW47IHNvIGxldCB1cyBub3Qgd2FpdCBmb3IgYW55IG90aGVyIHZpcmdpbiwgYnV0IGRvIHRob3UgYWNjZXB0IGFuZCB1c2UgdGhlIG9uZSB3aGljaCBIZWF2ZW4gb2ZmZXJzIHRoZWUuPC9xPiAgU28gdGhleSB0b29rIHRoZSBtYXJlIGFuZCBsZWQgaGVyIHRvIHRoZSB0b21icyBvZiB0aGUgbWFpZGVucywgdXBvbiB3aGljaCwgYWZ0ZXIgZGVja2luZyBoZXIgd2l0aCBnYXJsYW5kcyBhbmQgY29uc2VjcmF0aW5nIGhlciB3aXRoIHByYXllcnMgdGhleSBzYWNyaWZpY2VkIGhlciwgcmVqb2ljaW5nIHRoZW1zZWx2ZXMsIGFuZCBwdWJsaXNoaW5nIHRocm91Z2ggdGhlIGNhbXAgYW4gYWNjb3VudCBvZiB0aGUgdmlzaW9uIG9mIFBlbG9waWRhcyBhbmQgb2YgdGhlIHNhY3JpZmljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUsIHRoZW4sIHRoZSAgY2hpZWYgbWVuIHdlcmUgdGh1cyBkaXNwdXRpbmcsIGFuZCB3aGlsZSBQZWxvcGlkYXMgaW4gcGFydGljdWxhciB3YXMgaW4gcGVycGxleGl0eSwgYSBmaWxseSBicm9rZSBhd2F5IGZyb20gdGhlIGhlcmQgb2YgaG9yc2VzIGFuZCBzcGVkIHRocm91Z2ggdGhlIGNhbXAsIGFuZCB3aGVuIHNoZSBjYW1lIHRvIHRoZSB2ZXJ5IHBsYWNlIG9mIHRoZWlyIGNvbmZlcmVuY2UsIHN0b29kIHN0aWxsLiAgIFRoZSByZXN0IG9ubHkgYWRtaXJlZCB0aGUgY29sb3VyIG9mIGhlciBnbG9zc3kgbWFuZSwgd2hpY2ggd2FzICBmaWVyeSByZWQsIGhlciBoaWdoIG1ldHRsZSwgYW5kIHRoZSB2ZWhlbWVuY2UgIGFuZCAgYm9sZG5lc3Mgb2YgaGVyIG5laWdoaW5nOyBidXQgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW9jcml0dXMgdGhlIHNlZXIsIGFmdGVyIHRha2luZyB0aG91Z2h0LCBjcmllZCBvdXQgdG8gUGVsb3BpZGFzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh5IHNhY3JpZmljaWFsIHZpY3RpbSBpcyBjb21lLCBnb29kIG1hbjsgc28gbGV0IHVzIG5vdCB3YWl0IGZvciBhbnkgb3RoZXIgdmlyZ2luLCBidXQgZG8gdGhvdSBhY2NlcHQgYW5kIHVzZSB0aGUgb25lIHdoaWNoIEhlYXZlbiBvZmZlcnMgdGhlZS48L3E+ICBTbyB0aGV5IHRvb2sgdGhlIG1hcmUgYW5kIGxlZCBoZXIgdG8gdGhlIHRvbWJzIG9mIHRoZSBtYWlkZW5zLCB1cG9uIHdoaWNoLCBhZnRlciBkZWNraW5nIGhlciB3aXRoIGdhcmxhbmRzIGFuZCBjb25zZWNyYXRpbmcgaGVyIHdpdGggcHJheWVycyB0aGV5IHNhY3JpZmljZWQgaGVyLCByZWpvaWNpbmcgdGhlbXNlbHZlcywgYW5kIHB1Ymxpc2hpbmcgdGhyb3VnaCB0aGUgY2FtcCBhbiBhY2NvdW50IG9mIHRoZSB2aXNpb24gb2YgUGVsb3BpZGFzIGFuZCBvZiB0aGUgc2FjcmlmaWNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgYmF0dGxlLCB3aGlsZSAgIEVwYW1pbm9uZGFzIHdhcyBkcmF3aW5nIGhpcyBwaGFsYW54IG9ibGlxdWVseSB0b3dhcmRzIHRoZSBsZWZ0LCBpbiBvcmRlciB0aGF0IHRoZSByaWdodCB3aW5nIG9mIHRoZSBTcGFydGFucyBtaWdodCBiZSBzZXBhcmF0ZWQgYXMgZmFyIGFzIHBvc3NpYmxlIGZyb20gdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcywgYW5kIHRoYXQgaGUgbWlnaHQgdGhydXN0IGJhY2sgQ2xlb21icm90dXMgYnkgYSBmaWVyY2UgY2hhcmdlIGluIGNvbHVtbiB3aXRoIGFsbCBoaXMgbWVuLWF0LWFybXMsIHRoZSBlbmVteSB1bmRlcnN0b29kIHdoYXQgaGUgd2FzIGRvaW5nIGFuZCBiZWdhbiB0byBjaGFuZ2UgdGhlaXIgZm9ybWF0aW9uOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz50aGV5IHdlcmUgb3BlbmluZyB1cCB0aGVpciByaWdodCB3aW5nIGFuZCBtYWtpbmcgYW4gZW5jaXJjbGluZyBtb3ZlbWVudCwgaW4gb3JkZXIgdG8gc3Vycm91bmQgRXBhbWlub25kYXMgYW5kIGVudmVsb3AgaGltIHdpdGggdGhlaXIgbnVtYmVycy4gQnV0IGF0IHRoaXMgcG9pbnQgUGVsb3BpZGFzIGRhcnRlZCBmb3J0aCBmcm9tIGhpcyBwb3NpdGlvbiwgYW5kIHdpdGggaGlzIGJhbmQgb2YgdGhyZWUgaHVuZHJlZCBvbiB0aGUgcnVuLCBjYW1lIHVwPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlcmUgaXMgb25seSBhIGhpbnQgb2YgdGhpcyBzdHJhdGVneSBhbmQgbm8gbWVudGlvbiBlaXRoZXIgb2YgRXBhbWlub25kYXMgb3IgUGVsb3BpZGFzLCBpbiBYZW5vcGhvbidzIGFjY291bnQgb2YgdGhlIGJhdHRsZSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi40LjkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SGVsbC48L3RpdGxlPiB2aS4gNCwgOS0xNTwvYmlibD4pLjwvbm90ZT4gYmVmb3JlIENsZW9tYnJvdHVzIGhhZCBlaXRoZXIgZXh0ZW5kZWQgaGlzIHdpbmcgb3IgYnJvdWdodCBpdCBiYWNrIGFnYWluIGludG8gaXRzIG9sZCBwb3NpdGlvbiBhbmQgY2xvc2VkIHVwIGhpcyBsaW5lIG9mIGJhdHRsZSwgc28gdGhhdCB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBub3Qgc3RhbmRpbmcgaW4gYXJyYXksIGJ1dCBtb3ZpbmcgY29uZnVzZWRseSBhYm91dCBhbW9uZyBlYWNoIG90aGVyIHdoZW4gaGlzIG9uc2V0IHJlYWNoZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGUgU3BhcnRhbnMsIHdobyB3ZXJlIG9mIGFsbCBtZW4gcGFzdCBtYXN0ZXJzIGluIHRoZSBhcnQgb2Ygd2FyLCB0cmFpbmVkIGFuZCBhY2N1c3RvbWVkIHRoZW1zZWx2ZXMgdG8gbm90aGluZyBzbyBtdWNoIGFzIG5vdCB0byBzdHJhZ2dsZSBvciBnZXQgaW50byBjb25mdXNpb24gdXBvbiBhIGNoYW5nZSBvZiBmb3JtYXRpb24sIGJ1dCB0byB0YWtlIGFueW9uZSB3aXRob3V0IGV4Y2VwdGlvbiBhcyBuZWlnaGJvdXIgaW4gcmFuayBvciBpbiBmaWxlLCBhbmQgd2hlcmVzb2V2ZXIgZGFuZ2VyIGFjdHVhbGx5IHRocmVhdGVuZWQsIHRvIHNlaXplIHRoYXQgcG9pbnQgYW5kIGZvcm0gaW4gY2xvc2UgYXJyYXkgYW5kIGZpZ2h0IGFzIHdlbGwgYXMgZXZlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBob3dldmVyLCBzaW5jZSB0aGUgcGhhbGFueCBvZiBFcGFtaW5vbmRhcyBib3JlIGRvd24gdXBvbiB0aGVtIGFsb25lIGFuZCBuZWdsZWN0ZWQgdGhlIHJlc3Qgb2YgdGhlaXIgZm9yY2UsIGFuZCBzaW5jZSBQZWxvcGlkYXMgZW5nYWdlZCB0aGVtIHdpdGggaW5jcmVkaWJsZSBzcGVlZCBhbmQgYm9sZG5lc3MsIHRoZWlyIGNvdXJhZ2UgYW5kIHNraWxsIHdlcmUgc28gY29uZm91bmRlZCB0aGF0IHRoZXJlIHdhcyBhIGZsaWdodCBhbmQgc2xhdWdodGVyIG9mIHRoZSBTcGFydGFucyBzdWNoIGFzIGhhZCBuZXZlciBiZWZvcmUgYmVlbiBzZWVuLiAgVGhlcmVmb3JlLCBhbHRob3VnaCBFcGFtaW5vbmRhcyB3YXMgYm9lb3RhcmNoLCBQZWxvcGlkYXMsIHdobyB3YXMgbm90IGJvZW90YXJjaCwgYW5kIGNvbW1hbmRlZCBvbmx5IGEgc21hbGwgcG9ydGlvbiBvZiB0aGUgd2hvbGUgZm9yY2UsIHdvbiBhcyBtdWNoIGdsb3J5IGZvciB0aGUgc3VjY2VzcyBvZiB0aGF0IHZpY3RvcnkgYXMgaGUgZGlkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGJhdHRsZSwgd2hpbGUgICBFcGFtaW5vbmRhcyB3YXMgZHJhd2luZyBoaXMgcGhhbGFueCBvYmxpcXVlbHkgdG93YXJkcyB0aGUgbGVmdCwgaW4gb3JkZXIgdGhhdCB0aGUgcmlnaHQgd2luZyBvZiB0aGUgU3BhcnRhbnMgbWlnaHQgYmUgc2VwYXJhdGVkIGFzIGZhciBhcyBwb3NzaWJsZSBmcm9tIHRoZSByZXN0IG9mIHRoZSBHcmVla3MsIGFuZCB0aGF0IGhlIG1pZ2h0IHRocnVzdCBiYWNrIENsZW9tYnJvdHVzIGJ5IGEgZmllcmNlIGNoYXJnZSBpbiBjb2x1bW4gd2l0aCBhbGwgaGlzIG1lbi1hdC1hcm1zLCB0aGUgZW5lbXkgdW5kZXJzdG9vZCB3aGF0IGhlIHdhcyBkb2luZyBhbmQgYmVnYW4gdG8gY2hhbmdlIHRoZWlyIGZvcm1hdGlvbjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoZXkgd2VyZSBvcGVuaW5nIHVwIHRoZWlyIHJpZ2h0IHdpbmcgYW5kIG1ha2luZyBhbiBlbmNpcmNsaW5nIG1vdmVtZW50LCBpbiBvcmRlciB0byBzdXJyb3VuZCBFcGFtaW5vbmRhcyBhbmQgZW52ZWxvcCBoaW0gd2l0aCB0aGVpciBudW1iZXJzLiBCdXQgYXQgdGhpcyBwb2ludCBQZWxvcGlkYXMgZGFydGVkIGZvcnRoIGZyb20gaGlzIHBvc2l0aW9uLCBhbmQgd2l0aCBoaXMgYmFuZCBvZiB0aHJlZSBodW5kcmVkIG9uIHRoZSBydW4sIGNhbWUgdXA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXJlIGlzIG9ubHkgYSBoaW50IG9mIHRoaXMgc3RyYXRlZ3kgYW5kIG5vIG1lbnRpb24gZWl0aGVyIG9mIEVwYW1pbm9uZGFzIG9yIFBlbG9waWRhcywgaW4gWGVub3Bob24ncyBhY2NvdW50IG9mIHRoZSBiYXR0bGUgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi40LjkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiA0LCA5LTE1PC9iaWJsPikuPC9ub3RlPiBiZWZvcmUgQ2xlb21icm90dXMgaGFkIGVpdGhlciBleHRlbmRlZCBoaXMgd2luZyBvciBicm91Z2h0IGl0IGJhY2sgYWdhaW4gaW50byBpdHMgb2xkIHBvc2l0aW9uIGFuZCBjbG9zZWQgdXAgaGlzIGxpbmUgb2YgYmF0dGxlLCBzbyB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIG5vdCBzdGFuZGluZyBpbiBhcnJheSwgYnV0IG1vdmluZyBjb25mdXNlZGx5IGFib3V0IGFtb25nIGVhY2ggb3RoZXIgd2hlbiBoaXMgb25zZXQgcmVhY2hlZCB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gSGVsbC4gNi40LjkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZWxsLjwvdGl0bGU+IHZpLiA0LCA5LTE1PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVsbC48L3RpdGxlPiB2aS4gNCwgOS0xNTwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIFNwYXJ0YW5zLCB3aG8gd2VyZSBvZiBhbGwgbWVuIHBhc3QgbWFzdGVycyBpbiB0aGUgYXJ0IG9mIHdhciwgdHJhaW5lZCBhbmQgYWNjdXN0b21lZCB0aGVtc2VsdmVzIHRvIG5vdGhpbmcgc28gbXVjaCBhcyBub3QgdG8gc3RyYWdnbGUgb3IgZ2V0IGludG8gY29uZnVzaW9uIHVwb24gYSBjaGFuZ2Ugb2YgZm9ybWF0aW9uLCBidXQgdG8gdGFrZSBhbnlvbmUgd2l0aG91dCBleGNlcHRpb24gYXMgbmVpZ2hib3VyIGluIHJhbmsgb3IgaW4gZmlsZSwgYW5kIHdoZXJlc29ldmVyIGRhbmdlciBhY3R1YWxseSB0aHJlYXRlbmVkLCB0byBzZWl6ZSB0aGF0IHBvaW50IGFuZCBmb3JtIGluIGNsb3NlIGFycmF5IGFuZCBmaWdodCBhcyB3ZWxsIGFzIGV2ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgc2luY2UgdGhlIHBoYWxhbnggb2YgRXBhbWlub25kYXMgYm9yZSBkb3duIHVwb24gdGhlbSBhbG9uZSBhbmQgbmVnbGVjdGVkIHRoZSByZXN0IG9mIHRoZWlyIGZvcmNlLCBhbmQgc2luY2UgUGVsb3BpZGFzIGVuZ2FnZWQgdGhlbSB3aXRoIGluY3JlZGlibGUgc3BlZWQgYW5kIGJvbGRuZXNzLCB0aGVpciBjb3VyYWdlIGFuZCBza2lsbCB3ZXJlIHNvIGNvbmZvdW5kZWQgdGhhdCB0aGVyZSB3YXMgYSBmbGlnaHQgYW5kIHNsYXVnaHRlciBvZiB0aGUgU3BhcnRhbnMgc3VjaCBhcyBoYWQgbmV2ZXIgYmVmb3JlIGJlZW4gc2Vlbi4gIFRoZXJlZm9yZSwgYWx0aG91Z2ggRXBhbWlub25kYXMgd2FzIGJvZW90YXJjaCwgUGVsb3BpZGFzLCB3aG8gd2FzIG5vdCBib2VvdGFyY2gsIGFuZCBjb21tYW5kZWQgb25seSBhIHNtYWxsIHBvcnRpb24gb2YgdGhlIHdob2xlIGZvcmNlLCB3b24gYXMgbXVjaCBnbG9yeSBmb3IgdGhlIHN1Y2Nlc3Mgb2YgdGhhdCB2aWN0b3J5IGFzIGhlIGRpZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Qm90aCB3ZXJlIGJvZW90YXJjaHMsIGhvd2V2ZXIsIHdoZW4gdGhleSBpbnZhZGVkIFBlbG9wb25uZXN1cyBhbmQgd29uIG92ZXIgbW9zdCBvZiBpdHMgcGVvcGxlcywgZGV0YWNoaW5nIGZyb20gdGhlIExhY2VkYWVtb25pYW4gY29uZmVkZXJhY3kgRWxpcywgQXJnb3MsIGFsbCBBcmNhZGlhLCBhbmQgbW9zdCBvZiBMYWNvbmlhIGl0c2VsZi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNzAgQi5DLjwvbm90ZT4gU3RpbGwsIHRoZSB3aW50ZXIgc29sc3RpY2Ugd2FzIGF0IGhhbmQsIGFuZCBvbmx5IGEgZmV3IGRheXMgb2YgdGhlIGxhdHRlciBwYXJ0IG9mIHRoZSBsYXN0IG1vbnRoIG9mIHRoZSB5ZWFyIHJlbWFpbmVkLCBhbmQgYXMgc29vbiBhcyB0aGUgZmlyc3QgbW9udGggb2YgdGhlIG5ldyB5ZWFyIGJlZ2FuIG90aGVyIG9mZmljaWFscyBtdXN0IHN1Y2NlZWQgdGhlbSwgb3IgdGhvc2Ugd2hvIHdvdWxkIG5vdCBzdXJyZW5kZXIgdGhlaXIgb2ZmaWNlIG11c3QgZGllLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3RoZXIgYm9lb3RhcmNocywgYm90aCBiZWNhdXNlIHRoZXkgZmVhcmVkIHRoaXMgbGF3LCBhbmQgYmVjYXVzZSB0aGV5IHdpc2hlZCB0byBhdm9pZCB0aGUgaGFyZHNoaXBzIG9mIHdpbnRlciwgd2VyZSBhbnhpb3VzIHRvIGxlYWQgdGhlIGFybXkgYmFjayBob21lOyBidXQgUGVsb3BpZGFzIHdhcyBmaXJzdCB0byBhZGQgaGlzIHZvdGUgdG8gdGhhdCBvZiBFcGFtaW5vbmRhcywgYW5kIGFmdGVyIGluY2l0aW5nIGhpcyBjb3VudHJ5bWVuIHRvIGpvaW4gdGhlbSwgbGVkIHRoZSBhcm15IGFnYWluc3QgU3BhcnRhIGFuZCBhY3Jvc3MgdGhlIEV1cm90YXMuICBIZSB0b29rIG1hbnkgb2YgdGhlIGVuZW15J3MgY2l0aWVzLCBhbmQgcmF2YWdlZCBhbGwgdGhlaXIgdGVycml0b3J5IGFzIGZhciBhcyB0aGUgc2VhLCBsZWFkaW5nIGFuIGFybXkgb2Ygc2V2ZW50eSB0aG91c2FuZCBHcmVla3MsIG9mIHdoaWNoIHRoZSBUaGViYW5zIHRoZW1zZWx2ZXMgd2VyZSBsZXNzIHRoYW4gYSB0d2VsZnRoIHBhcnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcmVwdXRhdGlvbiBvZiB0aGUgdHdvIG1lbiwgd2l0aG91dCBhIGdlbmVyYWwgdm90ZSBvciBkZWNyZWUsIGluZHVjZWQgYWxsIHRoZSBhbGxpZXMgdG8gZm9sbG93IHRoZWlyIGxlYWRlcnNoaXAgd2l0aG91dCBhIG11cm11ci4gRm9yIHRoZSBmaXJzdCBhbmQgcGFyYW1vdW50IGxhdywgYXMgaXQgd291bGQgc2VlbSwgbmFtZWx5LCB0aGF0IG9mIG5hdHVyZSwgc3ViamVjdHMgaGltIHdobyBkZXNpcmVzIHRvIGJlIHNhdmVkIHRvIHRoZSBjb21tYW5kIG9mIHRoZSBtYW4gd2hvIGNhbiBzYXZlIGhpbTsganVzdCBhcyBzYWlsb3JzLCB3aGVuIHRoZSB3ZWF0aGVyIGlzIGZhaXIgb3IgdGhleSBhcmUgbHlpbmcgb2ZmIHNob3JlIGF0IGFuY2hvciwgdHJlYXQgdGhlaXIgY2FwdGFpbnMgd2l0aCBib2xkIGluc29sZW5jZSwgYnV0IGFzIHNvb24gYXMgYSBzdG9ybSBhcmlzZXMgYW5kIGRhbmdlciB0aHJlYXRlbnMsIGxvb2sgdG8gdGhlbSAgIGZvciBndWlkYW5jZSBhbmQgcGxhY2UgdGhlaXIgaG9wZXMgaW4gdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIEFyZ2l2ZXMsIEVsZWFucywgYW5kIEFyY2FkaWFucywgd2hvIGluIHRoZWlyIGpvaW50IGFzc2VtYmxpZXMgY29udGVuZGVkIGFuZCBzdHJvdmUgd2l0aCB0aGUgVGhlYmFucyBmb3IgdGhlIHN1cHJlbWFjeSwgd2hlbiBiYXR0bGVzIHdlcmUgYWN0dWFsbHkgdG8gYmUgZm91Z2h0IGFuZCBwZXJpbHMgdG8gYmUgZmFjZWQsIG9mIHRoZWlyIG93biB3aWxsIG9iZXllZCB0aGUgVGhlYmFuIGdlbmVyYWxzIGFuZCBmb2xsb3dlZCB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Qm90aCB3ZXJlIGJvZW90YXJjaHMsIGhvd2V2ZXIsIHdoZW4gdGhleSBpbnZhZGVkIFBlbG9wb25uZXN1cyBhbmQgd29uIG92ZXIgbW9zdCBvZiBpdHMgcGVvcGxlcywgZGV0YWNoaW5nIGZyb20gdGhlIExhY2VkYWVtb25pYW4gY29uZmVkZXJhY3kgRWxpcywgQXJnb3MsIGFsbCBBcmNhZGlhLCBhbmQgbW9zdCBvZiBMYWNvbmlhIGl0c2VsZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM3MCBCLkMuPC9ub3RlPiBTdGlsbCwgdGhlIHdpbnRlciBzb2xzdGljZSB3YXMgYXQgaGFuZCwgYW5kIG9ubHkgYSBmZXcgZGF5cyBvZiB0aGUgbGF0dGVyIHBhcnQgb2YgdGhlIGxhc3QgbW9udGggb2YgdGhlIHllYXIgcmVtYWluZWQsIGFuZCBhcyBzb29uIGFzIHRoZSBmaXJzdCBtb250aCBvZiB0aGUgbmV3IHllYXIgYmVnYW4gb3RoZXIgb2ZmaWNpYWxzIG11c3Qgc3VjY2VlZCB0aGVtLCBvciB0aG9zZSB3aG8gd291bGQgbm90IHN1cnJlbmRlciB0aGVpciBvZmZpY2UgbXVzdCBkaWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvdGhlciBib2VvdGFyY2hzLCBib3RoIGJlY2F1c2UgdGhleSBmZWFyZWQgdGhpcyBsYXcsIGFuZCBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGF2b2lkIHRoZSBoYXJkc2hpcHMgb2Ygd2ludGVyLCB3ZXJlIGFueGlvdXMgdG8gbGVhZCB0aGUgYXJteSBiYWNrIGhvbWU7IGJ1dCBQZWxvcGlkYXMgd2FzIGZpcnN0IHRvIGFkZCBoaXMgdm90ZSB0byB0aGF0IG9mIEVwYW1pbm9uZGFzLCBhbmQgYWZ0ZXIgaW5jaXRpbmcgaGlzIGNvdW50cnltZW4gdG8gam9pbiB0aGVtLCBsZWQgdGhlIGFybXkgYWdhaW5zdCBTcGFydGEgYW5kIGFjcm9zcyB0aGUgRXVyb3Rhcy4gIEhlIHRvb2sgbWFueSBvZiB0aGUgZW5lbXkncyBjaXRpZXMsIGFuZCByYXZhZ2VkIGFsbCB0aGVpciB0ZXJyaXRvcnkgYXMgZmFyIGFzIHRoZSBzZWEsIGxlYWRpbmcgYW4gYXJteSBvZiBzZXZlbnR5IHRob3VzYW5kIEdyZWVrcywgb2Ygd2hpY2ggdGhlIFRoZWJhbnMgdGhlbXNlbHZlcyB3ZXJlIGxlc3MgdGhhbiBhIHR3ZWxmdGggcGFydC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcmVwdXRhdGlvbiBvZiB0aGUgdHdvIG1lbiwgd2l0aG91dCBhIGdlbmVyYWwgdm90ZSBvciBkZWNyZWUsIGluZHVjZWQgYWxsIHRoZSBhbGxpZXMgdG8gZm9sbG93IHRoZWlyIGxlYWRlcnNoaXAgd2l0aG91dCBhIG11cm11ci4gRm9yIHRoZSBmaXJzdCBhbmQgcGFyYW1vdW50IGxhdywgYXMgaXQgd291bGQgc2VlbSwgbmFtZWx5LCB0aGF0IG9mIG5hdHVyZSwgc3ViamVjdHMgaGltIHdobyBkZXNpcmVzIHRvIGJlIHNhdmVkIHRvIHRoZSBjb21tYW5kIG9mIHRoZSBtYW4gd2hvIGNhbiBzYXZlIGhpbTsganVzdCBhcyBzYWlsb3JzLCB3aGVuIHRoZSB3ZWF0aGVyIGlzIGZhaXIgb3IgdGhleSBhcmUgbHlpbmcgb2ZmIHNob3JlIGF0IGFuY2hvciwgdHJlYXQgdGhlaXIgY2FwdGFpbnMgd2l0aCBib2xkIGluc29sZW5jZSwgYnV0IGFzIHNvb24gYXMgYSBzdG9ybSBhcmlzZXMgYW5kIGRhbmdlciB0aHJlYXRlbnMsIGxvb2sgdG8gdGhlbSAgIGZvciBndWlkYW5jZSBhbmQgcGxhY2UgdGhlaXIgaG9wZXMgaW4gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBBcmdpdmVzLCBFbGVhbnMsIGFuZCBBcmNhZGlhbnMsIHdobyBpbiB0aGVpciBqb2ludCBhc3NlbWJsaWVzIGNvbnRlbmRlZCBhbmQgc3Ryb3ZlIHdpdGggdGhlIFRoZWJhbnMgZm9yIHRoZSBzdXByZW1hY3ksIHdoZW4gYmF0dGxlcyB3ZXJlIGFjdHVhbGx5IHRvIGJlIGZvdWdodCBhbmQgcGVyaWxzIHRvIGJlIGZhY2VkLCBvZiB0aGVpciBvd24gd2lsbCBvYmV5ZWQgdGhlIFRoZWJhbiBnZW5lcmFscyBhbmQgZm9sbG93ZWQgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBleHBlZGl0aW9uIHRoZXkgdW5pdGVkIGFsbCBBcmNhZGlhIGludG8gb25lIHBvd2VyOyByZXNjdWVkIHRoZSBjb3VudHJ5IG9mIE1lc3NlbmlhIGZyb20gdGhlIGhhbmRzIG9mIGl0cyBTcGFydGFuIG1hc3RlcnMgYW5kIGNhbGxlZCBiYWNrIGFuZCByZXN0b3JlZCB0aGUgYW5jaWVudCBNZXNzZW5pYW4gaW5oYWJpdGFudHMsIHdpdGggd2hvbSB0aGV5IHNldHRsZWQgSXRob21lOyBhbmQgb24gdGhlaXIgd2F5IGJhY2sgaG9tZXdhcmRzIHRocm91Z2ggQ2VuY2hyZWFlLCBjb25xdWVyZWQgdGhlIEF0aGVuaWFucyB3aGVuIHRoZXkgdHJpZWQgdG8gaGluZGVyIHRoZWlyIHBhc3NhZ2UgYnkgc2tpcm1pc2hpbmcgd2l0aCB0aGVtIGluIHRoZSBwYXNzZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgZXhwZWRpdGlvbiB0aGV5IHVuaXRlZCBhbGwgQXJjYWRpYSBpbnRvIG9uZSBwb3dlcjsgcmVzY3VlZCB0aGUgY291bnRyeSBvZiBNZXNzZW5pYSBmcm9tIHRoZSBoYW5kcyBvZiBpdHMgU3BhcnRhbiBtYXN0ZXJzIGFuZCBjYWxsZWQgYmFjayBhbmQgcmVzdG9yZWQgdGhlIGFuY2llbnQgTWVzc2VuaWFuIGluaGFiaXRhbnRzLCB3aXRoIHdob20gdGhleSBzZXR0bGVkIEl0aG9tZTsgYW5kIG9uIHRoZWlyIHdheSBiYWNrIGhvbWV3YXJkcyB0aHJvdWdoIENlbmNocmVhZSwgY29ucXVlcmVkIHRoZSBBdGhlbmlhbnMgd2hlbiB0aGV5IHRyaWVkIHRvIGhpbmRlciB0aGVpciBwYXNzYWdlIGJ5IHNraXJtaXNoaW5nIHdpdGggdGhlbSBpbiB0aGUgcGFzc2VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB2aWV3IG9mIHRoZXNlIGFjaGlldmVtZW50cywgYWxsIHRoZSByZXN0IG9mIHRoZSBHcmVla3Mgd2VyZSBkZWxpZ2h0ZWQgd2l0aCB0aGVpciB2YWxvdXIgYW5kIG1hcnZlbGxlZCBhdCB0aGVpciBnb29kIGZvcnR1bmU7IGJ1dCB0aGUgZW52eSBvZiB0aGVpciBvd24gZmVsbG93LWNpdGl6ZW5zLCB3aGljaCB3YXMgaW5jcmVhc2luZyB3aXRoIHRoZSBtZW4ncyBmYW1lLCBwcmVwYXJlZCB0aGVtIGEgcmVjZXB0aW9uIHRoYXQgd2FzIG5vdCBob25vdXJhYmxlIG9yIGZpdHRpbmcuICBGb3IgYm90aCB3ZXJlIHRyaWVkIGZvciB0aGVpciBsaXZlcyB3aGVuIHRoZXkgY2FtZSBiYWNrLCBiZWNhdXNlIHRoZXkgaGFkIG5vdCBoYW5kZWQgb3ZlciB0byBvdGhlcnMgdGhlaXIgb2ZmaWNlIG9mIGJvZW90YXJjaCwgYXMgdGhlIGxhdyBjb21tYW5kZWQsIGluIHRoZSBmaXJzdCBtb250aCBvZiB0aGUgbmV3IHllYXIgKHdoaWNoIHRoZXkgY2FsbCBCb3VrYXRpb3MpLCBidXQgaGFkIGFkZGVkIGZvdXIgd2hvbGUgbW9udGhzIHRvIGl0LCBkdXJpbmcgd2hpY2ggdGhleSBjb25kdWN0ZWQgdGhlaXIgY2FtcGFpZ24gaW4gTWVzc2VuaWEsIEFyY2FkaWEsIGFuZCBMYWNvbmlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmlldyBvZiB0aGVzZSBhY2hpZXZlbWVudHMsIGFsbCB0aGUgcmVzdCBvZiB0aGUgR3JlZWtzIHdlcmUgZGVsaWdodGVkIHdpdGggdGhlaXIgdmFsb3VyIGFuZCBtYXJ2ZWxsZWQgYXQgdGhlaXIgZ29vZCBmb3J0dW5lOyBidXQgdGhlIGVudnkgb2YgdGhlaXIgb3duIGZlbGxvdy1jaXRpemVucywgd2hpY2ggd2FzIGluY3JlYXNpbmcgd2l0aCB0aGUgbWVuJ3MgZmFtZSwgcHJlcGFyZWQgdGhlbSBhIHJlY2VwdGlvbiB0aGF0IHdhcyBub3QgaG9ub3VyYWJsZSBvciBmaXR0aW5nLiAgRm9yIGJvdGggd2VyZSB0cmllZCBmb3IgdGhlaXIgbGl2ZXMgd2hlbiB0aGV5IGNhbWUgYmFjaywgYmVjYXVzZSB0aGV5IGhhZCBub3QgaGFuZGVkIG92ZXIgdG8gb3RoZXJzIHRoZWlyIG9mZmljZSBvZiBib2VvdGFyY2gsIGFzIHRoZSBsYXcgY29tbWFuZGVkLCBpbiB0aGUgZmlyc3QgbW9udGggb2YgdGhlIG5ldyB5ZWFyICh3aGljaCB0aGV5IGNhbGwgQm91a2F0aW9zKSwgYnV0IGhhZCBhZGRlZCBmb3VyIHdob2xlIG1vbnRocyB0byBpdCwgZHVyaW5nIHdoaWNoIHRoZXkgY29uZHVjdGVkIHRoZWlyIGNhbXBhaWduIGluIE1lc3NlbmlhLCBBcmNhZGlhLCBhbmQgTGFjb25pYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgUGVsb3BpZGFzIHdhcyBmaXJzdCBicm91Z2h0IHRvIHRyaWFsLCBhbmQgdGhlcmVmb3JlIHJhbiB0aGUgZ3JlYXRlciByaXNrLCBidXQgYm90aCB3ZXJlIGFjcXVpdHRlZC4gIEVwYW1pbm9uZGFzIGJvcmUgcGF0aWVudGx5IHdpdGggdGhpcyBhdHRlbXB0IHRvIGNhbHVtbmlhdGUgaGltLCBjb25zaWRlcmluZyB0aGF0IGZvcmJlYXJhbmNlIHVuZGVyIHBvbGl0aWNhbCBpbmp1cnkgd2FzIGEgbGFyZ2UgcGFydCBvZiBmb3J0aXR1ZGUgYW5kIG1hZ25hbmltaXR5OyBidXQgUGVsb3BpZGFzLCB3aG8gd2FzIG5hdHVyYWxseSBvZiBhIG1vcmUgZmllcnkgdGVtcGVyLCBhbmQgd2hvIHdhcyBlZ2dlZCBvbiBieSBoaXMgZnJpZW5kcyB0byBhdmVuZ2UgaGltc2VsZiB1cG9uIGhpcyBlbmVtaWVzIHNlaXplZCAgdGhlIGZvbGxvd2luZyBvY2Nhc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWVuZWNsZWlkYXMsIHRoZSBvcmF0b3IsIHdhcyBvbmUgb2YgdGhvc2Ugd2hvIGhhZCBnYXRoZXJlZCB3aXRoIFBlbG9waWRhcyBhbmQgTWVsb24gYXQgQ2hhcm9uJ3MgaG91c2UsIGFuZCBzaW5jZSBoZSBkaWQgbm90IHJlY2VpdmUgICAgIGFzIG11Y2ggaG9ub3VyIGFtb25nIHRoZSBUaGViYW5zIGFzIHRoZSBvdGhlcnMsIGJlaW5nIGEgbW9zdCBhYmxlIHNwZWFrZXIsIGJ1dCBpbnRlbXBlcmF0ZSBhbmQgbWFsaWNpb3VzIGluIGhpcyBkaXNwb3NpdGlvbiwgaGUgZ2F2ZSBoaXMgbmF0dXJhbCBnaWZ0cyBlbXBsb3ltZW50IGluIGNhbHVtbmlhdGluZyBhbmQgc2xhbmRlcmluZyBoaXMgc3VwZXJpb3JzLCBhbmQga2VwdCBvbiBkb2luZyBzbyBldmVuIGFmdGVyIHRoZSB0cmlhbC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHN1Y2NlZWRlZCBpbiBleGNsdWRpbmcgRXBhbWlub25kYXMgZnJvbSB0aGUgb2ZmaWNlIG9mIGJvZW90YXJjaCwgYW5kIGtlcHQgaGltIG91dCBvZiBwb2xpdGljYWwgbGVhZGVyc2hpcCBmb3Igc29tZSB0aW1lOyBidXQgaGUgaGFkIG5vdCB3ZWlnaHQgZW5vdWdoIHRvIGJyaW5nIFBlbG9waWRhcyBpbnRvIGRpc2Zhdm91ciB3aXRoIHRoZSBwZW9wbGUsIGFuZCB0aGVyZWZvcmUgdHJpZWQgdG8gYnJpbmcgaGltIGludG8gY29sbGlzaW9uIHdpdGggQ2hhcm9uLiBBbmQgc2luY2UgaXQgaXMgcXVpdGUgZ2VuZXJhbGx5IGEgY29uc29sYXRpb24gdG8gdGhlIGVudmlvdXMsIGluIHRoZSBjYXNlIG9mIHRob3NlIHdob20gdGhleSB0aGVtc2VsdmVzIGNhbm5vdCBzdXJwYXNzIGluIG1lbidzIGVzdGltYXRpb24sIHRvIHNob3cgdGhlc2UgZm9ydGggYXMgc29tZWhvdyBvciBvdGhlciBpbmZlcmlvciB0byBvdGhlcnMsIGhlIHdhcyBjb25zdGFudGx5IG1hZ25pZnlpbmcgdGhlIGFjaGlldmVtZW50cyBvZiBDaGFyb24sIGluIGhpcyBzcGVlY2hlcyB0byB0aGUgcGVvcGxlLCBhbmQgZXh0b2xsaW5nIGhpcyBjYW1wYWlnbnMgYW5kIHZpY3Rvcmllcy4gIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBmb3IgdGhlIHZpY3Rvcnkgd2hpY2ggdGhlIFRoZWJhbiBjYXZhbHJ5IHdvbiBhdCBQbGF0YWVhLCBiZWZvcmUgdGhlIGJhdHRsZSBvZiBMZXVjdHJhLCB1bmRlciB0aGUgY29tbWFuZCBvZiBDaGFyb24sIGhlIGF0dGVtcHRlZCB0byBtYWtlIHRoZSBmb2xsb3dpbmcgcHVibGljIGRlZGljYXRpb24uIEFuZHJvY3lkZXMgb2YgQ3l6aWN1cyBoYWQgcmVjZWl2ZWQgYSBjb21taXNzaW9uIGZyb20gdGhlIGNpdHkgdG8gbWFrZSBhIHBpY3R1cmUgb2YgYW5vdGhlciBiYXR0bGUsIGFuZCB3YXMgZmluaXNoaW5nIHRoZSB3b3JrIGF0IFRoZWJlczsgYnV0IHRoZSBjaXR5IHJldm9sdGVkIGZyb20gU3BhcnRhLCBhbmQgdGhlIHdhciBjYW1lIG9uLCBiZWZvcmUgdGhlIHBpY3R1cmUgd2FzIHF1aXRlIGNvbXBsZXRlZCwgYW5kIHRoZSBUaGViYW5zIG5vdyBoYWQgaXQgb24gdGhlaXIgaGFuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGljdHVyZSwgdGhlbiwgTWVuZWNsZWlkYXMgcGVyc3VhZGVkIHRoZW0gdG8gZGVkaWNhdGUgd2l0aCBDaGFyb24ncyBuYW1lIGluc2NyaWJlZCB0aGVyZW9uLCBob3BpbmcgaW4gdGhpcyB3YXkgdG8gb2JzY3VyZSB0aGUgZmFtZSBvZiBQZWxvcGlkYXMgYW5kIEVwYW1pbm9uZGFzLiAgQnV0IHRoZSBhbWJpdGlvdXMgc2NoZW1lIHdhcyBhIGZvb2xpc2ggb25lLCB3aGVuIHRoZXJlIHdlcmUgc28gbWFueSBhbmQgc3VjaCBncmVhdCBjb25mbGljdHMsIHRvIGJlc3RvdyBhcHByb3ZhbCBvbiBvbmUgYWN0aW9uIGFuZCBvbmUgdmljdG9yeSwgaW4gd2hpY2gsIHdlIGFyZSB0b2xkLCBhIGNlcnRhaW4gR2VyYW5kYXMsIGFuIG9ic2N1cmUgU3BhcnRhbiwgYW5kIGZvcnR5IG90aGVycyB3ZXJlIGtpbGxlZCwgYnV0IG5vdGhpbmcgZWxzZSBvZiBpbXBvcnRhbmNlIHdhcyBhY2NvbXBsaXNoZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVjcmVlIHdhcyBhdHRhY2tlZCBhcyB1bmNvbnN0aXR1dGlvbmFsIGJ5IFBlbG9waWRhcywgd2hvIGluc2lzdGVkIHRoYXQgaXQgd2FzIG5vdCBhIGN1c3RvbSB3aXRoIHRoZSBUaGViYW5zIHRvIGhvbm91ciBhbnkgb25lIG1hbiBpbmRpdmlkdWFsbHksIGJ1dCBmb3IgdGhlIHdob2xlIGNvdW50cnkgdG8gaGF2ZSB0aGUgZ2xvcnkgb2YgYSB2aWN0b3J5LiAgQW5kIHRocm91Z2ggdGhlIHdob2xlIHRyaWFsIG9mIHRoZSBjYXNlIGhlIGNvbnRpbnVlZCB0byBoZWFwIGdlbmVyb3VzIHByYWlzZSB1cG9uIENoYXJvbiwgd2hpbGUgaGUgc2hvd2VkIE1lbmVjbGVpZGFzIHRvIGJlIGEgc2xhbmRlcm91cyBhbmQgd29ydGhsZXNzIGZlbGxvdywgYW5kIGFza2VkIHRoZSBUaGViYW5zIGlmIHRoZXkgaGFkIGRvbmUgbm90aGluZyBub2JsZSB0aGVtc2VsdmVzOyB0aGUgcmVzdWx0IHdhcyB0aGF0IE1lbmVjbGVpZGFzIHdhcyBmaW5lZCwgYW5kIGJlaW5nIHVuYWJsZSB0byBwYXkgdGhlIGZpbmUgYmVjYXVzZSBpdCB3YXMgc28gaGVhdnksIGhlIGFmdGVyd2FyZHMgdHJpZWQgdG8gZWZmZWN0IGEgcmV2b2x1dGlvbiBpbiB0aGUgZ292ZXJubWVudC4gIFRoaXMgZXBpc29kZSwgdGhlbiwgaGFzIHNvbWUgYmVhcmluZyBvbiB0aGUgTGlmZSB3aGljaCBJIGFtIHdyaXRpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIFBlbG9waWRhcyB3YXMgZmlyc3QgYnJvdWdodCB0byB0cmlhbCwgYW5kIHRoZXJlZm9yZSByYW4gdGhlIGdyZWF0ZXIgcmlzaywgYnV0IGJvdGggd2VyZSBhY3F1aXR0ZWQuICBFcGFtaW5vbmRhcyBib3JlIHBhdGllbnRseSB3aXRoIHRoaXMgYXR0ZW1wdCB0byBjYWx1bW5pYXRlIGhpbSwgY29uc2lkZXJpbmcgdGhhdCBmb3JiZWFyYW5jZSB1bmRlciBwb2xpdGljYWwgaW5qdXJ5IHdhcyBhIGxhcmdlIHBhcnQgb2YgZm9ydGl0dWRlIGFuZCBtYWduYW5pbWl0eTsgYnV0IFBlbG9waWRhcywgd2hvIHdhcyBuYXR1cmFsbHkgb2YgYSBtb3JlIGZpZXJ5IHRlbXBlciwgYW5kIHdobyB3YXMgZWdnZWQgb24gYnkgaGlzIGZyaWVuZHMgdG8gYXZlbmdlIGhpbXNlbGYgdXBvbiBoaXMgZW5lbWllcyBzZWl6ZWQgIHRoZSBmb2xsb3dpbmcgb2NjYXNpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lbmVjbGVpZGFzLCB0aGUgb3JhdG9yLCB3YXMgb25lIG9mIHRob3NlIHdobyBoYWQgZ2F0aGVyZWQgd2l0aCBQZWxvcGlkYXMgYW5kIE1lbG9uIGF0IENoYXJvbidzIGhvdXNlLCBhbmQgc2luY2UgaGUgZGlkIG5vdCByZWNlaXZlICAgICBhcyBtdWNoIGhvbm91ciBhbW9uZyB0aGUgVGhlYmFucyBhcyB0aGUgb3RoZXJzLCBiZWluZyBhIG1vc3QgYWJsZSBzcGVha2VyLCBidXQgaW50ZW1wZXJhdGUgYW5kIG1hbGljaW91cyBpbiBoaXMgZGlzcG9zaXRpb24sIGhlIGdhdmUgaGlzIG5hdHVyYWwgZ2lmdHMgZW1wbG95bWVudCBpbiBjYWx1bW5pYXRpbmcgYW5kIHNsYW5kZXJpbmcgaGlzIHN1cGVyaW9ycywgYW5kIGtlcHQgb24gZG9pbmcgc28gZXZlbiBhZnRlciB0aGUgdHJpYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBzdWNjZWVkZWQgaW4gZXhjbHVkaW5nIEVwYW1pbm9uZGFzIGZyb20gdGhlIG9mZmljZSBvZiBib2VvdGFyY2gsIGFuZCBrZXB0IGhpbSBvdXQgb2YgcG9saXRpY2FsIGxlYWRlcnNoaXAgZm9yIHNvbWUgdGltZTsgYnV0IGhlIGhhZCBub3Qgd2VpZ2h0IGVub3VnaCB0byBicmluZyBQZWxvcGlkYXMgaW50byBkaXNmYXZvdXIgd2l0aCB0aGUgcGVvcGxlLCBhbmQgdGhlcmVmb3JlIHRyaWVkIHRvIGJyaW5nIGhpbSBpbnRvIGNvbGxpc2lvbiB3aXRoIENoYXJvbi4gQW5kIHNpbmNlIGl0IGlzIHF1aXRlIGdlbmVyYWxseSBhIGNvbnNvbGF0aW9uIHRvIHRoZSBlbnZpb3VzLCBpbiB0aGUgY2FzZSBvZiB0aG9zZSB3aG9tIHRoZXkgdGhlbXNlbHZlcyBjYW5ub3Qgc3VycGFzcyBpbiBtZW4ncyBlc3RpbWF0aW9uLCB0byBzaG93IHRoZXNlIGZvcnRoIGFzIHNvbWVob3cgb3Igb3RoZXIgaW5mZXJpb3IgdG8gb3RoZXJzLCBoZSB3YXMgY29uc3RhbnRseSBtYWduaWZ5aW5nIHRoZSBhY2hpZXZlbWVudHMgb2YgQ2hhcm9uLCBpbiBoaXMgc3BlZWNoZXMgdG8gdGhlIHBlb3BsZSwgYW5kIGV4dG9sbGluZyBoaXMgY2FtcGFpZ25zIGFuZCB2aWN0b3JpZXMuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBmb3IgdGhlIHZpY3Rvcnkgd2hpY2ggdGhlIFRoZWJhbiBjYXZhbHJ5IHdvbiBhdCBQbGF0YWVhLCBiZWZvcmUgdGhlIGJhdHRsZSBvZiBMZXVjdHJhLCB1bmRlciB0aGUgY29tbWFuZCBvZiBDaGFyb24sIGhlIGF0dGVtcHRlZCB0byBtYWtlIHRoZSBmb2xsb3dpbmcgcHVibGljIGRlZGljYXRpb24uIEFuZHJvY3lkZXMgb2YgQ3l6aWN1cyBoYWQgcmVjZWl2ZWQgYSBjb21taXNzaW9uIGZyb20gdGhlIGNpdHkgdG8gbWFrZSBhIHBpY3R1cmUgb2YgYW5vdGhlciBiYXR0bGUsIGFuZCB3YXMgZmluaXNoaW5nIHRoZSB3b3JrIGF0IFRoZWJlczsgYnV0IHRoZSBjaXR5IHJldm9sdGVkIGZyb20gU3BhcnRhLCBhbmQgdGhlIHdhciBjYW1lIG9uLCBiZWZvcmUgdGhlIHBpY3R1cmUgd2FzIHF1aXRlIGNvbXBsZXRlZCwgYW5kIHRoZSBUaGViYW5zIG5vdyBoYWQgaXQgb24gdGhlaXIgaGFuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGljdHVyZSwgdGhlbiwgTWVuZWNsZWlkYXMgcGVyc3VhZGVkIHRoZW0gdG8gZGVkaWNhdGUgd2l0aCBDaGFyb24ncyBuYW1lIGluc2NyaWJlZCB0aGVyZW9uLCBob3BpbmcgaW4gdGhpcyB3YXkgdG8gb2JzY3VyZSB0aGUgZmFtZSBvZiBQZWxvcGlkYXMgYW5kIEVwYW1pbm9uZGFzLiAgQnV0IHRoZSBhbWJpdGlvdXMgc2NoZW1lIHdhcyBhIGZvb2xpc2ggb25lLCB3aGVuIHRoZXJlIHdlcmUgc28gbWFueSBhbmQgc3VjaCBncmVhdCBjb25mbGljdHMsIHRvIGJlc3RvdyBhcHByb3ZhbCBvbiBvbmUgYWN0aW9uIGFuZCBvbmUgdmljdG9yeSwgaW4gd2hpY2gsIHdlIGFyZSB0b2xkLCBhIGNlcnRhaW4gR2VyYW5kYXMsIGFuIG9ic2N1cmUgU3BhcnRhbiwgYW5kIGZvcnR5IG90aGVycyB3ZXJlIGtpbGxlZCwgYnV0IG5vdGhpbmcgZWxzZSBvZiBpbXBvcnRhbmNlIHdhcyBhY2NvbXBsaXNoZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZGVjcmVlIHdhcyBhdHRhY2tlZCBhcyB1bmNvbnN0aXR1dGlvbmFsIGJ5IFBlbG9waWRhcywgd2hvIGluc2lzdGVkIHRoYXQgaXQgd2FzIG5vdCBhIGN1c3RvbSB3aXRoIHRoZSBUaGViYW5zIHRvIGhvbm91ciBhbnkgb25lIG1hbiBpbmRpdmlkdWFsbHksIGJ1dCBmb3IgdGhlIHdob2xlIGNvdW50cnkgdG8gaGF2ZSB0aGUgZ2xvcnkgb2YgYSB2aWN0b3J5LiAgQW5kIHRocm91Z2ggdGhlIHdob2xlIHRyaWFsIG9mIHRoZSBjYXNlIGhlIGNvbnRpbnVlZCB0byBoZWFwIGdlbmVyb3VzIHByYWlzZSB1cG9uIENoYXJvbiwgd2hpbGUgaGUgc2hvd2VkIE1lbmVjbGVpZGFzIHRvIGJlIGEgc2xhbmRlcm91cyBhbmQgd29ydGhsZXNzIGZlbGxvdywgYW5kIGFza2VkIHRoZSBUaGViYW5zIGlmIHRoZXkgaGFkIGRvbmUgbm90aGluZyBub2JsZSB0aGVtc2VsdmVzOyB0aGUgcmVzdWx0IHdhcyB0aGF0IE1lbmVjbGVpZGFzIHdhcyBmaW5lZCwgYW5kIGJlaW5nIHVuYWJsZSB0byBwYXkgdGhlIGZpbmUgYmVjYXVzZSBpdCB3YXMgc28gaGVhdnksIGhlIGFmdGVyd2FyZHMgdHJpZWQgdG8gZWZmZWN0IGEgcmV2b2x1dGlvbiBpbiB0aGUgZ292ZXJubWVudC4gIFRoaXMgZXBpc29kZSwgdGhlbiwgaGFzIHNvbWUgYmVhcmluZyBvbiB0aGUgTGlmZSB3aGljaCBJIGFtIHdyaXRpbmcuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc2luY2UgQWxleGFuZGVyIHRoZSB0eXJhbnQgb2YgUGhlcmFlIG1hZGUgb3BlbiB3YXIgb24gbWFueSBvZiB0aGUgVGhlc3NhbGlhbnMsIGFuZCB3YXMgcGxvdHRpbmcgYWdhaW5zdCB0aGVtIGFsbCwgdGhlaXIgY2l0aWVzIHNlbnQgYW1iYXNzYWRvcnMgdG8gVGhlYmVzIGFza2luZyBmb3IgYW4gYXJtZWQgZm9yY2UgYW5kIGEgZ2VuZXJhbC4gIFBlbG9waWRhcywgdGhlcmVmb3JlLCBzZWVpbmcgdGhhdCBFcGFtaW5vbmRhcyB3YXMgYnVzeSB3aXRoIGhpcyB3b3JrIGluIFBlbG9wb25uZXN1cywgb2ZmZXJlZCBhbmQgYXNzaWduZWQgaGltc2VsZiB0byB0aGUgVGhlc3NhbGlhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY5IEIuQy48L25vdGU+IGJvdGggYmVjYXVzZSBoZSBjb3VsZCBub3Qgc3VmZmVyIGhpcyBvd24gc2tpbGwgYW5kIGFiaWxpdHkgdG8gbGllIGlkbGUsIGFuZCBiZWNhdXNlIGhlIHRob3VnaHQgdGhhdCB3aGVyZXZlciBFcGFtaW5vbmRhcyB3YXMgdGhlcmUgd2FzIG5vIG5lZWQgb2YgYSBzZWNvbmQgZ2VuZXJhbC4gIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBtYXJjaGluZyBpbnRvIFRoZXNzYWx5IHdpdGggYW4gYXJtZWQgZm9yY2UsIGhlIHN0cmFpZ2h0d2F5IHRvb2sgTGFyaXNzYSwgYW5kIHdoZW4gQWxleGFuZGVyIGNhbWUgdG8gaGltIGFuZCBiZWdnZWQgZm9yIHRlcm1zLCBoZSB0cmllZCB0byBtYWtlIGhpbSwgaW5zdGVhZCBvZiBhIHR5cmFudCwgb25lIHdobyB3b3VsZCBnb3Zlcm4gdGhlIFRoZXNzYWxpYW5zIG1pbGRseSBhbmQgYWNjb3JkaW5nIHRvIGxhdy4gQnV0IHNpbmNlIHRoZSBtYW4gd2FzIGluY3VyYWJseSBicnV0aXNoIGFuZCBmdWxsIG9mIHNhdmFnZW5lc3MsIGFuZCBzaW5jZSB0aGVyZSB3YXMgbXVjaCBkZW51bmNpYXRpb24gb2YgaGlzIGxpY2VudGlvdXNuZXNzIGFuZCBncmVlZCwgUGVsb3BpZGFzIGJlY2FtZSBoYXJzaCBhbmQgc2V2ZXJlIHdpdGggaGltLCB3aGVyZXVwb24gaGUgcmFuIGF3YXkgd2l0aCBoaXMgZ3VhcmRzLiAgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBQZWxvcGlkYXMsIGxlYXZpbmcgdGhlIFRoZXNzYWxpYW5zIGluIGdyZWF0IHNlY3VyaXR5IGZyb20gdGhlIHR5cmFudCBhbmQgaW4gY29uY29yZCB3aXRoIG9uZSBhbm90aGVyLCBzZXQgb3V0IGhpbXNlbGYgZm9yIE1hY2Vkb25pYSwgd2hlcmUgUHRvbGVteSB3YXMgYXQgd2FyIHdpdGggQWxleGFuZGVyIHRoZSBraW5nIG9mIHRoZSBNYWNlZG9uaWFucy4gICBGb3IgYm90aCBwYXJ0aWVzIGhhZCBpbnZpdGVkIGhpbSB0byBjb21lIGFuZCBiZSBhcmJpdGVyIGFuZCBqdWRnZSBiZXR3ZWVuIHRoZW0sIGFuZCBhbGx5IGFuZCBoZWxwZXIgb2YgdGhlIG9uZSB0aGF0IGFwcGVhcmVkIHRvIGJlIHdyb25nZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBjb21lLCB0aGVuLCBhbmQgaGFkIHNldHRsZWQgdGhlaXIgZGlmZmVyZW5jZXMgYW5kIGJyb3VnaHQgaG9tZSB0aGUgZXhpbGVzLCBoZSByZWNlaXZlZCBhcyBob3N0YWdlcyBQaGlsaXAsIHRoZSBraW5nJ3MgYnJvdGhlciwgYW5kIHRoaXJ0eSBvdGhlciBzb25zIG9mIHRoZSBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgYW5kIGJyb3VnaHQgdGhlbSB0byBsaXZlIGF0IFRoZWJlcywgdGh1cyBzaG93aW5nICAgdGhlIEdyZWVrcyB3aGF0IGFuIGFkdmFuY2UgdGhlIFRoZWJhbiBzdGF0ZSBoYWQgbWFkZSBpbiB0aGUgcmVzcGVjdCBwYWlkIHRvIGl0cyBwb3dlciBhbmQgdGhlIHRydXN0IHBsYWNlZCBpbiBpdHMganVzdGljZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSBBbGV4YW5kZXIgdGhlIHR5cmFudCBvZiBQaGVyYWUgbWFkZSBvcGVuIHdhciBvbiBtYW55IG9mIHRoZSBUaGVzc2FsaWFucywgYW5kIHdhcyBwbG90dGluZyBhZ2FpbnN0IHRoZW0gYWxsLCB0aGVpciBjaXRpZXMgc2VudCBhbWJhc3NhZG9ycyB0byBUaGViZXMgYXNraW5nIGZvciBhbiBhcm1lZCBmb3JjZSBhbmQgYSBnZW5lcmFsLiAgUGVsb3BpZGFzLCB0aGVyZWZvcmUsIHNlZWluZyB0aGF0IEVwYW1pbm9uZGFzIHdhcyBidXN5IHdpdGggaGlzIHdvcmsgaW4gUGVsb3Bvbm5lc3VzLCBvZmZlcmVkIGFuZCBhc3NpZ25lZCBoaW1zZWxmIHRvIHRoZSBUaGVzc2FsaWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2OSBCLkMuPC9ub3RlPiBib3RoIGJlY2F1c2UgaGUgY291bGQgbm90IHN1ZmZlciBoaXMgb3duIHNraWxsIGFuZCBhYmlsaXR5IHRvIGxpZSBpZGxlLCBhbmQgYmVjYXVzZSBoZSB0aG91Z2h0IHRoYXQgd2hlcmV2ZXIgRXBhbWlub25kYXMgd2FzIHRoZXJlIHdhcyBubyBuZWVkIG9mIGEgc2Vjb25kIGdlbmVyYWwuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBtYXJjaGluZyBpbnRvIFRoZXNzYWx5IHdpdGggYW4gYXJtZWQgZm9yY2UsIGhlIHN0cmFpZ2h0d2F5IHRvb2sgTGFyaXNzYSwgYW5kIHdoZW4gQWxleGFuZGVyIGNhbWUgdG8gaGltIGFuZCBiZWdnZWQgZm9yIHRlcm1zLCBoZSB0cmllZCB0byBtYWtlIGhpbSwgaW5zdGVhZCBvZiBhIHR5cmFudCwgb25lIHdobyB3b3VsZCBnb3Zlcm4gdGhlIFRoZXNzYWxpYW5zIG1pbGRseSBhbmQgYWNjb3JkaW5nIHRvIGxhdy4gQnV0IHNpbmNlIHRoZSBtYW4gd2FzIGluY3VyYWJseSBicnV0aXNoIGFuZCBmdWxsIG9mIHNhdmFnZW5lc3MsIGFuZCBzaW5jZSB0aGVyZSB3YXMgbXVjaCBkZW51bmNpYXRpb24gb2YgaGlzIGxpY2VudGlvdXNuZXNzIGFuZCBncmVlZCwgUGVsb3BpZGFzIGJlY2FtZSBoYXJzaCBhbmQgc2V2ZXJlIHdpdGggaGltLCB3aGVyZXVwb24gaGUgcmFuIGF3YXkgd2l0aCBoaXMgZ3VhcmRzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUGVsb3BpZGFzLCBsZWF2aW5nIHRoZSBUaGVzc2FsaWFucyBpbiBncmVhdCBzZWN1cml0eSBmcm9tIHRoZSB0eXJhbnQgYW5kIGluIGNvbmNvcmQgd2l0aCBvbmUgYW5vdGhlciwgc2V0IG91dCBoaW1zZWxmIGZvciBNYWNlZG9uaWEsIHdoZXJlIFB0b2xlbXkgd2FzIGF0IHdhciB3aXRoIEFsZXhhbmRlciB0aGUga2luZyBvZiB0aGUgTWFjZWRvbmlhbnMuICAgRm9yIGJvdGggcGFydGllcyBoYWQgaW52aXRlZCBoaW0gdG8gY29tZSBhbmQgYmUgYXJiaXRlciBhbmQganVkZ2UgYmV0d2VlbiB0aGVtLCBhbmQgYWxseSBhbmQgaGVscGVyIG9mIHRoZSBvbmUgdGhhdCBhcHBlYXJlZCB0byBiZSB3cm9uZ2VkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBjb21lLCB0aGVuLCBhbmQgaGFkIHNldHRsZWQgdGhlaXIgZGlmZmVyZW5jZXMgYW5kIGJyb3VnaHQgaG9tZSB0aGUgZXhpbGVzLCBoZSByZWNlaXZlZCBhcyBob3N0YWdlcyBQaGlsaXAsIHRoZSBraW5nJ3MgYnJvdGhlciwgYW5kIHRoaXJ0eSBvdGhlciBzb25zIG9mIHRoZSBtb3N0IGlsbHVzdHJpb3VzIG1lbiwgYW5kIGJyb3VnaHQgdGhlbSB0byBsaXZlIGF0IFRoZWJlcywgdGh1cyBzaG93aW5nICAgdGhlIEdyZWVrcyB3aGF0IGFuIGFkdmFuY2UgdGhlIFRoZWJhbiBzdGF0ZSBoYWQgbWFkZSBpbiB0aGUgcmVzcGVjdCBwYWlkIHRvIGl0cyBwb3dlciBhbmQgdGhlIHRydXN0IHBsYWNlZCBpbiBpdHMganVzdGljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGlzIHdhcyB0aGUgUGhpbGlwIHdobyBhZnRlcndhcmRzIHdhZ2VkIHdhciB0byBlbnNsYXZlIHRoZSBHcmVla3MsIGJ1dCBhdCB0aGlzIHRpbWUgaGUgd2FzIGEgYm95IGFuZCBsaXZlZCBpbiBUaGViZXMgd2l0aCBQYW1tZW5lcy4gSGVuY2UgaGUgd2FzIGJlbGlldmVkIHRvIGhhdmUgYmVjb21lIGEgemVhbG91cyBmb2xsb3dlciBvZiBFcGFtaW5vbmRhcywgcGVyaGFwcyBiZWNhdXNlIGhlIGNvbXByZWhlbmRlZCBoaXMgZWZmaWNpZW5jeSBpbiB3YXJzIGFuZCBjYW1wYWlnbnMsIHdoaWNoIHdhcyBvbmx5IGEgc21hbGwgcGFydCBvZiB0aGUgbWFuJ3MgaGlnaCBleGNlbGxlbmNlOyBidXQgaW4gcmVzdHJhaW50LCAganVzdGljZSwgbWFnbmFuaW1pdHksICBhbmQgIGdlbnRsZW5lc3MsIHdoZXJlaW4gRXBhbWlub25kYXMgd2FzIHRydWx5IGdyZWF0LCBQaGlsaXAgaGFkIG5vIHNoYXJlLCBlaXRoZXIgbmF0dXJhbGx5IG9yIGFzIGEgcmVzdWx0IG9mIGltaXRhdGlvbi4KCQkJPC9wPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB3aGVuIHRoZSBUaGVzc2FsaWFucyBhZ2FpbiBicm91Z2h0IGNvbXBsYWludCBhZ2FpbnN0IEFsZXhhbmRlciBvZiBQaGVyYWUgYXMgYSBkaXN0dXJiZXIgb2YgdGhlaXIgY2l0aWVzLCBQZWxvcGlkYXMgd2FzIHNlbnQgdGhpdGhlciBvbiBhbiBlbWJhc3N5IHdpdGggSXNtZW5pYXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY4IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoZSBicm91Z2h0IG5vIGZvcmNlIGZyb20gaG9tZSB3aXRoIGhpbSwgYW5kIGRpZCBub3QgZXhwZWN0IHdhciwgaGUgd2FzIGNvbXBlbGxlZCB0byBlbXBsb3kgdGhlIFRoZXNzYWxpYW5zIHRoZW1zZWx2ZXMgZm9yIHRoZSBlbWVyZ2VuY3kuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdG9vLCBNYWNlZG9uaWFuICAgIGFmZmFpcnMgd2VyZSAgaW4gY29uZnVzaW9uIGFnYWluLCBmb3IgUHRvbGVteSBoYWQga2lsbGVkIHRoZSBraW5nIGFuZCBub3cgaGVsZCB0aGUgcmVpbnMgb2YgZ292ZXJubWVudCwgYW5kIHRoZSBmcmllbmRzIG9mIHRoZSBkZWFkIGtpbmcgd2VyZSBjYWxsaW5nIHVwb24gUGVsb3BpZGFzLiAgIFdpc2hpbmcsIHRoZXJlZm9yZSwgdG8gYXBwZWFyIHVwb24gdGhlIHNjZW5lLCBidXQgaGF2aW5nIG5vIHNvbGRpZXJzIG9mIGhpcyBvd24sIGhlIGVubGlzdGVkIHNvbWUgbWVyY2VuYXJpZXMgb24gdGhlIHNwb3QsIGFuZCB3aXRoIHRoZXNlIG1hcmNoZWQgYXQgb25jZSBhZ2FpbnN0IFB0b2xlbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZXkgd2VyZSBuZWFyIGVhY2ggb3RoZXIsIFB0b2xlbXkgY29ycnVwdGVkIHRoZSBtZXJjZW5hcmllcyBhbmQgYnJpYmVkIHRoZW0gdG8gY29tZSBvdmVyIHRvIGhpcyBzaWRlOyBidXQgc2luY2UgaGUgZmVhcmVkIHRoZSB2ZXJ5IG5hbWUgYW5kIHJlcHV0YXRpb24gb2YgUGVsb3BpZGFzLCBoZSBtZXQgaGltIGFzIGhpcyBzdXBlcmlvciwgYW5kIGFmdGVyIHdlbGNvbWluZyBoaW0gYW5kIHN1cHBsaWNhdGluZyBoaXMgZmF2b3VyLCBhZ3JlZWQgdG8gYmUgcmVnZW50IGZvciB0aGUgYnJvdGhlcnMgb2YgdGhlIGRlYWQga2luZywgYW5kIHRvIG1ha2UgYW4gYWxsaWFuY2Ugd2l0aCB0aGUgVGhlYmFuczsgbW9yZW92ZXIsIHRvIGNvbmZpcm0gdGhpcywgaGUgZ2F2ZSBoaW0gaGlzIHNvbiBQaGlsb3hlbnVzIGFuZCBmaWZ0eSBvZiBoaXMgY29tcGFuaW9ucyBhcyBob3N0YWdlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UsIHRoZW4sIFBlbG9waWRhcyBzZW50IG9mZiB0byBUaGViZXM7IGJ1dCBoZSBoaW1zZWxmLCBiZWluZyBpbmRpZ25hbnQgYXQgdGhlIHRyZWFjaGVyeSBvZiBoaXMgbWVyY2VuYXJpZXMsIGFuZCBsZWFybmluZyB0aGF0IG1vc3Qgb2YgdGhlaXIgZ29vZHMsIHRvZ2V0aGVyIHdpdGggdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBoYWQgYmVlbiBwbGFjZWQgZm9yIHNhZmV0eSBhdCBQaGFyc2FsdXMsIHNvIHRoYXQgYnkgZ2V0dGluZyB0aGVzZSBpbnRvIGhpcyBwb3dlciBoZSB3b3VsZCBzdWZmaWNpZW50bHkgcHVuaXNoIHRoZW0gZm9yIHRoZWlyIGFmZnJvbnQgdG8gaGltLCBoZSBnb3QgdG9nZXRoZXIgc29tZSBvZiB0aGUgVGhlc3NhbGlhbnMgYW5kIGNhbWUgdG8gUGhhcnNhbHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQganVzdCBhcyBoZSBnb3QgdGhlcmUsIEFsZXhhbmRlciB0aGUgdHlyYW50IGFwcGVhcmVkIGJlZm9yZSB0aGUgY2l0eSB3aXRoIGhpcyBmb3JjZXMuICBUaGVuIFBlbG9waWRhcyBhbmQgSXNtZW5pYXMsIHRoaW5raW5nIHRoYXQgaGUgd2FzIGNvbWUgdG8gZXhjdXNlIGhpbXNlbGYgZm9yIGhpcyBjb25kdWN0LCB3ZW50IG9mIHRoZWlyIG93biBhY2NvcmQgdG8gaGltLCBrbm93aW5nLCBpbmRlZWQsIHRoYXQgaGUgd2FzIGFuIGFiYW5kb25lZCBhbmQgYmxvb2Qtc3RhaW5lZCB3cmV0Y2gsIGJ1dCBleHBlY3RpbmcgdGhhdCBiZWNhdXNlIG9mIFRoZWJlcyBhbmQgdGhlaXIgb3duIGRpZ25pdHkgYW5kIHJlcHV0YXRpb24gdGhleSB3b3VsZCBzdWZmZXIgbm8gaGFybS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSB0eXJhbnQsIHdoZW4gaGUgc2F3IHRoZW0gY29taW5nIHVwICB1bmFybWVkICAgYW5kICB1bmF0dGVuZGVkLCBzdHJhaWdodHdheSBzZWl6ZWQgdGhlbSBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIFBoYXJzYWx1cy4gIEJ5IHRoaXMgc3RlcCBoZSBhd29rZSBpbiBhbGwgaGlzIHN1YmplY3RzIGEgc2h1ZGRlcmluZyBmZWFyOyB0aGV5IHRob3VnaHQgdGhhdCBhZnRlciBhbiBhY3Qgb2Ygc3VjaCBib2xkbmVzcyBhbmQgaW5pcXVpdHkgaGUgd291bGQgc3BhcmUgbm9ib2R5LCBhbmQgaW4gYWxsIGhpcyBkZWFsaW5ncyB3aXRoIG1lbiBhbmQgYWZmYWlycyB3b3VsZCBhY3QgYXMgb25lIHdobyBub3cgdXR0ZXJseSBkZXNwYWlyZWQgb2YgaGlzIG93biBsaWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbiB0aGUgVGhlc3NhbGlhbnMgYWdhaW4gYnJvdWdodCBjb21wbGFpbnQgYWdhaW5zdCBBbGV4YW5kZXIgb2YgUGhlcmFlIGFzIGEgZGlzdHVyYmVyIG9mIHRoZWlyIGNpdGllcywgUGVsb3BpZGFzIHdhcyBzZW50IHRoaXRoZXIgb24gYW4gZW1iYXNzeSB3aXRoIElzbWVuaWFzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY4IEIuQy48L25vdGU+IGFuZCBzaW5jZSBoZSBicm91Z2h0IG5vIGZvcmNlIGZyb20gaG9tZSB3aXRoIGhpbSwgYW5kIGRpZCBub3QgZXhwZWN0IHdhciwgaGUgd2FzIGNvbXBlbGxlZCB0byBlbXBsb3kgdGhlIFRoZXNzYWxpYW5zIHRoZW1zZWx2ZXMgZm9yIHRoZSBlbWVyZ2VuY3kuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdG9vLCBNYWNlZG9uaWFuICAgIGFmZmFpcnMgd2VyZSAgaW4gY29uZnVzaW9uIGFnYWluLCBmb3IgUHRvbGVteSBoYWQga2lsbGVkIHRoZSBraW5nIGFuZCBub3cgaGVsZCB0aGUgcmVpbnMgb2YgZ292ZXJubWVudCwgYW5kIHRoZSBmcmllbmRzIG9mIHRoZSBkZWFkIGtpbmcgd2VyZSBjYWxsaW5nIHVwb24gUGVsb3BpZGFzLiAgIFdpc2hpbmcsIHRoZXJlZm9yZSwgdG8gYXBwZWFyIHVwb24gdGhlIHNjZW5lLCBidXQgaGF2aW5nIG5vIHNvbGRpZXJzIG9mIGhpcyBvd24sIGhlIGVubGlzdGVkIHNvbWUgbWVyY2VuYXJpZXMgb24gdGhlIHNwb3QsIGFuZCB3aXRoIHRoZXNlIG1hcmNoZWQgYXQgb25jZSBhZ2FpbnN0IFB0b2xlbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZXkgd2VyZSBuZWFyIGVhY2ggb3RoZXIsIFB0b2xlbXkgY29ycnVwdGVkIHRoZSBtZXJjZW5hcmllcyBhbmQgYnJpYmVkIHRoZW0gdG8gY29tZSBvdmVyIHRvIGhpcyBzaWRlOyBidXQgc2luY2UgaGUgZmVhcmVkIHRoZSB2ZXJ5IG5hbWUgYW5kIHJlcHV0YXRpb24gb2YgUGVsb3BpZGFzLCBoZSBtZXQgaGltIGFzIGhpcyBzdXBlcmlvciwgYW5kIGFmdGVyIHdlbGNvbWluZyBoaW0gYW5kIHN1cHBsaWNhdGluZyBoaXMgZmF2b3VyLCBhZ3JlZWQgdG8gYmUgcmVnZW50IGZvciB0aGUgYnJvdGhlcnMgb2YgdGhlIGRlYWQga2luZywgYW5kIHRvIG1ha2UgYW4gYWxsaWFuY2Ugd2l0aCB0aGUgVGhlYmFuczsgbW9yZW92ZXIsIHRvIGNvbmZpcm0gdGhpcywgaGUgZ2F2ZSBoaW0gaGlzIHNvbiBQaGlsb3hlbnVzIGFuZCBmaWZ0eSBvZiBoaXMgY29tcGFuaW9ucyBhcyBob3N0YWdlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCB0aGVuLCBQZWxvcGlkYXMgc2VudCBvZmYgdG8gVGhlYmVzOyBidXQgaGUgaGltc2VsZiwgYmVpbmcgaW5kaWduYW50IGF0IHRoZSB0cmVhY2hlcnkgb2YgaGlzIG1lcmNlbmFyaWVzLCBhbmQgbGVhcm5pbmcgdGhhdCBtb3N0IG9mIHRoZWlyIGdvb2RzLCB0b2dldGhlciB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgaGFkIGJlZW4gcGxhY2VkIGZvciBzYWZldHkgYXQgUGhhcnNhbHVzLCBzbyB0aGF0IGJ5IGdldHRpbmcgdGhlc2UgaW50byBoaXMgcG93ZXIgaGUgd291bGQgc3VmZmljaWVudGx5IHB1bmlzaCB0aGVtIGZvciB0aGVpciBhZmZyb250IHRvIGhpbSwgaGUgZ290IHRvZ2V0aGVyIHNvbWUgb2YgdGhlIFRoZXNzYWxpYW5zIGFuZCBjYW1lIHRvIFBoYXJzYWx1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIGhlIGdvdCB0aGVyZSwgQWxleGFuZGVyIHRoZSB0eXJhbnQgYXBwZWFyZWQgYmVmb3JlIHRoZSBjaXR5IHdpdGggaGlzIGZvcmNlcy4gIFRoZW4gUGVsb3BpZGFzIGFuZCBJc21lbmlhcywgdGhpbmtpbmcgdGhhdCBoZSB3YXMgY29tZSB0byBleGN1c2UgaGltc2VsZiBmb3IgaGlzIGNvbmR1Y3QsIHdlbnQgb2YgdGhlaXIgb3duIGFjY29yZCB0byBoaW0sIGtub3dpbmcsIGluZGVlZCwgdGhhdCBoZSB3YXMgYW4gYWJhbmRvbmVkIGFuZCBibG9vZC1zdGFpbmVkIHdyZXRjaCwgYnV0IGV4cGVjdGluZyB0aGF0IGJlY2F1c2Ugb2YgVGhlYmVzIGFuZCB0aGVpciBvd24gZGlnbml0eSBhbmQgcmVwdXRhdGlvbiB0aGV5IHdvdWxkIHN1ZmZlciBubyBoYXJtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdHlyYW50LCB3aGVuIGhlIHNhdyB0aGVtIGNvbWluZyB1cCAgdW5hcm1lZCAgIGFuZCAgdW5hdHRlbmRlZCwgc3RyYWlnaHR3YXkgc2VpemVkIHRoZW0gYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiBQaGFyc2FsdXMuICBCeSB0aGlzIHN0ZXAgaGUgYXdva2UgaW4gYWxsIGhpcyBzdWJqZWN0cyBhIHNodWRkZXJpbmcgZmVhcjsgdGhleSB0aG91Z2h0IHRoYXQgYWZ0ZXIgYW4gYWN0IG9mIHN1Y2ggYm9sZG5lc3MgYW5kIGluaXF1aXR5IGhlIHdvdWxkIHNwYXJlIG5vYm9keSwgYW5kIGluIGFsbCBoaXMgZGVhbGluZ3Mgd2l0aCBtZW4gYW5kIGFmZmFpcnMgd291bGQgYWN0IGFzIG9uZSB3aG8gbm93IHV0dGVybHkgZGVzcGFpcmVkIG9mIGhpcyBvd24gbGlmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRoZWJhbnMsIHRoZW4sIG9uIGhlYXJpbmcgb2YgdGhpcywgd2VyZSBpbmRpZ25hbnQsIGFuZCBzZW50IG91dCBhbiBhcm15IGF0IG9uY2UsIGFsdGhvdWdoLCBzaW5jZSBFcGFtaW5vbmRhcyBoYWQgc29tZWhvdyBpbmN1cnJlZCB0aGVpciBkaXNwbGVhc3VyZSwgdGhleSBhcHBvaW50ZWQgb3RoZXIgY29tbWFuZGVycyBmb3IgaXQuIEFzIGZvciBQZWxvcGlkYXMsIGFmdGVyIHRoZSB0eXJhbnQgaGFkIGJyb3VnaHQgaGltIGJhY2sgdG8gUGhlcmFlLCBhdCBmaXJzdCBoZSBzdWZmZXJlZCBhbGwgd2hvIGRlc2lyZWQgaXQgdG8gY29udmVyc2Ugd2l0aCBoaW0sIHRoaW5raW5nIHRoYXQgaGlzIGNhbGFtaXR5IGhhZCBtYWRlIGhpbSBhIHBpdGlmdWwgYW5kIGNvbnRlbXB0aWJsZSBvYmplY3Q7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIFBlbG9waWRhcyBleGhvcnRlZCB0aGUgbGFtZW50aW5nIFBoZXJhZWFucyB0byBiZSBvZiBnb29kIGNoZWVyLCBzaW5jZSBub3cgY2VydGFpbmx5IHRoZSB0eXJhbnQgd291bGQgbWVldCB3aXRoIHB1bmlzaG1lbnQsIGFuZCB3aGVuIGhlIHNlbnQgYSBtZXNzYWdlIHRvIHRoZSB0eXJhbnQgaGltc2VsZiwgc2F5aW5nIHRoYXQgaXQgd2FzIGFic3VyZCB0byB0b3J0dXJlIGFuZCBzbGF5IHRoZSB3cmV0Y2hlZCBhbmQgaW5ub2NlbnQgY2l0aXplbnMgZGF5IGJ5IGRheSwgd2hpbGUgaGUgc3BhcmVkIGhpbSwgYSBtYW4gbW9zdCBjZXJ0YWluLCBhcyBoZSBrbmV3LCB0byB0YWtlIHZlbmdlYW5jZSBvbiBoaW0gaWYgaGUgbWFkZSBoaXMgZXNjYXBlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIHRoZSB0eXJhbnQsIGFtYXplZCBhdCBoaXMgaGlnaCBzcGlyaXQgYW5kIGhpcyBmZWFybGVzc25lc3MsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHdoeSBpcyBQZWxvcGlkYXMgaW4gaGFzdGUgdG8gZGllPzwvcT4gIFRvIHdoaWNoIFBlbG9waWRhcyByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgdGhvdSBtYXllc3QgdGhlIHNvb25lciBwZXJpc2gsIGJ5IGJlY29taW5nIG1vcmUgaGF0ZWZ1bCB0byB0aGUgZ29kcyB0aGFuIG5vdy48L3E+IEZyb20gdGhhdCB0aW1lIHRoZSB0eXJhbnQgZm9yYmFkZSB0aG9zZSBvdXRzaWRlIG9mIGhpcyBmb2xsb3dpbmcgdG8gc2VlIHRoZSBwcmlzb25lci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRoZWJhbnMsIHRoZW4sIG9uIGhlYXJpbmcgb2YgdGhpcywgd2VyZSBpbmRpZ25hbnQsIGFuZCBzZW50IG91dCBhbiBhcm15IGF0IG9uY2UsIGFsdGhvdWdoLCBzaW5jZSBFcGFtaW5vbmRhcyBoYWQgc29tZWhvdyBpbmN1cnJlZCB0aGVpciBkaXNwbGVhc3VyZSwgdGhleSBhcHBvaW50ZWQgb3RoZXIgY29tbWFuZGVycyBmb3IgaXQuIEFzIGZvciBQZWxvcGlkYXMsIGFmdGVyIHRoZSB0eXJhbnQgaGFkIGJyb3VnaHQgaGltIGJhY2sgdG8gUGhlcmFlLCBhdCBmaXJzdCBoZSBzdWZmZXJlZCBhbGwgd2hvIGRlc2lyZWQgaXQgdG8gY29udmVyc2Ugd2l0aCBoaW0sIHRoaW5raW5nIHRoYXQgaGlzIGNhbGFtaXR5IGhhZCBtYWRlIGhpbSBhIHBpdGlmdWwgYW5kIGNvbnRlbXB0aWJsZSBvYmplY3Q7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGVuIFBlbG9waWRhcyBleGhvcnRlZCB0aGUgbGFtZW50aW5nIFBoZXJhZWFucyB0byBiZSBvZiBnb29kIGNoZWVyLCBzaW5jZSBub3cgY2VydGFpbmx5IHRoZSB0eXJhbnQgd291bGQgbWVldCB3aXRoIHB1bmlzaG1lbnQsIGFuZCB3aGVuIGhlIHNlbnQgYSBtZXNzYWdlIHRvIHRoZSB0eXJhbnQgaGltc2VsZiwgc2F5aW5nIHRoYXQgaXQgd2FzIGFic3VyZCB0byB0b3J0dXJlIGFuZCBzbGF5IHRoZSB3cmV0Y2hlZCBhbmQgaW5ub2NlbnQgY2l0aXplbnMgZGF5IGJ5IGRheSwgd2hpbGUgaGUgc3BhcmVkIGhpbSwgYSBtYW4gbW9zdCBjZXJ0YWluLCBhcyBoZSBrbmV3LCB0byB0YWtlIHZlbmdlYW5jZSBvbiBoaW0gaWYgaGUgbWFkZSBoaXMgZXNjYXBlOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZW4gdGhlIHR5cmFudCwgYW1hemVkIGF0IGhpcyBoaWdoIHNwaXJpdCBhbmQgaGlzIGZlYXJsZXNzbmVzcywgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB3aHkgaXMgUGVsb3BpZGFzIGluIGhhc3RlIHRvIGRpZT88L3E+ICBUbyB3aGljaCBQZWxvcGlkYXMgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgdGhvdSBtYXllc3QgdGhlIHNvb25lciBwZXJpc2gsIGJ5IGJlY29taW5nIG1vcmUgaGF0ZWZ1bCB0byB0aGUgZ29kcyB0aGFuIG5vdy48L3E+IEZyb20gdGhhdCB0aW1lIHRoZSB0eXJhbnQgZm9yYmFkZSB0aG9zZSBvdXRzaWRlIG9mIGhpcyBmb2xsb3dpbmcgdG8gc2VlIHRoZSBwcmlzb25lci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgVGhlYmUsIHdobyB3YXMgYSBkYXVnaHRlciBvZiBKYXNvbiwgYW5kIEFsZXhhbmRlcidzIHdpZmUsIGxlYXJuZWQgZnJvbSB0aGUga2VlcGVycyBvZiBQZWxvcGlkYXMgaG93IGNvdXJhZ2VvdXMgYW5kIG5vYmxlIHRoZSBtYW4gd2FzLCBhbmQgY29uY2VpdmVkIGEgZGVzaXJlIHRvIHNlZSBoaW0gYW5kIHRhbGsgd2l0aCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gc2hlIGNhbWUgdG8gaGltLCB3b21hbiB0aGF0IHNoZSB3YXMsIHNoZSBjb3VsZCBub3QgYXQgb25jZSByZWNvZ25pemUgdGhlIGdyZWF0bmVzcyBvZiBoaXMgbmF0dXJlIGluIHN1Y2ggZGlyZSBtaXNmb3J0dW5lLCBidXQganVkZ2luZyBmcm9tIGhpcyBoYWlyIGFuZCBnYXJiIGFuZCBtYWludGVuYW5jZSB0aGF0IGhlIHdhcyBzdWZmZXJpbmcgaW5kaWduaXRpZXMgd2hpY2ggaWxsIGJlZml0dGVkIGEgbWFuIG9mIGhpcyByZXB1dGF0aW9uLCBzaGUgYnVyc3QgaW50byB0ZWFycy4gIFBlbG9waWRhcywgbm90IGtub3dpbmcgYXQgZmlyc3Qgd2hhdCBtYW5uZXIgb2Ygd29tYW4gc2hlIHdhcywgd2FzIGFtYXplZDsgYnV0IHdoZW4gaGUgdW5kZXJzdG9vZCBoZSBhZGRyZXNzZWQgaGVyIGFzIGRhdWdodGVyIG9mIEphc29uOyBmb3IgaGVyIGZhdGhlciB3YXMgYSBmYW1pbGlhciBmcmllbmQgb2YgaGlzLiBBbmQgd2hlbiBzaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHBpdHkgdGh5IHdpZmUsPC9xPiBoZSByZXBsaWVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCBJIHRoZWUsIGluIHRoYXQgdGhvdSB3ZWFyZXN0IG5vIGNoYWlucywgYW5kIHlldCBlbmR1cmVzdCBBbGV4YW5kZXIuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3BlZWNoIGRlZXBseSBtb3ZlZCB0aGUgd29tYW4sIGZvciBzaGUgd2FzIG9wcHJlc3NlZCBieSB0aGUgc2F2YWdlIGluc29sZW5jZSBvZiB0aGUgdHlyYW50LCB3aG8sIGluIGFkZGl0aW9uIHRvIGhpcyBvdGhlciBkZWJhdWNoZXJpZXMsIGhhZCBtYWRlIGhlciB5b3VuZ2VzdCBicm90aGVyIGhpcyBwYXJhbW91ci4gIFRoZXJlZm9yZSBoZXIgY29udGludWVkIHZpc2l0cyB0byBQZWxvcGlkYXMsIGluIHdoaWNoIHNoZSBzcG9rZSBmcmVlbHkgb2YgaGVyIHN1ZmZlcmluZ3MsIGdyYWR1YWxseSBmaWxsZWQgaGVyIHdpdGggd3JhdGggYW5kIGZpZXJjZSBoYXRyZWQgdG93YXJkcyBBbGV4YW5kZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHNoZSBjYW1lIHRvIGhpbSwgd29tYW4gdGhhdCBzaGUgd2FzLCBzaGUgY291bGQgbm90IGF0IG9uY2UgcmVjb2duaXplIHRoZSBncmVhdG5lc3Mgb2YgaGlzIG5hdHVyZSBpbiBzdWNoIGRpcmUgbWlzZm9ydHVuZSwgYnV0IGp1ZGdpbmcgZnJvbSBoaXMgaGFpciBhbmQgZ2FyYiBhbmQgbWFpbnRlbmFuY2UgdGhhdCBoZSB3YXMgc3VmZmVyaW5nIGluZGlnbml0aWVzIHdoaWNoIGlsbCBiZWZpdHRlZCBhIG1hbiBvZiBoaXMgcmVwdXRhdGlvbiwgc2hlIGJ1cnN0IGludG8gdGVhcnMuICBQZWxvcGlkYXMsIG5vdCBrbm93aW5nIGF0IGZpcnN0IHdoYXQgbWFubmVyIG9mIHdvbWFuIHNoZSB3YXMsIHdhcyBhbWF6ZWQ7IGJ1dCB3aGVuIGhlIHVuZGVyc3Rvb2QgaGUgYWRkcmVzc2VkIGhlciBhcyBkYXVnaHRlciBvZiBKYXNvbjsgZm9yIGhlciBmYXRoZXIgd2FzIGEgZmFtaWxpYXIgZnJpZW5kIG9mIGhpcy4gQW5kIHdoZW4gc2hlIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHBpdHkgdGh5IHdpZmUsPC9xPiBoZSByZXBsaWVkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIEkgdGhlZSwgaW4gdGhhdCB0aG91IHdlYXJlc3Qgbm8gY2hhaW5zLCBhbmQgeWV0IGVuZHVyZXN0IEFsZXhhbmRlci48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3BlZWNoIGRlZXBseSBtb3ZlZCB0aGUgd29tYW4sIGZvciBzaGUgd2FzIG9wcHJlc3NlZCBieSB0aGUgc2F2YWdlIGluc29sZW5jZSBvZiB0aGUgdHlyYW50LCB3aG8sIGluIGFkZGl0aW9uIHRvIGhpcyBvdGhlciBkZWJhdWNoZXJpZXMsIGhhZCBtYWRlIGhlciB5b3VuZ2VzdCBicm90aGVyIGhpcyBwYXJhbW91ci4gIFRoZXJlZm9yZSBoZXIgY29udGludWVkIHZpc2l0cyB0byBQZWxvcGlkYXMsIGluIHdoaWNoIHNoZSBzcG9rZSBmcmVlbHkgb2YgaGVyIHN1ZmZlcmluZ3MsIGdyYWR1YWxseSBmaWxsZWQgaGVyIHdpdGggd3JhdGggYW5kIGZpZXJjZSBoYXRyZWQgdG93YXJkcyBBbGV4YW5kZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIFRoZWJhbiBnZW5lcmFscyBoYWQgYWNjb21wbGlzaGVkICBub3RoaW5nIGJ5IHRoZWlyIGludmFzaW9uIG9mIFRoZXNzYWx5LCBidXQgb3dpbmcgdG8gaW5leHBlcmllbmNlIG9yIGlsbCBmb3J0dW5lIGhhZCByZXRpcmVkIGRpc2dyYWNlZnVsbHksIHRoZSBjaXR5IGZpbmVkIGVhY2ggb2YgdGhlbSB0ZW4gdGhvdXNhbmQgIGRyYWNobWFzLCAgYW5kICBzZW50IG91dCAgIEVwYW1pbm9uZGFzIHdpdGggYW4gYXJtZWQgZm9yY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzY3IEIuQy48L25vdGU+ICAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIHRoZXJlIHdhcyBhIGdyZWF0IHN0aXIgYW1vbmcgdGhlIFRoZXNzYWxpYW5zLCB3aG8gd2VyZSBmaWxsZWQgd2l0aCBoaWdoIGhvcGVzIGluIHZpZXcgb2YgdGhlIHJlcHV0YXRpb24gb2YgdGhpcyBnZW5lcmFsLCBhbmQgdGhlIGNhdXNlIG9mIHRoZSB0eXJhbnQgd2FzIG9uIHRoZSB2ZXJ5IHZlcmdlIG9mIGRlc3RydWN0aW9uOyBzbyBncmVhdCB3YXMgdGhlIGZlYXIgdGhhdCBmZWxsIHVwb24gaGlzIGNvbW1hbmRlcnMgYW5kIGZyaWVuZHMsIGFuZCBzbyBncmVhdCB0aGUgaW5jbGluYXRpb24gb2YgaGlzIHN1YmplY3RzIHRvIHJldm9sdCwgYW5kIHRoZWlyIGpveSBhdCB3aGF0IHRoZSBmdXR1cmUgaGFkIGluIHN0b3JlLCBmb3IgdGhleSBmZWx0IHRoYXQgbm93IHRoZXkgc2hvdWxkIGJlaG9sZCB0aGUgdHlyYW50IHVuZGVyIHB1bmlzaG1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzLCBob3dldmVyLCBsZXNzIHNvbGljaXRvdXMgZm9yIGhpcyBvd24gZ2xvcnkgdGhhbiBmb3IgdGhlIHNhZmV0eSBvZiBQZWxvcGlkYXMsIGFuZCBmZWFyaW5nIHRoYXQgaWYgY29uZnVzaW9uIHJlaWduZWQgQWxleGFuZGVyIHdvdWxkIGdldCBkZXNwZXJhdGUgYW5kIHR1cm4gbGlrZSBhIHdpbGQgYmVhc3QgdXBvbiBoaXMgcHJpc29uZXIsIGRhbGxpZWQgd2l0aCB0aGUgd2FyLCBhbmQgdGFraW5nIGEgcm91bmRhYm91dCBjb3Vyc2UsIGtlcHQgdGhlIHR5cmFudCBpbiBzdXNwZW5zZSBieSBoaXMgcHJlcGFyYXRpb25zIGFuZCB0aHJlYXRlbmVkIG1vdmVtZW50cywgdGh1cyBuZWl0aGVyIGVuY291cmFnaW5nIGhpcyBhdWRhY2l0eSBhbmQgYm9sZG5lc3MsIG5vciByb3VzaW5nIGhpcyBtYWxpZ25pdHkgYW5kIHBhc3Npb24uICAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaGFkIGxlYXJuZWQgaG93IHNhdmFnZSBoZSB3YXMsIGFuZCBob3cgbGl0dGxlIHJlZ2FyZCBoZSBoYWQgZm9yIHJpZ2h0IGFuZCBqdXN0aWNlLCBpbiB0aGF0IHNvbWV0aW1lcyBoZSBidXJpZWQgbWVuIGFsaXZlLCBhbmQgc29tZXRpbWVzIGRyZXNzZWQgdGhlbSBpbiB0aGUgc2tpbnMgb2Ygd2lsZCBib2FycyBvciBiZWFycywgYW5kIHRoZW4gc2V0IGhpcyBodW50aW5nIGRvZ3MgdXBvbiB0aGVtIGFuZCBlaXRoZXIgdG9yZSB0aGVtIGluIHBpZWNlcyBvciBzaG90IHRoZW0gZG93biwgbWFraW5nIHRoaXMgaGlzIGRpdmVyc2lvbjsgYW5kIGF0IE1lbGlib2VhIGFuZCBTY290dXNzYSwgYWxsaWVkIGFuZCBmcmllbmRseSBjaXRpZXMsIHdoZW4gdGhlIHBlb3BsZSB3ZXJlIGluIGZ1bGwgYXNzZW1ibHksIGhlIHN1cnJvdW5kZWQgdGhlbSB3aXRoIGhpcyBib2R5LWd1YXJkcyBhbmQgc2xhdWdodGVyZWQgdGhlbSBmcm9tICB0aGUgeW91dGggdXA7IGhlIGFsc28gY29uc2VjcmF0ZWQgdGhlIHNwZWFyIHdpdGggd2hpY2ggaGUgaGFkIHNsYWluIGhpcyB1bmNsZSBQb2x5cGhyb24sIGRlY2tlZCBpdCB3aXRoIGdhcmxhbmRzLCBhbmQgc2FjcmlmaWNlZCB0byBpdCBhcyB0byBhIGdvZCwgZ2l2aW5nIGl0IHRoZSBuYW1lIG9mIFR5Y2hvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoYXQgaXMsIDxlbXBoPkx1Y2s8L2VtcGg+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlIHdoZW4gaGUgd2FzIHNlZWluZyBhIHRyYWdlZGlhbiBhY3QgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VHJvamFuIFdvbWVuPC9xPiBvZiBFdXJpcGlkZXMsIGhlIGxlZnQgdGhlIHRoZWF0cmUgYWJydXB0bHksIGFuZCBzZW50IGEgbWVzc2FnZSB0byB0aGUgYWN0b3IgYmlkZGluZyBoaW0gYmUgb2YgZ29vZCBjb3VyYWdlIGFuZCBub3QgcHV0IGZvcnRoIGFueSBsZXNzIGVmZm9ydCBiZWNhdXNlIG9mIGhpcyBkZXBhcnR1cmUsIGZvciBpdCB3YXMgbm90IG91dCBvZiBjb250ZW1wdCBmb3IgaGlzIGFjdGluZyB0aGF0IGhlIGhhZCBnb25lIGF3YXksIGJ1dCBiZWNhdXNlIGhlIHdhcyBhc2hhbWVkIHRvIGhhdmUgdGhlIGNpdGl6ZW5zIHNlZSBoaW0sIHdobyBoYWQgbmV2ZXIgdGFrZW4gcGl0eSBvbiBhbnkgbWFuIHRoYXQgaGUgaGFkIG11cmRlcmVkLCB3ZWVwaW5nIG92ZXIgdGhlIHNvcnJvd3Mgb2YgSGVjdWJhIGFuZCBBbmRyb21hY2hlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgdGhpcyB0eXJhbnQsIGhvd2V2ZXIsIHdobywgdGVycmlmaWVkIGF0IHRoZSAgbmFtZSAgYW5kICBmYW1lICBhbmQgZGlzdGluY3Rpb24gb2YgIHRoZSBnZW5lcmFsc2hpcCBvZiBFcGFtaW5vbmRhcywgCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkNyb3VjaGVkIGRvd24sIHRob3VnaCB3YXJyaW9yIGJpcmQsIGxpa2Ugc2xhdmUsIDwvbD4KCQkJCQkgICAgICAgICAgPGw+d2l0aCBkcm9vcGluZyB3aW5ncyw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlhbWJpYyB0cmltZXRlciBvZiB1bmtub3duIGF1dGhvcnNoaXA7IGNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gNC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsY2liaWFkZXM8L3RpdGxlPiwgaXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQlhbmQgc3BlZWRpbHkgc2VudCBhIGRlcHV0YXRpb24gdG8gaGltIHdoaWNoIHNob3VsZCBleHBsYWluIGhpcyBjb25kdWN0LiAgQnV0IEVwYW1pbm9uZGFzIGNvdWxkIG5vdCBjb25zZW50IHRoYXQgdGhlIFRoZWJhbnMgc2hvdWxkIG1ha2UgcGVhY2UgYW5kIGZyaWVuZHNoaXAgd2l0aCBzdWNoIGEgbWFuOyBoZSBkaWQsIGhvd2V2ZXIsIG1ha2UgYSB0aGlydHkgZGF5cycgdHJ1Y2Ugd2l0aCBoaW0sIGFuZCBhZnRlciByZWNlaXZpbmcgUGVsb3BpZGFzIGFuZCBJc21lbmlhcywgcmV0dXJuZWQgaG9tZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgVGhlYmFuIGdlbmVyYWxzIGhhZCBhY2NvbXBsaXNoZWQgIG5vdGhpbmcgYnkgdGhlaXIgaW52YXNpb24gb2YgVGhlc3NhbHksIGJ1dCBvd2luZyB0byBpbmV4cGVyaWVuY2Ugb3IgaWxsIGZvcnR1bmUgaGFkIHJldGlyZWQgZGlzZ3JhY2VmdWxseSwgdGhlIGNpdHkgZmluZWQgZWFjaCBvZiB0aGVtIHRlbiB0aG91c2FuZCAgZHJhY2htYXMsICBhbmQgIHNlbnQgb3V0ICAgRXBhbWlub25kYXMgd2l0aCBhbiBhcm1lZCBmb3JjZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM2NyBCLkMuPC9ub3RlPiAgCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIHRoZXJlIHdhcyBhIGdyZWF0IHN0aXIgYW1vbmcgdGhlIFRoZXNzYWxpYW5zLCB3aG8gd2VyZSBmaWxsZWQgd2l0aCBoaWdoIGhvcGVzIGluIHZpZXcgb2YgdGhlIHJlcHV0YXRpb24gb2YgdGhpcyBnZW5lcmFsLCBhbmQgdGhlIGNhdXNlIG9mIHRoZSB0eXJhbnQgd2FzIG9uIHRoZSB2ZXJ5IHZlcmdlIG9mIGRlc3RydWN0aW9uOyBzbyBncmVhdCB3YXMgdGhlIGZlYXIgdGhhdCBmZWxsIHVwb24gaGlzIGNvbW1hbmRlcnMgYW5kIGZyaWVuZHMsIGFuZCBzbyBncmVhdCB0aGUgaW5jbGluYXRpb24gb2YgaGlzIHN1YmplY3RzIHRvIHJldm9sdCwgYW5kIHRoZWlyIGpveSBhdCB3aGF0IHRoZSBmdXR1cmUgaGFkIGluIHN0b3JlLCBmb3IgdGhleSBmZWx0IHRoYXQgbm93IHRoZXkgc2hvdWxkIGJlaG9sZCB0aGUgdHlyYW50IHVuZGVyIHB1bmlzaG1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzLCBob3dldmVyLCBsZXNzIHNvbGljaXRvdXMgZm9yIGhpcyBvd24gZ2xvcnkgdGhhbiBmb3IgdGhlIHNhZmV0eSBvZiBQZWxvcGlkYXMsIGFuZCBmZWFyaW5nIHRoYXQgaWYgY29uZnVzaW9uIHJlaWduZWQgQWxleGFuZGVyIHdvdWxkIGdldCBkZXNwZXJhdGUgYW5kIHR1cm4gbGlrZSBhIHdpbGQgYmVhc3QgdXBvbiBoaXMgcHJpc29uZXIsIGRhbGxpZWQgd2l0aCB0aGUgd2FyLCBhbmQgdGFraW5nIGEgcm91bmRhYm91dCBjb3Vyc2UsIGtlcHQgdGhlIHR5cmFudCBpbiBzdXNwZW5zZSBieSBoaXMgcHJlcGFyYXRpb25zIGFuZCB0aHJlYXRlbmVkIG1vdmVtZW50cywgdGh1cyBuZWl0aGVyIGVuY291cmFnaW5nIGhpcyBhdWRhY2l0eSBhbmQgYm9sZG5lc3MsIG5vciByb3VzaW5nIGhpcyBtYWxpZ25pdHkgYW5kIHBhc3Npb24uICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYWQgbGVhcm5lZCBob3cgc2F2YWdlIGhlIHdhcywgYW5kIGhvdyBsaXR0bGUgcmVnYXJkIGhlIGhhZCBmb3IgcmlnaHQgYW5kIGp1c3RpY2UsIGluIHRoYXQgc29tZXRpbWVzIGhlIGJ1cmllZCBtZW4gYWxpdmUsIGFuZCBzb21ldGltZXMgZHJlc3NlZCB0aGVtIGluIHRoZSBza2lucyBvZiB3aWxkIGJvYXJzIG9yIGJlYXJzLCBhbmQgdGhlbiBzZXQgaGlzIGh1bnRpbmcgZG9ncyB1cG9uIHRoZW0gYW5kIGVpdGhlciB0b3JlIHRoZW0gaW4gcGllY2VzIG9yIHNob3QgdGhlbSBkb3duLCBtYWtpbmcgdGhpcyBoaXMgZGl2ZXJzaW9uOyBhbmQgYXQgTWVsaWJvZWEgYW5kIFNjb3R1c3NhLCBhbGxpZWQgYW5kIGZyaWVuZGx5IGNpdGllcywgd2hlbiB0aGUgcGVvcGxlIHdlcmUgaW4gZnVsbCBhc3NlbWJseSwgaGUgc3Vycm91bmRlZCB0aGVtIHdpdGggaGlzIGJvZHktZ3VhcmRzIGFuZCBzbGF1Z2h0ZXJlZCB0aGVtIGZyb20gIHRoZSB5b3V0aCB1cDsgaGUgYWxzbyBjb25zZWNyYXRlZCB0aGUgc3BlYXIgd2l0aCB3aGljaCBoZSBoYWQgc2xhaW4gaGlzIHVuY2xlIFBvbHlwaHJvbiwgZGVja2VkIGl0IHdpdGggZ2FybGFuZHMsIGFuZCBzYWNyaWZpY2VkIHRvIGl0IGFzIHRvIGEgZ29kLCBnaXZpbmcgaXQgdGhlIG5hbWUgb2YgVHljaG8uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGF0IGlzLCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y2s8L2VtcGg+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjazwvZW1waD4uPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uY2Ugd2hlbiBoZSB3YXMgc2VlaW5nIGEgdHJhZ2VkaWFuIGFjdCB0aGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRyb2phbiBXb21lbjwvcT4gb2YgRXVyaXBpZGVzLCBoZSBsZWZ0IHRoZSB0aGVhdHJlIGFicnVwdGx5LCBhbmQgc2VudCBhIG1lc3NhZ2UgdG8gdGhlIGFjdG9yIGJpZGRpbmcgaGltIGJlIG9mIGdvb2QgY291cmFnZSBhbmQgbm90IHB1dCBmb3J0aCBhbnkgbGVzcyBlZmZvcnQgYmVjYXVzZSBvZiBoaXMgZGVwYXJ0dXJlLCBmb3IgaXQgd2FzIG5vdCBvdXQgb2YgY29udGVtcHQgZm9yIGhpcyBhY3RpbmcgdGhhdCBoZSBoYWQgZ29uZSBhd2F5LCBidXQgYmVjYXVzZSBoZSB3YXMgYXNoYW1lZCB0byBoYXZlIHRoZSBjaXRpemVucyBzZWUgaGltLCB3aG8gaGFkIG5ldmVyIHRha2VuIHBpdHkgb24gYW55IG1hbiB0aGF0IGhlIGhhZCBtdXJkZXJlZCwgd2VlcGluZyBvdmVyIHRoZSBzb3Jyb3dzIG9mIEhlY3ViYSBhbmQgQW5kcm9tYWNoZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGlzIHR5cmFudCwgaG93ZXZlciwgd2hvLCB0ZXJyaWZpZWQgYXQgdGhlICBuYW1lICBhbmQgIGZhbWUgIGFuZCBkaXN0aW5jdGlvbiBvZiAgdGhlIGdlbmVyYWxzaGlwIG9mIEVwYW1pbm9uZGFzLCAKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkNyb3VjaGVkIGRvd24sIHRob3VnaCB3YXJyaW9yIGJpcmQsIGxpa2Ugc2xhdmUsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj53aXRoIGRyb29waW5nIHdpbmdzLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Dcm91Y2hlZCBkb3duLCB0aG91Z2ggd2FycmlvciBiaXJkLCBsaWtlIHNsYXZlLCA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+d2l0aCBkcm9vcGluZyB3aW5ncyw8L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaWFtYmljIHRyaW1ldGVyIG9mIHVua25vd24gYXV0aG9yc2hpcDsgY2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDQuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgaXYuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQlhbmQgc3BlZWRpbHkgc2VudCBhIGRlcHV0YXRpb24gdG8gaGltIHdoaWNoIHNob3VsZCBleHBsYWluIGhpcyBjb25kdWN0LiAgQnV0IEVwYW1pbm9uZGFzIGNvdWxkIG5vdCBjb25zZW50IHRoYXQgdGhlIFRoZWJhbnMgc2hvdWxkIG1ha2UgcGVhY2UgYW5kIGZyaWVuZHNoaXAgd2l0aCBzdWNoIGEgbWFuOyBoZSBkaWQsIGhvd2V2ZXIsIG1ha2UgYSB0aGlydHkgZGF5cycgdHJ1Y2Ugd2l0aCBoaW0sIGFuZCBhZnRlciByZWNlaXZpbmcgUGVsb3BpZGFzIGFuZCBJc21lbmlhcywgcmV0dXJuZWQgaG9tZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiA0LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIGl2LiAzLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxjaWJpYWRlczwvdGl0bGU+LCBpdi4gMy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHdoZW4gdGhlIFRoZWJhbnMgbGVhcm5lZCB0aGF0IGFtYmFzc2Fkb3JzIGZyb20gU3BhcnRhIGFuZCBBdGhlbnMgd2VyZSBvbiB0aGVpciB3YXkgdG8gdGhlIEdyZWF0IEtpbmcgdG8gc2VjdXJlIGFuIGFsbGlhbmNlLCB0aGV5IGFsc28gc2VudCBQZWxvcGlkYXMgdGhpdGhlcjsgYW5kIHRoaXMgd2FzIGEgbW9zdCBleGNlbGxlbnQgcGxhbiwgaW4gdmlldyBvZiBoaXMgcmVwdXRhdGlvbi4gIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCBoZSB3ZW50IHVwIHRocm91Z2ggdGhlIHByb3ZpbmNlcyBvZiB0aGUga2luZyBhcyBhIG1hbiBvZiBuYW1lIGFuZCBub3RlOyBmb3IgdGhlIGdsb3J5IG9mIGhpcyBjb25mbGljdHMgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMgaGFkIG5vdCBtYWRlIGl0cyB3YXkgc2xvd2x5IG9yIHRvIGFueSBzbGlnaHQgZXh0ZW50IHRocm91Z2ggQXNpYSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCB3aGVuIG9uY2UgdGhlIHJlcG9ydCBvZiB0aGUgYmF0dGxlIGF0IExldWN0cmEgaGFkIHNwZWQgYWJyb2FkLCBpdCB3YXMgZXZlciBpbmNyZWFzZWQgYnkgdGhlIGFkZGl0aW9uIG9mIHNvbWUgbmV3IHN1Y2Nlc3MsIGFuZCBwcmV2YWlsZWQgdG8gdGhlIGZhcnRoZXN0IHJlY2Vzc2VzIG9mIHRoZSBpbnRlcmlvcjsgYW5kLCBpbiB0aGUgc2Vjb25kIHBsYWNlLCB3aGVuIHRoZSBzYXRyYXBzIGFuZCBnZW5lcmFscyBhbmQgY29tbWFuZGVycyBhdCB0aGUgS2luZydzIGNvdXJ0IGJlaGVsZCBoaW0sIHRoZXkgc3Bva2Ugb2YgaGltIHdpdGggd29uZGVyLCBzYXlpbmcgdGhhdCB0aGlzIHdhcyB0aGUgbWFuIHdobyBoYWQgZXhwZWxsZWQgdGhlIExhY2VkYWVtb25pYW5zIGZyb20gbGFuZCBhbmQgc2VhLCBhbmQgc2h1dCB1cCBiZXR3ZWVuIFRhw79nZXR1cyBhbmQgdGhlIEV1cm90YXMgdGhhdCBTcGFydGEgd2hpY2gsIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSwgdGhyb3VnaCBBZ2VzaWxhw7xzLCBoYWQgdW5kZXJ0YWtlbiBhIHdhciB3aXRoIHRoZSBHcmVhdCBLaW5nIGFuZCB0aGUgUGVyc2lhbnMgZm9yIHRoZSBwb3NzZXNzaW9uIG9mIFN1c2EgYW5kIEVjYmF0YW5hLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHBsZWFzZWQgQXJ0YXhlcnhlcywgb2YgY291cnNlIGFuZCBoZSBhZG1pcmVkIFBlbG9waWRhcyBmb3IgaGlzIGhpZ2ggcmVwdXRhdGlvbiwgYW5kIGxvYWRlZCBoaW0gd2l0aCBob25vdXJzLCBiZWluZyBkZXNpcm91cyB0byBhcHBlYXIgbGF1ZGVkIGFuZCBjb3VydGVkIGJ5IHRoZSBncmVhdGVzdCBtZW4uICBCdXQgd2hlbiBoZSBzYXcgaGltIGZhY2UgdG8gZmFjZSwgYW5kIHVuZGVyc3Rvb2QgaGlzIHByb3Bvc2Fscywgd2hpY2ggd2VyZSBtb3JlIHRydXN0d29ydGh5IHRoYW4gdGhvc2Ugb2YgdGhlIEF0aGVuaWFucywgYW5kIHNpbXBsZXIgdGhhbiB0aG9zZSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHdhcyB5ZXQgbW9yZSBkZWxpZ2h0ZWQgd2l0aCBoaW0sIGFuZCwgd2l0aCBhbGwgdGhlIGFzc3VyYW5jZSBvZiBhIGtpbmcsIG9wZW5seSBzaG93ZWQgdGhlIGVzdGVlbSBpbiB3aGljaCBoZSBoZWxkIGhpbSwgYW5kIGFsbG93ZWQgdGhlIG90aGVyIGFtYmFzc2Fkb3JzIHRvIHNlZSB0aGF0IGhlIG1hZGUgbW9zdCBhY2NvdW50IG9mIGhpbS4gICBBbmQgeWV0IGhlIGlzIHRob3VnaHQgdG8gaGF2ZSBzaG93biBBbnRhbGNpZGFzIHRoZSBMYWNlZGFlbW9uaWFuIG1vcmUgaG9ub3VyIHRoYW4gYW55IG90aGVyIEdyZWVrLCBpbiB0aGF0IGhlIHRvb2sgdGhlIGNoYXBsZXQgd2hpY2ggaGUgaGFkIHdvcm4gYXQgYSBiYW5xdWV0LCBkaXBwZWQgaXQgaW4gcGVyZnVtZSwgYW5kIHNlbnQgaXQgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBQZWxvcGlkYXMsIGluZGVlZCwgaGUgcGFpZCBubyBzdWNoIGRlbGljYXRlIGNvbXBsaW1lbnQsIGJ1dCBoZSBzZW50IGhpbSB0aGUgZ3JlYXRlc3QgYW5kIG1vc3Qgc3BsZW5kaWQgb2YgdGhlIGN1c3RvbWFyeSBnaWZ0cywgYW5kIGdyYW50ZWQgaGltIGhpcyBkZW1hbmRzLCBuYW1lbHksIHRoYXQgdGhlIEdyZWVrcyBzaG91bGQgYmUgaW5kZXBlbmRlbnQsIE1lc3NlbmU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NZXNzZW5lIHdhcyB0aGUgbmV3IGNhcGl0YWwgb2YgTWVzc2VuaWEsIGZvdW5kZWQgb24gdGhlIHNsb3BlcyBvZiBNdC4gSXRob21lIChjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMjQuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eGl2LiA1PC9iaWJsPikgYnkgRXBhbWlub25kYXMsIGluIDM2OSBCLkMuPC9ub3RlPiBpbmhhYml0ZWQsIGFuZCB0aGUgVGhlYmFucyByZWdhcmRlZCBhcyB0aGUga2luZydzIGhlcmVkaXRhcnkgZnJpZW5kcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB3aGVuIHRoZSBUaGViYW5zIGxlYXJuZWQgdGhhdCBhbWJhc3NhZG9ycyBmcm9tIFNwYXJ0YSBhbmQgQXRoZW5zIHdlcmUgb24gdGhlaXIgd2F5IHRvIHRoZSBHcmVhdCBLaW5nIHRvIHNlY3VyZSBhbiBhbGxpYW5jZSwgdGhleSBhbHNvIHNlbnQgUGVsb3BpZGFzIHRoaXRoZXI7IGFuZCB0aGlzIHdhcyBhIG1vc3QgZXhjZWxsZW50IHBsYW4sIGluIHZpZXcgb2YgaGlzIHJlcHV0YXRpb24uICBGb3IsIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgd2VudCB1cCB0aHJvdWdoIHRoZSBwcm92aW5jZXMgb2YgdGhlIGtpbmcgYXMgYSBtYW4gb2YgbmFtZSBhbmQgbm90ZTsgZm9yIHRoZSBnbG9yeSBvZiBoaXMgY29uZmxpY3RzIHdpdGggdGhlIExhY2VkYWVtb25pYW5zIGhhZCBub3QgbWFkZSBpdHMgd2F5IHNsb3dseSBvciB0byBhbnkgc2xpZ2h0IGV4dGVudCB0aHJvdWdoIEFzaWEsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgd2hlbiBvbmNlIHRoZSByZXBvcnQgb2YgdGhlIGJhdHRsZSBhdCBMZXVjdHJhIGhhZCBzcGVkIGFicm9hZCwgaXQgd2FzIGV2ZXIgaW5jcmVhc2VkIGJ5IHRoZSBhZGRpdGlvbiBvZiBzb21lIG5ldyBzdWNjZXNzLCBhbmQgcHJldmFpbGVkIHRvIHRoZSBmYXJ0aGVzdCByZWNlc3NlcyBvZiB0aGUgaW50ZXJpb3I7IGFuZCwgaW4gdGhlIHNlY29uZCBwbGFjZSwgd2hlbiB0aGUgc2F0cmFwcyBhbmQgZ2VuZXJhbHMgYW5kIGNvbW1hbmRlcnMgYXQgdGhlIEtpbmcncyBjb3VydCBiZWhlbGQgaGltLCB0aGV5IHNwb2tlIG9mIGhpbSB3aXRoIHdvbmRlciwgc2F5aW5nIHRoYXQgdGhpcyB3YXMgdGhlIG1hbiB3aG8gaGFkIGV4cGVsbGVkIHRoZSBMYWNlZGFlbW9uaWFucyBmcm9tIGxhbmQgYW5kIHNlYSwgYW5kIHNodXQgdXAgYmV0d2VlbiBUYcO/Z2V0dXMgYW5kIHRoZSBFdXJvdGFzIHRoYXQgU3BhcnRhIHdoaWNoLCBhIGxpdHRsZSB3aGlsZSBiZWZvcmUsIHRocm91Z2ggQWdlc2lsYcO8cywgaGFkIHVuZGVydGFrZW4gYSB3YXIgd2l0aCB0aGUgR3JlYXQgS2luZyBhbmQgdGhlIFBlcnNpYW5zIGZvciB0aGUgcG9zc2Vzc2lvbiBvZiBTdXNhIGFuZCBFY2JhdGFuYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcGxlYXNlZCBBcnRheGVyeGVzLCBvZiBjb3Vyc2UgYW5kIGhlIGFkbWlyZWQgUGVsb3BpZGFzIGZvciBoaXMgaGlnaCByZXB1dGF0aW9uLCBhbmQgbG9hZGVkIGhpbSB3aXRoIGhvbm91cnMsIGJlaW5nIGRlc2lyb3VzIHRvIGFwcGVhciBsYXVkZWQgYW5kIGNvdXJ0ZWQgYnkgdGhlIGdyZWF0ZXN0IG1lbi4gIEJ1dCB3aGVuIGhlIHNhdyBoaW0gZmFjZSB0byBmYWNlLCBhbmQgdW5kZXJzdG9vZCBoaXMgcHJvcG9zYWxzLCB3aGljaCB3ZXJlIG1vcmUgdHJ1c3R3b3J0aHkgdGhhbiB0aG9zZSBvZiB0aGUgQXRoZW5pYW5zLCBhbmQgc2ltcGxlciB0aGFuIHRob3NlIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmhlIHdhcyB5ZXQgbW9yZSBkZWxpZ2h0ZWQgd2l0aCBoaW0sIGFuZCwgd2l0aCBhbGwgdGhlIGFzc3VyYW5jZSBvZiBhIGtpbmcsIG9wZW5seSBzaG93ZWQgdGhlIGVzdGVlbSBpbiB3aGljaCBoZSBoZWxkIGhpbSwgYW5kIGFsbG93ZWQgdGhlIG90aGVyIGFtYmFzc2Fkb3JzIHRvIHNlZSB0aGF0IGhlIG1hZGUgbW9zdCBhY2NvdW50IG9mIGhpbS4gICBBbmQgeWV0IGhlIGlzIHRob3VnaHQgdG8gaGF2ZSBzaG93biBBbnRhbGNpZGFzIHRoZSBMYWNlZGFlbW9uaWFuIG1vcmUgaG9ub3VyIHRoYW4gYW55IG90aGVyIEdyZWVrLCBpbiB0aGF0IGhlIHRvb2sgdGhlIGNoYXBsZXQgd2hpY2ggaGUgaGFkIHdvcm4gYXQgYSBiYW5xdWV0LCBkaXBwZWQgaXQgaW4gcGVyZnVtZSwgYW5kIHNlbnQgaXQgdG8gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIFBlbG9waWRhcywgaW5kZWVkLCBoZSBwYWlkIG5vIHN1Y2ggZGVsaWNhdGUgY29tcGxpbWVudCwgYnV0IGhlIHNlbnQgaGltIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBzcGxlbmRpZCBvZiB0aGUgY3VzdG9tYXJ5IGdpZnRzLCBhbmQgZ3JhbnRlZCBoaW0gaGlzIGRlbWFuZHMsIG5hbWVseSwgdGhhdCB0aGUgR3JlZWtzIHNob3VsZCBiZSBpbmRlcGVuZGVudCwgTWVzc2VuZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWVzc2VuZSB3YXMgdGhlIG5ldyBjYXBpdGFsIG9mIE1lc3NlbmlhLCBmb3VuZGVkIG9uIHRoZSBzbG9wZXMgb2YgTXQuIEl0aG9tZSAoY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMjQuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eGl2LiA1PC9iaWJsPikgYnkgRXBhbWlub25kYXMsIGluIDM2OSBCLkMuPC9ub3RlPiBpbmhhYml0ZWQsIGFuZCB0aGUgVGhlYmFucyByZWdhcmRlZCBhcyB0aGUga2luZydzIGhlcmVkaXRhcnkgZnJpZW5kcy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyNC41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4aXYuIDU8L2JpYmw+KSBieSBFcGFtaW5vbmRhcywgaW4gMzY5IEIuQy48cCBjbGFzcz0idHJhbnNsYXRpb24iPldpdGggdGhlc2UgYW5zd2VycywgYnV0IHdpdGhvdXQgYWNjZXB0aW5nIGFueSBnaWZ0cyBleGNlcHQgc3VjaCBhcyB3ZXJlIG1lcmUgdG9rZW5zIG9mIGtpbmRuZXNzIGFuZCBnb29kd2lsbCwgaGUgc2V0IG91dCBmb3IgaG9tZTsgYW5kIHRoaXMgY29uZHVjdCBvZiBoaXMsIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCB3YXMgdGhlIHVuZG9pbmcgb2YgdGhlIG90aGVyIGFtYmFzc2Fkb3JzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRpbWFnb3JhcywgYXQgYW55IHJhdGUsIHdhcyBjb25kZW1uZWQgYW5kIGV4ZWN1dGVkIGJ5IHRoZSBBdGhlbmlhbnMsIGFuZCBpZiB0aGlzIHdhcyBiZWNhdXNlIG9mIHRoZSBtdWx0aXR1ZGUgb2YgZ2lmdHMgd2hpY2ggaGUgdG9vaywgaXQgd2FzIHJpZ2h0IGFuZCBqdXN0OyBmb3IgaGUgdG9vayBub3Qgb25seSBnb2xkIGFuZCBzaWx2ZXIsIGJ1dCBhbHNvIGFuIGV4cGVuc2l2ZSBjb3VjaCBhbmQgc2xhdmVzIHRvIHNwcmVhZCBpdCwgc2luY2UsIGFzIGhlIHNhaWQsIHRoZSBHcmVla3MgZGlkIG5vdCBrbm93IGhvdzsgYW5kIGJlc2lkZXMsIGVpZ2h0eSBjb3dzIHdpdGggdGhlaXIgY293LWhlcmRzLCBzaW5jZSwgYXMgaGUgc2FpZCwgaGUgd2FudGVkIGNvd3MnIG1pbGsgZm9yIHNvbWUgYWlsbWVudDsgYW5kLCBmaW5hbGx5LCBoZSB3YXMgY2FycmllZCBkb3duIHRvIHRoZSBzZWEgaW4gYSBsaXR0ZXIsIGFuZCBoYWQgYSBwcmVzZW50IG9mIGZvdXIgdGFsZW50cyBmcm9tIHRoZSBLaW5nIHdpdGggd2hpY2ggdG8gcGF5IGhpcyBjYXJyaWVycy4gIEJ1dCBpdCB3YXMgbm90IGhpcyB0YWtpbmcgb2YgZ2lmdHMsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgbW9zdCBleGFzcGVyYXRlZCB0aGUgQXRoZW5pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbnkgcmF0ZSwgRXBpY3JhdGVzLCBoaXMgc2hpZWxkLWJlYXJlciwgb25jZSBjb25mZXNzZWQgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgZ2lmdHMgZnJvbSB0aGUgS2luZywgYW5kIHRhbGtlZCBvZiBwcm9wb3NpbmcgYSBkZWNyZWUgdGhhdCBpbnN0ZWFkIG9mIG5pbmUgYXJjaG9ucywgbmluZSBhbWJhc3NhZG9ycyB0byB0aGUgS2luZyBzaG91bGQgYmUgZWxlY3RlZCBhbm51YWxseSBmcm9tIHRoZSBwb29yIGFuZCBuZWVkeSBjaXRpemVucywgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IHRha2UgaGlzIGdpZnRzIGFuZCBiZSB3ZWFsdGh5IG1lbiwgd2hlcmVhdCB0aGUgcGVvcGxlIG9ubHkgbGF1Z2hlZC4gICBCdXQgdGhleSB3ZXJlIGluY2Vuc2VkIGJlY2F1c2UgdGhlIFRoZWJhbnMgaGFkIHRoaW5ncyBhbGwgdGhlaXIgb3duIHdheSwgbm90IHN0b3BwaW5nIHRvIGNvbnNpZGVyIHRoYXQgdGhlIGZhbWUgb2YgUGVsb3BpZGFzIHdhcyBtb3JlIHBvdGVudCB0aGFuIGFueSBudW1iZXIgb2YgcmhldG9yaWNhbCBkaXNjb3Vyc2VzIHdpdGggYSBtYW4gd2hvIGV2ZXIgcGFpZCBkZWZlcmVuY2UgdG8gdGhvc2Ugd2hvIHdlcmUgbWlnaHR5IGluIGFybXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRpbWFnb3JhcywgYXQgYW55IHJhdGUsIHdhcyBjb25kZW1uZWQgYW5kIGV4ZWN1dGVkIGJ5IHRoZSBBdGhlbmlhbnMsIGFuZCBpZiB0aGlzIHdhcyBiZWNhdXNlIG9mIHRoZSBtdWx0aXR1ZGUgb2YgZ2lmdHMgd2hpY2ggaGUgdG9vaywgaXQgd2FzIHJpZ2h0IGFuZCBqdXN0OyBmb3IgaGUgdG9vayBub3Qgb25seSBnb2xkIGFuZCBzaWx2ZXIsIGJ1dCBhbHNvIGFuIGV4cGVuc2l2ZSBjb3VjaCBhbmQgc2xhdmVzIHRvIHNwcmVhZCBpdCwgc2luY2UsIGFzIGhlIHNhaWQsIHRoZSBHcmVla3MgZGlkIG5vdCBrbm93IGhvdzsgYW5kIGJlc2lkZXMsIGVpZ2h0eSBjb3dzIHdpdGggdGhlaXIgY293LWhlcmRzLCBzaW5jZSwgYXMgaGUgc2FpZCwgaGUgd2FudGVkIGNvd3MnIG1pbGsgZm9yIHNvbWUgYWlsbWVudDsgYW5kLCBmaW5hbGx5LCBoZSB3YXMgY2FycmllZCBkb3duIHRvIHRoZSBzZWEgaW4gYSBsaXR0ZXIsIGFuZCBoYWQgYSBwcmVzZW50IG9mIGZvdXIgdGFsZW50cyBmcm9tIHRoZSBLaW5nIHdpdGggd2hpY2ggdG8gcGF5IGhpcyBjYXJyaWVycy4gIEJ1dCBpdCB3YXMgbm90IGhpcyB0YWtpbmcgb2YgZ2lmdHMsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgbW9zdCBleGFzcGVyYXRlZCB0aGUgQXRoZW5pYW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBFcGljcmF0ZXMsIGhpcyBzaGllbGQtYmVhcmVyLCBvbmNlIGNvbmZlc3NlZCB0aGF0IGhlIGhhZCByZWNlaXZlZCBnaWZ0cyBmcm9tIHRoZSBLaW5nLCBhbmQgdGFsa2VkIG9mIHByb3Bvc2luZyBhIGRlY3JlZSB0aGF0IGluc3RlYWQgb2YgbmluZSBhcmNob25zLCBuaW5lIGFtYmFzc2Fkb3JzIHRvIHRoZSBLaW5nIHNob3VsZCBiZSBlbGVjdGVkIGFubnVhbGx5IGZyb20gdGhlIHBvb3IgYW5kIG5lZWR5IGNpdGl6ZW5zLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgdGFrZSBoaXMgZ2lmdHMgYW5kIGJlIHdlYWx0aHkgbWVuLCB3aGVyZWF0IHRoZSBwZW9wbGUgb25seSBsYXVnaGVkLiAgIEJ1dCB0aGV5IHdlcmUgaW5jZW5zZWQgYmVjYXVzZSB0aGUgVGhlYmFucyBoYWQgdGhpbmdzIGFsbCB0aGVpciBvd24gd2F5LCBub3Qgc3RvcHBpbmcgdG8gY29uc2lkZXIgdGhhdCB0aGUgZmFtZSBvZiBQZWxvcGlkYXMgd2FzIG1vcmUgcG90ZW50IHRoYW4gYW55IG51bWJlciBvZiByaGV0b3JpY2FsIGRpc2NvdXJzZXMgd2l0aCBhIG1hbiB3aG8gZXZlciBwYWlkIGRlZmVyZW5jZSB0byB0aG9zZSB3aG8gd2VyZSBtaWdodHkgaW4gYXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBlbWJhc3N5LCB0aGVuLCBhZGRlZCBub3QgYSBsaXR0bGUgdG8gdGhlIGdvb2R3aWxsIGZlbHQgdG93YXJkcyBQZWxvcGlkYXMsIG9uIGhpcyByZXR1cm4gaG9tZSwgYmVjYXVzZSBvZiB0aGUgcGVvcGxpbmcgb2YgTWVzc2VuZSBhbmQgdGhlIGluZGVwZW5kZW5jZSBvZiB0aGUgb3RoZXIgR3JlZWtzLiAgICBCdXQgQWxleGFuZGVyIG9mIFBoZXJhZSBoYWQgbm93IHJlc3VtZWQgaGlzIG9sZCBuYXR1cmUgYW5kIHdhcyBkZXN0cm95aW5nIG5vdCBhIGZldyBUaGVzc2FsaWFuIGNpdGllczsgaGUgaGFkIGFsc28gcHV0IGdhcnJpc29ucyBvdmVyIHRoZSBBY2hhZWFucyBvZiBQaHRoaW90aXMgYW5kIHRoZSBwZW9wbGUgb2YgTWFnbmVzaWEuICAgICAgV2hlbiwgdGhlcmVmb3JlLCB0aGUgY2l0aWVzIGxlYXJuZWQgdGhhdCBQZWxvcGlkYXMgd2FzIHJldHVybmVkLCB0aGV5IGF0IG9uY2Ugc2VudCBhbWJhc3NhZG9ycyB0byBUaGViZXMgcmVxdWVzdGluZyBhbiBhcm1lZCBmb3JjZSBhbmQgaGltIGZvciBpdHMgY29tbWFuZGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgVGhlYmFucyByZWFkaWx5IGRlY3JlZWQgd2hhdCB0aGV5IGRlc2lyZWQsIGFuZCBzb29uIGV2ZXJ5dGhpbmcgd2FzIGluIHJlYWRpbmVzcyBhbmQgdGhlIGNvbW1hbmRlciBhYm91dCB0byBzZXQgb3V0LCB3aGVuIHRoZSBzdW4gd2FzIGVjbGlwc2VkIGFuZCB0aGUgY2l0eSB3YXMgY292ZXJlZCB3aXRoIGRhcmtuZXNzIGluIHRoZSBkYXktdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KdWx5IDEzLCAzNjQgQi5DLjwvbm90ZT4gU28gUGVsb3BpZGFzLCBzZWVpbmcgIHRoYXQgYWxsIHdlcmUgICBjb25mb3VuZGVkIGF0ICB0aGlzIG1hbmlmZXN0YXRpb24sIGRpZCBub3QgdGhpbmsgaXQgbWVldCB0byB1c2UgY29tcHVsc2lvbiB3aXRoIG1lbiB3aG8gd2VyZSBhcHByZWhlbnNpdmUgYW5kIGZlYXJmdWwsIG5vciB0byBydW4gZXh0cmVtZSBoYXphcmQgd2l0aCBzZXZlbiB0aG91c2FuZCBjaXRpemVucywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGRldm90aW5nIGhpbXNlbGYgYWxvbmUgdG8gdGhlIFRoZXNzYWxpYW5zLCBhbmQgdGFraW5nIHdpdGggaGltIHRocmVlIGh1bmRyZWQgb2YgdGhlIGNhdmFscnkgd2hvIHdlcmUgZm9yZWlnbmVycyBhbmQgd2hvIHZvbHVudGVlcmVkIGZvciB0aGUgc2VydmljZSwgc2V0IG91dCwgYWx0aG91Z2ggdGhlIHNlZXJzIGZvcmJhZGUgaXQsIGFuZCB0aGUgcmVzdCBvZiB0aGUgY2l0aXplbnMgZGlzYXBwcm92ZWQ7IGZvciB0aGUgZWNsaXBzZSB3YXMgdGhvdWdodCB0byBiZSBhIGdyZWF0IHNpZ24gZnJvbSBoZWF2ZW4sIGFuZCB0byByZWdhcmQgYSBjb25zcGljdW91cyBtYW4uICAgQnV0IGhpcyB3cmF0aCBhdCBpbnN1bHRzIHJlY2VpdmVkIG1hZGUgaGltIHZlcnkgaG90IGFnYWluc3QgQWxleGFuZGVyLCBhbmQsIGJlc2lkZXMsIGhpcyBwcmV2aW91cyBjb252ZXJzYXRpb25zIHdpdGggVGhlYmU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlbC4gMjguMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHZpaWkuIDMuIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBsZWQgaGltIHRvIGhvcGUgdGhhdCBoZSBzaG91bGQgZmluZCB0aGUgdHlyYW50J3MgZmFtaWx5ICBhbHJlYWR5IGVtYnJvaWxlZCBhbmQgZGlzcnVwdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgaG93ZXZlciwgdGhlIGdsb3J5IG9mIHRoZSBhY2hpZXZlbWVudCBpbnZpdGVkIGhpbSBvbiwgZm9yIGhlIHdhcyBhcmRlbnRseSBkZXNpcm91cywgYXQgYSB0aW1lIHdoZW4gdGhlIExhY2VkYWVtb25pYW5zIHdlcmUgc2VuZGluZyBnZW5lcmFscyBhbmQgZ292ZXJub3JzIHRvIGFpZCBEaW9ueXNpdXMgdGhlIHR5cmFudCBvZiBTaWNpbHksIGFuZCB0aGUgQXRoZW5pYW5zIHdlcmUgdGFraW5nIEFsZXhhbmRlcidzIHBheSBhbmQgZXJlY3RpbmcgYSBicm9uemUgc3RhdHVlIG9mIGhpbSBhcyB0aGVpciBiZW5lZmFjdG9yLCB0byBzaG93IHRoZSBHcmVla3MgdGhhdCB0aGUgVGhlYmFucyBhbG9uZSB3ZXJlIG1ha2luZyBleHBlZGl0aW9ucyBmb3IgdGhlIHJlbGllZiBvZiB0aG9zZSB3aG9tIHR5cmFudHMgb3BwcmVzc2VkLCBhbmQgd2VyZSBvdmVydGhyb3dpbmcgaW4gR3JlZWNlIHRob3NlIHJ1bGluZyBob3VzZXMgd2hpY2ggcmVzdGVkIG9uIHZpb2xlbmNlIGFuZCB3ZXJlIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBlbWJhc3N5LCB0aGVuLCBhZGRlZCBub3QgYSBsaXR0bGUgdG8gdGhlIGdvb2R3aWxsIGZlbHQgdG93YXJkcyBQZWxvcGlkYXMsIG9uIGhpcyByZXR1cm4gaG9tZSwgYmVjYXVzZSBvZiB0aGUgcGVvcGxpbmcgb2YgTWVzc2VuZSBhbmQgdGhlIGluZGVwZW5kZW5jZSBvZiB0aGUgb3RoZXIgR3JlZWtzLiAgICBCdXQgQWxleGFuZGVyIG9mIFBoZXJhZSBoYWQgbm93IHJlc3VtZWQgaGlzIG9sZCBuYXR1cmUgYW5kIHdhcyBkZXN0cm95aW5nIG5vdCBhIGZldyBUaGVzc2FsaWFuIGNpdGllczsgaGUgaGFkIGFsc28gcHV0IGdhcnJpc29ucyBvdmVyIHRoZSBBY2hhZWFucyBvZiBQaHRoaW90aXMgYW5kIHRoZSBwZW9wbGUgb2YgTWFnbmVzaWEuICAgICAgV2hlbiwgdGhlcmVmb3JlLCB0aGUgY2l0aWVzIGxlYXJuZWQgdGhhdCBQZWxvcGlkYXMgd2FzIHJldHVybmVkLCB0aGV5IGF0IG9uY2Ugc2VudCBhbWJhc3NhZG9ycyB0byBUaGViZXMgcmVxdWVzdGluZyBhbiBhcm1lZCBmb3JjZSBhbmQgaGltIGZvciBpdHMgY29tbWFuZGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUaGViYW5zIHJlYWRpbHkgZGVjcmVlZCB3aGF0IHRoZXkgZGVzaXJlZCwgYW5kIHNvb24gZXZlcnl0aGluZyB3YXMgaW4gcmVhZGluZXNzIGFuZCB0aGUgY29tbWFuZGVyIGFib3V0IHRvIHNldCBvdXQsIHdoZW4gdGhlIHN1biB3YXMgZWNsaXBzZWQgYW5kIHRoZSBjaXR5IHdhcyBjb3ZlcmVkIHdpdGggZGFya25lc3MgaW4gdGhlIGRheS10aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SnVseSAxMywgMzY0IEIuQy48L25vdGU+IFNvIFBlbG9waWRhcywgc2VlaW5nICB0aGF0IGFsbCB3ZXJlICAgY29uZm91bmRlZCBhdCAgdGhpcyBtYW5pZmVzdGF0aW9uLCBkaWQgbm90IHRoaW5rIGl0IG1lZXQgdG8gdXNlIGNvbXB1bHNpb24gd2l0aCBtZW4gd2hvIHdlcmUgYXBwcmVoZW5zaXZlIGFuZCBmZWFyZnVsLCBub3IgdG8gcnVuIGV4dHJlbWUgaGF6YXJkIHdpdGggc2V2ZW4gdGhvdXNhbmQgY2l0aXplbnMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBkZXZvdGluZyBoaW1zZWxmIGFsb25lIHRvIHRoZSBUaGVzc2FsaWFucywgYW5kIHRha2luZyB3aXRoIGhpbSB0aHJlZSBodW5kcmVkIG9mIHRoZSBjYXZhbHJ5IHdobyB3ZXJlIGZvcmVpZ25lcnMgYW5kIHdobyB2b2x1bnRlZXJlZCBmb3IgdGhlIHNlcnZpY2UsIHNldCBvdXQsIGFsdGhvdWdoIHRoZSBzZWVycyBmb3JiYWRlIGl0LCBhbmQgdGhlIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zIGRpc2FwcHJvdmVkOyBmb3IgdGhlIGVjbGlwc2Ugd2FzIHRob3VnaHQgdG8gYmUgYSBncmVhdCBzaWduIGZyb20gaGVhdmVuLCBhbmQgdG8gcmVnYXJkIGEgY29uc3BpY3VvdXMgbWFuLiAgIEJ1dCBoaXMgd3JhdGggYXQgaW5zdWx0cyByZWNlaXZlZCBtYWRlIGhpbSB2ZXJ5IGhvdCBhZ2FpbnN0IEFsZXhhbmRlciwgYW5kLCBiZXNpZGVzLCBoaXMgcHJldmlvdXMgY29udmVyc2F0aW9ucyB3aXRoIFRoZWJlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyOC4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4dmlpaS4gMy4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGxlZCBoaW0gdG8gaG9wZSB0aGF0IGhlIHNob3VsZCBmaW5kIHRoZSB0eXJhbnQncyBmYW1pbHkgIGFscmVhZHkgZW1icm9pbGVkIGFuZCBkaXNydXB0ZWQuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVsLiAyOC4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4dmlpaS4gMy4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmUgdGhhbiBhbnl0aGluZyBlbHNlLCBob3dldmVyLCB0aGUgZ2xvcnkgb2YgdGhlIGFjaGlldmVtZW50IGludml0ZWQgaGltIG9uLCBmb3IgaGUgd2FzIGFyZGVudGx5IGRlc2lyb3VzLCBhdCBhIHRpbWUgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBzZW5kaW5nIGdlbmVyYWxzIGFuZCBnb3Zlcm5vcnMgdG8gYWlkIERpb255c2l1cyB0aGUgdHlyYW50IG9mIFNpY2lseSwgYW5kIHRoZSBBdGhlbmlhbnMgd2VyZSB0YWtpbmcgQWxleGFuZGVyJ3MgcGF5IGFuZCBlcmVjdGluZyBhIGJyb256ZSBzdGF0dWUgb2YgaGltIGFzIHRoZWlyIGJlbmVmYWN0b3IsIHRvIHNob3cgdGhlIEdyZWVrcyB0aGF0IHRoZSBUaGViYW5zIGFsb25lIHdlcmUgbWFraW5nIGV4cGVkaXRpb25zIGZvciB0aGUgcmVsaWVmIG9mIHRob3NlIHdob20gdHlyYW50cyBvcHByZXNzZWQsIGFuZCB3ZXJlIG92ZXJ0aHJvd2luZyBpbiBHcmVlY2UgdGhvc2UgcnVsaW5nIGhvdXNlcyB3aGljaCByZXN0ZWQgb24gdmlvbGVuY2UgYW5kIHdlcmUgY29udHJhcnkgdG8gdGhlIGxhd3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGhlIHdhcyBjb21lIHRvIFBoYXJzYWx1cywgaGUgYXNzZW1ibGVkIGhpcyBmb3JjZXMgYW5kIG1hcmNoZWQgYXQgb25jZSBhZ2FpbnN0IEFsZXhhbmRlci4gICAgQWxleGFuZGVyLCBhbHNvLCBzZWVpbmcgdGhhdCB0aGVyZSB3ZXJlIG9ubHkgYSBmZXcgVGhlYmFucyB3aXRoIFBlbG9waWRhcywgd2hpbGUgaGlzIG93biBtZW4tYXQtYXJtcyB3ZXJlIG1vcmUgdGhhbiB0d2ljZSBhcyBtYW55IGFzIHRoZSBUaGVzc2FsaWFucywgYWR2YW5jZWQgYXMgZmFyIGFzIHRoZSB0ZW1wbGUgb2YgVGhldGlzIHRvIG1lZXQgaGltLiAgIFdoZW4gUGVsb3BpZGFzIHdhcyB0b2xkIHRoYXQgdGhlIHR5cmFudCB3YXMgY29taW5nIHVwIGFnYWluc3QgaGltIHdpdGggYSBsYXJnZSBmb3JjZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbGwgdGhlIGJldHRlciw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIHRoZXJlIHdpbGwgYmUgbW9yZSBmb3IgdXMgdG8gY29ucXVlci48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gaGUgd2FzIGNvbWUgdG8gUGhhcnNhbHVzLCBoZSBhc3NlbWJsZWQgaGlzIGZvcmNlcyBhbmQgbWFyY2hlZCBhdCBvbmNlIGFnYWluc3QgQWxleGFuZGVyLiAgICBBbGV4YW5kZXIsIGFsc28sIHNlZWluZyB0aGF0IHRoZXJlIHdlcmUgb25seSBhIGZldyBUaGViYW5zIHdpdGggUGVsb3BpZGFzLCB3aGlsZSBoaXMgb3duIG1lbi1hdC1hcm1zIHdlcmUgbW9yZSB0aGFuIHR3aWNlIGFzIG1hbnkgYXMgdGhlIFRoZXNzYWxpYW5zLCBhZHZhbmNlZCBhcyBmYXIgYXMgdGhlIHRlbXBsZSBvZiBUaGV0aXMgdG8gbWVldCBoaW0uICAgV2hlbiBQZWxvcGlkYXMgd2FzIHRvbGQgdGhhdCB0aGUgdHlyYW50IHdhcyBjb21pbmcgdXAgYWdhaW5zdCBoaW0gd2l0aCBhIGxhcmdlIGZvcmNlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWxsIHRoZSBiZXR0ZXIsPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Zm9yIHRoZXJlIHdpbGwgYmUgbW9yZSBmb3IgdXMgdG8gY29ucXVlci48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBdCB0aGUgcGxhY2UgY2FsbGVkIEN5bm9zY2VwaGFsYWUsIHN0ZWVwIGFuZCBsb2Z0eSBoaWxscyBqdXQgb3V0IGludG8gdGhlIG1pZHN0IG9mIHRoZSBwbGFpbiwgYW5kIGJvdGggbGVhZGVycyBzZXQgb3V0IHRvIG9jY3VweSB0aGVzZSB3aXRoIHRoZWlyIGluZmFudHJ5LiBIaXMgaG9yc2VtZW4sIGhvd2V2ZXIsIHdobyB3ZXJlIG51bWVyb3VzIGFuZCBicmF2ZSwgUGVsb3BpZGFzIHNlbnQgYWdhaW5zdCB0aGUgaG9yc2VtZW4gb2YgdGhlIGVuZW15LCBhbmQgdGhleSBwcmV2YWlsZWQgb3ZlciB0aGVtIGFuZCBjaGFzZWQgdGhlbSBvdXQgaW50byB0aGUgcGxhaW4uICBCdXQgQWxleGFuZGVyIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSBoaWxscyBmaXJzdCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gdGhlIFRoZXNzYWxpYW4gbWVuLWF0LWFybXMgY2FtZSB1cCBsYXRlciBhbmQgdHJpZWQgdG8gc3Rvcm0gZGlmZmljdWx0IGFuZCBsb2Z0eSBwbGFjZXMsIGhlIGF0dGFja2VkIGFuZCBraWxsZWQgdGhlIGZvcmVtb3N0IG9mIHRoZW0sIGFuZCB0aGUgcmVzdCB3ZXJlIHNvIGhhcmFzc2VkIHdpdGggbWlzc2lsZXMgdGhhdCB0aGV5IGNvdWxkIGFjY29tcGxpc2ggbm90aGluZy4gICAgQWNjb3JkaW5nbHksIHdoZW4gUGVsb3BpZGFzIHNhdyB0aGlzLCBoZSBjYWxsZWQgYmFjayBoaXMgaG9yc2VtZW4gYW5kIG9yZGVyZWQgdGhlbSB0byBjaGFyZ2UgdXBvbiB0aGUgZW5lbXkncyBpbmZhbnRyeSB3aGVyZSBpdCBzdGlsbCBoZWxkIHRvZ2V0aGVyLCB3aGlsZSBoZSBoaW1zZWxmIHNlaXplZCBoaXMgc2hpZWxkIGF0IG9uY2UgYW5kIHJhbiB0byBqb2luIHRob3NlIHdobyB3ZXJlIGZpZ2h0aW5nIG9uIHRoZSBoaWxscy4gIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRocm91Z2ggdGhlIHJlYXIgcmFua3MgaGUgZm9yY2VkIGhpcyB3YXkgdG8gdGhlIGZyb250LCBhbmQgZmlsbGVkIGFsbCBoaXMgbWVuIHdpdGggc3VjaCB2aWdvdXIgYW5kIGFyZG91ciB0aGF0IHRoZSBlbmVteSBhbHNvIHRob3VnaHQgdGhlbSBjaGFuZ2VkIG1lbiwgYWR2YW5jaW5nIHRvIHRoZSBhdHRhY2sgd2l0aCBvdGhlciBib2RpZXMgYW5kIHNwaXJpdHMuICBUd28gb3IgdGhyZWUgb2YgdGhlaXIgb25zZXRzIHRoZSBlbmVteSByZXB1bHNlZCwgYnV0LCBzZWVpbmcgdGhhdCB0aGVzZSB0b28gd2VyZSBub3cgYXR0YWNraW5nIHdpdGggdmlnb3VyLCBhbmQgdGhhdCB0aGUgY2F2YWxyeSB3YXMgY29taW5nIGJhY2sgZnJvbSBpdHMgcHVyc3VpdCwgdGhleSBnYXZlIHdheSBhbmQgcmV0cmVhdGVkIHN0ZXAgYnkgc3RlcC4gICAgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBQZWxvcGlkYXMsIGxvb2tpbmcgZG93biBmcm9tIHRoZSBoZWlnaHRzIGFuZCBzZWVpbmcgdGhhdCB0aGUgd2hvbGUgYXJteSBvZiB0aGUgZW5lbXksIHRob3VnaCBub3QgeWV0IHB1dCB0byBmbGlnaHQsIHdhcyBhbHJlYWR5IGJlY29taW5nIGZ1bGwgb2YgdHVtdWx0IGFuZCBjb25mdXNpb24sIHN0b29kIGFuZCBsb29rZWQgYWJvdXQgaGltIGluIHNlYXJjaCBvZiBBbGV4YW5kZXIuICBBbmQgd2hlbiBoZSBzYXcgaGltIG9uIHRoZSByaWdodCB3aW5nLCBtYXJzaGFsbGluZyBhbmQgZW5jb3VyYWdpbmcgaGlzIG1lcmNlbmFyaWVzLCBoZSBjb3VsZCBub3Qgc3ViamVjdCBoaXMgYW5nZXIgdG8gaGlzIGp1ZGdlbWVudCwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCBpbmZsYW1lZCBhdCB0aGUgc2lnaHQsIGFuZCBzdXJyZW5kZXJpbmcgaGltc2VsZiBhbmQgaGlzIGNvbmR1Y3Qgb2YgdGhlIGVudGVycHJpc2UgdG8gaGlzIHBhc3Npb24sIGhlIHNwcmFuZyBvdXQgZmFyIGluIGZyb250IG9mIHRoZSByZXN0IGFuZCBydXNoZWQgd2l0aCBjaGFsbGVuZ2luZyBjcmllcyB1cG9uIHRoZSB0eXJhbnQuIEhlLCBob3dldmVyLCBkaWQgbm90IHJlY2VpdmUgbm9yIGF3YWl0IHRoZSBvbnNldCwgYnV0IGZsZWQgYmFjayB0byBoaXMgZ3VhcmRzIGFuZCBoaWQgaGltc2VsZiBhbW9uZyB0aGVtLiAgVGhlIGZvcmVtb3N0IG9mIHRoZSBtZXJjZW5hcmllcywgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggUGVsb3BpZGFzLCB3ZXJlIGJlYXRlbiBiYWNrIGJ5IGhpbTsgc29tZSBhbHNvIHdlcmUgc21pdHRlbiBhbmQgc2xhaW47IAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBtb3N0IG9mIHRoZW0gZm91Z2h0IGF0IGxvbmdlciByYW5nZSwgdGhydXN0aW5nIHRoZWlyIHNwZWFycyB0aHJvdWdoIGhpcyBhcm1vdXIgYW5kIGNvdmVyaW5nIGhpbSB3aXRoIHdvdW5kcywgdW50aWwgdGhlIFRoZXNzYWxpYW5zLCBpbiBkaXN0cmVzcyBmb3IgaGlzIHNhZmV0eSwgcmFuIGRvd24gZnJvbSB0aGUgaGlsbHMsIHdoZW4gaGUgaGFkIGFscmVhZHkgZmFsbGVuLCBhbmQgdGhlIGNhdmFscnksIGNoYXJnaW5nIHVwLCByb3V0ZWQgdGhlIGVudGlyZSBwaGFsYW54IG9mIHRoZSBlbmVteSwgYW5kLCBmb2xsb3dpbmcgb24gYSBncmVhdCBkaXN0YW5jZSBpbiBwdXJzdWl0LCBmaWxsZWQgdGhlIGNvdW50cnkgd2l0aCB0aGVpciBkZWFkIGJvZGllcywgc2xheWluZyBtb3JlIHRoYW4gdGhyZWUgdGhvdXNhbmQgb2YgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPiBBdCB0aGUgcGxhY2UgY2FsbGVkIEN5bm9zY2VwaGFsYWUsIHN0ZWVwIGFuZCBsb2Z0eSBoaWxscyBqdXQgb3V0IGludG8gdGhlIG1pZHN0IG9mIHRoZSBwbGFpbiwgYW5kIGJvdGggbGVhZGVycyBzZXQgb3V0IHRvIG9jY3VweSB0aGVzZSB3aXRoIHRoZWlyIGluZmFudHJ5LiBIaXMgaG9yc2VtZW4sIGhvd2V2ZXIsIHdobyB3ZXJlIG51bWVyb3VzIGFuZCBicmF2ZSwgUGVsb3BpZGFzIHNlbnQgYWdhaW5zdCB0aGUgaG9yc2VtZW4gb2YgdGhlIGVuZW15LCBhbmQgdGhleSBwcmV2YWlsZWQgb3ZlciB0aGVtIGFuZCBjaGFzZWQgdGhlbSBvdXQgaW50byB0aGUgcGxhaW4uICBCdXQgQWxleGFuZGVyIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSBoaWxscyBmaXJzdCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIHRoZSBUaGVzc2FsaWFuIG1lbi1hdC1hcm1zIGNhbWUgdXAgbGF0ZXIgYW5kIHRyaWVkIHRvIHN0b3JtIGRpZmZpY3VsdCBhbmQgbG9mdHkgcGxhY2VzLCBoZSBhdHRhY2tlZCBhbmQga2lsbGVkIHRoZSBmb3JlbW9zdCBvZiB0aGVtLCBhbmQgdGhlIHJlc3Qgd2VyZSBzbyBoYXJhc3NlZCB3aXRoIG1pc3NpbGVzIHRoYXQgdGhleSBjb3VsZCBhY2NvbXBsaXNoIG5vdGhpbmcuICAgIEFjY29yZGluZ2x5LCB3aGVuIFBlbG9waWRhcyBzYXcgdGhpcywgaGUgY2FsbGVkIGJhY2sgaGlzIGhvcnNlbWVuIGFuZCBvcmRlcmVkIHRoZW0gdG8gY2hhcmdlIHVwb24gdGhlIGVuZW15J3MgaW5mYW50cnkgd2hlcmUgaXQgc3RpbGwgaGVsZCB0b2dldGhlciwgd2hpbGUgaGUgaGltc2VsZiBzZWl6ZWQgaGlzIHNoaWVsZCBhdCBvbmNlIGFuZCByYW4gdG8gam9pbiB0aG9zZSB3aG8gd2VyZSBmaWdodGluZyBvbiB0aGUgaGlsbHMuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRocm91Z2ggdGhlIHJlYXIgcmFua3MgaGUgZm9yY2VkIGhpcyB3YXkgdG8gdGhlIGZyb250LCBhbmQgZmlsbGVkIGFsbCBoaXMgbWVuIHdpdGggc3VjaCB2aWdvdXIgYW5kIGFyZG91ciB0aGF0IHRoZSBlbmVteSBhbHNvIHRob3VnaHQgdGhlbSBjaGFuZ2VkIG1lbiwgYWR2YW5jaW5nIHRvIHRoZSBhdHRhY2sgd2l0aCBvdGhlciBib2RpZXMgYW5kIHNwaXJpdHMuICBUd28gb3IgdGhyZWUgb2YgdGhlaXIgb25zZXRzIHRoZSBlbmVteSByZXB1bHNlZCwgYnV0LCBzZWVpbmcgdGhhdCB0aGVzZSB0b28gd2VyZSBub3cgYXR0YWNraW5nIHdpdGggdmlnb3VyLCBhbmQgdGhhdCB0aGUgY2F2YWxyeSB3YXMgY29taW5nIGJhY2sgZnJvbSBpdHMgcHVyc3VpdCwgdGhleSBnYXZlIHdheSBhbmQgcmV0cmVhdGVkIHN0ZXAgYnkgc3RlcC4gICAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gUGVsb3BpZGFzLCBsb29raW5nIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyBhbmQgc2VlaW5nIHRoYXQgdGhlIHdob2xlIGFybXkgb2YgdGhlIGVuZW15LCB0aG91Z2ggbm90IHlldCBwdXQgdG8gZmxpZ2h0LCB3YXMgYWxyZWFkeSBiZWNvbWluZyBmdWxsIG9mIHR1bXVsdCBhbmQgY29uZnVzaW9uLCBzdG9vZCBhbmQgbG9va2VkIGFib3V0IGhpbSBpbiBzZWFyY2ggb2YgQWxleGFuZGVyLiAgQW5kIHdoZW4gaGUgc2F3IGhpbSBvbiB0aGUgcmlnaHQgd2luZywgbWFyc2hhbGxpbmcgYW5kIGVuY291cmFnaW5nIGhpcyBtZXJjZW5hcmllcywgaGUgY291bGQgbm90IHN1YmplY3QgaGlzIGFuZ2VyIHRvIGhpcyBqdWRnZW1lbnQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgaW5mbGFtZWQgYXQgdGhlIHNpZ2h0LCBhbmQgc3VycmVuZGVyaW5nIGhpbXNlbGYgYW5kIGhpcyBjb25kdWN0IG9mIHRoZSBlbnRlcnByaXNlIHRvIGhpcyBwYXNzaW9uLCBoZSBzcHJhbmcgb3V0IGZhciBpbiBmcm9udCBvZiB0aGUgcmVzdCBhbmQgcnVzaGVkIHdpdGggY2hhbGxlbmdpbmcgY3JpZXMgdXBvbiB0aGUgdHlyYW50LiBIZSwgaG93ZXZlciwgZGlkIG5vdCByZWNlaXZlIG5vciBhd2FpdCB0aGUgb25zZXQsIGJ1dCBmbGVkIGJhY2sgdG8gaGlzIGd1YXJkcyBhbmQgaGlkIGhpbXNlbGYgYW1vbmcgdGhlbS4gIFRoZSBmb3JlbW9zdCBvZiB0aGUgbWVyY2VuYXJpZXMsIGNvbWluZyB0byBjbG9zZSBxdWFydGVycyB3aXRoIFBlbG9waWRhcywgd2VyZSBiZWF0ZW4gYmFjayBieSBoaW07IHNvbWUgYWxzbyB3ZXJlIHNtaXR0ZW4gYW5kIHNsYWluOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBtb3N0IG9mIHRoZW0gZm91Z2h0IGF0IGxvbmdlciByYW5nZSwgdGhydXN0aW5nIHRoZWlyIHNwZWFycyB0aHJvdWdoIGhpcyBhcm1vdXIgYW5kIGNvdmVyaW5nIGhpbSB3aXRoIHdvdW5kcywgdW50aWwgdGhlIFRoZXNzYWxpYW5zLCBpbiBkaXN0cmVzcyBmb3IgaGlzIHNhZmV0eSwgcmFuIGRvd24gZnJvbSB0aGUgaGlsbHMsIHdoZW4gaGUgaGFkIGFscmVhZHkgZmFsbGVuLCBhbmQgdGhlIGNhdmFscnksIGNoYXJnaW5nIHVwLCByb3V0ZWQgdGhlIGVudGlyZSBwaGFsYW54IG9mIHRoZSBlbmVteSwgYW5kLCBmb2xsb3dpbmcgb24gYSBncmVhdCBkaXN0YW5jZSBpbiBwdXJzdWl0LCBmaWxsZWQgdGhlIGNvdW50cnkgd2l0aCB0aGVpciBkZWFkIGJvZGllcywgc2xheWluZyBtb3JlIHRoYW4gdGhyZWUgdGhvdXNhbmQgb2YgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGF0IHRoZSBUaGViYW5zIHdobyB3ZXJlIHByZXNlbnQgYXQgdGhlIGRlYXRoIG9mIFBlbG9waWRhcyBzaG91bGQgYmUgZGlzY29uc29sYXRlLCBjYWxsaW5nIGhpbSB0aGVpciBmYXRoZXIgYW5kIHNhdmlvdXIgYW5kIHRlYWNoZXIgb2YgdGhlIGdyZWF0ZXN0IGFuZCBmYWlyZXN0IGJsZXNzaW5ncywgd2FzIG5vdCBzbyBtdWNoIHRvIGJlIHdvbmRlcmVkIGF0OyBidXQgdGhlIFRoZXNzYWxpYW5zIGFuZCBhbGxpZXMgYWxzbywgYWZ0ZXIgZXhjZWVkaW5nIGluIHRoZWlyIGRlY3JlZXMgZXZlcnkgaG9ub3VyIHRoYXQgY2FuIGZpdGx5IGJlIHBhaWQgdG8gaHVtYW4gZXhjZWxsZW5jZSwgc2hvd2VkIHN0aWxsIG1vcmUgYnkgdGhlaXIgZ3JpZWYgaG93IGdyYXRlZnVsIHRoZXkgd2VyZSB0byBoaW0uICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgc2FpZCB0aGF0IHRob3NlIHdobyB3ZXJlIGluIHRoZSBhY3Rpb24gbmVpdGhlciB0b29rIG9mZiB0aGVpciBicmVhc3RwbGF0ZXMgbm9yIHVuYnJpZGxlZCB0aGVpciBob3JzZXMgbm9yIGJvdW5kIHVwIHRoZWlyIHdvdW5kcywgd2hlbiB0aGV5IGxlYXJuZWQgb2YgaGlzIGRlYXRoLCBidXQsIHN0aWxsIGhlYXRlZCBhbmQgaW4gZnVsbCBhcm1vdXIsIGNhbWUgZmlyc3QgdG8gdGhlIGJvZHksIGFuZCBhcyBpZiBpdCBzdGlsbCBoYWQgbGlmZSBhbmQgc2Vuc2UsIGhlYXBlZCByb3VuZCBpdCB0aGUgc3BvaWxzIG9mIHRoZSBlbmVteSwgc2hlYXJlZCB0aGVpciBob3JzZXMnIG1hbmVzLCBhbmQgY3V0IG9mZiB0aGVpciBvd24gaGFpcjsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gdGhleSBoYWQgZ29uZSB0byB0aGVpciB0ZW50cywgbWFueSBuZWl0aGVyIGtpbmRsZWQgYSBmaXJlIG5vciB0b29rIHN1cHBlciwgYnV0IHNpbGVuY2UgYW5kIGRlamVjdGlvbiByZWlnbmVkIHRocm91Z2ggYWxsIHRoZSBjYW1wLCBhcyBpZiB0aGV5IGhhZCBub3Qgd29uIGEgZ3JlYXQgYW5kIG1vc3QgYnJpbGxpYW50IHZpY3RvcnksIGJ1dCBoYWQgYmVlbiBkZWZlYXRlZCBieSB0aGUgdHlyYW50IGFuZCBtYWRlIGhpcyBzbGF2ZXMuICAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZSBjaXRpZXMsIHRvbywgd2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyByZWFjaGVkIHRoZW0sIGNhbWUgdGhlIG1hZ2lzdHJhdGVzLCBhY2NvbXBhbmllZCBieSB5b3V0aHMgYW5kIGJveXMgYW5kIHByaWVzdHMsIHRvIHRha2UgdXAgdGhlIGJvZHksIGFuZCB0aGV5IGJyb3VnaHQgdHJvcGhpZXMgYW5kIHdyZWF0aHMgYW5kIHN1aXRzIG9mIGdvbGRlbiBhcm1vdXIuICAgQW5kIHdoZW4gdGhlIGJvZHkgd2FzIHRvIGJlIGNhcnJpZWQgZm9ydGggZm9yIGJ1cmlhbCwgdGhlIG1vc3QgcmV2ZXJlbmQgb2YgdGhlIFRoZXNzYWxpYW5zIGNhbWUgYW5kIGJlZ2dlZCB0aGUgVGhlYmFucyBmb3IgdGhlIHByaXZpbGVnZSBvZiBnaXZpbmcgaXQgYnVyaWFsIHRoZW1zZWx2ZXMuICBBbmQgb25lIG9mIHRoZW0gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5GcmllbmRzIGFuZCBhbGxpZXMsIHdlIGFzayBvZiB5b3UgYSBmYXZvdXIgd2hpY2ggd2lsbCBiZSBhbiBob25vdXIgdG8gdXMgaW4gb3VyIGdyZWF0IG1pc2ZvcnR1bmUsIGFuZCB3aWxsIGdpdmUgdXMgY29uc29sYXRpb24uICAKCQkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2UgbWVuIG9mIFRoZXNzYWx5IGNhbiBuZXZlciBhZ2FpbiBlc2NvcnQgYSBsaXZpbmcgUGVsb3BpZGFzIG9uIGhpcyB3YXksIG5vciBwYXkgaGltIHdvcnRoeSBob25vdXJzIG9mIHdoaWNoIGhlIGNhbiBiZSBzZW5zaWJsZTsgYnV0IGlmIHdlIG1heSBiZSBwZXJtaXR0ZWQgdG8gY29tcG9zZSBhbmQgYWRvcm4gaGlzIGJvZHkgd2l0aCBvdXIgb3duIGhhbmRzIGFuZCBnaXZlIGl0IGJ1cmlhbCwgeW91IHdpbGwgYmVsaWV2ZSwgd2UgYXJlIHBlcnN1YWRlZCwgdGhhdCB0aGlzIGNhbGFtaXR5IGlzIGEgZ3JlYXRlciBvbmUgZm9yIFRoZXNzYWx5IHRoYW4gZm9yIFRoZWJlcy4gIEZvciB5b3UgaGF2ZSBsb3N0IG9ubHkgYSBnb29kIGNvbW1hbmRlcjsgYnV0IHdlIGJvdGggdGhhdCBhbmQgZnJlZWRvbS4gICBGb3IgaG93IHNoYWxsIHdlIGhhdmUgdGhlIGNvdXJhZ2UgdG8gYXNrIGFub3RoZXIgZ2VuZXJhbCBmcm9tIHlvdSwgd2hlbiB3ZSBoYXZlIG5vdCByZXR1cm5lZCBQZWxvcGlkYXM/PC9xPiBUaGlzIHJlcXVlc3QgdGhlIFRoZWJhbnMgZ3JhbnRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGF0IHRoZSBUaGViYW5zIHdobyB3ZXJlIHByZXNlbnQgYXQgdGhlIGRlYXRoIG9mIFBlbG9waWRhcyBzaG91bGQgYmUgZGlzY29uc29sYXRlLCBjYWxsaW5nIGhpbSB0aGVpciBmYXRoZXIgYW5kIHNhdmlvdXIgYW5kIHRlYWNoZXIgb2YgdGhlIGdyZWF0ZXN0IGFuZCBmYWlyZXN0IGJsZXNzaW5ncywgd2FzIG5vdCBzbyBtdWNoIHRvIGJlIHdvbmRlcmVkIGF0OyBidXQgdGhlIFRoZXNzYWxpYW5zIGFuZCBhbGxpZXMgYWxzbywgYWZ0ZXIgZXhjZWVkaW5nIGluIHRoZWlyIGRlY3JlZXMgZXZlcnkgaG9ub3VyIHRoYXQgY2FuIGZpdGx5IGJlIHBhaWQgdG8gaHVtYW4gZXhjZWxsZW5jZSwgc2hvd2VkIHN0aWxsIG1vcmUgYnkgdGhlaXIgZ3JpZWYgaG93IGdyYXRlZnVsIHRoZXkgd2VyZSB0byBoaW0uICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBzYWlkIHRoYXQgdGhvc2Ugd2hvIHdlcmUgaW4gdGhlIGFjdGlvbiBuZWl0aGVyIHRvb2sgb2ZmIHRoZWlyIGJyZWFzdHBsYXRlcyBub3IgdW5icmlkbGVkIHRoZWlyIGhvcnNlcyBub3IgYm91bmQgdXAgdGhlaXIgd291bmRzLCB3aGVuIHRoZXkgbGVhcm5lZCBvZiBoaXMgZGVhdGgsIGJ1dCwgc3RpbGwgaGVhdGVkIGFuZCBpbiBmdWxsIGFybW91ciwgY2FtZSBmaXJzdCB0byB0aGUgYm9keSwgYW5kIGFzIGlmIGl0IHN0aWxsIGhhZCBsaWZlIGFuZCBzZW5zZSwgaGVhcGVkIHJvdW5kIGl0IHRoZSBzcG9pbHMgb2YgdGhlIGVuZW15LCBzaGVhcmVkIHRoZWlyIGhvcnNlcycgbWFuZXMsIGFuZCBjdXQgb2ZmIHRoZWlyIG93biBoYWlyOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIHRoZXkgaGFkIGdvbmUgdG8gdGhlaXIgdGVudHMsIG1hbnkgbmVpdGhlciBraW5kbGVkIGEgZmlyZSBub3IgdG9vayBzdXBwZXIsIGJ1dCBzaWxlbmNlIGFuZCBkZWplY3Rpb24gcmVpZ25lZCB0aHJvdWdoIGFsbCB0aGUgY2FtcCwgYXMgaWYgdGhleSBoYWQgbm90IHdvbiBhIGdyZWF0IGFuZCBtb3N0IGJyaWxsaWFudCB2aWN0b3J5LCBidXQgaGFkIGJlZW4gZGVmZWF0ZWQgYnkgdGhlIHR5cmFudCBhbmQgbWFkZSBoaXMgc2xhdmVzLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIGNpdGllcywgdG9vLCB3aGVuIHRpZGluZ3Mgb2YgdGhlc2UgdGhpbmdzIHJlYWNoZWQgdGhlbSwgY2FtZSB0aGUgbWFnaXN0cmF0ZXMsIGFjY29tcGFuaWVkIGJ5IHlvdXRocyBhbmQgYm95cyBhbmQgcHJpZXN0cywgdG8gdGFrZSB1cCB0aGUgYm9keSwgYW5kIHRoZXkgYnJvdWdodCB0cm9waGllcyBhbmQgd3JlYXRocyBhbmQgc3VpdHMgb2YgZ29sZGVuIGFybW91ci4gICBBbmQgd2hlbiB0aGUgYm9keSB3YXMgdG8gYmUgY2FycmllZCBmb3J0aCBmb3IgYnVyaWFsLCB0aGUgbW9zdCByZXZlcmVuZCBvZiB0aGUgVGhlc3NhbGlhbnMgY2FtZSBhbmQgYmVnZ2VkIHRoZSBUaGViYW5zIGZvciB0aGUgcHJpdmlsZWdlIG9mIGdpdmluZyBpdCBidXJpYWwgdGhlbXNlbHZlcy4gIEFuZCBvbmUgb2YgdGhlbSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RnJpZW5kcyBhbmQgYWxsaWVzLCB3ZSBhc2sgb2YgeW91IGEgZmF2b3VyIHdoaWNoIHdpbGwgYmUgYW4gaG9ub3VyIHRvIHVzIGluIG91ciBncmVhdCBtaXNmb3J0dW5lLCBhbmQgd2lsbCBnaXZlIHVzIGNvbnNvbGF0aW9uLiAgCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2UgbWVuIG9mIFRoZXNzYWx5IGNhbiBuZXZlciBhZ2FpbiBlc2NvcnQgYSBsaXZpbmcgUGVsb3BpZGFzIG9uIGhpcyB3YXksIG5vciBwYXkgaGltIHdvcnRoeSBob25vdXJzIG9mIHdoaWNoIGhlIGNhbiBiZSBzZW5zaWJsZTsgYnV0IGlmIHdlIG1heSBiZSBwZXJtaXR0ZWQgdG8gY29tcG9zZSBhbmQgYWRvcm4gaGlzIGJvZHkgd2l0aCBvdXIgb3duIGhhbmRzIGFuZCBnaXZlIGl0IGJ1cmlhbCwgeW91IHdpbGwgYmVsaWV2ZSwgd2UgYXJlIHBlcnN1YWRlZCwgdGhhdCB0aGlzIGNhbGFtaXR5IGlzIGEgZ3JlYXRlciBvbmUgZm9yIFRoZXNzYWx5IHRoYW4gZm9yIFRoZWJlcy4gIEZvciB5b3UgaGF2ZSBsb3N0IG9ubHkgYSBnb29kIGNvbW1hbmRlcjsgYnV0IHdlIGJvdGggdGhhdCBhbmQgZnJlZWRvbS4gICBGb3IgaG93IHNoYWxsIHdlIGhhdmUgdGhlIGNvdXJhZ2UgdG8gYXNrIGFub3RoZXIgZ2VuZXJhbCBmcm9tIHlvdSwgd2hlbiB3ZSBoYXZlIG5vdCByZXR1cm5lZCBQZWxvcGlkYXM/PC9xPiBUaGlzIHJlcXVlc3QgdGhlIFRoZWJhbnMgZ3JhbnRlZC4KCQkJPC90cmFuc2xhdGlvbj4="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlIG1lbiBvZiBUaGVzc2FseSBjYW4gbmV2ZXIgYWdhaW4gZXNjb3J0IGEgbGl2aW5nIFBlbG9waWRhcyBvbiBoaXMgd2F5LCBub3IgcGF5IGhpbSB3b3J0aHkgaG9ub3VycyBvZiB3aGljaCBoZSBjYW4gYmUgc2Vuc2libGU7IGJ1dCBpZiB3ZSBtYXkgYmUgcGVybWl0dGVkIHRvIGNvbXBvc2UgYW5kIGFkb3JuIGhpcyBib2R5IHdpdGggb3VyIG93biBoYW5kcyBhbmQgZ2l2ZSBpdCBidXJpYWwsIHlvdSB3aWxsIGJlbGlldmUsIHdlIGFyZSBwZXJzdWFkZWQsIHRoYXQgdGhpcyBjYWxhbWl0eSBpcyBhIGdyZWF0ZXIgb25lIGZvciBUaGVzc2FseSB0aGFuIGZvciBUaGViZXMuICBGb3IgeW91IGhhdmUgbG9zdCBvbmx5IGEgZ29vZCBjb21tYW5kZXI7IGJ1dCB3ZSBib3RoIHRoYXQgYW5kIGZyZWVkb20uICAgRm9yIGhvdyBzaGFsbCB3ZSBoYXZlIHRoZSBjb3VyYWdlIHRvIGFzayBhbm90aGVyIGdlbmVyYWwgZnJvbSB5b3UsIHdoZW4gd2UgaGF2ZSBub3QgcmV0dXJuZWQgUGVsb3BpZGFzPzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIGZ1bmVyYWwgcml0ZXMgd2VyZSBuZXZlciBzdXJwYXNzZWQgaW4gc3BsZW5kb3VyLCBpbiB0aGUgb3BpbmlvbiBvZiB0aG9zZSB3aG8gZG8gbm90IHRoaW5rIHNwbGVuZG91ciB0byBjb25zaXN0IGluIGl2b3J5LCBnb2xkLCBhbmQgcHVycGxlLCBsaWtlIFBoaWxpc3R1cywgd2hvIHRlbGxzIGluIHdvbmRlcmluZyBzdHJhaW5zIGFib3V0IHRoZSBmdW5lcmFsIG9mIERpb255c2l1cywgd2hpY2ggZm9ybWVkIHRoZSBwb21wb3VzIGNvbmNsdXNpb24gb2YgdGhlIGdyZWF0IHRyYWdlZHkgb2YgaGlzIHR5cmFubnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciB0aGUgR3JlYXQsIHRvbywgd2hlbiBIZXBoYWVzdGlvbiBkaWVkLCBub3Qgb25seSBzaGVhcmVkIHRoZSBtYW5lcyBvZiBoaXMgaG9yc2VzIGFuZCBtdWxlcywgYnV0IGFjdHVhbGx5IHRvb2sgYXdheSB0aGUgYmF0dGxlbWVudHMgb2YgdGhlIGNpdHktd2FsbHMsIGluIG9yZGVyIHRoYXQgdGhlIGNpdGllcyBtaWdodCBzZWVtIHRvIGJlIGluIG1vdXJuaW5nLCBhc3N1bWluZyBhIHNob3JuIGFuZCBkaXNoZXZlbGxlZCBhcHBlYXJhbmNlIGluc3RlYWQgb2YgdGhlaXIgZm9ybWVyIGJlYXV0eS4gIFRoZXNlIGhvbm91cnMsIGhvd2V2ZXIsIHdlcmUgZGljdGF0ZWQgYnkgZGVzcG90cywgd2VyZSBwZXJmb3JtZWQgdW5kZXIgc3Ryb25nIGNvbXB1bHNpb24sIGFuZCB3ZXJlIGF0dGVuZGVkIHdpdGggZW52eSBvZiB0aG9zZSB3aG8gcmVjZWl2ZWQgdGhlbSBhbmQgaGF0cmVkIG9mIHRob3NlIHdobyBlbmZvcmNlZCB0aGVtOyB0aGV5IHdlcmUgYSBtYW5pZmVzdGF0aW9uIG9mIG5vIGdyYXRpdHVkZSBvciBlc3RlZW0gd2hhdGV2ZXIsIGJ1dCBvZiBiYXJiYXJpYyBwb21wIGFuZCBsdXh1cnkgYW5kIHZhaW4tZ2xvcnksIG9uIHRoZSBwYXJ0IG9mIG1lbiB3aG8gbGF2aXNoZWQgdGhlaXIgc3VwZXJmbHVvdXMgd2VhbHRoIG9uIHZhaW4gYW5kIHNvcnJ5IHByYWN0aWNlcy4gIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IGEgbWFuIHdobyB3YXMgYSBjb21tb25lciwgZHlpbmcgaW4gYSBzdHJhbmdlIGNvdW50cnksIGluIHRoZSBhYnNlbmNlIG9mIHdpZmUsIGNoaWxkcmVuLCBhbmQga2luc21lbiwgbm9uZSBhc2tpbmcgYW5kIG5vbmUgY29tcGVsbGluZyBpdCwgc2hvdWxkIGJlIGVzY29ydGVkIGFuZCBjYXJyaWVkIGZvcnRoIGFuZCBjcm93bmVkIGJ5IHNvIG1hbnkgcGVvcGxlcyBhbmQgY2l0aWVzIGVhZ2VyIHRvIHNob3cgaGltIGhvbm91ciwgcmlnaHRseSBzZWVtZWQgdG8gYXJndWUgaGltIHN1cHJlbWVseSBmb3J0dW5hdGUuICAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGRlYXRoIG9mIG1lbiBpbiB0aGUgaG91ciBvZiB0aGVpciB0cml1bXBoIGlzIG5vdCwgYXMgQWVzb3AgdXNlZCB0byBzYXksIG1vc3QgZ3JpZXZvdXMsIGJ1dCBtb3N0IGJsZXNzZWQsIHNpbmNlIGl0IHB1dHMgaW4gc2FmZSBrZWVwaW5nIHRoZWlyIGVuam95bWVudCBvZiB0aGVpciAgIGJsZXNzaW5ncyBhbmQgbGVhdmVzIG5vIHJvb20gZm9yIGNoYW5nZSBvZiBmb3J0dW5lLiAgVGhlcmVmb3JlIHRoZSBTcGFydGFuJ3MgYWR2aWNlIHdhcyBiZXR0ZXIsIHdobywgd2hlbiBoZSBncmVldGVkIERpYWdvcmFzLCB0aGUgT2x5bXBpYW4gdmljdG9yLCB3aG8gaGFkIGxpdmVkIHRvIHNlZSBoaXMgc29ucyBjcm93bmVkIGF0IE9seW1waWEsIHllcywgYW5kIHRoZSBzb25zIG9mIGhpcyBzb25zIGFuZCBkYXVnaHRlcnMsIHNhaWQ7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGllIG5vdywgRGlhZ29yYXM7IHRob3UgY2Fuc3Qgbm90IGFzY2VuZCB0byBPbHltcHVzLjwvcT4gIAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9uZSB3b3VsZCBub3QgZGVpZ24sIEkgdGhpbmssIHRvIGNvbXBhcmUgYWxsIHRoZSBPbHltcGlhbiBhbmQgUHl0aGlhbiB2aWN0b3JpZXMgcHV0IHRvZ2V0aGVyIHdpdGggb25lIG9mIHRoZSBzdHJ1Z2dsZXMgb2YgUGVsb3BpZGFzOyB0aGVzZSB3ZXJlIG1hbnksIGFuZCBoZSBtYWRlIHRoZW0gc3VjY2Vzc2Z1bGx5LCBhbmQgYWZ0ZXIgbGl2aW5nIG1vc3Qgb2YgaGlzIGxpZmUgaW4gZmFtZSBhbmQgaG9ub3VyLCBhdCBsYXN0LCB3aGlsZSBib2VvdGFyY2ggZm9yIHRoZSB0aGlydGVlbnRoIHRpbWUsIHBlcmZvcm1pbmcgYSBkZWVkIG9mIGhpZ2ggdmFsb3VyIHdoaWNoIGFpbWVkIGF0IGEgdHlyYW50J3MgbGlmZSwgaGUgZGllZCBpbiBkZWZlbmNlIG9mIHRoZSBmcmVlZG9tIG9mIFRoZXNzYWx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhvc2UgZnVuZXJhbCByaXRlcyB3ZXJlIG5ldmVyIHN1cnBhc3NlZCBpbiBzcGxlbmRvdXIsIGluIHRoZSBvcGluaW9uIG9mIHRob3NlIHdobyBkbyBub3QgdGhpbmsgc3BsZW5kb3VyIHRvIGNvbnNpc3QgaW4gaXZvcnksIGdvbGQsIGFuZCBwdXJwbGUsIGxpa2UgUGhpbGlzdHVzLCB3aG8gdGVsbHMgaW4gd29uZGVyaW5nIHN0cmFpbnMgYWJvdXQgdGhlIGZ1bmVyYWwgb2YgRGlvbnlzaXVzLCB3aGljaCBmb3JtZWQgdGhlIHBvbXBvdXMgY29uY2x1c2lvbiBvZiB0aGUgZ3JlYXQgdHJhZ2VkeSBvZiBoaXMgdHlyYW5ueS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsZXhhbmRlciB0aGUgR3JlYXQsIHRvbywgd2hlbiBIZXBoYWVzdGlvbiBkaWVkLCBub3Qgb25seSBzaGVhcmVkIHRoZSBtYW5lcyBvZiBoaXMgaG9yc2VzIGFuZCBtdWxlcywgYnV0IGFjdHVhbGx5IHRvb2sgYXdheSB0aGUgYmF0dGxlbWVudHMgb2YgdGhlIGNpdHktd2FsbHMsIGluIG9yZGVyIHRoYXQgdGhlIGNpdGllcyBtaWdodCBzZWVtIHRvIGJlIGluIG1vdXJuaW5nLCBhc3N1bWluZyBhIHNob3JuIGFuZCBkaXNoZXZlbGxlZCBhcHBlYXJhbmNlIGluc3RlYWQgb2YgdGhlaXIgZm9ybWVyIGJlYXV0eS4gIFRoZXNlIGhvbm91cnMsIGhvd2V2ZXIsIHdlcmUgZGljdGF0ZWQgYnkgZGVzcG90cywgd2VyZSBwZXJmb3JtZWQgdW5kZXIgc3Ryb25nIGNvbXB1bHNpb24sIGFuZCB3ZXJlIGF0dGVuZGVkIHdpdGggZW52eSBvZiB0aG9zZSB3aG8gcmVjZWl2ZWQgdGhlbSBhbmQgaGF0cmVkIG9mIHRob3NlIHdobyBlbmZvcmNlZCB0aGVtOyB0aGV5IHdlcmUgYSBtYW5pZmVzdGF0aW9uIG9mIG5vIGdyYXRpdHVkZSBvciBlc3RlZW0gd2hhdGV2ZXIsIGJ1dCBvZiBiYXJiYXJpYyBwb21wIGFuZCBsdXh1cnkgYW5kIHZhaW4tZ2xvcnksIG9uIHRoZSBwYXJ0IG9mIG1lbiB3aG8gbGF2aXNoZWQgdGhlaXIgc3VwZXJmbHVvdXMgd2VhbHRoIG9uIHZhaW4gYW5kIHNvcnJ5IHByYWN0aWNlcy4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IGEgbWFuIHdobyB3YXMgYSBjb21tb25lciwgZHlpbmcgaW4gYSBzdHJhbmdlIGNvdW50cnksIGluIHRoZSBhYnNlbmNlIG9mIHdpZmUsIGNoaWxkcmVuLCBhbmQga2luc21lbiwgbm9uZSBhc2tpbmcgYW5kIG5vbmUgY29tcGVsbGluZyBpdCwgc2hvdWxkIGJlIGVzY29ydGVkIGFuZCBjYXJyaWVkIGZvcnRoIGFuZCBjcm93bmVkIGJ5IHNvIG1hbnkgcGVvcGxlcyBhbmQgY2l0aWVzIGVhZ2VyIHRvIHNob3cgaGltIGhvbm91ciwgcmlnaHRseSBzZWVtZWQgdG8gYXJndWUgaGltIHN1cHJlbWVseSBmb3J0dW5hdGUuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZGVhdGggb2YgbWVuIGluIHRoZSBob3VyIG9mIHRoZWlyIHRyaXVtcGggaXMgbm90LCBhcyBBZXNvcCB1c2VkIHRvIHNheSwgbW9zdCBncmlldm91cywgYnV0IG1vc3QgYmxlc3NlZCwgc2luY2UgaXQgcHV0cyBpbiBzYWZlIGtlZXBpbmcgdGhlaXIgZW5qb3ltZW50IG9mIHRoZWlyICAgYmxlc3NpbmdzIGFuZCBsZWF2ZXMgbm8gcm9vbSBmb3IgY2hhbmdlIG9mIGZvcnR1bmUuICBUaGVyZWZvcmUgdGhlIFNwYXJ0YW4ncyBhZHZpY2Ugd2FzIGJldHRlciwgd2hvLCB3aGVuIGhlIGdyZWV0ZWQgRGlhZ29yYXMsIHRoZSBPbHltcGlhbiB2aWN0b3IsIHdobyBoYWQgbGl2ZWQgdG8gc2VlIGhpcyBzb25zIGNyb3duZWQgYXQgT2x5bXBpYSwgeWVzLCBhbmQgdGhlIHNvbnMgb2YgaGlzIHNvbnMgYW5kIGRhdWdodGVycywgc2FpZDsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRpZSBub3csIERpYWdvcmFzOyB0aG91IGNhbnN0IG5vdCBhc2NlbmQgdG8gT2x5bXB1cy48L3E+ICAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmUgd291bGQgbm90IGRlaWduLCBJIHRoaW5rLCB0byBjb21wYXJlIGFsbCB0aGUgT2x5bXBpYW4gYW5kIFB5dGhpYW4gdmljdG9yaWVzIHB1dCB0b2dldGhlciB3aXRoIG9uZSBvZiB0aGUgc3RydWdnbGVzIG9mIFBlbG9waWRhczsgdGhlc2Ugd2VyZSBtYW55LCBhbmQgaGUgbWFkZSB0aGVtIHN1Y2Nlc3NmdWxseSwgYW5kIGFmdGVyIGxpdmluZyBtb3N0IG9mIGhpcyBsaWZlIGluIGZhbWUgYW5kIGhvbm91ciwgYXQgbGFzdCwgd2hpbGUgYm9lb3RhcmNoIGZvciB0aGUgdGhpcnRlZW50aCB0aW1lLCBwZXJmb3JtaW5nIGEgZGVlZCBvZiBoaWdoIHZhbG91ciB3aGljaCBhaW1lZCBhdCBhIHR5cmFudCdzIGxpZmUsIGhlIGRpZWQgaW4gZGVmZW5jZSBvZiB0aGUgZnJlZWRvbSBvZiBUaGVzc2FseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGRlYXRoIG9mIFBlbG9waWRhcyBicm91Z2h0IGdyZWF0IGdyaWVmIHRvIGhpcyBhbGxpZXMsIGJ1dCBldmVuIGdyZWF0ZXIgZ2Fpbi4gICBGb3IgdGhlIFRoZWJhbnMsIHdoZW4gdGhleSBsZWFybmVkIG9mIGl0LCBkZWxheWVkIG5vdCB0aGVpciB2ZW5nZWFuY2UsIGJ1dCBzcGVlZGlseSBtYWRlIGFuIGV4cGVkaXRpb24gd2l0aCBzZXZlbiB0aG91c2FuZCAgbWVuLWF0LWFybXMgYW5kIHNldmVuIGh1bmRyZWQgaG9yc2VtZW4sIHVuZGVyICB0aGUgY29tbWFuZCBvZiBNYWxjaXRhcyBhbmQgRGlvZ2VpdG9uLiAgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBmb3VuZCBBbGV4YW5kZXIgd2Vha2VuZWQgYW5kIHJvYmJlZCBvZiBoaXMgZm9yY2VzLCBhbmQgY29tcGVsbGVkIGhpbSB0byByZXN0b3JlIHRvIHRoZSBUaGVzc2FsaWFucyB0aGUgY2l0aWVzIGhlIGhhZCB0YWtlbiBmcm9tIHRoZW0sIHRvIHdpdGhkcmF3IGhpcyBnYXJyaXNvbnMgYW5kIHNldCBmcmVlIHRoZSBNYWduZXNpYW5zIGFuZCB0aGUgQWNoYWVhbnMgb2YgUGh0aGlvdGlzLCBhbmQgdG8gdGFrZSBvYXRoIHRoYXQgaGUgd291bGQgZm9sbG93IHRoZSBsZWFkIG9mIHRoZSBUaGViYW5zIGFnYWluc3QgYW55IGVuZW1pZXMgYWNjb3JkaW5nIHRvIHRoZWlyIGJpZGRpbmcuICBUaGUgVGhlYmFucywgdGhlbiwgd2VyZSBzYXRpc2ZpZWQgd2l0aCB0aGlzOyBidXQgdGhlIGdvZHMgc29vbiBhZnRlcndhcmRzIGF2ZW5nZWQgUGVsb3BpZGFzLCBhcyBJIHNoYWxsIG5vdyByZWxhdGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGRlYXRoIG9mIFBlbG9waWRhcyBicm91Z2h0IGdyZWF0IGdyaWVmIHRvIGhpcyBhbGxpZXMsIGJ1dCBldmVuIGdyZWF0ZXIgZ2Fpbi4gICBGb3IgdGhlIFRoZWJhbnMsIHdoZW4gdGhleSBsZWFybmVkIG9mIGl0LCBkZWxheWVkIG5vdCB0aGVpciB2ZW5nZWFuY2UsIGJ1dCBzcGVlZGlseSBtYWRlIGFuIGV4cGVkaXRpb24gd2l0aCBzZXZlbiB0aG91c2FuZCAgbWVuLWF0LWFybXMgYW5kIHNldmVuIGh1bmRyZWQgaG9yc2VtZW4sIHVuZGVyICB0aGUgY29tbWFuZCBvZiBNYWxjaXRhcyBhbmQgRGlvZ2VpdG9uLiAgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZm91bmQgQWxleGFuZGVyIHdlYWtlbmVkIGFuZCByb2JiZWQgb2YgaGlzIGZvcmNlcywgYW5kIGNvbXBlbGxlZCBoaW0gdG8gcmVzdG9yZSB0byB0aGUgVGhlc3NhbGlhbnMgdGhlIGNpdGllcyBoZSBoYWQgdGFrZW4gZnJvbSB0aGVtLCB0byB3aXRoZHJhdyBoaXMgZ2Fycmlzb25zIGFuZCBzZXQgZnJlZSB0aGUgTWFnbmVzaWFucyBhbmQgdGhlIEFjaGFlYW5zIG9mIFBodGhpb3RpcywgYW5kIHRvIHRha2Ugb2F0aCB0aGF0IGhlIHdvdWxkIGZvbGxvdyB0aGUgbGVhZCBvZiB0aGUgVGhlYmFucyBhZ2FpbnN0IGFueSBlbmVtaWVzIGFjY29yZGluZyB0byB0aGVpciBiaWRkaW5nLiAgVGhlIFRoZWJhbnMsIHRoZW4sIHdlcmUgc2F0aXNmaWVkIHdpdGggdGhpczsgYnV0IHRoZSBnb2RzIHNvb24gYWZ0ZXJ3YXJkcyBhdmVuZ2VkIFBlbG9waWRhcywgYXMgSSBzaGFsbCBub3cgcmVsYXRlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCBUaGViZSwgdGhlIHR5cmFudCdzIHdpZmUsIGFzIEkgaGF2ZSBzYWlkLCBoYWQgYmVlbiB0YXVnaHQgYnkgUGVsb3BpZGFzIG5vdCB0byBmZWFyIHRoZSBvdXR3YXJkIHNwbGVuZG91ciBhbmQgYXJyYXkgb2YgQWxleGFuZGVyLCBzaW5jZSB0aGVzZSBkZXBlbmRlZCB3aG9sbHkgb24gaGlzIGFybWVkIGd1YXJkczsgYW5kIG5vdywgaW4gaGVyIGRyZWFkIG9mIGhpcyBmYWl0aGxlc3NuZXNzIGFuZCBoZXIgaGF0cmVkIG9mIGhpcyBjcnVlbHR5LCBzaGUgY29uc3BpcmVkIHdpdGggaGVyIHRocmVlIGJyb3RoZXJzLCBUaXNpcGhvbnVzLCBQeXRob2xhw7xzLCBhbmQgTHljb3Bocm9uLCBhbmQgbWFkZSBhbiBhdHRlbXB0IHVwb24gaGlzIGxpZmUsIGFzIGZvbGxvd3MuICAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVzdCBvZiB0aGUgdHlyYW50J3MgaG91c2Ugd2FzIGd1YXJkZWQgYnkgc2VudHJpZXMgYXQgbmlnaHQsIGJ1dCB0aGUgYmVkLWNoYW1iZXIsIHdoZXJlIGhlIGFuZCBoaXMgd2lmZSB3ZXJlIHdvbnQgdG8gc2xlZXAsIHdhcyBhbiB1cHBlciByb29tLCBhbmQgaW4gZnJvbnQgb2YgaXQgYSBjaGFpbmVkIGRvZyBrZXB0IGd1YXJkLCB3aGljaCB3b3VsZCBhdHRhY2sgZXZlcnlvbmUgZXhjZXB0IGhpcyBtYXN0ZXIgYW5kIG1pc3RyZXNzIGFuZCB0aGUgb25lIHNlcnZhbnQgd2hvIGZlZCBoaW0uICBXaGVuLCB0aGVyZWZvcmUsIFRoZWJlIHdhcyBhYm91dCB0byBtYWtlIGhlciBhdHRlbXB0LCBzaGUga2VwdCBoZXIgYnJvdGhlcnMgaGlkZGVuIGFsbCBkYXkgaW4gYSByb29tIGhhcmQgYnksIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhdCBuaWdodCwgYXMgc2hlIHdhcyB3b250LCB3ZW50IGluIGFsb25lIHRvIEFsZXhhbmRlci4gICBTaGUgZm91bmQgaGltIGFscmVhZHkgYXNsZWVwLCBhbmQgYWZ0ZXIgYSBsaXR0bGUsIGNvbWluZyBvdXQgYWdhaW4sIG9yZGVyZWQgdGhlIHNlcnZhbnQgdG8gdGFrZSB0aGUgZG9nIG91dGRvb3JzLCBmb3IgaGlzIG1hc3RlciB3YW50ZWQgdG8gc2xlZXAgdW5kaXN0dXJiZWQ7IGFuZCB0byBrZWVwIHRoZSBzdGFpcnMgZnJvbSBjcmVha2luZyBhcyB0aGUgeW91bmcgbWVuIGNhbWUgdXAsIHNoZSBjb3ZlcmVkIHRoZW0gd2l0aCB3b29sLiAgIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGJyaW5naW5nIGhlciBicm90aGVycyBzYWZlbHkgdXAsIHdpdGggdGhlaXIgc3dvcmRzLCBhbmQgc3RhdGlvbmluZyB0aGVtIGluIGZyb250IG9mIHRoZSBkb29yLCBzaGUgd2VudCBpbiBoZXJzZWxmLCBhbmQgdGFraW5nIGRvd24gdGhlIHN3b3JkIHRoYXQgaHVuZyBvdmVyIGhlciBodXNiYW5kJ3MgaGVhZCwgc2hvd2VkIGl0IHRvIHRoZW0gYXMgYSBzaWduIHRoYXQgaGUgd2FzIGZhc3QgYXNsZWVwLiAgRmluZGluZyB0aGUgeW91bmcgbWVuIHRlcnJpZmllZCBhbmQgcmVsdWN0YW50LCBzaGUgdXBicmFpZGVkIHRoZW0sIGFuZCBzd29yZSBpbiBhIHJhZ2UgdGhhdCBzaGUgd291bGQgd2FrZSBBbGV4YW5kZXIgaGVyc2VsZiBhbmQgdGVsbCBoaW0gb2YgdGhlIHBsb3QsIGFuZCBzbyBsZWQgdGhlbSwgYXNoYW1lZCBhbmQgZmVhcmZ1bCB0b28sIGluc2lkZSwgYW5kIHBsYWNlZCB0aGVtIHJvdW5kIHRoZSBiZWQsIHRvIHdoaWNoIHNoZSBicm91Z2h0IHRoZSBsYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIG9uZSBvZiB0aGVtIGNsdXRjaGVkIHRoZSB0eXJhbnQncyBmZWV0IGFuZCBoZWxkIHRoZW0gZG93biwgYW5vdGhlciBkcmFnZ2VkIGhpcyBoZWFkIGJhY2sgYnkgdGhlIGhhaXIsIGFuZCB0aGUgdGhpcmQgcmFuIGhpbSB0aHJvdWdoIHdpdGggaGlzIHN3b3JkLiAgIFRoZSBzd2lmdG5lc3Mgb2YgaXQgbWFkZSBoaXMgZGVhdGggYSBtaWxkZXIgb25lLCBwZXJoYXBzLCB0aGFuIHdhcyBoaXMgZHVlOyBidXQgc2luY2UgaGUgd2FzIHRoZSBvbmx5LCBvciB0aGUgZmlyc3QsIHR5cmFudCB0byBkaWUgYXQgdGhlIGhhbmRzIG9mIGhpcyBvd24gd2lmZSwgYW5kIHNpbmNlIGhpcyBib2R5IHdhcyBvdXRyYWdlZCBhZnRlciBkZWF0aCwgYmVpbmcgY2FzdCBvdXQgYW5kIHRyb2RkZW4gdW5kZXIgZm9vdCBieSB0aGUgUGhlcmFlYW5zLCBoZSBtYXkgYmUgdGhvdWdodCB0byBoYXZlIHN1ZmZlcmVkIHdoYXQgaGlzIGxhd2xlc3MgZGVlZHMgZGVzZXJ2ZWQuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIFRoZWJlLCB0aGUgdHlyYW50J3Mgd2lmZSwgYXMgSSBoYXZlIHNhaWQsIGhhZCBiZWVuIHRhdWdodCBieSBQZWxvcGlkYXMgbm90IHRvIGZlYXIgdGhlIG91dHdhcmQgc3BsZW5kb3VyIGFuZCBhcnJheSBvZiBBbGV4YW5kZXIsIHNpbmNlIHRoZXNlIGRlcGVuZGVkIHdob2xseSBvbiBoaXMgYXJtZWQgZ3VhcmRzOyBhbmQgbm93LCBpbiBoZXIgZHJlYWQgb2YgaGlzIGZhaXRobGVzc25lc3MgYW5kIGhlciBoYXRyZWQgb2YgaGlzIGNydWVsdHksIHNoZSBjb25zcGlyZWQgd2l0aCBoZXIgdGhyZWUgYnJvdGhlcnMsIFRpc2lwaG9udXMsIFB5dGhvbGHDvHMsIGFuZCBMeWNvcGhyb24sIGFuZCBtYWRlIGFuIGF0dGVtcHQgdXBvbiBoaXMgbGlmZSwgYXMgZm9sbG93cy4gIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIHRoZSB0eXJhbnQncyBob3VzZSB3YXMgZ3VhcmRlZCBieSBzZW50cmllcyBhdCBuaWdodCwgYnV0IHRoZSBiZWQtY2hhbWJlciwgd2hlcmUgaGUgYW5kIGhpcyB3aWZlIHdlcmUgd29udCB0byBzbGVlcCwgd2FzIGFuIHVwcGVyIHJvb20sIGFuZCBpbiBmcm9udCBvZiBpdCBhIGNoYWluZWQgZG9nIGtlcHQgZ3VhcmQsIHdoaWNoIHdvdWxkIGF0dGFjayBldmVyeW9uZSBleGNlcHQgaGlzIG1hc3RlciBhbmQgbWlzdHJlc3MgYW5kIHRoZSBvbmUgc2VydmFudCB3aG8gZmVkIGhpbS4gIFdoZW4sIHRoZXJlZm9yZSwgVGhlYmUgd2FzIGFib3V0IHRvIG1ha2UgaGVyIGF0dGVtcHQsIHNoZSBrZXB0IGhlciBicm90aGVycyBoaWRkZW4gYWxsIGRheSBpbiBhIHJvb20gaGFyZCBieSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhdCBuaWdodCwgYXMgc2hlIHdhcyB3b250LCB3ZW50IGluIGFsb25lIHRvIEFsZXhhbmRlci4gICBTaGUgZm91bmQgaGltIGFscmVhZHkgYXNsZWVwLCBhbmQgYWZ0ZXIgYSBsaXR0bGUsIGNvbWluZyBvdXQgYWdhaW4sIG9yZGVyZWQgdGhlIHNlcnZhbnQgdG8gdGFrZSB0aGUgZG9nIG91dGRvb3JzLCBmb3IgaGlzIG1hc3RlciB3YW50ZWQgdG8gc2xlZXAgdW5kaXN0dXJiZWQ7IGFuZCB0byBrZWVwIHRoZSBzdGFpcnMgZnJvbSBjcmVha2luZyBhcyB0aGUgeW91bmcgbWVuIGNhbWUgdXAsIHNoZSBjb3ZlcmVkIHRoZW0gd2l0aCB3b29sLiAgIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['35.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGJyaW5naW5nIGhlciBicm90aGVycyBzYWZlbHkgdXAsIHdpdGggdGhlaXIgc3dvcmRzLCBhbmQgc3RhdGlvbmluZyB0aGVtIGluIGZyb250IG9mIHRoZSBkb29yLCBzaGUgd2VudCBpbiBoZXJzZWxmLCBhbmQgdGFraW5nIGRvd24gdGhlIHN3b3JkIHRoYXQgaHVuZyBvdmVyIGhlciBodXNiYW5kJ3MgaGVhZCwgc2hvd2VkIGl0IHRvIHRoZW0gYXMgYSBzaWduIHRoYXQgaGUgd2FzIGZhc3QgYXNsZWVwLiAgRmluZGluZyB0aGUgeW91bmcgbWVuIHRlcnJpZmllZCBhbmQgcmVsdWN0YW50LCBzaGUgdXBicmFpZGVkIHRoZW0sIGFuZCBzd29yZSBpbiBhIHJhZ2UgdGhhdCBzaGUgd291bGQgd2FrZSBBbGV4YW5kZXIgaGVyc2VsZiBhbmQgdGVsbCBoaW0gb2YgdGhlIHBsb3QsIGFuZCBzbyBsZWQgdGhlbSwgYXNoYW1lZCBhbmQgZmVhcmZ1bCB0b28sIGluc2lkZSwgYW5kIHBsYWNlZCB0aGVtIHJvdW5kIHRoZSBiZWQsIHRvIHdoaWNoIHNoZSBicm91Z2h0IHRoZSBsYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
