var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgYXJlIHNvbWUgd2hvIGRlbGlnaHQgdG8gY29sbGVjdCwgZnJvbSByZWFkaW5nIGFuZCBoZWFyc2F5LCBzdWNoIGFjY2lkZW50YWwgaGFwcGVuaW5ncyBhcyBsb29rIGxpa2Ugd29ya3Mgb2YgY2FsY3VsYXRpb24gYW5kIGZvcmV0aG91Z2h0LiBUaGV5IG5vdGUsIGZvciBleGFtcGxlLCB0aGF0IHRoZXJlIHdlcmUgdHdvIGNlbGVicmF0ZWQgcGVyc29ucyBjYWxsZWQgQXR0aXMsIG9uZSBhIFN5cmlhbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzdG9yeSBvZiBhIEx5ZGlhbiBBdHRpcyB3aG8gd2FzIGtpbGxlZCBieSBhIHdpbGQgYm9hciBpcyB0b2xkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDcuMTcuNSIgdmFsaWQ9InllcyI+UGF1c2FuaWFzLCB2aWkuIDE3LCA1PC9iaWJsPjsgdGhhdCBvZiB0aGUgQXJjYWRpYW4gQXR0aXMgaXMgdW5rbm93bi4gPC9ub3RlPiB0aGUgb3RoZXIgYW4gQXJjYWRpYW4sIGFuZCB0aGF0IGJvdGggd2VyZSBraWxsZWQgYnkgYSB3aWxkIGJvYXI7IHRoYXQgdGhlcmUgd2VyZSB0d28gQWN0YWVvbnMsIG9uZSBvZiB3aG9tIHdhcyB0b3JuIGluIHBpZWNlcyBieSBoaXMgZG9ncywgdGhlIG90aGVyIGJ5IGhpcyBsb3ZlcnM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiA3LjE3LjUiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcywgdmlpLiAxNywgNTwvYmlibD47IHRoYXQgb2YgdGhlIEFyY2FkaWFuIEF0dGlzIGlzIHVua25vd24uIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIEFjdGFlb24sIHNvbiBvZiBBcmlzdGFldXMsIHdobyBzYXcgQXJ0ZW1pcyBiYXRoaW5nLCB3YXMgY2hhbmdlZCBieSB0aGUgZ29kZGVzcyBpbnRvIGEgc3RhZyBhbmQgZGV2b3VyZWQgYnkgaGlzIG93biBkb2dzLiBBbiBBY3RhZW9uLCBzb24gb2YgTWVsaXNzdXMsIHdhcyBiZWxvdmVkIGJ5IEFyY2hpYXMgb2YgQ29yaW50aCwgd2hvIHNvdWdodCB0byB0YWtlIGhpbSBhd2F5IGJ5IHZpb2xlbmNlLiBUaGUgZnJpZW5kcyBvZiBBY3RhZW9uIHJlc2lzdGVkLCBhbmQgaW4gdGhlIHN0cnVnZ2xlIEFjdGFlb24gd2FzIHRvcm4gdG8gZGVhdGggKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNzcyIj5QbHV0YXJjaCwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDc3MjwvYmlibD4pLjwvbm90ZT47IHRoYXQgdGhlcmUgd2VyZSB0d28gU2NpcGlvcywgYnkgb25lIG9mIHdob20gdGhlIENhcnRoYWdpbmlhbnMgd2VyZSBjb25xdWVyZWQgaW4gYW4gZWFybGllciB3YXIsIGFuZCBieSB0aGUgb3RoZXIsIGluIGEgbGF0ZXIgd2FyLCB3ZXJlIGRlc3Ryb3llZCByb290IGFuZCBicmFuY2g7IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA3NzIiPlBsdXRhcmNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gNzcyPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDc3MjwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgSWxpdW0gd2FzIHRha2VuIGJ5IEhlcmFjbGVzIG9uIGFjY291bnQgb2YgdGhlIGhvcnNlcyBvZiBMYW9tZWRvbiwgYnkgQWdhbWVtbm9uIGJ5IG1lYW5zIG9mIHdoYXQgaXMgY2FsbGVkIHRoZSB3b29kZW4gaG9yc2UsIGFuZCBhIHRoaXJkIHRpbWUgYnkgQ2hhcmlkZW11cywgYmVjYXVzZSBhIGhvcnNlIGZlbGwgaW4gdGhlIGdhdGV3YXkgYW5kIHByZXZlbnRlZCB0aGUgSWxpYW5zIGZyb20gY2xvc2luZyB0aGUgZ2F0ZSBxdWlja2x5IGVub3VnaDsgdGhhdCB0aGVyZSBhcmUgdHdvIGNpdGllcyB3aGljaCBoYXZlIHRoZSBzYW1lIG5hbWUgYXMgdGhlIG1vc3QgZnJhZ3JhbnQgcGxhbnRzLCBJb3MgYW5kIFNteXJuYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPlZpb2xldDwvZW1waD4gYW5kIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TXlycmg8L2VtcGg+Ljwvbm90ZT4gaW4gb25lIG9mIHdoaWNoIHRoZSBwb2V0IEhvbWVyIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGJvcm4sIGFuZCBpbiB0aGUgb3RoZXIgdG8gaGF2ZSBkaWVkLiAKCQkJCTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmlvbGV0PC9lbXBoPiBhbmQgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5NeXJyaDwvZW1waD4uPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkkgd2lsbCB0aGVyZWZvcmUgbWFrZSB0aGlzIGFkZGl0aW9uIHRvIHRoZWlyIGNvbGxlY3Rpb24uIFRoZSBtb3N0IHdhcmxpa2Ugb2YgZ2VuZXJhbHMsIGFuZCB0aG9zZSB3aG8gYWNoaWV2ZWQgbW9zdCBieSBhIG1peHR1cmUgb2YgY3JhZnQgYW5kIGFiaWxpdHksIGhhdmUgYmVlbiBvbmUtZXllZCBtZW4s4oCUUGhpbGlwLCBBbnRpZ29udXMsIEhhbm5pYmFsLCBhbmQgdGhlIHN1YmplY3Qgb2YgdGhpcyBMaWZlLCBTZXJ0b3JpdXM7IG9mIHdob20gb25lIG1pZ2h0IHNheSB0aGF0IGhlIHdhcyBtb3JlIGNvbnRpbmVudCB3aXRoIHdvbWVuIHRoYW4gUGhpbGlwLCBtb3JlIGZhaXRoZnVsIHRvIGhpcyBmcmllbmRzIHRoYW4gQW50aWdvbnVzLCBtb3JlIG1lcmNpZnVsIHRvd2FyZHMgaGlzIGVuZW1pZXMgdGhhbiBIYW5uaWJhbCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbmZlcmlvciB0byBub25lIG9mIHRoZW0gaW4gdW5kZXJzdGFuZGluZywgdGhvdWdoIGluIGZvcnR1bmUgdG8gdGhlbSBhbGwuIEZvcnR1bmUgaGUgZXZlciBmb3VuZCBoYXJkZXIgdG8gZGVhbCB3aXRoIHRoYW4gaGlzIG9wZW4gZm9lcywgYW5kIHlldCBoZSBtYWRlIGhpbXNlbGYgZXF1YWwgdG8gdGhlIGV4cGVyaWVuY2Ugb2YgTWV0ZWxsdXMsIHRoZSBkYXJpbmcgb2YgUG9tcGV5LCB0aGUgZm9ydHVuZSBvZiBTdWxsYSwgYW5kIHRoZSBwb3dlciBvZiBSb21lLCB0aG91Z2ggaGUgd2FzIGFuIGV4aWxlIGFuZCBhIHN0cmFuZ2VyIGluIGNvbW1hbmQgb2YgQmFyYmFyaWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBoaW0gd2UgbWF5IGJlc3QgY29tcGFyZSwgYW1vbmcgdGhlIEdyZWVrcywgRXVtZW5lcyBvZiBDYXJkaWEuIEJvdGggd2VyZSBib3JuIHRvIGNvbW1hbmQgYW5kIGdpdmVuIHRvIHdhcnMgb2Ygc3RyYXRhZ2VtOyBib3RoIHdlcmUgZXhpbGVkIGZyb20gdGhlaXIgb3duIGNvdW50cmllcywgY29tbWFuZGVkIGZvcmVpZ24gc29sZGllcnMsIGFuZCBpbiB0aGVpciBkZWF0aHMgZXhwZXJpZW5jZWQgYSBmb3J0dW5lIHRoYXQgd2FzIGhhcnNoIGFuZCB1bmp1c3Q7IGZvciBib3RoIHdlcmUgdGhlIHZpY3RpbXMgb2YgcGxvdHMsIGFuZCB3ZXJlIHNsYWluIGJ5IHRoZSB2ZXJ5IG1lbiB3aXRoIHdob20gdGhleSB3ZXJlIGNvbnF1ZXJpbmcgdGhlaXIgZm9lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldpdGggaGltIHdlIG1heSBiZXN0IGNvbXBhcmUsIGFtb25nIHRoZSBHcmVla3MsIEV1bWVuZXMgb2YgQ2FyZGlhLiBCb3RoIHdlcmUgYm9ybiB0byBjb21tYW5kIGFuZCBnaXZlbiB0byB3YXJzIG9mIHN0cmF0YWdlbTsgYm90aCB3ZXJlIGV4aWxlZCBmcm9tIHRoZWlyIG93biBjb3VudHJpZXMsIGNvbW1hbmRlZCBmb3JlaWduIHNvbGRpZXJzLCBhbmQgaW4gdGhlaXIgZGVhdGhzIGV4cGVyaWVuY2VkIGEgZm9ydHVuZSB0aGF0IHdhcyBoYXJzaCBhbmQgdW5qdXN0OyBmb3IgYm90aCB3ZXJlIHRoZSB2aWN0aW1zIG9mIHBsb3RzLCBhbmQgd2VyZSBzbGFpbiBieSB0aGUgdmVyeSBtZW4gd2l0aCB3aG9tIHRoZXkgd2VyZSBjb25xdWVyaW5nIHRoZWlyIGZvZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UXVpbnR1cyBTZXJ0b3JpdXMgYmVsb25nZWQgdG8gYSBmYW1pbHkgb2Ygc29tZSBwcm9taW5lbmNlIGluIE51c3NhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk51cnNpYSwgaW4gTGF0aW4gd3JpdGVycywgYW5kIGluIEFteW90Ljwvbm90ZT4gYSBjaXR5IG9mIHRoZSBTYWJpbmVzLiBIYXZpbmcgbG9zdCBoaXMgZmF0aGVyLCBoZSB3YXMgcHJvcGVybHkgcmVhcmVkIGJ5IGEgd2lkb3dlZCBtb3RoZXIsIG9mIHdob20gaGUgYXBwZWFycyB0byBoYXZlIGJlZW4gZXhjZXNzaXZlbHkgZm9uZC4gSGlzIG1vdGhlcidzIG5hbWUsIHdlIGFyZSB0b2xkLCB3YXMgUmhlYS4gQXMgYSByZXN1bHQgb2YgaGlzIHRyYWluaW5nIGhlIHdhcyBzdWZmaWNpZW50bHkgdmVyc2VkIGluIGp1ZGljaWFsIHByb2NlZHVyZSwgYW5kIGFjcXVpcmVkIHNvbWUgaW5mbHVlbmNlIGFsc28gYXQgUm9tZSBmcm9tIGhpcyBlbG9xdWVuY2UsIGFsdGhvdWdoIGEgbWVyZSB5b3V0aDsgYnV0IGhpcyBicmlsbGlhbnQgc3VjY2Vzc2VzIGluIHdhciB0dXJuZWQgaGlzIGFtYml0aW9uIGluIHRoaXMgZGlyZWN0aW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5RdWludHVzIFNlcnRvcml1cyBiZWxvbmdlZCB0byBhIGZhbWlseSBvZiBzb21lIHByb21pbmVuY2UgaW4gTnVzc2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5OdXJzaWEsIGluIExhdGluIHdyaXRlcnMsIGFuZCBpbiBBbXlvdC48L25vdGU+IGEgY2l0eSBvZiB0aGUgU2FiaW5lcy4gSGF2aW5nIGxvc3QgaGlzIGZhdGhlciwgaGUgd2FzIHByb3Blcmx5IHJlYXJlZCBieSBhIHdpZG93ZWQgbW90aGVyLCBvZiB3aG9tIGhlIGFwcGVhcnMgdG8gaGF2ZSBiZWVuIGV4Y2Vzc2l2ZWx5IGZvbmQuIEhpcyBtb3RoZXIncyBuYW1lLCB3ZSBhcmUgdG9sZCwgd2FzIFJoZWEuIEFzIGEgcmVzdWx0IG9mIGhpcyB0cmFpbmluZyBoZSB3YXMgc3VmZmljaWVudGx5IHZlcnNlZCBpbiBqdWRpY2lhbCBwcm9jZWR1cmUsIGFuZCBhY3F1aXJlZCBzb21lIGluZmx1ZW5jZSBhbHNvIGF0IFJvbWUgZnJvbSBoaXMgZWxvcXVlbmNlLCBhbHRob3VnaCBhIG1lcmUgeW91dGg7IGJ1dCBoaXMgYnJpbGxpYW50IHN1Y2Nlc3NlcyBpbiB3YXIgdHVybmVkIGhpcyBhbWJpdGlvbiBpbiB0aGlzIGRpcmVjdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB3aGVuIHRoZSBDaW1icmkgYW5kIFRldXRvbmVzIGludmFkZWQgR2F1bCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMDUgQi5DLjwvbm90ZT4gaGUgc2VydmVkIHVuZGVyIENhZXBpbywgYW5kIGFmdGVyIHRoZSBSb21hbnMgaGFkIGJlZW4gZGVmZWF0ZWQgYW5kIHB1dCB0byBmbGlnaHQsIHRob3VnaCBoZSBoYWQgbG9zdCBoaXMgaG9yc2UgYW5kIGhhZCBiZWVuIHdvdW5kZWQgaW4gdGhlIGJvZHksIGhlIG1hZGUgaGlzIHdheSBhY3Jvc3MgdGhlIFJob25lLCBzd2ltbWluZywgc2hpZWxkIGFuZCBicmVhc3RwbGF0ZSBhbmQgYWxsLCBhZ2FpbnN0IGEgc3Ryb25nbHkgYWR2ZXJzZSBjdXJyZW50OyBzbyBzdHVyZHkgd2FzIGhpcyBib2R5IGFuZCBzbyBpbnVyZWQgdG8gaGFyZHNoaXBzIGJ5IHRyYWluaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbmV4dCBwbGFjZSwgd2hlbiB0aGUgc2FtZSBlbmVtaWVzIHdlcmUgY29taW5nIHVwIHdpdGggbWFueSBteXJpYWRzIG9mIG1lbiBhbmQgZHJlYWRmdWwgdGhyZWF0cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMDIgQi5DLjwvbm90ZT4gc28gdGhhdCBmb3IgYSBSb21hbiBldmVuIHRvIGhvbGQgaGlzIHBvc3QgYXQgc3VjaCBhIHRpbWUgYW5kIG9iZXkgaGlzIGdlbmVyYWwgd2FzIGEgZ3JlYXQgbWF0dGVyLCB3aGlsZSBNYXJpdXMgd2FzIGluIGNvbW1hbmQsIFNlcnRvcml1cyB1bmRlcnRvb2sgdG8gc3B5IG91dCB0aGUgZW5lbXkuIFNvLCBwdXR0aW5nIG9uIGEgQ2VsdGljIGRyZXNzIGFuZCBhY3F1aXJpbmcgdGhlIGNvbW1vbmVzdCBleHByZXNzaW9ucyBvZiB0aGF0IGxhbmd1YWdlIGZvciBzdWNoIGNvbnZlcnNhdGlvbiBhcyBtaWdodCBiZSBuZWNlc3NhcnksIGhlIG1pbmdsZWQgd2l0aCB0aGUgQmFyYmFyaWFuczsgYW5kIGFmdGVyIHNlZWluZyBvciBoZWFyaW5nIHdoYXQgd2FzIG9mIGltcG9ydGFuY2UsIGhlIGNhbWUgYmFjayB0byBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lLCB0aGVuLCBoZSByZWNlaXZlZCBhIHByaXplIGZvciB2YWxvdXI7IGFuZCBzaW5jZSwgZHVyaW5nIHRoZSByZXN0IG9mIHRoZSBjYW1wYWlnbiwgaGUgcGVyZm9ybWVkIG1hbnkgZGVlZHMgd2hpY2ggc2hvd2VkIGJvdGgganVkZ2VtZW50IGFuZCBkYXJpbmcsIGhlIHdhcyBhZHZhbmNlZCBieSBoaXMgZ2VuZXJhbCB0byBwb3NpdGlvbnMgb2YgaG9ub3VyIGFuZCB0cnVzdC4gQWZ0ZXIgdGhlIHdhciB3aXRoIHRoZSBDaW1icmkgYW5kIFRldXRvbmVzLCBoZSB3YXMgc2VudCBvdXQgYXMgbWlsaXRhcnkgdHJpYnVuZSBieSBEaWRpdXMgdGhlIHByYWV0b3IgdG8gU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gOTcgQi5DLiBEaWRpdXMgd2FzIHRoZW4gcHJvLWNvbnN1bC48L25vdGU+IGFuZCBzcGVudCB0aGUgd2ludGVyIGluIENhc3R1bG8sIGEgY2l0eSBvZiB0aGUgQ2VsdGliZXJpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZSBzb2xkaWVycyBzaG9vayBvZmYgYWxsIGRpc2NpcGxpbmUgaW4gdGhlIG1pZHN0IG9mIHBsZW50eSwgYW5kIHdlcmUgZHJ1bmsgbW9zdCBvZiB0aGUgdGltZSwgc28gdGhhdCB0aGUgQmFyYmFyaWFucyBjYW1lIHRvIGRlc3Bpc2UgdGhlbSwgYW5kIG9uZSBuaWdodCBzZW50IGZvciBhaWQgZnJvbSB0aGVpciBuZWlnaGJvdXJzLCB0aGUgT3JpdGFuaWFucywgYW5kIGZhbGxpbmcgdXBvbiB0aGUgUm9tYW5zIGluIHRoZWlyIHF1YXJ0ZXJzIGJlZ2FuIHRvIGtpbGwgdGhlbS4gQnV0IFNlcnRvcml1cyB3aXRoIGEgZmV3IG90aGVycyBzbGlwcGVkIG91dCwgYW5kIGFzc2VtYmxlZCB0aGUgc29sZGllcnMgd2hvIHdlcmUgbWFraW5nIHRoZWlyIGVzY2FwZSwgYW5kIHN1cnJvdW5kZWQgdGhlIGNpdHkuIEhlIGZvdW5kIHRoZSBnYXRlIG9wZW4gYnkgd2hpY2ggdGhlIEJhcmJhcmlhbnMgaGFkIHN0b2xlbiBpbiwgYnV0IGRpZCBub3QgcmVwZWF0IHRoZWlyIG1pc3Rha2U7IGluc3RlYWQsIGhlIHNldCBhIGd1YXJkIHRoZXJlLCBhbmQgdGhlbiwgdGFraW5nIHBvc3Nlc3Npb24gb2YgYWxsIHF1YXJ0ZXJzIG9mIHRoZSBjaXR5LCBzbGV3IGFsbCB0aGUgbWVuIHdobyB3ZXJlIG9mIGFnZSB0byBiZWFyIGFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIHNsYXVnaHRlciB3YXMgZW5kZWQsIGhlIG9yZGVyZWQgYWxsIGhpcyBzb2xkaWVycyB0byBsYXkgYXNpZGUgdGhlaXIgb3duIGFybW91ciBhbmQgY2xvdGhpbmcsIHRvIGFycmF5IHRoZW1zZWx2ZXMgaW4gdGhvc2Ugb2YgdGhlIEJhcmJhcmlhbnMsIGFuZCB0aGVuIHRvIGZvbGxvdyBoaW0gdG8gdGhlIGNpdHkgZnJvbSB3aGljaCB0aGUgbWVuIGNhbWUgd2hvIGhhZCBmYWxsZW4gdXBvbiB0aGVtIGluIHRoZSBuaWdodC4gSGF2aW5nIHRodXMgZGVjZWl2ZWQgdGhlIEJhcmJhcmlhbnMgYnkgbWVhbnMgb2YgdGhlIGFybW91ciB3aGljaCB0aGV5IHNhdywgaGUgZm91bmQgdGhlIGdhdGUgb2YgdGhlIGNpdHkgb3BlbiwgYW5kIGNhdWdodCBhIG11bHRpdHVkZSBvZiBtZW4gd2hvIHN1cHBvc2VkIHRoZXkgd2VyZSBjb21pbmcgZm9ydGggdG8gbWVldCBhIHN1Y2Nlc3NmdWwgcGFydHkgb2YgZnJpZW5kcyBhbmQgZmVsbG93IGNpdGl6ZW5zLiBUaGVyZWZvcmUgbW9zdCBvZiB0aGUgaW5oYWJpdGFudHMgd2VyZSBzbGF1Z2h0ZXJlZCBieSB0aGUgUm9tYW5zIGF0IHRoZSBnYXRlOyB0aGUgcmVzdCBzdXJyZW5kZXJlZCBhbmQgd2VyZSBzb2xkIGludG8gc2xhdmVyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB3aGVuIHRoZSBDaW1icmkgYW5kIFRldXRvbmVzIGludmFkZWQgR2F1bCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEwNSBCLkMuPC9ub3RlPiBoZSBzZXJ2ZWQgdW5kZXIgQ2FlcGlvLCBhbmQgYWZ0ZXIgdGhlIFJvbWFucyBoYWQgYmVlbiBkZWZlYXRlZCBhbmQgcHV0IHRvIGZsaWdodCwgdGhvdWdoIGhlIGhhZCBsb3N0IGhpcyBob3JzZSBhbmQgaGFkIGJlZW4gd291bmRlZCBpbiB0aGUgYm9keSwgaGUgbWFkZSBoaXMgd2F5IGFjcm9zcyB0aGUgUmhvbmUsIHN3aW1taW5nLCBzaGllbGQgYW5kIGJyZWFzdHBsYXRlIGFuZCBhbGwsIGFnYWluc3QgYSBzdHJvbmdseSBhZHZlcnNlIGN1cnJlbnQ7IHNvIHN0dXJkeSB3YXMgaGlzIGJvZHkgYW5kIHNvIGludXJlZCB0byBoYXJkc2hpcHMgYnkgdHJhaW5pbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBuZXh0IHBsYWNlLCB3aGVuIHRoZSBzYW1lIGVuZW1pZXMgd2VyZSBjb21pbmcgdXAgd2l0aCBtYW55IG15cmlhZHMgb2YgbWVuIGFuZCBkcmVhZGZ1bCB0aHJlYXRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTAyIEIuQy48L25vdGU+IHNvIHRoYXQgZm9yIGEgUm9tYW4gZXZlbiB0byBob2xkIGhpcyBwb3N0IGF0IHN1Y2ggYSB0aW1lIGFuZCBvYmV5IGhpcyBnZW5lcmFsIHdhcyBhIGdyZWF0IG1hdHRlciwgd2hpbGUgTWFyaXVzIHdhcyBpbiBjb21tYW5kLCBTZXJ0b3JpdXMgdW5kZXJ0b29rIHRvIHNweSBvdXQgdGhlIGVuZW15LiBTbywgcHV0dGluZyBvbiBhIENlbHRpYyBkcmVzcyBhbmQgYWNxdWlyaW5nIHRoZSBjb21tb25lc3QgZXhwcmVzc2lvbnMgb2YgdGhhdCBsYW5ndWFnZSBmb3Igc3VjaCBjb252ZXJzYXRpb24gYXMgbWlnaHQgYmUgbmVjZXNzYXJ5LCBoZSBtaW5nbGVkIHdpdGggdGhlIEJhcmJhcmlhbnM7IGFuZCBhZnRlciBzZWVpbmcgb3IgaGVhcmluZyB3aGF0IHdhcyBvZiBpbXBvcnRhbmNlLCBoZSBjYW1lIGJhY2sgdG8gTWFyaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lLCB0aGVuLCBoZSByZWNlaXZlZCBhIHByaXplIGZvciB2YWxvdXI7IGFuZCBzaW5jZSwgZHVyaW5nIHRoZSByZXN0IG9mIHRoZSBjYW1wYWlnbiwgaGUgcGVyZm9ybWVkIG1hbnkgZGVlZHMgd2hpY2ggc2hvd2VkIGJvdGgganVkZ2VtZW50IGFuZCBkYXJpbmcsIGhlIHdhcyBhZHZhbmNlZCBieSBoaXMgZ2VuZXJhbCB0byBwb3NpdGlvbnMgb2YgaG9ub3VyIGFuZCB0cnVzdC4gQWZ0ZXIgdGhlIHdhciB3aXRoIHRoZSBDaW1icmkgYW5kIFRldXRvbmVzLCBoZSB3YXMgc2VudCBvdXQgYXMgbWlsaXRhcnkgdHJpYnVuZSBieSBEaWRpdXMgdGhlIHByYWV0b3IgdG8gU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA5NyBCLkMuIERpZGl1cyB3YXMgdGhlbiBwcm8tY29uc3VsLjwvbm90ZT4gYW5kIHNwZW50IHRoZSB3aW50ZXIgaW4gQ2FzdHVsbywgYSBjaXR5IG9mIHRoZSBDZWx0aWJlcmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhlIHNvbGRpZXJzIHNob29rIG9mZiBhbGwgZGlzY2lwbGluZSBpbiB0aGUgbWlkc3Qgb2YgcGxlbnR5LCBhbmQgd2VyZSBkcnVuayBtb3N0IG9mIHRoZSB0aW1lLCBzbyB0aGF0IHRoZSBCYXJiYXJpYW5zIGNhbWUgdG8gZGVzcGlzZSB0aGVtLCBhbmQgb25lIG5pZ2h0IHNlbnQgZm9yIGFpZCBmcm9tIHRoZWlyIG5laWdoYm91cnMsIHRoZSBPcml0YW5pYW5zLCBhbmQgZmFsbGluZyB1cG9uIHRoZSBSb21hbnMgaW4gdGhlaXIgcXVhcnRlcnMgYmVnYW4gdG8ga2lsbCB0aGVtLiBCdXQgU2VydG9yaXVzIHdpdGggYSBmZXcgb3RoZXJzIHNsaXBwZWQgb3V0LCBhbmQgYXNzZW1ibGVkIHRoZSBzb2xkaWVycyB3aG8gd2VyZSBtYWtpbmcgdGhlaXIgZXNjYXBlLCBhbmQgc3Vycm91bmRlZCB0aGUgY2l0eS4gSGUgZm91bmQgdGhlIGdhdGUgb3BlbiBieSB3aGljaCB0aGUgQmFyYmFyaWFucyBoYWQgc3RvbGVuIGluLCBidXQgZGlkIG5vdCByZXBlYXQgdGhlaXIgbWlzdGFrZTsgaW5zdGVhZCwgaGUgc2V0IGEgZ3VhcmQgdGhlcmUsIGFuZCB0aGVuLCB0YWtpbmcgcG9zc2Vzc2lvbiBvZiBhbGwgcXVhcnRlcnMgb2YgdGhlIGNpdHksIHNsZXcgYWxsIHRoZSBtZW4gd2hvIHdlcmUgb2YgYWdlIHRvIGJlYXIgYXJtcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIHNsYXVnaHRlciB3YXMgZW5kZWQsIGhlIG9yZGVyZWQgYWxsIGhpcyBzb2xkaWVycyB0byBsYXkgYXNpZGUgdGhlaXIgb3duIGFybW91ciBhbmQgY2xvdGhpbmcsIHRvIGFycmF5IHRoZW1zZWx2ZXMgaW4gdGhvc2Ugb2YgdGhlIEJhcmJhcmlhbnMsIGFuZCB0aGVuIHRvIGZvbGxvdyBoaW0gdG8gdGhlIGNpdHkgZnJvbSB3aGljaCB0aGUgbWVuIGNhbWUgd2hvIGhhZCBmYWxsZW4gdXBvbiB0aGVtIGluIHRoZSBuaWdodC4gSGF2aW5nIHRodXMgZGVjZWl2ZWQgdGhlIEJhcmJhcmlhbnMgYnkgbWVhbnMgb2YgdGhlIGFybW91ciB3aGljaCB0aGV5IHNhdywgaGUgZm91bmQgdGhlIGdhdGUgb2YgdGhlIGNpdHkgb3BlbiwgYW5kIGNhdWdodCBhIG11bHRpdHVkZSBvZiBtZW4gd2hvIHN1cHBvc2VkIHRoZXkgd2VyZSBjb21pbmcgZm9ydGggdG8gbWVldCBhIHN1Y2Nlc3NmdWwgcGFydHkgb2YgZnJpZW5kcyBhbmQgZmVsbG93IGNpdGl6ZW5zLiBUaGVyZWZvcmUgbW9zdCBvZiB0aGUgaW5oYWJpdGFudHMgd2VyZSBzbGF1Z2h0ZXJlZCBieSB0aGUgUm9tYW5zIGF0IHRoZSBnYXRlOyB0aGUgcmVzdCBzdXJyZW5kZXJlZCBhbmQgd2VyZSBzb2xkIGludG8gc2xhdmVyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBjb25zZXF1ZW5jZSBvZiB0aGlzIGV4cGxvaXQgdGhlIG5hbWUgb2YgU2VydG9yaXVzIHdhcyBub2lzZWQgYWJyb2FkIGluIFNwYWluOyBhbmQgYXMgc29vbiBhcyBoZSByZXR1cm5lZCB0byBSb21lIGhlIHdhcyBhcHBvaW50ZWQgcXVhZXN0b3Igb2YgQ2lzYWxwaW5lIEdhdWwsIGFuZCBhdCBhIGNyaXRpY2FsIHRpbWUuIEZvciB0aGUgTWFyc2ljIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9yIFNvY2lhbCBXYXIsIDkwLTg4IEIuQy48L25vdGU+IHdhcyB0aHJlYXRlbmluZywgYW5kIGhlIHdhcyBvcmRlcmVkIHRvIGxldnkgdHJvb3BzIGFuZCBwcm9jdXJlIGFybXM7IHRvIHdoaWNoIHRhc2sgaGUgYnJvdWdodCBzdWNoIGVhcm5lc3RuZXNzIGFuZCBjZWxlcml0eSwgYXMgY29tcGFyZWQgd2l0aCB0aGUgc2xvd25lc3MgYW5kIGluZG9sZW5jZSBvZiB0aGUgb3RoZXIgeW91bmcgbWVuLCB0aGF0IGhlIGdvdCB0aGUgcmVwdXRhdGlvbiBvZiBhIG1hbiB3aG9zZSBsaWZlIHdvdWxkIGJlIG9uZSBvZiBncmVhdCBhY2hpZXZlbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgZGlkIG5vdCByZW1pdCB0aGUgYWN0aXZpdGllcyBvZiBhIGRhcmluZyBzb2xkaWVyIGFmdGVyIGhlIGhhZCBhZHZhbmNlZCB0byB0aGUgZGlnbml0eSBvZiBhIGNvbW1hbmRlciwgYnV0IGRpc3BsYXllZCBhc3RvbmlzaGluZyBkZWVkcyBvZiBwcm93ZXNzIGFuZCBleHBvc2VkIGhpcyBwZXJzb24gdW5zcGFyaW5nbHkgaW4gYmF0dGxlLCBpbiBjb25zZXF1ZW5jZSBvZiB3aGljaCBoZSBnb3QgYSBibG93IHRoYXQgY29zdCBoaW0gb25lIG9mIGhpcyBleWVzLiBCdXQgb24gdGhpcyBoZSBhY3R1YWxseSBwcmlkZWQgaGltc2VsZiBhdCBhbGwgdGltZXMuIE90aGVycywgaGUgc2FpZCwgY291bGQgbm90IGFsd2F5cyBjYXJyeSBhYm91dCB3aXRoIHRoZW0gdGhlIGV2aWRlbmNlcyBvZiB0aGVpciBicmF2ZSBkZWVkcywgYnV0IG11c3QgbGF5IGFzaWRlIHRoZWlyIG5lY2tsYWNlcywgc3BlYXJzLCBhbmQgd3JlYXRoczsgaW4gaGlzIG93biBjYXNlLCBvbiB0aGUgY29udHJhcnksIHRoZSBtYXJrcyBvZiBoaXMgYnJhdmVyeSByZW1haW5lZCB3aXRoIGhpbSwgYW5kIHdoZW4gbWVuIHNhdyB3aGF0IGhlIGhhZCBsb3N0LCB0aGV5IHNhdyBhdCB0aGUgc2FtZSB0aW1lIGEgcHJvb2Ygb2YgaGlzIHZhbG91ci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBlb3BsZSBhbHNvIHBhaWQgaGltIGZpdHRpbmcgaG9ub3Vycy4gRm9yLCB3aGVuIGhlIGNhbWUgaW50byB0aGUgdGhlYXRyZSwgdGhleSByZWNlaXZlZCBoaW0gd2l0aCBjbGFwcGluZyBvZiBoYW5kcyBhbmQgc2hvdXRzIG9mIHdlbGNvbWUsIHRlc3RpbW9uaWFscyB3aGljaCBldmVuIHRob3NlIHdobyB3ZXJlIGZhciBhZHZhbmNlZCBpbiB5ZWFycyBhbmQgaG9ub3VycyBjb3VsZCBub3QgZWFzaWx5IG9idGFpbi4gTm90d2l0aHN0YW5kaW5nIHRoaXMsIHdoZW4gaGUgc3Rvb2QgZm9yIHRoZSB0cmlidW5lc2hpcCwgU3VsbGEgZm9ybWVkIGEgcGFydHkgYWdhaW5zdCBoaW0sIGFuZCBoZSBsb3N0IHRoZSBlbGVjdGlvbjsgZm9yIHdoaWNoIHJlYXNvbiwgYXBwYXJlbnRseSwgaGUgYmVjYW1lIGFuIG9wcG9uZW50IG9mIFN1bGxhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gd2hlbiBNYXJpdXMgd2FzIG92ZXJ3aGVsbWVkIGJ5IFN1bGxhIGFuZCB3ZW50IGludG8gZXhpbGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODggQi5DLjwvbm90ZT4gYW5kIFN1bGxhIGhhZCBzZXQgb3V0IHRvIHdhZ2Ugd2FyIGFnYWluc3QgTWl0aHJpZGF0ZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TWFyaXVzPC90aXRsZT4sIHhsaS4gMTwvYmlibD4uPC9ub3RlPiBhbmQgb25lIG9mIHRoZSBjb25zdWxzLCBPY3Rhdml1cywgYWRoZXJlZCB0byB0aGUgcGFydHkgb2YgU3VsbGEsIHdoaWxlIHRoZSBvdGhlciwgQ2lubmEsIHdobyBhaW1lZCBhdCBhIHJldm9sdXRpb24sIHRyaWVkIHRvIHJldml2ZSB0aGUgZHJvb3BpbmcgZmFjdGlvbiBvZiBNYXJpdXMsIFNlcnRvcml1cyBhdHRhY2hlZCBoaW1zZWxmIHRvIENpbm5hLCBlc3BlY2lhbGx5IGFzIGhlIHNhdyB0aGF0IE9jdGF2aXVzIHdhcyByYXRoZXIgc2x1Z2dpc2ggaGltc2VsZiBhbmQgZGlzdHJ1c3RmdWwgb2YgdGhlIGZyaWVuZHMgb2YgTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BIGdyZWF0IGJhdHRsZSB3YXMgZm91Z2h0IGluIHRoZSBmb3J1bSBiZXR3ZWVuIHRoZSBjb25zdWxzLCBpbiB3aGljaCBPY3Rhdml1cyB3YXMgdmljdG9yaW91cywgYW5kIENpbm5hIGFuZCBTZXJ0b3JpdXMgdG9vayB0byBmbGlnaHQsIGFmdGVyIGxvc2luZyBhbG1vc3QgdGVuIHRob3VzYW5kIG1lbjsgYW5kIHRoZW4sIHdpbm5pbmcgb3ZlciB0byB0aGVpciBzaWRlIG1vc3Qgb2YgdGhlIHRyb29wcyBzdGlsbCBzY2F0dGVyZWQgYWJvdXQgSXRhbHksIHRoZXkgc29vbiBtYWRlIHRoZW1zZWx2ZXMgYWJsZSB0byBjb3BlIHdpdGggT2N0YXZpdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TWFyaXVzPC90aXRsZT4sIHhsaS4gMTwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBjb25zZXF1ZW5jZSBvZiB0aGlzIGV4cGxvaXQgdGhlIG5hbWUgb2YgU2VydG9yaXVzIHdhcyBub2lzZWQgYWJyb2FkIGluIFNwYWluOyBhbmQgYXMgc29vbiBhcyBoZSByZXR1cm5lZCB0byBSb21lIGhlIHdhcyBhcHBvaW50ZWQgcXVhZXN0b3Igb2YgQ2lzYWxwaW5lIEdhdWwsIGFuZCBhdCBhIGNyaXRpY2FsIHRpbWUuIEZvciB0aGUgTWFyc2ljIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T3IgU29jaWFsIFdhciwgOTAtODggQi5DLjwvbm90ZT4gd2FzIHRocmVhdGVuaW5nLCBhbmQgaGUgd2FzIG9yZGVyZWQgdG8gbGV2eSB0cm9vcHMgYW5kIHByb2N1cmUgYXJtczsgdG8gd2hpY2ggdGFzayBoZSBicm91Z2h0IHN1Y2ggZWFybmVzdG5lc3MgYW5kIGNlbGVyaXR5LCBhcyBjb21wYXJlZCB3aXRoIHRoZSBzbG93bmVzcyBhbmQgaW5kb2xlbmNlIG9mIHRoZSBvdGhlciB5b3VuZyBtZW4sIHRoYXQgaGUgZ290IHRoZSByZXB1dGF0aW9uIG9mIGEgbWFuIHdob3NlIGxpZmUgd291bGQgYmUgb25lIG9mIGdyZWF0IGFjaGlldmVtZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgcmVtaXQgdGhlIGFjdGl2aXRpZXMgb2YgYSBkYXJpbmcgc29sZGllciBhZnRlciBoZSBoYWQgYWR2YW5jZWQgdG8gdGhlIGRpZ25pdHkgb2YgYSBjb21tYW5kZXIsIGJ1dCBkaXNwbGF5ZWQgYXN0b25pc2hpbmcgZGVlZHMgb2YgcHJvd2VzcyBhbmQgZXhwb3NlZCBoaXMgcGVyc29uIHVuc3BhcmluZ2x5IGluIGJhdHRsZSwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggaGUgZ290IGEgYmxvdyB0aGF0IGNvc3QgaGltIG9uZSBvZiBoaXMgZXllcy4gQnV0IG9uIHRoaXMgaGUgYWN0dWFsbHkgcHJpZGVkIGhpbXNlbGYgYXQgYWxsIHRpbWVzLiBPdGhlcnMsIGhlIHNhaWQsIGNvdWxkIG5vdCBhbHdheXMgY2FycnkgYWJvdXQgd2l0aCB0aGVtIHRoZSBldmlkZW5jZXMgb2YgdGhlaXIgYnJhdmUgZGVlZHMsIGJ1dCBtdXN0IGxheSBhc2lkZSB0aGVpciBuZWNrbGFjZXMsIHNwZWFycywgYW5kIHdyZWF0aHM7IGluIGhpcyBvd24gY2FzZSwgb24gdGhlIGNvbnRyYXJ5LCB0aGUgbWFya3Mgb2YgaGlzIGJyYXZlcnkgcmVtYWluZWQgd2l0aCBoaW0sIGFuZCB3aGVuIG1lbiBzYXcgd2hhdCBoZSBoYWQgbG9zdCwgdGhleSBzYXcgYXQgdGhlIHNhbWUgdGltZSBhIHByb29mIG9mIGhpcyB2YWxvdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUgYWxzbyBwYWlkIGhpbSBmaXR0aW5nIGhvbm91cnMuIEZvciwgd2hlbiBoZSBjYW1lIGludG8gdGhlIHRoZWF0cmUsIHRoZXkgcmVjZWl2ZWQgaGltIHdpdGggY2xhcHBpbmcgb2YgaGFuZHMgYW5kIHNob3V0cyBvZiB3ZWxjb21lLCB0ZXN0aW1vbmlhbHMgd2hpY2ggZXZlbiB0aG9zZSB3aG8gd2VyZSBmYXIgYWR2YW5jZWQgaW4geWVhcnMgYW5kIGhvbm91cnMgY291bGQgbm90IGVhc2lseSBvYnRhaW4uIE5vdHdpdGhzdGFuZGluZyB0aGlzLCB3aGVuIGhlIHN0b29kIGZvciB0aGUgdHJpYnVuZXNoaXAsIFN1bGxhIGZvcm1lZCBhIHBhcnR5IGFnYWluc3QgaGltLCBhbmQgaGUgbG9zdCB0aGUgZWxlY3Rpb247IGZvciB3aGljaCByZWFzb24sIGFwcGFyZW50bHksIGhlIGJlY2FtZSBhbiBvcHBvbmVudCBvZiBTdWxsYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyB3aGVuIE1hcml1cyB3YXMgb3ZlcndoZWxtZWQgYnkgU3VsbGEgYW5kIHdlbnQgaW50byBleGlsZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg4IEIuQy48L25vdGU+IGFuZCBTdWxsYSBoYWQgc2V0IG91dCB0byB3YWdlIHdhciBhZ2FpbnN0IE1pdGhyaWRhdGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODcgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gNDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4bGkuIDE8L2JpYmw+Ljwvbm90ZT4gYW5kIG9uZSBvZiB0aGUgY29uc3VscywgT2N0YXZpdXMsIGFkaGVyZWQgdG8gdGhlIHBhcnR5IG9mIFN1bGxhLCB3aGlsZSB0aGUgb3RoZXIsIENpbm5hLCB3aG8gYWltZWQgYXQgYSByZXZvbHV0aW9uLCB0cmllZCB0byByZXZpdmUgdGhlIGRyb29waW5nIGZhY3Rpb24gb2YgTWFyaXVzLCBTZXJ0b3JpdXMgYXR0YWNoZWQgaGltc2VsZiB0byBDaW5uYSwgZXNwZWNpYWxseSBhcyBoZSBzYXcgdGhhdCBPY3Rhdml1cyB3YXMgcmF0aGVyIHNsdWdnaXNoIGhpbXNlbGYgYW5kIGRpc3RydXN0ZnVsIG9mIHRoZSBmcmllbmRzIG9mIE1hcml1cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpLiAxPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpLiAxPC90cmFuc2xhdGlvbj4="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkEgZ3JlYXQgYmF0dGxlIHdhcyBmb3VnaHQgaW4gdGhlIGZvcnVtIGJldHdlZW4gdGhlIGNvbnN1bHMsIGluIHdoaWNoIE9jdGF2aXVzIHdhcyB2aWN0b3Jpb3VzLCBhbmQgQ2lubmEgYW5kIFNlcnRvcml1cyB0b29rIHRvIGZsaWdodCwgYWZ0ZXIgbG9zaW5nIGFsbW9zdCB0ZW4gdGhvdXNhbmQgbWVuOyBhbmQgdGhlbiwgd2lubmluZyBvdmVyIHRvIHRoZWlyIHNpZGUgbW9zdCBvZiB0aGUgdHJvb3BzIHN0aWxsIHNjYXR0ZXJlZCBhYm91dCBJdGFseSwgdGhleSBzb29uIG1hZGUgdGhlbXNlbHZlcyBhYmxlIHRvIGNvcGUgd2l0aCBPY3Rhdml1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg3IEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpLiAxPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gNDEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4bGkuIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCB4bGkuIDE8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIE1hcml1cyBzYWlsZWQgaG9tZSBmcm9tIExpYnlhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiA0MS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1hcml1czwvdGl0bGU+LCB4bGkuIDIgZmY8L2JpYmw+Ljwvbm90ZT4gYW5kIHdhcyBwcm9wb3NpbmcgdG8gc2VydmUgdW5kZXIgQ2lubmEgYXMgYSBwcml2YXRlIGNpdGl6ZW4gdW5kZXIgYSBjb25zdWwsIHRoZSByZXN0IHRob3VnaHQgdGhhdCBoaXMgb2ZmZXIgc2hvdWxkIGJlIGFjY2VwdGVkLCBidXQgU2VydG9yaXVzIGRlY2xhcmVkIGFnYWluc3QgaXQsIGVpdGhlciBiZWNhdXNlIGhlIHRob3VnaHQgdGhhdCBDaW5uYSB3b3VsZCBwYXkgbGVzcyBhdHRlbnRpb24gdG8gaGltIHdoZW4gYSBtYW4gb2YgZ3JlYXRlciBtaWxpdGFyeSBleHBlcmllbmNlIHdhcyBhdCBoYW5kLCBvciBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgb2YgdGhlIGhhcnNobmVzcyBvZiBNYXJpdXMsIGFuZCBmZWFyZWQgdGhhdCBoZSB3b3VsZCB0aHJvdyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uIGJ5IGEgcGFzc2lvbiB3aGljaCBrbmV3IG5vIGxpbWl0cywgYW5kIGV4Y2VlZCB0aGUgYm91bmRzIG9mIGp1c3RpY2UgaW4gdGhlIGhvdXIgb2YgdmljdG9yeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHNhaWQgdGhhdCBsaXR0bGUgcmVtYWluZWQgZm9yIHRoZW0gdG8gZG8sIG5vdyB0aGF0IHRoZXkgd2VyZSBhbHJlYWR5IHZpY3RvcmlvdXMsIGFuZCB0aGF0IGlmIHRoZXkgcmVjZWl2ZWQgTWFyaXVzIGhlIHdvdWxkIGFwcHJvcHJpYXRlIHRvIGhpbXNlbGYgYWxsIHRoZSBnbG9yeSBhbmQgdGhlIHBvd2VyLCBzaW5jZSBoZSBmb3VuZCBpdCBoYXJkIHRvIHNoYXJlIGF1dGhvcml0eSBhbmQgd2FzIG5vdCB0byBiZSB0cnVzdGVkLiBDaW5uYSByZXBsaWVkIHRoYXQgdGhlc2UgY29uc2lkZXJhdGlvbnMgb2YgU2VydG9yaXVzIHdlcmUgc291bmQsIGJ1dCB0aGF0IGZvciBoaXMgcGFydCBoZSBoYWQgcGVycGxleGluZyBzY3J1cGxlcyBhYm91dCByZWplY3RpbmcgTWFyaXVzIGFmdGVyIGhhdmluZyBoaW1zZWxmIGludml0ZWQgaGltIHRvIGpvaW4gdGhlaXIgY2F1c2UuIFRvIHRoaXMgU2VydG9yaXVzIGFuc3dlcmVkOiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCBJIGZvciBteSBwYXJ0IHRob3VnaHQgdGhhdCBNYXJpdXMgd2FzIGNvbWUgb2YgaGlzIG93biBhY2NvcmQgaW50byBJdGFseSwgYW5kIHNvIEkgd2FzIHRyeWluZyB0byBkaXNjb3ZlciB3aGF0IHdhcyBhZHZhbnRhZ2VvdXMgaW4gdGhlIG1hdHRlcjsgYnV0IGluIHRoeSBjYXNlIGl0IHdhcyBub3Qgd2VsbCB0byBkZWxpYmVyYXRlIGF0IGFsbCBhZnRlciB0aGUgYXJyaXZhbCBvZiBvbmUgd2hvbSB0aG91IHRoeXNlbGYgZGlkc3QgYXNrIHRvIGNvbWU7IG5heSwgdGhvdSBzaG91bGRzdCBoYXZlIHJlY2VpdmVkIGFuZCBlbXBsb3llZCBoaW0sIHNpbmNlIGEgcGxlZGdlIGxlYXZlcyByb29tIGZvciBubyBkaXNjdXNzaW9uLjwvcT4gU28gQ2lubmEgc2VudCBmb3IgTWFyaXVzLCB0aGUgYXJteSB3YXMgZGl2aWRlZCBpbnRvIHRocmVlIHBhcnRzLCBhbmQgdGhlIHRocmVlIG1lbiBoZWxkIGNvbW1hbmQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBNYXJpdXMgc2FpbGVkIGhvbWUgZnJvbSBMaWJ5YTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQxLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpLiAyIGZmPC9iaWJsPi48L25vdGU+IGFuZCB3YXMgcHJvcG9zaW5nIHRvIHNlcnZlIHVuZGVyIENpbm5hIGFzIGEgcHJpdmF0ZSBjaXRpemVuIHVuZGVyIGEgY29uc3VsLCB0aGUgcmVzdCB0aG91Z2h0IHRoYXQgaGlzIG9mZmVyIHNob3VsZCBiZSBhY2NlcHRlZCwgYnV0IFNlcnRvcml1cyBkZWNsYXJlZCBhZ2FpbnN0IGl0LCBlaXRoZXIgYmVjYXVzZSBoZSB0aG91Z2h0IHRoYXQgQ2lubmEgd291bGQgcGF5IGxlc3MgYXR0ZW50aW9uIHRvIGhpbSB3aGVuIGEgbWFuIG9mIGdyZWF0ZXIgbWlsaXRhcnkgZXhwZXJpZW5jZSB3YXMgYXQgaGFuZCwgb3IgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIG9mIHRoZSBoYXJzaG5lc3Mgb2YgTWFyaXVzLCBhbmQgZmVhcmVkIHRoYXQgaGUgd291bGQgdGhyb3cgZXZlcnl0aGluZyBpbnRvIGNvbmZ1c2lvbiBieSBhIHBhc3Npb24gd2hpY2gga25ldyBubyBsaW1pdHMsIGFuZCBleGNlZWQgdGhlIGJvdW5kcyBvZiBqdXN0aWNlIGluIHRoZSBob3VyIG9mIHZpY3RvcnkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiA0MS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyaXVzPC90aXRsZT4sIHhsaS4gMiBmZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyaXVzPC90aXRsZT4sIHhsaS4gMiBmZjwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBzYWlkIHRoYXQgbGl0dGxlIHJlbWFpbmVkIGZvciB0aGVtIHRvIGRvLCBub3cgdGhhdCB0aGV5IHdlcmUgYWxyZWFkeSB2aWN0b3Jpb3VzLCBhbmQgdGhhdCBpZiB0aGV5IHJlY2VpdmVkIE1hcml1cyBoZSB3b3VsZCBhcHByb3ByaWF0ZSB0byBoaW1zZWxmIGFsbCB0aGUgZ2xvcnkgYW5kIHRoZSBwb3dlciwgc2luY2UgaGUgZm91bmQgaXQgaGFyZCB0byBzaGFyZSBhdXRob3JpdHkgYW5kIHdhcyBub3QgdG8gYmUgdHJ1c3RlZC4gQ2lubmEgcmVwbGllZCB0aGF0IHRoZXNlIGNvbnNpZGVyYXRpb25zIG9mIFNlcnRvcml1cyB3ZXJlIHNvdW5kLCBidXQgdGhhdCBmb3IgaGlzIHBhcnQgaGUgaGFkIHBlcnBsZXhpbmcgc2NydXBsZXMgYWJvdXQgcmVqZWN0aW5nIE1hcml1cyBhZnRlciBoYXZpbmcgaGltc2VsZiBpbnZpdGVkIGhpbSB0byBqb2luIHRoZWlyIGNhdXNlLiBUbyB0aGlzIFNlcnRvcml1cyBhbnN3ZXJlZDogCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCwgSSBmb3IgbXkgcGFydCB0aG91Z2h0IHRoYXQgTWFyaXVzIHdhcyBjb21lIG9mIGhpcyBvd24gYWNjb3JkIGludG8gSXRhbHksIGFuZCBzbyBJIHdhcyB0cnlpbmcgdG8gZGlzY292ZXIgd2hhdCB3YXMgYWR2YW50YWdlb3VzIGluIHRoZSBtYXR0ZXI7IGJ1dCBpbiB0aHkgY2FzZSBpdCB3YXMgbm90IHdlbGwgdG8gZGVsaWJlcmF0ZSBhdCBhbGwgYWZ0ZXIgdGhlIGFycml2YWwgb2Ygb25lIHdob20gdGhvdSB0aHlzZWxmIGRpZHN0IGFzayB0byBjb21lOyBuYXksIHRob3Ugc2hvdWxkc3QgaGF2ZSByZWNlaXZlZCBhbmQgZW1wbG95ZWQgaGltLCBzaW5jZSBhIHBsZWRnZSBsZWF2ZXMgcm9vbSBmb3Igbm8gZGlzY3Vzc2lvbi48L3E+IFNvIENpbm5hIHNlbnQgZm9yIE1hcml1cywgdGhlIGFybXkgd2FzIGRpdmlkZWQgaW50byB0aHJlZSBwYXJ0cywgYW5kIHRoZSB0aHJlZSBtZW4gaGVsZCBjb21tYW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSB3YXIgaGFkIGJlZW4gYnJvdWdodCB0byBhbiBlbmQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhhdCBpcywgd2hlbiB0aGUgcGFydHkgb2YgU3VsbGEgYW5kIHRoZSBzZW5hdGUgY2Vhc2VkIHRvIHJlc2lzdCBhbmQgUm9tZSBoYWQgc3VycmVuZGVyZWQuIDwvbm90ZT4gQ2lubmEgYW5kIE1hcml1cyB3ZXJlIGZpbGxlZCB3aXRoIGluc29sZW5jZSBhbmQgYWxsIGJpdHRlcm5lc3MsIGFuZCBtYWRlIHRoZSBldmlscyBvZiB3YXIgYXBwZWFyIGFzIGdvbGQgdG8gdGhlIFJvbWFuczsgU2VydG9yaXVzIGFsb25lLCBhcyB3ZSBhcmUgdG9sZCwgbmVpdGhlciBraWxsZWQgYW55IG9uZSB0byBncmF0aWZ5IGhpcyBhbmdlciwgbm9yIHdheGVkIGluc29sZW50IHdpdGggdmljdG9yeSwgYnV0IGFjdHVhbGx5IHJlYnVrZWQgTWFyaXVzLCBhbmQgYnkgcHJpdmF0ZSBpbnRlcnZpZXdzIGFuZCBlbnRyZWF0aWVzIG1hZGUgQ2lubmEgbW9yZSBtb2RlcmF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZpbmFsbHksIHRoZXJlIHdlcmUgdGhlIHNsYXZlcyB3aG9tIE1hcml1cyBoYWQgdXNlZCBhcyBhbGxpZXMgZHVyaW5nIHRoZSB3YXIgYW5kIGFzIGJvZHktZ3VhcmRzIG9mIGhpcyB0eXJhbm55LiBUaGV5IGhhZCB0aHVzIGJlY29tZSBwb3dlcmZ1bCBhbmQgcmljaCwgcGFydGx5IGJ5IHRoZSBwZXJtaXNzaW9uIGFuZCB1bmRlciB0aGUgb3JkZXJzIG9mIE1hcml1cywgYW5kIHBhcnRseSB0aHJvdWdoIHRoZWlyIGxhd2xlc3MgYW5kIHZpb2xlbnQgdHJlYXRtZW50IG9mIHRoZWlyIG1hc3RlcnMsIHdob20gdGhleSB3b3VsZCBzbGF5LCBhbmQgdGhlbiBsaWUgd2l0aCB0aGVpciBtYXN0ZXJzJyB3aXZlcywgYW5kIG91dHJhZ2UgdGhlaXIgbWFzdGVycycgY2hpbGRyZW4uIFN1Y2ggYSBzdGF0ZSBvZiB0aGluZ3MgU2VydG9yaXVzIGZlbHQgdG8gYmUgdW5lbmR1cmFibGUsIGFuZCB0aGVyZWZvcmUgd2hlbiB0aGUgc2xhdmVzIHdlcmUgYWxsIGVuY2FtcGVkIHRvZ2V0aGVyIGhlIGhhZCB0aGVtIHNob3QgZG93biB3aXRoIGphdmVsaW5zLCBhbmQgdGhleSB3ZXJlIGFzIG1hbnkgYXMgZm91ciB0aG91c2FuZCBpbiBudW1iZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiA0NC42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1hcml1czwvdGl0bGU+LCB4bGl2LiA2PC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHdhciBoYWQgYmVlbiBicm91Z2h0IHRvIGFuIGVuZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoYXQgaXMsIHdoZW4gdGhlIHBhcnR5IG9mIFN1bGxhIGFuZCB0aGUgc2VuYXRlIGNlYXNlZCB0byByZXNpc3QgYW5kIFJvbWUgaGFkIHN1cnJlbmRlcmVkLiA8L25vdGU+IENpbm5hIGFuZCBNYXJpdXMgd2VyZSBmaWxsZWQgd2l0aCBpbnNvbGVuY2UgYW5kIGFsbCBiaXR0ZXJuZXNzLCBhbmQgbWFkZSB0aGUgZXZpbHMgb2Ygd2FyIGFwcGVhciBhcyBnb2xkIHRvIHRoZSBSb21hbnM7IFNlcnRvcml1cyBhbG9uZSwgYXMgd2UgYXJlIHRvbGQsIG5laXRoZXIga2lsbGVkIGFueSBvbmUgdG8gZ3JhdGlmeSBoaXMgYW5nZXIsIG5vciB3YXhlZCBpbnNvbGVudCB3aXRoIHZpY3RvcnksIGJ1dCBhY3R1YWxseSByZWJ1a2VkIE1hcml1cywgYW5kIGJ5IHByaXZhdGUgaW50ZXJ2aWV3cyBhbmQgZW50cmVhdGllcyBtYWRlIENpbm5hIG1vcmUgbW9kZXJhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB0aGVyZSB3ZXJlIHRoZSBzbGF2ZXMgd2hvbSBNYXJpdXMgaGFkIHVzZWQgYXMgYWxsaWVzIGR1cmluZyB0aGUgd2FyIGFuZCBhcyBib2R5LWd1YXJkcyBvZiBoaXMgdHlyYW5ueS4gVGhleSBoYWQgdGh1cyBiZWNvbWUgcG93ZXJmdWwgYW5kIHJpY2gsIHBhcnRseSBieSB0aGUgcGVybWlzc2lvbiBhbmQgdW5kZXIgdGhlIG9yZGVycyBvZiBNYXJpdXMsIGFuZCBwYXJ0bHkgdGhyb3VnaCB0aGVpciBsYXdsZXNzIGFuZCB2aW9sZW50IHRyZWF0bWVudCBvZiB0aGVpciBtYXN0ZXJzLCB3aG9tIHRoZXkgd291bGQgc2xheSwgYW5kIHRoZW4gbGllIHdpdGggdGhlaXIgbWFzdGVycycgd2l2ZXMsIGFuZCBvdXRyYWdlIHRoZWlyIG1hc3RlcnMnIGNoaWxkcmVuLiBTdWNoIGEgc3RhdGUgb2YgdGhpbmdzIFNlcnRvcml1cyBmZWx0IHRvIGJlIHVuZW5kdXJhYmxlLCBhbmQgdGhlcmVmb3JlIHdoZW4gdGhlIHNsYXZlcyB3ZXJlIGFsbCBlbmNhbXBlZCB0b2dldGhlciBoZSBoYWQgdGhlbSBzaG90IGRvd24gd2l0aCBqYXZlbGlucywgYW5kIHRoZXkgd2VyZSBhcyBtYW55IGFzIGZvdXIgdGhvdXNhbmQgaW4gbnVtYmVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQ0LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpdi4gNjwvYmlibD4uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDQ0LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYXJpdXM8L3RpdGxlPiwgeGxpdi4gNjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFyaXVzPC90aXRsZT4sIHhsaXYuIDY8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHkgTWFyaXVzIGRpZWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODYgQi5DLjwvbm90ZT4gYW5kIHNob3J0bHkgYWZ0ZXJ3YXJkcyBDaW5uYSB3YXMgbXVyZGVyZWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODQgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgdjwvYmlibD4uPC9ub3RlPiBhbmQgdGhlIHlvdW5nZXIgTWFyaXVzLCBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgU2VydG9yaXVzIGFuZCBjb250cmFyeSB0byB0aGUgbGF3cywgYXNzdW1lZCB0aGUgY29uc3Vsc2hpcDs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MiBCLkMuPC9ub3RlPiBhbmQgc3VjaCBtZW4gYXMgQ2FyYm8sIE5vcmJhbnVzLCBhbmQgU2NpcGlvIHdlcmUgdW5zdWNjZXNzZnVsbHkgb3Bwb3NpbmcgU3VsbGEncyBhZHZhbmNlIHVwb24gUm9tZTsgYW5kIHRoZSBjYXVzZSBvZiB0aGUgcG9wdWxhciBwYXJ0eSB3YXMgYmVpbmcgcnVpbmVkIGFuZCBsb3N0LCBwYXJ0bHkgdGhyb3VnaCB0aGUgY293YXJkaWNlIGFuZCB3ZWFrbmVzcyBvZiBpdHMgZ2VuZXJhbHMsIGFuZCBwYXJ0bHkgYnkgdHJlYWNoZXJ5OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlcmUgd2FzIG5vIHJlYXNvbiB3aHkgU2VydG9yaXVzIHNob3VsZCByZW1haW4gdG8gc2VlIG1hdHRlcnMgZ28gZnJvbSBiYWQgdG8gd29yc2Ugb3dpbmcgdG8gdGhlIGluZmVyaW9yIGp1ZGdlbWVudCBvZiB0aG9zZSB3aG8gaGFkIHN1cGVyaW9yIHBvd2VyLiBBbmQgZmluYWxseSwgU3VsbGEgZW5jYW1wZWQgbmVhciBTY2lwaW8gYW5kIG1hZGUgZnJpZW5kbHkgb3ZlcnR1cmVzLCBhc3N1bWluZyB0aGF0IHBlYWNlIHdhcyB0byBiZSBtYWRlLCBhbmQgcHJvY2VlZGVkIHRvIGNvcnJ1cHQgaGlzIGFybXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYTwvdGl0bGU+LCB4eHZpaWksIDEtMzwvYmlibD4uPC9ub3RlPiBTZXJ0b3JpdXMgd2FybmVkIFNjaXBpbyBvZiB0aGlzIHBsYWlubHksIGJ1dCBjb3VsZCBub3QgcGVyc3VhZGUgaGltLiBBdCBsYXN0LCB0aGVyZWZvcmUsIGFsdG9nZXRoZXIgZGVzcGFpcmluZyBvZiB0aGUgY2l0eSwgaGUgc2V0IG91dCBmb3IgU3BhaW4sIGluIG9yZGVyIHRoYXQsIGluIGNhc2UgaGUgc2hvdWxkIHN1Y2NlZWQgaW4gZmlybWx5IGVzdGFibGlzaGluZyBoaXMgcG93ZXIgdGhlcmUsIGhlIG1pZ2h0IGFmZm9yZCBhIHJlZnVnZSB0byB0aG9zZSBvZiBoaXMgZnJpZW5kcyB3aG8gd2VyZSB3b3JzdGVkIGF0IFJvbWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcHJlc2VudGx5IE1hcml1cyBkaWVkOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODYgQi5DLjwvbm90ZT4gYW5kIHNob3J0bHkgYWZ0ZXJ3YXJkcyBDaW5uYSB3YXMgbXVyZGVyZWQ7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4NCBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgdjwvYmlibD4uPC9ub3RlPiBhbmQgdGhlIHlvdW5nZXIgTWFyaXVzLCBhZ2FpbnN0IHRoZSB3aXNoZXMgb2YgU2VydG9yaXVzIGFuZCBjb250cmFyeSB0byB0aGUgbGF3cywgYXNzdW1lZCB0aGUgY29uc3Vsc2hpcDs8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciB2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciB2PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MiBCLkMuPC9ub3RlPiBhbmQgc3VjaCBtZW4gYXMgQ2FyYm8sIE5vcmJhbnVzLCBhbmQgU2NpcGlvIHdlcmUgdW5zdWNjZXNzZnVsbHkgb3Bwb3NpbmcgU3VsbGEncyBhZHZhbmNlIHVwb24gUm9tZTsgYW5kIHRoZSBjYXVzZSBvZiB0aGUgcG9wdWxhciBwYXJ0eSB3YXMgYmVpbmcgcnVpbmVkIGFuZCBsb3N0LCBwYXJ0bHkgdGhyb3VnaCB0aGUgY293YXJkaWNlIGFuZCB3ZWFrbmVzcyBvZiBpdHMgZ2VuZXJhbHMsIGFuZCBwYXJ0bHkgYnkgdHJlYWNoZXJ5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVyZSB3YXMgbm8gcmVhc29uIHdoeSBTZXJ0b3JpdXMgc2hvdWxkIHJlbWFpbiB0byBzZWUgbWF0dGVycyBnbyBmcm9tIGJhZCB0byB3b3JzZSBvd2luZyB0byB0aGUgaW5mZXJpb3IganVkZ2VtZW50IG9mIHRob3NlIHdobyBoYWQgc3VwZXJpb3IgcG93ZXIuIEFuZCBmaW5hbGx5LCBTdWxsYSBlbmNhbXBlZCBuZWFyIFNjaXBpbyBhbmQgbWFkZSBmcmllbmRseSBvdmVydHVyZXMsIGFzc3VtaW5nIHRoYXQgcGVhY2Ugd2FzIHRvIGJlIG1hZGUsIGFuZCBwcm9jZWVkZWQgdG8gY29ycnVwdCBoaXMgYXJteS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4dmlpaSwgMS0zPC9iaWJsPi48L25vdGU+IFNlcnRvcml1cyB3YXJuZWQgU2NpcGlvIG9mIHRoaXMgcGxhaW5seSwgYnV0IGNvdWxkIG5vdCBwZXJzdWFkZSBoaW0uIEF0IGxhc3QsIHRoZXJlZm9yZSwgYWx0b2dldGhlciBkZXNwYWlyaW5nIG9mIHRoZSBjaXR5LCBoZSBzZXQgb3V0IGZvciBTcGFpbiwgaW4gb3JkZXIgdGhhdCwgaW4gY2FzZSBoZSBzaG91bGQgc3VjY2VlZCBpbiBmaXJtbHkgZXN0YWJsaXNoaW5nIGhpcyBwb3dlciB0aGVyZSwgaGUgbWlnaHQgYWZmb3JkIGEgcmVmdWdlIHRvIHRob3NlIG9mIGhpcyBmcmllbmRzIHdobyB3ZXJlIHdvcnN0ZWQgYXQgUm9tZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhPC90aXRsZT4sIHh4dmlpaSwgMS0zPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYTwvdGl0bGU+LCB4eHZpaWksIDEtMzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGVuY291bnRlcmluZyBncmlldm91cyBzdG9ybXMgaW4gbW91bnRhaW5vdXMgcmVnaW9ucywgaGUgd2FzIGFza2VkIGJ5IHRoZSBCYXJiYXJpYW5zIHRvIHBheSB0aGVtIHRyaWJ1dGUgYW5kIHB1cmNoYXNlIGhpcyBwYXNzYWdlLiBIaXMgY29tcGFuaW9ucyB3ZXJlIGluZGlnbmFudCwgYW5kIGNvbnNpZGVyZWQgaXQgYSB0ZXJyaWJsZSB0aGluZyBmb3IgYSBSb21hbiBwcm8tY29uc3VsIHRvIHJlbmRlciB0cmlidXRlIHRvIHBlc3RpbGVudCBCYXJiYXJpYW5zOyBidXQgU2VydG9yaXVzIG1hZGUgbGlnaHQgb2Ygd2hhdCB0aGV5IHRob3VnaHQgYSBkaXNncmFjZSwgYW5kIHdpdGggdGhlIHJlbWFyayB0aGF0IGhlIHdhcyBwdXJjaGFzaW5nIHRpbWUsIHRoYW4gd2hpY2ggbm90aGluZyBpcyBtb3JlIHByZWNpb3VzIHRvIGEgbWFuIGJlbnQgb24gZ3JlYXQgYWNoaWV2ZW1lbnRzLCBoZSBwYWNpZmllZCB0aGUgQmFyYmFyaWFucyB3aXRoIG1vbmV5LCBhbmQgdGhlbiBoYXN0ZW5lZCBvbiBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIFNwYWluLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBmb3VuZCBpdHMgcGVvcGxlcyBzdHJvbmcgaW4gbnVtYmVycyBhbmQgaW4gZmlnaHRpbmcgbWVuLCBhbmQgc2luY2UgdGhlIHJhcGFjaXR5IGFuZCBpbnNvbGVuY2Ugb2YgdGhlIFJvbWFuIG9mZmljaWFscyBzZW50IHRoaXRoZXIgZnJvbSB0aW1lIHRvIHRpbWUgaGFkIG1hZGUgdGhlbSBob3N0aWxlIHRvIHRoZSBlbXBpcmUgaW4gYWxsIGl0cyBhc3BlY3RzLCBoZSB0cmllZCB0byB3aW4gdGhlbSBvdmVyLCB0aGUgY2hpZWZzIGJ5IGhpcyBwZXJzb25hbCBpbnRlcmNvdXJzZSB3aXRoIHRoZW0sIHRoZSBtYXNzZXMgYnkgYSByZW1pc3Npb24gb2YgdGF4ZXMuIEhpcyBncmVhdGVzdCBwb3B1bGFyaXR5LCBob3dldmVyLCB3YXMgd29uIGJ5IHJpZGRpbmcgdGhlbSBvZiB0aGUgbmVjZXNzaXR5IG9mIGZ1cm5pc2hpbmcgcXVhcnRlcnMgZm9yIHNvbGRpZXJzOyBmb3IgaGUgY29tcGVsbGVkIGhpcyBzb2xkaWVycyB0byBidWlsZCB0aGVpciB3aW50ZXItcXVhcnRlcnMgaW4gdGhlIHN1YnVyYnMgb2YgdGhlIGNpdGllcywgYW5kIGhlIGhpbXNlbGYgd2FzIGZpcnN0IHRvIHBpdGNoIGhpcyB0ZW50IHRoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBkaWQgbm90IHJlbHkgd2hvbGx5IG9uIHRoZSBnb29kd2lsbCBvZiB0aGUgQmFyYmFyaWFucywgYnV0IGhlIGFybWVkIGFsbCB0aGUgUm9tYW4gc2V0dGxlcnMgb2YgdGhlIGNvdW50cnkgd2hvIHdlcmUgb2YgbWlsaXRhcnkgYWdlLCBhbmQgYnkgdW5kZXJ0YWtpbmcgdGhlIGNvbnN0cnVjdGlvbiBvZiBhbGwgc29ydHMgb2YgZW5naW5lcyBvZiB3YXIgYW5kIHRoZSBidWlsZGluZyBvZiB0cmlyZW1lcywga2VwdCB0aGUgY2l0aWVzIHdlbGwgaW4gaGFuZCwgYmVpbmcgbWlsZCBpbiB0aGUgYWZmYWlycyBvZiBwZWFjZSwgYnV0IHNob3dpbmcgaGltc2VsZiBmb3JtaWRhYmxlIGJ5IHRoZSBwcmVwYXJhdGlvbnMgd2hpY2ggaGUgbWFkZSBhZ2FpbnN0IGhpcyBlbmVtaWVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGVuY291bnRlcmluZyBncmlldm91cyBzdG9ybXMgaW4gbW91bnRhaW5vdXMgcmVnaW9ucywgaGUgd2FzIGFza2VkIGJ5IHRoZSBCYXJiYXJpYW5zIHRvIHBheSB0aGVtIHRyaWJ1dGUgYW5kIHB1cmNoYXNlIGhpcyBwYXNzYWdlLiBIaXMgY29tcGFuaW9ucyB3ZXJlIGluZGlnbmFudCwgYW5kIGNvbnNpZGVyZWQgaXQgYSB0ZXJyaWJsZSB0aGluZyBmb3IgYSBSb21hbiBwcm8tY29uc3VsIHRvIHJlbmRlciB0cmlidXRlIHRvIHBlc3RpbGVudCBCYXJiYXJpYW5zOyBidXQgU2VydG9yaXVzIG1hZGUgbGlnaHQgb2Ygd2hhdCB0aGV5IHRob3VnaHQgYSBkaXNncmFjZSwgYW5kIHdpdGggdGhlIHJlbWFyayB0aGF0IGhlIHdhcyBwdXJjaGFzaW5nIHRpbWUsIHRoYW4gd2hpY2ggbm90aGluZyBpcyBtb3JlIHByZWNpb3VzIHRvIGEgbWFuIGJlbnQgb24gZ3JlYXQgYWNoaWV2ZW1lbnRzLCBoZSBwYWNpZmllZCB0aGUgQmFyYmFyaWFucyB3aXRoIG1vbmV5LCBhbmQgdGhlbiBoYXN0ZW5lZCBvbiBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIFNwYWluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIGl0cyBwZW9wbGVzIHN0cm9uZyBpbiBudW1iZXJzIGFuZCBpbiBmaWdodGluZyBtZW4sIGFuZCBzaW5jZSB0aGUgcmFwYWNpdHkgYW5kIGluc29sZW5jZSBvZiB0aGUgUm9tYW4gb2ZmaWNpYWxzIHNlbnQgdGhpdGhlciBmcm9tIHRpbWUgdG8gdGltZSBoYWQgbWFkZSB0aGVtIGhvc3RpbGUgdG8gdGhlIGVtcGlyZSBpbiBhbGwgaXRzIGFzcGVjdHMsIGhlIHRyaWVkIHRvIHdpbiB0aGVtIG92ZXIsIHRoZSBjaGllZnMgYnkgaGlzIHBlcnNvbmFsIGludGVyY291cnNlIHdpdGggdGhlbSwgdGhlIG1hc3NlcyBieSBhIHJlbWlzc2lvbiBvZiB0YXhlcy4gSGlzIGdyZWF0ZXN0IHBvcHVsYXJpdHksIGhvd2V2ZXIsIHdhcyB3b24gYnkgcmlkZGluZyB0aGVtIG9mIHRoZSBuZWNlc3NpdHkgb2YgZnVybmlzaGluZyBxdWFydGVycyBmb3Igc29sZGllcnM7IGZvciBoZSBjb21wZWxsZWQgaGlzIHNvbGRpZXJzIHRvIGJ1aWxkIHRoZWlyIHdpbnRlci1xdWFydGVycyBpbiB0aGUgc3VidXJicyBvZiB0aGUgY2l0aWVzLCBhbmQgaGUgaGltc2VsZiB3YXMgZmlyc3QgdG8gcGl0Y2ggaGlzIHRlbnQgdGhlcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgcmVseSB3aG9sbHkgb24gdGhlIGdvb2R3aWxsIG9mIHRoZSBCYXJiYXJpYW5zLCBidXQgaGUgYXJtZWQgYWxsIHRoZSBSb21hbiBzZXR0bGVycyBvZiB0aGUgY291bnRyeSB3aG8gd2VyZSBvZiBtaWxpdGFyeSBhZ2UsIGFuZCBieSB1bmRlcnRha2luZyB0aGUgY29uc3RydWN0aW9uIG9mIGFsbCBzb3J0cyBvZiBlbmdpbmVzIG9mIHdhciBhbmQgdGhlIGJ1aWxkaW5nIG9mIHRyaXJlbWVzLCBrZXB0IHRoZSBjaXRpZXMgd2VsbCBpbiBoYW5kLCBiZWluZyBtaWxkIGluIHRoZSBhZmZhaXJzIG9mIHBlYWNlLCBidXQgc2hvd2luZyBoaW1zZWxmIGZvcm1pZGFibGUgYnkgdGhlIHByZXBhcmF0aW9ucyB3aGljaCBoZSBtYWRlIGFnYWluc3QgaGlzIGVuZW1pZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBsZWFybmVkIHRoYXQgU3VsbGEgd2FzIG1hc3RlciBvZiBSb21lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgyIEIuQy48L25vdGU+IGFuZCB0aGF0IHRoZSBwYXJ0eSBvZiBNYXJpdXMgYW5kIENhcmJvIHdhcyBvbiB0aGUgd2F5IHRvIHJ1aW4sIGhlIGV4cGVjdGVkIHRoYXQgYW4gYXJteSB3aXRoIGEgY29tbWFuZGVyIHdvdWxkIGNvbWUgYXQgb25jZSB0byBmaWdodCB0aGUgaXNzdWUgb3V0IHdpdGggaGltLiBIZSB0aGVyZWZvcmUgc2VudCBKdWxpdXMgU2FsaW5hdG9yIHdpdGggc2l4IHRob3VzYW5kIG1lbi1hdC1hcm1zIHRvIGJhciB0aGUgcGFzc2FnZSBvZiB0aGUgUHlyZW5lZXMuIEFuZCBub3QgbG9uZyBhZnRlcndhcmRzIENhaXVzIEFubml1cyB3YXMgc2VudCBvdXQgYnkgU3VsbGEsIGFuZCBzZWVpbmcgdGhhdCBKdWxpdXMgY291bGQgbm90IGJlIGFzc2FpbGVkLCBoZSBrbmV3IG5vdCB3aGF0IHRvIGRvLCBhbmQgc2F0IGlkbHkgZG93biBhdCB0aGUgYmFzZSBvZiB0aGUgbW91bnRhaW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYSBjZXJ0YWluIENhbHB1cm5pdXMsIHN1cm5hbWVkIExhbmFyaXVzLCB0cmVhY2hlcm91c2x5IGtpbGxlZCBKdWxpdXMsIHdob3NlIHNvbGRpZXJzIHRoZW4gYWJhbmRvbmVkIHRoZSBoZWlnaHRzIG9mIHRoZSBQeXJlbmVlczsgd2hlcmV1cG9uIEFubml1cyBjcm9zc2VkIG92ZXIgYW5kIGFkdmFuY2VkIHdpdGggYSBsYXJnZSBmb3JjZSwgcm91dGluZyBhbGwgb3Bwb3NpdGlvbi4gU2VydG9yaXVzLCBub3QgYmVpbmcgYWJsZSB0byBjb3BlIHdpdGggaGltLCB0b29rIHJlZnVnZSB3aXRoIHRocmVlIHRob3VzYW5kIG1lbiBpbiBOZXcgQ2FydGhhZ2U7IHRoZXJlIGhlIGVtYmFya2VkIGhpcyBmb3JjZXMsIGNyb3NzZWQgdGhlIHNlYSwgYW5kIGhhbmRlZCBpbiB0aGUgY291bnRyeSBvZiB0aGUgTWF1cnVzaWksIGluIEFmcmljYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhpcyBzb2xkaWVycyB3ZXJlIGdldHRpbmcgd2F0ZXIgYW5kIHdlcmUgb2ZmIHRoZWlyIGd1YXJkLCB0aGUgQmFyYmFyaWFucyBmZWxsIHVwb24gdGhlbSwgYW5kIGFmdGVyIGxvc2luZyBtYW55IG1lbiwgU2VydG9yaXVzIHNhaWxlZCBiYWNrIGFnYWluIHRvIFNwYWluLiBGcm9tIHRoaXMgc2hvcmUgdG9vIGhlIHdhcyByZXB1bHNlZCwgYnV0IGFmdGVyIGJlaW5nIGpvaW5lZCBieSBzb21lIENpbGljaWFuIHBpcmF0aWNhbCB2ZXNzZWxzIGhlIGF0dGFja2VkIHRoZSBpc2xhbmQgb2YgUGl0eXVzc2EsIG92ZXJwb3dlcmVkIHRoZSBndWFyZCB3aGljaCBBbm5pdXMgaGFkIHNldCB0aGVyZSwgYW5kIGVmZmVjdGVkIGEgbGFuZGluZy4gQWZ0ZXIgYSBzaG9ydCB0aW1lLCBob3dldmVyLCBBbm5pdXMgY2FtZSB3aXRoIG51bWVyb3VzIHNoaXBzIGFuZCBmaXZlIHRob3VzYW5kIG1lbi1hdC1hcm1zLCBhbmQgd2l0aCBoaW0gU2VydG9yaXVzIGF0dGVtcHRlZCB0byBmaWdodCBhIGRlY2lzaXZlIG5hdmFsIGJhdHRsZSwgYWx0aG91Z2ggdGhlIHZlc3NlbHMgd2hpY2ggaGUgaGFkIHdlcmUgbGlnaHQgYW5kIGJ1aWx0IGZvciBzcGVlZCByYXRoZXIgdGhhbiBmb3IgZmlnaHRpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc2VhIHJhbiBoaWdoIHdpdGggYSBzdHJvbmcgd2VzdCB3aW5kLCBhbmQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgdmVzc2VscyBvZiBTZXJ0b3JpdXMsIG93aW5nIHRvIHRoZWlyIGxpZ2h0bmVzcywgd2VyZSBkcml2ZW4gYXNsYW50IHVwb24gdGhlIHJvY2t5IHNob3JlLCB3aGlsZSBoZSBoaW1zZWxmLCB3aXRoIGEgZmV3IHNoaXBzLCBleGNsdWRlZCBmcm9tIHRoZSBvcGVuIHNlYSBieSB0aGUgc3Rvcm0sIGFuZCBmcm9tIHRoZSBsYW5kIGJ5IHRoZSBlbmVteSwgd2FzIHRvc3NlZCBhYm91dCBmb3IgdGVuIGRheXMgaW4gYSBiYXR0bGUgd2l0aCBhZHZlcnNlIHdhdmVzIGFuZCBmaWVyY2Ugc3VyZ2VzLCBhbmQgd2l0aCBkaWZmaWN1bHR5IGhlbGQgaGlzIG93bi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGxlYXJuZWQgdGhhdCBTdWxsYSB3YXMgbWFzdGVyIG9mIFJvbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MiBCLkMuPC9ub3RlPiBhbmQgdGhhdCB0aGUgcGFydHkgb2YgTWFyaXVzIGFuZCBDYXJibyB3YXMgb24gdGhlIHdheSB0byBydWluLCBoZSBleHBlY3RlZCB0aGF0IGFuIGFybXkgd2l0aCBhIGNvbW1hbmRlciB3b3VsZCBjb21lIGF0IG9uY2UgdG8gZmlnaHQgdGhlIGlzc3VlIG91dCB3aXRoIGhpbS4gSGUgdGhlcmVmb3JlIHNlbnQgSnVsaXVzIFNhbGluYXRvciB3aXRoIHNpeCB0aG91c2FuZCBtZW4tYXQtYXJtcyB0byBiYXIgdGhlIHBhc3NhZ2Ugb2YgdGhlIFB5cmVuZWVzLiBBbmQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBDYWl1cyBBbm5pdXMgd2FzIHNlbnQgb3V0IGJ5IFN1bGxhLCBhbmQgc2VlaW5nIHRoYXQgSnVsaXVzIGNvdWxkIG5vdCBiZSBhc3NhaWxlZCwgaGUga25ldyBub3Qgd2hhdCB0byBkbywgYW5kIHNhdCBpZGx5IGRvd24gYXQgdGhlIGJhc2Ugb2YgdGhlIG1vdW50YWlucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gQ2FscHVybml1cywgc3VybmFtZWQgTGFuYXJpdXMsIHRyZWFjaGVyb3VzbHkga2lsbGVkIEp1bGl1cywgd2hvc2Ugc29sZGllcnMgdGhlbiBhYmFuZG9uZWQgdGhlIGhlaWdodHMgb2YgdGhlIFB5cmVuZWVzOyB3aGVyZXVwb24gQW5uaXVzIGNyb3NzZWQgb3ZlciBhbmQgYWR2YW5jZWQgd2l0aCBhIGxhcmdlIGZvcmNlLCByb3V0aW5nIGFsbCBvcHBvc2l0aW9uLiBTZXJ0b3JpdXMsIG5vdCBiZWluZyBhYmxlIHRvIGNvcGUgd2l0aCBoaW0sIHRvb2sgcmVmdWdlIHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuIGluIE5ldyBDYXJ0aGFnZTsgdGhlcmUgaGUgZW1iYXJrZWQgaGlzIGZvcmNlcywgY3Jvc3NlZCB0aGUgc2VhLCBhbmQgaGFuZGVkIGluIHRoZSBjb3VudHJ5IG9mIHRoZSBNYXVydXNpaSwgaW4gQWZyaWNhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoaXMgc29sZGllcnMgd2VyZSBnZXR0aW5nIHdhdGVyIGFuZCB3ZXJlIG9mZiB0aGVpciBndWFyZCwgdGhlIEJhcmJhcmlhbnMgZmVsbCB1cG9uIHRoZW0sIGFuZCBhZnRlciBsb3NpbmcgbWFueSBtZW4sIFNlcnRvcml1cyBzYWlsZWQgYmFjayBhZ2FpbiB0byBTcGFpbi4gRnJvbSB0aGlzIHNob3JlIHRvbyBoZSB3YXMgcmVwdWxzZWQsIGJ1dCBhZnRlciBiZWluZyBqb2luZWQgYnkgc29tZSBDaWxpY2lhbiBwaXJhdGljYWwgdmVzc2VscyBoZSBhdHRhY2tlZCB0aGUgaXNsYW5kIG9mIFBpdHl1c3NhLCBvdmVycG93ZXJlZCB0aGUgZ3VhcmQgd2hpY2ggQW5uaXVzIGhhZCBzZXQgdGhlcmUsIGFuZCBlZmZlY3RlZCBhIGxhbmRpbmcuIEFmdGVyIGEgc2hvcnQgdGltZSwgaG93ZXZlciwgQW5uaXVzIGNhbWUgd2l0aCBudW1lcm91cyBzaGlwcyBhbmQgZml2ZSB0aG91c2FuZCBtZW4tYXQtYXJtcywgYW5kIHdpdGggaGltIFNlcnRvcml1cyBhdHRlbXB0ZWQgdG8gZmlnaHQgYSBkZWNpc2l2ZSBuYXZhbCBiYXR0bGUsIGFsdGhvdWdoIHRoZSB2ZXNzZWxzIHdoaWNoIGhlIGhhZCB3ZXJlIGxpZ2h0IGFuZCBidWlsdCBmb3Igc3BlZWQgcmF0aGVyIHRoYW4gZm9yIGZpZ2h0aW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc2VhIHJhbiBoaWdoIHdpdGggYSBzdHJvbmcgd2VzdCB3aW5kLCBhbmQgdGhlIGdyZWF0ZXIgcGFydCBvZiB0aGUgdmVzc2VscyBvZiBTZXJ0b3JpdXMsIG93aW5nIHRvIHRoZWlyIGxpZ2h0bmVzcywgd2VyZSBkcml2ZW4gYXNsYW50IHVwb24gdGhlIHJvY2t5IHNob3JlLCB3aGlsZSBoZSBoaW1zZWxmLCB3aXRoIGEgZmV3IHNoaXBzLCBleGNsdWRlZCBmcm9tIHRoZSBvcGVuIHNlYSBieSB0aGUgc3Rvcm0sIGFuZCBmcm9tIHRoZSBsYW5kIGJ5IHRoZSBlbmVteSwgd2FzIHRvc3NlZCBhYm91dCBmb3IgdGVuIGRheXMgaW4gYSBiYXR0bGUgd2l0aCBhZHZlcnNlIHdhdmVzIGFuZCBmaWVyY2Ugc3VyZ2VzLCBhbmQgd2l0aCBkaWZmaWN1bHR5IGhlbGQgaGlzIG93bi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHdpbmQgc3Vic2lkZWQgYW5kIGhlIHdhcyBib3JuZSBhbG9uZyB0byBjZXJ0YWluIHNjYXR0ZXJlZCBhbmQgd2F0ZXJsZXNzIGlzbGFuZHMsIHdoZXJlIGhlIHNwZW50IHRoZSBuaWdodDsgdGhlbiwgc2V0dGluZyBvdXQgZnJvbSB0aGVyZSwgYW5kIHBhc3NpbmcgdGhyb3VnaCB0aGUgc3RyYWl0IG9mIENhZGl6LCBoZSBrZXB0IHRoZSBvdXRlciBjb2FzdCBvZiBTcGFpbiBvbiB0aGUgcmlnaHQgYW5kIGxhbmRlZCBhIGxpdHRsZSBhYm92ZSB0aGUgbW91dGhzIG9mIHRoZSByaXZlciBCYWV0aXMsIHdoaWNoIGVtcHRpZXMgaW50byB0aGUgQXRsYW50aWMgc2VhIGFuZCBoYXMgZ2l2ZW4gaXRzIG5hbWUgdG8gdGhlIGFkamFjZW50IHBhcnRzIG9mIFNwYWluLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHdpbmQgc3Vic2lkZWQgYW5kIGhlIHdhcyBib3JuZSBhbG9uZyB0byBjZXJ0YWluIHNjYXR0ZXJlZCBhbmQgd2F0ZXJsZXNzIGlzbGFuZHMsIHdoZXJlIGhlIHNwZW50IHRoZSBuaWdodDsgdGhlbiwgc2V0dGluZyBvdXQgZnJvbSB0aGVyZSwgYW5kIHBhc3NpbmcgdGhyb3VnaCB0aGUgc3RyYWl0IG9mIENhZGl6LCBoZSBrZXB0IHRoZSBvdXRlciBjb2FzdCBvZiBTcGFpbiBvbiB0aGUgcmlnaHQgYW5kIGxhbmRlZCBhIGxpdHRsZSBhYm92ZSB0aGUgbW91dGhzIG9mIHRoZSByaXZlciBCYWV0aXMsIHdoaWNoIGVtcHRpZXMgaW50byB0aGUgQXRsYW50aWMgc2VhIGFuZCBoYXMgZ2l2ZW4gaXRzIG5hbWUgdG8gdGhlIGFkamFjZW50IHBhcnRzIG9mIFNwYWluLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGhlIGZlbGwgaW4gd2l0aCBzb21lIHNhaWxvcnMgd2hvIGhhZCByZWNlbnRseSBjb21lIGJhY2sgZnJvbSB0aGUgQXRsYW50aWMgSXNsYW5kcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QZXJoYXBzIE1hZGVpcmEgYW5kIFBvcnRvIFNhbnRvLCB0aG91Z2ggdGhlc2UgYXJlIGZvcnR5IG1pbGVzIGFwYXJ0LiBGZWF0dXJlcyBvZiB0aGUgQ2FuYXJ5IElzbGFuZHMgaGF2ZSBkb3VidGxlc3MgY3JlcHQgaW50byB0aGUgZGVzY3JpcHRpb24uPC9ub3RlPiBUaGVzZSBhcmUgdHdvIGluIG51bWJlciwgc2VwYXJhdGVkIGJ5IGEgdmVyeSBuYXJyb3cgc3RyYWl0OyB0aGV5IGFyZSB0ZW4gdGhvdXNhbmQgZnVybG9uZ3MgZGlzdGFudCBmcm9tIEFmcmljYSwgYW5kIGFyZSBjYWxsZWQgdGhlIElzbGFuZHMgb2YgdGhlIEJsZXN0LiBUaGV5IGVuam95IG1vZGVyYXRlIHJhaW5zIGF0IGxvbmcgaW50ZXJ2YWxzLCBhbmQgd2luZHMgd2hpY2ggZm9yIHRoZSBtb3N0IHBhcnQgYXJlIHNvZnQgYW5kIHByZWNpcGl0YXRlIGRld3MsIHNvIHRoYXQgdGhlIGlzbGFuZHMgbm90IG9ubHkgaGF2ZSBhIHJpY2ggc29pbCB3aGljaCBpcyBleGNlbGxlbnQgZm9yIHBsb3dpbmcgYW5kIHBsYW50aW5nLCBidXQgYWxzbyBwcm9kdWNlIGEgbmF0dXJhbCBmcnVpdCB0aGF0IGlzIHBsZW50aWZ1bCBhbmQgd2hvbGVzb21lIGVub3VnaCB0byBmZWVkLCB3aXRob3V0IHRvaWwgb3IgdHJvdWJsZSwgYSBsZWlzdXJlZCBmb2xrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYW4gYWlyIHRoYXQgaXMgc2FsdWJyaW91cywgb3dpbmcgdG8gdGhlIGNsaW1hdGUgYW5kIHRoZSBtb2RlcmF0ZSBjaGFuZ2VzIGluIHRoZSBzZWFzb25zLCBwcmV2YWlscyBvbiB0aGUgaXNsYW5kcy4gRm9yIHRoZSBub3J0aCBhbmQgZWFzdCB3aW5kcyB3aGljaCBibG93IG91dCBmcm9tIG91ciBwYXJ0IG9mIHRoZSB3b3JsZCBwbHVuZ2UgaW50byBmYXRob21sZXNzIHNwYWNlLCBhbmQsIG93aW5nIHRvIHRoZSBkaXN0YW5jZSwgZGlzc2lwYXRlIHRoZW1zZWx2ZXMgYW5kIGxvc2UgdGhlaXIgcG93ZXIgYmVmb3JlIHRoZXkgcmVhY2ggdGhlIGlzbGFuZHM7IHdoaWxlIHRoZSBzb3V0aCBhbmQgd2VzdCB3aW5kcyB0aGF0IGVudmVsb3BlIHRoZSBpc2xhbmRzIGZyb20gdGhlIHNlYSBzb21ldGltZXMgYnJpbmcgaW4gdGhlaXIgdHJhaW4gc29mdCBhbmQgaW50ZXJtaXR0ZW50IHNob3dlcnMsIGJ1dCBmb3IgdGhlIG1vc3QgcGFydCBjb29sIHRoZW0gd2l0aCBtb2lzdCBicmVlemVzIGFuZCBnZW50bHkgbm91cmlzaCB0aGUgc29pbC4gVGhlcmVmb3JlIGEgZmlybSBiZWxpZWYgaGFzIG1hZGUgaXRzIHdheSwgZXZlbiB0byB0aGUgQmFyYmFyaWFucywgdGhhdCBoZXJlIGlzIHRoZSBFbHlzaWFuIEZpZWxkIGFuZCB0aGUgYWJvZGUgb2YgdGhlIGJsZXNzZWQsIG9mIHdoaWNoIEhvbWVyIHNhbmcuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA0LjU2MyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5PZHlzc2V5PC90aXRsZT4sIGl2LiA1NjMtNTY4PC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaGUgZmVsbCBpbiB3aXRoIHNvbWUgc2FpbG9ycyB3aG8gaGFkIHJlY2VudGx5IGNvbWUgYmFjayBmcm9tIHRoZSBBdGxhbnRpYyBJc2xhbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGVyaGFwcyBNYWRlaXJhIGFuZCBQb3J0byBTYW50bywgdGhvdWdoIHRoZXNlIGFyZSBmb3J0eSBtaWxlcyBhcGFydC4gRmVhdHVyZXMgb2YgdGhlIENhbmFyeSBJc2xhbmRzIGhhdmUgZG91YnRsZXNzIGNyZXB0IGludG8gdGhlIGRlc2NyaXB0aW9uLjwvbm90ZT4gVGhlc2UgYXJlIHR3byBpbiBudW1iZXIsIHNlcGFyYXRlZCBieSBhIHZlcnkgbmFycm93IHN0cmFpdDsgdGhleSBhcmUgdGVuIHRob3VzYW5kIGZ1cmxvbmdzIGRpc3RhbnQgZnJvbSBBZnJpY2EsIGFuZCBhcmUgY2FsbGVkIHRoZSBJc2xhbmRzIG9mIHRoZSBCbGVzdC4gVGhleSBlbmpveSBtb2RlcmF0ZSByYWlucyBhdCBsb25nIGludGVydmFscywgYW5kIHdpbmRzIHdoaWNoIGZvciB0aGUgbW9zdCBwYXJ0IGFyZSBzb2Z0IGFuZCBwcmVjaXBpdGF0ZSBkZXdzLCBzbyB0aGF0IHRoZSBpc2xhbmRzIG5vdCBvbmx5IGhhdmUgYSByaWNoIHNvaWwgd2hpY2ggaXMgZXhjZWxsZW50IGZvciBwbG93aW5nIGFuZCBwbGFudGluZywgYnV0IGFsc28gcHJvZHVjZSBhIG5hdHVyYWwgZnJ1aXQgdGhhdCBpcyBwbGVudGlmdWwgYW5kIHdob2xlc29tZSBlbm91Z2ggdG8gZmVlZCwgd2l0aG91dCB0b2lsIG9yIHRyb3VibGUsIGEgbGVpc3VyZWQgZm9say4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhbiBhaXIgdGhhdCBpcyBzYWx1YnJpb3VzLCBvd2luZyB0byB0aGUgY2xpbWF0ZSBhbmQgdGhlIG1vZGVyYXRlIGNoYW5nZXMgaW4gdGhlIHNlYXNvbnMsIHByZXZhaWxzIG9uIHRoZSBpc2xhbmRzLiBGb3IgdGhlIG5vcnRoIGFuZCBlYXN0IHdpbmRzIHdoaWNoIGJsb3cgb3V0IGZyb20gb3VyIHBhcnQgb2YgdGhlIHdvcmxkIHBsdW5nZSBpbnRvIGZhdGhvbWxlc3Mgc3BhY2UsIGFuZCwgb3dpbmcgdG8gdGhlIGRpc3RhbmNlLCBkaXNzaXBhdGUgdGhlbXNlbHZlcyBhbmQgbG9zZSB0aGVpciBwb3dlciBiZWZvcmUgdGhleSByZWFjaCB0aGUgaXNsYW5kczsgd2hpbGUgdGhlIHNvdXRoIGFuZCB3ZXN0IHdpbmRzIHRoYXQgZW52ZWxvcGUgdGhlIGlzbGFuZHMgZnJvbSB0aGUgc2VhIHNvbWV0aW1lcyBicmluZyBpbiB0aGVpciB0cmFpbiBzb2Z0IGFuZCBpbnRlcm1pdHRlbnQgc2hvd2VycywgYnV0IGZvciB0aGUgbW9zdCBwYXJ0IGNvb2wgdGhlbSB3aXRoIG1vaXN0IGJyZWV6ZXMgYW5kIGdlbnRseSBub3VyaXNoIHRoZSBzb2lsLiBUaGVyZWZvcmUgYSBmaXJtIGJlbGllZiBoYXMgbWFkZSBpdHMgd2F5LCBldmVuIHRvIHRoZSBCYXJiYXJpYW5zLCB0aGF0IGhlcmUgaXMgdGhlIEVseXNpYW4gRmllbGQgYW5kIHRoZSBhYm9kZSBvZiB0aGUgYmxlc3NlZCwgb2Ygd2hpY2ggSG9tZXIgc2FuZy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiA0LjU2MyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaXYuIDU2My01Njg8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gNC41NjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiA1NjMtNTY4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIGl2LiA1NjMtNTY4PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFNlcnRvcml1cyBoZWFyZCB0aGlzIHRhbGUsIGhlIHdhcyBzZWl6ZWQgd2l0aCBhbiBhbWF6aW5nIGRlc2lyZSB0byBkd2VsbCBpbiB0aGUgaXNsYW5kcyBhbmQgbGl2ZSBpbiBxdWlldCwgZnJlZWQgZnJvbSB0eXJhbm55IGFuZCB3YXJzIHRoYXQgd291bGQgbmV2ZXIgZW5kLiBUaGUgQ2lsaWNpYW5zLCBob3dldmVyLCB3aG8gZGlkIG5vdCB3YW50IHBlYWNlIG9yIGxlaXN1cmUsIGJ1dCB3ZWFsdGggYW5kIHNwb2lscywgd2hlbiB0aGV5IHdlcmUgYXdhcmUgb2YgaGlzIGRlc2lyZSwgc2FpbGVkIGF3YXkgdG8gQWZyaWNhLCB0byByZXN0b3JlIEFzY2FsaXMgdGhlIHNvbiBvZiBJcGh0aGEgdG8gdGhlIHRocm9uZSBvZiBNYXVydXNpYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzIFNlcnRvcml1cyBkaWQgbm90IGRlc3BhaXIsIGJ1dCByZXNvbHZlZCB0byBnbyB0byB0aGUgYWlkIG9mIHRob3NlIHdobyB3ZXJlIGZpZ2h0aW5nIGFnYWluc3QgQXNjYWxpcywgaW4gb3JkZXIgdGhhdCBoaXMgZm9sbG93ZXJzIG1pZ2h0IGdldCBzb21lIGZyZXNoIGdyb3VuZCBmb3IgaG9wZSBhbmQgb2NjYXNpb24gZm9yIG5ldyBlbnRlcnByaXNlLCBhbmQgc28gbWlnaHQgcmVtYWluIHRvZ2V0aGVyIGluIHNwaXRlIG9mIHRoZWlyIGRpZmZpY3VsdGllcy4gVGhlIE1hdXJ1c2lhbnMgd2VyZSBnbGFkIHRvIGhhdmUgaGltIGNvbWUsIGFuZCBoZSBzZXQgaGltc2VsZiB0byB3b3JrLCBkZWZlYXRlZCBBc2NhbGlzIGluIGJhdHRsZSwgYW5kIGxhaWQgc2llZ2UgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBTdWxsYSBzZW50IG91dCBQYWNjaWFudXMgd2l0aCBhbiBhcm15IHRvIGdpdmUgYWlkIHRvIEFzY2FsaXMsIFNlcnRvcml1cyBqb2luZWQgYmF0dGxlIHdpdGggUGFjY2lhbnVzIGFuZCBzbGV3IGhpbSwgd29uIG92ZXIgaGlzIHNvbGRpZXJzIGFmdGVyIHRoZWlyIGRlZmVhdCwgYW5kIGZvcmNlZCB0byBhIHN1cnJlbmRlciB0aGUgY2l0eSBvZiBUaW5naXMsIGludG8gd2hpY2ggQXNjYWxpcyBhbmQgaGlzIGJyZXRocmVuIGhhZCBmbGVkIGZvciByZWZ1Z2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFNlcnRvcml1cyBoZWFyZCB0aGlzIHRhbGUsIGhlIHdhcyBzZWl6ZWQgd2l0aCBhbiBhbWF6aW5nIGRlc2lyZSB0byBkd2VsbCBpbiB0aGUgaXNsYW5kcyBhbmQgbGl2ZSBpbiBxdWlldCwgZnJlZWQgZnJvbSB0eXJhbm55IGFuZCB3YXJzIHRoYXQgd291bGQgbmV2ZXIgZW5kLiBUaGUgQ2lsaWNpYW5zLCBob3dldmVyLCB3aG8gZGlkIG5vdCB3YW50IHBlYWNlIG9yIGxlaXN1cmUsIGJ1dCB3ZWFsdGggYW5kIHNwb2lscywgd2hlbiB0aGV5IHdlcmUgYXdhcmUgb2YgaGlzIGRlc2lyZSwgc2FpbGVkIGF3YXkgdG8gQWZyaWNhLCB0byByZXN0b3JlIEFzY2FsaXMgdGhlIHNvbiBvZiBJcGh0aGEgdG8gdGhlIHRocm9uZSBvZiBNYXVydXNpYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcyBTZXJ0b3JpdXMgZGlkIG5vdCBkZXNwYWlyLCBidXQgcmVzb2x2ZWQgdG8gZ28gdG8gdGhlIGFpZCBvZiB0aG9zZSB3aG8gd2VyZSBmaWdodGluZyBhZ2FpbnN0IEFzY2FsaXMsIGluIG9yZGVyIHRoYXQgaGlzIGZvbGxvd2VycyBtaWdodCBnZXQgc29tZSBmcmVzaCBncm91bmQgZm9yIGhvcGUgYW5kIG9jY2FzaW9uIGZvciBuZXcgZW50ZXJwcmlzZSwgYW5kIHNvIG1pZ2h0IHJlbWFpbiB0b2dldGhlciBpbiBzcGl0ZSBvZiB0aGVpciBkaWZmaWN1bHRpZXMuIFRoZSBNYXVydXNpYW5zIHdlcmUgZ2xhZCB0byBoYXZlIGhpbSBjb21lLCBhbmQgaGUgc2V0IGhpbXNlbGYgdG8gd29yaywgZGVmZWF0ZWQgQXNjYWxpcyBpbiBiYXR0bGUsIGFuZCBsYWlkIHNpZWdlIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIFN1bGxhIHNlbnQgb3V0IFBhY2NpYW51cyB3aXRoIGFuIGFybXkgdG8gZ2l2ZSBhaWQgdG8gQXNjYWxpcywgU2VydG9yaXVzIGpvaW5lZCBiYXR0bGUgd2l0aCBQYWNjaWFudXMgYW5kIHNsZXcgaGltLCB3b24gb3ZlciBoaXMgc29sZGllcnMgYWZ0ZXIgdGhlaXIgZGVmZWF0LCBhbmQgZm9yY2VkIHRvIGEgc3VycmVuZGVyIHRoZSBjaXR5IG9mIFRpbmdpcywgaW50byB3aGljaCBBc2NhbGlzIGFuZCBoaXMgYnJldGhyZW4gaGFkIGZsZWQgZm9yIHJlZnVnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5JbiB0aGlzIGNpdHkgdGhlIExpYnlhbnMgc2F5IHRoYXQgQW50YWV1cyBpcyBidXJpZWQ7IGFuZCBTZXJ0b3JpdXMgaGFkIGhpcyB0b21iIGR1ZyBvcGVuLCB0aGUgZ3JlYXQgc2l6ZSBvZiB3aGljaCBtYWRlIGhpbSBkaXNiZWxpZXZlIHRoZSBCYXJiYXJpYW5zLiBCdXQgd2hlbiBoZSBjYW1lIHVwb24gdGhlIGJvZHkgYW5kIGZvdW5kIGl0IHRvIGJlIHNpeHR5IGN1Yml0cyBsb25nLCBhcyB0aGV5IHRlbGwgdXMsIGhlIHdhcyBkdW1iZm91bmRlZCwgYW5kIGFmdGVyIHBlcmZvcm1pbmcgYSBzYWNyaWZpY2UgZmlsbGVkIHVwIHRoZSB0b21iIGFnYWluLCBhbmQgam9pbmVkIGluIG1hZ25pZnlpbmcgaXRzIHRyYWRpdGlvbnMgYW5kIGhvbm91cnMuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgcGVvcGxlIG9mIFRpbmdpcyBoYXZlIGEgbXl0aCB0aGF0IGFmdGVyIHRoZSBkZWF0aCBvZiBBbnRhZXVzLCBoaXMgd2lmZSwgVGluZ2EsIGNvbnNvcnRlZCB3aXRoIEhlcmFjbGVzLCBhbmQgdGhhdCBTb3BoYXggd2FzIHRoZSBmcnVpdCBvZiB0aGlzIHVuaW9uLCB3aG8gYmVjYW1lIGtpbmcgb2YgdGhlIGNvdW50cnkgYW5kIG5hbWVkIGEgY2l0eSB3aGljaCBoZSBmb3VuZGVkIGFmdGVyIGhpcyBtb3RoZXI7IGFsc28gdGhhdCBTb3BoYXggaGFkIGEgc29uLCBEaW9kb3J1cywgdG8gd2hvbSBtYW55IG9mIHRoZSBMaWJ5YW4gcGVvcGxlcyBiZWNhbWUgc3ViamVjdCwgc2luY2UgaGUgaGFkIGEgR3JlZWsgYXJteSBjb21wb3NlZCBvZiB0aGUgT2xiaWFucyBhbmQgTXljZW5hZWFucyB3aG8gd2VyZSBzZXR0bGVkIGluIHRob3NlIHBhcnRzIGJ5IEhlcmFjbGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyB0YWxlIG11c3QgYmUgYXNjcmliZWQgdG8gYSBkZXNpcmUgdG8gZ3JhdGlmeSBKdWJhLCBvZiBhbGwga2luZ3MgdGhlIG1vc3QgZGV2b3RlZCB0byBoaXN0b3JpY2FsIGVucXVpcnk7IGZvciBoaXMgYW5jZXN0b3JzIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBkZXNjZW5kYW50cyBvZiBTb3BoYXggYW5kIERpb2RvcnVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIHBlb3BsZSBvZiBUaW5naXMgaGF2ZSBhIG15dGggdGhhdCBhZnRlciB0aGUgZGVhdGggb2YgQW50YWV1cywgaGlzIHdpZmUsIFRpbmdhLCBjb25zb3J0ZWQgd2l0aCBIZXJhY2xlcywgYW5kIHRoYXQgU29waGF4IHdhcyB0aGUgZnJ1aXQgb2YgdGhpcyB1bmlvbiwgd2hvIGJlY2FtZSBraW5nIG9mIHRoZSBjb3VudHJ5IGFuZCBuYW1lZCBhIGNpdHkgd2hpY2ggaGUgZm91bmRlZCBhZnRlciBoaXMgbW90aGVyOyBhbHNvIHRoYXQgU29waGF4IGhhZCBhIHNvbiwgRGlvZG9ydXMsIHRvIHdob20gbWFueSBvZiB0aGUgTGlieWFuIHBlb3BsZXMgYmVjYW1lIHN1YmplY3QsIHNpbmNlIGhlIGhhZCBhIEdyZWVrIGFybXkgY29tcG9zZWQgb2YgdGhlIE9sYmlhbnMgYW5kIE15Y2VuYWVhbnMgd2hvIHdlcmUgc2V0dGxlZCBpbiB0aG9zZSBwYXJ0cyBieSBIZXJhY2xlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIHRhbGUgbXVzdCBiZSBhc2NyaWJlZCB0byBhIGRlc2lyZSB0byBncmF0aWZ5IEp1YmEsIG9mIGFsbCBraW5ncyB0aGUgbW9zdCBkZXZvdGVkIHRvIGhpc3RvcmljYWwgZW5xdWlyeTsgZm9yIGhpcyBhbmNlc3RvcnMgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGRlc2NlbmRhbnRzIG9mIFNvcGhheCBhbmQgRGlvZG9ydXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2VydG9yaXVzLCB0aGVuLCBoYXZpbmcgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiB0aGUgd2hvbGUgY291bnRyeSwgZGlkIG5vIHdyb25nIHRvIHRob3NlIHdobyB3ZXJlIGhpcyBzdXBwbGlhbnRzIGFuZCBwdXQgdGhlaXIgdHJ1c3QgaW4gaGltLCBidXQgcmVzdG9yZWQgdG8gdGhlbSBib3RoIHByb3BlcnR5IGFuZCBjaXRpZXMgYW5kIGdvdmVybm1lbnQsIHJlY2VpdmluZyBvbmx5IHdoYXQgd2FzIHJpZ2h0IGFuZCBmYWlyIGluIGZyZWUgZ2lmdHMgZnJvbSB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBkZWxpYmVyYXRpbmcgd2hpdGhlciB0byB0dXJuIGhpcyBlZmZvcnRzIG5leHQsIHRoZSBMdXNpdGFuaWFucyBzZW50IGFtYmFzc2Fkb3JzIGFuZCBpbnZpdGVkIGhpbSB0byBiZSB0aGVpciBsZWFkZXIuIFRoZXkgd2VyZSBhbHRvZ2V0aGVyIGxhY2tpbmcgaW4gYSBjb21tYW5kZXIgb2YgZ3JlYXQgcmVwdXRhdGlvbiBhbmQgZXhwZXJpZW5jZSBhcyB0aGV5IGZhY2VkIHRoZSB0ZXJyb3Igb2YgdGhlIFJvbWFuIGFybXMsIGFuZCB0aGV5IGVudHJ1c3RlZCB0aGVtc2VsdmVzIHRvIGhpbSwgYW5kIHRvIGhpbSBhbG9uZSwgd2hlbiB0aGV5IGxlYXJuZWQgYWJvdXQgaGlzIGNoYXJhY3RlciBmcm9tIHRob3NlIHdobyBoYWQgYmVlbiB3aXRoIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBTZXJ0b3JpdXMgd2FzIG5vIGVhc3kgdmljdGltIGVpdGhlciBvZiBwbGVhc3VyZSBvciBvZiBmZWFyLCBidXQgdGhhdCBoZSB3YXMgbmF0dXJhbGx5IHVudGVycmlmaWVkIGluIHRoZSBmYWNlIG9mIGRhbmdlciwgYW5kIGJvcmUgcHJvc3Blcml0eSB3aXRoIG1vZGVyYXRpb247IGluIHN0cmFpZ2h0Zm9yd2FyZCBmaWdodGluZyBoZSB3YXMgYXMgYm9sZCBhcyBhbnkgY29tbWFuZGVyIG9mIGhpcyB0aW1lLCB3aGlsZSBpbiBhbGwgbWlsaXRhcnkgYWN0aXZpdGllcyBkZW1hbmRpbmcgc3RlYWx0aCBhbmQgdGhlIHBvd2VyIHRvIHNlaXplIGFuIGFkdmFudGFnZSBpbiBzZWN1cmluZyBzdHJvbmcgcG9zaXRpb25zIG9yIGluIGNyb3NzaW5nIHJpdmVycywgd2hlcmUgc3BlZWQsIGRlY2VpdCwgYW5kLCBpZiBuZWNlc3NhcnksIGZhbHNlaG9vZCBhcmUgcmVxdWlyZWQsIGhlIHdhcyBhbiBleHBlcnQgb2YgdGhlIGhpZ2hlc3QgYWJpbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoaWxlIGhlIHNob3dlZCBoaW1zZWxmIGdlbmVyb3VzIGluIHJld2FyZGluZyBkZWVkcyBvZiB2YWxvdXIsIGhlIHVzZWQgbW9kZXJhdGlvbiBpbiBwdW5pc2hpbmcgdHJhbnNncmVzc2lvbnMuIEFuZCB5ZXQsIGluIHRoZSBsYXN0IHBhcnQgb2YgaGlzIGxpZmUsIHRoZSBzYXZhZ2UgYW5kIHZpbmRpY3RpdmUgdHJlYXRtZW50IHdoaWNoIGhlIGJlc3Rvd2VkIHVwb24gaGlzIGhvc3RhZ2VzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAyNS40IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh4di4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd291bGQgc2VlbSB0byBzaG93IHRoYXQgaGlzIG1pbGRuZXNzIHdhcyBub3QgbmF0dXJhbCB0byBoaW0sIGJ1dCB3YXMgd29ybiBhcyBhIGdhcm1lbnQsIGZyb20gY2FsY3VsYXRpb24sIGFzIG5lY2Vzc2l0eSByZXF1aXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbXkgb3BpbmlvbiwgaG93ZXZlciwgYSB2aXJ0dWUgdGhhdCBpcyBzaW5jZXJlIGFuZCBiYXNlZCB1cG9uIHJlYXNvbiBjYW4gbmV2ZXIgYnkgYW55IGZvcnR1bmUgYmUgY29udmVydGVkIGludG8gaXRzIG9wcG9zaXRlLCBhbHRob3VnaCBpdCBpcyB0cnVlIHRoYXQgZXhjZWxsZW50IHByaW5jaXBsZXMgYW5kIG5hdHVyZXMsIHdoZW4gaW1wYWlyZWQgYnkgZ3JlYXQgYW5kIHVuZGVzZXJ2ZWQgY2FsYW1pdGllcywgbWF5IHBvc3NpYmx5IGNoYW5nZSB0aGVpciBjaGFyYWN0ZXIgYXMgdGhlIGd1aWRpbmcgZ2VuaXVzIGNoYW5nZXMuIEFuZCB0aGlzLCBJIHRoaW5rLCB3YXMgdGhlIGNhc2Ugd2l0aCBTZXJ0b3JpdXMgd2hlbiBmb3J0dW5lIGF0IGxhc3QgYmVnYW4gdG8gZm9yc2FrZSBoaW07IGFzIGhpcyBjYXVzZSBncmV3IGhvcGVsZXNzIGhlIGJlY2FtZSBoYXJzaCB0b3dhcmQgdGhvc2Ugd2hvIGRpZCBoaW0gd3JvbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIGRlbGliZXJhdGluZyB3aGl0aGVyIHRvIHR1cm4gaGlzIGVmZm9ydHMgbmV4dCwgdGhlIEx1c2l0YW5pYW5zIHNlbnQgYW1iYXNzYWRvcnMgYW5kIGludml0ZWQgaGltIHRvIGJlIHRoZWlyIGxlYWRlci4gVGhleSB3ZXJlIGFsdG9nZXRoZXIgbGFja2luZyBpbiBhIGNvbW1hbmRlciBvZiBncmVhdCByZXB1dGF0aW9uIGFuZCBleHBlcmllbmNlIGFzIHRoZXkgZmFjZWQgdGhlIHRlcnJvciBvZiB0aGUgUm9tYW4gYXJtcywgYW5kIHRoZXkgZW50cnVzdGVkIHRoZW1zZWx2ZXMgdG8gaGltLCBhbmQgdG8gaGltIGFsb25lLCB3aGVuIHRoZXkgbGVhcm5lZCBhYm91dCBoaXMgY2hhcmFjdGVyIGZyb20gdGhvc2Ugd2hvIGhhZCBiZWVuIHdpdGggaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgU2VydG9yaXVzIHdhcyBubyBlYXN5IHZpY3RpbSBlaXRoZXIgb2YgcGxlYXN1cmUgb3Igb2YgZmVhciwgYnV0IHRoYXQgaGUgd2FzIG5hdHVyYWxseSB1bnRlcnJpZmllZCBpbiB0aGUgZmFjZSBvZiBkYW5nZXIsIGFuZCBib3JlIHByb3NwZXJpdHkgd2l0aCBtb2RlcmF0aW9uOyBpbiBzdHJhaWdodGZvcndhcmQgZmlnaHRpbmcgaGUgd2FzIGFzIGJvbGQgYXMgYW55IGNvbW1hbmRlciBvZiBoaXMgdGltZSwgd2hpbGUgaW4gYWxsIG1pbGl0YXJ5IGFjdGl2aXRpZXMgZGVtYW5kaW5nIHN0ZWFsdGggYW5kIHRoZSBwb3dlciB0byBzZWl6ZSBhbiBhZHZhbnRhZ2UgaW4gc2VjdXJpbmcgc3Ryb25nIHBvc2l0aW9ucyBvciBpbiBjcm9zc2luZyByaXZlcnMsIHdoZXJlIHNwZWVkLCBkZWNlaXQsIGFuZCwgaWYgbmVjZXNzYXJ5LCBmYWxzZWhvb2QgYXJlIHJlcXVpcmVkLCBoZSB3YXMgYW4gZXhwZXJ0IG9mIHRoZSBoaWdoZXN0IGFiaWxpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGlsZSBoZSBzaG93ZWQgaGltc2VsZiBnZW5lcm91cyBpbiByZXdhcmRpbmcgZGVlZHMgb2YgdmFsb3VyLCBoZSB1c2VkIG1vZGVyYXRpb24gaW4gcHVuaXNoaW5nIHRyYW5zZ3Jlc3Npb25zLiBBbmQgeWV0LCBpbiB0aGUgbGFzdCBwYXJ0IG9mIGhpcyBsaWZlLCB0aGUgc2F2YWdlIGFuZCB2aW5kaWN0aXZlIHRyZWF0bWVudCB3aGljaCBoZSBiZXN0b3dlZCB1cG9uIGhpcyBob3N0YWdlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDI1LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3b3VsZCBzZWVtIHRvIHNob3cgdGhhdCBoaXMgbWlsZG5lc3Mgd2FzIG5vdCBuYXR1cmFsIHRvIGhpbSwgYnV0IHdhcyB3b3JuIGFzIGEgZ2FybWVudCwgZnJvbSBjYWxjdWxhdGlvbiwgYXMgbmVjZXNzaXR5IHJlcXVpcmVkLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDI1LjQiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiA0LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIG15IG9waW5pb24sIGhvd2V2ZXIsIGEgdmlydHVlIHRoYXQgaXMgc2luY2VyZSBhbmQgYmFzZWQgdXBvbiByZWFzb24gY2FuIG5ldmVyIGJ5IGFueSBmb3J0dW5lIGJlIGNvbnZlcnRlZCBpbnRvIGl0cyBvcHBvc2l0ZSwgYWx0aG91Z2ggaXQgaXMgdHJ1ZSB0aGF0IGV4Y2VsbGVudCBwcmluY2lwbGVzIGFuZCBuYXR1cmVzLCB3aGVuIGltcGFpcmVkIGJ5IGdyZWF0IGFuZCB1bmRlc2VydmVkIGNhbGFtaXRpZXMsIG1heSBwb3NzaWJseSBjaGFuZ2UgdGhlaXIgY2hhcmFjdGVyIGFzIHRoZSBndWlkaW5nIGdlbml1cyBjaGFuZ2VzLiBBbmQgdGhpcywgSSB0aGluaywgd2FzIHRoZSBjYXNlIHdpdGggU2VydG9yaXVzIHdoZW4gZm9ydHVuZSBhdCBsYXN0IGJlZ2FuIHRvIGZvcnNha2UgaGltOyBhcyBoaXMgY2F1c2UgZ3JldyBob3BlbGVzcyBoZSBiZWNhbWUgaGFyc2ggdG93YXJkIHRob3NlIHdobyBkaWQgaGltIHdyb25nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrIGhlIHNldCBvdXQgZnJvbSBBZnJpY2Egb24gdGhlIGludml0YXRpb24gb2YgdGhlIEx1c2l0YW5pYW5zLiBUaGVzZSBoZSBwcm9jZWVkZWQgdG8gb3JnYW5pemUgYXQgb25jZSwgYWN0aW5nIGFzIHRoZWlyIGdlbmVyYWwgd2l0aCBmdWxsIHBvd2VycywgYW5kIGhlIGJyb3VnaHQgdGhlIG5laWdoYm91cmluZyBwYXJ0cyBvZiBTcGFpbiBpbnRvIHN1YmplY3Rpb24uIE1vc3Qgb2YgdGhlIHBlb3BsZSBqb2luZWQgaGltIG9mIHRoZWlyIG93biBhY2NvcmQsIG93aW5nIGNoaWVmbHkgdG8gaGlzIG1pbGRuZXNzIGFuZCBlZmZpY2llbmN5OyBidXQgc29tZXRpbWVzIGhlIGFsc28gYmV0b29rIGhpbXNlbGYgdG8gY3VubmluZyBkZXZpY2VzIG9mIGhpcyBvd24gZm9yIGRlY2VpdmluZyBhbmQgY2hhcm1pbmcgdGhlbS4gVGhlIGNoaWVmIG9uZSBvZiB0aGVzZSwgY2VydGFpbmx5LCB3YXMgdGhlIGRldmljZSBvZiB0aGUgZG9lLCB3aGljaCB3YXMgYXMgZm9sbG93cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhayBoZSBzZXQgb3V0IGZyb20gQWZyaWNhIG9uIHRoZSBpbnZpdGF0aW9uIG9mIHRoZSBMdXNpdGFuaWFucy4gVGhlc2UgaGUgcHJvY2VlZGVkIHRvIG9yZ2FuaXplIGF0IG9uY2UsIGFjdGluZyBhcyB0aGVpciBnZW5lcmFsIHdpdGggZnVsbCBwb3dlcnMsIGFuZCBoZSBicm91Z2h0IHRoZSBuZWlnaGJvdXJpbmcgcGFydHMgb2YgU3BhaW4gaW50byBzdWJqZWN0aW9uLiBNb3N0IG9mIHRoZSBwZW9wbGUgam9pbmVkIGhpbSBvZiB0aGVpciBvd24gYWNjb3JkLCBvd2luZyBjaGllZmx5IHRvIGhpcyBtaWxkbmVzcyBhbmQgZWZmaWNpZW5jeTsgYnV0IHNvbWV0aW1lcyBoZSBhbHNvIGJldG9vayBoaW1zZWxmIHRvIGN1bm5pbmcgZGV2aWNlcyBvZiBoaXMgb3duIGZvciBkZWNlaXZpbmcgYW5kIGNoYXJtaW5nIHRoZW0uIFRoZSBjaGllZiBvbmUgb2YgdGhlc2UsIGNlcnRhaW5seSwgd2FzIHRoZSBkZXZpY2Ugb2YgdGhlIGRvZSwgd2hpY2ggd2FzIGFzIGZvbGxvd3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNwYW51cywgYSBwbGViZWlhbiB3aG8gbGl2ZWQgaW4gdGhlIGNvdW50cnksIGNhbWUgdXBvbiBhIGRvZSB3aGljaCBoYWQgbmV3bHkgeWVhbmVkIGFuZCB3YXMgdHJ5aW5nIHRvIGVzY2FwZSB0aGUgaHVudGVycy4gVGhlIG1vdGhlciBoZSBjb3VsZCBub3Qgb3ZlcnRha2UsIGJ1dCB0aGUgZmF3buKAlGFuZCBoZSB3YXMgc3RydWNrIHdpdGggaXRzIHVudXN1YWwgY29sb3VyLCBmb3IgaXQgd2FzIGVudGlyZWx5IHdoaXRl4oCUaGUgcHVyc3VlZCBhbmQgY2F1Z2h0LiBBbmQgc2luY2UsIGFzIGl0IGNoYW5jZWQsIFNlcnRvcml1cyBoYWQgdGFrZW4gdXAgaGlzIHF1YXJ0ZXJzIGluIHRoYXQgcmVnaW9uLCBhbmQgZ2xhZGx5IHJlY2VpdmVkIGV2ZXJ5dGhpbmcgaW4gdGhlIHdheSBvZiBnYW1lIG9yIHByb2R1Y2UgdGhhdCB3YXMgYnJvdWdodCBoaW0gYXMgYSBnaWZ0LCBhbmQgbWFkZSBraW5kbHkgcmV0dXJucyB0byB0aG9zZSB3aG8gZGlkIGhpbSBzdWNoIGZhdm91cnMsIFNwYW51cyBicm91Z2h0IHRoZSBmYXduIGFuZCBnYXZlIGl0IHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U2VydG9yaXVzIGFjY2VwdGVkIGl0LCBhbmQgYXQgdGhlIG1vbWVudCBmZWx0IG9ubHkgdGhlIG9yZGluYXJ5IHBsZWFzdXJlIGluIGEgZ2lmdDsgYnV0IGluIHRpbWUsIGFmdGVyIGhlIGhhZCBtYWRlIHRoZSBhbmltYWwgc28gdGFtZSBhbmQgZ2VudGxlIHRoYXQgaXQgb2JleWVkIGhpcyBjYWxsLCBhY2NvbXBhbmllZCBoaW0gb24gaGlzIHdhbGtzLCBhbmQgZGlkIG5vdCBtaW5kIHRoZSBjcm93ZHMgYW5kIGFsbCB0aGUgdXByb2FyIG9mIGNhbXAgbGlmZSwgaGUgZ3JhZHVhbGx5IHRyaWVkIHRvIGdpdmUgdGhlIGRvZSBhIHJlbGlnaW91cyBpbXBvcnRhbmNlIGJ5IGRlY2xhcmluZyB0aGF0IHNoZSB3YXMgYSBnaWZ0IG9mIERpYW5hLCBhbmQgc29sZW1ubHkgYWxsZWdlZCB0aGF0IHNoZSByZXZlYWxlZCBtYW55IGhpZGRlbiB0aGluZ3MgdG8gaGltLCBrbm93aW5nIHRoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBuYXR1cmFsbHkgYW4gZWFzeSBwcmV5IHRvIHN1cGVyc3RpdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBhZGRlZCBzdWNoIGRldmljZXMgYXMgdGhlc2UuIFdoZW5ldmVyIGhlIGhhZCBzZWNyZXQgaW50ZWxsaWdlbmNlIHRoYXQgdGhlIGVuZW15IGhhZCBtYWRlIGFuIGluY3Vyc2lvbiBpbnRvIHRoZSB0ZXJyaXRvcnkgd2hpY2ggaGUgY29tbWFuZGVkLCBvciB3ZXJlIHRyeWluZyB0byBicmluZyBhIGNpdHkgdG8gcmV2b2x0IGZyb20gaGltLCBoZSB3b3VsZCBwcmV0ZW5kIHRoYXQgdGhlIGRvZSBoYWQgY29udmVyc2VkIHdpdGggaGltIGluIGhpcyBkcmVhbXMsIGJpZGRpbmcgaGltIGhvbGQgaGlzIGZvcmNlcyBpbiByZWFkaW5lc3MuIEFnYWluLCB3aGVuIGhlIGdvdCB0aWRpbmdzIG9mIHNvbWUgdmljdG9yeSB3b24gYnkgaGlzIGdlbmVyYWxzLCBoZSB3b3VsZCBoaWRlIHRoZSBtZXNzZW5nZXIsIGFuZCBicmluZyBmb3J0aCB0aGUgZG9lIHdlYXJpbmcgZ2FybGFuZHMgZm9yIHRoZSByZWNlaXB0IG9mIGdsYWQgdGlkaW5ncywgZXhob3J0aW5nIGhpcyBtZW4gdG8gYmUgb2YgZ29vZCBjaGVlciBhbmQgdG8gc2FjcmlmaWNlIHRvIHRoZSBnb2RzLCBhc3N1cmVkIHRoYXQgdGhleSB3ZXJlIHRvIGxlYXJuIG9mIHNvbWUgZ29vZCBmb3J0dW5lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNwYW51cywgYSBwbGViZWlhbiB3aG8gbGl2ZWQgaW4gdGhlIGNvdW50cnksIGNhbWUgdXBvbiBhIGRvZSB3aGljaCBoYWQgbmV3bHkgeWVhbmVkIGFuZCB3YXMgdHJ5aW5nIHRvIGVzY2FwZSB0aGUgaHVudGVycy4gVGhlIG1vdGhlciBoZSBjb3VsZCBub3Qgb3ZlcnRha2UsIGJ1dCB0aGUgZmF3buKAlGFuZCBoZSB3YXMgc3RydWNrIHdpdGggaXRzIHVudXN1YWwgY29sb3VyLCBmb3IgaXQgd2FzIGVudGlyZWx5IHdoaXRl4oCUaGUgcHVyc3VlZCBhbmQgY2F1Z2h0LiBBbmQgc2luY2UsIGFzIGl0IGNoYW5jZWQsIFNlcnRvcml1cyBoYWQgdGFrZW4gdXAgaGlzIHF1YXJ0ZXJzIGluIHRoYXQgcmVnaW9uLCBhbmQgZ2xhZGx5IHJlY2VpdmVkIGV2ZXJ5dGhpbmcgaW4gdGhlIHdheSBvZiBnYW1lIG9yIHByb2R1Y2UgdGhhdCB3YXMgYnJvdWdodCBoaW0gYXMgYSBnaWZ0LCBhbmQgbWFkZSBraW5kbHkgcmV0dXJucyB0byB0aG9zZSB3aG8gZGlkIGhpbSBzdWNoIGZhdm91cnMsIFNwYW51cyBicm91Z2h0IHRoZSBmYXduIGFuZCBnYXZlIGl0IHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNlcnRvcml1cyBhY2NlcHRlZCBpdCwgYW5kIGF0IHRoZSBtb21lbnQgZmVsdCBvbmx5IHRoZSBvcmRpbmFyeSBwbGVhc3VyZSBpbiBhIGdpZnQ7IGJ1dCBpbiB0aW1lLCBhZnRlciBoZSBoYWQgbWFkZSB0aGUgYW5pbWFsIHNvIHRhbWUgYW5kIGdlbnRsZSB0aGF0IGl0IG9iZXllZCBoaXMgY2FsbCwgYWNjb21wYW5pZWQgaGltIG9uIGhpcyB3YWxrcywgYW5kIGRpZCBub3QgbWluZCB0aGUgY3Jvd2RzIGFuZCBhbGwgdGhlIHVwcm9hciBvZiBjYW1wIGxpZmUsIGhlIGdyYWR1YWxseSB0cmllZCB0byBnaXZlIHRoZSBkb2UgYSByZWxpZ2lvdXMgaW1wb3J0YW5jZSBieSBkZWNsYXJpbmcgdGhhdCBzaGUgd2FzIGEgZ2lmdCBvZiBEaWFuYSwgYW5kIHNvbGVtbmx5IGFsbGVnZWQgdGhhdCBzaGUgcmV2ZWFsZWQgbWFueSBoaWRkZW4gdGhpbmdzIHRvIGhpbSwga25vd2luZyB0aGF0IHRoZSBCYXJiYXJpYW5zIHdlcmUgbmF0dXJhbGx5IGFuIGVhc3kgcHJleSB0byBzdXBlcnN0aXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gYWRkZWQgc3VjaCBkZXZpY2VzIGFzIHRoZXNlLiBXaGVuZXZlciBoZSBoYWQgc2VjcmV0IGludGVsbGlnZW5jZSB0aGF0IHRoZSBlbmVteSBoYWQgbWFkZSBhbiBpbmN1cnNpb24gaW50byB0aGUgdGVycml0b3J5IHdoaWNoIGhlIGNvbW1hbmRlZCwgb3Igd2VyZSB0cnlpbmcgdG8gYnJpbmcgYSBjaXR5IHRvIHJldm9sdCBmcm9tIGhpbSwgaGUgd291bGQgcHJldGVuZCB0aGF0IHRoZSBkb2UgaGFkIGNvbnZlcnNlZCB3aXRoIGhpbSBpbiBoaXMgZHJlYW1zLCBiaWRkaW5nIGhpbSBob2xkIGhpcyBmb3JjZXMgaW4gcmVhZGluZXNzLiBBZ2Fpbiwgd2hlbiBoZSBnb3QgdGlkaW5ncyBvZiBzb21lIHZpY3Rvcnkgd29uIGJ5IGhpcyBnZW5lcmFscywgaGUgd291bGQgaGlkZSB0aGUgbWVzc2VuZ2VyLCBhbmQgYnJpbmcgZm9ydGggdGhlIGRvZSB3ZWFyaW5nIGdhcmxhbmRzIGZvciB0aGUgcmVjZWlwdCBvZiBnbGFkIHRpZGluZ3MsIGV4aG9ydGluZyBoaXMgbWVuIHRvIGJlIG9mIGdvb2QgY2hlZXIgYW5kIHRvIHNhY3JpZmljZSB0byB0aGUgZ29kcywgYXNzdXJlZCB0aGF0IHRoZXkgd2VyZSB0byBsZWFybiBvZiBzb21lIGdvb2QgZm9ydHVuZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgZGV2aWNlcyBoZSBtYWRlIHRoZSBwZW9wbGUgdHJhY3RhYmxlLCBhbmQgc28gZm91bmQgdGhlbSBtb3JlIHNlcnZpY2VhYmxlIGZvciBhbGwgaGlzIHBsYW5zOyB0aGV5IGJlbGlldmVkIHRoYXQgdGhleSB3ZXJlIGxlZCwgbm90IGJ5IHRoZSBtb3J0YWwgd2lzZG9tIG9mIGEgZm9yZWlnbmVyLCBidXQgYnkgYSBnb2QuIEF0IHRoZSBzYW1lIHRpbWUgZXZlbnRzIGFsc28gYnJvdWdodCB3aXRuZXNzIHRvIHRoaXMgYmVsaWVmIGJ5IHJlYXNvbiBvZiB0aGUgZXh0cmFvcmRpbmFyeSBncm93dGggb2YgdGhlIHBvd2VyIG9mIFNlcnRvcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdpdGggdGhlIHR3ZW50eS1zaXggaHVuZHJlZCBtZW4gd2hvbSBoZSBjYWxsZWQgUm9tYW5zLCBhbmQgYSBtb3RsZXkgYmFuZCBvZiBzZXZlbiBodW5kcmVkIExpYnlhbnMgd2hvIGNyb3NzZWQgb3ZlciBpbnRvIEx1c2l0YW5pYSB3aXRoIGhpbSwgdG8gd2hvbSBoZSBhZGRlZCBmb3VyIHRob3VzYW5kIEx1c2l0YW5pYW4gdGFyZ2V0ZWVycyBhbmQgc2V2ZW4gaHVuZHJlZCBob3JzZW1lbiwgaGUgd2FnZWQgd2FyIHdpdGggZm91ciBSb21hbiBnZW5lcmFscywgdW5kZXIgd2hvbSB3ZXJlIGEgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kIGZvb3RtZW4sIHNpeCB0aG91c2FuZCBob3JzZW1lbiwgdHdvIHRob3VzYW5kIGJvd21lbiBhbmQgc2xpbmdlcnMsIGFuZCBhbiB1bnRvbGQgbnVtYmVyIG9mIGNpdGllcywgd2hpbGUgaGUgaGltc2VsZiBoYWQgYXQgZmlyc3Qgb25seSB0d2VudHkgYWxsIHRvbGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBuZXZlcnRoZWxlc3MsIGZyb20gc28gd2VhayBhbmQgc2xlbmRlciBhIGJlZ2lubmluZywgaGUgbm90IG9ubHkgc3ViZHVlZCBncmVhdCBuYXRpb25zIGFuZCB0b29rIG1hbnkgY2l0aWVzLCBidXQgd2FzIGFsc28gdmljdG9yaW91cyBvdmVyIHRoZSBnZW5lcmFscyBzZW50IGFnYWluc3QgaGltOiBDb3R0YSBoZSBkZWZlYXRlZCBpbiBhIHNlYS1maWdodCBpbiB0aGUgc3RyYWl0cyBuZWFyIE1lbGxhcmlhOyBGdWZpZGl1cywgdGhlIGdvdmVybm9yIG9mIEJhZXRpY2EsIGhlIHJvdXRlZCBvbiB0aGUgYmFua3Mgb2YgdGhlIEJhZXRpcyB3aXRoIHRoZSBzbGF1Z2h0ZXIgb2YgdHdvIHRob3VzYW5kIFJvbWFuIHNvbGRpZXJzOyBMdWNpdXMgRG9taXRpdXMsIHdobyB3YXMgcHJvLWNvbnN1bCBvZiB0aGUgb3RoZXIgU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3BhaW4gd2FzIGRpdmlkZWQgaW50byB0d28gcHJvdmluY2VzLCBIaXNwYW5pYSBDaXRlcmlvciAoSGl0aGVyKSBhbmQgSGlzcGFuaWEgVWx0ZXJpb3IgKEZ1cnRoZXIpLCBvciBFYXN0ZXJuIGFuZCBXZXN0ZXJuIFNwYWluLiBGdWZpZGl1cyB3YXMgcHJvLWNvbnN1bCBvZiBXZXN0ZXJuIFNwYWluLjwvbm90ZT4gd2FzIGRlZmVhdGVkIGF0IHRoZSBoYW5kcyBvZiBoaXMgcXVhZXN0b3I7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3Jhbml1cywgYW5vdGhlciBvZiB0aGUgY29tbWFuZGVycyBzZW50IG91dCBieSBNZXRlbGx1cyB3aXRoIGFuIGFybXksIGhlIHNsZXc7IGFuZCBvbiBNZXRlbGx1cyBoaW1zZWxmLCB0aGUgZ3JlYXRlc3QgUm9tYW4gb2YgdGhlIHRpbWUgYW5kIGhlbGQgaW4gaGlnaGVzdCByZXB1dGUsIGhlIGluZmxpY3RlZCBtYW55IGRlZmVhdHMgYW5kIHJlZHVjZWQgaGltIHRvIHNvIGdyZWF0IHN0cmFpdHMgdGhhdCBMdWNpdXMgTWFubGl1cyBjYW1lIGZyb20gR2FsbGlhIE5hcmJvbmVuc2lzIHRvIGhlbHAgaGltLCBhbmQgUG9tcGV5IHRoZSBHcmVhdCB3YXMgaHVycmllZGx5IGRpc3BhdGNoZWQgZnJvbSBSb21lIHdpdGggYW4gYXJteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlc2UgZGV2aWNlcyBoZSBtYWRlIHRoZSBwZW9wbGUgdHJhY3RhYmxlLCBhbmQgc28gZm91bmQgdGhlbSBtb3JlIHNlcnZpY2VhYmxlIGZvciBhbGwgaGlzIHBsYW5zOyB0aGV5IGJlbGlldmVkIHRoYXQgdGhleSB3ZXJlIGxlZCwgbm90IGJ5IHRoZSBtb3J0YWwgd2lzZG9tIG9mIGEgZm9yZWlnbmVyLCBidXQgYnkgYSBnb2QuIEF0IHRoZSBzYW1lIHRpbWUgZXZlbnRzIGFsc28gYnJvdWdodCB3aXRuZXNzIHRvIHRoaXMgYmVsaWVmIGJ5IHJlYXNvbiBvZiB0aGUgZXh0cmFvcmRpbmFyeSBncm93dGggb2YgdGhlIHBvd2VyIG9mIFNlcnRvcml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aXRoIHRoZSB0d2VudHktc2l4IGh1bmRyZWQgbWVuIHdob20gaGUgY2FsbGVkIFJvbWFucywgYW5kIGEgbW90bGV5IGJhbmQgb2Ygc2V2ZW4gaHVuZHJlZCBMaWJ5YW5zIHdobyBjcm9zc2VkIG92ZXIgaW50byBMdXNpdGFuaWEgd2l0aCBoaW0sIHRvIHdob20gaGUgYWRkZWQgZm91ciB0aG91c2FuZCBMdXNpdGFuaWFuIHRhcmdldGVlcnMgYW5kIHNldmVuIGh1bmRyZWQgaG9yc2VtZW4sIGhlIHdhZ2VkIHdhciB3aXRoIGZvdXIgUm9tYW4gZ2VuZXJhbHMsIHVuZGVyIHdob20gd2VyZSBhIGh1bmRyZWQgYW5kIHR3ZW50eSB0aG91c2FuZCBmb290bWVuLCBzaXggdGhvdXNhbmQgaG9yc2VtZW4sIHR3byB0aG91c2FuZCBib3dtZW4gYW5kIHNsaW5nZXJzLCBhbmQgYW4gdW50b2xkIG51bWJlciBvZiBjaXRpZXMsIHdoaWxlIGhlIGhpbXNlbGYgaGFkIGF0IGZpcnN0IG9ubHkgdHdlbnR5IGFsbCB0b2xkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBuZXZlcnRoZWxlc3MsIGZyb20gc28gd2VhayBhbmQgc2xlbmRlciBhIGJlZ2lubmluZywgaGUgbm90IG9ubHkgc3ViZHVlZCBncmVhdCBuYXRpb25zIGFuZCB0b29rIG1hbnkgY2l0aWVzLCBidXQgd2FzIGFsc28gdmljdG9yaW91cyBvdmVyIHRoZSBnZW5lcmFscyBzZW50IGFnYWluc3QgaGltOiBDb3R0YSBoZSBkZWZlYXRlZCBpbiBhIHNlYS1maWdodCBpbiB0aGUgc3RyYWl0cyBuZWFyIE1lbGxhcmlhOyBGdWZpZGl1cywgdGhlIGdvdmVybm9yIG9mIEJhZXRpY2EsIGhlIHJvdXRlZCBvbiB0aGUgYmFua3Mgb2YgdGhlIEJhZXRpcyB3aXRoIHRoZSBzbGF1Z2h0ZXIgb2YgdHdvIHRob3VzYW5kIFJvbWFuIHNvbGRpZXJzOyBMdWNpdXMgRG9taXRpdXMsIHdobyB3YXMgcHJvLWNvbnN1bCBvZiB0aGUgb3RoZXIgU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TcGFpbiB3YXMgZGl2aWRlZCBpbnRvIHR3byBwcm92aW5jZXMsIEhpc3BhbmlhIENpdGVyaW9yIChIaXRoZXIpIGFuZCBIaXNwYW5pYSBVbHRlcmlvciAoRnVydGhlciksIG9yIEVhc3Rlcm4gYW5kIFdlc3Rlcm4gU3BhaW4uIEZ1ZmlkaXVzIHdhcyBwcm8tY29uc3VsIG9mIFdlc3Rlcm4gU3BhaW4uPC9ub3RlPiB3YXMgZGVmZWF0ZWQgYXQgdGhlIGhhbmRzIG9mIGhpcyBxdWFlc3RvcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3Jhbml1cywgYW5vdGhlciBvZiB0aGUgY29tbWFuZGVycyBzZW50IG91dCBieSBNZXRlbGx1cyB3aXRoIGFuIGFybXksIGhlIHNsZXc7IGFuZCBvbiBNZXRlbGx1cyBoaW1zZWxmLCB0aGUgZ3JlYXRlc3QgUm9tYW4gb2YgdGhlIHRpbWUgYW5kIGhlbGQgaW4gaGlnaGVzdCByZXB1dGUsIGhlIGluZmxpY3RlZCBtYW55IGRlZmVhdHMgYW5kIHJlZHVjZWQgaGltIHRvIHNvIGdyZWF0IHN0cmFpdHMgdGhhdCBMdWNpdXMgTWFubGl1cyBjYW1lIGZyb20gR2FsbGlhIE5hcmJvbmVuc2lzIHRvIGhlbHAgaGltLCBhbmQgUG9tcGV5IHRoZSBHcmVhdCB3YXMgaHVycmllZGx5IGRpc3BhdGNoZWQgZnJvbSBSb21lIHdpdGggYW4gYXJteS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIE1ldGVsbHVzIHdhcyBhdCBoaXMgd2l0cycgZW5kLiBIZSB3YXMgY2Fycnlpbmcgb24gd2FyIHdpdGggYSBtYW4gb2YgZGFyaW5nIHdobyBldmFkZWQgZXZlcnkga2luZCBvZiBvcGVuIGZpZ2h0aW5nLCBhbmQgd2hvIG1hZGUgYWxsIG1hbm5lciBvZiBzaGlmdHMgYW5kIGNoYW5nZXMsIG93aW5nIHRvIHRoZSBsaWdodCBlcXVpcG1lbnQgYW5kIGFnaWxpdHkgb2YgaGlzIEliZXJpYW4gc29sZGllcnM7IHdoZXJlYXMgaGUgaGltc2VsZiBoYWQgYmVlbiB0cmFpbmVkIGluIHJlZ3VsYXIgY29udGVzdHMgb2YgaGVhdnktYXJtZWQgdHJvb3BzLCBhbmQgd2FzIHdvbnQgdG8gY29tbWFuZCBhIHBvbmRlcm91cyBhbmQgaW1tb2JpbGUgcGhhbGFueCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxNy4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4dmlpLiAyPC9iaWJsPi48L25vdGU+IHdoaWNoLCBmb3IgcmVwZWxsaW5nIGFuZCBvdmVycG93ZXJpbmcgYW4gZW5lbXkgYXQgY2xvc2UgcXVhcnRlcnMsIHdhcyBtb3N0IGV4Y2VsbGVudGx5IHRyYWluZWQsIGJ1dCBmb3IgY2xpbWJpbmcgbW91bnRhaW5zLCBmb3IgZGVhbGluZyB3aXRoaW4gdGhlIGluY2Vzc2FudCBwdXJzdWl0cyBhbmQgZmxpZ2h0cyBvZiBtZW4gYXMgbGlnaHQgYXMgdGhlIHdpbmRzLCBhbmQgZm9yIGVuZHVyaW5nIGh1bmdlciBhbmQgYSBsaWZlIHdpdGhvdXQgZmlyZSBvciB0ZW50LCBhcyB0aGVpciBlbmVtaWVzIGRpZCwgaXQgd2FzIHdvcnRobGVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZXRlbGx1cyB3YXMgYXQgaGlzIHdpdHMnIGVuZC4gSGUgd2FzIGNhcnJ5aW5nIG9uIHdhciB3aXRoIGEgbWFuIG9mIGRhcmluZyB3aG8gZXZhZGVkIGV2ZXJ5IGtpbmQgb2Ygb3BlbiBmaWdodGluZywgYW5kIHdobyBtYWRlIGFsbCBtYW5uZXIgb2Ygc2hpZnRzIGFuZCBjaGFuZ2VzLCBvd2luZyB0byB0aGUgbGlnaHQgZXF1aXBtZW50IGFuZCBhZ2lsaXR5IG9mIGhpcyBJYmVyaWFuIHNvbGRpZXJzOyB3aGVyZWFzIGhlIGhpbXNlbGYgaGFkIGJlZW4gdHJhaW5lZCBpbiByZWd1bGFyIGNvbnRlc3RzIG9mIGhlYXZ5LWFybWVkIHRyb29wcywgYW5kIHdhcyB3b250IHRvIGNvbW1hbmQgYSBwb25kZXJvdXMgYW5kIGltbW9iaWxlIHBoYWxhbngsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHZpaS4gMjwvYmlibD4uPC9ub3RlPiB3aGljaCwgZm9yIHJlcGVsbGluZyBhbmQgb3ZlcnBvd2VyaW5nIGFuIGVuZW15IGF0IGNsb3NlIHF1YXJ0ZXJzLCB3YXMgbW9zdCBleGNlbGxlbnRseSB0cmFpbmVkLCBidXQgZm9yIGNsaW1iaW5nIG1vdW50YWlucywgZm9yIGRlYWxpbmcgd2l0aGluIHRoZSBpbmNlc3NhbnQgcHVyc3VpdHMgYW5kIGZsaWdodHMgb2YgbWVuIGFzIGxpZ2h0IGFzIHRoZSB3aW5kcywgYW5kIGZvciBlbmR1cmluZyBodW5nZXIgYW5kIGEgbGlmZSB3aXRob3V0IGZpcmUgb3IgdGVudCwgYXMgdGhlaXIgZW5lbWllcyBkaWQsIGl0IHdhcyB3b3J0aGxlc3MuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHZpaS4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh2aWkuIDI8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoaXMsIE1ldGVsbHVzIHdhcyBub3cgZ2V0dGluZyBvbiBpbiB5ZWFycywgYW5kIHdhcyBzb21ld2hhdCBpbmNsaW5lZCBhbHNvLCBieSB0aGlzIHRpbWUsIHRvIGFuIGVhc3kgYW5kIGx1eHVyaW91cyBtb2RlIG9mIGxpZmUgYWZ0ZXIgaGlzIG1hbnkgYW5kIGdyZWF0IGNvbnRlc3RzOyB3aGVyZWFzIGhpcyBvcHBvbmVudCwgU2VydG9yaXVzLCB3YXMgZnVsbCBvZiBtYXR1cmUgdmlnb3VyLCBhbmQgaGFkIGEgYm9keSB3aGljaCB3YXMgd29uZGVyZnVsbHkgY29uc3RpdHV0ZWQgZm9yIHN0cmVuZ3RoLCBzcGVlZCwgYW5kIHBsYWluIGxpdmluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIGV4Y2Vzc2l2ZSBkcmlua2luZyBoZSB3b3VsZCBub3QgaW5kdWxnZSBldmVuIGluIGhpcyBob3VycyBvZiBlYXNlLCBhbmQgaGUgd2FzIHdvbnQgdG8gZW5kdXJlIGdyZWF0IHRvaWxzLCBsb25nIG1hcmNoZXMsIGFuZCBjb250aW51b3VzIHdha2VmdWxuZXNzLCBjb250ZW50IHdpdGhpbiBtZWFncmUgYW5kIGluZGlmZmVyZW50IGZvb2Q7IG1vcmVvdmVyLCBzaW5jZSBoZSB3YXMgYWx3YXlzIHdhbmRlcmluZyBhYm91dCBvciBodW50aW5nIHdoZW4gaGUgaGFkIGxlaXN1cmUgZm9yIGl0LCBoZSBvYnRhaW5lZCBhbiBhY3F1YWludGFuY2Ugd2l0aCBldmVyeSB3YXkgb2YgZXNjYXBlIGZvciBhIGZ1Z2l0aXZlLCBvciBvZiBzdXJyb3VuZGluZyBhbiBlbmVteSB1bmRlciBwdXJzdWl0LCBpbiBwbGFjZXMgYm90aCBhY2Nlc3NpYmxlIGFuZCBpbmFjY2Vzc2libGUuIFRoZSByZXN1bHQgd2FzLCB0aGVyZWZvcmUsIHRoYXQgTWV0ZWxsdXMsIGJ5IGJlaW5nIGtlcHQgZnJvbSBmaWdodGluZywgc3VmZmVyZWQgYWxsIHRoZSBoYXJtIHdoaWNoIHZpc2l0cyBtZW4gd2hvIGFyZSBkZWZlYXRlZDsgd2hpbGUgU2VydG9yaXVzLCBieSBmbHlpbmcsIGhhZCB0aGUgYWR2YW50YWdlcyBvZiBtZW4gd2hvIHB1cnN1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdvdWxkIGN1dCBvZmYgaGlzIG9wcG9uZW50J3Mgc3VwcGx5IG9mIHdhdGVyIGFuZCBwcmV2ZW50IGhpcyBmb3JhZ2luZzsgaWYgdGhlIFJvbWFucyBhZHZhbmNlZCwgaGUgd291bGQgZ2V0IG91dCBvZiB0aGVpciB3YXksIGFuZCBpZiB0aGV5IHNldHRsZWQgZG93biBpbiBjYW1wLCBoZSB3b3VsZCBoYXJhc3MgdGhlbTsgaWYgdGhleSBiZXNpZWdlZCBhIHBsYWNlLCBoZSB3b3VsZCBjb21lIHVwIGFuZCBwdXQgdGhlbSB1bmRlciBzaWVnZSBpbiB0aGVpciB0dXJuIGJ5IGRlcHJpdmluZyB0aGVtIG9mIHN1cHBsaWVzLiBBdCBsYXN0IHRoZSBSb21hbiBzb2xkaWVycyB3ZXJlIGluIGRlc3BhaXIsIGFuZCB3aGVuIFNlcnRvcml1cyBjaGFsbGVuZ2VkIE1ldGVsbHVzIHRvIHNpbmdsZSBjb21iYXQsIHRoZXkgY3JpZWQgYWxvdWQgYW5kIGJhZGUgaGltIGZpZ2h0LCBnZW5lcmFsIHdpdGggZ2VuZXJhbCwgYW5kIFJvbWFuIHdpdGggUm9tYW4sIGFuZCB3aGVuIGhlIGRlY2xpbmVkLCB0aGV5IG1vY2tlZCBhdCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNZXRlbGx1cyBsYXVnaGVkIGF0IGFsbCB0aGlzLCBhbmQgaGUgd2FzIHJpZ2h0OyBmb3IgYSBnZW5lcmFsLCBhcyBUaGVvcGhyYXN0dXMgc2F5cywgc2hvdWxkIGRpZSB0aGUgZGVhdGggb2YgYSBnZW5lcmFsLCBub3QgdGhhdCBvZiBhIGNvbW1vbiB0YXJnZXRlZXIuIFRoZW4sIHNlZWluZyB0aGF0IHRoZSBMYW5nb2JyaXRhZSB3ZXJlIGdpdmluZyBubyBzbGlnaHQgYXNzaXN0YW5jZSB0byBTZXJ0b3JpdXMsIGFuZCB0aGF0IHRoZWlyIGNpdHkgY291bGQgZWFzaWx5IGJlIHRha2VuIGZvciBsYWNrIG9mIHdhdGVyIChzaW5jZSB0aGV5IGhhZCBidXQgb25lIHdlbGwgaW4gdGhlIGNpdHksIGFuZCB0aGUgc3RyZWFtcyBpbiB0aGUgc3VidXJicyBhbmQgYWxvbmcgdGhlIHdhbGxzIHdvdWxkIGJlIGluIHRoZSBwb3dlciBvZiBhbnkgYmVzaWVnZXIpLCBNZXRlbGx1cyBjYW1lIGFnYWluc3QgdGhlIGNpdHksIGludGVuZGluZyB0byBjb21wbGV0ZSB0aGUgc2llZ2UgaW4gdHdvIGRheXMsIHNpbmNlIHRoZXJlIHdhcyBubyB3YXRlciB0aGVyZS4gT24gdGhpcyBhY2NvdW50LCB0b28sIGhlIGhhZCBnaXZlbiBvcmRlcnMgdG8gaGlzIHNvbGRpZXJzIHRvIHRha2UgYWxvbmcgcHJvdmlzaW9ucyBmb3Igb25seSBmaXZlIGRheXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTZXJ0b3JpdXMgcXVpY2tseSBjYW1lIHRvIHRoZSByZXNjdWUgYW5kIG9yZGVyZWQgdHdvIHRob3VzYW5kIHNraW5zIHRvIGJlIGZpbGxlZCB3aXRoIHdhdGVyLCBvZmZlcmluZyBmb3IgZWFjaCBza2luIGEgY29uc2lkZXJhYmxlIHN1bSBvZiBtb25leS4gTWFueSBJYmVyaWFucyBhbmQgbWFueSBNYXVydXNpYW5zIHZvbHVudGVlcmVkIGZvciB0aGUgd29yaywgYW5kIGFmdGVyIHNlbGVjdGluZyBtZW4gd2hvIHdlcmUgYm90aCBzdHVyZHkgYW5kIHN3aWZ0IG9mIGZvb3QsIGhlIHNlbnQgdGhlbSBieSBhIHJvdXRlIHRocm91Z2ggdGhlIG1vdW50YWlucywgd2l0aCBvcmRlcnMgdGhhdCB3aGVuIHRoZXkgaGFkIGRlbGl2ZXJlZCB0aGUgc2tpbnMgdG8gdGhlIHBlb3BsZSBpbiB0aGUgY2l0eSwgdGhleSBzaG91bGQgc2VjcmV0bHkgY29udmV5IGF3YXkgdGhlIHVuc2VydmljZWFibGUgbWFzcyBvZiB0aGUgcG9wdWxhdGlvbiwgaW4gb3JkZXIgdGhhdCB0aGUgd2F0ZXIgbWlnaHQgc3VmZmljZSBmb3IgdGhlIGFjdHVhbCBkZWZlbmRlcnMgb2YgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWV0ZWxsdXMgbGVhcm5lZCB0aGF0IHRoaXMgaGFkIGJlZW4gZG9uZSwgaGUgd2FzIGFubm95ZWQsIHNpbmNlIGhpcyBzb2xkaWVycyBoYWQgYWxyZWFkeSBjb25zdW1lZCB0aGVpciBwcm92aXNpb25zLCBhbmQgc2VudCBvdXQgQXF1aW51cywgYXQgdGhlIGhlYWQgb2Ygc2l4IHRob3VzYW5kIG1lbiwgdG8gZm9yYWdlLiBCdXQgU2VydG9yaXVzIGxlYXJuZWQgb2YgdGhpcyBhbmQgc2V0IGFuIGFtYnVzaCBvZiB0aHJlZSB0aG91c2FuZCBtZW4gaW4gdGhlIHJvYWQgYnkgd2hpY2ggQXF1aW51cyB3YXMgdG8gcmV0dXJuLiBUaGVzZSBzYWxsaWVkIGZvcnRoIGZyb20gYSBzaGFkeSByYXZpbmUgYW5kIGF0dGFja2VkIEFxdWludXMgaW4gdGhlIHJlYXIsIHdoaWxlIFNlcnRvcml1cyBoaW1zZWxmIGFzc2FpbGVkIGhpbSBpbiBmcm9udCwgcm91dGVkIGhpbSwgc2xldyBzb21lIG9mIGhpcyBtZW4sIGFuZCB0b29rIHNvbWUgb2YgdGhlbSBwcmlzb25lcnMuIEFxdWludXMsIGFmdGVyIGxvc2luZyBib3RoIGhpcyBhcm1vdXIgYW5kIGhpcyBob3JzZSwgZ290IGJhY2sgdG8gTWV0ZWxsdXMsIHdobyB0aGVuIHJldGlyZWQgZGlzZ3JhY2VmdWxseSwgbXVjaCBmbG91dGVkIGJ5IHRoZSBJYmVyaWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCBNZXRlbGx1cyB3YXMgbm93IGdldHRpbmcgb24gaW4geWVhcnMsIGFuZCB3YXMgc29tZXdoYXQgaW5jbGluZWQgYWxzbywgYnkgdGhpcyB0aW1lLCB0byBhbiBlYXN5IGFuZCBsdXh1cmlvdXMgbW9kZSBvZiBsaWZlIGFmdGVyIGhpcyBtYW55IGFuZCBncmVhdCBjb250ZXN0czsgd2hlcmVhcyBoaXMgb3Bwb25lbnQsIFNlcnRvcml1cywgd2FzIGZ1bGwgb2YgbWF0dXJlIHZpZ291ciwgYW5kIGhhZCBhIGJvZHkgd2hpY2ggd2FzIHdvbmRlcmZ1bGx5IGNvbnN0aXR1dGVkIGZvciBzdHJlbmd0aCwgc3BlZWQsIGFuZCBwbGFpbiBsaXZpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBleGNlc3NpdmUgZHJpbmtpbmcgaGUgd291bGQgbm90IGluZHVsZ2UgZXZlbiBpbiBoaXMgaG91cnMgb2YgZWFzZSwgYW5kIGhlIHdhcyB3b250IHRvIGVuZHVyZSBncmVhdCB0b2lscywgbG9uZyBtYXJjaGVzLCBhbmQgY29udGludW91cyB3YWtlZnVsbmVzcywgY29udGVudCB3aXRoaW4gbWVhZ3JlIGFuZCBpbmRpZmZlcmVudCBmb29kOyBtb3Jlb3Zlciwgc2luY2UgaGUgd2FzIGFsd2F5cyB3YW5kZXJpbmcgYWJvdXQgb3IgaHVudGluZyB3aGVuIGhlIGhhZCBsZWlzdXJlIGZvciBpdCwgaGUgb2J0YWluZWQgYW4gYWNxdWFpbnRhbmNlIHdpdGggZXZlcnkgd2F5IG9mIGVzY2FwZSBmb3IgYSBmdWdpdGl2ZSwgb3Igb2Ygc3Vycm91bmRpbmcgYW4gZW5lbXkgdW5kZXIgcHVyc3VpdCwgaW4gcGxhY2VzIGJvdGggYWNjZXNzaWJsZSBhbmQgaW5hY2Nlc3NpYmxlLiBUaGUgcmVzdWx0IHdhcywgdGhlcmVmb3JlLCB0aGF0IE1ldGVsbHVzLCBieSBiZWluZyBrZXB0IGZyb20gZmlnaHRpbmcsIHN1ZmZlcmVkIGFsbCB0aGUgaGFybSB3aGljaCB2aXNpdHMgbWVuIHdobyBhcmUgZGVmZWF0ZWQ7IHdoaWxlIFNlcnRvcml1cywgYnkgZmx5aW5nLCBoYWQgdGhlIGFkdmFudGFnZXMgb2YgbWVuIHdobyBwdXJzdWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3b3VsZCBjdXQgb2ZmIGhpcyBvcHBvbmVudCdzIHN1cHBseSBvZiB3YXRlciBhbmQgcHJldmVudCBoaXMgZm9yYWdpbmc7IGlmIHRoZSBSb21hbnMgYWR2YW5jZWQsIGhlIHdvdWxkIGdldCBvdXQgb2YgdGhlaXIgd2F5LCBhbmQgaWYgdGhleSBzZXR0bGVkIGRvd24gaW4gY2FtcCwgaGUgd291bGQgaGFyYXNzIHRoZW07IGlmIHRoZXkgYmVzaWVnZWQgYSBwbGFjZSwgaGUgd291bGQgY29tZSB1cCBhbmQgcHV0IHRoZW0gdW5kZXIgc2llZ2UgaW4gdGhlaXIgdHVybiBieSBkZXByaXZpbmcgdGhlbSBvZiBzdXBwbGllcy4gQXQgbGFzdCB0aGUgUm9tYW4gc29sZGllcnMgd2VyZSBpbiBkZXNwYWlyLCBhbmQgd2hlbiBTZXJ0b3JpdXMgY2hhbGxlbmdlZCBNZXRlbGx1cyB0byBzaW5nbGUgY29tYmF0LCB0aGV5IGNyaWVkIGFsb3VkIGFuZCBiYWRlIGhpbSBmaWdodCwgZ2VuZXJhbCB3aXRoIGdlbmVyYWwsIGFuZCBSb21hbiB3aXRoIFJvbWFuLCBhbmQgd2hlbiBoZSBkZWNsaW5lZCwgdGhleSBtb2NrZWQgYXQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNZXRlbGx1cyBsYXVnaGVkIGF0IGFsbCB0aGlzLCBhbmQgaGUgd2FzIHJpZ2h0OyBmb3IgYSBnZW5lcmFsLCBhcyBUaGVvcGhyYXN0dXMgc2F5cywgc2hvdWxkIGRpZSB0aGUgZGVhdGggb2YgYSBnZW5lcmFsLCBub3QgdGhhdCBvZiBhIGNvbW1vbiB0YXJnZXRlZXIuIFRoZW4sIHNlZWluZyB0aGF0IHRoZSBMYW5nb2JyaXRhZSB3ZXJlIGdpdmluZyBubyBzbGlnaHQgYXNzaXN0YW5jZSB0byBTZXJ0b3JpdXMsIGFuZCB0aGF0IHRoZWlyIGNpdHkgY291bGQgZWFzaWx5IGJlIHRha2VuIGZvciBsYWNrIG9mIHdhdGVyIChzaW5jZSB0aGV5IGhhZCBidXQgb25lIHdlbGwgaW4gdGhlIGNpdHksIGFuZCB0aGUgc3RyZWFtcyBpbiB0aGUgc3VidXJicyBhbmQgYWxvbmcgdGhlIHdhbGxzIHdvdWxkIGJlIGluIHRoZSBwb3dlciBvZiBhbnkgYmVzaWVnZXIpLCBNZXRlbGx1cyBjYW1lIGFnYWluc3QgdGhlIGNpdHksIGludGVuZGluZyB0byBjb21wbGV0ZSB0aGUgc2llZ2UgaW4gdHdvIGRheXMsIHNpbmNlIHRoZXJlIHdhcyBubyB3YXRlciB0aGVyZS4gT24gdGhpcyBhY2NvdW50LCB0b28sIGhlIGhhZCBnaXZlbiBvcmRlcnMgdG8gaGlzIHNvbGRpZXJzIHRvIHRha2UgYWxvbmcgcHJvdmlzaW9ucyBmb3Igb25seSBmaXZlIGRheXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTZXJ0b3JpdXMgcXVpY2tseSBjYW1lIHRvIHRoZSByZXNjdWUgYW5kIG9yZGVyZWQgdHdvIHRob3VzYW5kIHNraW5zIHRvIGJlIGZpbGxlZCB3aXRoIHdhdGVyLCBvZmZlcmluZyBmb3IgZWFjaCBza2luIGEgY29uc2lkZXJhYmxlIHN1bSBvZiBtb25leS4gTWFueSBJYmVyaWFucyBhbmQgbWFueSBNYXVydXNpYW5zIHZvbHVudGVlcmVkIGZvciB0aGUgd29yaywgYW5kIGFmdGVyIHNlbGVjdGluZyBtZW4gd2hvIHdlcmUgYm90aCBzdHVyZHkgYW5kIHN3aWZ0IG9mIGZvb3QsIGhlIHNlbnQgdGhlbSBieSBhIHJvdXRlIHRocm91Z2ggdGhlIG1vdW50YWlucywgd2l0aCBvcmRlcnMgdGhhdCB3aGVuIHRoZXkgaGFkIGRlbGl2ZXJlZCB0aGUgc2tpbnMgdG8gdGhlIHBlb3BsZSBpbiB0aGUgY2l0eSwgdGhleSBzaG91bGQgc2VjcmV0bHkgY29udmV5IGF3YXkgdGhlIHVuc2VydmljZWFibGUgbWFzcyBvZiB0aGUgcG9wdWxhdGlvbiwgaW4gb3JkZXIgdGhhdCB0aGUgd2F0ZXIgbWlnaHQgc3VmZmljZSBmb3IgdGhlIGFjdHVhbCBkZWZlbmRlcnMgb2YgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWV0ZWxsdXMgbGVhcm5lZCB0aGF0IHRoaXMgaGFkIGJlZW4gZG9uZSwgaGUgd2FzIGFubm95ZWQsIHNpbmNlIGhpcyBzb2xkaWVycyBoYWQgYWxyZWFkeSBjb25zdW1lZCB0aGVpciBwcm92aXNpb25zLCBhbmQgc2VudCBvdXQgQXF1aW51cywgYXQgdGhlIGhlYWQgb2Ygc2l4IHRob3VzYW5kIG1lbiwgdG8gZm9yYWdlLiBCdXQgU2VydG9yaXVzIGxlYXJuZWQgb2YgdGhpcyBhbmQgc2V0IGFuIGFtYnVzaCBvZiB0aHJlZSB0aG91c2FuZCBtZW4gaW4gdGhlIHJvYWQgYnkgd2hpY2ggQXF1aW51cyB3YXMgdG8gcmV0dXJuLiBUaGVzZSBzYWxsaWVkIGZvcnRoIGZyb20gYSBzaGFkeSByYXZpbmUgYW5kIGF0dGFja2VkIEFxdWludXMgaW4gdGhlIHJlYXIsIHdoaWxlIFNlcnRvcml1cyBoaW1zZWxmIGFzc2FpbGVkIGhpbSBpbiBmcm9udCwgcm91dGVkIGhpbSwgc2xldyBzb21lIG9mIGhpcyBtZW4sIGFuZCB0b29rIHNvbWUgb2YgdGhlbSBwcmlzb25lcnMuIEFxdWludXMsIGFmdGVyIGxvc2luZyBib3RoIGhpcyBhcm1vdXIgYW5kIGhpcyBob3JzZSwgZ290IGJhY2sgdG8gTWV0ZWxsdXMsIHdobyB0aGVuIHJldGlyZWQgZGlzZ3JhY2VmdWxseSwgbXVjaCBmbG91dGVkIGJ5IHRoZSBJYmVyaWFucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhlc2Ugc3VjY2Vzc2VzIFNlcnRvcml1cyB3YXMgYWRtaXJlZCBhbmQgbG92ZWQgYnkgdGhlIEJhcmJhcmlhbnMsIGFuZCBlc3BlY2lhbGx5IGJlY2F1c2UgYnkgaW50cm9kdWNpbmcgUm9tYW4gYXJtcyBhbmQgZm9ybWF0aW9ucyBhbmQgc2lnbmFscyBoZSBkaWQgYXdheSB3aXRoIHRoZWlyIGZyZW56aWVkIGFuZCBmdXJpb3VzIGRpc3BsYXlzIG9mIGNvdXJhZ2UsIGFuZCBjb252ZXJ0ZWQgdGhlaXIgZm9yY2VzIGludG8gYW4gYXJteSwgaW5zdGVhZCBvZiBhIGh1Z2UgYmFuZCBvZiByb2JiZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCBmdXJ0aGVyLCBoZSB1c2VkIGdvbGQgYW5kIHNpbHZlciB3aXRob3V0IHN0aW50IGZvciB0aGUgZGVjb3JhdGlvbiBvZiB0aGVpciBoZWxtZXRzIGFuZCB0aGUgb3JuYW1lbnRhdGlvbiBvZiB0aGVpciBzaGllbGRzLCBhbmQgYnkgdGVhY2hpbmcgdGhlbSB0byB3ZWFyIGZsb3dlcmVkIGNsb2FrcyBhbmQgdHVuaWNzLCBhbmQgZnVybmlzaGluZyB0aGVtIHdpdGggdGhlIG1lYW5zIHRvIGRvIHRoaXMsIGFuZCBzaGFyaW5nIHRoZWlyIGxvdmUgb2YgYmVhdXRpZnVsIGFycmF5LCBoZSB3b24gdGhlIGhlYXJ0cyBvZiBhbGwuIEJ1dCBtb3N0IG9mIGFsbCB3ZXJlIHRoZXkgY2FwdGl2YXRlZCBieSB3aGF0IGhlIGRpZCB3aXRoIHRoZWlyIGJveXMuIFRob3NlIG9mIHRoZSBoaWdoZXN0IGJpcnRoLCBuYW1lbHksIGhlIGNvbGxlY3RlZCB0b2dldGhlciBmcm9tIHRoZSB2YXJpb3VzIHBlb3BsZXMsIGF0IE9zY2EsIGEgbGFyZ2UgY2l0eSwgYW5kIHNldCBvdmVyIHRoZW0gdGVhY2hlcnMgb2YgR3JlZWsgYW5kIFJvbWFuIGxlYXJuaW5nOyB0aHVzIGluIHJlYWxpdHkgaGUgbWFkZSBob3N0YWdlcyBvZiB0aGVtLCB3aGlsZSBvc3RlbnNpYmx5IGhlIHdhcyBlZHVjYXRpbmcgdGhlbSwgd2l0aCB0aGUgYXNzdXJhbmNlIHRoYXQgd2hlbiB0aGV5IGJlY2FtZSBtZW4gaGUgd291bGQgZ2l2ZSB0aGVtIGEgc2hhcmUgaW4gYWRtaW5pc3RyYXRpb24gYW5kIGF1dGhvcml0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlIGZhdGhlcnMgd2VyZSB3b25kZXJmdWxseSBwbGVhc2VkIHRvIHNlZSB0aGVpciBzb25zLCBpbiBwdXJwbGUtYm9yZGVyZWQgdG9nYXMsIHZlcnkgZGVjb3JvdXNseSBnb2luZyB0byB0aGVpciBzY2hvb2xzLCBhbmQgU2VydG9yaXVzIHBheWluZyB0aGVpciBmZWVzIGZvciB0aGVtLCBob2xkaW5nIGZyZXF1ZW50IGV4YW1pbmF0aW9ucywgZGlzdHJpYnV0aW5nIHByaXplcyB0byB0aGUgZGVzZXJ2aW5nLCBhbmQgcHJlc2VudGluZyB0aGVtIHdpdGggdGhlIGdvbGRlbiBuZWNrbGFjZXMgd2hpY2ggdGhlIFJvbWFucyBjYWxsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5idWxsYWU8L2ZvcmVpZ24+LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgdGhlIGN1c3RvbSBhbW9uZyB0aGUgSWJlcmlhbnMgZm9yIHRob3NlIHdobyB3ZXJlIHN0YXRpb25lZCBhYm91dCB0aGVpciBsZWFkZXIgdG8gZGllIHdpdGggaGltIGlmIGhlIGZlbGwsIGFuZCB0aGUgQmFyYmFyaWFucyBpbiB0aG9zZSBwYXJ0cyBjYWxsIHRoaXMgYSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbnNlY3JhdGlvbi48L3E+IE5vdywgdGhlIG90aGVyIGNvbW1hbmRlcnMgaGFkIGZldyBzdWNoIHNoaWVsZC1iZWFyZXJzIGFuZCBjb21wYW5pb25zLCBidXQgU2VydG9yaXVzIHdhcyBhdHRlbmRlZCBieSBtYW55IHRob3VzYW5kcyBvZiBtZW4gd2hvIGhhZCB0aHVzIGNvbnNlY3JhdGVkIHRoZW1zZWx2ZXMgdG8gZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGlzIGFybXkgaGFkIGJlZW4gZGVmZWF0ZWQgYXQgYSBjZXJ0YWluIGNpdHkgYW5kIHRoZSBlbmVteSB3ZXJlIHByZXNzaW5nIHVwb24gdGhlbSwgdGhlIEliZXJpYW5zLCBjYXJlbGVzcyBvZiB0aGVtc2VsdmVzLCByZXNjdWVkIFNlcnRvcml1cywgYW5kIHRha2luZyBoaW0gb24gdGhlaXIgc2hvdWxkZXJzIG9uZSBhZnRlciBhbm90aGVyLCBjYXJyaWVkIGhpbSB0byB0aGUgd2FsbHMsIGFuZCBvbmx5IHdoZW4gdGhlaXIgbGVhZGVyIHdhcyBpbiBzYWZldHksIGRpZCB0aGV5IGJldGFrZSB0aGVtc2VsdmVzIHRvIGZsaWdodCwgZWFjaCBtYW4gZm9yIGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhlc2Ugc3VjY2Vzc2VzIFNlcnRvcml1cyB3YXMgYWRtaXJlZCBhbmQgbG92ZWQgYnkgdGhlIEJhcmJhcmlhbnMsIGFuZCBlc3BlY2lhbGx5IGJlY2F1c2UgYnkgaW50cm9kdWNpbmcgUm9tYW4gYXJtcyBhbmQgZm9ybWF0aW9ucyBhbmQgc2lnbmFscyBoZSBkaWQgYXdheSB3aXRoIHRoZWlyIGZyZW56aWVkIGFuZCBmdXJpb3VzIGRpc3BsYXlzIG9mIGNvdXJhZ2UsIGFuZCBjb252ZXJ0ZWQgdGhlaXIgZm9yY2VzIGludG8gYW4gYXJteSwgaW5zdGVhZCBvZiBhIGh1Z2UgYmFuZCBvZiByb2JiZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIGhlIHVzZWQgZ29sZCBhbmQgc2lsdmVyIHdpdGhvdXQgc3RpbnQgZm9yIHRoZSBkZWNvcmF0aW9uIG9mIHRoZWlyIGhlbG1ldHMgYW5kIHRoZSBvcm5hbWVudGF0aW9uIG9mIHRoZWlyIHNoaWVsZHMsIGFuZCBieSB0ZWFjaGluZyB0aGVtIHRvIHdlYXIgZmxvd2VyZWQgY2xvYWtzIGFuZCB0dW5pY3MsIGFuZCBmdXJuaXNoaW5nIHRoZW0gd2l0aCB0aGUgbWVhbnMgdG8gZG8gdGhpcywgYW5kIHNoYXJpbmcgdGhlaXIgbG92ZSBvZiBiZWF1dGlmdWwgYXJyYXksIGhlIHdvbiB0aGUgaGVhcnRzIG9mIGFsbC4gQnV0IG1vc3Qgb2YgYWxsIHdlcmUgdGhleSBjYXB0aXZhdGVkIGJ5IHdoYXQgaGUgZGlkIHdpdGggdGhlaXIgYm95cy4gVGhvc2Ugb2YgdGhlIGhpZ2hlc3QgYmlydGgsIG5hbWVseSwgaGUgY29sbGVjdGVkIHRvZ2V0aGVyIGZyb20gdGhlIHZhcmlvdXMgcGVvcGxlcywgYXQgT3NjYSwgYSBsYXJnZSBjaXR5LCBhbmQgc2V0IG92ZXIgdGhlbSB0ZWFjaGVycyBvZiBHcmVlayBhbmQgUm9tYW4gbGVhcm5pbmc7IHRodXMgaW4gcmVhbGl0eSBoZSBtYWRlIGhvc3RhZ2VzIG9mIHRoZW0sIHdoaWxlIG9zdGVuc2libHkgaGUgd2FzIGVkdWNhdGluZyB0aGVtLCB3aXRoIHRoZSBhc3N1cmFuY2UgdGhhdCB3aGVuIHRoZXkgYmVjYW1lIG1lbiBoZSB3b3VsZCBnaXZlIHRoZW0gYSBzaGFyZSBpbiBhZG1pbmlzdHJhdGlvbiBhbmQgYXV0aG9yaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSBmYXRoZXJzIHdlcmUgd29uZGVyZnVsbHkgcGxlYXNlZCB0byBzZWUgdGhlaXIgc29ucywgaW4gcHVycGxlLWJvcmRlcmVkIHRvZ2FzLCB2ZXJ5IGRlY29yb3VzbHkgZ29pbmcgdG8gdGhlaXIgc2Nob29scywgYW5kIFNlcnRvcml1cyBwYXlpbmcgdGhlaXIgZmVlcyBmb3IgdGhlbSwgaG9sZGluZyBmcmVxdWVudCBleGFtaW5hdGlvbnMsIGRpc3RyaWJ1dGluZyBwcml6ZXMgdG8gdGhlIGRlc2VydmluZywgYW5kIHByZXNlbnRpbmcgdGhlbSB3aXRoIHRoZSBnb2xkZW4gbmVja2xhY2VzIHdoaWNoIHRoZSBSb21hbnMgY2FsbCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmJ1bGxhZTwvZm9yZWlnbj4uPC9xPiAKCQkJCSAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+YnVsbGFlPC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGUgY3VzdG9tIGFtb25nIHRoZSBJYmVyaWFucyBmb3IgdGhvc2Ugd2hvIHdlcmUgc3RhdGlvbmVkIGFib3V0IHRoZWlyIGxlYWRlciB0byBkaWUgd2l0aCBoaW0gaWYgaGUgZmVsbCwgYW5kIHRoZSBCYXJiYXJpYW5zIGluIHRob3NlIHBhcnRzIGNhbGwgdGhpcyBhIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jb25zZWNyYXRpb24uPC9xPiBOb3csIHRoZSBvdGhlciBjb21tYW5kZXJzIGhhZCBmZXcgc3VjaCBzaGllbGQtYmVhcmVycyBhbmQgY29tcGFuaW9ucywgYnV0IFNlcnRvcml1cyB3YXMgYXR0ZW5kZWQgYnkgbWFueSB0aG91c2FuZHMgb2YgbWVuIHdobyBoYWQgdGh1cyBjb25zZWNyYXRlZCB0aGVtc2VsdmVzIHRvIGRlYXRoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGlzIGFybXkgaGFkIGJlZW4gZGVmZWF0ZWQgYXQgYSBjZXJ0YWluIGNpdHkgYW5kIHRoZSBlbmVteSB3ZXJlIHByZXNzaW5nIHVwb24gdGhlbSwgdGhlIEliZXJpYW5zLCBjYXJlbGVzcyBvZiB0aGVtc2VsdmVzLCByZXNjdWVkIFNlcnRvcml1cywgYW5kIHRha2luZyBoaW0gb24gdGhlaXIgc2hvdWxkZXJzIG9uZSBhZnRlciBhbm90aGVyLCBjYXJyaWVkIGhpbSB0byB0aGUgd2FsbHMsIGFuZCBvbmx5IHdoZW4gdGhlaXIgbGVhZGVyIHdhcyBpbiBzYWZldHksIGRpZCB0aGV5IGJldGFrZSB0aGVtc2VsdmVzIHRvIGZsaWdodCwgZWFjaCBtYW4gZm9yIGhpbXNlbGYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3Qgb25seSB3ZXJlIHRoZSBJYmVyaWFucyBlYWdlciB0byBzZXJ2ZSB1bmRlciBoaW0sIGJ1dCBhbHNvIHRoZSBzb2xkaWVycyB3aG8gY2FtZSBmcm9tIEl0YWx5LiBBdCBhbnkgcmF0ZSwgd2hlbiBQZXJwZW5uYSBWZW50bywgd2hvIGJlbG9uZ2VkIHRvIHRoZSBzYW1lIHBhcnR5IGFzIFNlcnRvcml1cywgY2FtZSB0byBTcGFpbiB3aXRoIG11Y2ggbW9uZXkgYW5kIGEgbGFyZ2UgZm9yY2UsIGFuZCB3YXMgZGV0ZXJtaW5lZCB0byB3YWdlIHdhciBvbiBoaXMgb3duIGFjY291bnQgYWdhaW5zdCBNZXRlbGx1cywgaGlzIHNvbGRpZXJzIHdlcmUgZGlzcGxlYXNlZCwgYW5kIHRoZXJlIHdhcyBtdWNoIHRhbGsgaW4gdGhlIGNhbXAgYWJvdXQgU2VydG9yaXVzLCB0byB0aGUgYW5ub3lhbmNlIG9mIFBlcnBlbm5hLCB3aG8gd2FzIHB1ZmZlZCB1cCBvdmVyIGhpcyBoaWdoIGJpcnRoIGFuZCBoaXMgd2VhbHRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGVuIHdvcmQgY2FtZSB0aGF0IFBvbXBleSB3YXMgY3Jvc3NpbmcgdGhlIFB5cmVuZWVzLCB0aGUgc29sZGllcnMgY2F1Z2h0IHVwIHRoZWlyIGFybXMgYW5kIHNuYXRjaGVkIHVwIHRoZWlyIHN0YW5kYXJkcyBhbmQgbWFkZSBhbiBvdXRjcnkgYWdhaW5zdCBQZXJwZW5uYSwgb3JkZXJpbmcgaGltIHRvIGxlYWQgdGhlbSB0byBTZXJ0b3JpdXMsIGFuZCB0aHJlYXRlbmluZywgaWYgaGUgZGlkIG5vdCwgdG8gYWJhbmRvbiBoaW0gYW5kIGdvIGJ5IHRoZW1zZWx2ZXMgdG8gYSBtYW4gd2hvIHdhcyBhYmxlIHRvIHNhdmUgaGltc2VsZiBhbmQgc2F2ZSB0aG9zZSB1bmRlciBoaW0uIFNvIFBlcnBlbm5hIHlpZWxkZWQgYW5kIGxlZCB0aGVtIG9mZiBhbmQgam9pbmVkIFNlcnRvcml1cyB3aXRoIGZpZnR5LXRocmVlIGNvaG9ydHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdCBvbmx5IHdlcmUgdGhlIEliZXJpYW5zIGVhZ2VyIHRvIHNlcnZlIHVuZGVyIGhpbSwgYnV0IGFsc28gdGhlIHNvbGRpZXJzIHdobyBjYW1lIGZyb20gSXRhbHkuIEF0IGFueSByYXRlLCB3aGVuIFBlcnBlbm5hIFZlbnRvLCB3aG8gYmVsb25nZWQgdG8gdGhlIHNhbWUgcGFydHkgYXMgU2VydG9yaXVzLCBjYW1lIHRvIFNwYWluIHdpdGggbXVjaCBtb25leSBhbmQgYSBsYXJnZSBmb3JjZSwgYW5kIHdhcyBkZXRlcm1pbmVkIHRvIHdhZ2Ugd2FyIG9uIGhpcyBvd24gYWNjb3VudCBhZ2FpbnN0IE1ldGVsbHVzLCBoaXMgc29sZGllcnMgd2VyZSBkaXNwbGVhc2VkLCBhbmQgdGhlcmUgd2FzIG11Y2ggdGFsayBpbiB0aGUgY2FtcCBhYm91dCBTZXJ0b3JpdXMsIHRvIHRoZSBhbm5veWFuY2Ugb2YgUGVycGVubmEsIHdobyB3YXMgcHVmZmVkIHVwIG92ZXIgaGlzIGhpZ2ggYmlydGggYW5kIGhpcyB3ZWFsdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gd29yZCBjYW1lIHRoYXQgUG9tcGV5IHdhcyBjcm9zc2luZyB0aGUgUHlyZW5lZXMsIHRoZSBzb2xkaWVycyBjYXVnaHQgdXAgdGhlaXIgYXJtcyBhbmQgc25hdGNoZWQgdXAgdGhlaXIgc3RhbmRhcmRzIGFuZCBtYWRlIGFuIG91dGNyeSBhZ2FpbnN0IFBlcnBlbm5hLCBvcmRlcmluZyBoaW0gdG8gbGVhZCB0aGVtIHRvIFNlcnRvcml1cywgYW5kIHRocmVhdGVuaW5nLCBpZiBoZSBkaWQgbm90LCB0byBhYmFuZG9uIGhpbSBhbmQgZ28gYnkgdGhlbXNlbHZlcyB0byBhIG1hbiB3aG8gd2FzIGFibGUgdG8gc2F2ZSBoaW1zZWxmIGFuZCBzYXZlIHRob3NlIHVuZGVyIGhpbS4gU28gUGVycGVubmEgeWllbGRlZCBhbmQgbGVkIHRoZW0gb2ZmIGFuZCBqb2luZWQgU2VydG9yaXVzIHdpdGggZmlmdHktdGhyZWUgY29ob3J0cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2VydG9yaXVzLCB0aGVuLCBzaW5jZSBhbGwgdGhlIHBlb3BsZXMgd2l0aGluIHRoZSByaXZlciBFYnJvIHdlcmUgdW5pdGVkbHkgdGFraW5nIHVwIGhpcyBjYXVzZSwgaGFkIGFuIGFybXkgb2YgZ3JlYXQgbnVtYmVycywgZm9yIG1lbiB3ZXJlIGFsbCB0aGUgd2hpbGUgY29taW5nIHRvIGhpbSBpbiBzdHJlYW1zIGZyb20gZXZlcnkgcXVhcnRlcjsgYnV0IGhlIHdhcyB0cm91YmxlZCBieSB0aGVpciBiYXJiYXJpYyBsYWNrIG9mIGRpc2NpcGxpbmUgYW5kIHRoZWlyIG92ZXJjb25maWRlbmNlLCBzaW5jZSB0aGV5IGNhbGxlZCBsb3VkbHkgdXBvbiBoaW0gdG8gYXR0YWNrIHRoZSBlbmVteSBhbmQgd2VyZSBpbXBhdGllbnQgYXQgaGlzIGRlbGF5LCBhbmQgaGUgdGhlcmVmb3JlIHRyaWVkIHRvIHBhY2lmeSB0aGVtIGJ5IGFyZ3VtZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhleSB3ZXJlIGltcGF0aWVudCBhbmQgaW5jbGluZWQgdG8gZm9yY2UgdGhlaXIgd2lzaGVzIHVwb24gaGltIHVuc2Vhc29uYWJseSwgaGUgbGV0IHRoZW0gdGFrZSB0aGVpciB3YXkgYW5kIHBlcm1pdHRlZCB0aGVtIHRvIGhhdmUgYW4gZW5nYWdlbWVudCB3aXRoIHRoZSBlbmVteSBpbiB3aGljaCBoZSBob3BlZCB0aGF0IHRoZXkgd291bGQgbm90IGJlIGFsdG9nZXRoZXIgY3J1c2hlZCwgYnV0IHdvdWxkIGJlIHNldmVyZWx5IGhhbmRsZWQsIGFuZCBzbyBtYWRlIG1vcmUgb2JlZGllbnQgZm9yIHRoZSBmdXR1cmUuIE1hdHRlcnMgdHVybmluZyBvdXQgYXMgaGUgZXhwZWN0ZWQsIGhlIGNhbWUgdG8gdGhlaXIgYWlkLCBnYXZlIHRoZW0gcmVmdWdlIGluIHRoZWlyIGZsaWdodCwgYW5kIGJyb3VnaHQgdGhlbSBzYWZlbHkgYmFjayB0byB0aGVpciBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGhlIHdpc2hlZCB0byB0YWtlIGF3YXkgdGhlaXIgZGVqZWN0aW9uLiBTbyBhZnRlciBhIGZldyBkYXlzIGhlIGNhbGxlZCBhIGdlbmVyYWwgYXNzZW1ibHkgYW5kIGludHJvZHVjZWQgYmVmb3JlIGl0IHR3byBob3JzZXMsIG9uZSB1dHRlcmx5IHdlYWsgYW5kIGFscmVhZHkgcXVpdGUgb2xkLCB0aGUgb3RoZXIgbGFyZ2Utc2l6ZWQgYW5kIHN0cm9uZywgd2l0aGluIGEgdGFpbCB0aGF0IHdhcyBhc3RvbmlzaGluZyBmb3IgdGhlIHRoaWNrbmVzcyBhbmQgYmVhdXR5IG9mIGl0cyBoYWlyLiBCeSB0aGUgc2lkZSBvZiB0aGUgZmVlYmxlIGhvcnNlIHN0b29kIGEgbWFuIHdobyB3YXMgdGFsbCBhbmQgcm9idXN0LCBhbmQgYnkgdGhlIHNpZGUgb2YgdGluZSBwb3dlcmZ1bCBob3JzZSBhbm90aGVyIG1hbiwgc21hbGwgYW5kIG9mIGEgY29udGVtcHRpYmxlIGFwcGVhcmFuY2UuIEF0IGEgc2lnbmFsIGdpdmVuIHRoZW0sIHRoZSBzdHJvbmcgbWFuIHNlaXplZCB0aGUgdGFpbCBvZiBoaXMgaG9yc2Ugd2l0aCBib3RoIGhhbmRzIGFuZCB0cmllZCB0byBwdWxsIGl0IHRvd2FyZHMgaGltIHdpdGggYWxsIGhpcyBtaWdodCwgYXMgdGhvdWdoIGhlIHdvdWxkIHRlYXIgaXQgb2ZmOyBidXQgdGhlIHdlYWsgbWFuIGJlZ2FuIHRvIHBsdWNrIG91dCB0aGUgaGFpcnMgaW4gdGhlIHRhaWwgb2YgdGhlIHN0cm9uZyBob3JzZSBvbmUgYnkgb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3Ryb25nIG1hbiBnYXZlIGhpbXNlbGYgbm8gZW5kIG9mIHRyb3VibGUgdG8gbm8gcHVycG9zZSwgbWFkZSB0aGUgc3BlY3RhdG9ycyBsYXVnaCBhIGdvb2QgZGVhbCwgYW5kIHRoZW4gZ2F2ZSB1cCBoaXMgYXR0ZW1wdDsgYnV0IHRoZSB3ZWFrIG1hbiwgaW4gYSB0cmljZSBhbmQgd2l0aCBubyB0cm91YmxlLCBzdHJpcHBlZCBoaXMgaG9yc2UncyB0YWlsIG9mIGl0cyBoYWlyLiBUaGVuIFNlcnRvcml1cyByb3NlIHVwIGFuZCBzYWlkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWUgc2VlLCBtZW4gb2YgbXkgYWxsaWVzLCB0aGF0IHBlcnNldmVyYW5jZSBpcyBtb3JlIGVmZmljYWNpb3VzIHRoYW4gdmlvbGVuY2UsIGFuZCB0aGF0IG1hbnkgdGhpbmdzIHdoaWNoIGNhbm5vdCBiZSBtYXN0ZXJlZCB3aGVuIHRoZXkgc3RhbmQgdG9nZXRoZXIgeWllbGQgd2hlbiBvbmUgbWFzdGVycyB0aGVtIGxpdHRsZSBieSBsaXR0bGUuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXJyZXNpc3RpYmxlIGlzIHRoZSBmb3JjZSBvZiBjb250aW51aXR5LCBieSB2aXJ0dWUgb2Ygd2hpY2ggYWR2YW5jaW5nIFRpbWUgc3ViZHVlcyBhbmQgY2FwdHVyZXMgZXZlcnkgcG93ZXI7IGFuZCBUaW1lIGlzIGEga2luZGx5IGFsbHkgZm9yIGFsbCB3aG8gYWN0IGFzIGRpbGlnZW50IGF0dGVuZGFudHMgdXBvbiBvcHBvcnR1bml0eSwgYnV0IGEgbW9zdCBiaXR0ZXIgZW5lbXkgZm9yIGFsbCB3aG8gdXJnZSBtYXR0ZXJzIG9uIHVuc2Vhc29uYWJseS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzdG9yeSBpcyB0b2xkIGFsc28gaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlYuIE1heC4gNy4zLjYiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+VmFsZXJpdXMgTWF4aW11czwvdGl0bGU+LCB2aWkuIDMsIDY8L2JpYmw+Ljwvbm90ZT4gQnkgY29udHJpdmluZyBmcm9tIHRpbWUgdG8gdGltZSBzdWNoIGV4aG9ydGF0aW9ucyBmb3IgdGhlIEJhcmJhcmlhbnMsIFNlcnRvcml1cyB0YXVnaHQgdGhlbSB0byB3YXRjaCBmb3IgdGhlaXIgb3Bwb3J0dW5pdGllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2VydG9yaXVzLCB0aGVuLCBzaW5jZSBhbGwgdGhlIHBlb3BsZXMgd2l0aGluIHRoZSByaXZlciBFYnJvIHdlcmUgdW5pdGVkbHkgdGFraW5nIHVwIGhpcyBjYXVzZSwgaGFkIGFuIGFybXkgb2YgZ3JlYXQgbnVtYmVycywgZm9yIG1lbiB3ZXJlIGFsbCB0aGUgd2hpbGUgY29taW5nIHRvIGhpbSBpbiBzdHJlYW1zIGZyb20gZXZlcnkgcXVhcnRlcjsgYnV0IGhlIHdhcyB0cm91YmxlZCBieSB0aGVpciBiYXJiYXJpYyBsYWNrIG9mIGRpc2NpcGxpbmUgYW5kIHRoZWlyIG92ZXJjb25maWRlbmNlLCBzaW5jZSB0aGV5IGNhbGxlZCBsb3VkbHkgdXBvbiBoaW0gdG8gYXR0YWNrIHRoZSBlbmVteSBhbmQgd2VyZSBpbXBhdGllbnQgYXQgaGlzIGRlbGF5LCBhbmQgaGUgdGhlcmVmb3JlIHRyaWVkIHRvIHBhY2lmeSB0aGVtIGJ5IGFyZ3VtZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZXkgd2VyZSBpbXBhdGllbnQgYW5kIGluY2xpbmVkIHRvIGZvcmNlIHRoZWlyIHdpc2hlcyB1cG9uIGhpbSB1bnNlYXNvbmFibHksIGhlIGxldCB0aGVtIHRha2UgdGhlaXIgd2F5IGFuZCBwZXJtaXR0ZWQgdGhlbSB0byBoYXZlIGFuIGVuZ2FnZW1lbnQgd2l0aCB0aGUgZW5lbXkgaW4gd2hpY2ggaGUgaG9wZWQgdGhhdCB0aGV5IHdvdWxkIG5vdCBiZSBhbHRvZ2V0aGVyIGNydXNoZWQsIGJ1dCB3b3VsZCBiZSBzZXZlcmVseSBoYW5kbGVkLCBhbmQgc28gbWFkZSBtb3JlIG9iZWRpZW50IGZvciB0aGUgZnV0dXJlLiBNYXR0ZXJzIHR1cm5pbmcgb3V0IGFzIGhlIGV4cGVjdGVkLCBoZSBjYW1lIHRvIHRoZWlyIGFpZCwgZ2F2ZSB0aGVtIHJlZnVnZSBpbiB0aGVpciBmbGlnaHQsIGFuZCBicm91Z2h0IHRoZW0gc2FmZWx5IGJhY2sgdG8gdGhlaXIgY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgaGUgd2lzaGVkIHRvIHRha2UgYXdheSB0aGVpciBkZWplY3Rpb24uIFNvIGFmdGVyIGEgZmV3IGRheXMgaGUgY2FsbGVkIGEgZ2VuZXJhbCBhc3NlbWJseSBhbmQgaW50cm9kdWNlZCBiZWZvcmUgaXQgdHdvIGhvcnNlcywgb25lIHV0dGVybHkgd2VhayBhbmQgYWxyZWFkeSBxdWl0ZSBvbGQsIHRoZSBvdGhlciBsYXJnZS1zaXplZCBhbmQgc3Ryb25nLCB3aXRoaW4gYSB0YWlsIHRoYXQgd2FzIGFzdG9uaXNoaW5nIGZvciB0aGUgdGhpY2tuZXNzIGFuZCBiZWF1dHkgb2YgaXRzIGhhaXIuIEJ5IHRoZSBzaWRlIG9mIHRoZSBmZWVibGUgaG9yc2Ugc3Rvb2QgYSBtYW4gd2hvIHdhcyB0YWxsIGFuZCByb2J1c3QsIGFuZCBieSB0aGUgc2lkZSBvZiB0aW5lIHBvd2VyZnVsIGhvcnNlIGFub3RoZXIgbWFuLCBzbWFsbCBhbmQgb2YgYSBjb250ZW1wdGlibGUgYXBwZWFyYW5jZS4gQXQgYSBzaWduYWwgZ2l2ZW4gdGhlbSwgdGhlIHN0cm9uZyBtYW4gc2VpemVkIHRoZSB0YWlsIG9mIGhpcyBob3JzZSB3aXRoIGJvdGggaGFuZHMgYW5kIHRyaWVkIHRvIHB1bGwgaXQgdG93YXJkcyBoaW0gd2l0aCBhbGwgaGlzIG1pZ2h0LCBhcyB0aG91Z2ggaGUgd291bGQgdGVhciBpdCBvZmY7IGJ1dCB0aGUgd2VhayBtYW4gYmVnYW4gdG8gcGx1Y2sgb3V0IHRoZSBoYWlycyBpbiB0aGUgdGFpbCBvZiB0aGUgc3Ryb25nIGhvcnNlIG9uZSBieSBvbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzdHJvbmcgbWFuIGdhdmUgaGltc2VsZiBubyBlbmQgb2YgdHJvdWJsZSB0byBubyBwdXJwb3NlLCBtYWRlIHRoZSBzcGVjdGF0b3JzIGxhdWdoIGEgZ29vZCBkZWFsLCBhbmQgdGhlbiBnYXZlIHVwIGhpcyBhdHRlbXB0OyBidXQgdGhlIHdlYWsgbWFuLCBpbiBhIHRyaWNlIGFuZCB3aXRoIG5vIHRyb3VibGUsIHN0cmlwcGVkIGhpcyBob3JzZSdzIHRhaWwgb2YgaXRzIGhhaXIuIFRoZW4gU2VydG9yaXVzIHJvc2UgdXAgYW5kIHNhaWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllIHNlZSwgbWVuIG9mIG15IGFsbGllcywgdGhhdCBwZXJzZXZlcmFuY2UgaXMgbW9yZSBlZmZpY2FjaW91cyB0aGFuIHZpb2xlbmNlLCBhbmQgdGhhdCBtYW55IHRoaW5ncyB3aGljaCBjYW5ub3QgYmUgbWFzdGVyZWQgd2hlbiB0aGV5IHN0YW5kIHRvZ2V0aGVyIHlpZWxkIHdoZW4gb25lIG1hc3RlcnMgdGhlbSBsaXR0bGUgYnkgbGl0dGxlLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXJyZXNpc3RpYmxlIGlzIHRoZSBmb3JjZSBvZiBjb250aW51aXR5LCBieSB2aXJ0dWUgb2Ygd2hpY2ggYWR2YW5jaW5nIFRpbWUgc3ViZHVlcyBhbmQgY2FwdHVyZXMgZXZlcnkgcG93ZXI7IGFuZCBUaW1lIGlzIGEga2luZGx5IGFsbHkgZm9yIGFsbCB3aG8gYWN0IGFzIGRpbGlnZW50IGF0dGVuZGFudHMgdXBvbiBvcHBvcnR1bml0eSwgYnV0IGEgbW9zdCBiaXR0ZXIgZW5lbXkgZm9yIGFsbCB3aG8gdXJnZSBtYXR0ZXJzIG9uIHVuc2Vhc29uYWJseS48L3E+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpcnJlc2lzdGlibGUgaXMgdGhlIGZvcmNlIG9mIGNvbnRpbnVpdHksIGJ5IHZpcnR1ZSBvZiB3aGljaCBhZHZhbmNpbmcgVGltZSBzdWJkdWVzIGFuZCBjYXB0dXJlcyBldmVyeSBwb3dlcjsgYW5kIFRpbWUgaXMgYSBraW5kbHkgYWxseSBmb3IgYWxsIHdobyBhY3QgYXMgZGlsaWdlbnQgYXR0ZW5kYW50cyB1cG9uIG9wcG9ydHVuaXR5LCBidXQgYSBtb3N0IGJpdHRlciBlbmVteSBmb3IgYWxsIHdobyB1cmdlIG1hdHRlcnMgb24gdW5zZWFzb25hYmx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHN0b3J5IGlzIHRvbGQgYWxzbyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJWLiBNYXguIDcuMy42Ij4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VmFsZXJpdXMgTWF4aW11czwvdGl0bGU+LCB2aWkuIDMsIDY8L2JpYmw+Ljwvbm90ZT4gQnkgY29udHJpdmluZyBmcm9tIHRpbWUgdG8gdGltZSBzdWNoIGV4aG9ydGF0aW9ucyBmb3IgdGhlIEJhcmJhcmlhbnMsIFNlcnRvcml1cyB0YXVnaHQgdGhlbSB0byB3YXRjaCBmb3IgdGhlaXIgb3Bwb3J0dW5pdGllcy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVi4gTWF4LiA3LjMuNiI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlZhbGVyaXVzIE1heGltdXM8L3RpdGxlPiwgdmlpLiAzLCA2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5WYWxlcml1cyBNYXhpbXVzPC90aXRsZT4sIHZpaS4gMywgNjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvZiBhbGwgaGlzIG1pbGl0YXJ5IGV4cGxvaXRzIHRoYXQgd2hpY2ggaGUgcGVyZm9ybWVkIGluIGRlYWxpbmcgd2l0aCB0aGUgcGVvcGxlIGNhbGxlZCBDaGFyYWNpdGFuaSBpcyBhZG1pcmVkIGFzIG11Y2ggYXMgYW55LiBUaGV5IGFyZSBhIHBlb3BsZSBiZXlvbmQgdGhlIHJpdmVyIFRhZ29uaXVzLCBhbmQgdGhleSBkbyBub3QgZHdlbGwgaW4gY2l0aWVzIG9yIHZpbGxhZ2VzLCBidXQgb24gYSBsYXJnZSBhbmQgbG9mdHkgaGlsbCBjb250YWluaW5nIGNhdmVzIGFuZCBob2xsb3dzIGluIHRoZSBjbGlmZnMgd2hpY2ggbG9vayB0b3dhcmRzIHRoZSBub3J0aC4gVGhlIHdob2xlIGNvdW50cnkgYXQgdGhlIGJhc2Ugb2YgdGhlIGhpbGwgYWJvdW5kcyBpbiB3aGl0ZSBjbGF5IGFuZCBhIHNvaWwgdGhhdCBpcyBwb3JvdXMgYW5kIGNydW1ibHk7IGl0IGlzIG5vdCBmaXJtIGVub3VnaCB0byBiZWFyIHRoZSB0cmVhZCBvZiBtYW4sIGFuZCBzcHJlYWRzIGZhciBhYm91dCBpZiBvbmx5IHNsaWdodGx5IHN0aXJyZWQsIGxpa2UgdW5zbGFrZWQgbGltZSBvciBhc2hlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgQmFyYmFyaWFucywgdGhlbiwgd2hlbmV2ZXIgdGhleSB3ZXJlIGFmcmFpZCBvZiB3YXIsIHdvdWxkIGhpZGUgdGhlbXNlbHZlcyBpbiB0aGVpciBjYXZlcywgdGFrZSBhbGwgdGhlaXIgcGx1bmRlciBpbiB3aXRoIHRoZW0sIGFuZCBrZWVwIHF1aWV0LCBmb3IgdGhleSBjb3VsZCBub3QgYmUgdGFrZW4gYnkgZm9yY2U7IGFuZCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCB3aGVuIFNlcnRvcml1cyBoYWQgcmV0aXJlZCBiZWZvcmUgTWV0ZWxsdXMgYW5kIGVuY2FtcGVkIGF0IHRoZSBiYXNlIG9mIHRoZWlyIGhpbGwsIHRoZXkgdGhvdWdodCBzY29ybmZ1bGx5IG9mIGhpbSBhcyBhIHZhbnF1aXNoZWQgbWFuLCBhbmQgaGUsIGVpdGhlciBvdXQgb2YgYW5nZXIsIG9yIGJlY2F1c2UgaGUgZGlkIG5vdCB3aXNoIHRvIGJlIHRob3VnaHQgYSBmdWdpdGl2ZSwgYXQgYnJlYWsgb2YgZGF5IHJvZGUgdXAgdG8gdGhlIHBsYWNlIGFuZCBpbnNwZWN0ZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBubyBhdHRhY2tpbmcgaXQgYW55d2hlcmUsIGJ1dCBhcyBoZSB3YXMgd2FuZGVyaW5nIGFib3V0IHRvIG5vIHB1cnBvc2UgYW5kIGluZHVsZ2luZyBpbiBlbXB0eSB0aHJlYXRzLCBoZSBzYXcgdGhhdCBkdXN0IGZyb20gdGhlIHNvaWwgd2hpY2ggSSBoYXZlIGRlc2NyaWJlZCB3YXMgYmVpbmcgY2FycmllZCB1cCBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zIGluIGdyZWF0IHF1YW50aXRpZXMgYnkgdGhlIHdpbmQuIEZvciB0aGUgY2F2ZXMsIGFzIEkgaGF2ZSBzYWlkLCBmYWNlZCB0aGUgbm9ydGgsIGFuZCB0aGUgd2luZCB3aGljaCBibG93cyBmcm9tIHRoYXQgcXVhcnRlciAoc29tZSBjYWxsIGl0IENhZWNpYXMpIGlzIHRoZSBtb3N0IHByZXZhbGVudCBhbmQgdGhlIHN0cm9uZ2VzdCBvZiB0aGUgd2luZCBpbiB0aGF0IGNvdW50cnksIGJlaW5nIGEgY29uZmx1ZW50IG9mIHdpbmRzIGZyb20gd2F0ZXJ5IHBsYWlucyBhbmQgc25vdy1jb3ZlcmVkIG1vdW50YWluczsgYW5kIGF0IHRoaXMgdGltZSBwYXJ0aWN1bGFybHksIHdoaWNoIHdhcyB0aGUgaGVpZ2h0IG9mIHN1bW1lciwgaXQgd2FzIHN0cm9uZywgd2FzIGZlZCBieSB0aGUgbWVsdGluZyBzbm93cyBvZiBub3J0aGVybiByZWdpb25zLCBhbmQgYmxldyBtb3N0IGRlbGlnaHRmdWxseSB3aXRoIGNvbnRpbnVhbCByZWZyZXNobWVudCBmb3IgbWFuIGFuZCBiZWFzdCBhbGwgZGF5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbywgcmVmbGVjdGluZyBvbiB0aGVzZSB0aGluZ3MgYW5kIGdldHRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlbSBmcm9tIHRoZSBuYXRpdmVzIG9mIHRoZSBjb3VudHJ5LCBTZXJ0b3JpdXMgb3JkZXJlZCBoaXMgc29sZGllcnMgdG8gdGFrZSBzb21lIG9mIHRoZSBsb29zZSBhbmQgYXNoeSBzb2lsIHRoYXQgSSBoYXZlIGRlc2NyaWJlZCwgY2FycnkgaXQgZGlyZWN0bHkgb3Bwb3NpdGUgdGhlIGhpbGwsIGFuZCBtYWtlIGEgaGVhcCBvZiBpdCB0aGVyZS4gVGhpcyB0aGUgQmFyYmFyaWFucyBjb25qZWN0dXJlZCB0byBiZSBhIG1vdW5kIHJhaXNlZCBmb3IgYXNzYXVsdGluZyB0aGVtLCBhbmQgamVlcmVkIGF0IHRoZWlyIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGF0IGRheSwgdGhlbiwgdGhlIHNvbGRpZXJzIG9mIFNlcnRvcml1cyB3b3JrZWQgdW50aWwgbmlnaHQsIGFuZCB3ZXJlIHRoZW4gbGVkIGJhY2sgdG8gY2FtcC4gQnV0IHdoZW4gdGhlIG5leHQgZGF5IGNhbWUsIGF0IGZpcnN0IGEgZ2VudGxlIGJyZWV6ZSBhcm9zZSwgc3RpcnJpbmcgdXAgdGhlIGxpZ2h0ZXN0IHBvcnRpb25zIG9mIHRoZSBnYXRoZXJlZCBzb2lsIGFuZCBzY2F0dGVyaW5nIHRoZW0gbGlrZSBjaGFmZjsgdGhlbiwgd2hlbiBDYWVjaWFzIHdhcyBibG93aW5nIHN0cm9uZyB3aXRoIHRoZSBtb3VudGluZyBvZiB0aGUgc3VuIGFuZCBjb3ZlcmluZyB0aGUgaGlsbHMgd2l0aCBkdXN0LCB0aGUgc29sZGllcnMgY2FtZSBhbmQgc3RpcnJlZCB1cCB0aGUgbW91bmQgb2YgZWFydGggdG8gdGhlIGJvdHRvbSBhbmQgYnJva2UgdXAgdGhlIGx1bXBzLCB3aGlsZSBzb21lIGFjdHVhbGx5IGRyb3ZlIHRoZWlyIGhvcnNlcyBiYWNrIGFuZCBmb3J0aCB0aHJvdWdoIGl0LCB0aHJvd2luZyB1cCB0aGUgbG9vc2VuZWQgZWFydGggYW5kIGdpdmluZyBpdCB0byB0aGUgd2luZCB0byBjYXJyeS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgd2luZCBjYXVnaHQgdXAgYWxsIHRoZSBlYXJ0aCB0aHVzIGJyb2tlbiBhbmQgc3RpcnJlZCBhbmQgdGhyZXcgaXQgdXAgYWdhaW5zdCB0aGUgZHdlbGxpbmdzIG9mIHRoZSBCYXJiYXJpYW5zLCB3aGljaCBvcGVuZWQgc28gYXMgdG8gYWRtaXQgQ2FlY2lhcy4gQW5kIHRoZSBCYXJiYXJpYW5zLCBzaW5jZSB0aGVpciBjYXZlcyBoYWQgbm8gb3RoZXIgaW5sZXQgZm9yIGFpciB0aGFuIHRoYXQgYWdhaW5zdCB3aGljaCB0aGUgd2luZCB3YXMgZGFzaGluZywgd2VyZSBxdWlja2x5IGJsaW5kZWQsIGFuZCBxdWlja2x5IGNob2tlZCwgdG9vLCBhcyB0aGV5IHRyaWVkIHRvIGluaGFsZSBhbiBhaXIgdGhhdCB3YXMgaGFyc2ggYW5kIG1pbmdsZWQgd2l0aCBncmVhdCBxdWFudGl0aWVzIG9mIGR1c3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWZ0ZXIgaG9sZGluZyBvdXQgd2l0aCBkaWZmaWN1bHR5IGZvciB0d28gZGF5cywgb24gdGhlIHRoaXJkIGRheSB0aGV5IHN1cnJlbmRlcmVkLCB0aGVyZWJ5IGFkZGluZyBub3Qgc28gbXVjaCB0byB0aGUgcG93ZXIgYXMgdG8gdGhlIGZhbWUgb2YgU2VydG9yaXVzLCBzaW5jZSBieSBoaXMgc2tpbGwgaGUgaGFkIHN1YmR1ZWQgd2hhdCBjb3VsZCBub3QgYmUgdGFrZW4gYnkgYXJtcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIGFsbCBoaXMgbWlsaXRhcnkgZXhwbG9pdHMgdGhhdCB3aGljaCBoZSBwZXJmb3JtZWQgaW4gZGVhbGluZyB3aXRoIHRoZSBwZW9wbGUgY2FsbGVkIENoYXJhY2l0YW5pIGlzIGFkbWlyZWQgYXMgbXVjaCBhcyBhbnkuIFRoZXkgYXJlIGEgcGVvcGxlIGJleW9uZCB0aGUgcml2ZXIgVGFnb25pdXMsIGFuZCB0aGV5IGRvIG5vdCBkd2VsbCBpbiBjaXRpZXMgb3IgdmlsbGFnZXMsIGJ1dCBvbiBhIGxhcmdlIGFuZCBsb2Z0eSBoaWxsIGNvbnRhaW5pbmcgY2F2ZXMgYW5kIGhvbGxvd3MgaW4gdGhlIGNsaWZmcyB3aGljaCBsb29rIHRvd2FyZHMgdGhlIG5vcnRoLiBUaGUgd2hvbGUgY291bnRyeSBhdCB0aGUgYmFzZSBvZiB0aGUgaGlsbCBhYm91bmRzIGluIHdoaXRlIGNsYXkgYW5kIGEgc29pbCB0aGF0IGlzIHBvcm91cyBhbmQgY3J1bWJseTsgaXQgaXMgbm90IGZpcm0gZW5vdWdoIHRvIGJlYXIgdGhlIHRyZWFkIG9mIG1hbiwgYW5kIHNwcmVhZHMgZmFyIGFib3V0IGlmIG9ubHkgc2xpZ2h0bHkgc3RpcnJlZCwgbGlrZSB1bnNsYWtlZCBsaW1lIG9yIGFzaGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIEJhcmJhcmlhbnMsIHRoZW4sIHdoZW5ldmVyIHRoZXkgd2VyZSBhZnJhaWQgb2Ygd2FyLCB3b3VsZCBoaWRlIHRoZW1zZWx2ZXMgaW4gdGhlaXIgY2F2ZXMsIHRha2UgYWxsIHRoZWlyIHBsdW5kZXIgaW4gd2l0aCB0aGVtLCBhbmQga2VlcCBxdWlldCwgZm9yIHRoZXkgY291bGQgbm90IGJlIHRha2VuIGJ5IGZvcmNlOyBhbmQgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgd2hlbiBTZXJ0b3JpdXMgaGFkIHJldGlyZWQgYmVmb3JlIE1ldGVsbHVzIGFuZCBlbmNhbXBlZCBhdCB0aGUgYmFzZSBvZiB0aGVpciBoaWxsLCB0aGV5IHRob3VnaHQgc2Nvcm5mdWxseSBvZiBoaW0gYXMgYSB2YW5xdWlzaGVkIG1hbiwgYW5kIGhlLCBlaXRoZXIgb3V0IG9mIGFuZ2VyLCBvciBiZWNhdXNlIGhlIGRpZCBub3Qgd2lzaCB0byBiZSB0aG91Z2h0IGEgZnVnaXRpdmUsIGF0IGJyZWFrIG9mIGRheSByb2RlIHVwIHRvIHRoZSBwbGFjZSBhbmQgaW5zcGVjdGVkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBubyBhdHRhY2tpbmcgaXQgYW55d2hlcmUsIGJ1dCBhcyBoZSB3YXMgd2FuZGVyaW5nIGFib3V0IHRvIG5vIHB1cnBvc2UgYW5kIGluZHVsZ2luZyBpbiBlbXB0eSB0aHJlYXRzLCBoZSBzYXcgdGhhdCBkdXN0IGZyb20gdGhlIHNvaWwgd2hpY2ggSSBoYXZlIGRlc2NyaWJlZCB3YXMgYmVpbmcgY2FycmllZCB1cCBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zIGluIGdyZWF0IHF1YW50aXRpZXMgYnkgdGhlIHdpbmQuIEZvciB0aGUgY2F2ZXMsIGFzIEkgaGF2ZSBzYWlkLCBmYWNlZCB0aGUgbm9ydGgsIGFuZCB0aGUgd2luZCB3aGljaCBibG93cyBmcm9tIHRoYXQgcXVhcnRlciAoc29tZSBjYWxsIGl0IENhZWNpYXMpIGlzIHRoZSBtb3N0IHByZXZhbGVudCBhbmQgdGhlIHN0cm9uZ2VzdCBvZiB0aGUgd2luZCBpbiB0aGF0IGNvdW50cnksIGJlaW5nIGEgY29uZmx1ZW50IG9mIHdpbmRzIGZyb20gd2F0ZXJ5IHBsYWlucyBhbmQgc25vdy1jb3ZlcmVkIG1vdW50YWluczsgYW5kIGF0IHRoaXMgdGltZSBwYXJ0aWN1bGFybHksIHdoaWNoIHdhcyB0aGUgaGVpZ2h0IG9mIHN1bW1lciwgaXQgd2FzIHN0cm9uZywgd2FzIGZlZCBieSB0aGUgbWVsdGluZyBzbm93cyBvZiBub3J0aGVybiByZWdpb25zLCBhbmQgYmxldyBtb3N0IGRlbGlnaHRmdWxseSB3aXRoIGNvbnRpbnVhbCByZWZyZXNobWVudCBmb3IgbWFuIGFuZCBiZWFzdCBhbGwgZGF5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvLCByZWZsZWN0aW5nIG9uIHRoZXNlIHRoaW5ncyBhbmQgZ2V0dGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGVtIGZyb20gdGhlIG5hdGl2ZXMgb2YgdGhlIGNvdW50cnksIFNlcnRvcml1cyBvcmRlcmVkIGhpcyBzb2xkaWVycyB0byB0YWtlIHNvbWUgb2YgdGhlIGxvb3NlIGFuZCBhc2h5IHNvaWwgdGhhdCBJIGhhdmUgZGVzY3JpYmVkLCBjYXJyeSBpdCBkaXJlY3RseSBvcHBvc2l0ZSB0aGUgaGlsbCwgYW5kIG1ha2UgYSBoZWFwIG9mIGl0IHRoZXJlLiBUaGlzIHRoZSBCYXJiYXJpYW5zIGNvbmplY3R1cmVkIHRvIGJlIGEgbW91bmQgcmFpc2VkIGZvciBhc3NhdWx0aW5nIHRoZW0sIGFuZCBqZWVyZWQgYXQgdGhlaXIgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoYXQgZGF5LCB0aGVuLCB0aGUgc29sZGllcnMgb2YgU2VydG9yaXVzIHdvcmtlZCB1bnRpbCBuaWdodCwgYW5kIHdlcmUgdGhlbiBsZWQgYmFjayB0byBjYW1wLiBCdXQgd2hlbiB0aGUgbmV4dCBkYXkgY2FtZSwgYXQgZmlyc3QgYSBnZW50bGUgYnJlZXplIGFyb3NlLCBzdGlycmluZyB1cCB0aGUgbGlnaHRlc3QgcG9ydGlvbnMgb2YgdGhlIGdhdGhlcmVkIHNvaWwgYW5kIHNjYXR0ZXJpbmcgdGhlbSBsaWtlIGNoYWZmOyB0aGVuLCB3aGVuIENhZWNpYXMgd2FzIGJsb3dpbmcgc3Ryb25nIHdpdGggdGhlIG1vdW50aW5nIG9mIHRoZSBzdW4gYW5kIGNvdmVyaW5nIHRoZSBoaWxscyB3aXRoIGR1c3QsIHRoZSBzb2xkaWVycyBjYW1lIGFuZCBzdGlycmVkIHVwIHRoZSBtb3VuZCBvZiBlYXJ0aCB0byB0aGUgYm90dG9tIGFuZCBicm9rZSB1cCB0aGUgbHVtcHMsIHdoaWxlIHNvbWUgYWN0dWFsbHkgZHJvdmUgdGhlaXIgaG9yc2VzIGJhY2sgYW5kIGZvcnRoIHRocm91Z2ggaXQsIHRocm93aW5nIHVwIHRoZSBsb29zZW5lZCBlYXJ0aCBhbmQgZ2l2aW5nIGl0IHRvIHRoZSB3aW5kIHRvIGNhcnJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHdpbmQgY2F1Z2h0IHVwIGFsbCB0aGUgZWFydGggdGh1cyBicm9rZW4gYW5kIHN0aXJyZWQgYW5kIHRocmV3IGl0IHVwIGFnYWluc3QgdGhlIGR3ZWxsaW5ncyBvZiB0aGUgQmFyYmFyaWFucywgd2hpY2ggb3BlbmVkIHNvIGFzIHRvIGFkbWl0IENhZWNpYXMuIEFuZCB0aGUgQmFyYmFyaWFucywgc2luY2UgdGhlaXIgY2F2ZXMgaGFkIG5vIG90aGVyIGlubGV0IGZvciBhaXIgdGhhbiB0aGF0IGFnYWluc3Qgd2hpY2ggdGhlIHdpbmQgd2FzIGRhc2hpbmcsIHdlcmUgcXVpY2tseSBibGluZGVkLCBhbmQgcXVpY2tseSBjaG9rZWQsIHRvbywgYXMgdGhleSB0cmllZCB0byBpbmhhbGUgYW4gYWlyIHRoYXQgd2FzIGhhcnNoIGFuZCBtaW5nbGVkIHdpdGggZ3JlYXQgcXVhbnRpdGllcyBvZiBkdXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWZ0ZXIgaG9sZGluZyBvdXQgd2l0aCBkaWZmaWN1bHR5IGZvciB0d28gZGF5cywgb24gdGhlIHRoaXJkIGRheSB0aGV5IHN1cnJlbmRlcmVkLCB0aGVyZWJ5IGFkZGluZyBub3Qgc28gbXVjaCB0byB0aGUgcG93ZXIgYXMgdG8gdGhlIGZhbWUgb2YgU2VydG9yaXVzLCBzaW5jZSBieSBoaXMgc2tpbGwgaGUgaGFkIHN1YmR1ZWQgd2hhdCBjb3VsZCBub3QgYmUgdGFrZW4gYnkgYXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgYXMgbG9uZyBhcyBoZSBjYXJyaWVkIG9uIHRoZSB3YXIgd2l0aCBNZXRlbGx1cyBhcyBoaXMgYW50YWdvbmlzdCwgaGUgd2FzIHRob3VnaHQgdG8gYmUgc3VjY2Vzc2Z1bCBmb3IgdGhlIG1vc3QgcGFydCBiZWNhdXNlLCBvd2luZyB0byBncmVhdCBhZ2UgYW5kIG5hdHVyYWwgc2xvd25lc3MsIE1ldGVsbHVzIGNvdWxkIG5vdCBjb3BlIHdpdGggYSBtYW4gd2hvIHdhcyBib2xkIGFuZCBoZWFkZWQgYSBmb3JjZSBjb21wb3NlZCBvZiByb2JiZXJzIHJhdGhlciB0aGFuIHNvbGRpZXJzOyBidXQgd2hlbiBQb21wZXkgYWxzbyBjcm9zc2VkIHRoZSBQeXJlbmVlcyBhbmQgYmVjYW1lIGhpcyBhbnRhZ29uaXN0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDc2IEIuQy48L25vdGU+IGFuZCBlYWNoIG9mIHRoZW0gaGFkIG9mZmVyZWQgYW5kIGFjY2VwdGVkIGV2ZXJ5IHRlc3Qgb2YgYSBnZW5lcmFsJ3MgcG93ZXJzLCBhbmQgU2VydG9yaXVzIGhhZCB0aGUgYWR2YW50YWdlIGluIGNvdW50ZXItcGxhbm5pbmcgYW5kIHdhdGNoZnVsbmVzcywgdGhlbiBpbmRlZWQgaXQgd2FzIG5vaXNlZCBhYnJvYWQgYXMgZmFyIGFzIFJvbWUgdGhhdCBoZSB3YXMgdGhlIGFibGVzdCBnZW5lcmFsIG9mIGhpcyB0aW1lIGluIHRoZSBjb25kdWN0IG9mIGEgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGZhbWUgb2YgUG9tcGV5IHdhcyBieSBubyBtZWFucyBpbmNvbnNpZGVyYWJsZSwgbmF5LCBhdCB0aGlzIHRpbWUgaGlzIHJlcHV0YXRpb24gd2FzIGluIG1vc3Qgdmlnb3JvdXMgZmxvd2VyIGluIGNvbnNlcXVlbmNlIG9mIHRoZSB2YWxpYW50IGRlZWRzIHdoaWNoIGhlIHBlcmZvcm1lZCBpbiB0aGUgY2F1c2Ugb2YgU3VsbGEsIGRlZWRzIGZvciB3aGljaCBoZSB3YXMgZ2l2ZW4gdGhlIHN1cm5hbWUgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NYWdudXM8L3E+ICh0aGF0IGlzLCBHcmVhdCkgYnkgU3VsbGEsIGFuZCByZWNlaXZlZCB0aGUgaG9ub3VycyBvZiBhIHRyaXVtcGggd2hpbGUgaGUgd2FzIHN0aWxsIGJlYXJkbGVzcy4gVGhlcmVmb3JlLCB0b28sIG1hbnkgb2YgdGhlIGNpdGllcyB3aGljaCB3ZXJlIHN1YmplY3QgdG8gU2VydG9yaXVzIHR1cm5lZCB0aGVpciBleWVzIHRvd2FyZHMgUG9tcGV5IGFuZCBmZWx0IGluY2xpbmVkIHRvIGNoYW5nZSB0aGVpciBhbGxlZ2lhbmNlOyB0aGV5IGNlYXNlZCB0byBkbyB0aGlzLCBob3dldmVyLCBhZnRlciB0aGUgZGlzYXN0ZXIgYXQgTGF1cm9uLCB3aGljaCBoYXBwZW5lZCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgYXMgbG9uZyBhcyBoZSBjYXJyaWVkIG9uIHRoZSB3YXIgd2l0aCBNZXRlbGx1cyBhcyBoaXMgYW50YWdvbmlzdCwgaGUgd2FzIHRob3VnaHQgdG8gYmUgc3VjY2Vzc2Z1bCBmb3IgdGhlIG1vc3QgcGFydCBiZWNhdXNlLCBvd2luZyB0byBncmVhdCBhZ2UgYW5kIG5hdHVyYWwgc2xvd25lc3MsIE1ldGVsbHVzIGNvdWxkIG5vdCBjb3BlIHdpdGggYSBtYW4gd2hvIHdhcyBib2xkIGFuZCBoZWFkZWQgYSBmb3JjZSBjb21wb3NlZCBvZiByb2JiZXJzIHJhdGhlciB0aGFuIHNvbGRpZXJzOyBidXQgd2hlbiBQb21wZXkgYWxzbyBjcm9zc2VkIHRoZSBQeXJlbmVlcyBhbmQgYmVjYW1lIGhpcyBhbnRhZ29uaXN0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzYgQi5DLjwvbm90ZT4gYW5kIGVhY2ggb2YgdGhlbSBoYWQgb2ZmZXJlZCBhbmQgYWNjZXB0ZWQgZXZlcnkgdGVzdCBvZiBhIGdlbmVyYWwncyBwb3dlcnMsIGFuZCBTZXJ0b3JpdXMgaGFkIHRoZSBhZHZhbnRhZ2UgaW4gY291bnRlci1wbGFubmluZyBhbmQgd2F0Y2hmdWxuZXNzLCB0aGVuIGluZGVlZCBpdCB3YXMgbm9pc2VkIGFicm9hZCBhcyBmYXIgYXMgUm9tZSB0aGF0IGhlIHdhcyB0aGUgYWJsZXN0IGdlbmVyYWwgb2YgaGlzIHRpbWUgaW4gdGhlIGNvbmR1Y3Qgb2YgYSB3YXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZmFtZSBvZiBQb21wZXkgd2FzIGJ5IG5vIG1lYW5zIGluY29uc2lkZXJhYmxlLCBuYXksIGF0IHRoaXMgdGltZSBoaXMgcmVwdXRhdGlvbiB3YXMgaW4gbW9zdCB2aWdvcm91cyBmbG93ZXIgaW4gY29uc2VxdWVuY2Ugb2YgdGhlIHZhbGlhbnQgZGVlZHMgd2hpY2ggaGUgcGVyZm9ybWVkIGluIHRoZSBjYXVzZSBvZiBTdWxsYSwgZGVlZHMgZm9yIHdoaWNoIGhlIHdhcyBnaXZlbiB0aGUgc3VybmFtZSBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFnbnVzPC9xPiAodGhhdCBpcywgR3JlYXQpIGJ5IFN1bGxhLCBhbmQgcmVjZWl2ZWQgdGhlIGhvbm91cnMgb2YgYSB0cml1bXBoIHdoaWxlIGhlIHdhcyBzdGlsbCBiZWFyZGxlc3MuIFRoZXJlZm9yZSwgdG9vLCBtYW55IG9mIHRoZSBjaXRpZXMgd2hpY2ggd2VyZSBzdWJqZWN0IHRvIFNlcnRvcml1cyB0dXJuZWQgdGhlaXIgZXllcyB0b3dhcmRzIFBvbXBleSBhbmQgZmVsdCBpbmNsaW5lZCB0byBjaGFuZ2UgdGhlaXIgYWxsZWdpYW5jZTsgdGhleSBjZWFzZWQgdG8gZG8gdGhpcywgaG93ZXZlciwgYWZ0ZXIgdGhlIGRpc2FzdGVyIGF0IExhdXJvbiwgd2hpY2ggaGFwcGVuZWQgY29udHJhcnkgdG8gYWxsIGV4cGVjdGF0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgU2VydG9yaXVzIHdhcyBiZXNpZWdpbmcgdGhhdCBjaXR5LCBhbmQgUG9tcGV5IGNhbWUgdG8gaXRzIGFzc2lzdGFuY2Ugd2l0aCBhbGwgaGlzIGZvcmNlcy4gTm93IHRoZXJlIHdhcyBhIGhpbGwgd2hpY2ggd2FzIHRob3VnaHQgdG8gYWZmb3JkIGEgZ29vZCBjb21tYW5kIG9mIHRoZSBjaXR5LCBhbmQgdGhpcyBoaWxsIFNlcnRvcml1cyBzdHJvdmUgdG8gc2VpemUgaW4gYWR2YW5jZSwgd2hpbGUgUG9tcGV5IHNvdWdodCB0byBwcmV2ZW50IGhpbS4gQnV0IFNlcnRvcml1cyBnb3QgdGhlcmUgZmlyc3QsIHdoZXJldXBvbiBQb21wZXksIHRha2luZyBwb3NpdGlvbiB3aXRoIGhpcyBhcm15LCB3YXMgZGVsaWdodGVkIHdpdGggdGhlIHdheSB0aGluZ3MgaGFkIHR1cm5lZCBvdXQsIGJlbGlldmluZyB0aGF0IFNlcnRvcml1cyB3YXMgY2F1Z2h0IGJldHdlZW4gdGhlIGNpdHkgYW5kIGhpcyBhZHZlcnNhcnkncyBmb3JjZXM7IGhlIGFsc28gc2VudCBhIG1lc3NlbmdlciBpbiB0byB0aGUgcGVvcGxlIG9mIExhdXJvbiBiaWRkaW5nIHRoZW0gYmUgb2YgZ29vZCBjaGVlciBhbmQgdGFrZSBzZWF0cyBhbG9uZyB0aGVpciB3YWxscyBmb3IgdGhlIHNwZWN0YWNsZSBvZiBTZXJ0b3JpdXMgdW5kZXJnb2luZyBzaWVnZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBTZXJ0b3JpdXMgaGVhcmQgb2YgdGhpcywgaGUgZ2F2ZSBhIGxhdWdoLCBhbmQgc2FpZCB0aGF0IHRvIFN1bGxhJ3MgcHVwaWwgKGZvciB0aHVzIGhlIHdhcyB3b250IHRvIHN0eWxlIFBvbXBleSBpbiBqZXN0KSBoZSBoaW1zZWxmIHdvdWxkIGdpdmUgYSBsZXNzb24sIG5hbWVseSwgdGhhdCBhIGdlbmVyYWwgbXVzdCBsb29rIGJlaGluZCBoaW0gcmF0aGVyIHRoYW4gaW4gZnJvbnQgb2YgaGltLiBBcyBoZSBzYWlkIHRoaXMsIGhlIHBvaW50ZWQgb3V0IHRvIGhpcyBiZWxlYWd1ZXJlZCB0cm9vcHMgc2l4IHRob3VzYW5kIG1lbi1hdC1hcm1zIHdob20gaGUgaGFkIGxlZnQgYmVoaW5kIGF0IHRoZWlyIGZvcm1lciBjYW1wLCBmcm9tIHdoaWNoIGhlIGhhZCBzYWxsaWVkIGZvcnRoIHRvIHNlaXplIHRoZSBoaWxsOyB0aGVzZSwgaW4gY2FzZSBQb21wZXkgbW92ZWQgYWdhaW5zdCB0aGUgb2NjdXBhbnRzIG9mIHRoZSBoaWxsLCB3ZXJlIHRvIGZhbGwgdXBvbiBoaXMgcmVhci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+UG9tcGV5IGFsc28gYmVjYW1lIGF3YXJlIG9mIHRoaXMgYWxsIHRvbyBsYXRlLCBhbmQgZGlkIG5vdCB2ZW50dXJlIHRvIGF0dGFjayBTZXJ0b3JpdXMgZm9yIGZlYXIgb2YgYmVpbmcgc3Vycm91bmRlZCwgYnV0IGxpbmUgd2FzIGFzaGFtZWQgdG8gZ28gYXdheSBhbmQgbGVhdmUgdGhlIHBlb3BsZSBvZiB0aGUgY2l0eSBpbiB0aGVpciBwZXJpbCwgYW5kIHNvIHdhcyBjb21wZWxsZWQgdG8gc2l0IHRoZXJlIHF1aWV0bHkgYW5kIHNlZSB0aGVtIHJ1aW5lZDsgZm9yIHRoZSBCYXJiYXJpYW5zIGdhdmUgdXAgYWxsIGhvcGUgYW5kIHN1cnJlbmRlcmVkIHRvIFNlcnRvcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U2VydG9yaXVzIHNwYXJlZCB0aGVpciBsaXZlcyBhbmQgbGV0IHRoZW0gYWxsIGdvLCBidXQgaGUgYnVybmVkIGRvd24gdGhlaXIgY2l0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAxOC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4dmlpaS4gMzwvYmlibD4uPC9ub3RlPiBub3QgYmVjYXVzZSBoZSB3YXMgYW5ncnkgb3IgY3J1ZWwsIGZvciBoZSBhcHBlYXJzIHRvIGhhdmUgZ2l2ZW4gd2F5IHRvIHBhc3Npb24gbGVzcyB0aGFuIGFueSBvdGhlciBnZW5lcmFsLCBidXQgdG8gcHV0IHRvIHNoYW1lIGFuZCBjb25mdXNpb24gdGhlIGFkbWlyZXJzIG9mIFBvbXBleSwgaW4gb3JkZXIgdGhhdCBpdCBtaWdodCBiZSBzYWlkIGFtb25nIHRoZSBCYXJiYXJpYW5zIHRoYXQgdGhvdWdoIGhlIHdhcyBuZWFyIGF0IGhhbmQgYW5kIGFsbCBidXQgd2FybWluZyBoaW1zZWxmIGF0IHRoZSBmbGFtZXMgb2YgYW4gYWxsaWVkIGNpdHksIGhlIGRpZCBub3QgY29tZSB0byBpdHMgcmVsaWVmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBTZXJ0b3JpdXMgd2FzIGJlc2llZ2luZyB0aGF0IGNpdHksIGFuZCBQb21wZXkgY2FtZSB0byBpdHMgYXNzaXN0YW5jZSB3aXRoIGFsbCBoaXMgZm9yY2VzLiBOb3cgdGhlcmUgd2FzIGEgaGlsbCB3aGljaCB3YXMgdGhvdWdodCB0byBhZmZvcmQgYSBnb29kIGNvbW1hbmQgb2YgdGhlIGNpdHksIGFuZCB0aGlzIGhpbGwgU2VydG9yaXVzIHN0cm92ZSB0byBzZWl6ZSBpbiBhZHZhbmNlLCB3aGlsZSBQb21wZXkgc291Z2h0IHRvIHByZXZlbnQgaGltLiBCdXQgU2VydG9yaXVzIGdvdCB0aGVyZSBmaXJzdCwgd2hlcmV1cG9uIFBvbXBleSwgdGFraW5nIHBvc2l0aW9uIHdpdGggaGlzIGFybXksIHdhcyBkZWxpZ2h0ZWQgd2l0aCB0aGUgd2F5IHRoaW5ncyBoYWQgdHVybmVkIG91dCwgYmVsaWV2aW5nIHRoYXQgU2VydG9yaXVzIHdhcyBjYXVnaHQgYmV0d2VlbiB0aGUgY2l0eSBhbmQgaGlzIGFkdmVyc2FyeSdzIGZvcmNlczsgaGUgYWxzbyBzZW50IGEgbWVzc2VuZ2VyIGluIHRvIHRoZSBwZW9wbGUgb2YgTGF1cm9uIGJpZGRpbmcgdGhlbSBiZSBvZiBnb29kIGNoZWVyIGFuZCB0YWtlIHNlYXRzIGFsb25nIHRoZWlyIHdhbGxzIGZvciB0aGUgc3BlY3RhY2xlIG9mIFNlcnRvcml1cyB1bmRlcmdvaW5nIHNpZWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU2VydG9yaXVzIGhlYXJkIG9mIHRoaXMsIGhlIGdhdmUgYSBsYXVnaCwgYW5kIHNhaWQgdGhhdCB0byBTdWxsYSdzIHB1cGlsIChmb3IgdGh1cyBoZSB3YXMgd29udCB0byBzdHlsZSBQb21wZXkgaW4gamVzdCkgaGUgaGltc2VsZiB3b3VsZCBnaXZlIGEgbGVzc29uLCBuYW1lbHksIHRoYXQgYSBnZW5lcmFsIG11c3QgbG9vayBiZWhpbmQgaGltIHJhdGhlciB0aGFuIGluIGZyb250IG9mIGhpbS4gQXMgaGUgc2FpZCB0aGlzLCBoZSBwb2ludGVkIG91dCB0byBoaXMgYmVsZWFndWVyZWQgdHJvb3BzIHNpeCB0aG91c2FuZCBtZW4tYXQtYXJtcyB3aG9tIGhlIGhhZCBsZWZ0IGJlaGluZCBhdCB0aGVpciBmb3JtZXIgY2FtcCwgZnJvbSB3aGljaCBoZSBoYWQgc2FsbGllZCBmb3J0aCB0byBzZWl6ZSB0aGUgaGlsbDsgdGhlc2UsIGluIGNhc2UgUG9tcGV5IG1vdmVkIGFnYWluc3QgdGhlIG9jY3VwYW50cyBvZiB0aGUgaGlsbCwgd2VyZSB0byBmYWxsIHVwb24gaGlzIHJlYXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSBhbHNvIGJlY2FtZSBhd2FyZSBvZiB0aGlzIGFsbCB0b28gbGF0ZSwgYW5kIGRpZCBub3QgdmVudHVyZSB0byBhdHRhY2sgU2VydG9yaXVzIGZvciBmZWFyIG9mIGJlaW5nIHN1cnJvdW5kZWQsIGJ1dCBsaW5lIHdhcyBhc2hhbWVkIHRvIGdvIGF3YXkgYW5kIGxlYXZlIHRoZSBwZW9wbGUgb2YgdGhlIGNpdHkgaW4gdGhlaXIgcGVyaWwsIGFuZCBzbyB3YXMgY29tcGVsbGVkIHRvIHNpdCB0aGVyZSBxdWlldGx5IGFuZCBzZWUgdGhlbSBydWluZWQ7IGZvciB0aGUgQmFyYmFyaWFucyBnYXZlIHVwIGFsbCBob3BlIGFuZCBzdXJyZW5kZXJlZCB0byBTZXJ0b3JpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNlcnRvcml1cyBzcGFyZWQgdGhlaXIgbGl2ZXMgYW5kIGxldCB0aGVtIGFsbCBnbywgYnV0IGhlIGJ1cm5lZCBkb3duIHRoZWlyIGNpdHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHZpaWkuIDM8L2JpYmw+Ljwvbm90ZT4gbm90IGJlY2F1c2UgaGUgd2FzIGFuZ3J5IG9yIGNydWVsLCBmb3IgaGUgYXBwZWFycyB0byBoYXZlIGdpdmVuIHdheSB0byBwYXNzaW9uIGxlc3MgdGhhbiBhbnkgb3RoZXIgZ2VuZXJhbCwgYnV0IHRvIHB1dCB0byBzaGFtZSBhbmQgY29uZnVzaW9uIHRoZSBhZG1pcmVycyBvZiBQb21wZXksIGluIG9yZGVyIHRoYXQgaXQgbWlnaHQgYmUgc2FpZCBhbW9uZyB0aGUgQmFyYmFyaWFucyB0aGF0IHRob3VnaCBoZSB3YXMgbmVhciBhdCBoYW5kIGFuZCBhbGwgYnV0IHdhcm1pbmcgaGltc2VsZiBhdCB0aGUgZmxhbWVzIG9mIGFuIGFsbGllZCBjaXR5LCBoZSBkaWQgbm90IGNvbWUgdG8gaXRzIHJlbGllZi4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4dmlpaS4gMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh2aWlpLiAzPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgdHJ1ZSB0aGF0IFNlcnRvcml1cyBzdWZmZXJlZCBzZXZlcmFsIGRlZmVhdHMsIGFuZCB5ZXQgaGUgYWx3YXlzIGtlcHQgaGltc2VsZiBhbmQgaGlzIG93biBmb3JjZXMgdW5kZWZlYXRlZCwgYW5kIGdvdCBoaXMgY3J1c2hpbmcgYmxvd3Mgd2hlcmUgb3RoZXIgZ2VuZXJhbHMgdGhhbiBoZSB3ZXJlIGluIGNvbW1hbmQ7IGFuZCBmcm9tIHRoZSB3YXkgaW4gd2hpY2ggaGUgcmVwYWlyZWQgaGlzIGRlZmVhdHMgaGUgd2FzIG1vcmUgYWRtaXJlZCB0aGFuIHRoZSB2aWN0b3Jpb3VzIGdlbmVyYWxzIG9wcG9zZWQgdG8gaGltLCBhcywgZm9yIGluc3RhbmNlLCBpbiB0aGUgYmF0dGxlIG9uIHRoZSBTdWNybyBhZ2FpbnN0IFBvbXBleSwgYW5kLCBhZ2FpbiwgaW5uIHRoZSBiYXR0bGUgbmVhciBUdW5hIGFnYWluc3QgYm90aCBQb21wZXkgYW5kIE1ldGVsbHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBiYXR0bGUgb24gdGhlIFN1Y3JvPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciB4aXg8L2JpYmw+Ljwvbm90ZT4gaXMgc2FpZCB0byBoYXZlIGJlZW4gcHJlY2lwaXRhdGVkIGJ5IFBvbXBleSwgaW4gb3JkZXIgdGhhdCBNZXRlbGx1cyBtaWdodCBub3Qgc2hhcmUgaW4gdGhlIHZpY3RvcnkuIFNlcnRvcml1cywgdG9vLCB3aXNoZWQgdG8gZmlnaHQgdGhlIGlzc3VlIG91dCB3aXRoIFBvbXBleSBiZWZvcmUgTWV0ZWxsdXMgY2FtZSB1cCwgYW5kIHRoZXJlZm9yZSBkcmV3IG91dCBoaXMgZm9yY2VzIHdoZW4gZXZlbmluZyB3YXMgYWxyZWFkeSBhdCBoYW5kLCBhbmQgYmVnYW4gdGhlIGVuZ2FnZW1lbnQsIHRoaW5raW5nIHRoYXQsIHNpbmNlIGhpcyBlbmVtaWVzIHdlcmUgc3RyYW5nZXJzIGFuZCB1bmFjcXVhaW50ZWQgd2l0aCB0aGUgcmVnaW9uLCBkYXJrbmVzcyB3b3VsZCBiZSBhIGhpbmRyYW5jZSB0byB0aGVtIGVpdGhlciBpbiBmbGlnaHQgb3IgaW4gcHVyc3VpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZmlnaHRpbmcgd2FzIGF0IGNsb3NlIHF1YXJ0ZXJzLCBpdCBoYXBwZW5lZCB0aGF0IFNlcnRvcml1cyB3YXMgbm90IGhpbXNlbGYgZW5nYWdlZCB3aXRoIFBvbXBleSBhdCBmaXJzdCwgYnV0IHdpdGggQWZyYW5pdXMsIHdobyBjb21tYW5kZWQgUG9tcGV5J3MgbGVmdCwgd2hpbGUgU2VydG9yaXVzIGhpbXNlbGYgd2FzIHN0YXRpb25lZCBvbiB0aGUgcmlnaHQuIEhlYXJpbmcsIGhvd2V2ZXIsIHRoYXQgdGhvc2Ugb2YgaGlzIG1lbiB3aG8gd2VyZSBlbmdhZ2VkIHdpdGggUG9tcGV5IHdlcmUgeWllbGRpbmcgYmVmb3JlIGhpcyBvbnNldCBhbmQgYmVpbmcgd29yc3RlZCwgaGUgcHV0IGhpcyByaWdodCB3aW5nIGluIGNvbW1hbmQgb2Ygb3RoZXIgZ2VuZXJhbHMsIGFuZCBoYXN0ZW5lZCBoaW1zZWxmIHRvIHRoZSBoZWxwIG9mIHRoZSB3aW5nIHRoYXQgd2FzIHN1ZmZlcmluZyBkZWZlYXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIG9mIGhpcyBtZW4gd2hvIHdlcmUgYWxyZWFkeSBpbiByZXRyZWF0IGhlIHJhbGxpZWQsIHRob3NlIHdobyB3ZXJlIHN0aWxsIGtlZXBpbmcgdGhlaXIgcmFua3MgaGUgZW5jb3VyYWdlZCwgdGhlbiBjaGFyZ2VkIGFuZXcgdXBvbiBQb21wZXksIHdobyB3YXMgcHVyc3VpbmcsIGFuZCBwdXQgaGlzIG1lbiB0byBhIGdyZWF0IHJvdXQsIGluIHdoaWNoIFBvbXBleSBhbHNvIGNhbWUgbmVhciBiZWluZyBraWxsZWQsIHdhcyBhY3R1YWxseSB3b3VuZGVkLCBhbmQgaGFkIGEgbWFydmVsbG91cyBlc2NhcGUuIEZvciB0aGUgTGlieWFucyB3aXRoIFNlcnRvcml1cywgYWZ0ZXIgZ2V0dGluZyBQb21wZXkncyBob3JzZSwgd2hpY2ggaGFkIGdvbGRlbiBkZWNvcmF0aW9ucyBhbmQgd2FzIGNvdmVyZWQgd2l0aCBjb3N0bHkgdHJhcHBpbmdzLCB3ZXJlIHNvIGJ1c3kgZGlzdHJpYnV0aW5nIHRoZSBib290eSBhbmQgcXVhcnJlbGxpbmcgd2l0aCBvbmUgYW5vdGhlciBvdmVyIGl0LCB0aGF0IHRoZXkgbmVnbGVjdGVkIHRoZSBwdXJzdWl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnJhbml1cywgaG93ZXZlciwgYXMgc29vbiBhcyBTZXJ0b3JpdXMgaGFkIGdvbmUgb2ZmIHRvIHRoZSBvdGhlciB3aW5nIHdpdGggYWlkIGFuZCBzdWNjb3VyLCByb3V0ZWQgaGlzIG9wcG9uZW50cyBhbmQgZHJvdmUgdGhlbSBoZWFkbG9uZyBpbnRvIHRoZWlyIGNhbXA7IGFuZCBkYXNoaW5nIGluIHdpdGggdGhlIGZ1Z2l0aXZlcywgaXQgYmVpbmcgbm93IGRhcmssIGhlIGJlZ2FuIHRvIHBsdW5kZXIsIGtub3dpbmcgbm90aGluZyBvZiBQb21wZXkncyBmbGlnaHQgYW5kIGhhdmluZyBubyBwb3dlciB0byBrZWVwIGhpcyBzb2xkaWVycyBmcm9tIHRoZWlyIHBpbGxhZ2luZy4gQnV0IG1lYW53aGlsZSBTZXJ0b3JpdXMgY2FtZSBiYWNrIGZyb20gaGlzIHZpY3Rvcnkgb24gdGhlIG90aGVyIHdpbmcsIGFuZCBmYWxsaW5nIHVwb24gdGhlIHN0cmFnZ2xpbmcgYW5kIGNvbmZ1c2VkIHNvbGRpZXJzIG9mIEFmcmFuaXVzLCBzbGV3IGdyZWF0IG51bWJlcnMgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG1vcm5pbmcsIG1vcmVvdmVyLCBoZSBhcm1lZCBoaXMgdHJvb3BzIGFuZCBjYW1lIG91dCBmb3IgYmF0dGxlOyB0aGVuLCBsZWFybmluZyB0aGF0IE1ldGVsbHVzIHdhcyBuZWFyLCBoZSBicm9rZSB1cCBoaXMgYXJyYXkgYW5kIGRlY2FtcGVkLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGFzIGZvciB0aGlzIGJveSwgaWYgdGhhdCBvbGQgd29tYW4gaGFkIG5vdCBjb21lIHVwLCBJIHNob3VsZCBoYXZlIGdpdmVuIGhpbSBhIHNvdW5kIGJlYXRpbmcgYW5kIHNlbnQgaGltIGJhY2sgdG8gUm9tZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgdHJ1ZSB0aGF0IFNlcnRvcml1cyBzdWZmZXJlZCBzZXZlcmFsIGRlZmVhdHMsIGFuZCB5ZXQgaGUgYWx3YXlzIGtlcHQgaGltc2VsZiBhbmQgaGlzIG93biBmb3JjZXMgdW5kZWZlYXRlZCwgYW5kIGdvdCBoaXMgY3J1c2hpbmcgYmxvd3Mgd2hlcmUgb3RoZXIgZ2VuZXJhbHMgdGhhbiBoZSB3ZXJlIGluIGNvbW1hbmQ7IGFuZCBmcm9tIHRoZSB3YXkgaW4gd2hpY2ggaGUgcmVwYWlyZWQgaGlzIGRlZmVhdHMgaGUgd2FzIG1vcmUgYWRtaXJlZCB0aGFuIHRoZSB2aWN0b3Jpb3VzIGdlbmVyYWxzIG9wcG9zZWQgdG8gaGltLCBhcywgZm9yIGluc3RhbmNlLCBpbiB0aGUgYmF0dGxlIG9uIHRoZSBTdWNybyBhZ2FpbnN0IFBvbXBleSwgYW5kLCBhZ2FpbiwgaW5uIHRoZSBiYXR0bGUgbmVhciBUdW5hIGFnYWluc3QgYm90aCBQb21wZXkgYW5kIE1ldGVsbHVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGJhdHRsZSBvbiB0aGUgU3Vjcm88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIHhpeDwvYmlibD4uPC9ub3RlPiBpcyBzYWlkIHRvIGhhdmUgYmVlbiBwcmVjaXBpdGF0ZWQgYnkgUG9tcGV5LCBpbiBvcmRlciB0aGF0IE1ldGVsbHVzIG1pZ2h0IG5vdCBzaGFyZSBpbiB0aGUgdmljdG9yeS4gU2VydG9yaXVzLCB0b28sIHdpc2hlZCB0byBmaWdodCB0aGUgaXNzdWUgb3V0IHdpdGggUG9tcGV5IGJlZm9yZSBNZXRlbGx1cyBjYW1lIHVwLCBhbmQgdGhlcmVmb3JlIGRyZXcgb3V0IGhpcyBmb3JjZXMgd2hlbiBldmVuaW5nIHdhcyBhbHJlYWR5IGF0IGhhbmQsIGFuZCBiZWdhbiB0aGUgZW5nYWdlbWVudCwgdGhpbmtpbmcgdGhhdCwgc2luY2UgaGlzIGVuZW1pZXMgd2VyZSBzdHJhbmdlcnMgYW5kIHVuYWNxdWFpbnRlZCB3aXRoIHRoZSByZWdpb24sIGRhcmtuZXNzIHdvdWxkIGJlIGEgaGluZHJhbmNlIHRvIHRoZW0gZWl0aGVyIGluIGZsaWdodCBvciBpbiBwdXJzdWl0LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDE5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciB4aXg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIHhpeDwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGZpZ2h0aW5nIHdhcyBhdCBjbG9zZSBxdWFydGVycywgaXQgaGFwcGVuZWQgdGhhdCBTZXJ0b3JpdXMgd2FzIG5vdCBoaW1zZWxmIGVuZ2FnZWQgd2l0aCBQb21wZXkgYXQgZmlyc3QsIGJ1dCB3aXRoIEFmcmFuaXVzLCB3aG8gY29tbWFuZGVkIFBvbXBleSdzIGxlZnQsIHdoaWxlIFNlcnRvcml1cyBoaW1zZWxmIHdhcyBzdGF0aW9uZWQgb24gdGhlIHJpZ2h0LiBIZWFyaW5nLCBob3dldmVyLCB0aGF0IHRob3NlIG9mIGhpcyBtZW4gd2hvIHdlcmUgZW5nYWdlZCB3aXRoIFBvbXBleSB3ZXJlIHlpZWxkaW5nIGJlZm9yZSBoaXMgb25zZXQgYW5kIGJlaW5nIHdvcnN0ZWQsIGhlIHB1dCBoaXMgcmlnaHQgd2luZyBpbiBjb21tYW5kIG9mIG90aGVyIGdlbmVyYWxzLCBhbmQgaGFzdGVuZWQgaGltc2VsZiB0byB0aGUgaGVscCBvZiB0aGUgd2luZyB0aGF0IHdhcyBzdWZmZXJpbmcgZGVmZWF0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIG9mIGhpcyBtZW4gd2hvIHdlcmUgYWxyZWFkeSBpbiByZXRyZWF0IGhlIHJhbGxpZWQsIHRob3NlIHdobyB3ZXJlIHN0aWxsIGtlZXBpbmcgdGhlaXIgcmFua3MgaGUgZW5jb3VyYWdlZCwgdGhlbiBjaGFyZ2VkIGFuZXcgdXBvbiBQb21wZXksIHdobyB3YXMgcHVyc3VpbmcsIGFuZCBwdXQgaGlzIG1lbiB0byBhIGdyZWF0IHJvdXQsIGluIHdoaWNoIFBvbXBleSBhbHNvIGNhbWUgbmVhciBiZWluZyBraWxsZWQsIHdhcyBhY3R1YWxseSB3b3VuZGVkLCBhbmQgaGFkIGEgbWFydmVsbG91cyBlc2NhcGUuIEZvciB0aGUgTGlieWFucyB3aXRoIFNlcnRvcml1cywgYWZ0ZXIgZ2V0dGluZyBQb21wZXkncyBob3JzZSwgd2hpY2ggaGFkIGdvbGRlbiBkZWNvcmF0aW9ucyBhbmQgd2FzIGNvdmVyZWQgd2l0aCBjb3N0bHkgdHJhcHBpbmdzLCB3ZXJlIHNvIGJ1c3kgZGlzdHJpYnV0aW5nIHRoZSBib290eSBhbmQgcXVhcnJlbGxpbmcgd2l0aCBvbmUgYW5vdGhlciBvdmVyIGl0LCB0aGF0IHRoZXkgbmVnbGVjdGVkIHRoZSBwdXJzdWl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmcmFuaXVzLCBob3dldmVyLCBhcyBzb29uIGFzIFNlcnRvcml1cyBoYWQgZ29uZSBvZmYgdG8gdGhlIG90aGVyIHdpbmcgd2l0aCBhaWQgYW5kIHN1Y2NvdXIsIHJvdXRlZCBoaXMgb3Bwb25lbnRzIGFuZCBkcm92ZSB0aGVtIGhlYWRsb25nIGludG8gdGhlaXIgY2FtcDsgYW5kIGRhc2hpbmcgaW4gd2l0aCB0aGUgZnVnaXRpdmVzLCBpdCBiZWluZyBub3cgZGFyaywgaGUgYmVnYW4gdG8gcGx1bmRlciwga25vd2luZyBub3RoaW5nIG9mIFBvbXBleSdzIGZsaWdodCBhbmQgaGF2aW5nIG5vIHBvd2VyIHRvIGtlZXAgaGlzIHNvbGRpZXJzIGZyb20gdGhlaXIgcGlsbGFnaW5nLiBCdXQgbWVhbndoaWxlIFNlcnRvcml1cyBjYW1lIGJhY2sgZnJvbSBoaXMgdmljdG9yeSBvbiB0aGUgb3RoZXIgd2luZywgYW5kIGZhbGxpbmcgdXBvbiB0aGUgc3RyYWdnbGluZyBhbmQgY29uZnVzZWQgc29sZGllcnMgb2YgQWZyYW5pdXMsIHNsZXcgZ3JlYXQgbnVtYmVycyBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBtb3JuaW5nLCBtb3Jlb3ZlciwgaGUgYXJtZWQgaGlzIHRyb29wcyBhbmQgY2FtZSBvdXQgZm9yIGJhdHRsZTsgdGhlbiwgbGVhcm5pbmcgdGhhdCBNZXRlbGx1cyB3YXMgbmVhciwgaGUgYnJva2UgdXAgaGlzIGFycmF5IGFuZCBkZWNhbXBlZCwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGFzIGZvciB0aGlzIGJveSwgaWYgdGhhdCBvbGQgd29tYW4gaGFkIG5vdCBjb21lIHVwLCBJIHNob3VsZCBoYXZlIGdpdmVuIGhpbSBhIHNvdW5kIGJlYXRpbmcgYW5kIHNlbnQgaGltIGJhY2sgdG8gUm9tZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBub3cgZ3JlYXRseSBkaXNoZWFydGVuZWQgYmVjYXVzZSB0aGF0IGRvZSBvZiBoaXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDExLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGk8L2JpYmw+Ljwvbm90ZT4gd2FzIG5vd2hlcmUgdG8gYmUgZm91bmQ7IGZvciBoZSB3YXMgdGh1cyBkZXByaXZlZCBvZiBhIHdvbmRlcmZ1bCBjb250cml2YW5jZSBmb3IgaW5mbHVlbmNpbmcgdGhlIEJhcmJhcmlhbnMsIHdobyBhdCB0aGlzIHRpbWUgcGFydGljdWxhcmx5IHN0b29kIGluIG5lZWQgb2YgZW5jb3VyYWdlbWVudC4gU29vbiwgaG93ZXZlciwgc29tZSBtZW4gd2hvIHdlcmUgcm9hbWluZyBhYm91dCBhdCBuaWdodCBvbiBvdGhlciBlcnJhbmRzIGNhbWUgdXBvbiB0aGUgZG9lLCByZWNvZ25pemVkIGhlciBieSBoZXIgY29sb3VyLCBhbmQgY2F1Z2h0IGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBTZXJ0b3JpdXMgaGVhcmQgb2YgaXQgaGUgcHJvbWlzZWQgdG8gZ2l2ZSB0aGUgbWVuIGEgbGFyZ2Ugc3VtIG9mIG1vbmV5IGlmIHRoZXkgd291bGQgdGVsbCBubyBvbmUgb2YgdGhlIGNhcHR1cmUsIGFuZCBhZnRlciBjb25jZWFsaW5nIHRoZSBkb2UgYW5kIGFsbG93aW5nIHNldmVyYWwgZGF5cyB0byBwYXNzLCBoZSBjYW1lIGZvcnRoIHdpdGggYSBnbGFkIGNvdW50ZW5hbmNlIGFuZCBwcm9jZWVkZWQgdG8gdGhlIHRyaWJ1bmFsLCB0ZWxsaW5nIHRoZSBsZWFkZXJzIG9mIHRoZSBCYXJiYXJpYW5zIHRoYXQgdGhlIERlaXR5IHdhcyBmb3JldGVsbGluZyBoaW0gaW4gaGlzIGRyZWFtcyBzb21lIGdyZWF0IGdvb2QgZm9ydHVuZS4gVGhlbiBoZSBhc2NlbmRlZCB0aGUgdHJpYnVuYWwgYW5kIGJlZ2FuIHRvIGRlYWwgd2l0aCB0aGUgYXBwbGljYW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGUgZG9lIHdhcyByZWxlYXNlZCBieSBoZXIga2VlcGVycyBhdCBhIHBvaW50IGNsb3NlIGJ5LCBzcGllZCBTZXJ0b3JpdXMsIGFuZCBib3VuZGVkIGpveWZ1bGx5IHRvd2FyZHMgdGhlIHRyaWJ1bmFsLCBhbmQgc3RhbmRpbmcgYnkgaGlzIHNpZGUgcHV0IGhlciBoZWFkIGluIGhpcyBsYXAgYW5kIGxpY2tlZCBoaXMgaGFuZCwgYXMgc2hlIGhhZCBiZWVuIHdvbnQgdG8gZG8gYmVmb3JlLiBTZXJ0b3JpdXMgcmV0dXJuZWQgaGVyIGNhcmVzc2VzIGFwcHJvcHJpYXRlbHkgYW5kIGV2ZW4gc2hlZCBhIGZldyB0ZWFycywgd2hlcmV1cG9uIHRoZSBieXN0YW5kZXJzIHdlcmUgc3RydWNrIHdpdGggYW1hemVtZW50IGF0IGZpcnN0LCBhbmQgdGhlbiwgY29udmluY2VkIHRoYXQgU2VydG9yaXVzIHdhcyBhIG1hcnZlbGxvdXMgbWFuIGFuZCBkZWFyIHRvIHRoZSBnb2RzLCBlc2NvcnRlZCBoaW0gd2l0aCBzaG91dHMgYW5kIGNsYXBwaW5nIG9mIGhhbmRzIHRvIGhpcyBob21lLCBhbmQgd2VyZSBmdWxsIG9mIGNvbmZpZGVuY2UgYW5kIGdvb2QgaG9wZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIG5vdyBncmVhdGx5IGRpc2hlYXJ0ZW5lZCBiZWNhdXNlIHRoYXQgZG9lIG9mIGhpczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDExLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGk8L2JpYmw+Ljwvbm90ZT4gd2FzIG5vd2hlcmUgdG8gYmUgZm91bmQ7IGZvciBoZSB3YXMgdGh1cyBkZXByaXZlZCBvZiBhIHdvbmRlcmZ1bCBjb250cml2YW5jZSBmb3IgaW5mbHVlbmNpbmcgdGhlIEJhcmJhcmlhbnMsIHdobyBhdCB0aGlzIHRpbWUgcGFydGljdWxhcmx5IHN0b29kIGluIG5lZWQgb2YgZW5jb3VyYWdlbWVudC4gU29vbiwgaG93ZXZlciwgc29tZSBtZW4gd2hvIHdlcmUgcm9hbWluZyBhYm91dCBhdCBuaWdodCBvbiBvdGhlciBlcnJhbmRzIGNhbWUgdXBvbiB0aGUgZG9lLCByZWNvZ25pemVkIGhlciBieSBoZXIgY29sb3VyLCBhbmQgY2F1Z2h0IGhlci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxMS4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gU2VydG9yaXVzIGhlYXJkIG9mIGl0IGhlIHByb21pc2VkIHRvIGdpdmUgdGhlIG1lbiBhIGxhcmdlIHN1bSBvZiBtb25leSBpZiB0aGV5IHdvdWxkIHRlbGwgbm8gb25lIG9mIHRoZSBjYXB0dXJlLCBhbmQgYWZ0ZXIgY29uY2VhbGluZyB0aGUgZG9lIGFuZCBhbGxvd2luZyBzZXZlcmFsIGRheXMgdG8gcGFzcywgaGUgY2FtZSBmb3J0aCB3aXRoIGEgZ2xhZCBjb3VudGVuYW5jZSBhbmQgcHJvY2VlZGVkIHRvIHRoZSB0cmlidW5hbCwgdGVsbGluZyB0aGUgbGVhZGVycyBvZiB0aGUgQmFyYmFyaWFucyB0aGF0IHRoZSBEZWl0eSB3YXMgZm9yZXRlbGxpbmcgaGltIGluIGhpcyBkcmVhbXMgc29tZSBncmVhdCBnb29kIGZvcnR1bmUuIFRoZW4gaGUgYXNjZW5kZWQgdGhlIHRyaWJ1bmFsIGFuZCBiZWdhbiB0byBkZWFsIHdpdGggdGhlIGFwcGxpY2FudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlIGRvZSB3YXMgcmVsZWFzZWQgYnkgaGVyIGtlZXBlcnMgYXQgYSBwb2ludCBjbG9zZSBieSwgc3BpZWQgU2VydG9yaXVzLCBhbmQgYm91bmRlZCBqb3lmdWxseSB0b3dhcmRzIHRoZSB0cmlidW5hbCwgYW5kIHN0YW5kaW5nIGJ5IGhpcyBzaWRlIHB1dCBoZXIgaGVhZCBpbiBoaXMgbGFwIGFuZCBsaWNrZWQgaGlzIGhhbmQsIGFzIHNoZSBoYWQgYmVlbiB3b250IHRvIGRvIGJlZm9yZS4gU2VydG9yaXVzIHJldHVybmVkIGhlciBjYXJlc3NlcyBhcHByb3ByaWF0ZWx5IGFuZCBldmVuIHNoZWQgYSBmZXcgdGVhcnMsIHdoZXJldXBvbiB0aGUgYnlzdGFuZGVycyB3ZXJlIHN0cnVjayB3aXRoIGFtYXplbWVudCBhdCBmaXJzdCwgYW5kIHRoZW4sIGNvbnZpbmNlZCB0aGF0IFNlcnRvcml1cyB3YXMgYSBtYXJ2ZWxsb3VzIG1hbiBhbmQgZGVhciB0byB0aGUgZ29kcywgZXNjb3J0ZWQgaGltIHdpdGggc2hvdXRzIGFuZCBjbGFwcGluZyBvZiBoYW5kcyB0byBoaXMgaG9tZSwgYW5kIHdlcmUgZnVsbCBvZiBjb25maWRlbmNlIGFuZCBnb29kIGhvcGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgcGxhaW5zIG9mIFNhZ3VudHVtLCBhZnRlciBoZSBoYWQgcmVkdWNlZCBoaXMgZW5lbWllcyB0byB0aGUgZ3JlYXRlc3Qgc3RyYWl0cywgaGUgd2FzIGZvcmNlZCB0byBnaXZlIHRoZW0gYmF0dGxlIHdoZW4gdGhleSBjYW1lIG91dCBmb3IgcGx1bmRlciBhbmQgZm9yYWdlLiBCb3RoIHNpZGVzIGZvdWdodCBzcGxlbmRpZGx5LiBNZW1taXVzLCB0aGUgbW9zdCBjYXBhYmxlIG9mIFBvbXBleSdzIGdlbmVyYWxzLCBmZWxsIGluIHRoZSB0aGlja2VzdCBvZiB0aGUgYmF0dGxlLCBhbmQgU2VydG9yaXVzIHdhcyBjYXJyeWluZyBhbGwgYmVmb3JlIGhpbSwgYW5kLCB3aXRoIGdyZWF0IHNsYXVnaHRlciBvZiB0aGUgZW5lbXkgd2hvIHN0aWxsIGhlbGQgdG9nZXRoZXIsIHdhcyBmb3JjaW5nIGhpcyB3YXkgdG93YXJkcyBNZXRlbGx1cyBoaW1zZWxmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIE1ldGVsbHVzLCB3aG8gd2FzIGhvbGRpbmcgaGlzIGdyb3VuZCB3aXRoIGEgdmlnb3VyIHRoYXQgYmVsaWVkIGhpcyB5ZWFycywgYW5kIGZpZ2h0aW5nIGdsb3Jpb3VzbHksIHdhcyBzdHJ1Y2sgYnkgYSBzcGVhci4gQWxsIHRoZSBSb21hbnMgd2hvIHNhdyBvciBoZWFyZCBvZiB0aGlzIHdlcmUgc2VpemVkIHdpdGggc2hhbWUgYXQgdGhlIHRob3VnaHQgb2YgZGVzZXJ0aW5nIHRoZWlyIGNvbW1hbmRlciwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgd2VyZSBmaWxsZWQgd2l0aCByYWdlIGFnYWluc3QgdGhlIGVuZW15LiBTbywgYWZ0ZXIgdGhleSBoYWQgY292ZXJlZCBNZXRlbGx1cyB3aXRoIHRoZWlyIHNoaWVsZHMgYW5kIGNhcnJpZWQgaGltIG91dCBvZiBkYW5nZXIsIHRoZXkgc3RvdXRseSBkcm92ZSB0aGUgSWJlcmlhbnMgYmFjay4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VmljdG9yeSBoYWQgbm93IGNoYW5nZWQgc2lkZXMsIGFuZCB0aGVyZWZvcmUgU2VydG9yaXVzLCBjb250cml2aW5nIGEgc2FmZSByZXRyZWF0IGZvciBoaXMgbWVuIGFuZCBkZXZpc2luZyB0aGUgcXVpZXQgYXNzZW1ibHkgb2YgYW5vdGhlciBmb3JjZSBmb3IgaGltc2VsZiwgdG9vayByZWZ1Z2UgaW4gYSBzdHJvbmcgY2l0eSBhbW9uZyB0aGUgbW91bnRhaW5zLCBhbmQgdGhlcmUgYmVnYW4gdG8gcmVwYWlyIHRoZSB3YWxscyBhbmQgc3RyZW5ndGhlbiB0aGUgZ2F0ZXMsIGFsdGhvdWdoIGhpcyBwdXJwb3NlIHdhcyBhbnl0aGluZyByYXRoZXIgdGhhbiB0byBzdGFuZCBhIHNpZWdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgY29tcGxldGVseSBkZWNlaXZlZCBoaXMgZW5lbWllczsgZm9yIHRoZXkgc2F0IGRvd24gdG8gaW52ZXN0IGhpbSBhbmQgZXhwZWN0ZWQgdG8gdGFrZSB0aGUgcGxhY2Ugd2l0aG91dCBkaWZmaWN1bHR5LCBhbmQgdGh1cyBzdWZmZXJlZCB0aGUgQmFyYmFyaWFucyB3aG8gd2VyZSBpbiBmbGlnaHQgdG8gZXNjYXBlLCBhbmQgdG9vayBubyBoZWVkIG9mIHRoZSBmb3JjZSB0aGF0IHdhcyBiZWluZyBjb2xsZWN0ZWQgYW5ldyBmb3IgU2VydG9yaXVzLiBBbmQgY29sbGVjdGVkIGl0IHdhcywgYWZ0ZXIgU2VydG9yaXVzIGhhZCBzZW50IG9mZmljZXJzIHRvIHRoZSBjaXRpZXMsIHdpdGggb3JkZXJzIHRoYXQgYXMgc29vbiBhcyB0aGV5IGhhZCBhIGxhcmdlIGJvZHkgb2YgdHJvb3BzLCB0aGV5IHNob3VsZCBzZW5kIGEgbWVzc2VuZ2VyIHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgd2hlbiB0aGUgY2l0aWVzIHNlbnQgdGhlaXIgbWVzc2VuZ2VycywgaGUgY3V0IGhpcyB3YXkgdGhyb3VnaCB0aGUgZW5lbXkgd2l0aCBubyB0cm91YmxlIGFuZCBlZmZlY3RlZCBhIGp1bmN0aW9uIHdpdGggaGlzIG5ldyB0cm9vcHM7IGFuZCBzbyBvbmNlIG1vcmUgaGUgYWR2YW5jZWQgdXBvbiB0aGUgZW5lbXkgd2l0aCBsYXJnZSByZWluZm9yY2VtZW50cyBhbmQgYmVnYW4gdG8gY3V0IG9mZiB0aGVpciBsYW5kIHN1cHBsaWVzIGJ5IG1lYW5zIG9mIGFtYnVzY2FkZXMsIGZsYW5rIG1vdmVtZW50cywgYW5kIHN3aWZ0IG1hcmNoZXMgaW4gZXZlcnkgZGlyZWN0aW9uLCBhbmQgdGhlaXIgbWFyaXRpbWUgc3VwcGxpZXMgYnkgYmVzZXR0aW5nIHRoZSBjb2FzdCB3aXRoIHBpcmF0aWNhbCBjcmFmdDsgc28gdGhhdCB0aGUgUm9tYW4gZ2VuZXJhbHMgd2VyZSBjb21wZWxsZWQgdG8gc2VwYXJhdGUsIE1ldGVsbHVzIHJldGlyaW5nIGludG8gR2F1bCwgYW5kIFBvbXBleSBzcGVuZGluZyB0aGUgd2ludGVyIGFtb25nIHRoZSBWYWNjYWNpLiBIZXJlIGhlIHN1ZmZlcmVkIG11Y2ggZnJvbSBsYWNrIG9mIHN1cHBsaWVzLCBhbmQgd3JvdGUgdG8gdGhlIHNlbmF0ZSB0aGF0IGhlIHdvdWxkIGJyaW5nIGhpcyBhcm15IGhvbWUgdW5sZXNzIHRoZXkgc2VudCBoaW0gbW9uZXksIHNpbmNlIGhlIGhhZCBhbHJlYWR5IGV4aGF1c3RlZCBoaXMgb3duIHJlc291cmNlcyBpbiBoaXMgd2FyIGZvciB0aGUgZGVmZW5jZSBvZiBJdGFseS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiAyMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4eC4gMTwvYmlibD4uPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgdGhpcyBzdG9yeSB3YXMgcHJldmFsZW50IGluIFJvbWUsIHRoYXQgU2VydG9yaXVzIHdvdWxkIGNvbWUgYmFjayB0byBJdGFseSBiZWZvcmUgUG9tcGV5IGRpZC4gVG8gc3VjaCBzdHJhaXRzIHdlcmUgdGhlIGZpcnN0IGFuZCBhYmxlc3QgZ2VuZXJhbHMgb2YgdGhlIHRpbWUgcmVkdWNlZCBieSB0aGUgc2tpbGwgb2YgU2VydG9yaXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIHBsYWlucyBvZiBTYWd1bnR1bSwgYWZ0ZXIgaGUgaGFkIHJlZHVjZWQgaGlzIGVuZW1pZXMgdG8gdGhlIGdyZWF0ZXN0IHN0cmFpdHMsIGhlIHdhcyBmb3JjZWQgdG8gZ2l2ZSB0aGVtIGJhdHRsZSB3aGVuIHRoZXkgY2FtZSBvdXQgZm9yIHBsdW5kZXIgYW5kIGZvcmFnZS4gQm90aCBzaWRlcyBmb3VnaHQgc3BsZW5kaWRseS4gTWVtbWl1cywgdGhlIG1vc3QgY2FwYWJsZSBvZiBQb21wZXkncyBnZW5lcmFscywgZmVsbCBpbiB0aGUgdGhpY2tlc3Qgb2YgdGhlIGJhdHRsZSwgYW5kIFNlcnRvcml1cyB3YXMgY2FycnlpbmcgYWxsIGJlZm9yZSBoaW0sIGFuZCwgd2l0aCBncmVhdCBzbGF1Z2h0ZXIgb2YgdGhlIGVuZW15IHdobyBzdGlsbCBoZWxkIHRvZ2V0aGVyLCB3YXMgZm9yY2luZyBoaXMgd2F5IHRvd2FyZHMgTWV0ZWxsdXMgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gTWV0ZWxsdXMsIHdobyB3YXMgaG9sZGluZyBoaXMgZ3JvdW5kIHdpdGggYSB2aWdvdXIgdGhhdCBiZWxpZWQgaGlzIHllYXJzLCBhbmQgZmlnaHRpbmcgZ2xvcmlvdXNseSwgd2FzIHN0cnVjayBieSBhIHNwZWFyLiBBbGwgdGhlIFJvbWFucyB3aG8gc2F3IG9yIGhlYXJkIG9mIHRoaXMgd2VyZSBzZWl6ZWQgd2l0aCBzaGFtZSBhdCB0aGUgdGhvdWdodCBvZiBkZXNlcnRpbmcgdGhlaXIgY29tbWFuZGVyLCBhbmQgYXQgdGhlIHNhbWUgdGltZSB3ZXJlIGZpbGxlZCB3aXRoIHJhZ2UgYWdhaW5zdCB0aGUgZW5lbXkuIFNvLCBhZnRlciB0aGV5IGhhZCBjb3ZlcmVkIE1ldGVsbHVzIHdpdGggdGhlaXIgc2hpZWxkcyBhbmQgY2FycmllZCBoaW0gb3V0IG9mIGRhbmdlciwgdGhleSBzdG91dGx5IGRyb3ZlIHRoZSBJYmVyaWFucyBiYWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlZpY3RvcnkgaGFkIG5vdyBjaGFuZ2VkIHNpZGVzLCBhbmQgdGhlcmVmb3JlIFNlcnRvcml1cywgY29udHJpdmluZyBhIHNhZmUgcmV0cmVhdCBmb3IgaGlzIG1lbiBhbmQgZGV2aXNpbmcgdGhlIHF1aWV0IGFzc2VtYmx5IG9mIGFub3RoZXIgZm9yY2UgZm9yIGhpbXNlbGYsIHRvb2sgcmVmdWdlIGluIGEgc3Ryb25nIGNpdHkgYW1vbmcgdGhlIG1vdW50YWlucywgYW5kIHRoZXJlIGJlZ2FuIHRvIHJlcGFpciB0aGUgd2FsbHMgYW5kIHN0cmVuZ3RoZW4gdGhlIGdhdGVzLCBhbHRob3VnaCBoaXMgcHVycG9zZSB3YXMgYW55dGhpbmcgcmF0aGVyIHRoYW4gdG8gc3RhbmQgYSBzaWVnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSBjb21wbGV0ZWx5IGRlY2VpdmVkIGhpcyBlbmVtaWVzOyBmb3IgdGhleSBzYXQgZG93biB0byBpbnZlc3QgaGltIGFuZCBleHBlY3RlZCB0byB0YWtlIHRoZSBwbGFjZSB3aXRob3V0IGRpZmZpY3VsdHksIGFuZCB0aHVzIHN1ZmZlcmVkIHRoZSBCYXJiYXJpYW5zIHdobyB3ZXJlIGluIGZsaWdodCB0byBlc2NhcGUsIGFuZCB0b29rIG5vIGhlZWQgb2YgdGhlIGZvcmNlIHRoYXQgd2FzIGJlaW5nIGNvbGxlY3RlZCBhbmV3IGZvciBTZXJ0b3JpdXMuIEFuZCBjb2xsZWN0ZWQgaXQgd2FzLCBhZnRlciBTZXJ0b3JpdXMgaGFkIHNlbnQgb2ZmaWNlcnMgdG8gdGhlIGNpdGllcywgd2l0aCBvcmRlcnMgdGhhdCBhcyBzb29uIGFzIHRoZXkgaGFkIGEgbGFyZ2UgYm9keSBvZiB0cm9vcHMsIHRoZXkgc2hvdWxkIHNlbmQgYSBtZXNzZW5nZXIgdG8gaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gdGhlIGNpdGllcyBzZW50IHRoZWlyIG1lc3NlbmdlcnMsIGhlIGN1dCBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15IHdpdGggbm8gdHJvdWJsZSBhbmQgZWZmZWN0ZWQgYSBqdW5jdGlvbiB3aXRoIGhpcyBuZXcgdHJvb3BzOyBhbmQgc28gb25jZSBtb3JlIGhlIGFkdmFuY2VkIHVwb24gdGhlIGVuZW15IHdpdGggbGFyZ2UgcmVpbmZvcmNlbWVudHMgYW5kIGJlZ2FuIHRvIGN1dCBvZmYgdGhlaXIgbGFuZCBzdXBwbGllcyBieSBtZWFucyBvZiBhbWJ1c2NhZGVzLCBmbGFuayBtb3ZlbWVudHMsIGFuZCBzd2lmdCBtYXJjaGVzIGluIGV2ZXJ5IGRpcmVjdGlvbiwgYW5kIHRoZWlyIG1hcml0aW1lIHN1cHBsaWVzIGJ5IGJlc2V0dGluZyB0aGUgY29hc3Qgd2l0aCBwaXJhdGljYWwgY3JhZnQ7IHNvIHRoYXQgdGhlIFJvbWFuIGdlbmVyYWxzIHdlcmUgY29tcGVsbGVkIHRvIHNlcGFyYXRlLCBNZXRlbGx1cyByZXRpcmluZyBpbnRvIEdhdWwsIGFuZCBQb21wZXkgc3BlbmRpbmcgdGhlIHdpbnRlciBhbW9uZyB0aGUgVmFjY2FjaS4gSGVyZSBoZSBzdWZmZXJlZCBtdWNoIGZyb20gbGFjayBvZiBzdXBwbGllcywgYW5kIHdyb3RlIHRvIHRoZSBzZW5hdGUgdGhhdCBoZSB3b3VsZCBicmluZyBoaXMgYXJteSBob21lIHVubGVzcyB0aGV5IHNlbnQgaGltIG1vbmV5LCBzaW5jZSBoZSBoYWQgYWxyZWFkeSBleGhhdXN0ZWQgaGlzIG93biByZXNvdXJjZXMgaW4gaGlzIHdhciBmb3IgdGhlIGRlZmVuY2Ugb2YgSXRhbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHguIDE8L2JpYmw+Ljwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHguIDE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4eC4gMTwvdHJhbnNsYXRpb24+"
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgdGhpcyBzdG9yeSB3YXMgcHJldmFsZW50IGluIFJvbWUsIHRoYXQgU2VydG9yaXVzIHdvdWxkIGNvbWUgYmFjayB0byBJdGFseSBiZWZvcmUgUG9tcGV5IGRpZC4gVG8gc3VjaCBzdHJhaXRzIHdlcmUgdGhlIGZpcnN0IGFuZCBhYmxlc3QgZ2VuZXJhbHMgb2YgdGhlIHRpbWUgcmVkdWNlZCBieSB0aGUgc2tpbGwgb2YgU2VydG9yaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgTWV0ZWxsdXMgYWxzbyBtYWRlIGl0IGNsZWFyIHRoYXQgaGUgd2FzIGFmcmFpZCBvZiBTZXJ0b3JpdXMgYW5kIGNvbnNpZGVyZWQgaGltIGEgZ3JlYXQgbGVhZGVyLiBGb3IgaGUgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCB0byBhbnkgUm9tYW4gd2hvIHNob3VsZCBraWxsIFNlcnRvcml1cyBoZSB3b3VsZCBnaXZlIGEgaHVuZHJlZCB0YWxlbnRzIG9mIHNpbHZlciBhbmQgdHdlbnR5IHRob3VzYW5kIGFjcmVzIG9mIGxhbmQsIGFuZCB0byBhbnkgZXhpbGUsIGZyZWVkb20gdG8gcmV0dXJuIHRvIFJvbWU7IGltcGx5aW5nIGhpcyBkZXNwYWlyIG9mIG9wZW5seSBkZWZlYXRpbmcgdGhlIG1hbiBieSB0aGlzIGF0dGVtcHQgdG8gcHVyY2hhc2UgaGlzIGJldHJheWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYWZ0ZXIgYSB2aWN0b3J5IHdoaWNoIGhlIG9uY2Ugd29uIG92ZXIgU2VydG9yaXVzIGhlIHdhcyBzbyBlbGF0ZWQgYW5kIGRlbGlnaHRlZCB3aXRoIGhpcyBzdWNjZXNzIHRoYXQgaGlzIHNvbGRpZXJzIHNhbHV0ZWQgaGltIGFzIEltcGVyYXRvciBhbmQgdGhlIGNpdGllcyBjZWxlYnJhdGVkIGhpcyB2aXNpdHMgdG8gdGhlbSB3aXRoIGFsdGFycyBhbmQgc2FjcmlmaWNlcy4gTmF5LCBpdCBpcyBzYWlkIHRoYXQgaGUgc3VmZmVyZWQgd3JlYXRocyB0byBiZSBib3VuZCB1cG9uIGhpcyBoZWFkIGFuZCBhY2NlcHRlZCBpbnZpdGF0aW9ucyB0byBzdGF0ZWx5IGJhbnF1ZXRzLCBhdCB3aGljaCBoZSB3b3JlIGEgdHJpdW1waGFsIHJvYmUgYXMgaGUgZHJhbmsgaGlzIHdpbmUsIHdoaWxlIFZpY3RvcmllcywgbWFkZSB0byBtb3ZlIGJ5IG1hY2hpbmVyeSwgZGVzY2VuZGVkIGFuZCBkaXN0cmlidXRlZCBnb2xkZW4gdHJvcGhpZXMgYW5kIHdyZWF0aHMsIGFuZCBjaG9pcnMgb2YgYm95cyBhbmQgd29tZW4gc2FuZyBoeW1ucyBvZiB2aWN0b3J5IGluIGhpcyBwcmFpc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIGl0IHdhcyBuYXR1cmFsIHRoYXQgbWVuIHNob3VsZCBsYXVnaCBhdCBoaW0sIHNpbmNlLCB3aGlsZSBjYWxsaW5nIFNlcnRvcml1cyBhIHJ1bmF3YXkgc2xhdmUgb2YgU3VsbGEgYW5kIGEgcmVtbmFudCBvZiB0aGUgcm91dGVkIHBhcnR5IG9mIENhcmJvLCBoZSB3YXMgc28gcHVmZmVkIHVwIHdpdGggcHJpZGUgYW5kIG92ZXJqb3llZCBtZXJlbHkgYmVjYXVzZSBoZSBoYWQgd29uIGFuIGFkdmFudGFnZSBvdmVyIFNlcnRvcml1cyBhbmQgU2VydG9yaXVzIGhhZCByZXRpcmVkIGJlZm9yZSBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIE1ldGVsbHVzIGFsc28gbWFkZSBpdCBjbGVhciB0aGF0IGhlIHdhcyBhZnJhaWQgb2YgU2VydG9yaXVzIGFuZCBjb25zaWRlcmVkIGhpbSBhIGdyZWF0IGxlYWRlci4gRm9yIGhlIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgdG8gYW55IFJvbWFuIHdobyBzaG91bGQga2lsbCBTZXJ0b3JpdXMgaGUgd291bGQgZ2l2ZSBhIGh1bmRyZWQgdGFsZW50cyBvZiBzaWx2ZXIgYW5kIHR3ZW50eSB0aG91c2FuZCBhY3JlcyBvZiBsYW5kLCBhbmQgdG8gYW55IGV4aWxlLCBmcmVlZG9tIHRvIHJldHVybiB0byBSb21lOyBpbXBseWluZyBoaXMgZGVzcGFpciBvZiBvcGVubHkgZGVmZWF0aW5nIHRoZSBtYW4gYnkgdGhpcyBhdHRlbXB0IHRvIHB1cmNoYXNlIGhpcyBiZXRyYXlhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhZnRlciBhIHZpY3Rvcnkgd2hpY2ggaGUgb25jZSB3b24gb3ZlciBTZXJ0b3JpdXMgaGUgd2FzIHNvIGVsYXRlZCBhbmQgZGVsaWdodGVkIHdpdGggaGlzIHN1Y2Nlc3MgdGhhdCBoaXMgc29sZGllcnMgc2FsdXRlZCBoaW0gYXMgSW1wZXJhdG9yIGFuZCB0aGUgY2l0aWVzIGNlbGVicmF0ZWQgaGlzIHZpc2l0cyB0byB0aGVtIHdpdGggYWx0YXJzIGFuZCBzYWNyaWZpY2VzLiBOYXksIGl0IGlzIHNhaWQgdGhhdCBoZSBzdWZmZXJlZCB3cmVhdGhzIHRvIGJlIGJvdW5kIHVwb24gaGlzIGhlYWQgYW5kIGFjY2VwdGVkIGludml0YXRpb25zIHRvIHN0YXRlbHkgYmFucXVldHMsIGF0IHdoaWNoIGhlIHdvcmUgYSB0cml1bXBoYWwgcm9iZSBhcyBoZSBkcmFuayBoaXMgd2luZSwgd2hpbGUgVmljdG9yaWVzLCBtYWRlIHRvIG1vdmUgYnkgbWFjaGluZXJ5LCBkZXNjZW5kZWQgYW5kIGRpc3RyaWJ1dGVkIGdvbGRlbiB0cm9waGllcyBhbmQgd3JlYXRocywgYW5kIGNob2lycyBvZiBib3lzIGFuZCB3b21lbiBzYW5nIGh5bW5zIG9mIHZpY3RvcnkgaW4gaGlzIHByYWlzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIGl0IHdhcyBuYXR1cmFsIHRoYXQgbWVuIHNob3VsZCBsYXVnaCBhdCBoaW0sIHNpbmNlLCB3aGlsZSBjYWxsaW5nIFNlcnRvcml1cyBhIHJ1bmF3YXkgc2xhdmUgb2YgU3VsbGEgYW5kIGEgcmVtbmFudCBvZiB0aGUgcm91dGVkIHBhcnR5IG9mIENhcmJvLCBoZSB3YXMgc28gcHVmZmVkIHVwIHdpdGggcHJpZGUgYW5kIG92ZXJqb3llZCBtZXJlbHkgYmVjYXVzZSBoZSBoYWQgd29uIGFuIGFkdmFudGFnZSBvdmVyIFNlcnRvcml1cyBhbmQgU2VydG9yaXVzIGhhZCByZXRpcmVkIGJlZm9yZSBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IHRoZSBtYWduYW5pbWl0eSBvZiBTZXJ0b3JpdXMgc2hvd2VkIGl0c2VsZiwgZmlyc3RseSwgaW4gaGlzIGdpdmluZyB0aGUgbmFtZSBvZiBzZW5hdGUgdG8gdGhlIHNlbmF0b3JzIHdobyBmbGVkIGZyb20gUm9tZSBhbmQgam9pbmVkIGhpcyBjYXVzZSwgYXBwb2ludGluZyBxdWFlc3RvcnMgYW5kIHByYWV0b3JzIGZyb20gdGhlaXIgbnVtYmVyLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYWtpbmcgYWxsIHN1Y2ggYXJyYW5nZW1lbnRzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgY3VzdG9tcyBvZiBoaXMgY291bnRyeTsgYW5kLCBzZWNvbmRseSwgaW4gaGlzIHVzaW5nIHRoZSBhcm1zLCB3ZWFsdGgsIGFuZCBjaXRpZXMgb2YgdGhlIEliZXJpYW5zIHdpdGhvdXQgZXZlbiBwcmV0ZW5kaW5nIHRvIHlpZWxkIHRvIHRoZSBJYmVyaWFucyB0aGVtc2VsdmVzIGEgcG9ydGlvbiBvZiB0aGUgc3VwcmVtZSBwb3dlciwgYnV0IHNlbGVjdGluZyBSb21hbiBnZW5lcmFscyBhbmQgY29tbWFuZGVycyBvdmVyIHRoZW0sIGZlZWxpbmcgdGhhdCBoZSB3YXMgcmVjb3ZlcmluZyBmcmVlZG9tIGZvciB0aGUgUm9tYW5zLCBhbmQgbm90IHN0cmVuZ3RoZW5pbmcgdGhlIGluaGFiaXRhbnRzIGFnYWluc3QgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdhcyBhIG1hbiB3aG8gbG92ZWQgaGlzIGNvdW50cnkgYW5kIGhhZCBhIHN0cm9uZyBkZXNpcmUgdG8gcmV0dXJuIGhvbWUgZnJvbSBleGlsZS4gQW5kIHlldCBpbiBoaXMgbWlzZm9ydHVuZXMgaGUgcGxheWVkIGEgYnJhdmUgbWFuJ3MgcGFydCBhbmQgd291bGQgbm90IGh1bWJsZSBoaW1zZWxmIGF0IGFsbCBiZWZvcmUgaGlzIGVuZW1pZXM7IHdoaWxlIGFzIGEgdmljdG9yIGhlIHdvdWxkIHNlbmQgdG8gTWV0ZWxsdXMgYW5kIFBvbXBleSBleHByZXNzaW5nIGhpcyByZWFkaW5lc3MgdG8gbGF5IGRvd24gaGlzIGFybXMgYW5kIGxlYWQgdGhlIGxpZmUgb2YgYSBwcml2YXRlIGNpdGl6ZW4gaWYgaGUgY291bGQgZ2V0IHRoZSBwcml2aWxlZ2Ugb2YgcmV0dXJuaW5nIGhvbWUsIHNpbmNlLCBhcyBoZSBzYWlkLCBoZSBwcmVmZXJyZWQgdG8gbGl2ZSBpbiBSb21lIGFzIGhlciBtZWFuZXN0IGNpdGl6ZW4gcmF0aGVyIHRoYW4gdG8gbGl2ZSBpbiBleGlsZSBmcm9tIGhpcyBjb3VudHJ5IGFuZCBiZSBjYWxsZWQgc3VwcmVtZSBydWxlciBvZiBhbGwgdGhlIHJlc3Qgb2YgdGhlIHdvcmxkIHRvZ2V0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYWtpbmcgYWxsIHN1Y2ggYXJyYW5nZW1lbnRzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgY3VzdG9tcyBvZiBoaXMgY291bnRyeTsgYW5kLCBzZWNvbmRseSwgaW4gaGlzIHVzaW5nIHRoZSBhcm1zLCB3ZWFsdGgsIGFuZCBjaXRpZXMgb2YgdGhlIEliZXJpYW5zIHdpdGhvdXQgZXZlbiBwcmV0ZW5kaW5nIHRvIHlpZWxkIHRvIHRoZSBJYmVyaWFucyB0aGVtc2VsdmVzIGEgcG9ydGlvbiBvZiB0aGUgc3VwcmVtZSBwb3dlciwgYnV0IHNlbGVjdGluZyBSb21hbiBnZW5lcmFscyBhbmQgY29tbWFuZGVycyBvdmVyIHRoZW0sIGZlZWxpbmcgdGhhdCBoZSB3YXMgcmVjb3ZlcmluZyBmcmVlZG9tIGZvciB0aGUgUm9tYW5zLCBhbmQgbm90IHN0cmVuZ3RoZW5pbmcgdGhlIGluaGFiaXRhbnRzIGFnYWluc3QgdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgYSBtYW4gd2hvIGxvdmVkIGhpcyBjb3VudHJ5IGFuZCBoYWQgYSBzdHJvbmcgZGVzaXJlIHRvIHJldHVybiBob21lIGZyb20gZXhpbGUuIEFuZCB5ZXQgaW4gaGlzIG1pc2ZvcnR1bmVzIGhlIHBsYXllZCBhIGJyYXZlIG1hbidzIHBhcnQgYW5kIHdvdWxkIG5vdCBodW1ibGUgaGltc2VsZiBhdCBhbGwgYmVmb3JlIGhpcyBlbmVtaWVzOyB3aGlsZSBhcyBhIHZpY3RvciBoZSB3b3VsZCBzZW5kIHRvIE1ldGVsbHVzIGFuZCBQb21wZXkgZXhwcmVzc2luZyBoaXMgcmVhZGluZXNzIHRvIGxheSBkb3duIGhpcyBhcm1zIGFuZCBsZWFkIHRoZSBsaWZlIG9mIGEgcHJpdmF0ZSBjaXRpemVuIGlmIGhlIGNvdWxkIGdldCB0aGUgcHJpdmlsZWdlIG9mIHJldHVybmluZyBob21lLCBzaW5jZSwgYXMgaGUgc2FpZCwgaGUgcHJlZmVycmVkIHRvIGxpdmUgaW4gUm9tZSBhcyBoZXIgbWVhbmVzdCBjaXRpemVuIHJhdGhlciB0aGFuIHRvIGxpdmUgaW4gZXhpbGUgZnJvbSBoaXMgY291bnRyeSBhbmQgYmUgY2FsbGVkIHN1cHJlbWUgcnVsZXIgb2YgYWxsIHRoZSByZXN0IG9mIHRoZSB3b3JsZCB0b2dldGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2UgYXJlIHRvbGQgdGhhdCBoaXMgZGVzaXJlIGZvciBoaXMgbmF0aXZlIGNvdW50cnkgd2FzIGR1ZSBpbiBsYXJnZSBtZWFzdXJlIHRvIGhpcyBhdHRhY2htZW50IHRvIGhpcyBtb3RoZXIsIGJ5IHdob20gaGUgd2FzIHJlYXJlZCBhZnRlciBoaXMgZmF0aGVyJ3MgZGVhdGgsIGFuZCB0byB3aG9tIGhlIHdhcyBlbnRpcmVseSBkZXZvdGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMi4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpLiAxPC9iaWJsPi48L25vdGU+IFdoZW4gaGlzIGZyaWVuZHMgaW4gU3BhaW4gd2VyZSBpbnZpdGluZyBoaW0gdG8gdGFrZSB0aGUgbGVhZGVyc2hpcCB0aGVyZSwgaGUgbGVhcm5lZCBvZiB0aGUgZGVhdGggb2YgaGlzIG1vdGhlciwgYW5kIGFsbW9zdCBkaWVkIG9mIGdyaWVmLiBGb3Igc2V2ZW4gZGF5cyBoZSBsYXkgcHJvc3RyYXRlIGluIGhpcyB0ZW50IHdpdGhvdXQgZ2l2aW5nIG91dCBhIHdhdGNod29yZCBvciBiZWluZyBzZWVuIGJ5IGFueSBvZiBoaXMgZnJpZW5kcywgYW5kIGl0IHdhcyBvbmx5IHdpdGggZGlmZmljdWx0eSB0aGF0IGhpcyBmZWxsb3ctZ2VuZXJhbHMgYW5kIHRoZSBtZW4gb2YgbGlrZSByYW5rIHdpdGggaGltIHdobyBzdXJyb3VuZGVkIGhpcyB0ZW50IGNvdWxkIGZvcmNlIGhpbSB0byBjb21lIGZvcnRoIGFuZCBtZWV0IHRoZSBzb2xkaWVycyBhbmQgdGFrZSBwYXJ0IGluIHRoZWlyIGVudGVycHJpc2VzLCB3aGljaCB3ZXJlIG1vdmluZyBvbiB3ZWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgbWFueSBwZW9wbGUgd2VyZSBsZWQgdG8gdGhpbmsgdGhhdCBoZSB3YXMgYSBtYW4gb2YgZ2VudGxlIHRlbXBlciBhbmQgbmF0dXJhbGx5IGRpc3Bvc2VkIHRvIGEgcXVpZXQgbGlmZSwgYnV0IHdhcyBwcmFjdGljYWxseSBmb3JjZWQgYWdhaW5zdCBoaXMgd2lzaGVzIGludG8gdGhlIGNhcmVlciBvZiBhIHNvbGRpZXIsIHdoZXJlLCBub3QgYWNoaWV2aW5nIHNhZmV0eSwgYnV0IGJlaW5nIGRyaXZlbiBieSBoaXMgZW5lbWllcyB0byBoYXZlIHJlY291cnNlIHRvIGFybXMsIGhlIGVuY29tcGFzc2VkIGhpbXNlbGYgd2l0aCB3YXIgYXMgYSBuZWNlc3NhcnkgcHJvdGVjdGlvbiB0byBoaXMgcGVyc29uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkIHRoYXQgaGlzIGRlc2lyZSBmb3IgaGlzIG5hdGl2ZSBjb3VudHJ5IHdhcyBkdWUgaW4gbGFyZ2UgbWVhc3VyZSB0byBoaXMgYXR0YWNobWVudCB0byBoaXMgbW90aGVyLCBieSB3aG9tIGhlIHdhcyByZWFyZWQgYWZ0ZXIgaGlzIGZhdGhlcidzIGRlYXRoLCBhbmQgdG8gd2hvbSBoZSB3YXMgZW50aXJlbHkgZGV2b3RlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAyLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWkuIDE8L2JpYmw+Ljwvbm90ZT4gV2hlbiBoaXMgZnJpZW5kcyBpbiBTcGFpbiB3ZXJlIGludml0aW5nIGhpbSB0byB0YWtlIHRoZSBsZWFkZXJzaGlwIHRoZXJlLCBoZSBsZWFybmVkIG9mIHRoZSBkZWF0aCBvZiBoaXMgbW90aGVyLCBhbmQgYWxtb3N0IGRpZWQgb2YgZ3JpZWYuIEZvciBzZXZlbiBkYXlzIGhlIGxheSBwcm9zdHJhdGUgaW4gaGlzIHRlbnQgd2l0aG91dCBnaXZpbmcgb3V0IGEgd2F0Y2h3b3JkIG9yIGJlaW5nIHNlZW4gYnkgYW55IG9mIGhpcyBmcmllbmRzLCBhbmQgaXQgd2FzIG9ubHkgd2l0aCBkaWZmaWN1bHR5IHRoYXQgaGlzIGZlbGxvdy1nZW5lcmFscyBhbmQgdGhlIG1lbiBvZiBsaWtlIHJhbmsgd2l0aCBoaW0gd2hvIHN1cnJvdW5kZWQgaGlzIHRlbnQgY291bGQgZm9yY2UgaGltIHRvIGNvbWUgZm9ydGggYW5kIG1lZXQgdGhlIHNvbGRpZXJzIGFuZCB0YWtlIHBhcnQgaW4gdGhlaXIgZW50ZXJwcmlzZXMsIHdoaWNoIHdlcmUgbW92aW5nIG9uIHdlbGwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMi4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpLiAxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['22.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBtYW55IHBlb3BsZSB3ZXJlIGxlZCB0byB0aGluayB0aGF0IGhlIHdhcyBhIG1hbiBvZiBnZW50bGUgdGVtcGVyIGFuZCBuYXR1cmFsbHkgZGlzcG9zZWQgdG8gYSBxdWlldCBsaWZlLCBidXQgd2FzIHByYWN0aWNhbGx5IGZvcmNlZCBhZ2FpbnN0IGhpcyB3aXNoZXMgaW50byB0aGUgY2FyZWVyIG9mIGEgc29sZGllciwgd2hlcmUsIG5vdCBhY2hpZXZpbmcgc2FmZXR5LCBidXQgYmVpbmcgZHJpdmVuIGJ5IGhpcyBlbmVtaWVzIHRvIGhhdmUgcmVjb3Vyc2UgdG8gYXJtcywgaGUgZW5jb21wYXNzZWQgaGltc2VsZiB3aXRoIHdhciBhcyBhIG5lY2Vzc2FyeSBwcm90ZWN0aW9uIHRvIGhpcyBwZXJzb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBuZWdvdGlhdGlvbnMgd2l0aCBNaXRocmlkYXRlcyBhbHNvIGdhdmUgcHJvb2Ygb2YgaGlzIG1hZ25hbmltaXR5LiBGb3IgTWl0aHJpZGF0ZXMsIGFmdGVyIHRoZSBmYWxsIHdoaWNoIFN1bGxhIGdhdmUgaGltLCByb3NlIHVwLCBhcyBpdCB3ZXJlLCBmb3IgYW5vdGhlciB3cmVzdGxpbmcgYm91dCBhbmQgdHJpZWQgb25jZSBtb3JlIHRvIGdldCB0aGUgcHJvdmluY2Ugb2YgQXNpYSBpbnRvIGhpcyBwb3dlci4gQXQgdGhpcyB0aW1lLCB0b28sIHRoZSBmYW1lIG9mIFNlcnRvcml1cyB3YXMgYWxyZWFkeSBncmVhdCBhbmQgd2FzIHRyYXZlbGxpbmcgZXZlcnkgd2hpdGhlciwgYW5kIHNhaWxvcnMgZnJvbSB0aGUgd2VzdCBoYWQgZmlsbGVkIHRoZSBraW5nZG9tIG9mIFBvbnR1cyBmdWxsIG9mIHRoZSB0YWxlcyBhYm91dCBoaW0sIGxpa2Ugc28gbWFueSBmb3JlaWduIHdhcmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NaXRocmlkYXRlcyB3YXMgdGhlcmVmb3JlIGVhZ2VyIHRvIHNlbmQgYW4gZW1iYXNzeSB0byBoaW0sIGFuZCB3YXMgaW5jaXRlZCB0aGVyZXRvIG1vc3Qgb2YgYWxsIGJ5IHRoZSBmb29saXNoIGV4YWdnZXJhdGlvbnMgb2YgaGlzIGZsYXR0ZXJlcnMuIFRoZXNlIGxpa2VuZWQgU2VydG9yaXVzIHRvIEhhbm5pYmFsIGFuZCBNaXRocmlkYXRlcyB0byBQeXJyaHVzLCBhbmQgZGVjbGFyZWQgdGhhdCB0aGUgUm9tYW5zLCBhdHRhY2tlZCBvbiBib3RoIHNpZGVzLCBjb3VsZCBub3QgaG9sZCBvdXQgYWdhaW5zdCB0d28gc3VjaCBuYXR1cmVzIGFuZCBmb3JjZXMgY29tYmluZWQsIHdoZW4gdGhlIGFibGVzdCBvZiBnZW5lcmFscyB3YXMgaW4gYWxsaWFuY2Ugd2l0aCB0aGUgZ3JlYXRlc3Qgb2Yga2luZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1pdGhyaWRhdGVzIHNlbnQgZW52b3lzIHRvIEliZXJpYSBjYXJyeWluZyBsZXR0ZXJzIGFuZCBvcmFsIHByb3Bvc2l0aW9ucyB0byBTZXJ0b3JpdXMsIHRoZSBwdXJwb3J0IG9mIHdoaWNoIHdhcyB0aGF0IE1pdGhyaWRhdGVzIGZvciBoaXMgcGFydCBwcm9taXNlZCB0byBmdXJuaXNoIG1vbmV5IGFuZCBzaGlwcyBmb3IgdGhlIHdhciwgYnV0IGRlbWFuZGVkIHRoYXQgU2VydG9yaXVzIGNvbmZpcm0gaGltIGluIHRoZSBwb3NzZXNzaW9uIG9mIHRoZSB3aG9sZSBvZiBBc2lhLCB3aGljaCBoZSBoYWQgeWllbGRlZCB0byB0aGUgUm9tYW5zIGJ5IHZpcnR1ZSBvZiB0aGUgdHJlYXRpZXMgbWFkZSB3aXRoIFN1bGxhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TZXJ0b3JpdXMgYXNzZW1ibGVkIGEgY291bmNpbCwgd2hpY2ggaGUgY2FsbGVkIGEgc2VuYXRlLCBhbmQgaGVyZSB0aGUgcmVzdCB1cmdlZCBoaW0gdG8gYWNjZXB0IHRoZSBraW5nJ3MgcHJvcG9zYWxzIGFuZCBiZSB3ZWxsIGNvbnRlbnQgd2l0aCB0aGVtOyBmb3IgdGhleSB3ZXJlIGFza2VkIHRvIGdyYW50IGEgbmFtZSBhbmQgYW4gZW1wdHkgdGl0bGUgdG8gd2hhdCB3YXMgbm90IGluIHRoZWlyIHBvc3Nlc3Npb24sIGFuZCB3b3VsZCByZWNlaXZlIHRoZXJlZm9yIHRoYXQgb2Ygd2hpY2ggdGhleSBzdG9vZCBtb3N0IGluIG5lZWQuIFNlcnRvcml1cywgaG93ZXZlciwgd291bGQgbm90IGNvbnNlbnQgdG8gdGhpcy4gSGUgc2FpZCBoZSBoYWQgbm8gb2JqZWN0aW9uIHRvIE1pdGhyaWRhdGVzIHRha2luZyBCaXRoeW5pYSBhbmQgQ2FwcGFkb2NpYSwgY291bnRyaWVzIHVzZWQgdG8ga2luZ3MgYW5kIG9mIG5vIGNvbmNlcm4gd2hhdGV2ZXIgdG8gdGhlIFJvbWFuczsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGEgcHJvdmluY2Ugd2hpY2ggTWl0aHJpZGF0ZXMgaGFkIHRha2VuIGF3YXkgYW5kIGhlbGQgd2hlbiBpdCBiZWxvbmdlZCBpbiB0aGUganVzdGVzdCBtYW5uZXIgdG8gdGhlIFJvbWFucywgZnJvbSB3aGljaCBoZSBoYWQgYmVlbiBkcml2ZW4gYnkgRmltYnJpYSBpbiB3YXIsIGFuZCB3aGljaCBoZSBoYWQgcmVub3VuY2VkIGJ5IHRyZWF0eSB3aXRoIFN1bGxhLOKAlHRoaXMgcHJvdmluY2UgU2VydG9yaXVzIHNhaWQgaGUgd291bGQgbm90IHN1ZmZlciB0byBiZWNvbWUgdGhlIGtpbmcncyBhZ2FpbjsgZm9yIHRoZSBSb21hbiBzdGF0ZSBtdXN0IGJlIGluY3JlYXNlZCBieSBoaXMgZXhlcmNpc2Ugb2YgcG93ZXIsIGFuZCBoZSBtdXN0IG5vdCBleGVyY2lzZSBwb3dlciBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgc3RhdGUuIEZvciB0byBhIG1hbiBvZiBub2JsZSBzcGlyaXQgdmljdG9yeSBpcyB0byBiZSBkZXNpcmVkIGlmIGl0IGNvbWVzIHdpdGggaG9ub3VyLCBidXQgd2l0aCBzaGFtZSBub3QgZXZlbiBsaWZlIGl0c2VsZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIG5lZ290aWF0aW9ucyB3aXRoIE1pdGhyaWRhdGVzIGFsc28gZ2F2ZSBwcm9vZiBvZiBoaXMgbWFnbmFuaW1pdHkuIEZvciBNaXRocmlkYXRlcywgYWZ0ZXIgdGhlIGZhbGwgd2hpY2ggU3VsbGEgZ2F2ZSBoaW0sIHJvc2UgdXAsIGFzIGl0IHdlcmUsIGZvciBhbm90aGVyIHdyZXN0bGluZyBib3V0IGFuZCB0cmllZCBvbmNlIG1vcmUgdG8gZ2V0IHRoZSBwcm92aW5jZSBvZiBBc2lhIGludG8gaGlzIHBvd2VyLiBBdCB0aGlzIHRpbWUsIHRvbywgdGhlIGZhbWUgb2YgU2VydG9yaXVzIHdhcyBhbHJlYWR5IGdyZWF0IGFuZCB3YXMgdHJhdmVsbGluZyBldmVyeSB3aGl0aGVyLCBhbmQgc2FpbG9ycyBmcm9tIHRoZSB3ZXN0IGhhZCBmaWxsZWQgdGhlIGtpbmdkb20gb2YgUG9udHVzIGZ1bGwgb2YgdGhlIHRhbGVzIGFib3V0IGhpbSwgbGlrZSBzbyBtYW55IGZvcmVpZ24gd2FyZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1pdGhyaWRhdGVzIHdhcyB0aGVyZWZvcmUgZWFnZXIgdG8gc2VuZCBhbiBlbWJhc3N5IHRvIGhpbSwgYW5kIHdhcyBpbmNpdGVkIHRoZXJldG8gbW9zdCBvZiBhbGwgYnkgdGhlIGZvb2xpc2ggZXhhZ2dlcmF0aW9ucyBvZiBoaXMgZmxhdHRlcmVycy4gVGhlc2UgbGlrZW5lZCBTZXJ0b3JpdXMgdG8gSGFubmliYWwgYW5kIE1pdGhyaWRhdGVzIHRvIFB5cnJodXMsIGFuZCBkZWNsYXJlZCB0aGF0IHRoZSBSb21hbnMsIGF0dGFja2VkIG9uIGJvdGggc2lkZXMsIGNvdWxkIG5vdCBob2xkIG91dCBhZ2FpbnN0IHR3byBzdWNoIG5hdHVyZXMgYW5kIGZvcmNlcyBjb21iaW5lZCwgd2hlbiB0aGUgYWJsZXN0IG9mIGdlbmVyYWxzIHdhcyBpbiBhbGxpYW5jZSB3aXRoIHRoZSBncmVhdGVzdCBvZiBraW5ncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1pdGhyaWRhdGVzIHNlbnQgZW52b3lzIHRvIEliZXJpYSBjYXJyeWluZyBsZXR0ZXJzIGFuZCBvcmFsIHByb3Bvc2l0aW9ucyB0byBTZXJ0b3JpdXMsIHRoZSBwdXJwb3J0IG9mIHdoaWNoIHdhcyB0aGF0IE1pdGhyaWRhdGVzIGZvciBoaXMgcGFydCBwcm9taXNlZCB0byBmdXJuaXNoIG1vbmV5IGFuZCBzaGlwcyBmb3IgdGhlIHdhciwgYnV0IGRlbWFuZGVkIHRoYXQgU2VydG9yaXVzIGNvbmZpcm0gaGltIGluIHRoZSBwb3NzZXNzaW9uIG9mIHRoZSB3aG9sZSBvZiBBc2lhLCB3aGljaCBoZSBoYWQgeWllbGRlZCB0byB0aGUgUm9tYW5zIGJ5IHZpcnR1ZSBvZiB0aGUgdHJlYXRpZXMgbWFkZSB3aXRoIFN1bGxhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNlcnRvcml1cyBhc3NlbWJsZWQgYSBjb3VuY2lsLCB3aGljaCBoZSBjYWxsZWQgYSBzZW5hdGUsIGFuZCBoZXJlIHRoZSByZXN0IHVyZ2VkIGhpbSB0byBhY2NlcHQgdGhlIGtpbmcncyBwcm9wb3NhbHMgYW5kIGJlIHdlbGwgY29udGVudCB3aXRoIHRoZW07IGZvciB0aGV5IHdlcmUgYXNrZWQgdG8gZ3JhbnQgYSBuYW1lIGFuZCBhbiBlbXB0eSB0aXRsZSB0byB3aGF0IHdhcyBub3QgaW4gdGhlaXIgcG9zc2Vzc2lvbiwgYW5kIHdvdWxkIHJlY2VpdmUgdGhlcmVmb3IgdGhhdCBvZiB3aGljaCB0aGV5IHN0b29kIG1vc3QgaW4gbmVlZC4gU2VydG9yaXVzLCBob3dldmVyLCB3b3VsZCBub3QgY29uc2VudCB0byB0aGlzLiBIZSBzYWlkIGhlIGhhZCBubyBvYmplY3Rpb24gdG8gTWl0aHJpZGF0ZXMgdGFraW5nIEJpdGh5bmlhIGFuZCBDYXBwYWRvY2lhLCBjb3VudHJpZXMgdXNlZCB0byBraW5ncyBhbmQgb2Ygbm8gY29uY2VybiB3aGF0ZXZlciB0byB0aGUgUm9tYW5zOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhIHByb3ZpbmNlIHdoaWNoIE1pdGhyaWRhdGVzIGhhZCB0YWtlbiBhd2F5IGFuZCBoZWxkIHdoZW4gaXQgYmVsb25nZWQgaW4gdGhlIGp1c3Rlc3QgbWFubmVyIHRvIHRoZSBSb21hbnMsIGZyb20gd2hpY2ggaGUgaGFkIGJlZW4gZHJpdmVuIGJ5IEZpbWJyaWEgaW4gd2FyLCBhbmQgd2hpY2ggaGUgaGFkIHJlbm91bmNlZCBieSB0cmVhdHkgd2l0aCBTdWxsYSzigJR0aGlzIHByb3ZpbmNlIFNlcnRvcml1cyBzYWlkIGhlIHdvdWxkIG5vdCBzdWZmZXIgdG8gYmVjb21lIHRoZSBraW5nJ3MgYWdhaW47IGZvciB0aGUgUm9tYW4gc3RhdGUgbXVzdCBiZSBpbmNyZWFzZWQgYnkgaGlzIGV4ZXJjaXNlIG9mIHBvd2VyLCBhbmQgaGUgbXVzdCBub3QgZXhlcmNpc2UgcG93ZXIgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlIHN0YXRlLiBGb3IgdG8gYSBtYW4gb2Ygbm9ibGUgc3Bpcml0IHZpY3RvcnkgaXMgdG8gYmUgZGVzaXJlZCBpZiBpdCBjb21lcyB3aXRoIGhvbm91ciwgYnV0IHdpdGggc2hhbWUgbm90IGV2ZW4gbGlmZSBpdHNlbGYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyB3YXMgcmVwb3J0ZWQgdG8gTWl0aHJpZGF0ZXMgaGUgYWN0ZWQgbGlrZSBvbmUgYW1hemVkOyBhbmQgd2UgYXJlIHRvbGQgdGhhdCBoZSBzYWlkIHRvIGhpcyBmcmllbmRzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgdGVybXMsIHByYXksIHdpbGwgU2VydG9yaXVzIGltcG9zZSB3aGVuIGhlIGlzIHNlYXRlZCBvbiB0aGUgUGFsYXRpbmUsIGlmIG5vdywgYWZ0ZXIgaGUgaGFzIGJlZW4gZHJpdmVuIGZvcnRoIHRvIHRoZSBBdGxhbnRpYyBzZWEsIGhlIHNldHMgYm91bmRzIHRvIG91ciBraW5nZG9tIGFuZCB0aHJlYXRlbnMgdXMgd2l0aCB3YXIgaWYgd2UgdHJ5IHRvIGdldCBBc2lhPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhIHRyZWF0eSB3YXMgYWN0dWFsbHkgbWFkZSBhbmQgcmF0aWZpZWQgd2l0aCBvYXRocy4gTWl0aHJpZGF0ZXMgd2FzIHRvIGhhdmUgQ2FwcGFkb2NpYSBhbmQgQml0aHluaWEsIFNlcnRvcml1cyBzZW5kaW5nIGhpbSBhIGdlbmVyYWwgYW5kIHNvbGRpZXJzLCB3aGlsZSBTZXJ0b3JpdXMgd2FzIHRvIHJlY2VpdmUgZnJvbSBNaXRocmlkYXRlcyB0aHJlZSB0aG91c2FuZCB0YWxlbnRzIGFuZCBmb3J0eSBzaGlwcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGEgZ2VuZXJhbCB3YXMgc2VudCB0byBBc2lhIGJ5IFNlcnRvcml1cywgb25lIG9mIHRoZSBzZW5hdG9ycyB3aG8gaGFkIHRha2VuIHJlZnVnZSB3aXRoIGhpbSwgTWFyY3VzIE1hcml1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MdWN1bGx1czwvdGl0bGU+LCB2aWlpLiA1PC9iaWJsPi48L25vdGU+IEhlIHdhcyBhc3Npc3RlZCBieSBNaXRocmlkYXRlcyBpbiB0aGUgY2FwdHVyZSBvZiBjZXJ0YWluIGNpdGllcyBvZiBBc2lhLCBhbmQgd2hlbiBoZSBlbnRlcmVkIHRoZW0gd2l0aCBmYXNjZXMgYW5kIGF4ZXMsIE1pdGhyaWRhdGVzIHdvdWxkIGZvbGxvdyBoaW0gaW4gcGVyc29uLCB2b2x1bnRhcmlseSBhc3N1bWluZyBzZWNvbmQgcmFuayBhbmQgdGhlIHBvc2l0aW9uIG9mIGEgdmFzc2FsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgZ2F2ZSBzb21lIG9mIHRoZSBjaXRpZXMgdGhlaXIgZnJlZWRvbSwgYW5kIHdyb3RlIHRvIG90aGVycyBhbm5vdW5jaW5nIHRoZWlyIGV4ZW1wdGlvbiBmcm9tIHRheGF0aW9uIGJ5IGdyYWNlIG9mIFNlcnRvcml1cywgc28gdGhhdCBBc2lhLCB3aGljaCB3YXMgb25jZSBtb3JlIGhhcmFzc2VkIGJ5IHRoZSByZXZlbnVlLWZhcm1lcnMgYW5kIG9wcHJlc3NlZCBieSB0aGUgcmFwYWNpdHkgYW5kIGFycm9nYW5jZSBvZiB0aGUgc29sZGllcnMgcXVhcnRlcmVkIHRoZXJlLCB3YXMgYWxsIG9mIGEgZmx1dHRlciB3aXRoIG5ldyBob3BlcyBhbmQgeWVhcm5lZCBmb3IgdGhlIGV4cGVjdGVkIGNoYW5nZSBvZiBzdXByZW1hY3kuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIHdhcyByZXBvcnRlZCB0byBNaXRocmlkYXRlcyBoZSBhY3RlZCBsaWtlIG9uZSBhbWF6ZWQ7IGFuZCB3ZSBhcmUgdG9sZCB0aGF0IGhlIHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IHRlcm1zLCBwcmF5LCB3aWxsIFNlcnRvcml1cyBpbXBvc2Ugd2hlbiBoZSBpcyBzZWF0ZWQgb24gdGhlIFBhbGF0aW5lLCBpZiBub3csIGFmdGVyIGhlIGhhcyBiZWVuIGRyaXZlbiBmb3J0aCB0byB0aGUgQXRsYW50aWMgc2VhLCBoZSBzZXRzIGJvdW5kcyB0byBvdXIga2luZ2RvbSBhbmQgdGhyZWF0ZW5zIHVzIHdpdGggd2FyIGlmIHdlIHRyeSB0byBnZXQgQXNpYT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGEgdHJlYXR5IHdhcyBhY3R1YWxseSBtYWRlIGFuZCByYXRpZmllZCB3aXRoIG9hdGhzLiBNaXRocmlkYXRlcyB3YXMgdG8gaGF2ZSBDYXBwYWRvY2lhIGFuZCBCaXRoeW5pYSwgU2VydG9yaXVzIHNlbmRpbmcgaGltIGEgZ2VuZXJhbCBhbmQgc29sZGllcnMsIHdoaWxlIFNlcnRvcml1cyB3YXMgdG8gcmVjZWl2ZSBmcm9tIE1pdGhyaWRhdGVzIHRocmVlIHRob3VzYW5kIHRhbGVudHMgYW5kIGZvcnR5IHNoaXBzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhIGdlbmVyYWwgd2FzIHNlbnQgdG8gQXNpYSBieSBTZXJ0b3JpdXMsIG9uZSBvZiB0aGUgc2VuYXRvcnMgd2hvIGhhZCB0YWtlbiByZWZ1Z2Ugd2l0aCBoaW0sIE1hcmN1cyBNYXJpdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx1Yy4gOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgdmlpaS4gNTwvYmlibD4uPC9ub3RlPiBIZSB3YXMgYXNzaXN0ZWQgYnkgTWl0aHJpZGF0ZXMgaW4gdGhlIGNhcHR1cmUgb2YgY2VydGFpbiBjaXRpZXMgb2YgQXNpYSwgYW5kIHdoZW4gaGUgZW50ZXJlZCB0aGVtIHdpdGggZmFzY2VzIGFuZCBheGVzLCBNaXRocmlkYXRlcyB3b3VsZCBmb2xsb3cgaGltIGluIHBlcnNvbiwgdm9sdW50YXJpbHkgYXNzdW1pbmcgc2Vjb25kIHJhbmsgYW5kIHRoZSBwb3NpdGlvbiBvZiBhIHZhc3NhbC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDguNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHZpaWkuIDU8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx1Y3VsbHVzPC90aXRsZT4sIHZpaWkuIDU8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBnYXZlIHNvbWUgb2YgdGhlIGNpdGllcyB0aGVpciBmcmVlZG9tLCBhbmQgd3JvdGUgdG8gb3RoZXJzIGFubm91bmNpbmcgdGhlaXIgZXhlbXB0aW9uIGZyb20gdGF4YXRpb24gYnkgZ3JhY2Ugb2YgU2VydG9yaXVzLCBzbyB0aGF0IEFzaWEsIHdoaWNoIHdhcyBvbmNlIG1vcmUgaGFyYXNzZWQgYnkgdGhlIHJldmVudWUtZmFybWVycyBhbmQgb3BwcmVzc2VkIGJ5IHRoZSByYXBhY2l0eSBhbmQgYXJyb2dhbmNlIG9mIHRoZSBzb2xkaWVycyBxdWFydGVyZWQgdGhlcmUsIHdhcyBhbGwgb2YgYSBmbHV0dGVyIHdpdGggbmV3IGhvcGVzIGFuZCB5ZWFybmVkIGZvciB0aGUgZXhwZWN0ZWQgY2hhbmdlIG9mIHN1cHJlbWFjeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFNwYWluLCBhcyBzb29uIGFzIHRoZSBzZW5hdG9ycyBhbmQgbWVuIG9mIGVxdWFsIHJhbmsgYWJvdXQgU2VydG9yaXVzIGZlbHQgY29uZmlkZW50IHRoYXQgdGhleSB3ZXJlIGEgbWF0Y2ggZm9yIHRoZWlyIGVuZW1pZXMgYW5kIGRpc21pc3NlZCB0aGVpciBmZWFycywgdGhleSB3ZXJlIHNlaXplZCB3aXRoIGVudnkgYW5kIGZvb2xpc2ggamVhbG91c3kgb2YgdGhlaXIgbGVhZGVyLiBUaGV5IHdlcmUgZW5jb3VyYWdlZCBpbiB0aGVzZSBmZWVsaW5ncyBieSBQZXJwZW5uYSwgd2hvc2UgaGlnaCBiaXJ0aCBmaWxsZWQgaGltIHdpdGggdmFpbiBhc3BpcmF0aW9ucyBmb3IgdGhlIGNoaWVmIGNvbW1hbmQsIGFuZCBoZSB3b3VsZCBob2xkIG1hbGV2b2xlbnQgZGlzY291cnNlcyBpbiBzZWNyZXQgYW1vbmcgaGlzIGFzc29jaWF0ZXM6IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0IGV2aWwgZ2VuaXVzLCBwcmF5LCBoYXMgc2VpemVkIHVzIGFuZCBpcyBodXJyeWluZyB1cyBmcm9tIGJhZCB0byB3b3JzZT8gV2Ugd291bGQgbm90IGNvbnNlbnQgdG8gcmVtYWluIGF0IGhvbWUgYW5kIGRvIHRoZSBiaWRkaW5nIG9mIFN1bGxhIHdoZW4gaGUgd2FzIGxvcmQgb2YgYWxsIHRoZSBlYXJ0aCBhbmQgc2VhIHRvZ2V0aGVyLCBidXQgd2UgY2FtZSB0byB0aGlzIGxhbmQgb2YgZGVzdHJ1Y3Rpb24gd2l0aCB0aGUgaWRlYSBvZiBsaXZpbmcgbGlrZSBmcmVlbWVuLCBhbmQgYXJlIG5vdyB2b2x1bnRhcmlseSBzbGF2ZXMgaW4gdGhlIGJvZHktZ3VhcmQgb3IgU2VydG9yaXVzIHRoZSBleGlsZSwgYmVpbmcgYSBzZW5hdGUsIGEgbmFtZSBqZWVyZWQgYXQgYnkgYWxsIHdobyBoZWFyIGl0LCBhbmQgc3VibWl0dGluZyB0byBubyBsZXNzZXIgaW5zdWx0cywgaW5qdW5jdGlvbnMsIGFuZCB0b2lscyB0aGFuIEliZXJpYW5zIGFuZCBMdXNpdGFuaWFucy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiBoaXMgaGVhcmVycywgdGhlaXIgbWluZHMgaW5mZWN0ZWQgd2l0aCBzdWNoIHNlbnRpbWVudHMgYXMgdGhlc2UsIGRpZCBub3QsIGluZGVlZCwgb3Blbmx5IGRlc2VydCBTZXJ0b3JpdXMsIGJlY2F1c2UgdGhleSB3ZXJlIGluIGZlYXIgb2YgaGlzIHBvd2VyOyBidXQgdGhleSBzZWNyZXRseSB0cmllZCB0byB2aXRpYXRlIGhpcyBlbnRlcnByaXNlcywgYW5kIGFidXNlZCB0aGUgQmFyYmFyaWFucyB3aXRoIHNldmVyZSBwdW5pc2htZW50cyBhbmQgZXhhY3Rpb25zLCBvbiB0aGUgcGxlYSB0aGF0IFNlcnRvcml1cyB0aHVzIG9yZGVyZWQuIENvbnNlcXVlbnRseSB0aGVyZSB3ZXJlIHJldm9sdHMgYW5kIGRpc3R1cmJhbmNlcyBhbW9uZyB0aGUgY2l0aWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhvc2Ugd2hvIHdlcmUgc2VudCB0byBhc3N1YWdlIGFuZCBjdXJlIHRoZXNlIGRpc29yZGVycyBicm91Z2h0IG1vcmUgd2FycyB0byBwYXNzIGJlZm9yZSB0aGV5IHJldHVybmVkLCBhbmQgaW5jcmVhc2VkIHRoZSBleGlzdGluZyBpbnN1Ym9yZGluYXRpb24sIHNvIHRoYXQgU2VydG9yaXVzIGxhaWQgYXNpZGUgaGlzIGZvcm1lciBjbGVtZW5jeSBhbmQgbWlsZG5lc3MgYW5kIHdyb3VnaHQgaW5qdXN0aWNlIHVwb24gdGhlIHNvbnMgb2YgdGhlIEliZXJpYW5zIHdobyB3ZXJlIGJlaW5nIGVkdWNhdGVkIGF0IE9zY2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxNC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpdi4gMiBmPC9iaWJsPi48L25vdGU+IGtpbGxpbmcgc29tZSwgYW5kIHNlbGxpbmcgb3RoZXJzIGludG8gc2xhdmVyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFNwYWluLCBhcyBzb29uIGFzIHRoZSBzZW5hdG9ycyBhbmQgbWVuIG9mIGVxdWFsIHJhbmsgYWJvdXQgU2VydG9yaXVzIGZlbHQgY29uZmlkZW50IHRoYXQgdGhleSB3ZXJlIGEgbWF0Y2ggZm9yIHRoZWlyIGVuZW1pZXMgYW5kIGRpc21pc3NlZCB0aGVpciBmZWFycywgdGhleSB3ZXJlIHNlaXplZCB3aXRoIGVudnkgYW5kIGZvb2xpc2ggamVhbG91c3kgb2YgdGhlaXIgbGVhZGVyLiBUaGV5IHdlcmUgZW5jb3VyYWdlZCBpbiB0aGVzZSBmZWVsaW5ncyBieSBQZXJwZW5uYSwgd2hvc2UgaGlnaCBiaXJ0aCBmaWxsZWQgaGltIHdpdGggdmFpbiBhc3BpcmF0aW9ucyBmb3IgdGhlIGNoaWVmIGNvbW1hbmQsIGFuZCBoZSB3b3VsZCBob2xkIG1hbGV2b2xlbnQgZGlzY291cnNlcyBpbiBzZWNyZXQgYW1vbmcgaGlzIGFzc29jaWF0ZXM6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgZXZpbCBnZW5pdXMsIHByYXksIGhhcyBzZWl6ZWQgdXMgYW5kIGlzIGh1cnJ5aW5nIHVzIGZyb20gYmFkIHRvIHdvcnNlPyBXZSB3b3VsZCBub3QgY29uc2VudCB0byByZW1haW4gYXQgaG9tZSBhbmQgZG8gdGhlIGJpZGRpbmcgb2YgU3VsbGEgd2hlbiBoZSB3YXMgbG9yZCBvZiBhbGwgdGhlIGVhcnRoIGFuZCBzZWEgdG9nZXRoZXIsIGJ1dCB3ZSBjYW1lIHRvIHRoaXMgbGFuZCBvZiBkZXN0cnVjdGlvbiB3aXRoIHRoZSBpZGVhIG9mIGxpdmluZyBsaWtlIGZyZWVtZW4sIGFuZCBhcmUgbm93IHZvbHVudGFyaWx5IHNsYXZlcyBpbiB0aGUgYm9keS1ndWFyZCBvciBTZXJ0b3JpdXMgdGhlIGV4aWxlLCBiZWluZyBhIHNlbmF0ZSwgYSBuYW1lIGplZXJlZCBhdCBieSBhbGwgd2hvIGhlYXIgaXQsIGFuZCBzdWJtaXR0aW5nIHRvIG5vIGxlc3NlciBpbnN1bHRzLCBpbmp1bmN0aW9ucywgYW5kIHRvaWxzIHRoYW4gSWJlcmlhbnMgYW5kIEx1c2l0YW5pYW5zLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgaGlzIGhlYXJlcnMsIHRoZWlyIG1pbmRzIGluZmVjdGVkIHdpdGggc3VjaCBzZW50aW1lbnRzIGFzIHRoZXNlLCBkaWQgbm90LCBpbmRlZWQsIG9wZW5seSBkZXNlcnQgU2VydG9yaXVzLCBiZWNhdXNlIHRoZXkgd2VyZSBpbiBmZWFyIG9mIGhpcyBwb3dlcjsgYnV0IHRoZXkgc2VjcmV0bHkgdHJpZWQgdG8gdml0aWF0ZSBoaXMgZW50ZXJwcmlzZXMsIGFuZCBhYnVzZWQgdGhlIEJhcmJhcmlhbnMgd2l0aCBzZXZlcmUgcHVuaXNobWVudHMgYW5kIGV4YWN0aW9ucywgb24gdGhlIHBsZWEgdGhhdCBTZXJ0b3JpdXMgdGh1cyBvcmRlcmVkLiBDb25zZXF1ZW50bHkgdGhlcmUgd2VyZSByZXZvbHRzIGFuZCBkaXN0dXJiYW5jZXMgYW1vbmcgdGhlIGNpdGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG9zZSB3aG8gd2VyZSBzZW50IHRvIGFzc3VhZ2UgYW5kIGN1cmUgdGhlc2UgZGlzb3JkZXJzIGJyb3VnaHQgbW9yZSB3YXJzIHRvIHBhc3MgYmVmb3JlIHRoZXkgcmV0dXJuZWQsIGFuZCBpbmNyZWFzZWQgdGhlIGV4aXN0aW5nIGluc3Vib3JkaW5hdGlvbiwgc28gdGhhdCBTZXJ0b3JpdXMgbGFpZCBhc2lkZSBoaXMgZm9ybWVyIGNsZW1lbmN5IGFuZCBtaWxkbmVzcyBhbmQgd3JvdWdodCBpbmp1c3RpY2UgdXBvbiB0aGUgc29ucyBvZiB0aGUgSWJlcmlhbnMgd2hvIHdlcmUgYmVpbmcgZWR1Y2F0ZWQgYXQgT3NjYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiAxNC4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpdi4gMiBmPC9iaWJsPi48L25vdGU+IGtpbGxpbmcgc29tZSwgYW5kIHNlbGxpbmcgb3RoZXJzIGludG8gc2xhdmVyeS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gMTQuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aXYuIDIgZjwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGVycGVubmEsIGFjY29yZGluZ2x5LCBoYXZpbmcgbm93IG1vcmUgYWNjb21wbGljZXMgaW4gaGlzIGF0dGVtcHQgdXBvbiBTZXJ0b3JpdXMsIGJyb3VnaHQgaW50byB0aGVpciBudW1iZXIgTWFubGl1cyBhbHNvLCBvbmUgb2YgdGhvc2UgaW4gaGlnaCBjb21tYW5kLiBUaGlzIE1hbmxpdXMgd2FzIGVuYW1vdXJlZCBvZiBhIGJlYXV0aWZ1bCBib3ksIGFuZCBhcyBhIG1hcmsgb2YgaGlzIGFmZmVjdGlvbiBmb3IgaGltIHRvbGQgaGltIG9mIHRoZSBjb25zcGlyYWN5LCBiaWRkaW5nIGhpbSBuZWdsZWN0IGhpcyBvdGhlciBsb3ZlcnMgYW5kIGRldm90ZSBoaW1zZWxmIHRvIGhpbSBhbG9uZSwgc2luY2Ugd2l0aGluIGEgZmV3IGRheXMgaGUgd2FzIHRvIGJlIGEgZ3JlYXQgcGVyc29uYWdlLiBCdXQgdGhlIGJveSBjYXJyaWVkIHRoZSB0YWxlIHRvIGFub3RoZXIgb25lIG9mIGhpcyBsb3ZlcnMsIEF1ZmlkaXVzLCB0byB3aG9tIGhlIHdhcyBtb3JlIGRldm90ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBdWZpZGl1cywgb24gaGVhcmluZyB0aGUgc3RvcnksIHdhcyBhc3RvdW5kZWQ7IGZvciB0aG91Z2ggaGUgaGltc2VsZiB3YXMgYSBwYXJ0eSB0byB0aGUgY29uc3BpcmFjeSBhZ2FpbnN0IFNlcnRvcml1cywgaGUgZGlkIG5vdCBrbm93IHRoYXQgTWFubGl1cyB3YXMuIEJ1dCBzaW5jZSB0aGUgYm95IG1lbnRpb25lZCBieSBuYW1lIFBlcnBlbm5hLCBHcmFjaW51cywgYW5kIHN1bmRyeSBvdGhlcnMgb2YgdGhvc2Ugd2hvbSBBdWZpZGl1cyBrbmV3IHRvIGJlIGFtb25nIHRoZSBjb25zcGlyYXRvcnMsIEF1ZmlkaXVzIHdhcyBjb25mb3VuZGVkLCBhbmQgYWZ0ZXIgbWFraW5nIGxpZ2h0IG9mIHRoZSBzdG9yeSB0byB0aGUgYm95IGFuZCBleGhvcnRpbmcgaGltIHRvIGRlc3Bpc2UgTWFubGl1cyBhcyBhbiBlbXB0eSBicmFnZ2FydCwgaGUgaGltc2VsZiB3ZW50IHRvIFBlcnBlbm5hLCB0b2xkIGhpbSBvZiB0aGUgc2hhcnBuZXNzIG9mIHRoZSBjcmlzaXMgYW5kIG9mIHRoZWlyIHBlcmlsLCBhbmQgdXJnZWQgaGltIHRvIGF0dGVtcHQgdGhlIGRlZWQuIFRoZSBjb25zcGlyYXRvcnMgd2VyZSBwZXJzdWFkZWQsIGFuZCBhZnRlciBwcm92aWRpbmcgYSBtYW4gdG8gYWN0IGFzIHRoZSBiZWFyZXIgb2YgbGV0dGVycywgdGhleSBpbnRyb2R1Y2VkIGhpbSB0byBTZXJ0b3JpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBsZXR0ZXJzIG1hZGUga25vd24gYSB2aWN0b3J5IG9mIG9uZSBvZiB0aGUgZ2VuZXJhbHMgc2VydmluZyB1bmRlciBTZXJ0b3JpdXMsIGFuZCBhIGdyZWF0IHNsYXVnaHRlciBvZiB0aGUgZW5lbXkuIEF0IHRoaXMgU2VydG9yaXVzIHdhcyBvdmVyam95ZWQgYW5kIG9mZmVyZWQgYSBzYWNyaWZpY2Ugb2YgZ2xhZCB0aWRpbmdzLCBkdXJpbmcgd2hpY2ggUGVycGVubmEgcHJvcG9zZWQgYSBiYW5xdWV0IGZvciBoaW0gYW5kIGhpcyBmcmllbmRzIHdobyB3ZXJlIHByZXNlbnQgKGFuZCB0aGVzZSB3ZXJlIG9mIHRoZSBjb25zcGlyYWN5KSwgYW5kIGFmdGVyIG11Y2ggZW50cmVhdHkgcGVyc3VhZGVkIGhpbSB0byBjb21lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGVycGVubmEsIGFjY29yZGluZ2x5LCBoYXZpbmcgbm93IG1vcmUgYWNjb21wbGljZXMgaW4gaGlzIGF0dGVtcHQgdXBvbiBTZXJ0b3JpdXMsIGJyb3VnaHQgaW50byB0aGVpciBudW1iZXIgTWFubGl1cyBhbHNvLCBvbmUgb2YgdGhvc2UgaW4gaGlnaCBjb21tYW5kLiBUaGlzIE1hbmxpdXMgd2FzIGVuYW1vdXJlZCBvZiBhIGJlYXV0aWZ1bCBib3ksIGFuZCBhcyBhIG1hcmsgb2YgaGlzIGFmZmVjdGlvbiBmb3IgaGltIHRvbGQgaGltIG9mIHRoZSBjb25zcGlyYWN5LCBiaWRkaW5nIGhpbSBuZWdsZWN0IGhpcyBvdGhlciBsb3ZlcnMgYW5kIGRldm90ZSBoaW1zZWxmIHRvIGhpbSBhbG9uZSwgc2luY2Ugd2l0aGluIGEgZmV3IGRheXMgaGUgd2FzIHRvIGJlIGEgZ3JlYXQgcGVyc29uYWdlLiBCdXQgdGhlIGJveSBjYXJyaWVkIHRoZSB0YWxlIHRvIGFub3RoZXIgb25lIG9mIGhpcyBsb3ZlcnMsIEF1ZmlkaXVzLCB0byB3aG9tIGhlIHdhcyBtb3JlIGRldm90ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBBdWZpZGl1cywgb24gaGVhcmluZyB0aGUgc3RvcnksIHdhcyBhc3RvdW5kZWQ7IGZvciB0aG91Z2ggaGUgaGltc2VsZiB3YXMgYSBwYXJ0eSB0byB0aGUgY29uc3BpcmFjeSBhZ2FpbnN0IFNlcnRvcml1cywgaGUgZGlkIG5vdCBrbm93IHRoYXQgTWFubGl1cyB3YXMuIEJ1dCBzaW5jZSB0aGUgYm95IG1lbnRpb25lZCBieSBuYW1lIFBlcnBlbm5hLCBHcmFjaW51cywgYW5kIHN1bmRyeSBvdGhlcnMgb2YgdGhvc2Ugd2hvbSBBdWZpZGl1cyBrbmV3IHRvIGJlIGFtb25nIHRoZSBjb25zcGlyYXRvcnMsIEF1ZmlkaXVzIHdhcyBjb25mb3VuZGVkLCBhbmQgYWZ0ZXIgbWFraW5nIGxpZ2h0IG9mIHRoZSBzdG9yeSB0byB0aGUgYm95IGFuZCBleGhvcnRpbmcgaGltIHRvIGRlc3Bpc2UgTWFubGl1cyBhcyBhbiBlbXB0eSBicmFnZ2FydCwgaGUgaGltc2VsZiB3ZW50IHRvIFBlcnBlbm5hLCB0b2xkIGhpbSBvZiB0aGUgc2hhcnBuZXNzIG9mIHRoZSBjcmlzaXMgYW5kIG9mIHRoZWlyIHBlcmlsLCBhbmQgdXJnZWQgaGltIHRvIGF0dGVtcHQgdGhlIGRlZWQuIFRoZSBjb25zcGlyYXRvcnMgd2VyZSBwZXJzdWFkZWQsIGFuZCBhZnRlciBwcm92aWRpbmcgYSBtYW4gdG8gYWN0IGFzIHRoZSBiZWFyZXIgb2YgbGV0dGVycywgdGhleSBpbnRyb2R1Y2VkIGhpbSB0byBTZXJ0b3JpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBsZXR0ZXJzIG1hZGUga25vd24gYSB2aWN0b3J5IG9mIG9uZSBvZiB0aGUgZ2VuZXJhbHMgc2VydmluZyB1bmRlciBTZXJ0b3JpdXMsIGFuZCBhIGdyZWF0IHNsYXVnaHRlciBvZiB0aGUgZW5lbXkuIEF0IHRoaXMgU2VydG9yaXVzIHdhcyBvdmVyam95ZWQgYW5kIG9mZmVyZWQgYSBzYWNyaWZpY2Ugb2YgZ2xhZCB0aWRpbmdzLCBkdXJpbmcgd2hpY2ggUGVycGVubmEgcHJvcG9zZWQgYSBiYW5xdWV0IGZvciBoaW0gYW5kIGhpcyBmcmllbmRzIHdobyB3ZXJlIHByZXNlbnQgKGFuZCB0aGVzZSB3ZXJlIG9mIHRoZSBjb25zcGlyYWN5KSwgYW5kIGFmdGVyIG11Y2ggZW50cmVhdHkgcGVyc3VhZGVkIGhpbSB0byBjb21lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBzdXBwZXJzIGF0IHdoaWNoIFNlcnRvcml1cyB3YXMgcHJlc2VudCB3ZXJlIGFsd2F5cyBtYXJrZWQgYnkgcmVzdHJhaW50IGFuZCBkZWNvcnVtLCBzaW5jZSBoZSB3b3VsZCBub3QgY29uc2VudCB0byBzZWUgb3IgaGVhciBhbnl0aGluZyB0aGF0IHdhcyBkaXNncmFjZWZ1bCwgYnV0IGhlbGQgaGlzIGFzc29jaWF0ZXMgdG8gdGhlIHByYWN0aWNlIG9mIGluZHVsZ2luZyBvbmx5IGluIG1pcnRoIGFuZCBtZXJyaW1lbnQgdGhhdCB3YXMgZGVjb3JvdXMgYW5kIHJlc3RyYWluZWQuIE9uIHRoaXMgb2NjYXNpb24sIGhvd2V2ZXIsIHdoZW4gdGhlIGRyaW5raW5nIHdhcyB3ZWxsIHVuZGVyIHdheSwgdGhlIGd1ZXN0cywgc2Vla2luZyBvY2Nhc2lvbiBmb3IgYSBxdWFycmVsLCBvcGVubHkgaW5kdWxnZWQgaW4gZGlzc29sdXRlIGxhbmd1YWdlLCBhbmQsIHByZXRlbmRpbmcgdG8gYmUgZHJ1bmssIGNvbW1pdHRlZCBtYW55IGluZGVjZW5jaWVzLCB3aXRoIHRoZSBob3BlIG9mIGFuZ2VyaW5nIFNlcnRvcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlLCBlaXRoZXIgYmVjYXVzZSBoZSB3YXMgdmV4ZWQgYXQgdGhlaXIgZGlzb3JkZXJseSBjb25kdWN0LCBvciBiZWNhdXNlIGhlIGhhZCBiZWNvbWUgYXdhcmUgb2YgdGhlaXIgcHVycG9zZSBmcm9tIHRoZSBib2xkbmVzcyBvZiB0aGVpciB0YWxrIGFuZCB0aGVpciB1bndvbnRlZCBjb250ZW1wdCBmb3IgaGlzIHdpc2hlcywgY2hhbmdlZCBoaXMgcG9zdHVyZSBvbiB0aGUgY291Y2ggYW5kIHRocmV3IGhpbXNlbGYgdXBvbiBoaXMgYmFjaywgYXMgdGhvdWdoIGhlIG5laXRoZXIgaGVhcmQgbm9yIHJlZ2FyZGVkIHRoZW0uIEJ1dCB3aGVuIFBlcnBlbm5hLCBhZnRlciB0YWtpbmcgYSBjdXAgb2Ygd2luZSBpbiBoaXMgaGFuZHMsIGRyb3BwZWQgaXQgYXMgaGUgd2FzIGRyaW5raW5nIGFuZCBtYWRlIGEgY2xhdHRlciB3aXRoIGl0LCB3aGljaCB3YXMgdGhlaXIgc2lnbmFsLCBBbnRvbml1cywgd2hvIHJlY2xpbmVkIGFib3ZlIFNlcnRvcml1cyBvbiB0aGUgY291Y2gsIHNtb3RlIGhpbSB3aXRoIGhpcyBzd29yZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U2VydG9yaXVzIHR1cm5lZCBhdCB0aGUgYmxvdyBhbmQgd291bGQgaGF2ZSByaXNlbiB3aXRoIGhpcyBhc3NhaWxhbnQsIGJ1dCBBbnRvbml1cyBmZWxsIHVwb24gaGlzIGNoZXN0IGFuZCBzZWl6ZWQgYm90aCBoaXMgaGFuZHMsIHNvIHRoYXQgaGUgY291bGQgbWFrZSBubyBkZWZlbmNlIGV2ZW4sIGFuZCBkaWVkIGZyb20gdGhlIGJsb3dzIG9mIG1hbnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIHN1cHBlcnMgYXQgd2hpY2ggU2VydG9yaXVzIHdhcyBwcmVzZW50IHdlcmUgYWx3YXlzIG1hcmtlZCBieSByZXN0cmFpbnQgYW5kIGRlY29ydW0sIHNpbmNlIGhlIHdvdWxkIG5vdCBjb25zZW50IHRvIHNlZSBvciBoZWFyIGFueXRoaW5nIHRoYXQgd2FzIGRpc2dyYWNlZnVsLCBidXQgaGVsZCBoaXMgYXNzb2NpYXRlcyB0byB0aGUgcHJhY3RpY2Ugb2YgaW5kdWxnaW5nIG9ubHkgaW4gbWlydGggYW5kIG1lcnJpbWVudCB0aGF0IHdhcyBkZWNvcm91cyBhbmQgcmVzdHJhaW5lZC4gT24gdGhpcyBvY2Nhc2lvbiwgaG93ZXZlciwgd2hlbiB0aGUgZHJpbmtpbmcgd2FzIHdlbGwgdW5kZXIgd2F5LCB0aGUgZ3Vlc3RzLCBzZWVraW5nIG9jY2FzaW9uIGZvciBhIHF1YXJyZWwsIG9wZW5seSBpbmR1bGdlZCBpbiBkaXNzb2x1dGUgbGFuZ3VhZ2UsIGFuZCwgcHJldGVuZGluZyB0byBiZSBkcnVuaywgY29tbWl0dGVkIG1hbnkgaW5kZWNlbmNpZXMsIHdpdGggdGhlIGhvcGUgb2YgYW5nZXJpbmcgU2VydG9yaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSwgZWl0aGVyIGJlY2F1c2UgaGUgd2FzIHZleGVkIGF0IHRoZWlyIGRpc29yZGVybHkgY29uZHVjdCwgb3IgYmVjYXVzZSBoZSBoYWQgYmVjb21lIGF3YXJlIG9mIHRoZWlyIHB1cnBvc2UgZnJvbSB0aGUgYm9sZG5lc3Mgb2YgdGhlaXIgdGFsayBhbmQgdGhlaXIgdW53b250ZWQgY29udGVtcHQgZm9yIGhpcyB3aXNoZXMsIGNoYW5nZWQgaGlzIHBvc3R1cmUgb24gdGhlIGNvdWNoIGFuZCB0aHJldyBoaW1zZWxmIHVwb24gaGlzIGJhY2ssIGFzIHRob3VnaCBoZSBuZWl0aGVyIGhlYXJkIG5vciByZWdhcmRlZCB0aGVtLiBCdXQgd2hlbiBQZXJwZW5uYSwgYWZ0ZXIgdGFraW5nIGEgY3VwIG9mIHdpbmUgaW4gaGlzIGhhbmRzLCBkcm9wcGVkIGl0IGFzIGhlIHdhcyBkcmlua2luZyBhbmQgbWFkZSBhIGNsYXR0ZXIgd2l0aCBpdCwgd2hpY2ggd2FzIHRoZWlyIHNpZ25hbCwgQW50b25pdXMsIHdobyByZWNsaW5lZCBhYm92ZSBTZXJ0b3JpdXMgb24gdGhlIGNvdWNoLCBzbW90ZSBoaW0gd2l0aCBoaXMgc3dvcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNlcnRvcml1cyB0dXJuZWQgYXQgdGhlIGJsb3cgYW5kIHdvdWxkIGhhdmUgcmlzZW4gd2l0aCBoaXMgYXNzYWlsYW50LCBidXQgQW50b25pdXMgZmVsbCB1cG9uIGhpcyBjaGVzdCBhbmQgc2VpemVkIGJvdGggaGlzIGhhbmRzLCBzbyB0aGF0IGhlIGNvdWxkIG1ha2Ugbm8gZGVmZW5jZSBldmVuLCBhbmQgZGllZCBmcm9tIHRoZSBibG93cyBvZiBtYW55LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBtb3N0IG9mIHRoZSBJYmVyaWFucyBpbW1lZGlhdGVseSB3ZW50IGF3YXksIHNlbnQgYW1iYXNzYWRvcnMgdG8gUG9tcGV5IGFuZCBNZXRlbGx1cywgYW5kIGRlbGl2ZXJlZCB0aGVtc2VsdmVzIHVwIHRvIHRoZW07IGJ1dCB0aG9zZSB3aG8gcmVtYWluZWQgUGVycGVubmEgdG9vayB1bmRlciBoaXMgY29tbWFuZCBhbmQgYXR0ZW1wdGVkIHRvIGRvIHNvbWV0aGluZy4gQWZ0ZXIgdXNpbmcgdGhlIG1hdGVyaWFscyBwcm92aWRlZCBieSBTZXJ0b3JpdXMganVzdCBlbm91Z2ggdG8gY3V0IGEgc29ycnkgZmlndXJlIGFuZCBtYWtlIGl0IGNsZWFyIHRoYXQgaGUgd2FzIGZpdHRlZCBieSBuYXR1cmUgbmVpdGhlciB0byBjb21tYW5kIG5vciB0byBvYmV5LCBoZSBhdHRhY2tlZCBQb21wZXk7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgYmVlbiBxdWlja2x5IGNydXNoZWQgYnkgaGltIGFuZCB0YWtlbiBwcmlzb25lciwgaGUgZGlkIG5vdCBldmVuIGVuZHVyZSB0aGlzIGV4dHJlbWUgbWlzZm9ydHVuZSBhcyBhIGxlYWRlciBzaG91bGQsIGJ1dCwgYmVpbmcgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgcGFwZXJzIG9mIFNlcnRvcml1cywgaGUgcHJvbWlzZWQgdG8gc2hvdyBQb21wZXkgYXV0b2dyYXBoIGxldHRlcnMgZnJvbSBtZW4gb2YgY29uc3VsYXIgcmFuayBhbmQgb2YgdGhlIGhpZ2hlc3QgaW5mbHVlbmNlIGluIFJvbWUsIGluIHdoaWNoIHRoZXkgaW52aXRlZCBTZXJ0b3JpdXMgdG8gY29tZSB0byBJdGFseSwgYXNzdXJpbmcgaGltIHRoYXQgdGhlcmUgd2VyZSBtYW55IHRoZXJlIHdobyBkZXNpcmVkIGVhZ2VybHkgdG8gc3RpciB1cCBhIHJldm9sdXRpb24gYW5kIGNoYW5nZSB0aGUgY29uc3RpdHV0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Qb21wZXksIHRoZW4sIGRpZCBub3QgYWN0IGluIHRoaXMgZW1lcmdlbmN5IGxpa2UgYSB5b3VuZyBtYW4sIGJ1dCBsaWtlIG9uZSB3aG9zZSB1bmRlcnN0YW5kaW5nIHdhcyByaWdodCB3ZWxsIG1hdHVyZWQgYW5kIGRpc2NpcGxpbmVkLCBhbmQgc28gZnJlZWQgUm9tZSBmcm9tIHJldm9sdXRpb25hcnkgdGVycm9ycy4gRm9yIGhlIGdvdCB0b2dldGhlciB0aG9zZSBsZXR0ZXJzIGFuZCBhbGwgdGhlIHBhcGVycyBvZiBTZXJ0b3JpdXMgYW5kIGJ1cm5lZCB0aGVtLCB3aXRob3V0IHJlYWRpbmcgdGhlbSBoaW1zZWxmIG9yIHN1ZmZlcmluZyBhbnlvbmUgZWxzZSB0byBkbyBzbzsgYW5kIFBlcnBlbm5hIGhpbXNlbGYgaGUgc3BlZWRpbHkgcHV0IHRvIGRlYXRoLCB0aHJvdWdoIGZlYXIgdGhhdCBzZWRpdGlvbnMgYW5kIGRpc3R1cmJhbmNlcyBtaWdodCBhcmlzZSBpZiB0aGUgbmFtZXMgb2YgdGhlIGNvcnJlc3BvbmRlbnRzIG9mIFNlcnRvcml1cyB3ZXJlIGNvbW11bmljYXRlZCB0byBhbnlib2R5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIHh4LiA0PC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgbW9zdCBvZiB0aGUgSWJlcmlhbnMgaW1tZWRpYXRlbHkgd2VudCBhd2F5LCBzZW50IGFtYmFzc2Fkb3JzIHRvIFBvbXBleSBhbmQgTWV0ZWxsdXMsIGFuZCBkZWxpdmVyZWQgdGhlbXNlbHZlcyB1cCB0byB0aGVtOyBidXQgdGhvc2Ugd2hvIHJlbWFpbmVkIFBlcnBlbm5hIHRvb2sgdW5kZXIgaGlzIGNvbW1hbmQgYW5kIGF0dGVtcHRlZCB0byBkbyBzb21ldGhpbmcuIEFmdGVyIHVzaW5nIHRoZSBtYXRlcmlhbHMgcHJvdmlkZWQgYnkgU2VydG9yaXVzIGp1c3QgZW5vdWdoIHRvIGN1dCBhIHNvcnJ5IGZpZ3VyZSBhbmQgbWFrZSBpdCBjbGVhciB0aGF0IGhlIHdhcyBmaXR0ZWQgYnkgbmF0dXJlIG5laXRoZXIgdG8gY29tbWFuZCBub3IgdG8gb2JleSwgaGUgYXR0YWNrZWQgUG9tcGV5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgYmVlbiBxdWlja2x5IGNydXNoZWQgYnkgaGltIGFuZCB0YWtlbiBwcmlzb25lciwgaGUgZGlkIG5vdCBldmVuIGVuZHVyZSB0aGlzIGV4dHJlbWUgbWlzZm9ydHVuZSBhcyBhIGxlYWRlciBzaG91bGQsIGJ1dCwgYmVpbmcgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgcGFwZXJzIG9mIFNlcnRvcml1cywgaGUgcHJvbWlzZWQgdG8gc2hvdyBQb21wZXkgYXV0b2dyYXBoIGxldHRlcnMgZnJvbSBtZW4gb2YgY29uc3VsYXIgcmFuayBhbmQgb2YgdGhlIGhpZ2hlc3QgaW5mbHVlbmNlIGluIFJvbWUsIGluIHdoaWNoIHRoZXkgaW52aXRlZCBTZXJ0b3JpdXMgdG8gY29tZSB0byBJdGFseSwgYXNzdXJpbmcgaGltIHRoYXQgdGhlcmUgd2VyZSBtYW55IHRoZXJlIHdobyBkZXNpcmVkIGVhZ2VybHkgdG8gc3RpciB1cCBhIHJldm9sdXRpb24gYW5kIGNoYW5nZSB0aGUgY29uc3RpdHV0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvbXBleSwgdGhlbiwgZGlkIG5vdCBhY3QgaW4gdGhpcyBlbWVyZ2VuY3kgbGlrZSBhIHlvdW5nIG1hbiwgYnV0IGxpa2Ugb25lIHdob3NlIHVuZGVyc3RhbmRpbmcgd2FzIHJpZ2h0IHdlbGwgbWF0dXJlZCBhbmQgZGlzY2lwbGluZWQsIGFuZCBzbyBmcmVlZCBSb21lIGZyb20gcmV2b2x1dGlvbmFyeSB0ZXJyb3JzLiBGb3IgaGUgZ290IHRvZ2V0aGVyIHRob3NlIGxldHRlcnMgYW5kIGFsbCB0aGUgcGFwZXJzIG9mIFNlcnRvcml1cyBhbmQgYnVybmVkIHRoZW0sIHdpdGhvdXQgcmVhZGluZyB0aGVtIGhpbXNlbGYgb3Igc3VmZmVyaW5nIGFueW9uZSBlbHNlIHRvIGRvIHNvOyBhbmQgUGVycGVubmEgaGltc2VsZiBoZSBzcGVlZGlseSBwdXQgdG8gZGVhdGgsIHRocm91Z2ggZmVhciB0aGF0IHNlZGl0aW9ucyBhbmQgZGlzdHVyYmFuY2VzIG1pZ2h0IGFyaXNlIGlmIHRoZSBuYW1lcyBvZiB0aGUgY29ycmVzcG9uZGVudHMgb2YgU2VydG9yaXVzIHdlcmUgY29tbXVuaWNhdGVkIHRvIGFueWJvZHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDIwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeHguIDQ8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMjAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4eC4gNDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHh4LiA0PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T2YgUGVycGVubmEncyBmZWxsb3cgY29uc3BpcmF0b3JzLCBzb21lIHdlcmUgYnJvdWdodCB0byBQb21wZXkgYW5kIHB1dCB0byBkZWF0aCwgb3RoZXJzIGZsZWQgdG8gQWZyaWNhIGFuZCBmZWxsIHZpY3RpbXMgdG8gdGhlIHNwZWFycyBvZiB0aGUgTWF1cnVzaWFucy4gTm90IG9uZSBlc2NhcGVkLCBleGNlcHQgQXVmaWRpdXMsIHRoZSByaXZhbCBvZiBNYW5saXVzOyBoZSwgZWl0aGVyIGJlY2F1c2UgbWVuIGRpZCBub3Qgbm90aWNlIGhpbSBvciBiZWNhdXNlIHRoZXkgZGlkIG5vdCBoZWVkIGhpbSwgY2FtZSB0byBvbGQgYWdlIGluIGEgYmFyYmFyaWFuIHZpbGxhZ2UsIGEgcG9vciBhbmQgaGF0ZWQgbWFuLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
