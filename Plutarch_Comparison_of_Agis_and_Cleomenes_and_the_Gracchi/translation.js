var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBBZ2lzIGFuZCBDbGVvbWVuZXMgd291bGQgYXBwZWFyIHRvIGhhdmUgaGFkIGV2ZW4gc3R1cmRpZXIgbmF0dXJhbCBnaWZ0cyB0aGFuIHRoZWlycywgaW4gc28gZmFyIGFzLCB0aG91Z2ggdGhleSBkaWQgbm90IHJlY2VpdmUgYSBjb3JyZWN0IHRyYWluaW5nLCBhbmQgd2VyZSByZWFyZWQgaW4gdGhvc2UgY3VzdG9tcyBhbmQgd2F5cyBvZiBsaXZpbmcgYnkgd2hpY2ggdGhlaXIgZWxkZXJzIGhhZCBsb25nIGFnbyBiZWVuIGNvcnJ1cHRlZCwgdGhleSBuZXZlcnRoZWxlc3MgbWFkZSB0aGVtc2VsdmVzIGxlYWRlcnMgaW4gc2ltcGxpY2l0eSBhbmQgc2VsZi1yZXN0cmFpbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmdXJ0aGVyLCB0aGUgR3JhY2NoaSwgYXQgYSB0aW1lIHdoZW4gUm9tZSBoYWQgaGVyIGdyZWF0ZXN0IGFuZCBtb3N0IHNwbGVuZGlkIHJlcHV0ZSBhbmQgYW4gYXJkb3VyIGZvciBub2JsZSBkZWVkcywgd2VyZSBwcmV2ZW50ZWQgYnkgYSBzZW5zZSBvZiBzaGFtZSBmcm9tIGFiYW5kb25pbmcgd2hhdCB3YXMgbGlrZSBhbiBpbmhlcml0YW5jZSBvZiB2aXJ0dWUgZnJvbSBhbmNlc3RvcnMgbmVhciBhbmQgcmVtb3RlOyBBZ2lzIGFuZCBDbGVvbWVuZXMsIG9uIHRoZSBvdGhlciBoYW5kLCB0aG91Z2ggdGhleSB3ZXJlIHNvbnMgb2YgZmF0aGVycyB3aG8gaGFkIGFkb3B0ZWQgb3Bwb3NpdGUgcHJpbmNpcGxlcyB0byB0aGVpcnMsIGFuZCBmb3VuZCB0aGVpciBjb3VudHJ5IGluIGEgd3JldGNoZWQgcGxpZ2h0IGFuZCBmdWxsIG9mIGRpc3RlbXBlcnMsIGRpZCBub3Qgc3VmZmVyIHRoZXNlIHRoaW5ncyB0byBibHVudCB0aGUgZWRnZSBvZiB0aGVpciB6ZWFsIGZvciB3aGF0IHdhcyBub2JsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgY2hpZWYgcHJvb2YgdGhhdCB0aGUgR3JhY2NoaSBzY29ybmVkIHdlYWx0aCBhbmQgd2VyZSBzdXBlcmlvciB0byBtb25leSBsaWVzIGluIHRoZSBmYWN0IHRoYXQgdGhleSBrZXB0IHRoZW1zZWx2ZXMgY2xlYXIgZnJvbSB1bnJpZ2h0ZW91cyBnYWlucyBkdXJpbmcgdGhlaXIgb2ZmaWNpYWwgYW5kIHBvbGl0aWNhbCBsaWZlOyB3aGVyZWFzIEFnaXMgd291bGQgaGF2ZSBiZWVuIGluY2Vuc2VkIHRvIHJlY2VpdmUgcHJhaXNlIGZvciBub3QgdGFraW5nIGFueXRoaW5nIHRoYXQgd2FzIGFub3RoZXIncywgc2luY2UgaGUgZnJlZWx5IGdhdmUgdG8gaGlzIGZlbGxvdyBjaXRpemVucyBoaXMgb3duIHByb3BlcnR5LCB3aGljaCBhbW91bnRlZCB0byBzaXggaHVuZHJlZCB0YWxlbnRzIGluIHJlYWR5IG1vbmV5IGFsb25lLCB0byBzYXkgbm90aGluZyBvZiBvdGhlciB2YWx1YWJsZXMuIEhvdyBncmVhdCBhIGJhc2VuZXNzLCB0aGVuLCB3b3VsZCB1bmxhd2Z1bCBnYWluIGhhdmUgYmVlbiBoZWxkIHRvIGJlIGJ5IG9uZSBpbiB3aG9zZSBleWVzIGV2ZW4gdGhlIGxhd2Z1bCBwb3NzZXNzaW9uIG9mIG1vcmUgdGhhbiBhbm90aGVyIHdhcyByYXBhY2l0eT8KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhlIGVudGVycHJpc2UgYW5kIGJvbGRuZXNzIG9mIHRoZWlyIGF0dGVtcHRlZCByZWZvcm1zIHdlcmUgY2VydGFpbmx5IHZlcnkgZGlmZmVyZW50IGluIG1hZ25pdHVkZS4gRm9yIGluIHRoZWlyIHBvbGl0aWNhbCBhY3Rpdml0aWVzIENhaXVzIGhhZCBpbiB2aWV3IHRoZSBjb25zdHJ1Y3Rpb24gb2Ygcm9hZHMgYW5kIHRoZSBmb3VuZGluZyBvZiBjaXRpZXMsIGFuZCB0aGUgYm9sZGVzdCBvZiBhbGwgdGhlIHByb2plY3RzIG9mIHRoZSBSb21hbnMgd2VyZSwgaW4gdGhlIGNhc2Ugb2YgVGliZXJpdXMgdGhlIHJlY292ZXJ5IG9mIHRoZSBwdWJsaWMgbGFuZHMsIGFuZCBpbiB0aGF0IG9mIENhaXVzIHRoZSByZWNvbnN0aXR1dGlvbiBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UgYnkgdGhlIGFkZGl0aW9uIG9mIHRocmVlIGh1bmRyZWQgbWVuIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQWdpcyBhbmQgQ2xlb21lbmVzIGluIHRoZWlyIHJlZm9ybXMsIGNvbnNpZGVyaW5nIHRoYXQgdGhlIGFwcGxpY2F0aW9uIG9mIHRyaWZsaW5nIGFuZCBwYXJ0aWFsIHJlbWVkaWVzIGFuZCBleGNpc2lvbnMgdG8gdGhlIGRpc29yZGVycyBvZiB0aGUgc3RhdGUgd2FzIG5vdGhpbmcgbW9yZSB0aGFuIGN1dHRpbmcgb2ZmIGEgSHlkcmEncyBoZWFkcyAoYXMgUGxhdG8gc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA0MjZlIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJlcHVibGljPC90aXRsZT4sIHAuIDQyNiBlLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiksIHRyaWVkIHRvIGludHJvZHVjZSBpbnRvIHRoZSBjb25zdGl0dXRpb24gYSBjaGFuZ2Ugd2hpY2ggd2FzIGFibGUgdG8gdHJhbnNmb3JtIGFuZCBnZXQgcmlkIG9mIGFsbCBldmlscyBhdCBvbmNlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aG91Z2ggcGVyaGFwcyBpdCBpcyBtb3JlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgdHJ1dGggdG8gc2F5IHRoYXQgdGhleSBiYW5pc2hlZCB0aGUgY2hhbmdlIHdoaWNoIGhhZCB3cm91Z2h0IGFsbCBzb3J0cyBvZiBldmlscywgYnkgYnJpbmdpbmcgYmFjayB0aGUgc3RhdGUgdG8gaXRzIHByb3BlciBmb3JtIGFuZCBlc3RhYmxpc2hpbmcgaXQgdGhlcmVpbi4gQmVzaWRlcywgdGhpcyBhbHNvIGNhbiBiZSBzYWlkLCB0aGF0IHRoZSBwb2xpY2llcyBvZiB0aGUgR3JhY2NoaSB3ZXJlIG9wcG9zZWQgYnkgdGhlIGdyZWF0ZXN0IFJvbWFucywgd2hlcmVhcyB0aG9zZSB3aGljaCBBZ2lzIGluc3RpdHV0ZWQgYW5kIENsZW9tZW5lcyBjb25zdW1tYXRlZCB3ZXJlIGJhc2VkIHVwb24gdGhlIGZhaXJlc3QgYW5kIG1vc3QgaW1wb3NpbmcgcHJlY2VkZW50cywgbmFtZWx5LCB0aGUgYW5jaWVudCByaGV0cmFzIG9yIHVud3JpdHRlbiBsYXdzIGNvbmNlcm5pbmcgc2ltcGxpY2l0eSBvZiBsaWZlIGFuZCBlcXVhbGl0eSBvZiBwcm9wZXJ0eSwgZm9yIHdoaWNoIEx5Y3VyZ3VzIHdhcyB2b3VjaGVyIHRvIHRoZW0sIGFuZCB0aGUgUHl0aGlhbiBBcG9sbG8gdG8gTHljdXJndXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IGltcG9ydGFudCBjb25zaWRlcmF0aW9uIGlzIHRoYXQgdGhyb3VnaCB0aGUgcG9saXRpY2FsIGFjdGl2aXR5IG9mIHRoZSBHcmFjY2hpIFJvbWUgbWFkZSBubyBhZHZhbmNlIGluIGdyZWF0bmVzcywgd2hlcmVhcywgaW4gY29uc2VxdWVuY2Ugb2YgdGhlIGFjaGlldmVtZW50cyBvZiBDbGVvbWVuZXMsIHdpdGhpbiBhIHNob3J0IHRpbWUgR3JlZWNlIGJlaGVsZCBTcGFydGEgbWlzdHJlc3Mgb2YgdGhlIFBlbG9wb25uZXN1cyBhbmQgY2Fycnlpbmcgb24gYSBzdHJ1Z2dsZSBmb3IgdGhlIHN1cHJlbWFjeSB3aXRoIHRob3NlIHdobyB0aGVuIGhhZCB0aGUgZ3JlYXRlc3QgcG93ZXIsIHRoZSBvYmplY3Qgb2Ygd2hpY2ggc3RydWdnbGUgd2FzIHRvIHNldCBHcmVlY2UgZnJlZSBmcm9tIElsbHlyaWFuIGFuZCBHYWVsaWMgdHJvb3BzIGFuZCBhcnJheSBoZXIgb25jZSBtb3JlIHVuZGVyIGRlc2NlbmRhbnRzIG9mIEhlcmFjbGVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhlIGVudGVycHJpc2UgYW5kIGJvbGRuZXNzIG9mIHRoZWlyIGF0dGVtcHRlZCByZWZvcm1zIHdlcmUgY2VydGFpbmx5IHZlcnkgZGlmZmVyZW50IGluIG1hZ25pdHVkZS4gRm9yIGluIHRoZWlyIHBvbGl0aWNhbCBhY3Rpdml0aWVzIENhaXVzIGhhZCBpbiB2aWV3IHRoZSBjb25zdHJ1Y3Rpb24gb2Ygcm9hZHMgYW5kIHRoZSBmb3VuZGluZyBvZiBjaXRpZXMsIGFuZCB0aGUgYm9sZGVzdCBvZiBhbGwgdGhlIHByb2plY3RzIG9mIHRoZSBSb21hbnMgd2VyZSwgaW4gdGhlIGNhc2Ugb2YgVGliZXJpdXMgdGhlIHJlY292ZXJ5IG9mIHRoZSBwdWJsaWMgbGFuZHMsIGFuZCBpbiB0aGF0IG9mIENhaXVzIHRoZSByZWNvbnN0aXR1dGlvbiBvZiB0aGUgY291cnRzIG9mIGp1c3RpY2UgYnkgdGhlIGFkZGl0aW9uIG9mIHRocmVlIGh1bmRyZWQgbWVuIGZyb20gdGhlIGVxdWVzdHJpYW4gb3JkZXI7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgQWdpcyBhbmQgQ2xlb21lbmVzIGluIHRoZWlyIHJlZm9ybXMsIGNvbnNpZGVyaW5nIHRoYXQgdGhlIGFwcGxpY2F0aW9uIG9mIHRyaWZsaW5nIGFuZCBwYXJ0aWFsIHJlbWVkaWVzIGFuZCBleGNpc2lvbnMgdG8gdGhlIGRpc29yZGVycyBvZiB0aGUgc3RhdGUgd2FzIG5vdGhpbmcgbW9yZSB0aGFuIGN1dHRpbmcgb2ZmIGEgSHlkcmEncyBoZWFkcyAoYXMgUGxhdG8gc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gNDI2ZSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4sIHAuIDQyNiBlLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiksIHRyaWVkIHRvIGludHJvZHVjZSBpbnRvIHRoZSBjb25zdGl0dXRpb24gYSBjaGFuZ2Ugd2hpY2ggd2FzIGFibGUgdG8gdHJhbnNmb3JtIGFuZCBnZXQgcmlkIG9mIGFsbCBldmlscyBhdCBvbmNlOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gNDI2ZSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4sIHAuIDQyNiBlLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgcC4gNDI2IGUuPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRob3VnaCBwZXJoYXBzIGl0IGlzIG1vcmUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSB0cnV0aCB0byBzYXkgdGhhdCB0aGV5IGJhbmlzaGVkIHRoZSBjaGFuZ2Ugd2hpY2ggaGFkIHdyb3VnaHQgYWxsIHNvcnRzIG9mIGV2aWxzLCBieSBicmluZ2luZyBiYWNrIHRoZSBzdGF0ZSB0byBpdHMgcHJvcGVyIGZvcm0gYW5kIGVzdGFibGlzaGluZyBpdCB0aGVyZWluLiBCZXNpZGVzLCB0aGlzIGFsc28gY2FuIGJlIHNhaWQsIHRoYXQgdGhlIHBvbGljaWVzIG9mIHRoZSBHcmFjY2hpIHdlcmUgb3Bwb3NlZCBieSB0aGUgZ3JlYXRlc3QgUm9tYW5zLCB3aGVyZWFzIHRob3NlIHdoaWNoIEFnaXMgaW5zdGl0dXRlZCBhbmQgQ2xlb21lbmVzIGNvbnN1bW1hdGVkIHdlcmUgYmFzZWQgdXBvbiB0aGUgZmFpcmVzdCBhbmQgbW9zdCBpbXBvc2luZyBwcmVjZWRlbnRzLCBuYW1lbHksIHRoZSBhbmNpZW50IHJoZXRyYXMgb3IgdW53cml0dGVuIGxhd3MgY29uY2VybmluZyBzaW1wbGljaXR5IG9mIGxpZmUgYW5kIGVxdWFsaXR5IG9mIHByb3BlcnR5LCBmb3Igd2hpY2ggTHljdXJndXMgd2FzIHZvdWNoZXIgdG8gdGhlbSwgYW5kIHRoZSBQeXRoaWFuIEFwb2xsbyB0byBMeWN1cmd1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgeGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIHhpaWkuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MeWN1cmd1czwvdGl0bGU+LCB4aWlpLjwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBpbXBvcnRhbnQgY29uc2lkZXJhdGlvbiBpcyB0aGF0IHRocm91Z2ggdGhlIHBvbGl0aWNhbCBhY3Rpdml0eSBvZiB0aGUgR3JhY2NoaSBSb21lIG1hZGUgbm8gYWR2YW5jZSBpbiBncmVhdG5lc3MsIHdoZXJlYXMsIGluIGNvbnNlcXVlbmNlIG9mIHRoZSBhY2hpZXZlbWVudHMgb2YgQ2xlb21lbmVzLCB3aXRoaW4gYSBzaG9ydCB0aW1lIEdyZWVjZSBiZWhlbGQgU3BhcnRhIG1pc3RyZXNzIG9mIHRoZSBQZWxvcG9ubmVzdXMgYW5kIGNhcnJ5aW5nIG9uIGEgc3RydWdnbGUgZm9yIHRoZSBzdXByZW1hY3kgd2l0aCB0aG9zZSB3aG8gdGhlbiBoYWQgdGhlIGdyZWF0ZXN0IHBvd2VyLCB0aGUgb2JqZWN0IG9mIHdoaWNoIHN0cnVnZ2xlIHdhcyB0byBzZXQgR3JlZWNlIGZyZWUgZnJvbSBJbGx5cmlhbiBhbmQgR2FlbGljIHRyb29wcyBhbmQgYXJyYXkgaGVyIG9uY2UgbW9yZSB1bmRlciBkZXNjZW5kYW50cyBvZiBIZXJhY2xlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoaW5rLCB0b28sIHRoYXQgdGhlIHdheSBpbiB3aGljaCB0aGUgbWVuIGRpZWQgbWFrZXMgbWFuaWZlc3QgYSBkaWZmZXJlbmNlIGluIHRoZWlyIGhpZ2ggZXhjZWxsZW5jZS4gRm9yIHRoZSBHcmFjY2hpIGZvdWdodCBhZ2FpbnN0IHRoZWlyIGZlbGxvdyBjaXRpemVucywgYW5kIHRoZW4gZGllZCBhcyB0aGV5IHNvdWdodCB0byBtYWtlIHRoZWlyIGVzY2FwZTsgYnV0IGluIHRoZSBjYXNlIG9mIHRoZSBHcmVla3MsIEFnaXMgd291bGQgbm90IGtpbGwgYSBzaW5nbGUgY2l0aXplbiwgYW5kIHRoZXJlZm9yZSBkaWVkIHdoYXQgb25lIG1pZ2h0IGFsbW9zdCBjYWxsIGEgdm9sdW50YXJ5IGRlYXRoLCBhbmQgQ2xlb21lbmVzLCBhZnRlciBzZXR0aW5nIG91dCB0byBhdmVuZ2UgaGltc2VsZiBmb3IgaW5zdWx0cyBhbmQgd3JvbmdzLCBmb3VuZCB0aGUgb2NjYXNpb24gdW5mYXZvdXJhYmxlIGFuZCB3aXRoIGEgZ29vZCBjb3VyYWdlIHNsZXcgaGltc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFnYWluLCB3aGVuIHdlIHRha2UgdGhlIG9wcG9zaXRlIHZpZXcgb2YgdGhlaXIgcmVsYXRpdmUgbWVyaXRzLCBBZ2lzIGRpc3BsYXllZCBubyBkZWVkIHdvcnRoeSBvZiBhIGdyZWF0IGNvbW1hbmRlciwgYnV0IHdhcyBjdXQgb2ZmIHVudGltZWx5LCBhbmQgd2l0aCB0aGUgbWFueSBob25vdXJhYmxlIHZpY3RvcmllcyB3b24gYnkgQ2xlb21lbmVzIHdlIGNhbiBjb21wYXJlIHRoZSBjYXB0dXJlIG9mIHRoZSB3YWxsIGF0IENhcnRoYWdlIGJ5IFRpYmVyaXVzLCB3aGljaCB3YXMgbm8gdHJpZmxpbmcgZGVlZCwgYW5kIGhpcyB0cnVjZSBhdCBOdW1hbnRpYSwgYnkgd2hpY2ggdHdlbnR5IHRob3VzYW5kIFJvbWFuIHNvbGRpZXJzIHdobyBoYWQgbm8gb3RoZXIgaG9wZSBvZiBzYWx2YXRpb24gd2VyZSBzcGFyZWQ7IGFuZCBDYWl1cywgdG9vLCBtYW5pZmVzdGVkIGdyZWF0IGJyYXZlcnkgaW4gbWlsaXRhcnkgc2VydmljZSBhdCBob21lLCBhbmQgZ3JlYXQgYnJhdmVyeSBpbiBTYXJkaW5pYSwgc28gdGhhdCB0aGUgYnJvdGhlcnMgbWlnaHQgaGF2ZSB2aWVkIHN1Y2Nlc3NmdWxseSB3aXRoIHRoZSBmb3JlbW9zdCBSb21hbiBnZW5lcmFscywgaGFkIHRoZXkgbm90IGJlZW4gY3V0IG9mZiB1bnRpbWVseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoaW5rLCB0b28sIHRoYXQgdGhlIHdheSBpbiB3aGljaCB0aGUgbWVuIGRpZWQgbWFrZXMgbWFuaWZlc3QgYSBkaWZmZXJlbmNlIGluIHRoZWlyIGhpZ2ggZXhjZWxsZW5jZS4gRm9yIHRoZSBHcmFjY2hpIGZvdWdodCBhZ2FpbnN0IHRoZWlyIGZlbGxvdyBjaXRpemVucywgYW5kIHRoZW4gZGllZCBhcyB0aGV5IHNvdWdodCB0byBtYWtlIHRoZWlyIGVzY2FwZTsgYnV0IGluIHRoZSBjYXNlIG9mIHRoZSBHcmVla3MsIEFnaXMgd291bGQgbm90IGtpbGwgYSBzaW5nbGUgY2l0aXplbiwgYW5kIHRoZXJlZm9yZSBkaWVkIHdoYXQgb25lIG1pZ2h0IGFsbW9zdCBjYWxsIGEgdm9sdW50YXJ5IGRlYXRoLCBhbmQgQ2xlb21lbmVzLCBhZnRlciBzZXR0aW5nIG91dCB0byBhdmVuZ2UgaGltc2VsZiBmb3IgaW5zdWx0cyBhbmQgd3JvbmdzLCBmb3VuZCB0aGUgb2NjYXNpb24gdW5mYXZvdXJhYmxlIGFuZCB3aXRoIGEgZ29vZCBjb3VyYWdlIHNsZXcgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZ2Fpbiwgd2hlbiB3ZSB0YWtlIHRoZSBvcHBvc2l0ZSB2aWV3IG9mIHRoZWlyIHJlbGF0aXZlIG1lcml0cywgQWdpcyBkaXNwbGF5ZWQgbm8gZGVlZCB3b3J0aHkgb2YgYSBncmVhdCBjb21tYW5kZXIsIGJ1dCB3YXMgY3V0IG9mZiB1bnRpbWVseSwgYW5kIHdpdGggdGhlIG1hbnkgaG9ub3VyYWJsZSB2aWN0b3JpZXMgd29uIGJ5IENsZW9tZW5lcyB3ZSBjYW4gY29tcGFyZSB0aGUgY2FwdHVyZSBvZiB0aGUgd2FsbCBhdCBDYXJ0aGFnZSBieSBUaWJlcml1cywgd2hpY2ggd2FzIG5vIHRyaWZsaW5nIGRlZWQsIGFuZCBoaXMgdHJ1Y2UgYXQgTnVtYW50aWEsIGJ5IHdoaWNoIHR3ZW50eSB0aG91c2FuZCBSb21hbiBzb2xkaWVycyB3aG8gaGFkIG5vIG90aGVyIGhvcGUgb2Ygc2FsdmF0aW9uIHdlcmUgc3BhcmVkOyBhbmQgQ2FpdXMsIHRvbywgbWFuaWZlc3RlZCBncmVhdCBicmF2ZXJ5IGluIG1pbGl0YXJ5IHNlcnZpY2UgYXQgaG9tZSwgYW5kIGdyZWF0IGJyYXZlcnkgaW4gU2FyZGluaWEsIHNvIHRoYXQgdGhlIGJyb3RoZXJzIG1pZ2h0IGhhdmUgdmllZCBzdWNjZXNzZnVsbHkgd2l0aCB0aGUgZm9yZW1vc3QgUm9tYW4gZ2VuZXJhbHMsIGhhZCB0aGV5IG5vdCBiZWVuIGN1dCBvZmYgdW50aW1lbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlaXIgY2l2aWMgYWN0aXZpdGllcywgaG93ZXZlciwgQWdpcyB3b3VsZCBzZWVtIHRvIGhhdmUgdGFrZW4gaG9sZCBvZiB0aGluZ3Mgd2l0aCB0b28gbGl0dGxlIHNwaXJpdDsgaGUgd2FzIGJhZmZsZWQgYnkgQWdlc2lsYcO8cywgYW5kIGJyb2tlIGhpcyBwcm9taXNlIHRvIHRoZSBjaXRpemVucyBhYm91dCB0aGUgcmVkaXN0cmlidXRpb24gb2YgbGFuZHMsIGFuZCBpbiBhIHdvcmQgYWJhbmRvbmVkIGFuZCBsZWZ0IHVuZmluaXNoZWQgdGhlIGRlc2lnbnMgd2hpY2ggaGUgaGFkIGRlbGliZXJhdGVseSBmb3JtZWQgYW5kIGFubm91bmNlZCwgb3dpbmcgdG8gYSBsYWNrIG9mIGNvdXJhZ2UgZHVlIHRvIGhpcyB5b3V0aC4gQ2xlb21lbmVzLCBvbiB0aGUgY29udHJhcnksIHVuZGVydG9vayBoaXMgY2hhbmdlIG9mIHRoZSBjb25zdGl0dXRpb24gd2l0aCB0b28gbXVjaCByYXNobmVzcyBhbmQgdmlvbGVuY2UsIGtpbGxpbmcgdGhlIGVwaG9ycyBpbiB1bmxhd2Z1bCBmYXNoaW9uLCB3aGVuIGl0IHdvdWxkIGhhdmUgYmVlbiBlYXNpZXIgdG8gd2luIHRoZW0gb3ZlciB0byBoaXMgdmlld3Mgb3IgcmVtb3ZlIHRoZW0gYnkgc3VwZXJpb3JpdHkgaW4gYXJtcywganVzdCBhcyBoZSByZW1vdmVkIG1hbnkgb3RoZXJzIGZyb20gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIHJlc29ydCB0byB0aGUga25pZmUsIGV4Y2VwdCB1bmRlciBleHRyZW1lc3QgbmVjZXNzaXR5LCBpcyBub3QgdGhlIG1hcmsgZWl0aGVyIG9mIGEgZ29vZCBwaHlzaWNpYW4gb3Igc3RhdGVzbWFuLCBidXQgaW4gYm90aCBjYXNlcyBzaG93cyBhIGxhY2sgb2Ygc2tpbGwsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgc3RhdGVzbWFuIHRoZXJlIGlzIGFkZGVkIGJvdGggaW5qdXN0aWNlIGFuZCBjcnVlbHR5LiBOZWl0aGVyIG9mIHRoZSBHcmFjY2hpLCBob3dldmVyLCBpbml0aWF0ZWQgY2l2aWwgc2xhdWdodGVyLCBhbmQgQ2FpdXMsIHdlIGFyZSB0b2xkLCB3b3VsZCBub3QgcmVzb3J0IHRvIHNlbGYtZGVmZW5jZSBldmVuIHdoZW4gaGlzIGxpZmUgd2FzIHRocmVhdGVuZWQsIGJ1dCB0aG91Z2ggaGUgd2FzIGEgbW9zdCBicmlsbGlhbnQgc29sZGllciBpbiB0aGUgZmllbGQsIGhlIHNob3dlZCBoaW1zZWxmIG1vc3QgaW5hY3RpdmUgaW4gY2l2aWwgc3RyaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2VudCBmb3J0aCBmcm9tIGhpcyBob3VzZSB1bmFybWVkIGFuZCB3aXRoZHJldyB3aGVuIHRoZSBiYXR0bGUgYmVnYW4sIGFuZCBpbiBhIHdvcmQgd2FzIHNlZW4gdG8gYmUgbW9yZSBpbnRlbnQgdXBvbiBub3QgZG9pbmcgYW55IGhhcm0gdG8gb3RoZXJzIHRoYW4gdXBvbiBub3Qgc3VmZmVyaW5nIGhhcm0gaGltc2VsZi4gVGhlcmVmb3JlIHdlIG11c3QgaG9sZCB0aGF0IHRoZSBmbGlnaHQgb2YgdGhlIGJyb3RoZXJzIHdhcyBub3QgYSBtYXJrIG9mIGNvd2FyZGljZSwgYnV0IG9mIGNhdXRpb24uIEZvciB0aGV5IHdlcmUgb2JsaWdlZCBlaXRoZXIgdG8geWllbGQgdG8gdGhlaXIgYXNzYWlsYW50cywgb3IsIGluIGNhc2UgdGhleSBoZWxkIHRoZWlyIGdyb3VuZCwgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgYWN0aXZlbHkgYWdhaW5zdCBoYXJtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGVpciBjaXZpYyBhY3Rpdml0aWVzLCBob3dldmVyLCBBZ2lzIHdvdWxkIHNlZW0gdG8gaGF2ZSB0YWtlbiBob2xkIG9mIHRoaW5ncyB3aXRoIHRvbyBsaXR0bGUgc3Bpcml0OyBoZSB3YXMgYmFmZmxlZCBieSBBZ2VzaWxhw7xzLCBhbmQgYnJva2UgaGlzIHByb21pc2UgdG8gdGhlIGNpdGl6ZW5zIGFib3V0IHRoZSByZWRpc3RyaWJ1dGlvbiBvZiBsYW5kcywgYW5kIGluIGEgd29yZCBhYmFuZG9uZWQgYW5kIGxlZnQgdW5maW5pc2hlZCB0aGUgZGVzaWducyB3aGljaCBoZSBoYWQgZGVsaWJlcmF0ZWx5IGZvcm1lZCBhbmQgYW5ub3VuY2VkLCBvd2luZyB0byBhIGxhY2sgb2YgY291cmFnZSBkdWUgdG8gaGlzIHlvdXRoLiBDbGVvbWVuZXMsIG9uIHRoZSBjb250cmFyeSwgdW5kZXJ0b29rIGhpcyBjaGFuZ2Ugb2YgdGhlIGNvbnN0aXR1dGlvbiB3aXRoIHRvbyBtdWNoIHJhc2huZXNzIGFuZCB2aW9sZW5jZSwga2lsbGluZyB0aGUgZXBob3JzIGluIHVubGF3ZnVsIGZhc2hpb24sIHdoZW4gaXQgd291bGQgaGF2ZSBiZWVuIGVhc2llciB0byB3aW4gdGhlbSBvdmVyIHRvIGhpcyB2aWV3cyBvciByZW1vdmUgdGhlbSBieSBzdXBlcmlvcml0eSBpbiBhcm1zLCBqdXN0IGFzIGhlIHJlbW92ZWQgbWFueSBvdGhlcnMgZnJvbSB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIHJlc29ydCB0byB0aGUga25pZmUsIGV4Y2VwdCB1bmRlciBleHRyZW1lc3QgbmVjZXNzaXR5LCBpcyBub3QgdGhlIG1hcmsgZWl0aGVyIG9mIGEgZ29vZCBwaHlzaWNpYW4gb3Igc3RhdGVzbWFuLCBidXQgaW4gYm90aCBjYXNlcyBzaG93cyBhIGxhY2sgb2Ygc2tpbGwsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgc3RhdGVzbWFuIHRoZXJlIGlzIGFkZGVkIGJvdGggaW5qdXN0aWNlIGFuZCBjcnVlbHR5LiBOZWl0aGVyIG9mIHRoZSBHcmFjY2hpLCBob3dldmVyLCBpbml0aWF0ZWQgY2l2aWwgc2xhdWdodGVyLCBhbmQgQ2FpdXMsIHdlIGFyZSB0b2xkLCB3b3VsZCBub3QgcmVzb3J0IHRvIHNlbGYtZGVmZW5jZSBldmVuIHdoZW4gaGlzIGxpZmUgd2FzIHRocmVhdGVuZWQsIGJ1dCB0aG91Z2ggaGUgd2FzIGEgbW9zdCBicmlsbGlhbnQgc29sZGllciBpbiB0aGUgZmllbGQsIGhlIHNob3dlZCBoaW1zZWxmIG1vc3QgaW5hY3RpdmUgaW4gY2l2aWwgc3RyaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3ZW50IGZvcnRoIGZyb20gaGlzIGhvdXNlIHVuYXJtZWQgYW5kIHdpdGhkcmV3IHdoZW4gdGhlIGJhdHRsZSBiZWdhbiwgYW5kIGluIGEgd29yZCB3YXMgc2VlbiB0byBiZSBtb3JlIGludGVudCB1cG9uIG5vdCBkb2luZyBhbnkgaGFybSB0byBvdGhlcnMgdGhhbiB1cG9uIG5vdCBzdWZmZXJpbmcgaGFybSBoaW1zZWxmLiBUaGVyZWZvcmUgd2UgbXVzdCBob2xkIHRoYXQgdGhlIGZsaWdodCBvZiB0aGUgYnJvdGhlcnMgd2FzIG5vdCBhIG1hcmsgb2YgY293YXJkaWNlLCBidXQgb2YgY2F1dGlvbi4gRm9yIHRoZXkgd2VyZSBvYmxpZ2VkIGVpdGhlciB0byB5aWVsZCB0byB0aGVpciBhc3NhaWxhbnRzLCBvciwgaW4gY2FzZSB0aGV5IGhlbGQgdGhlaXIgZ3JvdW5kLCB0byBkZWZlbmQgdGhlbXNlbHZlcyBhY3RpdmVseSBhZ2FpbnN0IGhhcm0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHRoZSBncmVhdGVzdCBvZiB0aGUgYWNjdXNhdGlvbnMgYWdhaW5zdCBUaWJlcml1cyBpcyB0aGF0IGhlIGRlcG9zZWQgaGlzIGNvbGxlYWd1ZSBmcm9tIHRoZSB0cmlidW5lc2hpcCBhbmQgY2FudmFzc2VkIGZvciBhIHNlY29uZCB0cmlidW5lc2hpcCBoaW1zZWxmOyBhbmQgYXMgZm9yIENhaXVzLCB0aGUgbXVyZGVyIG9mIEFudHlsbGl1cyB3YXMgdW5qdXN0bHkgYW5kIGZhbHNlbHkgYXR0cmlidXRlZCB0byBoaW0sIGZvciBpdCBoYXBwZW5lZCBjb250cmFyeSB0byBoaXMgd2lzaGVzIGFuZCBtdWNoIHRvIGhpcyBkaXNwbGVhc3VyZS4gQnV0IENsZW9tZW5lcywgbm90IHRvIG1lbnRpb24gYWdhaW4gaGlzIHNsYXVnaHRlciBvZiB0aGUgZXBob3JzLCBzZXQgZnJlZSBhbGwgdGhlIHNsYXZlcywgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdhcyBraW5nIGJ5IGhpbXNlbGYgaW4gcG9pbnQgb2YgZmFjdCwgdGhvdWdoIG5vbWluYWxseSB3aXRoIGFub3RoZXIsIGFmdGVyIGhlIGhhZCBjaG9zZW4gaGlzIGJyb3RoZXIgRXVjbGVpZGFzLCBhIG1hbiBmcm9tIHRoZSBzYW1lIGhvdXNlLCBhcyBoaXMgY29sbGVhZ3VlOyBhbmQgaGUgcGVyc3VhZGVkIEFyY2hpZGFtdXMsIHdobyBiZWxvbmdlZCB0byB0aGUgb3RoZXIgaG91c2UgYW5kIHNob3VsZCBoYXZlIGJlZW4gaGlzIGNvbGxlYWd1ZSBvbiB0aGUgdGhyb25lLCB0byBjb21lIGJhY2sgdG8gU3BhcnRhIGZyb20gTWVzc2VuZSwgYW5kIHVwb24gaGlzIGRlYXRoLCBieSBub3QgZm9sbG93aW5nIHVwIHRoZSBtdXJkZXIsIGhlIGZpeGVkIHVwb24gaGltc2VsZiB0aGUgYmxhbWUgZm9yIGhpcyB0YWtpbmcgb2ZmLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IEx5Y3VyZ3VzLCB3aG9tIGhlIHByb2Zlc3NlZCB0byBpbWl0YXRlLCB2b2x1bnRhcmlseSBzdXJyZW5kZXJlZCB0aGUgcm95YWwgcG93ZXIgdG8gQ2hhcmlsbHVzIGhpcyBicm90aGVyJ3Mgc29uLCBhbmQgYmVjYXVzZSBoZSBmZWFyZWQgbGVzdCwgaWYgdGhlIHlvdW5nIG1hbiBzaG91bGQgZGllIGJ5IGFub3RoZXIncyBoYW5kLCBzb21lIGJsYW1lIG1pZ2h0IGF0dGFjaCB0byBoaW1zZWxmLCBoZSB3YW5kZXJlZCBhIGxvbmcgdGltZSBpbiBmb3JlaWduIHBhcnRzLCBhbmQgd291bGQgbm90IGNvbWUgYmFjayB1bnRpbCBhIHNvbiBoYWQgYmVlbiBib3JuIHRvIENoYXJpbGx1cyB3aG8gc2hvdWxkIHN1Y2NlZWQgdG8gaGlzIG9mZmljZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDMuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5MeWN1cmd1czwvdGl0bGU+LCBpaWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEhvd2V2ZXIsIHdpdGggTHljdXJndXMgbm8gb3RoZXIgR3JlZWsgaXMgd29ydGh5IHRvIGJlIGNvbXBhcmVkOyBidXQgdGhhdCB0aGUgcG9saXRpY2FsIG1lYXN1cmVzIG9mIENsZW9tZW5lcyB3ZXJlIG1hcmtlZCBieSBncmVhdGVyIGlubm92YXRpb25zIGFuZCBpbGxlZ2FsaXRpZXMgdGhhbiB0aG9zZSBvZiB0aGUgR3JhY2NoaSwgaXMgZXZpZGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluZGVlZCB0aG9zZSB3aG8gYXJlIGluY2xpbmVkIHRvIGNyaXRpY2l6ZSB0aGVpciBjaGFyYWN0ZXJzIGFjY3VzZSB0aGUgdHdvIEdyZWVrcyBvZiBoYXZpbmcgYmVlbiBmcm9tIHRoZSBvdXRzZXQgb3ZlciBmb25kIG9mIHBvd2VyIGFuZCBzdHJpZmUsIGFuZCB0aGUgdHdvIFJvbWFucyBvZiBoYXZpbmcgYmVlbiBieSBuYXR1cmUgaW1tb2RlcmF0ZWx5IGFtYml0aW91cywgdGhvdWdoIHRoZWlyIGRldHJhY3RvcnMgY291bGQgYnJpbmcgbm8gb3RoZXIgY2hhcmdlIGFnYWluc3QgdGhlbTsgbmF5LCBpdCB3YXMgYWdyZWVkIHRoYXQgdGhleSB3ZXJlIGNhdWdodCB1cCBieSB0aGUgZnVyeSBvZiB0aGUgY29udGVzdCB3aXRoIHRoZWlyIG9wcG9uZW50cyBhbmQgYnkgYSBwYXNzaW9uIGNvbnRyYXJ5IHRvIHRoZWlyIG93biBuYXR1cmFsIGJlbnQsIGFzIGJ5IGJsYXN0cyBvZiB3aW5kLCBhbmQgc28gbGV0IHRoZSBzdGF0ZSBkcml2ZSBpbnRvIGV4dHJlbWVzdCBkYW5nZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGF0IGNvdWxkIGJlIG1vcmUganVzdCBhbmQgaG9ub3VyYWJsZSB0aGFuIHRoZWlyIG9yaWdpbmFsIGRlc2lnbj8gQW5kIHRoZXkgd291bGQgaGF2ZSBzdWNjZWVkZWQgaW4gaXQsIGhhZCBub3QgdGhlIHBhcnR5IG9mIHRoZSByaWNoLCBieSB0aGVpciB2aW9sZW50IGFuZCBwYXJ0aXNhbiBhdHRlbXB0cyB0byBhYnJvZ2F0ZSB0aGUgYWdyYXJpYW4gbGF3LCBpbnZvbHZlZCBib3RoIG9mIHRoZW0gaW4gZmllcmNlIHN0cnVnZ2xlcywgVGliZXJpdXMgdGhyb3VnaCBmZWFyIGZvciBoaXMgb3duIGxpZmUsIGFuZCBDYWl1cyBpbiBhbiBlZmZvcnQgdG8gYXZlbmdlIGhpcyBicm90aGVyLCB3aG8gaGFkIGJlZW4gc2xhaW4gd2l0aG91dCBqdXN0aWNlIG9yIHNlbmF0b3JpYWwgZGVjcmVlIGFuZCB3aXRob3V0IHRoZSBjb25jdXJyZW5jZSBldmVuIG9mIGEgbWFnaXN0cmF0ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgdGhlIGdyZWF0ZXN0IG9mIHRoZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IFRpYmVyaXVzIGlzIHRoYXQgaGUgZGVwb3NlZCBoaXMgY29sbGVhZ3VlIGZyb20gdGhlIHRyaWJ1bmVzaGlwIGFuZCBjYW52YXNzZWQgZm9yIGEgc2Vjb25kIHRyaWJ1bmVzaGlwIGhpbXNlbGY7IGFuZCBhcyBmb3IgQ2FpdXMsIHRoZSBtdXJkZXIgb2YgQW50eWxsaXVzIHdhcyB1bmp1c3RseSBhbmQgZmFsc2VseSBhdHRyaWJ1dGVkIHRvIGhpbSwgZm9yIGl0IGhhcHBlbmVkIGNvbnRyYXJ5IHRvIGhpcyB3aXNoZXMgYW5kIG11Y2ggdG8gaGlzIGRpc3BsZWFzdXJlLiBCdXQgQ2xlb21lbmVzLCBub3QgdG8gbWVudGlvbiBhZ2FpbiBoaXMgc2xhdWdodGVyIG9mIHRoZSBlcGhvcnMsIHNldCBmcmVlIGFsbCB0aGUgc2xhdmVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3YXMga2luZyBieSBoaW1zZWxmIGluIHBvaW50IG9mIGZhY3QsIHRob3VnaCBub21pbmFsbHkgd2l0aCBhbm90aGVyLCBhZnRlciBoZSBoYWQgY2hvc2VuIGhpcyBicm90aGVyIEV1Y2xlaWRhcywgYSBtYW4gZnJvbSB0aGUgc2FtZSBob3VzZSwgYXMgaGlzIGNvbGxlYWd1ZTsgYW5kIGhlIHBlcnN1YWRlZCBBcmNoaWRhbXVzLCB3aG8gYmVsb25nZWQgdG8gdGhlIG90aGVyIGhvdXNlIGFuZCBzaG91bGQgaGF2ZSBiZWVuIGhpcyBjb2xsZWFndWUgb24gdGhlIHRocm9uZSwgdG8gY29tZSBiYWNrIHRvIFNwYXJ0YSBmcm9tIE1lc3NlbmUsIGFuZCB1cG9uIGhpcyBkZWF0aCwgYnkgbm90IGZvbGxvd2luZyB1cCB0aGUgbXVyZGVyLCBoZSBmaXhlZCB1cG9uIGhpbXNlbGYgdGhlIGJsYW1lIGZvciBoaXMgdGFraW5nIG9mZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgTHljdXJndXMsIHdob20gaGUgcHJvZmVzc2VkIHRvIGltaXRhdGUsIHZvbHVudGFyaWx5IHN1cnJlbmRlcmVkIHRoZSByb3lhbCBwb3dlciB0byBDaGFyaWxsdXMgaGlzIGJyb3RoZXIncyBzb24sIGFuZCBiZWNhdXNlIGhlIGZlYXJlZCBsZXN0LCBpZiB0aGUgeW91bmcgbWFuIHNob3VsZCBkaWUgYnkgYW5vdGhlcidzIGhhbmQsIHNvbWUgYmxhbWUgbWlnaHQgYXR0YWNoIHRvIGhpbXNlbGYsIGhlIHdhbmRlcmVkIGEgbG9uZyB0aW1lIGluIGZvcmVpZ24gcGFydHMsIGFuZCB3b3VsZCBub3QgY29tZSBiYWNrIHVudGlsIGEgc29uIGhhZCBiZWVuIGJvcm4gdG8gQ2hhcmlsbHVzIHdobyBzaG91bGQgc3VjY2VlZCB0byBoaXMgb2ZmaWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDMuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkx5Y3VyZ3VzPC90aXRsZT4sIGlpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSG93ZXZlciwgd2l0aCBMeWN1cmd1cyBubyBvdGhlciBHcmVlayBpcyB3b3J0aHkgdG8gYmUgY29tcGFyZWQ7IGJ1dCB0aGF0IHRoZSBwb2xpdGljYWwgbWVhc3VyZXMgb2YgQ2xlb21lbmVzIHdlcmUgbWFya2VkIGJ5IGdyZWF0ZXIgaW5ub3ZhdGlvbnMgYW5kIGlsbGVnYWxpdGllcyB0aGFuIHRob3NlIG9mIHRoZSBHcmFjY2hpLCBpcyBldmlkZW50LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMy41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgaWlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THljdXJndXM8L3RpdGxlPiwgaWlpLiA1LjwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhvc2Ugd2hvIGFyZSBpbmNsaW5lZCB0byBjcml0aWNpemUgdGhlaXIgY2hhcmFjdGVycyBhY2N1c2UgdGhlIHR3byBHcmVla3Mgb2YgaGF2aW5nIGJlZW4gZnJvbSB0aGUgb3V0c2V0IG92ZXIgZm9uZCBvZiBwb3dlciBhbmQgc3RyaWZlLCBhbmQgdGhlIHR3byBSb21hbnMgb2YgaGF2aW5nIGJlZW4gYnkgbmF0dXJlIGltbW9kZXJhdGVseSBhbWJpdGlvdXMsIHRob3VnaCB0aGVpciBkZXRyYWN0b3JzIGNvdWxkIGJyaW5nIG5vIG90aGVyIGNoYXJnZSBhZ2FpbnN0IHRoZW07IG5heSwgaXQgd2FzIGFncmVlZCB0aGF0IHRoZXkgd2VyZSBjYXVnaHQgdXAgYnkgdGhlIGZ1cnkgb2YgdGhlIGNvbnRlc3Qgd2l0aCB0aGVpciBvcHBvbmVudHMgYW5kIGJ5IGEgcGFzc2lvbiBjb250cmFyeSB0byB0aGVpciBvd24gbmF0dXJhbCBiZW50LCBhcyBieSBibGFzdHMgb2Ygd2luZCwgYW5kIHNvIGxldCB0aGUgc3RhdGUgZHJpdmUgaW50byBleHRyZW1lc3QgZGFuZ2VyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGF0IGNvdWxkIGJlIG1vcmUganVzdCBhbmQgaG9ub3VyYWJsZSB0aGFuIHRoZWlyIG9yaWdpbmFsIGRlc2lnbj8gQW5kIHRoZXkgd291bGQgaGF2ZSBzdWNjZWVkZWQgaW4gaXQsIGhhZCBub3QgdGhlIHBhcnR5IG9mIHRoZSByaWNoLCBieSB0aGVpciB2aW9sZW50IGFuZCBwYXJ0aXNhbiBhdHRlbXB0cyB0byBhYnJvZ2F0ZSB0aGUgYWdyYXJpYW4gbGF3LCBpbnZvbHZlZCBib3RoIG9mIHRoZW0gaW4gZmllcmNlIHN0cnVnZ2xlcywgVGliZXJpdXMgdGhyb3VnaCBmZWFyIGZvciBoaXMgb3duIGxpZmUsIGFuZCBDYWl1cyBpbiBhbiBlZmZvcnQgdG8gYXZlbmdlIGhpcyBicm90aGVyLCB3aG8gaGFkIGJlZW4gc2xhaW4gd2l0aG91dCBqdXN0aWNlIG9yIHNlbmF0b3JpYWwgZGVjcmVlIGFuZCB3aXRob3V0IHRoZSBjb25jdXJyZW5jZSBldmVuIG9mIGEgbWFnaXN0cmF0ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB3aGF0IGhhcyBiZWVuIHNhaWQsIHRoZW4sIG15IHJlYWRlciB3aWxsIHBlcmNlaXZlIGZvciBoaW1zZWxmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlc2UgbWVuOyBidXQgaWYgSSBhbSB0byBleHByZXNzIG15IG9waW5pb24gb2YgdGhlbSBpbmRpdmlkdWFsbHksIEkgc2hvdWxkIHNheSB0aGF0IFRpYmVyaXVzIGxlZCB0aGVtIGFsbCBpbiBleGVtcGxhcnkgdmlydHVlcywgdGhhdCB0aGUgeW91dGhmdWwgQWdpcyBjb21taXR0ZWQgdGhlIGZld2VzdCBlcnJvcnMsIGFuZCB0aGF0IGluIGFjaGlldmVtZW50IGFuZCBjb3VyYWdlIENhaXVzIGZlbGwgZmFyIHNob3J0IG9mIENsZW9tZW5lcy4KCQkJPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
