var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHJlbWFpbnMgZm9yIHVzLCBBdGhlbmlhbnMsIGVzcGVjaWFsbHkgd2hlbgogICAgICAgICAgICAgICAgICAgIGNvbnRlc3RpbmcgYSBjYXNlIG5ldmVyIHBhcmFsbGVsZWQgaW4gdGhlIGV4cGVyaWVuY2Ugb2YgdGhlIGNpdHksIHRvIG1ha2UgYQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgZXhob3J0YXRpb24gdG8geW91IGFsbC4gTWF5IHdlIGFzayB5b3UgZmlyc3QgdG8gcGFyZG9uIHRob3NlIG9mIHVzIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgc3RpbGwgdG8gc3BlYWsgaWYgdGhlcmUgYXJlIGNlcnRhaW4gcG9pbnRzIHdoaWNoIHdlIHJhaXNlIGFnYWluOyBvdXIgYWltIGlzCiAgICAgICAgICAgICAgICAgICAgbm90IHRvIHdlYXJ5IHlvdSBieSBhbGx1ZGluZyB0d2ljZSB0byB0aGUgc2FtZSBtYXR0ZXJzIGJ1dCB0byBhcm91c2UgeW91ciBhbmdlcgogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgbW9yZS4gU2Vjb25kbHksIG1heSB3ZSBhc2sgeW91IG5vdCB0byBzdXJyZW5kZXIgdGhlIHJpZ2h0cyBlbmpveWVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIGNpdHkgb3IgdG8gYmFydGVyIGF3YXkgb3VyIGNvbW1vbiBzZWN1cml0eSBpbiBleGNoYW5nZSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzIG9mIHRoZSBkZWZlbmRhbnQuIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPllvdSBhcmUgYXdhcmUsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB0aGF0IHdoZXJlYXMgdGhpcyBtYW4gRGVtb3N0aGVuZXMgaXMgaGVyZSBmb3IganVkZ2VtZW50IGJlZm9yZSB5b3UsCiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBvbiB0cmlhbCBiZWZvcmUgeW91ciBmZWxsb3dzLiBGb3IgdGhleSBhcmUgd2FpdGluZyB0byBzZWUgd2hhdCBraW5kIG9mCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbiB5b3Ugd2lsbCByZWFjaCBhYm91dCB5b3VyIGNvdW50cnkncyBpbnRlcmVzdHM6IGFyZSB5b3UgZ29pbmcgdG8KICAgICAgICAgICAgICAgICAgICB3ZWxjb21lIGludG8geW91ciBtaWRzdCB0aGUgcHJpdmF0ZSB2ZW5hbGl0eSBhbmQgY29ycnVwdGlvbiBvZiB0aGVzZSBwZW9wbGUsIG9yCiAgICAgICAgICAgICAgICAgICAgd2lsbCB5b3UgbWFrZSBpdCB1bml2ZXJzYWxseSBrbm93biB0aGF0IHlvdSBoYXRlIG1lbiB3aG8gYWNjZXB0IGJyaWJlcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY2l0eSBhbmQgdGhhdCwgaW4gb3JkZXJpbmcgdGhlIEFyZW9wYWd1cyB0byBtYWtlIGl0cyBpbnF1aXJ5LCB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9uIHdhcyBub3QgdG8gYWNxdWl0IHRoZSBjdWxwcml0cyBidXQgcmF0aGVyLCB3aGVuIHRoZSBjb3VuY2lsbG9ycyBoYWQKICAgICAgICAgICAgICAgICAgICBtYWRlIHRoZWlyIHJlcG9ydCwgdG8gZXhhY3QgcHVuaXNobWVudCBpbiBhIG1hbm5lciBhcHByb3ByaWF0ZSB0byB0aGUgY3JpbWVzPwogICAgICAgICAgICAgICAgICAgIFRoaXMgZGVjaXNpb24gdGhlbiByZXN0cyB3aXRoIHlvdSBub3cuIDwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSBwYXNzZWQgYSBsYXdmdWwgZGVjcmVlIGFuZCBldmVyeSBjaXRpemVuIHdpc2hlZCB0byBkaXNjb3ZlciB3aGljaCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwb2xpdGljaWFucyBoYWQgZGFyZWQgdG8gYWNjZXB0IG1vbmV5IGZyb20gSGFycGFsdXMgdG8gdGhlIGRpc2NyZWRpdCBhbmQKICAgICAgICAgICAgICAgICAgICBkYW5nZXIgb2YgdGhlIGNpdHk7IHdoZW4sIG1vcmVvdmVyLCB5b3UsIERlbW9zdGhlbmVzLCBhbmQgbWFueSBvdGhlcnMgaGFkCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgaW4gYSBkZWNyZWUgdGhhdCB0aGUgQXJlb3BhZ3VzLCBhY2NvcmRpbmcgdG8gaXRzIHRyYWRpdGlvbmFsIHJpZ2h0LAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBob2xkIGFuIGlucXVpcnkgdG8gZGlzY292ZXIgaWYgYW55IG9mIHRoZW0gaGFkIHJlY2VpdmVkIGdvbGQgZnJvbQogICAgICAgICAgICAgICAgICAgIEhhcnBhbHVzLCB0aGUgQXJlb3BhZ3VzIGJlZ2FuIGl0cyBpbnZlc3RpZ2F0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIHJlYWNoaW5nIGEganVzdCBkZWNpc2lvbiBpdCBwYWlkIG5vIGhlZWQgdG8geW91ciBjaGFsbGVuZ2VzLCBEZW1vc3RoZW5lcywKICAgICAgICAgICAgICAgICAgICBub3IgZGlkIGl0IHdpc2ggdG8gcGVydmVydCB0aGUgdHJ1dGggb3IgZGVzdHJveSBpdHMgb3duIHJlcHV0YXRpb24gb24geW91cgogICAgICAgICAgICAgICAgICAgIGFjY291bnQuIE9uIHRoZSBjb250cmFyeSwgZ2VudGxlbWVuLCBhbHRob3VnaCwgYXMgdGhlIEFyZW9wYWdpdGVzIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICBzYWlkLCB0aGUgY291bmNpbCByZWFsaXplZCBiZWZvcmVoYW5kIHRoZSBzdHJlbmd0aCBvZiB0aGVzZSBtZW4gYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaW5mbHVlbmNlIGFzIG9yYXRvcnMgYW5kIHN0YXRlc21lbiwgaXQgZGlkIG5vdCBjb25zaWRlciB0aGF0IGlmIGluY3JpbWluYXRpb24gb3IKICAgICAgICAgICAgICAgICAgICBkYW5nZXIgd2FzIHRocmVhdGVuaW5nIGl0cyBjb3VudHJ5IGl0IG91Z2h0IHRvIGJlIGluZmx1ZW5jZWQgYnkgYW55CiAgICAgICAgICAgICAgICAgICAgbWlzcmVwcmVzZW50YXRpb24gbGlrZWx5IHRvIGJlIHB1Ymxpc2hlZCBhYm91dCBpdHNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['1.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCB0aGlzIGludmVzdGlnYXRpb24gaGFzIGJlZW4gY29uZHVjdGVkLCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUncyBvcGluaW9uLCBib3RoIGZhaXJseSBhbmQgcHJvZml0YWJseSwgYWNjdXNhdGlvbnMsIGNoYWxsZW5nZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGNhbHVtbmllcyBhcmUgcHJvY2VlZGluZyBmcm9tIERlbW9zdGhlbmVzLCBzaW5jZSBoZSBoYXMgYmVlbiBsaXN0ZWQgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyIG9mIHR3ZW50eSB0YWxlbnRzIG9mIGdvbGQuIFdpbGwgdGhhdCBjb3VuY2lsIHRoZW4gd2hpY2gsIGluIGNhc2VzIG9mCiAgICAgICAgICAgICAgICAgICAgd2lsbGZ1bF0gbXVyZGVyLCBpcyB0cnVzdHdvcnRoeSBlbm91Z2ggdG8gYXJyaXZlIGF0IHRydXRoIGFuZCBqdXN0aWNlIGFuZCBpcwogICAgICAgICAgICAgICAgICAgIGVtcG93ZXJlZCB0byBwYXNzIGp1ZGdlbWVudCBpbiBtYXR0ZXJzIG9mIGxpZmUgYW5kIGRlYXRoIG9uIGVhY2ggb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMsIHRvIHRha2UgdXAgdGhlIGNhdXNlIG9mIHRob3NlIHdobyBoYXZlIG1ldCBhIHZpb2xlbnQgZW5kIGFuZCBiYW5pc2ggb3IKICAgICAgICAgICAgICAgICAgICBleGVjdXRlIGFueSBpbiB0aGUgY2l0eSB3aG8gaGF2ZSBicm9rZW4gdGhlIGxhdyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWZ0ZXIgdGhlIHJlc3RvcmF0aW9uIG9mIHRoZSBkZW1vY3JhY3kgaW4gPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLiB0aGUgQXJlb3BhZ3VzIHBsYXllZCBhIG1vcmUgaW1wb3J0YW50IHBhcnQgaW4gcHVibGljIGFmZmFpcnMgdGhhbiBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJlY2VkaW5nIGhhbGYtY2VudHVyeS4gSXQgZGVhbHQgd2l0aCBhbGwgY2FzZXMgb2Ygdm9sdW50YXJ5IGhvbWljaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzb21ldGltZXMgd2l0aCBwb2xpdGljYWwgY2FzZXMgYWxzbywgd2hlbiBpdCBjb3VsZCBhY3QgZWl0aGVyIG9uIGl0cyBvd24KICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGl2ZSDvvIhjZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjYzIiB2YWxpZD0ieWVzIj5EaW4uIDEuNjM8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEzMyIgdmFsaWQ9InllcyI+RGVtLiAxOC4xMzM8L2JpYmw+77yJIG9yIGluIHJlc3BvbnNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZW9wbGUncyByZXF1ZXN0LCBhcyBpbiB0aGUgcHJlc2VudCBpbnN0YW5jZS4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS41MCIgdmFsaWQ9InllcyI+RGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS41MDwvYmlibD4uPC9ub3RlPiBiZSBwb3dlcmxlc3Mgbm93IHRvIGFkbWluaXN0ZXIganVzdGljZSBvdmVyIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IGNyZWRpdGVkIHRvIERlbW9zdGhlbmVzPyA8ZGF0ZSBhdXRobmFtZT0iLTQwMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQwMyI+NDAzPC9kYXRlPgogICAgICAgICAgICAgICAgICAgICAgICBCLkMuIHRoZSBBcmVvcGFndXMgcGxheWVkIGEgbW9yZSBpbXBvcnRhbnQgcGFydCBpbiBwdWJsaWMgYWZmYWlycyB0aGFuIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcmVjZWRpbmcgaGFsZi1jZW50dXJ5LiBJdCBkZWFsdCB3aXRoIGFsbCBjYXNlcyBvZiB2b2x1bnRhcnkgaG9taWNpZGUKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNvbWV0aW1lcyB3aXRoIHBvbGl0aWNhbCBjYXNlcyBhbHNvLCB3aGVuIGl0IGNvdWxkIGFjdCBlaXRoZXIgb24gaXRzIG93bgogICAgICAgICAgICAgICAgICAgICAgICBpbml0aWF0aXZlIO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuNjMiIHZhbGlkPSJ5ZXMiPkRpbi4gMS42MzwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTMzIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjEzMzwvYmlibD7vvIkgb3IgaW4gcmVzcG9uc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlb3BsZSdzIHJlcXVlc3QsIGFzIGluIHRoZSBwcmVzZW50IGluc3RhbmNlLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjUwIiB2YWxpZD0ieWVzIj5EaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjUwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['1.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCB3aWxsOyBmb3IgdGhlIGNvdW5jaWwgaGFzIHRvbGQgbGllcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMuIFRoaXMgaXMgdGhlIGNyb3duaW5nIGFyZ3VtZW50IGluIGhpcyBjYXNlLiBJdCBoYXMgdG9sZCBsaWVzLCBoYXMKICAgICAgICAgICAgICAgICAgICBpdCwgYWdhaW5zdCB5b3UgYW5kIERlbWFkZXM6IG1lbiBhZ2FpbnN0IHdob20gaXQgaXMgZXZpZGVudGx5IG5vdCBldmVuIHNhZmUgdG8KICAgICAgICAgICAgICAgICAgICBzcGVhayB0aGUgdHJ1dGg7IHRob3VnaCB5b3UgcHJldmlvdXNseSBpbnN0cnVjdGVkIHRoZSBBcmVvcGFndXMgdG8gaW52ZXN0aWdhdGUKICAgICAgICAgICAgICAgICAgICBtYW55IHB1YmxpYyBtYXR0ZXJzIGFuZCBleHByZXNzZWQgYXBwcm92YWwgb2YgaXQgZm9yIHRoZSBpbnF1aXJpZXMgd2hpY2ggaXQgaGFkCiAgICAgICAgICAgICAgICAgICAgaGVsZD8gQXJlIHRoZSBpbmRpY3RtZW50cyB3aGljaCB0aGUgY291bmNpbCBoYXMgbWFkZSBhZ2FpbnN0IHRoZXNlIG1lbiBmYWxzZQogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHdob2xlIGNpdHkgY2Fubm90IGNvbXBlbCB0aGVtIHRvIGRvIHJpZ2h0PyBHcmVhdCBIZWF2ZW5zISA8L3RyYW5zbGF0aW9uPg=="
translation['1.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gd2h5LCBEZW1vc3RoZW5lcywgZGlkIHlvdSBhZ3JlZSBpbiB0aGUgQXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICB0byBhIHBlbmFsdHkgb2YgZGVhdGggZm9yIHlvdXJzZWxmLCBpZiB0aGUgcmVwb3J0IG9mIHRoZSBjb3VuY2lsIHNob3VsZCB0dXJuIG91dAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgeW91PyBBbmQgd2h5IGhhdmUgeW91IHlvdXJzZWxmIHJ1aW5lZCBtYW55IG90aGVycyBieSBpbnNpc3Rpbmcgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZmluZGluZ3Mgb2YgdGhlIGNvdW5jaWw/IFRvIHdoYXQgYXV0aG9yaXR5IHNob3VsZCB0aGUgcGVvcGxlIG5vdyByZWZlciwgb3IgdG8KICAgICAgICAgICAgICAgICAgICB3aG9tIHNob3VsZCBpdCBlbnRydXN0IHRoZSBpbnF1aXJ5IGluIHRoZSBldmVudCBvZiBteXN0ZXJpb3VzIG9yIG1vbWVudG91cwogICAgICAgICAgICAgICAgICAgIGNyaW1lcywgaWYgaXQgaXMgdG8gZGlzY292ZXIgdGhlIHRydXRoPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VuY2lsIHdoaWNoIGZvcm1lcmx5IGNvbW1hbmRlZCBjb25maWRlbmNlIGlzIGJlaW5nIGRpc2NyZWRpdGVkIGJ5IHlvdSwgd2hvCiAgICAgICAgICAgICAgICAgICAgY2xhaW0gdG8gYmUgdGhlIHBlb3BsZSdzIG1hbiwgdGhvdWdoIGl0IGlzIGEgYm9keSB0byB3aGljaCB0aGUgcGVvcGxlIGdhdmUgaW4KICAgICAgICAgICAgICAgICAgICB0cnVzdCB0aGUgcHJvdGVjdGlvbiBvZiB0aGVpciBsaXZlcywgdG8gd2hvc2UgY2hhcmdlIHRoZXkgaGF2ZSBvZnRlbiBjb21taXR0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb25zdGl0dXRpb24gYW5kIGRlbW9jcmFjeSwgYSBjb3VuY2lsIHdoaWNoLCBkZXN0aW5lZCB0aG91Z2ggeW91IHdlcmUgdG8KICAgICAgICAgICAgICAgICAgICBtYWxpZ24gaXQsIGhhcyBzYWZlZ3VhcmRlZCB5b3VyIGxpZmUsIGFjY29yZGluZyB0byB5b3VyIG93biBhY2NvdW50IHNvIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgdGhyZWF0ZW5lZCwgYW5kIHdoaWNoIGtlZXBzIHRoZSBteXN0aWMgZGVwb3NpdHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGV4YWN0IG5hdHVyZSBvZiB0aGVzZSBteXN0aWMgZGVwb3NpdHMsIG9uIHdoaWNoIHRoZSB3ZWxmYXJlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb21tdW5pdHkgd2FzIHRob3VnaHQgdG8gZGVwZW5kLCBpcyBub3Qga25vd247IHRoZXkgd2VyZSBwcm9iYWJseQogICAgICAgICAgICAgICAgICAgICAgICBvcmFjbGVzLjwvbm90ZT4gd2hlcmVieSB0aGUgc2FmZXR5IG9mIHRoZSBjaXR5IGlzIHByZXNlcnZlZC4gPC90cmFuc2xhdGlvbj4="
translation['1.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGluIG9uZQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3TigJRmb3IgSSBzaGFsbCBzcGVhayBteSBtaW5k4oCUdGhlIEFyZW9wYWd1cyBmdWxseQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzIHRoaXMgdHJlYXRtZW50LiBJdCB3YXMgZmFjZWQgd2l0aCB0d28gYWx0ZXJuYXRpdmVzLiBPbmUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4sIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcGVvcGxlJ3MgaW5zdHJ1Y3Rpb25zLCB0byBjb25kdWN0IHRoZSBwcmV2aW91cwogICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRpb24gb3ZlciB0aGUgdGhyZWUgaHVuZHJlZCB0YWxlbnRzIHdoaWNoIGNhbWUgZnJvbSB0aGUgUGVyc2lhbgogICAgICAgICAgICAgICAgICAgICAgICBraW5nPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFmdGVyIEFsZXhhbmRlcidzIGFjY2Vzc2lvbiBEYXJpdXMKICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2lkaXplZCBzZXZlcmFsIEdyZWVrIHN0YXRlcyB0byBvcHBvc2UgaGltLiBUaHJlZSBodW5kcmVkIHRhbGVudHMgb2ZmZXJlZAogICAgICAgICAgICAgICAgICAgICAgICBieSBoaW0gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBvZmZpY2lhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiBhY2NlcHRlZCBieSBEZW1vc3RoZW5lcyB0byBiZSB1c2VkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nJ3MgaW50ZXJlc3QuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTgiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xODwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMjM5IiB2YWxpZD0ieWVzIj5BZXNjaGluLiAzLjIzOTwvYmlibD4g77yId2hvIGdpdmVzIHRoZSBzdW0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggRGVtb3N0aGVuZXMgYXBwcm9wcmlhdGVkIGFzIHNldmVudHkgdGFsZW50c++8iTsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTcuNCIgdmFsaWQ9InllcyI+RGlvLiBTaWMuIDE3LjQ8L2JpYmw+Ljwvbm90ZT47IGluIHdoaWNoIGNhc2UgdGhpcyBtb25zdGVyCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBiZWVuIGNvbnZpY3RlZCBhbmQgdGhlIG5hbWVzIG9mIHRob3NlIHdobyBzaGFyZWQgdGhlIG1vbmV5IHB1Ymxpc2hlZDsKICAgICAgICAgICAgICAgICAgICB0aGUgYmV0cmF5YWwgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBvZmZpY2lhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiBhY2NlcHRlZCBieSBEZW1vc3RoZW5lcyB0byBiZSB1c2VkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nJ3MgaW50ZXJlc3QuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTgiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xODwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMjM5IiB2YWxpZD0ieWVzIj5BZXNjaGluLiAzLjIzOTwvYmlibD4g77yId2hvIGdpdmVzIHRoZSBzdW0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggRGVtb3N0aGVuZXMgYXBwcm9wcmlhdGVkIGFzIHNldmVudHkgdGFsZW50c++8iTsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTcuNCIgdmFsaWQ9InllcyI+RGlvLiBTaWMuIDE3LjQ8L2JpYmw+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiwgZm9yIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgd2FzIHJlc3BvbnNpYmxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiA8ZGF0ZSBhdXRobmFtZT0iLTMzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzNSI+MzM1PC9kYXRlPiBCLkMuLCBvd2luZyB0byBhIHJlcG9ydCB0aGF0IEFsZXhhbmRlciwgd2hvIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBmaWdodGluZyB0aGUgVHJpYmFsbGksIGhhZCBiZWVuIGtpbGxlZCwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IHJldm9sdGVkIGFnYWluc3QgTWFjZWRvbmlhbiBkb21pbmF0aW9uIGVuY291cmFnZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgYW5kIG90aGVycyB3aG8gYXNzaXN0ZWQgdGhlbSB0byBwcm9jdXJlIGFybXMuIFdoZW4gdGhleSBhcHBsaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhc3Npc3RhbmNlIHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgUGVsb3Bvbm5lc2lhbnMKICAgICAgICAgICAgICAgICAgICAgICAgc2VudCBhbiBhcm15IGFzIGZhciBhcyB0aGUgSXN0aG11cywgd2hpbGUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHZvdGVkIGhlbHAgYnV0IGF3YWl0ZWQgdGhlIHR1cm4gb2YgZXZlbnRzLiBNZWFud2hpbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiB3YXMgdGFrZW4gYnkKICAgICAgICAgICAgICAgICAgICAgICAgQWxleGFuZGVyIGFuZCBkZXN0cm95ZWQuIERpbmFyY2h1cywgd2hvIGdvZXMgaW50byBncmVhdGVyIGRldGFpbCBsYXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjE4IiB2YWxpZD0ieWVzIj5EaW4uIDEuMTgtMjI8L2JpYmw+77yJLCBtYWludGFpbnMKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBmb3IgdGVuIHRhbGVudHMgb2YgdGhlIFBlcnNpYW4gbW9uZXkgRGVtb3N0aGVuZXMgY291bGQgaGF2ZSBzZWN1cmVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBoZWxwIG9mIHRoZSBQZWxvcG9ubmVzaWFuIGFybXkgYnV0IHdhcyB0b28gbWlzZXJseSB0byBkbyBzby4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjgiIHZhbGlkPSJ5ZXMiPkRpby4gU2ljLiAxNy44PC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy4yMzkiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjIzOS0yNDA8L2JpYmw+Ljwvbm90ZT4gd291bGQgaGF2ZSBiZWVuIGV4cG9zZWQsIGFuZCB3ZSwgZXhhY3RpbmcgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoaXMgZGVtYWdvZ3VlIHRoZSBwdW5pc2htZW50IGhlIGRlc2VydmVkLCB3b3VsZCBoYXZlIGJlZW4gcmlkIG9mIGhpbS4KICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii0zMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzUiPjMzNTwvZGF0ZT4gQi5DLiwgb3dpbmcgdG8gYSByZXBvcnQgdGhhdCBBbGV4YW5kZXIsIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZmlnaHRpbmcgdGhlIFRyaWJhbGxpLCBoYWQgYmVlbiBraWxsZWQsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiByZXZvbHRlZCBhZ2FpbnN0IE1hY2Vkb25pYW4gZG9taW5hdGlvbiBlbmNvdXJhZ2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIGFuZCBvdGhlcnMgd2hvIGFzc2lzdGVkIHRoZW0gdG8gcHJvY3VyZSBhcm1zLiBXaGVuIHRoZXkgYXBwbGllZAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgYXNzaXN0YW5jZSB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlIFBlbG9wb25uZXNpYW5zCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnQgYW4gYXJteSBhcyBmYXIgYXMgdGhlIElzdGhtdXMsIHdoaWxlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB2b3RlZCBoZWxwIGJ1dCBhd2FpdGVkIHRoZSB0dXJuIG9mIGV2ZW50cy4gTWVhbndoaWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gd2FzIHRha2VuIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXhhbmRlciBhbmQgZGVzdHJveWVkLiBEaW5hcmNodXMsIHdobyBnb2VzIGludG8gZ3JlYXRlciBkZXRhaWwgbGF0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xOCIgdmFsaWQ9InllcyI+RGluLiAxLjE4LTIyPC9iaWJsPu+8iSwgbWFpbnRhaW5zCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgZm9yIHRlbiB0YWxlbnRzIG9mIHRoZSBQZXJzaWFuIG1vbmV5IERlbW9zdGhlbmVzIGNvdWxkIGhhdmUgc2VjdXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaGVscCBvZiB0aGUgUGVsb3Bvbm5lc2lhbiBhcm15IGJ1dCB3YXMgdG9vIG1pc2VybHkgdG8gZG8gc28uIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy44IiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4gMTcuODwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMjM5IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4yMzktMjQwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['1.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BbHRlcm5hdGl2ZWx5LCBpZiBpdCB3YXMgeW91ciB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgZm9yZ2l2ZSBEZW1vc3RoZW5lcyBmb3IgdGhlc2Ugb2ZmZW5jZXMgYW5kIHRvIGhhdmUgaW4gdGhlIGNpdHkgYSBsYXJnZSBudW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgd2hvIHdvdWxkIHRha2UgYnJpYmVzIGFnYWluc3QgeW91LCB0aGUgY291bmNpbCBvdWdodCwgaGF2aW5nIHRlc3RlZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgd2lzaGVzIGluIHRoZSBwcmV2aW91cyBjYXNlcywgdG8gaGF2ZSByZWZ1c2VkIHRvIHVuZGVydGFrZSBhbiBpbnZlc3RpZ2F0aW9uIG92ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgcGF5bWVudHMgb2YgbW9uZXkgcmVjZW50bHkgcmVwb3J0ZWQuIEZvciBkZXNwaXRlIHRoZSBleGNlbGxlbmNlIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIG9mIHRoaXMgcmVjZW50IHJlcG9ydCwgd2hpY2ggaW5jcmltaW5hdGVzIERlbW9zdGhlbmVzIGFuZCB0aGUgcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW0sIGFuZCBkZXNwaXRlIHRoZSBmYWN0IHRoYXQgdGhlIEFyZW9wYWd1cyBoYXMgbm90IGRlZmVycmVkIHRvIHRoZSBwb3dlciBvZgogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIG9yIERlbWFkZXMgYnV0IGhhcyByZWdhcmRlZCBqdXN0aWNlIGFuZCB0cnV0aCBhcyBtb3JlIGltcG9ydGFudCwKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5EZW1vc3RoZW5lcyBnb2VzIHJvdW5kIG5vbmUgdGhlIGxlc3MKICAgICAgICAgICAgICAgICAgICBtYWxpZ25pbmcgdGhlIGNvdW5jaWwgYW5kIHRlbGxpbmcgdGhlIHNhbWUgc3RvcmllcyBhYm91dCBoaW1zZWxmIHdpdGggd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIHByb2JhYmx5IHRyeSB0byBtaXNsZWFkIHlvdSBwcmVzZW50bHkuIOKAnEkgbWFkZSB0aGUgVGhlYmFucyB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgIGFsbGllcy7igJ08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gbWFraW5nIHRoaXMgY2xhaW0KICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgd2FzIHJlZmVycmluZyB0byBldmVudHMganVzdCBiZWZvcmUgdGhlIGJhdHRsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT4gd2hlbiBoZSB3b24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IG92ZXIgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGJ5IG9mZmVyaW5nIGhlciBtb3JlIGxpYmVyYWwKICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMgdGhhbiBQaGlsaXAuIEZvciBoaXMgZGVmZW5jZSBvZiB0aGlzIHBvbGljeSBzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xNTMiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMTUzPC9iaWJsPiBzcS48L25vdGU+IE5vLCBEZW1vc3RoZW5lcywgeW91IGltcGFpcmVkIHRoZSBjb21tb24KICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdCBvZiBib3RoIG91ciBzdGF0ZXMuIOKAnEkgYnJvdWdodCBldmVyeW9uZSBpbnRvIGxpbmUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+IHdoZW4gaGUgd29uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBvdmVyIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBieSBvZmZlcmluZyBoZXIgbW9yZSBsaWJlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1zIHRoYW4gUGhpbGlwLiBGb3IgaGlzIGRlZmVuY2Ugb2YgdGhpcyBwb2xpY3kgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTUzIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjE1MzwvYmlibD4gc3EuPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+LuKAnSBPbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB5b3UgeW91cnNlbGYgd2VyZSB0aGUgb25seSBvbmUgdG8gbGVhdmUgdGhlIGxpbmUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmdlIG9mIGNvd2FyZGljZSBpbiBiYXR0bGUgaXMgb2Z0ZW4gYnJvdWdodCBhZ2FpbnN0IERlbW9zdGhlbmVzIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyDvvIhlLmcuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTc1IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAzLjE3NTwvYmlibD7vvIk7IGl0IGlzIG1lbnRpb25lZCBieSBQbHV0YXJjaCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDIwLjIiIHZhbGlkPSJ5ZXMiPlBsdXQuIERlbS4gODU1IEE8L2JpYmw+77yJIGFuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdmVzIG9mIHRoZSBUZW4gT3JhdG9yczwvdGl0bGU+IO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlYy4gT3JhdC4gODQ1ZiI+UGx1dC4gVml0LiA4NDUgRjwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIOKAnEkgc2VydmVkIG9uIG1hbnkgZW1iYXNzaWVzIG9uIHlvdXIgYmVoYWxmLuKAnSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjE3NSIgdmFsaWQ9InllcyI+QWVzY2hpbi4KICAgICAgICAgICAgICAgICAgICAgICAgMy4xNzU8L2JpYmw+77yJOyBpdCBpcyBtZW50aW9uZWQgYnkgUGx1dGFyY2gg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyMC4yIiB2YWxpZD0ieWVzIj5QbHV0LiBEZW0uIDg1NSBBPC9iaWJsPu+8iSBhbmQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaXZlcyBvZiB0aGUgVGVuIE9yYXRvcnM8L3RpdGxlPiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZWMuIE9yYXQuIDg0NWYiPlBsdXQuIFZpdC4gODQ1IEY8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['1.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5PbmUgd29uZGVycyB3aGF0IGhlIHdvdWxkIGhhdmUgZG9uZSBvciB3aGF0IGhlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzYWlkIGlmIHRoZSBjb3Vyc2UgdGhhdCBoZSBoYWQgcmVjb21tZW5kZWQgb24gdGhlc2UgbWlzc2lvbnMgaGFkIHByb3ZlZAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWwsIHdoZW4sIGFmdGVyIHRvdXJpbmcgdGhlIHdob2xlIEdyZWVrIHdvcmxkIHRvIG5lZ290aWF0ZSBzdWNoCiAgICAgICAgICAgICAgICAgICAgZGlzYXN0ZXJzIGFuZCBtaXN0YWtlcywgaGUgc3RpbGwgY2xhaW1zIHRvIGhhdmUgYmVlbiBncmFudGVkIHRoZSBncmVhdGVzdAogICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZXMsIG5hbWVseSB0aG9zZSBvZiBhY2NlcHRpbmcgYnJpYmVzIGFnYWluc3QgaGlzIGNvdW50cnkgYW5kIHNheWluZyBhbmQKICAgICAgICAgICAgICAgICAgICBkb2luZyB3aGF0ZXZlciBoZSB3aXNoZXMgYWdhaW5zdCB0aGUgcHVibGljIGludGVyZXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.14'] = ""
translation['1.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5XaWxsIHlvdSB0aGVuIGFic29sdmUgdGhpcyBhYm9taW5hYmxlIHdyZXRjaCwgdGhpcyBTY3l0aGlhbizigJRyZWFsbHkKICAgICAgICAgICAgICAgICAgICBJIGNhbm5vdCBjb250YWluIG15c2VsZizigJR3aG9tIG5vIG1lcmUgaW5kaXZpZHVhbCBidXQgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ3VzIGhhcyBzaG93biwgYWZ0ZXIgaW5xdWlyeSwgdG8gYmUgaW4gcG9zc2Vzc2lvbiBvZiBtb25leSB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgZGV0cmltZW50LCB3aG9zZSBicmliZXJ5IGFuZCBjb3JydXB0aW9uIGFnYWluc3QgdGhlIGNpdHkgaGF2ZSBiZWVuIHJldmVhbGVkIGFuZAogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIGJleW9uZCBkb3VidD8gV2lsbCB5b3Ugbm90IHB1bmlzaCBoaW0gYW5kIG1ha2UgaGltIGFuIGV4YW1wbGUgdG8KICAgICAgICAgICAgICAgICAgICBvdGhlcnM/IEhlIGlzIGtub3duIG5vdCBvbmx5IHRvIGhhdmUgdGFrZW4gZ29sZCBmcm9tIHRoZSByb3lhbCB0cmVhc3VyaWVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xMCIgdmFsaWQ9InllcyI+RGluLgogICAgICAgICAgICAgICAgICAgICAgICAxLjEwPC9iaWJsPjwvbm90ZT4gYnV0IGFsc28gdG8gaGF2ZSBlbnJpY2hlZCBoaW1zZWxmIGF0IHRoZSBjaXR5J3Mgb3duCiAgICAgICAgICAgICAgICAgICAgZXhwZW5zZSwgc2luY2UgaGUgZGlkIG5vdCBldmVuIHdpdGhob2xkIGhpcyBoYW5kIGZyb20gdGhlIG1vbmV5IGxhdGVseSBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gaGVyIGJ5IEhhcnBhbHVzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTAiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgMS4xMDwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['1.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgdGhlIGVtYmFzc2llcyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gd2hpY2ggRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICB1bmRlcnRvb2sgYXJlIGVxdWl2YWxlbnQgdG8gYSBtZXJlIGZyYWN0aW9uIG9mIFRpbW90aGV1cycgc2VydmljZXM7IGFuZCB3aGljaCBvZgogICAgICAgICAgICAgICAgICAgIHlvdSwgY29udHJhc3Rpbmcgd2l0aCB0aGUgZXhwbG9pdHMgb24gd2hpY2ggRGVtb3N0aGVuZXMgcHJpZGVzIGhpbXNlbGYgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aGljaCBUaW1vdGhldXMgYW5kIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBwZXJmb3JtZWQgb24KICAgICAgICAgICAgICAgICAgICB5b3VyIGJlaGFsZiwgd291bGQgbm90IGxhdWdoIHRvIHNjb3JuIGFsbCB3aG8gY29uc2VudGVkIHRvIGxpc3RlbiB0byB0aGlzIG1hbj8KICAgICAgICAgICAgICAgICAgICBCdXQgdGhlbiB0aGVyZSBzaG91bGQgYmUgbm8gY29tcGFyaXNvbiBtYWRlIGJldHdlZW4gdGhpcyBvdXRjYXN0IGFuZCB0aGUgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgaW50ZXJlc3RzIGFjdGVkIHdvcnRoaWx5IG9mIHRoZSBjaXR5IGFuZCB5b3VyIGFuY2VzdG9ycy4gSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGNpdGUgdGhlIGRlY3JlZSB3aGljaCB3YXMgcGFzc2VkIGNvbmNlcm5pbmcgVGltb3RoZXVzIGFuZCB0aGVuIHJldHVybgogICAgICAgICAgICAgICAgICAgIHRvIG15IHJldmlldyBvZiB0aGUgZGVmZW5kYW50LiBSZWFkLjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBjaXRpemVuLAogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBvZiBzdWNoIGEgY2hhcmFjdGVyLCB3aG8gbWlnaHQgd2VsbCBoYXZlIGdhaW5lZCB0aGUgcGFyZG9uIGFuZAogICAgICAgICAgICAgICAgICAgIGdyYXRpdHVkZSBvZiBoaXMgY29sbGVhZ3VlcyBpbiB0aGUgcHVibGljIGxpZmUgb2YgdGhvc2UgZGF5cywgc2luY2UgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQgZ3JlYXQgc2VydmljZXMgdG8gdGhlIGNpdHksIG5vdCBpbiB3b3JkIG9ubHkgYnV0IGluIGRlZWQsIGFuZCBoYWQKICAgICAgICAgICAgICAgICAgICBhbHdheXMgcmVtYWluZWQgdHJ1ZSB0byB0aGUgc2FtZSBwb2xpY3kgcmF0aGVyIHRoYW4gY2hhbmdpbmcgdG8gYW5kIGZybyBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGRvbmUsIG1ldCBoaXMgZGVhdGggd2l0aG91dCBiZWdnaW5nIHRoZSBwZW9wbGUgZm9yIHN1Y2ggZXh0ZW5zaXZlIGZhdm9ycyBhcwogICAgICAgICAgICAgICAgICAgIHdvdWxkIHNldCBoaW0gYWJvdmUgdGhlIGxhd3Mgb3IgdGhpbmtpbmcgdGhhdCBtZW4gd2hvIGhhZCBzd29ybiB0byB2b3RlIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgc2hvdWxkIGNvbnNpZGVyIGFueXRoaW5nIG1vcmUgaW1wb3J0YW50IHRoYW4gdGhlaXIgd29yZDsKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgcmVhZHkgZXZlbiBmb3IgY29uZGVtbmF0aW9uLCBpZiB0aGUganVyeSBkZWNpZGVkIHVwb24gaXQsIGFuZCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgcGxlYWQgdGhlIGluY2xlbWVuY3kgb2YgY2lyY3Vtc3RhbmNlIG9yIGV4cHJlc3MgaW4gcHVibGljIG9waW5pb25zIHdoaWNoIGhlIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBob2xkLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSBub3QgZXhlY3V0ZSB0aGlzIGFjY3Vyc2VkIHdyZXRjaCwgQXRoZW5pYW5zLCB3aG8sIGluIGFkZGl0aW9uIHRvIG1hbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBjcnVjaWFsIGJsdW5kZXJzLCBzdG9vZCBieSB3aGlsZSB0aGUgVGhlYmFucycgY2l0eSB3YXMgZGVzdHJveWVkLCB0aG91Z2ggaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYWNjZXB0ZWQgdGhyZWUgaHVuZHJlZCB0YWxlbnRzIGZyb20gdGhlIFBlcnNpYW4gS2luZyBmb3IgdGhlaXIgcHJvdGVjdGlvbiB0aG91Z2gKICAgICAgICAgICAgICAgICAgICB0aGUgQXJjYWRpYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTAiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xMDwvYmlibD48L25vdGU+IGFycml2aW5nIGF0IHRoZSBJc3RobXVzLCBoYWQgZGlzbWlzc2VkIHdpdGggYQogICAgICAgICAgICAgICAgICAgIHJlYnVmZiB0aGUgZW52b3lzIG9mIEFudGlwYXRlciBhbmQgd2VsY29tZWQgdGhvc2UgZnJvbSB0aGUgdW5oYXBweSBUaGViYW5zIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCByZWFjaGVkIHRoZW0gd2l0aCBkaWZmaWN1bHR5IGJ5IHNlYSwgYmVhcmluZyBhIHN1cHBsaWFudCdzIHN0YWZmIGFuZAogICAgICAgICAgICAgICAgICAgIGhlcmFsZHMnIHdhbmRzLCBwbGFpdGVkLCB0aGV5IHNhaWQsIGZyb20gb2xpdmUgc2hvb3RzPyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTAiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xMDwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['1.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGNhbWUgdG8gYXNzdXJlIHRoZSBBcmNhZGlhbnMgdGhhdCBubyB3aXNoIHRvIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZnJpZW5kc2hpcCB3aXRoIHRoZSBHcmVla3MgaGFkIGxlZCB0aGUgVGhlYmFucyB0byBhIHJldm9sdXRpb24sIG5vciBkaWQKICAgICAgICAgICAgICAgICAgICB0aGV5IGludGVuZCB0byBkbyBhbnl0aGluZyB0byB0aGUgZGV0cmltZW50IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPjsgYnV0IHRoZXkgd2VyZSBubyBsb25nZXIgYWJsZSB0byBjb3VudGVuYW5jZSBhdCBob21lIHRoZQogICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yIG9mIHRoZSBNYWNlZG9uaWFucyBpbiB0aGUgY2l0eSwgdG8gZW5kdXJlIHNsYXZlcnksIG9yIHRvIHdpdG5lc3MgdGhlCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZXMgcGVycGV0cmF0ZWQgYWdhaW5zdCB0aGUgcGVyc29ucyBvZiBmcmVlIG1lbi4gPC90cmFuc2xhdGlvbj4="
translation['1.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQXJjYWRpYW5zIHdlcmUgcmVhZHkgdG8gaGVscCB0aGVtIGFuZCwgc3ltcGF0aGl6aW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciBtaXNmb3J0dW5lcywgZXhwbGFpbmVkIHRoYXQsIHRob3VnaCB0aGV5IHdlcmUgY29tcGVsbGVkIHRocm91Z2ggZm9yY2Ugb2YKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2UgdG8gc2VydmUgQWxleGFuZGVyIHdpdGggdGhlaXIgcGVyc29ucywgaW4gc3Bpcml0IHRoZXkgc2lkZWQgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgVGhlYmFucyBhbmQgdGhlIGNhdXNlIG9mIEdyZWVrIGxpYmVydHkuIFNpbmNlIHRoZWlyIGxlYWRlciwgQXN0eWx1cywKICAgICAgICAgICAgICAgICAgICB3YXMgb3BlbiB0byBicmliZXJ5LCBhcyBTdHJhdG9jbGVzIHNhaWQsIGFuZCB3YW50ZWQgdGVuIHRhbGVudHMgYXMgdGhlIHByaWNlIG9mCiAgICAgICAgICAgICAgICAgICAgaGVscGluZyB0aGUgVGhlYmFucywgdGhlIGVudm95cyBhcHByb2FjaGVkIERlbW9zdGhlbmVzIHdobywgYXMgdGhleSBrbmV3LCBoZWxkCiAgICAgICAgICAgICAgICAgICAgdGhlIEtpbmcncyBnb2xkIGFuZCBlYXJuZXN0bHkgYmVnZ2VkIGhpbSB0byBzcGVuZCB0aGUgbW9uZXkgdG8gc2F2ZSB0aGVpciBjaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhpcyBoYXJkLWhlYXJ0ZWQgYW5kIGltcGlvdXMgbWlzZXIKICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3QgYnJpbmcgaGltc2VsZiB0byBleHBlbmQsIGZyb20gaGlzIGdyZWF0IHJlc291cmNlcywgdGVuIHBhbHRyeSB0YWxlbnRzLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBzYXcgc3VjaCBoaWdoIGhvcGVzIGRhd25pbmcgZm9yIHRoZSBzYWx2YXRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LiBJbnN0ZWFkLCBhcyBTdHJhdG9jbGVzIHNhaWQsIGhlCiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCBvdGhlcnMgdG8gcHJvdmlkZSB0aGlzIHN1bSB0byBpbmR1Y2UgdGhvc2Ugb2YgdGhlIEFyY2FkaWFucyB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgbWFyY2hlZCBvdXQgdG8gcmV0dXJuIGhvbWUgYW5kIGRlbnkgdGhlaXIgaGVscCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['1.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3UgY29uc2lkZXIgdGhhdCB0aGUgZXZpbHMgZm9yIHdoaWNoIERlbW9zdGhlbmVzIGFuZCBoaXMgYXZhcmljZSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBhcmUgdHJpdmlhbCBvciBvZiBsaXR0bGUgaW1wb3J0IGZvciB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+PyBEbyB5b3UgdGhpbmsgdGhhdCBoZSBkZXNlcnZlcyBhbnkgcGl0eQogICAgICAgICAgICAgICAgICAgIGF0IHlvdXIgaGFuZHMgYWZ0ZXIgY29tbWl0dGluZyBzdWNoIG9mZmVuY2VzPyBTaG91bGQgaGUgbm90IHJhdGhlciBzdWZmZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZXh0cmVtZSBwZW5hbHR5IHRvIGF0b25lIGZvciBoaXMgY3JpbWVzLCBib3RoIHBhc3QgYW5kIHByZXNlbnQ/IFRoZSB2ZXJkaWN0CiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gYnkgeW91IHRvZGF5LCBBdGhlbmlhbnMsIHdpbGwgYmUgaGVhcmQgYnkgYWxsIG1hbmtpbmQsIHdobyB3aWxsIG9ic2VydmUKICAgICAgICAgICAgICAgICAgICBob3cgeW91LCB0aGUganVkZ2VzLCB0cmVhdCB0aGUgbWFuIHdpdGggc3VjaCBhIHJlY29yZC4gPC90cmFuc2xhdGlvbj4="
translation['1.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgYXJlIHRoZSBwZW9wbGUgd2hvLCBmb3IgY3JpbWVzIGZhciBzbWFsbGVyIHRoYW4gdGhvc2UKICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBoYXMgY29tbWl0dGVkLCBoYXZlIGluZmxpY3RlZCBvbiBtZW4gc2V2ZXJlIGFuZCBpcnJldm9jYWJsZQogICAgICAgICAgICAgICAgICAgIHBlbmFsdGllcy4gSXQgd2FzIHlvdSB3aG8ga2lsbGVkIE1lbm9uIHRoZSBtaWxsZXIsIGJlY2F1c2UgaGUga2VwdCBhIGZyZWUgYm95CiAgICAgICAgICAgICAgICAgICAgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBlbGxlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBlbGxlbmUiPlBlbGxlbmU8L3BsYWNlTmFtZT4gaW4gaGlzIG1pbGwuIFlvdQogICAgICAgICAgICAgICAgICAgIHB1bmlzaGVkIHdpdGggZGVhdGggVGhlbWlzdGl1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFwaGlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwaGlkbmEiPkFwaGlkbmE8L3BsYWNlTmFtZT4sIGJlY2F1c2UgaGUgYXNzYXVsdGVkIHRoZSBSaG9kaWFuIGx5cmUtcGxheWVyIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIEVsZXVzaW5pYW4gZmVzdGl2YWwsIGFuZCBFdXRoeW1hY2h1cywgYmVjYXVzZSBoZSBwdXQgdGhlIE9seW50aGlhbiBnaXJsIGluIGEKICAgICAgICAgICAgICAgICAgICBicm90aGVsLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhyb3VnaCB0aGlzIHRyYWl0b3IgY2hpbGRyZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgd29tZW4sIHRoZSB3aXZlcyBvZiB0aGUgVGhlYmFucywgd2VyZSBkaXN0cmlidXRlZCBhbW9uZyB0aGUgdGVudHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFyYmFyaWFucywgYSBuZWlnaGJvcmluZyBhbmQgYWxsaWVkIGNpdHkgaGFzIGJlZW4gdG9ybiB1cCBmcm9tIHRoZSBtaWRzdCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYW5kIHRoZSBzaXRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBpcyBiZWluZyBwbG91Z2hlZCBhbmQgc293biwgdGhlIGNpdHkKICAgICAgICAgICAgICAgICAgICBvZiBtZW4gd2hvIHNoYXJlZCB3aXRoIHlvdSB0aGUgd2FyIGFnYWluc3QgUGhpbGlwLiBZZXMsIGl0IGlzIGJlaW5nIHBsb3VnaGVkIGFuZAogICAgICAgICAgICAgICAgICAgIHNvd24uIEFuZCB0aGlzIHVuZmVlbGluZyB3cmV0Y2ggc2hvd2VkIG5vIGNvbXBhc3Npb24gZm9yIGEgY2l0eSB0aHVzIGxhbWVudGFibHkKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQsIHRob3VnaCBoZSB2aXNpdGVkIGl0IGFzIGFuIGVudm95IHJlcHJlc2VudGluZyB5b3UgYW5kIGhhcyBvZnRlbgogICAgICAgICAgICAgICAgICAgIHNoYXJlZCB0aGUgbWVhdCBhbmQgZHJpbmsgb2YgaXRzIGNpdGl6ZW5zLCBjbGFpbWluZyBoaW1zZWxmIHRoYXQgaGUgbWFkZSBpdCBvdXIKICAgICAgICAgICAgICAgICAgICBhbGx5LiBCdXQgdGhvc2UgdG8gd2hvbSBoZSBvZnRlbiByZXNvcnRlZCBpbiB0aGVpciBwcm9zcGVyaXR5IGhlIGhhcyBiZXRyYXllZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1pc2ZvcnR1bmUuIDwvdHJhbnNsYXRpb24+"
translation['1.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgVGhlYmFucywgc28gb3VyIGVsZGVycwogICAgICAgICAgICAgICAgICAgIHRlbGwgdXMsIHdoZW4gdGhlIGRlbW9jcmFjeSBpbiBvdXIgY2l0eSBoYWQgYmVlbiBvdmVydGhyb3duIGFuZCBUaHJhc3lidWx1cyB3YXMKICAgICAgICAgICAgICAgICAgICBhc3NlbWJsaW5nIHRoZSBleGlsZXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgcmVhZHkgZm9yIHRoZSBzZWl6dXJlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGh5bGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBoeWxlIj5QaHlsZTwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhyYXN5YnVsdXMgYW5kIEFueXR1cywgZXhpbGVkIGJ5IHRoZSBUaGlydHksCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgcmVjZWl2ZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LiBBZnRlcgogICAgICAgICAgICAgICAgICAgICAgICBzZWl6aW5nIGFuZCBob2xkaW5nIHRoZSBmb3J0cmVzcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBoeWxlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaHlsZSI+UGh5bGU8L3BsYWNlTmFtZT4gaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTQwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQwNCI+NDA0PC9kYXRlPiBCLkMuLCB0aGV5IHN1YnNlcXVlbnRseSBvY2N1cGllZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiBhbmQsIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmVudGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIHJlc3RvcmF0aW9uIG9mIGRlbW9jcmFjeSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPC9ub3RlPiBhbHRob3VnaCB0aGUgU3BhcnRhbnMgd2VyZSBzdHJvbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9yYmFkZSB0aGVtIHRvIGFkbWl0IG9yIGxldCBvdXQgYW55IEF0aGVuaWFuLCBoZWxwZWQgdGhlIGRlbW9jcmF0cyB0byByZXR1cm4KICAgICAgICAgICAgICAgICAgICBhbmQgcGFzc2VkIHRoYXQgZGVjcmVlIHdoaWNoIGhhcyBzbyBvZnRlbiBiZWVuIHJlYWQgYmVmb3JlIHlvdSwgc3RhdGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCB0dXJuIGEgYmxpbmQgZXllIGlmIGFueSBBdGhlbmlhbiBtYXJjaGVkIHRocm91Z2ggdGhlaXIgdGVycml0b3J5CiAgICAgICAgICAgICAgICAgICAgYmVhcmluZyBhcm1zLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uIEFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHNlaXppbmcgYW5kIGhvbGRpbmcgdGhlIGZvcnRyZXNzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGh5bGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBoeWxlIj5QaHlsZTwvcGxhY2VOYW1lPiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItNDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDA0Ij40MDQ8L2RhdGU+IEIuQy4sIHRoZXkgc3Vic2VxdWVudGx5IG9jY3VwaWVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaXJhZXVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaXJhZXVzIj5QaXJhZXVzPC9wbGFjZU5hbWU+IGFuZCwgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiwgYnJvdWdodAogICAgICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGUgcmVzdG9yYXRpb24gb2YgZGVtb2NyYWN5IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['1.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiB3aG8gZnJhdGVybml6ZXMsIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBwcmVzZW50bHkgdGVsbCB5b3UsIHdpdGggb3VyIGFsbGllcywgYmVoYXZlZCB2ZXJ5IGRpZmZlcmVudGx5OyBoZSB3b3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBwYXJ0IHdpdGggYW55IG9mIHRoZSBtb25leSB3aGljaCBoZSBoYWQgcmVjZWl2ZWQgZm9yIHRoZWlyIHByb3RlY3Rpb24uIFJlbWVtYmVyCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpbmdzLCBnZW50bGVtZW47IGNvbnNpZGVyIHRoZSBkaXNhc3RlcnMgY2F1c2VkIGJ5IHRyYWl0b3JzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGRvd25mYWxsIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiBhbmQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+OyBkZWNpZGUgd2lzZWx5IG5vdyBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgaW50ZXJlc3Q7IGRlc3Ryb3kgdGhvc2Ugd2hvIGFyZSByZWFkeSB0byB0YWtlIGJyaWJlcyBhZ2FpbnN0IHRoZWlyIGNvdW50cnkKICAgICAgICAgICAgICAgICAgICBhbmQgc28gcmVzdCB5b3VyIGhvcGVzIG9mIHNhZmV0eSBvbiB5b3Vyc2VsdmVzIGFuZCBvbiB0aGUgZ29kcy4gPC90cmFuc2xhdGlvbj4="
translation['1.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgaXMgb25seSBvbmUgd2F5LCBBdGhlbmlhbnMsIGluIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgcmVmb3JtIHRoZSByZXN0IG9mIG1hbmtpbmQsIG9ubHkgb25lIHdheTogdG8gZXhwb3NlIHRob3NlIGNyaW1pbmFscyB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgbm90YWJsZSBtZW4gYW5kIHB1bmlzaCB0aGVtIGFzIHRoZWlyIGNyaW1lcyBkZXNlcnZlLiBJbiB0aGUgY2FzZSBvZiB0aGUgYXZlcmFnZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBubyBvbmUga25vd3Mgb3IgdHJvdWJsZXMgdG8gaW5xdWlyZSwgd2hlbiBoZSBpcyBjb252aWN0ZWQsIHdoYXQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBoaXMgc2VudGVuY2UuIEJ1dCB3aXRoIG1lbiBvZiBub3RlIGV2ZXJ5b25lIGhlYXJzIHRoZSBuZXdzIGFuZCBwcmFpc2VzIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnksIHdoZW4gdGhleSBoYXZlIG5vdCBzYWNyaWZpY2VkIHRoZSBpbnRlcmVzdHMgb2YganVzdGljZSBpbiBkZWZlcmVuY2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvZiB0aGUgZGVmZW5kYW50cy4gUmVhZCB0aGUgVGhlYmFuIGRlY3JlZS4gQ2l0ZSB0aGUgZXZpZGVuY2UuIFJlYWQKICAgICAgICAgICAgICAgICAgICB0aGUgbGV0dGVycy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJFdmlkZW5jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV2aWRlbmNlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkV2aWRlbmNlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBtYW4gaXMgYQogICAgICAgICAgICAgICAgICAgIGhpcmVsaW5nLCBBdGhlbmlhbnMsIGEgaGlyZWxpbmcgb2YgbG9uZyBzdGFuZGluZy4gSXQgd2FzIGhlIHdobyBzdW1tb25lZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiB0aGUgZW1iYXNzeSBjb21pbmcgdG8gdXMKICAgICAgICAgICAgICAgICAgICBmcm9tIFBoaWxpcCBhbmQgd2FzIHJlc3BvbnNpYmxlIGZvciBmaW5pc2hpbmcgdGhlIGZpcnN0IHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZpcnN0IHdhciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzE1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTUiPk1hY2Vkb248L3BsYWNlTmFtZT4g77yIPGRhdGVSYW5nZSBhdXRobmFtZT0iLTM0OS8tMzQ2IiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zNDkiIHRvPSItMzQ2Ij4zNDk8L2RhdGVSYW5nZT4tMzQ2IEIuQy7vvIkgd2FzIHVuZGVydGFrZW4gYnkgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gYWdhaW5zdCBQaGlsaXAuIEV2ZW4gYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gd2FzIHRha2VuIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBraW5nIG1hZGUgb3ZlcnR1cmVzIG9mIHBlYWNlLCBhbmQgaXQgd2FzIFBoaWxvY3JhdGVzIHdobyBwcm9wb3NlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRpb25zIHNob3VsZCBiZWdpbi4gSG93ZXZlciwgYWZ0ZXIgdGhlIGZhbGwgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+IGluIDM0OCwgdGhlIEF0aGVuaWFucyB0cmllZAogICAgICAgICAgICAgICAgICAgICAgICB0byB1bml0ZSBvdGhlciBHcmVlayBzdGF0ZXMgYWdhaW5zdCBQaGlsaXAsIGFuZCBpdCB3YXMgbm90IHVudGlsIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdCBoYWQgZmFpbGVkIHRoYXQgRGVtb3N0aGVuZXMgYWNxdWllc2NlZCBpbiBwZWFjZSBwcm9wb3NhbHMuIEluIDM0NyBoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZlbmRlZCBQaGlsb2NyYXRlcywgd2hvIHdhcyBhY2N1c2VkIG9mIGlsbGVnYWxpdHkgaW4gbWFraW5nIGhpcyBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgICBwZWFjZSBwcm9wb3NhbHMsIGFuZCBoaW1zZWxmIHNlcnZlZCBvbiBhbiBlbWJhc3N5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzE1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTUiPk1hY2Vkb248L3BsYWNlTmFtZT4uIFRoZSBmaW5hbCBwZWFjZSB3YXMgc2lnbmVkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDM0Niwgd2hlbiBBbnRpcGF0ZXIgYW5kIFBhcm1lbmlvIGNhbWUgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFzIFBoaWxpcCdzIGVudm95cy4gUGhpbG9jcmF0ZXMgd2FzIHByb3NlY3V0ZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgSHlwZXJpZGVzIGluIDM0MyBmb3IgYmVpbmcgYnJpYmVkIGJ5IFBoaWxpcCBhbmQgd2VudCBpbnRvIGV4aWxlLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiBGci4gMTYiPkh5cC4gZnJhZy4gMTY8L2JpYmw+PC9ub3RlPiBIZSBoZWxwZWQgdG8gZGVmZW5kCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXMgd2hvIHByb3Bvc2VkIHRoZSBwZWFjZSB3aXRoIFBoaWxpcCBhbmQgd2FzIGV4aWxlZCBieSB5b3UgaW4KICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZSwgaGUgaGlyZWQgYSBjYXJyaWFnZSBmb3IgdGhlIGVudm95cyB3aG8gY2FtZSBoZXJlIHdpdGggQW50aXBhdGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCBieSBhdHRhY2hpbmcgdGhlbSB0byBoaW1zZWxmLCBmaXJzdCBpbnRyb2R1Y2VkIGludG8gdGhlIGNpdHkgdGhlIGN1c3RvbSBvZgogICAgICAgICAgICAgICAgICAgIGZsYXR0ZXJpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxNSI+TWFjZWRvbjwvcGxhY2VOYW1lPiDvvIg8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzQ5Ly0zNDYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM0OSIgdG89Ii0zNDYiPjM0OTwvZGF0ZVJhbmdlPi0zNDYgQi5DLu+8iSB3YXMgdW5kZXJ0YWtlbiBieSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiBhZ2FpbnN0IFBoaWxpcC4gRXZlbiBiZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPiB3YXMgdGFrZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmcgbWFkZSBvdmVydHVyZXMgb2YgcGVhY2UsIGFuZCBpdCB3YXMgUGhpbG9jcmF0ZXMgd2hvIHByb3Bvc2VkIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGlvbnMgc2hvdWxkIGJlZ2luLiBIb3dldmVyLCBhZnRlciB0aGUgZmFsbCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4gaW4gMzQ4LCB0aGUgQXRoZW5pYW5zIHRyaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHVuaXRlIG90aGVyIEdyZWVrIHN0YXRlcyBhZ2FpbnN0IFBoaWxpcCwgYW5kIGl0IHdhcyBub3QgdW50aWwgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBhdHRlbXB0IGhhZCBmYWlsZWQgdGhhdCBEZW1vc3RoZW5lcyBhY3F1aWVzY2VkIGluIHBlYWNlIHByb3Bvc2Fscy4gSW4gMzQ3IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVuZGVkIFBoaWxvY3JhdGVzLCB3aG8gd2FzIGFjY3VzZWQgb2YgaWxsZWdhbGl0eSBpbiBtYWtpbmcgaGlzIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgICAgIHBlYWNlIHByb3Bvc2FscywgYW5kIGhpbXNlbGYgc2VydmVkIG9uIGFuIGVtYmFzc3kgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxNSI+TWFjZWRvbjwvcGxhY2VOYW1lPi4gVGhlIGZpbmFsIHBlYWNlIHdhcyBzaWduZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQ2LCB3aGVuIEFudGlwYXRlciBhbmQgUGFybWVuaW8gY2FtZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYXMgUGhpbGlwJ3MgZW52b3lzLiBQaGlsb2NyYXRlcyB3YXMgcHJvc2VjdXRlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBIeXBlcmlkZXMgaW4gMzQzIGZvciBiZWluZyBicmliZWQgYnkgUGhpbGlwIGFuZCB3ZW50IGludG8gZXhpbGUuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIEZyLiAxNiI+SHlwLiBmcmFnLiAxNjwvYmlibD48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QgYWNxdWl0IGhpbSwgQXRoZW5pYW5zLiBEbyBub3QgbGV0IGdvIHVucHVuaXNoZWQgdGhpcwogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gaGFzIGVuZG9yc2VkIHRoZSBtaXNmb3J0dW5lcyBvZiBoaXMgY291bnRyeSBhbmQgdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCB3aGVuIGhlIGhhcyBiZWVuIGNhdWdodCB3aXRoIGJyaWJlcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIGNpdHkgaW4gaGlzIHZlcnkgaGFuZHMuIE5vdyB0aGF0IGdvb2QgZm9ydHVuZSBpcyBpbXByb3ZpbmcgeW91ciBsb3QKICAgICAgICAgICAgICAgICAgICBhbmQsIGFmdGVyIGV4cGVsbGluZyBmcm9tIHRoZSBjaXR5IG9uZSBvZiB0aGUgdHdvIHdobyBoYXZlIGRlZmlsZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LCBoYXMgc3VycmVuZGVyZWQgdGhpcyBvdGhlciB0byB5b3UgZm9yIGV4ZWN1dGlvbiwgZG8gbm90IG9wcG9zZSBhbGwgb3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIHlvdXJzZWx2ZXMgYnV0IHJhdGhlciBicmluZyBoYXBwaWVyIG9tZW5zIHRvIG91ciBzdGF0ZSBhZmZhaXJzIGFuZAogICAgICAgICAgICAgICAgICAgIGRpdmVydCBvdXIgbWlzZm9ydHVuZXMgb24gdG8gdGhlIGhlYWRzIG9mIHRoZXNlIGxlYWRlcnMuIDwvdHJhbnNsYXRpb24+"
translation['1.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbnN0IHdoYXQgb2NjYXNpb24gd2lsbCB5b3UgcmVzZXJ2ZSBEZW1vc3RoZW5lcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBiZWxpZWYgdGhhdCBoZSB3aWxsIHByb3ZlIHVzZWZ1bCB0byB5b3U/IENvdWxkIGFueSBvbmUgb2YgeW91LCBvciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBieXN0YW5kZXJzLCBzYXkgd2hhdCBwdWJsaWMgb3IgcHJpdmF0ZSBhZmZhaXJzIGhlIGhhcyBub3QgcnVpbmVkIGJ5IGhpcyBjb250YWN0CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGVtPyBBZnRlciBnYWluaW5nIGFjY2VzcyB0byB0aGUgaG9tZSBvZiBBcmlzdGFyY2h1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHN0b3J5IGlzIHRvbGQgbW9yZSBmdWxseSBieSBBZXNjaGluZXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMS4xNzEiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDEuMTcxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMi4xNDgiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDIuMTQ4PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMi4xNjYiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjE2NjwvYmlibD7vvIksIHdobyBzYXlzIHRoYXQgQXJpc3RhcmNodXMgc29uIG9mIE1vc2NodXMgd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgd2VhbHRoeSBvcnBoYW4sIGhhbGYgbWFkLCBmcm9tIHdob20gRGVtb3N0aGVuZXMsIHByZXRlbmRpbmcgdG8gaGF2ZSB0YWtlbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbmN5IHRvIGhpbSBwZXJzb25hbGx5LCBleHRyYWN0ZWQgdGhyZWUgdGFsZW50cy4gSGUgYXNzZXJ0cyB0aGF0IHRvZ2V0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgY29udHJpdmVkIHRvIG11cmRlciwgd2l0aCBncmVhdCBicnV0YWxpdHksIE5pY29kZW11cyBvZiBBcGhpZG5hIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgb25jZSBwcm9zZWN1dGVkIERlbW9zdGhlbmVzIGZvciBkZXNlcnRpb247IGFzIHRoZSByZXN1bHQgb2Ygd2hpY2ggY3JpbWUKICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RhcmNodXMgd2VudCBpbnRvIGV4aWxlLiBEZW1vc3RoZW5lcyBoaW1zZWxmIG1lbnRpb25zIHRoZSBtdXJkZXIgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaCBhZ2FpbnN0IE1pZGlhcywgd2hlcmUgaGUgY2xhaW1zIHRoYXQgTWlkaWFzIHdlbnQgYWJvdXQgY2FzdGluZwogICAgICAgICAgICAgICAgICAgICAgICBzdXNwaWNpb24gb24gaGltIGFuZCBwZXJzdWFkZWQgdGhlIHJlbGF0aXZlcyBvZiBOaWNvZGVtdXMgdG8gZG8gbGlrZXdpc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTA0IiB2YWxpZD0ieWVzIj5EZW0uIDIxLjEwNDwvYmlibD7vvIkuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDIzLjU5MiI+QXRoZW4uIDIzLjU5MiBmPC9iaWJsPi48L25vdGU+IGFuZCBwbGFubmluZyB3aXRoIGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWF0aCBvZiBOaWNvZGVtdXMgd2hpY2ggdGhleSBjb250cml2ZWQsIGFuIGFmZmFpciBvZiB3aGljaCB5b3UgYWxsIGtub3cgdGhlCiAgICAgICAgICAgICAgICAgICAgZGV0YWlscywgZGlkIGhlIG5vdCBiYW5pc2ggQXJpc3RhcmNodXMgb24gdGhlIG1vc3Qgc2hhbWVmdWwgY2hhcmdlcz8gQW5kIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBBcmlzdGFyY2h1cyBmaW5kIGluIERlbW9zdGhlbmVzIHN1Y2ggYSBmcmllbmQgYXMgdG8gbWFrZSBoaW0gdGhpbmsgdGhhdCB0aGlzIHdhcwogICAgICAgICAgICAgICAgICAgIHNvbWUgZXZpbCBzcGlyaXQgd2hpY2ggaGFkIHZpc2l0ZWQgaGltIGFuZCB0aGUgb3JpZ2luYXRvciBvZiBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgbWlzZm9ydHVuZXM/IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDEuMTcxIiB2YWxpZD0ieWVzIj5BZXNjaGluLiAxLjE3MTwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDIuMTQ4IiB2YWxpZD0ieWVzIj5BZXNjaGluLiAyLjE0ODwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDIuMTY2IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMi4xNjY8L2JpYmw+77yJLCB3aG8gc2F5cyB0aGF0IEFyaXN0YXJjaHVzIHNvbiBvZiBNb3NjaHVzIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYWx0aHkgb3JwaGFuLCBoYWxmIG1hZCwgZnJvbSB3aG9tIERlbW9zdGhlbmVzLCBwcmV0ZW5kaW5nIHRvIGhhdmUgdGFrZW4gYQogICAgICAgICAgICAgICAgICAgICAgICBmYW5jeSB0byBoaW0gcGVyc29uYWxseSwgZXh0cmFjdGVkIHRocmVlIHRhbGVudHMuIEhlIGFzc2VydHMgdGhhdCB0b2dldGhlcgogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IGNvbnRyaXZlZCB0byBtdXJkZXIsIHdpdGggZ3JlYXQgYnJ1dGFsaXR5LCBOaWNvZGVtdXMgb2YgQXBoaWRuYSB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2UgcHJvc2VjdXRlZCBEZW1vc3RoZW5lcyBmb3IgZGVzZXJ0aW9uOyBhcyB0aGUgcmVzdWx0IG9mIHdoaWNoIGNyaW1lCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0YXJjaHVzIHdlbnQgaW50byBleGlsZS4gRGVtb3N0aGVuZXMgaGltc2VsZiBtZW50aW9ucyB0aGUgbXVyZGVyIGluIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2ggYWdhaW5zdCBNaWRpYXMsIHdoZXJlIGhlIGNsYWltcyB0aGF0IE1pZGlhcyB3ZW50IGFib3V0IGNhc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgc3VzcGljaW9uIG9uIGhpbSBhbmQgcGVyc3VhZGVkIHRoZSByZWxhdGl2ZXMgb2YgTmljb2RlbXVzIHRvIGRvIGxpa2V3aXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjEwNCIgdmFsaWQ9InllcyI+RGVtLiAyMS4xMDQ8L2JpYmw+77yJLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXRoLiAyMy41OTIiPkF0aGVuLiAyMy41OTIgZjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['1.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCBub3QgdHJ1ZSB0aGF0IG9uY2UgdGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBhZHZpc2UgdGhlIGNpdHksIGFuZCB3b3VsZCBoZSBoYWQgbmV2ZXIgZG9uZSBzbyzigJRJIHNoYWxsIHBhc3MKICAgICAgICAgICAgICAgICAgICBvdmVyIGhpcyBwcml2YXRlIGFmZmFpcnMsIGZvciB0aW1lIGRvZXMgbm90IHBlcm1pdCBtZSB0byBzcGVhayBhdAogICAgICAgICAgICAgICAgICAgIGxlbmd0aCzigJRhYnNvbHV0ZWx5IG5vIGdvb2QgaGFzIGJlZmFsbGVuIGl0OyBpbmRlZWQgbm90IG9ubHkgdGhlIGNpdHkKICAgICAgICAgICAgICAgICAgICBidXQgdGhlIHdob2xlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGludm9sdmVkIGluIGRhbmdlcnMsIG1pc2ZvcnR1bmVzLCBhbmQgZGlzaG9ub3I/IElzIGl0IG5vdCB0cnVlIHRoYXQgaGUgaGFzIGhhZAogICAgICAgICAgICAgICAgICAgIG1hbnkgb3Bwb3J0dW5pdGllcyB3aGlsZSBzcGVha2luZyB0byB5b3UgYW5kIHlldCBsZXQgc2xpcCBldmVyeSBvcHBvcnR1bml0eSB0bwogICAgICAgICAgICAgICAgICAgIGhlbHAgeW91PyBPbiB0aG9zZSBvY2Nhc2lvbnMgd2hlbiBhIHBhdHJpb3Qgd2l0aCBhbnkgcmVnYXJkIGZvciB0aGUgY2l0eSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgY2hvc2VuIHRvIG1ha2Ugc29tZSBtb3ZlLCB0aGlzIGRlbWFnb2d1ZSwgd2hvIHdpbGwgcHJlc2VudGx5IHNheSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gb2Ygc2VydmljZSB0byB5b3UsIHdhcyBzbyBmYXIgZnJvbSBzaG93aW5nIHNpZ25zIG9mIGFjdGlvbiB0aGF0IGhlIGV2ZW4KICAgICAgICAgICAgICAgICAgICBpbmZlY3RlZCB3aXRoIGhpcyBvd24gaWxsLWx1Y2sgdGhlIG1lbiB3aG8gd2VyZSBkb2luZyBzb21ldGhpbmcgdG8gZnVydGhlciB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5DaGFyaWRlbXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNoYXJpZGVtdXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPcmVvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT3Jlb3MiPk9yZW9zPC9wbGFjZU5hbWU+IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbWFkZSBhbiBBdGhlbmlhbiBjaXRpemVuIGZvciBoaXMgc2VydmljZXMgYXMgYSBzb2xkaWVyIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjMuMTUxIiB2YWxpZD0ieWVzIj5EZW0uIDIzLjE1MTwvYmlibD7vvIkuIEhlIHdlbnQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+IGluIDxkYXRlIGF1dGhuYW1lPSItMzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzM1Ij4zMzU8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy4sIGhhdmluZyBiZWVuIGJhbmlzaGVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG9uIHRoZSBvcmRlcnMgb2YgQWxleGFuZGVyIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMTAuNiI+QXJyLiAxLjEwLjY8L2JpYmw+77yJLCBhbmQgYWZ0ZXIgYmVpbmcgd2VsbAogICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBhdCBmaXJzdCBieSBEYXJpdXMsIGZlbGwgdW5kZXIgc3VzcGljaW9uIHR3byB5ZWFycyBsYXRlciBhbmQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVkIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjMwIiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4KICAgICAgICAgICAgICAgICAgICAgICAgMTcuMzA8L2JpYmw+77yJLjwvbm90ZT4gc2V0IG91dCB0byB2aXNpdCB0aGUgUGVyc2lhbiBLaW5nLCB3aXNoaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgZG8geW91IHNvbWUgcHJhY3RpY2FsIHNlcnZpY2UgYXBhcnQgZnJvbSBtZXJlIHRhbGtpbmcsIGFuZCBhbnhpb3VzIGF0IGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBwZXJpbCB0byB3aW4gc2FmZXR5IGZvciB5b3UgYW5kIGV2ZXJ5IEdyZWVrLiBEZW1vc3RoZW5lcyB3ZW50IHJvdW5kIHRoZSBtYXJrZXQKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgc3BlZWNoZXMgYW5kIGFzc29jaWF0aW5nIGhpbXNlbGYgd2l0aCB0aGUgcHJvamVjdC4gU28gY29tcGxldGVseSBkaWQKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIHdyZWNrIHRoaXMgcGxhbiB0aGF0IGl0IHR1cm5lZCBvdXQgaW4ganVzdCB0aGUgb3Bwb3NpdGUgd2F5IHRvIHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT3Jlb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9yZW9zIj5PcmVvczwvcGxhY2VOYW1lPiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgd2FzIG1hZGUgYW4gQXRoZW5pYW4gY2l0aXplbiBmb3IgaGlzIHNlcnZpY2VzIGFzIGEgc29sZGllciDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIzLjE1MSIgdmFsaWQ9InllcyI+RGVtLiAyMy4xNTE8L2JpYmw+77yJLiBIZSB3ZW50IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiBpbiA8ZGF0ZSBhdXRobmFtZT0iLTMzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzNSI+MzM1PC9kYXRlPgogICAgICAgICAgICAgICAgICAgICAgICBCLkMuLCBoYXZpbmcgYmVlbiBiYW5pc2hlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvbiB0aGUgb3JkZXJzIG9mIEFsZXhhbmRlciDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjEwLjYiPkFyci4gMS4xMC42PC9iaWJsPu+8iSwgYW5kIGFmdGVyIGJlaW5nIHdlbGwKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgYXQgZmlyc3QgYnkgRGFyaXVzLCBmZWxsIHVuZGVyIHN1c3BpY2lvbiB0d28geWVhcnMgbGF0ZXIgYW5kIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlZCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy4zMCIgdmFsaWQ9InllcyI+RGlvLiBTaWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDE3LjMwPC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5FcGhpYWx0ZXMgcHV0IHRvIHNlYS4gQWRtaXR0ZWRseSBoZQogICAgICAgICAgICAgICAgICAgIGhhdGVkIERlbW9zdGhlbmVzIGJ1dCBoZSB3YXMgY29tcGVsbGVkIHRvIGhhdmUgYSBwYXJ0bmVyIGluIHB1YmxpYyBhZmZhaXJzLgogICAgICAgICAgICAgICAgICAgIEZvcnR1bmUgcm9iYmVkIHRoZSBjaXR5IG9mIHRoaXMgbWFuIHRvby48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RzIGFyZSBoZXJlIGRpc3RvcnRlZC4gRXBoaWFsdGVzLCBvbmUgb2YgdGhlIG9yYXRvcnMgd2hvc2Ugc3VycmVuZGVyIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCBieSBBbGV4YW5kZXIgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzUiPjMzNTwvZGF0ZT4gQi5DLiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcnIuIEFuLiAxLjEwNCI+QXJyLiAxLjEwNDwvYmlibD7vvIksIHdhcyBhIHN1cHBvcnRlciBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBhbmQsIGFjY29yZGluZyB0byB0aGUgUHNldWRvLVBsdXRhcmNoLCBicm91Z2h0IGJhY2sgbW9uZXkgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZW1hZ29ndWVzIGZyb20gdGhlIFBlcnNpYW4gY291cnQg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiA4NDdmIiB2YWxpZD0ieWVzIj5QbHV0LiBWaXQuIERlbS4gODQ3IEY8L2JpYmw+IGFuZCA4NDggRe+8iS4gSGUgd2FzIGtpbGxlZCB3aGlsZQogICAgICAgICAgICAgICAgICAgICAgICBoZWxwaW5nIHRoZSBQZXJzaWFucyB0byBkZWZlbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTYxNDIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjE0MiI+SGFsaWNhcm5hc3N1czwvcGxhY2VOYW1lPiBhZ2FpbnN0IEFsZXhhbmRlciDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy4yNyIgdmFsaWQ9InllcyI+RGlvLiBTaWMuIDE3LjI3PC9iaWJsPu+8iS48L25vdGU+IEV1dGh5ZGljdXM8ZGF0ZSBhdXRobmFtZT0iLTMzNSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzNSI+MzM1PC9kYXRlPiBCLkMuIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyci4gQW4uIDEuMTA0Ij5BcnIuIDEuMTA0PC9iaWJsPu+8iSwgd2FzIGEgc3VwcG9ydGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIGFuZCwgYWNjb3JkaW5nIHRvIHRoZSBQc2V1ZG8tUGx1dGFyY2gsIGJyb3VnaHQgYmFjayBtb25leSBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGRlbWFnb2d1ZXMgZnJvbSB0aGUgUGVyc2lhbiBjb3VydCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDg0N2YiIHZhbGlkPSJ5ZXMiPlBsdXQuIFZpdC4gRGVtLiA4NDcgRjwvYmlibD4gYW5kIDg0OCBF77yJLiBIZSB3YXMga2lsbGVkIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBpbmcgdGhlIFBlcnNpYW5zIHRvIGRlZmVuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjE0MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2MTQyIj5IYWxpY2FybmFzc3VzPC9wbGFjZU5hbWU+IGFnYWluc3QgQWxleGFuZGVyIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjI3IiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4gMTcuMjc8L2JpYmw+77yJLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5ObyBkZXRhaWxzIGFyZSBrbm93biBvZiBFdXRoeWRpY3VzLiBIZSBzZWVtcyB0bwogICAgICAgICAgICAgICAgICAgICAgICBiZSBtZW50aW9uZWQgYXMgYW4gQXRoZW5pYW4gcGF0cmlvdCB0b2dldGhlciB3aXRoIEVwaGlhbHRlcyBhbmQgTHljdXJndXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRoaXJkIGxldHRlciBvZiBEZW1vc3RoZW5lcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIEwuIDMuMzEiIHZhbGlkPSJ5ZXMiPkRlbS4gTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4zMTwvYmlibD7vvIksIHdoZXJlIGhvd2V2ZXIgdGhlIE1TUy4gaGF2ZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OleG9lM60zrnOu866zr/OvTwvZm9yZWlnbj4uPC9ub3RlPiBlbGVjdGVkIHRvIHdvcmsgZm9yIHRoZSBwZW9wbGUuCiAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgY2xhaW1lZCB0byBiZSBoaXMgZnJpZW5kLiBIZSB0b28gd2FzIGxvc3QuIERvIG5vdCB0aGVzZSBmYWN0cywgd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3Ugc2VlIGFuZCBrbm93IGJldHRlciB0aGFuIEkgZG8sIGdpdmUgeW91IGNhdXNlIGZvciB0aG91Z2h0PyBEbyB0aGV5IG5vdCBtYWtlCiAgICAgICAgICAgICAgICAgICAgeW91IHdlaWdoIHVwIHlvdXIgZnV0dXJlIHByb3NwZWN0cyBpbiB0aGUgbGlnaHQgb2YgdGhlIHBhc3QgYW5kIHJlZmxlY3QgaW4geW91cgogICAgICAgICAgICAgICAgICAgIG93biBtaW5kcyB0aGF0IHRoaXMgbWFuIGlzIG9mIG5vIHVzZSBleGNlcHQgdG8gb3VyIGVuZW1pZXMsIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIG9mIHRoZSBjaXR5PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiBMLiAzLjMxIiB2YWxpZD0ieWVzIj5EZW0uIEwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMuMzE8L2JpYmw+77yJLCB3aGVyZSBob3dldmVyIHRoZSBNU1MuIGhhdmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zpXhvZTOtM65zrvOus6/zr08L2ZvcmVpZ24+LjxnYXAgY2xhc3M9InRyYW5zbGF0aW9uIiAvPj8gPC90cmFuc2xhdGlvbj4="
translation['1.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48Z2FwIGNsYXNzPSJ0cmFuc2xhdGlvbiIgLz50byByYWlzZQogICAgICAgICAgICAgICAgICAgIHN1Y2ggYW5vdGhlciBmb3JjZSBhcyB3ZSBoYWQgaW4gdGhlIHRpbWUgb2YgQWdpcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2hpbGUgQWxleGFuZGVyIHdhcyBpbiB0aGUgRWFzdCwgQWdpcyB0aGUgVGhpcmQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IHJvc2UgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+IHdpdGggdGhlIGhlbHAgb2YgRGFyaXVzIGluIDxkYXRlIGF1dGhuYW1lPSItMzMzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzMzIj4zMzM8L2RhdGU+IEIuQy4gSW4gMzMxIGhlIGhlYWRlZCBhbiBhcm15IHJhaXNlZCBieSB2YXJpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVrIHN0YXRlcyBidXQgd2FzIHJlZnVzZWQgdGhlIHN1cHBvcnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvbiB0aGUgYWR2aWNlIG9mIERlbW9zdGhlbmVzLiBEZWZlYXRlZCBuZWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4gYnkKICAgICAgICAgICAgICAgICAgICAgICAgQW50aXBhdGVyIGhlIHdhcyBraWxsZWQgaW4gYmF0dGxlIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjQ4IiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE3LjQ4PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTcuNjIiIHZhbGlkPSJ5ZXMiPkRpby4gU2ljLgogICAgICAgICAgICAgICAgICAgICAgICAxNy42MjwvYmlibD7vvIkuPC9ub3RlPiB3aGVuIHRoZSBTcGFydGFucyB0b29rIHRoZSBmaWVsZCB0b2dldGhlciBhbmQKICAgICAgICAgICAgICAgICAgICBBY2hhZWFucyBhbmQgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiByb3NlIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxNSI+TWFjZWRvbjwvcGxhY2VOYW1lPiB3aXRoIHRoZSBoZWxwIG9mIERhcml1cyBpbiA8ZGF0ZSBhdXRobmFtZT0iLTMzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMzMyI+MzMzPC9kYXRlPiBCLkMuIEluIDMzMSBoZSBoZWFkZWQgYW4gYXJteSByYWlzZWQgYnkgdmFyaW91cwogICAgICAgICAgICAgICAgICAgICAgICBHcmVlayBzdGF0ZXMgYnV0IHdhcyByZWZ1c2VkIHRoZSBzdXBwb3J0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgb24gdGhlIGFkdmljZSBvZiBEZW1vc3RoZW5lcy4gRGVmZWF0ZWQgbmVhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhbG9wb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYWxvcG9saXMiPk1lZ2Fsb3BvbGlzPC9wbGFjZU5hbWU+IGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFudGlwYXRlciBoZSB3YXMga2lsbGVkIGluIGJhdHRsZSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNy40OCIgdmFsaWQ9InllcyI+RGlvLiBTaWMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNy40ODwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE3LjYyIiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4KICAgICAgICAgICAgICAgICAgICAgICAgMTcuNjI8L2JpYmw+77yJLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxpcyI+RWxpczwvcGxhY2VOYW1lPiB3ZXJlIHRha2luZwogICAgICAgICAgICAgICAgICAgIHRoZWlyIHBhcnQgaW4gdGhlIGNhbXBhaWduIHdpdGggdGVuIHRob3VzYW5kIG1lcmNlbmFyaWVzIGFsc287IHdoZW4gQWxleGFuZGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMTk4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAxOTgiPkluZGlhPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGV4YW5kZXIgd2FzLCBpbiBmYWN0LCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4uPC9ub3RlPiBhY2NvcmRpbmcgdG8gcmVwb3J0LCBhbmQgdGhlIHdob2xlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIG93aW5nIHRvIHRoZSB0cmFpdG9ycyBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNpdHksIHdhcyBkaXNzYXRpc2ZpZWQgd2l0aCB0aGUgZXhpc3Rpbmcgc3RhdGUgb2YgdGhpbmdzIGFuZCBob3BlZCBmb3IKICAgICAgICAgICAgICAgICAgICBzb21lIHJlbGVhc2UgZnJvbSB0aGUgbWlzZm9ydHVuZXMgdGhhdCBiZXNldCBoZXIuIEluIHRoYXQgaG91cizigJRmb3IgSQogICAgICAgICAgICAgICAgICAgIG5lZWQgbm90IGR3ZWxsIG9uIG90aGVyIGNyaXNlcyzigJQgPC90cmFuc2xhdGlvbj4="
translation['1.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz53aGF0IHdhcyB0aGUgYmVoYXZpb3Igb2YgdGhpcyBEZW1vc3RoZW5lcyB3aG8gaGFkIHRoZSBwb3dlciB0byBnaXZlIGFkdmljZSBhbmQKICAgICAgICAgICAgICAgICAgICBtYWtlIHByb3Bvc2Fscywgd2hvIHdpbGwgc2hvcnRseSB0ZWxsIHlvdSB0aGF0IGhlIGhhdGVzIG91ciBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcz8gT24gdGhlc2UgbWF0dGVycywgRGVtb3N0aGVuZXMsIGRpZCB5b3Ugb2ZmZXIgYW55IHByb3Bvc2FsLCBhbnkKICAgICAgICAgICAgICAgICAgICBhZHZpY2U/IERpZCB5b3UgY29udHJpYnV0ZSBtb25leT8gV2VyZSB5b3Ugb2YgdGhlIHNtYWxsZXN0IHZhbHVlIHRvIHRoZSBtZW4KICAgICAgICAgICAgICAgICAgICBzYWZlZ3VhcmRpbmcgdXMgYWxsPyBOb3QgdGhlIGxlYXN0OyB5b3Ugd2VudCByb3VuZCBzdWJvcm5pbmcgc3BlZWNod3JpdGVycy4gSGUKICAgICAgICAgICAgICAgICAgICB3cm90ZSBhIGxldHRlciBhdCBob21lLCBkZWZpbGluZyB0aGUgY2l0eSdzIGhvbm9yLCA8L3RyYW5zbGF0aW9uPg=="
translation['1.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2Fsa2VkIGFib3V0IGRhbmdsaW5nIGl0IGZyb20gaGlzIGZpbmdlciBlbmRzLCBsaXZpbmcgaW4KICAgICAgICAgICAgICAgICAgICBsdXh1cnkgZHVyaW5nIHRoZSBjaXR5J3MgbWlzZm9ydHVuZXMsIHRyYXZlbGxpbmcgZG93biB0aGUgcm9hZCB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaXJhZXVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaXJhZXVzIj5QaXJhZXVzPC9wbGFjZU5hbWU+IGluIGEgbGl0dGVyIGFuZCByZXByb2FjaGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBuZWVkeSBmb3IgdGhlaXIgcG92ZXJ0eS4gSXMgdGhpcyBtYW4gdGhlbiBnb2luZyB0byBwcm92ZSB1c2VmdWwgdG8geW91IG9uIGZ1dHVyZQogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9ucywgd2hlbiBoZSBoYXMgbGV0IHNsaXAgZXZlcnkgb3Bwb3J0dW5pdHkgaW4gdGhlIHBhc3Q/IEJ5IG91ciBsYWR5CiAgICAgICAgICAgICAgICAgICAgQXRoZW5hIGFuZCBaZXVzIHRoZSBTYXZpb3IsIEkgY291bGQgd2lzaCB0aGF0IHRoZSBlbmVtaWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoYWQgbGlnaHRlZCB1cG9uIGNvdW5zZWxsb3JzIGFuZAogICAgICAgICAgICAgICAgICAgIGxlYWRlcnMgbGlrZSBoaW0gYW5kIG5ldmVyIGJldHRlci4gPC90cmFuc2xhdGlvbj4="
translation['1.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IG1lIHJlbWluZCB5b3UsIGdlbnRsZW1lbiwgb2YgdGhlIGNvbmR1Y3Qgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGZvcmJlYXJzLCB3aG8sIGF0IGEgdGltZSB3aGVuIG1hbnkgZ3JhdmUgcGVyaWxzIGJlc2V0IHRoZSBjaXR5LCBmYWNlZCBkYW5nZXIgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIGluIGEgbWFubmVyIHdvcnRoeSBvZiB0aGVpciBjb3VudHJ5IGFuZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdlbGwtZWFybmVkIHJlcHV0YXRpb24sIGFzIGJlZml0dGVkIGZyZWUgbWVuLiBUaW1lIGRvZXMgbm90IHBlcm1pdCBtZSB0byBkZWFsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aG9zZSBmaWd1cmVzIG9mIHRoZSBwYXN0LCBBcmlzdGlkZXMgYW5kIFRoZW1pc3RvY2xlczogdGhlIG1lbiB3aG8gYnVpbHQKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSdzIHdhbGxzIGFuZCBjYXJyaWVkIHVwIHRvIHRoZSBBY3JvcG9saXMgdGhlIHRyaWJ1dGUgcGFpZCBieSB0aGUgd2lsbGluZwogICAgICAgICAgICAgICAgICAgIGFuZCBldmVuIGVhZ2VyIEdyZWVrcy4gPC90cmFuc2xhdGlvbj4="
translation['1.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91IHdpbGwgcmVjYWxsCiAgICAgICAgICAgICAgICAgICAgd2hhdCB3YXMgZG9uZSwgc2hvcnRseSBiZWZvcmUgb3VyIG93biB0aW1lLCBieSBDZXBoYWx1cyB0aGUgb3JhdG9yLCBUaHJhc29uIG9mCiAgICAgICAgICAgICAgICAgICAgSGVyY2hpYSwgRWxldXMgYW5kIFBob3JtaXNpdXMgYW5kIG90aGVyIGZpbmUgbWVuLCBzb21lIG9mIHdob20gYXJlIHN0aWxsIGFsaXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHRvZGF5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZXBoYWx1cyBhc3Npc3RlZCBpbiB0aGUgb3ZlcnRocm93IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBUaGlydHkgaW4gPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4gQi5DLiBIaXMgcmVwdXRhdGlvbiBhcyBhbiBvcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgaXMgYWNrbm93bGVkZ2VkIGJ5IERlbW9zdGhlbmVzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjE5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4yMTk8L2JpYmw+77yJLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjc2IiB2YWxpZD0ieWVzIj5EaW4uIDEuNzY8L2JpYmw+LiBPZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgdGhyZWUgbWVuIGxpdHRsZSBpcyBrbm93bi4gVGhyYXNvbiBpcyBtZW50aW9uZWQgYXMgYSBUaGViYW4KICAgICAgICAgICAgICAgICAgICAgICAgcHJveGVudXMgYnkgQWVzY2hpbmVzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTM5IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4xMzk8L2JpYmw+77yJOyBFbGV1cyBpcyBwZXJoYXBzIHRoZSB0cmllcmFyY2gg77yIYy4KICAgICAgICAgICAgICAgICAgICAgICAgMzIz77yJIHdob3NlIG5hbWUgYXBwZWFycyBpbiBhbiBpbnNjcmlwdGlvbiDvvIhJLkcuIDIuODEyLCBiLgogICAgICAgICAgICAgICAgICAgICAgICAxNO+8iTsgUGhvcm1pc2l1cyBpcyBhIG1lcmUgbmFtZS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiAzNC4zIiB2YWxpZD0ieWVzIj5BcmlzdG90LiBDb25zdC4gQXRoLiAzNC4zPC9iaWJsPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgU29tZSBvZiB0aGVtLCB3aGVuIHRoZSBDYWRtZWEgd2FzIGdhcnJpc29uZWQgYnkgU3BhcnRhbnMsIGFzc2lzdGVkIHRoZSBleGlsZXMKICAgICAgICAgICAgICAgICAgICB3aG8gcmV0dXJuZWQgdG8gPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4gQi5DLiBIaXMgcmVwdXRhdGlvbiBhcyBhbiBvcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgaXMgYWNrbm93bGVkZ2VkIGJ5IERlbW9zdGhlbmVzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjE5IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4yMTk8L2JpYmw+77yJLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjc2IiB2YWxpZD0ieWVzIj5EaW4uIDEuNzY8L2JpYmw+LiBPZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgdGhyZWUgbWVuIGxpdHRsZSBpcyBrbm93bi4gVGhyYXNvbiBpcyBtZW50aW9uZWQgYXMgYSBUaGViYW4KICAgICAgICAgICAgICAgICAgICAgICAgcHJveGVudXMgYnkgQWVzY2hpbmVzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTM5IiB2YWxpZD0ieWVzIj5BZXNjaGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy4xMzk8L2JpYmw+77yJOyBFbGV1cyBpcyBwZXJoYXBzIHRoZSB0cmllcmFyY2gg77yIYy4KICAgICAgICAgICAgICAgICAgICAgICAgMzIz77yJIHdob3NlIG5hbWUgYXBwZWFycyBpbiBhbiBpbnNjcmlwdGlvbiDvvIhJLkcuIDIuODEyLCBiLgogICAgICAgICAgICAgICAgICAgICAgICAxNO+8iTsgUGhvcm1pc2l1cyBpcyBhIG1lcmUgbmFtZS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiAzNC4zIiB2YWxpZD0ieWVzIj5BcmlzdG90LiBDb25zdC4gQXRoLiAzNC4zPC9iaWJsPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kIGF0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIHJpc2sgc2V0IGZyZWUgYSBuZWlnaGJvcmluZyBjaXR5LCBsb25nIGVuc2xhdmVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiA8ZGF0ZSBhdXRobmFtZT0iLTM4MiIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM4MiI+MzgyPC9kYXRlPiBCLkMuIFRoZWJlcyB3YXMgYmV0cmF5ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhbmQgbWFueSBsZWFkaW5nIG1lbgogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIGV4aWxlZC4gVGhlc2UgdG9vayByZWZ1Z2UgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aXRoIHdob3NlIGhlbHAgaW4gMzc4IHRoZXkgc29vbiBvdmVydGhyZXcgdGhlIG5ldwogICAgICAgICAgICAgICAgICAgICAgICBnb3Zlcm5tZW50IGFuZCBlamVjdGVkIHRoZSBTcGFydGFuIGdhcnJpc29uIGZyb20gdGhlIGNpdHkg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuMjUiIHZhbGlkPSJ5ZXMiPkRpby4gU2ljLiAxNS4yNTwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItMzgyIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzgyIj4zODI8L2RhdGU+IEIuQy4gVGhlYmVzIHdhcyBiZXRyYXllZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGFuZCBtYW55IGxlYWRpbmcgbWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgZXhpbGVkLiBUaGVzZSB0b29rIHJlZnVnZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdpdGggd2hvc2UgaGVscCBpbiAzNzggdGhleSBzb29uIG92ZXJ0aHJldyB0aGUgbmV3CiAgICAgICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQgYW5kIGVqZWN0ZWQgdGhlIFNwYXJ0YW4gZ2Fycmlzb24gZnJvbSB0aGUgY2l0eSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS4yNSIgdmFsaWQ9InllcyI+RGlvLiBTaWMuIDE1LjI1PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5PdGhlcnMgbGVudCBhaWQgd2hlbiB5b3VyIGFuY2VzdG9ycyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcGVyc3VhZGVkIHRvIHRha2UgdGhlIGZpZWxkIGJ5IENlcGhhbHVzLCB3aG8gcHJvcG9zZWQgdGhlIGRlY3JlZSBhbmQgd2hvLAogICAgICAgICAgICAgICAgICAgIHVuZGF1bnRlZCBieSB0aGUgbWlnaHQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGxlc3Mgb2YgdGhlIHJpc2tzIGVpdGhlciBvZiBtaWxpdGFyeSBvciBwb2xpdGljYWwgYWN0aW9uLCBtb3ZlZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyBzaG91bGQgbWFyY2ggb3V0IHRvIGhlbHAgdGhlIGV4aWxlcyB3aG8gaGFkIHRha2VuIFRoZWJlcy4gWW91ciBmYXRoZXJzCiAgICAgICAgICAgICAgICAgICAgZGlkIG1hcmNoIG91dCBhbmQgaW4gYSBmZXcgZGF5cyB0aGUgY29tbWFuZGVyIG9mIHRoZSBTcGFydGFuIGdhcnJpc29uIHdhcwogICAgICAgICAgICAgICAgICAgIGV4cGVsbGVkLCB0aGUgVGhlYmFucyBoYWQgYmVlbiBmcmVlZCBhbmQgeW91ciBjaXR5IGhhZCBhY3RlZCB3b3J0aGlseSBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgY291bnNlbGxvcnMsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgbGVhZGVycyBzdWNoIGFzIHlvdXJzZWx2ZXMgYW5kIHRoZSBzdGF0ZSBkZXNlcnZlLiBIb3cgZGlmZmVyZW50IGZyb20KICAgICAgICAgICAgICAgICAgICByb2d1ZXMgbGlrZSB0aGlzIHdobyBuZWl0aGVyIGhhdmUgZG9uZSBub3Igd2lsbCBkbyB0aGUgY2l0eSBhbnkgc2VydmljZSBidXQKICAgICAgICAgICAgICAgICAgICB3YXRjaCBvdmVyIHRoZWlyIG93biBzYWZldHkgYW5kIHRyZWF0IGV2ZXJ5dGhpbmcgYXMgYSBzb3VyY2Ugb2YgaW5jb21lLiBUaGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBtYWRlIHRoZSBjaXR5IG1vcmUgaW5mYW1vdXMgdGhhbiB0aGVtc2VsdmVzLCBhbmQgbm93LCBjb252aWN0ZWQgb2YgdGFraW5nCiAgICAgICAgICAgICAgICAgICAgYnJpYmVzIGFnYWluc3QgeW91LCB0aGV5IGRlY2VpdmUgeW91IGFuZCBwcmVzdW1lLCBhZnRlciBjb25kdWN0IHN1Y2ggYXMgdGhpcywgdG8KICAgICAgICAgICAgICAgICAgICB0YWxrIHRvIHlvdSBhYm91dCB0aGVpciBvd24gYWdncmFuZGl6ZW1lbnQuIFRoZXkgb3VnaHQsIGJ5IHRoZSB0ZXJtcyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93biBkZWNyZWUsIHRvIGhhdmUgYmVlbiBwdXQgdG8gZGVhdGggbG9uZyBhZ28gZm9yIGRvaW5nIHN1Y2ggdGhpbmdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXJlIHlvdSBub3QgYXNoYW1lZCwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIHRoYXQgeW91IHNob3VsZCB0aGluayBvdXIgc3BlZWNoZXMgdGhlIG9ubHkgZXZpZGVuY2UgeW91IGhhdmUgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCB0byBkZXRlcm1pbmUgdGhlIHB1bmlzaG1lbnQgb2YgRGVtb3N0aGVuZXM/IERvIHlvdSBub3Qga25vdyB5b3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGlzIG1hbiBpcyBvcGVuIHRvIGJyaWJlcyBhbmQgaXMgYm90aCBhIHJvYmJlciBhbmQgYSB0cmFpdG9yIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgdGhhdCBuZWl0aGVyIGhlIG5vciB0aGUgZm9ydHVuZSB3aGljaCBoYXMgZ29uZSB3aXRoIGhpbSBpcyBmaXQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHk/IEFyZSB0aGVyZSBhbnkgZGVjcmVlcyBvciBhbnkgbGF3cyB3aGljaCBoYXZlIG5vdCBicm91Z2h0IGhpbSBtb25leT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5BcmUgdGhlcmUgYW55IHBlb3BsZSBpbiB0aGUgY291cnQgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aG9zZSBpbmNsdWRlZCBpbiB0aGUgdGhyZWUgaHVuZHJlZCB3aGVuIERlbW9zdGhlbmVzIGJyb3VnaHQgaW4gaGlzIGxhdwogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIHRyaWVyYXJjaHM/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgdHJpZXJhcmNoIGxhdwogICAgICAgICAgICAgICAgICAgICAgICBzZWUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIEZyLiA0MyI+SHlwLiBmcmFnLiA0MzwvYmlibD4uPC9ub3RlPiBUaGVuIHRlbGwKICAgICAgICAgICAgICAgICAgICB5b3VyIG5laWdoYm9ycyB0aGF0IGhlIGFjY2VwdGVkIHRocmVlIHRhbGVudHMgYW5kIHVzZWQgdG8gYWx0ZXIgYW5kIHJlLWRyYWZ0IHRoZQogICAgICAgICAgICAgICAgICAgIGxhdyBmb3IgZXZlcnkgc2l0dGluZyBvZiB0aGUgQXNzZW1ibHksIGluIHNvbWUgY2FzZXMgdGFraW5nIG1vbmV5IG92ZXIgcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoaWNoIGhlIGhhZCBiZWVuIHBhaWQgYWxyZWFkeSwgaW4gb3RoZXJzIGZhaWxpbmcgdG8gaG9ub3IgdGhlIHNhbGVzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIG1hZGUuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gRnIuIDQzIj5IeXAuIGZyYWcuIDQzPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['1.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5SZWFsbHksIGdlbnRsZW1lbiwgdGVsbCBtZTogZG8KICAgICAgICAgICAgICAgICAgICB5b3UgdGhpbmsgaGUgZ290IG5vdGhpbmcgZm9yIHByb3Bvc2luZyB0aGF0IERpcGhpbHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdHRsZSBpcyBrbm93biBvZiB0aGUgdmFyaW91cyBtZW4gbWVudGlvbmVkIGluIHRoaXMgc2VjdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgRGlwaGlsdXMgd2FzIHBlcmhhcHMgdGhlIHNvbiBvZiBEaW9waXRoZXMsIHRyaWVyYXJjaCBpbiAzMjUvNCBhbmQgPGRhdGVSYW5nZSBhdXRobmFtZT0iLTMyMy8tMzIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zMjMiIHRvPSItMzIyIj4zMjM8L2RhdGVSYW5nZT4vMiBCLkMuIO+8iENJQSAyLjgwOSBkLCA1MwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgODExIGIsIDEwNO+8iS4gRm9yIENoYWVyZXBoaWx1cywgYSBkZWFsZXIgaW4gc2FsdCBmaXNoLCBjb21wYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIEZyLiAzNCI+SHlwLiBmcmFnLiAzNDwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gRnIuIDM1Ij5IeXAuIGZyYWcuIDM1PC9iaWJsPi4gVGhlIHRocmVlIG5hbWVzIGZvbGxvd2luZyBoaXMgYXJlIHRob3NlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzb25zLiBBbGwgZm91ciB3ZXJlIGV2aWRlbnRseSBwdXQgaW4gdGhlIGRlbWUgb2YgUGFlYW5pYSwgUGFtcGhpbHVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQaGlkaXBwdXMgYmVpbmcgbWVudGlvbmVkIGFzIG1lbWJlcnMgb2YgaXQgaW4gaW5zY3JpcHRpb25zIO+8iENJQQogICAgICAgICAgICAgICAgICAgICAgICAyLjE3MiBhbmQgQ0lBIDIuODExIGQsIDE0Mu+8iS4gQ2YuIGFsc28gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXRoLiAzLjExOSI+QXRoZW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjExOTwvYmlibD4gc3EuIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDguMzM5Ij5BdGhlbi4gOC4zMzkgZDwvYmlibD4uCiAgICAgICAgICAgICAgICAgICAgICAgIEJlcmlzYWRlcyBpcyBwcm9iYWJseSB0aGUgc2FtZSBtYW4gYXMgUGFlcmlzYWRlcywgYSBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IHRvIHdob20gRGVtb3N0aGVuZXMgcmVmZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjgiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuODwvYmlibD7vvIk7IFNhdHlydXMgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBzb24uPC9ub3RlPiBzaG91bGQgaGF2ZSBtZWFscyBhdCB0aGUgUHJ5dGFuZXVtIG9yIGZvciB0aGF0IHN0YXR1ZSB0byBiZQogICAgICAgICAgICAgICAgICAgIHB1dCB1cCBpbiB0aGUgbWFya2V0PyBOb3RoaW5nIGZvciBjb25mZXJyaW5nIEF0aGVuaWFuIGNpdGl6ZW5zaGlwIG9uCiAgICAgICAgICAgICAgICAgICAgQ2hhZXJlcGhpbHVzLCBQaGlkb24sIFBhbXBoaWx1cywgYW5kIFBoaWRpcHB1cywgb3IgYWdhaW4gb24gRXBpZ2VuZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgPGRhdGVSYW5nZSBhdXRobmFtZT0iLTMyMy8tMzIyIiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zMjMiIHRvPSItMzIyIj4zMjM8L2RhdGVSYW5nZT4vMiBCLkMuIO+8iENJQSAyLjgwOSBkLCA1MwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgODExIGIsIDEwNO+8iS4gRm9yIENoYWVyZXBoaWx1cywgYSBkZWFsZXIgaW4gc2FsdCBmaXNoLCBjb21wYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIEZyLiAzNCI+SHlwLiBmcmFnLiAzNDwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gRnIuIDM1Ij5IeXAuIGZyYWcuIDM1PC9iaWJsPi4gVGhlIHRocmVlIG5hbWVzIGZvbGxvd2luZyBoaXMgYXJlIHRob3NlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzb25zLiBBbGwgZm91ciB3ZXJlIGV2aWRlbnRseSBwdXQgaW4gdGhlIGRlbWUgb2YgUGFlYW5pYSwgUGFtcGhpbHVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQaGlkaXBwdXMgYmVpbmcgbWVudGlvbmVkIGFzIG1lbWJlcnMgb2YgaXQgaW4gaW5zY3JpcHRpb25zIO+8iENJQQogICAgICAgICAgICAgICAgICAgICAgICAyLjE3MiBhbmQgQ0lBIDIuODExIGQsIDE0Mu+8iS4gQ2YuIGFsc28gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXRoLiAzLjExOSI+QXRoZW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjExOTwvYmlibD4gc3EuIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDguMzM5Ij5BdGhlbi4gOC4zMzkgZDwvYmlibD4uCiAgICAgICAgICAgICAgICAgICAgICAgIEJlcmlzYWRlcyBpcyBwcm9iYWJseSB0aGUgc2FtZSBtYW4gYXMgUGFlcmlzYWRlcywgYSBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IHRvIHdob20gRGVtb3N0aGVuZXMgcmVmZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM0LjgiIHZhbGlkPSJ5ZXMiPkRlbS4gMzQuODwvYmlibD7vvIk7IFNhdHlydXMgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBzb24uPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRoZSBiYW5rZXJzPyBOb3RoaW5nIGZvcgogICAgICAgICAgICAgICAgICAgIHB1dHRpbmcgdXAgaW4gdGhlIG1hcmtldCBicm9uemUgc3RhdHVlcyBvZiBCZXJpc2FkZXMsIFNhdHlydXMgYW5kIEdvcmdpcHB1cyB0aGUKICAgICAgICAgICAgICAgICAgICB0eXJhbnRzIGZyb20gdGhlIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5Qb250dXM8L3BsYWNlTmFtZT4sIGZyb20gd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVzIGEgdGhvdXNhbmQgbWVkaW1uaSBvZiB3aGVhdCBhIHllYXLigJR0aGlzIG1hbiB3aG8gd2lsbAogICAgICAgICAgICAgICAgICAgIHByZXNlbnRseSB0ZWxsIHlvdSB0aGF0IHRoZXJlIGlzIG5vd2hlcmUgZm9yIGhpbSB0byB0YWtlIHJlZnVnZS4gPC90cmFuc2xhdGlvbj4="
translation['1.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5EaWQgaGUgZ2V0IG5vdGhpbmcgZm9yIHByb3Bvc2luZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIFRhdXJvc3RoZW5lczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EaW5hcmNodXMsIGxpa2UgQWVzY2hpbmVzLCBpcwogICAgICAgICAgICAgICAgICAgICAgICBkaXN0b3J0aW5nIHRoZSBmYWN0cy4g77yIQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuODUiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDg1PC9iaWJsPiBzcS4gYW5kIHNjaG9sLiBhZCBsb2Mu77yJLiBUaGUgY2l0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBoYWQgZW50ZXJlZCB0aGUgQXRoZW5pYW4gYWxsaWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNTciPjM1NzwvZGF0ZT4gQi5DLiwgYnV0IGluIDM0OCB0aGV5IHJldm9sdGVkLCBwcm9iYWJseQogICAgICAgICAgICAgICAgICAgICAgICBvd2luZyB0byB0aGUgaW50cmlndWVzIG9mIFBoaWxpcCB3aXRoIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdhcyBub3cgYXQgd2FyIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LiBUYXVyb3N0aGVuZXMgYW5kIENhbGxpYXMKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVkIHRoZSBhcm15IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIEF0aGVuaWFucyBsb3N0IGNvbnRyb2wgb2YgdGhlIGlzbGFuZC4gSW4gMzQzIGhvd2V2ZXIgdGhleQogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2ZlcnJlZCB0aGUgYWxsZWdpYW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENoYWxjaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENoYWxjaXMiPkNoYWxjaXM8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgYSBmZXcgeWVhcnMgbGF0ZXItdGhlIGV4YWN0IGRhdGUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRhaW4td2VyZSBtYWRlIEF0aGVuaWFuIGNpdGl6ZW5zIG9uIHRoZSBtb3Rpb24gb2YgRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICAgICAg77yIY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNSIgdmFsaWQ9InllcyI+SHlwLiA1IGNvbC4gMjA8L2JpYmw+77yJLCB3aG9tCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBzYXlzIHRoZXkgYnJpYmVkLjwvbm90ZT4gc2hvdWxkIGJlY29tZSBhbiBBdGhlbmlhbiwgdGhvdWdoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGVuc2xhdmVkIGhpcyBmZWxsb3cgY2l0aXplbnMgYW5kLCB3aXRoIGhpcyBicm90aGVyIENhbGxpYXMsIGJldHJheWVkIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuODUiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDg1PC9iaWJsPiBzcS4gYW5kIHNjaG9sLiBhZCBsb2Mu77yJLiBUaGUgY2l0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBoYWQgZW50ZXJlZCB0aGUgQXRoZW5pYW4gYWxsaWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNTciPjM1NzwvZGF0ZT4gQi5DLiwgYnV0IGluIDM0OCB0aGV5IHJldm9sdGVkLCBwcm9iYWJseQogICAgICAgICAgICAgICAgICAgICAgICBvd2luZyB0byB0aGUgaW50cmlndWVzIG9mIFBoaWxpcCB3aXRoIHdob20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdhcyBub3cgYXQgd2FyIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LiBUYXVyb3N0aGVuZXMgYW5kIENhbGxpYXMKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVkIHRoZSBhcm15IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIEF0aGVuaWFucyBsb3N0IGNvbnRyb2wgb2YgdGhlIGlzbGFuZC4gSW4gMzQzIGhvd2V2ZXIgdGhleQogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2ZlcnJlZCB0aGUgYWxsZWdpYW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENoYWxjaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENoYWxjaXMiPkNoYWxjaXM8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgYSBmZXcgeWVhcnMgbGF0ZXItdGhlIGV4YWN0IGRhdGUgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRhaW4td2VyZSBtYWRlIEF0aGVuaWFuIGNpdGl6ZW5zIG9uIHRoZSBtb3Rpb24gb2YgRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICAgICAg77yIY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNSIgdmFsaWQ9InllcyI+SHlwLiA1IGNvbC4gMjA8L2JpYmw+77yJLCB3aG9tCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBzYXlzIHRoZXkgYnJpYmVkLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiB0byBQaGlsaXA/IFRhdXJvc3RoZW5lcyB3aG9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgZm9yYmlkIHRvIHNldCBmb290IG9uIEF0aGVuaWFuIHNvaWwsIHByb3ZpZGluZyB0aGF0IGlmIGhlIGRvZXMgc28gaGUKICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBsaWFibGUgdG8gdGhlIHNhbWUgcGVuYWx0aWVzIGFzIGFuIGV4aWxlIHdobyByZXR1cm5zIGFmdGVyIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgc2VudGVuY2VkIGJ5IHRoZSBBcmVvcGFndXMuIFRoaXMgd2FzIHRoZSBtYW4gd2hvIERlbW9zdGhlbmVzIHRoZSBkZW1vY3JhdAogICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIHNob3VsZCBiZSB5b3VyIGZlbGxvdyBjaXRpemVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5JcwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGFueSBuZWVkIHRoZW4gZm9yIG1lIHRvIGNhbGwgdXAgd2l0bmVzc2VzIGZvciB5b3Ugc28gZmFyIGFzIHRoZXNlIG1lbiBhcmUKICAgICAgICAgICAgICAgICAgICBjb25jZXJuZWQgb3IgYW55IG9mIHRoZSBvdGhlcnMgd2hvbSBoZSBoYXMgcHJvcG9zZWQgYXMgcHJveGVuaSBvciBjaXRpemVucz8gSQogICAgICAgICAgICAgICAgICAgIGFzayB5b3UgaW4gQXRoZW5hJ3MgbmFtZTogZG8geW91IGltYWdpbmUgdGhhdCB3aGVuIGhlIGdsYWRseSBhY2NlcHRzIHNpbHZlciBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHJlZnVzZSB0d2VudHkgdGFsZW50cyBvZiBnb2xkPyBEbyB5b3UgdGhpbmsgdGhhdCB0aG91Z2ggaGUgdGFrZXMgbW9uZXkgaW4KICAgICAgICAgICAgICAgICAgICBkcmliYmxldHMsIGhlIHdvdWxkIG5vdCBhY2NlcHQgYXMgYSBsdW1wIHN1bSBzbyBncmVhdCBhIGZlZSwgb3IgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBBcmVvcGFndXMsIHdoaWNoIHNwZW50IHNpeCBtb250aHMgaW5xdWlyaW5nIG92ZXIgRGVtb3N0aGVuZXMsIERlbWFkZXMsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBDZXBoaXNvcGhvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBpcyBwcm9iYWJseSB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBDZXBoaXNvcGhvbiwgYSBwb2xpdGljaWFuIG9mIHRoZSB0aW1lLCBhcyBpcyBtZW50aW9uZWQgYnkgRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjEiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjE8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI5MyIgdmFsaWQ9InllcyI+RGVtLiAxOS4yOTM8L2JpYmw+77yJLjwvbm90ZT4gaGFzIGJlZW4gdW5qdXN0CiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgcmVwb3J0cyBzdWJtaXR0ZWQgdG8geW91PyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjIxIiB2YWxpZD0ieWVzIj5EZW0uIDE4LjIxPC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4yOTMiIHZhbGlkPSJ5ZXMiPkRlbS4gMTkuMjkzPC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+R2VudGxlbWVuLCB5b3UgaGF2ZSB2ZXJ5IG1hbnkgd2l0bmVzc2VzLCBhcyBJIHNhaWQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUsIGFtb25nIGNpdGl6ZW5zIGFuZCBvdGhlciBHcmVla3MsIHdhdGNoaW5nIHRvIHNlZSBob3cgeW91IHdpbGwganVkZ2UgdGhpcwogICAgICAgICAgICAgICAgICAgIHRyaWFsOyBhcmUgeW91LCB0aGV5IHdvbmRlciwgZ29pbmcgdG8gYnJpbmcgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgY291cnRzIHRoZQogICAgICAgICAgICAgICAgICAgIHZlbmFsIGFjdGlvbnMgb2Ygb3RoZXIgbWVuLCBvciB3aWxsIHRoZXJlIGJlIGNvbXBsZXRlIGZyZWVkb20gdG8gYWNjZXB0IGJyaWJlcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgeW91PyBXaWxsIHRoZSB0aGluZ3Mgd2hpY2ggc28gZmFyIGhhdmUgYmVlbiBoZWxkIHRydXN0d29ydGh5IGFuZCBzdXJlCiAgICAgICAgICAgICAgICAgICAgbm93IGNlYXNlIHRvIGJlIHNvIG9uIGFjY291bnQgb2YgdGhlIHRyaWFsIG9mIERlbW9zdGhlbmVzPyBPbiBoaXMgcGFzdCByZWNvcmQgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBoYXZlIGJlZW4gcHV0IHRvIGRlYXRoLCBhbmQgaGUgaXMgbGlhYmxlIHRvIGFsbCB0aGUgY3Vyc2VzIGtub3duIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHksIDwvdHJhbnNsYXRpb24+"
translation['1.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5oYXZpbmcgYnJva2VuIHRoZSBvYXRocyBoZSB0b29rIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIEFyZW9wYWd1cywgaW4gdGhlIG5hbWVzIG9mIHRoZSBob2x5IGdvZGRlc3NlcyBhbmQgdGhlIG90aGVyIGRlaXRpZXMgYnkgd2hvbSBpdAogICAgICAgICAgICAgICAgICAgIGlzIGN1c3RvbWFyeSB0byBzd2VhciB0aGVyZSwgYW5kIG1ha2luZyBoaW1zZWxmIGFjY3Vyc2VkIGF0IGV2ZXJ5IHNpdHRpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkuIEhlIGhhcyBiZWVuIHByb3ZlZCB0byBoYXZlIHRha2VuIGJyaWJlcyBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFzIGNoZWF0ZWQgdGhlIHBlb3BsZSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY291bmNpbCBpbiBkZWZpYW5jZSBvZiB0aGUgY3Vyc2UsIHByb2Zlc3Npbmcgdmlld3MgaGUgZG9lcyBub3QgaG9sZCwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBoYXMgcmVjb21tZW5kZWQgdG8gQXJpc3RhcmNodXMgYSBjb3Vyc2UgYm90aCBjcnVlbCBhbmQgdW5sYXdmdWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMzAiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4zMDwvYmlibD4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGUuPC9ub3RlPiBGb3IgdGhlc2UgbWlzZGVlZHMsIGlmIHRoZXJlIGlzIGFueSBwb3dlciB0byBleGFjdCBhIGp1c3QKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50IGZyb20gcGVyanVyZXJzIGFuZCBjcmltaW5hbHPigJRhcyB0aGVyZSBzdXJlbHkKICAgICAgICAgICAgICAgICAgICBpc+KAlHRoaXMgbWFuIHNoYWxsIHBheSB0b2RheS4gR2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBsaXN0ZW4gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNlLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4zMCIgdmFsaWQ9InllcyI+RGluLiAxLjMwPC9iaWJsPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgbm90ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Rm9yIHRoZSBjdXJzZSBwcm9ub3VuY2VkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBoZXJhbGQgYmVmb3JlIGVhY2ggc2l0dGluZyBvZiB0aGUgQ291bmNpbCBhbmQgQXNzZW1ibHkgb24gYWxsIHdobyBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgICAgICBhY3RpbmcgdHJlYXNvbmFibHkgYWdhaW5zdCB0aGUgc3RhdGUgY29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMeWMuIDEuMzEiIHZhbGlkPSJ5ZXMiPkx5Yy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMzE8L2JpYmw+Ljwvbm90ZT48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMeWMuIDEuMzEiIHZhbGlkPSJ5ZXMiPkx5Yy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMzE8L2JpYmw+LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkN1cnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Vyc2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Vyc2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RGVzcGl0ZSB0aGlzLAogICAgICAgICAgICAgICAgICAgIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgRGVtb3N0aGVuZXMgaXMgc28gcmVhZHkgd2l0aCBoaXMgbGllcyBhbmQgdXR0ZXJseSB1bnNvdW5kCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9ucywgc28gb2JsaXZpb3VzIG9mIHNoYW1lLCBleHBvc3VyZSwgb3IgY3Vyc2UsIHRoYXQgaGUgd2lsbCBkYXJlIHRvIHNheQogICAgICAgICAgICAgICAgICAgIG9mIG1lLCBJIGdhdGhlciwgdGhhdCBJIHRvbyB3YXMgcHJldmlvdXNseSBjb25kZW1uZWQgYnkgdGhlIGNvdW5jaWwuIEFjY29yZGluZwogICAgICAgICAgICAgICAgICAgIHRvIGhpbSBJIGFtIGJlaGF2aW5nIHdpdGggdGhlIHV0bW9zdCBpbmNvbnNpc3RlbmN5LCBiZWNhdXNlIGluIHRoZSBwYXN0IEkKICAgICAgICAgICAgICAgICAgICBvcHBvc2VkIHRoZSBjb3VuY2lsJ3MgcmVwb3J0IGFuZCBwbGVhZGVkIG15IG93biBjYXNlLCB3aGVyZWFzIEkgYW0gbm93IHNlcnZpbmcKICAgICAgICAgICAgICAgICAgICBhcyBpdHMgYWR2b2NhdGUgYW5kIGFjY3VzaW5nIGhpbSBvdmVyIHRoZSByZXBvcnQgYmVmb3JlIHVzIHRvZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGEgc3Rvcnkgb2YgaGlzIG93biBpbnZlbnRpb24sIG5vdCBiYXNlZCBvbgogICAgICAgICAgICAgICAgICAgIGZhY3QsIGFuZCBoZSBpcyBpbXB1ZGVudCBlbm91Z2ggdG8gbGllIHRvIHlvdS4gU28gdG8gbWFrZSBzdXJlIHRoYXQsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgZW1iYXJrcyB1cG9uIHRoaXMgc3RvcnksIHlvdSB3aWxsIHBheSBubyBhdHRlbnRpb24gdG8gaGltIGJ1dCB3aWxsIHJlYWxpemUgZnVsbHkKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb3VuY2lsIGRpZCBub3QgcmVwb3J0IG1lIGFuZCB3YXMgaW4gbm8gZGFuZ2VyIG9mIGRvaW5nCiAgICAgICAgICAgICAgICAgICAgc28s4oCUdGhlIHRydXRoIGJlaW5nIHRoYXQgSSBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgYSBtYW4gb2YgbG93CiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIHdobyBoYXMgYmVlbiBjb252aWN0ZWQgYmVmb3JlIHlvdSzigJRsZXQgbWUgZXhwbGFpbiBicmllZmx5LgogICAgICAgICAgICAgICAgICAgIFRoZW4gSSB3aWxsIGNvbWUgYmFjayB0byBEZW1vc3RoZW5lcy4gPC90cmFuc2xhdGlvbj4="
translation['1.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGNvdW5jaWwgb2YgdGhlIEFyZW9wYWd1cyBpcyBib3VuZCwKICAgICAgICAgICAgICAgICAgICBnZW50bGVtZW4sIHRvIGZvbGxvdyBvbmUgb2YgdHdvIG1ldGhvZHMgaW4gbWFraW5nIGFsbCBpdHMgcmVwb3J0cy4gV2hhdCBhcmUKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZXRob2RzPyBJdHMgaW5xdWlyeSBpcyBtYWRlIGVpdGhlciBvbiBpdHMgb3duIGluaXRpYXRpdmUgb3IgaW4gb2JlZGllbmNlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHBlb3BsZSdzIGluc3RydWN0aW9ucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjYiIHZhbGlkPSJ5ZXMiPkRpbi4gMS42PC9iaWJsPi48L25vdGU+IEFwYXJ0IGZyb20gdGhlc2UgdHdvLCB0aGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIG90aGVyIHByb2NlZHVyZSBpdCBjb3VsZCBmb2xsb3cuIElmIHRoZW4geW91IHRlbGwgdXMsIHlvdSBhYm9taW5hYmxlIGJydXRlLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdW5jaWwgZm9sbG93ZWQgdGhlIHBlb3BsZSdzIGluc3RydWN0aW9ucyBpbiBtYWtpbmcgaXRzIGlucXVpcnkgYW5kCiAgICAgICAgICAgICAgICAgICAgcHVibGlzaGluZyB0aGUgcmVwb3J0IG9uIG1lLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuNiIgdmFsaWQ9InllcyI+RGluLiAxLjY8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['1.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5zaG93IG1lIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBhbmQgdGVsbCBtZSB3aG8gd2VyZSBteSBhY2N1c2VycyBhZnRlciB0aGUgcmVwb3J0IHdhcyBtYWRlLiBDb21wYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgY2FzZSwgd2hlcmUgeW91IGhhdmUgYm90aDogYSBkZWNyZWUgd2hpY2ggYXV0aG9yaXplZCB0aGUgY291bmNpbCdzCiAgICAgICAgICAgICAgICAgICAgaW5xdWlyeSwgYW5kIGFjY3VzZXJzLCBlbGVjdGVkIGJ5IHRoZSBwZW9wbGUsIHdobyBhcmUgbm93IGdpdmluZyB0aGUganVyeSBhbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIGNyaW1lcy4gSWYgeW91ciBzdG9yeSBpcyB0cnVlLCBJIGFtIHByZXBhcmVkIHRvIGRpZS4gQnV0IGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGNsYWltIHRoYXQgdGhlIGNvdW5jaWwgdG9vayB0aGUgaW5pdGlhdGl2ZSBpbiByZXBvcnRpbmcgbWUsIHByb2R1Y2UgdGhlCiAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ2l0ZXMgYXMgd2l0bmVzc2VzLCBqdXN0IGFzIEkgbXlzZWxmIHNoYWxsIHByb2R1Y2UgdGhlbSB0byBzaG93IHRoYXQgSSB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgcmVwb3J0ZWQsIDwvdHJhbnNsYXRpb24+"
translation['1.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz50byBzaG93IGluIGZhY3QgdGhhdCwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBpbXBlYWNoaW5nIG9uZSByb2d1ZSBhbmQgdHJhaXRvciB3aG8sIGxpa2UgeW91LCBoYWQgbWFsaWduZWQgdGhlIGNvdW5jaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmLCBJIHByb3ZlZCBiZWZvcmUgdHdvIHRob3VzYW5kIGZpdmUgaHVuZHJlZCBjaXRpemVucyB0aGF0IGhlIGhhZCBoaXJlZAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdG8gUHl0aG9jbGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlB5dGhvY2xlcyB3YXMgYW4gQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICAgICAgb3JhdG9yIHdobywgaW4gY29tcGFueSB3aXRoIEFlc2NoaW5lcywgYXR0YWNrZWQgRGVtb3N0aGVuZXMgdW5zdWNjZXNzZnVsbHkKICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+LiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yODUiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjg1PC9iaWJsPi48L25vdGU+IGluIG1ha2luZyB0aGlzIGF0dGFjayB1cG9uCiAgICAgICAgICAgICAgICAgICAgbWUsIGFuZCBzbyBhdmVuZ2VkIG15c2VsZiB3aXRoIHRoZSBoZWxwIG9mIHRob3NlIHRoZW4gc2VydmluZyBvbiB0aGUganVyeS4KICAgICAgICAgICAgICAgICAgICBDbGVyaywgcGxlYXNlIHRha2UgdGhlIGRlcG9zaXRpb24uIEkgbGFpZCBpdCBiZWZvcmUgdGhlIGp1cnkgcHJldmlvdXNseSBhcwogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlIGFuZCBubyBvbmUgcXVlc3Rpb25lZCBpdHMgdmVyYWNpdHkuIFNvIEkgd2lsbCBwcm9kdWNlIGl0IG5vdy4gUmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT4uIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjI4NSIgdmFsaWQ9InllcyI+RGVtLiAxOC4yODU8L2JpYmw+LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgaXQgbm90IGFuCiAgICAgICAgICAgICAgICAgICAgYW5vbWFseSwgQXRoZW5pYW5zLCB0aGF0IG9uIHRoYXQgb2NjYXNpb24sIGJlY2F1c2Ugb25lIG1hbiwgUGlzdGlhcyBhbgogICAgICAgICAgICAgICAgICAgICAgICBBcmVvcGFnaXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Ob3RoaW5nIGVsc2UgaXMga25vd24gb2YgUGlzdGlhcwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgdGhhdCBEaW5hcmNodXMgY29tcG9zZWQgYSBzcGVlY2ggYWdhaW5zdCBoaW0sIHRoZSB0aXRsZSBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJzIGluIHRoZSBsaXN0IG9mIGhpcyBnZW51aW5lIHB1YmxpYyBvcmF0aW9ucyBwcmVzZXJ2ZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgRGlvbnlzaXVzLjwvbm90ZT4gdG9sZCBsaWVzIGFnYWluc3QgdGhlIGNvdW5jaWwgYW5kIG15c2VsZiBhbmQgc2FpZCB0aGF0IEkKICAgICAgICAgICAgICAgICAgICB3YXMgYSBjcmltaW5hbCwgZmFsc2Vob29kIHdvdWxkIGhhdmUgcHJldmFpbGVkIG92ZXIgdHJ1dGgsIGlmIHRocm91Z2ggbXkKICAgICAgICAgICAgICAgICAgICB3ZWFrbmVzcyBhbmQgaXNvbGF0aW9uIGF0IHRoZSB0aW1lIHRoZSB0cnVtcGVkIHVwIGxpZXMgYWdhaW5zdCBtZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGJlbGlldmVkOyB3aGVyZWFzIG5vdywgd2hlbiB0aGUgZmFjdCBpcyBhZG1pdHRlZCBieSB0aGUgd2hvbGUgQXJlb3BhZ3VzIHRoYXQKICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBoYXMgdGFrZW4gdHdlbnR5IHRhbGVudHMgb2YgZ29sZCBhZ2FpbnN0IHlvdXIgaW50ZXJlc3RzLCBhbmQgaXMKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgYSBjcmltaW5hbCwgYW5kIHRoYXQgeW91ciBwb3B1bGFyIGxlYWRlciwgaW4gd2hvbSBzb21lIG1lbiBwbGFjZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvcGVzLCA8L3RyYW5zbGF0aW9uPg=="
translation['1.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5oYXMgYmVlbiBjYXVnaHQgaW4gdGhlIGFjdCBvZiB0YWtpbmcKICAgICAgICAgICAgICAgICAgICBicmliZXMsIHRoZSBjdXN0b21zIG9mIHRoZSBBcmVvcGFndXMgYW5kIHRydXRoIGFuZCBqdXN0aWNlIGFyZSBnb2luZyB0byBwcm92ZQogICAgICAgICAgICAgICAgICAgIHdlYWtlciB0aGFuIERlbW9zdGhlbmVzJyB3b3JkPyBUcnV0aCB3aWxsIGJlIG92ZXJyaWRkZW4gYnkgdGhlIHNsYW5kZXJvdXMKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgaGUgaW50ZW5kcyB0byBtYWtlIGFnYWluc3QgdGhlIGNvdW5jaWwsIG5hbWVseSB0aGF0IG1hbnkgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICByZXBvcnRlZCBieSBpdCBhcyBhIG1lbmFjZSB0byB0aGUgcGVvcGxlIGhhdmUsIG9uIGNvbWluZyBpbnRvIGNvdXJ0LCBiZWVuCiAgICAgICAgICAgICAgICAgICAgYWNxdWl0dGVkLCBpbiBzb21lIGNhc2VzIHRoZSBjb3VuY2lsIGZhaWxpbmcgdG8gc2VjdXJlIGEgZmlmdGggcGFydCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB2b3Rlcy4gVGhlcmUgaXMgYW4gZXhwbGFuYXRpb24gZm9yIHRoaXMgd2hpY2ggeW91IHdpbGwgZWFzaWx5IGZvbGxvdy4gPC90cmFuc2xhdGlvbj4="
translation['1.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY291bmNpbCwgZ2VudGxlbWVuLCBoYXMgaXRzIG93biBtZXRob2Qgb2YKICAgICAgICAgICAgICAgICAgICBpbnF1aXJpbmcgaW50byB0aGUgY2FzZXMgd2hpY2ggeW91IGFzc2lnbiB0byBpdCBhbmQgdGhlIGNyaW1lcyBjb21taXR0ZWQgd2l0aGluCiAgICAgICAgICAgICAgICAgICAgaXRzIG93biBib2R5LiBVbmxpa2UgeW91cnNlbHZlcyzigJRhbmQgeW91IG5lZWQgbm90IHRha2Ugb2ZmZW5jZSBhdAogICAgICAgICAgICAgICAgICAgIHRoaXMs4oCUd2hvIGFyZSBzb21ldGltZXMgYXB0IHdoZW4ganVkZ2luZyB0byBnaXZlIG1vcmUgd2VpZ2h0IHRvIG1lcmN5CiAgICAgICAgICAgICAgICAgICAgdGhhbiB0byBqdXN0aWNlLCBpdCBzaW1wbHkgcmVwb3J0cyBhbnlvbmUgd2hvIGlzIGxpYWJsZSB0byB0aGUgY2hhcmdlcyBpbgogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIG9yIGhhcyBicm9rZW4gYW55IHRyYWRpdGlvbmFsIHJ1bGUgb2YgY29uZHVjdCBiZWxpZXZpbmcgdGhhdCBpZiBhCiAgICAgICAgICAgICAgICAgICAgcGVyc29uIGlzIGluIHRoZSBoYWJpdCBvZiBjb21taXR0aW5nIHNtYWxsIG9mZmVuY2VzIGhlIHdpbGwgbW9yZSBlYXNpbHkgaW52b2x2ZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaW4gc2VyaW91cyBjcmltZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5Db25zZXF1ZW50bHkgd2hlbgogICAgICAgICAgICAgICAgICAgIG9uZSBvZiBpdHMgbnVtYmVyIHJvYmJlZCB0aGUgZmVycnltYW4gb2YgaGlzIGZhcmUgaXQgZmluZWQgaGltIGFuZCByZXBvcnRlZCBoaW0KICAgICAgICAgICAgICAgICAgICB0byB5b3UuIEFnYWluLCB3aGVuIHNvbWVvbmUgY2xhaW1lZCB0aGUgZml2ZSBkcmFjaG1hIGFsbG93YW5jZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JdCBhcHBlYXJzIGZyb20gSHlwZXJpZGVzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNSIgdmFsaWQ9InllcyI+SHlwLiA1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuIDI2PC9iaWJsPu+8iSwgd2hvIHNlZW1zIHRvIGJlIHJlZmVycmluZyB0byB0aGUgc2FtZSBjYXNlLAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IERpbmFyY2h1cyBpcyBoZXJlIGFsbHVkaW5nIHRvIHRoZSBkb2xlIG1hZGUgdG8gQXRoZW5pYW5zIHRvIGVuYWJsZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGF0dGVuZCB0aGUgdGhlYXRlci4gVGhlIG5vcm1hbCBwcmljZSBvZiBhIHNlYXQgd2FzIG9uZS10aGlyZCBvZiBhIGRyYWNobWEKICAgICAgICAgICAgICAgICAgICAgICAgb25seSwgYnV0IGFzIHRoZSBmdW5kIHdhcyBhcHBhcmVudGx5IGRyYXduIHVwb24gZm9yIG90aGVyIHB1cnBvc2VzIGFsc28sIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHBlcmhhcHMgbm90IHN1cnByaXNpbmcgdGhhdCB0aGUgc3VtIG1lbnRpb25lZCBoZXJlIGlzIGxhcmdlci4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkxpYi4gQXJnLkQuIDEiPkxpYmFuaXVzIGFyZy4gYWQgRGVtb3N0aGVuZW0gMTwvYmlibD4uIFRoZSBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnRpb25lZCBpbiB0aGUgZm9sbG93aW5nIHNlbnRlbmNlIHdhcyBhbiBhbGxvd2FuY2Ugb2Ygc2FjcmlmaWNpYWwgbWVhdAogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIHRvIG1lbWJlcnMgb2YgdGhlIEFyZW9wYWd1cy48L25vdGU+IGluIHRoZSBuYW1lIG9mIGFuIGFic2VudGVlLCBpdAogICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkIGhpbSBhbHNvIHRvIHlvdS4gU2ltaWxhcmx5IGl0IGZpbmVkIGFuZCBleHBlbGxlZCB0aGUgbWFuIHdobyBwcmVzdW1lZAogICAgICAgICAgICAgICAgICAgIHRvIGJyZWFrIHRoZSBydWxlIGFuZCBzZWxsIHRoZSBBcmVvcGFnaXRlIHBvcnRpb24uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNSIgdmFsaWQ9InllcyI+SHlwLiA1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuIDI2PC9iaWJsPu+8iSwgd2hvIHNlZW1zIHRvIGJlIHJlZmVycmluZyB0byB0aGUgc2FtZSBjYXNlLAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IERpbmFyY2h1cyBpcyBoZXJlIGFsbHVkaW5nIHRvIHRoZSBkb2xlIG1hZGUgdG8gQXRoZW5pYW5zIHRvIGVuYWJsZSB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGF0dGVuZCB0aGUgdGhlYXRlci4gVGhlIG5vcm1hbCBwcmljZSBvZiBhIHNlYXQgd2FzIG9uZS10aGlyZCBvZiBhIGRyYWNobWEKICAgICAgICAgICAgICAgICAgICAgICAgb25seSwgYnV0IGFzIHRoZSBmdW5kIHdhcyBhcHBhcmVudGx5IGRyYXduIHVwb24gZm9yIG90aGVyIHB1cnBvc2VzIGFsc28sIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHBlcmhhcHMgbm90IHN1cnByaXNpbmcgdGhhdCB0aGUgc3VtIG1lbnRpb25lZCBoZXJlIGlzIGxhcmdlci4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkxpYi4gQXJnLkQuIDEiPkxpYmFuaXVzIGFyZy4gYWQgRGVtb3N0aGVuZW0gMTwvYmlibD4uIFRoZSBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnRpb25lZCBpbiB0aGUgZm9sbG93aW5nIHNlbnRlbmNlIHdhcyBhbiBhbGxvd2FuY2Ugb2Ygc2FjcmlmaWNpYWwgbWVhdAogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIHRvIG1lbWJlcnMgb2YgdGhlIEFyZW9wYWd1cy48L3RyYW5zbGF0aW9uPg=="
translation['1.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgdHJpZWQgdGhlc2UgbWVuIGFuZCBhY3F1aXR0ZWQgdGhlbS4gWW91IHdlcmUgbm90IHRoZXJlYnkKICAgICAgICAgICAgICAgICAgICBjb252aWN0aW5nIHRoZSBBcmVvcGFndXMgb2YgZXJyb3IgYnV0IHlvdSB3ZXJlIG1vcmUgY29uY2VybmVkIHdpdGggc3ltcGF0aHkgdGhhbgogICAgICAgICAgICAgICAgICAgIGp1c3RpY2UsIGFuZCB0aG91Z2h0IHRoZSBwdW5pc2htZW50IHRvbyBzZXZlcmUgZm9yIHRoZSBvZmZlbmNlIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudHMgaGFkIGNvbW1pdHRlZC4gRG8geW91IGltYWdpbmUgdGhlbiwgRGVtb3N0aGVuZXMsIHRoYXQgdGhlIGNvdW5jaWwKICAgICAgICAgICAgICAgICAgICBtYWRlIGEgZmFsc2UgcmVwb3J0PyBPZiBjb3Vyc2UgaXQgZGlkIG5vdC4gTmV2ZXJ0aGVsZXNzLCBnZW50bGVtZW4sIHlvdQogICAgICAgICAgICAgICAgICAgIGFjcXVpdHRlZCB0aGVzZSBtZW4gYW5kIG90aGVycyBsaWtlIHRoZW0sIHRob3VnaCB0aGUgY291bmNpbCByZXBvcnRlZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGd1aWx0eSBvZiBicmVha2luZyBpdHMgcnVsZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgIG9mIFBvbHlldWN0dXMgb2YgQ3lkYW50aWRhZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Rm9yIFBvbHlldWN0dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ3lkYW50aWRhZSwgdGhlIGFjY3VzZXIgb2YgRXV4ZW5pcHB1cywgY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNC40IiB2YWxpZD0ieWVzIj5IeXAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjQ8L2JpYmw+LCBJbnRyb2R1Y3Rpb24uPC9ub3RlPiB3aGVuIHRoZSBwZW9wbGUgaW5zdHJ1Y3RlZCB0aGUgY291bmNpbAogICAgICAgICAgICAgICAgICAgIHRvIGlucXVpcmUgd2hldGhlciBoZSB3YXMgYWNjb21wYW55aW5nIHRoZSBleGlsZXMgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA0LjQiIHZhbGlkPSJ5ZXMiPkh5cC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQuNDwvYmlibD4sIEludHJvZHVjdGlvbi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4gYW5kIHRvIHJlcG9ydCBiYWNrIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRpb24sIGl0IHJlcG9ydGVkIHRoYXQgaGUgd2FzIGRvaW5nIHNvLiBZb3UgY2hvc2UgYWNjdXNlcnMgYXMgdGhlIGxhdwogICAgICAgICAgICAgICAgICAgIHByZXNjcmliZXM6IFBvbHlldWN0dXMgY2FtZSBpbnRvIGNvdXJ0IGFuZCB5b3UgYWNxdWl0dGVkIGhpbSwgb24gaGlzIGFkbWl0dGluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIGdvaW5nIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIE5pY29waGFuZXMgd2hvLCBoZSBzYWlkLCB3YXMgbWFycmllZCB0byBoaXMgbW90aGVyLiBTbyB5b3UgZGlkIG5vdCBjb25zaWRlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGRvaW5nIGFueXRoaW5nIHN0cmFuZ2Ugb3IgcmVwcmVoZW5zaWJsZSBpbiBrZWVwaW5nIGluIHRvdWNoIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgbW90aGVyJ3MgaHVzYmFuZCB3aG8gd2FzIGluIGRpZmZpY3VsdGllcywgb3IgaW4gYXNzaXN0aW5nIGhpbSwgc28gZmFyIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgY291bGQsIHdoaWxlIGhlIHdhcyBiYW5pc2hlZCBmcm9tIHRoZSBjb3VudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVwb3J0IG9mIHRoZSBjb3VuY2lsLCBEZW1vc3RoZW5lcywgd2FzIG5vdCBwcm92ZWQgZmFsc2U7IGl0IHdhcyBxdWl0ZQogICAgICAgICAgICAgICAgICAgIHRydWUsIGJ1dCB0aGUganVyeSBkZWNpZGVkIHRvIGFjcXVpdCBQb2x5ZXVjdHVzLiBUaGUgY291bmNpbCB3YXMgaW5zdHJ1Y3RlZCB0bwogICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyIHRoZSB0cnV0aCwgeWV0LCBhcyBJIHNheSwgdGhlIGNvdXJ0IGRlY2lkZWQgd2hldGhlciBpdCB3YXMgYSBjYXNlIGZvcgogICAgICAgICAgICAgICAgICAgIHBhcmRvbi4gSXMgdGhhdCBhbnkgcmVhc29uIGZvciBkaXN0cnVzdGluZyB0aGUgY291bmNpbCBvdmVyIHRoZSBwcmVzZW50IHJlcG9ydHMKICAgICAgICAgICAgICAgICAgICBpbiB3aGljaCBpdCBoYXMgc3RhdGVkIHRoYXQgeW91IGFuZCB5b3VyIGNvbmZlZGVyYXRlcyBhcmUgaW4gcG9zc2Vzc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBnb2xkPyBUaGF0IHdvdWxkIGJlIGRpc2dyYWNlZnVsLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5Db252aW5jZSB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5IG5vdywgRGVtb3N0aGVuZXMsIHRoYXQgYW55IG9mIHRob3NlIGNyaW1lcyByYW5rcyB3aXRoIHlvdXJzIGFuZCB0aGF0IHRvCiAgICAgICAgICAgICAgICAgICAgdGFrZSBicmliZXMgYWdhaW5zdCBvbmUncyBjb3VudHJ5IGlzIGEgcGFyZG9uYWJsZSBhY3Qgd2hpY2ggd291bGQganVzdGlmeSB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBpbiBhY3F1aXR0aW5nIHlvdS4gRm9yIG90aGVyIHBlY3VuaWFyeSBvZmZlbmNlcyB0aGUgbGF3cyBwcmVzY3JpYmUgZGFtYWdlcwogICAgICAgICAgICAgICAgICAgIHR3aWNlIGFzIGdyZWF0IGFzIHRoZSBzdW0gaW52b2x2ZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgbWlzbGVhZGluZwogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSBjb2wuIDI0PC9iaWJsPiwgd2hlcmUgdGhlIGNvbnRyYXN0CiAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgaXMgYmV0d2VlbiBhIHNpbXBsZSBhbmQgYSB0ZW5mb2xkIGZpbmUuIEEgZmluZSB3YXMgZG91YmxlZCBvbmx5IGlmIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBub3QgYmVlbiBwYWlkIGJlZm9yZSBhIHNwZWNpZmljIGRhdGUuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDIuMTciIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuMTc8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTQiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIENvbnN0LiBBdGguCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NDwvYmlibD4uPC9ub3RlPiBidXQgaW4gY2FzZXMgb2YgYnJpYmVyeSB0aGV5IGhhdmUgbGFpZCBkb3duIHR3bwogICAgICAgICAgICAgICAgICAgIHBlbmFsdGllcyBvbmx5OiBlaXRoZXIgZGVhdGgsIHRvIGVuc3VyZSB0aGF0IGJ5IG1lZXRpbmcgd2l0aCB0aGlzIHB1bmlzaG1lbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3VpbHR5IG1hbiBpcyBhbiBleGFtcGxlIHRvIG90aGVycywgb3IgYSBmaW5lIGZvciBicmliZXJ5IHRlbiB0aW1lcyBhcyBncmVhdCBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBvcmlnaW5hbCBicmliZSwgc28gdGhhdCBtZW4gd2hvIGRhcmUgdG8gY29tbWl0IHRoaXMgb2ZmZW5jZSBzaGFsbCBub3QgZ2FpbgogICAgICAgICAgICAgICAgICAgIGJ5IGl0LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSBjb2wuIDI0PC9iaWJsPiwgd2hlcmUgdGhlIGNvbnRyYXN0CiAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgaXMgYmV0d2VlbiBhIHNpbXBsZSBhbmQgYSB0ZW5mb2xkIGZpbmUuIEEgZmluZSB3YXMgZG91YmxlZCBvbmx5IGlmIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBub3QgYmVlbiBwYWlkIGJlZm9yZSBhIHNwZWNpZmljIGRhdGUuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDIuMTciIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuMTc8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNTQiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIENvbnN0LiBBdGguCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['1.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGVyaGFwcwogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIG5vdCBhdHRlbXB0IHRvIGFyZ3VlIHRodXMsIERlbW9zdGhlbmVzLCBidXQgd2lsbCBzYXkgdGhhdCBvZiB0aG9zZSB3aG9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdW5jaWwgaGFzIHJlcG9ydGVkIHVwIHRpbGwgbm93IHRoZSByZXN0IGhhdmUgYWRtaXR0ZWQgdGhhdCB0aGUgcGVuYWx0eQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGl0IGltcG9zZWQgd2FzIGRlc2VydmVkLCB3aGVyZWFzIHlvdSBhbG9uZSBoYXZlIHByb3Rlc3RlZCBhZ2FpbnN0IGl0LiBCdXQKICAgICAgICAgICAgICAgICAgICB5b3UgYWxvbmUsIG9mIGFsbCB0aG9zZSBldmVyIHJlcG9ydGVkLCBhc2tlZCB0aGVzZSBtZW4gb2YgeW91ciBvd24gYWNjb3JkIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgeW91ciBqdWRnZXMgYW5kIGNvdXJ0IG9mIGlucXVpcnkuIFlvdSBwcm9wb3NlZCB0aGUgZGVjcmVlIGFnYWluc3QgeW91cnNlbGYgYW5kCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGUgcGVvcGxlIHdpdG5lc3Mgb2YgdGhlIGFncmVlbWVudCwgZGVmaW5pbmcgdGhlIHBlbmFsdHkgZm9yIHlvdXJzZWxmIGFzCiAgICAgICAgICAgICAgICAgICAgZGVhdGgsIGlmIHRoZSBjb3VuY2lsIHNob3VsZCByZXBvcnQgdGhhdCB5b3UgaGFkIHRha2VuIGFueSBvZiB0aGUgbW9uZXkgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIGNvdW50cnkgYnkgSGFycGFsdXMuIDwvdHJhbnNsYXRpb24+"
translation['1.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHBhc3QsIERlbW9zdGhlbmVzLCB5b3UgcHJvcG9zZWQgdGhhdCB0aGUgY291bmNpbCBvZiB0aGUgQXJlb3BhZ3VzIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgb3ZlciBhbGwgdGhlc2UgbWVuLCBhbmQgdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvbywgdG8gZW5mb3JjZSB0aGUgbGF3cyBvZiB0aGUgbGFuZCBhbmQgcHVuaXNoIGFueSB3aG8KICAgICAgICAgICAgICAgICAgICB0cmFuc2dyZXNzZWQgdGhlbS4gSXQgd2FzIHlvdSB3aG8gc3VycmVuZGVyZWQgdGhlIHdob2xlIGNpdHkgaW50byB0aGUgaGFuZHMgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGNvdW5jaWwgd2hpY2ggeW91IHdpbGwgcHJlc2VudGx5IHRlbGwgdXMgaXMgb2xpZ2FyY2hpYy4gQnkgdGhlIHRlcm1zIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBkZWNyZWUgdGhlIGRlYXRoIHNlbnRlbmNlIGhhcyBiZWVuIGluZmxpY3RlZCBvbiB0d28gY2l0aXplbnMsIGEgZmF0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIGEgc29uLCB3aG8gd2VyZSBnaXZlbiBvdmVyIHRvIHRoZSBleGVjdXRpb25lci4gPC90cmFuc2xhdGlvbj4="
translation['1.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5PbmUgb2YgdGhlIGRlc2NlbmRhbnRzIG9mIEhhcm1vZGl1cyB3YXMgaW1wcmlzb25lZCBpbiBwdXJzdWFuY2Ugb2YgeW91ciBvcmRlci4KICAgICAgICAgICAgICAgICAgICBUaGVzZSBnZW50bGVtZW4sIGFjdGluZyBvbiB0aGUgY291bmNpbCdzIHJlcG9ydCwgdG9ydHVyZWQgYW5kIGtpbGxlZAogICAgICAgICAgICAgICAgICAgICAgICBBbnRpcGhvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xMzIiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMTMyPC9iaWJsPu+8iSBjb25maXJtcyB0aGlzIGFuZCBzYXlzIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgQW50aXBob24gcHJvbWlzZWQgUGhpbGlwIHRoYXQgaGUgd291bGQgYnVybiB0aGUgZG9ja3lhcmRzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4uIERlbW9zdGhlbmVzIGNhdWdodCBoaW0gdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGJyb3VnaHQgaGltIGJlZm9yZSB0aGUgcGVvcGxlLCB3aG8gYXQgZmlyc3QgYWNxdWl0dGVkIGhpbS4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBcmVvcGFndXMgaW50ZXJ2ZW5lZCBhbmQgaGUgd2FzIGxhdGVyIGV4ZWN1dGVkLjwvbm90ZT4gWW91IGV4cGVsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIENoYXJpbnVzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xMzIiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMTMyPC9iaWJsPu+8iSBjb25maXJtcyB0aGlzIGFuZCBzYXlzIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgQW50aXBob24gcHJvbWlzZWQgUGhpbGlwIHRoYXQgaGUgd291bGQgYnVybiB0aGUgZG9ja3lhcmRzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4uIERlbW9zdGhlbmVzIGNhdWdodCBoaW0gdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGJyb3VnaHQgaGltIGJlZm9yZSB0aGUgcGVvcGxlLCB3aG8gYXQgZmlyc3QgYWNxdWl0dGVkIGhpbS4gQnV0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBcmVvcGFndXMgaW50ZXJ2ZW5lZCBhbmQgaGUgd2FzIGxhdGVyIGV4ZWN1dGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaGFyaW51cywgYSBmaWd1cmUgb2YgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydGFuY2UsIGlzIG1lbnRpb25lZCBhcyBhIHRyYWl0b3IgaW4gdGhlIHNwZWVjaCBhZ2FpbnN0IFRoZW9jcmluZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIHdhcyBhdHRyaWJ1dGVkIGJ5IERpb255c2l1cyB0byBEaW5hcmNodXMgYnV0IGhhcyBzdXJ2aXZlZCBhbW9uZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd29ya3Mgb2YgRGVtb3N0aGVuZXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1OC4zOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA1OC4zODwvYmlibD7vvIkuPC9ub3RlPiBmcm9tIHRoZSBjaXR5IGZvciB0cmVhc29uIG9uIHRoZSBzdHJlbmd0aCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb3VuY2lsJ3MgcmVwb3J0cyBhbmQgcHVuaXNobWVudHMuIEFmdGVyIHByb3Bvc2luZyB0aGlzIHRyZWF0bWVudCBmb3IKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZiBhbHNvLCBhcmUgeW91IG5vdyBvdmVycmlkaW5nIHRoZSBkZWNyZWUgb2YgeW91ciBvd24gYWNjb3JkPyBTdXJlbHkgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIG5laXRoZXIganVzdCBub3IgbGF3ZnVsLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU4LjM4IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDU4LjM4PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzdW1tb24gYXMgbXkgd2l0bmVzc2VzLCBBdGhlbmlhbnMsIHRoZSBhd2Z1bCBnb2RkZXNzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWJvZGUsIHRoZSBoZXJvZXMgb2YgdGhlIGxhbmQsIEF0aGVuYSBQb2xpYXMsIGFuZCB0aG9zZSBvdGhlciBnb2RzIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgb2J0YWluZWQgb3VyIGNpdHkgYW5kIGNvdW50cnlzaWRlIGFzIHRoZWlyIGhvbWUsIHRvIHNob3cgdGhhdCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBoYXMgY29uc2lnbmVkIHRvIHlvdSBmb3IgcHVuaXNobWVudCBvbmUgd2hvLCBhZ2FpbnN0IGhpcyBjb3VudHJ5J3MKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMsIGhhcyBhY2NlcHRlZCBhIHBhcnQgb2YgdGhlICZsdDtpbXBvcnRlZCBtb25leSZndDssPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzZW5zZSBvZiB0aGlzIHBhc3NhZ2UgaXMgY2xlYXIsIHRob3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgR3JlZWsgd29yZGluZyBsZWF2ZXMgcm9vbSBmb3IgZG91YnQuPC9ub3RlPiBvbmUgd2hvIGhhcyBkZWZpbGVkIGFuZCBydWluZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSdzIHByb3NwZXJpdHkgYW5kIGJldHJheWVkIHRoYXQgY291bnRyeSB3aGljaCBoZSBjbGFpbWVkIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBmb3J0aWZpZWQgYnkgaGlzIGRpcGxvbWFjeSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QW4gYWxsdXNpb24gdG8gc29tZQogICAgICAgICAgICAgICAgICAgICAgICB3b3JkcyBvZiBEZW1vc3RoZW5lcyBpbiB0aGUgc3BlZWNoIG9uIHRoZSBDcm93biDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjI5OSIgdmFsaWQ9InllcyI+RGVtLiAxOC4yOTk8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjI5OSIgdmFsaWQ9InllcyI+RGVtLiAxOC4yOTk8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['1.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5lbmVtaWVzLCBhbmQgdGhvc2Ugd2hvIGJlYXIgdGhlIGNpdHkgaWxsIHdpbGwsCiAgICAgICAgICAgICAgICAgICAgd291bGQgd2lzaCBoaW0gYWxpdmUsIGNvdW50aW5nIHRoaXMgYSBkaXNhc3RlciBmb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBidXQgYWxsIHdobyBmYXZvciB5b3VyIGNvbmNlcm5zIGFuZAogICAgICAgICAgICAgICAgICAgIGhvcGUgdGhhdCB3aXRoIGEgdHVybiBvZiBmb3J0dW5lIHRoZSBjaXR5J3MgcHJvc3BlY3RzIG1heSBpbXByb3ZlIHdpc2ggdGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWFuIG1heSBkaWUgYW5kIHBheSB0aGUgcGVuYWx0eSBtZXJpdGVkIGJ5IGhpcyBjb25kdWN0LCBhbmQgc3VjaCBpcyB0aGUgYnVyZGVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgcHJheWVycy4gSSBhbHNvIGpvaW4gaW4gcHJheWluZyB0aGUgZ29kcyB0byBzYXZlIG91ciBjb3VudHJ5LCB3aGljaCBJCiAgICAgICAgICAgICAgICAgICAgc2VlIHRvIGJlIGluIGRhbmdlciBvZiBmb3JmZWl0aW5nIGl0cyBzYWZldHksIGl0cyB3b21lbiBhbmQgY2hpbGRyZW4sIGl0cyBob25vciwKICAgICAgICAgICAgICAgICAgICBhbmQgZXZlcnkgb3RoZXIgdGhpbmcgb2Ygd29ydGguIDwvdHJhbnNsYXRpb24+"
translation['1.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHNoYWxsIHdlCiAgICAgICAgICAgICAgICAgICAgc2F5IHRvIHRoZSBieXN0YW5kZXJzLCBBdGhlbmlhbnMsIHdoZW4gd2UgY29tZSBvdXQgb2YgdGhlIGNvdXJ0LCBpZiB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZWQsIGFzIEkgcHJheSB5b3UgbWF5IG5vdCBiZSwgYnkgdGhlIHdpemFyZHJ5IG9mIHRoaXMgbWFuPyBXaGF0IHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICB0aGUgZmVlbGluZ3Mgb2YgeW91IGFsbCwgd2hlbiwgb24geW91ciByZXR1cm4sIHlvdSBwcmVzdW1lIHRvIGxvb2sgdXBvbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmF0aGVycycgaGVhcnRocywgYWZ0ZXIgYWNxdWl0dGluZyB0aGUgdHJhaXRvciB3aG8gZmlyc3QgYnJvdWdodCBpbnRvIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBob21lIHRoZSBnb2xkIG9mIGJyaWJlcnk7IGFmdGVyIGNvbnZpY3RpbmcgYXMgdXR0ZXJseSBmYWxzZSwgaW4gYm90aCBpdHMgaW5xdWlyeQogICAgICAgICAgICAgICAgICAgIGFuZCBpdHMgY29uY2x1c2lvbiwgdGhlIGJvZHkgd2hpY2ggYWxsIG1lbiBob2xkIGluIHRoZSBncmVhdGVzdCBhd2U/IDwvdHJhbnNsYXRpb24+"
translation['1.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGhvcGVzLCBBdGhlbmlhbnMs4oCUcGljdHVyZSBmb3IKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzLOKAlHdoYXQgaG9wZXMgc2hhbGwgd2UgaGF2ZSBpZiBzb21lIGRhbmdlciBvdmVydGFrZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgd2hlbiB3ZSBoYXZlIG1hZGUgaXQgYSBzYWZlIHRoaW5nIHRvIHRha2UgYnJpYmVzIGFnYWluc3Qgb25lJ3MgY291bnRyeSBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZlIHJvYmJlZCBvZiBpdHMgc3RhdHVzIHRoZSBib2R5IHdoaWNoIGtlcHQgd2F0Y2ggb3ZlciB0aGUgY2l0eSBpbiBzdWNoIHRpbWVzCiAgICAgICAgICAgICAgICAgICAgb2YgY3Jpc2lzPyA8L3RyYW5zbGF0aW9uPg=="
translation['1.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5PciBhZ2FpbizigJRsZXQgdXMgc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHRoaXMgdG8gaGFwcGVuLOKAlHdoYXQgaWYgQWxleGFuZGVyLCBpbiBwdXJzdWFuY2Ugb2YgRGVtb3N0aGVuZXMnCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY3JlZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgaGFkIHByb3Bvc2VkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbmV5IHNob3VsZCBiZSBrZXB0IG9uIHRoZSBBY3JvcG9saXMgdW50aWwgQWxleGFuZGVyIHNlbnQgZm9yIGl0Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBzZW5kcyBhbmQgYXNrcyB1cyBmb3IgdGhlIGdvbGQgYnJvdWdodCBpbnRvIHRoZSBjb3VudHJ5IGJ5IEhhcnBhbHVzLCBhbmQsIG92ZXIKICAgICAgICAgICAgICAgICAgICBhbmQgYWJvdmUgdGhlIGZhY3QgdGhhdCB0aGUgY291bmNpbCBoYXMgbWFkZSBhIHJlcG9ydCwgc2VuZHMgZG93biBoZXJlIHRoZQogICAgICAgICAgICAgICAgICAgIHNsYXZlcyB3aGljaCBoYXZlIG5vdyBiZWVuIHJldHVybmVkIHRvIGhpbSBhbmQgYXNrcyB1cyB0byBmaW5kIG91dCB0aGUgdHJ1dGgKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW07IHdoYXQgaW4gSGVhdmVuJ3MgbmFtZSBzaGFsbCB3ZSBzYXksIGdlbnRsZW1lbj8gPC90cmFuc2xhdGlvbj4="
translation['1.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5XaWxsIHlvdSBwcm9wb3NlLCBEZW1vc3RoZW5lcywgdGhhdCB3ZSBnbyB0byB3YXIsIGluIHZpZXcgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIHN1Y2Nlc3Mgd2l0aCB0aGUgcHJldmlvdXMgd2Fycz8gU3VwcG9zZSB0aGUgcmVzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gZGVjaWRlcyBvbiB0aGlzLCB3aGljaCBpcyBmYWlyZXI6CiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdXIgZ29sZCB0byBiZSBhdmFpbGFibGUgZm9yIHdhciBhbG9uZyB3aXRoIG90aGVyIHBlb3BsZSdzIG9yIGZvciBvdGhlcnMgdG8KICAgICAgICAgICAgICAgICAgICBjb250cmlidXRlIGZyb20gdGhlaXIgb3duIHByb3BlcnR5LCBtZWx0aW5nIGRvd24gdGhlIHBlcnNvbmFsIG9ybmFtZW50cyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdpdmVzLCB0aGUgY3VwcyBhbmQgYWxsIHRoZSBjb3VudHJ5J3Mgc3RvcmUgb2Ygb2ZmZXJpbmdzIHRvIHRoZSBnb2RzLCBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBzYWlkIHlvdSB3b3VsZCBzdWdnZXN0LCB0aG91Z2ggeW91IHlvdXJzZWxmIHBhaWQgaW4gZmlmdHkgZHJhY2htYXMgZnJvbSB5b3VyCiAgICAgICAgICAgICAgICAgICAgaG91c2VzIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiBhbmQgdGhlIGNpdHk/CiAgICAgICAgICAgICAgICAgICAgVGhhdCBoYXMgYmVlbiB5b3VyIGNvbnRyaWJ1dGlvbiB1bmRlciB0aGUgbGFzdCBsZXZ5IHRob3VnaCBub3cgeW91IGhhdmUgdHdlbnR5CiAgICAgICAgICAgICAgICAgICAgdGFsZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['1.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5QZXJoYXBzIHlvdSB3aWxsIG5vdCBhZHZvY2F0ZSB3YXIgYnV0CiAgICAgICAgICAgICAgICAgICAgYWR2aXNlIHVzIHRvIGZvbGxvdyBvdXQgdGhlIGRlY3JlZSB3aGljaCB5b3UgcHJvcG9zZWQgYW5kIGdpdmUgYmFjayB0byBBbGV4YW5kZXIKICAgICAgICAgICAgICAgICAgICB0aGUgZ29sZCBicm91Z2h0IHRvIHVzPyBJZiBzbywgaXQgd2lsbCBiZSBmb3IgeW91ciBzYWtlIHRoYXQgdGhlIHBlb3BsZSBoYXZlIHRvCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSBpdC4gSXQgaXMgc3VyZWx5IG5laXRoZXIganVzdCBub3IgZmFpciBub3IgZGVtb2NyYXRpYyB0aGF0IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdvcmsgc2hvdWxkIGNvbnRyaWJ1dGUsIHdoaWxlIHlvdSBwbHVuZGVyIGFuZCBzdGVhbDsgdGhhdCBzb21lIHNob3VsZCBtYWtlIG5vCiAgICAgICAgICAgICAgICAgICAgc2VjcmV0IG9mIHRoZSBwcm9wZXJ0eSB0aGV5IGhvbGQgYW5kIG1ha2UgY29udHJpYnV0aW9ucyBwcm9wb3J0aW9uYXRlIHRvIGl0LAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHlvdSB3aG8gaGF2ZSByZWNlaXZlZCBtb3JlIHRoYW4gYSBodW5kcmVkIGFuZCBmaWZ0eSB0YWxlbnRzLCBlaXRoZXIgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBLaW5nJ3MgbW9uZXk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjEwIiB2YWxpZD0ieWVzIj5EaW4uIDEuMTA8L2JpYmw+Ljwvbm90ZT4gb3IgZnJvbSB5b3VyIGFzc29jaWF0aW9uIHdpdGggQWxleGFuZGVyLCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm8gZGVjbGFyZWQgcHJvcGVydHkgaW4gdGhlIGNpdHkgYnV0IGhhdmUgZm9ydGlmaWVkIHlvdXJzZWxmIGFnYWluc3QgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIGFzIHRob3VnaCB5b3UgaGFkIG5vIGNvbmZpZGVuY2UgaW4geW91ciBvd24gY29uZHVjdCBvZiBhZmZhaXJzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTAiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xMDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['1.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCByaWdodCwgd2hlbiB0aGUgbGF3cyBkZW1hbmQgdGhhdCB0aGUgb3JhdG9yIG9yCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCB3aG8gZXhwZWN0cyB0byBnZXQgdGhlIHBlb3BsZSdzIGNvbmZpZGVuY2Ugc2hhbGwgb2JzZXJ2ZSB0aGUgbGF3cyBpbgogICAgICAgICAgICAgICAgICAgIGJlZ2V0dGluZyBjaGlsZHJlbiwgc2hhbGwgb3duIGxhbmQgd2l0aGluIG91ciBib3VuZGFyaWVzLCBzaGFsbCBnaXZlIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdmdWwgcGxlZGdlcyBhbmQgb25seSB0aHVzIGxheSBjbGFpbSB0byBiZSB0aGUgcGVvcGxlJ3MgbGVhZGVyLCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHNvbGQgdGhlIGxhbmQgaW5oZXJpdGVkIGZyb20geW91ciBmYXRoZXIgb3IgYmUgY2xhaW1pbmcgYXMgeW91cnMKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiB3aGljaCBhcmUgbm90IHlvdXIgb3duLCB0aHVzIGJyZWFraW5nIHRoZSBsYXdzIHdoaWNoIGdvdmVybiBvYXRocyBpbgogICAgICAgICAgICAgICAgICAgICAgICBjb3VydCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSByZWZlcmVuY2UgdG8gdGhlIG9hdGggd2hlcmVieSBhIG1hbgogICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgZG93biBpbXByZWNhdGlvbnMgb24gaGlzIGNoaWxkcmVuLCBzd2VhcmluZyB0aGF0IGhlIHdhcyBub3QgZ3VpbHR5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGEgY2VydGFpbiBhY3Rpb24uIERlbW9zdGhlbmVzIGhhZCBsb3N0IGhpcyBvbmx5IGNoaWxkLCBhIGRhdWdodGVyLCBpbiAzMzYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuNzciIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDMuNzc8L2JpYmw+77yJOyBhbmQgaWYKICAgICAgICAgICAgICAgICAgICAgICAgaGUgaGFkIG90aGVyIGNoaWxkcmVuIG5vdywgdGhleSB3ZXJlIGFkb3B0ZWQgb3IgYnkgYSBoZXRhZXJhLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXRoLiAxMy41OTIiPkF0aGVuLiAxMy41OTIgZTwvYmlibD4uPC9ub3RlPiBhbmQgYmUgb3JkZXJpbmcgb3RoZXJzIHRvCiAgICAgICAgICAgICAgICAgICAgZmlnaHQgd2hlbiB5b3UgZGVzZXJ0ZWQgdGhlIGNpdGl6ZW5zJyByYW5rcyB5b3Vyc2VsZj8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy43NyIgdmFsaWQ9InllcyI+QWVzY2hpbi4gMy43NzwvYmlibD7vvIk7IGFuZCBpZgogICAgICAgICAgICAgICAgICAgICAgICBoZSBoYWQgb3RoZXIgY2hpbGRyZW4gbm93LCB0aGV5IHdlcmUgYWRvcHRlZCBvciBieSBhIGhldGFlcmEuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBdGguIDEzLjU5MiI+QXRoZW4uIDEzLjU5MiBlPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['1.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBkbyB5b3UgdGhpbmsgaXQgaXMsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB0aGF0IG1ha2VzIGNpdGllcyB2YXJ5IGJldHdlZW4gZ29vZCBhbmQgZXZpbCBmb3J0dW5lcz8gWW91IHdpbGwgZmluZAogICAgICAgICAgICAgICAgICAgIG9ubHkgb25lIGNhdXNlOiB0aGUgY291bnNlbGxvcnMgYW5kIGxlYWRlcnMuIFRha2UgVGhlYmVzLiBJdCB3YXMgYSBjaXR5OyBpdAogICAgICAgICAgICAgICAgICAgIGJlY2FtZSBzdXByZW1lLiBVbmRlciB3aGF0IGxlYWRlcnMgYW5kIGdlbmVyYWxzPyBBbGwgdGhlIG9sZGVyIG1lbiwgb24gd2hvc2UKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgSSBzaGFsbCBnaXZlIHlvdSB0aGUgc3RvcnksIHdvdWxkIGFkbWl0IHRoYXQgaXQgd2FzIHdoZW4KICAgICAgICAgICAgICAgICAgICAgICAgUGVsb3BpZGFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QZWxvcGlkYXMgYW5kIEVwYW1pbm9uZGFzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNoaWVmIFRoZWJhbiBnZW5lcmFscyBkdXJpbmcgdGhlaXIgY2l0eSdzIHBlcmlvZCBvZiBncmVhdG5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNzEvLTM2MiIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzcxIiB0bz0iLTM2MiI+MzcxPC9kYXRlUmFuZ2U+LTxkYXRlIGF1dGhuYW1lPSItMzYyIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzYyIj4zNjI8L2RhdGU+IEIuQy7vvIkuIEluIDM3MSB0aGV5IGRlZmVhdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhdCBMZXVjdHJhIGFuZCwgaW4gcmVzcG9uc2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYW4gYXBwZWFsIGZyb20gdGhlIEFyY2FkaWFucyB3aG8gdGhlbiByb3NlIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+LCBlbnRlcmVkIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPiBpbiAzNzAuIEhlcmUgdGhleSByZWZvdW5kZWQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRvd24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+IHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBTcGFydGFucyBoYWQgZGVzdHJveWVkIGF0IHRoZSBlbmQgb2YgdGhlIDh0aCBjZW50dXJ5IEIuQy4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuNTYiIHZhbGlkPSJ5ZXMiPkRpby4gU2ljLiAxNS41NjwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpb2QuIDE1LjYyIiB2YWxpZD0ieWVzIj5EaW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWMuIDE1LjYyLTY2PC9iaWJsPu+8iS4gRXBhbWlub25kYXMgY29uZHVjdGVkIHRocmVlIGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgaW52YXNpb25zIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgcGVuZXRyYXRpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc0NSI+TGFjb25pYTwvcGxhY2VOYW1lPiwgYnV0IG5ldmVyCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IHRha2luZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4uIEl0IHdhcwogICAgICAgICAgICAgICAgICAgICAgICBwcm9iYWJseSBkdXJpbmcgdGhlIHNlY29uZCBvZiB0aGVzZSB0aGF0IGhlIGZvdW5kZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhbG9wb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYWxvcG9saXMiPk1lZ2Fsb3BvbGlzPC9wbGFjZU5hbWU+LCB0aGUgbmV3IGNhcGl0YWwgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MzUiPkFyY2FkaWE8L3BsYWNlTmFtZT47IGluIHRoZSB0aGlyZCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAga2lsbGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICDvvIgzNjIgQi5DLu+8iS48L25vdGU+IHNvIHRoZXkgaGF2ZSBpdCwgPGRhdGVSYW5nZSBhdXRobmFtZT0iLTM3MS8tMzYyIiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zNzEiIHRvPSItMzYyIj4zNzE8L2RhdGVSYW5nZT4tPGRhdGUgYXV0aG5hbWU9Ii0zNjIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNjIiPjM2MjwvZGF0ZT4gQi5DLu+8iS4gSW4gMzcxIHRoZXkgZGVmZWF0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGF0IExldWN0cmEgYW5kLCBpbiByZXNwb25zZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBhbiBhcHBlYWwgZnJvbSB0aGUgQXJjYWRpYW5zIHdobyB0aGVuIHJvc2UgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIGVudGVyZWQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+IGluIDM3MC4gSGVyZSB0aGV5IHJlZm91bmRlZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdG93biBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4gd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFNwYXJ0YW5zIGhhZCBkZXN0cm95ZWQgYXQgdGhlIGVuZCBvZiB0aGUgOHRoIGNlbnR1cnkgQi5DLiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxNS41NiIgdmFsaWQ9InllcyI+RGlvLiBTaWMuIDE1LjU2PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGlvZC4gMTUuNjIiIHZhbGlkPSJ5ZXMiPkRpby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpYy4gMTUuNjItNjY8L2JpYmw+77yJLiBFcGFtaW5vbmRhcyBjb25kdWN0ZWQgdGhyZWUgZnVydGhlcgogICAgICAgICAgICAgICAgICAgICAgICBpbnZhc2lvbnMgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBwZW5ldHJhdGluZyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzQ1Ij5MYWNvbmlhPC9wbGFjZU5hbWU+LCBidXQgbmV2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgdGFraW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPi4gSXQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JhYmx5IGR1cmluZyB0aGUgc2Vjb25kIG9mIHRoZXNlIHRoYXQgaGUgZm91bmRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4sIHRoZSBuZXcgY2FwaXRhbCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjczNSI+QXJjYWRpYTwvcGxhY2VOYW1lPjsgaW4gdGhlIHRoaXJkIGhlIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBraWxsZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNYW50aW5lYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWFudGluZWEiPk1hbnRpbmVhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIO+8iDM2MiBCLkMu77yJLjwvdHJhbnNsYXRpb24+"
translation['1.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5sZWQgdGhlIFNhY3JlZCBCYW5kPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBTYWNyZWQgQmFuZCB3YXMgYSBjb21wYW55IG9mIDMwMCBwaWNrZWQgc29sZGllcnMgbWFpbnRhaW5lZCBieSB0aGUgc3RhdGUuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZXkgZmlyc3QgYXR0cmFjdGVkIGF0dGVudGlvbiBieSBkZWZlYXRpbmcgYSBTcGFydGFuIGZvcmNlIGluIDxkYXRlIGF1dGhuYW1lPSItMzc1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzc1Ij4zNzU8L2RhdGU+IEIuQy4gYW5kIHBsYXllZCBhIGxhcmdlIHBhcnQgaW4gdGhlIHZpY3Rvcnkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y3RyYS4gQXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+IHRoZXkgZm91Z2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBsYXN0IG1hbiBhbmQgd2VyZSBidXJpZWQgYnkgdGhlIGhpZ2h3YXkgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4gdG8gVGhlYmVzIHdpdGggdGhlIGZpZ3VyZSBvZiBhIGxpb24KICAgICAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGVpciB0b21iLjwvbm90ZT4gYW5kIEVwYW1pbm9uZGFzIGFuZCB0aGVpciBjb21wZWVycyB3ZXJlIGluIGNvbW1hbmQuCiAgICAgICAgICAgICAgICAgICAgSXQgd2FzIHRoZW4gdGhhdCBUaGViZXMgd29uIHRoZSBiYXR0bGUgb2YgTGV1Y3RyYSwgdGhlbiB0aGF0IHRoZXkgaW52YWRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBTcGFydGFucycgY291bnRyeSB3aGljaCwgaXQgd2FzIHRob3VnaHQsIGNvdWxkIG5vdCBiZSByYXZhZ2VkLiBEdXJpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHBlcmlvZCB0aGV5IGFjY29tcGxpc2hlZCBtYW55IGZpbmUgYWNoaWV2ZW1lbnRzOiBmb3VuZGVkIDxkYXRlIGF1dGhuYW1lPSItMzc1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzc1Ij4zNzU8L2RhdGU+IEIuQy4gYW5kIHBsYXllZCBhIGxhcmdlIHBhcnQgaW4gdGhlIHZpY3Rvcnkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y3RyYS4gQXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+IHRoZXkgZm91Z2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBsYXN0IG1hbiBhbmQgd2VyZSBidXJpZWQgYnkgdGhlIGhpZ2h3YXkgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4gdG8gVGhlYmVzIHdpdGggdGhlIGZpZ3VyZSBvZiBhIGxpb24KICAgICAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGVpciB0b21iLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVzc2VuZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVzc2VuZSI+TWVzc2VuZTwvcGxhY2VOYW1lPiBpbiB0aGUgZm91ciBodW5kcmVkdGg8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEzNjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTM2OSI+TWVzc2VuaWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGZpcnN0IGNvbnF1ZXJlZCBhYm91dCB0aGUgeWVhciA8ZGF0ZSBhdXRobmFtZT0iLTcwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTcwMCI+NzAwPC9kYXRlPiBCLkMuLCBzbwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBmaWd1cmUgNDAwdGggaXMgYSB2ZXJ5IHJvdWdoIGVzdGltYXRlOyAzMDB0aCB3b3VsZCBiZSBuZWFyZXIuIENmLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTHljLiAxLjYyIiB2YWxpZD0ieWVzIj5MeWMuIDEuNjI8L2JpYmw+IGFuZCBub3RlLjwvbm90ZT4geWVhciBhZnRlciBpdHMKICAgICAgICAgICAgICAgICAgICBmYWxsLCBnYXZlIHRoZSBBcmNhZGlhbnMgc2VsZi1nb3Zlcm5tZW50LCBhbmQgd29uIGEgdW5pdmVyc2FsIHJlcHV0YXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMzY5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEzNjkiPk1lc3NlbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBmaXJzdCBjb25xdWVyZWQgYWJvdXQgdGhlIHllYXIgPGRhdGUgYXV0aG5hbWU9Ii03MDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii03MDAiPjcwMDwvZGF0ZT4gQi5DLiwgc28KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZmlndXJlIDQwMHRoIGlzIGEgdmVyeSByb3VnaCBlc3RpbWF0ZTsgMzAwdGggd291bGQgYmUgbmVhcmVyLiBDZi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikx5Yy4gMS42MiIgdmFsaWQ9InllcyI+THljLiAxLjYyPC9iaWJsPiBhbmQgbm90ZS48L3RyYW5zbGF0aW9uPg=="
translation['1.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgb3RoZXIgaGFuZCB3aGVuIHdhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFjaGlldmVtZW50IGRlc3BpY2FibGUgYW5kIHVud29ydGh5IG9mIHRoZWlyIHNwaXJpdD8gV2hlbiBUaW1vbGF1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHRocmVlIG1lbiBtZW50aW9uZWQgaW4gdGhpcyBzZW50ZW5jZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZWJhbiBnZW5lcmFscyBhdCB0aGUgYmF0dGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPi48L25vdGU+IHRoZSBmcmllbmQgb2YgRGVtb3N0aGVuZXMsIHdhcyBjb3JydXB0ZWQKICAgICAgICAgICAgICAgICAgICBhbmQgdG9vayBicmliZXMgZnJvbSBQaGlsaXAsIHdoZW4gdGhlIHRyYWl0b3IgUHJveGVudXMgY29tbWFuZGVkIHRoZSBtZXJjZW5hcmllcwogICAgICAgICAgICAgICAgICAgIGVubGlzdGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXNzYSI+QW1waGlzc2E8L3BsYWNlTmFtZT4gYW5kIFRoZWFnZW5lcwogICAgICAgICAgICAgICAgICAgIHdhcyBwbGFjZWQgaW4gY29tbWFuZCBvZiB0aGUgcGhhbGFueCwgYSBtYW4gb2YgaWxsIGx1Y2sgYW5kLCBsaWtlIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBoZXJlLCBvcGVuIHRvIGJyaWJlcy4gVGhlbiwgYmVjYXVzZSBvZiB0aGUgdGhyZWUgbWVuIHdob20gSSBoYXZlIG1lbnRpb25lZCwgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgY2l0eSB3YXMgZGVzdHJveWVkIGFuZCBibG90dGVkIGZyb20gdGhlIGZhY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LiBGYXIgZnJvbSBiZWluZyBmYWxzZSBpdCBpcyBvbmx5IHRvbwogICAgICAgICAgICAgICAgICAgIHRydWUgdGhhdCBsZWFkZXJzIGFyZSByZXNwb25zaWJsZSBmb3IgYWxsIHRoZSBjaXRpemVucycgZ29vZCBmb3J0dW5lcyBhbmQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHJldmVyc2UuIDwvdHJhbnNsYXRpb24+"
translation['1.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGluayBhZ2FpbiwgdGhpcyB0aW1lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2l0aCB0aGUgc2FtZSBwb2ludHMgaW4KICAgICAgICAgICAgICAgICAgICBtaW5kLiBPdXIgY2l0eSB3YXMgZ3JlYXQsIHJlbm93bmVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgYW5kIHdvcnRoeSBvZiBvdXIgZm9yYmVhcnMsIGFwYXJ0IGZyb20gdGhlIHdlbGwta25vd24KICAgICAgICAgICAgICAgICAgICBleHBsb2l0cyBvZiB0aGUgcGFzdCwgYXQgdGhlIHRpbWUgd2hlbiA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gdHJpdW1waGVkLCBhcyBvdXIgZWxkZXJzIHRlbGwgdXMsIGluIHRoZSBuYXZhbCBiYXR0bGUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDAzNzU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDM3NTciPkNuaWR1czwvcGxhY2VOYW1lPjsgd2hlbiBJcGhpY3JhdGVzIGRlc3Ryb3llZAogICAgICAgICAgICAgICAgICAgIHRoZSBTcGFydGFuIGNvbXBhbnksIHdoZW4gQ2hhYnJpYXMgZGVmZWF0ZWQgdGhlIFNwYXJ0YW4gdHJpcmVtZXMgYXQgc2VhIG9mZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzkwOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzOTA5Ij5OYXhvczwvcGxhY2VOYW1lPiwgd2hlbiBUaW1vdGhldXMgd29uIHRoZSBzZWEKICAgICAgICAgICAgICAgICAgICBiYXR0bGUgb2ZmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODg2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4ODYiPkNvcmN5cmE8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgZXhwbG9pdHMgb2YgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IGFuZCBUaW1vdGhldXMgY29tcGFyZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTQiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMTQ8L2JpYmw+IGFuZCBub3RlLiBJbiA8ZGF0ZSBhdXRobmFtZT0iLTM5MSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM5MSI+MzkxPC9kYXRlPiBCLkMuIHRoZSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsIElwaGljcmF0ZXMsIG9uIGdvaW5nIHRvIHRoZSByZWxpZWYgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LCBzdXJwcmlzZWQgYW5kIGFsbW9zdAogICAgICAgICAgICAgICAgICAgICAgICBhbm5paGlsYXRlZCBhIFNwYXJ0YW4gY29tcGFueS4gVGhlIGRlZmVhdCBvZiB0aGUgU3BhcnRhbiBmbGVldCBieSBDaGFicmlhcwogICAgICAgICAgICAgICAgICAgICAgICB0b29rIHBsYWNlIGluIDM3NiBhbmQgd29uIHN1cHJlbWFjeSBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NSI+QWVnZWFuPC9wbGFjZU5hbWU+IGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gZm9yIG92ZXIgZmlmdHkgeWVhcnMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iWGVuLiBIZWxsLiA1LjQuNjEiIHZhbGlkPSJ5ZXMiPlhlbi4gSGVsbC4gNS40LjYxPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC43NyIgdmFsaWQ9InllcyI+RGVtLiAyMC43NzwvYmlibD7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBhbmQgVGltb3RoZXVzIGNvbXBhcmUgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xNCIgdmFsaWQ9InllcyI+RGluLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4xNDwvYmlibD4gYW5kIG5vdGUuIEluIDxkYXRlIGF1dGhuYW1lPSItMzkxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzkxIj4zOTE8L2RhdGU+IEIuQy4gdGhlIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgSXBoaWNyYXRlcywgb24gZ29pbmcgdG8gdGhlIHJlbGllZiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4sIHN1cnByaXNlZCBhbmQgYWxtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgIGFubmloaWxhdGVkIGEgU3BhcnRhbiBjb21wYW55LiBUaGUgZGVmZWF0IG9mIHRoZSBTcGFydGFuIGZsZWV0IGJ5IENoYWJyaWFzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2sgcGxhY2UgaW4gMzc2IGFuZCB3b24gc3VwcmVtYWN5IGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc1Ij5BZWdlYW48L3BsYWNlTmFtZT4gZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBmb3Igb3ZlciBmaWZ0eSB5ZWFycyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJYZW4uIEhlbGwuIDUuNC42MSIgdmFsaWQ9InllcyI+WGVuLiBIZWxsLiA1LjQuNjE8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjc3IiB2YWxpZD0ieWVzIj5EZW0uIDIwLjc3PC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['1.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IHdhcyB0aGUgdGltZSwgQXRoZW5pYW5zLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIFNwYXJ0YW5zLCBvbmNlIGZhbW91cyB0aHJvdWdoIHRoZSBsZWFkZXJzIGluIHdob3NlIHdheXMgdGhleSBoYWQgYmVlbiBzY2hvb2xlZCwKICAgICAgICAgICAgICAgICAgICBjYW1lIGh1bWJseSB0byBvdXIgY2l0eSBhbmQgYmVnZ2VkIG91ciBhbmNlc3RvcnMgdG8gc2F2ZSB0aGVtOyBhbmQgdGhlIGRlbW9jcmFjeQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgaGFkIG92ZXJ0aHJvd24gd2FzIG1hZGUgYnkgdGhlIGNvdW5zZWxsb3JzLCB3aG9tIHdlIHRoZW4gaGFkLCB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwb3dlciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4gYWdhaW46CiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSwgaW4gbXkgYmVsaWVmOyBmb3IgdGhleSBoYWQgZm91bmQgZ2VuZXJhbHMgb2YgdGhlIHR5cGUgSSBoYXZlIGp1c3QKICAgICAgICAgICAgICAgICAgICBtZW50aW9uZWQgYW5kIGhhZCBhcyBhZHZpc2VycyBBcmNoaW51cyBhbmQgQ2VwaGFsdXMgb2YgQ29sbHl0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpa2UgQ2VwaGFsdXMsIHdobyBpcyBtZW50aW9uZWQgYWJvdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4zOCIgdmFsaWQ9InllcyI+RGluLiAxLjM4PC9iaWJsPu+8iSwgQXJjaGludXMgdG9vawogICAgICAgICAgICAgICAgICAgICAgICBhIGxlYWRpbmcgcGFydCBpbiB0aGUgb3ZlcnRocm93IG9mIHRoZSBUaGlydHkgaW4gNDAzLjwvbm90ZT4gRm9yIHRoZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgc2FsdmF0aW9uIG9mIGEgY2l0eSBvciBhIG5hdGlvbiBpcyB0byBmaW5kIGJyYXZlIG1lbiB0byBsZWFkIGl0IGFuZCB3aXNlCiAgICAgICAgICAgICAgICAgICAgY291bnNlbGxvcnMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4zOCIgdmFsaWQ9InllcyI+RGluLiAxLjM4PC9iaWJsPu+8iSwgQXJjaGludXMgdG9vawogICAgICAgICAgICAgICAgICAgICAgICBhIGxlYWRpbmcgcGFydCBpbiB0aGUgb3ZlcnRocm93IG9mIHRoZSBUaGlydHkgaW4gNDAzLjwvdHJhbnNsYXRpb24+"
translation['1.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBmb2xsb3dzIHRoZW4sIEF0aGVuaWFucywgdGhhdAogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBmdWxseSByZWNvZ25pemUgdGhpcyBmYWN0IHlvdSBzaG91bGQgbm90IHN1cmVseSBiZSBwYXJ0aWVzIGluIGZ1dHVyZSB0bwogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzJyBjb3JydXB0aW9uIGFuZCBpbGwtbHVjayBvciByZXN0IHlvdXIgaG9wZXMgb2Ygc2VjdXJpdHkgb24gaGltOyB5b3UKICAgICAgICAgICAgICAgICAgICBuZWVkIG5vdCB0aGluayB0aGF0IHlvdSB3aWxsIGxhY2sgYnJhdmUgbWVuIG9yIHdpc2UgYWR2aXNlcnMuIExldCB0aGUgYW5nZXIgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGZvcmVmYXRoZXJzIGJlIHlvdXJzLiBQdXQgdG8gZGVhdGggdGhpcyByb2JiZXIgdGFrZW4gaW4gdGhlIGFjdCwgdGhpcwogICAgICAgICAgICAgICAgICAgIHRyYWl0b3Igd2hvIGRvZXMgbm90IHdpdGhob2xkIGhpcyBoYW5kcyBmcm9tIHRoZSBnb2xkIGJyb3VnaHQgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYnV0IGhhcyBjYXN0IHRoZSBjaXR5IGludG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGlyZXN0IG1pc2ZvcnR1bmVzLCB0aGlzIGFyY2gtY3JpbWluYWwgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LiBIYXZlIGhpcyBib2R5IGNhc3QgYmV5b25kIHRoZSBjaXR5J3MgYm9yZGVycywgZ2l2ZSBoZXIKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lcyBhIGNoYW5jZSB0byBtZW5kLCBhbmQgdGhlbiwgd2l0aCB0aGlzIGFjY29tcGxpc2hlZCwgZXhwZWN0IGEgaGFwcGllcgogICAgICAgICAgICAgICAgICAgIGxvdC4gPC90cmFuc2xhdGlvbj4="
translation['1.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3YW50IHlvdQogICAgICAgICAgICAgICAgICAgIGFsc28sIEF0aGVuaWFucywgdG8gaGVhciB0aGF0IG90aGVyIGRlY3JlZSBtb3ZlZCBieSBEZW1vc3RoZW5lcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T25lIG9mIHRoZSBzZXZlcmFsIGRlY3JlZXMgcmVsYXRpbmcgdG8gZGVmZW5jZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZCBieSBEZW1vc3RoZW5lcyBhZnRlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT47IHRoZSBvcmFjbGUgaXMgbWVudGlvbmVkIGluIHRoZSBzcGVlY2ggb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEZhbHNlIEVtYmFzc3kg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4yOTciIHZhbGlkPSJ5ZXMiPkRlbS4gMTkuMjk3PC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICBzcS7vvIkuPC9ub3RlPiB0aGUgZGVjcmVlIHdoaWNoIHRoaXMgZGVtb2NyYXRpYyBzdGF0ZXNtYW4gcHJvcG9zZWQKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBjaXR5IHdhcyBpbiBkaXNvcmRlciBhZnRlciB0aGUgYmF0dGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPjsgdGhlIG9yYWNsZSBpcyBtZW50aW9uZWQgaW4gdGhlIHNwZWVjaCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgRmFsc2UgRW1iYXNzeSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjI5NyIgdmFsaWQ9InllcyI+RGVtLiAxOS4yOTc8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIHNxLu+8iS48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT4sIGFuZCBhbHNvIHRoZSBvcmFjbGUgc2VudCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPiBmcm9tIERvZG9uaWFuIFpldXM7IGZvciBpdCBoYXMgbG9uZwogICAgICAgICAgICAgICAgICAgIGJlZW4gd2FybmluZyB5b3UgY2xlYXJseSB0byBiZXdhcmUgb2YgeW91ciBsZWFkZXJzIGFuZCBhZHZpc2Vycy4gUmVhZCB0aGUgb3JhY2xlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ik9yYWNsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yYWNsZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmFjbGU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5SZWFkIHRoYXQgc3BsZW5kaWQgZGVjcmVlIG9mIGhpcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJQYXJ0IG9mIHRoZSBEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QYXJ0IG9mIHRoZSBEZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGFydCBvZiB0aGUgRGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QSBmaW5lIGRlbW9jcmF0IGluZGVlZCB3aG8gYXJyYW5nZXMgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgYmVpbmcgYSBicmF2ZSBhbmQgY291cmFnZW91cyBtYW4sIHRvIHJlbWFpbiBpbiBhcm1zLCB3aGlsZSBoZSBvcmRlcnMKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aXplbnMgd2hvbSBoZSByZWplY3RzIGZvciBzZXJ2aWNlIHRvIGdvIG9mZiB0byB0aGVpciB3b3JrIG9yIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgZWxzZSBoZSB0aGlua3MgaXMgY2FsbGVkIGZvci4gUmVhZCB0aGUgcmVzdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJSZXN0IG9mIHRoZSBEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXN0IG9mIHRoZSBEZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVzdCBvZiB0aGUgRGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5MaXN0ZW4gdG8gdGhhdCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LiBUaGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWUgc2F5cyB0aGF0IHRoZSBjaG9zZW4gZW1iYXNzaWVzIHNoYWxsIHNldCBvdXQuIFdoZW4sIGFmdGVyIHRoZSBiYXR0bGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA3MzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDczMSI+Q2hhZXJvbmVhPC9wbGFjZU5hbWU+LCBoZSBoZWFyZCB0aGF0IFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGludGVuZGVkIHRvIGludmFkZSBvdXIgY291bnRyeSBoZSBhcHBvaW50ZWQgaGltc2VsZiBhbiBlbnZveSwgc28gYXMgdG8gZXNjYXBlCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY2l0eSwgYW5kIHdlbnQgb2ZmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EaW5hcmNodXMgaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGVyaGFwcyByZWZlcnJpbmcgdG8gdGhlIGZhY3QgdGhhdCBhZnRlciBDaGFlcm9uZWEgRGVtb3N0aGVuZXMgd2FzIGFwcG9pbnRlZAogICAgICAgICAgICAgICAgICAgICAgICBhIGNvbW1pc3Npb25lciBmb3IgY29ybiDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg865z4Thvb3Ovc63z4I8L2ZvcmVpZ24+77yJIGFuZCB3ZW50IGFicm9hZCB0byBwcm9jdXJlIGl0IO+8iGNmLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNDgiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjQ4PC9iaWJsPu+8iS4gQWx0ZXJuYXRpdmVseSB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhbHMgZm9yIGhlbHAgd2VyZSBtYWRlIGJ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiB0byBzb21lIG9mIHRoZSBpc2xhbmRzIO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMeWMuIDEuNDIiIHZhbGlkPSJ5ZXMiPkx5Yy4gMS40MjwvYmlibD7vvIkgRGVtb3N0aGVuZXMgbWF5IGhhdmUgc2VydmVkIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuIGVudm95Ljwvbm90ZT4gYWZ0ZXIgc2NyYXBpbmcgdG9nZXRoZXIgZWlnaHQgdGFsZW50cyBmcm9tIHRoZSB0cmVhc3VyeSwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGEgdGhvdWdodCBhYm91dCB0aGUgcGxpZ2h0IHdlIHdlcmUgaW4sIGF0IGEgdGltZSB3aGVuIGV2ZXJ5b25lIGVsc2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW5nIGZyb20gaGlzIG93biBtb25leSB0byBlbnN1cmUgeW91ciBwcm90ZWN0aW9uLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg865z4Thvb3Ovc63z4I8L2ZvcmVpZ24+77yJIGFuZCB3ZW50IGFicm9hZCB0byBwcm9jdXJlIGl0IO+8iGNmLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNDgiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjQ4PC9iaWJsPu+8iS4gQWx0ZXJuYXRpdmVseSB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhbHMgZm9yIGhlbHAgd2VyZSBtYWRlIGJ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiB0byBzb21lIG9mIHRoZSBpc2xhbmRzIO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMeWMuIDEuNDIiIHZhbGlkPSJ5ZXMiPkx5Yy4gMS40MjwvYmlibD7vvIkgRGVtb3N0aGVuZXMgbWF5IGhhdmUgc2VydmVkIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuIGVudm95LjwvdHJhbnNsYXRpb24+"
translation['1.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIHRoZSBjaGFyYWN0ZXIgb2YgeW91ciBhZHZpc2VyLiBEZW1vc3RoZW5lcyBoYXMgbWFkZQogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhlc2UgdHdvIGpvdXJuZXlzIGFicm9hZCBpbiBoaXMgbGlmZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCBpcyB3aG9sbHkgaW5jb3JyZWN0IGFuZCBEaW5hcmNodXMgYXBwZWFycyB0byBiZSBjb250cmFkaWN0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGhpbXNlbGYsIHNpbmNlIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xMiIgdmFsaWQ9InllcyI+RGluLiAxLjEyPC9iaWJsPiBvZiB0aGlzIHNwZWVjaCBoZQogICAgICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdCBhdHRlbXB0IHRvIHJlZnV0ZSBEZW1vc3RoZW5lcycgY2xhaW0gdG8gaGF2ZSBzZXJ2ZWQgb24gbWFueQogICAgICAgICAgICAgICAgICAgICAgICBlbWJhc3NpZXMuIEJ5IGV4Y2x1ZGluZyB0aGUgd29yZHMg4oCcaW4gaGlzIGxpZmXigJ0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNpbmcgYSBjb2xvbiBhZnRlciDigJxiYXR0bGXigJ0gTWFldHpuZXIgd291bGQgYWx0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNlIHRvOiDigJxEZW1vc3RoZW5lcyBoYXMgbWFkZSBvbmx5IHRoZXNlIHR3byBqb3VybmV5cyBhYnJvYWQKICAgICAgICAgICAgICAgICAgICAgICAgc2luY2UgdGhlIGJhdHRsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT4u4oCdPC9ub3RlPjogb25lIGFmdGVyIHRoZSBiYXR0bGUgd2hlbiBoZSByYW4KICAgICAgICAgICAgICAgICAgICBhd2F5IGZyb20gdGhlIGNpdHksIGFuZCBhbm90aGVyIGp1c3QgcmVjZW50bHkgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjEyIiB2YWxpZD0ieWVzIj5EaW4uIDEuMTI8L2JpYmw+IG9mIHRoaXMgc3BlZWNoIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGF0dGVtcHQgdG8gcmVmdXRlIERlbW9zdGhlbmVzJyBjbGFpbSB0byBoYXZlIHNlcnZlZCBvbiBtYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGVtYmFzc2llcy4gQnkgZXhjbHVkaW5nIHRoZSB3b3JkcyDigJxpbiBoaXMgbGlmZeKAnSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2luZyBhIGNvbG9uIGFmdGVyIOKAnGJhdHRsZeKAnSBNYWV0em5lciB3b3VsZCBhbHRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc2UgdG86IOKAnERlbW9zdGhlbmVzIGhhcyBtYWRlIG9ubHkgdGhlc2UgdHdvIGpvdXJuZXlzIGFicm9hZAogICAgICAgICAgICAgICAgICAgICAgICBzaW5jZSB0aGUgYmF0dGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPi7igJ08cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMzk2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEzOTY3Ij5PbHltcGlhPC9wbGFjZU5hbWU+IHdoZW4gaGUgd2FudGVkIHRvIHVzZSB0aGUgcHJlc2lkZW5jeSBvZiB0aGUgc2FjcmVkCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzeSBhcyBhIG1lYW5zIG9mIG1lZXRpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDI1NDA4MjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMjU0MDgyMCI+TmljYW5vcjwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGllZiBBdGhlbmlhbiByZWxpZ2lvdXMgZW52b3kgYXQgdGhlIE9seW1waWMgZ2FtZXMgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zMjQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMjQiPjMyNDwvZGF0ZT4gQi5DLiB3aGVuIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5OaWNhbm9yPC9zdXJuYW1lPjwvcGVyc05hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnRlZCBBbGV4YW5kZXIncyBkZWNyZWUgZGVtYW5kaW5nIHRoYXQgZXhpbGVzIHNob3VsZCBiZSBhbGxvd2VkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0byBhbGwgR3JlZWsgY2l0aWVzIGV4Y2VwdCBUaGViZXMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5EaW8uIFNpYy4gMTguODwvYmlibD47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSBjb2wuIDE4PC9iaWJsPi48L25vdGU+IEEgcmlnaHQgdGhpbmcgaW5kZWVkIHRvCiAgICAgICAgICAgICAgICAgICAgZW50cnVzdCB0aGUgY2l0eSB0byB0aGlzIG1hbidzIGNoYXJnZSwgd2hlbiBkYW5nZXIgY29uZnJvbnRzIHVzISBXaGVuIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIHRpbWUgdG8gZmlnaHQgYWdhaW5zdCB0aGUgZW5lbXksIHNpZGUgYnkgc2lkZSB3aXRoIGhpcyBmZWxsb3dzLCBoZSBsZWZ0IGhpcyBwb3N0CiAgICAgICAgICAgICAgICAgICAgYW5kIG1hZGUgZm9yIGhvbWU7IHlldCB3aGVuIGhlIHNob3VsZCBoYXZlIHN0YXllZCBhdCBob21lIHRvIGZhY2UgZGFuZ2VyIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVtLCBoZSBvZmZlcmVkIGhpbXNlbGYgYXMgYW4gZW52b3kgYW5kIHJhbiBhd2F5IGFuZCBsZWZ0IHRoZSBjaXR5LiA8ZGF0ZSBhdXRobmFtZT0iLTMyNCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTMyNCI+MzI0PC9kYXRlPiBCLkMuIHdoZW4gPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk5pY2Fub3I8L3N1cm5hbWU+PC9wZXJzTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudGVkIEFsZXhhbmRlcidzIGRlY3JlZSBkZW1hbmRpbmcgdGhhdCBleGlsZXMgc2hvdWxkIGJlIGFsbG93ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvIGFsbCBHcmVlayBjaXRpZXMgZXhjZXB0IFRoZWJlcy4gQ2YuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5OaWNhbm9yPC9zdXJuYW1lPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkRpby4gU2ljLiAxOC44PC9iaWJsPjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikh5cC4gNSIgdmFsaWQ9InllcyI+SHlwLiA1IGNvbC4gMTg8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['1.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGFtYmFzc2Fkb3JzIHdlcmUgbmVlZGVkIGZvciB0aGUgcGVhY2UgaGUgc2FpZCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBtb3ZlIGEgZm9vdCB0byBsZWF2ZSB0aGUgY2l0eTsgeWV0IHdoZW4gaXQgd2FzIHJlcG9ydGVkIHRoYXQgQWxleGFuZGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlc3RvcmluZyB0aGUgZXhpbGVzIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TmljYW5vcjwvc3VybmFtZT48L3BlcnNOYW1lPgogICAgICAgICAgICAgICAgICAgIGNhbWUgdG8gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk5pY2Fub3I8L3N1cm5hbWU+PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTM5NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMzk2NyI+T2x5bXBpYTwvcGxhY2VOYW1lPiBoZSBvZmZlcmVkIGhpbXNlbGYgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY291bmNpbCBhcyBwcmVzaWRlbnQgb2YgdGhlIHNhY3JlZCBlbWJhc3N5LiBUaGVzZSBhcmUgdGhlIHBhcnRzIGhlIHBsYXlzOiBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBmaWVsZCBvZiBiYXR0bGUgaGUgaXMgYSBzdGF5LWF0LWhvbWUsIHdoZW4gb3RoZXJzIHN0YXkgYXQgaG9tZSBoZSBpcyBhbgogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3IsIGFtb25nIGFtYmFzc2Fkb3JzIGhlIGlzIGEgcnVuYXdheS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgcmVhZCB0aGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBzb21lIHdvcmRzIGhhdmUgZHJvcHBlZCBvdXQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgaGVyZSBpcyBldmlkZW50IGZyb20gdGhlIGZhY3QgdGhhdCB0d28gZGVjcmVlcyBhcmUgdG8gYmUgcmVhZCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZWQ7IG1vcmVvdmVyIHRoZSBleGVjdXRpb25zIG1lbnRpb25lZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuODMiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuODM8L2JpYmw+IGNvdWxkIGhhdmUgbm8gY29ubmVjdGlvbiB3aXRoIHRoZSBkZWNyZWUgcmVsYXRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbmV5IG9mIEhhcnBhbHVzLCBzaW5jZSBpbiB0aGlzIGNhc2UgRGVtb3N0aGVuZXMgaGltc2VsZiB3YXMgdGhlIGZpcnN0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIHRyaWVkIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xMDYiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xMDY8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGRlY3JlZSByZWxhdGluZyB0byB0aGUgaW5xdWlyeSBvdmVyIHRoZSBtb25leSBwcm9wb3NlZCBieSBEZW1vc3RoZW5lcwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgQXJlb3BhZ3VzIGFuZCBhZmZlY3RpbmcgYm90aCBoaW1zZWxmIGFuZCB5b3UuIEkgd2FudCB5b3UgYnkgY29tcGFyaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0b2dldGhlciB0byByZWFsaXplIHRoYXQgaGUgaXMgZGVtZW50ZWQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjgzIiB2YWxpZD0ieWVzIj5EaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjgzPC9iaWJsPiBjb3VsZCBoYXZlIG5vIGNvbm5lY3Rpb24gd2l0aCB0aGUgZGVjcmVlIHJlbGF0aW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtb25leSBvZiBIYXJwYWx1cywgc2luY2UgaW4gdGhpcyBjYXNlIERlbW9zdGhlbmVzIGhpbXNlbGYgd2FzIHRoZSBmaXJzdCB0bwogICAgICAgICAgICAgICAgICAgICAgICBiZSB0cmllZCDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTA2IiB2YWxpZD0ieWVzIj5EaW4uIDEuMTA2PC9iaWJsPu+8iS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5EaWQgeW91IHByb3Bvc2UgdGhpcywgRGVtb3N0aGVuZXM/IFlvdSBkaWQ7CiAgICAgICAgICAgICAgICAgICAgeW91IGNhbm5vdCBkZW55IGl0LiBXYXMgdGhlIGNvdW5jaWwgZ2l2ZW4gYXV0aG9yaXR5IG9uIHlvdXIgbW90aW9uPyBJdCB3YXMuIEhhdmUKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHRoZSBjaXRpemVucyBiZWVuIGV4ZWN1dGVkPyBUaGV5IGhhdmUuIERpZCB5b3VyIGRlY3JlZSBoYXZlIHBvd2VyIG92ZXIKICAgICAgICAgICAgICAgICAgICB0aGVtPyBZb3UgY2Fubm90IGRlbnkgdGhhdCBpdCBkaWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIGFnYWluIHdoaWNoIERlbW9zdGhlbmVzIHByb3Bvc2VkIGFnYWluc3QgRGVtb3N0aGVuZXMuIExldCBtZSBoYXZlIHlvdXIKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb24sIGdlbnRsZW1lbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY291bmNpbCBoYXMgZm91bmQgRGVtb3N0aGVuZXMgZ3VpbHR5LiBOZWVkCiAgICAgICAgICAgICAgICAgICAgd2UgZW5sYXJnZSBvbiB0aGlzPyBJdCBoYXMgbWFkZSBpdHMgcmVwb3J0IG9uIGhpbSwgQXRoZW5pYW5zLiBKdXN0aWNlIGRlbWFuZGVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgaGF2aW5nIGJlZW4gc2VsZi1jb25kZW1uZWQsIGhlIHNob3VsZCBpbW1lZGlhdGVseSBiZSBwdXQgdG8gZGVhdGguIEJ1dCBub3cKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhcyBmYWxsZW4gaW50byB0aGUgaGFuZHMgb2YgeW91IHdobyBoYXZlIGJlZW4gYXNzZW1ibGVkIGJ5IHRoZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICBhbmQgaGF2ZSBzd29ybiB0byBvYmV5IHRoZSBsYXdzIGFuZCB0aGUgcGVvcGxlJ3MgZGVjcmVlcywgd2hhdCB3aWxsIHlvdSBkbz8gV2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSBpZ25vcmUgdGhlIGNsYWltcyBvZiBwaWV0eSB0b3dhcmRzIHRoZSBnb2RzIGFuZCB0aGUganVzdGljZSByZWNvZ25pemVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHdvcmxkPyBObywgQXRoZW5pYW5zLCBkbyBub3QgZG8gc28uIDwvdHJhbnNsYXRpb24+"
translation['1.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGFuIHV0dGVyIGRpc2dyYWNlIGlmLCB3aGVuIG90aGVycyBubyB3b3JzZSwgYW5kIGV2ZW4gbGVzcyBndWlsdHksIHRoYW4KICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcyBoYXZlIGJlZW4gZGVzdHJveWVkIGJ5IGhpcyBkZWNyZWVzLCBoZSwgd2l0aCBoaXMgY29udGVtcHQgZm9yIHlvdQogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgbGF3cywgc2hvdWxkIGJlIGF0IGxhcmdlIHVucHVuaXNoZWQgaW4gdGhlIGNpdHksIHdoZW4gYnkgaGlzIG93biBtb3Rpb24KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGRlY3JlZXMgd2hpY2ggaGUgcHJvcG9zZWQgaGUgaGFzIGJlZW4gY29udmljdGVkLiBUaGUgc2FtZSBjb3VuY2lsLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgdGhlIHNhbWUgcGxhY2UsIHRoZSBzYW1lIHJpZ2h0cyBoYXZlIGJlZW4gaW4gcXVlc3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['1.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2FtZSBvcmF0b3Igd2FzIHJlc3BvbnNpYmxlIGZvciB0aGUgbWlzZm9ydHVuZXMKICAgICAgICAgICAgICAgICAgICB3aGljaCBvdmVydG9vayB0aGVtIGFuZCB0aG9zZSB3aGljaCB3aWxsIHNvb24gb3ZlcnRha2UgaGltLiBIZSBoaW1zZWxmIGluIHRoZQogICAgICAgICAgICAgICAgICAgIEFzc2VtYmx5IGluc3RydWN0ZWQgdGhpcyBjb3VuY2lsIHRvIGp1ZGdlIGhpcyBjYXNlLCBhZnRlciBjYWxsaW5nIG9uIHlvdSBhcyBoaXMKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMuIEhlIG1hZGUgYW4gYWdyZWVtZW50IHdpdGggdGhlIHBlb3BsZSBhbmQgcHJvcG9zZWQgdGhlIGRlY3JlZSBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgdG8gYmUga2VwdCBieSB0aGUgbW90aGVyIG9mIHRoZSBnb2RzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EaW5hcmNodXMgaXMgYWxsdWRpbmcgdG8gdGhlIE1ldHJvb24sIGluIHdoaWNoIHRoZSBzdGF0ZSBhcmNoaXZlcyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGtlcHQuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMeWMuIDEuNjYiIHZhbGlkPSJ5ZXMiPkx5Yy4gMS42NjwvYmlibD4gYW5kIG5vdGUuPC9ub3RlPiB3aG8gaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSdzIGd1YXJkaWFuIG9mIGFsbCB3cml0dGVuIGNvbnRyYWN0cy4gSXQgd291bGQgdGh1cyBiZSBpbXBpb3VzIGZvciB5b3UgdG8KICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlIHRoaXMgb3IsIGFmdGVyIHN3ZWFyaW5nIGJ5IHRoZSBnb2RzIGluIHRoZSBwcmVzZW50IHRyaWFsLCB0byBnaXZlIGEKICAgICAgICAgICAgICAgICAgICB2b3RlIHdoaWNoIGRpZCBub3QgY29uZm9ybSB3aXRoIHRoZSBhY3Rpb25zIG9mIHRoZSBnb2RzIHRoZW1zZWx2ZXMuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikx5Yy4gMS42NiIgdmFsaWQ9InllcyI+THljLiAxLjY2PC9iaWJsPiBhbmQgbm90ZS48L3RyYW5zbGF0aW9uPg=="
translation['1.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBvc2VpZG9uIGxvc3QgaGlzIHN1aXQgYWdhaW5zdCBBcmVzIG92ZXIKICAgICAgICAgICAgICAgICAgICBIYWxpcnJvdGhpdXMgaGUgYWJvZGUgYnkgdGhlIGRlY2lzaW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdG8gdHJhZGl0aW9uLCBIYWxpcnJvdGhpdXMsIHNvbiBvZiBQb3NlaWRvbiwgd2FzIGtpbGxlZCBieSBBcmVzIGZvciB0cnlpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdG8gc2VkdWNlIGhpcyBkYXVnaHRlciBBbGNpcHBlLiBQb3NlaWRvbiBhY2N1c2VkIEFyZXMgYmVmb3JlIHRoZSBBcmVvcGFndXMKICAgICAgICAgICAgICAgICAgICAgICAgYnV0IGZhaWxlZCB0byBzZWN1cmUgaGlzIGNvbnZpY3Rpb24uIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcG9sbG9kLiAzLjE0LjIiIHZhbGlkPSJ5ZXMiPkFwb2xsb2QuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjE0LjI8L2JpYmw+Ljwvbm90ZT4gVGhlIGF3ZnVsIGdvZGRlc3NlcyB0b28sIGluIHRoZWlyIGNhc2UgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBPcmVzdGVzLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwb2xsb2QuIDMuMTQuMiIgdmFsaWQ9InllcyI+QXBvbGxvZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMuMTQuMjwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yZXN0ZXMsIHB1cnN1ZWQgYnkgdGhlIEZ1cmllcywgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHNhaWQgdG8gaGF2ZSBiZWVuIGdpdmVuIHByb3RlY3Rpb24gYnkgQXRoZW5hLCB3aG8gYWxsb3dlZCB0aGUgQXJlb3BhZ3VzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSBoaXMgY2FzZSBhbmQgaGVyc2VsZiBnYXZlIHRoZSBjYXN0aW5nIHZvdGUgd2hpY2ggYWNxdWl0dGVkIGhpbS4gQ2YuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gRXVtLiA0NDMiIHZhbGlkPSJ5ZXMiPkFlc2NoLiBFdW0uIDQ0MzwvYmlibD4gc3EuOyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjI4LjUiIHZhbGlkPSJ5ZXMiPlBhdXMuIDEuMjguNTwvYmlibD4uPC9ub3RlPiBhYm9kZSBieSB0aGUganVkZ2VtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBjb3VuY2lsLCBhc3NvY2lhdGluZyB0aGVtc2VsdmVzIGZvciB0aGUgZnV0dXJlIHdpdGggaXRzIHJlcHV0YXRpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgdHJ1dGguIEhvdyB3aWxsIHlvdSBhY3Qgd2l0aCB5b3VyIGNsYWltIHRvIHVucml2YWxsZWQgcGlldHk/IFdpbGwgeW91IGFubnVsIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uIG9mIHRoZSBjb3VuY2lsIGFuZCBmb2xsb3cgdGhlIGJhZCBleGFtcGxlIG9mIERlbW9zdGhlbmVzPyBZb3Ugd2lsbCBub3QsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBpZiB5b3UgcmVtYWluIGluIHlvdXIgc2Vuc2VzLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gRXVtLiA0NDMiIHZhbGlkPSJ5ZXMiPkFlc2NoLiBFdW0uIDQ0MzwvYmlibD4gc3EuOyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjI4LjUiIHZhbGlkPSJ5ZXMiPlBhdXMuIDEuMjguNTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['1.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzCiAgICAgICAgICAgICAgICAgICAgaXMgbm8gc21hbGwgb3IgaW5jaWRlbnRhbCBtYXR0ZXIgdGhhdCB5b3UgYXJlIGRlY2lkaW5nIHRvZGF5OyB0aGUgcXVlc3Rpb24gYXQKICAgICAgICAgICAgICAgICAgICBpc3N1ZSBpcyB0aGUgc2FmZXR5IG9mIHRoZSB3aG9sZSBjaXR5IGFuZCBhbHNvIGJyaWJlcnksIGFuIGV2aWwgaGFiaXQgYW5kIGEKICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSB3aGljaCBpcyBoYXJtZnVsIHRvIHlvdSBhbmQgaGFzIGFsd2F5cyBicm91Z2h0IG1lbiB0byBydWluLiBJZiB5b3UgZG8KICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIGluIHlvdXIgcG93ZXIgdG8gcmlkIHRoZSBjaXR5IG9mIHRoaXMgdmljZSBhbmQgdG8gc3VwcHJlc3MgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgZ2xhZGx5IHRha2UgYnJpYmVzIGFnYWluc3QgeW91LCB3ZSBzaGFsbCBiZSBzYXZlZCwgd2l0aCBIZWF2ZW4ncyBjb25zZW50LiBCdXQgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgYWxsb3cgdGhlIG9yYXRvcnMgdG8gc2VsbCB5b3UsIHlvdSB3aWxsIHN0YW5kIGJ5IGFuZCBzZWUgdGhlbSB3cmVjayB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RGVtb3N0aGVuZXMgaGltc2VsZiBwcm9wb3NlZCBpbiB0aGUgQXNzZW1ibHksIGNsZWFybHkgaW1wbHlpbmcgdGhhdCBpdCB3YXMgYQogICAgICAgICAgICAgICAgICAgIGp1c3Qgc3RlcCB0byB0YWtlLCB0aGF0IHdlIHNob3VsZCBrZWVwIGZvciBBbGV4YW5kZXIgdGhlIG1vbmV5IGJyb3VnaHQgaW50bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMjAyMjA1OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwyMDIyMDU4Ij5BdHRpY2E8L3BsYWNlTmFtZT4gd2l0aCBIYXJwYWx1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS42OCIgdmFsaWQ9InllcyI+RGluLiAxLjY4PC9iaWJsPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgbm90ZS48L25vdGU+IFRlbGwgbWUsIHNpcjogYXJlIHdlIGdvaW5nIHRvIGtlZXAgaXQgdW5kZXIgcHJlc2VudCBjb25kaXRpb25zLAogICAgICAgICAgICAgICAgICAgIHdoZW4geW91IGhhdmUgdGFrZW4gdHdlbnR5IHRhbGVudHMgZm9yIHBlcnNvbmFsIHVzZSwgc29tZW9uZSBlbHNlIGZpZnRlZW4sCiAgICAgICAgICAgICAgICAgICAgRGVtYWRlcyBzaXggdGhvdXNhbmQgZ29sZCBzdGF0ZXJzLCBhbmQgdGhlIG90aGVycyB0aGUgdmFyaW91cyBzdW1zIHRoYXQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gY3JlZGl0ZWQgdG8gdGhlbT8gRm9yIHNpeHR5LWZvdXIgdGFsZW50cyBoYXZlIGFscmVhZHkgYmVlbiB0cmFjZWQsIGZvcgogICAgICAgICAgICAgICAgICAgIHdoaWNoLCB5b3UgbXVzdCBjb25jbHVkZSwgZ2VudGxlbWVuLCB0aGF0IHRoZXNlIG1lbiBhcmUgdG8gYmUgaGVsZCByZXNwb25zaWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjY4IiB2YWxpZD0ieWVzIj5EaW4uIDEuNjg8L2JpYmw+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBub3RlLjwvdHJhbnNsYXRpb24+"
translation['1.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5XaGljaCBpcyB0aGUgbW9yZSBob25vcmFibGUgYWx0ZXJuYXRpdmUsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIG1vcmUganVzdDogdGhhdCBhbGwgdGhlIG1vbmV5IHNob3VsZCBiZSBrZXB0IGluIHRoZSB0cmVhc3VyeSB1bnRpbCB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgaGFzIHJlYWNoZWQgc29tZSBmYWlyIGRlY2lzaW9uLCBvciB0aGF0IHRoZSBvcmF0b3JzIGFuZCBjZXJ0YWluIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWxzIHNob3VsZCBzZWl6ZSBhbmQga2VlcCBpdD8gUGVyc29uYWxseSBJIHRoaW5rIHRoYXQgdG8ga2VlcCBpdCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVhc3VyeSBpcyB0aGUgY291cnNlIHdoaWNoIGFsbCB3b3VsZCBhZG1pdCB0byBiZSBqdXN0LCB3aGlsZSBubyBvbmUgd291bGQKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciBpdCBmYWlyIGZvciB0aGVzZSBtZW4gdG8gcmV0YWluIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['1.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHN0YXRlbWVudHMgbWFkZSBieSB0aGUgZGVmZW5kYW50LAogICAgICAgICAgICAgICAgICAgIGdlbnRsZW1lbiwgaGF2ZSBiZWVuIG51bWVyb3VzIGFuZCB2ZXJ5IHZhcmllZCBidXQgbmV2ZXIgY29uc2lzdGVudC4gRm9yIGhlCiAgICAgICAgICAgICAgICAgICAgcmVhbGl6ZXMgdGhhdCBhbGwgYWxvbmcgeW91IGhhdmUgYmVlbiBjaGVhdGVkIGJ5IGhpbSB3aXRoIGVtcHR5IGhvcGVzIGFuZCBseWluZwogICAgICAgICAgICAgICAgICAgIGFzc2VydGlvbnMgYW5kIHRoYXQgeW91IHJlbWVtYmVyIGhpcyBwcm9taXNlcyBvbmx5IHNvIGxvbmcgYXMgdGhleSBhcmUgYmVpbmcKICAgICAgICAgICAgICAgICAgICB1dHRlcmVkLiBJZiB0aGVuIHRoZSBjaXR5IG11c3QgZ28gb24gZW5qb3lpbmcgdGhlIGZydWl0cyBvZiBEZW1vc3RoZW5lcycKICAgICAgICAgICAgICAgICAgICB3aWNrZWRuZXNzIGFuZCBpbGwtZm9ydHVuZSwgdGhhdCB3ZSBtYXkgc3RpbGwgYmUgcGxhZ3VlZCBieSBhbiBldmlsCiAgICAgICAgICAgICAgICAgICAgZ2VuaXVzLOKAlEkgY2FuIGZpbmQgbm8gb3RoZXIgd29yZCBmb3IgaXQs4oCUd2Ugc2hvdWxkIGFjcXVpZXNjZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBwcmVzZW50IHN0YXRlIG9mIGFmZmFpcnMuIDwvdHJhbnNsYXRpb24+"
translation['1.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIGFueSByZWdhcmQgZm9yIG91ciBjb3VudHJ5LCBpZiB3ZSBoYXRlIHdpY2tlZCBhbmQgY29ycnVwdCBtZW4gYW5kIHdhbnQgb3VyCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSB0byBjaGFuZ2UgZm9yIHRoZSBiZXR0ZXIsIHlvdSBtdXN0IG5vdCBzdXJyZW5kZXIgeW91cnNlbHZlcywgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBwcmF5ZXJzIG9mIHRoaXMgYWNjdXJzZWQganVnZ2xlciBvciBsZW5kIGFuIGVhciB0byBoaXMgbGFtZW50cyBhbmQKICAgICAgICAgICAgICAgICAgICBxdWFja2VyaWVzLiBZb3UgaGF2ZSBoYWQgZW5vdWdoIGV4cGVyaWVuY2Ugb2YgaGltLCBoaXMgc3BlZWNoZXMsIGhpcyBhY3Rpb25zLAogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgbHVjay4gPC90cmFuc2xhdGlvbj4="
translation['1.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGljaCBvZiB5b3UgaXMgc28gaG9wZWZ1bCwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIG9yIHNvIGlycmF0aW9uYWwsIHdoaWNoIG9mIHlvdSBpcyBzbyB1bnZlcnNlZCBpbiBwYXN0IG9yIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LCBhcyB0byBleHBlY3QgdGhhdCBhIG1hbiB3aG8gcmVkdWNlZCB0aGUgY2l0eSwgdGhyb3VnaCB3aGF0ZXZlciBmYXVsdCBvcgogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUs4oCUSSBhbSBub3QgY29uY2VybmVkIHdpdGggdGhhdCzigJRmcm9tIHN1Y2ggZ3JlYXQKICAgICAgICAgICAgICAgICAgICBwcm9zcGVyaXR5IHRvIHN1Y2ggdXR0ZXIgZGlzZ3JhY2UsIHdpbGwgc2F2ZSB1cyBub3cgYnkgc2VydmluZyBhcyBhIGNvdW5zZWxsb3IKICAgICAgICAgICAgICAgICAgICBhbmQgYWRtaW5pc3RyYXRvcj8gRm9yIGJlc2lkZXMgdGhlIG90aGVyIGRpZmZpY3VsdGllcyBhbmQgZGFuZ2VycyB3aGljaCBiZXNldCB1cwogICAgICAgICAgICAgICAgICAgIHdlIGhhdmUgbm93IGNvcnJ1cHRpb24gYWxzbywgb2YgbWVuIHJpZ2h0IGluIHRoZSBjaXR5LCBhbmQgYXJlIG9uZSBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgc3RyaXZpbmcgdG8gY2xlYXIgb3Vyc2VsdmVzIG9mIGEgc2hhbWVmdWwgY2hhcmdlLCBsZXN0IHRoZSBwZW9wbGUgYmUgdGhvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhvbGQgaW4gdGhlaXIgb3duIG5hbWUgdGhlIG1vbmV5IHdoaWNoIGNlcnRhaW4gaW5kaXZpZHVhbHMgYXJlIGtlZXBpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['1.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIG5vdCBjaXRpbmcgb3RoZXIgaW5zdGFuY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbnRpbnVhbCBjaGFuZ2Ugb2YgcG9saWN5IG9yIG9mIHRoZSBwZXJuaWNpb3VzIHNwZWVjaGVzIHdoaWNoIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGNvbnNpc3RlbnRseSBtYWRlLiBBdCBvbmUgdGltZSBoZSBtYWRlIGEgcHJvcG9zYWwgZm9yYmlkZGluZyBhbnlvbmUgdG8gYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIGluIGFueSBidXQgdGhlIGFjY2VwdGVkIGdvZHMgYW5kIGF0IGFub3RoZXIgc2FpZCB0aGF0IHRoZSBwZW9wbGUgbXVzdCBub3QKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiB0aGUgZ3JhbnQgb2YgZGl2aW5lIGhvbm9ycyB0byBBbGV4YW5kZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgaGFkIG1lcmVseSBzYWlkOiDigJxMZXQgaGltIGJlIHRoZSBzb24gb2YgWmV1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgUG9zZWlkb24gdG9vIGlmIGhlIGxpa2VzLuKAnSBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSHlwLiA1IiB2YWxpZD0ieWVzIj5IeXAuIDUgY29sLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzE8L2JpYmw+Ljwvbm90ZT47IGFuZCBhZ2FpbiB3aGVuIGhlIHdhcyBvbiB0aGUgcG9pbnQgb2YgYmVpbmcgdHJpZWQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91LCBoZSBpbXBlYWNoZWQgQ2FsbGltZWRvbiBmb3IgY29uc29ydGluZyB3aXRoIHRoZSBleGlsZXM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIeXAuIDUiIHZhbGlkPSJ5ZXMiPkh5cC4gNSBjb2wuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMTwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgdW5saWtlIG1vc3QgR3JlZWsgY2l0aWVzLCByZWZ1c2VkIHRvIG9iZXkgQWxleGFuZGVyJ3Mgb3JkZXIgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JhdGlvbiBvZiBleGlsZXMg77yIY2YuIG5vdGUgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjgxIiB2YWxpZD0ieWVzIj5EaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjgxPC9iaWJsPu+8iS4gQ2FsbGltZWRvbiwgYSBwb2xpdGljaWFuIHdpdGggcHJvLU1hY2Vkb25pYW4KICAgICAgICAgICAgICAgICAgICAgICAgc3ltcGF0aGllcywgbmlja25hbWVkIHRoZSBDcmFiLCBpcyBtZW50aW9uZWQgc2V2ZXJhbCB0aW1lcyBieSBQbHV0YXJjaAogICAgICAgICAgICAgICAgICAgICAgICDvvIhlLmcuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjciIHZhbGlkPSJ5ZXMiPlBsdXQuIERlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjc8L2JpYmw+77yJLjwvbm90ZT4gaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICB1bmxpa2UgbW9zdCBHcmVlayBjaXRpZXMsIHJlZnVzZWQgdG8gb2JleSBBbGV4YW5kZXIncyBvcmRlciBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmF0aW9uIG9mIGV4aWxlcyDvvIhjZi4gbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuODEiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuODE8L2JpYmw+77yJLiBDYWxsaW1lZG9uLCBhIHBvbGl0aWNpYW4gd2l0aCBwcm8tTWFjZWRvbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBzeW1wYXRoaWVzLCBuaWNrbmFtZWQgdGhlIENyYWIsIGlzIG1lbnRpb25lZCBzZXZlcmFsIHRpbWVzIGJ5IFBsdXRhcmNoCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iGUuZy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyNyIgdmFsaWQ9InllcyI+UGx1dC4gRGVtLgogICAgICAgICAgICAgICAgICAgICAgICAyNzwvYmlibD7vvIkuPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcxMzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzEzMyI+TWVnYXJhPC9wbGFjZU5hbWU+IHdpdGggaW50ZW50IHRvIG92ZXJ0aHJvdyB0aGUgZGVtb2NyYWN5LCA8L3RyYW5zbGF0aW9uPg=="
translation['1.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZGlyZWN0bHkgYWZ0ZXIgY291bnRlcm1hbmRlZCB0aGUgaW1wZWFjaG1lbnQgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBmb3J3YXJkIGF0IHRoZSByZWNlbnQgc2l0dGluZyBvZiB0aGUgQXNzZW1ibHkgYSBmYWxzZSB3aXRuZXNzIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgcHJpbWVkIHRvIHNheSB0aGF0IHRoZXJlIHdhcyBhIHBsb3QgYWZvb3QgdGhyZWF0ZW5pbmcgdGhlIGRvY2tzLiBJbiBhbGwgdGhpcwogICAgICAgICAgICAgICAgICAgIGhlIG9mZmVyZWQgbm8gcHJvcG9zYWxzIGJ1dCBzaW1wbHkgZnVybmlzaGVkIHVzIHdpdGggY2hhcmdlcyBmb3IgdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICB0cmlhbCwgc2luY2Ugb24gYWxsIHRoZXNlIHBvaW50cyB5b3UgYXJlIHdpdG5lc3NlcyBhZ2FpbnN0IGhpbS4gVGhpcyBtYW4gaXMgYQogICAgICAgICAgICAgICAgICAgIGp1Z2dsZXIsIEF0aGVuaWFucywgYW5kIGEgYmxhY2tndWFyZCwgbm90IGVudGl0bGVkIHRvIGJlIGEgY2l0aXplbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzkzIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGVpdGhlciBieSB2aXJ0dWUgb2YgaGlzIGJpcnRoIG9yIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHBvbGl0aWNhbCByZWNvcmQuIDwvdHJhbnNsYXRpb24+"
translation['1.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZSBhcmUgdGhlIHRyaXJlbWVzCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggRGVtb3N0aGVuZXMsIGxpa2UgRXVidWx1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Gb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZGVuY2UgaW5zcGlyZWQgYnkgRXVidWx1cywgc29uIG9mIFNwaW50aGFydXMsIHdobyBjb250cm9sbGVkIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFuY2VzIGZyb20gMzU0IHRvIDxkYXRlIGF1dGhuYW1lPSItMzUwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzUwIj4zNTA8L2RhdGU+IEIuQy4sIGFuZCBwZXJoYXBzIGZvciBhCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgcGVyaW9kIGFsc28sIGNvbXBhcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy4yNSIgdmFsaWQ9InllcyI+QWVzY2hpbi4KICAgICAgICAgICAgICAgICAgICAgICAgMy4yNTwvYmlibD4uPC9ub3RlPiBpbiBoaXMgdGltZSwgaGFzIHN1cHBsaWVkIHRvIHRoZSBjaXR5PyBXaGVyZSBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZG9ja3lhcmRzIGJ1aWx0IHVuZGVyIGhpcyBhZG1pbmlzdHJhdGlvbj8gV2hlbiBkaWQgaGUgaW1wcm92ZSB0aGUgY2F2YWxyeSBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBieSBkZWNyZWUgb3IgbGF3PyBEZXNwaXRlIHN1Y2ggb3Bwb3J0dW5pdGllcyBhcyB3ZXJlIG9mZmVyZWQgYWZ0ZXIgdGhlIGJhdHRsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM1MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM1MCI+MzUwPC9kYXRlPiBCLkMuLCBhbmQgcGVyaGFwcyBmb3IgYQogICAgICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIHBlcmlvZCBhbHNvLCBjb21wYXJlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMjUiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDMuMjU8L2JpYmw+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPiwgZGlkIGhlIHJhaXNlIGEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgZm9yY2UgZWl0aGVyIGZvciBsYW5kIG9yIHNlYT8gV2hhdCBvcm5hbWVudCBmb3IgdGhlIGdvZGRlc3MgaGFzIGhlIGNhcnJpZWQgdXAgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgQWNyb3BvbGlzPyBXaGF0IGJ1aWxkaW5nIGhhcyBEZW1vc3RoZW5lcyBwdXQgdXAsIGVpdGhlciBpbiB5b3VyIGV4Y2hhbmdlLCBvcgogICAgICAgICAgICAgICAgICAgIGluIHRoZSBjaXR5LCBvciBhbnl3aGVyZSBlbHNlIGluIHRoZSBjb3VudHJ5PyBOb3QgYSBtYW4gY291bGQgcG9pbnQgdG8gb25lCiAgICAgICAgICAgICAgICAgICAgYW55d2hlcmUuIDwvdHJhbnNsYXRpb24+"
translation['1.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5WZXJ5IHdlbGw7IGlmIGEgcGVyc29uIGhhcyBwcm92ZWQKICAgICAgICAgICAgICAgICAgICB1bnRydXN0d29ydGh5IGluIG1pbGl0YXJ5IG1hdHRlcnMgYW5kIHVzZWxlc3MgaW4gdGhlIGJ1c2luZXNzIG9mIHRoZSBjaXR5LCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBpZGx5IHdhdGNoZWQgaGlzIG9wcG9uZW50cyBhY2NvbXBsaXNoIGV2ZXJ5dGhpbmcgdGhleSB3aXNoZWQsIGNoYW5naW5nIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBwb3NpdGlvbiBhbmQgbmVnbGVjdGluZyB0byBwdXJzdWUgdGhlIHBlb3BsZSdzIGludGVyZXN0cywgd2lsbCB5b3Ugd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIHByZXNlcnZlIGhpbT8gPC90cmFuc2xhdGlvbj4="
translation['1.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgaWYgeW91IGFyZSBwcnVkZW50IGFuZCBtYWtlCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IGRlY2lzaW9uIGZvciB5b3Vyc2VsdmVzIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIE5vOyB5b3Ugd2lsbCB3ZWxjb21lIHRoZSBnb29kIGZvcnR1bmUgd2hpY2ggZ2F2ZSB1cCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSBmb3IgcHVuaXNobWVudCB0aG9zZSBvcmF0b3JzIHdobywgdGhyb3VnaCB0aGVpciBvd24gYnJpYmVyeSwgaGF2ZSBodW1pbGlhdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdHksIGFuZCB3aWxsIGJld2FyZSwgYXMgdGhlIGdvZHMgaGF2ZSBvZnRlbiBjYXV0aW9uZWQgeW91IGluIG9yYWNsZXMsCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgbGVhZGVycyBhbmQgY291bnNlbGxvcnMgb2YgdGhpcyB0eXBlLiBMaXN0ZW4gdG8gdGhlIG9yYWNsZSBpdHNlbGYuCiAgICAgICAgICAgICAgICAgICAgUmVhZCB0aGUgb3JhY2xlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjc4IiB2YWxpZD0ieWVzIj5EaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjc4PC9iaWJsPi48L25vdGU+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjc4IiB2YWxpZD0ieWVzIj5EaW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjc4PC9iaWJsPi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJPcmFjbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmFjbGU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JhY2xlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IHRoZW4gc2hhbGwKICAgICAgICAgICAgICAgICAgICB3ZSBiZSBvZiBvbmUgbWluZCwgQXRoZW5pYW5zPyBIb3cgc2hhbGwgd2UgYWdyZWUgdXBvbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBzdGF0ZQogICAgICAgICAgICAgICAgICAgIHdoZW4gb3VyIGxlYWRlcnMgYW5kIGRlbWFnb2d1ZXMgdGFrZSBicmliZXMgYW5kIGJldHJheSB0aGVpciBjb3VudHJ5J3MKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdHMsIHdoZW4geW91IHlvdXJzZWx2ZXMgYW5kIHRoZSB3aG9sZSBwZW9wbGUgYXJlIGluIGRhbmdlciBvZiBsb3NpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdmVyeSBmb3VuZGF0aW9ucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvZ2V0aGVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCB5b3VyIGZhdGhlcnMnIHRlbXBsZXMgYW5kIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCB3aGlsZSB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBjb25zcGlyZWQgdG9nZXRoZXIsIHNvIHRoYXQgaW4gdGhlIGFzc2VtYmxpZXMgdGhleSBwdXJwb3NlbHkgYWJ1c2UgYW5kIGxvc2UKICAgICAgICAgICAgICAgICAgICB0aGVpciB0ZW1wZXJzIHdpdGggZWFjaCBvdGhlciwgdGhvdWdoIGluIHByaXZhdGUgdGhleSBhcmUgdW5pdGVkIGFuZCB0aHVzCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZSB5b3UsIHdobyBhcmUgc28gcmVhZHkgdG8gbGVuZCBhbiBlYXIgdG8gd2hhdCB0aGV5IHNheS4gPC90cmFuc2xhdGlvbj4="
translation['1.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBpcyB0aGUgZHV0eSBvZiBhIGRlbW9jcmF0aWMgb3JhdG9yLCBoYXRpbmcKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gbWVuYWNlIHRoZSBjaXR5IGJ5IHNwZWVjaCBvciBiaWxsPyBXaGF0IGFyZSB3ZSB0b2xkLCBEZW1vc3RoZW5lcyBhbmQKICAgICAgICAgICAgICAgICAgICBQb2x5ZXVjdHVzLCBhYm91dCB5b3VyIHByZWRlY2Vzc29ycz8gV2hhdCBkaWQgdGhleSBhbHdheXMgZG8sIGV2ZW4gdGhvdWdoIG5vCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyIHRocmVhdGVuZWQgdGhlIGNpdHkgYXQgdGhlIHRpbWU/IERpZCB0aGV5IG5vdCBzdW1tb24gZWFjaCBvdGhlciBmb3IKICAgICAgICAgICAgICAgICAgICB0cmlhbDsgYnJpbmcgaW4gaW1wZWFjaG1lbnRzPyBEaWQgdGhleSBub3QgaW5kaWN0IGVhY2ggb3RoZXIgZm9yIGlsbGVnYWwKICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHM/IEhhdmUgeW91LCB3aG8gcHJvZmVzcyB0byBoYXZlIHRoZSBwZW9wbGUgYXQgaGVhcnQsIGFuZCBtYWludGFpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91ciBzYWZldHkgcmVzdHMgdXBvbiB0aGlzIGp1cnkncyB2b3RlLCBkb25lIGEgc2luZ2xlIG9uZSBvZiB0aGVzZSB0aGluZ3M/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2ZSB5b3UgZGVub3VuY2VkIGEgZGVjcmVlLCBEZW1vc3RoZW5lcywKICAgICAgICAgICAgICAgICAgICBkZXNwaXRlIHRoZSBtYW55IG91dHJhZ2VvdXMgYW5kIGlsbGVnYWwgbWVhc3VyZXMgd2hpY2ggRGVtYWRlcyBoYXMgcHJvcG9zZWQ/CiAgICAgICAgICAgICAgICAgICAgSGF2ZSB5b3UgcHJldmVudGVkIGFueSBwb2xpdGljYWwgc3RlcCBhbW9uZyB0aG9zZSB3aGljaCBoZSBoYXMgdGFrZW4gb24gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGluaXRpYXRpdmUgYWdhaW5zdCB0aGUgaW50ZXJlc3RzIG9mIHRoZSBzdGF0ZT8gTm90IGEgc2luZ2xlIG9uZS4gSGF2ZSB5b3UKICAgICAgICAgICAgICAgICAgICBpbXBlYWNoZWQgdGhpcyBtYW4gd2hvIGhhcyBvZnRlbiBhY3RlZCBjb250cmFyeSB0byB0aGUgZGVjcmVlcyBvZiB0aGUgcGVvcGxlIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzPyBOZXZlci4gWW91IGFsbG93ZWQgaGltIHRvIGhhdmUgaGlzIHN0YXR1ZSBzZXQgdXAgaW4gYnJvbnplIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldCBhbmQgdG8gc2hhcmUgZW50ZXJ0YWlubWVudCBpbiB0aGUgUHJ5dGFuZXVtIHdpdGggdGhlIGRlc2NlbmRhbnRzIG9mCiAgICAgICAgICAgICAgICAgICAgSGFybW9kaXVzIGFuZCBBcmlzdG9naXRvbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2UgaG9ub3JzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgcGFpZCB0byBEZW1hZGVzIGFib3V0IDxkYXRlIGF1dGhuYW1lPSItMzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzM1Ij4zMzU8L2RhdGU+IEIuQy4gaW4gcmVjb2duaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIG1pc3Npb24gdG8gQWxleGFuZGVyIGFmdGVyIHRoZSBkZXN0cnVjdGlvbiBvZiBUaGViZXMuIENmLiBMaWZlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbWFkZXM8L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii0zMzUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zMzUiPjMzNTwvZGF0ZT4gQi5DLiBpbiByZWNvZ25pdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBoaXMgbWlzc2lvbiB0byBBbGV4YW5kZXIgYWZ0ZXIgdGhlIGRlc3RydWN0aW9uIG9mIFRoZWJlcy4gQ2YuIExpZmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgRGVtYWRlczwvdHJhbnNsYXRpb24+"
translation['1.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gd2hhdCB3YXkgdGhlbiBkaWQgdGhlIHBlb3BsZSBzYW1wbGUgeW91cgogICAgICAgICAgICAgICAgICAgIGdvb2R3aWxsLCB3aGVyZSBkaWQgd2Ugc2VlIHByb29mIG9mIHRoZSBvcmF0b3IncyBwcm90ZWN0aW5nIHBvd2VyPyBPciB3aWxsIHlvdQogICAgICAgICAgICAgICAgICAgIGFsbCBtYWludGFpbiB0aGF0IGhlcmVpbiBsaWUgeW91ciBwb3dlcnM6IHRvIGNoZWF0IHRoZXNlIG1lbiBieSBwZXJzaXN0aW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3UgY2Fubm90IGxlYXZlIHRoZSBjb3VudHJ5LCB0aGF0IHlvdSBoYXZlIG5vIG90aGVyIHJlZnVnZSB0aGFuIG91ciBnb29kd2lsbD8KICAgICAgICAgICAgICAgICAgICBZb3Ugb3VnaHQgZmlyc3QgdG8gaGF2ZSBtYWRlIGl0IGNsZWFyIHRoYXQgaW4gc3BlZWNoIGFuZCBhY3Rpb24geW91IG9wcG9zZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcyBicm91Z2h0IGZvcndhcmQgYWdhaW5zdCB0aGUgcGVvcGxlJ3MgaW50ZXJlc3RzIGFuZCB0aGVuIHNvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNlIHRoZXNlIG1lbiB0aGF0IHlvdXIgY2xhaW0gdG8gaGF2ZSBubyBtZWFucyBvZiBzYWZldHkgYnV0IHRoZSBhc3Npc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZCBieSB0aGUgcGVvcGxlIHdhcyB0cnVlLiA8L3RyYW5zbGF0aW9uPg=="
translation['1.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlvdSBwbGFjZQogICAgICAgICAgICAgICAgICAgIHlvdXIgaG9wZXMgYWJyb2FkIGFuZCBjb21wZXRlIGluIGZsYXR0ZXJ5IHdpdGggdGhvc2Ugd2hvIGFkbWl0IHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBzZXJ2aW5nIEFsZXhhbmRlciBhbmQgaGF2ZSB0YWtlbiBicmliZXMgZnJvbSB0aGUgc2FtZSBzb3VyY2VzIGFzIHRob3NlIGZyb20KICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3UgYXJlIHJlcG9ydGVkIGJ5IHRoZSBjb3VuY2lsIHRvIGhhdmUgcmVjZWl2ZWQgdGhlbS4gQW5kIHlvdSwKICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgYWZ0ZXIgY29udmVyc2luZyB3aXRoIE5pY2Fub3IgaW4gZnJvbnQgb2YgYWxsIHRoZSBHcmVla3MgYW5kCiAgICAgICAgICAgICAgICAgICAgc2V0dGxpbmcgZXZlcnl0aGluZyB5b3Ugd2FudGVkLCBub3cgbWFrZSB5b3Vyc2VsZiBvdXQgdG8gYmUgaW4gbmVlZCBvZiBwaXR5LAogICAgICAgICAgICAgICAgICAgIHRyYWl0b3IgdGhvdWdoIHlvdSBhcmUgYW5kIGEgcmVjZWl2ZXIgb2YgYnJpYmVzOyBhcyBpZiB0aGVzZSBtZW4gd2lsbCBmb3JnZXQKICAgICAgICAgICAgICAgICAgICB5b3VyIHdpY2tlZG5lc3MsIGFzIGlmIHlvdSB3aWxsIG5vdCBwYXkgdGhlIHBlbmFsdHkgZm9yIHRoZSBjcmltZXMgYXQgd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGNhdWdodC4gWW91IGFyZSBhY3RpbmcgbW9yZSBib2xkbHkgdGhhbiBEZW1hZGVzIHRvIHRoaXMgZXh0ZW50LAogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCB0aG91Z2ggaGUgaGFzIGdpdmVuIHdhcm5pbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkgb2YgaGlzIGRlc3BlcmF0ZSBjaGFyYWN0ZXIgYW5kIGFkbWl0cyB0aGF0IGhlIGFjY2VwdHMgbW9uZXkgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSB0byBkbyBzbywgc3RpbGwgaGUgaGFzIG5vdCBkYXJlZCB0byBzaG93IGhpcyBmYWNlIGJlZm9yZSB0aGVzZSBtZW4gYW5kCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBwcmVzdW1lIHRvIGRpc3B1dGUgdGhlIGNvdW5jaWwncyByZXBvcnQ7IG1vcmVvdmVyIGhlIGRpZCBub3QgcHJvcG9zZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGNvdW5jaWwgc2hvdWxkIGhhdmUgYXV0aG9yaXR5IG92ZXIgaGltIG9yIGxheSBkb3duIHRoZSBkZWF0aCBwZW5hbHR5IGlmCiAgICAgICAgICAgICAgICAgICAgaGUgc2hvdWxkIGJlIHByb3ZlZCB0byBoYXZlIHRha2VuIGJyaWJlcy4gQnV0IHlvdSBoYXZlIHN1Y2ggY29tcGxldGUgY29uZmlkZW5jZQogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgb3duIGFyZ3VtZW50cyBhbmQgc3VjaCBhIGNvbnRlbXB0IGZvciB0aGVzZSBtZW4ncyBzaW1wbGljaXR5IHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgZXhwZWN0IHRvIHBlcnN1YWRlIHRoZSBqdXJ5IHRoYXQgaW4geW91ciBjYXNlIG9ubHkgaGFzIHRoZSBjb3VuY2lsJ3Mgc3RhdGVtZW50CiAgICAgICAgICAgICAgICAgICAgYmVlbiBmYWxzZSBhbmQgdGhhdCB5b3UgYWxvbmUgb2YgdGhvc2Ugd2hvbSBpdCByZXBvcnRlZCBoYXZlIG5vdCBhY2NlcHRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBnb2xkLiBXaG8gY291bGQgYmVsaWV2ZSB0aGF0PyA8L3RyYW5zbGF0aW9uPg=="
translation['1.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBleHBsYWluLCBBdGhlbmlhbnMsIHdoYXQgeW91IGFyZSBnb2luZyB0byBkby4gWW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0YWtlbiBvdmVyIHRoZSBjYXNlIGZyb20gdGhlIHBlb3BsZSwgd2hvIGtub3cgdGhlIGZhY3RzOyBhbmQgdG8gdW5kZXJnbyB0aGUKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50LCBkdWUgdG8gdGhvc2Ugd2hvc2UgbmFtZXMgYXBwZWFyIGluIHRoZSByZXBvcnRzLCBEZW1vc3RoZW5lcyBpcwogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgaW4gZmlyc3QuIFdlIGhhdmUgbWFkZSBvdXIgYWNjdXNhdGlvbiBhbmQgaGF2ZSBhbGxvd2VkIG5vIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdCBvbiB0aGUgcGFydCBvZiBhbnkgdG8gc3RhbmQgaW4gdGhlIHdheSBvZiBjb21tb24ganVzdGljZS4gPC90cmFuc2xhdGlvbj4="
translation['1.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+V2lsbCB5b3UgZGlzcmVnYXJkIGFsbCB0aGF0IGhhcyBwYXNzZWQgYW5kIGFjcXVpdAogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBtYW4gdXAgYmVmb3JlIHlvdT8gV2lsbCB5b3UsIHdpdGggZnVsbCBwb3dlciBhdCB5b3VyIGNvbW1hbmQsIHJlamVjdAogICAgICAgICAgICAgICAgICAgIHdoYXQgc2VlbWVkIGp1c3QgYm90aCB0byB0aGUgcGVvcGxlIGFuZCB0aGUgQXJlb3BhZ3VzLCBhbmQgaW5kZWVkIHRvIGV2ZXJ5b25lLAogICAgICAgICAgICAgICAgICAgIGFuZCB0YWtlIHVwb24geW91cnNlbHZlcyB0aGVzZSBtZW4ncyBkZXByYXZpdHk/IDwvdHJhbnNsYXRpb24+"
translation['1.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+T3Igd2lsbCB5b3UsIGZvciB0aGUgY2l0eSdzIHNha2UsIGdpdmUgYSBkZW1vbnN0cmF0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgYWxsIGFsaWtlIG9mIHRoZSBoYXRyZWQgeW91IGJlYXIgdG93YXJkcyB0cmFpdG9ycyBhbmQgdGhvc2Ugd2hvLCB0aHJvdWdoIGxvdmUgb2YKICAgICAgICAgICAgICAgICAgICBnYWluLCBiZXRyYXkgdGhlIHBlb3BsZSdzIGludGVyZXN0cz8gQWxsIHRoaXMgbm93IGxpZXMgaW4geW91ciBjb250cm9sLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZmlmdGVlbiBodW5kcmVkIG9mIHlvdSBob2xkIHRoZSBjaXR5J3Mgc2FmZXR5IGluIHlvdXIgaGFuZHMuIFlvdXIgdmVyZGljdCBvZgogICAgICAgICAgICAgICAgICAgIHRvZGF5IHdpbGwgZWl0aGVyIGJyaW5nIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGdyZWF0IHNlY3VyaXR5LCBpZiB5b3UgYXJlIHdpbGxpbmcgdG8gbWFrZSBhIGp1c3QgZGVjaXNpb24sIG9yIGVsc2UsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGVuZG9yc2Ugc3VjaCBwcmFjdGljZXMgYXMgdGhpcywgZHJpdmUgYWxsIG1lbiB0byBkZXNwb25kZW5jeS4gPC90cmFuc2xhdGlvbj4="
translation['1.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBtdXN0IG5vdCBiZSBjb3dlZCwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIG9yIGJ5IGxvc2luZyB5b3VyIHNlbGYtY29udHJvbCBnaXZlIHVwIHRoZSBjaXR5J3MganVzdCBkZWZlbmNlLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRvdWNoZXMgYWxsIGFsaWtlLCBpbiBkZWZlcmVuY2UgdG8gRGVtb3N0aGVuZXMnIGVudHJlYXRpZXMuIEZvciBub25lIG9mIHlvdQogICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0aGlzIG1hbiB0byB0YWtlIHRoZSBtb25leSwgdG8gd2hpY2ggaGUgaGFkIG5vIHJpZ2h0LCBhZ2FpbnN0IHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzLCB3aGVuIGhlIGhhcyBhY3F1aXJlZCwgd2l0aCB5b3VyIGFzc2lzdGFuY2UsIG11Y2ggbW9yZSB0aGFuIGVub3VnaAogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMsIG5vciB0byBkZWZlbmQgaGltc2VsZiBub3cgd2hlbiB0aGUgY3JpbWVzIGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgYW5kIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIHByb3Bvc2VkIHRoZSBkZWF0aCBwZW5hbHR5IGZvciBoaW1zZWxmLiBCdXQgdGhlIGF2YXJpY2UgYW5kIHdpY2tlZG5lc3MsCiAgICAgICAgICAgICAgICAgICAgZm9zdGVyZWQgaW4gaGltIGJ5IGhpcyB3aG9sZSBtb2RlIG9mIGxpZmUsIGhhdmUgYnJvdWdodCB0aGlzIG9uIGhpcyBoZWFkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+U28gZG8gbm90IGJlIGNvbmNlcm5lZCB3aGVuIGhlIHdlZXBzIGFuZAogICAgICAgICAgICAgICAgICAgIGxhbWVudHMuIFlvdSBtaWdodCwgd2l0aCBmYXIgbW9yZSBqdXN0aWNlLCBwaXR5IHRoZSBjb3VudHJ5LCB3aGljaCB0aGlzIG1hbiBpcwogICAgICAgICAgICAgICAgICAgIGV4cG9zaW5nIHRvIGRhbmdlciBieSBiZWhhdmluZyBhcyBoZSBoYXMsIGFuZCB3aGljaCBpcyBiZWdnaW5nIHlvdSwgd2hvIGFyZSBpdHMKICAgICAgICAgICAgICAgICAgICBzb25zLCBpbiB0aGUgbmFtZXMgb2YgeW91ciB3aXZlcyBhbmQgY2hpbGRyZW4sIHRvIHRha2UgdmVuZ2VhbmNlIG9uIHRoZSB0cmFpdG9yCiAgICAgICAgICAgICAgICAgICAgYW5kIHNhdmUgaXQ6IHRoZSBsYW5kIHdoaWNoIHlvdXIgYW5jZXN0b3JzLCBhZnRlciBmYWNpbmcgbWFueSBub2JsZSBjb21iYXRzIGZvcgogICAgICAgICAgICAgICAgICAgIGl0LCBoYXZlIGhhbmRlZCBvbiB0byB5b3UgZnJlZSBpbiB3aGljaCBtYW55IG5vYmxlIGV4YW1wbGVzIGhhdmUgYmVlbiBsZWZ0IHVzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJhZ2Ugb2YgdGhvc2Ugd2hvIGdhdmUgdGhlaXIgbGl2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['1.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+SXQKICAgICAgICAgICAgICAgICAgICBpcyB0aGlzIGxhbmQsIEF0aGVuaWFucywgdGhlIHNhY3JpZmljZXMgdHJhZGl0aW9uYWwgaW4gaXQsIGFuZCBpdHMgYW5jZXN0cmFsCiAgICAgICAgICAgICAgICAgICAgc2VwdWxjaHJlcyB0byB3aGljaCByaWdodC10aGlua2luZyBtZW4gbXVzdCB0dXJuIHRoZWlyIHRob3VnaHRzIHdoZW4gdGhleSBnaXZlCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgdm90ZS4gQW5kIHdoZW4gRGVtb3N0aGVuZXMgd2lzaGVzIHRvIGNoZWF0IHlvdSBhbmQgY3VubmluZ2x5IHR1cm5zCiAgICAgICAgICAgICAgICAgICAgcGF0aGV0aWMsIHNoZWRkaW5nIHRlYXJzLCB5b3UgbXVzdCB0aGluayBvZiB0aGUgY2l0eSdzIHBlcnNvbiwgYW5kIHRoZSBnbG9yeQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGl0IG9uY2UgcG9zc2Vzc2VkLCBhbmQganVkZ2UgYmV0d2VlbiB0d28gYWx0ZXJuYXRpdmVzOiB3aGljaCBoYXMgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgZGVzZXJ2aW5nIG9mIHBpdHk6IHRoZSBjaXR5IGJlY2F1c2Ugb2YgRGVtb3N0aGVuZXMgb3IgRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG9mIHRoZSBjaXR5PyA8L3RyYW5zbGF0aW9uPg=="
translation['1.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+WW91IHdpbGwgZmluZCB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4gaGFzIGJlY29tZSBmYW1vdXMgc2luY2UgaGUgZW50ZXJlZCBwb2xpdGljczsgdGhhdCBmcm9tIGJlaW5nIGEgc3BlZWNod3JpdGVyCiAgICAgICAgICAgICAgICAgICAgYW5kIGEgcGFpZCBhZHZvY2F0ZSwgaW4gdGhlIHNlcnZpY2Ugb2YgQ3Rlc2lwcHVzLCBQaG9ybWlvIGFuZCBtYW55IG90aGVycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgd2FzIGFjdGluZyBpbiB0aGUgaW50ZXJlc3RzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEN0ZXNpcHB1cywgc29uIG9mIENoYWJyaWFzLCB3aGVuIGhlIGF0dGFja2VkIHRoZSBMYXcgb2YgTGVwdGluZXMgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNTUiPjM1NTwvZGF0ZT4gQi5DLiBUaGUgUGhvcm1pbyByZWZlcnJlZCB0byBpcyBwb3NzaWJseSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnJlZWRtYW4gb2YgdGhlIGJhbmtlciBQYXNpb24gd2hvbSBoZSBkZWZlbmRlZCBpbiAzNTAuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwIiB2YWxpZD0ieWVzIj5EZW0uIDIwPC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNiIgdmFsaWQ9InllcyI+RGVtLiAzNjwvYmlibD4uPC9ub3RlPiBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgdGhlIHJpY2hlc3QgbWFuIGluIDxkYXRlIGF1dGhuYW1lPSItMzU1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzU1Ij4zNTU8L2RhdGU+IEIuQy4gVGhlIFBob3JtaW8gcmVmZXJyZWQgdG8gaXMgcG9zc2libHkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVkbWFuIG9mIHRoZSBiYW5rZXIgUGFzaW9uIHdob20gaGUgZGVmZW5kZWQgaW4gMzUwLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMCIgdmFsaWQ9InllcyI+RGVtLiAyMDwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gMzY8L2JpYmw+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsKICAgICAgICAgICAgICAgICAgICB0aGF0IGFmdGVyIGJlaW5nIGFuIHVua25vd24gZmlndXJlLCBpbmhlcml0aW5nIG5vIGZhbWlseSBob25vciBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycywgaGUgaXMgbm93IGZhbW91cywgd2hpbGUgdGhlIGNpdHkgaGFzIHJlYWNoZWQgYSBwYXNzIHVud29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgaGVyc2VsZiBvciB0aGUgaG9ub3Igb2Ygb3VyIGZvcmJlYXJzLiBUaGVyZWZvcmUgaWdub3JlIHRoaXMgbWFuJ3MgZW50cmVhdGllcyBhbmQKICAgICAgICAgICAgICAgICAgICBkZWNlcHRpb25zLCBicmluZyBpbiB0aGUgdmVyZGljdCB0aGF0IGlzIGp1c3QgYW5kIHJpZ2h0LCBoYXZpbmcgcmVnYXJkIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSdzIGludGVyZXN0LCBhcyBiZWZpdHMgYW4gaG9ub3JhYmxlIGp1cnksIG5vdCB0aGUgd2VsZmFyZSBvZiBEZW1vc3RoZW5lcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['1.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZAogICAgICAgICAgICAgICAgICAgIHdoZW5ldmVyIGFueW9uZSBjb21lcyBmb3J3YXJkIHRvIHNwZWFrIGZvciBoaW0sIGJlYXIgaW4gbWluZCB0aGF0IGhlIHdobyBkb2VzCiAgICAgICAgICAgICAgICAgICAgc28sIGV2ZW4gaWYgbm90IGludm9sdmVkIGluIHRoZSByZXBvcnRzIHdlIGFyZSBhYm91dCB0byBoZWFyLCBpcyBob3N0aWxlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiwgdW53aWxsaW5nIHRvIHNlZSBwdW5pc2hlZCB0aG9zZSB3aG8gdGFrZSBicmliZXMgYWdhaW5zdCB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgYW5kIGFueGlvdXMgdGhhdCB0aGUgZ2VuZXJhbCBwcm90ZWN0aW9uIG9mIHlvdXIgcGVyc29ucywgZm9yIHdoaWNoIHRoZSBBcmVvcGFndXMKICAgICAgICAgICAgICAgICAgICBpcyByZXNwb25zaWJsZSwgc2hvdWxkIGJlIGFib2xpc2hlZCBhbmQgZXZlcnkgcmlnaHQgaW4gdGhlIGNpdHkgb3ZlcndoZWxtZWQ7CiAgICAgICAgICAgICAgICAgICAgd2hlcmVhcywgaWYgaXQgaXMgc29tZSBvcmF0b3Igb3IgZ2VuZXJhbCwgb25lIG9mIHRob3NlIHBhcnRpY2lwYXRpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSBiZWNhdXNlIHRoZXkgd2lzaCB0byBkaXNjcmVkaXQgdGhlIHJlcG9ydCwgd2hpY2ggdGhleSBleHBlY3Qgd2lsbAogICAgICAgICAgICAgICAgICAgIHJlZmxlY3QgYWdhaW5zdCB0aGVtc2VsdmVzLCB5b3UgbXVzdCBnaXZlIHRoZWlyIGFyZ3VtZW50cyBubyBjcmVkZW5jZSwga25vd2luZwogICAgICAgICAgICAgICAgICAgIGFzIHlvdSBkbyB0aGF0IGFsbCB0aGVzZSBtZW4gY29sbGFib3JhdGVkIG92ZXIgdGhlIGxhbmRpbmcgb2YgSGFycGFsdXMgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UuIDwvdHJhbnNsYXRpb24+"
translation['1.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG11c3QgcmVhbGl6ZSB0aGVuLCBBdGhlbmlhbnMsCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3aGVuIHRoZXNlIG1lbiBjb21lIGZvcndhcmQsIHRoZXkgZG8gc28gYWdhaW5zdCB5b3VyIGludGVyZXN0cywgYmVpbmcKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIGFsaWtlIG9mIHRoZSBsYXdzIGFuZCB0aGUgZW50aXJlIGNpdHkuIERvIG5vdCB0b2xlcmF0ZSB0aGVtOyBpbnNpc3QgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRlZmVuY2UgYW5zd2VycyB0aGUgY2hhcmdlcy4gQW5kIGRvIG5vdCBjb3VudGVuYW5jZSBoaXMgb3duIGZ1cnkgZWl0aGVyOwogICAgICAgICAgICAgICAgICAgIGZvciBoZSBwcmlkZXMgaGltc2VsZiBvbiBoaXMgcG93ZXJzIGFzIGFuIG9yYXRvciBhbmQsIHNpbmNlIGhlIGlzIGtub3duIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBicmliZXMgYWdhaW5zdCB5b3UsIGhhcyBiZWVuIHByb3ZlZCBhbiBldmVuIGdyZWF0ZXIgZnJhdWQuIE5vLCBwdW5pc2ggaGltCiAgICAgICAgICAgICAgICAgICAgaW4gYSBtYW5uZXIgYmVmaXR0aW5nIHlvdXJzZWx2ZXMgYW5kIHRoZSBjaXR5LiBJZiB5b3UgZG8gbm90LCBieSBvbmUgdmVyZGljdCBhbmQKICAgICAgICAgICAgICAgICAgICBhdCBvbmUgdHJpYWwgeW91IHdpbGwgcmVsZWFzZSBhbGwgd2hvIGhhdmUgYmVlbiByZXBvcnRlZCwgYW5kIGFsbCB3aG8gZXZlciB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUsIGFuZCB3aWxsIGJyaW5nIHRoZXNlIG1lbidzIGNvcnJ1cHRpb24gdXBvbiB5b3Vyc2VsdmVzIGFuZCB1cG9uIHRoZSBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgZXZlbiB0aG91Z2gsIGFmdGVyd2FyZHMsIHlvdSBtYXkgcHJvc2VjdXRlIHRob3NlIHdobyBhY3F1aXR0ZWQgdGhlbSwgd2hlbiBpdAogICAgICAgICAgICAgICAgICAgIHdpbGwgYXZhaWwgeW91IG5vdGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['1.114'] = ""
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBpcwogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcsIGl0IGFwcGVhcnMsIEF0aGVuaWFucywgd2hpY2ggd2UgbXVzdCBub3QgZXhwZWN0IGVpdGhlciB0byBoZWFyIG9yIHNlZQogICAgICAgICAgICAgICAgICAgIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgcmVwb3J0cyB3aGljaCBoYXZlIGJlZW4gbWFkZTsgYnV0IHRoZSBtb3N0IHJlbWFya2FibGUKICAgICAgICAgICAgICAgICAgICBmYWN0IG9mIGFsbCwgaW4gbXkgb3BpbmlvbiwgY29uZnJvbnRzIHVzIG5vdy4gVGhlIHdvcnN0IGNoYXJhY3RlciBpbiB0aGUgY2l0eSwgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzYXkgaW4gdGhlIHdob2xlIHdvcmxkLCBBcmlzdG9naXRvbiwgaGFzIGNvbWUgdG8gcGl0IGhpbXNlbGYgaW4gbGF3CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgQXJlb3BhZ3VzIG9uIHRoZSBzdWJqZWN0IG9mIHRydXRoIGFuZCBqdXN0aWNlOyBhbmQgdGhlIGNvdW5jaWwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXMgbWFkZSB0aGUgcmVwb3J0IGlzIG5vdyBpbiBncmVhdGVyIGRhbmdlciB0aGFuIHRoaXMgbWFuIHdobyB0YWtlcyBicmliZXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdSBhbmQgd2hvIHNvbGQgZm9yIHR3ZW50eSBtaW5hcyB0aGUgcmlnaHQgb2YgZnJlZSBzcGVlY2ggaW4gdGhlIGNhdXNlCiAgICAgICAgICAgICAgICAgICAgb2YganVzdGljZS4gPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdpbGwgYmUgbm8gbmV3IG9yIGFsYXJtaW5nCiAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZSBmb3IgdGhlIGRlZmVuZGFudCBpZiBoZSBpcyBjb252aWN0ZWQsIGZvciBoZSBoYXMgY29tbWl0dGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHBhc3QgbWFueSBvdGhlciBjcmltZXMgbWVyaXRpbmcgdGhlIGRlYXRoIHBlbmFsdHkgYW5kIGhhcyBzcGVudCBtb3JlIHRpbWUgaW4KICAgICAgICAgICAgICAgICAgICBwcmlzb24gdGhhbiBvdXQgb2YgaXQuIFdoaWxlIGhlIGhhcyBiZWVuIGluIGRlYnQgdG8gdGhlIHN0YXRlIGhlIGhhcyBwcm9zZWN1dGVkCiAgICAgICAgICAgICAgICAgICAgbWVuIHdpdGggY2l0aXplbiByaWdodHMsIHRob3VnaCBub3QgZW50aXRsZWQgdG8gZG8gc28sIGFuZCBoYXMgY29tbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgbnVtZXJvdXMgb3RoZXIgb2ZmZW5jZXMgb2Ygd2hpY2ggeW91IGhhdmUgYSBtb3JlIGV4YWN0IGtub3dsZWRnZSB0aGFuIEkuIEl0IGlzIGEKICAgICAgICAgICAgICAgICAgICBtb3N0IHNoYW1lZnVsIGFuZCBtb25zdHJvdXMgdGhpbmcgZm9yIHRoaXMgY291bmNpbCB0byBiZSBzdXNwZWN0ZWQgb2YgbWFraW5nIGEKICAgICAgICAgICAgICAgICAgICBmYWxzZSByZXBvcnQgYWdhaW5zdCBBcmlzdG9naXRvbiBhbmQgZm9yIGhpbSB0byBiZSBjb25zaWRlcmVkIGFtb25nIHlvdSBhcwogICAgICAgICAgICAgICAgICAgIGhhdmluZyBtb3JlIGp1c3RpY2Ugb24gaGlzIHNpZGUgdGhhbiBpdCBoYXMuIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgQXRoZW5pYW5zLCB0aGlua2luZyB0aGF0IHRoZSB0cmlhbCBob2xkcyBubyBkYW5nZXJzIGZvciBoaW0sCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtYW4gaXMgY29taW5nIGZvcndhcmQsIEkgYmVsaWV2ZSwgdG8gdGVzdCB5b3VyIGF0dGl0dWRlLiBIZSBoYXMgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICB1bmRlcmdvbmUgYWxsIHNvcnRzIG9mIHN1ZmZlcmluZyBzaG9ydCBvZiBkZWF0aCwgd2hpY2gsIGlmIEdvZCBzbyB3aWxscyBpdCBhbmQKICAgICAgICAgICAgICAgICAgICB5b3UgYXJlIHdpc2UsIGhlIHdpbGwgdW5kZXJnbyB0b2RheS4gRm9yIHlvdSBtdXN0IGFzc3VtZSwgYnkgSGVyYWNsZXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3aWxsIGJlIG5vIGltcHJvdmVtZW50IGluIGhpbSBpZiBoZSBpcyBwYXJkb25lZCBieSB5b3Ugbm93LCBhbmQgdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIGZ1dHVyZSBoZSB3aWxsIG5vdCBhYnN0YWluIGZyb20gdGFraW5nIGJyaWJlcyBhZ2FpbnN0IHlvdSBpZiB5b3Ugbm93IGFjcXVpdCBoaW0uCiAgICAgICAgICAgICAgICAgICAgRm9yIHdoZW4gd2lja2VkbmVzcyBpcyBpbiBpdHMgaW5mYW5jeSBwZXJoYXBzIGl0IGNhbiBiZSBjaGVja2VkIGJ5IHB1bmlzaG1lbnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHdoZW4gaXQgaGFzIGdyb3duIG9sZCBhbmQgaGFzIHNhbXBsZWQgdGhlIHVzdWFsIHBlbmFsdGllcywgaXQgaXMgc2FpZCB0byBiZQogICAgICAgICAgICAgICAgICAgIGluY3VyYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmIHRoZXJlZm9yZSB5b3Ugd2lzaCBkZXByYXZpdHkgdG8KICAgICAgICAgICAgICAgICAgICBncm93IHVwIGluZ3JhaW5lZCBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBwcmVzZXJ2ZSBBcmlzdG9naXRvbiBhbmQgYWxsb3cgaGltIHRvIGFjdCB0aGVyZSBhcyBoZSBwbGVhc2VzLiBCdXQgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGF0ZSB0aGUgd2lja2VkIGFuZCBhY2N1cnNlZCBhbmQgY2FuIHJlY2FsbCB3aXRoIHJlc2VudG1lbnQgd2hhdCB0aGlzIG1hbiBoYXMKICAgICAgICAgICAgICAgICAgICBkb25lIGluIHRoZSBwYXN0LCBraWxsIGhpbSwgZm9yIGhlIGRhcmVkIHRvIHRha2UgbW9uZXkgZnJvbSBIYXJwYWx1cywgd2hvIGhlCiAgICAgICAgICAgICAgICAgICAga25ldyB3YXMgY29taW5nIHRvIHNlaXplIHlvdXIgY2l0eS4gQ3V0IHNob3J0IGhpcyBleGN1c2VzIGFuZCBkZWNlcHRpdmUKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMsIG9uIHdoaWNoIGhlIG5vdyBkZXBlbmRzIHdoZW4gaGUgYXBwZWFycyBiZWZvcmUgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EbyB5b3UgcmVhbGl6ZSB0aGF0LCBhd2t3YXJkCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHRoZSBhcnJpdmFsIG9mIEhhcnBhbHVzIHdhcywgaXQgaGFzIGJlZW4gYW4gYWR2YW50YWdlIHRvIHRoZSBjaXR5IGluIG9uZQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QsIGJlY2F1c2UgaXQgaGFzIGdpdmVuIHlvdSBhIHN1cmUgbWVhbnMgb2YgdGVzdGluZyB0aG9zZSB3aG8gZ2l2ZSB1cAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgdG8gdGhlIGVuZW1pZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgZm9yIGEgcGF5bWVudCBvZiBzaWx2ZXIgb3IgZ29sZD8gRG8gbm90IGJlIGxheCwgQXRoZW5pYW5zLCBvciB3ZWFyeSBvZiBwdW5pc2hpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgZ3VpbHR5OyBwdXJnZSB0aGUgY2l0eSBvZiBicmliZXJ5IHRvIHRoZSB1dG1vc3Qgb2YgeW91ciBhYmlsaXR5LiBEbyBub3QgYXNrCiAgICAgICAgICAgICAgICAgICAgZm9yIGFyZ3VtZW50cyBmcm9tIG1lIHdoZW4geW91IHNlZSB0aGF0IHRoZSBjcmltZXMgaGF2ZSBiZWVuIHBsYWlubHkgYXR0cmlidXRlZAogICAgICAgICAgICAgICAgICAgIHRvIHRob3NlIHdob20gdGhlIGNvdW5jaWwgaGFzIHJlcG9ydGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPltPciBvdWdodCB5b3UgdG8gc3BhcmUgdGhlIGRlZmVuZGFudCBvbiBhY2NvdW50IG9mIGhpcyBhbmNlc3RyeSBhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgbW9kZXJhdGlvbiwgb3IgYmVjYXVzZSBoZSBoYXMgZG9uZSB5b3UgbWFueSBwdWJsaWMgYW5kIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXM/XTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHNlbnRlbmNlIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlZCBmcm9tIHRoZSB0ZXh0IGJ5IEJla2tlci4gSXQgaXMgb3V0IG9mIHBsYWNlIGluIHRoZSBhcmd1bWVudCBoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBpdHMgc3Vic3RhbmNlIGlzIGdpdmVuIGF0IHRoZSBiZWdpbm5pbmcgb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAyLjgiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuODwvYmlibD4uPC9ub3RlPiBXaGF0IGluZm9ybWF0aW9uIGRvIHlvdSBsYWNrIHRoYXQgbWFrZXMgeW91IGFzayBmb3IKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgYWdhaW5zdCB0aGUgZGVmZW5kYW50IGhlcmUgYmVmb3JlIHlvdT8gV2hhdCBpZiB3ZSwgdGhlIGFjY3VzZXJzLCBhbGwKICAgICAgICAgICAgICAgICAgICB0ZW4gb2YgdXMsIHVzZSB1cCBhbGwgdGhlIHdhdGVyIGluIG91ciBjbG9ja3MgYW5kIHByb2NsYWltIHRoYXQgaXQgaXMgYSB0ZXJyaWJsZQogICAgICAgICAgICAgICAgICAgIHRoaW5nIHRvIHJlbGVhc2UgbWVuIHdobyBoYXZlIGJlZW4gY2F1Z2h0IHdpdGggYnJpYmVzIGFnYWluc3QgdGhlIGNpdHkgaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGhhbmRzOyB3aWxsIHRoYXQgbWFrZSB0aGUgY291bmNpbCdzIHJlcG9ydCBhZ2FpbnN0IEFyaXN0b2dpdG9uIHRydWUgYW5kCiAgICAgICAgICAgICAgICAgICAganVzdD8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAyLjgiIHZhbGlkPSJ5ZXMiPkRpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuODwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['2.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk9yIHN1cHBvc2UgdGhhdCBlYWNoIG9mIHVzIGFzc3VtZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBhcmUganVzdCBhcyB3ZWxsIGF3YXJlIGFzIHdlIG9uIHdoaWNoIHNpZGUganVzdGljZSBsaWVzIGluIHRoZSBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgdHJpYWxzLCBhbmQgc28gbGVhdmVzIHRoZSBwbGF0Zm9ybSBhZnRlciBhIHNob3J0IHNwZWVjaDsgd2lsbCB0aGUgcmVwb3J0IHRoZW4gYmUKICAgICAgICAgICAgICAgICAgICBhIGZhbHNlIG9uZSwgdW5qdXN0bHkgbWFkZSBieSB0aGUgQXJlb3BhZ2l0ZXM/IE9yIGRvbid0IHlvdSByZWFsaXplIHRoYXQgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIGJyaWJlcyBpbiBvcmRlciB0byBiZXRyYXkgdGhlIGNpdHkncyBpbnRlcmVzdHMgaXMgb25lIG9mIHRoZSBncmVhdGVzdCBjcmltZXMKICAgICAgICAgICAgICAgICAgICBjYXVzaW5nIHRoZSBtb3N0IGlycmVwYXJhYmxlIGhhcm0gdG8gY2l0aWVzPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5ObyBkb3VidCBJIHNoYWxsIGJlIHRvbGQgdGhhdCB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgaXMgaGltc2VsZiBhIG1hbiBvZiBzb2JlciBjaGFyYWN0ZXIgY29taW5nIG9mIGEgZ29vZCBmYW1pbHksIHRoYXQgaGUgaGFzIGRvbmUKICAgICAgICAgICAgICAgICAgICB5b3UgbWFueSBub2JsZSBzZXJ2aWNlcyBpbiBwcml2YXRlIGFuZCBpbiBwdWJsaWMgbGlmZSBhbmQgdGhhdCB0aGVyZWZvcmUgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGp1c3RpZmllZCBpbiBzcGFyaW5nIGhpbS4gWW91IG11c3QgYWxsIGhhdmUgb2Z0ZW4gaGVhcmQgdGhhdCwgd2hlbiBBcmlzdG9naXRvbidzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIEN5ZGltYWNodXMgd2FzIGNvbmRlbW5lZCB0byBkZWF0aCBhbmQgZmxlZCBmcm9tIHRoZSBjaXR5LCB0aGlzIGFkbWlyYWJsZQogICAgICAgICAgICAgICAgICAgIHNvbiBhbGxvd2VkIGhpcyBvd24gZmF0aGVyIHRvIGxhY2sgdGhlIGJhcmUgbmVjZXNzaXRpZXMgb2YgbGlmZSwgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICBzdXJ2aXZlZCwgYW5kIGRvIHdpdGhvdXQgYSBwcm9wZXIgYnVyaWFsIHdoZW4gaGUgZGllZDogYSBmYWN0IGZvciB3aGljaCBldmlkZW5jZQogICAgICAgICAgICAgICAgICAgIHdhcyBvZnRlbiBicm91Z2h0IGFnYWluc3QgaGltOyA8L3RyYW5zbGF0aW9uPg=="
translation['2.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPm9yIGFnYWluLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbiBoaW1zZWxmLCBvbiBiZWluZyB0YWtlbiB0byBwcmlzb24gZm9yIHRoZSBmaXJzdCB0aW1lLOKAlG5vIGRvdWJ0CiAgICAgICAgICAgICAgICAgICAgeW91IHJlYWxpemUgdGhhdCBoZSBoYXMgb2Z0ZW4gYmVlbiBpbXByaXNvbmVk4oCUZGFyZWQgdG8gYmVoYXZlIGluIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIHdheSB0aGVyZSB0aGF0IHRoZSBpbm1hdGVzIHZvdGVkIHRoYXQgbm8gb25lIHNob3VsZCBlaXRoZXIgbGlnaHQgYSBmaXJlIGZvcgogICAgICAgICAgICAgICAgICAgIGhpbSBvciBzaXQgYXQgbWVhbHMgb3Igc2hhcmUgdGhlIHVzdWFsIHNhY3JpZmljZXMgd2l0aCBoaW0uIFJlZmxlY3QsIEF0aGVuaWFuczsKICAgICAgICAgICAgICAgICAgICB3aGF0IHNvcnQgb2YgY2hhcmFjdGVyIG11c3Qgd2Ugc3VwcG9zZSB0aGlzIG1hbiB0byBoYXZlLCB3aG8gd2FzIHRocm93biBpbnRvCiAgICAgICAgICAgICAgICAgICAgcHJpc29uIGZvciBjcmltaW5hbCBjb25kdWN0IDwvdHJhbnNsYXRpb24+"
translation['2.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVyZSwgYW1vbmcgdGhvc2Ugd2hvIGhhZCBiZWVuIHNlZ3JlZ2F0ZWQgZnJvbSB0aGUgcmVzdCBvZiB0aGUgd29ybGQgYXMgZmVsb25zLAogICAgICAgICAgICAgICAgICAgIHdhcyBsb29rZWQgdXBvbiBhcyBzbyBkZWJhc2VkIHRoYXQgZXZlbiB0aGVyZSBoZSB3YXMgbm90IHRob3VnaHQgd29ydGh5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdHJlYXRtZW50IGFzIHRoZSByZXN0PyBJdCBpcyBzYWlkLCBpbiBmYWN0LCB0aGF0IGhlIHdhcyBjYXVnaHQgdGhpZXZpbmcKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGVtIGFuZCB0aGF0LCBpZiB0aGVyZSBoYWQgYmVlbiBhbnkgb3RoZXIgcGxhY2UgbW9yZSBkZWdyYWRlZCB3aGVyZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgY291bGQgaGF2ZSBpc29sYXRlZCBtZW4gd2hvIHN0b2xlIGluIHByaXNvbiwgdGhpcyBtb25zdGVyIHdvdWxkIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3RlZCB0aGVyZS4gVGhlc2UgZmFjdHMsIGFzIEkgc2FpZCBqdXN0IG5vdywgd2VyZSBlc3RhYmxpc2hlZCBieSBldmlkZW5jZQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgQXJpc3RvZ2l0b24sIGFzIGlzIHdlbGwga25vd24sIHdoZW4gdGhlIGxvdCBmZWxsIHRvIGhpbSB0byBiZSBjdXN0b2RpYW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZXhjaGFuZ2UgYnV0IGhlIHdhcyByZWplY3RlZCBieSB0aG9zZSB3aG8gdGhlbiBkZWNpZGVkIHRoZSBhcHBvaW50bWVudCB0bwogICAgICAgICAgICAgICAgICAgIHRoYXQgb2ZmaWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgY3VzdG9kaWFucyBvZiB0aGUgZXhjaGFuZ2Ugd2VyZQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3Igc2VlaW5nIHRoYXQgdGhlIGxhd3MgZ292ZXJuaW5nIGltcG9ydCBhbmQgZXhwb3J0IHRyYWRlIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQuIExpa2UgbW9zdCBtYWdpc3RyYXRlcywgdGhleSB3ZXJlIGFwcG9pbnRlZCBieSBsb3QgYnV0IHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkIHRvIGFuIGV4YW1pbmF0aW9uIGluIGNvdXJ0IO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zr/Ous65zrzOsc+D4b23zrE8L2ZvcmVpZ24+77yJIGJlZm9yZSB0YWtpbmcgb2ZmaWNlIGFuZCBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3RlZCBpZiB1bnN1aXRhYmxlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM6/zrrOuc68zrHPg+G9t86xPC9mb3JlaWduPu+8iSBiZWZvcmUgdGFraW5nIG9mZmljZSBhbmQgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0ZWQgaWYgdW5zdWl0YWJsZS48L3RyYW5zbGF0aW9uPg=="
translation['2.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3UgdGhlbiBmZWlnbiBpZ25vcmFuY2UgYW1vbmcgeW91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIGFuZCBnaXZlIHdheSB0byBwaXR5IHdoZW4gdGhlIG1hbiBjb25jZXJuaW5nIHdob20geW91IGFyZSBhYm91dCB0byB2b3RlIGlzCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvZ2l0b24sIHdobyBkaWQgbm90IHBpdHkgaGlzIG93biBmYXRoZXIgd2hlbiByZWR1Y2VkIHRvIHN0YXJ2YXRpb24/IERvIHlvdQogICAgICAgICAgICAgICAgICAgIHN0aWxsIHdpc2ggdG8gaGVhciB1cyB0YWxrIGFib3V0IHRoZSBkYW1hZ2VzIGhlIG11c3QgcGF5LCB3aGVuIHlvdSBrbm93IHF1aXRlCiAgICAgICAgICAgICAgICAgICAgd2VsbCB0aGF0IGhpcyB3aG9sZSBsaWZlLCBhcyB3ZWxsIGFzIGhpcyByZWNlbnQgY29uZHVjdCwganVzdGlmaWVzIHRoZSBleHRyZW1lCiAgICAgICAgICAgICAgICAgICAgcGVuYWx0eT8gPC90cmFuc2xhdGlvbj4="
translation['2.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XYXMgaXQgbm90IEFyaXN0b2dpdG9uLCBBdGhlbmlhbnMsCiAgICAgICAgICAgICAgICAgICAgd2hvIG1hZGUgaW4gd3JpdGluZyBzdWNoIGx5aW5nIGFzc2VydGlvbnMgYWJvdXQgdGhlIHByaWVzdGVzcyBvZiBBcnRlbWlzCiAgICAgICAgICAgICAgICAgICAgICAgIEJyYXVyb25pYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgc2hyaW5lIG9mIEFydGVtaXMgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJhdXJvbiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJhdXJvbiI+QnJhdXJvbjwvcGxhY2VOYW1lPiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gd2FzIHN1cHBvc2VkIHRvIGNvbnRhaW4gdGhlIGltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBnb2RkZXNzIGJyb3VnaHQgZnJvbSB0aGUgVGF1cmkgYnkgSXBoaWdlbmlhLiBUaGVyZSB3YXMgYWxzbyBhIHRlbXBsZQogICAgICAgICAgICAgICAgICAgICAgICBvZiBBcnRlbWlzIEJyYXVyb25pYSwgY2FsbGVkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+E4b24IOG8sc61z4HhvbjOvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgzrrPhc69zrfOs+G9s8+DzrnOv869PC9mb3JlaWduPiwgb24gdGhlIEFjcm9wb2xpcyDvvIggY2YuIGFyZy4gYWQKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZW0gMjUuOyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjIzLjciIHZhbGlkPSJ5ZXMiPlBhdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDEuMjMuNzwvYmlibD7vvIkuPC9ub3RlPmFuZCBoZXIgcmVsYXRpdmVzLCB0aGF0IHdoZW4geW91IGRpc2NvdmVyZWQKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGggZnJvbSBoaXMgYWNjdXNlcnMsIHlvdSBmaW5lZCBoaW0gZml2ZSB0YWxlbnRzLCBhIHN1bSBlcXVhbCB0byB0aGUgZmluZQogICAgICAgICAgICAgICAgICAgIHNldCBkb3duIGluIGFuIGluZGljdG1lbnQgZm9yIGlsbGVnYWwgcHJvcG9zYWxzPyBIYXMgaGUgbm90IHBlcnNpc3RlZCBpbgogICAgICAgICAgICAgICAgICAgIG1hbGlnbmluZyBldmVyeSBvbmUgb2YgeW91IGhlIG1lZXRzLCB0aG91Z2ggaGUgaGFzIG5vdCB5ZXQgcGFpZCB1cCwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgYW5kIHByb3Bvc2luZyBtZWFzdXJlcyBpbiB0aGUgQXNzZW1ibHksIHJlZ2FyZGxlc3Mgb2YgYWxsIHRoZSBwZW5hbHRpZXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHdyb25nZG9lcnMgd2hpY2ggdGhlIGxhd3MgcHJlc2NyaWJlPyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJyYXVyb24iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJyYXVyb24iPkJyYXVyb248L3BsYWNlTmFtZT4gaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IHdhcyBzdXBwb3NlZCB0byBjb250YWluIHRoZSBpbWFnZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ29kZGVzcyBicm91Z2h0IGZyb20gdGhlIFRhdXJpIGJ5IElwaGlnZW5pYS4gVGhlcmUgd2FzIGFsc28gYSB0ZW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgQXJ0ZW1pcyBCcmF1cm9uaWEsIGNhbGxlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhOG9uCDhvLHOtc+B4b24zr0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIM66z4XOvc63zrPhvbPPg865zr/OvTwvZm9yZWlnbj4sIG9uIHRoZSBBY3JvcG9saXMg77yIIGNmLiBhcmcuIGFkCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVtIDI1LjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMS4yMy43IiB2YWxpZD0ieWVzIj5QYXVzLgogICAgICAgICAgICAgICAgICAgICAgICAxLjIzLjc8L2JpYmw+77yJLjwvdHJhbnNsYXRpb24+"
translation['2.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgd2hlbiBhbiBpbmZvcm1hdGlvbiB3YXMgbG9kZ2VkIGFnYWluc3QgaGltIGJ5IEx5Y3VyZ3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTHljLiBGci4gMTMiPkx5Yy4gZnJhZy4gMTM8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBub3RlLjwvbm90ZT5hbmQgaGUgd2FzIGNvbnZpY3RlZCwgYSBkZWJ0b3IgdG8gdGhlIHN0YXRlIHdpdGhvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgdG8gc3BlYWsgaW4gcHVibGljLCB3aGVuIGhlIGhhZCBiZWVuIGhhbmRlZCBvdmVyIHRvIHRoZSBFbGV2ZW4gaW4KICAgICAgICAgICAgICAgICAgICBhY2NvcmRhbmNlIHdpdGggdGhlIGxhd3MsICZsdDt3YXMgaGUgbm90IHNlZW4mZ3Q7PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTHljLiBGci4gMTMiPkx5Yy4gZnJhZy4gMTM8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBub3RlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj4gUmVpc2tlJ3MgZW1lbmRhdGlvbiBpcyBmb2xsb3dlZCBoZXJlLjwvbm90ZT53YWxraW5nIGFib3V0IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGZyb250IG9mIHRoZSBsYXdjb3VydHMsIGFuZCB1c2VkIGhlIG5vdCB0byBzaXQgb24gdGhlIHNlYXQgb2YgdGhlIFByeXRhbmVzPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgaWYgYSBtYW4gaGFzIG9mdGVuIGJlZW4gY29tbWl0dGVkIHRvIHlvdSBsYXdmdWxseSBmb3IgcHVuaXNobWVudCwKICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQgb24gaW5mb3JtYXRpb24gbG9kZ2VkIGJ5IGNpdGl6ZW5zLCBpZiBuZWl0aGVyIHRoZSBFbGV2ZW4gbm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHByaXNvbiBoYXZlIGJlZW4gYWJsZSB0byByZXN0cmFpbiBoaW0sIHdpbGwgeW91IHdhbnQgdG8gdXNlIGhpbSBhcyBhIGNvdW5zZWxsb3I/CiAgICAgICAgICAgICAgICAgICAgVGhlIGxhdyBkZW1hbmRzIHRoYXQgdGhlIGhlcmFsZCBzaGFsbCBmaXJzdCBwcmF5LCBhbWlkIGRlYWQgc2lsZW5jZSwgYmVmb3JlIGhlCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVycyB0byB5b3UgdGhlIHRhc2sgb2YgZGVsaWJlcmF0aW5nIG9uIHB1YmxpYyBhZmZhaXJzLiBXaWxsIHlvdSB0aGVuCiAgICAgICAgICAgICAgICAgICAgYWxsb3cgYW4gaW1waW91cyB3cmV0Y2gsIHdobyBoYXMgcHJvdmVkIHdpY2tlZCBpbiBoaXMgZGVhbGluZ3Mgd2l0aCBldmVyeW9uZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gcGFydGljdWxhciBoaXMgb3duIGZhdGhlciwgdG8gc2hhcmUgaW4gY2l0aXplbnNoaXAgd2l0aCB5b3UsIHdpdGggeW91cgogICAgICAgICAgICAgICAgICAgIGZhbWlsaWVzIGFuZCBraW5zbWVuPyA8L3RyYW5zbGF0aW9uPg=="
translation['2.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciByZWplY3RpbmcgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCBvZiBwYXJkb24gZm9yIERlbWFkZXMgYW5kIERlbW9zdGhlbmVzLCBiZWNhdXNlIHRoZXkgd2VyZSBwcm92ZWQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gdGFraW5nIGJyaWJlcyBhZ2FpbnN0IHlvdSwgYW5kIHB1bmlzaGluZyB0aGVtLOKAlHF1aXRlIHJpZ2h0bHksCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHlvdSBrbmV3IHRoYXQgdGhleSBoYWQgc2VydmVkIHlvdSBkdXJpbmcgdGhlaXIgYWRtaW5pc3RyYXRpb24sIGNlcnRhaW5seQogICAgICAgICAgICAgICAgICAgIGluIG1hbnkgcmVzcGVjdHMgaWYgbm90IGluIGV2ZXJ5dGhpbmcs4oCUd2lsbCB5b3UgYWNxdWl0IHRoaXMgYWNjdXJzZWQKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIGhhcyBub3QgZG9uZSB5b3UgYSBzZXJ2aWNlIGV2ZXIgc2luY2UgaGUgaGFzIGJlZW4gaW4gcG9saXRpY3MgYnV0IGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gdGhlIGdyZWF0ZXN0IHBvc3NpYmxlIG1lbmFjZT8gV291bGQgbm90IGV2ZXJ5b25lIHJlcHJvYWNoIHlvdSBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBhY2NlcHRlZCBzdWNoIGEgcGVyc29uIGFzIHlvdXIgYWR2aXNlcj8gRm9yIHdoZW4geW91IGFyZSBhZGRyZXNzZWQgYnkgYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG9zZSB3aWNrZWRuZXNzIGlzIGJvdGggbm90b3Jpb3VzIGFuZCB1bmRlbmlhYmxlIGFuZCBhIGJ5d29yZCBhbW9uZyBhbGwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIHRoZSBieXN0YW5kZXJzIHdpbGwgd29uZGVyIHdoZXRoZXIgeW91IHdobyBsaXN0ZW4gdG8gaGltIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgYWR2aXNlcnMgb3Igd2hldGhlciB5b3UgZW5qb3kgaGVhcmluZyBzdWNoIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['2.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5MaWtlIHRoZSBlYXJseSBsYXdnaXZlcnMsIEF0aGVuaWFucywgd2hvIG1hZGUgbGF3cyB0byBkZWFsCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aG9zZSBhZGRyZXNzaW5nIHlvdXIgYW5jZXN0b3JzIGluIHRoZSBBc3NlbWJseSwgeW91IHRvbyBzaG91bGQgdHJ5LCBieQogICAgICAgICAgICAgICAgICAgIHlvdXIgYmVoYXZpb3IgYXMgbGlzdGVuZXJzLCB0byBtYWtlIHRoZSBzcGVha2VycyB3aG8gY29tZSBiZWZvcmUgeW91IGJldHRlci4KICAgICAgICAgICAgICAgICAgICBXaGF0IHdhcyB0aGUgYXR0aXR1ZGUgb2YgdGhlIGxhd2dpdmVycyB0byB0aGVzZSBtZW4/IEluIHRoZSBmaXJzdCBwbGFjZSwgYXQKICAgICAgICAgICAgICAgICAgICBldmVyeSBzaXR0aW5nIG9mIHRoZSBBc3NlbWJseSB0aGV5IHB1YmxpY2x5IHByb2NsYWltZWQgY3Vyc2VzIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB3cm9uZ2RvZXJzLCBjYWxsaW5nIGRvd24gZGVzdHJ1Y3Rpb24gb24gYW55IHdobywgYWZ0ZXIgYWNjZXB0aW5nIGJyaWJlcywgbWFkZQogICAgICAgICAgICAgICAgICAgIHNwZWVjaGVzIG9yIHByb3Bvc2FscyB1cG9uIHN0YXRlIGFmZmFpcnMsIGFuZCB0byB0aGF0IGNsYXNzIEFyaXN0b2dpdG9uIG5vdwogICAgICAgICAgICAgICAgICAgIGJlbG9uZ3MuIDwvdHJhbnNsYXRpb24+"
translation['2.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5TZWNvbmRseSwgdGhleSBwcm92aWRlZCBpbiB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGZvciBpbmRpY3RtZW50cyBmb3IgYnJpYmVyeSwgYW5kIHRoaXMgaXMgdGhlIG9ubHkgb2ZmZW5jZSBmb3Igd2hpY2ggdGhleSBpbXBvc2VkCiAgICAgICAgICAgICAgICAgICAgYSBwYXltZW50IGVxdWFsIHRvIHRlbiB0aW1lcyB0aGUgYXNzZXNzbWVudCBvZiBkYW1hZ2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DZi4gbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuNjAiIHZhbGlkPSJ5ZXMiPkRpbi4gMS42MDwvYmlibD4uIEFyaXN0b3RsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDU0IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBDb25zdC4gQXRoLgogICAgICAgICAgICAgICAgICAgICAgICA1NDwvYmlibD7vvIkgc3RhdGVzIHRoYXQgdGhlZnQgd2FzIHB1bmlzaGVkIGluIHRoZSBzYW1lIHdheS48L25vdGU+aW4KICAgICAgICAgICAgICAgICAgICB0aGUgYmVsaWVmIHRoYXQgb25lIHdobyBpcyByZWFkeSB0byBiZSBwYWlkIGZvciB0aGUgb3BpbmlvbnMgd2hpY2ggaGUgaXMgZ29pbmcKICAgICAgICAgICAgICAgICAgICB0byBleHByZXNzIGluIHRoZSBBc3NlbWJseSBoYXMgYXQgaGVhcnQsIHdoZW4gaGUgaXMgc3BlYWtpbmcsIG5vdCB0aGUgaW50ZXJlc3RzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHBlb3BsZSBidXQgdGhlIHdlbGZhcmUgb2YgdGhvc2Ugd2hvIGhhdmUgcGFpZCBoaW0uIE5vdyB0aGUgY291bmNpbCBoYXMKICAgICAgICAgICAgICAgICAgICByZXBvcnRlZCBBcmlzdG9naXRvbiBhcyBndWlsdHkgb2YgdGhpcy4gTW9yZW92ZXIsIHdoZW4gY2hvb3NpbmcgYSBtYW4gZm9yIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIG9mZmljZSB0aGV5IHVzZWQgdG8gYXNrIHdoYXQgaGlzIHBlcnNvbmFsIGNoYXJhY3RlciB3YXMsIHdoZXRoZXIgaGUgdHJlYXRlZCBoaXMKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzIHdlbGwsIHdoZXRoZXIgaGUgaGFkIHNlcnZlZCB0aGUgY2l0eSBpbiB0aGUgZmllbGQsIHdoZXRoZXIgaGUgaGFkIGFuCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0cmFsIGN1bHQgb3IgcGFpZCB0YXhlcy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGluLiAxLjYwIiB2YWxpZD0ieWVzIj5EaW4uIDEuNjA8L2JpYmw+LiBBcmlzdG90bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiA1NCIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQ29uc3QuIEF0aC4KICAgICAgICAgICAgICAgICAgICAgICAgNTQ8L2JpYmw+77yJIHN0YXRlcyB0aGF0IHRoZWZ0IHdhcyBwdW5pc2hlZCBpbiB0aGUgc2FtZSB3YXkuPC90cmFuc2xhdGlvbj4="
translation['2.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzdG9naXRvbgogICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBjbGFpbSBvbmUgb2YgdGhlc2UgcXVhbGlmaWNhdGlvbnMgZm9yIGhpbXNlbGYuIFNvIGZhciBmcm9tIHRyZWF0aW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIHBhcmVudHMgd2VsbCB0aGlzIG1hbiBoYXMgaWxsLXRyZWF0ZWQgaGlzIG93biBmYXRoZXIuIFdoZW4geW91IHdlcmUgYWxsCiAgICAgICAgICAgICAgICAgICAgc2VydmluZyBpbiB0aGUgYXJteSBoZSB3YXMgaW4gcHJpc29uOyBhbmQsIGZhciBmcm9tIGJlaW5nIGFibGUgdG8gcG9pbnQgdG8gYW55CiAgICAgICAgICAgICAgICAgICAgbWVtb3JpYWwgb2YgaGlzIGZhdGhlciwgQXRoZW5pYW5zLCBoZSBkaWQgbm90IGdpdmUgaGltIGEgcHJvcGVyIGZ1bmVyYWwgZXZlbiBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVyZXRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVyZXRyaWEiPkVyZXRyaWE8L3BsYWNlTmFtZT4gd2hlcmUgaGUgZGllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjUuNTQiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjUuNTQ8L2JpYmw+Ljwvbm90ZT4gV2hpbGUgb3RoZXIgQXRoZW5pYW5zIGFyZSBjb250cmlidXRpbmcgZnJvbSB0aGVpciBvd24KICAgICAgICAgICAgICAgICAgICBwdXJzZXMgdGhpcyBtYW4gaGFzIG5vdCBldmVuIHBhaWQgdXAgYWxsIHRoZSBtb25leSB0byBkZWZyYXkgdGhlIHB1YmxpYyBkZWJ0cwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGluY3VycmVkLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI1LjU0IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDI1LjU0PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['2.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBmYWN0IGhlIGhhcyBuZXZlciBjZWFzZWQKICAgICAgICAgICAgICAgICAgICB0byBjb250cmF2ZW5lIGFsbCB0aGUgbGF3cywgYW5kIGhpcyBpcyB0aGUgb25lIGNhc2Ugb2YgdGhvc2Ugb24gd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ3VzIGhhcyByZXBvcnRlZCB3aGVyZSB5b3UgaGFkIGlucXVpcmVkIHlvdXJzZWx2ZXMgYW5kIGFscmVhZHkga25ldyB0aGUKICAgICAgICAgICAgICAgICAgICBhbnN3ZXIuIEZvciB5b3VyIGtub3dsZWRnZSB0aGF0IHRoaXMgbWFuIGlzIGEgcm9ndWUgYW5kIGEgY3JpbWluYWwgd2FzIG5vdAogICAgICAgICAgICAgICAgICAgIGdhaW5lZCBmcm9tIHRoZSBjb3VuY2lsOyB5b3UgYXJlIGFsbCB2ZXJ5IHdlbGwgYXdhcmUgb2YgaGlzIHdpY2tlZG5lc3MsIGFuZAogICAgICAgICAgICAgICAgICAgIGhlbmNlIHRoZSBzdGF0ZW1lbnQgc28gb2Z0ZW4gbWFkZSBhcHBsaWVzIGhlcmUgYWxzbywgbmFtZWx5IHRoYXQsIHdoaWxlIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBwYXNzaW5nIGp1ZGdlbWVudCBvbiB0aGUgZGVmZW5kYW50LCB0aGUgYnlzdGFuZGVycyBhbmQgZXZlcnlvbmUgYmVzaWRlcyBhcmUKICAgICAgICAgICAgICAgICAgICBwYXNzaW5nIGp1ZGdlbWVudCBvbiB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['2.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlIGl0IGlzIHlvdXIgZHV0eSBhcyBhIHNlbnNpYmxlIGp1cnksIEF0aGVuaWFucywgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgdm90ZSBhZ2FpbnN0IHlvdXJzZWx2ZXMgb3IgdGhlIHJlc3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyB5b3Ugc2hvdWxkIHNlbnRlbmNlIGhpbSB1bmFuaW1vdXNseSB0byBiZSBoYW5kZWQgb3ZlcgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBleGVjdXRpb25lcnMgZm9yIHRoZSBkZWF0aCBwZW5hbHR5LiBEbyBub3QgYmUgdHJhaXRvcnMgYW5kIGZhaWwgdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRoZSBob25lc3QgdmVyZGljdCBkZW1hbmRlZCBieSB5b3VyIG9hdGguIFJlbWVtYmVyIHRoYXQgdGhpcyBtYW4gaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgYnkgdGhlIGNvdW5jaWwgb2YgdGFraW5nIGJyaWJlcyBhZ2FpbnN0IHlvdSwgY29udmljdGVkIG9mIGlsbC10cmVhdGluZwogICAgICAgICAgICAgICAgICAgIGhpbSwgdG8gdXNlIHRoZSBtaWxkZXN0IHRlcm0sIGJ5IGhpcyBmYXRoZXIgZHVyaW5nIGhpcyBsaWZlIGFuZCBhZnRlciBoaXMgZGVhdGgsCiAgICAgICAgICAgICAgICAgICAgY29uZGVtbmVkIGJ5IHRoZSBwZW9wbGUncyB2b3RlIGFuZCBoYW5kZWQgb3ZlciB0byB5b3UgZm9yIHB1bmlzaG1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['2.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5SZW1lbWJlciB0aGF0IHRoaXMgbWFuIGhhcyBjYXVzZWQgYSBkZWFsIG9mIGhhcm0gYW5kCiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdyBiZWVuIGNhdWdodCBkb2luZyB3cm9uZyBpbiBjaXJjdW1zdGFuY2VzIHdoaWNoIG1ha2UgaXQgc2hhbWVmdWwgZm9yIHlvdSwKICAgICAgICAgICAgICAgICAgICBoaXMganVkZ2VzLCB0byByZWxlYXNlIGhpbSB1bnB1bmlzaGVkLiBGb3IgaWYgeW91IGRvIHNvLCBob3cgYXJlIHlvdSBnb2luZyB0bwogICAgICAgICAgICAgICAgICAgIHZvdGUgb24gdGhlIG90aGVyIHJlcG9ydHMsIEF0aGVuaWFucz8gV2hhdCBqdXN0aWZpY2F0aW9uIHdpbGwgeW91IGdpdmUgZm9yCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGNvbmRlbW5lZCB0aG9zZSBtZW4gd2hvbSB5b3UgaGF2ZSBhbHJlYWR5IHRyaWVkPyBXaGF0IHJlYXNvbiB3aWxsIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUsIHdoZW4geW91IHdlcmUgY2xlYXJseSBhbnhpb3VzIGZvciB0aGUgY291bmNpbCB0byByZXBvcnQgdGhvc2Ugd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHRha2VuIHRoZSBtb25leSwgZm9yIGZhaWxpbmcgb2J2aW91c2x5IHRvIHB1bmlzaCB0aGUgbWVuIHdob3NlIG5hbWVzIHRoZXkKICAgICAgICAgICAgICAgICAgICBzdWJtaXQ/IDwvdHJhbnNsYXRpb24+"
translation['2.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdCBub3QgaW1hZ2luZSB0aGF0IHRoZXNlIHRyaWFscwogICAgICAgICAgICAgICAgICAgIGFyZSBwcml2YXRlIGlzc3VlcyBjb25jZXJuaW5nIG5vIG9uZSBidXQgdGhlIG1lbiByZXBvcnRlZDsgdGhleSBhcmUgcHVibGljIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmNlcm4gdGhlIHJlc3Qgb2YgdXMgYXMgd2VsbC4gQSBjYXNlIG9mIGJyaWJlcnkgYW5kIHRyZWFzb24gdHJpZWQgYmVmb3JlIHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgYWZmZWN0IG90aGVycyBpbiB0aGUgZnV0dXJlIGluIHR3byBwb3NzaWJsZSB3YXlzOiBlaXRoZXIgaXQgd2lsbCBtYWtlIHRoZW0KICAgICAgICAgICAgICAgICAgICBhY2NlcHQgYnJpYmVzIGFnYWluc3QgeW91IHVuaGVzaXRhdGluZ2x5IGluIHRoZSBrbm93bGVkZ2UgdGhhdCB0aGV5IHdpbGwgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCB0byBqdXN0aWNlLCBvciBpdCB3aWxsIG1ha2UgdGhlbSBhZnJhaWQgdG8gdGFrZSB0aGVtLCBzaW5jZSB0aGV5IHdpbGwKICAgICAgICAgICAgICAgICAgICBrbm93IHRoYXQgdGhvc2Ugd2hvIGFyZSBjYXVnaHQgd2lsbCBiZSBwdW5pc2hlZCBpbiBhIG1hbm5lciBzdWl0ZWQgdG8gdGhlIGNyaW1lLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3Ugbm90IGtub3cgdGhhdCBub3cgdGhlIGZlYXIgb2Ygd2hhdAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGRvIHJlc3RyYWlucyB0aG9zZSB3aG8gYXJlIGdyYXNwaW5nIGZvciB0aGUgbW9uZXkgb2ZmZXJlZCBmb3IgdXNlCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB5b3UgYW5kIG9mdGVuIG1ha2VzIHRoZW0gdHVybiB0aGVpciBiYWNrcyBvbiB0aGUgYnJpYmUsIGFuZCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSdzIGRlY3JlZSwgb3JkZXJpbmcgdGhlIGNvdW5jaWwgdG8gaW5xdWlyZSBhYm91dCB0aGlzIG1vbmV5LCBoYXMgcHJldmVudGVkCiAgICAgICAgICAgICAgICAgICAgZXZlbiB0aG9zZSB3aG8gYnJvdWdodCB0aGUgZ29sZCBpbnRvIHRoZSBjb3VudHJ5IGZyb20gYWRtaXR0aW5nIHRoZWlyIGFjdGlvbj8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgYSBub2JsZSBkZWNyZWUsIEF0aGVuaWFucywgYSBub2JsZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBvZiB5b3VyIGFuY2VzdG9ycyBvbiB0aGlzIHF1ZXN0aW9uLCBwcm92aWRpbmcgZm9yIGEgcGlsbGFyIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIEFjcm9wb2xpcyBhdCB0aGUgdGltZSB3aGVuIEFydGhtaXVzLCBzb24gb2YgUGl0aG9uYXgsIHRoZSBaZWxpdGUsIGlzIHNhaWQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJyb3VnaHQgdGhlIGdvbGQgZnJvbSB0aGUgUGVyc2lhbnMgdG8gY29ycnVwdCB0aGUgR3JlZWtzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vc3RoZW5lcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuNDIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS40MjwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjcxIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjI3MTwvYmlibD7vvIkgcmVmZXJzIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGlsbGFyLiBBcnRobWl1cyBvZiBaZWxlYSB3YXMgYW4gQXRoZW5pYW4gcHJveGVudXMuIEhlIHdhcyBzZW50IGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFydGF4ZXJ4ZXMgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXN1czwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmFibHkgaW4gNDYxLCB0byBzdGlyIHVwIHdhciBhZ2FpbnN0IHRoZSBBdGhlbmlhbnMsIHdobyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBhc3Npc3RpbmcgYSByZXZvbHQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAxLjEwOSIgdmFsaWQ9InllcyI+VGh1Yy4gMS4xMDk8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxMS43NC41IiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4gMTEuNzQuIDU8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjI1OCIgdmFsaWQ9InllcyI+QWVzY2hpbi4gMy4yNTg8L2JpYmw+Lu+8iTwvbm90ZT4gRm9yIGJlZm9yZSBhbnlvbmUgaGFkIGFjY2VwdGVkCiAgICAgICAgICAgICAgICAgICAgaXQgb3IgZ2l2ZW4gcHJvb2Ygb2YgaGlzIGNoYXJhY3RlciB0aGV5IHNlbnRlbmNlZCB0aGUgbWFuIHdobyBoYWQgYnJvdWdodCB0aGUKICAgICAgICAgICAgICAgICAgICBnb2xkIHRvIGV4aWxlIGFuZCBiYW5pc2hlZCBoaW0gY29tcGxldGVseSBmcm9tIHRoZSBjb3VudHJ5LiBUaGlzIGRlY2lzaW9uLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgc2FpZCwgdGhleSBlbmdyYXZlZCBvbiBhIGJyb256ZSBwaWxsYXIgYW5kIHNldCB1cCBvbiB0aGUgQWNyb3BvbGlzIGFzIGEgbGVzc29uCiAgICAgICAgICAgICAgICAgICAgZm9yIHlvdSB0aGVpciBkZXNjZW5kYW50czsgZm9yIHRoZXkgYmVsaWV2ZWQgdGhhdCB0aGUgbWFuIHdobyBhY2NlcHRlZCBtb25leSBpbgogICAgICAgICAgICAgICAgICAgIGFueSB3YXkgYXQgYWxsIGhhZCBpbiBtaW5kIHRoZSBpbnRlcmVzdHMgb2YgdGhlIGRvbm9ycyByYXRoZXIgdGhhbiB0aG9zZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuNDIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS40MjwvYmlibD4KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMjcxIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjI3MTwvYmlibD7vvIkgcmVmZXJzIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGlsbGFyLiBBcnRobWl1cyBvZiBaZWxlYSB3YXMgYW4gQXRoZW5pYW4gcHJveGVudXMuIEhlIHdhcyBzZW50IGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIEFydGF4ZXJ4ZXMgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXN1czwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmFibHkgaW4gNDYxLCB0byBzdGlyIHVwIHdhciBhZ2FpbnN0IHRoZSBBdGhlbmlhbnMsIHdobyBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBhc3Npc3RpbmcgYSByZXZvbHQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAxLjEwOSIgdmFsaWQ9InllcyI+VGh1Yy4gMS4xMDk8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW9kLiAxMS43NC41IiB2YWxpZD0ieWVzIj5EaW8uIFNpYy4gMTEuNzQuIDU8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjI1OCIgdmFsaWQ9InllcyI+QWVzY2hpbi4gMy4yNTg8L2JpYmw+Lu+8iTwvdHJhbnNsYXRpb24+"
translation['2.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgd2FzIHRoZSBvbmx5IGNhc2UgaW4gd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGFkZGVkIHRoZSByZWFzb24gd2h5IHRoZSBwZW9wbGUgYmFuaXNoZWQgaGltIGZyb20gdGhlIGNpdHksIGV4cGxpY2l0bHkgd3JpdGluZwogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBwaWxsYXIgdGhhdCBBcnRobWl1cywgc29uIG9mIFBpdGhvbmF4LCB0aGUgWmVsaXRlLCB3YXMgYW4gZW5lbXkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGFuZCBpdHMgYWxsaWVzLCBoZSBhbmQgaGlzIGRlc2NlbmRhbnRzLCBhbmQgd2FzIGV4aWxlZCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBiZWNhdXNlIGhlIGhhZCBicm91Z2h0IHRoZSBQZXJzaWFuCiAgICAgICAgICAgICAgICAgICAgZ29sZCB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4uIEFuZCB5ZXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHJlZ2FyZGVkIHRoZSBnb2xkIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzZTwvcGxhY2VOYW1lPiBhcyBhIHNvdXJjZSBvZiBncmVhdCBkYW5nZXIgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBob3cgY2FuIHdlIHJlbWFpbiB1bm1vdmVkIGF0IHRoZSBzaWdodAogICAgICAgICAgICAgICAgICAgIG9mIGJyaWJlcnkgaW4gdGhlIGNpdHkgaXRzZWxmPyBQbGVhc2UgYXR0ZW5kIHRvIHRoZSBpbnNjcmlwdGlvbiBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGlsbGFyLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ikluc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5zY3JpcHRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5zY3JpcHRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.26'] = ""
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoYXQgaW4gSGVhdmVuJ3MgbmFtZSBhcmUgd2UgdG8gc2F5IGFib3V0IHN1Y2gKICAgICAgICAgICAgICAgICAgICBtZW4gYXMgdGhpcz8gSG93IHdpbGwgeW91IGRlYWwgd2l0aCB0aGUgd2lja2VkbmVzcyBvZiBQaGlsb2NsZXMsIHdobyBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZCBieSB0aGUgQXJlb3BhZ3VzIG5vdCBvbmNlIG9ubHkgYnV0IHRocmVlIHRpbWVzLCBhcyB5b3UgYWxsIGtub3csIGFuZAogICAgICAgICAgICAgICAgICAgIGFzIHlvdSB3ZXJlIHJlY2VudGx5IGluZm9ybWVkIGluIHRoZSBBc3NlbWJseT8gSGUgaGFzIGxpZWQgYmVmb3JlIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgYW5kIHRoZSBzdXJyb3VuZGluZyBjcm93ZCwgc2F5aW5nIHRoYXQgaGUgd291bGQgcHJldmVudCBIYXJwYWx1cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgcHV0dGluZyBpbnRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4sIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBhcHBvaW50ZWQgYnkgeW91IGFzIGdlbmVyYWwgaW4gY29tbWFuZCBvZiBNdW5pY2hpYSBhbmQgdGhlIGRvY2t5YXJkcywKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoZSBkYXJlZCB0byB0YWtlIGJyaWJlcyBhZ2FpbnN0IHlvdQogICAgICAgICAgICAgICAgICAgIGFsbCwgYWdhaW5zdCB5b3VyIGNvdW50cnkgYW5kIHlvdXIgd2l2ZXMgYW5kIGNoaWxkcmVuOyBoZSBoYXMgYnJva2VuIHRoZSBvYXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgc3dvcmUgYmV0d2VlbiB0aGUgc3RhdHVlIG9mIEF0aGVuYSBhbmQgdGhlIHRhYmxlOyBhbmQgaGUgcHJvcG9zZWQgYQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBhZ2FpbnN0IGhpbXNlbGYgaW1wb3NpbmcgdGhlIGRlYXRoIHBlbmFsdHkgb24gaGltIGlmIGhlIGhhZCBhY2NlcHRlZCBhbnkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbW9uZXkgd2hpY2ggSGFycGFsdXMgYnJvdWdodCBpbnRvIHRoZSBjb3VudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPllldCBkZXNwaXRlIHRoaXMgaGUgZGFyZWQgdG8gY29tZSBhbmQgc2hvdyBoaW1zZWxmIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIHdoZW4geW91IGtuZXcgdGhhdCBoZSBoYWQgYmVlbiBwcm92ZWQgYW5zd2VyYWJsZSBvbiBhbGwgdGhlc2UgY291bnRzLiBJdCBpcyBub3QKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIG9uIHdoaWNoIGhlIGlzIHJlbHlpbmcsIEF0aGVuaWFuczsgZm9yIHdoYXQgaGFzIGhlIHRvIGRvIHdpdGgganVzdGljZT8KICAgICAgICAgICAgICAgICAgICBObywgaXQgaXMgYXVkYWNpdHkgYW5kIGVmZnJvbnRlcnksIGluIHZpcnR1ZSBvZiB3aGljaCBoZSBoYXMgc2VlbiBmaXQgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIGJyaWJlcyBpbiB0aGUgcGFzdCwgdG8gdGhlIHV0dGVyIGRpc3JlZ2FyZCBvZiB5b3Vyc2VsdmVzIGFuZCB0aGUgY291cnNlIG9mCiAgICAgICAgICAgICAgICAgICAganVzdGljZSBpbiB0aGUgY2l0eSwgYW5kIGhhcyBub3cgY29tZSBmb3J3YXJkIHRvIGV4cGxhaW4gdGhhdCBoZSBpcyBndWlsdHkgb2YKICAgICAgICAgICAgICAgICAgICBub25lIG9mIHRoZXNlIHRoaW5ncy4gU28gY29tcGxldGUgaGFzIGJlZW4gaGlzIGNvbnRlbXB0IGZvciB5b3VyIGFwYXRoeS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXcgb2YgdGhlIGNpdHksIHdoaWNoIGJpbmRzIHVzIGFsbCwKICAgICAgICAgICAgICAgICAgICBsYXlzIGl0IGRvd24gdGhhdCBpZiBhbnlvbmUgYnJlYWtzIGFuIGFncmVlbWVudCBtYWRlIGluIHRoZSBwcmVzZW5jZSBvZiBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aXplbnMgaGUgc2hhbGwgYmUgbGlhYmxlIGFzIGFuIG9mZmVuZGVyLiBTaGFsbCB0aGlzIG1hbiwgd2hvIGhhcyBkZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IEF0aGVuaWFuLCBiZXRyYXllZCB0aGUgdHJ1c3Qgd2hpY2ggaGUgZGlkIG5vdCBkZXNlcnZlIHRvIHJlY2VpdmUgZnJvbSB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNvIGRvbmUgZXZlcnl0aGluZyBpbiBoaXMgcG93ZXIgdG8gcnVpbiBhbGwgdGhlIGNpdHkncyBpbnN0aXR1dGlvbnMsIGNsYWltCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBpcyBjb21pbmcgdG8gbWFrZSBoaXMgZGVmZW5jZSBhZ2FpbnN0IHRoZSBjaGFyZ2UgbGFpZCBhZ2FpbnN0IGhpbT8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIG15IHBlcnNvbmFsIG9waW5pb24sIEF0aGVuaWFucywgaWYgSQogICAgICAgICAgICAgICAgICAgIGFtIHRvIHNwZWFrIHRoZSB0cnV0aCzigJRhcyBJIG11c3Qs4oCUdGhhdCB0aGVyZSBpcyBubyBxdWVzdGlvbgogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgdGhlIHJlcG9ydHMgYmVhcmluZyBvbiBQaGlsb2NsZXMgYXJlIHRydWUgb3IgZmFsc2U7IHlvdSBoYXZlIHNpbXBseSB0bwogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIG5vdyB0aGUgcHVuaXNobWVudCBtZW50aW9uZWQgaW4gdGhlIGRlY3JlZSBhbmQgdG8gZGVjaWRlIHdoZXRoZXIgeW91CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gZmluZSBhIG1hbiB3aG8gaGFzIGRvbmUgdGhlIGNpdHkgc28gbXVjaCBoYXJtIG9yIHNlbnRlbmNlIGhpbSB0bwogICAgICAgICAgICAgICAgICAgIGRlYXRoLOKAlGFzIGhlIHByb3Bvc2VkIGluIHRoZSBkZWNyZWUgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYs4oCUY29uZmlzY2F0aW5nIHRoZSBwcm9wZXJ0eSB3aGljaCBoZSBoYXMgYW1hc3NlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgcGVycXVpc2l0ZXMgbGlrZSB0aGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EbyB5b3UgdGhpbmsgdGhhdCB0aGlzIHF1ZXN0aW9uIG9mIHRoZSBnb2xkIGlzIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uIHdoZW4gUGhpbG9jbGVzIGhhcyBzaG93biBoaXMgZGlzaG9uZXN0eSBhbmQgdGhhdCBoZSBoYXMgbmV2ZXIgdGFrZW4KICAgICAgICAgICAgICAgICAgICBicmliZXMgYWdhaW5zdCB5b3UgYmVmb3JlPyBZb3UgYXJlIHdyb25nLiBIZSBoYXMgYmVlbiBsaWtlIHRoaXMgYSBsb25nIHRpbWUsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHlvdSBkaWQgbm90IG5vdGljZSBpdDsgaW5kZWVkIHlvdSBoYXZlIGJlZW4gZm9ydHVuYXRlIG5vdCB0byBoYXZlIG1ldAogICAgICAgICAgICAgICAgICAgIHdpdGggaGlzIHZlbmFsaXR5IG9uIG1vcmUgaW1wb3J0YW50IG9jY2FzaW9uczsgZm9yIHRoZXJlIGlzIG5vIGdyZWF0ZXIgbWVuYWNlCiAgICAgICAgICAgICAgICAgICAgdGhhbiBhIG1hbiB3aG9zZSBkaXNob25lc3R5IHBhc3NlcyB1bm9ic2VydmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0aGVuaWFucywgd2lsbCB5b3Ugbm90IGFsbCB1bml0ZSBpbiBraWxsaW5nIG9uZSB3aG8gaGFzIHBsdW5nZWQgbWFueSBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBpbnRvIHN1Y2ggZGVlcCBkaXNncmFjZSBhbmQgZ3VpbHQsIHdobyBmaXJzdCBvcGVuZWQgdGhlIHdheSBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29sZCB0aGF0IGhhcyBiZWVuIGRpc3RyaWJ1dGVkLCBleHBvc2luZyB0aGUgd2hvbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIGJsYW1lPyBPciB3aWxsIHlvdSBjb25zZW50IHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciB0aGlzIG1hbiwgd2hvIGhhcyBkb25lIHNvIG11Y2ggdG8gaGFybSB5b3UsIGFyZ3VlIHRoYXQgdGhlIGNvdW5jaWwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ3VzIGhhcyBmYWxzaWZpZWQgdGhlIHJlcG9ydHMgYW5kIHRoYXQsIHdoaWxlIGhlIGlzIGp1c3QgYW5kIHVwcmlnaHQgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5jb3JydXB0aWJsZSwgaXQgaGFzIHB1Ymxpc2hlZCBhbGwgdGhpcyBpbiByZXR1cm4gZm9yIGZhdm9ycyBvciBicmliZXM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSByZWFsaXplIHRoYXQsIGFsdGhvdWdoIGluIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgb2Ygb3RoZXIgb2ZmZW5jZXMgeW91IG11c3QgZmlyc3QgY29uc2lkZXIgY3JpdGljYWxseSBhbmQgd2l0aCBkZWxpYmVyYXRpb24sCiAgICAgICAgICAgICAgICAgICAgZGlzY292ZXJpbmcgdGhlIHRydXRoLCBhbmQgb25seSB0aGVuIGFkbWluaXN0ZXIgcHVuaXNobWVudCB0byB0aGUgb2ZmZW5kZXJzLAogICAgICAgICAgICAgICAgICAgIG5ldmVydGhlbGVzcywgaW4gY2FzZXMgb2Ygb2J2aW91cyBhbmQgdW5xdWVzdGlvbmVkIHRyZWFzb24sIHlvdSBzaG91bGQgZ2l2ZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHBsYWNlIHRvIGFuZ2VyIGFuZCB0aGUgdmVuZ2VhbmNlIHRoYXQgZ29lcyB3aXRoIGl0PyA8L3RyYW5zbGF0aW9uPg=="
translation['3.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkRvIHlvdSB0aGluayB0aGlzIG1hbiB3b3VsZCByZWZyYWluIGZyb20gc2VsbGluZyBhbnkgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRoaW5ncyBtb3N0IHZpdGFsIGluIHRoZSBjaXR5LCB3aGVuIHlvdSwgcmVseWluZyBvbiBoaXMgbG95YWx0eSBhbmQgaG9uZXN0eSwKICAgICAgICAgICAgICAgICAgICBoYWQgcGxhY2VkIGhpbSBpbiBjaGFyZ2Ugb2YgaXQ/IERvIHlvdSB0aGluayB0aGF0IHRoZXJlIGFyZSBhbnkgdHJpcmVtZXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZG9ja3lhcmRzIHdoaWNoIGhlIHdvdWxkIG5vdCBsZXQgZ28sIG9yIHRoYXQgaGUgd291bGQgdHJvdWJsZSB0byBrZWVwIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgc2FmZSwgaWYgdGhlcmUgd2FzIGEgcHJvc3BlY3Qgb2YgZXNjYXBpbmcgZGV0ZWN0aW9uIGFuZCByZWNlaXZpbmcgZG91YmxlIHRoZQogICAgICAgICAgICAgICAgICAgIGFtb3VudCBvZiBnb2xkIHdoaWNoIGhlIGhhcyBub3cgcmVjZWl2ZWQ/IE5vdGhpbmcsIGdlbnRsZW1lbiwgaXMgYmV5b25kIGEgbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0eXBlLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgYW55b25lIHZhbHVlcyBzaWx2ZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgZ29sZCBtb3JlIGhpZ2hseSB0aGFuIGhpcyBsb3lhbHR5IHRvIHlvdSBhbmQgaGFzIG5vIG1vcmUgcmVnYXJkIGZvciBhbiBvYXRoIG9yCiAgICAgICAgICAgICAgICAgICAgZm9yIGhvbm9yIGFuZCByaWdodCB0aGFuIGhlIGhhcyBmb3IgbWFraW5nIG1vbmV5LCB0aGVuIHRoYXQgbWFuLCBpbiBzbyBmYXIgYXMgaGUKICAgICAgICAgICAgICAgICAgICBpcyBhYmxlLCB3aWxsIHNlbGwgTXVuaWNoaWEgaWYgaGUgaGFzIGEgYnV5ZXI7IGhlIHdpbGwgc2lnbmFsIHRvIHRoZSBlbmVteSBhbmQKICAgICAgICAgICAgICAgICAgICByZXZlYWwgeW91ciBzZWNyZXRzLCBoZSB3aWxsIGJldHJheSB5b3VyIGFybXkgYW5kIHlvdXIgZmxlZXQuIDwvdHJhbnNsYXRpb24+"
translation['3.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCBBdGhlbmlhbnMsIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGltYWdpbmUgdGhhdCwgaW4gYXNzZXNzaW5nIHRoZSBwZW5hbHR5LCB5b3UgYXJlIG1lcmVseSBnb2luZyB0byBqdWRnZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjcmltZXMgd2hpY2ggUGhpbG9jbGVzIGhhcyBhY3R1YWxseSBjb21taXR0ZWQ7IHlvdSB3aWxsIGJlYXIgaW4gbWluZCB0aG9zZSB3aGljaAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIGhhdmUgY29tbWl0dGVkLCBoYWQgaXQgYmVlbiBpbiBoaXMgcG93ZXIuIFRoYW5rIHRoZSBnb2RzLCBub3cgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBrbm93IHRoZSBkZWZlbmRhbnQncyBjaGFyYWN0ZXIsIHRoYXQgeW91IGhhdmUgc3VmZmVyZWQgbm8gbW9yZSBncmlldm91cyBoYXJtIGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGhhbmRzLCBhbmQgcHVuaXNoIGhpbSBhcyB5b3VyIGR1dHkgYW5kIGhpcyBiYXNlbmVzcyBkZW1hbmQuIDwvdHJhbnNsYXRpb24+"
translation['3.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiwgQXRoZW5pYW5zLCBoYXMgaGVsZCBhIGNhdmFscnkgY29tbWFuZCwKICAgICAgICAgICAgICAgICAgICB0aHJlZSBvciBmb3VyIHRpbWVzLCBvdmVyIHJlcHV0YWJsZSBtZW47IGhlIGhhcyBiZWVuIGFwcG9pbnRlZCBhIGdlbmVyYWwgYnkgeW91CiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIHRlbiB0aW1lcywgdW53b3J0aHkgdGhvdWdoIGhlIHdhcywgYW5kIGhhcyBlbmpveWVkIGhvbm9yIGFuZCBhcm91c2VkCiAgICAgICAgICAgICAgICAgICAgZW11bGF0aW9uIGJlY2F1c2Ugb2YgaGlzIHJlcHV0YXRpb24gZm9yIGxveWFsdHkgdG93YXJkcyB5b3UuIFlldCBoZSBzb2xkIGFuZAogICAgICAgICAgICAgICAgICAgIGJldHJheWVkIHRoZSBkaWduaXR5IG9mIGEgY29tbWFuZCBjb25mZXJyZWQgYnkgdXMsIHJlZHVjaW5nIGhpbXNlbGYgdG8gdGhlIGxldmVsCiAgICAgICAgICAgICAgICAgICAgb2YgQXJpc3RvZ2l0b24gYW5kIGNoYW5naW5nIGZyb20gYSBnZW5lcmFsIGludG8gYSBoaXJlbGluZyBhbmQgYSB0cmFpdG9yLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5JcyB0aGlzIGEgcmVhc29uIHdoeSB5b3UsIHRoZSBpbmp1cmVkCiAgICAgICAgICAgICAgICAgICAgcGFydGllcywgc2hvdWxkIGdpdmUgd2F5IHRvIGZlZWxpbmdzIG9mIGNvbnNpZGVyYXRpb24gZm9yIHN1Y2ggYSBwZXJzb24gd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgc2hvd2VkIG5vIGNvbnNpZGVyYXRpb24gaW4gdHJlYXRpbmcgeW91IGFuZCB5b3VyIGZlbGxvd3MgYXMgaGUgZGlkPwogICAgICAgICAgICAgICAgICAgIFRob3NlIHdobyBjb3VsZCBqdXN0bHkgY2xhaW0geW91ciBwaXR5LCBBdGhlbmlhbnMsIGFyZSBub3QgdGhlIGxpa2Ugb2YKICAgICAgICAgICAgICAgICAgICBoaW0s4oCUZmFyIGZyb20gaXQs4oCUdGhleSBhcmUgdGhvc2Ugd2hvbSBQaGlsb2NsZXMgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJldHJheWVkIGlmIGhlIGhhZCBoYWQgdGhlIGNoYW5jZSBvZiBhIGdvb2QgcHJpY2U7IGFuZCBhbW9uZyB0aGVtIGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9tb250b3J5IGFuZCBoYXJib3JzLCBhbmQgdGhlIGRvY2t5YXJkcyB3aGljaCB5b3VyIGFuY2VzdG9ycyBidWlsdCBhbmQgbGVmdAogICAgICAgICAgICAgICAgICAgIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['3.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdCByZW1lbWJlciB0aGVzZSwgQXRoZW5pYW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICBub3QgbWFrZSBsaWdodCBvZiB0aGUgcmVwb3J0cyBwdWJsaXNoZWQgYnkgdGhlIGNvdW5jaWwuICZsdDtUcmVhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UmZ3Q7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzZW5zZSBvZiB0aGlzIHBhc3NhZ2UgaXMKICAgICAgICAgICAgICAgICAgICAgICAgZXZpZGVudCwgdGhvdWdoIGl0IGlzIG5vdCBjbGVhciB3aGV0aGVyIERpbmFyY2h1cyBpcyBleHByZXNzaW5nIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICAgICAgbG9vc2VseSBvciB3aGV0aGVyLCBhcyBCbGFzcyBzdWdnZXN0cywgYSBmZXcgd29yZHMgaGF2ZSBkcm9wcGVkIG91dCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC48L25vdGU+IGFzIHlvdSB0cmVhdGVkIHRob3NlIG9uIHdoaWNoIHlvdSBoYXZlIGFscmVhZHkgcGFzc2VkCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LiBGb3IgaXQgaXMgc2hhbWVmdWwgdG8gZ3JvdyB3ZWFyeSBvZiBwdW5pc2hpbmcgbWVuIHdobyBoYXZlIHByb3ZlZAogICAgICAgICAgICAgICAgICAgIHRyYWl0b3JzIHRvIHRoZSBjaXR5LCBhbmQgc2hhbWVmdWwgdGhhdCBhbnkgbGF3YnJlYWtlcnMgYW5kIHJlcHJvYmF0ZXMgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgc3Vydml2ZSwgd2hlbiB0aGUgZ29kcyBoYXZlIGV4cG9zZWQgdGhlbSBhbmQgc3VycmVuZGVyZWQgdGhlbSB0byB5b3UgZm9yCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudCwgaGF2aW5nIHNlZW4gdGhhdCB0aGUgd2hvbGUgcGVvcGxlIGhhZCBhY2N1c2VkIFBoaWxvY2xlcyBhbmQgaGFuZGVkCiAgICAgICAgICAgICAgICAgICAgaGltIG92ZXIgZmlyc3Qgb2YgYWxsIHRvIG1lZXQgd2l0aCBoaXMgZGVzZXJ0cyBiZWZvcmUgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnkgWmV1cyB0aGUgU2F2aW9yLCBJIGFtCiAgICAgICAgICAgICAgICAgICAgYXNoYW1lZCB0aGF0IHlvdSBzaG91bGQgbmVlZCB1cyB0byBlbmNvdXJhZ2UgeW91IGFuZCBnb2FkIHlvdSBvbiBiZWZvcmUgeW91CiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZCB0byBwdW5pc2ggdGhlIGRlZmVuZGFudCBub3cgb24gdHJpYWwuIEFyZSB5b3Ugbm90IGV5ZXdpdG5lc3NlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjcmltZXMgaGUgaGFzIGNvbW1pdHRlZD8gVGhlIHdob2xlIHBlb3BsZSBjb25zaWRlcmVkIHRoYXQgaXQgd2FzIG5vdCBzYWZlIG9yCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgdG8gdHJ1c3QgaGltIHdpdGggdGhlaXIgY2hpbGRyZW4gYW5kIHNvIHJlamVjdGVkIGhpbSBhcyBTdXBlcnZpc29yIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIEVwaGViaS4gPC90cmFuc2xhdGlvbj4="
translation['3.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5XaWxsIHlvdSwgdGhlIGd1YXJkaWFucyBvZiBkZW1vY3JhY3kKICAgICAgICAgICAgICAgICAgICBhbmQgbGF3LCBzcGFyZSBhIG1hbiB3aG8gaGFzIGJlaGF2ZWQgbGlrZSB0aGlzOyB5b3UgdG8gd2hvbSB0aGUgZm9ydHVuZSBvZiBsb3QKICAgICAgICAgICAgICAgICAgICBoYXMgZW50cnVzdGVkICZsdDt0aGUgcHJvdGVjdGlvbiZndDs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U29tZSBzdWNoIG1lYW5pbmcgc2VlbXMgY2FsbGVkIGZvciBhcyBpcyBwcmVzdW1lZCBieSBSZWlza2UsIGJ1dCB0aGUgYWN0dWFsCiAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVrIHdvcmRzIHN1cHBsaWVkIGJ5IGhpbSBtYWtlIHRoZSBmdXR1cmUgcGFydGljaXBsZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM65zrrhvbHPg86/zr3PhM6xz4I8L2ZvcmVpZ24+IHJhdGhlciBhd2t3YXJkLjwvbm90ZT4gb2YgdGhlIHBlb3BsZSBieSBtZWFucyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZW1lbnQgeW91IHdpbGwgZ2l2ZT8gWW91IGFyZSB0aGUgc3VwcmVtZSBjb3VydCBvZiBqdXN0aWNlIGluIHRoZSBjaXR5LgogICAgICAgICAgICAgICAgICAgIFdpbGwgeW91IGFjcXVpdCBhIG1hbiBndWlsdHkgb2YgdGFraW5nIGJyaWJlcyBhbmQgZXZlcnkgb3RoZXIgY3JpbWUsIHdobywgYXMgSQogICAgICAgICAgICAgICAgICAgIHNhaWQganVzdCBub3csIGlzIHVuaXF1ZSBhbW9uZyBjcmltaW5hbHMgaW4gdGhhdCBoZSBoYXMgYmVlbiByZXBvcnRlZCBub3Qgb25jZQogICAgICAgICAgICAgICAgICAgIG1lcmVseSBidXQgdGhyZWUgdGltZXMgYW5kIG1pZ2h0IGFscmVhZHkgaGF2ZSBiZWVuIHJpZ2h0bHkgbWFkZSBsaWFibGUgdGhyZWUKICAgICAgICAgICAgICAgICAgICB0aW1lcyB0byB0aGUgZGVhdGggcGVuYWx0eSBieSBoaXMgb3duIGRlY3JlZS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOuc664b2xz4POv869z4TOsc+CPC9mb3JlaWduPiByYXRoZXIgYXdrd2FyZC48L3RyYW5zbGF0aW9uPg=="
translation['3.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHdoeSB3aWxsIHlvdSB3YWl0LCBBdGhlbmlhbnM/IFdoYXQgZnVydGhlciBjcmltZXMgZG8geW91IHdpc2ggdG8gaGVhciBvZgogICAgICAgICAgICAgICAgICAgIGdyZWF0ZXIgdGhhbiB0aG9zZSB3ZSBoYXZlIG1lbnRpb25lZD8gV2FzIGl0IG5vdCB5b3UgYW5kIHlvdXIgYW5jZXN0b3JzIHdobyBtYWRlCiAgICAgICAgICAgICAgICAgICAgbm8gYWxsb3dhbmNlIGZvciBUaW1vdGhldXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgcGFzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyBhbG1vc3Qgd29yZCBmb3Igd29yZCB3aXRoIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRpbi4gMS4xNCIgdmFsaWQ9InllcyI+RGluLiAxLjE0PC9iaWJsPi4KICAgICAgICAgICAgICAgICAgICAgICAgU2VlIG5vdGUgb24gdGhhdC48L25vdGU+IHRob3VnaCBoZSBoYWQgc2FpbGVkIHJvdW5kIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEaW4uIDEuMTQiIHZhbGlkPSJ5ZXMiPkRpbi4gMS4xNDwvYmlibD4uCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBub3RlIG9uIHRoYXQuPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4gYW5kIGJlYXRlbiB0aGUgU3BhcnRhbnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VhLWZpZ2h0IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODg2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4ODYiPkNvcmN5cmE8L3BsYWNlTmFtZT4sIHRob3VnaCBoaXMgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIENvbm9uIHdobyBsaWJlcmF0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGFuZCBoZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaGFkIHRha2VuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzMiPlNhbW9zPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1ldGhvbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1ldGhvbmUiPk1ldGhvbmU8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUHlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFB5ZG5hIj5QeWRuYTwvcGxhY2VOYW1lPiwgUG90aWRhZWEsIGFuZCB0d2VudHkgY2l0aWVzIGJlc2lkZXM/IFlvdSBkaWQgbm90IHRha2UKICAgICAgICAgICAgICAgICAgICB0aGlzIHJlY29yZCBpbnRvIGNvbnNpZGVyYXRpb24gYXQgYWxsLCBvciBhbGxvdyBzdWNoIHNlcnZpY2VzIHRvIG91dHdlaWdoIHRoZQogICAgICAgICAgICAgICAgICAgIGNhc2UgYmVmb3JlIHlvdSBvciB0aGUgb2F0aHMgd2hpY2ggeW91IHN3ZWFyIGJlZm9yZSBnaXZpbmcgeW91ciB2ZXJkaWN0LCBidXQKICAgICAgICAgICAgICAgICAgICBmaW5lZCBoaW0gYSBodW5kcmVkIHRhbGVudHMsIGJlY2F1c2UgQXJpc3RvcGhvbiBzYWlkIGhlIGhhZCBiZWVuIGJyaWJlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBDaGlhbnMgYW5kIFJob2RpYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['3.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz4mbHQ7V2lsbCB5b3UgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhY3F1aXQmZ3Q7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFuIGFwb2Rvc2lzIGNvbnZleWluZyBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2ggbWVhbmluZyBhcyB0aGlzLCB3aGljaCBpcyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIHNlbnNlIG9mIHRoZSBzZW50ZW5jZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2VlbXMgdG8gaGF2ZSBkcm9wcGVkIG91dCBvZiB0aGUgR3JlZWsgdGV4dC48L25vdGU+IHRoaXMgYWJvbWluYWJsZSBtYW4sCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZWQgbm90IGJ5IG9uZSBpbmRpdmlkdWFsIGJ1dCBieSB0aGUgd2hvbGUgY291bmNpbCBvZiB0aGUgQXJlb3BhZ3VzLCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGFuIGludmVzdGlnYXRpb24sIHRvIGJlIGhvbGRpbmcgYnJpYmVzIGFnYWluc3QgeW91OyB3aG8sIHRob3VnaCBoZSBoYXMgYW1wbGUKICAgICAgICAgICAgICAgICAgICBtZWFucyBhbmQgbm8gbWFsZSBoZWlycyBhbmQgbGFja3Mgbm90aGluZyBlbHNlIHRoYXQgYSBub3JtYWwgbWFuIGNvdWxkIG5lZWQsIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCB3aXRoaG9sZCBoaXMgaGFuZCBmcm9tIHRoZSBicmliZXMgb2ZmZXJlZCBhZ2FpbnN0IGhpcyBjb3VudHJ5IG9yIHN1cHByZXNzCiAgICAgICAgICAgICAgICAgICAgaGlzIG5hdHVyYWwgZGVwcmF2aXR5LCBidXQgZGVzdHJveWVkIGVudGlyZWx5IGhpcyByZXB1dGF0aW9uIGZvciBsb3lhbHR5IHRvd2FyZHMKICAgICAgICAgICAgICAgICAgICB5b3UsIGJ5IHJhbmdpbmcgaGltc2VsZiB3aXRoIHRob3NlIHdob20gaGUgb25jZSBwcm9mZXNzZWQgdG8gb3Bwb3NlIGFuZCBwcm92aW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgY291bnRlcmZlaXRlZCBob25lc3R5IHdhcyBzaGFtPyA8L3RyYW5zbGF0aW9uPg=="
translation['3.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TGV0IGV2ZXJ5IG9uZSBvZiB5b3UgYmVhciB0aGVzZSBwb2ludHMgaW4KICAgICAgICAgICAgICAgICAgICBtaW5kLCBBdGhlbmlhbnMsIGFuZCByZW1lbWJlciB0aGUgcHJlc2VudCBjaXJjdW1zdGFuY2VzLCB3aGljaCBjYWxsIGZvciBnb29kCiAgICAgICAgICAgICAgICAgICAgZmFpdGgsIG5vdCBjb3JydXB0aW9uLiBZb3UgbXVzdCBoYXRlIHRoZSB3aWNrZWQsIHdpcGUgb3V0IHN1Y2ggbW9uc3RlcnMgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5LCBhbmQgc2hvdyB0aGUgd29ybGQgdGhhdCB0aGUgbWFzcyBvZiBwZW9wbGUgaGF2ZSBub3QgYmVlbiBjb3JydXB0ZWQgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgZmV3IG9yYXRvcnMgYW5kIGdlbmVyYWxzIGFuZCBhcmUgbm90IGNvd2VkIGJ5IHRoZWlyIHJlcHV0YXRpb247IGZvciB0aGV5IHJlYWxpemUKICAgICAgICAgICAgICAgICAgICB0aGF0IHdpdGggaW50ZWdyaXR5IGFuZCBhZ3JlZW1lbnQgYW1vbmcgb3Vyc2VsdmVzIHdlIHNoYWxsIGVhc2lseSB0cml1bXBoLCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBncmFjZSBvZiB0aGUgZ29kcywgaWYgYW55b25lIHVuanVzdGx5IGF0dGFja3MgdXMsIGJ1dCB0aGF0IHdpdGggYnJpYmVyeSBhbmQKICAgICAgICAgICAgICAgICAgICB0cmVhc29uIGFuZCB0aGUgYWxsaWVkIHZpY2VzIHByYWN0aWNlZCBieSBtZW4gbGlrZSB0aGlzIG5vIGNpdHkgY291bGQgc3Vydml2ZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIEF0aGVuaWFucywgZG8gbm90IGFkbWl0IGFueQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qgb3IgcGxlYSBmb3IgcGl0eTsgZG8gbm90ICZsdDtjb25kb25lJmd0OyB0aGUgZ3VpbHQgd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzZWVuIGZhc3RlbmVkIHVwb24gdGhlIGRlZmVuZGFudHMgaW4gdGhlIHBsYWluIGxpZ2h0IG9mIGZhY3RzLCAmbHQ7b3IKICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlIHRoZSBjb3VuY2lsJ3MgcmVwb3J0Jmd0Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Tb21lCiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzIGhhdmUgY2xlYXJseSBkcm9wcGVkIG91dCBmcm9tIHRoaXMgcGFzc2FnZS4gTm8gY2VydGFpbiByZXN0b3JhdGlvbiBpcwogICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSwgYWx0aG91Z2ggdGhlIGdlbmVyYWwgc2Vuc2UgaXMgbm90IGRpZmZpY3VsdCB0byBjb25qZWN0dXJlLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdG9yYXRpb24gb2YgU2F1cHBlIGlzIGZvbGxvd2VkIGluIHRoZSB0cmFuc2xhdGlvbi48L25vdGU+OyBidXQgb25lIGFuZAogICAgICAgICAgICAgICAgICAgIGFsbCBhc3Npc3QgeW91ciBjb3VudHJ5IGFuZCB0aGUgbGF3cywgc2luY2UgYm90aCBhcmUgbm93IG9uIHRyaWFsIGFnYWluc3QgdGhpcwogICAgICAgICAgICAgICAgICAgIG1hbidzIGluaXF1aXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['3.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2hvbGUgY291bnRyeSB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWQgYnkgdGhlIHZlcmRpY3QgeW91IGFyZSBhYm91dCB0byBnaXZlOiB0aGUgc2hyaW5lcyB3aGljaCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBlcmVjdGVkIGluIGl0LCB0aGUgYWdlbG9uZyB0cmFkaXRpb25zLCBhbmQgdGhlIGNvbnN0aXR1dGlvbiB3aGljaCB5b3VyIGFuY2VzdG9ycwogICAgICAgICAgICAgICAgICAgIGhhdmUgaGFuZGVkIGRvd24gdG8geW91LiBJdCBpcyBub3QgYSBxdWVzdGlvbiBvZiBQaGlsb2NsZXMgYWxvbmU7IGZvciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQgaGltc2VsZiB0byBkZWF0aCBsb25nIGFnby4gSW4gYWRkcmVzc2luZyB0aGVzZSBlbnRyZWF0aWVzIHRvIHlvdSBJIGFtCiAgICAgICAgICAgICAgICAgICAgdXJnaW5nIGEgZmFyIGp1c3RlciBwbGVhIHRoYW4gdGhlIG1lbiB3aG8gaGF2ZSBjb21taXR0ZWQgdGhlc2Ugc2hhbWVmdWwgYWN0czogSQogICAgICAgICAgICAgICAgICAgIGFtIGFza2luZyB5b3Ugbm90IHRvIGRlc2VydCB0aGUgdGhpbmdzIGZvciB3aGljaCB5b3VyIGFuY2VzdG9ycyBmYWNlZCBtYW55CiAgICAgICAgICAgICAgICAgICAgZGFuZ2Vycywgbm90IHRvIHR1cm4gdGhlIGNpdHkncyBob25vciBpbnRvIHV0dGVyIHNoYW1lLCBhbmQgbm90IHRvIGxldCBwZXJzb25hbAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBmb3IgdGhlIGRlZmVuZGFudHMgb3ZlcnJpZGUgeW91ciByZXNwZWN0IGZvciB0aGUgbGF3cywgdGhlIHBlb3BsZSdzCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcywgYW5kIHRoZSByZXBvcnRzIG9mIHRoZSBjb3VuY2lsLiA8L3RyYW5zbGF0aW9uPg=="
