var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgaW4gYSB0aW1lIG9mIHNlZGl0aW9uLCB0aGUgYmFzZSBtYW4gdG9vIGlzIGluIGhvbm91ciw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGluIGEgdGltZSBvZiBzZWRpdGlvbiwgdGhlIGJhc2UgbWFuIHRvbyBpcyBpbiBob25vdXIsPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgcHJvdmVyYiBpbiBoZXhhbWV0ZXIgdmVyc2UsIGF0dHJpYnV0ZWQgdG8gQ2FsbGltYWNodXMgb2YgQWxleGFuZHJpYS4gUGx1dGFyY2ggdXNlcyBpdCBhbHNvIGluIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDExLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8L2JpYmw+LCBhbmQgaW4gLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDQ3OWEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiA0NzlhPC9iaWJsPi48L25vdGU+CgkJCQlhbmQgc28gaW4gUm9tZSBhdCB0aGF0IHRpbWUsIHNpbmNlIHRoZSBwZW9wbGUgd2FzIGNvcnJ1cHQgYW5kIHRoZWlyIGdvdmVybm1lbnQgaW4gYSBkaXN0ZW1wZXJlZCBzdGF0ZSwgbWVuIG9mIHZhcmlvdXMgb3JpZ2luIHJvc2UgdG8gcG93ZXIuIEFuZCBpdCB3YXMgbm8gd29uZGVyIHRoYXQgU3VsbGEgaGVsZCBzd2F5LCB3aGVuIHN1Y2ggbWVuIGFzIEdsYXVjaWEgYW5kIFNhdHVybmludXMgZHJvdmUgc3VjaCBtZW4gYXMgTWV0ZWxsdXMgZnJvbSB0aGUgY2l0eSwgd2hlbiBzb25zIG9mIGNvbnN1bHMgd2VyZSBidXRjaGVyZWQgaW4gYXNzZW1ibGllcywgd2hlbiBzaWx2ZXIgYW5kIGdvbGQgcHVyY2hhc2VkIGFybXMgYW5kIG1lbiB0byB3aWVsZCB0aGVtLCBhbmQgbGF3cyB3ZXJlIGVuYWN0ZWQgd2l0aCBmaXJlIGFuZCBzd29yZCBpbiBkZWZpYW5jZSBvZiBhbGwgb3Bwb3NpdGlvbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDExLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8L2JpYmw+LCBhbmQgaW4gLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeGkuIDM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDQ3OWEiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiA0NzlhPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiBwLiA0NzlhPC90cmFuc2xhdGlvbj4="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBJIGRvIG5vdCBibGFtZSB0aGUgbWFuIHdobywgaW4gc3VjaCBhIHN0YXRlIG9mIGFmZmFpcnMsIGZvcmNlZCBoaXMgd2F5IHRvIHN1cHJlbWUgcG93ZXI7IGJ1dCBJIGNhbm5vdCByZWdhcmQgaGlzIGJlY29taW5nIGZpcnN0IG1hbiwgd2hlbiB0aGUgY2l0eSB3YXMgaW4gc3VjaCBhbiBldmlsIHBsaWdodCwgYXMgYSBwcm9vZiB0aGF0IGhlIHdhcyBhbHNvIHRoZSBiZXN0IG1hbi4gV2hlcmVhcyBMeXNhbmRlciwgc2luY2UgU3BhcnRhIHdhcyBhdCB0aGUgaGVpZ2h0IG9mIGdvb2QgZ292ZXJubWVudCBhbmQgc29icmlldHkgd2hlbiBzaGUgc2VudCBoaW0gZm9ydGggdXBvbiB0aGUgZ3JlYXRlc3QgY29tbWFuZHMgYW5kIHVuZGVydGFraW5ncywgd2FzIHZpcnR1YWxseSBkZWNpZGVkIHRvIGJlIGZpcnN0IG9mIGhlciBmaXJzdCBtZW4sIGFuZCBiZXN0IG9mIGhlciBiZXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkx5c2FuZGVyLCB0aGVyZWZvcmUsIHRob3VnaCBoZSBvZnRlbiBzdXJyZW5kZXJlZCBoaXMgcG93ZXIgaW50byB0aGUgaGFuZHMgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgYXMgb2Z0ZW4gcmVjZWl2ZWQgaXQgYmFjayBhZ2Fpbiwgc2luY2UgdGhlIGhvbm91ciBhY2NvcmRlZCB0byB2aXJ0dWUgY29udGludWVkIHRvIHJhbmsgaGlnaGVzdCBpbiB0aGUgc3RhdGU7IGJ1dCBTdWxsYSwgd2hlbiBoZSBoYWQgb25jZSBiZWVuIGNob3NlbiBsZWFkZXIgb2YgYW4gYXJteSwgcmVtYWluZWQgaW4gYXJtcyBmb3IgdGVuIHllYXJzIHRvZ2V0aGVyLCBtYWtpbmcgaGltc2VsZiBub3cgY29uc3VsLCBhbmQgbm93IGRpY3RhdG9yLCBidXQgYWx3YXlzIGJlaW5nIGEgdXN1cnBlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyB0cnVlLCBpbmRlZWQsIHRoYXQgTHlzYW5kZXIgYXR0ZW1wdGVkLCBhcyBJIGhhdmUgc2FpZCwgdG8gY2hhbmdlIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQsIGJ1dCBpdCB3YXMgYnkgbWlsZGVyIGFuZCBtb3JlIGxlZ2FsIG1ldGhvZHMgdGhhbiBTdWxsYSdzOyBieSBwZXJzdWFzaW9uLCBuYW1lbHksIG5vdCBieSBmb3JjZSBvZiBhcm1zLCBub3IgYnkgc3VidmVydGluZyBldmVyeXRoaW5nIGF0IG9uY2UsIGFzIFN1bGxhIGRpZCwgYnV0IGJ5IGFtZW5kaW5nIG1lcmVseSB0aGUgYXBwb2ludG1lbnQgb2YgdGhlIGtpbmdzLiBBbmQgaXQgc2VlbWVkIGJ1dCBuYXR1cmFsIGp1c3RpY2UsIGluIGEgd2F5LCB0aGF0IHRoZSBiZXN0IG9mIHRoZSBiZXN0IHNob3VsZCBydWxlIGluIGEgY2l0eSB3aGljaCBoYWQgdGhlIGxlYWRlcnNoaXAgaW4gSGVsbGFzIGJ5IHZpcnR1ZSBvZiBoaXMgZXhjZWxsZW5jZSwgYW5kIG5vdCBvZiBoaXMgbm9ibGUgYmlydGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIGEgaHVudGVyIGxvb2tzIGZvciBhIGRvZywgYW5kIG5vdCB0aGUgd2hlbHAgb2YgYSBjZXJ0YWluIGJpdGNoLCBhbmQgYSBob3JzZW1hbiBmb3IgYSBob3JzZSwgYW5kIG5vdCB0aGUgZm9hbCBvZiBhIGNlcnRhaW4gbWFyZSAoZm9yIHdoYXQgaWYgdGhlIGZvYWwgc2hvdWxkIHByb3ZlIHRvIGJlIGEgbXVsZT8pLCBzbyB0aGUgc3RhdGVzbWFuIG1ha2VzIGFuIHV0dGVyIG1pc3Rha2UgaWYgaGUgZW5xdWlyZXMsIG5vdCB3aGF0IHNvcnQgb2YgYSBtYW4gdGhlIHJ1bGVyIGlzLCBidXQgZnJvbSB3aG9tIGhlIGlzIGRlc2NlbmRlZC4gQW5kIGluZGVlZCB0aGUgU3BhcnRhbnMgdGhlbXNlbHZlcyBkZXBvc2VkIHNvbWUgb2YgdGhlaXIga2luZ3MsIGZvciB0aGUgcmVhc29uIHRoYXQgdGhleSB3ZXJlIG5vdCBraW5nbHkgbWVuLCBidXQgaW5zaWduaWZpY2FudCBub2JvZGllcy4gQW5kIGlmIHZpY2UsIGV2ZW4gaW4gb25lIG9mIGFuY2llbnQgZmFtaWx5LCBpcyBkaXNob25vdXJhYmxlLCB0aGVuIGl0IG11c3QgYmUgdmlydHVlIGl0c2VsZiwgYW5kIG5vdCBnb29kIGJpcnRoLCB0aGF0IG1ha2VzIHZpcnR1ZSBob25vdXJhYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyB0cnVlLCBpbmRlZWQsIHRoYXQgTHlzYW5kZXIgYXR0ZW1wdGVkLCBhcyBJIGhhdmUgc2FpZCwgdG8gY2hhbmdlIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQsIGJ1dCBpdCB3YXMgYnkgbWlsZGVyIGFuZCBtb3JlIGxlZ2FsIG1ldGhvZHMgdGhhbiBTdWxsYSdzOyBieSBwZXJzdWFzaW9uLCBuYW1lbHksIG5vdCBieSBmb3JjZSBvZiBhcm1zLCBub3IgYnkgc3VidmVydGluZyBldmVyeXRoaW5nIGF0IG9uY2UsIGFzIFN1bGxhIGRpZCwgYnV0IGJ5IGFtZW5kaW5nIG1lcmVseSB0aGUgYXBwb2ludG1lbnQgb2YgdGhlIGtpbmdzLiBBbmQgaXQgc2VlbWVkIGJ1dCBuYXR1cmFsIGp1c3RpY2UsIGluIGEgd2F5LCB0aGF0IHRoZSBiZXN0IG9mIHRoZSBiZXN0IHNob3VsZCBydWxlIGluIGEgY2l0eSB3aGljaCBoYWQgdGhlIGxlYWRlcnNoaXAgaW4gSGVsbGFzIGJ5IHZpcnR1ZSBvZiBoaXMgZXhjZWxsZW5jZSwgYW5kIG5vdCBvZiBoaXMgbm9ibGUgYmlydGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIGEgaHVudGVyIGxvb2tzIGZvciBhIGRvZywgYW5kIG5vdCB0aGUgd2hlbHAgb2YgYSBjZXJ0YWluIGJpdGNoLCBhbmQgYSBob3JzZW1hbiBmb3IgYSBob3JzZSwgYW5kIG5vdCB0aGUgZm9hbCBvZiBhIGNlcnRhaW4gbWFyZSAoZm9yIHdoYXQgaWYgdGhlIGZvYWwgc2hvdWxkIHByb3ZlIHRvIGJlIGEgbXVsZT8pLCBzbyB0aGUgc3RhdGVzbWFuIG1ha2VzIGFuIHV0dGVyIG1pc3Rha2UgaWYgaGUgZW5xdWlyZXMsIG5vdCB3aGF0IHNvcnQgb2YgYSBtYW4gdGhlIHJ1bGVyIGlzLCBidXQgZnJvbSB3aG9tIGhlIGlzIGRlc2NlbmRlZC4gQW5kIGluZGVlZCB0aGUgU3BhcnRhbnMgdGhlbXNlbHZlcyBkZXBvc2VkIHNvbWUgb2YgdGhlaXIga2luZ3MsIGZvciB0aGUgcmVhc29uIHRoYXQgdGhleSB3ZXJlIG5vdCBraW5nbHkgbWVuLCBidXQgaW5zaWduaWZpY2FudCBub2JvZGllcy4gQW5kIGlmIHZpY2UsIGV2ZW4gaW4gb25lIG9mIGFuY2llbnQgZmFtaWx5LCBpcyBkaXNob25vdXJhYmxlLCB0aGVuIGl0IG11c3QgYmUgdmlydHVlIGl0c2VsZiwgYW5kIG5vdCBnb29kIGJpcnRoLCB0aGF0IG1ha2VzIHZpcnR1ZSBob25vdXJhYmxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIGFjdHMgb2YgaW5qdXN0aWNlIHdoaWNoIG9uZSB3cm91Z2h0LCB3ZXJlIGluIGJlaGFsZiBvZiBoaXMgZnJpZW5kczsgd2hpbGUgdGhlIG90aGVyJ3MgZXh0ZW5kZWQgdG8gaGlzIGZyaWVuZHMuIEZvciBpdCBpcyBnZW5lcmFsbHkgYWdyZWVkIHRoYXQgTHlzYW5kZXIgY29tbWl0dGVkIHRoZSBtb3N0IG9mIGhpcyB0cmFuc2dyZXNzaW9ucyBmb3IgdGhlIHNha2Ugb2YgaGlzIGNvbXJhZGVzLCBhbmQgdGhhdCBtb3N0IG9mIGhpcyBtYXNzYWNyZXMgd2VyZSBwZXJwZXRyYXRlZCB0byBtYWludGFpbiB0aGVpciBwb3dlciBhbmQgc292ZXJlaWdudHk7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBTdWxsYSBjdXQgZG93biB0aGUgbnVtYmVyIG9mIFBvbXBleSdzIHNvbGRpZXJzIG91dCBvZiBqZWFsb3VzeSwgYW5kIHRyaWVkIHRvIHRha2UgYXdheSBmcm9tIERvbGFiZWxsYSB0aGUgbmF2YWwgY29tbWFuZCB3aGljaCBoZSBoYWQgZ2l2ZW4gaGltLCBhbmQgd2hlbiBMdWNyZXRpdXMgT2ZlbGxhIHN1ZWQgZm9yIHRoZSBjb25zdWxzaGlwIGFzIGEgcmV3YXJkIGZvciBtYW55IGdyZWF0IHNlcnZpY2VzLCBvcmRlcmVkIGhpbSB0byBiZSBzbGFpbiBiZWZvcmUgaGlzIGV5ZXMsIGNhdXNpbmcgYWxsIG1lbiB0byByZWdhcmQgaGltIHdpdGggZmVhciBhbmQgaG9ycm9yIGJlY2F1c2Ugb2YgaGlzIG11cmRlcmluZyBoaXMgZGVhcmVzdCBmcmllbmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgYWN0cyBvZiBpbmp1c3RpY2Ugd2hpY2ggb25lIHdyb3VnaHQsIHdlcmUgaW4gYmVoYWxmIG9mIGhpcyBmcmllbmRzOyB3aGlsZSB0aGUgb3RoZXIncyBleHRlbmRlZCB0byBoaXMgZnJpZW5kcy4gRm9yIGl0IGlzIGdlbmVyYWxseSBhZ3JlZWQgdGhhdCBMeXNhbmRlciBjb21taXR0ZWQgdGhlIG1vc3Qgb2YgaGlzIHRyYW5zZ3Jlc3Npb25zIGZvciB0aGUgc2FrZSBvZiBoaXMgY29tcmFkZXMsIGFuZCB0aGF0IG1vc3Qgb2YgaGlzIG1hc3NhY3JlcyB3ZXJlIHBlcnBldHJhdGVkIHRvIG1haW50YWluIHRoZWlyIHBvd2VyIGFuZCBzb3ZlcmVpZ250eTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBTdWxsYSBjdXQgZG93biB0aGUgbnVtYmVyIG9mIFBvbXBleSdzIHNvbGRpZXJzIG91dCBvZiBqZWFsb3VzeSwgYW5kIHRyaWVkIHRvIHRha2UgYXdheSBmcm9tIERvbGFiZWxsYSB0aGUgbmF2YWwgY29tbWFuZCB3aGljaCBoZSBoYWQgZ2l2ZW4gaGltLCBhbmQgd2hlbiBMdWNyZXRpdXMgT2ZlbGxhIHN1ZWQgZm9yIHRoZSBjb25zdWxzaGlwIGFzIGEgcmV3YXJkIGZvciBtYW55IGdyZWF0IHNlcnZpY2VzLCBvcmRlcmVkIGhpbSB0byBiZSBzbGFpbiBiZWZvcmUgaGlzIGV5ZXMsIGNhdXNpbmcgYWxsIG1lbiB0byByZWdhcmQgaGltIHdpdGggZmVhciBhbmQgaG9ycm9yIGJlY2F1c2Ugb2YgaGlzIG11cmRlcmluZyBoaXMgZGVhcmVzdCBmcmllbmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIGluIHRoZWlyIHB1cnN1aXQgb2YgcmljaGVzIGFuZCBwbGVhc3VyZXMgd2UgZGlzY292ZXIgdGhhdCB0aGUgcHVycG9zZSBvZiBvbmUgd2FzIG1vcmUgYmVmaXR0aW5nIGEgY29tbWFuZGVyLCB0aGF0IG9mIHRoZSBvdGhlciBtb3JlIGNoYXJhY3RlcmlzdGljIG9mIGEgdHlyYW50LiBGb3IgTHlzYW5kZXIgYXBwZWFycyB0byBoYXZlIHBlcnBldHJhdGVkIG5vIGFjdCBvZiB3YW50b25uZXNzIG9yIHlvdXRoZnVsIGZvbGx5IHdoaWxlIGhlIGVuam95ZWQgc3VjaCBncmVhdCBhdXRob3JpdHkgYW5kIHBvd2VyLCBuYXksIGlmIGV2ZXIgbWFuIGRpZCwgaGUgYXZvaWRlZCB0aGUgcHJhaXNlIGFuZCByZXByb2FjaCBvZiB0aGUgcHJvdmVyYjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaW9ucyBhdCBob21lLCBidXQgZm94ZXMgYWJyb2FkPC9xPjsgc28gc29iZXIsIFNwYXJ0YW4sIGFuZCByZXN0cmFpbmVkIHdhcyB0aGUgd2F5IG9mIGxpZmUgd2hpY2ggaGUgZXZlcnl3aGVyZSBtYW5pZmVzdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgYWxsb3dlZCBuZWl0aGVyIHRoZSBwb3ZlcnR5IG9mIGhpcyB5b3V0aCB0byBzZXQgYm91bmRzIHRvIGhpcyBkZXNpcmU7IG5vciB0aGUgeWVhcnMgb2YgaGlzIG9sZCBhZ2UsIGJ1dCBjb250aW51ZWQgdG8gaW50cm9kdWNlIG1hcnJpYWdlIGFuZCBzdW1wdHVhcnkgbGF3cyBmb3IgdGhlIGNpdGl6ZW5zLCB3aGlsZSBoZSBoaW1zZWxmIHdhcyBsaXZpbmcgaW4gbGV3ZG5lc3MgYW5kIGFkdWx0ZXJ5LCBhcyBTYWxsdXN0IHNheXMuIEluIHRoZXNlIGNvdXJzZXMgaGUgc28gYmVnZ2FyZWQgYW5kIGVtcHRpZWQgdGhlIGNpdHkgb2YgaGVyIHdlYWx0aCB0aGF0IGhlIHNvbGQgdG8gYWxsaWVkIGFuZCBmcmllbmRseSBjaXRpZXMgdGhlaXIgZnJlZWRvbSBhbmQgaW5kZXBlbmRlbmNlIGZvciBtb25leSwgYWx0aG91Z2ggaGUgd2FzIGRhaWx5IGNvbmZpc2NhdGluZyBhbmQgc2VsbGluZyBhdCBwdWJsaWMgYXVjdGlvbiB0aGUgd2VhbHRoaWVzdCBhbmQgZ3JlYXRlc3QgZXN0YXRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCB0aGVyZSB3YXMgbm8gbWVhc3VyaW5nIHdoYXQgaGUgbGF2aXNobHkgc3F1YW5kZXJlZCBhbmQgdGhyZXcgYXdheSB1cG9uIGhpcyBmbGF0dGVyZXJzLiBGb3Igd2hhdCBjYWxjdWxhdGlvbiBvciBlY29ub215IGNvdWxkIGJlIGV4cGVjdGVkIGluIGhpcyBjb252aXZpYWwgYXNzb2NpYXRpb25zIGFuZCBkZWxpZ2h0cywgd2hlbiwgb24gYSBwdWJsaWMgb2NjYXNpb24sIHdpdGggdGhlIHBlb3BsZSBzdGFuZGluZyBhYm91dCwgYXQgdGhlIHNhbGUgb2YgYSBsYXJnZSBwcm9wZXJ0eSwgaGUgb3JkZXJlZCB0aGUgY3JpZXIgdG8ga25vY2sgaXQgZG93biB0byBvbmUgb2YgaGlzIGZyaWVuZHMgYXQgYSBub21pbmFsIHByaWNlLCBhbmQgd2hlbiBhbm90aGVyIGJpZGRlciByYWlzZWQgdGhlIHByaWNlIGFuZCB0aGUgY3JpZXIgYW5ub3VuY2VkIHRoZSBhZHZhbmNlLCBoZSBmbGV3IGludG8gYSByYWdlLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgYSBkcmVhZGZ1bCB3cm9uZywgbXkgZGVhciBjaXRpemVucywgYW5kIGEgcGllY2Ugb2YgdXN1cnBhdGlvbiwgdGhhdCBJIGNhbm5vdCBkaXNwb3NlIG9mIG15IG93biBzcG9pbHMgYXMgSSB3aXNoLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTHlzYW5kZXIgc2VudCBob21lIGZvciBwdWJsaWMgdXNlIGV2ZW4gdGhlIHByZXNlbnRzIHdoaWNoIGhhZCBiZWVuIGdpdmVuIHRvIGhpbSBhbG9uZyB3aXRoIHRoZSByZXN0IG9mIGhpcyBzcG9pbHMuIE5vdCB0aGF0IEkgY29tbWVuZCB3aGF0IGhlIGRpZDsgZm9yIGhlLCBwZXJoYXBzLCBieSBoaXMgYWNxdWlzaXRpb24gb2YgbW9uZXkgZm9yIFNwYXJ0YSwgaW5qdXJlZCBoZXIgbW9yZSB0aGFuIFN1bGxhIGluanVyZWQgUm9tZSBieSByb2JiaW5nIGhlciBvZiBpdDsgYnV0IEkgb2ZmZXIgdGhpcyBhcyBhIHByb29mIG9mIHRoZSBtYW4ncyBpbmRpZmZlcmVuY2UgdG8gcmljaGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgZWFjaCBoYWQgYSBwZWN1bGlhciBleHBlcmllbmNlIHdpdGggaGlzIG93biBjaXR5LiBTdWxsYSwgd2hvIGtuZXcgbm8gcmVzdHJhaW50IGluIGhpcyBleHRyYXZhZ2FuY2UsIHRyaWVkIHRvIGJyaW5nIHRoZSBjaXRpemVucyBpbnRvIHdheXMgb2Ygc29icmlldHk7IHdoaWxlIEx5c2FuZGVyIGZpbGxlZCBoaXMgY2l0eSB3aXRoIHRoZSBwYXNzaW9ucyB0byB3aGljaCBoZSBoaW1zZWxmIHdhcyBhIHN0cmFuZ2VyLiBUaGUgZm9ybWVyIGVycmVkLCB0aGVyZWZvcmUsIGluIGZhbGxpbmcgYmVsb3cgdGhlIHN0YW5kYXJkIG9mIGhpcyBvd24gbGF3czsgdGhlIGxhdHRlciwgaW4gY2F1c2luZyB0aGUgY2l0aXplbnMgdG8gZmFsbCBiZWxvdyBoaXMgb3duIHN0YW5kYXJkLCBzaW5jZSBoZSB0YXVnaHQgU3BhcnRhIHRvIHdhbnQgd2hhdCBoZSBoaW1zZWxmIGhhZCBsZWFybmVkIG5vdCB0byB3YW50LiBTdWNoIHdhcyB0aGVpciBpbmZsdWVuY2UgYXMgc3RhdGVzbWVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCBmdXJ0aGVyLCBpbiB0aGVpciBwdXJzdWl0IG9mIHJpY2hlcyBhbmQgcGxlYXN1cmVzIHdlIGRpc2NvdmVyIHRoYXQgdGhlIHB1cnBvc2Ugb2Ygb25lIHdhcyBtb3JlIGJlZml0dGluZyBhIGNvbW1hbmRlciwgdGhhdCBvZiB0aGUgb3RoZXIgbW9yZSBjaGFyYWN0ZXJpc3RpYyBvZiBhIHR5cmFudC4gRm9yIEx5c2FuZGVyIGFwcGVhcnMgdG8gaGF2ZSBwZXJwZXRyYXRlZCBubyBhY3Qgb2Ygd2FudG9ubmVzcyBvciB5b3V0aGZ1bCBmb2xseSB3aGlsZSBoZSBlbmpveWVkIHN1Y2ggZ3JlYXQgYXV0aG9yaXR5IGFuZCBwb3dlciwgbmF5LCBpZiBldmVyIG1hbiBkaWQsIGhlIGF2b2lkZWQgdGhlIHByYWlzZSBhbmQgcmVwcm9hY2ggb2YgdGhlIHByb3ZlcmI6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MaW9ucyBhdCBob21lLCBidXQgZm94ZXMgYWJyb2FkPC9xPjsgc28gc29iZXIsIFNwYXJ0YW4sIGFuZCByZXN0cmFpbmVkIHdhcyB0aGUgd2F5IG9mIGxpZmUgd2hpY2ggaGUgZXZlcnl3aGVyZSBtYW5pZmVzdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSBhbGxvd2VkIG5laXRoZXIgdGhlIHBvdmVydHkgb2YgaGlzIHlvdXRoIHRvIHNldCBib3VuZHMgdG8gaGlzIGRlc2lyZTsgbm9yIHRoZSB5ZWFycyBvZiBoaXMgb2xkIGFnZSwgYnV0IGNvbnRpbnVlZCB0byBpbnRyb2R1Y2UgbWFycmlhZ2UgYW5kIHN1bXB0dWFyeSBsYXdzIGZvciB0aGUgY2l0aXplbnMsIHdoaWxlIGhlIGhpbXNlbGYgd2FzIGxpdmluZyBpbiBsZXdkbmVzcyBhbmQgYWR1bHRlcnksIGFzIFNhbGx1c3Qgc2F5cy4gSW4gdGhlc2UgY291cnNlcyBoZSBzbyBiZWdnYXJlZCBhbmQgZW1wdGllZCB0aGUgY2l0eSBvZiBoZXIgd2VhbHRoIHRoYXQgaGUgc29sZCB0byBhbGxpZWQgYW5kIGZyaWVuZGx5IGNpdGllcyB0aGVpciBmcmVlZG9tIGFuZCBpbmRlcGVuZGVuY2UgZm9yIG1vbmV5LCBhbHRob3VnaCBoZSB3YXMgZGFpbHkgY29uZmlzY2F0aW5nIGFuZCBzZWxsaW5nIGF0IHB1YmxpYyBhdWN0aW9uIHRoZSB3ZWFsdGhpZXN0IGFuZCBncmVhdGVzdCBlc3RhdGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgdGhlcmUgd2FzIG5vIG1lYXN1cmluZyB3aGF0IGhlIGxhdmlzaGx5IHNxdWFuZGVyZWQgYW5kIHRocmV3IGF3YXkgdXBvbiBoaXMgZmxhdHRlcmVycy4gRm9yIHdoYXQgY2FsY3VsYXRpb24gb3IgZWNvbm9teSBjb3VsZCBiZSBleHBlY3RlZCBpbiBoaXMgY29udml2aWFsIGFzc29jaWF0aW9ucyBhbmQgZGVsaWdodHMsIHdoZW4sIG9uIGEgcHVibGljIG9jY2FzaW9uLCB3aXRoIHRoZSBwZW9wbGUgc3RhbmRpbmcgYWJvdXQsIGF0IHRoZSBzYWxlIG9mIGEgbGFyZ2UgcHJvcGVydHksIGhlIG9yZGVyZWQgdGhlIGNyaWVyIHRvIGtub2NrIGl0IGRvd24gdG8gb25lIG9mIGhpcyBmcmllbmRzIGF0IGEgbm9taW5hbCBwcmljZSwgYW5kIHdoZW4gYW5vdGhlciBiaWRkZXIgcmFpc2VkIHRoZSBwcmljZSBhbmQgdGhlIGNyaWVyIGFubm91bmNlZCB0aGUgYWR2YW5jZSwgaGUgZmxldyBpbnRvIGEgcmFnZSwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgYSBkcmVhZGZ1bCB3cm9uZywgbXkgZGVhciBjaXRpemVucywgYW5kIGEgcGllY2Ugb2YgdXN1cnBhdGlvbiwgdGhhdCBJIGNhbm5vdCBkaXNwb3NlIG9mIG15IG93biBzcG9pbHMgYXMgSSB3aXNoLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMeXNhbmRlciBzZW50IGhvbWUgZm9yIHB1YmxpYyB1c2UgZXZlbiB0aGUgcHJlc2VudHMgd2hpY2ggaGFkIGJlZW4gZ2l2ZW4gdG8gaGltIGFsb25nIHdpdGggdGhlIHJlc3Qgb2YgaGlzIHNwb2lscy4gTm90IHRoYXQgSSBjb21tZW5kIHdoYXQgaGUgZGlkOyBmb3IgaGUsIHBlcmhhcHMsIGJ5IGhpcyBhY3F1aXNpdGlvbiBvZiBtb25leSBmb3IgU3BhcnRhLCBpbmp1cmVkIGhlciBtb3JlIHRoYW4gU3VsbGEgaW5qdXJlZCBSb21lIGJ5IHJvYmJpbmcgaGVyIG9mIGl0OyBidXQgSSBvZmZlciB0aGlzIGFzIGEgcHJvb2Ygb2YgdGhlIG1hbidzIGluZGlmZmVyZW5jZSB0byByaWNoZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBlYWNoIGhhZCBhIHBlY3VsaWFyIGV4cGVyaWVuY2Ugd2l0aCBoaXMgb3duIGNpdHkuIFN1bGxhLCB3aG8ga25ldyBubyByZXN0cmFpbnQgaW4gaGlzIGV4dHJhdmFnYW5jZSwgdHJpZWQgdG8gYnJpbmcgdGhlIGNpdGl6ZW5zIGludG8gd2F5cyBvZiBzb2JyaWV0eTsgd2hpbGUgTHlzYW5kZXIgZmlsbGVkIGhpcyBjaXR5IHdpdGggdGhlIHBhc3Npb25zIHRvIHdoaWNoIGhlIGhpbXNlbGYgd2FzIGEgc3RyYW5nZXIuIFRoZSBmb3JtZXIgZXJyZWQsIHRoZXJlZm9yZSwgaW4gZmFsbGluZyBiZWxvdyB0aGUgc3RhbmRhcmQgb2YgaGlzIG93biBsYXdzOyB0aGUgbGF0dGVyLCBpbiBjYXVzaW5nIHRoZSBjaXRpemVucyB0byBmYWxsIGJlbG93IGhpcyBvd24gc3RhbmRhcmQsIHNpbmNlIGhlIHRhdWdodCBTcGFydGEgdG8gd2FudCB3aGF0IGhlIGhpbXNlbGYgaGFkIGxlYXJuZWQgbm90IHRvIHdhbnQuIFN1Y2ggd2FzIHRoZWlyIGluZmx1ZW5jZSBhcyBzdGF0ZXNtZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHJlZ2FyZHMgY29udGVzdHMgaW4gd2FyLCBhY2hpZXZlbWVudHMgaW4gZ2VuZXJhbHNoaXAsIG51bWJlciBvZiB0cm9waGllcywgYW5kIG1hZ25pdHVkZSBvZiBkYW5nZXJzIGVuY291bnRlcmVkLCBTdWxsYSBpcyBiZXlvbmQgY29tcGFyZS4gTHlzYW5kZXIsIGl0IGlzIHRydWUsIHdvbiB0d28gdmljdG9yaWVzIGluIGFzIG1hbnkgbmF2YWwgYmF0dGxlczsgYW5kIEkgd2lsbCBhZGQgdG8gaGlzIGV4cGxvaXRzIGhpcyBzaWVnZSBvZiBBdGhlbnMsIHdoaWNoIHdhcyByZWFsbHkgbm90IGEgZ3JlYXQgYWZmYWlyLCBhbHRob3VnaCB0aGUgcmVwdXRhdGlvbiBvZiBpdCB3YXMgbW9zdCBicmlsbGlhbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoYXQgb2NjdXJyZWQgaW4gQm9lb3RpYSBhbmQgYXQgSGFsaWFydHVzLCB3YXMgZHVlLCBwZXJoYXBzLCB0byBhIGNlcnRhaW4gZXZpbCBmb3J0dW5lOyBidXQgaXQgbG9va3MgYXMgdGhvdWdoIGhlIHdhcyBpbmp1ZGljaW91cyBpbiBub3Qgd2FpdGluZyBmb3IgdGhlIGxhcmdlIGZvcmNlcyBvZiB0aGUga2luZywgd2hpY2ggaGFkIGFsbCBidXQgYXJyaXZlZCBmcm9tIFBsYXRhZWEsIGluc3RlYWQgb2YgYWxsb3dpbmcgaGlzIHJlc2VudG1lbnQgYW5kIGFtYml0aW9uIHRvIGxlYWQgaGltIGludG8gYW4gaW5vcHBvcnR1bmUgYXNzYXVsdCB1cG9uIHRoZSB3YWxscywgd2l0aCB0aGUgcmVzdWx0IHRoYXQgYW4gaW5jb25zaWRlcmFibGUgYW5kIHJhbmRvbSBib2R5IG9mIG1lbiBzYWxsaWVkIG91dCBhbmQgb3ZlcndoZWxtZWQgaGltLiBGb3IgaGUgcmVjZWl2ZWQgaGlzIGRlYXRoIHdvdW5kLCBub3QgYXMgQ2xlb21icm90dXMgZGlkLCBhdCBMZXVjdHJhLCBzdGFuZGluZyBmaXJtIGFnYWluc3QgdGhlIGVuZW15J3Mgb25zZXRzLCBub3IgYXMgQ3lydXMgZGlkLCBvciBFcGFtaW5vbmRhcywgcmFsbHlpbmcgaGlzIG1lbiBhbmQgYXNzdXJpbmcgdGhlIHZpY3RvcnkgdG8gdGhlbTsgdGhlc2UgYWxsIGRpZWQgdGhlIGRlYXRoIG9mIGtpbmdzIGFuZCBnZW5lcmFscy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEx5c2FuZGVyIHRocmV3IGF3YXkgaGlzIGxpZmUgaW4gZ2xvcmlvdXNseSwgbGlrZSBhIGNvbW1vbiB0YXJnZXRlZXIgb3Igc2tpcm1pc2hlciwgYW5kIGJvcmUgd2l0bmVzcyB0byB0aGUgd2lzZG9tIG9mIHRoZSBhbmNpZW50IFNwYXJ0YW5zIGluIGF2b2lkaW5nIGFzc2F1bHRzIG9uIHdhbGxlZCBjaXRpZXMsIHdoZXJlIG5vdCBvbmx5IGFuIG9yZGluYXJ5IG1hbiwgYnV0IGV2ZW4gYSBjaGlsZCBvciBhIHdvbWFuIG1heSBjaGFuY2UgdG8gc21pdGUgYW5kIHNsYXkgdGhlIG1pZ2h0aWVzdCB3YXJyaW9yLCBhcyBBY2hpbGxlcywgdGhleSBzYXksIHdhcyBzbGFpbiBieSBQYXJpcyBhdCB0aGUgZ2F0ZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgcmVnYXJkcyBjb250ZXN0cyBpbiB3YXIsIGFjaGlldmVtZW50cyBpbiBnZW5lcmFsc2hpcCwgbnVtYmVyIG9mIHRyb3BoaWVzLCBhbmQgbWFnbml0dWRlIG9mIGRhbmdlcnMgZW5jb3VudGVyZWQsIFN1bGxhIGlzIGJleW9uZCBjb21wYXJlLiBMeXNhbmRlciwgaXQgaXMgdHJ1ZSwgd29uIHR3byB2aWN0b3JpZXMgaW4gYXMgbWFueSBuYXZhbCBiYXR0bGVzOyBhbmQgSSB3aWxsIGFkZCB0byBoaXMgZXhwbG9pdHMgaGlzIHNpZWdlIG9mIEF0aGVucywgd2hpY2ggd2FzIHJlYWxseSBub3QgYSBncmVhdCBhZmZhaXIsIGFsdGhvdWdoIHRoZSByZXB1dGF0aW9uIG9mIGl0IHdhcyBtb3N0IGJyaWxsaWFudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoYXQgb2NjdXJyZWQgaW4gQm9lb3RpYSBhbmQgYXQgSGFsaWFydHVzLCB3YXMgZHVlLCBwZXJoYXBzLCB0byBhIGNlcnRhaW4gZXZpbCBmb3J0dW5lOyBidXQgaXQgbG9va3MgYXMgdGhvdWdoIGhlIHdhcyBpbmp1ZGljaW91cyBpbiBub3Qgd2FpdGluZyBmb3IgdGhlIGxhcmdlIGZvcmNlcyBvZiB0aGUga2luZywgd2hpY2ggaGFkIGFsbCBidXQgYXJyaXZlZCBmcm9tIFBsYXRhZWEsIGluc3RlYWQgb2YgYWxsb3dpbmcgaGlzIHJlc2VudG1lbnQgYW5kIGFtYml0aW9uIHRvIGxlYWQgaGltIGludG8gYW4gaW5vcHBvcnR1bmUgYXNzYXVsdCB1cG9uIHRoZSB3YWxscywgd2l0aCB0aGUgcmVzdWx0IHRoYXQgYW4gaW5jb25zaWRlcmFibGUgYW5kIHJhbmRvbSBib2R5IG9mIG1lbiBzYWxsaWVkIG91dCBhbmQgb3ZlcndoZWxtZWQgaGltLiBGb3IgaGUgcmVjZWl2ZWQgaGlzIGRlYXRoIHdvdW5kLCBub3QgYXMgQ2xlb21icm90dXMgZGlkLCBhdCBMZXVjdHJhLCBzdGFuZGluZyBmaXJtIGFnYWluc3QgdGhlIGVuZW15J3Mgb25zZXRzLCBub3IgYXMgQ3lydXMgZGlkLCBvciBFcGFtaW5vbmRhcywgcmFsbHlpbmcgaGlzIG1lbiBhbmQgYXNzdXJpbmcgdGhlIHZpY3RvcnkgdG8gdGhlbTsgdGhlc2UgYWxsIGRpZWQgdGhlIGRlYXRoIG9mIGtpbmdzIGFuZCBnZW5lcmFscy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBMeXNhbmRlciB0aHJldyBhd2F5IGhpcyBsaWZlIGluIGdsb3Jpb3VzbHksIGxpa2UgYSBjb21tb24gdGFyZ2V0ZWVyIG9yIHNraXJtaXNoZXIsIGFuZCBib3JlIHdpdG5lc3MgdG8gdGhlIHdpc2RvbSBvZiB0aGUgYW5jaWVudCBTcGFydGFucyBpbiBhdm9pZGluZyBhc3NhdWx0cyBvbiB3YWxsZWQgY2l0aWVzLCB3aGVyZSBub3Qgb25seSBhbiBvcmRpbmFyeSBtYW4sIGJ1dCBldmVuIGEgY2hpbGQgb3IgYSB3b21hbiBtYXkgY2hhbmNlIHRvIHNtaXRlIGFuZCBzbGF5IHRoZSBtaWdodGllc3Qgd2FycmlvciwgYXMgQWNoaWxsZXMsIHRoZXkgc2F5LCB3YXMgc2xhaW4gYnkgUGFyaXMgYXQgdGhlIGdhdGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBTdWxsYSdzIGNhc2UsIGF0IGFueSByYXRlLCBpdCBpcyBubyBlYXN5IG1hdHRlciBldmVuIHRvIGVudW1lcmF0ZSB0aGUgcGl0Y2hlZCBiYXR0bGVzIHdoaWNoIGhlIHdvbiBhbmQgdGhlIG15cmlhZHMgb2YgZW5lbWllcyB3aG9tIGhlIHNsZXc7IFJvbWUgaXRzZWxmIGhlIGNhcHR1cmVkIHR3aWNlLCBhbmQgaGUgdG9vayB0aGUgUGlyYWV1cyBvZiBBdGhlbnMsIG5vdCBieSBmYW1pbmUsIGFzIEx5c2FuZGVyIGRpZCwgYnV0IGJ5IGEgc2VyaWVzIG9mIGdyZWF0IGJhdHRsZXMsIGFmdGVyIGhlIGhhZCBkcml2ZW4gQXJjaGVsYcO8cyBmcm9tIHRoZSBsYW5kIHRvIHRoZSBzZWEuIEl0IGlzIGltcG9ydGFudCwgdG9vLCB0aGF0IHdlIGNvbnNpZGVyIHRoZSBjaGFyYWN0ZXIgb2YgdGhlaXIgYW50YWdvbmlzdHMuIEZvciBJIHRoaW5rIGl0IHdhcyB0aGUgbWVyZXN0IGNoaWxkJ3MgcGxheSB0byB3aW4gYSBzZWEtZmlnaHQgYWdhaW5zdCBBbnRpb2NoaXVzLCBBbGNpYmlhZGVzJyBwaWxvdCwgb3IgdG8gb3V0d2l0IFBoaWxvY2xlcywgdGhlIEF0aGVuaWFuIGRlbWFnb2d1ZSwKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+SW5nbG9yaW91cyBmb2UsIHdob3NlIG9ubHkgd2VhcG9uIGlzIGEgc2hhcnBlbmVkIHRvbmd1ZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgb2YgdW5rbm93biBhdXRob3JzaGlwIChOYXVjaywgPHRpdGxlPlRyYWcuIEdyYWVjLiBGcmFnLjwvdGl0bGU+MiBwLiA5MjEpLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJc3VjaCBtZW4gYXMgdGhlc2UgTWl0aHJpZGF0ZXMgd291bGQgbm90IGhhdmUgZGVpZ25lZCB0byBjb21wYXJlIHdpdGggaGlzIGdyb29tLCBub3IgTWFyaXVzIHdpdGggaGlzIGxpY3Rvci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9mIHRoZSBkeW5hc3RzLCBjb25zdWxzLCBnZW5lcmFscywgYW5kIGRlbWFnb2d1ZXMgd2hvIGxpZnRlZCB0aGVtc2VsdmVzIGFnYWluc3QgU3VsbGEsIHRvIHBhc3MgYnkgdGhlIHJlc3QsIHdobyBhbW9uZyB0aGUgUm9tYW5zIHdhcyBtb3JlIGZvcm1pZGFibGUgdGhhbiBNYXJpdXM/IHdobyBhbW9uZyB0aGUga2luZ3Mgd2FzIG1vcmUgcG93ZXJmdWwgdGhhbiBNaXRocmlkYXRlcz8gd2hvIGFtb25nIHRoZSBJdGFsaWFucyB3YXMgbW9yZSB3YXJsaWtlIHRoYW4gTGFtcG9uaXVzIGFuZCBUZWxlc2ludXM/IEFuZCB5ZXQgU3VsbGEgYmFuaXNoZWQgdGhlIGZpcnN0IG9mIHRoZXNlLCBzdWJkdWVkIHRoZSBzZWNvbmQsIGFuZCBzbGV3IHRoZSBvdGhlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIFN1bGxhJ3MgY2FzZSwgYXQgYW55IHJhdGUsIGl0IGlzIG5vIGVhc3kgbWF0dGVyIGV2ZW4gdG8gZW51bWVyYXRlIHRoZSBwaXRjaGVkIGJhdHRsZXMgd2hpY2ggaGUgd29uIGFuZCB0aGUgbXlyaWFkcyBvZiBlbmVtaWVzIHdob20gaGUgc2xldzsgUm9tZSBpdHNlbGYgaGUgY2FwdHVyZWQgdHdpY2UsIGFuZCBoZSB0b29rIHRoZSBQaXJhZXVzIG9mIEF0aGVucywgbm90IGJ5IGZhbWluZSwgYXMgTHlzYW5kZXIgZGlkLCBidXQgYnkgYSBzZXJpZXMgb2YgZ3JlYXQgYmF0dGxlcywgYWZ0ZXIgaGUgaGFkIGRyaXZlbiBBcmNoZWxhw7xzIGZyb20gdGhlIGxhbmQgdG8gdGhlIHNlYS4gSXQgaXMgaW1wb3J0YW50LCB0b28sIHRoYXQgd2UgY29uc2lkZXIgdGhlIGNoYXJhY3RlciBvZiB0aGVpciBhbnRhZ29uaXN0cy4gRm9yIEkgdGhpbmsgaXQgd2FzIHRoZSBtZXJlc3QgY2hpbGQncyBwbGF5IHRvIHdpbiBhIHNlYS1maWdodCBhZ2FpbnN0IEFudGlvY2hpdXMsIEFsY2liaWFkZXMnIHBpbG90LCBvciB0byBvdXR3aXQgUGhpbG9jbGVzLCB0aGUgQXRoZW5pYW4gZGVtYWdvZ3VlLAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SW5nbG9yaW91cyBmb2UsIHdob3NlIG9ubHkgd2VhcG9uIGlzIGEgc2hhcnBlbmVkIHRvbmd1ZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlhbWJpYyB0cmltZXRlciBvZiB1bmtub3duIGF1dGhvcnNoaXAgKE5hdWNrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFnLiBHcmFlYy4gRnJhZy48L3RpdGxlPjIgcC4gOTIxKS48L25vdGU+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCXN1Y2ggbWVuIGFzIHRoZXNlIE1pdGhyaWRhdGVzIHdvdWxkIG5vdCBoYXZlIGRlaWduZWQgdG8gY29tcGFyZSB3aXRoIGhpcyBncm9vbSwgbm9yIE1hcml1cyB3aXRoIGhpcyBsaWN0b3IuIAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Jbmdsb3Jpb3VzIGZvZSwgd2hvc2Ugb25seSB3ZWFwb24gaXMgYSBzaGFycGVuZWQgdG9uZ3VlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaWFtYmljIHRyaW1ldGVyIG9mIHVua25vd24gYXV0aG9yc2hpcCAoTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjwvdGl0bGU+MiBwLiA5MjEpLjwvbm90ZT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlhbWJpYyB0cmltZXRlciBvZiB1bmtub3duIGF1dGhvcnNoaXAgKE5hdWNrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFnLiBHcmFlYy4gRnJhZy48L3RpdGxlPjIgcC4gOTIxKS48L25vdGU+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjwvdGl0bGU+MiBwLiA5MjEpLjwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvZiB0aGUgZHluYXN0cywgY29uc3VscywgZ2VuZXJhbHMsIGFuZCBkZW1hZ29ndWVzIHdobyBsaWZ0ZWQgdGhlbXNlbHZlcyBhZ2FpbnN0IFN1bGxhLCB0byBwYXNzIGJ5IHRoZSByZXN0LCB3aG8gYW1vbmcgdGhlIFJvbWFucyB3YXMgbW9yZSBmb3JtaWRhYmxlIHRoYW4gTWFyaXVzPyB3aG8gYW1vbmcgdGhlIGtpbmdzIHdhcyBtb3JlIHBvd2VyZnVsIHRoYW4gTWl0aHJpZGF0ZXM/IHdobyBhbW9uZyB0aGUgSXRhbGlhbnMgd2FzIG1vcmUgd2FybGlrZSB0aGFuIExhbXBvbml1cyBhbmQgVGVsZXNpbnVzPyBBbmQgeWV0IFN1bGxhIGJhbmlzaGVkIHRoZSBmaXJzdCBvZiB0aGVzZSwgc3ViZHVlZCB0aGUgc2Vjb25kLCBhbmQgc2xldyB0aGUgb3RoZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IGlzIG9mIG1vcmUgd2VpZ2h0LCBpbiBteSBvcGluaW9uLCB0aGFuIGFueSB0aGluZyB5ZXQgbWVudGlvbmVkLCBMeXNhbmRlciBhY2hpZXZlZCBhbGwgaGlzIHN1Y2Nlc3NlcyB3aXRoIHRoZSBjby1vcGVyYXRpb24gb2YgdGhlIGF1dGhvcml0aWVzIGF0IGhvbWU7IHdoZXJlYXMgU3VsbGEsIHRob3VnaCBoZSB3YXMgb3ZlcnBvd2VyZWQgYnkgYSBob3N0aWxlIGZhY3Rpb24sIGFuZCBhbiBleGlsZSwgYXQgYSB0aW1lIHdoZW4gaGlzIHdpZmUgd2FzIGJlaW5nIGRyaXZlbiBmcm9tIGhvbWUsIGhpcyBob3VzZSBiZWluZyBkZW1vbGlzaGVkLCBhbmQgaGlzIGZyaWVuZHMgYmVpbmcgc2xhaW4sIHdoZW4gaGUgaGltc2VsZiwgdG9vLCB3YXMgY29uZnJvbnRpbmcgY291bnRsZXNzIG15cmlhZHMgb2YgZW5lbWllcyBpbiBCb2VvdGlhIGFuZCByaXNraW5nIGhpcyBsaWZlIGZvciBoaXMgY291bnRyeSwgc2V0IHVwIGhpcyB0cm9waHkgb2YgdmljdG9yeTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG5vdCBldmVuIHdoZW4gTWl0aHJpZGF0ZXMgb2ZmZXJlZCBoaW0gYW4gYWxsaWFuY2UgYW5kIGZvcmNlcyB0byB3aWVsZCBhZ2FpbnN0IGhpcyBlbmVtaWVzIGF0IFJvbWUsIHdvdWxkIGhlIG1ha2UgYW55IGNvbmNlc3Npb24gd2hhdHNvZXZlciwgb3Igc2hvdyBoaW0ga2luZG5lc3MgZXZlbjsgbmF5LCBoZSB3b3VsZCBub3Qgc28gbXVjaCBhcyBncmVldCBoaW0gb3IgZ2l2ZSBoaW0gaGlzIGhhbmQsIHVudGlsIGhlIGhlYXJkIGhpbSBzYXkgcGVyc29uYWxseSB0aGF0IGhlIHdvdWxkIHJlbGlucXVpc2ggQXNpYSwgaGFuZCBvdmVyIGhpcyBzaGlwcywgYW5kIHJlc3RvcmUgQml0aHluaWEgYW5kIENhcHBhZG9jaWEgdG8gdGhlaXIgcmlnaHRmdWwga2luZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIGFjdCBvZiBTdWxsYSdzIHdoYXRzb2V2ZXIgYXBwZWFycyBtb3JlIGhvbm91cmFibGUgdGhhbiB0aGlzLCBvciBkdWUgdG8gYSBsb2Z0aWVyIHNwaXJpdCwgYmVjYXVzZSBoZSBzZXQgdGhlIHB1YmxpYyBpbnRlcmVzdHMgYmVmb3JlIGhpcyBvd24sIGFuZCwgbGlrZSBkb2dzIG9mIG5vYmxlIGJyZWVkLCBkaWQgbm90IHJlbGF4IGhpcyBiaXRlIG9yIGxldCBnbyBoaXMgaG9sZCB1bnRpbCBoaXMgYWR2ZXJzYXJ5IGhhZCB5aWVsZGVkLCBhbmQgdGhlbiBvbmx5IGRpZCBoZSBzZXQgb3V0IHRvIGF2ZW5nZSBoaXMgb3duIHByaXZhdGUgd3JvbmdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVzaWRlcyBhbGwgdGhpcywgdGhlaXIgdHJlYXRtZW50IG9mIEF0aGVucyBpcyBvZiBzb21lIHdlaWdodCBpbiBhIGNvbXBhcmlzb24gb2YgdGhlaXIgY2hhcmFjdGVycy4gU3VsbGEsIGFmdGVyIHRha2luZyB0aGUgY2l0eSwgYWx0aG91Z2ggaXQgaGFkIGZvdWdodCBhZ2FpbnN0IGhpbSB0byBzdXBwb3J0IHRoZSBwb3dlciBhbmQgc3VwcmVtYWN5IG9mIE1pdGhyaWRhdGVzLCByZXN0b3JlZCBoZXIgdG8gZnJlZWRvbSBhbmQgaW5kZXBlbmRlbmNlOyB3aGVyZWFzIEx5c2FuZGVyLCBhbHRob3VnaCBzaGUgaGFkIGZhbGxlbiBmcm9tIHN1Y2ggYSBncmVhdCBzdXByZW1hY3kgYW5kIGVtcGlyZSwgc2hvd2VkIGhlciBubyBwaXR5LCBidXQgdG9vayBhd2F5IGhlciBkZW1vY3JhdGljIGZvcm0gb2YgZ292ZXJubWVudCwgYW5kIGFwcG9pbnRlZCBtb3N0IHNhdmFnZSBhbmQgbGF3bGVzcyBtZW4gdG8gYmUgaGVyIHR5cmFudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCBpcyBvZiBtb3JlIHdlaWdodCwgaW4gbXkgb3BpbmlvbiwgdGhhbiBhbnkgdGhpbmcgeWV0IG1lbnRpb25lZCwgTHlzYW5kZXIgYWNoaWV2ZWQgYWxsIGhpcyBzdWNjZXNzZXMgd2l0aCB0aGUgY28tb3BlcmF0aW9uIG9mIHRoZSBhdXRob3JpdGllcyBhdCBob21lOyB3aGVyZWFzIFN1bGxhLCB0aG91Z2ggaGUgd2FzIG92ZXJwb3dlcmVkIGJ5IGEgaG9zdGlsZSBmYWN0aW9uLCBhbmQgYW4gZXhpbGUsIGF0IGEgdGltZSB3aGVuIGhpcyB3aWZlIHdhcyBiZWluZyBkcml2ZW4gZnJvbSBob21lLCBoaXMgaG91c2UgYmVpbmcgZGVtb2xpc2hlZCwgYW5kIGhpcyBmcmllbmRzIGJlaW5nIHNsYWluLCB3aGVuIGhlIGhpbXNlbGYsIHRvbywgd2FzIGNvbmZyb250aW5nIGNvdW50bGVzcyBteXJpYWRzIG9mIGVuZW1pZXMgaW4gQm9lb3RpYSBhbmQgcmlza2luZyBoaXMgbGlmZSBmb3IgaGlzIGNvdW50cnksIHNldCB1cCBoaXMgdHJvcGh5IG9mIHZpY3Rvcnk7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3QgZXZlbiB3aGVuIE1pdGhyaWRhdGVzIG9mZmVyZWQgaGltIGFuIGFsbGlhbmNlIGFuZCBmb3JjZXMgdG8gd2llbGQgYWdhaW5zdCBoaXMgZW5lbWllcyBhdCBSb21lLCB3b3VsZCBoZSBtYWtlIGFueSBjb25jZXNzaW9uIHdoYXRzb2V2ZXIsIG9yIHNob3cgaGltIGtpbmRuZXNzIGV2ZW47IG5heSwgaGUgd291bGQgbm90IHNvIG11Y2ggYXMgZ3JlZXQgaGltIG9yIGdpdmUgaGltIGhpcyBoYW5kLCB1bnRpbCBoZSBoZWFyZCBoaW0gc2F5IHBlcnNvbmFsbHkgdGhhdCBoZSB3b3VsZCByZWxpbnF1aXNoIEFzaWEsIGhhbmQgb3ZlciBoaXMgc2hpcHMsIGFuZCByZXN0b3JlIEJpdGh5bmlhIGFuZCBDYXBwYWRvY2lhIHRvIHRoZWlyIHJpZ2h0ZnVsIGtpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIGFjdCBvZiBTdWxsYSdzIHdoYXRzb2V2ZXIgYXBwZWFycyBtb3JlIGhvbm91cmFibGUgdGhhbiB0aGlzLCBvciBkdWUgdG8gYSBsb2Z0aWVyIHNwaXJpdCwgYmVjYXVzZSBoZSBzZXQgdGhlIHB1YmxpYyBpbnRlcmVzdHMgYmVmb3JlIGhpcyBvd24sIGFuZCwgbGlrZSBkb2dzIG9mIG5vYmxlIGJyZWVkLCBkaWQgbm90IHJlbGF4IGhpcyBiaXRlIG9yIGxldCBnbyBoaXMgaG9sZCB1bnRpbCBoaXMgYWR2ZXJzYXJ5IGhhZCB5aWVsZGVkLCBhbmQgdGhlbiBvbmx5IGRpZCBoZSBzZXQgb3V0IHRvIGF2ZW5nZSBoaXMgb3duIHByaXZhdGUgd3JvbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIGFsbCB0aGlzLCB0aGVpciB0cmVhdG1lbnQgb2YgQXRoZW5zIGlzIG9mIHNvbWUgd2VpZ2h0IGluIGEgY29tcGFyaXNvbiBvZiB0aGVpciBjaGFyYWN0ZXJzLiBTdWxsYSwgYWZ0ZXIgdGFraW5nIHRoZSBjaXR5LCBhbHRob3VnaCBpdCBoYWQgZm91Z2h0IGFnYWluc3QgaGltIHRvIHN1cHBvcnQgdGhlIHBvd2VyIGFuZCBzdXByZW1hY3kgb2YgTWl0aHJpZGF0ZXMsIHJlc3RvcmVkIGhlciB0byBmcmVlZG9tIGFuZCBpbmRlcGVuZGVuY2U7IHdoZXJlYXMgTHlzYW5kZXIsIGFsdGhvdWdoIHNoZSBoYWQgZmFsbGVuIGZyb20gc3VjaCBhIGdyZWF0IHN1cHJlbWFjeSBhbmQgZW1waXJlLCBzaG93ZWQgaGVyIG5vIHBpdHksIGJ1dCB0b29rIGF3YXkgaGVyIGRlbW9jcmF0aWMgZm9ybSBvZiBnb3Zlcm5tZW50LCBhbmQgYXBwb2ludGVkIG1vc3Qgc2F2YWdlIGFuZCBsYXdsZXNzIG1lbiB0byBiZSBoZXIgdHlyYW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2UgbWF5IG5vdyBjb25zaWRlciB3aGV0aGVyIHdlIHNoYWxsIGVyciB2ZXJ5IG11Y2ggZnJvbSB0aGUgdHJ1dGggaW4gcHJvbm91bmNpbmcgb3VyIHZlcmRpY3QgdGhhdCBTdWxsYSB3b24gdGhlIG1vcmUgc3VjY2Vzc2VzLCB3aGlsZSBMeXNhbmRlciBoYWQgdGhlIGZld2VyIGZhaWxpbmdzOyBhbmQgaW4gZ2l2aW5nIHRvIHRoZSBvbmUgdGhlIHByZWVtaW5lbmNlIGluIHNlbGYtY29udHJvbCBhbmQgbW9kZXJhdGlvbiwgdG8gdGhlIG90aGVyLCBpbiBnZW5lcmFsc2hpcCBhbmQgdmFsb3VyLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
