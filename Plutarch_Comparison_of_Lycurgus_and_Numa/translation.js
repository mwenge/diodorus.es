var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q09NUEFSSVNPTiBPRiBMWUNVUkdVUyBBTkQgTlVNQTwvaGVhZD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGF0IHdlIGhhdmUgcmVjb3VudGVkIHRoZSBsaXZlcyBvZiBOdW1hIGFuZCBMeWN1cmd1cywgYW5kIGJvdGggbGllIGNsZWFybHkgYmVmb3JlIHVzLCB3ZSBtdXN0IGF0dGVtcHQsIGV2ZW4gdGhvdWdoIHRoZSB0YXNrIGJlIGRpZmZpY3VsdCwgdG8gYXNzZW1ibGUgYW5kIHB1dCB0b2dldGhlciB0aGVpciBwb2ludHMgb2YgZGlmZmVyZW5jZS4gRm9yIHRoZWlyIHBvaW50cyBvZiBsaWtlbmVzcyBhcmUgb2J2aW91cyBmcm9tIHRoZWlyIGNhcmVlcnM6IHRoZWlyIHdpc2UgbW9kZXJhdGlvbiwgdGhlaXIgcGlldHksIHRoZWlyIHRhbGVudCBmb3IgZ292ZXJuaW5nIGFuZCBlZHVjYXRpbmcsIGFuZCB0aGVpciBib3RoIGRlcml2aW5nIHRoZWlyIGxhd3MgZnJvbSBhIGRpdmluZSBzb3VyY2UuIEJ1dCBlYWNoIGFsc28gcGVyZm9ybWVkIG5vYmxlIGRlZWRzIHBlY3VsaWFyIHRvIGhpbXNlbGYuIFRvIGJlZ2luIHdpdGgsIE51bWEgYWNjZXB0ZWQsIGJ1dCBMeWN1cmd1cyByZXNpZ25lZCwgYSBraW5nZG9tLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBnb3QgaXQgd2l0aG91dCBhc2tpbmcgZm9yIGl0LCB0aGUgb3RoZXIgaGFkIGl0IGFuZCBnYXZlIGl0IHVwLiBPbmUgd2FzIG1hZGUgYnkgb3RoZXJzIHRoZWlyIHNvdmVyZWlnbiwgdGhvdWdoIGEgcHJpdmF0ZSBwZXJzb24gYW5kIGEgc3RyYW5nZXI7IHRoZSBvdGhlciBtYWRlIGhpbXNlbGYgYSBwcml2YXRlIHBlcnNvbiwgdGhvdWdoIGhlIHdhcyBhIGtpbmcuIEl0IHdhcyBhIG5vYmxlIHRoaW5nLCBvZiBjb3Vyc2UsIHRvIHdpbiBhIGtpbmdkb20gYnkgcmlnaHRlb3VzbmVzczsgYnV0IGl0IHdhcyBhbHNvIGEgbm9ibGUgdGhpbmcgdG8gc2V0IHJpZ2h0ZW91c25lc3MgYWJvdmUgYSBraW5nZG9tLiBGb3IgaXQgd2FzIHZpcnR1ZSB3aGljaCByZW5kZXJlZCB0aGUgb25lIHNvIGZhbW91cyBhcyB0byBiZSBqdWRnZWQgd29ydGh5IG9mIGEga2luZ2RvbSwgYW5kIHZpcnR1ZSwgdG9vLCB3aGljaCBtYWRlIHRoZSBvdGhlciBzbyBncmVhdCBhcyB0byBzY29ybiBhIGtpbmdkb20uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCB0aGVuLCBpdCBpcyBncmFudGVkIHRoYXQsIGp1c3QgYXMgbXVzaWNpYW5zIHR1bmUgdGhlaXIgbHlyZXMsIHNvIEx5Y3VyZ3VzIHRpZ2h0ZW5lZCB0aGUgc3RyaW5ncyBhdCBTcGFydGEsIHdoaWNoIGhlIGZvdW5kIHJlbGF4ZWQgd2l0aCBsdXh1cnksIGFuZCBOdW1hIGxvb3NlbmVkIHRoZSBzdHJpbmdzIGF0IFJvbWUsIHdoZXJlIHRoZSB0b25lcyB3ZXJlIHNoYXJwIGFuZCBoaWdoOyBidXQgdGhlIHRhc2sgd2FzIG1vcmUgZGlmZmljdWx0IGluIHRoZSBjYXNlIG9mIEx5Y3VyZ3VzLiBGb3IgaGlzIGVmZm9ydHMgd2VyZSB0byBwZXJzdWFkZSB0aGUgY2l0aXplbnMsIG5vdCB0byB0YWtlIG9mZiB0aGVpciBicmVhc3QtcGxhdGVzIGFuZCBsYXkgYXNpZGUgdGhlaXIgc3dvcmRzLCBidXQgdG8gY2FzdCBhd2F5IGdvbGQgYW5kIHNpbHZlciwgYW5kIGFiYW5kb24gY29zdGx5IGNvdWNoZXMgYW5kIHRhYmxlczsgbm90IHRvIGNlYXNlIGZyb20gd2FycyBhbmQgaG9sZCBmZXN0aXZhbHMgYW5kIHNhY3JpZmljZXMsIGJ1dCB0byBnaXZlIHVwIGZlYXN0aW5nIGFuZCBkcmlua2luZyBhbmQgcHJhY3Rpc2UgbGFib3Jpb3VzbHkgYXMgc29sZGllcnMgYW5kIGF0aGxldGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUgdGhlIG9uZSBhY2NvbXBsaXNoZWQgYWxsIGhpcyBlbmRzIGJ5IHBlcnN1YXNpb24sIHRocm91Z2ggdGhlIGdvb2Qtd2lsbCBhbmQgaG9ub3VyIGluIHdoaWNoIGhpcyBwZW9wbGUgaGVsZCBoaW07IGJ1dCB0aGUgb3RoZXIgaGFkIHRvIHJpc2sgaGlzIGxpZmUgYW5kIHN1ZmZlciB3b3VuZHMsIGFuZCBzY2FyY2VseSB0aGVuIHByZXZhaWxlZC4KCQkJPC9wPgogICAgICAgICA8cD5OdW1hJ3MgbXVzZSwgaG93ZXZlciwgd2FzIGdlbnRsZSBhbmQgaHVtYW5lLCBhbmQgaGUgY29udmVydGVkIGhpcyBwZW9wbGUgdG8gcGVhY2UgYW5kIHJpZ2h0ZW91c25lc3MsIGFuZCBzb2Z0ZW5lZCB0aGVpciB2aW9sZW50IGFuZCBmaWVyeSB0ZW1wZXJzLiBBbmQgaWYgd2UgbXVzdCBhc2NyaWJlIHRvIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiBMeWN1cmd1cyB0aGUgdHJlYXRtZW50IG9mIHRoZSBIZWxvdHMsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmEgbW9zdCBzYXZhZ2UgYW5kIGxhd2xlc3MgcHJhY3RpY2UsIHdlIHNoYWxsIG93biB0aGF0IE51bWEgd2FzIGZhciBtb3JlIEhlbGxlbmljIGFzIGEgbGF3Z2l2ZXIsIHNpbmNlIGhlIGdhdmUgYWNrbm93bGVkZ2VkIHNsYXZlcyBhIHRhc3RlIG9mIHRoZSBkaWduaXR5IG9mIGZyZWVkb20sIGJ5IG1ha2luZyBpdCB0aGUgY3VzdG9tIGZvciB0aGVtIHRvIGZlYXN0IGluIHRoZSBjb21wYW55IG9mIHRoZWlyIG1hc3RlcnMgZHVyaW5nIHRoZSBTYXR1cm5hbGlhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBtaWQtd2ludGVyIGhhcnZlc3QgZmVzdGl2YWwgaW4gaG9ub3VyIG9mIFNhdHVybnVzLjwvbm90ZT4gRm9yIHRoaXMgdG9vIHdhcyBvbmUgb2YgdGhlIGluc3RpdHV0aW9ucyBvZiBOdW1hLCBhcyB3ZSBhcmUgdG9sZCwgd2hvIHRoZXJlYnkgYWRtaXR0ZWQgdG8gdGhlIGVuam95bWVudCBvZiB0aGUgeWVhcmx5IGZydWl0cyBvZiB0aGUgZWFydGggdGhvc2Ugd2hvIGhhZCBoZWxwZWQgdG8gcHJvZHVjZSB0aGVtLiBTb21lLCBob3dldmVyLCBmYW5jeSB0aGF0IHRoaXMgY3VzdG9tIHdhcyBhIHJlbWluZGVyIG9mIHRoZSBlcXVhbGl0eSB3aGljaCBjaGFyYWN0ZXJpemVkIHRoZSBmYW1vdXMgU2F0dXJuaWFuIGFnZSwgd2hlbiB0aGVyZSB3YXMgbmVpdGhlciBzbGF2ZSBub3IgbWFzdGVyLCBidXQgYWxsIHdlcmUgcmVnYXJkZWQgYXMga2luc21lbiBhbmQgZXF1YWxzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBnZW5lcmFsLCBib3RoIGFsaWtlIG1hbmlmZXN0bHkgc3Ryb3ZlIHRvIGxlYWQgdGhlaXIgcGVvcGxlcyB0byBpbmRlcGVuZGVuY2UgYW5kIHNvYnJpZXR5OyBidXQgYXMgcmVnYXJkcyB0aGUgb3RoZXIgdmlydHVlcywgdGhlIG9uZSBzZXQgaGlzIGFmZmVjdGlvbnMgbW9yZSBvbiBicmF2ZXJ5LCB0aGUgb3RoZXIgb24gcmlnaHRlb3VzbmVzczsgdW5sZXNzLCBpbmRlZWQsIHRoZSBkaWZmZXJlbnQgbmF0dXJlcyBvciB1c2FnZXMgb24gd2hpY2ggdGhlIGdvdmVybm1lbnQgb2YgZWFjaCB3YXMgYmFzZWQgcmVxdWlyZWQgZGlmZmVyZW50IHByb3Zpc2lvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90IG91dCBvZiBjb3dhcmRpY2UgdGhhdCBOdW1hIHB1dCBhIHN0b3AgdG8gdGhlIHdhZ2luZyBvZiB3YXIsIGJ1dCB0byBwcmV2ZW50IHRoZSBjb21taXNzaW9uIG9mIGluanVzdGljZTsgbmVpdGhlciB3YXMgaXQgdG8gcHJvbW90ZSB0aGUgY29tbWlzc2lvbiBvZiBpbmp1c3RpY2UgdGhhdCBMeWN1cmd1cyBtYWRlIGhpcyBwZW9wbGUgd2FybGlrZSwgYnV0IHRoYXQgdGhleSBtaWdodCBub3Qgc3VmZmVyIGluanVzdGljZS4gQWNjb3JkaW5nbHksIGluIHJlbW92aW5nIHRoZSBleGNlc3NlcyBhbmQgc3VwcGx5aW5nIHRoZSBkZWZpY2llbmNpZXMgb2YgdGhlaXIgY2l0aXplbnMsIGJvdGggd2VyZSBmb3JjZWQgdG8gbWFrZSBncmVhdCBpbm5vdmF0aW9ucy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdXJlbHksIGFzIHJlZ2FyZHMgdGhlIGFycmFuZ2VtZW50IGFuZCBjbGFzc2lmaWNhdGlvbiBvZiB0aGUgY2l0aXplbnMgdW5kZXIgdGhlaXIgcmVzcGVjdGl2ZSBnb3Zlcm5tZW50cywgTnVtYSdzIHdhcyBzdHJvbmdseSBwb3B1bGFyIGFuZCBpbmNsaW5lZCB0byBmYXZvdXIgdGhlIG1hc3NlcywgcmVzdWx0aW5nIGluIGEgcHJvbWlzY3VvdXMgYW5kIHZhcmllZ2F0ZWQgY29tbW9uYWx0eSBvZiBnb2xkc21pdGhzLCBtdXNpY2lhbnMsIGFuZCBsZWF0aGVyLXdvcmtlcnM7IGJ1dCB0aGF0IG9mIEx5Y3VyZ3VzIHdhcyByaWdpZCBhbmQgYXJpc3RvY3JhdGljLCByZWxlZ2F0aW5nIHRoZSBtZWNoYW5pY2FsIGFydHMgaW50byB0aGUgaGFuZHMgb2Ygc2xhdmVzIGFuZCBhbGllbnMsIGJ1dCBjb25maW5pbmcgdGhlIGNpdGl6ZW5zIHRoZW1zZWx2ZXMgdG8gdGhlIHVzZSBvZiB0aGUgc2hpZWxkIGFuZCB0aGUgc3BlYXIsIHNvIHRoYXQgdGhleSB3ZXJlIGFydGlmaWNlcnMgb2Ygd2FyIGFuZCBzZXJ2YW50cyBvZiBBcmVzLCBidXQga25ldyBhbmQgY2FyZWQgZm9yIG5vdGhpbmcgZWxzZSB0aGFuIHRvIG9iZXkgdGhlaXIgY29tbWFuZGVycyBhbmQgbWFzdGVyIHRoZWlyIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBmcmVlbWVuIHdlcmUgbm90IGV2ZW4gcGVybWl0dGVkIHRvIHRyYW5zYWN0IGJ1c2luZXNzLCB0aGF0IHRoZXkgbWlnaHQgYmUgZW50aXJlbHkgYW5kIGZvcmV2ZXIgZnJlZSwgYnV0IHRoZSB3aG9sZSBhcHBhcmF0dXMgb2YgYnVzaW5lc3Mgd2FzIHR1cm5lZCBvdmVyIHRvIHNsYXZlcyBhbmQgSGVsb3RzLCBqdXN0IGxpa2UgdGhlIHByZXBhcmF0aW9uIGFuZCBzZXJ2aW5nIG9mIHRoZWlyIG1lYWxzLiBOdW1hLCBvbiB0aGUgY29udHJhcnksIG1hZGUgbm8gc3VjaCBkaXN0aW5jdGlvbnMsIGJ1dCwgd2hpbGUgaGUgcHV0IGEgc3RvcCB0byBtaWxpdGFyeSByYXBhY2l0eSwgaGUgcHJvaGliaXRlZCBubyBvdGhlciBnYWluZnVsIG9jY3VwYXRpb24uIE5vciBkaWQgaGUgcmVkdWNlIHRoZSBncmVhdCBpbmVxdWFsaXRpZXMgcmVzdWx0aW5nIHRoZXJlZnJvbSwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGxlZnQgdGhlIGFjcXVpc2l0aW9uIG9mIHdlYWx0aCB3aG9sbHkgdW5yZXN0cmljdGVkLCBhbmQgcGFpZCBubyBhdHRlbnRpb24gdG8gdGhlIGdyZWF0IGluY3JlYXNlIG9mIHBvdmVydHkgYW5kIGl0cyBncmFkdWFsIGluZmx1eCBpbnRvIHRoZSBjaXR5LiBBbmQgeWV0IGl0IHdhcyBoaXMgZHV0eSBhdCB0aGUgdmVyeSBvdXRzZXQsIHdoaWxlIGFzIHlldCB0aGVyZSB3YXMgbm8gZ2VuZXJhbCBvciBncmVhdCBkaXNwYXJpdHkgb2YgbWVhbnMsIGJ1dCBwZW9wbGUgc3RpbGwgbGl2ZWQgb24gbXVjaCB0aGUgc2FtZSBwbGFuZSwgdG8gbWFrZSBhIHN0YW5kIGFnYWluc3QgcmFwYWNpdHksIGFzIEx5Y3VyZ3VzIGRpZCwgYW5kIHRha2UgbWVhc3VyZXMgb2YgcHJlY2F1dGlvbiBhZ2FpbnN0IGl0cyBtaXNjaGllZnM7IGZvciB0aGVzZSB3ZXJlIG5vdCB0cmlmbGluZywgYnV0IGZ1cm5pc2hlZCB0aGUgc2VlZCBhbmQgc291cmNlIG9mIHRoZSBtb3N0IGFuZCBncmVhdGVzdCBldmlscyBvZiBhZnRlciB0aW1lcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHJlZ2FyZHMgdGhlIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBsYW5kLCBMeWN1cmd1cywgaW4gbXkgb3BpbmlvbiwgaXMgbm90IHRvIGJlIGNlbnN1cmVkIGZvciBtYWtpbmcgaXQsIG5vciBOdW1hIGZvciBub3QgbWFraW5nIGl0LiBJbiB0aGUgb25lIGNhc2UsIHRoZSByZXN1bHRpbmcgZXF1YWxpdHkgd2FzIHRoZSBmb3VuZGF0aW9uIGFuZCBiYXNlIG9mIGhpcyBwb2xpdHk7IGJ1dCBpbiB0aGUgb3RoZXIsIHNpbmNlIHRoZSBhbGxvdG1lbnQgb2YgbGFuZHMgd2FzIHJlY2VudCwgdGhlcmUgd2FzIG5vIHVyZ2VudCByZWFzb24gZm9yIGludHJvZHVjaW5nIGFub3RoZXIgZGl2aXNpb24sIG9yIGZvciBkaXN0dXJiaW5nIHRoZSBmaXJzdCBhc3NpZ25tZW50LCB3aGljaCBwcm9iYWJseSB3YXMgc3RpbGwgaW4gZm9yY2UuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldpdGggcmVnYXJkIHRvIGNvbW11bml0eSBpbiBtYXJyaWFnZSBhbmQgcGFyZW50YWdlLCB0aG91Z2ggYm90aCwgYnkgYSBzb3VuZCBwb2xpY3ksIGluY3VsY2F0ZWQgaW4gaHVzYmFuZHMgYSBmcmVlZG9tIGZyb20gc2VsZmlzaCBqZWFsb3VzeSwgc3RpbGwsIHRoZWlyIG1ldGhvZHMgd2VyZSBub3QgZW50aXJlbHkgYWxpa2UuIFRoZSBSb21hbiBodXNiYW5kLCBpZiBoZSBoYWQgYSBzdWZmaWNpZW50IG51bWJlciBvZiBjaGlsZHJlbiB0byByZWFyLCBhbmQgYW5vdGhlciwgd2hvIGxhY2tlZCBjaGlsZHJlbiwgY291bGQgcGVyc3VhZGUgaGltIHRvIHRoZSBzdGVwLCByZWxpbnF1aXNoZWQgaGlzIHdpZmUgdG8gaGltLCBoYXZpbmcgdGhlIHBvd2VyIG9mIHN1cnJlbmRlcmluZyBoZXIgZW50aXJlbHksIG9yIG9ubHkgZm9yIGEgc2Vhc29uOyBidXQgdGhlIFNwYXJ0YW4sIHdoaWxlIGhpcyB3aWZlIHJlbWFpbmVkIGluIGhpcyBob3VzZSwgYW5kIHRoZSBtYXJyaWFnZSByZXRhaW5lZCBpdHMgb3JpZ2luYWwgcmlnaHRzIGFuZCBvYmxpZ2F0aW9ucywgbWlnaHQgYWxsb3cgYW55IG9uZSB3aG8gZ2FpbmVkIGhpcyBjb25zZW50IHRvIHNoYXJlIGhpcyB3aWZlIGZvciB0aGUgcHVycG9zZSBvZiBnZXR0aW5nIGNoaWxkcmVuIGJ5IGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG1hbnkgaHVzYmFuZHMsIGFzIHdlIGhhdmUgc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTUuNyIgdmFsaWQ9InllcyI+THljdXJndXMsIHh2LiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3b3VsZCBhY3R1YWxseSBpbnZpdGUgaW50byB0aGVpciBob21lcyBtZW4gd2hvbSB0aGV5IHRob3VnaHQgbW9zdCBsaWtlbHkgdG8gcHJvY3VyZSB0aGVtIGhhbmRzb21lIGFuZCBub2JsZSBjaGlsZHJlbi4gV2hhdCwgdGhlbiwgaXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGN1c3RvbXM/IFdlIG1heSBzYXksIHBlcmhhcHMsIHRoYXQgdGhlIFNwYXJ0YW4gaW1wbGllcyBhIGNvbXBsZXRlIGluZGlmZmVyZW5jZSB0byB0aGUgd2lmZSwgYW5kIHRvIHRoZSBqZWFsb3VzIGVtb3Rpb25zIHdoaWNoIGNvbmZvdW5kIGFuZCBjb25zdW1lIHRoZSBoZWFydHMgb2YgbW9zdCBtZW47IHdoaWxlIHRoZSBSb21hbiwgYXMgaWYgd2l0aCBzaGFtZS1mYWNlZCBtb2Rlc3R5LCBtYWtlcyBhIHZlaWwgb2YgdGhlIG5ldyBiZXRyb3RoYWwsIGFuZCBjb25jZWRlcyB0aGF0IGNvbW11bml0eSBvZiB3aXZlcyBpcyByZWFsbHkgaW5zdXBwb3J0YWJsZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIE51bWEncyB3YXRjaGZ1bCBjYXJlIG9mIHlvdW5nIG1haWRlbnMgd2FzIG1vcmUgY29uZHVjaXZlIHRvIGZlbWluaW5lIGRlY29ydW07IGJ1dCB0aGUgdHJlYXRtZW50IG9mIHRoZW0gYnkgTHljdXJndXMsIGJlaW5nIGVudGlyZWx5IHVuY29uZmluZWQgYW5kIHVuZmVtaW5pbmUsIGhhcyBnaXZlbiBvY2Nhc2lvbiB0byB0aGUgcG9ldHMuIFRoZXkgY2FsbCB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhhaW5vbWVyaWRlcyw8L3E+IAogICAgICAgICAgICA8ZW1waD5iYXJlLXRoaWdoZWQ8L2VtcGg+IChzbyBJYnljdXMpLCBhbmQgcmV2aWxlIHRoZW0gYXMgbWFkIGFmdGVyIG1lbi4gVGh1cyBFdXJpcGlkZXMgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRXVyLiBBbmRyLiA1ODciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5kcm9tYWNoZTwvdGl0bGU+LCA1ODdmLjwvYmlibD4gKEtpcmNoaG9mZiksIHNsaWdodGx5IGFkYXB0ZWQuPC9ub3RlPjrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+VGhleSBsZWF2ZSB0aGVpciBob21lcyB0byBtaW5nbGUgd2l0aCB0aGUgeW91dGhzOzwvbD4KCQkJCQkgICAgICAgICAgPGw+VGhlaXIgdGhpZ2hzIGFyZSBuYWtlZCwgZmx5aW5nIGZyZWUgdGhlaXIgcm9iZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIGZhY3QgdGhlIGZsYXBzIG9mIHRoZSB0dW5pYyB3b3JuIGJ5IHRoZWlyIG1haWRlbnMgd2VyZSBub3Qgc2V3biB0b2dldGhlciBiZWxvdyB0aGUgd2Fpc3QsIGJ1dCB3b3VsZCBmbHkgYmFjayBhbmQgbGF5IGJhcmUgdGhlIHdob2xlIHRoaWdoIGFzIHRoZXkgd2Fsa2VkLiBTb3Bob2NsZXMgcGljdHVyZXMgdGhlIHRoaW5nIHZlcnkgY2xlYXJseSBpbiB0aGVzZSB3b3Jkczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDc4OCAoTmF1Y2spLjwvbm90ZT464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkFuZCB0aGF0IHlvdW5nIG1haWQsIHdob3NlIHR1bmljLCBzdGlsbCB1bnNld24sPC9sPgoJCQkJCSAgICAgICAgICA8bD5MYXlzIGJhcmUgaGVyIGdsZWFtaW5nIHRoaWdoPC9sPgoJCQkJCSAgICAgICAgICA8bD5CZXR3ZWVuIGl0cyBmb2xkcywgSGVybWlvbmUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIHRoZWlyIHdvbWVuLCBpdCBpcyBzYWlkLCB3ZXJlIHRvbyBib2xkLCBwdXR0aW5nIG9uIG1lbidzIGFpcnMgd2l0aCB0aGVpciBodXNiYW5kcyBldmVuLCB0byBiZWdpbiB3aXRoLCBzaW5jZSB0aGV5IHJ1bGVkIHRoZWlyIGhvdXNlcyBhYnNvbHV0ZWx5LCBhbmQgYmVzaWRlcywgb24gcHVibGljIG9jY2FzaW9ucywgdGFraW5nIHBhcnQgaW4gZGViYXRlIGFuZCB0aGUgZnJlZXN0IHNwZWVjaCBvbiB0aGUgbW9zdCBpbXBvcnRhbnQgc3ViamVjdHMuIEJ1dCBOdW1hLCB3aGlsZSBjYXJlZnVsbHkgcHJlc2VydmluZyB0byB0aGUgbWF0cm9ucyB0aGF0IGRpZ25pZmllZCBhbmQgaG9ub3VyYWJsZSByZWxhdGlvbiB0byB0aGVpciBodXNiYW5kcyB3aGljaCB3YXMgYmVzdG93ZWQgb24gdGhlbSBieSBSb211bHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxOS42IiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4aXguIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZW4gaGUgdHJpZWQgYnkga2luZGx5IHVzYWdlIHRvIGVmZmFjZSB0aGUgbWVtb3J5IG9mIHRoZSB2aW9sZW5jZSBkb25lIHRoZW0sIG5ldmVydGhlbGVzcyBlbmpvaW5lZCBncmVhdCBtb2Rlc3R5IHVwb24gdGhlbSwgZm9yYmFkZSB0aGVtIGFsbCBidXN5IGludGVybWVkZGxpbmcsIHRhdWdodCB0aGVtIHNvYnJpZXR5LCBhbmQgYWNjdXN0b21lZCB0aGVtIHRvIGJlIHNpbGVudDsgd2luZSB0aGV5IHdlcmUgdG8gcmVmcmFpbiBmcm9tIGVudGlyZWx5LCBhbmQgd2VyZSBub3QgdG8gc3BlYWssIGV2ZW4gb24gdGhlIG1vc3QgbmVjZXNzYXJ5IHRvcGljcywgdW5sZXNzIHRoZWlyIGh1c2JhbmRzIHdlcmUgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbnkgcmF0ZSwgaXQgaXMgc2FpZCB0aGF0IHdoZW4gYSB3b21hbiBvbmNlIHBsZWFkZWQgaGVyIG93biBjYXVzZSBpbiB0aGUgZm9ydW0sIHRoZSBzZW5hdGUgc2VudCB0byBpbnF1aXJlIG9mIGFuIG9yYWNsZSB3aGF0IHRoZSBldmVudCBtaWdodCBwb3J0ZW5kIGZvciB0aGUgY2l0eS4gQW5kIGZvciB0aGVpciB1c3VhbCBnZW50bGVuZXNzIGFuZCByZWFkaW5lc3MgdG8gb2JleSwgdGhlcmUgaXMgc3Ryb25nIGV2aWRlbmNlIGluIHRoZSBzcGVjaWZpYyBtZW50aW9uIG1hZGUgb2YgdGhvc2Ugd2hvIHdlcmUgbGVzcyBhbWVuYWJsZS4gRm9yIGp1c3QgYXMgb3VyIEdyZWVrIGhpc3RvcmlhbnMgcmVjb3JkIHRoZSBuYW1lcyBvZiB0aG9zZSB3aG8gZmlyc3Qgc2xldyBraW5zZm9saywgb3IgbWFkZSB3YXIgb24gdGhlaXIgYnJvdGhlcnMsIG9yIHdlcmUgcGFycmljaWRlcywgb3IgbWF0cmljaWRlcywgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+c28gdGhlIFJvbWFucyBtYWtlIHJlY29yZCBvZiB0aGUgZmFjdCB0aGF0IFNwdXJpdXMgQ2FydmlsaXVzIHdhcyB0aGUgZmlyc3QgdG8gZGl2b3JjZSBoaXMgd2lmZSwgdHdvIGh1bmRyZWQgYW5kIHRoaXJ0eSB5ZWFycyBhZnRlciB0aGUgZm91bmRpbmcgb2YgUm9tZSwgdGhlcmUgYmVpbmcgbm8gcHJlY2VkZW50IGZvciBpdDsgYWxzbyB0aGF0IHRoZSB3aWZlIG9mIFBpbmFyaXVzLCBUaGFsYWVhIGJ5IG5hbWUsIHdhcyB0aGUgZmlyc3Qgd29tYW4gdG8gcXVhcnJlbCB3aXRoIGhlciBvd24gbW90aGVyLWluLWxhdywgR2VnYW5pYSwgaW4gdGhlIHJlaWduIG9mIFRhcnF1aW5pdXMgU3VwZXJidXMuIEluIHN1Y2ggZml0dGluZyBhbmQgcHJvcGVyIG1hbm5lciB3ZXJlIG1hcnJpYWdlcyByZWd1bGF0ZWQgYnkgdGhlaXIgbGF3Z2l2ZXIuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIHRoZSBwcmFjdGljZSBvZiB0aGUgdHdvIHBlb3BsZXMgaW4gdGhlIG1hdHRlciBvZiBnaXZpbmcgdGhlaXIgeW91bmcgbWFpZHMgaW4gbWFycmlhZ2UgY29uZm9ybXMgdG8gdGhlaXIgZWR1Y2F0aW9uIG9mIHRoZW0gaW4gZ2VuZXJhbC4gTHljdXJndXMgbWFkZSB0aGVtIGJyaWRlcyBvbmx5IHdoZW4gdGhleSB3ZXJlIGZ1bGx5IHJpcGUgYW5kIGVhZ2VyIGZvciBpdCwgaW4gb3JkZXIgdGhhdCBpbnRlcmNvdXJzZSB3aXRoIGEgaHVzYmFuZCwgY29taW5nIGF0IGEgdGltZSB3aGVuIG5hdHVyZSBjcmF2ZWQgaXQsIG1pZ2h0IHByb2R1Y2UgYSBraW5kbHkgbG92ZSwgaW5zdGVhZCBvZiB0aGUgdGltb3JvdXMgaGF0ZSB0aGF0IGZvbGxvd3MgdW5uYXR1cmFsIGNvbXB1bHNpb247IGFsc28gdGhhdCB0aGVpciBib2RpZXMgbWlnaHQgYmUgdmlnb3JvdXMgZW5vdWdoIHRvIGVuZHVyZSB0aGUgc3RyYWluIG9mIGNvbmNlcHRpb24gYW5kIGNoaWxkLWJpcnRoLCBjb252aW5jZWQgYXMgaGUgd2FzIHRoYXQgbWFycmlhZ2UgaGFkIG5vIG90aGVyIGVuZCB0aGFuIHRoZSBwcm9kdWN0aW9uIG9mIGNoaWxkcmVuLiBUaGUgUm9tYW5zLCBvbiB0aGUgb3RoZXIgaGFuZCwgZ2F2ZSB0aGVpciBtYWlkZW5zIGluIG1hcnJpYWdlIHdoZW4gdGhleSB3ZXJlIHR3ZWx2ZSB5ZWFycyBvbGQsIG9yIGV2ZW4geW91bmdlci4gSW4gdGhpcyB3YXkgbW9yZSB0aGFuIGFueSBvdGhlciwgaXQgd2FzIHRob3VnaHQsIGJvdGggdGhlaXIgYm9kaWVzIGFuZCB0aGVpciBkaXNwb3NpdGlvbnMgd291bGQgYmUgcHVyZSBhbmQgdW5kZWZpbGVkIHdoZW4gdGhlaXIgaHVzYmFuZHMgdG9vayBjb250cm9sIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGNsZWFyLCB0aGVyZWZvcmUsIHRoYXQgb25lIHByYWN0aWNlIHJlZ2FyZGVkIG5hdHVyZSBtb3JlLCB3aXRoIGNoaWxkcmVuIGluIHZpZXc7IHRoZSBvdGhlciByZWdhcmRlZCBtb3JlIHRoZSBmb3JtYXRpb24gb2YgY2hhcmFjdGVyLCB3aXRoIG1hcnJpZWQgbGlmZSBpbiB2aWV3LgoJCQk8L3A+CiAgICAgICAgIDxwPkJ1dCBzdXJlbHksIGJ5IGhpcyBjYXJlZnVsIGF0dGVudGlvbiB0byBib3lzLCBieSB0aGVpciBjb2xsZWN0aW9uIGludG8gY29tcGFuaWVzLCB0aGVpciBkaXNjaXBsaW5lIGFuZCBjb25zdGFudCBhc3NvY2lhdGlvbiwgYW5kIGJ5IGhpcyBwYWluc3Rha2luZyBhcnJhbmdlbWVudHMgZm9yIHRoZWlyIG1lYWxzIGFuZCBib2RpbHkgZXhlcmNpc2UgYW5kIHNwb3J0cywgTHljdXJndXMgcHJvdmVzIHRoYXQgTnVtYSB3YXMgbm8gbW9yZSB0aGFuIGFuIG9yZGluYXJ5IGxhd2dpdmVyLiBGb3IgTnVtYSBsZWZ0IHRoZSBicmluZ2luZyB1cCBvZiB5b3V0aHMgdG8gdGhlIHdpc2hlcyBvciBuZWNlc3NpdGllcyBvZiB0aGVpciBmYXRoZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BIGZhdGhlciBtaWdodCwgaWYgaGUgd2lzaGVkLCBtYWtlIGhpcyBzb24gYSB0aWxsZXIgb2YgdGhlIHNvaWwsIG9yIGEgc2hpcHdyaWdodCwgb3IgbWlnaHQgdGVhY2ggaGltIHRvIGJlIGEgc21pdGggb3IgYSBmbHV0ZS1wbGF5ZXIsIGFzIGlmIGl0IHdlcmUgbm90IGltcG9ydGFudCB0aGF0IGFsbCBvZiB0aGVtIHNob3VsZCBiZSB0cmFpbmVkIHdpdGggb25lIGFuZCB0aGUgc2FtZSBlbmQgaW4gdmlldyBmcm9tIHRoZSBvdXRzZXQsIGFuZCBoYXZlIHRoZWlyIGRpc3Bvc2l0aW9ucyBmb3JtZWQgYWxpa2U7IGJ1dCByYXRoZXIgYXMgaWYgdGhleSB3ZXJlIGxpa2UgcGFzc2VuZ2VycyBvbiBhIHNoaXAsIGVhY2ggY29taW5nIHdpdGggYSBkaWZmZXJlbnQgb2JqZWN0IGFuZCBwdXJwb3NlLCBhbmQgZWFjaCB0aGVyZWZvcmUgdW5pdGluZyB3aXRoIHRoZSByZXN0IGZvciB0aGUgY29tbW9uIGdvb2Qgb25seSBpbiB0aW1lcyBvZiBwZXJpbCwgdGhyb3VnaCBmZWFyIG9mIHByaXZhdGUgbG9zcywgYnV0IG90aGVyd2lzZSBjb25zdWx0aW5nIG9ubHkgaGlzIG93biBpbnRlcmVzdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaXMgbm90IHdvcnRoIHdoaWxlIHRvIGNlbnN1cmUgdGhlIGNvbW1vbiBydW4gb2YgbGVnaXNsYXRvcnMsIHdobyBmYWlsIHRocm91Z2ggaWdub3JhbmNlIG9yIHdlYWtuZXNzLiBCdXQgd2hlbiBhIHdpc2UgbWFuIGhhZCBjb25zZW50ZWQgdG8gYmUga2luZyBvdmVyIGEgcGVvcGxlIG5ld2x5IGNvbnN0aXR1dGVkIGFuZCBwbGlhbnQgdG8gaGlzIGV2ZXJ5IHdpc2gsIHdoYXQgc2hvdWxkIGhhdmUgYmVlbiBoaXMgZmlyc3QgY2FyZSwgdW5sZXNzIGl0IHdhcyB0aGUgcmVhcmluZyBvZiBib3lzIGFuZCB0aGUgdHJhaW5pbmcgb2YgeW91dGhzIHNvIHRoYXQgdGhlcmUgbWlnaHQgYmUgbm8gY29uZnVzaW5nIGRpZmZlcmVuY2VzIGluIHRoZWlyIGNoYXJhY3RlcnMsIGJ1dCB0aGF0IHRoZXkgbWlnaHQgYmUgbW91bGRlZCBhbmQgZmFzaGlvbmVkIGZyb20gdGhlIHZlcnkgb3V0c2V0IHNvIGFzIHRvIHdhbGsgaGFybW9uaW91c2x5IHRvZ2V0aGVyIGluIHRoZSBzYW1lIHBhdGggb2YgdmlydHVlPyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCBpbmRlZWQsIHdhcyB3aGF0IGhlbHBlZCBMeWN1cmd1cyB0byBzZWN1cmUsIGFtb25nIG90aGVyIHRoaW5ncywgdGhlIHN0YWJpbGl0eSBhbmQgcGVybWFuZW5jZSBvZiBoaXMgbGF3cy4gVGhlIFNwYXJ0YW5zIHRvb2sgb2F0aHMgdG8gbWFpbnRhaW4gdGhlc2UgbGF3cywgaXQgaXMgdHJ1ZSwgYnV0IHRoaXMgd291bGQgaGF2ZSBhdmFpbGVkIGxpdHRsZSBoYWQgaGUgbm90LCBieSBtZWFucyBvZiBoaXMgdHJhaW5pbmcgYW5kIGVkdWNhdGlvbiBvZiB0aGUgYm95cywgaW5mdXNlZCBoaXMgbGF3cywgYXMgaXQgd2VyZSwgaW50byB0aGVpciBjaGFyYWN0ZXJzLCBhbmQgbWFkZSB0aGUgZW11bG91cyBsb3ZlIG9mIGhpcyBnb3Zlcm5tZW50IGFuIGludGVncmFsIHBhcnQgb2YgdGhlaXIgcmVhcmluZy4gVGhlIHJlc3VsdCB3YXMgdGhhdCBmb3IgbW9yZSB0aGFuIGZpdmUgaHVuZHJlZCB5ZWFycyB0aGUgc292ZXJlaWduIGFuZCBmdW5kYW1lbnRhbCBmZWF0dXJlcyBvZiBoaXMgbGVnaXNsYXRpb24gcmVtYWluZWQgaW4gZm9yY2UsIGxpa2UgYSBzdHJvbmcgYW5kIHBlbmV0cmF0aW5nIGR5ZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIHdhcyB0aGUgZW5kIGFuZCBhaW0gb2YgTnVtYSdzIGdvdmVybm1lbnQsIG5hbWVseSwgdGhlIGNvbnRpbnVhbmNlIG9mIHBlYWNlIGFuZCBmcmllbmRzaGlwIGJldHdlZW4gUm9tZSBhbmQgb3RoZXIgbmF0aW9ucywgc3RyYWlnaHR3YXkgdmFuaXNoZWQgZnJvbSB0aGUgZWFydGggd2l0aCBoaW0uIEFmdGVyIGhpcyBkZWF0aCB0aGUgZG91YmxlIGRvb3JzIG9mIHRoZSB0ZW1wbGU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjAuMSIgdmFsaWQ9InllcyI+TnVtYSwgeHguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoaWNoIGhlIGhhZCBrZXB0IGNvbnRpbnVvdXNseSBjbG9zZWQsIGFzIGlmIGhlIHJlYWxseSBoYWQgd2FyIGNhZ2VkIGFuZCBjb25maW5lZCB0aGVyZSwgd2VyZSB0aHJvd24gd2lkZSBvcGVuLCBhbmQgSXRhbHkgd2FzIGZpbGxlZCB3aXRoIHRoZSBibG9vZCBvZiB0aGUgc2xhaW4uIFRodXMgbm90IGV2ZW4gZm9yIGEgbGl0dGxlIHRpbWUgZGlkIHRoZSBiZWF1dGlmdWwgZWRpZmljZSBvZiBqdXN0aWNlIHdoaWNoIGhlIGhhZCByZWFyZWQgcmVtYWluIHN0YW5kaW5nLCBiZWNhdXNlIGl0IGxhY2tlZCB0aGUgY2VtZW50IG9mIGVkdWNhdGlvbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCB0aGVuITwvcT4gc29tZSBvbmUgd2lsbCBzYXksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2FzIG5vdCBSb21lIGFkdmFuY2VkIGFuZCBiZXR0ZXJlZCBieSBoZXIgd2Fycz88L3E+IFRoYXQgaXMgYSBxdWVzdGlvbiB3aGljaCB3aWxsIG5lZWQgYSBsb25nIGFuc3dlciwgaWYgSSBhbSB0byBzYXRpc2Z5IG1lbiB3aG8gaG9sZCB0aGF0IGJldHRlcm1lbnQgY29uc2lzdHMgaW4gd2VhbHRoLCBsdXh1cnkgYW5kIGVtcGlyZSwgcmF0aGVyIHRoYW4gaW4gc2FmZXR5LCBnZW50bGVuZXNzLCBhbmQgdGhhdCBpbmRlcGVuZGVuY2Ugd2hpY2ggaXMgYXR0ZW5kZWQgYnkgcmlnaHRlb3VzbmVzcy4gSG93ZXZlciwgaXQgd2lsbCBiZSB0aG91Z2h0LCBJIHN1cHBvc2UsIHRvIGZhdm91ciB0aGUgc3VwZXJpb3IgY2xhaW1zIG9mIEx5Y3VyZ3VzLCB0aGF0LCB3aGVyZWFzIHRoZSBSb21hbnMgaW5jcmVhc2VkIGluIHBvd2VyIGFzIHRoZXkgZGlkIGFmdGVyIGFiYW5kb25pbmcgdGhlIGluc3RpdHV0aW9ucyBvZiBOdW1hJ3MgdGltZSwgCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+dGhlIExhY2VkYWVtb25pYW5zLCBvbiB0aGUgb3RoZXIgaGFuZCwganVzdCBhcyBzb29uIGFzIHRoZXkgZm9yc29vayB0aGUgcHJlY2VwdHMgb2YgTHljdXJndXMsIHNhbmsgZnJvbSB0aGUgaGlnaGVzdCB0byB0aGUgbG93ZXN0IHBsYWNlLCBsb3N0IHRoZWlyIHN1cHJlbWFjeSBvdmVyIHRoZSBHcmVla3MsIGFuZCB3ZXJlIGluIGRhbmdlciBvZiB1dHRlciBkZXN0cnVjdGlvbi4gTmV2ZXJ0aGVsZXNzLCB0aGlzIHJlbWFpbnMgYSBncmVhdCBmZWF0dXJlIGluIE51bWEncyBjYXJlZXIsIGFuZCBvbmUgcmVhbGx5IGRpdmluZSwgdGhhdCBoZSB3YXMgYSBzdHJhbmdlciwgYW5kIHlldCB3YXMgc3VtbW9uZWQgdG8gdGhlIHRocm9uZSwgd2hlcmUgaGUgY2hhbmdlZCB0aGUgd2hvbGUgbmF0dXJlIG9mIHRoZSBzdGF0ZSBieSBmb3JjZSBvZiBwZXJzdWFzaW9uIGFsb25lLCBhbmQgbWFzdGVyZWQgYSBjaXR5IHdoaWNoIHdhcyBub3QgeWV0IGluIHN5bXBhdGh5IHdpdGggaGlzIHZpZXdzOyBhbmQgdGhhdCBoZSBhY2NvbXBsaXNoZWQgdGhpcyB3aXRob3V0IGFwcGVhbCB0byBhcm1zIG9yIGFueSB2aW9sZW5jZSAodW5saWtlIEx5Y3VyZ3VzLCB3aG8gbGVkIHRoZSBub2JsZXMgaW4gYXJtcyBhZ2FpbnN0IHRoZSBjb21tb25zKSwgYnV0IGJ5IGhpcyB3aXNkb20gYW5kIGp1c3RpY2Ugd29uIHRoZSBoZWFydHMgb2YgYWxsIHRoZSBjaXRpemVucyBhbmQgYnJvdWdodCB0aGVtIGludG8gaGFybW9ueS4KCQkJPC9wPgogICAgICA8L2JvZHk+CiAgIDwvdGV4dD4KPGJvZHkgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DT01QQVJJU09OIE9GIExZQ1VSR1VTIEFORCBOVU1BPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgd2UgaGF2ZSByZWNvdW50ZWQgdGhlIGxpdmVzIG9mIE51bWEgYW5kIEx5Y3VyZ3VzLCBhbmQgYm90aCBsaWUgY2xlYXJseSBiZWZvcmUgdXMsIHdlIG11c3QgYXR0ZW1wdCwgZXZlbiB0aG91Z2ggdGhlIHRhc2sgYmUgZGlmZmljdWx0LCB0byBhc3NlbWJsZSBhbmQgcHV0IHRvZ2V0aGVyIHRoZWlyIHBvaW50cyBvZiBkaWZmZXJlbmNlLiBGb3IgdGhlaXIgcG9pbnRzIG9mIGxpa2VuZXNzIGFyZSBvYnZpb3VzIGZyb20gdGhlaXIgY2FyZWVyczogdGhlaXIgd2lzZSBtb2RlcmF0aW9uLCB0aGVpciBwaWV0eSwgdGhlaXIgdGFsZW50IGZvciBnb3Zlcm5pbmcgYW5kIGVkdWNhdGluZywgYW5kIHRoZWlyIGJvdGggZGVyaXZpbmcgdGhlaXIgbGF3cyBmcm9tIGEgZGl2aW5lIHNvdXJjZS4gQnV0IGVhY2ggYWxzbyBwZXJmb3JtZWQgbm9ibGUgZGVlZHMgcGVjdWxpYXIgdG8gaGltc2VsZi4gVG8gYmVnaW4gd2l0aCwgTnVtYSBhY2NlcHRlZCwgYnV0IEx5Y3VyZ3VzIHJlc2lnbmVkLCBhIGtpbmdkb20uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T25lIGdvdCBpdCB3aXRob3V0IGFza2luZyBmb3IgaXQsIHRoZSBvdGhlciBoYWQgaXQgYW5kIGdhdmUgaXQgdXAuIE9uZSB3YXMgbWFkZSBieSBvdGhlcnMgdGhlaXIgc292ZXJlaWduLCB0aG91Z2ggYSBwcml2YXRlIHBlcnNvbiBhbmQgYSBzdHJhbmdlcjsgdGhlIG90aGVyIG1hZGUgaGltc2VsZiBhIHByaXZhdGUgcGVyc29uLCB0aG91Z2ggaGUgd2FzIGEga2luZy4gSXQgd2FzIGEgbm9ibGUgdGhpbmcsIG9mIGNvdXJzZSwgdG8gd2luIGEga2luZ2RvbSBieSByaWdodGVvdXNuZXNzOyBidXQgaXQgd2FzIGFsc28gYSBub2JsZSB0aGluZyB0byBzZXQgcmlnaHRlb3VzbmVzcyBhYm92ZSBhIGtpbmdkb20uIEZvciBpdCB3YXMgdmlydHVlIHdoaWNoIHJlbmRlcmVkIHRoZSBvbmUgc28gZmFtb3VzIGFzIHRvIGJlIGp1ZGdlZCB3b3J0aHkgb2YgYSBraW5nZG9tLCBhbmQgdmlydHVlLCB0b28sIHdoaWNoIG1hZGUgdGhlIG90aGVyIHNvIGdyZWF0IGFzIHRvIHNjb3JuIGEga2luZ2RvbS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZW4sIGl0IGlzIGdyYW50ZWQgdGhhdCwganVzdCBhcyBtdXNpY2lhbnMgdHVuZSB0aGVpciBseXJlcywgc28gTHljdXJndXMgdGlnaHRlbmVkIHRoZSBzdHJpbmdzIGF0IFNwYXJ0YSwgd2hpY2ggaGUgZm91bmQgcmVsYXhlZCB3aXRoIGx1eHVyeSwgYW5kIE51bWEgbG9vc2VuZWQgdGhlIHN0cmluZ3MgYXQgUm9tZSwgd2hlcmUgdGhlIHRvbmVzIHdlcmUgc2hhcnAgYW5kIGhpZ2g7IGJ1dCB0aGUgdGFzayB3YXMgbW9yZSBkaWZmaWN1bHQgaW4gdGhlIGNhc2Ugb2YgTHljdXJndXMuIEZvciBoaXMgZWZmb3J0cyB3ZXJlIHRvIHBlcnN1YWRlIHRoZSBjaXRpemVucywgbm90IHRvIHRha2Ugb2ZmIHRoZWlyIGJyZWFzdC1wbGF0ZXMgYW5kIGxheSBhc2lkZSB0aGVpciBzd29yZHMsIGJ1dCB0byBjYXN0IGF3YXkgZ29sZCBhbmQgc2lsdmVyLCBhbmQgYWJhbmRvbiBjb3N0bHkgY291Y2hlcyBhbmQgdGFibGVzOyBub3QgdG8gY2Vhc2UgZnJvbSB3YXJzIGFuZCBob2xkIGZlc3RpdmFscyBhbmQgc2FjcmlmaWNlcywgYnV0IHRvIGdpdmUgdXAgZmVhc3RpbmcgYW5kIGRyaW5raW5nIGFuZCBwcmFjdGlzZSBsYWJvcmlvdXNseSBhcyBzb2xkaWVycyBhbmQgYXRobGV0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgb25lIGFjY29tcGxpc2hlZCBhbGwgaGlzIGVuZHMgYnkgcGVyc3Vhc2lvbiwgdGhyb3VnaCB0aGUgZ29vZC13aWxsIGFuZCBob25vdXIgaW4gd2hpY2ggaGlzIHBlb3BsZSBoZWxkIGhpbTsgYnV0IHRoZSBvdGhlciBoYWQgdG8gcmlzayBoaXMgbGlmZSBhbmQgc3VmZmVyIHdvdW5kcywgYW5kIHNjYXJjZWx5IHRoZW4gcHJldmFpbGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPk51bWEncyBtdXNlLCBob3dldmVyLCB3YXMgZ2VudGxlIGFuZCBodW1hbmUsIGFuZCBoZSBjb252ZXJ0ZWQgaGlzIHBlb3BsZSB0byBwZWFjZSBhbmQgcmlnaHRlb3VzbmVzcywgYW5kIHNvZnRlbmVkIHRoZWlyIHZpb2xlbnQgYW5kIGZpZXJ5IHRlbXBlcnMuIEFuZCBpZiB3ZSBtdXN0IGFzY3JpYmUgdG8gdGhlIGFkbWluaXN0cmF0aW9uIG9mIEx5Y3VyZ3VzIHRoZSB0cmVhdG1lbnQgb2YgdGhlIEhlbG90cywgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YSBtb3N0IHNhdmFnZSBhbmQgbGF3bGVzcyBwcmFjdGljZSwgd2Ugc2hhbGwgb3duIHRoYXQgTnVtYSB3YXMgZmFyIG1vcmUgSGVsbGVuaWMgYXMgYSBsYXdnaXZlciwgc2luY2UgaGUgZ2F2ZSBhY2tub3dsZWRnZWQgc2xhdmVzIGEgdGFzdGUgb2YgdGhlIGRpZ25pdHkgb2YgZnJlZWRvbSwgYnkgbWFraW5nIGl0IHRoZSBjdXN0b20gZm9yIHRoZW0gdG8gZmVhc3QgaW4gdGhlIGNvbXBhbnkgb2YgdGhlaXIgbWFzdGVycyBkdXJpbmcgdGhlIFNhdHVybmFsaWE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIG1pZC13aW50ZXIgaGFydmVzdCBmZXN0aXZhbCBpbiBob25vdXIgb2YgU2F0dXJudXMuPC9ub3RlPiBGb3IgdGhpcyB0b28gd2FzIG9uZSBvZiB0aGUgaW5zdGl0dXRpb25zIG9mIE51bWEsIGFzIHdlIGFyZSB0b2xkLCB3aG8gdGhlcmVieSBhZG1pdHRlZCB0byB0aGUgZW5qb3ltZW50IG9mIHRoZSB5ZWFybHkgZnJ1aXRzIG9mIHRoZSBlYXJ0aCB0aG9zZSB3aG8gaGFkIGhlbHBlZCB0byBwcm9kdWNlIHRoZW0uIFNvbWUsIGhvd2V2ZXIsIGZhbmN5IHRoYXQgdGhpcyBjdXN0b20gd2FzIGEgcmVtaW5kZXIgb2YgdGhlIGVxdWFsaXR5IHdoaWNoIGNoYXJhY3Rlcml6ZWQgdGhlIGZhbW91cyBTYXR1cm5pYW4gYWdlLCB3aGVuIHRoZXJlIHdhcyBuZWl0aGVyIHNsYXZlIG5vciBtYXN0ZXIsIGJ1dCBhbGwgd2VyZSByZWdhcmRlZCBhcyBraW5zbWVuIGFuZCBlcXVhbHMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIGdlbmVyYWwsIGJvdGggYWxpa2UgbWFuaWZlc3RseSBzdHJvdmUgdG8gbGVhZCB0aGVpciBwZW9wbGVzIHRvIGluZGVwZW5kZW5jZSBhbmQgc29icmlldHk7IGJ1dCBhcyByZWdhcmRzIHRoZSBvdGhlciB2aXJ0dWVzLCB0aGUgb25lIHNldCBoaXMgYWZmZWN0aW9ucyBtb3JlIG9uIGJyYXZlcnksIHRoZSBvdGhlciBvbiByaWdodGVvdXNuZXNzOyB1bmxlc3MsIGluZGVlZCwgdGhlIGRpZmZlcmVudCBuYXR1cmVzIG9yIHVzYWdlcyBvbiB3aGljaCB0aGUgZ292ZXJubWVudCBvZiBlYWNoIHdhcyBiYXNlZCByZXF1aXJlZCBkaWZmZXJlbnQgcHJvdmlzaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IHdhcyBub3Qgb3V0IG9mIGNvd2FyZGljZSB0aGF0IE51bWEgcHV0IGEgc3RvcCB0byB0aGUgd2FnaW5nIG9mIHdhciwgYnV0IHRvIHByZXZlbnQgdGhlIGNvbW1pc3Npb24gb2YgaW5qdXN0aWNlOyBuZWl0aGVyIHdhcyBpdCB0byBwcm9tb3RlIHRoZSBjb21taXNzaW9uIG9mIGluanVzdGljZSB0aGF0IEx5Y3VyZ3VzIG1hZGUgaGlzIHBlb3BsZSB3YXJsaWtlLCBidXQgdGhhdCB0aGV5IG1pZ2h0IG5vdCBzdWZmZXIgaW5qdXN0aWNlLiBBY2NvcmRpbmdseSwgaW4gcmVtb3ZpbmcgdGhlIGV4Y2Vzc2VzIGFuZCBzdXBwbHlpbmcgdGhlIGRlZmljaWVuY2llcyBvZiB0aGVpciBjaXRpemVucywgYm90aCB3ZXJlIGZvcmNlZCB0byBtYWtlIGdyZWF0IGlubm92YXRpb25zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHN1cmVseSwgYXMgcmVnYXJkcyB0aGUgYXJyYW5nZW1lbnQgYW5kIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBjaXRpemVucyB1bmRlciB0aGVpciByZXNwZWN0aXZlIGdvdmVybm1lbnRzLCBOdW1hJ3Mgd2FzIHN0cm9uZ2x5IHBvcHVsYXIgYW5kIGluY2xpbmVkIHRvIGZhdm91ciB0aGUgbWFzc2VzLCByZXN1bHRpbmcgaW4gYSBwcm9taXNjdW91cyBhbmQgdmFyaWVnYXRlZCBjb21tb25hbHR5IG9mIGdvbGRzbWl0aHMsIG11c2ljaWFucywgYW5kIGxlYXRoZXItd29ya2VyczsgYnV0IHRoYXQgb2YgTHljdXJndXMgd2FzIHJpZ2lkIGFuZCBhcmlzdG9jcmF0aWMsIHJlbGVnYXRpbmcgdGhlIG1lY2hhbmljYWwgYXJ0cyBpbnRvIHRoZSBoYW5kcyBvZiBzbGF2ZXMgYW5kIGFsaWVucywgYnV0IGNvbmZpbmluZyB0aGUgY2l0aXplbnMgdGhlbXNlbHZlcyB0byB0aGUgdXNlIG9mIHRoZSBzaGllbGQgYW5kIHRoZSBzcGVhciwgc28gdGhhdCB0aGV5IHdlcmUgYXJ0aWZpY2VycyBvZiB3YXIgYW5kIHNlcnZhbnRzIG9mIEFyZXMsIGJ1dCBrbmV3IGFuZCBjYXJlZCBmb3Igbm90aGluZyBlbHNlIHRoYW4gdG8gb2JleSB0aGVpciBjb21tYW5kZXJzIGFuZCBtYXN0ZXIgdGhlaXIgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGZyZWVtZW4gd2VyZSBub3QgZXZlbiBwZXJtaXR0ZWQgdG8gdHJhbnNhY3QgYnVzaW5lc3MsIHRoYXQgdGhleSBtaWdodCBiZSBlbnRpcmVseSBhbmQgZm9yZXZlciBmcmVlLCBidXQgdGhlIHdob2xlIGFwcGFyYXR1cyBvZiBidXNpbmVzcyB3YXMgdHVybmVkIG92ZXIgdG8gc2xhdmVzIGFuZCBIZWxvdHMsIGp1c3QgbGlrZSB0aGUgcHJlcGFyYXRpb24gYW5kIHNlcnZpbmcgb2YgdGhlaXIgbWVhbHMuIE51bWEsIG9uIHRoZSBjb250cmFyeSwgbWFkZSBubyBzdWNoIGRpc3RpbmN0aW9ucywgYnV0LCB3aGlsZSBoZSBwdXQgYSBzdG9wIHRvIG1pbGl0YXJ5IHJhcGFjaXR5LCBoZSBwcm9oaWJpdGVkIG5vIG90aGVyIGdhaW5mdWwgb2NjdXBhdGlvbi4gTm9yIGRpZCBoZSByZWR1Y2UgdGhlIGdyZWF0IGluZXF1YWxpdGllcyByZXN1bHRpbmcgdGhlcmVmcm9tLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgbGVmdCB0aGUgYWNxdWlzaXRpb24gb2Ygd2VhbHRoIHdob2xseSB1bnJlc3RyaWN0ZWQsIGFuZCBwYWlkIG5vIGF0dGVudGlvbiB0byB0aGUgZ3JlYXQgaW5jcmVhc2Ugb2YgcG92ZXJ0eSBhbmQgaXRzIGdyYWR1YWwgaW5mbHV4IGludG8gdGhlIGNpdHkuIEFuZCB5ZXQgaXQgd2FzIGhpcyBkdXR5IGF0IHRoZSB2ZXJ5IG91dHNldCwgd2hpbGUgYXMgeWV0IHRoZXJlIHdhcyBubyBnZW5lcmFsIG9yIGdyZWF0IGRpc3Bhcml0eSBvZiBtZWFucywgYnV0IHBlb3BsZSBzdGlsbCBsaXZlZCBvbiBtdWNoIHRoZSBzYW1lIHBsYW5lLCB0byBtYWtlIGEgc3RhbmQgYWdhaW5zdCByYXBhY2l0eSwgYXMgTHljdXJndXMgZGlkLCBhbmQgdGFrZSBtZWFzdXJlcyBvZiBwcmVjYXV0aW9uIGFnYWluc3QgaXRzIG1pc2NoaWVmczsgZm9yIHRoZXNlIHdlcmUgbm90IHRyaWZsaW5nLCBidXQgZnVybmlzaGVkIHRoZSBzZWVkIGFuZCBzb3VyY2Ugb2YgdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IGV2aWxzIG9mIGFmdGVyIHRpbWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgcmVnYXJkcyB0aGUgcmVkaXN0cmlidXRpb24gb2YgdGhlIGxhbmQsIEx5Y3VyZ3VzLCBpbiBteSBvcGluaW9uLCBpcyBub3QgdG8gYmUgY2Vuc3VyZWQgZm9yIG1ha2luZyBpdCwgbm9yIE51bWEgZm9yIG5vdCBtYWtpbmcgaXQuIEluIHRoZSBvbmUgY2FzZSwgdGhlIHJlc3VsdGluZyBlcXVhbGl0eSB3YXMgdGhlIGZvdW5kYXRpb24gYW5kIGJhc2Ugb2YgaGlzIHBvbGl0eTsgYnV0IGluIHRoZSBvdGhlciwgc2luY2UgdGhlIGFsbG90bWVudCBvZiBsYW5kcyB3YXMgcmVjZW50LCB0aGVyZSB3YXMgbm8gdXJnZW50IHJlYXNvbiBmb3IgaW50cm9kdWNpbmcgYW5vdGhlciBkaXZpc2lvbiwgb3IgZm9yIGRpc3R1cmJpbmcgdGhlIGZpcnN0IGFzc2lnbm1lbnQsIHdoaWNoIHByb2JhYmx5IHdhcyBzdGlsbCBpbiBmb3JjZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCByZWdhcmQgdG8gY29tbXVuaXR5IGluIG1hcnJpYWdlIGFuZCBwYXJlbnRhZ2UsIHRob3VnaCBib3RoLCBieSBhIHNvdW5kIHBvbGljeSwgaW5jdWxjYXRlZCBpbiBodXNiYW5kcyBhIGZyZWVkb20gZnJvbSBzZWxmaXNoIGplYWxvdXN5LCBzdGlsbCwgdGhlaXIgbWV0aG9kcyB3ZXJlIG5vdCBlbnRpcmVseSBhbGlrZS4gVGhlIFJvbWFuIGh1c2JhbmQsIGlmIGhlIGhhZCBhIHN1ZmZpY2llbnQgbnVtYmVyIG9mIGNoaWxkcmVuIHRvIHJlYXIsIGFuZCBhbm90aGVyLCB3aG8gbGFja2VkIGNoaWxkcmVuLCBjb3VsZCBwZXJzdWFkZSBoaW0gdG8gdGhlIHN0ZXAsIHJlbGlucXVpc2hlZCBoaXMgd2lmZSB0byBoaW0sIGhhdmluZyB0aGUgcG93ZXIgb2Ygc3VycmVuZGVyaW5nIGhlciBlbnRpcmVseSwgb3Igb25seSBmb3IgYSBzZWFzb247IGJ1dCB0aGUgU3BhcnRhbiwgd2hpbGUgaGlzIHdpZmUgcmVtYWluZWQgaW4gaGlzIGhvdXNlLCBhbmQgdGhlIG1hcnJpYWdlIHJldGFpbmVkIGl0cyBvcmlnaW5hbCByaWdodHMgYW5kIG9ibGlnYXRpb25zLCBtaWdodCBhbGxvdyBhbnkgb25lIHdobyBnYWluZWQgaGlzIGNvbnNlbnQgdG8gc2hhcmUgaGlzIHdpZmUgZm9yIHRoZSBwdXJwb3NlIG9mIGdldHRpbmcgY2hpbGRyZW4gYnkgaGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbWFueSBodXNiYW5kcywgYXMgd2UgaGF2ZSBzYWlkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNS43IiB2YWxpZD0ieWVzIj5MeWN1cmd1cywgeHYuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdvdWxkIGFjdHVhbGx5IGludml0ZSBpbnRvIHRoZWlyIGhvbWVzIG1lbiB3aG9tIHRoZXkgdGhvdWdodCBtb3N0IGxpa2VseSB0byBwcm9jdXJlIHRoZW0gaGFuZHNvbWUgYW5kIG5vYmxlIGNoaWxkcmVuLiBXaGF0LCB0aGVuLCBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gY3VzdG9tcz8gV2UgbWF5IHNheSwgcGVyaGFwcywgdGhhdCB0aGUgU3BhcnRhbiBpbXBsaWVzIGEgY29tcGxldGUgaW5kaWZmZXJlbmNlIHRvIHRoZSB3aWZlLCBhbmQgdG8gdGhlIGplYWxvdXMgZW1vdGlvbnMgd2hpY2ggY29uZm91bmQgYW5kIGNvbnN1bWUgdGhlIGhlYXJ0cyBvZiBtb3N0IG1lbjsgd2hpbGUgdGhlIFJvbWFuLCBhcyBpZiB3aXRoIHNoYW1lLWZhY2VkIG1vZGVzdHksIG1ha2VzIGEgdmVpbCBvZiB0aGUgbmV3IGJldHJvdGhhbCwgYW5kIGNvbmNlZGVzIHRoYXQgY29tbXVuaXR5IG9mIHdpdmVzIGlzIHJlYWxseSBpbnN1cHBvcnRhYmxlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwgZnVydGhlciwgTnVtYSdzIHdhdGNoZnVsIGNhcmUgb2YgeW91bmcgbWFpZGVucyB3YXMgbW9yZSBjb25kdWNpdmUgdG8gZmVtaW5pbmUgZGVjb3J1bTsgYnV0IHRoZSB0cmVhdG1lbnQgb2YgdGhlbSBieSBMeWN1cmd1cywgYmVpbmcgZW50aXJlbHkgdW5jb25maW5lZCBhbmQgdW5mZW1pbmluZSwgaGFzIGdpdmVuIG9jY2FzaW9uIHRvIHRoZSBwb2V0cy4gVGhleSBjYWxsIHRoZW0gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGFpbm9tZXJpZGVzLDwvcT4gCiAgICAgICAgICAgIDxlbXBoPmJhcmUtdGhpZ2hlZDwvZW1waD4gKHNvIElieWN1cyksIGFuZCByZXZpbGUgdGhlbSBhcyBtYWQgYWZ0ZXIgbWVuLiBUaHVzIEV1cmlwaWRlcyBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEFuZHIuIDU4NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5BbmRyb21hY2hlPC90aXRsZT4sIDU4N2YuPC9iaWJsPiAoS2lyY2hob2ZmKSwgc2xpZ2h0bHkgYWRhcHRlZC48L25vdGU+OuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGV5IGxlYXZlIHRoZWlyIGhvbWVzIHRvIG1pbmdsZSB3aXRoIHRoZSB5b3V0aHM7PC9sPgoJCQkJCSAgICAgICAgICA8bD5UaGVpciB0aGlnaHMgYXJlIG5ha2VkLCBmbHlpbmcgZnJlZSB0aGVpciByb2Jlcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gZmFjdCB0aGUgZmxhcHMgb2YgdGhlIHR1bmljIHdvcm4gYnkgdGhlaXIgbWFpZGVucyB3ZXJlIG5vdCBzZXduIHRvZ2V0aGVyIGJlbG93IHRoZSB3YWlzdCwgYnV0IHdvdWxkIGZseSBiYWNrIGFuZCBsYXkgYmFyZSB0aGUgd2hvbGUgdGhpZ2ggYXMgdGhleSB3YWxrZWQuIFNvcGhvY2xlcyBwaWN0dXJlcyB0aGUgdGhpbmcgdmVyeSBjbGVhcmx5IGluIHRoZXNlIHdvcmRzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgNzg4IChOYXVjaykuPC9ub3RlPjrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QW5kIHRoYXQgeW91bmcgbWFpZCwgd2hvc2UgdHVuaWMsIHN0aWxsIHVuc2V3biw8L2w+CgkJCQkJICAgICAgICAgIDxsPkxheXMgYmFyZSBoZXIgZ2xlYW1pbmcgdGhpZ2g8L2w+CgkJCQkJICAgICAgICAgIDxsPkJldHdlZW4gaXRzIGZvbGRzLCBIZXJtaW9uZS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28gdGhlaXIgd29tZW4sIGl0IGlzIHNhaWQsIHdlcmUgdG9vIGJvbGQsIHB1dHRpbmcgb24gbWVuJ3MgYWlycyB3aXRoIHRoZWlyIGh1c2JhbmRzIGV2ZW4sIHRvIGJlZ2luIHdpdGgsIHNpbmNlIHRoZXkgcnVsZWQgdGhlaXIgaG91c2VzIGFic29sdXRlbHksIGFuZCBiZXNpZGVzLCBvbiBwdWJsaWMgb2NjYXNpb25zLCB0YWtpbmcgcGFydCBpbiBkZWJhdGUgYW5kIHRoZSBmcmVlc3Qgc3BlZWNoIG9uIHRoZSBtb3N0IGltcG9ydGFudCBzdWJqZWN0cy4gQnV0IE51bWEsIHdoaWxlIGNhcmVmdWxseSBwcmVzZXJ2aW5nIHRvIHRoZSBtYXRyb25zIHRoYXQgZGlnbmlmaWVkIGFuZCBob25vdXJhYmxlIHJlbGF0aW9uIHRvIHRoZWlyIGh1c2JhbmRzIHdoaWNoIHdhcyBiZXN0b3dlZCBvbiB0aGVtIGJ5IFJvbXVsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE5LjYiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHhpeC4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlbiBoZSB0cmllZCBieSBraW5kbHkgdXNhZ2UgdG8gZWZmYWNlIHRoZSBtZW1vcnkgb2YgdGhlIHZpb2xlbmNlIGRvbmUgdGhlbSwgbmV2ZXJ0aGVsZXNzIGVuam9pbmVkIGdyZWF0IG1vZGVzdHkgdXBvbiB0aGVtLCBmb3JiYWRlIHRoZW0gYWxsIGJ1c3kgaW50ZXJtZWRkbGluZywgdGF1Z2h0IHRoZW0gc29icmlldHksIGFuZCBhY2N1c3RvbWVkIHRoZW0gdG8gYmUgc2lsZW50OyB3aW5lIHRoZXkgd2VyZSB0byByZWZyYWluIGZyb20gZW50aXJlbHksIGFuZCB3ZXJlIG5vdCB0byBzcGVhaywgZXZlbiBvbiB0aGUgbW9zdCBuZWNlc3NhcnkgdG9waWNzLCB1bmxlc3MgdGhlaXIgaHVzYmFuZHMgd2VyZSB3aXRoIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBhIHdvbWFuIG9uY2UgcGxlYWRlZCBoZXIgb3duIGNhdXNlIGluIHRoZSBmb3J1bSwgdGhlIHNlbmF0ZSBzZW50IHRvIGlucXVpcmUgb2YgYW4gb3JhY2xlIHdoYXQgdGhlIGV2ZW50IG1pZ2h0IHBvcnRlbmQgZm9yIHRoZSBjaXR5LiBBbmQgZm9yIHRoZWlyIHVzdWFsIGdlbnRsZW5lc3MgYW5kIHJlYWRpbmVzcyB0byBvYmV5LCB0aGVyZSBpcyBzdHJvbmcgZXZpZGVuY2UgaW4gdGhlIHNwZWNpZmljIG1lbnRpb24gbWFkZSBvZiB0aG9zZSB3aG8gd2VyZSBsZXNzIGFtZW5hYmxlLiBGb3IganVzdCBhcyBvdXIgR3JlZWsgaGlzdG9yaWFucyByZWNvcmQgdGhlIG5hbWVzIG9mIHRob3NlIHdobyBmaXJzdCBzbGV3IGtpbnNmb2xrLCBvciBtYWRlIHdhciBvbiB0aGVpciBicm90aGVycywgb3Igd2VyZSBwYXJyaWNpZGVzLCBvciBtYXRyaWNpZGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5zbyB0aGUgUm9tYW5zIG1ha2UgcmVjb3JkIG9mIHRoZSBmYWN0IHRoYXQgU3B1cml1cyBDYXJ2aWxpdXMgd2FzIHRoZSBmaXJzdCB0byBkaXZvcmNlIGhpcyB3aWZlLCB0d28gaHVuZHJlZCBhbmQgdGhpcnR5IHllYXJzIGFmdGVyIHRoZSBmb3VuZGluZyBvZiBSb21lLCB0aGVyZSBiZWluZyBubyBwcmVjZWRlbnQgZm9yIGl0OyBhbHNvIHRoYXQgdGhlIHdpZmUgb2YgUGluYXJpdXMsIFRoYWxhZWEgYnkgbmFtZSwgd2FzIHRoZSBmaXJzdCB3b21hbiB0byBxdWFycmVsIHdpdGggaGVyIG93biBtb3RoZXItaW4tbGF3LCBHZWdhbmlhLCBpbiB0aGUgcmVpZ24gb2YgVGFycXVpbml1cyBTdXBlcmJ1cy4gSW4gc3VjaCBmaXR0aW5nIGFuZCBwcm9wZXIgbWFubmVyIHdlcmUgbWFycmlhZ2VzIHJlZ3VsYXRlZCBieSB0aGVpciBsYXdnaXZlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlciwgdGhlIHByYWN0aWNlIG9mIHRoZSB0d28gcGVvcGxlcyBpbiB0aGUgbWF0dGVyIG9mIGdpdmluZyB0aGVpciB5b3VuZyBtYWlkcyBpbiBtYXJyaWFnZSBjb25mb3JtcyB0byB0aGVpciBlZHVjYXRpb24gb2YgdGhlbSBpbiBnZW5lcmFsLiBMeWN1cmd1cyBtYWRlIHRoZW0gYnJpZGVzIG9ubHkgd2hlbiB0aGV5IHdlcmUgZnVsbHkgcmlwZSBhbmQgZWFnZXIgZm9yIGl0LCBpbiBvcmRlciB0aGF0IGludGVyY291cnNlIHdpdGggYSBodXNiYW5kLCBjb21pbmcgYXQgYSB0aW1lIHdoZW4gbmF0dXJlIGNyYXZlZCBpdCwgbWlnaHQgcHJvZHVjZSBhIGtpbmRseSBsb3ZlLCBpbnN0ZWFkIG9mIHRoZSB0aW1vcm91cyBoYXRlIHRoYXQgZm9sbG93cyB1bm5hdHVyYWwgY29tcHVsc2lvbjsgYWxzbyB0aGF0IHRoZWlyIGJvZGllcyBtaWdodCBiZSB2aWdvcm91cyBlbm91Z2ggdG8gZW5kdXJlIHRoZSBzdHJhaW4gb2YgY29uY2VwdGlvbiBhbmQgY2hpbGQtYmlydGgsIGNvbnZpbmNlZCBhcyBoZSB3YXMgdGhhdCBtYXJyaWFnZSBoYWQgbm8gb3RoZXIgZW5kIHRoYW4gdGhlIHByb2R1Y3Rpb24gb2YgY2hpbGRyZW4uIFRoZSBSb21hbnMsIG9uIHRoZSBvdGhlciBoYW5kLCBnYXZlIHRoZWlyIG1haWRlbnMgaW4gbWFycmlhZ2Ugd2hlbiB0aGV5IHdlcmUgdHdlbHZlIHllYXJzIG9sZCwgb3IgZXZlbiB5b3VuZ2VyLiBJbiB0aGlzIHdheSBtb3JlIHRoYW4gYW55IG90aGVyLCBpdCB3YXMgdGhvdWdodCwgYm90aCB0aGVpciBib2RpZXMgYW5kIHRoZWlyIGRpc3Bvc2l0aW9ucyB3b3VsZCBiZSBwdXJlIGFuZCB1bmRlZmlsZWQgd2hlbiB0aGVpciBodXNiYW5kcyB0b29rIGNvbnRyb2wgb2YgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgY2xlYXIsIHRoZXJlZm9yZSwgdGhhdCBvbmUgcHJhY3RpY2UgcmVnYXJkZWQgbmF0dXJlIG1vcmUsIHdpdGggY2hpbGRyZW4gaW4gdmlldzsgdGhlIG90aGVyIHJlZ2FyZGVkIG1vcmUgdGhlIGZvcm1hdGlvbiBvZiBjaGFyYWN0ZXIsIHdpdGggbWFycmllZCBsaWZlIGluIHZpZXcuCgkJCTwvcD4KICAgICAgICAgPHA+QnV0IHN1cmVseSwgYnkgaGlzIGNhcmVmdWwgYXR0ZW50aW9uIHRvIGJveXMsIGJ5IHRoZWlyIGNvbGxlY3Rpb24gaW50byBjb21wYW5pZXMsIHRoZWlyIGRpc2NpcGxpbmUgYW5kIGNvbnN0YW50IGFzc29jaWF0aW9uLCBhbmQgYnkgaGlzIHBhaW5zdGFraW5nIGFycmFuZ2VtZW50cyBmb3IgdGhlaXIgbWVhbHMgYW5kIGJvZGlseSBleGVyY2lzZSBhbmQgc3BvcnRzLCBMeWN1cmd1cyBwcm92ZXMgdGhhdCBOdW1hIHdhcyBubyBtb3JlIHRoYW4gYW4gb3JkaW5hcnkgbGF3Z2l2ZXIuIEZvciBOdW1hIGxlZnQgdGhlIGJyaW5naW5nIHVwIG9mIHlvdXRocyB0byB0aGUgd2lzaGVzIG9yIG5lY2Vzc2l0aWVzIG9mIHRoZWlyIGZhdGhlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmF0aGVyIG1pZ2h0LCBpZiBoZSB3aXNoZWQsIG1ha2UgaGlzIHNvbiBhIHRpbGxlciBvZiB0aGUgc29pbCwgb3IgYSBzaGlwd3JpZ2h0LCBvciBtaWdodCB0ZWFjaCBoaW0gdG8gYmUgYSBzbWl0aCBvciBhIGZsdXRlLXBsYXllciwgYXMgaWYgaXQgd2VyZSBub3QgaW1wb3J0YW50IHRoYXQgYWxsIG9mIHRoZW0gc2hvdWxkIGJlIHRyYWluZWQgd2l0aCBvbmUgYW5kIHRoZSBzYW1lIGVuZCBpbiB2aWV3IGZyb20gdGhlIG91dHNldCwgYW5kIGhhdmUgdGhlaXIgZGlzcG9zaXRpb25zIGZvcm1lZCBhbGlrZTsgYnV0IHJhdGhlciBhcyBpZiB0aGV5IHdlcmUgbGlrZSBwYXNzZW5nZXJzIG9uIGEgc2hpcCwgZWFjaCBjb21pbmcgd2l0aCBhIGRpZmZlcmVudCBvYmplY3QgYW5kIHB1cnBvc2UsIGFuZCBlYWNoIHRoZXJlZm9yZSB1bml0aW5nIHdpdGggdGhlIHJlc3QgZm9yIHRoZSBjb21tb24gZ29vZCBvbmx5IGluIHRpbWVzIG9mIHBlcmlsLCB0aHJvdWdoIGZlYXIgb2YgcHJpdmF0ZSBsb3NzLCBidXQgb3RoZXJ3aXNlIGNvbnN1bHRpbmcgb25seSBoaXMgb3duIGludGVyZXN0cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCBpcyBub3Qgd29ydGggd2hpbGUgdG8gY2Vuc3VyZSB0aGUgY29tbW9uIHJ1biBvZiBsZWdpc2xhdG9ycywgd2hvIGZhaWwgdGhyb3VnaCBpZ25vcmFuY2Ugb3Igd2Vha25lc3MuIEJ1dCB3aGVuIGEgd2lzZSBtYW4gaGFkIGNvbnNlbnRlZCB0byBiZSBraW5nIG92ZXIgYSBwZW9wbGUgbmV3bHkgY29uc3RpdHV0ZWQgYW5kIHBsaWFudCB0byBoaXMgZXZlcnkgd2lzaCwgd2hhdCBzaG91bGQgaGF2ZSBiZWVuIGhpcyBmaXJzdCBjYXJlLCB1bmxlc3MgaXQgd2FzIHRoZSByZWFyaW5nIG9mIGJveXMgYW5kIHRoZSB0cmFpbmluZyBvZiB5b3V0aHMgc28gdGhhdCB0aGVyZSBtaWdodCBiZSBubyBjb25mdXNpbmcgZGlmZmVyZW5jZXMgaW4gdGhlaXIgY2hhcmFjdGVycywgYnV0IHRoYXQgdGhleSBtaWdodCBiZSBtb3VsZGVkIGFuZCBmYXNoaW9uZWQgZnJvbSB0aGUgdmVyeSBvdXRzZXQgc28gYXMgdG8gd2FsayBoYXJtb25pb3VzbHkgdG9nZXRoZXIgaW4gdGhlIHNhbWUgcGF0aCBvZiB2aXJ0dWU/IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGluZGVlZCwgd2FzIHdoYXQgaGVscGVkIEx5Y3VyZ3VzIHRvIHNlY3VyZSwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGUgc3RhYmlsaXR5IGFuZCBwZXJtYW5lbmNlIG9mIGhpcyBsYXdzLiBUaGUgU3BhcnRhbnMgdG9vayBvYXRocyB0byBtYWludGFpbiB0aGVzZSBsYXdzLCBpdCBpcyB0cnVlLCBidXQgdGhpcyB3b3VsZCBoYXZlIGF2YWlsZWQgbGl0dGxlIGhhZCBoZSBub3QsIGJ5IG1lYW5zIG9mIGhpcyB0cmFpbmluZyBhbmQgZWR1Y2F0aW9uIG9mIHRoZSBib3lzLCBpbmZ1c2VkIGhpcyBsYXdzLCBhcyBpdCB3ZXJlLCBpbnRvIHRoZWlyIGNoYXJhY3RlcnMsIGFuZCBtYWRlIHRoZSBlbXVsb3VzIGxvdmUgb2YgaGlzIGdvdmVybm1lbnQgYW4gaW50ZWdyYWwgcGFydCBvZiB0aGVpciByZWFyaW5nLiBUaGUgcmVzdWx0IHdhcyB0aGF0IGZvciBtb3JlIHRoYW4gZml2ZSBodW5kcmVkIHllYXJzIHRoZSBzb3ZlcmVpZ24gYW5kIGZ1bmRhbWVudGFsIGZlYXR1cmVzIG9mIGhpcyBsZWdpc2xhdGlvbiByZW1haW5lZCBpbiBmb3JjZSwgbGlrZSBhIHN0cm9uZyBhbmQgcGVuZXRyYXRpbmcgZHllLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoYXQgd2hpY2ggd2FzIHRoZSBlbmQgYW5kIGFpbSBvZiBOdW1hJ3MgZ292ZXJubWVudCwgbmFtZWx5LCB0aGUgY29udGludWFuY2Ugb2YgcGVhY2UgYW5kIGZyaWVuZHNoaXAgYmV0d2VlbiBSb21lIGFuZCBvdGhlciBuYXRpb25zLCBzdHJhaWdodHdheSB2YW5pc2hlZCBmcm9tIHRoZSBlYXJ0aCB3aXRoIGhpbS4gQWZ0ZXIgaGlzIGRlYXRoIHRoZSBkb3VibGUgZG9vcnMgb2YgdGhlIHRlbXBsZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAyMC4xIiB2YWxpZD0ieWVzIj5OdW1hLCB4eC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggaGUgaGFkIGtlcHQgY29udGludW91c2x5IGNsb3NlZCwgYXMgaWYgaGUgcmVhbGx5IGhhZCB3YXIgY2FnZWQgYW5kIGNvbmZpbmVkIHRoZXJlLCB3ZXJlIHRocm93biB3aWRlIG9wZW4sIGFuZCBJdGFseSB3YXMgZmlsbGVkIHdpdGggdGhlIGJsb29kIG9mIHRoZSBzbGFpbi4gVGh1cyBub3QgZXZlbiBmb3IgYSBsaXR0bGUgdGltZSBkaWQgdGhlIGJlYXV0aWZ1bCBlZGlmaWNlIG9mIGp1c3RpY2Ugd2hpY2ggaGUgaGFkIHJlYXJlZCByZW1haW4gc3RhbmRpbmcsIGJlY2F1c2UgaXQgbGFja2VkIHRoZSBjZW1lbnQgb2YgZWR1Y2F0aW9uLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIHRoZW4hPC9xPiBzb21lIG9uZSB3aWxsIHNheSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53YXMgbm90IFJvbWUgYWR2YW5jZWQgYW5kIGJldHRlcmVkIGJ5IGhlciB3YXJzPzwvcT4gVGhhdCBpcyBhIHF1ZXN0aW9uIHdoaWNoIHdpbGwgbmVlZCBhIGxvbmcgYW5zd2VyLCBpZiBJIGFtIHRvIHNhdGlzZnkgbWVuIHdobyBob2xkIHRoYXQgYmV0dGVybWVudCBjb25zaXN0cyBpbiB3ZWFsdGgsIGx1eHVyeSBhbmQgZW1waXJlLCByYXRoZXIgdGhhbiBpbiBzYWZldHksIGdlbnRsZW5lc3MsIGFuZCB0aGF0IGluZGVwZW5kZW5jZSB3aGljaCBpcyBhdHRlbmRlZCBieSByaWdodGVvdXNuZXNzLiBIb3dldmVyLCBpdCB3aWxsIGJlIHRob3VnaHQsIEkgc3VwcG9zZSwgdG8gZmF2b3VyIHRoZSBzdXBlcmlvciBjbGFpbXMgb2YgTHljdXJndXMsIHRoYXQsIHdoZXJlYXMgdGhlIFJvbWFucyBpbmNyZWFzZWQgaW4gcG93ZXIgYXMgdGhleSBkaWQgYWZ0ZXIgYWJhbmRvbmluZyB0aGUgaW5zdGl0dXRpb25zIG9mIE51bWEncyB0aW1lLCAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz50aGUgTGFjZWRhZW1vbmlhbnMsIG9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IGFzIHNvb24gYXMgdGhleSBmb3Jzb29rIHRoZSBwcmVjZXB0cyBvZiBMeWN1cmd1cywgc2FuayBmcm9tIHRoZSBoaWdoZXN0IHRvIHRoZSBsb3dlc3QgcGxhY2UsIGxvc3QgdGhlaXIgc3VwcmVtYWN5IG92ZXIgdGhlIEdyZWVrcywgYW5kIHdlcmUgaW4gZGFuZ2VyIG9mIHV0dGVyIGRlc3RydWN0aW9uLiBOZXZlcnRoZWxlc3MsIHRoaXMgcmVtYWlucyBhIGdyZWF0IGZlYXR1cmUgaW4gTnVtYSdzIGNhcmVlciwgYW5kIG9uZSByZWFsbHkgZGl2aW5lLCB0aGF0IGhlIHdhcyBhIHN0cmFuZ2VyLCBhbmQgeWV0IHdhcyBzdW1tb25lZCB0byB0aGUgdGhyb25lLCB3aGVyZSBoZSBjaGFuZ2VkIHRoZSB3aG9sZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGJ5IGZvcmNlIG9mIHBlcnN1YXNpb24gYWxvbmUsIGFuZCBtYXN0ZXJlZCBhIGNpdHkgd2hpY2ggd2FzIG5vdCB5ZXQgaW4gc3ltcGF0aHkgd2l0aCBoaXMgdmlld3M7IGFuZCB0aGF0IGhlIGFjY29tcGxpc2hlZCB0aGlzIHdpdGhvdXQgYXBwZWFsIHRvIGFybXMgb3IgYW55IHZpb2xlbmNlICh1bmxpa2UgTHljdXJndXMsIHdobyBsZWQgdGhlIG5vYmxlcyBpbiBhcm1zIGFnYWluc3QgdGhlIGNvbW1vbnMpLCBidXQgYnkgaGlzIHdpc2RvbSBhbmQganVzdGljZSB3b24gdGhlIGhlYXJ0cyBvZiBhbGwgdGhlIGNpdGl6ZW5zIGFuZCBicm91Z2h0IHRoZW0gaW50byBoYXJtb255LgoJCQk8L3A+CiAgICAgIDwvYm9keT4KICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DT01QQVJJU09OIE9GIExZQ1VSR1VTIEFORCBOVU1BPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgd2UgaGF2ZSByZWNvdW50ZWQgdGhlIGxpdmVzIG9mIE51bWEgYW5kIEx5Y3VyZ3VzLCBhbmQgYm90aCBsaWUgY2xlYXJseSBiZWZvcmUgdXMsIHdlIG11c3QgYXR0ZW1wdCwgZXZlbiB0aG91Z2ggdGhlIHRhc2sgYmUgZGlmZmljdWx0LCB0byBhc3NlbWJsZSBhbmQgcHV0IHRvZ2V0aGVyIHRoZWlyIHBvaW50cyBvZiBkaWZmZXJlbmNlLiBGb3IgdGhlaXIgcG9pbnRzIG9mIGxpa2VuZXNzIGFyZSBvYnZpb3VzIGZyb20gdGhlaXIgY2FyZWVyczogdGhlaXIgd2lzZSBtb2RlcmF0aW9uLCB0aGVpciBwaWV0eSwgdGhlaXIgdGFsZW50IGZvciBnb3Zlcm5pbmcgYW5kIGVkdWNhdGluZywgYW5kIHRoZWlyIGJvdGggZGVyaXZpbmcgdGhlaXIgbGF3cyBmcm9tIGEgZGl2aW5lIHNvdXJjZS4gQnV0IGVhY2ggYWxzbyBwZXJmb3JtZWQgbm9ibGUgZGVlZHMgcGVjdWxpYXIgdG8gaGltc2VsZi4gVG8gYmVnaW4gd2l0aCwgTnVtYSBhY2NlcHRlZCwgYnV0IEx5Y3VyZ3VzIHJlc2lnbmVkLCBhIGtpbmdkb20uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T25lIGdvdCBpdCB3aXRob3V0IGFza2luZyBmb3IgaXQsIHRoZSBvdGhlciBoYWQgaXQgYW5kIGdhdmUgaXQgdXAuIE9uZSB3YXMgbWFkZSBieSBvdGhlcnMgdGhlaXIgc292ZXJlaWduLCB0aG91Z2ggYSBwcml2YXRlIHBlcnNvbiBhbmQgYSBzdHJhbmdlcjsgdGhlIG90aGVyIG1hZGUgaGltc2VsZiBhIHByaXZhdGUgcGVyc29uLCB0aG91Z2ggaGUgd2FzIGEga2luZy4gSXQgd2FzIGEgbm9ibGUgdGhpbmcsIG9mIGNvdXJzZSwgdG8gd2luIGEga2luZ2RvbSBieSByaWdodGVvdXNuZXNzOyBidXQgaXQgd2FzIGFsc28gYSBub2JsZSB0aGluZyB0byBzZXQgcmlnaHRlb3VzbmVzcyBhYm92ZSBhIGtpbmdkb20uIEZvciBpdCB3YXMgdmlydHVlIHdoaWNoIHJlbmRlcmVkIHRoZSBvbmUgc28gZmFtb3VzIGFzIHRvIGJlIGp1ZGdlZCB3b3J0aHkgb2YgYSBraW5nZG9tLCBhbmQgdmlydHVlLCB0b28sIHdoaWNoIG1hZGUgdGhlIG90aGVyIHNvIGdyZWF0IGFzIHRvIHNjb3JuIGEga2luZ2RvbS4KCQkJPC9wPgogICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgd2UgaGF2ZSByZWNvdW50ZWQgdGhlIGxpdmVzIG9mIE51bWEgYW5kIEx5Y3VyZ3VzLCBhbmQgYm90aCBsaWUgY2xlYXJseSBiZWZvcmUgdXMsIHdlIG11c3QgYXR0ZW1wdCwgZXZlbiB0aG91Z2ggdGhlIHRhc2sgYmUgZGlmZmljdWx0LCB0byBhc3NlbWJsZSBhbmQgcHV0IHRvZ2V0aGVyIHRoZWlyIHBvaW50cyBvZiBkaWZmZXJlbmNlLiBGb3IgdGhlaXIgcG9pbnRzIG9mIGxpa2VuZXNzIGFyZSBvYnZpb3VzIGZyb20gdGhlaXIgY2FyZWVyczogdGhlaXIgd2lzZSBtb2RlcmF0aW9uLCB0aGVpciBwaWV0eSwgdGhlaXIgdGFsZW50IGZvciBnb3Zlcm5pbmcgYW5kIGVkdWNhdGluZywgYW5kIHRoZWlyIGJvdGggZGVyaXZpbmcgdGhlaXIgbGF3cyBmcm9tIGEgZGl2aW5lIHNvdXJjZS4gQnV0IGVhY2ggYWxzbyBwZXJmb3JtZWQgbm9ibGUgZGVlZHMgcGVjdWxpYXIgdG8gaGltc2VsZi4gVG8gYmVnaW4gd2l0aCwgTnVtYSBhY2NlcHRlZCwgYnV0IEx5Y3VyZ3VzIHJlc2lnbmVkLCBhIGtpbmdkb20uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBnb3QgaXQgd2l0aG91dCBhc2tpbmcgZm9yIGl0LCB0aGUgb3RoZXIgaGFkIGl0IGFuZCBnYXZlIGl0IHVwLiBPbmUgd2FzIG1hZGUgYnkgb3RoZXJzIHRoZWlyIHNvdmVyZWlnbiwgdGhvdWdoIGEgcHJpdmF0ZSBwZXJzb24gYW5kIGEgc3RyYW5nZXI7IHRoZSBvdGhlciBtYWRlIGhpbXNlbGYgYSBwcml2YXRlIHBlcnNvbiwgdGhvdWdoIGhlIHdhcyBhIGtpbmcuIEl0IHdhcyBhIG5vYmxlIHRoaW5nLCBvZiBjb3Vyc2UsIHRvIHdpbiBhIGtpbmdkb20gYnkgcmlnaHRlb3VzbmVzczsgYnV0IGl0IHdhcyBhbHNvIGEgbm9ibGUgdGhpbmcgdG8gc2V0IHJpZ2h0ZW91c25lc3MgYWJvdmUgYSBraW5nZG9tLiBGb3IgaXQgd2FzIHZpcnR1ZSB3aGljaCByZW5kZXJlZCB0aGUgb25lIHNvIGZhbW91cyBhcyB0byBiZSBqdWRnZWQgd29ydGh5IG9mIGEga2luZ2RvbSwgYW5kIHZpcnR1ZSwgdG9vLCB3aGljaCBtYWRlIHRoZSBvdGhlciBzbyBncmVhdCBhcyB0byBzY29ybiBhIGtpbmdkb20uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZW4sIGl0IGlzIGdyYW50ZWQgdGhhdCwganVzdCBhcyBtdXNpY2lhbnMgdHVuZSB0aGVpciBseXJlcywgc28gTHljdXJndXMgdGlnaHRlbmVkIHRoZSBzdHJpbmdzIGF0IFNwYXJ0YSwgd2hpY2ggaGUgZm91bmQgcmVsYXhlZCB3aXRoIGx1eHVyeSwgYW5kIE51bWEgbG9vc2VuZWQgdGhlIHN0cmluZ3MgYXQgUm9tZSwgd2hlcmUgdGhlIHRvbmVzIHdlcmUgc2hhcnAgYW5kIGhpZ2g7IGJ1dCB0aGUgdGFzayB3YXMgbW9yZSBkaWZmaWN1bHQgaW4gdGhlIGNhc2Ugb2YgTHljdXJndXMuIEZvciBoaXMgZWZmb3J0cyB3ZXJlIHRvIHBlcnN1YWRlIHRoZSBjaXRpemVucywgbm90IHRvIHRha2Ugb2ZmIHRoZWlyIGJyZWFzdC1wbGF0ZXMgYW5kIGxheSBhc2lkZSB0aGVpciBzd29yZHMsIGJ1dCB0byBjYXN0IGF3YXkgZ29sZCBhbmQgc2lsdmVyLCBhbmQgYWJhbmRvbiBjb3N0bHkgY291Y2hlcyBhbmQgdGFibGVzOyBub3QgdG8gY2Vhc2UgZnJvbSB3YXJzIGFuZCBob2xkIGZlc3RpdmFscyBhbmQgc2FjcmlmaWNlcywgYnV0IHRvIGdpdmUgdXAgZmVhc3RpbmcgYW5kIGRyaW5raW5nIGFuZCBwcmFjdGlzZSBsYWJvcmlvdXNseSBhcyBzb2xkaWVycyBhbmQgYXRobGV0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgb25lIGFjY29tcGxpc2hlZCBhbGwgaGlzIGVuZHMgYnkgcGVyc3Vhc2lvbiwgdGhyb3VnaCB0aGUgZ29vZC13aWxsIGFuZCBob25vdXIgaW4gd2hpY2ggaGlzIHBlb3BsZSBoZWxkIGhpbTsgYnV0IHRoZSBvdGhlciBoYWQgdG8gcmlzayBoaXMgbGlmZSBhbmQgc3VmZmVyIHdvdW5kcywgYW5kIHNjYXJjZWx5IHRoZW4gcHJldmFpbGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHRoZW4sIGl0IGlzIGdyYW50ZWQgdGhhdCwganVzdCBhcyBtdXNpY2lhbnMgdHVuZSB0aGVpciBseXJlcywgc28gTHljdXJndXMgdGlnaHRlbmVkIHRoZSBzdHJpbmdzIGF0IFNwYXJ0YSwgd2hpY2ggaGUgZm91bmQgcmVsYXhlZCB3aXRoIGx1eHVyeSwgYW5kIE51bWEgbG9vc2VuZWQgdGhlIHN0cmluZ3MgYXQgUm9tZSwgd2hlcmUgdGhlIHRvbmVzIHdlcmUgc2hhcnAgYW5kIGhpZ2g7IGJ1dCB0aGUgdGFzayB3YXMgbW9yZSBkaWZmaWN1bHQgaW4gdGhlIGNhc2Ugb2YgTHljdXJndXMuIEZvciBoaXMgZWZmb3J0cyB3ZXJlIHRvIHBlcnN1YWRlIHRoZSBjaXRpemVucywgbm90IHRvIHRha2Ugb2ZmIHRoZWlyIGJyZWFzdC1wbGF0ZXMgYW5kIGxheSBhc2lkZSB0aGVpciBzd29yZHMsIGJ1dCB0byBjYXN0IGF3YXkgZ29sZCBhbmQgc2lsdmVyLCBhbmQgYWJhbmRvbiBjb3N0bHkgY291Y2hlcyBhbmQgdGFibGVzOyBub3QgdG8gY2Vhc2UgZnJvbSB3YXJzIGFuZCBob2xkIGZlc3RpdmFscyBhbmQgc2FjcmlmaWNlcywgYnV0IHRvIGdpdmUgdXAgZmVhc3RpbmcgYW5kIGRyaW5raW5nIGFuZCBwcmFjdGlzZSBsYWJvcmlvdXNseSBhcyBzb2xkaWVycyBhbmQgYXRobGV0ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGUgb25lIGFjY29tcGxpc2hlZCBhbGwgaGlzIGVuZHMgYnkgcGVyc3Vhc2lvbiwgdGhyb3VnaCB0aGUgZ29vZC13aWxsIGFuZCBob25vdXIgaW4gd2hpY2ggaGlzIHBlb3BsZSBoZWxkIGhpbTsgYnV0IHRoZSBvdGhlciBoYWQgdG8gcmlzayBoaXMgbGlmZSBhbmQgc3VmZmVyIHdvdW5kcywgYW5kIHNjYXJjZWx5IHRoZW4gcHJldmFpbGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPk51bWEncyBtdXNlLCBob3dldmVyLCB3YXMgZ2VudGxlIGFuZCBodW1hbmUsIGFuZCBoZSBjb252ZXJ0ZWQgaGlzIHBlb3BsZSB0byBwZWFjZSBhbmQgcmlnaHRlb3VzbmVzcywgYW5kIHNvZnRlbmVkIHRoZWlyIHZpb2xlbnQgYW5kIGZpZXJ5IHRlbXBlcnMuIEFuZCBpZiB3ZSBtdXN0IGFzY3JpYmUgdG8gdGhlIGFkbWluaXN0cmF0aW9uIG9mIEx5Y3VyZ3VzIHRoZSB0cmVhdG1lbnQgb2YgdGhlIEhlbG90cywgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hIG1vc3Qgc2F2YWdlIGFuZCBsYXdsZXNzIHByYWN0aWNlLCB3ZSBzaGFsbCBvd24gdGhhdCBOdW1hIHdhcyBmYXIgbW9yZSBIZWxsZW5pYyBhcyBhIGxhd2dpdmVyLCBzaW5jZSBoZSBnYXZlIGFja25vd2xlZGdlZCBzbGF2ZXMgYSB0YXN0ZSBvZiB0aGUgZGlnbml0eSBvZiBmcmVlZG9tLCBieSBtYWtpbmcgaXQgdGhlIGN1c3RvbSBmb3IgdGhlbSB0byBmZWFzdCBpbiB0aGUgY29tcGFueSBvZiB0aGVpciBtYXN0ZXJzIGR1cmluZyB0aGUgU2F0dXJuYWxpYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgbWlkLXdpbnRlciBoYXJ2ZXN0IGZlc3RpdmFsIGluIGhvbm91ciBvZiBTYXR1cm51cy48L25vdGU+IEZvciB0aGlzIHRvbyB3YXMgb25lIG9mIHRoZSBpbnN0aXR1dGlvbnMgb2YgTnVtYSwgYXMgd2UgYXJlIHRvbGQsIHdobyB0aGVyZWJ5IGFkbWl0dGVkIHRvIHRoZSBlbmpveW1lbnQgb2YgdGhlIHllYXJseSBmcnVpdHMgb2YgdGhlIGVhcnRoIHRob3NlIHdobyBoYWQgaGVscGVkIHRvIHByb2R1Y2UgdGhlbS4gU29tZSwgaG93ZXZlciwgZmFuY3kgdGhhdCB0aGlzIGN1c3RvbSB3YXMgYSByZW1pbmRlciBvZiB0aGUgZXF1YWxpdHkgd2hpY2ggY2hhcmFjdGVyaXplZCB0aGUgZmFtb3VzIFNhdHVybmlhbiBhZ2UsIHdoZW4gdGhlcmUgd2FzIG5laXRoZXIgc2xhdmUgbm9yIG1hc3RlciwgYnV0IGFsbCB3ZXJlIHJlZ2FyZGVkIGFzIGtpbnNtZW4gYW5kIGVxdWFscy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmEgbW9zdCBzYXZhZ2UgYW5kIGxhd2xlc3MgcHJhY3RpY2UsIHdlIHNoYWxsIG93biB0aGF0IE51bWEgd2FzIGZhciBtb3JlIEhlbGxlbmljIGFzIGEgbGF3Z2l2ZXIsIHNpbmNlIGhlIGdhdmUgYWNrbm93bGVkZ2VkIHNsYXZlcyBhIHRhc3RlIG9mIHRoZSBkaWduaXR5IG9mIGZyZWVkb20sIGJ5IG1ha2luZyBpdCB0aGUgY3VzdG9tIGZvciB0aGVtIHRvIGZlYXN0IGluIHRoZSBjb21wYW55IG9mIHRoZWlyIG1hc3RlcnMgZHVyaW5nIHRoZSBTYXR1cm5hbGlhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIG1pZC13aW50ZXIgaGFydmVzdCBmZXN0aXZhbCBpbiBob25vdXIgb2YgU2F0dXJudXMuPC9ub3RlPiBGb3IgdGhpcyB0b28gd2FzIG9uZSBvZiB0aGUgaW5zdGl0dXRpb25zIG9mIE51bWEsIGFzIHdlIGFyZSB0b2xkLCB3aG8gdGhlcmVieSBhZG1pdHRlZCB0byB0aGUgZW5qb3ltZW50IG9mIHRoZSB5ZWFybHkgZnJ1aXRzIG9mIHRoZSBlYXJ0aCB0aG9zZSB3aG8gaGFkIGhlbHBlZCB0byBwcm9kdWNlIHRoZW0uIFNvbWUsIGhvd2V2ZXIsIGZhbmN5IHRoYXQgdGhpcyBjdXN0b20gd2FzIGEgcmVtaW5kZXIgb2YgdGhlIGVxdWFsaXR5IHdoaWNoIGNoYXJhY3Rlcml6ZWQgdGhlIGZhbW91cyBTYXR1cm5pYW4gYWdlLCB3aGVuIHRoZXJlIHdhcyBuZWl0aGVyIHNsYXZlIG5vciBtYXN0ZXIsIGJ1dCBhbGwgd2VyZSByZWdhcmRlZCBhcyBraW5zbWVuIGFuZCBlcXVhbHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZ2VuZXJhbCwgYm90aCBhbGlrZSBtYW5pZmVzdGx5IHN0cm92ZSB0byBsZWFkIHRoZWlyIHBlb3BsZXMgdG8gaW5kZXBlbmRlbmNlIGFuZCBzb2JyaWV0eTsgYnV0IGFzIHJlZ2FyZHMgdGhlIG90aGVyIHZpcnR1ZXMsIHRoZSBvbmUgc2V0IGhpcyBhZmZlY3Rpb25zIG1vcmUgb24gYnJhdmVyeSwgdGhlIG90aGVyIG9uIHJpZ2h0ZW91c25lc3M7IHVubGVzcywgaW5kZWVkLCB0aGUgZGlmZmVyZW50IG5hdHVyZXMgb3IgdXNhZ2VzIG9uIHdoaWNoIHRoZSBnb3Zlcm5tZW50IG9mIGVhY2ggd2FzIGJhc2VkIHJlcXVpcmVkIGRpZmZlcmVudCBwcm92aXNpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5vdCBvdXQgb2YgY293YXJkaWNlIHRoYXQgTnVtYSBwdXQgYSBzdG9wIHRvIHRoZSB3YWdpbmcgb2Ygd2FyLCBidXQgdG8gcHJldmVudCB0aGUgY29tbWlzc2lvbiBvZiBpbmp1c3RpY2U7IG5laXRoZXIgd2FzIGl0IHRvIHByb21vdGUgdGhlIGNvbW1pc3Npb24gb2YgaW5qdXN0aWNlIHRoYXQgTHljdXJndXMgbWFkZSBoaXMgcGVvcGxlIHdhcmxpa2UsIGJ1dCB0aGF0IHRoZXkgbWlnaHQgbm90IHN1ZmZlciBpbmp1c3RpY2UuIEFjY29yZGluZ2x5LCBpbiByZW1vdmluZyB0aGUgZXhjZXNzZXMgYW5kIHN1cHBseWluZyB0aGUgZGVmaWNpZW5jaWVzIG9mIHRoZWlyIGNpdGl6ZW5zLCBib3RoIHdlcmUgZm9yY2VkIHRvIG1ha2UgZ3JlYXQgaW5ub3ZhdGlvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBnZW5lcmFsLCBib3RoIGFsaWtlIG1hbmlmZXN0bHkgc3Ryb3ZlIHRvIGxlYWQgdGhlaXIgcGVvcGxlcyB0byBpbmRlcGVuZGVuY2UgYW5kIHNvYnJpZXR5OyBidXQgYXMgcmVnYXJkcyB0aGUgb3RoZXIgdmlydHVlcywgdGhlIG9uZSBzZXQgaGlzIGFmZmVjdGlvbnMgbW9yZSBvbiBicmF2ZXJ5LCB0aGUgb3RoZXIgb24gcmlnaHRlb3VzbmVzczsgdW5sZXNzLCBpbmRlZWQsIHRoZSBkaWZmZXJlbnQgbmF0dXJlcyBvciB1c2FnZXMgb24gd2hpY2ggdGhlIGdvdmVybm1lbnQgb2YgZWFjaCB3YXMgYmFzZWQgcmVxdWlyZWQgZGlmZmVyZW50IHByb3Zpc2lvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90IG91dCBvZiBjb3dhcmRpY2UgdGhhdCBOdW1hIHB1dCBhIHN0b3AgdG8gdGhlIHdhZ2luZyBvZiB3YXIsIGJ1dCB0byBwcmV2ZW50IHRoZSBjb21taXNzaW9uIG9mIGluanVzdGljZTsgbmVpdGhlciB3YXMgaXQgdG8gcHJvbW90ZSB0aGUgY29tbWlzc2lvbiBvZiBpbmp1c3RpY2UgdGhhdCBMeWN1cmd1cyBtYWRlIGhpcyBwZW9wbGUgd2FybGlrZSwgYnV0IHRoYXQgdGhleSBtaWdodCBub3Qgc3VmZmVyIGluanVzdGljZS4gQWNjb3JkaW5nbHksIGluIHJlbW92aW5nIHRoZSBleGNlc3NlcyBhbmQgc3VwcGx5aW5nIHRoZSBkZWZpY2llbmNpZXMgb2YgdGhlaXIgY2l0aXplbnMsIGJvdGggd2VyZSBmb3JjZWQgdG8gbWFrZSBncmVhdCBpbm5vdmF0aW9ucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHN1cmVseSwgYXMgcmVnYXJkcyB0aGUgYXJyYW5nZW1lbnQgYW5kIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBjaXRpemVucyB1bmRlciB0aGVpciByZXNwZWN0aXZlIGdvdmVybm1lbnRzLCBOdW1hJ3Mgd2FzIHN0cm9uZ2x5IHBvcHVsYXIgYW5kIGluY2xpbmVkIHRvIGZhdm91ciB0aGUgbWFzc2VzLCByZXN1bHRpbmcgaW4gYSBwcm9taXNjdW91cyBhbmQgdmFyaWVnYXRlZCBjb21tb25hbHR5IG9mIGdvbGRzbWl0aHMsIG11c2ljaWFucywgYW5kIGxlYXRoZXItd29ya2VyczsgYnV0IHRoYXQgb2YgTHljdXJndXMgd2FzIHJpZ2lkIGFuZCBhcmlzdG9jcmF0aWMsIHJlbGVnYXRpbmcgdGhlIG1lY2hhbmljYWwgYXJ0cyBpbnRvIHRoZSBoYW5kcyBvZiBzbGF2ZXMgYW5kIGFsaWVucywgYnV0IGNvbmZpbmluZyB0aGUgY2l0aXplbnMgdGhlbXNlbHZlcyB0byB0aGUgdXNlIG9mIHRoZSBzaGllbGQgYW5kIHRoZSBzcGVhciwgc28gdGhhdCB0aGV5IHdlcmUgYXJ0aWZpY2VycyBvZiB3YXIgYW5kIHNlcnZhbnRzIG9mIEFyZXMsIGJ1dCBrbmV3IGFuZCBjYXJlZCBmb3Igbm90aGluZyBlbHNlIHRoYW4gdG8gb2JleSB0aGVpciBjb21tYW5kZXJzIGFuZCBtYXN0ZXIgdGhlaXIgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGZyZWVtZW4gd2VyZSBub3QgZXZlbiBwZXJtaXR0ZWQgdG8gdHJhbnNhY3QgYnVzaW5lc3MsIHRoYXQgdGhleSBtaWdodCBiZSBlbnRpcmVseSBhbmQgZm9yZXZlciBmcmVlLCBidXQgdGhlIHdob2xlIGFwcGFyYXR1cyBvZiBidXNpbmVzcyB3YXMgdHVybmVkIG92ZXIgdG8gc2xhdmVzIGFuZCBIZWxvdHMsIGp1c3QgbGlrZSB0aGUgcHJlcGFyYXRpb24gYW5kIHNlcnZpbmcgb2YgdGhlaXIgbWVhbHMuIE51bWEsIG9uIHRoZSBjb250cmFyeSwgbWFkZSBubyBzdWNoIGRpc3RpbmN0aW9ucywgYnV0LCB3aGlsZSBoZSBwdXQgYSBzdG9wIHRvIG1pbGl0YXJ5IHJhcGFjaXR5LCBoZSBwcm9oaWJpdGVkIG5vIG90aGVyIGdhaW5mdWwgb2NjdXBhdGlvbi4gTm9yIGRpZCBoZSByZWR1Y2UgdGhlIGdyZWF0IGluZXF1YWxpdGllcyByZXN1bHRpbmcgdGhlcmVmcm9tLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgbGVmdCB0aGUgYWNxdWlzaXRpb24gb2Ygd2VhbHRoIHdob2xseSB1bnJlc3RyaWN0ZWQsIGFuZCBwYWlkIG5vIGF0dGVudGlvbiB0byB0aGUgZ3JlYXQgaW5jcmVhc2Ugb2YgcG92ZXJ0eSBhbmQgaXRzIGdyYWR1YWwgaW5mbHV4IGludG8gdGhlIGNpdHkuIEFuZCB5ZXQgaXQgd2FzIGhpcyBkdXR5IGF0IHRoZSB2ZXJ5IG91dHNldCwgd2hpbGUgYXMgeWV0IHRoZXJlIHdhcyBubyBnZW5lcmFsIG9yIGdyZWF0IGRpc3Bhcml0eSBvZiBtZWFucywgYnV0IHBlb3BsZSBzdGlsbCBsaXZlZCBvbiBtdWNoIHRoZSBzYW1lIHBsYW5lLCB0byBtYWtlIGEgc3RhbmQgYWdhaW5zdCByYXBhY2l0eSwgYXMgTHljdXJndXMgZGlkLCBhbmQgdGFrZSBtZWFzdXJlcyBvZiBwcmVjYXV0aW9uIGFnYWluc3QgaXRzIG1pc2NoaWVmczsgZm9yIHRoZXNlIHdlcmUgbm90IHRyaWZsaW5nLCBidXQgZnVybmlzaGVkIHRoZSBzZWVkIGFuZCBzb3VyY2Ugb2YgdGhlIG1vc3QgYW5kIGdyZWF0ZXN0IGV2aWxzIG9mIGFmdGVyIHRpbWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgcmVnYXJkcyB0aGUgcmVkaXN0cmlidXRpb24gb2YgdGhlIGxhbmQsIEx5Y3VyZ3VzLCBpbiBteSBvcGluaW9uLCBpcyBub3QgdG8gYmUgY2Vuc3VyZWQgZm9yIG1ha2luZyBpdCwgbm9yIE51bWEgZm9yIG5vdCBtYWtpbmcgaXQuIEluIHRoZSBvbmUgY2FzZSwgdGhlIHJlc3VsdGluZyBlcXVhbGl0eSB3YXMgdGhlIGZvdW5kYXRpb24gYW5kIGJhc2Ugb2YgaGlzIHBvbGl0eTsgYnV0IGluIHRoZSBvdGhlciwgc2luY2UgdGhlIGFsbG90bWVudCBvZiBsYW5kcyB3YXMgcmVjZW50LCB0aGVyZSB3YXMgbm8gdXJnZW50IHJlYXNvbiBmb3IgaW50cm9kdWNpbmcgYW5vdGhlciBkaXZpc2lvbiwgb3IgZm9yIGRpc3R1cmJpbmcgdGhlIGZpcnN0IGFzc2lnbm1lbnQsIHdoaWNoIHByb2JhYmx5IHdhcyBzdGlsbCBpbiBmb3JjZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdXJlbHksIGFzIHJlZ2FyZHMgdGhlIGFycmFuZ2VtZW50IGFuZCBjbGFzc2lmaWNhdGlvbiBvZiB0aGUgY2l0aXplbnMgdW5kZXIgdGhlaXIgcmVzcGVjdGl2ZSBnb3Zlcm5tZW50cywgTnVtYSdzIHdhcyBzdHJvbmdseSBwb3B1bGFyIGFuZCBpbmNsaW5lZCB0byBmYXZvdXIgdGhlIG1hc3NlcywgcmVzdWx0aW5nIGluIGEgcHJvbWlzY3VvdXMgYW5kIHZhcmllZ2F0ZWQgY29tbW9uYWx0eSBvZiBnb2xkc21pdGhzLCBtdXNpY2lhbnMsIGFuZCBsZWF0aGVyLXdvcmtlcnM7IGJ1dCB0aGF0IG9mIEx5Y3VyZ3VzIHdhcyByaWdpZCBhbmQgYXJpc3RvY3JhdGljLCByZWxlZ2F0aW5nIHRoZSBtZWNoYW5pY2FsIGFydHMgaW50byB0aGUgaGFuZHMgb2Ygc2xhdmVzIGFuZCBhbGllbnMsIGJ1dCBjb25maW5pbmcgdGhlIGNpdGl6ZW5zIHRoZW1zZWx2ZXMgdG8gdGhlIHVzZSBvZiB0aGUgc2hpZWxkIGFuZCB0aGUgc3BlYXIsIHNvIHRoYXQgdGhleSB3ZXJlIGFydGlmaWNlcnMgb2Ygd2FyIGFuZCBzZXJ2YW50cyBvZiBBcmVzLCBidXQga25ldyBhbmQgY2FyZWQgZm9yIG5vdGhpbmcgZWxzZSB0aGFuIHRvIG9iZXkgdGhlaXIgY29tbWFuZGVycyBhbmQgbWFzdGVyIHRoZWlyIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBmcmVlbWVuIHdlcmUgbm90IGV2ZW4gcGVybWl0dGVkIHRvIHRyYW5zYWN0IGJ1c2luZXNzLCB0aGF0IHRoZXkgbWlnaHQgYmUgZW50aXJlbHkgYW5kIGZvcmV2ZXIgZnJlZSwgYnV0IHRoZSB3aG9sZSBhcHBhcmF0dXMgb2YgYnVzaW5lc3Mgd2FzIHR1cm5lZCBvdmVyIHRvIHNsYXZlcyBhbmQgSGVsb3RzLCBqdXN0IGxpa2UgdGhlIHByZXBhcmF0aW9uIGFuZCBzZXJ2aW5nIG9mIHRoZWlyIG1lYWxzLiBOdW1hLCBvbiB0aGUgY29udHJhcnksIG1hZGUgbm8gc3VjaCBkaXN0aW5jdGlvbnMsIGJ1dCwgd2hpbGUgaGUgcHV0IGEgc3RvcCB0byBtaWxpdGFyeSByYXBhY2l0eSwgaGUgcHJvaGliaXRlZCBubyBvdGhlciBnYWluZnVsIG9jY3VwYXRpb24uIE5vciBkaWQgaGUgcmVkdWNlIHRoZSBncmVhdCBpbmVxdWFsaXRpZXMgcmVzdWx0aW5nIHRoZXJlZnJvbSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBsZWZ0IHRoZSBhY3F1aXNpdGlvbiBvZiB3ZWFsdGggd2hvbGx5IHVucmVzdHJpY3RlZCwgYW5kIHBhaWQgbm8gYXR0ZW50aW9uIHRvIHRoZSBncmVhdCBpbmNyZWFzZSBvZiBwb3ZlcnR5IGFuZCBpdHMgZ3JhZHVhbCBpbmZsdXggaW50byB0aGUgY2l0eS4gQW5kIHlldCBpdCB3YXMgaGlzIGR1dHkgYXQgdGhlIHZlcnkgb3V0c2V0LCB3aGlsZSBhcyB5ZXQgdGhlcmUgd2FzIG5vIGdlbmVyYWwgb3IgZ3JlYXQgZGlzcGFyaXR5IG9mIG1lYW5zLCBidXQgcGVvcGxlIHN0aWxsIGxpdmVkIG9uIG11Y2ggdGhlIHNhbWUgcGxhbmUsIHRvIG1ha2UgYSBzdGFuZCBhZ2FpbnN0IHJhcGFjaXR5LCBhcyBMeWN1cmd1cyBkaWQsIGFuZCB0YWtlIG1lYXN1cmVzIG9mIHByZWNhdXRpb24gYWdhaW5zdCBpdHMgbWlzY2hpZWZzOyBmb3IgdGhlc2Ugd2VyZSBub3QgdHJpZmxpbmcsIGJ1dCBmdXJuaXNoZWQgdGhlIHNlZWQgYW5kIHNvdXJjZSBvZiB0aGUgbW9zdCBhbmQgZ3JlYXRlc3QgZXZpbHMgb2YgYWZ0ZXIgdGltZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyByZWdhcmRzIHRoZSByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgbGFuZCwgTHljdXJndXMsIGluIG15IG9waW5pb24sIGlzIG5vdCB0byBiZSBjZW5zdXJlZCBmb3IgbWFraW5nIGl0LCBub3IgTnVtYSBmb3Igbm90IG1ha2luZyBpdC4gSW4gdGhlIG9uZSBjYXNlLCB0aGUgcmVzdWx0aW5nIGVxdWFsaXR5IHdhcyB0aGUgZm91bmRhdGlvbiBhbmQgYmFzZSBvZiBoaXMgcG9saXR5OyBidXQgaW4gdGhlIG90aGVyLCBzaW5jZSB0aGUgYWxsb3RtZW50IG9mIGxhbmRzIHdhcyByZWNlbnQsIHRoZXJlIHdhcyBubyB1cmdlbnQgcmVhc29uIGZvciBpbnRyb2R1Y2luZyBhbm90aGVyIGRpdmlzaW9uLCBvciBmb3IgZGlzdHVyYmluZyB0aGUgZmlyc3QgYXNzaWdubWVudCwgd2hpY2ggcHJvYmFibHkgd2FzIHN0aWxsIGluIGZvcmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldpdGggcmVnYXJkIHRvIGNvbW11bml0eSBpbiBtYXJyaWFnZSBhbmQgcGFyZW50YWdlLCB0aG91Z2ggYm90aCwgYnkgYSBzb3VuZCBwb2xpY3ksIGluY3VsY2F0ZWQgaW4gaHVzYmFuZHMgYSBmcmVlZG9tIGZyb20gc2VsZmlzaCBqZWFsb3VzeSwgc3RpbGwsIHRoZWlyIG1ldGhvZHMgd2VyZSBub3QgZW50aXJlbHkgYWxpa2UuIFRoZSBSb21hbiBodXNiYW5kLCBpZiBoZSBoYWQgYSBzdWZmaWNpZW50IG51bWJlciBvZiBjaGlsZHJlbiB0byByZWFyLCBhbmQgYW5vdGhlciwgd2hvIGxhY2tlZCBjaGlsZHJlbiwgY291bGQgcGVyc3VhZGUgaGltIHRvIHRoZSBzdGVwLCByZWxpbnF1aXNoZWQgaGlzIHdpZmUgdG8gaGltLCBoYXZpbmcgdGhlIHBvd2VyIG9mIHN1cnJlbmRlcmluZyBoZXIgZW50aXJlbHksIG9yIG9ubHkgZm9yIGEgc2Vhc29uOyBidXQgdGhlIFNwYXJ0YW4sIHdoaWxlIGhpcyB3aWZlIHJlbWFpbmVkIGluIGhpcyBob3VzZSwgYW5kIHRoZSBtYXJyaWFnZSByZXRhaW5lZCBpdHMgb3JpZ2luYWwgcmlnaHRzIGFuZCBvYmxpZ2F0aW9ucywgbWlnaHQgYWxsb3cgYW55IG9uZSB3aG8gZ2FpbmVkIGhpcyBjb25zZW50IHRvIHNoYXJlIGhpcyB3aWZlIGZvciB0aGUgcHVycG9zZSBvZiBnZXR0aW5nIGNoaWxkcmVuIGJ5IGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG1hbnkgaHVzYmFuZHMsIGFzIHdlIGhhdmUgc2FpZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEx5Yy4gMTUuNyIgdmFsaWQ9InllcyI+THljdXJndXMsIHh2LiA3LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3b3VsZCBhY3R1YWxseSBpbnZpdGUgaW50byB0aGVpciBob21lcyBtZW4gd2hvbSB0aGV5IHRob3VnaHQgbW9zdCBsaWtlbHkgdG8gcHJvY3VyZSB0aGVtIGhhbmRzb21lIGFuZCBub2JsZSBjaGlsZHJlbi4gV2hhdCwgdGhlbiwgaXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGN1c3RvbXM/IFdlIG1heSBzYXksIHBlcmhhcHMsIHRoYXQgdGhlIFNwYXJ0YW4gaW1wbGllcyBhIGNvbXBsZXRlIGluZGlmZmVyZW5jZSB0byB0aGUgd2lmZSwgYW5kIHRvIHRoZSBqZWFsb3VzIGVtb3Rpb25zIHdoaWNoIGNvbmZvdW5kIGFuZCBjb25zdW1lIHRoZSBoZWFydHMgb2YgbW9zdCBtZW47IHdoaWxlIHRoZSBSb21hbiwgYXMgaWYgd2l0aCBzaGFtZS1mYWNlZCBtb2Rlc3R5LCBtYWtlcyBhIHZlaWwgb2YgdGhlIG5ldyBiZXRyb3RoYWwsIGFuZCBjb25jZWRlcyB0aGF0IGNvbW11bml0eSBvZiB3aXZlcyBpcyByZWFsbHkgaW5zdXBwb3J0YWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIHJlZ2FyZCB0byBjb21tdW5pdHkgaW4gbWFycmlhZ2UgYW5kIHBhcmVudGFnZSwgdGhvdWdoIGJvdGgsIGJ5IGEgc291bmQgcG9saWN5LCBpbmN1bGNhdGVkIGluIGh1c2JhbmRzIGEgZnJlZWRvbSBmcm9tIHNlbGZpc2ggamVhbG91c3ksIHN0aWxsLCB0aGVpciBtZXRob2RzIHdlcmUgbm90IGVudGlyZWx5IGFsaWtlLiBUaGUgUm9tYW4gaHVzYmFuZCwgaWYgaGUgaGFkIGEgc3VmZmljaWVudCBudW1iZXIgb2YgY2hpbGRyZW4gdG8gcmVhciwgYW5kIGFub3RoZXIsIHdobyBsYWNrZWQgY2hpbGRyZW4sIGNvdWxkIHBlcnN1YWRlIGhpbSB0byB0aGUgc3RlcCwgcmVsaW5xdWlzaGVkIGhpcyB3aWZlIHRvIGhpbSwgaGF2aW5nIHRoZSBwb3dlciBvZiBzdXJyZW5kZXJpbmcgaGVyIGVudGlyZWx5LCBvciBvbmx5IGZvciBhIHNlYXNvbjsgYnV0IHRoZSBTcGFydGFuLCB3aGlsZSBoaXMgd2lmZSByZW1haW5lZCBpbiBoaXMgaG91c2UsIGFuZCB0aGUgbWFycmlhZ2UgcmV0YWluZWQgaXRzIG9yaWdpbmFsIHJpZ2h0cyBhbmQgb2JsaWdhdGlvbnMsIG1pZ2h0IGFsbG93IGFueSBvbmUgd2hvIGdhaW5lZCBoaXMgY29uc2VudCB0byBzaGFyZSBoaXMgd2lmZSBmb3IgdGhlIHB1cnBvc2Ugb2YgZ2V0dGluZyBjaGlsZHJlbiBieSBoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBtYW55IGh1c2JhbmRzLCBhcyB3ZSBoYXZlIHNhaWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHljLiAxNS43IiB2YWxpZD0ieWVzIj5MeWN1cmd1cywgeHYuIDcuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdvdWxkIGFjdHVhbGx5IGludml0ZSBpbnRvIHRoZWlyIGhvbWVzIG1lbiB3aG9tIHRoZXkgdGhvdWdodCBtb3N0IGxpa2VseSB0byBwcm9jdXJlIHRoZW0gaGFuZHNvbWUgYW5kIG5vYmxlIGNoaWxkcmVuLiBXaGF0LCB0aGVuLCBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gY3VzdG9tcz8gV2UgbWF5IHNheSwgcGVyaGFwcywgdGhhdCB0aGUgU3BhcnRhbiBpbXBsaWVzIGEgY29tcGxldGUgaW5kaWZmZXJlbmNlIHRvIHRoZSB3aWZlLCBhbmQgdG8gdGhlIGplYWxvdXMgZW1vdGlvbnMgd2hpY2ggY29uZm91bmQgYW5kIGNvbnN1bWUgdGhlIGhlYXJ0cyBvZiBtb3N0IG1lbjsgd2hpbGUgdGhlIFJvbWFuLCBhcyBpZiB3aXRoIHNoYW1lLWZhY2VkIG1vZGVzdHksIG1ha2VzIGEgdmVpbCBvZiB0aGUgbmV3IGJldHJvdGhhbCwgYW5kIGNvbmNlZGVzIHRoYXQgY29tbXVuaXR5IG9mIHdpdmVzIGlzIHJlYWxseSBpbnN1cHBvcnRhYmxlLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMeWMuIDE1LjciIHZhbGlkPSJ5ZXMiPkx5Y3VyZ3VzLCB4di4gNy48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIE51bWEncyB3YXRjaGZ1bCBjYXJlIG9mIHlvdW5nIG1haWRlbnMgd2FzIG1vcmUgY29uZHVjaXZlIHRvIGZlbWluaW5lIGRlY29ydW07IGJ1dCB0aGUgdHJlYXRtZW50IG9mIHRoZW0gYnkgTHljdXJndXMsIGJlaW5nIGVudGlyZWx5IHVuY29uZmluZWQgYW5kIHVuZmVtaW5pbmUsIGhhcyBnaXZlbiBvY2Nhc2lvbiB0byB0aGUgcG9ldHMuIFRoZXkgY2FsbCB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGhhaW5vbWVyaWRlcyw8L3E+IAogICAgICAgICAgICA8ZW1waD5iYXJlLXRoaWdoZWQ8L2VtcGg+IChzbyBJYnljdXMpLCBhbmQgcmV2aWxlIHRoZW0gYXMgbWFkIGFmdGVyIG1lbi4gVGh1cyBFdXJpcGlkZXMgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRXVyLiBBbmRyLiA1ODciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW5kcm9tYWNoZTwvdGl0bGU+LCA1ODdmLjwvYmlibD4gKEtpcmNoaG9mZiksIHNsaWdodGx5IGFkYXB0ZWQuPC9ub3RlPjrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+VGhleSBsZWF2ZSB0aGVpciBob21lcyB0byBtaW5nbGUgd2l0aCB0aGUgeW91dGhzOzwvbD4KCQkJCQkgICAgICAgICAgPGw+VGhlaXIgdGhpZ2hzIGFyZSBuYWtlZCwgZmx5aW5nIGZyZWUgdGhlaXIgcm9iZXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIGZhY3QgdGhlIGZsYXBzIG9mIHRoZSB0dW5pYyB3b3JuIGJ5IHRoZWlyIG1haWRlbnMgd2VyZSBub3Qgc2V3biB0b2dldGhlciBiZWxvdyB0aGUgd2Fpc3QsIGJ1dCB3b3VsZCBmbHkgYmFjayBhbmQgbGF5IGJhcmUgdGhlIHdob2xlIHRoaWdoIGFzIHRoZXkgd2Fsa2VkLiBTb3Bob2NsZXMgcGljdHVyZXMgdGhlIHRoaW5nIHZlcnkgY2xlYXJseSBpbiB0aGVzZSB3b3Jkczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDc4OCAoTmF1Y2spLjwvbm90ZT464oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkFuZCB0aGF0IHlvdW5nIG1haWQsIHdob3NlIHR1bmljLCBzdGlsbCB1bnNld24sPC9sPgoJCQkJCSAgICAgICAgICA8bD5MYXlzIGJhcmUgaGVyIGdsZWFtaW5nIHRoaWdoPC9sPgoJCQkJCSAgICAgICAgICA8bD5CZXR3ZWVuIGl0cyBmb2xkcywgSGVybWlvbmUuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIHRoZWlyIHdvbWVuLCBpdCBpcyBzYWlkLCB3ZXJlIHRvbyBib2xkLCBwdXR0aW5nIG9uIG1lbidzIGFpcnMgd2l0aCB0aGVpciBodXNiYW5kcyBldmVuLCB0byBiZWdpbiB3aXRoLCBzaW5jZSB0aGV5IHJ1bGVkIHRoZWlyIGhvdXNlcyBhYnNvbHV0ZWx5LCBhbmQgYmVzaWRlcywgb24gcHVibGljIG9jY2FzaW9ucywgdGFraW5nIHBhcnQgaW4gZGViYXRlIGFuZCB0aGUgZnJlZXN0IHNwZWVjaCBvbiB0aGUgbW9zdCBpbXBvcnRhbnQgc3ViamVjdHMuIEJ1dCBOdW1hLCB3aGlsZSBjYXJlZnVsbHkgcHJlc2VydmluZyB0byB0aGUgbWF0cm9ucyB0aGF0IGRpZ25pZmllZCBhbmQgaG9ub3VyYWJsZSByZWxhdGlvbiB0byB0aGVpciBodXNiYW5kcyB3aGljaCB3YXMgYmVzdG93ZWQgb24gdGhlbSBieSBSb211bHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxOS42IiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4aXguIDYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoZW4gaGUgdHJpZWQgYnkga2luZGx5IHVzYWdlIHRvIGVmZmFjZSB0aGUgbWVtb3J5IG9mIHRoZSB2aW9sZW5jZSBkb25lIHRoZW0sIG5ldmVydGhlbGVzcyBlbmpvaW5lZCBncmVhdCBtb2Rlc3R5IHVwb24gdGhlbSwgZm9yYmFkZSB0aGVtIGFsbCBidXN5IGludGVybWVkZGxpbmcsIHRhdWdodCB0aGVtIHNvYnJpZXR5LCBhbmQgYWNjdXN0b21lZCB0aGVtIHRvIGJlIHNpbGVudDsgd2luZSB0aGV5IHdlcmUgdG8gcmVmcmFpbiBmcm9tIGVudGlyZWx5LCBhbmQgd2VyZSBub3QgdG8gc3BlYWssIGV2ZW4gb24gdGhlIG1vc3QgbmVjZXNzYXJ5IHRvcGljcywgdW5sZXNzIHRoZWlyIGh1c2JhbmRzIHdlcmUgd2l0aCB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbnkgcmF0ZSwgaXQgaXMgc2FpZCB0aGF0IHdoZW4gYSB3b21hbiBvbmNlIHBsZWFkZWQgaGVyIG93biBjYXVzZSBpbiB0aGUgZm9ydW0sIHRoZSBzZW5hdGUgc2VudCB0byBpbnF1aXJlIG9mIGFuIG9yYWNsZSB3aGF0IHRoZSBldmVudCBtaWdodCBwb3J0ZW5kIGZvciB0aGUgY2l0eS4gQW5kIGZvciB0aGVpciB1c3VhbCBnZW50bGVuZXNzIGFuZCByZWFkaW5lc3MgdG8gb2JleSwgdGhlcmUgaXMgc3Ryb25nIGV2aWRlbmNlIGluIHRoZSBzcGVjaWZpYyBtZW50aW9uIG1hZGUgb2YgdGhvc2Ugd2hvIHdlcmUgbGVzcyBhbWVuYWJsZS4gRm9yIGp1c3QgYXMgb3VyIEdyZWVrIGhpc3RvcmlhbnMgcmVjb3JkIHRoZSBuYW1lcyBvZiB0aG9zZSB3aG8gZmlyc3Qgc2xldyBraW5zZm9saywgb3IgbWFkZSB3YXIgb24gdGhlaXIgYnJvdGhlcnMsIG9yIHdlcmUgcGFycmljaWRlcywgb3IgbWF0cmljaWRlcywgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+c28gdGhlIFJvbWFucyBtYWtlIHJlY29yZCBvZiB0aGUgZmFjdCB0aGF0IFNwdXJpdXMgQ2FydmlsaXVzIHdhcyB0aGUgZmlyc3QgdG8gZGl2b3JjZSBoaXMgd2lmZSwgdHdvIGh1bmRyZWQgYW5kIHRoaXJ0eSB5ZWFycyBhZnRlciB0aGUgZm91bmRpbmcgb2YgUm9tZSwgdGhlcmUgYmVpbmcgbm8gcHJlY2VkZW50IGZvciBpdDsgYWxzbyB0aGF0IHRoZSB3aWZlIG9mIFBpbmFyaXVzLCBUaGFsYWVhIGJ5IG5hbWUsIHdhcyB0aGUgZmlyc3Qgd29tYW4gdG8gcXVhcnJlbCB3aXRoIGhlciBvd24gbW90aGVyLWluLWxhdywgR2VnYW5pYSwgaW4gdGhlIHJlaWduIG9mIFRhcnF1aW5pdXMgU3VwZXJidXMuIEluIHN1Y2ggZml0dGluZyBhbmQgcHJvcGVyIG1hbm5lciB3ZXJlIG1hcnJpYWdlcyByZWd1bGF0ZWQgYnkgdGhlaXIgbGF3Z2l2ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIGZ1cnRoZXIsIE51bWEncyB3YXRjaGZ1bCBjYXJlIG9mIHlvdW5nIG1haWRlbnMgd2FzIG1vcmUgY29uZHVjaXZlIHRvIGZlbWluaW5lIGRlY29ydW07IGJ1dCB0aGUgdHJlYXRtZW50IG9mIHRoZW0gYnkgTHljdXJndXMsIGJlaW5nIGVudGlyZWx5IHVuY29uZmluZWQgYW5kIHVuZmVtaW5pbmUsIGhhcyBnaXZlbiBvY2Nhc2lvbiB0byB0aGUgcG9ldHMuIFRoZXkgY2FsbCB0aGVtIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5waGFpbm9tZXJpZGVzLDwvcT4gCiAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YmFyZS10aGlnaGVkPC9lbXBoPiAoc28gSWJ5Y3VzKSwgYW5kIHJldmlsZSB0aGVtIGFzIG1hZCBhZnRlciBtZW4uIFRodXMgRXVyaXBpZGVzIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEFuZHIuIDU4NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuZHJvbWFjaGU8L3RpdGxlPiwgNTg3Zi48L2JpYmw+IChLaXJjaGhvZmYpLCBzbGlnaHRseSBhZGFwdGVkLjwvbm90ZT464oCUCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEFuZHIuIDU4NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuZHJvbWFjaGU8L3RpdGxlPiwgNTg3Zi48L2JpYmw+IChLaXJjaGhvZmYpLCBzbGlnaHRseSBhZGFwdGVkLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFuZHJvbWFjaGU8L3RpdGxlPiwgNTg3Zi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGV5IGxlYXZlIHRoZWlyIGhvbWVzIHRvIG1pbmdsZSB3aXRoIHRoZSB5b3V0aHM7PC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZWlyIHRoaWdocyBhcmUgbmFrZWQsIGZseWluZyBmcmVlIHRoZWlyIHJvYmVzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGV5IGxlYXZlIHRoZWlyIGhvbWVzIHRvIG1pbmdsZSB3aXRoIHRoZSB5b3V0aHM7PC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZWlyIHRoaWdocyBhcmUgbmFrZWQsIGZseWluZyBmcmVlIHRoZWlyIHJvYmVzLjwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBmYWN0IHRoZSBmbGFwcyBvZiB0aGUgdHVuaWMgd29ybiBieSB0aGVpciBtYWlkZW5zIHdlcmUgbm90IHNld24gdG9nZXRoZXIgYmVsb3cgdGhlIHdhaXN0LCBidXQgd291bGQgZmx5IGJhY2sgYW5kIGxheSBiYXJlIHRoZSB3aG9sZSB0aGlnaCBhcyB0aGV5IHdhbGtlZC4gU29waG9jbGVzIHBpY3R1cmVzIHRoZSB0aGluZyB2ZXJ5IGNsZWFybHkgaW4gdGhlc2Ugd29yZHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDc4OCAoTmF1Y2spLjwvbm90ZT464oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgdGhhdCB5b3VuZyBtYWlkLCB3aG9zZSB0dW5pYywgc3RpbGwgdW5zZXduLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXlzIGJhcmUgaGVyIGdsZWFtaW5nIHRoaWdoPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJldHdlZW4gaXRzIGZvbGRzLCBIZXJtaW9uZS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQkgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHRoYXQgeW91bmcgbWFpZCwgd2hvc2UgdHVuaWMsIHN0aWxsIHVuc2V3biw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF5cyBiYXJlIGhlciBnbGVhbWluZyB0aGlnaDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CZXR3ZWVuIGl0cyBmb2xkcywgSGVybWlvbmUuPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyB0aGVpciB3b21lbiwgaXQgaXMgc2FpZCwgd2VyZSB0b28gYm9sZCwgcHV0dGluZyBvbiBtZW4ncyBhaXJzIHdpdGggdGhlaXIgaHVzYmFuZHMgZXZlbiwgdG8gYmVnaW4gd2l0aCwgc2luY2UgdGhleSBydWxlZCB0aGVpciBob3VzZXMgYWJzb2x1dGVseSwgYW5kIGJlc2lkZXMsIG9uIHB1YmxpYyBvY2Nhc2lvbnMsIHRha2luZyBwYXJ0IGluIGRlYmF0ZSBhbmQgdGhlIGZyZWVzdCBzcGVlY2ggb24gdGhlIG1vc3QgaW1wb3J0YW50IHN1YmplY3RzLiBCdXQgTnVtYSwgd2hpbGUgY2FyZWZ1bGx5IHByZXNlcnZpbmcgdG8gdGhlIG1hdHJvbnMgdGhhdCBkaWduaWZpZWQgYW5kIGhvbm91cmFibGUgcmVsYXRpb24gdG8gdGhlaXIgaHVzYmFuZHMgd2hpY2ggd2FzIGJlc3Rvd2VkIG9uIHRoZW0gYnkgUm9tdWx1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBSb20uIDE5LjYiIHZhbGlkPSJ5ZXMiPlJvbXVsdXMsIHhpeC4gNi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hlbiBoZSB0cmllZCBieSBraW5kbHkgdXNhZ2UgdG8gZWZmYWNlIHRoZSBtZW1vcnkgb2YgdGhlIHZpb2xlbmNlIGRvbmUgdGhlbSwgbmV2ZXJ0aGVsZXNzIGVuam9pbmVkIGdyZWF0IG1vZGVzdHkgdXBvbiB0aGVtLCBmb3JiYWRlIHRoZW0gYWxsIGJ1c3kgaW50ZXJtZWRkbGluZywgdGF1Z2h0IHRoZW0gc29icmlldHksIGFuZCBhY2N1c3RvbWVkIHRoZW0gdG8gYmUgc2lsZW50OyB3aW5lIHRoZXkgd2VyZSB0byByZWZyYWluIGZyb20gZW50aXJlbHksIGFuZCB3ZXJlIG5vdCB0byBzcGVhaywgZXZlbiBvbiB0aGUgbW9zdCBuZWNlc3NhcnkgdG9waWNzLCB1bmxlc3MgdGhlaXIgaHVzYmFuZHMgd2VyZSB3aXRoIHRoZW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUm9tLiAxOS42IiB2YWxpZD0ieWVzIj5Sb211bHVzLCB4aXguIDYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBpdCBpcyBzYWlkIHRoYXQgd2hlbiBhIHdvbWFuIG9uY2UgcGxlYWRlZCBoZXIgb3duIGNhdXNlIGluIHRoZSBmb3J1bSwgdGhlIHNlbmF0ZSBzZW50IHRvIGlucXVpcmUgb2YgYW4gb3JhY2xlIHdoYXQgdGhlIGV2ZW50IG1pZ2h0IHBvcnRlbmQgZm9yIHRoZSBjaXR5LiBBbmQgZm9yIHRoZWlyIHVzdWFsIGdlbnRsZW5lc3MgYW5kIHJlYWRpbmVzcyB0byBvYmV5LCB0aGVyZSBpcyBzdHJvbmcgZXZpZGVuY2UgaW4gdGhlIHNwZWNpZmljIG1lbnRpb24gbWFkZSBvZiB0aG9zZSB3aG8gd2VyZSBsZXNzIGFtZW5hYmxlLiBGb3IganVzdCBhcyBvdXIgR3JlZWsgaGlzdG9yaWFucyByZWNvcmQgdGhlIG5hbWVzIG9mIHRob3NlIHdobyBmaXJzdCBzbGV3IGtpbnNmb2xrLCBvciBtYWRlIHdhciBvbiB0aGVpciBicm90aGVycywgb3Igd2VyZSBwYXJyaWNpZGVzLCBvciBtYXRyaWNpZGVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoZSBSb21hbnMgbWFrZSByZWNvcmQgb2YgdGhlIGZhY3QgdGhhdCBTcHVyaXVzIENhcnZpbGl1cyB3YXMgdGhlIGZpcnN0IHRvIGRpdm9yY2UgaGlzIHdpZmUsIHR3byBodW5kcmVkIGFuZCB0aGlydHkgeWVhcnMgYWZ0ZXIgdGhlIGZvdW5kaW5nIG9mIFJvbWUsIHRoZXJlIGJlaW5nIG5vIHByZWNlZGVudCBmb3IgaXQ7IGFsc28gdGhhdCB0aGUgd2lmZSBvZiBQaW5hcml1cywgVGhhbGFlYSBieSBuYW1lLCB3YXMgdGhlIGZpcnN0IHdvbWFuIHRvIHF1YXJyZWwgd2l0aCBoZXIgb3duIG1vdGhlci1pbi1sYXcsIEdlZ2FuaWEsIGluIHRoZSByZWlnbiBvZiBUYXJxdWluaXVzIFN1cGVyYnVzLiBJbiBzdWNoIGZpdHRpbmcgYW5kIHByb3BlciBtYW5uZXIgd2VyZSBtYXJyaWFnZXMgcmVndWxhdGVkIGJ5IHRoZWlyIGxhd2dpdmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIHRoZSBwcmFjdGljZSBvZiB0aGUgdHdvIHBlb3BsZXMgaW4gdGhlIG1hdHRlciBvZiBnaXZpbmcgdGhlaXIgeW91bmcgbWFpZHMgaW4gbWFycmlhZ2UgY29uZm9ybXMgdG8gdGhlaXIgZWR1Y2F0aW9uIG9mIHRoZW0gaW4gZ2VuZXJhbC4gTHljdXJndXMgbWFkZSB0aGVtIGJyaWRlcyBvbmx5IHdoZW4gdGhleSB3ZXJlIGZ1bGx5IHJpcGUgYW5kIGVhZ2VyIGZvciBpdCwgaW4gb3JkZXIgdGhhdCBpbnRlcmNvdXJzZSB3aXRoIGEgaHVzYmFuZCwgY29taW5nIGF0IGEgdGltZSB3aGVuIG5hdHVyZSBjcmF2ZWQgaXQsIG1pZ2h0IHByb2R1Y2UgYSBraW5kbHkgbG92ZSwgaW5zdGVhZCBvZiB0aGUgdGltb3JvdXMgaGF0ZSB0aGF0IGZvbGxvd3MgdW5uYXR1cmFsIGNvbXB1bHNpb247IGFsc28gdGhhdCB0aGVpciBib2RpZXMgbWlnaHQgYmUgdmlnb3JvdXMgZW5vdWdoIHRvIGVuZHVyZSB0aGUgc3RyYWluIG9mIGNvbmNlcHRpb24gYW5kIGNoaWxkLWJpcnRoLCBjb252aW5jZWQgYXMgaGUgd2FzIHRoYXQgbWFycmlhZ2UgaGFkIG5vIG90aGVyIGVuZCB0aGFuIHRoZSBwcm9kdWN0aW9uIG9mIGNoaWxkcmVuLiBUaGUgUm9tYW5zLCBvbiB0aGUgb3RoZXIgaGFuZCwgZ2F2ZSB0aGVpciBtYWlkZW5zIGluIG1hcnJpYWdlIHdoZW4gdGhleSB3ZXJlIHR3ZWx2ZSB5ZWFycyBvbGQsIG9yIGV2ZW4geW91bmdlci4gSW4gdGhpcyB3YXkgbW9yZSB0aGFuIGFueSBvdGhlciwgaXQgd2FzIHRob3VnaHQsIGJvdGggdGhlaXIgYm9kaWVzIGFuZCB0aGVpciBkaXNwb3NpdGlvbnMgd291bGQgYmUgcHVyZSBhbmQgdW5kZWZpbGVkIHdoZW4gdGhlaXIgaHVzYmFuZHMgdG9vayBjb250cm9sIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGNsZWFyLCB0aGVyZWZvcmUsIHRoYXQgb25lIHByYWN0aWNlIHJlZ2FyZGVkIG5hdHVyZSBtb3JlLCB3aXRoIGNoaWxkcmVuIGluIHZpZXc7IHRoZSBvdGhlciByZWdhcmRlZCBtb3JlIHRoZSBmb3JtYXRpb24gb2YgY2hhcmFjdGVyLCB3aXRoIG1hcnJpZWQgbGlmZSBpbiB2aWV3LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCB0aGUgcHJhY3RpY2Ugb2YgdGhlIHR3byBwZW9wbGVzIGluIHRoZSBtYXR0ZXIgb2YgZ2l2aW5nIHRoZWlyIHlvdW5nIG1haWRzIGluIG1hcnJpYWdlIGNvbmZvcm1zIHRvIHRoZWlyIGVkdWNhdGlvbiBvZiB0aGVtIGluIGdlbmVyYWwuIEx5Y3VyZ3VzIG1hZGUgdGhlbSBicmlkZXMgb25seSB3aGVuIHRoZXkgd2VyZSBmdWxseSByaXBlIGFuZCBlYWdlciBmb3IgaXQsIGluIG9yZGVyIHRoYXQgaW50ZXJjb3Vyc2Ugd2l0aCBhIGh1c2JhbmQsIGNvbWluZyBhdCBhIHRpbWUgd2hlbiBuYXR1cmUgY3JhdmVkIGl0LCBtaWdodCBwcm9kdWNlIGEga2luZGx5IGxvdmUsIGluc3RlYWQgb2YgdGhlIHRpbW9yb3VzIGhhdGUgdGhhdCBmb2xsb3dzIHVubmF0dXJhbCBjb21wdWxzaW9uOyBhbHNvIHRoYXQgdGhlaXIgYm9kaWVzIG1pZ2h0IGJlIHZpZ29yb3VzIGVub3VnaCB0byBlbmR1cmUgdGhlIHN0cmFpbiBvZiBjb25jZXB0aW9uIGFuZCBjaGlsZC1iaXJ0aCwgY29udmluY2VkIGFzIGhlIHdhcyB0aGF0IG1hcnJpYWdlIGhhZCBubyBvdGhlciBlbmQgdGhhbiB0aGUgcHJvZHVjdGlvbiBvZiBjaGlsZHJlbi4gVGhlIFJvbWFucywgb24gdGhlIG90aGVyIGhhbmQsIGdhdmUgdGhlaXIgbWFpZGVucyBpbiBtYXJyaWFnZSB3aGVuIHRoZXkgd2VyZSB0d2VsdmUgeWVhcnMgb2xkLCBvciBldmVuIHlvdW5nZXIuIEluIHRoaXMgd2F5IG1vcmUgdGhhbiBhbnkgb3RoZXIsIGl0IHdhcyB0aG91Z2h0LCBib3RoIHRoZWlyIGJvZGllcyBhbmQgdGhlaXIgZGlzcG9zaXRpb25zIHdvdWxkIGJlIHB1cmUgYW5kIHVuZGVmaWxlZCB3aGVuIHRoZWlyIGh1c2JhbmRzIHRvb2sgY29udHJvbCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGNsZWFyLCB0aGVyZWZvcmUsIHRoYXQgb25lIHByYWN0aWNlIHJlZ2FyZGVkIG5hdHVyZSBtb3JlLCB3aXRoIGNoaWxkcmVuIGluIHZpZXc7IHRoZSBvdGhlciByZWdhcmRlZCBtb3JlIHRoZSBmb3JtYXRpb24gb2YgY2hhcmFjdGVyLCB3aXRoIG1hcnJpZWQgbGlmZSBpbiB2aWV3LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBzdXJlbHksIGJ5IGhpcyBjYXJlZnVsIGF0dGVudGlvbiB0byBib3lzLCBieSB0aGVpciBjb2xsZWN0aW9uIGludG8gY29tcGFuaWVzLCB0aGVpciBkaXNjaXBsaW5lIGFuZCBjb25zdGFudCBhc3NvY2lhdGlvbiwgYW5kIGJ5IGhpcyBwYWluc3Rha2luZyBhcnJhbmdlbWVudHMgZm9yIHRoZWlyIG1lYWxzIGFuZCBib2RpbHkgZXhlcmNpc2UgYW5kIHNwb3J0cywgTHljdXJndXMgcHJvdmVzIHRoYXQgTnVtYSB3YXMgbm8gbW9yZSB0aGFuIGFuIG9yZGluYXJ5IGxhd2dpdmVyLiBGb3IgTnVtYSBsZWZ0IHRoZSBicmluZ2luZyB1cCBvZiB5b3V0aHMgdG8gdGhlIHdpc2hlcyBvciBuZWNlc3NpdGllcyBvZiB0aGVpciBmYXRoZXJzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmF0aGVyIG1pZ2h0LCBpZiBoZSB3aXNoZWQsIG1ha2UgaGlzIHNvbiBhIHRpbGxlciBvZiB0aGUgc29pbCwgb3IgYSBzaGlwd3JpZ2h0LCBvciBtaWdodCB0ZWFjaCBoaW0gdG8gYmUgYSBzbWl0aCBvciBhIGZsdXRlLXBsYXllciwgYXMgaWYgaXQgd2VyZSBub3QgaW1wb3J0YW50IHRoYXQgYWxsIG9mIHRoZW0gc2hvdWxkIGJlIHRyYWluZWQgd2l0aCBvbmUgYW5kIHRoZSBzYW1lIGVuZCBpbiB2aWV3IGZyb20gdGhlIG91dHNldCwgYW5kIGhhdmUgdGhlaXIgZGlzcG9zaXRpb25zIGZvcm1lZCBhbGlrZTsgYnV0IHJhdGhlciBhcyBpZiB0aGV5IHdlcmUgbGlrZSBwYXNzZW5nZXJzIG9uIGEgc2hpcCwgZWFjaCBjb21pbmcgd2l0aCBhIGRpZmZlcmVudCBvYmplY3QgYW5kIHB1cnBvc2UsIGFuZCBlYWNoIHRoZXJlZm9yZSB1bml0aW5nIHdpdGggdGhlIHJlc3QgZm9yIHRoZSBjb21tb24gZ29vZCBvbmx5IGluIHRpbWVzIG9mIHBlcmlsLCB0aHJvdWdoIGZlYXIgb2YgcHJpdmF0ZSBsb3NzLCBidXQgb3RoZXJ3aXNlIGNvbnN1bHRpbmcgb25seSBoaXMgb3duIGludGVyZXN0cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCBpcyBub3Qgd29ydGggd2hpbGUgdG8gY2Vuc3VyZSB0aGUgY29tbW9uIHJ1biBvZiBsZWdpc2xhdG9ycywgd2hvIGZhaWwgdGhyb3VnaCBpZ25vcmFuY2Ugb3Igd2Vha25lc3MuIEJ1dCB3aGVuIGEgd2lzZSBtYW4gaGFkIGNvbnNlbnRlZCB0byBiZSBraW5nIG92ZXIgYSBwZW9wbGUgbmV3bHkgY29uc3RpdHV0ZWQgYW5kIHBsaWFudCB0byBoaXMgZXZlcnkgd2lzaCwgd2hhdCBzaG91bGQgaGF2ZSBiZWVuIGhpcyBmaXJzdCBjYXJlLCB1bmxlc3MgaXQgd2FzIHRoZSByZWFyaW5nIG9mIGJveXMgYW5kIHRoZSB0cmFpbmluZyBvZiB5b3V0aHMgc28gdGhhdCB0aGVyZSBtaWdodCBiZSBubyBjb25mdXNpbmcgZGlmZmVyZW5jZXMgaW4gdGhlaXIgY2hhcmFjdGVycywgYnV0IHRoYXQgdGhleSBtaWdodCBiZSBtb3VsZGVkIGFuZCBmYXNoaW9uZWQgZnJvbSB0aGUgdmVyeSBvdXRzZXQgc28gYXMgdG8gd2FsayBoYXJtb25pb3VzbHkgdG9nZXRoZXIgaW4gdGhlIHNhbWUgcGF0aCBvZiB2aXJ0dWU/IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGluZGVlZCwgd2FzIHdoYXQgaGVscGVkIEx5Y3VyZ3VzIHRvIHNlY3VyZSwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGUgc3RhYmlsaXR5IGFuZCBwZXJtYW5lbmNlIG9mIGhpcyBsYXdzLiBUaGUgU3BhcnRhbnMgdG9vayBvYXRocyB0byBtYWludGFpbiB0aGVzZSBsYXdzLCBpdCBpcyB0cnVlLCBidXQgdGhpcyB3b3VsZCBoYXZlIGF2YWlsZWQgbGl0dGxlIGhhZCBoZSBub3QsIGJ5IG1lYW5zIG9mIGhpcyB0cmFpbmluZyBhbmQgZWR1Y2F0aW9uIG9mIHRoZSBib3lzLCBpbmZ1c2VkIGhpcyBsYXdzLCBhcyBpdCB3ZXJlLCBpbnRvIHRoZWlyIGNoYXJhY3RlcnMsIGFuZCBtYWRlIHRoZSBlbXVsb3VzIGxvdmUgb2YgaGlzIGdvdmVybm1lbnQgYW4gaW50ZWdyYWwgcGFydCBvZiB0aGVpciByZWFyaW5nLiBUaGUgcmVzdWx0IHdhcyB0aGF0IGZvciBtb3JlIHRoYW4gZml2ZSBodW5kcmVkIHllYXJzIHRoZSBzb3ZlcmVpZ24gYW5kIGZ1bmRhbWVudGFsIGZlYXR1cmVzIG9mIGhpcyBsZWdpc2xhdGlvbiByZW1haW5lZCBpbiBmb3JjZSwgbGlrZSBhIHN0cm9uZyBhbmQgcGVuZXRyYXRpbmcgZHllLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkEgZmF0aGVyIG1pZ2h0LCBpZiBoZSB3aXNoZWQsIG1ha2UgaGlzIHNvbiBhIHRpbGxlciBvZiB0aGUgc29pbCwgb3IgYSBzaGlwd3JpZ2h0LCBvciBtaWdodCB0ZWFjaCBoaW0gdG8gYmUgYSBzbWl0aCBvciBhIGZsdXRlLXBsYXllciwgYXMgaWYgaXQgd2VyZSBub3QgaW1wb3J0YW50IHRoYXQgYWxsIG9mIHRoZW0gc2hvdWxkIGJlIHRyYWluZWQgd2l0aCBvbmUgYW5kIHRoZSBzYW1lIGVuZCBpbiB2aWV3IGZyb20gdGhlIG91dHNldCwgYW5kIGhhdmUgdGhlaXIgZGlzcG9zaXRpb25zIGZvcm1lZCBhbGlrZTsgYnV0IHJhdGhlciBhcyBpZiB0aGV5IHdlcmUgbGlrZSBwYXNzZW5nZXJzIG9uIGEgc2hpcCwgZWFjaCBjb21pbmcgd2l0aCBhIGRpZmZlcmVudCBvYmplY3QgYW5kIHB1cnBvc2UsIGFuZCBlYWNoIHRoZXJlZm9yZSB1bml0aW5nIHdpdGggdGhlIHJlc3QgZm9yIHRoZSBjb21tb24gZ29vZCBvbmx5IGluIHRpbWVzIG9mIHBlcmlsLCB0aHJvdWdoIGZlYXIgb2YgcHJpdmF0ZSBsb3NzLCBidXQgb3RoZXJ3aXNlIGNvbnN1bHRpbmcgb25seSBoaXMgb3duIGludGVyZXN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaXMgbm90IHdvcnRoIHdoaWxlIHRvIGNlbnN1cmUgdGhlIGNvbW1vbiBydW4gb2YgbGVnaXNsYXRvcnMsIHdobyBmYWlsIHRocm91Z2ggaWdub3JhbmNlIG9yIHdlYWtuZXNzLiBCdXQgd2hlbiBhIHdpc2UgbWFuIGhhZCBjb25zZW50ZWQgdG8gYmUga2luZyBvdmVyIGEgcGVvcGxlIG5ld2x5IGNvbnN0aXR1dGVkIGFuZCBwbGlhbnQgdG8gaGlzIGV2ZXJ5IHdpc2gsIHdoYXQgc2hvdWxkIGhhdmUgYmVlbiBoaXMgZmlyc3QgY2FyZSwgdW5sZXNzIGl0IHdhcyB0aGUgcmVhcmluZyBvZiBib3lzIGFuZCB0aGUgdHJhaW5pbmcgb2YgeW91dGhzIHNvIHRoYXQgdGhlcmUgbWlnaHQgYmUgbm8gY29uZnVzaW5nIGRpZmZlcmVuY2VzIGluIHRoZWlyIGNoYXJhY3RlcnMsIGJ1dCB0aGF0IHRoZXkgbWlnaHQgYmUgbW91bGRlZCBhbmQgZmFzaGlvbmVkIGZyb20gdGhlIHZlcnkgb3V0c2V0IHNvIGFzIHRvIHdhbGsgaGFybW9uaW91c2x5IHRvZ2V0aGVyIGluIHRoZSBzYW1lIHBhdGggb2YgdmlydHVlPyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGluZGVlZCwgd2FzIHdoYXQgaGVscGVkIEx5Y3VyZ3VzIHRvIHNlY3VyZSwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGUgc3RhYmlsaXR5IGFuZCBwZXJtYW5lbmNlIG9mIGhpcyBsYXdzLiBUaGUgU3BhcnRhbnMgdG9vayBvYXRocyB0byBtYWludGFpbiB0aGVzZSBsYXdzLCBpdCBpcyB0cnVlLCBidXQgdGhpcyB3b3VsZCBoYXZlIGF2YWlsZWQgbGl0dGxlIGhhZCBoZSBub3QsIGJ5IG1lYW5zIG9mIGhpcyB0cmFpbmluZyBhbmQgZWR1Y2F0aW9uIG9mIHRoZSBib3lzLCBpbmZ1c2VkIGhpcyBsYXdzLCBhcyBpdCB3ZXJlLCBpbnRvIHRoZWlyIGNoYXJhY3RlcnMsIGFuZCBtYWRlIHRoZSBlbXVsb3VzIGxvdmUgb2YgaGlzIGdvdmVybm1lbnQgYW4gaW50ZWdyYWwgcGFydCBvZiB0aGVpciByZWFyaW5nLiBUaGUgcmVzdWx0IHdhcyB0aGF0IGZvciBtb3JlIHRoYW4gZml2ZSBodW5kcmVkIHllYXJzIHRoZSBzb3ZlcmVpZ24gYW5kIGZ1bmRhbWVudGFsIGZlYXR1cmVzIG9mIGhpcyBsZWdpc2xhdGlvbiByZW1haW5lZCBpbiBmb3JjZSwgbGlrZSBhIHN0cm9uZyBhbmQgcGVuZXRyYXRpbmcgZHllLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCB3aGljaCB3YXMgdGhlIGVuZCBhbmQgYWltIG9mIE51bWEncyBnb3Zlcm5tZW50LCBuYW1lbHksIHRoZSBjb250aW51YW5jZSBvZiBwZWFjZSBhbmQgZnJpZW5kc2hpcCBiZXR3ZWVuIFJvbWUgYW5kIG90aGVyIG5hdGlvbnMsIHN0cmFpZ2h0d2F5IHZhbmlzaGVkIGZyb20gdGhlIGVhcnRoIHdpdGggaGltLiBBZnRlciBoaXMgZGVhdGggdGhlIGRvdWJsZSBkb29ycyBvZiB0aGUgdGVtcGxlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIwLjEiIHZhbGlkPSJ5ZXMiPk51bWEsIHh4LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGljaCBoZSBoYWQga2VwdCBjb250aW51b3VzbHkgY2xvc2VkLCBhcyBpZiBoZSByZWFsbHkgaGFkIHdhciBjYWdlZCBhbmQgY29uZmluZWQgdGhlcmUsIHdlcmUgdGhyb3duIHdpZGUgb3BlbiwgYW5kIEl0YWx5IHdhcyBmaWxsZWQgd2l0aCB0aGUgYmxvb2Qgb2YgdGhlIHNsYWluLiBUaHVzIG5vdCBldmVuIGZvciBhIGxpdHRsZSB0aW1lIGRpZCB0aGUgYmVhdXRpZnVsIGVkaWZpY2Ugb2YganVzdGljZSB3aGljaCBoZSBoYWQgcmVhcmVkIHJlbWFpbiBzdGFuZGluZywgYmVjYXVzZSBpdCBsYWNrZWQgdGhlIGNlbWVudCBvZiBlZHVjYXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGF0IHdoaWNoIHdhcyB0aGUgZW5kIGFuZCBhaW0gb2YgTnVtYSdzIGdvdmVybm1lbnQsIG5hbWVseSwgdGhlIGNvbnRpbnVhbmNlIG9mIHBlYWNlIGFuZCBmcmllbmRzaGlwIGJldHdlZW4gUm9tZSBhbmQgb3RoZXIgbmF0aW9ucywgc3RyYWlnaHR3YXkgdmFuaXNoZWQgZnJvbSB0aGUgZWFydGggd2l0aCBoaW0uIEFmdGVyIGhpcyBkZWF0aCB0aGUgZG91YmxlIGRvb3JzIG9mIHRoZSB0ZW1wbGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDIwLjEiIHZhbGlkPSJ5ZXMiPk51bWEsIHh4LiAxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGljaCBoZSBoYWQga2VwdCBjb250aW51b3VzbHkgY2xvc2VkLCBhcyBpZiBoZSByZWFsbHkgaGFkIHdhciBjYWdlZCBhbmQgY29uZmluZWQgdGhlcmUsIHdlcmUgdGhyb3duIHdpZGUgb3BlbiwgYW5kIEl0YWx5IHdhcyBmaWxsZWQgd2l0aCB0aGUgYmxvb2Qgb2YgdGhlIHNsYWluLiBUaHVzIG5vdCBldmVuIGZvciBhIGxpdHRsZSB0aW1lIGRpZCB0aGUgYmVhdXRpZnVsIGVkaWZpY2Ugb2YganVzdGljZSB3aGljaCBoZSBoYWQgcmVhcmVkIHJlbWFpbiBzdGFuZGluZywgYmVjYXVzZSBpdCBsYWNrZWQgdGhlIGNlbWVudCBvZiBlZHVjYXRpb24uCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMjAuMSIgdmFsaWQ9InllcyI+TnVtYSwgeHguIDEuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgdGhlbiE8L3E+IHNvbWUgb25lIHdpbGwgc2F5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndhcyBub3QgUm9tZSBhZHZhbmNlZCBhbmQgYmV0dGVyZWQgYnkgaGVyIHdhcnM/PC9xPiBUaGF0IGlzIGEgcXVlc3Rpb24gd2hpY2ggd2lsbCBuZWVkIGEgbG9uZyBhbnN3ZXIsIGlmIEkgYW0gdG8gc2F0aXNmeSBtZW4gd2hvIGhvbGQgdGhhdCBiZXR0ZXJtZW50IGNvbnNpc3RzIGluIHdlYWx0aCwgbHV4dXJ5IGFuZCBlbXBpcmUsIHJhdGhlciB0aGFuIGluIHNhZmV0eSwgZ2VudGxlbmVzcywgYW5kIHRoYXQgaW5kZXBlbmRlbmNlIHdoaWNoIGlzIGF0dGVuZGVkIGJ5IHJpZ2h0ZW91c25lc3MuIEhvd2V2ZXIsIGl0IHdpbGwgYmUgdGhvdWdodCwgSSBzdXBwb3NlLCB0byBmYXZvdXIgdGhlIHN1cGVyaW9yIGNsYWltcyBvZiBMeWN1cmd1cywgdGhhdCwgd2hlcmVhcyB0aGUgUm9tYW5zIGluY3JlYXNlZCBpbiBwb3dlciBhcyB0aGV5IGRpZCBhZnRlciBhYmFuZG9uaW5nIHRoZSBpbnN0aXR1dGlvbnMgb2YgTnVtYSdzIHRpbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPnRoZSBMYWNlZGFlbW9uaWFucywgb24gdGhlIG90aGVyIGhhbmQsIGp1c3QgYXMgc29vbiBhcyB0aGV5IGZvcnNvb2sgdGhlIHByZWNlcHRzIG9mIEx5Y3VyZ3VzLCBzYW5rIGZyb20gdGhlIGhpZ2hlc3QgdG8gdGhlIGxvd2VzdCBwbGFjZSwgbG9zdCB0aGVpciBzdXByZW1hY3kgb3ZlciB0aGUgR3JlZWtzLCBhbmQgd2VyZSBpbiBkYW5nZXIgb2YgdXR0ZXIgZGVzdHJ1Y3Rpb24uIE5ldmVydGhlbGVzcywgdGhpcyByZW1haW5zIGEgZ3JlYXQgZmVhdHVyZSBpbiBOdW1hJ3MgY2FyZWVyLCBhbmQgb25lIHJlYWxseSBkaXZpbmUsIHRoYXQgaGUgd2FzIGEgc3RyYW5nZXIsIGFuZCB5ZXQgd2FzIHN1bW1vbmVkIHRvIHRoZSB0aHJvbmUsIHdoZXJlIGhlIGNoYW5nZWQgdGhlIHdob2xlIG5hdHVyZSBvZiB0aGUgc3RhdGUgYnkgZm9yY2Ugb2YgcGVyc3Vhc2lvbiBhbG9uZSwgYW5kIG1hc3RlcmVkIGEgY2l0eSB3aGljaCB3YXMgbm90IHlldCBpbiBzeW1wYXRoeSB3aXRoIGhpcyB2aWV3czsgYW5kIHRoYXQgaGUgYWNjb21wbGlzaGVkIHRoaXMgd2l0aG91dCBhcHBlYWwgdG8gYXJtcyBvciBhbnkgdmlvbGVuY2UgKHVubGlrZSBMeWN1cmd1cywgd2hvIGxlZCB0aGUgbm9ibGVzIGluIGFybXMgYWdhaW5zdCB0aGUgY29tbW9ucyksIGJ1dCBieSBoaXMgd2lzZG9tIGFuZCBqdXN0aWNlIHdvbiB0aGUgaGVhcnRzIG9mIGFsbCB0aGUgY2l0aXplbnMgYW5kIGJyb3VnaHQgdGhlbSBpbnRvIGhhcm1vbnkuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIHRoZW4hPC9xPiBzb21lIG9uZSB3aWxsIHNheSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndhcyBub3QgUm9tZSBhZHZhbmNlZCBhbmQgYmV0dGVyZWQgYnkgaGVyIHdhcnM/PC9xPiBUaGF0IGlzIGEgcXVlc3Rpb24gd2hpY2ggd2lsbCBuZWVkIGEgbG9uZyBhbnN3ZXIsIGlmIEkgYW0gdG8gc2F0aXNmeSBtZW4gd2hvIGhvbGQgdGhhdCBiZXR0ZXJtZW50IGNvbnNpc3RzIGluIHdlYWx0aCwgbHV4dXJ5IGFuZCBlbXBpcmUsIHJhdGhlciB0aGFuIGluIHNhZmV0eSwgZ2VudGxlbmVzcywgYW5kIHRoYXQgaW5kZXBlbmRlbmNlIHdoaWNoIGlzIGF0dGVuZGVkIGJ5IHJpZ2h0ZW91c25lc3MuIEhvd2V2ZXIsIGl0IHdpbGwgYmUgdGhvdWdodCwgSSBzdXBwb3NlLCB0byBmYXZvdXIgdGhlIHN1cGVyaW9yIGNsYWltcyBvZiBMeWN1cmd1cywgdGhhdCwgd2hlcmVhcyB0aGUgUm9tYW5zIGluY3JlYXNlZCBpbiBwb3dlciBhcyB0aGV5IGRpZCBhZnRlciBhYmFuZG9uaW5nIHRoZSBpbnN0aXR1dGlvbnMgb2YgTnVtYSdzIHRpbWUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
